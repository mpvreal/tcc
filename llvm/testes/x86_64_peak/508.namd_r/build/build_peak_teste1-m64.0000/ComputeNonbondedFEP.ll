; ModuleID = 'ComputeNonbondedFEP.C'
source_filename = "ComputeNonbondedFEP.C"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%struct.nonbonded = type { [2 x ptr], [2 x ptr], [2 x ptr], [2 x ptr], [2 x ptr], [2 x i32], %class.Vector, ptr, ptr, ptr, ptr, i32, i32, double, double, i32, i32, i32, i32 }
%class.Vector = type { double, double, double }
%class.Pairlists = type { ptr, i32, i32 }
%class.ResizeArray = type { ptr, ptr }
%class.ResizeArrayRaw = type <{ ptr, ptr, i32, i32, i32, float, i32, [4 x i8] }>
%class.ComputeNonbondedWorkArrays = type { %class.ResizeArray, %class.ResizeArray.0, %class.ResizeArray, %class.ResizeArray, %class.ResizeArray, %class.ResizeArray, %class.ResizeArray, %class.ResizeArray, %class.ResizeArray, %class.ResizeArray, %class.ResizeArray, %class.ResizeArray, %class.ResizeArray, %class.ResizeArray, %class.ResizeArray, %class.ResizeArray, %class.ResizeArray, %class.ResizeArray.1, %class.ResizeArray.1 }
%class.ResizeArray.0 = type { ptr, ptr }
%class.ResizeArray.1 = type { ptr, ptr }
%class.ResizeArrayRaw.9 = type <{ ptr, ptr, i32, i32, i32, float, i32, [4 x i8] }>
%struct.CompAtom = type { %class.Vector, float, i16, i8, i8 }
%struct.CompAtomExt = type { i32 }
%class.Molecule = type { ptr, ptr, ptr, ptr, i32, i32, ptr }
%class.LJTable = type <{ ptr, ptr, i32, [4 x i8] }>
%class.ExclusionCheck = type { i32, i32, ptr }
%"struct.LJTable::TableEntry" = type { double, double }
%class.ResizeArrayRaw.11 = type <{ ptr, ptr, i32, i32, i32, float, i32, [4 x i8] }>

$_Z22pairlist_from_pairlistddddPK8CompAtomPKtiPtdPd = comdat any

$_Z24fep_vdw_forceandenergiesdddddddddiidddPdS_S_ = comdat any

$_ZN14ResizeArrayRawI6VectorE6resizeEi = comdat any

@_ZN20ComputeNonbondedUtil8commOnlyE = external local_unnamed_addr global i32, align 4
@_ZN20ComputeNonbondedUtil12dielectric_1E = external local_unnamed_addr global double, align 8
@_ZN20ComputeNonbondedUtil7ljTableE = external local_unnamed_addr global ptr, align 8
@_ZN20ComputeNonbondedUtil3molE = external local_unnamed_addr global ptr, align 8
@_ZN20ComputeNonbondedUtil11table_shortE = external local_unnamed_addr global ptr, align 8
@_ZN20ComputeNonbondedUtil7scalingE = external local_unnamed_addr global double, align 8
@_ZN20ComputeNonbondedUtil7scale14E = external local_unnamed_addr global double, align 8
@_ZN20ComputeNonbondedUtil9switchOn2E = external local_unnamed_addr global double, align 8
@_ZN20ComputeNonbondedUtil8r2_deltaE = external local_unnamed_addr global double, align 8
@_ZN20ComputeNonbondedUtil12r2_delta_expE = external local_unnamed_addr global i32, align 4
@_ZN20ComputeNonbondedUtil7cutoff2E = external local_unnamed_addr global double, align 8
@_ZN20ComputeNonbondedUtil19alchElecLambdaStartE = external local_unnamed_addr global double, align 8
@_ZN20ComputeNonbondedUtil16alchVdwLambdaEndE = external local_unnamed_addr global double, align 8
@_ZN20ComputeNonbondedUtil17alchVdwShiftCoeffE = external local_unnamed_addr global double, align 8
@_ZN20ComputeNonbondedUtil14Fep_WCA_repuOnE = external local_unnamed_addr global i32, align 4
@_ZN20ComputeNonbondedUtil14Fep_WCA_dispOnE = external local_unnamed_addr global i32, align 4
@_ZN20ComputeNonbondedUtil9WCA_rcut1E = external local_unnamed_addr global double, align 8
@_ZN20ComputeNonbondedUtil9WCA_rcut2E = external local_unnamed_addr global double, align 8
@_ZN20ComputeNonbondedUtil10alchLambdaE = external local_unnamed_addr global double, align 8
@_ZN20ComputeNonbondedUtil11alchLambda2E = external local_unnamed_addr global double, align 8
@_ZN20ComputeNonbondedUtil12alchDecoupleE = external local_unnamed_addr global i32, align 4
@_ZN20ComputeNonbondedUtil12fixedAtomsOnE = external local_unnamed_addr global i32, align 4
@.str = private unnamed_addr constant [27 x i8] c"pairlist i_upper mismatch!\00", align 1
@_ZN20ComputeNonbondedUtil8r2_tableE = external local_unnamed_addr global ptr, align 8
@_ZN20ComputeNonbondedUtil10slow_tableE = external local_unnamed_addr global ptr, align 8
@_ZN20ComputeNonbondedUtil13table_noshortE = external local_unnamed_addr global ptr, align 8

; Function Attrs: sspstrong uwtable
define dso_local void @_ZN20ComputeNonbondedUtil20calc_pair_energy_fepEP9nonbonded(ptr nocapture noundef readonly %0) local_unnamed_addr #0 align 2 {
  %2 = alloca [9 x i32], align 16
  %3 = alloca double, align 8
  %4 = alloca double, align 8
  %5 = alloca double, align 8
  %6 = load i32, ptr @_ZN20ComputeNonbondedUtil8commOnlyE, align 4, !tbaa !5
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %8, label %3852

8:                                                ; preds = %1
  %9 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 7
  %10 = load ptr, ptr %9, align 8, !tbaa !9
  %11 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 10
  %12 = load ptr, ptr %11, align 8, !tbaa !14
  %13 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 11
  %14 = load i32, ptr %13, align 8, !tbaa !15
  %15 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 12
  %16 = load i32, ptr %15, align 4, !tbaa !16
  %17 = getelementptr inbounds %class.Pairlists, ptr %12, i64 0, i32 1
  store i32 0, ptr %17, align 8, !tbaa !17
  %18 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 6
  %19 = load <2 x double>, ptr %18, align 8, !tbaa !19
  %20 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 6, i32 2
  %21 = load double, ptr %20, align 8, !tbaa !20
  %22 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 13
  %23 = load double, ptr %22, align 8, !tbaa !21
  %24 = fmul double %23, %23
  %25 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 14
  %26 = load double, ptr %25, align 8, !tbaa !22
  %27 = fmul double %26, %26
  %28 = load double, ptr @_ZN20ComputeNonbondedUtil12dielectric_1E, align 8, !tbaa !19
  %29 = load ptr, ptr @_ZN20ComputeNonbondedUtil7ljTableE, align 8, !tbaa !23
  %30 = load ptr, ptr @_ZN20ComputeNonbondedUtil3molE, align 8, !tbaa !23
  %31 = load ptr, ptr @_ZN20ComputeNonbondedUtil11table_shortE, align 8, !tbaa !23
  %32 = load double, ptr @_ZN20ComputeNonbondedUtil7scalingE, align 8, !tbaa !19
  %33 = load double, ptr @_ZN20ComputeNonbondedUtil7scale14E, align 8, !tbaa !19
  %34 = load double, ptr @_ZN20ComputeNonbondedUtil8r2_deltaE, align 8, !tbaa !19
  %35 = load i32, ptr @_ZN20ComputeNonbondedUtil12r2_delta_expE, align 4, !tbaa !5
  %36 = shl i32 %35, 6
  %37 = add i32 %36, -65472
  %38 = load double, ptr @_ZN20ComputeNonbondedUtil9switchOn2E, align 8, !tbaa !19
  %39 = load double, ptr @_ZN20ComputeNonbondedUtil7cutoff2E, align 8, !tbaa !19
  %40 = fsub double %39, %38
  %41 = fmul double %40, %40
  %42 = fmul double %40, %41
  %43 = fdiv double 1.000000e+00, %42
  %44 = load double, ptr @_ZN20ComputeNonbondedUtil19alchElecLambdaStartE, align 8, !tbaa !19
  %45 = load double, ptr @_ZN20ComputeNonbondedUtil16alchVdwLambdaEndE, align 8, !tbaa !19
  %46 = load i32, ptr @_ZN20ComputeNonbondedUtil14Fep_WCA_repuOnE, align 4, !tbaa !5
  %47 = load i32, ptr @_ZN20ComputeNonbondedUtil14Fep_WCA_dispOnE, align 4, !tbaa !5
  %48 = load double, ptr @_ZN20ComputeNonbondedUtil9WCA_rcut1E, align 8, !tbaa !19
  %49 = load double, ptr @_ZN20ComputeNonbondedUtil9WCA_rcut2E, align 8, !tbaa !19
  %50 = load double, ptr @_ZN20ComputeNonbondedUtil10alchLambdaE, align 8, !tbaa !19
  %51 = fsub double 1.000000e+00, %44
  %52 = fcmp oge double %50, %45
  %53 = fdiv double %50, %45
  %54 = select i1 %52, double 1.000000e+00, double %53
  %55 = load double, ptr @_ZN20ComputeNonbondedUtil17alchVdwShiftCoeffE, align 8, !tbaa !19
  %56 = fsub double 1.000000e+00, %54
  %57 = fmul double %55, %56
  %58 = load double, ptr @_ZN20ComputeNonbondedUtil11alchLambda2E, align 8, !tbaa !19
  %59 = fcmp oge double %58, %45
  %60 = fdiv double %58, %45
  %61 = select i1 %59, double 1.000000e+00, double %60
  %62 = fsub double 1.000000e+00, %61
  %63 = fmul double %55, %62
  %64 = insertelement <2 x double> poison, double %58, i64 0
  %65 = insertelement <2 x double> %64, double %50, i64 1
  %66 = insertelement <2 x double> poison, double %44, i64 0
  %67 = shufflevector <2 x double> %66, <2 x double> poison, <2 x i32> zeroinitializer
  %68 = fcmp ugt <2 x double> %65, %67
  %69 = fsub <2 x double> %65, %67
  %70 = insertelement <2 x double> poison, double %51, i64 0
  %71 = shufflevector <2 x double> %70, <2 x double> poison, <2 x i32> zeroinitializer
  %72 = fdiv <2 x double> %69, %71
  %73 = select <2 x i1> %68, <2 x double> %72, <2 x double> zeroinitializer
  %74 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %65
  %75 = fcmp ugt <2 x double> %74, %67
  %76 = fsub <2 x double> %74, %67
  %77 = fdiv <2 x double> %76, %71
  %78 = extractelement <2 x double> %74, i64 1
  %79 = fcmp oge double %78, %45
  %80 = fdiv double %78, %45
  %81 = select i1 %79, double 1.000000e+00, double %80
  %82 = fsub double 1.000000e+00, %81
  %83 = fmul double %55, %82
  %84 = select <2 x i1> %75, <2 x double> %77, <2 x double> zeroinitializer
  %85 = extractelement <2 x double> %74, i64 0
  %86 = fcmp oge double %85, %45
  %87 = fdiv double %85, %45
  %88 = select i1 %86, double 1.000000e+00, double %87
  %89 = fsub double 1.000000e+00, %88
  %90 = fmul double %55, %89
  call void @llvm.lifetime.start.p0(i64 36, ptr nonnull %2) #11
  %91 = load i32, ptr @_ZN20ComputeNonbondedUtil12alchDecoupleE, align 4, !tbaa !5
  %92 = icmp eq i32 %91, 0
  %93 = getelementptr inbounds [9 x i32], ptr %2, i64 0, i64 6
  store i32 2, ptr %93, align 8, !tbaa !5
  %94 = getelementptr inbounds [9 x i32], ptr %2, i64 0, i64 4
  %95 = getelementptr inbounds [9 x i32], ptr %2, i64 0, i64 7
  %96 = getelementptr inbounds [9 x i32], ptr %2, i64 0, i64 5
  %97 = getelementptr inbounds [9 x i32], ptr %2, i64 0, i64 8
  %98 = zext i1 %92 to i32
  %99 = select i1 %92, i32 2, i32 0
  store i32 %98, ptr %94, align 16, !tbaa !5
  store i32 99, ptr %95, align 4, !tbaa !5
  store <4 x i32> <i32 0, i32 1, i32 2, i32 1>, ptr %2, align 16, !tbaa !5
  store i32 99, ptr %96, align 4, !tbaa !5
  store i32 %99, ptr %97, align 16, !tbaa !5
  %100 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 5
  %101 = load i32, ptr %100, align 8, !tbaa !5
  %102 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 5, i64 1
  %103 = load i32, ptr %102, align 4, !tbaa !5
  %104 = load ptr, ptr %0, align 8, !tbaa !23
  %105 = getelementptr inbounds [2 x ptr], ptr %0, i64 0, i64 1
  %106 = load ptr, ptr %105, align 8, !tbaa !23
  %107 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 1
  %108 = load ptr, ptr %107, align 8, !tbaa !23
  %109 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 1, i64 1
  %110 = load ptr, ptr %109, align 8, !tbaa !23
  %111 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 9
  %112 = load ptr, ptr %111, align 8, !tbaa !24
  %113 = add nsw i32 %103, 5
  %114 = getelementptr inbounds %class.ResizeArray, ptr %112, i64 0, i32 1
  %115 = load ptr, ptr %114, align 8, !tbaa !25
  %116 = getelementptr inbounds %class.ResizeArrayRaw, ptr %115, i64 0, i32 2
  %117 = load i32, ptr %116, align 8, !tbaa !27
  %118 = icmp slt i32 %117, %113
  br i1 %118, label %119, label %157

119:                                              ; preds = %8
  %120 = getelementptr inbounds %class.ResizeArrayRaw, ptr %115, i64 0, i32 3
  %121 = load i32, ptr %120, align 4, !tbaa !30
  %122 = icmp slt i32 %121, %113
  br i1 %122, label %123, label %157

123:                                              ; preds = %119
  %124 = sitofp i32 %121 to float
  %125 = getelementptr inbounds %class.ResizeArrayRaw, ptr %115, i64 0, i32 5
  %126 = load float, ptr %125, align 4, !tbaa !31
  %127 = fmul float %126, %124
  %128 = fptosi float %127 to i32
  %129 = tail call i32 @llvm.smax.i32(i32 %128, i32 %113)
  %130 = sub nsw i32 %129, %121
  %131 = getelementptr inbounds %class.ResizeArrayRaw, ptr %115, i64 0, i32 6
  %132 = load i32, ptr %131, align 8, !tbaa !32
  %133 = icmp slt i32 %130, %132
  %134 = add nsw i32 %132, %121
  %135 = select i1 %133, i32 %134, i32 %129
  %136 = sext i32 %135 to i64
  %137 = shl nsw i64 %136, 1
  %138 = add nsw i64 %137, 31
  %139 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %138) #12
  %140 = getelementptr inbounds i8, ptr %139, i64 31
  %141 = ptrtoint ptr %140 to i64
  %142 = and i64 %141, 31
  %143 = sub nsw i64 0, %142
  %144 = getelementptr inbounds i8, ptr %140, i64 %143
  %145 = load ptr, ptr %115, align 8, !tbaa !33
  %146 = sext i32 %117 to i64
  %147 = shl nsw i64 %146, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %144, ptr align 1 %145, i64 %147, i1 false)
  %148 = icmp eq i32 %121, 0
  br i1 %148, label %154, label %149

149:                                              ; preds = %123
  %150 = getelementptr inbounds %class.ResizeArrayRaw, ptr %115, i64 0, i32 1
  %151 = load ptr, ptr %150, align 8, !tbaa !34
  %152 = icmp eq ptr %151, null
  br i1 %152, label %154, label %153

153:                                              ; preds = %149
  tail call void @_ZdaPv(ptr noundef nonnull %151) #13
  br label %154

154:                                              ; preds = %153, %149, %123
  %155 = getelementptr inbounds %class.ResizeArrayRaw, ptr %115, i64 0, i32 1
  store ptr %139, ptr %155, align 8, !tbaa !34
  store ptr %144, ptr %115, align 8, !tbaa !33
  store i32 %135, ptr %120, align 4, !tbaa !30
  %156 = load ptr, ptr %114, align 8, !tbaa !25
  br label %157

157:                                              ; preds = %8, %119, %154
  %158 = phi ptr [ %115, %8 ], [ %115, %119 ], [ %156, %154 ]
  store i32 %113, ptr %116, align 8, !tbaa !27
  %159 = load ptr, ptr %158, align 8, !tbaa !33
  %160 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %112, i64 0, i32 1, i32 1
  %161 = load ptr, ptr %160, align 8, !tbaa !35
  %162 = getelementptr inbounds %class.ResizeArrayRaw.9, ptr %161, i64 0, i32 2
  %163 = load i32, ptr %162, align 8, !tbaa !37
  %164 = icmp slt i32 %163, %113
  br i1 %164, label %165, label %203

165:                                              ; preds = %157
  %166 = getelementptr inbounds %class.ResizeArrayRaw.9, ptr %161, i64 0, i32 3
  %167 = load i32, ptr %166, align 4, !tbaa !39
  %168 = icmp slt i32 %167, %113
  br i1 %168, label %169, label %203

169:                                              ; preds = %165
  %170 = sitofp i32 %167 to float
  %171 = getelementptr inbounds %class.ResizeArrayRaw.9, ptr %161, i64 0, i32 5
  %172 = load float, ptr %171, align 4, !tbaa !40
  %173 = fmul float %172, %170
  %174 = fptosi float %173 to i32
  %175 = tail call i32 @llvm.smax.i32(i32 %174, i32 %113)
  %176 = sub nsw i32 %175, %167
  %177 = getelementptr inbounds %class.ResizeArrayRaw.9, ptr %161, i64 0, i32 6
  %178 = load i32, ptr %177, align 8, !tbaa !41
  %179 = icmp slt i32 %176, %178
  %180 = add nsw i32 %178, %167
  %181 = select i1 %179, i32 %180, i32 %175
  %182 = sext i32 %181 to i64
  %183 = shl nsw i64 %182, 3
  %184 = add nsw i64 %183, 31
  %185 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %184) #12
  %186 = getelementptr inbounds i8, ptr %185, i64 31
  %187 = ptrtoint ptr %186 to i64
  %188 = and i64 %187, 31
  %189 = sub nsw i64 0, %188
  %190 = getelementptr inbounds i8, ptr %186, i64 %189
  %191 = load ptr, ptr %161, align 8, !tbaa !42
  %192 = sext i32 %163 to i64
  %193 = shl nsw i64 %192, 3
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %190, ptr align 1 %191, i64 %193, i1 false)
  %194 = icmp eq i32 %167, 0
  br i1 %194, label %200, label %195

195:                                              ; preds = %169
  %196 = getelementptr inbounds %class.ResizeArrayRaw.9, ptr %161, i64 0, i32 1
  %197 = load ptr, ptr %196, align 8, !tbaa !43
  %198 = icmp eq ptr %197, null
  br i1 %198, label %200, label %199

199:                                              ; preds = %195
  tail call void @_ZdaPv(ptr noundef nonnull %197) #13
  br label %200

200:                                              ; preds = %199, %195, %169
  %201 = getelementptr inbounds %class.ResizeArrayRaw.9, ptr %161, i64 0, i32 1
  store ptr %185, ptr %201, align 8, !tbaa !43
  store ptr %190, ptr %161, align 8, !tbaa !42
  store i32 %181, ptr %166, align 4, !tbaa !39
  %202 = load ptr, ptr %160, align 8, !tbaa !35
  br label %203

203:                                              ; preds = %157, %165, %200
  %204 = phi ptr [ %161, %157 ], [ %161, %165 ], [ %202, %200 ]
  store i32 %113, ptr %162, align 8, !tbaa !37
  %205 = load ptr, ptr %204, align 8, !tbaa !42
  %206 = getelementptr inbounds i32, ptr %205, i64 1
  %207 = icmp eq i32 %14, 0
  %208 = icmp ne i32 %16, 0
  %209 = select i1 %207, i1 %208, i1 false
  %210 = select i1 %209, i32 0, i32 %113
  %211 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %112, i64 0, i32 2, i32 1
  %212 = load ptr, ptr %211, align 8, !tbaa !25
  %213 = getelementptr inbounds %class.ResizeArrayRaw, ptr %212, i64 0, i32 2
  %214 = load i32, ptr %213, align 8, !tbaa !27
  %215 = icmp slt i32 %214, %210
  br i1 %215, label %216, label %254

216:                                              ; preds = %203
  %217 = getelementptr inbounds %class.ResizeArrayRaw, ptr %212, i64 0, i32 3
  %218 = load i32, ptr %217, align 4, !tbaa !30
  %219 = icmp slt i32 %218, %210
  br i1 %219, label %220, label %254

220:                                              ; preds = %216
  %221 = sitofp i32 %218 to float
  %222 = getelementptr inbounds %class.ResizeArrayRaw, ptr %212, i64 0, i32 5
  %223 = load float, ptr %222, align 4, !tbaa !31
  %224 = fmul float %223, %221
  %225 = fptosi float %224 to i32
  %226 = tail call i32 @llvm.smax.i32(i32 %225, i32 %210)
  %227 = sub nsw i32 %226, %218
  %228 = getelementptr inbounds %class.ResizeArrayRaw, ptr %212, i64 0, i32 6
  %229 = load i32, ptr %228, align 8, !tbaa !32
  %230 = icmp slt i32 %227, %229
  %231 = add nsw i32 %229, %218
  %232 = select i1 %230, i32 %231, i32 %226
  %233 = sext i32 %232 to i64
  %234 = shl nsw i64 %233, 1
  %235 = add nsw i64 %234, 31
  %236 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %235) #12
  %237 = getelementptr inbounds i8, ptr %236, i64 31
  %238 = ptrtoint ptr %237 to i64
  %239 = and i64 %238, 31
  %240 = sub nsw i64 0, %239
  %241 = getelementptr inbounds i8, ptr %237, i64 %240
  %242 = load ptr, ptr %212, align 8, !tbaa !33
  %243 = sext i32 %214 to i64
  %244 = shl nsw i64 %243, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %241, ptr align 1 %242, i64 %244, i1 false)
  %245 = icmp eq i32 %218, 0
  br i1 %245, label %251, label %246

246:                                              ; preds = %220
  %247 = getelementptr inbounds %class.ResizeArrayRaw, ptr %212, i64 0, i32 1
  %248 = load ptr, ptr %247, align 8, !tbaa !34
  %249 = icmp eq ptr %248, null
  br i1 %249, label %251, label %250

250:                                              ; preds = %246
  tail call void @_ZdaPv(ptr noundef nonnull %248) #13
  br label %251

251:                                              ; preds = %250, %246, %220
  %252 = getelementptr inbounds %class.ResizeArrayRaw, ptr %212, i64 0, i32 1
  store ptr %236, ptr %252, align 8, !tbaa !34
  store ptr %241, ptr %212, align 8, !tbaa !33
  store i32 %232, ptr %217, align 4, !tbaa !30
  %253 = load ptr, ptr %211, align 8, !tbaa !25
  br label %254

254:                                              ; preds = %203, %216, %251
  %255 = phi ptr [ %212, %203 ], [ %212, %216 ], [ %253, %251 ]
  store i32 %210, ptr %213, align 8, !tbaa !27
  %256 = load ptr, ptr %255, align 8, !tbaa !33
  %257 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %112, i64 0, i32 3, i32 1
  %258 = load ptr, ptr %257, align 8, !tbaa !25
  %259 = getelementptr inbounds %class.ResizeArrayRaw, ptr %258, i64 0, i32 2
  %260 = load i32, ptr %259, align 8, !tbaa !27
  %261 = icmp slt i32 %260, %210
  br i1 %261, label %262, label %300

262:                                              ; preds = %254
  %263 = getelementptr inbounds %class.ResizeArrayRaw, ptr %258, i64 0, i32 3
  %264 = load i32, ptr %263, align 4, !tbaa !30
  %265 = icmp slt i32 %264, %210
  br i1 %265, label %266, label %300

266:                                              ; preds = %262
  %267 = sitofp i32 %264 to float
  %268 = getelementptr inbounds %class.ResizeArrayRaw, ptr %258, i64 0, i32 5
  %269 = load float, ptr %268, align 4, !tbaa !31
  %270 = fmul float %269, %267
  %271 = fptosi float %270 to i32
  %272 = tail call i32 @llvm.smax.i32(i32 %271, i32 %210)
  %273 = sub nsw i32 %272, %264
  %274 = getelementptr inbounds %class.ResizeArrayRaw, ptr %258, i64 0, i32 6
  %275 = load i32, ptr %274, align 8, !tbaa !32
  %276 = icmp slt i32 %273, %275
  %277 = add nsw i32 %275, %264
  %278 = select i1 %276, i32 %277, i32 %272
  %279 = sext i32 %278 to i64
  %280 = shl nsw i64 %279, 1
  %281 = add nsw i64 %280, 31
  %282 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %281) #12
  %283 = getelementptr inbounds i8, ptr %282, i64 31
  %284 = ptrtoint ptr %283 to i64
  %285 = and i64 %284, 31
  %286 = sub nsw i64 0, %285
  %287 = getelementptr inbounds i8, ptr %283, i64 %286
  %288 = load ptr, ptr %258, align 8, !tbaa !33
  %289 = sext i32 %260 to i64
  %290 = shl nsw i64 %289, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %287, ptr align 1 %288, i64 %290, i1 false)
  %291 = icmp eq i32 %264, 0
  br i1 %291, label %297, label %292

292:                                              ; preds = %266
  %293 = getelementptr inbounds %class.ResizeArrayRaw, ptr %258, i64 0, i32 1
  %294 = load ptr, ptr %293, align 8, !tbaa !34
  %295 = icmp eq ptr %294, null
  br i1 %295, label %297, label %296

296:                                              ; preds = %292
  tail call void @_ZdaPv(ptr noundef nonnull %294) #13
  br label %297

297:                                              ; preds = %296, %292, %266
  %298 = getelementptr inbounds %class.ResizeArrayRaw, ptr %258, i64 0, i32 1
  store ptr %282, ptr %298, align 8, !tbaa !34
  store ptr %287, ptr %258, align 8, !tbaa !33
  store i32 %278, ptr %263, align 4, !tbaa !30
  %299 = load ptr, ptr %257, align 8, !tbaa !25
  br label %300

300:                                              ; preds = %254, %262, %297
  %301 = phi ptr [ %258, %254 ], [ %258, %262 ], [ %299, %297 ]
  store i32 %210, ptr %259, align 8, !tbaa !27
  %302 = load ptr, ptr %301, align 8, !tbaa !33
  %303 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %112, i64 0, i32 4, i32 1
  %304 = load ptr, ptr %303, align 8, !tbaa !25
  %305 = getelementptr inbounds %class.ResizeArrayRaw, ptr %304, i64 0, i32 2
  %306 = load i32, ptr %305, align 8, !tbaa !27
  %307 = icmp slt i32 %306, %210
  br i1 %307, label %308, label %346

308:                                              ; preds = %300
  %309 = getelementptr inbounds %class.ResizeArrayRaw, ptr %304, i64 0, i32 3
  %310 = load i32, ptr %309, align 4, !tbaa !30
  %311 = icmp slt i32 %310, %210
  br i1 %311, label %312, label %346

312:                                              ; preds = %308
  %313 = sitofp i32 %310 to float
  %314 = getelementptr inbounds %class.ResizeArrayRaw, ptr %304, i64 0, i32 5
  %315 = load float, ptr %314, align 4, !tbaa !31
  %316 = fmul float %315, %313
  %317 = fptosi float %316 to i32
  %318 = tail call i32 @llvm.smax.i32(i32 %317, i32 %210)
  %319 = sub nsw i32 %318, %310
  %320 = getelementptr inbounds %class.ResizeArrayRaw, ptr %304, i64 0, i32 6
  %321 = load i32, ptr %320, align 8, !tbaa !32
  %322 = icmp slt i32 %319, %321
  %323 = add nsw i32 %321, %310
  %324 = select i1 %322, i32 %323, i32 %318
  %325 = sext i32 %324 to i64
  %326 = shl nsw i64 %325, 1
  %327 = add nsw i64 %326, 31
  %328 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %327) #12
  %329 = getelementptr inbounds i8, ptr %328, i64 31
  %330 = ptrtoint ptr %329 to i64
  %331 = and i64 %330, 31
  %332 = sub nsw i64 0, %331
  %333 = getelementptr inbounds i8, ptr %329, i64 %332
  %334 = load ptr, ptr %304, align 8, !tbaa !33
  %335 = sext i32 %306 to i64
  %336 = shl nsw i64 %335, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %333, ptr align 1 %334, i64 %336, i1 false)
  %337 = icmp eq i32 %310, 0
  br i1 %337, label %343, label %338

338:                                              ; preds = %312
  %339 = getelementptr inbounds %class.ResizeArrayRaw, ptr %304, i64 0, i32 1
  %340 = load ptr, ptr %339, align 8, !tbaa !34
  %341 = icmp eq ptr %340, null
  br i1 %341, label %343, label %342

342:                                              ; preds = %338
  tail call void @_ZdaPv(ptr noundef nonnull %340) #13
  br label %343

343:                                              ; preds = %342, %338, %312
  %344 = getelementptr inbounds %class.ResizeArrayRaw, ptr %304, i64 0, i32 1
  store ptr %328, ptr %344, align 8, !tbaa !34
  store ptr %333, ptr %304, align 8, !tbaa !33
  store i32 %324, ptr %309, align 4, !tbaa !30
  %345 = load ptr, ptr %303, align 8, !tbaa !25
  br label %346

346:                                              ; preds = %300, %308, %343
  %347 = phi ptr [ %304, %300 ], [ %304, %308 ], [ %345, %343 ]
  store i32 %210, ptr %305, align 8, !tbaa !27
  %348 = load ptr, ptr %347, align 8, !tbaa !33
  %349 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %112, i64 0, i32 5, i32 1
  %350 = load ptr, ptr %349, align 8, !tbaa !25
  %351 = getelementptr inbounds %class.ResizeArrayRaw, ptr %350, i64 0, i32 2
  %352 = load i32, ptr %351, align 8, !tbaa !27
  %353 = icmp slt i32 %352, %210
  br i1 %353, label %354, label %392

354:                                              ; preds = %346
  %355 = getelementptr inbounds %class.ResizeArrayRaw, ptr %350, i64 0, i32 3
  %356 = load i32, ptr %355, align 4, !tbaa !30
  %357 = icmp slt i32 %356, %210
  br i1 %357, label %358, label %392

358:                                              ; preds = %354
  %359 = sitofp i32 %356 to float
  %360 = getelementptr inbounds %class.ResizeArrayRaw, ptr %350, i64 0, i32 5
  %361 = load float, ptr %360, align 4, !tbaa !31
  %362 = fmul float %361, %359
  %363 = fptosi float %362 to i32
  %364 = tail call i32 @llvm.smax.i32(i32 %363, i32 %210)
  %365 = sub nsw i32 %364, %356
  %366 = getelementptr inbounds %class.ResizeArrayRaw, ptr %350, i64 0, i32 6
  %367 = load i32, ptr %366, align 8, !tbaa !32
  %368 = icmp slt i32 %365, %367
  %369 = add nsw i32 %367, %356
  %370 = select i1 %368, i32 %369, i32 %364
  %371 = sext i32 %370 to i64
  %372 = shl nsw i64 %371, 1
  %373 = add nsw i64 %372, 31
  %374 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %373) #12
  %375 = getelementptr inbounds i8, ptr %374, i64 31
  %376 = ptrtoint ptr %375 to i64
  %377 = and i64 %376, 31
  %378 = sub nsw i64 0, %377
  %379 = getelementptr inbounds i8, ptr %375, i64 %378
  %380 = load ptr, ptr %350, align 8, !tbaa !33
  %381 = sext i32 %352 to i64
  %382 = shl nsw i64 %381, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %379, ptr align 1 %380, i64 %382, i1 false)
  %383 = icmp eq i32 %356, 0
  br i1 %383, label %389, label %384

384:                                              ; preds = %358
  %385 = getelementptr inbounds %class.ResizeArrayRaw, ptr %350, i64 0, i32 1
  %386 = load ptr, ptr %385, align 8, !tbaa !34
  %387 = icmp eq ptr %386, null
  br i1 %387, label %389, label %388

388:                                              ; preds = %384
  tail call void @_ZdaPv(ptr noundef nonnull %386) #13
  br label %389

389:                                              ; preds = %388, %384, %358
  %390 = getelementptr inbounds %class.ResizeArrayRaw, ptr %350, i64 0, i32 1
  store ptr %374, ptr %390, align 8, !tbaa !34
  store ptr %379, ptr %350, align 8, !tbaa !33
  store i32 %370, ptr %355, align 4, !tbaa !30
  %391 = load ptr, ptr %349, align 8, !tbaa !25
  br label %392

392:                                              ; preds = %346, %354, %389
  %393 = phi ptr [ %350, %346 ], [ %350, %354 ], [ %391, %389 ]
  store i32 %210, ptr %351, align 8, !tbaa !27
  %394 = load ptr, ptr %393, align 8, !tbaa !33
  %395 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %112, i64 0, i32 6, i32 1
  %396 = load ptr, ptr %395, align 8, !tbaa !25
  %397 = getelementptr inbounds %class.ResizeArrayRaw, ptr %396, i64 0, i32 2
  %398 = load i32, ptr %397, align 8, !tbaa !27
  %399 = icmp slt i32 %398, %210
  br i1 %399, label %400, label %438

400:                                              ; preds = %392
  %401 = getelementptr inbounds %class.ResizeArrayRaw, ptr %396, i64 0, i32 3
  %402 = load i32, ptr %401, align 4, !tbaa !30
  %403 = icmp slt i32 %402, %210
  br i1 %403, label %404, label %438

404:                                              ; preds = %400
  %405 = sitofp i32 %402 to float
  %406 = getelementptr inbounds %class.ResizeArrayRaw, ptr %396, i64 0, i32 5
  %407 = load float, ptr %406, align 4, !tbaa !31
  %408 = fmul float %407, %405
  %409 = fptosi float %408 to i32
  %410 = tail call i32 @llvm.smax.i32(i32 %409, i32 %210)
  %411 = sub nsw i32 %410, %402
  %412 = getelementptr inbounds %class.ResizeArrayRaw, ptr %396, i64 0, i32 6
  %413 = load i32, ptr %412, align 8, !tbaa !32
  %414 = icmp slt i32 %411, %413
  %415 = add nsw i32 %413, %402
  %416 = select i1 %414, i32 %415, i32 %410
  %417 = sext i32 %416 to i64
  %418 = shl nsw i64 %417, 1
  %419 = add nsw i64 %418, 31
  %420 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %419) #12
  %421 = getelementptr inbounds i8, ptr %420, i64 31
  %422 = ptrtoint ptr %421 to i64
  %423 = and i64 %422, 31
  %424 = sub nsw i64 0, %423
  %425 = getelementptr inbounds i8, ptr %421, i64 %424
  %426 = load ptr, ptr %396, align 8, !tbaa !33
  %427 = sext i32 %398 to i64
  %428 = shl nsw i64 %427, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %425, ptr align 1 %426, i64 %428, i1 false)
  %429 = icmp eq i32 %402, 0
  br i1 %429, label %435, label %430

430:                                              ; preds = %404
  %431 = getelementptr inbounds %class.ResizeArrayRaw, ptr %396, i64 0, i32 1
  %432 = load ptr, ptr %431, align 8, !tbaa !34
  %433 = icmp eq ptr %432, null
  br i1 %433, label %435, label %434

434:                                              ; preds = %430
  tail call void @_ZdaPv(ptr noundef nonnull %432) #13
  br label %435

435:                                              ; preds = %434, %430, %404
  %436 = getelementptr inbounds %class.ResizeArrayRaw, ptr %396, i64 0, i32 1
  store ptr %420, ptr %436, align 8, !tbaa !34
  store ptr %425, ptr %396, align 8, !tbaa !33
  store i32 %416, ptr %401, align 4, !tbaa !30
  %437 = load ptr, ptr %395, align 8, !tbaa !25
  br label %438

438:                                              ; preds = %392, %400, %435
  %439 = phi ptr [ %396, %392 ], [ %396, %400 ], [ %437, %435 ]
  store i32 %210, ptr %397, align 8, !tbaa !27
  %440 = load ptr, ptr %439, align 8, !tbaa !33
  %441 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %112, i64 0, i32 15, i32 1
  %442 = load ptr, ptr %441, align 8, !tbaa !25
  %443 = getelementptr inbounds %class.ResizeArrayRaw, ptr %442, i64 0, i32 2
  %444 = load i32, ptr %443, align 8, !tbaa !27
  %445 = icmp slt i32 %444, %210
  br i1 %445, label %446, label %484

446:                                              ; preds = %438
  %447 = getelementptr inbounds %class.ResizeArrayRaw, ptr %442, i64 0, i32 3
  %448 = load i32, ptr %447, align 4, !tbaa !30
  %449 = icmp slt i32 %448, %210
  br i1 %449, label %450, label %484

450:                                              ; preds = %446
  %451 = sitofp i32 %448 to float
  %452 = getelementptr inbounds %class.ResizeArrayRaw, ptr %442, i64 0, i32 5
  %453 = load float, ptr %452, align 4, !tbaa !31
  %454 = fmul float %453, %451
  %455 = fptosi float %454 to i32
  %456 = tail call i32 @llvm.smax.i32(i32 %455, i32 %210)
  %457 = sub nsw i32 %456, %448
  %458 = getelementptr inbounds %class.ResizeArrayRaw, ptr %442, i64 0, i32 6
  %459 = load i32, ptr %458, align 8, !tbaa !32
  %460 = icmp slt i32 %457, %459
  %461 = add nsw i32 %459, %448
  %462 = select i1 %460, i32 %461, i32 %456
  %463 = sext i32 %462 to i64
  %464 = shl nsw i64 %463, 1
  %465 = add nsw i64 %464, 31
  %466 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %465) #12
  %467 = getelementptr inbounds i8, ptr %466, i64 31
  %468 = ptrtoint ptr %467 to i64
  %469 = and i64 %468, 31
  %470 = sub nsw i64 0, %469
  %471 = getelementptr inbounds i8, ptr %467, i64 %470
  %472 = load ptr, ptr %442, align 8, !tbaa !33
  %473 = sext i32 %444 to i64
  %474 = shl nsw i64 %473, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %471, ptr align 1 %472, i64 %474, i1 false)
  %475 = icmp eq i32 %448, 0
  br i1 %475, label %481, label %476

476:                                              ; preds = %450
  %477 = getelementptr inbounds %class.ResizeArrayRaw, ptr %442, i64 0, i32 1
  %478 = load ptr, ptr %477, align 8, !tbaa !34
  %479 = icmp eq ptr %478, null
  br i1 %479, label %481, label %480

480:                                              ; preds = %476
  tail call void @_ZdaPv(ptr noundef nonnull %478) #13
  br label %481

481:                                              ; preds = %480, %476, %450
  %482 = getelementptr inbounds %class.ResizeArrayRaw, ptr %442, i64 0, i32 1
  store ptr %466, ptr %482, align 8, !tbaa !34
  store ptr %471, ptr %442, align 8, !tbaa !33
  store i32 %462, ptr %447, align 4, !tbaa !30
  %483 = load ptr, ptr %441, align 8, !tbaa !25
  br label %484

484:                                              ; preds = %438, %446, %481
  %485 = phi ptr [ %442, %438 ], [ %442, %446 ], [ %483, %481 ]
  store i32 %210, ptr %443, align 8, !tbaa !27
  %486 = load ptr, ptr %485, align 8, !tbaa !33
  %487 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %112, i64 0, i32 16, i32 1
  %488 = load ptr, ptr %487, align 8, !tbaa !25
  %489 = getelementptr inbounds %class.ResizeArrayRaw, ptr %488, i64 0, i32 2
  %490 = load i32, ptr %489, align 8, !tbaa !27
  %491 = icmp slt i32 %490, %210
  br i1 %491, label %492, label %530

492:                                              ; preds = %484
  %493 = getelementptr inbounds %class.ResizeArrayRaw, ptr %488, i64 0, i32 3
  %494 = load i32, ptr %493, align 4, !tbaa !30
  %495 = icmp slt i32 %494, %210
  br i1 %495, label %496, label %530

496:                                              ; preds = %492
  %497 = sitofp i32 %494 to float
  %498 = getelementptr inbounds %class.ResizeArrayRaw, ptr %488, i64 0, i32 5
  %499 = load float, ptr %498, align 4, !tbaa !31
  %500 = fmul float %499, %497
  %501 = fptosi float %500 to i32
  %502 = tail call i32 @llvm.smax.i32(i32 %501, i32 %210)
  %503 = sub nsw i32 %502, %494
  %504 = getelementptr inbounds %class.ResizeArrayRaw, ptr %488, i64 0, i32 6
  %505 = load i32, ptr %504, align 8, !tbaa !32
  %506 = icmp slt i32 %503, %505
  %507 = add nsw i32 %505, %494
  %508 = select i1 %506, i32 %507, i32 %502
  %509 = sext i32 %508 to i64
  %510 = shl nsw i64 %509, 1
  %511 = add nsw i64 %510, 31
  %512 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %511) #12
  %513 = getelementptr inbounds i8, ptr %512, i64 31
  %514 = ptrtoint ptr %513 to i64
  %515 = and i64 %514, 31
  %516 = sub nsw i64 0, %515
  %517 = getelementptr inbounds i8, ptr %513, i64 %516
  %518 = load ptr, ptr %488, align 8, !tbaa !33
  %519 = sext i32 %490 to i64
  %520 = shl nsw i64 %519, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %517, ptr align 1 %518, i64 %520, i1 false)
  %521 = icmp eq i32 %494, 0
  br i1 %521, label %527, label %522

522:                                              ; preds = %496
  %523 = getelementptr inbounds %class.ResizeArrayRaw, ptr %488, i64 0, i32 1
  %524 = load ptr, ptr %523, align 8, !tbaa !34
  %525 = icmp eq ptr %524, null
  br i1 %525, label %527, label %526

526:                                              ; preds = %522
  tail call void @_ZdaPv(ptr noundef nonnull %524) #13
  br label %527

527:                                              ; preds = %526, %522, %496
  %528 = getelementptr inbounds %class.ResizeArrayRaw, ptr %488, i64 0, i32 1
  store ptr %512, ptr %528, align 8, !tbaa !34
  store ptr %517, ptr %488, align 8, !tbaa !33
  store i32 %508, ptr %493, align 4, !tbaa !30
  %529 = load ptr, ptr %487, align 8, !tbaa !25
  br label %530

530:                                              ; preds = %484, %492, %527
  %531 = phi ptr [ %488, %484 ], [ %488, %492 ], [ %529, %527 ]
  store i32 %210, ptr %489, align 8, !tbaa !27
  %532 = load ptr, ptr %531, align 8, !tbaa !33
  %533 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %112, i64 0, i32 9, i32 1
  %534 = load ptr, ptr %533, align 8, !tbaa !25
  %535 = getelementptr inbounds %class.ResizeArrayRaw, ptr %534, i64 0, i32 2
  %536 = load i32, ptr %535, align 8, !tbaa !27
  %537 = icmp slt i32 %536, %210
  br i1 %537, label %538, label %576

538:                                              ; preds = %530
  %539 = getelementptr inbounds %class.ResizeArrayRaw, ptr %534, i64 0, i32 3
  %540 = load i32, ptr %539, align 4, !tbaa !30
  %541 = icmp slt i32 %540, %210
  br i1 %541, label %542, label %576

542:                                              ; preds = %538
  %543 = sitofp i32 %540 to float
  %544 = getelementptr inbounds %class.ResizeArrayRaw, ptr %534, i64 0, i32 5
  %545 = load float, ptr %544, align 4, !tbaa !31
  %546 = fmul float %545, %543
  %547 = fptosi float %546 to i32
  %548 = tail call i32 @llvm.smax.i32(i32 %547, i32 %210)
  %549 = sub nsw i32 %548, %540
  %550 = getelementptr inbounds %class.ResizeArrayRaw, ptr %534, i64 0, i32 6
  %551 = load i32, ptr %550, align 8, !tbaa !32
  %552 = icmp slt i32 %549, %551
  %553 = add nsw i32 %551, %540
  %554 = select i1 %552, i32 %553, i32 %548
  %555 = sext i32 %554 to i64
  %556 = shl nsw i64 %555, 1
  %557 = add nsw i64 %556, 31
  %558 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %557) #12
  %559 = getelementptr inbounds i8, ptr %558, i64 31
  %560 = ptrtoint ptr %559 to i64
  %561 = and i64 %560, 31
  %562 = sub nsw i64 0, %561
  %563 = getelementptr inbounds i8, ptr %559, i64 %562
  %564 = load ptr, ptr %534, align 8, !tbaa !33
  %565 = sext i32 %536 to i64
  %566 = shl nsw i64 %565, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %563, ptr align 1 %564, i64 %566, i1 false)
  %567 = icmp eq i32 %540, 0
  br i1 %567, label %573, label %568

568:                                              ; preds = %542
  %569 = getelementptr inbounds %class.ResizeArrayRaw, ptr %534, i64 0, i32 1
  %570 = load ptr, ptr %569, align 8, !tbaa !34
  %571 = icmp eq ptr %570, null
  br i1 %571, label %573, label %572

572:                                              ; preds = %568
  tail call void @_ZdaPv(ptr noundef nonnull %570) #13
  br label %573

573:                                              ; preds = %572, %568, %542
  %574 = getelementptr inbounds %class.ResizeArrayRaw, ptr %534, i64 0, i32 1
  store ptr %558, ptr %574, align 8, !tbaa !34
  store ptr %563, ptr %534, align 8, !tbaa !33
  store i32 %554, ptr %539, align 4, !tbaa !30
  %575 = load ptr, ptr %533, align 8, !tbaa !25
  br label %576

576:                                              ; preds = %530, %538, %573
  %577 = phi ptr [ %534, %530 ], [ %534, %538 ], [ %575, %573 ]
  store i32 %210, ptr %535, align 8, !tbaa !27
  %578 = load ptr, ptr %577, align 8, !tbaa !33
  %579 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %112, i64 0, i32 10, i32 1
  %580 = load ptr, ptr %579, align 8, !tbaa !25
  %581 = getelementptr inbounds %class.ResizeArrayRaw, ptr %580, i64 0, i32 2
  %582 = load i32, ptr %581, align 8, !tbaa !27
  %583 = icmp slt i32 %582, %210
  br i1 %583, label %584, label %622

584:                                              ; preds = %576
  %585 = getelementptr inbounds %class.ResizeArrayRaw, ptr %580, i64 0, i32 3
  %586 = load i32, ptr %585, align 4, !tbaa !30
  %587 = icmp slt i32 %586, %210
  br i1 %587, label %588, label %622

588:                                              ; preds = %584
  %589 = sitofp i32 %586 to float
  %590 = getelementptr inbounds %class.ResizeArrayRaw, ptr %580, i64 0, i32 5
  %591 = load float, ptr %590, align 4, !tbaa !31
  %592 = fmul float %591, %589
  %593 = fptosi float %592 to i32
  %594 = tail call i32 @llvm.smax.i32(i32 %593, i32 %210)
  %595 = sub nsw i32 %594, %586
  %596 = getelementptr inbounds %class.ResizeArrayRaw, ptr %580, i64 0, i32 6
  %597 = load i32, ptr %596, align 8, !tbaa !32
  %598 = icmp slt i32 %595, %597
  %599 = add nsw i32 %597, %586
  %600 = select i1 %598, i32 %599, i32 %594
  %601 = sext i32 %600 to i64
  %602 = shl nsw i64 %601, 1
  %603 = add nsw i64 %602, 31
  %604 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %603) #12
  %605 = getelementptr inbounds i8, ptr %604, i64 31
  %606 = ptrtoint ptr %605 to i64
  %607 = and i64 %606, 31
  %608 = sub nsw i64 0, %607
  %609 = getelementptr inbounds i8, ptr %605, i64 %608
  %610 = load ptr, ptr %580, align 8, !tbaa !33
  %611 = sext i32 %582 to i64
  %612 = shl nsw i64 %611, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %609, ptr align 1 %610, i64 %612, i1 false)
  %613 = icmp eq i32 %586, 0
  br i1 %613, label %619, label %614

614:                                              ; preds = %588
  %615 = getelementptr inbounds %class.ResizeArrayRaw, ptr %580, i64 0, i32 1
  %616 = load ptr, ptr %615, align 8, !tbaa !34
  %617 = icmp eq ptr %616, null
  br i1 %617, label %619, label %618

618:                                              ; preds = %614
  tail call void @_ZdaPv(ptr noundef nonnull %616) #13
  br label %619

619:                                              ; preds = %618, %614, %588
  %620 = getelementptr inbounds %class.ResizeArrayRaw, ptr %580, i64 0, i32 1
  store ptr %604, ptr %620, align 8, !tbaa !34
  store ptr %609, ptr %580, align 8, !tbaa !33
  store i32 %600, ptr %585, align 4, !tbaa !30
  %621 = load ptr, ptr %579, align 8, !tbaa !25
  br label %622

622:                                              ; preds = %576, %584, %619
  %623 = phi ptr [ %580, %576 ], [ %580, %584 ], [ %621, %619 ]
  store i32 %210, ptr %581, align 8, !tbaa !27
  %624 = load ptr, ptr %623, align 8, !tbaa !33
  %625 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %112, i64 0, i32 11, i32 1
  %626 = load ptr, ptr %625, align 8, !tbaa !25
  %627 = getelementptr inbounds %class.ResizeArrayRaw, ptr %626, i64 0, i32 2
  %628 = load i32, ptr %627, align 8, !tbaa !27
  %629 = icmp slt i32 %628, %210
  br i1 %629, label %630, label %668

630:                                              ; preds = %622
  %631 = getelementptr inbounds %class.ResizeArrayRaw, ptr %626, i64 0, i32 3
  %632 = load i32, ptr %631, align 4, !tbaa !30
  %633 = icmp slt i32 %632, %210
  br i1 %633, label %634, label %668

634:                                              ; preds = %630
  %635 = sitofp i32 %632 to float
  %636 = getelementptr inbounds %class.ResizeArrayRaw, ptr %626, i64 0, i32 5
  %637 = load float, ptr %636, align 4, !tbaa !31
  %638 = fmul float %637, %635
  %639 = fptosi float %638 to i32
  %640 = tail call i32 @llvm.smax.i32(i32 %639, i32 %210)
  %641 = sub nsw i32 %640, %632
  %642 = getelementptr inbounds %class.ResizeArrayRaw, ptr %626, i64 0, i32 6
  %643 = load i32, ptr %642, align 8, !tbaa !32
  %644 = icmp slt i32 %641, %643
  %645 = add nsw i32 %643, %632
  %646 = select i1 %644, i32 %645, i32 %640
  %647 = sext i32 %646 to i64
  %648 = shl nsw i64 %647, 1
  %649 = add nsw i64 %648, 31
  %650 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %649) #12
  %651 = getelementptr inbounds i8, ptr %650, i64 31
  %652 = ptrtoint ptr %651 to i64
  %653 = and i64 %652, 31
  %654 = sub nsw i64 0, %653
  %655 = getelementptr inbounds i8, ptr %651, i64 %654
  %656 = load ptr, ptr %626, align 8, !tbaa !33
  %657 = sext i32 %628 to i64
  %658 = shl nsw i64 %657, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %655, ptr align 1 %656, i64 %658, i1 false)
  %659 = icmp eq i32 %632, 0
  br i1 %659, label %665, label %660

660:                                              ; preds = %634
  %661 = getelementptr inbounds %class.ResizeArrayRaw, ptr %626, i64 0, i32 1
  %662 = load ptr, ptr %661, align 8, !tbaa !34
  %663 = icmp eq ptr %662, null
  br i1 %663, label %665, label %664

664:                                              ; preds = %660
  tail call void @_ZdaPv(ptr noundef nonnull %662) #13
  br label %665

665:                                              ; preds = %664, %660, %634
  %666 = getelementptr inbounds %class.ResizeArrayRaw, ptr %626, i64 0, i32 1
  store ptr %650, ptr %666, align 8, !tbaa !34
  store ptr %655, ptr %626, align 8, !tbaa !33
  store i32 %646, ptr %631, align 4, !tbaa !30
  %667 = load ptr, ptr %625, align 8, !tbaa !25
  br label %668

668:                                              ; preds = %622, %630, %665
  %669 = phi ptr [ %626, %622 ], [ %626, %630 ], [ %667, %665 ]
  store i32 %210, ptr %627, align 8, !tbaa !27
  %670 = load ptr, ptr %669, align 8, !tbaa !33
  %671 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %112, i64 0, i32 12, i32 1
  %672 = load ptr, ptr %671, align 8, !tbaa !25
  %673 = getelementptr inbounds %class.ResizeArrayRaw, ptr %672, i64 0, i32 2
  %674 = load i32, ptr %673, align 8, !tbaa !27
  %675 = icmp slt i32 %674, %210
  br i1 %675, label %676, label %714

676:                                              ; preds = %668
  %677 = getelementptr inbounds %class.ResizeArrayRaw, ptr %672, i64 0, i32 3
  %678 = load i32, ptr %677, align 4, !tbaa !30
  %679 = icmp slt i32 %678, %210
  br i1 %679, label %680, label %714

680:                                              ; preds = %676
  %681 = sitofp i32 %678 to float
  %682 = getelementptr inbounds %class.ResizeArrayRaw, ptr %672, i64 0, i32 5
  %683 = load float, ptr %682, align 4, !tbaa !31
  %684 = fmul float %683, %681
  %685 = fptosi float %684 to i32
  %686 = tail call i32 @llvm.smax.i32(i32 %685, i32 %210)
  %687 = sub nsw i32 %686, %678
  %688 = getelementptr inbounds %class.ResizeArrayRaw, ptr %672, i64 0, i32 6
  %689 = load i32, ptr %688, align 8, !tbaa !32
  %690 = icmp slt i32 %687, %689
  %691 = add nsw i32 %689, %678
  %692 = select i1 %690, i32 %691, i32 %686
  %693 = sext i32 %692 to i64
  %694 = shl nsw i64 %693, 1
  %695 = add nsw i64 %694, 31
  %696 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %695) #12
  %697 = getelementptr inbounds i8, ptr %696, i64 31
  %698 = ptrtoint ptr %697 to i64
  %699 = and i64 %698, 31
  %700 = sub nsw i64 0, %699
  %701 = getelementptr inbounds i8, ptr %697, i64 %700
  %702 = load ptr, ptr %672, align 8, !tbaa !33
  %703 = sext i32 %674 to i64
  %704 = shl nsw i64 %703, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %701, ptr align 1 %702, i64 %704, i1 false)
  %705 = icmp eq i32 %678, 0
  br i1 %705, label %711, label %706

706:                                              ; preds = %680
  %707 = getelementptr inbounds %class.ResizeArrayRaw, ptr %672, i64 0, i32 1
  %708 = load ptr, ptr %707, align 8, !tbaa !34
  %709 = icmp eq ptr %708, null
  br i1 %709, label %711, label %710

710:                                              ; preds = %706
  tail call void @_ZdaPv(ptr noundef nonnull %708) #13
  br label %711

711:                                              ; preds = %710, %706, %680
  %712 = getelementptr inbounds %class.ResizeArrayRaw, ptr %672, i64 0, i32 1
  store ptr %696, ptr %712, align 8, !tbaa !34
  store ptr %701, ptr %672, align 8, !tbaa !33
  store i32 %692, ptr %677, align 4, !tbaa !30
  %713 = load ptr, ptr %671, align 8, !tbaa !25
  br label %714

714:                                              ; preds = %668, %676, %711
  %715 = phi ptr [ %672, %668 ], [ %672, %676 ], [ %713, %711 ]
  store i32 %210, ptr %673, align 8, !tbaa !27
  %716 = load ptr, ptr %715, align 8, !tbaa !33
  %717 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %112, i64 0, i32 13, i32 1
  %718 = load ptr, ptr %717, align 8, !tbaa !25
  %719 = getelementptr inbounds %class.ResizeArrayRaw, ptr %718, i64 0, i32 2
  %720 = load i32, ptr %719, align 8, !tbaa !27
  %721 = icmp slt i32 %720, %210
  br i1 %721, label %722, label %760

722:                                              ; preds = %714
  %723 = getelementptr inbounds %class.ResizeArrayRaw, ptr %718, i64 0, i32 3
  %724 = load i32, ptr %723, align 4, !tbaa !30
  %725 = icmp slt i32 %724, %210
  br i1 %725, label %726, label %760

726:                                              ; preds = %722
  %727 = sitofp i32 %724 to float
  %728 = getelementptr inbounds %class.ResizeArrayRaw, ptr %718, i64 0, i32 5
  %729 = load float, ptr %728, align 4, !tbaa !31
  %730 = fmul float %729, %727
  %731 = fptosi float %730 to i32
  %732 = tail call i32 @llvm.smax.i32(i32 %731, i32 %210)
  %733 = sub nsw i32 %732, %724
  %734 = getelementptr inbounds %class.ResizeArrayRaw, ptr %718, i64 0, i32 6
  %735 = load i32, ptr %734, align 8, !tbaa !32
  %736 = icmp slt i32 %733, %735
  %737 = add nsw i32 %735, %724
  %738 = select i1 %736, i32 %737, i32 %732
  %739 = sext i32 %738 to i64
  %740 = shl nsw i64 %739, 1
  %741 = add nsw i64 %740, 31
  %742 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %741) #12
  %743 = getelementptr inbounds i8, ptr %742, i64 31
  %744 = ptrtoint ptr %743 to i64
  %745 = and i64 %744, 31
  %746 = sub nsw i64 0, %745
  %747 = getelementptr inbounds i8, ptr %743, i64 %746
  %748 = load ptr, ptr %718, align 8, !tbaa !33
  %749 = sext i32 %720 to i64
  %750 = shl nsw i64 %749, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %747, ptr align 1 %748, i64 %750, i1 false)
  %751 = icmp eq i32 %724, 0
  br i1 %751, label %757, label %752

752:                                              ; preds = %726
  %753 = getelementptr inbounds %class.ResizeArrayRaw, ptr %718, i64 0, i32 1
  %754 = load ptr, ptr %753, align 8, !tbaa !34
  %755 = icmp eq ptr %754, null
  br i1 %755, label %757, label %756

756:                                              ; preds = %752
  tail call void @_ZdaPv(ptr noundef nonnull %754) #13
  br label %757

757:                                              ; preds = %756, %752, %726
  %758 = getelementptr inbounds %class.ResizeArrayRaw, ptr %718, i64 0, i32 1
  store ptr %742, ptr %758, align 8, !tbaa !34
  store ptr %747, ptr %718, align 8, !tbaa !33
  store i32 %738, ptr %723, align 4, !tbaa !30
  %759 = load ptr, ptr %717, align 8, !tbaa !25
  br label %760

760:                                              ; preds = %714, %722, %757
  %761 = phi ptr [ %718, %714 ], [ %718, %722 ], [ %759, %757 ]
  store i32 %210, ptr %719, align 8, !tbaa !27
  %762 = load ptr, ptr %761, align 8, !tbaa !33
  %763 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %112, i64 0, i32 14, i32 1
  %764 = load ptr, ptr %763, align 8, !tbaa !25
  %765 = getelementptr inbounds %class.ResizeArrayRaw, ptr %764, i64 0, i32 2
  %766 = load i32, ptr %765, align 8, !tbaa !27
  %767 = icmp slt i32 %766, %210
  br i1 %767, label %768, label %806

768:                                              ; preds = %760
  %769 = getelementptr inbounds %class.ResizeArrayRaw, ptr %764, i64 0, i32 3
  %770 = load i32, ptr %769, align 4, !tbaa !30
  %771 = icmp slt i32 %770, %210
  br i1 %771, label %772, label %806

772:                                              ; preds = %768
  %773 = sitofp i32 %770 to float
  %774 = getelementptr inbounds %class.ResizeArrayRaw, ptr %764, i64 0, i32 5
  %775 = load float, ptr %774, align 4, !tbaa !31
  %776 = fmul float %775, %773
  %777 = fptosi float %776 to i32
  %778 = tail call i32 @llvm.smax.i32(i32 %777, i32 %210)
  %779 = sub nsw i32 %778, %770
  %780 = getelementptr inbounds %class.ResizeArrayRaw, ptr %764, i64 0, i32 6
  %781 = load i32, ptr %780, align 8, !tbaa !32
  %782 = icmp slt i32 %779, %781
  %783 = add nsw i32 %781, %770
  %784 = select i1 %782, i32 %783, i32 %778
  %785 = sext i32 %784 to i64
  %786 = shl nsw i64 %785, 1
  %787 = add nsw i64 %786, 31
  %788 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %787) #12
  %789 = getelementptr inbounds i8, ptr %788, i64 31
  %790 = ptrtoint ptr %789 to i64
  %791 = and i64 %790, 31
  %792 = sub nsw i64 0, %791
  %793 = getelementptr inbounds i8, ptr %789, i64 %792
  %794 = load ptr, ptr %764, align 8, !tbaa !33
  %795 = sext i32 %766 to i64
  %796 = shl nsw i64 %795, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %793, ptr align 1 %794, i64 %796, i1 false)
  %797 = icmp eq i32 %770, 0
  br i1 %797, label %803, label %798

798:                                              ; preds = %772
  %799 = getelementptr inbounds %class.ResizeArrayRaw, ptr %764, i64 0, i32 1
  %800 = load ptr, ptr %799, align 8, !tbaa !34
  %801 = icmp eq ptr %800, null
  br i1 %801, label %803, label %802

802:                                              ; preds = %798
  tail call void @_ZdaPv(ptr noundef nonnull %800) #13
  br label %803

803:                                              ; preds = %802, %798, %772
  %804 = getelementptr inbounds %class.ResizeArrayRaw, ptr %764, i64 0, i32 1
  store ptr %788, ptr %804, align 8, !tbaa !34
  store ptr %793, ptr %764, align 8, !tbaa !33
  store i32 %784, ptr %769, align 4, !tbaa !30
  %805 = load ptr, ptr %763, align 8, !tbaa !25
  br label %806

806:                                              ; preds = %760, %768, %803
  %807 = phi ptr [ %764, %760 ], [ %764, %768 ], [ %805, %803 ]
  store i32 %210, ptr %765, align 8, !tbaa !27
  %808 = load ptr, ptr %807, align 8, !tbaa !33
  br i1 %209, label %941, label %809

809:                                              ; preds = %806
  %810 = icmp sgt i32 %103, 0
  br i1 %810, label %811, label %953

811:                                              ; preds = %809
  %812 = zext i32 %103 to i64
  %813 = and i64 %812, 1
  %814 = icmp eq i32 %103, 1
  br i1 %814, label %847, label %815

815:                                              ; preds = %811
  %816 = and i64 %812, 4294967294
  br label %817

817:                                              ; preds = %842, %815
  %818 = phi i64 [ 0, %815 ], [ %844, %842 ]
  %819 = phi i32 [ 0, %815 ], [ %843, %842 ]
  %820 = phi i64 [ 0, %815 ], [ %845, %842 ]
  %821 = getelementptr inbounds %struct.CompAtom, ptr %106, i64 %818, i32 4
  %822 = load i8, ptr %821, align 1
  %823 = and i8 %822, 7
  %824 = icmp eq i8 %823, 0
  br i1 %824, label %830, label %825

825:                                              ; preds = %817
  %826 = trunc i64 %818 to i16
  %827 = add nsw i32 %819, 1
  %828 = sext i32 %819 to i64
  %829 = getelementptr inbounds i16, ptr %256, i64 %828
  store i16 %826, ptr %829, align 2, !tbaa !44
  br label %830

830:                                              ; preds = %817, %825
  %831 = phi i32 [ %827, %825 ], [ %819, %817 ]
  %832 = or i64 %818, 1
  %833 = getelementptr inbounds %struct.CompAtom, ptr %106, i64 %832, i32 4
  %834 = load i8, ptr %833, align 1
  %835 = and i8 %834, 7
  %836 = icmp eq i8 %835, 0
  br i1 %836, label %842, label %837

837:                                              ; preds = %830
  %838 = trunc i64 %832 to i16
  %839 = add nsw i32 %831, 1
  %840 = sext i32 %831 to i64
  %841 = getelementptr inbounds i16, ptr %256, i64 %840
  store i16 %838, ptr %841, align 2, !tbaa !44
  br label %842

842:                                              ; preds = %837, %830
  %843 = phi i32 [ %839, %837 ], [ %831, %830 ]
  %844 = add nuw nsw i64 %818, 2
  %845 = add i64 %820, 2
  %846 = icmp eq i64 %845, %816
  br i1 %846, label %847, label %817

847:                                              ; preds = %842, %811
  %848 = phi i32 [ undef, %811 ], [ %843, %842 ]
  %849 = phi i64 [ 0, %811 ], [ %844, %842 ]
  %850 = phi i32 [ 0, %811 ], [ %843, %842 ]
  %851 = icmp eq i64 %813, 0
  br i1 %851, label %862, label %852

852:                                              ; preds = %847
  %853 = getelementptr inbounds %struct.CompAtom, ptr %106, i64 %849, i32 4
  %854 = load i8, ptr %853, align 1
  %855 = and i8 %854, 7
  %856 = icmp eq i8 %855, 0
  br i1 %856, label %862, label %857

857:                                              ; preds = %852
  %858 = trunc i64 %849 to i16
  %859 = add nsw i32 %850, 1
  %860 = sext i32 %850 to i64
  %861 = getelementptr inbounds i16, ptr %256, i64 %860
  store i16 %858, ptr %861, align 2, !tbaa !44
  br label %862

862:                                              ; preds = %852, %857, %847
  %863 = phi i32 [ %848, %847 ], [ %859, %857 ], [ %850, %852 ]
  %864 = icmp eq i32 %863, 0
  br i1 %864, label %872, label %865

865:                                              ; preds = %862
  %866 = add nsw i32 %863, -1
  %867 = sext i32 %866 to i64
  %868 = getelementptr inbounds i16, ptr %256, i64 %867
  %869 = load i16, ptr %868, align 2, !tbaa !44
  %870 = sext i32 %863 to i64
  %871 = getelementptr inbounds i16, ptr %256, i64 %870
  store i16 %869, ptr %871, align 2, !tbaa !44
  br label %872

872:                                              ; preds = %865, %862
  %873 = load i32, ptr @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4, !tbaa !5
  %874 = icmp ne i32 %873, 0
  %875 = icmp sgt i32 %863, 0
  %876 = and i1 %874, %875
  br i1 %876, label %877, label %953

877:                                              ; preds = %872
  %878 = zext i32 %863 to i64
  %879 = and i64 %878, 1
  %880 = icmp eq i32 %863, 1
  br i1 %880, label %915, label %881

881:                                              ; preds = %877
  %882 = and i64 %878, 4294967294
  br label %883

883:                                              ; preds = %910, %881
  %884 = phi i64 [ 0, %881 ], [ %912, %910 ]
  %885 = phi i32 [ 0, %881 ], [ %911, %910 ]
  %886 = phi i64 [ 0, %881 ], [ %913, %910 ]
  %887 = getelementptr inbounds i16, ptr %256, i64 %884
  %888 = load i16, ptr %887, align 2, !tbaa !44
  %889 = zext i16 %888 to i64
  %890 = getelementptr inbounds %struct.CompAtomExt, ptr %110, i64 %889
  %891 = load i32, ptr %890, align 4
  %892 = icmp sgt i32 %891, -1
  br i1 %892, label %893, label %897

893:                                              ; preds = %883
  %894 = add nsw i32 %885, 1
  %895 = sext i32 %885 to i64
  %896 = getelementptr inbounds i16, ptr %302, i64 %895
  store i16 %888, ptr %896, align 2, !tbaa !44
  br label %897

897:                                              ; preds = %883, %893
  %898 = phi i32 [ %885, %883 ], [ %894, %893 ]
  %899 = or i64 %884, 1
  %900 = getelementptr inbounds i16, ptr %256, i64 %899
  %901 = load i16, ptr %900, align 2, !tbaa !44
  %902 = zext i16 %901 to i64
  %903 = getelementptr inbounds %struct.CompAtomExt, ptr %110, i64 %902
  %904 = load i32, ptr %903, align 4
  %905 = icmp sgt i32 %904, -1
  br i1 %905, label %906, label %910

906:                                              ; preds = %897
  %907 = add nsw i32 %898, 1
  %908 = sext i32 %898 to i64
  %909 = getelementptr inbounds i16, ptr %302, i64 %908
  store i16 %901, ptr %909, align 2, !tbaa !44
  br label %910

910:                                              ; preds = %906, %897
  %911 = phi i32 [ %898, %897 ], [ %907, %906 ]
  %912 = add nuw nsw i64 %884, 2
  %913 = add i64 %886, 2
  %914 = icmp eq i64 %913, %882
  br i1 %914, label %915, label %883

915:                                              ; preds = %910, %877
  %916 = phi i32 [ undef, %877 ], [ %911, %910 ]
  %917 = phi i64 [ 0, %877 ], [ %912, %910 ]
  %918 = phi i32 [ 0, %877 ], [ %911, %910 ]
  %919 = icmp eq i64 %879, 0
  br i1 %919, label %931, label %920

920:                                              ; preds = %915
  %921 = getelementptr inbounds i16, ptr %256, i64 %917
  %922 = load i16, ptr %921, align 2, !tbaa !44
  %923 = zext i16 %922 to i64
  %924 = getelementptr inbounds %struct.CompAtomExt, ptr %110, i64 %923
  %925 = load i32, ptr %924, align 4
  %926 = icmp sgt i32 %925, -1
  br i1 %926, label %927, label %931

927:                                              ; preds = %920
  %928 = add nsw i32 %918, 1
  %929 = sext i32 %918 to i64
  %930 = getelementptr inbounds i16, ptr %302, i64 %929
  store i16 %922, ptr %930, align 2, !tbaa !44
  br label %931

931:                                              ; preds = %920, %927, %915
  %932 = phi i32 [ %916, %915 ], [ %918, %920 ], [ %928, %927 ]
  %933 = icmp eq i32 %932, 0
  br i1 %933, label %953, label %934

934:                                              ; preds = %931
  %935 = add nsw i32 %932, -1
  %936 = sext i32 %935 to i64
  %937 = getelementptr inbounds i16, ptr %302, i64 %936
  %938 = load i16, ptr %937, align 2, !tbaa !44
  %939 = sext i32 %932 to i64
  %940 = getelementptr inbounds i16, ptr %302, i64 %939
  store i16 %938, ptr %940, align 2, !tbaa !44
  br label %953

941:                                              ; preds = %806
  %942 = load ptr, ptr %12, align 8, !tbaa !46
  %943 = load i32, ptr %17, align 8, !tbaa !17
  %944 = add nsw i32 %943, 1
  store i32 %944, ptr %17, align 8, !tbaa !17
  %945 = sext i32 %943 to i64
  %946 = getelementptr inbounds i16, ptr %942, i64 %945
  %947 = load i16, ptr %946, align 2, !tbaa !44
  %948 = zext i16 %947 to i32
  %949 = icmp eq i32 %101, %948
  br i1 %949, label %970, label %950

950:                                              ; preds = %941
  tail call void @_Z8NAMD_bugPKc(ptr noundef nonnull @.str)
  %951 = load ptr, ptr %12, align 8, !tbaa !46
  %952 = load i32, ptr %17, align 8, !tbaa !17
  br label %970

953:                                              ; preds = %809, %934, %931, %872
  %954 = phi i32 [ %863, %934 ], [ %863, %931 ], [ %863, %872 ], [ 0, %809 ]
  %955 = phi i32 [ %932, %934 ], [ 0, %931 ], [ 0, %872 ], [ 0, %809 ]
  %956 = load i32, ptr %17, align 8, !tbaa !17
  %957 = trunc i32 %101 to i16
  %958 = load ptr, ptr %12, align 8, !tbaa !46
  %959 = sext i32 %956 to i64
  %960 = getelementptr inbounds i16, ptr %958, i64 %959
  store i16 %957, ptr %960, align 2, !tbaa !44
  %961 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 16
  %962 = load i32, ptr %961, align 4, !tbaa !47
  %963 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 18
  %964 = load i32, ptr %963, align 4, !tbaa !48
  %965 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 3, i64 1
  %966 = load ptr, ptr %965, align 8, !tbaa !23
  %967 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 3
  %968 = load ptr, ptr %967, align 8, !tbaa !23
  %969 = add nsw i32 %956, 2
  store i32 %969, ptr %17, align 8, !tbaa !17
  br label %986

970:                                              ; preds = %950, %941
  %971 = phi i32 [ %944, %941 ], [ %952, %950 ]
  %972 = phi ptr [ %942, %941 ], [ %951, %950 ]
  %973 = sext i32 %971 to i64
  %974 = getelementptr inbounds i16, ptr %972, i64 %973
  %975 = load i16, ptr %974, align 2, !tbaa !44
  %976 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 16
  %977 = load i32, ptr %976, align 4, !tbaa !47
  %978 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 18
  %979 = load i32, ptr %978, align 4, !tbaa !48
  %980 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 3, i64 1
  %981 = load ptr, ptr %980, align 8, !tbaa !23
  %982 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 3
  %983 = load ptr, ptr %982, align 8, !tbaa !23
  %984 = add nsw i32 %971, 1
  store i32 %984, ptr %17, align 8, !tbaa !17
  %985 = zext i16 %975 to i32
  br label %986

986:                                              ; preds = %970, %953
  %987 = phi i32 [ %977, %970 ], [ %962, %953 ]
  %988 = phi i32 [ %979, %970 ], [ %964, %953 ]
  %989 = phi ptr [ %981, %970 ], [ %966, %953 ]
  %990 = phi ptr [ %983, %970 ], [ %968, %953 ]
  %991 = phi i32 [ 0, %970 ], [ %955, %953 ]
  %992 = phi i32 [ 0, %970 ], [ %954, %953 ]
  %993 = phi i32 [ %985, %970 ], [ 0, %953 ]
  %994 = add nsw i32 %988, -1
  %995 = icmp slt i32 %993, %101
  br i1 %995, label %996, label %3802

996:                                              ; preds = %986
  %997 = getelementptr inbounds %class.Molecule, ptr %30, i64 0, i32 1
  %998 = getelementptr inbounds %class.Molecule, ptr %30, i64 0, i32 4
  %999 = getelementptr inbounds %class.Molecule, ptr %30, i64 0, i32 2
  %1000 = getelementptr inbounds %class.Molecule, ptr %30, i64 0, i32 3
  %1001 = ptrtoint ptr %486 to i64
  %1002 = add nsw i32 %103, 30
  %1003 = getelementptr inbounds %class.Pairlists, ptr %12, i64 0, i32 2
  %1004 = getelementptr inbounds i16, ptr %486, i64 1
  %1005 = ptrtoint ptr %532 to i64
  %1006 = ptrtoint ptr %394 to i64
  %1007 = ptrtoint ptr %440 to i64
  %1008 = ptrtoint ptr %578 to i64
  %1009 = ptrtoint ptr %624 to i64
  %1010 = ptrtoint ptr %670 to i64
  %1011 = ptrtoint ptr %716 to i64
  %1012 = ptrtoint ptr %762 to i64
  %1013 = ptrtoint ptr %808 to i64
  %1014 = getelementptr inbounds %class.LJTable, ptr %29, i64 0, i32 1
  %1015 = getelementptr inbounds %class.LJTable, ptr %29, i64 0, i32 2
  %1016 = fneg double %32
  %1017 = fadd double %33, -1.000000e+00
  %1018 = fadd double %1017, 1.000000e+00
  %1019 = fneg <2 x double> %73
  %1020 = fneg <2 x double> %84
  %1021 = insertelement <2 x double> poison, double %27, i64 0
  %1022 = shufflevector <2 x double> %1021, <2 x double> poison, <2 x i32> zeroinitializer
  %1023 = extractelement <2 x double> %73, i64 1
  %1024 = extractelement <2 x double> %84, i64 1
  %1025 = extractelement <2 x double> %73, i64 1
  %1026 = extractelement <2 x double> %84, i64 1
  br label %1027

1027:                                             ; preds = %996, %3787
  %1028 = phi i32 [ 0, %996 ], [ %3796, %3787 ]
  %1029 = phi double [ 0.000000e+00, %996 ], [ %3795, %3787 ]
  %1030 = phi double [ 0.000000e+00, %996 ], [ %3794, %3787 ]
  %1031 = phi i32 [ %993, %996 ], [ %3793, %3787 ]
  %1032 = phi ptr [ null, %996 ], [ %3792, %3787 ]
  %1033 = phi ptr [ null, %996 ], [ %3791, %3787 ]
  %1034 = phi ptr [ null, %996 ], [ %3790, %3787 ]
  %1035 = phi i32 [ 0, %996 ], [ %3789, %3787 ]
  %1036 = phi i32 [ %987, %996 ], [ %3788, %3787 ]
  %1037 = phi <2 x double> [ zeroinitializer, %996 ], [ %3797, %3787 ]
  %1038 = phi <2 x double> [ zeroinitializer, %996 ], [ %3798, %3787 ]
  %1039 = phi <2 x double> [ zeroinitializer, %996 ], [ %3799, %3787 ]
  %1040 = phi <2 x double> [ zeroinitializer, %996 ], [ %3800, %3787 ]
  %1041 = sext i32 %1031 to i64
  %1042 = getelementptr inbounds %struct.CompAtom, ptr %104, i64 %1041
  %1043 = getelementptr inbounds %struct.CompAtomExt, ptr %108, i64 %1041
  br i1 %209, label %1056, label %1044

1044:                                             ; preds = %1027
  %1045 = getelementptr inbounds %struct.CompAtom, ptr %104, i64 %1041, i32 4
  %1046 = load i8, ptr %1045, align 1
  %1047 = lshr i8 %1046, 3
  %1048 = and i8 %1047, 15
  %1049 = zext i8 %1048 to i32
  %1050 = icmp eq i8 %1048, 0
  br i1 %1050, label %1056, label %1051

1051:                                             ; preds = %1044
  %1052 = icmp eq i32 %1036, 0
  br i1 %1052, label %1056, label %1053

1053:                                             ; preds = %1051
  %1054 = add nsw i32 %1036, -1
  %1055 = add nsw i32 %1031, %1049
  br label %3787

1056:                                             ; preds = %1051, %1044, %1027
  %1057 = phi i32 [ %1036, %1027 ], [ %1036, %1044 ], [ %994, %1051 ]
  %1058 = load <2 x double>, ptr %1042, align 8, !tbaa !19
  %1059 = fadd <2 x double> %19, %1058
  %1060 = getelementptr inbounds %class.Vector, ptr %1042, i64 0, i32 2
  %1061 = load double, ptr %1060, align 8, !tbaa !49
  %1062 = fadd double %21, %1061
  %1063 = getelementptr inbounds %struct.CompAtom, ptr %104, i64 %1041, i32 3
  %1064 = load i8, ptr %1063, align 2, !tbaa !51
  %1065 = zext i8 %1064 to i32
  br i1 %209, label %2858, label %1066

1066:                                             ; preds = %1056
  %1067 = load i32, ptr %1043, align 4
  %1068 = shl i32 %1067, 2
  %1069 = ashr exact i32 %1068, 2
  %1070 = load ptr, ptr %997, align 8, !tbaa !52
  %1071 = sext i32 %1069 to i64
  %1072 = getelementptr inbounds %class.ExclusionCheck, ptr %1070, i64 %1071
  %1073 = load i32, ptr %1072, align 8, !tbaa !54
  %1074 = getelementptr inbounds %class.ExclusionCheck, ptr %1070, i64 %1071, i32 1
  %1075 = load i32, ptr %1074, align 4, !tbaa !56
  %1076 = getelementptr inbounds %class.ExclusionCheck, ptr %1070, i64 %1071, i32 2
  %1077 = load ptr, ptr %1076, align 8, !tbaa !57
  %1078 = icmp eq ptr %1077, null
  br i1 %1078, label %1083, label %1079

1079:                                             ; preds = %1066
  %1080 = sext i32 %1073 to i64
  %1081 = sub nsw i64 0, %1080
  %1082 = getelementptr inbounds i8, ptr %1077, i64 %1081
  br label %1309

1083:                                             ; preds = %1066
  %1084 = icmp eq ptr %1032, null
  br i1 %1084, label %1172, label %1085

1085:                                             ; preds = %1083
  %1086 = load i32, ptr %1033, align 4, !tbaa !5
  %1087 = icmp slt i32 %1086, 1
  br i1 %1087, label %1135, label %1088

1088:                                             ; preds = %1085
  %1089 = add nuw i32 %1086, 1
  %1090 = zext i32 %1089 to i64
  %1091 = add nsw i64 %1090, -1
  %1092 = add nsw i64 %1090, -2
  %1093 = and i64 %1091, 3
  %1094 = icmp ult i64 %1092, 3
  br i1 %1094, label %1122, label %1095

1095:                                             ; preds = %1088
  %1096 = and i64 %1091, -4
  br label %1097

1097:                                             ; preds = %1097, %1095
  %1098 = phi i64 [ 1, %1095 ], [ %1119, %1097 ]
  %1099 = phi i64 [ 0, %1095 ], [ %1120, %1097 ]
  %1100 = getelementptr inbounds i32, ptr %1033, i64 %1098
  %1101 = load i32, ptr %1100, align 4, !tbaa !5
  %1102 = sext i32 %1101 to i64
  %1103 = getelementptr inbounds i8, ptr %1032, i64 %1102
  store i8 0, ptr %1103, align 1, !tbaa !58
  %1104 = add nuw nsw i64 %1098, 1
  %1105 = getelementptr inbounds i32, ptr %1033, i64 %1104
  %1106 = load i32, ptr %1105, align 4, !tbaa !5
  %1107 = sext i32 %1106 to i64
  %1108 = getelementptr inbounds i8, ptr %1032, i64 %1107
  store i8 0, ptr %1108, align 1, !tbaa !58
  %1109 = add nuw nsw i64 %1098, 2
  %1110 = getelementptr inbounds i32, ptr %1033, i64 %1109
  %1111 = load i32, ptr %1110, align 4, !tbaa !5
  %1112 = sext i32 %1111 to i64
  %1113 = getelementptr inbounds i8, ptr %1032, i64 %1112
  store i8 0, ptr %1113, align 1, !tbaa !58
  %1114 = add nuw nsw i64 %1098, 3
  %1115 = getelementptr inbounds i32, ptr %1033, i64 %1114
  %1116 = load i32, ptr %1115, align 4, !tbaa !5
  %1117 = sext i32 %1116 to i64
  %1118 = getelementptr inbounds i8, ptr %1032, i64 %1117
  store i8 0, ptr %1118, align 1, !tbaa !58
  %1119 = add nuw nsw i64 %1098, 4
  %1120 = add i64 %1099, 4
  %1121 = icmp eq i64 %1120, %1096
  br i1 %1121, label %1122, label %1097

1122:                                             ; preds = %1097, %1088
  %1123 = phi i64 [ 1, %1088 ], [ %1119, %1097 ]
  %1124 = icmp eq i64 %1093, 0
  br i1 %1124, label %1135, label %1125

1125:                                             ; preds = %1122, %1125
  %1126 = phi i64 [ %1132, %1125 ], [ %1123, %1122 ]
  %1127 = phi i64 [ %1133, %1125 ], [ 0, %1122 ]
  %1128 = getelementptr inbounds i32, ptr %1033, i64 %1126
  %1129 = load i32, ptr %1128, align 4, !tbaa !5
  %1130 = sext i32 %1129 to i64
  %1131 = getelementptr inbounds i8, ptr %1032, i64 %1130
  store i8 0, ptr %1131, align 1, !tbaa !58
  %1132 = add nuw nsw i64 %1126, 1
  %1133 = add i64 %1127, 1
  %1134 = icmp eq i64 %1133, %1093
  br i1 %1134, label %1135, label %1125, !llvm.loop !59

1135:                                             ; preds = %1122, %1125, %1085
  %1136 = load i32, ptr %1034, align 4, !tbaa !5
  %1137 = icmp slt i32 %1136, 1
  br i1 %1137, label %1192, label %1138

1138:                                             ; preds = %1135
  %1139 = add nuw i32 %1136, 1
  %1140 = zext i32 %1139 to i64
  %1141 = add nsw i64 %1140, -1
  %1142 = add nsw i64 %1140, -2
  %1143 = and i64 %1141, 3
  %1144 = icmp ult i64 %1142, 3
  br i1 %1144, label %1179, label %1145

1145:                                             ; preds = %1138
  %1146 = and i64 %1141, -4
  br label %1147

1147:                                             ; preds = %1147, %1145
  %1148 = phi i64 [ 1, %1145 ], [ %1169, %1147 ]
  %1149 = phi i64 [ 0, %1145 ], [ %1170, %1147 ]
  %1150 = getelementptr inbounds i32, ptr %1034, i64 %1148
  %1151 = load i32, ptr %1150, align 4, !tbaa !5
  %1152 = sext i32 %1151 to i64
  %1153 = getelementptr inbounds i8, ptr %1032, i64 %1152
  store i8 0, ptr %1153, align 1, !tbaa !58
  %1154 = add nuw nsw i64 %1148, 1
  %1155 = getelementptr inbounds i32, ptr %1034, i64 %1154
  %1156 = load i32, ptr %1155, align 4, !tbaa !5
  %1157 = sext i32 %1156 to i64
  %1158 = getelementptr inbounds i8, ptr %1032, i64 %1157
  store i8 0, ptr %1158, align 1, !tbaa !58
  %1159 = add nuw nsw i64 %1148, 2
  %1160 = getelementptr inbounds i32, ptr %1034, i64 %1159
  %1161 = load i32, ptr %1160, align 4, !tbaa !5
  %1162 = sext i32 %1161 to i64
  %1163 = getelementptr inbounds i8, ptr %1032, i64 %1162
  store i8 0, ptr %1163, align 1, !tbaa !58
  %1164 = add nuw nsw i64 %1148, 3
  %1165 = getelementptr inbounds i32, ptr %1034, i64 %1164
  %1166 = load i32, ptr %1165, align 4, !tbaa !5
  %1167 = sext i32 %1166 to i64
  %1168 = getelementptr inbounds i8, ptr %1032, i64 %1167
  store i8 0, ptr %1168, align 1, !tbaa !58
  %1169 = add nuw nsw i64 %1148, 4
  %1170 = add i64 %1149, 4
  %1171 = icmp eq i64 %1170, %1146
  br i1 %1171, label %1179, label %1147

1172:                                             ; preds = %1083
  %1173 = load i32, ptr %998, align 8, !tbaa !61
  %1174 = call i32 @llvm.smax.i32(i32 %1173, i32 -1)
  %1175 = sext i32 %1174 to i64
  %1176 = call noalias noundef nonnull ptr @_Znam(i64 noundef %1175) #12
  %1177 = load i32, ptr %998, align 8, !tbaa !61
  %1178 = sext i32 %1177 to i64
  call void @llvm.memset.p0.i64(ptr nonnull align 1 %1176, i8 0, i64 %1178, i1 false)
  br label %1192

1179:                                             ; preds = %1147, %1138
  %1180 = phi i64 [ 1, %1138 ], [ %1169, %1147 ]
  %1181 = icmp eq i64 %1143, 0
  br i1 %1181, label %1192, label %1182

1182:                                             ; preds = %1179, %1182
  %1183 = phi i64 [ %1189, %1182 ], [ %1180, %1179 ]
  %1184 = phi i64 [ %1190, %1182 ], [ 0, %1179 ]
  %1185 = getelementptr inbounds i32, ptr %1034, i64 %1183
  %1186 = load i32, ptr %1185, align 4, !tbaa !5
  %1187 = sext i32 %1186 to i64
  %1188 = getelementptr inbounds i8, ptr %1032, i64 %1187
  store i8 0, ptr %1188, align 1, !tbaa !58
  %1189 = add nuw nsw i64 %1183, 1
  %1190 = add i64 %1184, 1
  %1191 = icmp eq i64 %1190, %1143
  br i1 %1191, label %1192, label %1182, !llvm.loop !62

1192:                                             ; preds = %1179, %1182, %1135, %1172
  %1193 = phi ptr [ %1176, %1172 ], [ %1032, %1135 ], [ %1032, %1182 ], [ %1032, %1179 ]
  %1194 = load i32, ptr %1043, align 4
  %1195 = shl i32 %1194, 2
  %1196 = ashr exact i32 %1195, 2
  %1197 = load ptr, ptr %999, align 8, !tbaa !63
  %1198 = sext i32 %1196 to i64
  %1199 = getelementptr inbounds ptr, ptr %1197, i64 %1198
  %1200 = load ptr, ptr %1199, align 8, !tbaa !23
  %1201 = load i32, ptr %1200, align 4, !tbaa !5
  %1202 = icmp slt i32 %1201, 1
  br i1 %1202, label %1255, label %1203

1203:                                             ; preds = %1192
  %1204 = add nuw i32 %1201, 1
  %1205 = zext i32 %1204 to i64
  %1206 = add nsw i64 %1205, -1
  %1207 = add nsw i64 %1205, -2
  %1208 = and i64 %1206, 3
  %1209 = icmp ult i64 %1207, 3
  br i1 %1209, label %1237, label %1210

1210:                                             ; preds = %1203
  %1211 = and i64 %1206, -4
  br label %1212

1212:                                             ; preds = %1212, %1210
  %1213 = phi i64 [ 1, %1210 ], [ %1234, %1212 ]
  %1214 = phi i64 [ 0, %1210 ], [ %1235, %1212 ]
  %1215 = getelementptr inbounds i32, ptr %1200, i64 %1213
  %1216 = load i32, ptr %1215, align 4, !tbaa !5
  %1217 = sext i32 %1216 to i64
  %1218 = getelementptr inbounds i8, ptr %1193, i64 %1217
  store i8 1, ptr %1218, align 1, !tbaa !58
  %1219 = add nuw nsw i64 %1213, 1
  %1220 = getelementptr inbounds i32, ptr %1200, i64 %1219
  %1221 = load i32, ptr %1220, align 4, !tbaa !5
  %1222 = sext i32 %1221 to i64
  %1223 = getelementptr inbounds i8, ptr %1193, i64 %1222
  store i8 1, ptr %1223, align 1, !tbaa !58
  %1224 = add nuw nsw i64 %1213, 2
  %1225 = getelementptr inbounds i32, ptr %1200, i64 %1224
  %1226 = load i32, ptr %1225, align 4, !tbaa !5
  %1227 = sext i32 %1226 to i64
  %1228 = getelementptr inbounds i8, ptr %1193, i64 %1227
  store i8 1, ptr %1228, align 1, !tbaa !58
  %1229 = add nuw nsw i64 %1213, 3
  %1230 = getelementptr inbounds i32, ptr %1200, i64 %1229
  %1231 = load i32, ptr %1230, align 4, !tbaa !5
  %1232 = sext i32 %1231 to i64
  %1233 = getelementptr inbounds i8, ptr %1193, i64 %1232
  store i8 1, ptr %1233, align 1, !tbaa !58
  %1234 = add nuw nsw i64 %1213, 4
  %1235 = add i64 %1214, 4
  %1236 = icmp eq i64 %1235, %1211
  br i1 %1236, label %1237, label %1212

1237:                                             ; preds = %1212, %1203
  %1238 = phi i64 [ 1, %1203 ], [ %1234, %1212 ]
  %1239 = icmp eq i64 %1208, 0
  br i1 %1239, label %1250, label %1240

1240:                                             ; preds = %1237, %1240
  %1241 = phi i64 [ %1247, %1240 ], [ %1238, %1237 ]
  %1242 = phi i64 [ %1248, %1240 ], [ 0, %1237 ]
  %1243 = getelementptr inbounds i32, ptr %1200, i64 %1241
  %1244 = load i32, ptr %1243, align 4, !tbaa !5
  %1245 = sext i32 %1244 to i64
  %1246 = getelementptr inbounds i8, ptr %1193, i64 %1245
  store i8 1, ptr %1246, align 1, !tbaa !58
  %1247 = add nuw nsw i64 %1241, 1
  %1248 = add i64 %1242, 1
  %1249 = icmp eq i64 %1248, %1208
  br i1 %1249, label %1250, label %1240, !llvm.loop !64

1250:                                             ; preds = %1240, %1237
  %1251 = load i32, ptr %1043, align 4
  %1252 = shl i32 %1251, 2
  %1253 = ashr exact i32 %1252, 2
  %1254 = sext i32 %1253 to i64
  br label %1255

1255:                                             ; preds = %1250, %1192
  %1256 = phi i64 [ %1254, %1250 ], [ %1198, %1192 ]
  %1257 = load ptr, ptr %1000, align 8, !tbaa !65
  %1258 = getelementptr inbounds ptr, ptr %1257, i64 %1256
  %1259 = load ptr, ptr %1258, align 8, !tbaa !23
  %1260 = load i32, ptr %1259, align 4, !tbaa !5
  %1261 = icmp slt i32 %1260, 1
  br i1 %1261, label %1309, label %1262

1262:                                             ; preds = %1255
  %1263 = add nuw i32 %1260, 1
  %1264 = zext i32 %1263 to i64
  %1265 = add nsw i64 %1264, -1
  %1266 = add nsw i64 %1264, -2
  %1267 = and i64 %1265, 3
  %1268 = icmp ult i64 %1266, 3
  br i1 %1268, label %1296, label %1269

1269:                                             ; preds = %1262
  %1270 = and i64 %1265, -4
  br label %1271

1271:                                             ; preds = %1271, %1269
  %1272 = phi i64 [ 1, %1269 ], [ %1293, %1271 ]
  %1273 = phi i64 [ 0, %1269 ], [ %1294, %1271 ]
  %1274 = getelementptr inbounds i32, ptr %1259, i64 %1272
  %1275 = load i32, ptr %1274, align 4, !tbaa !5
  %1276 = sext i32 %1275 to i64
  %1277 = getelementptr inbounds i8, ptr %1193, i64 %1276
  store i8 2, ptr %1277, align 1, !tbaa !58
  %1278 = add nuw nsw i64 %1272, 1
  %1279 = getelementptr inbounds i32, ptr %1259, i64 %1278
  %1280 = load i32, ptr %1279, align 4, !tbaa !5
  %1281 = sext i32 %1280 to i64
  %1282 = getelementptr inbounds i8, ptr %1193, i64 %1281
  store i8 2, ptr %1282, align 1, !tbaa !58
  %1283 = add nuw nsw i64 %1272, 2
  %1284 = getelementptr inbounds i32, ptr %1259, i64 %1283
  %1285 = load i32, ptr %1284, align 4, !tbaa !5
  %1286 = sext i32 %1285 to i64
  %1287 = getelementptr inbounds i8, ptr %1193, i64 %1286
  store i8 2, ptr %1287, align 1, !tbaa !58
  %1288 = add nuw nsw i64 %1272, 3
  %1289 = getelementptr inbounds i32, ptr %1259, i64 %1288
  %1290 = load i32, ptr %1289, align 4, !tbaa !5
  %1291 = sext i32 %1290 to i64
  %1292 = getelementptr inbounds i8, ptr %1193, i64 %1291
  store i8 2, ptr %1292, align 1, !tbaa !58
  %1293 = add nuw nsw i64 %1272, 4
  %1294 = add i64 %1273, 4
  %1295 = icmp eq i64 %1294, %1270
  br i1 %1295, label %1296, label %1271

1296:                                             ; preds = %1271, %1262
  %1297 = phi i64 [ 1, %1262 ], [ %1293, %1271 ]
  %1298 = icmp eq i64 %1267, 0
  br i1 %1298, label %1309, label %1299

1299:                                             ; preds = %1296, %1299
  %1300 = phi i64 [ %1306, %1299 ], [ %1297, %1296 ]
  %1301 = phi i64 [ %1307, %1299 ], [ 0, %1296 ]
  %1302 = getelementptr inbounds i32, ptr %1259, i64 %1300
  %1303 = load i32, ptr %1302, align 4, !tbaa !5
  %1304 = sext i32 %1303 to i64
  %1305 = getelementptr inbounds i8, ptr %1193, i64 %1304
  store i8 2, ptr %1305, align 1, !tbaa !58
  %1306 = add nuw nsw i64 %1300, 1
  %1307 = add i64 %1301, 1
  %1308 = icmp eq i64 %1307, %1267
  br i1 %1308, label %1309, label %1299, !llvm.loop !66

1309:                                             ; preds = %1296, %1299, %1255, %1079
  %1310 = phi ptr [ %1082, %1079 ], [ %1193, %1255 ], [ %1193, %1299 ], [ %1193, %1296 ]
  %1311 = phi ptr [ %1034, %1079 ], [ %1259, %1255 ], [ %1259, %1299 ], [ %1259, %1296 ]
  %1312 = phi ptr [ %1033, %1079 ], [ %1200, %1255 ], [ %1200, %1299 ], [ %1200, %1296 ]
  %1313 = phi ptr [ %1032, %1079 ], [ %1193, %1255 ], [ %1193, %1299 ], [ %1193, %1296 ]
  %1314 = getelementptr inbounds %struct.CompAtom, ptr %104, i64 %1041, i32 4
  %1315 = load i8, ptr %1314, align 1
  %1316 = and i8 %1315, 7
  %1317 = icmp eq i8 %1316, 0
  %1318 = load i32, ptr @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4, !tbaa !5
  br i1 %1317, label %1501, label %1319

1319:                                             ; preds = %1309
  %1320 = icmp eq i32 %1318, 0
  br i1 %1320, label %1327, label %1321

1321:                                             ; preds = %1319
  %1322 = load i32, ptr %1043, align 4
  %1323 = freeze i32 %1322
  %1324 = icmp slt i32 %1323, 0
  %1325 = select i1 %1324, ptr %302, ptr %256
  %1326 = select i1 %1324, i32 %991, i32 %992
  br label %1327

1327:                                             ; preds = %1321, %1319
  %1328 = phi ptr [ %256, %1319 ], [ %1325, %1321 ]
  %1329 = phi i32 [ %992, %1319 ], [ %1326, %1321 ]
  %1330 = icmp sgt i32 %1329, 0
  br i1 %1330, label %1331, label %1482

1331:                                             ; preds = %1327
  %1332 = icmp ugt i32 %1329, 6
  br i1 %1332, label %1333, label %1417

1333:                                             ; preds = %1331
  %1334 = add nsw i32 %1329, -2
  %1335 = getelementptr inbounds i16, ptr %1328, i64 1
  %1336 = load i16, ptr %1335, align 2, !tbaa !44
  %1337 = zext i16 %1336 to i64
  %1338 = getelementptr inbounds %struct.CompAtom, ptr %106, i64 %1337
  %1339 = getelementptr inbounds %class.Vector, ptr %1338, i64 0, i32 2
  %1340 = load double, ptr %1339, align 8, !tbaa !49
  %1341 = load i16, ptr %1328, align 2, !tbaa !44
  %1342 = zext i16 %1341 to i64
  %1343 = getelementptr inbounds %struct.CompAtom, ptr %106, i64 %1342
  %1344 = getelementptr inbounds %class.Vector, ptr %1343, i64 0, i32 2
  %1345 = load double, ptr %1344, align 8, !tbaa !49
  %1346 = getelementptr inbounds %class.Vector, ptr %1338, i64 0, i32 1
  %1347 = load double, ptr %1346, align 8, !tbaa !67
  %1348 = getelementptr inbounds %class.Vector, ptr %1343, i64 0, i32 1
  %1349 = load double, ptr %1348, align 8, !tbaa !67
  %1350 = load double, ptr %1338, align 8, !tbaa !68
  %1351 = load double, ptr %1343, align 8, !tbaa !68
  %1352 = zext i32 %1334 to i64
  %1353 = insertelement <2 x double> poison, double %1340, i64 0
  %1354 = insertelement <2 x double> %1353, double %1345, i64 1
  %1355 = insertelement <2 x double> poison, double %1347, i64 0
  %1356 = insertelement <2 x double> %1355, double %1349, i64 1
  %1357 = insertelement <2 x double> poison, double %1350, i64 0
  %1358 = insertelement <2 x double> %1357, double %1351, i64 1
  %1359 = insertelement <2 x double> poison, double %1062, i64 0
  %1360 = shufflevector <2 x double> %1359, <2 x double> poison, <2 x i32> zeroinitializer
  %1361 = shufflevector <2 x double> %1059, <2 x double> poison, <2 x i32> <i32 1, i32 1>
  %1362 = shufflevector <2 x double> %1059, <2 x double> poison, <2 x i32> zeroinitializer
  br label %1363

1363:                                             ; preds = %1333, %1363
  %1364 = phi i64 [ 2, %1333 ], [ %1407, %1363 ]
  %1365 = phi i32 [ 0, %1333 ], [ %1406, %1363 ]
  %1366 = phi i16 [ %1341, %1333 ], [ %1373, %1363 ]
  %1367 = phi i16 [ %1336, %1333 ], [ %1376, %1363 ]
  %1368 = phi <2 x double> [ %1354, %1333 ], [ %1410, %1363 ]
  %1369 = phi <2 x double> [ %1356, %1333 ], [ %1412, %1363 ]
  %1370 = phi <2 x double> [ %1358, %1333 ], [ %1414, %1363 ]
  %1371 = fsub <2 x double> %1360, %1368
  %1372 = getelementptr inbounds i16, ptr %1328, i64 %1364
  %1373 = load i16, ptr %1372, align 2, !tbaa !44
  %1374 = or i64 %1364, 1
  %1375 = getelementptr inbounds i16, ptr %1328, i64 %1374
  %1376 = load i16, ptr %1375, align 2, !tbaa !44
  %1377 = zext i16 %1373 to i64
  %1378 = getelementptr inbounds %struct.CompAtom, ptr %106, i64 %1377
  %1379 = load double, ptr %1378, align 8, !tbaa !68
  %1380 = zext i16 %1376 to i64
  %1381 = getelementptr inbounds %struct.CompAtom, ptr %106, i64 %1380
  %1382 = load double, ptr %1381, align 8, !tbaa !68
  %1383 = getelementptr inbounds %class.Vector, ptr %1378, i64 0, i32 1
  %1384 = load double, ptr %1383, align 8, !tbaa !67
  %1385 = getelementptr inbounds %class.Vector, ptr %1381, i64 0, i32 1
  %1386 = load double, ptr %1385, align 8, !tbaa !67
  %1387 = getelementptr inbounds %class.Vector, ptr %1378, i64 0, i32 2
  %1388 = load double, ptr %1387, align 8, !tbaa !49
  %1389 = getelementptr inbounds %class.Vector, ptr %1381, i64 0, i32 2
  %1390 = load double, ptr %1389, align 8, !tbaa !49
  %1391 = fsub <2 x double> %1362, %1370
  %1392 = fmul <2 x double> %1391, %1391
  %1393 = fsub <2 x double> %1361, %1369
  %1394 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %1393, <2 x double> %1393, <2 x double> %1392)
  %1395 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %1371, <2 x double> %1371, <2 x double> %1394)
  %1396 = fcmp olt <2 x double> %1395, %1022
  %1397 = zext i32 %1365 to i64
  %1398 = getelementptr inbounds i16, ptr %348, i64 %1397
  store i16 %1366, ptr %1398, align 2, !tbaa !44
  %1399 = extractelement <2 x i1> %1396, i64 1
  %1400 = zext i1 %1399 to i32
  %1401 = add nuw nsw i32 %1365, %1400
  %1402 = zext i32 %1401 to i64
  %1403 = getelementptr inbounds i16, ptr %348, i64 %1402
  store i16 %1367, ptr %1403, align 2, !tbaa !44
  %1404 = extractelement <2 x i1> %1396, i64 0
  %1405 = zext i1 %1404 to i32
  %1406 = add i32 %1401, %1405
  %1407 = add nuw nsw i64 %1364, 2
  %1408 = icmp ult i64 %1407, %1352
  %1409 = insertelement <2 x double> poison, double %1390, i64 0
  %1410 = insertelement <2 x double> %1409, double %1388, i64 1
  %1411 = insertelement <2 x double> poison, double %1386, i64 0
  %1412 = insertelement <2 x double> %1411, double %1384, i64 1
  %1413 = insertelement <2 x double> poison, double %1382, i64 0
  %1414 = insertelement <2 x double> %1413, double %1379, i64 1
  br i1 %1408, label %1363, label %1415

1415:                                             ; preds = %1363
  %1416 = trunc i64 %1364 to i32
  br label %1417

1417:                                             ; preds = %1415, %1331
  %1418 = phi i32 [ %1406, %1415 ], [ 0, %1331 ]
  %1419 = phi i32 [ %1416, %1415 ], [ 0, %1331 ]
  %1420 = icmp slt i32 %1419, %1329
  br i1 %1420, label %1421, label %1426

1421:                                             ; preds = %1417
  %1422 = zext i32 %1419 to i64
  %1423 = zext i32 %1329 to i64
  %1424 = extractelement <2 x double> %1059, i64 0
  %1425 = extractelement <2 x double> %1059, i64 1
  br label %1431

1426:                                             ; preds = %1454, %1417
  %1427 = phi i32 [ %1418, %1417 ], [ %1455, %1454 ]
  %1428 = icmp sgt i32 %1427, 0
  br i1 %1428, label %1429, label %1482

1429:                                             ; preds = %1426
  %1430 = zext i32 %1427 to i64
  br label %1458

1431:                                             ; preds = %1421, %1454
  %1432 = phi i64 [ %1422, %1421 ], [ %1456, %1454 ]
  %1433 = phi i32 [ %1418, %1421 ], [ %1455, %1454 ]
  %1434 = getelementptr inbounds i16, ptr %1328, i64 %1432
  %1435 = load i16, ptr %1434, align 2, !tbaa !44
  %1436 = zext i16 %1435 to i64
  %1437 = getelementptr inbounds %struct.CompAtom, ptr %106, i64 %1436
  %1438 = load double, ptr %1437, align 8, !tbaa !68
  %1439 = getelementptr inbounds %class.Vector, ptr %1437, i64 0, i32 1
  %1440 = load double, ptr %1439, align 8, !tbaa !67
  %1441 = getelementptr inbounds %class.Vector, ptr %1437, i64 0, i32 2
  %1442 = load double, ptr %1441, align 8, !tbaa !49
  %1443 = fsub double %1424, %1438
  %1444 = fmul double %1443, %1443
  %1445 = fsub double %1425, %1440
  %1446 = call double @llvm.fmuladd.f64(double %1445, double %1445, double %1444)
  %1447 = fsub double %1062, %1442
  %1448 = call double @llvm.fmuladd.f64(double %1447, double %1447, double %1446)
  %1449 = fcmp ugt double %1448, %27
  br i1 %1449, label %1454, label %1450

1450:                                             ; preds = %1431
  %1451 = add nsw i32 %1433, 1
  %1452 = sext i32 %1433 to i64
  %1453 = getelementptr inbounds i16, ptr %348, i64 %1452
  store i16 %1435, ptr %1453, align 2, !tbaa !44
  br label %1454

1454:                                             ; preds = %1450, %1431
  %1455 = phi i32 [ %1451, %1450 ], [ %1433, %1431 ]
  %1456 = add nuw nsw i64 %1432, 1
  %1457 = icmp eq i64 %1456, %1423
  br i1 %1457, label %1426, label %1431

1458:                                             ; preds = %1429, %1475
  %1459 = phi i64 [ 0, %1429 ], [ %1478, %1475 ]
  %1460 = phi ptr [ %486, %1429 ], [ %1477, %1475 ]
  %1461 = getelementptr inbounds i16, ptr %348, i64 %1459
  %1462 = load i16, ptr %1461, align 2, !tbaa !44
  %1463 = zext i16 %1462 to i64
  %1464 = getelementptr inbounds %struct.CompAtom, ptr %106, i64 %1463, i32 4
  %1465 = load i8, ptr %1464, align 1
  %1466 = and i8 %1465, 7
  store i16 %1462, ptr %1460, align 2, !tbaa !44
  %1467 = getelementptr inbounds i16, ptr %1460, i64 1
  %1468 = insertelement <2 x i16> poison, i16 %1462, i64 0
  %1469 = shufflevector <2 x i16> %1468, <2 x i16> poison, <2 x i32> zeroinitializer
  %1470 = add <2 x i16> %1469, <i16 1, i16 2>
  store <2 x i16> %1470, ptr %1467, align 2, !tbaa !44
  %1471 = icmp ult i8 %1466, 4
  br i1 %1471, label %1475, label %1472

1472:                                             ; preds = %1458
  %1473 = add <2 x i16> %1469, <i16 3, i16 4>
  %1474 = getelementptr inbounds i16, ptr %1460, i64 3
  store <2 x i16> %1473, ptr %1474, align 2, !tbaa !44
  br label %1475

1475:                                             ; preds = %1472, %1458
  %1476 = zext i8 %1466 to i64
  %1477 = getelementptr inbounds i16, ptr %1460, i64 %1476
  %1478 = add nuw nsw i64 %1459, 1
  %1479 = icmp eq i64 %1478, %1430
  br i1 %1479, label %1480, label %1458

1480:                                             ; preds = %1475
  %1481 = ptrtoint ptr %1477 to i64
  br label %1482

1482:                                             ; preds = %1480, %1426, %1327
  %1483 = phi i64 [ %1481, %1480 ], [ %1001, %1426 ], [ %1001, %1327 ]
  %1484 = sub i64 %1483, %1001
  %1485 = lshr exact i64 %1484, 1
  %1486 = trunc i64 %1485 to i32
  %1487 = icmp eq i32 %1486, 0
  br i1 %1487, label %1488, label %1493

1488:                                             ; preds = %1482
  %1489 = load i8, ptr %1314, align 1
  %1490 = and i8 %1489, 7
  %1491 = zext i8 %1490 to i32
  %1492 = add nsw i32 %1031, %1491
  br label %3787

1493:                                             ; preds = %1482
  %1494 = shl i64 %1484, 31
  %1495 = add i64 %1494, -4294967296
  %1496 = ashr i64 %1495, 32
  %1497 = getelementptr inbounds i16, ptr %486, i64 %1496
  %1498 = load i16, ptr %1497, align 2, !tbaa !44
  %1499 = ashr i64 %1494, 32
  %1500 = getelementptr inbounds i16, ptr %486, i64 %1499
  store i16 %1498, ptr %1500, align 2, !tbaa !44
  br label %1501

1501:                                             ; preds = %1493, %1309
  %1502 = phi i32 [ %1486, %1493 ], [ %1035, %1309 ]
  %1503 = icmp eq i32 %1318, 0
  br i1 %1503, label %1508, label %1504

1504:                                             ; preds = %1501
  %1505 = load i32, ptr %1043, align 4
  %1506 = and i32 %1505, 1073741824
  %1507 = icmp ne i32 %1506, 0
  br label %1508

1508:                                             ; preds = %1504, %1501
  %1509 = phi i1 [ false, %1501 ], [ %1507, %1504 ]
  %1510 = load i32, ptr %17, align 8, !tbaa !17
  %1511 = add nsw i32 %1002, %1510
  %1512 = load i32, ptr %1003, align 4, !tbaa !69
  %1513 = icmp sgt i32 %1512, %1511
  br i1 %1513, label %1529, label %1514

1514:                                             ; preds = %1508, %1514
  %1515 = phi i32 [ %1517, %1514 ], [ %1512, %1508 ]
  %1516 = ashr i32 %1515, 1
  %1517 = add nsw i32 %1516, %1515
  %1518 = icmp sgt i32 %1517, %1511
  br i1 %1518, label %1519, label %1514

1519:                                             ; preds = %1514
  %1520 = sext i32 %1517 to i64
  %1521 = icmp slt i32 %1517, 0
  %1522 = shl nsw i64 %1520, 1
  %1523 = select i1 %1521, i64 -1, i64 %1522
  %1524 = call noalias noundef nonnull ptr @_Znam(i64 noundef %1523) #12
  %1525 = load ptr, ptr %12, align 8, !tbaa !46
  %1526 = sext i32 %1510 to i64
  %1527 = shl nsw i64 %1526, 1
  call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 2 %1524, ptr align 2 %1525, i64 %1527, i1 false)
  %1528 = icmp eq ptr %1525, null
  br i1 %1528, label %1533, label %1531

1529:                                             ; preds = %1508
  %1530 = load ptr, ptr %12, align 8, !tbaa !46
  br label %1535

1531:                                             ; preds = %1519
  call void @_ZdaPv(ptr noundef nonnull %1525) #13
  %1532 = load i32, ptr %17, align 8, !tbaa !17
  br label %1533

1533:                                             ; preds = %1531, %1519
  %1534 = phi i32 [ %1532, %1531 ], [ %1510, %1519 ]
  store ptr %1524, ptr %12, align 8, !tbaa !46
  store i32 %1517, ptr %1003, align 4, !tbaa !69
  br label %1535

1535:                                             ; preds = %1529, %1533
  %1536 = phi i32 [ %1510, %1529 ], [ %1534, %1533 ]
  %1537 = phi ptr [ %1530, %1529 ], [ %1524, %1533 ]
  %1538 = ptrtoint ptr %1537 to i64
  %1539 = add nsw i32 %1536, 1
  %1540 = sext i32 %1539 to i64
  %1541 = getelementptr inbounds i16, ptr %1537, i64 %1540
  %1542 = icmp sgt i32 %1502, 0
  br i1 %1509, label %1543, label %1590

1543:                                             ; preds = %1535
  br i1 %1542, label %1544, label %1750

1544:                                             ; preds = %1543
  %1545 = zext i32 %1502 to i64
  %1546 = extractelement <2 x double> %1059, i64 0
  %1547 = extractelement <2 x double> %1059, i64 1
  br label %1548

1548:                                             ; preds = %1544, %1585
  %1549 = phi i64 [ 0, %1544 ], [ %1588, %1585 ]
  %1550 = phi ptr [ %532, %1544 ], [ %1587, %1585 ]
  %1551 = phi ptr [ %1541, %1544 ], [ %1586, %1585 ]
  %1552 = getelementptr inbounds i16, ptr %486, i64 %1549
  %1553 = load i16, ptr %1552, align 2, !tbaa !44
  %1554 = zext i16 %1553 to i64
  %1555 = getelementptr inbounds %struct.CompAtomExt, ptr %110, i64 %1554
  %1556 = load i32, ptr %1555, align 4
  %1557 = and i32 %1556, 1073741824
  %1558 = icmp eq i32 %1557, 0
  br i1 %1558, label %1559, label %1585

1559:                                             ; preds = %1548
  %1560 = getelementptr inbounds %struct.CompAtom, ptr %106, i64 %1554
  %1561 = getelementptr inbounds %class.Vector, ptr %1560, i64 0, i32 2
  %1562 = load double, ptr %1561, align 8, !tbaa !49
  %1563 = fsub double %1062, %1562
  %1564 = getelementptr inbounds %class.Vector, ptr %1560, i64 0, i32 1
  %1565 = load double, ptr %1564, align 8, !tbaa !67
  %1566 = fsub double %1547, %1565
  %1567 = load double, ptr %1560, align 8, !tbaa !68
  %1568 = fsub double %1546, %1567
  %1569 = fmul double %1568, %1568
  %1570 = call double @llvm.fmuladd.f64(double %1566, double %1566, double %1569)
  %1571 = call double @llvm.fmuladd.f64(double %1563, double %1563, double %1570)
  %1572 = fcmp ugt double %1571, %24
  br i1 %1572, label %1585, label %1573

1573:                                             ; preds = %1559
  %1574 = shl i32 %1556, 2
  %1575 = ashr exact i32 %1574, 2
  %1576 = icmp slt i32 %1575, %1073
  %1577 = icmp sgt i32 %1575, %1075
  %1578 = select i1 %1576, i1 true, i1 %1577
  %1579 = select i1 %1578, ptr %1551, ptr %1550
  %1580 = zext i1 %1578 to i64
  %1581 = getelementptr inbounds i16, ptr %1551, i64 %1580
  %1582 = xor i1 %1578, true
  %1583 = zext i1 %1582 to i64
  %1584 = getelementptr inbounds i16, ptr %1550, i64 %1583
  store i16 %1553, ptr %1579, align 2, !tbaa !44
  br label %1585

1585:                                             ; preds = %1573, %1559, %1548
  %1586 = phi ptr [ %1551, %1548 ], [ %1551, %1559 ], [ %1581, %1573 ]
  %1587 = phi ptr [ %1550, %1548 ], [ %1550, %1559 ], [ %1584, %1573 ]
  %1588 = add nuw nsw i64 %1549, 1
  %1589 = icmp eq i64 %1588, %1545
  br i1 %1589, label %1750, label %1548

1590:                                             ; preds = %1535
  br i1 %1542, label %1591, label %1750

1591:                                             ; preds = %1590
  %1592 = icmp ugt i32 %1502, 6
  br i1 %1592, label %1593, label %1701

1593:                                             ; preds = %1591
  %1594 = add nsw i32 %1502, -2
  %1595 = load i16, ptr %486, align 2, !tbaa !44
  %1596 = zext i16 %1595 to i64
  %1597 = getelementptr inbounds %struct.CompAtomExt, ptr %110, i64 %1596
  %1598 = load i32, ptr %1597, align 4
  %1599 = load i16, ptr %1004, align 2, !tbaa !44
  %1600 = zext i16 %1599 to i64
  %1601 = getelementptr inbounds %struct.CompAtom, ptr %106, i64 %1600
  %1602 = getelementptr inbounds %class.Vector, ptr %1601, i64 0, i32 2
  %1603 = load double, ptr %1602, align 8, !tbaa !49
  %1604 = getelementptr inbounds %struct.CompAtom, ptr %106, i64 %1596
  %1605 = getelementptr inbounds %class.Vector, ptr %1604, i64 0, i32 2
  %1606 = load double, ptr %1605, align 8, !tbaa !49
  %1607 = getelementptr inbounds %class.Vector, ptr %1601, i64 0, i32 1
  %1608 = load double, ptr %1607, align 8, !tbaa !67
  %1609 = getelementptr inbounds %class.Vector, ptr %1604, i64 0, i32 1
  %1610 = load double, ptr %1609, align 8, !tbaa !67
  %1611 = load double, ptr %1601, align 8, !tbaa !68
  %1612 = load double, ptr %1604, align 8, !tbaa !68
  %1613 = zext i32 %1594 to i64
  %1614 = extractelement <2 x double> %1059, i64 0
  %1615 = extractelement <2 x double> %1059, i64 1
  br label %1616

1616:                                             ; preds = %1593, %1694
  %1617 = phi i64 [ 2, %1593 ], [ %1697, %1694 ]
  %1618 = phi i64 [ %1600, %1593 ], [ %1654, %1694 ]
  %1619 = phi i32 [ %1598, %1593 ], [ %1682, %1694 ]
  %1620 = phi ptr [ %532, %1593 ], [ %1696, %1694 ]
  %1621 = phi ptr [ %1541, %1593 ], [ %1695, %1694 ]
  %1622 = phi i16 [ %1595, %1593 ], [ %1647, %1694 ]
  %1623 = phi i16 [ %1599, %1593 ], [ %1650, %1694 ]
  %1624 = phi double [ %1612, %1593 ], [ %1653, %1694 ]
  %1625 = phi double [ %1611, %1593 ], [ %1656, %1694 ]
  %1626 = phi double [ %1610, %1593 ], [ %1658, %1694 ]
  %1627 = phi double [ %1608, %1593 ], [ %1660, %1694 ]
  %1628 = phi double [ %1606, %1593 ], [ %1662, %1694 ]
  %1629 = phi double [ %1603, %1593 ], [ %1664, %1694 ]
  %1630 = getelementptr inbounds %struct.CompAtomExt, ptr %110, i64 %1618
  %1631 = load i32, ptr %1630, align 4
  %1632 = shl i32 %1631, 2
  %1633 = ashr exact i32 %1632, 2
  %1634 = fsub double %1614, %1624
  %1635 = fsub double %1614, %1625
  %1636 = fmul double %1634, %1634
  %1637 = fmul double %1635, %1635
  %1638 = fsub double %1615, %1626
  %1639 = fsub double %1615, %1627
  %1640 = call double @llvm.fmuladd.f64(double %1638, double %1638, double %1636)
  %1641 = call double @llvm.fmuladd.f64(double %1639, double %1639, double %1637)
  %1642 = fsub double %1062, %1628
  %1643 = fsub double %1062, %1629
  %1644 = call double @llvm.fmuladd.f64(double %1642, double %1642, double %1640)
  %1645 = call double @llvm.fmuladd.f64(double %1643, double %1643, double %1641)
  %1646 = getelementptr inbounds i16, ptr %486, i64 %1617
  %1647 = load i16, ptr %1646, align 2, !tbaa !44
  %1648 = or i64 %1617, 1
  %1649 = getelementptr inbounds i16, ptr %486, i64 %1648
  %1650 = load i16, ptr %1649, align 2, !tbaa !44
  %1651 = zext i16 %1647 to i64
  %1652 = getelementptr inbounds %struct.CompAtom, ptr %106, i64 %1651
  %1653 = load double, ptr %1652, align 8, !tbaa !68
  %1654 = zext i16 %1650 to i64
  %1655 = getelementptr inbounds %struct.CompAtom, ptr %106, i64 %1654
  %1656 = load double, ptr %1655, align 8, !tbaa !68
  %1657 = getelementptr inbounds %class.Vector, ptr %1652, i64 0, i32 1
  %1658 = load double, ptr %1657, align 8, !tbaa !67
  %1659 = getelementptr inbounds %class.Vector, ptr %1655, i64 0, i32 1
  %1660 = load double, ptr %1659, align 8, !tbaa !67
  %1661 = getelementptr inbounds %class.Vector, ptr %1652, i64 0, i32 2
  %1662 = load double, ptr %1661, align 8, !tbaa !49
  %1663 = getelementptr inbounds %class.Vector, ptr %1655, i64 0, i32 2
  %1664 = load double, ptr %1663, align 8, !tbaa !49
  %1665 = fcmp ugt double %1644, %24
  br i1 %1665, label %1678, label %1666

1666:                                             ; preds = %1616
  %1667 = shl i32 %1619, 2
  %1668 = ashr exact i32 %1667, 2
  %1669 = icmp slt i32 %1668, %1073
  %1670 = icmp sgt i32 %1668, %1075
  %1671 = select i1 %1669, i1 true, i1 %1670
  %1672 = select i1 %1671, ptr %1621, ptr %1620
  %1673 = zext i1 %1671 to i64
  %1674 = getelementptr inbounds i16, ptr %1621, i64 %1673
  %1675 = xor i1 %1671, true
  %1676 = zext i1 %1675 to i64
  %1677 = getelementptr inbounds i16, ptr %1620, i64 %1676
  store i16 %1622, ptr %1672, align 2, !tbaa !44
  br label %1678

1678:                                             ; preds = %1666, %1616
  %1679 = phi ptr [ %1621, %1616 ], [ %1674, %1666 ]
  %1680 = phi ptr [ %1620, %1616 ], [ %1677, %1666 ]
  %1681 = getelementptr inbounds %struct.CompAtomExt, ptr %110, i64 %1651
  %1682 = load i32, ptr %1681, align 4
  %1683 = fcmp ugt double %1645, %24
  br i1 %1683, label %1694, label %1684

1684:                                             ; preds = %1678
  %1685 = icmp slt i32 %1633, %1073
  %1686 = icmp sgt i32 %1633, %1075
  %1687 = select i1 %1685, i1 true, i1 %1686
  %1688 = select i1 %1687, ptr %1679, ptr %1680
  %1689 = zext i1 %1687 to i64
  %1690 = getelementptr inbounds i16, ptr %1679, i64 %1689
  %1691 = xor i1 %1687, true
  %1692 = zext i1 %1691 to i64
  %1693 = getelementptr inbounds i16, ptr %1680, i64 %1692
  store i16 %1623, ptr %1688, align 2, !tbaa !44
  br label %1694

1694:                                             ; preds = %1684, %1678
  %1695 = phi ptr [ %1679, %1678 ], [ %1690, %1684 ]
  %1696 = phi ptr [ %1680, %1678 ], [ %1693, %1684 ]
  %1697 = add nuw nsw i64 %1617, 2
  %1698 = icmp ult i64 %1697, %1613
  br i1 %1698, label %1616, label %1699

1699:                                             ; preds = %1694
  %1700 = trunc i64 %1617 to i32
  br label %1701

1701:                                             ; preds = %1699, %1591
  %1702 = phi i32 [ %1700, %1699 ], [ 0, %1591 ]
  %1703 = phi ptr [ %1695, %1699 ], [ %1541, %1591 ]
  %1704 = phi ptr [ %1696, %1699 ], [ %532, %1591 ]
  %1705 = icmp slt i32 %1702, %1502
  br i1 %1705, label %1706, label %1750

1706:                                             ; preds = %1701
  %1707 = zext i32 %1702 to i64
  %1708 = zext i32 %1502 to i64
  %1709 = extractelement <2 x double> %1059, i64 0
  %1710 = extractelement <2 x double> %1059, i64 1
  br label %1711

1711:                                             ; preds = %1706, %1745
  %1712 = phi i64 [ %1707, %1706 ], [ %1748, %1745 ]
  %1713 = phi ptr [ %1704, %1706 ], [ %1747, %1745 ]
  %1714 = phi ptr [ %1703, %1706 ], [ %1746, %1745 ]
  %1715 = getelementptr inbounds i16, ptr %486, i64 %1712
  %1716 = load i16, ptr %1715, align 2, !tbaa !44
  %1717 = zext i16 %1716 to i64
  %1718 = getelementptr inbounds %struct.CompAtom, ptr %106, i64 %1717
  %1719 = load double, ptr %1718, align 8, !tbaa !68
  %1720 = getelementptr inbounds %class.Vector, ptr %1718, i64 0, i32 1
  %1721 = load double, ptr %1720, align 8, !tbaa !67
  %1722 = getelementptr inbounds %class.Vector, ptr %1718, i64 0, i32 2
  %1723 = load double, ptr %1722, align 8, !tbaa !49
  %1724 = fsub double %1709, %1719
  %1725 = fmul double %1724, %1724
  %1726 = fsub double %1710, %1721
  %1727 = call double @llvm.fmuladd.f64(double %1726, double %1726, double %1725)
  %1728 = fsub double %1062, %1723
  %1729 = call double @llvm.fmuladd.f64(double %1728, double %1728, double %1727)
  %1730 = fcmp ugt double %1729, %24
  br i1 %1730, label %1745, label %1731

1731:                                             ; preds = %1711
  %1732 = getelementptr inbounds %struct.CompAtomExt, ptr %110, i64 %1717
  %1733 = load i32, ptr %1732, align 4
  %1734 = shl i32 %1733, 2
  %1735 = ashr exact i32 %1734, 2
  %1736 = icmp slt i32 %1735, %1073
  %1737 = icmp sgt i32 %1735, %1075
  %1738 = select i1 %1736, i1 true, i1 %1737
  %1739 = select i1 %1738, ptr %1714, ptr %1713
  %1740 = zext i1 %1738 to i64
  %1741 = getelementptr inbounds i16, ptr %1714, i64 %1740
  %1742 = xor i1 %1738, true
  %1743 = zext i1 %1742 to i64
  %1744 = getelementptr inbounds i16, ptr %1713, i64 %1743
  store i16 %1716, ptr %1739, align 2, !tbaa !44
  br label %1745

1745:                                             ; preds = %1731, %1711
  %1746 = phi ptr [ %1714, %1711 ], [ %1741, %1731 ]
  %1747 = phi ptr [ %1713, %1711 ], [ %1744, %1731 ]
  %1748 = add nuw nsw i64 %1712, 1
  %1749 = icmp eq i64 %1748, %1708
  br i1 %1749, label %1750, label %1711

1750:                                             ; preds = %1745, %1585, %1701, %1543, %1590
  %1751 = phi ptr [ %1541, %1590 ], [ %1541, %1543 ], [ %1703, %1701 ], [ %1586, %1585 ], [ %1746, %1745 ]
  %1752 = phi ptr [ %532, %1590 ], [ %532, %1543 ], [ %1704, %1701 ], [ %1587, %1585 ], [ %1747, %1745 ]
  %1753 = icmp eq ptr %1751, %1541
  %1754 = icmp eq ptr %1752, %532
  %1755 = select i1 %1753, i1 %1754, i1 false
  br i1 %1755, label %1756, label %1758

1756:                                             ; preds = %1750
  %1757 = add nsw i32 %1031, 1
  br label %3787

1758:                                             ; preds = %1750
  %1759 = trunc i32 %1031 to i16
  %1760 = load i32, ptr %17, align 8, !tbaa !17
  %1761 = add nsw i32 %1760, -1
  %1762 = sext i32 %1761 to i64
  %1763 = getelementptr inbounds i16, ptr %1537, i64 %1762
  store i16 %1759, ptr %1763, align 2, !tbaa !44
  %1764 = ptrtoint ptr %1751 to i64
  %1765 = ptrtoint ptr %1541 to i64
  %1766 = sub i64 %1764, %1765
  %1767 = lshr exact i64 %1766, 1
  %1768 = trunc i64 %1767 to i32
  %1769 = icmp sgt i32 %1768, 0
  br i1 %1769, label %1770, label %1870

1770:                                             ; preds = %1758
  %1771 = and i64 %1767, 4294967295
  %1772 = and i64 %1767, 1
  %1773 = icmp eq i64 %1771, 1
  br i1 %1773, label %1838, label %1774

1774:                                             ; preds = %1770
  %1775 = sub nsw i64 %1771, %1772
  br label %1776

1776:                                             ; preds = %1831, %1774
  %1777 = phi i64 [ 0, %1774 ], [ %1835, %1831 ]
  %1778 = phi ptr [ %1541, %1774 ], [ %1834, %1831 ]
  %1779 = phi ptr [ %578, %1774 ], [ %1833, %1831 ]
  %1780 = phi ptr [ %716, %1774 ], [ %1832, %1831 ]
  %1781 = phi i64 [ 0, %1774 ], [ %1836, %1831 ]
  %1782 = getelementptr inbounds i16, ptr %1541, i64 %1777
  %1783 = load i16, ptr %1782, align 2, !tbaa !44
  %1784 = zext i16 %1783 to i64
  %1785 = getelementptr inbounds %struct.CompAtom, ptr %106, i64 %1784, i32 3
  %1786 = load i8, ptr %1785, align 2, !tbaa !51
  %1787 = zext i8 %1786 to i32
  %1788 = mul nuw nsw i32 %1787, 3
  %1789 = add nuw nsw i32 %1788, %1065
  %1790 = zext i32 %1789 to i64
  %1791 = getelementptr inbounds [9 x i32], ptr %2, i64 0, i64 %1790
  %1792 = load i32, ptr %1791, align 4, !tbaa !5
  switch i32 %1792, label %1804 [
    i32 0, label %1793
    i32 1, label %1795
    i32 2, label %1797
  ]

1793:                                             ; preds = %1776
  %1794 = getelementptr inbounds i16, ptr %1778, i64 1
  br label %1799

1795:                                             ; preds = %1776
  %1796 = getelementptr inbounds i16, ptr %1779, i64 1
  br label %1799

1797:                                             ; preds = %1776
  %1798 = getelementptr inbounds i16, ptr %1780, i64 1
  br label %1799

1799:                                             ; preds = %1793, %1795, %1797
  %1800 = phi ptr [ %1780, %1797 ], [ %1779, %1795 ], [ %1778, %1793 ]
  %1801 = phi ptr [ %1798, %1797 ], [ %1780, %1795 ], [ %1780, %1793 ]
  %1802 = phi ptr [ %1779, %1797 ], [ %1796, %1795 ], [ %1779, %1793 ]
  %1803 = phi ptr [ %1778, %1797 ], [ %1778, %1795 ], [ %1794, %1793 ]
  store i16 %1783, ptr %1800, align 2, !tbaa !44
  br label %1804

1804:                                             ; preds = %1799, %1776
  %1805 = phi ptr [ %1780, %1776 ], [ %1801, %1799 ]
  %1806 = phi ptr [ %1779, %1776 ], [ %1802, %1799 ]
  %1807 = phi ptr [ %1778, %1776 ], [ %1803, %1799 ]
  %1808 = or i64 %1777, 1
  %1809 = getelementptr inbounds i16, ptr %1541, i64 %1808
  %1810 = load i16, ptr %1809, align 2, !tbaa !44
  %1811 = zext i16 %1810 to i64
  %1812 = getelementptr inbounds %struct.CompAtom, ptr %106, i64 %1811, i32 3
  %1813 = load i8, ptr %1812, align 2, !tbaa !51
  %1814 = zext i8 %1813 to i32
  %1815 = mul nuw nsw i32 %1814, 3
  %1816 = add nuw nsw i32 %1815, %1065
  %1817 = zext i32 %1816 to i64
  %1818 = getelementptr inbounds [9 x i32], ptr %2, i64 0, i64 %1817
  %1819 = load i32, ptr %1818, align 4, !tbaa !5
  switch i32 %1819, label %1831 [
    i32 0, label %1824
    i32 1, label %1822
    i32 2, label %1820
  ]

1820:                                             ; preds = %1804
  %1821 = getelementptr inbounds i16, ptr %1805, i64 1
  br label %1826

1822:                                             ; preds = %1804
  %1823 = getelementptr inbounds i16, ptr %1806, i64 1
  br label %1826

1824:                                             ; preds = %1804
  %1825 = getelementptr inbounds i16, ptr %1807, i64 1
  br label %1826

1826:                                             ; preds = %1824, %1822, %1820
  %1827 = phi ptr [ %1805, %1820 ], [ %1806, %1822 ], [ %1807, %1824 ]
  %1828 = phi ptr [ %1821, %1820 ], [ %1805, %1822 ], [ %1805, %1824 ]
  %1829 = phi ptr [ %1806, %1820 ], [ %1823, %1822 ], [ %1806, %1824 ]
  %1830 = phi ptr [ %1807, %1820 ], [ %1807, %1822 ], [ %1825, %1824 ]
  store i16 %1810, ptr %1827, align 2, !tbaa !44
  br label %1831

1831:                                             ; preds = %1826, %1804
  %1832 = phi ptr [ %1805, %1804 ], [ %1828, %1826 ]
  %1833 = phi ptr [ %1806, %1804 ], [ %1829, %1826 ]
  %1834 = phi ptr [ %1807, %1804 ], [ %1830, %1826 ]
  %1835 = add nuw nsw i64 %1777, 2
  %1836 = add i64 %1781, 2
  %1837 = icmp eq i64 %1836, %1775
  br i1 %1837, label %1838, label %1776

1838:                                             ; preds = %1831, %1770
  %1839 = phi ptr [ undef, %1770 ], [ %1832, %1831 ]
  %1840 = phi ptr [ undef, %1770 ], [ %1833, %1831 ]
  %1841 = phi ptr [ undef, %1770 ], [ %1834, %1831 ]
  %1842 = phi i64 [ 0, %1770 ], [ %1835, %1831 ]
  %1843 = phi ptr [ %1541, %1770 ], [ %1834, %1831 ]
  %1844 = phi ptr [ %578, %1770 ], [ %1833, %1831 ]
  %1845 = phi ptr [ %716, %1770 ], [ %1832, %1831 ]
  %1846 = icmp eq i64 %1772, 0
  br i1 %1846, label %1870, label %1847

1847:                                             ; preds = %1838
  %1848 = getelementptr inbounds i16, ptr %1541, i64 %1842
  %1849 = load i16, ptr %1848, align 2, !tbaa !44
  %1850 = zext i16 %1849 to i64
  %1851 = getelementptr inbounds %struct.CompAtom, ptr %106, i64 %1850, i32 3
  %1852 = load i8, ptr %1851, align 2, !tbaa !51
  %1853 = zext i8 %1852 to i32
  %1854 = mul nuw nsw i32 %1853, 3
  %1855 = add nuw nsw i32 %1854, %1065
  %1856 = zext i32 %1855 to i64
  %1857 = getelementptr inbounds [9 x i32], ptr %2, i64 0, i64 %1856
  %1858 = load i32, ptr %1857, align 4, !tbaa !5
  switch i32 %1858, label %1870 [
    i32 0, label %1863
    i32 1, label %1861
    i32 2, label %1859
  ]

1859:                                             ; preds = %1847
  %1860 = getelementptr inbounds i16, ptr %1845, i64 1
  br label %1865

1861:                                             ; preds = %1847
  %1862 = getelementptr inbounds i16, ptr %1844, i64 1
  br label %1865

1863:                                             ; preds = %1847
  %1864 = getelementptr inbounds i16, ptr %1843, i64 1
  br label %1865

1865:                                             ; preds = %1863, %1861, %1859
  %1866 = phi ptr [ %1845, %1859 ], [ %1844, %1861 ], [ %1843, %1863 ]
  %1867 = phi ptr [ %1860, %1859 ], [ %1845, %1861 ], [ %1845, %1863 ]
  %1868 = phi ptr [ %1844, %1859 ], [ %1862, %1861 ], [ %1844, %1863 ]
  %1869 = phi ptr [ %1843, %1859 ], [ %1843, %1861 ], [ %1864, %1863 ]
  store i16 %1849, ptr %1866, align 2, !tbaa !44
  br label %1870

1870:                                             ; preds = %1838, %1865, %1847, %1758
  %1871 = phi ptr [ %716, %1758 ], [ %1839, %1838 ], [ %1845, %1847 ], [ %1867, %1865 ]
  %1872 = phi ptr [ %578, %1758 ], [ %1840, %1838 ], [ %1844, %1847 ], [ %1868, %1865 ]
  %1873 = phi ptr [ %1541, %1758 ], [ %1841, %1838 ], [ %1843, %1847 ], [ %1869, %1865 ]
  %1874 = ptrtoint ptr %1752 to i64
  %1875 = sub i64 %1874, %1005
  %1876 = lshr exact i64 %1875, 1
  %1877 = trunc i64 %1876 to i32
  %1878 = icmp sgt i32 %1877, 0
  br i1 %1878, label %1879, label %1954

1879:                                             ; preds = %1870
  %1880 = and i64 %1876, 4294967295
  br label %1881

1881:                                             ; preds = %1879, %1942
  %1882 = phi i64 [ 0, %1879 ], [ %1952, %1942 ]
  %1883 = phi ptr [ %1873, %1879 ], [ %1951, %1942 ]
  %1884 = phi ptr [ %394, %1879 ], [ %1950, %1942 ]
  %1885 = phi ptr [ %440, %1879 ], [ %1949, %1942 ]
  %1886 = phi ptr [ %1872, %1879 ], [ %1948, %1942 ]
  %1887 = phi ptr [ %624, %1879 ], [ %1947, %1942 ]
  %1888 = phi ptr [ %670, %1879 ], [ %1946, %1942 ]
  %1889 = phi ptr [ %1871, %1879 ], [ %1945, %1942 ]
  %1890 = phi ptr [ %762, %1879 ], [ %1944, %1942 ]
  %1891 = phi ptr [ %808, %1879 ], [ %1943, %1942 ]
  %1892 = getelementptr inbounds i16, ptr %532, i64 %1882
  %1893 = load i16, ptr %1892, align 2, !tbaa !44
  %1894 = zext i16 %1893 to i64
  %1895 = getelementptr inbounds %struct.CompAtomExt, ptr %110, i64 %1894
  %1896 = load i32, ptr %1895, align 4
  %1897 = shl i32 %1896, 2
  %1898 = ashr exact i32 %1897, 2
  %1899 = sext i32 %1898 to i64
  %1900 = getelementptr inbounds i8, ptr %1310, i64 %1899
  %1901 = load i8, ptr %1900, align 1, !tbaa !58
  %1902 = sext i8 %1901 to i32
  %1903 = getelementptr inbounds %struct.CompAtom, ptr %106, i64 %1894, i32 3
  %1904 = load i8, ptr %1903, align 2, !tbaa !51
  %1905 = zext i8 %1904 to i32
  %1906 = mul nuw nsw i32 %1905, 3
  %1907 = add nuw nsw i32 %1906, %1065
  %1908 = zext i32 %1907 to i64
  %1909 = getelementptr inbounds [9 x i32], ptr %2, i64 0, i64 %1908
  %1910 = load i32, ptr %1909, align 4, !tbaa !5
  %1911 = mul nsw i32 %1910, 3
  %1912 = add nsw i32 %1911, %1902
  switch i32 %1912, label %1942 [
    i32 0, label %1913
    i32 1, label %1915
    i32 2, label %1917
    i32 3, label %1919
    i32 6, label %1921
    i32 5, label %1923
    i32 8, label %1925
    i32 4, label %1927
    i32 7, label %1929
  ]

1913:                                             ; preds = %1881
  %1914 = getelementptr inbounds i16, ptr %1883, i64 1
  br label %1931

1915:                                             ; preds = %1881
  %1916 = getelementptr inbounds i16, ptr %1884, i64 1
  br label %1931

1917:                                             ; preds = %1881
  %1918 = getelementptr inbounds i16, ptr %1885, i64 1
  br label %1931

1919:                                             ; preds = %1881
  %1920 = getelementptr inbounds i16, ptr %1886, i64 1
  br label %1931

1921:                                             ; preds = %1881
  %1922 = getelementptr inbounds i16, ptr %1889, i64 1
  br label %1931

1923:                                             ; preds = %1881
  %1924 = getelementptr inbounds i16, ptr %1888, i64 1
  br label %1931

1925:                                             ; preds = %1881
  %1926 = getelementptr inbounds i16, ptr %1891, i64 1
  br label %1931

1927:                                             ; preds = %1881
  %1928 = getelementptr inbounds i16, ptr %1887, i64 1
  br label %1931

1929:                                             ; preds = %1881
  %1930 = getelementptr inbounds i16, ptr %1890, i64 1
  br label %1931

1931:                                             ; preds = %1913, %1915, %1917, %1919, %1921, %1923, %1925, %1927, %1929
  %1932 = phi ptr [ %1890, %1929 ], [ %1887, %1927 ], [ %1891, %1925 ], [ %1888, %1923 ], [ %1889, %1921 ], [ %1886, %1919 ], [ %1885, %1917 ], [ %1884, %1915 ], [ %1883, %1913 ]
  %1933 = phi ptr [ %1891, %1929 ], [ %1891, %1927 ], [ %1926, %1925 ], [ %1891, %1923 ], [ %1891, %1921 ], [ %1891, %1919 ], [ %1891, %1917 ], [ %1891, %1915 ], [ %1891, %1913 ]
  %1934 = phi ptr [ %1930, %1929 ], [ %1890, %1927 ], [ %1890, %1925 ], [ %1890, %1923 ], [ %1890, %1921 ], [ %1890, %1919 ], [ %1890, %1917 ], [ %1890, %1915 ], [ %1890, %1913 ]
  %1935 = phi ptr [ %1889, %1929 ], [ %1889, %1927 ], [ %1889, %1925 ], [ %1889, %1923 ], [ %1922, %1921 ], [ %1889, %1919 ], [ %1889, %1917 ], [ %1889, %1915 ], [ %1889, %1913 ]
  %1936 = phi ptr [ %1888, %1929 ], [ %1888, %1927 ], [ %1888, %1925 ], [ %1924, %1923 ], [ %1888, %1921 ], [ %1888, %1919 ], [ %1888, %1917 ], [ %1888, %1915 ], [ %1888, %1913 ]
  %1937 = phi ptr [ %1887, %1929 ], [ %1928, %1927 ], [ %1887, %1925 ], [ %1887, %1923 ], [ %1887, %1921 ], [ %1887, %1919 ], [ %1887, %1917 ], [ %1887, %1915 ], [ %1887, %1913 ]
  %1938 = phi ptr [ %1886, %1929 ], [ %1886, %1927 ], [ %1886, %1925 ], [ %1886, %1923 ], [ %1886, %1921 ], [ %1920, %1919 ], [ %1886, %1917 ], [ %1886, %1915 ], [ %1886, %1913 ]
  %1939 = phi ptr [ %1885, %1929 ], [ %1885, %1927 ], [ %1885, %1925 ], [ %1885, %1923 ], [ %1885, %1921 ], [ %1885, %1919 ], [ %1918, %1917 ], [ %1885, %1915 ], [ %1885, %1913 ]
  %1940 = phi ptr [ %1884, %1929 ], [ %1884, %1927 ], [ %1884, %1925 ], [ %1884, %1923 ], [ %1884, %1921 ], [ %1884, %1919 ], [ %1884, %1917 ], [ %1916, %1915 ], [ %1884, %1913 ]
  %1941 = phi ptr [ %1883, %1929 ], [ %1883, %1927 ], [ %1883, %1925 ], [ %1883, %1923 ], [ %1883, %1921 ], [ %1883, %1919 ], [ %1883, %1917 ], [ %1883, %1915 ], [ %1914, %1913 ]
  store i16 %1893, ptr %1932, align 2, !tbaa !44
  br label %1942

1942:                                             ; preds = %1931, %1881
  %1943 = phi ptr [ %1891, %1881 ], [ %1933, %1931 ]
  %1944 = phi ptr [ %1890, %1881 ], [ %1934, %1931 ]
  %1945 = phi ptr [ %1889, %1881 ], [ %1935, %1931 ]
  %1946 = phi ptr [ %1888, %1881 ], [ %1936, %1931 ]
  %1947 = phi ptr [ %1887, %1881 ], [ %1937, %1931 ]
  %1948 = phi ptr [ %1886, %1881 ], [ %1938, %1931 ]
  %1949 = phi ptr [ %1885, %1881 ], [ %1939, %1931 ]
  %1950 = phi ptr [ %1884, %1881 ], [ %1940, %1931 ]
  %1951 = phi ptr [ %1883, %1881 ], [ %1941, %1931 ]
  %1952 = add nuw nsw i64 %1882, 1
  %1953 = icmp eq i64 %1952, %1880
  br i1 %1953, label %1954, label %1881

1954:                                             ; preds = %1942, %1870
  %1955 = phi ptr [ %808, %1870 ], [ %1943, %1942 ]
  %1956 = phi ptr [ %762, %1870 ], [ %1944, %1942 ]
  %1957 = phi ptr [ %1871, %1870 ], [ %1945, %1942 ]
  %1958 = phi ptr [ %670, %1870 ], [ %1946, %1942 ]
  %1959 = phi ptr [ %624, %1870 ], [ %1947, %1942 ]
  %1960 = phi ptr [ %1872, %1870 ], [ %1948, %1942 ]
  %1961 = phi ptr [ %440, %1870 ], [ %1949, %1942 ]
  %1962 = phi ptr [ %394, %1870 ], [ %1950, %1942 ]
  %1963 = phi ptr [ %1873, %1870 ], [ %1951, %1942 ]
  %1964 = ptrtoint ptr %1963 to i64
  %1965 = sub i64 %1964, %1765
  %1966 = lshr exact i64 %1965, 1
  %1967 = trunc i64 %1966 to i32
  %1968 = icmp eq i32 %1967, 0
  %1969 = shl i64 %1965, 31
  br i1 %1968, label %1975, label %1970

1970:                                             ; preds = %1954
  %1971 = add i64 %1969, -4294967296
  %1972 = ashr i64 %1971, 32
  %1973 = getelementptr inbounds i16, ptr %1541, i64 %1972
  %1974 = load i16, ptr %1973, align 2, !tbaa !44
  br label %1975

1975:                                             ; preds = %1954, %1970
  %1976 = phi i16 [ %1974, %1970 ], [ -1, %1954 ]
  %1977 = ashr i64 %1969, 32
  %1978 = getelementptr inbounds i16, ptr %1541, i64 %1977
  store i16 %1976, ptr %1978, align 2, !tbaa !44
  %1979 = trunc i64 %1966 to i16
  %1980 = add i16 %1979, 1
  %1981 = sext i32 %1760 to i64
  %1982 = getelementptr inbounds i16, ptr %1537, i64 %1981
  store i16 %1980, ptr %1982, align 2, !tbaa !44
  %1983 = add i32 %1760, 2
  %1984 = add i32 %1983, %1967
  store i32 %1984, ptr %17, align 8, !tbaa !17
  %1985 = ptrtoint ptr %1962 to i64
  %1986 = sub i64 %1985, %1006
  %1987 = lshr exact i64 %1986, 1
  %1988 = trunc i64 %1987 to i32
  %1989 = add nsw i32 %1984, 1
  %1990 = sext i32 %1989 to i64
  %1991 = getelementptr i16, ptr %1537, i64 %1990
  %1992 = icmp sgt i32 %1988, 0
  br i1 %1992, label %1993, label %2083

1993:                                             ; preds = %1975
  %1994 = and i64 %1987, 4294967295
  %1995 = icmp ult i64 %1994, 8
  br i1 %1995, label %2039, label %1996

1996:                                             ; preds = %1993
  %1997 = shl nsw i64 %1990, 1
  %1998 = add i64 %1997, %1538
  %1999 = sub i64 %1998, %1006
  %2000 = icmp ult i64 %1999, 128
  br i1 %2000, label %2039, label %2001

2001:                                             ; preds = %1996
  %2002 = icmp ult i64 %1994, 64
  br i1 %2002, label %2026, label %2003

2003:                                             ; preds = %2001
  %2004 = and i64 %1987, 63
  %2005 = sub nsw i64 %1994, %2004
  br label %2006

2006:                                             ; preds = %2006, %2003
  %2007 = phi i64 [ 0, %2003 ], [ %2020, %2006 ]
  %2008 = getelementptr inbounds i16, ptr %394, i64 %2007
  %2009 = load <16 x i16>, ptr %2008, align 2, !tbaa !44
  %2010 = getelementptr inbounds i16, ptr %2008, i64 16
  %2011 = load <16 x i16>, ptr %2010, align 2, !tbaa !44
  %2012 = getelementptr inbounds i16, ptr %2008, i64 32
  %2013 = load <16 x i16>, ptr %2012, align 2, !tbaa !44
  %2014 = getelementptr inbounds i16, ptr %2008, i64 48
  %2015 = load <16 x i16>, ptr %2014, align 2, !tbaa !44
  %2016 = getelementptr inbounds i16, ptr %1991, i64 %2007
  store <16 x i16> %2009, ptr %2016, align 2, !tbaa !44
  %2017 = getelementptr inbounds i16, ptr %2016, i64 16
  store <16 x i16> %2011, ptr %2017, align 2, !tbaa !44
  %2018 = getelementptr inbounds i16, ptr %2016, i64 32
  store <16 x i16> %2013, ptr %2018, align 2, !tbaa !44
  %2019 = getelementptr inbounds i16, ptr %2016, i64 48
  store <16 x i16> %2015, ptr %2019, align 2, !tbaa !44
  %2020 = add nuw i64 %2007, 64
  %2021 = icmp eq i64 %2020, %2005
  br i1 %2021, label %2022, label %2006, !llvm.loop !70

2022:                                             ; preds = %2006
  %2023 = icmp eq i64 %2004, 0
  br i1 %2023, label %2077, label %2024

2024:                                             ; preds = %2022
  %2025 = icmp ult i64 %2004, 8
  br i1 %2025, label %2039, label %2026

2026:                                             ; preds = %2001, %2024
  %2027 = phi i64 [ %2005, %2024 ], [ 0, %2001 ]
  %2028 = and i64 %1987, 7
  %2029 = sub nsw i64 %1994, %2028
  br label %2030

2030:                                             ; preds = %2030, %2026
  %2031 = phi i64 [ %2027, %2026 ], [ %2035, %2030 ]
  %2032 = getelementptr inbounds i16, ptr %394, i64 %2031
  %2033 = load <8 x i16>, ptr %2032, align 2, !tbaa !44
  %2034 = getelementptr inbounds i16, ptr %1991, i64 %2031
  store <8 x i16> %2033, ptr %2034, align 2, !tbaa !44
  %2035 = add nuw i64 %2031, 8
  %2036 = icmp eq i64 %2035, %2029
  br i1 %2036, label %2037, label %2030, !llvm.loop !73

2037:                                             ; preds = %2030
  %2038 = icmp eq i64 %2028, 0
  br i1 %2038, label %2077, label %2039

2039:                                             ; preds = %1996, %1993, %2024, %2037
  %2040 = phi i64 [ 0, %1993 ], [ 0, %1996 ], [ %2005, %2024 ], [ %2029, %2037 ]
  %2041 = sub i64 %1987, %2040
  %2042 = xor i64 %2040, -1
  %2043 = add nsw i64 %1994, %2042
  %2044 = and i64 %2041, 3
  %2045 = icmp eq i64 %2044, 0
  br i1 %2045, label %2055, label %2046

2046:                                             ; preds = %2039, %2046
  %2047 = phi i64 [ %2052, %2046 ], [ %2040, %2039 ]
  %2048 = phi i64 [ %2053, %2046 ], [ 0, %2039 ]
  %2049 = getelementptr inbounds i16, ptr %394, i64 %2047
  %2050 = load i16, ptr %2049, align 2, !tbaa !44
  %2051 = getelementptr inbounds i16, ptr %1991, i64 %2047
  store i16 %2050, ptr %2051, align 2, !tbaa !44
  %2052 = add nuw nsw i64 %2047, 1
  %2053 = add i64 %2048, 1
  %2054 = icmp eq i64 %2053, %2044
  br i1 %2054, label %2055, label %2046, !llvm.loop !74

2055:                                             ; preds = %2046, %2039
  %2056 = phi i64 [ %2040, %2039 ], [ %2052, %2046 ]
  %2057 = icmp ult i64 %2043, 3
  br i1 %2057, label %2077, label %2058

2058:                                             ; preds = %2055, %2058
  %2059 = phi i64 [ %2075, %2058 ], [ %2056, %2055 ]
  %2060 = getelementptr inbounds i16, ptr %394, i64 %2059
  %2061 = load i16, ptr %2060, align 2, !tbaa !44
  %2062 = getelementptr inbounds i16, ptr %1991, i64 %2059
  store i16 %2061, ptr %2062, align 2, !tbaa !44
  %2063 = add nuw nsw i64 %2059, 1
  %2064 = getelementptr inbounds i16, ptr %394, i64 %2063
  %2065 = load i16, ptr %2064, align 2, !tbaa !44
  %2066 = getelementptr inbounds i16, ptr %1991, i64 %2063
  store i16 %2065, ptr %2066, align 2, !tbaa !44
  %2067 = add nuw nsw i64 %2059, 2
  %2068 = getelementptr inbounds i16, ptr %394, i64 %2067
  %2069 = load i16, ptr %2068, align 2, !tbaa !44
  %2070 = getelementptr inbounds i16, ptr %1991, i64 %2067
  store i16 %2069, ptr %2070, align 2, !tbaa !44
  %2071 = add nuw nsw i64 %2059, 3
  %2072 = getelementptr inbounds i16, ptr %394, i64 %2071
  %2073 = load i16, ptr %2072, align 2, !tbaa !44
  %2074 = getelementptr inbounds i16, ptr %1991, i64 %2071
  store i16 %2073, ptr %2074, align 2, !tbaa !44
  %2075 = add nuw nsw i64 %2059, 4
  %2076 = icmp eq i64 %2075, %1994
  br i1 %2076, label %2077, label %2058, !llvm.loop !75

2077:                                             ; preds = %2055, %2058, %2022, %2037
  %2078 = shl i64 %1986, 31
  %2079 = add i64 %2078, -4294967296
  %2080 = ashr i64 %2079, 32
  %2081 = getelementptr inbounds i16, ptr %1991, i64 %2080
  %2082 = load i16, ptr %2081, align 2, !tbaa !44
  br label %2083

2083:                                             ; preds = %1975, %2077
  %2084 = phi i64 [ %1987, %2077 ], [ 0, %1975 ]
  %2085 = phi i16 [ %2082, %2077 ], [ -1, %1975 ]
  %2086 = and i64 %2084, 4294967295
  %2087 = getelementptr inbounds i16, ptr %1991, i64 %2086
  store i16 %2085, ptr %2087, align 2, !tbaa !44
  %2088 = trunc i64 %1987 to i16
  %2089 = add i16 %2088, 1
  %2090 = sext i32 %1984 to i64
  %2091 = getelementptr inbounds i16, ptr %1537, i64 %2090
  store i16 %2089, ptr %2091, align 2, !tbaa !44
  %2092 = add nsw i32 %1988, 2
  %2093 = add nsw i32 %2092, %1984
  %2094 = ptrtoint ptr %1961 to i64
  %2095 = sub i64 %2094, %1007
  %2096 = lshr exact i64 %2095, 1
  %2097 = trunc i64 %2096 to i32
  %2098 = add nsw i32 %2093, 1
  %2099 = sext i32 %2098 to i64
  %2100 = getelementptr i16, ptr %1537, i64 %2099
  %2101 = icmp sgt i32 %2097, 0
  br i1 %2101, label %2102, label %2192

2102:                                             ; preds = %2083
  %2103 = and i64 %2096, 4294967295
  %2104 = icmp ult i64 %2103, 8
  br i1 %2104, label %2148, label %2105

2105:                                             ; preds = %2102
  %2106 = shl nsw i64 %2099, 1
  %2107 = add i64 %2106, %1538
  %2108 = sub i64 %2107, %1007
  %2109 = icmp ult i64 %2108, 128
  br i1 %2109, label %2148, label %2110

2110:                                             ; preds = %2105
  %2111 = icmp ult i64 %2103, 64
  br i1 %2111, label %2135, label %2112

2112:                                             ; preds = %2110
  %2113 = and i64 %2096, 63
  %2114 = sub nsw i64 %2103, %2113
  br label %2115

2115:                                             ; preds = %2115, %2112
  %2116 = phi i64 [ 0, %2112 ], [ %2129, %2115 ]
  %2117 = getelementptr inbounds i16, ptr %440, i64 %2116
  %2118 = load <16 x i16>, ptr %2117, align 2, !tbaa !44
  %2119 = getelementptr inbounds i16, ptr %2117, i64 16
  %2120 = load <16 x i16>, ptr %2119, align 2, !tbaa !44
  %2121 = getelementptr inbounds i16, ptr %2117, i64 32
  %2122 = load <16 x i16>, ptr %2121, align 2, !tbaa !44
  %2123 = getelementptr inbounds i16, ptr %2117, i64 48
  %2124 = load <16 x i16>, ptr %2123, align 2, !tbaa !44
  %2125 = getelementptr inbounds i16, ptr %2100, i64 %2116
  store <16 x i16> %2118, ptr %2125, align 2, !tbaa !44
  %2126 = getelementptr inbounds i16, ptr %2125, i64 16
  store <16 x i16> %2120, ptr %2126, align 2, !tbaa !44
  %2127 = getelementptr inbounds i16, ptr %2125, i64 32
  store <16 x i16> %2122, ptr %2127, align 2, !tbaa !44
  %2128 = getelementptr inbounds i16, ptr %2125, i64 48
  store <16 x i16> %2124, ptr %2128, align 2, !tbaa !44
  %2129 = add nuw i64 %2116, 64
  %2130 = icmp eq i64 %2129, %2114
  br i1 %2130, label %2131, label %2115, !llvm.loop !76

2131:                                             ; preds = %2115
  %2132 = icmp eq i64 %2113, 0
  br i1 %2132, label %2186, label %2133

2133:                                             ; preds = %2131
  %2134 = icmp ult i64 %2113, 8
  br i1 %2134, label %2148, label %2135

2135:                                             ; preds = %2110, %2133
  %2136 = phi i64 [ %2114, %2133 ], [ 0, %2110 ]
  %2137 = and i64 %2096, 7
  %2138 = sub nsw i64 %2103, %2137
  br label %2139

2139:                                             ; preds = %2139, %2135
  %2140 = phi i64 [ %2136, %2135 ], [ %2144, %2139 ]
  %2141 = getelementptr inbounds i16, ptr %440, i64 %2140
  %2142 = load <8 x i16>, ptr %2141, align 2, !tbaa !44
  %2143 = getelementptr inbounds i16, ptr %2100, i64 %2140
  store <8 x i16> %2142, ptr %2143, align 2, !tbaa !44
  %2144 = add nuw i64 %2140, 8
  %2145 = icmp eq i64 %2144, %2138
  br i1 %2145, label %2146, label %2139, !llvm.loop !77

2146:                                             ; preds = %2139
  %2147 = icmp eq i64 %2137, 0
  br i1 %2147, label %2186, label %2148

2148:                                             ; preds = %2105, %2102, %2133, %2146
  %2149 = phi i64 [ 0, %2102 ], [ 0, %2105 ], [ %2114, %2133 ], [ %2138, %2146 ]
  %2150 = sub i64 %2096, %2149
  %2151 = xor i64 %2149, -1
  %2152 = add nsw i64 %2103, %2151
  %2153 = and i64 %2150, 3
  %2154 = icmp eq i64 %2153, 0
  br i1 %2154, label %2164, label %2155

2155:                                             ; preds = %2148, %2155
  %2156 = phi i64 [ %2161, %2155 ], [ %2149, %2148 ]
  %2157 = phi i64 [ %2162, %2155 ], [ 0, %2148 ]
  %2158 = getelementptr inbounds i16, ptr %440, i64 %2156
  %2159 = load i16, ptr %2158, align 2, !tbaa !44
  %2160 = getelementptr inbounds i16, ptr %2100, i64 %2156
  store i16 %2159, ptr %2160, align 2, !tbaa !44
  %2161 = add nuw nsw i64 %2156, 1
  %2162 = add i64 %2157, 1
  %2163 = icmp eq i64 %2162, %2153
  br i1 %2163, label %2164, label %2155, !llvm.loop !78

2164:                                             ; preds = %2155, %2148
  %2165 = phi i64 [ %2149, %2148 ], [ %2161, %2155 ]
  %2166 = icmp ult i64 %2152, 3
  br i1 %2166, label %2186, label %2167

2167:                                             ; preds = %2164, %2167
  %2168 = phi i64 [ %2184, %2167 ], [ %2165, %2164 ]
  %2169 = getelementptr inbounds i16, ptr %440, i64 %2168
  %2170 = load i16, ptr %2169, align 2, !tbaa !44
  %2171 = getelementptr inbounds i16, ptr %2100, i64 %2168
  store i16 %2170, ptr %2171, align 2, !tbaa !44
  %2172 = add nuw nsw i64 %2168, 1
  %2173 = getelementptr inbounds i16, ptr %440, i64 %2172
  %2174 = load i16, ptr %2173, align 2, !tbaa !44
  %2175 = getelementptr inbounds i16, ptr %2100, i64 %2172
  store i16 %2174, ptr %2175, align 2, !tbaa !44
  %2176 = add nuw nsw i64 %2168, 2
  %2177 = getelementptr inbounds i16, ptr %440, i64 %2176
  %2178 = load i16, ptr %2177, align 2, !tbaa !44
  %2179 = getelementptr inbounds i16, ptr %2100, i64 %2176
  store i16 %2178, ptr %2179, align 2, !tbaa !44
  %2180 = add nuw nsw i64 %2168, 3
  %2181 = getelementptr inbounds i16, ptr %440, i64 %2180
  %2182 = load i16, ptr %2181, align 2, !tbaa !44
  %2183 = getelementptr inbounds i16, ptr %2100, i64 %2180
  store i16 %2182, ptr %2183, align 2, !tbaa !44
  %2184 = add nuw nsw i64 %2168, 4
  %2185 = icmp eq i64 %2184, %2103
  br i1 %2185, label %2186, label %2167, !llvm.loop !79

2186:                                             ; preds = %2164, %2167, %2131, %2146
  %2187 = shl i64 %2095, 31
  %2188 = add i64 %2187, -4294967296
  %2189 = ashr i64 %2188, 32
  %2190 = getelementptr inbounds i16, ptr %2100, i64 %2189
  %2191 = load i16, ptr %2190, align 2, !tbaa !44
  br label %2192

2192:                                             ; preds = %2083, %2186
  %2193 = phi i64 [ %2096, %2186 ], [ 0, %2083 ]
  %2194 = phi i16 [ %2191, %2186 ], [ -1, %2083 ]
  %2195 = and i64 %2193, 4294967295
  %2196 = getelementptr inbounds i16, ptr %2100, i64 %2195
  store i16 %2194, ptr %2196, align 2, !tbaa !44
  %2197 = trunc i64 %2096 to i16
  %2198 = add i16 %2197, 1
  %2199 = sext i32 %2093 to i64
  %2200 = getelementptr inbounds i16, ptr %1537, i64 %2199
  store i16 %2198, ptr %2200, align 2, !tbaa !44
  %2201 = add nsw i32 %2097, 2
  %2202 = add nsw i32 %2201, %2093
  %2203 = ptrtoint ptr %1960 to i64
  %2204 = sub i64 %2203, %1008
  %2205 = lshr exact i64 %2204, 1
  %2206 = trunc i64 %2205 to i32
  %2207 = add nsw i32 %2202, 1
  %2208 = sext i32 %2207 to i64
  %2209 = getelementptr i16, ptr %1537, i64 %2208
  %2210 = icmp sgt i32 %2206, 0
  br i1 %2210, label %2211, label %2301

2211:                                             ; preds = %2192
  %2212 = and i64 %2205, 4294967295
  %2213 = icmp ult i64 %2212, 8
  br i1 %2213, label %2257, label %2214

2214:                                             ; preds = %2211
  %2215 = shl nsw i64 %2208, 1
  %2216 = add i64 %2215, %1538
  %2217 = sub i64 %2216, %1008
  %2218 = icmp ult i64 %2217, 128
  br i1 %2218, label %2257, label %2219

2219:                                             ; preds = %2214
  %2220 = icmp ult i64 %2212, 64
  br i1 %2220, label %2244, label %2221

2221:                                             ; preds = %2219
  %2222 = and i64 %2205, 63
  %2223 = sub nsw i64 %2212, %2222
  br label %2224

2224:                                             ; preds = %2224, %2221
  %2225 = phi i64 [ 0, %2221 ], [ %2238, %2224 ]
  %2226 = getelementptr inbounds i16, ptr %578, i64 %2225
  %2227 = load <16 x i16>, ptr %2226, align 2, !tbaa !44
  %2228 = getelementptr inbounds i16, ptr %2226, i64 16
  %2229 = load <16 x i16>, ptr %2228, align 2, !tbaa !44
  %2230 = getelementptr inbounds i16, ptr %2226, i64 32
  %2231 = load <16 x i16>, ptr %2230, align 2, !tbaa !44
  %2232 = getelementptr inbounds i16, ptr %2226, i64 48
  %2233 = load <16 x i16>, ptr %2232, align 2, !tbaa !44
  %2234 = getelementptr inbounds i16, ptr %2209, i64 %2225
  store <16 x i16> %2227, ptr %2234, align 2, !tbaa !44
  %2235 = getelementptr inbounds i16, ptr %2234, i64 16
  store <16 x i16> %2229, ptr %2235, align 2, !tbaa !44
  %2236 = getelementptr inbounds i16, ptr %2234, i64 32
  store <16 x i16> %2231, ptr %2236, align 2, !tbaa !44
  %2237 = getelementptr inbounds i16, ptr %2234, i64 48
  store <16 x i16> %2233, ptr %2237, align 2, !tbaa !44
  %2238 = add nuw i64 %2225, 64
  %2239 = icmp eq i64 %2238, %2223
  br i1 %2239, label %2240, label %2224, !llvm.loop !80

2240:                                             ; preds = %2224
  %2241 = icmp eq i64 %2222, 0
  br i1 %2241, label %2295, label %2242

2242:                                             ; preds = %2240
  %2243 = icmp ult i64 %2222, 8
  br i1 %2243, label %2257, label %2244

2244:                                             ; preds = %2219, %2242
  %2245 = phi i64 [ %2223, %2242 ], [ 0, %2219 ]
  %2246 = and i64 %2205, 7
  %2247 = sub nsw i64 %2212, %2246
  br label %2248

2248:                                             ; preds = %2248, %2244
  %2249 = phi i64 [ %2245, %2244 ], [ %2253, %2248 ]
  %2250 = getelementptr inbounds i16, ptr %578, i64 %2249
  %2251 = load <8 x i16>, ptr %2250, align 2, !tbaa !44
  %2252 = getelementptr inbounds i16, ptr %2209, i64 %2249
  store <8 x i16> %2251, ptr %2252, align 2, !tbaa !44
  %2253 = add nuw i64 %2249, 8
  %2254 = icmp eq i64 %2253, %2247
  br i1 %2254, label %2255, label %2248, !llvm.loop !81

2255:                                             ; preds = %2248
  %2256 = icmp eq i64 %2246, 0
  br i1 %2256, label %2295, label %2257

2257:                                             ; preds = %2214, %2211, %2242, %2255
  %2258 = phi i64 [ 0, %2211 ], [ 0, %2214 ], [ %2223, %2242 ], [ %2247, %2255 ]
  %2259 = sub i64 %2205, %2258
  %2260 = xor i64 %2258, -1
  %2261 = add nsw i64 %2212, %2260
  %2262 = and i64 %2259, 3
  %2263 = icmp eq i64 %2262, 0
  br i1 %2263, label %2273, label %2264

2264:                                             ; preds = %2257, %2264
  %2265 = phi i64 [ %2270, %2264 ], [ %2258, %2257 ]
  %2266 = phi i64 [ %2271, %2264 ], [ 0, %2257 ]
  %2267 = getelementptr inbounds i16, ptr %578, i64 %2265
  %2268 = load i16, ptr %2267, align 2, !tbaa !44
  %2269 = getelementptr inbounds i16, ptr %2209, i64 %2265
  store i16 %2268, ptr %2269, align 2, !tbaa !44
  %2270 = add nuw nsw i64 %2265, 1
  %2271 = add i64 %2266, 1
  %2272 = icmp eq i64 %2271, %2262
  br i1 %2272, label %2273, label %2264, !llvm.loop !82

2273:                                             ; preds = %2264, %2257
  %2274 = phi i64 [ %2258, %2257 ], [ %2270, %2264 ]
  %2275 = icmp ult i64 %2261, 3
  br i1 %2275, label %2295, label %2276

2276:                                             ; preds = %2273, %2276
  %2277 = phi i64 [ %2293, %2276 ], [ %2274, %2273 ]
  %2278 = getelementptr inbounds i16, ptr %578, i64 %2277
  %2279 = load i16, ptr %2278, align 2, !tbaa !44
  %2280 = getelementptr inbounds i16, ptr %2209, i64 %2277
  store i16 %2279, ptr %2280, align 2, !tbaa !44
  %2281 = add nuw nsw i64 %2277, 1
  %2282 = getelementptr inbounds i16, ptr %578, i64 %2281
  %2283 = load i16, ptr %2282, align 2, !tbaa !44
  %2284 = getelementptr inbounds i16, ptr %2209, i64 %2281
  store i16 %2283, ptr %2284, align 2, !tbaa !44
  %2285 = add nuw nsw i64 %2277, 2
  %2286 = getelementptr inbounds i16, ptr %578, i64 %2285
  %2287 = load i16, ptr %2286, align 2, !tbaa !44
  %2288 = getelementptr inbounds i16, ptr %2209, i64 %2285
  store i16 %2287, ptr %2288, align 2, !tbaa !44
  %2289 = add nuw nsw i64 %2277, 3
  %2290 = getelementptr inbounds i16, ptr %578, i64 %2289
  %2291 = load i16, ptr %2290, align 2, !tbaa !44
  %2292 = getelementptr inbounds i16, ptr %2209, i64 %2289
  store i16 %2291, ptr %2292, align 2, !tbaa !44
  %2293 = add nuw nsw i64 %2277, 4
  %2294 = icmp eq i64 %2293, %2212
  br i1 %2294, label %2295, label %2276, !llvm.loop !83

2295:                                             ; preds = %2273, %2276, %2240, %2255
  %2296 = shl i64 %2204, 31
  %2297 = add i64 %2296, -4294967296
  %2298 = ashr i64 %2297, 32
  %2299 = getelementptr inbounds i16, ptr %2209, i64 %2298
  %2300 = load i16, ptr %2299, align 2, !tbaa !44
  br label %2301

2301:                                             ; preds = %2192, %2295
  %2302 = phi i64 [ %2205, %2295 ], [ 0, %2192 ]
  %2303 = phi i16 [ %2300, %2295 ], [ -1, %2192 ]
  %2304 = and i64 %2302, 4294967295
  %2305 = getelementptr inbounds i16, ptr %2209, i64 %2304
  store i16 %2303, ptr %2305, align 2, !tbaa !44
  %2306 = trunc i64 %2205 to i16
  %2307 = add i16 %2306, 1
  %2308 = sext i32 %2202 to i64
  %2309 = getelementptr inbounds i16, ptr %1537, i64 %2308
  store i16 %2307, ptr %2309, align 2, !tbaa !44
  %2310 = add nsw i32 %2206, 2
  %2311 = add nsw i32 %2310, %2202
  %2312 = ptrtoint ptr %1959 to i64
  %2313 = sub i64 %2312, %1009
  %2314 = lshr exact i64 %2313, 1
  %2315 = trunc i64 %2314 to i32
  %2316 = add nsw i32 %2311, 1
  %2317 = sext i32 %2316 to i64
  %2318 = getelementptr i16, ptr %1537, i64 %2317
  %2319 = icmp sgt i32 %2315, 0
  br i1 %2319, label %2320, label %2410

2320:                                             ; preds = %2301
  %2321 = and i64 %2314, 4294967295
  %2322 = icmp ult i64 %2321, 8
  br i1 %2322, label %2366, label %2323

2323:                                             ; preds = %2320
  %2324 = shl nsw i64 %2317, 1
  %2325 = add i64 %2324, %1538
  %2326 = sub i64 %2325, %1009
  %2327 = icmp ult i64 %2326, 128
  br i1 %2327, label %2366, label %2328

2328:                                             ; preds = %2323
  %2329 = icmp ult i64 %2321, 64
  br i1 %2329, label %2353, label %2330

2330:                                             ; preds = %2328
  %2331 = and i64 %2314, 63
  %2332 = sub nsw i64 %2321, %2331
  br label %2333

2333:                                             ; preds = %2333, %2330
  %2334 = phi i64 [ 0, %2330 ], [ %2347, %2333 ]
  %2335 = getelementptr inbounds i16, ptr %624, i64 %2334
  %2336 = load <16 x i16>, ptr %2335, align 2, !tbaa !44
  %2337 = getelementptr inbounds i16, ptr %2335, i64 16
  %2338 = load <16 x i16>, ptr %2337, align 2, !tbaa !44
  %2339 = getelementptr inbounds i16, ptr %2335, i64 32
  %2340 = load <16 x i16>, ptr %2339, align 2, !tbaa !44
  %2341 = getelementptr inbounds i16, ptr %2335, i64 48
  %2342 = load <16 x i16>, ptr %2341, align 2, !tbaa !44
  %2343 = getelementptr inbounds i16, ptr %2318, i64 %2334
  store <16 x i16> %2336, ptr %2343, align 2, !tbaa !44
  %2344 = getelementptr inbounds i16, ptr %2343, i64 16
  store <16 x i16> %2338, ptr %2344, align 2, !tbaa !44
  %2345 = getelementptr inbounds i16, ptr %2343, i64 32
  store <16 x i16> %2340, ptr %2345, align 2, !tbaa !44
  %2346 = getelementptr inbounds i16, ptr %2343, i64 48
  store <16 x i16> %2342, ptr %2346, align 2, !tbaa !44
  %2347 = add nuw i64 %2334, 64
  %2348 = icmp eq i64 %2347, %2332
  br i1 %2348, label %2349, label %2333, !llvm.loop !84

2349:                                             ; preds = %2333
  %2350 = icmp eq i64 %2331, 0
  br i1 %2350, label %2404, label %2351

2351:                                             ; preds = %2349
  %2352 = icmp ult i64 %2331, 8
  br i1 %2352, label %2366, label %2353

2353:                                             ; preds = %2328, %2351
  %2354 = phi i64 [ %2332, %2351 ], [ 0, %2328 ]
  %2355 = and i64 %2314, 7
  %2356 = sub nsw i64 %2321, %2355
  br label %2357

2357:                                             ; preds = %2357, %2353
  %2358 = phi i64 [ %2354, %2353 ], [ %2362, %2357 ]
  %2359 = getelementptr inbounds i16, ptr %624, i64 %2358
  %2360 = load <8 x i16>, ptr %2359, align 2, !tbaa !44
  %2361 = getelementptr inbounds i16, ptr %2318, i64 %2358
  store <8 x i16> %2360, ptr %2361, align 2, !tbaa !44
  %2362 = add nuw i64 %2358, 8
  %2363 = icmp eq i64 %2362, %2356
  br i1 %2363, label %2364, label %2357, !llvm.loop !85

2364:                                             ; preds = %2357
  %2365 = icmp eq i64 %2355, 0
  br i1 %2365, label %2404, label %2366

2366:                                             ; preds = %2323, %2320, %2351, %2364
  %2367 = phi i64 [ 0, %2320 ], [ 0, %2323 ], [ %2332, %2351 ], [ %2356, %2364 ]
  %2368 = sub i64 %2314, %2367
  %2369 = xor i64 %2367, -1
  %2370 = add nsw i64 %2321, %2369
  %2371 = and i64 %2368, 3
  %2372 = icmp eq i64 %2371, 0
  br i1 %2372, label %2382, label %2373

2373:                                             ; preds = %2366, %2373
  %2374 = phi i64 [ %2379, %2373 ], [ %2367, %2366 ]
  %2375 = phi i64 [ %2380, %2373 ], [ 0, %2366 ]
  %2376 = getelementptr inbounds i16, ptr %624, i64 %2374
  %2377 = load i16, ptr %2376, align 2, !tbaa !44
  %2378 = getelementptr inbounds i16, ptr %2318, i64 %2374
  store i16 %2377, ptr %2378, align 2, !tbaa !44
  %2379 = add nuw nsw i64 %2374, 1
  %2380 = add i64 %2375, 1
  %2381 = icmp eq i64 %2380, %2371
  br i1 %2381, label %2382, label %2373, !llvm.loop !86

2382:                                             ; preds = %2373, %2366
  %2383 = phi i64 [ %2367, %2366 ], [ %2379, %2373 ]
  %2384 = icmp ult i64 %2370, 3
  br i1 %2384, label %2404, label %2385

2385:                                             ; preds = %2382, %2385
  %2386 = phi i64 [ %2402, %2385 ], [ %2383, %2382 ]
  %2387 = getelementptr inbounds i16, ptr %624, i64 %2386
  %2388 = load i16, ptr %2387, align 2, !tbaa !44
  %2389 = getelementptr inbounds i16, ptr %2318, i64 %2386
  store i16 %2388, ptr %2389, align 2, !tbaa !44
  %2390 = add nuw nsw i64 %2386, 1
  %2391 = getelementptr inbounds i16, ptr %624, i64 %2390
  %2392 = load i16, ptr %2391, align 2, !tbaa !44
  %2393 = getelementptr inbounds i16, ptr %2318, i64 %2390
  store i16 %2392, ptr %2393, align 2, !tbaa !44
  %2394 = add nuw nsw i64 %2386, 2
  %2395 = getelementptr inbounds i16, ptr %624, i64 %2394
  %2396 = load i16, ptr %2395, align 2, !tbaa !44
  %2397 = getelementptr inbounds i16, ptr %2318, i64 %2394
  store i16 %2396, ptr %2397, align 2, !tbaa !44
  %2398 = add nuw nsw i64 %2386, 3
  %2399 = getelementptr inbounds i16, ptr %624, i64 %2398
  %2400 = load i16, ptr %2399, align 2, !tbaa !44
  %2401 = getelementptr inbounds i16, ptr %2318, i64 %2398
  store i16 %2400, ptr %2401, align 2, !tbaa !44
  %2402 = add nuw nsw i64 %2386, 4
  %2403 = icmp eq i64 %2402, %2321
  br i1 %2403, label %2404, label %2385, !llvm.loop !87

2404:                                             ; preds = %2382, %2385, %2349, %2364
  %2405 = shl i64 %2313, 31
  %2406 = add i64 %2405, -4294967296
  %2407 = ashr i64 %2406, 32
  %2408 = getelementptr inbounds i16, ptr %2318, i64 %2407
  %2409 = load i16, ptr %2408, align 2, !tbaa !44
  br label %2410

2410:                                             ; preds = %2301, %2404
  %2411 = phi i64 [ %2314, %2404 ], [ 0, %2301 ]
  %2412 = phi i16 [ %2409, %2404 ], [ -1, %2301 ]
  %2413 = and i64 %2411, 4294967295
  %2414 = getelementptr inbounds i16, ptr %2318, i64 %2413
  store i16 %2412, ptr %2414, align 2, !tbaa !44
  %2415 = trunc i64 %2314 to i16
  %2416 = add i16 %2415, 1
  %2417 = sext i32 %2311 to i64
  %2418 = getelementptr inbounds i16, ptr %1537, i64 %2417
  store i16 %2416, ptr %2418, align 2, !tbaa !44
  %2419 = add nsw i32 %2315, 2
  %2420 = add nsw i32 %2419, %2311
  store i32 %2420, ptr %17, align 8, !tbaa !17
  %2421 = ptrtoint ptr %1958 to i64
  %2422 = sub i64 %2421, %1010
  %2423 = lshr exact i64 %2422, 1
  %2424 = trunc i64 %2423 to i32
  %2425 = add nsw i32 %2420, 1
  %2426 = sext i32 %2425 to i64
  %2427 = getelementptr i16, ptr %1537, i64 %2426
  %2428 = icmp sgt i32 %2424, 0
  br i1 %2428, label %2429, label %2519

2429:                                             ; preds = %2410
  %2430 = and i64 %2423, 4294967295
  %2431 = icmp ult i64 %2430, 8
  br i1 %2431, label %2475, label %2432

2432:                                             ; preds = %2429
  %2433 = shl nsw i64 %2426, 1
  %2434 = add i64 %2433, %1538
  %2435 = sub i64 %2434, %1010
  %2436 = icmp ult i64 %2435, 128
  br i1 %2436, label %2475, label %2437

2437:                                             ; preds = %2432
  %2438 = icmp ult i64 %2430, 64
  br i1 %2438, label %2462, label %2439

2439:                                             ; preds = %2437
  %2440 = and i64 %2423, 63
  %2441 = sub nsw i64 %2430, %2440
  br label %2442

2442:                                             ; preds = %2442, %2439
  %2443 = phi i64 [ 0, %2439 ], [ %2456, %2442 ]
  %2444 = getelementptr inbounds i16, ptr %670, i64 %2443
  %2445 = load <16 x i16>, ptr %2444, align 2, !tbaa !44
  %2446 = getelementptr inbounds i16, ptr %2444, i64 16
  %2447 = load <16 x i16>, ptr %2446, align 2, !tbaa !44
  %2448 = getelementptr inbounds i16, ptr %2444, i64 32
  %2449 = load <16 x i16>, ptr %2448, align 2, !tbaa !44
  %2450 = getelementptr inbounds i16, ptr %2444, i64 48
  %2451 = load <16 x i16>, ptr %2450, align 2, !tbaa !44
  %2452 = getelementptr inbounds i16, ptr %2427, i64 %2443
  store <16 x i16> %2445, ptr %2452, align 2, !tbaa !44
  %2453 = getelementptr inbounds i16, ptr %2452, i64 16
  store <16 x i16> %2447, ptr %2453, align 2, !tbaa !44
  %2454 = getelementptr inbounds i16, ptr %2452, i64 32
  store <16 x i16> %2449, ptr %2454, align 2, !tbaa !44
  %2455 = getelementptr inbounds i16, ptr %2452, i64 48
  store <16 x i16> %2451, ptr %2455, align 2, !tbaa !44
  %2456 = add nuw i64 %2443, 64
  %2457 = icmp eq i64 %2456, %2441
  br i1 %2457, label %2458, label %2442, !llvm.loop !88

2458:                                             ; preds = %2442
  %2459 = icmp eq i64 %2440, 0
  br i1 %2459, label %2513, label %2460

2460:                                             ; preds = %2458
  %2461 = icmp ult i64 %2440, 8
  br i1 %2461, label %2475, label %2462

2462:                                             ; preds = %2437, %2460
  %2463 = phi i64 [ %2441, %2460 ], [ 0, %2437 ]
  %2464 = and i64 %2423, 7
  %2465 = sub nsw i64 %2430, %2464
  br label %2466

2466:                                             ; preds = %2466, %2462
  %2467 = phi i64 [ %2463, %2462 ], [ %2471, %2466 ]
  %2468 = getelementptr inbounds i16, ptr %670, i64 %2467
  %2469 = load <8 x i16>, ptr %2468, align 2, !tbaa !44
  %2470 = getelementptr inbounds i16, ptr %2427, i64 %2467
  store <8 x i16> %2469, ptr %2470, align 2, !tbaa !44
  %2471 = add nuw i64 %2467, 8
  %2472 = icmp eq i64 %2471, %2465
  br i1 %2472, label %2473, label %2466, !llvm.loop !89

2473:                                             ; preds = %2466
  %2474 = icmp eq i64 %2464, 0
  br i1 %2474, label %2513, label %2475

2475:                                             ; preds = %2432, %2429, %2460, %2473
  %2476 = phi i64 [ 0, %2429 ], [ 0, %2432 ], [ %2441, %2460 ], [ %2465, %2473 ]
  %2477 = sub i64 %2423, %2476
  %2478 = xor i64 %2476, -1
  %2479 = add nsw i64 %2430, %2478
  %2480 = and i64 %2477, 3
  %2481 = icmp eq i64 %2480, 0
  br i1 %2481, label %2491, label %2482

2482:                                             ; preds = %2475, %2482
  %2483 = phi i64 [ %2488, %2482 ], [ %2476, %2475 ]
  %2484 = phi i64 [ %2489, %2482 ], [ 0, %2475 ]
  %2485 = getelementptr inbounds i16, ptr %670, i64 %2483
  %2486 = load i16, ptr %2485, align 2, !tbaa !44
  %2487 = getelementptr inbounds i16, ptr %2427, i64 %2483
  store i16 %2486, ptr %2487, align 2, !tbaa !44
  %2488 = add nuw nsw i64 %2483, 1
  %2489 = add i64 %2484, 1
  %2490 = icmp eq i64 %2489, %2480
  br i1 %2490, label %2491, label %2482, !llvm.loop !90

2491:                                             ; preds = %2482, %2475
  %2492 = phi i64 [ %2476, %2475 ], [ %2488, %2482 ]
  %2493 = icmp ult i64 %2479, 3
  br i1 %2493, label %2513, label %2494

2494:                                             ; preds = %2491, %2494
  %2495 = phi i64 [ %2511, %2494 ], [ %2492, %2491 ]
  %2496 = getelementptr inbounds i16, ptr %670, i64 %2495
  %2497 = load i16, ptr %2496, align 2, !tbaa !44
  %2498 = getelementptr inbounds i16, ptr %2427, i64 %2495
  store i16 %2497, ptr %2498, align 2, !tbaa !44
  %2499 = add nuw nsw i64 %2495, 1
  %2500 = getelementptr inbounds i16, ptr %670, i64 %2499
  %2501 = load i16, ptr %2500, align 2, !tbaa !44
  %2502 = getelementptr inbounds i16, ptr %2427, i64 %2499
  store i16 %2501, ptr %2502, align 2, !tbaa !44
  %2503 = add nuw nsw i64 %2495, 2
  %2504 = getelementptr inbounds i16, ptr %670, i64 %2503
  %2505 = load i16, ptr %2504, align 2, !tbaa !44
  %2506 = getelementptr inbounds i16, ptr %2427, i64 %2503
  store i16 %2505, ptr %2506, align 2, !tbaa !44
  %2507 = add nuw nsw i64 %2495, 3
  %2508 = getelementptr inbounds i16, ptr %670, i64 %2507
  %2509 = load i16, ptr %2508, align 2, !tbaa !44
  %2510 = getelementptr inbounds i16, ptr %2427, i64 %2507
  store i16 %2509, ptr %2510, align 2, !tbaa !44
  %2511 = add nuw nsw i64 %2495, 4
  %2512 = icmp eq i64 %2511, %2430
  br i1 %2512, label %2513, label %2494, !llvm.loop !91

2513:                                             ; preds = %2491, %2494, %2458, %2473
  %2514 = shl i64 %2422, 31
  %2515 = add i64 %2514, -4294967296
  %2516 = ashr i64 %2515, 32
  %2517 = getelementptr inbounds i16, ptr %2427, i64 %2516
  %2518 = load i16, ptr %2517, align 2, !tbaa !44
  br label %2519

2519:                                             ; preds = %2410, %2513
  %2520 = phi i64 [ %2423, %2513 ], [ 0, %2410 ]
  %2521 = phi i16 [ %2518, %2513 ], [ -1, %2410 ]
  %2522 = and i64 %2520, 4294967295
  %2523 = getelementptr inbounds i16, ptr %2427, i64 %2522
  store i16 %2521, ptr %2523, align 2, !tbaa !44
  %2524 = trunc i64 %2423 to i16
  %2525 = add i16 %2524, 1
  %2526 = sext i32 %2420 to i64
  %2527 = getelementptr inbounds i16, ptr %1537, i64 %2526
  store i16 %2525, ptr %2527, align 2, !tbaa !44
  %2528 = add nsw i32 %2424, 2
  %2529 = add nsw i32 %2528, %2420
  %2530 = ptrtoint ptr %1957 to i64
  %2531 = sub i64 %2530, %1011
  %2532 = lshr exact i64 %2531, 1
  %2533 = trunc i64 %2532 to i32
  %2534 = add nsw i32 %2529, 1
  %2535 = sext i32 %2534 to i64
  %2536 = getelementptr i16, ptr %1537, i64 %2535
  %2537 = icmp sgt i32 %2533, 0
  br i1 %2537, label %2538, label %2628

2538:                                             ; preds = %2519
  %2539 = and i64 %2532, 4294967295
  %2540 = icmp ult i64 %2539, 8
  br i1 %2540, label %2584, label %2541

2541:                                             ; preds = %2538
  %2542 = shl nsw i64 %2535, 1
  %2543 = add i64 %2542, %1538
  %2544 = sub i64 %2543, %1011
  %2545 = icmp ult i64 %2544, 128
  br i1 %2545, label %2584, label %2546

2546:                                             ; preds = %2541
  %2547 = icmp ult i64 %2539, 64
  br i1 %2547, label %2571, label %2548

2548:                                             ; preds = %2546
  %2549 = and i64 %2532, 63
  %2550 = sub nsw i64 %2539, %2549
  br label %2551

2551:                                             ; preds = %2551, %2548
  %2552 = phi i64 [ 0, %2548 ], [ %2565, %2551 ]
  %2553 = getelementptr inbounds i16, ptr %716, i64 %2552
  %2554 = load <16 x i16>, ptr %2553, align 2, !tbaa !44
  %2555 = getelementptr inbounds i16, ptr %2553, i64 16
  %2556 = load <16 x i16>, ptr %2555, align 2, !tbaa !44
  %2557 = getelementptr inbounds i16, ptr %2553, i64 32
  %2558 = load <16 x i16>, ptr %2557, align 2, !tbaa !44
  %2559 = getelementptr inbounds i16, ptr %2553, i64 48
  %2560 = load <16 x i16>, ptr %2559, align 2, !tbaa !44
  %2561 = getelementptr inbounds i16, ptr %2536, i64 %2552
  store <16 x i16> %2554, ptr %2561, align 2, !tbaa !44
  %2562 = getelementptr inbounds i16, ptr %2561, i64 16
  store <16 x i16> %2556, ptr %2562, align 2, !tbaa !44
  %2563 = getelementptr inbounds i16, ptr %2561, i64 32
  store <16 x i16> %2558, ptr %2563, align 2, !tbaa !44
  %2564 = getelementptr inbounds i16, ptr %2561, i64 48
  store <16 x i16> %2560, ptr %2564, align 2, !tbaa !44
  %2565 = add nuw i64 %2552, 64
  %2566 = icmp eq i64 %2565, %2550
  br i1 %2566, label %2567, label %2551, !llvm.loop !92

2567:                                             ; preds = %2551
  %2568 = icmp eq i64 %2549, 0
  br i1 %2568, label %2622, label %2569

2569:                                             ; preds = %2567
  %2570 = icmp ult i64 %2549, 8
  br i1 %2570, label %2584, label %2571

2571:                                             ; preds = %2546, %2569
  %2572 = phi i64 [ %2550, %2569 ], [ 0, %2546 ]
  %2573 = and i64 %2532, 7
  %2574 = sub nsw i64 %2539, %2573
  br label %2575

2575:                                             ; preds = %2575, %2571
  %2576 = phi i64 [ %2572, %2571 ], [ %2580, %2575 ]
  %2577 = getelementptr inbounds i16, ptr %716, i64 %2576
  %2578 = load <8 x i16>, ptr %2577, align 2, !tbaa !44
  %2579 = getelementptr inbounds i16, ptr %2536, i64 %2576
  store <8 x i16> %2578, ptr %2579, align 2, !tbaa !44
  %2580 = add nuw i64 %2576, 8
  %2581 = icmp eq i64 %2580, %2574
  br i1 %2581, label %2582, label %2575, !llvm.loop !93

2582:                                             ; preds = %2575
  %2583 = icmp eq i64 %2573, 0
  br i1 %2583, label %2622, label %2584

2584:                                             ; preds = %2541, %2538, %2569, %2582
  %2585 = phi i64 [ 0, %2538 ], [ 0, %2541 ], [ %2550, %2569 ], [ %2574, %2582 ]
  %2586 = sub i64 %2532, %2585
  %2587 = xor i64 %2585, -1
  %2588 = add nsw i64 %2539, %2587
  %2589 = and i64 %2586, 3
  %2590 = icmp eq i64 %2589, 0
  br i1 %2590, label %2600, label %2591

2591:                                             ; preds = %2584, %2591
  %2592 = phi i64 [ %2597, %2591 ], [ %2585, %2584 ]
  %2593 = phi i64 [ %2598, %2591 ], [ 0, %2584 ]
  %2594 = getelementptr inbounds i16, ptr %716, i64 %2592
  %2595 = load i16, ptr %2594, align 2, !tbaa !44
  %2596 = getelementptr inbounds i16, ptr %2536, i64 %2592
  store i16 %2595, ptr %2596, align 2, !tbaa !44
  %2597 = add nuw nsw i64 %2592, 1
  %2598 = add i64 %2593, 1
  %2599 = icmp eq i64 %2598, %2589
  br i1 %2599, label %2600, label %2591, !llvm.loop !94

2600:                                             ; preds = %2591, %2584
  %2601 = phi i64 [ %2585, %2584 ], [ %2597, %2591 ]
  %2602 = icmp ult i64 %2588, 3
  br i1 %2602, label %2622, label %2603

2603:                                             ; preds = %2600, %2603
  %2604 = phi i64 [ %2620, %2603 ], [ %2601, %2600 ]
  %2605 = getelementptr inbounds i16, ptr %716, i64 %2604
  %2606 = load i16, ptr %2605, align 2, !tbaa !44
  %2607 = getelementptr inbounds i16, ptr %2536, i64 %2604
  store i16 %2606, ptr %2607, align 2, !tbaa !44
  %2608 = add nuw nsw i64 %2604, 1
  %2609 = getelementptr inbounds i16, ptr %716, i64 %2608
  %2610 = load i16, ptr %2609, align 2, !tbaa !44
  %2611 = getelementptr inbounds i16, ptr %2536, i64 %2608
  store i16 %2610, ptr %2611, align 2, !tbaa !44
  %2612 = add nuw nsw i64 %2604, 2
  %2613 = getelementptr inbounds i16, ptr %716, i64 %2612
  %2614 = load i16, ptr %2613, align 2, !tbaa !44
  %2615 = getelementptr inbounds i16, ptr %2536, i64 %2612
  store i16 %2614, ptr %2615, align 2, !tbaa !44
  %2616 = add nuw nsw i64 %2604, 3
  %2617 = getelementptr inbounds i16, ptr %716, i64 %2616
  %2618 = load i16, ptr %2617, align 2, !tbaa !44
  %2619 = getelementptr inbounds i16, ptr %2536, i64 %2616
  store i16 %2618, ptr %2619, align 2, !tbaa !44
  %2620 = add nuw nsw i64 %2604, 4
  %2621 = icmp eq i64 %2620, %2539
  br i1 %2621, label %2622, label %2603, !llvm.loop !95

2622:                                             ; preds = %2600, %2603, %2567, %2582
  %2623 = shl i64 %2531, 31
  %2624 = add i64 %2623, -4294967296
  %2625 = ashr i64 %2624, 32
  %2626 = getelementptr inbounds i16, ptr %2536, i64 %2625
  %2627 = load i16, ptr %2626, align 2, !tbaa !44
  br label %2628

2628:                                             ; preds = %2519, %2622
  %2629 = phi i64 [ %2532, %2622 ], [ 0, %2519 ]
  %2630 = phi i16 [ %2627, %2622 ], [ -1, %2519 ]
  %2631 = and i64 %2629, 4294967295
  %2632 = getelementptr inbounds i16, ptr %2536, i64 %2631
  store i16 %2630, ptr %2632, align 2, !tbaa !44
  %2633 = trunc i64 %2532 to i16
  %2634 = add i16 %2633, 1
  %2635 = sext i32 %2529 to i64
  %2636 = getelementptr inbounds i16, ptr %1537, i64 %2635
  store i16 %2634, ptr %2636, align 2, !tbaa !44
  %2637 = add nsw i32 %2533, 2
  %2638 = add nsw i32 %2637, %2529
  %2639 = ptrtoint ptr %1956 to i64
  %2640 = sub i64 %2639, %1012
  %2641 = lshr exact i64 %2640, 1
  %2642 = trunc i64 %2641 to i32
  %2643 = add nsw i32 %2638, 1
  %2644 = sext i32 %2643 to i64
  %2645 = getelementptr i16, ptr %1537, i64 %2644
  %2646 = icmp sgt i32 %2642, 0
  br i1 %2646, label %2647, label %2737

2647:                                             ; preds = %2628
  %2648 = and i64 %2641, 4294967295
  %2649 = icmp ult i64 %2648, 8
  br i1 %2649, label %2693, label %2650

2650:                                             ; preds = %2647
  %2651 = shl nsw i64 %2644, 1
  %2652 = add i64 %2651, %1538
  %2653 = sub i64 %2652, %1012
  %2654 = icmp ult i64 %2653, 128
  br i1 %2654, label %2693, label %2655

2655:                                             ; preds = %2650
  %2656 = icmp ult i64 %2648, 64
  br i1 %2656, label %2680, label %2657

2657:                                             ; preds = %2655
  %2658 = and i64 %2641, 63
  %2659 = sub nsw i64 %2648, %2658
  br label %2660

2660:                                             ; preds = %2660, %2657
  %2661 = phi i64 [ 0, %2657 ], [ %2674, %2660 ]
  %2662 = getelementptr inbounds i16, ptr %762, i64 %2661
  %2663 = load <16 x i16>, ptr %2662, align 2, !tbaa !44
  %2664 = getelementptr inbounds i16, ptr %2662, i64 16
  %2665 = load <16 x i16>, ptr %2664, align 2, !tbaa !44
  %2666 = getelementptr inbounds i16, ptr %2662, i64 32
  %2667 = load <16 x i16>, ptr %2666, align 2, !tbaa !44
  %2668 = getelementptr inbounds i16, ptr %2662, i64 48
  %2669 = load <16 x i16>, ptr %2668, align 2, !tbaa !44
  %2670 = getelementptr inbounds i16, ptr %2645, i64 %2661
  store <16 x i16> %2663, ptr %2670, align 2, !tbaa !44
  %2671 = getelementptr inbounds i16, ptr %2670, i64 16
  store <16 x i16> %2665, ptr %2671, align 2, !tbaa !44
  %2672 = getelementptr inbounds i16, ptr %2670, i64 32
  store <16 x i16> %2667, ptr %2672, align 2, !tbaa !44
  %2673 = getelementptr inbounds i16, ptr %2670, i64 48
  store <16 x i16> %2669, ptr %2673, align 2, !tbaa !44
  %2674 = add nuw i64 %2661, 64
  %2675 = icmp eq i64 %2674, %2659
  br i1 %2675, label %2676, label %2660, !llvm.loop !96

2676:                                             ; preds = %2660
  %2677 = icmp eq i64 %2658, 0
  br i1 %2677, label %2731, label %2678

2678:                                             ; preds = %2676
  %2679 = icmp ult i64 %2658, 8
  br i1 %2679, label %2693, label %2680

2680:                                             ; preds = %2655, %2678
  %2681 = phi i64 [ %2659, %2678 ], [ 0, %2655 ]
  %2682 = and i64 %2641, 7
  %2683 = sub nsw i64 %2648, %2682
  br label %2684

2684:                                             ; preds = %2684, %2680
  %2685 = phi i64 [ %2681, %2680 ], [ %2689, %2684 ]
  %2686 = getelementptr inbounds i16, ptr %762, i64 %2685
  %2687 = load <8 x i16>, ptr %2686, align 2, !tbaa !44
  %2688 = getelementptr inbounds i16, ptr %2645, i64 %2685
  store <8 x i16> %2687, ptr %2688, align 2, !tbaa !44
  %2689 = add nuw i64 %2685, 8
  %2690 = icmp eq i64 %2689, %2683
  br i1 %2690, label %2691, label %2684, !llvm.loop !97

2691:                                             ; preds = %2684
  %2692 = icmp eq i64 %2682, 0
  br i1 %2692, label %2731, label %2693

2693:                                             ; preds = %2650, %2647, %2678, %2691
  %2694 = phi i64 [ 0, %2647 ], [ 0, %2650 ], [ %2659, %2678 ], [ %2683, %2691 ]
  %2695 = sub i64 %2641, %2694
  %2696 = xor i64 %2694, -1
  %2697 = add nsw i64 %2648, %2696
  %2698 = and i64 %2695, 3
  %2699 = icmp eq i64 %2698, 0
  br i1 %2699, label %2709, label %2700

2700:                                             ; preds = %2693, %2700
  %2701 = phi i64 [ %2706, %2700 ], [ %2694, %2693 ]
  %2702 = phi i64 [ %2707, %2700 ], [ 0, %2693 ]
  %2703 = getelementptr inbounds i16, ptr %762, i64 %2701
  %2704 = load i16, ptr %2703, align 2, !tbaa !44
  %2705 = getelementptr inbounds i16, ptr %2645, i64 %2701
  store i16 %2704, ptr %2705, align 2, !tbaa !44
  %2706 = add nuw nsw i64 %2701, 1
  %2707 = add i64 %2702, 1
  %2708 = icmp eq i64 %2707, %2698
  br i1 %2708, label %2709, label %2700, !llvm.loop !98

2709:                                             ; preds = %2700, %2693
  %2710 = phi i64 [ %2694, %2693 ], [ %2706, %2700 ]
  %2711 = icmp ult i64 %2697, 3
  br i1 %2711, label %2731, label %2712

2712:                                             ; preds = %2709, %2712
  %2713 = phi i64 [ %2729, %2712 ], [ %2710, %2709 ]
  %2714 = getelementptr inbounds i16, ptr %762, i64 %2713
  %2715 = load i16, ptr %2714, align 2, !tbaa !44
  %2716 = getelementptr inbounds i16, ptr %2645, i64 %2713
  store i16 %2715, ptr %2716, align 2, !tbaa !44
  %2717 = add nuw nsw i64 %2713, 1
  %2718 = getelementptr inbounds i16, ptr %762, i64 %2717
  %2719 = load i16, ptr %2718, align 2, !tbaa !44
  %2720 = getelementptr inbounds i16, ptr %2645, i64 %2717
  store i16 %2719, ptr %2720, align 2, !tbaa !44
  %2721 = add nuw nsw i64 %2713, 2
  %2722 = getelementptr inbounds i16, ptr %762, i64 %2721
  %2723 = load i16, ptr %2722, align 2, !tbaa !44
  %2724 = getelementptr inbounds i16, ptr %2645, i64 %2721
  store i16 %2723, ptr %2724, align 2, !tbaa !44
  %2725 = add nuw nsw i64 %2713, 3
  %2726 = getelementptr inbounds i16, ptr %762, i64 %2725
  %2727 = load i16, ptr %2726, align 2, !tbaa !44
  %2728 = getelementptr inbounds i16, ptr %2645, i64 %2725
  store i16 %2727, ptr %2728, align 2, !tbaa !44
  %2729 = add nuw nsw i64 %2713, 4
  %2730 = icmp eq i64 %2729, %2648
  br i1 %2730, label %2731, label %2712, !llvm.loop !99

2731:                                             ; preds = %2709, %2712, %2676, %2691
  %2732 = shl i64 %2640, 31
  %2733 = add i64 %2732, -4294967296
  %2734 = ashr i64 %2733, 32
  %2735 = getelementptr inbounds i16, ptr %2645, i64 %2734
  %2736 = load i16, ptr %2735, align 2, !tbaa !44
  br label %2737

2737:                                             ; preds = %2628, %2731
  %2738 = phi i64 [ %2641, %2731 ], [ 0, %2628 ]
  %2739 = phi i16 [ %2736, %2731 ], [ -1, %2628 ]
  %2740 = and i64 %2738, 4294967295
  %2741 = getelementptr inbounds i16, ptr %2645, i64 %2740
  store i16 %2739, ptr %2741, align 2, !tbaa !44
  %2742 = trunc i64 %2641 to i16
  %2743 = add i16 %2742, 1
  %2744 = sext i32 %2638 to i64
  %2745 = getelementptr inbounds i16, ptr %1537, i64 %2744
  store i16 %2743, ptr %2745, align 2, !tbaa !44
  %2746 = add nsw i32 %2642, 2
  %2747 = add nsw i32 %2746, %2638
  %2748 = ptrtoint ptr %1955 to i64
  %2749 = sub i64 %2748, %1013
  %2750 = lshr exact i64 %2749, 1
  %2751 = trunc i64 %2750 to i32
  %2752 = add nsw i32 %2747, 1
  %2753 = sext i32 %2752 to i64
  %2754 = getelementptr i16, ptr %1537, i64 %2753
  %2755 = icmp sgt i32 %2751, 0
  br i1 %2755, label %2756, label %2846

2756:                                             ; preds = %2737
  %2757 = and i64 %2750, 4294967295
  %2758 = icmp ult i64 %2757, 8
  br i1 %2758, label %2802, label %2759

2759:                                             ; preds = %2756
  %2760 = shl nsw i64 %2753, 1
  %2761 = add i64 %2760, %1538
  %2762 = sub i64 %2761, %1013
  %2763 = icmp ult i64 %2762, 128
  br i1 %2763, label %2802, label %2764

2764:                                             ; preds = %2759
  %2765 = icmp ult i64 %2757, 64
  br i1 %2765, label %2789, label %2766

2766:                                             ; preds = %2764
  %2767 = and i64 %2750, 63
  %2768 = sub nsw i64 %2757, %2767
  br label %2769

2769:                                             ; preds = %2769, %2766
  %2770 = phi i64 [ 0, %2766 ], [ %2783, %2769 ]
  %2771 = getelementptr inbounds i16, ptr %808, i64 %2770
  %2772 = load <16 x i16>, ptr %2771, align 2, !tbaa !44
  %2773 = getelementptr inbounds i16, ptr %2771, i64 16
  %2774 = load <16 x i16>, ptr %2773, align 2, !tbaa !44
  %2775 = getelementptr inbounds i16, ptr %2771, i64 32
  %2776 = load <16 x i16>, ptr %2775, align 2, !tbaa !44
  %2777 = getelementptr inbounds i16, ptr %2771, i64 48
  %2778 = load <16 x i16>, ptr %2777, align 2, !tbaa !44
  %2779 = getelementptr inbounds i16, ptr %2754, i64 %2770
  store <16 x i16> %2772, ptr %2779, align 2, !tbaa !44
  %2780 = getelementptr inbounds i16, ptr %2779, i64 16
  store <16 x i16> %2774, ptr %2780, align 2, !tbaa !44
  %2781 = getelementptr inbounds i16, ptr %2779, i64 32
  store <16 x i16> %2776, ptr %2781, align 2, !tbaa !44
  %2782 = getelementptr inbounds i16, ptr %2779, i64 48
  store <16 x i16> %2778, ptr %2782, align 2, !tbaa !44
  %2783 = add nuw i64 %2770, 64
  %2784 = icmp eq i64 %2783, %2768
  br i1 %2784, label %2785, label %2769, !llvm.loop !100

2785:                                             ; preds = %2769
  %2786 = icmp eq i64 %2767, 0
  br i1 %2786, label %2840, label %2787

2787:                                             ; preds = %2785
  %2788 = icmp ult i64 %2767, 8
  br i1 %2788, label %2802, label %2789

2789:                                             ; preds = %2764, %2787
  %2790 = phi i64 [ %2768, %2787 ], [ 0, %2764 ]
  %2791 = and i64 %2750, 7
  %2792 = sub nsw i64 %2757, %2791
  br label %2793

2793:                                             ; preds = %2793, %2789
  %2794 = phi i64 [ %2790, %2789 ], [ %2798, %2793 ]
  %2795 = getelementptr inbounds i16, ptr %808, i64 %2794
  %2796 = load <8 x i16>, ptr %2795, align 2, !tbaa !44
  %2797 = getelementptr inbounds i16, ptr %2754, i64 %2794
  store <8 x i16> %2796, ptr %2797, align 2, !tbaa !44
  %2798 = add nuw i64 %2794, 8
  %2799 = icmp eq i64 %2798, %2792
  br i1 %2799, label %2800, label %2793, !llvm.loop !101

2800:                                             ; preds = %2793
  %2801 = icmp eq i64 %2791, 0
  br i1 %2801, label %2840, label %2802

2802:                                             ; preds = %2759, %2756, %2787, %2800
  %2803 = phi i64 [ 0, %2756 ], [ 0, %2759 ], [ %2768, %2787 ], [ %2792, %2800 ]
  %2804 = sub i64 %2750, %2803
  %2805 = xor i64 %2803, -1
  %2806 = add nsw i64 %2757, %2805
  %2807 = and i64 %2804, 3
  %2808 = icmp eq i64 %2807, 0
  br i1 %2808, label %2818, label %2809

2809:                                             ; preds = %2802, %2809
  %2810 = phi i64 [ %2815, %2809 ], [ %2803, %2802 ]
  %2811 = phi i64 [ %2816, %2809 ], [ 0, %2802 ]
  %2812 = getelementptr inbounds i16, ptr %808, i64 %2810
  %2813 = load i16, ptr %2812, align 2, !tbaa !44
  %2814 = getelementptr inbounds i16, ptr %2754, i64 %2810
  store i16 %2813, ptr %2814, align 2, !tbaa !44
  %2815 = add nuw nsw i64 %2810, 1
  %2816 = add i64 %2811, 1
  %2817 = icmp eq i64 %2816, %2807
  br i1 %2817, label %2818, label %2809, !llvm.loop !102

2818:                                             ; preds = %2809, %2802
  %2819 = phi i64 [ %2803, %2802 ], [ %2815, %2809 ]
  %2820 = icmp ult i64 %2806, 3
  br i1 %2820, label %2840, label %2821

2821:                                             ; preds = %2818, %2821
  %2822 = phi i64 [ %2838, %2821 ], [ %2819, %2818 ]
  %2823 = getelementptr inbounds i16, ptr %808, i64 %2822
  %2824 = load i16, ptr %2823, align 2, !tbaa !44
  %2825 = getelementptr inbounds i16, ptr %2754, i64 %2822
  store i16 %2824, ptr %2825, align 2, !tbaa !44
  %2826 = add nuw nsw i64 %2822, 1
  %2827 = getelementptr inbounds i16, ptr %808, i64 %2826
  %2828 = load i16, ptr %2827, align 2, !tbaa !44
  %2829 = getelementptr inbounds i16, ptr %2754, i64 %2826
  store i16 %2828, ptr %2829, align 2, !tbaa !44
  %2830 = add nuw nsw i64 %2822, 2
  %2831 = getelementptr inbounds i16, ptr %808, i64 %2830
  %2832 = load i16, ptr %2831, align 2, !tbaa !44
  %2833 = getelementptr inbounds i16, ptr %2754, i64 %2830
  store i16 %2832, ptr %2833, align 2, !tbaa !44
  %2834 = add nuw nsw i64 %2822, 3
  %2835 = getelementptr inbounds i16, ptr %808, i64 %2834
  %2836 = load i16, ptr %2835, align 2, !tbaa !44
  %2837 = getelementptr inbounds i16, ptr %2754, i64 %2834
  store i16 %2836, ptr %2837, align 2, !tbaa !44
  %2838 = add nuw nsw i64 %2822, 4
  %2839 = icmp eq i64 %2838, %2757
  br i1 %2839, label %2840, label %2821, !llvm.loop !103

2840:                                             ; preds = %2818, %2821, %2785, %2800
  %2841 = shl i64 %2749, 31
  %2842 = add i64 %2841, -4294967296
  %2843 = ashr i64 %2842, 32
  %2844 = getelementptr inbounds i16, ptr %2754, i64 %2843
  %2845 = load i16, ptr %2844, align 2, !tbaa !44
  br label %2846

2846:                                             ; preds = %2737, %2840
  %2847 = phi i64 [ %2750, %2840 ], [ 0, %2737 ]
  %2848 = phi i16 [ %2845, %2840 ], [ -1, %2737 ]
  %2849 = and i64 %2847, 4294967295
  %2850 = getelementptr inbounds i16, ptr %2754, i64 %2849
  store i16 %2848, ptr %2850, align 2, !tbaa !44
  %2851 = trunc i64 %2750 to i16
  %2852 = add i16 %2851, 1
  %2853 = sext i32 %2747 to i64
  %2854 = getelementptr inbounds i16, ptr %1537, i64 %2853
  store i16 %2852, ptr %2854, align 2, !tbaa !44
  %2855 = add i32 %2751, 3
  %2856 = add i32 %2855, %2747
  %2857 = select i1 %207, i32 1, i32 %2856
  store i32 %2857, ptr %17, align 8, !tbaa !17
  br label %2936

2858:                                             ; preds = %1056
  %2859 = load ptr, ptr %12, align 8, !tbaa !46
  %2860 = load i32, ptr %17, align 8, !tbaa !17
  %2861 = add i32 %2860, 1
  %2862 = sext i32 %2861 to i64
  %2863 = getelementptr inbounds i16, ptr %2859, i64 %2862
  %2864 = sext i32 %2860 to i64
  %2865 = getelementptr inbounds i16, ptr %2859, i64 %2864
  %2866 = load i16, ptr %2865, align 2, !tbaa !44
  %2867 = zext i16 %2866 to i32
  %2868 = add i32 %2861, %2867
  %2869 = add nsw i32 %2867, -1
  %2870 = sext i32 %2868 to i64
  %2871 = getelementptr inbounds i16, ptr %2859, i64 %2870
  %2872 = load i16, ptr %2871, align 2, !tbaa !44
  %2873 = zext i16 %2872 to i32
  %2874 = add nuw nsw i32 %2873, 1
  %2875 = add nsw i32 %2874, %2868
  %2876 = add nsw i32 %2873, -1
  %2877 = add i32 %2875, 1
  %2878 = sext i32 %2877 to i64
  %2879 = getelementptr inbounds i16, ptr %2859, i64 %2878
  %2880 = sext i32 %2875 to i64
  %2881 = getelementptr inbounds i16, ptr %2859, i64 %2880
  %2882 = load i16, ptr %2881, align 2, !tbaa !44
  %2883 = zext i16 %2882 to i32
  %2884 = add i32 %2877, %2883
  %2885 = add nsw i32 %2883, -1
  %2886 = add i32 %2884, 1
  %2887 = sext i32 %2886 to i64
  %2888 = getelementptr inbounds i16, ptr %2859, i64 %2887
  %2889 = sext i32 %2884 to i64
  %2890 = getelementptr inbounds i16, ptr %2859, i64 %2889
  %2891 = load i16, ptr %2890, align 2, !tbaa !44
  %2892 = zext i16 %2891 to i32
  %2893 = add i32 %2886, %2892
  %2894 = add nsw i32 %2892, -1
  %2895 = sext i32 %2893 to i64
  %2896 = getelementptr inbounds i16, ptr %2859, i64 %2895
  %2897 = load i16, ptr %2896, align 2, !tbaa !44
  %2898 = zext i16 %2897 to i32
  %2899 = add nuw nsw i32 %2898, 1
  %2900 = add nsw i32 %2899, %2893
  %2901 = add nsw i32 %2898, -1
  %2902 = add i32 %2900, 1
  %2903 = sext i32 %2902 to i64
  %2904 = getelementptr inbounds i16, ptr %2859, i64 %2903
  %2905 = sext i32 %2900 to i64
  %2906 = getelementptr inbounds i16, ptr %2859, i64 %2905
  %2907 = load i16, ptr %2906, align 2, !tbaa !44
  %2908 = zext i16 %2907 to i32
  %2909 = add i32 %2902, %2908
  %2910 = add nsw i32 %2908, -1
  %2911 = add i32 %2909, 1
  %2912 = sext i32 %2911 to i64
  %2913 = getelementptr inbounds i16, ptr %2859, i64 %2912
  %2914 = sext i32 %2909 to i64
  %2915 = getelementptr inbounds i16, ptr %2859, i64 %2914
  %2916 = load i16, ptr %2915, align 2, !tbaa !44
  %2917 = zext i16 %2916 to i32
  %2918 = add i32 %2911, %2917
  %2919 = add nsw i32 %2917, -1
  %2920 = sext i32 %2918 to i64
  %2921 = getelementptr inbounds i16, ptr %2859, i64 %2920
  %2922 = load i16, ptr %2921, align 2, !tbaa !44
  %2923 = zext i16 %2922 to i32
  %2924 = add nuw nsw i32 %2923, 1
  %2925 = add nsw i32 %2924, %2918
  %2926 = add nsw i32 %2923, -1
  %2927 = add i32 %2925, 1
  %2928 = sext i32 %2927 to i64
  %2929 = getelementptr inbounds i16, ptr %2859, i64 %2928
  %2930 = sext i32 %2925 to i64
  %2931 = getelementptr inbounds i16, ptr %2859, i64 %2930
  %2932 = load i16, ptr %2931, align 2, !tbaa !44
  %2933 = zext i16 %2932 to i32
  %2934 = add i32 %2927, %2933
  store i32 %2934, ptr %17, align 8, !tbaa !17
  %2935 = add nsw i32 %2933, -1
  br label %2936

2936:                                             ; preds = %2846, %2858
  %2937 = phi ptr [ %2863, %2858 ], [ %1541, %2846 ]
  %2938 = phi i32 [ %2869, %2858 ], [ %1967, %2846 ]
  %2939 = phi i32 [ %2876, %2858 ], [ %1988, %2846 ]
  %2940 = phi ptr [ %2879, %2858 ], [ %2100, %2846 ]
  %2941 = phi i32 [ %2885, %2858 ], [ %2097, %2846 ]
  %2942 = phi ptr [ %2888, %2858 ], [ %2209, %2846 ]
  %2943 = phi i32 [ %2894, %2858 ], [ %2206, %2846 ]
  %2944 = phi i32 [ %2901, %2858 ], [ %2315, %2846 ]
  %2945 = phi ptr [ %2904, %2858 ], [ %2427, %2846 ]
  %2946 = phi i32 [ %2910, %2858 ], [ %2424, %2846 ]
  %2947 = phi ptr [ %2913, %2858 ], [ %2536, %2846 ]
  %2948 = phi i32 [ %2919, %2858 ], [ %2533, %2846 ]
  %2949 = phi i32 [ %2926, %2858 ], [ %2642, %2846 ]
  %2950 = phi ptr [ %2929, %2858 ], [ %2754, %2846 ]
  %2951 = phi i32 [ %2935, %2858 ], [ %2751, %2846 ]
  %2952 = phi i32 [ %1035, %2858 ], [ %1502, %2846 ]
  %2953 = phi ptr [ %1034, %2858 ], [ %1311, %2846 ]
  %2954 = phi ptr [ %1033, %2858 ], [ %1312, %2846 ]
  %2955 = phi ptr [ %1032, %2858 ], [ %1313, %2846 ]
  %2956 = getelementptr inbounds %struct.CompAtom, ptr %104, i64 %1041, i32 1
  %2957 = load float, ptr %2956, align 8, !tbaa !104
  %2958 = fpext float %2957 to double
  %2959 = fmul double %2958, 0x4074C104816F0069
  %2960 = fmul double %32, %2959
  %2961 = fmul double %28, %2960
  %2962 = getelementptr inbounds %struct.CompAtom, ptr %104, i64 %1041, i32 2
  %2963 = load i16, ptr %2962, align 4, !tbaa !105
  %2964 = sext i16 %2963 to i32
  %2965 = load ptr, ptr %1014, align 8, !tbaa !106
  %2966 = load i32, ptr %1015, align 8, !tbaa !108
  %2967 = shl nsw i32 %2964, 1
  %2968 = mul i32 %2967, %2966
  %2969 = zext i32 %2968 to i64
  %2970 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %2965, i64 %2969
  %2971 = load double, ptr @_ZN20ComputeNonbondedUtil7cutoff2E, align 8, !tbaa !19
  %2972 = extractelement <2 x double> %1059, i64 0
  %2973 = extractelement <2 x double> %1059, i64 1
  %2974 = call noundef i32 @_Z22pairlist_from_pairlistddddPK8CompAtomPKtiPtdPd(double noundef %2971, double noundef %2972, double noundef %2973, double noundef %1062, ptr noundef %106, ptr noundef nonnull %2937, i32 noundef %2938, ptr noundef %159, double noundef %34, ptr noundef %205)
  %2975 = icmp sgt i32 %2974, 0
  br i1 %2975, label %2976, label %3112

2976:                                             ; preds = %2936
  %2977 = load ptr, ptr @_ZN20ComputeNonbondedUtil8r2_tableE, align 8, !tbaa !23
  %2978 = zext i32 %2974 to i64
  br label %2979

2979:                                             ; preds = %2976, %2979
  %2980 = phi i64 [ 0, %2976 ], [ %3110, %2979 ]
  %2981 = phi double [ %1029, %2976 ], [ %3057, %2979 ]
  %2982 = phi double [ %1030, %2976 ], [ %3058, %2979 ]
  %2983 = phi double [ 0.000000e+00, %2976 ], [ %3106, %2979 ]
  %2984 = phi <2 x double> [ %1037, %2976 ], [ %3098, %2979 ]
  %2985 = phi <2 x double> [ %1038, %2976 ], [ %3091, %2979 ]
  %2986 = phi <2 x double> [ %1039, %2976 ], [ %3079, %2979 ]
  %2987 = phi <2 x double> [ %1040, %2976 ], [ %3104, %2979 ]
  %2988 = phi <2 x double> [ zeroinitializer, %2976 ], [ %3100, %2979 ]
  %2989 = shl nuw nsw i64 %2980, 1
  %2990 = getelementptr inbounds i32, ptr %206, i64 %2989
  %2991 = load i32, ptr %2990, align 4, !tbaa !5
  %2992 = ashr i32 %2991, 14
  %2993 = add nsw i32 %2992, %37
  %2994 = getelementptr inbounds i16, ptr %159, i64 %2980
  %2995 = load i16, ptr %2994, align 2, !tbaa !44
  %2996 = zext i16 %2995 to i64
  %2997 = getelementptr inbounds %struct.CompAtom, ptr %106, i64 %2996
  %2998 = getelementptr inbounds double, ptr %205, i64 %2980
  %2999 = load double, ptr %2998, align 8, !tbaa !19
  %3000 = sext i32 %2993 to i64
  %3001 = getelementptr inbounds double, ptr %2977, i64 %3000
  %3002 = load double, ptr %3001, align 8, !tbaa !19
  %3003 = fsub double %2999, %3002
  %3004 = shl nsw i32 %2993, 4
  %3005 = sext i32 %3004 to i64
  %3006 = getelementptr inbounds double, ptr %31, i64 %3005
  %3007 = getelementptr inbounds %struct.CompAtom, ptr %106, i64 %2996, i32 2
  %3008 = load i16, ptr %3007, align 4, !tbaa !105
  %3009 = sext i16 %3008 to i32
  %3010 = shl nsw i32 %3009, 1
  %3011 = sext i32 %3010 to i64
  %3012 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %2970, i64 %3011
  %3013 = getelementptr inbounds %class.Vector, ptr %989, i64 %2996
  %3014 = getelementptr inbounds %struct.CompAtom, ptr %106, i64 %2996, i32 1
  %3015 = load float, ptr %3014, align 8, !tbaa !104
  %3016 = fpext float %3015 to double
  %3017 = fmul double %2961, %3016
  %3018 = load <2 x double>, ptr %2997, align 8, !tbaa !19
  %3019 = fsub <2 x double> %1059, %3018
  %3020 = getelementptr inbounds %class.Vector, ptr %2997, i64 0, i32 2
  %3021 = load double, ptr %3020, align 8, !tbaa !49
  %3022 = fsub double %1062, %3021
  %3023 = load double, ptr %3012, align 8, !tbaa !109
  %3024 = fmul double %32, %3023
  %3025 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %2970, i64 %3011, i32 1
  %3026 = load double, ptr %3025, align 8, !tbaa !111
  %3027 = load double, ptr %3006, align 8, !tbaa !19
  %3028 = getelementptr inbounds double, ptr %3006, i64 2
  %3029 = load double, ptr %3028, align 8, !tbaa !19
  %3030 = fmul double %3026, %1016
  %3031 = fmul double %3030, %3029
  %3032 = call double @llvm.fmuladd.f64(double %3024, double %3027, double %3031)
  %3033 = getelementptr inbounds double, ptr %3006, i64 1
  %3034 = load double, ptr %3033, align 8, !tbaa !19
  %3035 = getelementptr inbounds double, ptr %3006, i64 3
  %3036 = load double, ptr %3035, align 8, !tbaa !19
  %3037 = fmul double %3030, %3036
  %3038 = call double @llvm.fmuladd.f64(double %3024, double %3034, double %3037)
  %3039 = getelementptr inbounds double, ptr %3006, i64 4
  %3040 = load double, ptr %3039, align 8, !tbaa !19
  %3041 = getelementptr inbounds double, ptr %3006, i64 6
  %3042 = load double, ptr %3041, align 8, !tbaa !19
  %3043 = fmul double %3030, %3042
  %3044 = call double @llvm.fmuladd.f64(double %3024, double %3040, double %3043)
  %3045 = getelementptr inbounds double, ptr %3006, i64 5
  %3046 = load double, ptr %3045, align 8, !tbaa !19
  %3047 = getelementptr inbounds double, ptr %3006, i64 7
  %3048 = load double, ptr %3047, align 8, !tbaa !19
  %3049 = fmul double %3030, %3048
  %3050 = call double @llvm.fmuladd.f64(double %3024, double %3046, double %3049)
  %3051 = fmul double %3003, %3032
  %3052 = fmul double %3038, 2.500000e-01
  %3053 = call double @llvm.fmuladd.f64(double %3051, double 0x3FC5555555555555, double %3052)
  %3054 = fmul double %3044, 5.000000e-01
  %3055 = call double @llvm.fmuladd.f64(double %3053, double %3003, double %3054)
  %3056 = call double @llvm.fmuladd.f64(double %3055, double %3003, double %3050)
  %3057 = fsub double %2981, %3056
  %3058 = fsub double %2982, %3056
  %3059 = getelementptr inbounds double, ptr %3006, i64 8
  %3060 = load double, ptr %3059, align 8, !tbaa !19
  %3061 = fmul double %3017, %3060
  %3062 = getelementptr inbounds double, ptr %3006, i64 9
  %3063 = load double, ptr %3062, align 8, !tbaa !19
  %3064 = fmul double %3017, %3063
  %3065 = getelementptr inbounds double, ptr %3006, i64 10
  %3066 = load double, ptr %3065, align 8, !tbaa !19
  %3067 = fmul double %3017, %3066
  %3068 = getelementptr inbounds double, ptr %3006, i64 11
  %3069 = load double, ptr %3068, align 8, !tbaa !19
  %3070 = fmul double %3017, %3069
  %3071 = fmul double %3003, %3061
  %3072 = fmul double %3064, 2.500000e-01
  %3073 = call double @llvm.fmuladd.f64(double %3071, double 0x3FC5555555555555, double %3072)
  %3074 = fmul double %3067, 5.000000e-01
  %3075 = call double @llvm.fmuladd.f64(double %3073, double %3003, double %3074)
  %3076 = call double @llvm.fmuladd.f64(double %3075, double %3003, double %3070)
  %3077 = insertelement <2 x double> poison, double %3076, i64 0
  %3078 = shufflevector <2 x double> %3077, <2 x double> poison, <2 x i32> zeroinitializer
  %3079 = fsub <2 x double> %2986, %3078
  %3080 = fadd double %3032, %3061
  %3081 = fadd double %3038, %3064
  %3082 = fadd double %3044, %3067
  %3083 = call double @llvm.fmuladd.f64(double %3003, double %3080, double %3081)
  %3084 = call double @llvm.fmuladd.f64(double %3083, double %3003, double %3082)
  %3085 = extractelement <2 x double> %3019, i64 1
  %3086 = fmul double %3085, %3084
  %3087 = insertelement <2 x double> poison, double %3086, i64 0
  %3088 = shufflevector <2 x double> %3087, <2 x double> poison, <2 x i32> zeroinitializer
  %3089 = shufflevector <2 x double> %3019, <2 x double> poison, <2 x i32> <i32 1, i32 0>
  %3090 = insertelement <2 x double> %3089, double %3022, i64 1
  %3091 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %3088, <2 x double> %3090, <2 x double> %2985)
  %3092 = insertelement <2 x double> %3089, double %3022, i64 0
  %3093 = insertelement <2 x double> poison, double %3084, i64 0
  %3094 = shufflevector <2 x double> %3093, <2 x double> poison, <2 x i32> zeroinitializer
  %3095 = fmul <2 x double> %3092, %3094
  %3096 = shufflevector <2 x double> %3095, <2 x double> poison, <2 x i32> <i32 1, i32 poison>
  %3097 = shufflevector <2 x double> %3095, <2 x double> poison, <2 x i32> <i32 1, i32 1>
  %3098 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %3097, <2 x double> %3019, <2 x double> %2984)
  %3099 = insertelement <2 x double> %3096, double %3086, i64 1
  %3100 = fadd <2 x double> %2988, %3099
  %3101 = load <2 x double>, ptr %3013, align 8, !tbaa !19
  %3102 = fsub <2 x double> %3101, %3099
  store <2 x double> %3102, ptr %3013, align 8, !tbaa !19
  %3103 = shufflevector <2 x double> %3092, <2 x double> poison, <2 x i32> zeroinitializer
  %3104 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %3095, <2 x double> %3103, <2 x double> %2987)
  %3105 = extractelement <2 x double> %3095, i64 0
  %3106 = fadd double %2983, %3105
  %3107 = getelementptr inbounds %class.Vector, ptr %989, i64 %2996, i32 2
  %3108 = load double, ptr %3107, align 8, !tbaa !112
  %3109 = fsub double %3108, %3105
  store double %3109, ptr %3107, align 8, !tbaa !112
  %3110 = add nuw nsw i64 %2980, 1
  %3111 = icmp eq i64 %3110, %2978
  br i1 %3111, label %3112, label %2979

3112:                                             ; preds = %2979, %2936
  %3113 = phi double [ 0.000000e+00, %2936 ], [ %3106, %2979 ]
  %3114 = phi double [ %1030, %2936 ], [ %3058, %2979 ]
  %3115 = phi double [ %1029, %2936 ], [ %3057, %2979 ]
  %3116 = phi <2 x double> [ %1037, %2936 ], [ %3098, %2979 ]
  %3117 = phi <2 x double> [ %1038, %2936 ], [ %3091, %2979 ]
  %3118 = phi <2 x double> [ %1039, %2936 ], [ %3079, %2979 ]
  %3119 = phi <2 x double> [ %1040, %2936 ], [ %3104, %2979 ]
  %3120 = phi <2 x double> [ zeroinitializer, %2936 ], [ %3100, %2979 ]
  %3121 = load double, ptr @_ZN20ComputeNonbondedUtil7cutoff2E, align 8, !tbaa !19
  %3122 = call noundef i32 @_Z22pairlist_from_pairlistddddPK8CompAtomPKtiPtdPd(double noundef %3121, double noundef %2972, double noundef %2973, double noundef %1062, ptr noundef %106, ptr noundef %2940, i32 noundef %2941, ptr noundef %159, double noundef %34, ptr noundef %205)
  %3123 = icmp sgt i32 %3122, 0
  br i1 %3123, label %3124, label %3262

3124:                                             ; preds = %3112
  %3125 = load ptr, ptr @_ZN20ComputeNonbondedUtil8r2_tableE, align 8, !tbaa !23
  %3126 = zext i32 %3122 to i64
  br label %3127

3127:                                             ; preds = %3124, %3127
  %3128 = phi i64 [ 0, %3124 ], [ %3260, %3127 ]
  %3129 = phi double [ %3115, %3124 ], [ %3206, %3127 ]
  %3130 = phi double [ %3114, %3124 ], [ %3207, %3127 ]
  %3131 = phi double [ %3113, %3124 ], [ %3256, %3127 ]
  %3132 = phi <2 x double> [ %3116, %3124 ], [ %3248, %3127 ]
  %3133 = phi <2 x double> [ %3117, %3124 ], [ %3241, %3127 ]
  %3134 = phi <2 x double> [ %3118, %3124 ], [ %3229, %3127 ]
  %3135 = phi <2 x double> [ %3119, %3124 ], [ %3254, %3127 ]
  %3136 = phi <2 x double> [ %3120, %3124 ], [ %3250, %3127 ]
  %3137 = shl nuw nsw i64 %3128, 1
  %3138 = getelementptr inbounds i32, ptr %206, i64 %3137
  %3139 = load i32, ptr %3138, align 4, !tbaa !5
  %3140 = ashr i32 %3139, 14
  %3141 = add nsw i32 %3140, %37
  %3142 = getelementptr inbounds i16, ptr %159, i64 %3128
  %3143 = load i16, ptr %3142, align 2, !tbaa !44
  %3144 = zext i16 %3143 to i64
  %3145 = getelementptr inbounds %struct.CompAtom, ptr %106, i64 %3144
  %3146 = getelementptr inbounds double, ptr %205, i64 %3128
  %3147 = load double, ptr %3146, align 8, !tbaa !19
  %3148 = sext i32 %3141 to i64
  %3149 = getelementptr inbounds double, ptr %3125, i64 %3148
  %3150 = load double, ptr %3149, align 8, !tbaa !19
  %3151 = fsub double %3147, %3150
  %3152 = shl nsw i32 %3141, 4
  %3153 = sext i32 %3152 to i64
  %3154 = getelementptr inbounds double, ptr %31, i64 %3153
  %3155 = getelementptr inbounds %struct.CompAtom, ptr %106, i64 %3144, i32 2
  %3156 = load i16, ptr %3155, align 4, !tbaa !105
  %3157 = sext i16 %3156 to i32
  %3158 = shl nsw i32 %3157, 1
  %3159 = sext i32 %3158 to i64
  %3160 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %2970, i64 %3159
  %3161 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %3160, i64 1
  %3162 = getelementptr inbounds %class.Vector, ptr %989, i64 %3144
  %3163 = getelementptr inbounds %struct.CompAtom, ptr %106, i64 %3144, i32 1
  %3164 = load float, ptr %3163, align 8, !tbaa !104
  %3165 = fpext float %3164 to double
  %3166 = fmul double %2961, %3165
  %3167 = load <2 x double>, ptr %3145, align 8, !tbaa !19
  %3168 = fsub <2 x double> %1059, %3167
  %3169 = getelementptr inbounds %class.Vector, ptr %3145, i64 0, i32 2
  %3170 = load double, ptr %3169, align 8, !tbaa !49
  %3171 = fsub double %1062, %3170
  %3172 = load double, ptr %3161, align 8, !tbaa !109
  %3173 = fmul double %32, %3172
  %3174 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %3160, i64 1, i32 1
  %3175 = load double, ptr %3174, align 8, !tbaa !111
  %3176 = load double, ptr %3154, align 8, !tbaa !19
  %3177 = getelementptr inbounds double, ptr %3154, i64 2
  %3178 = load double, ptr %3177, align 8, !tbaa !19
  %3179 = fmul double %3175, %1016
  %3180 = fmul double %3179, %3178
  %3181 = call double @llvm.fmuladd.f64(double %3173, double %3176, double %3180)
  %3182 = getelementptr inbounds double, ptr %3154, i64 1
  %3183 = load double, ptr %3182, align 8, !tbaa !19
  %3184 = getelementptr inbounds double, ptr %3154, i64 3
  %3185 = load double, ptr %3184, align 8, !tbaa !19
  %3186 = fmul double %3179, %3185
  %3187 = call double @llvm.fmuladd.f64(double %3173, double %3183, double %3186)
  %3188 = getelementptr inbounds double, ptr %3154, i64 4
  %3189 = load double, ptr %3188, align 8, !tbaa !19
  %3190 = getelementptr inbounds double, ptr %3154, i64 6
  %3191 = load double, ptr %3190, align 8, !tbaa !19
  %3192 = fmul double %3179, %3191
  %3193 = call double @llvm.fmuladd.f64(double %3173, double %3189, double %3192)
  %3194 = getelementptr inbounds double, ptr %3154, i64 5
  %3195 = load double, ptr %3194, align 8, !tbaa !19
  %3196 = getelementptr inbounds double, ptr %3154, i64 7
  %3197 = load double, ptr %3196, align 8, !tbaa !19
  %3198 = fmul double %3179, %3197
  %3199 = call double @llvm.fmuladd.f64(double %3173, double %3195, double %3198)
  %3200 = fmul double %3151, %3181
  %3201 = fmul double %3187, 2.500000e-01
  %3202 = call double @llvm.fmuladd.f64(double %3200, double 0x3FC5555555555555, double %3201)
  %3203 = fmul double %3193, 5.000000e-01
  %3204 = call double @llvm.fmuladd.f64(double %3202, double %3151, double %3203)
  %3205 = call double @llvm.fmuladd.f64(double %3204, double %3151, double %3199)
  %3206 = fsub double %3129, %3205
  %3207 = fsub double %3130, %3205
  %3208 = fmul double %1018, %3166
  %3209 = getelementptr inbounds double, ptr %3154, i64 8
  %3210 = load double, ptr %3209, align 8, !tbaa !19
  %3211 = fmul double %3208, %3210
  %3212 = getelementptr inbounds double, ptr %3154, i64 9
  %3213 = load double, ptr %3212, align 8, !tbaa !19
  %3214 = fmul double %3208, %3213
  %3215 = getelementptr inbounds double, ptr %3154, i64 10
  %3216 = load double, ptr %3215, align 8, !tbaa !19
  %3217 = fmul double %3208, %3216
  %3218 = getelementptr inbounds double, ptr %3154, i64 11
  %3219 = load double, ptr %3218, align 8, !tbaa !19
  %3220 = fmul double %3208, %3219
  %3221 = fmul double %3151, %3211
  %3222 = fmul double %3214, 2.500000e-01
  %3223 = call double @llvm.fmuladd.f64(double %3221, double 0x3FC5555555555555, double %3222)
  %3224 = fmul double %3217, 5.000000e-01
  %3225 = call double @llvm.fmuladd.f64(double %3223, double %3151, double %3224)
  %3226 = call double @llvm.fmuladd.f64(double %3225, double %3151, double %3220)
  %3227 = insertelement <2 x double> poison, double %3226, i64 0
  %3228 = shufflevector <2 x double> %3227, <2 x double> poison, <2 x i32> zeroinitializer
  %3229 = fsub <2 x double> %3134, %3228
  %3230 = fadd double %3181, %3211
  %3231 = fadd double %3187, %3214
  %3232 = fadd double %3193, %3217
  %3233 = call double @llvm.fmuladd.f64(double %3151, double %3230, double %3231)
  %3234 = call double @llvm.fmuladd.f64(double %3233, double %3151, double %3232)
  %3235 = extractelement <2 x double> %3168, i64 1
  %3236 = fmul double %3235, %3234
  %3237 = insertelement <2 x double> poison, double %3236, i64 0
  %3238 = shufflevector <2 x double> %3237, <2 x double> poison, <2 x i32> zeroinitializer
  %3239 = shufflevector <2 x double> %3168, <2 x double> poison, <2 x i32> <i32 1, i32 0>
  %3240 = insertelement <2 x double> %3239, double %3171, i64 1
  %3241 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %3238, <2 x double> %3240, <2 x double> %3133)
  %3242 = insertelement <2 x double> %3239, double %3171, i64 0
  %3243 = insertelement <2 x double> poison, double %3234, i64 0
  %3244 = shufflevector <2 x double> %3243, <2 x double> poison, <2 x i32> zeroinitializer
  %3245 = fmul <2 x double> %3242, %3244
  %3246 = shufflevector <2 x double> %3245, <2 x double> poison, <2 x i32> <i32 1, i32 poison>
  %3247 = shufflevector <2 x double> %3245, <2 x double> poison, <2 x i32> <i32 1, i32 1>
  %3248 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %3247, <2 x double> %3168, <2 x double> %3132)
  %3249 = insertelement <2 x double> %3246, double %3236, i64 1
  %3250 = fadd <2 x double> %3136, %3249
  %3251 = load <2 x double>, ptr %3162, align 8, !tbaa !19
  %3252 = fsub <2 x double> %3251, %3249
  store <2 x double> %3252, ptr %3162, align 8, !tbaa !19
  %3253 = shufflevector <2 x double> %3242, <2 x double> poison, <2 x i32> zeroinitializer
  %3254 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %3245, <2 x double> %3253, <2 x double> %3135)
  %3255 = extractelement <2 x double> %3245, i64 0
  %3256 = fadd double %3131, %3255
  %3257 = getelementptr inbounds %class.Vector, ptr %989, i64 %3144, i32 2
  %3258 = load double, ptr %3257, align 8, !tbaa !112
  %3259 = fsub double %3258, %3255
  store double %3259, ptr %3257, align 8, !tbaa !112
  %3260 = add nuw nsw i64 %3128, 1
  %3261 = icmp eq i64 %3260, %3126
  br i1 %3261, label %3262, label %3127

3262:                                             ; preds = %3127, %3112
  %3263 = phi double [ %3113, %3112 ], [ %3256, %3127 ]
  %3264 = phi double [ %3114, %3112 ], [ %3207, %3127 ]
  %3265 = phi double [ %3115, %3112 ], [ %3206, %3127 ]
  %3266 = phi <2 x double> [ %3116, %3112 ], [ %3248, %3127 ]
  %3267 = phi <2 x double> [ %3117, %3112 ], [ %3241, %3127 ]
  %3268 = phi <2 x double> [ %3118, %3112 ], [ %3229, %3127 ]
  %3269 = phi <2 x double> [ %3119, %3112 ], [ %3254, %3127 ]
  %3270 = phi <2 x double> [ %3120, %3112 ], [ %3250, %3127 ]
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %3) #11
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %4) #11
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %5) #11
  %3271 = load double, ptr @_ZN20ComputeNonbondedUtil7cutoff2E, align 8, !tbaa !19
  %3272 = call noundef i32 @_Z22pairlist_from_pairlistddddPK8CompAtomPKtiPtdPd(double noundef %3271, double noundef %2972, double noundef %2973, double noundef %1062, ptr noundef %106, ptr noundef %2942, i32 noundef %2943, ptr noundef %159, double noundef %34, ptr noundef %205)
  %3273 = icmp sgt i32 %3272, 0
  br i1 %3273, label %3274, label %3384

3274:                                             ; preds = %3262
  %3275 = zext i32 %3272 to i64
  br label %3276

3276:                                             ; preds = %3274, %3276
  %3277 = phi i64 [ 0, %3274 ], [ %3382, %3276 ]
  %3278 = phi double [ %3265, %3274 ], [ %3328, %3276 ]
  %3279 = phi double [ %3264, %3274 ], [ %3330, %3276 ]
  %3280 = phi double [ %3263, %3274 ], [ %3378, %3276 ]
  %3281 = phi <2 x double> [ %3266, %3274 ], [ %3370, %3276 ]
  %3282 = phi <2 x double> [ %3267, %3274 ], [ %3363, %3276 ]
  %3283 = phi <2 x double> [ %3268, %3274 ], [ %3351, %3276 ]
  %3284 = phi <2 x double> [ %3269, %3274 ], [ %3376, %3276 ]
  %3285 = phi <2 x double> [ %3270, %3274 ], [ %3372, %3276 ]
  %3286 = shl nuw nsw i64 %3277, 1
  %3287 = getelementptr inbounds i32, ptr %206, i64 %3286
  %3288 = load i32, ptr %3287, align 4, !tbaa !5
  %3289 = ashr i32 %3288, 14
  %3290 = add nsw i32 %3289, %37
  %3291 = getelementptr inbounds i16, ptr %159, i64 %3277
  %3292 = load i16, ptr %3291, align 2, !tbaa !44
  %3293 = zext i16 %3292 to i64
  %3294 = getelementptr inbounds %struct.CompAtom, ptr %106, i64 %3293
  %3295 = getelementptr inbounds double, ptr %205, i64 %3277
  %3296 = load double, ptr %3295, align 8, !tbaa !19
  %3297 = load ptr, ptr @_ZN20ComputeNonbondedUtil8r2_tableE, align 8, !tbaa !23
  %3298 = sext i32 %3290 to i64
  %3299 = getelementptr inbounds double, ptr %3297, i64 %3298
  %3300 = load double, ptr %3299, align 8, !tbaa !19
  %3301 = fsub double %3296, %3300
  %3302 = shl nsw i32 %3290, 4
  %3303 = sext i32 %3302 to i64
  %3304 = getelementptr inbounds double, ptr %31, i64 %3303
  %3305 = getelementptr inbounds %struct.CompAtom, ptr %106, i64 %3293, i32 2
  %3306 = load i16, ptr %3305, align 4, !tbaa !105
  %3307 = sext i16 %3306 to i32
  %3308 = shl nsw i32 %3307, 1
  %3309 = sext i32 %3308 to i64
  %3310 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %2970, i64 %3309
  %3311 = getelementptr inbounds %class.Vector, ptr %989, i64 %3293
  %3312 = getelementptr inbounds %struct.CompAtom, ptr %106, i64 %3293, i32 1
  %3313 = load float, ptr %3312, align 8, !tbaa !104
  %3314 = fpext float %3313 to double
  %3315 = fmul double %2961, %3314
  %3316 = load <2 x double>, ptr %3294, align 8, !tbaa !19
  %3317 = fsub <2 x double> %1059, %3316
  %3318 = getelementptr inbounds %class.Vector, ptr %3294, i64 0, i32 2
  %3319 = load double, ptr %3318, align 8, !tbaa !49
  %3320 = fsub double %1062, %3319
  %3321 = load double, ptr %3310, align 8, !tbaa !109
  %3322 = fmul double %32, %3321
  %3323 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %2970, i64 %3309, i32 1
  %3324 = load double, ptr %3323, align 8, !tbaa !111
  %3325 = fmul double %32, %3324
  %3326 = fsub double %3296, %34
  call void @_Z24fep_vdw_forceandenergiesdddddddddiidddPdS_S_(double noundef %3322, double noundef %3325, double noundef %3326, double noundef %57, double noundef %63, double noundef %38, double noundef %39, double noundef %54, double noundef %61, i32 noundef %46, i32 noundef %47, double noundef %48, double noundef %49, double noundef %43, ptr noundef nonnull %3, ptr noundef nonnull %4, ptr noundef nonnull %5)
  %3327 = load double, ptr %3, align 8, !tbaa !19
  %3328 = fadd double %3278, %3327
  %3329 = load double, ptr %5, align 8, !tbaa !19
  %3330 = fadd double %3279, %3329
  %3331 = getelementptr inbounds double, ptr %3304, i64 8
  %3332 = load double, ptr %3331, align 8, !tbaa !19
  %3333 = fmul double %3315, %3332
  %3334 = getelementptr inbounds double, ptr %3304, i64 9
  %3335 = load double, ptr %3334, align 8, !tbaa !19
  %3336 = fmul double %3315, %3335
  %3337 = getelementptr inbounds double, ptr %3304, i64 10
  %3338 = load double, ptr %3337, align 8, !tbaa !19
  %3339 = fmul double %3315, %3338
  %3340 = getelementptr inbounds double, ptr %3304, i64 11
  %3341 = load double, ptr %3340, align 8, !tbaa !19
  %3342 = fmul double %3315, %3341
  %3343 = fmul double %3301, %3333
  %3344 = fmul double %3336, 2.500000e-01
  %3345 = call double @llvm.fmuladd.f64(double %3343, double 0x3FC5555555555555, double %3344)
  %3346 = fmul double %3339, 5.000000e-01
  %3347 = call double @llvm.fmuladd.f64(double %3345, double %3301, double %3346)
  %3348 = call double @llvm.fmuladd.f64(double %3347, double %3301, double %3342)
  %3349 = insertelement <2 x double> poison, double %3348, i64 0
  %3350 = shufflevector <2 x double> %3349, <2 x double> poison, <2 x i32> zeroinitializer
  %3351 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %1019, <2 x double> %3350, <2 x double> %3283)
  %3352 = call double @llvm.fmuladd.f64(double %3301, double %3333, double %3336)
  %3353 = call double @llvm.fmuladd.f64(double %3352, double %3301, double %3339)
  %3354 = fmul double %1023, %3353
  %3355 = load double, ptr %4, align 8, !tbaa !19
  %3356 = fadd double %3355, %3354
  %3357 = extractelement <2 x double> %3317, i64 1
  %3358 = fmul double %3357, %3356
  %3359 = insertelement <2 x double> poison, double %3358, i64 0
  %3360 = shufflevector <2 x double> %3359, <2 x double> poison, <2 x i32> zeroinitializer
  %3361 = shufflevector <2 x double> %3317, <2 x double> poison, <2 x i32> <i32 1, i32 0>
  %3362 = insertelement <2 x double> %3361, double %3320, i64 1
  %3363 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %3360, <2 x double> %3362, <2 x double> %3282)
  %3364 = insertelement <2 x double> %3361, double %3320, i64 0
  %3365 = insertelement <2 x double> poison, double %3356, i64 0
  %3366 = shufflevector <2 x double> %3365, <2 x double> poison, <2 x i32> zeroinitializer
  %3367 = fmul <2 x double> %3364, %3366
  %3368 = shufflevector <2 x double> %3367, <2 x double> poison, <2 x i32> <i32 1, i32 poison>
  %3369 = shufflevector <2 x double> %3367, <2 x double> poison, <2 x i32> <i32 1, i32 1>
  %3370 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %3369, <2 x double> %3317, <2 x double> %3281)
  %3371 = insertelement <2 x double> %3368, double %3358, i64 1
  %3372 = fadd <2 x double> %3285, %3371
  %3373 = load <2 x double>, ptr %3311, align 8, !tbaa !19
  %3374 = fsub <2 x double> %3373, %3371
  store <2 x double> %3374, ptr %3311, align 8, !tbaa !19
  %3375 = shufflevector <2 x double> %3364, <2 x double> poison, <2 x i32> zeroinitializer
  %3376 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %3367, <2 x double> %3375, <2 x double> %3284)
  %3377 = extractelement <2 x double> %3367, i64 0
  %3378 = fadd double %3280, %3377
  %3379 = getelementptr inbounds %class.Vector, ptr %989, i64 %3293, i32 2
  %3380 = load double, ptr %3379, align 8, !tbaa !112
  %3381 = fsub double %3380, %3377
  store double %3381, ptr %3379, align 8, !tbaa !112
  %3382 = add nuw nsw i64 %3277, 1
  %3383 = icmp eq i64 %3382, %3275
  br i1 %3383, label %3384, label %3276

3384:                                             ; preds = %3276, %3262
  %3385 = phi double [ %3263, %3262 ], [ %3378, %3276 ]
  %3386 = phi double [ %3264, %3262 ], [ %3330, %3276 ]
  %3387 = phi double [ %3265, %3262 ], [ %3328, %3276 ]
  %3388 = phi <2 x double> [ %3266, %3262 ], [ %3370, %3276 ]
  %3389 = phi <2 x double> [ %3267, %3262 ], [ %3363, %3276 ]
  %3390 = phi <2 x double> [ %3268, %3262 ], [ %3351, %3276 ]
  %3391 = phi <2 x double> [ %3269, %3262 ], [ %3376, %3276 ]
  %3392 = phi <2 x double> [ %3270, %3262 ], [ %3372, %3276 ]
  %3393 = load double, ptr @_ZN20ComputeNonbondedUtil7cutoff2E, align 8, !tbaa !19
  %3394 = call noundef i32 @_Z22pairlist_from_pairlistddddPK8CompAtomPKtiPtdPd(double noundef %3393, double noundef %2972, double noundef %2973, double noundef %1062, ptr noundef %106, ptr noundef %2947, i32 noundef %2948, ptr noundef %159, double noundef %34, ptr noundef %205)
  %3395 = icmp sgt i32 %3394, 0
  br i1 %3395, label %3396, label %3506

3396:                                             ; preds = %3384
  %3397 = zext i32 %3394 to i64
  br label %3398

3398:                                             ; preds = %3396, %3398
  %3399 = phi i64 [ 0, %3396 ], [ %3504, %3398 ]
  %3400 = phi double [ %3387, %3396 ], [ %3450, %3398 ]
  %3401 = phi double [ %3386, %3396 ], [ %3452, %3398 ]
  %3402 = phi double [ %3385, %3396 ], [ %3500, %3398 ]
  %3403 = phi <2 x double> [ %3388, %3396 ], [ %3492, %3398 ]
  %3404 = phi <2 x double> [ %3389, %3396 ], [ %3485, %3398 ]
  %3405 = phi <2 x double> [ %3390, %3396 ], [ %3473, %3398 ]
  %3406 = phi <2 x double> [ %3391, %3396 ], [ %3498, %3398 ]
  %3407 = phi <2 x double> [ %3392, %3396 ], [ %3494, %3398 ]
  %3408 = shl nuw nsw i64 %3399, 1
  %3409 = getelementptr inbounds i32, ptr %206, i64 %3408
  %3410 = load i32, ptr %3409, align 4, !tbaa !5
  %3411 = ashr i32 %3410, 14
  %3412 = add nsw i32 %3411, %37
  %3413 = getelementptr inbounds i16, ptr %159, i64 %3399
  %3414 = load i16, ptr %3413, align 2, !tbaa !44
  %3415 = zext i16 %3414 to i64
  %3416 = getelementptr inbounds %struct.CompAtom, ptr %106, i64 %3415
  %3417 = getelementptr inbounds double, ptr %205, i64 %3399
  %3418 = load double, ptr %3417, align 8, !tbaa !19
  %3419 = load ptr, ptr @_ZN20ComputeNonbondedUtil8r2_tableE, align 8, !tbaa !23
  %3420 = sext i32 %3412 to i64
  %3421 = getelementptr inbounds double, ptr %3419, i64 %3420
  %3422 = load double, ptr %3421, align 8, !tbaa !19
  %3423 = fsub double %3418, %3422
  %3424 = shl nsw i32 %3412, 4
  %3425 = sext i32 %3424 to i64
  %3426 = getelementptr inbounds double, ptr %31, i64 %3425
  %3427 = getelementptr inbounds %struct.CompAtom, ptr %106, i64 %3415, i32 2
  %3428 = load i16, ptr %3427, align 4, !tbaa !105
  %3429 = sext i16 %3428 to i32
  %3430 = shl nsw i32 %3429, 1
  %3431 = sext i32 %3430 to i64
  %3432 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %2970, i64 %3431
  %3433 = getelementptr inbounds %class.Vector, ptr %989, i64 %3415
  %3434 = getelementptr inbounds %struct.CompAtom, ptr %106, i64 %3415, i32 1
  %3435 = load float, ptr %3434, align 8, !tbaa !104
  %3436 = fpext float %3435 to double
  %3437 = fmul double %2961, %3436
  %3438 = load <2 x double>, ptr %3416, align 8, !tbaa !19
  %3439 = fsub <2 x double> %1059, %3438
  %3440 = getelementptr inbounds %class.Vector, ptr %3416, i64 0, i32 2
  %3441 = load double, ptr %3440, align 8, !tbaa !49
  %3442 = fsub double %1062, %3441
  %3443 = load double, ptr %3432, align 8, !tbaa !109
  %3444 = fmul double %32, %3443
  %3445 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %2970, i64 %3431, i32 1
  %3446 = load double, ptr %3445, align 8, !tbaa !111
  %3447 = fmul double %32, %3446
  %3448 = fsub double %3418, %34
  call void @_Z24fep_vdw_forceandenergiesdddddddddiidddPdS_S_(double noundef %3444, double noundef %3447, double noundef %3448, double noundef %83, double noundef %90, double noundef %38, double noundef %39, double noundef %81, double noundef %88, i32 noundef %46, i32 noundef %47, double noundef %48, double noundef %49, double noundef %43, ptr noundef nonnull %3, ptr noundef nonnull %4, ptr noundef nonnull %5)
  %3449 = load double, ptr %3, align 8, !tbaa !19
  %3450 = fadd double %3400, %3449
  %3451 = load double, ptr %5, align 8, !tbaa !19
  %3452 = fadd double %3401, %3451
  %3453 = getelementptr inbounds double, ptr %3426, i64 8
  %3454 = load double, ptr %3453, align 8, !tbaa !19
  %3455 = fmul double %3437, %3454
  %3456 = getelementptr inbounds double, ptr %3426, i64 9
  %3457 = load double, ptr %3456, align 8, !tbaa !19
  %3458 = fmul double %3437, %3457
  %3459 = getelementptr inbounds double, ptr %3426, i64 10
  %3460 = load double, ptr %3459, align 8, !tbaa !19
  %3461 = fmul double %3437, %3460
  %3462 = getelementptr inbounds double, ptr %3426, i64 11
  %3463 = load double, ptr %3462, align 8, !tbaa !19
  %3464 = fmul double %3437, %3463
  %3465 = fmul double %3423, %3455
  %3466 = fmul double %3458, 2.500000e-01
  %3467 = call double @llvm.fmuladd.f64(double %3465, double 0x3FC5555555555555, double %3466)
  %3468 = fmul double %3461, 5.000000e-01
  %3469 = call double @llvm.fmuladd.f64(double %3467, double %3423, double %3468)
  %3470 = call double @llvm.fmuladd.f64(double %3469, double %3423, double %3464)
  %3471 = insertelement <2 x double> poison, double %3470, i64 0
  %3472 = shufflevector <2 x double> %3471, <2 x double> poison, <2 x i32> zeroinitializer
  %3473 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %1020, <2 x double> %3472, <2 x double> %3405)
  %3474 = call double @llvm.fmuladd.f64(double %3423, double %3455, double %3458)
  %3475 = call double @llvm.fmuladd.f64(double %3474, double %3423, double %3461)
  %3476 = fmul double %1024, %3475
  %3477 = load double, ptr %4, align 8, !tbaa !19
  %3478 = fadd double %3477, %3476
  %3479 = extractelement <2 x double> %3439, i64 1
  %3480 = fmul double %3479, %3478
  %3481 = insertelement <2 x double> poison, double %3480, i64 0
  %3482 = shufflevector <2 x double> %3481, <2 x double> poison, <2 x i32> zeroinitializer
  %3483 = shufflevector <2 x double> %3439, <2 x double> poison, <2 x i32> <i32 1, i32 0>
  %3484 = insertelement <2 x double> %3483, double %3442, i64 1
  %3485 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %3482, <2 x double> %3484, <2 x double> %3404)
  %3486 = insertelement <2 x double> %3483, double %3442, i64 0
  %3487 = insertelement <2 x double> poison, double %3478, i64 0
  %3488 = shufflevector <2 x double> %3487, <2 x double> poison, <2 x i32> zeroinitializer
  %3489 = fmul <2 x double> %3486, %3488
  %3490 = shufflevector <2 x double> %3489, <2 x double> poison, <2 x i32> <i32 1, i32 poison>
  %3491 = shufflevector <2 x double> %3489, <2 x double> poison, <2 x i32> <i32 1, i32 1>
  %3492 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %3491, <2 x double> %3439, <2 x double> %3403)
  %3493 = insertelement <2 x double> %3490, double %3480, i64 1
  %3494 = fadd <2 x double> %3407, %3493
  %3495 = load <2 x double>, ptr %3433, align 8, !tbaa !19
  %3496 = fsub <2 x double> %3495, %3493
  store <2 x double> %3496, ptr %3433, align 8, !tbaa !19
  %3497 = shufflevector <2 x double> %3486, <2 x double> poison, <2 x i32> zeroinitializer
  %3498 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %3489, <2 x double> %3497, <2 x double> %3406)
  %3499 = extractelement <2 x double> %3489, i64 0
  %3500 = fadd double %3402, %3499
  %3501 = getelementptr inbounds %class.Vector, ptr %989, i64 %3415, i32 2
  %3502 = load double, ptr %3501, align 8, !tbaa !112
  %3503 = fsub double %3502, %3499
  store double %3503, ptr %3501, align 8, !tbaa !112
  %3504 = add nuw nsw i64 %3399, 1
  %3505 = icmp eq i64 %3504, %3397
  br i1 %3505, label %3506, label %3398

3506:                                             ; preds = %3398, %3384
  %3507 = phi double [ %3385, %3384 ], [ %3500, %3398 ]
  %3508 = phi double [ %3386, %3384 ], [ %3452, %3398 ]
  %3509 = phi double [ %3387, %3384 ], [ %3450, %3398 ]
  %3510 = phi <2 x double> [ %3388, %3384 ], [ %3492, %3398 ]
  %3511 = phi <2 x double> [ %3389, %3384 ], [ %3485, %3398 ]
  %3512 = phi <2 x double> [ %3390, %3384 ], [ %3473, %3398 ]
  %3513 = phi <2 x double> [ %3391, %3384 ], [ %3498, %3398 ]
  %3514 = phi <2 x double> [ %3392, %3384 ], [ %3494, %3398 ]
  %3515 = load double, ptr @_ZN20ComputeNonbondedUtil7cutoff2E, align 8, !tbaa !19
  %3516 = call noundef i32 @_Z22pairlist_from_pairlistddddPK8CompAtomPKtiPtdPd(double noundef %3515, double noundef %2972, double noundef %2973, double noundef %1062, ptr noundef %106, ptr noundef %2945, i32 noundef %2946, ptr noundef %159, double noundef %34, ptr noundef %205)
  %3517 = icmp sgt i32 %3516, 0
  br i1 %3517, label %3518, label %3630

3518:                                             ; preds = %3506
  %3519 = zext i32 %3516 to i64
  br label %3520

3520:                                             ; preds = %3518, %3520
  %3521 = phi i64 [ 0, %3518 ], [ %3628, %3520 ]
  %3522 = phi double [ %3509, %3518 ], [ %3573, %3520 ]
  %3523 = phi double [ %3508, %3518 ], [ %3575, %3520 ]
  %3524 = phi double [ %3507, %3518 ], [ %3624, %3520 ]
  %3525 = phi <2 x double> [ %3510, %3518 ], [ %3616, %3520 ]
  %3526 = phi <2 x double> [ %3511, %3518 ], [ %3609, %3520 ]
  %3527 = phi <2 x double> [ %3512, %3518 ], [ %3597, %3520 ]
  %3528 = phi <2 x double> [ %3513, %3518 ], [ %3622, %3520 ]
  %3529 = phi <2 x double> [ %3514, %3518 ], [ %3618, %3520 ]
  %3530 = shl nuw nsw i64 %3521, 1
  %3531 = getelementptr inbounds i32, ptr %206, i64 %3530
  %3532 = load i32, ptr %3531, align 4, !tbaa !5
  %3533 = ashr i32 %3532, 14
  %3534 = add nsw i32 %3533, %37
  %3535 = getelementptr inbounds i16, ptr %159, i64 %3521
  %3536 = load i16, ptr %3535, align 2, !tbaa !44
  %3537 = zext i16 %3536 to i64
  %3538 = getelementptr inbounds %struct.CompAtom, ptr %106, i64 %3537
  %3539 = getelementptr inbounds double, ptr %205, i64 %3521
  %3540 = load double, ptr %3539, align 8, !tbaa !19
  %3541 = load ptr, ptr @_ZN20ComputeNonbondedUtil8r2_tableE, align 8, !tbaa !23
  %3542 = sext i32 %3534 to i64
  %3543 = getelementptr inbounds double, ptr %3541, i64 %3542
  %3544 = load double, ptr %3543, align 8, !tbaa !19
  %3545 = fsub double %3540, %3544
  %3546 = shl nsw i32 %3534, 4
  %3547 = sext i32 %3546 to i64
  %3548 = getelementptr inbounds double, ptr %31, i64 %3547
  %3549 = getelementptr inbounds %struct.CompAtom, ptr %106, i64 %3537, i32 2
  %3550 = load i16, ptr %3549, align 4, !tbaa !105
  %3551 = sext i16 %3550 to i32
  %3552 = shl nsw i32 %3551, 1
  %3553 = sext i32 %3552 to i64
  %3554 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %2970, i64 %3553
  %3555 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %3554, i64 1
  %3556 = getelementptr inbounds %class.Vector, ptr %989, i64 %3537
  %3557 = getelementptr inbounds %struct.CompAtom, ptr %106, i64 %3537, i32 1
  %3558 = load float, ptr %3557, align 8, !tbaa !104
  %3559 = fpext float %3558 to double
  %3560 = fmul double %2961, %3559
  %3561 = load <2 x double>, ptr %3538, align 8, !tbaa !19
  %3562 = fsub <2 x double> %1059, %3561
  %3563 = getelementptr inbounds %class.Vector, ptr %3538, i64 0, i32 2
  %3564 = load double, ptr %3563, align 8, !tbaa !49
  %3565 = fsub double %1062, %3564
  %3566 = load double, ptr %3555, align 8, !tbaa !109
  %3567 = fmul double %32, %3566
  %3568 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %3554, i64 1, i32 1
  %3569 = load double, ptr %3568, align 8, !tbaa !111
  %3570 = fmul double %32, %3569
  %3571 = fsub double %3540, %34
  call void @_Z24fep_vdw_forceandenergiesdddddddddiidddPdS_S_(double noundef %3567, double noundef %3570, double noundef %3571, double noundef %57, double noundef %63, double noundef %38, double noundef %39, double noundef %54, double noundef %61, i32 noundef %46, i32 noundef %47, double noundef %48, double noundef %49, double noundef %43, ptr noundef nonnull %3, ptr noundef nonnull %4, ptr noundef nonnull %5)
  %3572 = load double, ptr %3, align 8, !tbaa !19
  %3573 = fadd double %3522, %3572
  %3574 = load double, ptr %5, align 8, !tbaa !19
  %3575 = fadd double %3523, %3574
  %3576 = fmul double %1018, %3560
  %3577 = getelementptr inbounds double, ptr %3548, i64 8
  %3578 = load double, ptr %3577, align 8, !tbaa !19
  %3579 = fmul double %3576, %3578
  %3580 = getelementptr inbounds double, ptr %3548, i64 9
  %3581 = load double, ptr %3580, align 8, !tbaa !19
  %3582 = fmul double %3576, %3581
  %3583 = getelementptr inbounds double, ptr %3548, i64 10
  %3584 = load double, ptr %3583, align 8, !tbaa !19
  %3585 = fmul double %3576, %3584
  %3586 = getelementptr inbounds double, ptr %3548, i64 11
  %3587 = load double, ptr %3586, align 8, !tbaa !19
  %3588 = fmul double %3576, %3587
  %3589 = fmul double %3545, %3579
  %3590 = fmul double %3582, 2.500000e-01
  %3591 = call double @llvm.fmuladd.f64(double %3589, double 0x3FC5555555555555, double %3590)
  %3592 = fmul double %3585, 5.000000e-01
  %3593 = call double @llvm.fmuladd.f64(double %3591, double %3545, double %3592)
  %3594 = call double @llvm.fmuladd.f64(double %3593, double %3545, double %3588)
  %3595 = insertelement <2 x double> poison, double %3594, i64 0
  %3596 = shufflevector <2 x double> %3595, <2 x double> poison, <2 x i32> zeroinitializer
  %3597 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %1019, <2 x double> %3596, <2 x double> %3527)
  %3598 = call double @llvm.fmuladd.f64(double %3545, double %3579, double %3582)
  %3599 = call double @llvm.fmuladd.f64(double %3598, double %3545, double %3585)
  %3600 = fmul double %1025, %3599
  %3601 = load double, ptr %4, align 8, !tbaa !19
  %3602 = fadd double %3601, %3600
  %3603 = extractelement <2 x double> %3562, i64 1
  %3604 = fmul double %3603, %3602
  %3605 = insertelement <2 x double> poison, double %3604, i64 0
  %3606 = shufflevector <2 x double> %3605, <2 x double> poison, <2 x i32> zeroinitializer
  %3607 = shufflevector <2 x double> %3562, <2 x double> poison, <2 x i32> <i32 1, i32 0>
  %3608 = insertelement <2 x double> %3607, double %3565, i64 1
  %3609 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %3606, <2 x double> %3608, <2 x double> %3526)
  %3610 = insertelement <2 x double> %3607, double %3565, i64 0
  %3611 = insertelement <2 x double> poison, double %3602, i64 0
  %3612 = shufflevector <2 x double> %3611, <2 x double> poison, <2 x i32> zeroinitializer
  %3613 = fmul <2 x double> %3610, %3612
  %3614 = shufflevector <2 x double> %3613, <2 x double> poison, <2 x i32> <i32 1, i32 poison>
  %3615 = shufflevector <2 x double> %3613, <2 x double> poison, <2 x i32> <i32 1, i32 1>
  %3616 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %3615, <2 x double> %3562, <2 x double> %3525)
  %3617 = insertelement <2 x double> %3614, double %3604, i64 1
  %3618 = fadd <2 x double> %3529, %3617
  %3619 = load <2 x double>, ptr %3556, align 8, !tbaa !19
  %3620 = fsub <2 x double> %3619, %3617
  store <2 x double> %3620, ptr %3556, align 8, !tbaa !19
  %3621 = shufflevector <2 x double> %3610, <2 x double> poison, <2 x i32> zeroinitializer
  %3622 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %3613, <2 x double> %3621, <2 x double> %3528)
  %3623 = extractelement <2 x double> %3613, i64 0
  %3624 = fadd double %3524, %3623
  %3625 = getelementptr inbounds %class.Vector, ptr %989, i64 %3537, i32 2
  %3626 = load double, ptr %3625, align 8, !tbaa !112
  %3627 = fsub double %3626, %3623
  store double %3627, ptr %3625, align 8, !tbaa !112
  %3628 = add nuw nsw i64 %3521, 1
  %3629 = icmp eq i64 %3628, %3519
  br i1 %3629, label %3630, label %3520

3630:                                             ; preds = %3520, %3506
  %3631 = phi double [ %3507, %3506 ], [ %3624, %3520 ]
  %3632 = phi double [ %3508, %3506 ], [ %3575, %3520 ]
  %3633 = phi double [ %3509, %3506 ], [ %3573, %3520 ]
  %3634 = phi <2 x double> [ %3510, %3506 ], [ %3616, %3520 ]
  %3635 = phi <2 x double> [ %3511, %3506 ], [ %3609, %3520 ]
  %3636 = phi <2 x double> [ %3512, %3506 ], [ %3597, %3520 ]
  %3637 = phi <2 x double> [ %3513, %3506 ], [ %3622, %3520 ]
  %3638 = phi <2 x double> [ %3514, %3506 ], [ %3618, %3520 ]
  %3639 = load double, ptr @_ZN20ComputeNonbondedUtil7cutoff2E, align 8, !tbaa !19
  %3640 = call noundef i32 @_Z22pairlist_from_pairlistddddPK8CompAtomPKtiPtdPd(double noundef %3639, double noundef %2972, double noundef %2973, double noundef %1062, ptr noundef %106, ptr noundef %2950, i32 noundef %2951, ptr noundef %159, double noundef %34, ptr noundef %205)
  %3641 = icmp sgt i32 %3640, 0
  br i1 %3641, label %3642, label %3754

3642:                                             ; preds = %3630
  %3643 = zext i32 %3640 to i64
  br label %3644

3644:                                             ; preds = %3642, %3644
  %3645 = phi i64 [ 0, %3642 ], [ %3752, %3644 ]
  %3646 = phi double [ %3633, %3642 ], [ %3697, %3644 ]
  %3647 = phi double [ %3632, %3642 ], [ %3699, %3644 ]
  %3648 = phi double [ %3631, %3642 ], [ %3748, %3644 ]
  %3649 = phi <2 x double> [ %3634, %3642 ], [ %3740, %3644 ]
  %3650 = phi <2 x double> [ %3635, %3642 ], [ %3733, %3644 ]
  %3651 = phi <2 x double> [ %3636, %3642 ], [ %3721, %3644 ]
  %3652 = phi <2 x double> [ %3637, %3642 ], [ %3746, %3644 ]
  %3653 = phi <2 x double> [ %3638, %3642 ], [ %3742, %3644 ]
  %3654 = shl nuw nsw i64 %3645, 1
  %3655 = getelementptr inbounds i32, ptr %206, i64 %3654
  %3656 = load i32, ptr %3655, align 4, !tbaa !5
  %3657 = ashr i32 %3656, 14
  %3658 = add nsw i32 %3657, %37
  %3659 = getelementptr inbounds i16, ptr %159, i64 %3645
  %3660 = load i16, ptr %3659, align 2, !tbaa !44
  %3661 = zext i16 %3660 to i64
  %3662 = getelementptr inbounds %struct.CompAtom, ptr %106, i64 %3661
  %3663 = getelementptr inbounds double, ptr %205, i64 %3645
  %3664 = load double, ptr %3663, align 8, !tbaa !19
  %3665 = load ptr, ptr @_ZN20ComputeNonbondedUtil8r2_tableE, align 8, !tbaa !23
  %3666 = sext i32 %3658 to i64
  %3667 = getelementptr inbounds double, ptr %3665, i64 %3666
  %3668 = load double, ptr %3667, align 8, !tbaa !19
  %3669 = fsub double %3664, %3668
  %3670 = shl nsw i32 %3658, 4
  %3671 = sext i32 %3670 to i64
  %3672 = getelementptr inbounds double, ptr %31, i64 %3671
  %3673 = getelementptr inbounds %struct.CompAtom, ptr %106, i64 %3661, i32 2
  %3674 = load i16, ptr %3673, align 4, !tbaa !105
  %3675 = sext i16 %3674 to i32
  %3676 = shl nsw i32 %3675, 1
  %3677 = sext i32 %3676 to i64
  %3678 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %2970, i64 %3677
  %3679 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %3678, i64 1
  %3680 = getelementptr inbounds %class.Vector, ptr %989, i64 %3661
  %3681 = getelementptr inbounds %struct.CompAtom, ptr %106, i64 %3661, i32 1
  %3682 = load float, ptr %3681, align 8, !tbaa !104
  %3683 = fpext float %3682 to double
  %3684 = fmul double %2961, %3683
  %3685 = load <2 x double>, ptr %3662, align 8, !tbaa !19
  %3686 = fsub <2 x double> %1059, %3685
  %3687 = getelementptr inbounds %class.Vector, ptr %3662, i64 0, i32 2
  %3688 = load double, ptr %3687, align 8, !tbaa !49
  %3689 = fsub double %1062, %3688
  %3690 = load double, ptr %3679, align 8, !tbaa !109
  %3691 = fmul double %32, %3690
  %3692 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %3678, i64 1, i32 1
  %3693 = load double, ptr %3692, align 8, !tbaa !111
  %3694 = fmul double %32, %3693
  %3695 = fsub double %3664, %34
  call void @_Z24fep_vdw_forceandenergiesdddddddddiidddPdS_S_(double noundef %3691, double noundef %3694, double noundef %3695, double noundef %83, double noundef %90, double noundef %38, double noundef %39, double noundef %81, double noundef %88, i32 noundef %46, i32 noundef %47, double noundef %48, double noundef %49, double noundef %43, ptr noundef nonnull %3, ptr noundef nonnull %4, ptr noundef nonnull %5)
  %3696 = load double, ptr %3, align 8, !tbaa !19
  %3697 = fadd double %3646, %3696
  %3698 = load double, ptr %5, align 8, !tbaa !19
  %3699 = fadd double %3647, %3698
  %3700 = fmul double %1018, %3684
  %3701 = getelementptr inbounds double, ptr %3672, i64 8
  %3702 = load double, ptr %3701, align 8, !tbaa !19
  %3703 = fmul double %3700, %3702
  %3704 = getelementptr inbounds double, ptr %3672, i64 9
  %3705 = load double, ptr %3704, align 8, !tbaa !19
  %3706 = fmul double %3700, %3705
  %3707 = getelementptr inbounds double, ptr %3672, i64 10
  %3708 = load double, ptr %3707, align 8, !tbaa !19
  %3709 = fmul double %3700, %3708
  %3710 = getelementptr inbounds double, ptr %3672, i64 11
  %3711 = load double, ptr %3710, align 8, !tbaa !19
  %3712 = fmul double %3700, %3711
  %3713 = fmul double %3669, %3703
  %3714 = fmul double %3706, 2.500000e-01
  %3715 = call double @llvm.fmuladd.f64(double %3713, double 0x3FC5555555555555, double %3714)
  %3716 = fmul double %3709, 5.000000e-01
  %3717 = call double @llvm.fmuladd.f64(double %3715, double %3669, double %3716)
  %3718 = call double @llvm.fmuladd.f64(double %3717, double %3669, double %3712)
  %3719 = insertelement <2 x double> poison, double %3718, i64 0
  %3720 = shufflevector <2 x double> %3719, <2 x double> poison, <2 x i32> zeroinitializer
  %3721 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %1020, <2 x double> %3720, <2 x double> %3651)
  %3722 = call double @llvm.fmuladd.f64(double %3669, double %3703, double %3706)
  %3723 = call double @llvm.fmuladd.f64(double %3722, double %3669, double %3709)
  %3724 = fmul double %1026, %3723
  %3725 = load double, ptr %4, align 8, !tbaa !19
  %3726 = fadd double %3725, %3724
  %3727 = extractelement <2 x double> %3686, i64 1
  %3728 = fmul double %3727, %3726
  %3729 = insertelement <2 x double> poison, double %3728, i64 0
  %3730 = shufflevector <2 x double> %3729, <2 x double> poison, <2 x i32> zeroinitializer
  %3731 = shufflevector <2 x double> %3686, <2 x double> poison, <2 x i32> <i32 1, i32 0>
  %3732 = insertelement <2 x double> %3731, double %3689, i64 1
  %3733 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %3730, <2 x double> %3732, <2 x double> %3650)
  %3734 = insertelement <2 x double> %3731, double %3689, i64 0
  %3735 = insertelement <2 x double> poison, double %3726, i64 0
  %3736 = shufflevector <2 x double> %3735, <2 x double> poison, <2 x i32> zeroinitializer
  %3737 = fmul <2 x double> %3734, %3736
  %3738 = shufflevector <2 x double> %3737, <2 x double> poison, <2 x i32> <i32 1, i32 poison>
  %3739 = shufflevector <2 x double> %3737, <2 x double> poison, <2 x i32> <i32 1, i32 1>
  %3740 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %3739, <2 x double> %3686, <2 x double> %3649)
  %3741 = insertelement <2 x double> %3738, double %3728, i64 1
  %3742 = fadd <2 x double> %3653, %3741
  %3743 = load <2 x double>, ptr %3680, align 8, !tbaa !19
  %3744 = fsub <2 x double> %3743, %3741
  store <2 x double> %3744, ptr %3680, align 8, !tbaa !19
  %3745 = shufflevector <2 x double> %3734, <2 x double> poison, <2 x i32> zeroinitializer
  %3746 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %3737, <2 x double> %3745, <2 x double> %3652)
  %3747 = extractelement <2 x double> %3737, i64 0
  %3748 = fadd double %3648, %3747
  %3749 = getelementptr inbounds %class.Vector, ptr %989, i64 %3661, i32 2
  %3750 = load double, ptr %3749, align 8, !tbaa !112
  %3751 = fsub double %3750, %3747
  store double %3751, ptr %3749, align 8, !tbaa !112
  %3752 = add nuw nsw i64 %3645, 1
  %3753 = icmp eq i64 %3752, %3643
  br i1 %3753, label %3754, label %3644

3754:                                             ; preds = %3644, %3630
  %3755 = phi double [ %3631, %3630 ], [ %3748, %3644 ]
  %3756 = phi double [ %3632, %3630 ], [ %3699, %3644 ]
  %3757 = phi double [ %3633, %3630 ], [ %3697, %3644 ]
  %3758 = phi <2 x double> [ %3634, %3630 ], [ %3740, %3644 ]
  %3759 = phi <2 x double> [ %3635, %3630 ], [ %3733, %3644 ]
  %3760 = phi <2 x double> [ %3636, %3630 ], [ %3721, %3644 ]
  %3761 = phi <2 x double> [ %3637, %3630 ], [ %3746, %3644 ]
  %3762 = phi <2 x double> [ %3638, %3630 ], [ %3742, %3644 ]
  %3763 = add i32 %2939, %1028
  %3764 = add i32 %3763, %2944
  %3765 = add i32 %3764, %2949
  %3766 = add i32 %3765, %3122
  %3767 = add i32 %3766, %3516
  %3768 = add i32 %3767, %3640
  %3769 = getelementptr inbounds %class.Vector, ptr %990, i64 %1041
  %3770 = load <2 x double>, ptr %3769, align 8, !tbaa !19
  %3771 = fadd <2 x double> %3762, %3770
  store <2 x double> %3771, ptr %3769, align 8, !tbaa !19
  %3772 = getelementptr inbounds %class.Vector, ptr %990, i64 %1041, i32 2
  %3773 = load double, ptr %3772, align 8, !tbaa !112
  %3774 = fadd double %3755, %3773
  store double %3774, ptr %3772, align 8, !tbaa !112
  br i1 %209, label %3777, label %3775

3775:                                             ; preds = %3754
  %3776 = add nsw i32 %1031, 1
  br label %3785

3777:                                             ; preds = %3754
  %3778 = load ptr, ptr %12, align 8, !tbaa !46
  %3779 = load i32, ptr %17, align 8, !tbaa !17
  %3780 = add nsw i32 %3779, 1
  store i32 %3780, ptr %17, align 8, !tbaa !17
  %3781 = sext i32 %3779 to i64
  %3782 = getelementptr inbounds i16, ptr %3778, i64 %3781
  %3783 = load i16, ptr %3782, align 2, !tbaa !44
  %3784 = zext i16 %3783 to i32
  br label %3785

3785:                                             ; preds = %3777, %3775
  %3786 = phi i32 [ %3784, %3777 ], [ %3776, %3775 ]
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %5) #11
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %4) #11
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %3) #11
  br label %3787

3787:                                             ; preds = %1488, %1756, %3785, %1053
  %3788 = phi i32 [ %1057, %3785 ], [ %1054, %1053 ], [ %1057, %1756 ], [ %1057, %1488 ]
  %3789 = phi i32 [ %2952, %3785 ], [ %1035, %1053 ], [ %1502, %1756 ], [ 0, %1488 ]
  %3790 = phi ptr [ %2953, %3785 ], [ %1034, %1053 ], [ %1311, %1756 ], [ %1311, %1488 ]
  %3791 = phi ptr [ %2954, %3785 ], [ %1033, %1053 ], [ %1312, %1756 ], [ %1312, %1488 ]
  %3792 = phi ptr [ %2955, %3785 ], [ %1032, %1053 ], [ %1313, %1756 ], [ %1313, %1488 ]
  %3793 = phi i32 [ %3786, %3785 ], [ %1055, %1053 ], [ %1757, %1756 ], [ %1492, %1488 ]
  %3794 = phi double [ %3756, %3785 ], [ %1030, %1053 ], [ %1030, %1756 ], [ %1030, %1488 ]
  %3795 = phi double [ %3757, %3785 ], [ %1029, %1053 ], [ %1029, %1756 ], [ %1029, %1488 ]
  %3796 = phi i32 [ %3768, %3785 ], [ %1028, %1053 ], [ %1028, %1756 ], [ %1028, %1488 ]
  %3797 = phi <2 x double> [ %3758, %3785 ], [ %1037, %1053 ], [ %1037, %1756 ], [ %1037, %1488 ]
  %3798 = phi <2 x double> [ %3759, %3785 ], [ %1038, %1053 ], [ %1038, %1756 ], [ %1038, %1488 ]
  %3799 = phi <2 x double> [ %3760, %3785 ], [ %1039, %1053 ], [ %1039, %1756 ], [ %1039, %1488 ]
  %3800 = phi <2 x double> [ %3761, %3785 ], [ %1040, %1053 ], [ %1040, %1756 ], [ %1040, %1488 ]
  %3801 = icmp slt i32 %3793, %101
  br i1 %3801, label %1027, label %3802

3802:                                             ; preds = %3787, %986
  %3803 = phi ptr [ null, %986 ], [ %3792, %3787 ]
  %3804 = phi i32 [ %993, %986 ], [ %3793, %3787 ]
  %3805 = phi double [ 0.000000e+00, %986 ], [ %3794, %3787 ]
  %3806 = phi double [ 0.000000e+00, %986 ], [ %3795, %3787 ]
  %3807 = phi i32 [ 0, %986 ], [ %3796, %3787 ]
  %3808 = phi <2 x double> [ zeroinitializer, %986 ], [ %3797, %3787 ]
  %3809 = phi <2 x double> [ zeroinitializer, %986 ], [ %3798, %3787 ]
  %3810 = phi <2 x double> [ zeroinitializer, %986 ], [ %3799, %3787 ]
  %3811 = phi <2 x double> [ zeroinitializer, %986 ], [ %3800, %3787 ]
  br i1 %207, label %3819, label %3812

3812:                                             ; preds = %3802
  %3813 = trunc i32 %3804 to i16
  %3814 = load ptr, ptr %12, align 8, !tbaa !46
  %3815 = load i32, ptr %17, align 8, !tbaa !17
  %3816 = add nsw i32 %3815, -1
  %3817 = sext i32 %3816 to i64
  %3818 = getelementptr inbounds i16, ptr %3814, i64 %3817
  store i16 %3813, ptr %3818, align 2, !tbaa !44
  br label %3819

3819:                                             ; preds = %3812, %3802
  %3820 = sitofp i32 %3807 to double
  %3821 = getelementptr inbounds double, ptr %10, i64 22
  %3822 = getelementptr inbounds double, ptr %10, i64 2
  %3823 = load double, ptr %3822, align 8, !tbaa !19
  %3824 = fadd double %3806, %3823
  store double %3824, ptr %3822, align 8, !tbaa !19
  %3825 = load double, ptr %10, align 8, !tbaa !19
  %3826 = extractelement <2 x double> %3810, i64 1
  %3827 = fadd double %3826, %3825
  store double %3827, ptr %10, align 8, !tbaa !19
  %3828 = getelementptr inbounds double, ptr %10, i64 25
  %3829 = load double, ptr %3828, align 8, !tbaa !19
  %3830 = fadd double %3805, %3829
  store double %3830, ptr %3828, align 8, !tbaa !19
  %3831 = load <2 x double>, ptr %3821, align 8, !tbaa !19
  %3832 = shufflevector <2 x double> %3810, <2 x double> poison, <2 x i32> <i32 poison, i32 0>
  %3833 = insertelement <2 x double> %3832, double %3820, i64 0
  %3834 = fadd <2 x double> %3831, %3833
  store <2 x double> %3834, ptr %3821, align 8, !tbaa !19
  %3835 = getelementptr inbounds double, ptr %10, i64 3
  %3836 = load <4 x double>, ptr %3835, align 8, !tbaa !19
  %3837 = shufflevector <2 x double> %3808, <2 x double> %3811, <4 x i32> <i32 0, i32 1, i32 3, i32 poison>
  %3838 = shufflevector <4 x double> %3837, <4 x double> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 1>
  %3839 = fadd <4 x double> %3838, %3836
  store <4 x double> %3839, ptr %3835, align 8, !tbaa !19
  %3840 = getelementptr inbounds double, ptr %10, i64 7
  %3841 = load <4 x double>, ptr %3840, align 8, !tbaa !19
  %3842 = shufflevector <2 x double> %3809, <2 x double> %3811, <4 x i32> <i32 0, i32 1, i32 3, i32 poison>
  %3843 = shufflevector <4 x double> %3842, <4 x double> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 1>
  %3844 = fadd <4 x double> %3843, %3841
  store <4 x double> %3844, ptr %3840, align 8, !tbaa !19
  %3845 = getelementptr inbounds double, ptr %10, i64 11
  %3846 = load double, ptr %3845, align 8, !tbaa !19
  %3847 = extractelement <2 x double> %3811, i64 0
  %3848 = fadd double %3847, %3846
  store double %3848, ptr %3845, align 8, !tbaa !19
  %3849 = icmp eq ptr %3803, null
  br i1 %3849, label %3851, label %3850

3850:                                             ; preds = %3819
  call void @_ZdaPv(ptr noundef nonnull %3803) #13
  br label %3851

3851:                                             ; preds = %3850, %3819
  call void @llvm.lifetime.end.p0(i64 36, ptr nonnull %2) #11
  br label %3852

3852:                                             ; preds = %1, %3851
  ret void
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare void @llvm.lifetime.start.p0(i64 immarg, ptr nocapture) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare void @llvm.lifetime.end.p0(i64 immarg, ptr nocapture) #1

declare void @_Z8NAMD_bugPKc(ptr noundef) local_unnamed_addr #2

; Function Attrs: nobuiltin allocsize(0)
declare noundef nonnull ptr @_Znam(i64 noundef) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nounwind willreturn memory(argmem: write)
declare void @llvm.memset.p0.i64(ptr nocapture writeonly, i8, i64, i1 immarg) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare double @llvm.fmuladd.f64(double, double, double) #5

; Function Attrs: inlinehint nounwind sspstrong uwtable
define linkonce_odr dso_local noundef i32 @_Z22pairlist_from_pairlistddddPK8CompAtomPKtiPtdPd(double noundef %0, double noundef %1, double noundef %2, double noundef %3, ptr noundef %4, ptr noundef %5, i32 noundef %6, ptr noundef %7, double noundef %8, ptr noundef %9) local_unnamed_addr #6 comdat {
  %11 = fadd double %0, %8
  %12 = icmp slt i32 %6, 1
  br i1 %12, label %218, label %13

13:                                               ; preds = %10
  %14 = icmp ugt i32 %6, 16
  br i1 %14, label %15, label %164

15:                                               ; preds = %13
  %16 = add nsw i32 %6, -4
  %17 = getelementptr inbounds i16, ptr %5, i64 3
  %18 = load i16, ptr %17, align 2, !tbaa !44
  %19 = zext i16 %18 to i64
  %20 = getelementptr inbounds %struct.CompAtom, ptr %4, i64 %19
  %21 = getelementptr inbounds %class.Vector, ptr %20, i64 0, i32 2
  %22 = load double, ptr %21, align 8, !tbaa !49
  %23 = getelementptr inbounds i16, ptr %5, i64 2
  %24 = load i16, ptr %23, align 2, !tbaa !44
  %25 = zext i16 %24 to i64
  %26 = getelementptr inbounds %struct.CompAtom, ptr %4, i64 %25
  %27 = getelementptr inbounds %class.Vector, ptr %26, i64 0, i32 2
  %28 = load double, ptr %27, align 8, !tbaa !49
  %29 = getelementptr inbounds i16, ptr %5, i64 1
  %30 = load i16, ptr %29, align 2, !tbaa !44
  %31 = zext i16 %30 to i64
  %32 = getelementptr inbounds %struct.CompAtom, ptr %4, i64 %31
  %33 = getelementptr inbounds %class.Vector, ptr %32, i64 0, i32 2
  %34 = load double, ptr %33, align 8, !tbaa !49
  %35 = load i16, ptr %5, align 2, !tbaa !44
  %36 = zext i16 %35 to i64
  %37 = getelementptr inbounds %struct.CompAtom, ptr %4, i64 %36
  %38 = getelementptr inbounds %class.Vector, ptr %37, i64 0, i32 2
  %39 = load double, ptr %38, align 8, !tbaa !49
  %40 = getelementptr inbounds %class.Vector, ptr %20, i64 0, i32 1
  %41 = load double, ptr %40, align 8, !tbaa !67
  %42 = getelementptr inbounds %class.Vector, ptr %26, i64 0, i32 1
  %43 = load double, ptr %42, align 8, !tbaa !67
  %44 = getelementptr inbounds %class.Vector, ptr %32, i64 0, i32 1
  %45 = load double, ptr %44, align 8, !tbaa !67
  %46 = getelementptr inbounds %class.Vector, ptr %37, i64 0, i32 1
  %47 = load double, ptr %46, align 8, !tbaa !67
  %48 = load double, ptr %20, align 8, !tbaa !68
  %49 = load double, ptr %26, align 8, !tbaa !68
  %50 = load double, ptr %32, align 8, !tbaa !68
  %51 = load double, ptr %37, align 8, !tbaa !68
  %52 = zext i32 %16 to i64
  br label %53

53:                                               ; preds = %15, %53
  %54 = phi i64 [ 4, %15 ], [ %159, %53 ]
  %55 = phi i32 [ 0, %15 ], [ %158, %53 ]
  %56 = phi i16 [ %35, %15 ], [ %73, %53 ]
  %57 = phi i16 [ %30, %15 ], [ %76, %53 ]
  %58 = phi i16 [ %24, %15 ], [ %79, %53 ]
  %59 = phi i16 [ %18, %15 ], [ %82, %53 ]
  %60 = phi double [ %51, %15 ], [ %109, %53 ]
  %61 = phi double [ %50, %15 ], [ %112, %53 ]
  %62 = phi double [ %49, %15 ], [ %115, %53 ]
  %63 = phi double [ %48, %15 ], [ %118, %53 ]
  %64 = phi double [ %47, %15 ], [ %120, %53 ]
  %65 = phi double [ %45, %15 ], [ %122, %53 ]
  %66 = phi double [ %43, %15 ], [ %124, %53 ]
  %67 = phi double [ %41, %15 ], [ %126, %53 ]
  %68 = phi double [ %22, %15 ], [ %134, %53 ]
  %69 = phi double [ %28, %15 ], [ %132, %53 ]
  %70 = phi double [ %34, %15 ], [ %130, %53 ]
  %71 = phi double [ %39, %15 ], [ %128, %53 ]
  %72 = getelementptr inbounds i16, ptr %5, i64 %54
  %73 = load i16, ptr %72, align 2, !tbaa !44
  %74 = or i64 %54, 1
  %75 = getelementptr inbounds i16, ptr %5, i64 %74
  %76 = load i16, ptr %75, align 2, !tbaa !44
  %77 = or i64 %54, 2
  %78 = getelementptr inbounds i16, ptr %5, i64 %77
  %79 = load i16, ptr %78, align 2, !tbaa !44
  %80 = or i64 %54, 3
  %81 = getelementptr inbounds i16, ptr %5, i64 %80
  %82 = load i16, ptr %81, align 2, !tbaa !44
  %83 = fsub double %1, %60
  %84 = fsub double %1, %61
  %85 = fsub double %1, %62
  %86 = fsub double %1, %63
  %87 = tail call double @llvm.fmuladd.f64(double %83, double %83, double %8)
  %88 = tail call double @llvm.fmuladd.f64(double %84, double %84, double %8)
  %89 = tail call double @llvm.fmuladd.f64(double %85, double %85, double %8)
  %90 = tail call double @llvm.fmuladd.f64(double %86, double %86, double %8)
  %91 = fsub double %2, %64
  %92 = fsub double %2, %65
  %93 = fsub double %2, %66
  %94 = fsub double %2, %67
  %95 = tail call double @llvm.fmuladd.f64(double %91, double %91, double %87)
  %96 = tail call double @llvm.fmuladd.f64(double %92, double %92, double %88)
  %97 = tail call double @llvm.fmuladd.f64(double %93, double %93, double %89)
  %98 = tail call double @llvm.fmuladd.f64(double %94, double %94, double %90)
  %99 = fsub double %3, %71
  %100 = fsub double %3, %70
  %101 = fsub double %3, %69
  %102 = fsub double %3, %68
  %103 = tail call double @llvm.fmuladd.f64(double %99, double %99, double %95)
  %104 = tail call double @llvm.fmuladd.f64(double %100, double %100, double %96)
  %105 = tail call double @llvm.fmuladd.f64(double %101, double %101, double %97)
  %106 = tail call double @llvm.fmuladd.f64(double %102, double %102, double %98)
  %107 = zext i16 %73 to i64
  %108 = getelementptr inbounds %struct.CompAtom, ptr %4, i64 %107
  %109 = load double, ptr %108, align 8, !tbaa !68
  %110 = zext i16 %76 to i64
  %111 = getelementptr inbounds %struct.CompAtom, ptr %4, i64 %110
  %112 = load double, ptr %111, align 8, !tbaa !68
  %113 = zext i16 %79 to i64
  %114 = getelementptr inbounds %struct.CompAtom, ptr %4, i64 %113
  %115 = load double, ptr %114, align 8, !tbaa !68
  %116 = zext i16 %82 to i64
  %117 = getelementptr inbounds %struct.CompAtom, ptr %4, i64 %116
  %118 = load double, ptr %117, align 8, !tbaa !68
  %119 = getelementptr inbounds %class.Vector, ptr %108, i64 0, i32 1
  %120 = load double, ptr %119, align 8, !tbaa !67
  %121 = getelementptr inbounds %class.Vector, ptr %111, i64 0, i32 1
  %122 = load double, ptr %121, align 8, !tbaa !67
  %123 = getelementptr inbounds %class.Vector, ptr %114, i64 0, i32 1
  %124 = load double, ptr %123, align 8, !tbaa !67
  %125 = getelementptr inbounds %class.Vector, ptr %117, i64 0, i32 1
  %126 = load double, ptr %125, align 8, !tbaa !67
  %127 = getelementptr inbounds %class.Vector, ptr %108, i64 0, i32 2
  %128 = load double, ptr %127, align 8, !tbaa !49
  %129 = getelementptr inbounds %class.Vector, ptr %111, i64 0, i32 2
  %130 = load double, ptr %129, align 8, !tbaa !49
  %131 = getelementptr inbounds %class.Vector, ptr %114, i64 0, i32 2
  %132 = load double, ptr %131, align 8, !tbaa !49
  %133 = getelementptr inbounds %class.Vector, ptr %117, i64 0, i32 2
  %134 = load double, ptr %133, align 8, !tbaa !49
  %135 = fcmp olt double %103, %11
  %136 = fcmp olt double %104, %11
  %137 = fcmp olt double %105, %11
  %138 = fcmp olt double %106, %11
  %139 = sext i32 %55 to i64
  %140 = getelementptr inbounds i16, ptr %7, i64 %139
  store i16 %56, ptr %140, align 2, !tbaa !44
  %141 = getelementptr inbounds double, ptr %9, i64 %139
  store double %103, ptr %141, align 8, !tbaa !19
  %142 = zext i1 %135 to i32
  %143 = add nsw i32 %55, %142
  %144 = sext i32 %143 to i64
  %145 = getelementptr inbounds i16, ptr %7, i64 %144
  store i16 %57, ptr %145, align 2, !tbaa !44
  %146 = getelementptr inbounds double, ptr %9, i64 %144
  store double %104, ptr %146, align 8, !tbaa !19
  %147 = zext i1 %136 to i32
  %148 = add nsw i32 %143, %147
  %149 = sext i32 %148 to i64
  %150 = getelementptr inbounds i16, ptr %7, i64 %149
  store i16 %58, ptr %150, align 2, !tbaa !44
  %151 = getelementptr inbounds double, ptr %9, i64 %149
  store double %105, ptr %151, align 8, !tbaa !19
  %152 = zext i1 %137 to i32
  %153 = add nsw i32 %148, %152
  %154 = sext i32 %153 to i64
  %155 = getelementptr inbounds i16, ptr %7, i64 %154
  store i16 %59, ptr %155, align 2, !tbaa !44
  %156 = getelementptr inbounds double, ptr %9, i64 %154
  store double %106, ptr %156, align 8, !tbaa !19
  %157 = zext i1 %138 to i32
  %158 = add nsw i32 %153, %157
  %159 = add nuw nsw i64 %54, 4
  %160 = icmp ult i64 %159, %52
  br i1 %160, label %53, label %161

161:                                              ; preds = %53
  %162 = trunc i64 %54 to i32
  %163 = sext i32 %158 to i64
  br label %164

164:                                              ; preds = %161, %13
  %165 = phi i64 [ %163, %161 ], [ 0, %13 ]
  %166 = phi i32 [ %162, %161 ], [ 0, %13 ]
  %167 = getelementptr inbounds i16, ptr %7, i64 %165
  %168 = icmp slt i32 %166, %6
  br i1 %168, label %169, label %211

169:                                              ; preds = %164
  %170 = zext i32 %166 to i64
  %171 = getelementptr inbounds i16, ptr %5, i64 %170
  %172 = load i16, ptr %171, align 2, !tbaa !44
  %173 = zext i16 %172 to i64
  %174 = getelementptr inbounds %struct.CompAtom, ptr %4, i64 %173
  %175 = getelementptr inbounds %class.Vector, ptr %174, i64 0, i32 1
  %176 = load <2 x double>, ptr %175, align 8, !tbaa !19
  %177 = load double, ptr %174, align 8, !tbaa !68
  %178 = getelementptr inbounds double, ptr %9, i64 %165
  %179 = zext i32 %6 to i64
  br label %180

180:                                              ; preds = %169, %207
  %181 = phi i64 [ %170, %169 ], [ %187, %207 ]
  %182 = phi ptr [ %167, %169 ], [ %209, %207 ]
  %183 = phi double [ %177, %169 ], [ %194, %207 ]
  %184 = phi i16 [ %172, %169 ], [ %189, %207 ]
  %185 = phi ptr [ %178, %169 ], [ %208, %207 ]
  %186 = phi <2 x double> [ %176, %169 ], [ %202, %207 ]
  %187 = add nuw nsw i64 %181, 1
  %188 = getelementptr inbounds i16, ptr %5, i64 %187
  %189 = load i16, ptr %188, align 2, !tbaa !44
  %190 = fsub double %1, %183
  %191 = tail call double @llvm.fmuladd.f64(double %190, double %190, double %8)
  %192 = zext i16 %189 to i64
  %193 = getelementptr inbounds %struct.CompAtom, ptr %4, i64 %192
  %194 = load double, ptr %193, align 8, !tbaa !68
  %195 = extractelement <2 x double> %186, i64 0
  %196 = fsub double %2, %195
  %197 = tail call double @llvm.fmuladd.f64(double %196, double %196, double %191)
  %198 = getelementptr inbounds %class.Vector, ptr %193, i64 0, i32 1
  %199 = extractelement <2 x double> %186, i64 1
  %200 = fsub double %3, %199
  %201 = tail call double @llvm.fmuladd.f64(double %200, double %200, double %197)
  %202 = load <2 x double>, ptr %198, align 8, !tbaa !19
  %203 = fcmp ugt double %201, %11
  br i1 %203, label %207, label %204

204:                                              ; preds = %180
  store i16 %184, ptr %182, align 2, !tbaa !44
  %205 = getelementptr inbounds i16, ptr %182, i64 1
  store double %201, ptr %185, align 8, !tbaa !19
  %206 = getelementptr inbounds double, ptr %185, i64 1
  br label %207

207:                                              ; preds = %204, %180
  %208 = phi ptr [ %206, %204 ], [ %185, %180 ]
  %209 = phi ptr [ %205, %204 ], [ %182, %180 ]
  %210 = icmp eq i64 %187, %179
  br i1 %210, label %211, label %180

211:                                              ; preds = %207, %164
  %212 = phi ptr [ %167, %164 ], [ %209, %207 ]
  %213 = ptrtoint ptr %212 to i64
  %214 = ptrtoint ptr %7 to i64
  %215 = sub i64 %213, %214
  %216 = lshr exact i64 %215, 1
  %217 = trunc i64 %216 to i32
  br label %218

218:                                              ; preds = %10, %211
  %219 = phi i32 [ %217, %211 ], [ 0, %10 ]
  ret i32 %219
}

; Function Attrs: inlinehint nounwind sspstrong uwtable
define linkonce_odr dso_local void @_Z24fep_vdw_forceandenergiesdddddddddiidddPdS_S_(double noundef %0, double noundef %1, double noundef %2, double noundef %3, double noundef %4, double noundef %5, double noundef %6, double noundef %7, double noundef %8, i32 noundef %9, i32 noundef %10, double noundef %11, double noundef %12, double noundef %13, ptr noundef %14, ptr noundef %15, ptr noundef %16) local_unnamed_addr #6 comdat {
  %18 = fcmp ogt double %2, %5
  br i1 %18, label %19, label %33

19:                                               ; preds = %17
  %20 = fsub double %6, %2
  %21 = tail call double @llvm.fmuladd.f64(double %5, double -3.000000e+00, double %6)
  %22 = tail call double @llvm.fmuladd.f64(double %2, double 2.000000e+00, double %21)
  %23 = insertelement <2 x double> poison, double %13, i64 0
  %24 = shufflevector <2 x double> %23, <2 x double> poison, <2 x i32> zeroinitializer
  %25 = insertelement <2 x double> <double poison, double 1.200000e+01>, double %20, i64 0
  %26 = fmul <2 x double> %24, %25
  %27 = shufflevector <2 x double> %25, <2 x double> poison, <2 x i32> zeroinitializer
  %28 = fmul <2 x double> %27, %26
  %29 = fsub double %2, %5
  %30 = insertelement <2 x double> poison, double %22, i64 0
  %31 = insertelement <2 x double> %30, double %29, i64 1
  %32 = fmul <2 x double> %31, %28
  br label %33

33:                                               ; preds = %17, %19
  %34 = phi <2 x double> [ %32, %19 ], [ <double 1.000000e+00, double 0.000000e+00>, %17 ]
  %35 = icmp eq i32 %9, 0
  br i1 %35, label %136, label %36

36:                                               ; preds = %33
  %37 = fsub double 1.000000e+00, %11
  %38 = fmul double %37, %37
  %39 = fmul double %0, 2.000000e+00
  %40 = fdiv double %39, %1
  %41 = fptrunc double %40 to float
  %42 = tail call float @powf(float noundef %41, float noundef 0x3FD5555560000000) #11
  %43 = fpext float %42 to double
  %44 = tail call double @llvm.fmuladd.f64(double %38, double %43, double %2)
  %45 = fsub double 1.000000e+00, %12
  %46 = fmul double %45, %45
  %47 = tail call float @powf(float noundef %41, float noundef 0x3FD5555560000000) #11
  %48 = fpext float %47 to double
  %49 = tail call double @llvm.fmuladd.f64(double %46, double %48, double %2)
  %50 = fmul double %44, %44
  %51 = fmul double %44, %50
  %52 = fmul double %49, %49
  %53 = fmul double %49, %52
  %54 = tail call float @powf(float noundef %41, float noundef 0x3FD5555560000000) #11
  %55 = fpext float %54 to double
  %56 = fneg double %37
  %57 = tail call double @llvm.fmuladd.f64(double %56, double %37, double 1.000000e+00)
  %58 = fmul double %57, %55
  %59 = fcmp ult double %58, %2
  br i1 %59, label %74, label %60

60:                                               ; preds = %36
  %61 = insertelement <2 x double> poison, double %0, i64 0
  %62 = insertelement <2 x double> %61, double %51, i64 1
  %63 = insertelement <2 x double> %62, double 4.000000e+00, i64 0
  %64 = fmul <2 x double> %62, %63
  %65 = fdiv double %1, %51
  %66 = fmul double %1, %1
  %67 = insertelement <2 x double> poison, double %66, i64 0
  %68 = insertelement <2 x double> %67, double %0, i64 1
  %69 = fdiv <2 x double> %68, %64
  %70 = extractelement <2 x double> %69, i64 1
  %71 = fsub double %70, %65
  %72 = extractelement <2 x double> %69, i64 0
  %73 = fadd double %72, %71
  br label %74

74:                                               ; preds = %36, %60
  %75 = phi double [ %73, %60 ], [ 0.000000e+00, %36 ]
  %76 = tail call float @powf(float noundef %41, float noundef 0x3FD5555560000000) #11
  %77 = fpext float %76 to double
  %78 = fneg double %45
  %79 = tail call double @llvm.fmuladd.f64(double %78, double %45, double 1.000000e+00)
  %80 = fmul double %79, %77
  %81 = fcmp ult double %80, %2
  br i1 %81, label %96, label %82

82:                                               ; preds = %74
  %83 = insertelement <2 x double> poison, double %0, i64 0
  %84 = insertelement <2 x double> %83, double %53, i64 1
  %85 = insertelement <2 x double> %84, double 4.000000e+00, i64 0
  %86 = fmul <2 x double> %84, %85
  %87 = fdiv double %1, %53
  %88 = fmul double %1, %1
  %89 = insertelement <2 x double> poison, double %88, i64 0
  %90 = insertelement <2 x double> %89, double %0, i64 1
  %91 = fdiv <2 x double> %90, %86
  %92 = extractelement <2 x double> %91, i64 1
  %93 = fsub double %92, %87
  %94 = extractelement <2 x double> %91, i64 0
  %95 = fadd double %94, %93
  br label %96

96:                                               ; preds = %74, %82
  %97 = phi double [ %95, %82 ], [ 0.000000e+00, %74 ]
  %98 = tail call float @powf(float noundef %41, float noundef 0x3FD5555560000000) #11
  %99 = fpext float %98 to double
  %100 = fmul double %57, %99
  %101 = fcmp ult double %100, %2
  br i1 %101, label %111, label %102

102:                                              ; preds = %96
  %103 = fmul double %1, 6.000000e+00
  %104 = fdiv double %103, %51
  %105 = tail call double @llvm.fmuladd.f64(double %75, double 1.200000e+01, double %104)
  %106 = fmul double %1, 3.000000e+00
  %107 = fmul double %106, %1
  %108 = fdiv double %107, %0
  %109 = fsub double %105, %108
  %110 = fdiv double %109, %44
  br label %111

111:                                              ; preds = %96, %102
  %112 = phi double [ %110, %102 ], [ 0.000000e+00, %96 ]
  %113 = tail call float @powf(float noundef %41, float noundef 0x3FD5555560000000) #11
  %114 = fpext float %113 to double
  %115 = fmul double %79, %114
  %116 = fcmp ult double %115, %2
  br i1 %116, label %126, label %117

117:                                              ; preds = %111
  %118 = fmul double %1, 6.000000e+00
  %119 = fdiv double %118, %53
  %120 = tail call double @llvm.fmuladd.f64(double %97, double 1.200000e+01, double %119)
  %121 = fmul double %1, 3.000000e+00
  %122 = fmul double %121, %1
  %123 = fdiv double %122, %0
  %124 = fsub double %120, %123
  %125 = fdiv double %124, %49
  br label %126

126:                                              ; preds = %111, %117
  %127 = phi double [ %125, %117 ], [ 0.000000e+00, %111 ]
  %128 = fsub double 1.000000e+00, %7
  %129 = fmul double %97, %7
  %130 = tail call double @llvm.fmuladd.f64(double %128, double %75, double %129)
  store double %130, ptr %14, align 8, !tbaa !19
  %131 = fmul double %127, %7
  %132 = tail call double @llvm.fmuladd.f64(double %128, double %112, double %131)
  store double %132, ptr %15, align 8, !tbaa !19
  %133 = fsub double 1.000000e+00, %8
  %134 = fmul double %97, %8
  %135 = tail call double @llvm.fmuladd.f64(double %133, double %75, double %134)
  br label %261

136:                                              ; preds = %33
  %137 = icmp eq i32 %10, 0
  br i1 %137, label %223, label %138

138:                                              ; preds = %136
  %139 = fmul double %2, %2
  %140 = fmul double %139, %2
  %141 = fmul double %0, 2.000000e+00
  %142 = fdiv double %141, %1
  %143 = fptrunc double %142 to float
  %144 = tail call float @powf(float noundef %143, float noundef 0x3FD5555560000000) #11
  %145 = fpext float %144 to double
  %146 = fcmp olt double %145, %2
  %147 = fmul double %140, %140
  %148 = fdiv double %0, %147
  %149 = fdiv double %1, %140
  %150 = fsub double %148, %149
  br i1 %146, label %151, label %153

151:                                              ; preds = %138
  %152 = fmul double %150, %7
  br label %160

153:                                              ; preds = %138
  %154 = fsub double 1.000000e+00, %7
  %155 = fmul double %154, %1
  %156 = fmul double %155, %1
  %157 = fmul double %0, 4.000000e+00
  %158 = fdiv double %156, %157
  %159 = fadd double %150, %158
  br label %160

160:                                              ; preds = %153, %151
  %161 = phi double [ %152, %151 ], [ %159, %153 ]
  store double %161, ptr %14, align 8, !tbaa !19
  %162 = tail call float @powf(float noundef %143, float noundef 0x3FD5555560000000) #11
  %163 = fpext float %162 to double
  %164 = fcmp olt double %163, %2
  %165 = load double, ptr %14, align 8, !tbaa !19
  br i1 %164, label %166, label %176

166:                                              ; preds = %160
  %167 = fmul double %7, 6.000000e+00
  %168 = fmul double %167, %1
  %169 = fdiv double %168, %140
  %170 = tail call double @llvm.fmuladd.f64(double %165, double 1.200000e+01, double %169)
  %171 = fdiv double %170, %2
  %172 = extractelement <2 x double> %34, i64 1
  %173 = fmul double %172, %165
  %174 = extractelement <2 x double> %34, i64 0
  %175 = tail call double @llvm.fmuladd.f64(double %171, double %174, double %173)
  br label %187

176:                                              ; preds = %160
  %177 = fmul double %1, 6.000000e+00
  %178 = fdiv double %177, %140
  %179 = tail call double @llvm.fmuladd.f64(double %165, double 1.200000e+01, double %178)
  %180 = fsub double 1.000000e+00, %7
  %181 = fmul double %180, 3.000000e+00
  %182 = fmul double %181, %1
  %183 = fmul double %182, %1
  %184 = fdiv double %183, %0
  %185 = fsub double %179, %184
  %186 = fdiv double %185, %2
  br label %187

187:                                              ; preds = %176, %166
  %188 = phi double [ %175, %166 ], [ %186, %176 ]
  store double %188, ptr %15, align 8, !tbaa !19
  %189 = load double, ptr %14, align 8, !tbaa !19
  %190 = extractelement <2 x double> %34, i64 0
  %191 = fmul double %190, %189
  store double %191, ptr %14, align 8, !tbaa !19
  %192 = tail call float @powf(float noundef %143, float noundef 0x3FD5555560000000) #11
  %193 = fpext float %192 to double
  %194 = fcmp olt double %193, %2
  br i1 %194, label %195, label %207

195:                                              ; preds = %187
  %196 = fmul double %190, %8
  %197 = fmul double %140, %140
  %198 = insertelement <2 x double> poison, double %0, i64 0
  %199 = insertelement <2 x double> %198, double %1, i64 1
  %200 = insertelement <2 x double> poison, double %197, i64 0
  %201 = insertelement <2 x double> %200, double %140, i64 1
  %202 = fdiv <2 x double> %199, %201
  %203 = shufflevector <2 x double> %202, <2 x double> poison, <2 x i32> <i32 1, i32 poison>
  %204 = fsub <2 x double> %202, %203
  %205 = extractelement <2 x double> %204, i64 0
  %206 = fmul double %205, %196
  br label %261

207:                                              ; preds = %187
  %208 = insertelement <2 x double> poison, double %140, i64 0
  %209 = insertelement <2 x double> %208, double %0, i64 1
  %210 = insertelement <2 x double> %209, double 4.000000e+00, i64 1
  %211 = fmul <2 x double> %209, %210
  %212 = fdiv double %1, %140
  %213 = fsub double 1.000000e+00, %8
  %214 = fmul double %213, %1
  %215 = fmul double %214, %1
  %216 = insertelement <2 x double> poison, double %0, i64 0
  %217 = insertelement <2 x double> %216, double %215, i64 1
  %218 = fdiv <2 x double> %217, %211
  %219 = extractelement <2 x double> %218, i64 0
  %220 = fsub double %219, %212
  %221 = extractelement <2 x double> %218, i64 1
  %222 = fadd double %220, %221
  br label %261

223:                                              ; preds = %136
  %224 = fadd double %2, %3
  %225 = fadd double %2, %4
  %226 = fmul double %224, %224
  %227 = fmul double %225, %225
  %228 = fmul double %224, %226
  %229 = fmul double %228, %228
  %230 = insertelement <2 x double> poison, double %0, i64 0
  %231 = insertelement <2 x double> %230, double %1, i64 1
  %232 = insertelement <2 x double> poison, double %229, i64 0
  %233 = insertelement <2 x double> %232, double %228, i64 1
  %234 = fdiv <2 x double> %231, %233
  %235 = shufflevector <2 x double> %234, <2 x double> poison, <2 x i32> <i32 1, i32 poison>
  %236 = fsub <2 x double> %234, %235
  %237 = extractelement <2 x double> %236, i64 0
  store double %237, ptr %14, align 8, !tbaa !19
  %238 = fmul double %1, 6.000000e+00
  %239 = fdiv double %238, %228
  %240 = tail call double @llvm.fmuladd.f64(double %237, double 1.200000e+01, double %239)
  %241 = fdiv double %240, %224
  %242 = shufflevector <2 x double> %34, <2 x double> poison, <2 x i32> <i32 1, i32 poison>
  %243 = fmul <2 x double> %236, %242
  %244 = extractelement <2 x double> %243, i64 0
  %245 = extractelement <2 x double> %34, i64 0
  %246 = tail call double @llvm.fmuladd.f64(double %241, double %245, double %244)
  %247 = fmul double %246, %7
  store double %247, ptr %15, align 8, !tbaa !19
  %248 = fmul double %245, %7
  %249 = load double, ptr %14, align 8, !tbaa !19
  %250 = fmul double %248, %249
  store double %250, ptr %14, align 8, !tbaa !19
  %251 = fmul double %225, %227
  %252 = fmul double %251, %251
  %253 = insertelement <2 x double> poison, double %252, i64 0
  %254 = insertelement <2 x double> %253, double %251, i64 1
  %255 = fdiv <2 x double> %231, %254
  %256 = shufflevector <2 x double> %255, <2 x double> poison, <2 x i32> <i32 1, i32 poison>
  %257 = fsub <2 x double> %255, %256
  %258 = extractelement <2 x double> %257, i64 0
  %259 = fmul double %258, %8
  %260 = fmul double %259, %245
  br label %261

261:                                              ; preds = %195, %207, %223, %126
  %262 = phi double [ %260, %223 ], [ %135, %126 ], [ %206, %195 ], [ %222, %207 ]
  store double %262, ptr %16, align 8, !tbaa !19
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdaPv(ptr noundef) local_unnamed_addr #7

; Function Attrs: sspstrong uwtable
define dso_local void @_ZN20ComputeNonbondedUtil30calc_pair_energy_fullelect_fepEP9nonbonded(ptr nocapture noundef readonly %0) local_unnamed_addr #0 align 2 {
  %2 = alloca [9 x i32], align 16
  %3 = alloca double, align 8
  %4 = alloca double, align 8
  %5 = alloca double, align 8
  %6 = load i32, ptr @_ZN20ComputeNonbondedUtil8commOnlyE, align 4, !tbaa !5
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %8, label %4623

8:                                                ; preds = %1
  %9 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 7
  %10 = load ptr, ptr %9, align 8, !tbaa !9
  %11 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 10
  %12 = load ptr, ptr %11, align 8, !tbaa !14
  %13 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 11
  %14 = load i32, ptr %13, align 8, !tbaa !15
  %15 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 12
  %16 = load i32, ptr %15, align 4, !tbaa !16
  %17 = getelementptr inbounds %class.Pairlists, ptr %12, i64 0, i32 1
  store i32 0, ptr %17, align 8, !tbaa !17
  %18 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 6
  %19 = load double, ptr %18, align 8, !tbaa !113
  %20 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 6, i32 1
  %21 = load <2 x double>, ptr %20, align 8, !tbaa !19
  %22 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 13
  %23 = load double, ptr %22, align 8, !tbaa !21
  %24 = fmul double %23, %23
  %25 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 14
  %26 = load double, ptr %25, align 8, !tbaa !22
  %27 = fmul double %26, %26
  %28 = load double, ptr @_ZN20ComputeNonbondedUtil12dielectric_1E, align 8, !tbaa !19
  %29 = load ptr, ptr @_ZN20ComputeNonbondedUtil7ljTableE, align 8, !tbaa !23
  %30 = load ptr, ptr @_ZN20ComputeNonbondedUtil3molE, align 8, !tbaa !23
  %31 = load ptr, ptr @_ZN20ComputeNonbondedUtil11table_shortE, align 8, !tbaa !23
  %32 = load ptr, ptr @_ZN20ComputeNonbondedUtil10slow_tableE, align 8, !tbaa !23
  %33 = load double, ptr @_ZN20ComputeNonbondedUtil7scalingE, align 8, !tbaa !19
  %34 = load double, ptr @_ZN20ComputeNonbondedUtil7scale14E, align 8, !tbaa !19
  %35 = fsub double 1.000000e+00, %34
  %36 = load double, ptr @_ZN20ComputeNonbondedUtil8r2_deltaE, align 8, !tbaa !19
  %37 = load i32, ptr @_ZN20ComputeNonbondedUtil12r2_delta_expE, align 4, !tbaa !5
  %38 = shl i32 %37, 6
  %39 = add i32 %38, -65472
  %40 = load double, ptr @_ZN20ComputeNonbondedUtil9switchOn2E, align 8, !tbaa !19
  %41 = load double, ptr @_ZN20ComputeNonbondedUtil7cutoff2E, align 8, !tbaa !19
  %42 = fsub double %41, %40
  %43 = fmul double %42, %42
  %44 = fmul double %42, %43
  %45 = fdiv double 1.000000e+00, %44
  %46 = load double, ptr @_ZN20ComputeNonbondedUtil19alchElecLambdaStartE, align 8, !tbaa !19
  %47 = load double, ptr @_ZN20ComputeNonbondedUtil16alchVdwLambdaEndE, align 8, !tbaa !19
  %48 = load i32, ptr @_ZN20ComputeNonbondedUtil14Fep_WCA_repuOnE, align 4, !tbaa !5
  %49 = load i32, ptr @_ZN20ComputeNonbondedUtil14Fep_WCA_dispOnE, align 4, !tbaa !5
  %50 = load double, ptr @_ZN20ComputeNonbondedUtil9WCA_rcut1E, align 8, !tbaa !19
  %51 = load double, ptr @_ZN20ComputeNonbondedUtil9WCA_rcut2E, align 8, !tbaa !19
  %52 = load double, ptr @_ZN20ComputeNonbondedUtil10alchLambdaE, align 8, !tbaa !19
  %53 = fsub double 1.000000e+00, %46
  %54 = fcmp oge double %52, %47
  %55 = fdiv double %52, %47
  %56 = select i1 %54, double 1.000000e+00, double %55
  %57 = load double, ptr @_ZN20ComputeNonbondedUtil17alchVdwShiftCoeffE, align 8, !tbaa !19
  %58 = fsub double 1.000000e+00, %56
  %59 = fmul double %57, %58
  %60 = load double, ptr @_ZN20ComputeNonbondedUtil11alchLambda2E, align 8, !tbaa !19
  %61 = fcmp oge double %60, %47
  %62 = fdiv double %60, %47
  %63 = select i1 %61, double 1.000000e+00, double %62
  %64 = fsub double 1.000000e+00, %63
  %65 = fmul double %57, %64
  %66 = insertelement <2 x double> poison, double %60, i64 0
  %67 = insertelement <2 x double> %66, double %52, i64 1
  %68 = insertelement <2 x double> poison, double %46, i64 0
  %69 = shufflevector <2 x double> %68, <2 x double> poison, <2 x i32> zeroinitializer
  %70 = fcmp ugt <2 x double> %67, %69
  %71 = fsub <2 x double> %67, %69
  %72 = insertelement <2 x double> poison, double %53, i64 0
  %73 = shufflevector <2 x double> %72, <2 x double> poison, <2 x i32> zeroinitializer
  %74 = fdiv <2 x double> %71, %73
  %75 = select <2 x i1> %70, <2 x double> %74, <2 x double> zeroinitializer
  %76 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %67
  %77 = fcmp ugt <2 x double> %76, %69
  %78 = fsub <2 x double> %76, %69
  %79 = fdiv <2 x double> %78, %73
  %80 = extractelement <2 x double> %76, i64 1
  %81 = fcmp oge double %80, %47
  %82 = fdiv double %80, %47
  %83 = select i1 %81, double 1.000000e+00, double %82
  %84 = fsub double 1.000000e+00, %83
  %85 = fmul double %57, %84
  %86 = select <2 x i1> %77, <2 x double> %79, <2 x double> zeroinitializer
  %87 = extractelement <2 x double> %76, i64 0
  %88 = fcmp oge double %87, %47
  %89 = fdiv double %87, %47
  %90 = select i1 %88, double 1.000000e+00, double %89
  %91 = fsub double 1.000000e+00, %90
  %92 = fmul double %57, %91
  call void @llvm.lifetime.start.p0(i64 36, ptr nonnull %2) #11
  %93 = load i32, ptr @_ZN20ComputeNonbondedUtil12alchDecoupleE, align 4, !tbaa !5
  %94 = icmp eq i32 %93, 0
  %95 = getelementptr inbounds [9 x i32], ptr %2, i64 0, i64 6
  store i32 2, ptr %95, align 8, !tbaa !5
  %96 = getelementptr inbounds [9 x i32], ptr %2, i64 0, i64 4
  %97 = getelementptr inbounds [9 x i32], ptr %2, i64 0, i64 7
  %98 = getelementptr inbounds [9 x i32], ptr %2, i64 0, i64 5
  %99 = getelementptr inbounds [9 x i32], ptr %2, i64 0, i64 8
  %100 = zext i1 %94 to i32
  %101 = select i1 %94, i32 2, i32 0
  store i32 %100, ptr %96, align 16, !tbaa !5
  store i32 99, ptr %97, align 4, !tbaa !5
  store <4 x i32> <i32 0, i32 1, i32 2, i32 1>, ptr %2, align 16, !tbaa !5
  store i32 99, ptr %98, align 4, !tbaa !5
  store i32 %101, ptr %99, align 16, !tbaa !5
  %102 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 5
  %103 = load i32, ptr %102, align 8, !tbaa !5
  %104 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 5, i64 1
  %105 = load i32, ptr %104, align 4, !tbaa !5
  %106 = load ptr, ptr %0, align 8, !tbaa !23
  %107 = getelementptr inbounds [2 x ptr], ptr %0, i64 0, i64 1
  %108 = load ptr, ptr %107, align 8, !tbaa !23
  %109 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 1
  %110 = load ptr, ptr %109, align 8, !tbaa !23
  %111 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 1, i64 1
  %112 = load ptr, ptr %111, align 8, !tbaa !23
  %113 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 9
  %114 = load ptr, ptr %113, align 8, !tbaa !24
  %115 = add nsw i32 %105, 5
  %116 = getelementptr inbounds %class.ResizeArray, ptr %114, i64 0, i32 1
  %117 = load ptr, ptr %116, align 8, !tbaa !25
  %118 = getelementptr inbounds %class.ResizeArrayRaw, ptr %117, i64 0, i32 2
  %119 = load i32, ptr %118, align 8, !tbaa !27
  %120 = icmp slt i32 %119, %115
  br i1 %120, label %121, label %159

121:                                              ; preds = %8
  %122 = getelementptr inbounds %class.ResizeArrayRaw, ptr %117, i64 0, i32 3
  %123 = load i32, ptr %122, align 4, !tbaa !30
  %124 = icmp slt i32 %123, %115
  br i1 %124, label %125, label %159

125:                                              ; preds = %121
  %126 = sitofp i32 %123 to float
  %127 = getelementptr inbounds %class.ResizeArrayRaw, ptr %117, i64 0, i32 5
  %128 = load float, ptr %127, align 4, !tbaa !31
  %129 = fmul float %128, %126
  %130 = fptosi float %129 to i32
  %131 = tail call i32 @llvm.smax.i32(i32 %130, i32 %115)
  %132 = sub nsw i32 %131, %123
  %133 = getelementptr inbounds %class.ResizeArrayRaw, ptr %117, i64 0, i32 6
  %134 = load i32, ptr %133, align 8, !tbaa !32
  %135 = icmp slt i32 %132, %134
  %136 = add nsw i32 %134, %123
  %137 = select i1 %135, i32 %136, i32 %131
  %138 = sext i32 %137 to i64
  %139 = shl nsw i64 %138, 1
  %140 = add nsw i64 %139, 31
  %141 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %140) #12
  %142 = getelementptr inbounds i8, ptr %141, i64 31
  %143 = ptrtoint ptr %142 to i64
  %144 = and i64 %143, 31
  %145 = sub nsw i64 0, %144
  %146 = getelementptr inbounds i8, ptr %142, i64 %145
  %147 = load ptr, ptr %117, align 8, !tbaa !33
  %148 = sext i32 %119 to i64
  %149 = shl nsw i64 %148, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %146, ptr align 1 %147, i64 %149, i1 false)
  %150 = icmp eq i32 %123, 0
  br i1 %150, label %156, label %151

151:                                              ; preds = %125
  %152 = getelementptr inbounds %class.ResizeArrayRaw, ptr %117, i64 0, i32 1
  %153 = load ptr, ptr %152, align 8, !tbaa !34
  %154 = icmp eq ptr %153, null
  br i1 %154, label %156, label %155

155:                                              ; preds = %151
  tail call void @_ZdaPv(ptr noundef nonnull %153) #13
  br label %156

156:                                              ; preds = %155, %151, %125
  %157 = getelementptr inbounds %class.ResizeArrayRaw, ptr %117, i64 0, i32 1
  store ptr %141, ptr %157, align 8, !tbaa !34
  store ptr %146, ptr %117, align 8, !tbaa !33
  store i32 %137, ptr %122, align 4, !tbaa !30
  %158 = load ptr, ptr %116, align 8, !tbaa !25
  br label %159

159:                                              ; preds = %8, %121, %156
  %160 = phi ptr [ %117, %8 ], [ %117, %121 ], [ %158, %156 ]
  store i32 %115, ptr %118, align 8, !tbaa !27
  %161 = load ptr, ptr %160, align 8, !tbaa !33
  %162 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %114, i64 0, i32 1, i32 1
  %163 = load ptr, ptr %162, align 8, !tbaa !35
  %164 = getelementptr inbounds %class.ResizeArrayRaw.9, ptr %163, i64 0, i32 2
  %165 = load i32, ptr %164, align 8, !tbaa !37
  %166 = icmp slt i32 %165, %115
  br i1 %166, label %167, label %205

167:                                              ; preds = %159
  %168 = getelementptr inbounds %class.ResizeArrayRaw.9, ptr %163, i64 0, i32 3
  %169 = load i32, ptr %168, align 4, !tbaa !39
  %170 = icmp slt i32 %169, %115
  br i1 %170, label %171, label %205

171:                                              ; preds = %167
  %172 = sitofp i32 %169 to float
  %173 = getelementptr inbounds %class.ResizeArrayRaw.9, ptr %163, i64 0, i32 5
  %174 = load float, ptr %173, align 4, !tbaa !40
  %175 = fmul float %174, %172
  %176 = fptosi float %175 to i32
  %177 = tail call i32 @llvm.smax.i32(i32 %176, i32 %115)
  %178 = sub nsw i32 %177, %169
  %179 = getelementptr inbounds %class.ResizeArrayRaw.9, ptr %163, i64 0, i32 6
  %180 = load i32, ptr %179, align 8, !tbaa !41
  %181 = icmp slt i32 %178, %180
  %182 = add nsw i32 %180, %169
  %183 = select i1 %181, i32 %182, i32 %177
  %184 = sext i32 %183 to i64
  %185 = shl nsw i64 %184, 3
  %186 = add nsw i64 %185, 31
  %187 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %186) #12
  %188 = getelementptr inbounds i8, ptr %187, i64 31
  %189 = ptrtoint ptr %188 to i64
  %190 = and i64 %189, 31
  %191 = sub nsw i64 0, %190
  %192 = getelementptr inbounds i8, ptr %188, i64 %191
  %193 = load ptr, ptr %163, align 8, !tbaa !42
  %194 = sext i32 %165 to i64
  %195 = shl nsw i64 %194, 3
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %192, ptr align 1 %193, i64 %195, i1 false)
  %196 = icmp eq i32 %169, 0
  br i1 %196, label %202, label %197

197:                                              ; preds = %171
  %198 = getelementptr inbounds %class.ResizeArrayRaw.9, ptr %163, i64 0, i32 1
  %199 = load ptr, ptr %198, align 8, !tbaa !43
  %200 = icmp eq ptr %199, null
  br i1 %200, label %202, label %201

201:                                              ; preds = %197
  tail call void @_ZdaPv(ptr noundef nonnull %199) #13
  br label %202

202:                                              ; preds = %201, %197, %171
  %203 = getelementptr inbounds %class.ResizeArrayRaw.9, ptr %163, i64 0, i32 1
  store ptr %187, ptr %203, align 8, !tbaa !43
  store ptr %192, ptr %163, align 8, !tbaa !42
  store i32 %183, ptr %168, align 4, !tbaa !39
  %204 = load ptr, ptr %162, align 8, !tbaa !35
  br label %205

205:                                              ; preds = %159, %167, %202
  %206 = phi ptr [ %163, %159 ], [ %163, %167 ], [ %204, %202 ]
  store i32 %115, ptr %164, align 8, !tbaa !37
  %207 = load ptr, ptr %206, align 8, !tbaa !42
  %208 = getelementptr inbounds i32, ptr %207, i64 1
  %209 = icmp eq i32 %14, 0
  %210 = icmp ne i32 %16, 0
  %211 = select i1 %209, i1 %210, i1 false
  %212 = select i1 %211, i32 0, i32 %115
  %213 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %114, i64 0, i32 2, i32 1
  %214 = load ptr, ptr %213, align 8, !tbaa !25
  %215 = getelementptr inbounds %class.ResizeArrayRaw, ptr %214, i64 0, i32 2
  %216 = load i32, ptr %215, align 8, !tbaa !27
  %217 = icmp slt i32 %216, %212
  br i1 %217, label %218, label %256

218:                                              ; preds = %205
  %219 = getelementptr inbounds %class.ResizeArrayRaw, ptr %214, i64 0, i32 3
  %220 = load i32, ptr %219, align 4, !tbaa !30
  %221 = icmp slt i32 %220, %212
  br i1 %221, label %222, label %256

222:                                              ; preds = %218
  %223 = sitofp i32 %220 to float
  %224 = getelementptr inbounds %class.ResizeArrayRaw, ptr %214, i64 0, i32 5
  %225 = load float, ptr %224, align 4, !tbaa !31
  %226 = fmul float %225, %223
  %227 = fptosi float %226 to i32
  %228 = tail call i32 @llvm.smax.i32(i32 %227, i32 %212)
  %229 = sub nsw i32 %228, %220
  %230 = getelementptr inbounds %class.ResizeArrayRaw, ptr %214, i64 0, i32 6
  %231 = load i32, ptr %230, align 8, !tbaa !32
  %232 = icmp slt i32 %229, %231
  %233 = add nsw i32 %231, %220
  %234 = select i1 %232, i32 %233, i32 %228
  %235 = sext i32 %234 to i64
  %236 = shl nsw i64 %235, 1
  %237 = add nsw i64 %236, 31
  %238 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %237) #12
  %239 = getelementptr inbounds i8, ptr %238, i64 31
  %240 = ptrtoint ptr %239 to i64
  %241 = and i64 %240, 31
  %242 = sub nsw i64 0, %241
  %243 = getelementptr inbounds i8, ptr %239, i64 %242
  %244 = load ptr, ptr %214, align 8, !tbaa !33
  %245 = sext i32 %216 to i64
  %246 = shl nsw i64 %245, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %243, ptr align 1 %244, i64 %246, i1 false)
  %247 = icmp eq i32 %220, 0
  br i1 %247, label %253, label %248

248:                                              ; preds = %222
  %249 = getelementptr inbounds %class.ResizeArrayRaw, ptr %214, i64 0, i32 1
  %250 = load ptr, ptr %249, align 8, !tbaa !34
  %251 = icmp eq ptr %250, null
  br i1 %251, label %253, label %252

252:                                              ; preds = %248
  tail call void @_ZdaPv(ptr noundef nonnull %250) #13
  br label %253

253:                                              ; preds = %252, %248, %222
  %254 = getelementptr inbounds %class.ResizeArrayRaw, ptr %214, i64 0, i32 1
  store ptr %238, ptr %254, align 8, !tbaa !34
  store ptr %243, ptr %214, align 8, !tbaa !33
  store i32 %234, ptr %219, align 4, !tbaa !30
  %255 = load ptr, ptr %213, align 8, !tbaa !25
  br label %256

256:                                              ; preds = %205, %218, %253
  %257 = phi ptr [ %214, %205 ], [ %214, %218 ], [ %255, %253 ]
  store i32 %212, ptr %215, align 8, !tbaa !27
  %258 = load ptr, ptr %257, align 8, !tbaa !33
  %259 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %114, i64 0, i32 3, i32 1
  %260 = load ptr, ptr %259, align 8, !tbaa !25
  %261 = getelementptr inbounds %class.ResizeArrayRaw, ptr %260, i64 0, i32 2
  %262 = load i32, ptr %261, align 8, !tbaa !27
  %263 = icmp slt i32 %262, %212
  br i1 %263, label %264, label %302

264:                                              ; preds = %256
  %265 = getelementptr inbounds %class.ResizeArrayRaw, ptr %260, i64 0, i32 3
  %266 = load i32, ptr %265, align 4, !tbaa !30
  %267 = icmp slt i32 %266, %212
  br i1 %267, label %268, label %302

268:                                              ; preds = %264
  %269 = sitofp i32 %266 to float
  %270 = getelementptr inbounds %class.ResizeArrayRaw, ptr %260, i64 0, i32 5
  %271 = load float, ptr %270, align 4, !tbaa !31
  %272 = fmul float %271, %269
  %273 = fptosi float %272 to i32
  %274 = tail call i32 @llvm.smax.i32(i32 %273, i32 %212)
  %275 = sub nsw i32 %274, %266
  %276 = getelementptr inbounds %class.ResizeArrayRaw, ptr %260, i64 0, i32 6
  %277 = load i32, ptr %276, align 8, !tbaa !32
  %278 = icmp slt i32 %275, %277
  %279 = add nsw i32 %277, %266
  %280 = select i1 %278, i32 %279, i32 %274
  %281 = sext i32 %280 to i64
  %282 = shl nsw i64 %281, 1
  %283 = add nsw i64 %282, 31
  %284 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %283) #12
  %285 = getelementptr inbounds i8, ptr %284, i64 31
  %286 = ptrtoint ptr %285 to i64
  %287 = and i64 %286, 31
  %288 = sub nsw i64 0, %287
  %289 = getelementptr inbounds i8, ptr %285, i64 %288
  %290 = load ptr, ptr %260, align 8, !tbaa !33
  %291 = sext i32 %262 to i64
  %292 = shl nsw i64 %291, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %289, ptr align 1 %290, i64 %292, i1 false)
  %293 = icmp eq i32 %266, 0
  br i1 %293, label %299, label %294

294:                                              ; preds = %268
  %295 = getelementptr inbounds %class.ResizeArrayRaw, ptr %260, i64 0, i32 1
  %296 = load ptr, ptr %295, align 8, !tbaa !34
  %297 = icmp eq ptr %296, null
  br i1 %297, label %299, label %298

298:                                              ; preds = %294
  tail call void @_ZdaPv(ptr noundef nonnull %296) #13
  br label %299

299:                                              ; preds = %298, %294, %268
  %300 = getelementptr inbounds %class.ResizeArrayRaw, ptr %260, i64 0, i32 1
  store ptr %284, ptr %300, align 8, !tbaa !34
  store ptr %289, ptr %260, align 8, !tbaa !33
  store i32 %280, ptr %265, align 4, !tbaa !30
  %301 = load ptr, ptr %259, align 8, !tbaa !25
  br label %302

302:                                              ; preds = %256, %264, %299
  %303 = phi ptr [ %260, %256 ], [ %260, %264 ], [ %301, %299 ]
  store i32 %212, ptr %261, align 8, !tbaa !27
  %304 = load ptr, ptr %303, align 8, !tbaa !33
  %305 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %114, i64 0, i32 4, i32 1
  %306 = load ptr, ptr %305, align 8, !tbaa !25
  %307 = getelementptr inbounds %class.ResizeArrayRaw, ptr %306, i64 0, i32 2
  %308 = load i32, ptr %307, align 8, !tbaa !27
  %309 = icmp slt i32 %308, %212
  br i1 %309, label %310, label %348

310:                                              ; preds = %302
  %311 = getelementptr inbounds %class.ResizeArrayRaw, ptr %306, i64 0, i32 3
  %312 = load i32, ptr %311, align 4, !tbaa !30
  %313 = icmp slt i32 %312, %212
  br i1 %313, label %314, label %348

314:                                              ; preds = %310
  %315 = sitofp i32 %312 to float
  %316 = getelementptr inbounds %class.ResizeArrayRaw, ptr %306, i64 0, i32 5
  %317 = load float, ptr %316, align 4, !tbaa !31
  %318 = fmul float %317, %315
  %319 = fptosi float %318 to i32
  %320 = tail call i32 @llvm.smax.i32(i32 %319, i32 %212)
  %321 = sub nsw i32 %320, %312
  %322 = getelementptr inbounds %class.ResizeArrayRaw, ptr %306, i64 0, i32 6
  %323 = load i32, ptr %322, align 8, !tbaa !32
  %324 = icmp slt i32 %321, %323
  %325 = add nsw i32 %323, %312
  %326 = select i1 %324, i32 %325, i32 %320
  %327 = sext i32 %326 to i64
  %328 = shl nsw i64 %327, 1
  %329 = add nsw i64 %328, 31
  %330 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %329) #12
  %331 = getelementptr inbounds i8, ptr %330, i64 31
  %332 = ptrtoint ptr %331 to i64
  %333 = and i64 %332, 31
  %334 = sub nsw i64 0, %333
  %335 = getelementptr inbounds i8, ptr %331, i64 %334
  %336 = load ptr, ptr %306, align 8, !tbaa !33
  %337 = sext i32 %308 to i64
  %338 = shl nsw i64 %337, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %335, ptr align 1 %336, i64 %338, i1 false)
  %339 = icmp eq i32 %312, 0
  br i1 %339, label %345, label %340

340:                                              ; preds = %314
  %341 = getelementptr inbounds %class.ResizeArrayRaw, ptr %306, i64 0, i32 1
  %342 = load ptr, ptr %341, align 8, !tbaa !34
  %343 = icmp eq ptr %342, null
  br i1 %343, label %345, label %344

344:                                              ; preds = %340
  tail call void @_ZdaPv(ptr noundef nonnull %342) #13
  br label %345

345:                                              ; preds = %344, %340, %314
  %346 = getelementptr inbounds %class.ResizeArrayRaw, ptr %306, i64 0, i32 1
  store ptr %330, ptr %346, align 8, !tbaa !34
  store ptr %335, ptr %306, align 8, !tbaa !33
  store i32 %326, ptr %311, align 4, !tbaa !30
  %347 = load ptr, ptr %305, align 8, !tbaa !25
  br label %348

348:                                              ; preds = %302, %310, %345
  %349 = phi ptr [ %306, %302 ], [ %306, %310 ], [ %347, %345 ]
  store i32 %212, ptr %307, align 8, !tbaa !27
  %350 = load ptr, ptr %349, align 8, !tbaa !33
  %351 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %114, i64 0, i32 5, i32 1
  %352 = load ptr, ptr %351, align 8, !tbaa !25
  %353 = getelementptr inbounds %class.ResizeArrayRaw, ptr %352, i64 0, i32 2
  %354 = load i32, ptr %353, align 8, !tbaa !27
  %355 = icmp slt i32 %354, %212
  br i1 %355, label %356, label %394

356:                                              ; preds = %348
  %357 = getelementptr inbounds %class.ResizeArrayRaw, ptr %352, i64 0, i32 3
  %358 = load i32, ptr %357, align 4, !tbaa !30
  %359 = icmp slt i32 %358, %212
  br i1 %359, label %360, label %394

360:                                              ; preds = %356
  %361 = sitofp i32 %358 to float
  %362 = getelementptr inbounds %class.ResizeArrayRaw, ptr %352, i64 0, i32 5
  %363 = load float, ptr %362, align 4, !tbaa !31
  %364 = fmul float %363, %361
  %365 = fptosi float %364 to i32
  %366 = tail call i32 @llvm.smax.i32(i32 %365, i32 %212)
  %367 = sub nsw i32 %366, %358
  %368 = getelementptr inbounds %class.ResizeArrayRaw, ptr %352, i64 0, i32 6
  %369 = load i32, ptr %368, align 8, !tbaa !32
  %370 = icmp slt i32 %367, %369
  %371 = add nsw i32 %369, %358
  %372 = select i1 %370, i32 %371, i32 %366
  %373 = sext i32 %372 to i64
  %374 = shl nsw i64 %373, 1
  %375 = add nsw i64 %374, 31
  %376 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %375) #12
  %377 = getelementptr inbounds i8, ptr %376, i64 31
  %378 = ptrtoint ptr %377 to i64
  %379 = and i64 %378, 31
  %380 = sub nsw i64 0, %379
  %381 = getelementptr inbounds i8, ptr %377, i64 %380
  %382 = load ptr, ptr %352, align 8, !tbaa !33
  %383 = sext i32 %354 to i64
  %384 = shl nsw i64 %383, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %381, ptr align 1 %382, i64 %384, i1 false)
  %385 = icmp eq i32 %358, 0
  br i1 %385, label %391, label %386

386:                                              ; preds = %360
  %387 = getelementptr inbounds %class.ResizeArrayRaw, ptr %352, i64 0, i32 1
  %388 = load ptr, ptr %387, align 8, !tbaa !34
  %389 = icmp eq ptr %388, null
  br i1 %389, label %391, label %390

390:                                              ; preds = %386
  tail call void @_ZdaPv(ptr noundef nonnull %388) #13
  br label %391

391:                                              ; preds = %390, %386, %360
  %392 = getelementptr inbounds %class.ResizeArrayRaw, ptr %352, i64 0, i32 1
  store ptr %376, ptr %392, align 8, !tbaa !34
  store ptr %381, ptr %352, align 8, !tbaa !33
  store i32 %372, ptr %357, align 4, !tbaa !30
  %393 = load ptr, ptr %351, align 8, !tbaa !25
  br label %394

394:                                              ; preds = %348, %356, %391
  %395 = phi ptr [ %352, %348 ], [ %352, %356 ], [ %393, %391 ]
  store i32 %212, ptr %353, align 8, !tbaa !27
  %396 = load ptr, ptr %395, align 8, !tbaa !33
  %397 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %114, i64 0, i32 6, i32 1
  %398 = load ptr, ptr %397, align 8, !tbaa !25
  %399 = getelementptr inbounds %class.ResizeArrayRaw, ptr %398, i64 0, i32 2
  %400 = load i32, ptr %399, align 8, !tbaa !27
  %401 = icmp slt i32 %400, %212
  br i1 %401, label %402, label %440

402:                                              ; preds = %394
  %403 = getelementptr inbounds %class.ResizeArrayRaw, ptr %398, i64 0, i32 3
  %404 = load i32, ptr %403, align 4, !tbaa !30
  %405 = icmp slt i32 %404, %212
  br i1 %405, label %406, label %440

406:                                              ; preds = %402
  %407 = sitofp i32 %404 to float
  %408 = getelementptr inbounds %class.ResizeArrayRaw, ptr %398, i64 0, i32 5
  %409 = load float, ptr %408, align 4, !tbaa !31
  %410 = fmul float %409, %407
  %411 = fptosi float %410 to i32
  %412 = tail call i32 @llvm.smax.i32(i32 %411, i32 %212)
  %413 = sub nsw i32 %412, %404
  %414 = getelementptr inbounds %class.ResizeArrayRaw, ptr %398, i64 0, i32 6
  %415 = load i32, ptr %414, align 8, !tbaa !32
  %416 = icmp slt i32 %413, %415
  %417 = add nsw i32 %415, %404
  %418 = select i1 %416, i32 %417, i32 %412
  %419 = sext i32 %418 to i64
  %420 = shl nsw i64 %419, 1
  %421 = add nsw i64 %420, 31
  %422 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %421) #12
  %423 = getelementptr inbounds i8, ptr %422, i64 31
  %424 = ptrtoint ptr %423 to i64
  %425 = and i64 %424, 31
  %426 = sub nsw i64 0, %425
  %427 = getelementptr inbounds i8, ptr %423, i64 %426
  %428 = load ptr, ptr %398, align 8, !tbaa !33
  %429 = sext i32 %400 to i64
  %430 = shl nsw i64 %429, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %427, ptr align 1 %428, i64 %430, i1 false)
  %431 = icmp eq i32 %404, 0
  br i1 %431, label %437, label %432

432:                                              ; preds = %406
  %433 = getelementptr inbounds %class.ResizeArrayRaw, ptr %398, i64 0, i32 1
  %434 = load ptr, ptr %433, align 8, !tbaa !34
  %435 = icmp eq ptr %434, null
  br i1 %435, label %437, label %436

436:                                              ; preds = %432
  tail call void @_ZdaPv(ptr noundef nonnull %434) #13
  br label %437

437:                                              ; preds = %436, %432, %406
  %438 = getelementptr inbounds %class.ResizeArrayRaw, ptr %398, i64 0, i32 1
  store ptr %422, ptr %438, align 8, !tbaa !34
  store ptr %427, ptr %398, align 8, !tbaa !33
  store i32 %418, ptr %403, align 4, !tbaa !30
  %439 = load ptr, ptr %397, align 8, !tbaa !25
  br label %440

440:                                              ; preds = %394, %402, %437
  %441 = phi ptr [ %398, %394 ], [ %398, %402 ], [ %439, %437 ]
  store i32 %212, ptr %399, align 8, !tbaa !27
  %442 = load ptr, ptr %441, align 8, !tbaa !33
  %443 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %114, i64 0, i32 15, i32 1
  %444 = load ptr, ptr %443, align 8, !tbaa !25
  %445 = getelementptr inbounds %class.ResizeArrayRaw, ptr %444, i64 0, i32 2
  %446 = load i32, ptr %445, align 8, !tbaa !27
  %447 = icmp slt i32 %446, %212
  br i1 %447, label %448, label %486

448:                                              ; preds = %440
  %449 = getelementptr inbounds %class.ResizeArrayRaw, ptr %444, i64 0, i32 3
  %450 = load i32, ptr %449, align 4, !tbaa !30
  %451 = icmp slt i32 %450, %212
  br i1 %451, label %452, label %486

452:                                              ; preds = %448
  %453 = sitofp i32 %450 to float
  %454 = getelementptr inbounds %class.ResizeArrayRaw, ptr %444, i64 0, i32 5
  %455 = load float, ptr %454, align 4, !tbaa !31
  %456 = fmul float %455, %453
  %457 = fptosi float %456 to i32
  %458 = tail call i32 @llvm.smax.i32(i32 %457, i32 %212)
  %459 = sub nsw i32 %458, %450
  %460 = getelementptr inbounds %class.ResizeArrayRaw, ptr %444, i64 0, i32 6
  %461 = load i32, ptr %460, align 8, !tbaa !32
  %462 = icmp slt i32 %459, %461
  %463 = add nsw i32 %461, %450
  %464 = select i1 %462, i32 %463, i32 %458
  %465 = sext i32 %464 to i64
  %466 = shl nsw i64 %465, 1
  %467 = add nsw i64 %466, 31
  %468 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %467) #12
  %469 = getelementptr inbounds i8, ptr %468, i64 31
  %470 = ptrtoint ptr %469 to i64
  %471 = and i64 %470, 31
  %472 = sub nsw i64 0, %471
  %473 = getelementptr inbounds i8, ptr %469, i64 %472
  %474 = load ptr, ptr %444, align 8, !tbaa !33
  %475 = sext i32 %446 to i64
  %476 = shl nsw i64 %475, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %473, ptr align 1 %474, i64 %476, i1 false)
  %477 = icmp eq i32 %450, 0
  br i1 %477, label %483, label %478

478:                                              ; preds = %452
  %479 = getelementptr inbounds %class.ResizeArrayRaw, ptr %444, i64 0, i32 1
  %480 = load ptr, ptr %479, align 8, !tbaa !34
  %481 = icmp eq ptr %480, null
  br i1 %481, label %483, label %482

482:                                              ; preds = %478
  tail call void @_ZdaPv(ptr noundef nonnull %480) #13
  br label %483

483:                                              ; preds = %482, %478, %452
  %484 = getelementptr inbounds %class.ResizeArrayRaw, ptr %444, i64 0, i32 1
  store ptr %468, ptr %484, align 8, !tbaa !34
  store ptr %473, ptr %444, align 8, !tbaa !33
  store i32 %464, ptr %449, align 4, !tbaa !30
  %485 = load ptr, ptr %443, align 8, !tbaa !25
  br label %486

486:                                              ; preds = %440, %448, %483
  %487 = phi ptr [ %444, %440 ], [ %444, %448 ], [ %485, %483 ]
  store i32 %212, ptr %445, align 8, !tbaa !27
  %488 = load ptr, ptr %487, align 8, !tbaa !33
  %489 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %114, i64 0, i32 16, i32 1
  %490 = load ptr, ptr %489, align 8, !tbaa !25
  %491 = getelementptr inbounds %class.ResizeArrayRaw, ptr %490, i64 0, i32 2
  %492 = load i32, ptr %491, align 8, !tbaa !27
  %493 = icmp slt i32 %492, %212
  br i1 %493, label %494, label %532

494:                                              ; preds = %486
  %495 = getelementptr inbounds %class.ResizeArrayRaw, ptr %490, i64 0, i32 3
  %496 = load i32, ptr %495, align 4, !tbaa !30
  %497 = icmp slt i32 %496, %212
  br i1 %497, label %498, label %532

498:                                              ; preds = %494
  %499 = sitofp i32 %496 to float
  %500 = getelementptr inbounds %class.ResizeArrayRaw, ptr %490, i64 0, i32 5
  %501 = load float, ptr %500, align 4, !tbaa !31
  %502 = fmul float %501, %499
  %503 = fptosi float %502 to i32
  %504 = tail call i32 @llvm.smax.i32(i32 %503, i32 %212)
  %505 = sub nsw i32 %504, %496
  %506 = getelementptr inbounds %class.ResizeArrayRaw, ptr %490, i64 0, i32 6
  %507 = load i32, ptr %506, align 8, !tbaa !32
  %508 = icmp slt i32 %505, %507
  %509 = add nsw i32 %507, %496
  %510 = select i1 %508, i32 %509, i32 %504
  %511 = sext i32 %510 to i64
  %512 = shl nsw i64 %511, 1
  %513 = add nsw i64 %512, 31
  %514 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %513) #12
  %515 = getelementptr inbounds i8, ptr %514, i64 31
  %516 = ptrtoint ptr %515 to i64
  %517 = and i64 %516, 31
  %518 = sub nsw i64 0, %517
  %519 = getelementptr inbounds i8, ptr %515, i64 %518
  %520 = load ptr, ptr %490, align 8, !tbaa !33
  %521 = sext i32 %492 to i64
  %522 = shl nsw i64 %521, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %519, ptr align 1 %520, i64 %522, i1 false)
  %523 = icmp eq i32 %496, 0
  br i1 %523, label %529, label %524

524:                                              ; preds = %498
  %525 = getelementptr inbounds %class.ResizeArrayRaw, ptr %490, i64 0, i32 1
  %526 = load ptr, ptr %525, align 8, !tbaa !34
  %527 = icmp eq ptr %526, null
  br i1 %527, label %529, label %528

528:                                              ; preds = %524
  tail call void @_ZdaPv(ptr noundef nonnull %526) #13
  br label %529

529:                                              ; preds = %528, %524, %498
  %530 = getelementptr inbounds %class.ResizeArrayRaw, ptr %490, i64 0, i32 1
  store ptr %514, ptr %530, align 8, !tbaa !34
  store ptr %519, ptr %490, align 8, !tbaa !33
  store i32 %510, ptr %495, align 4, !tbaa !30
  %531 = load ptr, ptr %489, align 8, !tbaa !25
  br label %532

532:                                              ; preds = %486, %494, %529
  %533 = phi ptr [ %490, %486 ], [ %490, %494 ], [ %531, %529 ]
  store i32 %212, ptr %491, align 8, !tbaa !27
  %534 = load ptr, ptr %533, align 8, !tbaa !33
  %535 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %114, i64 0, i32 9, i32 1
  %536 = load ptr, ptr %535, align 8, !tbaa !25
  %537 = getelementptr inbounds %class.ResizeArrayRaw, ptr %536, i64 0, i32 2
  %538 = load i32, ptr %537, align 8, !tbaa !27
  %539 = icmp slt i32 %538, %212
  br i1 %539, label %540, label %578

540:                                              ; preds = %532
  %541 = getelementptr inbounds %class.ResizeArrayRaw, ptr %536, i64 0, i32 3
  %542 = load i32, ptr %541, align 4, !tbaa !30
  %543 = icmp slt i32 %542, %212
  br i1 %543, label %544, label %578

544:                                              ; preds = %540
  %545 = sitofp i32 %542 to float
  %546 = getelementptr inbounds %class.ResizeArrayRaw, ptr %536, i64 0, i32 5
  %547 = load float, ptr %546, align 4, !tbaa !31
  %548 = fmul float %547, %545
  %549 = fptosi float %548 to i32
  %550 = tail call i32 @llvm.smax.i32(i32 %549, i32 %212)
  %551 = sub nsw i32 %550, %542
  %552 = getelementptr inbounds %class.ResizeArrayRaw, ptr %536, i64 0, i32 6
  %553 = load i32, ptr %552, align 8, !tbaa !32
  %554 = icmp slt i32 %551, %553
  %555 = add nsw i32 %553, %542
  %556 = select i1 %554, i32 %555, i32 %550
  %557 = sext i32 %556 to i64
  %558 = shl nsw i64 %557, 1
  %559 = add nsw i64 %558, 31
  %560 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %559) #12
  %561 = getelementptr inbounds i8, ptr %560, i64 31
  %562 = ptrtoint ptr %561 to i64
  %563 = and i64 %562, 31
  %564 = sub nsw i64 0, %563
  %565 = getelementptr inbounds i8, ptr %561, i64 %564
  %566 = load ptr, ptr %536, align 8, !tbaa !33
  %567 = sext i32 %538 to i64
  %568 = shl nsw i64 %567, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %565, ptr align 1 %566, i64 %568, i1 false)
  %569 = icmp eq i32 %542, 0
  br i1 %569, label %575, label %570

570:                                              ; preds = %544
  %571 = getelementptr inbounds %class.ResizeArrayRaw, ptr %536, i64 0, i32 1
  %572 = load ptr, ptr %571, align 8, !tbaa !34
  %573 = icmp eq ptr %572, null
  br i1 %573, label %575, label %574

574:                                              ; preds = %570
  tail call void @_ZdaPv(ptr noundef nonnull %572) #13
  br label %575

575:                                              ; preds = %574, %570, %544
  %576 = getelementptr inbounds %class.ResizeArrayRaw, ptr %536, i64 0, i32 1
  store ptr %560, ptr %576, align 8, !tbaa !34
  store ptr %565, ptr %536, align 8, !tbaa !33
  store i32 %556, ptr %541, align 4, !tbaa !30
  %577 = load ptr, ptr %535, align 8, !tbaa !25
  br label %578

578:                                              ; preds = %532, %540, %575
  %579 = phi ptr [ %536, %532 ], [ %536, %540 ], [ %577, %575 ]
  store i32 %212, ptr %537, align 8, !tbaa !27
  %580 = load ptr, ptr %579, align 8, !tbaa !33
  %581 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %114, i64 0, i32 10, i32 1
  %582 = load ptr, ptr %581, align 8, !tbaa !25
  %583 = getelementptr inbounds %class.ResizeArrayRaw, ptr %582, i64 0, i32 2
  %584 = load i32, ptr %583, align 8, !tbaa !27
  %585 = icmp slt i32 %584, %212
  br i1 %585, label %586, label %624

586:                                              ; preds = %578
  %587 = getelementptr inbounds %class.ResizeArrayRaw, ptr %582, i64 0, i32 3
  %588 = load i32, ptr %587, align 4, !tbaa !30
  %589 = icmp slt i32 %588, %212
  br i1 %589, label %590, label %624

590:                                              ; preds = %586
  %591 = sitofp i32 %588 to float
  %592 = getelementptr inbounds %class.ResizeArrayRaw, ptr %582, i64 0, i32 5
  %593 = load float, ptr %592, align 4, !tbaa !31
  %594 = fmul float %593, %591
  %595 = fptosi float %594 to i32
  %596 = tail call i32 @llvm.smax.i32(i32 %595, i32 %212)
  %597 = sub nsw i32 %596, %588
  %598 = getelementptr inbounds %class.ResizeArrayRaw, ptr %582, i64 0, i32 6
  %599 = load i32, ptr %598, align 8, !tbaa !32
  %600 = icmp slt i32 %597, %599
  %601 = add nsw i32 %599, %588
  %602 = select i1 %600, i32 %601, i32 %596
  %603 = sext i32 %602 to i64
  %604 = shl nsw i64 %603, 1
  %605 = add nsw i64 %604, 31
  %606 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %605) #12
  %607 = getelementptr inbounds i8, ptr %606, i64 31
  %608 = ptrtoint ptr %607 to i64
  %609 = and i64 %608, 31
  %610 = sub nsw i64 0, %609
  %611 = getelementptr inbounds i8, ptr %607, i64 %610
  %612 = load ptr, ptr %582, align 8, !tbaa !33
  %613 = sext i32 %584 to i64
  %614 = shl nsw i64 %613, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %611, ptr align 1 %612, i64 %614, i1 false)
  %615 = icmp eq i32 %588, 0
  br i1 %615, label %621, label %616

616:                                              ; preds = %590
  %617 = getelementptr inbounds %class.ResizeArrayRaw, ptr %582, i64 0, i32 1
  %618 = load ptr, ptr %617, align 8, !tbaa !34
  %619 = icmp eq ptr %618, null
  br i1 %619, label %621, label %620

620:                                              ; preds = %616
  tail call void @_ZdaPv(ptr noundef nonnull %618) #13
  br label %621

621:                                              ; preds = %620, %616, %590
  %622 = getelementptr inbounds %class.ResizeArrayRaw, ptr %582, i64 0, i32 1
  store ptr %606, ptr %622, align 8, !tbaa !34
  store ptr %611, ptr %582, align 8, !tbaa !33
  store i32 %602, ptr %587, align 4, !tbaa !30
  %623 = load ptr, ptr %581, align 8, !tbaa !25
  br label %624

624:                                              ; preds = %578, %586, %621
  %625 = phi ptr [ %582, %578 ], [ %582, %586 ], [ %623, %621 ]
  store i32 %212, ptr %583, align 8, !tbaa !27
  %626 = load ptr, ptr %625, align 8, !tbaa !33
  %627 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %114, i64 0, i32 11, i32 1
  %628 = load ptr, ptr %627, align 8, !tbaa !25
  %629 = getelementptr inbounds %class.ResizeArrayRaw, ptr %628, i64 0, i32 2
  %630 = load i32, ptr %629, align 8, !tbaa !27
  %631 = icmp slt i32 %630, %212
  br i1 %631, label %632, label %670

632:                                              ; preds = %624
  %633 = getelementptr inbounds %class.ResizeArrayRaw, ptr %628, i64 0, i32 3
  %634 = load i32, ptr %633, align 4, !tbaa !30
  %635 = icmp slt i32 %634, %212
  br i1 %635, label %636, label %670

636:                                              ; preds = %632
  %637 = sitofp i32 %634 to float
  %638 = getelementptr inbounds %class.ResizeArrayRaw, ptr %628, i64 0, i32 5
  %639 = load float, ptr %638, align 4, !tbaa !31
  %640 = fmul float %639, %637
  %641 = fptosi float %640 to i32
  %642 = tail call i32 @llvm.smax.i32(i32 %641, i32 %212)
  %643 = sub nsw i32 %642, %634
  %644 = getelementptr inbounds %class.ResizeArrayRaw, ptr %628, i64 0, i32 6
  %645 = load i32, ptr %644, align 8, !tbaa !32
  %646 = icmp slt i32 %643, %645
  %647 = add nsw i32 %645, %634
  %648 = select i1 %646, i32 %647, i32 %642
  %649 = sext i32 %648 to i64
  %650 = shl nsw i64 %649, 1
  %651 = add nsw i64 %650, 31
  %652 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %651) #12
  %653 = getelementptr inbounds i8, ptr %652, i64 31
  %654 = ptrtoint ptr %653 to i64
  %655 = and i64 %654, 31
  %656 = sub nsw i64 0, %655
  %657 = getelementptr inbounds i8, ptr %653, i64 %656
  %658 = load ptr, ptr %628, align 8, !tbaa !33
  %659 = sext i32 %630 to i64
  %660 = shl nsw i64 %659, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %657, ptr align 1 %658, i64 %660, i1 false)
  %661 = icmp eq i32 %634, 0
  br i1 %661, label %667, label %662

662:                                              ; preds = %636
  %663 = getelementptr inbounds %class.ResizeArrayRaw, ptr %628, i64 0, i32 1
  %664 = load ptr, ptr %663, align 8, !tbaa !34
  %665 = icmp eq ptr %664, null
  br i1 %665, label %667, label %666

666:                                              ; preds = %662
  tail call void @_ZdaPv(ptr noundef nonnull %664) #13
  br label %667

667:                                              ; preds = %666, %662, %636
  %668 = getelementptr inbounds %class.ResizeArrayRaw, ptr %628, i64 0, i32 1
  store ptr %652, ptr %668, align 8, !tbaa !34
  store ptr %657, ptr %628, align 8, !tbaa !33
  store i32 %648, ptr %633, align 4, !tbaa !30
  %669 = load ptr, ptr %627, align 8, !tbaa !25
  br label %670

670:                                              ; preds = %624, %632, %667
  %671 = phi ptr [ %628, %624 ], [ %628, %632 ], [ %669, %667 ]
  store i32 %212, ptr %629, align 8, !tbaa !27
  %672 = load ptr, ptr %671, align 8, !tbaa !33
  %673 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %114, i64 0, i32 12, i32 1
  %674 = load ptr, ptr %673, align 8, !tbaa !25
  %675 = getelementptr inbounds %class.ResizeArrayRaw, ptr %674, i64 0, i32 2
  %676 = load i32, ptr %675, align 8, !tbaa !27
  %677 = icmp slt i32 %676, %212
  br i1 %677, label %678, label %716

678:                                              ; preds = %670
  %679 = getelementptr inbounds %class.ResizeArrayRaw, ptr %674, i64 0, i32 3
  %680 = load i32, ptr %679, align 4, !tbaa !30
  %681 = icmp slt i32 %680, %212
  br i1 %681, label %682, label %716

682:                                              ; preds = %678
  %683 = sitofp i32 %680 to float
  %684 = getelementptr inbounds %class.ResizeArrayRaw, ptr %674, i64 0, i32 5
  %685 = load float, ptr %684, align 4, !tbaa !31
  %686 = fmul float %685, %683
  %687 = fptosi float %686 to i32
  %688 = tail call i32 @llvm.smax.i32(i32 %687, i32 %212)
  %689 = sub nsw i32 %688, %680
  %690 = getelementptr inbounds %class.ResizeArrayRaw, ptr %674, i64 0, i32 6
  %691 = load i32, ptr %690, align 8, !tbaa !32
  %692 = icmp slt i32 %689, %691
  %693 = add nsw i32 %691, %680
  %694 = select i1 %692, i32 %693, i32 %688
  %695 = sext i32 %694 to i64
  %696 = shl nsw i64 %695, 1
  %697 = add nsw i64 %696, 31
  %698 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %697) #12
  %699 = getelementptr inbounds i8, ptr %698, i64 31
  %700 = ptrtoint ptr %699 to i64
  %701 = and i64 %700, 31
  %702 = sub nsw i64 0, %701
  %703 = getelementptr inbounds i8, ptr %699, i64 %702
  %704 = load ptr, ptr %674, align 8, !tbaa !33
  %705 = sext i32 %676 to i64
  %706 = shl nsw i64 %705, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %703, ptr align 1 %704, i64 %706, i1 false)
  %707 = icmp eq i32 %680, 0
  br i1 %707, label %713, label %708

708:                                              ; preds = %682
  %709 = getelementptr inbounds %class.ResizeArrayRaw, ptr %674, i64 0, i32 1
  %710 = load ptr, ptr %709, align 8, !tbaa !34
  %711 = icmp eq ptr %710, null
  br i1 %711, label %713, label %712

712:                                              ; preds = %708
  tail call void @_ZdaPv(ptr noundef nonnull %710) #13
  br label %713

713:                                              ; preds = %712, %708, %682
  %714 = getelementptr inbounds %class.ResizeArrayRaw, ptr %674, i64 0, i32 1
  store ptr %698, ptr %714, align 8, !tbaa !34
  store ptr %703, ptr %674, align 8, !tbaa !33
  store i32 %694, ptr %679, align 4, !tbaa !30
  %715 = load ptr, ptr %673, align 8, !tbaa !25
  br label %716

716:                                              ; preds = %670, %678, %713
  %717 = phi ptr [ %674, %670 ], [ %674, %678 ], [ %715, %713 ]
  store i32 %212, ptr %675, align 8, !tbaa !27
  %718 = load ptr, ptr %717, align 8, !tbaa !33
  %719 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %114, i64 0, i32 13, i32 1
  %720 = load ptr, ptr %719, align 8, !tbaa !25
  %721 = getelementptr inbounds %class.ResizeArrayRaw, ptr %720, i64 0, i32 2
  %722 = load i32, ptr %721, align 8, !tbaa !27
  %723 = icmp slt i32 %722, %212
  br i1 %723, label %724, label %762

724:                                              ; preds = %716
  %725 = getelementptr inbounds %class.ResizeArrayRaw, ptr %720, i64 0, i32 3
  %726 = load i32, ptr %725, align 4, !tbaa !30
  %727 = icmp slt i32 %726, %212
  br i1 %727, label %728, label %762

728:                                              ; preds = %724
  %729 = sitofp i32 %726 to float
  %730 = getelementptr inbounds %class.ResizeArrayRaw, ptr %720, i64 0, i32 5
  %731 = load float, ptr %730, align 4, !tbaa !31
  %732 = fmul float %731, %729
  %733 = fptosi float %732 to i32
  %734 = tail call i32 @llvm.smax.i32(i32 %733, i32 %212)
  %735 = sub nsw i32 %734, %726
  %736 = getelementptr inbounds %class.ResizeArrayRaw, ptr %720, i64 0, i32 6
  %737 = load i32, ptr %736, align 8, !tbaa !32
  %738 = icmp slt i32 %735, %737
  %739 = add nsw i32 %737, %726
  %740 = select i1 %738, i32 %739, i32 %734
  %741 = sext i32 %740 to i64
  %742 = shl nsw i64 %741, 1
  %743 = add nsw i64 %742, 31
  %744 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %743) #12
  %745 = getelementptr inbounds i8, ptr %744, i64 31
  %746 = ptrtoint ptr %745 to i64
  %747 = and i64 %746, 31
  %748 = sub nsw i64 0, %747
  %749 = getelementptr inbounds i8, ptr %745, i64 %748
  %750 = load ptr, ptr %720, align 8, !tbaa !33
  %751 = sext i32 %722 to i64
  %752 = shl nsw i64 %751, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %749, ptr align 1 %750, i64 %752, i1 false)
  %753 = icmp eq i32 %726, 0
  br i1 %753, label %759, label %754

754:                                              ; preds = %728
  %755 = getelementptr inbounds %class.ResizeArrayRaw, ptr %720, i64 0, i32 1
  %756 = load ptr, ptr %755, align 8, !tbaa !34
  %757 = icmp eq ptr %756, null
  br i1 %757, label %759, label %758

758:                                              ; preds = %754
  tail call void @_ZdaPv(ptr noundef nonnull %756) #13
  br label %759

759:                                              ; preds = %758, %754, %728
  %760 = getelementptr inbounds %class.ResizeArrayRaw, ptr %720, i64 0, i32 1
  store ptr %744, ptr %760, align 8, !tbaa !34
  store ptr %749, ptr %720, align 8, !tbaa !33
  store i32 %740, ptr %725, align 4, !tbaa !30
  %761 = load ptr, ptr %719, align 8, !tbaa !25
  br label %762

762:                                              ; preds = %716, %724, %759
  %763 = phi ptr [ %720, %716 ], [ %720, %724 ], [ %761, %759 ]
  store i32 %212, ptr %721, align 8, !tbaa !27
  %764 = load ptr, ptr %763, align 8, !tbaa !33
  %765 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %114, i64 0, i32 14, i32 1
  %766 = load ptr, ptr %765, align 8, !tbaa !25
  %767 = getelementptr inbounds %class.ResizeArrayRaw, ptr %766, i64 0, i32 2
  %768 = load i32, ptr %767, align 8, !tbaa !27
  %769 = icmp slt i32 %768, %212
  br i1 %769, label %770, label %808

770:                                              ; preds = %762
  %771 = getelementptr inbounds %class.ResizeArrayRaw, ptr %766, i64 0, i32 3
  %772 = load i32, ptr %771, align 4, !tbaa !30
  %773 = icmp slt i32 %772, %212
  br i1 %773, label %774, label %808

774:                                              ; preds = %770
  %775 = sitofp i32 %772 to float
  %776 = getelementptr inbounds %class.ResizeArrayRaw, ptr %766, i64 0, i32 5
  %777 = load float, ptr %776, align 4, !tbaa !31
  %778 = fmul float %777, %775
  %779 = fptosi float %778 to i32
  %780 = tail call i32 @llvm.smax.i32(i32 %779, i32 %212)
  %781 = sub nsw i32 %780, %772
  %782 = getelementptr inbounds %class.ResizeArrayRaw, ptr %766, i64 0, i32 6
  %783 = load i32, ptr %782, align 8, !tbaa !32
  %784 = icmp slt i32 %781, %783
  %785 = add nsw i32 %783, %772
  %786 = select i1 %784, i32 %785, i32 %780
  %787 = sext i32 %786 to i64
  %788 = shl nsw i64 %787, 1
  %789 = add nsw i64 %788, 31
  %790 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %789) #12
  %791 = getelementptr inbounds i8, ptr %790, i64 31
  %792 = ptrtoint ptr %791 to i64
  %793 = and i64 %792, 31
  %794 = sub nsw i64 0, %793
  %795 = getelementptr inbounds i8, ptr %791, i64 %794
  %796 = load ptr, ptr %766, align 8, !tbaa !33
  %797 = sext i32 %768 to i64
  %798 = shl nsw i64 %797, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %795, ptr align 1 %796, i64 %798, i1 false)
  %799 = icmp eq i32 %772, 0
  br i1 %799, label %805, label %800

800:                                              ; preds = %774
  %801 = getelementptr inbounds %class.ResizeArrayRaw, ptr %766, i64 0, i32 1
  %802 = load ptr, ptr %801, align 8, !tbaa !34
  %803 = icmp eq ptr %802, null
  br i1 %803, label %805, label %804

804:                                              ; preds = %800
  tail call void @_ZdaPv(ptr noundef nonnull %802) #13
  br label %805

805:                                              ; preds = %804, %800, %774
  %806 = getelementptr inbounds %class.ResizeArrayRaw, ptr %766, i64 0, i32 1
  store ptr %790, ptr %806, align 8, !tbaa !34
  store ptr %795, ptr %766, align 8, !tbaa !33
  store i32 %786, ptr %771, align 4, !tbaa !30
  %807 = load ptr, ptr %765, align 8, !tbaa !25
  br label %808

808:                                              ; preds = %762, %770, %805
  %809 = phi ptr [ %766, %762 ], [ %766, %770 ], [ %807, %805 ]
  store i32 %212, ptr %767, align 8, !tbaa !27
  %810 = load ptr, ptr %809, align 8, !tbaa !33
  br i1 %211, label %952, label %811

811:                                              ; preds = %808
  %812 = icmp sgt i32 %105, 0
  br i1 %812, label %813, label %943

813:                                              ; preds = %811
  %814 = zext i32 %105 to i64
  %815 = and i64 %814, 1
  %816 = icmp eq i32 %105, 1
  br i1 %816, label %849, label %817

817:                                              ; preds = %813
  %818 = and i64 %814, 4294967294
  br label %819

819:                                              ; preds = %844, %817
  %820 = phi i64 [ 0, %817 ], [ %846, %844 ]
  %821 = phi i32 [ 0, %817 ], [ %845, %844 ]
  %822 = phi i64 [ 0, %817 ], [ %847, %844 ]
  %823 = getelementptr inbounds %struct.CompAtom, ptr %108, i64 %820, i32 4
  %824 = load i8, ptr %823, align 1
  %825 = and i8 %824, 7
  %826 = icmp eq i8 %825, 0
  br i1 %826, label %832, label %827

827:                                              ; preds = %819
  %828 = trunc i64 %820 to i16
  %829 = add nsw i32 %821, 1
  %830 = sext i32 %821 to i64
  %831 = getelementptr inbounds i16, ptr %258, i64 %830
  store i16 %828, ptr %831, align 2, !tbaa !44
  br label %832

832:                                              ; preds = %819, %827
  %833 = phi i32 [ %829, %827 ], [ %821, %819 ]
  %834 = or i64 %820, 1
  %835 = getelementptr inbounds %struct.CompAtom, ptr %108, i64 %834, i32 4
  %836 = load i8, ptr %835, align 1
  %837 = and i8 %836, 7
  %838 = icmp eq i8 %837, 0
  br i1 %838, label %844, label %839

839:                                              ; preds = %832
  %840 = trunc i64 %834 to i16
  %841 = add nsw i32 %833, 1
  %842 = sext i32 %833 to i64
  %843 = getelementptr inbounds i16, ptr %258, i64 %842
  store i16 %840, ptr %843, align 2, !tbaa !44
  br label %844

844:                                              ; preds = %839, %832
  %845 = phi i32 [ %841, %839 ], [ %833, %832 ]
  %846 = add nuw nsw i64 %820, 2
  %847 = add i64 %822, 2
  %848 = icmp eq i64 %847, %818
  br i1 %848, label %849, label %819

849:                                              ; preds = %844, %813
  %850 = phi i32 [ undef, %813 ], [ %845, %844 ]
  %851 = phi i64 [ 0, %813 ], [ %846, %844 ]
  %852 = phi i32 [ 0, %813 ], [ %845, %844 ]
  %853 = icmp eq i64 %815, 0
  br i1 %853, label %864, label %854

854:                                              ; preds = %849
  %855 = getelementptr inbounds %struct.CompAtom, ptr %108, i64 %851, i32 4
  %856 = load i8, ptr %855, align 1
  %857 = and i8 %856, 7
  %858 = icmp eq i8 %857, 0
  br i1 %858, label %864, label %859

859:                                              ; preds = %854
  %860 = trunc i64 %851 to i16
  %861 = add nsw i32 %852, 1
  %862 = sext i32 %852 to i64
  %863 = getelementptr inbounds i16, ptr %258, i64 %862
  store i16 %860, ptr %863, align 2, !tbaa !44
  br label %864

864:                                              ; preds = %854, %859, %849
  %865 = phi i32 [ %850, %849 ], [ %861, %859 ], [ %852, %854 ]
  %866 = icmp eq i32 %865, 0
  br i1 %866, label %874, label %867

867:                                              ; preds = %864
  %868 = add nsw i32 %865, -1
  %869 = sext i32 %868 to i64
  %870 = getelementptr inbounds i16, ptr %258, i64 %869
  %871 = load i16, ptr %870, align 2, !tbaa !44
  %872 = sext i32 %865 to i64
  %873 = getelementptr inbounds i16, ptr %258, i64 %872
  store i16 %871, ptr %873, align 2, !tbaa !44
  br label %874

874:                                              ; preds = %867, %864
  %875 = load i32, ptr @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4, !tbaa !5
  %876 = icmp ne i32 %875, 0
  %877 = icmp sgt i32 %865, 0
  %878 = and i1 %876, %877
  br i1 %878, label %879, label %943

879:                                              ; preds = %874
  %880 = zext i32 %865 to i64
  %881 = and i64 %880, 1
  %882 = icmp eq i32 %865, 1
  br i1 %882, label %917, label %883

883:                                              ; preds = %879
  %884 = and i64 %880, 4294967294
  br label %885

885:                                              ; preds = %912, %883
  %886 = phi i64 [ 0, %883 ], [ %914, %912 ]
  %887 = phi i32 [ 0, %883 ], [ %913, %912 ]
  %888 = phi i64 [ 0, %883 ], [ %915, %912 ]
  %889 = getelementptr inbounds i16, ptr %258, i64 %886
  %890 = load i16, ptr %889, align 2, !tbaa !44
  %891 = zext i16 %890 to i64
  %892 = getelementptr inbounds %struct.CompAtomExt, ptr %112, i64 %891
  %893 = load i32, ptr %892, align 4
  %894 = icmp sgt i32 %893, -1
  br i1 %894, label %895, label %899

895:                                              ; preds = %885
  %896 = add nsw i32 %887, 1
  %897 = sext i32 %887 to i64
  %898 = getelementptr inbounds i16, ptr %304, i64 %897
  store i16 %890, ptr %898, align 2, !tbaa !44
  br label %899

899:                                              ; preds = %885, %895
  %900 = phi i32 [ %887, %885 ], [ %896, %895 ]
  %901 = or i64 %886, 1
  %902 = getelementptr inbounds i16, ptr %258, i64 %901
  %903 = load i16, ptr %902, align 2, !tbaa !44
  %904 = zext i16 %903 to i64
  %905 = getelementptr inbounds %struct.CompAtomExt, ptr %112, i64 %904
  %906 = load i32, ptr %905, align 4
  %907 = icmp sgt i32 %906, -1
  br i1 %907, label %908, label %912

908:                                              ; preds = %899
  %909 = add nsw i32 %900, 1
  %910 = sext i32 %900 to i64
  %911 = getelementptr inbounds i16, ptr %304, i64 %910
  store i16 %903, ptr %911, align 2, !tbaa !44
  br label %912

912:                                              ; preds = %908, %899
  %913 = phi i32 [ %900, %899 ], [ %909, %908 ]
  %914 = add nuw nsw i64 %886, 2
  %915 = add i64 %888, 2
  %916 = icmp eq i64 %915, %884
  br i1 %916, label %917, label %885

917:                                              ; preds = %912, %879
  %918 = phi i32 [ undef, %879 ], [ %913, %912 ]
  %919 = phi i64 [ 0, %879 ], [ %914, %912 ]
  %920 = phi i32 [ 0, %879 ], [ %913, %912 ]
  %921 = icmp eq i64 %881, 0
  br i1 %921, label %933, label %922

922:                                              ; preds = %917
  %923 = getelementptr inbounds i16, ptr %258, i64 %919
  %924 = load i16, ptr %923, align 2, !tbaa !44
  %925 = zext i16 %924 to i64
  %926 = getelementptr inbounds %struct.CompAtomExt, ptr %112, i64 %925
  %927 = load i32, ptr %926, align 4
  %928 = icmp sgt i32 %927, -1
  br i1 %928, label %929, label %933

929:                                              ; preds = %922
  %930 = add nsw i32 %920, 1
  %931 = sext i32 %920 to i64
  %932 = getelementptr inbounds i16, ptr %304, i64 %931
  store i16 %924, ptr %932, align 2, !tbaa !44
  br label %933

933:                                              ; preds = %922, %929, %917
  %934 = phi i32 [ %918, %917 ], [ %920, %922 ], [ %930, %929 ]
  %935 = icmp eq i32 %934, 0
  br i1 %935, label %943, label %936

936:                                              ; preds = %933
  %937 = add nsw i32 %934, -1
  %938 = sext i32 %937 to i64
  %939 = getelementptr inbounds i16, ptr %304, i64 %938
  %940 = load i16, ptr %939, align 2, !tbaa !44
  %941 = sext i32 %934 to i64
  %942 = getelementptr inbounds i16, ptr %304, i64 %941
  store i16 %940, ptr %942, align 2, !tbaa !44
  br label %943

943:                                              ; preds = %811, %874, %936, %933
  %944 = phi i32 [ %865, %936 ], [ %865, %933 ], [ %865, %874 ], [ 0, %811 ]
  %945 = phi i32 [ %934, %936 ], [ 0, %933 ], [ 0, %874 ], [ 0, %811 ]
  %946 = load i32, ptr %17, align 8, !tbaa !17
  %947 = add nsw i32 %946, 1
  store i32 %947, ptr %17, align 8, !tbaa !17
  %948 = trunc i32 %103 to i16
  %949 = load ptr, ptr %12, align 8, !tbaa !46
  %950 = sext i32 %946 to i64
  %951 = getelementptr inbounds i16, ptr %949, i64 %950
  store i16 %948, ptr %951, align 2, !tbaa !44
  br label %962

952:                                              ; preds = %808
  %953 = load ptr, ptr %12, align 8, !tbaa !46
  %954 = load i32, ptr %17, align 8, !tbaa !17
  %955 = add nsw i32 %954, 1
  store i32 %955, ptr %17, align 8, !tbaa !17
  %956 = sext i32 %954 to i64
  %957 = getelementptr inbounds i16, ptr %953, i64 %956
  %958 = load i16, ptr %957, align 2, !tbaa !44
  %959 = zext i16 %958 to i32
  %960 = icmp eq i32 %103, %959
  br i1 %960, label %962, label %961

961:                                              ; preds = %952
  tail call void @_Z8NAMD_bugPKc(ptr noundef nonnull @.str)
  br label %962

962:                                              ; preds = %952, %961, %943
  %963 = phi i32 [ 0, %961 ], [ 0, %952 ], [ %944, %943 ]
  %964 = phi i32 [ 0, %961 ], [ 0, %952 ], [ %945, %943 ]
  %965 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 3
  %966 = load ptr, ptr %965, align 8, !tbaa !23
  %967 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 3, i64 1
  %968 = load ptr, ptr %967, align 8, !tbaa !23
  %969 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 4
  %970 = load ptr, ptr %969, align 8, !tbaa !23
  %971 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 4, i64 1
  %972 = load ptr, ptr %971, align 8, !tbaa !23
  %973 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 18
  %974 = load i32, ptr %973, align 4, !tbaa !48
  %975 = add nsw i32 %974, -1
  %976 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 16
  %977 = load i32, ptr %976, align 4, !tbaa !47
  br i1 %211, label %980, label %978

978:                                              ; preds = %962
  %979 = load i32, ptr %17, align 8, !tbaa !17
  br label %987

980:                                              ; preds = %962
  %981 = load ptr, ptr %12, align 8, !tbaa !46
  %982 = load i32, ptr %17, align 8, !tbaa !17
  %983 = sext i32 %982 to i64
  %984 = getelementptr inbounds i16, ptr %981, i64 %983
  %985 = load i16, ptr %984, align 2, !tbaa !44
  %986 = zext i16 %985 to i32
  br label %987

987:                                              ; preds = %980, %978
  %988 = phi i32 [ %982, %980 ], [ %979, %978 ]
  %989 = phi i32 [ %986, %980 ], [ 0, %978 ]
  %990 = add nsw i32 %988, 1
  store i32 %990, ptr %17, align 8
  %991 = icmp slt i32 %989, %103
  br i1 %991, label %992, label %4562

992:                                              ; preds = %987
  %993 = getelementptr inbounds %class.Molecule, ptr %30, i64 0, i32 1
  %994 = getelementptr inbounds %class.Molecule, ptr %30, i64 0, i32 4
  %995 = getelementptr inbounds %class.Molecule, ptr %30, i64 0, i32 2
  %996 = getelementptr inbounds %class.Molecule, ptr %30, i64 0, i32 3
  %997 = ptrtoint ptr %488 to i64
  %998 = add nsw i32 %105, 30
  %999 = getelementptr inbounds %class.Pairlists, ptr %12, i64 0, i32 2
  %1000 = getelementptr inbounds i16, ptr %488, i64 1
  %1001 = ptrtoint ptr %534 to i64
  %1002 = ptrtoint ptr %396 to i64
  %1003 = ptrtoint ptr %442 to i64
  %1004 = ptrtoint ptr %580 to i64
  %1005 = ptrtoint ptr %626 to i64
  %1006 = ptrtoint ptr %672 to i64
  %1007 = ptrtoint ptr %718 to i64
  %1008 = ptrtoint ptr %764 to i64
  %1009 = ptrtoint ptr %810 to i64
  %1010 = getelementptr inbounds %class.LJTable, ptr %29, i64 0, i32 1
  %1011 = getelementptr inbounds %class.LJTable, ptr %29, i64 0, i32 2
  %1012 = fneg double %33
  %1013 = fsub double 1.000000e+00, %35
  %1014 = fmul double %35, 2.000000e+00
  %1015 = fmul double %35, 4.000000e+00
  %1016 = fmul double %35, 6.000000e+00
  %1017 = fneg <2 x double> %75
  %1018 = fneg <2 x double> %86
  %1019 = insertelement <2 x double> poison, double %27, i64 0
  %1020 = shufflevector <2 x double> %1019, <2 x double> poison, <2 x i32> zeroinitializer
  %1021 = extractelement <2 x double> %75, i64 1
  %1022 = extractelement <2 x double> %86, i64 1
  %1023 = extractelement <2 x double> %75, i64 1
  %1024 = extractelement <2 x double> %86, i64 1
  %1025 = extractelement <2 x double> %75, i64 1
  %1026 = extractelement <2 x double> %86, i64 1
  br label %1027

1027:                                             ; preds = %992, %4544
  %1028 = phi i32 [ 0, %992 ], [ %4553, %4544 ]
  %1029 = phi double [ 0.000000e+00, %992 ], [ %4552, %4544 ]
  %1030 = phi double [ 0.000000e+00, %992 ], [ %4551, %4544 ]
  %1031 = phi i32 [ %989, %992 ], [ %4550, %4544 ]
  %1032 = phi ptr [ null, %992 ], [ %4549, %4544 ]
  %1033 = phi ptr [ null, %992 ], [ %4548, %4544 ]
  %1034 = phi ptr [ null, %992 ], [ %4547, %4544 ]
  %1035 = phi i32 [ 0, %992 ], [ %4546, %4544 ]
  %1036 = phi i32 [ %977, %992 ], [ %4545, %4544 ]
  %1037 = phi <4 x double> [ zeroinitializer, %992 ], [ %4554, %4544 ]
  %1038 = phi <2 x double> [ zeroinitializer, %992 ], [ %4555, %4544 ]
  %1039 = phi <2 x double> [ zeroinitializer, %992 ], [ %4556, %4544 ]
  %1040 = phi <2 x double> [ zeroinitializer, %992 ], [ %4557, %4544 ]
  %1041 = phi <2 x double> [ zeroinitializer, %992 ], [ %4558, %4544 ]
  %1042 = phi <2 x double> [ zeroinitializer, %992 ], [ %4559, %4544 ]
  %1043 = phi <2 x double> [ zeroinitializer, %992 ], [ %4560, %4544 ]
  %1044 = sext i32 %1031 to i64
  %1045 = getelementptr inbounds %struct.CompAtom, ptr %106, i64 %1044
  %1046 = getelementptr inbounds %struct.CompAtomExt, ptr %110, i64 %1044
  br i1 %211, label %1059, label %1047

1047:                                             ; preds = %1027
  %1048 = getelementptr inbounds %struct.CompAtom, ptr %106, i64 %1044, i32 4
  %1049 = load i8, ptr %1048, align 1
  %1050 = lshr i8 %1049, 3
  %1051 = and i8 %1050, 15
  %1052 = zext i8 %1051 to i32
  %1053 = icmp eq i8 %1051, 0
  br i1 %1053, label %1059, label %1054

1054:                                             ; preds = %1047
  %1055 = icmp eq i32 %1036, 0
  br i1 %1055, label %1059, label %1056

1056:                                             ; preds = %1054
  %1057 = add nsw i32 %1036, -1
  %1058 = add nsw i32 %1031, %1052
  br label %4544

1059:                                             ; preds = %1054, %1047, %1027
  %1060 = phi i32 [ %1036, %1027 ], [ %1036, %1047 ], [ %975, %1054 ]
  %1061 = load double, ptr %1045, align 8, !tbaa !68
  %1062 = fadd double %19, %1061
  %1063 = getelementptr inbounds %class.Vector, ptr %1045, i64 0, i32 1
  %1064 = load <2 x double>, ptr %1063, align 8, !tbaa !19
  %1065 = fadd <2 x double> %21, %1064
  %1066 = getelementptr inbounds %struct.CompAtom, ptr %106, i64 %1044, i32 3
  %1067 = load i8, ptr %1066, align 2, !tbaa !51
  %1068 = zext i8 %1067 to i32
  br i1 %211, label %2861, label %1069

1069:                                             ; preds = %1059
  %1070 = load i32, ptr %1046, align 4
  %1071 = shl i32 %1070, 2
  %1072 = ashr exact i32 %1071, 2
  %1073 = load ptr, ptr %993, align 8, !tbaa !52
  %1074 = sext i32 %1072 to i64
  %1075 = getelementptr inbounds %class.ExclusionCheck, ptr %1073, i64 %1074
  %1076 = load i32, ptr %1075, align 8, !tbaa !54
  %1077 = getelementptr inbounds %class.ExclusionCheck, ptr %1073, i64 %1074, i32 1
  %1078 = load i32, ptr %1077, align 4, !tbaa !56
  %1079 = getelementptr inbounds %class.ExclusionCheck, ptr %1073, i64 %1074, i32 2
  %1080 = load ptr, ptr %1079, align 8, !tbaa !57
  %1081 = icmp eq ptr %1080, null
  br i1 %1081, label %1086, label %1082

1082:                                             ; preds = %1069
  %1083 = sext i32 %1076 to i64
  %1084 = sub nsw i64 0, %1083
  %1085 = getelementptr inbounds i8, ptr %1080, i64 %1084
  br label %1312

1086:                                             ; preds = %1069
  %1087 = icmp eq ptr %1032, null
  br i1 %1087, label %1175, label %1088

1088:                                             ; preds = %1086
  %1089 = load i32, ptr %1033, align 4, !tbaa !5
  %1090 = icmp slt i32 %1089, 1
  br i1 %1090, label %1138, label %1091

1091:                                             ; preds = %1088
  %1092 = add nuw i32 %1089, 1
  %1093 = zext i32 %1092 to i64
  %1094 = add nsw i64 %1093, -1
  %1095 = add nsw i64 %1093, -2
  %1096 = and i64 %1094, 3
  %1097 = icmp ult i64 %1095, 3
  br i1 %1097, label %1125, label %1098

1098:                                             ; preds = %1091
  %1099 = and i64 %1094, -4
  br label %1100

1100:                                             ; preds = %1100, %1098
  %1101 = phi i64 [ 1, %1098 ], [ %1122, %1100 ]
  %1102 = phi i64 [ 0, %1098 ], [ %1123, %1100 ]
  %1103 = getelementptr inbounds i32, ptr %1033, i64 %1101
  %1104 = load i32, ptr %1103, align 4, !tbaa !5
  %1105 = sext i32 %1104 to i64
  %1106 = getelementptr inbounds i8, ptr %1032, i64 %1105
  store i8 0, ptr %1106, align 1, !tbaa !58
  %1107 = add nuw nsw i64 %1101, 1
  %1108 = getelementptr inbounds i32, ptr %1033, i64 %1107
  %1109 = load i32, ptr %1108, align 4, !tbaa !5
  %1110 = sext i32 %1109 to i64
  %1111 = getelementptr inbounds i8, ptr %1032, i64 %1110
  store i8 0, ptr %1111, align 1, !tbaa !58
  %1112 = add nuw nsw i64 %1101, 2
  %1113 = getelementptr inbounds i32, ptr %1033, i64 %1112
  %1114 = load i32, ptr %1113, align 4, !tbaa !5
  %1115 = sext i32 %1114 to i64
  %1116 = getelementptr inbounds i8, ptr %1032, i64 %1115
  store i8 0, ptr %1116, align 1, !tbaa !58
  %1117 = add nuw nsw i64 %1101, 3
  %1118 = getelementptr inbounds i32, ptr %1033, i64 %1117
  %1119 = load i32, ptr %1118, align 4, !tbaa !5
  %1120 = sext i32 %1119 to i64
  %1121 = getelementptr inbounds i8, ptr %1032, i64 %1120
  store i8 0, ptr %1121, align 1, !tbaa !58
  %1122 = add nuw nsw i64 %1101, 4
  %1123 = add i64 %1102, 4
  %1124 = icmp eq i64 %1123, %1099
  br i1 %1124, label %1125, label %1100

1125:                                             ; preds = %1100, %1091
  %1126 = phi i64 [ 1, %1091 ], [ %1122, %1100 ]
  %1127 = icmp eq i64 %1096, 0
  br i1 %1127, label %1138, label %1128

1128:                                             ; preds = %1125, %1128
  %1129 = phi i64 [ %1135, %1128 ], [ %1126, %1125 ]
  %1130 = phi i64 [ %1136, %1128 ], [ 0, %1125 ]
  %1131 = getelementptr inbounds i32, ptr %1033, i64 %1129
  %1132 = load i32, ptr %1131, align 4, !tbaa !5
  %1133 = sext i32 %1132 to i64
  %1134 = getelementptr inbounds i8, ptr %1032, i64 %1133
  store i8 0, ptr %1134, align 1, !tbaa !58
  %1135 = add nuw nsw i64 %1129, 1
  %1136 = add i64 %1130, 1
  %1137 = icmp eq i64 %1136, %1096
  br i1 %1137, label %1138, label %1128, !llvm.loop !114

1138:                                             ; preds = %1125, %1128, %1088
  %1139 = load i32, ptr %1034, align 4, !tbaa !5
  %1140 = icmp slt i32 %1139, 1
  br i1 %1140, label %1195, label %1141

1141:                                             ; preds = %1138
  %1142 = add nuw i32 %1139, 1
  %1143 = zext i32 %1142 to i64
  %1144 = add nsw i64 %1143, -1
  %1145 = add nsw i64 %1143, -2
  %1146 = and i64 %1144, 3
  %1147 = icmp ult i64 %1145, 3
  br i1 %1147, label %1182, label %1148

1148:                                             ; preds = %1141
  %1149 = and i64 %1144, -4
  br label %1150

1150:                                             ; preds = %1150, %1148
  %1151 = phi i64 [ 1, %1148 ], [ %1172, %1150 ]
  %1152 = phi i64 [ 0, %1148 ], [ %1173, %1150 ]
  %1153 = getelementptr inbounds i32, ptr %1034, i64 %1151
  %1154 = load i32, ptr %1153, align 4, !tbaa !5
  %1155 = sext i32 %1154 to i64
  %1156 = getelementptr inbounds i8, ptr %1032, i64 %1155
  store i8 0, ptr %1156, align 1, !tbaa !58
  %1157 = add nuw nsw i64 %1151, 1
  %1158 = getelementptr inbounds i32, ptr %1034, i64 %1157
  %1159 = load i32, ptr %1158, align 4, !tbaa !5
  %1160 = sext i32 %1159 to i64
  %1161 = getelementptr inbounds i8, ptr %1032, i64 %1160
  store i8 0, ptr %1161, align 1, !tbaa !58
  %1162 = add nuw nsw i64 %1151, 2
  %1163 = getelementptr inbounds i32, ptr %1034, i64 %1162
  %1164 = load i32, ptr %1163, align 4, !tbaa !5
  %1165 = sext i32 %1164 to i64
  %1166 = getelementptr inbounds i8, ptr %1032, i64 %1165
  store i8 0, ptr %1166, align 1, !tbaa !58
  %1167 = add nuw nsw i64 %1151, 3
  %1168 = getelementptr inbounds i32, ptr %1034, i64 %1167
  %1169 = load i32, ptr %1168, align 4, !tbaa !5
  %1170 = sext i32 %1169 to i64
  %1171 = getelementptr inbounds i8, ptr %1032, i64 %1170
  store i8 0, ptr %1171, align 1, !tbaa !58
  %1172 = add nuw nsw i64 %1151, 4
  %1173 = add i64 %1152, 4
  %1174 = icmp eq i64 %1173, %1149
  br i1 %1174, label %1182, label %1150

1175:                                             ; preds = %1086
  %1176 = load i32, ptr %994, align 8, !tbaa !61
  %1177 = call i32 @llvm.smax.i32(i32 %1176, i32 -1)
  %1178 = sext i32 %1177 to i64
  %1179 = call noalias noundef nonnull ptr @_Znam(i64 noundef %1178) #12
  %1180 = load i32, ptr %994, align 8, !tbaa !61
  %1181 = sext i32 %1180 to i64
  call void @llvm.memset.p0.i64(ptr nonnull align 1 %1179, i8 0, i64 %1181, i1 false)
  br label %1195

1182:                                             ; preds = %1150, %1141
  %1183 = phi i64 [ 1, %1141 ], [ %1172, %1150 ]
  %1184 = icmp eq i64 %1146, 0
  br i1 %1184, label %1195, label %1185

1185:                                             ; preds = %1182, %1185
  %1186 = phi i64 [ %1192, %1185 ], [ %1183, %1182 ]
  %1187 = phi i64 [ %1193, %1185 ], [ 0, %1182 ]
  %1188 = getelementptr inbounds i32, ptr %1034, i64 %1186
  %1189 = load i32, ptr %1188, align 4, !tbaa !5
  %1190 = sext i32 %1189 to i64
  %1191 = getelementptr inbounds i8, ptr %1032, i64 %1190
  store i8 0, ptr %1191, align 1, !tbaa !58
  %1192 = add nuw nsw i64 %1186, 1
  %1193 = add i64 %1187, 1
  %1194 = icmp eq i64 %1193, %1146
  br i1 %1194, label %1195, label %1185, !llvm.loop !115

1195:                                             ; preds = %1182, %1185, %1138, %1175
  %1196 = phi ptr [ %1179, %1175 ], [ %1032, %1138 ], [ %1032, %1185 ], [ %1032, %1182 ]
  %1197 = load i32, ptr %1046, align 4
  %1198 = shl i32 %1197, 2
  %1199 = ashr exact i32 %1198, 2
  %1200 = load ptr, ptr %995, align 8, !tbaa !63
  %1201 = sext i32 %1199 to i64
  %1202 = getelementptr inbounds ptr, ptr %1200, i64 %1201
  %1203 = load ptr, ptr %1202, align 8, !tbaa !23
  %1204 = load i32, ptr %1203, align 4, !tbaa !5
  %1205 = icmp slt i32 %1204, 1
  br i1 %1205, label %1258, label %1206

1206:                                             ; preds = %1195
  %1207 = add nuw i32 %1204, 1
  %1208 = zext i32 %1207 to i64
  %1209 = add nsw i64 %1208, -1
  %1210 = add nsw i64 %1208, -2
  %1211 = and i64 %1209, 3
  %1212 = icmp ult i64 %1210, 3
  br i1 %1212, label %1240, label %1213

1213:                                             ; preds = %1206
  %1214 = and i64 %1209, -4
  br label %1215

1215:                                             ; preds = %1215, %1213
  %1216 = phi i64 [ 1, %1213 ], [ %1237, %1215 ]
  %1217 = phi i64 [ 0, %1213 ], [ %1238, %1215 ]
  %1218 = getelementptr inbounds i32, ptr %1203, i64 %1216
  %1219 = load i32, ptr %1218, align 4, !tbaa !5
  %1220 = sext i32 %1219 to i64
  %1221 = getelementptr inbounds i8, ptr %1196, i64 %1220
  store i8 1, ptr %1221, align 1, !tbaa !58
  %1222 = add nuw nsw i64 %1216, 1
  %1223 = getelementptr inbounds i32, ptr %1203, i64 %1222
  %1224 = load i32, ptr %1223, align 4, !tbaa !5
  %1225 = sext i32 %1224 to i64
  %1226 = getelementptr inbounds i8, ptr %1196, i64 %1225
  store i8 1, ptr %1226, align 1, !tbaa !58
  %1227 = add nuw nsw i64 %1216, 2
  %1228 = getelementptr inbounds i32, ptr %1203, i64 %1227
  %1229 = load i32, ptr %1228, align 4, !tbaa !5
  %1230 = sext i32 %1229 to i64
  %1231 = getelementptr inbounds i8, ptr %1196, i64 %1230
  store i8 1, ptr %1231, align 1, !tbaa !58
  %1232 = add nuw nsw i64 %1216, 3
  %1233 = getelementptr inbounds i32, ptr %1203, i64 %1232
  %1234 = load i32, ptr %1233, align 4, !tbaa !5
  %1235 = sext i32 %1234 to i64
  %1236 = getelementptr inbounds i8, ptr %1196, i64 %1235
  store i8 1, ptr %1236, align 1, !tbaa !58
  %1237 = add nuw nsw i64 %1216, 4
  %1238 = add i64 %1217, 4
  %1239 = icmp eq i64 %1238, %1214
  br i1 %1239, label %1240, label %1215

1240:                                             ; preds = %1215, %1206
  %1241 = phi i64 [ 1, %1206 ], [ %1237, %1215 ]
  %1242 = icmp eq i64 %1211, 0
  br i1 %1242, label %1253, label %1243

1243:                                             ; preds = %1240, %1243
  %1244 = phi i64 [ %1250, %1243 ], [ %1241, %1240 ]
  %1245 = phi i64 [ %1251, %1243 ], [ 0, %1240 ]
  %1246 = getelementptr inbounds i32, ptr %1203, i64 %1244
  %1247 = load i32, ptr %1246, align 4, !tbaa !5
  %1248 = sext i32 %1247 to i64
  %1249 = getelementptr inbounds i8, ptr %1196, i64 %1248
  store i8 1, ptr %1249, align 1, !tbaa !58
  %1250 = add nuw nsw i64 %1244, 1
  %1251 = add i64 %1245, 1
  %1252 = icmp eq i64 %1251, %1211
  br i1 %1252, label %1253, label %1243, !llvm.loop !116

1253:                                             ; preds = %1243, %1240
  %1254 = load i32, ptr %1046, align 4
  %1255 = shl i32 %1254, 2
  %1256 = ashr exact i32 %1255, 2
  %1257 = sext i32 %1256 to i64
  br label %1258

1258:                                             ; preds = %1253, %1195
  %1259 = phi i64 [ %1257, %1253 ], [ %1201, %1195 ]
  %1260 = load ptr, ptr %996, align 8, !tbaa !65
  %1261 = getelementptr inbounds ptr, ptr %1260, i64 %1259
  %1262 = load ptr, ptr %1261, align 8, !tbaa !23
  %1263 = load i32, ptr %1262, align 4, !tbaa !5
  %1264 = icmp slt i32 %1263, 1
  br i1 %1264, label %1312, label %1265

1265:                                             ; preds = %1258
  %1266 = add nuw i32 %1263, 1
  %1267 = zext i32 %1266 to i64
  %1268 = add nsw i64 %1267, -1
  %1269 = add nsw i64 %1267, -2
  %1270 = and i64 %1268, 3
  %1271 = icmp ult i64 %1269, 3
  br i1 %1271, label %1299, label %1272

1272:                                             ; preds = %1265
  %1273 = and i64 %1268, -4
  br label %1274

1274:                                             ; preds = %1274, %1272
  %1275 = phi i64 [ 1, %1272 ], [ %1296, %1274 ]
  %1276 = phi i64 [ 0, %1272 ], [ %1297, %1274 ]
  %1277 = getelementptr inbounds i32, ptr %1262, i64 %1275
  %1278 = load i32, ptr %1277, align 4, !tbaa !5
  %1279 = sext i32 %1278 to i64
  %1280 = getelementptr inbounds i8, ptr %1196, i64 %1279
  store i8 2, ptr %1280, align 1, !tbaa !58
  %1281 = add nuw nsw i64 %1275, 1
  %1282 = getelementptr inbounds i32, ptr %1262, i64 %1281
  %1283 = load i32, ptr %1282, align 4, !tbaa !5
  %1284 = sext i32 %1283 to i64
  %1285 = getelementptr inbounds i8, ptr %1196, i64 %1284
  store i8 2, ptr %1285, align 1, !tbaa !58
  %1286 = add nuw nsw i64 %1275, 2
  %1287 = getelementptr inbounds i32, ptr %1262, i64 %1286
  %1288 = load i32, ptr %1287, align 4, !tbaa !5
  %1289 = sext i32 %1288 to i64
  %1290 = getelementptr inbounds i8, ptr %1196, i64 %1289
  store i8 2, ptr %1290, align 1, !tbaa !58
  %1291 = add nuw nsw i64 %1275, 3
  %1292 = getelementptr inbounds i32, ptr %1262, i64 %1291
  %1293 = load i32, ptr %1292, align 4, !tbaa !5
  %1294 = sext i32 %1293 to i64
  %1295 = getelementptr inbounds i8, ptr %1196, i64 %1294
  store i8 2, ptr %1295, align 1, !tbaa !58
  %1296 = add nuw nsw i64 %1275, 4
  %1297 = add i64 %1276, 4
  %1298 = icmp eq i64 %1297, %1273
  br i1 %1298, label %1299, label %1274

1299:                                             ; preds = %1274, %1265
  %1300 = phi i64 [ 1, %1265 ], [ %1296, %1274 ]
  %1301 = icmp eq i64 %1270, 0
  br i1 %1301, label %1312, label %1302

1302:                                             ; preds = %1299, %1302
  %1303 = phi i64 [ %1309, %1302 ], [ %1300, %1299 ]
  %1304 = phi i64 [ %1310, %1302 ], [ 0, %1299 ]
  %1305 = getelementptr inbounds i32, ptr %1262, i64 %1303
  %1306 = load i32, ptr %1305, align 4, !tbaa !5
  %1307 = sext i32 %1306 to i64
  %1308 = getelementptr inbounds i8, ptr %1196, i64 %1307
  store i8 2, ptr %1308, align 1, !tbaa !58
  %1309 = add nuw nsw i64 %1303, 1
  %1310 = add i64 %1304, 1
  %1311 = icmp eq i64 %1310, %1270
  br i1 %1311, label %1312, label %1302, !llvm.loop !117

1312:                                             ; preds = %1299, %1302, %1258, %1082
  %1313 = phi ptr [ %1085, %1082 ], [ %1196, %1258 ], [ %1196, %1302 ], [ %1196, %1299 ]
  %1314 = phi ptr [ %1034, %1082 ], [ %1262, %1258 ], [ %1262, %1302 ], [ %1262, %1299 ]
  %1315 = phi ptr [ %1033, %1082 ], [ %1203, %1258 ], [ %1203, %1302 ], [ %1203, %1299 ]
  %1316 = phi ptr [ %1032, %1082 ], [ %1196, %1258 ], [ %1196, %1302 ], [ %1196, %1299 ]
  %1317 = getelementptr inbounds %struct.CompAtom, ptr %106, i64 %1044, i32 4
  %1318 = load i8, ptr %1317, align 1
  %1319 = and i8 %1318, 7
  %1320 = icmp eq i8 %1319, 0
  %1321 = load i32, ptr @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4, !tbaa !5
  br i1 %1320, label %1504, label %1322

1322:                                             ; preds = %1312
  %1323 = icmp eq i32 %1321, 0
  br i1 %1323, label %1330, label %1324

1324:                                             ; preds = %1322
  %1325 = load i32, ptr %1046, align 4
  %1326 = freeze i32 %1325
  %1327 = icmp slt i32 %1326, 0
  %1328 = select i1 %1327, ptr %304, ptr %258
  %1329 = select i1 %1327, i32 %964, i32 %963
  br label %1330

1330:                                             ; preds = %1324, %1322
  %1331 = phi ptr [ %258, %1322 ], [ %1328, %1324 ]
  %1332 = phi i32 [ %963, %1322 ], [ %1329, %1324 ]
  %1333 = icmp sgt i32 %1332, 0
  br i1 %1333, label %1334, label %1485

1334:                                             ; preds = %1330
  %1335 = icmp ugt i32 %1332, 6
  br i1 %1335, label %1336, label %1420

1336:                                             ; preds = %1334
  %1337 = add nsw i32 %1332, -2
  %1338 = getelementptr inbounds i16, ptr %1331, i64 1
  %1339 = load i16, ptr %1338, align 2, !tbaa !44
  %1340 = zext i16 %1339 to i64
  %1341 = getelementptr inbounds %struct.CompAtom, ptr %108, i64 %1340
  %1342 = getelementptr inbounds %class.Vector, ptr %1341, i64 0, i32 2
  %1343 = load double, ptr %1342, align 8, !tbaa !49
  %1344 = load i16, ptr %1331, align 2, !tbaa !44
  %1345 = zext i16 %1344 to i64
  %1346 = getelementptr inbounds %struct.CompAtom, ptr %108, i64 %1345
  %1347 = getelementptr inbounds %class.Vector, ptr %1346, i64 0, i32 2
  %1348 = load double, ptr %1347, align 8, !tbaa !49
  %1349 = getelementptr inbounds %class.Vector, ptr %1341, i64 0, i32 1
  %1350 = load double, ptr %1349, align 8, !tbaa !67
  %1351 = getelementptr inbounds %class.Vector, ptr %1346, i64 0, i32 1
  %1352 = load double, ptr %1351, align 8, !tbaa !67
  %1353 = load double, ptr %1341, align 8, !tbaa !68
  %1354 = load double, ptr %1346, align 8, !tbaa !68
  %1355 = zext i32 %1337 to i64
  %1356 = insertelement <2 x double> poison, double %1343, i64 0
  %1357 = insertelement <2 x double> %1356, double %1348, i64 1
  %1358 = insertelement <2 x double> poison, double %1350, i64 0
  %1359 = insertelement <2 x double> %1358, double %1352, i64 1
  %1360 = insertelement <2 x double> poison, double %1353, i64 0
  %1361 = insertelement <2 x double> %1360, double %1354, i64 1
  %1362 = shufflevector <2 x double> %1065, <2 x double> poison, <2 x i32> <i32 1, i32 1>
  %1363 = shufflevector <2 x double> %1065, <2 x double> poison, <2 x i32> zeroinitializer
  %1364 = insertelement <2 x double> poison, double %1062, i64 0
  %1365 = shufflevector <2 x double> %1364, <2 x double> poison, <2 x i32> zeroinitializer
  br label %1366

1366:                                             ; preds = %1336, %1366
  %1367 = phi i64 [ 2, %1336 ], [ %1410, %1366 ]
  %1368 = phi i32 [ 0, %1336 ], [ %1409, %1366 ]
  %1369 = phi i16 [ %1344, %1336 ], [ %1376, %1366 ]
  %1370 = phi i16 [ %1339, %1336 ], [ %1379, %1366 ]
  %1371 = phi <2 x double> [ %1357, %1336 ], [ %1413, %1366 ]
  %1372 = phi <2 x double> [ %1359, %1336 ], [ %1415, %1366 ]
  %1373 = phi <2 x double> [ %1361, %1336 ], [ %1417, %1366 ]
  %1374 = fsub <2 x double> %1365, %1373
  %1375 = getelementptr inbounds i16, ptr %1331, i64 %1367
  %1376 = load i16, ptr %1375, align 2, !tbaa !44
  %1377 = or i64 %1367, 1
  %1378 = getelementptr inbounds i16, ptr %1331, i64 %1377
  %1379 = load i16, ptr %1378, align 2, !tbaa !44
  %1380 = zext i16 %1376 to i64
  %1381 = getelementptr inbounds %struct.CompAtom, ptr %108, i64 %1380
  %1382 = load double, ptr %1381, align 8, !tbaa !68
  %1383 = zext i16 %1379 to i64
  %1384 = getelementptr inbounds %struct.CompAtom, ptr %108, i64 %1383
  %1385 = load double, ptr %1384, align 8, !tbaa !68
  %1386 = getelementptr inbounds %class.Vector, ptr %1381, i64 0, i32 1
  %1387 = load double, ptr %1386, align 8, !tbaa !67
  %1388 = getelementptr inbounds %class.Vector, ptr %1384, i64 0, i32 1
  %1389 = load double, ptr %1388, align 8, !tbaa !67
  %1390 = getelementptr inbounds %class.Vector, ptr %1381, i64 0, i32 2
  %1391 = load double, ptr %1390, align 8, !tbaa !49
  %1392 = getelementptr inbounds %class.Vector, ptr %1384, i64 0, i32 2
  %1393 = load double, ptr %1392, align 8, !tbaa !49
  %1394 = fmul <2 x double> %1374, %1374
  %1395 = fsub <2 x double> %1363, %1372
  %1396 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %1395, <2 x double> %1395, <2 x double> %1394)
  %1397 = fsub <2 x double> %1362, %1371
  %1398 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %1397, <2 x double> %1397, <2 x double> %1396)
  %1399 = fcmp olt <2 x double> %1398, %1020
  %1400 = zext i32 %1368 to i64
  %1401 = getelementptr inbounds i16, ptr %350, i64 %1400
  store i16 %1369, ptr %1401, align 2, !tbaa !44
  %1402 = extractelement <2 x i1> %1399, i64 1
  %1403 = zext i1 %1402 to i32
  %1404 = add nuw nsw i32 %1368, %1403
  %1405 = zext i32 %1404 to i64
  %1406 = getelementptr inbounds i16, ptr %350, i64 %1405
  store i16 %1370, ptr %1406, align 2, !tbaa !44
  %1407 = extractelement <2 x i1> %1399, i64 0
  %1408 = zext i1 %1407 to i32
  %1409 = add i32 %1404, %1408
  %1410 = add nuw nsw i64 %1367, 2
  %1411 = icmp ult i64 %1410, %1355
  %1412 = insertelement <2 x double> poison, double %1393, i64 0
  %1413 = insertelement <2 x double> %1412, double %1391, i64 1
  %1414 = insertelement <2 x double> poison, double %1389, i64 0
  %1415 = insertelement <2 x double> %1414, double %1387, i64 1
  %1416 = insertelement <2 x double> poison, double %1385, i64 0
  %1417 = insertelement <2 x double> %1416, double %1382, i64 1
  br i1 %1411, label %1366, label %1418

1418:                                             ; preds = %1366
  %1419 = trunc i64 %1367 to i32
  br label %1420

1420:                                             ; preds = %1418, %1334
  %1421 = phi i32 [ %1409, %1418 ], [ 0, %1334 ]
  %1422 = phi i32 [ %1419, %1418 ], [ 0, %1334 ]
  %1423 = icmp slt i32 %1422, %1332
  br i1 %1423, label %1424, label %1429

1424:                                             ; preds = %1420
  %1425 = zext i32 %1422 to i64
  %1426 = zext i32 %1332 to i64
  %1427 = extractelement <2 x double> %1065, i64 0
  %1428 = extractelement <2 x double> %1065, i64 1
  br label %1434

1429:                                             ; preds = %1457, %1420
  %1430 = phi i32 [ %1421, %1420 ], [ %1458, %1457 ]
  %1431 = icmp sgt i32 %1430, 0
  br i1 %1431, label %1432, label %1485

1432:                                             ; preds = %1429
  %1433 = zext i32 %1430 to i64
  br label %1461

1434:                                             ; preds = %1424, %1457
  %1435 = phi i64 [ %1425, %1424 ], [ %1459, %1457 ]
  %1436 = phi i32 [ %1421, %1424 ], [ %1458, %1457 ]
  %1437 = getelementptr inbounds i16, ptr %1331, i64 %1435
  %1438 = load i16, ptr %1437, align 2, !tbaa !44
  %1439 = zext i16 %1438 to i64
  %1440 = getelementptr inbounds %struct.CompAtom, ptr %108, i64 %1439
  %1441 = load double, ptr %1440, align 8, !tbaa !68
  %1442 = getelementptr inbounds %class.Vector, ptr %1440, i64 0, i32 1
  %1443 = load double, ptr %1442, align 8, !tbaa !67
  %1444 = getelementptr inbounds %class.Vector, ptr %1440, i64 0, i32 2
  %1445 = load double, ptr %1444, align 8, !tbaa !49
  %1446 = fsub double %1062, %1441
  %1447 = fmul double %1446, %1446
  %1448 = fsub double %1427, %1443
  %1449 = call double @llvm.fmuladd.f64(double %1448, double %1448, double %1447)
  %1450 = fsub double %1428, %1445
  %1451 = call double @llvm.fmuladd.f64(double %1450, double %1450, double %1449)
  %1452 = fcmp ugt double %1451, %27
  br i1 %1452, label %1457, label %1453

1453:                                             ; preds = %1434
  %1454 = add nsw i32 %1436, 1
  %1455 = sext i32 %1436 to i64
  %1456 = getelementptr inbounds i16, ptr %350, i64 %1455
  store i16 %1438, ptr %1456, align 2, !tbaa !44
  br label %1457

1457:                                             ; preds = %1453, %1434
  %1458 = phi i32 [ %1454, %1453 ], [ %1436, %1434 ]
  %1459 = add nuw nsw i64 %1435, 1
  %1460 = icmp eq i64 %1459, %1426
  br i1 %1460, label %1429, label %1434

1461:                                             ; preds = %1432, %1478
  %1462 = phi i64 [ 0, %1432 ], [ %1481, %1478 ]
  %1463 = phi ptr [ %488, %1432 ], [ %1480, %1478 ]
  %1464 = getelementptr inbounds i16, ptr %350, i64 %1462
  %1465 = load i16, ptr %1464, align 2, !tbaa !44
  %1466 = zext i16 %1465 to i64
  %1467 = getelementptr inbounds %struct.CompAtom, ptr %108, i64 %1466, i32 4
  %1468 = load i8, ptr %1467, align 1
  %1469 = and i8 %1468, 7
  store i16 %1465, ptr %1463, align 2, !tbaa !44
  %1470 = getelementptr inbounds i16, ptr %1463, i64 1
  %1471 = insertelement <2 x i16> poison, i16 %1465, i64 0
  %1472 = shufflevector <2 x i16> %1471, <2 x i16> poison, <2 x i32> zeroinitializer
  %1473 = add <2 x i16> %1472, <i16 1, i16 2>
  store <2 x i16> %1473, ptr %1470, align 2, !tbaa !44
  %1474 = icmp ult i8 %1469, 4
  br i1 %1474, label %1478, label %1475

1475:                                             ; preds = %1461
  %1476 = add <2 x i16> %1472, <i16 3, i16 4>
  %1477 = getelementptr inbounds i16, ptr %1463, i64 3
  store <2 x i16> %1476, ptr %1477, align 2, !tbaa !44
  br label %1478

1478:                                             ; preds = %1475, %1461
  %1479 = zext i8 %1469 to i64
  %1480 = getelementptr inbounds i16, ptr %1463, i64 %1479
  %1481 = add nuw nsw i64 %1462, 1
  %1482 = icmp eq i64 %1481, %1433
  br i1 %1482, label %1483, label %1461

1483:                                             ; preds = %1478
  %1484 = ptrtoint ptr %1480 to i64
  br label %1485

1485:                                             ; preds = %1483, %1429, %1330
  %1486 = phi i64 [ %1484, %1483 ], [ %997, %1429 ], [ %997, %1330 ]
  %1487 = sub i64 %1486, %997
  %1488 = lshr exact i64 %1487, 1
  %1489 = trunc i64 %1488 to i32
  %1490 = icmp eq i32 %1489, 0
  br i1 %1490, label %1491, label %1496

1491:                                             ; preds = %1485
  %1492 = load i8, ptr %1317, align 1
  %1493 = and i8 %1492, 7
  %1494 = zext i8 %1493 to i32
  %1495 = add nsw i32 %1031, %1494
  br label %4544

1496:                                             ; preds = %1485
  %1497 = shl i64 %1487, 31
  %1498 = add i64 %1497, -4294967296
  %1499 = ashr i64 %1498, 32
  %1500 = getelementptr inbounds i16, ptr %488, i64 %1499
  %1501 = load i16, ptr %1500, align 2, !tbaa !44
  %1502 = ashr i64 %1497, 32
  %1503 = getelementptr inbounds i16, ptr %488, i64 %1502
  store i16 %1501, ptr %1503, align 2, !tbaa !44
  br label %1504

1504:                                             ; preds = %1496, %1312
  %1505 = phi i32 [ %1489, %1496 ], [ %1035, %1312 ]
  %1506 = icmp eq i32 %1321, 0
  br i1 %1506, label %1511, label %1507

1507:                                             ; preds = %1504
  %1508 = load i32, ptr %1046, align 4
  %1509 = and i32 %1508, 1073741824
  %1510 = icmp ne i32 %1509, 0
  br label %1511

1511:                                             ; preds = %1507, %1504
  %1512 = phi i1 [ false, %1504 ], [ %1510, %1507 ]
  %1513 = load i32, ptr %17, align 8, !tbaa !17
  %1514 = add nsw i32 %998, %1513
  %1515 = load i32, ptr %999, align 4, !tbaa !69
  %1516 = icmp sgt i32 %1515, %1514
  br i1 %1516, label %1532, label %1517

1517:                                             ; preds = %1511, %1517
  %1518 = phi i32 [ %1520, %1517 ], [ %1515, %1511 ]
  %1519 = ashr i32 %1518, 1
  %1520 = add nsw i32 %1519, %1518
  %1521 = icmp sgt i32 %1520, %1514
  br i1 %1521, label %1522, label %1517

1522:                                             ; preds = %1517
  %1523 = sext i32 %1520 to i64
  %1524 = icmp slt i32 %1520, 0
  %1525 = shl nsw i64 %1523, 1
  %1526 = select i1 %1524, i64 -1, i64 %1525
  %1527 = call noalias noundef nonnull ptr @_Znam(i64 noundef %1526) #12
  %1528 = load ptr, ptr %12, align 8, !tbaa !46
  %1529 = sext i32 %1513 to i64
  %1530 = shl nsw i64 %1529, 1
  call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 2 %1527, ptr align 2 %1528, i64 %1530, i1 false)
  %1531 = icmp eq ptr %1528, null
  br i1 %1531, label %1536, label %1534

1532:                                             ; preds = %1511
  %1533 = load ptr, ptr %12, align 8, !tbaa !46
  br label %1538

1534:                                             ; preds = %1522
  call void @_ZdaPv(ptr noundef nonnull %1528) #13
  %1535 = load i32, ptr %17, align 8, !tbaa !17
  br label %1536

1536:                                             ; preds = %1534, %1522
  %1537 = phi i32 [ %1535, %1534 ], [ %1513, %1522 ]
  store ptr %1527, ptr %12, align 8, !tbaa !46
  store i32 %1520, ptr %999, align 4, !tbaa !69
  br label %1538

1538:                                             ; preds = %1532, %1536
  %1539 = phi i32 [ %1513, %1532 ], [ %1537, %1536 ]
  %1540 = phi ptr [ %1533, %1532 ], [ %1527, %1536 ]
  %1541 = ptrtoint ptr %1540 to i64
  %1542 = add nsw i32 %1539, 1
  %1543 = sext i32 %1542 to i64
  %1544 = getelementptr inbounds i16, ptr %1540, i64 %1543
  %1545 = icmp sgt i32 %1505, 0
  br i1 %1512, label %1546, label %1593

1546:                                             ; preds = %1538
  br i1 %1545, label %1547, label %1753

1547:                                             ; preds = %1546
  %1548 = zext i32 %1505 to i64
  %1549 = extractelement <2 x double> %1065, i64 0
  %1550 = extractelement <2 x double> %1065, i64 1
  br label %1551

1551:                                             ; preds = %1547, %1588
  %1552 = phi i64 [ 0, %1547 ], [ %1591, %1588 ]
  %1553 = phi ptr [ %534, %1547 ], [ %1590, %1588 ]
  %1554 = phi ptr [ %1544, %1547 ], [ %1589, %1588 ]
  %1555 = getelementptr inbounds i16, ptr %488, i64 %1552
  %1556 = load i16, ptr %1555, align 2, !tbaa !44
  %1557 = zext i16 %1556 to i64
  %1558 = getelementptr inbounds %struct.CompAtomExt, ptr %112, i64 %1557
  %1559 = load i32, ptr %1558, align 4
  %1560 = and i32 %1559, 1073741824
  %1561 = icmp eq i32 %1560, 0
  br i1 %1561, label %1562, label %1588

1562:                                             ; preds = %1551
  %1563 = getelementptr inbounds %struct.CompAtom, ptr %108, i64 %1557
  %1564 = getelementptr inbounds %class.Vector, ptr %1563, i64 0, i32 2
  %1565 = load double, ptr %1564, align 8, !tbaa !49
  %1566 = fsub double %1550, %1565
  %1567 = getelementptr inbounds %class.Vector, ptr %1563, i64 0, i32 1
  %1568 = load double, ptr %1567, align 8, !tbaa !67
  %1569 = fsub double %1549, %1568
  %1570 = load double, ptr %1563, align 8, !tbaa !68
  %1571 = fsub double %1062, %1570
  %1572 = fmul double %1571, %1571
  %1573 = call double @llvm.fmuladd.f64(double %1569, double %1569, double %1572)
  %1574 = call double @llvm.fmuladd.f64(double %1566, double %1566, double %1573)
  %1575 = fcmp ugt double %1574, %24
  br i1 %1575, label %1588, label %1576

1576:                                             ; preds = %1562
  %1577 = shl i32 %1559, 2
  %1578 = ashr exact i32 %1577, 2
  %1579 = icmp slt i32 %1578, %1076
  %1580 = icmp sgt i32 %1578, %1078
  %1581 = select i1 %1579, i1 true, i1 %1580
  %1582 = select i1 %1581, ptr %1554, ptr %1553
  %1583 = zext i1 %1581 to i64
  %1584 = getelementptr inbounds i16, ptr %1554, i64 %1583
  %1585 = xor i1 %1581, true
  %1586 = zext i1 %1585 to i64
  %1587 = getelementptr inbounds i16, ptr %1553, i64 %1586
  store i16 %1556, ptr %1582, align 2, !tbaa !44
  br label %1588

1588:                                             ; preds = %1576, %1562, %1551
  %1589 = phi ptr [ %1554, %1551 ], [ %1554, %1562 ], [ %1584, %1576 ]
  %1590 = phi ptr [ %1553, %1551 ], [ %1553, %1562 ], [ %1587, %1576 ]
  %1591 = add nuw nsw i64 %1552, 1
  %1592 = icmp eq i64 %1591, %1548
  br i1 %1592, label %1753, label %1551

1593:                                             ; preds = %1538
  br i1 %1545, label %1594, label %1753

1594:                                             ; preds = %1593
  %1595 = icmp ugt i32 %1505, 6
  br i1 %1595, label %1596, label %1704

1596:                                             ; preds = %1594
  %1597 = add nsw i32 %1505, -2
  %1598 = load i16, ptr %488, align 2, !tbaa !44
  %1599 = zext i16 %1598 to i64
  %1600 = getelementptr inbounds %struct.CompAtomExt, ptr %112, i64 %1599
  %1601 = load i32, ptr %1600, align 4
  %1602 = load i16, ptr %1000, align 2, !tbaa !44
  %1603 = zext i16 %1602 to i64
  %1604 = getelementptr inbounds %struct.CompAtom, ptr %108, i64 %1603
  %1605 = getelementptr inbounds %class.Vector, ptr %1604, i64 0, i32 2
  %1606 = load double, ptr %1605, align 8, !tbaa !49
  %1607 = getelementptr inbounds %struct.CompAtom, ptr %108, i64 %1599
  %1608 = getelementptr inbounds %class.Vector, ptr %1607, i64 0, i32 2
  %1609 = load double, ptr %1608, align 8, !tbaa !49
  %1610 = getelementptr inbounds %class.Vector, ptr %1604, i64 0, i32 1
  %1611 = load double, ptr %1610, align 8, !tbaa !67
  %1612 = getelementptr inbounds %class.Vector, ptr %1607, i64 0, i32 1
  %1613 = load double, ptr %1612, align 8, !tbaa !67
  %1614 = load double, ptr %1604, align 8, !tbaa !68
  %1615 = load double, ptr %1607, align 8, !tbaa !68
  %1616 = zext i32 %1597 to i64
  %1617 = extractelement <2 x double> %1065, i64 0
  %1618 = extractelement <2 x double> %1065, i64 1
  br label %1619

1619:                                             ; preds = %1596, %1697
  %1620 = phi i64 [ 2, %1596 ], [ %1700, %1697 ]
  %1621 = phi i64 [ %1603, %1596 ], [ %1657, %1697 ]
  %1622 = phi i32 [ %1601, %1596 ], [ %1685, %1697 ]
  %1623 = phi ptr [ %534, %1596 ], [ %1699, %1697 ]
  %1624 = phi ptr [ %1544, %1596 ], [ %1698, %1697 ]
  %1625 = phi i16 [ %1598, %1596 ], [ %1650, %1697 ]
  %1626 = phi i16 [ %1602, %1596 ], [ %1653, %1697 ]
  %1627 = phi double [ %1615, %1596 ], [ %1656, %1697 ]
  %1628 = phi double [ %1614, %1596 ], [ %1659, %1697 ]
  %1629 = phi double [ %1613, %1596 ], [ %1661, %1697 ]
  %1630 = phi double [ %1611, %1596 ], [ %1663, %1697 ]
  %1631 = phi double [ %1609, %1596 ], [ %1665, %1697 ]
  %1632 = phi double [ %1606, %1596 ], [ %1667, %1697 ]
  %1633 = getelementptr inbounds %struct.CompAtomExt, ptr %112, i64 %1621
  %1634 = load i32, ptr %1633, align 4
  %1635 = shl i32 %1634, 2
  %1636 = ashr exact i32 %1635, 2
  %1637 = fsub double %1062, %1627
  %1638 = fsub double %1062, %1628
  %1639 = fmul double %1637, %1637
  %1640 = fmul double %1638, %1638
  %1641 = fsub double %1617, %1629
  %1642 = fsub double %1617, %1630
  %1643 = call double @llvm.fmuladd.f64(double %1641, double %1641, double %1639)
  %1644 = call double @llvm.fmuladd.f64(double %1642, double %1642, double %1640)
  %1645 = fsub double %1618, %1631
  %1646 = fsub double %1618, %1632
  %1647 = call double @llvm.fmuladd.f64(double %1645, double %1645, double %1643)
  %1648 = call double @llvm.fmuladd.f64(double %1646, double %1646, double %1644)
  %1649 = getelementptr inbounds i16, ptr %488, i64 %1620
  %1650 = load i16, ptr %1649, align 2, !tbaa !44
  %1651 = or i64 %1620, 1
  %1652 = getelementptr inbounds i16, ptr %488, i64 %1651
  %1653 = load i16, ptr %1652, align 2, !tbaa !44
  %1654 = zext i16 %1650 to i64
  %1655 = getelementptr inbounds %struct.CompAtom, ptr %108, i64 %1654
  %1656 = load double, ptr %1655, align 8, !tbaa !68
  %1657 = zext i16 %1653 to i64
  %1658 = getelementptr inbounds %struct.CompAtom, ptr %108, i64 %1657
  %1659 = load double, ptr %1658, align 8, !tbaa !68
  %1660 = getelementptr inbounds %class.Vector, ptr %1655, i64 0, i32 1
  %1661 = load double, ptr %1660, align 8, !tbaa !67
  %1662 = getelementptr inbounds %class.Vector, ptr %1658, i64 0, i32 1
  %1663 = load double, ptr %1662, align 8, !tbaa !67
  %1664 = getelementptr inbounds %class.Vector, ptr %1655, i64 0, i32 2
  %1665 = load double, ptr %1664, align 8, !tbaa !49
  %1666 = getelementptr inbounds %class.Vector, ptr %1658, i64 0, i32 2
  %1667 = load double, ptr %1666, align 8, !tbaa !49
  %1668 = fcmp ugt double %1647, %24
  br i1 %1668, label %1681, label %1669

1669:                                             ; preds = %1619
  %1670 = shl i32 %1622, 2
  %1671 = ashr exact i32 %1670, 2
  %1672 = icmp slt i32 %1671, %1076
  %1673 = icmp sgt i32 %1671, %1078
  %1674 = select i1 %1672, i1 true, i1 %1673
  %1675 = select i1 %1674, ptr %1624, ptr %1623
  %1676 = zext i1 %1674 to i64
  %1677 = getelementptr inbounds i16, ptr %1624, i64 %1676
  %1678 = xor i1 %1674, true
  %1679 = zext i1 %1678 to i64
  %1680 = getelementptr inbounds i16, ptr %1623, i64 %1679
  store i16 %1625, ptr %1675, align 2, !tbaa !44
  br label %1681

1681:                                             ; preds = %1669, %1619
  %1682 = phi ptr [ %1624, %1619 ], [ %1677, %1669 ]
  %1683 = phi ptr [ %1623, %1619 ], [ %1680, %1669 ]
  %1684 = getelementptr inbounds %struct.CompAtomExt, ptr %112, i64 %1654
  %1685 = load i32, ptr %1684, align 4
  %1686 = fcmp ugt double %1648, %24
  br i1 %1686, label %1697, label %1687

1687:                                             ; preds = %1681
  %1688 = icmp slt i32 %1636, %1076
  %1689 = icmp sgt i32 %1636, %1078
  %1690 = select i1 %1688, i1 true, i1 %1689
  %1691 = select i1 %1690, ptr %1682, ptr %1683
  %1692 = zext i1 %1690 to i64
  %1693 = getelementptr inbounds i16, ptr %1682, i64 %1692
  %1694 = xor i1 %1690, true
  %1695 = zext i1 %1694 to i64
  %1696 = getelementptr inbounds i16, ptr %1683, i64 %1695
  store i16 %1626, ptr %1691, align 2, !tbaa !44
  br label %1697

1697:                                             ; preds = %1687, %1681
  %1698 = phi ptr [ %1682, %1681 ], [ %1693, %1687 ]
  %1699 = phi ptr [ %1683, %1681 ], [ %1696, %1687 ]
  %1700 = add nuw nsw i64 %1620, 2
  %1701 = icmp ult i64 %1700, %1616
  br i1 %1701, label %1619, label %1702

1702:                                             ; preds = %1697
  %1703 = trunc i64 %1620 to i32
  br label %1704

1704:                                             ; preds = %1702, %1594
  %1705 = phi i32 [ %1703, %1702 ], [ 0, %1594 ]
  %1706 = phi ptr [ %1698, %1702 ], [ %1544, %1594 ]
  %1707 = phi ptr [ %1699, %1702 ], [ %534, %1594 ]
  %1708 = icmp slt i32 %1705, %1505
  br i1 %1708, label %1709, label %1753

1709:                                             ; preds = %1704
  %1710 = zext i32 %1705 to i64
  %1711 = zext i32 %1505 to i64
  %1712 = extractelement <2 x double> %1065, i64 0
  %1713 = extractelement <2 x double> %1065, i64 1
  br label %1714

1714:                                             ; preds = %1709, %1748
  %1715 = phi i64 [ %1710, %1709 ], [ %1751, %1748 ]
  %1716 = phi ptr [ %1707, %1709 ], [ %1750, %1748 ]
  %1717 = phi ptr [ %1706, %1709 ], [ %1749, %1748 ]
  %1718 = getelementptr inbounds i16, ptr %488, i64 %1715
  %1719 = load i16, ptr %1718, align 2, !tbaa !44
  %1720 = zext i16 %1719 to i64
  %1721 = getelementptr inbounds %struct.CompAtom, ptr %108, i64 %1720
  %1722 = load double, ptr %1721, align 8, !tbaa !68
  %1723 = getelementptr inbounds %class.Vector, ptr %1721, i64 0, i32 1
  %1724 = load double, ptr %1723, align 8, !tbaa !67
  %1725 = getelementptr inbounds %class.Vector, ptr %1721, i64 0, i32 2
  %1726 = load double, ptr %1725, align 8, !tbaa !49
  %1727 = fsub double %1062, %1722
  %1728 = fmul double %1727, %1727
  %1729 = fsub double %1712, %1724
  %1730 = call double @llvm.fmuladd.f64(double %1729, double %1729, double %1728)
  %1731 = fsub double %1713, %1726
  %1732 = call double @llvm.fmuladd.f64(double %1731, double %1731, double %1730)
  %1733 = fcmp ugt double %1732, %24
  br i1 %1733, label %1748, label %1734

1734:                                             ; preds = %1714
  %1735 = getelementptr inbounds %struct.CompAtomExt, ptr %112, i64 %1720
  %1736 = load i32, ptr %1735, align 4
  %1737 = shl i32 %1736, 2
  %1738 = ashr exact i32 %1737, 2
  %1739 = icmp slt i32 %1738, %1076
  %1740 = icmp sgt i32 %1738, %1078
  %1741 = select i1 %1739, i1 true, i1 %1740
  %1742 = select i1 %1741, ptr %1717, ptr %1716
  %1743 = zext i1 %1741 to i64
  %1744 = getelementptr inbounds i16, ptr %1717, i64 %1743
  %1745 = xor i1 %1741, true
  %1746 = zext i1 %1745 to i64
  %1747 = getelementptr inbounds i16, ptr %1716, i64 %1746
  store i16 %1719, ptr %1742, align 2, !tbaa !44
  br label %1748

1748:                                             ; preds = %1734, %1714
  %1749 = phi ptr [ %1717, %1714 ], [ %1744, %1734 ]
  %1750 = phi ptr [ %1716, %1714 ], [ %1747, %1734 ]
  %1751 = add nuw nsw i64 %1715, 1
  %1752 = icmp eq i64 %1751, %1711
  br i1 %1752, label %1753, label %1714

1753:                                             ; preds = %1748, %1588, %1704, %1546, %1593
  %1754 = phi ptr [ %1544, %1593 ], [ %1544, %1546 ], [ %1706, %1704 ], [ %1589, %1588 ], [ %1749, %1748 ]
  %1755 = phi ptr [ %534, %1593 ], [ %534, %1546 ], [ %1707, %1704 ], [ %1590, %1588 ], [ %1750, %1748 ]
  %1756 = icmp eq ptr %1754, %1544
  %1757 = icmp eq ptr %1755, %534
  %1758 = select i1 %1756, i1 %1757, i1 false
  br i1 %1758, label %1759, label %1761

1759:                                             ; preds = %1753
  %1760 = add nsw i32 %1031, 1
  br label %4544

1761:                                             ; preds = %1753
  %1762 = trunc i32 %1031 to i16
  %1763 = load i32, ptr %17, align 8, !tbaa !17
  %1764 = add nsw i32 %1763, -1
  %1765 = sext i32 %1764 to i64
  %1766 = getelementptr inbounds i16, ptr %1540, i64 %1765
  store i16 %1762, ptr %1766, align 2, !tbaa !44
  %1767 = ptrtoint ptr %1754 to i64
  %1768 = ptrtoint ptr %1544 to i64
  %1769 = sub i64 %1767, %1768
  %1770 = lshr exact i64 %1769, 1
  %1771 = trunc i64 %1770 to i32
  %1772 = icmp sgt i32 %1771, 0
  br i1 %1772, label %1773, label %1873

1773:                                             ; preds = %1761
  %1774 = and i64 %1770, 4294967295
  %1775 = and i64 %1770, 1
  %1776 = icmp eq i64 %1774, 1
  br i1 %1776, label %1841, label %1777

1777:                                             ; preds = %1773
  %1778 = sub nsw i64 %1774, %1775
  br label %1779

1779:                                             ; preds = %1834, %1777
  %1780 = phi i64 [ 0, %1777 ], [ %1838, %1834 ]
  %1781 = phi ptr [ %1544, %1777 ], [ %1837, %1834 ]
  %1782 = phi ptr [ %580, %1777 ], [ %1836, %1834 ]
  %1783 = phi ptr [ %718, %1777 ], [ %1835, %1834 ]
  %1784 = phi i64 [ 0, %1777 ], [ %1839, %1834 ]
  %1785 = getelementptr inbounds i16, ptr %1544, i64 %1780
  %1786 = load i16, ptr %1785, align 2, !tbaa !44
  %1787 = zext i16 %1786 to i64
  %1788 = getelementptr inbounds %struct.CompAtom, ptr %108, i64 %1787, i32 3
  %1789 = load i8, ptr %1788, align 2, !tbaa !51
  %1790 = zext i8 %1789 to i32
  %1791 = mul nuw nsw i32 %1790, 3
  %1792 = add nuw nsw i32 %1791, %1068
  %1793 = zext i32 %1792 to i64
  %1794 = getelementptr inbounds [9 x i32], ptr %2, i64 0, i64 %1793
  %1795 = load i32, ptr %1794, align 4, !tbaa !5
  switch i32 %1795, label %1807 [
    i32 0, label %1796
    i32 1, label %1798
    i32 2, label %1800
  ]

1796:                                             ; preds = %1779
  %1797 = getelementptr inbounds i16, ptr %1781, i64 1
  br label %1802

1798:                                             ; preds = %1779
  %1799 = getelementptr inbounds i16, ptr %1782, i64 1
  br label %1802

1800:                                             ; preds = %1779
  %1801 = getelementptr inbounds i16, ptr %1783, i64 1
  br label %1802

1802:                                             ; preds = %1796, %1798, %1800
  %1803 = phi ptr [ %1783, %1800 ], [ %1782, %1798 ], [ %1781, %1796 ]
  %1804 = phi ptr [ %1801, %1800 ], [ %1783, %1798 ], [ %1783, %1796 ]
  %1805 = phi ptr [ %1782, %1800 ], [ %1799, %1798 ], [ %1782, %1796 ]
  %1806 = phi ptr [ %1781, %1800 ], [ %1781, %1798 ], [ %1797, %1796 ]
  store i16 %1786, ptr %1803, align 2, !tbaa !44
  br label %1807

1807:                                             ; preds = %1802, %1779
  %1808 = phi ptr [ %1783, %1779 ], [ %1804, %1802 ]
  %1809 = phi ptr [ %1782, %1779 ], [ %1805, %1802 ]
  %1810 = phi ptr [ %1781, %1779 ], [ %1806, %1802 ]
  %1811 = or i64 %1780, 1
  %1812 = getelementptr inbounds i16, ptr %1544, i64 %1811
  %1813 = load i16, ptr %1812, align 2, !tbaa !44
  %1814 = zext i16 %1813 to i64
  %1815 = getelementptr inbounds %struct.CompAtom, ptr %108, i64 %1814, i32 3
  %1816 = load i8, ptr %1815, align 2, !tbaa !51
  %1817 = zext i8 %1816 to i32
  %1818 = mul nuw nsw i32 %1817, 3
  %1819 = add nuw nsw i32 %1818, %1068
  %1820 = zext i32 %1819 to i64
  %1821 = getelementptr inbounds [9 x i32], ptr %2, i64 0, i64 %1820
  %1822 = load i32, ptr %1821, align 4, !tbaa !5
  switch i32 %1822, label %1834 [
    i32 0, label %1827
    i32 1, label %1825
    i32 2, label %1823
  ]

1823:                                             ; preds = %1807
  %1824 = getelementptr inbounds i16, ptr %1808, i64 1
  br label %1829

1825:                                             ; preds = %1807
  %1826 = getelementptr inbounds i16, ptr %1809, i64 1
  br label %1829

1827:                                             ; preds = %1807
  %1828 = getelementptr inbounds i16, ptr %1810, i64 1
  br label %1829

1829:                                             ; preds = %1827, %1825, %1823
  %1830 = phi ptr [ %1808, %1823 ], [ %1809, %1825 ], [ %1810, %1827 ]
  %1831 = phi ptr [ %1824, %1823 ], [ %1808, %1825 ], [ %1808, %1827 ]
  %1832 = phi ptr [ %1809, %1823 ], [ %1826, %1825 ], [ %1809, %1827 ]
  %1833 = phi ptr [ %1810, %1823 ], [ %1810, %1825 ], [ %1828, %1827 ]
  store i16 %1813, ptr %1830, align 2, !tbaa !44
  br label %1834

1834:                                             ; preds = %1829, %1807
  %1835 = phi ptr [ %1808, %1807 ], [ %1831, %1829 ]
  %1836 = phi ptr [ %1809, %1807 ], [ %1832, %1829 ]
  %1837 = phi ptr [ %1810, %1807 ], [ %1833, %1829 ]
  %1838 = add nuw nsw i64 %1780, 2
  %1839 = add i64 %1784, 2
  %1840 = icmp eq i64 %1839, %1778
  br i1 %1840, label %1841, label %1779

1841:                                             ; preds = %1834, %1773
  %1842 = phi ptr [ undef, %1773 ], [ %1835, %1834 ]
  %1843 = phi ptr [ undef, %1773 ], [ %1836, %1834 ]
  %1844 = phi ptr [ undef, %1773 ], [ %1837, %1834 ]
  %1845 = phi i64 [ 0, %1773 ], [ %1838, %1834 ]
  %1846 = phi ptr [ %1544, %1773 ], [ %1837, %1834 ]
  %1847 = phi ptr [ %580, %1773 ], [ %1836, %1834 ]
  %1848 = phi ptr [ %718, %1773 ], [ %1835, %1834 ]
  %1849 = icmp eq i64 %1775, 0
  br i1 %1849, label %1873, label %1850

1850:                                             ; preds = %1841
  %1851 = getelementptr inbounds i16, ptr %1544, i64 %1845
  %1852 = load i16, ptr %1851, align 2, !tbaa !44
  %1853 = zext i16 %1852 to i64
  %1854 = getelementptr inbounds %struct.CompAtom, ptr %108, i64 %1853, i32 3
  %1855 = load i8, ptr %1854, align 2, !tbaa !51
  %1856 = zext i8 %1855 to i32
  %1857 = mul nuw nsw i32 %1856, 3
  %1858 = add nuw nsw i32 %1857, %1068
  %1859 = zext i32 %1858 to i64
  %1860 = getelementptr inbounds [9 x i32], ptr %2, i64 0, i64 %1859
  %1861 = load i32, ptr %1860, align 4, !tbaa !5
  switch i32 %1861, label %1873 [
    i32 0, label %1866
    i32 1, label %1864
    i32 2, label %1862
  ]

1862:                                             ; preds = %1850
  %1863 = getelementptr inbounds i16, ptr %1848, i64 1
  br label %1868

1864:                                             ; preds = %1850
  %1865 = getelementptr inbounds i16, ptr %1847, i64 1
  br label %1868

1866:                                             ; preds = %1850
  %1867 = getelementptr inbounds i16, ptr %1846, i64 1
  br label %1868

1868:                                             ; preds = %1866, %1864, %1862
  %1869 = phi ptr [ %1848, %1862 ], [ %1847, %1864 ], [ %1846, %1866 ]
  %1870 = phi ptr [ %1863, %1862 ], [ %1848, %1864 ], [ %1848, %1866 ]
  %1871 = phi ptr [ %1847, %1862 ], [ %1865, %1864 ], [ %1847, %1866 ]
  %1872 = phi ptr [ %1846, %1862 ], [ %1846, %1864 ], [ %1867, %1866 ]
  store i16 %1852, ptr %1869, align 2, !tbaa !44
  br label %1873

1873:                                             ; preds = %1841, %1868, %1850, %1761
  %1874 = phi ptr [ %718, %1761 ], [ %1842, %1841 ], [ %1848, %1850 ], [ %1870, %1868 ]
  %1875 = phi ptr [ %580, %1761 ], [ %1843, %1841 ], [ %1847, %1850 ], [ %1871, %1868 ]
  %1876 = phi ptr [ %1544, %1761 ], [ %1844, %1841 ], [ %1846, %1850 ], [ %1872, %1868 ]
  %1877 = ptrtoint ptr %1755 to i64
  %1878 = sub i64 %1877, %1001
  %1879 = lshr exact i64 %1878, 1
  %1880 = trunc i64 %1879 to i32
  %1881 = icmp sgt i32 %1880, 0
  br i1 %1881, label %1882, label %1957

1882:                                             ; preds = %1873
  %1883 = and i64 %1879, 4294967295
  br label %1884

1884:                                             ; preds = %1882, %1945
  %1885 = phi i64 [ 0, %1882 ], [ %1955, %1945 ]
  %1886 = phi ptr [ %1876, %1882 ], [ %1954, %1945 ]
  %1887 = phi ptr [ %396, %1882 ], [ %1953, %1945 ]
  %1888 = phi ptr [ %442, %1882 ], [ %1952, %1945 ]
  %1889 = phi ptr [ %1875, %1882 ], [ %1951, %1945 ]
  %1890 = phi ptr [ %626, %1882 ], [ %1950, %1945 ]
  %1891 = phi ptr [ %672, %1882 ], [ %1949, %1945 ]
  %1892 = phi ptr [ %1874, %1882 ], [ %1948, %1945 ]
  %1893 = phi ptr [ %764, %1882 ], [ %1947, %1945 ]
  %1894 = phi ptr [ %810, %1882 ], [ %1946, %1945 ]
  %1895 = getelementptr inbounds i16, ptr %534, i64 %1885
  %1896 = load i16, ptr %1895, align 2, !tbaa !44
  %1897 = zext i16 %1896 to i64
  %1898 = getelementptr inbounds %struct.CompAtomExt, ptr %112, i64 %1897
  %1899 = load i32, ptr %1898, align 4
  %1900 = shl i32 %1899, 2
  %1901 = ashr exact i32 %1900, 2
  %1902 = sext i32 %1901 to i64
  %1903 = getelementptr inbounds i8, ptr %1313, i64 %1902
  %1904 = load i8, ptr %1903, align 1, !tbaa !58
  %1905 = sext i8 %1904 to i32
  %1906 = getelementptr inbounds %struct.CompAtom, ptr %108, i64 %1897, i32 3
  %1907 = load i8, ptr %1906, align 2, !tbaa !51
  %1908 = zext i8 %1907 to i32
  %1909 = mul nuw nsw i32 %1908, 3
  %1910 = add nuw nsw i32 %1909, %1068
  %1911 = zext i32 %1910 to i64
  %1912 = getelementptr inbounds [9 x i32], ptr %2, i64 0, i64 %1911
  %1913 = load i32, ptr %1912, align 4, !tbaa !5
  %1914 = mul nsw i32 %1913, 3
  %1915 = add nsw i32 %1914, %1905
  switch i32 %1915, label %1945 [
    i32 0, label %1916
    i32 1, label %1918
    i32 2, label %1920
    i32 3, label %1922
    i32 6, label %1924
    i32 5, label %1926
    i32 8, label %1928
    i32 4, label %1930
    i32 7, label %1932
  ]

1916:                                             ; preds = %1884
  %1917 = getelementptr inbounds i16, ptr %1886, i64 1
  br label %1934

1918:                                             ; preds = %1884
  %1919 = getelementptr inbounds i16, ptr %1887, i64 1
  br label %1934

1920:                                             ; preds = %1884
  %1921 = getelementptr inbounds i16, ptr %1888, i64 1
  br label %1934

1922:                                             ; preds = %1884
  %1923 = getelementptr inbounds i16, ptr %1889, i64 1
  br label %1934

1924:                                             ; preds = %1884
  %1925 = getelementptr inbounds i16, ptr %1892, i64 1
  br label %1934

1926:                                             ; preds = %1884
  %1927 = getelementptr inbounds i16, ptr %1891, i64 1
  br label %1934

1928:                                             ; preds = %1884
  %1929 = getelementptr inbounds i16, ptr %1894, i64 1
  br label %1934

1930:                                             ; preds = %1884
  %1931 = getelementptr inbounds i16, ptr %1890, i64 1
  br label %1934

1932:                                             ; preds = %1884
  %1933 = getelementptr inbounds i16, ptr %1893, i64 1
  br label %1934

1934:                                             ; preds = %1916, %1918, %1920, %1922, %1924, %1926, %1928, %1930, %1932
  %1935 = phi ptr [ %1893, %1932 ], [ %1890, %1930 ], [ %1894, %1928 ], [ %1891, %1926 ], [ %1892, %1924 ], [ %1889, %1922 ], [ %1888, %1920 ], [ %1887, %1918 ], [ %1886, %1916 ]
  %1936 = phi ptr [ %1894, %1932 ], [ %1894, %1930 ], [ %1929, %1928 ], [ %1894, %1926 ], [ %1894, %1924 ], [ %1894, %1922 ], [ %1894, %1920 ], [ %1894, %1918 ], [ %1894, %1916 ]
  %1937 = phi ptr [ %1933, %1932 ], [ %1893, %1930 ], [ %1893, %1928 ], [ %1893, %1926 ], [ %1893, %1924 ], [ %1893, %1922 ], [ %1893, %1920 ], [ %1893, %1918 ], [ %1893, %1916 ]
  %1938 = phi ptr [ %1892, %1932 ], [ %1892, %1930 ], [ %1892, %1928 ], [ %1892, %1926 ], [ %1925, %1924 ], [ %1892, %1922 ], [ %1892, %1920 ], [ %1892, %1918 ], [ %1892, %1916 ]
  %1939 = phi ptr [ %1891, %1932 ], [ %1891, %1930 ], [ %1891, %1928 ], [ %1927, %1926 ], [ %1891, %1924 ], [ %1891, %1922 ], [ %1891, %1920 ], [ %1891, %1918 ], [ %1891, %1916 ]
  %1940 = phi ptr [ %1890, %1932 ], [ %1931, %1930 ], [ %1890, %1928 ], [ %1890, %1926 ], [ %1890, %1924 ], [ %1890, %1922 ], [ %1890, %1920 ], [ %1890, %1918 ], [ %1890, %1916 ]
  %1941 = phi ptr [ %1889, %1932 ], [ %1889, %1930 ], [ %1889, %1928 ], [ %1889, %1926 ], [ %1889, %1924 ], [ %1923, %1922 ], [ %1889, %1920 ], [ %1889, %1918 ], [ %1889, %1916 ]
  %1942 = phi ptr [ %1888, %1932 ], [ %1888, %1930 ], [ %1888, %1928 ], [ %1888, %1926 ], [ %1888, %1924 ], [ %1888, %1922 ], [ %1921, %1920 ], [ %1888, %1918 ], [ %1888, %1916 ]
  %1943 = phi ptr [ %1887, %1932 ], [ %1887, %1930 ], [ %1887, %1928 ], [ %1887, %1926 ], [ %1887, %1924 ], [ %1887, %1922 ], [ %1887, %1920 ], [ %1919, %1918 ], [ %1887, %1916 ]
  %1944 = phi ptr [ %1886, %1932 ], [ %1886, %1930 ], [ %1886, %1928 ], [ %1886, %1926 ], [ %1886, %1924 ], [ %1886, %1922 ], [ %1886, %1920 ], [ %1886, %1918 ], [ %1917, %1916 ]
  store i16 %1896, ptr %1935, align 2, !tbaa !44
  br label %1945

1945:                                             ; preds = %1934, %1884
  %1946 = phi ptr [ %1894, %1884 ], [ %1936, %1934 ]
  %1947 = phi ptr [ %1893, %1884 ], [ %1937, %1934 ]
  %1948 = phi ptr [ %1892, %1884 ], [ %1938, %1934 ]
  %1949 = phi ptr [ %1891, %1884 ], [ %1939, %1934 ]
  %1950 = phi ptr [ %1890, %1884 ], [ %1940, %1934 ]
  %1951 = phi ptr [ %1889, %1884 ], [ %1941, %1934 ]
  %1952 = phi ptr [ %1888, %1884 ], [ %1942, %1934 ]
  %1953 = phi ptr [ %1887, %1884 ], [ %1943, %1934 ]
  %1954 = phi ptr [ %1886, %1884 ], [ %1944, %1934 ]
  %1955 = add nuw nsw i64 %1885, 1
  %1956 = icmp eq i64 %1955, %1883
  br i1 %1956, label %1957, label %1884

1957:                                             ; preds = %1945, %1873
  %1958 = phi ptr [ %810, %1873 ], [ %1946, %1945 ]
  %1959 = phi ptr [ %764, %1873 ], [ %1947, %1945 ]
  %1960 = phi ptr [ %1874, %1873 ], [ %1948, %1945 ]
  %1961 = phi ptr [ %672, %1873 ], [ %1949, %1945 ]
  %1962 = phi ptr [ %626, %1873 ], [ %1950, %1945 ]
  %1963 = phi ptr [ %1875, %1873 ], [ %1951, %1945 ]
  %1964 = phi ptr [ %442, %1873 ], [ %1952, %1945 ]
  %1965 = phi ptr [ %396, %1873 ], [ %1953, %1945 ]
  %1966 = phi ptr [ %1876, %1873 ], [ %1954, %1945 ]
  %1967 = ptrtoint ptr %1966 to i64
  %1968 = sub i64 %1967, %1768
  %1969 = lshr exact i64 %1968, 1
  %1970 = trunc i64 %1969 to i32
  %1971 = icmp eq i32 %1970, 0
  %1972 = shl i64 %1968, 31
  br i1 %1971, label %1978, label %1973

1973:                                             ; preds = %1957
  %1974 = add i64 %1972, -4294967296
  %1975 = ashr i64 %1974, 32
  %1976 = getelementptr inbounds i16, ptr %1544, i64 %1975
  %1977 = load i16, ptr %1976, align 2, !tbaa !44
  br label %1978

1978:                                             ; preds = %1957, %1973
  %1979 = phi i16 [ %1977, %1973 ], [ -1, %1957 ]
  %1980 = ashr i64 %1972, 32
  %1981 = getelementptr inbounds i16, ptr %1544, i64 %1980
  store i16 %1979, ptr %1981, align 2, !tbaa !44
  %1982 = trunc i64 %1969 to i16
  %1983 = add i16 %1982, 1
  %1984 = sext i32 %1763 to i64
  %1985 = getelementptr inbounds i16, ptr %1540, i64 %1984
  store i16 %1983, ptr %1985, align 2, !tbaa !44
  %1986 = add i32 %1763, 2
  %1987 = add i32 %1986, %1970
  store i32 %1987, ptr %17, align 8, !tbaa !17
  %1988 = ptrtoint ptr %1965 to i64
  %1989 = sub i64 %1988, %1002
  %1990 = lshr exact i64 %1989, 1
  %1991 = trunc i64 %1990 to i32
  %1992 = add nsw i32 %1987, 1
  %1993 = sext i32 %1992 to i64
  %1994 = getelementptr i16, ptr %1540, i64 %1993
  %1995 = icmp sgt i32 %1991, 0
  br i1 %1995, label %1996, label %2086

1996:                                             ; preds = %1978
  %1997 = and i64 %1990, 4294967295
  %1998 = icmp ult i64 %1997, 8
  br i1 %1998, label %2042, label %1999

1999:                                             ; preds = %1996
  %2000 = shl nsw i64 %1993, 1
  %2001 = add i64 %2000, %1541
  %2002 = sub i64 %2001, %1002
  %2003 = icmp ult i64 %2002, 128
  br i1 %2003, label %2042, label %2004

2004:                                             ; preds = %1999
  %2005 = icmp ult i64 %1997, 64
  br i1 %2005, label %2029, label %2006

2006:                                             ; preds = %2004
  %2007 = and i64 %1990, 63
  %2008 = sub nsw i64 %1997, %2007
  br label %2009

2009:                                             ; preds = %2009, %2006
  %2010 = phi i64 [ 0, %2006 ], [ %2023, %2009 ]
  %2011 = getelementptr inbounds i16, ptr %396, i64 %2010
  %2012 = load <16 x i16>, ptr %2011, align 2, !tbaa !44
  %2013 = getelementptr inbounds i16, ptr %2011, i64 16
  %2014 = load <16 x i16>, ptr %2013, align 2, !tbaa !44
  %2015 = getelementptr inbounds i16, ptr %2011, i64 32
  %2016 = load <16 x i16>, ptr %2015, align 2, !tbaa !44
  %2017 = getelementptr inbounds i16, ptr %2011, i64 48
  %2018 = load <16 x i16>, ptr %2017, align 2, !tbaa !44
  %2019 = getelementptr inbounds i16, ptr %1994, i64 %2010
  store <16 x i16> %2012, ptr %2019, align 2, !tbaa !44
  %2020 = getelementptr inbounds i16, ptr %2019, i64 16
  store <16 x i16> %2014, ptr %2020, align 2, !tbaa !44
  %2021 = getelementptr inbounds i16, ptr %2019, i64 32
  store <16 x i16> %2016, ptr %2021, align 2, !tbaa !44
  %2022 = getelementptr inbounds i16, ptr %2019, i64 48
  store <16 x i16> %2018, ptr %2022, align 2, !tbaa !44
  %2023 = add nuw i64 %2010, 64
  %2024 = icmp eq i64 %2023, %2008
  br i1 %2024, label %2025, label %2009, !llvm.loop !118

2025:                                             ; preds = %2009
  %2026 = icmp eq i64 %2007, 0
  br i1 %2026, label %2080, label %2027

2027:                                             ; preds = %2025
  %2028 = icmp ult i64 %2007, 8
  br i1 %2028, label %2042, label %2029

2029:                                             ; preds = %2004, %2027
  %2030 = phi i64 [ %2008, %2027 ], [ 0, %2004 ]
  %2031 = and i64 %1990, 7
  %2032 = sub nsw i64 %1997, %2031
  br label %2033

2033:                                             ; preds = %2033, %2029
  %2034 = phi i64 [ %2030, %2029 ], [ %2038, %2033 ]
  %2035 = getelementptr inbounds i16, ptr %396, i64 %2034
  %2036 = load <8 x i16>, ptr %2035, align 2, !tbaa !44
  %2037 = getelementptr inbounds i16, ptr %1994, i64 %2034
  store <8 x i16> %2036, ptr %2037, align 2, !tbaa !44
  %2038 = add nuw i64 %2034, 8
  %2039 = icmp eq i64 %2038, %2032
  br i1 %2039, label %2040, label %2033, !llvm.loop !119

2040:                                             ; preds = %2033
  %2041 = icmp eq i64 %2031, 0
  br i1 %2041, label %2080, label %2042

2042:                                             ; preds = %1999, %1996, %2027, %2040
  %2043 = phi i64 [ 0, %1996 ], [ 0, %1999 ], [ %2008, %2027 ], [ %2032, %2040 ]
  %2044 = sub i64 %1990, %2043
  %2045 = xor i64 %2043, -1
  %2046 = add nsw i64 %1997, %2045
  %2047 = and i64 %2044, 3
  %2048 = icmp eq i64 %2047, 0
  br i1 %2048, label %2058, label %2049

2049:                                             ; preds = %2042, %2049
  %2050 = phi i64 [ %2055, %2049 ], [ %2043, %2042 ]
  %2051 = phi i64 [ %2056, %2049 ], [ 0, %2042 ]
  %2052 = getelementptr inbounds i16, ptr %396, i64 %2050
  %2053 = load i16, ptr %2052, align 2, !tbaa !44
  %2054 = getelementptr inbounds i16, ptr %1994, i64 %2050
  store i16 %2053, ptr %2054, align 2, !tbaa !44
  %2055 = add nuw nsw i64 %2050, 1
  %2056 = add i64 %2051, 1
  %2057 = icmp eq i64 %2056, %2047
  br i1 %2057, label %2058, label %2049, !llvm.loop !120

2058:                                             ; preds = %2049, %2042
  %2059 = phi i64 [ %2043, %2042 ], [ %2055, %2049 ]
  %2060 = icmp ult i64 %2046, 3
  br i1 %2060, label %2080, label %2061

2061:                                             ; preds = %2058, %2061
  %2062 = phi i64 [ %2078, %2061 ], [ %2059, %2058 ]
  %2063 = getelementptr inbounds i16, ptr %396, i64 %2062
  %2064 = load i16, ptr %2063, align 2, !tbaa !44
  %2065 = getelementptr inbounds i16, ptr %1994, i64 %2062
  store i16 %2064, ptr %2065, align 2, !tbaa !44
  %2066 = add nuw nsw i64 %2062, 1
  %2067 = getelementptr inbounds i16, ptr %396, i64 %2066
  %2068 = load i16, ptr %2067, align 2, !tbaa !44
  %2069 = getelementptr inbounds i16, ptr %1994, i64 %2066
  store i16 %2068, ptr %2069, align 2, !tbaa !44
  %2070 = add nuw nsw i64 %2062, 2
  %2071 = getelementptr inbounds i16, ptr %396, i64 %2070
  %2072 = load i16, ptr %2071, align 2, !tbaa !44
  %2073 = getelementptr inbounds i16, ptr %1994, i64 %2070
  store i16 %2072, ptr %2073, align 2, !tbaa !44
  %2074 = add nuw nsw i64 %2062, 3
  %2075 = getelementptr inbounds i16, ptr %396, i64 %2074
  %2076 = load i16, ptr %2075, align 2, !tbaa !44
  %2077 = getelementptr inbounds i16, ptr %1994, i64 %2074
  store i16 %2076, ptr %2077, align 2, !tbaa !44
  %2078 = add nuw nsw i64 %2062, 4
  %2079 = icmp eq i64 %2078, %1997
  br i1 %2079, label %2080, label %2061, !llvm.loop !121

2080:                                             ; preds = %2058, %2061, %2025, %2040
  %2081 = shl i64 %1989, 31
  %2082 = add i64 %2081, -4294967296
  %2083 = ashr i64 %2082, 32
  %2084 = getelementptr inbounds i16, ptr %1994, i64 %2083
  %2085 = load i16, ptr %2084, align 2, !tbaa !44
  br label %2086

2086:                                             ; preds = %1978, %2080
  %2087 = phi i64 [ %1990, %2080 ], [ 0, %1978 ]
  %2088 = phi i16 [ %2085, %2080 ], [ -1, %1978 ]
  %2089 = and i64 %2087, 4294967295
  %2090 = getelementptr inbounds i16, ptr %1994, i64 %2089
  store i16 %2088, ptr %2090, align 2, !tbaa !44
  %2091 = trunc i64 %1990 to i16
  %2092 = add i16 %2091, 1
  %2093 = sext i32 %1987 to i64
  %2094 = getelementptr inbounds i16, ptr %1540, i64 %2093
  store i16 %2092, ptr %2094, align 2, !tbaa !44
  %2095 = add nsw i32 %1991, 2
  %2096 = add nsw i32 %2095, %1987
  %2097 = ptrtoint ptr %1964 to i64
  %2098 = sub i64 %2097, %1003
  %2099 = lshr exact i64 %2098, 1
  %2100 = trunc i64 %2099 to i32
  %2101 = add nsw i32 %2096, 1
  %2102 = sext i32 %2101 to i64
  %2103 = getelementptr i16, ptr %1540, i64 %2102
  %2104 = icmp sgt i32 %2100, 0
  br i1 %2104, label %2105, label %2195

2105:                                             ; preds = %2086
  %2106 = and i64 %2099, 4294967295
  %2107 = icmp ult i64 %2106, 8
  br i1 %2107, label %2151, label %2108

2108:                                             ; preds = %2105
  %2109 = shl nsw i64 %2102, 1
  %2110 = add i64 %2109, %1541
  %2111 = sub i64 %2110, %1003
  %2112 = icmp ult i64 %2111, 128
  br i1 %2112, label %2151, label %2113

2113:                                             ; preds = %2108
  %2114 = icmp ult i64 %2106, 64
  br i1 %2114, label %2138, label %2115

2115:                                             ; preds = %2113
  %2116 = and i64 %2099, 63
  %2117 = sub nsw i64 %2106, %2116
  br label %2118

2118:                                             ; preds = %2118, %2115
  %2119 = phi i64 [ 0, %2115 ], [ %2132, %2118 ]
  %2120 = getelementptr inbounds i16, ptr %442, i64 %2119
  %2121 = load <16 x i16>, ptr %2120, align 2, !tbaa !44
  %2122 = getelementptr inbounds i16, ptr %2120, i64 16
  %2123 = load <16 x i16>, ptr %2122, align 2, !tbaa !44
  %2124 = getelementptr inbounds i16, ptr %2120, i64 32
  %2125 = load <16 x i16>, ptr %2124, align 2, !tbaa !44
  %2126 = getelementptr inbounds i16, ptr %2120, i64 48
  %2127 = load <16 x i16>, ptr %2126, align 2, !tbaa !44
  %2128 = getelementptr inbounds i16, ptr %2103, i64 %2119
  store <16 x i16> %2121, ptr %2128, align 2, !tbaa !44
  %2129 = getelementptr inbounds i16, ptr %2128, i64 16
  store <16 x i16> %2123, ptr %2129, align 2, !tbaa !44
  %2130 = getelementptr inbounds i16, ptr %2128, i64 32
  store <16 x i16> %2125, ptr %2130, align 2, !tbaa !44
  %2131 = getelementptr inbounds i16, ptr %2128, i64 48
  store <16 x i16> %2127, ptr %2131, align 2, !tbaa !44
  %2132 = add nuw i64 %2119, 64
  %2133 = icmp eq i64 %2132, %2117
  br i1 %2133, label %2134, label %2118, !llvm.loop !122

2134:                                             ; preds = %2118
  %2135 = icmp eq i64 %2116, 0
  br i1 %2135, label %2189, label %2136

2136:                                             ; preds = %2134
  %2137 = icmp ult i64 %2116, 8
  br i1 %2137, label %2151, label %2138

2138:                                             ; preds = %2113, %2136
  %2139 = phi i64 [ %2117, %2136 ], [ 0, %2113 ]
  %2140 = and i64 %2099, 7
  %2141 = sub nsw i64 %2106, %2140
  br label %2142

2142:                                             ; preds = %2142, %2138
  %2143 = phi i64 [ %2139, %2138 ], [ %2147, %2142 ]
  %2144 = getelementptr inbounds i16, ptr %442, i64 %2143
  %2145 = load <8 x i16>, ptr %2144, align 2, !tbaa !44
  %2146 = getelementptr inbounds i16, ptr %2103, i64 %2143
  store <8 x i16> %2145, ptr %2146, align 2, !tbaa !44
  %2147 = add nuw i64 %2143, 8
  %2148 = icmp eq i64 %2147, %2141
  br i1 %2148, label %2149, label %2142, !llvm.loop !123

2149:                                             ; preds = %2142
  %2150 = icmp eq i64 %2140, 0
  br i1 %2150, label %2189, label %2151

2151:                                             ; preds = %2108, %2105, %2136, %2149
  %2152 = phi i64 [ 0, %2105 ], [ 0, %2108 ], [ %2117, %2136 ], [ %2141, %2149 ]
  %2153 = sub i64 %2099, %2152
  %2154 = xor i64 %2152, -1
  %2155 = add nsw i64 %2106, %2154
  %2156 = and i64 %2153, 3
  %2157 = icmp eq i64 %2156, 0
  br i1 %2157, label %2167, label %2158

2158:                                             ; preds = %2151, %2158
  %2159 = phi i64 [ %2164, %2158 ], [ %2152, %2151 ]
  %2160 = phi i64 [ %2165, %2158 ], [ 0, %2151 ]
  %2161 = getelementptr inbounds i16, ptr %442, i64 %2159
  %2162 = load i16, ptr %2161, align 2, !tbaa !44
  %2163 = getelementptr inbounds i16, ptr %2103, i64 %2159
  store i16 %2162, ptr %2163, align 2, !tbaa !44
  %2164 = add nuw nsw i64 %2159, 1
  %2165 = add i64 %2160, 1
  %2166 = icmp eq i64 %2165, %2156
  br i1 %2166, label %2167, label %2158, !llvm.loop !124

2167:                                             ; preds = %2158, %2151
  %2168 = phi i64 [ %2152, %2151 ], [ %2164, %2158 ]
  %2169 = icmp ult i64 %2155, 3
  br i1 %2169, label %2189, label %2170

2170:                                             ; preds = %2167, %2170
  %2171 = phi i64 [ %2187, %2170 ], [ %2168, %2167 ]
  %2172 = getelementptr inbounds i16, ptr %442, i64 %2171
  %2173 = load i16, ptr %2172, align 2, !tbaa !44
  %2174 = getelementptr inbounds i16, ptr %2103, i64 %2171
  store i16 %2173, ptr %2174, align 2, !tbaa !44
  %2175 = add nuw nsw i64 %2171, 1
  %2176 = getelementptr inbounds i16, ptr %442, i64 %2175
  %2177 = load i16, ptr %2176, align 2, !tbaa !44
  %2178 = getelementptr inbounds i16, ptr %2103, i64 %2175
  store i16 %2177, ptr %2178, align 2, !tbaa !44
  %2179 = add nuw nsw i64 %2171, 2
  %2180 = getelementptr inbounds i16, ptr %442, i64 %2179
  %2181 = load i16, ptr %2180, align 2, !tbaa !44
  %2182 = getelementptr inbounds i16, ptr %2103, i64 %2179
  store i16 %2181, ptr %2182, align 2, !tbaa !44
  %2183 = add nuw nsw i64 %2171, 3
  %2184 = getelementptr inbounds i16, ptr %442, i64 %2183
  %2185 = load i16, ptr %2184, align 2, !tbaa !44
  %2186 = getelementptr inbounds i16, ptr %2103, i64 %2183
  store i16 %2185, ptr %2186, align 2, !tbaa !44
  %2187 = add nuw nsw i64 %2171, 4
  %2188 = icmp eq i64 %2187, %2106
  br i1 %2188, label %2189, label %2170, !llvm.loop !125

2189:                                             ; preds = %2167, %2170, %2134, %2149
  %2190 = shl i64 %2098, 31
  %2191 = add i64 %2190, -4294967296
  %2192 = ashr i64 %2191, 32
  %2193 = getelementptr inbounds i16, ptr %2103, i64 %2192
  %2194 = load i16, ptr %2193, align 2, !tbaa !44
  br label %2195

2195:                                             ; preds = %2086, %2189
  %2196 = phi i64 [ %2099, %2189 ], [ 0, %2086 ]
  %2197 = phi i16 [ %2194, %2189 ], [ -1, %2086 ]
  %2198 = and i64 %2196, 4294967295
  %2199 = getelementptr inbounds i16, ptr %2103, i64 %2198
  store i16 %2197, ptr %2199, align 2, !tbaa !44
  %2200 = trunc i64 %2099 to i16
  %2201 = add i16 %2200, 1
  %2202 = sext i32 %2096 to i64
  %2203 = getelementptr inbounds i16, ptr %1540, i64 %2202
  store i16 %2201, ptr %2203, align 2, !tbaa !44
  %2204 = add nsw i32 %2100, 2
  %2205 = add nsw i32 %2204, %2096
  %2206 = ptrtoint ptr %1963 to i64
  %2207 = sub i64 %2206, %1004
  %2208 = lshr exact i64 %2207, 1
  %2209 = trunc i64 %2208 to i32
  %2210 = add nsw i32 %2205, 1
  %2211 = sext i32 %2210 to i64
  %2212 = getelementptr i16, ptr %1540, i64 %2211
  %2213 = icmp sgt i32 %2209, 0
  br i1 %2213, label %2214, label %2304

2214:                                             ; preds = %2195
  %2215 = and i64 %2208, 4294967295
  %2216 = icmp ult i64 %2215, 8
  br i1 %2216, label %2260, label %2217

2217:                                             ; preds = %2214
  %2218 = shl nsw i64 %2211, 1
  %2219 = add i64 %2218, %1541
  %2220 = sub i64 %2219, %1004
  %2221 = icmp ult i64 %2220, 128
  br i1 %2221, label %2260, label %2222

2222:                                             ; preds = %2217
  %2223 = icmp ult i64 %2215, 64
  br i1 %2223, label %2247, label %2224

2224:                                             ; preds = %2222
  %2225 = and i64 %2208, 63
  %2226 = sub nsw i64 %2215, %2225
  br label %2227

2227:                                             ; preds = %2227, %2224
  %2228 = phi i64 [ 0, %2224 ], [ %2241, %2227 ]
  %2229 = getelementptr inbounds i16, ptr %580, i64 %2228
  %2230 = load <16 x i16>, ptr %2229, align 2, !tbaa !44
  %2231 = getelementptr inbounds i16, ptr %2229, i64 16
  %2232 = load <16 x i16>, ptr %2231, align 2, !tbaa !44
  %2233 = getelementptr inbounds i16, ptr %2229, i64 32
  %2234 = load <16 x i16>, ptr %2233, align 2, !tbaa !44
  %2235 = getelementptr inbounds i16, ptr %2229, i64 48
  %2236 = load <16 x i16>, ptr %2235, align 2, !tbaa !44
  %2237 = getelementptr inbounds i16, ptr %2212, i64 %2228
  store <16 x i16> %2230, ptr %2237, align 2, !tbaa !44
  %2238 = getelementptr inbounds i16, ptr %2237, i64 16
  store <16 x i16> %2232, ptr %2238, align 2, !tbaa !44
  %2239 = getelementptr inbounds i16, ptr %2237, i64 32
  store <16 x i16> %2234, ptr %2239, align 2, !tbaa !44
  %2240 = getelementptr inbounds i16, ptr %2237, i64 48
  store <16 x i16> %2236, ptr %2240, align 2, !tbaa !44
  %2241 = add nuw i64 %2228, 64
  %2242 = icmp eq i64 %2241, %2226
  br i1 %2242, label %2243, label %2227, !llvm.loop !126

2243:                                             ; preds = %2227
  %2244 = icmp eq i64 %2225, 0
  br i1 %2244, label %2298, label %2245

2245:                                             ; preds = %2243
  %2246 = icmp ult i64 %2225, 8
  br i1 %2246, label %2260, label %2247

2247:                                             ; preds = %2222, %2245
  %2248 = phi i64 [ %2226, %2245 ], [ 0, %2222 ]
  %2249 = and i64 %2208, 7
  %2250 = sub nsw i64 %2215, %2249
  br label %2251

2251:                                             ; preds = %2251, %2247
  %2252 = phi i64 [ %2248, %2247 ], [ %2256, %2251 ]
  %2253 = getelementptr inbounds i16, ptr %580, i64 %2252
  %2254 = load <8 x i16>, ptr %2253, align 2, !tbaa !44
  %2255 = getelementptr inbounds i16, ptr %2212, i64 %2252
  store <8 x i16> %2254, ptr %2255, align 2, !tbaa !44
  %2256 = add nuw i64 %2252, 8
  %2257 = icmp eq i64 %2256, %2250
  br i1 %2257, label %2258, label %2251, !llvm.loop !127

2258:                                             ; preds = %2251
  %2259 = icmp eq i64 %2249, 0
  br i1 %2259, label %2298, label %2260

2260:                                             ; preds = %2217, %2214, %2245, %2258
  %2261 = phi i64 [ 0, %2214 ], [ 0, %2217 ], [ %2226, %2245 ], [ %2250, %2258 ]
  %2262 = sub i64 %2208, %2261
  %2263 = xor i64 %2261, -1
  %2264 = add nsw i64 %2215, %2263
  %2265 = and i64 %2262, 3
  %2266 = icmp eq i64 %2265, 0
  br i1 %2266, label %2276, label %2267

2267:                                             ; preds = %2260, %2267
  %2268 = phi i64 [ %2273, %2267 ], [ %2261, %2260 ]
  %2269 = phi i64 [ %2274, %2267 ], [ 0, %2260 ]
  %2270 = getelementptr inbounds i16, ptr %580, i64 %2268
  %2271 = load i16, ptr %2270, align 2, !tbaa !44
  %2272 = getelementptr inbounds i16, ptr %2212, i64 %2268
  store i16 %2271, ptr %2272, align 2, !tbaa !44
  %2273 = add nuw nsw i64 %2268, 1
  %2274 = add i64 %2269, 1
  %2275 = icmp eq i64 %2274, %2265
  br i1 %2275, label %2276, label %2267, !llvm.loop !128

2276:                                             ; preds = %2267, %2260
  %2277 = phi i64 [ %2261, %2260 ], [ %2273, %2267 ]
  %2278 = icmp ult i64 %2264, 3
  br i1 %2278, label %2298, label %2279

2279:                                             ; preds = %2276, %2279
  %2280 = phi i64 [ %2296, %2279 ], [ %2277, %2276 ]
  %2281 = getelementptr inbounds i16, ptr %580, i64 %2280
  %2282 = load i16, ptr %2281, align 2, !tbaa !44
  %2283 = getelementptr inbounds i16, ptr %2212, i64 %2280
  store i16 %2282, ptr %2283, align 2, !tbaa !44
  %2284 = add nuw nsw i64 %2280, 1
  %2285 = getelementptr inbounds i16, ptr %580, i64 %2284
  %2286 = load i16, ptr %2285, align 2, !tbaa !44
  %2287 = getelementptr inbounds i16, ptr %2212, i64 %2284
  store i16 %2286, ptr %2287, align 2, !tbaa !44
  %2288 = add nuw nsw i64 %2280, 2
  %2289 = getelementptr inbounds i16, ptr %580, i64 %2288
  %2290 = load i16, ptr %2289, align 2, !tbaa !44
  %2291 = getelementptr inbounds i16, ptr %2212, i64 %2288
  store i16 %2290, ptr %2291, align 2, !tbaa !44
  %2292 = add nuw nsw i64 %2280, 3
  %2293 = getelementptr inbounds i16, ptr %580, i64 %2292
  %2294 = load i16, ptr %2293, align 2, !tbaa !44
  %2295 = getelementptr inbounds i16, ptr %2212, i64 %2292
  store i16 %2294, ptr %2295, align 2, !tbaa !44
  %2296 = add nuw nsw i64 %2280, 4
  %2297 = icmp eq i64 %2296, %2215
  br i1 %2297, label %2298, label %2279, !llvm.loop !129

2298:                                             ; preds = %2276, %2279, %2243, %2258
  %2299 = shl i64 %2207, 31
  %2300 = add i64 %2299, -4294967296
  %2301 = ashr i64 %2300, 32
  %2302 = getelementptr inbounds i16, ptr %2212, i64 %2301
  %2303 = load i16, ptr %2302, align 2, !tbaa !44
  br label %2304

2304:                                             ; preds = %2195, %2298
  %2305 = phi i64 [ %2208, %2298 ], [ 0, %2195 ]
  %2306 = phi i16 [ %2303, %2298 ], [ -1, %2195 ]
  %2307 = and i64 %2305, 4294967295
  %2308 = getelementptr inbounds i16, ptr %2212, i64 %2307
  store i16 %2306, ptr %2308, align 2, !tbaa !44
  %2309 = trunc i64 %2208 to i16
  %2310 = add i16 %2309, 1
  %2311 = sext i32 %2205 to i64
  %2312 = getelementptr inbounds i16, ptr %1540, i64 %2311
  store i16 %2310, ptr %2312, align 2, !tbaa !44
  %2313 = add nsw i32 %2209, 2
  %2314 = add nsw i32 %2313, %2205
  %2315 = ptrtoint ptr %1962 to i64
  %2316 = sub i64 %2315, %1005
  %2317 = lshr exact i64 %2316, 1
  %2318 = trunc i64 %2317 to i32
  %2319 = add nsw i32 %2314, 1
  %2320 = sext i32 %2319 to i64
  %2321 = getelementptr i16, ptr %1540, i64 %2320
  %2322 = icmp sgt i32 %2318, 0
  br i1 %2322, label %2323, label %2413

2323:                                             ; preds = %2304
  %2324 = and i64 %2317, 4294967295
  %2325 = icmp ult i64 %2324, 8
  br i1 %2325, label %2369, label %2326

2326:                                             ; preds = %2323
  %2327 = shl nsw i64 %2320, 1
  %2328 = add i64 %2327, %1541
  %2329 = sub i64 %2328, %1005
  %2330 = icmp ult i64 %2329, 128
  br i1 %2330, label %2369, label %2331

2331:                                             ; preds = %2326
  %2332 = icmp ult i64 %2324, 64
  br i1 %2332, label %2356, label %2333

2333:                                             ; preds = %2331
  %2334 = and i64 %2317, 63
  %2335 = sub nsw i64 %2324, %2334
  br label %2336

2336:                                             ; preds = %2336, %2333
  %2337 = phi i64 [ 0, %2333 ], [ %2350, %2336 ]
  %2338 = getelementptr inbounds i16, ptr %626, i64 %2337
  %2339 = load <16 x i16>, ptr %2338, align 2, !tbaa !44
  %2340 = getelementptr inbounds i16, ptr %2338, i64 16
  %2341 = load <16 x i16>, ptr %2340, align 2, !tbaa !44
  %2342 = getelementptr inbounds i16, ptr %2338, i64 32
  %2343 = load <16 x i16>, ptr %2342, align 2, !tbaa !44
  %2344 = getelementptr inbounds i16, ptr %2338, i64 48
  %2345 = load <16 x i16>, ptr %2344, align 2, !tbaa !44
  %2346 = getelementptr inbounds i16, ptr %2321, i64 %2337
  store <16 x i16> %2339, ptr %2346, align 2, !tbaa !44
  %2347 = getelementptr inbounds i16, ptr %2346, i64 16
  store <16 x i16> %2341, ptr %2347, align 2, !tbaa !44
  %2348 = getelementptr inbounds i16, ptr %2346, i64 32
  store <16 x i16> %2343, ptr %2348, align 2, !tbaa !44
  %2349 = getelementptr inbounds i16, ptr %2346, i64 48
  store <16 x i16> %2345, ptr %2349, align 2, !tbaa !44
  %2350 = add nuw i64 %2337, 64
  %2351 = icmp eq i64 %2350, %2335
  br i1 %2351, label %2352, label %2336, !llvm.loop !130

2352:                                             ; preds = %2336
  %2353 = icmp eq i64 %2334, 0
  br i1 %2353, label %2407, label %2354

2354:                                             ; preds = %2352
  %2355 = icmp ult i64 %2334, 8
  br i1 %2355, label %2369, label %2356

2356:                                             ; preds = %2331, %2354
  %2357 = phi i64 [ %2335, %2354 ], [ 0, %2331 ]
  %2358 = and i64 %2317, 7
  %2359 = sub nsw i64 %2324, %2358
  br label %2360

2360:                                             ; preds = %2360, %2356
  %2361 = phi i64 [ %2357, %2356 ], [ %2365, %2360 ]
  %2362 = getelementptr inbounds i16, ptr %626, i64 %2361
  %2363 = load <8 x i16>, ptr %2362, align 2, !tbaa !44
  %2364 = getelementptr inbounds i16, ptr %2321, i64 %2361
  store <8 x i16> %2363, ptr %2364, align 2, !tbaa !44
  %2365 = add nuw i64 %2361, 8
  %2366 = icmp eq i64 %2365, %2359
  br i1 %2366, label %2367, label %2360, !llvm.loop !131

2367:                                             ; preds = %2360
  %2368 = icmp eq i64 %2358, 0
  br i1 %2368, label %2407, label %2369

2369:                                             ; preds = %2326, %2323, %2354, %2367
  %2370 = phi i64 [ 0, %2323 ], [ 0, %2326 ], [ %2335, %2354 ], [ %2359, %2367 ]
  %2371 = sub i64 %2317, %2370
  %2372 = xor i64 %2370, -1
  %2373 = add nsw i64 %2324, %2372
  %2374 = and i64 %2371, 3
  %2375 = icmp eq i64 %2374, 0
  br i1 %2375, label %2385, label %2376

2376:                                             ; preds = %2369, %2376
  %2377 = phi i64 [ %2382, %2376 ], [ %2370, %2369 ]
  %2378 = phi i64 [ %2383, %2376 ], [ 0, %2369 ]
  %2379 = getelementptr inbounds i16, ptr %626, i64 %2377
  %2380 = load i16, ptr %2379, align 2, !tbaa !44
  %2381 = getelementptr inbounds i16, ptr %2321, i64 %2377
  store i16 %2380, ptr %2381, align 2, !tbaa !44
  %2382 = add nuw nsw i64 %2377, 1
  %2383 = add i64 %2378, 1
  %2384 = icmp eq i64 %2383, %2374
  br i1 %2384, label %2385, label %2376, !llvm.loop !132

2385:                                             ; preds = %2376, %2369
  %2386 = phi i64 [ %2370, %2369 ], [ %2382, %2376 ]
  %2387 = icmp ult i64 %2373, 3
  br i1 %2387, label %2407, label %2388

2388:                                             ; preds = %2385, %2388
  %2389 = phi i64 [ %2405, %2388 ], [ %2386, %2385 ]
  %2390 = getelementptr inbounds i16, ptr %626, i64 %2389
  %2391 = load i16, ptr %2390, align 2, !tbaa !44
  %2392 = getelementptr inbounds i16, ptr %2321, i64 %2389
  store i16 %2391, ptr %2392, align 2, !tbaa !44
  %2393 = add nuw nsw i64 %2389, 1
  %2394 = getelementptr inbounds i16, ptr %626, i64 %2393
  %2395 = load i16, ptr %2394, align 2, !tbaa !44
  %2396 = getelementptr inbounds i16, ptr %2321, i64 %2393
  store i16 %2395, ptr %2396, align 2, !tbaa !44
  %2397 = add nuw nsw i64 %2389, 2
  %2398 = getelementptr inbounds i16, ptr %626, i64 %2397
  %2399 = load i16, ptr %2398, align 2, !tbaa !44
  %2400 = getelementptr inbounds i16, ptr %2321, i64 %2397
  store i16 %2399, ptr %2400, align 2, !tbaa !44
  %2401 = add nuw nsw i64 %2389, 3
  %2402 = getelementptr inbounds i16, ptr %626, i64 %2401
  %2403 = load i16, ptr %2402, align 2, !tbaa !44
  %2404 = getelementptr inbounds i16, ptr %2321, i64 %2401
  store i16 %2403, ptr %2404, align 2, !tbaa !44
  %2405 = add nuw nsw i64 %2389, 4
  %2406 = icmp eq i64 %2405, %2324
  br i1 %2406, label %2407, label %2388, !llvm.loop !133

2407:                                             ; preds = %2385, %2388, %2352, %2367
  %2408 = shl i64 %2316, 31
  %2409 = add i64 %2408, -4294967296
  %2410 = ashr i64 %2409, 32
  %2411 = getelementptr inbounds i16, ptr %2321, i64 %2410
  %2412 = load i16, ptr %2411, align 2, !tbaa !44
  br label %2413

2413:                                             ; preds = %2304, %2407
  %2414 = phi i64 [ %2317, %2407 ], [ 0, %2304 ]
  %2415 = phi i16 [ %2412, %2407 ], [ -1, %2304 ]
  %2416 = and i64 %2414, 4294967295
  %2417 = getelementptr inbounds i16, ptr %2321, i64 %2416
  store i16 %2415, ptr %2417, align 2, !tbaa !44
  %2418 = trunc i64 %2317 to i16
  %2419 = add i16 %2418, 1
  %2420 = sext i32 %2314 to i64
  %2421 = getelementptr inbounds i16, ptr %1540, i64 %2420
  store i16 %2419, ptr %2421, align 2, !tbaa !44
  %2422 = add nsw i32 %2318, 2
  %2423 = add nsw i32 %2422, %2314
  store i32 %2423, ptr %17, align 8, !tbaa !17
  %2424 = ptrtoint ptr %1961 to i64
  %2425 = sub i64 %2424, %1006
  %2426 = lshr exact i64 %2425, 1
  %2427 = trunc i64 %2426 to i32
  %2428 = add nsw i32 %2423, 1
  %2429 = sext i32 %2428 to i64
  %2430 = getelementptr i16, ptr %1540, i64 %2429
  %2431 = icmp sgt i32 %2427, 0
  br i1 %2431, label %2432, label %2522

2432:                                             ; preds = %2413
  %2433 = and i64 %2426, 4294967295
  %2434 = icmp ult i64 %2433, 8
  br i1 %2434, label %2478, label %2435

2435:                                             ; preds = %2432
  %2436 = shl nsw i64 %2429, 1
  %2437 = add i64 %2436, %1541
  %2438 = sub i64 %2437, %1006
  %2439 = icmp ult i64 %2438, 128
  br i1 %2439, label %2478, label %2440

2440:                                             ; preds = %2435
  %2441 = icmp ult i64 %2433, 64
  br i1 %2441, label %2465, label %2442

2442:                                             ; preds = %2440
  %2443 = and i64 %2426, 63
  %2444 = sub nsw i64 %2433, %2443
  br label %2445

2445:                                             ; preds = %2445, %2442
  %2446 = phi i64 [ 0, %2442 ], [ %2459, %2445 ]
  %2447 = getelementptr inbounds i16, ptr %672, i64 %2446
  %2448 = load <16 x i16>, ptr %2447, align 2, !tbaa !44
  %2449 = getelementptr inbounds i16, ptr %2447, i64 16
  %2450 = load <16 x i16>, ptr %2449, align 2, !tbaa !44
  %2451 = getelementptr inbounds i16, ptr %2447, i64 32
  %2452 = load <16 x i16>, ptr %2451, align 2, !tbaa !44
  %2453 = getelementptr inbounds i16, ptr %2447, i64 48
  %2454 = load <16 x i16>, ptr %2453, align 2, !tbaa !44
  %2455 = getelementptr inbounds i16, ptr %2430, i64 %2446
  store <16 x i16> %2448, ptr %2455, align 2, !tbaa !44
  %2456 = getelementptr inbounds i16, ptr %2455, i64 16
  store <16 x i16> %2450, ptr %2456, align 2, !tbaa !44
  %2457 = getelementptr inbounds i16, ptr %2455, i64 32
  store <16 x i16> %2452, ptr %2457, align 2, !tbaa !44
  %2458 = getelementptr inbounds i16, ptr %2455, i64 48
  store <16 x i16> %2454, ptr %2458, align 2, !tbaa !44
  %2459 = add nuw i64 %2446, 64
  %2460 = icmp eq i64 %2459, %2444
  br i1 %2460, label %2461, label %2445, !llvm.loop !134

2461:                                             ; preds = %2445
  %2462 = icmp eq i64 %2443, 0
  br i1 %2462, label %2516, label %2463

2463:                                             ; preds = %2461
  %2464 = icmp ult i64 %2443, 8
  br i1 %2464, label %2478, label %2465

2465:                                             ; preds = %2440, %2463
  %2466 = phi i64 [ %2444, %2463 ], [ 0, %2440 ]
  %2467 = and i64 %2426, 7
  %2468 = sub nsw i64 %2433, %2467
  br label %2469

2469:                                             ; preds = %2469, %2465
  %2470 = phi i64 [ %2466, %2465 ], [ %2474, %2469 ]
  %2471 = getelementptr inbounds i16, ptr %672, i64 %2470
  %2472 = load <8 x i16>, ptr %2471, align 2, !tbaa !44
  %2473 = getelementptr inbounds i16, ptr %2430, i64 %2470
  store <8 x i16> %2472, ptr %2473, align 2, !tbaa !44
  %2474 = add nuw i64 %2470, 8
  %2475 = icmp eq i64 %2474, %2468
  br i1 %2475, label %2476, label %2469, !llvm.loop !135

2476:                                             ; preds = %2469
  %2477 = icmp eq i64 %2467, 0
  br i1 %2477, label %2516, label %2478

2478:                                             ; preds = %2435, %2432, %2463, %2476
  %2479 = phi i64 [ 0, %2432 ], [ 0, %2435 ], [ %2444, %2463 ], [ %2468, %2476 ]
  %2480 = sub i64 %2426, %2479
  %2481 = xor i64 %2479, -1
  %2482 = add nsw i64 %2433, %2481
  %2483 = and i64 %2480, 3
  %2484 = icmp eq i64 %2483, 0
  br i1 %2484, label %2494, label %2485

2485:                                             ; preds = %2478, %2485
  %2486 = phi i64 [ %2491, %2485 ], [ %2479, %2478 ]
  %2487 = phi i64 [ %2492, %2485 ], [ 0, %2478 ]
  %2488 = getelementptr inbounds i16, ptr %672, i64 %2486
  %2489 = load i16, ptr %2488, align 2, !tbaa !44
  %2490 = getelementptr inbounds i16, ptr %2430, i64 %2486
  store i16 %2489, ptr %2490, align 2, !tbaa !44
  %2491 = add nuw nsw i64 %2486, 1
  %2492 = add i64 %2487, 1
  %2493 = icmp eq i64 %2492, %2483
  br i1 %2493, label %2494, label %2485, !llvm.loop !136

2494:                                             ; preds = %2485, %2478
  %2495 = phi i64 [ %2479, %2478 ], [ %2491, %2485 ]
  %2496 = icmp ult i64 %2482, 3
  br i1 %2496, label %2516, label %2497

2497:                                             ; preds = %2494, %2497
  %2498 = phi i64 [ %2514, %2497 ], [ %2495, %2494 ]
  %2499 = getelementptr inbounds i16, ptr %672, i64 %2498
  %2500 = load i16, ptr %2499, align 2, !tbaa !44
  %2501 = getelementptr inbounds i16, ptr %2430, i64 %2498
  store i16 %2500, ptr %2501, align 2, !tbaa !44
  %2502 = add nuw nsw i64 %2498, 1
  %2503 = getelementptr inbounds i16, ptr %672, i64 %2502
  %2504 = load i16, ptr %2503, align 2, !tbaa !44
  %2505 = getelementptr inbounds i16, ptr %2430, i64 %2502
  store i16 %2504, ptr %2505, align 2, !tbaa !44
  %2506 = add nuw nsw i64 %2498, 2
  %2507 = getelementptr inbounds i16, ptr %672, i64 %2506
  %2508 = load i16, ptr %2507, align 2, !tbaa !44
  %2509 = getelementptr inbounds i16, ptr %2430, i64 %2506
  store i16 %2508, ptr %2509, align 2, !tbaa !44
  %2510 = add nuw nsw i64 %2498, 3
  %2511 = getelementptr inbounds i16, ptr %672, i64 %2510
  %2512 = load i16, ptr %2511, align 2, !tbaa !44
  %2513 = getelementptr inbounds i16, ptr %2430, i64 %2510
  store i16 %2512, ptr %2513, align 2, !tbaa !44
  %2514 = add nuw nsw i64 %2498, 4
  %2515 = icmp eq i64 %2514, %2433
  br i1 %2515, label %2516, label %2497, !llvm.loop !137

2516:                                             ; preds = %2494, %2497, %2461, %2476
  %2517 = shl i64 %2425, 31
  %2518 = add i64 %2517, -4294967296
  %2519 = ashr i64 %2518, 32
  %2520 = getelementptr inbounds i16, ptr %2430, i64 %2519
  %2521 = load i16, ptr %2520, align 2, !tbaa !44
  br label %2522

2522:                                             ; preds = %2413, %2516
  %2523 = phi i64 [ %2426, %2516 ], [ 0, %2413 ]
  %2524 = phi i16 [ %2521, %2516 ], [ -1, %2413 ]
  %2525 = and i64 %2523, 4294967295
  %2526 = getelementptr inbounds i16, ptr %2430, i64 %2525
  store i16 %2524, ptr %2526, align 2, !tbaa !44
  %2527 = trunc i64 %2426 to i16
  %2528 = add i16 %2527, 1
  %2529 = sext i32 %2423 to i64
  %2530 = getelementptr inbounds i16, ptr %1540, i64 %2529
  store i16 %2528, ptr %2530, align 2, !tbaa !44
  %2531 = add nsw i32 %2427, 2
  %2532 = add nsw i32 %2531, %2423
  %2533 = ptrtoint ptr %1960 to i64
  %2534 = sub i64 %2533, %1007
  %2535 = lshr exact i64 %2534, 1
  %2536 = trunc i64 %2535 to i32
  %2537 = add nsw i32 %2532, 1
  %2538 = sext i32 %2537 to i64
  %2539 = getelementptr i16, ptr %1540, i64 %2538
  %2540 = icmp sgt i32 %2536, 0
  br i1 %2540, label %2541, label %2631

2541:                                             ; preds = %2522
  %2542 = and i64 %2535, 4294967295
  %2543 = icmp ult i64 %2542, 8
  br i1 %2543, label %2587, label %2544

2544:                                             ; preds = %2541
  %2545 = shl nsw i64 %2538, 1
  %2546 = add i64 %2545, %1541
  %2547 = sub i64 %2546, %1007
  %2548 = icmp ult i64 %2547, 128
  br i1 %2548, label %2587, label %2549

2549:                                             ; preds = %2544
  %2550 = icmp ult i64 %2542, 64
  br i1 %2550, label %2574, label %2551

2551:                                             ; preds = %2549
  %2552 = and i64 %2535, 63
  %2553 = sub nsw i64 %2542, %2552
  br label %2554

2554:                                             ; preds = %2554, %2551
  %2555 = phi i64 [ 0, %2551 ], [ %2568, %2554 ]
  %2556 = getelementptr inbounds i16, ptr %718, i64 %2555
  %2557 = load <16 x i16>, ptr %2556, align 2, !tbaa !44
  %2558 = getelementptr inbounds i16, ptr %2556, i64 16
  %2559 = load <16 x i16>, ptr %2558, align 2, !tbaa !44
  %2560 = getelementptr inbounds i16, ptr %2556, i64 32
  %2561 = load <16 x i16>, ptr %2560, align 2, !tbaa !44
  %2562 = getelementptr inbounds i16, ptr %2556, i64 48
  %2563 = load <16 x i16>, ptr %2562, align 2, !tbaa !44
  %2564 = getelementptr inbounds i16, ptr %2539, i64 %2555
  store <16 x i16> %2557, ptr %2564, align 2, !tbaa !44
  %2565 = getelementptr inbounds i16, ptr %2564, i64 16
  store <16 x i16> %2559, ptr %2565, align 2, !tbaa !44
  %2566 = getelementptr inbounds i16, ptr %2564, i64 32
  store <16 x i16> %2561, ptr %2566, align 2, !tbaa !44
  %2567 = getelementptr inbounds i16, ptr %2564, i64 48
  store <16 x i16> %2563, ptr %2567, align 2, !tbaa !44
  %2568 = add nuw i64 %2555, 64
  %2569 = icmp eq i64 %2568, %2553
  br i1 %2569, label %2570, label %2554, !llvm.loop !138

2570:                                             ; preds = %2554
  %2571 = icmp eq i64 %2552, 0
  br i1 %2571, label %2625, label %2572

2572:                                             ; preds = %2570
  %2573 = icmp ult i64 %2552, 8
  br i1 %2573, label %2587, label %2574

2574:                                             ; preds = %2549, %2572
  %2575 = phi i64 [ %2553, %2572 ], [ 0, %2549 ]
  %2576 = and i64 %2535, 7
  %2577 = sub nsw i64 %2542, %2576
  br label %2578

2578:                                             ; preds = %2578, %2574
  %2579 = phi i64 [ %2575, %2574 ], [ %2583, %2578 ]
  %2580 = getelementptr inbounds i16, ptr %718, i64 %2579
  %2581 = load <8 x i16>, ptr %2580, align 2, !tbaa !44
  %2582 = getelementptr inbounds i16, ptr %2539, i64 %2579
  store <8 x i16> %2581, ptr %2582, align 2, !tbaa !44
  %2583 = add nuw i64 %2579, 8
  %2584 = icmp eq i64 %2583, %2577
  br i1 %2584, label %2585, label %2578, !llvm.loop !139

2585:                                             ; preds = %2578
  %2586 = icmp eq i64 %2576, 0
  br i1 %2586, label %2625, label %2587

2587:                                             ; preds = %2544, %2541, %2572, %2585
  %2588 = phi i64 [ 0, %2541 ], [ 0, %2544 ], [ %2553, %2572 ], [ %2577, %2585 ]
  %2589 = sub i64 %2535, %2588
  %2590 = xor i64 %2588, -1
  %2591 = add nsw i64 %2542, %2590
  %2592 = and i64 %2589, 3
  %2593 = icmp eq i64 %2592, 0
  br i1 %2593, label %2603, label %2594

2594:                                             ; preds = %2587, %2594
  %2595 = phi i64 [ %2600, %2594 ], [ %2588, %2587 ]
  %2596 = phi i64 [ %2601, %2594 ], [ 0, %2587 ]
  %2597 = getelementptr inbounds i16, ptr %718, i64 %2595
  %2598 = load i16, ptr %2597, align 2, !tbaa !44
  %2599 = getelementptr inbounds i16, ptr %2539, i64 %2595
  store i16 %2598, ptr %2599, align 2, !tbaa !44
  %2600 = add nuw nsw i64 %2595, 1
  %2601 = add i64 %2596, 1
  %2602 = icmp eq i64 %2601, %2592
  br i1 %2602, label %2603, label %2594, !llvm.loop !140

2603:                                             ; preds = %2594, %2587
  %2604 = phi i64 [ %2588, %2587 ], [ %2600, %2594 ]
  %2605 = icmp ult i64 %2591, 3
  br i1 %2605, label %2625, label %2606

2606:                                             ; preds = %2603, %2606
  %2607 = phi i64 [ %2623, %2606 ], [ %2604, %2603 ]
  %2608 = getelementptr inbounds i16, ptr %718, i64 %2607
  %2609 = load i16, ptr %2608, align 2, !tbaa !44
  %2610 = getelementptr inbounds i16, ptr %2539, i64 %2607
  store i16 %2609, ptr %2610, align 2, !tbaa !44
  %2611 = add nuw nsw i64 %2607, 1
  %2612 = getelementptr inbounds i16, ptr %718, i64 %2611
  %2613 = load i16, ptr %2612, align 2, !tbaa !44
  %2614 = getelementptr inbounds i16, ptr %2539, i64 %2611
  store i16 %2613, ptr %2614, align 2, !tbaa !44
  %2615 = add nuw nsw i64 %2607, 2
  %2616 = getelementptr inbounds i16, ptr %718, i64 %2615
  %2617 = load i16, ptr %2616, align 2, !tbaa !44
  %2618 = getelementptr inbounds i16, ptr %2539, i64 %2615
  store i16 %2617, ptr %2618, align 2, !tbaa !44
  %2619 = add nuw nsw i64 %2607, 3
  %2620 = getelementptr inbounds i16, ptr %718, i64 %2619
  %2621 = load i16, ptr %2620, align 2, !tbaa !44
  %2622 = getelementptr inbounds i16, ptr %2539, i64 %2619
  store i16 %2621, ptr %2622, align 2, !tbaa !44
  %2623 = add nuw nsw i64 %2607, 4
  %2624 = icmp eq i64 %2623, %2542
  br i1 %2624, label %2625, label %2606, !llvm.loop !141

2625:                                             ; preds = %2603, %2606, %2570, %2585
  %2626 = shl i64 %2534, 31
  %2627 = add i64 %2626, -4294967296
  %2628 = ashr i64 %2627, 32
  %2629 = getelementptr inbounds i16, ptr %2539, i64 %2628
  %2630 = load i16, ptr %2629, align 2, !tbaa !44
  br label %2631

2631:                                             ; preds = %2522, %2625
  %2632 = phi i64 [ %2535, %2625 ], [ 0, %2522 ]
  %2633 = phi i16 [ %2630, %2625 ], [ -1, %2522 ]
  %2634 = and i64 %2632, 4294967295
  %2635 = getelementptr inbounds i16, ptr %2539, i64 %2634
  store i16 %2633, ptr %2635, align 2, !tbaa !44
  %2636 = trunc i64 %2535 to i16
  %2637 = add i16 %2636, 1
  %2638 = sext i32 %2532 to i64
  %2639 = getelementptr inbounds i16, ptr %1540, i64 %2638
  store i16 %2637, ptr %2639, align 2, !tbaa !44
  %2640 = add nsw i32 %2536, 2
  %2641 = add nsw i32 %2640, %2532
  %2642 = ptrtoint ptr %1959 to i64
  %2643 = sub i64 %2642, %1008
  %2644 = lshr exact i64 %2643, 1
  %2645 = trunc i64 %2644 to i32
  %2646 = add nsw i32 %2641, 1
  %2647 = sext i32 %2646 to i64
  %2648 = getelementptr i16, ptr %1540, i64 %2647
  %2649 = icmp sgt i32 %2645, 0
  br i1 %2649, label %2650, label %2740

2650:                                             ; preds = %2631
  %2651 = and i64 %2644, 4294967295
  %2652 = icmp ult i64 %2651, 8
  br i1 %2652, label %2696, label %2653

2653:                                             ; preds = %2650
  %2654 = shl nsw i64 %2647, 1
  %2655 = add i64 %2654, %1541
  %2656 = sub i64 %2655, %1008
  %2657 = icmp ult i64 %2656, 128
  br i1 %2657, label %2696, label %2658

2658:                                             ; preds = %2653
  %2659 = icmp ult i64 %2651, 64
  br i1 %2659, label %2683, label %2660

2660:                                             ; preds = %2658
  %2661 = and i64 %2644, 63
  %2662 = sub nsw i64 %2651, %2661
  br label %2663

2663:                                             ; preds = %2663, %2660
  %2664 = phi i64 [ 0, %2660 ], [ %2677, %2663 ]
  %2665 = getelementptr inbounds i16, ptr %764, i64 %2664
  %2666 = load <16 x i16>, ptr %2665, align 2, !tbaa !44
  %2667 = getelementptr inbounds i16, ptr %2665, i64 16
  %2668 = load <16 x i16>, ptr %2667, align 2, !tbaa !44
  %2669 = getelementptr inbounds i16, ptr %2665, i64 32
  %2670 = load <16 x i16>, ptr %2669, align 2, !tbaa !44
  %2671 = getelementptr inbounds i16, ptr %2665, i64 48
  %2672 = load <16 x i16>, ptr %2671, align 2, !tbaa !44
  %2673 = getelementptr inbounds i16, ptr %2648, i64 %2664
  store <16 x i16> %2666, ptr %2673, align 2, !tbaa !44
  %2674 = getelementptr inbounds i16, ptr %2673, i64 16
  store <16 x i16> %2668, ptr %2674, align 2, !tbaa !44
  %2675 = getelementptr inbounds i16, ptr %2673, i64 32
  store <16 x i16> %2670, ptr %2675, align 2, !tbaa !44
  %2676 = getelementptr inbounds i16, ptr %2673, i64 48
  store <16 x i16> %2672, ptr %2676, align 2, !tbaa !44
  %2677 = add nuw i64 %2664, 64
  %2678 = icmp eq i64 %2677, %2662
  br i1 %2678, label %2679, label %2663, !llvm.loop !142

2679:                                             ; preds = %2663
  %2680 = icmp eq i64 %2661, 0
  br i1 %2680, label %2734, label %2681

2681:                                             ; preds = %2679
  %2682 = icmp ult i64 %2661, 8
  br i1 %2682, label %2696, label %2683

2683:                                             ; preds = %2658, %2681
  %2684 = phi i64 [ %2662, %2681 ], [ 0, %2658 ]
  %2685 = and i64 %2644, 7
  %2686 = sub nsw i64 %2651, %2685
  br label %2687

2687:                                             ; preds = %2687, %2683
  %2688 = phi i64 [ %2684, %2683 ], [ %2692, %2687 ]
  %2689 = getelementptr inbounds i16, ptr %764, i64 %2688
  %2690 = load <8 x i16>, ptr %2689, align 2, !tbaa !44
  %2691 = getelementptr inbounds i16, ptr %2648, i64 %2688
  store <8 x i16> %2690, ptr %2691, align 2, !tbaa !44
  %2692 = add nuw i64 %2688, 8
  %2693 = icmp eq i64 %2692, %2686
  br i1 %2693, label %2694, label %2687, !llvm.loop !143

2694:                                             ; preds = %2687
  %2695 = icmp eq i64 %2685, 0
  br i1 %2695, label %2734, label %2696

2696:                                             ; preds = %2653, %2650, %2681, %2694
  %2697 = phi i64 [ 0, %2650 ], [ 0, %2653 ], [ %2662, %2681 ], [ %2686, %2694 ]
  %2698 = sub i64 %2644, %2697
  %2699 = xor i64 %2697, -1
  %2700 = add nsw i64 %2651, %2699
  %2701 = and i64 %2698, 3
  %2702 = icmp eq i64 %2701, 0
  br i1 %2702, label %2712, label %2703

2703:                                             ; preds = %2696, %2703
  %2704 = phi i64 [ %2709, %2703 ], [ %2697, %2696 ]
  %2705 = phi i64 [ %2710, %2703 ], [ 0, %2696 ]
  %2706 = getelementptr inbounds i16, ptr %764, i64 %2704
  %2707 = load i16, ptr %2706, align 2, !tbaa !44
  %2708 = getelementptr inbounds i16, ptr %2648, i64 %2704
  store i16 %2707, ptr %2708, align 2, !tbaa !44
  %2709 = add nuw nsw i64 %2704, 1
  %2710 = add i64 %2705, 1
  %2711 = icmp eq i64 %2710, %2701
  br i1 %2711, label %2712, label %2703, !llvm.loop !144

2712:                                             ; preds = %2703, %2696
  %2713 = phi i64 [ %2697, %2696 ], [ %2709, %2703 ]
  %2714 = icmp ult i64 %2700, 3
  br i1 %2714, label %2734, label %2715

2715:                                             ; preds = %2712, %2715
  %2716 = phi i64 [ %2732, %2715 ], [ %2713, %2712 ]
  %2717 = getelementptr inbounds i16, ptr %764, i64 %2716
  %2718 = load i16, ptr %2717, align 2, !tbaa !44
  %2719 = getelementptr inbounds i16, ptr %2648, i64 %2716
  store i16 %2718, ptr %2719, align 2, !tbaa !44
  %2720 = add nuw nsw i64 %2716, 1
  %2721 = getelementptr inbounds i16, ptr %764, i64 %2720
  %2722 = load i16, ptr %2721, align 2, !tbaa !44
  %2723 = getelementptr inbounds i16, ptr %2648, i64 %2720
  store i16 %2722, ptr %2723, align 2, !tbaa !44
  %2724 = add nuw nsw i64 %2716, 2
  %2725 = getelementptr inbounds i16, ptr %764, i64 %2724
  %2726 = load i16, ptr %2725, align 2, !tbaa !44
  %2727 = getelementptr inbounds i16, ptr %2648, i64 %2724
  store i16 %2726, ptr %2727, align 2, !tbaa !44
  %2728 = add nuw nsw i64 %2716, 3
  %2729 = getelementptr inbounds i16, ptr %764, i64 %2728
  %2730 = load i16, ptr %2729, align 2, !tbaa !44
  %2731 = getelementptr inbounds i16, ptr %2648, i64 %2728
  store i16 %2730, ptr %2731, align 2, !tbaa !44
  %2732 = add nuw nsw i64 %2716, 4
  %2733 = icmp eq i64 %2732, %2651
  br i1 %2733, label %2734, label %2715, !llvm.loop !145

2734:                                             ; preds = %2712, %2715, %2679, %2694
  %2735 = shl i64 %2643, 31
  %2736 = add i64 %2735, -4294967296
  %2737 = ashr i64 %2736, 32
  %2738 = getelementptr inbounds i16, ptr %2648, i64 %2737
  %2739 = load i16, ptr %2738, align 2, !tbaa !44
  br label %2740

2740:                                             ; preds = %2631, %2734
  %2741 = phi i64 [ %2644, %2734 ], [ 0, %2631 ]
  %2742 = phi i16 [ %2739, %2734 ], [ -1, %2631 ]
  %2743 = and i64 %2741, 4294967295
  %2744 = getelementptr inbounds i16, ptr %2648, i64 %2743
  store i16 %2742, ptr %2744, align 2, !tbaa !44
  %2745 = trunc i64 %2644 to i16
  %2746 = add i16 %2745, 1
  %2747 = sext i32 %2641 to i64
  %2748 = getelementptr inbounds i16, ptr %1540, i64 %2747
  store i16 %2746, ptr %2748, align 2, !tbaa !44
  %2749 = add nsw i32 %2645, 2
  %2750 = add nsw i32 %2749, %2641
  %2751 = ptrtoint ptr %1958 to i64
  %2752 = sub i64 %2751, %1009
  %2753 = lshr exact i64 %2752, 1
  %2754 = trunc i64 %2753 to i32
  %2755 = add nsw i32 %2750, 1
  %2756 = sext i32 %2755 to i64
  %2757 = getelementptr i16, ptr %1540, i64 %2756
  %2758 = icmp sgt i32 %2754, 0
  br i1 %2758, label %2759, label %2849

2759:                                             ; preds = %2740
  %2760 = and i64 %2753, 4294967295
  %2761 = icmp ult i64 %2760, 8
  br i1 %2761, label %2805, label %2762

2762:                                             ; preds = %2759
  %2763 = shl nsw i64 %2756, 1
  %2764 = add i64 %2763, %1541
  %2765 = sub i64 %2764, %1009
  %2766 = icmp ult i64 %2765, 128
  br i1 %2766, label %2805, label %2767

2767:                                             ; preds = %2762
  %2768 = icmp ult i64 %2760, 64
  br i1 %2768, label %2792, label %2769

2769:                                             ; preds = %2767
  %2770 = and i64 %2753, 63
  %2771 = sub nsw i64 %2760, %2770
  br label %2772

2772:                                             ; preds = %2772, %2769
  %2773 = phi i64 [ 0, %2769 ], [ %2786, %2772 ]
  %2774 = getelementptr inbounds i16, ptr %810, i64 %2773
  %2775 = load <16 x i16>, ptr %2774, align 2, !tbaa !44
  %2776 = getelementptr inbounds i16, ptr %2774, i64 16
  %2777 = load <16 x i16>, ptr %2776, align 2, !tbaa !44
  %2778 = getelementptr inbounds i16, ptr %2774, i64 32
  %2779 = load <16 x i16>, ptr %2778, align 2, !tbaa !44
  %2780 = getelementptr inbounds i16, ptr %2774, i64 48
  %2781 = load <16 x i16>, ptr %2780, align 2, !tbaa !44
  %2782 = getelementptr inbounds i16, ptr %2757, i64 %2773
  store <16 x i16> %2775, ptr %2782, align 2, !tbaa !44
  %2783 = getelementptr inbounds i16, ptr %2782, i64 16
  store <16 x i16> %2777, ptr %2783, align 2, !tbaa !44
  %2784 = getelementptr inbounds i16, ptr %2782, i64 32
  store <16 x i16> %2779, ptr %2784, align 2, !tbaa !44
  %2785 = getelementptr inbounds i16, ptr %2782, i64 48
  store <16 x i16> %2781, ptr %2785, align 2, !tbaa !44
  %2786 = add nuw i64 %2773, 64
  %2787 = icmp eq i64 %2786, %2771
  br i1 %2787, label %2788, label %2772, !llvm.loop !146

2788:                                             ; preds = %2772
  %2789 = icmp eq i64 %2770, 0
  br i1 %2789, label %2843, label %2790

2790:                                             ; preds = %2788
  %2791 = icmp ult i64 %2770, 8
  br i1 %2791, label %2805, label %2792

2792:                                             ; preds = %2767, %2790
  %2793 = phi i64 [ %2771, %2790 ], [ 0, %2767 ]
  %2794 = and i64 %2753, 7
  %2795 = sub nsw i64 %2760, %2794
  br label %2796

2796:                                             ; preds = %2796, %2792
  %2797 = phi i64 [ %2793, %2792 ], [ %2801, %2796 ]
  %2798 = getelementptr inbounds i16, ptr %810, i64 %2797
  %2799 = load <8 x i16>, ptr %2798, align 2, !tbaa !44
  %2800 = getelementptr inbounds i16, ptr %2757, i64 %2797
  store <8 x i16> %2799, ptr %2800, align 2, !tbaa !44
  %2801 = add nuw i64 %2797, 8
  %2802 = icmp eq i64 %2801, %2795
  br i1 %2802, label %2803, label %2796, !llvm.loop !147

2803:                                             ; preds = %2796
  %2804 = icmp eq i64 %2794, 0
  br i1 %2804, label %2843, label %2805

2805:                                             ; preds = %2762, %2759, %2790, %2803
  %2806 = phi i64 [ 0, %2759 ], [ 0, %2762 ], [ %2771, %2790 ], [ %2795, %2803 ]
  %2807 = sub i64 %2753, %2806
  %2808 = xor i64 %2806, -1
  %2809 = add nsw i64 %2760, %2808
  %2810 = and i64 %2807, 3
  %2811 = icmp eq i64 %2810, 0
  br i1 %2811, label %2821, label %2812

2812:                                             ; preds = %2805, %2812
  %2813 = phi i64 [ %2818, %2812 ], [ %2806, %2805 ]
  %2814 = phi i64 [ %2819, %2812 ], [ 0, %2805 ]
  %2815 = getelementptr inbounds i16, ptr %810, i64 %2813
  %2816 = load i16, ptr %2815, align 2, !tbaa !44
  %2817 = getelementptr inbounds i16, ptr %2757, i64 %2813
  store i16 %2816, ptr %2817, align 2, !tbaa !44
  %2818 = add nuw nsw i64 %2813, 1
  %2819 = add i64 %2814, 1
  %2820 = icmp eq i64 %2819, %2810
  br i1 %2820, label %2821, label %2812, !llvm.loop !148

2821:                                             ; preds = %2812, %2805
  %2822 = phi i64 [ %2806, %2805 ], [ %2818, %2812 ]
  %2823 = icmp ult i64 %2809, 3
  br i1 %2823, label %2843, label %2824

2824:                                             ; preds = %2821, %2824
  %2825 = phi i64 [ %2841, %2824 ], [ %2822, %2821 ]
  %2826 = getelementptr inbounds i16, ptr %810, i64 %2825
  %2827 = load i16, ptr %2826, align 2, !tbaa !44
  %2828 = getelementptr inbounds i16, ptr %2757, i64 %2825
  store i16 %2827, ptr %2828, align 2, !tbaa !44
  %2829 = add nuw nsw i64 %2825, 1
  %2830 = getelementptr inbounds i16, ptr %810, i64 %2829
  %2831 = load i16, ptr %2830, align 2, !tbaa !44
  %2832 = getelementptr inbounds i16, ptr %2757, i64 %2829
  store i16 %2831, ptr %2832, align 2, !tbaa !44
  %2833 = add nuw nsw i64 %2825, 2
  %2834 = getelementptr inbounds i16, ptr %810, i64 %2833
  %2835 = load i16, ptr %2834, align 2, !tbaa !44
  %2836 = getelementptr inbounds i16, ptr %2757, i64 %2833
  store i16 %2835, ptr %2836, align 2, !tbaa !44
  %2837 = add nuw nsw i64 %2825, 3
  %2838 = getelementptr inbounds i16, ptr %810, i64 %2837
  %2839 = load i16, ptr %2838, align 2, !tbaa !44
  %2840 = getelementptr inbounds i16, ptr %2757, i64 %2837
  store i16 %2839, ptr %2840, align 2, !tbaa !44
  %2841 = add nuw nsw i64 %2825, 4
  %2842 = icmp eq i64 %2841, %2760
  br i1 %2842, label %2843, label %2824, !llvm.loop !149

2843:                                             ; preds = %2821, %2824, %2788, %2803
  %2844 = shl i64 %2752, 31
  %2845 = add i64 %2844, -4294967296
  %2846 = ashr i64 %2845, 32
  %2847 = getelementptr inbounds i16, ptr %2757, i64 %2846
  %2848 = load i16, ptr %2847, align 2, !tbaa !44
  br label %2849

2849:                                             ; preds = %2740, %2843
  %2850 = phi i64 [ %2753, %2843 ], [ 0, %2740 ]
  %2851 = phi i16 [ %2848, %2843 ], [ -1, %2740 ]
  %2852 = and i64 %2850, 4294967295
  %2853 = getelementptr inbounds i16, ptr %2757, i64 %2852
  store i16 %2851, ptr %2853, align 2, !tbaa !44
  %2854 = trunc i64 %2753 to i16
  %2855 = add i16 %2854, 1
  %2856 = sext i32 %2750 to i64
  %2857 = getelementptr inbounds i16, ptr %1540, i64 %2856
  store i16 %2855, ptr %2857, align 2, !tbaa !44
  %2858 = add i32 %2754, 3
  %2859 = add i32 %2858, %2750
  %2860 = select i1 %209, i32 1, i32 %2859
  store i32 %2860, ptr %17, align 8, !tbaa !17
  br label %2945

2861:                                             ; preds = %1059
  %2862 = load ptr, ptr %12, align 8, !tbaa !46
  %2863 = load i32, ptr %17, align 8, !tbaa !17
  %2864 = add i32 %2863, 1
  %2865 = sext i32 %2864 to i64
  %2866 = getelementptr inbounds i16, ptr %2862, i64 %2865
  %2867 = sext i32 %2863 to i64
  %2868 = getelementptr inbounds i16, ptr %2862, i64 %2867
  %2869 = load i16, ptr %2868, align 2, !tbaa !44
  %2870 = zext i16 %2869 to i32
  %2871 = add i32 %2864, %2870
  %2872 = add nsw i32 %2870, -1
  %2873 = add i32 %2871, 1
  %2874 = sext i32 %2873 to i64
  %2875 = getelementptr inbounds i16, ptr %2862, i64 %2874
  %2876 = sext i32 %2871 to i64
  %2877 = getelementptr inbounds i16, ptr %2862, i64 %2876
  %2878 = load i16, ptr %2877, align 2, !tbaa !44
  %2879 = zext i16 %2878 to i32
  %2880 = add i32 %2873, %2879
  %2881 = add nsw i32 %2879, -1
  %2882 = add i32 %2880, 1
  %2883 = sext i32 %2882 to i64
  %2884 = getelementptr inbounds i16, ptr %2862, i64 %2883
  %2885 = sext i32 %2880 to i64
  %2886 = getelementptr inbounds i16, ptr %2862, i64 %2885
  %2887 = load i16, ptr %2886, align 2, !tbaa !44
  %2888 = zext i16 %2887 to i32
  %2889 = add i32 %2882, %2888
  %2890 = add nsw i32 %2888, -1
  %2891 = add i32 %2889, 1
  %2892 = sext i32 %2891 to i64
  %2893 = getelementptr inbounds i16, ptr %2862, i64 %2892
  %2894 = sext i32 %2889 to i64
  %2895 = getelementptr inbounds i16, ptr %2862, i64 %2894
  %2896 = load i16, ptr %2895, align 2, !tbaa !44
  %2897 = zext i16 %2896 to i32
  %2898 = add i32 %2891, %2897
  %2899 = add nsw i32 %2897, -1
  %2900 = add i32 %2898, 1
  %2901 = sext i32 %2900 to i64
  %2902 = getelementptr inbounds i16, ptr %2862, i64 %2901
  %2903 = sext i32 %2898 to i64
  %2904 = getelementptr inbounds i16, ptr %2862, i64 %2903
  %2905 = load i16, ptr %2904, align 2, !tbaa !44
  %2906 = zext i16 %2905 to i32
  %2907 = add i32 %2900, %2906
  %2908 = add nsw i32 %2906, -1
  %2909 = add i32 %2907, 1
  %2910 = sext i32 %2909 to i64
  %2911 = getelementptr inbounds i16, ptr %2862, i64 %2910
  %2912 = sext i32 %2907 to i64
  %2913 = getelementptr inbounds i16, ptr %2862, i64 %2912
  %2914 = load i16, ptr %2913, align 2, !tbaa !44
  %2915 = zext i16 %2914 to i32
  %2916 = add i32 %2909, %2915
  %2917 = add nsw i32 %2915, -1
  %2918 = add i32 %2916, 1
  %2919 = sext i32 %2918 to i64
  %2920 = getelementptr inbounds i16, ptr %2862, i64 %2919
  %2921 = sext i32 %2916 to i64
  %2922 = getelementptr inbounds i16, ptr %2862, i64 %2921
  %2923 = load i16, ptr %2922, align 2, !tbaa !44
  %2924 = zext i16 %2923 to i32
  %2925 = add i32 %2918, %2924
  %2926 = add nsw i32 %2924, -1
  %2927 = add i32 %2925, 1
  %2928 = sext i32 %2927 to i64
  %2929 = getelementptr inbounds i16, ptr %2862, i64 %2928
  %2930 = sext i32 %2925 to i64
  %2931 = getelementptr inbounds i16, ptr %2862, i64 %2930
  %2932 = load i16, ptr %2931, align 2, !tbaa !44
  %2933 = zext i16 %2932 to i32
  %2934 = add i32 %2927, %2933
  %2935 = add nsw i32 %2933, -1
  %2936 = add i32 %2934, 1
  %2937 = sext i32 %2936 to i64
  %2938 = getelementptr inbounds i16, ptr %2862, i64 %2937
  %2939 = sext i32 %2934 to i64
  %2940 = getelementptr inbounds i16, ptr %2862, i64 %2939
  %2941 = load i16, ptr %2940, align 2, !tbaa !44
  %2942 = zext i16 %2941 to i32
  %2943 = add i32 %2936, %2942
  store i32 %2943, ptr %17, align 8, !tbaa !17
  %2944 = add nsw i32 %2942, -1
  br label %2945

2945:                                             ; preds = %2849, %2861
  %2946 = phi ptr [ %2866, %2861 ], [ %1544, %2849 ]
  %2947 = phi i32 [ %2872, %2861 ], [ %1970, %2849 ]
  %2948 = phi ptr [ %2875, %2861 ], [ %1994, %2849 ]
  %2949 = phi i32 [ %2881, %2861 ], [ %1991, %2849 ]
  %2950 = phi ptr [ %2884, %2861 ], [ %2103, %2849 ]
  %2951 = phi i32 [ %2890, %2861 ], [ %2100, %2849 ]
  %2952 = phi ptr [ %2893, %2861 ], [ %2212, %2849 ]
  %2953 = phi i32 [ %2899, %2861 ], [ %2209, %2849 ]
  %2954 = phi ptr [ %2902, %2861 ], [ %2321, %2849 ]
  %2955 = phi i32 [ %2908, %2861 ], [ %2318, %2849 ]
  %2956 = phi ptr [ %2911, %2861 ], [ %2430, %2849 ]
  %2957 = phi i32 [ %2917, %2861 ], [ %2427, %2849 ]
  %2958 = phi ptr [ %2920, %2861 ], [ %2539, %2849 ]
  %2959 = phi i32 [ %2926, %2861 ], [ %2536, %2849 ]
  %2960 = phi ptr [ %2929, %2861 ], [ %2648, %2849 ]
  %2961 = phi i32 [ %2935, %2861 ], [ %2645, %2849 ]
  %2962 = phi ptr [ %2938, %2861 ], [ %2757, %2849 ]
  %2963 = phi i32 [ %2944, %2861 ], [ %2754, %2849 ]
  %2964 = phi i32 [ %1035, %2861 ], [ %1505, %2849 ]
  %2965 = phi ptr [ %1034, %2861 ], [ %1314, %2849 ]
  %2966 = phi ptr [ %1033, %2861 ], [ %1315, %2849 ]
  %2967 = phi ptr [ %1032, %2861 ], [ %1316, %2849 ]
  %2968 = getelementptr inbounds %struct.CompAtom, ptr %106, i64 %1044, i32 1
  %2969 = load float, ptr %2968, align 8, !tbaa !104
  %2970 = fpext float %2969 to double
  %2971 = fmul double %2970, 0x4074C104816F0069
  %2972 = fmul double %33, %2971
  %2973 = fmul double %28, %2972
  %2974 = getelementptr inbounds %struct.CompAtom, ptr %106, i64 %1044, i32 2
  %2975 = load i16, ptr %2974, align 4, !tbaa !105
  %2976 = sext i16 %2975 to i32
  %2977 = load ptr, ptr %1010, align 8, !tbaa !106
  %2978 = load i32, ptr %1011, align 8, !tbaa !108
  %2979 = shl nsw i32 %2976, 1
  %2980 = mul i32 %2979, %2978
  %2981 = zext i32 %2980 to i64
  %2982 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %2977, i64 %2981
  %2983 = load double, ptr @_ZN20ComputeNonbondedUtil7cutoff2E, align 8, !tbaa !19
  %2984 = extractelement <2 x double> %1065, i64 0
  %2985 = extractelement <2 x double> %1065, i64 1
  %2986 = call noundef i32 @_Z22pairlist_from_pairlistddddPK8CompAtomPKtiPtdPd(double noundef %2983, double noundef %1062, double noundef %2984, double noundef %2985, ptr noundef %108, ptr noundef nonnull %2946, i32 noundef %2947, ptr noundef %161, double noundef %36, ptr noundef %207)
  %2987 = icmp sgt i32 %2986, 0
  %2988 = extractelement <4 x double> %1037, i64 0
  %2989 = extractelement <4 x double> %1037, i64 1
  %2990 = extractelement <4 x double> %1037, i64 2
  %2991 = shufflevector <2 x double> %1039, <2 x double> poison, <2 x i32> <i32 1, i32 poison>
  %2992 = insertelement <2 x double> %2991, double %2989, i64 1
  %2993 = insertelement <2 x double> %1039, double %2988, i64 1
  %2994 = shufflevector <4 x double> %1037, <4 x double> poison, <2 x i32> <i32 3, i32 poison>
  %2995 = insertelement <2 x double> %2994, double %1030, i64 1
  br i1 %2987, label %2996, label %3181

2996:                                             ; preds = %2945
  %2997 = load ptr, ptr @_ZN20ComputeNonbondedUtil8r2_tableE, align 8, !tbaa !23
  %2998 = zext i32 %2986 to i64
  %2999 = shufflevector <2 x double> %1040, <2 x double> %1041, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  br label %3000

3000:                                             ; preds = %2996, %3000
  %3001 = phi i64 [ 0, %2996 ], [ %3176, %3000 ]
  %3002 = phi double [ %2990, %2996 ], [ %3084, %3000 ]
  %3003 = phi double [ %1029, %2996 ], [ %3085, %3000 ]
  %3004 = phi double [ 0.000000e+00, %2996 ], [ %3130, %3000 ]
  %3005 = phi double [ 0.000000e+00, %2996 ], [ %3172, %3000 ]
  %3006 = phi <2 x double> [ %1038, %2996 ], [ %3115, %3000 ]
  %3007 = phi <2 x double> [ %1042, %2996 ], [ %3128, %3000 ]
  %3008 = phi <2 x double> [ zeroinitializer, %2996 ], [ %3124, %3000 ]
  %3009 = phi <2 x double> [ %2992, %2996 ], [ %3154, %3000 ]
  %3010 = phi <2 x double> [ %2993, %2996 ], [ %3106, %3000 ]
  %3011 = phi <2 x double> [ %2995, %2996 ], [ %3123, %3000 ]
  %3012 = phi <2 x double> [ zeroinitializer, %2996 ], [ %3165, %3000 ]
  %3013 = phi <4 x double> [ %2999, %2996 ], [ %3164, %3000 ]
  %3014 = phi <2 x double> [ %1043, %2996 ], [ %3171, %3000 ]
  %3015 = shl nuw nsw i64 %3001, 1
  %3016 = getelementptr inbounds i32, ptr %208, i64 %3015
  %3017 = load i32, ptr %3016, align 4, !tbaa !5
  %3018 = ashr i32 %3017, 14
  %3019 = add nsw i32 %3018, %39
  %3020 = getelementptr inbounds i16, ptr %161, i64 %3001
  %3021 = load i16, ptr %3020, align 2, !tbaa !44
  %3022 = zext i16 %3021 to i64
  %3023 = getelementptr inbounds %struct.CompAtom, ptr %108, i64 %3022
  %3024 = getelementptr inbounds double, ptr %207, i64 %3001
  %3025 = load double, ptr %3024, align 8, !tbaa !19
  %3026 = sext i32 %3019 to i64
  %3027 = getelementptr inbounds double, ptr %2997, i64 %3026
  %3028 = load double, ptr %3027, align 8, !tbaa !19
  %3029 = fsub double %3025, %3028
  %3030 = shl nsw i32 %3019, 4
  %3031 = sext i32 %3030 to i64
  %3032 = getelementptr inbounds double, ptr %31, i64 %3031
  %3033 = getelementptr inbounds %struct.CompAtom, ptr %108, i64 %3022, i32 2
  %3034 = load i16, ptr %3033, align 4, !tbaa !105
  %3035 = sext i16 %3034 to i32
  %3036 = shl nsw i32 %3035, 1
  %3037 = sext i32 %3036 to i64
  %3038 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %2982, i64 %3037
  %3039 = getelementptr inbounds %class.Vector, ptr %968, i64 %3022
  %3040 = getelementptr inbounds %class.Vector, ptr %972, i64 %3022
  %3041 = getelementptr inbounds %struct.CompAtom, ptr %108, i64 %3022, i32 1
  %3042 = load float, ptr %3041, align 8, !tbaa !104
  %3043 = fpext float %3042 to double
  %3044 = fmul double %2973, %3043
  %3045 = load double, ptr %3023, align 8, !tbaa !68
  %3046 = fsub double %1062, %3045
  %3047 = getelementptr inbounds %class.Vector, ptr %3023, i64 0, i32 1
  %3048 = load <2 x double>, ptr %3047, align 8, !tbaa !19
  %3049 = fsub <2 x double> %1065, %3048
  %3050 = load double, ptr %3038, align 8, !tbaa !109
  %3051 = fmul double %33, %3050
  %3052 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %2982, i64 %3037, i32 1
  %3053 = load double, ptr %3052, align 8, !tbaa !111
  %3054 = load double, ptr %3032, align 8, !tbaa !19
  %3055 = getelementptr inbounds double, ptr %3032, i64 2
  %3056 = load double, ptr %3055, align 8, !tbaa !19
  %3057 = fmul double %3053, %1012
  %3058 = fmul double %3057, %3056
  %3059 = call double @llvm.fmuladd.f64(double %3051, double %3054, double %3058)
  %3060 = getelementptr inbounds double, ptr %3032, i64 1
  %3061 = load double, ptr %3060, align 8, !tbaa !19
  %3062 = getelementptr inbounds double, ptr %3032, i64 3
  %3063 = load double, ptr %3062, align 8, !tbaa !19
  %3064 = fmul double %3057, %3063
  %3065 = call double @llvm.fmuladd.f64(double %3051, double %3061, double %3064)
  %3066 = getelementptr inbounds double, ptr %3032, i64 4
  %3067 = load double, ptr %3066, align 8, !tbaa !19
  %3068 = getelementptr inbounds double, ptr %3032, i64 6
  %3069 = load double, ptr %3068, align 8, !tbaa !19
  %3070 = fmul double %3057, %3069
  %3071 = call double @llvm.fmuladd.f64(double %3051, double %3067, double %3070)
  %3072 = getelementptr inbounds double, ptr %3032, i64 5
  %3073 = load double, ptr %3072, align 8, !tbaa !19
  %3074 = getelementptr inbounds double, ptr %3032, i64 7
  %3075 = load double, ptr %3074, align 8, !tbaa !19
  %3076 = fmul double %3057, %3075
  %3077 = call double @llvm.fmuladd.f64(double %3051, double %3073, double %3076)
  %3078 = fmul double %3029, %3059
  %3079 = fmul double %3065, 2.500000e-01
  %3080 = call double @llvm.fmuladd.f64(double %3078, double 0x3FC5555555555555, double %3079)
  %3081 = fmul double %3071, 5.000000e-01
  %3082 = call double @llvm.fmuladd.f64(double %3080, double %3029, double %3081)
  %3083 = call double @llvm.fmuladd.f64(double %3082, double %3029, double %3077)
  %3084 = fsub double %3002, %3083
  %3085 = fsub double %3003, %3083
  %3086 = getelementptr inbounds double, ptr %3032, i64 8
  %3087 = load double, ptr %3086, align 8, !tbaa !19
  %3088 = fmul double %3044, %3087
  %3089 = getelementptr inbounds double, ptr %3032, i64 9
  %3090 = load double, ptr %3089, align 8, !tbaa !19
  %3091 = fmul double %3044, %3090
  %3092 = getelementptr inbounds double, ptr %3032, i64 10
  %3093 = load double, ptr %3092, align 8, !tbaa !19
  %3094 = fmul double %3044, %3093
  %3095 = getelementptr inbounds double, ptr %3032, i64 11
  %3096 = load double, ptr %3095, align 8, !tbaa !19
  %3097 = fmul double %3044, %3096
  %3098 = fmul double %3029, %3088
  %3099 = fmul double %3091, 2.500000e-01
  %3100 = call double @llvm.fmuladd.f64(double %3098, double 0x3FC5555555555555, double %3099)
  %3101 = fmul double %3094, 5.000000e-01
  %3102 = call double @llvm.fmuladd.f64(double %3100, double %3029, double %3101)
  %3103 = call double @llvm.fmuladd.f64(double %3102, double %3029, double %3097)
  %3104 = insertelement <2 x double> poison, double %3103, i64 0
  %3105 = shufflevector <2 x double> %3104, <2 x double> poison, <2 x i32> zeroinitializer
  %3106 = fsub <2 x double> %3010, %3105
  %3107 = fadd double %3059, %3088
  %3108 = fadd double %3065, %3091
  %3109 = fadd double %3071, %3094
  %3110 = call double @llvm.fmuladd.f64(double %3029, double %3107, double %3108)
  %3111 = call double @llvm.fmuladd.f64(double %3110, double %3029, double %3109)
  %3112 = fmul double %3046, %3111
  %3113 = insertelement <2 x double> poison, double %3112, i64 0
  %3114 = shufflevector <2 x double> %3113, <2 x double> poison, <2 x i32> zeroinitializer
  %3115 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %3114, <2 x double> %3049, <2 x double> %3006)
  %3116 = insertelement <2 x double> poison, double %3111, i64 0
  %3117 = shufflevector <2 x double> %3116, <2 x double> poison, <2 x i32> zeroinitializer
  %3118 = fmul <2 x double> %3049, %3117
  %3119 = shufflevector <2 x double> %3118, <2 x double> poison, <2 x i32> <i32 1, i32 0>
  %3120 = insertelement <2 x double> %3119, double %3112, i64 0
  %3121 = shufflevector <2 x double> %3049, <2 x double> poison, <2 x i32> <i32 poison, i32 0>
  %3122 = insertelement <2 x double> %3121, double %3046, i64 0
  %3123 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %3120, <2 x double> %3122, <2 x double> %3011)
  %3124 = fadd <2 x double> %3008, %3120
  %3125 = load <2 x double>, ptr %3039, align 8, !tbaa !19
  %3126 = fsub <2 x double> %3125, %3120
  store <2 x double> %3126, ptr %3039, align 8, !tbaa !19
  %3127 = shufflevector <2 x double> %3049, <2 x double> poison, <2 x i32> <i32 1, i32 1>
  %3128 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %3119, <2 x double> %3127, <2 x double> %3007)
  %3129 = extractelement <2 x double> %3118, i64 1
  %3130 = fadd double %3004, %3129
  %3131 = getelementptr inbounds %class.Vector, ptr %968, i64 %3022, i32 2
  %3132 = load double, ptr %3131, align 8, !tbaa !112
  %3133 = fsub double %3132, %3129
  store double %3133, ptr %3131, align 8, !tbaa !112
  %3134 = getelementptr inbounds double, ptr %3032, i64 12
  %3135 = load double, ptr %3134, align 8, !tbaa !19
  %3136 = getelementptr inbounds double, ptr %3032, i64 13
  %3137 = load double, ptr %3136, align 8, !tbaa !19
  %3138 = getelementptr inbounds double, ptr %3032, i64 14
  %3139 = load double, ptr %3138, align 8, !tbaa !19
  %3140 = getelementptr inbounds double, ptr %3032, i64 15
  %3141 = load double, ptr %3140, align 8, !tbaa !19
  %3142 = fmul double %3044, %3135
  %3143 = fmul double %3044, %3137
  %3144 = fmul double %3044, %3139
  %3145 = fmul double %3044, %3141
  %3146 = fmul double %3029, %3142
  %3147 = fmul double %3143, 2.500000e-01
  %3148 = call double @llvm.fmuladd.f64(double %3146, double 0x3FC5555555555555, double %3147)
  %3149 = fmul double %3144, 5.000000e-01
  %3150 = call double @llvm.fmuladd.f64(double %3148, double %3029, double %3149)
  %3151 = call double @llvm.fmuladd.f64(double %3150, double %3029, double %3145)
  %3152 = insertelement <2 x double> poison, double %3151, i64 0
  %3153 = shufflevector <2 x double> %3152, <2 x double> poison, <2 x i32> zeroinitializer
  %3154 = fsub <2 x double> %3009, %3153
  %3155 = call double @llvm.fmuladd.f64(double %3029, double %3142, double %3143)
  %3156 = call double @llvm.fmuladd.f64(double %3155, double %3029, double %3144)
  %3157 = extractelement <2 x double> %3049, i64 1
  %3158 = insertelement <2 x double> poison, double %3156, i64 0
  %3159 = shufflevector <2 x double> %3158, <2 x double> poison, <2 x i32> zeroinitializer
  %3160 = fmul <2 x double> %3122, %3159
  %3161 = shufflevector <2 x double> %3160, <2 x double> poison, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %3162 = shufflevector <2 x double> %3049, <2 x double> poison, <4 x i32> <i32 poison, i32 0, i32 0, i32 1>
  %3163 = insertelement <4 x double> %3162, double %3046, i64 0
  %3164 = call <4 x double> @llvm.fmuladd.v4f64(<4 x double> %3161, <4 x double> %3163, <4 x double> %3013)
  %3165 = fadd <2 x double> %3012, %3160
  %3166 = load <2 x double>, ptr %3040, align 8, !tbaa !19
  %3167 = fsub <2 x double> %3166, %3160
  store <2 x double> %3167, ptr %3040, align 8, !tbaa !19
  %3168 = fmul double %3157, %3156
  %3169 = insertelement <2 x double> poison, double %3168, i64 0
  %3170 = shufflevector <2 x double> %3169, <2 x double> %3160, <2 x i32> <i32 0, i32 2>
  %3171 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %3170, <2 x double> %3127, <2 x double> %3014)
  %3172 = fadd double %3005, %3168
  %3173 = getelementptr inbounds %class.Vector, ptr %972, i64 %3022, i32 2
  %3174 = load double, ptr %3173, align 8, !tbaa !112
  %3175 = fsub double %3174, %3168
  store double %3175, ptr %3173, align 8, !tbaa !112
  %3176 = add nuw nsw i64 %3001, 1
  %3177 = icmp eq i64 %3176, %2998
  br i1 %3177, label %3178, label %3000

3178:                                             ; preds = %3000
  %3179 = shufflevector <4 x double> %3164, <4 x double> poison, <2 x i32> <i32 2, i32 3>
  %3180 = shufflevector <4 x double> %3164, <4 x double> poison, <2 x i32> <i32 0, i32 1>
  br label %3181

3181:                                             ; preds = %3178, %2945
  %3182 = phi double [ 0.000000e+00, %2945 ], [ %3172, %3178 ]
  %3183 = phi double [ 0.000000e+00, %2945 ], [ %3130, %3178 ]
  %3184 = phi double [ %1029, %2945 ], [ %3085, %3178 ]
  %3185 = phi double [ %2990, %2945 ], [ %3084, %3178 ]
  %3186 = phi <2 x double> [ %1038, %2945 ], [ %3115, %3178 ]
  %3187 = phi <2 x double> [ %1040, %2945 ], [ %3180, %3178 ]
  %3188 = phi <2 x double> [ %1041, %2945 ], [ %3179, %3178 ]
  %3189 = phi <2 x double> [ %1042, %2945 ], [ %3128, %3178 ]
  %3190 = phi <2 x double> [ %1043, %2945 ], [ %3171, %3178 ]
  %3191 = phi <2 x double> [ zeroinitializer, %2945 ], [ %3124, %3178 ]
  %3192 = phi <2 x double> [ zeroinitializer, %2945 ], [ %3165, %3178 ]
  %3193 = phi <2 x double> [ %2992, %2945 ], [ %3154, %3178 ]
  %3194 = phi <2 x double> [ %2993, %2945 ], [ %3106, %3178 ]
  %3195 = phi <2 x double> [ %2995, %2945 ], [ %3123, %3178 ]
  %3196 = load double, ptr @_ZN20ComputeNonbondedUtil7cutoff2E, align 8, !tbaa !19
  %3197 = call noundef i32 @_Z22pairlist_from_pairlistddddPK8CompAtomPKtiPtdPd(double noundef %3196, double noundef %1062, double noundef %2984, double noundef %2985, ptr noundef %108, ptr noundef %2950, i32 noundef %2951, ptr noundef %161, double noundef %36, ptr noundef %207)
  %3198 = add nsw i32 %3197, %1028
  %3199 = icmp sgt i32 %3197, 0
  br i1 %3199, label %3200, label %3401

3200:                                             ; preds = %3181
  %3201 = load ptr, ptr @_ZN20ComputeNonbondedUtil8r2_tableE, align 8, !tbaa !23
  %3202 = zext i32 %3197 to i64
  br label %3203

3203:                                             ; preds = %3200, %3203
  %3204 = phi i64 [ 0, %3200 ], [ %3399, %3203 ]
  %3205 = phi double [ %3185, %3200 ], [ %3289, %3203 ]
  %3206 = phi double [ %3184, %3200 ], [ %3290, %3203 ]
  %3207 = phi double [ %3183, %3200 ], [ %3337, %3203 ]
  %3208 = phi double [ %3182, %3200 ], [ %3395, %3203 ]
  %3209 = phi <2 x double> [ %3186, %3200 ], [ %3321, %3203 ]
  %3210 = phi <2 x double> [ %3189, %3200 ], [ %3335, %3203 ]
  %3211 = phi <2 x double> [ %3190, %3200 ], [ %3393, %3203 ]
  %3212 = phi <2 x double> [ %3191, %3200 ], [ %3331, %3203 ]
  %3213 = phi <2 x double> [ %3192, %3200 ], [ %3390, %3203 ]
  %3214 = phi <2 x double> [ %3193, %3200 ], [ %3375, %3203 ]
  %3215 = phi <2 x double> [ %3194, %3200 ], [ %3312, %3203 ]
  %3216 = phi <2 x double> [ %3195, %3200 ], [ %3330, %3203 ]
  %3217 = phi <2 x double> [ %3188, %3200 ], [ %3381, %3203 ]
  %3218 = phi <2 x double> [ %3187, %3200 ], [ %3388, %3203 ]
  %3219 = shl nuw nsw i64 %3204, 1
  %3220 = getelementptr inbounds i32, ptr %208, i64 %3219
  %3221 = load i32, ptr %3220, align 4, !tbaa !5
  %3222 = ashr i32 %3221, 14
  %3223 = add nsw i32 %3222, %39
  %3224 = getelementptr inbounds i16, ptr %161, i64 %3204
  %3225 = load i16, ptr %3224, align 2, !tbaa !44
  %3226 = zext i16 %3225 to i64
  %3227 = getelementptr inbounds %struct.CompAtom, ptr %108, i64 %3226
  %3228 = getelementptr inbounds double, ptr %207, i64 %3204
  %3229 = load double, ptr %3228, align 8, !tbaa !19
  %3230 = sext i32 %3223 to i64
  %3231 = getelementptr inbounds double, ptr %3201, i64 %3230
  %3232 = load double, ptr %3231, align 8, !tbaa !19
  %3233 = fsub double %3229, %3232
  %3234 = shl nsw i32 %3223, 4
  %3235 = sext i32 %3234 to i64
  %3236 = getelementptr inbounds double, ptr %31, i64 %3235
  %3237 = getelementptr inbounds %struct.CompAtom, ptr %108, i64 %3226, i32 2
  %3238 = load i16, ptr %3237, align 4, !tbaa !105
  %3239 = sext i16 %3238 to i32
  %3240 = shl nsw i32 %3239, 1
  %3241 = sext i32 %3240 to i64
  %3242 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %2982, i64 %3241
  %3243 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %3242, i64 1
  %3244 = getelementptr inbounds %class.Vector, ptr %968, i64 %3226
  %3245 = getelementptr inbounds %class.Vector, ptr %972, i64 %3226
  %3246 = getelementptr inbounds %struct.CompAtom, ptr %108, i64 %3226, i32 1
  %3247 = load float, ptr %3246, align 8, !tbaa !104
  %3248 = fpext float %3247 to double
  %3249 = fmul double %2973, %3248
  %3250 = load double, ptr %3227, align 8, !tbaa !68
  %3251 = fsub double %1062, %3250
  %3252 = getelementptr inbounds %class.Vector, ptr %3227, i64 0, i32 1
  %3253 = load <2 x double>, ptr %3252, align 8, !tbaa !19
  %3254 = fsub <2 x double> %1065, %3253
  %3255 = load double, ptr %3243, align 8, !tbaa !109
  %3256 = fmul double %33, %3255
  %3257 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %3242, i64 1, i32 1
  %3258 = load double, ptr %3257, align 8, !tbaa !111
  %3259 = load double, ptr %3236, align 8, !tbaa !19
  %3260 = getelementptr inbounds double, ptr %3236, i64 2
  %3261 = load double, ptr %3260, align 8, !tbaa !19
  %3262 = fmul double %3258, %1012
  %3263 = fmul double %3262, %3261
  %3264 = call double @llvm.fmuladd.f64(double %3256, double %3259, double %3263)
  %3265 = getelementptr inbounds double, ptr %3236, i64 1
  %3266 = load double, ptr %3265, align 8, !tbaa !19
  %3267 = getelementptr inbounds double, ptr %3236, i64 3
  %3268 = load double, ptr %3267, align 8, !tbaa !19
  %3269 = fmul double %3262, %3268
  %3270 = call double @llvm.fmuladd.f64(double %3256, double %3266, double %3269)
  %3271 = getelementptr inbounds double, ptr %3236, i64 4
  %3272 = load double, ptr %3271, align 8, !tbaa !19
  %3273 = getelementptr inbounds double, ptr %3236, i64 6
  %3274 = load double, ptr %3273, align 8, !tbaa !19
  %3275 = fmul double %3262, %3274
  %3276 = call double @llvm.fmuladd.f64(double %3256, double %3272, double %3275)
  %3277 = getelementptr inbounds double, ptr %3236, i64 5
  %3278 = load double, ptr %3277, align 8, !tbaa !19
  %3279 = getelementptr inbounds double, ptr %3236, i64 7
  %3280 = load double, ptr %3279, align 8, !tbaa !19
  %3281 = fmul double %3262, %3280
  %3282 = call double @llvm.fmuladd.f64(double %3256, double %3278, double %3281)
  %3283 = fmul double %3233, %3264
  %3284 = fmul double %3270, 2.500000e-01
  %3285 = call double @llvm.fmuladd.f64(double %3283, double 0x3FC5555555555555, double %3284)
  %3286 = fmul double %3276, 5.000000e-01
  %3287 = call double @llvm.fmuladd.f64(double %3285, double %3233, double %3286)
  %3288 = call double @llvm.fmuladd.f64(double %3287, double %3233, double %3282)
  %3289 = fsub double %3205, %3288
  %3290 = fsub double %3206, %3288
  %3291 = fmul double %1013, %3249
  %3292 = getelementptr inbounds double, ptr %3236, i64 8
  %3293 = load double, ptr %3292, align 8, !tbaa !19
  %3294 = fmul double %3291, %3293
  %3295 = getelementptr inbounds double, ptr %3236, i64 9
  %3296 = load double, ptr %3295, align 8, !tbaa !19
  %3297 = fmul double %3291, %3296
  %3298 = getelementptr inbounds double, ptr %3236, i64 10
  %3299 = load double, ptr %3298, align 8, !tbaa !19
  %3300 = fmul double %3291, %3299
  %3301 = getelementptr inbounds double, ptr %3236, i64 11
  %3302 = load double, ptr %3301, align 8, !tbaa !19
  %3303 = fmul double %3291, %3302
  %3304 = fmul double %3233, %3294
  %3305 = fmul double %3297, 2.500000e-01
  %3306 = call double @llvm.fmuladd.f64(double %3304, double 0x3FC5555555555555, double %3305)
  %3307 = fmul double %3300, 5.000000e-01
  %3308 = call double @llvm.fmuladd.f64(double %3306, double %3233, double %3307)
  %3309 = call double @llvm.fmuladd.f64(double %3308, double %3233, double %3303)
  %3310 = insertelement <2 x double> poison, double %3309, i64 0
  %3311 = shufflevector <2 x double> %3310, <2 x double> poison, <2 x i32> zeroinitializer
  %3312 = fsub <2 x double> %3215, %3311
  %3313 = fadd double %3264, %3294
  %3314 = fadd double %3270, %3297
  %3315 = fadd double %3276, %3300
  %3316 = call double @llvm.fmuladd.f64(double %3233, double %3313, double %3314)
  %3317 = call double @llvm.fmuladd.f64(double %3316, double %3233, double %3315)
  %3318 = fmul double %3251, %3317
  %3319 = insertelement <2 x double> poison, double %3318, i64 0
  %3320 = shufflevector <2 x double> %3319, <2 x double> poison, <2 x i32> zeroinitializer
  %3321 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %3320, <2 x double> %3254, <2 x double> %3209)
  %3322 = insertelement <2 x double> poison, double %3317, i64 0
  %3323 = shufflevector <2 x double> %3322, <2 x double> poison, <2 x i32> zeroinitializer
  %3324 = fmul <2 x double> %3254, %3323
  %3325 = shufflevector <2 x double> %3324, <2 x double> poison, <2 x i32> <i32 1, i32 0>
  %3326 = extractelement <2 x double> %3254, i64 0
  %3327 = insertelement <2 x double> %3325, double %3318, i64 0
  %3328 = shufflevector <2 x double> %3254, <2 x double> poison, <2 x i32> <i32 1, i32 0>
  %3329 = insertelement <2 x double> %3328, double %3251, i64 0
  %3330 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %3327, <2 x double> %3329, <2 x double> %3216)
  %3331 = fadd <2 x double> %3212, %3327
  %3332 = load <2 x double>, ptr %3244, align 8, !tbaa !19
  %3333 = fsub <2 x double> %3332, %3327
  store <2 x double> %3333, ptr %3244, align 8, !tbaa !19
  %3334 = shufflevector <2 x double> %3254, <2 x double> poison, <2 x i32> <i32 1, i32 1>
  %3335 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %3325, <2 x double> %3334, <2 x double> %3210)
  %3336 = extractelement <2 x double> %3324, i64 1
  %3337 = fadd double %3207, %3336
  %3338 = getelementptr inbounds %class.Vector, ptr %968, i64 %3226, i32 2
  %3339 = load double, ptr %3338, align 8, !tbaa !112
  %3340 = fsub double %3339, %3336
  store double %3340, ptr %3338, align 8, !tbaa !112
  %3341 = shl nsw i32 %3223, 2
  %3342 = sext i32 %3341 to i64
  %3343 = getelementptr inbounds double, ptr %32, i64 %3342
  %3344 = getelementptr inbounds double, ptr %3236, i64 12
  %3345 = load double, ptr %3344, align 8, !tbaa !19
  %3346 = getelementptr inbounds double, ptr %3236, i64 13
  %3347 = load double, ptr %3346, align 8, !tbaa !19
  %3348 = getelementptr inbounds double, ptr %3236, i64 14
  %3349 = load double, ptr %3348, align 8, !tbaa !19
  %3350 = getelementptr inbounds double, ptr %3236, i64 15
  %3351 = load double, ptr %3350, align 8, !tbaa !19
  %3352 = load double, ptr %3343, align 8, !tbaa !19
  %3353 = call double @llvm.fmuladd.f64(double %35, double %3352, double %3351)
  %3354 = getelementptr inbounds double, ptr %3343, i64 1
  %3355 = load double, ptr %3354, align 8, !tbaa !19
  %3356 = call double @llvm.fmuladd.f64(double %1014, double %3355, double %3349)
  %3357 = getelementptr inbounds double, ptr %3343, i64 2
  %3358 = load double, ptr %3357, align 8, !tbaa !19
  %3359 = call double @llvm.fmuladd.f64(double %1015, double %3358, double %3347)
  %3360 = getelementptr inbounds double, ptr %3343, i64 3
  %3361 = load double, ptr %3360, align 8, !tbaa !19
  %3362 = call double @llvm.fmuladd.f64(double %1016, double %3361, double %3345)
  %3363 = fmul double %3249, %3362
  %3364 = fmul double %3249, %3359
  %3365 = fmul double %3249, %3356
  %3366 = fmul double %3249, %3353
  %3367 = fmul double %3233, %3363
  %3368 = fmul double %3364, 2.500000e-01
  %3369 = call double @llvm.fmuladd.f64(double %3367, double 0x3FC5555555555555, double %3368)
  %3370 = fmul double %3365, 5.000000e-01
  %3371 = call double @llvm.fmuladd.f64(double %3369, double %3233, double %3370)
  %3372 = call double @llvm.fmuladd.f64(double %3371, double %3233, double %3366)
  %3373 = insertelement <2 x double> poison, double %3372, i64 0
  %3374 = shufflevector <2 x double> %3373, <2 x double> poison, <2 x i32> zeroinitializer
  %3375 = fsub <2 x double> %3214, %3374
  %3376 = call double @llvm.fmuladd.f64(double %3233, double %3363, double %3364)
  %3377 = call double @llvm.fmuladd.f64(double %3376, double %3233, double %3365)
  %3378 = fmul double %3326, %3377
  %3379 = insertelement <2 x double> poison, double %3378, i64 0
  %3380 = shufflevector <2 x double> %3379, <2 x double> poison, <2 x i32> zeroinitializer
  %3381 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %3380, <2 x double> %3254, <2 x double> %3217)
  %3382 = insertelement <2 x double> %3328, double %3251, i64 1
  %3383 = insertelement <2 x double> poison, double %3377, i64 0
  %3384 = shufflevector <2 x double> %3383, <2 x double> poison, <2 x i32> zeroinitializer
  %3385 = fmul <2 x double> %3382, %3384
  %3386 = shufflevector <2 x double> %3385, <2 x double> poison, <2 x i32> <i32 1, i32 poison>
  %3387 = shufflevector <2 x double> %3385, <2 x double> poison, <2 x i32> <i32 1, i32 1>
  %3388 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %3387, <2 x double> %3329, <2 x double> %3218)
  %3389 = insertelement <2 x double> %3386, double %3378, i64 1
  %3390 = fadd <2 x double> %3213, %3389
  %3391 = load <2 x double>, ptr %3245, align 8, !tbaa !19
  %3392 = fsub <2 x double> %3391, %3389
  store <2 x double> %3392, ptr %3245, align 8, !tbaa !19
  %3393 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %3385, <2 x double> %3334, <2 x double> %3211)
  %3394 = extractelement <2 x double> %3385, i64 0
  %3395 = fadd double %3208, %3394
  %3396 = getelementptr inbounds %class.Vector, ptr %972, i64 %3226, i32 2
  %3397 = load double, ptr %3396, align 8, !tbaa !112
  %3398 = fsub double %3397, %3394
  store double %3398, ptr %3396, align 8, !tbaa !112
  %3399 = add nuw nsw i64 %3204, 1
  %3400 = icmp eq i64 %3399, %3202
  br i1 %3400, label %3401, label %3203

3401:                                             ; preds = %3203, %3181
  %3402 = phi double [ %3182, %3181 ], [ %3395, %3203 ]
  %3403 = phi double [ %3183, %3181 ], [ %3337, %3203 ]
  %3404 = phi double [ %3184, %3181 ], [ %3290, %3203 ]
  %3405 = phi double [ %3185, %3181 ], [ %3289, %3203 ]
  %3406 = phi <2 x double> [ %3186, %3181 ], [ %3321, %3203 ]
  %3407 = phi <2 x double> [ %3187, %3181 ], [ %3388, %3203 ]
  %3408 = phi <2 x double> [ %3188, %3181 ], [ %3381, %3203 ]
  %3409 = phi <2 x double> [ %3189, %3181 ], [ %3335, %3203 ]
  %3410 = phi <2 x double> [ %3190, %3181 ], [ %3393, %3203 ]
  %3411 = phi <2 x double> [ %3191, %3181 ], [ %3331, %3203 ]
  %3412 = phi <2 x double> [ %3192, %3181 ], [ %3390, %3203 ]
  %3413 = phi <2 x double> [ %3193, %3181 ], [ %3375, %3203 ]
  %3414 = phi <2 x double> [ %3194, %3181 ], [ %3312, %3203 ]
  %3415 = phi <2 x double> [ %3195, %3181 ], [ %3330, %3203 ]
  %3416 = load double, ptr @_ZN20ComputeNonbondedUtil7cutoff2E, align 8, !tbaa !19
  %3417 = call noundef i32 @_Z22pairlist_from_pairlistddddPK8CompAtomPKtiPtdPd(double noundef %3416, double noundef %1062, double noundef %2984, double noundef %2985, ptr noundef %108, ptr noundef %2948, i32 noundef %2949, ptr noundef %161, double noundef %36, ptr noundef %207)
  %3418 = add nsw i32 %3198, %3417
  %3419 = icmp sgt i32 %3417, 0
  br i1 %3419, label %3420, label %3525

3420:                                             ; preds = %3401
  %3421 = load ptr, ptr @_ZN20ComputeNonbondedUtil8r2_tableE, align 8, !tbaa !23
  %3422 = zext i32 %3417 to i64
  %3423 = shufflevector <2 x double> %1065, <2 x double> poison, <2 x i32> <i32 poison, i32 0>
  %3424 = insertelement <2 x double> %3423, double %1062, i64 0
  br label %3425

3425:                                             ; preds = %3420, %3425
  %3426 = phi i64 [ 0, %3420 ], [ %3523, %3425 ]
  %3427 = phi double [ %3402, %3420 ], [ %3519, %3425 ]
  %3428 = phi <2 x double> [ %3407, %3420 ], [ %3511, %3425 ]
  %3429 = phi <2 x double> [ %3408, %3420 ], [ %3504, %3425 ]
  %3430 = phi <2 x double> [ %3410, %3420 ], [ %3517, %3425 ]
  %3431 = phi <2 x double> [ %3412, %3420 ], [ %3513, %3425 ]
  %3432 = phi <2 x double> [ %3413, %3420 ], [ %3495, %3425 ]
  %3433 = shl nuw nsw i64 %3426, 1
  %3434 = getelementptr inbounds i32, ptr %208, i64 %3433
  %3435 = load i32, ptr %3434, align 4, !tbaa !5
  %3436 = ashr i32 %3435, 14
  %3437 = add nsw i32 %3436, %39
  %3438 = getelementptr inbounds i16, ptr %161, i64 %3426
  %3439 = load i16, ptr %3438, align 2, !tbaa !44
  %3440 = zext i16 %3439 to i64
  %3441 = getelementptr inbounds %struct.CompAtom, ptr %108, i64 %3440
  %3442 = getelementptr inbounds double, ptr %207, i64 %3426
  %3443 = load double, ptr %3442, align 8, !tbaa !19
  %3444 = sext i32 %3437 to i64
  %3445 = getelementptr inbounds double, ptr %3421, i64 %3444
  %3446 = load double, ptr %3445, align 8, !tbaa !19
  %3447 = fsub double %3443, %3446
  %3448 = shl nsw i32 %3437, 4
  %3449 = sext i32 %3448 to i64
  %3450 = getelementptr inbounds double, ptr %31, i64 %3449
  %3451 = getelementptr inbounds %class.Vector, ptr %972, i64 %3440
  %3452 = getelementptr inbounds %struct.CompAtom, ptr %108, i64 %3440, i32 1
  %3453 = load float, ptr %3452, align 8, !tbaa !104
  %3454 = fpext float %3453 to double
  %3455 = fmul double %2973, %3454
  %3456 = load <2 x double>, ptr %3441, align 8, !tbaa !19
  %3457 = fsub <2 x double> %3424, %3456
  %3458 = getelementptr inbounds %class.Vector, ptr %3441, i64 0, i32 2
  %3459 = load double, ptr %3458, align 8, !tbaa !49
  %3460 = fsub double %2985, %3459
  %3461 = shl nsw i32 %3437, 2
  %3462 = sext i32 %3461 to i64
  %3463 = getelementptr inbounds double, ptr %32, i64 %3462
  %3464 = getelementptr inbounds double, ptr %3450, i64 12
  %3465 = load double, ptr %3464, align 8, !tbaa !19
  %3466 = getelementptr inbounds double, ptr %3450, i64 13
  %3467 = load double, ptr %3466, align 8, !tbaa !19
  %3468 = getelementptr inbounds double, ptr %3450, i64 14
  %3469 = load double, ptr %3468, align 8, !tbaa !19
  %3470 = getelementptr inbounds double, ptr %3450, i64 15
  %3471 = load double, ptr %3470, align 8, !tbaa !19
  %3472 = load double, ptr %3463, align 8, !tbaa !19
  %3473 = fadd double %3471, %3472
  %3474 = getelementptr inbounds double, ptr %3463, i64 1
  %3475 = load double, ptr %3474, align 8, !tbaa !19
  %3476 = call double @llvm.fmuladd.f64(double %3475, double 2.000000e+00, double %3469)
  %3477 = getelementptr inbounds double, ptr %3463, i64 2
  %3478 = load double, ptr %3477, align 8, !tbaa !19
  %3479 = call double @llvm.fmuladd.f64(double %3478, double 4.000000e+00, double %3467)
  %3480 = getelementptr inbounds double, ptr %3463, i64 3
  %3481 = load double, ptr %3480, align 8, !tbaa !19
  %3482 = call double @llvm.fmuladd.f64(double %3481, double 6.000000e+00, double %3465)
  %3483 = fmul double %3455, %3482
  %3484 = fmul double %3455, %3479
  %3485 = fmul double %3455, %3476
  %3486 = fmul double %3455, %3473
  %3487 = fmul double %3447, %3483
  %3488 = fmul double %3484, 2.500000e-01
  %3489 = call double @llvm.fmuladd.f64(double %3487, double 0x3FC5555555555555, double %3488)
  %3490 = fmul double %3485, 5.000000e-01
  %3491 = call double @llvm.fmuladd.f64(double %3489, double %3447, double %3490)
  %3492 = call double @llvm.fmuladd.f64(double %3491, double %3447, double %3486)
  %3493 = insertelement <2 x double> poison, double %3492, i64 0
  %3494 = shufflevector <2 x double> %3493, <2 x double> poison, <2 x i32> zeroinitializer
  %3495 = fsub <2 x double> %3432, %3494
  %3496 = call double @llvm.fmuladd.f64(double %3447, double %3483, double %3484)
  %3497 = call double @llvm.fmuladd.f64(double %3496, double %3447, double %3485)
  %3498 = extractelement <2 x double> %3457, i64 1
  %3499 = fmul double %3498, %3497
  %3500 = insertelement <2 x double> poison, double %3499, i64 0
  %3501 = shufflevector <2 x double> %3500, <2 x double> poison, <2 x i32> zeroinitializer
  %3502 = shufflevector <2 x double> %3457, <2 x double> poison, <2 x i32> <i32 1, i32 0>
  %3503 = insertelement <2 x double> %3502, double %3460, i64 1
  %3504 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %3501, <2 x double> %3503, <2 x double> %3429)
  %3505 = insertelement <2 x double> %3502, double %3460, i64 0
  %3506 = insertelement <2 x double> poison, double %3497, i64 0
  %3507 = shufflevector <2 x double> %3506, <2 x double> poison, <2 x i32> zeroinitializer
  %3508 = fmul <2 x double> %3505, %3507
  %3509 = shufflevector <2 x double> %3508, <2 x double> poison, <2 x i32> <i32 1, i32 poison>
  %3510 = shufflevector <2 x double> %3508, <2 x double> poison, <2 x i32> <i32 1, i32 1>
  %3511 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %3510, <2 x double> %3457, <2 x double> %3428)
  %3512 = insertelement <2 x double> %3509, double %3499, i64 1
  %3513 = fadd <2 x double> %3431, %3512
  %3514 = load <2 x double>, ptr %3451, align 8, !tbaa !19
  %3515 = fsub <2 x double> %3514, %3512
  store <2 x double> %3515, ptr %3451, align 8, !tbaa !19
  %3516 = shufflevector <2 x double> %3505, <2 x double> poison, <2 x i32> zeroinitializer
  %3517 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %3508, <2 x double> %3516, <2 x double> %3430)
  %3518 = extractelement <2 x double> %3508, i64 0
  %3519 = fadd double %3427, %3518
  %3520 = getelementptr inbounds %class.Vector, ptr %972, i64 %3440, i32 2
  %3521 = load double, ptr %3520, align 8, !tbaa !112
  %3522 = fsub double %3521, %3518
  store double %3522, ptr %3520, align 8, !tbaa !112
  %3523 = add nuw nsw i64 %3426, 1
  %3524 = icmp eq i64 %3523, %3422
  br i1 %3524, label %3525, label %3425

3525:                                             ; preds = %3425, %3401
  %3526 = phi double [ %3402, %3401 ], [ %3519, %3425 ]
  %3527 = phi <2 x double> [ %3407, %3401 ], [ %3511, %3425 ]
  %3528 = phi <2 x double> [ %3408, %3401 ], [ %3504, %3425 ]
  %3529 = phi <2 x double> [ %3410, %3401 ], [ %3517, %3425 ]
  %3530 = phi <2 x double> [ %3412, %3401 ], [ %3513, %3425 ]
  %3531 = phi <2 x double> [ %3413, %3401 ], [ %3495, %3425 ]
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %3) #11
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %4) #11
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %5) #11
  %3532 = load double, ptr @_ZN20ComputeNonbondedUtil7cutoff2E, align 8, !tbaa !19
  %3533 = call noundef i32 @_Z22pairlist_from_pairlistddddPK8CompAtomPKtiPtdPd(double noundef %3532, double noundef %1062, double noundef %2984, double noundef %2985, ptr noundef %108, ptr noundef %2952, i32 noundef %2953, ptr noundef %161, double noundef %36, ptr noundef %207)
  %3534 = icmp sgt i32 %3533, 0
  br i1 %3534, label %3535, label %3695

3535:                                             ; preds = %3525
  %3536 = zext i32 %3533 to i64
  br label %3537

3537:                                             ; preds = %3535, %3537
  %3538 = phi i64 [ 0, %3535 ], [ %3693, %3537 ]
  %3539 = phi double [ %3405, %3535 ], [ %3596, %3537 ]
  %3540 = phi double [ %3404, %3535 ], [ %3598, %3537 ]
  %3541 = phi double [ %3403, %3535 ], [ %3644, %3537 ]
  %3542 = phi double [ %3526, %3535 ], [ %3689, %3537 ]
  %3543 = phi <2 x double> [ %3406, %3535 ], [ %3628, %3537 ]
  %3544 = phi <2 x double> [ %3527, %3535 ], [ %3682, %3537 ]
  %3545 = phi <2 x double> [ %3528, %3535 ], [ %3675, %3537 ]
  %3546 = phi <2 x double> [ %3409, %3535 ], [ %3642, %3537 ]
  %3547 = phi <2 x double> [ %3529, %3535 ], [ %3687, %3537 ]
  %3548 = phi <2 x double> [ %3411, %3535 ], [ %3638, %3537 ]
  %3549 = phi <2 x double> [ %3530, %3535 ], [ %3684, %3537 ]
  %3550 = phi <2 x double> [ %3531, %3535 ], [ %3668, %3537 ]
  %3551 = phi <2 x double> [ %3414, %3535 ], [ %3619, %3537 ]
  %3552 = phi <2 x double> [ %3415, %3535 ], [ %3637, %3537 ]
  %3553 = shl nuw nsw i64 %3538, 1
  %3554 = getelementptr inbounds i32, ptr %208, i64 %3553
  %3555 = load i32, ptr %3554, align 4, !tbaa !5
  %3556 = ashr i32 %3555, 14
  %3557 = add nsw i32 %3556, %39
  %3558 = getelementptr inbounds i16, ptr %161, i64 %3538
  %3559 = load i16, ptr %3558, align 2, !tbaa !44
  %3560 = zext i16 %3559 to i64
  %3561 = getelementptr inbounds %struct.CompAtom, ptr %108, i64 %3560
  %3562 = getelementptr inbounds double, ptr %207, i64 %3538
  %3563 = load double, ptr %3562, align 8, !tbaa !19
  %3564 = load ptr, ptr @_ZN20ComputeNonbondedUtil8r2_tableE, align 8, !tbaa !23
  %3565 = sext i32 %3557 to i64
  %3566 = getelementptr inbounds double, ptr %3564, i64 %3565
  %3567 = load double, ptr %3566, align 8, !tbaa !19
  %3568 = fsub double %3563, %3567
  %3569 = shl nsw i32 %3557, 4
  %3570 = sext i32 %3569 to i64
  %3571 = getelementptr inbounds double, ptr %31, i64 %3570
  %3572 = getelementptr inbounds %struct.CompAtom, ptr %108, i64 %3560, i32 2
  %3573 = load i16, ptr %3572, align 4, !tbaa !105
  %3574 = sext i16 %3573 to i32
  %3575 = shl nsw i32 %3574, 1
  %3576 = sext i32 %3575 to i64
  %3577 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %2982, i64 %3576
  %3578 = getelementptr inbounds %class.Vector, ptr %968, i64 %3560
  %3579 = getelementptr inbounds %class.Vector, ptr %972, i64 %3560
  %3580 = getelementptr inbounds %struct.CompAtom, ptr %108, i64 %3560, i32 1
  %3581 = load float, ptr %3580, align 8, !tbaa !104
  %3582 = fpext float %3581 to double
  %3583 = fmul double %2973, %3582
  %3584 = load double, ptr %3561, align 8, !tbaa !68
  %3585 = fsub double %1062, %3584
  %3586 = getelementptr inbounds %class.Vector, ptr %3561, i64 0, i32 1
  %3587 = load <2 x double>, ptr %3586, align 8, !tbaa !19
  %3588 = fsub <2 x double> %1065, %3587
  %3589 = load double, ptr %3577, align 8, !tbaa !109
  %3590 = fmul double %33, %3589
  %3591 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %2982, i64 %3576, i32 1
  %3592 = load double, ptr %3591, align 8, !tbaa !111
  %3593 = fmul double %33, %3592
  %3594 = fsub double %3563, %36
  call void @_Z24fep_vdw_forceandenergiesdddddddddiidddPdS_S_(double noundef %3590, double noundef %3593, double noundef %3594, double noundef %59, double noundef %65, double noundef %40, double noundef %41, double noundef %56, double noundef %63, i32 noundef %48, i32 noundef %49, double noundef %50, double noundef %51, double noundef %45, ptr noundef nonnull %3, ptr noundef nonnull %4, ptr noundef nonnull %5)
  %3595 = load double, ptr %3, align 8, !tbaa !19
  %3596 = fadd double %3539, %3595
  %3597 = load double, ptr %5, align 8, !tbaa !19
  %3598 = fadd double %3540, %3597
  %3599 = getelementptr inbounds double, ptr %3571, i64 8
  %3600 = load double, ptr %3599, align 8, !tbaa !19
  %3601 = fmul double %3583, %3600
  %3602 = getelementptr inbounds double, ptr %3571, i64 9
  %3603 = load double, ptr %3602, align 8, !tbaa !19
  %3604 = fmul double %3583, %3603
  %3605 = getelementptr inbounds double, ptr %3571, i64 10
  %3606 = load double, ptr %3605, align 8, !tbaa !19
  %3607 = fmul double %3583, %3606
  %3608 = getelementptr inbounds double, ptr %3571, i64 11
  %3609 = load double, ptr %3608, align 8, !tbaa !19
  %3610 = fmul double %3583, %3609
  %3611 = fmul double %3568, %3601
  %3612 = fmul double %3604, 2.500000e-01
  %3613 = call double @llvm.fmuladd.f64(double %3611, double 0x3FC5555555555555, double %3612)
  %3614 = fmul double %3607, 5.000000e-01
  %3615 = call double @llvm.fmuladd.f64(double %3613, double %3568, double %3614)
  %3616 = call double @llvm.fmuladd.f64(double %3615, double %3568, double %3610)
  %3617 = insertelement <2 x double> poison, double %3616, i64 0
  %3618 = shufflevector <2 x double> %3617, <2 x double> poison, <2 x i32> zeroinitializer
  %3619 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %1017, <2 x double> %3618, <2 x double> %3551)
  %3620 = call double @llvm.fmuladd.f64(double %3568, double %3601, double %3604)
  %3621 = call double @llvm.fmuladd.f64(double %3620, double %3568, double %3607)
  %3622 = fmul double %1021, %3621
  %3623 = load double, ptr %4, align 8, !tbaa !19
  %3624 = fadd double %3623, %3622
  %3625 = fmul double %3585, %3624
  %3626 = insertelement <2 x double> poison, double %3625, i64 0
  %3627 = shufflevector <2 x double> %3626, <2 x double> poison, <2 x i32> zeroinitializer
  %3628 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %3627, <2 x double> %3588, <2 x double> %3543)
  %3629 = insertelement <2 x double> poison, double %3624, i64 0
  %3630 = shufflevector <2 x double> %3629, <2 x double> poison, <2 x i32> zeroinitializer
  %3631 = fmul <2 x double> %3588, %3630
  %3632 = shufflevector <2 x double> %3631, <2 x double> poison, <2 x i32> <i32 1, i32 0>
  %3633 = extractelement <2 x double> %3588, i64 0
  %3634 = insertelement <2 x double> %3632, double %3625, i64 0
  %3635 = shufflevector <2 x double> %3588, <2 x double> poison, <2 x i32> <i32 1, i32 0>
  %3636 = insertelement <2 x double> %3635, double %3585, i64 0
  %3637 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %3634, <2 x double> %3636, <2 x double> %3552)
  %3638 = fadd <2 x double> %3548, %3634
  %3639 = load <2 x double>, ptr %3578, align 8, !tbaa !19
  %3640 = fsub <2 x double> %3639, %3634
  store <2 x double> %3640, ptr %3578, align 8, !tbaa !19
  %3641 = shufflevector <2 x double> %3588, <2 x double> poison, <2 x i32> <i32 1, i32 1>
  %3642 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %3632, <2 x double> %3641, <2 x double> %3546)
  %3643 = extractelement <2 x double> %3631, i64 1
  %3644 = fadd double %3541, %3643
  %3645 = getelementptr inbounds %class.Vector, ptr %968, i64 %3560, i32 2
  %3646 = load double, ptr %3645, align 8, !tbaa !112
  %3647 = fsub double %3646, %3643
  store double %3647, ptr %3645, align 8, !tbaa !112
  %3648 = getelementptr inbounds double, ptr %3571, i64 12
  %3649 = load double, ptr %3648, align 8, !tbaa !19
  %3650 = getelementptr inbounds double, ptr %3571, i64 13
  %3651 = load double, ptr %3650, align 8, !tbaa !19
  %3652 = getelementptr inbounds double, ptr %3571, i64 14
  %3653 = load double, ptr %3652, align 8, !tbaa !19
  %3654 = getelementptr inbounds double, ptr %3571, i64 15
  %3655 = load double, ptr %3654, align 8, !tbaa !19
  %3656 = fmul double %3583, %3649
  %3657 = fmul double %3583, %3651
  %3658 = fmul double %3583, %3653
  %3659 = fmul double %3583, %3655
  %3660 = fmul double %3568, %3656
  %3661 = fmul double %3657, 2.500000e-01
  %3662 = call double @llvm.fmuladd.f64(double %3660, double 0x3FC5555555555555, double %3661)
  %3663 = fmul double %3658, 5.000000e-01
  %3664 = call double @llvm.fmuladd.f64(double %3662, double %3568, double %3663)
  %3665 = call double @llvm.fmuladd.f64(double %3664, double %3568, double %3659)
  %3666 = insertelement <2 x double> poison, double %3665, i64 0
  %3667 = shufflevector <2 x double> %3666, <2 x double> poison, <2 x i32> zeroinitializer
  %3668 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %1017, <2 x double> %3667, <2 x double> %3550)
  %3669 = call double @llvm.fmuladd.f64(double %3568, double %3656, double %3657)
  %3670 = call double @llvm.fmuladd.f64(double %3669, double %3568, double %3658)
  %3671 = fmul double %1021, %3670
  %3672 = fmul double %3633, %3671
  %3673 = insertelement <2 x double> poison, double %3672, i64 0
  %3674 = shufflevector <2 x double> %3673, <2 x double> poison, <2 x i32> zeroinitializer
  %3675 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %3674, <2 x double> %3588, <2 x double> %3545)
  %3676 = insertelement <2 x double> %3635, double %3585, i64 1
  %3677 = insertelement <2 x double> poison, double %3671, i64 0
  %3678 = shufflevector <2 x double> %3677, <2 x double> poison, <2 x i32> zeroinitializer
  %3679 = fmul <2 x double> %3676, %3678
  %3680 = shufflevector <2 x double> %3679, <2 x double> poison, <2 x i32> <i32 1, i32 poison>
  %3681 = shufflevector <2 x double> %3679, <2 x double> poison, <2 x i32> <i32 1, i32 1>
  %3682 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %3681, <2 x double> %3636, <2 x double> %3544)
  %3683 = insertelement <2 x double> %3680, double %3672, i64 1
  %3684 = fadd <2 x double> %3549, %3683
  %3685 = load <2 x double>, ptr %3579, align 8, !tbaa !19
  %3686 = fsub <2 x double> %3685, %3683
  store <2 x double> %3686, ptr %3579, align 8, !tbaa !19
  %3687 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %3679, <2 x double> %3641, <2 x double> %3547)
  %3688 = extractelement <2 x double> %3679, i64 0
  %3689 = fadd double %3542, %3688
  %3690 = getelementptr inbounds %class.Vector, ptr %972, i64 %3560, i32 2
  %3691 = load double, ptr %3690, align 8, !tbaa !112
  %3692 = fsub double %3691, %3688
  store double %3692, ptr %3690, align 8, !tbaa !112
  %3693 = add nuw nsw i64 %3538, 1
  %3694 = icmp eq i64 %3693, %3536
  br i1 %3694, label %3695, label %3537

3695:                                             ; preds = %3537, %3525
  %3696 = phi double [ %3526, %3525 ], [ %3689, %3537 ]
  %3697 = phi double [ %3403, %3525 ], [ %3644, %3537 ]
  %3698 = phi double [ %3404, %3525 ], [ %3598, %3537 ]
  %3699 = phi double [ %3405, %3525 ], [ %3596, %3537 ]
  %3700 = phi <2 x double> [ %3406, %3525 ], [ %3628, %3537 ]
  %3701 = phi <2 x double> [ %3527, %3525 ], [ %3682, %3537 ]
  %3702 = phi <2 x double> [ %3528, %3525 ], [ %3675, %3537 ]
  %3703 = phi <2 x double> [ %3409, %3525 ], [ %3642, %3537 ]
  %3704 = phi <2 x double> [ %3529, %3525 ], [ %3687, %3537 ]
  %3705 = phi <2 x double> [ %3411, %3525 ], [ %3638, %3537 ]
  %3706 = phi <2 x double> [ %3530, %3525 ], [ %3684, %3537 ]
  %3707 = phi <2 x double> [ %3531, %3525 ], [ %3668, %3537 ]
  %3708 = phi <2 x double> [ %3414, %3525 ], [ %3619, %3537 ]
  %3709 = phi <2 x double> [ %3415, %3525 ], [ %3637, %3537 ]
  %3710 = load double, ptr @_ZN20ComputeNonbondedUtil7cutoff2E, align 8, !tbaa !19
  %3711 = call noundef i32 @_Z22pairlist_from_pairlistddddPK8CompAtomPKtiPtdPd(double noundef %3710, double noundef %1062, double noundef %2984, double noundef %2985, ptr noundef %108, ptr noundef %2958, i32 noundef %2959, ptr noundef %161, double noundef %36, ptr noundef %207)
  %3712 = icmp sgt i32 %3711, 0
  br i1 %3712, label %3713, label %3873

3713:                                             ; preds = %3695
  %3714 = zext i32 %3711 to i64
  br label %3715

3715:                                             ; preds = %3713, %3715
  %3716 = phi i64 [ 0, %3713 ], [ %3871, %3715 ]
  %3717 = phi double [ %3699, %3713 ], [ %3774, %3715 ]
  %3718 = phi double [ %3698, %3713 ], [ %3776, %3715 ]
  %3719 = phi double [ %3697, %3713 ], [ %3822, %3715 ]
  %3720 = phi double [ %3696, %3713 ], [ %3867, %3715 ]
  %3721 = phi <2 x double> [ %3700, %3713 ], [ %3806, %3715 ]
  %3722 = phi <2 x double> [ %3701, %3713 ], [ %3860, %3715 ]
  %3723 = phi <2 x double> [ %3702, %3713 ], [ %3853, %3715 ]
  %3724 = phi <2 x double> [ %3703, %3713 ], [ %3820, %3715 ]
  %3725 = phi <2 x double> [ %3704, %3713 ], [ %3865, %3715 ]
  %3726 = phi <2 x double> [ %3705, %3713 ], [ %3816, %3715 ]
  %3727 = phi <2 x double> [ %3706, %3713 ], [ %3862, %3715 ]
  %3728 = phi <2 x double> [ %3707, %3713 ], [ %3846, %3715 ]
  %3729 = phi <2 x double> [ %3708, %3713 ], [ %3797, %3715 ]
  %3730 = phi <2 x double> [ %3709, %3713 ], [ %3815, %3715 ]
  %3731 = shl nuw nsw i64 %3716, 1
  %3732 = getelementptr inbounds i32, ptr %208, i64 %3731
  %3733 = load i32, ptr %3732, align 4, !tbaa !5
  %3734 = ashr i32 %3733, 14
  %3735 = add nsw i32 %3734, %39
  %3736 = getelementptr inbounds i16, ptr %161, i64 %3716
  %3737 = load i16, ptr %3736, align 2, !tbaa !44
  %3738 = zext i16 %3737 to i64
  %3739 = getelementptr inbounds %struct.CompAtom, ptr %108, i64 %3738
  %3740 = getelementptr inbounds double, ptr %207, i64 %3716
  %3741 = load double, ptr %3740, align 8, !tbaa !19
  %3742 = load ptr, ptr @_ZN20ComputeNonbondedUtil8r2_tableE, align 8, !tbaa !23
  %3743 = sext i32 %3735 to i64
  %3744 = getelementptr inbounds double, ptr %3742, i64 %3743
  %3745 = load double, ptr %3744, align 8, !tbaa !19
  %3746 = fsub double %3741, %3745
  %3747 = shl nsw i32 %3735, 4
  %3748 = sext i32 %3747 to i64
  %3749 = getelementptr inbounds double, ptr %31, i64 %3748
  %3750 = getelementptr inbounds %struct.CompAtom, ptr %108, i64 %3738, i32 2
  %3751 = load i16, ptr %3750, align 4, !tbaa !105
  %3752 = sext i16 %3751 to i32
  %3753 = shl nsw i32 %3752, 1
  %3754 = sext i32 %3753 to i64
  %3755 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %2982, i64 %3754
  %3756 = getelementptr inbounds %class.Vector, ptr %968, i64 %3738
  %3757 = getelementptr inbounds %class.Vector, ptr %972, i64 %3738
  %3758 = getelementptr inbounds %struct.CompAtom, ptr %108, i64 %3738, i32 1
  %3759 = load float, ptr %3758, align 8, !tbaa !104
  %3760 = fpext float %3759 to double
  %3761 = fmul double %2973, %3760
  %3762 = load double, ptr %3739, align 8, !tbaa !68
  %3763 = fsub double %1062, %3762
  %3764 = getelementptr inbounds %class.Vector, ptr %3739, i64 0, i32 1
  %3765 = load <2 x double>, ptr %3764, align 8, !tbaa !19
  %3766 = fsub <2 x double> %1065, %3765
  %3767 = load double, ptr %3755, align 8, !tbaa !109
  %3768 = fmul double %33, %3767
  %3769 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %2982, i64 %3754, i32 1
  %3770 = load double, ptr %3769, align 8, !tbaa !111
  %3771 = fmul double %33, %3770
  %3772 = fsub double %3741, %36
  call void @_Z24fep_vdw_forceandenergiesdddddddddiidddPdS_S_(double noundef %3768, double noundef %3771, double noundef %3772, double noundef %85, double noundef %92, double noundef %40, double noundef %41, double noundef %83, double noundef %90, i32 noundef %48, i32 noundef %49, double noundef %50, double noundef %51, double noundef %45, ptr noundef nonnull %3, ptr noundef nonnull %4, ptr noundef nonnull %5)
  %3773 = load double, ptr %3, align 8, !tbaa !19
  %3774 = fadd double %3717, %3773
  %3775 = load double, ptr %5, align 8, !tbaa !19
  %3776 = fadd double %3718, %3775
  %3777 = getelementptr inbounds double, ptr %3749, i64 8
  %3778 = load double, ptr %3777, align 8, !tbaa !19
  %3779 = fmul double %3761, %3778
  %3780 = getelementptr inbounds double, ptr %3749, i64 9
  %3781 = load double, ptr %3780, align 8, !tbaa !19
  %3782 = fmul double %3761, %3781
  %3783 = getelementptr inbounds double, ptr %3749, i64 10
  %3784 = load double, ptr %3783, align 8, !tbaa !19
  %3785 = fmul double %3761, %3784
  %3786 = getelementptr inbounds double, ptr %3749, i64 11
  %3787 = load double, ptr %3786, align 8, !tbaa !19
  %3788 = fmul double %3761, %3787
  %3789 = fmul double %3746, %3779
  %3790 = fmul double %3782, 2.500000e-01
  %3791 = call double @llvm.fmuladd.f64(double %3789, double 0x3FC5555555555555, double %3790)
  %3792 = fmul double %3785, 5.000000e-01
  %3793 = call double @llvm.fmuladd.f64(double %3791, double %3746, double %3792)
  %3794 = call double @llvm.fmuladd.f64(double %3793, double %3746, double %3788)
  %3795 = insertelement <2 x double> poison, double %3794, i64 0
  %3796 = shufflevector <2 x double> %3795, <2 x double> poison, <2 x i32> zeroinitializer
  %3797 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %1018, <2 x double> %3796, <2 x double> %3729)
  %3798 = call double @llvm.fmuladd.f64(double %3746, double %3779, double %3782)
  %3799 = call double @llvm.fmuladd.f64(double %3798, double %3746, double %3785)
  %3800 = fmul double %1022, %3799
  %3801 = load double, ptr %4, align 8, !tbaa !19
  %3802 = fadd double %3801, %3800
  %3803 = fmul double %3763, %3802
  %3804 = insertelement <2 x double> poison, double %3803, i64 0
  %3805 = shufflevector <2 x double> %3804, <2 x double> poison, <2 x i32> zeroinitializer
  %3806 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %3805, <2 x double> %3766, <2 x double> %3721)
  %3807 = insertelement <2 x double> poison, double %3802, i64 0
  %3808 = shufflevector <2 x double> %3807, <2 x double> poison, <2 x i32> zeroinitializer
  %3809 = fmul <2 x double> %3766, %3808
  %3810 = shufflevector <2 x double> %3809, <2 x double> poison, <2 x i32> <i32 1, i32 0>
  %3811 = extractelement <2 x double> %3766, i64 0
  %3812 = insertelement <2 x double> %3810, double %3803, i64 0
  %3813 = shufflevector <2 x double> %3766, <2 x double> poison, <2 x i32> <i32 1, i32 0>
  %3814 = insertelement <2 x double> %3813, double %3763, i64 0
  %3815 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %3812, <2 x double> %3814, <2 x double> %3730)
  %3816 = fadd <2 x double> %3726, %3812
  %3817 = load <2 x double>, ptr %3756, align 8, !tbaa !19
  %3818 = fsub <2 x double> %3817, %3812
  store <2 x double> %3818, ptr %3756, align 8, !tbaa !19
  %3819 = shufflevector <2 x double> %3766, <2 x double> poison, <2 x i32> <i32 1, i32 1>
  %3820 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %3810, <2 x double> %3819, <2 x double> %3724)
  %3821 = extractelement <2 x double> %3809, i64 1
  %3822 = fadd double %3719, %3821
  %3823 = getelementptr inbounds %class.Vector, ptr %968, i64 %3738, i32 2
  %3824 = load double, ptr %3823, align 8, !tbaa !112
  %3825 = fsub double %3824, %3821
  store double %3825, ptr %3823, align 8, !tbaa !112
  %3826 = getelementptr inbounds double, ptr %3749, i64 12
  %3827 = load double, ptr %3826, align 8, !tbaa !19
  %3828 = getelementptr inbounds double, ptr %3749, i64 13
  %3829 = load double, ptr %3828, align 8, !tbaa !19
  %3830 = getelementptr inbounds double, ptr %3749, i64 14
  %3831 = load double, ptr %3830, align 8, !tbaa !19
  %3832 = getelementptr inbounds double, ptr %3749, i64 15
  %3833 = load double, ptr %3832, align 8, !tbaa !19
  %3834 = fmul double %3761, %3827
  %3835 = fmul double %3761, %3829
  %3836 = fmul double %3761, %3831
  %3837 = fmul double %3761, %3833
  %3838 = fmul double %3746, %3834
  %3839 = fmul double %3835, 2.500000e-01
  %3840 = call double @llvm.fmuladd.f64(double %3838, double 0x3FC5555555555555, double %3839)
  %3841 = fmul double %3836, 5.000000e-01
  %3842 = call double @llvm.fmuladd.f64(double %3840, double %3746, double %3841)
  %3843 = call double @llvm.fmuladd.f64(double %3842, double %3746, double %3837)
  %3844 = insertelement <2 x double> poison, double %3843, i64 0
  %3845 = shufflevector <2 x double> %3844, <2 x double> poison, <2 x i32> zeroinitializer
  %3846 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %1018, <2 x double> %3845, <2 x double> %3728)
  %3847 = call double @llvm.fmuladd.f64(double %3746, double %3834, double %3835)
  %3848 = call double @llvm.fmuladd.f64(double %3847, double %3746, double %3836)
  %3849 = fmul double %1022, %3848
  %3850 = fmul double %3811, %3849
  %3851 = insertelement <2 x double> poison, double %3850, i64 0
  %3852 = shufflevector <2 x double> %3851, <2 x double> poison, <2 x i32> zeroinitializer
  %3853 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %3852, <2 x double> %3766, <2 x double> %3723)
  %3854 = insertelement <2 x double> %3813, double %3763, i64 1
  %3855 = insertelement <2 x double> poison, double %3849, i64 0
  %3856 = shufflevector <2 x double> %3855, <2 x double> poison, <2 x i32> zeroinitializer
  %3857 = fmul <2 x double> %3854, %3856
  %3858 = shufflevector <2 x double> %3857, <2 x double> poison, <2 x i32> <i32 1, i32 poison>
  %3859 = shufflevector <2 x double> %3857, <2 x double> poison, <2 x i32> <i32 1, i32 1>
  %3860 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %3859, <2 x double> %3814, <2 x double> %3722)
  %3861 = insertelement <2 x double> %3858, double %3850, i64 1
  %3862 = fadd <2 x double> %3727, %3861
  %3863 = load <2 x double>, ptr %3757, align 8, !tbaa !19
  %3864 = fsub <2 x double> %3863, %3861
  store <2 x double> %3864, ptr %3757, align 8, !tbaa !19
  %3865 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %3857, <2 x double> %3819, <2 x double> %3725)
  %3866 = extractelement <2 x double> %3857, i64 0
  %3867 = fadd double %3720, %3866
  %3868 = getelementptr inbounds %class.Vector, ptr %972, i64 %3738, i32 2
  %3869 = load double, ptr %3868, align 8, !tbaa !112
  %3870 = fsub double %3869, %3866
  store double %3870, ptr %3868, align 8, !tbaa !112
  %3871 = add nuw nsw i64 %3716, 1
  %3872 = icmp eq i64 %3871, %3714
  br i1 %3872, label %3873, label %3715

3873:                                             ; preds = %3715, %3695
  %3874 = phi double [ %3696, %3695 ], [ %3867, %3715 ]
  %3875 = phi double [ %3697, %3695 ], [ %3822, %3715 ]
  %3876 = phi double [ %3698, %3695 ], [ %3776, %3715 ]
  %3877 = phi double [ %3699, %3695 ], [ %3774, %3715 ]
  %3878 = phi <2 x double> [ %3700, %3695 ], [ %3806, %3715 ]
  %3879 = phi <2 x double> [ %3701, %3695 ], [ %3860, %3715 ]
  %3880 = phi <2 x double> [ %3702, %3695 ], [ %3853, %3715 ]
  %3881 = phi <2 x double> [ %3703, %3695 ], [ %3820, %3715 ]
  %3882 = phi <2 x double> [ %3704, %3695 ], [ %3865, %3715 ]
  %3883 = phi <2 x double> [ %3705, %3695 ], [ %3816, %3715 ]
  %3884 = phi <2 x double> [ %3706, %3695 ], [ %3862, %3715 ]
  %3885 = phi <2 x double> [ %3707, %3695 ], [ %3846, %3715 ]
  %3886 = phi <2 x double> [ %3708, %3695 ], [ %3797, %3715 ]
  %3887 = phi <2 x double> [ %3709, %3695 ], [ %3815, %3715 ]
  %3888 = load double, ptr @_ZN20ComputeNonbondedUtil7cutoff2E, align 8, !tbaa !19
  %3889 = call noundef i32 @_Z22pairlist_from_pairlistddddPK8CompAtomPKtiPtdPd(double noundef %3888, double noundef %1062, double noundef %2984, double noundef %2985, ptr noundef %108, ptr noundef %2956, i32 noundef %2957, ptr noundef %161, double noundef %36, ptr noundef %207)
  %3890 = add nsw i32 %3418, %3889
  %3891 = icmp sgt i32 %3889, 0
  br i1 %3891, label %3892, label %4068

3892:                                             ; preds = %3873
  %3893 = zext i32 %3889 to i64
  br label %3894

3894:                                             ; preds = %3892, %3894
  %3895 = phi i64 [ 0, %3892 ], [ %4066, %3894 ]
  %3896 = phi double [ %3877, %3892 ], [ %3954, %3894 ]
  %3897 = phi double [ %3876, %3892 ], [ %3956, %3894 ]
  %3898 = phi double [ %3875, %3892 ], [ %4003, %3894 ]
  %3899 = phi double [ %3874, %3892 ], [ %4062, %3894 ]
  %3900 = phi <2 x double> [ %3878, %3892 ], [ %3987, %3894 ]
  %3901 = phi <2 x double> [ %3879, %3892 ], [ %4055, %3894 ]
  %3902 = phi <2 x double> [ %3880, %3892 ], [ %4048, %3894 ]
  %3903 = phi <2 x double> [ %3881, %3892 ], [ %4001, %3894 ]
  %3904 = phi <2 x double> [ %3882, %3892 ], [ %4060, %3894 ]
  %3905 = phi <2 x double> [ %3883, %3892 ], [ %3997, %3894 ]
  %3906 = phi <2 x double> [ %3884, %3892 ], [ %4057, %3894 ]
  %3907 = phi <2 x double> [ %3885, %3892 ], [ %4041, %3894 ]
  %3908 = phi <2 x double> [ %3886, %3892 ], [ %3978, %3894 ]
  %3909 = phi <2 x double> [ %3887, %3892 ], [ %3996, %3894 ]
  %3910 = shl nuw nsw i64 %3895, 1
  %3911 = getelementptr inbounds i32, ptr %208, i64 %3910
  %3912 = load i32, ptr %3911, align 4, !tbaa !5
  %3913 = ashr i32 %3912, 14
  %3914 = add nsw i32 %3913, %39
  %3915 = getelementptr inbounds i16, ptr %161, i64 %3895
  %3916 = load i16, ptr %3915, align 2, !tbaa !44
  %3917 = zext i16 %3916 to i64
  %3918 = getelementptr inbounds %struct.CompAtom, ptr %108, i64 %3917
  %3919 = getelementptr inbounds double, ptr %207, i64 %3895
  %3920 = load double, ptr %3919, align 8, !tbaa !19
  %3921 = load ptr, ptr @_ZN20ComputeNonbondedUtil8r2_tableE, align 8, !tbaa !23
  %3922 = sext i32 %3914 to i64
  %3923 = getelementptr inbounds double, ptr %3921, i64 %3922
  %3924 = load double, ptr %3923, align 8, !tbaa !19
  %3925 = fsub double %3920, %3924
  %3926 = shl nsw i32 %3914, 4
  %3927 = sext i32 %3926 to i64
  %3928 = getelementptr inbounds double, ptr %31, i64 %3927
  %3929 = getelementptr inbounds %struct.CompAtom, ptr %108, i64 %3917, i32 2
  %3930 = load i16, ptr %3929, align 4, !tbaa !105
  %3931 = sext i16 %3930 to i32
  %3932 = shl nsw i32 %3931, 1
  %3933 = sext i32 %3932 to i64
  %3934 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %2982, i64 %3933
  %3935 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %3934, i64 1
  %3936 = getelementptr inbounds %class.Vector, ptr %968, i64 %3917
  %3937 = getelementptr inbounds %class.Vector, ptr %972, i64 %3917
  %3938 = getelementptr inbounds %struct.CompAtom, ptr %108, i64 %3917, i32 1
  %3939 = load float, ptr %3938, align 8, !tbaa !104
  %3940 = fpext float %3939 to double
  %3941 = fmul double %2973, %3940
  %3942 = load double, ptr %3918, align 8, !tbaa !68
  %3943 = fsub double %1062, %3942
  %3944 = getelementptr inbounds %class.Vector, ptr %3918, i64 0, i32 1
  %3945 = load <2 x double>, ptr %3944, align 8, !tbaa !19
  %3946 = fsub <2 x double> %1065, %3945
  %3947 = load double, ptr %3935, align 8, !tbaa !109
  %3948 = fmul double %33, %3947
  %3949 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %3934, i64 1, i32 1
  %3950 = load double, ptr %3949, align 8, !tbaa !111
  %3951 = fmul double %33, %3950
  %3952 = fsub double %3920, %36
  call void @_Z24fep_vdw_forceandenergiesdddddddddiidddPdS_S_(double noundef %3948, double noundef %3951, double noundef %3952, double noundef %59, double noundef %65, double noundef %40, double noundef %41, double noundef %56, double noundef %63, i32 noundef %48, i32 noundef %49, double noundef %50, double noundef %51, double noundef %45, ptr noundef nonnull %3, ptr noundef nonnull %4, ptr noundef nonnull %5)
  %3953 = load double, ptr %3, align 8, !tbaa !19
  %3954 = fadd double %3896, %3953
  %3955 = load double, ptr %5, align 8, !tbaa !19
  %3956 = fadd double %3897, %3955
  %3957 = fmul double %1013, %3941
  %3958 = getelementptr inbounds double, ptr %3928, i64 8
  %3959 = load double, ptr %3958, align 8, !tbaa !19
  %3960 = fmul double %3957, %3959
  %3961 = getelementptr inbounds double, ptr %3928, i64 9
  %3962 = load double, ptr %3961, align 8, !tbaa !19
  %3963 = fmul double %3957, %3962
  %3964 = getelementptr inbounds double, ptr %3928, i64 10
  %3965 = load double, ptr %3964, align 8, !tbaa !19
  %3966 = fmul double %3957, %3965
  %3967 = getelementptr inbounds double, ptr %3928, i64 11
  %3968 = load double, ptr %3967, align 8, !tbaa !19
  %3969 = fmul double %3957, %3968
  %3970 = fmul double %3925, %3960
  %3971 = fmul double %3963, 2.500000e-01
  %3972 = call double @llvm.fmuladd.f64(double %3970, double 0x3FC5555555555555, double %3971)
  %3973 = fmul double %3966, 5.000000e-01
  %3974 = call double @llvm.fmuladd.f64(double %3972, double %3925, double %3973)
  %3975 = call double @llvm.fmuladd.f64(double %3974, double %3925, double %3969)
  %3976 = insertelement <2 x double> poison, double %3975, i64 0
  %3977 = shufflevector <2 x double> %3976, <2 x double> poison, <2 x i32> zeroinitializer
  %3978 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %1017, <2 x double> %3977, <2 x double> %3908)
  %3979 = call double @llvm.fmuladd.f64(double %3925, double %3960, double %3963)
  %3980 = call double @llvm.fmuladd.f64(double %3979, double %3925, double %3966)
  %3981 = fmul double %1023, %3980
  %3982 = load double, ptr %4, align 8, !tbaa !19
  %3983 = fadd double %3982, %3981
  %3984 = fmul double %3943, %3983
  %3985 = insertelement <2 x double> poison, double %3984, i64 0
  %3986 = shufflevector <2 x double> %3985, <2 x double> poison, <2 x i32> zeroinitializer
  %3987 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %3986, <2 x double> %3946, <2 x double> %3900)
  %3988 = insertelement <2 x double> poison, double %3983, i64 0
  %3989 = shufflevector <2 x double> %3988, <2 x double> poison, <2 x i32> zeroinitializer
  %3990 = fmul <2 x double> %3946, %3989
  %3991 = shufflevector <2 x double> %3990, <2 x double> poison, <2 x i32> <i32 1, i32 0>
  %3992 = extractelement <2 x double> %3946, i64 0
  %3993 = insertelement <2 x double> %3991, double %3984, i64 0
  %3994 = shufflevector <2 x double> %3946, <2 x double> poison, <2 x i32> <i32 1, i32 0>
  %3995 = insertelement <2 x double> %3994, double %3943, i64 0
  %3996 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %3993, <2 x double> %3995, <2 x double> %3909)
  %3997 = fadd <2 x double> %3905, %3993
  %3998 = load <2 x double>, ptr %3936, align 8, !tbaa !19
  %3999 = fsub <2 x double> %3998, %3993
  store <2 x double> %3999, ptr %3936, align 8, !tbaa !19
  %4000 = shufflevector <2 x double> %3946, <2 x double> poison, <2 x i32> <i32 1, i32 1>
  %4001 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %3991, <2 x double> %4000, <2 x double> %3903)
  %4002 = extractelement <2 x double> %3990, i64 1
  %4003 = fadd double %3898, %4002
  %4004 = getelementptr inbounds %class.Vector, ptr %968, i64 %3917, i32 2
  %4005 = load double, ptr %4004, align 8, !tbaa !112
  %4006 = fsub double %4005, %4002
  store double %4006, ptr %4004, align 8, !tbaa !112
  %4007 = shl nsw i32 %3914, 2
  %4008 = sext i32 %4007 to i64
  %4009 = getelementptr inbounds double, ptr %32, i64 %4008
  %4010 = getelementptr inbounds double, ptr %3928, i64 12
  %4011 = load double, ptr %4010, align 8, !tbaa !19
  %4012 = getelementptr inbounds double, ptr %3928, i64 13
  %4013 = load double, ptr %4012, align 8, !tbaa !19
  %4014 = getelementptr inbounds double, ptr %3928, i64 14
  %4015 = load double, ptr %4014, align 8, !tbaa !19
  %4016 = getelementptr inbounds double, ptr %3928, i64 15
  %4017 = load double, ptr %4016, align 8, !tbaa !19
  %4018 = load double, ptr %4009, align 8, !tbaa !19
  %4019 = call double @llvm.fmuladd.f64(double %35, double %4018, double %4017)
  %4020 = getelementptr inbounds double, ptr %4009, i64 1
  %4021 = load double, ptr %4020, align 8, !tbaa !19
  %4022 = call double @llvm.fmuladd.f64(double %1014, double %4021, double %4015)
  %4023 = getelementptr inbounds double, ptr %4009, i64 2
  %4024 = load double, ptr %4023, align 8, !tbaa !19
  %4025 = call double @llvm.fmuladd.f64(double %1015, double %4024, double %4013)
  %4026 = getelementptr inbounds double, ptr %4009, i64 3
  %4027 = load double, ptr %4026, align 8, !tbaa !19
  %4028 = call double @llvm.fmuladd.f64(double %1016, double %4027, double %4011)
  %4029 = fmul double %3941, %4028
  %4030 = fmul double %3941, %4025
  %4031 = fmul double %3941, %4022
  %4032 = fmul double %3941, %4019
  %4033 = fmul double %3925, %4029
  %4034 = fmul double %4030, 2.500000e-01
  %4035 = call double @llvm.fmuladd.f64(double %4033, double 0x3FC5555555555555, double %4034)
  %4036 = fmul double %4031, 5.000000e-01
  %4037 = call double @llvm.fmuladd.f64(double %4035, double %3925, double %4036)
  %4038 = call double @llvm.fmuladd.f64(double %4037, double %3925, double %4032)
  %4039 = insertelement <2 x double> poison, double %4038, i64 0
  %4040 = shufflevector <2 x double> %4039, <2 x double> poison, <2 x i32> zeroinitializer
  %4041 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %1017, <2 x double> %4040, <2 x double> %3907)
  %4042 = call double @llvm.fmuladd.f64(double %3925, double %4029, double %4030)
  %4043 = call double @llvm.fmuladd.f64(double %4042, double %3925, double %4031)
  %4044 = fmul double %1023, %4043
  %4045 = fmul double %3992, %4044
  %4046 = insertelement <2 x double> poison, double %4045, i64 0
  %4047 = shufflevector <2 x double> %4046, <2 x double> poison, <2 x i32> zeroinitializer
  %4048 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %4047, <2 x double> %3946, <2 x double> %3902)
  %4049 = insertelement <2 x double> %3994, double %3943, i64 1
  %4050 = insertelement <2 x double> poison, double %4044, i64 0
  %4051 = shufflevector <2 x double> %4050, <2 x double> poison, <2 x i32> zeroinitializer
  %4052 = fmul <2 x double> %4049, %4051
  %4053 = shufflevector <2 x double> %4052, <2 x double> poison, <2 x i32> <i32 1, i32 poison>
  %4054 = shufflevector <2 x double> %4052, <2 x double> poison, <2 x i32> <i32 1, i32 1>
  %4055 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %4054, <2 x double> %3995, <2 x double> %3901)
  %4056 = insertelement <2 x double> %4053, double %4045, i64 1
  %4057 = fadd <2 x double> %3906, %4056
  %4058 = load <2 x double>, ptr %3937, align 8, !tbaa !19
  %4059 = fsub <2 x double> %4058, %4056
  store <2 x double> %4059, ptr %3937, align 8, !tbaa !19
  %4060 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %4052, <2 x double> %4000, <2 x double> %3904)
  %4061 = extractelement <2 x double> %4052, i64 0
  %4062 = fadd double %3899, %4061
  %4063 = getelementptr inbounds %class.Vector, ptr %972, i64 %3917, i32 2
  %4064 = load double, ptr %4063, align 8, !tbaa !112
  %4065 = fsub double %4064, %4061
  store double %4065, ptr %4063, align 8, !tbaa !112
  %4066 = add nuw nsw i64 %3895, 1
  %4067 = icmp eq i64 %4066, %3893
  br i1 %4067, label %4068, label %3894

4068:                                             ; preds = %3894, %3873
  %4069 = phi double [ %3874, %3873 ], [ %4062, %3894 ]
  %4070 = phi double [ %3875, %3873 ], [ %4003, %3894 ]
  %4071 = phi double [ %3876, %3873 ], [ %3956, %3894 ]
  %4072 = phi double [ %3877, %3873 ], [ %3954, %3894 ]
  %4073 = phi <2 x double> [ %3878, %3873 ], [ %3987, %3894 ]
  %4074 = phi <2 x double> [ %3879, %3873 ], [ %4055, %3894 ]
  %4075 = phi <2 x double> [ %3880, %3873 ], [ %4048, %3894 ]
  %4076 = phi <2 x double> [ %3881, %3873 ], [ %4001, %3894 ]
  %4077 = phi <2 x double> [ %3882, %3873 ], [ %4060, %3894 ]
  %4078 = phi <2 x double> [ %3883, %3873 ], [ %3997, %3894 ]
  %4079 = phi <2 x double> [ %3884, %3873 ], [ %4057, %3894 ]
  %4080 = phi <2 x double> [ %3885, %3873 ], [ %4041, %3894 ]
  %4081 = phi <2 x double> [ %3886, %3873 ], [ %3978, %3894 ]
  %4082 = phi <2 x double> [ %3887, %3873 ], [ %3996, %3894 ]
  %4083 = load double, ptr @_ZN20ComputeNonbondedUtil7cutoff2E, align 8, !tbaa !19
  %4084 = call noundef i32 @_Z22pairlist_from_pairlistddddPK8CompAtomPKtiPtdPd(double noundef %4083, double noundef %1062, double noundef %2984, double noundef %2985, ptr noundef %108, ptr noundef %2962, i32 noundef %2963, ptr noundef %161, double noundef %36, ptr noundef %207)
  %4085 = add nsw i32 %3890, %4084
  %4086 = icmp sgt i32 %4084, 0
  br i1 %4086, label %4087, label %4263

4087:                                             ; preds = %4068
  %4088 = zext i32 %4084 to i64
  br label %4089

4089:                                             ; preds = %4087, %4089
  %4090 = phi i64 [ 0, %4087 ], [ %4261, %4089 ]
  %4091 = phi double [ %4072, %4087 ], [ %4149, %4089 ]
  %4092 = phi double [ %4071, %4087 ], [ %4151, %4089 ]
  %4093 = phi double [ %4070, %4087 ], [ %4198, %4089 ]
  %4094 = phi double [ %4069, %4087 ], [ %4257, %4089 ]
  %4095 = phi <2 x double> [ %4073, %4087 ], [ %4182, %4089 ]
  %4096 = phi <2 x double> [ %4074, %4087 ], [ %4250, %4089 ]
  %4097 = phi <2 x double> [ %4075, %4087 ], [ %4243, %4089 ]
  %4098 = phi <2 x double> [ %4076, %4087 ], [ %4196, %4089 ]
  %4099 = phi <2 x double> [ %4077, %4087 ], [ %4255, %4089 ]
  %4100 = phi <2 x double> [ %4078, %4087 ], [ %4192, %4089 ]
  %4101 = phi <2 x double> [ %4079, %4087 ], [ %4252, %4089 ]
  %4102 = phi <2 x double> [ %4080, %4087 ], [ %4236, %4089 ]
  %4103 = phi <2 x double> [ %4081, %4087 ], [ %4173, %4089 ]
  %4104 = phi <2 x double> [ %4082, %4087 ], [ %4191, %4089 ]
  %4105 = shl nuw nsw i64 %4090, 1
  %4106 = getelementptr inbounds i32, ptr %208, i64 %4105
  %4107 = load i32, ptr %4106, align 4, !tbaa !5
  %4108 = ashr i32 %4107, 14
  %4109 = add nsw i32 %4108, %39
  %4110 = getelementptr inbounds i16, ptr %161, i64 %4090
  %4111 = load i16, ptr %4110, align 2, !tbaa !44
  %4112 = zext i16 %4111 to i64
  %4113 = getelementptr inbounds %struct.CompAtom, ptr %108, i64 %4112
  %4114 = getelementptr inbounds double, ptr %207, i64 %4090
  %4115 = load double, ptr %4114, align 8, !tbaa !19
  %4116 = load ptr, ptr @_ZN20ComputeNonbondedUtil8r2_tableE, align 8, !tbaa !23
  %4117 = sext i32 %4109 to i64
  %4118 = getelementptr inbounds double, ptr %4116, i64 %4117
  %4119 = load double, ptr %4118, align 8, !tbaa !19
  %4120 = fsub double %4115, %4119
  %4121 = shl nsw i32 %4109, 4
  %4122 = sext i32 %4121 to i64
  %4123 = getelementptr inbounds double, ptr %31, i64 %4122
  %4124 = getelementptr inbounds %struct.CompAtom, ptr %108, i64 %4112, i32 2
  %4125 = load i16, ptr %4124, align 4, !tbaa !105
  %4126 = sext i16 %4125 to i32
  %4127 = shl nsw i32 %4126, 1
  %4128 = sext i32 %4127 to i64
  %4129 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %2982, i64 %4128
  %4130 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %4129, i64 1
  %4131 = getelementptr inbounds %class.Vector, ptr %968, i64 %4112
  %4132 = getelementptr inbounds %class.Vector, ptr %972, i64 %4112
  %4133 = getelementptr inbounds %struct.CompAtom, ptr %108, i64 %4112, i32 1
  %4134 = load float, ptr %4133, align 8, !tbaa !104
  %4135 = fpext float %4134 to double
  %4136 = fmul double %2973, %4135
  %4137 = load double, ptr %4113, align 8, !tbaa !68
  %4138 = fsub double %1062, %4137
  %4139 = getelementptr inbounds %class.Vector, ptr %4113, i64 0, i32 1
  %4140 = load <2 x double>, ptr %4139, align 8, !tbaa !19
  %4141 = fsub <2 x double> %1065, %4140
  %4142 = load double, ptr %4130, align 8, !tbaa !109
  %4143 = fmul double %33, %4142
  %4144 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %4129, i64 1, i32 1
  %4145 = load double, ptr %4144, align 8, !tbaa !111
  %4146 = fmul double %33, %4145
  %4147 = fsub double %4115, %36
  call void @_Z24fep_vdw_forceandenergiesdddddddddiidddPdS_S_(double noundef %4143, double noundef %4146, double noundef %4147, double noundef %85, double noundef %92, double noundef %40, double noundef %41, double noundef %83, double noundef %90, i32 noundef %48, i32 noundef %49, double noundef %50, double noundef %51, double noundef %45, ptr noundef nonnull %3, ptr noundef nonnull %4, ptr noundef nonnull %5)
  %4148 = load double, ptr %3, align 8, !tbaa !19
  %4149 = fadd double %4091, %4148
  %4150 = load double, ptr %5, align 8, !tbaa !19
  %4151 = fadd double %4092, %4150
  %4152 = fmul double %1013, %4136
  %4153 = getelementptr inbounds double, ptr %4123, i64 8
  %4154 = load double, ptr %4153, align 8, !tbaa !19
  %4155 = fmul double %4152, %4154
  %4156 = getelementptr inbounds double, ptr %4123, i64 9
  %4157 = load double, ptr %4156, align 8, !tbaa !19
  %4158 = fmul double %4152, %4157
  %4159 = getelementptr inbounds double, ptr %4123, i64 10
  %4160 = load double, ptr %4159, align 8, !tbaa !19
  %4161 = fmul double %4152, %4160
  %4162 = getelementptr inbounds double, ptr %4123, i64 11
  %4163 = load double, ptr %4162, align 8, !tbaa !19
  %4164 = fmul double %4152, %4163
  %4165 = fmul double %4120, %4155
  %4166 = fmul double %4158, 2.500000e-01
  %4167 = call double @llvm.fmuladd.f64(double %4165, double 0x3FC5555555555555, double %4166)
  %4168 = fmul double %4161, 5.000000e-01
  %4169 = call double @llvm.fmuladd.f64(double %4167, double %4120, double %4168)
  %4170 = call double @llvm.fmuladd.f64(double %4169, double %4120, double %4164)
  %4171 = insertelement <2 x double> poison, double %4170, i64 0
  %4172 = shufflevector <2 x double> %4171, <2 x double> poison, <2 x i32> zeroinitializer
  %4173 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %1018, <2 x double> %4172, <2 x double> %4103)
  %4174 = call double @llvm.fmuladd.f64(double %4120, double %4155, double %4158)
  %4175 = call double @llvm.fmuladd.f64(double %4174, double %4120, double %4161)
  %4176 = fmul double %1024, %4175
  %4177 = load double, ptr %4, align 8, !tbaa !19
  %4178 = fadd double %4177, %4176
  %4179 = fmul double %4138, %4178
  %4180 = insertelement <2 x double> poison, double %4179, i64 0
  %4181 = shufflevector <2 x double> %4180, <2 x double> poison, <2 x i32> zeroinitializer
  %4182 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %4181, <2 x double> %4141, <2 x double> %4095)
  %4183 = insertelement <2 x double> poison, double %4178, i64 0
  %4184 = shufflevector <2 x double> %4183, <2 x double> poison, <2 x i32> zeroinitializer
  %4185 = fmul <2 x double> %4141, %4184
  %4186 = shufflevector <2 x double> %4185, <2 x double> poison, <2 x i32> <i32 1, i32 0>
  %4187 = extractelement <2 x double> %4141, i64 0
  %4188 = insertelement <2 x double> %4186, double %4179, i64 0
  %4189 = shufflevector <2 x double> %4141, <2 x double> poison, <2 x i32> <i32 1, i32 0>
  %4190 = insertelement <2 x double> %4189, double %4138, i64 0
  %4191 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %4188, <2 x double> %4190, <2 x double> %4104)
  %4192 = fadd <2 x double> %4100, %4188
  %4193 = load <2 x double>, ptr %4131, align 8, !tbaa !19
  %4194 = fsub <2 x double> %4193, %4188
  store <2 x double> %4194, ptr %4131, align 8, !tbaa !19
  %4195 = shufflevector <2 x double> %4141, <2 x double> poison, <2 x i32> <i32 1, i32 1>
  %4196 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %4186, <2 x double> %4195, <2 x double> %4098)
  %4197 = extractelement <2 x double> %4185, i64 1
  %4198 = fadd double %4093, %4197
  %4199 = getelementptr inbounds %class.Vector, ptr %968, i64 %4112, i32 2
  %4200 = load double, ptr %4199, align 8, !tbaa !112
  %4201 = fsub double %4200, %4197
  store double %4201, ptr %4199, align 8, !tbaa !112
  %4202 = shl nsw i32 %4109, 2
  %4203 = sext i32 %4202 to i64
  %4204 = getelementptr inbounds double, ptr %32, i64 %4203
  %4205 = getelementptr inbounds double, ptr %4123, i64 12
  %4206 = load double, ptr %4205, align 8, !tbaa !19
  %4207 = getelementptr inbounds double, ptr %4123, i64 13
  %4208 = load double, ptr %4207, align 8, !tbaa !19
  %4209 = getelementptr inbounds double, ptr %4123, i64 14
  %4210 = load double, ptr %4209, align 8, !tbaa !19
  %4211 = getelementptr inbounds double, ptr %4123, i64 15
  %4212 = load double, ptr %4211, align 8, !tbaa !19
  %4213 = load double, ptr %4204, align 8, !tbaa !19
  %4214 = call double @llvm.fmuladd.f64(double %35, double %4213, double %4212)
  %4215 = getelementptr inbounds double, ptr %4204, i64 1
  %4216 = load double, ptr %4215, align 8, !tbaa !19
  %4217 = call double @llvm.fmuladd.f64(double %1014, double %4216, double %4210)
  %4218 = getelementptr inbounds double, ptr %4204, i64 2
  %4219 = load double, ptr %4218, align 8, !tbaa !19
  %4220 = call double @llvm.fmuladd.f64(double %1015, double %4219, double %4208)
  %4221 = getelementptr inbounds double, ptr %4204, i64 3
  %4222 = load double, ptr %4221, align 8, !tbaa !19
  %4223 = call double @llvm.fmuladd.f64(double %1016, double %4222, double %4206)
  %4224 = fmul double %4136, %4223
  %4225 = fmul double %4136, %4220
  %4226 = fmul double %4136, %4217
  %4227 = fmul double %4136, %4214
  %4228 = fmul double %4120, %4224
  %4229 = fmul double %4225, 2.500000e-01
  %4230 = call double @llvm.fmuladd.f64(double %4228, double 0x3FC5555555555555, double %4229)
  %4231 = fmul double %4226, 5.000000e-01
  %4232 = call double @llvm.fmuladd.f64(double %4230, double %4120, double %4231)
  %4233 = call double @llvm.fmuladd.f64(double %4232, double %4120, double %4227)
  %4234 = insertelement <2 x double> poison, double %4233, i64 0
  %4235 = shufflevector <2 x double> %4234, <2 x double> poison, <2 x i32> zeroinitializer
  %4236 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %1018, <2 x double> %4235, <2 x double> %4102)
  %4237 = call double @llvm.fmuladd.f64(double %4120, double %4224, double %4225)
  %4238 = call double @llvm.fmuladd.f64(double %4237, double %4120, double %4226)
  %4239 = fmul double %1024, %4238
  %4240 = fmul double %4187, %4239
  %4241 = insertelement <2 x double> poison, double %4240, i64 0
  %4242 = shufflevector <2 x double> %4241, <2 x double> poison, <2 x i32> zeroinitializer
  %4243 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %4242, <2 x double> %4141, <2 x double> %4097)
  %4244 = insertelement <2 x double> %4189, double %4138, i64 1
  %4245 = insertelement <2 x double> poison, double %4239, i64 0
  %4246 = shufflevector <2 x double> %4245, <2 x double> poison, <2 x i32> zeroinitializer
  %4247 = fmul <2 x double> %4244, %4246
  %4248 = shufflevector <2 x double> %4247, <2 x double> poison, <2 x i32> <i32 1, i32 poison>
  %4249 = shufflevector <2 x double> %4247, <2 x double> poison, <2 x i32> <i32 1, i32 1>
  %4250 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %4249, <2 x double> %4190, <2 x double> %4096)
  %4251 = insertelement <2 x double> %4248, double %4240, i64 1
  %4252 = fadd <2 x double> %4101, %4251
  %4253 = load <2 x double>, ptr %4132, align 8, !tbaa !19
  %4254 = fsub <2 x double> %4253, %4251
  store <2 x double> %4254, ptr %4132, align 8, !tbaa !19
  %4255 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %4247, <2 x double> %4195, <2 x double> %4099)
  %4256 = extractelement <2 x double> %4247, i64 0
  %4257 = fadd double %4094, %4256
  %4258 = getelementptr inbounds %class.Vector, ptr %972, i64 %4112, i32 2
  %4259 = load double, ptr %4258, align 8, !tbaa !112
  %4260 = fsub double %4259, %4256
  store double %4260, ptr %4258, align 8, !tbaa !112
  %4261 = add nuw nsw i64 %4090, 1
  %4262 = icmp eq i64 %4261, %4088
  br i1 %4262, label %4263, label %4089

4263:                                             ; preds = %4089, %4068
  %4264 = phi double [ %4069, %4068 ], [ %4257, %4089 ]
  %4265 = phi double [ %4070, %4068 ], [ %4198, %4089 ]
  %4266 = phi double [ %4071, %4068 ], [ %4151, %4089 ]
  %4267 = phi double [ %4072, %4068 ], [ %4149, %4089 ]
  %4268 = phi <2 x double> [ %4073, %4068 ], [ %4182, %4089 ]
  %4269 = phi <2 x double> [ %4074, %4068 ], [ %4250, %4089 ]
  %4270 = phi <2 x double> [ %4075, %4068 ], [ %4243, %4089 ]
  %4271 = phi <2 x double> [ %4076, %4068 ], [ %4196, %4089 ]
  %4272 = phi <2 x double> [ %4077, %4068 ], [ %4255, %4089 ]
  %4273 = phi <2 x double> [ %4078, %4068 ], [ %4192, %4089 ]
  %4274 = phi <2 x double> [ %4079, %4068 ], [ %4252, %4089 ]
  %4275 = phi <2 x double> [ %4080, %4068 ], [ %4236, %4089 ]
  %4276 = phi <2 x double> [ %4081, %4068 ], [ %4173, %4089 ]
  %4277 = phi <2 x double> [ %4082, %4068 ], [ %4191, %4089 ]
  %4278 = load double, ptr @_ZN20ComputeNonbondedUtil7cutoff2E, align 8, !tbaa !19
  %4279 = call noundef i32 @_Z22pairlist_from_pairlistddddPK8CompAtomPKtiPtdPd(double noundef %4278, double noundef %1062, double noundef %2984, double noundef %2985, ptr noundef %108, ptr noundef %2954, i32 noundef %2955, ptr noundef %161, double noundef %36, ptr noundef %207)
  %4280 = add nsw i32 %4085, %4279
  %4281 = icmp sgt i32 %4279, 0
  br i1 %4281, label %4282, label %4388

4282:                                             ; preds = %4263
  %4283 = load ptr, ptr @_ZN20ComputeNonbondedUtil8r2_tableE, align 8, !tbaa !23
  %4284 = zext i32 %4279 to i64
  %4285 = shufflevector <2 x double> %1065, <2 x double> poison, <2 x i32> <i32 poison, i32 0>
  %4286 = insertelement <2 x double> %4285, double %1062, i64 0
  br label %4287

4287:                                             ; preds = %4282, %4287
  %4288 = phi i64 [ 0, %4282 ], [ %4386, %4287 ]
  %4289 = phi double [ %4264, %4282 ], [ %4382, %4287 ]
  %4290 = phi <2 x double> [ %4269, %4282 ], [ %4374, %4287 ]
  %4291 = phi <2 x double> [ %4270, %4282 ], [ %4367, %4287 ]
  %4292 = phi <2 x double> [ %4272, %4282 ], [ %4380, %4287 ]
  %4293 = phi <2 x double> [ %4274, %4282 ], [ %4376, %4287 ]
  %4294 = phi <2 x double> [ %4275, %4282 ], [ %4357, %4287 ]
  %4295 = shl nuw nsw i64 %4288, 1
  %4296 = getelementptr inbounds i32, ptr %208, i64 %4295
  %4297 = load i32, ptr %4296, align 4, !tbaa !5
  %4298 = ashr i32 %4297, 14
  %4299 = add nsw i32 %4298, %39
  %4300 = getelementptr inbounds i16, ptr %161, i64 %4288
  %4301 = load i16, ptr %4300, align 2, !tbaa !44
  %4302 = zext i16 %4301 to i64
  %4303 = getelementptr inbounds %struct.CompAtom, ptr %108, i64 %4302
  %4304 = getelementptr inbounds double, ptr %207, i64 %4288
  %4305 = load double, ptr %4304, align 8, !tbaa !19
  %4306 = sext i32 %4299 to i64
  %4307 = getelementptr inbounds double, ptr %4283, i64 %4306
  %4308 = load double, ptr %4307, align 8, !tbaa !19
  %4309 = fsub double %4305, %4308
  %4310 = shl nsw i32 %4299, 4
  %4311 = sext i32 %4310 to i64
  %4312 = getelementptr inbounds double, ptr %31, i64 %4311
  %4313 = getelementptr inbounds %class.Vector, ptr %972, i64 %4302
  %4314 = getelementptr inbounds %struct.CompAtom, ptr %108, i64 %4302, i32 1
  %4315 = load float, ptr %4314, align 8, !tbaa !104
  %4316 = fpext float %4315 to double
  %4317 = fmul double %2973, %4316
  %4318 = load <2 x double>, ptr %4303, align 8, !tbaa !19
  %4319 = fsub <2 x double> %4286, %4318
  %4320 = getelementptr inbounds %class.Vector, ptr %4303, i64 0, i32 2
  %4321 = load double, ptr %4320, align 8, !tbaa !49
  %4322 = fsub double %2985, %4321
  %4323 = shl nsw i32 %4299, 2
  %4324 = sext i32 %4323 to i64
  %4325 = getelementptr inbounds double, ptr %32, i64 %4324
  %4326 = getelementptr inbounds double, ptr %4312, i64 12
  %4327 = load double, ptr %4326, align 8, !tbaa !19
  %4328 = getelementptr inbounds double, ptr %4312, i64 13
  %4329 = load double, ptr %4328, align 8, !tbaa !19
  %4330 = getelementptr inbounds double, ptr %4312, i64 14
  %4331 = load double, ptr %4330, align 8, !tbaa !19
  %4332 = getelementptr inbounds double, ptr %4312, i64 15
  %4333 = load double, ptr %4332, align 8, !tbaa !19
  %4334 = load double, ptr %4325, align 8, !tbaa !19
  %4335 = fadd double %4333, %4334
  %4336 = getelementptr inbounds double, ptr %4325, i64 1
  %4337 = load double, ptr %4336, align 8, !tbaa !19
  %4338 = call double @llvm.fmuladd.f64(double %4337, double 2.000000e+00, double %4331)
  %4339 = getelementptr inbounds double, ptr %4325, i64 2
  %4340 = load double, ptr %4339, align 8, !tbaa !19
  %4341 = call double @llvm.fmuladd.f64(double %4340, double 4.000000e+00, double %4329)
  %4342 = getelementptr inbounds double, ptr %4325, i64 3
  %4343 = load double, ptr %4342, align 8, !tbaa !19
  %4344 = call double @llvm.fmuladd.f64(double %4343, double 6.000000e+00, double %4327)
  %4345 = fmul double %4317, %4344
  %4346 = fmul double %4317, %4341
  %4347 = fmul double %4317, %4338
  %4348 = fmul double %4317, %4335
  %4349 = fmul double %4309, %4345
  %4350 = fmul double %4346, 2.500000e-01
  %4351 = call double @llvm.fmuladd.f64(double %4349, double 0x3FC5555555555555, double %4350)
  %4352 = fmul double %4347, 5.000000e-01
  %4353 = call double @llvm.fmuladd.f64(double %4351, double %4309, double %4352)
  %4354 = call double @llvm.fmuladd.f64(double %4353, double %4309, double %4348)
  %4355 = insertelement <2 x double> poison, double %4354, i64 0
  %4356 = shufflevector <2 x double> %4355, <2 x double> poison, <2 x i32> zeroinitializer
  %4357 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %1017, <2 x double> %4356, <2 x double> %4294)
  %4358 = call double @llvm.fmuladd.f64(double %4309, double %4345, double %4346)
  %4359 = call double @llvm.fmuladd.f64(double %4358, double %4309, double %4347)
  %4360 = fmul double %1025, %4359
  %4361 = extractelement <2 x double> %4319, i64 1
  %4362 = fmul double %4361, %4360
  %4363 = insertelement <2 x double> poison, double %4362, i64 0
  %4364 = shufflevector <2 x double> %4363, <2 x double> poison, <2 x i32> zeroinitializer
  %4365 = shufflevector <2 x double> %4319, <2 x double> poison, <2 x i32> <i32 1, i32 0>
  %4366 = insertelement <2 x double> %4365, double %4322, i64 1
  %4367 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %4364, <2 x double> %4366, <2 x double> %4291)
  %4368 = insertelement <2 x double> %4365, double %4322, i64 0
  %4369 = insertelement <2 x double> poison, double %4360, i64 0
  %4370 = shufflevector <2 x double> %4369, <2 x double> poison, <2 x i32> zeroinitializer
  %4371 = fmul <2 x double> %4368, %4370
  %4372 = shufflevector <2 x double> %4371, <2 x double> poison, <2 x i32> <i32 1, i32 poison>
  %4373 = shufflevector <2 x double> %4371, <2 x double> poison, <2 x i32> <i32 1, i32 1>
  %4374 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %4373, <2 x double> %4319, <2 x double> %4290)
  %4375 = insertelement <2 x double> %4372, double %4362, i64 1
  %4376 = fadd <2 x double> %4293, %4375
  %4377 = load <2 x double>, ptr %4313, align 8, !tbaa !19
  %4378 = fsub <2 x double> %4377, %4375
  store <2 x double> %4378, ptr %4313, align 8, !tbaa !19
  %4379 = shufflevector <2 x double> %4368, <2 x double> poison, <2 x i32> zeroinitializer
  %4380 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %4371, <2 x double> %4379, <2 x double> %4292)
  %4381 = extractelement <2 x double> %4371, i64 0
  %4382 = fadd double %4289, %4381
  %4383 = getelementptr inbounds %class.Vector, ptr %972, i64 %4302, i32 2
  %4384 = load double, ptr %4383, align 8, !tbaa !112
  %4385 = fsub double %4384, %4381
  store double %4385, ptr %4383, align 8, !tbaa !112
  %4386 = add nuw nsw i64 %4288, 1
  %4387 = icmp eq i64 %4386, %4284
  br i1 %4387, label %4388, label %4287

4388:                                             ; preds = %4287, %4263
  %4389 = phi double [ %4264, %4263 ], [ %4382, %4287 ]
  %4390 = phi <2 x double> [ %4269, %4263 ], [ %4374, %4287 ]
  %4391 = phi <2 x double> [ %4270, %4263 ], [ %4367, %4287 ]
  %4392 = phi <2 x double> [ %4272, %4263 ], [ %4380, %4287 ]
  %4393 = phi <2 x double> [ %4274, %4263 ], [ %4376, %4287 ]
  %4394 = phi <2 x double> [ %4275, %4263 ], [ %4357, %4287 ]
  %4395 = load double, ptr @_ZN20ComputeNonbondedUtil7cutoff2E, align 8, !tbaa !19
  %4396 = call noundef i32 @_Z22pairlist_from_pairlistddddPK8CompAtomPKtiPtdPd(double noundef %4395, double noundef %1062, double noundef %2984, double noundef %2985, ptr noundef %108, ptr noundef %2960, i32 noundef %2961, ptr noundef %161, double noundef %36, ptr noundef %207)
  %4397 = add nsw i32 %4280, %4396
  %4398 = icmp sgt i32 %4396, 0
  br i1 %4398, label %4399, label %4505

4399:                                             ; preds = %4388
  %4400 = load ptr, ptr @_ZN20ComputeNonbondedUtil8r2_tableE, align 8, !tbaa !23
  %4401 = zext i32 %4396 to i64
  %4402 = shufflevector <2 x double> %1065, <2 x double> poison, <2 x i32> <i32 poison, i32 0>
  %4403 = insertelement <2 x double> %4402, double %1062, i64 0
  br label %4404

4404:                                             ; preds = %4399, %4404
  %4405 = phi i64 [ 0, %4399 ], [ %4503, %4404 ]
  %4406 = phi double [ %4389, %4399 ], [ %4499, %4404 ]
  %4407 = phi <2 x double> [ %4390, %4399 ], [ %4491, %4404 ]
  %4408 = phi <2 x double> [ %4391, %4399 ], [ %4484, %4404 ]
  %4409 = phi <2 x double> [ %4392, %4399 ], [ %4497, %4404 ]
  %4410 = phi <2 x double> [ %4393, %4399 ], [ %4493, %4404 ]
  %4411 = phi <2 x double> [ %4394, %4399 ], [ %4474, %4404 ]
  %4412 = shl nuw nsw i64 %4405, 1
  %4413 = getelementptr inbounds i32, ptr %208, i64 %4412
  %4414 = load i32, ptr %4413, align 4, !tbaa !5
  %4415 = ashr i32 %4414, 14
  %4416 = add nsw i32 %4415, %39
  %4417 = getelementptr inbounds i16, ptr %161, i64 %4405
  %4418 = load i16, ptr %4417, align 2, !tbaa !44
  %4419 = zext i16 %4418 to i64
  %4420 = getelementptr inbounds %struct.CompAtom, ptr %108, i64 %4419
  %4421 = getelementptr inbounds double, ptr %207, i64 %4405
  %4422 = load double, ptr %4421, align 8, !tbaa !19
  %4423 = sext i32 %4416 to i64
  %4424 = getelementptr inbounds double, ptr %4400, i64 %4423
  %4425 = load double, ptr %4424, align 8, !tbaa !19
  %4426 = fsub double %4422, %4425
  %4427 = shl nsw i32 %4416, 4
  %4428 = sext i32 %4427 to i64
  %4429 = getelementptr inbounds double, ptr %31, i64 %4428
  %4430 = getelementptr inbounds %class.Vector, ptr %972, i64 %4419
  %4431 = getelementptr inbounds %struct.CompAtom, ptr %108, i64 %4419, i32 1
  %4432 = load float, ptr %4431, align 8, !tbaa !104
  %4433 = fpext float %4432 to double
  %4434 = fmul double %2973, %4433
  %4435 = load <2 x double>, ptr %4420, align 8, !tbaa !19
  %4436 = fsub <2 x double> %4403, %4435
  %4437 = getelementptr inbounds %class.Vector, ptr %4420, i64 0, i32 2
  %4438 = load double, ptr %4437, align 8, !tbaa !49
  %4439 = fsub double %2985, %4438
  %4440 = shl nsw i32 %4416, 2
  %4441 = sext i32 %4440 to i64
  %4442 = getelementptr inbounds double, ptr %32, i64 %4441
  %4443 = getelementptr inbounds double, ptr %4429, i64 12
  %4444 = load double, ptr %4443, align 8, !tbaa !19
  %4445 = getelementptr inbounds double, ptr %4429, i64 13
  %4446 = load double, ptr %4445, align 8, !tbaa !19
  %4447 = getelementptr inbounds double, ptr %4429, i64 14
  %4448 = load double, ptr %4447, align 8, !tbaa !19
  %4449 = getelementptr inbounds double, ptr %4429, i64 15
  %4450 = load double, ptr %4449, align 8, !tbaa !19
  %4451 = load double, ptr %4442, align 8, !tbaa !19
  %4452 = fadd double %4450, %4451
  %4453 = getelementptr inbounds double, ptr %4442, i64 1
  %4454 = load double, ptr %4453, align 8, !tbaa !19
  %4455 = call double @llvm.fmuladd.f64(double %4454, double 2.000000e+00, double %4448)
  %4456 = getelementptr inbounds double, ptr %4442, i64 2
  %4457 = load double, ptr %4456, align 8, !tbaa !19
  %4458 = call double @llvm.fmuladd.f64(double %4457, double 4.000000e+00, double %4446)
  %4459 = getelementptr inbounds double, ptr %4442, i64 3
  %4460 = load double, ptr %4459, align 8, !tbaa !19
  %4461 = call double @llvm.fmuladd.f64(double %4460, double 6.000000e+00, double %4444)
  %4462 = fmul double %4434, %4461
  %4463 = fmul double %4434, %4458
  %4464 = fmul double %4434, %4455
  %4465 = fmul double %4434, %4452
  %4466 = fmul double %4426, %4462
  %4467 = fmul double %4463, 2.500000e-01
  %4468 = call double @llvm.fmuladd.f64(double %4466, double 0x3FC5555555555555, double %4467)
  %4469 = fmul double %4464, 5.000000e-01
  %4470 = call double @llvm.fmuladd.f64(double %4468, double %4426, double %4469)
  %4471 = call double @llvm.fmuladd.f64(double %4470, double %4426, double %4465)
  %4472 = insertelement <2 x double> poison, double %4471, i64 0
  %4473 = shufflevector <2 x double> %4472, <2 x double> poison, <2 x i32> zeroinitializer
  %4474 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %1018, <2 x double> %4473, <2 x double> %4411)
  %4475 = call double @llvm.fmuladd.f64(double %4426, double %4462, double %4463)
  %4476 = call double @llvm.fmuladd.f64(double %4475, double %4426, double %4464)
  %4477 = fmul double %1026, %4476
  %4478 = extractelement <2 x double> %4436, i64 1
  %4479 = fmul double %4478, %4477
  %4480 = insertelement <2 x double> poison, double %4479, i64 0
  %4481 = shufflevector <2 x double> %4480, <2 x double> poison, <2 x i32> zeroinitializer
  %4482 = shufflevector <2 x double> %4436, <2 x double> poison, <2 x i32> <i32 1, i32 0>
  %4483 = insertelement <2 x double> %4482, double %4439, i64 1
  %4484 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %4481, <2 x double> %4483, <2 x double> %4408)
  %4485 = insertelement <2 x double> %4482, double %4439, i64 0
  %4486 = insertelement <2 x double> poison, double %4477, i64 0
  %4487 = shufflevector <2 x double> %4486, <2 x double> poison, <2 x i32> zeroinitializer
  %4488 = fmul <2 x double> %4485, %4487
  %4489 = shufflevector <2 x double> %4488, <2 x double> poison, <2 x i32> <i32 1, i32 poison>
  %4490 = shufflevector <2 x double> %4488, <2 x double> poison, <2 x i32> <i32 1, i32 1>
  %4491 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %4490, <2 x double> %4436, <2 x double> %4407)
  %4492 = insertelement <2 x double> %4489, double %4479, i64 1
  %4493 = fadd <2 x double> %4410, %4492
  %4494 = load <2 x double>, ptr %4430, align 8, !tbaa !19
  %4495 = fsub <2 x double> %4494, %4492
  store <2 x double> %4495, ptr %4430, align 8, !tbaa !19
  %4496 = shufflevector <2 x double> %4485, <2 x double> poison, <2 x i32> zeroinitializer
  %4497 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %4488, <2 x double> %4496, <2 x double> %4409)
  %4498 = extractelement <2 x double> %4488, i64 0
  %4499 = fadd double %4406, %4498
  %4500 = getelementptr inbounds %class.Vector, ptr %972, i64 %4419, i32 2
  %4501 = load double, ptr %4500, align 8, !tbaa !112
  %4502 = fsub double %4501, %4498
  store double %4502, ptr %4500, align 8, !tbaa !112
  %4503 = add nuw nsw i64 %4405, 1
  %4504 = icmp eq i64 %4503, %4401
  br i1 %4504, label %4505, label %4404

4505:                                             ; preds = %4404, %4388
  %4506 = phi double [ %4389, %4388 ], [ %4499, %4404 ]
  %4507 = phi <2 x double> [ %4390, %4388 ], [ %4491, %4404 ]
  %4508 = phi <2 x double> [ %4391, %4388 ], [ %4484, %4404 ]
  %4509 = phi <2 x double> [ %4392, %4388 ], [ %4497, %4404 ]
  %4510 = phi <2 x double> [ %4393, %4388 ], [ %4493, %4404 ]
  %4511 = phi <2 x double> [ %4394, %4388 ], [ %4474, %4404 ]
  %4512 = getelementptr inbounds %class.Vector, ptr %966, i64 %1044
  %4513 = load <2 x double>, ptr %4512, align 8, !tbaa !19
  %4514 = fadd <2 x double> %4273, %4513
  store <2 x double> %4514, ptr %4512, align 8, !tbaa !19
  %4515 = getelementptr inbounds %class.Vector, ptr %966, i64 %1044, i32 2
  %4516 = load double, ptr %4515, align 8, !tbaa !112
  %4517 = fadd double %4265, %4516
  store double %4517, ptr %4515, align 8, !tbaa !112
  %4518 = getelementptr inbounds %class.Vector, ptr %970, i64 %1044
  %4519 = load <2 x double>, ptr %4518, align 8, !tbaa !19
  %4520 = fadd <2 x double> %4510, %4519
  store <2 x double> %4520, ptr %4518, align 8, !tbaa !19
  %4521 = getelementptr inbounds %class.Vector, ptr %970, i64 %1044, i32 2
  %4522 = load double, ptr %4521, align 8, !tbaa !112
  %4523 = fadd double %4506, %4522
  store double %4523, ptr %4521, align 8, !tbaa !112
  br i1 %211, label %4526, label %4524

4524:                                             ; preds = %4505
  %4525 = add nsw i32 %1031, 1
  br label %4534

4526:                                             ; preds = %4505
  %4527 = load ptr, ptr %12, align 8, !tbaa !46
  %4528 = load i32, ptr %17, align 8, !tbaa !17
  %4529 = add nsw i32 %4528, 1
  store i32 %4529, ptr %17, align 8, !tbaa !17
  %4530 = sext i32 %4528 to i64
  %4531 = getelementptr inbounds i16, ptr %4527, i64 %4530
  %4532 = load i16, ptr %4531, align 2, !tbaa !44
  %4533 = zext i16 %4532 to i32
  br label %4534

4534:                                             ; preds = %4526, %4524
  %4535 = phi i32 [ %4533, %4526 ], [ %4525, %4524 ]
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %5) #11
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %4) #11
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %3) #11
  %4536 = shufflevector <2 x double> %4276, <2 x double> poison, <4 x i32> <i32 1, i32 poison, i32 poison, i32 poison>
  %4537 = shufflevector <2 x double> %4511, <2 x double> poison, <4 x i32> <i32 poison, i32 1, i32 poison, i32 poison>
  %4538 = shufflevector <4 x double> %4536, <4 x double> %4537, <4 x i32> <i32 0, i32 5, i32 poison, i32 poison>
  %4539 = insertelement <4 x double> %4538, double %4267, i64 2
  %4540 = shufflevector <2 x double> %4277, <2 x double> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %4541 = shufflevector <4 x double> %4539, <4 x double> %4540, <4 x i32> <i32 0, i32 1, i32 2, i32 4>
  %4542 = shufflevector <2 x double> %4276, <2 x double> %4511, <2 x i32> <i32 0, i32 2>
  %4543 = extractelement <2 x double> %4277, i64 1
  br label %4544

4544:                                             ; preds = %1491, %1759, %4534, %1056
  %4545 = phi i32 [ %1060, %4534 ], [ %1057, %1056 ], [ %1060, %1759 ], [ %1060, %1491 ]
  %4546 = phi i32 [ %2964, %4534 ], [ %1035, %1056 ], [ %1505, %1759 ], [ 0, %1491 ]
  %4547 = phi ptr [ %2965, %4534 ], [ %1034, %1056 ], [ %1314, %1759 ], [ %1314, %1491 ]
  %4548 = phi ptr [ %2966, %4534 ], [ %1033, %1056 ], [ %1315, %1759 ], [ %1315, %1491 ]
  %4549 = phi ptr [ %2967, %4534 ], [ %1032, %1056 ], [ %1316, %1759 ], [ %1316, %1491 ]
  %4550 = phi i32 [ %4535, %4534 ], [ %1058, %1056 ], [ %1760, %1759 ], [ %1495, %1491 ]
  %4551 = phi double [ %4543, %4534 ], [ %1030, %1056 ], [ %1030, %1759 ], [ %1030, %1491 ]
  %4552 = phi double [ %4266, %4534 ], [ %1029, %1056 ], [ %1029, %1759 ], [ %1029, %1491 ]
  %4553 = phi i32 [ %4397, %4534 ], [ %1028, %1056 ], [ %1028, %1759 ], [ %1028, %1491 ]
  %4554 = phi <4 x double> [ %4541, %4534 ], [ %1037, %1056 ], [ %1037, %1759 ], [ %1037, %1491 ]
  %4555 = phi <2 x double> [ %4268, %4534 ], [ %1038, %1056 ], [ %1038, %1759 ], [ %1038, %1491 ]
  %4556 = phi <2 x double> [ %4542, %4534 ], [ %1039, %1056 ], [ %1039, %1759 ], [ %1039, %1491 ]
  %4557 = phi <2 x double> [ %4507, %4534 ], [ %1040, %1056 ], [ %1040, %1759 ], [ %1040, %1491 ]
  %4558 = phi <2 x double> [ %4508, %4534 ], [ %1041, %1056 ], [ %1041, %1759 ], [ %1041, %1491 ]
  %4559 = phi <2 x double> [ %4271, %4534 ], [ %1042, %1056 ], [ %1042, %1759 ], [ %1042, %1491 ]
  %4560 = phi <2 x double> [ %4509, %4534 ], [ %1043, %1056 ], [ %1043, %1759 ], [ %1043, %1491 ]
  %4561 = icmp slt i32 %4550, %103
  br i1 %4561, label %1027, label %4562

4562:                                             ; preds = %4544, %987
  %4563 = phi ptr [ null, %987 ], [ %4549, %4544 ]
  %4564 = phi i32 [ %989, %987 ], [ %4550, %4544 ]
  %4565 = phi double [ 0.000000e+00, %987 ], [ %4551, %4544 ]
  %4566 = phi double [ 0.000000e+00, %987 ], [ %4552, %4544 ]
  %4567 = phi i32 [ 0, %987 ], [ %4553, %4544 ]
  %4568 = phi <4 x double> [ zeroinitializer, %987 ], [ %4554, %4544 ]
  %4569 = phi <2 x double> [ zeroinitializer, %987 ], [ %4555, %4544 ]
  %4570 = phi <2 x double> [ zeroinitializer, %987 ], [ %4556, %4544 ]
  %4571 = phi <2 x double> [ zeroinitializer, %987 ], [ %4557, %4544 ]
  %4572 = phi <2 x double> [ zeroinitializer, %987 ], [ %4558, %4544 ]
  %4573 = phi <2 x double> [ zeroinitializer, %987 ], [ %4559, %4544 ]
  %4574 = phi <2 x double> [ zeroinitializer, %987 ], [ %4560, %4544 ]
  br i1 %209, label %4582, label %4575

4575:                                             ; preds = %4562
  %4576 = trunc i32 %4564 to i16
  %4577 = load ptr, ptr %12, align 8, !tbaa !46
  %4578 = load i32, ptr %17, align 8, !tbaa !17
  %4579 = add nsw i32 %4578, -1
  %4580 = sext i32 %4579 to i64
  %4581 = getelementptr inbounds i16, ptr %4577, i64 %4580
  store i16 %4576, ptr %4581, align 2, !tbaa !44
  br label %4582

4582:                                             ; preds = %4575, %4562
  %4583 = sitofp i32 %4567 to double
  %4584 = getelementptr inbounds double, ptr %10, i64 22
  %4585 = getelementptr inbounds double, ptr %10, i64 4
  %4586 = load <4 x double>, ptr %4585, align 8, !tbaa !19
  %4587 = shufflevector <2 x double> %4569, <2 x double> poison, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>
  %4588 = insertelement <4 x double> %4587, double %4565, i64 3
  %4589 = shufflevector <4 x double> %4588, <4 x double> poison, <4 x i32> <i32 0, i32 1, i32 0, i32 3>
  %4590 = fadd <4 x double> %4589, %4586
  store <4 x double> %4590, ptr %4585, align 8, !tbaa !19
  %4591 = getelementptr inbounds double, ptr %10, i64 8
  %4592 = load <4 x double>, ptr %4591, align 8, !tbaa !19
  %4593 = shufflevector <2 x double> %4573, <2 x double> poison, <4 x i32> <i32 1, i32 poison, i32 poison, i32 poison>
  %4594 = shufflevector <4 x double> %4593, <4 x double> %4587, <4 x i32> <i32 0, i32 5, i32 poison, i32 poison>
  %4595 = shufflevector <2 x double> %4573, <2 x double> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %4596 = shufflevector <4 x double> %4594, <4 x double> %4595, <4 x i32> <i32 0, i32 1, i32 poison, i32 4>
  %4597 = shufflevector <4 x double> %4596, <4 x double> poison, <4 x i32> <i32 0, i32 1, i32 0, i32 3>
  %4598 = fadd <4 x double> %4597, %4592
  store <4 x double> %4598, ptr %4591, align 8, !tbaa !19
  %4599 = load <4 x double>, ptr %10, align 8, !tbaa !19
  %4600 = fadd <4 x double> %4568, %4599
  store <4 x double> %4600, ptr %10, align 8, !tbaa !19
  %4601 = load <4 x double>, ptr %4584, align 8, !tbaa !19
  %4602 = shufflevector <2 x double> %4570, <2 x double> poison, <4 x i32> <i32 poison, i32 0, i32 1, i32 poison>
  %4603 = insertelement <4 x double> %4602, double %4583, i64 0
  %4604 = insertelement <4 x double> %4603, double %4566, i64 3
  %4605 = fadd <4 x double> %4601, %4604
  store <4 x double> %4605, ptr %4584, align 8, !tbaa !19
  %4606 = getelementptr inbounds double, ptr %10, i64 12
  %4607 = load <4 x double>, ptr %4606, align 8, !tbaa !19
  %4608 = shufflevector <2 x double> %4571, <2 x double> %4574, <4 x i32> <i32 0, i32 1, i32 3, i32 poison>
  %4609 = shufflevector <4 x double> %4608, <4 x double> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 1>
  %4610 = fadd <4 x double> %4609, %4607
  store <4 x double> %4610, ptr %4606, align 8, !tbaa !19
  %4611 = getelementptr inbounds double, ptr %10, i64 16
  %4612 = load <4 x double>, ptr %4611, align 8, !tbaa !19
  %4613 = shufflevector <2 x double> %4572, <2 x double> %4574, <4 x i32> <i32 0, i32 1, i32 3, i32 poison>
  %4614 = shufflevector <4 x double> %4613, <4 x double> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 1>
  %4615 = fadd <4 x double> %4614, %4612
  store <4 x double> %4615, ptr %4611, align 8, !tbaa !19
  %4616 = getelementptr inbounds double, ptr %10, i64 20
  %4617 = load double, ptr %4616, align 8, !tbaa !19
  %4618 = extractelement <2 x double> %4574, i64 0
  %4619 = fadd double %4618, %4617
  store double %4619, ptr %4616, align 8, !tbaa !19
  %4620 = icmp eq ptr %4563, null
  br i1 %4620, label %4622, label %4621

4621:                                             ; preds = %4582
  call void @_ZdaPv(ptr noundef nonnull %4563) #13
  br label %4622

4622:                                             ; preds = %4621, %4582
  call void @llvm.lifetime.end.p0(i64 36, ptr nonnull %2) #11
  br label %4623

4623:                                             ; preds = %1, %4622
  ret void
}

; Function Attrs: sspstrong uwtable
define dso_local void @_ZN20ComputeNonbondedUtil36calc_pair_energy_merge_fullelect_fepEP9nonbonded(ptr nocapture noundef readonly %0) local_unnamed_addr #0 align 2 {
  %2 = alloca [9 x i32], align 16
  %3 = alloca double, align 8
  %4 = alloca double, align 8
  %5 = alloca double, align 8
  %6 = load i32, ptr @_ZN20ComputeNonbondedUtil8commOnlyE, align 4, !tbaa !5
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %8, label %4223

8:                                                ; preds = %1
  %9 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 7
  %10 = load ptr, ptr %9, align 8, !tbaa !9
  %11 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 10
  %12 = load ptr, ptr %11, align 8, !tbaa !14
  %13 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 11
  %14 = load i32, ptr %13, align 8, !tbaa !15
  %15 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 12
  %16 = load i32, ptr %15, align 4, !tbaa !16
  %17 = getelementptr inbounds %class.Pairlists, ptr %12, i64 0, i32 1
  store i32 0, ptr %17, align 8, !tbaa !17
  %18 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 6
  %19 = load <2 x double>, ptr %18, align 8, !tbaa !19
  %20 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 6, i32 2
  %21 = load double, ptr %20, align 8, !tbaa !20
  %22 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 13
  %23 = load double, ptr %22, align 8, !tbaa !21
  %24 = fmul double %23, %23
  %25 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 14
  %26 = load double, ptr %25, align 8, !tbaa !22
  %27 = fmul double %26, %26
  %28 = load double, ptr @_ZN20ComputeNonbondedUtil12dielectric_1E, align 8, !tbaa !19
  %29 = load ptr, ptr @_ZN20ComputeNonbondedUtil7ljTableE, align 8, !tbaa !23
  %30 = load ptr, ptr @_ZN20ComputeNonbondedUtil3molE, align 8, !tbaa !23
  %31 = load ptr, ptr @_ZN20ComputeNonbondedUtil13table_noshortE, align 8, !tbaa !23
  %32 = load double, ptr @_ZN20ComputeNonbondedUtil7scalingE, align 8, !tbaa !19
  %33 = load double, ptr @_ZN20ComputeNonbondedUtil7scale14E, align 8, !tbaa !19
  %34 = fsub double 1.000000e+00, %33
  %35 = load double, ptr @_ZN20ComputeNonbondedUtil8r2_deltaE, align 8, !tbaa !19
  %36 = load i32, ptr @_ZN20ComputeNonbondedUtil12r2_delta_expE, align 4, !tbaa !5
  %37 = shl i32 %36, 6
  %38 = add i32 %37, -65472
  %39 = load double, ptr @_ZN20ComputeNonbondedUtil9switchOn2E, align 8, !tbaa !19
  %40 = load double, ptr @_ZN20ComputeNonbondedUtil7cutoff2E, align 8, !tbaa !19
  %41 = fsub double %40, %39
  %42 = fmul double %41, %41
  %43 = fmul double %41, %42
  %44 = fdiv double 1.000000e+00, %43
  %45 = load double, ptr @_ZN20ComputeNonbondedUtil19alchElecLambdaStartE, align 8, !tbaa !19
  %46 = load double, ptr @_ZN20ComputeNonbondedUtil16alchVdwLambdaEndE, align 8, !tbaa !19
  %47 = load i32, ptr @_ZN20ComputeNonbondedUtil14Fep_WCA_repuOnE, align 4, !tbaa !5
  %48 = load i32, ptr @_ZN20ComputeNonbondedUtil14Fep_WCA_dispOnE, align 4, !tbaa !5
  %49 = load double, ptr @_ZN20ComputeNonbondedUtil9WCA_rcut1E, align 8, !tbaa !19
  %50 = load double, ptr @_ZN20ComputeNonbondedUtil9WCA_rcut2E, align 8, !tbaa !19
  %51 = load double, ptr @_ZN20ComputeNonbondedUtil10alchLambdaE, align 8, !tbaa !19
  %52 = fsub double 1.000000e+00, %45
  %53 = fcmp oge double %51, %46
  %54 = fdiv double %51, %46
  %55 = select i1 %53, double 1.000000e+00, double %54
  %56 = load double, ptr @_ZN20ComputeNonbondedUtil17alchVdwShiftCoeffE, align 8, !tbaa !19
  %57 = fsub double 1.000000e+00, %55
  %58 = fmul double %56, %57
  %59 = load double, ptr @_ZN20ComputeNonbondedUtil11alchLambda2E, align 8, !tbaa !19
  %60 = fcmp oge double %59, %46
  %61 = fdiv double %59, %46
  %62 = select i1 %60, double 1.000000e+00, double %61
  %63 = fsub double 1.000000e+00, %62
  %64 = fmul double %56, %63
  %65 = insertelement <2 x double> poison, double %59, i64 0
  %66 = insertelement <2 x double> %65, double %51, i64 1
  %67 = insertelement <2 x double> poison, double %45, i64 0
  %68 = shufflevector <2 x double> %67, <2 x double> poison, <2 x i32> zeroinitializer
  %69 = fcmp ugt <2 x double> %66, %68
  %70 = fsub <2 x double> %66, %68
  %71 = insertelement <2 x double> poison, double %52, i64 0
  %72 = shufflevector <2 x double> %71, <2 x double> poison, <2 x i32> zeroinitializer
  %73 = fdiv <2 x double> %70, %72
  %74 = select <2 x i1> %69, <2 x double> %73, <2 x double> zeroinitializer
  %75 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %66
  %76 = fcmp ugt <2 x double> %75, %68
  %77 = fsub <2 x double> %75, %68
  %78 = fdiv <2 x double> %77, %72
  %79 = extractelement <2 x double> %75, i64 1
  %80 = fcmp oge double %79, %46
  %81 = fdiv double %79, %46
  %82 = select i1 %80, double 1.000000e+00, double %81
  %83 = fsub double 1.000000e+00, %82
  %84 = fmul double %56, %83
  %85 = select <2 x i1> %76, <2 x double> %78, <2 x double> zeroinitializer
  %86 = extractelement <2 x double> %75, i64 0
  %87 = fcmp oge double %86, %46
  %88 = fdiv double %86, %46
  %89 = select i1 %87, double 1.000000e+00, double %88
  %90 = fsub double 1.000000e+00, %89
  %91 = fmul double %56, %90
  call void @llvm.lifetime.start.p0(i64 36, ptr nonnull %2) #11
  %92 = load i32, ptr @_ZN20ComputeNonbondedUtil12alchDecoupleE, align 4, !tbaa !5
  %93 = icmp eq i32 %92, 0
  %94 = getelementptr inbounds [9 x i32], ptr %2, i64 0, i64 6
  store i32 2, ptr %94, align 8, !tbaa !5
  %95 = getelementptr inbounds [9 x i32], ptr %2, i64 0, i64 4
  %96 = getelementptr inbounds [9 x i32], ptr %2, i64 0, i64 7
  %97 = getelementptr inbounds [9 x i32], ptr %2, i64 0, i64 5
  %98 = getelementptr inbounds [9 x i32], ptr %2, i64 0, i64 8
  %99 = zext i1 %93 to i32
  %100 = select i1 %93, i32 2, i32 0
  store i32 %99, ptr %95, align 16, !tbaa !5
  store i32 99, ptr %96, align 4, !tbaa !5
  store <4 x i32> <i32 0, i32 1, i32 2, i32 1>, ptr %2, align 16, !tbaa !5
  store i32 99, ptr %97, align 4, !tbaa !5
  store i32 %100, ptr %98, align 16, !tbaa !5
  %101 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 5
  %102 = load i32, ptr %101, align 8, !tbaa !5
  %103 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 5, i64 1
  %104 = load i32, ptr %103, align 4, !tbaa !5
  %105 = load ptr, ptr %0, align 8, !tbaa !23
  %106 = getelementptr inbounds [2 x ptr], ptr %0, i64 0, i64 1
  %107 = load ptr, ptr %106, align 8, !tbaa !23
  %108 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 1
  %109 = load ptr, ptr %108, align 8, !tbaa !23
  %110 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 1, i64 1
  %111 = load ptr, ptr %110, align 8, !tbaa !23
  %112 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 9
  %113 = load ptr, ptr %112, align 8, !tbaa !24
  %114 = add nsw i32 %104, 5
  %115 = getelementptr inbounds %class.ResizeArray, ptr %113, i64 0, i32 1
  %116 = load ptr, ptr %115, align 8, !tbaa !25
  %117 = getelementptr inbounds %class.ResizeArrayRaw, ptr %116, i64 0, i32 2
  %118 = load i32, ptr %117, align 8, !tbaa !27
  %119 = icmp slt i32 %118, %114
  br i1 %119, label %120, label %158

120:                                              ; preds = %8
  %121 = getelementptr inbounds %class.ResizeArrayRaw, ptr %116, i64 0, i32 3
  %122 = load i32, ptr %121, align 4, !tbaa !30
  %123 = icmp slt i32 %122, %114
  br i1 %123, label %124, label %158

124:                                              ; preds = %120
  %125 = sitofp i32 %122 to float
  %126 = getelementptr inbounds %class.ResizeArrayRaw, ptr %116, i64 0, i32 5
  %127 = load float, ptr %126, align 4, !tbaa !31
  %128 = fmul float %127, %125
  %129 = fptosi float %128 to i32
  %130 = tail call i32 @llvm.smax.i32(i32 %129, i32 %114)
  %131 = sub nsw i32 %130, %122
  %132 = getelementptr inbounds %class.ResizeArrayRaw, ptr %116, i64 0, i32 6
  %133 = load i32, ptr %132, align 8, !tbaa !32
  %134 = icmp slt i32 %131, %133
  %135 = add nsw i32 %133, %122
  %136 = select i1 %134, i32 %135, i32 %130
  %137 = sext i32 %136 to i64
  %138 = shl nsw i64 %137, 1
  %139 = add nsw i64 %138, 31
  %140 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %139) #12
  %141 = getelementptr inbounds i8, ptr %140, i64 31
  %142 = ptrtoint ptr %141 to i64
  %143 = and i64 %142, 31
  %144 = sub nsw i64 0, %143
  %145 = getelementptr inbounds i8, ptr %141, i64 %144
  %146 = load ptr, ptr %116, align 8, !tbaa !33
  %147 = sext i32 %118 to i64
  %148 = shl nsw i64 %147, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %145, ptr align 1 %146, i64 %148, i1 false)
  %149 = icmp eq i32 %122, 0
  br i1 %149, label %155, label %150

150:                                              ; preds = %124
  %151 = getelementptr inbounds %class.ResizeArrayRaw, ptr %116, i64 0, i32 1
  %152 = load ptr, ptr %151, align 8, !tbaa !34
  %153 = icmp eq ptr %152, null
  br i1 %153, label %155, label %154

154:                                              ; preds = %150
  tail call void @_ZdaPv(ptr noundef nonnull %152) #13
  br label %155

155:                                              ; preds = %154, %150, %124
  %156 = getelementptr inbounds %class.ResizeArrayRaw, ptr %116, i64 0, i32 1
  store ptr %140, ptr %156, align 8, !tbaa !34
  store ptr %145, ptr %116, align 8, !tbaa !33
  store i32 %136, ptr %121, align 4, !tbaa !30
  %157 = load ptr, ptr %115, align 8, !tbaa !25
  br label %158

158:                                              ; preds = %8, %120, %155
  %159 = phi ptr [ %116, %8 ], [ %116, %120 ], [ %157, %155 ]
  store i32 %114, ptr %117, align 8, !tbaa !27
  %160 = load ptr, ptr %159, align 8, !tbaa !33
  %161 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %113, i64 0, i32 1, i32 1
  %162 = load ptr, ptr %161, align 8, !tbaa !35
  %163 = getelementptr inbounds %class.ResizeArrayRaw.9, ptr %162, i64 0, i32 2
  %164 = load i32, ptr %163, align 8, !tbaa !37
  %165 = icmp slt i32 %164, %114
  br i1 %165, label %166, label %204

166:                                              ; preds = %158
  %167 = getelementptr inbounds %class.ResizeArrayRaw.9, ptr %162, i64 0, i32 3
  %168 = load i32, ptr %167, align 4, !tbaa !39
  %169 = icmp slt i32 %168, %114
  br i1 %169, label %170, label %204

170:                                              ; preds = %166
  %171 = sitofp i32 %168 to float
  %172 = getelementptr inbounds %class.ResizeArrayRaw.9, ptr %162, i64 0, i32 5
  %173 = load float, ptr %172, align 4, !tbaa !40
  %174 = fmul float %173, %171
  %175 = fptosi float %174 to i32
  %176 = tail call i32 @llvm.smax.i32(i32 %175, i32 %114)
  %177 = sub nsw i32 %176, %168
  %178 = getelementptr inbounds %class.ResizeArrayRaw.9, ptr %162, i64 0, i32 6
  %179 = load i32, ptr %178, align 8, !tbaa !41
  %180 = icmp slt i32 %177, %179
  %181 = add nsw i32 %179, %168
  %182 = select i1 %180, i32 %181, i32 %176
  %183 = sext i32 %182 to i64
  %184 = shl nsw i64 %183, 3
  %185 = add nsw i64 %184, 31
  %186 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %185) #12
  %187 = getelementptr inbounds i8, ptr %186, i64 31
  %188 = ptrtoint ptr %187 to i64
  %189 = and i64 %188, 31
  %190 = sub nsw i64 0, %189
  %191 = getelementptr inbounds i8, ptr %187, i64 %190
  %192 = load ptr, ptr %162, align 8, !tbaa !42
  %193 = sext i32 %164 to i64
  %194 = shl nsw i64 %193, 3
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %191, ptr align 1 %192, i64 %194, i1 false)
  %195 = icmp eq i32 %168, 0
  br i1 %195, label %201, label %196

196:                                              ; preds = %170
  %197 = getelementptr inbounds %class.ResizeArrayRaw.9, ptr %162, i64 0, i32 1
  %198 = load ptr, ptr %197, align 8, !tbaa !43
  %199 = icmp eq ptr %198, null
  br i1 %199, label %201, label %200

200:                                              ; preds = %196
  tail call void @_ZdaPv(ptr noundef nonnull %198) #13
  br label %201

201:                                              ; preds = %200, %196, %170
  %202 = getelementptr inbounds %class.ResizeArrayRaw.9, ptr %162, i64 0, i32 1
  store ptr %186, ptr %202, align 8, !tbaa !43
  store ptr %191, ptr %162, align 8, !tbaa !42
  store i32 %182, ptr %167, align 4, !tbaa !39
  %203 = load ptr, ptr %161, align 8, !tbaa !35
  br label %204

204:                                              ; preds = %158, %166, %201
  %205 = phi ptr [ %162, %158 ], [ %162, %166 ], [ %203, %201 ]
  store i32 %114, ptr %163, align 8, !tbaa !37
  %206 = load ptr, ptr %205, align 8, !tbaa !42
  %207 = getelementptr inbounds i32, ptr %206, i64 1
  %208 = icmp eq i32 %14, 0
  %209 = icmp ne i32 %16, 0
  %210 = select i1 %208, i1 %209, i1 false
  %211 = select i1 %210, i32 0, i32 %114
  %212 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %113, i64 0, i32 2, i32 1
  %213 = load ptr, ptr %212, align 8, !tbaa !25
  %214 = getelementptr inbounds %class.ResizeArrayRaw, ptr %213, i64 0, i32 2
  %215 = load i32, ptr %214, align 8, !tbaa !27
  %216 = icmp slt i32 %215, %211
  br i1 %216, label %217, label %255

217:                                              ; preds = %204
  %218 = getelementptr inbounds %class.ResizeArrayRaw, ptr %213, i64 0, i32 3
  %219 = load i32, ptr %218, align 4, !tbaa !30
  %220 = icmp slt i32 %219, %211
  br i1 %220, label %221, label %255

221:                                              ; preds = %217
  %222 = sitofp i32 %219 to float
  %223 = getelementptr inbounds %class.ResizeArrayRaw, ptr %213, i64 0, i32 5
  %224 = load float, ptr %223, align 4, !tbaa !31
  %225 = fmul float %224, %222
  %226 = fptosi float %225 to i32
  %227 = tail call i32 @llvm.smax.i32(i32 %226, i32 %211)
  %228 = sub nsw i32 %227, %219
  %229 = getelementptr inbounds %class.ResizeArrayRaw, ptr %213, i64 0, i32 6
  %230 = load i32, ptr %229, align 8, !tbaa !32
  %231 = icmp slt i32 %228, %230
  %232 = add nsw i32 %230, %219
  %233 = select i1 %231, i32 %232, i32 %227
  %234 = sext i32 %233 to i64
  %235 = shl nsw i64 %234, 1
  %236 = add nsw i64 %235, 31
  %237 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %236) #12
  %238 = getelementptr inbounds i8, ptr %237, i64 31
  %239 = ptrtoint ptr %238 to i64
  %240 = and i64 %239, 31
  %241 = sub nsw i64 0, %240
  %242 = getelementptr inbounds i8, ptr %238, i64 %241
  %243 = load ptr, ptr %213, align 8, !tbaa !33
  %244 = sext i32 %215 to i64
  %245 = shl nsw i64 %244, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %242, ptr align 1 %243, i64 %245, i1 false)
  %246 = icmp eq i32 %219, 0
  br i1 %246, label %252, label %247

247:                                              ; preds = %221
  %248 = getelementptr inbounds %class.ResizeArrayRaw, ptr %213, i64 0, i32 1
  %249 = load ptr, ptr %248, align 8, !tbaa !34
  %250 = icmp eq ptr %249, null
  br i1 %250, label %252, label %251

251:                                              ; preds = %247
  tail call void @_ZdaPv(ptr noundef nonnull %249) #13
  br label %252

252:                                              ; preds = %251, %247, %221
  %253 = getelementptr inbounds %class.ResizeArrayRaw, ptr %213, i64 0, i32 1
  store ptr %237, ptr %253, align 8, !tbaa !34
  store ptr %242, ptr %213, align 8, !tbaa !33
  store i32 %233, ptr %218, align 4, !tbaa !30
  %254 = load ptr, ptr %212, align 8, !tbaa !25
  br label %255

255:                                              ; preds = %204, %217, %252
  %256 = phi ptr [ %213, %204 ], [ %213, %217 ], [ %254, %252 ]
  store i32 %211, ptr %214, align 8, !tbaa !27
  %257 = load ptr, ptr %256, align 8, !tbaa !33
  %258 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %113, i64 0, i32 3, i32 1
  %259 = load ptr, ptr %258, align 8, !tbaa !25
  %260 = getelementptr inbounds %class.ResizeArrayRaw, ptr %259, i64 0, i32 2
  %261 = load i32, ptr %260, align 8, !tbaa !27
  %262 = icmp slt i32 %261, %211
  br i1 %262, label %263, label %301

263:                                              ; preds = %255
  %264 = getelementptr inbounds %class.ResizeArrayRaw, ptr %259, i64 0, i32 3
  %265 = load i32, ptr %264, align 4, !tbaa !30
  %266 = icmp slt i32 %265, %211
  br i1 %266, label %267, label %301

267:                                              ; preds = %263
  %268 = sitofp i32 %265 to float
  %269 = getelementptr inbounds %class.ResizeArrayRaw, ptr %259, i64 0, i32 5
  %270 = load float, ptr %269, align 4, !tbaa !31
  %271 = fmul float %270, %268
  %272 = fptosi float %271 to i32
  %273 = tail call i32 @llvm.smax.i32(i32 %272, i32 %211)
  %274 = sub nsw i32 %273, %265
  %275 = getelementptr inbounds %class.ResizeArrayRaw, ptr %259, i64 0, i32 6
  %276 = load i32, ptr %275, align 8, !tbaa !32
  %277 = icmp slt i32 %274, %276
  %278 = add nsw i32 %276, %265
  %279 = select i1 %277, i32 %278, i32 %273
  %280 = sext i32 %279 to i64
  %281 = shl nsw i64 %280, 1
  %282 = add nsw i64 %281, 31
  %283 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %282) #12
  %284 = getelementptr inbounds i8, ptr %283, i64 31
  %285 = ptrtoint ptr %284 to i64
  %286 = and i64 %285, 31
  %287 = sub nsw i64 0, %286
  %288 = getelementptr inbounds i8, ptr %284, i64 %287
  %289 = load ptr, ptr %259, align 8, !tbaa !33
  %290 = sext i32 %261 to i64
  %291 = shl nsw i64 %290, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %288, ptr align 1 %289, i64 %291, i1 false)
  %292 = icmp eq i32 %265, 0
  br i1 %292, label %298, label %293

293:                                              ; preds = %267
  %294 = getelementptr inbounds %class.ResizeArrayRaw, ptr %259, i64 0, i32 1
  %295 = load ptr, ptr %294, align 8, !tbaa !34
  %296 = icmp eq ptr %295, null
  br i1 %296, label %298, label %297

297:                                              ; preds = %293
  tail call void @_ZdaPv(ptr noundef nonnull %295) #13
  br label %298

298:                                              ; preds = %297, %293, %267
  %299 = getelementptr inbounds %class.ResizeArrayRaw, ptr %259, i64 0, i32 1
  store ptr %283, ptr %299, align 8, !tbaa !34
  store ptr %288, ptr %259, align 8, !tbaa !33
  store i32 %279, ptr %264, align 4, !tbaa !30
  %300 = load ptr, ptr %258, align 8, !tbaa !25
  br label %301

301:                                              ; preds = %255, %263, %298
  %302 = phi ptr [ %259, %255 ], [ %259, %263 ], [ %300, %298 ]
  store i32 %211, ptr %260, align 8, !tbaa !27
  %303 = load ptr, ptr %302, align 8, !tbaa !33
  %304 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %113, i64 0, i32 4, i32 1
  %305 = load ptr, ptr %304, align 8, !tbaa !25
  %306 = getelementptr inbounds %class.ResizeArrayRaw, ptr %305, i64 0, i32 2
  %307 = load i32, ptr %306, align 8, !tbaa !27
  %308 = icmp slt i32 %307, %211
  br i1 %308, label %309, label %347

309:                                              ; preds = %301
  %310 = getelementptr inbounds %class.ResizeArrayRaw, ptr %305, i64 0, i32 3
  %311 = load i32, ptr %310, align 4, !tbaa !30
  %312 = icmp slt i32 %311, %211
  br i1 %312, label %313, label %347

313:                                              ; preds = %309
  %314 = sitofp i32 %311 to float
  %315 = getelementptr inbounds %class.ResizeArrayRaw, ptr %305, i64 0, i32 5
  %316 = load float, ptr %315, align 4, !tbaa !31
  %317 = fmul float %316, %314
  %318 = fptosi float %317 to i32
  %319 = tail call i32 @llvm.smax.i32(i32 %318, i32 %211)
  %320 = sub nsw i32 %319, %311
  %321 = getelementptr inbounds %class.ResizeArrayRaw, ptr %305, i64 0, i32 6
  %322 = load i32, ptr %321, align 8, !tbaa !32
  %323 = icmp slt i32 %320, %322
  %324 = add nsw i32 %322, %311
  %325 = select i1 %323, i32 %324, i32 %319
  %326 = sext i32 %325 to i64
  %327 = shl nsw i64 %326, 1
  %328 = add nsw i64 %327, 31
  %329 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %328) #12
  %330 = getelementptr inbounds i8, ptr %329, i64 31
  %331 = ptrtoint ptr %330 to i64
  %332 = and i64 %331, 31
  %333 = sub nsw i64 0, %332
  %334 = getelementptr inbounds i8, ptr %330, i64 %333
  %335 = load ptr, ptr %305, align 8, !tbaa !33
  %336 = sext i32 %307 to i64
  %337 = shl nsw i64 %336, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %334, ptr align 1 %335, i64 %337, i1 false)
  %338 = icmp eq i32 %311, 0
  br i1 %338, label %344, label %339

339:                                              ; preds = %313
  %340 = getelementptr inbounds %class.ResizeArrayRaw, ptr %305, i64 0, i32 1
  %341 = load ptr, ptr %340, align 8, !tbaa !34
  %342 = icmp eq ptr %341, null
  br i1 %342, label %344, label %343

343:                                              ; preds = %339
  tail call void @_ZdaPv(ptr noundef nonnull %341) #13
  br label %344

344:                                              ; preds = %343, %339, %313
  %345 = getelementptr inbounds %class.ResizeArrayRaw, ptr %305, i64 0, i32 1
  store ptr %329, ptr %345, align 8, !tbaa !34
  store ptr %334, ptr %305, align 8, !tbaa !33
  store i32 %325, ptr %310, align 4, !tbaa !30
  %346 = load ptr, ptr %304, align 8, !tbaa !25
  br label %347

347:                                              ; preds = %301, %309, %344
  %348 = phi ptr [ %305, %301 ], [ %305, %309 ], [ %346, %344 ]
  store i32 %211, ptr %306, align 8, !tbaa !27
  %349 = load ptr, ptr %348, align 8, !tbaa !33
  %350 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %113, i64 0, i32 5, i32 1
  %351 = load ptr, ptr %350, align 8, !tbaa !25
  %352 = getelementptr inbounds %class.ResizeArrayRaw, ptr %351, i64 0, i32 2
  %353 = load i32, ptr %352, align 8, !tbaa !27
  %354 = icmp slt i32 %353, %211
  br i1 %354, label %355, label %393

355:                                              ; preds = %347
  %356 = getelementptr inbounds %class.ResizeArrayRaw, ptr %351, i64 0, i32 3
  %357 = load i32, ptr %356, align 4, !tbaa !30
  %358 = icmp slt i32 %357, %211
  br i1 %358, label %359, label %393

359:                                              ; preds = %355
  %360 = sitofp i32 %357 to float
  %361 = getelementptr inbounds %class.ResizeArrayRaw, ptr %351, i64 0, i32 5
  %362 = load float, ptr %361, align 4, !tbaa !31
  %363 = fmul float %362, %360
  %364 = fptosi float %363 to i32
  %365 = tail call i32 @llvm.smax.i32(i32 %364, i32 %211)
  %366 = sub nsw i32 %365, %357
  %367 = getelementptr inbounds %class.ResizeArrayRaw, ptr %351, i64 0, i32 6
  %368 = load i32, ptr %367, align 8, !tbaa !32
  %369 = icmp slt i32 %366, %368
  %370 = add nsw i32 %368, %357
  %371 = select i1 %369, i32 %370, i32 %365
  %372 = sext i32 %371 to i64
  %373 = shl nsw i64 %372, 1
  %374 = add nsw i64 %373, 31
  %375 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %374) #12
  %376 = getelementptr inbounds i8, ptr %375, i64 31
  %377 = ptrtoint ptr %376 to i64
  %378 = and i64 %377, 31
  %379 = sub nsw i64 0, %378
  %380 = getelementptr inbounds i8, ptr %376, i64 %379
  %381 = load ptr, ptr %351, align 8, !tbaa !33
  %382 = sext i32 %353 to i64
  %383 = shl nsw i64 %382, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %380, ptr align 1 %381, i64 %383, i1 false)
  %384 = icmp eq i32 %357, 0
  br i1 %384, label %390, label %385

385:                                              ; preds = %359
  %386 = getelementptr inbounds %class.ResizeArrayRaw, ptr %351, i64 0, i32 1
  %387 = load ptr, ptr %386, align 8, !tbaa !34
  %388 = icmp eq ptr %387, null
  br i1 %388, label %390, label %389

389:                                              ; preds = %385
  tail call void @_ZdaPv(ptr noundef nonnull %387) #13
  br label %390

390:                                              ; preds = %389, %385, %359
  %391 = getelementptr inbounds %class.ResizeArrayRaw, ptr %351, i64 0, i32 1
  store ptr %375, ptr %391, align 8, !tbaa !34
  store ptr %380, ptr %351, align 8, !tbaa !33
  store i32 %371, ptr %356, align 4, !tbaa !30
  %392 = load ptr, ptr %350, align 8, !tbaa !25
  br label %393

393:                                              ; preds = %347, %355, %390
  %394 = phi ptr [ %351, %347 ], [ %351, %355 ], [ %392, %390 ]
  store i32 %211, ptr %352, align 8, !tbaa !27
  %395 = load ptr, ptr %394, align 8, !tbaa !33
  %396 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %113, i64 0, i32 6, i32 1
  %397 = load ptr, ptr %396, align 8, !tbaa !25
  %398 = getelementptr inbounds %class.ResizeArrayRaw, ptr %397, i64 0, i32 2
  %399 = load i32, ptr %398, align 8, !tbaa !27
  %400 = icmp slt i32 %399, %211
  br i1 %400, label %401, label %439

401:                                              ; preds = %393
  %402 = getelementptr inbounds %class.ResizeArrayRaw, ptr %397, i64 0, i32 3
  %403 = load i32, ptr %402, align 4, !tbaa !30
  %404 = icmp slt i32 %403, %211
  br i1 %404, label %405, label %439

405:                                              ; preds = %401
  %406 = sitofp i32 %403 to float
  %407 = getelementptr inbounds %class.ResizeArrayRaw, ptr %397, i64 0, i32 5
  %408 = load float, ptr %407, align 4, !tbaa !31
  %409 = fmul float %408, %406
  %410 = fptosi float %409 to i32
  %411 = tail call i32 @llvm.smax.i32(i32 %410, i32 %211)
  %412 = sub nsw i32 %411, %403
  %413 = getelementptr inbounds %class.ResizeArrayRaw, ptr %397, i64 0, i32 6
  %414 = load i32, ptr %413, align 8, !tbaa !32
  %415 = icmp slt i32 %412, %414
  %416 = add nsw i32 %414, %403
  %417 = select i1 %415, i32 %416, i32 %411
  %418 = sext i32 %417 to i64
  %419 = shl nsw i64 %418, 1
  %420 = add nsw i64 %419, 31
  %421 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %420) #12
  %422 = getelementptr inbounds i8, ptr %421, i64 31
  %423 = ptrtoint ptr %422 to i64
  %424 = and i64 %423, 31
  %425 = sub nsw i64 0, %424
  %426 = getelementptr inbounds i8, ptr %422, i64 %425
  %427 = load ptr, ptr %397, align 8, !tbaa !33
  %428 = sext i32 %399 to i64
  %429 = shl nsw i64 %428, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %426, ptr align 1 %427, i64 %429, i1 false)
  %430 = icmp eq i32 %403, 0
  br i1 %430, label %436, label %431

431:                                              ; preds = %405
  %432 = getelementptr inbounds %class.ResizeArrayRaw, ptr %397, i64 0, i32 1
  %433 = load ptr, ptr %432, align 8, !tbaa !34
  %434 = icmp eq ptr %433, null
  br i1 %434, label %436, label %435

435:                                              ; preds = %431
  tail call void @_ZdaPv(ptr noundef nonnull %433) #13
  br label %436

436:                                              ; preds = %435, %431, %405
  %437 = getelementptr inbounds %class.ResizeArrayRaw, ptr %397, i64 0, i32 1
  store ptr %421, ptr %437, align 8, !tbaa !34
  store ptr %426, ptr %397, align 8, !tbaa !33
  store i32 %417, ptr %402, align 4, !tbaa !30
  %438 = load ptr, ptr %396, align 8, !tbaa !25
  br label %439

439:                                              ; preds = %393, %401, %436
  %440 = phi ptr [ %397, %393 ], [ %397, %401 ], [ %438, %436 ]
  store i32 %211, ptr %398, align 8, !tbaa !27
  %441 = load ptr, ptr %440, align 8, !tbaa !33
  %442 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %113, i64 0, i32 15, i32 1
  %443 = load ptr, ptr %442, align 8, !tbaa !25
  %444 = getelementptr inbounds %class.ResizeArrayRaw, ptr %443, i64 0, i32 2
  %445 = load i32, ptr %444, align 8, !tbaa !27
  %446 = icmp slt i32 %445, %211
  br i1 %446, label %447, label %485

447:                                              ; preds = %439
  %448 = getelementptr inbounds %class.ResizeArrayRaw, ptr %443, i64 0, i32 3
  %449 = load i32, ptr %448, align 4, !tbaa !30
  %450 = icmp slt i32 %449, %211
  br i1 %450, label %451, label %485

451:                                              ; preds = %447
  %452 = sitofp i32 %449 to float
  %453 = getelementptr inbounds %class.ResizeArrayRaw, ptr %443, i64 0, i32 5
  %454 = load float, ptr %453, align 4, !tbaa !31
  %455 = fmul float %454, %452
  %456 = fptosi float %455 to i32
  %457 = tail call i32 @llvm.smax.i32(i32 %456, i32 %211)
  %458 = sub nsw i32 %457, %449
  %459 = getelementptr inbounds %class.ResizeArrayRaw, ptr %443, i64 0, i32 6
  %460 = load i32, ptr %459, align 8, !tbaa !32
  %461 = icmp slt i32 %458, %460
  %462 = add nsw i32 %460, %449
  %463 = select i1 %461, i32 %462, i32 %457
  %464 = sext i32 %463 to i64
  %465 = shl nsw i64 %464, 1
  %466 = add nsw i64 %465, 31
  %467 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %466) #12
  %468 = getelementptr inbounds i8, ptr %467, i64 31
  %469 = ptrtoint ptr %468 to i64
  %470 = and i64 %469, 31
  %471 = sub nsw i64 0, %470
  %472 = getelementptr inbounds i8, ptr %468, i64 %471
  %473 = load ptr, ptr %443, align 8, !tbaa !33
  %474 = sext i32 %445 to i64
  %475 = shl nsw i64 %474, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %472, ptr align 1 %473, i64 %475, i1 false)
  %476 = icmp eq i32 %449, 0
  br i1 %476, label %482, label %477

477:                                              ; preds = %451
  %478 = getelementptr inbounds %class.ResizeArrayRaw, ptr %443, i64 0, i32 1
  %479 = load ptr, ptr %478, align 8, !tbaa !34
  %480 = icmp eq ptr %479, null
  br i1 %480, label %482, label %481

481:                                              ; preds = %477
  tail call void @_ZdaPv(ptr noundef nonnull %479) #13
  br label %482

482:                                              ; preds = %481, %477, %451
  %483 = getelementptr inbounds %class.ResizeArrayRaw, ptr %443, i64 0, i32 1
  store ptr %467, ptr %483, align 8, !tbaa !34
  store ptr %472, ptr %443, align 8, !tbaa !33
  store i32 %463, ptr %448, align 4, !tbaa !30
  %484 = load ptr, ptr %442, align 8, !tbaa !25
  br label %485

485:                                              ; preds = %439, %447, %482
  %486 = phi ptr [ %443, %439 ], [ %443, %447 ], [ %484, %482 ]
  store i32 %211, ptr %444, align 8, !tbaa !27
  %487 = load ptr, ptr %486, align 8, !tbaa !33
  %488 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %113, i64 0, i32 16, i32 1
  %489 = load ptr, ptr %488, align 8, !tbaa !25
  %490 = getelementptr inbounds %class.ResizeArrayRaw, ptr %489, i64 0, i32 2
  %491 = load i32, ptr %490, align 8, !tbaa !27
  %492 = icmp slt i32 %491, %211
  br i1 %492, label %493, label %531

493:                                              ; preds = %485
  %494 = getelementptr inbounds %class.ResizeArrayRaw, ptr %489, i64 0, i32 3
  %495 = load i32, ptr %494, align 4, !tbaa !30
  %496 = icmp slt i32 %495, %211
  br i1 %496, label %497, label %531

497:                                              ; preds = %493
  %498 = sitofp i32 %495 to float
  %499 = getelementptr inbounds %class.ResizeArrayRaw, ptr %489, i64 0, i32 5
  %500 = load float, ptr %499, align 4, !tbaa !31
  %501 = fmul float %500, %498
  %502 = fptosi float %501 to i32
  %503 = tail call i32 @llvm.smax.i32(i32 %502, i32 %211)
  %504 = sub nsw i32 %503, %495
  %505 = getelementptr inbounds %class.ResizeArrayRaw, ptr %489, i64 0, i32 6
  %506 = load i32, ptr %505, align 8, !tbaa !32
  %507 = icmp slt i32 %504, %506
  %508 = add nsw i32 %506, %495
  %509 = select i1 %507, i32 %508, i32 %503
  %510 = sext i32 %509 to i64
  %511 = shl nsw i64 %510, 1
  %512 = add nsw i64 %511, 31
  %513 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %512) #12
  %514 = getelementptr inbounds i8, ptr %513, i64 31
  %515 = ptrtoint ptr %514 to i64
  %516 = and i64 %515, 31
  %517 = sub nsw i64 0, %516
  %518 = getelementptr inbounds i8, ptr %514, i64 %517
  %519 = load ptr, ptr %489, align 8, !tbaa !33
  %520 = sext i32 %491 to i64
  %521 = shl nsw i64 %520, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %518, ptr align 1 %519, i64 %521, i1 false)
  %522 = icmp eq i32 %495, 0
  br i1 %522, label %528, label %523

523:                                              ; preds = %497
  %524 = getelementptr inbounds %class.ResizeArrayRaw, ptr %489, i64 0, i32 1
  %525 = load ptr, ptr %524, align 8, !tbaa !34
  %526 = icmp eq ptr %525, null
  br i1 %526, label %528, label %527

527:                                              ; preds = %523
  tail call void @_ZdaPv(ptr noundef nonnull %525) #13
  br label %528

528:                                              ; preds = %527, %523, %497
  %529 = getelementptr inbounds %class.ResizeArrayRaw, ptr %489, i64 0, i32 1
  store ptr %513, ptr %529, align 8, !tbaa !34
  store ptr %518, ptr %489, align 8, !tbaa !33
  store i32 %509, ptr %494, align 4, !tbaa !30
  %530 = load ptr, ptr %488, align 8, !tbaa !25
  br label %531

531:                                              ; preds = %485, %493, %528
  %532 = phi ptr [ %489, %485 ], [ %489, %493 ], [ %530, %528 ]
  store i32 %211, ptr %490, align 8, !tbaa !27
  %533 = load ptr, ptr %532, align 8, !tbaa !33
  %534 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %113, i64 0, i32 9, i32 1
  %535 = load ptr, ptr %534, align 8, !tbaa !25
  %536 = getelementptr inbounds %class.ResizeArrayRaw, ptr %535, i64 0, i32 2
  %537 = load i32, ptr %536, align 8, !tbaa !27
  %538 = icmp slt i32 %537, %211
  br i1 %538, label %539, label %577

539:                                              ; preds = %531
  %540 = getelementptr inbounds %class.ResizeArrayRaw, ptr %535, i64 0, i32 3
  %541 = load i32, ptr %540, align 4, !tbaa !30
  %542 = icmp slt i32 %541, %211
  br i1 %542, label %543, label %577

543:                                              ; preds = %539
  %544 = sitofp i32 %541 to float
  %545 = getelementptr inbounds %class.ResizeArrayRaw, ptr %535, i64 0, i32 5
  %546 = load float, ptr %545, align 4, !tbaa !31
  %547 = fmul float %546, %544
  %548 = fptosi float %547 to i32
  %549 = tail call i32 @llvm.smax.i32(i32 %548, i32 %211)
  %550 = sub nsw i32 %549, %541
  %551 = getelementptr inbounds %class.ResizeArrayRaw, ptr %535, i64 0, i32 6
  %552 = load i32, ptr %551, align 8, !tbaa !32
  %553 = icmp slt i32 %550, %552
  %554 = add nsw i32 %552, %541
  %555 = select i1 %553, i32 %554, i32 %549
  %556 = sext i32 %555 to i64
  %557 = shl nsw i64 %556, 1
  %558 = add nsw i64 %557, 31
  %559 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %558) #12
  %560 = getelementptr inbounds i8, ptr %559, i64 31
  %561 = ptrtoint ptr %560 to i64
  %562 = and i64 %561, 31
  %563 = sub nsw i64 0, %562
  %564 = getelementptr inbounds i8, ptr %560, i64 %563
  %565 = load ptr, ptr %535, align 8, !tbaa !33
  %566 = sext i32 %537 to i64
  %567 = shl nsw i64 %566, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %564, ptr align 1 %565, i64 %567, i1 false)
  %568 = icmp eq i32 %541, 0
  br i1 %568, label %574, label %569

569:                                              ; preds = %543
  %570 = getelementptr inbounds %class.ResizeArrayRaw, ptr %535, i64 0, i32 1
  %571 = load ptr, ptr %570, align 8, !tbaa !34
  %572 = icmp eq ptr %571, null
  br i1 %572, label %574, label %573

573:                                              ; preds = %569
  tail call void @_ZdaPv(ptr noundef nonnull %571) #13
  br label %574

574:                                              ; preds = %573, %569, %543
  %575 = getelementptr inbounds %class.ResizeArrayRaw, ptr %535, i64 0, i32 1
  store ptr %559, ptr %575, align 8, !tbaa !34
  store ptr %564, ptr %535, align 8, !tbaa !33
  store i32 %555, ptr %540, align 4, !tbaa !30
  %576 = load ptr, ptr %534, align 8, !tbaa !25
  br label %577

577:                                              ; preds = %531, %539, %574
  %578 = phi ptr [ %535, %531 ], [ %535, %539 ], [ %576, %574 ]
  store i32 %211, ptr %536, align 8, !tbaa !27
  %579 = load ptr, ptr %578, align 8, !tbaa !33
  %580 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %113, i64 0, i32 10, i32 1
  %581 = load ptr, ptr %580, align 8, !tbaa !25
  %582 = getelementptr inbounds %class.ResizeArrayRaw, ptr %581, i64 0, i32 2
  %583 = load i32, ptr %582, align 8, !tbaa !27
  %584 = icmp slt i32 %583, %211
  br i1 %584, label %585, label %623

585:                                              ; preds = %577
  %586 = getelementptr inbounds %class.ResizeArrayRaw, ptr %581, i64 0, i32 3
  %587 = load i32, ptr %586, align 4, !tbaa !30
  %588 = icmp slt i32 %587, %211
  br i1 %588, label %589, label %623

589:                                              ; preds = %585
  %590 = sitofp i32 %587 to float
  %591 = getelementptr inbounds %class.ResizeArrayRaw, ptr %581, i64 0, i32 5
  %592 = load float, ptr %591, align 4, !tbaa !31
  %593 = fmul float %592, %590
  %594 = fptosi float %593 to i32
  %595 = tail call i32 @llvm.smax.i32(i32 %594, i32 %211)
  %596 = sub nsw i32 %595, %587
  %597 = getelementptr inbounds %class.ResizeArrayRaw, ptr %581, i64 0, i32 6
  %598 = load i32, ptr %597, align 8, !tbaa !32
  %599 = icmp slt i32 %596, %598
  %600 = add nsw i32 %598, %587
  %601 = select i1 %599, i32 %600, i32 %595
  %602 = sext i32 %601 to i64
  %603 = shl nsw i64 %602, 1
  %604 = add nsw i64 %603, 31
  %605 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %604) #12
  %606 = getelementptr inbounds i8, ptr %605, i64 31
  %607 = ptrtoint ptr %606 to i64
  %608 = and i64 %607, 31
  %609 = sub nsw i64 0, %608
  %610 = getelementptr inbounds i8, ptr %606, i64 %609
  %611 = load ptr, ptr %581, align 8, !tbaa !33
  %612 = sext i32 %583 to i64
  %613 = shl nsw i64 %612, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %610, ptr align 1 %611, i64 %613, i1 false)
  %614 = icmp eq i32 %587, 0
  br i1 %614, label %620, label %615

615:                                              ; preds = %589
  %616 = getelementptr inbounds %class.ResizeArrayRaw, ptr %581, i64 0, i32 1
  %617 = load ptr, ptr %616, align 8, !tbaa !34
  %618 = icmp eq ptr %617, null
  br i1 %618, label %620, label %619

619:                                              ; preds = %615
  tail call void @_ZdaPv(ptr noundef nonnull %617) #13
  br label %620

620:                                              ; preds = %619, %615, %589
  %621 = getelementptr inbounds %class.ResizeArrayRaw, ptr %581, i64 0, i32 1
  store ptr %605, ptr %621, align 8, !tbaa !34
  store ptr %610, ptr %581, align 8, !tbaa !33
  store i32 %601, ptr %586, align 4, !tbaa !30
  %622 = load ptr, ptr %580, align 8, !tbaa !25
  br label %623

623:                                              ; preds = %577, %585, %620
  %624 = phi ptr [ %581, %577 ], [ %581, %585 ], [ %622, %620 ]
  store i32 %211, ptr %582, align 8, !tbaa !27
  %625 = load ptr, ptr %624, align 8, !tbaa !33
  %626 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %113, i64 0, i32 11, i32 1
  %627 = load ptr, ptr %626, align 8, !tbaa !25
  %628 = getelementptr inbounds %class.ResizeArrayRaw, ptr %627, i64 0, i32 2
  %629 = load i32, ptr %628, align 8, !tbaa !27
  %630 = icmp slt i32 %629, %211
  br i1 %630, label %631, label %669

631:                                              ; preds = %623
  %632 = getelementptr inbounds %class.ResizeArrayRaw, ptr %627, i64 0, i32 3
  %633 = load i32, ptr %632, align 4, !tbaa !30
  %634 = icmp slt i32 %633, %211
  br i1 %634, label %635, label %669

635:                                              ; preds = %631
  %636 = sitofp i32 %633 to float
  %637 = getelementptr inbounds %class.ResizeArrayRaw, ptr %627, i64 0, i32 5
  %638 = load float, ptr %637, align 4, !tbaa !31
  %639 = fmul float %638, %636
  %640 = fptosi float %639 to i32
  %641 = tail call i32 @llvm.smax.i32(i32 %640, i32 %211)
  %642 = sub nsw i32 %641, %633
  %643 = getelementptr inbounds %class.ResizeArrayRaw, ptr %627, i64 0, i32 6
  %644 = load i32, ptr %643, align 8, !tbaa !32
  %645 = icmp slt i32 %642, %644
  %646 = add nsw i32 %644, %633
  %647 = select i1 %645, i32 %646, i32 %641
  %648 = sext i32 %647 to i64
  %649 = shl nsw i64 %648, 1
  %650 = add nsw i64 %649, 31
  %651 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %650) #12
  %652 = getelementptr inbounds i8, ptr %651, i64 31
  %653 = ptrtoint ptr %652 to i64
  %654 = and i64 %653, 31
  %655 = sub nsw i64 0, %654
  %656 = getelementptr inbounds i8, ptr %652, i64 %655
  %657 = load ptr, ptr %627, align 8, !tbaa !33
  %658 = sext i32 %629 to i64
  %659 = shl nsw i64 %658, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %656, ptr align 1 %657, i64 %659, i1 false)
  %660 = icmp eq i32 %633, 0
  br i1 %660, label %666, label %661

661:                                              ; preds = %635
  %662 = getelementptr inbounds %class.ResizeArrayRaw, ptr %627, i64 0, i32 1
  %663 = load ptr, ptr %662, align 8, !tbaa !34
  %664 = icmp eq ptr %663, null
  br i1 %664, label %666, label %665

665:                                              ; preds = %661
  tail call void @_ZdaPv(ptr noundef nonnull %663) #13
  br label %666

666:                                              ; preds = %665, %661, %635
  %667 = getelementptr inbounds %class.ResizeArrayRaw, ptr %627, i64 0, i32 1
  store ptr %651, ptr %667, align 8, !tbaa !34
  store ptr %656, ptr %627, align 8, !tbaa !33
  store i32 %647, ptr %632, align 4, !tbaa !30
  %668 = load ptr, ptr %626, align 8, !tbaa !25
  br label %669

669:                                              ; preds = %623, %631, %666
  %670 = phi ptr [ %627, %623 ], [ %627, %631 ], [ %668, %666 ]
  store i32 %211, ptr %628, align 8, !tbaa !27
  %671 = load ptr, ptr %670, align 8, !tbaa !33
  %672 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %113, i64 0, i32 12, i32 1
  %673 = load ptr, ptr %672, align 8, !tbaa !25
  %674 = getelementptr inbounds %class.ResizeArrayRaw, ptr %673, i64 0, i32 2
  %675 = load i32, ptr %674, align 8, !tbaa !27
  %676 = icmp slt i32 %675, %211
  br i1 %676, label %677, label %715

677:                                              ; preds = %669
  %678 = getelementptr inbounds %class.ResizeArrayRaw, ptr %673, i64 0, i32 3
  %679 = load i32, ptr %678, align 4, !tbaa !30
  %680 = icmp slt i32 %679, %211
  br i1 %680, label %681, label %715

681:                                              ; preds = %677
  %682 = sitofp i32 %679 to float
  %683 = getelementptr inbounds %class.ResizeArrayRaw, ptr %673, i64 0, i32 5
  %684 = load float, ptr %683, align 4, !tbaa !31
  %685 = fmul float %684, %682
  %686 = fptosi float %685 to i32
  %687 = tail call i32 @llvm.smax.i32(i32 %686, i32 %211)
  %688 = sub nsw i32 %687, %679
  %689 = getelementptr inbounds %class.ResizeArrayRaw, ptr %673, i64 0, i32 6
  %690 = load i32, ptr %689, align 8, !tbaa !32
  %691 = icmp slt i32 %688, %690
  %692 = add nsw i32 %690, %679
  %693 = select i1 %691, i32 %692, i32 %687
  %694 = sext i32 %693 to i64
  %695 = shl nsw i64 %694, 1
  %696 = add nsw i64 %695, 31
  %697 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %696) #12
  %698 = getelementptr inbounds i8, ptr %697, i64 31
  %699 = ptrtoint ptr %698 to i64
  %700 = and i64 %699, 31
  %701 = sub nsw i64 0, %700
  %702 = getelementptr inbounds i8, ptr %698, i64 %701
  %703 = load ptr, ptr %673, align 8, !tbaa !33
  %704 = sext i32 %675 to i64
  %705 = shl nsw i64 %704, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %702, ptr align 1 %703, i64 %705, i1 false)
  %706 = icmp eq i32 %679, 0
  br i1 %706, label %712, label %707

707:                                              ; preds = %681
  %708 = getelementptr inbounds %class.ResizeArrayRaw, ptr %673, i64 0, i32 1
  %709 = load ptr, ptr %708, align 8, !tbaa !34
  %710 = icmp eq ptr %709, null
  br i1 %710, label %712, label %711

711:                                              ; preds = %707
  tail call void @_ZdaPv(ptr noundef nonnull %709) #13
  br label %712

712:                                              ; preds = %711, %707, %681
  %713 = getelementptr inbounds %class.ResizeArrayRaw, ptr %673, i64 0, i32 1
  store ptr %697, ptr %713, align 8, !tbaa !34
  store ptr %702, ptr %673, align 8, !tbaa !33
  store i32 %693, ptr %678, align 4, !tbaa !30
  %714 = load ptr, ptr %672, align 8, !tbaa !25
  br label %715

715:                                              ; preds = %669, %677, %712
  %716 = phi ptr [ %673, %669 ], [ %673, %677 ], [ %714, %712 ]
  store i32 %211, ptr %674, align 8, !tbaa !27
  %717 = load ptr, ptr %716, align 8, !tbaa !33
  %718 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %113, i64 0, i32 13, i32 1
  %719 = load ptr, ptr %718, align 8, !tbaa !25
  %720 = getelementptr inbounds %class.ResizeArrayRaw, ptr %719, i64 0, i32 2
  %721 = load i32, ptr %720, align 8, !tbaa !27
  %722 = icmp slt i32 %721, %211
  br i1 %722, label %723, label %761

723:                                              ; preds = %715
  %724 = getelementptr inbounds %class.ResizeArrayRaw, ptr %719, i64 0, i32 3
  %725 = load i32, ptr %724, align 4, !tbaa !30
  %726 = icmp slt i32 %725, %211
  br i1 %726, label %727, label %761

727:                                              ; preds = %723
  %728 = sitofp i32 %725 to float
  %729 = getelementptr inbounds %class.ResizeArrayRaw, ptr %719, i64 0, i32 5
  %730 = load float, ptr %729, align 4, !tbaa !31
  %731 = fmul float %730, %728
  %732 = fptosi float %731 to i32
  %733 = tail call i32 @llvm.smax.i32(i32 %732, i32 %211)
  %734 = sub nsw i32 %733, %725
  %735 = getelementptr inbounds %class.ResizeArrayRaw, ptr %719, i64 0, i32 6
  %736 = load i32, ptr %735, align 8, !tbaa !32
  %737 = icmp slt i32 %734, %736
  %738 = add nsw i32 %736, %725
  %739 = select i1 %737, i32 %738, i32 %733
  %740 = sext i32 %739 to i64
  %741 = shl nsw i64 %740, 1
  %742 = add nsw i64 %741, 31
  %743 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %742) #12
  %744 = getelementptr inbounds i8, ptr %743, i64 31
  %745 = ptrtoint ptr %744 to i64
  %746 = and i64 %745, 31
  %747 = sub nsw i64 0, %746
  %748 = getelementptr inbounds i8, ptr %744, i64 %747
  %749 = load ptr, ptr %719, align 8, !tbaa !33
  %750 = sext i32 %721 to i64
  %751 = shl nsw i64 %750, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %748, ptr align 1 %749, i64 %751, i1 false)
  %752 = icmp eq i32 %725, 0
  br i1 %752, label %758, label %753

753:                                              ; preds = %727
  %754 = getelementptr inbounds %class.ResizeArrayRaw, ptr %719, i64 0, i32 1
  %755 = load ptr, ptr %754, align 8, !tbaa !34
  %756 = icmp eq ptr %755, null
  br i1 %756, label %758, label %757

757:                                              ; preds = %753
  tail call void @_ZdaPv(ptr noundef nonnull %755) #13
  br label %758

758:                                              ; preds = %757, %753, %727
  %759 = getelementptr inbounds %class.ResizeArrayRaw, ptr %719, i64 0, i32 1
  store ptr %743, ptr %759, align 8, !tbaa !34
  store ptr %748, ptr %719, align 8, !tbaa !33
  store i32 %739, ptr %724, align 4, !tbaa !30
  %760 = load ptr, ptr %718, align 8, !tbaa !25
  br label %761

761:                                              ; preds = %715, %723, %758
  %762 = phi ptr [ %719, %715 ], [ %719, %723 ], [ %760, %758 ]
  store i32 %211, ptr %720, align 8, !tbaa !27
  %763 = load ptr, ptr %762, align 8, !tbaa !33
  %764 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %113, i64 0, i32 14, i32 1
  %765 = load ptr, ptr %764, align 8, !tbaa !25
  %766 = getelementptr inbounds %class.ResizeArrayRaw, ptr %765, i64 0, i32 2
  %767 = load i32, ptr %766, align 8, !tbaa !27
  %768 = icmp slt i32 %767, %211
  br i1 %768, label %769, label %807

769:                                              ; preds = %761
  %770 = getelementptr inbounds %class.ResizeArrayRaw, ptr %765, i64 0, i32 3
  %771 = load i32, ptr %770, align 4, !tbaa !30
  %772 = icmp slt i32 %771, %211
  br i1 %772, label %773, label %807

773:                                              ; preds = %769
  %774 = sitofp i32 %771 to float
  %775 = getelementptr inbounds %class.ResizeArrayRaw, ptr %765, i64 0, i32 5
  %776 = load float, ptr %775, align 4, !tbaa !31
  %777 = fmul float %776, %774
  %778 = fptosi float %777 to i32
  %779 = tail call i32 @llvm.smax.i32(i32 %778, i32 %211)
  %780 = sub nsw i32 %779, %771
  %781 = getelementptr inbounds %class.ResizeArrayRaw, ptr %765, i64 0, i32 6
  %782 = load i32, ptr %781, align 8, !tbaa !32
  %783 = icmp slt i32 %780, %782
  %784 = add nsw i32 %782, %771
  %785 = select i1 %783, i32 %784, i32 %779
  %786 = sext i32 %785 to i64
  %787 = shl nsw i64 %786, 1
  %788 = add nsw i64 %787, 31
  %789 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %788) #12
  %790 = getelementptr inbounds i8, ptr %789, i64 31
  %791 = ptrtoint ptr %790 to i64
  %792 = and i64 %791, 31
  %793 = sub nsw i64 0, %792
  %794 = getelementptr inbounds i8, ptr %790, i64 %793
  %795 = load ptr, ptr %765, align 8, !tbaa !33
  %796 = sext i32 %767 to i64
  %797 = shl nsw i64 %796, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %794, ptr align 1 %795, i64 %797, i1 false)
  %798 = icmp eq i32 %771, 0
  br i1 %798, label %804, label %799

799:                                              ; preds = %773
  %800 = getelementptr inbounds %class.ResizeArrayRaw, ptr %765, i64 0, i32 1
  %801 = load ptr, ptr %800, align 8, !tbaa !34
  %802 = icmp eq ptr %801, null
  br i1 %802, label %804, label %803

803:                                              ; preds = %799
  tail call void @_ZdaPv(ptr noundef nonnull %801) #13
  br label %804

804:                                              ; preds = %803, %799, %773
  %805 = getelementptr inbounds %class.ResizeArrayRaw, ptr %765, i64 0, i32 1
  store ptr %789, ptr %805, align 8, !tbaa !34
  store ptr %794, ptr %765, align 8, !tbaa !33
  store i32 %785, ptr %770, align 4, !tbaa !30
  %806 = load ptr, ptr %764, align 8, !tbaa !25
  br label %807

807:                                              ; preds = %761, %769, %804
  %808 = phi ptr [ %765, %761 ], [ %765, %769 ], [ %806, %804 ]
  store i32 %211, ptr %766, align 8, !tbaa !27
  %809 = load ptr, ptr %808, align 8, !tbaa !33
  br i1 %210, label %942, label %810

810:                                              ; preds = %807
  %811 = icmp sgt i32 %104, 0
  br i1 %811, label %812, label %954

812:                                              ; preds = %810
  %813 = zext i32 %104 to i64
  %814 = and i64 %813, 1
  %815 = icmp eq i32 %104, 1
  br i1 %815, label %848, label %816

816:                                              ; preds = %812
  %817 = and i64 %813, 4294967294
  br label %818

818:                                              ; preds = %843, %816
  %819 = phi i64 [ 0, %816 ], [ %845, %843 ]
  %820 = phi i32 [ 0, %816 ], [ %844, %843 ]
  %821 = phi i64 [ 0, %816 ], [ %846, %843 ]
  %822 = getelementptr inbounds %struct.CompAtom, ptr %107, i64 %819, i32 4
  %823 = load i8, ptr %822, align 1
  %824 = and i8 %823, 7
  %825 = icmp eq i8 %824, 0
  br i1 %825, label %831, label %826

826:                                              ; preds = %818
  %827 = trunc i64 %819 to i16
  %828 = add nsw i32 %820, 1
  %829 = sext i32 %820 to i64
  %830 = getelementptr inbounds i16, ptr %257, i64 %829
  store i16 %827, ptr %830, align 2, !tbaa !44
  br label %831

831:                                              ; preds = %818, %826
  %832 = phi i32 [ %828, %826 ], [ %820, %818 ]
  %833 = or i64 %819, 1
  %834 = getelementptr inbounds %struct.CompAtom, ptr %107, i64 %833, i32 4
  %835 = load i8, ptr %834, align 1
  %836 = and i8 %835, 7
  %837 = icmp eq i8 %836, 0
  br i1 %837, label %843, label %838

838:                                              ; preds = %831
  %839 = trunc i64 %833 to i16
  %840 = add nsw i32 %832, 1
  %841 = sext i32 %832 to i64
  %842 = getelementptr inbounds i16, ptr %257, i64 %841
  store i16 %839, ptr %842, align 2, !tbaa !44
  br label %843

843:                                              ; preds = %838, %831
  %844 = phi i32 [ %840, %838 ], [ %832, %831 ]
  %845 = add nuw nsw i64 %819, 2
  %846 = add i64 %821, 2
  %847 = icmp eq i64 %846, %817
  br i1 %847, label %848, label %818

848:                                              ; preds = %843, %812
  %849 = phi i32 [ undef, %812 ], [ %844, %843 ]
  %850 = phi i64 [ 0, %812 ], [ %845, %843 ]
  %851 = phi i32 [ 0, %812 ], [ %844, %843 ]
  %852 = icmp eq i64 %814, 0
  br i1 %852, label %863, label %853

853:                                              ; preds = %848
  %854 = getelementptr inbounds %struct.CompAtom, ptr %107, i64 %850, i32 4
  %855 = load i8, ptr %854, align 1
  %856 = and i8 %855, 7
  %857 = icmp eq i8 %856, 0
  br i1 %857, label %863, label %858

858:                                              ; preds = %853
  %859 = trunc i64 %850 to i16
  %860 = add nsw i32 %851, 1
  %861 = sext i32 %851 to i64
  %862 = getelementptr inbounds i16, ptr %257, i64 %861
  store i16 %859, ptr %862, align 2, !tbaa !44
  br label %863

863:                                              ; preds = %853, %858, %848
  %864 = phi i32 [ %849, %848 ], [ %860, %858 ], [ %851, %853 ]
  %865 = icmp eq i32 %864, 0
  br i1 %865, label %873, label %866

866:                                              ; preds = %863
  %867 = add nsw i32 %864, -1
  %868 = sext i32 %867 to i64
  %869 = getelementptr inbounds i16, ptr %257, i64 %868
  %870 = load i16, ptr %869, align 2, !tbaa !44
  %871 = sext i32 %864 to i64
  %872 = getelementptr inbounds i16, ptr %257, i64 %871
  store i16 %870, ptr %872, align 2, !tbaa !44
  br label %873

873:                                              ; preds = %866, %863
  %874 = load i32, ptr @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4, !tbaa !5
  %875 = icmp ne i32 %874, 0
  %876 = icmp sgt i32 %864, 0
  %877 = and i1 %875, %876
  br i1 %877, label %878, label %954

878:                                              ; preds = %873
  %879 = zext i32 %864 to i64
  %880 = and i64 %879, 1
  %881 = icmp eq i32 %864, 1
  br i1 %881, label %916, label %882

882:                                              ; preds = %878
  %883 = and i64 %879, 4294967294
  br label %884

884:                                              ; preds = %911, %882
  %885 = phi i64 [ 0, %882 ], [ %913, %911 ]
  %886 = phi i32 [ 0, %882 ], [ %912, %911 ]
  %887 = phi i64 [ 0, %882 ], [ %914, %911 ]
  %888 = getelementptr inbounds i16, ptr %257, i64 %885
  %889 = load i16, ptr %888, align 2, !tbaa !44
  %890 = zext i16 %889 to i64
  %891 = getelementptr inbounds %struct.CompAtomExt, ptr %111, i64 %890
  %892 = load i32, ptr %891, align 4
  %893 = icmp sgt i32 %892, -1
  br i1 %893, label %894, label %898

894:                                              ; preds = %884
  %895 = add nsw i32 %886, 1
  %896 = sext i32 %886 to i64
  %897 = getelementptr inbounds i16, ptr %303, i64 %896
  store i16 %889, ptr %897, align 2, !tbaa !44
  br label %898

898:                                              ; preds = %884, %894
  %899 = phi i32 [ %886, %884 ], [ %895, %894 ]
  %900 = or i64 %885, 1
  %901 = getelementptr inbounds i16, ptr %257, i64 %900
  %902 = load i16, ptr %901, align 2, !tbaa !44
  %903 = zext i16 %902 to i64
  %904 = getelementptr inbounds %struct.CompAtomExt, ptr %111, i64 %903
  %905 = load i32, ptr %904, align 4
  %906 = icmp sgt i32 %905, -1
  br i1 %906, label %907, label %911

907:                                              ; preds = %898
  %908 = add nsw i32 %899, 1
  %909 = sext i32 %899 to i64
  %910 = getelementptr inbounds i16, ptr %303, i64 %909
  store i16 %902, ptr %910, align 2, !tbaa !44
  br label %911

911:                                              ; preds = %907, %898
  %912 = phi i32 [ %899, %898 ], [ %908, %907 ]
  %913 = add nuw nsw i64 %885, 2
  %914 = add i64 %887, 2
  %915 = icmp eq i64 %914, %883
  br i1 %915, label %916, label %884

916:                                              ; preds = %911, %878
  %917 = phi i32 [ undef, %878 ], [ %912, %911 ]
  %918 = phi i64 [ 0, %878 ], [ %913, %911 ]
  %919 = phi i32 [ 0, %878 ], [ %912, %911 ]
  %920 = icmp eq i64 %880, 0
  br i1 %920, label %932, label %921

921:                                              ; preds = %916
  %922 = getelementptr inbounds i16, ptr %257, i64 %918
  %923 = load i16, ptr %922, align 2, !tbaa !44
  %924 = zext i16 %923 to i64
  %925 = getelementptr inbounds %struct.CompAtomExt, ptr %111, i64 %924
  %926 = load i32, ptr %925, align 4
  %927 = icmp sgt i32 %926, -1
  br i1 %927, label %928, label %932

928:                                              ; preds = %921
  %929 = add nsw i32 %919, 1
  %930 = sext i32 %919 to i64
  %931 = getelementptr inbounds i16, ptr %303, i64 %930
  store i16 %923, ptr %931, align 2, !tbaa !44
  br label %932

932:                                              ; preds = %921, %928, %916
  %933 = phi i32 [ %917, %916 ], [ %919, %921 ], [ %929, %928 ]
  %934 = icmp eq i32 %933, 0
  br i1 %934, label %954, label %935

935:                                              ; preds = %932
  %936 = add nsw i32 %933, -1
  %937 = sext i32 %936 to i64
  %938 = getelementptr inbounds i16, ptr %303, i64 %937
  %939 = load i16, ptr %938, align 2, !tbaa !44
  %940 = sext i32 %933 to i64
  %941 = getelementptr inbounds i16, ptr %303, i64 %940
  store i16 %939, ptr %941, align 2, !tbaa !44
  br label %954

942:                                              ; preds = %807
  %943 = load ptr, ptr %12, align 8, !tbaa !46
  %944 = load i32, ptr %17, align 8, !tbaa !17
  %945 = add nsw i32 %944, 1
  store i32 %945, ptr %17, align 8, !tbaa !17
  %946 = sext i32 %944 to i64
  %947 = getelementptr inbounds i16, ptr %943, i64 %946
  %948 = load i16, ptr %947, align 2, !tbaa !44
  %949 = zext i16 %948 to i32
  %950 = icmp eq i32 %102, %949
  br i1 %950, label %971, label %951

951:                                              ; preds = %942
  tail call void @_Z8NAMD_bugPKc(ptr noundef nonnull @.str)
  %952 = load ptr, ptr %12, align 8, !tbaa !46
  %953 = load i32, ptr %17, align 8, !tbaa !17
  br label %971

954:                                              ; preds = %810, %935, %932, %873
  %955 = phi i32 [ %864, %935 ], [ %864, %932 ], [ %864, %873 ], [ 0, %810 ]
  %956 = phi i32 [ %933, %935 ], [ 0, %932 ], [ 0, %873 ], [ 0, %810 ]
  %957 = load i32, ptr %17, align 8, !tbaa !17
  %958 = trunc i32 %102 to i16
  %959 = load ptr, ptr %12, align 8, !tbaa !46
  %960 = sext i32 %957 to i64
  %961 = getelementptr inbounds i16, ptr %959, i64 %960
  store i16 %958, ptr %961, align 2, !tbaa !44
  %962 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 16
  %963 = load i32, ptr %962, align 4, !tbaa !47
  %964 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 18
  %965 = load i32, ptr %964, align 4, !tbaa !48
  %966 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 4, i64 1
  %967 = load ptr, ptr %966, align 8, !tbaa !23
  %968 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 4
  %969 = load ptr, ptr %968, align 8, !tbaa !23
  %970 = add nsw i32 %957, 2
  store i32 %970, ptr %17, align 8, !tbaa !17
  br label %987

971:                                              ; preds = %951, %942
  %972 = phi i32 [ %945, %942 ], [ %953, %951 ]
  %973 = phi ptr [ %943, %942 ], [ %952, %951 ]
  %974 = sext i32 %972 to i64
  %975 = getelementptr inbounds i16, ptr %973, i64 %974
  %976 = load i16, ptr %975, align 2, !tbaa !44
  %977 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 16
  %978 = load i32, ptr %977, align 4, !tbaa !47
  %979 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 18
  %980 = load i32, ptr %979, align 4, !tbaa !48
  %981 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 4, i64 1
  %982 = load ptr, ptr %981, align 8, !tbaa !23
  %983 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 4
  %984 = load ptr, ptr %983, align 8, !tbaa !23
  %985 = add nsw i32 %972, 1
  store i32 %985, ptr %17, align 8, !tbaa !17
  %986 = zext i16 %976 to i32
  br label %987

987:                                              ; preds = %971, %954
  %988 = phi i32 [ %978, %971 ], [ %963, %954 ]
  %989 = phi i32 [ %980, %971 ], [ %965, %954 ]
  %990 = phi ptr [ %982, %971 ], [ %967, %954 ]
  %991 = phi ptr [ %984, %971 ], [ %969, %954 ]
  %992 = phi i32 [ 0, %971 ], [ %956, %954 ]
  %993 = phi i32 [ 0, %971 ], [ %955, %954 ]
  %994 = phi i32 [ %986, %971 ], [ 0, %954 ]
  %995 = add nsw i32 %989, -1
  %996 = icmp slt i32 %994, %102
  br i1 %996, label %997, label %4179

997:                                              ; preds = %987
  %998 = getelementptr inbounds %class.Molecule, ptr %30, i64 0, i32 1
  %999 = getelementptr inbounds %class.Molecule, ptr %30, i64 0, i32 4
  %1000 = getelementptr inbounds %class.Molecule, ptr %30, i64 0, i32 2
  %1001 = getelementptr inbounds %class.Molecule, ptr %30, i64 0, i32 3
  %1002 = ptrtoint ptr %487 to i64
  %1003 = add nsw i32 %104, 30
  %1004 = getelementptr inbounds %class.Pairlists, ptr %12, i64 0, i32 2
  %1005 = getelementptr inbounds i16, ptr %487, i64 1
  %1006 = ptrtoint ptr %533 to i64
  %1007 = ptrtoint ptr %395 to i64
  %1008 = ptrtoint ptr %441 to i64
  %1009 = ptrtoint ptr %579 to i64
  %1010 = ptrtoint ptr %625 to i64
  %1011 = ptrtoint ptr %671 to i64
  %1012 = ptrtoint ptr %717 to i64
  %1013 = ptrtoint ptr %763 to i64
  %1014 = ptrtoint ptr %809 to i64
  %1015 = getelementptr inbounds %class.LJTable, ptr %29, i64 0, i32 1
  %1016 = getelementptr inbounds %class.LJTable, ptr %29, i64 0, i32 2
  %1017 = fneg double %32
  %1018 = fneg double %34
  %1019 = fneg <2 x double> %74
  %1020 = fneg <2 x double> %85
  %1021 = insertelement <2 x double> poison, double %27, i64 0
  %1022 = shufflevector <2 x double> %1021, <2 x double> poison, <2 x i32> zeroinitializer
  %1023 = extractelement <2 x double> %74, i64 1
  %1024 = extractelement <2 x double> %85, i64 1
  %1025 = extractelement <2 x double> %74, i64 1
  %1026 = extractelement <2 x double> %85, i64 1
  %1027 = extractelement <2 x double> %74, i64 1
  %1028 = extractelement <2 x double> %85, i64 1
  br label %1029

1029:                                             ; preds = %997, %4165
  %1030 = phi i32 [ 0, %997 ], [ %4172, %4165 ]
  %1031 = phi i32 [ %994, %997 ], [ %4171, %4165 ]
  %1032 = phi ptr [ null, %997 ], [ %4170, %4165 ]
  %1033 = phi ptr [ null, %997 ], [ %4169, %4165 ]
  %1034 = phi ptr [ null, %997 ], [ %4168, %4165 ]
  %1035 = phi i32 [ 0, %997 ], [ %4167, %4165 ]
  %1036 = phi i32 [ %988, %997 ], [ %4166, %4165 ]
  %1037 = phi <2 x double> [ zeroinitializer, %997 ], [ %4173, %4165 ]
  %1038 = phi <2 x double> [ zeroinitializer, %997 ], [ %4174, %4165 ]
  %1039 = phi <2 x double> [ zeroinitializer, %997 ], [ %4175, %4165 ]
  %1040 = phi <2 x double> [ zeroinitializer, %997 ], [ %4176, %4165 ]
  %1041 = phi <2 x double> [ zeroinitializer, %997 ], [ %4177, %4165 ]
  %1042 = sext i32 %1031 to i64
  %1043 = getelementptr inbounds %struct.CompAtom, ptr %105, i64 %1042
  %1044 = getelementptr inbounds %struct.CompAtomExt, ptr %109, i64 %1042
  br i1 %210, label %1057, label %1045

1045:                                             ; preds = %1029
  %1046 = getelementptr inbounds %struct.CompAtom, ptr %105, i64 %1042, i32 4
  %1047 = load i8, ptr %1046, align 1
  %1048 = lshr i8 %1047, 3
  %1049 = and i8 %1048, 15
  %1050 = zext i8 %1049 to i32
  %1051 = icmp eq i8 %1049, 0
  br i1 %1051, label %1057, label %1052

1052:                                             ; preds = %1045
  %1053 = icmp eq i32 %1036, 0
  br i1 %1053, label %1057, label %1054

1054:                                             ; preds = %1052
  %1055 = add nsw i32 %1036, -1
  %1056 = add nsw i32 %1031, %1050
  br label %4165

1057:                                             ; preds = %1052, %1045, %1029
  %1058 = phi i32 [ %1036, %1029 ], [ %1036, %1045 ], [ %995, %1052 ]
  %1059 = load <2 x double>, ptr %1043, align 8, !tbaa !19
  %1060 = fadd <2 x double> %19, %1059
  %1061 = getelementptr inbounds %class.Vector, ptr %1043, i64 0, i32 2
  %1062 = load double, ptr %1061, align 8, !tbaa !49
  %1063 = fadd double %21, %1062
  %1064 = getelementptr inbounds %struct.CompAtom, ptr %105, i64 %1042, i32 3
  %1065 = load i8, ptr %1064, align 2, !tbaa !51
  %1066 = zext i8 %1065 to i32
  br i1 %210, label %2859, label %1067

1067:                                             ; preds = %1057
  %1068 = load i32, ptr %1044, align 4
  %1069 = shl i32 %1068, 2
  %1070 = ashr exact i32 %1069, 2
  %1071 = load ptr, ptr %998, align 8, !tbaa !52
  %1072 = sext i32 %1070 to i64
  %1073 = getelementptr inbounds %class.ExclusionCheck, ptr %1071, i64 %1072
  %1074 = load i32, ptr %1073, align 8, !tbaa !54
  %1075 = getelementptr inbounds %class.ExclusionCheck, ptr %1071, i64 %1072, i32 1
  %1076 = load i32, ptr %1075, align 4, !tbaa !56
  %1077 = getelementptr inbounds %class.ExclusionCheck, ptr %1071, i64 %1072, i32 2
  %1078 = load ptr, ptr %1077, align 8, !tbaa !57
  %1079 = icmp eq ptr %1078, null
  br i1 %1079, label %1084, label %1080

1080:                                             ; preds = %1067
  %1081 = sext i32 %1074 to i64
  %1082 = sub nsw i64 0, %1081
  %1083 = getelementptr inbounds i8, ptr %1078, i64 %1082
  br label %1310

1084:                                             ; preds = %1067
  %1085 = icmp eq ptr %1032, null
  br i1 %1085, label %1173, label %1086

1086:                                             ; preds = %1084
  %1087 = load i32, ptr %1033, align 4, !tbaa !5
  %1088 = icmp slt i32 %1087, 1
  br i1 %1088, label %1136, label %1089

1089:                                             ; preds = %1086
  %1090 = add nuw i32 %1087, 1
  %1091 = zext i32 %1090 to i64
  %1092 = add nsw i64 %1091, -1
  %1093 = add nsw i64 %1091, -2
  %1094 = and i64 %1092, 3
  %1095 = icmp ult i64 %1093, 3
  br i1 %1095, label %1123, label %1096

1096:                                             ; preds = %1089
  %1097 = and i64 %1092, -4
  br label %1098

1098:                                             ; preds = %1098, %1096
  %1099 = phi i64 [ 1, %1096 ], [ %1120, %1098 ]
  %1100 = phi i64 [ 0, %1096 ], [ %1121, %1098 ]
  %1101 = getelementptr inbounds i32, ptr %1033, i64 %1099
  %1102 = load i32, ptr %1101, align 4, !tbaa !5
  %1103 = sext i32 %1102 to i64
  %1104 = getelementptr inbounds i8, ptr %1032, i64 %1103
  store i8 0, ptr %1104, align 1, !tbaa !58
  %1105 = add nuw nsw i64 %1099, 1
  %1106 = getelementptr inbounds i32, ptr %1033, i64 %1105
  %1107 = load i32, ptr %1106, align 4, !tbaa !5
  %1108 = sext i32 %1107 to i64
  %1109 = getelementptr inbounds i8, ptr %1032, i64 %1108
  store i8 0, ptr %1109, align 1, !tbaa !58
  %1110 = add nuw nsw i64 %1099, 2
  %1111 = getelementptr inbounds i32, ptr %1033, i64 %1110
  %1112 = load i32, ptr %1111, align 4, !tbaa !5
  %1113 = sext i32 %1112 to i64
  %1114 = getelementptr inbounds i8, ptr %1032, i64 %1113
  store i8 0, ptr %1114, align 1, !tbaa !58
  %1115 = add nuw nsw i64 %1099, 3
  %1116 = getelementptr inbounds i32, ptr %1033, i64 %1115
  %1117 = load i32, ptr %1116, align 4, !tbaa !5
  %1118 = sext i32 %1117 to i64
  %1119 = getelementptr inbounds i8, ptr %1032, i64 %1118
  store i8 0, ptr %1119, align 1, !tbaa !58
  %1120 = add nuw nsw i64 %1099, 4
  %1121 = add i64 %1100, 4
  %1122 = icmp eq i64 %1121, %1097
  br i1 %1122, label %1123, label %1098

1123:                                             ; preds = %1098, %1089
  %1124 = phi i64 [ 1, %1089 ], [ %1120, %1098 ]
  %1125 = icmp eq i64 %1094, 0
  br i1 %1125, label %1136, label %1126

1126:                                             ; preds = %1123, %1126
  %1127 = phi i64 [ %1133, %1126 ], [ %1124, %1123 ]
  %1128 = phi i64 [ %1134, %1126 ], [ 0, %1123 ]
  %1129 = getelementptr inbounds i32, ptr %1033, i64 %1127
  %1130 = load i32, ptr %1129, align 4, !tbaa !5
  %1131 = sext i32 %1130 to i64
  %1132 = getelementptr inbounds i8, ptr %1032, i64 %1131
  store i8 0, ptr %1132, align 1, !tbaa !58
  %1133 = add nuw nsw i64 %1127, 1
  %1134 = add i64 %1128, 1
  %1135 = icmp eq i64 %1134, %1094
  br i1 %1135, label %1136, label %1126, !llvm.loop !150

1136:                                             ; preds = %1123, %1126, %1086
  %1137 = load i32, ptr %1034, align 4, !tbaa !5
  %1138 = icmp slt i32 %1137, 1
  br i1 %1138, label %1193, label %1139

1139:                                             ; preds = %1136
  %1140 = add nuw i32 %1137, 1
  %1141 = zext i32 %1140 to i64
  %1142 = add nsw i64 %1141, -1
  %1143 = add nsw i64 %1141, -2
  %1144 = and i64 %1142, 3
  %1145 = icmp ult i64 %1143, 3
  br i1 %1145, label %1180, label %1146

1146:                                             ; preds = %1139
  %1147 = and i64 %1142, -4
  br label %1148

1148:                                             ; preds = %1148, %1146
  %1149 = phi i64 [ 1, %1146 ], [ %1170, %1148 ]
  %1150 = phi i64 [ 0, %1146 ], [ %1171, %1148 ]
  %1151 = getelementptr inbounds i32, ptr %1034, i64 %1149
  %1152 = load i32, ptr %1151, align 4, !tbaa !5
  %1153 = sext i32 %1152 to i64
  %1154 = getelementptr inbounds i8, ptr %1032, i64 %1153
  store i8 0, ptr %1154, align 1, !tbaa !58
  %1155 = add nuw nsw i64 %1149, 1
  %1156 = getelementptr inbounds i32, ptr %1034, i64 %1155
  %1157 = load i32, ptr %1156, align 4, !tbaa !5
  %1158 = sext i32 %1157 to i64
  %1159 = getelementptr inbounds i8, ptr %1032, i64 %1158
  store i8 0, ptr %1159, align 1, !tbaa !58
  %1160 = add nuw nsw i64 %1149, 2
  %1161 = getelementptr inbounds i32, ptr %1034, i64 %1160
  %1162 = load i32, ptr %1161, align 4, !tbaa !5
  %1163 = sext i32 %1162 to i64
  %1164 = getelementptr inbounds i8, ptr %1032, i64 %1163
  store i8 0, ptr %1164, align 1, !tbaa !58
  %1165 = add nuw nsw i64 %1149, 3
  %1166 = getelementptr inbounds i32, ptr %1034, i64 %1165
  %1167 = load i32, ptr %1166, align 4, !tbaa !5
  %1168 = sext i32 %1167 to i64
  %1169 = getelementptr inbounds i8, ptr %1032, i64 %1168
  store i8 0, ptr %1169, align 1, !tbaa !58
  %1170 = add nuw nsw i64 %1149, 4
  %1171 = add i64 %1150, 4
  %1172 = icmp eq i64 %1171, %1147
  br i1 %1172, label %1180, label %1148

1173:                                             ; preds = %1084
  %1174 = load i32, ptr %999, align 8, !tbaa !61
  %1175 = call i32 @llvm.smax.i32(i32 %1174, i32 -1)
  %1176 = sext i32 %1175 to i64
  %1177 = call noalias noundef nonnull ptr @_Znam(i64 noundef %1176) #12
  %1178 = load i32, ptr %999, align 8, !tbaa !61
  %1179 = sext i32 %1178 to i64
  call void @llvm.memset.p0.i64(ptr nonnull align 1 %1177, i8 0, i64 %1179, i1 false)
  br label %1193

1180:                                             ; preds = %1148, %1139
  %1181 = phi i64 [ 1, %1139 ], [ %1170, %1148 ]
  %1182 = icmp eq i64 %1144, 0
  br i1 %1182, label %1193, label %1183

1183:                                             ; preds = %1180, %1183
  %1184 = phi i64 [ %1190, %1183 ], [ %1181, %1180 ]
  %1185 = phi i64 [ %1191, %1183 ], [ 0, %1180 ]
  %1186 = getelementptr inbounds i32, ptr %1034, i64 %1184
  %1187 = load i32, ptr %1186, align 4, !tbaa !5
  %1188 = sext i32 %1187 to i64
  %1189 = getelementptr inbounds i8, ptr %1032, i64 %1188
  store i8 0, ptr %1189, align 1, !tbaa !58
  %1190 = add nuw nsw i64 %1184, 1
  %1191 = add i64 %1185, 1
  %1192 = icmp eq i64 %1191, %1144
  br i1 %1192, label %1193, label %1183, !llvm.loop !151

1193:                                             ; preds = %1180, %1183, %1136, %1173
  %1194 = phi ptr [ %1177, %1173 ], [ %1032, %1136 ], [ %1032, %1183 ], [ %1032, %1180 ]
  %1195 = load i32, ptr %1044, align 4
  %1196 = shl i32 %1195, 2
  %1197 = ashr exact i32 %1196, 2
  %1198 = load ptr, ptr %1000, align 8, !tbaa !63
  %1199 = sext i32 %1197 to i64
  %1200 = getelementptr inbounds ptr, ptr %1198, i64 %1199
  %1201 = load ptr, ptr %1200, align 8, !tbaa !23
  %1202 = load i32, ptr %1201, align 4, !tbaa !5
  %1203 = icmp slt i32 %1202, 1
  br i1 %1203, label %1256, label %1204

1204:                                             ; preds = %1193
  %1205 = add nuw i32 %1202, 1
  %1206 = zext i32 %1205 to i64
  %1207 = add nsw i64 %1206, -1
  %1208 = add nsw i64 %1206, -2
  %1209 = and i64 %1207, 3
  %1210 = icmp ult i64 %1208, 3
  br i1 %1210, label %1238, label %1211

1211:                                             ; preds = %1204
  %1212 = and i64 %1207, -4
  br label %1213

1213:                                             ; preds = %1213, %1211
  %1214 = phi i64 [ 1, %1211 ], [ %1235, %1213 ]
  %1215 = phi i64 [ 0, %1211 ], [ %1236, %1213 ]
  %1216 = getelementptr inbounds i32, ptr %1201, i64 %1214
  %1217 = load i32, ptr %1216, align 4, !tbaa !5
  %1218 = sext i32 %1217 to i64
  %1219 = getelementptr inbounds i8, ptr %1194, i64 %1218
  store i8 1, ptr %1219, align 1, !tbaa !58
  %1220 = add nuw nsw i64 %1214, 1
  %1221 = getelementptr inbounds i32, ptr %1201, i64 %1220
  %1222 = load i32, ptr %1221, align 4, !tbaa !5
  %1223 = sext i32 %1222 to i64
  %1224 = getelementptr inbounds i8, ptr %1194, i64 %1223
  store i8 1, ptr %1224, align 1, !tbaa !58
  %1225 = add nuw nsw i64 %1214, 2
  %1226 = getelementptr inbounds i32, ptr %1201, i64 %1225
  %1227 = load i32, ptr %1226, align 4, !tbaa !5
  %1228 = sext i32 %1227 to i64
  %1229 = getelementptr inbounds i8, ptr %1194, i64 %1228
  store i8 1, ptr %1229, align 1, !tbaa !58
  %1230 = add nuw nsw i64 %1214, 3
  %1231 = getelementptr inbounds i32, ptr %1201, i64 %1230
  %1232 = load i32, ptr %1231, align 4, !tbaa !5
  %1233 = sext i32 %1232 to i64
  %1234 = getelementptr inbounds i8, ptr %1194, i64 %1233
  store i8 1, ptr %1234, align 1, !tbaa !58
  %1235 = add nuw nsw i64 %1214, 4
  %1236 = add i64 %1215, 4
  %1237 = icmp eq i64 %1236, %1212
  br i1 %1237, label %1238, label %1213

1238:                                             ; preds = %1213, %1204
  %1239 = phi i64 [ 1, %1204 ], [ %1235, %1213 ]
  %1240 = icmp eq i64 %1209, 0
  br i1 %1240, label %1251, label %1241

1241:                                             ; preds = %1238, %1241
  %1242 = phi i64 [ %1248, %1241 ], [ %1239, %1238 ]
  %1243 = phi i64 [ %1249, %1241 ], [ 0, %1238 ]
  %1244 = getelementptr inbounds i32, ptr %1201, i64 %1242
  %1245 = load i32, ptr %1244, align 4, !tbaa !5
  %1246 = sext i32 %1245 to i64
  %1247 = getelementptr inbounds i8, ptr %1194, i64 %1246
  store i8 1, ptr %1247, align 1, !tbaa !58
  %1248 = add nuw nsw i64 %1242, 1
  %1249 = add i64 %1243, 1
  %1250 = icmp eq i64 %1249, %1209
  br i1 %1250, label %1251, label %1241, !llvm.loop !152

1251:                                             ; preds = %1241, %1238
  %1252 = load i32, ptr %1044, align 4
  %1253 = shl i32 %1252, 2
  %1254 = ashr exact i32 %1253, 2
  %1255 = sext i32 %1254 to i64
  br label %1256

1256:                                             ; preds = %1251, %1193
  %1257 = phi i64 [ %1255, %1251 ], [ %1199, %1193 ]
  %1258 = load ptr, ptr %1001, align 8, !tbaa !65
  %1259 = getelementptr inbounds ptr, ptr %1258, i64 %1257
  %1260 = load ptr, ptr %1259, align 8, !tbaa !23
  %1261 = load i32, ptr %1260, align 4, !tbaa !5
  %1262 = icmp slt i32 %1261, 1
  br i1 %1262, label %1310, label %1263

1263:                                             ; preds = %1256
  %1264 = add nuw i32 %1261, 1
  %1265 = zext i32 %1264 to i64
  %1266 = add nsw i64 %1265, -1
  %1267 = add nsw i64 %1265, -2
  %1268 = and i64 %1266, 3
  %1269 = icmp ult i64 %1267, 3
  br i1 %1269, label %1297, label %1270

1270:                                             ; preds = %1263
  %1271 = and i64 %1266, -4
  br label %1272

1272:                                             ; preds = %1272, %1270
  %1273 = phi i64 [ 1, %1270 ], [ %1294, %1272 ]
  %1274 = phi i64 [ 0, %1270 ], [ %1295, %1272 ]
  %1275 = getelementptr inbounds i32, ptr %1260, i64 %1273
  %1276 = load i32, ptr %1275, align 4, !tbaa !5
  %1277 = sext i32 %1276 to i64
  %1278 = getelementptr inbounds i8, ptr %1194, i64 %1277
  store i8 2, ptr %1278, align 1, !tbaa !58
  %1279 = add nuw nsw i64 %1273, 1
  %1280 = getelementptr inbounds i32, ptr %1260, i64 %1279
  %1281 = load i32, ptr %1280, align 4, !tbaa !5
  %1282 = sext i32 %1281 to i64
  %1283 = getelementptr inbounds i8, ptr %1194, i64 %1282
  store i8 2, ptr %1283, align 1, !tbaa !58
  %1284 = add nuw nsw i64 %1273, 2
  %1285 = getelementptr inbounds i32, ptr %1260, i64 %1284
  %1286 = load i32, ptr %1285, align 4, !tbaa !5
  %1287 = sext i32 %1286 to i64
  %1288 = getelementptr inbounds i8, ptr %1194, i64 %1287
  store i8 2, ptr %1288, align 1, !tbaa !58
  %1289 = add nuw nsw i64 %1273, 3
  %1290 = getelementptr inbounds i32, ptr %1260, i64 %1289
  %1291 = load i32, ptr %1290, align 4, !tbaa !5
  %1292 = sext i32 %1291 to i64
  %1293 = getelementptr inbounds i8, ptr %1194, i64 %1292
  store i8 2, ptr %1293, align 1, !tbaa !58
  %1294 = add nuw nsw i64 %1273, 4
  %1295 = add i64 %1274, 4
  %1296 = icmp eq i64 %1295, %1271
  br i1 %1296, label %1297, label %1272

1297:                                             ; preds = %1272, %1263
  %1298 = phi i64 [ 1, %1263 ], [ %1294, %1272 ]
  %1299 = icmp eq i64 %1268, 0
  br i1 %1299, label %1310, label %1300

1300:                                             ; preds = %1297, %1300
  %1301 = phi i64 [ %1307, %1300 ], [ %1298, %1297 ]
  %1302 = phi i64 [ %1308, %1300 ], [ 0, %1297 ]
  %1303 = getelementptr inbounds i32, ptr %1260, i64 %1301
  %1304 = load i32, ptr %1303, align 4, !tbaa !5
  %1305 = sext i32 %1304 to i64
  %1306 = getelementptr inbounds i8, ptr %1194, i64 %1305
  store i8 2, ptr %1306, align 1, !tbaa !58
  %1307 = add nuw nsw i64 %1301, 1
  %1308 = add i64 %1302, 1
  %1309 = icmp eq i64 %1308, %1268
  br i1 %1309, label %1310, label %1300, !llvm.loop !153

1310:                                             ; preds = %1297, %1300, %1256, %1080
  %1311 = phi ptr [ %1083, %1080 ], [ %1194, %1256 ], [ %1194, %1300 ], [ %1194, %1297 ]
  %1312 = phi ptr [ %1034, %1080 ], [ %1260, %1256 ], [ %1260, %1300 ], [ %1260, %1297 ]
  %1313 = phi ptr [ %1033, %1080 ], [ %1201, %1256 ], [ %1201, %1300 ], [ %1201, %1297 ]
  %1314 = phi ptr [ %1032, %1080 ], [ %1194, %1256 ], [ %1194, %1300 ], [ %1194, %1297 ]
  %1315 = getelementptr inbounds %struct.CompAtom, ptr %105, i64 %1042, i32 4
  %1316 = load i8, ptr %1315, align 1
  %1317 = and i8 %1316, 7
  %1318 = icmp eq i8 %1317, 0
  %1319 = load i32, ptr @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4, !tbaa !5
  br i1 %1318, label %1502, label %1320

1320:                                             ; preds = %1310
  %1321 = icmp eq i32 %1319, 0
  br i1 %1321, label %1328, label %1322

1322:                                             ; preds = %1320
  %1323 = load i32, ptr %1044, align 4
  %1324 = freeze i32 %1323
  %1325 = icmp slt i32 %1324, 0
  %1326 = select i1 %1325, ptr %303, ptr %257
  %1327 = select i1 %1325, i32 %992, i32 %993
  br label %1328

1328:                                             ; preds = %1322, %1320
  %1329 = phi ptr [ %257, %1320 ], [ %1326, %1322 ]
  %1330 = phi i32 [ %993, %1320 ], [ %1327, %1322 ]
  %1331 = icmp sgt i32 %1330, 0
  br i1 %1331, label %1332, label %1483

1332:                                             ; preds = %1328
  %1333 = icmp ugt i32 %1330, 6
  br i1 %1333, label %1334, label %1418

1334:                                             ; preds = %1332
  %1335 = add nsw i32 %1330, -2
  %1336 = getelementptr inbounds i16, ptr %1329, i64 1
  %1337 = load i16, ptr %1336, align 2, !tbaa !44
  %1338 = zext i16 %1337 to i64
  %1339 = getelementptr inbounds %struct.CompAtom, ptr %107, i64 %1338
  %1340 = getelementptr inbounds %class.Vector, ptr %1339, i64 0, i32 2
  %1341 = load double, ptr %1340, align 8, !tbaa !49
  %1342 = load i16, ptr %1329, align 2, !tbaa !44
  %1343 = zext i16 %1342 to i64
  %1344 = getelementptr inbounds %struct.CompAtom, ptr %107, i64 %1343
  %1345 = getelementptr inbounds %class.Vector, ptr %1344, i64 0, i32 2
  %1346 = load double, ptr %1345, align 8, !tbaa !49
  %1347 = getelementptr inbounds %class.Vector, ptr %1339, i64 0, i32 1
  %1348 = load double, ptr %1347, align 8, !tbaa !67
  %1349 = getelementptr inbounds %class.Vector, ptr %1344, i64 0, i32 1
  %1350 = load double, ptr %1349, align 8, !tbaa !67
  %1351 = load double, ptr %1339, align 8, !tbaa !68
  %1352 = load double, ptr %1344, align 8, !tbaa !68
  %1353 = zext i32 %1335 to i64
  %1354 = insertelement <2 x double> poison, double %1341, i64 0
  %1355 = insertelement <2 x double> %1354, double %1346, i64 1
  %1356 = insertelement <2 x double> poison, double %1348, i64 0
  %1357 = insertelement <2 x double> %1356, double %1350, i64 1
  %1358 = insertelement <2 x double> poison, double %1351, i64 0
  %1359 = insertelement <2 x double> %1358, double %1352, i64 1
  %1360 = insertelement <2 x double> poison, double %1063, i64 0
  %1361 = shufflevector <2 x double> %1360, <2 x double> poison, <2 x i32> zeroinitializer
  %1362 = shufflevector <2 x double> %1060, <2 x double> poison, <2 x i32> <i32 1, i32 1>
  %1363 = shufflevector <2 x double> %1060, <2 x double> poison, <2 x i32> zeroinitializer
  br label %1364

1364:                                             ; preds = %1334, %1364
  %1365 = phi i64 [ 2, %1334 ], [ %1408, %1364 ]
  %1366 = phi i32 [ 0, %1334 ], [ %1407, %1364 ]
  %1367 = phi i16 [ %1342, %1334 ], [ %1374, %1364 ]
  %1368 = phi i16 [ %1337, %1334 ], [ %1377, %1364 ]
  %1369 = phi <2 x double> [ %1355, %1334 ], [ %1411, %1364 ]
  %1370 = phi <2 x double> [ %1357, %1334 ], [ %1413, %1364 ]
  %1371 = phi <2 x double> [ %1359, %1334 ], [ %1415, %1364 ]
  %1372 = fsub <2 x double> %1361, %1369
  %1373 = getelementptr inbounds i16, ptr %1329, i64 %1365
  %1374 = load i16, ptr %1373, align 2, !tbaa !44
  %1375 = or i64 %1365, 1
  %1376 = getelementptr inbounds i16, ptr %1329, i64 %1375
  %1377 = load i16, ptr %1376, align 2, !tbaa !44
  %1378 = zext i16 %1374 to i64
  %1379 = getelementptr inbounds %struct.CompAtom, ptr %107, i64 %1378
  %1380 = load double, ptr %1379, align 8, !tbaa !68
  %1381 = zext i16 %1377 to i64
  %1382 = getelementptr inbounds %struct.CompAtom, ptr %107, i64 %1381
  %1383 = load double, ptr %1382, align 8, !tbaa !68
  %1384 = getelementptr inbounds %class.Vector, ptr %1379, i64 0, i32 1
  %1385 = load double, ptr %1384, align 8, !tbaa !67
  %1386 = getelementptr inbounds %class.Vector, ptr %1382, i64 0, i32 1
  %1387 = load double, ptr %1386, align 8, !tbaa !67
  %1388 = getelementptr inbounds %class.Vector, ptr %1379, i64 0, i32 2
  %1389 = load double, ptr %1388, align 8, !tbaa !49
  %1390 = getelementptr inbounds %class.Vector, ptr %1382, i64 0, i32 2
  %1391 = load double, ptr %1390, align 8, !tbaa !49
  %1392 = fsub <2 x double> %1363, %1371
  %1393 = fmul <2 x double> %1392, %1392
  %1394 = fsub <2 x double> %1362, %1370
  %1395 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %1394, <2 x double> %1394, <2 x double> %1393)
  %1396 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %1372, <2 x double> %1372, <2 x double> %1395)
  %1397 = fcmp olt <2 x double> %1396, %1022
  %1398 = zext i32 %1366 to i64
  %1399 = getelementptr inbounds i16, ptr %349, i64 %1398
  store i16 %1367, ptr %1399, align 2, !tbaa !44
  %1400 = extractelement <2 x i1> %1397, i64 1
  %1401 = zext i1 %1400 to i32
  %1402 = add nuw nsw i32 %1366, %1401
  %1403 = zext i32 %1402 to i64
  %1404 = getelementptr inbounds i16, ptr %349, i64 %1403
  store i16 %1368, ptr %1404, align 2, !tbaa !44
  %1405 = extractelement <2 x i1> %1397, i64 0
  %1406 = zext i1 %1405 to i32
  %1407 = add i32 %1402, %1406
  %1408 = add nuw nsw i64 %1365, 2
  %1409 = icmp ult i64 %1408, %1353
  %1410 = insertelement <2 x double> poison, double %1391, i64 0
  %1411 = insertelement <2 x double> %1410, double %1389, i64 1
  %1412 = insertelement <2 x double> poison, double %1387, i64 0
  %1413 = insertelement <2 x double> %1412, double %1385, i64 1
  %1414 = insertelement <2 x double> poison, double %1383, i64 0
  %1415 = insertelement <2 x double> %1414, double %1380, i64 1
  br i1 %1409, label %1364, label %1416

1416:                                             ; preds = %1364
  %1417 = trunc i64 %1365 to i32
  br label %1418

1418:                                             ; preds = %1416, %1332
  %1419 = phi i32 [ %1407, %1416 ], [ 0, %1332 ]
  %1420 = phi i32 [ %1417, %1416 ], [ 0, %1332 ]
  %1421 = icmp slt i32 %1420, %1330
  br i1 %1421, label %1422, label %1427

1422:                                             ; preds = %1418
  %1423 = zext i32 %1420 to i64
  %1424 = zext i32 %1330 to i64
  %1425 = extractelement <2 x double> %1060, i64 0
  %1426 = extractelement <2 x double> %1060, i64 1
  br label %1432

1427:                                             ; preds = %1455, %1418
  %1428 = phi i32 [ %1419, %1418 ], [ %1456, %1455 ]
  %1429 = icmp sgt i32 %1428, 0
  br i1 %1429, label %1430, label %1483

1430:                                             ; preds = %1427
  %1431 = zext i32 %1428 to i64
  br label %1459

1432:                                             ; preds = %1422, %1455
  %1433 = phi i64 [ %1423, %1422 ], [ %1457, %1455 ]
  %1434 = phi i32 [ %1419, %1422 ], [ %1456, %1455 ]
  %1435 = getelementptr inbounds i16, ptr %1329, i64 %1433
  %1436 = load i16, ptr %1435, align 2, !tbaa !44
  %1437 = zext i16 %1436 to i64
  %1438 = getelementptr inbounds %struct.CompAtom, ptr %107, i64 %1437
  %1439 = load double, ptr %1438, align 8, !tbaa !68
  %1440 = getelementptr inbounds %class.Vector, ptr %1438, i64 0, i32 1
  %1441 = load double, ptr %1440, align 8, !tbaa !67
  %1442 = getelementptr inbounds %class.Vector, ptr %1438, i64 0, i32 2
  %1443 = load double, ptr %1442, align 8, !tbaa !49
  %1444 = fsub double %1425, %1439
  %1445 = fmul double %1444, %1444
  %1446 = fsub double %1426, %1441
  %1447 = call double @llvm.fmuladd.f64(double %1446, double %1446, double %1445)
  %1448 = fsub double %1063, %1443
  %1449 = call double @llvm.fmuladd.f64(double %1448, double %1448, double %1447)
  %1450 = fcmp ugt double %1449, %27
  br i1 %1450, label %1455, label %1451

1451:                                             ; preds = %1432
  %1452 = add nsw i32 %1434, 1
  %1453 = sext i32 %1434 to i64
  %1454 = getelementptr inbounds i16, ptr %349, i64 %1453
  store i16 %1436, ptr %1454, align 2, !tbaa !44
  br label %1455

1455:                                             ; preds = %1451, %1432
  %1456 = phi i32 [ %1452, %1451 ], [ %1434, %1432 ]
  %1457 = add nuw nsw i64 %1433, 1
  %1458 = icmp eq i64 %1457, %1424
  br i1 %1458, label %1427, label %1432

1459:                                             ; preds = %1430, %1476
  %1460 = phi i64 [ 0, %1430 ], [ %1479, %1476 ]
  %1461 = phi ptr [ %487, %1430 ], [ %1478, %1476 ]
  %1462 = getelementptr inbounds i16, ptr %349, i64 %1460
  %1463 = load i16, ptr %1462, align 2, !tbaa !44
  %1464 = zext i16 %1463 to i64
  %1465 = getelementptr inbounds %struct.CompAtom, ptr %107, i64 %1464, i32 4
  %1466 = load i8, ptr %1465, align 1
  %1467 = and i8 %1466, 7
  store i16 %1463, ptr %1461, align 2, !tbaa !44
  %1468 = getelementptr inbounds i16, ptr %1461, i64 1
  %1469 = insertelement <2 x i16> poison, i16 %1463, i64 0
  %1470 = shufflevector <2 x i16> %1469, <2 x i16> poison, <2 x i32> zeroinitializer
  %1471 = add <2 x i16> %1470, <i16 1, i16 2>
  store <2 x i16> %1471, ptr %1468, align 2, !tbaa !44
  %1472 = icmp ult i8 %1467, 4
  br i1 %1472, label %1476, label %1473

1473:                                             ; preds = %1459
  %1474 = add <2 x i16> %1470, <i16 3, i16 4>
  %1475 = getelementptr inbounds i16, ptr %1461, i64 3
  store <2 x i16> %1474, ptr %1475, align 2, !tbaa !44
  br label %1476

1476:                                             ; preds = %1473, %1459
  %1477 = zext i8 %1467 to i64
  %1478 = getelementptr inbounds i16, ptr %1461, i64 %1477
  %1479 = add nuw nsw i64 %1460, 1
  %1480 = icmp eq i64 %1479, %1431
  br i1 %1480, label %1481, label %1459

1481:                                             ; preds = %1476
  %1482 = ptrtoint ptr %1478 to i64
  br label %1483

1483:                                             ; preds = %1481, %1427, %1328
  %1484 = phi i64 [ %1482, %1481 ], [ %1002, %1427 ], [ %1002, %1328 ]
  %1485 = sub i64 %1484, %1002
  %1486 = lshr exact i64 %1485, 1
  %1487 = trunc i64 %1486 to i32
  %1488 = icmp eq i32 %1487, 0
  br i1 %1488, label %1489, label %1494

1489:                                             ; preds = %1483
  %1490 = load i8, ptr %1315, align 1
  %1491 = and i8 %1490, 7
  %1492 = zext i8 %1491 to i32
  %1493 = add nsw i32 %1031, %1492
  br label %4165

1494:                                             ; preds = %1483
  %1495 = shl i64 %1485, 31
  %1496 = add i64 %1495, -4294967296
  %1497 = ashr i64 %1496, 32
  %1498 = getelementptr inbounds i16, ptr %487, i64 %1497
  %1499 = load i16, ptr %1498, align 2, !tbaa !44
  %1500 = ashr i64 %1495, 32
  %1501 = getelementptr inbounds i16, ptr %487, i64 %1500
  store i16 %1499, ptr %1501, align 2, !tbaa !44
  br label %1502

1502:                                             ; preds = %1494, %1310
  %1503 = phi i32 [ %1487, %1494 ], [ %1035, %1310 ]
  %1504 = icmp eq i32 %1319, 0
  br i1 %1504, label %1509, label %1505

1505:                                             ; preds = %1502
  %1506 = load i32, ptr %1044, align 4
  %1507 = and i32 %1506, 1073741824
  %1508 = icmp ne i32 %1507, 0
  br label %1509

1509:                                             ; preds = %1505, %1502
  %1510 = phi i1 [ false, %1502 ], [ %1508, %1505 ]
  %1511 = load i32, ptr %17, align 8, !tbaa !17
  %1512 = add nsw i32 %1003, %1511
  %1513 = load i32, ptr %1004, align 4, !tbaa !69
  %1514 = icmp sgt i32 %1513, %1512
  br i1 %1514, label %1530, label %1515

1515:                                             ; preds = %1509, %1515
  %1516 = phi i32 [ %1518, %1515 ], [ %1513, %1509 ]
  %1517 = ashr i32 %1516, 1
  %1518 = add nsw i32 %1517, %1516
  %1519 = icmp sgt i32 %1518, %1512
  br i1 %1519, label %1520, label %1515

1520:                                             ; preds = %1515
  %1521 = sext i32 %1518 to i64
  %1522 = icmp slt i32 %1518, 0
  %1523 = shl nsw i64 %1521, 1
  %1524 = select i1 %1522, i64 -1, i64 %1523
  %1525 = call noalias noundef nonnull ptr @_Znam(i64 noundef %1524) #12
  %1526 = load ptr, ptr %12, align 8, !tbaa !46
  %1527 = sext i32 %1511 to i64
  %1528 = shl nsw i64 %1527, 1
  call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 2 %1525, ptr align 2 %1526, i64 %1528, i1 false)
  %1529 = icmp eq ptr %1526, null
  br i1 %1529, label %1534, label %1532

1530:                                             ; preds = %1509
  %1531 = load ptr, ptr %12, align 8, !tbaa !46
  br label %1536

1532:                                             ; preds = %1520
  call void @_ZdaPv(ptr noundef nonnull %1526) #13
  %1533 = load i32, ptr %17, align 8, !tbaa !17
  br label %1534

1534:                                             ; preds = %1532, %1520
  %1535 = phi i32 [ %1533, %1532 ], [ %1511, %1520 ]
  store ptr %1525, ptr %12, align 8, !tbaa !46
  store i32 %1518, ptr %1004, align 4, !tbaa !69
  br label %1536

1536:                                             ; preds = %1530, %1534
  %1537 = phi i32 [ %1511, %1530 ], [ %1535, %1534 ]
  %1538 = phi ptr [ %1531, %1530 ], [ %1525, %1534 ]
  %1539 = ptrtoint ptr %1538 to i64
  %1540 = add nsw i32 %1537, 1
  %1541 = sext i32 %1540 to i64
  %1542 = getelementptr inbounds i16, ptr %1538, i64 %1541
  %1543 = icmp sgt i32 %1503, 0
  br i1 %1510, label %1544, label %1591

1544:                                             ; preds = %1536
  br i1 %1543, label %1545, label %1751

1545:                                             ; preds = %1544
  %1546 = zext i32 %1503 to i64
  %1547 = extractelement <2 x double> %1060, i64 0
  %1548 = extractelement <2 x double> %1060, i64 1
  br label %1549

1549:                                             ; preds = %1545, %1586
  %1550 = phi i64 [ 0, %1545 ], [ %1589, %1586 ]
  %1551 = phi ptr [ %533, %1545 ], [ %1588, %1586 ]
  %1552 = phi ptr [ %1542, %1545 ], [ %1587, %1586 ]
  %1553 = getelementptr inbounds i16, ptr %487, i64 %1550
  %1554 = load i16, ptr %1553, align 2, !tbaa !44
  %1555 = zext i16 %1554 to i64
  %1556 = getelementptr inbounds %struct.CompAtomExt, ptr %111, i64 %1555
  %1557 = load i32, ptr %1556, align 4
  %1558 = and i32 %1557, 1073741824
  %1559 = icmp eq i32 %1558, 0
  br i1 %1559, label %1560, label %1586

1560:                                             ; preds = %1549
  %1561 = getelementptr inbounds %struct.CompAtom, ptr %107, i64 %1555
  %1562 = getelementptr inbounds %class.Vector, ptr %1561, i64 0, i32 2
  %1563 = load double, ptr %1562, align 8, !tbaa !49
  %1564 = fsub double %1063, %1563
  %1565 = getelementptr inbounds %class.Vector, ptr %1561, i64 0, i32 1
  %1566 = load double, ptr %1565, align 8, !tbaa !67
  %1567 = fsub double %1548, %1566
  %1568 = load double, ptr %1561, align 8, !tbaa !68
  %1569 = fsub double %1547, %1568
  %1570 = fmul double %1569, %1569
  %1571 = call double @llvm.fmuladd.f64(double %1567, double %1567, double %1570)
  %1572 = call double @llvm.fmuladd.f64(double %1564, double %1564, double %1571)
  %1573 = fcmp ugt double %1572, %24
  br i1 %1573, label %1586, label %1574

1574:                                             ; preds = %1560
  %1575 = shl i32 %1557, 2
  %1576 = ashr exact i32 %1575, 2
  %1577 = icmp slt i32 %1576, %1074
  %1578 = icmp sgt i32 %1576, %1076
  %1579 = select i1 %1577, i1 true, i1 %1578
  %1580 = select i1 %1579, ptr %1552, ptr %1551
  %1581 = zext i1 %1579 to i64
  %1582 = getelementptr inbounds i16, ptr %1552, i64 %1581
  %1583 = xor i1 %1579, true
  %1584 = zext i1 %1583 to i64
  %1585 = getelementptr inbounds i16, ptr %1551, i64 %1584
  store i16 %1554, ptr %1580, align 2, !tbaa !44
  br label %1586

1586:                                             ; preds = %1574, %1560, %1549
  %1587 = phi ptr [ %1552, %1549 ], [ %1552, %1560 ], [ %1582, %1574 ]
  %1588 = phi ptr [ %1551, %1549 ], [ %1551, %1560 ], [ %1585, %1574 ]
  %1589 = add nuw nsw i64 %1550, 1
  %1590 = icmp eq i64 %1589, %1546
  br i1 %1590, label %1751, label %1549

1591:                                             ; preds = %1536
  br i1 %1543, label %1592, label %1751

1592:                                             ; preds = %1591
  %1593 = icmp ugt i32 %1503, 6
  br i1 %1593, label %1594, label %1702

1594:                                             ; preds = %1592
  %1595 = add nsw i32 %1503, -2
  %1596 = load i16, ptr %487, align 2, !tbaa !44
  %1597 = zext i16 %1596 to i64
  %1598 = getelementptr inbounds %struct.CompAtomExt, ptr %111, i64 %1597
  %1599 = load i32, ptr %1598, align 4
  %1600 = load i16, ptr %1005, align 2, !tbaa !44
  %1601 = zext i16 %1600 to i64
  %1602 = getelementptr inbounds %struct.CompAtom, ptr %107, i64 %1601
  %1603 = getelementptr inbounds %class.Vector, ptr %1602, i64 0, i32 2
  %1604 = load double, ptr %1603, align 8, !tbaa !49
  %1605 = getelementptr inbounds %struct.CompAtom, ptr %107, i64 %1597
  %1606 = getelementptr inbounds %class.Vector, ptr %1605, i64 0, i32 2
  %1607 = load double, ptr %1606, align 8, !tbaa !49
  %1608 = getelementptr inbounds %class.Vector, ptr %1602, i64 0, i32 1
  %1609 = load double, ptr %1608, align 8, !tbaa !67
  %1610 = getelementptr inbounds %class.Vector, ptr %1605, i64 0, i32 1
  %1611 = load double, ptr %1610, align 8, !tbaa !67
  %1612 = load double, ptr %1602, align 8, !tbaa !68
  %1613 = load double, ptr %1605, align 8, !tbaa !68
  %1614 = zext i32 %1595 to i64
  %1615 = extractelement <2 x double> %1060, i64 0
  %1616 = extractelement <2 x double> %1060, i64 1
  br label %1617

1617:                                             ; preds = %1594, %1695
  %1618 = phi i64 [ 2, %1594 ], [ %1698, %1695 ]
  %1619 = phi i64 [ %1601, %1594 ], [ %1655, %1695 ]
  %1620 = phi i32 [ %1599, %1594 ], [ %1683, %1695 ]
  %1621 = phi ptr [ %533, %1594 ], [ %1697, %1695 ]
  %1622 = phi ptr [ %1542, %1594 ], [ %1696, %1695 ]
  %1623 = phi i16 [ %1596, %1594 ], [ %1648, %1695 ]
  %1624 = phi i16 [ %1600, %1594 ], [ %1651, %1695 ]
  %1625 = phi double [ %1613, %1594 ], [ %1654, %1695 ]
  %1626 = phi double [ %1612, %1594 ], [ %1657, %1695 ]
  %1627 = phi double [ %1611, %1594 ], [ %1659, %1695 ]
  %1628 = phi double [ %1609, %1594 ], [ %1661, %1695 ]
  %1629 = phi double [ %1607, %1594 ], [ %1663, %1695 ]
  %1630 = phi double [ %1604, %1594 ], [ %1665, %1695 ]
  %1631 = getelementptr inbounds %struct.CompAtomExt, ptr %111, i64 %1619
  %1632 = load i32, ptr %1631, align 4
  %1633 = shl i32 %1632, 2
  %1634 = ashr exact i32 %1633, 2
  %1635 = fsub double %1615, %1625
  %1636 = fsub double %1615, %1626
  %1637 = fmul double %1635, %1635
  %1638 = fmul double %1636, %1636
  %1639 = fsub double %1616, %1627
  %1640 = fsub double %1616, %1628
  %1641 = call double @llvm.fmuladd.f64(double %1639, double %1639, double %1637)
  %1642 = call double @llvm.fmuladd.f64(double %1640, double %1640, double %1638)
  %1643 = fsub double %1063, %1629
  %1644 = fsub double %1063, %1630
  %1645 = call double @llvm.fmuladd.f64(double %1643, double %1643, double %1641)
  %1646 = call double @llvm.fmuladd.f64(double %1644, double %1644, double %1642)
  %1647 = getelementptr inbounds i16, ptr %487, i64 %1618
  %1648 = load i16, ptr %1647, align 2, !tbaa !44
  %1649 = or i64 %1618, 1
  %1650 = getelementptr inbounds i16, ptr %487, i64 %1649
  %1651 = load i16, ptr %1650, align 2, !tbaa !44
  %1652 = zext i16 %1648 to i64
  %1653 = getelementptr inbounds %struct.CompAtom, ptr %107, i64 %1652
  %1654 = load double, ptr %1653, align 8, !tbaa !68
  %1655 = zext i16 %1651 to i64
  %1656 = getelementptr inbounds %struct.CompAtom, ptr %107, i64 %1655
  %1657 = load double, ptr %1656, align 8, !tbaa !68
  %1658 = getelementptr inbounds %class.Vector, ptr %1653, i64 0, i32 1
  %1659 = load double, ptr %1658, align 8, !tbaa !67
  %1660 = getelementptr inbounds %class.Vector, ptr %1656, i64 0, i32 1
  %1661 = load double, ptr %1660, align 8, !tbaa !67
  %1662 = getelementptr inbounds %class.Vector, ptr %1653, i64 0, i32 2
  %1663 = load double, ptr %1662, align 8, !tbaa !49
  %1664 = getelementptr inbounds %class.Vector, ptr %1656, i64 0, i32 2
  %1665 = load double, ptr %1664, align 8, !tbaa !49
  %1666 = fcmp ugt double %1645, %24
  br i1 %1666, label %1679, label %1667

1667:                                             ; preds = %1617
  %1668 = shl i32 %1620, 2
  %1669 = ashr exact i32 %1668, 2
  %1670 = icmp slt i32 %1669, %1074
  %1671 = icmp sgt i32 %1669, %1076
  %1672 = select i1 %1670, i1 true, i1 %1671
  %1673 = select i1 %1672, ptr %1622, ptr %1621
  %1674 = zext i1 %1672 to i64
  %1675 = getelementptr inbounds i16, ptr %1622, i64 %1674
  %1676 = xor i1 %1672, true
  %1677 = zext i1 %1676 to i64
  %1678 = getelementptr inbounds i16, ptr %1621, i64 %1677
  store i16 %1623, ptr %1673, align 2, !tbaa !44
  br label %1679

1679:                                             ; preds = %1667, %1617
  %1680 = phi ptr [ %1622, %1617 ], [ %1675, %1667 ]
  %1681 = phi ptr [ %1621, %1617 ], [ %1678, %1667 ]
  %1682 = getelementptr inbounds %struct.CompAtomExt, ptr %111, i64 %1652
  %1683 = load i32, ptr %1682, align 4
  %1684 = fcmp ugt double %1646, %24
  br i1 %1684, label %1695, label %1685

1685:                                             ; preds = %1679
  %1686 = icmp slt i32 %1634, %1074
  %1687 = icmp sgt i32 %1634, %1076
  %1688 = select i1 %1686, i1 true, i1 %1687
  %1689 = select i1 %1688, ptr %1680, ptr %1681
  %1690 = zext i1 %1688 to i64
  %1691 = getelementptr inbounds i16, ptr %1680, i64 %1690
  %1692 = xor i1 %1688, true
  %1693 = zext i1 %1692 to i64
  %1694 = getelementptr inbounds i16, ptr %1681, i64 %1693
  store i16 %1624, ptr %1689, align 2, !tbaa !44
  br label %1695

1695:                                             ; preds = %1685, %1679
  %1696 = phi ptr [ %1680, %1679 ], [ %1691, %1685 ]
  %1697 = phi ptr [ %1681, %1679 ], [ %1694, %1685 ]
  %1698 = add nuw nsw i64 %1618, 2
  %1699 = icmp ult i64 %1698, %1614
  br i1 %1699, label %1617, label %1700

1700:                                             ; preds = %1695
  %1701 = trunc i64 %1618 to i32
  br label %1702

1702:                                             ; preds = %1700, %1592
  %1703 = phi i32 [ %1701, %1700 ], [ 0, %1592 ]
  %1704 = phi ptr [ %1696, %1700 ], [ %1542, %1592 ]
  %1705 = phi ptr [ %1697, %1700 ], [ %533, %1592 ]
  %1706 = icmp slt i32 %1703, %1503
  br i1 %1706, label %1707, label %1751

1707:                                             ; preds = %1702
  %1708 = zext i32 %1703 to i64
  %1709 = zext i32 %1503 to i64
  %1710 = extractelement <2 x double> %1060, i64 0
  %1711 = extractelement <2 x double> %1060, i64 1
  br label %1712

1712:                                             ; preds = %1707, %1746
  %1713 = phi i64 [ %1708, %1707 ], [ %1749, %1746 ]
  %1714 = phi ptr [ %1705, %1707 ], [ %1748, %1746 ]
  %1715 = phi ptr [ %1704, %1707 ], [ %1747, %1746 ]
  %1716 = getelementptr inbounds i16, ptr %487, i64 %1713
  %1717 = load i16, ptr %1716, align 2, !tbaa !44
  %1718 = zext i16 %1717 to i64
  %1719 = getelementptr inbounds %struct.CompAtom, ptr %107, i64 %1718
  %1720 = load double, ptr %1719, align 8, !tbaa !68
  %1721 = getelementptr inbounds %class.Vector, ptr %1719, i64 0, i32 1
  %1722 = load double, ptr %1721, align 8, !tbaa !67
  %1723 = getelementptr inbounds %class.Vector, ptr %1719, i64 0, i32 2
  %1724 = load double, ptr %1723, align 8, !tbaa !49
  %1725 = fsub double %1710, %1720
  %1726 = fmul double %1725, %1725
  %1727 = fsub double %1711, %1722
  %1728 = call double @llvm.fmuladd.f64(double %1727, double %1727, double %1726)
  %1729 = fsub double %1063, %1724
  %1730 = call double @llvm.fmuladd.f64(double %1729, double %1729, double %1728)
  %1731 = fcmp ugt double %1730, %24
  br i1 %1731, label %1746, label %1732

1732:                                             ; preds = %1712
  %1733 = getelementptr inbounds %struct.CompAtomExt, ptr %111, i64 %1718
  %1734 = load i32, ptr %1733, align 4
  %1735 = shl i32 %1734, 2
  %1736 = ashr exact i32 %1735, 2
  %1737 = icmp slt i32 %1736, %1074
  %1738 = icmp sgt i32 %1736, %1076
  %1739 = select i1 %1737, i1 true, i1 %1738
  %1740 = select i1 %1739, ptr %1715, ptr %1714
  %1741 = zext i1 %1739 to i64
  %1742 = getelementptr inbounds i16, ptr %1715, i64 %1741
  %1743 = xor i1 %1739, true
  %1744 = zext i1 %1743 to i64
  %1745 = getelementptr inbounds i16, ptr %1714, i64 %1744
  store i16 %1717, ptr %1740, align 2, !tbaa !44
  br label %1746

1746:                                             ; preds = %1732, %1712
  %1747 = phi ptr [ %1715, %1712 ], [ %1742, %1732 ]
  %1748 = phi ptr [ %1714, %1712 ], [ %1745, %1732 ]
  %1749 = add nuw nsw i64 %1713, 1
  %1750 = icmp eq i64 %1749, %1709
  br i1 %1750, label %1751, label %1712

1751:                                             ; preds = %1746, %1586, %1702, %1544, %1591
  %1752 = phi ptr [ %1542, %1591 ], [ %1542, %1544 ], [ %1704, %1702 ], [ %1587, %1586 ], [ %1747, %1746 ]
  %1753 = phi ptr [ %533, %1591 ], [ %533, %1544 ], [ %1705, %1702 ], [ %1588, %1586 ], [ %1748, %1746 ]
  %1754 = icmp eq ptr %1752, %1542
  %1755 = icmp eq ptr %1753, %533
  %1756 = select i1 %1754, i1 %1755, i1 false
  br i1 %1756, label %1757, label %1759

1757:                                             ; preds = %1751
  %1758 = add nsw i32 %1031, 1
  br label %4165

1759:                                             ; preds = %1751
  %1760 = trunc i32 %1031 to i16
  %1761 = load i32, ptr %17, align 8, !tbaa !17
  %1762 = add nsw i32 %1761, -1
  %1763 = sext i32 %1762 to i64
  %1764 = getelementptr inbounds i16, ptr %1538, i64 %1763
  store i16 %1760, ptr %1764, align 2, !tbaa !44
  %1765 = ptrtoint ptr %1752 to i64
  %1766 = ptrtoint ptr %1542 to i64
  %1767 = sub i64 %1765, %1766
  %1768 = lshr exact i64 %1767, 1
  %1769 = trunc i64 %1768 to i32
  %1770 = icmp sgt i32 %1769, 0
  br i1 %1770, label %1771, label %1871

1771:                                             ; preds = %1759
  %1772 = and i64 %1768, 4294967295
  %1773 = and i64 %1768, 1
  %1774 = icmp eq i64 %1772, 1
  br i1 %1774, label %1839, label %1775

1775:                                             ; preds = %1771
  %1776 = sub nsw i64 %1772, %1773
  br label %1777

1777:                                             ; preds = %1832, %1775
  %1778 = phi i64 [ 0, %1775 ], [ %1836, %1832 ]
  %1779 = phi ptr [ %1542, %1775 ], [ %1835, %1832 ]
  %1780 = phi ptr [ %579, %1775 ], [ %1834, %1832 ]
  %1781 = phi ptr [ %717, %1775 ], [ %1833, %1832 ]
  %1782 = phi i64 [ 0, %1775 ], [ %1837, %1832 ]
  %1783 = getelementptr inbounds i16, ptr %1542, i64 %1778
  %1784 = load i16, ptr %1783, align 2, !tbaa !44
  %1785 = zext i16 %1784 to i64
  %1786 = getelementptr inbounds %struct.CompAtom, ptr %107, i64 %1785, i32 3
  %1787 = load i8, ptr %1786, align 2, !tbaa !51
  %1788 = zext i8 %1787 to i32
  %1789 = mul nuw nsw i32 %1788, 3
  %1790 = add nuw nsw i32 %1789, %1066
  %1791 = zext i32 %1790 to i64
  %1792 = getelementptr inbounds [9 x i32], ptr %2, i64 0, i64 %1791
  %1793 = load i32, ptr %1792, align 4, !tbaa !5
  switch i32 %1793, label %1805 [
    i32 0, label %1794
    i32 1, label %1796
    i32 2, label %1798
  ]

1794:                                             ; preds = %1777
  %1795 = getelementptr inbounds i16, ptr %1779, i64 1
  br label %1800

1796:                                             ; preds = %1777
  %1797 = getelementptr inbounds i16, ptr %1780, i64 1
  br label %1800

1798:                                             ; preds = %1777
  %1799 = getelementptr inbounds i16, ptr %1781, i64 1
  br label %1800

1800:                                             ; preds = %1794, %1796, %1798
  %1801 = phi ptr [ %1781, %1798 ], [ %1780, %1796 ], [ %1779, %1794 ]
  %1802 = phi ptr [ %1799, %1798 ], [ %1781, %1796 ], [ %1781, %1794 ]
  %1803 = phi ptr [ %1780, %1798 ], [ %1797, %1796 ], [ %1780, %1794 ]
  %1804 = phi ptr [ %1779, %1798 ], [ %1779, %1796 ], [ %1795, %1794 ]
  store i16 %1784, ptr %1801, align 2, !tbaa !44
  br label %1805

1805:                                             ; preds = %1800, %1777
  %1806 = phi ptr [ %1781, %1777 ], [ %1802, %1800 ]
  %1807 = phi ptr [ %1780, %1777 ], [ %1803, %1800 ]
  %1808 = phi ptr [ %1779, %1777 ], [ %1804, %1800 ]
  %1809 = or i64 %1778, 1
  %1810 = getelementptr inbounds i16, ptr %1542, i64 %1809
  %1811 = load i16, ptr %1810, align 2, !tbaa !44
  %1812 = zext i16 %1811 to i64
  %1813 = getelementptr inbounds %struct.CompAtom, ptr %107, i64 %1812, i32 3
  %1814 = load i8, ptr %1813, align 2, !tbaa !51
  %1815 = zext i8 %1814 to i32
  %1816 = mul nuw nsw i32 %1815, 3
  %1817 = add nuw nsw i32 %1816, %1066
  %1818 = zext i32 %1817 to i64
  %1819 = getelementptr inbounds [9 x i32], ptr %2, i64 0, i64 %1818
  %1820 = load i32, ptr %1819, align 4, !tbaa !5
  switch i32 %1820, label %1832 [
    i32 0, label %1825
    i32 1, label %1823
    i32 2, label %1821
  ]

1821:                                             ; preds = %1805
  %1822 = getelementptr inbounds i16, ptr %1806, i64 1
  br label %1827

1823:                                             ; preds = %1805
  %1824 = getelementptr inbounds i16, ptr %1807, i64 1
  br label %1827

1825:                                             ; preds = %1805
  %1826 = getelementptr inbounds i16, ptr %1808, i64 1
  br label %1827

1827:                                             ; preds = %1825, %1823, %1821
  %1828 = phi ptr [ %1806, %1821 ], [ %1807, %1823 ], [ %1808, %1825 ]
  %1829 = phi ptr [ %1822, %1821 ], [ %1806, %1823 ], [ %1806, %1825 ]
  %1830 = phi ptr [ %1807, %1821 ], [ %1824, %1823 ], [ %1807, %1825 ]
  %1831 = phi ptr [ %1808, %1821 ], [ %1808, %1823 ], [ %1826, %1825 ]
  store i16 %1811, ptr %1828, align 2, !tbaa !44
  br label %1832

1832:                                             ; preds = %1827, %1805
  %1833 = phi ptr [ %1806, %1805 ], [ %1829, %1827 ]
  %1834 = phi ptr [ %1807, %1805 ], [ %1830, %1827 ]
  %1835 = phi ptr [ %1808, %1805 ], [ %1831, %1827 ]
  %1836 = add nuw nsw i64 %1778, 2
  %1837 = add i64 %1782, 2
  %1838 = icmp eq i64 %1837, %1776
  br i1 %1838, label %1839, label %1777

1839:                                             ; preds = %1832, %1771
  %1840 = phi ptr [ undef, %1771 ], [ %1833, %1832 ]
  %1841 = phi ptr [ undef, %1771 ], [ %1834, %1832 ]
  %1842 = phi ptr [ undef, %1771 ], [ %1835, %1832 ]
  %1843 = phi i64 [ 0, %1771 ], [ %1836, %1832 ]
  %1844 = phi ptr [ %1542, %1771 ], [ %1835, %1832 ]
  %1845 = phi ptr [ %579, %1771 ], [ %1834, %1832 ]
  %1846 = phi ptr [ %717, %1771 ], [ %1833, %1832 ]
  %1847 = icmp eq i64 %1773, 0
  br i1 %1847, label %1871, label %1848

1848:                                             ; preds = %1839
  %1849 = getelementptr inbounds i16, ptr %1542, i64 %1843
  %1850 = load i16, ptr %1849, align 2, !tbaa !44
  %1851 = zext i16 %1850 to i64
  %1852 = getelementptr inbounds %struct.CompAtom, ptr %107, i64 %1851, i32 3
  %1853 = load i8, ptr %1852, align 2, !tbaa !51
  %1854 = zext i8 %1853 to i32
  %1855 = mul nuw nsw i32 %1854, 3
  %1856 = add nuw nsw i32 %1855, %1066
  %1857 = zext i32 %1856 to i64
  %1858 = getelementptr inbounds [9 x i32], ptr %2, i64 0, i64 %1857
  %1859 = load i32, ptr %1858, align 4, !tbaa !5
  switch i32 %1859, label %1871 [
    i32 0, label %1864
    i32 1, label %1862
    i32 2, label %1860
  ]

1860:                                             ; preds = %1848
  %1861 = getelementptr inbounds i16, ptr %1846, i64 1
  br label %1866

1862:                                             ; preds = %1848
  %1863 = getelementptr inbounds i16, ptr %1845, i64 1
  br label %1866

1864:                                             ; preds = %1848
  %1865 = getelementptr inbounds i16, ptr %1844, i64 1
  br label %1866

1866:                                             ; preds = %1864, %1862, %1860
  %1867 = phi ptr [ %1846, %1860 ], [ %1845, %1862 ], [ %1844, %1864 ]
  %1868 = phi ptr [ %1861, %1860 ], [ %1846, %1862 ], [ %1846, %1864 ]
  %1869 = phi ptr [ %1845, %1860 ], [ %1863, %1862 ], [ %1845, %1864 ]
  %1870 = phi ptr [ %1844, %1860 ], [ %1844, %1862 ], [ %1865, %1864 ]
  store i16 %1850, ptr %1867, align 2, !tbaa !44
  br label %1871

1871:                                             ; preds = %1839, %1866, %1848, %1759
  %1872 = phi ptr [ %717, %1759 ], [ %1840, %1839 ], [ %1846, %1848 ], [ %1868, %1866 ]
  %1873 = phi ptr [ %579, %1759 ], [ %1841, %1839 ], [ %1845, %1848 ], [ %1869, %1866 ]
  %1874 = phi ptr [ %1542, %1759 ], [ %1842, %1839 ], [ %1844, %1848 ], [ %1870, %1866 ]
  %1875 = ptrtoint ptr %1753 to i64
  %1876 = sub i64 %1875, %1006
  %1877 = lshr exact i64 %1876, 1
  %1878 = trunc i64 %1877 to i32
  %1879 = icmp sgt i32 %1878, 0
  br i1 %1879, label %1880, label %1955

1880:                                             ; preds = %1871
  %1881 = and i64 %1877, 4294967295
  br label %1882

1882:                                             ; preds = %1880, %1943
  %1883 = phi i64 [ 0, %1880 ], [ %1953, %1943 ]
  %1884 = phi ptr [ %1874, %1880 ], [ %1952, %1943 ]
  %1885 = phi ptr [ %395, %1880 ], [ %1951, %1943 ]
  %1886 = phi ptr [ %441, %1880 ], [ %1950, %1943 ]
  %1887 = phi ptr [ %1873, %1880 ], [ %1949, %1943 ]
  %1888 = phi ptr [ %625, %1880 ], [ %1948, %1943 ]
  %1889 = phi ptr [ %671, %1880 ], [ %1947, %1943 ]
  %1890 = phi ptr [ %1872, %1880 ], [ %1946, %1943 ]
  %1891 = phi ptr [ %763, %1880 ], [ %1945, %1943 ]
  %1892 = phi ptr [ %809, %1880 ], [ %1944, %1943 ]
  %1893 = getelementptr inbounds i16, ptr %533, i64 %1883
  %1894 = load i16, ptr %1893, align 2, !tbaa !44
  %1895 = zext i16 %1894 to i64
  %1896 = getelementptr inbounds %struct.CompAtomExt, ptr %111, i64 %1895
  %1897 = load i32, ptr %1896, align 4
  %1898 = shl i32 %1897, 2
  %1899 = ashr exact i32 %1898, 2
  %1900 = sext i32 %1899 to i64
  %1901 = getelementptr inbounds i8, ptr %1311, i64 %1900
  %1902 = load i8, ptr %1901, align 1, !tbaa !58
  %1903 = sext i8 %1902 to i32
  %1904 = getelementptr inbounds %struct.CompAtom, ptr %107, i64 %1895, i32 3
  %1905 = load i8, ptr %1904, align 2, !tbaa !51
  %1906 = zext i8 %1905 to i32
  %1907 = mul nuw nsw i32 %1906, 3
  %1908 = add nuw nsw i32 %1907, %1066
  %1909 = zext i32 %1908 to i64
  %1910 = getelementptr inbounds [9 x i32], ptr %2, i64 0, i64 %1909
  %1911 = load i32, ptr %1910, align 4, !tbaa !5
  %1912 = mul nsw i32 %1911, 3
  %1913 = add nsw i32 %1912, %1903
  switch i32 %1913, label %1943 [
    i32 0, label %1914
    i32 1, label %1916
    i32 2, label %1918
    i32 3, label %1920
    i32 6, label %1922
    i32 5, label %1924
    i32 8, label %1926
    i32 4, label %1928
    i32 7, label %1930
  ]

1914:                                             ; preds = %1882
  %1915 = getelementptr inbounds i16, ptr %1884, i64 1
  br label %1932

1916:                                             ; preds = %1882
  %1917 = getelementptr inbounds i16, ptr %1885, i64 1
  br label %1932

1918:                                             ; preds = %1882
  %1919 = getelementptr inbounds i16, ptr %1886, i64 1
  br label %1932

1920:                                             ; preds = %1882
  %1921 = getelementptr inbounds i16, ptr %1887, i64 1
  br label %1932

1922:                                             ; preds = %1882
  %1923 = getelementptr inbounds i16, ptr %1890, i64 1
  br label %1932

1924:                                             ; preds = %1882
  %1925 = getelementptr inbounds i16, ptr %1889, i64 1
  br label %1932

1926:                                             ; preds = %1882
  %1927 = getelementptr inbounds i16, ptr %1892, i64 1
  br label %1932

1928:                                             ; preds = %1882
  %1929 = getelementptr inbounds i16, ptr %1888, i64 1
  br label %1932

1930:                                             ; preds = %1882
  %1931 = getelementptr inbounds i16, ptr %1891, i64 1
  br label %1932

1932:                                             ; preds = %1914, %1916, %1918, %1920, %1922, %1924, %1926, %1928, %1930
  %1933 = phi ptr [ %1891, %1930 ], [ %1888, %1928 ], [ %1892, %1926 ], [ %1889, %1924 ], [ %1890, %1922 ], [ %1887, %1920 ], [ %1886, %1918 ], [ %1885, %1916 ], [ %1884, %1914 ]
  %1934 = phi ptr [ %1892, %1930 ], [ %1892, %1928 ], [ %1927, %1926 ], [ %1892, %1924 ], [ %1892, %1922 ], [ %1892, %1920 ], [ %1892, %1918 ], [ %1892, %1916 ], [ %1892, %1914 ]
  %1935 = phi ptr [ %1931, %1930 ], [ %1891, %1928 ], [ %1891, %1926 ], [ %1891, %1924 ], [ %1891, %1922 ], [ %1891, %1920 ], [ %1891, %1918 ], [ %1891, %1916 ], [ %1891, %1914 ]
  %1936 = phi ptr [ %1890, %1930 ], [ %1890, %1928 ], [ %1890, %1926 ], [ %1890, %1924 ], [ %1923, %1922 ], [ %1890, %1920 ], [ %1890, %1918 ], [ %1890, %1916 ], [ %1890, %1914 ]
  %1937 = phi ptr [ %1889, %1930 ], [ %1889, %1928 ], [ %1889, %1926 ], [ %1925, %1924 ], [ %1889, %1922 ], [ %1889, %1920 ], [ %1889, %1918 ], [ %1889, %1916 ], [ %1889, %1914 ]
  %1938 = phi ptr [ %1888, %1930 ], [ %1929, %1928 ], [ %1888, %1926 ], [ %1888, %1924 ], [ %1888, %1922 ], [ %1888, %1920 ], [ %1888, %1918 ], [ %1888, %1916 ], [ %1888, %1914 ]
  %1939 = phi ptr [ %1887, %1930 ], [ %1887, %1928 ], [ %1887, %1926 ], [ %1887, %1924 ], [ %1887, %1922 ], [ %1921, %1920 ], [ %1887, %1918 ], [ %1887, %1916 ], [ %1887, %1914 ]
  %1940 = phi ptr [ %1886, %1930 ], [ %1886, %1928 ], [ %1886, %1926 ], [ %1886, %1924 ], [ %1886, %1922 ], [ %1886, %1920 ], [ %1919, %1918 ], [ %1886, %1916 ], [ %1886, %1914 ]
  %1941 = phi ptr [ %1885, %1930 ], [ %1885, %1928 ], [ %1885, %1926 ], [ %1885, %1924 ], [ %1885, %1922 ], [ %1885, %1920 ], [ %1885, %1918 ], [ %1917, %1916 ], [ %1885, %1914 ]
  %1942 = phi ptr [ %1884, %1930 ], [ %1884, %1928 ], [ %1884, %1926 ], [ %1884, %1924 ], [ %1884, %1922 ], [ %1884, %1920 ], [ %1884, %1918 ], [ %1884, %1916 ], [ %1915, %1914 ]
  store i16 %1894, ptr %1933, align 2, !tbaa !44
  br label %1943

1943:                                             ; preds = %1932, %1882
  %1944 = phi ptr [ %1892, %1882 ], [ %1934, %1932 ]
  %1945 = phi ptr [ %1891, %1882 ], [ %1935, %1932 ]
  %1946 = phi ptr [ %1890, %1882 ], [ %1936, %1932 ]
  %1947 = phi ptr [ %1889, %1882 ], [ %1937, %1932 ]
  %1948 = phi ptr [ %1888, %1882 ], [ %1938, %1932 ]
  %1949 = phi ptr [ %1887, %1882 ], [ %1939, %1932 ]
  %1950 = phi ptr [ %1886, %1882 ], [ %1940, %1932 ]
  %1951 = phi ptr [ %1885, %1882 ], [ %1941, %1932 ]
  %1952 = phi ptr [ %1884, %1882 ], [ %1942, %1932 ]
  %1953 = add nuw nsw i64 %1883, 1
  %1954 = icmp eq i64 %1953, %1881
  br i1 %1954, label %1955, label %1882

1955:                                             ; preds = %1943, %1871
  %1956 = phi ptr [ %809, %1871 ], [ %1944, %1943 ]
  %1957 = phi ptr [ %763, %1871 ], [ %1945, %1943 ]
  %1958 = phi ptr [ %1872, %1871 ], [ %1946, %1943 ]
  %1959 = phi ptr [ %671, %1871 ], [ %1947, %1943 ]
  %1960 = phi ptr [ %625, %1871 ], [ %1948, %1943 ]
  %1961 = phi ptr [ %1873, %1871 ], [ %1949, %1943 ]
  %1962 = phi ptr [ %441, %1871 ], [ %1950, %1943 ]
  %1963 = phi ptr [ %395, %1871 ], [ %1951, %1943 ]
  %1964 = phi ptr [ %1874, %1871 ], [ %1952, %1943 ]
  %1965 = ptrtoint ptr %1964 to i64
  %1966 = sub i64 %1965, %1766
  %1967 = lshr exact i64 %1966, 1
  %1968 = trunc i64 %1967 to i32
  %1969 = icmp eq i32 %1968, 0
  %1970 = shl i64 %1966, 31
  br i1 %1969, label %1976, label %1971

1971:                                             ; preds = %1955
  %1972 = add i64 %1970, -4294967296
  %1973 = ashr i64 %1972, 32
  %1974 = getelementptr inbounds i16, ptr %1542, i64 %1973
  %1975 = load i16, ptr %1974, align 2, !tbaa !44
  br label %1976

1976:                                             ; preds = %1955, %1971
  %1977 = phi i16 [ %1975, %1971 ], [ -1, %1955 ]
  %1978 = ashr i64 %1970, 32
  %1979 = getelementptr inbounds i16, ptr %1542, i64 %1978
  store i16 %1977, ptr %1979, align 2, !tbaa !44
  %1980 = trunc i64 %1967 to i16
  %1981 = add i16 %1980, 1
  %1982 = sext i32 %1761 to i64
  %1983 = getelementptr inbounds i16, ptr %1538, i64 %1982
  store i16 %1981, ptr %1983, align 2, !tbaa !44
  %1984 = add i32 %1761, 2
  %1985 = add i32 %1984, %1968
  store i32 %1985, ptr %17, align 8, !tbaa !17
  %1986 = ptrtoint ptr %1963 to i64
  %1987 = sub i64 %1986, %1007
  %1988 = lshr exact i64 %1987, 1
  %1989 = trunc i64 %1988 to i32
  %1990 = add nsw i32 %1985, 1
  %1991 = sext i32 %1990 to i64
  %1992 = getelementptr i16, ptr %1538, i64 %1991
  %1993 = icmp sgt i32 %1989, 0
  br i1 %1993, label %1994, label %2084

1994:                                             ; preds = %1976
  %1995 = and i64 %1988, 4294967295
  %1996 = icmp ult i64 %1995, 8
  br i1 %1996, label %2040, label %1997

1997:                                             ; preds = %1994
  %1998 = shl nsw i64 %1991, 1
  %1999 = add i64 %1998, %1539
  %2000 = sub i64 %1999, %1007
  %2001 = icmp ult i64 %2000, 128
  br i1 %2001, label %2040, label %2002

2002:                                             ; preds = %1997
  %2003 = icmp ult i64 %1995, 64
  br i1 %2003, label %2027, label %2004

2004:                                             ; preds = %2002
  %2005 = and i64 %1988, 63
  %2006 = sub nsw i64 %1995, %2005
  br label %2007

2007:                                             ; preds = %2007, %2004
  %2008 = phi i64 [ 0, %2004 ], [ %2021, %2007 ]
  %2009 = getelementptr inbounds i16, ptr %395, i64 %2008
  %2010 = load <16 x i16>, ptr %2009, align 2, !tbaa !44
  %2011 = getelementptr inbounds i16, ptr %2009, i64 16
  %2012 = load <16 x i16>, ptr %2011, align 2, !tbaa !44
  %2013 = getelementptr inbounds i16, ptr %2009, i64 32
  %2014 = load <16 x i16>, ptr %2013, align 2, !tbaa !44
  %2015 = getelementptr inbounds i16, ptr %2009, i64 48
  %2016 = load <16 x i16>, ptr %2015, align 2, !tbaa !44
  %2017 = getelementptr inbounds i16, ptr %1992, i64 %2008
  store <16 x i16> %2010, ptr %2017, align 2, !tbaa !44
  %2018 = getelementptr inbounds i16, ptr %2017, i64 16
  store <16 x i16> %2012, ptr %2018, align 2, !tbaa !44
  %2019 = getelementptr inbounds i16, ptr %2017, i64 32
  store <16 x i16> %2014, ptr %2019, align 2, !tbaa !44
  %2020 = getelementptr inbounds i16, ptr %2017, i64 48
  store <16 x i16> %2016, ptr %2020, align 2, !tbaa !44
  %2021 = add nuw i64 %2008, 64
  %2022 = icmp eq i64 %2021, %2006
  br i1 %2022, label %2023, label %2007, !llvm.loop !154

2023:                                             ; preds = %2007
  %2024 = icmp eq i64 %2005, 0
  br i1 %2024, label %2078, label %2025

2025:                                             ; preds = %2023
  %2026 = icmp ult i64 %2005, 8
  br i1 %2026, label %2040, label %2027

2027:                                             ; preds = %2002, %2025
  %2028 = phi i64 [ %2006, %2025 ], [ 0, %2002 ]
  %2029 = and i64 %1988, 7
  %2030 = sub nsw i64 %1995, %2029
  br label %2031

2031:                                             ; preds = %2031, %2027
  %2032 = phi i64 [ %2028, %2027 ], [ %2036, %2031 ]
  %2033 = getelementptr inbounds i16, ptr %395, i64 %2032
  %2034 = load <8 x i16>, ptr %2033, align 2, !tbaa !44
  %2035 = getelementptr inbounds i16, ptr %1992, i64 %2032
  store <8 x i16> %2034, ptr %2035, align 2, !tbaa !44
  %2036 = add nuw i64 %2032, 8
  %2037 = icmp eq i64 %2036, %2030
  br i1 %2037, label %2038, label %2031, !llvm.loop !155

2038:                                             ; preds = %2031
  %2039 = icmp eq i64 %2029, 0
  br i1 %2039, label %2078, label %2040

2040:                                             ; preds = %1997, %1994, %2025, %2038
  %2041 = phi i64 [ 0, %1994 ], [ 0, %1997 ], [ %2006, %2025 ], [ %2030, %2038 ]
  %2042 = sub i64 %1988, %2041
  %2043 = xor i64 %2041, -1
  %2044 = add nsw i64 %1995, %2043
  %2045 = and i64 %2042, 3
  %2046 = icmp eq i64 %2045, 0
  br i1 %2046, label %2056, label %2047

2047:                                             ; preds = %2040, %2047
  %2048 = phi i64 [ %2053, %2047 ], [ %2041, %2040 ]
  %2049 = phi i64 [ %2054, %2047 ], [ 0, %2040 ]
  %2050 = getelementptr inbounds i16, ptr %395, i64 %2048
  %2051 = load i16, ptr %2050, align 2, !tbaa !44
  %2052 = getelementptr inbounds i16, ptr %1992, i64 %2048
  store i16 %2051, ptr %2052, align 2, !tbaa !44
  %2053 = add nuw nsw i64 %2048, 1
  %2054 = add i64 %2049, 1
  %2055 = icmp eq i64 %2054, %2045
  br i1 %2055, label %2056, label %2047, !llvm.loop !156

2056:                                             ; preds = %2047, %2040
  %2057 = phi i64 [ %2041, %2040 ], [ %2053, %2047 ]
  %2058 = icmp ult i64 %2044, 3
  br i1 %2058, label %2078, label %2059

2059:                                             ; preds = %2056, %2059
  %2060 = phi i64 [ %2076, %2059 ], [ %2057, %2056 ]
  %2061 = getelementptr inbounds i16, ptr %395, i64 %2060
  %2062 = load i16, ptr %2061, align 2, !tbaa !44
  %2063 = getelementptr inbounds i16, ptr %1992, i64 %2060
  store i16 %2062, ptr %2063, align 2, !tbaa !44
  %2064 = add nuw nsw i64 %2060, 1
  %2065 = getelementptr inbounds i16, ptr %395, i64 %2064
  %2066 = load i16, ptr %2065, align 2, !tbaa !44
  %2067 = getelementptr inbounds i16, ptr %1992, i64 %2064
  store i16 %2066, ptr %2067, align 2, !tbaa !44
  %2068 = add nuw nsw i64 %2060, 2
  %2069 = getelementptr inbounds i16, ptr %395, i64 %2068
  %2070 = load i16, ptr %2069, align 2, !tbaa !44
  %2071 = getelementptr inbounds i16, ptr %1992, i64 %2068
  store i16 %2070, ptr %2071, align 2, !tbaa !44
  %2072 = add nuw nsw i64 %2060, 3
  %2073 = getelementptr inbounds i16, ptr %395, i64 %2072
  %2074 = load i16, ptr %2073, align 2, !tbaa !44
  %2075 = getelementptr inbounds i16, ptr %1992, i64 %2072
  store i16 %2074, ptr %2075, align 2, !tbaa !44
  %2076 = add nuw nsw i64 %2060, 4
  %2077 = icmp eq i64 %2076, %1995
  br i1 %2077, label %2078, label %2059, !llvm.loop !157

2078:                                             ; preds = %2056, %2059, %2023, %2038
  %2079 = shl i64 %1987, 31
  %2080 = add i64 %2079, -4294967296
  %2081 = ashr i64 %2080, 32
  %2082 = getelementptr inbounds i16, ptr %1992, i64 %2081
  %2083 = load i16, ptr %2082, align 2, !tbaa !44
  br label %2084

2084:                                             ; preds = %1976, %2078
  %2085 = phi i64 [ %1988, %2078 ], [ 0, %1976 ]
  %2086 = phi i16 [ %2083, %2078 ], [ -1, %1976 ]
  %2087 = and i64 %2085, 4294967295
  %2088 = getelementptr inbounds i16, ptr %1992, i64 %2087
  store i16 %2086, ptr %2088, align 2, !tbaa !44
  %2089 = trunc i64 %1988 to i16
  %2090 = add i16 %2089, 1
  %2091 = sext i32 %1985 to i64
  %2092 = getelementptr inbounds i16, ptr %1538, i64 %2091
  store i16 %2090, ptr %2092, align 2, !tbaa !44
  %2093 = add nsw i32 %1989, 2
  %2094 = add nsw i32 %2093, %1985
  %2095 = ptrtoint ptr %1962 to i64
  %2096 = sub i64 %2095, %1008
  %2097 = lshr exact i64 %2096, 1
  %2098 = trunc i64 %2097 to i32
  %2099 = add nsw i32 %2094, 1
  %2100 = sext i32 %2099 to i64
  %2101 = getelementptr i16, ptr %1538, i64 %2100
  %2102 = icmp sgt i32 %2098, 0
  br i1 %2102, label %2103, label %2193

2103:                                             ; preds = %2084
  %2104 = and i64 %2097, 4294967295
  %2105 = icmp ult i64 %2104, 8
  br i1 %2105, label %2149, label %2106

2106:                                             ; preds = %2103
  %2107 = shl nsw i64 %2100, 1
  %2108 = add i64 %2107, %1539
  %2109 = sub i64 %2108, %1008
  %2110 = icmp ult i64 %2109, 128
  br i1 %2110, label %2149, label %2111

2111:                                             ; preds = %2106
  %2112 = icmp ult i64 %2104, 64
  br i1 %2112, label %2136, label %2113

2113:                                             ; preds = %2111
  %2114 = and i64 %2097, 63
  %2115 = sub nsw i64 %2104, %2114
  br label %2116

2116:                                             ; preds = %2116, %2113
  %2117 = phi i64 [ 0, %2113 ], [ %2130, %2116 ]
  %2118 = getelementptr inbounds i16, ptr %441, i64 %2117
  %2119 = load <16 x i16>, ptr %2118, align 2, !tbaa !44
  %2120 = getelementptr inbounds i16, ptr %2118, i64 16
  %2121 = load <16 x i16>, ptr %2120, align 2, !tbaa !44
  %2122 = getelementptr inbounds i16, ptr %2118, i64 32
  %2123 = load <16 x i16>, ptr %2122, align 2, !tbaa !44
  %2124 = getelementptr inbounds i16, ptr %2118, i64 48
  %2125 = load <16 x i16>, ptr %2124, align 2, !tbaa !44
  %2126 = getelementptr inbounds i16, ptr %2101, i64 %2117
  store <16 x i16> %2119, ptr %2126, align 2, !tbaa !44
  %2127 = getelementptr inbounds i16, ptr %2126, i64 16
  store <16 x i16> %2121, ptr %2127, align 2, !tbaa !44
  %2128 = getelementptr inbounds i16, ptr %2126, i64 32
  store <16 x i16> %2123, ptr %2128, align 2, !tbaa !44
  %2129 = getelementptr inbounds i16, ptr %2126, i64 48
  store <16 x i16> %2125, ptr %2129, align 2, !tbaa !44
  %2130 = add nuw i64 %2117, 64
  %2131 = icmp eq i64 %2130, %2115
  br i1 %2131, label %2132, label %2116, !llvm.loop !158

2132:                                             ; preds = %2116
  %2133 = icmp eq i64 %2114, 0
  br i1 %2133, label %2187, label %2134

2134:                                             ; preds = %2132
  %2135 = icmp ult i64 %2114, 8
  br i1 %2135, label %2149, label %2136

2136:                                             ; preds = %2111, %2134
  %2137 = phi i64 [ %2115, %2134 ], [ 0, %2111 ]
  %2138 = and i64 %2097, 7
  %2139 = sub nsw i64 %2104, %2138
  br label %2140

2140:                                             ; preds = %2140, %2136
  %2141 = phi i64 [ %2137, %2136 ], [ %2145, %2140 ]
  %2142 = getelementptr inbounds i16, ptr %441, i64 %2141
  %2143 = load <8 x i16>, ptr %2142, align 2, !tbaa !44
  %2144 = getelementptr inbounds i16, ptr %2101, i64 %2141
  store <8 x i16> %2143, ptr %2144, align 2, !tbaa !44
  %2145 = add nuw i64 %2141, 8
  %2146 = icmp eq i64 %2145, %2139
  br i1 %2146, label %2147, label %2140, !llvm.loop !159

2147:                                             ; preds = %2140
  %2148 = icmp eq i64 %2138, 0
  br i1 %2148, label %2187, label %2149

2149:                                             ; preds = %2106, %2103, %2134, %2147
  %2150 = phi i64 [ 0, %2103 ], [ 0, %2106 ], [ %2115, %2134 ], [ %2139, %2147 ]
  %2151 = sub i64 %2097, %2150
  %2152 = xor i64 %2150, -1
  %2153 = add nsw i64 %2104, %2152
  %2154 = and i64 %2151, 3
  %2155 = icmp eq i64 %2154, 0
  br i1 %2155, label %2165, label %2156

2156:                                             ; preds = %2149, %2156
  %2157 = phi i64 [ %2162, %2156 ], [ %2150, %2149 ]
  %2158 = phi i64 [ %2163, %2156 ], [ 0, %2149 ]
  %2159 = getelementptr inbounds i16, ptr %441, i64 %2157
  %2160 = load i16, ptr %2159, align 2, !tbaa !44
  %2161 = getelementptr inbounds i16, ptr %2101, i64 %2157
  store i16 %2160, ptr %2161, align 2, !tbaa !44
  %2162 = add nuw nsw i64 %2157, 1
  %2163 = add i64 %2158, 1
  %2164 = icmp eq i64 %2163, %2154
  br i1 %2164, label %2165, label %2156, !llvm.loop !160

2165:                                             ; preds = %2156, %2149
  %2166 = phi i64 [ %2150, %2149 ], [ %2162, %2156 ]
  %2167 = icmp ult i64 %2153, 3
  br i1 %2167, label %2187, label %2168

2168:                                             ; preds = %2165, %2168
  %2169 = phi i64 [ %2185, %2168 ], [ %2166, %2165 ]
  %2170 = getelementptr inbounds i16, ptr %441, i64 %2169
  %2171 = load i16, ptr %2170, align 2, !tbaa !44
  %2172 = getelementptr inbounds i16, ptr %2101, i64 %2169
  store i16 %2171, ptr %2172, align 2, !tbaa !44
  %2173 = add nuw nsw i64 %2169, 1
  %2174 = getelementptr inbounds i16, ptr %441, i64 %2173
  %2175 = load i16, ptr %2174, align 2, !tbaa !44
  %2176 = getelementptr inbounds i16, ptr %2101, i64 %2173
  store i16 %2175, ptr %2176, align 2, !tbaa !44
  %2177 = add nuw nsw i64 %2169, 2
  %2178 = getelementptr inbounds i16, ptr %441, i64 %2177
  %2179 = load i16, ptr %2178, align 2, !tbaa !44
  %2180 = getelementptr inbounds i16, ptr %2101, i64 %2177
  store i16 %2179, ptr %2180, align 2, !tbaa !44
  %2181 = add nuw nsw i64 %2169, 3
  %2182 = getelementptr inbounds i16, ptr %441, i64 %2181
  %2183 = load i16, ptr %2182, align 2, !tbaa !44
  %2184 = getelementptr inbounds i16, ptr %2101, i64 %2181
  store i16 %2183, ptr %2184, align 2, !tbaa !44
  %2185 = add nuw nsw i64 %2169, 4
  %2186 = icmp eq i64 %2185, %2104
  br i1 %2186, label %2187, label %2168, !llvm.loop !161

2187:                                             ; preds = %2165, %2168, %2132, %2147
  %2188 = shl i64 %2096, 31
  %2189 = add i64 %2188, -4294967296
  %2190 = ashr i64 %2189, 32
  %2191 = getelementptr inbounds i16, ptr %2101, i64 %2190
  %2192 = load i16, ptr %2191, align 2, !tbaa !44
  br label %2193

2193:                                             ; preds = %2084, %2187
  %2194 = phi i64 [ %2097, %2187 ], [ 0, %2084 ]
  %2195 = phi i16 [ %2192, %2187 ], [ -1, %2084 ]
  %2196 = and i64 %2194, 4294967295
  %2197 = getelementptr inbounds i16, ptr %2101, i64 %2196
  store i16 %2195, ptr %2197, align 2, !tbaa !44
  %2198 = trunc i64 %2097 to i16
  %2199 = add i16 %2198, 1
  %2200 = sext i32 %2094 to i64
  %2201 = getelementptr inbounds i16, ptr %1538, i64 %2200
  store i16 %2199, ptr %2201, align 2, !tbaa !44
  %2202 = add nsw i32 %2098, 2
  %2203 = add nsw i32 %2202, %2094
  %2204 = ptrtoint ptr %1961 to i64
  %2205 = sub i64 %2204, %1009
  %2206 = lshr exact i64 %2205, 1
  %2207 = trunc i64 %2206 to i32
  %2208 = add nsw i32 %2203, 1
  %2209 = sext i32 %2208 to i64
  %2210 = getelementptr i16, ptr %1538, i64 %2209
  %2211 = icmp sgt i32 %2207, 0
  br i1 %2211, label %2212, label %2302

2212:                                             ; preds = %2193
  %2213 = and i64 %2206, 4294967295
  %2214 = icmp ult i64 %2213, 8
  br i1 %2214, label %2258, label %2215

2215:                                             ; preds = %2212
  %2216 = shl nsw i64 %2209, 1
  %2217 = add i64 %2216, %1539
  %2218 = sub i64 %2217, %1009
  %2219 = icmp ult i64 %2218, 128
  br i1 %2219, label %2258, label %2220

2220:                                             ; preds = %2215
  %2221 = icmp ult i64 %2213, 64
  br i1 %2221, label %2245, label %2222

2222:                                             ; preds = %2220
  %2223 = and i64 %2206, 63
  %2224 = sub nsw i64 %2213, %2223
  br label %2225

2225:                                             ; preds = %2225, %2222
  %2226 = phi i64 [ 0, %2222 ], [ %2239, %2225 ]
  %2227 = getelementptr inbounds i16, ptr %579, i64 %2226
  %2228 = load <16 x i16>, ptr %2227, align 2, !tbaa !44
  %2229 = getelementptr inbounds i16, ptr %2227, i64 16
  %2230 = load <16 x i16>, ptr %2229, align 2, !tbaa !44
  %2231 = getelementptr inbounds i16, ptr %2227, i64 32
  %2232 = load <16 x i16>, ptr %2231, align 2, !tbaa !44
  %2233 = getelementptr inbounds i16, ptr %2227, i64 48
  %2234 = load <16 x i16>, ptr %2233, align 2, !tbaa !44
  %2235 = getelementptr inbounds i16, ptr %2210, i64 %2226
  store <16 x i16> %2228, ptr %2235, align 2, !tbaa !44
  %2236 = getelementptr inbounds i16, ptr %2235, i64 16
  store <16 x i16> %2230, ptr %2236, align 2, !tbaa !44
  %2237 = getelementptr inbounds i16, ptr %2235, i64 32
  store <16 x i16> %2232, ptr %2237, align 2, !tbaa !44
  %2238 = getelementptr inbounds i16, ptr %2235, i64 48
  store <16 x i16> %2234, ptr %2238, align 2, !tbaa !44
  %2239 = add nuw i64 %2226, 64
  %2240 = icmp eq i64 %2239, %2224
  br i1 %2240, label %2241, label %2225, !llvm.loop !162

2241:                                             ; preds = %2225
  %2242 = icmp eq i64 %2223, 0
  br i1 %2242, label %2296, label %2243

2243:                                             ; preds = %2241
  %2244 = icmp ult i64 %2223, 8
  br i1 %2244, label %2258, label %2245

2245:                                             ; preds = %2220, %2243
  %2246 = phi i64 [ %2224, %2243 ], [ 0, %2220 ]
  %2247 = and i64 %2206, 7
  %2248 = sub nsw i64 %2213, %2247
  br label %2249

2249:                                             ; preds = %2249, %2245
  %2250 = phi i64 [ %2246, %2245 ], [ %2254, %2249 ]
  %2251 = getelementptr inbounds i16, ptr %579, i64 %2250
  %2252 = load <8 x i16>, ptr %2251, align 2, !tbaa !44
  %2253 = getelementptr inbounds i16, ptr %2210, i64 %2250
  store <8 x i16> %2252, ptr %2253, align 2, !tbaa !44
  %2254 = add nuw i64 %2250, 8
  %2255 = icmp eq i64 %2254, %2248
  br i1 %2255, label %2256, label %2249, !llvm.loop !163

2256:                                             ; preds = %2249
  %2257 = icmp eq i64 %2247, 0
  br i1 %2257, label %2296, label %2258

2258:                                             ; preds = %2215, %2212, %2243, %2256
  %2259 = phi i64 [ 0, %2212 ], [ 0, %2215 ], [ %2224, %2243 ], [ %2248, %2256 ]
  %2260 = sub i64 %2206, %2259
  %2261 = xor i64 %2259, -1
  %2262 = add nsw i64 %2213, %2261
  %2263 = and i64 %2260, 3
  %2264 = icmp eq i64 %2263, 0
  br i1 %2264, label %2274, label %2265

2265:                                             ; preds = %2258, %2265
  %2266 = phi i64 [ %2271, %2265 ], [ %2259, %2258 ]
  %2267 = phi i64 [ %2272, %2265 ], [ 0, %2258 ]
  %2268 = getelementptr inbounds i16, ptr %579, i64 %2266
  %2269 = load i16, ptr %2268, align 2, !tbaa !44
  %2270 = getelementptr inbounds i16, ptr %2210, i64 %2266
  store i16 %2269, ptr %2270, align 2, !tbaa !44
  %2271 = add nuw nsw i64 %2266, 1
  %2272 = add i64 %2267, 1
  %2273 = icmp eq i64 %2272, %2263
  br i1 %2273, label %2274, label %2265, !llvm.loop !164

2274:                                             ; preds = %2265, %2258
  %2275 = phi i64 [ %2259, %2258 ], [ %2271, %2265 ]
  %2276 = icmp ult i64 %2262, 3
  br i1 %2276, label %2296, label %2277

2277:                                             ; preds = %2274, %2277
  %2278 = phi i64 [ %2294, %2277 ], [ %2275, %2274 ]
  %2279 = getelementptr inbounds i16, ptr %579, i64 %2278
  %2280 = load i16, ptr %2279, align 2, !tbaa !44
  %2281 = getelementptr inbounds i16, ptr %2210, i64 %2278
  store i16 %2280, ptr %2281, align 2, !tbaa !44
  %2282 = add nuw nsw i64 %2278, 1
  %2283 = getelementptr inbounds i16, ptr %579, i64 %2282
  %2284 = load i16, ptr %2283, align 2, !tbaa !44
  %2285 = getelementptr inbounds i16, ptr %2210, i64 %2282
  store i16 %2284, ptr %2285, align 2, !tbaa !44
  %2286 = add nuw nsw i64 %2278, 2
  %2287 = getelementptr inbounds i16, ptr %579, i64 %2286
  %2288 = load i16, ptr %2287, align 2, !tbaa !44
  %2289 = getelementptr inbounds i16, ptr %2210, i64 %2286
  store i16 %2288, ptr %2289, align 2, !tbaa !44
  %2290 = add nuw nsw i64 %2278, 3
  %2291 = getelementptr inbounds i16, ptr %579, i64 %2290
  %2292 = load i16, ptr %2291, align 2, !tbaa !44
  %2293 = getelementptr inbounds i16, ptr %2210, i64 %2290
  store i16 %2292, ptr %2293, align 2, !tbaa !44
  %2294 = add nuw nsw i64 %2278, 4
  %2295 = icmp eq i64 %2294, %2213
  br i1 %2295, label %2296, label %2277, !llvm.loop !165

2296:                                             ; preds = %2274, %2277, %2241, %2256
  %2297 = shl i64 %2205, 31
  %2298 = add i64 %2297, -4294967296
  %2299 = ashr i64 %2298, 32
  %2300 = getelementptr inbounds i16, ptr %2210, i64 %2299
  %2301 = load i16, ptr %2300, align 2, !tbaa !44
  br label %2302

2302:                                             ; preds = %2193, %2296
  %2303 = phi i64 [ %2206, %2296 ], [ 0, %2193 ]
  %2304 = phi i16 [ %2301, %2296 ], [ -1, %2193 ]
  %2305 = and i64 %2303, 4294967295
  %2306 = getelementptr inbounds i16, ptr %2210, i64 %2305
  store i16 %2304, ptr %2306, align 2, !tbaa !44
  %2307 = trunc i64 %2206 to i16
  %2308 = add i16 %2307, 1
  %2309 = sext i32 %2203 to i64
  %2310 = getelementptr inbounds i16, ptr %1538, i64 %2309
  store i16 %2308, ptr %2310, align 2, !tbaa !44
  %2311 = add nsw i32 %2207, 2
  %2312 = add nsw i32 %2311, %2203
  %2313 = ptrtoint ptr %1960 to i64
  %2314 = sub i64 %2313, %1010
  %2315 = lshr exact i64 %2314, 1
  %2316 = trunc i64 %2315 to i32
  %2317 = add nsw i32 %2312, 1
  %2318 = sext i32 %2317 to i64
  %2319 = getelementptr i16, ptr %1538, i64 %2318
  %2320 = icmp sgt i32 %2316, 0
  br i1 %2320, label %2321, label %2411

2321:                                             ; preds = %2302
  %2322 = and i64 %2315, 4294967295
  %2323 = icmp ult i64 %2322, 8
  br i1 %2323, label %2367, label %2324

2324:                                             ; preds = %2321
  %2325 = shl nsw i64 %2318, 1
  %2326 = add i64 %2325, %1539
  %2327 = sub i64 %2326, %1010
  %2328 = icmp ult i64 %2327, 128
  br i1 %2328, label %2367, label %2329

2329:                                             ; preds = %2324
  %2330 = icmp ult i64 %2322, 64
  br i1 %2330, label %2354, label %2331

2331:                                             ; preds = %2329
  %2332 = and i64 %2315, 63
  %2333 = sub nsw i64 %2322, %2332
  br label %2334

2334:                                             ; preds = %2334, %2331
  %2335 = phi i64 [ 0, %2331 ], [ %2348, %2334 ]
  %2336 = getelementptr inbounds i16, ptr %625, i64 %2335
  %2337 = load <16 x i16>, ptr %2336, align 2, !tbaa !44
  %2338 = getelementptr inbounds i16, ptr %2336, i64 16
  %2339 = load <16 x i16>, ptr %2338, align 2, !tbaa !44
  %2340 = getelementptr inbounds i16, ptr %2336, i64 32
  %2341 = load <16 x i16>, ptr %2340, align 2, !tbaa !44
  %2342 = getelementptr inbounds i16, ptr %2336, i64 48
  %2343 = load <16 x i16>, ptr %2342, align 2, !tbaa !44
  %2344 = getelementptr inbounds i16, ptr %2319, i64 %2335
  store <16 x i16> %2337, ptr %2344, align 2, !tbaa !44
  %2345 = getelementptr inbounds i16, ptr %2344, i64 16
  store <16 x i16> %2339, ptr %2345, align 2, !tbaa !44
  %2346 = getelementptr inbounds i16, ptr %2344, i64 32
  store <16 x i16> %2341, ptr %2346, align 2, !tbaa !44
  %2347 = getelementptr inbounds i16, ptr %2344, i64 48
  store <16 x i16> %2343, ptr %2347, align 2, !tbaa !44
  %2348 = add nuw i64 %2335, 64
  %2349 = icmp eq i64 %2348, %2333
  br i1 %2349, label %2350, label %2334, !llvm.loop !166

2350:                                             ; preds = %2334
  %2351 = icmp eq i64 %2332, 0
  br i1 %2351, label %2405, label %2352

2352:                                             ; preds = %2350
  %2353 = icmp ult i64 %2332, 8
  br i1 %2353, label %2367, label %2354

2354:                                             ; preds = %2329, %2352
  %2355 = phi i64 [ %2333, %2352 ], [ 0, %2329 ]
  %2356 = and i64 %2315, 7
  %2357 = sub nsw i64 %2322, %2356
  br label %2358

2358:                                             ; preds = %2358, %2354
  %2359 = phi i64 [ %2355, %2354 ], [ %2363, %2358 ]
  %2360 = getelementptr inbounds i16, ptr %625, i64 %2359
  %2361 = load <8 x i16>, ptr %2360, align 2, !tbaa !44
  %2362 = getelementptr inbounds i16, ptr %2319, i64 %2359
  store <8 x i16> %2361, ptr %2362, align 2, !tbaa !44
  %2363 = add nuw i64 %2359, 8
  %2364 = icmp eq i64 %2363, %2357
  br i1 %2364, label %2365, label %2358, !llvm.loop !167

2365:                                             ; preds = %2358
  %2366 = icmp eq i64 %2356, 0
  br i1 %2366, label %2405, label %2367

2367:                                             ; preds = %2324, %2321, %2352, %2365
  %2368 = phi i64 [ 0, %2321 ], [ 0, %2324 ], [ %2333, %2352 ], [ %2357, %2365 ]
  %2369 = sub i64 %2315, %2368
  %2370 = xor i64 %2368, -1
  %2371 = add nsw i64 %2322, %2370
  %2372 = and i64 %2369, 3
  %2373 = icmp eq i64 %2372, 0
  br i1 %2373, label %2383, label %2374

2374:                                             ; preds = %2367, %2374
  %2375 = phi i64 [ %2380, %2374 ], [ %2368, %2367 ]
  %2376 = phi i64 [ %2381, %2374 ], [ 0, %2367 ]
  %2377 = getelementptr inbounds i16, ptr %625, i64 %2375
  %2378 = load i16, ptr %2377, align 2, !tbaa !44
  %2379 = getelementptr inbounds i16, ptr %2319, i64 %2375
  store i16 %2378, ptr %2379, align 2, !tbaa !44
  %2380 = add nuw nsw i64 %2375, 1
  %2381 = add i64 %2376, 1
  %2382 = icmp eq i64 %2381, %2372
  br i1 %2382, label %2383, label %2374, !llvm.loop !168

2383:                                             ; preds = %2374, %2367
  %2384 = phi i64 [ %2368, %2367 ], [ %2380, %2374 ]
  %2385 = icmp ult i64 %2371, 3
  br i1 %2385, label %2405, label %2386

2386:                                             ; preds = %2383, %2386
  %2387 = phi i64 [ %2403, %2386 ], [ %2384, %2383 ]
  %2388 = getelementptr inbounds i16, ptr %625, i64 %2387
  %2389 = load i16, ptr %2388, align 2, !tbaa !44
  %2390 = getelementptr inbounds i16, ptr %2319, i64 %2387
  store i16 %2389, ptr %2390, align 2, !tbaa !44
  %2391 = add nuw nsw i64 %2387, 1
  %2392 = getelementptr inbounds i16, ptr %625, i64 %2391
  %2393 = load i16, ptr %2392, align 2, !tbaa !44
  %2394 = getelementptr inbounds i16, ptr %2319, i64 %2391
  store i16 %2393, ptr %2394, align 2, !tbaa !44
  %2395 = add nuw nsw i64 %2387, 2
  %2396 = getelementptr inbounds i16, ptr %625, i64 %2395
  %2397 = load i16, ptr %2396, align 2, !tbaa !44
  %2398 = getelementptr inbounds i16, ptr %2319, i64 %2395
  store i16 %2397, ptr %2398, align 2, !tbaa !44
  %2399 = add nuw nsw i64 %2387, 3
  %2400 = getelementptr inbounds i16, ptr %625, i64 %2399
  %2401 = load i16, ptr %2400, align 2, !tbaa !44
  %2402 = getelementptr inbounds i16, ptr %2319, i64 %2399
  store i16 %2401, ptr %2402, align 2, !tbaa !44
  %2403 = add nuw nsw i64 %2387, 4
  %2404 = icmp eq i64 %2403, %2322
  br i1 %2404, label %2405, label %2386, !llvm.loop !169

2405:                                             ; preds = %2383, %2386, %2350, %2365
  %2406 = shl i64 %2314, 31
  %2407 = add i64 %2406, -4294967296
  %2408 = ashr i64 %2407, 32
  %2409 = getelementptr inbounds i16, ptr %2319, i64 %2408
  %2410 = load i16, ptr %2409, align 2, !tbaa !44
  br label %2411

2411:                                             ; preds = %2302, %2405
  %2412 = phi i64 [ %2315, %2405 ], [ 0, %2302 ]
  %2413 = phi i16 [ %2410, %2405 ], [ -1, %2302 ]
  %2414 = and i64 %2412, 4294967295
  %2415 = getelementptr inbounds i16, ptr %2319, i64 %2414
  store i16 %2413, ptr %2415, align 2, !tbaa !44
  %2416 = trunc i64 %2315 to i16
  %2417 = add i16 %2416, 1
  %2418 = sext i32 %2312 to i64
  %2419 = getelementptr inbounds i16, ptr %1538, i64 %2418
  store i16 %2417, ptr %2419, align 2, !tbaa !44
  %2420 = add nsw i32 %2316, 2
  %2421 = add nsw i32 %2420, %2312
  store i32 %2421, ptr %17, align 8, !tbaa !17
  %2422 = ptrtoint ptr %1959 to i64
  %2423 = sub i64 %2422, %1011
  %2424 = lshr exact i64 %2423, 1
  %2425 = trunc i64 %2424 to i32
  %2426 = add nsw i32 %2421, 1
  %2427 = sext i32 %2426 to i64
  %2428 = getelementptr i16, ptr %1538, i64 %2427
  %2429 = icmp sgt i32 %2425, 0
  br i1 %2429, label %2430, label %2520

2430:                                             ; preds = %2411
  %2431 = and i64 %2424, 4294967295
  %2432 = icmp ult i64 %2431, 8
  br i1 %2432, label %2476, label %2433

2433:                                             ; preds = %2430
  %2434 = shl nsw i64 %2427, 1
  %2435 = add i64 %2434, %1539
  %2436 = sub i64 %2435, %1011
  %2437 = icmp ult i64 %2436, 128
  br i1 %2437, label %2476, label %2438

2438:                                             ; preds = %2433
  %2439 = icmp ult i64 %2431, 64
  br i1 %2439, label %2463, label %2440

2440:                                             ; preds = %2438
  %2441 = and i64 %2424, 63
  %2442 = sub nsw i64 %2431, %2441
  br label %2443

2443:                                             ; preds = %2443, %2440
  %2444 = phi i64 [ 0, %2440 ], [ %2457, %2443 ]
  %2445 = getelementptr inbounds i16, ptr %671, i64 %2444
  %2446 = load <16 x i16>, ptr %2445, align 2, !tbaa !44
  %2447 = getelementptr inbounds i16, ptr %2445, i64 16
  %2448 = load <16 x i16>, ptr %2447, align 2, !tbaa !44
  %2449 = getelementptr inbounds i16, ptr %2445, i64 32
  %2450 = load <16 x i16>, ptr %2449, align 2, !tbaa !44
  %2451 = getelementptr inbounds i16, ptr %2445, i64 48
  %2452 = load <16 x i16>, ptr %2451, align 2, !tbaa !44
  %2453 = getelementptr inbounds i16, ptr %2428, i64 %2444
  store <16 x i16> %2446, ptr %2453, align 2, !tbaa !44
  %2454 = getelementptr inbounds i16, ptr %2453, i64 16
  store <16 x i16> %2448, ptr %2454, align 2, !tbaa !44
  %2455 = getelementptr inbounds i16, ptr %2453, i64 32
  store <16 x i16> %2450, ptr %2455, align 2, !tbaa !44
  %2456 = getelementptr inbounds i16, ptr %2453, i64 48
  store <16 x i16> %2452, ptr %2456, align 2, !tbaa !44
  %2457 = add nuw i64 %2444, 64
  %2458 = icmp eq i64 %2457, %2442
  br i1 %2458, label %2459, label %2443, !llvm.loop !170

2459:                                             ; preds = %2443
  %2460 = icmp eq i64 %2441, 0
  br i1 %2460, label %2514, label %2461

2461:                                             ; preds = %2459
  %2462 = icmp ult i64 %2441, 8
  br i1 %2462, label %2476, label %2463

2463:                                             ; preds = %2438, %2461
  %2464 = phi i64 [ %2442, %2461 ], [ 0, %2438 ]
  %2465 = and i64 %2424, 7
  %2466 = sub nsw i64 %2431, %2465
  br label %2467

2467:                                             ; preds = %2467, %2463
  %2468 = phi i64 [ %2464, %2463 ], [ %2472, %2467 ]
  %2469 = getelementptr inbounds i16, ptr %671, i64 %2468
  %2470 = load <8 x i16>, ptr %2469, align 2, !tbaa !44
  %2471 = getelementptr inbounds i16, ptr %2428, i64 %2468
  store <8 x i16> %2470, ptr %2471, align 2, !tbaa !44
  %2472 = add nuw i64 %2468, 8
  %2473 = icmp eq i64 %2472, %2466
  br i1 %2473, label %2474, label %2467, !llvm.loop !171

2474:                                             ; preds = %2467
  %2475 = icmp eq i64 %2465, 0
  br i1 %2475, label %2514, label %2476

2476:                                             ; preds = %2433, %2430, %2461, %2474
  %2477 = phi i64 [ 0, %2430 ], [ 0, %2433 ], [ %2442, %2461 ], [ %2466, %2474 ]
  %2478 = sub i64 %2424, %2477
  %2479 = xor i64 %2477, -1
  %2480 = add nsw i64 %2431, %2479
  %2481 = and i64 %2478, 3
  %2482 = icmp eq i64 %2481, 0
  br i1 %2482, label %2492, label %2483

2483:                                             ; preds = %2476, %2483
  %2484 = phi i64 [ %2489, %2483 ], [ %2477, %2476 ]
  %2485 = phi i64 [ %2490, %2483 ], [ 0, %2476 ]
  %2486 = getelementptr inbounds i16, ptr %671, i64 %2484
  %2487 = load i16, ptr %2486, align 2, !tbaa !44
  %2488 = getelementptr inbounds i16, ptr %2428, i64 %2484
  store i16 %2487, ptr %2488, align 2, !tbaa !44
  %2489 = add nuw nsw i64 %2484, 1
  %2490 = add i64 %2485, 1
  %2491 = icmp eq i64 %2490, %2481
  br i1 %2491, label %2492, label %2483, !llvm.loop !172

2492:                                             ; preds = %2483, %2476
  %2493 = phi i64 [ %2477, %2476 ], [ %2489, %2483 ]
  %2494 = icmp ult i64 %2480, 3
  br i1 %2494, label %2514, label %2495

2495:                                             ; preds = %2492, %2495
  %2496 = phi i64 [ %2512, %2495 ], [ %2493, %2492 ]
  %2497 = getelementptr inbounds i16, ptr %671, i64 %2496
  %2498 = load i16, ptr %2497, align 2, !tbaa !44
  %2499 = getelementptr inbounds i16, ptr %2428, i64 %2496
  store i16 %2498, ptr %2499, align 2, !tbaa !44
  %2500 = add nuw nsw i64 %2496, 1
  %2501 = getelementptr inbounds i16, ptr %671, i64 %2500
  %2502 = load i16, ptr %2501, align 2, !tbaa !44
  %2503 = getelementptr inbounds i16, ptr %2428, i64 %2500
  store i16 %2502, ptr %2503, align 2, !tbaa !44
  %2504 = add nuw nsw i64 %2496, 2
  %2505 = getelementptr inbounds i16, ptr %671, i64 %2504
  %2506 = load i16, ptr %2505, align 2, !tbaa !44
  %2507 = getelementptr inbounds i16, ptr %2428, i64 %2504
  store i16 %2506, ptr %2507, align 2, !tbaa !44
  %2508 = add nuw nsw i64 %2496, 3
  %2509 = getelementptr inbounds i16, ptr %671, i64 %2508
  %2510 = load i16, ptr %2509, align 2, !tbaa !44
  %2511 = getelementptr inbounds i16, ptr %2428, i64 %2508
  store i16 %2510, ptr %2511, align 2, !tbaa !44
  %2512 = add nuw nsw i64 %2496, 4
  %2513 = icmp eq i64 %2512, %2431
  br i1 %2513, label %2514, label %2495, !llvm.loop !173

2514:                                             ; preds = %2492, %2495, %2459, %2474
  %2515 = shl i64 %2423, 31
  %2516 = add i64 %2515, -4294967296
  %2517 = ashr i64 %2516, 32
  %2518 = getelementptr inbounds i16, ptr %2428, i64 %2517
  %2519 = load i16, ptr %2518, align 2, !tbaa !44
  br label %2520

2520:                                             ; preds = %2411, %2514
  %2521 = phi i64 [ %2424, %2514 ], [ 0, %2411 ]
  %2522 = phi i16 [ %2519, %2514 ], [ -1, %2411 ]
  %2523 = and i64 %2521, 4294967295
  %2524 = getelementptr inbounds i16, ptr %2428, i64 %2523
  store i16 %2522, ptr %2524, align 2, !tbaa !44
  %2525 = trunc i64 %2424 to i16
  %2526 = add i16 %2525, 1
  %2527 = sext i32 %2421 to i64
  %2528 = getelementptr inbounds i16, ptr %1538, i64 %2527
  store i16 %2526, ptr %2528, align 2, !tbaa !44
  %2529 = add nsw i32 %2425, 2
  %2530 = add nsw i32 %2529, %2421
  %2531 = ptrtoint ptr %1958 to i64
  %2532 = sub i64 %2531, %1012
  %2533 = lshr exact i64 %2532, 1
  %2534 = trunc i64 %2533 to i32
  %2535 = add nsw i32 %2530, 1
  %2536 = sext i32 %2535 to i64
  %2537 = getelementptr i16, ptr %1538, i64 %2536
  %2538 = icmp sgt i32 %2534, 0
  br i1 %2538, label %2539, label %2629

2539:                                             ; preds = %2520
  %2540 = and i64 %2533, 4294967295
  %2541 = icmp ult i64 %2540, 8
  br i1 %2541, label %2585, label %2542

2542:                                             ; preds = %2539
  %2543 = shl nsw i64 %2536, 1
  %2544 = add i64 %2543, %1539
  %2545 = sub i64 %2544, %1012
  %2546 = icmp ult i64 %2545, 128
  br i1 %2546, label %2585, label %2547

2547:                                             ; preds = %2542
  %2548 = icmp ult i64 %2540, 64
  br i1 %2548, label %2572, label %2549

2549:                                             ; preds = %2547
  %2550 = and i64 %2533, 63
  %2551 = sub nsw i64 %2540, %2550
  br label %2552

2552:                                             ; preds = %2552, %2549
  %2553 = phi i64 [ 0, %2549 ], [ %2566, %2552 ]
  %2554 = getelementptr inbounds i16, ptr %717, i64 %2553
  %2555 = load <16 x i16>, ptr %2554, align 2, !tbaa !44
  %2556 = getelementptr inbounds i16, ptr %2554, i64 16
  %2557 = load <16 x i16>, ptr %2556, align 2, !tbaa !44
  %2558 = getelementptr inbounds i16, ptr %2554, i64 32
  %2559 = load <16 x i16>, ptr %2558, align 2, !tbaa !44
  %2560 = getelementptr inbounds i16, ptr %2554, i64 48
  %2561 = load <16 x i16>, ptr %2560, align 2, !tbaa !44
  %2562 = getelementptr inbounds i16, ptr %2537, i64 %2553
  store <16 x i16> %2555, ptr %2562, align 2, !tbaa !44
  %2563 = getelementptr inbounds i16, ptr %2562, i64 16
  store <16 x i16> %2557, ptr %2563, align 2, !tbaa !44
  %2564 = getelementptr inbounds i16, ptr %2562, i64 32
  store <16 x i16> %2559, ptr %2564, align 2, !tbaa !44
  %2565 = getelementptr inbounds i16, ptr %2562, i64 48
  store <16 x i16> %2561, ptr %2565, align 2, !tbaa !44
  %2566 = add nuw i64 %2553, 64
  %2567 = icmp eq i64 %2566, %2551
  br i1 %2567, label %2568, label %2552, !llvm.loop !174

2568:                                             ; preds = %2552
  %2569 = icmp eq i64 %2550, 0
  br i1 %2569, label %2623, label %2570

2570:                                             ; preds = %2568
  %2571 = icmp ult i64 %2550, 8
  br i1 %2571, label %2585, label %2572

2572:                                             ; preds = %2547, %2570
  %2573 = phi i64 [ %2551, %2570 ], [ 0, %2547 ]
  %2574 = and i64 %2533, 7
  %2575 = sub nsw i64 %2540, %2574
  br label %2576

2576:                                             ; preds = %2576, %2572
  %2577 = phi i64 [ %2573, %2572 ], [ %2581, %2576 ]
  %2578 = getelementptr inbounds i16, ptr %717, i64 %2577
  %2579 = load <8 x i16>, ptr %2578, align 2, !tbaa !44
  %2580 = getelementptr inbounds i16, ptr %2537, i64 %2577
  store <8 x i16> %2579, ptr %2580, align 2, !tbaa !44
  %2581 = add nuw i64 %2577, 8
  %2582 = icmp eq i64 %2581, %2575
  br i1 %2582, label %2583, label %2576, !llvm.loop !175

2583:                                             ; preds = %2576
  %2584 = icmp eq i64 %2574, 0
  br i1 %2584, label %2623, label %2585

2585:                                             ; preds = %2542, %2539, %2570, %2583
  %2586 = phi i64 [ 0, %2539 ], [ 0, %2542 ], [ %2551, %2570 ], [ %2575, %2583 ]
  %2587 = sub i64 %2533, %2586
  %2588 = xor i64 %2586, -1
  %2589 = add nsw i64 %2540, %2588
  %2590 = and i64 %2587, 3
  %2591 = icmp eq i64 %2590, 0
  br i1 %2591, label %2601, label %2592

2592:                                             ; preds = %2585, %2592
  %2593 = phi i64 [ %2598, %2592 ], [ %2586, %2585 ]
  %2594 = phi i64 [ %2599, %2592 ], [ 0, %2585 ]
  %2595 = getelementptr inbounds i16, ptr %717, i64 %2593
  %2596 = load i16, ptr %2595, align 2, !tbaa !44
  %2597 = getelementptr inbounds i16, ptr %2537, i64 %2593
  store i16 %2596, ptr %2597, align 2, !tbaa !44
  %2598 = add nuw nsw i64 %2593, 1
  %2599 = add i64 %2594, 1
  %2600 = icmp eq i64 %2599, %2590
  br i1 %2600, label %2601, label %2592, !llvm.loop !176

2601:                                             ; preds = %2592, %2585
  %2602 = phi i64 [ %2586, %2585 ], [ %2598, %2592 ]
  %2603 = icmp ult i64 %2589, 3
  br i1 %2603, label %2623, label %2604

2604:                                             ; preds = %2601, %2604
  %2605 = phi i64 [ %2621, %2604 ], [ %2602, %2601 ]
  %2606 = getelementptr inbounds i16, ptr %717, i64 %2605
  %2607 = load i16, ptr %2606, align 2, !tbaa !44
  %2608 = getelementptr inbounds i16, ptr %2537, i64 %2605
  store i16 %2607, ptr %2608, align 2, !tbaa !44
  %2609 = add nuw nsw i64 %2605, 1
  %2610 = getelementptr inbounds i16, ptr %717, i64 %2609
  %2611 = load i16, ptr %2610, align 2, !tbaa !44
  %2612 = getelementptr inbounds i16, ptr %2537, i64 %2609
  store i16 %2611, ptr %2612, align 2, !tbaa !44
  %2613 = add nuw nsw i64 %2605, 2
  %2614 = getelementptr inbounds i16, ptr %717, i64 %2613
  %2615 = load i16, ptr %2614, align 2, !tbaa !44
  %2616 = getelementptr inbounds i16, ptr %2537, i64 %2613
  store i16 %2615, ptr %2616, align 2, !tbaa !44
  %2617 = add nuw nsw i64 %2605, 3
  %2618 = getelementptr inbounds i16, ptr %717, i64 %2617
  %2619 = load i16, ptr %2618, align 2, !tbaa !44
  %2620 = getelementptr inbounds i16, ptr %2537, i64 %2617
  store i16 %2619, ptr %2620, align 2, !tbaa !44
  %2621 = add nuw nsw i64 %2605, 4
  %2622 = icmp eq i64 %2621, %2540
  br i1 %2622, label %2623, label %2604, !llvm.loop !177

2623:                                             ; preds = %2601, %2604, %2568, %2583
  %2624 = shl i64 %2532, 31
  %2625 = add i64 %2624, -4294967296
  %2626 = ashr i64 %2625, 32
  %2627 = getelementptr inbounds i16, ptr %2537, i64 %2626
  %2628 = load i16, ptr %2627, align 2, !tbaa !44
  br label %2629

2629:                                             ; preds = %2520, %2623
  %2630 = phi i64 [ %2533, %2623 ], [ 0, %2520 ]
  %2631 = phi i16 [ %2628, %2623 ], [ -1, %2520 ]
  %2632 = and i64 %2630, 4294967295
  %2633 = getelementptr inbounds i16, ptr %2537, i64 %2632
  store i16 %2631, ptr %2633, align 2, !tbaa !44
  %2634 = trunc i64 %2533 to i16
  %2635 = add i16 %2634, 1
  %2636 = sext i32 %2530 to i64
  %2637 = getelementptr inbounds i16, ptr %1538, i64 %2636
  store i16 %2635, ptr %2637, align 2, !tbaa !44
  %2638 = add nsw i32 %2534, 2
  %2639 = add nsw i32 %2638, %2530
  %2640 = ptrtoint ptr %1957 to i64
  %2641 = sub i64 %2640, %1013
  %2642 = lshr exact i64 %2641, 1
  %2643 = trunc i64 %2642 to i32
  %2644 = add nsw i32 %2639, 1
  %2645 = sext i32 %2644 to i64
  %2646 = getelementptr i16, ptr %1538, i64 %2645
  %2647 = icmp sgt i32 %2643, 0
  br i1 %2647, label %2648, label %2738

2648:                                             ; preds = %2629
  %2649 = and i64 %2642, 4294967295
  %2650 = icmp ult i64 %2649, 8
  br i1 %2650, label %2694, label %2651

2651:                                             ; preds = %2648
  %2652 = shl nsw i64 %2645, 1
  %2653 = add i64 %2652, %1539
  %2654 = sub i64 %2653, %1013
  %2655 = icmp ult i64 %2654, 128
  br i1 %2655, label %2694, label %2656

2656:                                             ; preds = %2651
  %2657 = icmp ult i64 %2649, 64
  br i1 %2657, label %2681, label %2658

2658:                                             ; preds = %2656
  %2659 = and i64 %2642, 63
  %2660 = sub nsw i64 %2649, %2659
  br label %2661

2661:                                             ; preds = %2661, %2658
  %2662 = phi i64 [ 0, %2658 ], [ %2675, %2661 ]
  %2663 = getelementptr inbounds i16, ptr %763, i64 %2662
  %2664 = load <16 x i16>, ptr %2663, align 2, !tbaa !44
  %2665 = getelementptr inbounds i16, ptr %2663, i64 16
  %2666 = load <16 x i16>, ptr %2665, align 2, !tbaa !44
  %2667 = getelementptr inbounds i16, ptr %2663, i64 32
  %2668 = load <16 x i16>, ptr %2667, align 2, !tbaa !44
  %2669 = getelementptr inbounds i16, ptr %2663, i64 48
  %2670 = load <16 x i16>, ptr %2669, align 2, !tbaa !44
  %2671 = getelementptr inbounds i16, ptr %2646, i64 %2662
  store <16 x i16> %2664, ptr %2671, align 2, !tbaa !44
  %2672 = getelementptr inbounds i16, ptr %2671, i64 16
  store <16 x i16> %2666, ptr %2672, align 2, !tbaa !44
  %2673 = getelementptr inbounds i16, ptr %2671, i64 32
  store <16 x i16> %2668, ptr %2673, align 2, !tbaa !44
  %2674 = getelementptr inbounds i16, ptr %2671, i64 48
  store <16 x i16> %2670, ptr %2674, align 2, !tbaa !44
  %2675 = add nuw i64 %2662, 64
  %2676 = icmp eq i64 %2675, %2660
  br i1 %2676, label %2677, label %2661, !llvm.loop !178

2677:                                             ; preds = %2661
  %2678 = icmp eq i64 %2659, 0
  br i1 %2678, label %2732, label %2679

2679:                                             ; preds = %2677
  %2680 = icmp ult i64 %2659, 8
  br i1 %2680, label %2694, label %2681

2681:                                             ; preds = %2656, %2679
  %2682 = phi i64 [ %2660, %2679 ], [ 0, %2656 ]
  %2683 = and i64 %2642, 7
  %2684 = sub nsw i64 %2649, %2683
  br label %2685

2685:                                             ; preds = %2685, %2681
  %2686 = phi i64 [ %2682, %2681 ], [ %2690, %2685 ]
  %2687 = getelementptr inbounds i16, ptr %763, i64 %2686
  %2688 = load <8 x i16>, ptr %2687, align 2, !tbaa !44
  %2689 = getelementptr inbounds i16, ptr %2646, i64 %2686
  store <8 x i16> %2688, ptr %2689, align 2, !tbaa !44
  %2690 = add nuw i64 %2686, 8
  %2691 = icmp eq i64 %2690, %2684
  br i1 %2691, label %2692, label %2685, !llvm.loop !179

2692:                                             ; preds = %2685
  %2693 = icmp eq i64 %2683, 0
  br i1 %2693, label %2732, label %2694

2694:                                             ; preds = %2651, %2648, %2679, %2692
  %2695 = phi i64 [ 0, %2648 ], [ 0, %2651 ], [ %2660, %2679 ], [ %2684, %2692 ]
  %2696 = sub i64 %2642, %2695
  %2697 = xor i64 %2695, -1
  %2698 = add nsw i64 %2649, %2697
  %2699 = and i64 %2696, 3
  %2700 = icmp eq i64 %2699, 0
  br i1 %2700, label %2710, label %2701

2701:                                             ; preds = %2694, %2701
  %2702 = phi i64 [ %2707, %2701 ], [ %2695, %2694 ]
  %2703 = phi i64 [ %2708, %2701 ], [ 0, %2694 ]
  %2704 = getelementptr inbounds i16, ptr %763, i64 %2702
  %2705 = load i16, ptr %2704, align 2, !tbaa !44
  %2706 = getelementptr inbounds i16, ptr %2646, i64 %2702
  store i16 %2705, ptr %2706, align 2, !tbaa !44
  %2707 = add nuw nsw i64 %2702, 1
  %2708 = add i64 %2703, 1
  %2709 = icmp eq i64 %2708, %2699
  br i1 %2709, label %2710, label %2701, !llvm.loop !180

2710:                                             ; preds = %2701, %2694
  %2711 = phi i64 [ %2695, %2694 ], [ %2707, %2701 ]
  %2712 = icmp ult i64 %2698, 3
  br i1 %2712, label %2732, label %2713

2713:                                             ; preds = %2710, %2713
  %2714 = phi i64 [ %2730, %2713 ], [ %2711, %2710 ]
  %2715 = getelementptr inbounds i16, ptr %763, i64 %2714
  %2716 = load i16, ptr %2715, align 2, !tbaa !44
  %2717 = getelementptr inbounds i16, ptr %2646, i64 %2714
  store i16 %2716, ptr %2717, align 2, !tbaa !44
  %2718 = add nuw nsw i64 %2714, 1
  %2719 = getelementptr inbounds i16, ptr %763, i64 %2718
  %2720 = load i16, ptr %2719, align 2, !tbaa !44
  %2721 = getelementptr inbounds i16, ptr %2646, i64 %2718
  store i16 %2720, ptr %2721, align 2, !tbaa !44
  %2722 = add nuw nsw i64 %2714, 2
  %2723 = getelementptr inbounds i16, ptr %763, i64 %2722
  %2724 = load i16, ptr %2723, align 2, !tbaa !44
  %2725 = getelementptr inbounds i16, ptr %2646, i64 %2722
  store i16 %2724, ptr %2725, align 2, !tbaa !44
  %2726 = add nuw nsw i64 %2714, 3
  %2727 = getelementptr inbounds i16, ptr %763, i64 %2726
  %2728 = load i16, ptr %2727, align 2, !tbaa !44
  %2729 = getelementptr inbounds i16, ptr %2646, i64 %2726
  store i16 %2728, ptr %2729, align 2, !tbaa !44
  %2730 = add nuw nsw i64 %2714, 4
  %2731 = icmp eq i64 %2730, %2649
  br i1 %2731, label %2732, label %2713, !llvm.loop !181

2732:                                             ; preds = %2710, %2713, %2677, %2692
  %2733 = shl i64 %2641, 31
  %2734 = add i64 %2733, -4294967296
  %2735 = ashr i64 %2734, 32
  %2736 = getelementptr inbounds i16, ptr %2646, i64 %2735
  %2737 = load i16, ptr %2736, align 2, !tbaa !44
  br label %2738

2738:                                             ; preds = %2629, %2732
  %2739 = phi i64 [ %2642, %2732 ], [ 0, %2629 ]
  %2740 = phi i16 [ %2737, %2732 ], [ -1, %2629 ]
  %2741 = and i64 %2739, 4294967295
  %2742 = getelementptr inbounds i16, ptr %2646, i64 %2741
  store i16 %2740, ptr %2742, align 2, !tbaa !44
  %2743 = trunc i64 %2642 to i16
  %2744 = add i16 %2743, 1
  %2745 = sext i32 %2639 to i64
  %2746 = getelementptr inbounds i16, ptr %1538, i64 %2745
  store i16 %2744, ptr %2746, align 2, !tbaa !44
  %2747 = add nsw i32 %2643, 2
  %2748 = add nsw i32 %2747, %2639
  %2749 = ptrtoint ptr %1956 to i64
  %2750 = sub i64 %2749, %1014
  %2751 = lshr exact i64 %2750, 1
  %2752 = trunc i64 %2751 to i32
  %2753 = add nsw i32 %2748, 1
  %2754 = sext i32 %2753 to i64
  %2755 = getelementptr i16, ptr %1538, i64 %2754
  %2756 = icmp sgt i32 %2752, 0
  br i1 %2756, label %2757, label %2847

2757:                                             ; preds = %2738
  %2758 = and i64 %2751, 4294967295
  %2759 = icmp ult i64 %2758, 8
  br i1 %2759, label %2803, label %2760

2760:                                             ; preds = %2757
  %2761 = shl nsw i64 %2754, 1
  %2762 = add i64 %2761, %1539
  %2763 = sub i64 %2762, %1014
  %2764 = icmp ult i64 %2763, 128
  br i1 %2764, label %2803, label %2765

2765:                                             ; preds = %2760
  %2766 = icmp ult i64 %2758, 64
  br i1 %2766, label %2790, label %2767

2767:                                             ; preds = %2765
  %2768 = and i64 %2751, 63
  %2769 = sub nsw i64 %2758, %2768
  br label %2770

2770:                                             ; preds = %2770, %2767
  %2771 = phi i64 [ 0, %2767 ], [ %2784, %2770 ]
  %2772 = getelementptr inbounds i16, ptr %809, i64 %2771
  %2773 = load <16 x i16>, ptr %2772, align 2, !tbaa !44
  %2774 = getelementptr inbounds i16, ptr %2772, i64 16
  %2775 = load <16 x i16>, ptr %2774, align 2, !tbaa !44
  %2776 = getelementptr inbounds i16, ptr %2772, i64 32
  %2777 = load <16 x i16>, ptr %2776, align 2, !tbaa !44
  %2778 = getelementptr inbounds i16, ptr %2772, i64 48
  %2779 = load <16 x i16>, ptr %2778, align 2, !tbaa !44
  %2780 = getelementptr inbounds i16, ptr %2755, i64 %2771
  store <16 x i16> %2773, ptr %2780, align 2, !tbaa !44
  %2781 = getelementptr inbounds i16, ptr %2780, i64 16
  store <16 x i16> %2775, ptr %2781, align 2, !tbaa !44
  %2782 = getelementptr inbounds i16, ptr %2780, i64 32
  store <16 x i16> %2777, ptr %2782, align 2, !tbaa !44
  %2783 = getelementptr inbounds i16, ptr %2780, i64 48
  store <16 x i16> %2779, ptr %2783, align 2, !tbaa !44
  %2784 = add nuw i64 %2771, 64
  %2785 = icmp eq i64 %2784, %2769
  br i1 %2785, label %2786, label %2770, !llvm.loop !182

2786:                                             ; preds = %2770
  %2787 = icmp eq i64 %2768, 0
  br i1 %2787, label %2841, label %2788

2788:                                             ; preds = %2786
  %2789 = icmp ult i64 %2768, 8
  br i1 %2789, label %2803, label %2790

2790:                                             ; preds = %2765, %2788
  %2791 = phi i64 [ %2769, %2788 ], [ 0, %2765 ]
  %2792 = and i64 %2751, 7
  %2793 = sub nsw i64 %2758, %2792
  br label %2794

2794:                                             ; preds = %2794, %2790
  %2795 = phi i64 [ %2791, %2790 ], [ %2799, %2794 ]
  %2796 = getelementptr inbounds i16, ptr %809, i64 %2795
  %2797 = load <8 x i16>, ptr %2796, align 2, !tbaa !44
  %2798 = getelementptr inbounds i16, ptr %2755, i64 %2795
  store <8 x i16> %2797, ptr %2798, align 2, !tbaa !44
  %2799 = add nuw i64 %2795, 8
  %2800 = icmp eq i64 %2799, %2793
  br i1 %2800, label %2801, label %2794, !llvm.loop !183

2801:                                             ; preds = %2794
  %2802 = icmp eq i64 %2792, 0
  br i1 %2802, label %2841, label %2803

2803:                                             ; preds = %2760, %2757, %2788, %2801
  %2804 = phi i64 [ 0, %2757 ], [ 0, %2760 ], [ %2769, %2788 ], [ %2793, %2801 ]
  %2805 = sub i64 %2751, %2804
  %2806 = xor i64 %2804, -1
  %2807 = add nsw i64 %2758, %2806
  %2808 = and i64 %2805, 3
  %2809 = icmp eq i64 %2808, 0
  br i1 %2809, label %2819, label %2810

2810:                                             ; preds = %2803, %2810
  %2811 = phi i64 [ %2816, %2810 ], [ %2804, %2803 ]
  %2812 = phi i64 [ %2817, %2810 ], [ 0, %2803 ]
  %2813 = getelementptr inbounds i16, ptr %809, i64 %2811
  %2814 = load i16, ptr %2813, align 2, !tbaa !44
  %2815 = getelementptr inbounds i16, ptr %2755, i64 %2811
  store i16 %2814, ptr %2815, align 2, !tbaa !44
  %2816 = add nuw nsw i64 %2811, 1
  %2817 = add i64 %2812, 1
  %2818 = icmp eq i64 %2817, %2808
  br i1 %2818, label %2819, label %2810, !llvm.loop !184

2819:                                             ; preds = %2810, %2803
  %2820 = phi i64 [ %2804, %2803 ], [ %2816, %2810 ]
  %2821 = icmp ult i64 %2807, 3
  br i1 %2821, label %2841, label %2822

2822:                                             ; preds = %2819, %2822
  %2823 = phi i64 [ %2839, %2822 ], [ %2820, %2819 ]
  %2824 = getelementptr inbounds i16, ptr %809, i64 %2823
  %2825 = load i16, ptr %2824, align 2, !tbaa !44
  %2826 = getelementptr inbounds i16, ptr %2755, i64 %2823
  store i16 %2825, ptr %2826, align 2, !tbaa !44
  %2827 = add nuw nsw i64 %2823, 1
  %2828 = getelementptr inbounds i16, ptr %809, i64 %2827
  %2829 = load i16, ptr %2828, align 2, !tbaa !44
  %2830 = getelementptr inbounds i16, ptr %2755, i64 %2827
  store i16 %2829, ptr %2830, align 2, !tbaa !44
  %2831 = add nuw nsw i64 %2823, 2
  %2832 = getelementptr inbounds i16, ptr %809, i64 %2831
  %2833 = load i16, ptr %2832, align 2, !tbaa !44
  %2834 = getelementptr inbounds i16, ptr %2755, i64 %2831
  store i16 %2833, ptr %2834, align 2, !tbaa !44
  %2835 = add nuw nsw i64 %2823, 3
  %2836 = getelementptr inbounds i16, ptr %809, i64 %2835
  %2837 = load i16, ptr %2836, align 2, !tbaa !44
  %2838 = getelementptr inbounds i16, ptr %2755, i64 %2835
  store i16 %2837, ptr %2838, align 2, !tbaa !44
  %2839 = add nuw nsw i64 %2823, 4
  %2840 = icmp eq i64 %2839, %2758
  br i1 %2840, label %2841, label %2822, !llvm.loop !185

2841:                                             ; preds = %2819, %2822, %2786, %2801
  %2842 = shl i64 %2750, 31
  %2843 = add i64 %2842, -4294967296
  %2844 = ashr i64 %2843, 32
  %2845 = getelementptr inbounds i16, ptr %2755, i64 %2844
  %2846 = load i16, ptr %2845, align 2, !tbaa !44
  br label %2847

2847:                                             ; preds = %2738, %2841
  %2848 = phi i64 [ %2751, %2841 ], [ 0, %2738 ]
  %2849 = phi i16 [ %2846, %2841 ], [ -1, %2738 ]
  %2850 = and i64 %2848, 4294967295
  %2851 = getelementptr inbounds i16, ptr %2755, i64 %2850
  store i16 %2849, ptr %2851, align 2, !tbaa !44
  %2852 = trunc i64 %2751 to i16
  %2853 = add i16 %2852, 1
  %2854 = sext i32 %2748 to i64
  %2855 = getelementptr inbounds i16, ptr %1538, i64 %2854
  store i16 %2853, ptr %2855, align 2, !tbaa !44
  %2856 = add i32 %2752, 3
  %2857 = add i32 %2856, %2748
  %2858 = select i1 %208, i32 1, i32 %2857
  store i32 %2858, ptr %17, align 8, !tbaa !17
  br label %2943

2859:                                             ; preds = %1057
  %2860 = load ptr, ptr %12, align 8, !tbaa !46
  %2861 = load i32, ptr %17, align 8, !tbaa !17
  %2862 = add i32 %2861, 1
  %2863 = sext i32 %2862 to i64
  %2864 = getelementptr inbounds i16, ptr %2860, i64 %2863
  %2865 = sext i32 %2861 to i64
  %2866 = getelementptr inbounds i16, ptr %2860, i64 %2865
  %2867 = load i16, ptr %2866, align 2, !tbaa !44
  %2868 = zext i16 %2867 to i32
  %2869 = add i32 %2862, %2868
  %2870 = add nsw i32 %2868, -1
  %2871 = add i32 %2869, 1
  %2872 = sext i32 %2871 to i64
  %2873 = getelementptr inbounds i16, ptr %2860, i64 %2872
  %2874 = sext i32 %2869 to i64
  %2875 = getelementptr inbounds i16, ptr %2860, i64 %2874
  %2876 = load i16, ptr %2875, align 2, !tbaa !44
  %2877 = zext i16 %2876 to i32
  %2878 = add i32 %2871, %2877
  %2879 = add nsw i32 %2877, -1
  %2880 = add i32 %2878, 1
  %2881 = sext i32 %2880 to i64
  %2882 = getelementptr inbounds i16, ptr %2860, i64 %2881
  %2883 = sext i32 %2878 to i64
  %2884 = getelementptr inbounds i16, ptr %2860, i64 %2883
  %2885 = load i16, ptr %2884, align 2, !tbaa !44
  %2886 = zext i16 %2885 to i32
  %2887 = add i32 %2880, %2886
  %2888 = add nsw i32 %2886, -1
  %2889 = add i32 %2887, 1
  %2890 = sext i32 %2889 to i64
  %2891 = getelementptr inbounds i16, ptr %2860, i64 %2890
  %2892 = sext i32 %2887 to i64
  %2893 = getelementptr inbounds i16, ptr %2860, i64 %2892
  %2894 = load i16, ptr %2893, align 2, !tbaa !44
  %2895 = zext i16 %2894 to i32
  %2896 = add i32 %2889, %2895
  %2897 = add nsw i32 %2895, -1
  %2898 = add i32 %2896, 1
  %2899 = sext i32 %2898 to i64
  %2900 = getelementptr inbounds i16, ptr %2860, i64 %2899
  %2901 = sext i32 %2896 to i64
  %2902 = getelementptr inbounds i16, ptr %2860, i64 %2901
  %2903 = load i16, ptr %2902, align 2, !tbaa !44
  %2904 = zext i16 %2903 to i32
  %2905 = add i32 %2898, %2904
  %2906 = add nsw i32 %2904, -1
  %2907 = add i32 %2905, 1
  %2908 = sext i32 %2907 to i64
  %2909 = getelementptr inbounds i16, ptr %2860, i64 %2908
  %2910 = sext i32 %2905 to i64
  %2911 = getelementptr inbounds i16, ptr %2860, i64 %2910
  %2912 = load i16, ptr %2911, align 2, !tbaa !44
  %2913 = zext i16 %2912 to i32
  %2914 = add i32 %2907, %2913
  %2915 = add nsw i32 %2913, -1
  %2916 = add i32 %2914, 1
  %2917 = sext i32 %2916 to i64
  %2918 = getelementptr inbounds i16, ptr %2860, i64 %2917
  %2919 = sext i32 %2914 to i64
  %2920 = getelementptr inbounds i16, ptr %2860, i64 %2919
  %2921 = load i16, ptr %2920, align 2, !tbaa !44
  %2922 = zext i16 %2921 to i32
  %2923 = add i32 %2916, %2922
  %2924 = add nsw i32 %2922, -1
  %2925 = add i32 %2923, 1
  %2926 = sext i32 %2925 to i64
  %2927 = getelementptr inbounds i16, ptr %2860, i64 %2926
  %2928 = sext i32 %2923 to i64
  %2929 = getelementptr inbounds i16, ptr %2860, i64 %2928
  %2930 = load i16, ptr %2929, align 2, !tbaa !44
  %2931 = zext i16 %2930 to i32
  %2932 = add i32 %2925, %2931
  %2933 = add nsw i32 %2931, -1
  %2934 = add i32 %2932, 1
  %2935 = sext i32 %2934 to i64
  %2936 = getelementptr inbounds i16, ptr %2860, i64 %2935
  %2937 = sext i32 %2932 to i64
  %2938 = getelementptr inbounds i16, ptr %2860, i64 %2937
  %2939 = load i16, ptr %2938, align 2, !tbaa !44
  %2940 = zext i16 %2939 to i32
  %2941 = add i32 %2934, %2940
  store i32 %2941, ptr %17, align 8, !tbaa !17
  %2942 = add nsw i32 %2940, -1
  br label %2943

2943:                                             ; preds = %2847, %2859
  %2944 = phi ptr [ %2864, %2859 ], [ %1542, %2847 ]
  %2945 = phi i32 [ %2870, %2859 ], [ %1968, %2847 ]
  %2946 = phi ptr [ %2873, %2859 ], [ %1992, %2847 ]
  %2947 = phi i32 [ %2879, %2859 ], [ %1989, %2847 ]
  %2948 = phi ptr [ %2882, %2859 ], [ %2101, %2847 ]
  %2949 = phi i32 [ %2888, %2859 ], [ %2098, %2847 ]
  %2950 = phi ptr [ %2891, %2859 ], [ %2210, %2847 ]
  %2951 = phi i32 [ %2897, %2859 ], [ %2207, %2847 ]
  %2952 = phi ptr [ %2900, %2859 ], [ %2319, %2847 ]
  %2953 = phi i32 [ %2906, %2859 ], [ %2316, %2847 ]
  %2954 = phi ptr [ %2909, %2859 ], [ %2428, %2847 ]
  %2955 = phi i32 [ %2915, %2859 ], [ %2425, %2847 ]
  %2956 = phi ptr [ %2918, %2859 ], [ %2537, %2847 ]
  %2957 = phi i32 [ %2924, %2859 ], [ %2534, %2847 ]
  %2958 = phi ptr [ %2927, %2859 ], [ %2646, %2847 ]
  %2959 = phi i32 [ %2933, %2859 ], [ %2643, %2847 ]
  %2960 = phi ptr [ %2936, %2859 ], [ %2755, %2847 ]
  %2961 = phi i32 [ %2942, %2859 ], [ %2752, %2847 ]
  %2962 = phi i32 [ %1035, %2859 ], [ %1503, %2847 ]
  %2963 = phi ptr [ %1034, %2859 ], [ %1312, %2847 ]
  %2964 = phi ptr [ %1033, %2859 ], [ %1313, %2847 ]
  %2965 = phi ptr [ %1032, %2859 ], [ %1314, %2847 ]
  %2966 = getelementptr inbounds %struct.CompAtom, ptr %105, i64 %1042, i32 1
  %2967 = load float, ptr %2966, align 8, !tbaa !104
  %2968 = fpext float %2967 to double
  %2969 = fmul double %2968, 0x4074C104816F0069
  %2970 = fmul double %32, %2969
  %2971 = fmul double %28, %2970
  %2972 = getelementptr inbounds %struct.CompAtom, ptr %105, i64 %1042, i32 2
  %2973 = load i16, ptr %2972, align 4, !tbaa !105
  %2974 = sext i16 %2973 to i32
  %2975 = load ptr, ptr %1015, align 8, !tbaa !106
  %2976 = load i32, ptr %1016, align 8, !tbaa !108
  %2977 = shl nsw i32 %2974, 1
  %2978 = mul i32 %2977, %2976
  %2979 = zext i32 %2978 to i64
  %2980 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %2975, i64 %2979
  %2981 = load double, ptr @_ZN20ComputeNonbondedUtil7cutoff2E, align 8, !tbaa !19
  %2982 = extractelement <2 x double> %1060, i64 0
  %2983 = extractelement <2 x double> %1060, i64 1
  %2984 = call noundef i32 @_Z22pairlist_from_pairlistddddPK8CompAtomPKtiPtdPd(double noundef %2981, double noundef %2982, double noundef %2983, double noundef %1063, ptr noundef %107, ptr noundef nonnull %2944, i32 noundef %2945, ptr noundef %160, double noundef %35, ptr noundef %206)
  %2985 = icmp sgt i32 %2984, 0
  %2986 = shufflevector <2 x double> %1038, <2 x double> %1037, <2 x i32> <i32 0, i32 2>
  %2987 = shufflevector <2 x double> %1038, <2 x double> %1037, <2 x i32> <i32 1, i32 3>
  br i1 %2985, label %2988, label %3122

2988:                                             ; preds = %2943
  %2989 = load ptr, ptr @_ZN20ComputeNonbondedUtil8r2_tableE, align 8, !tbaa !23
  %2990 = zext i32 %2984 to i64
  %2991 = shufflevector <2 x double> %1039, <2 x double> %1040, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  br label %2992

2992:                                             ; preds = %2988, %2992
  %2993 = phi i64 [ 0, %2988 ], [ %3117, %2992 ]
  %2994 = phi double [ 0.000000e+00, %2988 ], [ %3113, %2992 ]
  %2995 = phi <2 x double> [ %2986, %2988 ], [ %3089, %2992 ]
  %2996 = phi <2 x double> [ %2987, %2988 ], [ %3068, %2992 ]
  %2997 = phi <2 x double> [ zeroinitializer, %2988 ], [ %3104, %2992 ]
  %2998 = phi <4 x double> [ %2991, %2988 ], [ %3103, %2992 ]
  %2999 = phi <2 x double> [ %1041, %2988 ], [ %3112, %2992 ]
  %3000 = shl nuw nsw i64 %2993, 1
  %3001 = getelementptr inbounds i32, ptr %207, i64 %3000
  %3002 = load i32, ptr %3001, align 4, !tbaa !5
  %3003 = ashr i32 %3002, 14
  %3004 = add nsw i32 %3003, %38
  %3005 = getelementptr inbounds i16, ptr %160, i64 %2993
  %3006 = load i16, ptr %3005, align 2, !tbaa !44
  %3007 = zext i16 %3006 to i64
  %3008 = getelementptr inbounds %struct.CompAtom, ptr %107, i64 %3007
  %3009 = getelementptr inbounds double, ptr %206, i64 %2993
  %3010 = load double, ptr %3009, align 8, !tbaa !19
  %3011 = sext i32 %3004 to i64
  %3012 = getelementptr inbounds double, ptr %2989, i64 %3011
  %3013 = load double, ptr %3012, align 8, !tbaa !19
  %3014 = fsub double %3010, %3013
  %3015 = shl nsw i32 %3004, 4
  %3016 = sext i32 %3015 to i64
  %3017 = getelementptr inbounds double, ptr %31, i64 %3016
  %3018 = getelementptr inbounds %struct.CompAtom, ptr %107, i64 %3007, i32 2
  %3019 = load i16, ptr %3018, align 4, !tbaa !105
  %3020 = sext i16 %3019 to i32
  %3021 = shl nsw i32 %3020, 1
  %3022 = sext i32 %3021 to i64
  %3023 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %2980, i64 %3022
  %3024 = getelementptr inbounds %class.Vector, ptr %990, i64 %3007
  %3025 = getelementptr inbounds %struct.CompAtom, ptr %107, i64 %3007, i32 1
  %3026 = load float, ptr %3025, align 8, !tbaa !104
  %3027 = fpext float %3026 to double
  %3028 = fmul double %2971, %3027
  %3029 = getelementptr inbounds %class.Vector, ptr %3008, i64 0, i32 2
  %3030 = load double, ptr %3029, align 8, !tbaa !49
  %3031 = fsub double %1063, %3030
  %3032 = load double, ptr %3023, align 8, !tbaa !109
  %3033 = fmul double %32, %3032
  %3034 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %2980, i64 %3022, i32 1
  %3035 = load double, ptr %3034, align 8, !tbaa !111
  %3036 = load double, ptr %3017, align 8, !tbaa !19
  %3037 = getelementptr inbounds double, ptr %3017, i64 2
  %3038 = load double, ptr %3037, align 8, !tbaa !19
  %3039 = fmul double %3035, %1017
  %3040 = fmul double %3039, %3038
  %3041 = call double @llvm.fmuladd.f64(double %3033, double %3036, double %3040)
  %3042 = getelementptr inbounds double, ptr %3017, i64 1
  %3043 = load double, ptr %3042, align 8, !tbaa !19
  %3044 = getelementptr inbounds double, ptr %3017, i64 3
  %3045 = load double, ptr %3044, align 8, !tbaa !19
  %3046 = fmul double %3039, %3045
  %3047 = call double @llvm.fmuladd.f64(double %3033, double %3043, double %3046)
  %3048 = getelementptr inbounds double, ptr %3017, i64 4
  %3049 = load double, ptr %3048, align 8, !tbaa !19
  %3050 = getelementptr inbounds double, ptr %3017, i64 6
  %3051 = load double, ptr %3050, align 8, !tbaa !19
  %3052 = fmul double %3039, %3051
  %3053 = call double @llvm.fmuladd.f64(double %3033, double %3049, double %3052)
  %3054 = getelementptr inbounds double, ptr %3017, i64 5
  %3055 = load double, ptr %3054, align 8, !tbaa !19
  %3056 = getelementptr inbounds double, ptr %3017, i64 7
  %3057 = load double, ptr %3056, align 8, !tbaa !19
  %3058 = fmul double %3039, %3057
  %3059 = call double @llvm.fmuladd.f64(double %3033, double %3055, double %3058)
  %3060 = fmul double %3014, %3041
  %3061 = fmul double %3047, 2.500000e-01
  %3062 = call double @llvm.fmuladd.f64(double %3060, double 0x3FC5555555555555, double %3061)
  %3063 = fmul double %3053, 5.000000e-01
  %3064 = call double @llvm.fmuladd.f64(double %3062, double %3014, double %3063)
  %3065 = call double @llvm.fmuladd.f64(double %3064, double %3014, double %3059)
  %3066 = insertelement <2 x double> poison, double %3065, i64 0
  %3067 = shufflevector <2 x double> %3066, <2 x double> poison, <2 x i32> zeroinitializer
  %3068 = fsub <2 x double> %2996, %3067
  %3069 = getelementptr inbounds double, ptr %3017, i64 8
  %3070 = load double, ptr %3069, align 8, !tbaa !19
  %3071 = getelementptr inbounds double, ptr %3017, i64 9
  %3072 = load double, ptr %3071, align 8, !tbaa !19
  %3073 = getelementptr inbounds double, ptr %3017, i64 10
  %3074 = load double, ptr %3073, align 8, !tbaa !19
  %3075 = getelementptr inbounds double, ptr %3017, i64 11
  %3076 = load double, ptr %3075, align 8, !tbaa !19
  %3077 = fmul double %3028, %3070
  %3078 = fmul double %3028, %3072
  %3079 = fmul double %3028, %3074
  %3080 = fmul double %3028, %3076
  %3081 = fmul double %3014, %3077
  %3082 = fmul double %3078, 2.500000e-01
  %3083 = call double @llvm.fmuladd.f64(double %3081, double 0x3FC5555555555555, double %3082)
  %3084 = fmul double %3079, 5.000000e-01
  %3085 = call double @llvm.fmuladd.f64(double %3083, double %3014, double %3084)
  %3086 = call double @llvm.fmuladd.f64(double %3085, double %3014, double %3080)
  %3087 = insertelement <2 x double> poison, double %3086, i64 0
  %3088 = shufflevector <2 x double> %3087, <2 x double> poison, <2 x i32> zeroinitializer
  %3089 = fsub <2 x double> %2995, %3088
  %3090 = fadd double %3041, %3077
  %3091 = fadd double %3047, %3078
  %3092 = fadd double %3053, %3079
  %3093 = call double @llvm.fmuladd.f64(double %3014, double %3090, double %3091)
  %3094 = call double @llvm.fmuladd.f64(double %3093, double %3014, double %3092)
  %3095 = load <2 x double>, ptr %3008, align 8, !tbaa !19
  %3096 = fsub <2 x double> %1060, %3095
  %3097 = insertelement <2 x double> poison, double %3094, i64 0
  %3098 = shufflevector <2 x double> %3097, <2 x double> poison, <2 x i32> zeroinitializer
  %3099 = fmul <2 x double> %3096, %3098
  %3100 = shufflevector <2 x double> %3099, <2 x double> poison, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %3101 = shufflevector <2 x double> %3096, <2 x double> poison, <4 x i32> <i32 0, i32 1, i32 1, i32 poison>
  %3102 = insertelement <4 x double> %3101, double %3031, i64 3
  %3103 = call <4 x double> @llvm.fmuladd.v4f64(<4 x double> %3100, <4 x double> %3102, <4 x double> %2998)
  %3104 = fadd <2 x double> %2997, %3099
  %3105 = load <2 x double>, ptr %3024, align 8, !tbaa !19
  %3106 = fsub <2 x double> %3105, %3099
  store <2 x double> %3106, ptr %3024, align 8, !tbaa !19
  %3107 = fmul double %3031, %3094
  %3108 = insertelement <2 x double> poison, double %3107, i64 0
  %3109 = shufflevector <2 x double> %3108, <2 x double> %3099, <2 x i32> <i32 0, i32 2>
  %3110 = insertelement <2 x double> poison, double %3031, i64 0
  %3111 = shufflevector <2 x double> %3110, <2 x double> poison, <2 x i32> zeroinitializer
  %3112 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %3109, <2 x double> %3111, <2 x double> %2999)
  %3113 = fadd double %2994, %3107
  %3114 = getelementptr inbounds %class.Vector, ptr %990, i64 %3007, i32 2
  %3115 = load double, ptr %3114, align 8, !tbaa !112
  %3116 = fsub double %3115, %3107
  store double %3116, ptr %3114, align 8, !tbaa !112
  %3117 = add nuw nsw i64 %2993, 1
  %3118 = icmp eq i64 %3117, %2990
  br i1 %3118, label %3119, label %2992

3119:                                             ; preds = %2992
  %3120 = shufflevector <4 x double> %3103, <4 x double> poison, <2 x i32> <i32 2, i32 3>
  %3121 = shufflevector <4 x double> %3103, <4 x double> poison, <2 x i32> <i32 0, i32 1>
  br label %3122

3122:                                             ; preds = %3119, %2943
  %3123 = phi double [ 0.000000e+00, %2943 ], [ %3113, %3119 ]
  %3124 = phi <2 x double> [ %1039, %2943 ], [ %3121, %3119 ]
  %3125 = phi <2 x double> [ %1040, %2943 ], [ %3120, %3119 ]
  %3126 = phi <2 x double> [ %1041, %2943 ], [ %3112, %3119 ]
  %3127 = phi <2 x double> [ zeroinitializer, %2943 ], [ %3104, %3119 ]
  %3128 = phi <2 x double> [ %2986, %2943 ], [ %3089, %3119 ]
  %3129 = phi <2 x double> [ %2987, %2943 ], [ %3068, %3119 ]
  %3130 = load double, ptr @_ZN20ComputeNonbondedUtil7cutoff2E, align 8, !tbaa !19
  %3131 = call noundef i32 @_Z22pairlist_from_pairlistddddPK8CompAtomPKtiPtdPd(double noundef %3130, double noundef %2982, double noundef %2983, double noundef %1063, ptr noundef %107, ptr noundef %2948, i32 noundef %2949, ptr noundef %160, double noundef %35, ptr noundef %206)
  %3132 = add nsw i32 %3131, %1030
  %3133 = icmp sgt i32 %3131, 0
  br i1 %3133, label %3134, label %3286

3134:                                             ; preds = %3122
  %3135 = load ptr, ptr @_ZN20ComputeNonbondedUtil8r2_tableE, align 8, !tbaa !23
  %3136 = zext i32 %3131 to i64
  %3137 = shufflevector <2 x double> %1060, <2 x double> poison, <2 x i32> <i32 1, i32 poison>
  %3138 = insertelement <2 x double> %3137, double %1063, i64 1
  br label %3139

3139:                                             ; preds = %3134, %3139
  %3140 = phi i64 [ 0, %3134 ], [ %3284, %3139 ]
  %3141 = phi double [ %3123, %3134 ], [ %3280, %3139 ]
  %3142 = phi <2 x double> [ %3126, %3134 ], [ %3278, %3139 ]
  %3143 = phi <2 x double> [ %3127, %3134 ], [ %3274, %3139 ]
  %3144 = phi <2 x double> [ %3128, %3134 ], [ %3252, %3139 ]
  %3145 = phi <2 x double> [ %3129, %3134 ], [ %3219, %3139 ]
  %3146 = phi <2 x double> [ %3125, %3134 ], [ %3264, %3139 ]
  %3147 = phi <2 x double> [ %3124, %3134 ], [ %3272, %3139 ]
  %3148 = shl nuw nsw i64 %3140, 1
  %3149 = getelementptr inbounds i32, ptr %207, i64 %3148
  %3150 = load i32, ptr %3149, align 4, !tbaa !5
  %3151 = ashr i32 %3150, 14
  %3152 = add nsw i32 %3151, %38
  %3153 = getelementptr inbounds i16, ptr %160, i64 %3140
  %3154 = load i16, ptr %3153, align 2, !tbaa !44
  %3155 = zext i16 %3154 to i64
  %3156 = getelementptr inbounds %struct.CompAtom, ptr %107, i64 %3155
  %3157 = getelementptr inbounds double, ptr %206, i64 %3140
  %3158 = load double, ptr %3157, align 8, !tbaa !19
  %3159 = sext i32 %3152 to i64
  %3160 = getelementptr inbounds double, ptr %3135, i64 %3159
  %3161 = load double, ptr %3160, align 8, !tbaa !19
  %3162 = fsub double %3158, %3161
  %3163 = shl nsw i32 %3152, 4
  %3164 = sext i32 %3163 to i64
  %3165 = getelementptr inbounds double, ptr %31, i64 %3164
  %3166 = getelementptr inbounds %struct.CompAtom, ptr %107, i64 %3155, i32 2
  %3167 = load i16, ptr %3166, align 4, !tbaa !105
  %3168 = sext i16 %3167 to i32
  %3169 = shl nsw i32 %3168, 1
  %3170 = sext i32 %3169 to i64
  %3171 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %2980, i64 %3170
  %3172 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %3171, i64 1
  %3173 = getelementptr inbounds %class.Vector, ptr %990, i64 %3155
  %3174 = getelementptr inbounds %struct.CompAtom, ptr %107, i64 %3155, i32 1
  %3175 = load float, ptr %3174, align 8, !tbaa !104
  %3176 = fpext float %3175 to double
  %3177 = fmul double %2971, %3176
  %3178 = load double, ptr %3156, align 8, !tbaa !68
  %3179 = fsub double %2982, %3178
  %3180 = getelementptr inbounds %class.Vector, ptr %3156, i64 0, i32 1
  %3181 = load <2 x double>, ptr %3180, align 8, !tbaa !19
  %3182 = fsub <2 x double> %3138, %3181
  %3183 = load double, ptr %3172, align 8, !tbaa !109
  %3184 = fmul double %32, %3183
  %3185 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %3171, i64 1, i32 1
  %3186 = load double, ptr %3185, align 8, !tbaa !111
  %3187 = load double, ptr %3165, align 8, !tbaa !19
  %3188 = getelementptr inbounds double, ptr %3165, i64 2
  %3189 = load double, ptr %3188, align 8, !tbaa !19
  %3190 = fmul double %3186, %1017
  %3191 = fmul double %3190, %3189
  %3192 = call double @llvm.fmuladd.f64(double %3184, double %3187, double %3191)
  %3193 = getelementptr inbounds double, ptr %3165, i64 1
  %3194 = load double, ptr %3193, align 8, !tbaa !19
  %3195 = getelementptr inbounds double, ptr %3165, i64 3
  %3196 = load double, ptr %3195, align 8, !tbaa !19
  %3197 = fmul double %3190, %3196
  %3198 = call double @llvm.fmuladd.f64(double %3184, double %3194, double %3197)
  %3199 = getelementptr inbounds double, ptr %3165, i64 4
  %3200 = load double, ptr %3199, align 8, !tbaa !19
  %3201 = getelementptr inbounds double, ptr %3165, i64 6
  %3202 = load double, ptr %3201, align 8, !tbaa !19
  %3203 = fmul double %3190, %3202
  %3204 = call double @llvm.fmuladd.f64(double %3184, double %3200, double %3203)
  %3205 = getelementptr inbounds double, ptr %3165, i64 5
  %3206 = load double, ptr %3205, align 8, !tbaa !19
  %3207 = getelementptr inbounds double, ptr %3165, i64 7
  %3208 = load double, ptr %3207, align 8, !tbaa !19
  %3209 = fmul double %3190, %3208
  %3210 = call double @llvm.fmuladd.f64(double %3184, double %3206, double %3209)
  %3211 = fmul double %3162, %3192
  %3212 = fmul double %3198, 2.500000e-01
  %3213 = call double @llvm.fmuladd.f64(double %3211, double 0x3FC5555555555555, double %3212)
  %3214 = fmul double %3204, 5.000000e-01
  %3215 = call double @llvm.fmuladd.f64(double %3213, double %3162, double %3214)
  %3216 = call double @llvm.fmuladd.f64(double %3215, double %3162, double %3210)
  %3217 = insertelement <2 x double> poison, double %3216, i64 0
  %3218 = shufflevector <2 x double> %3217, <2 x double> poison, <2 x i32> zeroinitializer
  %3219 = fsub <2 x double> %3145, %3218
  %3220 = getelementptr inbounds double, ptr %3165, i64 8
  %3221 = load double, ptr %3220, align 8, !tbaa !19
  %3222 = getelementptr inbounds double, ptr %3165, i64 9
  %3223 = load double, ptr %3222, align 8, !tbaa !19
  %3224 = getelementptr inbounds double, ptr %3165, i64 10
  %3225 = load double, ptr %3224, align 8, !tbaa !19
  %3226 = getelementptr inbounds double, ptr %3165, i64 11
  %3227 = load double, ptr %3226, align 8, !tbaa !19
  %3228 = getelementptr inbounds double, ptr %3165, i64 12
  %3229 = load double, ptr %3228, align 8, !tbaa !19
  %3230 = call double @llvm.fmuladd.f64(double %1018, double %3229, double %3221)
  %3231 = getelementptr inbounds double, ptr %3165, i64 13
  %3232 = load double, ptr %3231, align 8, !tbaa !19
  %3233 = call double @llvm.fmuladd.f64(double %1018, double %3232, double %3223)
  %3234 = getelementptr inbounds double, ptr %3165, i64 14
  %3235 = load double, ptr %3234, align 8, !tbaa !19
  %3236 = call double @llvm.fmuladd.f64(double %1018, double %3235, double %3225)
  %3237 = getelementptr inbounds double, ptr %3165, i64 15
  %3238 = load double, ptr %3237, align 8, !tbaa !19
  %3239 = call double @llvm.fmuladd.f64(double %1018, double %3238, double %3227)
  %3240 = fmul double %3177, %3230
  %3241 = fmul double %3177, %3233
  %3242 = fmul double %3177, %3236
  %3243 = fmul double %3177, %3239
  %3244 = fmul double %3162, %3240
  %3245 = fmul double %3241, 2.500000e-01
  %3246 = call double @llvm.fmuladd.f64(double %3244, double 0x3FC5555555555555, double %3245)
  %3247 = fmul double %3242, 5.000000e-01
  %3248 = call double @llvm.fmuladd.f64(double %3246, double %3162, double %3247)
  %3249 = call double @llvm.fmuladd.f64(double %3248, double %3162, double %3243)
  %3250 = insertelement <2 x double> poison, double %3249, i64 0
  %3251 = shufflevector <2 x double> %3250, <2 x double> poison, <2 x i32> zeroinitializer
  %3252 = fsub <2 x double> %3144, %3251
  %3253 = fadd double %3192, %3240
  %3254 = fadd double %3198, %3241
  %3255 = fadd double %3204, %3242
  %3256 = call double @llvm.fmuladd.f64(double %3162, double %3253, double %3254)
  %3257 = call double @llvm.fmuladd.f64(double %3256, double %3162, double %3255)
  %3258 = insertelement <2 x double> poison, double %3179, i64 0
  %3259 = shufflevector <2 x double> %3258, <2 x double> %3182, <2 x i32> <i32 0, i32 2>
  %3260 = extractelement <2 x double> %3182, i64 0
  %3261 = fmul double %3260, %3257
  %3262 = insertelement <2 x double> poison, double %3261, i64 0
  %3263 = shufflevector <2 x double> %3262, <2 x double> poison, <2 x i32> zeroinitializer
  %3264 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %3263, <2 x double> %3182, <2 x double> %3146)
  %3265 = shufflevector <2 x double> %3182, <2 x double> poison, <2 x i32> <i32 1, i32 poison>
  %3266 = insertelement <2 x double> %3265, double %3179, i64 1
  %3267 = insertelement <2 x double> poison, double %3257, i64 0
  %3268 = shufflevector <2 x double> %3267, <2 x double> poison, <2 x i32> zeroinitializer
  %3269 = fmul <2 x double> %3266, %3268
  %3270 = shufflevector <2 x double> %3269, <2 x double> poison, <2 x i32> <i32 1, i32 poison>
  %3271 = shufflevector <2 x double> %3269, <2 x double> poison, <2 x i32> <i32 1, i32 1>
  %3272 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %3271, <2 x double> %3259, <2 x double> %3147)
  %3273 = insertelement <2 x double> %3270, double %3261, i64 1
  %3274 = fadd <2 x double> %3143, %3273
  %3275 = load <2 x double>, ptr %3173, align 8, !tbaa !19
  %3276 = fsub <2 x double> %3275, %3273
  store <2 x double> %3276, ptr %3173, align 8, !tbaa !19
  %3277 = shufflevector <2 x double> %3182, <2 x double> poison, <2 x i32> <i32 1, i32 1>
  %3278 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %3269, <2 x double> %3277, <2 x double> %3142)
  %3279 = extractelement <2 x double> %3269, i64 0
  %3280 = fadd double %3141, %3279
  %3281 = getelementptr inbounds %class.Vector, ptr %990, i64 %3155, i32 2
  %3282 = load double, ptr %3281, align 8, !tbaa !112
  %3283 = fsub double %3282, %3279
  store double %3283, ptr %3281, align 8, !tbaa !112
  %3284 = add nuw nsw i64 %3140, 1
  %3285 = icmp eq i64 %3284, %3136
  br i1 %3285, label %3286, label %3139

3286:                                             ; preds = %3139, %3122
  %3287 = phi double [ %3123, %3122 ], [ %3280, %3139 ]
  %3288 = phi <2 x double> [ %3124, %3122 ], [ %3272, %3139 ]
  %3289 = phi <2 x double> [ %3125, %3122 ], [ %3264, %3139 ]
  %3290 = phi <2 x double> [ %3126, %3122 ], [ %3278, %3139 ]
  %3291 = phi <2 x double> [ %3127, %3122 ], [ %3274, %3139 ]
  %3292 = phi <2 x double> [ %3128, %3122 ], [ %3252, %3139 ]
  %3293 = phi <2 x double> [ %3129, %3122 ], [ %3219, %3139 ]
  %3294 = load double, ptr @_ZN20ComputeNonbondedUtil7cutoff2E, align 8, !tbaa !19
  %3295 = call noundef i32 @_Z22pairlist_from_pairlistddddPK8CompAtomPKtiPtdPd(double noundef %3294, double noundef %2982, double noundef %2983, double noundef %1063, ptr noundef %107, ptr noundef %2946, i32 noundef %2947, ptr noundef %160, double noundef %35, ptr noundef %206)
  %3296 = add nsw i32 %3132, %3295
  %3297 = icmp sgt i32 %3295, 0
  br i1 %3297, label %3298, label %3399

3298:                                             ; preds = %3286
  %3299 = load ptr, ptr @_ZN20ComputeNonbondedUtil8r2_tableE, align 8, !tbaa !23
  %3300 = zext i32 %3295 to i64
  br label %3301

3301:                                             ; preds = %3298, %3301
  %3302 = phi i64 [ 0, %3298 ], [ %3397, %3301 ]
  %3303 = phi double [ %3287, %3298 ], [ %3393, %3301 ]
  %3304 = phi <2 x double> [ %3288, %3298 ], [ %3385, %3301 ]
  %3305 = phi <2 x double> [ %3289, %3298 ], [ %3378, %3301 ]
  %3306 = phi <2 x double> [ %3290, %3298 ], [ %3391, %3301 ]
  %3307 = phi <2 x double> [ %3291, %3298 ], [ %3387, %3301 ]
  %3308 = phi <2 x double> [ %3292, %3298 ], [ %3369, %3301 ]
  %3309 = shl nuw nsw i64 %3302, 1
  %3310 = getelementptr inbounds i32, ptr %207, i64 %3309
  %3311 = load i32, ptr %3310, align 4, !tbaa !5
  %3312 = ashr i32 %3311, 14
  %3313 = add nsw i32 %3312, %38
  %3314 = getelementptr inbounds i16, ptr %160, i64 %3302
  %3315 = load i16, ptr %3314, align 2, !tbaa !44
  %3316 = zext i16 %3315 to i64
  %3317 = getelementptr inbounds %struct.CompAtom, ptr %107, i64 %3316
  %3318 = getelementptr inbounds double, ptr %206, i64 %3302
  %3319 = load double, ptr %3318, align 8, !tbaa !19
  %3320 = sext i32 %3313 to i64
  %3321 = getelementptr inbounds double, ptr %3299, i64 %3320
  %3322 = load double, ptr %3321, align 8, !tbaa !19
  %3323 = fsub double %3319, %3322
  %3324 = shl nsw i32 %3313, 4
  %3325 = sext i32 %3324 to i64
  %3326 = getelementptr inbounds double, ptr %31, i64 %3325
  %3327 = getelementptr inbounds %class.Vector, ptr %990, i64 %3316
  %3328 = getelementptr inbounds %struct.CompAtom, ptr %107, i64 %3316, i32 1
  %3329 = load float, ptr %3328, align 8, !tbaa !104
  %3330 = fpext float %3329 to double
  %3331 = fmul double %2971, %3330
  %3332 = load <2 x double>, ptr %3317, align 8, !tbaa !19
  %3333 = fsub <2 x double> %1060, %3332
  %3334 = getelementptr inbounds %class.Vector, ptr %3317, i64 0, i32 2
  %3335 = load double, ptr %3334, align 8, !tbaa !49
  %3336 = fsub double %1063, %3335
  %3337 = getelementptr inbounds double, ptr %3326, i64 8
  %3338 = load double, ptr %3337, align 8, !tbaa !19
  %3339 = getelementptr inbounds double, ptr %3326, i64 9
  %3340 = load double, ptr %3339, align 8, !tbaa !19
  %3341 = getelementptr inbounds double, ptr %3326, i64 10
  %3342 = load double, ptr %3341, align 8, !tbaa !19
  %3343 = getelementptr inbounds double, ptr %3326, i64 11
  %3344 = load double, ptr %3343, align 8, !tbaa !19
  %3345 = getelementptr inbounds double, ptr %3326, i64 12
  %3346 = load double, ptr %3345, align 8, !tbaa !19
  %3347 = fsub double %3338, %3346
  %3348 = getelementptr inbounds double, ptr %3326, i64 13
  %3349 = load double, ptr %3348, align 8, !tbaa !19
  %3350 = fsub double %3340, %3349
  %3351 = getelementptr inbounds double, ptr %3326, i64 14
  %3352 = load double, ptr %3351, align 8, !tbaa !19
  %3353 = fsub double %3342, %3352
  %3354 = getelementptr inbounds double, ptr %3326, i64 15
  %3355 = load double, ptr %3354, align 8, !tbaa !19
  %3356 = fsub double %3344, %3355
  %3357 = fmul double %3331, %3347
  %3358 = fmul double %3331, %3350
  %3359 = fmul double %3331, %3353
  %3360 = fmul double %3331, %3356
  %3361 = fmul double %3323, %3357
  %3362 = fmul double %3358, 2.500000e-01
  %3363 = call double @llvm.fmuladd.f64(double %3361, double 0x3FC5555555555555, double %3362)
  %3364 = fmul double %3359, 5.000000e-01
  %3365 = call double @llvm.fmuladd.f64(double %3363, double %3323, double %3364)
  %3366 = call double @llvm.fmuladd.f64(double %3365, double %3323, double %3360)
  %3367 = insertelement <2 x double> poison, double %3366, i64 0
  %3368 = shufflevector <2 x double> %3367, <2 x double> poison, <2 x i32> zeroinitializer
  %3369 = fsub <2 x double> %3308, %3368
  %3370 = call double @llvm.fmuladd.f64(double %3323, double %3357, double %3358)
  %3371 = call double @llvm.fmuladd.f64(double %3370, double %3323, double %3359)
  %3372 = extractelement <2 x double> %3333, i64 1
  %3373 = fmul double %3372, %3371
  %3374 = insertelement <2 x double> poison, double %3373, i64 0
  %3375 = shufflevector <2 x double> %3374, <2 x double> poison, <2 x i32> zeroinitializer
  %3376 = shufflevector <2 x double> %3333, <2 x double> poison, <2 x i32> <i32 1, i32 0>
  %3377 = insertelement <2 x double> %3376, double %3336, i64 1
  %3378 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %3375, <2 x double> %3377, <2 x double> %3305)
  %3379 = insertelement <2 x double> %3376, double %3336, i64 0
  %3380 = insertelement <2 x double> poison, double %3371, i64 0
  %3381 = shufflevector <2 x double> %3380, <2 x double> poison, <2 x i32> zeroinitializer
  %3382 = fmul <2 x double> %3379, %3381
  %3383 = shufflevector <2 x double> %3382, <2 x double> poison, <2 x i32> <i32 1, i32 poison>
  %3384 = shufflevector <2 x double> %3382, <2 x double> poison, <2 x i32> <i32 1, i32 1>
  %3385 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %3384, <2 x double> %3333, <2 x double> %3304)
  %3386 = insertelement <2 x double> %3383, double %3373, i64 1
  %3387 = fadd <2 x double> %3307, %3386
  %3388 = load <2 x double>, ptr %3327, align 8, !tbaa !19
  %3389 = fsub <2 x double> %3388, %3386
  store <2 x double> %3389, ptr %3327, align 8, !tbaa !19
  %3390 = shufflevector <2 x double> %3379, <2 x double> poison, <2 x i32> zeroinitializer
  %3391 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %3382, <2 x double> %3390, <2 x double> %3306)
  %3392 = extractelement <2 x double> %3382, i64 0
  %3393 = fadd double %3303, %3392
  %3394 = getelementptr inbounds %class.Vector, ptr %990, i64 %3316, i32 2
  %3395 = load double, ptr %3394, align 8, !tbaa !112
  %3396 = fsub double %3395, %3392
  store double %3396, ptr %3394, align 8, !tbaa !112
  %3397 = add nuw nsw i64 %3302, 1
  %3398 = icmp eq i64 %3397, %3300
  br i1 %3398, label %3399, label %3301

3399:                                             ; preds = %3301, %3286
  %3400 = phi double [ %3287, %3286 ], [ %3393, %3301 ]
  %3401 = phi <2 x double> [ %3288, %3286 ], [ %3385, %3301 ]
  %3402 = phi <2 x double> [ %3289, %3286 ], [ %3378, %3301 ]
  %3403 = phi <2 x double> [ %3290, %3286 ], [ %3391, %3301 ]
  %3404 = phi <2 x double> [ %3291, %3286 ], [ %3387, %3301 ]
  %3405 = phi <2 x double> [ %3292, %3286 ], [ %3369, %3301 ]
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %3) #11
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %4) #11
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %5) #11
  %3406 = load double, ptr @_ZN20ComputeNonbondedUtil7cutoff2E, align 8, !tbaa !19
  %3407 = call noundef i32 @_Z22pairlist_from_pairlistddddPK8CompAtomPKtiPtdPd(double noundef %3406, double noundef %2982, double noundef %2983, double noundef %1063, ptr noundef %107, ptr noundef %2950, i32 noundef %2951, ptr noundef %160, double noundef %35, ptr noundef %206)
  %3408 = icmp sgt i32 %3407, 0
  br i1 %3408, label %3409, label %3519

3409:                                             ; preds = %3399
  %3410 = zext i32 %3407 to i64
  br label %3411

3411:                                             ; preds = %3409, %3411
  %3412 = phi i64 [ 0, %3409 ], [ %3517, %3411 ]
  %3413 = phi double [ %3400, %3409 ], [ %3513, %3411 ]
  %3414 = phi <2 x double> [ %3401, %3409 ], [ %3505, %3411 ]
  %3415 = phi <2 x double> [ %3402, %3409 ], [ %3498, %3411 ]
  %3416 = phi <2 x double> [ %3403, %3409 ], [ %3511, %3411 ]
  %3417 = phi <2 x double> [ %3404, %3409 ], [ %3507, %3411 ]
  %3418 = phi <2 x double> [ %3405, %3409 ], [ %3486, %3411 ]
  %3419 = phi <2 x double> [ %3293, %3409 ], [ %3465, %3411 ]
  %3420 = shl nuw nsw i64 %3412, 1
  %3421 = getelementptr inbounds i32, ptr %207, i64 %3420
  %3422 = load i32, ptr %3421, align 4, !tbaa !5
  %3423 = ashr i32 %3422, 14
  %3424 = add nsw i32 %3423, %38
  %3425 = getelementptr inbounds i16, ptr %160, i64 %3412
  %3426 = load i16, ptr %3425, align 2, !tbaa !44
  %3427 = zext i16 %3426 to i64
  %3428 = getelementptr inbounds %struct.CompAtom, ptr %107, i64 %3427
  %3429 = getelementptr inbounds double, ptr %206, i64 %3412
  %3430 = load double, ptr %3429, align 8, !tbaa !19
  %3431 = load ptr, ptr @_ZN20ComputeNonbondedUtil8r2_tableE, align 8, !tbaa !23
  %3432 = sext i32 %3424 to i64
  %3433 = getelementptr inbounds double, ptr %3431, i64 %3432
  %3434 = load double, ptr %3433, align 8, !tbaa !19
  %3435 = fsub double %3430, %3434
  %3436 = shl nsw i32 %3424, 4
  %3437 = sext i32 %3436 to i64
  %3438 = getelementptr inbounds double, ptr %31, i64 %3437
  %3439 = getelementptr inbounds %struct.CompAtom, ptr %107, i64 %3427, i32 2
  %3440 = load i16, ptr %3439, align 4, !tbaa !105
  %3441 = sext i16 %3440 to i32
  %3442 = shl nsw i32 %3441, 1
  %3443 = sext i32 %3442 to i64
  %3444 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %2980, i64 %3443
  %3445 = getelementptr inbounds %class.Vector, ptr %990, i64 %3427
  %3446 = getelementptr inbounds %struct.CompAtom, ptr %107, i64 %3427, i32 1
  %3447 = load float, ptr %3446, align 8, !tbaa !104
  %3448 = fpext float %3447 to double
  %3449 = fmul double %2971, %3448
  %3450 = load <2 x double>, ptr %3428, align 8, !tbaa !19
  %3451 = fsub <2 x double> %1060, %3450
  %3452 = getelementptr inbounds %class.Vector, ptr %3428, i64 0, i32 2
  %3453 = load double, ptr %3452, align 8, !tbaa !49
  %3454 = fsub double %1063, %3453
  %3455 = load double, ptr %3444, align 8, !tbaa !109
  %3456 = fmul double %32, %3455
  %3457 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %2980, i64 %3443, i32 1
  %3458 = load double, ptr %3457, align 8, !tbaa !111
  %3459 = fmul double %32, %3458
  %3460 = fsub double %3430, %35
  call void @_Z24fep_vdw_forceandenergiesdddddddddiidddPdS_S_(double noundef %3456, double noundef %3459, double noundef %3460, double noundef %58, double noundef %64, double noundef %39, double noundef %40, double noundef %55, double noundef %62, i32 noundef %47, i32 noundef %48, double noundef %49, double noundef %50, double noundef %44, ptr noundef nonnull %3, ptr noundef nonnull %4, ptr noundef nonnull %5)
  %3461 = load double, ptr %3, align 8, !tbaa !19
  %3462 = load double, ptr %5, align 8, !tbaa !19
  %3463 = insertelement <2 x double> poison, double %3462, i64 0
  %3464 = insertelement <2 x double> %3463, double %3461, i64 1
  %3465 = fadd <2 x double> %3419, %3464
  %3466 = getelementptr inbounds double, ptr %3438, i64 8
  %3467 = load double, ptr %3466, align 8, !tbaa !19
  %3468 = getelementptr inbounds double, ptr %3438, i64 9
  %3469 = load double, ptr %3468, align 8, !tbaa !19
  %3470 = getelementptr inbounds double, ptr %3438, i64 10
  %3471 = load double, ptr %3470, align 8, !tbaa !19
  %3472 = getelementptr inbounds double, ptr %3438, i64 11
  %3473 = load double, ptr %3472, align 8, !tbaa !19
  %3474 = fmul double %3449, %3467
  %3475 = fmul double %3449, %3469
  %3476 = fmul double %3449, %3471
  %3477 = fmul double %3449, %3473
  %3478 = fmul double %3435, %3474
  %3479 = fmul double %3475, 2.500000e-01
  %3480 = call double @llvm.fmuladd.f64(double %3478, double 0x3FC5555555555555, double %3479)
  %3481 = fmul double %3476, 5.000000e-01
  %3482 = call double @llvm.fmuladd.f64(double %3480, double %3435, double %3481)
  %3483 = call double @llvm.fmuladd.f64(double %3482, double %3435, double %3477)
  %3484 = insertelement <2 x double> poison, double %3483, i64 0
  %3485 = shufflevector <2 x double> %3484, <2 x double> poison, <2 x i32> zeroinitializer
  %3486 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %1019, <2 x double> %3485, <2 x double> %3418)
  %3487 = call double @llvm.fmuladd.f64(double %3435, double %3474, double %3475)
  %3488 = call double @llvm.fmuladd.f64(double %3487, double %3435, double %3476)
  %3489 = fmul double %1023, %3488
  %3490 = load double, ptr %4, align 8, !tbaa !19
  %3491 = fadd double %3490, %3489
  %3492 = extractelement <2 x double> %3451, i64 1
  %3493 = fmul double %3492, %3491
  %3494 = insertelement <2 x double> poison, double %3493, i64 0
  %3495 = shufflevector <2 x double> %3494, <2 x double> poison, <2 x i32> zeroinitializer
  %3496 = shufflevector <2 x double> %3451, <2 x double> poison, <2 x i32> <i32 1, i32 0>
  %3497 = insertelement <2 x double> %3496, double %3454, i64 1
  %3498 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %3495, <2 x double> %3497, <2 x double> %3415)
  %3499 = insertelement <2 x double> %3496, double %3454, i64 0
  %3500 = insertelement <2 x double> poison, double %3491, i64 0
  %3501 = shufflevector <2 x double> %3500, <2 x double> poison, <2 x i32> zeroinitializer
  %3502 = fmul <2 x double> %3499, %3501
  %3503 = shufflevector <2 x double> %3502, <2 x double> poison, <2 x i32> <i32 1, i32 poison>
  %3504 = shufflevector <2 x double> %3502, <2 x double> poison, <2 x i32> <i32 1, i32 1>
  %3505 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %3504, <2 x double> %3451, <2 x double> %3414)
  %3506 = insertelement <2 x double> %3503, double %3493, i64 1
  %3507 = fadd <2 x double> %3417, %3506
  %3508 = load <2 x double>, ptr %3445, align 8, !tbaa !19
  %3509 = fsub <2 x double> %3508, %3506
  store <2 x double> %3509, ptr %3445, align 8, !tbaa !19
  %3510 = shufflevector <2 x double> %3499, <2 x double> poison, <2 x i32> zeroinitializer
  %3511 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %3502, <2 x double> %3510, <2 x double> %3416)
  %3512 = extractelement <2 x double> %3502, i64 0
  %3513 = fadd double %3413, %3512
  %3514 = getelementptr inbounds %class.Vector, ptr %990, i64 %3427, i32 2
  %3515 = load double, ptr %3514, align 8, !tbaa !112
  %3516 = fsub double %3515, %3512
  store double %3516, ptr %3514, align 8, !tbaa !112
  %3517 = add nuw nsw i64 %3412, 1
  %3518 = icmp eq i64 %3517, %3410
  br i1 %3518, label %3519, label %3411

3519:                                             ; preds = %3411, %3399
  %3520 = phi double [ %3400, %3399 ], [ %3513, %3411 ]
  %3521 = phi <2 x double> [ %3401, %3399 ], [ %3505, %3411 ]
  %3522 = phi <2 x double> [ %3402, %3399 ], [ %3498, %3411 ]
  %3523 = phi <2 x double> [ %3403, %3399 ], [ %3511, %3411 ]
  %3524 = phi <2 x double> [ %3404, %3399 ], [ %3507, %3411 ]
  %3525 = phi <2 x double> [ %3405, %3399 ], [ %3486, %3411 ]
  %3526 = phi <2 x double> [ %3293, %3399 ], [ %3465, %3411 ]
  %3527 = load double, ptr @_ZN20ComputeNonbondedUtil7cutoff2E, align 8, !tbaa !19
  %3528 = call noundef i32 @_Z22pairlist_from_pairlistddddPK8CompAtomPKtiPtdPd(double noundef %3527, double noundef %2982, double noundef %2983, double noundef %1063, ptr noundef %107, ptr noundef %2956, i32 noundef %2957, ptr noundef %160, double noundef %35, ptr noundef %206)
  %3529 = icmp sgt i32 %3528, 0
  br i1 %3529, label %3530, label %3640

3530:                                             ; preds = %3519
  %3531 = zext i32 %3528 to i64
  br label %3532

3532:                                             ; preds = %3530, %3532
  %3533 = phi i64 [ 0, %3530 ], [ %3638, %3532 ]
  %3534 = phi double [ %3520, %3530 ], [ %3634, %3532 ]
  %3535 = phi <2 x double> [ %3521, %3530 ], [ %3626, %3532 ]
  %3536 = phi <2 x double> [ %3522, %3530 ], [ %3619, %3532 ]
  %3537 = phi <2 x double> [ %3523, %3530 ], [ %3632, %3532 ]
  %3538 = phi <2 x double> [ %3524, %3530 ], [ %3628, %3532 ]
  %3539 = phi <2 x double> [ %3525, %3530 ], [ %3607, %3532 ]
  %3540 = phi <2 x double> [ %3526, %3530 ], [ %3586, %3532 ]
  %3541 = shl nuw nsw i64 %3533, 1
  %3542 = getelementptr inbounds i32, ptr %207, i64 %3541
  %3543 = load i32, ptr %3542, align 4, !tbaa !5
  %3544 = ashr i32 %3543, 14
  %3545 = add nsw i32 %3544, %38
  %3546 = getelementptr inbounds i16, ptr %160, i64 %3533
  %3547 = load i16, ptr %3546, align 2, !tbaa !44
  %3548 = zext i16 %3547 to i64
  %3549 = getelementptr inbounds %struct.CompAtom, ptr %107, i64 %3548
  %3550 = getelementptr inbounds double, ptr %206, i64 %3533
  %3551 = load double, ptr %3550, align 8, !tbaa !19
  %3552 = load ptr, ptr @_ZN20ComputeNonbondedUtil8r2_tableE, align 8, !tbaa !23
  %3553 = sext i32 %3545 to i64
  %3554 = getelementptr inbounds double, ptr %3552, i64 %3553
  %3555 = load double, ptr %3554, align 8, !tbaa !19
  %3556 = fsub double %3551, %3555
  %3557 = shl nsw i32 %3545, 4
  %3558 = sext i32 %3557 to i64
  %3559 = getelementptr inbounds double, ptr %31, i64 %3558
  %3560 = getelementptr inbounds %struct.CompAtom, ptr %107, i64 %3548, i32 2
  %3561 = load i16, ptr %3560, align 4, !tbaa !105
  %3562 = sext i16 %3561 to i32
  %3563 = shl nsw i32 %3562, 1
  %3564 = sext i32 %3563 to i64
  %3565 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %2980, i64 %3564
  %3566 = getelementptr inbounds %class.Vector, ptr %990, i64 %3548
  %3567 = getelementptr inbounds %struct.CompAtom, ptr %107, i64 %3548, i32 1
  %3568 = load float, ptr %3567, align 8, !tbaa !104
  %3569 = fpext float %3568 to double
  %3570 = fmul double %2971, %3569
  %3571 = load <2 x double>, ptr %3549, align 8, !tbaa !19
  %3572 = fsub <2 x double> %1060, %3571
  %3573 = getelementptr inbounds %class.Vector, ptr %3549, i64 0, i32 2
  %3574 = load double, ptr %3573, align 8, !tbaa !49
  %3575 = fsub double %1063, %3574
  %3576 = load double, ptr %3565, align 8, !tbaa !109
  %3577 = fmul double %32, %3576
  %3578 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %2980, i64 %3564, i32 1
  %3579 = load double, ptr %3578, align 8, !tbaa !111
  %3580 = fmul double %32, %3579
  %3581 = fsub double %3551, %35
  call void @_Z24fep_vdw_forceandenergiesdddddddddiidddPdS_S_(double noundef %3577, double noundef %3580, double noundef %3581, double noundef %84, double noundef %91, double noundef %39, double noundef %40, double noundef %82, double noundef %89, i32 noundef %47, i32 noundef %48, double noundef %49, double noundef %50, double noundef %44, ptr noundef nonnull %3, ptr noundef nonnull %4, ptr noundef nonnull %5)
  %3582 = load double, ptr %3, align 8, !tbaa !19
  %3583 = load double, ptr %5, align 8, !tbaa !19
  %3584 = insertelement <2 x double> poison, double %3583, i64 0
  %3585 = insertelement <2 x double> %3584, double %3582, i64 1
  %3586 = fadd <2 x double> %3540, %3585
  %3587 = getelementptr inbounds double, ptr %3559, i64 8
  %3588 = load double, ptr %3587, align 8, !tbaa !19
  %3589 = getelementptr inbounds double, ptr %3559, i64 9
  %3590 = load double, ptr %3589, align 8, !tbaa !19
  %3591 = getelementptr inbounds double, ptr %3559, i64 10
  %3592 = load double, ptr %3591, align 8, !tbaa !19
  %3593 = getelementptr inbounds double, ptr %3559, i64 11
  %3594 = load double, ptr %3593, align 8, !tbaa !19
  %3595 = fmul double %3570, %3588
  %3596 = fmul double %3570, %3590
  %3597 = fmul double %3570, %3592
  %3598 = fmul double %3570, %3594
  %3599 = fmul double %3556, %3595
  %3600 = fmul double %3596, 2.500000e-01
  %3601 = call double @llvm.fmuladd.f64(double %3599, double 0x3FC5555555555555, double %3600)
  %3602 = fmul double %3597, 5.000000e-01
  %3603 = call double @llvm.fmuladd.f64(double %3601, double %3556, double %3602)
  %3604 = call double @llvm.fmuladd.f64(double %3603, double %3556, double %3598)
  %3605 = insertelement <2 x double> poison, double %3604, i64 0
  %3606 = shufflevector <2 x double> %3605, <2 x double> poison, <2 x i32> zeroinitializer
  %3607 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %1020, <2 x double> %3606, <2 x double> %3539)
  %3608 = call double @llvm.fmuladd.f64(double %3556, double %3595, double %3596)
  %3609 = call double @llvm.fmuladd.f64(double %3608, double %3556, double %3597)
  %3610 = fmul double %1024, %3609
  %3611 = load double, ptr %4, align 8, !tbaa !19
  %3612 = fadd double %3611, %3610
  %3613 = extractelement <2 x double> %3572, i64 1
  %3614 = fmul double %3613, %3612
  %3615 = insertelement <2 x double> poison, double %3614, i64 0
  %3616 = shufflevector <2 x double> %3615, <2 x double> poison, <2 x i32> zeroinitializer
  %3617 = shufflevector <2 x double> %3572, <2 x double> poison, <2 x i32> <i32 1, i32 0>
  %3618 = insertelement <2 x double> %3617, double %3575, i64 1
  %3619 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %3616, <2 x double> %3618, <2 x double> %3536)
  %3620 = insertelement <2 x double> %3617, double %3575, i64 0
  %3621 = insertelement <2 x double> poison, double %3612, i64 0
  %3622 = shufflevector <2 x double> %3621, <2 x double> poison, <2 x i32> zeroinitializer
  %3623 = fmul <2 x double> %3620, %3622
  %3624 = shufflevector <2 x double> %3623, <2 x double> poison, <2 x i32> <i32 1, i32 poison>
  %3625 = shufflevector <2 x double> %3623, <2 x double> poison, <2 x i32> <i32 1, i32 1>
  %3626 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %3625, <2 x double> %3572, <2 x double> %3535)
  %3627 = insertelement <2 x double> %3624, double %3614, i64 1
  %3628 = fadd <2 x double> %3538, %3627
  %3629 = load <2 x double>, ptr %3566, align 8, !tbaa !19
  %3630 = fsub <2 x double> %3629, %3627
  store <2 x double> %3630, ptr %3566, align 8, !tbaa !19
  %3631 = shufflevector <2 x double> %3620, <2 x double> poison, <2 x i32> zeroinitializer
  %3632 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %3623, <2 x double> %3631, <2 x double> %3537)
  %3633 = extractelement <2 x double> %3623, i64 0
  %3634 = fadd double %3534, %3633
  %3635 = getelementptr inbounds %class.Vector, ptr %990, i64 %3548, i32 2
  %3636 = load double, ptr %3635, align 8, !tbaa !112
  %3637 = fsub double %3636, %3633
  store double %3637, ptr %3635, align 8, !tbaa !112
  %3638 = add nuw nsw i64 %3533, 1
  %3639 = icmp eq i64 %3638, %3531
  br i1 %3639, label %3640, label %3532

3640:                                             ; preds = %3532, %3519
  %3641 = phi double [ %3520, %3519 ], [ %3634, %3532 ]
  %3642 = phi <2 x double> [ %3521, %3519 ], [ %3626, %3532 ]
  %3643 = phi <2 x double> [ %3522, %3519 ], [ %3619, %3532 ]
  %3644 = phi <2 x double> [ %3523, %3519 ], [ %3632, %3532 ]
  %3645 = phi <2 x double> [ %3524, %3519 ], [ %3628, %3532 ]
  %3646 = phi <2 x double> [ %3525, %3519 ], [ %3607, %3532 ]
  %3647 = phi <2 x double> [ %3526, %3519 ], [ %3586, %3532 ]
  %3648 = load double, ptr @_ZN20ComputeNonbondedUtil7cutoff2E, align 8, !tbaa !19
  %3649 = call noundef i32 @_Z22pairlist_from_pairlistddddPK8CompAtomPKtiPtdPd(double noundef %3648, double noundef %2982, double noundef %2983, double noundef %1063, ptr noundef %107, ptr noundef %2954, i32 noundef %2955, ptr noundef %160, double noundef %35, ptr noundef %206)
  %3650 = add nsw i32 %3296, %3649
  %3651 = icmp sgt i32 %3649, 0
  br i1 %3651, label %3652, label %3775

3652:                                             ; preds = %3640
  %3653 = zext i32 %3649 to i64
  br label %3654

3654:                                             ; preds = %3652, %3654
  %3655 = phi i64 [ 0, %3652 ], [ %3773, %3654 ]
  %3656 = phi double [ %3641, %3652 ], [ %3769, %3654 ]
  %3657 = phi <2 x double> [ %3642, %3652 ], [ %3761, %3654 ]
  %3658 = phi <2 x double> [ %3643, %3652 ], [ %3754, %3654 ]
  %3659 = phi <2 x double> [ %3644, %3652 ], [ %3767, %3654 ]
  %3660 = phi <2 x double> [ %3645, %3652 ], [ %3763, %3654 ]
  %3661 = phi <2 x double> [ %3646, %3652 ], [ %3742, %3654 ]
  %3662 = phi <2 x double> [ %3647, %3652 ], [ %3709, %3654 ]
  %3663 = shl nuw nsw i64 %3655, 1
  %3664 = getelementptr inbounds i32, ptr %207, i64 %3663
  %3665 = load i32, ptr %3664, align 4, !tbaa !5
  %3666 = ashr i32 %3665, 14
  %3667 = add nsw i32 %3666, %38
  %3668 = getelementptr inbounds i16, ptr %160, i64 %3655
  %3669 = load i16, ptr %3668, align 2, !tbaa !44
  %3670 = zext i16 %3669 to i64
  %3671 = getelementptr inbounds %struct.CompAtom, ptr %107, i64 %3670
  %3672 = getelementptr inbounds double, ptr %206, i64 %3655
  %3673 = load double, ptr %3672, align 8, !tbaa !19
  %3674 = load ptr, ptr @_ZN20ComputeNonbondedUtil8r2_tableE, align 8, !tbaa !23
  %3675 = sext i32 %3667 to i64
  %3676 = getelementptr inbounds double, ptr %3674, i64 %3675
  %3677 = load double, ptr %3676, align 8, !tbaa !19
  %3678 = fsub double %3673, %3677
  %3679 = shl nsw i32 %3667, 4
  %3680 = sext i32 %3679 to i64
  %3681 = getelementptr inbounds double, ptr %31, i64 %3680
  %3682 = getelementptr inbounds %struct.CompAtom, ptr %107, i64 %3670, i32 2
  %3683 = load i16, ptr %3682, align 4, !tbaa !105
  %3684 = sext i16 %3683 to i32
  %3685 = shl nsw i32 %3684, 1
  %3686 = sext i32 %3685 to i64
  %3687 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %2980, i64 %3686
  %3688 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %3687, i64 1
  %3689 = getelementptr inbounds %class.Vector, ptr %990, i64 %3670
  %3690 = getelementptr inbounds %struct.CompAtom, ptr %107, i64 %3670, i32 1
  %3691 = load float, ptr %3690, align 8, !tbaa !104
  %3692 = fpext float %3691 to double
  %3693 = fmul double %2971, %3692
  %3694 = load <2 x double>, ptr %3671, align 8, !tbaa !19
  %3695 = fsub <2 x double> %1060, %3694
  %3696 = getelementptr inbounds %class.Vector, ptr %3671, i64 0, i32 2
  %3697 = load double, ptr %3696, align 8, !tbaa !49
  %3698 = fsub double %1063, %3697
  %3699 = load double, ptr %3688, align 8, !tbaa !109
  %3700 = fmul double %32, %3699
  %3701 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %3687, i64 1, i32 1
  %3702 = load double, ptr %3701, align 8, !tbaa !111
  %3703 = fmul double %32, %3702
  %3704 = fsub double %3673, %35
  call void @_Z24fep_vdw_forceandenergiesdddddddddiidddPdS_S_(double noundef %3700, double noundef %3703, double noundef %3704, double noundef %58, double noundef %64, double noundef %39, double noundef %40, double noundef %55, double noundef %62, i32 noundef %47, i32 noundef %48, double noundef %49, double noundef %50, double noundef %44, ptr noundef nonnull %3, ptr noundef nonnull %4, ptr noundef nonnull %5)
  %3705 = load double, ptr %3, align 8, !tbaa !19
  %3706 = load double, ptr %5, align 8, !tbaa !19
  %3707 = insertelement <2 x double> poison, double %3706, i64 0
  %3708 = insertelement <2 x double> %3707, double %3705, i64 1
  %3709 = fadd <2 x double> %3662, %3708
  %3710 = getelementptr inbounds double, ptr %3681, i64 8
  %3711 = load double, ptr %3710, align 8, !tbaa !19
  %3712 = getelementptr inbounds double, ptr %3681, i64 9
  %3713 = load double, ptr %3712, align 8, !tbaa !19
  %3714 = getelementptr inbounds double, ptr %3681, i64 10
  %3715 = load double, ptr %3714, align 8, !tbaa !19
  %3716 = getelementptr inbounds double, ptr %3681, i64 11
  %3717 = load double, ptr %3716, align 8, !tbaa !19
  %3718 = getelementptr inbounds double, ptr %3681, i64 12
  %3719 = load double, ptr %3718, align 8, !tbaa !19
  %3720 = call double @llvm.fmuladd.f64(double %1018, double %3719, double %3711)
  %3721 = getelementptr inbounds double, ptr %3681, i64 13
  %3722 = load double, ptr %3721, align 8, !tbaa !19
  %3723 = call double @llvm.fmuladd.f64(double %1018, double %3722, double %3713)
  %3724 = getelementptr inbounds double, ptr %3681, i64 14
  %3725 = load double, ptr %3724, align 8, !tbaa !19
  %3726 = call double @llvm.fmuladd.f64(double %1018, double %3725, double %3715)
  %3727 = getelementptr inbounds double, ptr %3681, i64 15
  %3728 = load double, ptr %3727, align 8, !tbaa !19
  %3729 = call double @llvm.fmuladd.f64(double %1018, double %3728, double %3717)
  %3730 = fmul double %3693, %3720
  %3731 = fmul double %3693, %3723
  %3732 = fmul double %3693, %3726
  %3733 = fmul double %3693, %3729
  %3734 = fmul double %3678, %3730
  %3735 = fmul double %3731, 2.500000e-01
  %3736 = call double @llvm.fmuladd.f64(double %3734, double 0x3FC5555555555555, double %3735)
  %3737 = fmul double %3732, 5.000000e-01
  %3738 = call double @llvm.fmuladd.f64(double %3736, double %3678, double %3737)
  %3739 = call double @llvm.fmuladd.f64(double %3738, double %3678, double %3733)
  %3740 = insertelement <2 x double> poison, double %3739, i64 0
  %3741 = shufflevector <2 x double> %3740, <2 x double> poison, <2 x i32> zeroinitializer
  %3742 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %1019, <2 x double> %3741, <2 x double> %3661)
  %3743 = call double @llvm.fmuladd.f64(double %3678, double %3730, double %3731)
  %3744 = call double @llvm.fmuladd.f64(double %3743, double %3678, double %3732)
  %3745 = fmul double %1025, %3744
  %3746 = load double, ptr %4, align 8, !tbaa !19
  %3747 = fadd double %3746, %3745
  %3748 = extractelement <2 x double> %3695, i64 1
  %3749 = fmul double %3748, %3747
  %3750 = insertelement <2 x double> poison, double %3749, i64 0
  %3751 = shufflevector <2 x double> %3750, <2 x double> poison, <2 x i32> zeroinitializer
  %3752 = shufflevector <2 x double> %3695, <2 x double> poison, <2 x i32> <i32 1, i32 0>
  %3753 = insertelement <2 x double> %3752, double %3698, i64 1
  %3754 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %3751, <2 x double> %3753, <2 x double> %3658)
  %3755 = insertelement <2 x double> %3752, double %3698, i64 0
  %3756 = insertelement <2 x double> poison, double %3747, i64 0
  %3757 = shufflevector <2 x double> %3756, <2 x double> poison, <2 x i32> zeroinitializer
  %3758 = fmul <2 x double> %3755, %3757
  %3759 = shufflevector <2 x double> %3758, <2 x double> poison, <2 x i32> <i32 1, i32 poison>
  %3760 = shufflevector <2 x double> %3758, <2 x double> poison, <2 x i32> <i32 1, i32 1>
  %3761 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %3760, <2 x double> %3695, <2 x double> %3657)
  %3762 = insertelement <2 x double> %3759, double %3749, i64 1
  %3763 = fadd <2 x double> %3660, %3762
  %3764 = load <2 x double>, ptr %3689, align 8, !tbaa !19
  %3765 = fsub <2 x double> %3764, %3762
  store <2 x double> %3765, ptr %3689, align 8, !tbaa !19
  %3766 = shufflevector <2 x double> %3755, <2 x double> poison, <2 x i32> zeroinitializer
  %3767 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %3758, <2 x double> %3766, <2 x double> %3659)
  %3768 = extractelement <2 x double> %3758, i64 0
  %3769 = fadd double %3656, %3768
  %3770 = getelementptr inbounds %class.Vector, ptr %990, i64 %3670, i32 2
  %3771 = load double, ptr %3770, align 8, !tbaa !112
  %3772 = fsub double %3771, %3768
  store double %3772, ptr %3770, align 8, !tbaa !112
  %3773 = add nuw nsw i64 %3655, 1
  %3774 = icmp eq i64 %3773, %3653
  br i1 %3774, label %3775, label %3654

3775:                                             ; preds = %3654, %3640
  %3776 = phi double [ %3641, %3640 ], [ %3769, %3654 ]
  %3777 = phi <2 x double> [ %3642, %3640 ], [ %3761, %3654 ]
  %3778 = phi <2 x double> [ %3643, %3640 ], [ %3754, %3654 ]
  %3779 = phi <2 x double> [ %3644, %3640 ], [ %3767, %3654 ]
  %3780 = phi <2 x double> [ %3645, %3640 ], [ %3763, %3654 ]
  %3781 = phi <2 x double> [ %3646, %3640 ], [ %3742, %3654 ]
  %3782 = phi <2 x double> [ %3647, %3640 ], [ %3709, %3654 ]
  %3783 = load double, ptr @_ZN20ComputeNonbondedUtil7cutoff2E, align 8, !tbaa !19
  %3784 = call noundef i32 @_Z22pairlist_from_pairlistddddPK8CompAtomPKtiPtdPd(double noundef %3783, double noundef %2982, double noundef %2983, double noundef %1063, ptr noundef %107, ptr noundef %2960, i32 noundef %2961, ptr noundef %160, double noundef %35, ptr noundef %206)
  %3785 = add nsw i32 %3650, %3784
  %3786 = icmp sgt i32 %3784, 0
  br i1 %3786, label %3787, label %3910

3787:                                             ; preds = %3775
  %3788 = zext i32 %3784 to i64
  br label %3789

3789:                                             ; preds = %3787, %3789
  %3790 = phi i64 [ 0, %3787 ], [ %3908, %3789 ]
  %3791 = phi double [ %3776, %3787 ], [ %3904, %3789 ]
  %3792 = phi <2 x double> [ %3777, %3787 ], [ %3896, %3789 ]
  %3793 = phi <2 x double> [ %3778, %3787 ], [ %3889, %3789 ]
  %3794 = phi <2 x double> [ %3779, %3787 ], [ %3902, %3789 ]
  %3795 = phi <2 x double> [ %3780, %3787 ], [ %3898, %3789 ]
  %3796 = phi <2 x double> [ %3781, %3787 ], [ %3877, %3789 ]
  %3797 = phi <2 x double> [ %3782, %3787 ], [ %3844, %3789 ]
  %3798 = shl nuw nsw i64 %3790, 1
  %3799 = getelementptr inbounds i32, ptr %207, i64 %3798
  %3800 = load i32, ptr %3799, align 4, !tbaa !5
  %3801 = ashr i32 %3800, 14
  %3802 = add nsw i32 %3801, %38
  %3803 = getelementptr inbounds i16, ptr %160, i64 %3790
  %3804 = load i16, ptr %3803, align 2, !tbaa !44
  %3805 = zext i16 %3804 to i64
  %3806 = getelementptr inbounds %struct.CompAtom, ptr %107, i64 %3805
  %3807 = getelementptr inbounds double, ptr %206, i64 %3790
  %3808 = load double, ptr %3807, align 8, !tbaa !19
  %3809 = load ptr, ptr @_ZN20ComputeNonbondedUtil8r2_tableE, align 8, !tbaa !23
  %3810 = sext i32 %3802 to i64
  %3811 = getelementptr inbounds double, ptr %3809, i64 %3810
  %3812 = load double, ptr %3811, align 8, !tbaa !19
  %3813 = fsub double %3808, %3812
  %3814 = shl nsw i32 %3802, 4
  %3815 = sext i32 %3814 to i64
  %3816 = getelementptr inbounds double, ptr %31, i64 %3815
  %3817 = getelementptr inbounds %struct.CompAtom, ptr %107, i64 %3805, i32 2
  %3818 = load i16, ptr %3817, align 4, !tbaa !105
  %3819 = sext i16 %3818 to i32
  %3820 = shl nsw i32 %3819, 1
  %3821 = sext i32 %3820 to i64
  %3822 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %2980, i64 %3821
  %3823 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %3822, i64 1
  %3824 = getelementptr inbounds %class.Vector, ptr %990, i64 %3805
  %3825 = getelementptr inbounds %struct.CompAtom, ptr %107, i64 %3805, i32 1
  %3826 = load float, ptr %3825, align 8, !tbaa !104
  %3827 = fpext float %3826 to double
  %3828 = fmul double %2971, %3827
  %3829 = load <2 x double>, ptr %3806, align 8, !tbaa !19
  %3830 = fsub <2 x double> %1060, %3829
  %3831 = getelementptr inbounds %class.Vector, ptr %3806, i64 0, i32 2
  %3832 = load double, ptr %3831, align 8, !tbaa !49
  %3833 = fsub double %1063, %3832
  %3834 = load double, ptr %3823, align 8, !tbaa !109
  %3835 = fmul double %32, %3834
  %3836 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %3822, i64 1, i32 1
  %3837 = load double, ptr %3836, align 8, !tbaa !111
  %3838 = fmul double %32, %3837
  %3839 = fsub double %3808, %35
  call void @_Z24fep_vdw_forceandenergiesdddddddddiidddPdS_S_(double noundef %3835, double noundef %3838, double noundef %3839, double noundef %84, double noundef %91, double noundef %39, double noundef %40, double noundef %82, double noundef %89, i32 noundef %47, i32 noundef %48, double noundef %49, double noundef %50, double noundef %44, ptr noundef nonnull %3, ptr noundef nonnull %4, ptr noundef nonnull %5)
  %3840 = load double, ptr %3, align 8, !tbaa !19
  %3841 = load double, ptr %5, align 8, !tbaa !19
  %3842 = insertelement <2 x double> poison, double %3841, i64 0
  %3843 = insertelement <2 x double> %3842, double %3840, i64 1
  %3844 = fadd <2 x double> %3797, %3843
  %3845 = getelementptr inbounds double, ptr %3816, i64 8
  %3846 = load double, ptr %3845, align 8, !tbaa !19
  %3847 = getelementptr inbounds double, ptr %3816, i64 9
  %3848 = load double, ptr %3847, align 8, !tbaa !19
  %3849 = getelementptr inbounds double, ptr %3816, i64 10
  %3850 = load double, ptr %3849, align 8, !tbaa !19
  %3851 = getelementptr inbounds double, ptr %3816, i64 11
  %3852 = load double, ptr %3851, align 8, !tbaa !19
  %3853 = getelementptr inbounds double, ptr %3816, i64 12
  %3854 = load double, ptr %3853, align 8, !tbaa !19
  %3855 = call double @llvm.fmuladd.f64(double %1018, double %3854, double %3846)
  %3856 = getelementptr inbounds double, ptr %3816, i64 13
  %3857 = load double, ptr %3856, align 8, !tbaa !19
  %3858 = call double @llvm.fmuladd.f64(double %1018, double %3857, double %3848)
  %3859 = getelementptr inbounds double, ptr %3816, i64 14
  %3860 = load double, ptr %3859, align 8, !tbaa !19
  %3861 = call double @llvm.fmuladd.f64(double %1018, double %3860, double %3850)
  %3862 = getelementptr inbounds double, ptr %3816, i64 15
  %3863 = load double, ptr %3862, align 8, !tbaa !19
  %3864 = call double @llvm.fmuladd.f64(double %1018, double %3863, double %3852)
  %3865 = fmul double %3828, %3855
  %3866 = fmul double %3828, %3858
  %3867 = fmul double %3828, %3861
  %3868 = fmul double %3828, %3864
  %3869 = fmul double %3813, %3865
  %3870 = fmul double %3866, 2.500000e-01
  %3871 = call double @llvm.fmuladd.f64(double %3869, double 0x3FC5555555555555, double %3870)
  %3872 = fmul double %3867, 5.000000e-01
  %3873 = call double @llvm.fmuladd.f64(double %3871, double %3813, double %3872)
  %3874 = call double @llvm.fmuladd.f64(double %3873, double %3813, double %3868)
  %3875 = insertelement <2 x double> poison, double %3874, i64 0
  %3876 = shufflevector <2 x double> %3875, <2 x double> poison, <2 x i32> zeroinitializer
  %3877 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %1020, <2 x double> %3876, <2 x double> %3796)
  %3878 = call double @llvm.fmuladd.f64(double %3813, double %3865, double %3866)
  %3879 = call double @llvm.fmuladd.f64(double %3878, double %3813, double %3867)
  %3880 = fmul double %1026, %3879
  %3881 = load double, ptr %4, align 8, !tbaa !19
  %3882 = fadd double %3881, %3880
  %3883 = extractelement <2 x double> %3830, i64 1
  %3884 = fmul double %3883, %3882
  %3885 = insertelement <2 x double> poison, double %3884, i64 0
  %3886 = shufflevector <2 x double> %3885, <2 x double> poison, <2 x i32> zeroinitializer
  %3887 = shufflevector <2 x double> %3830, <2 x double> poison, <2 x i32> <i32 1, i32 0>
  %3888 = insertelement <2 x double> %3887, double %3833, i64 1
  %3889 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %3886, <2 x double> %3888, <2 x double> %3793)
  %3890 = insertelement <2 x double> %3887, double %3833, i64 0
  %3891 = insertelement <2 x double> poison, double %3882, i64 0
  %3892 = shufflevector <2 x double> %3891, <2 x double> poison, <2 x i32> zeroinitializer
  %3893 = fmul <2 x double> %3890, %3892
  %3894 = shufflevector <2 x double> %3893, <2 x double> poison, <2 x i32> <i32 1, i32 poison>
  %3895 = shufflevector <2 x double> %3893, <2 x double> poison, <2 x i32> <i32 1, i32 1>
  %3896 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %3895, <2 x double> %3830, <2 x double> %3792)
  %3897 = insertelement <2 x double> %3894, double %3884, i64 1
  %3898 = fadd <2 x double> %3795, %3897
  %3899 = load <2 x double>, ptr %3824, align 8, !tbaa !19
  %3900 = fsub <2 x double> %3899, %3897
  store <2 x double> %3900, ptr %3824, align 8, !tbaa !19
  %3901 = shufflevector <2 x double> %3890, <2 x double> poison, <2 x i32> zeroinitializer
  %3902 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %3893, <2 x double> %3901, <2 x double> %3794)
  %3903 = extractelement <2 x double> %3893, i64 0
  %3904 = fadd double %3791, %3903
  %3905 = getelementptr inbounds %class.Vector, ptr %990, i64 %3805, i32 2
  %3906 = load double, ptr %3905, align 8, !tbaa !112
  %3907 = fsub double %3906, %3903
  store double %3907, ptr %3905, align 8, !tbaa !112
  %3908 = add nuw nsw i64 %3790, 1
  %3909 = icmp eq i64 %3908, %3788
  br i1 %3909, label %3910, label %3789

3910:                                             ; preds = %3789, %3775
  %3911 = phi double [ %3776, %3775 ], [ %3904, %3789 ]
  %3912 = phi <2 x double> [ %3777, %3775 ], [ %3896, %3789 ]
  %3913 = phi <2 x double> [ %3778, %3775 ], [ %3889, %3789 ]
  %3914 = phi <2 x double> [ %3779, %3775 ], [ %3902, %3789 ]
  %3915 = phi <2 x double> [ %3780, %3775 ], [ %3898, %3789 ]
  %3916 = phi <2 x double> [ %3781, %3775 ], [ %3877, %3789 ]
  %3917 = phi <2 x double> [ %3782, %3775 ], [ %3844, %3789 ]
  %3918 = load double, ptr @_ZN20ComputeNonbondedUtil7cutoff2E, align 8, !tbaa !19
  %3919 = call noundef i32 @_Z22pairlist_from_pairlistddddPK8CompAtomPKtiPtdPd(double noundef %3918, double noundef %2982, double noundef %2983, double noundef %1063, ptr noundef %107, ptr noundef %2952, i32 noundef %2953, ptr noundef %160, double noundef %35, ptr noundef %206)
  %3920 = add nsw i32 %3785, %3919
  %3921 = icmp sgt i32 %3919, 0
  br i1 %3921, label %3922, label %4024

3922:                                             ; preds = %3910
  %3923 = load ptr, ptr @_ZN20ComputeNonbondedUtil8r2_tableE, align 8, !tbaa !23
  %3924 = zext i32 %3919 to i64
  br label %3925

3925:                                             ; preds = %3922, %3925
  %3926 = phi i64 [ 0, %3922 ], [ %4022, %3925 ]
  %3927 = phi double [ %3911, %3922 ], [ %4018, %3925 ]
  %3928 = phi <2 x double> [ %3912, %3922 ], [ %4010, %3925 ]
  %3929 = phi <2 x double> [ %3913, %3922 ], [ %4003, %3925 ]
  %3930 = phi <2 x double> [ %3914, %3922 ], [ %4016, %3925 ]
  %3931 = phi <2 x double> [ %3915, %3922 ], [ %4012, %3925 ]
  %3932 = phi <2 x double> [ %3916, %3922 ], [ %3993, %3925 ]
  %3933 = shl nuw nsw i64 %3926, 1
  %3934 = getelementptr inbounds i32, ptr %207, i64 %3933
  %3935 = load i32, ptr %3934, align 4, !tbaa !5
  %3936 = ashr i32 %3935, 14
  %3937 = add nsw i32 %3936, %38
  %3938 = getelementptr inbounds i16, ptr %160, i64 %3926
  %3939 = load i16, ptr %3938, align 2, !tbaa !44
  %3940 = zext i16 %3939 to i64
  %3941 = getelementptr inbounds %struct.CompAtom, ptr %107, i64 %3940
  %3942 = getelementptr inbounds double, ptr %206, i64 %3926
  %3943 = load double, ptr %3942, align 8, !tbaa !19
  %3944 = sext i32 %3937 to i64
  %3945 = getelementptr inbounds double, ptr %3923, i64 %3944
  %3946 = load double, ptr %3945, align 8, !tbaa !19
  %3947 = fsub double %3943, %3946
  %3948 = shl nsw i32 %3937, 4
  %3949 = sext i32 %3948 to i64
  %3950 = getelementptr inbounds double, ptr %31, i64 %3949
  %3951 = getelementptr inbounds %class.Vector, ptr %990, i64 %3940
  %3952 = getelementptr inbounds %struct.CompAtom, ptr %107, i64 %3940, i32 1
  %3953 = load float, ptr %3952, align 8, !tbaa !104
  %3954 = fpext float %3953 to double
  %3955 = fmul double %2971, %3954
  %3956 = load <2 x double>, ptr %3941, align 8, !tbaa !19
  %3957 = fsub <2 x double> %1060, %3956
  %3958 = getelementptr inbounds %class.Vector, ptr %3941, i64 0, i32 2
  %3959 = load double, ptr %3958, align 8, !tbaa !49
  %3960 = fsub double %1063, %3959
  %3961 = getelementptr inbounds double, ptr %3950, i64 8
  %3962 = load double, ptr %3961, align 8, !tbaa !19
  %3963 = getelementptr inbounds double, ptr %3950, i64 9
  %3964 = load double, ptr %3963, align 8, !tbaa !19
  %3965 = getelementptr inbounds double, ptr %3950, i64 10
  %3966 = load double, ptr %3965, align 8, !tbaa !19
  %3967 = getelementptr inbounds double, ptr %3950, i64 11
  %3968 = load double, ptr %3967, align 8, !tbaa !19
  %3969 = getelementptr inbounds double, ptr %3950, i64 12
  %3970 = load double, ptr %3969, align 8, !tbaa !19
  %3971 = fsub double %3962, %3970
  %3972 = getelementptr inbounds double, ptr %3950, i64 13
  %3973 = load double, ptr %3972, align 8, !tbaa !19
  %3974 = fsub double %3964, %3973
  %3975 = getelementptr inbounds double, ptr %3950, i64 14
  %3976 = load double, ptr %3975, align 8, !tbaa !19
  %3977 = fsub double %3966, %3976
  %3978 = getelementptr inbounds double, ptr %3950, i64 15
  %3979 = load double, ptr %3978, align 8, !tbaa !19
  %3980 = fsub double %3968, %3979
  %3981 = fmul double %3955, %3971
  %3982 = fmul double %3955, %3974
  %3983 = fmul double %3955, %3977
  %3984 = fmul double %3955, %3980
  %3985 = fmul double %3947, %3981
  %3986 = fmul double %3982, 2.500000e-01
  %3987 = call double @llvm.fmuladd.f64(double %3985, double 0x3FC5555555555555, double %3986)
  %3988 = fmul double %3983, 5.000000e-01
  %3989 = call double @llvm.fmuladd.f64(double %3987, double %3947, double %3988)
  %3990 = call double @llvm.fmuladd.f64(double %3989, double %3947, double %3984)
  %3991 = insertelement <2 x double> poison, double %3990, i64 0
  %3992 = shufflevector <2 x double> %3991, <2 x double> poison, <2 x i32> zeroinitializer
  %3993 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %1019, <2 x double> %3992, <2 x double> %3932)
  %3994 = call double @llvm.fmuladd.f64(double %3947, double %3981, double %3982)
  %3995 = call double @llvm.fmuladd.f64(double %3994, double %3947, double %3983)
  %3996 = fmul double %1027, %3995
  %3997 = extractelement <2 x double> %3957, i64 1
  %3998 = fmul double %3997, %3996
  %3999 = insertelement <2 x double> poison, double %3998, i64 0
  %4000 = shufflevector <2 x double> %3999, <2 x double> poison, <2 x i32> zeroinitializer
  %4001 = shufflevector <2 x double> %3957, <2 x double> poison, <2 x i32> <i32 1, i32 0>
  %4002 = insertelement <2 x double> %4001, double %3960, i64 1
  %4003 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %4000, <2 x double> %4002, <2 x double> %3929)
  %4004 = insertelement <2 x double> %4001, double %3960, i64 0
  %4005 = insertelement <2 x double> poison, double %3996, i64 0
  %4006 = shufflevector <2 x double> %4005, <2 x double> poison, <2 x i32> zeroinitializer
  %4007 = fmul <2 x double> %4004, %4006
  %4008 = shufflevector <2 x double> %4007, <2 x double> poison, <2 x i32> <i32 1, i32 poison>
  %4009 = shufflevector <2 x double> %4007, <2 x double> poison, <2 x i32> <i32 1, i32 1>
  %4010 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %4009, <2 x double> %3957, <2 x double> %3928)
  %4011 = insertelement <2 x double> %4008, double %3998, i64 1
  %4012 = fadd <2 x double> %3931, %4011
  %4013 = load <2 x double>, ptr %3951, align 8, !tbaa !19
  %4014 = fsub <2 x double> %4013, %4011
  store <2 x double> %4014, ptr %3951, align 8, !tbaa !19
  %4015 = shufflevector <2 x double> %4004, <2 x double> poison, <2 x i32> zeroinitializer
  %4016 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %4007, <2 x double> %4015, <2 x double> %3930)
  %4017 = extractelement <2 x double> %4007, i64 0
  %4018 = fadd double %3927, %4017
  %4019 = getelementptr inbounds %class.Vector, ptr %990, i64 %3940, i32 2
  %4020 = load double, ptr %4019, align 8, !tbaa !112
  %4021 = fsub double %4020, %4017
  store double %4021, ptr %4019, align 8, !tbaa !112
  %4022 = add nuw nsw i64 %3926, 1
  %4023 = icmp eq i64 %4022, %3924
  br i1 %4023, label %4024, label %3925

4024:                                             ; preds = %3925, %3910
  %4025 = phi double [ %3911, %3910 ], [ %4018, %3925 ]
  %4026 = phi <2 x double> [ %3912, %3910 ], [ %4010, %3925 ]
  %4027 = phi <2 x double> [ %3913, %3910 ], [ %4003, %3925 ]
  %4028 = phi <2 x double> [ %3914, %3910 ], [ %4016, %3925 ]
  %4029 = phi <2 x double> [ %3915, %3910 ], [ %4012, %3925 ]
  %4030 = phi <2 x double> [ %3916, %3910 ], [ %3993, %3925 ]
  %4031 = load double, ptr @_ZN20ComputeNonbondedUtil7cutoff2E, align 8, !tbaa !19
  %4032 = call noundef i32 @_Z22pairlist_from_pairlistddddPK8CompAtomPKtiPtdPd(double noundef %4031, double noundef %2982, double noundef %2983, double noundef %1063, ptr noundef %107, ptr noundef %2958, i32 noundef %2959, ptr noundef %160, double noundef %35, ptr noundef %206)
  %4033 = add nsw i32 %3920, %4032
  %4034 = icmp sgt i32 %4032, 0
  br i1 %4034, label %4035, label %4137

4035:                                             ; preds = %4024
  %4036 = load ptr, ptr @_ZN20ComputeNonbondedUtil8r2_tableE, align 8, !tbaa !23
  %4037 = zext i32 %4032 to i64
  br label %4038

4038:                                             ; preds = %4035, %4038
  %4039 = phi i64 [ 0, %4035 ], [ %4135, %4038 ]
  %4040 = phi double [ %4025, %4035 ], [ %4131, %4038 ]
  %4041 = phi <2 x double> [ %4026, %4035 ], [ %4123, %4038 ]
  %4042 = phi <2 x double> [ %4027, %4035 ], [ %4116, %4038 ]
  %4043 = phi <2 x double> [ %4028, %4035 ], [ %4129, %4038 ]
  %4044 = phi <2 x double> [ %4029, %4035 ], [ %4125, %4038 ]
  %4045 = phi <2 x double> [ %4030, %4035 ], [ %4106, %4038 ]
  %4046 = shl nuw nsw i64 %4039, 1
  %4047 = getelementptr inbounds i32, ptr %207, i64 %4046
  %4048 = load i32, ptr %4047, align 4, !tbaa !5
  %4049 = ashr i32 %4048, 14
  %4050 = add nsw i32 %4049, %38
  %4051 = getelementptr inbounds i16, ptr %160, i64 %4039
  %4052 = load i16, ptr %4051, align 2, !tbaa !44
  %4053 = zext i16 %4052 to i64
  %4054 = getelementptr inbounds %struct.CompAtom, ptr %107, i64 %4053
  %4055 = getelementptr inbounds double, ptr %206, i64 %4039
  %4056 = load double, ptr %4055, align 8, !tbaa !19
  %4057 = sext i32 %4050 to i64
  %4058 = getelementptr inbounds double, ptr %4036, i64 %4057
  %4059 = load double, ptr %4058, align 8, !tbaa !19
  %4060 = fsub double %4056, %4059
  %4061 = shl nsw i32 %4050, 4
  %4062 = sext i32 %4061 to i64
  %4063 = getelementptr inbounds double, ptr %31, i64 %4062
  %4064 = getelementptr inbounds %class.Vector, ptr %990, i64 %4053
  %4065 = getelementptr inbounds %struct.CompAtom, ptr %107, i64 %4053, i32 1
  %4066 = load float, ptr %4065, align 8, !tbaa !104
  %4067 = fpext float %4066 to double
  %4068 = fmul double %2971, %4067
  %4069 = load <2 x double>, ptr %4054, align 8, !tbaa !19
  %4070 = fsub <2 x double> %1060, %4069
  %4071 = getelementptr inbounds %class.Vector, ptr %4054, i64 0, i32 2
  %4072 = load double, ptr %4071, align 8, !tbaa !49
  %4073 = fsub double %1063, %4072
  %4074 = getelementptr inbounds double, ptr %4063, i64 8
  %4075 = load double, ptr %4074, align 8, !tbaa !19
  %4076 = getelementptr inbounds double, ptr %4063, i64 9
  %4077 = load double, ptr %4076, align 8, !tbaa !19
  %4078 = getelementptr inbounds double, ptr %4063, i64 10
  %4079 = load double, ptr %4078, align 8, !tbaa !19
  %4080 = getelementptr inbounds double, ptr %4063, i64 11
  %4081 = load double, ptr %4080, align 8, !tbaa !19
  %4082 = getelementptr inbounds double, ptr %4063, i64 12
  %4083 = load double, ptr %4082, align 8, !tbaa !19
  %4084 = fsub double %4075, %4083
  %4085 = getelementptr inbounds double, ptr %4063, i64 13
  %4086 = load double, ptr %4085, align 8, !tbaa !19
  %4087 = fsub double %4077, %4086
  %4088 = getelementptr inbounds double, ptr %4063, i64 14
  %4089 = load double, ptr %4088, align 8, !tbaa !19
  %4090 = fsub double %4079, %4089
  %4091 = getelementptr inbounds double, ptr %4063, i64 15
  %4092 = load double, ptr %4091, align 8, !tbaa !19
  %4093 = fsub double %4081, %4092
  %4094 = fmul double %4068, %4084
  %4095 = fmul double %4068, %4087
  %4096 = fmul double %4068, %4090
  %4097 = fmul double %4068, %4093
  %4098 = fmul double %4060, %4094
  %4099 = fmul double %4095, 2.500000e-01
  %4100 = call double @llvm.fmuladd.f64(double %4098, double 0x3FC5555555555555, double %4099)
  %4101 = fmul double %4096, 5.000000e-01
  %4102 = call double @llvm.fmuladd.f64(double %4100, double %4060, double %4101)
  %4103 = call double @llvm.fmuladd.f64(double %4102, double %4060, double %4097)
  %4104 = insertelement <2 x double> poison, double %4103, i64 0
  %4105 = shufflevector <2 x double> %4104, <2 x double> poison, <2 x i32> zeroinitializer
  %4106 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %1020, <2 x double> %4105, <2 x double> %4045)
  %4107 = call double @llvm.fmuladd.f64(double %4060, double %4094, double %4095)
  %4108 = call double @llvm.fmuladd.f64(double %4107, double %4060, double %4096)
  %4109 = fmul double %1028, %4108
  %4110 = extractelement <2 x double> %4070, i64 1
  %4111 = fmul double %4110, %4109
  %4112 = insertelement <2 x double> poison, double %4111, i64 0
  %4113 = shufflevector <2 x double> %4112, <2 x double> poison, <2 x i32> zeroinitializer
  %4114 = shufflevector <2 x double> %4070, <2 x double> poison, <2 x i32> <i32 1, i32 0>
  %4115 = insertelement <2 x double> %4114, double %4073, i64 1
  %4116 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %4113, <2 x double> %4115, <2 x double> %4042)
  %4117 = insertelement <2 x double> %4114, double %4073, i64 0
  %4118 = insertelement <2 x double> poison, double %4109, i64 0
  %4119 = shufflevector <2 x double> %4118, <2 x double> poison, <2 x i32> zeroinitializer
  %4120 = fmul <2 x double> %4117, %4119
  %4121 = shufflevector <2 x double> %4120, <2 x double> poison, <2 x i32> <i32 1, i32 poison>
  %4122 = shufflevector <2 x double> %4120, <2 x double> poison, <2 x i32> <i32 1, i32 1>
  %4123 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %4122, <2 x double> %4070, <2 x double> %4041)
  %4124 = insertelement <2 x double> %4121, double %4111, i64 1
  %4125 = fadd <2 x double> %4044, %4124
  %4126 = load <2 x double>, ptr %4064, align 8, !tbaa !19
  %4127 = fsub <2 x double> %4126, %4124
  store <2 x double> %4127, ptr %4064, align 8, !tbaa !19
  %4128 = shufflevector <2 x double> %4117, <2 x double> poison, <2 x i32> zeroinitializer
  %4129 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %4120, <2 x double> %4128, <2 x double> %4043)
  %4130 = extractelement <2 x double> %4120, i64 0
  %4131 = fadd double %4040, %4130
  %4132 = getelementptr inbounds %class.Vector, ptr %990, i64 %4053, i32 2
  %4133 = load double, ptr %4132, align 8, !tbaa !112
  %4134 = fsub double %4133, %4130
  store double %4134, ptr %4132, align 8, !tbaa !112
  %4135 = add nuw nsw i64 %4039, 1
  %4136 = icmp eq i64 %4135, %4037
  br i1 %4136, label %4137, label %4038

4137:                                             ; preds = %4038, %4024
  %4138 = phi double [ %4025, %4024 ], [ %4131, %4038 ]
  %4139 = phi <2 x double> [ %4026, %4024 ], [ %4123, %4038 ]
  %4140 = phi <2 x double> [ %4027, %4024 ], [ %4116, %4038 ]
  %4141 = phi <2 x double> [ %4028, %4024 ], [ %4129, %4038 ]
  %4142 = phi <2 x double> [ %4029, %4024 ], [ %4125, %4038 ]
  %4143 = phi <2 x double> [ %4030, %4024 ], [ %4106, %4038 ]
  %4144 = getelementptr inbounds %class.Vector, ptr %991, i64 %1042
  %4145 = load <2 x double>, ptr %4144, align 8, !tbaa !19
  %4146 = fadd <2 x double> %4142, %4145
  store <2 x double> %4146, ptr %4144, align 8, !tbaa !19
  %4147 = getelementptr inbounds %class.Vector, ptr %991, i64 %1042, i32 2
  %4148 = load double, ptr %4147, align 8, !tbaa !112
  %4149 = fadd double %4138, %4148
  store double %4149, ptr %4147, align 8, !tbaa !112
  br i1 %210, label %4152, label %4150

4150:                                             ; preds = %4137
  %4151 = add nsw i32 %1031, 1
  br label %4160

4152:                                             ; preds = %4137
  %4153 = load ptr, ptr %12, align 8, !tbaa !46
  %4154 = load i32, ptr %17, align 8, !tbaa !17
  %4155 = add nsw i32 %4154, 1
  store i32 %4155, ptr %17, align 8, !tbaa !17
  %4156 = sext i32 %4154 to i64
  %4157 = getelementptr inbounds i16, ptr %4153, i64 %4156
  %4158 = load i16, ptr %4157, align 2, !tbaa !44
  %4159 = zext i16 %4158 to i32
  br label %4160

4160:                                             ; preds = %4152, %4150
  %4161 = phi i32 [ %4159, %4152 ], [ %4151, %4150 ]
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %5) #11
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %4) #11
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %3) #11
  %4162 = shufflevector <2 x double> %4143, <2 x double> poison, <2 x i32> <i32 1, i32 poison>
  %4163 = shufflevector <2 x double> %4162, <2 x double> %3917, <2 x i32> <i32 0, i32 3>
  %4164 = shufflevector <2 x double> %4143, <2 x double> %3917, <2 x i32> <i32 0, i32 2>
  br label %4165

4165:                                             ; preds = %1489, %1757, %4160, %1054
  %4166 = phi i32 [ %1058, %4160 ], [ %1055, %1054 ], [ %1058, %1757 ], [ %1058, %1489 ]
  %4167 = phi i32 [ %2962, %4160 ], [ %1035, %1054 ], [ %1503, %1757 ], [ 0, %1489 ]
  %4168 = phi ptr [ %2963, %4160 ], [ %1034, %1054 ], [ %1312, %1757 ], [ %1312, %1489 ]
  %4169 = phi ptr [ %2964, %4160 ], [ %1033, %1054 ], [ %1313, %1757 ], [ %1313, %1489 ]
  %4170 = phi ptr [ %2965, %4160 ], [ %1032, %1054 ], [ %1314, %1757 ], [ %1314, %1489 ]
  %4171 = phi i32 [ %4161, %4160 ], [ %1056, %1054 ], [ %1758, %1757 ], [ %1493, %1489 ]
  %4172 = phi i32 [ %4033, %4160 ], [ %1030, %1054 ], [ %1030, %1757 ], [ %1030, %1489 ]
  %4173 = phi <2 x double> [ %4163, %4160 ], [ %1037, %1054 ], [ %1037, %1757 ], [ %1037, %1489 ]
  %4174 = phi <2 x double> [ %4164, %4160 ], [ %1038, %1054 ], [ %1038, %1757 ], [ %1038, %1489 ]
  %4175 = phi <2 x double> [ %4139, %4160 ], [ %1039, %1054 ], [ %1039, %1757 ], [ %1039, %1489 ]
  %4176 = phi <2 x double> [ %4140, %4160 ], [ %1040, %1054 ], [ %1040, %1757 ], [ %1040, %1489 ]
  %4177 = phi <2 x double> [ %4141, %4160 ], [ %1041, %1054 ], [ %1041, %1757 ], [ %1041, %1489 ]
  %4178 = icmp slt i32 %4171, %102
  br i1 %4178, label %1029, label %4179

4179:                                             ; preds = %4165, %987
  %4180 = phi ptr [ null, %987 ], [ %4170, %4165 ]
  %4181 = phi i32 [ %994, %987 ], [ %4171, %4165 ]
  %4182 = phi i32 [ 0, %987 ], [ %4172, %4165 ]
  %4183 = phi <2 x double> [ zeroinitializer, %987 ], [ %4173, %4165 ]
  %4184 = phi <2 x double> [ zeroinitializer, %987 ], [ %4174, %4165 ]
  %4185 = phi <2 x double> [ zeroinitializer, %987 ], [ %4175, %4165 ]
  %4186 = phi <2 x double> [ zeroinitializer, %987 ], [ %4176, %4165 ]
  %4187 = phi <2 x double> [ zeroinitializer, %987 ], [ %4177, %4165 ]
  br i1 %208, label %4195, label %4188

4188:                                             ; preds = %4179
  %4189 = trunc i32 %4181 to i16
  %4190 = load ptr, ptr %12, align 8, !tbaa !46
  %4191 = load i32, ptr %17, align 8, !tbaa !17
  %4192 = add nsw i32 %4191, -1
  %4193 = sext i32 %4192 to i64
  %4194 = getelementptr inbounds i16, ptr %4190, i64 %4193
  store i16 %4189, ptr %4194, align 2, !tbaa !44
  br label %4195

4195:                                             ; preds = %4188, %4179
  %4196 = sitofp i32 %4182 to double
  %4197 = getelementptr inbounds double, ptr %10, i64 22
  %4198 = load double, ptr %4197, align 8, !tbaa !19
  %4199 = fadd double %4198, %4196
  store double %4199, ptr %4197, align 8, !tbaa !19
  %4200 = getelementptr inbounds double, ptr %10, i64 1
  %4201 = load <2 x double>, ptr %4200, align 8, !tbaa !19
  %4202 = fadd <2 x double> %4183, %4201
  store <2 x double> %4202, ptr %4200, align 8, !tbaa !19
  %4203 = getelementptr inbounds double, ptr %10, i64 24
  %4204 = load <2 x double>, ptr %4203, align 8, !tbaa !19
  %4205 = fadd <2 x double> %4184, %4204
  store <2 x double> %4205, ptr %4203, align 8, !tbaa !19
  %4206 = getelementptr inbounds double, ptr %10, i64 12
  %4207 = load <4 x double>, ptr %4206, align 8, !tbaa !19
  %4208 = shufflevector <2 x double> %4185, <2 x double> %4187, <4 x i32> <i32 0, i32 1, i32 3, i32 poison>
  %4209 = shufflevector <4 x double> %4208, <4 x double> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 1>
  %4210 = fadd <4 x double> %4209, %4207
  store <4 x double> %4210, ptr %4206, align 8, !tbaa !19
  %4211 = getelementptr inbounds double, ptr %10, i64 16
  %4212 = load <4 x double>, ptr %4211, align 8, !tbaa !19
  %4213 = shufflevector <2 x double> %4186, <2 x double> %4187, <4 x i32> <i32 0, i32 1, i32 3, i32 poison>
  %4214 = shufflevector <4 x double> %4213, <4 x double> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 1>
  %4215 = fadd <4 x double> %4214, %4212
  store <4 x double> %4215, ptr %4211, align 8, !tbaa !19
  %4216 = getelementptr inbounds double, ptr %10, i64 20
  %4217 = load double, ptr %4216, align 8, !tbaa !19
  %4218 = extractelement <2 x double> %4187, i64 0
  %4219 = fadd double %4218, %4217
  store double %4219, ptr %4216, align 8, !tbaa !19
  %4220 = icmp eq ptr %4180, null
  br i1 %4220, label %4222, label %4221

4221:                                             ; preds = %4195
  call void @_ZdaPv(ptr noundef nonnull %4180) #13
  br label %4222

4222:                                             ; preds = %4221, %4195
  call void @llvm.lifetime.end.p0(i64 36, ptr nonnull %2) #11
  br label %4223

4223:                                             ; preds = %1, %4222
  ret void
}

; Function Attrs: sspstrong uwtable
define dso_local void @_ZN20ComputeNonbondedUtil35calc_pair_energy_slow_fullelect_fepEP9nonbonded(ptr nocapture noundef readonly %0) local_unnamed_addr #0 align 2 {
  %2 = alloca [9 x i32], align 16
  %3 = load i32, ptr @_ZN20ComputeNonbondedUtil8commOnlyE, align 4, !tbaa !5
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %5, label %3997

5:                                                ; preds = %1
  %6 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 7
  %7 = load ptr, ptr %6, align 8, !tbaa !9
  %8 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 10
  %9 = load ptr, ptr %8, align 8, !tbaa !14
  %10 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 11
  %11 = load i32, ptr %10, align 8, !tbaa !15
  %12 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 12
  %13 = load i32, ptr %12, align 4, !tbaa !16
  %14 = getelementptr inbounds %class.Pairlists, ptr %9, i64 0, i32 1
  store i32 0, ptr %14, align 8, !tbaa !17
  %15 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 6
  %16 = load <2 x double>, ptr %15, align 8, !tbaa !19
  %17 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 6, i32 2
  %18 = load double, ptr %17, align 8, !tbaa !20
  %19 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 13
  %20 = load double, ptr %19, align 8, !tbaa !21
  %21 = fmul double %20, %20
  %22 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 14
  %23 = load double, ptr %22, align 8, !tbaa !22
  %24 = fmul double %23, %23
  %25 = load double, ptr @_ZN20ComputeNonbondedUtil12dielectric_1E, align 8, !tbaa !19
  %26 = load ptr, ptr @_ZN20ComputeNonbondedUtil3molE, align 8, !tbaa !23
  %27 = load ptr, ptr @_ZN20ComputeNonbondedUtil11table_shortE, align 8, !tbaa !23
  %28 = load ptr, ptr @_ZN20ComputeNonbondedUtil10slow_tableE, align 8, !tbaa !23
  %29 = load double, ptr @_ZN20ComputeNonbondedUtil7scalingE, align 8, !tbaa !19
  %30 = load double, ptr @_ZN20ComputeNonbondedUtil7scale14E, align 8, !tbaa !19
  %31 = fsub double 1.000000e+00, %30
  %32 = load double, ptr @_ZN20ComputeNonbondedUtil8r2_deltaE, align 8, !tbaa !19
  %33 = load i32, ptr @_ZN20ComputeNonbondedUtil12r2_delta_expE, align 4, !tbaa !5
  %34 = shl i32 %33, 6
  %35 = add i32 %34, -65472
  %36 = load double, ptr @_ZN20ComputeNonbondedUtil19alchElecLambdaStartE, align 8, !tbaa !19
  %37 = load double, ptr @_ZN20ComputeNonbondedUtil10alchLambdaE, align 8, !tbaa !19
  %38 = fsub double 1.000000e+00, %36
  %39 = load double, ptr @_ZN20ComputeNonbondedUtil11alchLambda2E, align 8, !tbaa !19
  %40 = insertelement <2 x double> poison, double %39, i64 0
  %41 = insertelement <2 x double> %40, double %37, i64 1
  %42 = insertelement <2 x double> poison, double %36, i64 0
  %43 = shufflevector <2 x double> %42, <2 x double> poison, <2 x i32> zeroinitializer
  %44 = fsub <2 x double> %41, %43
  %45 = fcmp ugt <2 x double> %41, %43
  %46 = insertelement <2 x double> poison, double %38, i64 0
  %47 = shufflevector <2 x double> %46, <2 x double> poison, <2 x i32> zeroinitializer
  %48 = fdiv <2 x double> %44, %47
  %49 = select <2 x i1> %45, <2 x double> %48, <2 x double> zeroinitializer
  %50 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %41
  %51 = fcmp ugt <2 x double> %50, %43
  %52 = fsub <2 x double> %50, %43
  %53 = fdiv <2 x double> %52, %47
  %54 = select <2 x i1> %51, <2 x double> %53, <2 x double> zeroinitializer
  call void @llvm.lifetime.start.p0(i64 36, ptr nonnull %2) #11
  %55 = load i32, ptr @_ZN20ComputeNonbondedUtil12alchDecoupleE, align 4, !tbaa !5
  %56 = icmp eq i32 %55, 0
  %57 = getelementptr inbounds [9 x i32], ptr %2, i64 0, i64 6
  store i32 2, ptr %57, align 8, !tbaa !5
  %58 = getelementptr inbounds [9 x i32], ptr %2, i64 0, i64 4
  %59 = getelementptr inbounds [9 x i32], ptr %2, i64 0, i64 7
  %60 = getelementptr inbounds [9 x i32], ptr %2, i64 0, i64 5
  %61 = getelementptr inbounds [9 x i32], ptr %2, i64 0, i64 8
  %62 = zext i1 %56 to i32
  %63 = select i1 %56, i32 2, i32 0
  store i32 %62, ptr %58, align 16, !tbaa !5
  store i32 99, ptr %59, align 4, !tbaa !5
  store <4 x i32> <i32 0, i32 1, i32 2, i32 1>, ptr %2, align 16, !tbaa !5
  store i32 99, ptr %60, align 4, !tbaa !5
  store i32 %63, ptr %61, align 16, !tbaa !5
  %64 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 5
  %65 = load i32, ptr %64, align 8, !tbaa !5
  %66 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 5, i64 1
  %67 = load i32, ptr %66, align 4, !tbaa !5
  %68 = load ptr, ptr %0, align 8, !tbaa !23
  %69 = getelementptr inbounds [2 x ptr], ptr %0, i64 0, i64 1
  %70 = load ptr, ptr %69, align 8, !tbaa !23
  %71 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 1
  %72 = load ptr, ptr %71, align 8, !tbaa !23
  %73 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 1, i64 1
  %74 = load ptr, ptr %73, align 8, !tbaa !23
  %75 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 9
  %76 = load ptr, ptr %75, align 8, !tbaa !24
  %77 = add nsw i32 %67, 5
  %78 = getelementptr inbounds %class.ResizeArray, ptr %76, i64 0, i32 1
  %79 = load ptr, ptr %78, align 8, !tbaa !25
  %80 = getelementptr inbounds %class.ResizeArrayRaw, ptr %79, i64 0, i32 2
  %81 = load i32, ptr %80, align 8, !tbaa !27
  %82 = icmp slt i32 %81, %77
  br i1 %82, label %83, label %121

83:                                               ; preds = %5
  %84 = getelementptr inbounds %class.ResizeArrayRaw, ptr %79, i64 0, i32 3
  %85 = load i32, ptr %84, align 4, !tbaa !30
  %86 = icmp slt i32 %85, %77
  br i1 %86, label %87, label %121

87:                                               ; preds = %83
  %88 = sitofp i32 %85 to float
  %89 = getelementptr inbounds %class.ResizeArrayRaw, ptr %79, i64 0, i32 5
  %90 = load float, ptr %89, align 4, !tbaa !31
  %91 = fmul float %90, %88
  %92 = fptosi float %91 to i32
  %93 = tail call i32 @llvm.smax.i32(i32 %92, i32 %77)
  %94 = sub nsw i32 %93, %85
  %95 = getelementptr inbounds %class.ResizeArrayRaw, ptr %79, i64 0, i32 6
  %96 = load i32, ptr %95, align 8, !tbaa !32
  %97 = icmp slt i32 %94, %96
  %98 = add nsw i32 %96, %85
  %99 = select i1 %97, i32 %98, i32 %93
  %100 = sext i32 %99 to i64
  %101 = shl nsw i64 %100, 1
  %102 = add nsw i64 %101, 31
  %103 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %102) #12
  %104 = getelementptr inbounds i8, ptr %103, i64 31
  %105 = ptrtoint ptr %104 to i64
  %106 = and i64 %105, 31
  %107 = sub nsw i64 0, %106
  %108 = getelementptr inbounds i8, ptr %104, i64 %107
  %109 = load ptr, ptr %79, align 8, !tbaa !33
  %110 = sext i32 %81 to i64
  %111 = shl nsw i64 %110, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %108, ptr align 1 %109, i64 %111, i1 false)
  %112 = icmp eq i32 %85, 0
  br i1 %112, label %118, label %113

113:                                              ; preds = %87
  %114 = getelementptr inbounds %class.ResizeArrayRaw, ptr %79, i64 0, i32 1
  %115 = load ptr, ptr %114, align 8, !tbaa !34
  %116 = icmp eq ptr %115, null
  br i1 %116, label %118, label %117

117:                                              ; preds = %113
  tail call void @_ZdaPv(ptr noundef nonnull %115) #13
  br label %118

118:                                              ; preds = %117, %113, %87
  %119 = getelementptr inbounds %class.ResizeArrayRaw, ptr %79, i64 0, i32 1
  store ptr %103, ptr %119, align 8, !tbaa !34
  store ptr %108, ptr %79, align 8, !tbaa !33
  store i32 %99, ptr %84, align 4, !tbaa !30
  %120 = load ptr, ptr %78, align 8, !tbaa !25
  br label %121

121:                                              ; preds = %5, %83, %118
  %122 = phi ptr [ %79, %5 ], [ %79, %83 ], [ %120, %118 ]
  store i32 %77, ptr %80, align 8, !tbaa !27
  %123 = load ptr, ptr %122, align 8, !tbaa !33
  %124 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %76, i64 0, i32 1, i32 1
  %125 = load ptr, ptr %124, align 8, !tbaa !35
  %126 = getelementptr inbounds %class.ResizeArrayRaw.9, ptr %125, i64 0, i32 2
  %127 = load i32, ptr %126, align 8, !tbaa !37
  %128 = icmp slt i32 %127, %77
  br i1 %128, label %129, label %167

129:                                              ; preds = %121
  %130 = getelementptr inbounds %class.ResizeArrayRaw.9, ptr %125, i64 0, i32 3
  %131 = load i32, ptr %130, align 4, !tbaa !39
  %132 = icmp slt i32 %131, %77
  br i1 %132, label %133, label %167

133:                                              ; preds = %129
  %134 = sitofp i32 %131 to float
  %135 = getelementptr inbounds %class.ResizeArrayRaw.9, ptr %125, i64 0, i32 5
  %136 = load float, ptr %135, align 4, !tbaa !40
  %137 = fmul float %136, %134
  %138 = fptosi float %137 to i32
  %139 = tail call i32 @llvm.smax.i32(i32 %138, i32 %77)
  %140 = sub nsw i32 %139, %131
  %141 = getelementptr inbounds %class.ResizeArrayRaw.9, ptr %125, i64 0, i32 6
  %142 = load i32, ptr %141, align 8, !tbaa !41
  %143 = icmp slt i32 %140, %142
  %144 = add nsw i32 %142, %131
  %145 = select i1 %143, i32 %144, i32 %139
  %146 = sext i32 %145 to i64
  %147 = shl nsw i64 %146, 3
  %148 = add nsw i64 %147, 31
  %149 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %148) #12
  %150 = getelementptr inbounds i8, ptr %149, i64 31
  %151 = ptrtoint ptr %150 to i64
  %152 = and i64 %151, 31
  %153 = sub nsw i64 0, %152
  %154 = getelementptr inbounds i8, ptr %150, i64 %153
  %155 = load ptr, ptr %125, align 8, !tbaa !42
  %156 = sext i32 %127 to i64
  %157 = shl nsw i64 %156, 3
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %154, ptr align 1 %155, i64 %157, i1 false)
  %158 = icmp eq i32 %131, 0
  br i1 %158, label %164, label %159

159:                                              ; preds = %133
  %160 = getelementptr inbounds %class.ResizeArrayRaw.9, ptr %125, i64 0, i32 1
  %161 = load ptr, ptr %160, align 8, !tbaa !43
  %162 = icmp eq ptr %161, null
  br i1 %162, label %164, label %163

163:                                              ; preds = %159
  tail call void @_ZdaPv(ptr noundef nonnull %161) #13
  br label %164

164:                                              ; preds = %163, %159, %133
  %165 = getelementptr inbounds %class.ResizeArrayRaw.9, ptr %125, i64 0, i32 1
  store ptr %149, ptr %165, align 8, !tbaa !43
  store ptr %154, ptr %125, align 8, !tbaa !42
  store i32 %145, ptr %130, align 4, !tbaa !39
  %166 = load ptr, ptr %124, align 8, !tbaa !35
  br label %167

167:                                              ; preds = %121, %129, %164
  %168 = phi ptr [ %125, %121 ], [ %125, %129 ], [ %166, %164 ]
  store i32 %77, ptr %126, align 8, !tbaa !37
  %169 = load ptr, ptr %168, align 8, !tbaa !42
  %170 = getelementptr inbounds i32, ptr %169, i64 1
  %171 = icmp eq i32 %11, 0
  %172 = icmp ne i32 %13, 0
  %173 = select i1 %171, i1 %172, i1 false
  %174 = select i1 %173, i32 0, i32 %77
  %175 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %76, i64 0, i32 2, i32 1
  %176 = load ptr, ptr %175, align 8, !tbaa !25
  %177 = getelementptr inbounds %class.ResizeArrayRaw, ptr %176, i64 0, i32 2
  %178 = load i32, ptr %177, align 8, !tbaa !27
  %179 = icmp slt i32 %178, %174
  br i1 %179, label %180, label %218

180:                                              ; preds = %167
  %181 = getelementptr inbounds %class.ResizeArrayRaw, ptr %176, i64 0, i32 3
  %182 = load i32, ptr %181, align 4, !tbaa !30
  %183 = icmp slt i32 %182, %174
  br i1 %183, label %184, label %218

184:                                              ; preds = %180
  %185 = sitofp i32 %182 to float
  %186 = getelementptr inbounds %class.ResizeArrayRaw, ptr %176, i64 0, i32 5
  %187 = load float, ptr %186, align 4, !tbaa !31
  %188 = fmul float %187, %185
  %189 = fptosi float %188 to i32
  %190 = tail call i32 @llvm.smax.i32(i32 %189, i32 %174)
  %191 = sub nsw i32 %190, %182
  %192 = getelementptr inbounds %class.ResizeArrayRaw, ptr %176, i64 0, i32 6
  %193 = load i32, ptr %192, align 8, !tbaa !32
  %194 = icmp slt i32 %191, %193
  %195 = add nsw i32 %193, %182
  %196 = select i1 %194, i32 %195, i32 %190
  %197 = sext i32 %196 to i64
  %198 = shl nsw i64 %197, 1
  %199 = add nsw i64 %198, 31
  %200 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %199) #12
  %201 = getelementptr inbounds i8, ptr %200, i64 31
  %202 = ptrtoint ptr %201 to i64
  %203 = and i64 %202, 31
  %204 = sub nsw i64 0, %203
  %205 = getelementptr inbounds i8, ptr %201, i64 %204
  %206 = load ptr, ptr %176, align 8, !tbaa !33
  %207 = sext i32 %178 to i64
  %208 = shl nsw i64 %207, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %205, ptr align 1 %206, i64 %208, i1 false)
  %209 = icmp eq i32 %182, 0
  br i1 %209, label %215, label %210

210:                                              ; preds = %184
  %211 = getelementptr inbounds %class.ResizeArrayRaw, ptr %176, i64 0, i32 1
  %212 = load ptr, ptr %211, align 8, !tbaa !34
  %213 = icmp eq ptr %212, null
  br i1 %213, label %215, label %214

214:                                              ; preds = %210
  tail call void @_ZdaPv(ptr noundef nonnull %212) #13
  br label %215

215:                                              ; preds = %214, %210, %184
  %216 = getelementptr inbounds %class.ResizeArrayRaw, ptr %176, i64 0, i32 1
  store ptr %200, ptr %216, align 8, !tbaa !34
  store ptr %205, ptr %176, align 8, !tbaa !33
  store i32 %196, ptr %181, align 4, !tbaa !30
  %217 = load ptr, ptr %175, align 8, !tbaa !25
  br label %218

218:                                              ; preds = %167, %180, %215
  %219 = phi ptr [ %176, %167 ], [ %176, %180 ], [ %217, %215 ]
  store i32 %174, ptr %177, align 8, !tbaa !27
  %220 = load ptr, ptr %219, align 8, !tbaa !33
  %221 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %76, i64 0, i32 3, i32 1
  %222 = load ptr, ptr %221, align 8, !tbaa !25
  %223 = getelementptr inbounds %class.ResizeArrayRaw, ptr %222, i64 0, i32 2
  %224 = load i32, ptr %223, align 8, !tbaa !27
  %225 = icmp slt i32 %224, %174
  br i1 %225, label %226, label %264

226:                                              ; preds = %218
  %227 = getelementptr inbounds %class.ResizeArrayRaw, ptr %222, i64 0, i32 3
  %228 = load i32, ptr %227, align 4, !tbaa !30
  %229 = icmp slt i32 %228, %174
  br i1 %229, label %230, label %264

230:                                              ; preds = %226
  %231 = sitofp i32 %228 to float
  %232 = getelementptr inbounds %class.ResizeArrayRaw, ptr %222, i64 0, i32 5
  %233 = load float, ptr %232, align 4, !tbaa !31
  %234 = fmul float %233, %231
  %235 = fptosi float %234 to i32
  %236 = tail call i32 @llvm.smax.i32(i32 %235, i32 %174)
  %237 = sub nsw i32 %236, %228
  %238 = getelementptr inbounds %class.ResizeArrayRaw, ptr %222, i64 0, i32 6
  %239 = load i32, ptr %238, align 8, !tbaa !32
  %240 = icmp slt i32 %237, %239
  %241 = add nsw i32 %239, %228
  %242 = select i1 %240, i32 %241, i32 %236
  %243 = sext i32 %242 to i64
  %244 = shl nsw i64 %243, 1
  %245 = add nsw i64 %244, 31
  %246 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %245) #12
  %247 = getelementptr inbounds i8, ptr %246, i64 31
  %248 = ptrtoint ptr %247 to i64
  %249 = and i64 %248, 31
  %250 = sub nsw i64 0, %249
  %251 = getelementptr inbounds i8, ptr %247, i64 %250
  %252 = load ptr, ptr %222, align 8, !tbaa !33
  %253 = sext i32 %224 to i64
  %254 = shl nsw i64 %253, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %251, ptr align 1 %252, i64 %254, i1 false)
  %255 = icmp eq i32 %228, 0
  br i1 %255, label %261, label %256

256:                                              ; preds = %230
  %257 = getelementptr inbounds %class.ResizeArrayRaw, ptr %222, i64 0, i32 1
  %258 = load ptr, ptr %257, align 8, !tbaa !34
  %259 = icmp eq ptr %258, null
  br i1 %259, label %261, label %260

260:                                              ; preds = %256
  tail call void @_ZdaPv(ptr noundef nonnull %258) #13
  br label %261

261:                                              ; preds = %260, %256, %230
  %262 = getelementptr inbounds %class.ResizeArrayRaw, ptr %222, i64 0, i32 1
  store ptr %246, ptr %262, align 8, !tbaa !34
  store ptr %251, ptr %222, align 8, !tbaa !33
  store i32 %242, ptr %227, align 4, !tbaa !30
  %263 = load ptr, ptr %221, align 8, !tbaa !25
  br label %264

264:                                              ; preds = %218, %226, %261
  %265 = phi ptr [ %222, %218 ], [ %222, %226 ], [ %263, %261 ]
  store i32 %174, ptr %223, align 8, !tbaa !27
  %266 = load ptr, ptr %265, align 8, !tbaa !33
  %267 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %76, i64 0, i32 4, i32 1
  %268 = load ptr, ptr %267, align 8, !tbaa !25
  %269 = getelementptr inbounds %class.ResizeArrayRaw, ptr %268, i64 0, i32 2
  %270 = load i32, ptr %269, align 8, !tbaa !27
  %271 = icmp slt i32 %270, %174
  br i1 %271, label %272, label %310

272:                                              ; preds = %264
  %273 = getelementptr inbounds %class.ResizeArrayRaw, ptr %268, i64 0, i32 3
  %274 = load i32, ptr %273, align 4, !tbaa !30
  %275 = icmp slt i32 %274, %174
  br i1 %275, label %276, label %310

276:                                              ; preds = %272
  %277 = sitofp i32 %274 to float
  %278 = getelementptr inbounds %class.ResizeArrayRaw, ptr %268, i64 0, i32 5
  %279 = load float, ptr %278, align 4, !tbaa !31
  %280 = fmul float %279, %277
  %281 = fptosi float %280 to i32
  %282 = tail call i32 @llvm.smax.i32(i32 %281, i32 %174)
  %283 = sub nsw i32 %282, %274
  %284 = getelementptr inbounds %class.ResizeArrayRaw, ptr %268, i64 0, i32 6
  %285 = load i32, ptr %284, align 8, !tbaa !32
  %286 = icmp slt i32 %283, %285
  %287 = add nsw i32 %285, %274
  %288 = select i1 %286, i32 %287, i32 %282
  %289 = sext i32 %288 to i64
  %290 = shl nsw i64 %289, 1
  %291 = add nsw i64 %290, 31
  %292 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %291) #12
  %293 = getelementptr inbounds i8, ptr %292, i64 31
  %294 = ptrtoint ptr %293 to i64
  %295 = and i64 %294, 31
  %296 = sub nsw i64 0, %295
  %297 = getelementptr inbounds i8, ptr %293, i64 %296
  %298 = load ptr, ptr %268, align 8, !tbaa !33
  %299 = sext i32 %270 to i64
  %300 = shl nsw i64 %299, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %297, ptr align 1 %298, i64 %300, i1 false)
  %301 = icmp eq i32 %274, 0
  br i1 %301, label %307, label %302

302:                                              ; preds = %276
  %303 = getelementptr inbounds %class.ResizeArrayRaw, ptr %268, i64 0, i32 1
  %304 = load ptr, ptr %303, align 8, !tbaa !34
  %305 = icmp eq ptr %304, null
  br i1 %305, label %307, label %306

306:                                              ; preds = %302
  tail call void @_ZdaPv(ptr noundef nonnull %304) #13
  br label %307

307:                                              ; preds = %306, %302, %276
  %308 = getelementptr inbounds %class.ResizeArrayRaw, ptr %268, i64 0, i32 1
  store ptr %292, ptr %308, align 8, !tbaa !34
  store ptr %297, ptr %268, align 8, !tbaa !33
  store i32 %288, ptr %273, align 4, !tbaa !30
  %309 = load ptr, ptr %267, align 8, !tbaa !25
  br label %310

310:                                              ; preds = %264, %272, %307
  %311 = phi ptr [ %268, %264 ], [ %268, %272 ], [ %309, %307 ]
  store i32 %174, ptr %269, align 8, !tbaa !27
  %312 = load ptr, ptr %311, align 8, !tbaa !33
  %313 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %76, i64 0, i32 5, i32 1
  %314 = load ptr, ptr %313, align 8, !tbaa !25
  %315 = getelementptr inbounds %class.ResizeArrayRaw, ptr %314, i64 0, i32 2
  %316 = load i32, ptr %315, align 8, !tbaa !27
  %317 = icmp slt i32 %316, %174
  br i1 %317, label %318, label %356

318:                                              ; preds = %310
  %319 = getelementptr inbounds %class.ResizeArrayRaw, ptr %314, i64 0, i32 3
  %320 = load i32, ptr %319, align 4, !tbaa !30
  %321 = icmp slt i32 %320, %174
  br i1 %321, label %322, label %356

322:                                              ; preds = %318
  %323 = sitofp i32 %320 to float
  %324 = getelementptr inbounds %class.ResizeArrayRaw, ptr %314, i64 0, i32 5
  %325 = load float, ptr %324, align 4, !tbaa !31
  %326 = fmul float %325, %323
  %327 = fptosi float %326 to i32
  %328 = tail call i32 @llvm.smax.i32(i32 %327, i32 %174)
  %329 = sub nsw i32 %328, %320
  %330 = getelementptr inbounds %class.ResizeArrayRaw, ptr %314, i64 0, i32 6
  %331 = load i32, ptr %330, align 8, !tbaa !32
  %332 = icmp slt i32 %329, %331
  %333 = add nsw i32 %331, %320
  %334 = select i1 %332, i32 %333, i32 %328
  %335 = sext i32 %334 to i64
  %336 = shl nsw i64 %335, 1
  %337 = add nsw i64 %336, 31
  %338 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %337) #12
  %339 = getelementptr inbounds i8, ptr %338, i64 31
  %340 = ptrtoint ptr %339 to i64
  %341 = and i64 %340, 31
  %342 = sub nsw i64 0, %341
  %343 = getelementptr inbounds i8, ptr %339, i64 %342
  %344 = load ptr, ptr %314, align 8, !tbaa !33
  %345 = sext i32 %316 to i64
  %346 = shl nsw i64 %345, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %343, ptr align 1 %344, i64 %346, i1 false)
  %347 = icmp eq i32 %320, 0
  br i1 %347, label %353, label %348

348:                                              ; preds = %322
  %349 = getelementptr inbounds %class.ResizeArrayRaw, ptr %314, i64 0, i32 1
  %350 = load ptr, ptr %349, align 8, !tbaa !34
  %351 = icmp eq ptr %350, null
  br i1 %351, label %353, label %352

352:                                              ; preds = %348
  tail call void @_ZdaPv(ptr noundef nonnull %350) #13
  br label %353

353:                                              ; preds = %352, %348, %322
  %354 = getelementptr inbounds %class.ResizeArrayRaw, ptr %314, i64 0, i32 1
  store ptr %338, ptr %354, align 8, !tbaa !34
  store ptr %343, ptr %314, align 8, !tbaa !33
  store i32 %334, ptr %319, align 4, !tbaa !30
  %355 = load ptr, ptr %313, align 8, !tbaa !25
  br label %356

356:                                              ; preds = %310, %318, %353
  %357 = phi ptr [ %314, %310 ], [ %314, %318 ], [ %355, %353 ]
  store i32 %174, ptr %315, align 8, !tbaa !27
  %358 = load ptr, ptr %357, align 8, !tbaa !33
  %359 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %76, i64 0, i32 6, i32 1
  %360 = load ptr, ptr %359, align 8, !tbaa !25
  %361 = getelementptr inbounds %class.ResizeArrayRaw, ptr %360, i64 0, i32 2
  %362 = load i32, ptr %361, align 8, !tbaa !27
  %363 = icmp slt i32 %362, %174
  br i1 %363, label %364, label %402

364:                                              ; preds = %356
  %365 = getelementptr inbounds %class.ResizeArrayRaw, ptr %360, i64 0, i32 3
  %366 = load i32, ptr %365, align 4, !tbaa !30
  %367 = icmp slt i32 %366, %174
  br i1 %367, label %368, label %402

368:                                              ; preds = %364
  %369 = sitofp i32 %366 to float
  %370 = getelementptr inbounds %class.ResizeArrayRaw, ptr %360, i64 0, i32 5
  %371 = load float, ptr %370, align 4, !tbaa !31
  %372 = fmul float %371, %369
  %373 = fptosi float %372 to i32
  %374 = tail call i32 @llvm.smax.i32(i32 %373, i32 %174)
  %375 = sub nsw i32 %374, %366
  %376 = getelementptr inbounds %class.ResizeArrayRaw, ptr %360, i64 0, i32 6
  %377 = load i32, ptr %376, align 8, !tbaa !32
  %378 = icmp slt i32 %375, %377
  %379 = add nsw i32 %377, %366
  %380 = select i1 %378, i32 %379, i32 %374
  %381 = sext i32 %380 to i64
  %382 = shl nsw i64 %381, 1
  %383 = add nsw i64 %382, 31
  %384 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %383) #12
  %385 = getelementptr inbounds i8, ptr %384, i64 31
  %386 = ptrtoint ptr %385 to i64
  %387 = and i64 %386, 31
  %388 = sub nsw i64 0, %387
  %389 = getelementptr inbounds i8, ptr %385, i64 %388
  %390 = load ptr, ptr %360, align 8, !tbaa !33
  %391 = sext i32 %362 to i64
  %392 = shl nsw i64 %391, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %389, ptr align 1 %390, i64 %392, i1 false)
  %393 = icmp eq i32 %366, 0
  br i1 %393, label %399, label %394

394:                                              ; preds = %368
  %395 = getelementptr inbounds %class.ResizeArrayRaw, ptr %360, i64 0, i32 1
  %396 = load ptr, ptr %395, align 8, !tbaa !34
  %397 = icmp eq ptr %396, null
  br i1 %397, label %399, label %398

398:                                              ; preds = %394
  tail call void @_ZdaPv(ptr noundef nonnull %396) #13
  br label %399

399:                                              ; preds = %398, %394, %368
  %400 = getelementptr inbounds %class.ResizeArrayRaw, ptr %360, i64 0, i32 1
  store ptr %384, ptr %400, align 8, !tbaa !34
  store ptr %389, ptr %360, align 8, !tbaa !33
  store i32 %380, ptr %365, align 4, !tbaa !30
  %401 = load ptr, ptr %359, align 8, !tbaa !25
  br label %402

402:                                              ; preds = %356, %364, %399
  %403 = phi ptr [ %360, %356 ], [ %360, %364 ], [ %401, %399 ]
  store i32 %174, ptr %361, align 8, !tbaa !27
  %404 = load ptr, ptr %403, align 8, !tbaa !33
  %405 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %76, i64 0, i32 15, i32 1
  %406 = load ptr, ptr %405, align 8, !tbaa !25
  %407 = getelementptr inbounds %class.ResizeArrayRaw, ptr %406, i64 0, i32 2
  %408 = load i32, ptr %407, align 8, !tbaa !27
  %409 = icmp slt i32 %408, %174
  br i1 %409, label %410, label %448

410:                                              ; preds = %402
  %411 = getelementptr inbounds %class.ResizeArrayRaw, ptr %406, i64 0, i32 3
  %412 = load i32, ptr %411, align 4, !tbaa !30
  %413 = icmp slt i32 %412, %174
  br i1 %413, label %414, label %448

414:                                              ; preds = %410
  %415 = sitofp i32 %412 to float
  %416 = getelementptr inbounds %class.ResizeArrayRaw, ptr %406, i64 0, i32 5
  %417 = load float, ptr %416, align 4, !tbaa !31
  %418 = fmul float %417, %415
  %419 = fptosi float %418 to i32
  %420 = tail call i32 @llvm.smax.i32(i32 %419, i32 %174)
  %421 = sub nsw i32 %420, %412
  %422 = getelementptr inbounds %class.ResizeArrayRaw, ptr %406, i64 0, i32 6
  %423 = load i32, ptr %422, align 8, !tbaa !32
  %424 = icmp slt i32 %421, %423
  %425 = add nsw i32 %423, %412
  %426 = select i1 %424, i32 %425, i32 %420
  %427 = sext i32 %426 to i64
  %428 = shl nsw i64 %427, 1
  %429 = add nsw i64 %428, 31
  %430 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %429) #12
  %431 = getelementptr inbounds i8, ptr %430, i64 31
  %432 = ptrtoint ptr %431 to i64
  %433 = and i64 %432, 31
  %434 = sub nsw i64 0, %433
  %435 = getelementptr inbounds i8, ptr %431, i64 %434
  %436 = load ptr, ptr %406, align 8, !tbaa !33
  %437 = sext i32 %408 to i64
  %438 = shl nsw i64 %437, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %435, ptr align 1 %436, i64 %438, i1 false)
  %439 = icmp eq i32 %412, 0
  br i1 %439, label %445, label %440

440:                                              ; preds = %414
  %441 = getelementptr inbounds %class.ResizeArrayRaw, ptr %406, i64 0, i32 1
  %442 = load ptr, ptr %441, align 8, !tbaa !34
  %443 = icmp eq ptr %442, null
  br i1 %443, label %445, label %444

444:                                              ; preds = %440
  tail call void @_ZdaPv(ptr noundef nonnull %442) #13
  br label %445

445:                                              ; preds = %444, %440, %414
  %446 = getelementptr inbounds %class.ResizeArrayRaw, ptr %406, i64 0, i32 1
  store ptr %430, ptr %446, align 8, !tbaa !34
  store ptr %435, ptr %406, align 8, !tbaa !33
  store i32 %426, ptr %411, align 4, !tbaa !30
  %447 = load ptr, ptr %405, align 8, !tbaa !25
  br label %448

448:                                              ; preds = %402, %410, %445
  %449 = phi ptr [ %406, %402 ], [ %406, %410 ], [ %447, %445 ]
  store i32 %174, ptr %407, align 8, !tbaa !27
  %450 = load ptr, ptr %449, align 8, !tbaa !33
  %451 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %76, i64 0, i32 16, i32 1
  %452 = load ptr, ptr %451, align 8, !tbaa !25
  %453 = getelementptr inbounds %class.ResizeArrayRaw, ptr %452, i64 0, i32 2
  %454 = load i32, ptr %453, align 8, !tbaa !27
  %455 = icmp slt i32 %454, %174
  br i1 %455, label %456, label %494

456:                                              ; preds = %448
  %457 = getelementptr inbounds %class.ResizeArrayRaw, ptr %452, i64 0, i32 3
  %458 = load i32, ptr %457, align 4, !tbaa !30
  %459 = icmp slt i32 %458, %174
  br i1 %459, label %460, label %494

460:                                              ; preds = %456
  %461 = sitofp i32 %458 to float
  %462 = getelementptr inbounds %class.ResizeArrayRaw, ptr %452, i64 0, i32 5
  %463 = load float, ptr %462, align 4, !tbaa !31
  %464 = fmul float %463, %461
  %465 = fptosi float %464 to i32
  %466 = tail call i32 @llvm.smax.i32(i32 %465, i32 %174)
  %467 = sub nsw i32 %466, %458
  %468 = getelementptr inbounds %class.ResizeArrayRaw, ptr %452, i64 0, i32 6
  %469 = load i32, ptr %468, align 8, !tbaa !32
  %470 = icmp slt i32 %467, %469
  %471 = add nsw i32 %469, %458
  %472 = select i1 %470, i32 %471, i32 %466
  %473 = sext i32 %472 to i64
  %474 = shl nsw i64 %473, 1
  %475 = add nsw i64 %474, 31
  %476 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %475) #12
  %477 = getelementptr inbounds i8, ptr %476, i64 31
  %478 = ptrtoint ptr %477 to i64
  %479 = and i64 %478, 31
  %480 = sub nsw i64 0, %479
  %481 = getelementptr inbounds i8, ptr %477, i64 %480
  %482 = load ptr, ptr %452, align 8, !tbaa !33
  %483 = sext i32 %454 to i64
  %484 = shl nsw i64 %483, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %481, ptr align 1 %482, i64 %484, i1 false)
  %485 = icmp eq i32 %458, 0
  br i1 %485, label %491, label %486

486:                                              ; preds = %460
  %487 = getelementptr inbounds %class.ResizeArrayRaw, ptr %452, i64 0, i32 1
  %488 = load ptr, ptr %487, align 8, !tbaa !34
  %489 = icmp eq ptr %488, null
  br i1 %489, label %491, label %490

490:                                              ; preds = %486
  tail call void @_ZdaPv(ptr noundef nonnull %488) #13
  br label %491

491:                                              ; preds = %490, %486, %460
  %492 = getelementptr inbounds %class.ResizeArrayRaw, ptr %452, i64 0, i32 1
  store ptr %476, ptr %492, align 8, !tbaa !34
  store ptr %481, ptr %452, align 8, !tbaa !33
  store i32 %472, ptr %457, align 4, !tbaa !30
  %493 = load ptr, ptr %451, align 8, !tbaa !25
  br label %494

494:                                              ; preds = %448, %456, %491
  %495 = phi ptr [ %452, %448 ], [ %452, %456 ], [ %493, %491 ]
  store i32 %174, ptr %453, align 8, !tbaa !27
  %496 = load ptr, ptr %495, align 8, !tbaa !33
  %497 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %76, i64 0, i32 9, i32 1
  %498 = load ptr, ptr %497, align 8, !tbaa !25
  %499 = getelementptr inbounds %class.ResizeArrayRaw, ptr %498, i64 0, i32 2
  %500 = load i32, ptr %499, align 8, !tbaa !27
  %501 = icmp slt i32 %500, %174
  br i1 %501, label %502, label %540

502:                                              ; preds = %494
  %503 = getelementptr inbounds %class.ResizeArrayRaw, ptr %498, i64 0, i32 3
  %504 = load i32, ptr %503, align 4, !tbaa !30
  %505 = icmp slt i32 %504, %174
  br i1 %505, label %506, label %540

506:                                              ; preds = %502
  %507 = sitofp i32 %504 to float
  %508 = getelementptr inbounds %class.ResizeArrayRaw, ptr %498, i64 0, i32 5
  %509 = load float, ptr %508, align 4, !tbaa !31
  %510 = fmul float %509, %507
  %511 = fptosi float %510 to i32
  %512 = tail call i32 @llvm.smax.i32(i32 %511, i32 %174)
  %513 = sub nsw i32 %512, %504
  %514 = getelementptr inbounds %class.ResizeArrayRaw, ptr %498, i64 0, i32 6
  %515 = load i32, ptr %514, align 8, !tbaa !32
  %516 = icmp slt i32 %513, %515
  %517 = add nsw i32 %515, %504
  %518 = select i1 %516, i32 %517, i32 %512
  %519 = sext i32 %518 to i64
  %520 = shl nsw i64 %519, 1
  %521 = add nsw i64 %520, 31
  %522 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %521) #12
  %523 = getelementptr inbounds i8, ptr %522, i64 31
  %524 = ptrtoint ptr %523 to i64
  %525 = and i64 %524, 31
  %526 = sub nsw i64 0, %525
  %527 = getelementptr inbounds i8, ptr %523, i64 %526
  %528 = load ptr, ptr %498, align 8, !tbaa !33
  %529 = sext i32 %500 to i64
  %530 = shl nsw i64 %529, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %527, ptr align 1 %528, i64 %530, i1 false)
  %531 = icmp eq i32 %504, 0
  br i1 %531, label %537, label %532

532:                                              ; preds = %506
  %533 = getelementptr inbounds %class.ResizeArrayRaw, ptr %498, i64 0, i32 1
  %534 = load ptr, ptr %533, align 8, !tbaa !34
  %535 = icmp eq ptr %534, null
  br i1 %535, label %537, label %536

536:                                              ; preds = %532
  tail call void @_ZdaPv(ptr noundef nonnull %534) #13
  br label %537

537:                                              ; preds = %536, %532, %506
  %538 = getelementptr inbounds %class.ResizeArrayRaw, ptr %498, i64 0, i32 1
  store ptr %522, ptr %538, align 8, !tbaa !34
  store ptr %527, ptr %498, align 8, !tbaa !33
  store i32 %518, ptr %503, align 4, !tbaa !30
  %539 = load ptr, ptr %497, align 8, !tbaa !25
  br label %540

540:                                              ; preds = %494, %502, %537
  %541 = phi ptr [ %498, %494 ], [ %498, %502 ], [ %539, %537 ]
  store i32 %174, ptr %499, align 8, !tbaa !27
  %542 = load ptr, ptr %541, align 8, !tbaa !33
  %543 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %76, i64 0, i32 10, i32 1
  %544 = load ptr, ptr %543, align 8, !tbaa !25
  %545 = getelementptr inbounds %class.ResizeArrayRaw, ptr %544, i64 0, i32 2
  %546 = load i32, ptr %545, align 8, !tbaa !27
  %547 = icmp slt i32 %546, %174
  br i1 %547, label %548, label %586

548:                                              ; preds = %540
  %549 = getelementptr inbounds %class.ResizeArrayRaw, ptr %544, i64 0, i32 3
  %550 = load i32, ptr %549, align 4, !tbaa !30
  %551 = icmp slt i32 %550, %174
  br i1 %551, label %552, label %586

552:                                              ; preds = %548
  %553 = sitofp i32 %550 to float
  %554 = getelementptr inbounds %class.ResizeArrayRaw, ptr %544, i64 0, i32 5
  %555 = load float, ptr %554, align 4, !tbaa !31
  %556 = fmul float %555, %553
  %557 = fptosi float %556 to i32
  %558 = tail call i32 @llvm.smax.i32(i32 %557, i32 %174)
  %559 = sub nsw i32 %558, %550
  %560 = getelementptr inbounds %class.ResizeArrayRaw, ptr %544, i64 0, i32 6
  %561 = load i32, ptr %560, align 8, !tbaa !32
  %562 = icmp slt i32 %559, %561
  %563 = add nsw i32 %561, %550
  %564 = select i1 %562, i32 %563, i32 %558
  %565 = sext i32 %564 to i64
  %566 = shl nsw i64 %565, 1
  %567 = add nsw i64 %566, 31
  %568 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %567) #12
  %569 = getelementptr inbounds i8, ptr %568, i64 31
  %570 = ptrtoint ptr %569 to i64
  %571 = and i64 %570, 31
  %572 = sub nsw i64 0, %571
  %573 = getelementptr inbounds i8, ptr %569, i64 %572
  %574 = load ptr, ptr %544, align 8, !tbaa !33
  %575 = sext i32 %546 to i64
  %576 = shl nsw i64 %575, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %573, ptr align 1 %574, i64 %576, i1 false)
  %577 = icmp eq i32 %550, 0
  br i1 %577, label %583, label %578

578:                                              ; preds = %552
  %579 = getelementptr inbounds %class.ResizeArrayRaw, ptr %544, i64 0, i32 1
  %580 = load ptr, ptr %579, align 8, !tbaa !34
  %581 = icmp eq ptr %580, null
  br i1 %581, label %583, label %582

582:                                              ; preds = %578
  tail call void @_ZdaPv(ptr noundef nonnull %580) #13
  br label %583

583:                                              ; preds = %582, %578, %552
  %584 = getelementptr inbounds %class.ResizeArrayRaw, ptr %544, i64 0, i32 1
  store ptr %568, ptr %584, align 8, !tbaa !34
  store ptr %573, ptr %544, align 8, !tbaa !33
  store i32 %564, ptr %549, align 4, !tbaa !30
  %585 = load ptr, ptr %543, align 8, !tbaa !25
  br label %586

586:                                              ; preds = %540, %548, %583
  %587 = phi ptr [ %544, %540 ], [ %544, %548 ], [ %585, %583 ]
  store i32 %174, ptr %545, align 8, !tbaa !27
  %588 = load ptr, ptr %587, align 8, !tbaa !33
  %589 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %76, i64 0, i32 11, i32 1
  %590 = load ptr, ptr %589, align 8, !tbaa !25
  %591 = getelementptr inbounds %class.ResizeArrayRaw, ptr %590, i64 0, i32 2
  %592 = load i32, ptr %591, align 8, !tbaa !27
  %593 = icmp slt i32 %592, %174
  br i1 %593, label %594, label %632

594:                                              ; preds = %586
  %595 = getelementptr inbounds %class.ResizeArrayRaw, ptr %590, i64 0, i32 3
  %596 = load i32, ptr %595, align 4, !tbaa !30
  %597 = icmp slt i32 %596, %174
  br i1 %597, label %598, label %632

598:                                              ; preds = %594
  %599 = sitofp i32 %596 to float
  %600 = getelementptr inbounds %class.ResizeArrayRaw, ptr %590, i64 0, i32 5
  %601 = load float, ptr %600, align 4, !tbaa !31
  %602 = fmul float %601, %599
  %603 = fptosi float %602 to i32
  %604 = tail call i32 @llvm.smax.i32(i32 %603, i32 %174)
  %605 = sub nsw i32 %604, %596
  %606 = getelementptr inbounds %class.ResizeArrayRaw, ptr %590, i64 0, i32 6
  %607 = load i32, ptr %606, align 8, !tbaa !32
  %608 = icmp slt i32 %605, %607
  %609 = add nsw i32 %607, %596
  %610 = select i1 %608, i32 %609, i32 %604
  %611 = sext i32 %610 to i64
  %612 = shl nsw i64 %611, 1
  %613 = add nsw i64 %612, 31
  %614 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %613) #12
  %615 = getelementptr inbounds i8, ptr %614, i64 31
  %616 = ptrtoint ptr %615 to i64
  %617 = and i64 %616, 31
  %618 = sub nsw i64 0, %617
  %619 = getelementptr inbounds i8, ptr %615, i64 %618
  %620 = load ptr, ptr %590, align 8, !tbaa !33
  %621 = sext i32 %592 to i64
  %622 = shl nsw i64 %621, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %619, ptr align 1 %620, i64 %622, i1 false)
  %623 = icmp eq i32 %596, 0
  br i1 %623, label %629, label %624

624:                                              ; preds = %598
  %625 = getelementptr inbounds %class.ResizeArrayRaw, ptr %590, i64 0, i32 1
  %626 = load ptr, ptr %625, align 8, !tbaa !34
  %627 = icmp eq ptr %626, null
  br i1 %627, label %629, label %628

628:                                              ; preds = %624
  tail call void @_ZdaPv(ptr noundef nonnull %626) #13
  br label %629

629:                                              ; preds = %628, %624, %598
  %630 = getelementptr inbounds %class.ResizeArrayRaw, ptr %590, i64 0, i32 1
  store ptr %614, ptr %630, align 8, !tbaa !34
  store ptr %619, ptr %590, align 8, !tbaa !33
  store i32 %610, ptr %595, align 4, !tbaa !30
  %631 = load ptr, ptr %589, align 8, !tbaa !25
  br label %632

632:                                              ; preds = %586, %594, %629
  %633 = phi ptr [ %590, %586 ], [ %590, %594 ], [ %631, %629 ]
  store i32 %174, ptr %591, align 8, !tbaa !27
  %634 = load ptr, ptr %633, align 8, !tbaa !33
  %635 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %76, i64 0, i32 12, i32 1
  %636 = load ptr, ptr %635, align 8, !tbaa !25
  %637 = getelementptr inbounds %class.ResizeArrayRaw, ptr %636, i64 0, i32 2
  %638 = load i32, ptr %637, align 8, !tbaa !27
  %639 = icmp slt i32 %638, %174
  br i1 %639, label %640, label %678

640:                                              ; preds = %632
  %641 = getelementptr inbounds %class.ResizeArrayRaw, ptr %636, i64 0, i32 3
  %642 = load i32, ptr %641, align 4, !tbaa !30
  %643 = icmp slt i32 %642, %174
  br i1 %643, label %644, label %678

644:                                              ; preds = %640
  %645 = sitofp i32 %642 to float
  %646 = getelementptr inbounds %class.ResizeArrayRaw, ptr %636, i64 0, i32 5
  %647 = load float, ptr %646, align 4, !tbaa !31
  %648 = fmul float %647, %645
  %649 = fptosi float %648 to i32
  %650 = tail call i32 @llvm.smax.i32(i32 %649, i32 %174)
  %651 = sub nsw i32 %650, %642
  %652 = getelementptr inbounds %class.ResizeArrayRaw, ptr %636, i64 0, i32 6
  %653 = load i32, ptr %652, align 8, !tbaa !32
  %654 = icmp slt i32 %651, %653
  %655 = add nsw i32 %653, %642
  %656 = select i1 %654, i32 %655, i32 %650
  %657 = sext i32 %656 to i64
  %658 = shl nsw i64 %657, 1
  %659 = add nsw i64 %658, 31
  %660 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %659) #12
  %661 = getelementptr inbounds i8, ptr %660, i64 31
  %662 = ptrtoint ptr %661 to i64
  %663 = and i64 %662, 31
  %664 = sub nsw i64 0, %663
  %665 = getelementptr inbounds i8, ptr %661, i64 %664
  %666 = load ptr, ptr %636, align 8, !tbaa !33
  %667 = sext i32 %638 to i64
  %668 = shl nsw i64 %667, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %665, ptr align 1 %666, i64 %668, i1 false)
  %669 = icmp eq i32 %642, 0
  br i1 %669, label %675, label %670

670:                                              ; preds = %644
  %671 = getelementptr inbounds %class.ResizeArrayRaw, ptr %636, i64 0, i32 1
  %672 = load ptr, ptr %671, align 8, !tbaa !34
  %673 = icmp eq ptr %672, null
  br i1 %673, label %675, label %674

674:                                              ; preds = %670
  tail call void @_ZdaPv(ptr noundef nonnull %672) #13
  br label %675

675:                                              ; preds = %674, %670, %644
  %676 = getelementptr inbounds %class.ResizeArrayRaw, ptr %636, i64 0, i32 1
  store ptr %660, ptr %676, align 8, !tbaa !34
  store ptr %665, ptr %636, align 8, !tbaa !33
  store i32 %656, ptr %641, align 4, !tbaa !30
  %677 = load ptr, ptr %635, align 8, !tbaa !25
  br label %678

678:                                              ; preds = %632, %640, %675
  %679 = phi ptr [ %636, %632 ], [ %636, %640 ], [ %677, %675 ]
  store i32 %174, ptr %637, align 8, !tbaa !27
  %680 = load ptr, ptr %679, align 8, !tbaa !33
  %681 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %76, i64 0, i32 13, i32 1
  %682 = load ptr, ptr %681, align 8, !tbaa !25
  %683 = getelementptr inbounds %class.ResizeArrayRaw, ptr %682, i64 0, i32 2
  %684 = load i32, ptr %683, align 8, !tbaa !27
  %685 = icmp slt i32 %684, %174
  br i1 %685, label %686, label %724

686:                                              ; preds = %678
  %687 = getelementptr inbounds %class.ResizeArrayRaw, ptr %682, i64 0, i32 3
  %688 = load i32, ptr %687, align 4, !tbaa !30
  %689 = icmp slt i32 %688, %174
  br i1 %689, label %690, label %724

690:                                              ; preds = %686
  %691 = sitofp i32 %688 to float
  %692 = getelementptr inbounds %class.ResizeArrayRaw, ptr %682, i64 0, i32 5
  %693 = load float, ptr %692, align 4, !tbaa !31
  %694 = fmul float %693, %691
  %695 = fptosi float %694 to i32
  %696 = tail call i32 @llvm.smax.i32(i32 %695, i32 %174)
  %697 = sub nsw i32 %696, %688
  %698 = getelementptr inbounds %class.ResizeArrayRaw, ptr %682, i64 0, i32 6
  %699 = load i32, ptr %698, align 8, !tbaa !32
  %700 = icmp slt i32 %697, %699
  %701 = add nsw i32 %699, %688
  %702 = select i1 %700, i32 %701, i32 %696
  %703 = sext i32 %702 to i64
  %704 = shl nsw i64 %703, 1
  %705 = add nsw i64 %704, 31
  %706 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %705) #12
  %707 = getelementptr inbounds i8, ptr %706, i64 31
  %708 = ptrtoint ptr %707 to i64
  %709 = and i64 %708, 31
  %710 = sub nsw i64 0, %709
  %711 = getelementptr inbounds i8, ptr %707, i64 %710
  %712 = load ptr, ptr %682, align 8, !tbaa !33
  %713 = sext i32 %684 to i64
  %714 = shl nsw i64 %713, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %711, ptr align 1 %712, i64 %714, i1 false)
  %715 = icmp eq i32 %688, 0
  br i1 %715, label %721, label %716

716:                                              ; preds = %690
  %717 = getelementptr inbounds %class.ResizeArrayRaw, ptr %682, i64 0, i32 1
  %718 = load ptr, ptr %717, align 8, !tbaa !34
  %719 = icmp eq ptr %718, null
  br i1 %719, label %721, label %720

720:                                              ; preds = %716
  tail call void @_ZdaPv(ptr noundef nonnull %718) #13
  br label %721

721:                                              ; preds = %720, %716, %690
  %722 = getelementptr inbounds %class.ResizeArrayRaw, ptr %682, i64 0, i32 1
  store ptr %706, ptr %722, align 8, !tbaa !34
  store ptr %711, ptr %682, align 8, !tbaa !33
  store i32 %702, ptr %687, align 4, !tbaa !30
  %723 = load ptr, ptr %681, align 8, !tbaa !25
  br label %724

724:                                              ; preds = %678, %686, %721
  %725 = phi ptr [ %682, %678 ], [ %682, %686 ], [ %723, %721 ]
  store i32 %174, ptr %683, align 8, !tbaa !27
  %726 = load ptr, ptr %725, align 8, !tbaa !33
  %727 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %76, i64 0, i32 14, i32 1
  %728 = load ptr, ptr %727, align 8, !tbaa !25
  %729 = getelementptr inbounds %class.ResizeArrayRaw, ptr %728, i64 0, i32 2
  %730 = load i32, ptr %729, align 8, !tbaa !27
  %731 = icmp slt i32 %730, %174
  br i1 %731, label %732, label %770

732:                                              ; preds = %724
  %733 = getelementptr inbounds %class.ResizeArrayRaw, ptr %728, i64 0, i32 3
  %734 = load i32, ptr %733, align 4, !tbaa !30
  %735 = icmp slt i32 %734, %174
  br i1 %735, label %736, label %770

736:                                              ; preds = %732
  %737 = sitofp i32 %734 to float
  %738 = getelementptr inbounds %class.ResizeArrayRaw, ptr %728, i64 0, i32 5
  %739 = load float, ptr %738, align 4, !tbaa !31
  %740 = fmul float %739, %737
  %741 = fptosi float %740 to i32
  %742 = tail call i32 @llvm.smax.i32(i32 %741, i32 %174)
  %743 = sub nsw i32 %742, %734
  %744 = getelementptr inbounds %class.ResizeArrayRaw, ptr %728, i64 0, i32 6
  %745 = load i32, ptr %744, align 8, !tbaa !32
  %746 = icmp slt i32 %743, %745
  %747 = add nsw i32 %745, %734
  %748 = select i1 %746, i32 %747, i32 %742
  %749 = sext i32 %748 to i64
  %750 = shl nsw i64 %749, 1
  %751 = add nsw i64 %750, 31
  %752 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %751) #12
  %753 = getelementptr inbounds i8, ptr %752, i64 31
  %754 = ptrtoint ptr %753 to i64
  %755 = and i64 %754, 31
  %756 = sub nsw i64 0, %755
  %757 = getelementptr inbounds i8, ptr %753, i64 %756
  %758 = load ptr, ptr %728, align 8, !tbaa !33
  %759 = sext i32 %730 to i64
  %760 = shl nsw i64 %759, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %757, ptr align 1 %758, i64 %760, i1 false)
  %761 = icmp eq i32 %734, 0
  br i1 %761, label %767, label %762

762:                                              ; preds = %736
  %763 = getelementptr inbounds %class.ResizeArrayRaw, ptr %728, i64 0, i32 1
  %764 = load ptr, ptr %763, align 8, !tbaa !34
  %765 = icmp eq ptr %764, null
  br i1 %765, label %767, label %766

766:                                              ; preds = %762
  tail call void @_ZdaPv(ptr noundef nonnull %764) #13
  br label %767

767:                                              ; preds = %766, %762, %736
  %768 = getelementptr inbounds %class.ResizeArrayRaw, ptr %728, i64 0, i32 1
  store ptr %752, ptr %768, align 8, !tbaa !34
  store ptr %757, ptr %728, align 8, !tbaa !33
  store i32 %748, ptr %733, align 4, !tbaa !30
  %769 = load ptr, ptr %727, align 8, !tbaa !25
  br label %770

770:                                              ; preds = %724, %732, %767
  %771 = phi ptr [ %728, %724 ], [ %728, %732 ], [ %769, %767 ]
  store i32 %174, ptr %729, align 8, !tbaa !27
  %772 = load ptr, ptr %771, align 8, !tbaa !33
  br i1 %173, label %905, label %773

773:                                              ; preds = %770
  %774 = icmp sgt i32 %67, 0
  br i1 %774, label %775, label %917

775:                                              ; preds = %773
  %776 = zext i32 %67 to i64
  %777 = and i64 %776, 1
  %778 = icmp eq i32 %67, 1
  br i1 %778, label %811, label %779

779:                                              ; preds = %775
  %780 = and i64 %776, 4294967294
  br label %781

781:                                              ; preds = %806, %779
  %782 = phi i64 [ 0, %779 ], [ %808, %806 ]
  %783 = phi i32 [ 0, %779 ], [ %807, %806 ]
  %784 = phi i64 [ 0, %779 ], [ %809, %806 ]
  %785 = getelementptr inbounds %struct.CompAtom, ptr %70, i64 %782, i32 4
  %786 = load i8, ptr %785, align 1
  %787 = and i8 %786, 7
  %788 = icmp eq i8 %787, 0
  br i1 %788, label %794, label %789

789:                                              ; preds = %781
  %790 = trunc i64 %782 to i16
  %791 = add nsw i32 %783, 1
  %792 = sext i32 %783 to i64
  %793 = getelementptr inbounds i16, ptr %220, i64 %792
  store i16 %790, ptr %793, align 2, !tbaa !44
  br label %794

794:                                              ; preds = %781, %789
  %795 = phi i32 [ %791, %789 ], [ %783, %781 ]
  %796 = or i64 %782, 1
  %797 = getelementptr inbounds %struct.CompAtom, ptr %70, i64 %796, i32 4
  %798 = load i8, ptr %797, align 1
  %799 = and i8 %798, 7
  %800 = icmp eq i8 %799, 0
  br i1 %800, label %806, label %801

801:                                              ; preds = %794
  %802 = trunc i64 %796 to i16
  %803 = add nsw i32 %795, 1
  %804 = sext i32 %795 to i64
  %805 = getelementptr inbounds i16, ptr %220, i64 %804
  store i16 %802, ptr %805, align 2, !tbaa !44
  br label %806

806:                                              ; preds = %801, %794
  %807 = phi i32 [ %803, %801 ], [ %795, %794 ]
  %808 = add nuw nsw i64 %782, 2
  %809 = add i64 %784, 2
  %810 = icmp eq i64 %809, %780
  br i1 %810, label %811, label %781

811:                                              ; preds = %806, %775
  %812 = phi i32 [ undef, %775 ], [ %807, %806 ]
  %813 = phi i64 [ 0, %775 ], [ %808, %806 ]
  %814 = phi i32 [ 0, %775 ], [ %807, %806 ]
  %815 = icmp eq i64 %777, 0
  br i1 %815, label %826, label %816

816:                                              ; preds = %811
  %817 = getelementptr inbounds %struct.CompAtom, ptr %70, i64 %813, i32 4
  %818 = load i8, ptr %817, align 1
  %819 = and i8 %818, 7
  %820 = icmp eq i8 %819, 0
  br i1 %820, label %826, label %821

821:                                              ; preds = %816
  %822 = trunc i64 %813 to i16
  %823 = add nsw i32 %814, 1
  %824 = sext i32 %814 to i64
  %825 = getelementptr inbounds i16, ptr %220, i64 %824
  store i16 %822, ptr %825, align 2, !tbaa !44
  br label %826

826:                                              ; preds = %816, %821, %811
  %827 = phi i32 [ %812, %811 ], [ %823, %821 ], [ %814, %816 ]
  %828 = icmp eq i32 %827, 0
  br i1 %828, label %836, label %829

829:                                              ; preds = %826
  %830 = add nsw i32 %827, -1
  %831 = sext i32 %830 to i64
  %832 = getelementptr inbounds i16, ptr %220, i64 %831
  %833 = load i16, ptr %832, align 2, !tbaa !44
  %834 = sext i32 %827 to i64
  %835 = getelementptr inbounds i16, ptr %220, i64 %834
  store i16 %833, ptr %835, align 2, !tbaa !44
  br label %836

836:                                              ; preds = %829, %826
  %837 = load i32, ptr @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4, !tbaa !5
  %838 = icmp ne i32 %837, 0
  %839 = icmp sgt i32 %827, 0
  %840 = and i1 %838, %839
  br i1 %840, label %841, label %917

841:                                              ; preds = %836
  %842 = zext i32 %827 to i64
  %843 = and i64 %842, 1
  %844 = icmp eq i32 %827, 1
  br i1 %844, label %879, label %845

845:                                              ; preds = %841
  %846 = and i64 %842, 4294967294
  br label %847

847:                                              ; preds = %874, %845
  %848 = phi i64 [ 0, %845 ], [ %876, %874 ]
  %849 = phi i32 [ 0, %845 ], [ %875, %874 ]
  %850 = phi i64 [ 0, %845 ], [ %877, %874 ]
  %851 = getelementptr inbounds i16, ptr %220, i64 %848
  %852 = load i16, ptr %851, align 2, !tbaa !44
  %853 = zext i16 %852 to i64
  %854 = getelementptr inbounds %struct.CompAtomExt, ptr %74, i64 %853
  %855 = load i32, ptr %854, align 4
  %856 = icmp sgt i32 %855, -1
  br i1 %856, label %857, label %861

857:                                              ; preds = %847
  %858 = add nsw i32 %849, 1
  %859 = sext i32 %849 to i64
  %860 = getelementptr inbounds i16, ptr %266, i64 %859
  store i16 %852, ptr %860, align 2, !tbaa !44
  br label %861

861:                                              ; preds = %847, %857
  %862 = phi i32 [ %849, %847 ], [ %858, %857 ]
  %863 = or i64 %848, 1
  %864 = getelementptr inbounds i16, ptr %220, i64 %863
  %865 = load i16, ptr %864, align 2, !tbaa !44
  %866 = zext i16 %865 to i64
  %867 = getelementptr inbounds %struct.CompAtomExt, ptr %74, i64 %866
  %868 = load i32, ptr %867, align 4
  %869 = icmp sgt i32 %868, -1
  br i1 %869, label %870, label %874

870:                                              ; preds = %861
  %871 = add nsw i32 %862, 1
  %872 = sext i32 %862 to i64
  %873 = getelementptr inbounds i16, ptr %266, i64 %872
  store i16 %865, ptr %873, align 2, !tbaa !44
  br label %874

874:                                              ; preds = %870, %861
  %875 = phi i32 [ %862, %861 ], [ %871, %870 ]
  %876 = add nuw nsw i64 %848, 2
  %877 = add i64 %850, 2
  %878 = icmp eq i64 %877, %846
  br i1 %878, label %879, label %847

879:                                              ; preds = %874, %841
  %880 = phi i32 [ undef, %841 ], [ %875, %874 ]
  %881 = phi i64 [ 0, %841 ], [ %876, %874 ]
  %882 = phi i32 [ 0, %841 ], [ %875, %874 ]
  %883 = icmp eq i64 %843, 0
  br i1 %883, label %895, label %884

884:                                              ; preds = %879
  %885 = getelementptr inbounds i16, ptr %220, i64 %881
  %886 = load i16, ptr %885, align 2, !tbaa !44
  %887 = zext i16 %886 to i64
  %888 = getelementptr inbounds %struct.CompAtomExt, ptr %74, i64 %887
  %889 = load i32, ptr %888, align 4
  %890 = icmp sgt i32 %889, -1
  br i1 %890, label %891, label %895

891:                                              ; preds = %884
  %892 = add nsw i32 %882, 1
  %893 = sext i32 %882 to i64
  %894 = getelementptr inbounds i16, ptr %266, i64 %893
  store i16 %886, ptr %894, align 2, !tbaa !44
  br label %895

895:                                              ; preds = %884, %891, %879
  %896 = phi i32 [ %880, %879 ], [ %882, %884 ], [ %892, %891 ]
  %897 = icmp eq i32 %896, 0
  br i1 %897, label %917, label %898

898:                                              ; preds = %895
  %899 = add nsw i32 %896, -1
  %900 = sext i32 %899 to i64
  %901 = getelementptr inbounds i16, ptr %266, i64 %900
  %902 = load i16, ptr %901, align 2, !tbaa !44
  %903 = sext i32 %896 to i64
  %904 = getelementptr inbounds i16, ptr %266, i64 %903
  store i16 %902, ptr %904, align 2, !tbaa !44
  br label %917

905:                                              ; preds = %770
  %906 = load ptr, ptr %9, align 8, !tbaa !46
  %907 = load i32, ptr %14, align 8, !tbaa !17
  %908 = add nsw i32 %907, 1
  store i32 %908, ptr %14, align 8, !tbaa !17
  %909 = sext i32 %907 to i64
  %910 = getelementptr inbounds i16, ptr %906, i64 %909
  %911 = load i16, ptr %910, align 2, !tbaa !44
  %912 = zext i16 %911 to i32
  %913 = icmp eq i32 %65, %912
  br i1 %913, label %934, label %914

914:                                              ; preds = %905
  tail call void @_Z8NAMD_bugPKc(ptr noundef nonnull @.str)
  %915 = load ptr, ptr %9, align 8, !tbaa !46
  %916 = load i32, ptr %14, align 8, !tbaa !17
  br label %934

917:                                              ; preds = %773, %898, %895, %836
  %918 = phi i32 [ %827, %898 ], [ %827, %895 ], [ %827, %836 ], [ 0, %773 ]
  %919 = phi i32 [ %896, %898 ], [ 0, %895 ], [ 0, %836 ], [ 0, %773 ]
  %920 = load i32, ptr %14, align 8, !tbaa !17
  %921 = trunc i32 %65 to i16
  %922 = load ptr, ptr %9, align 8, !tbaa !46
  %923 = sext i32 %920 to i64
  %924 = getelementptr inbounds i16, ptr %922, i64 %923
  store i16 %921, ptr %924, align 2, !tbaa !44
  %925 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 16
  %926 = load i32, ptr %925, align 4, !tbaa !47
  %927 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 18
  %928 = load i32, ptr %927, align 4, !tbaa !48
  %929 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 4, i64 1
  %930 = load ptr, ptr %929, align 8, !tbaa !23
  %931 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 4
  %932 = load ptr, ptr %931, align 8, !tbaa !23
  %933 = add nsw i32 %920, 2
  store i32 %933, ptr %14, align 8, !tbaa !17
  br label %950

934:                                              ; preds = %914, %905
  %935 = phi i32 [ %908, %905 ], [ %916, %914 ]
  %936 = phi ptr [ %906, %905 ], [ %915, %914 ]
  %937 = sext i32 %935 to i64
  %938 = getelementptr inbounds i16, ptr %936, i64 %937
  %939 = load i16, ptr %938, align 2, !tbaa !44
  %940 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 16
  %941 = load i32, ptr %940, align 4, !tbaa !47
  %942 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 18
  %943 = load i32, ptr %942, align 4, !tbaa !48
  %944 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 4, i64 1
  %945 = load ptr, ptr %944, align 8, !tbaa !23
  %946 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 4
  %947 = load ptr, ptr %946, align 8, !tbaa !23
  %948 = add nsw i32 %935, 1
  store i32 %948, ptr %14, align 8, !tbaa !17
  %949 = zext i16 %939 to i32
  br label %950

950:                                              ; preds = %934, %917
  %951 = phi i32 [ %941, %934 ], [ %926, %917 ]
  %952 = phi i32 [ %943, %934 ], [ %928, %917 ]
  %953 = phi ptr [ %945, %934 ], [ %930, %917 ]
  %954 = phi ptr [ %947, %934 ], [ %932, %917 ]
  %955 = phi i32 [ 0, %934 ], [ %919, %917 ]
  %956 = phi i32 [ 0, %934 ], [ %918, %917 ]
  %957 = phi i32 [ %949, %934 ], [ 0, %917 ]
  %958 = add nsw i32 %952, -1
  %959 = icmp slt i32 %957, %65
  br i1 %959, label %960, label %3952

960:                                              ; preds = %950
  %961 = getelementptr inbounds %class.Molecule, ptr %26, i64 0, i32 1
  %962 = getelementptr inbounds %class.Molecule, ptr %26, i64 0, i32 4
  %963 = getelementptr inbounds %class.Molecule, ptr %26, i64 0, i32 2
  %964 = getelementptr inbounds %class.Molecule, ptr %26, i64 0, i32 3
  %965 = ptrtoint ptr %450 to i64
  %966 = add nsw i32 %67, 30
  %967 = getelementptr inbounds %class.Pairlists, ptr %9, i64 0, i32 2
  %968 = getelementptr inbounds i16, ptr %450, i64 1
  %969 = ptrtoint ptr %496 to i64
  %970 = ptrtoint ptr %358 to i64
  %971 = ptrtoint ptr %404 to i64
  %972 = ptrtoint ptr %542 to i64
  %973 = ptrtoint ptr %588 to i64
  %974 = ptrtoint ptr %634 to i64
  %975 = ptrtoint ptr %680 to i64
  %976 = ptrtoint ptr %726 to i64
  %977 = ptrtoint ptr %772 to i64
  %978 = fmul double %31, 2.000000e+00
  %979 = fmul double %31, 4.000000e+00
  %980 = fmul double %31, 6.000000e+00
  %981 = fneg <2 x double> %49
  %982 = fneg <2 x double> %54
  %983 = insertelement <2 x double> poison, double %24, i64 0
  %984 = shufflevector <2 x double> %983, <2 x double> poison, <2 x i32> zeroinitializer
  %985 = extractelement <2 x double> %49, i64 1
  %986 = extractelement <2 x double> %54, i64 1
  %987 = extractelement <2 x double> %49, i64 1
  %988 = extractelement <2 x double> %54, i64 1
  %989 = extractelement <2 x double> %49, i64 1
  %990 = extractelement <2 x double> %54, i64 1
  br label %991

991:                                              ; preds = %960, %3939
  %992 = phi i32 [ 0, %960 ], [ %3946, %3939 ]
  %993 = phi i32 [ %957, %960 ], [ %3945, %3939 ]
  %994 = phi ptr [ null, %960 ], [ %3944, %3939 ]
  %995 = phi ptr [ null, %960 ], [ %3943, %3939 ]
  %996 = phi ptr [ null, %960 ], [ %3942, %3939 ]
  %997 = phi i32 [ 0, %960 ], [ %3941, %3939 ]
  %998 = phi i32 [ %951, %960 ], [ %3940, %3939 ]
  %999 = phi <2 x double> [ zeroinitializer, %960 ], [ %3947, %3939 ]
  %1000 = phi <2 x double> [ zeroinitializer, %960 ], [ %3948, %3939 ]
  %1001 = phi <2 x double> [ zeroinitializer, %960 ], [ %3949, %3939 ]
  %1002 = phi <2 x double> [ zeroinitializer, %960 ], [ %3950, %3939 ]
  %1003 = sext i32 %993 to i64
  %1004 = getelementptr inbounds %struct.CompAtom, ptr %68, i64 %1003
  %1005 = getelementptr inbounds %struct.CompAtomExt, ptr %72, i64 %1003
  br i1 %173, label %1018, label %1006

1006:                                             ; preds = %991
  %1007 = getelementptr inbounds %struct.CompAtom, ptr %68, i64 %1003, i32 4
  %1008 = load i8, ptr %1007, align 1
  %1009 = lshr i8 %1008, 3
  %1010 = and i8 %1009, 15
  %1011 = zext i8 %1010 to i32
  %1012 = icmp eq i8 %1010, 0
  br i1 %1012, label %1018, label %1013

1013:                                             ; preds = %1006
  %1014 = icmp eq i32 %998, 0
  br i1 %1014, label %1018, label %1015

1015:                                             ; preds = %1013
  %1016 = add nsw i32 %998, -1
  %1017 = add nsw i32 %993, %1011
  br label %3939

1018:                                             ; preds = %1013, %1006, %991
  %1019 = phi i32 [ %998, %991 ], [ %998, %1006 ], [ %958, %1013 ]
  %1020 = load <2 x double>, ptr %1004, align 8, !tbaa !19
  %1021 = fadd <2 x double> %16, %1020
  %1022 = getelementptr inbounds %class.Vector, ptr %1004, i64 0, i32 2
  %1023 = load double, ptr %1022, align 8, !tbaa !49
  %1024 = fadd double %18, %1023
  %1025 = getelementptr inbounds %struct.CompAtom, ptr %68, i64 %1003, i32 3
  %1026 = load i8, ptr %1025, align 2, !tbaa !51
  %1027 = zext i8 %1026 to i32
  br i1 %173, label %2820, label %1028

1028:                                             ; preds = %1018
  %1029 = load i32, ptr %1005, align 4
  %1030 = shl i32 %1029, 2
  %1031 = ashr exact i32 %1030, 2
  %1032 = load ptr, ptr %961, align 8, !tbaa !52
  %1033 = sext i32 %1031 to i64
  %1034 = getelementptr inbounds %class.ExclusionCheck, ptr %1032, i64 %1033
  %1035 = load i32, ptr %1034, align 8, !tbaa !54
  %1036 = getelementptr inbounds %class.ExclusionCheck, ptr %1032, i64 %1033, i32 1
  %1037 = load i32, ptr %1036, align 4, !tbaa !56
  %1038 = getelementptr inbounds %class.ExclusionCheck, ptr %1032, i64 %1033, i32 2
  %1039 = load ptr, ptr %1038, align 8, !tbaa !57
  %1040 = icmp eq ptr %1039, null
  br i1 %1040, label %1045, label %1041

1041:                                             ; preds = %1028
  %1042 = sext i32 %1035 to i64
  %1043 = sub nsw i64 0, %1042
  %1044 = getelementptr inbounds i8, ptr %1039, i64 %1043
  br label %1271

1045:                                             ; preds = %1028
  %1046 = icmp eq ptr %994, null
  br i1 %1046, label %1134, label %1047

1047:                                             ; preds = %1045
  %1048 = load i32, ptr %995, align 4, !tbaa !5
  %1049 = icmp slt i32 %1048, 1
  br i1 %1049, label %1097, label %1050

1050:                                             ; preds = %1047
  %1051 = add nuw i32 %1048, 1
  %1052 = zext i32 %1051 to i64
  %1053 = add nsw i64 %1052, -1
  %1054 = add nsw i64 %1052, -2
  %1055 = and i64 %1053, 3
  %1056 = icmp ult i64 %1054, 3
  br i1 %1056, label %1084, label %1057

1057:                                             ; preds = %1050
  %1058 = and i64 %1053, -4
  br label %1059

1059:                                             ; preds = %1059, %1057
  %1060 = phi i64 [ 1, %1057 ], [ %1081, %1059 ]
  %1061 = phi i64 [ 0, %1057 ], [ %1082, %1059 ]
  %1062 = getelementptr inbounds i32, ptr %995, i64 %1060
  %1063 = load i32, ptr %1062, align 4, !tbaa !5
  %1064 = sext i32 %1063 to i64
  %1065 = getelementptr inbounds i8, ptr %994, i64 %1064
  store i8 0, ptr %1065, align 1, !tbaa !58
  %1066 = add nuw nsw i64 %1060, 1
  %1067 = getelementptr inbounds i32, ptr %995, i64 %1066
  %1068 = load i32, ptr %1067, align 4, !tbaa !5
  %1069 = sext i32 %1068 to i64
  %1070 = getelementptr inbounds i8, ptr %994, i64 %1069
  store i8 0, ptr %1070, align 1, !tbaa !58
  %1071 = add nuw nsw i64 %1060, 2
  %1072 = getelementptr inbounds i32, ptr %995, i64 %1071
  %1073 = load i32, ptr %1072, align 4, !tbaa !5
  %1074 = sext i32 %1073 to i64
  %1075 = getelementptr inbounds i8, ptr %994, i64 %1074
  store i8 0, ptr %1075, align 1, !tbaa !58
  %1076 = add nuw nsw i64 %1060, 3
  %1077 = getelementptr inbounds i32, ptr %995, i64 %1076
  %1078 = load i32, ptr %1077, align 4, !tbaa !5
  %1079 = sext i32 %1078 to i64
  %1080 = getelementptr inbounds i8, ptr %994, i64 %1079
  store i8 0, ptr %1080, align 1, !tbaa !58
  %1081 = add nuw nsw i64 %1060, 4
  %1082 = add i64 %1061, 4
  %1083 = icmp eq i64 %1082, %1058
  br i1 %1083, label %1084, label %1059

1084:                                             ; preds = %1059, %1050
  %1085 = phi i64 [ 1, %1050 ], [ %1081, %1059 ]
  %1086 = icmp eq i64 %1055, 0
  br i1 %1086, label %1097, label %1087

1087:                                             ; preds = %1084, %1087
  %1088 = phi i64 [ %1094, %1087 ], [ %1085, %1084 ]
  %1089 = phi i64 [ %1095, %1087 ], [ 0, %1084 ]
  %1090 = getelementptr inbounds i32, ptr %995, i64 %1088
  %1091 = load i32, ptr %1090, align 4, !tbaa !5
  %1092 = sext i32 %1091 to i64
  %1093 = getelementptr inbounds i8, ptr %994, i64 %1092
  store i8 0, ptr %1093, align 1, !tbaa !58
  %1094 = add nuw nsw i64 %1088, 1
  %1095 = add i64 %1089, 1
  %1096 = icmp eq i64 %1095, %1055
  br i1 %1096, label %1097, label %1087, !llvm.loop !186

1097:                                             ; preds = %1084, %1087, %1047
  %1098 = load i32, ptr %996, align 4, !tbaa !5
  %1099 = icmp slt i32 %1098, 1
  br i1 %1099, label %1154, label %1100

1100:                                             ; preds = %1097
  %1101 = add nuw i32 %1098, 1
  %1102 = zext i32 %1101 to i64
  %1103 = add nsw i64 %1102, -1
  %1104 = add nsw i64 %1102, -2
  %1105 = and i64 %1103, 3
  %1106 = icmp ult i64 %1104, 3
  br i1 %1106, label %1141, label %1107

1107:                                             ; preds = %1100
  %1108 = and i64 %1103, -4
  br label %1109

1109:                                             ; preds = %1109, %1107
  %1110 = phi i64 [ 1, %1107 ], [ %1131, %1109 ]
  %1111 = phi i64 [ 0, %1107 ], [ %1132, %1109 ]
  %1112 = getelementptr inbounds i32, ptr %996, i64 %1110
  %1113 = load i32, ptr %1112, align 4, !tbaa !5
  %1114 = sext i32 %1113 to i64
  %1115 = getelementptr inbounds i8, ptr %994, i64 %1114
  store i8 0, ptr %1115, align 1, !tbaa !58
  %1116 = add nuw nsw i64 %1110, 1
  %1117 = getelementptr inbounds i32, ptr %996, i64 %1116
  %1118 = load i32, ptr %1117, align 4, !tbaa !5
  %1119 = sext i32 %1118 to i64
  %1120 = getelementptr inbounds i8, ptr %994, i64 %1119
  store i8 0, ptr %1120, align 1, !tbaa !58
  %1121 = add nuw nsw i64 %1110, 2
  %1122 = getelementptr inbounds i32, ptr %996, i64 %1121
  %1123 = load i32, ptr %1122, align 4, !tbaa !5
  %1124 = sext i32 %1123 to i64
  %1125 = getelementptr inbounds i8, ptr %994, i64 %1124
  store i8 0, ptr %1125, align 1, !tbaa !58
  %1126 = add nuw nsw i64 %1110, 3
  %1127 = getelementptr inbounds i32, ptr %996, i64 %1126
  %1128 = load i32, ptr %1127, align 4, !tbaa !5
  %1129 = sext i32 %1128 to i64
  %1130 = getelementptr inbounds i8, ptr %994, i64 %1129
  store i8 0, ptr %1130, align 1, !tbaa !58
  %1131 = add nuw nsw i64 %1110, 4
  %1132 = add i64 %1111, 4
  %1133 = icmp eq i64 %1132, %1108
  br i1 %1133, label %1141, label %1109

1134:                                             ; preds = %1045
  %1135 = load i32, ptr %962, align 8, !tbaa !61
  %1136 = tail call i32 @llvm.smax.i32(i32 %1135, i32 -1)
  %1137 = sext i32 %1136 to i64
  %1138 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %1137) #12
  %1139 = load i32, ptr %962, align 8, !tbaa !61
  %1140 = sext i32 %1139 to i64
  tail call void @llvm.memset.p0.i64(ptr nonnull align 1 %1138, i8 0, i64 %1140, i1 false)
  br label %1154

1141:                                             ; preds = %1109, %1100
  %1142 = phi i64 [ 1, %1100 ], [ %1131, %1109 ]
  %1143 = icmp eq i64 %1105, 0
  br i1 %1143, label %1154, label %1144

1144:                                             ; preds = %1141, %1144
  %1145 = phi i64 [ %1151, %1144 ], [ %1142, %1141 ]
  %1146 = phi i64 [ %1152, %1144 ], [ 0, %1141 ]
  %1147 = getelementptr inbounds i32, ptr %996, i64 %1145
  %1148 = load i32, ptr %1147, align 4, !tbaa !5
  %1149 = sext i32 %1148 to i64
  %1150 = getelementptr inbounds i8, ptr %994, i64 %1149
  store i8 0, ptr %1150, align 1, !tbaa !58
  %1151 = add nuw nsw i64 %1145, 1
  %1152 = add i64 %1146, 1
  %1153 = icmp eq i64 %1152, %1105
  br i1 %1153, label %1154, label %1144, !llvm.loop !187

1154:                                             ; preds = %1141, %1144, %1097, %1134
  %1155 = phi ptr [ %1138, %1134 ], [ %994, %1097 ], [ %994, %1144 ], [ %994, %1141 ]
  %1156 = load i32, ptr %1005, align 4
  %1157 = shl i32 %1156, 2
  %1158 = ashr exact i32 %1157, 2
  %1159 = load ptr, ptr %963, align 8, !tbaa !63
  %1160 = sext i32 %1158 to i64
  %1161 = getelementptr inbounds ptr, ptr %1159, i64 %1160
  %1162 = load ptr, ptr %1161, align 8, !tbaa !23
  %1163 = load i32, ptr %1162, align 4, !tbaa !5
  %1164 = icmp slt i32 %1163, 1
  br i1 %1164, label %1217, label %1165

1165:                                             ; preds = %1154
  %1166 = add nuw i32 %1163, 1
  %1167 = zext i32 %1166 to i64
  %1168 = add nsw i64 %1167, -1
  %1169 = add nsw i64 %1167, -2
  %1170 = and i64 %1168, 3
  %1171 = icmp ult i64 %1169, 3
  br i1 %1171, label %1199, label %1172

1172:                                             ; preds = %1165
  %1173 = and i64 %1168, -4
  br label %1174

1174:                                             ; preds = %1174, %1172
  %1175 = phi i64 [ 1, %1172 ], [ %1196, %1174 ]
  %1176 = phi i64 [ 0, %1172 ], [ %1197, %1174 ]
  %1177 = getelementptr inbounds i32, ptr %1162, i64 %1175
  %1178 = load i32, ptr %1177, align 4, !tbaa !5
  %1179 = sext i32 %1178 to i64
  %1180 = getelementptr inbounds i8, ptr %1155, i64 %1179
  store i8 1, ptr %1180, align 1, !tbaa !58
  %1181 = add nuw nsw i64 %1175, 1
  %1182 = getelementptr inbounds i32, ptr %1162, i64 %1181
  %1183 = load i32, ptr %1182, align 4, !tbaa !5
  %1184 = sext i32 %1183 to i64
  %1185 = getelementptr inbounds i8, ptr %1155, i64 %1184
  store i8 1, ptr %1185, align 1, !tbaa !58
  %1186 = add nuw nsw i64 %1175, 2
  %1187 = getelementptr inbounds i32, ptr %1162, i64 %1186
  %1188 = load i32, ptr %1187, align 4, !tbaa !5
  %1189 = sext i32 %1188 to i64
  %1190 = getelementptr inbounds i8, ptr %1155, i64 %1189
  store i8 1, ptr %1190, align 1, !tbaa !58
  %1191 = add nuw nsw i64 %1175, 3
  %1192 = getelementptr inbounds i32, ptr %1162, i64 %1191
  %1193 = load i32, ptr %1192, align 4, !tbaa !5
  %1194 = sext i32 %1193 to i64
  %1195 = getelementptr inbounds i8, ptr %1155, i64 %1194
  store i8 1, ptr %1195, align 1, !tbaa !58
  %1196 = add nuw nsw i64 %1175, 4
  %1197 = add i64 %1176, 4
  %1198 = icmp eq i64 %1197, %1173
  br i1 %1198, label %1199, label %1174

1199:                                             ; preds = %1174, %1165
  %1200 = phi i64 [ 1, %1165 ], [ %1196, %1174 ]
  %1201 = icmp eq i64 %1170, 0
  br i1 %1201, label %1212, label %1202

1202:                                             ; preds = %1199, %1202
  %1203 = phi i64 [ %1209, %1202 ], [ %1200, %1199 ]
  %1204 = phi i64 [ %1210, %1202 ], [ 0, %1199 ]
  %1205 = getelementptr inbounds i32, ptr %1162, i64 %1203
  %1206 = load i32, ptr %1205, align 4, !tbaa !5
  %1207 = sext i32 %1206 to i64
  %1208 = getelementptr inbounds i8, ptr %1155, i64 %1207
  store i8 1, ptr %1208, align 1, !tbaa !58
  %1209 = add nuw nsw i64 %1203, 1
  %1210 = add i64 %1204, 1
  %1211 = icmp eq i64 %1210, %1170
  br i1 %1211, label %1212, label %1202, !llvm.loop !188

1212:                                             ; preds = %1202, %1199
  %1213 = load i32, ptr %1005, align 4
  %1214 = shl i32 %1213, 2
  %1215 = ashr exact i32 %1214, 2
  %1216 = sext i32 %1215 to i64
  br label %1217

1217:                                             ; preds = %1212, %1154
  %1218 = phi i64 [ %1216, %1212 ], [ %1160, %1154 ]
  %1219 = load ptr, ptr %964, align 8, !tbaa !65
  %1220 = getelementptr inbounds ptr, ptr %1219, i64 %1218
  %1221 = load ptr, ptr %1220, align 8, !tbaa !23
  %1222 = load i32, ptr %1221, align 4, !tbaa !5
  %1223 = icmp slt i32 %1222, 1
  br i1 %1223, label %1271, label %1224

1224:                                             ; preds = %1217
  %1225 = add nuw i32 %1222, 1
  %1226 = zext i32 %1225 to i64
  %1227 = add nsw i64 %1226, -1
  %1228 = add nsw i64 %1226, -2
  %1229 = and i64 %1227, 3
  %1230 = icmp ult i64 %1228, 3
  br i1 %1230, label %1258, label %1231

1231:                                             ; preds = %1224
  %1232 = and i64 %1227, -4
  br label %1233

1233:                                             ; preds = %1233, %1231
  %1234 = phi i64 [ 1, %1231 ], [ %1255, %1233 ]
  %1235 = phi i64 [ 0, %1231 ], [ %1256, %1233 ]
  %1236 = getelementptr inbounds i32, ptr %1221, i64 %1234
  %1237 = load i32, ptr %1236, align 4, !tbaa !5
  %1238 = sext i32 %1237 to i64
  %1239 = getelementptr inbounds i8, ptr %1155, i64 %1238
  store i8 2, ptr %1239, align 1, !tbaa !58
  %1240 = add nuw nsw i64 %1234, 1
  %1241 = getelementptr inbounds i32, ptr %1221, i64 %1240
  %1242 = load i32, ptr %1241, align 4, !tbaa !5
  %1243 = sext i32 %1242 to i64
  %1244 = getelementptr inbounds i8, ptr %1155, i64 %1243
  store i8 2, ptr %1244, align 1, !tbaa !58
  %1245 = add nuw nsw i64 %1234, 2
  %1246 = getelementptr inbounds i32, ptr %1221, i64 %1245
  %1247 = load i32, ptr %1246, align 4, !tbaa !5
  %1248 = sext i32 %1247 to i64
  %1249 = getelementptr inbounds i8, ptr %1155, i64 %1248
  store i8 2, ptr %1249, align 1, !tbaa !58
  %1250 = add nuw nsw i64 %1234, 3
  %1251 = getelementptr inbounds i32, ptr %1221, i64 %1250
  %1252 = load i32, ptr %1251, align 4, !tbaa !5
  %1253 = sext i32 %1252 to i64
  %1254 = getelementptr inbounds i8, ptr %1155, i64 %1253
  store i8 2, ptr %1254, align 1, !tbaa !58
  %1255 = add nuw nsw i64 %1234, 4
  %1256 = add i64 %1235, 4
  %1257 = icmp eq i64 %1256, %1232
  br i1 %1257, label %1258, label %1233

1258:                                             ; preds = %1233, %1224
  %1259 = phi i64 [ 1, %1224 ], [ %1255, %1233 ]
  %1260 = icmp eq i64 %1229, 0
  br i1 %1260, label %1271, label %1261

1261:                                             ; preds = %1258, %1261
  %1262 = phi i64 [ %1268, %1261 ], [ %1259, %1258 ]
  %1263 = phi i64 [ %1269, %1261 ], [ 0, %1258 ]
  %1264 = getelementptr inbounds i32, ptr %1221, i64 %1262
  %1265 = load i32, ptr %1264, align 4, !tbaa !5
  %1266 = sext i32 %1265 to i64
  %1267 = getelementptr inbounds i8, ptr %1155, i64 %1266
  store i8 2, ptr %1267, align 1, !tbaa !58
  %1268 = add nuw nsw i64 %1262, 1
  %1269 = add i64 %1263, 1
  %1270 = icmp eq i64 %1269, %1229
  br i1 %1270, label %1271, label %1261, !llvm.loop !189

1271:                                             ; preds = %1258, %1261, %1217, %1041
  %1272 = phi ptr [ %1044, %1041 ], [ %1155, %1217 ], [ %1155, %1261 ], [ %1155, %1258 ]
  %1273 = phi ptr [ %996, %1041 ], [ %1221, %1217 ], [ %1221, %1261 ], [ %1221, %1258 ]
  %1274 = phi ptr [ %995, %1041 ], [ %1162, %1217 ], [ %1162, %1261 ], [ %1162, %1258 ]
  %1275 = phi ptr [ %994, %1041 ], [ %1155, %1217 ], [ %1155, %1261 ], [ %1155, %1258 ]
  %1276 = getelementptr inbounds %struct.CompAtom, ptr %68, i64 %1003, i32 4
  %1277 = load i8, ptr %1276, align 1
  %1278 = and i8 %1277, 7
  %1279 = icmp eq i8 %1278, 0
  %1280 = load i32, ptr @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4, !tbaa !5
  br i1 %1279, label %1463, label %1281

1281:                                             ; preds = %1271
  %1282 = icmp eq i32 %1280, 0
  br i1 %1282, label %1289, label %1283

1283:                                             ; preds = %1281
  %1284 = load i32, ptr %1005, align 4
  %1285 = freeze i32 %1284
  %1286 = icmp slt i32 %1285, 0
  %1287 = select i1 %1286, ptr %266, ptr %220
  %1288 = select i1 %1286, i32 %955, i32 %956
  br label %1289

1289:                                             ; preds = %1283, %1281
  %1290 = phi ptr [ %220, %1281 ], [ %1287, %1283 ]
  %1291 = phi i32 [ %956, %1281 ], [ %1288, %1283 ]
  %1292 = icmp sgt i32 %1291, 0
  br i1 %1292, label %1293, label %1444

1293:                                             ; preds = %1289
  %1294 = icmp ugt i32 %1291, 6
  br i1 %1294, label %1295, label %1379

1295:                                             ; preds = %1293
  %1296 = add nsw i32 %1291, -2
  %1297 = getelementptr inbounds i16, ptr %1290, i64 1
  %1298 = load i16, ptr %1297, align 2, !tbaa !44
  %1299 = zext i16 %1298 to i64
  %1300 = getelementptr inbounds %struct.CompAtom, ptr %70, i64 %1299
  %1301 = getelementptr inbounds %class.Vector, ptr %1300, i64 0, i32 2
  %1302 = load double, ptr %1301, align 8, !tbaa !49
  %1303 = load i16, ptr %1290, align 2, !tbaa !44
  %1304 = zext i16 %1303 to i64
  %1305 = getelementptr inbounds %struct.CompAtom, ptr %70, i64 %1304
  %1306 = getelementptr inbounds %class.Vector, ptr %1305, i64 0, i32 2
  %1307 = load double, ptr %1306, align 8, !tbaa !49
  %1308 = getelementptr inbounds %class.Vector, ptr %1300, i64 0, i32 1
  %1309 = load double, ptr %1308, align 8, !tbaa !67
  %1310 = getelementptr inbounds %class.Vector, ptr %1305, i64 0, i32 1
  %1311 = load double, ptr %1310, align 8, !tbaa !67
  %1312 = load double, ptr %1300, align 8, !tbaa !68
  %1313 = load double, ptr %1305, align 8, !tbaa !68
  %1314 = zext i32 %1296 to i64
  %1315 = insertelement <2 x double> poison, double %1302, i64 0
  %1316 = insertelement <2 x double> %1315, double %1307, i64 1
  %1317 = insertelement <2 x double> poison, double %1309, i64 0
  %1318 = insertelement <2 x double> %1317, double %1311, i64 1
  %1319 = insertelement <2 x double> poison, double %1312, i64 0
  %1320 = insertelement <2 x double> %1319, double %1313, i64 1
  %1321 = insertelement <2 x double> poison, double %1024, i64 0
  %1322 = shufflevector <2 x double> %1321, <2 x double> poison, <2 x i32> zeroinitializer
  %1323 = shufflevector <2 x double> %1021, <2 x double> poison, <2 x i32> <i32 1, i32 1>
  %1324 = shufflevector <2 x double> %1021, <2 x double> poison, <2 x i32> zeroinitializer
  br label %1325

1325:                                             ; preds = %1295, %1325
  %1326 = phi i64 [ 2, %1295 ], [ %1369, %1325 ]
  %1327 = phi i32 [ 0, %1295 ], [ %1368, %1325 ]
  %1328 = phi i16 [ %1303, %1295 ], [ %1335, %1325 ]
  %1329 = phi i16 [ %1298, %1295 ], [ %1338, %1325 ]
  %1330 = phi <2 x double> [ %1316, %1295 ], [ %1372, %1325 ]
  %1331 = phi <2 x double> [ %1318, %1295 ], [ %1374, %1325 ]
  %1332 = phi <2 x double> [ %1320, %1295 ], [ %1376, %1325 ]
  %1333 = fsub <2 x double> %1322, %1330
  %1334 = getelementptr inbounds i16, ptr %1290, i64 %1326
  %1335 = load i16, ptr %1334, align 2, !tbaa !44
  %1336 = or i64 %1326, 1
  %1337 = getelementptr inbounds i16, ptr %1290, i64 %1336
  %1338 = load i16, ptr %1337, align 2, !tbaa !44
  %1339 = zext i16 %1335 to i64
  %1340 = getelementptr inbounds %struct.CompAtom, ptr %70, i64 %1339
  %1341 = load double, ptr %1340, align 8, !tbaa !68
  %1342 = zext i16 %1338 to i64
  %1343 = getelementptr inbounds %struct.CompAtom, ptr %70, i64 %1342
  %1344 = load double, ptr %1343, align 8, !tbaa !68
  %1345 = getelementptr inbounds %class.Vector, ptr %1340, i64 0, i32 1
  %1346 = load double, ptr %1345, align 8, !tbaa !67
  %1347 = getelementptr inbounds %class.Vector, ptr %1343, i64 0, i32 1
  %1348 = load double, ptr %1347, align 8, !tbaa !67
  %1349 = getelementptr inbounds %class.Vector, ptr %1340, i64 0, i32 2
  %1350 = load double, ptr %1349, align 8, !tbaa !49
  %1351 = getelementptr inbounds %class.Vector, ptr %1343, i64 0, i32 2
  %1352 = load double, ptr %1351, align 8, !tbaa !49
  %1353 = fsub <2 x double> %1324, %1332
  %1354 = fmul <2 x double> %1353, %1353
  %1355 = fsub <2 x double> %1323, %1331
  %1356 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %1355, <2 x double> %1355, <2 x double> %1354)
  %1357 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %1333, <2 x double> %1333, <2 x double> %1356)
  %1358 = fcmp olt <2 x double> %1357, %984
  %1359 = zext i32 %1327 to i64
  %1360 = getelementptr inbounds i16, ptr %312, i64 %1359
  store i16 %1328, ptr %1360, align 2, !tbaa !44
  %1361 = extractelement <2 x i1> %1358, i64 1
  %1362 = zext i1 %1361 to i32
  %1363 = add nuw nsw i32 %1327, %1362
  %1364 = zext i32 %1363 to i64
  %1365 = getelementptr inbounds i16, ptr %312, i64 %1364
  store i16 %1329, ptr %1365, align 2, !tbaa !44
  %1366 = extractelement <2 x i1> %1358, i64 0
  %1367 = zext i1 %1366 to i32
  %1368 = add i32 %1363, %1367
  %1369 = add nuw nsw i64 %1326, 2
  %1370 = icmp ult i64 %1369, %1314
  %1371 = insertelement <2 x double> poison, double %1352, i64 0
  %1372 = insertelement <2 x double> %1371, double %1350, i64 1
  %1373 = insertelement <2 x double> poison, double %1348, i64 0
  %1374 = insertelement <2 x double> %1373, double %1346, i64 1
  %1375 = insertelement <2 x double> poison, double %1344, i64 0
  %1376 = insertelement <2 x double> %1375, double %1341, i64 1
  br i1 %1370, label %1325, label %1377

1377:                                             ; preds = %1325
  %1378 = trunc i64 %1326 to i32
  br label %1379

1379:                                             ; preds = %1377, %1293
  %1380 = phi i32 [ %1368, %1377 ], [ 0, %1293 ]
  %1381 = phi i32 [ %1378, %1377 ], [ 0, %1293 ]
  %1382 = icmp slt i32 %1381, %1291
  br i1 %1382, label %1383, label %1388

1383:                                             ; preds = %1379
  %1384 = zext i32 %1381 to i64
  %1385 = zext i32 %1291 to i64
  %1386 = extractelement <2 x double> %1021, i64 0
  %1387 = extractelement <2 x double> %1021, i64 1
  br label %1393

1388:                                             ; preds = %1416, %1379
  %1389 = phi i32 [ %1380, %1379 ], [ %1417, %1416 ]
  %1390 = icmp sgt i32 %1389, 0
  br i1 %1390, label %1391, label %1444

1391:                                             ; preds = %1388
  %1392 = zext i32 %1389 to i64
  br label %1420

1393:                                             ; preds = %1383, %1416
  %1394 = phi i64 [ %1384, %1383 ], [ %1418, %1416 ]
  %1395 = phi i32 [ %1380, %1383 ], [ %1417, %1416 ]
  %1396 = getelementptr inbounds i16, ptr %1290, i64 %1394
  %1397 = load i16, ptr %1396, align 2, !tbaa !44
  %1398 = zext i16 %1397 to i64
  %1399 = getelementptr inbounds %struct.CompAtom, ptr %70, i64 %1398
  %1400 = load double, ptr %1399, align 8, !tbaa !68
  %1401 = getelementptr inbounds %class.Vector, ptr %1399, i64 0, i32 1
  %1402 = load double, ptr %1401, align 8, !tbaa !67
  %1403 = getelementptr inbounds %class.Vector, ptr %1399, i64 0, i32 2
  %1404 = load double, ptr %1403, align 8, !tbaa !49
  %1405 = fsub double %1386, %1400
  %1406 = fmul double %1405, %1405
  %1407 = fsub double %1387, %1402
  %1408 = tail call double @llvm.fmuladd.f64(double %1407, double %1407, double %1406)
  %1409 = fsub double %1024, %1404
  %1410 = tail call double @llvm.fmuladd.f64(double %1409, double %1409, double %1408)
  %1411 = fcmp ugt double %1410, %24
  br i1 %1411, label %1416, label %1412

1412:                                             ; preds = %1393
  %1413 = add nsw i32 %1395, 1
  %1414 = sext i32 %1395 to i64
  %1415 = getelementptr inbounds i16, ptr %312, i64 %1414
  store i16 %1397, ptr %1415, align 2, !tbaa !44
  br label %1416

1416:                                             ; preds = %1412, %1393
  %1417 = phi i32 [ %1413, %1412 ], [ %1395, %1393 ]
  %1418 = add nuw nsw i64 %1394, 1
  %1419 = icmp eq i64 %1418, %1385
  br i1 %1419, label %1388, label %1393

1420:                                             ; preds = %1391, %1437
  %1421 = phi i64 [ 0, %1391 ], [ %1440, %1437 ]
  %1422 = phi ptr [ %450, %1391 ], [ %1439, %1437 ]
  %1423 = getelementptr inbounds i16, ptr %312, i64 %1421
  %1424 = load i16, ptr %1423, align 2, !tbaa !44
  %1425 = zext i16 %1424 to i64
  %1426 = getelementptr inbounds %struct.CompAtom, ptr %70, i64 %1425, i32 4
  %1427 = load i8, ptr %1426, align 1
  %1428 = and i8 %1427, 7
  store i16 %1424, ptr %1422, align 2, !tbaa !44
  %1429 = getelementptr inbounds i16, ptr %1422, i64 1
  %1430 = insertelement <2 x i16> poison, i16 %1424, i64 0
  %1431 = shufflevector <2 x i16> %1430, <2 x i16> poison, <2 x i32> zeroinitializer
  %1432 = add <2 x i16> %1431, <i16 1, i16 2>
  store <2 x i16> %1432, ptr %1429, align 2, !tbaa !44
  %1433 = icmp ult i8 %1428, 4
  br i1 %1433, label %1437, label %1434

1434:                                             ; preds = %1420
  %1435 = add <2 x i16> %1431, <i16 3, i16 4>
  %1436 = getelementptr inbounds i16, ptr %1422, i64 3
  store <2 x i16> %1435, ptr %1436, align 2, !tbaa !44
  br label %1437

1437:                                             ; preds = %1434, %1420
  %1438 = zext i8 %1428 to i64
  %1439 = getelementptr inbounds i16, ptr %1422, i64 %1438
  %1440 = add nuw nsw i64 %1421, 1
  %1441 = icmp eq i64 %1440, %1392
  br i1 %1441, label %1442, label %1420

1442:                                             ; preds = %1437
  %1443 = ptrtoint ptr %1439 to i64
  br label %1444

1444:                                             ; preds = %1442, %1388, %1289
  %1445 = phi i64 [ %1443, %1442 ], [ %965, %1388 ], [ %965, %1289 ]
  %1446 = sub i64 %1445, %965
  %1447 = lshr exact i64 %1446, 1
  %1448 = trunc i64 %1447 to i32
  %1449 = icmp eq i32 %1448, 0
  br i1 %1449, label %1450, label %1455

1450:                                             ; preds = %1444
  %1451 = load i8, ptr %1276, align 1
  %1452 = and i8 %1451, 7
  %1453 = zext i8 %1452 to i32
  %1454 = add nsw i32 %993, %1453
  br label %3939

1455:                                             ; preds = %1444
  %1456 = shl i64 %1446, 31
  %1457 = add i64 %1456, -4294967296
  %1458 = ashr i64 %1457, 32
  %1459 = getelementptr inbounds i16, ptr %450, i64 %1458
  %1460 = load i16, ptr %1459, align 2, !tbaa !44
  %1461 = ashr i64 %1456, 32
  %1462 = getelementptr inbounds i16, ptr %450, i64 %1461
  store i16 %1460, ptr %1462, align 2, !tbaa !44
  br label %1463

1463:                                             ; preds = %1455, %1271
  %1464 = phi i32 [ %1448, %1455 ], [ %997, %1271 ]
  %1465 = icmp eq i32 %1280, 0
  br i1 %1465, label %1470, label %1466

1466:                                             ; preds = %1463
  %1467 = load i32, ptr %1005, align 4
  %1468 = and i32 %1467, 1073741824
  %1469 = icmp ne i32 %1468, 0
  br label %1470

1470:                                             ; preds = %1466, %1463
  %1471 = phi i1 [ false, %1463 ], [ %1469, %1466 ]
  %1472 = load i32, ptr %14, align 8, !tbaa !17
  %1473 = add nsw i32 %966, %1472
  %1474 = load i32, ptr %967, align 4, !tbaa !69
  %1475 = icmp sgt i32 %1474, %1473
  br i1 %1475, label %1491, label %1476

1476:                                             ; preds = %1470, %1476
  %1477 = phi i32 [ %1479, %1476 ], [ %1474, %1470 ]
  %1478 = ashr i32 %1477, 1
  %1479 = add nsw i32 %1478, %1477
  %1480 = icmp sgt i32 %1479, %1473
  br i1 %1480, label %1481, label %1476

1481:                                             ; preds = %1476
  %1482 = sext i32 %1479 to i64
  %1483 = icmp slt i32 %1479, 0
  %1484 = shl nsw i64 %1482, 1
  %1485 = select i1 %1483, i64 -1, i64 %1484
  %1486 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %1485) #12
  %1487 = load ptr, ptr %9, align 8, !tbaa !46
  %1488 = sext i32 %1472 to i64
  %1489 = shl nsw i64 %1488, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 2 %1486, ptr align 2 %1487, i64 %1489, i1 false)
  %1490 = icmp eq ptr %1487, null
  br i1 %1490, label %1495, label %1493

1491:                                             ; preds = %1470
  %1492 = load ptr, ptr %9, align 8, !tbaa !46
  br label %1497

1493:                                             ; preds = %1481
  tail call void @_ZdaPv(ptr noundef nonnull %1487) #13
  %1494 = load i32, ptr %14, align 8, !tbaa !17
  br label %1495

1495:                                             ; preds = %1493, %1481
  %1496 = phi i32 [ %1494, %1493 ], [ %1472, %1481 ]
  store ptr %1486, ptr %9, align 8, !tbaa !46
  store i32 %1479, ptr %967, align 4, !tbaa !69
  br label %1497

1497:                                             ; preds = %1491, %1495
  %1498 = phi i32 [ %1472, %1491 ], [ %1496, %1495 ]
  %1499 = phi ptr [ %1492, %1491 ], [ %1486, %1495 ]
  %1500 = ptrtoint ptr %1499 to i64
  %1501 = add nsw i32 %1498, 1
  %1502 = sext i32 %1501 to i64
  %1503 = getelementptr inbounds i16, ptr %1499, i64 %1502
  %1504 = icmp sgt i32 %1464, 0
  br i1 %1471, label %1505, label %1552

1505:                                             ; preds = %1497
  br i1 %1504, label %1506, label %1712

1506:                                             ; preds = %1505
  %1507 = zext i32 %1464 to i64
  %1508 = extractelement <2 x double> %1021, i64 0
  %1509 = extractelement <2 x double> %1021, i64 1
  br label %1510

1510:                                             ; preds = %1506, %1547
  %1511 = phi i64 [ 0, %1506 ], [ %1550, %1547 ]
  %1512 = phi ptr [ %496, %1506 ], [ %1549, %1547 ]
  %1513 = phi ptr [ %1503, %1506 ], [ %1548, %1547 ]
  %1514 = getelementptr inbounds i16, ptr %450, i64 %1511
  %1515 = load i16, ptr %1514, align 2, !tbaa !44
  %1516 = zext i16 %1515 to i64
  %1517 = getelementptr inbounds %struct.CompAtomExt, ptr %74, i64 %1516
  %1518 = load i32, ptr %1517, align 4
  %1519 = and i32 %1518, 1073741824
  %1520 = icmp eq i32 %1519, 0
  br i1 %1520, label %1521, label %1547

1521:                                             ; preds = %1510
  %1522 = getelementptr inbounds %struct.CompAtom, ptr %70, i64 %1516
  %1523 = getelementptr inbounds %class.Vector, ptr %1522, i64 0, i32 2
  %1524 = load double, ptr %1523, align 8, !tbaa !49
  %1525 = fsub double %1024, %1524
  %1526 = getelementptr inbounds %class.Vector, ptr %1522, i64 0, i32 1
  %1527 = load double, ptr %1526, align 8, !tbaa !67
  %1528 = fsub double %1509, %1527
  %1529 = load double, ptr %1522, align 8, !tbaa !68
  %1530 = fsub double %1508, %1529
  %1531 = fmul double %1530, %1530
  %1532 = tail call double @llvm.fmuladd.f64(double %1528, double %1528, double %1531)
  %1533 = tail call double @llvm.fmuladd.f64(double %1525, double %1525, double %1532)
  %1534 = fcmp ugt double %1533, %21
  br i1 %1534, label %1547, label %1535

1535:                                             ; preds = %1521
  %1536 = shl i32 %1518, 2
  %1537 = ashr exact i32 %1536, 2
  %1538 = icmp slt i32 %1537, %1035
  %1539 = icmp sgt i32 %1537, %1037
  %1540 = select i1 %1538, i1 true, i1 %1539
  %1541 = select i1 %1540, ptr %1513, ptr %1512
  %1542 = zext i1 %1540 to i64
  %1543 = getelementptr inbounds i16, ptr %1513, i64 %1542
  %1544 = xor i1 %1540, true
  %1545 = zext i1 %1544 to i64
  %1546 = getelementptr inbounds i16, ptr %1512, i64 %1545
  store i16 %1515, ptr %1541, align 2, !tbaa !44
  br label %1547

1547:                                             ; preds = %1535, %1521, %1510
  %1548 = phi ptr [ %1513, %1510 ], [ %1513, %1521 ], [ %1543, %1535 ]
  %1549 = phi ptr [ %1512, %1510 ], [ %1512, %1521 ], [ %1546, %1535 ]
  %1550 = add nuw nsw i64 %1511, 1
  %1551 = icmp eq i64 %1550, %1507
  br i1 %1551, label %1712, label %1510

1552:                                             ; preds = %1497
  br i1 %1504, label %1553, label %1712

1553:                                             ; preds = %1552
  %1554 = icmp ugt i32 %1464, 6
  br i1 %1554, label %1555, label %1663

1555:                                             ; preds = %1553
  %1556 = add nsw i32 %1464, -2
  %1557 = load i16, ptr %450, align 2, !tbaa !44
  %1558 = zext i16 %1557 to i64
  %1559 = getelementptr inbounds %struct.CompAtomExt, ptr %74, i64 %1558
  %1560 = load i32, ptr %1559, align 4
  %1561 = load i16, ptr %968, align 2, !tbaa !44
  %1562 = zext i16 %1561 to i64
  %1563 = getelementptr inbounds %struct.CompAtom, ptr %70, i64 %1562
  %1564 = getelementptr inbounds %class.Vector, ptr %1563, i64 0, i32 2
  %1565 = load double, ptr %1564, align 8, !tbaa !49
  %1566 = getelementptr inbounds %struct.CompAtom, ptr %70, i64 %1558
  %1567 = getelementptr inbounds %class.Vector, ptr %1566, i64 0, i32 2
  %1568 = load double, ptr %1567, align 8, !tbaa !49
  %1569 = getelementptr inbounds %class.Vector, ptr %1563, i64 0, i32 1
  %1570 = load double, ptr %1569, align 8, !tbaa !67
  %1571 = getelementptr inbounds %class.Vector, ptr %1566, i64 0, i32 1
  %1572 = load double, ptr %1571, align 8, !tbaa !67
  %1573 = load double, ptr %1563, align 8, !tbaa !68
  %1574 = load double, ptr %1566, align 8, !tbaa !68
  %1575 = zext i32 %1556 to i64
  %1576 = extractelement <2 x double> %1021, i64 0
  %1577 = extractelement <2 x double> %1021, i64 1
  br label %1578

1578:                                             ; preds = %1555, %1656
  %1579 = phi i64 [ 2, %1555 ], [ %1659, %1656 ]
  %1580 = phi i64 [ %1562, %1555 ], [ %1616, %1656 ]
  %1581 = phi i32 [ %1560, %1555 ], [ %1644, %1656 ]
  %1582 = phi ptr [ %496, %1555 ], [ %1658, %1656 ]
  %1583 = phi ptr [ %1503, %1555 ], [ %1657, %1656 ]
  %1584 = phi i16 [ %1557, %1555 ], [ %1609, %1656 ]
  %1585 = phi i16 [ %1561, %1555 ], [ %1612, %1656 ]
  %1586 = phi double [ %1574, %1555 ], [ %1615, %1656 ]
  %1587 = phi double [ %1573, %1555 ], [ %1618, %1656 ]
  %1588 = phi double [ %1572, %1555 ], [ %1620, %1656 ]
  %1589 = phi double [ %1570, %1555 ], [ %1622, %1656 ]
  %1590 = phi double [ %1568, %1555 ], [ %1624, %1656 ]
  %1591 = phi double [ %1565, %1555 ], [ %1626, %1656 ]
  %1592 = getelementptr inbounds %struct.CompAtomExt, ptr %74, i64 %1580
  %1593 = load i32, ptr %1592, align 4
  %1594 = shl i32 %1593, 2
  %1595 = ashr exact i32 %1594, 2
  %1596 = fsub double %1576, %1586
  %1597 = fsub double %1576, %1587
  %1598 = fmul double %1596, %1596
  %1599 = fmul double %1597, %1597
  %1600 = fsub double %1577, %1588
  %1601 = fsub double %1577, %1589
  %1602 = tail call double @llvm.fmuladd.f64(double %1600, double %1600, double %1598)
  %1603 = tail call double @llvm.fmuladd.f64(double %1601, double %1601, double %1599)
  %1604 = fsub double %1024, %1590
  %1605 = fsub double %1024, %1591
  %1606 = tail call double @llvm.fmuladd.f64(double %1604, double %1604, double %1602)
  %1607 = tail call double @llvm.fmuladd.f64(double %1605, double %1605, double %1603)
  %1608 = getelementptr inbounds i16, ptr %450, i64 %1579
  %1609 = load i16, ptr %1608, align 2, !tbaa !44
  %1610 = or i64 %1579, 1
  %1611 = getelementptr inbounds i16, ptr %450, i64 %1610
  %1612 = load i16, ptr %1611, align 2, !tbaa !44
  %1613 = zext i16 %1609 to i64
  %1614 = getelementptr inbounds %struct.CompAtom, ptr %70, i64 %1613
  %1615 = load double, ptr %1614, align 8, !tbaa !68
  %1616 = zext i16 %1612 to i64
  %1617 = getelementptr inbounds %struct.CompAtom, ptr %70, i64 %1616
  %1618 = load double, ptr %1617, align 8, !tbaa !68
  %1619 = getelementptr inbounds %class.Vector, ptr %1614, i64 0, i32 1
  %1620 = load double, ptr %1619, align 8, !tbaa !67
  %1621 = getelementptr inbounds %class.Vector, ptr %1617, i64 0, i32 1
  %1622 = load double, ptr %1621, align 8, !tbaa !67
  %1623 = getelementptr inbounds %class.Vector, ptr %1614, i64 0, i32 2
  %1624 = load double, ptr %1623, align 8, !tbaa !49
  %1625 = getelementptr inbounds %class.Vector, ptr %1617, i64 0, i32 2
  %1626 = load double, ptr %1625, align 8, !tbaa !49
  %1627 = fcmp ugt double %1606, %21
  br i1 %1627, label %1640, label %1628

1628:                                             ; preds = %1578
  %1629 = shl i32 %1581, 2
  %1630 = ashr exact i32 %1629, 2
  %1631 = icmp slt i32 %1630, %1035
  %1632 = icmp sgt i32 %1630, %1037
  %1633 = select i1 %1631, i1 true, i1 %1632
  %1634 = select i1 %1633, ptr %1583, ptr %1582
  %1635 = zext i1 %1633 to i64
  %1636 = getelementptr inbounds i16, ptr %1583, i64 %1635
  %1637 = xor i1 %1633, true
  %1638 = zext i1 %1637 to i64
  %1639 = getelementptr inbounds i16, ptr %1582, i64 %1638
  store i16 %1584, ptr %1634, align 2, !tbaa !44
  br label %1640

1640:                                             ; preds = %1628, %1578
  %1641 = phi ptr [ %1583, %1578 ], [ %1636, %1628 ]
  %1642 = phi ptr [ %1582, %1578 ], [ %1639, %1628 ]
  %1643 = getelementptr inbounds %struct.CompAtomExt, ptr %74, i64 %1613
  %1644 = load i32, ptr %1643, align 4
  %1645 = fcmp ugt double %1607, %21
  br i1 %1645, label %1656, label %1646

1646:                                             ; preds = %1640
  %1647 = icmp slt i32 %1595, %1035
  %1648 = icmp sgt i32 %1595, %1037
  %1649 = select i1 %1647, i1 true, i1 %1648
  %1650 = select i1 %1649, ptr %1641, ptr %1642
  %1651 = zext i1 %1649 to i64
  %1652 = getelementptr inbounds i16, ptr %1641, i64 %1651
  %1653 = xor i1 %1649, true
  %1654 = zext i1 %1653 to i64
  %1655 = getelementptr inbounds i16, ptr %1642, i64 %1654
  store i16 %1585, ptr %1650, align 2, !tbaa !44
  br label %1656

1656:                                             ; preds = %1646, %1640
  %1657 = phi ptr [ %1641, %1640 ], [ %1652, %1646 ]
  %1658 = phi ptr [ %1642, %1640 ], [ %1655, %1646 ]
  %1659 = add nuw nsw i64 %1579, 2
  %1660 = icmp ult i64 %1659, %1575
  br i1 %1660, label %1578, label %1661

1661:                                             ; preds = %1656
  %1662 = trunc i64 %1579 to i32
  br label %1663

1663:                                             ; preds = %1661, %1553
  %1664 = phi i32 [ %1662, %1661 ], [ 0, %1553 ]
  %1665 = phi ptr [ %1657, %1661 ], [ %1503, %1553 ]
  %1666 = phi ptr [ %1658, %1661 ], [ %496, %1553 ]
  %1667 = icmp slt i32 %1664, %1464
  br i1 %1667, label %1668, label %1712

1668:                                             ; preds = %1663
  %1669 = zext i32 %1664 to i64
  %1670 = zext i32 %1464 to i64
  %1671 = extractelement <2 x double> %1021, i64 0
  %1672 = extractelement <2 x double> %1021, i64 1
  br label %1673

1673:                                             ; preds = %1668, %1707
  %1674 = phi i64 [ %1669, %1668 ], [ %1710, %1707 ]
  %1675 = phi ptr [ %1666, %1668 ], [ %1709, %1707 ]
  %1676 = phi ptr [ %1665, %1668 ], [ %1708, %1707 ]
  %1677 = getelementptr inbounds i16, ptr %450, i64 %1674
  %1678 = load i16, ptr %1677, align 2, !tbaa !44
  %1679 = zext i16 %1678 to i64
  %1680 = getelementptr inbounds %struct.CompAtom, ptr %70, i64 %1679
  %1681 = load double, ptr %1680, align 8, !tbaa !68
  %1682 = getelementptr inbounds %class.Vector, ptr %1680, i64 0, i32 1
  %1683 = load double, ptr %1682, align 8, !tbaa !67
  %1684 = getelementptr inbounds %class.Vector, ptr %1680, i64 0, i32 2
  %1685 = load double, ptr %1684, align 8, !tbaa !49
  %1686 = fsub double %1671, %1681
  %1687 = fmul double %1686, %1686
  %1688 = fsub double %1672, %1683
  %1689 = tail call double @llvm.fmuladd.f64(double %1688, double %1688, double %1687)
  %1690 = fsub double %1024, %1685
  %1691 = tail call double @llvm.fmuladd.f64(double %1690, double %1690, double %1689)
  %1692 = fcmp ugt double %1691, %21
  br i1 %1692, label %1707, label %1693

1693:                                             ; preds = %1673
  %1694 = getelementptr inbounds %struct.CompAtomExt, ptr %74, i64 %1679
  %1695 = load i32, ptr %1694, align 4
  %1696 = shl i32 %1695, 2
  %1697 = ashr exact i32 %1696, 2
  %1698 = icmp slt i32 %1697, %1035
  %1699 = icmp sgt i32 %1697, %1037
  %1700 = select i1 %1698, i1 true, i1 %1699
  %1701 = select i1 %1700, ptr %1676, ptr %1675
  %1702 = zext i1 %1700 to i64
  %1703 = getelementptr inbounds i16, ptr %1676, i64 %1702
  %1704 = xor i1 %1700, true
  %1705 = zext i1 %1704 to i64
  %1706 = getelementptr inbounds i16, ptr %1675, i64 %1705
  store i16 %1678, ptr %1701, align 2, !tbaa !44
  br label %1707

1707:                                             ; preds = %1693, %1673
  %1708 = phi ptr [ %1676, %1673 ], [ %1703, %1693 ]
  %1709 = phi ptr [ %1675, %1673 ], [ %1706, %1693 ]
  %1710 = add nuw nsw i64 %1674, 1
  %1711 = icmp eq i64 %1710, %1670
  br i1 %1711, label %1712, label %1673

1712:                                             ; preds = %1707, %1547, %1663, %1505, %1552
  %1713 = phi ptr [ %1503, %1552 ], [ %1503, %1505 ], [ %1665, %1663 ], [ %1548, %1547 ], [ %1708, %1707 ]
  %1714 = phi ptr [ %496, %1552 ], [ %496, %1505 ], [ %1666, %1663 ], [ %1549, %1547 ], [ %1709, %1707 ]
  %1715 = icmp eq ptr %1713, %1503
  %1716 = icmp eq ptr %1714, %496
  %1717 = select i1 %1715, i1 %1716, i1 false
  br i1 %1717, label %1718, label %1720

1718:                                             ; preds = %1712
  %1719 = add nsw i32 %993, 1
  br label %3939

1720:                                             ; preds = %1712
  %1721 = trunc i32 %993 to i16
  %1722 = load i32, ptr %14, align 8, !tbaa !17
  %1723 = add nsw i32 %1722, -1
  %1724 = sext i32 %1723 to i64
  %1725 = getelementptr inbounds i16, ptr %1499, i64 %1724
  store i16 %1721, ptr %1725, align 2, !tbaa !44
  %1726 = ptrtoint ptr %1713 to i64
  %1727 = ptrtoint ptr %1503 to i64
  %1728 = sub i64 %1726, %1727
  %1729 = lshr exact i64 %1728, 1
  %1730 = trunc i64 %1729 to i32
  %1731 = icmp sgt i32 %1730, 0
  br i1 %1731, label %1732, label %1832

1732:                                             ; preds = %1720
  %1733 = and i64 %1729, 4294967295
  %1734 = and i64 %1729, 1
  %1735 = icmp eq i64 %1733, 1
  br i1 %1735, label %1800, label %1736

1736:                                             ; preds = %1732
  %1737 = sub nsw i64 %1733, %1734
  br label %1738

1738:                                             ; preds = %1793, %1736
  %1739 = phi i64 [ 0, %1736 ], [ %1797, %1793 ]
  %1740 = phi ptr [ %1503, %1736 ], [ %1796, %1793 ]
  %1741 = phi ptr [ %542, %1736 ], [ %1795, %1793 ]
  %1742 = phi ptr [ %680, %1736 ], [ %1794, %1793 ]
  %1743 = phi i64 [ 0, %1736 ], [ %1798, %1793 ]
  %1744 = getelementptr inbounds i16, ptr %1503, i64 %1739
  %1745 = load i16, ptr %1744, align 2, !tbaa !44
  %1746 = zext i16 %1745 to i64
  %1747 = getelementptr inbounds %struct.CompAtom, ptr %70, i64 %1746, i32 3
  %1748 = load i8, ptr %1747, align 2, !tbaa !51
  %1749 = zext i8 %1748 to i32
  %1750 = mul nuw nsw i32 %1749, 3
  %1751 = add nuw nsw i32 %1750, %1027
  %1752 = zext i32 %1751 to i64
  %1753 = getelementptr inbounds [9 x i32], ptr %2, i64 0, i64 %1752
  %1754 = load i32, ptr %1753, align 4, !tbaa !5
  switch i32 %1754, label %1766 [
    i32 0, label %1755
    i32 1, label %1757
    i32 2, label %1759
  ]

1755:                                             ; preds = %1738
  %1756 = getelementptr inbounds i16, ptr %1740, i64 1
  br label %1761

1757:                                             ; preds = %1738
  %1758 = getelementptr inbounds i16, ptr %1741, i64 1
  br label %1761

1759:                                             ; preds = %1738
  %1760 = getelementptr inbounds i16, ptr %1742, i64 1
  br label %1761

1761:                                             ; preds = %1755, %1757, %1759
  %1762 = phi ptr [ %1742, %1759 ], [ %1741, %1757 ], [ %1740, %1755 ]
  %1763 = phi ptr [ %1760, %1759 ], [ %1742, %1757 ], [ %1742, %1755 ]
  %1764 = phi ptr [ %1741, %1759 ], [ %1758, %1757 ], [ %1741, %1755 ]
  %1765 = phi ptr [ %1740, %1759 ], [ %1740, %1757 ], [ %1756, %1755 ]
  store i16 %1745, ptr %1762, align 2, !tbaa !44
  br label %1766

1766:                                             ; preds = %1761, %1738
  %1767 = phi ptr [ %1742, %1738 ], [ %1763, %1761 ]
  %1768 = phi ptr [ %1741, %1738 ], [ %1764, %1761 ]
  %1769 = phi ptr [ %1740, %1738 ], [ %1765, %1761 ]
  %1770 = or i64 %1739, 1
  %1771 = getelementptr inbounds i16, ptr %1503, i64 %1770
  %1772 = load i16, ptr %1771, align 2, !tbaa !44
  %1773 = zext i16 %1772 to i64
  %1774 = getelementptr inbounds %struct.CompAtom, ptr %70, i64 %1773, i32 3
  %1775 = load i8, ptr %1774, align 2, !tbaa !51
  %1776 = zext i8 %1775 to i32
  %1777 = mul nuw nsw i32 %1776, 3
  %1778 = add nuw nsw i32 %1777, %1027
  %1779 = zext i32 %1778 to i64
  %1780 = getelementptr inbounds [9 x i32], ptr %2, i64 0, i64 %1779
  %1781 = load i32, ptr %1780, align 4, !tbaa !5
  switch i32 %1781, label %1793 [
    i32 0, label %1786
    i32 1, label %1784
    i32 2, label %1782
  ]

1782:                                             ; preds = %1766
  %1783 = getelementptr inbounds i16, ptr %1767, i64 1
  br label %1788

1784:                                             ; preds = %1766
  %1785 = getelementptr inbounds i16, ptr %1768, i64 1
  br label %1788

1786:                                             ; preds = %1766
  %1787 = getelementptr inbounds i16, ptr %1769, i64 1
  br label %1788

1788:                                             ; preds = %1786, %1784, %1782
  %1789 = phi ptr [ %1767, %1782 ], [ %1768, %1784 ], [ %1769, %1786 ]
  %1790 = phi ptr [ %1783, %1782 ], [ %1767, %1784 ], [ %1767, %1786 ]
  %1791 = phi ptr [ %1768, %1782 ], [ %1785, %1784 ], [ %1768, %1786 ]
  %1792 = phi ptr [ %1769, %1782 ], [ %1769, %1784 ], [ %1787, %1786 ]
  store i16 %1772, ptr %1789, align 2, !tbaa !44
  br label %1793

1793:                                             ; preds = %1788, %1766
  %1794 = phi ptr [ %1767, %1766 ], [ %1790, %1788 ]
  %1795 = phi ptr [ %1768, %1766 ], [ %1791, %1788 ]
  %1796 = phi ptr [ %1769, %1766 ], [ %1792, %1788 ]
  %1797 = add nuw nsw i64 %1739, 2
  %1798 = add i64 %1743, 2
  %1799 = icmp eq i64 %1798, %1737
  br i1 %1799, label %1800, label %1738

1800:                                             ; preds = %1793, %1732
  %1801 = phi ptr [ undef, %1732 ], [ %1794, %1793 ]
  %1802 = phi ptr [ undef, %1732 ], [ %1795, %1793 ]
  %1803 = phi ptr [ undef, %1732 ], [ %1796, %1793 ]
  %1804 = phi i64 [ 0, %1732 ], [ %1797, %1793 ]
  %1805 = phi ptr [ %1503, %1732 ], [ %1796, %1793 ]
  %1806 = phi ptr [ %542, %1732 ], [ %1795, %1793 ]
  %1807 = phi ptr [ %680, %1732 ], [ %1794, %1793 ]
  %1808 = icmp eq i64 %1734, 0
  br i1 %1808, label %1832, label %1809

1809:                                             ; preds = %1800
  %1810 = getelementptr inbounds i16, ptr %1503, i64 %1804
  %1811 = load i16, ptr %1810, align 2, !tbaa !44
  %1812 = zext i16 %1811 to i64
  %1813 = getelementptr inbounds %struct.CompAtom, ptr %70, i64 %1812, i32 3
  %1814 = load i8, ptr %1813, align 2, !tbaa !51
  %1815 = zext i8 %1814 to i32
  %1816 = mul nuw nsw i32 %1815, 3
  %1817 = add nuw nsw i32 %1816, %1027
  %1818 = zext i32 %1817 to i64
  %1819 = getelementptr inbounds [9 x i32], ptr %2, i64 0, i64 %1818
  %1820 = load i32, ptr %1819, align 4, !tbaa !5
  switch i32 %1820, label %1832 [
    i32 0, label %1825
    i32 1, label %1823
    i32 2, label %1821
  ]

1821:                                             ; preds = %1809
  %1822 = getelementptr inbounds i16, ptr %1807, i64 1
  br label %1827

1823:                                             ; preds = %1809
  %1824 = getelementptr inbounds i16, ptr %1806, i64 1
  br label %1827

1825:                                             ; preds = %1809
  %1826 = getelementptr inbounds i16, ptr %1805, i64 1
  br label %1827

1827:                                             ; preds = %1825, %1823, %1821
  %1828 = phi ptr [ %1807, %1821 ], [ %1806, %1823 ], [ %1805, %1825 ]
  %1829 = phi ptr [ %1822, %1821 ], [ %1807, %1823 ], [ %1807, %1825 ]
  %1830 = phi ptr [ %1806, %1821 ], [ %1824, %1823 ], [ %1806, %1825 ]
  %1831 = phi ptr [ %1805, %1821 ], [ %1805, %1823 ], [ %1826, %1825 ]
  store i16 %1811, ptr %1828, align 2, !tbaa !44
  br label %1832

1832:                                             ; preds = %1800, %1827, %1809, %1720
  %1833 = phi ptr [ %680, %1720 ], [ %1801, %1800 ], [ %1807, %1809 ], [ %1829, %1827 ]
  %1834 = phi ptr [ %542, %1720 ], [ %1802, %1800 ], [ %1806, %1809 ], [ %1830, %1827 ]
  %1835 = phi ptr [ %1503, %1720 ], [ %1803, %1800 ], [ %1805, %1809 ], [ %1831, %1827 ]
  %1836 = ptrtoint ptr %1714 to i64
  %1837 = sub i64 %1836, %969
  %1838 = lshr exact i64 %1837, 1
  %1839 = trunc i64 %1838 to i32
  %1840 = icmp sgt i32 %1839, 0
  br i1 %1840, label %1841, label %1916

1841:                                             ; preds = %1832
  %1842 = and i64 %1838, 4294967295
  br label %1843

1843:                                             ; preds = %1841, %1904
  %1844 = phi i64 [ 0, %1841 ], [ %1914, %1904 ]
  %1845 = phi ptr [ %1835, %1841 ], [ %1913, %1904 ]
  %1846 = phi ptr [ %358, %1841 ], [ %1912, %1904 ]
  %1847 = phi ptr [ %404, %1841 ], [ %1911, %1904 ]
  %1848 = phi ptr [ %1834, %1841 ], [ %1910, %1904 ]
  %1849 = phi ptr [ %588, %1841 ], [ %1909, %1904 ]
  %1850 = phi ptr [ %634, %1841 ], [ %1908, %1904 ]
  %1851 = phi ptr [ %1833, %1841 ], [ %1907, %1904 ]
  %1852 = phi ptr [ %726, %1841 ], [ %1906, %1904 ]
  %1853 = phi ptr [ %772, %1841 ], [ %1905, %1904 ]
  %1854 = getelementptr inbounds i16, ptr %496, i64 %1844
  %1855 = load i16, ptr %1854, align 2, !tbaa !44
  %1856 = zext i16 %1855 to i64
  %1857 = getelementptr inbounds %struct.CompAtomExt, ptr %74, i64 %1856
  %1858 = load i32, ptr %1857, align 4
  %1859 = shl i32 %1858, 2
  %1860 = ashr exact i32 %1859, 2
  %1861 = sext i32 %1860 to i64
  %1862 = getelementptr inbounds i8, ptr %1272, i64 %1861
  %1863 = load i8, ptr %1862, align 1, !tbaa !58
  %1864 = sext i8 %1863 to i32
  %1865 = getelementptr inbounds %struct.CompAtom, ptr %70, i64 %1856, i32 3
  %1866 = load i8, ptr %1865, align 2, !tbaa !51
  %1867 = zext i8 %1866 to i32
  %1868 = mul nuw nsw i32 %1867, 3
  %1869 = add nuw nsw i32 %1868, %1027
  %1870 = zext i32 %1869 to i64
  %1871 = getelementptr inbounds [9 x i32], ptr %2, i64 0, i64 %1870
  %1872 = load i32, ptr %1871, align 4, !tbaa !5
  %1873 = mul nsw i32 %1872, 3
  %1874 = add nsw i32 %1873, %1864
  switch i32 %1874, label %1904 [
    i32 0, label %1875
    i32 1, label %1877
    i32 2, label %1879
    i32 3, label %1881
    i32 6, label %1883
    i32 5, label %1885
    i32 8, label %1887
    i32 4, label %1889
    i32 7, label %1891
  ]

1875:                                             ; preds = %1843
  %1876 = getelementptr inbounds i16, ptr %1845, i64 1
  br label %1893

1877:                                             ; preds = %1843
  %1878 = getelementptr inbounds i16, ptr %1846, i64 1
  br label %1893

1879:                                             ; preds = %1843
  %1880 = getelementptr inbounds i16, ptr %1847, i64 1
  br label %1893

1881:                                             ; preds = %1843
  %1882 = getelementptr inbounds i16, ptr %1848, i64 1
  br label %1893

1883:                                             ; preds = %1843
  %1884 = getelementptr inbounds i16, ptr %1851, i64 1
  br label %1893

1885:                                             ; preds = %1843
  %1886 = getelementptr inbounds i16, ptr %1850, i64 1
  br label %1893

1887:                                             ; preds = %1843
  %1888 = getelementptr inbounds i16, ptr %1853, i64 1
  br label %1893

1889:                                             ; preds = %1843
  %1890 = getelementptr inbounds i16, ptr %1849, i64 1
  br label %1893

1891:                                             ; preds = %1843
  %1892 = getelementptr inbounds i16, ptr %1852, i64 1
  br label %1893

1893:                                             ; preds = %1875, %1877, %1879, %1881, %1883, %1885, %1887, %1889, %1891
  %1894 = phi ptr [ %1852, %1891 ], [ %1849, %1889 ], [ %1853, %1887 ], [ %1850, %1885 ], [ %1851, %1883 ], [ %1848, %1881 ], [ %1847, %1879 ], [ %1846, %1877 ], [ %1845, %1875 ]
  %1895 = phi ptr [ %1853, %1891 ], [ %1853, %1889 ], [ %1888, %1887 ], [ %1853, %1885 ], [ %1853, %1883 ], [ %1853, %1881 ], [ %1853, %1879 ], [ %1853, %1877 ], [ %1853, %1875 ]
  %1896 = phi ptr [ %1892, %1891 ], [ %1852, %1889 ], [ %1852, %1887 ], [ %1852, %1885 ], [ %1852, %1883 ], [ %1852, %1881 ], [ %1852, %1879 ], [ %1852, %1877 ], [ %1852, %1875 ]
  %1897 = phi ptr [ %1851, %1891 ], [ %1851, %1889 ], [ %1851, %1887 ], [ %1851, %1885 ], [ %1884, %1883 ], [ %1851, %1881 ], [ %1851, %1879 ], [ %1851, %1877 ], [ %1851, %1875 ]
  %1898 = phi ptr [ %1850, %1891 ], [ %1850, %1889 ], [ %1850, %1887 ], [ %1886, %1885 ], [ %1850, %1883 ], [ %1850, %1881 ], [ %1850, %1879 ], [ %1850, %1877 ], [ %1850, %1875 ]
  %1899 = phi ptr [ %1849, %1891 ], [ %1890, %1889 ], [ %1849, %1887 ], [ %1849, %1885 ], [ %1849, %1883 ], [ %1849, %1881 ], [ %1849, %1879 ], [ %1849, %1877 ], [ %1849, %1875 ]
  %1900 = phi ptr [ %1848, %1891 ], [ %1848, %1889 ], [ %1848, %1887 ], [ %1848, %1885 ], [ %1848, %1883 ], [ %1882, %1881 ], [ %1848, %1879 ], [ %1848, %1877 ], [ %1848, %1875 ]
  %1901 = phi ptr [ %1847, %1891 ], [ %1847, %1889 ], [ %1847, %1887 ], [ %1847, %1885 ], [ %1847, %1883 ], [ %1847, %1881 ], [ %1880, %1879 ], [ %1847, %1877 ], [ %1847, %1875 ]
  %1902 = phi ptr [ %1846, %1891 ], [ %1846, %1889 ], [ %1846, %1887 ], [ %1846, %1885 ], [ %1846, %1883 ], [ %1846, %1881 ], [ %1846, %1879 ], [ %1878, %1877 ], [ %1846, %1875 ]
  %1903 = phi ptr [ %1845, %1891 ], [ %1845, %1889 ], [ %1845, %1887 ], [ %1845, %1885 ], [ %1845, %1883 ], [ %1845, %1881 ], [ %1845, %1879 ], [ %1845, %1877 ], [ %1876, %1875 ]
  store i16 %1855, ptr %1894, align 2, !tbaa !44
  br label %1904

1904:                                             ; preds = %1893, %1843
  %1905 = phi ptr [ %1853, %1843 ], [ %1895, %1893 ]
  %1906 = phi ptr [ %1852, %1843 ], [ %1896, %1893 ]
  %1907 = phi ptr [ %1851, %1843 ], [ %1897, %1893 ]
  %1908 = phi ptr [ %1850, %1843 ], [ %1898, %1893 ]
  %1909 = phi ptr [ %1849, %1843 ], [ %1899, %1893 ]
  %1910 = phi ptr [ %1848, %1843 ], [ %1900, %1893 ]
  %1911 = phi ptr [ %1847, %1843 ], [ %1901, %1893 ]
  %1912 = phi ptr [ %1846, %1843 ], [ %1902, %1893 ]
  %1913 = phi ptr [ %1845, %1843 ], [ %1903, %1893 ]
  %1914 = add nuw nsw i64 %1844, 1
  %1915 = icmp eq i64 %1914, %1842
  br i1 %1915, label %1916, label %1843

1916:                                             ; preds = %1904, %1832
  %1917 = phi ptr [ %772, %1832 ], [ %1905, %1904 ]
  %1918 = phi ptr [ %726, %1832 ], [ %1906, %1904 ]
  %1919 = phi ptr [ %1833, %1832 ], [ %1907, %1904 ]
  %1920 = phi ptr [ %634, %1832 ], [ %1908, %1904 ]
  %1921 = phi ptr [ %588, %1832 ], [ %1909, %1904 ]
  %1922 = phi ptr [ %1834, %1832 ], [ %1910, %1904 ]
  %1923 = phi ptr [ %404, %1832 ], [ %1911, %1904 ]
  %1924 = phi ptr [ %358, %1832 ], [ %1912, %1904 ]
  %1925 = phi ptr [ %1835, %1832 ], [ %1913, %1904 ]
  %1926 = ptrtoint ptr %1925 to i64
  %1927 = sub i64 %1926, %1727
  %1928 = lshr exact i64 %1927, 1
  %1929 = trunc i64 %1928 to i32
  %1930 = icmp eq i32 %1929, 0
  %1931 = shl i64 %1927, 31
  br i1 %1930, label %1937, label %1932

1932:                                             ; preds = %1916
  %1933 = add i64 %1931, -4294967296
  %1934 = ashr i64 %1933, 32
  %1935 = getelementptr inbounds i16, ptr %1503, i64 %1934
  %1936 = load i16, ptr %1935, align 2, !tbaa !44
  br label %1937

1937:                                             ; preds = %1916, %1932
  %1938 = phi i16 [ %1936, %1932 ], [ -1, %1916 ]
  %1939 = ashr i64 %1931, 32
  %1940 = getelementptr inbounds i16, ptr %1503, i64 %1939
  store i16 %1938, ptr %1940, align 2, !tbaa !44
  %1941 = trunc i64 %1928 to i16
  %1942 = add i16 %1941, 1
  %1943 = sext i32 %1722 to i64
  %1944 = getelementptr inbounds i16, ptr %1499, i64 %1943
  store i16 %1942, ptr %1944, align 2, !tbaa !44
  %1945 = add i32 %1722, 2
  %1946 = add i32 %1945, %1929
  store i32 %1946, ptr %14, align 8, !tbaa !17
  %1947 = ptrtoint ptr %1924 to i64
  %1948 = sub i64 %1947, %970
  %1949 = lshr exact i64 %1948, 1
  %1950 = trunc i64 %1949 to i32
  %1951 = add nsw i32 %1946, 1
  %1952 = sext i32 %1951 to i64
  %1953 = getelementptr i16, ptr %1499, i64 %1952
  %1954 = icmp sgt i32 %1950, 0
  br i1 %1954, label %1955, label %2045

1955:                                             ; preds = %1937
  %1956 = and i64 %1949, 4294967295
  %1957 = icmp ult i64 %1956, 8
  br i1 %1957, label %2001, label %1958

1958:                                             ; preds = %1955
  %1959 = shl nsw i64 %1952, 1
  %1960 = add i64 %1959, %1500
  %1961 = sub i64 %1960, %970
  %1962 = icmp ult i64 %1961, 128
  br i1 %1962, label %2001, label %1963

1963:                                             ; preds = %1958
  %1964 = icmp ult i64 %1956, 64
  br i1 %1964, label %1988, label %1965

1965:                                             ; preds = %1963
  %1966 = and i64 %1949, 63
  %1967 = sub nsw i64 %1956, %1966
  br label %1968

1968:                                             ; preds = %1968, %1965
  %1969 = phi i64 [ 0, %1965 ], [ %1982, %1968 ]
  %1970 = getelementptr inbounds i16, ptr %358, i64 %1969
  %1971 = load <16 x i16>, ptr %1970, align 2, !tbaa !44
  %1972 = getelementptr inbounds i16, ptr %1970, i64 16
  %1973 = load <16 x i16>, ptr %1972, align 2, !tbaa !44
  %1974 = getelementptr inbounds i16, ptr %1970, i64 32
  %1975 = load <16 x i16>, ptr %1974, align 2, !tbaa !44
  %1976 = getelementptr inbounds i16, ptr %1970, i64 48
  %1977 = load <16 x i16>, ptr %1976, align 2, !tbaa !44
  %1978 = getelementptr inbounds i16, ptr %1953, i64 %1969
  store <16 x i16> %1971, ptr %1978, align 2, !tbaa !44
  %1979 = getelementptr inbounds i16, ptr %1978, i64 16
  store <16 x i16> %1973, ptr %1979, align 2, !tbaa !44
  %1980 = getelementptr inbounds i16, ptr %1978, i64 32
  store <16 x i16> %1975, ptr %1980, align 2, !tbaa !44
  %1981 = getelementptr inbounds i16, ptr %1978, i64 48
  store <16 x i16> %1977, ptr %1981, align 2, !tbaa !44
  %1982 = add nuw i64 %1969, 64
  %1983 = icmp eq i64 %1982, %1967
  br i1 %1983, label %1984, label %1968, !llvm.loop !190

1984:                                             ; preds = %1968
  %1985 = icmp eq i64 %1966, 0
  br i1 %1985, label %2039, label %1986

1986:                                             ; preds = %1984
  %1987 = icmp ult i64 %1966, 8
  br i1 %1987, label %2001, label %1988

1988:                                             ; preds = %1963, %1986
  %1989 = phi i64 [ %1967, %1986 ], [ 0, %1963 ]
  %1990 = and i64 %1949, 7
  %1991 = sub nsw i64 %1956, %1990
  br label %1992

1992:                                             ; preds = %1992, %1988
  %1993 = phi i64 [ %1989, %1988 ], [ %1997, %1992 ]
  %1994 = getelementptr inbounds i16, ptr %358, i64 %1993
  %1995 = load <8 x i16>, ptr %1994, align 2, !tbaa !44
  %1996 = getelementptr inbounds i16, ptr %1953, i64 %1993
  store <8 x i16> %1995, ptr %1996, align 2, !tbaa !44
  %1997 = add nuw i64 %1993, 8
  %1998 = icmp eq i64 %1997, %1991
  br i1 %1998, label %1999, label %1992, !llvm.loop !191

1999:                                             ; preds = %1992
  %2000 = icmp eq i64 %1990, 0
  br i1 %2000, label %2039, label %2001

2001:                                             ; preds = %1958, %1955, %1986, %1999
  %2002 = phi i64 [ 0, %1955 ], [ 0, %1958 ], [ %1967, %1986 ], [ %1991, %1999 ]
  %2003 = sub i64 %1949, %2002
  %2004 = xor i64 %2002, -1
  %2005 = add nsw i64 %1956, %2004
  %2006 = and i64 %2003, 3
  %2007 = icmp eq i64 %2006, 0
  br i1 %2007, label %2017, label %2008

2008:                                             ; preds = %2001, %2008
  %2009 = phi i64 [ %2014, %2008 ], [ %2002, %2001 ]
  %2010 = phi i64 [ %2015, %2008 ], [ 0, %2001 ]
  %2011 = getelementptr inbounds i16, ptr %358, i64 %2009
  %2012 = load i16, ptr %2011, align 2, !tbaa !44
  %2013 = getelementptr inbounds i16, ptr %1953, i64 %2009
  store i16 %2012, ptr %2013, align 2, !tbaa !44
  %2014 = add nuw nsw i64 %2009, 1
  %2015 = add i64 %2010, 1
  %2016 = icmp eq i64 %2015, %2006
  br i1 %2016, label %2017, label %2008, !llvm.loop !192

2017:                                             ; preds = %2008, %2001
  %2018 = phi i64 [ %2002, %2001 ], [ %2014, %2008 ]
  %2019 = icmp ult i64 %2005, 3
  br i1 %2019, label %2039, label %2020

2020:                                             ; preds = %2017, %2020
  %2021 = phi i64 [ %2037, %2020 ], [ %2018, %2017 ]
  %2022 = getelementptr inbounds i16, ptr %358, i64 %2021
  %2023 = load i16, ptr %2022, align 2, !tbaa !44
  %2024 = getelementptr inbounds i16, ptr %1953, i64 %2021
  store i16 %2023, ptr %2024, align 2, !tbaa !44
  %2025 = add nuw nsw i64 %2021, 1
  %2026 = getelementptr inbounds i16, ptr %358, i64 %2025
  %2027 = load i16, ptr %2026, align 2, !tbaa !44
  %2028 = getelementptr inbounds i16, ptr %1953, i64 %2025
  store i16 %2027, ptr %2028, align 2, !tbaa !44
  %2029 = add nuw nsw i64 %2021, 2
  %2030 = getelementptr inbounds i16, ptr %358, i64 %2029
  %2031 = load i16, ptr %2030, align 2, !tbaa !44
  %2032 = getelementptr inbounds i16, ptr %1953, i64 %2029
  store i16 %2031, ptr %2032, align 2, !tbaa !44
  %2033 = add nuw nsw i64 %2021, 3
  %2034 = getelementptr inbounds i16, ptr %358, i64 %2033
  %2035 = load i16, ptr %2034, align 2, !tbaa !44
  %2036 = getelementptr inbounds i16, ptr %1953, i64 %2033
  store i16 %2035, ptr %2036, align 2, !tbaa !44
  %2037 = add nuw nsw i64 %2021, 4
  %2038 = icmp eq i64 %2037, %1956
  br i1 %2038, label %2039, label %2020, !llvm.loop !193

2039:                                             ; preds = %2017, %2020, %1984, %1999
  %2040 = shl i64 %1948, 31
  %2041 = add i64 %2040, -4294967296
  %2042 = ashr i64 %2041, 32
  %2043 = getelementptr inbounds i16, ptr %1953, i64 %2042
  %2044 = load i16, ptr %2043, align 2, !tbaa !44
  br label %2045

2045:                                             ; preds = %1937, %2039
  %2046 = phi i64 [ %1949, %2039 ], [ 0, %1937 ]
  %2047 = phi i16 [ %2044, %2039 ], [ -1, %1937 ]
  %2048 = and i64 %2046, 4294967295
  %2049 = getelementptr inbounds i16, ptr %1953, i64 %2048
  store i16 %2047, ptr %2049, align 2, !tbaa !44
  %2050 = trunc i64 %1949 to i16
  %2051 = add i16 %2050, 1
  %2052 = sext i32 %1946 to i64
  %2053 = getelementptr inbounds i16, ptr %1499, i64 %2052
  store i16 %2051, ptr %2053, align 2, !tbaa !44
  %2054 = add nsw i32 %1950, 2
  %2055 = add nsw i32 %2054, %1946
  %2056 = ptrtoint ptr %1923 to i64
  %2057 = sub i64 %2056, %971
  %2058 = lshr exact i64 %2057, 1
  %2059 = trunc i64 %2058 to i32
  %2060 = add nsw i32 %2055, 1
  %2061 = sext i32 %2060 to i64
  %2062 = getelementptr i16, ptr %1499, i64 %2061
  %2063 = icmp sgt i32 %2059, 0
  br i1 %2063, label %2064, label %2154

2064:                                             ; preds = %2045
  %2065 = and i64 %2058, 4294967295
  %2066 = icmp ult i64 %2065, 8
  br i1 %2066, label %2110, label %2067

2067:                                             ; preds = %2064
  %2068 = shl nsw i64 %2061, 1
  %2069 = add i64 %2068, %1500
  %2070 = sub i64 %2069, %971
  %2071 = icmp ult i64 %2070, 128
  br i1 %2071, label %2110, label %2072

2072:                                             ; preds = %2067
  %2073 = icmp ult i64 %2065, 64
  br i1 %2073, label %2097, label %2074

2074:                                             ; preds = %2072
  %2075 = and i64 %2058, 63
  %2076 = sub nsw i64 %2065, %2075
  br label %2077

2077:                                             ; preds = %2077, %2074
  %2078 = phi i64 [ 0, %2074 ], [ %2091, %2077 ]
  %2079 = getelementptr inbounds i16, ptr %404, i64 %2078
  %2080 = load <16 x i16>, ptr %2079, align 2, !tbaa !44
  %2081 = getelementptr inbounds i16, ptr %2079, i64 16
  %2082 = load <16 x i16>, ptr %2081, align 2, !tbaa !44
  %2083 = getelementptr inbounds i16, ptr %2079, i64 32
  %2084 = load <16 x i16>, ptr %2083, align 2, !tbaa !44
  %2085 = getelementptr inbounds i16, ptr %2079, i64 48
  %2086 = load <16 x i16>, ptr %2085, align 2, !tbaa !44
  %2087 = getelementptr inbounds i16, ptr %2062, i64 %2078
  store <16 x i16> %2080, ptr %2087, align 2, !tbaa !44
  %2088 = getelementptr inbounds i16, ptr %2087, i64 16
  store <16 x i16> %2082, ptr %2088, align 2, !tbaa !44
  %2089 = getelementptr inbounds i16, ptr %2087, i64 32
  store <16 x i16> %2084, ptr %2089, align 2, !tbaa !44
  %2090 = getelementptr inbounds i16, ptr %2087, i64 48
  store <16 x i16> %2086, ptr %2090, align 2, !tbaa !44
  %2091 = add nuw i64 %2078, 64
  %2092 = icmp eq i64 %2091, %2076
  br i1 %2092, label %2093, label %2077, !llvm.loop !194

2093:                                             ; preds = %2077
  %2094 = icmp eq i64 %2075, 0
  br i1 %2094, label %2148, label %2095

2095:                                             ; preds = %2093
  %2096 = icmp ult i64 %2075, 8
  br i1 %2096, label %2110, label %2097

2097:                                             ; preds = %2072, %2095
  %2098 = phi i64 [ %2076, %2095 ], [ 0, %2072 ]
  %2099 = and i64 %2058, 7
  %2100 = sub nsw i64 %2065, %2099
  br label %2101

2101:                                             ; preds = %2101, %2097
  %2102 = phi i64 [ %2098, %2097 ], [ %2106, %2101 ]
  %2103 = getelementptr inbounds i16, ptr %404, i64 %2102
  %2104 = load <8 x i16>, ptr %2103, align 2, !tbaa !44
  %2105 = getelementptr inbounds i16, ptr %2062, i64 %2102
  store <8 x i16> %2104, ptr %2105, align 2, !tbaa !44
  %2106 = add nuw i64 %2102, 8
  %2107 = icmp eq i64 %2106, %2100
  br i1 %2107, label %2108, label %2101, !llvm.loop !195

2108:                                             ; preds = %2101
  %2109 = icmp eq i64 %2099, 0
  br i1 %2109, label %2148, label %2110

2110:                                             ; preds = %2067, %2064, %2095, %2108
  %2111 = phi i64 [ 0, %2064 ], [ 0, %2067 ], [ %2076, %2095 ], [ %2100, %2108 ]
  %2112 = sub i64 %2058, %2111
  %2113 = xor i64 %2111, -1
  %2114 = add nsw i64 %2065, %2113
  %2115 = and i64 %2112, 3
  %2116 = icmp eq i64 %2115, 0
  br i1 %2116, label %2126, label %2117

2117:                                             ; preds = %2110, %2117
  %2118 = phi i64 [ %2123, %2117 ], [ %2111, %2110 ]
  %2119 = phi i64 [ %2124, %2117 ], [ 0, %2110 ]
  %2120 = getelementptr inbounds i16, ptr %404, i64 %2118
  %2121 = load i16, ptr %2120, align 2, !tbaa !44
  %2122 = getelementptr inbounds i16, ptr %2062, i64 %2118
  store i16 %2121, ptr %2122, align 2, !tbaa !44
  %2123 = add nuw nsw i64 %2118, 1
  %2124 = add i64 %2119, 1
  %2125 = icmp eq i64 %2124, %2115
  br i1 %2125, label %2126, label %2117, !llvm.loop !196

2126:                                             ; preds = %2117, %2110
  %2127 = phi i64 [ %2111, %2110 ], [ %2123, %2117 ]
  %2128 = icmp ult i64 %2114, 3
  br i1 %2128, label %2148, label %2129

2129:                                             ; preds = %2126, %2129
  %2130 = phi i64 [ %2146, %2129 ], [ %2127, %2126 ]
  %2131 = getelementptr inbounds i16, ptr %404, i64 %2130
  %2132 = load i16, ptr %2131, align 2, !tbaa !44
  %2133 = getelementptr inbounds i16, ptr %2062, i64 %2130
  store i16 %2132, ptr %2133, align 2, !tbaa !44
  %2134 = add nuw nsw i64 %2130, 1
  %2135 = getelementptr inbounds i16, ptr %404, i64 %2134
  %2136 = load i16, ptr %2135, align 2, !tbaa !44
  %2137 = getelementptr inbounds i16, ptr %2062, i64 %2134
  store i16 %2136, ptr %2137, align 2, !tbaa !44
  %2138 = add nuw nsw i64 %2130, 2
  %2139 = getelementptr inbounds i16, ptr %404, i64 %2138
  %2140 = load i16, ptr %2139, align 2, !tbaa !44
  %2141 = getelementptr inbounds i16, ptr %2062, i64 %2138
  store i16 %2140, ptr %2141, align 2, !tbaa !44
  %2142 = add nuw nsw i64 %2130, 3
  %2143 = getelementptr inbounds i16, ptr %404, i64 %2142
  %2144 = load i16, ptr %2143, align 2, !tbaa !44
  %2145 = getelementptr inbounds i16, ptr %2062, i64 %2142
  store i16 %2144, ptr %2145, align 2, !tbaa !44
  %2146 = add nuw nsw i64 %2130, 4
  %2147 = icmp eq i64 %2146, %2065
  br i1 %2147, label %2148, label %2129, !llvm.loop !197

2148:                                             ; preds = %2126, %2129, %2093, %2108
  %2149 = shl i64 %2057, 31
  %2150 = add i64 %2149, -4294967296
  %2151 = ashr i64 %2150, 32
  %2152 = getelementptr inbounds i16, ptr %2062, i64 %2151
  %2153 = load i16, ptr %2152, align 2, !tbaa !44
  br label %2154

2154:                                             ; preds = %2045, %2148
  %2155 = phi i64 [ %2058, %2148 ], [ 0, %2045 ]
  %2156 = phi i16 [ %2153, %2148 ], [ -1, %2045 ]
  %2157 = and i64 %2155, 4294967295
  %2158 = getelementptr inbounds i16, ptr %2062, i64 %2157
  store i16 %2156, ptr %2158, align 2, !tbaa !44
  %2159 = trunc i64 %2058 to i16
  %2160 = add i16 %2159, 1
  %2161 = sext i32 %2055 to i64
  %2162 = getelementptr inbounds i16, ptr %1499, i64 %2161
  store i16 %2160, ptr %2162, align 2, !tbaa !44
  %2163 = add nsw i32 %2059, 2
  %2164 = add nsw i32 %2163, %2055
  %2165 = ptrtoint ptr %1922 to i64
  %2166 = sub i64 %2165, %972
  %2167 = lshr exact i64 %2166, 1
  %2168 = trunc i64 %2167 to i32
  %2169 = add nsw i32 %2164, 1
  %2170 = sext i32 %2169 to i64
  %2171 = getelementptr i16, ptr %1499, i64 %2170
  %2172 = icmp sgt i32 %2168, 0
  br i1 %2172, label %2173, label %2263

2173:                                             ; preds = %2154
  %2174 = and i64 %2167, 4294967295
  %2175 = icmp ult i64 %2174, 8
  br i1 %2175, label %2219, label %2176

2176:                                             ; preds = %2173
  %2177 = shl nsw i64 %2170, 1
  %2178 = add i64 %2177, %1500
  %2179 = sub i64 %2178, %972
  %2180 = icmp ult i64 %2179, 128
  br i1 %2180, label %2219, label %2181

2181:                                             ; preds = %2176
  %2182 = icmp ult i64 %2174, 64
  br i1 %2182, label %2206, label %2183

2183:                                             ; preds = %2181
  %2184 = and i64 %2167, 63
  %2185 = sub nsw i64 %2174, %2184
  br label %2186

2186:                                             ; preds = %2186, %2183
  %2187 = phi i64 [ 0, %2183 ], [ %2200, %2186 ]
  %2188 = getelementptr inbounds i16, ptr %542, i64 %2187
  %2189 = load <16 x i16>, ptr %2188, align 2, !tbaa !44
  %2190 = getelementptr inbounds i16, ptr %2188, i64 16
  %2191 = load <16 x i16>, ptr %2190, align 2, !tbaa !44
  %2192 = getelementptr inbounds i16, ptr %2188, i64 32
  %2193 = load <16 x i16>, ptr %2192, align 2, !tbaa !44
  %2194 = getelementptr inbounds i16, ptr %2188, i64 48
  %2195 = load <16 x i16>, ptr %2194, align 2, !tbaa !44
  %2196 = getelementptr inbounds i16, ptr %2171, i64 %2187
  store <16 x i16> %2189, ptr %2196, align 2, !tbaa !44
  %2197 = getelementptr inbounds i16, ptr %2196, i64 16
  store <16 x i16> %2191, ptr %2197, align 2, !tbaa !44
  %2198 = getelementptr inbounds i16, ptr %2196, i64 32
  store <16 x i16> %2193, ptr %2198, align 2, !tbaa !44
  %2199 = getelementptr inbounds i16, ptr %2196, i64 48
  store <16 x i16> %2195, ptr %2199, align 2, !tbaa !44
  %2200 = add nuw i64 %2187, 64
  %2201 = icmp eq i64 %2200, %2185
  br i1 %2201, label %2202, label %2186, !llvm.loop !198

2202:                                             ; preds = %2186
  %2203 = icmp eq i64 %2184, 0
  br i1 %2203, label %2257, label %2204

2204:                                             ; preds = %2202
  %2205 = icmp ult i64 %2184, 8
  br i1 %2205, label %2219, label %2206

2206:                                             ; preds = %2181, %2204
  %2207 = phi i64 [ %2185, %2204 ], [ 0, %2181 ]
  %2208 = and i64 %2167, 7
  %2209 = sub nsw i64 %2174, %2208
  br label %2210

2210:                                             ; preds = %2210, %2206
  %2211 = phi i64 [ %2207, %2206 ], [ %2215, %2210 ]
  %2212 = getelementptr inbounds i16, ptr %542, i64 %2211
  %2213 = load <8 x i16>, ptr %2212, align 2, !tbaa !44
  %2214 = getelementptr inbounds i16, ptr %2171, i64 %2211
  store <8 x i16> %2213, ptr %2214, align 2, !tbaa !44
  %2215 = add nuw i64 %2211, 8
  %2216 = icmp eq i64 %2215, %2209
  br i1 %2216, label %2217, label %2210, !llvm.loop !199

2217:                                             ; preds = %2210
  %2218 = icmp eq i64 %2208, 0
  br i1 %2218, label %2257, label %2219

2219:                                             ; preds = %2176, %2173, %2204, %2217
  %2220 = phi i64 [ 0, %2173 ], [ 0, %2176 ], [ %2185, %2204 ], [ %2209, %2217 ]
  %2221 = sub i64 %2167, %2220
  %2222 = xor i64 %2220, -1
  %2223 = add nsw i64 %2174, %2222
  %2224 = and i64 %2221, 3
  %2225 = icmp eq i64 %2224, 0
  br i1 %2225, label %2235, label %2226

2226:                                             ; preds = %2219, %2226
  %2227 = phi i64 [ %2232, %2226 ], [ %2220, %2219 ]
  %2228 = phi i64 [ %2233, %2226 ], [ 0, %2219 ]
  %2229 = getelementptr inbounds i16, ptr %542, i64 %2227
  %2230 = load i16, ptr %2229, align 2, !tbaa !44
  %2231 = getelementptr inbounds i16, ptr %2171, i64 %2227
  store i16 %2230, ptr %2231, align 2, !tbaa !44
  %2232 = add nuw nsw i64 %2227, 1
  %2233 = add i64 %2228, 1
  %2234 = icmp eq i64 %2233, %2224
  br i1 %2234, label %2235, label %2226, !llvm.loop !200

2235:                                             ; preds = %2226, %2219
  %2236 = phi i64 [ %2220, %2219 ], [ %2232, %2226 ]
  %2237 = icmp ult i64 %2223, 3
  br i1 %2237, label %2257, label %2238

2238:                                             ; preds = %2235, %2238
  %2239 = phi i64 [ %2255, %2238 ], [ %2236, %2235 ]
  %2240 = getelementptr inbounds i16, ptr %542, i64 %2239
  %2241 = load i16, ptr %2240, align 2, !tbaa !44
  %2242 = getelementptr inbounds i16, ptr %2171, i64 %2239
  store i16 %2241, ptr %2242, align 2, !tbaa !44
  %2243 = add nuw nsw i64 %2239, 1
  %2244 = getelementptr inbounds i16, ptr %542, i64 %2243
  %2245 = load i16, ptr %2244, align 2, !tbaa !44
  %2246 = getelementptr inbounds i16, ptr %2171, i64 %2243
  store i16 %2245, ptr %2246, align 2, !tbaa !44
  %2247 = add nuw nsw i64 %2239, 2
  %2248 = getelementptr inbounds i16, ptr %542, i64 %2247
  %2249 = load i16, ptr %2248, align 2, !tbaa !44
  %2250 = getelementptr inbounds i16, ptr %2171, i64 %2247
  store i16 %2249, ptr %2250, align 2, !tbaa !44
  %2251 = add nuw nsw i64 %2239, 3
  %2252 = getelementptr inbounds i16, ptr %542, i64 %2251
  %2253 = load i16, ptr %2252, align 2, !tbaa !44
  %2254 = getelementptr inbounds i16, ptr %2171, i64 %2251
  store i16 %2253, ptr %2254, align 2, !tbaa !44
  %2255 = add nuw nsw i64 %2239, 4
  %2256 = icmp eq i64 %2255, %2174
  br i1 %2256, label %2257, label %2238, !llvm.loop !201

2257:                                             ; preds = %2235, %2238, %2202, %2217
  %2258 = shl i64 %2166, 31
  %2259 = add i64 %2258, -4294967296
  %2260 = ashr i64 %2259, 32
  %2261 = getelementptr inbounds i16, ptr %2171, i64 %2260
  %2262 = load i16, ptr %2261, align 2, !tbaa !44
  br label %2263

2263:                                             ; preds = %2154, %2257
  %2264 = phi i64 [ %2167, %2257 ], [ 0, %2154 ]
  %2265 = phi i16 [ %2262, %2257 ], [ -1, %2154 ]
  %2266 = and i64 %2264, 4294967295
  %2267 = getelementptr inbounds i16, ptr %2171, i64 %2266
  store i16 %2265, ptr %2267, align 2, !tbaa !44
  %2268 = trunc i64 %2167 to i16
  %2269 = add i16 %2268, 1
  %2270 = sext i32 %2164 to i64
  %2271 = getelementptr inbounds i16, ptr %1499, i64 %2270
  store i16 %2269, ptr %2271, align 2, !tbaa !44
  %2272 = add nsw i32 %2168, 2
  %2273 = add nsw i32 %2272, %2164
  %2274 = ptrtoint ptr %1921 to i64
  %2275 = sub i64 %2274, %973
  %2276 = lshr exact i64 %2275, 1
  %2277 = trunc i64 %2276 to i32
  %2278 = add nsw i32 %2273, 1
  %2279 = sext i32 %2278 to i64
  %2280 = getelementptr i16, ptr %1499, i64 %2279
  %2281 = icmp sgt i32 %2277, 0
  br i1 %2281, label %2282, label %2372

2282:                                             ; preds = %2263
  %2283 = and i64 %2276, 4294967295
  %2284 = icmp ult i64 %2283, 8
  br i1 %2284, label %2328, label %2285

2285:                                             ; preds = %2282
  %2286 = shl nsw i64 %2279, 1
  %2287 = add i64 %2286, %1500
  %2288 = sub i64 %2287, %973
  %2289 = icmp ult i64 %2288, 128
  br i1 %2289, label %2328, label %2290

2290:                                             ; preds = %2285
  %2291 = icmp ult i64 %2283, 64
  br i1 %2291, label %2315, label %2292

2292:                                             ; preds = %2290
  %2293 = and i64 %2276, 63
  %2294 = sub nsw i64 %2283, %2293
  br label %2295

2295:                                             ; preds = %2295, %2292
  %2296 = phi i64 [ 0, %2292 ], [ %2309, %2295 ]
  %2297 = getelementptr inbounds i16, ptr %588, i64 %2296
  %2298 = load <16 x i16>, ptr %2297, align 2, !tbaa !44
  %2299 = getelementptr inbounds i16, ptr %2297, i64 16
  %2300 = load <16 x i16>, ptr %2299, align 2, !tbaa !44
  %2301 = getelementptr inbounds i16, ptr %2297, i64 32
  %2302 = load <16 x i16>, ptr %2301, align 2, !tbaa !44
  %2303 = getelementptr inbounds i16, ptr %2297, i64 48
  %2304 = load <16 x i16>, ptr %2303, align 2, !tbaa !44
  %2305 = getelementptr inbounds i16, ptr %2280, i64 %2296
  store <16 x i16> %2298, ptr %2305, align 2, !tbaa !44
  %2306 = getelementptr inbounds i16, ptr %2305, i64 16
  store <16 x i16> %2300, ptr %2306, align 2, !tbaa !44
  %2307 = getelementptr inbounds i16, ptr %2305, i64 32
  store <16 x i16> %2302, ptr %2307, align 2, !tbaa !44
  %2308 = getelementptr inbounds i16, ptr %2305, i64 48
  store <16 x i16> %2304, ptr %2308, align 2, !tbaa !44
  %2309 = add nuw i64 %2296, 64
  %2310 = icmp eq i64 %2309, %2294
  br i1 %2310, label %2311, label %2295, !llvm.loop !202

2311:                                             ; preds = %2295
  %2312 = icmp eq i64 %2293, 0
  br i1 %2312, label %2366, label %2313

2313:                                             ; preds = %2311
  %2314 = icmp ult i64 %2293, 8
  br i1 %2314, label %2328, label %2315

2315:                                             ; preds = %2290, %2313
  %2316 = phi i64 [ %2294, %2313 ], [ 0, %2290 ]
  %2317 = and i64 %2276, 7
  %2318 = sub nsw i64 %2283, %2317
  br label %2319

2319:                                             ; preds = %2319, %2315
  %2320 = phi i64 [ %2316, %2315 ], [ %2324, %2319 ]
  %2321 = getelementptr inbounds i16, ptr %588, i64 %2320
  %2322 = load <8 x i16>, ptr %2321, align 2, !tbaa !44
  %2323 = getelementptr inbounds i16, ptr %2280, i64 %2320
  store <8 x i16> %2322, ptr %2323, align 2, !tbaa !44
  %2324 = add nuw i64 %2320, 8
  %2325 = icmp eq i64 %2324, %2318
  br i1 %2325, label %2326, label %2319, !llvm.loop !203

2326:                                             ; preds = %2319
  %2327 = icmp eq i64 %2317, 0
  br i1 %2327, label %2366, label %2328

2328:                                             ; preds = %2285, %2282, %2313, %2326
  %2329 = phi i64 [ 0, %2282 ], [ 0, %2285 ], [ %2294, %2313 ], [ %2318, %2326 ]
  %2330 = sub i64 %2276, %2329
  %2331 = xor i64 %2329, -1
  %2332 = add nsw i64 %2283, %2331
  %2333 = and i64 %2330, 3
  %2334 = icmp eq i64 %2333, 0
  br i1 %2334, label %2344, label %2335

2335:                                             ; preds = %2328, %2335
  %2336 = phi i64 [ %2341, %2335 ], [ %2329, %2328 ]
  %2337 = phi i64 [ %2342, %2335 ], [ 0, %2328 ]
  %2338 = getelementptr inbounds i16, ptr %588, i64 %2336
  %2339 = load i16, ptr %2338, align 2, !tbaa !44
  %2340 = getelementptr inbounds i16, ptr %2280, i64 %2336
  store i16 %2339, ptr %2340, align 2, !tbaa !44
  %2341 = add nuw nsw i64 %2336, 1
  %2342 = add i64 %2337, 1
  %2343 = icmp eq i64 %2342, %2333
  br i1 %2343, label %2344, label %2335, !llvm.loop !204

2344:                                             ; preds = %2335, %2328
  %2345 = phi i64 [ %2329, %2328 ], [ %2341, %2335 ]
  %2346 = icmp ult i64 %2332, 3
  br i1 %2346, label %2366, label %2347

2347:                                             ; preds = %2344, %2347
  %2348 = phi i64 [ %2364, %2347 ], [ %2345, %2344 ]
  %2349 = getelementptr inbounds i16, ptr %588, i64 %2348
  %2350 = load i16, ptr %2349, align 2, !tbaa !44
  %2351 = getelementptr inbounds i16, ptr %2280, i64 %2348
  store i16 %2350, ptr %2351, align 2, !tbaa !44
  %2352 = add nuw nsw i64 %2348, 1
  %2353 = getelementptr inbounds i16, ptr %588, i64 %2352
  %2354 = load i16, ptr %2353, align 2, !tbaa !44
  %2355 = getelementptr inbounds i16, ptr %2280, i64 %2352
  store i16 %2354, ptr %2355, align 2, !tbaa !44
  %2356 = add nuw nsw i64 %2348, 2
  %2357 = getelementptr inbounds i16, ptr %588, i64 %2356
  %2358 = load i16, ptr %2357, align 2, !tbaa !44
  %2359 = getelementptr inbounds i16, ptr %2280, i64 %2356
  store i16 %2358, ptr %2359, align 2, !tbaa !44
  %2360 = add nuw nsw i64 %2348, 3
  %2361 = getelementptr inbounds i16, ptr %588, i64 %2360
  %2362 = load i16, ptr %2361, align 2, !tbaa !44
  %2363 = getelementptr inbounds i16, ptr %2280, i64 %2360
  store i16 %2362, ptr %2363, align 2, !tbaa !44
  %2364 = add nuw nsw i64 %2348, 4
  %2365 = icmp eq i64 %2364, %2283
  br i1 %2365, label %2366, label %2347, !llvm.loop !205

2366:                                             ; preds = %2344, %2347, %2311, %2326
  %2367 = shl i64 %2275, 31
  %2368 = add i64 %2367, -4294967296
  %2369 = ashr i64 %2368, 32
  %2370 = getelementptr inbounds i16, ptr %2280, i64 %2369
  %2371 = load i16, ptr %2370, align 2, !tbaa !44
  br label %2372

2372:                                             ; preds = %2263, %2366
  %2373 = phi i64 [ %2276, %2366 ], [ 0, %2263 ]
  %2374 = phi i16 [ %2371, %2366 ], [ -1, %2263 ]
  %2375 = and i64 %2373, 4294967295
  %2376 = getelementptr inbounds i16, ptr %2280, i64 %2375
  store i16 %2374, ptr %2376, align 2, !tbaa !44
  %2377 = trunc i64 %2276 to i16
  %2378 = add i16 %2377, 1
  %2379 = sext i32 %2273 to i64
  %2380 = getelementptr inbounds i16, ptr %1499, i64 %2379
  store i16 %2378, ptr %2380, align 2, !tbaa !44
  %2381 = add nsw i32 %2277, 2
  %2382 = add nsw i32 %2381, %2273
  store i32 %2382, ptr %14, align 8, !tbaa !17
  %2383 = ptrtoint ptr %1920 to i64
  %2384 = sub i64 %2383, %974
  %2385 = lshr exact i64 %2384, 1
  %2386 = trunc i64 %2385 to i32
  %2387 = add nsw i32 %2382, 1
  %2388 = sext i32 %2387 to i64
  %2389 = getelementptr i16, ptr %1499, i64 %2388
  %2390 = icmp sgt i32 %2386, 0
  br i1 %2390, label %2391, label %2481

2391:                                             ; preds = %2372
  %2392 = and i64 %2385, 4294967295
  %2393 = icmp ult i64 %2392, 8
  br i1 %2393, label %2437, label %2394

2394:                                             ; preds = %2391
  %2395 = shl nsw i64 %2388, 1
  %2396 = add i64 %2395, %1500
  %2397 = sub i64 %2396, %974
  %2398 = icmp ult i64 %2397, 128
  br i1 %2398, label %2437, label %2399

2399:                                             ; preds = %2394
  %2400 = icmp ult i64 %2392, 64
  br i1 %2400, label %2424, label %2401

2401:                                             ; preds = %2399
  %2402 = and i64 %2385, 63
  %2403 = sub nsw i64 %2392, %2402
  br label %2404

2404:                                             ; preds = %2404, %2401
  %2405 = phi i64 [ 0, %2401 ], [ %2418, %2404 ]
  %2406 = getelementptr inbounds i16, ptr %634, i64 %2405
  %2407 = load <16 x i16>, ptr %2406, align 2, !tbaa !44
  %2408 = getelementptr inbounds i16, ptr %2406, i64 16
  %2409 = load <16 x i16>, ptr %2408, align 2, !tbaa !44
  %2410 = getelementptr inbounds i16, ptr %2406, i64 32
  %2411 = load <16 x i16>, ptr %2410, align 2, !tbaa !44
  %2412 = getelementptr inbounds i16, ptr %2406, i64 48
  %2413 = load <16 x i16>, ptr %2412, align 2, !tbaa !44
  %2414 = getelementptr inbounds i16, ptr %2389, i64 %2405
  store <16 x i16> %2407, ptr %2414, align 2, !tbaa !44
  %2415 = getelementptr inbounds i16, ptr %2414, i64 16
  store <16 x i16> %2409, ptr %2415, align 2, !tbaa !44
  %2416 = getelementptr inbounds i16, ptr %2414, i64 32
  store <16 x i16> %2411, ptr %2416, align 2, !tbaa !44
  %2417 = getelementptr inbounds i16, ptr %2414, i64 48
  store <16 x i16> %2413, ptr %2417, align 2, !tbaa !44
  %2418 = add nuw i64 %2405, 64
  %2419 = icmp eq i64 %2418, %2403
  br i1 %2419, label %2420, label %2404, !llvm.loop !206

2420:                                             ; preds = %2404
  %2421 = icmp eq i64 %2402, 0
  br i1 %2421, label %2475, label %2422

2422:                                             ; preds = %2420
  %2423 = icmp ult i64 %2402, 8
  br i1 %2423, label %2437, label %2424

2424:                                             ; preds = %2399, %2422
  %2425 = phi i64 [ %2403, %2422 ], [ 0, %2399 ]
  %2426 = and i64 %2385, 7
  %2427 = sub nsw i64 %2392, %2426
  br label %2428

2428:                                             ; preds = %2428, %2424
  %2429 = phi i64 [ %2425, %2424 ], [ %2433, %2428 ]
  %2430 = getelementptr inbounds i16, ptr %634, i64 %2429
  %2431 = load <8 x i16>, ptr %2430, align 2, !tbaa !44
  %2432 = getelementptr inbounds i16, ptr %2389, i64 %2429
  store <8 x i16> %2431, ptr %2432, align 2, !tbaa !44
  %2433 = add nuw i64 %2429, 8
  %2434 = icmp eq i64 %2433, %2427
  br i1 %2434, label %2435, label %2428, !llvm.loop !207

2435:                                             ; preds = %2428
  %2436 = icmp eq i64 %2426, 0
  br i1 %2436, label %2475, label %2437

2437:                                             ; preds = %2394, %2391, %2422, %2435
  %2438 = phi i64 [ 0, %2391 ], [ 0, %2394 ], [ %2403, %2422 ], [ %2427, %2435 ]
  %2439 = sub i64 %2385, %2438
  %2440 = xor i64 %2438, -1
  %2441 = add nsw i64 %2392, %2440
  %2442 = and i64 %2439, 3
  %2443 = icmp eq i64 %2442, 0
  br i1 %2443, label %2453, label %2444

2444:                                             ; preds = %2437, %2444
  %2445 = phi i64 [ %2450, %2444 ], [ %2438, %2437 ]
  %2446 = phi i64 [ %2451, %2444 ], [ 0, %2437 ]
  %2447 = getelementptr inbounds i16, ptr %634, i64 %2445
  %2448 = load i16, ptr %2447, align 2, !tbaa !44
  %2449 = getelementptr inbounds i16, ptr %2389, i64 %2445
  store i16 %2448, ptr %2449, align 2, !tbaa !44
  %2450 = add nuw nsw i64 %2445, 1
  %2451 = add i64 %2446, 1
  %2452 = icmp eq i64 %2451, %2442
  br i1 %2452, label %2453, label %2444, !llvm.loop !208

2453:                                             ; preds = %2444, %2437
  %2454 = phi i64 [ %2438, %2437 ], [ %2450, %2444 ]
  %2455 = icmp ult i64 %2441, 3
  br i1 %2455, label %2475, label %2456

2456:                                             ; preds = %2453, %2456
  %2457 = phi i64 [ %2473, %2456 ], [ %2454, %2453 ]
  %2458 = getelementptr inbounds i16, ptr %634, i64 %2457
  %2459 = load i16, ptr %2458, align 2, !tbaa !44
  %2460 = getelementptr inbounds i16, ptr %2389, i64 %2457
  store i16 %2459, ptr %2460, align 2, !tbaa !44
  %2461 = add nuw nsw i64 %2457, 1
  %2462 = getelementptr inbounds i16, ptr %634, i64 %2461
  %2463 = load i16, ptr %2462, align 2, !tbaa !44
  %2464 = getelementptr inbounds i16, ptr %2389, i64 %2461
  store i16 %2463, ptr %2464, align 2, !tbaa !44
  %2465 = add nuw nsw i64 %2457, 2
  %2466 = getelementptr inbounds i16, ptr %634, i64 %2465
  %2467 = load i16, ptr %2466, align 2, !tbaa !44
  %2468 = getelementptr inbounds i16, ptr %2389, i64 %2465
  store i16 %2467, ptr %2468, align 2, !tbaa !44
  %2469 = add nuw nsw i64 %2457, 3
  %2470 = getelementptr inbounds i16, ptr %634, i64 %2469
  %2471 = load i16, ptr %2470, align 2, !tbaa !44
  %2472 = getelementptr inbounds i16, ptr %2389, i64 %2469
  store i16 %2471, ptr %2472, align 2, !tbaa !44
  %2473 = add nuw nsw i64 %2457, 4
  %2474 = icmp eq i64 %2473, %2392
  br i1 %2474, label %2475, label %2456, !llvm.loop !209

2475:                                             ; preds = %2453, %2456, %2420, %2435
  %2476 = shl i64 %2384, 31
  %2477 = add i64 %2476, -4294967296
  %2478 = ashr i64 %2477, 32
  %2479 = getelementptr inbounds i16, ptr %2389, i64 %2478
  %2480 = load i16, ptr %2479, align 2, !tbaa !44
  br label %2481

2481:                                             ; preds = %2372, %2475
  %2482 = phi i64 [ %2385, %2475 ], [ 0, %2372 ]
  %2483 = phi i16 [ %2480, %2475 ], [ -1, %2372 ]
  %2484 = and i64 %2482, 4294967295
  %2485 = getelementptr inbounds i16, ptr %2389, i64 %2484
  store i16 %2483, ptr %2485, align 2, !tbaa !44
  %2486 = trunc i64 %2385 to i16
  %2487 = add i16 %2486, 1
  %2488 = sext i32 %2382 to i64
  %2489 = getelementptr inbounds i16, ptr %1499, i64 %2488
  store i16 %2487, ptr %2489, align 2, !tbaa !44
  %2490 = add nsw i32 %2386, 2
  %2491 = add nsw i32 %2490, %2382
  %2492 = ptrtoint ptr %1919 to i64
  %2493 = sub i64 %2492, %975
  %2494 = lshr exact i64 %2493, 1
  %2495 = trunc i64 %2494 to i32
  %2496 = add nsw i32 %2491, 1
  %2497 = sext i32 %2496 to i64
  %2498 = getelementptr i16, ptr %1499, i64 %2497
  %2499 = icmp sgt i32 %2495, 0
  br i1 %2499, label %2500, label %2590

2500:                                             ; preds = %2481
  %2501 = and i64 %2494, 4294967295
  %2502 = icmp ult i64 %2501, 8
  br i1 %2502, label %2546, label %2503

2503:                                             ; preds = %2500
  %2504 = shl nsw i64 %2497, 1
  %2505 = add i64 %2504, %1500
  %2506 = sub i64 %2505, %975
  %2507 = icmp ult i64 %2506, 128
  br i1 %2507, label %2546, label %2508

2508:                                             ; preds = %2503
  %2509 = icmp ult i64 %2501, 64
  br i1 %2509, label %2533, label %2510

2510:                                             ; preds = %2508
  %2511 = and i64 %2494, 63
  %2512 = sub nsw i64 %2501, %2511
  br label %2513

2513:                                             ; preds = %2513, %2510
  %2514 = phi i64 [ 0, %2510 ], [ %2527, %2513 ]
  %2515 = getelementptr inbounds i16, ptr %680, i64 %2514
  %2516 = load <16 x i16>, ptr %2515, align 2, !tbaa !44
  %2517 = getelementptr inbounds i16, ptr %2515, i64 16
  %2518 = load <16 x i16>, ptr %2517, align 2, !tbaa !44
  %2519 = getelementptr inbounds i16, ptr %2515, i64 32
  %2520 = load <16 x i16>, ptr %2519, align 2, !tbaa !44
  %2521 = getelementptr inbounds i16, ptr %2515, i64 48
  %2522 = load <16 x i16>, ptr %2521, align 2, !tbaa !44
  %2523 = getelementptr inbounds i16, ptr %2498, i64 %2514
  store <16 x i16> %2516, ptr %2523, align 2, !tbaa !44
  %2524 = getelementptr inbounds i16, ptr %2523, i64 16
  store <16 x i16> %2518, ptr %2524, align 2, !tbaa !44
  %2525 = getelementptr inbounds i16, ptr %2523, i64 32
  store <16 x i16> %2520, ptr %2525, align 2, !tbaa !44
  %2526 = getelementptr inbounds i16, ptr %2523, i64 48
  store <16 x i16> %2522, ptr %2526, align 2, !tbaa !44
  %2527 = add nuw i64 %2514, 64
  %2528 = icmp eq i64 %2527, %2512
  br i1 %2528, label %2529, label %2513, !llvm.loop !210

2529:                                             ; preds = %2513
  %2530 = icmp eq i64 %2511, 0
  br i1 %2530, label %2584, label %2531

2531:                                             ; preds = %2529
  %2532 = icmp ult i64 %2511, 8
  br i1 %2532, label %2546, label %2533

2533:                                             ; preds = %2508, %2531
  %2534 = phi i64 [ %2512, %2531 ], [ 0, %2508 ]
  %2535 = and i64 %2494, 7
  %2536 = sub nsw i64 %2501, %2535
  br label %2537

2537:                                             ; preds = %2537, %2533
  %2538 = phi i64 [ %2534, %2533 ], [ %2542, %2537 ]
  %2539 = getelementptr inbounds i16, ptr %680, i64 %2538
  %2540 = load <8 x i16>, ptr %2539, align 2, !tbaa !44
  %2541 = getelementptr inbounds i16, ptr %2498, i64 %2538
  store <8 x i16> %2540, ptr %2541, align 2, !tbaa !44
  %2542 = add nuw i64 %2538, 8
  %2543 = icmp eq i64 %2542, %2536
  br i1 %2543, label %2544, label %2537, !llvm.loop !211

2544:                                             ; preds = %2537
  %2545 = icmp eq i64 %2535, 0
  br i1 %2545, label %2584, label %2546

2546:                                             ; preds = %2503, %2500, %2531, %2544
  %2547 = phi i64 [ 0, %2500 ], [ 0, %2503 ], [ %2512, %2531 ], [ %2536, %2544 ]
  %2548 = sub i64 %2494, %2547
  %2549 = xor i64 %2547, -1
  %2550 = add nsw i64 %2501, %2549
  %2551 = and i64 %2548, 3
  %2552 = icmp eq i64 %2551, 0
  br i1 %2552, label %2562, label %2553

2553:                                             ; preds = %2546, %2553
  %2554 = phi i64 [ %2559, %2553 ], [ %2547, %2546 ]
  %2555 = phi i64 [ %2560, %2553 ], [ 0, %2546 ]
  %2556 = getelementptr inbounds i16, ptr %680, i64 %2554
  %2557 = load i16, ptr %2556, align 2, !tbaa !44
  %2558 = getelementptr inbounds i16, ptr %2498, i64 %2554
  store i16 %2557, ptr %2558, align 2, !tbaa !44
  %2559 = add nuw nsw i64 %2554, 1
  %2560 = add i64 %2555, 1
  %2561 = icmp eq i64 %2560, %2551
  br i1 %2561, label %2562, label %2553, !llvm.loop !212

2562:                                             ; preds = %2553, %2546
  %2563 = phi i64 [ %2547, %2546 ], [ %2559, %2553 ]
  %2564 = icmp ult i64 %2550, 3
  br i1 %2564, label %2584, label %2565

2565:                                             ; preds = %2562, %2565
  %2566 = phi i64 [ %2582, %2565 ], [ %2563, %2562 ]
  %2567 = getelementptr inbounds i16, ptr %680, i64 %2566
  %2568 = load i16, ptr %2567, align 2, !tbaa !44
  %2569 = getelementptr inbounds i16, ptr %2498, i64 %2566
  store i16 %2568, ptr %2569, align 2, !tbaa !44
  %2570 = add nuw nsw i64 %2566, 1
  %2571 = getelementptr inbounds i16, ptr %680, i64 %2570
  %2572 = load i16, ptr %2571, align 2, !tbaa !44
  %2573 = getelementptr inbounds i16, ptr %2498, i64 %2570
  store i16 %2572, ptr %2573, align 2, !tbaa !44
  %2574 = add nuw nsw i64 %2566, 2
  %2575 = getelementptr inbounds i16, ptr %680, i64 %2574
  %2576 = load i16, ptr %2575, align 2, !tbaa !44
  %2577 = getelementptr inbounds i16, ptr %2498, i64 %2574
  store i16 %2576, ptr %2577, align 2, !tbaa !44
  %2578 = add nuw nsw i64 %2566, 3
  %2579 = getelementptr inbounds i16, ptr %680, i64 %2578
  %2580 = load i16, ptr %2579, align 2, !tbaa !44
  %2581 = getelementptr inbounds i16, ptr %2498, i64 %2578
  store i16 %2580, ptr %2581, align 2, !tbaa !44
  %2582 = add nuw nsw i64 %2566, 4
  %2583 = icmp eq i64 %2582, %2501
  br i1 %2583, label %2584, label %2565, !llvm.loop !213

2584:                                             ; preds = %2562, %2565, %2529, %2544
  %2585 = shl i64 %2493, 31
  %2586 = add i64 %2585, -4294967296
  %2587 = ashr i64 %2586, 32
  %2588 = getelementptr inbounds i16, ptr %2498, i64 %2587
  %2589 = load i16, ptr %2588, align 2, !tbaa !44
  br label %2590

2590:                                             ; preds = %2481, %2584
  %2591 = phi i64 [ %2494, %2584 ], [ 0, %2481 ]
  %2592 = phi i16 [ %2589, %2584 ], [ -1, %2481 ]
  %2593 = and i64 %2591, 4294967295
  %2594 = getelementptr inbounds i16, ptr %2498, i64 %2593
  store i16 %2592, ptr %2594, align 2, !tbaa !44
  %2595 = trunc i64 %2494 to i16
  %2596 = add i16 %2595, 1
  %2597 = sext i32 %2491 to i64
  %2598 = getelementptr inbounds i16, ptr %1499, i64 %2597
  store i16 %2596, ptr %2598, align 2, !tbaa !44
  %2599 = add nsw i32 %2495, 2
  %2600 = add nsw i32 %2599, %2491
  %2601 = ptrtoint ptr %1918 to i64
  %2602 = sub i64 %2601, %976
  %2603 = lshr exact i64 %2602, 1
  %2604 = trunc i64 %2603 to i32
  %2605 = add nsw i32 %2600, 1
  %2606 = sext i32 %2605 to i64
  %2607 = getelementptr i16, ptr %1499, i64 %2606
  %2608 = icmp sgt i32 %2604, 0
  br i1 %2608, label %2609, label %2699

2609:                                             ; preds = %2590
  %2610 = and i64 %2603, 4294967295
  %2611 = icmp ult i64 %2610, 8
  br i1 %2611, label %2655, label %2612

2612:                                             ; preds = %2609
  %2613 = shl nsw i64 %2606, 1
  %2614 = add i64 %2613, %1500
  %2615 = sub i64 %2614, %976
  %2616 = icmp ult i64 %2615, 128
  br i1 %2616, label %2655, label %2617

2617:                                             ; preds = %2612
  %2618 = icmp ult i64 %2610, 64
  br i1 %2618, label %2642, label %2619

2619:                                             ; preds = %2617
  %2620 = and i64 %2603, 63
  %2621 = sub nsw i64 %2610, %2620
  br label %2622

2622:                                             ; preds = %2622, %2619
  %2623 = phi i64 [ 0, %2619 ], [ %2636, %2622 ]
  %2624 = getelementptr inbounds i16, ptr %726, i64 %2623
  %2625 = load <16 x i16>, ptr %2624, align 2, !tbaa !44
  %2626 = getelementptr inbounds i16, ptr %2624, i64 16
  %2627 = load <16 x i16>, ptr %2626, align 2, !tbaa !44
  %2628 = getelementptr inbounds i16, ptr %2624, i64 32
  %2629 = load <16 x i16>, ptr %2628, align 2, !tbaa !44
  %2630 = getelementptr inbounds i16, ptr %2624, i64 48
  %2631 = load <16 x i16>, ptr %2630, align 2, !tbaa !44
  %2632 = getelementptr inbounds i16, ptr %2607, i64 %2623
  store <16 x i16> %2625, ptr %2632, align 2, !tbaa !44
  %2633 = getelementptr inbounds i16, ptr %2632, i64 16
  store <16 x i16> %2627, ptr %2633, align 2, !tbaa !44
  %2634 = getelementptr inbounds i16, ptr %2632, i64 32
  store <16 x i16> %2629, ptr %2634, align 2, !tbaa !44
  %2635 = getelementptr inbounds i16, ptr %2632, i64 48
  store <16 x i16> %2631, ptr %2635, align 2, !tbaa !44
  %2636 = add nuw i64 %2623, 64
  %2637 = icmp eq i64 %2636, %2621
  br i1 %2637, label %2638, label %2622, !llvm.loop !214

2638:                                             ; preds = %2622
  %2639 = icmp eq i64 %2620, 0
  br i1 %2639, label %2693, label %2640

2640:                                             ; preds = %2638
  %2641 = icmp ult i64 %2620, 8
  br i1 %2641, label %2655, label %2642

2642:                                             ; preds = %2617, %2640
  %2643 = phi i64 [ %2621, %2640 ], [ 0, %2617 ]
  %2644 = and i64 %2603, 7
  %2645 = sub nsw i64 %2610, %2644
  br label %2646

2646:                                             ; preds = %2646, %2642
  %2647 = phi i64 [ %2643, %2642 ], [ %2651, %2646 ]
  %2648 = getelementptr inbounds i16, ptr %726, i64 %2647
  %2649 = load <8 x i16>, ptr %2648, align 2, !tbaa !44
  %2650 = getelementptr inbounds i16, ptr %2607, i64 %2647
  store <8 x i16> %2649, ptr %2650, align 2, !tbaa !44
  %2651 = add nuw i64 %2647, 8
  %2652 = icmp eq i64 %2651, %2645
  br i1 %2652, label %2653, label %2646, !llvm.loop !215

2653:                                             ; preds = %2646
  %2654 = icmp eq i64 %2644, 0
  br i1 %2654, label %2693, label %2655

2655:                                             ; preds = %2612, %2609, %2640, %2653
  %2656 = phi i64 [ 0, %2609 ], [ 0, %2612 ], [ %2621, %2640 ], [ %2645, %2653 ]
  %2657 = sub i64 %2603, %2656
  %2658 = xor i64 %2656, -1
  %2659 = add nsw i64 %2610, %2658
  %2660 = and i64 %2657, 3
  %2661 = icmp eq i64 %2660, 0
  br i1 %2661, label %2671, label %2662

2662:                                             ; preds = %2655, %2662
  %2663 = phi i64 [ %2668, %2662 ], [ %2656, %2655 ]
  %2664 = phi i64 [ %2669, %2662 ], [ 0, %2655 ]
  %2665 = getelementptr inbounds i16, ptr %726, i64 %2663
  %2666 = load i16, ptr %2665, align 2, !tbaa !44
  %2667 = getelementptr inbounds i16, ptr %2607, i64 %2663
  store i16 %2666, ptr %2667, align 2, !tbaa !44
  %2668 = add nuw nsw i64 %2663, 1
  %2669 = add i64 %2664, 1
  %2670 = icmp eq i64 %2669, %2660
  br i1 %2670, label %2671, label %2662, !llvm.loop !216

2671:                                             ; preds = %2662, %2655
  %2672 = phi i64 [ %2656, %2655 ], [ %2668, %2662 ]
  %2673 = icmp ult i64 %2659, 3
  br i1 %2673, label %2693, label %2674

2674:                                             ; preds = %2671, %2674
  %2675 = phi i64 [ %2691, %2674 ], [ %2672, %2671 ]
  %2676 = getelementptr inbounds i16, ptr %726, i64 %2675
  %2677 = load i16, ptr %2676, align 2, !tbaa !44
  %2678 = getelementptr inbounds i16, ptr %2607, i64 %2675
  store i16 %2677, ptr %2678, align 2, !tbaa !44
  %2679 = add nuw nsw i64 %2675, 1
  %2680 = getelementptr inbounds i16, ptr %726, i64 %2679
  %2681 = load i16, ptr %2680, align 2, !tbaa !44
  %2682 = getelementptr inbounds i16, ptr %2607, i64 %2679
  store i16 %2681, ptr %2682, align 2, !tbaa !44
  %2683 = add nuw nsw i64 %2675, 2
  %2684 = getelementptr inbounds i16, ptr %726, i64 %2683
  %2685 = load i16, ptr %2684, align 2, !tbaa !44
  %2686 = getelementptr inbounds i16, ptr %2607, i64 %2683
  store i16 %2685, ptr %2686, align 2, !tbaa !44
  %2687 = add nuw nsw i64 %2675, 3
  %2688 = getelementptr inbounds i16, ptr %726, i64 %2687
  %2689 = load i16, ptr %2688, align 2, !tbaa !44
  %2690 = getelementptr inbounds i16, ptr %2607, i64 %2687
  store i16 %2689, ptr %2690, align 2, !tbaa !44
  %2691 = add nuw nsw i64 %2675, 4
  %2692 = icmp eq i64 %2691, %2610
  br i1 %2692, label %2693, label %2674, !llvm.loop !217

2693:                                             ; preds = %2671, %2674, %2638, %2653
  %2694 = shl i64 %2602, 31
  %2695 = add i64 %2694, -4294967296
  %2696 = ashr i64 %2695, 32
  %2697 = getelementptr inbounds i16, ptr %2607, i64 %2696
  %2698 = load i16, ptr %2697, align 2, !tbaa !44
  br label %2699

2699:                                             ; preds = %2590, %2693
  %2700 = phi i64 [ %2603, %2693 ], [ 0, %2590 ]
  %2701 = phi i16 [ %2698, %2693 ], [ -1, %2590 ]
  %2702 = and i64 %2700, 4294967295
  %2703 = getelementptr inbounds i16, ptr %2607, i64 %2702
  store i16 %2701, ptr %2703, align 2, !tbaa !44
  %2704 = trunc i64 %2603 to i16
  %2705 = add i16 %2704, 1
  %2706 = sext i32 %2600 to i64
  %2707 = getelementptr inbounds i16, ptr %1499, i64 %2706
  store i16 %2705, ptr %2707, align 2, !tbaa !44
  %2708 = add nsw i32 %2604, 2
  %2709 = add nsw i32 %2708, %2600
  %2710 = ptrtoint ptr %1917 to i64
  %2711 = sub i64 %2710, %977
  %2712 = lshr exact i64 %2711, 1
  %2713 = trunc i64 %2712 to i32
  %2714 = add nsw i32 %2709, 1
  %2715 = sext i32 %2714 to i64
  %2716 = getelementptr i16, ptr %1499, i64 %2715
  %2717 = icmp sgt i32 %2713, 0
  br i1 %2717, label %2718, label %2808

2718:                                             ; preds = %2699
  %2719 = and i64 %2712, 4294967295
  %2720 = icmp ult i64 %2719, 8
  br i1 %2720, label %2764, label %2721

2721:                                             ; preds = %2718
  %2722 = shl nsw i64 %2715, 1
  %2723 = add i64 %2722, %1500
  %2724 = sub i64 %2723, %977
  %2725 = icmp ult i64 %2724, 128
  br i1 %2725, label %2764, label %2726

2726:                                             ; preds = %2721
  %2727 = icmp ult i64 %2719, 64
  br i1 %2727, label %2751, label %2728

2728:                                             ; preds = %2726
  %2729 = and i64 %2712, 63
  %2730 = sub nsw i64 %2719, %2729
  br label %2731

2731:                                             ; preds = %2731, %2728
  %2732 = phi i64 [ 0, %2728 ], [ %2745, %2731 ]
  %2733 = getelementptr inbounds i16, ptr %772, i64 %2732
  %2734 = load <16 x i16>, ptr %2733, align 2, !tbaa !44
  %2735 = getelementptr inbounds i16, ptr %2733, i64 16
  %2736 = load <16 x i16>, ptr %2735, align 2, !tbaa !44
  %2737 = getelementptr inbounds i16, ptr %2733, i64 32
  %2738 = load <16 x i16>, ptr %2737, align 2, !tbaa !44
  %2739 = getelementptr inbounds i16, ptr %2733, i64 48
  %2740 = load <16 x i16>, ptr %2739, align 2, !tbaa !44
  %2741 = getelementptr inbounds i16, ptr %2716, i64 %2732
  store <16 x i16> %2734, ptr %2741, align 2, !tbaa !44
  %2742 = getelementptr inbounds i16, ptr %2741, i64 16
  store <16 x i16> %2736, ptr %2742, align 2, !tbaa !44
  %2743 = getelementptr inbounds i16, ptr %2741, i64 32
  store <16 x i16> %2738, ptr %2743, align 2, !tbaa !44
  %2744 = getelementptr inbounds i16, ptr %2741, i64 48
  store <16 x i16> %2740, ptr %2744, align 2, !tbaa !44
  %2745 = add nuw i64 %2732, 64
  %2746 = icmp eq i64 %2745, %2730
  br i1 %2746, label %2747, label %2731, !llvm.loop !218

2747:                                             ; preds = %2731
  %2748 = icmp eq i64 %2729, 0
  br i1 %2748, label %2802, label %2749

2749:                                             ; preds = %2747
  %2750 = icmp ult i64 %2729, 8
  br i1 %2750, label %2764, label %2751

2751:                                             ; preds = %2726, %2749
  %2752 = phi i64 [ %2730, %2749 ], [ 0, %2726 ]
  %2753 = and i64 %2712, 7
  %2754 = sub nsw i64 %2719, %2753
  br label %2755

2755:                                             ; preds = %2755, %2751
  %2756 = phi i64 [ %2752, %2751 ], [ %2760, %2755 ]
  %2757 = getelementptr inbounds i16, ptr %772, i64 %2756
  %2758 = load <8 x i16>, ptr %2757, align 2, !tbaa !44
  %2759 = getelementptr inbounds i16, ptr %2716, i64 %2756
  store <8 x i16> %2758, ptr %2759, align 2, !tbaa !44
  %2760 = add nuw i64 %2756, 8
  %2761 = icmp eq i64 %2760, %2754
  br i1 %2761, label %2762, label %2755, !llvm.loop !219

2762:                                             ; preds = %2755
  %2763 = icmp eq i64 %2753, 0
  br i1 %2763, label %2802, label %2764

2764:                                             ; preds = %2721, %2718, %2749, %2762
  %2765 = phi i64 [ 0, %2718 ], [ 0, %2721 ], [ %2730, %2749 ], [ %2754, %2762 ]
  %2766 = sub i64 %2712, %2765
  %2767 = xor i64 %2765, -1
  %2768 = add nsw i64 %2719, %2767
  %2769 = and i64 %2766, 3
  %2770 = icmp eq i64 %2769, 0
  br i1 %2770, label %2780, label %2771

2771:                                             ; preds = %2764, %2771
  %2772 = phi i64 [ %2777, %2771 ], [ %2765, %2764 ]
  %2773 = phi i64 [ %2778, %2771 ], [ 0, %2764 ]
  %2774 = getelementptr inbounds i16, ptr %772, i64 %2772
  %2775 = load i16, ptr %2774, align 2, !tbaa !44
  %2776 = getelementptr inbounds i16, ptr %2716, i64 %2772
  store i16 %2775, ptr %2776, align 2, !tbaa !44
  %2777 = add nuw nsw i64 %2772, 1
  %2778 = add i64 %2773, 1
  %2779 = icmp eq i64 %2778, %2769
  br i1 %2779, label %2780, label %2771, !llvm.loop !220

2780:                                             ; preds = %2771, %2764
  %2781 = phi i64 [ %2765, %2764 ], [ %2777, %2771 ]
  %2782 = icmp ult i64 %2768, 3
  br i1 %2782, label %2802, label %2783

2783:                                             ; preds = %2780, %2783
  %2784 = phi i64 [ %2800, %2783 ], [ %2781, %2780 ]
  %2785 = getelementptr inbounds i16, ptr %772, i64 %2784
  %2786 = load i16, ptr %2785, align 2, !tbaa !44
  %2787 = getelementptr inbounds i16, ptr %2716, i64 %2784
  store i16 %2786, ptr %2787, align 2, !tbaa !44
  %2788 = add nuw nsw i64 %2784, 1
  %2789 = getelementptr inbounds i16, ptr %772, i64 %2788
  %2790 = load i16, ptr %2789, align 2, !tbaa !44
  %2791 = getelementptr inbounds i16, ptr %2716, i64 %2788
  store i16 %2790, ptr %2791, align 2, !tbaa !44
  %2792 = add nuw nsw i64 %2784, 2
  %2793 = getelementptr inbounds i16, ptr %772, i64 %2792
  %2794 = load i16, ptr %2793, align 2, !tbaa !44
  %2795 = getelementptr inbounds i16, ptr %2716, i64 %2792
  store i16 %2794, ptr %2795, align 2, !tbaa !44
  %2796 = add nuw nsw i64 %2784, 3
  %2797 = getelementptr inbounds i16, ptr %772, i64 %2796
  %2798 = load i16, ptr %2797, align 2, !tbaa !44
  %2799 = getelementptr inbounds i16, ptr %2716, i64 %2796
  store i16 %2798, ptr %2799, align 2, !tbaa !44
  %2800 = add nuw nsw i64 %2784, 4
  %2801 = icmp eq i64 %2800, %2719
  br i1 %2801, label %2802, label %2783, !llvm.loop !221

2802:                                             ; preds = %2780, %2783, %2747, %2762
  %2803 = shl i64 %2711, 31
  %2804 = add i64 %2803, -4294967296
  %2805 = ashr i64 %2804, 32
  %2806 = getelementptr inbounds i16, ptr %2716, i64 %2805
  %2807 = load i16, ptr %2806, align 2, !tbaa !44
  br label %2808

2808:                                             ; preds = %2699, %2802
  %2809 = phi i64 [ %2712, %2802 ], [ 0, %2699 ]
  %2810 = phi i16 [ %2807, %2802 ], [ -1, %2699 ]
  %2811 = and i64 %2809, 4294967295
  %2812 = getelementptr inbounds i16, ptr %2716, i64 %2811
  store i16 %2810, ptr %2812, align 2, !tbaa !44
  %2813 = trunc i64 %2712 to i16
  %2814 = add i16 %2813, 1
  %2815 = sext i32 %2709 to i64
  %2816 = getelementptr inbounds i16, ptr %1499, i64 %2815
  store i16 %2814, ptr %2816, align 2, !tbaa !44
  %2817 = add i32 %2713, 3
  %2818 = add i32 %2817, %2709
  %2819 = select i1 %171, i32 1, i32 %2818
  store i32 %2819, ptr %14, align 8, !tbaa !17
  br label %2904

2820:                                             ; preds = %1018
  %2821 = load ptr, ptr %9, align 8, !tbaa !46
  %2822 = load i32, ptr %14, align 8, !tbaa !17
  %2823 = add i32 %2822, 1
  %2824 = sext i32 %2823 to i64
  %2825 = getelementptr inbounds i16, ptr %2821, i64 %2824
  %2826 = sext i32 %2822 to i64
  %2827 = getelementptr inbounds i16, ptr %2821, i64 %2826
  %2828 = load i16, ptr %2827, align 2, !tbaa !44
  %2829 = zext i16 %2828 to i32
  %2830 = add i32 %2823, %2829
  %2831 = add nsw i32 %2829, -1
  %2832 = add i32 %2830, 1
  %2833 = sext i32 %2832 to i64
  %2834 = getelementptr inbounds i16, ptr %2821, i64 %2833
  %2835 = sext i32 %2830 to i64
  %2836 = getelementptr inbounds i16, ptr %2821, i64 %2835
  %2837 = load i16, ptr %2836, align 2, !tbaa !44
  %2838 = zext i16 %2837 to i32
  %2839 = add i32 %2832, %2838
  %2840 = add nsw i32 %2838, -1
  %2841 = add i32 %2839, 1
  %2842 = sext i32 %2841 to i64
  %2843 = getelementptr inbounds i16, ptr %2821, i64 %2842
  %2844 = sext i32 %2839 to i64
  %2845 = getelementptr inbounds i16, ptr %2821, i64 %2844
  %2846 = load i16, ptr %2845, align 2, !tbaa !44
  %2847 = zext i16 %2846 to i32
  %2848 = add i32 %2841, %2847
  %2849 = add nsw i32 %2847, -1
  %2850 = add i32 %2848, 1
  %2851 = sext i32 %2850 to i64
  %2852 = getelementptr inbounds i16, ptr %2821, i64 %2851
  %2853 = sext i32 %2848 to i64
  %2854 = getelementptr inbounds i16, ptr %2821, i64 %2853
  %2855 = load i16, ptr %2854, align 2, !tbaa !44
  %2856 = zext i16 %2855 to i32
  %2857 = add i32 %2850, %2856
  %2858 = add nsw i32 %2856, -1
  %2859 = add i32 %2857, 1
  %2860 = sext i32 %2859 to i64
  %2861 = getelementptr inbounds i16, ptr %2821, i64 %2860
  %2862 = sext i32 %2857 to i64
  %2863 = getelementptr inbounds i16, ptr %2821, i64 %2862
  %2864 = load i16, ptr %2863, align 2, !tbaa !44
  %2865 = zext i16 %2864 to i32
  %2866 = add i32 %2859, %2865
  %2867 = add nsw i32 %2865, -1
  %2868 = add i32 %2866, 1
  %2869 = sext i32 %2868 to i64
  %2870 = getelementptr inbounds i16, ptr %2821, i64 %2869
  %2871 = sext i32 %2866 to i64
  %2872 = getelementptr inbounds i16, ptr %2821, i64 %2871
  %2873 = load i16, ptr %2872, align 2, !tbaa !44
  %2874 = zext i16 %2873 to i32
  %2875 = add i32 %2868, %2874
  %2876 = add nsw i32 %2874, -1
  %2877 = add i32 %2875, 1
  %2878 = sext i32 %2877 to i64
  %2879 = getelementptr inbounds i16, ptr %2821, i64 %2878
  %2880 = sext i32 %2875 to i64
  %2881 = getelementptr inbounds i16, ptr %2821, i64 %2880
  %2882 = load i16, ptr %2881, align 2, !tbaa !44
  %2883 = zext i16 %2882 to i32
  %2884 = add i32 %2877, %2883
  %2885 = add nsw i32 %2883, -1
  %2886 = add i32 %2884, 1
  %2887 = sext i32 %2886 to i64
  %2888 = getelementptr inbounds i16, ptr %2821, i64 %2887
  %2889 = sext i32 %2884 to i64
  %2890 = getelementptr inbounds i16, ptr %2821, i64 %2889
  %2891 = load i16, ptr %2890, align 2, !tbaa !44
  %2892 = zext i16 %2891 to i32
  %2893 = add i32 %2886, %2892
  %2894 = add nsw i32 %2892, -1
  %2895 = add i32 %2893, 1
  %2896 = sext i32 %2895 to i64
  %2897 = getelementptr inbounds i16, ptr %2821, i64 %2896
  %2898 = sext i32 %2893 to i64
  %2899 = getelementptr inbounds i16, ptr %2821, i64 %2898
  %2900 = load i16, ptr %2899, align 2, !tbaa !44
  %2901 = zext i16 %2900 to i32
  %2902 = add i32 %2895, %2901
  store i32 %2902, ptr %14, align 8, !tbaa !17
  %2903 = add nsw i32 %2901, -1
  br label %2904

2904:                                             ; preds = %2808, %2820
  %2905 = phi ptr [ %2825, %2820 ], [ %1503, %2808 ]
  %2906 = phi i32 [ %2831, %2820 ], [ %1929, %2808 ]
  %2907 = phi ptr [ %2834, %2820 ], [ %1953, %2808 ]
  %2908 = phi i32 [ %2840, %2820 ], [ %1950, %2808 ]
  %2909 = phi ptr [ %2843, %2820 ], [ %2062, %2808 ]
  %2910 = phi i32 [ %2849, %2820 ], [ %2059, %2808 ]
  %2911 = phi ptr [ %2852, %2820 ], [ %2171, %2808 ]
  %2912 = phi i32 [ %2858, %2820 ], [ %2168, %2808 ]
  %2913 = phi ptr [ %2861, %2820 ], [ %2280, %2808 ]
  %2914 = phi i32 [ %2867, %2820 ], [ %2277, %2808 ]
  %2915 = phi ptr [ %2870, %2820 ], [ %2389, %2808 ]
  %2916 = phi i32 [ %2876, %2820 ], [ %2386, %2808 ]
  %2917 = phi ptr [ %2879, %2820 ], [ %2498, %2808 ]
  %2918 = phi i32 [ %2885, %2820 ], [ %2495, %2808 ]
  %2919 = phi ptr [ %2888, %2820 ], [ %2607, %2808 ]
  %2920 = phi i32 [ %2894, %2820 ], [ %2604, %2808 ]
  %2921 = phi ptr [ %2897, %2820 ], [ %2716, %2808 ]
  %2922 = phi i32 [ %2903, %2820 ], [ %2713, %2808 ]
  %2923 = phi i32 [ %997, %2820 ], [ %1464, %2808 ]
  %2924 = phi ptr [ %996, %2820 ], [ %1273, %2808 ]
  %2925 = phi ptr [ %995, %2820 ], [ %1274, %2808 ]
  %2926 = phi ptr [ %994, %2820 ], [ %1275, %2808 ]
  %2927 = getelementptr inbounds %struct.CompAtom, ptr %68, i64 %1003, i32 1
  %2928 = load float, ptr %2927, align 8, !tbaa !104
  %2929 = fpext float %2928 to double
  %2930 = fmul double %2929, 0x4074C104816F0069
  %2931 = fmul double %29, %2930
  %2932 = fmul double %25, %2931
  %2933 = load double, ptr @_ZN20ComputeNonbondedUtil7cutoff2E, align 8, !tbaa !19
  %2934 = extractelement <2 x double> %1021, i64 0
  %2935 = extractelement <2 x double> %1021, i64 1
  %2936 = tail call noundef i32 @_Z22pairlist_from_pairlistddddPK8CompAtomPKtiPtdPd(double noundef %2933, double noundef %2934, double noundef %2935, double noundef %1024, ptr noundef %70, ptr noundef nonnull %2905, i32 noundef %2906, ptr noundef %123, double noundef %32, ptr noundef %169)
  %2937 = icmp sgt i32 %2936, 0
  br i1 %2937, label %2938, label %3025

2938:                                             ; preds = %2904
  %2939 = load ptr, ptr @_ZN20ComputeNonbondedUtil8r2_tableE, align 8, !tbaa !23
  %2940 = zext i32 %2936 to i64
  %2941 = shufflevector <2 x double> %999, <2 x double> %1000, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  br label %2942

2942:                                             ; preds = %2938, %2942
  %2943 = phi i64 [ 0, %2938 ], [ %3020, %2942 ]
  %2944 = phi double [ 0.000000e+00, %2938 ], [ %3016, %2942 ]
  %2945 = phi <2 x double> [ zeroinitializer, %2938 ], [ %3007, %2942 ]
  %2946 = phi <4 x double> [ %2941, %2938 ], [ %3006, %2942 ]
  %2947 = phi <2 x double> [ %1001, %2938 ], [ %2995, %2942 ]
  %2948 = phi <2 x double> [ %1002, %2938 ], [ %3015, %2942 ]
  %2949 = shl nuw nsw i64 %2943, 1
  %2950 = getelementptr inbounds i32, ptr %170, i64 %2949
  %2951 = load i32, ptr %2950, align 4, !tbaa !5
  %2952 = ashr i32 %2951, 14
  %2953 = add nsw i32 %2952, %35
  %2954 = getelementptr inbounds i16, ptr %123, i64 %2943
  %2955 = load i16, ptr %2954, align 2, !tbaa !44
  %2956 = zext i16 %2955 to i64
  %2957 = getelementptr inbounds %struct.CompAtom, ptr %70, i64 %2956
  %2958 = getelementptr inbounds double, ptr %169, i64 %2943
  %2959 = load double, ptr %2958, align 8, !tbaa !19
  %2960 = sext i32 %2953 to i64
  %2961 = getelementptr inbounds double, ptr %2939, i64 %2960
  %2962 = load double, ptr %2961, align 8, !tbaa !19
  %2963 = fsub double %2959, %2962
  %2964 = shl nsw i32 %2953, 4
  %2965 = sext i32 %2964 to i64
  %2966 = getelementptr inbounds double, ptr %27, i64 %2965
  %2967 = getelementptr inbounds %class.Vector, ptr %953, i64 %2956
  %2968 = getelementptr inbounds %struct.CompAtom, ptr %70, i64 %2956, i32 1
  %2969 = load float, ptr %2968, align 8, !tbaa !104
  %2970 = fpext float %2969 to double
  %2971 = fmul double %2932, %2970
  %2972 = getelementptr inbounds %class.Vector, ptr %2957, i64 0, i32 2
  %2973 = load double, ptr %2972, align 8, !tbaa !49
  %2974 = fsub double %1024, %2973
  %2975 = getelementptr inbounds double, ptr %2966, i64 12
  %2976 = load double, ptr %2975, align 8, !tbaa !19
  %2977 = getelementptr inbounds double, ptr %2966, i64 13
  %2978 = load double, ptr %2977, align 8, !tbaa !19
  %2979 = getelementptr inbounds double, ptr %2966, i64 14
  %2980 = load double, ptr %2979, align 8, !tbaa !19
  %2981 = getelementptr inbounds double, ptr %2966, i64 15
  %2982 = load double, ptr %2981, align 8, !tbaa !19
  %2983 = fmul double %2971, %2976
  %2984 = fmul double %2971, %2978
  %2985 = fmul double %2971, %2980
  %2986 = fmul double %2971, %2982
  %2987 = fmul double %2963, %2983
  %2988 = fmul double %2984, 2.500000e-01
  %2989 = tail call double @llvm.fmuladd.f64(double %2987, double 0x3FC5555555555555, double %2988)
  %2990 = fmul double %2985, 5.000000e-01
  %2991 = tail call double @llvm.fmuladd.f64(double %2989, double %2963, double %2990)
  %2992 = tail call double @llvm.fmuladd.f64(double %2991, double %2963, double %2986)
  %2993 = insertelement <2 x double> poison, double %2992, i64 0
  %2994 = shufflevector <2 x double> %2993, <2 x double> poison, <2 x i32> zeroinitializer
  %2995 = fsub <2 x double> %2947, %2994
  %2996 = tail call double @llvm.fmuladd.f64(double %2963, double %2983, double %2984)
  %2997 = tail call double @llvm.fmuladd.f64(double %2996, double %2963, double %2985)
  %2998 = load <2 x double>, ptr %2957, align 8, !tbaa !19
  %2999 = fsub <2 x double> %1021, %2998
  %3000 = insertelement <2 x double> poison, double %2997, i64 0
  %3001 = shufflevector <2 x double> %3000, <2 x double> poison, <2 x i32> zeroinitializer
  %3002 = fmul <2 x double> %2999, %3001
  %3003 = shufflevector <2 x double> %3002, <2 x double> poison, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %3004 = shufflevector <2 x double> %2999, <2 x double> poison, <4 x i32> <i32 0, i32 1, i32 1, i32 poison>
  %3005 = insertelement <4 x double> %3004, double %2974, i64 3
  %3006 = tail call <4 x double> @llvm.fmuladd.v4f64(<4 x double> %3003, <4 x double> %3005, <4 x double> %2946)
  %3007 = fadd <2 x double> %2945, %3002
  %3008 = load <2 x double>, ptr %2967, align 8, !tbaa !19
  %3009 = fsub <2 x double> %3008, %3002
  store <2 x double> %3009, ptr %2967, align 8, !tbaa !19
  %3010 = fmul double %2974, %2997
  %3011 = insertelement <2 x double> poison, double %3010, i64 0
  %3012 = shufflevector <2 x double> %3011, <2 x double> %3002, <2 x i32> <i32 0, i32 2>
  %3013 = insertelement <2 x double> poison, double %2974, i64 0
  %3014 = shufflevector <2 x double> %3013, <2 x double> poison, <2 x i32> zeroinitializer
  %3015 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %3012, <2 x double> %3014, <2 x double> %2948)
  %3016 = fadd double %2944, %3010
  %3017 = getelementptr inbounds %class.Vector, ptr %953, i64 %2956, i32 2
  %3018 = load double, ptr %3017, align 8, !tbaa !112
  %3019 = fsub double %3018, %3010
  store double %3019, ptr %3017, align 8, !tbaa !112
  %3020 = add nuw nsw i64 %2943, 1
  %3021 = icmp eq i64 %3020, %2940
  br i1 %3021, label %3022, label %2942

3022:                                             ; preds = %2942
  %3023 = shufflevector <4 x double> %3006, <4 x double> poison, <2 x i32> <i32 2, i32 3>
  %3024 = shufflevector <4 x double> %3006, <4 x double> poison, <2 x i32> <i32 0, i32 1>
  br label %3025

3025:                                             ; preds = %3022, %2904
  %3026 = phi double [ 0.000000e+00, %2904 ], [ %3016, %3022 ]
  %3027 = phi <2 x double> [ %999, %2904 ], [ %3024, %3022 ]
  %3028 = phi <2 x double> [ %1000, %2904 ], [ %3023, %3022 ]
  %3029 = phi <2 x double> [ %1001, %2904 ], [ %2995, %3022 ]
  %3030 = phi <2 x double> [ %1002, %2904 ], [ %3015, %3022 ]
  %3031 = phi <2 x double> [ zeroinitializer, %2904 ], [ %3007, %3022 ]
  %3032 = load double, ptr @_ZN20ComputeNonbondedUtil7cutoff2E, align 8, !tbaa !19
  %3033 = tail call noundef i32 @_Z22pairlist_from_pairlistddddPK8CompAtomPKtiPtdPd(double noundef %3032, double noundef %2934, double noundef %2935, double noundef %1024, ptr noundef %70, ptr noundef %2909, i32 noundef %2910, ptr noundef %123, double noundef %32, ptr noundef %169)
  %3034 = add nsw i32 %3033, %992
  %3035 = icmp sgt i32 %3033, 0
  br i1 %3035, label %3036, label %3142

3036:                                             ; preds = %3025
  %3037 = load ptr, ptr @_ZN20ComputeNonbondedUtil8r2_tableE, align 8, !tbaa !23
  %3038 = zext i32 %3033 to i64
  %3039 = shufflevector <2 x double> %1021, <2 x double> poison, <2 x i32> <i32 1, i32 poison>
  %3040 = insertelement <2 x double> %3039, double %1024, i64 1
  br label %3041

3041:                                             ; preds = %3036, %3041
  %3042 = phi i64 [ 0, %3036 ], [ %3140, %3041 ]
  %3043 = phi double [ %3026, %3036 ], [ %3136, %3041 ]
  %3044 = phi <2 x double> [ %3029, %3036 ], [ %3111, %3041 ]
  %3045 = phi <2 x double> [ %3030, %3036 ], [ %3134, %3041 ]
  %3046 = phi <2 x double> [ %3031, %3036 ], [ %3130, %3041 ]
  %3047 = phi <2 x double> [ %3028, %3036 ], [ %3120, %3041 ]
  %3048 = phi <2 x double> [ %3027, %3036 ], [ %3128, %3041 ]
  %3049 = shl nuw nsw i64 %3042, 1
  %3050 = getelementptr inbounds i32, ptr %170, i64 %3049
  %3051 = load i32, ptr %3050, align 4, !tbaa !5
  %3052 = ashr i32 %3051, 14
  %3053 = add nsw i32 %3052, %35
  %3054 = getelementptr inbounds i16, ptr %123, i64 %3042
  %3055 = load i16, ptr %3054, align 2, !tbaa !44
  %3056 = zext i16 %3055 to i64
  %3057 = getelementptr inbounds %struct.CompAtom, ptr %70, i64 %3056
  %3058 = getelementptr inbounds double, ptr %169, i64 %3042
  %3059 = load double, ptr %3058, align 8, !tbaa !19
  %3060 = sext i32 %3053 to i64
  %3061 = getelementptr inbounds double, ptr %3037, i64 %3060
  %3062 = load double, ptr %3061, align 8, !tbaa !19
  %3063 = fsub double %3059, %3062
  %3064 = shl nsw i32 %3053, 4
  %3065 = sext i32 %3064 to i64
  %3066 = getelementptr inbounds double, ptr %27, i64 %3065
  %3067 = getelementptr inbounds %class.Vector, ptr %953, i64 %3056
  %3068 = getelementptr inbounds %struct.CompAtom, ptr %70, i64 %3056, i32 1
  %3069 = load float, ptr %3068, align 8, !tbaa !104
  %3070 = fpext float %3069 to double
  %3071 = fmul double %2932, %3070
  %3072 = load double, ptr %3057, align 8, !tbaa !68
  %3073 = fsub double %2934, %3072
  %3074 = getelementptr inbounds %class.Vector, ptr %3057, i64 0, i32 1
  %3075 = load <2 x double>, ptr %3074, align 8, !tbaa !19
  %3076 = fsub <2 x double> %3040, %3075
  %3077 = shl nsw i32 %3053, 2
  %3078 = sext i32 %3077 to i64
  %3079 = getelementptr inbounds double, ptr %28, i64 %3078
  %3080 = getelementptr inbounds double, ptr %3066, i64 12
  %3081 = load double, ptr %3080, align 8, !tbaa !19
  %3082 = getelementptr inbounds double, ptr %3066, i64 13
  %3083 = load double, ptr %3082, align 8, !tbaa !19
  %3084 = getelementptr inbounds double, ptr %3066, i64 14
  %3085 = load double, ptr %3084, align 8, !tbaa !19
  %3086 = getelementptr inbounds double, ptr %3066, i64 15
  %3087 = load double, ptr %3086, align 8, !tbaa !19
  %3088 = load double, ptr %3079, align 8, !tbaa !19
  %3089 = tail call double @llvm.fmuladd.f64(double %31, double %3088, double %3087)
  %3090 = getelementptr inbounds double, ptr %3079, i64 1
  %3091 = load double, ptr %3090, align 8, !tbaa !19
  %3092 = tail call double @llvm.fmuladd.f64(double %978, double %3091, double %3085)
  %3093 = getelementptr inbounds double, ptr %3079, i64 2
  %3094 = load double, ptr %3093, align 8, !tbaa !19
  %3095 = tail call double @llvm.fmuladd.f64(double %979, double %3094, double %3083)
  %3096 = getelementptr inbounds double, ptr %3079, i64 3
  %3097 = load double, ptr %3096, align 8, !tbaa !19
  %3098 = tail call double @llvm.fmuladd.f64(double %980, double %3097, double %3081)
  %3099 = fmul double %3071, %3098
  %3100 = fmul double %3071, %3095
  %3101 = fmul double %3071, %3092
  %3102 = fmul double %3071, %3089
  %3103 = fmul double %3063, %3099
  %3104 = fmul double %3100, 2.500000e-01
  %3105 = tail call double @llvm.fmuladd.f64(double %3103, double 0x3FC5555555555555, double %3104)
  %3106 = fmul double %3101, 5.000000e-01
  %3107 = tail call double @llvm.fmuladd.f64(double %3105, double %3063, double %3106)
  %3108 = tail call double @llvm.fmuladd.f64(double %3107, double %3063, double %3102)
  %3109 = insertelement <2 x double> poison, double %3108, i64 0
  %3110 = shufflevector <2 x double> %3109, <2 x double> poison, <2 x i32> zeroinitializer
  %3111 = fsub <2 x double> %3044, %3110
  %3112 = tail call double @llvm.fmuladd.f64(double %3063, double %3099, double %3100)
  %3113 = tail call double @llvm.fmuladd.f64(double %3112, double %3063, double %3101)
  %3114 = insertelement <2 x double> poison, double %3073, i64 0
  %3115 = shufflevector <2 x double> %3114, <2 x double> %3076, <2 x i32> <i32 0, i32 2>
  %3116 = extractelement <2 x double> %3076, i64 0
  %3117 = fmul double %3116, %3113
  %3118 = insertelement <2 x double> poison, double %3117, i64 0
  %3119 = shufflevector <2 x double> %3118, <2 x double> poison, <2 x i32> zeroinitializer
  %3120 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %3119, <2 x double> %3076, <2 x double> %3047)
  %3121 = shufflevector <2 x double> %3076, <2 x double> poison, <2 x i32> <i32 1, i32 poison>
  %3122 = insertelement <2 x double> %3121, double %3073, i64 1
  %3123 = insertelement <2 x double> poison, double %3113, i64 0
  %3124 = shufflevector <2 x double> %3123, <2 x double> poison, <2 x i32> zeroinitializer
  %3125 = fmul <2 x double> %3122, %3124
  %3126 = shufflevector <2 x double> %3125, <2 x double> poison, <2 x i32> <i32 1, i32 poison>
  %3127 = shufflevector <2 x double> %3125, <2 x double> poison, <2 x i32> <i32 1, i32 1>
  %3128 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %3127, <2 x double> %3115, <2 x double> %3048)
  %3129 = insertelement <2 x double> %3126, double %3117, i64 1
  %3130 = fadd <2 x double> %3046, %3129
  %3131 = load <2 x double>, ptr %3067, align 8, !tbaa !19
  %3132 = fsub <2 x double> %3131, %3129
  store <2 x double> %3132, ptr %3067, align 8, !tbaa !19
  %3133 = shufflevector <2 x double> %3076, <2 x double> poison, <2 x i32> <i32 1, i32 1>
  %3134 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %3125, <2 x double> %3133, <2 x double> %3045)
  %3135 = extractelement <2 x double> %3125, i64 0
  %3136 = fadd double %3043, %3135
  %3137 = getelementptr inbounds %class.Vector, ptr %953, i64 %3056, i32 2
  %3138 = load double, ptr %3137, align 8, !tbaa !112
  %3139 = fsub double %3138, %3135
  store double %3139, ptr %3137, align 8, !tbaa !112
  %3140 = add nuw nsw i64 %3042, 1
  %3141 = icmp eq i64 %3140, %3038
  br i1 %3141, label %3142, label %3041

3142:                                             ; preds = %3041, %3025
  %3143 = phi double [ %3026, %3025 ], [ %3136, %3041 ]
  %3144 = phi <2 x double> [ %3027, %3025 ], [ %3128, %3041 ]
  %3145 = phi <2 x double> [ %3028, %3025 ], [ %3120, %3041 ]
  %3146 = phi <2 x double> [ %3029, %3025 ], [ %3111, %3041 ]
  %3147 = phi <2 x double> [ %3030, %3025 ], [ %3134, %3041 ]
  %3148 = phi <2 x double> [ %3031, %3025 ], [ %3130, %3041 ]
  %3149 = load double, ptr @_ZN20ComputeNonbondedUtil7cutoff2E, align 8, !tbaa !19
  %3150 = tail call noundef i32 @_Z22pairlist_from_pairlistddddPK8CompAtomPKtiPtdPd(double noundef %3149, double noundef %2934, double noundef %2935, double noundef %1024, ptr noundef %70, ptr noundef %2907, i32 noundef %2908, ptr noundef %123, double noundef %32, ptr noundef %169)
  %3151 = add nsw i32 %3034, %3150
  %3152 = icmp sgt i32 %3150, 0
  br i1 %3152, label %3153, label %3256

3153:                                             ; preds = %3142
  %3154 = load ptr, ptr @_ZN20ComputeNonbondedUtil8r2_tableE, align 8, !tbaa !23
  %3155 = zext i32 %3150 to i64
  br label %3156

3156:                                             ; preds = %3153, %3156
  %3157 = phi i64 [ 0, %3153 ], [ %3254, %3156 ]
  %3158 = phi double [ %3143, %3153 ], [ %3250, %3156 ]
  %3159 = phi <2 x double> [ %3144, %3153 ], [ %3242, %3156 ]
  %3160 = phi <2 x double> [ %3145, %3153 ], [ %3235, %3156 ]
  %3161 = phi <2 x double> [ %3146, %3153 ], [ %3226, %3156 ]
  %3162 = phi <2 x double> [ %3147, %3153 ], [ %3248, %3156 ]
  %3163 = phi <2 x double> [ %3148, %3153 ], [ %3244, %3156 ]
  %3164 = shl nuw nsw i64 %3157, 1
  %3165 = getelementptr inbounds i32, ptr %170, i64 %3164
  %3166 = load i32, ptr %3165, align 4, !tbaa !5
  %3167 = ashr i32 %3166, 14
  %3168 = add nsw i32 %3167, %35
  %3169 = getelementptr inbounds i16, ptr %123, i64 %3157
  %3170 = load i16, ptr %3169, align 2, !tbaa !44
  %3171 = zext i16 %3170 to i64
  %3172 = getelementptr inbounds %struct.CompAtom, ptr %70, i64 %3171
  %3173 = getelementptr inbounds double, ptr %169, i64 %3157
  %3174 = load double, ptr %3173, align 8, !tbaa !19
  %3175 = sext i32 %3168 to i64
  %3176 = getelementptr inbounds double, ptr %3154, i64 %3175
  %3177 = load double, ptr %3176, align 8, !tbaa !19
  %3178 = fsub double %3174, %3177
  %3179 = shl nsw i32 %3168, 4
  %3180 = sext i32 %3179 to i64
  %3181 = getelementptr inbounds double, ptr %27, i64 %3180
  %3182 = getelementptr inbounds %class.Vector, ptr %953, i64 %3171
  %3183 = getelementptr inbounds %struct.CompAtom, ptr %70, i64 %3171, i32 1
  %3184 = load float, ptr %3183, align 8, !tbaa !104
  %3185 = fpext float %3184 to double
  %3186 = fmul double %2932, %3185
  %3187 = load <2 x double>, ptr %3172, align 8, !tbaa !19
  %3188 = fsub <2 x double> %1021, %3187
  %3189 = getelementptr inbounds %class.Vector, ptr %3172, i64 0, i32 2
  %3190 = load double, ptr %3189, align 8, !tbaa !49
  %3191 = fsub double %1024, %3190
  %3192 = shl nsw i32 %3168, 2
  %3193 = sext i32 %3192 to i64
  %3194 = getelementptr inbounds double, ptr %28, i64 %3193
  %3195 = getelementptr inbounds double, ptr %3181, i64 12
  %3196 = load double, ptr %3195, align 8, !tbaa !19
  %3197 = getelementptr inbounds double, ptr %3181, i64 13
  %3198 = load double, ptr %3197, align 8, !tbaa !19
  %3199 = getelementptr inbounds double, ptr %3181, i64 14
  %3200 = load double, ptr %3199, align 8, !tbaa !19
  %3201 = getelementptr inbounds double, ptr %3181, i64 15
  %3202 = load double, ptr %3201, align 8, !tbaa !19
  %3203 = load double, ptr %3194, align 8, !tbaa !19
  %3204 = fadd double %3202, %3203
  %3205 = getelementptr inbounds double, ptr %3194, i64 1
  %3206 = load double, ptr %3205, align 8, !tbaa !19
  %3207 = tail call double @llvm.fmuladd.f64(double %3206, double 2.000000e+00, double %3200)
  %3208 = getelementptr inbounds double, ptr %3194, i64 2
  %3209 = load double, ptr %3208, align 8, !tbaa !19
  %3210 = tail call double @llvm.fmuladd.f64(double %3209, double 4.000000e+00, double %3198)
  %3211 = getelementptr inbounds double, ptr %3194, i64 3
  %3212 = load double, ptr %3211, align 8, !tbaa !19
  %3213 = tail call double @llvm.fmuladd.f64(double %3212, double 6.000000e+00, double %3196)
  %3214 = fmul double %3186, %3213
  %3215 = fmul double %3186, %3210
  %3216 = fmul double %3186, %3207
  %3217 = fmul double %3186, %3204
  %3218 = fmul double %3178, %3214
  %3219 = fmul double %3215, 2.500000e-01
  %3220 = tail call double @llvm.fmuladd.f64(double %3218, double 0x3FC5555555555555, double %3219)
  %3221 = fmul double %3216, 5.000000e-01
  %3222 = tail call double @llvm.fmuladd.f64(double %3220, double %3178, double %3221)
  %3223 = tail call double @llvm.fmuladd.f64(double %3222, double %3178, double %3217)
  %3224 = insertelement <2 x double> poison, double %3223, i64 0
  %3225 = shufflevector <2 x double> %3224, <2 x double> poison, <2 x i32> zeroinitializer
  %3226 = fsub <2 x double> %3161, %3225
  %3227 = tail call double @llvm.fmuladd.f64(double %3178, double %3214, double %3215)
  %3228 = tail call double @llvm.fmuladd.f64(double %3227, double %3178, double %3216)
  %3229 = extractelement <2 x double> %3188, i64 1
  %3230 = fmul double %3229, %3228
  %3231 = insertelement <2 x double> poison, double %3230, i64 0
  %3232 = shufflevector <2 x double> %3231, <2 x double> poison, <2 x i32> zeroinitializer
  %3233 = shufflevector <2 x double> %3188, <2 x double> poison, <2 x i32> <i32 1, i32 0>
  %3234 = insertelement <2 x double> %3233, double %3191, i64 1
  %3235 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %3232, <2 x double> %3234, <2 x double> %3160)
  %3236 = insertelement <2 x double> %3233, double %3191, i64 0
  %3237 = insertelement <2 x double> poison, double %3228, i64 0
  %3238 = shufflevector <2 x double> %3237, <2 x double> poison, <2 x i32> zeroinitializer
  %3239 = fmul <2 x double> %3236, %3238
  %3240 = shufflevector <2 x double> %3239, <2 x double> poison, <2 x i32> <i32 1, i32 poison>
  %3241 = shufflevector <2 x double> %3239, <2 x double> poison, <2 x i32> <i32 1, i32 1>
  %3242 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %3241, <2 x double> %3188, <2 x double> %3159)
  %3243 = insertelement <2 x double> %3240, double %3230, i64 1
  %3244 = fadd <2 x double> %3163, %3243
  %3245 = load <2 x double>, ptr %3182, align 8, !tbaa !19
  %3246 = fsub <2 x double> %3245, %3243
  store <2 x double> %3246, ptr %3182, align 8, !tbaa !19
  %3247 = shufflevector <2 x double> %3236, <2 x double> poison, <2 x i32> zeroinitializer
  %3248 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %3239, <2 x double> %3247, <2 x double> %3162)
  %3249 = extractelement <2 x double> %3239, i64 0
  %3250 = fadd double %3158, %3249
  %3251 = getelementptr inbounds %class.Vector, ptr %953, i64 %3171, i32 2
  %3252 = load double, ptr %3251, align 8, !tbaa !112
  %3253 = fsub double %3252, %3249
  store double %3253, ptr %3251, align 8, !tbaa !112
  %3254 = add nuw nsw i64 %3157, 1
  %3255 = icmp eq i64 %3254, %3155
  br i1 %3255, label %3256, label %3156

3256:                                             ; preds = %3156, %3142
  %3257 = phi double [ %3143, %3142 ], [ %3250, %3156 ]
  %3258 = phi <2 x double> [ %3144, %3142 ], [ %3242, %3156 ]
  %3259 = phi <2 x double> [ %3145, %3142 ], [ %3235, %3156 ]
  %3260 = phi <2 x double> [ %3146, %3142 ], [ %3226, %3156 ]
  %3261 = phi <2 x double> [ %3147, %3142 ], [ %3248, %3156 ]
  %3262 = phi <2 x double> [ %3148, %3142 ], [ %3244, %3156 ]
  %3263 = load double, ptr @_ZN20ComputeNonbondedUtil7cutoff2E, align 8, !tbaa !19
  %3264 = tail call noundef i32 @_Z22pairlist_from_pairlistddddPK8CompAtomPKtiPtdPd(double noundef %3263, double noundef %2934, double noundef %2935, double noundef %1024, ptr noundef %70, ptr noundef %2911, i32 noundef %2912, ptr noundef %123, double noundef %32, ptr noundef %169)
  %3265 = icmp sgt i32 %3264, 0
  br i1 %3265, label %3266, label %3356

3266:                                             ; preds = %3256
  %3267 = load ptr, ptr @_ZN20ComputeNonbondedUtil8r2_tableE, align 8, !tbaa !23
  %3268 = zext i32 %3264 to i64
  br label %3269

3269:                                             ; preds = %3266, %3269
  %3270 = phi i64 [ 0, %3266 ], [ %3354, %3269 ]
  %3271 = phi double [ %3257, %3266 ], [ %3350, %3269 ]
  %3272 = phi <2 x double> [ %3258, %3266 ], [ %3342, %3269 ]
  %3273 = phi <2 x double> [ %3259, %3266 ], [ %3335, %3269 ]
  %3274 = phi <2 x double> [ %3260, %3266 ], [ %3325, %3269 ]
  %3275 = phi <2 x double> [ %3261, %3266 ], [ %3348, %3269 ]
  %3276 = phi <2 x double> [ %3262, %3266 ], [ %3344, %3269 ]
  %3277 = shl nuw nsw i64 %3270, 1
  %3278 = getelementptr inbounds i32, ptr %170, i64 %3277
  %3279 = load i32, ptr %3278, align 4, !tbaa !5
  %3280 = ashr i32 %3279, 14
  %3281 = add nsw i32 %3280, %35
  %3282 = getelementptr inbounds i16, ptr %123, i64 %3270
  %3283 = load i16, ptr %3282, align 2, !tbaa !44
  %3284 = zext i16 %3283 to i64
  %3285 = getelementptr inbounds %struct.CompAtom, ptr %70, i64 %3284
  %3286 = getelementptr inbounds double, ptr %169, i64 %3270
  %3287 = load double, ptr %3286, align 8, !tbaa !19
  %3288 = sext i32 %3281 to i64
  %3289 = getelementptr inbounds double, ptr %3267, i64 %3288
  %3290 = load double, ptr %3289, align 8, !tbaa !19
  %3291 = fsub double %3287, %3290
  %3292 = shl nsw i32 %3281, 4
  %3293 = sext i32 %3292 to i64
  %3294 = getelementptr inbounds double, ptr %27, i64 %3293
  %3295 = getelementptr inbounds %class.Vector, ptr %953, i64 %3284
  %3296 = getelementptr inbounds %struct.CompAtom, ptr %70, i64 %3284, i32 1
  %3297 = load float, ptr %3296, align 8, !tbaa !104
  %3298 = fpext float %3297 to double
  %3299 = fmul double %2932, %3298
  %3300 = load <2 x double>, ptr %3285, align 8, !tbaa !19
  %3301 = fsub <2 x double> %1021, %3300
  %3302 = getelementptr inbounds %class.Vector, ptr %3285, i64 0, i32 2
  %3303 = load double, ptr %3302, align 8, !tbaa !49
  %3304 = fsub double %1024, %3303
  %3305 = getelementptr inbounds double, ptr %3294, i64 12
  %3306 = load double, ptr %3305, align 8, !tbaa !19
  %3307 = getelementptr inbounds double, ptr %3294, i64 13
  %3308 = load double, ptr %3307, align 8, !tbaa !19
  %3309 = getelementptr inbounds double, ptr %3294, i64 14
  %3310 = load double, ptr %3309, align 8, !tbaa !19
  %3311 = getelementptr inbounds double, ptr %3294, i64 15
  %3312 = load double, ptr %3311, align 8, !tbaa !19
  %3313 = fmul double %3299, %3306
  %3314 = fmul double %3299, %3308
  %3315 = fmul double %3299, %3310
  %3316 = fmul double %3299, %3312
  %3317 = fmul double %3291, %3313
  %3318 = fmul double %3314, 2.500000e-01
  %3319 = tail call double @llvm.fmuladd.f64(double %3317, double 0x3FC5555555555555, double %3318)
  %3320 = fmul double %3315, 5.000000e-01
  %3321 = tail call double @llvm.fmuladd.f64(double %3319, double %3291, double %3320)
  %3322 = tail call double @llvm.fmuladd.f64(double %3321, double %3291, double %3316)
  %3323 = insertelement <2 x double> poison, double %3322, i64 0
  %3324 = shufflevector <2 x double> %3323, <2 x double> poison, <2 x i32> zeroinitializer
  %3325 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %981, <2 x double> %3324, <2 x double> %3274)
  %3326 = tail call double @llvm.fmuladd.f64(double %3291, double %3313, double %3314)
  %3327 = tail call double @llvm.fmuladd.f64(double %3326, double %3291, double %3315)
  %3328 = fmul double %985, %3327
  %3329 = extractelement <2 x double> %3301, i64 1
  %3330 = fmul double %3329, %3328
  %3331 = insertelement <2 x double> poison, double %3330, i64 0
  %3332 = shufflevector <2 x double> %3331, <2 x double> poison, <2 x i32> zeroinitializer
  %3333 = shufflevector <2 x double> %3301, <2 x double> poison, <2 x i32> <i32 1, i32 0>
  %3334 = insertelement <2 x double> %3333, double %3304, i64 1
  %3335 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %3332, <2 x double> %3334, <2 x double> %3273)
  %3336 = insertelement <2 x double> %3333, double %3304, i64 0
  %3337 = insertelement <2 x double> poison, double %3328, i64 0
  %3338 = shufflevector <2 x double> %3337, <2 x double> poison, <2 x i32> zeroinitializer
  %3339 = fmul <2 x double> %3336, %3338
  %3340 = shufflevector <2 x double> %3339, <2 x double> poison, <2 x i32> <i32 1, i32 poison>
  %3341 = shufflevector <2 x double> %3339, <2 x double> poison, <2 x i32> <i32 1, i32 1>
  %3342 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %3341, <2 x double> %3301, <2 x double> %3272)
  %3343 = insertelement <2 x double> %3340, double %3330, i64 1
  %3344 = fadd <2 x double> %3276, %3343
  %3345 = load <2 x double>, ptr %3295, align 8, !tbaa !19
  %3346 = fsub <2 x double> %3345, %3343
  store <2 x double> %3346, ptr %3295, align 8, !tbaa !19
  %3347 = shufflevector <2 x double> %3336, <2 x double> poison, <2 x i32> zeroinitializer
  %3348 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %3339, <2 x double> %3347, <2 x double> %3275)
  %3349 = extractelement <2 x double> %3339, i64 0
  %3350 = fadd double %3271, %3349
  %3351 = getelementptr inbounds %class.Vector, ptr %953, i64 %3284, i32 2
  %3352 = load double, ptr %3351, align 8, !tbaa !112
  %3353 = fsub double %3352, %3349
  store double %3353, ptr %3351, align 8, !tbaa !112
  %3354 = add nuw nsw i64 %3270, 1
  %3355 = icmp eq i64 %3354, %3268
  br i1 %3355, label %3356, label %3269

3356:                                             ; preds = %3269, %3256
  %3357 = phi double [ %3257, %3256 ], [ %3350, %3269 ]
  %3358 = phi <2 x double> [ %3258, %3256 ], [ %3342, %3269 ]
  %3359 = phi <2 x double> [ %3259, %3256 ], [ %3335, %3269 ]
  %3360 = phi <2 x double> [ %3260, %3256 ], [ %3325, %3269 ]
  %3361 = phi <2 x double> [ %3261, %3256 ], [ %3348, %3269 ]
  %3362 = phi <2 x double> [ %3262, %3256 ], [ %3344, %3269 ]
  %3363 = load double, ptr @_ZN20ComputeNonbondedUtil7cutoff2E, align 8, !tbaa !19
  %3364 = tail call noundef i32 @_Z22pairlist_from_pairlistddddPK8CompAtomPKtiPtdPd(double noundef %3363, double noundef %2934, double noundef %2935, double noundef %1024, ptr noundef %70, ptr noundef %2917, i32 noundef %2918, ptr noundef %123, double noundef %32, ptr noundef %169)
  %3365 = icmp sgt i32 %3364, 0
  br i1 %3365, label %3366, label %3456

3366:                                             ; preds = %3356
  %3367 = load ptr, ptr @_ZN20ComputeNonbondedUtil8r2_tableE, align 8, !tbaa !23
  %3368 = zext i32 %3364 to i64
  br label %3369

3369:                                             ; preds = %3366, %3369
  %3370 = phi i64 [ 0, %3366 ], [ %3454, %3369 ]
  %3371 = phi double [ %3357, %3366 ], [ %3450, %3369 ]
  %3372 = phi <2 x double> [ %3358, %3366 ], [ %3442, %3369 ]
  %3373 = phi <2 x double> [ %3359, %3366 ], [ %3435, %3369 ]
  %3374 = phi <2 x double> [ %3360, %3366 ], [ %3425, %3369 ]
  %3375 = phi <2 x double> [ %3361, %3366 ], [ %3448, %3369 ]
  %3376 = phi <2 x double> [ %3362, %3366 ], [ %3444, %3369 ]
  %3377 = shl nuw nsw i64 %3370, 1
  %3378 = getelementptr inbounds i32, ptr %170, i64 %3377
  %3379 = load i32, ptr %3378, align 4, !tbaa !5
  %3380 = ashr i32 %3379, 14
  %3381 = add nsw i32 %3380, %35
  %3382 = getelementptr inbounds i16, ptr %123, i64 %3370
  %3383 = load i16, ptr %3382, align 2, !tbaa !44
  %3384 = zext i16 %3383 to i64
  %3385 = getelementptr inbounds %struct.CompAtom, ptr %70, i64 %3384
  %3386 = getelementptr inbounds double, ptr %169, i64 %3370
  %3387 = load double, ptr %3386, align 8, !tbaa !19
  %3388 = sext i32 %3381 to i64
  %3389 = getelementptr inbounds double, ptr %3367, i64 %3388
  %3390 = load double, ptr %3389, align 8, !tbaa !19
  %3391 = fsub double %3387, %3390
  %3392 = shl nsw i32 %3381, 4
  %3393 = sext i32 %3392 to i64
  %3394 = getelementptr inbounds double, ptr %27, i64 %3393
  %3395 = getelementptr inbounds %class.Vector, ptr %953, i64 %3384
  %3396 = getelementptr inbounds %struct.CompAtom, ptr %70, i64 %3384, i32 1
  %3397 = load float, ptr %3396, align 8, !tbaa !104
  %3398 = fpext float %3397 to double
  %3399 = fmul double %2932, %3398
  %3400 = load <2 x double>, ptr %3385, align 8, !tbaa !19
  %3401 = fsub <2 x double> %1021, %3400
  %3402 = getelementptr inbounds %class.Vector, ptr %3385, i64 0, i32 2
  %3403 = load double, ptr %3402, align 8, !tbaa !49
  %3404 = fsub double %1024, %3403
  %3405 = getelementptr inbounds double, ptr %3394, i64 12
  %3406 = load double, ptr %3405, align 8, !tbaa !19
  %3407 = getelementptr inbounds double, ptr %3394, i64 13
  %3408 = load double, ptr %3407, align 8, !tbaa !19
  %3409 = getelementptr inbounds double, ptr %3394, i64 14
  %3410 = load double, ptr %3409, align 8, !tbaa !19
  %3411 = getelementptr inbounds double, ptr %3394, i64 15
  %3412 = load double, ptr %3411, align 8, !tbaa !19
  %3413 = fmul double %3399, %3406
  %3414 = fmul double %3399, %3408
  %3415 = fmul double %3399, %3410
  %3416 = fmul double %3399, %3412
  %3417 = fmul double %3391, %3413
  %3418 = fmul double %3414, 2.500000e-01
  %3419 = tail call double @llvm.fmuladd.f64(double %3417, double 0x3FC5555555555555, double %3418)
  %3420 = fmul double %3415, 5.000000e-01
  %3421 = tail call double @llvm.fmuladd.f64(double %3419, double %3391, double %3420)
  %3422 = tail call double @llvm.fmuladd.f64(double %3421, double %3391, double %3416)
  %3423 = insertelement <2 x double> poison, double %3422, i64 0
  %3424 = shufflevector <2 x double> %3423, <2 x double> poison, <2 x i32> zeroinitializer
  %3425 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %982, <2 x double> %3424, <2 x double> %3374)
  %3426 = tail call double @llvm.fmuladd.f64(double %3391, double %3413, double %3414)
  %3427 = tail call double @llvm.fmuladd.f64(double %3426, double %3391, double %3415)
  %3428 = fmul double %986, %3427
  %3429 = extractelement <2 x double> %3401, i64 1
  %3430 = fmul double %3429, %3428
  %3431 = insertelement <2 x double> poison, double %3430, i64 0
  %3432 = shufflevector <2 x double> %3431, <2 x double> poison, <2 x i32> zeroinitializer
  %3433 = shufflevector <2 x double> %3401, <2 x double> poison, <2 x i32> <i32 1, i32 0>
  %3434 = insertelement <2 x double> %3433, double %3404, i64 1
  %3435 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %3432, <2 x double> %3434, <2 x double> %3373)
  %3436 = insertelement <2 x double> %3433, double %3404, i64 0
  %3437 = insertelement <2 x double> poison, double %3428, i64 0
  %3438 = shufflevector <2 x double> %3437, <2 x double> poison, <2 x i32> zeroinitializer
  %3439 = fmul <2 x double> %3436, %3438
  %3440 = shufflevector <2 x double> %3439, <2 x double> poison, <2 x i32> <i32 1, i32 poison>
  %3441 = shufflevector <2 x double> %3439, <2 x double> poison, <2 x i32> <i32 1, i32 1>
  %3442 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %3441, <2 x double> %3401, <2 x double> %3372)
  %3443 = insertelement <2 x double> %3440, double %3430, i64 1
  %3444 = fadd <2 x double> %3376, %3443
  %3445 = load <2 x double>, ptr %3395, align 8, !tbaa !19
  %3446 = fsub <2 x double> %3445, %3443
  store <2 x double> %3446, ptr %3395, align 8, !tbaa !19
  %3447 = shufflevector <2 x double> %3436, <2 x double> poison, <2 x i32> zeroinitializer
  %3448 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %3439, <2 x double> %3447, <2 x double> %3375)
  %3449 = extractelement <2 x double> %3439, i64 0
  %3450 = fadd double %3371, %3449
  %3451 = getelementptr inbounds %class.Vector, ptr %953, i64 %3384, i32 2
  %3452 = load double, ptr %3451, align 8, !tbaa !112
  %3453 = fsub double %3452, %3449
  store double %3453, ptr %3451, align 8, !tbaa !112
  %3454 = add nuw nsw i64 %3370, 1
  %3455 = icmp eq i64 %3454, %3368
  br i1 %3455, label %3456, label %3369

3456:                                             ; preds = %3369, %3356
  %3457 = phi double [ %3357, %3356 ], [ %3450, %3369 ]
  %3458 = phi <2 x double> [ %3358, %3356 ], [ %3442, %3369 ]
  %3459 = phi <2 x double> [ %3359, %3356 ], [ %3435, %3369 ]
  %3460 = phi <2 x double> [ %3360, %3356 ], [ %3425, %3369 ]
  %3461 = phi <2 x double> [ %3361, %3356 ], [ %3448, %3369 ]
  %3462 = phi <2 x double> [ %3362, %3356 ], [ %3444, %3369 ]
  %3463 = load double, ptr @_ZN20ComputeNonbondedUtil7cutoff2E, align 8, !tbaa !19
  %3464 = tail call noundef i32 @_Z22pairlist_from_pairlistddddPK8CompAtomPKtiPtdPd(double noundef %3463, double noundef %2934, double noundef %2935, double noundef %1024, ptr noundef %70, ptr noundef %2915, i32 noundef %2916, ptr noundef %123, double noundef %32, ptr noundef %169)
  %3465 = add nsw i32 %3151, %3464
  %3466 = icmp sgt i32 %3464, 0
  br i1 %3466, label %3467, label %3571

3467:                                             ; preds = %3456
  %3468 = load ptr, ptr @_ZN20ComputeNonbondedUtil8r2_tableE, align 8, !tbaa !23
  %3469 = zext i32 %3464 to i64
  br label %3470

3470:                                             ; preds = %3467, %3470
  %3471 = phi i64 [ 0, %3467 ], [ %3569, %3470 ]
  %3472 = phi double [ %3457, %3467 ], [ %3565, %3470 ]
  %3473 = phi <2 x double> [ %3458, %3467 ], [ %3557, %3470 ]
  %3474 = phi <2 x double> [ %3459, %3467 ], [ %3550, %3470 ]
  %3475 = phi <2 x double> [ %3460, %3467 ], [ %3540, %3470 ]
  %3476 = phi <2 x double> [ %3461, %3467 ], [ %3563, %3470 ]
  %3477 = phi <2 x double> [ %3462, %3467 ], [ %3559, %3470 ]
  %3478 = shl nuw nsw i64 %3471, 1
  %3479 = getelementptr inbounds i32, ptr %170, i64 %3478
  %3480 = load i32, ptr %3479, align 4, !tbaa !5
  %3481 = ashr i32 %3480, 14
  %3482 = add nsw i32 %3481, %35
  %3483 = getelementptr inbounds i16, ptr %123, i64 %3471
  %3484 = load i16, ptr %3483, align 2, !tbaa !44
  %3485 = zext i16 %3484 to i64
  %3486 = getelementptr inbounds %struct.CompAtom, ptr %70, i64 %3485
  %3487 = getelementptr inbounds double, ptr %169, i64 %3471
  %3488 = load double, ptr %3487, align 8, !tbaa !19
  %3489 = sext i32 %3482 to i64
  %3490 = getelementptr inbounds double, ptr %3468, i64 %3489
  %3491 = load double, ptr %3490, align 8, !tbaa !19
  %3492 = fsub double %3488, %3491
  %3493 = shl nsw i32 %3482, 4
  %3494 = sext i32 %3493 to i64
  %3495 = getelementptr inbounds double, ptr %27, i64 %3494
  %3496 = getelementptr inbounds %class.Vector, ptr %953, i64 %3485
  %3497 = getelementptr inbounds %struct.CompAtom, ptr %70, i64 %3485, i32 1
  %3498 = load float, ptr %3497, align 8, !tbaa !104
  %3499 = fpext float %3498 to double
  %3500 = fmul double %2932, %3499
  %3501 = load <2 x double>, ptr %3486, align 8, !tbaa !19
  %3502 = fsub <2 x double> %1021, %3501
  %3503 = getelementptr inbounds %class.Vector, ptr %3486, i64 0, i32 2
  %3504 = load double, ptr %3503, align 8, !tbaa !49
  %3505 = fsub double %1024, %3504
  %3506 = shl nsw i32 %3482, 2
  %3507 = sext i32 %3506 to i64
  %3508 = getelementptr inbounds double, ptr %28, i64 %3507
  %3509 = getelementptr inbounds double, ptr %3495, i64 12
  %3510 = load double, ptr %3509, align 8, !tbaa !19
  %3511 = getelementptr inbounds double, ptr %3495, i64 13
  %3512 = load double, ptr %3511, align 8, !tbaa !19
  %3513 = getelementptr inbounds double, ptr %3495, i64 14
  %3514 = load double, ptr %3513, align 8, !tbaa !19
  %3515 = getelementptr inbounds double, ptr %3495, i64 15
  %3516 = load double, ptr %3515, align 8, !tbaa !19
  %3517 = load double, ptr %3508, align 8, !tbaa !19
  %3518 = tail call double @llvm.fmuladd.f64(double %31, double %3517, double %3516)
  %3519 = getelementptr inbounds double, ptr %3508, i64 1
  %3520 = load double, ptr %3519, align 8, !tbaa !19
  %3521 = tail call double @llvm.fmuladd.f64(double %978, double %3520, double %3514)
  %3522 = getelementptr inbounds double, ptr %3508, i64 2
  %3523 = load double, ptr %3522, align 8, !tbaa !19
  %3524 = tail call double @llvm.fmuladd.f64(double %979, double %3523, double %3512)
  %3525 = getelementptr inbounds double, ptr %3508, i64 3
  %3526 = load double, ptr %3525, align 8, !tbaa !19
  %3527 = tail call double @llvm.fmuladd.f64(double %980, double %3526, double %3510)
  %3528 = fmul double %3500, %3527
  %3529 = fmul double %3500, %3524
  %3530 = fmul double %3500, %3521
  %3531 = fmul double %3500, %3518
  %3532 = fmul double %3492, %3528
  %3533 = fmul double %3529, 2.500000e-01
  %3534 = tail call double @llvm.fmuladd.f64(double %3532, double 0x3FC5555555555555, double %3533)
  %3535 = fmul double %3530, 5.000000e-01
  %3536 = tail call double @llvm.fmuladd.f64(double %3534, double %3492, double %3535)
  %3537 = tail call double @llvm.fmuladd.f64(double %3536, double %3492, double %3531)
  %3538 = insertelement <2 x double> poison, double %3537, i64 0
  %3539 = shufflevector <2 x double> %3538, <2 x double> poison, <2 x i32> zeroinitializer
  %3540 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %981, <2 x double> %3539, <2 x double> %3475)
  %3541 = tail call double @llvm.fmuladd.f64(double %3492, double %3528, double %3529)
  %3542 = tail call double @llvm.fmuladd.f64(double %3541, double %3492, double %3530)
  %3543 = fmul double %987, %3542
  %3544 = extractelement <2 x double> %3502, i64 1
  %3545 = fmul double %3544, %3543
  %3546 = insertelement <2 x double> poison, double %3545, i64 0
  %3547 = shufflevector <2 x double> %3546, <2 x double> poison, <2 x i32> zeroinitializer
  %3548 = shufflevector <2 x double> %3502, <2 x double> poison, <2 x i32> <i32 1, i32 0>
  %3549 = insertelement <2 x double> %3548, double %3505, i64 1
  %3550 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %3547, <2 x double> %3549, <2 x double> %3474)
  %3551 = insertelement <2 x double> %3548, double %3505, i64 0
  %3552 = insertelement <2 x double> poison, double %3543, i64 0
  %3553 = shufflevector <2 x double> %3552, <2 x double> poison, <2 x i32> zeroinitializer
  %3554 = fmul <2 x double> %3551, %3553
  %3555 = shufflevector <2 x double> %3554, <2 x double> poison, <2 x i32> <i32 1, i32 poison>
  %3556 = shufflevector <2 x double> %3554, <2 x double> poison, <2 x i32> <i32 1, i32 1>
  %3557 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %3556, <2 x double> %3502, <2 x double> %3473)
  %3558 = insertelement <2 x double> %3555, double %3545, i64 1
  %3559 = fadd <2 x double> %3477, %3558
  %3560 = load <2 x double>, ptr %3496, align 8, !tbaa !19
  %3561 = fsub <2 x double> %3560, %3558
  store <2 x double> %3561, ptr %3496, align 8, !tbaa !19
  %3562 = shufflevector <2 x double> %3551, <2 x double> poison, <2 x i32> zeroinitializer
  %3563 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %3554, <2 x double> %3562, <2 x double> %3476)
  %3564 = extractelement <2 x double> %3554, i64 0
  %3565 = fadd double %3472, %3564
  %3566 = getelementptr inbounds %class.Vector, ptr %953, i64 %3485, i32 2
  %3567 = load double, ptr %3566, align 8, !tbaa !112
  %3568 = fsub double %3567, %3564
  store double %3568, ptr %3566, align 8, !tbaa !112
  %3569 = add nuw nsw i64 %3471, 1
  %3570 = icmp eq i64 %3569, %3469
  br i1 %3570, label %3571, label %3470

3571:                                             ; preds = %3470, %3456
  %3572 = phi double [ %3457, %3456 ], [ %3565, %3470 ]
  %3573 = phi <2 x double> [ %3458, %3456 ], [ %3557, %3470 ]
  %3574 = phi <2 x double> [ %3459, %3456 ], [ %3550, %3470 ]
  %3575 = phi <2 x double> [ %3460, %3456 ], [ %3540, %3470 ]
  %3576 = phi <2 x double> [ %3461, %3456 ], [ %3563, %3470 ]
  %3577 = phi <2 x double> [ %3462, %3456 ], [ %3559, %3470 ]
  %3578 = load double, ptr @_ZN20ComputeNonbondedUtil7cutoff2E, align 8, !tbaa !19
  %3579 = tail call noundef i32 @_Z22pairlist_from_pairlistddddPK8CompAtomPKtiPtdPd(double noundef %3578, double noundef %2934, double noundef %2935, double noundef %1024, ptr noundef %70, ptr noundef %2921, i32 noundef %2922, ptr noundef %123, double noundef %32, ptr noundef %169)
  %3580 = add nsw i32 %3465, %3579
  %3581 = icmp sgt i32 %3579, 0
  br i1 %3581, label %3582, label %3686

3582:                                             ; preds = %3571
  %3583 = load ptr, ptr @_ZN20ComputeNonbondedUtil8r2_tableE, align 8, !tbaa !23
  %3584 = zext i32 %3579 to i64
  br label %3585

3585:                                             ; preds = %3582, %3585
  %3586 = phi i64 [ 0, %3582 ], [ %3684, %3585 ]
  %3587 = phi double [ %3572, %3582 ], [ %3680, %3585 ]
  %3588 = phi <2 x double> [ %3573, %3582 ], [ %3672, %3585 ]
  %3589 = phi <2 x double> [ %3574, %3582 ], [ %3665, %3585 ]
  %3590 = phi <2 x double> [ %3575, %3582 ], [ %3655, %3585 ]
  %3591 = phi <2 x double> [ %3576, %3582 ], [ %3678, %3585 ]
  %3592 = phi <2 x double> [ %3577, %3582 ], [ %3674, %3585 ]
  %3593 = shl nuw nsw i64 %3586, 1
  %3594 = getelementptr inbounds i32, ptr %170, i64 %3593
  %3595 = load i32, ptr %3594, align 4, !tbaa !5
  %3596 = ashr i32 %3595, 14
  %3597 = add nsw i32 %3596, %35
  %3598 = getelementptr inbounds i16, ptr %123, i64 %3586
  %3599 = load i16, ptr %3598, align 2, !tbaa !44
  %3600 = zext i16 %3599 to i64
  %3601 = getelementptr inbounds %struct.CompAtom, ptr %70, i64 %3600
  %3602 = getelementptr inbounds double, ptr %169, i64 %3586
  %3603 = load double, ptr %3602, align 8, !tbaa !19
  %3604 = sext i32 %3597 to i64
  %3605 = getelementptr inbounds double, ptr %3583, i64 %3604
  %3606 = load double, ptr %3605, align 8, !tbaa !19
  %3607 = fsub double %3603, %3606
  %3608 = shl nsw i32 %3597, 4
  %3609 = sext i32 %3608 to i64
  %3610 = getelementptr inbounds double, ptr %27, i64 %3609
  %3611 = getelementptr inbounds %class.Vector, ptr %953, i64 %3600
  %3612 = getelementptr inbounds %struct.CompAtom, ptr %70, i64 %3600, i32 1
  %3613 = load float, ptr %3612, align 8, !tbaa !104
  %3614 = fpext float %3613 to double
  %3615 = fmul double %2932, %3614
  %3616 = load <2 x double>, ptr %3601, align 8, !tbaa !19
  %3617 = fsub <2 x double> %1021, %3616
  %3618 = getelementptr inbounds %class.Vector, ptr %3601, i64 0, i32 2
  %3619 = load double, ptr %3618, align 8, !tbaa !49
  %3620 = fsub double %1024, %3619
  %3621 = shl nsw i32 %3597, 2
  %3622 = sext i32 %3621 to i64
  %3623 = getelementptr inbounds double, ptr %28, i64 %3622
  %3624 = getelementptr inbounds double, ptr %3610, i64 12
  %3625 = load double, ptr %3624, align 8, !tbaa !19
  %3626 = getelementptr inbounds double, ptr %3610, i64 13
  %3627 = load double, ptr %3626, align 8, !tbaa !19
  %3628 = getelementptr inbounds double, ptr %3610, i64 14
  %3629 = load double, ptr %3628, align 8, !tbaa !19
  %3630 = getelementptr inbounds double, ptr %3610, i64 15
  %3631 = load double, ptr %3630, align 8, !tbaa !19
  %3632 = load double, ptr %3623, align 8, !tbaa !19
  %3633 = tail call double @llvm.fmuladd.f64(double %31, double %3632, double %3631)
  %3634 = getelementptr inbounds double, ptr %3623, i64 1
  %3635 = load double, ptr %3634, align 8, !tbaa !19
  %3636 = tail call double @llvm.fmuladd.f64(double %978, double %3635, double %3629)
  %3637 = getelementptr inbounds double, ptr %3623, i64 2
  %3638 = load double, ptr %3637, align 8, !tbaa !19
  %3639 = tail call double @llvm.fmuladd.f64(double %979, double %3638, double %3627)
  %3640 = getelementptr inbounds double, ptr %3623, i64 3
  %3641 = load double, ptr %3640, align 8, !tbaa !19
  %3642 = tail call double @llvm.fmuladd.f64(double %980, double %3641, double %3625)
  %3643 = fmul double %3615, %3642
  %3644 = fmul double %3615, %3639
  %3645 = fmul double %3615, %3636
  %3646 = fmul double %3615, %3633
  %3647 = fmul double %3607, %3643
  %3648 = fmul double %3644, 2.500000e-01
  %3649 = tail call double @llvm.fmuladd.f64(double %3647, double 0x3FC5555555555555, double %3648)
  %3650 = fmul double %3645, 5.000000e-01
  %3651 = tail call double @llvm.fmuladd.f64(double %3649, double %3607, double %3650)
  %3652 = tail call double @llvm.fmuladd.f64(double %3651, double %3607, double %3646)
  %3653 = insertelement <2 x double> poison, double %3652, i64 0
  %3654 = shufflevector <2 x double> %3653, <2 x double> poison, <2 x i32> zeroinitializer
  %3655 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %982, <2 x double> %3654, <2 x double> %3590)
  %3656 = tail call double @llvm.fmuladd.f64(double %3607, double %3643, double %3644)
  %3657 = tail call double @llvm.fmuladd.f64(double %3656, double %3607, double %3645)
  %3658 = fmul double %988, %3657
  %3659 = extractelement <2 x double> %3617, i64 1
  %3660 = fmul double %3659, %3658
  %3661 = insertelement <2 x double> poison, double %3660, i64 0
  %3662 = shufflevector <2 x double> %3661, <2 x double> poison, <2 x i32> zeroinitializer
  %3663 = shufflevector <2 x double> %3617, <2 x double> poison, <2 x i32> <i32 1, i32 0>
  %3664 = insertelement <2 x double> %3663, double %3620, i64 1
  %3665 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %3662, <2 x double> %3664, <2 x double> %3589)
  %3666 = insertelement <2 x double> %3663, double %3620, i64 0
  %3667 = insertelement <2 x double> poison, double %3658, i64 0
  %3668 = shufflevector <2 x double> %3667, <2 x double> poison, <2 x i32> zeroinitializer
  %3669 = fmul <2 x double> %3666, %3668
  %3670 = shufflevector <2 x double> %3669, <2 x double> poison, <2 x i32> <i32 1, i32 poison>
  %3671 = shufflevector <2 x double> %3669, <2 x double> poison, <2 x i32> <i32 1, i32 1>
  %3672 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %3671, <2 x double> %3617, <2 x double> %3588)
  %3673 = insertelement <2 x double> %3670, double %3660, i64 1
  %3674 = fadd <2 x double> %3592, %3673
  %3675 = load <2 x double>, ptr %3611, align 8, !tbaa !19
  %3676 = fsub <2 x double> %3675, %3673
  store <2 x double> %3676, ptr %3611, align 8, !tbaa !19
  %3677 = shufflevector <2 x double> %3666, <2 x double> poison, <2 x i32> zeroinitializer
  %3678 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %3669, <2 x double> %3677, <2 x double> %3591)
  %3679 = extractelement <2 x double> %3669, i64 0
  %3680 = fadd double %3587, %3679
  %3681 = getelementptr inbounds %class.Vector, ptr %953, i64 %3600, i32 2
  %3682 = load double, ptr %3681, align 8, !tbaa !112
  %3683 = fsub double %3682, %3679
  store double %3683, ptr %3681, align 8, !tbaa !112
  %3684 = add nuw nsw i64 %3586, 1
  %3685 = icmp eq i64 %3684, %3584
  br i1 %3685, label %3686, label %3585

3686:                                             ; preds = %3585, %3571
  %3687 = phi double [ %3572, %3571 ], [ %3680, %3585 ]
  %3688 = phi <2 x double> [ %3573, %3571 ], [ %3672, %3585 ]
  %3689 = phi <2 x double> [ %3574, %3571 ], [ %3665, %3585 ]
  %3690 = phi <2 x double> [ %3575, %3571 ], [ %3655, %3585 ]
  %3691 = phi <2 x double> [ %3576, %3571 ], [ %3678, %3585 ]
  %3692 = phi <2 x double> [ %3577, %3571 ], [ %3674, %3585 ]
  %3693 = load double, ptr @_ZN20ComputeNonbondedUtil7cutoff2E, align 8, !tbaa !19
  %3694 = tail call noundef i32 @_Z22pairlist_from_pairlistddddPK8CompAtomPKtiPtdPd(double noundef %3693, double noundef %2934, double noundef %2935, double noundef %1024, ptr noundef %70, ptr noundef %2913, i32 noundef %2914, ptr noundef %123, double noundef %32, ptr noundef %169)
  %3695 = add nsw i32 %3580, %3694
  %3696 = icmp sgt i32 %3694, 0
  br i1 %3696, label %3697, label %3801

3697:                                             ; preds = %3686
  %3698 = load ptr, ptr @_ZN20ComputeNonbondedUtil8r2_tableE, align 8, !tbaa !23
  %3699 = zext i32 %3694 to i64
  br label %3700

3700:                                             ; preds = %3697, %3700
  %3701 = phi i64 [ 0, %3697 ], [ %3799, %3700 ]
  %3702 = phi double [ %3687, %3697 ], [ %3795, %3700 ]
  %3703 = phi <2 x double> [ %3688, %3697 ], [ %3787, %3700 ]
  %3704 = phi <2 x double> [ %3689, %3697 ], [ %3780, %3700 ]
  %3705 = phi <2 x double> [ %3690, %3697 ], [ %3770, %3700 ]
  %3706 = phi <2 x double> [ %3691, %3697 ], [ %3793, %3700 ]
  %3707 = phi <2 x double> [ %3692, %3697 ], [ %3789, %3700 ]
  %3708 = shl nuw nsw i64 %3701, 1
  %3709 = getelementptr inbounds i32, ptr %170, i64 %3708
  %3710 = load i32, ptr %3709, align 4, !tbaa !5
  %3711 = ashr i32 %3710, 14
  %3712 = add nsw i32 %3711, %35
  %3713 = getelementptr inbounds i16, ptr %123, i64 %3701
  %3714 = load i16, ptr %3713, align 2, !tbaa !44
  %3715 = zext i16 %3714 to i64
  %3716 = getelementptr inbounds %struct.CompAtom, ptr %70, i64 %3715
  %3717 = getelementptr inbounds double, ptr %169, i64 %3701
  %3718 = load double, ptr %3717, align 8, !tbaa !19
  %3719 = sext i32 %3712 to i64
  %3720 = getelementptr inbounds double, ptr %3698, i64 %3719
  %3721 = load double, ptr %3720, align 8, !tbaa !19
  %3722 = fsub double %3718, %3721
  %3723 = shl nsw i32 %3712, 4
  %3724 = sext i32 %3723 to i64
  %3725 = getelementptr inbounds double, ptr %27, i64 %3724
  %3726 = getelementptr inbounds %class.Vector, ptr %953, i64 %3715
  %3727 = getelementptr inbounds %struct.CompAtom, ptr %70, i64 %3715, i32 1
  %3728 = load float, ptr %3727, align 8, !tbaa !104
  %3729 = fpext float %3728 to double
  %3730 = fmul double %2932, %3729
  %3731 = load <2 x double>, ptr %3716, align 8, !tbaa !19
  %3732 = fsub <2 x double> %1021, %3731
  %3733 = getelementptr inbounds %class.Vector, ptr %3716, i64 0, i32 2
  %3734 = load double, ptr %3733, align 8, !tbaa !49
  %3735 = fsub double %1024, %3734
  %3736 = shl nsw i32 %3712, 2
  %3737 = sext i32 %3736 to i64
  %3738 = getelementptr inbounds double, ptr %28, i64 %3737
  %3739 = getelementptr inbounds double, ptr %3725, i64 12
  %3740 = load double, ptr %3739, align 8, !tbaa !19
  %3741 = getelementptr inbounds double, ptr %3725, i64 13
  %3742 = load double, ptr %3741, align 8, !tbaa !19
  %3743 = getelementptr inbounds double, ptr %3725, i64 14
  %3744 = load double, ptr %3743, align 8, !tbaa !19
  %3745 = getelementptr inbounds double, ptr %3725, i64 15
  %3746 = load double, ptr %3745, align 8, !tbaa !19
  %3747 = load double, ptr %3738, align 8, !tbaa !19
  %3748 = fadd double %3746, %3747
  %3749 = getelementptr inbounds double, ptr %3738, i64 1
  %3750 = load double, ptr %3749, align 8, !tbaa !19
  %3751 = tail call double @llvm.fmuladd.f64(double %3750, double 2.000000e+00, double %3744)
  %3752 = getelementptr inbounds double, ptr %3738, i64 2
  %3753 = load double, ptr %3752, align 8, !tbaa !19
  %3754 = tail call double @llvm.fmuladd.f64(double %3753, double 4.000000e+00, double %3742)
  %3755 = getelementptr inbounds double, ptr %3738, i64 3
  %3756 = load double, ptr %3755, align 8, !tbaa !19
  %3757 = tail call double @llvm.fmuladd.f64(double %3756, double 6.000000e+00, double %3740)
  %3758 = fmul double %3730, %3757
  %3759 = fmul double %3730, %3754
  %3760 = fmul double %3730, %3751
  %3761 = fmul double %3730, %3748
  %3762 = fmul double %3722, %3758
  %3763 = fmul double %3759, 2.500000e-01
  %3764 = tail call double @llvm.fmuladd.f64(double %3762, double 0x3FC5555555555555, double %3763)
  %3765 = fmul double %3760, 5.000000e-01
  %3766 = tail call double @llvm.fmuladd.f64(double %3764, double %3722, double %3765)
  %3767 = tail call double @llvm.fmuladd.f64(double %3766, double %3722, double %3761)
  %3768 = insertelement <2 x double> poison, double %3767, i64 0
  %3769 = shufflevector <2 x double> %3768, <2 x double> poison, <2 x i32> zeroinitializer
  %3770 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %981, <2 x double> %3769, <2 x double> %3705)
  %3771 = tail call double @llvm.fmuladd.f64(double %3722, double %3758, double %3759)
  %3772 = tail call double @llvm.fmuladd.f64(double %3771, double %3722, double %3760)
  %3773 = fmul double %989, %3772
  %3774 = extractelement <2 x double> %3732, i64 1
  %3775 = fmul double %3774, %3773
  %3776 = insertelement <2 x double> poison, double %3775, i64 0
  %3777 = shufflevector <2 x double> %3776, <2 x double> poison, <2 x i32> zeroinitializer
  %3778 = shufflevector <2 x double> %3732, <2 x double> poison, <2 x i32> <i32 1, i32 0>
  %3779 = insertelement <2 x double> %3778, double %3735, i64 1
  %3780 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %3777, <2 x double> %3779, <2 x double> %3704)
  %3781 = insertelement <2 x double> %3778, double %3735, i64 0
  %3782 = insertelement <2 x double> poison, double %3773, i64 0
  %3783 = shufflevector <2 x double> %3782, <2 x double> poison, <2 x i32> zeroinitializer
  %3784 = fmul <2 x double> %3781, %3783
  %3785 = shufflevector <2 x double> %3784, <2 x double> poison, <2 x i32> <i32 1, i32 poison>
  %3786 = shufflevector <2 x double> %3784, <2 x double> poison, <2 x i32> <i32 1, i32 1>
  %3787 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %3786, <2 x double> %3732, <2 x double> %3703)
  %3788 = insertelement <2 x double> %3785, double %3775, i64 1
  %3789 = fadd <2 x double> %3707, %3788
  %3790 = load <2 x double>, ptr %3726, align 8, !tbaa !19
  %3791 = fsub <2 x double> %3790, %3788
  store <2 x double> %3791, ptr %3726, align 8, !tbaa !19
  %3792 = shufflevector <2 x double> %3781, <2 x double> poison, <2 x i32> zeroinitializer
  %3793 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %3784, <2 x double> %3792, <2 x double> %3706)
  %3794 = extractelement <2 x double> %3784, i64 0
  %3795 = fadd double %3702, %3794
  %3796 = getelementptr inbounds %class.Vector, ptr %953, i64 %3715, i32 2
  %3797 = load double, ptr %3796, align 8, !tbaa !112
  %3798 = fsub double %3797, %3794
  store double %3798, ptr %3796, align 8, !tbaa !112
  %3799 = add nuw nsw i64 %3701, 1
  %3800 = icmp eq i64 %3799, %3699
  br i1 %3800, label %3801, label %3700

3801:                                             ; preds = %3700, %3686
  %3802 = phi double [ %3687, %3686 ], [ %3795, %3700 ]
  %3803 = phi <2 x double> [ %3688, %3686 ], [ %3787, %3700 ]
  %3804 = phi <2 x double> [ %3689, %3686 ], [ %3780, %3700 ]
  %3805 = phi <2 x double> [ %3690, %3686 ], [ %3770, %3700 ]
  %3806 = phi <2 x double> [ %3691, %3686 ], [ %3793, %3700 ]
  %3807 = phi <2 x double> [ %3692, %3686 ], [ %3789, %3700 ]
  %3808 = load double, ptr @_ZN20ComputeNonbondedUtil7cutoff2E, align 8, !tbaa !19
  %3809 = tail call noundef i32 @_Z22pairlist_from_pairlistddddPK8CompAtomPKtiPtdPd(double noundef %3808, double noundef %2934, double noundef %2935, double noundef %1024, ptr noundef %70, ptr noundef %2919, i32 noundef %2920, ptr noundef %123, double noundef %32, ptr noundef %169)
  %3810 = add nsw i32 %3695, %3809
  %3811 = icmp sgt i32 %3809, 0
  br i1 %3811, label %3812, label %3916

3812:                                             ; preds = %3801
  %3813 = load ptr, ptr @_ZN20ComputeNonbondedUtil8r2_tableE, align 8, !tbaa !23
  %3814 = zext i32 %3809 to i64
  br label %3815

3815:                                             ; preds = %3812, %3815
  %3816 = phi i64 [ 0, %3812 ], [ %3914, %3815 ]
  %3817 = phi double [ %3802, %3812 ], [ %3910, %3815 ]
  %3818 = phi <2 x double> [ %3803, %3812 ], [ %3902, %3815 ]
  %3819 = phi <2 x double> [ %3804, %3812 ], [ %3895, %3815 ]
  %3820 = phi <2 x double> [ %3805, %3812 ], [ %3885, %3815 ]
  %3821 = phi <2 x double> [ %3806, %3812 ], [ %3908, %3815 ]
  %3822 = phi <2 x double> [ %3807, %3812 ], [ %3904, %3815 ]
  %3823 = shl nuw nsw i64 %3816, 1
  %3824 = getelementptr inbounds i32, ptr %170, i64 %3823
  %3825 = load i32, ptr %3824, align 4, !tbaa !5
  %3826 = ashr i32 %3825, 14
  %3827 = add nsw i32 %3826, %35
  %3828 = getelementptr inbounds i16, ptr %123, i64 %3816
  %3829 = load i16, ptr %3828, align 2, !tbaa !44
  %3830 = zext i16 %3829 to i64
  %3831 = getelementptr inbounds %struct.CompAtom, ptr %70, i64 %3830
  %3832 = getelementptr inbounds double, ptr %169, i64 %3816
  %3833 = load double, ptr %3832, align 8, !tbaa !19
  %3834 = sext i32 %3827 to i64
  %3835 = getelementptr inbounds double, ptr %3813, i64 %3834
  %3836 = load double, ptr %3835, align 8, !tbaa !19
  %3837 = fsub double %3833, %3836
  %3838 = shl nsw i32 %3827, 4
  %3839 = sext i32 %3838 to i64
  %3840 = getelementptr inbounds double, ptr %27, i64 %3839
  %3841 = getelementptr inbounds %class.Vector, ptr %953, i64 %3830
  %3842 = getelementptr inbounds %struct.CompAtom, ptr %70, i64 %3830, i32 1
  %3843 = load float, ptr %3842, align 8, !tbaa !104
  %3844 = fpext float %3843 to double
  %3845 = fmul double %2932, %3844
  %3846 = load <2 x double>, ptr %3831, align 8, !tbaa !19
  %3847 = fsub <2 x double> %1021, %3846
  %3848 = getelementptr inbounds %class.Vector, ptr %3831, i64 0, i32 2
  %3849 = load double, ptr %3848, align 8, !tbaa !49
  %3850 = fsub double %1024, %3849
  %3851 = shl nsw i32 %3827, 2
  %3852 = sext i32 %3851 to i64
  %3853 = getelementptr inbounds double, ptr %28, i64 %3852
  %3854 = getelementptr inbounds double, ptr %3840, i64 12
  %3855 = load double, ptr %3854, align 8, !tbaa !19
  %3856 = getelementptr inbounds double, ptr %3840, i64 13
  %3857 = load double, ptr %3856, align 8, !tbaa !19
  %3858 = getelementptr inbounds double, ptr %3840, i64 14
  %3859 = load double, ptr %3858, align 8, !tbaa !19
  %3860 = getelementptr inbounds double, ptr %3840, i64 15
  %3861 = load double, ptr %3860, align 8, !tbaa !19
  %3862 = load double, ptr %3853, align 8, !tbaa !19
  %3863 = fadd double %3861, %3862
  %3864 = getelementptr inbounds double, ptr %3853, i64 1
  %3865 = load double, ptr %3864, align 8, !tbaa !19
  %3866 = tail call double @llvm.fmuladd.f64(double %3865, double 2.000000e+00, double %3859)
  %3867 = getelementptr inbounds double, ptr %3853, i64 2
  %3868 = load double, ptr %3867, align 8, !tbaa !19
  %3869 = tail call double @llvm.fmuladd.f64(double %3868, double 4.000000e+00, double %3857)
  %3870 = getelementptr inbounds double, ptr %3853, i64 3
  %3871 = load double, ptr %3870, align 8, !tbaa !19
  %3872 = tail call double @llvm.fmuladd.f64(double %3871, double 6.000000e+00, double %3855)
  %3873 = fmul double %3845, %3872
  %3874 = fmul double %3845, %3869
  %3875 = fmul double %3845, %3866
  %3876 = fmul double %3845, %3863
  %3877 = fmul double %3837, %3873
  %3878 = fmul double %3874, 2.500000e-01
  %3879 = tail call double @llvm.fmuladd.f64(double %3877, double 0x3FC5555555555555, double %3878)
  %3880 = fmul double %3875, 5.000000e-01
  %3881 = tail call double @llvm.fmuladd.f64(double %3879, double %3837, double %3880)
  %3882 = tail call double @llvm.fmuladd.f64(double %3881, double %3837, double %3876)
  %3883 = insertelement <2 x double> poison, double %3882, i64 0
  %3884 = shufflevector <2 x double> %3883, <2 x double> poison, <2 x i32> zeroinitializer
  %3885 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %982, <2 x double> %3884, <2 x double> %3820)
  %3886 = tail call double @llvm.fmuladd.f64(double %3837, double %3873, double %3874)
  %3887 = tail call double @llvm.fmuladd.f64(double %3886, double %3837, double %3875)
  %3888 = fmul double %990, %3887
  %3889 = extractelement <2 x double> %3847, i64 1
  %3890 = fmul double %3889, %3888
  %3891 = insertelement <2 x double> poison, double %3890, i64 0
  %3892 = shufflevector <2 x double> %3891, <2 x double> poison, <2 x i32> zeroinitializer
  %3893 = shufflevector <2 x double> %3847, <2 x double> poison, <2 x i32> <i32 1, i32 0>
  %3894 = insertelement <2 x double> %3893, double %3850, i64 1
  %3895 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %3892, <2 x double> %3894, <2 x double> %3819)
  %3896 = insertelement <2 x double> %3893, double %3850, i64 0
  %3897 = insertelement <2 x double> poison, double %3888, i64 0
  %3898 = shufflevector <2 x double> %3897, <2 x double> poison, <2 x i32> zeroinitializer
  %3899 = fmul <2 x double> %3896, %3898
  %3900 = shufflevector <2 x double> %3899, <2 x double> poison, <2 x i32> <i32 1, i32 poison>
  %3901 = shufflevector <2 x double> %3899, <2 x double> poison, <2 x i32> <i32 1, i32 1>
  %3902 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %3901, <2 x double> %3847, <2 x double> %3818)
  %3903 = insertelement <2 x double> %3900, double %3890, i64 1
  %3904 = fadd <2 x double> %3822, %3903
  %3905 = load <2 x double>, ptr %3841, align 8, !tbaa !19
  %3906 = fsub <2 x double> %3905, %3903
  store <2 x double> %3906, ptr %3841, align 8, !tbaa !19
  %3907 = shufflevector <2 x double> %3896, <2 x double> poison, <2 x i32> zeroinitializer
  %3908 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %3899, <2 x double> %3907, <2 x double> %3821)
  %3909 = extractelement <2 x double> %3899, i64 0
  %3910 = fadd double %3817, %3909
  %3911 = getelementptr inbounds %class.Vector, ptr %953, i64 %3830, i32 2
  %3912 = load double, ptr %3911, align 8, !tbaa !112
  %3913 = fsub double %3912, %3909
  store double %3913, ptr %3911, align 8, !tbaa !112
  %3914 = add nuw nsw i64 %3816, 1
  %3915 = icmp eq i64 %3914, %3814
  br i1 %3915, label %3916, label %3815

3916:                                             ; preds = %3815, %3801
  %3917 = phi double [ %3802, %3801 ], [ %3910, %3815 ]
  %3918 = phi <2 x double> [ %3803, %3801 ], [ %3902, %3815 ]
  %3919 = phi <2 x double> [ %3804, %3801 ], [ %3895, %3815 ]
  %3920 = phi <2 x double> [ %3805, %3801 ], [ %3885, %3815 ]
  %3921 = phi <2 x double> [ %3806, %3801 ], [ %3908, %3815 ]
  %3922 = phi <2 x double> [ %3807, %3801 ], [ %3904, %3815 ]
  %3923 = getelementptr inbounds %class.Vector, ptr %954, i64 %1003
  %3924 = load <2 x double>, ptr %3923, align 8, !tbaa !19
  %3925 = fadd <2 x double> %3922, %3924
  store <2 x double> %3925, ptr %3923, align 8, !tbaa !19
  %3926 = getelementptr inbounds %class.Vector, ptr %954, i64 %1003, i32 2
  %3927 = load double, ptr %3926, align 8, !tbaa !112
  %3928 = fadd double %3917, %3927
  store double %3928, ptr %3926, align 8, !tbaa !112
  br i1 %173, label %3931, label %3929

3929:                                             ; preds = %3916
  %3930 = add nsw i32 %993, 1
  br label %3939

3931:                                             ; preds = %3916
  %3932 = load ptr, ptr %9, align 8, !tbaa !46
  %3933 = load i32, ptr %14, align 8, !tbaa !17
  %3934 = add nsw i32 %3933, 1
  store i32 %3934, ptr %14, align 8, !tbaa !17
  %3935 = sext i32 %3933 to i64
  %3936 = getelementptr inbounds i16, ptr %3932, i64 %3935
  %3937 = load i16, ptr %3936, align 2, !tbaa !44
  %3938 = zext i16 %3937 to i32
  br label %3939

3939:                                             ; preds = %1450, %1718, %3931, %3929, %1015
  %3940 = phi i32 [ %1019, %3931 ], [ %1019, %3929 ], [ %1016, %1015 ], [ %1019, %1718 ], [ %1019, %1450 ]
  %3941 = phi i32 [ %2923, %3931 ], [ %2923, %3929 ], [ %997, %1015 ], [ %1464, %1718 ], [ 0, %1450 ]
  %3942 = phi ptr [ %2924, %3931 ], [ %2924, %3929 ], [ %996, %1015 ], [ %1273, %1718 ], [ %1273, %1450 ]
  %3943 = phi ptr [ %2925, %3931 ], [ %2925, %3929 ], [ %995, %1015 ], [ %1274, %1718 ], [ %1274, %1450 ]
  %3944 = phi ptr [ %2926, %3931 ], [ %2926, %3929 ], [ %994, %1015 ], [ %1275, %1718 ], [ %1275, %1450 ]
  %3945 = phi i32 [ %3938, %3931 ], [ %3930, %3929 ], [ %1017, %1015 ], [ %1719, %1718 ], [ %1454, %1450 ]
  %3946 = phi i32 [ %3810, %3931 ], [ %3810, %3929 ], [ %992, %1015 ], [ %992, %1718 ], [ %992, %1450 ]
  %3947 = phi <2 x double> [ %3918, %3931 ], [ %3918, %3929 ], [ %999, %1015 ], [ %999, %1718 ], [ %999, %1450 ]
  %3948 = phi <2 x double> [ %3919, %3931 ], [ %3919, %3929 ], [ %1000, %1015 ], [ %1000, %1718 ], [ %1000, %1450 ]
  %3949 = phi <2 x double> [ %3920, %3931 ], [ %3920, %3929 ], [ %1001, %1015 ], [ %1001, %1718 ], [ %1001, %1450 ]
  %3950 = phi <2 x double> [ %3921, %3931 ], [ %3921, %3929 ], [ %1002, %1015 ], [ %1002, %1718 ], [ %1002, %1450 ]
  %3951 = icmp slt i32 %3945, %65
  br i1 %3951, label %991, label %3952

3952:                                             ; preds = %3939, %950
  %3953 = phi ptr [ null, %950 ], [ %3944, %3939 ]
  %3954 = phi i32 [ %957, %950 ], [ %3945, %3939 ]
  %3955 = phi i32 [ 0, %950 ], [ %3946, %3939 ]
  %3956 = phi <2 x double> [ zeroinitializer, %950 ], [ %3947, %3939 ]
  %3957 = phi <2 x double> [ zeroinitializer, %950 ], [ %3948, %3939 ]
  %3958 = phi <2 x double> [ zeroinitializer, %950 ], [ %3949, %3939 ]
  %3959 = phi <2 x double> [ zeroinitializer, %950 ], [ %3950, %3939 ]
  br i1 %171, label %3967, label %3960

3960:                                             ; preds = %3952
  %3961 = trunc i32 %3954 to i16
  %3962 = load ptr, ptr %9, align 8, !tbaa !46
  %3963 = load i32, ptr %14, align 8, !tbaa !17
  %3964 = add nsw i32 %3963, -1
  %3965 = sext i32 %3964 to i64
  %3966 = getelementptr inbounds i16, ptr %3962, i64 %3965
  store i16 %3961, ptr %3966, align 2, !tbaa !44
  br label %3967

3967:                                             ; preds = %3960, %3952
  %3968 = sitofp i32 %3955 to double
  %3969 = getelementptr inbounds double, ptr %7, i64 22
  %3970 = load double, ptr %3969, align 8, !tbaa !19
  %3971 = fadd double %3970, %3968
  store double %3971, ptr %3969, align 8, !tbaa !19
  %3972 = getelementptr inbounds double, ptr %7, i64 1
  %3973 = load double, ptr %3972, align 8, !tbaa !19
  %3974 = extractelement <2 x double> %3958, i64 1
  %3975 = fadd double %3974, %3973
  store double %3975, ptr %3972, align 8, !tbaa !19
  %3976 = getelementptr inbounds double, ptr %7, i64 24
  %3977 = load double, ptr %3976, align 8, !tbaa !19
  %3978 = extractelement <2 x double> %3958, i64 0
  %3979 = fadd double %3978, %3977
  store double %3979, ptr %3976, align 8, !tbaa !19
  %3980 = getelementptr inbounds double, ptr %7, i64 12
  %3981 = load <4 x double>, ptr %3980, align 8, !tbaa !19
  %3982 = shufflevector <2 x double> %3956, <2 x double> %3959, <4 x i32> <i32 0, i32 1, i32 3, i32 poison>
  %3983 = shufflevector <4 x double> %3982, <4 x double> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 1>
  %3984 = fadd <4 x double> %3983, %3981
  store <4 x double> %3984, ptr %3980, align 8, !tbaa !19
  %3985 = getelementptr inbounds double, ptr %7, i64 16
  %3986 = load <4 x double>, ptr %3985, align 8, !tbaa !19
  %3987 = shufflevector <2 x double> %3957, <2 x double> %3959, <4 x i32> <i32 0, i32 1, i32 3, i32 poison>
  %3988 = shufflevector <4 x double> %3987, <4 x double> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 1>
  %3989 = fadd <4 x double> %3988, %3986
  store <4 x double> %3989, ptr %3985, align 8, !tbaa !19
  %3990 = getelementptr inbounds double, ptr %7, i64 20
  %3991 = load double, ptr %3990, align 8, !tbaa !19
  %3992 = extractelement <2 x double> %3959, i64 0
  %3993 = fadd double %3992, %3991
  store double %3993, ptr %3990, align 8, !tbaa !19
  %3994 = icmp eq ptr %3953, null
  br i1 %3994, label %3996, label %3995

3995:                                             ; preds = %3967
  tail call void @_ZdaPv(ptr noundef nonnull %3953) #13
  br label %3996

3996:                                             ; preds = %3995, %3967
  call void @llvm.lifetime.end.p0(i64 36, ptr nonnull %2) #11
  br label %3997

3997:                                             ; preds = %1, %3996
  ret void
}

; Function Attrs: sspstrong uwtable
define dso_local void @_ZN20ComputeNonbondedUtil20calc_self_energy_fepEP9nonbonded(ptr nocapture noundef readonly %0) local_unnamed_addr #0 align 2 {
  %2 = alloca [9 x i32], align 16
  %3 = alloca double, align 8
  %4 = alloca double, align 8
  %5 = alloca double, align 8
  %6 = load i32, ptr @_ZN20ComputeNonbondedUtil8commOnlyE, align 4, !tbaa !5
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %8, label %3843

8:                                                ; preds = %1
  %9 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 7
  %10 = load ptr, ptr %9, align 8, !tbaa !9
  %11 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 10
  %12 = load ptr, ptr %11, align 8, !tbaa !14
  %13 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 11
  %14 = load i32, ptr %13, align 8, !tbaa !15
  %15 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 12
  %16 = load i32, ptr %15, align 4, !tbaa !16
  %17 = getelementptr inbounds %class.Pairlists, ptr %12, i64 0, i32 1
  store i32 0, ptr %17, align 8, !tbaa !17
  %18 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 6
  %19 = load <2 x double>, ptr %18, align 8, !tbaa !19
  %20 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 6, i32 2
  %21 = load double, ptr %20, align 8, !tbaa !20
  %22 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 13
  %23 = load double, ptr %22, align 8, !tbaa !21
  %24 = fmul double %23, %23
  %25 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 14
  %26 = load double, ptr %25, align 8, !tbaa !22
  %27 = fmul double %26, %26
  %28 = load double, ptr @_ZN20ComputeNonbondedUtil12dielectric_1E, align 8, !tbaa !19
  %29 = load ptr, ptr @_ZN20ComputeNonbondedUtil7ljTableE, align 8, !tbaa !23
  %30 = load ptr, ptr @_ZN20ComputeNonbondedUtil3molE, align 8, !tbaa !23
  %31 = load ptr, ptr @_ZN20ComputeNonbondedUtil11table_shortE, align 8, !tbaa !23
  %32 = load double, ptr @_ZN20ComputeNonbondedUtil7scalingE, align 8, !tbaa !19
  %33 = load double, ptr @_ZN20ComputeNonbondedUtil7scale14E, align 8, !tbaa !19
  %34 = load double, ptr @_ZN20ComputeNonbondedUtil8r2_deltaE, align 8, !tbaa !19
  %35 = load i32, ptr @_ZN20ComputeNonbondedUtil12r2_delta_expE, align 4, !tbaa !5
  %36 = shl i32 %35, 6
  %37 = add i32 %36, -65472
  %38 = load double, ptr @_ZN20ComputeNonbondedUtil9switchOn2E, align 8, !tbaa !19
  %39 = load double, ptr @_ZN20ComputeNonbondedUtil7cutoff2E, align 8, !tbaa !19
  %40 = fsub double %39, %38
  %41 = fmul double %40, %40
  %42 = fmul double %40, %41
  %43 = fdiv double 1.000000e+00, %42
  %44 = load double, ptr @_ZN20ComputeNonbondedUtil19alchElecLambdaStartE, align 8, !tbaa !19
  %45 = load double, ptr @_ZN20ComputeNonbondedUtil16alchVdwLambdaEndE, align 8, !tbaa !19
  %46 = load i32, ptr @_ZN20ComputeNonbondedUtil14Fep_WCA_repuOnE, align 4, !tbaa !5
  %47 = load i32, ptr @_ZN20ComputeNonbondedUtil14Fep_WCA_dispOnE, align 4, !tbaa !5
  %48 = load double, ptr @_ZN20ComputeNonbondedUtil9WCA_rcut1E, align 8, !tbaa !19
  %49 = load double, ptr @_ZN20ComputeNonbondedUtil9WCA_rcut2E, align 8, !tbaa !19
  %50 = load double, ptr @_ZN20ComputeNonbondedUtil10alchLambdaE, align 8, !tbaa !19
  %51 = fsub double 1.000000e+00, %44
  %52 = fcmp oge double %50, %45
  %53 = fdiv double %50, %45
  %54 = select i1 %52, double 1.000000e+00, double %53
  %55 = load double, ptr @_ZN20ComputeNonbondedUtil17alchVdwShiftCoeffE, align 8, !tbaa !19
  %56 = fsub double 1.000000e+00, %54
  %57 = fmul double %55, %56
  %58 = load double, ptr @_ZN20ComputeNonbondedUtil11alchLambda2E, align 8, !tbaa !19
  %59 = fcmp oge double %58, %45
  %60 = fdiv double %58, %45
  %61 = select i1 %59, double 1.000000e+00, double %60
  %62 = fsub double 1.000000e+00, %61
  %63 = fmul double %55, %62
  %64 = insertelement <2 x double> poison, double %58, i64 0
  %65 = insertelement <2 x double> %64, double %50, i64 1
  %66 = insertelement <2 x double> poison, double %44, i64 0
  %67 = shufflevector <2 x double> %66, <2 x double> poison, <2 x i32> zeroinitializer
  %68 = fcmp ugt <2 x double> %65, %67
  %69 = fsub <2 x double> %65, %67
  %70 = insertelement <2 x double> poison, double %51, i64 0
  %71 = shufflevector <2 x double> %70, <2 x double> poison, <2 x i32> zeroinitializer
  %72 = fdiv <2 x double> %69, %71
  %73 = select <2 x i1> %68, <2 x double> %72, <2 x double> zeroinitializer
  %74 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %65
  %75 = fcmp ugt <2 x double> %74, %67
  %76 = fsub <2 x double> %74, %67
  %77 = fdiv <2 x double> %76, %71
  %78 = extractelement <2 x double> %74, i64 1
  %79 = fcmp oge double %78, %45
  %80 = fdiv double %78, %45
  %81 = select i1 %79, double 1.000000e+00, double %80
  %82 = fsub double 1.000000e+00, %81
  %83 = fmul double %55, %82
  %84 = select <2 x i1> %75, <2 x double> %77, <2 x double> zeroinitializer
  %85 = extractelement <2 x double> %74, i64 0
  %86 = fcmp oge double %85, %45
  %87 = fdiv double %85, %45
  %88 = select i1 %86, double 1.000000e+00, double %87
  %89 = fsub double 1.000000e+00, %88
  %90 = fmul double %55, %89
  call void @llvm.lifetime.start.p0(i64 36, ptr nonnull %2) #11
  %91 = load i32, ptr @_ZN20ComputeNonbondedUtil12alchDecoupleE, align 4, !tbaa !5
  %92 = icmp eq i32 %91, 0
  %93 = getelementptr inbounds [9 x i32], ptr %2, i64 0, i64 6
  store i32 2, ptr %93, align 8, !tbaa !5
  %94 = getelementptr inbounds [9 x i32], ptr %2, i64 0, i64 4
  %95 = getelementptr inbounds [9 x i32], ptr %2, i64 0, i64 7
  %96 = getelementptr inbounds [9 x i32], ptr %2, i64 0, i64 5
  %97 = getelementptr inbounds [9 x i32], ptr %2, i64 0, i64 8
  %98 = zext i1 %92 to i32
  %99 = select i1 %92, i32 2, i32 0
  store i32 %98, ptr %94, align 16, !tbaa !5
  store i32 99, ptr %95, align 4, !tbaa !5
  store <4 x i32> <i32 0, i32 1, i32 2, i32 1>, ptr %2, align 16, !tbaa !5
  store i32 99, ptr %96, align 4, !tbaa !5
  store i32 %99, ptr %97, align 16, !tbaa !5
  %100 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 5
  %101 = load i32, ptr %100, align 8, !tbaa !5
  %102 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 5, i64 1
  %103 = load i32, ptr %102, align 4, !tbaa !5
  %104 = load ptr, ptr %0, align 8, !tbaa !23
  %105 = getelementptr inbounds [2 x ptr], ptr %0, i64 0, i64 1
  %106 = load ptr, ptr %105, align 8, !tbaa !23
  %107 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 1
  %108 = load ptr, ptr %107, align 8, !tbaa !23
  %109 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 1, i64 1
  %110 = load ptr, ptr %109, align 8, !tbaa !23
  %111 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 9
  %112 = load ptr, ptr %111, align 8, !tbaa !24
  %113 = add nsw i32 %103, 5
  %114 = getelementptr inbounds %class.ResizeArray, ptr %112, i64 0, i32 1
  %115 = load ptr, ptr %114, align 8, !tbaa !25
  %116 = getelementptr inbounds %class.ResizeArrayRaw, ptr %115, i64 0, i32 2
  %117 = load i32, ptr %116, align 8, !tbaa !27
  %118 = icmp slt i32 %117, %113
  br i1 %118, label %119, label %157

119:                                              ; preds = %8
  %120 = getelementptr inbounds %class.ResizeArrayRaw, ptr %115, i64 0, i32 3
  %121 = load i32, ptr %120, align 4, !tbaa !30
  %122 = icmp slt i32 %121, %113
  br i1 %122, label %123, label %157

123:                                              ; preds = %119
  %124 = sitofp i32 %121 to float
  %125 = getelementptr inbounds %class.ResizeArrayRaw, ptr %115, i64 0, i32 5
  %126 = load float, ptr %125, align 4, !tbaa !31
  %127 = fmul float %126, %124
  %128 = fptosi float %127 to i32
  %129 = tail call i32 @llvm.smax.i32(i32 %128, i32 %113)
  %130 = sub nsw i32 %129, %121
  %131 = getelementptr inbounds %class.ResizeArrayRaw, ptr %115, i64 0, i32 6
  %132 = load i32, ptr %131, align 8, !tbaa !32
  %133 = icmp slt i32 %130, %132
  %134 = add nsw i32 %132, %121
  %135 = select i1 %133, i32 %134, i32 %129
  %136 = sext i32 %135 to i64
  %137 = shl nsw i64 %136, 1
  %138 = add nsw i64 %137, 31
  %139 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %138) #12
  %140 = getelementptr inbounds i8, ptr %139, i64 31
  %141 = ptrtoint ptr %140 to i64
  %142 = and i64 %141, 31
  %143 = sub nsw i64 0, %142
  %144 = getelementptr inbounds i8, ptr %140, i64 %143
  %145 = load ptr, ptr %115, align 8, !tbaa !33
  %146 = sext i32 %117 to i64
  %147 = shl nsw i64 %146, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %144, ptr align 1 %145, i64 %147, i1 false)
  %148 = icmp eq i32 %121, 0
  br i1 %148, label %154, label %149

149:                                              ; preds = %123
  %150 = getelementptr inbounds %class.ResizeArrayRaw, ptr %115, i64 0, i32 1
  %151 = load ptr, ptr %150, align 8, !tbaa !34
  %152 = icmp eq ptr %151, null
  br i1 %152, label %154, label %153

153:                                              ; preds = %149
  tail call void @_ZdaPv(ptr noundef nonnull %151) #13
  br label %154

154:                                              ; preds = %153, %149, %123
  %155 = getelementptr inbounds %class.ResizeArrayRaw, ptr %115, i64 0, i32 1
  store ptr %139, ptr %155, align 8, !tbaa !34
  store ptr %144, ptr %115, align 8, !tbaa !33
  store i32 %135, ptr %120, align 4, !tbaa !30
  %156 = load ptr, ptr %114, align 8, !tbaa !25
  br label %157

157:                                              ; preds = %8, %119, %154
  %158 = phi ptr [ %115, %8 ], [ %115, %119 ], [ %156, %154 ]
  store i32 %113, ptr %116, align 8, !tbaa !27
  %159 = load ptr, ptr %158, align 8, !tbaa !33
  %160 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %112, i64 0, i32 1, i32 1
  %161 = load ptr, ptr %160, align 8, !tbaa !35
  %162 = getelementptr inbounds %class.ResizeArrayRaw.9, ptr %161, i64 0, i32 2
  %163 = load i32, ptr %162, align 8, !tbaa !37
  %164 = icmp slt i32 %163, %113
  br i1 %164, label %165, label %203

165:                                              ; preds = %157
  %166 = getelementptr inbounds %class.ResizeArrayRaw.9, ptr %161, i64 0, i32 3
  %167 = load i32, ptr %166, align 4, !tbaa !39
  %168 = icmp slt i32 %167, %113
  br i1 %168, label %169, label %203

169:                                              ; preds = %165
  %170 = sitofp i32 %167 to float
  %171 = getelementptr inbounds %class.ResizeArrayRaw.9, ptr %161, i64 0, i32 5
  %172 = load float, ptr %171, align 4, !tbaa !40
  %173 = fmul float %172, %170
  %174 = fptosi float %173 to i32
  %175 = tail call i32 @llvm.smax.i32(i32 %174, i32 %113)
  %176 = sub nsw i32 %175, %167
  %177 = getelementptr inbounds %class.ResizeArrayRaw.9, ptr %161, i64 0, i32 6
  %178 = load i32, ptr %177, align 8, !tbaa !41
  %179 = icmp slt i32 %176, %178
  %180 = add nsw i32 %178, %167
  %181 = select i1 %179, i32 %180, i32 %175
  %182 = sext i32 %181 to i64
  %183 = shl nsw i64 %182, 3
  %184 = add nsw i64 %183, 31
  %185 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %184) #12
  %186 = getelementptr inbounds i8, ptr %185, i64 31
  %187 = ptrtoint ptr %186 to i64
  %188 = and i64 %187, 31
  %189 = sub nsw i64 0, %188
  %190 = getelementptr inbounds i8, ptr %186, i64 %189
  %191 = load ptr, ptr %161, align 8, !tbaa !42
  %192 = sext i32 %163 to i64
  %193 = shl nsw i64 %192, 3
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %190, ptr align 1 %191, i64 %193, i1 false)
  %194 = icmp eq i32 %167, 0
  br i1 %194, label %200, label %195

195:                                              ; preds = %169
  %196 = getelementptr inbounds %class.ResizeArrayRaw.9, ptr %161, i64 0, i32 1
  %197 = load ptr, ptr %196, align 8, !tbaa !43
  %198 = icmp eq ptr %197, null
  br i1 %198, label %200, label %199

199:                                              ; preds = %195
  tail call void @_ZdaPv(ptr noundef nonnull %197) #13
  br label %200

200:                                              ; preds = %199, %195, %169
  %201 = getelementptr inbounds %class.ResizeArrayRaw.9, ptr %161, i64 0, i32 1
  store ptr %185, ptr %201, align 8, !tbaa !43
  store ptr %190, ptr %161, align 8, !tbaa !42
  store i32 %181, ptr %166, align 4, !tbaa !39
  %202 = load ptr, ptr %160, align 8, !tbaa !35
  br label %203

203:                                              ; preds = %157, %165, %200
  %204 = phi ptr [ %161, %157 ], [ %161, %165 ], [ %202, %200 ]
  store i32 %113, ptr %162, align 8, !tbaa !37
  %205 = load ptr, ptr %204, align 8, !tbaa !42
  %206 = getelementptr inbounds i32, ptr %205, i64 1
  %207 = icmp eq i32 %14, 0
  %208 = icmp ne i32 %16, 0
  %209 = select i1 %207, i1 %208, i1 false
  %210 = select i1 %209, i32 0, i32 %113
  %211 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %112, i64 0, i32 2, i32 1
  %212 = load ptr, ptr %211, align 8, !tbaa !25
  %213 = getelementptr inbounds %class.ResizeArrayRaw, ptr %212, i64 0, i32 2
  %214 = load i32, ptr %213, align 8, !tbaa !27
  %215 = icmp slt i32 %214, %210
  br i1 %215, label %216, label %254

216:                                              ; preds = %203
  %217 = getelementptr inbounds %class.ResizeArrayRaw, ptr %212, i64 0, i32 3
  %218 = load i32, ptr %217, align 4, !tbaa !30
  %219 = icmp slt i32 %218, %210
  br i1 %219, label %220, label %254

220:                                              ; preds = %216
  %221 = sitofp i32 %218 to float
  %222 = getelementptr inbounds %class.ResizeArrayRaw, ptr %212, i64 0, i32 5
  %223 = load float, ptr %222, align 4, !tbaa !31
  %224 = fmul float %223, %221
  %225 = fptosi float %224 to i32
  %226 = tail call i32 @llvm.smax.i32(i32 %225, i32 %210)
  %227 = sub nsw i32 %226, %218
  %228 = getelementptr inbounds %class.ResizeArrayRaw, ptr %212, i64 0, i32 6
  %229 = load i32, ptr %228, align 8, !tbaa !32
  %230 = icmp slt i32 %227, %229
  %231 = add nsw i32 %229, %218
  %232 = select i1 %230, i32 %231, i32 %226
  %233 = sext i32 %232 to i64
  %234 = shl nsw i64 %233, 1
  %235 = add nsw i64 %234, 31
  %236 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %235) #12
  %237 = getelementptr inbounds i8, ptr %236, i64 31
  %238 = ptrtoint ptr %237 to i64
  %239 = and i64 %238, 31
  %240 = sub nsw i64 0, %239
  %241 = getelementptr inbounds i8, ptr %237, i64 %240
  %242 = load ptr, ptr %212, align 8, !tbaa !33
  %243 = sext i32 %214 to i64
  %244 = shl nsw i64 %243, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %241, ptr align 1 %242, i64 %244, i1 false)
  %245 = icmp eq i32 %218, 0
  br i1 %245, label %251, label %246

246:                                              ; preds = %220
  %247 = getelementptr inbounds %class.ResizeArrayRaw, ptr %212, i64 0, i32 1
  %248 = load ptr, ptr %247, align 8, !tbaa !34
  %249 = icmp eq ptr %248, null
  br i1 %249, label %251, label %250

250:                                              ; preds = %246
  tail call void @_ZdaPv(ptr noundef nonnull %248) #13
  br label %251

251:                                              ; preds = %250, %246, %220
  %252 = getelementptr inbounds %class.ResizeArrayRaw, ptr %212, i64 0, i32 1
  store ptr %236, ptr %252, align 8, !tbaa !34
  store ptr %241, ptr %212, align 8, !tbaa !33
  store i32 %232, ptr %217, align 4, !tbaa !30
  %253 = load ptr, ptr %211, align 8, !tbaa !25
  br label %254

254:                                              ; preds = %203, %216, %251
  %255 = phi ptr [ %212, %203 ], [ %212, %216 ], [ %253, %251 ]
  store i32 %210, ptr %213, align 8, !tbaa !27
  %256 = load ptr, ptr %255, align 8, !tbaa !33
  %257 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %112, i64 0, i32 3, i32 1
  %258 = load ptr, ptr %257, align 8, !tbaa !25
  %259 = getelementptr inbounds %class.ResizeArrayRaw, ptr %258, i64 0, i32 2
  %260 = load i32, ptr %259, align 8, !tbaa !27
  %261 = icmp slt i32 %260, %210
  br i1 %261, label %262, label %300

262:                                              ; preds = %254
  %263 = getelementptr inbounds %class.ResizeArrayRaw, ptr %258, i64 0, i32 3
  %264 = load i32, ptr %263, align 4, !tbaa !30
  %265 = icmp slt i32 %264, %210
  br i1 %265, label %266, label %300

266:                                              ; preds = %262
  %267 = sitofp i32 %264 to float
  %268 = getelementptr inbounds %class.ResizeArrayRaw, ptr %258, i64 0, i32 5
  %269 = load float, ptr %268, align 4, !tbaa !31
  %270 = fmul float %269, %267
  %271 = fptosi float %270 to i32
  %272 = tail call i32 @llvm.smax.i32(i32 %271, i32 %210)
  %273 = sub nsw i32 %272, %264
  %274 = getelementptr inbounds %class.ResizeArrayRaw, ptr %258, i64 0, i32 6
  %275 = load i32, ptr %274, align 8, !tbaa !32
  %276 = icmp slt i32 %273, %275
  %277 = add nsw i32 %275, %264
  %278 = select i1 %276, i32 %277, i32 %272
  %279 = sext i32 %278 to i64
  %280 = shl nsw i64 %279, 1
  %281 = add nsw i64 %280, 31
  %282 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %281) #12
  %283 = getelementptr inbounds i8, ptr %282, i64 31
  %284 = ptrtoint ptr %283 to i64
  %285 = and i64 %284, 31
  %286 = sub nsw i64 0, %285
  %287 = getelementptr inbounds i8, ptr %283, i64 %286
  %288 = load ptr, ptr %258, align 8, !tbaa !33
  %289 = sext i32 %260 to i64
  %290 = shl nsw i64 %289, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %287, ptr align 1 %288, i64 %290, i1 false)
  %291 = icmp eq i32 %264, 0
  br i1 %291, label %297, label %292

292:                                              ; preds = %266
  %293 = getelementptr inbounds %class.ResizeArrayRaw, ptr %258, i64 0, i32 1
  %294 = load ptr, ptr %293, align 8, !tbaa !34
  %295 = icmp eq ptr %294, null
  br i1 %295, label %297, label %296

296:                                              ; preds = %292
  tail call void @_ZdaPv(ptr noundef nonnull %294) #13
  br label %297

297:                                              ; preds = %296, %292, %266
  %298 = getelementptr inbounds %class.ResizeArrayRaw, ptr %258, i64 0, i32 1
  store ptr %282, ptr %298, align 8, !tbaa !34
  store ptr %287, ptr %258, align 8, !tbaa !33
  store i32 %278, ptr %263, align 4, !tbaa !30
  %299 = load ptr, ptr %257, align 8, !tbaa !25
  br label %300

300:                                              ; preds = %254, %262, %297
  %301 = phi ptr [ %258, %254 ], [ %258, %262 ], [ %299, %297 ]
  store i32 %210, ptr %259, align 8, !tbaa !27
  %302 = load ptr, ptr %301, align 8, !tbaa !33
  %303 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %112, i64 0, i32 4, i32 1
  %304 = load ptr, ptr %303, align 8, !tbaa !25
  %305 = getelementptr inbounds %class.ResizeArrayRaw, ptr %304, i64 0, i32 2
  %306 = load i32, ptr %305, align 8, !tbaa !27
  %307 = icmp slt i32 %306, %210
  br i1 %307, label %308, label %346

308:                                              ; preds = %300
  %309 = getelementptr inbounds %class.ResizeArrayRaw, ptr %304, i64 0, i32 3
  %310 = load i32, ptr %309, align 4, !tbaa !30
  %311 = icmp slt i32 %310, %210
  br i1 %311, label %312, label %346

312:                                              ; preds = %308
  %313 = sitofp i32 %310 to float
  %314 = getelementptr inbounds %class.ResizeArrayRaw, ptr %304, i64 0, i32 5
  %315 = load float, ptr %314, align 4, !tbaa !31
  %316 = fmul float %315, %313
  %317 = fptosi float %316 to i32
  %318 = tail call i32 @llvm.smax.i32(i32 %317, i32 %210)
  %319 = sub nsw i32 %318, %310
  %320 = getelementptr inbounds %class.ResizeArrayRaw, ptr %304, i64 0, i32 6
  %321 = load i32, ptr %320, align 8, !tbaa !32
  %322 = icmp slt i32 %319, %321
  %323 = add nsw i32 %321, %310
  %324 = select i1 %322, i32 %323, i32 %318
  %325 = sext i32 %324 to i64
  %326 = shl nsw i64 %325, 1
  %327 = add nsw i64 %326, 31
  %328 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %327) #12
  %329 = getelementptr inbounds i8, ptr %328, i64 31
  %330 = ptrtoint ptr %329 to i64
  %331 = and i64 %330, 31
  %332 = sub nsw i64 0, %331
  %333 = getelementptr inbounds i8, ptr %329, i64 %332
  %334 = load ptr, ptr %304, align 8, !tbaa !33
  %335 = sext i32 %306 to i64
  %336 = shl nsw i64 %335, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %333, ptr align 1 %334, i64 %336, i1 false)
  %337 = icmp eq i32 %310, 0
  br i1 %337, label %343, label %338

338:                                              ; preds = %312
  %339 = getelementptr inbounds %class.ResizeArrayRaw, ptr %304, i64 0, i32 1
  %340 = load ptr, ptr %339, align 8, !tbaa !34
  %341 = icmp eq ptr %340, null
  br i1 %341, label %343, label %342

342:                                              ; preds = %338
  tail call void @_ZdaPv(ptr noundef nonnull %340) #13
  br label %343

343:                                              ; preds = %342, %338, %312
  %344 = getelementptr inbounds %class.ResizeArrayRaw, ptr %304, i64 0, i32 1
  store ptr %328, ptr %344, align 8, !tbaa !34
  store ptr %333, ptr %304, align 8, !tbaa !33
  store i32 %324, ptr %309, align 4, !tbaa !30
  %345 = load ptr, ptr %303, align 8, !tbaa !25
  br label %346

346:                                              ; preds = %300, %308, %343
  %347 = phi ptr [ %304, %300 ], [ %304, %308 ], [ %345, %343 ]
  store i32 %210, ptr %305, align 8, !tbaa !27
  %348 = load ptr, ptr %347, align 8, !tbaa !33
  %349 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %112, i64 0, i32 5, i32 1
  %350 = load ptr, ptr %349, align 8, !tbaa !25
  %351 = getelementptr inbounds %class.ResizeArrayRaw, ptr %350, i64 0, i32 2
  %352 = load i32, ptr %351, align 8, !tbaa !27
  %353 = icmp slt i32 %352, %210
  br i1 %353, label %354, label %392

354:                                              ; preds = %346
  %355 = getelementptr inbounds %class.ResizeArrayRaw, ptr %350, i64 0, i32 3
  %356 = load i32, ptr %355, align 4, !tbaa !30
  %357 = icmp slt i32 %356, %210
  br i1 %357, label %358, label %392

358:                                              ; preds = %354
  %359 = sitofp i32 %356 to float
  %360 = getelementptr inbounds %class.ResizeArrayRaw, ptr %350, i64 0, i32 5
  %361 = load float, ptr %360, align 4, !tbaa !31
  %362 = fmul float %361, %359
  %363 = fptosi float %362 to i32
  %364 = tail call i32 @llvm.smax.i32(i32 %363, i32 %210)
  %365 = sub nsw i32 %364, %356
  %366 = getelementptr inbounds %class.ResizeArrayRaw, ptr %350, i64 0, i32 6
  %367 = load i32, ptr %366, align 8, !tbaa !32
  %368 = icmp slt i32 %365, %367
  %369 = add nsw i32 %367, %356
  %370 = select i1 %368, i32 %369, i32 %364
  %371 = sext i32 %370 to i64
  %372 = shl nsw i64 %371, 1
  %373 = add nsw i64 %372, 31
  %374 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %373) #12
  %375 = getelementptr inbounds i8, ptr %374, i64 31
  %376 = ptrtoint ptr %375 to i64
  %377 = and i64 %376, 31
  %378 = sub nsw i64 0, %377
  %379 = getelementptr inbounds i8, ptr %375, i64 %378
  %380 = load ptr, ptr %350, align 8, !tbaa !33
  %381 = sext i32 %352 to i64
  %382 = shl nsw i64 %381, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %379, ptr align 1 %380, i64 %382, i1 false)
  %383 = icmp eq i32 %356, 0
  br i1 %383, label %389, label %384

384:                                              ; preds = %358
  %385 = getelementptr inbounds %class.ResizeArrayRaw, ptr %350, i64 0, i32 1
  %386 = load ptr, ptr %385, align 8, !tbaa !34
  %387 = icmp eq ptr %386, null
  br i1 %387, label %389, label %388

388:                                              ; preds = %384
  tail call void @_ZdaPv(ptr noundef nonnull %386) #13
  br label %389

389:                                              ; preds = %388, %384, %358
  %390 = getelementptr inbounds %class.ResizeArrayRaw, ptr %350, i64 0, i32 1
  store ptr %374, ptr %390, align 8, !tbaa !34
  store ptr %379, ptr %350, align 8, !tbaa !33
  store i32 %370, ptr %355, align 4, !tbaa !30
  %391 = load ptr, ptr %349, align 8, !tbaa !25
  br label %392

392:                                              ; preds = %346, %354, %389
  %393 = phi ptr [ %350, %346 ], [ %350, %354 ], [ %391, %389 ]
  store i32 %210, ptr %351, align 8, !tbaa !27
  %394 = load ptr, ptr %393, align 8, !tbaa !33
  %395 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %112, i64 0, i32 6, i32 1
  %396 = load ptr, ptr %395, align 8, !tbaa !25
  %397 = getelementptr inbounds %class.ResizeArrayRaw, ptr %396, i64 0, i32 2
  %398 = load i32, ptr %397, align 8, !tbaa !27
  %399 = icmp slt i32 %398, %210
  br i1 %399, label %400, label %438

400:                                              ; preds = %392
  %401 = getelementptr inbounds %class.ResizeArrayRaw, ptr %396, i64 0, i32 3
  %402 = load i32, ptr %401, align 4, !tbaa !30
  %403 = icmp slt i32 %402, %210
  br i1 %403, label %404, label %438

404:                                              ; preds = %400
  %405 = sitofp i32 %402 to float
  %406 = getelementptr inbounds %class.ResizeArrayRaw, ptr %396, i64 0, i32 5
  %407 = load float, ptr %406, align 4, !tbaa !31
  %408 = fmul float %407, %405
  %409 = fptosi float %408 to i32
  %410 = tail call i32 @llvm.smax.i32(i32 %409, i32 %210)
  %411 = sub nsw i32 %410, %402
  %412 = getelementptr inbounds %class.ResizeArrayRaw, ptr %396, i64 0, i32 6
  %413 = load i32, ptr %412, align 8, !tbaa !32
  %414 = icmp slt i32 %411, %413
  %415 = add nsw i32 %413, %402
  %416 = select i1 %414, i32 %415, i32 %410
  %417 = sext i32 %416 to i64
  %418 = shl nsw i64 %417, 1
  %419 = add nsw i64 %418, 31
  %420 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %419) #12
  %421 = getelementptr inbounds i8, ptr %420, i64 31
  %422 = ptrtoint ptr %421 to i64
  %423 = and i64 %422, 31
  %424 = sub nsw i64 0, %423
  %425 = getelementptr inbounds i8, ptr %421, i64 %424
  %426 = load ptr, ptr %396, align 8, !tbaa !33
  %427 = sext i32 %398 to i64
  %428 = shl nsw i64 %427, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %425, ptr align 1 %426, i64 %428, i1 false)
  %429 = icmp eq i32 %402, 0
  br i1 %429, label %435, label %430

430:                                              ; preds = %404
  %431 = getelementptr inbounds %class.ResizeArrayRaw, ptr %396, i64 0, i32 1
  %432 = load ptr, ptr %431, align 8, !tbaa !34
  %433 = icmp eq ptr %432, null
  br i1 %433, label %435, label %434

434:                                              ; preds = %430
  tail call void @_ZdaPv(ptr noundef nonnull %432) #13
  br label %435

435:                                              ; preds = %434, %430, %404
  %436 = getelementptr inbounds %class.ResizeArrayRaw, ptr %396, i64 0, i32 1
  store ptr %420, ptr %436, align 8, !tbaa !34
  store ptr %425, ptr %396, align 8, !tbaa !33
  store i32 %416, ptr %401, align 4, !tbaa !30
  %437 = load ptr, ptr %395, align 8, !tbaa !25
  br label %438

438:                                              ; preds = %392, %400, %435
  %439 = phi ptr [ %396, %392 ], [ %396, %400 ], [ %437, %435 ]
  store i32 %210, ptr %397, align 8, !tbaa !27
  %440 = load ptr, ptr %439, align 8, !tbaa !33
  %441 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %112, i64 0, i32 15, i32 1
  %442 = load ptr, ptr %441, align 8, !tbaa !25
  %443 = getelementptr inbounds %class.ResizeArrayRaw, ptr %442, i64 0, i32 2
  %444 = load i32, ptr %443, align 8, !tbaa !27
  %445 = icmp slt i32 %444, %210
  br i1 %445, label %446, label %484

446:                                              ; preds = %438
  %447 = getelementptr inbounds %class.ResizeArrayRaw, ptr %442, i64 0, i32 3
  %448 = load i32, ptr %447, align 4, !tbaa !30
  %449 = icmp slt i32 %448, %210
  br i1 %449, label %450, label %484

450:                                              ; preds = %446
  %451 = sitofp i32 %448 to float
  %452 = getelementptr inbounds %class.ResizeArrayRaw, ptr %442, i64 0, i32 5
  %453 = load float, ptr %452, align 4, !tbaa !31
  %454 = fmul float %453, %451
  %455 = fptosi float %454 to i32
  %456 = tail call i32 @llvm.smax.i32(i32 %455, i32 %210)
  %457 = sub nsw i32 %456, %448
  %458 = getelementptr inbounds %class.ResizeArrayRaw, ptr %442, i64 0, i32 6
  %459 = load i32, ptr %458, align 8, !tbaa !32
  %460 = icmp slt i32 %457, %459
  %461 = add nsw i32 %459, %448
  %462 = select i1 %460, i32 %461, i32 %456
  %463 = sext i32 %462 to i64
  %464 = shl nsw i64 %463, 1
  %465 = add nsw i64 %464, 31
  %466 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %465) #12
  %467 = getelementptr inbounds i8, ptr %466, i64 31
  %468 = ptrtoint ptr %467 to i64
  %469 = and i64 %468, 31
  %470 = sub nsw i64 0, %469
  %471 = getelementptr inbounds i8, ptr %467, i64 %470
  %472 = load ptr, ptr %442, align 8, !tbaa !33
  %473 = sext i32 %444 to i64
  %474 = shl nsw i64 %473, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %471, ptr align 1 %472, i64 %474, i1 false)
  %475 = icmp eq i32 %448, 0
  br i1 %475, label %481, label %476

476:                                              ; preds = %450
  %477 = getelementptr inbounds %class.ResizeArrayRaw, ptr %442, i64 0, i32 1
  %478 = load ptr, ptr %477, align 8, !tbaa !34
  %479 = icmp eq ptr %478, null
  br i1 %479, label %481, label %480

480:                                              ; preds = %476
  tail call void @_ZdaPv(ptr noundef nonnull %478) #13
  br label %481

481:                                              ; preds = %480, %476, %450
  %482 = getelementptr inbounds %class.ResizeArrayRaw, ptr %442, i64 0, i32 1
  store ptr %466, ptr %482, align 8, !tbaa !34
  store ptr %471, ptr %442, align 8, !tbaa !33
  store i32 %462, ptr %447, align 4, !tbaa !30
  %483 = load ptr, ptr %441, align 8, !tbaa !25
  br label %484

484:                                              ; preds = %438, %446, %481
  %485 = phi ptr [ %442, %438 ], [ %442, %446 ], [ %483, %481 ]
  store i32 %210, ptr %443, align 8, !tbaa !27
  %486 = load ptr, ptr %485, align 8, !tbaa !33
  %487 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %112, i64 0, i32 16, i32 1
  %488 = load ptr, ptr %487, align 8, !tbaa !25
  %489 = getelementptr inbounds %class.ResizeArrayRaw, ptr %488, i64 0, i32 2
  %490 = load i32, ptr %489, align 8, !tbaa !27
  %491 = icmp slt i32 %490, %210
  br i1 %491, label %492, label %530

492:                                              ; preds = %484
  %493 = getelementptr inbounds %class.ResizeArrayRaw, ptr %488, i64 0, i32 3
  %494 = load i32, ptr %493, align 4, !tbaa !30
  %495 = icmp slt i32 %494, %210
  br i1 %495, label %496, label %530

496:                                              ; preds = %492
  %497 = sitofp i32 %494 to float
  %498 = getelementptr inbounds %class.ResizeArrayRaw, ptr %488, i64 0, i32 5
  %499 = load float, ptr %498, align 4, !tbaa !31
  %500 = fmul float %499, %497
  %501 = fptosi float %500 to i32
  %502 = tail call i32 @llvm.smax.i32(i32 %501, i32 %210)
  %503 = sub nsw i32 %502, %494
  %504 = getelementptr inbounds %class.ResizeArrayRaw, ptr %488, i64 0, i32 6
  %505 = load i32, ptr %504, align 8, !tbaa !32
  %506 = icmp slt i32 %503, %505
  %507 = add nsw i32 %505, %494
  %508 = select i1 %506, i32 %507, i32 %502
  %509 = sext i32 %508 to i64
  %510 = shl nsw i64 %509, 1
  %511 = add nsw i64 %510, 31
  %512 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %511) #12
  %513 = getelementptr inbounds i8, ptr %512, i64 31
  %514 = ptrtoint ptr %513 to i64
  %515 = and i64 %514, 31
  %516 = sub nsw i64 0, %515
  %517 = getelementptr inbounds i8, ptr %513, i64 %516
  %518 = load ptr, ptr %488, align 8, !tbaa !33
  %519 = sext i32 %490 to i64
  %520 = shl nsw i64 %519, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %517, ptr align 1 %518, i64 %520, i1 false)
  %521 = icmp eq i32 %494, 0
  br i1 %521, label %527, label %522

522:                                              ; preds = %496
  %523 = getelementptr inbounds %class.ResizeArrayRaw, ptr %488, i64 0, i32 1
  %524 = load ptr, ptr %523, align 8, !tbaa !34
  %525 = icmp eq ptr %524, null
  br i1 %525, label %527, label %526

526:                                              ; preds = %522
  tail call void @_ZdaPv(ptr noundef nonnull %524) #13
  br label %527

527:                                              ; preds = %526, %522, %496
  %528 = getelementptr inbounds %class.ResizeArrayRaw, ptr %488, i64 0, i32 1
  store ptr %512, ptr %528, align 8, !tbaa !34
  store ptr %517, ptr %488, align 8, !tbaa !33
  store i32 %508, ptr %493, align 4, !tbaa !30
  %529 = load ptr, ptr %487, align 8, !tbaa !25
  br label %530

530:                                              ; preds = %484, %492, %527
  %531 = phi ptr [ %488, %484 ], [ %488, %492 ], [ %529, %527 ]
  store i32 %210, ptr %489, align 8, !tbaa !27
  %532 = load ptr, ptr %531, align 8, !tbaa !33
  %533 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %112, i64 0, i32 9, i32 1
  %534 = load ptr, ptr %533, align 8, !tbaa !25
  %535 = getelementptr inbounds %class.ResizeArrayRaw, ptr %534, i64 0, i32 2
  %536 = load i32, ptr %535, align 8, !tbaa !27
  %537 = icmp slt i32 %536, %210
  br i1 %537, label %538, label %576

538:                                              ; preds = %530
  %539 = getelementptr inbounds %class.ResizeArrayRaw, ptr %534, i64 0, i32 3
  %540 = load i32, ptr %539, align 4, !tbaa !30
  %541 = icmp slt i32 %540, %210
  br i1 %541, label %542, label %576

542:                                              ; preds = %538
  %543 = sitofp i32 %540 to float
  %544 = getelementptr inbounds %class.ResizeArrayRaw, ptr %534, i64 0, i32 5
  %545 = load float, ptr %544, align 4, !tbaa !31
  %546 = fmul float %545, %543
  %547 = fptosi float %546 to i32
  %548 = tail call i32 @llvm.smax.i32(i32 %547, i32 %210)
  %549 = sub nsw i32 %548, %540
  %550 = getelementptr inbounds %class.ResizeArrayRaw, ptr %534, i64 0, i32 6
  %551 = load i32, ptr %550, align 8, !tbaa !32
  %552 = icmp slt i32 %549, %551
  %553 = add nsw i32 %551, %540
  %554 = select i1 %552, i32 %553, i32 %548
  %555 = sext i32 %554 to i64
  %556 = shl nsw i64 %555, 1
  %557 = add nsw i64 %556, 31
  %558 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %557) #12
  %559 = getelementptr inbounds i8, ptr %558, i64 31
  %560 = ptrtoint ptr %559 to i64
  %561 = and i64 %560, 31
  %562 = sub nsw i64 0, %561
  %563 = getelementptr inbounds i8, ptr %559, i64 %562
  %564 = load ptr, ptr %534, align 8, !tbaa !33
  %565 = sext i32 %536 to i64
  %566 = shl nsw i64 %565, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %563, ptr align 1 %564, i64 %566, i1 false)
  %567 = icmp eq i32 %540, 0
  br i1 %567, label %573, label %568

568:                                              ; preds = %542
  %569 = getelementptr inbounds %class.ResizeArrayRaw, ptr %534, i64 0, i32 1
  %570 = load ptr, ptr %569, align 8, !tbaa !34
  %571 = icmp eq ptr %570, null
  br i1 %571, label %573, label %572

572:                                              ; preds = %568
  tail call void @_ZdaPv(ptr noundef nonnull %570) #13
  br label %573

573:                                              ; preds = %572, %568, %542
  %574 = getelementptr inbounds %class.ResizeArrayRaw, ptr %534, i64 0, i32 1
  store ptr %558, ptr %574, align 8, !tbaa !34
  store ptr %563, ptr %534, align 8, !tbaa !33
  store i32 %554, ptr %539, align 4, !tbaa !30
  %575 = load ptr, ptr %533, align 8, !tbaa !25
  br label %576

576:                                              ; preds = %530, %538, %573
  %577 = phi ptr [ %534, %530 ], [ %534, %538 ], [ %575, %573 ]
  store i32 %210, ptr %535, align 8, !tbaa !27
  %578 = load ptr, ptr %577, align 8, !tbaa !33
  %579 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %112, i64 0, i32 10, i32 1
  %580 = load ptr, ptr %579, align 8, !tbaa !25
  %581 = getelementptr inbounds %class.ResizeArrayRaw, ptr %580, i64 0, i32 2
  %582 = load i32, ptr %581, align 8, !tbaa !27
  %583 = icmp slt i32 %582, %210
  br i1 %583, label %584, label %622

584:                                              ; preds = %576
  %585 = getelementptr inbounds %class.ResizeArrayRaw, ptr %580, i64 0, i32 3
  %586 = load i32, ptr %585, align 4, !tbaa !30
  %587 = icmp slt i32 %586, %210
  br i1 %587, label %588, label %622

588:                                              ; preds = %584
  %589 = sitofp i32 %586 to float
  %590 = getelementptr inbounds %class.ResizeArrayRaw, ptr %580, i64 0, i32 5
  %591 = load float, ptr %590, align 4, !tbaa !31
  %592 = fmul float %591, %589
  %593 = fptosi float %592 to i32
  %594 = tail call i32 @llvm.smax.i32(i32 %593, i32 %210)
  %595 = sub nsw i32 %594, %586
  %596 = getelementptr inbounds %class.ResizeArrayRaw, ptr %580, i64 0, i32 6
  %597 = load i32, ptr %596, align 8, !tbaa !32
  %598 = icmp slt i32 %595, %597
  %599 = add nsw i32 %597, %586
  %600 = select i1 %598, i32 %599, i32 %594
  %601 = sext i32 %600 to i64
  %602 = shl nsw i64 %601, 1
  %603 = add nsw i64 %602, 31
  %604 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %603) #12
  %605 = getelementptr inbounds i8, ptr %604, i64 31
  %606 = ptrtoint ptr %605 to i64
  %607 = and i64 %606, 31
  %608 = sub nsw i64 0, %607
  %609 = getelementptr inbounds i8, ptr %605, i64 %608
  %610 = load ptr, ptr %580, align 8, !tbaa !33
  %611 = sext i32 %582 to i64
  %612 = shl nsw i64 %611, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %609, ptr align 1 %610, i64 %612, i1 false)
  %613 = icmp eq i32 %586, 0
  br i1 %613, label %619, label %614

614:                                              ; preds = %588
  %615 = getelementptr inbounds %class.ResizeArrayRaw, ptr %580, i64 0, i32 1
  %616 = load ptr, ptr %615, align 8, !tbaa !34
  %617 = icmp eq ptr %616, null
  br i1 %617, label %619, label %618

618:                                              ; preds = %614
  tail call void @_ZdaPv(ptr noundef nonnull %616) #13
  br label %619

619:                                              ; preds = %618, %614, %588
  %620 = getelementptr inbounds %class.ResizeArrayRaw, ptr %580, i64 0, i32 1
  store ptr %604, ptr %620, align 8, !tbaa !34
  store ptr %609, ptr %580, align 8, !tbaa !33
  store i32 %600, ptr %585, align 4, !tbaa !30
  %621 = load ptr, ptr %579, align 8, !tbaa !25
  br label %622

622:                                              ; preds = %576, %584, %619
  %623 = phi ptr [ %580, %576 ], [ %580, %584 ], [ %621, %619 ]
  store i32 %210, ptr %581, align 8, !tbaa !27
  %624 = load ptr, ptr %623, align 8, !tbaa !33
  %625 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %112, i64 0, i32 11, i32 1
  %626 = load ptr, ptr %625, align 8, !tbaa !25
  %627 = getelementptr inbounds %class.ResizeArrayRaw, ptr %626, i64 0, i32 2
  %628 = load i32, ptr %627, align 8, !tbaa !27
  %629 = icmp slt i32 %628, %210
  br i1 %629, label %630, label %668

630:                                              ; preds = %622
  %631 = getelementptr inbounds %class.ResizeArrayRaw, ptr %626, i64 0, i32 3
  %632 = load i32, ptr %631, align 4, !tbaa !30
  %633 = icmp slt i32 %632, %210
  br i1 %633, label %634, label %668

634:                                              ; preds = %630
  %635 = sitofp i32 %632 to float
  %636 = getelementptr inbounds %class.ResizeArrayRaw, ptr %626, i64 0, i32 5
  %637 = load float, ptr %636, align 4, !tbaa !31
  %638 = fmul float %637, %635
  %639 = fptosi float %638 to i32
  %640 = tail call i32 @llvm.smax.i32(i32 %639, i32 %210)
  %641 = sub nsw i32 %640, %632
  %642 = getelementptr inbounds %class.ResizeArrayRaw, ptr %626, i64 0, i32 6
  %643 = load i32, ptr %642, align 8, !tbaa !32
  %644 = icmp slt i32 %641, %643
  %645 = add nsw i32 %643, %632
  %646 = select i1 %644, i32 %645, i32 %640
  %647 = sext i32 %646 to i64
  %648 = shl nsw i64 %647, 1
  %649 = add nsw i64 %648, 31
  %650 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %649) #12
  %651 = getelementptr inbounds i8, ptr %650, i64 31
  %652 = ptrtoint ptr %651 to i64
  %653 = and i64 %652, 31
  %654 = sub nsw i64 0, %653
  %655 = getelementptr inbounds i8, ptr %651, i64 %654
  %656 = load ptr, ptr %626, align 8, !tbaa !33
  %657 = sext i32 %628 to i64
  %658 = shl nsw i64 %657, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %655, ptr align 1 %656, i64 %658, i1 false)
  %659 = icmp eq i32 %632, 0
  br i1 %659, label %665, label %660

660:                                              ; preds = %634
  %661 = getelementptr inbounds %class.ResizeArrayRaw, ptr %626, i64 0, i32 1
  %662 = load ptr, ptr %661, align 8, !tbaa !34
  %663 = icmp eq ptr %662, null
  br i1 %663, label %665, label %664

664:                                              ; preds = %660
  tail call void @_ZdaPv(ptr noundef nonnull %662) #13
  br label %665

665:                                              ; preds = %664, %660, %634
  %666 = getelementptr inbounds %class.ResizeArrayRaw, ptr %626, i64 0, i32 1
  store ptr %650, ptr %666, align 8, !tbaa !34
  store ptr %655, ptr %626, align 8, !tbaa !33
  store i32 %646, ptr %631, align 4, !tbaa !30
  %667 = load ptr, ptr %625, align 8, !tbaa !25
  br label %668

668:                                              ; preds = %622, %630, %665
  %669 = phi ptr [ %626, %622 ], [ %626, %630 ], [ %667, %665 ]
  store i32 %210, ptr %627, align 8, !tbaa !27
  %670 = load ptr, ptr %669, align 8, !tbaa !33
  %671 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %112, i64 0, i32 12, i32 1
  %672 = load ptr, ptr %671, align 8, !tbaa !25
  %673 = getelementptr inbounds %class.ResizeArrayRaw, ptr %672, i64 0, i32 2
  %674 = load i32, ptr %673, align 8, !tbaa !27
  %675 = icmp slt i32 %674, %210
  br i1 %675, label %676, label %714

676:                                              ; preds = %668
  %677 = getelementptr inbounds %class.ResizeArrayRaw, ptr %672, i64 0, i32 3
  %678 = load i32, ptr %677, align 4, !tbaa !30
  %679 = icmp slt i32 %678, %210
  br i1 %679, label %680, label %714

680:                                              ; preds = %676
  %681 = sitofp i32 %678 to float
  %682 = getelementptr inbounds %class.ResizeArrayRaw, ptr %672, i64 0, i32 5
  %683 = load float, ptr %682, align 4, !tbaa !31
  %684 = fmul float %683, %681
  %685 = fptosi float %684 to i32
  %686 = tail call i32 @llvm.smax.i32(i32 %685, i32 %210)
  %687 = sub nsw i32 %686, %678
  %688 = getelementptr inbounds %class.ResizeArrayRaw, ptr %672, i64 0, i32 6
  %689 = load i32, ptr %688, align 8, !tbaa !32
  %690 = icmp slt i32 %687, %689
  %691 = add nsw i32 %689, %678
  %692 = select i1 %690, i32 %691, i32 %686
  %693 = sext i32 %692 to i64
  %694 = shl nsw i64 %693, 1
  %695 = add nsw i64 %694, 31
  %696 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %695) #12
  %697 = getelementptr inbounds i8, ptr %696, i64 31
  %698 = ptrtoint ptr %697 to i64
  %699 = and i64 %698, 31
  %700 = sub nsw i64 0, %699
  %701 = getelementptr inbounds i8, ptr %697, i64 %700
  %702 = load ptr, ptr %672, align 8, !tbaa !33
  %703 = sext i32 %674 to i64
  %704 = shl nsw i64 %703, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %701, ptr align 1 %702, i64 %704, i1 false)
  %705 = icmp eq i32 %678, 0
  br i1 %705, label %711, label %706

706:                                              ; preds = %680
  %707 = getelementptr inbounds %class.ResizeArrayRaw, ptr %672, i64 0, i32 1
  %708 = load ptr, ptr %707, align 8, !tbaa !34
  %709 = icmp eq ptr %708, null
  br i1 %709, label %711, label %710

710:                                              ; preds = %706
  tail call void @_ZdaPv(ptr noundef nonnull %708) #13
  br label %711

711:                                              ; preds = %710, %706, %680
  %712 = getelementptr inbounds %class.ResizeArrayRaw, ptr %672, i64 0, i32 1
  store ptr %696, ptr %712, align 8, !tbaa !34
  store ptr %701, ptr %672, align 8, !tbaa !33
  store i32 %692, ptr %677, align 4, !tbaa !30
  %713 = load ptr, ptr %671, align 8, !tbaa !25
  br label %714

714:                                              ; preds = %668, %676, %711
  %715 = phi ptr [ %672, %668 ], [ %672, %676 ], [ %713, %711 ]
  store i32 %210, ptr %673, align 8, !tbaa !27
  %716 = load ptr, ptr %715, align 8, !tbaa !33
  %717 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %112, i64 0, i32 13, i32 1
  %718 = load ptr, ptr %717, align 8, !tbaa !25
  %719 = getelementptr inbounds %class.ResizeArrayRaw, ptr %718, i64 0, i32 2
  %720 = load i32, ptr %719, align 8, !tbaa !27
  %721 = icmp slt i32 %720, %210
  br i1 %721, label %722, label %760

722:                                              ; preds = %714
  %723 = getelementptr inbounds %class.ResizeArrayRaw, ptr %718, i64 0, i32 3
  %724 = load i32, ptr %723, align 4, !tbaa !30
  %725 = icmp slt i32 %724, %210
  br i1 %725, label %726, label %760

726:                                              ; preds = %722
  %727 = sitofp i32 %724 to float
  %728 = getelementptr inbounds %class.ResizeArrayRaw, ptr %718, i64 0, i32 5
  %729 = load float, ptr %728, align 4, !tbaa !31
  %730 = fmul float %729, %727
  %731 = fptosi float %730 to i32
  %732 = tail call i32 @llvm.smax.i32(i32 %731, i32 %210)
  %733 = sub nsw i32 %732, %724
  %734 = getelementptr inbounds %class.ResizeArrayRaw, ptr %718, i64 0, i32 6
  %735 = load i32, ptr %734, align 8, !tbaa !32
  %736 = icmp slt i32 %733, %735
  %737 = add nsw i32 %735, %724
  %738 = select i1 %736, i32 %737, i32 %732
  %739 = sext i32 %738 to i64
  %740 = shl nsw i64 %739, 1
  %741 = add nsw i64 %740, 31
  %742 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %741) #12
  %743 = getelementptr inbounds i8, ptr %742, i64 31
  %744 = ptrtoint ptr %743 to i64
  %745 = and i64 %744, 31
  %746 = sub nsw i64 0, %745
  %747 = getelementptr inbounds i8, ptr %743, i64 %746
  %748 = load ptr, ptr %718, align 8, !tbaa !33
  %749 = sext i32 %720 to i64
  %750 = shl nsw i64 %749, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %747, ptr align 1 %748, i64 %750, i1 false)
  %751 = icmp eq i32 %724, 0
  br i1 %751, label %757, label %752

752:                                              ; preds = %726
  %753 = getelementptr inbounds %class.ResizeArrayRaw, ptr %718, i64 0, i32 1
  %754 = load ptr, ptr %753, align 8, !tbaa !34
  %755 = icmp eq ptr %754, null
  br i1 %755, label %757, label %756

756:                                              ; preds = %752
  tail call void @_ZdaPv(ptr noundef nonnull %754) #13
  br label %757

757:                                              ; preds = %756, %752, %726
  %758 = getelementptr inbounds %class.ResizeArrayRaw, ptr %718, i64 0, i32 1
  store ptr %742, ptr %758, align 8, !tbaa !34
  store ptr %747, ptr %718, align 8, !tbaa !33
  store i32 %738, ptr %723, align 4, !tbaa !30
  %759 = load ptr, ptr %717, align 8, !tbaa !25
  br label %760

760:                                              ; preds = %714, %722, %757
  %761 = phi ptr [ %718, %714 ], [ %718, %722 ], [ %759, %757 ]
  store i32 %210, ptr %719, align 8, !tbaa !27
  %762 = load ptr, ptr %761, align 8, !tbaa !33
  %763 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %112, i64 0, i32 14, i32 1
  %764 = load ptr, ptr %763, align 8, !tbaa !25
  %765 = getelementptr inbounds %class.ResizeArrayRaw, ptr %764, i64 0, i32 2
  %766 = load i32, ptr %765, align 8, !tbaa !27
  %767 = icmp slt i32 %766, %210
  br i1 %767, label %768, label %806

768:                                              ; preds = %760
  %769 = getelementptr inbounds %class.ResizeArrayRaw, ptr %764, i64 0, i32 3
  %770 = load i32, ptr %769, align 4, !tbaa !30
  %771 = icmp slt i32 %770, %210
  br i1 %771, label %772, label %806

772:                                              ; preds = %768
  %773 = sitofp i32 %770 to float
  %774 = getelementptr inbounds %class.ResizeArrayRaw, ptr %764, i64 0, i32 5
  %775 = load float, ptr %774, align 4, !tbaa !31
  %776 = fmul float %775, %773
  %777 = fptosi float %776 to i32
  %778 = tail call i32 @llvm.smax.i32(i32 %777, i32 %210)
  %779 = sub nsw i32 %778, %770
  %780 = getelementptr inbounds %class.ResizeArrayRaw, ptr %764, i64 0, i32 6
  %781 = load i32, ptr %780, align 8, !tbaa !32
  %782 = icmp slt i32 %779, %781
  %783 = add nsw i32 %781, %770
  %784 = select i1 %782, i32 %783, i32 %778
  %785 = sext i32 %784 to i64
  %786 = shl nsw i64 %785, 1
  %787 = add nsw i64 %786, 31
  %788 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %787) #12
  %789 = getelementptr inbounds i8, ptr %788, i64 31
  %790 = ptrtoint ptr %789 to i64
  %791 = and i64 %790, 31
  %792 = sub nsw i64 0, %791
  %793 = getelementptr inbounds i8, ptr %789, i64 %792
  %794 = load ptr, ptr %764, align 8, !tbaa !33
  %795 = sext i32 %766 to i64
  %796 = shl nsw i64 %795, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %793, ptr align 1 %794, i64 %796, i1 false)
  %797 = icmp eq i32 %770, 0
  br i1 %797, label %803, label %798

798:                                              ; preds = %772
  %799 = getelementptr inbounds %class.ResizeArrayRaw, ptr %764, i64 0, i32 1
  %800 = load ptr, ptr %799, align 8, !tbaa !34
  %801 = icmp eq ptr %800, null
  br i1 %801, label %803, label %802

802:                                              ; preds = %798
  tail call void @_ZdaPv(ptr noundef nonnull %800) #13
  br label %803

803:                                              ; preds = %802, %798, %772
  %804 = getelementptr inbounds %class.ResizeArrayRaw, ptr %764, i64 0, i32 1
  store ptr %788, ptr %804, align 8, !tbaa !34
  store ptr %793, ptr %764, align 8, !tbaa !33
  store i32 %784, ptr %769, align 4, !tbaa !30
  %805 = load ptr, ptr %763, align 8, !tbaa !25
  br label %806

806:                                              ; preds = %760, %768, %803
  %807 = phi ptr [ %764, %760 ], [ %764, %768 ], [ %805, %803 ]
  store i32 %210, ptr %765, align 8, !tbaa !27
  %808 = load ptr, ptr %807, align 8, !tbaa !33
  br i1 %209, label %950, label %809

809:                                              ; preds = %806
  %810 = icmp sgt i32 %103, 0
  br i1 %810, label %811, label %941

811:                                              ; preds = %809
  %812 = zext i32 %103 to i64
  %813 = and i64 %812, 1
  %814 = icmp eq i32 %103, 1
  br i1 %814, label %847, label %815

815:                                              ; preds = %811
  %816 = and i64 %812, 4294967294
  br label %817

817:                                              ; preds = %842, %815
  %818 = phi i64 [ 0, %815 ], [ %844, %842 ]
  %819 = phi i32 [ 0, %815 ], [ %843, %842 ]
  %820 = phi i64 [ 0, %815 ], [ %845, %842 ]
  %821 = getelementptr inbounds %struct.CompAtom, ptr %106, i64 %818, i32 4
  %822 = load i8, ptr %821, align 1
  %823 = and i8 %822, 7
  %824 = icmp eq i8 %823, 0
  br i1 %824, label %830, label %825

825:                                              ; preds = %817
  %826 = trunc i64 %818 to i16
  %827 = add nsw i32 %819, 1
  %828 = sext i32 %819 to i64
  %829 = getelementptr inbounds i16, ptr %256, i64 %828
  store i16 %826, ptr %829, align 2, !tbaa !44
  br label %830

830:                                              ; preds = %817, %825
  %831 = phi i32 [ %827, %825 ], [ %819, %817 ]
  %832 = or i64 %818, 1
  %833 = getelementptr inbounds %struct.CompAtom, ptr %106, i64 %832, i32 4
  %834 = load i8, ptr %833, align 1
  %835 = and i8 %834, 7
  %836 = icmp eq i8 %835, 0
  br i1 %836, label %842, label %837

837:                                              ; preds = %830
  %838 = trunc i64 %832 to i16
  %839 = add nsw i32 %831, 1
  %840 = sext i32 %831 to i64
  %841 = getelementptr inbounds i16, ptr %256, i64 %840
  store i16 %838, ptr %841, align 2, !tbaa !44
  br label %842

842:                                              ; preds = %837, %830
  %843 = phi i32 [ %839, %837 ], [ %831, %830 ]
  %844 = add nuw nsw i64 %818, 2
  %845 = add i64 %820, 2
  %846 = icmp eq i64 %845, %816
  br i1 %846, label %847, label %817

847:                                              ; preds = %842, %811
  %848 = phi i32 [ undef, %811 ], [ %843, %842 ]
  %849 = phi i64 [ 0, %811 ], [ %844, %842 ]
  %850 = phi i32 [ 0, %811 ], [ %843, %842 ]
  %851 = icmp eq i64 %813, 0
  br i1 %851, label %862, label %852

852:                                              ; preds = %847
  %853 = getelementptr inbounds %struct.CompAtom, ptr %106, i64 %849, i32 4
  %854 = load i8, ptr %853, align 1
  %855 = and i8 %854, 7
  %856 = icmp eq i8 %855, 0
  br i1 %856, label %862, label %857

857:                                              ; preds = %852
  %858 = trunc i64 %849 to i16
  %859 = add nsw i32 %850, 1
  %860 = sext i32 %850 to i64
  %861 = getelementptr inbounds i16, ptr %256, i64 %860
  store i16 %858, ptr %861, align 2, !tbaa !44
  br label %862

862:                                              ; preds = %852, %857, %847
  %863 = phi i32 [ %848, %847 ], [ %859, %857 ], [ %850, %852 ]
  %864 = icmp eq i32 %863, 0
  br i1 %864, label %872, label %865

865:                                              ; preds = %862
  %866 = add nsw i32 %863, -1
  %867 = sext i32 %866 to i64
  %868 = getelementptr inbounds i16, ptr %256, i64 %867
  %869 = load i16, ptr %868, align 2, !tbaa !44
  %870 = sext i32 %863 to i64
  %871 = getelementptr inbounds i16, ptr %256, i64 %870
  store i16 %869, ptr %871, align 2, !tbaa !44
  br label %872

872:                                              ; preds = %865, %862
  %873 = load i32, ptr @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4, !tbaa !5
  %874 = icmp ne i32 %873, 0
  %875 = icmp sgt i32 %863, 0
  %876 = and i1 %874, %875
  br i1 %876, label %877, label %941

877:                                              ; preds = %872
  %878 = zext i32 %863 to i64
  %879 = and i64 %878, 1
  %880 = icmp eq i32 %863, 1
  br i1 %880, label %915, label %881

881:                                              ; preds = %877
  %882 = and i64 %878, 4294967294
  br label %883

883:                                              ; preds = %910, %881
  %884 = phi i64 [ 0, %881 ], [ %912, %910 ]
  %885 = phi i32 [ 0, %881 ], [ %911, %910 ]
  %886 = phi i64 [ 0, %881 ], [ %913, %910 ]
  %887 = getelementptr inbounds i16, ptr %256, i64 %884
  %888 = load i16, ptr %887, align 2, !tbaa !44
  %889 = zext i16 %888 to i64
  %890 = getelementptr inbounds %struct.CompAtomExt, ptr %110, i64 %889
  %891 = load i32, ptr %890, align 4
  %892 = icmp sgt i32 %891, -1
  br i1 %892, label %893, label %897

893:                                              ; preds = %883
  %894 = add nsw i32 %885, 1
  %895 = sext i32 %885 to i64
  %896 = getelementptr inbounds i16, ptr %302, i64 %895
  store i16 %888, ptr %896, align 2, !tbaa !44
  br label %897

897:                                              ; preds = %883, %893
  %898 = phi i32 [ %885, %883 ], [ %894, %893 ]
  %899 = or i64 %884, 1
  %900 = getelementptr inbounds i16, ptr %256, i64 %899
  %901 = load i16, ptr %900, align 2, !tbaa !44
  %902 = zext i16 %901 to i64
  %903 = getelementptr inbounds %struct.CompAtomExt, ptr %110, i64 %902
  %904 = load i32, ptr %903, align 4
  %905 = icmp sgt i32 %904, -1
  br i1 %905, label %906, label %910

906:                                              ; preds = %897
  %907 = add nsw i32 %898, 1
  %908 = sext i32 %898 to i64
  %909 = getelementptr inbounds i16, ptr %302, i64 %908
  store i16 %901, ptr %909, align 2, !tbaa !44
  br label %910

910:                                              ; preds = %906, %897
  %911 = phi i32 [ %898, %897 ], [ %907, %906 ]
  %912 = add nuw nsw i64 %884, 2
  %913 = add i64 %886, 2
  %914 = icmp eq i64 %913, %882
  br i1 %914, label %915, label %883

915:                                              ; preds = %910, %877
  %916 = phi i32 [ undef, %877 ], [ %911, %910 ]
  %917 = phi i64 [ 0, %877 ], [ %912, %910 ]
  %918 = phi i32 [ 0, %877 ], [ %911, %910 ]
  %919 = icmp eq i64 %879, 0
  br i1 %919, label %931, label %920

920:                                              ; preds = %915
  %921 = getelementptr inbounds i16, ptr %256, i64 %917
  %922 = load i16, ptr %921, align 2, !tbaa !44
  %923 = zext i16 %922 to i64
  %924 = getelementptr inbounds %struct.CompAtomExt, ptr %110, i64 %923
  %925 = load i32, ptr %924, align 4
  %926 = icmp sgt i32 %925, -1
  br i1 %926, label %927, label %931

927:                                              ; preds = %920
  %928 = add nsw i32 %918, 1
  %929 = sext i32 %918 to i64
  %930 = getelementptr inbounds i16, ptr %302, i64 %929
  store i16 %922, ptr %930, align 2, !tbaa !44
  br label %931

931:                                              ; preds = %920, %927, %915
  %932 = phi i32 [ %916, %915 ], [ %918, %920 ], [ %928, %927 ]
  %933 = icmp eq i32 %932, 0
  br i1 %933, label %941, label %934

934:                                              ; preds = %931
  %935 = add nsw i32 %932, -1
  %936 = sext i32 %935 to i64
  %937 = getelementptr inbounds i16, ptr %302, i64 %936
  %938 = load i16, ptr %937, align 2, !tbaa !44
  %939 = sext i32 %932 to i64
  %940 = getelementptr inbounds i16, ptr %302, i64 %939
  store i16 %938, ptr %940, align 2, !tbaa !44
  br label %941

941:                                              ; preds = %809, %872, %934, %931
  %942 = phi i32 [ %863, %934 ], [ %863, %931 ], [ %863, %872 ], [ 0, %809 ]
  %943 = phi i32 [ %932, %934 ], [ 0, %931 ], [ 0, %872 ], [ 0, %809 ]
  %944 = load i32, ptr %17, align 8, !tbaa !17
  %945 = add nsw i32 %944, 1
  store i32 %945, ptr %17, align 8, !tbaa !17
  %946 = trunc i32 %101 to i16
  %947 = load ptr, ptr %12, align 8, !tbaa !46
  %948 = sext i32 %944 to i64
  %949 = getelementptr inbounds i16, ptr %947, i64 %948
  store i16 %946, ptr %949, align 2, !tbaa !44
  br label %960

950:                                              ; preds = %806
  %951 = load ptr, ptr %12, align 8, !tbaa !46
  %952 = load i32, ptr %17, align 8, !tbaa !17
  %953 = add nsw i32 %952, 1
  store i32 %953, ptr %17, align 8, !tbaa !17
  %954 = sext i32 %952 to i64
  %955 = getelementptr inbounds i16, ptr %951, i64 %954
  %956 = load i16, ptr %955, align 2, !tbaa !44
  %957 = zext i16 %956 to i32
  %958 = icmp eq i32 %101, %957
  br i1 %958, label %960, label %959

959:                                              ; preds = %950
  tail call void @_Z8NAMD_bugPKc(ptr noundef nonnull @.str)
  br label %960

960:                                              ; preds = %950, %959, %941
  %961 = phi i32 [ 0, %959 ], [ 0, %950 ], [ %942, %941 ]
  %962 = phi i32 [ 0, %959 ], [ 0, %950 ], [ %943, %941 ]
  %963 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %112, i64 0, i32 17, i32 1
  %964 = load ptr, ptr %963, align 8, !tbaa !222
  tail call void @_ZN14ResizeArrayRawI6VectorE6resizeEi(ptr noundef nonnull align 8 dereferenceable(36) %964, i32 noundef %101)
  %965 = load ptr, ptr %963, align 8, !tbaa !222
  %966 = load ptr, ptr %965, align 8, !tbaa !224
  %967 = sext i32 %101 to i64
  %968 = mul nsw i64 %967, 24
  tail call void @llvm.memset.p0.i64(ptr align 1 %966, i8 0, i64 %968, i1 false)
  %969 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 18
  %970 = load i32, ptr %969, align 4, !tbaa !48
  %971 = add nsw i32 %970, -1
  %972 = add nsw i32 %101, -1
  %973 = icmp sgt i32 %101, 1
  br i1 %973, label %974, label %3769

974:                                              ; preds = %960
  %975 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 16
  %976 = load i32, ptr %975, align 4, !tbaa !47
  %977 = getelementptr inbounds %class.Molecule, ptr %30, i64 0, i32 1
  %978 = getelementptr inbounds %class.Molecule, ptr %30, i64 0, i32 4
  %979 = getelementptr inbounds %class.Molecule, ptr %30, i64 0, i32 2
  %980 = getelementptr inbounds %class.Molecule, ptr %30, i64 0, i32 3
  %981 = ptrtoint ptr %486 to i64
  %982 = add nsw i32 %103, 30
  %983 = getelementptr inbounds %class.Pairlists, ptr %12, i64 0, i32 2
  %984 = ptrtoint ptr %532 to i64
  %985 = ptrtoint ptr %394 to i64
  %986 = ptrtoint ptr %440 to i64
  %987 = ptrtoint ptr %578 to i64
  %988 = ptrtoint ptr %624 to i64
  %989 = ptrtoint ptr %670 to i64
  %990 = ptrtoint ptr %716 to i64
  %991 = ptrtoint ptr %762 to i64
  %992 = ptrtoint ptr %808 to i64
  %993 = getelementptr inbounds %class.LJTable, ptr %29, i64 0, i32 1
  %994 = getelementptr inbounds %class.LJTable, ptr %29, i64 0, i32 2
  %995 = fneg double %32
  %996 = fadd double %33, -1.000000e+00
  %997 = fadd double %996, 1.000000e+00
  %998 = fneg <2 x double> %73
  %999 = fneg <2 x double> %84
  %1000 = sext i32 %961 to i64
  %1001 = sext i32 %962 to i64
  %1002 = insertelement <2 x double> poison, double %27, i64 0
  %1003 = shufflevector <2 x double> %1002, <2 x double> poison, <2 x i32> zeroinitializer
  %1004 = extractelement <2 x double> %73, i64 1
  %1005 = extractelement <2 x double> %84, i64 1
  %1006 = extractelement <2 x double> %73, i64 1
  %1007 = extractelement <2 x double> %84, i64 1
  br label %1008

1008:                                             ; preds = %974, %3753
  %1009 = phi i32 [ 0, %974 ], [ %3764, %3753 ]
  %1010 = phi i32 [ 0, %974 ], [ %3767, %3753 ]
  %1011 = phi ptr [ null, %974 ], [ %3762, %3753 ]
  %1012 = phi ptr [ null, %974 ], [ %3761, %3753 ]
  %1013 = phi ptr [ null, %974 ], [ %3760, %3753 ]
  %1014 = phi i32 [ 0, %974 ], [ %3759, %3753 ]
  %1015 = phi i32 [ 0, %974 ], [ %3758, %3753 ]
  %1016 = phi i32 [ 0, %974 ], [ %3757, %3753 ]
  %1017 = phi i32 [ 0, %974 ], [ %3756, %3753 ]
  %1018 = phi i32 [ 0, %974 ], [ %3755, %3753 ]
  %1019 = phi i32 [ %976, %974 ], [ %3754, %3753 ]
  %1020 = phi <2 x double> [ zeroinitializer, %974 ], [ %3765, %3753 ]
  %1021 = phi <2 x double> [ zeroinitializer, %974 ], [ %3766, %3753 ]
  %1022 = sext i32 %1010 to i64
  %1023 = getelementptr inbounds %struct.CompAtom, ptr %104, i64 %1022
  %1024 = getelementptr inbounds %struct.CompAtomExt, ptr %108, i64 %1022
  %1025 = getelementptr inbounds %struct.CompAtom, ptr %104, i64 %1022, i32 4
  %1026 = load i8, ptr %1025, align 1
  %1027 = lshr i8 %1026, 3
  %1028 = and i8 %1027, 15
  %1029 = zext i8 %1028 to i32
  %1030 = icmp eq i8 %1028, 0
  br i1 %1030, label %1037, label %1031

1031:                                             ; preds = %1008
  %1032 = icmp eq i32 %1019, 0
  br i1 %1032, label %1037, label %1033

1033:                                             ; preds = %1031
  %1034 = add nsw i32 %1019, -1
  %1035 = add nsw i32 %1010, -1
  %1036 = add i32 %1035, %1029
  br label %3753

1037:                                             ; preds = %1031, %1008
  %1038 = phi i32 [ %1019, %1008 ], [ %971, %1031 ]
  %1039 = load <2 x double>, ptr %1023, align 8, !tbaa !19
  %1040 = fadd <2 x double> %19, %1039
  %1041 = getelementptr inbounds %class.Vector, ptr %1023, i64 0, i32 2
  %1042 = load double, ptr %1041, align 8, !tbaa !49
  %1043 = fadd double %21, %1042
  %1044 = getelementptr inbounds %struct.CompAtom, ptr %104, i64 %1022, i32 3
  %1045 = load i8, ptr %1044, align 2, !tbaa !51
  %1046 = zext i8 %1045 to i32
  %1047 = add nsw i32 %1010, %1029
  %1048 = select i1 %1030, i32 %1014, i32 %1047
  br i1 %209, label %2959, label %1049

1049:                                             ; preds = %1037
  %1050 = load i32, ptr %1024, align 4
  %1051 = shl i32 %1050, 2
  %1052 = ashr exact i32 %1051, 2
  %1053 = load ptr, ptr %977, align 8, !tbaa !52
  %1054 = sext i32 %1052 to i64
  %1055 = getelementptr inbounds %class.ExclusionCheck, ptr %1053, i64 %1054
  %1056 = load i32, ptr %1055, align 8, !tbaa !54
  %1057 = getelementptr inbounds %class.ExclusionCheck, ptr %1053, i64 %1054, i32 1
  %1058 = load i32, ptr %1057, align 4, !tbaa !56
  %1059 = getelementptr inbounds %class.ExclusionCheck, ptr %1053, i64 %1054, i32 2
  %1060 = load ptr, ptr %1059, align 8, !tbaa !57
  %1061 = icmp eq ptr %1060, null
  br i1 %1061, label %1066, label %1062

1062:                                             ; preds = %1049
  %1063 = sext i32 %1056 to i64
  %1064 = sub nsw i64 0, %1063
  %1065 = getelementptr inbounds i8, ptr %1060, i64 %1064
  br label %1292

1066:                                             ; preds = %1049
  %1067 = icmp eq ptr %1011, null
  br i1 %1067, label %1155, label %1068

1068:                                             ; preds = %1066
  %1069 = load i32, ptr %1012, align 4, !tbaa !5
  %1070 = icmp slt i32 %1069, 1
  br i1 %1070, label %1118, label %1071

1071:                                             ; preds = %1068
  %1072 = add nuw i32 %1069, 1
  %1073 = zext i32 %1072 to i64
  %1074 = add nsw i64 %1073, -1
  %1075 = add nsw i64 %1073, -2
  %1076 = and i64 %1074, 3
  %1077 = icmp ult i64 %1075, 3
  br i1 %1077, label %1105, label %1078

1078:                                             ; preds = %1071
  %1079 = and i64 %1074, -4
  br label %1080

1080:                                             ; preds = %1080, %1078
  %1081 = phi i64 [ 1, %1078 ], [ %1102, %1080 ]
  %1082 = phi i64 [ 0, %1078 ], [ %1103, %1080 ]
  %1083 = getelementptr inbounds i32, ptr %1012, i64 %1081
  %1084 = load i32, ptr %1083, align 4, !tbaa !5
  %1085 = sext i32 %1084 to i64
  %1086 = getelementptr inbounds i8, ptr %1011, i64 %1085
  store i8 0, ptr %1086, align 1, !tbaa !58
  %1087 = add nuw nsw i64 %1081, 1
  %1088 = getelementptr inbounds i32, ptr %1012, i64 %1087
  %1089 = load i32, ptr %1088, align 4, !tbaa !5
  %1090 = sext i32 %1089 to i64
  %1091 = getelementptr inbounds i8, ptr %1011, i64 %1090
  store i8 0, ptr %1091, align 1, !tbaa !58
  %1092 = add nuw nsw i64 %1081, 2
  %1093 = getelementptr inbounds i32, ptr %1012, i64 %1092
  %1094 = load i32, ptr %1093, align 4, !tbaa !5
  %1095 = sext i32 %1094 to i64
  %1096 = getelementptr inbounds i8, ptr %1011, i64 %1095
  store i8 0, ptr %1096, align 1, !tbaa !58
  %1097 = add nuw nsw i64 %1081, 3
  %1098 = getelementptr inbounds i32, ptr %1012, i64 %1097
  %1099 = load i32, ptr %1098, align 4, !tbaa !5
  %1100 = sext i32 %1099 to i64
  %1101 = getelementptr inbounds i8, ptr %1011, i64 %1100
  store i8 0, ptr %1101, align 1, !tbaa !58
  %1102 = add nuw nsw i64 %1081, 4
  %1103 = add i64 %1082, 4
  %1104 = icmp eq i64 %1103, %1079
  br i1 %1104, label %1105, label %1080

1105:                                             ; preds = %1080, %1071
  %1106 = phi i64 [ 1, %1071 ], [ %1102, %1080 ]
  %1107 = icmp eq i64 %1076, 0
  br i1 %1107, label %1118, label %1108

1108:                                             ; preds = %1105, %1108
  %1109 = phi i64 [ %1115, %1108 ], [ %1106, %1105 ]
  %1110 = phi i64 [ %1116, %1108 ], [ 0, %1105 ]
  %1111 = getelementptr inbounds i32, ptr %1012, i64 %1109
  %1112 = load i32, ptr %1111, align 4, !tbaa !5
  %1113 = sext i32 %1112 to i64
  %1114 = getelementptr inbounds i8, ptr %1011, i64 %1113
  store i8 0, ptr %1114, align 1, !tbaa !58
  %1115 = add nuw nsw i64 %1109, 1
  %1116 = add i64 %1110, 1
  %1117 = icmp eq i64 %1116, %1076
  br i1 %1117, label %1118, label %1108, !llvm.loop !226

1118:                                             ; preds = %1105, %1108, %1068
  %1119 = load i32, ptr %1013, align 4, !tbaa !5
  %1120 = icmp slt i32 %1119, 1
  br i1 %1120, label %1175, label %1121

1121:                                             ; preds = %1118
  %1122 = add nuw i32 %1119, 1
  %1123 = zext i32 %1122 to i64
  %1124 = add nsw i64 %1123, -1
  %1125 = add nsw i64 %1123, -2
  %1126 = and i64 %1124, 3
  %1127 = icmp ult i64 %1125, 3
  br i1 %1127, label %1162, label %1128

1128:                                             ; preds = %1121
  %1129 = and i64 %1124, -4
  br label %1130

1130:                                             ; preds = %1130, %1128
  %1131 = phi i64 [ 1, %1128 ], [ %1152, %1130 ]
  %1132 = phi i64 [ 0, %1128 ], [ %1153, %1130 ]
  %1133 = getelementptr inbounds i32, ptr %1013, i64 %1131
  %1134 = load i32, ptr %1133, align 4, !tbaa !5
  %1135 = sext i32 %1134 to i64
  %1136 = getelementptr inbounds i8, ptr %1011, i64 %1135
  store i8 0, ptr %1136, align 1, !tbaa !58
  %1137 = add nuw nsw i64 %1131, 1
  %1138 = getelementptr inbounds i32, ptr %1013, i64 %1137
  %1139 = load i32, ptr %1138, align 4, !tbaa !5
  %1140 = sext i32 %1139 to i64
  %1141 = getelementptr inbounds i8, ptr %1011, i64 %1140
  store i8 0, ptr %1141, align 1, !tbaa !58
  %1142 = add nuw nsw i64 %1131, 2
  %1143 = getelementptr inbounds i32, ptr %1013, i64 %1142
  %1144 = load i32, ptr %1143, align 4, !tbaa !5
  %1145 = sext i32 %1144 to i64
  %1146 = getelementptr inbounds i8, ptr %1011, i64 %1145
  store i8 0, ptr %1146, align 1, !tbaa !58
  %1147 = add nuw nsw i64 %1131, 3
  %1148 = getelementptr inbounds i32, ptr %1013, i64 %1147
  %1149 = load i32, ptr %1148, align 4, !tbaa !5
  %1150 = sext i32 %1149 to i64
  %1151 = getelementptr inbounds i8, ptr %1011, i64 %1150
  store i8 0, ptr %1151, align 1, !tbaa !58
  %1152 = add nuw nsw i64 %1131, 4
  %1153 = add i64 %1132, 4
  %1154 = icmp eq i64 %1153, %1129
  br i1 %1154, label %1162, label %1130

1155:                                             ; preds = %1066
  %1156 = load i32, ptr %978, align 8, !tbaa !61
  %1157 = call i32 @llvm.smax.i32(i32 %1156, i32 -1)
  %1158 = sext i32 %1157 to i64
  %1159 = call noalias noundef nonnull ptr @_Znam(i64 noundef %1158) #12
  %1160 = load i32, ptr %978, align 8, !tbaa !61
  %1161 = sext i32 %1160 to i64
  call void @llvm.memset.p0.i64(ptr nonnull align 1 %1159, i8 0, i64 %1161, i1 false)
  br label %1175

1162:                                             ; preds = %1130, %1121
  %1163 = phi i64 [ 1, %1121 ], [ %1152, %1130 ]
  %1164 = icmp eq i64 %1126, 0
  br i1 %1164, label %1175, label %1165

1165:                                             ; preds = %1162, %1165
  %1166 = phi i64 [ %1172, %1165 ], [ %1163, %1162 ]
  %1167 = phi i64 [ %1173, %1165 ], [ 0, %1162 ]
  %1168 = getelementptr inbounds i32, ptr %1013, i64 %1166
  %1169 = load i32, ptr %1168, align 4, !tbaa !5
  %1170 = sext i32 %1169 to i64
  %1171 = getelementptr inbounds i8, ptr %1011, i64 %1170
  store i8 0, ptr %1171, align 1, !tbaa !58
  %1172 = add nuw nsw i64 %1166, 1
  %1173 = add i64 %1167, 1
  %1174 = icmp eq i64 %1173, %1126
  br i1 %1174, label %1175, label %1165, !llvm.loop !227

1175:                                             ; preds = %1162, %1165, %1118, %1155
  %1176 = phi ptr [ %1159, %1155 ], [ %1011, %1118 ], [ %1011, %1165 ], [ %1011, %1162 ]
  %1177 = load i32, ptr %1024, align 4
  %1178 = shl i32 %1177, 2
  %1179 = ashr exact i32 %1178, 2
  %1180 = load ptr, ptr %979, align 8, !tbaa !63
  %1181 = sext i32 %1179 to i64
  %1182 = getelementptr inbounds ptr, ptr %1180, i64 %1181
  %1183 = load ptr, ptr %1182, align 8, !tbaa !23
  %1184 = load i32, ptr %1183, align 4, !tbaa !5
  %1185 = icmp slt i32 %1184, 1
  br i1 %1185, label %1238, label %1186

1186:                                             ; preds = %1175
  %1187 = add nuw i32 %1184, 1
  %1188 = zext i32 %1187 to i64
  %1189 = add nsw i64 %1188, -1
  %1190 = add nsw i64 %1188, -2
  %1191 = and i64 %1189, 3
  %1192 = icmp ult i64 %1190, 3
  br i1 %1192, label %1220, label %1193

1193:                                             ; preds = %1186
  %1194 = and i64 %1189, -4
  br label %1195

1195:                                             ; preds = %1195, %1193
  %1196 = phi i64 [ 1, %1193 ], [ %1217, %1195 ]
  %1197 = phi i64 [ 0, %1193 ], [ %1218, %1195 ]
  %1198 = getelementptr inbounds i32, ptr %1183, i64 %1196
  %1199 = load i32, ptr %1198, align 4, !tbaa !5
  %1200 = sext i32 %1199 to i64
  %1201 = getelementptr inbounds i8, ptr %1176, i64 %1200
  store i8 1, ptr %1201, align 1, !tbaa !58
  %1202 = add nuw nsw i64 %1196, 1
  %1203 = getelementptr inbounds i32, ptr %1183, i64 %1202
  %1204 = load i32, ptr %1203, align 4, !tbaa !5
  %1205 = sext i32 %1204 to i64
  %1206 = getelementptr inbounds i8, ptr %1176, i64 %1205
  store i8 1, ptr %1206, align 1, !tbaa !58
  %1207 = add nuw nsw i64 %1196, 2
  %1208 = getelementptr inbounds i32, ptr %1183, i64 %1207
  %1209 = load i32, ptr %1208, align 4, !tbaa !5
  %1210 = sext i32 %1209 to i64
  %1211 = getelementptr inbounds i8, ptr %1176, i64 %1210
  store i8 1, ptr %1211, align 1, !tbaa !58
  %1212 = add nuw nsw i64 %1196, 3
  %1213 = getelementptr inbounds i32, ptr %1183, i64 %1212
  %1214 = load i32, ptr %1213, align 4, !tbaa !5
  %1215 = sext i32 %1214 to i64
  %1216 = getelementptr inbounds i8, ptr %1176, i64 %1215
  store i8 1, ptr %1216, align 1, !tbaa !58
  %1217 = add nuw nsw i64 %1196, 4
  %1218 = add i64 %1197, 4
  %1219 = icmp eq i64 %1218, %1194
  br i1 %1219, label %1220, label %1195

1220:                                             ; preds = %1195, %1186
  %1221 = phi i64 [ 1, %1186 ], [ %1217, %1195 ]
  %1222 = icmp eq i64 %1191, 0
  br i1 %1222, label %1233, label %1223

1223:                                             ; preds = %1220, %1223
  %1224 = phi i64 [ %1230, %1223 ], [ %1221, %1220 ]
  %1225 = phi i64 [ %1231, %1223 ], [ 0, %1220 ]
  %1226 = getelementptr inbounds i32, ptr %1183, i64 %1224
  %1227 = load i32, ptr %1226, align 4, !tbaa !5
  %1228 = sext i32 %1227 to i64
  %1229 = getelementptr inbounds i8, ptr %1176, i64 %1228
  store i8 1, ptr %1229, align 1, !tbaa !58
  %1230 = add nuw nsw i64 %1224, 1
  %1231 = add i64 %1225, 1
  %1232 = icmp eq i64 %1231, %1191
  br i1 %1232, label %1233, label %1223, !llvm.loop !228

1233:                                             ; preds = %1223, %1220
  %1234 = load i32, ptr %1024, align 4
  %1235 = shl i32 %1234, 2
  %1236 = ashr exact i32 %1235, 2
  %1237 = sext i32 %1236 to i64
  br label %1238

1238:                                             ; preds = %1233, %1175
  %1239 = phi i64 [ %1237, %1233 ], [ %1181, %1175 ]
  %1240 = load ptr, ptr %980, align 8, !tbaa !65
  %1241 = getelementptr inbounds ptr, ptr %1240, i64 %1239
  %1242 = load ptr, ptr %1241, align 8, !tbaa !23
  %1243 = load i32, ptr %1242, align 4, !tbaa !5
  %1244 = icmp slt i32 %1243, 1
  br i1 %1244, label %1292, label %1245

1245:                                             ; preds = %1238
  %1246 = add nuw i32 %1243, 1
  %1247 = zext i32 %1246 to i64
  %1248 = add nsw i64 %1247, -1
  %1249 = add nsw i64 %1247, -2
  %1250 = and i64 %1248, 3
  %1251 = icmp ult i64 %1249, 3
  br i1 %1251, label %1279, label %1252

1252:                                             ; preds = %1245
  %1253 = and i64 %1248, -4
  br label %1254

1254:                                             ; preds = %1254, %1252
  %1255 = phi i64 [ 1, %1252 ], [ %1276, %1254 ]
  %1256 = phi i64 [ 0, %1252 ], [ %1277, %1254 ]
  %1257 = getelementptr inbounds i32, ptr %1242, i64 %1255
  %1258 = load i32, ptr %1257, align 4, !tbaa !5
  %1259 = sext i32 %1258 to i64
  %1260 = getelementptr inbounds i8, ptr %1176, i64 %1259
  store i8 2, ptr %1260, align 1, !tbaa !58
  %1261 = add nuw nsw i64 %1255, 1
  %1262 = getelementptr inbounds i32, ptr %1242, i64 %1261
  %1263 = load i32, ptr %1262, align 4, !tbaa !5
  %1264 = sext i32 %1263 to i64
  %1265 = getelementptr inbounds i8, ptr %1176, i64 %1264
  store i8 2, ptr %1265, align 1, !tbaa !58
  %1266 = add nuw nsw i64 %1255, 2
  %1267 = getelementptr inbounds i32, ptr %1242, i64 %1266
  %1268 = load i32, ptr %1267, align 4, !tbaa !5
  %1269 = sext i32 %1268 to i64
  %1270 = getelementptr inbounds i8, ptr %1176, i64 %1269
  store i8 2, ptr %1270, align 1, !tbaa !58
  %1271 = add nuw nsw i64 %1255, 3
  %1272 = getelementptr inbounds i32, ptr %1242, i64 %1271
  %1273 = load i32, ptr %1272, align 4, !tbaa !5
  %1274 = sext i32 %1273 to i64
  %1275 = getelementptr inbounds i8, ptr %1176, i64 %1274
  store i8 2, ptr %1275, align 1, !tbaa !58
  %1276 = add nuw nsw i64 %1255, 4
  %1277 = add i64 %1256, 4
  %1278 = icmp eq i64 %1277, %1253
  br i1 %1278, label %1279, label %1254

1279:                                             ; preds = %1254, %1245
  %1280 = phi i64 [ 1, %1245 ], [ %1276, %1254 ]
  %1281 = icmp eq i64 %1250, 0
  br i1 %1281, label %1292, label %1282

1282:                                             ; preds = %1279, %1282
  %1283 = phi i64 [ %1289, %1282 ], [ %1280, %1279 ]
  %1284 = phi i64 [ %1290, %1282 ], [ 0, %1279 ]
  %1285 = getelementptr inbounds i32, ptr %1242, i64 %1283
  %1286 = load i32, ptr %1285, align 4, !tbaa !5
  %1287 = sext i32 %1286 to i64
  %1288 = getelementptr inbounds i8, ptr %1176, i64 %1287
  store i8 2, ptr %1288, align 1, !tbaa !58
  %1289 = add nuw nsw i64 %1283, 1
  %1290 = add i64 %1284, 1
  %1291 = icmp eq i64 %1290, %1250
  br i1 %1291, label %1292, label %1282, !llvm.loop !229

1292:                                             ; preds = %1279, %1282, %1238, %1062
  %1293 = phi ptr [ %1065, %1062 ], [ %1176, %1238 ], [ %1176, %1282 ], [ %1176, %1279 ]
  %1294 = phi ptr [ %1013, %1062 ], [ %1242, %1238 ], [ %1242, %1282 ], [ %1242, %1279 ]
  %1295 = phi ptr [ %1012, %1062 ], [ %1183, %1238 ], [ %1183, %1282 ], [ %1183, %1279 ]
  %1296 = phi ptr [ %1011, %1062 ], [ %1176, %1238 ], [ %1176, %1282 ], [ %1176, %1279 ]
  %1297 = load i8, ptr %1025, align 1
  %1298 = and i8 %1297, 7
  %1299 = icmp eq i8 %1298, 0
  br i1 %1299, label %1593, label %1300

1300:                                             ; preds = %1292
  %1301 = load i32, ptr @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4, !tbaa !5
  %1302 = icmp eq i32 %1301, 0
  br i1 %1302, label %1306, label %1303

1303:                                             ; preds = %1300
  %1304 = load i32, ptr %1024, align 4
  %1305 = icmp slt i32 %1304, 0
  br label %1306

1306:                                             ; preds = %1303, %1300
  %1307 = phi i1 [ false, %1300 ], [ %1305, %1303 ]
  %1308 = and i8 %1297, 120
  %1309 = icmp eq i8 %1308, 0
  br i1 %1309, label %1341, label %1310

1310:                                             ; preds = %1306
  %1311 = icmp slt i32 %1015, %961
  br i1 %1311, label %1312, label %1325

1312:                                             ; preds = %1310
  %1313 = sext i32 %1015 to i64
  br label %1314

1314:                                             ; preds = %1312, %1320
  %1315 = phi i64 [ %1313, %1312 ], [ %1321, %1320 ]
  %1316 = getelementptr inbounds i16, ptr %256, i64 %1315
  %1317 = load i16, ptr %1316, align 2, !tbaa !44
  %1318 = zext i16 %1317 to i32
  %1319 = icmp sgt i32 %1048, %1318
  br i1 %1319, label %1320, label %1323

1320:                                             ; preds = %1314
  %1321 = add nsw i64 %1315, 1
  %1322 = icmp eq i64 %1321, %1000
  br i1 %1322, label %1325, label %1314

1323:                                             ; preds = %1314
  %1324 = trunc i64 %1315 to i32
  br label %1325

1325:                                             ; preds = %1320, %1323, %1310
  %1326 = phi i32 [ %1015, %1310 ], [ %1324, %1323 ], [ %961, %1320 ]
  %1327 = icmp slt i32 %1016, %962
  br i1 %1327, label %1328, label %1341

1328:                                             ; preds = %1325
  %1329 = sext i32 %1016 to i64
  br label %1330

1330:                                             ; preds = %1328, %1336
  %1331 = phi i64 [ %1329, %1328 ], [ %1337, %1336 ]
  %1332 = getelementptr inbounds i16, ptr %302, i64 %1331
  %1333 = load i16, ptr %1332, align 2, !tbaa !44
  %1334 = zext i16 %1333 to i32
  %1335 = icmp sgt i32 %1048, %1334
  br i1 %1335, label %1336, label %1339

1336:                                             ; preds = %1330
  %1337 = add nsw i64 %1331, 1
  %1338 = icmp eq i64 %1337, %1001
  br i1 %1338, label %1341, label %1330

1339:                                             ; preds = %1330
  %1340 = trunc i64 %1331 to i32
  br label %1341

1341:                                             ; preds = %1336, %1339, %1325, %1306
  %1342 = phi i32 [ %1016, %1306 ], [ %1016, %1325 ], [ %1340, %1339 ], [ %962, %1336 ]
  %1343 = phi i32 [ %1015, %1306 ], [ %1326, %1325 ], [ %1326, %1339 ], [ %1326, %1336 ]
  %1344 = add nsw i32 %1010, 1
  %1345 = icmp slt i32 %1344, %1048
  br i1 %1345, label %1346, label %1411

1346:                                             ; preds = %1341
  %1347 = xor i32 %1010, -1
  %1348 = add i32 %1048, %1347
  %1349 = zext i32 %1348 to i64
  %1350 = icmp ult i32 %1348, 8
  br i1 %1350, label %1400, label %1351

1351:                                             ; preds = %1346
  %1352 = icmp ult i32 %1348, 64
  br i1 %1352, label %1381, label %1353

1353:                                             ; preds = %1351
  %1354 = and i64 %1349, 4294967232
  %1355 = trunc i32 %1344 to i16
  %1356 = insertelement <16 x i16> poison, i16 %1355, i64 0
  %1357 = shufflevector <16 x i16> %1356, <16 x i16> poison, <16 x i32> zeroinitializer
  %1358 = add <16 x i16> %1357, <i16 0, i16 1, i16 2, i16 3, i16 4, i16 5, i16 6, i16 7, i16 8, i16 9, i16 10, i16 11, i16 12, i16 13, i16 14, i16 15>
  %1359 = trunc i64 %1354 to i32
  %1360 = add i32 %1344, %1359
  br label %1361

1361:                                             ; preds = %1361, %1353
  %1362 = phi i64 [ 0, %1353 ], [ %1371, %1361 ]
  %1363 = phi <16 x i16> [ %1358, %1353 ], [ %1372, %1361 ]
  %1364 = add <16 x i16> %1363, <i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16>
  %1365 = add <16 x i16> %1363, <i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32>
  %1366 = add <16 x i16> %1363, <i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48>
  %1367 = getelementptr inbounds i16, ptr %486, i64 %1362
  store <16 x i16> %1363, ptr %1367, align 2, !tbaa !44
  %1368 = getelementptr inbounds i16, ptr %1367, i64 16
  store <16 x i16> %1364, ptr %1368, align 2, !tbaa !44
  %1369 = getelementptr inbounds i16, ptr %1367, i64 32
  store <16 x i16> %1365, ptr %1369, align 2, !tbaa !44
  %1370 = getelementptr inbounds i16, ptr %1367, i64 48
  store <16 x i16> %1366, ptr %1370, align 2, !tbaa !44
  %1371 = add nuw i64 %1362, 64
  %1372 = add <16 x i16> %1363, <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>
  %1373 = icmp eq i64 %1371, %1354
  br i1 %1373, label %1374, label %1361, !llvm.loop !230

1374:                                             ; preds = %1361
  %1375 = icmp eq i64 %1354, %1349
  br i1 %1375, label %1411, label %1376

1376:                                             ; preds = %1374
  %1377 = trunc i64 %1354 to i32
  %1378 = add i32 %1344, %1377
  %1379 = and i64 %1349, 56
  %1380 = icmp eq i64 %1379, 0
  br i1 %1380, label %1400, label %1381

1381:                                             ; preds = %1351, %1376
  %1382 = phi i32 [ %1360, %1376 ], [ %1344, %1351 ]
  %1383 = phi i64 [ %1354, %1376 ], [ 0, %1351 ]
  %1384 = and i64 %1349, 4294967288
  %1385 = trunc i64 %1384 to i32
  %1386 = add i32 %1344, %1385
  %1387 = trunc i32 %1382 to i16
  %1388 = insertelement <8 x i16> poison, i16 %1387, i64 0
  %1389 = shufflevector <8 x i16> %1388, <8 x i16> poison, <8 x i32> zeroinitializer
  %1390 = add <8 x i16> %1389, <i16 0, i16 1, i16 2, i16 3, i16 4, i16 5, i16 6, i16 7>
  br label %1391

1391:                                             ; preds = %1391, %1381
  %1392 = phi i64 [ %1383, %1381 ], [ %1395, %1391 ]
  %1393 = phi <8 x i16> [ %1390, %1381 ], [ %1396, %1391 ]
  %1394 = getelementptr inbounds i16, ptr %486, i64 %1392
  store <8 x i16> %1393, ptr %1394, align 2, !tbaa !44
  %1395 = add nuw i64 %1392, 8
  %1396 = add <8 x i16> %1393, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %1397 = icmp eq i64 %1395, %1384
  br i1 %1397, label %1398, label %1391, !llvm.loop !231

1398:                                             ; preds = %1391
  %1399 = icmp eq i64 %1384, %1349
  br i1 %1399, label %1411, label %1400

1400:                                             ; preds = %1346, %1376, %1398
  %1401 = phi i64 [ 0, %1346 ], [ %1354, %1376 ], [ %1384, %1398 ]
  %1402 = phi i32 [ %1344, %1346 ], [ %1378, %1376 ], [ %1386, %1398 ]
  br label %1403

1403:                                             ; preds = %1400, %1403
  %1404 = phi i64 [ %1407, %1403 ], [ %1401, %1400 ]
  %1405 = phi i32 [ %1409, %1403 ], [ %1402, %1400 ]
  %1406 = trunc i32 %1405 to i16
  %1407 = add nuw nsw i64 %1404, 1
  %1408 = getelementptr inbounds i16, ptr %486, i64 %1404
  store i16 %1406, ptr %1408, align 2, !tbaa !44
  %1409 = add nsw i32 %1405, 1
  %1410 = icmp eq i64 %1407, %1349
  br i1 %1410, label %1411, label %1403, !llvm.loop !232

1411:                                             ; preds = %1403, %1374, %1398, %1341
  %1412 = phi i32 [ 0, %1341 ], [ %1348, %1398 ], [ %1348, %1374 ], [ %1348, %1403 ]
  %1413 = zext i32 %1412 to i64
  %1414 = getelementptr inbounds i16, ptr %486, i64 %1413
  %1415 = select i1 %1307, ptr %302, ptr %256
  %1416 = select i1 %1307, i32 %1342, i32 %1343
  %1417 = select i1 %1307, i32 %962, i32 %961
  %1418 = icmp slt i32 %1416, %1417
  br i1 %1418, label %1419, label %1578

1419:                                             ; preds = %1411
  %1420 = sub nsw i32 %1417, %1416
  %1421 = icmp sgt i32 %1420, 6
  br i1 %1421, label %1422, label %1515

1422:                                             ; preds = %1419
  %1423 = add nsw i32 %1417, -2
  %1424 = add nsw i32 %1416, 2
  %1425 = icmp slt i32 %1424, %1423
  br i1 %1425, label %1426, label %1515

1426:                                             ; preds = %1422
  %1427 = add nsw i32 %1416, 1
  %1428 = sext i32 %1427 to i64
  %1429 = getelementptr inbounds i16, ptr %1415, i64 %1428
  %1430 = load i16, ptr %1429, align 2, !tbaa !44
  %1431 = zext i16 %1430 to i64
  %1432 = getelementptr inbounds %struct.CompAtom, ptr %106, i64 %1431
  %1433 = getelementptr inbounds %class.Vector, ptr %1432, i64 0, i32 2
  %1434 = load double, ptr %1433, align 8, !tbaa !49
  %1435 = sext i32 %1416 to i64
  %1436 = getelementptr inbounds i16, ptr %1415, i64 %1435
  %1437 = load i16, ptr %1436, align 2, !tbaa !44
  %1438 = zext i16 %1437 to i64
  %1439 = getelementptr inbounds %struct.CompAtom, ptr %106, i64 %1438
  %1440 = getelementptr inbounds %class.Vector, ptr %1439, i64 0, i32 2
  %1441 = load double, ptr %1440, align 8, !tbaa !49
  %1442 = getelementptr inbounds %class.Vector, ptr %1432, i64 0, i32 1
  %1443 = load double, ptr %1442, align 8, !tbaa !67
  %1444 = getelementptr inbounds %class.Vector, ptr %1439, i64 0, i32 1
  %1445 = load double, ptr %1444, align 8, !tbaa !67
  %1446 = load double, ptr %1432, align 8, !tbaa !68
  %1447 = load double, ptr %1439, align 8, !tbaa !68
  %1448 = sext i32 %1424 to i64
  %1449 = sext i32 %1423 to i64
  %1450 = insertelement <2 x double> poison, double %1434, i64 0
  %1451 = insertelement <2 x double> %1450, double %1441, i64 1
  %1452 = insertelement <2 x double> poison, double %1443, i64 0
  %1453 = insertelement <2 x double> %1452, double %1445, i64 1
  %1454 = insertelement <2 x double> poison, double %1446, i64 0
  %1455 = insertelement <2 x double> %1454, double %1447, i64 1
  %1456 = insertelement <2 x double> poison, double %1043, i64 0
  %1457 = shufflevector <2 x double> %1456, <2 x double> poison, <2 x i32> zeroinitializer
  %1458 = shufflevector <2 x double> %1040, <2 x double> poison, <2 x i32> <i32 1, i32 1>
  %1459 = shufflevector <2 x double> %1040, <2 x double> poison, <2 x i32> zeroinitializer
  br label %1460

1460:                                             ; preds = %1426, %1460
  %1461 = phi i64 [ %1448, %1426 ], [ %1506, %1460 ]
  %1462 = phi i32 [ %1416, %1426 ], [ %1508, %1460 ]
  %1463 = phi i32 [ 0, %1426 ], [ %1505, %1460 ]
  %1464 = phi i16 [ %1437, %1426 ], [ %1471, %1460 ]
  %1465 = phi i16 [ %1430, %1426 ], [ %1475, %1460 ]
  %1466 = phi <2 x double> [ %1451, %1426 ], [ %1510, %1460 ]
  %1467 = phi <2 x double> [ %1453, %1426 ], [ %1512, %1460 ]
  %1468 = phi <2 x double> [ %1455, %1426 ], [ %1514, %1460 ]
  %1469 = fsub <2 x double> %1457, %1466
  %1470 = getelementptr inbounds i16, ptr %1415, i64 %1461
  %1471 = load i16, ptr %1470, align 2, !tbaa !44
  %1472 = add nsw i32 %1462, 3
  %1473 = sext i32 %1472 to i64
  %1474 = getelementptr inbounds i16, ptr %1415, i64 %1473
  %1475 = load i16, ptr %1474, align 2, !tbaa !44
  %1476 = zext i16 %1471 to i64
  %1477 = getelementptr inbounds %struct.CompAtom, ptr %106, i64 %1476
  %1478 = load double, ptr %1477, align 8, !tbaa !68
  %1479 = zext i16 %1475 to i64
  %1480 = getelementptr inbounds %struct.CompAtom, ptr %106, i64 %1479
  %1481 = load double, ptr %1480, align 8, !tbaa !68
  %1482 = getelementptr inbounds %class.Vector, ptr %1477, i64 0, i32 1
  %1483 = load double, ptr %1482, align 8, !tbaa !67
  %1484 = getelementptr inbounds %class.Vector, ptr %1480, i64 0, i32 1
  %1485 = load double, ptr %1484, align 8, !tbaa !67
  %1486 = getelementptr inbounds %class.Vector, ptr %1477, i64 0, i32 2
  %1487 = load double, ptr %1486, align 8, !tbaa !49
  %1488 = getelementptr inbounds %class.Vector, ptr %1480, i64 0, i32 2
  %1489 = load double, ptr %1488, align 8, !tbaa !49
  %1490 = fsub <2 x double> %1459, %1468
  %1491 = fmul <2 x double> %1490, %1490
  %1492 = fsub <2 x double> %1458, %1467
  %1493 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %1492, <2 x double> %1492, <2 x double> %1491)
  %1494 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %1469, <2 x double> %1469, <2 x double> %1493)
  %1495 = fcmp olt <2 x double> %1494, %1003
  %1496 = zext i32 %1463 to i64
  %1497 = getelementptr inbounds i16, ptr %348, i64 %1496
  store i16 %1464, ptr %1497, align 2, !tbaa !44
  %1498 = extractelement <2 x i1> %1495, i64 1
  %1499 = zext i1 %1498 to i32
  %1500 = add nuw nsw i32 %1463, %1499
  %1501 = zext i32 %1500 to i64
  %1502 = getelementptr inbounds i16, ptr %348, i64 %1501
  store i16 %1465, ptr %1502, align 2, !tbaa !44
  %1503 = extractelement <2 x i1> %1495, i64 0
  %1504 = zext i1 %1503 to i32
  %1505 = add i32 %1500, %1504
  %1506 = add nsw i64 %1461, 2
  %1507 = icmp slt i64 %1506, %1449
  %1508 = trunc i64 %1461 to i32
  %1509 = insertelement <2 x double> poison, double %1489, i64 0
  %1510 = insertelement <2 x double> %1509, double %1487, i64 1
  %1511 = insertelement <2 x double> poison, double %1485, i64 0
  %1512 = insertelement <2 x double> %1511, double %1483, i64 1
  %1513 = insertelement <2 x double> poison, double %1481, i64 0
  %1514 = insertelement <2 x double> %1513, double %1478, i64 1
  br i1 %1507, label %1460, label %1515

1515:                                             ; preds = %1460, %1422, %1419
  %1516 = phi i32 [ 0, %1419 ], [ 0, %1422 ], [ %1505, %1460 ]
  %1517 = phi i32 [ %1416, %1419 ], [ %1416, %1422 ], [ %1508, %1460 ]
  %1518 = icmp slt i32 %1517, %1417
  br i1 %1518, label %1519, label %1524

1519:                                             ; preds = %1515
  %1520 = sext i32 %1517 to i64
  %1521 = sext i32 %1417 to i64
  %1522 = extractelement <2 x double> %1040, i64 0
  %1523 = extractelement <2 x double> %1040, i64 1
  br label %1529

1524:                                             ; preds = %1552, %1515
  %1525 = phi i32 [ %1516, %1515 ], [ %1553, %1552 ]
  %1526 = icmp sgt i32 %1525, 0
  br i1 %1526, label %1527, label %1578

1527:                                             ; preds = %1524
  %1528 = zext i32 %1525 to i64
  br label %1556

1529:                                             ; preds = %1519, %1552
  %1530 = phi i64 [ %1520, %1519 ], [ %1554, %1552 ]
  %1531 = phi i32 [ %1516, %1519 ], [ %1553, %1552 ]
  %1532 = getelementptr inbounds i16, ptr %1415, i64 %1530
  %1533 = load i16, ptr %1532, align 2, !tbaa !44
  %1534 = zext i16 %1533 to i64
  %1535 = getelementptr inbounds %struct.CompAtom, ptr %106, i64 %1534
  %1536 = load double, ptr %1535, align 8, !tbaa !68
  %1537 = getelementptr inbounds %class.Vector, ptr %1535, i64 0, i32 1
  %1538 = load double, ptr %1537, align 8, !tbaa !67
  %1539 = getelementptr inbounds %class.Vector, ptr %1535, i64 0, i32 2
  %1540 = load double, ptr %1539, align 8, !tbaa !49
  %1541 = fsub double %1522, %1536
  %1542 = fmul double %1541, %1541
  %1543 = fsub double %1523, %1538
  %1544 = call double @llvm.fmuladd.f64(double %1543, double %1543, double %1542)
  %1545 = fsub double %1043, %1540
  %1546 = call double @llvm.fmuladd.f64(double %1545, double %1545, double %1544)
  %1547 = fcmp ugt double %1546, %27
  br i1 %1547, label %1552, label %1548

1548:                                             ; preds = %1529
  %1549 = add nsw i32 %1531, 1
  %1550 = sext i32 %1531 to i64
  %1551 = getelementptr inbounds i16, ptr %348, i64 %1550
  store i16 %1533, ptr %1551, align 2, !tbaa !44
  br label %1552

1552:                                             ; preds = %1548, %1529
  %1553 = phi i32 [ %1549, %1548 ], [ %1531, %1529 ]
  %1554 = add nsw i64 %1530, 1
  %1555 = icmp eq i64 %1554, %1521
  br i1 %1555, label %1524, label %1529

1556:                                             ; preds = %1527, %1573
  %1557 = phi i64 [ 0, %1527 ], [ %1576, %1573 ]
  %1558 = phi ptr [ %1414, %1527 ], [ %1575, %1573 ]
  %1559 = getelementptr inbounds i16, ptr %348, i64 %1557
  %1560 = load i16, ptr %1559, align 2, !tbaa !44
  %1561 = zext i16 %1560 to i64
  %1562 = getelementptr inbounds %struct.CompAtom, ptr %106, i64 %1561, i32 4
  %1563 = load i8, ptr %1562, align 1
  %1564 = and i8 %1563, 7
  store i16 %1560, ptr %1558, align 2, !tbaa !44
  %1565 = getelementptr inbounds i16, ptr %1558, i64 1
  %1566 = insertelement <2 x i16> poison, i16 %1560, i64 0
  %1567 = shufflevector <2 x i16> %1566, <2 x i16> poison, <2 x i32> zeroinitializer
  %1568 = add <2 x i16> %1567, <i16 1, i16 2>
  store <2 x i16> %1568, ptr %1565, align 2, !tbaa !44
  %1569 = icmp ult i8 %1564, 4
  br i1 %1569, label %1573, label %1570

1570:                                             ; preds = %1556
  %1571 = add <2 x i16> %1567, <i16 3, i16 4>
  %1572 = getelementptr inbounds i16, ptr %1558, i64 3
  store <2 x i16> %1571, ptr %1572, align 2, !tbaa !44
  br label %1573

1573:                                             ; preds = %1570, %1556
  %1574 = zext i8 %1564 to i64
  %1575 = getelementptr inbounds i16, ptr %1558, i64 %1574
  %1576 = add nuw nsw i64 %1557, 1
  %1577 = icmp eq i64 %1576, %1528
  br i1 %1577, label %1578, label %1556

1578:                                             ; preds = %1573, %1524, %1411
  %1579 = phi ptr [ %1414, %1411 ], [ %1414, %1524 ], [ %1575, %1573 ]
  %1580 = ptrtoint ptr %1579 to i64
  %1581 = sub i64 %1580, %981
  %1582 = lshr exact i64 %1581, 1
  %1583 = trunc i64 %1582 to i32
  %1584 = icmp eq i32 %1583, 0
  br i1 %1584, label %1596, label %1585

1585:                                             ; preds = %1578
  %1586 = shl i64 %1581, 31
  %1587 = add i64 %1586, -4294967296
  %1588 = ashr i64 %1587, 32
  %1589 = getelementptr inbounds i16, ptr %486, i64 %1588
  %1590 = load i16, ptr %1589, align 2, !tbaa !44
  %1591 = ashr i64 %1586, 32
  %1592 = getelementptr inbounds i16, ptr %486, i64 %1591
  store i16 %1590, ptr %1592, align 2, !tbaa !44
  br label %1596

1593:                                             ; preds = %1292
  %1594 = add nsw i32 %1018, 1
  %1595 = load i32, ptr @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4, !tbaa !5
  br label %1596

1596:                                             ; preds = %1578, %1585, %1593
  %1597 = phi i32 [ %1595, %1593 ], [ %1301, %1585 ], [ %1301, %1578 ]
  %1598 = phi i32 [ %1594, %1593 ], [ 0, %1585 ], [ 0, %1578 ]
  %1599 = phi i32 [ %1017, %1593 ], [ %1583, %1585 ], [ 0, %1578 ]
  %1600 = phi i32 [ %1016, %1593 ], [ %1342, %1585 ], [ %1342, %1578 ]
  %1601 = phi i32 [ %1015, %1593 ], [ %1343, %1585 ], [ %1343, %1578 ]
  %1602 = icmp eq i32 %1597, 0
  br i1 %1602, label %1607, label %1603

1603:                                             ; preds = %1596
  %1604 = load i32, ptr %1024, align 4
  %1605 = and i32 %1604, 1073741824
  %1606 = icmp ne i32 %1605, 0
  br label %1607

1607:                                             ; preds = %1603, %1596
  %1608 = phi i1 [ false, %1596 ], [ %1606, %1603 ]
  %1609 = load i32, ptr %17, align 8, !tbaa !17
  %1610 = add nsw i32 %982, %1609
  %1611 = load i32, ptr %983, align 4, !tbaa !69
  %1612 = icmp sgt i32 %1611, %1610
  br i1 %1612, label %1628, label %1613

1613:                                             ; preds = %1607, %1613
  %1614 = phi i32 [ %1616, %1613 ], [ %1611, %1607 ]
  %1615 = ashr i32 %1614, 1
  %1616 = add nsw i32 %1615, %1614
  %1617 = icmp sgt i32 %1616, %1610
  br i1 %1617, label %1618, label %1613

1618:                                             ; preds = %1613
  %1619 = sext i32 %1616 to i64
  %1620 = icmp slt i32 %1616, 0
  %1621 = shl nsw i64 %1619, 1
  %1622 = select i1 %1620, i64 -1, i64 %1621
  %1623 = call noalias noundef nonnull ptr @_Znam(i64 noundef %1622) #12
  %1624 = load ptr, ptr %12, align 8, !tbaa !46
  %1625 = sext i32 %1609 to i64
  %1626 = shl nsw i64 %1625, 1
  call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 2 %1623, ptr align 2 %1624, i64 %1626, i1 false)
  %1627 = icmp eq ptr %1624, null
  br i1 %1627, label %1632, label %1630

1628:                                             ; preds = %1607
  %1629 = load ptr, ptr %12, align 8, !tbaa !46
  br label %1634

1630:                                             ; preds = %1618
  call void @_ZdaPv(ptr noundef nonnull %1624) #13
  %1631 = load i32, ptr %17, align 8, !tbaa !17
  br label %1632

1632:                                             ; preds = %1630, %1618
  %1633 = phi i32 [ %1631, %1630 ], [ %1609, %1618 ]
  store ptr %1623, ptr %12, align 8, !tbaa !46
  store i32 %1616, ptr %983, align 4, !tbaa !69
  br label %1634

1634:                                             ; preds = %1628, %1632
  %1635 = phi i32 [ %1609, %1628 ], [ %1633, %1632 ]
  %1636 = phi ptr [ %1629, %1628 ], [ %1623, %1632 ]
  %1637 = ptrtoint ptr %1636 to i64
  %1638 = add nsw i32 %1635, 1
  %1639 = sext i32 %1638 to i64
  %1640 = getelementptr inbounds i16, ptr %1636, i64 %1639
  %1641 = icmp slt i32 %1598, %1599
  br i1 %1608, label %1642, label %1690

1642:                                             ; preds = %1634
  br i1 %1641, label %1643, label %1861

1643:                                             ; preds = %1642
  %1644 = sext i32 %1598 to i64
  %1645 = sext i32 %1599 to i64
  %1646 = extractelement <2 x double> %1040, i64 0
  %1647 = extractelement <2 x double> %1040, i64 1
  br label %1648

1648:                                             ; preds = %1643, %1685
  %1649 = phi i64 [ %1644, %1643 ], [ %1688, %1685 ]
  %1650 = phi ptr [ %532, %1643 ], [ %1687, %1685 ]
  %1651 = phi ptr [ %1640, %1643 ], [ %1686, %1685 ]
  %1652 = getelementptr inbounds i16, ptr %486, i64 %1649
  %1653 = load i16, ptr %1652, align 2, !tbaa !44
  %1654 = zext i16 %1653 to i64
  %1655 = getelementptr inbounds %struct.CompAtomExt, ptr %110, i64 %1654
  %1656 = load i32, ptr %1655, align 4
  %1657 = and i32 %1656, 1073741824
  %1658 = icmp eq i32 %1657, 0
  br i1 %1658, label %1659, label %1685

1659:                                             ; preds = %1648
  %1660 = getelementptr inbounds %struct.CompAtom, ptr %106, i64 %1654
  %1661 = getelementptr inbounds %class.Vector, ptr %1660, i64 0, i32 2
  %1662 = load double, ptr %1661, align 8, !tbaa !49
  %1663 = fsub double %1043, %1662
  %1664 = getelementptr inbounds %class.Vector, ptr %1660, i64 0, i32 1
  %1665 = load double, ptr %1664, align 8, !tbaa !67
  %1666 = fsub double %1647, %1665
  %1667 = load double, ptr %1660, align 8, !tbaa !68
  %1668 = fsub double %1646, %1667
  %1669 = fmul double %1668, %1668
  %1670 = call double @llvm.fmuladd.f64(double %1666, double %1666, double %1669)
  %1671 = call double @llvm.fmuladd.f64(double %1663, double %1663, double %1670)
  %1672 = fcmp ugt double %1671, %24
  br i1 %1672, label %1685, label %1673

1673:                                             ; preds = %1659
  %1674 = shl i32 %1656, 2
  %1675 = ashr exact i32 %1674, 2
  %1676 = icmp slt i32 %1675, %1056
  %1677 = icmp sgt i32 %1675, %1058
  %1678 = select i1 %1676, i1 true, i1 %1677
  %1679 = select i1 %1678, ptr %1651, ptr %1650
  %1680 = zext i1 %1678 to i64
  %1681 = getelementptr inbounds i16, ptr %1651, i64 %1680
  %1682 = xor i1 %1678, true
  %1683 = zext i1 %1682 to i64
  %1684 = getelementptr inbounds i16, ptr %1650, i64 %1683
  store i16 %1653, ptr %1679, align 2, !tbaa !44
  br label %1685

1685:                                             ; preds = %1673, %1659, %1648
  %1686 = phi ptr [ %1651, %1648 ], [ %1651, %1659 ], [ %1681, %1673 ]
  %1687 = phi ptr [ %1650, %1648 ], [ %1650, %1659 ], [ %1684, %1673 ]
  %1688 = add nsw i64 %1649, 1
  %1689 = icmp eq i64 %1688, %1645
  br i1 %1689, label %1861, label %1648

1690:                                             ; preds = %1634
  br i1 %1641, label %1691, label %1861

1691:                                             ; preds = %1690
  %1692 = sub nsw i32 %1599, %1598
  %1693 = icmp sgt i32 %1692, 6
  br i1 %1693, label %1694, label %1812

1694:                                             ; preds = %1691
  %1695 = add nsw i32 %1599, -2
  %1696 = add nsw i32 %1598, 2
  %1697 = icmp slt i32 %1696, %1695
  br i1 %1697, label %1698, label %1812

1698:                                             ; preds = %1694
  %1699 = sext i32 %1598 to i64
  %1700 = getelementptr inbounds i16, ptr %486, i64 %1699
  %1701 = load i16, ptr %1700, align 2, !tbaa !44
  %1702 = zext i16 %1701 to i64
  %1703 = getelementptr inbounds %struct.CompAtomExt, ptr %110, i64 %1702
  %1704 = load i32, ptr %1703, align 4
  %1705 = add nsw i32 %1598, 1
  %1706 = sext i32 %1705 to i64
  %1707 = getelementptr inbounds i16, ptr %486, i64 %1706
  %1708 = load i16, ptr %1707, align 2, !tbaa !44
  %1709 = zext i16 %1708 to i64
  %1710 = getelementptr inbounds %struct.CompAtom, ptr %106, i64 %1709
  %1711 = getelementptr inbounds %class.Vector, ptr %1710, i64 0, i32 2
  %1712 = load double, ptr %1711, align 8, !tbaa !49
  %1713 = getelementptr inbounds %struct.CompAtom, ptr %106, i64 %1702
  %1714 = getelementptr inbounds %class.Vector, ptr %1713, i64 0, i32 2
  %1715 = load double, ptr %1714, align 8, !tbaa !49
  %1716 = getelementptr inbounds %class.Vector, ptr %1710, i64 0, i32 1
  %1717 = load double, ptr %1716, align 8, !tbaa !67
  %1718 = getelementptr inbounds %class.Vector, ptr %1713, i64 0, i32 1
  %1719 = load double, ptr %1718, align 8, !tbaa !67
  %1720 = load double, ptr %1710, align 8, !tbaa !68
  %1721 = load double, ptr %1713, align 8, !tbaa !68
  %1722 = sext i32 %1696 to i64
  %1723 = sext i32 %1695 to i64
  %1724 = extractelement <2 x double> %1040, i64 0
  %1725 = extractelement <2 x double> %1040, i64 1
  br label %1726

1726:                                             ; preds = %1698, %1806
  %1727 = phi i64 [ %1722, %1698 ], [ %1809, %1806 ]
  %1728 = phi i64 [ %1709, %1698 ], [ %1766, %1806 ]
  %1729 = phi i32 [ %1704, %1698 ], [ %1794, %1806 ]
  %1730 = phi ptr [ %532, %1698 ], [ %1808, %1806 ]
  %1731 = phi ptr [ %1640, %1698 ], [ %1807, %1806 ]
  %1732 = phi i32 [ %1598, %1698 ], [ %1811, %1806 ]
  %1733 = phi i16 [ %1701, %1698 ], [ %1758, %1806 ]
  %1734 = phi i16 [ %1708, %1698 ], [ %1762, %1806 ]
  %1735 = phi double [ %1721, %1698 ], [ %1765, %1806 ]
  %1736 = phi double [ %1720, %1698 ], [ %1768, %1806 ]
  %1737 = phi double [ %1719, %1698 ], [ %1770, %1806 ]
  %1738 = phi double [ %1717, %1698 ], [ %1772, %1806 ]
  %1739 = phi double [ %1715, %1698 ], [ %1774, %1806 ]
  %1740 = phi double [ %1712, %1698 ], [ %1776, %1806 ]
  %1741 = getelementptr inbounds %struct.CompAtomExt, ptr %110, i64 %1728
  %1742 = load i32, ptr %1741, align 4
  %1743 = shl i32 %1742, 2
  %1744 = ashr exact i32 %1743, 2
  %1745 = fsub double %1724, %1735
  %1746 = fsub double %1724, %1736
  %1747 = fmul double %1745, %1745
  %1748 = fmul double %1746, %1746
  %1749 = fsub double %1725, %1737
  %1750 = fsub double %1725, %1738
  %1751 = call double @llvm.fmuladd.f64(double %1749, double %1749, double %1747)
  %1752 = call double @llvm.fmuladd.f64(double %1750, double %1750, double %1748)
  %1753 = fsub double %1043, %1739
  %1754 = fsub double %1043, %1740
  %1755 = call double @llvm.fmuladd.f64(double %1753, double %1753, double %1751)
  %1756 = call double @llvm.fmuladd.f64(double %1754, double %1754, double %1752)
  %1757 = getelementptr inbounds i16, ptr %486, i64 %1727
  %1758 = load i16, ptr %1757, align 2, !tbaa !44
  %1759 = add nsw i32 %1732, 3
  %1760 = sext i32 %1759 to i64
  %1761 = getelementptr inbounds i16, ptr %486, i64 %1760
  %1762 = load i16, ptr %1761, align 2, !tbaa !44
  %1763 = zext i16 %1758 to i64
  %1764 = getelementptr inbounds %struct.CompAtom, ptr %106, i64 %1763
  %1765 = load double, ptr %1764, align 8, !tbaa !68
  %1766 = zext i16 %1762 to i64
  %1767 = getelementptr inbounds %struct.CompAtom, ptr %106, i64 %1766
  %1768 = load double, ptr %1767, align 8, !tbaa !68
  %1769 = getelementptr inbounds %class.Vector, ptr %1764, i64 0, i32 1
  %1770 = load double, ptr %1769, align 8, !tbaa !67
  %1771 = getelementptr inbounds %class.Vector, ptr %1767, i64 0, i32 1
  %1772 = load double, ptr %1771, align 8, !tbaa !67
  %1773 = getelementptr inbounds %class.Vector, ptr %1764, i64 0, i32 2
  %1774 = load double, ptr %1773, align 8, !tbaa !49
  %1775 = getelementptr inbounds %class.Vector, ptr %1767, i64 0, i32 2
  %1776 = load double, ptr %1775, align 8, !tbaa !49
  %1777 = fcmp ugt double %1755, %24
  br i1 %1777, label %1790, label %1778

1778:                                             ; preds = %1726
  %1779 = shl i32 %1729, 2
  %1780 = ashr exact i32 %1779, 2
  %1781 = icmp slt i32 %1780, %1056
  %1782 = icmp sgt i32 %1780, %1058
  %1783 = select i1 %1781, i1 true, i1 %1782
  %1784 = select i1 %1783, ptr %1731, ptr %1730
  %1785 = zext i1 %1783 to i64
  %1786 = getelementptr inbounds i16, ptr %1731, i64 %1785
  %1787 = xor i1 %1783, true
  %1788 = zext i1 %1787 to i64
  %1789 = getelementptr inbounds i16, ptr %1730, i64 %1788
  store i16 %1733, ptr %1784, align 2, !tbaa !44
  br label %1790

1790:                                             ; preds = %1778, %1726
  %1791 = phi ptr [ %1731, %1726 ], [ %1786, %1778 ]
  %1792 = phi ptr [ %1730, %1726 ], [ %1789, %1778 ]
  %1793 = getelementptr inbounds %struct.CompAtomExt, ptr %110, i64 %1763
  %1794 = load i32, ptr %1793, align 4
  %1795 = fcmp ugt double %1756, %24
  br i1 %1795, label %1806, label %1796

1796:                                             ; preds = %1790
  %1797 = icmp slt i32 %1744, %1056
  %1798 = icmp sgt i32 %1744, %1058
  %1799 = select i1 %1797, i1 true, i1 %1798
  %1800 = select i1 %1799, ptr %1791, ptr %1792
  %1801 = zext i1 %1799 to i64
  %1802 = getelementptr inbounds i16, ptr %1791, i64 %1801
  %1803 = xor i1 %1799, true
  %1804 = zext i1 %1803 to i64
  %1805 = getelementptr inbounds i16, ptr %1792, i64 %1804
  store i16 %1734, ptr %1800, align 2, !tbaa !44
  br label %1806

1806:                                             ; preds = %1796, %1790
  %1807 = phi ptr [ %1791, %1790 ], [ %1802, %1796 ]
  %1808 = phi ptr [ %1792, %1790 ], [ %1805, %1796 ]
  %1809 = add nsw i64 %1727, 2
  %1810 = icmp slt i64 %1809, %1723
  %1811 = trunc i64 %1727 to i32
  br i1 %1810, label %1726, label %1812

1812:                                             ; preds = %1806, %1694, %1691
  %1813 = phi i32 [ %1598, %1691 ], [ %1598, %1694 ], [ %1811, %1806 ]
  %1814 = phi ptr [ %1640, %1691 ], [ %1640, %1694 ], [ %1807, %1806 ]
  %1815 = phi ptr [ %532, %1691 ], [ %532, %1694 ], [ %1808, %1806 ]
  %1816 = icmp slt i32 %1813, %1599
  br i1 %1816, label %1817, label %1861

1817:                                             ; preds = %1812
  %1818 = sext i32 %1813 to i64
  %1819 = sext i32 %1599 to i64
  %1820 = extractelement <2 x double> %1040, i64 0
  %1821 = extractelement <2 x double> %1040, i64 1
  br label %1822

1822:                                             ; preds = %1817, %1856
  %1823 = phi i64 [ %1818, %1817 ], [ %1859, %1856 ]
  %1824 = phi ptr [ %1815, %1817 ], [ %1858, %1856 ]
  %1825 = phi ptr [ %1814, %1817 ], [ %1857, %1856 ]
  %1826 = getelementptr inbounds i16, ptr %486, i64 %1823
  %1827 = load i16, ptr %1826, align 2, !tbaa !44
  %1828 = zext i16 %1827 to i64
  %1829 = getelementptr inbounds %struct.CompAtom, ptr %106, i64 %1828
  %1830 = load double, ptr %1829, align 8, !tbaa !68
  %1831 = getelementptr inbounds %class.Vector, ptr %1829, i64 0, i32 1
  %1832 = load double, ptr %1831, align 8, !tbaa !67
  %1833 = getelementptr inbounds %class.Vector, ptr %1829, i64 0, i32 2
  %1834 = load double, ptr %1833, align 8, !tbaa !49
  %1835 = fsub double %1820, %1830
  %1836 = fmul double %1835, %1835
  %1837 = fsub double %1821, %1832
  %1838 = call double @llvm.fmuladd.f64(double %1837, double %1837, double %1836)
  %1839 = fsub double %1043, %1834
  %1840 = call double @llvm.fmuladd.f64(double %1839, double %1839, double %1838)
  %1841 = fcmp ugt double %1840, %24
  br i1 %1841, label %1856, label %1842

1842:                                             ; preds = %1822
  %1843 = getelementptr inbounds %struct.CompAtomExt, ptr %110, i64 %1828
  %1844 = load i32, ptr %1843, align 4
  %1845 = shl i32 %1844, 2
  %1846 = ashr exact i32 %1845, 2
  %1847 = icmp slt i32 %1846, %1056
  %1848 = icmp sgt i32 %1846, %1058
  %1849 = select i1 %1847, i1 true, i1 %1848
  %1850 = select i1 %1849, ptr %1825, ptr %1824
  %1851 = zext i1 %1849 to i64
  %1852 = getelementptr inbounds i16, ptr %1825, i64 %1851
  %1853 = xor i1 %1849, true
  %1854 = zext i1 %1853 to i64
  %1855 = getelementptr inbounds i16, ptr %1824, i64 %1854
  store i16 %1827, ptr %1850, align 2, !tbaa !44
  br label %1856

1856:                                             ; preds = %1842, %1822
  %1857 = phi ptr [ %1825, %1822 ], [ %1852, %1842 ]
  %1858 = phi ptr [ %1824, %1822 ], [ %1855, %1842 ]
  %1859 = add nsw i64 %1823, 1
  %1860 = icmp eq i64 %1859, %1819
  br i1 %1860, label %1861, label %1822

1861:                                             ; preds = %1856, %1685, %1812, %1642, %1690
  %1862 = phi ptr [ %1640, %1690 ], [ %1640, %1642 ], [ %1814, %1812 ], [ %1686, %1685 ], [ %1857, %1856 ]
  %1863 = phi ptr [ %532, %1690 ], [ %532, %1642 ], [ %1815, %1812 ], [ %1687, %1685 ], [ %1858, %1856 ]
  %1864 = ptrtoint ptr %1862 to i64
  %1865 = ptrtoint ptr %1640 to i64
  %1866 = sub i64 %1864, %1865
  %1867 = lshr exact i64 %1866, 1
  %1868 = trunc i64 %1867 to i32
  %1869 = icmp sgt i32 %1868, 0
  br i1 %1869, label %1870, label %1970

1870:                                             ; preds = %1861
  %1871 = and i64 %1867, 4294967295
  %1872 = and i64 %1867, 1
  %1873 = icmp eq i64 %1871, 1
  br i1 %1873, label %1938, label %1874

1874:                                             ; preds = %1870
  %1875 = sub nsw i64 %1871, %1872
  br label %1876

1876:                                             ; preds = %1931, %1874
  %1877 = phi i64 [ 0, %1874 ], [ %1935, %1931 ]
  %1878 = phi ptr [ %1640, %1874 ], [ %1934, %1931 ]
  %1879 = phi ptr [ %578, %1874 ], [ %1933, %1931 ]
  %1880 = phi ptr [ %716, %1874 ], [ %1932, %1931 ]
  %1881 = phi i64 [ 0, %1874 ], [ %1936, %1931 ]
  %1882 = getelementptr inbounds i16, ptr %1640, i64 %1877
  %1883 = load i16, ptr %1882, align 2, !tbaa !44
  %1884 = zext i16 %1883 to i64
  %1885 = getelementptr inbounds %struct.CompAtom, ptr %106, i64 %1884, i32 3
  %1886 = load i8, ptr %1885, align 2, !tbaa !51
  %1887 = zext i8 %1886 to i32
  %1888 = mul nuw nsw i32 %1887, 3
  %1889 = add nuw nsw i32 %1888, %1046
  %1890 = zext i32 %1889 to i64
  %1891 = getelementptr inbounds [9 x i32], ptr %2, i64 0, i64 %1890
  %1892 = load i32, ptr %1891, align 4, !tbaa !5
  switch i32 %1892, label %1904 [
    i32 0, label %1893
    i32 1, label %1895
    i32 2, label %1897
  ]

1893:                                             ; preds = %1876
  %1894 = getelementptr inbounds i16, ptr %1878, i64 1
  br label %1899

1895:                                             ; preds = %1876
  %1896 = getelementptr inbounds i16, ptr %1879, i64 1
  br label %1899

1897:                                             ; preds = %1876
  %1898 = getelementptr inbounds i16, ptr %1880, i64 1
  br label %1899

1899:                                             ; preds = %1893, %1895, %1897
  %1900 = phi ptr [ %1880, %1897 ], [ %1879, %1895 ], [ %1878, %1893 ]
  %1901 = phi ptr [ %1898, %1897 ], [ %1880, %1895 ], [ %1880, %1893 ]
  %1902 = phi ptr [ %1879, %1897 ], [ %1896, %1895 ], [ %1879, %1893 ]
  %1903 = phi ptr [ %1878, %1897 ], [ %1878, %1895 ], [ %1894, %1893 ]
  store i16 %1883, ptr %1900, align 2, !tbaa !44
  br label %1904

1904:                                             ; preds = %1899, %1876
  %1905 = phi ptr [ %1880, %1876 ], [ %1901, %1899 ]
  %1906 = phi ptr [ %1879, %1876 ], [ %1902, %1899 ]
  %1907 = phi ptr [ %1878, %1876 ], [ %1903, %1899 ]
  %1908 = or i64 %1877, 1
  %1909 = getelementptr inbounds i16, ptr %1640, i64 %1908
  %1910 = load i16, ptr %1909, align 2, !tbaa !44
  %1911 = zext i16 %1910 to i64
  %1912 = getelementptr inbounds %struct.CompAtom, ptr %106, i64 %1911, i32 3
  %1913 = load i8, ptr %1912, align 2, !tbaa !51
  %1914 = zext i8 %1913 to i32
  %1915 = mul nuw nsw i32 %1914, 3
  %1916 = add nuw nsw i32 %1915, %1046
  %1917 = zext i32 %1916 to i64
  %1918 = getelementptr inbounds [9 x i32], ptr %2, i64 0, i64 %1917
  %1919 = load i32, ptr %1918, align 4, !tbaa !5
  switch i32 %1919, label %1931 [
    i32 0, label %1924
    i32 1, label %1922
    i32 2, label %1920
  ]

1920:                                             ; preds = %1904
  %1921 = getelementptr inbounds i16, ptr %1905, i64 1
  br label %1926

1922:                                             ; preds = %1904
  %1923 = getelementptr inbounds i16, ptr %1906, i64 1
  br label %1926

1924:                                             ; preds = %1904
  %1925 = getelementptr inbounds i16, ptr %1907, i64 1
  br label %1926

1926:                                             ; preds = %1924, %1922, %1920
  %1927 = phi ptr [ %1905, %1920 ], [ %1906, %1922 ], [ %1907, %1924 ]
  %1928 = phi ptr [ %1921, %1920 ], [ %1905, %1922 ], [ %1905, %1924 ]
  %1929 = phi ptr [ %1906, %1920 ], [ %1923, %1922 ], [ %1906, %1924 ]
  %1930 = phi ptr [ %1907, %1920 ], [ %1907, %1922 ], [ %1925, %1924 ]
  store i16 %1910, ptr %1927, align 2, !tbaa !44
  br label %1931

1931:                                             ; preds = %1926, %1904
  %1932 = phi ptr [ %1905, %1904 ], [ %1928, %1926 ]
  %1933 = phi ptr [ %1906, %1904 ], [ %1929, %1926 ]
  %1934 = phi ptr [ %1907, %1904 ], [ %1930, %1926 ]
  %1935 = add nuw nsw i64 %1877, 2
  %1936 = add i64 %1881, 2
  %1937 = icmp eq i64 %1936, %1875
  br i1 %1937, label %1938, label %1876

1938:                                             ; preds = %1931, %1870
  %1939 = phi ptr [ undef, %1870 ], [ %1932, %1931 ]
  %1940 = phi ptr [ undef, %1870 ], [ %1933, %1931 ]
  %1941 = phi ptr [ undef, %1870 ], [ %1934, %1931 ]
  %1942 = phi i64 [ 0, %1870 ], [ %1935, %1931 ]
  %1943 = phi ptr [ %1640, %1870 ], [ %1934, %1931 ]
  %1944 = phi ptr [ %578, %1870 ], [ %1933, %1931 ]
  %1945 = phi ptr [ %716, %1870 ], [ %1932, %1931 ]
  %1946 = icmp eq i64 %1872, 0
  br i1 %1946, label %1970, label %1947

1947:                                             ; preds = %1938
  %1948 = getelementptr inbounds i16, ptr %1640, i64 %1942
  %1949 = load i16, ptr %1948, align 2, !tbaa !44
  %1950 = zext i16 %1949 to i64
  %1951 = getelementptr inbounds %struct.CompAtom, ptr %106, i64 %1950, i32 3
  %1952 = load i8, ptr %1951, align 2, !tbaa !51
  %1953 = zext i8 %1952 to i32
  %1954 = mul nuw nsw i32 %1953, 3
  %1955 = add nuw nsw i32 %1954, %1046
  %1956 = zext i32 %1955 to i64
  %1957 = getelementptr inbounds [9 x i32], ptr %2, i64 0, i64 %1956
  %1958 = load i32, ptr %1957, align 4, !tbaa !5
  switch i32 %1958, label %1970 [
    i32 0, label %1963
    i32 1, label %1961
    i32 2, label %1959
  ]

1959:                                             ; preds = %1947
  %1960 = getelementptr inbounds i16, ptr %1945, i64 1
  br label %1965

1961:                                             ; preds = %1947
  %1962 = getelementptr inbounds i16, ptr %1944, i64 1
  br label %1965

1963:                                             ; preds = %1947
  %1964 = getelementptr inbounds i16, ptr %1943, i64 1
  br label %1965

1965:                                             ; preds = %1963, %1961, %1959
  %1966 = phi ptr [ %1945, %1959 ], [ %1944, %1961 ], [ %1943, %1963 ]
  %1967 = phi ptr [ %1960, %1959 ], [ %1945, %1961 ], [ %1945, %1963 ]
  %1968 = phi ptr [ %1944, %1959 ], [ %1962, %1961 ], [ %1944, %1963 ]
  %1969 = phi ptr [ %1943, %1959 ], [ %1943, %1961 ], [ %1964, %1963 ]
  store i16 %1949, ptr %1966, align 2, !tbaa !44
  br label %1970

1970:                                             ; preds = %1938, %1965, %1947, %1861
  %1971 = phi ptr [ %716, %1861 ], [ %1939, %1938 ], [ %1945, %1947 ], [ %1967, %1965 ]
  %1972 = phi ptr [ %578, %1861 ], [ %1940, %1938 ], [ %1944, %1947 ], [ %1968, %1965 ]
  %1973 = phi ptr [ %1640, %1861 ], [ %1941, %1938 ], [ %1943, %1947 ], [ %1969, %1965 ]
  %1974 = ptrtoint ptr %1863 to i64
  %1975 = sub i64 %1974, %984
  %1976 = lshr exact i64 %1975, 1
  %1977 = trunc i64 %1976 to i32
  %1978 = icmp sgt i32 %1977, 0
  br i1 %1978, label %1979, label %2054

1979:                                             ; preds = %1970
  %1980 = and i64 %1976, 4294967295
  br label %1981

1981:                                             ; preds = %1979, %2042
  %1982 = phi i64 [ 0, %1979 ], [ %2052, %2042 ]
  %1983 = phi ptr [ %1973, %1979 ], [ %2051, %2042 ]
  %1984 = phi ptr [ %394, %1979 ], [ %2050, %2042 ]
  %1985 = phi ptr [ %440, %1979 ], [ %2049, %2042 ]
  %1986 = phi ptr [ %1972, %1979 ], [ %2048, %2042 ]
  %1987 = phi ptr [ %624, %1979 ], [ %2047, %2042 ]
  %1988 = phi ptr [ %670, %1979 ], [ %2046, %2042 ]
  %1989 = phi ptr [ %1971, %1979 ], [ %2045, %2042 ]
  %1990 = phi ptr [ %762, %1979 ], [ %2044, %2042 ]
  %1991 = phi ptr [ %808, %1979 ], [ %2043, %2042 ]
  %1992 = getelementptr inbounds i16, ptr %532, i64 %1982
  %1993 = load i16, ptr %1992, align 2, !tbaa !44
  %1994 = zext i16 %1993 to i64
  %1995 = getelementptr inbounds %struct.CompAtomExt, ptr %110, i64 %1994
  %1996 = load i32, ptr %1995, align 4
  %1997 = shl i32 %1996, 2
  %1998 = ashr exact i32 %1997, 2
  %1999 = sext i32 %1998 to i64
  %2000 = getelementptr inbounds i8, ptr %1293, i64 %1999
  %2001 = load i8, ptr %2000, align 1, !tbaa !58
  %2002 = sext i8 %2001 to i32
  %2003 = getelementptr inbounds %struct.CompAtom, ptr %106, i64 %1994, i32 3
  %2004 = load i8, ptr %2003, align 2, !tbaa !51
  %2005 = zext i8 %2004 to i32
  %2006 = mul nuw nsw i32 %2005, 3
  %2007 = add nuw nsw i32 %2006, %1046
  %2008 = zext i32 %2007 to i64
  %2009 = getelementptr inbounds [9 x i32], ptr %2, i64 0, i64 %2008
  %2010 = load i32, ptr %2009, align 4, !tbaa !5
  %2011 = mul nsw i32 %2010, 3
  %2012 = add nsw i32 %2011, %2002
  switch i32 %2012, label %2042 [
    i32 0, label %2013
    i32 1, label %2015
    i32 2, label %2017
    i32 3, label %2019
    i32 6, label %2021
    i32 5, label %2023
    i32 8, label %2025
    i32 4, label %2027
    i32 7, label %2029
  ]

2013:                                             ; preds = %1981
  %2014 = getelementptr inbounds i16, ptr %1983, i64 1
  br label %2031

2015:                                             ; preds = %1981
  %2016 = getelementptr inbounds i16, ptr %1984, i64 1
  br label %2031

2017:                                             ; preds = %1981
  %2018 = getelementptr inbounds i16, ptr %1985, i64 1
  br label %2031

2019:                                             ; preds = %1981
  %2020 = getelementptr inbounds i16, ptr %1986, i64 1
  br label %2031

2021:                                             ; preds = %1981
  %2022 = getelementptr inbounds i16, ptr %1989, i64 1
  br label %2031

2023:                                             ; preds = %1981
  %2024 = getelementptr inbounds i16, ptr %1988, i64 1
  br label %2031

2025:                                             ; preds = %1981
  %2026 = getelementptr inbounds i16, ptr %1991, i64 1
  br label %2031

2027:                                             ; preds = %1981
  %2028 = getelementptr inbounds i16, ptr %1987, i64 1
  br label %2031

2029:                                             ; preds = %1981
  %2030 = getelementptr inbounds i16, ptr %1990, i64 1
  br label %2031

2031:                                             ; preds = %2013, %2015, %2017, %2019, %2021, %2023, %2025, %2027, %2029
  %2032 = phi ptr [ %1990, %2029 ], [ %1987, %2027 ], [ %1991, %2025 ], [ %1988, %2023 ], [ %1989, %2021 ], [ %1986, %2019 ], [ %1985, %2017 ], [ %1984, %2015 ], [ %1983, %2013 ]
  %2033 = phi ptr [ %1991, %2029 ], [ %1991, %2027 ], [ %2026, %2025 ], [ %1991, %2023 ], [ %1991, %2021 ], [ %1991, %2019 ], [ %1991, %2017 ], [ %1991, %2015 ], [ %1991, %2013 ]
  %2034 = phi ptr [ %2030, %2029 ], [ %1990, %2027 ], [ %1990, %2025 ], [ %1990, %2023 ], [ %1990, %2021 ], [ %1990, %2019 ], [ %1990, %2017 ], [ %1990, %2015 ], [ %1990, %2013 ]
  %2035 = phi ptr [ %1989, %2029 ], [ %1989, %2027 ], [ %1989, %2025 ], [ %1989, %2023 ], [ %2022, %2021 ], [ %1989, %2019 ], [ %1989, %2017 ], [ %1989, %2015 ], [ %1989, %2013 ]
  %2036 = phi ptr [ %1988, %2029 ], [ %1988, %2027 ], [ %1988, %2025 ], [ %2024, %2023 ], [ %1988, %2021 ], [ %1988, %2019 ], [ %1988, %2017 ], [ %1988, %2015 ], [ %1988, %2013 ]
  %2037 = phi ptr [ %1987, %2029 ], [ %2028, %2027 ], [ %1987, %2025 ], [ %1987, %2023 ], [ %1987, %2021 ], [ %1987, %2019 ], [ %1987, %2017 ], [ %1987, %2015 ], [ %1987, %2013 ]
  %2038 = phi ptr [ %1986, %2029 ], [ %1986, %2027 ], [ %1986, %2025 ], [ %1986, %2023 ], [ %1986, %2021 ], [ %2020, %2019 ], [ %1986, %2017 ], [ %1986, %2015 ], [ %1986, %2013 ]
  %2039 = phi ptr [ %1985, %2029 ], [ %1985, %2027 ], [ %1985, %2025 ], [ %1985, %2023 ], [ %1985, %2021 ], [ %1985, %2019 ], [ %2018, %2017 ], [ %1985, %2015 ], [ %1985, %2013 ]
  %2040 = phi ptr [ %1984, %2029 ], [ %1984, %2027 ], [ %1984, %2025 ], [ %1984, %2023 ], [ %1984, %2021 ], [ %1984, %2019 ], [ %1984, %2017 ], [ %2016, %2015 ], [ %1984, %2013 ]
  %2041 = phi ptr [ %1983, %2029 ], [ %1983, %2027 ], [ %1983, %2025 ], [ %1983, %2023 ], [ %1983, %2021 ], [ %1983, %2019 ], [ %1983, %2017 ], [ %1983, %2015 ], [ %2014, %2013 ]
  store i16 %1993, ptr %2032, align 2, !tbaa !44
  br label %2042

2042:                                             ; preds = %2031, %1981
  %2043 = phi ptr [ %1991, %1981 ], [ %2033, %2031 ]
  %2044 = phi ptr [ %1990, %1981 ], [ %2034, %2031 ]
  %2045 = phi ptr [ %1989, %1981 ], [ %2035, %2031 ]
  %2046 = phi ptr [ %1988, %1981 ], [ %2036, %2031 ]
  %2047 = phi ptr [ %1987, %1981 ], [ %2037, %2031 ]
  %2048 = phi ptr [ %1986, %1981 ], [ %2038, %2031 ]
  %2049 = phi ptr [ %1985, %1981 ], [ %2039, %2031 ]
  %2050 = phi ptr [ %1984, %1981 ], [ %2040, %2031 ]
  %2051 = phi ptr [ %1983, %1981 ], [ %2041, %2031 ]
  %2052 = add nuw nsw i64 %1982, 1
  %2053 = icmp eq i64 %2052, %1980
  br i1 %2053, label %2054, label %1981

2054:                                             ; preds = %2042, %1970
  %2055 = phi ptr [ %808, %1970 ], [ %2043, %2042 ]
  %2056 = phi ptr [ %762, %1970 ], [ %2044, %2042 ]
  %2057 = phi ptr [ %1971, %1970 ], [ %2045, %2042 ]
  %2058 = phi ptr [ %670, %1970 ], [ %2046, %2042 ]
  %2059 = phi ptr [ %624, %1970 ], [ %2047, %2042 ]
  %2060 = phi ptr [ %1972, %1970 ], [ %2048, %2042 ]
  %2061 = phi ptr [ %440, %1970 ], [ %2049, %2042 ]
  %2062 = phi ptr [ %394, %1970 ], [ %2050, %2042 ]
  %2063 = phi ptr [ %1973, %1970 ], [ %2051, %2042 ]
  %2064 = ptrtoint ptr %2063 to i64
  %2065 = sub i64 %2064, %1865
  %2066 = lshr exact i64 %2065, 1
  %2067 = trunc i64 %2066 to i32
  %2068 = icmp eq i32 %2067, 0
  %2069 = shl i64 %2065, 31
  br i1 %2068, label %2075, label %2070

2070:                                             ; preds = %2054
  %2071 = add i64 %2069, -4294967296
  %2072 = ashr i64 %2071, 32
  %2073 = getelementptr inbounds i16, ptr %1640, i64 %2072
  %2074 = load i16, ptr %2073, align 2, !tbaa !44
  br label %2075

2075:                                             ; preds = %2054, %2070
  %2076 = phi i16 [ %2074, %2070 ], [ -1, %2054 ]
  %2077 = ashr i64 %2069, 32
  %2078 = getelementptr inbounds i16, ptr %1640, i64 %2077
  store i16 %2076, ptr %2078, align 2, !tbaa !44
  %2079 = trunc i64 %2066 to i16
  %2080 = add i16 %2079, 1
  %2081 = load i32, ptr %17, align 8, !tbaa !17
  %2082 = sext i32 %2081 to i64
  %2083 = getelementptr inbounds i16, ptr %1636, i64 %2082
  store i16 %2080, ptr %2083, align 2, !tbaa !44
  %2084 = add nsw i32 %2067, 2
  %2085 = add nsw i32 %2084, %2081
  store i32 %2085, ptr %17, align 8, !tbaa !17
  %2086 = ptrtoint ptr %2062 to i64
  %2087 = sub i64 %2086, %985
  %2088 = lshr exact i64 %2087, 1
  %2089 = trunc i64 %2088 to i32
  %2090 = add nsw i32 %2085, 1
  %2091 = sext i32 %2090 to i64
  %2092 = getelementptr i16, ptr %1636, i64 %2091
  %2093 = icmp sgt i32 %2089, 0
  br i1 %2093, label %2094, label %2184

2094:                                             ; preds = %2075
  %2095 = and i64 %2088, 4294967295
  %2096 = icmp ult i64 %2095, 8
  br i1 %2096, label %2140, label %2097

2097:                                             ; preds = %2094
  %2098 = shl nsw i64 %2091, 1
  %2099 = add i64 %2098, %1637
  %2100 = sub i64 %2099, %985
  %2101 = icmp ult i64 %2100, 128
  br i1 %2101, label %2140, label %2102

2102:                                             ; preds = %2097
  %2103 = icmp ult i64 %2095, 64
  br i1 %2103, label %2127, label %2104

2104:                                             ; preds = %2102
  %2105 = and i64 %2088, 63
  %2106 = sub nsw i64 %2095, %2105
  br label %2107

2107:                                             ; preds = %2107, %2104
  %2108 = phi i64 [ 0, %2104 ], [ %2121, %2107 ]
  %2109 = getelementptr inbounds i16, ptr %394, i64 %2108
  %2110 = load <16 x i16>, ptr %2109, align 2, !tbaa !44
  %2111 = getelementptr inbounds i16, ptr %2109, i64 16
  %2112 = load <16 x i16>, ptr %2111, align 2, !tbaa !44
  %2113 = getelementptr inbounds i16, ptr %2109, i64 32
  %2114 = load <16 x i16>, ptr %2113, align 2, !tbaa !44
  %2115 = getelementptr inbounds i16, ptr %2109, i64 48
  %2116 = load <16 x i16>, ptr %2115, align 2, !tbaa !44
  %2117 = getelementptr inbounds i16, ptr %2092, i64 %2108
  store <16 x i16> %2110, ptr %2117, align 2, !tbaa !44
  %2118 = getelementptr inbounds i16, ptr %2117, i64 16
  store <16 x i16> %2112, ptr %2118, align 2, !tbaa !44
  %2119 = getelementptr inbounds i16, ptr %2117, i64 32
  store <16 x i16> %2114, ptr %2119, align 2, !tbaa !44
  %2120 = getelementptr inbounds i16, ptr %2117, i64 48
  store <16 x i16> %2116, ptr %2120, align 2, !tbaa !44
  %2121 = add nuw i64 %2108, 64
  %2122 = icmp eq i64 %2121, %2106
  br i1 %2122, label %2123, label %2107, !llvm.loop !233

2123:                                             ; preds = %2107
  %2124 = icmp eq i64 %2105, 0
  br i1 %2124, label %2178, label %2125

2125:                                             ; preds = %2123
  %2126 = icmp ult i64 %2105, 8
  br i1 %2126, label %2140, label %2127

2127:                                             ; preds = %2102, %2125
  %2128 = phi i64 [ %2106, %2125 ], [ 0, %2102 ]
  %2129 = and i64 %2088, 7
  %2130 = sub nsw i64 %2095, %2129
  br label %2131

2131:                                             ; preds = %2131, %2127
  %2132 = phi i64 [ %2128, %2127 ], [ %2136, %2131 ]
  %2133 = getelementptr inbounds i16, ptr %394, i64 %2132
  %2134 = load <8 x i16>, ptr %2133, align 2, !tbaa !44
  %2135 = getelementptr inbounds i16, ptr %2092, i64 %2132
  store <8 x i16> %2134, ptr %2135, align 2, !tbaa !44
  %2136 = add nuw i64 %2132, 8
  %2137 = icmp eq i64 %2136, %2130
  br i1 %2137, label %2138, label %2131, !llvm.loop !234

2138:                                             ; preds = %2131
  %2139 = icmp eq i64 %2129, 0
  br i1 %2139, label %2178, label %2140

2140:                                             ; preds = %2097, %2094, %2125, %2138
  %2141 = phi i64 [ 0, %2094 ], [ 0, %2097 ], [ %2106, %2125 ], [ %2130, %2138 ]
  %2142 = sub i64 %2088, %2141
  %2143 = xor i64 %2141, -1
  %2144 = add nsw i64 %2095, %2143
  %2145 = and i64 %2142, 3
  %2146 = icmp eq i64 %2145, 0
  br i1 %2146, label %2156, label %2147

2147:                                             ; preds = %2140, %2147
  %2148 = phi i64 [ %2153, %2147 ], [ %2141, %2140 ]
  %2149 = phi i64 [ %2154, %2147 ], [ 0, %2140 ]
  %2150 = getelementptr inbounds i16, ptr %394, i64 %2148
  %2151 = load i16, ptr %2150, align 2, !tbaa !44
  %2152 = getelementptr inbounds i16, ptr %2092, i64 %2148
  store i16 %2151, ptr %2152, align 2, !tbaa !44
  %2153 = add nuw nsw i64 %2148, 1
  %2154 = add i64 %2149, 1
  %2155 = icmp eq i64 %2154, %2145
  br i1 %2155, label %2156, label %2147, !llvm.loop !235

2156:                                             ; preds = %2147, %2140
  %2157 = phi i64 [ %2141, %2140 ], [ %2153, %2147 ]
  %2158 = icmp ult i64 %2144, 3
  br i1 %2158, label %2178, label %2159

2159:                                             ; preds = %2156, %2159
  %2160 = phi i64 [ %2176, %2159 ], [ %2157, %2156 ]
  %2161 = getelementptr inbounds i16, ptr %394, i64 %2160
  %2162 = load i16, ptr %2161, align 2, !tbaa !44
  %2163 = getelementptr inbounds i16, ptr %2092, i64 %2160
  store i16 %2162, ptr %2163, align 2, !tbaa !44
  %2164 = add nuw nsw i64 %2160, 1
  %2165 = getelementptr inbounds i16, ptr %394, i64 %2164
  %2166 = load i16, ptr %2165, align 2, !tbaa !44
  %2167 = getelementptr inbounds i16, ptr %2092, i64 %2164
  store i16 %2166, ptr %2167, align 2, !tbaa !44
  %2168 = add nuw nsw i64 %2160, 2
  %2169 = getelementptr inbounds i16, ptr %394, i64 %2168
  %2170 = load i16, ptr %2169, align 2, !tbaa !44
  %2171 = getelementptr inbounds i16, ptr %2092, i64 %2168
  store i16 %2170, ptr %2171, align 2, !tbaa !44
  %2172 = add nuw nsw i64 %2160, 3
  %2173 = getelementptr inbounds i16, ptr %394, i64 %2172
  %2174 = load i16, ptr %2173, align 2, !tbaa !44
  %2175 = getelementptr inbounds i16, ptr %2092, i64 %2172
  store i16 %2174, ptr %2175, align 2, !tbaa !44
  %2176 = add nuw nsw i64 %2160, 4
  %2177 = icmp eq i64 %2176, %2095
  br i1 %2177, label %2178, label %2159, !llvm.loop !236

2178:                                             ; preds = %2156, %2159, %2123, %2138
  %2179 = shl i64 %2087, 31
  %2180 = add i64 %2179, -4294967296
  %2181 = ashr i64 %2180, 32
  %2182 = getelementptr inbounds i16, ptr %2092, i64 %2181
  %2183 = load i16, ptr %2182, align 2, !tbaa !44
  br label %2184

2184:                                             ; preds = %2075, %2178
  %2185 = phi i64 [ %2088, %2178 ], [ 0, %2075 ]
  %2186 = phi i16 [ %2183, %2178 ], [ -1, %2075 ]
  %2187 = and i64 %2185, 4294967295
  %2188 = getelementptr inbounds i16, ptr %2092, i64 %2187
  store i16 %2186, ptr %2188, align 2, !tbaa !44
  %2189 = trunc i64 %2088 to i16
  %2190 = add i16 %2189, 1
  %2191 = sext i32 %2085 to i64
  %2192 = getelementptr inbounds i16, ptr %1636, i64 %2191
  store i16 %2190, ptr %2192, align 2, !tbaa !44
  %2193 = add nsw i32 %2089, 2
  %2194 = add nsw i32 %2193, %2085
  %2195 = ptrtoint ptr %2061 to i64
  %2196 = sub i64 %2195, %986
  %2197 = lshr exact i64 %2196, 1
  %2198 = trunc i64 %2197 to i32
  %2199 = add nsw i32 %2194, 1
  %2200 = sext i32 %2199 to i64
  %2201 = getelementptr i16, ptr %1636, i64 %2200
  %2202 = icmp sgt i32 %2198, 0
  br i1 %2202, label %2203, label %2293

2203:                                             ; preds = %2184
  %2204 = and i64 %2197, 4294967295
  %2205 = icmp ult i64 %2204, 8
  br i1 %2205, label %2249, label %2206

2206:                                             ; preds = %2203
  %2207 = shl nsw i64 %2200, 1
  %2208 = add i64 %2207, %1637
  %2209 = sub i64 %2208, %986
  %2210 = icmp ult i64 %2209, 128
  br i1 %2210, label %2249, label %2211

2211:                                             ; preds = %2206
  %2212 = icmp ult i64 %2204, 64
  br i1 %2212, label %2236, label %2213

2213:                                             ; preds = %2211
  %2214 = and i64 %2197, 63
  %2215 = sub nsw i64 %2204, %2214
  br label %2216

2216:                                             ; preds = %2216, %2213
  %2217 = phi i64 [ 0, %2213 ], [ %2230, %2216 ]
  %2218 = getelementptr inbounds i16, ptr %440, i64 %2217
  %2219 = load <16 x i16>, ptr %2218, align 2, !tbaa !44
  %2220 = getelementptr inbounds i16, ptr %2218, i64 16
  %2221 = load <16 x i16>, ptr %2220, align 2, !tbaa !44
  %2222 = getelementptr inbounds i16, ptr %2218, i64 32
  %2223 = load <16 x i16>, ptr %2222, align 2, !tbaa !44
  %2224 = getelementptr inbounds i16, ptr %2218, i64 48
  %2225 = load <16 x i16>, ptr %2224, align 2, !tbaa !44
  %2226 = getelementptr inbounds i16, ptr %2201, i64 %2217
  store <16 x i16> %2219, ptr %2226, align 2, !tbaa !44
  %2227 = getelementptr inbounds i16, ptr %2226, i64 16
  store <16 x i16> %2221, ptr %2227, align 2, !tbaa !44
  %2228 = getelementptr inbounds i16, ptr %2226, i64 32
  store <16 x i16> %2223, ptr %2228, align 2, !tbaa !44
  %2229 = getelementptr inbounds i16, ptr %2226, i64 48
  store <16 x i16> %2225, ptr %2229, align 2, !tbaa !44
  %2230 = add nuw i64 %2217, 64
  %2231 = icmp eq i64 %2230, %2215
  br i1 %2231, label %2232, label %2216, !llvm.loop !237

2232:                                             ; preds = %2216
  %2233 = icmp eq i64 %2214, 0
  br i1 %2233, label %2287, label %2234

2234:                                             ; preds = %2232
  %2235 = icmp ult i64 %2214, 8
  br i1 %2235, label %2249, label %2236

2236:                                             ; preds = %2211, %2234
  %2237 = phi i64 [ %2215, %2234 ], [ 0, %2211 ]
  %2238 = and i64 %2197, 7
  %2239 = sub nsw i64 %2204, %2238
  br label %2240

2240:                                             ; preds = %2240, %2236
  %2241 = phi i64 [ %2237, %2236 ], [ %2245, %2240 ]
  %2242 = getelementptr inbounds i16, ptr %440, i64 %2241
  %2243 = load <8 x i16>, ptr %2242, align 2, !tbaa !44
  %2244 = getelementptr inbounds i16, ptr %2201, i64 %2241
  store <8 x i16> %2243, ptr %2244, align 2, !tbaa !44
  %2245 = add nuw i64 %2241, 8
  %2246 = icmp eq i64 %2245, %2239
  br i1 %2246, label %2247, label %2240, !llvm.loop !238

2247:                                             ; preds = %2240
  %2248 = icmp eq i64 %2238, 0
  br i1 %2248, label %2287, label %2249

2249:                                             ; preds = %2206, %2203, %2234, %2247
  %2250 = phi i64 [ 0, %2203 ], [ 0, %2206 ], [ %2215, %2234 ], [ %2239, %2247 ]
  %2251 = sub i64 %2197, %2250
  %2252 = xor i64 %2250, -1
  %2253 = add nsw i64 %2204, %2252
  %2254 = and i64 %2251, 3
  %2255 = icmp eq i64 %2254, 0
  br i1 %2255, label %2265, label %2256

2256:                                             ; preds = %2249, %2256
  %2257 = phi i64 [ %2262, %2256 ], [ %2250, %2249 ]
  %2258 = phi i64 [ %2263, %2256 ], [ 0, %2249 ]
  %2259 = getelementptr inbounds i16, ptr %440, i64 %2257
  %2260 = load i16, ptr %2259, align 2, !tbaa !44
  %2261 = getelementptr inbounds i16, ptr %2201, i64 %2257
  store i16 %2260, ptr %2261, align 2, !tbaa !44
  %2262 = add nuw nsw i64 %2257, 1
  %2263 = add i64 %2258, 1
  %2264 = icmp eq i64 %2263, %2254
  br i1 %2264, label %2265, label %2256, !llvm.loop !239

2265:                                             ; preds = %2256, %2249
  %2266 = phi i64 [ %2250, %2249 ], [ %2262, %2256 ]
  %2267 = icmp ult i64 %2253, 3
  br i1 %2267, label %2287, label %2268

2268:                                             ; preds = %2265, %2268
  %2269 = phi i64 [ %2285, %2268 ], [ %2266, %2265 ]
  %2270 = getelementptr inbounds i16, ptr %440, i64 %2269
  %2271 = load i16, ptr %2270, align 2, !tbaa !44
  %2272 = getelementptr inbounds i16, ptr %2201, i64 %2269
  store i16 %2271, ptr %2272, align 2, !tbaa !44
  %2273 = add nuw nsw i64 %2269, 1
  %2274 = getelementptr inbounds i16, ptr %440, i64 %2273
  %2275 = load i16, ptr %2274, align 2, !tbaa !44
  %2276 = getelementptr inbounds i16, ptr %2201, i64 %2273
  store i16 %2275, ptr %2276, align 2, !tbaa !44
  %2277 = add nuw nsw i64 %2269, 2
  %2278 = getelementptr inbounds i16, ptr %440, i64 %2277
  %2279 = load i16, ptr %2278, align 2, !tbaa !44
  %2280 = getelementptr inbounds i16, ptr %2201, i64 %2277
  store i16 %2279, ptr %2280, align 2, !tbaa !44
  %2281 = add nuw nsw i64 %2269, 3
  %2282 = getelementptr inbounds i16, ptr %440, i64 %2281
  %2283 = load i16, ptr %2282, align 2, !tbaa !44
  %2284 = getelementptr inbounds i16, ptr %2201, i64 %2281
  store i16 %2283, ptr %2284, align 2, !tbaa !44
  %2285 = add nuw nsw i64 %2269, 4
  %2286 = icmp eq i64 %2285, %2204
  br i1 %2286, label %2287, label %2268, !llvm.loop !240

2287:                                             ; preds = %2265, %2268, %2232, %2247
  %2288 = shl i64 %2196, 31
  %2289 = add i64 %2288, -4294967296
  %2290 = ashr i64 %2289, 32
  %2291 = getelementptr inbounds i16, ptr %2201, i64 %2290
  %2292 = load i16, ptr %2291, align 2, !tbaa !44
  br label %2293

2293:                                             ; preds = %2184, %2287
  %2294 = phi i64 [ %2197, %2287 ], [ 0, %2184 ]
  %2295 = phi i16 [ %2292, %2287 ], [ -1, %2184 ]
  %2296 = and i64 %2294, 4294967295
  %2297 = getelementptr inbounds i16, ptr %2201, i64 %2296
  store i16 %2295, ptr %2297, align 2, !tbaa !44
  %2298 = trunc i64 %2197 to i16
  %2299 = add i16 %2298, 1
  %2300 = sext i32 %2194 to i64
  %2301 = getelementptr inbounds i16, ptr %1636, i64 %2300
  store i16 %2299, ptr %2301, align 2, !tbaa !44
  %2302 = add nsw i32 %2198, 2
  %2303 = add nsw i32 %2302, %2194
  %2304 = ptrtoint ptr %2060 to i64
  %2305 = sub i64 %2304, %987
  %2306 = lshr exact i64 %2305, 1
  %2307 = trunc i64 %2306 to i32
  %2308 = add nsw i32 %2303, 1
  %2309 = sext i32 %2308 to i64
  %2310 = getelementptr i16, ptr %1636, i64 %2309
  %2311 = icmp sgt i32 %2307, 0
  br i1 %2311, label %2312, label %2402

2312:                                             ; preds = %2293
  %2313 = and i64 %2306, 4294967295
  %2314 = icmp ult i64 %2313, 8
  br i1 %2314, label %2358, label %2315

2315:                                             ; preds = %2312
  %2316 = shl nsw i64 %2309, 1
  %2317 = add i64 %2316, %1637
  %2318 = sub i64 %2317, %987
  %2319 = icmp ult i64 %2318, 128
  br i1 %2319, label %2358, label %2320

2320:                                             ; preds = %2315
  %2321 = icmp ult i64 %2313, 64
  br i1 %2321, label %2345, label %2322

2322:                                             ; preds = %2320
  %2323 = and i64 %2306, 63
  %2324 = sub nsw i64 %2313, %2323
  br label %2325

2325:                                             ; preds = %2325, %2322
  %2326 = phi i64 [ 0, %2322 ], [ %2339, %2325 ]
  %2327 = getelementptr inbounds i16, ptr %578, i64 %2326
  %2328 = load <16 x i16>, ptr %2327, align 2, !tbaa !44
  %2329 = getelementptr inbounds i16, ptr %2327, i64 16
  %2330 = load <16 x i16>, ptr %2329, align 2, !tbaa !44
  %2331 = getelementptr inbounds i16, ptr %2327, i64 32
  %2332 = load <16 x i16>, ptr %2331, align 2, !tbaa !44
  %2333 = getelementptr inbounds i16, ptr %2327, i64 48
  %2334 = load <16 x i16>, ptr %2333, align 2, !tbaa !44
  %2335 = getelementptr inbounds i16, ptr %2310, i64 %2326
  store <16 x i16> %2328, ptr %2335, align 2, !tbaa !44
  %2336 = getelementptr inbounds i16, ptr %2335, i64 16
  store <16 x i16> %2330, ptr %2336, align 2, !tbaa !44
  %2337 = getelementptr inbounds i16, ptr %2335, i64 32
  store <16 x i16> %2332, ptr %2337, align 2, !tbaa !44
  %2338 = getelementptr inbounds i16, ptr %2335, i64 48
  store <16 x i16> %2334, ptr %2338, align 2, !tbaa !44
  %2339 = add nuw i64 %2326, 64
  %2340 = icmp eq i64 %2339, %2324
  br i1 %2340, label %2341, label %2325, !llvm.loop !241

2341:                                             ; preds = %2325
  %2342 = icmp eq i64 %2323, 0
  br i1 %2342, label %2396, label %2343

2343:                                             ; preds = %2341
  %2344 = icmp ult i64 %2323, 8
  br i1 %2344, label %2358, label %2345

2345:                                             ; preds = %2320, %2343
  %2346 = phi i64 [ %2324, %2343 ], [ 0, %2320 ]
  %2347 = and i64 %2306, 7
  %2348 = sub nsw i64 %2313, %2347
  br label %2349

2349:                                             ; preds = %2349, %2345
  %2350 = phi i64 [ %2346, %2345 ], [ %2354, %2349 ]
  %2351 = getelementptr inbounds i16, ptr %578, i64 %2350
  %2352 = load <8 x i16>, ptr %2351, align 2, !tbaa !44
  %2353 = getelementptr inbounds i16, ptr %2310, i64 %2350
  store <8 x i16> %2352, ptr %2353, align 2, !tbaa !44
  %2354 = add nuw i64 %2350, 8
  %2355 = icmp eq i64 %2354, %2348
  br i1 %2355, label %2356, label %2349, !llvm.loop !242

2356:                                             ; preds = %2349
  %2357 = icmp eq i64 %2347, 0
  br i1 %2357, label %2396, label %2358

2358:                                             ; preds = %2315, %2312, %2343, %2356
  %2359 = phi i64 [ 0, %2312 ], [ 0, %2315 ], [ %2324, %2343 ], [ %2348, %2356 ]
  %2360 = sub i64 %2306, %2359
  %2361 = xor i64 %2359, -1
  %2362 = add nsw i64 %2313, %2361
  %2363 = and i64 %2360, 3
  %2364 = icmp eq i64 %2363, 0
  br i1 %2364, label %2374, label %2365

2365:                                             ; preds = %2358, %2365
  %2366 = phi i64 [ %2371, %2365 ], [ %2359, %2358 ]
  %2367 = phi i64 [ %2372, %2365 ], [ 0, %2358 ]
  %2368 = getelementptr inbounds i16, ptr %578, i64 %2366
  %2369 = load i16, ptr %2368, align 2, !tbaa !44
  %2370 = getelementptr inbounds i16, ptr %2310, i64 %2366
  store i16 %2369, ptr %2370, align 2, !tbaa !44
  %2371 = add nuw nsw i64 %2366, 1
  %2372 = add i64 %2367, 1
  %2373 = icmp eq i64 %2372, %2363
  br i1 %2373, label %2374, label %2365, !llvm.loop !243

2374:                                             ; preds = %2365, %2358
  %2375 = phi i64 [ %2359, %2358 ], [ %2371, %2365 ]
  %2376 = icmp ult i64 %2362, 3
  br i1 %2376, label %2396, label %2377

2377:                                             ; preds = %2374, %2377
  %2378 = phi i64 [ %2394, %2377 ], [ %2375, %2374 ]
  %2379 = getelementptr inbounds i16, ptr %578, i64 %2378
  %2380 = load i16, ptr %2379, align 2, !tbaa !44
  %2381 = getelementptr inbounds i16, ptr %2310, i64 %2378
  store i16 %2380, ptr %2381, align 2, !tbaa !44
  %2382 = add nuw nsw i64 %2378, 1
  %2383 = getelementptr inbounds i16, ptr %578, i64 %2382
  %2384 = load i16, ptr %2383, align 2, !tbaa !44
  %2385 = getelementptr inbounds i16, ptr %2310, i64 %2382
  store i16 %2384, ptr %2385, align 2, !tbaa !44
  %2386 = add nuw nsw i64 %2378, 2
  %2387 = getelementptr inbounds i16, ptr %578, i64 %2386
  %2388 = load i16, ptr %2387, align 2, !tbaa !44
  %2389 = getelementptr inbounds i16, ptr %2310, i64 %2386
  store i16 %2388, ptr %2389, align 2, !tbaa !44
  %2390 = add nuw nsw i64 %2378, 3
  %2391 = getelementptr inbounds i16, ptr %578, i64 %2390
  %2392 = load i16, ptr %2391, align 2, !tbaa !44
  %2393 = getelementptr inbounds i16, ptr %2310, i64 %2390
  store i16 %2392, ptr %2393, align 2, !tbaa !44
  %2394 = add nuw nsw i64 %2378, 4
  %2395 = icmp eq i64 %2394, %2313
  br i1 %2395, label %2396, label %2377, !llvm.loop !244

2396:                                             ; preds = %2374, %2377, %2341, %2356
  %2397 = shl i64 %2305, 31
  %2398 = add i64 %2397, -4294967296
  %2399 = ashr i64 %2398, 32
  %2400 = getelementptr inbounds i16, ptr %2310, i64 %2399
  %2401 = load i16, ptr %2400, align 2, !tbaa !44
  br label %2402

2402:                                             ; preds = %2293, %2396
  %2403 = phi i64 [ %2306, %2396 ], [ 0, %2293 ]
  %2404 = phi i16 [ %2401, %2396 ], [ -1, %2293 ]
  %2405 = and i64 %2403, 4294967295
  %2406 = getelementptr inbounds i16, ptr %2310, i64 %2405
  store i16 %2404, ptr %2406, align 2, !tbaa !44
  %2407 = trunc i64 %2306 to i16
  %2408 = add i16 %2407, 1
  %2409 = sext i32 %2303 to i64
  %2410 = getelementptr inbounds i16, ptr %1636, i64 %2409
  store i16 %2408, ptr %2410, align 2, !tbaa !44
  %2411 = add nsw i32 %2307, 2
  %2412 = add nsw i32 %2411, %2303
  %2413 = ptrtoint ptr %2059 to i64
  %2414 = sub i64 %2413, %988
  %2415 = lshr exact i64 %2414, 1
  %2416 = trunc i64 %2415 to i32
  %2417 = add nsw i32 %2412, 1
  %2418 = sext i32 %2417 to i64
  %2419 = getelementptr i16, ptr %1636, i64 %2418
  %2420 = icmp sgt i32 %2416, 0
  br i1 %2420, label %2421, label %2511

2421:                                             ; preds = %2402
  %2422 = and i64 %2415, 4294967295
  %2423 = icmp ult i64 %2422, 8
  br i1 %2423, label %2467, label %2424

2424:                                             ; preds = %2421
  %2425 = shl nsw i64 %2418, 1
  %2426 = add i64 %2425, %1637
  %2427 = sub i64 %2426, %988
  %2428 = icmp ult i64 %2427, 128
  br i1 %2428, label %2467, label %2429

2429:                                             ; preds = %2424
  %2430 = icmp ult i64 %2422, 64
  br i1 %2430, label %2454, label %2431

2431:                                             ; preds = %2429
  %2432 = and i64 %2415, 63
  %2433 = sub nsw i64 %2422, %2432
  br label %2434

2434:                                             ; preds = %2434, %2431
  %2435 = phi i64 [ 0, %2431 ], [ %2448, %2434 ]
  %2436 = getelementptr inbounds i16, ptr %624, i64 %2435
  %2437 = load <16 x i16>, ptr %2436, align 2, !tbaa !44
  %2438 = getelementptr inbounds i16, ptr %2436, i64 16
  %2439 = load <16 x i16>, ptr %2438, align 2, !tbaa !44
  %2440 = getelementptr inbounds i16, ptr %2436, i64 32
  %2441 = load <16 x i16>, ptr %2440, align 2, !tbaa !44
  %2442 = getelementptr inbounds i16, ptr %2436, i64 48
  %2443 = load <16 x i16>, ptr %2442, align 2, !tbaa !44
  %2444 = getelementptr inbounds i16, ptr %2419, i64 %2435
  store <16 x i16> %2437, ptr %2444, align 2, !tbaa !44
  %2445 = getelementptr inbounds i16, ptr %2444, i64 16
  store <16 x i16> %2439, ptr %2445, align 2, !tbaa !44
  %2446 = getelementptr inbounds i16, ptr %2444, i64 32
  store <16 x i16> %2441, ptr %2446, align 2, !tbaa !44
  %2447 = getelementptr inbounds i16, ptr %2444, i64 48
  store <16 x i16> %2443, ptr %2447, align 2, !tbaa !44
  %2448 = add nuw i64 %2435, 64
  %2449 = icmp eq i64 %2448, %2433
  br i1 %2449, label %2450, label %2434, !llvm.loop !245

2450:                                             ; preds = %2434
  %2451 = icmp eq i64 %2432, 0
  br i1 %2451, label %2505, label %2452

2452:                                             ; preds = %2450
  %2453 = icmp ult i64 %2432, 8
  br i1 %2453, label %2467, label %2454

2454:                                             ; preds = %2429, %2452
  %2455 = phi i64 [ %2433, %2452 ], [ 0, %2429 ]
  %2456 = and i64 %2415, 7
  %2457 = sub nsw i64 %2422, %2456
  br label %2458

2458:                                             ; preds = %2458, %2454
  %2459 = phi i64 [ %2455, %2454 ], [ %2463, %2458 ]
  %2460 = getelementptr inbounds i16, ptr %624, i64 %2459
  %2461 = load <8 x i16>, ptr %2460, align 2, !tbaa !44
  %2462 = getelementptr inbounds i16, ptr %2419, i64 %2459
  store <8 x i16> %2461, ptr %2462, align 2, !tbaa !44
  %2463 = add nuw i64 %2459, 8
  %2464 = icmp eq i64 %2463, %2457
  br i1 %2464, label %2465, label %2458, !llvm.loop !246

2465:                                             ; preds = %2458
  %2466 = icmp eq i64 %2456, 0
  br i1 %2466, label %2505, label %2467

2467:                                             ; preds = %2424, %2421, %2452, %2465
  %2468 = phi i64 [ 0, %2421 ], [ 0, %2424 ], [ %2433, %2452 ], [ %2457, %2465 ]
  %2469 = sub i64 %2415, %2468
  %2470 = xor i64 %2468, -1
  %2471 = add nsw i64 %2422, %2470
  %2472 = and i64 %2469, 3
  %2473 = icmp eq i64 %2472, 0
  br i1 %2473, label %2483, label %2474

2474:                                             ; preds = %2467, %2474
  %2475 = phi i64 [ %2480, %2474 ], [ %2468, %2467 ]
  %2476 = phi i64 [ %2481, %2474 ], [ 0, %2467 ]
  %2477 = getelementptr inbounds i16, ptr %624, i64 %2475
  %2478 = load i16, ptr %2477, align 2, !tbaa !44
  %2479 = getelementptr inbounds i16, ptr %2419, i64 %2475
  store i16 %2478, ptr %2479, align 2, !tbaa !44
  %2480 = add nuw nsw i64 %2475, 1
  %2481 = add i64 %2476, 1
  %2482 = icmp eq i64 %2481, %2472
  br i1 %2482, label %2483, label %2474, !llvm.loop !247

2483:                                             ; preds = %2474, %2467
  %2484 = phi i64 [ %2468, %2467 ], [ %2480, %2474 ]
  %2485 = icmp ult i64 %2471, 3
  br i1 %2485, label %2505, label %2486

2486:                                             ; preds = %2483, %2486
  %2487 = phi i64 [ %2503, %2486 ], [ %2484, %2483 ]
  %2488 = getelementptr inbounds i16, ptr %624, i64 %2487
  %2489 = load i16, ptr %2488, align 2, !tbaa !44
  %2490 = getelementptr inbounds i16, ptr %2419, i64 %2487
  store i16 %2489, ptr %2490, align 2, !tbaa !44
  %2491 = add nuw nsw i64 %2487, 1
  %2492 = getelementptr inbounds i16, ptr %624, i64 %2491
  %2493 = load i16, ptr %2492, align 2, !tbaa !44
  %2494 = getelementptr inbounds i16, ptr %2419, i64 %2491
  store i16 %2493, ptr %2494, align 2, !tbaa !44
  %2495 = add nuw nsw i64 %2487, 2
  %2496 = getelementptr inbounds i16, ptr %624, i64 %2495
  %2497 = load i16, ptr %2496, align 2, !tbaa !44
  %2498 = getelementptr inbounds i16, ptr %2419, i64 %2495
  store i16 %2497, ptr %2498, align 2, !tbaa !44
  %2499 = add nuw nsw i64 %2487, 3
  %2500 = getelementptr inbounds i16, ptr %624, i64 %2499
  %2501 = load i16, ptr %2500, align 2, !tbaa !44
  %2502 = getelementptr inbounds i16, ptr %2419, i64 %2499
  store i16 %2501, ptr %2502, align 2, !tbaa !44
  %2503 = add nuw nsw i64 %2487, 4
  %2504 = icmp eq i64 %2503, %2422
  br i1 %2504, label %2505, label %2486, !llvm.loop !248

2505:                                             ; preds = %2483, %2486, %2450, %2465
  %2506 = shl i64 %2414, 31
  %2507 = add i64 %2506, -4294967296
  %2508 = ashr i64 %2507, 32
  %2509 = getelementptr inbounds i16, ptr %2419, i64 %2508
  %2510 = load i16, ptr %2509, align 2, !tbaa !44
  br label %2511

2511:                                             ; preds = %2402, %2505
  %2512 = phi i64 [ %2415, %2505 ], [ 0, %2402 ]
  %2513 = phi i16 [ %2510, %2505 ], [ -1, %2402 ]
  %2514 = and i64 %2512, 4294967295
  %2515 = getelementptr inbounds i16, ptr %2419, i64 %2514
  store i16 %2513, ptr %2515, align 2, !tbaa !44
  %2516 = trunc i64 %2415 to i16
  %2517 = add i16 %2516, 1
  %2518 = sext i32 %2412 to i64
  %2519 = getelementptr inbounds i16, ptr %1636, i64 %2518
  store i16 %2517, ptr %2519, align 2, !tbaa !44
  %2520 = add nsw i32 %2416, 2
  %2521 = add nsw i32 %2520, %2412
  store i32 %2521, ptr %17, align 8, !tbaa !17
  %2522 = ptrtoint ptr %2058 to i64
  %2523 = sub i64 %2522, %989
  %2524 = lshr exact i64 %2523, 1
  %2525 = trunc i64 %2524 to i32
  %2526 = add nsw i32 %2521, 1
  %2527 = sext i32 %2526 to i64
  %2528 = getelementptr i16, ptr %1636, i64 %2527
  %2529 = icmp sgt i32 %2525, 0
  br i1 %2529, label %2530, label %2620

2530:                                             ; preds = %2511
  %2531 = and i64 %2524, 4294967295
  %2532 = icmp ult i64 %2531, 8
  br i1 %2532, label %2576, label %2533

2533:                                             ; preds = %2530
  %2534 = shl nsw i64 %2527, 1
  %2535 = add i64 %2534, %1637
  %2536 = sub i64 %2535, %989
  %2537 = icmp ult i64 %2536, 128
  br i1 %2537, label %2576, label %2538

2538:                                             ; preds = %2533
  %2539 = icmp ult i64 %2531, 64
  br i1 %2539, label %2563, label %2540

2540:                                             ; preds = %2538
  %2541 = and i64 %2524, 63
  %2542 = sub nsw i64 %2531, %2541
  br label %2543

2543:                                             ; preds = %2543, %2540
  %2544 = phi i64 [ 0, %2540 ], [ %2557, %2543 ]
  %2545 = getelementptr inbounds i16, ptr %670, i64 %2544
  %2546 = load <16 x i16>, ptr %2545, align 2, !tbaa !44
  %2547 = getelementptr inbounds i16, ptr %2545, i64 16
  %2548 = load <16 x i16>, ptr %2547, align 2, !tbaa !44
  %2549 = getelementptr inbounds i16, ptr %2545, i64 32
  %2550 = load <16 x i16>, ptr %2549, align 2, !tbaa !44
  %2551 = getelementptr inbounds i16, ptr %2545, i64 48
  %2552 = load <16 x i16>, ptr %2551, align 2, !tbaa !44
  %2553 = getelementptr inbounds i16, ptr %2528, i64 %2544
  store <16 x i16> %2546, ptr %2553, align 2, !tbaa !44
  %2554 = getelementptr inbounds i16, ptr %2553, i64 16
  store <16 x i16> %2548, ptr %2554, align 2, !tbaa !44
  %2555 = getelementptr inbounds i16, ptr %2553, i64 32
  store <16 x i16> %2550, ptr %2555, align 2, !tbaa !44
  %2556 = getelementptr inbounds i16, ptr %2553, i64 48
  store <16 x i16> %2552, ptr %2556, align 2, !tbaa !44
  %2557 = add nuw i64 %2544, 64
  %2558 = icmp eq i64 %2557, %2542
  br i1 %2558, label %2559, label %2543, !llvm.loop !249

2559:                                             ; preds = %2543
  %2560 = icmp eq i64 %2541, 0
  br i1 %2560, label %2614, label %2561

2561:                                             ; preds = %2559
  %2562 = icmp ult i64 %2541, 8
  br i1 %2562, label %2576, label %2563

2563:                                             ; preds = %2538, %2561
  %2564 = phi i64 [ %2542, %2561 ], [ 0, %2538 ]
  %2565 = and i64 %2524, 7
  %2566 = sub nsw i64 %2531, %2565
  br label %2567

2567:                                             ; preds = %2567, %2563
  %2568 = phi i64 [ %2564, %2563 ], [ %2572, %2567 ]
  %2569 = getelementptr inbounds i16, ptr %670, i64 %2568
  %2570 = load <8 x i16>, ptr %2569, align 2, !tbaa !44
  %2571 = getelementptr inbounds i16, ptr %2528, i64 %2568
  store <8 x i16> %2570, ptr %2571, align 2, !tbaa !44
  %2572 = add nuw i64 %2568, 8
  %2573 = icmp eq i64 %2572, %2566
  br i1 %2573, label %2574, label %2567, !llvm.loop !250

2574:                                             ; preds = %2567
  %2575 = icmp eq i64 %2565, 0
  br i1 %2575, label %2614, label %2576

2576:                                             ; preds = %2533, %2530, %2561, %2574
  %2577 = phi i64 [ 0, %2530 ], [ 0, %2533 ], [ %2542, %2561 ], [ %2566, %2574 ]
  %2578 = sub i64 %2524, %2577
  %2579 = xor i64 %2577, -1
  %2580 = add nsw i64 %2531, %2579
  %2581 = and i64 %2578, 3
  %2582 = icmp eq i64 %2581, 0
  br i1 %2582, label %2592, label %2583

2583:                                             ; preds = %2576, %2583
  %2584 = phi i64 [ %2589, %2583 ], [ %2577, %2576 ]
  %2585 = phi i64 [ %2590, %2583 ], [ 0, %2576 ]
  %2586 = getelementptr inbounds i16, ptr %670, i64 %2584
  %2587 = load i16, ptr %2586, align 2, !tbaa !44
  %2588 = getelementptr inbounds i16, ptr %2528, i64 %2584
  store i16 %2587, ptr %2588, align 2, !tbaa !44
  %2589 = add nuw nsw i64 %2584, 1
  %2590 = add i64 %2585, 1
  %2591 = icmp eq i64 %2590, %2581
  br i1 %2591, label %2592, label %2583, !llvm.loop !251

2592:                                             ; preds = %2583, %2576
  %2593 = phi i64 [ %2577, %2576 ], [ %2589, %2583 ]
  %2594 = icmp ult i64 %2580, 3
  br i1 %2594, label %2614, label %2595

2595:                                             ; preds = %2592, %2595
  %2596 = phi i64 [ %2612, %2595 ], [ %2593, %2592 ]
  %2597 = getelementptr inbounds i16, ptr %670, i64 %2596
  %2598 = load i16, ptr %2597, align 2, !tbaa !44
  %2599 = getelementptr inbounds i16, ptr %2528, i64 %2596
  store i16 %2598, ptr %2599, align 2, !tbaa !44
  %2600 = add nuw nsw i64 %2596, 1
  %2601 = getelementptr inbounds i16, ptr %670, i64 %2600
  %2602 = load i16, ptr %2601, align 2, !tbaa !44
  %2603 = getelementptr inbounds i16, ptr %2528, i64 %2600
  store i16 %2602, ptr %2603, align 2, !tbaa !44
  %2604 = add nuw nsw i64 %2596, 2
  %2605 = getelementptr inbounds i16, ptr %670, i64 %2604
  %2606 = load i16, ptr %2605, align 2, !tbaa !44
  %2607 = getelementptr inbounds i16, ptr %2528, i64 %2604
  store i16 %2606, ptr %2607, align 2, !tbaa !44
  %2608 = add nuw nsw i64 %2596, 3
  %2609 = getelementptr inbounds i16, ptr %670, i64 %2608
  %2610 = load i16, ptr %2609, align 2, !tbaa !44
  %2611 = getelementptr inbounds i16, ptr %2528, i64 %2608
  store i16 %2610, ptr %2611, align 2, !tbaa !44
  %2612 = add nuw nsw i64 %2596, 4
  %2613 = icmp eq i64 %2612, %2531
  br i1 %2613, label %2614, label %2595, !llvm.loop !252

2614:                                             ; preds = %2592, %2595, %2559, %2574
  %2615 = shl i64 %2523, 31
  %2616 = add i64 %2615, -4294967296
  %2617 = ashr i64 %2616, 32
  %2618 = getelementptr inbounds i16, ptr %2528, i64 %2617
  %2619 = load i16, ptr %2618, align 2, !tbaa !44
  br label %2620

2620:                                             ; preds = %2511, %2614
  %2621 = phi i64 [ %2524, %2614 ], [ 0, %2511 ]
  %2622 = phi i16 [ %2619, %2614 ], [ -1, %2511 ]
  %2623 = and i64 %2621, 4294967295
  %2624 = getelementptr inbounds i16, ptr %2528, i64 %2623
  store i16 %2622, ptr %2624, align 2, !tbaa !44
  %2625 = trunc i64 %2524 to i16
  %2626 = add i16 %2625, 1
  %2627 = sext i32 %2521 to i64
  %2628 = getelementptr inbounds i16, ptr %1636, i64 %2627
  store i16 %2626, ptr %2628, align 2, !tbaa !44
  %2629 = add nsw i32 %2525, 2
  %2630 = add nsw i32 %2629, %2521
  %2631 = ptrtoint ptr %2057 to i64
  %2632 = sub i64 %2631, %990
  %2633 = lshr exact i64 %2632, 1
  %2634 = trunc i64 %2633 to i32
  %2635 = add nsw i32 %2630, 1
  %2636 = sext i32 %2635 to i64
  %2637 = getelementptr i16, ptr %1636, i64 %2636
  %2638 = icmp sgt i32 %2634, 0
  br i1 %2638, label %2639, label %2729

2639:                                             ; preds = %2620
  %2640 = and i64 %2633, 4294967295
  %2641 = icmp ult i64 %2640, 8
  br i1 %2641, label %2685, label %2642

2642:                                             ; preds = %2639
  %2643 = shl nsw i64 %2636, 1
  %2644 = add i64 %2643, %1637
  %2645 = sub i64 %2644, %990
  %2646 = icmp ult i64 %2645, 128
  br i1 %2646, label %2685, label %2647

2647:                                             ; preds = %2642
  %2648 = icmp ult i64 %2640, 64
  br i1 %2648, label %2672, label %2649

2649:                                             ; preds = %2647
  %2650 = and i64 %2633, 63
  %2651 = sub nsw i64 %2640, %2650
  br label %2652

2652:                                             ; preds = %2652, %2649
  %2653 = phi i64 [ 0, %2649 ], [ %2666, %2652 ]
  %2654 = getelementptr inbounds i16, ptr %716, i64 %2653
  %2655 = load <16 x i16>, ptr %2654, align 2, !tbaa !44
  %2656 = getelementptr inbounds i16, ptr %2654, i64 16
  %2657 = load <16 x i16>, ptr %2656, align 2, !tbaa !44
  %2658 = getelementptr inbounds i16, ptr %2654, i64 32
  %2659 = load <16 x i16>, ptr %2658, align 2, !tbaa !44
  %2660 = getelementptr inbounds i16, ptr %2654, i64 48
  %2661 = load <16 x i16>, ptr %2660, align 2, !tbaa !44
  %2662 = getelementptr inbounds i16, ptr %2637, i64 %2653
  store <16 x i16> %2655, ptr %2662, align 2, !tbaa !44
  %2663 = getelementptr inbounds i16, ptr %2662, i64 16
  store <16 x i16> %2657, ptr %2663, align 2, !tbaa !44
  %2664 = getelementptr inbounds i16, ptr %2662, i64 32
  store <16 x i16> %2659, ptr %2664, align 2, !tbaa !44
  %2665 = getelementptr inbounds i16, ptr %2662, i64 48
  store <16 x i16> %2661, ptr %2665, align 2, !tbaa !44
  %2666 = add nuw i64 %2653, 64
  %2667 = icmp eq i64 %2666, %2651
  br i1 %2667, label %2668, label %2652, !llvm.loop !253

2668:                                             ; preds = %2652
  %2669 = icmp eq i64 %2650, 0
  br i1 %2669, label %2723, label %2670

2670:                                             ; preds = %2668
  %2671 = icmp ult i64 %2650, 8
  br i1 %2671, label %2685, label %2672

2672:                                             ; preds = %2647, %2670
  %2673 = phi i64 [ %2651, %2670 ], [ 0, %2647 ]
  %2674 = and i64 %2633, 7
  %2675 = sub nsw i64 %2640, %2674
  br label %2676

2676:                                             ; preds = %2676, %2672
  %2677 = phi i64 [ %2673, %2672 ], [ %2681, %2676 ]
  %2678 = getelementptr inbounds i16, ptr %716, i64 %2677
  %2679 = load <8 x i16>, ptr %2678, align 2, !tbaa !44
  %2680 = getelementptr inbounds i16, ptr %2637, i64 %2677
  store <8 x i16> %2679, ptr %2680, align 2, !tbaa !44
  %2681 = add nuw i64 %2677, 8
  %2682 = icmp eq i64 %2681, %2675
  br i1 %2682, label %2683, label %2676, !llvm.loop !254

2683:                                             ; preds = %2676
  %2684 = icmp eq i64 %2674, 0
  br i1 %2684, label %2723, label %2685

2685:                                             ; preds = %2642, %2639, %2670, %2683
  %2686 = phi i64 [ 0, %2639 ], [ 0, %2642 ], [ %2651, %2670 ], [ %2675, %2683 ]
  %2687 = sub i64 %2633, %2686
  %2688 = xor i64 %2686, -1
  %2689 = add nsw i64 %2640, %2688
  %2690 = and i64 %2687, 3
  %2691 = icmp eq i64 %2690, 0
  br i1 %2691, label %2701, label %2692

2692:                                             ; preds = %2685, %2692
  %2693 = phi i64 [ %2698, %2692 ], [ %2686, %2685 ]
  %2694 = phi i64 [ %2699, %2692 ], [ 0, %2685 ]
  %2695 = getelementptr inbounds i16, ptr %716, i64 %2693
  %2696 = load i16, ptr %2695, align 2, !tbaa !44
  %2697 = getelementptr inbounds i16, ptr %2637, i64 %2693
  store i16 %2696, ptr %2697, align 2, !tbaa !44
  %2698 = add nuw nsw i64 %2693, 1
  %2699 = add i64 %2694, 1
  %2700 = icmp eq i64 %2699, %2690
  br i1 %2700, label %2701, label %2692, !llvm.loop !255

2701:                                             ; preds = %2692, %2685
  %2702 = phi i64 [ %2686, %2685 ], [ %2698, %2692 ]
  %2703 = icmp ult i64 %2689, 3
  br i1 %2703, label %2723, label %2704

2704:                                             ; preds = %2701, %2704
  %2705 = phi i64 [ %2721, %2704 ], [ %2702, %2701 ]
  %2706 = getelementptr inbounds i16, ptr %716, i64 %2705
  %2707 = load i16, ptr %2706, align 2, !tbaa !44
  %2708 = getelementptr inbounds i16, ptr %2637, i64 %2705
  store i16 %2707, ptr %2708, align 2, !tbaa !44
  %2709 = add nuw nsw i64 %2705, 1
  %2710 = getelementptr inbounds i16, ptr %716, i64 %2709
  %2711 = load i16, ptr %2710, align 2, !tbaa !44
  %2712 = getelementptr inbounds i16, ptr %2637, i64 %2709
  store i16 %2711, ptr %2712, align 2, !tbaa !44
  %2713 = add nuw nsw i64 %2705, 2
  %2714 = getelementptr inbounds i16, ptr %716, i64 %2713
  %2715 = load i16, ptr %2714, align 2, !tbaa !44
  %2716 = getelementptr inbounds i16, ptr %2637, i64 %2713
  store i16 %2715, ptr %2716, align 2, !tbaa !44
  %2717 = add nuw nsw i64 %2705, 3
  %2718 = getelementptr inbounds i16, ptr %716, i64 %2717
  %2719 = load i16, ptr %2718, align 2, !tbaa !44
  %2720 = getelementptr inbounds i16, ptr %2637, i64 %2717
  store i16 %2719, ptr %2720, align 2, !tbaa !44
  %2721 = add nuw nsw i64 %2705, 4
  %2722 = icmp eq i64 %2721, %2640
  br i1 %2722, label %2723, label %2704, !llvm.loop !256

2723:                                             ; preds = %2701, %2704, %2668, %2683
  %2724 = shl i64 %2632, 31
  %2725 = add i64 %2724, -4294967296
  %2726 = ashr i64 %2725, 32
  %2727 = getelementptr inbounds i16, ptr %2637, i64 %2726
  %2728 = load i16, ptr %2727, align 2, !tbaa !44
  br label %2729

2729:                                             ; preds = %2620, %2723
  %2730 = phi i64 [ %2633, %2723 ], [ 0, %2620 ]
  %2731 = phi i16 [ %2728, %2723 ], [ -1, %2620 ]
  %2732 = and i64 %2730, 4294967295
  %2733 = getelementptr inbounds i16, ptr %2637, i64 %2732
  store i16 %2731, ptr %2733, align 2, !tbaa !44
  %2734 = trunc i64 %2633 to i16
  %2735 = add i16 %2734, 1
  %2736 = sext i32 %2630 to i64
  %2737 = getelementptr inbounds i16, ptr %1636, i64 %2736
  store i16 %2735, ptr %2737, align 2, !tbaa !44
  %2738 = add nsw i32 %2634, 2
  %2739 = add nsw i32 %2738, %2630
  %2740 = ptrtoint ptr %2056 to i64
  %2741 = sub i64 %2740, %991
  %2742 = lshr exact i64 %2741, 1
  %2743 = trunc i64 %2742 to i32
  %2744 = add nsw i32 %2739, 1
  %2745 = sext i32 %2744 to i64
  %2746 = getelementptr i16, ptr %1636, i64 %2745
  %2747 = icmp sgt i32 %2743, 0
  br i1 %2747, label %2748, label %2838

2748:                                             ; preds = %2729
  %2749 = and i64 %2742, 4294967295
  %2750 = icmp ult i64 %2749, 8
  br i1 %2750, label %2794, label %2751

2751:                                             ; preds = %2748
  %2752 = shl nsw i64 %2745, 1
  %2753 = add i64 %2752, %1637
  %2754 = sub i64 %2753, %991
  %2755 = icmp ult i64 %2754, 128
  br i1 %2755, label %2794, label %2756

2756:                                             ; preds = %2751
  %2757 = icmp ult i64 %2749, 64
  br i1 %2757, label %2781, label %2758

2758:                                             ; preds = %2756
  %2759 = and i64 %2742, 63
  %2760 = sub nsw i64 %2749, %2759
  br label %2761

2761:                                             ; preds = %2761, %2758
  %2762 = phi i64 [ 0, %2758 ], [ %2775, %2761 ]
  %2763 = getelementptr inbounds i16, ptr %762, i64 %2762
  %2764 = load <16 x i16>, ptr %2763, align 2, !tbaa !44
  %2765 = getelementptr inbounds i16, ptr %2763, i64 16
  %2766 = load <16 x i16>, ptr %2765, align 2, !tbaa !44
  %2767 = getelementptr inbounds i16, ptr %2763, i64 32
  %2768 = load <16 x i16>, ptr %2767, align 2, !tbaa !44
  %2769 = getelementptr inbounds i16, ptr %2763, i64 48
  %2770 = load <16 x i16>, ptr %2769, align 2, !tbaa !44
  %2771 = getelementptr inbounds i16, ptr %2746, i64 %2762
  store <16 x i16> %2764, ptr %2771, align 2, !tbaa !44
  %2772 = getelementptr inbounds i16, ptr %2771, i64 16
  store <16 x i16> %2766, ptr %2772, align 2, !tbaa !44
  %2773 = getelementptr inbounds i16, ptr %2771, i64 32
  store <16 x i16> %2768, ptr %2773, align 2, !tbaa !44
  %2774 = getelementptr inbounds i16, ptr %2771, i64 48
  store <16 x i16> %2770, ptr %2774, align 2, !tbaa !44
  %2775 = add nuw i64 %2762, 64
  %2776 = icmp eq i64 %2775, %2760
  br i1 %2776, label %2777, label %2761, !llvm.loop !257

2777:                                             ; preds = %2761
  %2778 = icmp eq i64 %2759, 0
  br i1 %2778, label %2832, label %2779

2779:                                             ; preds = %2777
  %2780 = icmp ult i64 %2759, 8
  br i1 %2780, label %2794, label %2781

2781:                                             ; preds = %2756, %2779
  %2782 = phi i64 [ %2760, %2779 ], [ 0, %2756 ]
  %2783 = and i64 %2742, 7
  %2784 = sub nsw i64 %2749, %2783
  br label %2785

2785:                                             ; preds = %2785, %2781
  %2786 = phi i64 [ %2782, %2781 ], [ %2790, %2785 ]
  %2787 = getelementptr inbounds i16, ptr %762, i64 %2786
  %2788 = load <8 x i16>, ptr %2787, align 2, !tbaa !44
  %2789 = getelementptr inbounds i16, ptr %2746, i64 %2786
  store <8 x i16> %2788, ptr %2789, align 2, !tbaa !44
  %2790 = add nuw i64 %2786, 8
  %2791 = icmp eq i64 %2790, %2784
  br i1 %2791, label %2792, label %2785, !llvm.loop !258

2792:                                             ; preds = %2785
  %2793 = icmp eq i64 %2783, 0
  br i1 %2793, label %2832, label %2794

2794:                                             ; preds = %2751, %2748, %2779, %2792
  %2795 = phi i64 [ 0, %2748 ], [ 0, %2751 ], [ %2760, %2779 ], [ %2784, %2792 ]
  %2796 = sub i64 %2742, %2795
  %2797 = xor i64 %2795, -1
  %2798 = add nsw i64 %2749, %2797
  %2799 = and i64 %2796, 3
  %2800 = icmp eq i64 %2799, 0
  br i1 %2800, label %2810, label %2801

2801:                                             ; preds = %2794, %2801
  %2802 = phi i64 [ %2807, %2801 ], [ %2795, %2794 ]
  %2803 = phi i64 [ %2808, %2801 ], [ 0, %2794 ]
  %2804 = getelementptr inbounds i16, ptr %762, i64 %2802
  %2805 = load i16, ptr %2804, align 2, !tbaa !44
  %2806 = getelementptr inbounds i16, ptr %2746, i64 %2802
  store i16 %2805, ptr %2806, align 2, !tbaa !44
  %2807 = add nuw nsw i64 %2802, 1
  %2808 = add i64 %2803, 1
  %2809 = icmp eq i64 %2808, %2799
  br i1 %2809, label %2810, label %2801, !llvm.loop !259

2810:                                             ; preds = %2801, %2794
  %2811 = phi i64 [ %2795, %2794 ], [ %2807, %2801 ]
  %2812 = icmp ult i64 %2798, 3
  br i1 %2812, label %2832, label %2813

2813:                                             ; preds = %2810, %2813
  %2814 = phi i64 [ %2830, %2813 ], [ %2811, %2810 ]
  %2815 = getelementptr inbounds i16, ptr %762, i64 %2814
  %2816 = load i16, ptr %2815, align 2, !tbaa !44
  %2817 = getelementptr inbounds i16, ptr %2746, i64 %2814
  store i16 %2816, ptr %2817, align 2, !tbaa !44
  %2818 = add nuw nsw i64 %2814, 1
  %2819 = getelementptr inbounds i16, ptr %762, i64 %2818
  %2820 = load i16, ptr %2819, align 2, !tbaa !44
  %2821 = getelementptr inbounds i16, ptr %2746, i64 %2818
  store i16 %2820, ptr %2821, align 2, !tbaa !44
  %2822 = add nuw nsw i64 %2814, 2
  %2823 = getelementptr inbounds i16, ptr %762, i64 %2822
  %2824 = load i16, ptr %2823, align 2, !tbaa !44
  %2825 = getelementptr inbounds i16, ptr %2746, i64 %2822
  store i16 %2824, ptr %2825, align 2, !tbaa !44
  %2826 = add nuw nsw i64 %2814, 3
  %2827 = getelementptr inbounds i16, ptr %762, i64 %2826
  %2828 = load i16, ptr %2827, align 2, !tbaa !44
  %2829 = getelementptr inbounds i16, ptr %2746, i64 %2826
  store i16 %2828, ptr %2829, align 2, !tbaa !44
  %2830 = add nuw nsw i64 %2814, 4
  %2831 = icmp eq i64 %2830, %2749
  br i1 %2831, label %2832, label %2813, !llvm.loop !260

2832:                                             ; preds = %2810, %2813, %2777, %2792
  %2833 = shl i64 %2741, 31
  %2834 = add i64 %2833, -4294967296
  %2835 = ashr i64 %2834, 32
  %2836 = getelementptr inbounds i16, ptr %2746, i64 %2835
  %2837 = load i16, ptr %2836, align 2, !tbaa !44
  br label %2838

2838:                                             ; preds = %2729, %2832
  %2839 = phi i64 [ %2742, %2832 ], [ 0, %2729 ]
  %2840 = phi i16 [ %2837, %2832 ], [ -1, %2729 ]
  %2841 = and i64 %2839, 4294967295
  %2842 = getelementptr inbounds i16, ptr %2746, i64 %2841
  store i16 %2840, ptr %2842, align 2, !tbaa !44
  %2843 = trunc i64 %2742 to i16
  %2844 = add i16 %2843, 1
  %2845 = sext i32 %2739 to i64
  %2846 = getelementptr inbounds i16, ptr %1636, i64 %2845
  store i16 %2844, ptr %2846, align 2, !tbaa !44
  %2847 = add nsw i32 %2743, 2
  %2848 = add nsw i32 %2847, %2739
  %2849 = ptrtoint ptr %2055 to i64
  %2850 = sub i64 %2849, %992
  %2851 = lshr exact i64 %2850, 1
  %2852 = trunc i64 %2851 to i32
  %2853 = add nsw i32 %2848, 1
  %2854 = sext i32 %2853 to i64
  %2855 = getelementptr i16, ptr %1636, i64 %2854
  %2856 = icmp sgt i32 %2852, 0
  br i1 %2856, label %2857, label %2947

2857:                                             ; preds = %2838
  %2858 = and i64 %2851, 4294967295
  %2859 = icmp ult i64 %2858, 8
  br i1 %2859, label %2903, label %2860

2860:                                             ; preds = %2857
  %2861 = shl nsw i64 %2854, 1
  %2862 = add i64 %2861, %1637
  %2863 = sub i64 %2862, %992
  %2864 = icmp ult i64 %2863, 128
  br i1 %2864, label %2903, label %2865

2865:                                             ; preds = %2860
  %2866 = icmp ult i64 %2858, 64
  br i1 %2866, label %2890, label %2867

2867:                                             ; preds = %2865
  %2868 = and i64 %2851, 63
  %2869 = sub nsw i64 %2858, %2868
  br label %2870

2870:                                             ; preds = %2870, %2867
  %2871 = phi i64 [ 0, %2867 ], [ %2884, %2870 ]
  %2872 = getelementptr inbounds i16, ptr %808, i64 %2871
  %2873 = load <16 x i16>, ptr %2872, align 2, !tbaa !44
  %2874 = getelementptr inbounds i16, ptr %2872, i64 16
  %2875 = load <16 x i16>, ptr %2874, align 2, !tbaa !44
  %2876 = getelementptr inbounds i16, ptr %2872, i64 32
  %2877 = load <16 x i16>, ptr %2876, align 2, !tbaa !44
  %2878 = getelementptr inbounds i16, ptr %2872, i64 48
  %2879 = load <16 x i16>, ptr %2878, align 2, !tbaa !44
  %2880 = getelementptr inbounds i16, ptr %2855, i64 %2871
  store <16 x i16> %2873, ptr %2880, align 2, !tbaa !44
  %2881 = getelementptr inbounds i16, ptr %2880, i64 16
  store <16 x i16> %2875, ptr %2881, align 2, !tbaa !44
  %2882 = getelementptr inbounds i16, ptr %2880, i64 32
  store <16 x i16> %2877, ptr %2882, align 2, !tbaa !44
  %2883 = getelementptr inbounds i16, ptr %2880, i64 48
  store <16 x i16> %2879, ptr %2883, align 2, !tbaa !44
  %2884 = add nuw i64 %2871, 64
  %2885 = icmp eq i64 %2884, %2869
  br i1 %2885, label %2886, label %2870, !llvm.loop !261

2886:                                             ; preds = %2870
  %2887 = icmp eq i64 %2868, 0
  br i1 %2887, label %2941, label %2888

2888:                                             ; preds = %2886
  %2889 = icmp ult i64 %2868, 8
  br i1 %2889, label %2903, label %2890

2890:                                             ; preds = %2865, %2888
  %2891 = phi i64 [ %2869, %2888 ], [ 0, %2865 ]
  %2892 = and i64 %2851, 7
  %2893 = sub nsw i64 %2858, %2892
  br label %2894

2894:                                             ; preds = %2894, %2890
  %2895 = phi i64 [ %2891, %2890 ], [ %2899, %2894 ]
  %2896 = getelementptr inbounds i16, ptr %808, i64 %2895
  %2897 = load <8 x i16>, ptr %2896, align 2, !tbaa !44
  %2898 = getelementptr inbounds i16, ptr %2855, i64 %2895
  store <8 x i16> %2897, ptr %2898, align 2, !tbaa !44
  %2899 = add nuw i64 %2895, 8
  %2900 = icmp eq i64 %2899, %2893
  br i1 %2900, label %2901, label %2894, !llvm.loop !262

2901:                                             ; preds = %2894
  %2902 = icmp eq i64 %2892, 0
  br i1 %2902, label %2941, label %2903

2903:                                             ; preds = %2860, %2857, %2888, %2901
  %2904 = phi i64 [ 0, %2857 ], [ 0, %2860 ], [ %2869, %2888 ], [ %2893, %2901 ]
  %2905 = sub i64 %2851, %2904
  %2906 = xor i64 %2904, -1
  %2907 = add nsw i64 %2858, %2906
  %2908 = and i64 %2905, 3
  %2909 = icmp eq i64 %2908, 0
  br i1 %2909, label %2919, label %2910

2910:                                             ; preds = %2903, %2910
  %2911 = phi i64 [ %2916, %2910 ], [ %2904, %2903 ]
  %2912 = phi i64 [ %2917, %2910 ], [ 0, %2903 ]
  %2913 = getelementptr inbounds i16, ptr %808, i64 %2911
  %2914 = load i16, ptr %2913, align 2, !tbaa !44
  %2915 = getelementptr inbounds i16, ptr %2855, i64 %2911
  store i16 %2914, ptr %2915, align 2, !tbaa !44
  %2916 = add nuw nsw i64 %2911, 1
  %2917 = add i64 %2912, 1
  %2918 = icmp eq i64 %2917, %2908
  br i1 %2918, label %2919, label %2910, !llvm.loop !263

2919:                                             ; preds = %2910, %2903
  %2920 = phi i64 [ %2904, %2903 ], [ %2916, %2910 ]
  %2921 = icmp ult i64 %2907, 3
  br i1 %2921, label %2941, label %2922

2922:                                             ; preds = %2919, %2922
  %2923 = phi i64 [ %2939, %2922 ], [ %2920, %2919 ]
  %2924 = getelementptr inbounds i16, ptr %808, i64 %2923
  %2925 = load i16, ptr %2924, align 2, !tbaa !44
  %2926 = getelementptr inbounds i16, ptr %2855, i64 %2923
  store i16 %2925, ptr %2926, align 2, !tbaa !44
  %2927 = add nuw nsw i64 %2923, 1
  %2928 = getelementptr inbounds i16, ptr %808, i64 %2927
  %2929 = load i16, ptr %2928, align 2, !tbaa !44
  %2930 = getelementptr inbounds i16, ptr %2855, i64 %2927
  store i16 %2929, ptr %2930, align 2, !tbaa !44
  %2931 = add nuw nsw i64 %2923, 2
  %2932 = getelementptr inbounds i16, ptr %808, i64 %2931
  %2933 = load i16, ptr %2932, align 2, !tbaa !44
  %2934 = getelementptr inbounds i16, ptr %2855, i64 %2931
  store i16 %2933, ptr %2934, align 2, !tbaa !44
  %2935 = add nuw nsw i64 %2923, 3
  %2936 = getelementptr inbounds i16, ptr %808, i64 %2935
  %2937 = load i16, ptr %2936, align 2, !tbaa !44
  %2938 = getelementptr inbounds i16, ptr %2855, i64 %2935
  store i16 %2937, ptr %2938, align 2, !tbaa !44
  %2939 = add nuw nsw i64 %2923, 4
  %2940 = icmp eq i64 %2939, %2858
  br i1 %2940, label %2941, label %2922, !llvm.loop !264

2941:                                             ; preds = %2919, %2922, %2886, %2901
  %2942 = shl i64 %2850, 31
  %2943 = add i64 %2942, -4294967296
  %2944 = ashr i64 %2943, 32
  %2945 = getelementptr inbounds i16, ptr %2855, i64 %2944
  %2946 = load i16, ptr %2945, align 2, !tbaa !44
  br label %2947

2947:                                             ; preds = %2838, %2941
  %2948 = phi i64 [ %2851, %2941 ], [ 0, %2838 ]
  %2949 = phi i16 [ %2946, %2941 ], [ -1, %2838 ]
  %2950 = and i64 %2948, 4294967295
  %2951 = getelementptr inbounds i16, ptr %2855, i64 %2950
  store i16 %2949, ptr %2951, align 2, !tbaa !44
  %2952 = trunc i64 %2851 to i16
  %2953 = add i16 %2952, 1
  %2954 = sext i32 %2848 to i64
  %2955 = getelementptr inbounds i16, ptr %1636, i64 %2954
  store i16 %2953, ptr %2955, align 2, !tbaa !44
  %2956 = add nsw i32 %2852, 2
  %2957 = add nsw i32 %2956, %2848
  %2958 = select i1 %207, i32 0, i32 %2957
  store i32 %2958, ptr %17, align 8
  br label %3037

2959:                                             ; preds = %1037
  %2960 = load ptr, ptr %12, align 8, !tbaa !46
  %2961 = load i32, ptr %17, align 8, !tbaa !17
  %2962 = add i32 %2961, 1
  %2963 = sext i32 %2962 to i64
  %2964 = getelementptr inbounds i16, ptr %2960, i64 %2963
  %2965 = sext i32 %2961 to i64
  %2966 = getelementptr inbounds i16, ptr %2960, i64 %2965
  %2967 = load i16, ptr %2966, align 2, !tbaa !44
  %2968 = zext i16 %2967 to i32
  %2969 = add i32 %2962, %2968
  %2970 = add nsw i32 %2968, -1
  %2971 = sext i32 %2969 to i64
  %2972 = getelementptr inbounds i16, ptr %2960, i64 %2971
  %2973 = load i16, ptr %2972, align 2, !tbaa !44
  %2974 = zext i16 %2973 to i32
  %2975 = add nuw nsw i32 %2974, 1
  %2976 = add nsw i32 %2975, %2969
  %2977 = add nsw i32 %2974, -1
  %2978 = add i32 %2976, 1
  %2979 = sext i32 %2978 to i64
  %2980 = getelementptr inbounds i16, ptr %2960, i64 %2979
  %2981 = sext i32 %2976 to i64
  %2982 = getelementptr inbounds i16, ptr %2960, i64 %2981
  %2983 = load i16, ptr %2982, align 2, !tbaa !44
  %2984 = zext i16 %2983 to i32
  %2985 = add i32 %2978, %2984
  %2986 = add nsw i32 %2984, -1
  %2987 = add i32 %2985, 1
  %2988 = sext i32 %2987 to i64
  %2989 = getelementptr inbounds i16, ptr %2960, i64 %2988
  %2990 = sext i32 %2985 to i64
  %2991 = getelementptr inbounds i16, ptr %2960, i64 %2990
  %2992 = load i16, ptr %2991, align 2, !tbaa !44
  %2993 = zext i16 %2992 to i32
  %2994 = add i32 %2987, %2993
  %2995 = add nsw i32 %2993, -1
  %2996 = sext i32 %2994 to i64
  %2997 = getelementptr inbounds i16, ptr %2960, i64 %2996
  %2998 = load i16, ptr %2997, align 2, !tbaa !44
  %2999 = zext i16 %2998 to i32
  %3000 = add nuw nsw i32 %2999, 1
  %3001 = add nsw i32 %3000, %2994
  %3002 = add nsw i32 %2999, -1
  %3003 = add i32 %3001, 1
  %3004 = sext i32 %3003 to i64
  %3005 = getelementptr inbounds i16, ptr %2960, i64 %3004
  %3006 = sext i32 %3001 to i64
  %3007 = getelementptr inbounds i16, ptr %2960, i64 %3006
  %3008 = load i16, ptr %3007, align 2, !tbaa !44
  %3009 = zext i16 %3008 to i32
  %3010 = add i32 %3003, %3009
  %3011 = add nsw i32 %3009, -1
  %3012 = add i32 %3010, 1
  %3013 = sext i32 %3012 to i64
  %3014 = getelementptr inbounds i16, ptr %2960, i64 %3013
  %3015 = sext i32 %3010 to i64
  %3016 = getelementptr inbounds i16, ptr %2960, i64 %3015
  %3017 = load i16, ptr %3016, align 2, !tbaa !44
  %3018 = zext i16 %3017 to i32
  %3019 = add i32 %3012, %3018
  %3020 = add nsw i32 %3018, -1
  %3021 = sext i32 %3019 to i64
  %3022 = getelementptr inbounds i16, ptr %2960, i64 %3021
  %3023 = load i16, ptr %3022, align 2, !tbaa !44
  %3024 = zext i16 %3023 to i32
  %3025 = add nuw nsw i32 %3024, 1
  %3026 = add nsw i32 %3025, %3019
  %3027 = add nsw i32 %3024, -1
  %3028 = add i32 %3026, 1
  %3029 = sext i32 %3028 to i64
  %3030 = getelementptr inbounds i16, ptr %2960, i64 %3029
  %3031 = sext i32 %3026 to i64
  %3032 = getelementptr inbounds i16, ptr %2960, i64 %3031
  %3033 = load i16, ptr %3032, align 2, !tbaa !44
  %3034 = zext i16 %3033 to i32
  %3035 = add i32 %3028, %3034
  store i32 %3035, ptr %17, align 8, !tbaa !17
  %3036 = add nsw i32 %3034, -1
  br label %3037

3037:                                             ; preds = %2947, %2959
  %3038 = phi ptr [ %2964, %2959 ], [ %1640, %2947 ]
  %3039 = phi i32 [ %2970, %2959 ], [ %2067, %2947 ]
  %3040 = phi i32 [ %2977, %2959 ], [ %2089, %2947 ]
  %3041 = phi ptr [ %2980, %2959 ], [ %2201, %2947 ]
  %3042 = phi i32 [ %2986, %2959 ], [ %2198, %2947 ]
  %3043 = phi ptr [ %2989, %2959 ], [ %2310, %2947 ]
  %3044 = phi i32 [ %2995, %2959 ], [ %2307, %2947 ]
  %3045 = phi i32 [ %3002, %2959 ], [ %2416, %2947 ]
  %3046 = phi ptr [ %3005, %2959 ], [ %2528, %2947 ]
  %3047 = phi i32 [ %3011, %2959 ], [ %2525, %2947 ]
  %3048 = phi ptr [ %3014, %2959 ], [ %2637, %2947 ]
  %3049 = phi i32 [ %3020, %2959 ], [ %2634, %2947 ]
  %3050 = phi i32 [ %3027, %2959 ], [ %2743, %2947 ]
  %3051 = phi ptr [ %3030, %2959 ], [ %2855, %2947 ]
  %3052 = phi i32 [ %3036, %2959 ], [ %2852, %2947 ]
  %3053 = phi i32 [ %1018, %2959 ], [ %1598, %2947 ]
  %3054 = phi i32 [ %1017, %2959 ], [ %1599, %2947 ]
  %3055 = phi i32 [ %1016, %2959 ], [ %1600, %2947 ]
  %3056 = phi i32 [ %1015, %2959 ], [ %1601, %2947 ]
  %3057 = phi ptr [ %1013, %2959 ], [ %1294, %2947 ]
  %3058 = phi ptr [ %1012, %2959 ], [ %1295, %2947 ]
  %3059 = phi ptr [ %1011, %2959 ], [ %1296, %2947 ]
  %3060 = getelementptr inbounds %struct.CompAtom, ptr %104, i64 %1022, i32 1
  %3061 = load float, ptr %3060, align 8, !tbaa !104
  %3062 = fpext float %3061 to double
  %3063 = fmul double %3062, 0x4074C104816F0069
  %3064 = fmul double %32, %3063
  %3065 = fmul double %28, %3064
  %3066 = getelementptr inbounds %struct.CompAtom, ptr %104, i64 %1022, i32 2
  %3067 = load i16, ptr %3066, align 4, !tbaa !105
  %3068 = sext i16 %3067 to i32
  %3069 = load ptr, ptr %993, align 8, !tbaa !106
  %3070 = load i32, ptr %994, align 8, !tbaa !108
  %3071 = shl nsw i32 %3068, 1
  %3072 = mul i32 %3071, %3070
  %3073 = zext i32 %3072 to i64
  %3074 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %3069, i64 %3073
  %3075 = load double, ptr @_ZN20ComputeNonbondedUtil7cutoff2E, align 8, !tbaa !19
  %3076 = extractelement <2 x double> %1040, i64 0
  %3077 = extractelement <2 x double> %1040, i64 1
  %3078 = call noundef i32 @_Z22pairlist_from_pairlistddddPK8CompAtomPKtiPtdPd(double noundef %3075, double noundef %3076, double noundef %3077, double noundef %1043, ptr noundef %106, ptr noundef nonnull %3038, i32 noundef %3039, ptr noundef %159, double noundef %34, ptr noundef %205)
  %3079 = icmp sgt i32 %3078, 0
  br i1 %3079, label %3080, label %3199

3080:                                             ; preds = %3037
  %3081 = load ptr, ptr @_ZN20ComputeNonbondedUtil8r2_tableE, align 8, !tbaa !23
  %3082 = zext i32 %3078 to i64
  br label %3083

3083:                                             ; preds = %3080, %3083
  %3084 = phi i64 [ 0, %3080 ], [ %3197, %3083 ]
  %3085 = phi double [ 0.000000e+00, %3080 ], [ %3193, %3083 ]
  %3086 = phi <2 x double> [ %1020, %3080 ], [ %3157, %3083 ]
  %3087 = phi <2 x double> [ %1021, %3080 ], [ %3178, %3083 ]
  %3088 = phi <2 x double> [ zeroinitializer, %3080 ], [ %3189, %3083 ]
  %3089 = shl nuw nsw i64 %3084, 1
  %3090 = getelementptr inbounds i32, ptr %206, i64 %3089
  %3091 = load i32, ptr %3090, align 4, !tbaa !5
  %3092 = ashr i32 %3091, 14
  %3093 = add nsw i32 %3092, %37
  %3094 = getelementptr inbounds i16, ptr %159, i64 %3084
  %3095 = load i16, ptr %3094, align 2, !tbaa !44
  %3096 = zext i16 %3095 to i64
  %3097 = getelementptr inbounds %struct.CompAtom, ptr %106, i64 %3096
  %3098 = getelementptr inbounds double, ptr %205, i64 %3084
  %3099 = load double, ptr %3098, align 8, !tbaa !19
  %3100 = sext i32 %3093 to i64
  %3101 = getelementptr inbounds double, ptr %3081, i64 %3100
  %3102 = load double, ptr %3101, align 8, !tbaa !19
  %3103 = fsub double %3099, %3102
  %3104 = shl nsw i32 %3093, 4
  %3105 = sext i32 %3104 to i64
  %3106 = getelementptr inbounds double, ptr %31, i64 %3105
  %3107 = getelementptr inbounds %struct.CompAtom, ptr %106, i64 %3096, i32 2
  %3108 = load i16, ptr %3107, align 4, !tbaa !105
  %3109 = sext i16 %3108 to i32
  %3110 = shl nsw i32 %3109, 1
  %3111 = sext i32 %3110 to i64
  %3112 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %3074, i64 %3111
  %3113 = getelementptr inbounds %class.Vector, ptr %966, i64 %3096
  %3114 = getelementptr inbounds %struct.CompAtom, ptr %106, i64 %3096, i32 1
  %3115 = load float, ptr %3114, align 8, !tbaa !104
  %3116 = fpext float %3115 to double
  %3117 = fmul double %3065, %3116
  %3118 = getelementptr inbounds %class.Vector, ptr %3097, i64 0, i32 2
  %3119 = load double, ptr %3118, align 8, !tbaa !49
  %3120 = fsub double %1043, %3119
  %3121 = load double, ptr %3112, align 8, !tbaa !109
  %3122 = fmul double %32, %3121
  %3123 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %3074, i64 %3111, i32 1
  %3124 = load double, ptr %3123, align 8, !tbaa !111
  %3125 = load double, ptr %3106, align 8, !tbaa !19
  %3126 = getelementptr inbounds double, ptr %3106, i64 2
  %3127 = load double, ptr %3126, align 8, !tbaa !19
  %3128 = fmul double %3124, %995
  %3129 = fmul double %3128, %3127
  %3130 = call double @llvm.fmuladd.f64(double %3122, double %3125, double %3129)
  %3131 = getelementptr inbounds double, ptr %3106, i64 1
  %3132 = load double, ptr %3131, align 8, !tbaa !19
  %3133 = getelementptr inbounds double, ptr %3106, i64 3
  %3134 = load double, ptr %3133, align 8, !tbaa !19
  %3135 = fmul double %3128, %3134
  %3136 = call double @llvm.fmuladd.f64(double %3122, double %3132, double %3135)
  %3137 = getelementptr inbounds double, ptr %3106, i64 4
  %3138 = load double, ptr %3137, align 8, !tbaa !19
  %3139 = getelementptr inbounds double, ptr %3106, i64 6
  %3140 = load double, ptr %3139, align 8, !tbaa !19
  %3141 = fmul double %3128, %3140
  %3142 = call double @llvm.fmuladd.f64(double %3122, double %3138, double %3141)
  %3143 = getelementptr inbounds double, ptr %3106, i64 5
  %3144 = load double, ptr %3143, align 8, !tbaa !19
  %3145 = getelementptr inbounds double, ptr %3106, i64 7
  %3146 = load double, ptr %3145, align 8, !tbaa !19
  %3147 = fmul double %3128, %3146
  %3148 = call double @llvm.fmuladd.f64(double %3122, double %3144, double %3147)
  %3149 = fmul double %3103, %3130
  %3150 = fmul double %3136, 2.500000e-01
  %3151 = call double @llvm.fmuladd.f64(double %3149, double 0x3FC5555555555555, double %3150)
  %3152 = fmul double %3142, 5.000000e-01
  %3153 = call double @llvm.fmuladd.f64(double %3151, double %3103, double %3152)
  %3154 = call double @llvm.fmuladd.f64(double %3153, double %3103, double %3148)
  %3155 = insertelement <2 x double> poison, double %3154, i64 0
  %3156 = shufflevector <2 x double> %3155, <2 x double> poison, <2 x i32> zeroinitializer
  %3157 = fsub <2 x double> %3086, %3156
  %3158 = getelementptr inbounds double, ptr %3106, i64 8
  %3159 = load double, ptr %3158, align 8, !tbaa !19
  %3160 = fmul double %3117, %3159
  %3161 = getelementptr inbounds double, ptr %3106, i64 9
  %3162 = load double, ptr %3161, align 8, !tbaa !19
  %3163 = fmul double %3117, %3162
  %3164 = getelementptr inbounds double, ptr %3106, i64 10
  %3165 = load double, ptr %3164, align 8, !tbaa !19
  %3166 = fmul double %3117, %3165
  %3167 = getelementptr inbounds double, ptr %3106, i64 11
  %3168 = load double, ptr %3167, align 8, !tbaa !19
  %3169 = fmul double %3117, %3168
  %3170 = fmul double %3103, %3160
  %3171 = fmul double %3163, 2.500000e-01
  %3172 = call double @llvm.fmuladd.f64(double %3170, double 0x3FC5555555555555, double %3171)
  %3173 = fmul double %3166, 5.000000e-01
  %3174 = call double @llvm.fmuladd.f64(double %3172, double %3103, double %3173)
  %3175 = call double @llvm.fmuladd.f64(double %3174, double %3103, double %3169)
  %3176 = insertelement <2 x double> poison, double %3175, i64 0
  %3177 = shufflevector <2 x double> %3176, <2 x double> poison, <2 x i32> zeroinitializer
  %3178 = fsub <2 x double> %3087, %3177
  %3179 = fadd double %3130, %3160
  %3180 = fadd double %3136, %3163
  %3181 = fadd double %3142, %3166
  %3182 = call double @llvm.fmuladd.f64(double %3103, double %3179, double %3180)
  %3183 = call double @llvm.fmuladd.f64(double %3182, double %3103, double %3181)
  %3184 = load <2 x double>, ptr %3097, align 8, !tbaa !19
  %3185 = fsub <2 x double> %1040, %3184
  %3186 = insertelement <2 x double> poison, double %3183, i64 0
  %3187 = shufflevector <2 x double> %3186, <2 x double> poison, <2 x i32> zeroinitializer
  %3188 = fmul <2 x double> %3185, %3187
  %3189 = fadd <2 x double> %3088, %3188
  %3190 = load <2 x double>, ptr %3113, align 8, !tbaa !19
  %3191 = fsub <2 x double> %3190, %3188
  store <2 x double> %3191, ptr %3113, align 8, !tbaa !19
  %3192 = fmul double %3120, %3183
  %3193 = fadd double %3085, %3192
  %3194 = getelementptr inbounds %class.Vector, ptr %966, i64 %3096, i32 2
  %3195 = load double, ptr %3194, align 8, !tbaa !112
  %3196 = fsub double %3195, %3192
  store double %3196, ptr %3194, align 8, !tbaa !112
  %3197 = add nuw nsw i64 %3084, 1
  %3198 = icmp eq i64 %3197, %3082
  br i1 %3198, label %3199, label %3083

3199:                                             ; preds = %3083, %3037
  %3200 = phi double [ 0.000000e+00, %3037 ], [ %3193, %3083 ]
  %3201 = phi <2 x double> [ %1020, %3037 ], [ %3157, %3083 ]
  %3202 = phi <2 x double> [ %1021, %3037 ], [ %3178, %3083 ]
  %3203 = phi <2 x double> [ zeroinitializer, %3037 ], [ %3189, %3083 ]
  %3204 = load double, ptr @_ZN20ComputeNonbondedUtil7cutoff2E, align 8, !tbaa !19
  %3205 = call noundef i32 @_Z22pairlist_from_pairlistddddPK8CompAtomPKtiPtdPd(double noundef %3204, double noundef %3076, double noundef %3077, double noundef %1043, ptr noundef %106, ptr noundef %3041, i32 noundef %3042, ptr noundef %159, double noundef %34, ptr noundef %205)
  %3206 = icmp sgt i32 %3205, 0
  br i1 %3206, label %3207, label %3328

3207:                                             ; preds = %3199
  %3208 = load ptr, ptr @_ZN20ComputeNonbondedUtil8r2_tableE, align 8, !tbaa !23
  %3209 = zext i32 %3205 to i64
  br label %3210

3210:                                             ; preds = %3207, %3210
  %3211 = phi i64 [ 0, %3207 ], [ %3326, %3210 ]
  %3212 = phi double [ %3200, %3207 ], [ %3322, %3210 ]
  %3213 = phi <2 x double> [ %3201, %3207 ], [ %3285, %3210 ]
  %3214 = phi <2 x double> [ %3202, %3207 ], [ %3307, %3210 ]
  %3215 = phi <2 x double> [ %3203, %3207 ], [ %3318, %3210 ]
  %3216 = shl nuw nsw i64 %3211, 1
  %3217 = getelementptr inbounds i32, ptr %206, i64 %3216
  %3218 = load i32, ptr %3217, align 4, !tbaa !5
  %3219 = ashr i32 %3218, 14
  %3220 = add nsw i32 %3219, %37
  %3221 = getelementptr inbounds i16, ptr %159, i64 %3211
  %3222 = load i16, ptr %3221, align 2, !tbaa !44
  %3223 = zext i16 %3222 to i64
  %3224 = getelementptr inbounds %struct.CompAtom, ptr %106, i64 %3223
  %3225 = getelementptr inbounds double, ptr %205, i64 %3211
  %3226 = load double, ptr %3225, align 8, !tbaa !19
  %3227 = sext i32 %3220 to i64
  %3228 = getelementptr inbounds double, ptr %3208, i64 %3227
  %3229 = load double, ptr %3228, align 8, !tbaa !19
  %3230 = fsub double %3226, %3229
  %3231 = shl nsw i32 %3220, 4
  %3232 = sext i32 %3231 to i64
  %3233 = getelementptr inbounds double, ptr %31, i64 %3232
  %3234 = getelementptr inbounds %struct.CompAtom, ptr %106, i64 %3223, i32 2
  %3235 = load i16, ptr %3234, align 4, !tbaa !105
  %3236 = sext i16 %3235 to i32
  %3237 = shl nsw i32 %3236, 1
  %3238 = sext i32 %3237 to i64
  %3239 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %3074, i64 %3238
  %3240 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %3239, i64 1
  %3241 = getelementptr inbounds %class.Vector, ptr %966, i64 %3223
  %3242 = getelementptr inbounds %struct.CompAtom, ptr %106, i64 %3223, i32 1
  %3243 = load float, ptr %3242, align 8, !tbaa !104
  %3244 = fpext float %3243 to double
  %3245 = fmul double %3065, %3244
  %3246 = getelementptr inbounds %class.Vector, ptr %3224, i64 0, i32 2
  %3247 = load double, ptr %3246, align 8, !tbaa !49
  %3248 = fsub double %1043, %3247
  %3249 = load double, ptr %3240, align 8, !tbaa !109
  %3250 = fmul double %32, %3249
  %3251 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %3239, i64 1, i32 1
  %3252 = load double, ptr %3251, align 8, !tbaa !111
  %3253 = load double, ptr %3233, align 8, !tbaa !19
  %3254 = getelementptr inbounds double, ptr %3233, i64 2
  %3255 = load double, ptr %3254, align 8, !tbaa !19
  %3256 = fmul double %3252, %995
  %3257 = fmul double %3256, %3255
  %3258 = call double @llvm.fmuladd.f64(double %3250, double %3253, double %3257)
  %3259 = getelementptr inbounds double, ptr %3233, i64 1
  %3260 = load double, ptr %3259, align 8, !tbaa !19
  %3261 = getelementptr inbounds double, ptr %3233, i64 3
  %3262 = load double, ptr %3261, align 8, !tbaa !19
  %3263 = fmul double %3256, %3262
  %3264 = call double @llvm.fmuladd.f64(double %3250, double %3260, double %3263)
  %3265 = getelementptr inbounds double, ptr %3233, i64 4
  %3266 = load double, ptr %3265, align 8, !tbaa !19
  %3267 = getelementptr inbounds double, ptr %3233, i64 6
  %3268 = load double, ptr %3267, align 8, !tbaa !19
  %3269 = fmul double %3256, %3268
  %3270 = call double @llvm.fmuladd.f64(double %3250, double %3266, double %3269)
  %3271 = getelementptr inbounds double, ptr %3233, i64 5
  %3272 = load double, ptr %3271, align 8, !tbaa !19
  %3273 = getelementptr inbounds double, ptr %3233, i64 7
  %3274 = load double, ptr %3273, align 8, !tbaa !19
  %3275 = fmul double %3256, %3274
  %3276 = call double @llvm.fmuladd.f64(double %3250, double %3272, double %3275)
  %3277 = fmul double %3230, %3258
  %3278 = fmul double %3264, 2.500000e-01
  %3279 = call double @llvm.fmuladd.f64(double %3277, double 0x3FC5555555555555, double %3278)
  %3280 = fmul double %3270, 5.000000e-01
  %3281 = call double @llvm.fmuladd.f64(double %3279, double %3230, double %3280)
  %3282 = call double @llvm.fmuladd.f64(double %3281, double %3230, double %3276)
  %3283 = insertelement <2 x double> poison, double %3282, i64 0
  %3284 = shufflevector <2 x double> %3283, <2 x double> poison, <2 x i32> zeroinitializer
  %3285 = fsub <2 x double> %3213, %3284
  %3286 = fmul double %997, %3245
  %3287 = getelementptr inbounds double, ptr %3233, i64 8
  %3288 = load double, ptr %3287, align 8, !tbaa !19
  %3289 = fmul double %3286, %3288
  %3290 = getelementptr inbounds double, ptr %3233, i64 9
  %3291 = load double, ptr %3290, align 8, !tbaa !19
  %3292 = fmul double %3286, %3291
  %3293 = getelementptr inbounds double, ptr %3233, i64 10
  %3294 = load double, ptr %3293, align 8, !tbaa !19
  %3295 = fmul double %3286, %3294
  %3296 = getelementptr inbounds double, ptr %3233, i64 11
  %3297 = load double, ptr %3296, align 8, !tbaa !19
  %3298 = fmul double %3286, %3297
  %3299 = fmul double %3230, %3289
  %3300 = fmul double %3292, 2.500000e-01
  %3301 = call double @llvm.fmuladd.f64(double %3299, double 0x3FC5555555555555, double %3300)
  %3302 = fmul double %3295, 5.000000e-01
  %3303 = call double @llvm.fmuladd.f64(double %3301, double %3230, double %3302)
  %3304 = call double @llvm.fmuladd.f64(double %3303, double %3230, double %3298)
  %3305 = insertelement <2 x double> poison, double %3304, i64 0
  %3306 = shufflevector <2 x double> %3305, <2 x double> poison, <2 x i32> zeroinitializer
  %3307 = fsub <2 x double> %3214, %3306
  %3308 = fadd double %3258, %3289
  %3309 = fadd double %3264, %3292
  %3310 = fadd double %3270, %3295
  %3311 = call double @llvm.fmuladd.f64(double %3230, double %3308, double %3309)
  %3312 = call double @llvm.fmuladd.f64(double %3311, double %3230, double %3310)
  %3313 = load <2 x double>, ptr %3224, align 8, !tbaa !19
  %3314 = fsub <2 x double> %1040, %3313
  %3315 = insertelement <2 x double> poison, double %3312, i64 0
  %3316 = shufflevector <2 x double> %3315, <2 x double> poison, <2 x i32> zeroinitializer
  %3317 = fmul <2 x double> %3314, %3316
  %3318 = fadd <2 x double> %3215, %3317
  %3319 = load <2 x double>, ptr %3241, align 8, !tbaa !19
  %3320 = fsub <2 x double> %3319, %3317
  store <2 x double> %3320, ptr %3241, align 8, !tbaa !19
  %3321 = fmul double %3248, %3312
  %3322 = fadd double %3212, %3321
  %3323 = getelementptr inbounds %class.Vector, ptr %966, i64 %3223, i32 2
  %3324 = load double, ptr %3323, align 8, !tbaa !112
  %3325 = fsub double %3324, %3321
  store double %3325, ptr %3323, align 8, !tbaa !112
  %3326 = add nuw nsw i64 %3211, 1
  %3327 = icmp eq i64 %3326, %3209
  br i1 %3327, label %3328, label %3210

3328:                                             ; preds = %3210, %3199
  %3329 = phi double [ %3200, %3199 ], [ %3322, %3210 ]
  %3330 = phi <2 x double> [ %3201, %3199 ], [ %3285, %3210 ]
  %3331 = phi <2 x double> [ %3202, %3199 ], [ %3307, %3210 ]
  %3332 = phi <2 x double> [ %3203, %3199 ], [ %3318, %3210 ]
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %3) #11
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %4) #11
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %5) #11
  %3333 = load double, ptr @_ZN20ComputeNonbondedUtil7cutoff2E, align 8, !tbaa !19
  %3334 = call noundef i32 @_Z22pairlist_from_pairlistddddPK8CompAtomPKtiPtdPd(double noundef %3333, double noundef %3076, double noundef %3077, double noundef %1043, ptr noundef %106, ptr noundef %3043, i32 noundef %3044, ptr noundef %159, double noundef %34, ptr noundef %205)
  %3335 = icmp sgt i32 %3334, 0
  br i1 %3335, label %3336, label %3429

3336:                                             ; preds = %3328
  %3337 = zext i32 %3334 to i64
  br label %3338

3338:                                             ; preds = %3336, %3338
  %3339 = phi i64 [ 0, %3336 ], [ %3427, %3338 ]
  %3340 = phi double [ %3329, %3336 ], [ %3423, %3338 ]
  %3341 = phi <2 x double> [ %3330, %3336 ], [ %3393, %3338 ]
  %3342 = phi <2 x double> [ %3331, %3336 ], [ %3410, %3338 ]
  %3343 = phi <2 x double> [ %3332, %3336 ], [ %3419, %3338 ]
  %3344 = shl nuw nsw i64 %3339, 1
  %3345 = getelementptr inbounds i32, ptr %206, i64 %3344
  %3346 = load i32, ptr %3345, align 4, !tbaa !5
  %3347 = ashr i32 %3346, 14
  %3348 = add nsw i32 %3347, %37
  %3349 = getelementptr inbounds i16, ptr %159, i64 %3339
  %3350 = load i16, ptr %3349, align 2, !tbaa !44
  %3351 = zext i16 %3350 to i64
  %3352 = getelementptr inbounds %struct.CompAtom, ptr %106, i64 %3351
  %3353 = getelementptr inbounds double, ptr %205, i64 %3339
  %3354 = load double, ptr %3353, align 8, !tbaa !19
  %3355 = load ptr, ptr @_ZN20ComputeNonbondedUtil8r2_tableE, align 8, !tbaa !23
  %3356 = sext i32 %3348 to i64
  %3357 = getelementptr inbounds double, ptr %3355, i64 %3356
  %3358 = load double, ptr %3357, align 8, !tbaa !19
  %3359 = fsub double %3354, %3358
  %3360 = shl nsw i32 %3348, 4
  %3361 = sext i32 %3360 to i64
  %3362 = getelementptr inbounds double, ptr %31, i64 %3361
  %3363 = getelementptr inbounds %struct.CompAtom, ptr %106, i64 %3351, i32 2
  %3364 = load i16, ptr %3363, align 4, !tbaa !105
  %3365 = sext i16 %3364 to i32
  %3366 = shl nsw i32 %3365, 1
  %3367 = sext i32 %3366 to i64
  %3368 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %3074, i64 %3367
  %3369 = getelementptr inbounds %class.Vector, ptr %966, i64 %3351
  %3370 = getelementptr inbounds %struct.CompAtom, ptr %106, i64 %3351, i32 1
  %3371 = load float, ptr %3370, align 8, !tbaa !104
  %3372 = fpext float %3371 to double
  %3373 = fmul double %3065, %3372
  %3374 = getelementptr inbounds %class.Vector, ptr %3352, i64 0, i32 2
  %3375 = load double, ptr %3374, align 8, !tbaa !49
  %3376 = fsub double %1043, %3375
  %3377 = load double, ptr %3368, align 8, !tbaa !109
  %3378 = fmul double %32, %3377
  %3379 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %3074, i64 %3367, i32 1
  %3380 = load double, ptr %3379, align 8, !tbaa !111
  %3381 = fmul double %32, %3380
  %3382 = fsub double %3354, %34
  %3383 = getelementptr inbounds double, ptr %3362, i64 8
  %3384 = getelementptr inbounds double, ptr %3362, i64 9
  %3385 = getelementptr inbounds double, ptr %3362, i64 10
  %3386 = getelementptr inbounds double, ptr %3362, i64 11
  %3387 = load <2 x double>, ptr %3352, align 8, !tbaa !19
  %3388 = fsub <2 x double> %1040, %3387
  call void @_Z24fep_vdw_forceandenergiesdddddddddiidddPdS_S_(double noundef %3378, double noundef %3381, double noundef %3382, double noundef %57, double noundef %63, double noundef %38, double noundef %39, double noundef %54, double noundef %61, i32 noundef %46, i32 noundef %47, double noundef %48, double noundef %49, double noundef %43, ptr noundef nonnull %3, ptr noundef nonnull %4, ptr noundef nonnull %5)
  %3389 = load double, ptr %3, align 8, !tbaa !19
  %3390 = load double, ptr %5, align 8, !tbaa !19
  %3391 = insertelement <2 x double> poison, double %3390, i64 0
  %3392 = insertelement <2 x double> %3391, double %3389, i64 1
  %3393 = fadd <2 x double> %3341, %3392
  %3394 = load double, ptr %3383, align 8, !tbaa !19
  %3395 = fmul double %3373, %3394
  %3396 = load double, ptr %3384, align 8, !tbaa !19
  %3397 = fmul double %3373, %3396
  %3398 = load double, ptr %3385, align 8, !tbaa !19
  %3399 = fmul double %3373, %3398
  %3400 = load double, ptr %3386, align 8, !tbaa !19
  %3401 = fmul double %3373, %3400
  %3402 = fmul double %3359, %3395
  %3403 = fmul double %3397, 2.500000e-01
  %3404 = call double @llvm.fmuladd.f64(double %3402, double 0x3FC5555555555555, double %3403)
  %3405 = fmul double %3399, 5.000000e-01
  %3406 = call double @llvm.fmuladd.f64(double %3404, double %3359, double %3405)
  %3407 = call double @llvm.fmuladd.f64(double %3406, double %3359, double %3401)
  %3408 = insertelement <2 x double> poison, double %3407, i64 0
  %3409 = shufflevector <2 x double> %3408, <2 x double> poison, <2 x i32> zeroinitializer
  %3410 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %998, <2 x double> %3409, <2 x double> %3342)
  %3411 = call double @llvm.fmuladd.f64(double %3359, double %3395, double %3397)
  %3412 = call double @llvm.fmuladd.f64(double %3411, double %3359, double %3399)
  %3413 = fmul double %1004, %3412
  %3414 = load double, ptr %4, align 8, !tbaa !19
  %3415 = fadd double %3414, %3413
  %3416 = insertelement <2 x double> poison, double %3415, i64 0
  %3417 = shufflevector <2 x double> %3416, <2 x double> poison, <2 x i32> zeroinitializer
  %3418 = fmul <2 x double> %3388, %3417
  %3419 = fadd <2 x double> %3343, %3418
  %3420 = load <2 x double>, ptr %3369, align 8, !tbaa !19
  %3421 = fsub <2 x double> %3420, %3418
  store <2 x double> %3421, ptr %3369, align 8, !tbaa !19
  %3422 = fmul double %3376, %3415
  %3423 = fadd double %3340, %3422
  %3424 = getelementptr inbounds %class.Vector, ptr %966, i64 %3351, i32 2
  %3425 = load double, ptr %3424, align 8, !tbaa !112
  %3426 = fsub double %3425, %3422
  store double %3426, ptr %3424, align 8, !tbaa !112
  %3427 = add nuw nsw i64 %3339, 1
  %3428 = icmp eq i64 %3427, %3337
  br i1 %3428, label %3429, label %3338

3429:                                             ; preds = %3338, %3328
  %3430 = phi double [ %3329, %3328 ], [ %3423, %3338 ]
  %3431 = phi <2 x double> [ %3330, %3328 ], [ %3393, %3338 ]
  %3432 = phi <2 x double> [ %3331, %3328 ], [ %3410, %3338 ]
  %3433 = phi <2 x double> [ %3332, %3328 ], [ %3419, %3338 ]
  %3434 = load double, ptr @_ZN20ComputeNonbondedUtil7cutoff2E, align 8, !tbaa !19
  %3435 = call noundef i32 @_Z22pairlist_from_pairlistddddPK8CompAtomPKtiPtdPd(double noundef %3434, double noundef %3076, double noundef %3077, double noundef %1043, ptr noundef %106, ptr noundef %3048, i32 noundef %3049, ptr noundef %159, double noundef %34, ptr noundef %205)
  %3436 = icmp sgt i32 %3435, 0
  br i1 %3436, label %3437, label %3530

3437:                                             ; preds = %3429
  %3438 = zext i32 %3435 to i64
  br label %3439

3439:                                             ; preds = %3437, %3439
  %3440 = phi i64 [ 0, %3437 ], [ %3528, %3439 ]
  %3441 = phi double [ %3430, %3437 ], [ %3524, %3439 ]
  %3442 = phi <2 x double> [ %3431, %3437 ], [ %3494, %3439 ]
  %3443 = phi <2 x double> [ %3432, %3437 ], [ %3511, %3439 ]
  %3444 = phi <2 x double> [ %3433, %3437 ], [ %3520, %3439 ]
  %3445 = shl nuw nsw i64 %3440, 1
  %3446 = getelementptr inbounds i32, ptr %206, i64 %3445
  %3447 = load i32, ptr %3446, align 4, !tbaa !5
  %3448 = ashr i32 %3447, 14
  %3449 = add nsw i32 %3448, %37
  %3450 = getelementptr inbounds i16, ptr %159, i64 %3440
  %3451 = load i16, ptr %3450, align 2, !tbaa !44
  %3452 = zext i16 %3451 to i64
  %3453 = getelementptr inbounds %struct.CompAtom, ptr %106, i64 %3452
  %3454 = getelementptr inbounds double, ptr %205, i64 %3440
  %3455 = load double, ptr %3454, align 8, !tbaa !19
  %3456 = load ptr, ptr @_ZN20ComputeNonbondedUtil8r2_tableE, align 8, !tbaa !23
  %3457 = sext i32 %3449 to i64
  %3458 = getelementptr inbounds double, ptr %3456, i64 %3457
  %3459 = load double, ptr %3458, align 8, !tbaa !19
  %3460 = fsub double %3455, %3459
  %3461 = shl nsw i32 %3449, 4
  %3462 = sext i32 %3461 to i64
  %3463 = getelementptr inbounds double, ptr %31, i64 %3462
  %3464 = getelementptr inbounds %struct.CompAtom, ptr %106, i64 %3452, i32 2
  %3465 = load i16, ptr %3464, align 4, !tbaa !105
  %3466 = sext i16 %3465 to i32
  %3467 = shl nsw i32 %3466, 1
  %3468 = sext i32 %3467 to i64
  %3469 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %3074, i64 %3468
  %3470 = getelementptr inbounds %class.Vector, ptr %966, i64 %3452
  %3471 = getelementptr inbounds %struct.CompAtom, ptr %106, i64 %3452, i32 1
  %3472 = load float, ptr %3471, align 8, !tbaa !104
  %3473 = fpext float %3472 to double
  %3474 = fmul double %3065, %3473
  %3475 = getelementptr inbounds %class.Vector, ptr %3453, i64 0, i32 2
  %3476 = load double, ptr %3475, align 8, !tbaa !49
  %3477 = fsub double %1043, %3476
  %3478 = load double, ptr %3469, align 8, !tbaa !109
  %3479 = fmul double %32, %3478
  %3480 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %3074, i64 %3468, i32 1
  %3481 = load double, ptr %3480, align 8, !tbaa !111
  %3482 = fmul double %32, %3481
  %3483 = fsub double %3455, %34
  %3484 = getelementptr inbounds double, ptr %3463, i64 8
  %3485 = getelementptr inbounds double, ptr %3463, i64 9
  %3486 = getelementptr inbounds double, ptr %3463, i64 10
  %3487 = getelementptr inbounds double, ptr %3463, i64 11
  %3488 = load <2 x double>, ptr %3453, align 8, !tbaa !19
  %3489 = fsub <2 x double> %1040, %3488
  call void @_Z24fep_vdw_forceandenergiesdddddddddiidddPdS_S_(double noundef %3479, double noundef %3482, double noundef %3483, double noundef %83, double noundef %90, double noundef %38, double noundef %39, double noundef %81, double noundef %88, i32 noundef %46, i32 noundef %47, double noundef %48, double noundef %49, double noundef %43, ptr noundef nonnull %3, ptr noundef nonnull %4, ptr noundef nonnull %5)
  %3490 = load double, ptr %3, align 8, !tbaa !19
  %3491 = load double, ptr %5, align 8, !tbaa !19
  %3492 = insertelement <2 x double> poison, double %3491, i64 0
  %3493 = insertelement <2 x double> %3492, double %3490, i64 1
  %3494 = fadd <2 x double> %3442, %3493
  %3495 = load double, ptr %3484, align 8, !tbaa !19
  %3496 = fmul double %3474, %3495
  %3497 = load double, ptr %3485, align 8, !tbaa !19
  %3498 = fmul double %3474, %3497
  %3499 = load double, ptr %3486, align 8, !tbaa !19
  %3500 = fmul double %3474, %3499
  %3501 = load double, ptr %3487, align 8, !tbaa !19
  %3502 = fmul double %3474, %3501
  %3503 = fmul double %3460, %3496
  %3504 = fmul double %3498, 2.500000e-01
  %3505 = call double @llvm.fmuladd.f64(double %3503, double 0x3FC5555555555555, double %3504)
  %3506 = fmul double %3500, 5.000000e-01
  %3507 = call double @llvm.fmuladd.f64(double %3505, double %3460, double %3506)
  %3508 = call double @llvm.fmuladd.f64(double %3507, double %3460, double %3502)
  %3509 = insertelement <2 x double> poison, double %3508, i64 0
  %3510 = shufflevector <2 x double> %3509, <2 x double> poison, <2 x i32> zeroinitializer
  %3511 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %999, <2 x double> %3510, <2 x double> %3443)
  %3512 = call double @llvm.fmuladd.f64(double %3460, double %3496, double %3498)
  %3513 = call double @llvm.fmuladd.f64(double %3512, double %3460, double %3500)
  %3514 = fmul double %1005, %3513
  %3515 = load double, ptr %4, align 8, !tbaa !19
  %3516 = fadd double %3515, %3514
  %3517 = insertelement <2 x double> poison, double %3516, i64 0
  %3518 = shufflevector <2 x double> %3517, <2 x double> poison, <2 x i32> zeroinitializer
  %3519 = fmul <2 x double> %3489, %3518
  %3520 = fadd <2 x double> %3444, %3519
  %3521 = load <2 x double>, ptr %3470, align 8, !tbaa !19
  %3522 = fsub <2 x double> %3521, %3519
  store <2 x double> %3522, ptr %3470, align 8, !tbaa !19
  %3523 = fmul double %3477, %3516
  %3524 = fadd double %3441, %3523
  %3525 = getelementptr inbounds %class.Vector, ptr %966, i64 %3452, i32 2
  %3526 = load double, ptr %3525, align 8, !tbaa !112
  %3527 = fsub double %3526, %3523
  store double %3527, ptr %3525, align 8, !tbaa !112
  %3528 = add nuw nsw i64 %3440, 1
  %3529 = icmp eq i64 %3528, %3438
  br i1 %3529, label %3530, label %3439

3530:                                             ; preds = %3439, %3429
  %3531 = phi double [ %3430, %3429 ], [ %3524, %3439 ]
  %3532 = phi <2 x double> [ %3431, %3429 ], [ %3494, %3439 ]
  %3533 = phi <2 x double> [ %3432, %3429 ], [ %3511, %3439 ]
  %3534 = phi <2 x double> [ %3433, %3429 ], [ %3520, %3439 ]
  %3535 = load double, ptr @_ZN20ComputeNonbondedUtil7cutoff2E, align 8, !tbaa !19
  %3536 = call noundef i32 @_Z22pairlist_from_pairlistddddPK8CompAtomPKtiPtdPd(double noundef %3535, double noundef %3076, double noundef %3077, double noundef %1043, ptr noundef %106, ptr noundef %3046, i32 noundef %3047, ptr noundef %159, double noundef %34, ptr noundef %205)
  %3537 = icmp sgt i32 %3536, 0
  br i1 %3537, label %3538, label %3633

3538:                                             ; preds = %3530
  %3539 = zext i32 %3536 to i64
  br label %3540

3540:                                             ; preds = %3538, %3540
  %3541 = phi i64 [ 0, %3538 ], [ %3631, %3540 ]
  %3542 = phi double [ %3531, %3538 ], [ %3627, %3540 ]
  %3543 = phi <2 x double> [ %3532, %3538 ], [ %3597, %3540 ]
  %3544 = phi <2 x double> [ %3533, %3538 ], [ %3614, %3540 ]
  %3545 = phi <2 x double> [ %3534, %3538 ], [ %3623, %3540 ]
  %3546 = shl nuw nsw i64 %3541, 1
  %3547 = getelementptr inbounds i32, ptr %206, i64 %3546
  %3548 = load i32, ptr %3547, align 4, !tbaa !5
  %3549 = ashr i32 %3548, 14
  %3550 = add nsw i32 %3549, %37
  %3551 = getelementptr inbounds i16, ptr %159, i64 %3541
  %3552 = load i16, ptr %3551, align 2, !tbaa !44
  %3553 = zext i16 %3552 to i64
  %3554 = getelementptr inbounds %struct.CompAtom, ptr %106, i64 %3553
  %3555 = getelementptr inbounds double, ptr %205, i64 %3541
  %3556 = load double, ptr %3555, align 8, !tbaa !19
  %3557 = load ptr, ptr @_ZN20ComputeNonbondedUtil8r2_tableE, align 8, !tbaa !23
  %3558 = sext i32 %3550 to i64
  %3559 = getelementptr inbounds double, ptr %3557, i64 %3558
  %3560 = load double, ptr %3559, align 8, !tbaa !19
  %3561 = fsub double %3556, %3560
  %3562 = shl nsw i32 %3550, 4
  %3563 = sext i32 %3562 to i64
  %3564 = getelementptr inbounds double, ptr %31, i64 %3563
  %3565 = getelementptr inbounds %struct.CompAtom, ptr %106, i64 %3553, i32 2
  %3566 = load i16, ptr %3565, align 4, !tbaa !105
  %3567 = sext i16 %3566 to i32
  %3568 = shl nsw i32 %3567, 1
  %3569 = sext i32 %3568 to i64
  %3570 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %3074, i64 %3569
  %3571 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %3570, i64 1
  %3572 = getelementptr inbounds %class.Vector, ptr %966, i64 %3553
  %3573 = getelementptr inbounds %struct.CompAtom, ptr %106, i64 %3553, i32 1
  %3574 = load float, ptr %3573, align 8, !tbaa !104
  %3575 = fpext float %3574 to double
  %3576 = fmul double %3065, %3575
  %3577 = getelementptr inbounds %class.Vector, ptr %3554, i64 0, i32 2
  %3578 = load double, ptr %3577, align 8, !tbaa !49
  %3579 = fsub double %1043, %3578
  %3580 = load double, ptr %3571, align 8, !tbaa !109
  %3581 = fmul double %32, %3580
  %3582 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %3570, i64 1, i32 1
  %3583 = load double, ptr %3582, align 8, !tbaa !111
  %3584 = fmul double %32, %3583
  %3585 = fsub double %3556, %34
  %3586 = fmul double %997, %3576
  %3587 = getelementptr inbounds double, ptr %3564, i64 8
  %3588 = getelementptr inbounds double, ptr %3564, i64 9
  %3589 = getelementptr inbounds double, ptr %3564, i64 10
  %3590 = getelementptr inbounds double, ptr %3564, i64 11
  %3591 = load <2 x double>, ptr %3554, align 8, !tbaa !19
  %3592 = fsub <2 x double> %1040, %3591
  call void @_Z24fep_vdw_forceandenergiesdddddddddiidddPdS_S_(double noundef %3581, double noundef %3584, double noundef %3585, double noundef %57, double noundef %63, double noundef %38, double noundef %39, double noundef %54, double noundef %61, i32 noundef %46, i32 noundef %47, double noundef %48, double noundef %49, double noundef %43, ptr noundef nonnull %3, ptr noundef nonnull %4, ptr noundef nonnull %5)
  %3593 = load double, ptr %3, align 8, !tbaa !19
  %3594 = load double, ptr %5, align 8, !tbaa !19
  %3595 = insertelement <2 x double> poison, double %3594, i64 0
  %3596 = insertelement <2 x double> %3595, double %3593, i64 1
  %3597 = fadd <2 x double> %3543, %3596
  %3598 = load double, ptr %3587, align 8, !tbaa !19
  %3599 = fmul double %3586, %3598
  %3600 = load double, ptr %3588, align 8, !tbaa !19
  %3601 = fmul double %3586, %3600
  %3602 = load double, ptr %3589, align 8, !tbaa !19
  %3603 = fmul double %3586, %3602
  %3604 = load double, ptr %3590, align 8, !tbaa !19
  %3605 = fmul double %3586, %3604
  %3606 = fmul double %3561, %3599
  %3607 = fmul double %3601, 2.500000e-01
  %3608 = call double @llvm.fmuladd.f64(double %3606, double 0x3FC5555555555555, double %3607)
  %3609 = fmul double %3603, 5.000000e-01
  %3610 = call double @llvm.fmuladd.f64(double %3608, double %3561, double %3609)
  %3611 = call double @llvm.fmuladd.f64(double %3610, double %3561, double %3605)
  %3612 = insertelement <2 x double> poison, double %3611, i64 0
  %3613 = shufflevector <2 x double> %3612, <2 x double> poison, <2 x i32> zeroinitializer
  %3614 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %998, <2 x double> %3613, <2 x double> %3544)
  %3615 = call double @llvm.fmuladd.f64(double %3561, double %3599, double %3601)
  %3616 = call double @llvm.fmuladd.f64(double %3615, double %3561, double %3603)
  %3617 = fmul double %1006, %3616
  %3618 = load double, ptr %4, align 8, !tbaa !19
  %3619 = fadd double %3618, %3617
  %3620 = insertelement <2 x double> poison, double %3619, i64 0
  %3621 = shufflevector <2 x double> %3620, <2 x double> poison, <2 x i32> zeroinitializer
  %3622 = fmul <2 x double> %3592, %3621
  %3623 = fadd <2 x double> %3545, %3622
  %3624 = load <2 x double>, ptr %3572, align 8, !tbaa !19
  %3625 = fsub <2 x double> %3624, %3622
  store <2 x double> %3625, ptr %3572, align 8, !tbaa !19
  %3626 = fmul double %3579, %3619
  %3627 = fadd double %3542, %3626
  %3628 = getelementptr inbounds %class.Vector, ptr %966, i64 %3553, i32 2
  %3629 = load double, ptr %3628, align 8, !tbaa !112
  %3630 = fsub double %3629, %3626
  store double %3630, ptr %3628, align 8, !tbaa !112
  %3631 = add nuw nsw i64 %3541, 1
  %3632 = icmp eq i64 %3631, %3539
  br i1 %3632, label %3633, label %3540

3633:                                             ; preds = %3540, %3530
  %3634 = phi double [ %3531, %3530 ], [ %3627, %3540 ]
  %3635 = phi <2 x double> [ %3532, %3530 ], [ %3597, %3540 ]
  %3636 = phi <2 x double> [ %3533, %3530 ], [ %3614, %3540 ]
  %3637 = phi <2 x double> [ %3534, %3530 ], [ %3623, %3540 ]
  %3638 = load double, ptr @_ZN20ComputeNonbondedUtil7cutoff2E, align 8, !tbaa !19
  %3639 = call noundef i32 @_Z22pairlist_from_pairlistddddPK8CompAtomPKtiPtdPd(double noundef %3638, double noundef %3076, double noundef %3077, double noundef %1043, ptr noundef %106, ptr noundef %3051, i32 noundef %3052, ptr noundef %159, double noundef %34, ptr noundef %205)
  %3640 = icmp sgt i32 %3639, 0
  br i1 %3640, label %3641, label %3736

3641:                                             ; preds = %3633
  %3642 = zext i32 %3639 to i64
  br label %3643

3643:                                             ; preds = %3641, %3643
  %3644 = phi i64 [ 0, %3641 ], [ %3734, %3643 ]
  %3645 = phi double [ %3634, %3641 ], [ %3730, %3643 ]
  %3646 = phi <2 x double> [ %3635, %3641 ], [ %3700, %3643 ]
  %3647 = phi <2 x double> [ %3636, %3641 ], [ %3717, %3643 ]
  %3648 = phi <2 x double> [ %3637, %3641 ], [ %3726, %3643 ]
  %3649 = shl nuw nsw i64 %3644, 1
  %3650 = getelementptr inbounds i32, ptr %206, i64 %3649
  %3651 = load i32, ptr %3650, align 4, !tbaa !5
  %3652 = ashr i32 %3651, 14
  %3653 = add nsw i32 %3652, %37
  %3654 = getelementptr inbounds i16, ptr %159, i64 %3644
  %3655 = load i16, ptr %3654, align 2, !tbaa !44
  %3656 = zext i16 %3655 to i64
  %3657 = getelementptr inbounds %struct.CompAtom, ptr %106, i64 %3656
  %3658 = getelementptr inbounds double, ptr %205, i64 %3644
  %3659 = load double, ptr %3658, align 8, !tbaa !19
  %3660 = load ptr, ptr @_ZN20ComputeNonbondedUtil8r2_tableE, align 8, !tbaa !23
  %3661 = sext i32 %3653 to i64
  %3662 = getelementptr inbounds double, ptr %3660, i64 %3661
  %3663 = load double, ptr %3662, align 8, !tbaa !19
  %3664 = fsub double %3659, %3663
  %3665 = shl nsw i32 %3653, 4
  %3666 = sext i32 %3665 to i64
  %3667 = getelementptr inbounds double, ptr %31, i64 %3666
  %3668 = getelementptr inbounds %struct.CompAtom, ptr %106, i64 %3656, i32 2
  %3669 = load i16, ptr %3668, align 4, !tbaa !105
  %3670 = sext i16 %3669 to i32
  %3671 = shl nsw i32 %3670, 1
  %3672 = sext i32 %3671 to i64
  %3673 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %3074, i64 %3672
  %3674 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %3673, i64 1
  %3675 = getelementptr inbounds %class.Vector, ptr %966, i64 %3656
  %3676 = getelementptr inbounds %struct.CompAtom, ptr %106, i64 %3656, i32 1
  %3677 = load float, ptr %3676, align 8, !tbaa !104
  %3678 = fpext float %3677 to double
  %3679 = fmul double %3065, %3678
  %3680 = getelementptr inbounds %class.Vector, ptr %3657, i64 0, i32 2
  %3681 = load double, ptr %3680, align 8, !tbaa !49
  %3682 = fsub double %1043, %3681
  %3683 = load double, ptr %3674, align 8, !tbaa !109
  %3684 = fmul double %32, %3683
  %3685 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %3673, i64 1, i32 1
  %3686 = load double, ptr %3685, align 8, !tbaa !111
  %3687 = fmul double %32, %3686
  %3688 = fsub double %3659, %34
  %3689 = fmul double %997, %3679
  %3690 = getelementptr inbounds double, ptr %3667, i64 8
  %3691 = getelementptr inbounds double, ptr %3667, i64 9
  %3692 = getelementptr inbounds double, ptr %3667, i64 10
  %3693 = getelementptr inbounds double, ptr %3667, i64 11
  %3694 = load <2 x double>, ptr %3657, align 8, !tbaa !19
  %3695 = fsub <2 x double> %1040, %3694
  call void @_Z24fep_vdw_forceandenergiesdddddddddiidddPdS_S_(double noundef %3684, double noundef %3687, double noundef %3688, double noundef %83, double noundef %90, double noundef %38, double noundef %39, double noundef %81, double noundef %88, i32 noundef %46, i32 noundef %47, double noundef %48, double noundef %49, double noundef %43, ptr noundef nonnull %3, ptr noundef nonnull %4, ptr noundef nonnull %5)
  %3696 = load double, ptr %3, align 8, !tbaa !19
  %3697 = load double, ptr %5, align 8, !tbaa !19
  %3698 = insertelement <2 x double> poison, double %3697, i64 0
  %3699 = insertelement <2 x double> %3698, double %3696, i64 1
  %3700 = fadd <2 x double> %3646, %3699
  %3701 = load double, ptr %3690, align 8, !tbaa !19
  %3702 = fmul double %3689, %3701
  %3703 = load double, ptr %3691, align 8, !tbaa !19
  %3704 = fmul double %3689, %3703
  %3705 = load double, ptr %3692, align 8, !tbaa !19
  %3706 = fmul double %3689, %3705
  %3707 = load double, ptr %3693, align 8, !tbaa !19
  %3708 = fmul double %3689, %3707
  %3709 = fmul double %3664, %3702
  %3710 = fmul double %3704, 2.500000e-01
  %3711 = call double @llvm.fmuladd.f64(double %3709, double 0x3FC5555555555555, double %3710)
  %3712 = fmul double %3706, 5.000000e-01
  %3713 = call double @llvm.fmuladd.f64(double %3711, double %3664, double %3712)
  %3714 = call double @llvm.fmuladd.f64(double %3713, double %3664, double %3708)
  %3715 = insertelement <2 x double> poison, double %3714, i64 0
  %3716 = shufflevector <2 x double> %3715, <2 x double> poison, <2 x i32> zeroinitializer
  %3717 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %999, <2 x double> %3716, <2 x double> %3647)
  %3718 = call double @llvm.fmuladd.f64(double %3664, double %3702, double %3704)
  %3719 = call double @llvm.fmuladd.f64(double %3718, double %3664, double %3706)
  %3720 = fmul double %1007, %3719
  %3721 = load double, ptr %4, align 8, !tbaa !19
  %3722 = fadd double %3721, %3720
  %3723 = insertelement <2 x double> poison, double %3722, i64 0
  %3724 = shufflevector <2 x double> %3723, <2 x double> poison, <2 x i32> zeroinitializer
  %3725 = fmul <2 x double> %3695, %3724
  %3726 = fadd <2 x double> %3648, %3725
  %3727 = load <2 x double>, ptr %3675, align 8, !tbaa !19
  %3728 = fsub <2 x double> %3727, %3725
  store <2 x double> %3728, ptr %3675, align 8, !tbaa !19
  %3729 = fmul double %3682, %3722
  %3730 = fadd double %3645, %3729
  %3731 = getelementptr inbounds %class.Vector, ptr %966, i64 %3656, i32 2
  %3732 = load double, ptr %3731, align 8, !tbaa !112
  %3733 = fsub double %3732, %3729
  store double %3733, ptr %3731, align 8, !tbaa !112
  %3734 = add nuw nsw i64 %3644, 1
  %3735 = icmp eq i64 %3734, %3642
  br i1 %3735, label %3736, label %3643

3736:                                             ; preds = %3643, %3633
  %3737 = phi double [ %3634, %3633 ], [ %3730, %3643 ]
  %3738 = phi <2 x double> [ %3635, %3633 ], [ %3700, %3643 ]
  %3739 = phi <2 x double> [ %3636, %3633 ], [ %3717, %3643 ]
  %3740 = phi <2 x double> [ %3637, %3633 ], [ %3726, %3643 ]
  %3741 = add i32 %3040, %1009
  %3742 = add i32 %3741, %3045
  %3743 = add i32 %3742, %3050
  %3744 = add i32 %3743, %3205
  %3745 = add i32 %3744, %3536
  %3746 = add i32 %3745, %3639
  %3747 = getelementptr inbounds %class.Vector, ptr %966, i64 %1022
  %3748 = load <2 x double>, ptr %3747, align 8, !tbaa !19
  %3749 = fadd <2 x double> %3740, %3748
  store <2 x double> %3749, ptr %3747, align 8, !tbaa !19
  %3750 = getelementptr inbounds %class.Vector, ptr %966, i64 %1022, i32 2
  %3751 = load double, ptr %3750, align 8, !tbaa !112
  %3752 = fadd double %3737, %3751
  store double %3752, ptr %3750, align 8, !tbaa !112
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %5) #11
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %4) #11
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %3) #11
  br label %3753

3753:                                             ; preds = %3736, %1033
  %3754 = phi i32 [ %1034, %1033 ], [ %1038, %3736 ]
  %3755 = phi i32 [ %1018, %1033 ], [ %3053, %3736 ]
  %3756 = phi i32 [ %1017, %1033 ], [ %3054, %3736 ]
  %3757 = phi i32 [ %1016, %1033 ], [ %3055, %3736 ]
  %3758 = phi i32 [ %1015, %1033 ], [ %3056, %3736 ]
  %3759 = phi i32 [ %1014, %1033 ], [ %1048, %3736 ]
  %3760 = phi ptr [ %1013, %1033 ], [ %3057, %3736 ]
  %3761 = phi ptr [ %1012, %1033 ], [ %3058, %3736 ]
  %3762 = phi ptr [ %1011, %1033 ], [ %3059, %3736 ]
  %3763 = phi i32 [ %1036, %1033 ], [ %1010, %3736 ]
  %3764 = phi i32 [ %1009, %1033 ], [ %3746, %3736 ]
  %3765 = phi <2 x double> [ %1020, %1033 ], [ %3738, %3736 ]
  %3766 = phi <2 x double> [ %1021, %1033 ], [ %3739, %3736 ]
  %3767 = add nsw i32 %3763, 1
  %3768 = icmp slt i32 %3767, %972
  br i1 %3768, label %1008, label %3769

3769:                                             ; preds = %3753, %960
  %3770 = phi ptr [ null, %960 ], [ %3762, %3753 ]
  %3771 = phi i32 [ 0, %960 ], [ %3764, %3753 ]
  %3772 = phi <2 x double> [ zeroinitializer, %960 ], [ %3765, %3753 ]
  %3773 = phi <2 x double> [ zeroinitializer, %960 ], [ %3766, %3753 ]
  %3774 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 3
  %3775 = load ptr, ptr %3774, align 8, !tbaa !23
  %3776 = icmp sgt i32 %101, 0
  br i1 %3776, label %3777, label %3779

3777:                                             ; preds = %3769
  %3778 = zext i32 %101 to i64
  br label %3811

3779:                                             ; preds = %3811, %3769
  %3780 = phi <4 x double> [ zeroinitializer, %3769 ], [ %3832, %3811 ]
  %3781 = phi <2 x double> [ zeroinitializer, %3769 ], [ %3838, %3811 ]
  %3782 = sitofp i32 %3771 to double
  %3783 = getelementptr inbounds double, ptr %10, i64 22
  %3784 = getelementptr inbounds double, ptr %10, i64 2
  %3785 = load double, ptr %10, align 8, !tbaa !19
  %3786 = extractelement <2 x double> %3773, i64 1
  %3787 = fadd double %3786, %3785
  store double %3787, ptr %10, align 8, !tbaa !19
  %3788 = getelementptr inbounds double, ptr %10, i64 25
  %3789 = load double, ptr %3788, align 8, !tbaa !19
  %3790 = extractelement <2 x double> %3772, i64 0
  %3791 = fadd double %3790, %3789
  store double %3791, ptr %3788, align 8, !tbaa !19
  %3792 = load <2 x double>, ptr %3783, align 8, !tbaa !19
  %3793 = shufflevector <2 x double> %3773, <2 x double> poison, <2 x i32> <i32 poison, i32 0>
  %3794 = insertelement <2 x double> %3793, double %3782, i64 0
  %3795 = fadd <2 x double> %3792, %3794
  store <2 x double> %3795, ptr %3783, align 8, !tbaa !19
  %3796 = load <4 x double>, ptr %3784, align 8, !tbaa !19
  %3797 = shufflevector <2 x double> %3772, <2 x double> poison, <4 x i32> <i32 1, i32 poison, i32 poison, i32 poison>
  %3798 = shufflevector <2 x double> %3781, <2 x double> poison, <4 x i32> <i32 poison, i32 1, i32 poison, i32 poison>
  %3799 = shufflevector <4 x double> %3797, <4 x double> %3798, <4 x i32> <i32 0, i32 5, i32 poison, i32 poison>
  %3800 = shufflevector <4 x double> %3799, <4 x double> %3780, <4 x i32> <i32 0, i32 1, i32 4, i32 7>
  %3801 = fadd <4 x double> %3800, %3796
  store <4 x double> %3801, ptr %3784, align 8, !tbaa !19
  %3802 = getelementptr inbounds double, ptr %10, i64 6
  %3803 = load <4 x double>, ptr %3802, align 8, !tbaa !19
  %3804 = fadd <4 x double> %3780, %3803
  store <4 x double> %3804, ptr %3802, align 8, !tbaa !19
  %3805 = getelementptr inbounds double, ptr %10, i64 10
  %3806 = load <2 x double>, ptr %3805, align 8, !tbaa !19
  %3807 = shufflevector <4 x double> %3780, <4 x double> poison, <2 x i32> <i32 2, i32 poison>
  %3808 = shufflevector <2 x double> %3807, <2 x double> %3781, <2 x i32> <i32 0, i32 2>
  %3809 = fadd <2 x double> %3808, %3806
  store <2 x double> %3809, ptr %3805, align 8, !tbaa !19
  %3810 = icmp eq ptr %3770, null
  br i1 %3810, label %3842, label %3841

3811:                                             ; preds = %3777, %3811
  %3812 = phi i64 [ 0, %3777 ], [ %3839, %3811 ]
  %3813 = phi <4 x double> [ zeroinitializer, %3777 ], [ %3832, %3811 ]
  %3814 = phi <2 x double> [ zeroinitializer, %3777 ], [ %3838, %3811 ]
  %3815 = getelementptr inbounds %class.Vector, ptr %966, i64 %3812
  %3816 = getelementptr inbounds %class.Vector, ptr %3775, i64 %3812
  %3817 = load <2 x double>, ptr %3815, align 8, !tbaa !19
  %3818 = load <2 x double>, ptr %3816, align 8, !tbaa !19
  %3819 = fadd <2 x double> %3817, %3818
  store <2 x double> %3819, ptr %3816, align 8, !tbaa !19
  %3820 = getelementptr inbounds %class.Vector, ptr %966, i64 %3812, i32 2
  %3821 = load double, ptr %3820, align 8, !tbaa !112
  %3822 = getelementptr inbounds %class.Vector, ptr %3775, i64 %3812, i32 2
  %3823 = load double, ptr %3822, align 8, !tbaa !112
  %3824 = fadd double %3821, %3823
  store double %3824, ptr %3822, align 8, !tbaa !112
  %3825 = getelementptr inbounds %struct.CompAtom, ptr %104, i64 %3812
  %3826 = load double, ptr %3825, align 8, !tbaa !68
  %3827 = getelementptr inbounds %class.Vector, ptr %3825, i64 0, i32 1
  %3828 = load <2 x double>, ptr %3815, align 8, !tbaa !19
  %3829 = shufflevector <2 x double> %3828, <2 x double> poison, <4 x i32> <i32 0, i32 1, i32 1, i32 0>
  %3830 = load <2 x double>, ptr %3827, align 8, !tbaa !19
  %3831 = shufflevector <2 x double> %3830, <2 x double> poison, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %3832 = call <4 x double> @llvm.fmuladd.v4f64(<4 x double> %3829, <4 x double> %3831, <4 x double> %3813)
  %3833 = load double, ptr %3820, align 8, !tbaa !112
  %3834 = shufflevector <2 x double> %3828, <2 x double> poison, <2 x i32> <i32 poison, i32 0>
  %3835 = insertelement <2 x double> %3834, double %3833, i64 0
  %3836 = shufflevector <2 x double> %3830, <2 x double> poison, <2 x i32> <i32 1, i32 poison>
  %3837 = insertelement <2 x double> %3836, double %3826, i64 1
  %3838 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %3835, <2 x double> %3837, <2 x double> %3814)
  %3839 = add nuw nsw i64 %3812, 1
  %3840 = icmp eq i64 %3839, %3778
  br i1 %3840, label %3779, label %3811

3841:                                             ; preds = %3779
  call void @_ZdaPv(ptr noundef nonnull %3770) #13
  br label %3842

3842:                                             ; preds = %3841, %3779
  call void @llvm.lifetime.end.p0(i64 36, ptr nonnull %2) #11
  br label %3843

3843:                                             ; preds = %1, %3842
  ret void
}

; Function Attrs: sspstrong uwtable
define dso_local void @_ZN20ComputeNonbondedUtil30calc_self_energy_fullelect_fepEP9nonbonded(ptr nocapture noundef readonly %0) local_unnamed_addr #0 align 2 {
  %2 = alloca [9 x i32], align 16
  %3 = alloca double, align 8
  %4 = alloca double, align 8
  %5 = alloca double, align 8
  %6 = load i32, ptr @_ZN20ComputeNonbondedUtil8commOnlyE, align 4, !tbaa !5
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %8, label %4505

8:                                                ; preds = %1
  %9 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 7
  %10 = load ptr, ptr %9, align 8, !tbaa !9
  %11 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 10
  %12 = load ptr, ptr %11, align 8, !tbaa !14
  %13 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 11
  %14 = load i32, ptr %13, align 8, !tbaa !15
  %15 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 12
  %16 = load i32, ptr %15, align 4, !tbaa !16
  %17 = getelementptr inbounds %class.Pairlists, ptr %12, i64 0, i32 1
  store i32 0, ptr %17, align 8, !tbaa !17
  %18 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 6
  %19 = load <2 x double>, ptr %18, align 8, !tbaa !19
  %20 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 6, i32 2
  %21 = load double, ptr %20, align 8, !tbaa !20
  %22 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 13
  %23 = load double, ptr %22, align 8, !tbaa !21
  %24 = fmul double %23, %23
  %25 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 14
  %26 = load double, ptr %25, align 8, !tbaa !22
  %27 = fmul double %26, %26
  %28 = load double, ptr @_ZN20ComputeNonbondedUtil12dielectric_1E, align 8, !tbaa !19
  %29 = load ptr, ptr @_ZN20ComputeNonbondedUtil7ljTableE, align 8, !tbaa !23
  %30 = load ptr, ptr @_ZN20ComputeNonbondedUtil3molE, align 8, !tbaa !23
  %31 = load ptr, ptr @_ZN20ComputeNonbondedUtil11table_shortE, align 8, !tbaa !23
  %32 = load ptr, ptr @_ZN20ComputeNonbondedUtil10slow_tableE, align 8, !tbaa !23
  %33 = load double, ptr @_ZN20ComputeNonbondedUtil7scalingE, align 8, !tbaa !19
  %34 = load double, ptr @_ZN20ComputeNonbondedUtil7scale14E, align 8, !tbaa !19
  %35 = fsub double 1.000000e+00, %34
  %36 = load double, ptr @_ZN20ComputeNonbondedUtil8r2_deltaE, align 8, !tbaa !19
  %37 = load i32, ptr @_ZN20ComputeNonbondedUtil12r2_delta_expE, align 4, !tbaa !5
  %38 = shl i32 %37, 6
  %39 = add i32 %38, -65472
  %40 = load double, ptr @_ZN20ComputeNonbondedUtil9switchOn2E, align 8, !tbaa !19
  %41 = load double, ptr @_ZN20ComputeNonbondedUtil7cutoff2E, align 8, !tbaa !19
  %42 = fsub double %41, %40
  %43 = fmul double %42, %42
  %44 = fmul double %42, %43
  %45 = fdiv double 1.000000e+00, %44
  %46 = load double, ptr @_ZN20ComputeNonbondedUtil19alchElecLambdaStartE, align 8, !tbaa !19
  %47 = load double, ptr @_ZN20ComputeNonbondedUtil16alchVdwLambdaEndE, align 8, !tbaa !19
  %48 = load i32, ptr @_ZN20ComputeNonbondedUtil14Fep_WCA_repuOnE, align 4, !tbaa !5
  %49 = load i32, ptr @_ZN20ComputeNonbondedUtil14Fep_WCA_dispOnE, align 4, !tbaa !5
  %50 = load double, ptr @_ZN20ComputeNonbondedUtil9WCA_rcut1E, align 8, !tbaa !19
  %51 = load double, ptr @_ZN20ComputeNonbondedUtil9WCA_rcut2E, align 8, !tbaa !19
  %52 = load double, ptr @_ZN20ComputeNonbondedUtil10alchLambdaE, align 8, !tbaa !19
  %53 = fsub double 1.000000e+00, %46
  %54 = fcmp oge double %52, %47
  %55 = fdiv double %52, %47
  %56 = select i1 %54, double 1.000000e+00, double %55
  %57 = load double, ptr @_ZN20ComputeNonbondedUtil17alchVdwShiftCoeffE, align 8, !tbaa !19
  %58 = fsub double 1.000000e+00, %56
  %59 = fmul double %57, %58
  %60 = load double, ptr @_ZN20ComputeNonbondedUtil11alchLambda2E, align 8, !tbaa !19
  %61 = fcmp oge double %60, %47
  %62 = fdiv double %60, %47
  %63 = select i1 %61, double 1.000000e+00, double %62
  %64 = fsub double 1.000000e+00, %63
  %65 = fmul double %57, %64
  %66 = insertelement <2 x double> poison, double %60, i64 0
  %67 = insertelement <2 x double> %66, double %52, i64 1
  %68 = insertelement <2 x double> poison, double %46, i64 0
  %69 = shufflevector <2 x double> %68, <2 x double> poison, <2 x i32> zeroinitializer
  %70 = fcmp ugt <2 x double> %67, %69
  %71 = fsub <2 x double> %67, %69
  %72 = insertelement <2 x double> poison, double %53, i64 0
  %73 = shufflevector <2 x double> %72, <2 x double> poison, <2 x i32> zeroinitializer
  %74 = fdiv <2 x double> %71, %73
  %75 = select <2 x i1> %70, <2 x double> %74, <2 x double> zeroinitializer
  %76 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %67
  %77 = fcmp ugt <2 x double> %76, %69
  %78 = fsub <2 x double> %76, %69
  %79 = fdiv <2 x double> %78, %73
  %80 = extractelement <2 x double> %76, i64 1
  %81 = fcmp oge double %80, %47
  %82 = fdiv double %80, %47
  %83 = select i1 %81, double 1.000000e+00, double %82
  %84 = fsub double 1.000000e+00, %83
  %85 = fmul double %57, %84
  %86 = select <2 x i1> %77, <2 x double> %79, <2 x double> zeroinitializer
  %87 = extractelement <2 x double> %76, i64 0
  %88 = fcmp oge double %87, %47
  %89 = fdiv double %87, %47
  %90 = select i1 %88, double 1.000000e+00, double %89
  %91 = fsub double 1.000000e+00, %90
  %92 = fmul double %57, %91
  call void @llvm.lifetime.start.p0(i64 36, ptr nonnull %2) #11
  %93 = load i32, ptr @_ZN20ComputeNonbondedUtil12alchDecoupleE, align 4, !tbaa !5
  %94 = icmp eq i32 %93, 0
  %95 = getelementptr inbounds [9 x i32], ptr %2, i64 0, i64 6
  store i32 2, ptr %95, align 8, !tbaa !5
  %96 = getelementptr inbounds [9 x i32], ptr %2, i64 0, i64 4
  %97 = getelementptr inbounds [9 x i32], ptr %2, i64 0, i64 7
  %98 = getelementptr inbounds [9 x i32], ptr %2, i64 0, i64 5
  %99 = getelementptr inbounds [9 x i32], ptr %2, i64 0, i64 8
  %100 = zext i1 %94 to i32
  %101 = select i1 %94, i32 2, i32 0
  store i32 %100, ptr %96, align 16, !tbaa !5
  store i32 99, ptr %97, align 4, !tbaa !5
  store <4 x i32> <i32 0, i32 1, i32 2, i32 1>, ptr %2, align 16, !tbaa !5
  store i32 99, ptr %98, align 4, !tbaa !5
  store i32 %101, ptr %99, align 16, !tbaa !5
  %102 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 5
  %103 = load i32, ptr %102, align 8, !tbaa !5
  %104 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 5, i64 1
  %105 = load i32, ptr %104, align 4, !tbaa !5
  %106 = load ptr, ptr %0, align 8, !tbaa !23
  %107 = getelementptr inbounds [2 x ptr], ptr %0, i64 0, i64 1
  %108 = load ptr, ptr %107, align 8, !tbaa !23
  %109 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 1
  %110 = load ptr, ptr %109, align 8, !tbaa !23
  %111 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 1, i64 1
  %112 = load ptr, ptr %111, align 8, !tbaa !23
  %113 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 9
  %114 = load ptr, ptr %113, align 8, !tbaa !24
  %115 = add nsw i32 %105, 5
  %116 = getelementptr inbounds %class.ResizeArray, ptr %114, i64 0, i32 1
  %117 = load ptr, ptr %116, align 8, !tbaa !25
  %118 = getelementptr inbounds %class.ResizeArrayRaw, ptr %117, i64 0, i32 2
  %119 = load i32, ptr %118, align 8, !tbaa !27
  %120 = icmp slt i32 %119, %115
  br i1 %120, label %121, label %159

121:                                              ; preds = %8
  %122 = getelementptr inbounds %class.ResizeArrayRaw, ptr %117, i64 0, i32 3
  %123 = load i32, ptr %122, align 4, !tbaa !30
  %124 = icmp slt i32 %123, %115
  br i1 %124, label %125, label %159

125:                                              ; preds = %121
  %126 = sitofp i32 %123 to float
  %127 = getelementptr inbounds %class.ResizeArrayRaw, ptr %117, i64 0, i32 5
  %128 = load float, ptr %127, align 4, !tbaa !31
  %129 = fmul float %128, %126
  %130 = fptosi float %129 to i32
  %131 = tail call i32 @llvm.smax.i32(i32 %130, i32 %115)
  %132 = sub nsw i32 %131, %123
  %133 = getelementptr inbounds %class.ResizeArrayRaw, ptr %117, i64 0, i32 6
  %134 = load i32, ptr %133, align 8, !tbaa !32
  %135 = icmp slt i32 %132, %134
  %136 = add nsw i32 %134, %123
  %137 = select i1 %135, i32 %136, i32 %131
  %138 = sext i32 %137 to i64
  %139 = shl nsw i64 %138, 1
  %140 = add nsw i64 %139, 31
  %141 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %140) #12
  %142 = getelementptr inbounds i8, ptr %141, i64 31
  %143 = ptrtoint ptr %142 to i64
  %144 = and i64 %143, 31
  %145 = sub nsw i64 0, %144
  %146 = getelementptr inbounds i8, ptr %142, i64 %145
  %147 = load ptr, ptr %117, align 8, !tbaa !33
  %148 = sext i32 %119 to i64
  %149 = shl nsw i64 %148, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %146, ptr align 1 %147, i64 %149, i1 false)
  %150 = icmp eq i32 %123, 0
  br i1 %150, label %156, label %151

151:                                              ; preds = %125
  %152 = getelementptr inbounds %class.ResizeArrayRaw, ptr %117, i64 0, i32 1
  %153 = load ptr, ptr %152, align 8, !tbaa !34
  %154 = icmp eq ptr %153, null
  br i1 %154, label %156, label %155

155:                                              ; preds = %151
  tail call void @_ZdaPv(ptr noundef nonnull %153) #13
  br label %156

156:                                              ; preds = %155, %151, %125
  %157 = getelementptr inbounds %class.ResizeArrayRaw, ptr %117, i64 0, i32 1
  store ptr %141, ptr %157, align 8, !tbaa !34
  store ptr %146, ptr %117, align 8, !tbaa !33
  store i32 %137, ptr %122, align 4, !tbaa !30
  %158 = load ptr, ptr %116, align 8, !tbaa !25
  br label %159

159:                                              ; preds = %8, %121, %156
  %160 = phi ptr [ %117, %8 ], [ %117, %121 ], [ %158, %156 ]
  store i32 %115, ptr %118, align 8, !tbaa !27
  %161 = load ptr, ptr %160, align 8, !tbaa !33
  %162 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %114, i64 0, i32 1, i32 1
  %163 = load ptr, ptr %162, align 8, !tbaa !35
  %164 = getelementptr inbounds %class.ResizeArrayRaw.9, ptr %163, i64 0, i32 2
  %165 = load i32, ptr %164, align 8, !tbaa !37
  %166 = icmp slt i32 %165, %115
  br i1 %166, label %167, label %205

167:                                              ; preds = %159
  %168 = getelementptr inbounds %class.ResizeArrayRaw.9, ptr %163, i64 0, i32 3
  %169 = load i32, ptr %168, align 4, !tbaa !39
  %170 = icmp slt i32 %169, %115
  br i1 %170, label %171, label %205

171:                                              ; preds = %167
  %172 = sitofp i32 %169 to float
  %173 = getelementptr inbounds %class.ResizeArrayRaw.9, ptr %163, i64 0, i32 5
  %174 = load float, ptr %173, align 4, !tbaa !40
  %175 = fmul float %174, %172
  %176 = fptosi float %175 to i32
  %177 = tail call i32 @llvm.smax.i32(i32 %176, i32 %115)
  %178 = sub nsw i32 %177, %169
  %179 = getelementptr inbounds %class.ResizeArrayRaw.9, ptr %163, i64 0, i32 6
  %180 = load i32, ptr %179, align 8, !tbaa !41
  %181 = icmp slt i32 %178, %180
  %182 = add nsw i32 %180, %169
  %183 = select i1 %181, i32 %182, i32 %177
  %184 = sext i32 %183 to i64
  %185 = shl nsw i64 %184, 3
  %186 = add nsw i64 %185, 31
  %187 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %186) #12
  %188 = getelementptr inbounds i8, ptr %187, i64 31
  %189 = ptrtoint ptr %188 to i64
  %190 = and i64 %189, 31
  %191 = sub nsw i64 0, %190
  %192 = getelementptr inbounds i8, ptr %188, i64 %191
  %193 = load ptr, ptr %163, align 8, !tbaa !42
  %194 = sext i32 %165 to i64
  %195 = shl nsw i64 %194, 3
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %192, ptr align 1 %193, i64 %195, i1 false)
  %196 = icmp eq i32 %169, 0
  br i1 %196, label %202, label %197

197:                                              ; preds = %171
  %198 = getelementptr inbounds %class.ResizeArrayRaw.9, ptr %163, i64 0, i32 1
  %199 = load ptr, ptr %198, align 8, !tbaa !43
  %200 = icmp eq ptr %199, null
  br i1 %200, label %202, label %201

201:                                              ; preds = %197
  tail call void @_ZdaPv(ptr noundef nonnull %199) #13
  br label %202

202:                                              ; preds = %201, %197, %171
  %203 = getelementptr inbounds %class.ResizeArrayRaw.9, ptr %163, i64 0, i32 1
  store ptr %187, ptr %203, align 8, !tbaa !43
  store ptr %192, ptr %163, align 8, !tbaa !42
  store i32 %183, ptr %168, align 4, !tbaa !39
  %204 = load ptr, ptr %162, align 8, !tbaa !35
  br label %205

205:                                              ; preds = %159, %167, %202
  %206 = phi ptr [ %163, %159 ], [ %163, %167 ], [ %204, %202 ]
  store i32 %115, ptr %164, align 8, !tbaa !37
  %207 = load ptr, ptr %206, align 8, !tbaa !42
  %208 = getelementptr inbounds i32, ptr %207, i64 1
  %209 = icmp eq i32 %14, 0
  %210 = icmp ne i32 %16, 0
  %211 = select i1 %209, i1 %210, i1 false
  %212 = select i1 %211, i32 0, i32 %115
  %213 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %114, i64 0, i32 2, i32 1
  %214 = load ptr, ptr %213, align 8, !tbaa !25
  %215 = getelementptr inbounds %class.ResizeArrayRaw, ptr %214, i64 0, i32 2
  %216 = load i32, ptr %215, align 8, !tbaa !27
  %217 = icmp slt i32 %216, %212
  br i1 %217, label %218, label %256

218:                                              ; preds = %205
  %219 = getelementptr inbounds %class.ResizeArrayRaw, ptr %214, i64 0, i32 3
  %220 = load i32, ptr %219, align 4, !tbaa !30
  %221 = icmp slt i32 %220, %212
  br i1 %221, label %222, label %256

222:                                              ; preds = %218
  %223 = sitofp i32 %220 to float
  %224 = getelementptr inbounds %class.ResizeArrayRaw, ptr %214, i64 0, i32 5
  %225 = load float, ptr %224, align 4, !tbaa !31
  %226 = fmul float %225, %223
  %227 = fptosi float %226 to i32
  %228 = tail call i32 @llvm.smax.i32(i32 %227, i32 %212)
  %229 = sub nsw i32 %228, %220
  %230 = getelementptr inbounds %class.ResizeArrayRaw, ptr %214, i64 0, i32 6
  %231 = load i32, ptr %230, align 8, !tbaa !32
  %232 = icmp slt i32 %229, %231
  %233 = add nsw i32 %231, %220
  %234 = select i1 %232, i32 %233, i32 %228
  %235 = sext i32 %234 to i64
  %236 = shl nsw i64 %235, 1
  %237 = add nsw i64 %236, 31
  %238 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %237) #12
  %239 = getelementptr inbounds i8, ptr %238, i64 31
  %240 = ptrtoint ptr %239 to i64
  %241 = and i64 %240, 31
  %242 = sub nsw i64 0, %241
  %243 = getelementptr inbounds i8, ptr %239, i64 %242
  %244 = load ptr, ptr %214, align 8, !tbaa !33
  %245 = sext i32 %216 to i64
  %246 = shl nsw i64 %245, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %243, ptr align 1 %244, i64 %246, i1 false)
  %247 = icmp eq i32 %220, 0
  br i1 %247, label %253, label %248

248:                                              ; preds = %222
  %249 = getelementptr inbounds %class.ResizeArrayRaw, ptr %214, i64 0, i32 1
  %250 = load ptr, ptr %249, align 8, !tbaa !34
  %251 = icmp eq ptr %250, null
  br i1 %251, label %253, label %252

252:                                              ; preds = %248
  tail call void @_ZdaPv(ptr noundef nonnull %250) #13
  br label %253

253:                                              ; preds = %252, %248, %222
  %254 = getelementptr inbounds %class.ResizeArrayRaw, ptr %214, i64 0, i32 1
  store ptr %238, ptr %254, align 8, !tbaa !34
  store ptr %243, ptr %214, align 8, !tbaa !33
  store i32 %234, ptr %219, align 4, !tbaa !30
  %255 = load ptr, ptr %213, align 8, !tbaa !25
  br label %256

256:                                              ; preds = %205, %218, %253
  %257 = phi ptr [ %214, %205 ], [ %214, %218 ], [ %255, %253 ]
  store i32 %212, ptr %215, align 8, !tbaa !27
  %258 = load ptr, ptr %257, align 8, !tbaa !33
  %259 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %114, i64 0, i32 3, i32 1
  %260 = load ptr, ptr %259, align 8, !tbaa !25
  %261 = getelementptr inbounds %class.ResizeArrayRaw, ptr %260, i64 0, i32 2
  %262 = load i32, ptr %261, align 8, !tbaa !27
  %263 = icmp slt i32 %262, %212
  br i1 %263, label %264, label %302

264:                                              ; preds = %256
  %265 = getelementptr inbounds %class.ResizeArrayRaw, ptr %260, i64 0, i32 3
  %266 = load i32, ptr %265, align 4, !tbaa !30
  %267 = icmp slt i32 %266, %212
  br i1 %267, label %268, label %302

268:                                              ; preds = %264
  %269 = sitofp i32 %266 to float
  %270 = getelementptr inbounds %class.ResizeArrayRaw, ptr %260, i64 0, i32 5
  %271 = load float, ptr %270, align 4, !tbaa !31
  %272 = fmul float %271, %269
  %273 = fptosi float %272 to i32
  %274 = tail call i32 @llvm.smax.i32(i32 %273, i32 %212)
  %275 = sub nsw i32 %274, %266
  %276 = getelementptr inbounds %class.ResizeArrayRaw, ptr %260, i64 0, i32 6
  %277 = load i32, ptr %276, align 8, !tbaa !32
  %278 = icmp slt i32 %275, %277
  %279 = add nsw i32 %277, %266
  %280 = select i1 %278, i32 %279, i32 %274
  %281 = sext i32 %280 to i64
  %282 = shl nsw i64 %281, 1
  %283 = add nsw i64 %282, 31
  %284 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %283) #12
  %285 = getelementptr inbounds i8, ptr %284, i64 31
  %286 = ptrtoint ptr %285 to i64
  %287 = and i64 %286, 31
  %288 = sub nsw i64 0, %287
  %289 = getelementptr inbounds i8, ptr %285, i64 %288
  %290 = load ptr, ptr %260, align 8, !tbaa !33
  %291 = sext i32 %262 to i64
  %292 = shl nsw i64 %291, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %289, ptr align 1 %290, i64 %292, i1 false)
  %293 = icmp eq i32 %266, 0
  br i1 %293, label %299, label %294

294:                                              ; preds = %268
  %295 = getelementptr inbounds %class.ResizeArrayRaw, ptr %260, i64 0, i32 1
  %296 = load ptr, ptr %295, align 8, !tbaa !34
  %297 = icmp eq ptr %296, null
  br i1 %297, label %299, label %298

298:                                              ; preds = %294
  tail call void @_ZdaPv(ptr noundef nonnull %296) #13
  br label %299

299:                                              ; preds = %298, %294, %268
  %300 = getelementptr inbounds %class.ResizeArrayRaw, ptr %260, i64 0, i32 1
  store ptr %284, ptr %300, align 8, !tbaa !34
  store ptr %289, ptr %260, align 8, !tbaa !33
  store i32 %280, ptr %265, align 4, !tbaa !30
  %301 = load ptr, ptr %259, align 8, !tbaa !25
  br label %302

302:                                              ; preds = %256, %264, %299
  %303 = phi ptr [ %260, %256 ], [ %260, %264 ], [ %301, %299 ]
  store i32 %212, ptr %261, align 8, !tbaa !27
  %304 = load ptr, ptr %303, align 8, !tbaa !33
  %305 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %114, i64 0, i32 4, i32 1
  %306 = load ptr, ptr %305, align 8, !tbaa !25
  %307 = getelementptr inbounds %class.ResizeArrayRaw, ptr %306, i64 0, i32 2
  %308 = load i32, ptr %307, align 8, !tbaa !27
  %309 = icmp slt i32 %308, %212
  br i1 %309, label %310, label %348

310:                                              ; preds = %302
  %311 = getelementptr inbounds %class.ResizeArrayRaw, ptr %306, i64 0, i32 3
  %312 = load i32, ptr %311, align 4, !tbaa !30
  %313 = icmp slt i32 %312, %212
  br i1 %313, label %314, label %348

314:                                              ; preds = %310
  %315 = sitofp i32 %312 to float
  %316 = getelementptr inbounds %class.ResizeArrayRaw, ptr %306, i64 0, i32 5
  %317 = load float, ptr %316, align 4, !tbaa !31
  %318 = fmul float %317, %315
  %319 = fptosi float %318 to i32
  %320 = tail call i32 @llvm.smax.i32(i32 %319, i32 %212)
  %321 = sub nsw i32 %320, %312
  %322 = getelementptr inbounds %class.ResizeArrayRaw, ptr %306, i64 0, i32 6
  %323 = load i32, ptr %322, align 8, !tbaa !32
  %324 = icmp slt i32 %321, %323
  %325 = add nsw i32 %323, %312
  %326 = select i1 %324, i32 %325, i32 %320
  %327 = sext i32 %326 to i64
  %328 = shl nsw i64 %327, 1
  %329 = add nsw i64 %328, 31
  %330 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %329) #12
  %331 = getelementptr inbounds i8, ptr %330, i64 31
  %332 = ptrtoint ptr %331 to i64
  %333 = and i64 %332, 31
  %334 = sub nsw i64 0, %333
  %335 = getelementptr inbounds i8, ptr %331, i64 %334
  %336 = load ptr, ptr %306, align 8, !tbaa !33
  %337 = sext i32 %308 to i64
  %338 = shl nsw i64 %337, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %335, ptr align 1 %336, i64 %338, i1 false)
  %339 = icmp eq i32 %312, 0
  br i1 %339, label %345, label %340

340:                                              ; preds = %314
  %341 = getelementptr inbounds %class.ResizeArrayRaw, ptr %306, i64 0, i32 1
  %342 = load ptr, ptr %341, align 8, !tbaa !34
  %343 = icmp eq ptr %342, null
  br i1 %343, label %345, label %344

344:                                              ; preds = %340
  tail call void @_ZdaPv(ptr noundef nonnull %342) #13
  br label %345

345:                                              ; preds = %344, %340, %314
  %346 = getelementptr inbounds %class.ResizeArrayRaw, ptr %306, i64 0, i32 1
  store ptr %330, ptr %346, align 8, !tbaa !34
  store ptr %335, ptr %306, align 8, !tbaa !33
  store i32 %326, ptr %311, align 4, !tbaa !30
  %347 = load ptr, ptr %305, align 8, !tbaa !25
  br label %348

348:                                              ; preds = %302, %310, %345
  %349 = phi ptr [ %306, %302 ], [ %306, %310 ], [ %347, %345 ]
  store i32 %212, ptr %307, align 8, !tbaa !27
  %350 = load ptr, ptr %349, align 8, !tbaa !33
  %351 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %114, i64 0, i32 5, i32 1
  %352 = load ptr, ptr %351, align 8, !tbaa !25
  %353 = getelementptr inbounds %class.ResizeArrayRaw, ptr %352, i64 0, i32 2
  %354 = load i32, ptr %353, align 8, !tbaa !27
  %355 = icmp slt i32 %354, %212
  br i1 %355, label %356, label %394

356:                                              ; preds = %348
  %357 = getelementptr inbounds %class.ResizeArrayRaw, ptr %352, i64 0, i32 3
  %358 = load i32, ptr %357, align 4, !tbaa !30
  %359 = icmp slt i32 %358, %212
  br i1 %359, label %360, label %394

360:                                              ; preds = %356
  %361 = sitofp i32 %358 to float
  %362 = getelementptr inbounds %class.ResizeArrayRaw, ptr %352, i64 0, i32 5
  %363 = load float, ptr %362, align 4, !tbaa !31
  %364 = fmul float %363, %361
  %365 = fptosi float %364 to i32
  %366 = tail call i32 @llvm.smax.i32(i32 %365, i32 %212)
  %367 = sub nsw i32 %366, %358
  %368 = getelementptr inbounds %class.ResizeArrayRaw, ptr %352, i64 0, i32 6
  %369 = load i32, ptr %368, align 8, !tbaa !32
  %370 = icmp slt i32 %367, %369
  %371 = add nsw i32 %369, %358
  %372 = select i1 %370, i32 %371, i32 %366
  %373 = sext i32 %372 to i64
  %374 = shl nsw i64 %373, 1
  %375 = add nsw i64 %374, 31
  %376 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %375) #12
  %377 = getelementptr inbounds i8, ptr %376, i64 31
  %378 = ptrtoint ptr %377 to i64
  %379 = and i64 %378, 31
  %380 = sub nsw i64 0, %379
  %381 = getelementptr inbounds i8, ptr %377, i64 %380
  %382 = load ptr, ptr %352, align 8, !tbaa !33
  %383 = sext i32 %354 to i64
  %384 = shl nsw i64 %383, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %381, ptr align 1 %382, i64 %384, i1 false)
  %385 = icmp eq i32 %358, 0
  br i1 %385, label %391, label %386

386:                                              ; preds = %360
  %387 = getelementptr inbounds %class.ResizeArrayRaw, ptr %352, i64 0, i32 1
  %388 = load ptr, ptr %387, align 8, !tbaa !34
  %389 = icmp eq ptr %388, null
  br i1 %389, label %391, label %390

390:                                              ; preds = %386
  tail call void @_ZdaPv(ptr noundef nonnull %388) #13
  br label %391

391:                                              ; preds = %390, %386, %360
  %392 = getelementptr inbounds %class.ResizeArrayRaw, ptr %352, i64 0, i32 1
  store ptr %376, ptr %392, align 8, !tbaa !34
  store ptr %381, ptr %352, align 8, !tbaa !33
  store i32 %372, ptr %357, align 4, !tbaa !30
  %393 = load ptr, ptr %351, align 8, !tbaa !25
  br label %394

394:                                              ; preds = %348, %356, %391
  %395 = phi ptr [ %352, %348 ], [ %352, %356 ], [ %393, %391 ]
  store i32 %212, ptr %353, align 8, !tbaa !27
  %396 = load ptr, ptr %395, align 8, !tbaa !33
  %397 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %114, i64 0, i32 6, i32 1
  %398 = load ptr, ptr %397, align 8, !tbaa !25
  %399 = getelementptr inbounds %class.ResizeArrayRaw, ptr %398, i64 0, i32 2
  %400 = load i32, ptr %399, align 8, !tbaa !27
  %401 = icmp slt i32 %400, %212
  br i1 %401, label %402, label %440

402:                                              ; preds = %394
  %403 = getelementptr inbounds %class.ResizeArrayRaw, ptr %398, i64 0, i32 3
  %404 = load i32, ptr %403, align 4, !tbaa !30
  %405 = icmp slt i32 %404, %212
  br i1 %405, label %406, label %440

406:                                              ; preds = %402
  %407 = sitofp i32 %404 to float
  %408 = getelementptr inbounds %class.ResizeArrayRaw, ptr %398, i64 0, i32 5
  %409 = load float, ptr %408, align 4, !tbaa !31
  %410 = fmul float %409, %407
  %411 = fptosi float %410 to i32
  %412 = tail call i32 @llvm.smax.i32(i32 %411, i32 %212)
  %413 = sub nsw i32 %412, %404
  %414 = getelementptr inbounds %class.ResizeArrayRaw, ptr %398, i64 0, i32 6
  %415 = load i32, ptr %414, align 8, !tbaa !32
  %416 = icmp slt i32 %413, %415
  %417 = add nsw i32 %415, %404
  %418 = select i1 %416, i32 %417, i32 %412
  %419 = sext i32 %418 to i64
  %420 = shl nsw i64 %419, 1
  %421 = add nsw i64 %420, 31
  %422 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %421) #12
  %423 = getelementptr inbounds i8, ptr %422, i64 31
  %424 = ptrtoint ptr %423 to i64
  %425 = and i64 %424, 31
  %426 = sub nsw i64 0, %425
  %427 = getelementptr inbounds i8, ptr %423, i64 %426
  %428 = load ptr, ptr %398, align 8, !tbaa !33
  %429 = sext i32 %400 to i64
  %430 = shl nsw i64 %429, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %427, ptr align 1 %428, i64 %430, i1 false)
  %431 = icmp eq i32 %404, 0
  br i1 %431, label %437, label %432

432:                                              ; preds = %406
  %433 = getelementptr inbounds %class.ResizeArrayRaw, ptr %398, i64 0, i32 1
  %434 = load ptr, ptr %433, align 8, !tbaa !34
  %435 = icmp eq ptr %434, null
  br i1 %435, label %437, label %436

436:                                              ; preds = %432
  tail call void @_ZdaPv(ptr noundef nonnull %434) #13
  br label %437

437:                                              ; preds = %436, %432, %406
  %438 = getelementptr inbounds %class.ResizeArrayRaw, ptr %398, i64 0, i32 1
  store ptr %422, ptr %438, align 8, !tbaa !34
  store ptr %427, ptr %398, align 8, !tbaa !33
  store i32 %418, ptr %403, align 4, !tbaa !30
  %439 = load ptr, ptr %397, align 8, !tbaa !25
  br label %440

440:                                              ; preds = %394, %402, %437
  %441 = phi ptr [ %398, %394 ], [ %398, %402 ], [ %439, %437 ]
  store i32 %212, ptr %399, align 8, !tbaa !27
  %442 = load ptr, ptr %441, align 8, !tbaa !33
  %443 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %114, i64 0, i32 15, i32 1
  %444 = load ptr, ptr %443, align 8, !tbaa !25
  %445 = getelementptr inbounds %class.ResizeArrayRaw, ptr %444, i64 0, i32 2
  %446 = load i32, ptr %445, align 8, !tbaa !27
  %447 = icmp slt i32 %446, %212
  br i1 %447, label %448, label %486

448:                                              ; preds = %440
  %449 = getelementptr inbounds %class.ResizeArrayRaw, ptr %444, i64 0, i32 3
  %450 = load i32, ptr %449, align 4, !tbaa !30
  %451 = icmp slt i32 %450, %212
  br i1 %451, label %452, label %486

452:                                              ; preds = %448
  %453 = sitofp i32 %450 to float
  %454 = getelementptr inbounds %class.ResizeArrayRaw, ptr %444, i64 0, i32 5
  %455 = load float, ptr %454, align 4, !tbaa !31
  %456 = fmul float %455, %453
  %457 = fptosi float %456 to i32
  %458 = tail call i32 @llvm.smax.i32(i32 %457, i32 %212)
  %459 = sub nsw i32 %458, %450
  %460 = getelementptr inbounds %class.ResizeArrayRaw, ptr %444, i64 0, i32 6
  %461 = load i32, ptr %460, align 8, !tbaa !32
  %462 = icmp slt i32 %459, %461
  %463 = add nsw i32 %461, %450
  %464 = select i1 %462, i32 %463, i32 %458
  %465 = sext i32 %464 to i64
  %466 = shl nsw i64 %465, 1
  %467 = add nsw i64 %466, 31
  %468 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %467) #12
  %469 = getelementptr inbounds i8, ptr %468, i64 31
  %470 = ptrtoint ptr %469 to i64
  %471 = and i64 %470, 31
  %472 = sub nsw i64 0, %471
  %473 = getelementptr inbounds i8, ptr %469, i64 %472
  %474 = load ptr, ptr %444, align 8, !tbaa !33
  %475 = sext i32 %446 to i64
  %476 = shl nsw i64 %475, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %473, ptr align 1 %474, i64 %476, i1 false)
  %477 = icmp eq i32 %450, 0
  br i1 %477, label %483, label %478

478:                                              ; preds = %452
  %479 = getelementptr inbounds %class.ResizeArrayRaw, ptr %444, i64 0, i32 1
  %480 = load ptr, ptr %479, align 8, !tbaa !34
  %481 = icmp eq ptr %480, null
  br i1 %481, label %483, label %482

482:                                              ; preds = %478
  tail call void @_ZdaPv(ptr noundef nonnull %480) #13
  br label %483

483:                                              ; preds = %482, %478, %452
  %484 = getelementptr inbounds %class.ResizeArrayRaw, ptr %444, i64 0, i32 1
  store ptr %468, ptr %484, align 8, !tbaa !34
  store ptr %473, ptr %444, align 8, !tbaa !33
  store i32 %464, ptr %449, align 4, !tbaa !30
  %485 = load ptr, ptr %443, align 8, !tbaa !25
  br label %486

486:                                              ; preds = %440, %448, %483
  %487 = phi ptr [ %444, %440 ], [ %444, %448 ], [ %485, %483 ]
  store i32 %212, ptr %445, align 8, !tbaa !27
  %488 = load ptr, ptr %487, align 8, !tbaa !33
  %489 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %114, i64 0, i32 16, i32 1
  %490 = load ptr, ptr %489, align 8, !tbaa !25
  %491 = getelementptr inbounds %class.ResizeArrayRaw, ptr %490, i64 0, i32 2
  %492 = load i32, ptr %491, align 8, !tbaa !27
  %493 = icmp slt i32 %492, %212
  br i1 %493, label %494, label %532

494:                                              ; preds = %486
  %495 = getelementptr inbounds %class.ResizeArrayRaw, ptr %490, i64 0, i32 3
  %496 = load i32, ptr %495, align 4, !tbaa !30
  %497 = icmp slt i32 %496, %212
  br i1 %497, label %498, label %532

498:                                              ; preds = %494
  %499 = sitofp i32 %496 to float
  %500 = getelementptr inbounds %class.ResizeArrayRaw, ptr %490, i64 0, i32 5
  %501 = load float, ptr %500, align 4, !tbaa !31
  %502 = fmul float %501, %499
  %503 = fptosi float %502 to i32
  %504 = tail call i32 @llvm.smax.i32(i32 %503, i32 %212)
  %505 = sub nsw i32 %504, %496
  %506 = getelementptr inbounds %class.ResizeArrayRaw, ptr %490, i64 0, i32 6
  %507 = load i32, ptr %506, align 8, !tbaa !32
  %508 = icmp slt i32 %505, %507
  %509 = add nsw i32 %507, %496
  %510 = select i1 %508, i32 %509, i32 %504
  %511 = sext i32 %510 to i64
  %512 = shl nsw i64 %511, 1
  %513 = add nsw i64 %512, 31
  %514 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %513) #12
  %515 = getelementptr inbounds i8, ptr %514, i64 31
  %516 = ptrtoint ptr %515 to i64
  %517 = and i64 %516, 31
  %518 = sub nsw i64 0, %517
  %519 = getelementptr inbounds i8, ptr %515, i64 %518
  %520 = load ptr, ptr %490, align 8, !tbaa !33
  %521 = sext i32 %492 to i64
  %522 = shl nsw i64 %521, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %519, ptr align 1 %520, i64 %522, i1 false)
  %523 = icmp eq i32 %496, 0
  br i1 %523, label %529, label %524

524:                                              ; preds = %498
  %525 = getelementptr inbounds %class.ResizeArrayRaw, ptr %490, i64 0, i32 1
  %526 = load ptr, ptr %525, align 8, !tbaa !34
  %527 = icmp eq ptr %526, null
  br i1 %527, label %529, label %528

528:                                              ; preds = %524
  tail call void @_ZdaPv(ptr noundef nonnull %526) #13
  br label %529

529:                                              ; preds = %528, %524, %498
  %530 = getelementptr inbounds %class.ResizeArrayRaw, ptr %490, i64 0, i32 1
  store ptr %514, ptr %530, align 8, !tbaa !34
  store ptr %519, ptr %490, align 8, !tbaa !33
  store i32 %510, ptr %495, align 4, !tbaa !30
  %531 = load ptr, ptr %489, align 8, !tbaa !25
  br label %532

532:                                              ; preds = %486, %494, %529
  %533 = phi ptr [ %490, %486 ], [ %490, %494 ], [ %531, %529 ]
  store i32 %212, ptr %491, align 8, !tbaa !27
  %534 = load ptr, ptr %533, align 8, !tbaa !33
  %535 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %114, i64 0, i32 9, i32 1
  %536 = load ptr, ptr %535, align 8, !tbaa !25
  %537 = getelementptr inbounds %class.ResizeArrayRaw, ptr %536, i64 0, i32 2
  %538 = load i32, ptr %537, align 8, !tbaa !27
  %539 = icmp slt i32 %538, %212
  br i1 %539, label %540, label %578

540:                                              ; preds = %532
  %541 = getelementptr inbounds %class.ResizeArrayRaw, ptr %536, i64 0, i32 3
  %542 = load i32, ptr %541, align 4, !tbaa !30
  %543 = icmp slt i32 %542, %212
  br i1 %543, label %544, label %578

544:                                              ; preds = %540
  %545 = sitofp i32 %542 to float
  %546 = getelementptr inbounds %class.ResizeArrayRaw, ptr %536, i64 0, i32 5
  %547 = load float, ptr %546, align 4, !tbaa !31
  %548 = fmul float %547, %545
  %549 = fptosi float %548 to i32
  %550 = tail call i32 @llvm.smax.i32(i32 %549, i32 %212)
  %551 = sub nsw i32 %550, %542
  %552 = getelementptr inbounds %class.ResizeArrayRaw, ptr %536, i64 0, i32 6
  %553 = load i32, ptr %552, align 8, !tbaa !32
  %554 = icmp slt i32 %551, %553
  %555 = add nsw i32 %553, %542
  %556 = select i1 %554, i32 %555, i32 %550
  %557 = sext i32 %556 to i64
  %558 = shl nsw i64 %557, 1
  %559 = add nsw i64 %558, 31
  %560 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %559) #12
  %561 = getelementptr inbounds i8, ptr %560, i64 31
  %562 = ptrtoint ptr %561 to i64
  %563 = and i64 %562, 31
  %564 = sub nsw i64 0, %563
  %565 = getelementptr inbounds i8, ptr %561, i64 %564
  %566 = load ptr, ptr %536, align 8, !tbaa !33
  %567 = sext i32 %538 to i64
  %568 = shl nsw i64 %567, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %565, ptr align 1 %566, i64 %568, i1 false)
  %569 = icmp eq i32 %542, 0
  br i1 %569, label %575, label %570

570:                                              ; preds = %544
  %571 = getelementptr inbounds %class.ResizeArrayRaw, ptr %536, i64 0, i32 1
  %572 = load ptr, ptr %571, align 8, !tbaa !34
  %573 = icmp eq ptr %572, null
  br i1 %573, label %575, label %574

574:                                              ; preds = %570
  tail call void @_ZdaPv(ptr noundef nonnull %572) #13
  br label %575

575:                                              ; preds = %574, %570, %544
  %576 = getelementptr inbounds %class.ResizeArrayRaw, ptr %536, i64 0, i32 1
  store ptr %560, ptr %576, align 8, !tbaa !34
  store ptr %565, ptr %536, align 8, !tbaa !33
  store i32 %556, ptr %541, align 4, !tbaa !30
  %577 = load ptr, ptr %535, align 8, !tbaa !25
  br label %578

578:                                              ; preds = %532, %540, %575
  %579 = phi ptr [ %536, %532 ], [ %536, %540 ], [ %577, %575 ]
  store i32 %212, ptr %537, align 8, !tbaa !27
  %580 = load ptr, ptr %579, align 8, !tbaa !33
  %581 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %114, i64 0, i32 10, i32 1
  %582 = load ptr, ptr %581, align 8, !tbaa !25
  %583 = getelementptr inbounds %class.ResizeArrayRaw, ptr %582, i64 0, i32 2
  %584 = load i32, ptr %583, align 8, !tbaa !27
  %585 = icmp slt i32 %584, %212
  br i1 %585, label %586, label %624

586:                                              ; preds = %578
  %587 = getelementptr inbounds %class.ResizeArrayRaw, ptr %582, i64 0, i32 3
  %588 = load i32, ptr %587, align 4, !tbaa !30
  %589 = icmp slt i32 %588, %212
  br i1 %589, label %590, label %624

590:                                              ; preds = %586
  %591 = sitofp i32 %588 to float
  %592 = getelementptr inbounds %class.ResizeArrayRaw, ptr %582, i64 0, i32 5
  %593 = load float, ptr %592, align 4, !tbaa !31
  %594 = fmul float %593, %591
  %595 = fptosi float %594 to i32
  %596 = tail call i32 @llvm.smax.i32(i32 %595, i32 %212)
  %597 = sub nsw i32 %596, %588
  %598 = getelementptr inbounds %class.ResizeArrayRaw, ptr %582, i64 0, i32 6
  %599 = load i32, ptr %598, align 8, !tbaa !32
  %600 = icmp slt i32 %597, %599
  %601 = add nsw i32 %599, %588
  %602 = select i1 %600, i32 %601, i32 %596
  %603 = sext i32 %602 to i64
  %604 = shl nsw i64 %603, 1
  %605 = add nsw i64 %604, 31
  %606 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %605) #12
  %607 = getelementptr inbounds i8, ptr %606, i64 31
  %608 = ptrtoint ptr %607 to i64
  %609 = and i64 %608, 31
  %610 = sub nsw i64 0, %609
  %611 = getelementptr inbounds i8, ptr %607, i64 %610
  %612 = load ptr, ptr %582, align 8, !tbaa !33
  %613 = sext i32 %584 to i64
  %614 = shl nsw i64 %613, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %611, ptr align 1 %612, i64 %614, i1 false)
  %615 = icmp eq i32 %588, 0
  br i1 %615, label %621, label %616

616:                                              ; preds = %590
  %617 = getelementptr inbounds %class.ResizeArrayRaw, ptr %582, i64 0, i32 1
  %618 = load ptr, ptr %617, align 8, !tbaa !34
  %619 = icmp eq ptr %618, null
  br i1 %619, label %621, label %620

620:                                              ; preds = %616
  tail call void @_ZdaPv(ptr noundef nonnull %618) #13
  br label %621

621:                                              ; preds = %620, %616, %590
  %622 = getelementptr inbounds %class.ResizeArrayRaw, ptr %582, i64 0, i32 1
  store ptr %606, ptr %622, align 8, !tbaa !34
  store ptr %611, ptr %582, align 8, !tbaa !33
  store i32 %602, ptr %587, align 4, !tbaa !30
  %623 = load ptr, ptr %581, align 8, !tbaa !25
  br label %624

624:                                              ; preds = %578, %586, %621
  %625 = phi ptr [ %582, %578 ], [ %582, %586 ], [ %623, %621 ]
  store i32 %212, ptr %583, align 8, !tbaa !27
  %626 = load ptr, ptr %625, align 8, !tbaa !33
  %627 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %114, i64 0, i32 11, i32 1
  %628 = load ptr, ptr %627, align 8, !tbaa !25
  %629 = getelementptr inbounds %class.ResizeArrayRaw, ptr %628, i64 0, i32 2
  %630 = load i32, ptr %629, align 8, !tbaa !27
  %631 = icmp slt i32 %630, %212
  br i1 %631, label %632, label %670

632:                                              ; preds = %624
  %633 = getelementptr inbounds %class.ResizeArrayRaw, ptr %628, i64 0, i32 3
  %634 = load i32, ptr %633, align 4, !tbaa !30
  %635 = icmp slt i32 %634, %212
  br i1 %635, label %636, label %670

636:                                              ; preds = %632
  %637 = sitofp i32 %634 to float
  %638 = getelementptr inbounds %class.ResizeArrayRaw, ptr %628, i64 0, i32 5
  %639 = load float, ptr %638, align 4, !tbaa !31
  %640 = fmul float %639, %637
  %641 = fptosi float %640 to i32
  %642 = tail call i32 @llvm.smax.i32(i32 %641, i32 %212)
  %643 = sub nsw i32 %642, %634
  %644 = getelementptr inbounds %class.ResizeArrayRaw, ptr %628, i64 0, i32 6
  %645 = load i32, ptr %644, align 8, !tbaa !32
  %646 = icmp slt i32 %643, %645
  %647 = add nsw i32 %645, %634
  %648 = select i1 %646, i32 %647, i32 %642
  %649 = sext i32 %648 to i64
  %650 = shl nsw i64 %649, 1
  %651 = add nsw i64 %650, 31
  %652 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %651) #12
  %653 = getelementptr inbounds i8, ptr %652, i64 31
  %654 = ptrtoint ptr %653 to i64
  %655 = and i64 %654, 31
  %656 = sub nsw i64 0, %655
  %657 = getelementptr inbounds i8, ptr %653, i64 %656
  %658 = load ptr, ptr %628, align 8, !tbaa !33
  %659 = sext i32 %630 to i64
  %660 = shl nsw i64 %659, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %657, ptr align 1 %658, i64 %660, i1 false)
  %661 = icmp eq i32 %634, 0
  br i1 %661, label %667, label %662

662:                                              ; preds = %636
  %663 = getelementptr inbounds %class.ResizeArrayRaw, ptr %628, i64 0, i32 1
  %664 = load ptr, ptr %663, align 8, !tbaa !34
  %665 = icmp eq ptr %664, null
  br i1 %665, label %667, label %666

666:                                              ; preds = %662
  tail call void @_ZdaPv(ptr noundef nonnull %664) #13
  br label %667

667:                                              ; preds = %666, %662, %636
  %668 = getelementptr inbounds %class.ResizeArrayRaw, ptr %628, i64 0, i32 1
  store ptr %652, ptr %668, align 8, !tbaa !34
  store ptr %657, ptr %628, align 8, !tbaa !33
  store i32 %648, ptr %633, align 4, !tbaa !30
  %669 = load ptr, ptr %627, align 8, !tbaa !25
  br label %670

670:                                              ; preds = %624, %632, %667
  %671 = phi ptr [ %628, %624 ], [ %628, %632 ], [ %669, %667 ]
  store i32 %212, ptr %629, align 8, !tbaa !27
  %672 = load ptr, ptr %671, align 8, !tbaa !33
  %673 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %114, i64 0, i32 12, i32 1
  %674 = load ptr, ptr %673, align 8, !tbaa !25
  %675 = getelementptr inbounds %class.ResizeArrayRaw, ptr %674, i64 0, i32 2
  %676 = load i32, ptr %675, align 8, !tbaa !27
  %677 = icmp slt i32 %676, %212
  br i1 %677, label %678, label %716

678:                                              ; preds = %670
  %679 = getelementptr inbounds %class.ResizeArrayRaw, ptr %674, i64 0, i32 3
  %680 = load i32, ptr %679, align 4, !tbaa !30
  %681 = icmp slt i32 %680, %212
  br i1 %681, label %682, label %716

682:                                              ; preds = %678
  %683 = sitofp i32 %680 to float
  %684 = getelementptr inbounds %class.ResizeArrayRaw, ptr %674, i64 0, i32 5
  %685 = load float, ptr %684, align 4, !tbaa !31
  %686 = fmul float %685, %683
  %687 = fptosi float %686 to i32
  %688 = tail call i32 @llvm.smax.i32(i32 %687, i32 %212)
  %689 = sub nsw i32 %688, %680
  %690 = getelementptr inbounds %class.ResizeArrayRaw, ptr %674, i64 0, i32 6
  %691 = load i32, ptr %690, align 8, !tbaa !32
  %692 = icmp slt i32 %689, %691
  %693 = add nsw i32 %691, %680
  %694 = select i1 %692, i32 %693, i32 %688
  %695 = sext i32 %694 to i64
  %696 = shl nsw i64 %695, 1
  %697 = add nsw i64 %696, 31
  %698 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %697) #12
  %699 = getelementptr inbounds i8, ptr %698, i64 31
  %700 = ptrtoint ptr %699 to i64
  %701 = and i64 %700, 31
  %702 = sub nsw i64 0, %701
  %703 = getelementptr inbounds i8, ptr %699, i64 %702
  %704 = load ptr, ptr %674, align 8, !tbaa !33
  %705 = sext i32 %676 to i64
  %706 = shl nsw i64 %705, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %703, ptr align 1 %704, i64 %706, i1 false)
  %707 = icmp eq i32 %680, 0
  br i1 %707, label %713, label %708

708:                                              ; preds = %682
  %709 = getelementptr inbounds %class.ResizeArrayRaw, ptr %674, i64 0, i32 1
  %710 = load ptr, ptr %709, align 8, !tbaa !34
  %711 = icmp eq ptr %710, null
  br i1 %711, label %713, label %712

712:                                              ; preds = %708
  tail call void @_ZdaPv(ptr noundef nonnull %710) #13
  br label %713

713:                                              ; preds = %712, %708, %682
  %714 = getelementptr inbounds %class.ResizeArrayRaw, ptr %674, i64 0, i32 1
  store ptr %698, ptr %714, align 8, !tbaa !34
  store ptr %703, ptr %674, align 8, !tbaa !33
  store i32 %694, ptr %679, align 4, !tbaa !30
  %715 = load ptr, ptr %673, align 8, !tbaa !25
  br label %716

716:                                              ; preds = %670, %678, %713
  %717 = phi ptr [ %674, %670 ], [ %674, %678 ], [ %715, %713 ]
  store i32 %212, ptr %675, align 8, !tbaa !27
  %718 = load ptr, ptr %717, align 8, !tbaa !33
  %719 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %114, i64 0, i32 13, i32 1
  %720 = load ptr, ptr %719, align 8, !tbaa !25
  %721 = getelementptr inbounds %class.ResizeArrayRaw, ptr %720, i64 0, i32 2
  %722 = load i32, ptr %721, align 8, !tbaa !27
  %723 = icmp slt i32 %722, %212
  br i1 %723, label %724, label %762

724:                                              ; preds = %716
  %725 = getelementptr inbounds %class.ResizeArrayRaw, ptr %720, i64 0, i32 3
  %726 = load i32, ptr %725, align 4, !tbaa !30
  %727 = icmp slt i32 %726, %212
  br i1 %727, label %728, label %762

728:                                              ; preds = %724
  %729 = sitofp i32 %726 to float
  %730 = getelementptr inbounds %class.ResizeArrayRaw, ptr %720, i64 0, i32 5
  %731 = load float, ptr %730, align 4, !tbaa !31
  %732 = fmul float %731, %729
  %733 = fptosi float %732 to i32
  %734 = tail call i32 @llvm.smax.i32(i32 %733, i32 %212)
  %735 = sub nsw i32 %734, %726
  %736 = getelementptr inbounds %class.ResizeArrayRaw, ptr %720, i64 0, i32 6
  %737 = load i32, ptr %736, align 8, !tbaa !32
  %738 = icmp slt i32 %735, %737
  %739 = add nsw i32 %737, %726
  %740 = select i1 %738, i32 %739, i32 %734
  %741 = sext i32 %740 to i64
  %742 = shl nsw i64 %741, 1
  %743 = add nsw i64 %742, 31
  %744 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %743) #12
  %745 = getelementptr inbounds i8, ptr %744, i64 31
  %746 = ptrtoint ptr %745 to i64
  %747 = and i64 %746, 31
  %748 = sub nsw i64 0, %747
  %749 = getelementptr inbounds i8, ptr %745, i64 %748
  %750 = load ptr, ptr %720, align 8, !tbaa !33
  %751 = sext i32 %722 to i64
  %752 = shl nsw i64 %751, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %749, ptr align 1 %750, i64 %752, i1 false)
  %753 = icmp eq i32 %726, 0
  br i1 %753, label %759, label %754

754:                                              ; preds = %728
  %755 = getelementptr inbounds %class.ResizeArrayRaw, ptr %720, i64 0, i32 1
  %756 = load ptr, ptr %755, align 8, !tbaa !34
  %757 = icmp eq ptr %756, null
  br i1 %757, label %759, label %758

758:                                              ; preds = %754
  tail call void @_ZdaPv(ptr noundef nonnull %756) #13
  br label %759

759:                                              ; preds = %758, %754, %728
  %760 = getelementptr inbounds %class.ResizeArrayRaw, ptr %720, i64 0, i32 1
  store ptr %744, ptr %760, align 8, !tbaa !34
  store ptr %749, ptr %720, align 8, !tbaa !33
  store i32 %740, ptr %725, align 4, !tbaa !30
  %761 = load ptr, ptr %719, align 8, !tbaa !25
  br label %762

762:                                              ; preds = %716, %724, %759
  %763 = phi ptr [ %720, %716 ], [ %720, %724 ], [ %761, %759 ]
  store i32 %212, ptr %721, align 8, !tbaa !27
  %764 = load ptr, ptr %763, align 8, !tbaa !33
  %765 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %114, i64 0, i32 14, i32 1
  %766 = load ptr, ptr %765, align 8, !tbaa !25
  %767 = getelementptr inbounds %class.ResizeArrayRaw, ptr %766, i64 0, i32 2
  %768 = load i32, ptr %767, align 8, !tbaa !27
  %769 = icmp slt i32 %768, %212
  br i1 %769, label %770, label %808

770:                                              ; preds = %762
  %771 = getelementptr inbounds %class.ResizeArrayRaw, ptr %766, i64 0, i32 3
  %772 = load i32, ptr %771, align 4, !tbaa !30
  %773 = icmp slt i32 %772, %212
  br i1 %773, label %774, label %808

774:                                              ; preds = %770
  %775 = sitofp i32 %772 to float
  %776 = getelementptr inbounds %class.ResizeArrayRaw, ptr %766, i64 0, i32 5
  %777 = load float, ptr %776, align 4, !tbaa !31
  %778 = fmul float %777, %775
  %779 = fptosi float %778 to i32
  %780 = tail call i32 @llvm.smax.i32(i32 %779, i32 %212)
  %781 = sub nsw i32 %780, %772
  %782 = getelementptr inbounds %class.ResizeArrayRaw, ptr %766, i64 0, i32 6
  %783 = load i32, ptr %782, align 8, !tbaa !32
  %784 = icmp slt i32 %781, %783
  %785 = add nsw i32 %783, %772
  %786 = select i1 %784, i32 %785, i32 %780
  %787 = sext i32 %786 to i64
  %788 = shl nsw i64 %787, 1
  %789 = add nsw i64 %788, 31
  %790 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %789) #12
  %791 = getelementptr inbounds i8, ptr %790, i64 31
  %792 = ptrtoint ptr %791 to i64
  %793 = and i64 %792, 31
  %794 = sub nsw i64 0, %793
  %795 = getelementptr inbounds i8, ptr %791, i64 %794
  %796 = load ptr, ptr %766, align 8, !tbaa !33
  %797 = sext i32 %768 to i64
  %798 = shl nsw i64 %797, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %795, ptr align 1 %796, i64 %798, i1 false)
  %799 = icmp eq i32 %772, 0
  br i1 %799, label %805, label %800

800:                                              ; preds = %774
  %801 = getelementptr inbounds %class.ResizeArrayRaw, ptr %766, i64 0, i32 1
  %802 = load ptr, ptr %801, align 8, !tbaa !34
  %803 = icmp eq ptr %802, null
  br i1 %803, label %805, label %804

804:                                              ; preds = %800
  tail call void @_ZdaPv(ptr noundef nonnull %802) #13
  br label %805

805:                                              ; preds = %804, %800, %774
  %806 = getelementptr inbounds %class.ResizeArrayRaw, ptr %766, i64 0, i32 1
  store ptr %790, ptr %806, align 8, !tbaa !34
  store ptr %795, ptr %766, align 8, !tbaa !33
  store i32 %786, ptr %771, align 4, !tbaa !30
  %807 = load ptr, ptr %765, align 8, !tbaa !25
  br label %808

808:                                              ; preds = %762, %770, %805
  %809 = phi ptr [ %766, %762 ], [ %766, %770 ], [ %807, %805 ]
  store i32 %212, ptr %767, align 8, !tbaa !27
  %810 = load ptr, ptr %809, align 8, !tbaa !33
  br i1 %211, label %952, label %811

811:                                              ; preds = %808
  %812 = icmp sgt i32 %105, 0
  br i1 %812, label %813, label %943

813:                                              ; preds = %811
  %814 = zext i32 %105 to i64
  %815 = and i64 %814, 1
  %816 = icmp eq i32 %105, 1
  br i1 %816, label %849, label %817

817:                                              ; preds = %813
  %818 = and i64 %814, 4294967294
  br label %819

819:                                              ; preds = %844, %817
  %820 = phi i64 [ 0, %817 ], [ %846, %844 ]
  %821 = phi i32 [ 0, %817 ], [ %845, %844 ]
  %822 = phi i64 [ 0, %817 ], [ %847, %844 ]
  %823 = getelementptr inbounds %struct.CompAtom, ptr %108, i64 %820, i32 4
  %824 = load i8, ptr %823, align 1
  %825 = and i8 %824, 7
  %826 = icmp eq i8 %825, 0
  br i1 %826, label %832, label %827

827:                                              ; preds = %819
  %828 = trunc i64 %820 to i16
  %829 = add nsw i32 %821, 1
  %830 = sext i32 %821 to i64
  %831 = getelementptr inbounds i16, ptr %258, i64 %830
  store i16 %828, ptr %831, align 2, !tbaa !44
  br label %832

832:                                              ; preds = %819, %827
  %833 = phi i32 [ %829, %827 ], [ %821, %819 ]
  %834 = or i64 %820, 1
  %835 = getelementptr inbounds %struct.CompAtom, ptr %108, i64 %834, i32 4
  %836 = load i8, ptr %835, align 1
  %837 = and i8 %836, 7
  %838 = icmp eq i8 %837, 0
  br i1 %838, label %844, label %839

839:                                              ; preds = %832
  %840 = trunc i64 %834 to i16
  %841 = add nsw i32 %833, 1
  %842 = sext i32 %833 to i64
  %843 = getelementptr inbounds i16, ptr %258, i64 %842
  store i16 %840, ptr %843, align 2, !tbaa !44
  br label %844

844:                                              ; preds = %839, %832
  %845 = phi i32 [ %841, %839 ], [ %833, %832 ]
  %846 = add nuw nsw i64 %820, 2
  %847 = add i64 %822, 2
  %848 = icmp eq i64 %847, %818
  br i1 %848, label %849, label %819

849:                                              ; preds = %844, %813
  %850 = phi i32 [ undef, %813 ], [ %845, %844 ]
  %851 = phi i64 [ 0, %813 ], [ %846, %844 ]
  %852 = phi i32 [ 0, %813 ], [ %845, %844 ]
  %853 = icmp eq i64 %815, 0
  br i1 %853, label %864, label %854

854:                                              ; preds = %849
  %855 = getelementptr inbounds %struct.CompAtom, ptr %108, i64 %851, i32 4
  %856 = load i8, ptr %855, align 1
  %857 = and i8 %856, 7
  %858 = icmp eq i8 %857, 0
  br i1 %858, label %864, label %859

859:                                              ; preds = %854
  %860 = trunc i64 %851 to i16
  %861 = add nsw i32 %852, 1
  %862 = sext i32 %852 to i64
  %863 = getelementptr inbounds i16, ptr %258, i64 %862
  store i16 %860, ptr %863, align 2, !tbaa !44
  br label %864

864:                                              ; preds = %854, %859, %849
  %865 = phi i32 [ %850, %849 ], [ %861, %859 ], [ %852, %854 ]
  %866 = icmp eq i32 %865, 0
  br i1 %866, label %874, label %867

867:                                              ; preds = %864
  %868 = add nsw i32 %865, -1
  %869 = sext i32 %868 to i64
  %870 = getelementptr inbounds i16, ptr %258, i64 %869
  %871 = load i16, ptr %870, align 2, !tbaa !44
  %872 = sext i32 %865 to i64
  %873 = getelementptr inbounds i16, ptr %258, i64 %872
  store i16 %871, ptr %873, align 2, !tbaa !44
  br label %874

874:                                              ; preds = %867, %864
  %875 = load i32, ptr @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4, !tbaa !5
  %876 = icmp ne i32 %875, 0
  %877 = icmp sgt i32 %865, 0
  %878 = and i1 %876, %877
  br i1 %878, label %879, label %943

879:                                              ; preds = %874
  %880 = zext i32 %865 to i64
  %881 = and i64 %880, 1
  %882 = icmp eq i32 %865, 1
  br i1 %882, label %917, label %883

883:                                              ; preds = %879
  %884 = and i64 %880, 4294967294
  br label %885

885:                                              ; preds = %912, %883
  %886 = phi i64 [ 0, %883 ], [ %914, %912 ]
  %887 = phi i32 [ 0, %883 ], [ %913, %912 ]
  %888 = phi i64 [ 0, %883 ], [ %915, %912 ]
  %889 = getelementptr inbounds i16, ptr %258, i64 %886
  %890 = load i16, ptr %889, align 2, !tbaa !44
  %891 = zext i16 %890 to i64
  %892 = getelementptr inbounds %struct.CompAtomExt, ptr %112, i64 %891
  %893 = load i32, ptr %892, align 4
  %894 = icmp sgt i32 %893, -1
  br i1 %894, label %895, label %899

895:                                              ; preds = %885
  %896 = add nsw i32 %887, 1
  %897 = sext i32 %887 to i64
  %898 = getelementptr inbounds i16, ptr %304, i64 %897
  store i16 %890, ptr %898, align 2, !tbaa !44
  br label %899

899:                                              ; preds = %885, %895
  %900 = phi i32 [ %887, %885 ], [ %896, %895 ]
  %901 = or i64 %886, 1
  %902 = getelementptr inbounds i16, ptr %258, i64 %901
  %903 = load i16, ptr %902, align 2, !tbaa !44
  %904 = zext i16 %903 to i64
  %905 = getelementptr inbounds %struct.CompAtomExt, ptr %112, i64 %904
  %906 = load i32, ptr %905, align 4
  %907 = icmp sgt i32 %906, -1
  br i1 %907, label %908, label %912

908:                                              ; preds = %899
  %909 = add nsw i32 %900, 1
  %910 = sext i32 %900 to i64
  %911 = getelementptr inbounds i16, ptr %304, i64 %910
  store i16 %903, ptr %911, align 2, !tbaa !44
  br label %912

912:                                              ; preds = %908, %899
  %913 = phi i32 [ %900, %899 ], [ %909, %908 ]
  %914 = add nuw nsw i64 %886, 2
  %915 = add i64 %888, 2
  %916 = icmp eq i64 %915, %884
  br i1 %916, label %917, label %885

917:                                              ; preds = %912, %879
  %918 = phi i32 [ undef, %879 ], [ %913, %912 ]
  %919 = phi i64 [ 0, %879 ], [ %914, %912 ]
  %920 = phi i32 [ 0, %879 ], [ %913, %912 ]
  %921 = icmp eq i64 %881, 0
  br i1 %921, label %933, label %922

922:                                              ; preds = %917
  %923 = getelementptr inbounds i16, ptr %258, i64 %919
  %924 = load i16, ptr %923, align 2, !tbaa !44
  %925 = zext i16 %924 to i64
  %926 = getelementptr inbounds %struct.CompAtomExt, ptr %112, i64 %925
  %927 = load i32, ptr %926, align 4
  %928 = icmp sgt i32 %927, -1
  br i1 %928, label %929, label %933

929:                                              ; preds = %922
  %930 = add nsw i32 %920, 1
  %931 = sext i32 %920 to i64
  %932 = getelementptr inbounds i16, ptr %304, i64 %931
  store i16 %924, ptr %932, align 2, !tbaa !44
  br label %933

933:                                              ; preds = %922, %929, %917
  %934 = phi i32 [ %918, %917 ], [ %920, %922 ], [ %930, %929 ]
  %935 = icmp eq i32 %934, 0
  br i1 %935, label %943, label %936

936:                                              ; preds = %933
  %937 = add nsw i32 %934, -1
  %938 = sext i32 %937 to i64
  %939 = getelementptr inbounds i16, ptr %304, i64 %938
  %940 = load i16, ptr %939, align 2, !tbaa !44
  %941 = sext i32 %934 to i64
  %942 = getelementptr inbounds i16, ptr %304, i64 %941
  store i16 %940, ptr %942, align 2, !tbaa !44
  br label %943

943:                                              ; preds = %811, %874, %936, %933
  %944 = phi i32 [ %865, %936 ], [ %865, %933 ], [ %865, %874 ], [ 0, %811 ]
  %945 = phi i32 [ %934, %936 ], [ 0, %933 ], [ 0, %874 ], [ 0, %811 ]
  %946 = load i32, ptr %17, align 8, !tbaa !17
  %947 = add nsw i32 %946, 1
  store i32 %947, ptr %17, align 8, !tbaa !17
  %948 = trunc i32 %103 to i16
  %949 = load ptr, ptr %12, align 8, !tbaa !46
  %950 = sext i32 %946 to i64
  %951 = getelementptr inbounds i16, ptr %949, i64 %950
  store i16 %948, ptr %951, align 2, !tbaa !44
  br label %962

952:                                              ; preds = %808
  %953 = load ptr, ptr %12, align 8, !tbaa !46
  %954 = load i32, ptr %17, align 8, !tbaa !17
  %955 = add nsw i32 %954, 1
  store i32 %955, ptr %17, align 8, !tbaa !17
  %956 = sext i32 %954 to i64
  %957 = getelementptr inbounds i16, ptr %953, i64 %956
  %958 = load i16, ptr %957, align 2, !tbaa !44
  %959 = zext i16 %958 to i32
  %960 = icmp eq i32 %103, %959
  br i1 %960, label %962, label %961

961:                                              ; preds = %952
  tail call void @_Z8NAMD_bugPKc(ptr noundef nonnull @.str)
  br label %962

962:                                              ; preds = %952, %961, %943
  %963 = phi i32 [ 0, %961 ], [ 0, %952 ], [ %944, %943 ]
  %964 = phi i32 [ 0, %961 ], [ 0, %952 ], [ %945, %943 ]
  %965 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %114, i64 0, i32 17, i32 1
  %966 = load ptr, ptr %965, align 8, !tbaa !222
  tail call void @_ZN14ResizeArrayRawI6VectorE6resizeEi(ptr noundef nonnull align 8 dereferenceable(36) %966, i32 noundef %103)
  %967 = load ptr, ptr %965, align 8, !tbaa !222
  %968 = load ptr, ptr %967, align 8, !tbaa !224
  %969 = sext i32 %103 to i64
  %970 = mul nsw i64 %969, 24
  tail call void @llvm.memset.p0.i64(ptr align 1 %968, i8 0, i64 %970, i1 false)
  %971 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %114, i64 0, i32 18, i32 1
  %972 = load ptr, ptr %971, align 8, !tbaa !222
  tail call void @_ZN14ResizeArrayRawI6VectorE6resizeEi(ptr noundef nonnull align 8 dereferenceable(36) %972, i32 noundef %103)
  %973 = load ptr, ptr %971, align 8, !tbaa !222
  %974 = load ptr, ptr %973, align 8, !tbaa !224
  tail call void @llvm.memset.p0.i64(ptr align 1 %974, i8 0, i64 %970, i1 false)
  %975 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 18
  %976 = load i32, ptr %975, align 4, !tbaa !48
  %977 = add nsw i32 %976, -1
  %978 = add nsw i32 %103, -1
  %979 = icmp sgt i32 %103, 1
  br i1 %979, label %980, label %4374

980:                                              ; preds = %962
  %981 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 16
  %982 = load i32, ptr %981, align 4, !tbaa !47
  %983 = getelementptr inbounds %class.Molecule, ptr %30, i64 0, i32 1
  %984 = getelementptr inbounds %class.Molecule, ptr %30, i64 0, i32 4
  %985 = getelementptr inbounds %class.Molecule, ptr %30, i64 0, i32 2
  %986 = getelementptr inbounds %class.Molecule, ptr %30, i64 0, i32 3
  %987 = ptrtoint ptr %488 to i64
  %988 = add nsw i32 %105, 30
  %989 = getelementptr inbounds %class.Pairlists, ptr %12, i64 0, i32 2
  %990 = ptrtoint ptr %534 to i64
  %991 = ptrtoint ptr %396 to i64
  %992 = ptrtoint ptr %442 to i64
  %993 = ptrtoint ptr %580 to i64
  %994 = ptrtoint ptr %626 to i64
  %995 = ptrtoint ptr %672 to i64
  %996 = ptrtoint ptr %718 to i64
  %997 = ptrtoint ptr %764 to i64
  %998 = ptrtoint ptr %810 to i64
  %999 = getelementptr inbounds %class.LJTable, ptr %29, i64 0, i32 1
  %1000 = getelementptr inbounds %class.LJTable, ptr %29, i64 0, i32 2
  %1001 = fneg double %33
  %1002 = fsub double 1.000000e+00, %35
  %1003 = fmul double %35, 2.000000e+00
  %1004 = fmul double %35, 4.000000e+00
  %1005 = fmul double %35, 6.000000e+00
  %1006 = fneg <2 x double> %75
  %1007 = fneg <2 x double> %86
  %1008 = sext i32 %963 to i64
  %1009 = sext i32 %964 to i64
  %1010 = insertelement <2 x double> poison, double %27, i64 0
  %1011 = shufflevector <2 x double> %1010, <2 x double> poison, <2 x i32> zeroinitializer
  %1012 = extractelement <2 x double> %75, i64 1
  %1013 = extractelement <2 x double> %86, i64 1
  %1014 = extractelement <2 x double> %75, i64 1
  %1015 = extractelement <2 x double> %86, i64 1
  %1016 = extractelement <2 x double> %75, i64 1
  %1017 = extractelement <2 x double> %86, i64 1
  br label %1018

1018:                                             ; preds = %980, %4357
  %1019 = phi i32 [ 0, %980 ], [ %4368, %4357 ]
  %1020 = phi i32 [ 0, %980 ], [ %4372, %4357 ]
  %1021 = phi ptr [ null, %980 ], [ %4366, %4357 ]
  %1022 = phi ptr [ null, %980 ], [ %4365, %4357 ]
  %1023 = phi ptr [ null, %980 ], [ %4364, %4357 ]
  %1024 = phi i32 [ 0, %980 ], [ %4363, %4357 ]
  %1025 = phi i32 [ 0, %980 ], [ %4362, %4357 ]
  %1026 = phi i32 [ 0, %980 ], [ %4361, %4357 ]
  %1027 = phi i32 [ 0, %980 ], [ %4360, %4357 ]
  %1028 = phi i32 [ 0, %980 ], [ %4359, %4357 ]
  %1029 = phi i32 [ %982, %980 ], [ %4358, %4357 ]
  %1030 = phi <2 x double> [ zeroinitializer, %980 ], [ %4369, %4357 ]
  %1031 = phi <2 x double> [ zeroinitializer, %980 ], [ %4370, %4357 ]
  %1032 = phi <2 x double> [ zeroinitializer, %980 ], [ %4371, %4357 ]
  %1033 = sext i32 %1020 to i64
  %1034 = getelementptr inbounds %struct.CompAtom, ptr %106, i64 %1033
  %1035 = getelementptr inbounds %struct.CompAtomExt, ptr %110, i64 %1033
  %1036 = getelementptr inbounds %struct.CompAtom, ptr %106, i64 %1033, i32 4
  %1037 = load i8, ptr %1036, align 1
  %1038 = lshr i8 %1037, 3
  %1039 = and i8 %1038, 15
  %1040 = zext i8 %1039 to i32
  %1041 = icmp eq i8 %1039, 0
  br i1 %1041, label %1048, label %1042

1042:                                             ; preds = %1018
  %1043 = icmp eq i32 %1029, 0
  br i1 %1043, label %1048, label %1044

1044:                                             ; preds = %1042
  %1045 = add nsw i32 %1029, -1
  %1046 = add nsw i32 %1020, -1
  %1047 = add i32 %1046, %1040
  br label %4357

1048:                                             ; preds = %1042, %1018
  %1049 = phi i32 [ %1029, %1018 ], [ %977, %1042 ]
  %1050 = load <2 x double>, ptr %1034, align 8, !tbaa !19
  %1051 = fadd <2 x double> %19, %1050
  %1052 = getelementptr inbounds %class.Vector, ptr %1034, i64 0, i32 2
  %1053 = load double, ptr %1052, align 8, !tbaa !49
  %1054 = fadd double %21, %1053
  %1055 = getelementptr inbounds %struct.CompAtom, ptr %106, i64 %1033, i32 3
  %1056 = load i8, ptr %1055, align 2, !tbaa !51
  %1057 = zext i8 %1056 to i32
  %1058 = add nsw i32 %1020, %1040
  %1059 = select i1 %1041, i32 %1024, i32 %1058
  br i1 %211, label %2970, label %1060

1060:                                             ; preds = %1048
  %1061 = load i32, ptr %1035, align 4
  %1062 = shl i32 %1061, 2
  %1063 = ashr exact i32 %1062, 2
  %1064 = load ptr, ptr %983, align 8, !tbaa !52
  %1065 = sext i32 %1063 to i64
  %1066 = getelementptr inbounds %class.ExclusionCheck, ptr %1064, i64 %1065
  %1067 = load i32, ptr %1066, align 8, !tbaa !54
  %1068 = getelementptr inbounds %class.ExclusionCheck, ptr %1064, i64 %1065, i32 1
  %1069 = load i32, ptr %1068, align 4, !tbaa !56
  %1070 = getelementptr inbounds %class.ExclusionCheck, ptr %1064, i64 %1065, i32 2
  %1071 = load ptr, ptr %1070, align 8, !tbaa !57
  %1072 = icmp eq ptr %1071, null
  br i1 %1072, label %1077, label %1073

1073:                                             ; preds = %1060
  %1074 = sext i32 %1067 to i64
  %1075 = sub nsw i64 0, %1074
  %1076 = getelementptr inbounds i8, ptr %1071, i64 %1075
  br label %1303

1077:                                             ; preds = %1060
  %1078 = icmp eq ptr %1021, null
  br i1 %1078, label %1166, label %1079

1079:                                             ; preds = %1077
  %1080 = load i32, ptr %1022, align 4, !tbaa !5
  %1081 = icmp slt i32 %1080, 1
  br i1 %1081, label %1129, label %1082

1082:                                             ; preds = %1079
  %1083 = add nuw i32 %1080, 1
  %1084 = zext i32 %1083 to i64
  %1085 = add nsw i64 %1084, -1
  %1086 = add nsw i64 %1084, -2
  %1087 = and i64 %1085, 3
  %1088 = icmp ult i64 %1086, 3
  br i1 %1088, label %1116, label %1089

1089:                                             ; preds = %1082
  %1090 = and i64 %1085, -4
  br label %1091

1091:                                             ; preds = %1091, %1089
  %1092 = phi i64 [ 1, %1089 ], [ %1113, %1091 ]
  %1093 = phi i64 [ 0, %1089 ], [ %1114, %1091 ]
  %1094 = getelementptr inbounds i32, ptr %1022, i64 %1092
  %1095 = load i32, ptr %1094, align 4, !tbaa !5
  %1096 = sext i32 %1095 to i64
  %1097 = getelementptr inbounds i8, ptr %1021, i64 %1096
  store i8 0, ptr %1097, align 1, !tbaa !58
  %1098 = add nuw nsw i64 %1092, 1
  %1099 = getelementptr inbounds i32, ptr %1022, i64 %1098
  %1100 = load i32, ptr %1099, align 4, !tbaa !5
  %1101 = sext i32 %1100 to i64
  %1102 = getelementptr inbounds i8, ptr %1021, i64 %1101
  store i8 0, ptr %1102, align 1, !tbaa !58
  %1103 = add nuw nsw i64 %1092, 2
  %1104 = getelementptr inbounds i32, ptr %1022, i64 %1103
  %1105 = load i32, ptr %1104, align 4, !tbaa !5
  %1106 = sext i32 %1105 to i64
  %1107 = getelementptr inbounds i8, ptr %1021, i64 %1106
  store i8 0, ptr %1107, align 1, !tbaa !58
  %1108 = add nuw nsw i64 %1092, 3
  %1109 = getelementptr inbounds i32, ptr %1022, i64 %1108
  %1110 = load i32, ptr %1109, align 4, !tbaa !5
  %1111 = sext i32 %1110 to i64
  %1112 = getelementptr inbounds i8, ptr %1021, i64 %1111
  store i8 0, ptr %1112, align 1, !tbaa !58
  %1113 = add nuw nsw i64 %1092, 4
  %1114 = add i64 %1093, 4
  %1115 = icmp eq i64 %1114, %1090
  br i1 %1115, label %1116, label %1091

1116:                                             ; preds = %1091, %1082
  %1117 = phi i64 [ 1, %1082 ], [ %1113, %1091 ]
  %1118 = icmp eq i64 %1087, 0
  br i1 %1118, label %1129, label %1119

1119:                                             ; preds = %1116, %1119
  %1120 = phi i64 [ %1126, %1119 ], [ %1117, %1116 ]
  %1121 = phi i64 [ %1127, %1119 ], [ 0, %1116 ]
  %1122 = getelementptr inbounds i32, ptr %1022, i64 %1120
  %1123 = load i32, ptr %1122, align 4, !tbaa !5
  %1124 = sext i32 %1123 to i64
  %1125 = getelementptr inbounds i8, ptr %1021, i64 %1124
  store i8 0, ptr %1125, align 1, !tbaa !58
  %1126 = add nuw nsw i64 %1120, 1
  %1127 = add i64 %1121, 1
  %1128 = icmp eq i64 %1127, %1087
  br i1 %1128, label %1129, label %1119, !llvm.loop !265

1129:                                             ; preds = %1116, %1119, %1079
  %1130 = load i32, ptr %1023, align 4, !tbaa !5
  %1131 = icmp slt i32 %1130, 1
  br i1 %1131, label %1186, label %1132

1132:                                             ; preds = %1129
  %1133 = add nuw i32 %1130, 1
  %1134 = zext i32 %1133 to i64
  %1135 = add nsw i64 %1134, -1
  %1136 = add nsw i64 %1134, -2
  %1137 = and i64 %1135, 3
  %1138 = icmp ult i64 %1136, 3
  br i1 %1138, label %1173, label %1139

1139:                                             ; preds = %1132
  %1140 = and i64 %1135, -4
  br label %1141

1141:                                             ; preds = %1141, %1139
  %1142 = phi i64 [ 1, %1139 ], [ %1163, %1141 ]
  %1143 = phi i64 [ 0, %1139 ], [ %1164, %1141 ]
  %1144 = getelementptr inbounds i32, ptr %1023, i64 %1142
  %1145 = load i32, ptr %1144, align 4, !tbaa !5
  %1146 = sext i32 %1145 to i64
  %1147 = getelementptr inbounds i8, ptr %1021, i64 %1146
  store i8 0, ptr %1147, align 1, !tbaa !58
  %1148 = add nuw nsw i64 %1142, 1
  %1149 = getelementptr inbounds i32, ptr %1023, i64 %1148
  %1150 = load i32, ptr %1149, align 4, !tbaa !5
  %1151 = sext i32 %1150 to i64
  %1152 = getelementptr inbounds i8, ptr %1021, i64 %1151
  store i8 0, ptr %1152, align 1, !tbaa !58
  %1153 = add nuw nsw i64 %1142, 2
  %1154 = getelementptr inbounds i32, ptr %1023, i64 %1153
  %1155 = load i32, ptr %1154, align 4, !tbaa !5
  %1156 = sext i32 %1155 to i64
  %1157 = getelementptr inbounds i8, ptr %1021, i64 %1156
  store i8 0, ptr %1157, align 1, !tbaa !58
  %1158 = add nuw nsw i64 %1142, 3
  %1159 = getelementptr inbounds i32, ptr %1023, i64 %1158
  %1160 = load i32, ptr %1159, align 4, !tbaa !5
  %1161 = sext i32 %1160 to i64
  %1162 = getelementptr inbounds i8, ptr %1021, i64 %1161
  store i8 0, ptr %1162, align 1, !tbaa !58
  %1163 = add nuw nsw i64 %1142, 4
  %1164 = add i64 %1143, 4
  %1165 = icmp eq i64 %1164, %1140
  br i1 %1165, label %1173, label %1141

1166:                                             ; preds = %1077
  %1167 = load i32, ptr %984, align 8, !tbaa !61
  %1168 = call i32 @llvm.smax.i32(i32 %1167, i32 -1)
  %1169 = sext i32 %1168 to i64
  %1170 = call noalias noundef nonnull ptr @_Znam(i64 noundef %1169) #12
  %1171 = load i32, ptr %984, align 8, !tbaa !61
  %1172 = sext i32 %1171 to i64
  call void @llvm.memset.p0.i64(ptr nonnull align 1 %1170, i8 0, i64 %1172, i1 false)
  br label %1186

1173:                                             ; preds = %1141, %1132
  %1174 = phi i64 [ 1, %1132 ], [ %1163, %1141 ]
  %1175 = icmp eq i64 %1137, 0
  br i1 %1175, label %1186, label %1176

1176:                                             ; preds = %1173, %1176
  %1177 = phi i64 [ %1183, %1176 ], [ %1174, %1173 ]
  %1178 = phi i64 [ %1184, %1176 ], [ 0, %1173 ]
  %1179 = getelementptr inbounds i32, ptr %1023, i64 %1177
  %1180 = load i32, ptr %1179, align 4, !tbaa !5
  %1181 = sext i32 %1180 to i64
  %1182 = getelementptr inbounds i8, ptr %1021, i64 %1181
  store i8 0, ptr %1182, align 1, !tbaa !58
  %1183 = add nuw nsw i64 %1177, 1
  %1184 = add i64 %1178, 1
  %1185 = icmp eq i64 %1184, %1137
  br i1 %1185, label %1186, label %1176, !llvm.loop !266

1186:                                             ; preds = %1173, %1176, %1129, %1166
  %1187 = phi ptr [ %1170, %1166 ], [ %1021, %1129 ], [ %1021, %1176 ], [ %1021, %1173 ]
  %1188 = load i32, ptr %1035, align 4
  %1189 = shl i32 %1188, 2
  %1190 = ashr exact i32 %1189, 2
  %1191 = load ptr, ptr %985, align 8, !tbaa !63
  %1192 = sext i32 %1190 to i64
  %1193 = getelementptr inbounds ptr, ptr %1191, i64 %1192
  %1194 = load ptr, ptr %1193, align 8, !tbaa !23
  %1195 = load i32, ptr %1194, align 4, !tbaa !5
  %1196 = icmp slt i32 %1195, 1
  br i1 %1196, label %1249, label %1197

1197:                                             ; preds = %1186
  %1198 = add nuw i32 %1195, 1
  %1199 = zext i32 %1198 to i64
  %1200 = add nsw i64 %1199, -1
  %1201 = add nsw i64 %1199, -2
  %1202 = and i64 %1200, 3
  %1203 = icmp ult i64 %1201, 3
  br i1 %1203, label %1231, label %1204

1204:                                             ; preds = %1197
  %1205 = and i64 %1200, -4
  br label %1206

1206:                                             ; preds = %1206, %1204
  %1207 = phi i64 [ 1, %1204 ], [ %1228, %1206 ]
  %1208 = phi i64 [ 0, %1204 ], [ %1229, %1206 ]
  %1209 = getelementptr inbounds i32, ptr %1194, i64 %1207
  %1210 = load i32, ptr %1209, align 4, !tbaa !5
  %1211 = sext i32 %1210 to i64
  %1212 = getelementptr inbounds i8, ptr %1187, i64 %1211
  store i8 1, ptr %1212, align 1, !tbaa !58
  %1213 = add nuw nsw i64 %1207, 1
  %1214 = getelementptr inbounds i32, ptr %1194, i64 %1213
  %1215 = load i32, ptr %1214, align 4, !tbaa !5
  %1216 = sext i32 %1215 to i64
  %1217 = getelementptr inbounds i8, ptr %1187, i64 %1216
  store i8 1, ptr %1217, align 1, !tbaa !58
  %1218 = add nuw nsw i64 %1207, 2
  %1219 = getelementptr inbounds i32, ptr %1194, i64 %1218
  %1220 = load i32, ptr %1219, align 4, !tbaa !5
  %1221 = sext i32 %1220 to i64
  %1222 = getelementptr inbounds i8, ptr %1187, i64 %1221
  store i8 1, ptr %1222, align 1, !tbaa !58
  %1223 = add nuw nsw i64 %1207, 3
  %1224 = getelementptr inbounds i32, ptr %1194, i64 %1223
  %1225 = load i32, ptr %1224, align 4, !tbaa !5
  %1226 = sext i32 %1225 to i64
  %1227 = getelementptr inbounds i8, ptr %1187, i64 %1226
  store i8 1, ptr %1227, align 1, !tbaa !58
  %1228 = add nuw nsw i64 %1207, 4
  %1229 = add i64 %1208, 4
  %1230 = icmp eq i64 %1229, %1205
  br i1 %1230, label %1231, label %1206

1231:                                             ; preds = %1206, %1197
  %1232 = phi i64 [ 1, %1197 ], [ %1228, %1206 ]
  %1233 = icmp eq i64 %1202, 0
  br i1 %1233, label %1244, label %1234

1234:                                             ; preds = %1231, %1234
  %1235 = phi i64 [ %1241, %1234 ], [ %1232, %1231 ]
  %1236 = phi i64 [ %1242, %1234 ], [ 0, %1231 ]
  %1237 = getelementptr inbounds i32, ptr %1194, i64 %1235
  %1238 = load i32, ptr %1237, align 4, !tbaa !5
  %1239 = sext i32 %1238 to i64
  %1240 = getelementptr inbounds i8, ptr %1187, i64 %1239
  store i8 1, ptr %1240, align 1, !tbaa !58
  %1241 = add nuw nsw i64 %1235, 1
  %1242 = add i64 %1236, 1
  %1243 = icmp eq i64 %1242, %1202
  br i1 %1243, label %1244, label %1234, !llvm.loop !267

1244:                                             ; preds = %1234, %1231
  %1245 = load i32, ptr %1035, align 4
  %1246 = shl i32 %1245, 2
  %1247 = ashr exact i32 %1246, 2
  %1248 = sext i32 %1247 to i64
  br label %1249

1249:                                             ; preds = %1244, %1186
  %1250 = phi i64 [ %1248, %1244 ], [ %1192, %1186 ]
  %1251 = load ptr, ptr %986, align 8, !tbaa !65
  %1252 = getelementptr inbounds ptr, ptr %1251, i64 %1250
  %1253 = load ptr, ptr %1252, align 8, !tbaa !23
  %1254 = load i32, ptr %1253, align 4, !tbaa !5
  %1255 = icmp slt i32 %1254, 1
  br i1 %1255, label %1303, label %1256

1256:                                             ; preds = %1249
  %1257 = add nuw i32 %1254, 1
  %1258 = zext i32 %1257 to i64
  %1259 = add nsw i64 %1258, -1
  %1260 = add nsw i64 %1258, -2
  %1261 = and i64 %1259, 3
  %1262 = icmp ult i64 %1260, 3
  br i1 %1262, label %1290, label %1263

1263:                                             ; preds = %1256
  %1264 = and i64 %1259, -4
  br label %1265

1265:                                             ; preds = %1265, %1263
  %1266 = phi i64 [ 1, %1263 ], [ %1287, %1265 ]
  %1267 = phi i64 [ 0, %1263 ], [ %1288, %1265 ]
  %1268 = getelementptr inbounds i32, ptr %1253, i64 %1266
  %1269 = load i32, ptr %1268, align 4, !tbaa !5
  %1270 = sext i32 %1269 to i64
  %1271 = getelementptr inbounds i8, ptr %1187, i64 %1270
  store i8 2, ptr %1271, align 1, !tbaa !58
  %1272 = add nuw nsw i64 %1266, 1
  %1273 = getelementptr inbounds i32, ptr %1253, i64 %1272
  %1274 = load i32, ptr %1273, align 4, !tbaa !5
  %1275 = sext i32 %1274 to i64
  %1276 = getelementptr inbounds i8, ptr %1187, i64 %1275
  store i8 2, ptr %1276, align 1, !tbaa !58
  %1277 = add nuw nsw i64 %1266, 2
  %1278 = getelementptr inbounds i32, ptr %1253, i64 %1277
  %1279 = load i32, ptr %1278, align 4, !tbaa !5
  %1280 = sext i32 %1279 to i64
  %1281 = getelementptr inbounds i8, ptr %1187, i64 %1280
  store i8 2, ptr %1281, align 1, !tbaa !58
  %1282 = add nuw nsw i64 %1266, 3
  %1283 = getelementptr inbounds i32, ptr %1253, i64 %1282
  %1284 = load i32, ptr %1283, align 4, !tbaa !5
  %1285 = sext i32 %1284 to i64
  %1286 = getelementptr inbounds i8, ptr %1187, i64 %1285
  store i8 2, ptr %1286, align 1, !tbaa !58
  %1287 = add nuw nsw i64 %1266, 4
  %1288 = add i64 %1267, 4
  %1289 = icmp eq i64 %1288, %1264
  br i1 %1289, label %1290, label %1265

1290:                                             ; preds = %1265, %1256
  %1291 = phi i64 [ 1, %1256 ], [ %1287, %1265 ]
  %1292 = icmp eq i64 %1261, 0
  br i1 %1292, label %1303, label %1293

1293:                                             ; preds = %1290, %1293
  %1294 = phi i64 [ %1300, %1293 ], [ %1291, %1290 ]
  %1295 = phi i64 [ %1301, %1293 ], [ 0, %1290 ]
  %1296 = getelementptr inbounds i32, ptr %1253, i64 %1294
  %1297 = load i32, ptr %1296, align 4, !tbaa !5
  %1298 = sext i32 %1297 to i64
  %1299 = getelementptr inbounds i8, ptr %1187, i64 %1298
  store i8 2, ptr %1299, align 1, !tbaa !58
  %1300 = add nuw nsw i64 %1294, 1
  %1301 = add i64 %1295, 1
  %1302 = icmp eq i64 %1301, %1261
  br i1 %1302, label %1303, label %1293, !llvm.loop !268

1303:                                             ; preds = %1290, %1293, %1249, %1073
  %1304 = phi ptr [ %1076, %1073 ], [ %1187, %1249 ], [ %1187, %1293 ], [ %1187, %1290 ]
  %1305 = phi ptr [ %1023, %1073 ], [ %1253, %1249 ], [ %1253, %1293 ], [ %1253, %1290 ]
  %1306 = phi ptr [ %1022, %1073 ], [ %1194, %1249 ], [ %1194, %1293 ], [ %1194, %1290 ]
  %1307 = phi ptr [ %1021, %1073 ], [ %1187, %1249 ], [ %1187, %1293 ], [ %1187, %1290 ]
  %1308 = load i8, ptr %1036, align 1
  %1309 = and i8 %1308, 7
  %1310 = icmp eq i8 %1309, 0
  br i1 %1310, label %1604, label %1311

1311:                                             ; preds = %1303
  %1312 = load i32, ptr @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4, !tbaa !5
  %1313 = icmp eq i32 %1312, 0
  br i1 %1313, label %1317, label %1314

1314:                                             ; preds = %1311
  %1315 = load i32, ptr %1035, align 4
  %1316 = icmp slt i32 %1315, 0
  br label %1317

1317:                                             ; preds = %1314, %1311
  %1318 = phi i1 [ false, %1311 ], [ %1316, %1314 ]
  %1319 = and i8 %1308, 120
  %1320 = icmp eq i8 %1319, 0
  br i1 %1320, label %1352, label %1321

1321:                                             ; preds = %1317
  %1322 = icmp slt i32 %1025, %963
  br i1 %1322, label %1323, label %1336

1323:                                             ; preds = %1321
  %1324 = sext i32 %1025 to i64
  br label %1325

1325:                                             ; preds = %1323, %1331
  %1326 = phi i64 [ %1324, %1323 ], [ %1332, %1331 ]
  %1327 = getelementptr inbounds i16, ptr %258, i64 %1326
  %1328 = load i16, ptr %1327, align 2, !tbaa !44
  %1329 = zext i16 %1328 to i32
  %1330 = icmp sgt i32 %1059, %1329
  br i1 %1330, label %1331, label %1334

1331:                                             ; preds = %1325
  %1332 = add nsw i64 %1326, 1
  %1333 = icmp eq i64 %1332, %1008
  br i1 %1333, label %1336, label %1325

1334:                                             ; preds = %1325
  %1335 = trunc i64 %1326 to i32
  br label %1336

1336:                                             ; preds = %1331, %1334, %1321
  %1337 = phi i32 [ %1025, %1321 ], [ %1335, %1334 ], [ %963, %1331 ]
  %1338 = icmp slt i32 %1026, %964
  br i1 %1338, label %1339, label %1352

1339:                                             ; preds = %1336
  %1340 = sext i32 %1026 to i64
  br label %1341

1341:                                             ; preds = %1339, %1347
  %1342 = phi i64 [ %1340, %1339 ], [ %1348, %1347 ]
  %1343 = getelementptr inbounds i16, ptr %304, i64 %1342
  %1344 = load i16, ptr %1343, align 2, !tbaa !44
  %1345 = zext i16 %1344 to i32
  %1346 = icmp sgt i32 %1059, %1345
  br i1 %1346, label %1347, label %1350

1347:                                             ; preds = %1341
  %1348 = add nsw i64 %1342, 1
  %1349 = icmp eq i64 %1348, %1009
  br i1 %1349, label %1352, label %1341

1350:                                             ; preds = %1341
  %1351 = trunc i64 %1342 to i32
  br label %1352

1352:                                             ; preds = %1347, %1350, %1336, %1317
  %1353 = phi i32 [ %1026, %1317 ], [ %1026, %1336 ], [ %1351, %1350 ], [ %964, %1347 ]
  %1354 = phi i32 [ %1025, %1317 ], [ %1337, %1336 ], [ %1337, %1350 ], [ %1337, %1347 ]
  %1355 = add nsw i32 %1020, 1
  %1356 = icmp slt i32 %1355, %1059
  br i1 %1356, label %1357, label %1422

1357:                                             ; preds = %1352
  %1358 = xor i32 %1020, -1
  %1359 = add i32 %1059, %1358
  %1360 = zext i32 %1359 to i64
  %1361 = icmp ult i32 %1359, 8
  br i1 %1361, label %1411, label %1362

1362:                                             ; preds = %1357
  %1363 = icmp ult i32 %1359, 64
  br i1 %1363, label %1392, label %1364

1364:                                             ; preds = %1362
  %1365 = and i64 %1360, 4294967232
  %1366 = trunc i32 %1355 to i16
  %1367 = insertelement <16 x i16> poison, i16 %1366, i64 0
  %1368 = shufflevector <16 x i16> %1367, <16 x i16> poison, <16 x i32> zeroinitializer
  %1369 = add <16 x i16> %1368, <i16 0, i16 1, i16 2, i16 3, i16 4, i16 5, i16 6, i16 7, i16 8, i16 9, i16 10, i16 11, i16 12, i16 13, i16 14, i16 15>
  %1370 = trunc i64 %1365 to i32
  %1371 = add i32 %1355, %1370
  br label %1372

1372:                                             ; preds = %1372, %1364
  %1373 = phi i64 [ 0, %1364 ], [ %1382, %1372 ]
  %1374 = phi <16 x i16> [ %1369, %1364 ], [ %1383, %1372 ]
  %1375 = add <16 x i16> %1374, <i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16>
  %1376 = add <16 x i16> %1374, <i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32>
  %1377 = add <16 x i16> %1374, <i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48>
  %1378 = getelementptr inbounds i16, ptr %488, i64 %1373
  store <16 x i16> %1374, ptr %1378, align 2, !tbaa !44
  %1379 = getelementptr inbounds i16, ptr %1378, i64 16
  store <16 x i16> %1375, ptr %1379, align 2, !tbaa !44
  %1380 = getelementptr inbounds i16, ptr %1378, i64 32
  store <16 x i16> %1376, ptr %1380, align 2, !tbaa !44
  %1381 = getelementptr inbounds i16, ptr %1378, i64 48
  store <16 x i16> %1377, ptr %1381, align 2, !tbaa !44
  %1382 = add nuw i64 %1373, 64
  %1383 = add <16 x i16> %1374, <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>
  %1384 = icmp eq i64 %1382, %1365
  br i1 %1384, label %1385, label %1372, !llvm.loop !269

1385:                                             ; preds = %1372
  %1386 = icmp eq i64 %1365, %1360
  br i1 %1386, label %1422, label %1387

1387:                                             ; preds = %1385
  %1388 = trunc i64 %1365 to i32
  %1389 = add i32 %1355, %1388
  %1390 = and i64 %1360, 56
  %1391 = icmp eq i64 %1390, 0
  br i1 %1391, label %1411, label %1392

1392:                                             ; preds = %1362, %1387
  %1393 = phi i32 [ %1371, %1387 ], [ %1355, %1362 ]
  %1394 = phi i64 [ %1365, %1387 ], [ 0, %1362 ]
  %1395 = and i64 %1360, 4294967288
  %1396 = trunc i64 %1395 to i32
  %1397 = add i32 %1355, %1396
  %1398 = trunc i32 %1393 to i16
  %1399 = insertelement <8 x i16> poison, i16 %1398, i64 0
  %1400 = shufflevector <8 x i16> %1399, <8 x i16> poison, <8 x i32> zeroinitializer
  %1401 = add <8 x i16> %1400, <i16 0, i16 1, i16 2, i16 3, i16 4, i16 5, i16 6, i16 7>
  br label %1402

1402:                                             ; preds = %1402, %1392
  %1403 = phi i64 [ %1394, %1392 ], [ %1406, %1402 ]
  %1404 = phi <8 x i16> [ %1401, %1392 ], [ %1407, %1402 ]
  %1405 = getelementptr inbounds i16, ptr %488, i64 %1403
  store <8 x i16> %1404, ptr %1405, align 2, !tbaa !44
  %1406 = add nuw i64 %1403, 8
  %1407 = add <8 x i16> %1404, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %1408 = icmp eq i64 %1406, %1395
  br i1 %1408, label %1409, label %1402, !llvm.loop !270

1409:                                             ; preds = %1402
  %1410 = icmp eq i64 %1395, %1360
  br i1 %1410, label %1422, label %1411

1411:                                             ; preds = %1357, %1387, %1409
  %1412 = phi i64 [ 0, %1357 ], [ %1365, %1387 ], [ %1395, %1409 ]
  %1413 = phi i32 [ %1355, %1357 ], [ %1389, %1387 ], [ %1397, %1409 ]
  br label %1414

1414:                                             ; preds = %1411, %1414
  %1415 = phi i64 [ %1418, %1414 ], [ %1412, %1411 ]
  %1416 = phi i32 [ %1420, %1414 ], [ %1413, %1411 ]
  %1417 = trunc i32 %1416 to i16
  %1418 = add nuw nsw i64 %1415, 1
  %1419 = getelementptr inbounds i16, ptr %488, i64 %1415
  store i16 %1417, ptr %1419, align 2, !tbaa !44
  %1420 = add nsw i32 %1416, 1
  %1421 = icmp eq i64 %1418, %1360
  br i1 %1421, label %1422, label %1414, !llvm.loop !271

1422:                                             ; preds = %1414, %1385, %1409, %1352
  %1423 = phi i32 [ 0, %1352 ], [ %1359, %1409 ], [ %1359, %1385 ], [ %1359, %1414 ]
  %1424 = zext i32 %1423 to i64
  %1425 = getelementptr inbounds i16, ptr %488, i64 %1424
  %1426 = select i1 %1318, ptr %304, ptr %258
  %1427 = select i1 %1318, i32 %1353, i32 %1354
  %1428 = select i1 %1318, i32 %964, i32 %963
  %1429 = icmp slt i32 %1427, %1428
  br i1 %1429, label %1430, label %1589

1430:                                             ; preds = %1422
  %1431 = sub nsw i32 %1428, %1427
  %1432 = icmp sgt i32 %1431, 6
  br i1 %1432, label %1433, label %1526

1433:                                             ; preds = %1430
  %1434 = add nsw i32 %1428, -2
  %1435 = add nsw i32 %1427, 2
  %1436 = icmp slt i32 %1435, %1434
  br i1 %1436, label %1437, label %1526

1437:                                             ; preds = %1433
  %1438 = add nsw i32 %1427, 1
  %1439 = sext i32 %1438 to i64
  %1440 = getelementptr inbounds i16, ptr %1426, i64 %1439
  %1441 = load i16, ptr %1440, align 2, !tbaa !44
  %1442 = zext i16 %1441 to i64
  %1443 = getelementptr inbounds %struct.CompAtom, ptr %108, i64 %1442
  %1444 = getelementptr inbounds %class.Vector, ptr %1443, i64 0, i32 2
  %1445 = load double, ptr %1444, align 8, !tbaa !49
  %1446 = sext i32 %1427 to i64
  %1447 = getelementptr inbounds i16, ptr %1426, i64 %1446
  %1448 = load i16, ptr %1447, align 2, !tbaa !44
  %1449 = zext i16 %1448 to i64
  %1450 = getelementptr inbounds %struct.CompAtom, ptr %108, i64 %1449
  %1451 = getelementptr inbounds %class.Vector, ptr %1450, i64 0, i32 2
  %1452 = load double, ptr %1451, align 8, !tbaa !49
  %1453 = getelementptr inbounds %class.Vector, ptr %1443, i64 0, i32 1
  %1454 = load double, ptr %1453, align 8, !tbaa !67
  %1455 = getelementptr inbounds %class.Vector, ptr %1450, i64 0, i32 1
  %1456 = load double, ptr %1455, align 8, !tbaa !67
  %1457 = load double, ptr %1443, align 8, !tbaa !68
  %1458 = load double, ptr %1450, align 8, !tbaa !68
  %1459 = sext i32 %1435 to i64
  %1460 = sext i32 %1434 to i64
  %1461 = insertelement <2 x double> poison, double %1445, i64 0
  %1462 = insertelement <2 x double> %1461, double %1452, i64 1
  %1463 = insertelement <2 x double> poison, double %1454, i64 0
  %1464 = insertelement <2 x double> %1463, double %1456, i64 1
  %1465 = insertelement <2 x double> poison, double %1457, i64 0
  %1466 = insertelement <2 x double> %1465, double %1458, i64 1
  %1467 = insertelement <2 x double> poison, double %1054, i64 0
  %1468 = shufflevector <2 x double> %1467, <2 x double> poison, <2 x i32> zeroinitializer
  %1469 = shufflevector <2 x double> %1051, <2 x double> poison, <2 x i32> <i32 1, i32 1>
  %1470 = shufflevector <2 x double> %1051, <2 x double> poison, <2 x i32> zeroinitializer
  br label %1471

1471:                                             ; preds = %1437, %1471
  %1472 = phi i64 [ %1459, %1437 ], [ %1517, %1471 ]
  %1473 = phi i32 [ %1427, %1437 ], [ %1519, %1471 ]
  %1474 = phi i32 [ 0, %1437 ], [ %1516, %1471 ]
  %1475 = phi i16 [ %1448, %1437 ], [ %1482, %1471 ]
  %1476 = phi i16 [ %1441, %1437 ], [ %1486, %1471 ]
  %1477 = phi <2 x double> [ %1462, %1437 ], [ %1521, %1471 ]
  %1478 = phi <2 x double> [ %1464, %1437 ], [ %1523, %1471 ]
  %1479 = phi <2 x double> [ %1466, %1437 ], [ %1525, %1471 ]
  %1480 = fsub <2 x double> %1468, %1477
  %1481 = getelementptr inbounds i16, ptr %1426, i64 %1472
  %1482 = load i16, ptr %1481, align 2, !tbaa !44
  %1483 = add nsw i32 %1473, 3
  %1484 = sext i32 %1483 to i64
  %1485 = getelementptr inbounds i16, ptr %1426, i64 %1484
  %1486 = load i16, ptr %1485, align 2, !tbaa !44
  %1487 = zext i16 %1482 to i64
  %1488 = getelementptr inbounds %struct.CompAtom, ptr %108, i64 %1487
  %1489 = load double, ptr %1488, align 8, !tbaa !68
  %1490 = zext i16 %1486 to i64
  %1491 = getelementptr inbounds %struct.CompAtom, ptr %108, i64 %1490
  %1492 = load double, ptr %1491, align 8, !tbaa !68
  %1493 = getelementptr inbounds %class.Vector, ptr %1488, i64 0, i32 1
  %1494 = load double, ptr %1493, align 8, !tbaa !67
  %1495 = getelementptr inbounds %class.Vector, ptr %1491, i64 0, i32 1
  %1496 = load double, ptr %1495, align 8, !tbaa !67
  %1497 = getelementptr inbounds %class.Vector, ptr %1488, i64 0, i32 2
  %1498 = load double, ptr %1497, align 8, !tbaa !49
  %1499 = getelementptr inbounds %class.Vector, ptr %1491, i64 0, i32 2
  %1500 = load double, ptr %1499, align 8, !tbaa !49
  %1501 = fsub <2 x double> %1470, %1479
  %1502 = fmul <2 x double> %1501, %1501
  %1503 = fsub <2 x double> %1469, %1478
  %1504 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %1503, <2 x double> %1503, <2 x double> %1502)
  %1505 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %1480, <2 x double> %1480, <2 x double> %1504)
  %1506 = fcmp olt <2 x double> %1505, %1011
  %1507 = zext i32 %1474 to i64
  %1508 = getelementptr inbounds i16, ptr %350, i64 %1507
  store i16 %1475, ptr %1508, align 2, !tbaa !44
  %1509 = extractelement <2 x i1> %1506, i64 1
  %1510 = zext i1 %1509 to i32
  %1511 = add nuw nsw i32 %1474, %1510
  %1512 = zext i32 %1511 to i64
  %1513 = getelementptr inbounds i16, ptr %350, i64 %1512
  store i16 %1476, ptr %1513, align 2, !tbaa !44
  %1514 = extractelement <2 x i1> %1506, i64 0
  %1515 = zext i1 %1514 to i32
  %1516 = add i32 %1511, %1515
  %1517 = add nsw i64 %1472, 2
  %1518 = icmp slt i64 %1517, %1460
  %1519 = trunc i64 %1472 to i32
  %1520 = insertelement <2 x double> poison, double %1500, i64 0
  %1521 = insertelement <2 x double> %1520, double %1498, i64 1
  %1522 = insertelement <2 x double> poison, double %1496, i64 0
  %1523 = insertelement <2 x double> %1522, double %1494, i64 1
  %1524 = insertelement <2 x double> poison, double %1492, i64 0
  %1525 = insertelement <2 x double> %1524, double %1489, i64 1
  br i1 %1518, label %1471, label %1526

1526:                                             ; preds = %1471, %1433, %1430
  %1527 = phi i32 [ 0, %1430 ], [ 0, %1433 ], [ %1516, %1471 ]
  %1528 = phi i32 [ %1427, %1430 ], [ %1427, %1433 ], [ %1519, %1471 ]
  %1529 = icmp slt i32 %1528, %1428
  br i1 %1529, label %1530, label %1535

1530:                                             ; preds = %1526
  %1531 = sext i32 %1528 to i64
  %1532 = sext i32 %1428 to i64
  %1533 = extractelement <2 x double> %1051, i64 0
  %1534 = extractelement <2 x double> %1051, i64 1
  br label %1540

1535:                                             ; preds = %1563, %1526
  %1536 = phi i32 [ %1527, %1526 ], [ %1564, %1563 ]
  %1537 = icmp sgt i32 %1536, 0
  br i1 %1537, label %1538, label %1589

1538:                                             ; preds = %1535
  %1539 = zext i32 %1536 to i64
  br label %1567

1540:                                             ; preds = %1530, %1563
  %1541 = phi i64 [ %1531, %1530 ], [ %1565, %1563 ]
  %1542 = phi i32 [ %1527, %1530 ], [ %1564, %1563 ]
  %1543 = getelementptr inbounds i16, ptr %1426, i64 %1541
  %1544 = load i16, ptr %1543, align 2, !tbaa !44
  %1545 = zext i16 %1544 to i64
  %1546 = getelementptr inbounds %struct.CompAtom, ptr %108, i64 %1545
  %1547 = load double, ptr %1546, align 8, !tbaa !68
  %1548 = getelementptr inbounds %class.Vector, ptr %1546, i64 0, i32 1
  %1549 = load double, ptr %1548, align 8, !tbaa !67
  %1550 = getelementptr inbounds %class.Vector, ptr %1546, i64 0, i32 2
  %1551 = load double, ptr %1550, align 8, !tbaa !49
  %1552 = fsub double %1533, %1547
  %1553 = fmul double %1552, %1552
  %1554 = fsub double %1534, %1549
  %1555 = call double @llvm.fmuladd.f64(double %1554, double %1554, double %1553)
  %1556 = fsub double %1054, %1551
  %1557 = call double @llvm.fmuladd.f64(double %1556, double %1556, double %1555)
  %1558 = fcmp ugt double %1557, %27
  br i1 %1558, label %1563, label %1559

1559:                                             ; preds = %1540
  %1560 = add nsw i32 %1542, 1
  %1561 = sext i32 %1542 to i64
  %1562 = getelementptr inbounds i16, ptr %350, i64 %1561
  store i16 %1544, ptr %1562, align 2, !tbaa !44
  br label %1563

1563:                                             ; preds = %1559, %1540
  %1564 = phi i32 [ %1560, %1559 ], [ %1542, %1540 ]
  %1565 = add nsw i64 %1541, 1
  %1566 = icmp eq i64 %1565, %1532
  br i1 %1566, label %1535, label %1540

1567:                                             ; preds = %1538, %1584
  %1568 = phi i64 [ 0, %1538 ], [ %1587, %1584 ]
  %1569 = phi ptr [ %1425, %1538 ], [ %1586, %1584 ]
  %1570 = getelementptr inbounds i16, ptr %350, i64 %1568
  %1571 = load i16, ptr %1570, align 2, !tbaa !44
  %1572 = zext i16 %1571 to i64
  %1573 = getelementptr inbounds %struct.CompAtom, ptr %108, i64 %1572, i32 4
  %1574 = load i8, ptr %1573, align 1
  %1575 = and i8 %1574, 7
  store i16 %1571, ptr %1569, align 2, !tbaa !44
  %1576 = getelementptr inbounds i16, ptr %1569, i64 1
  %1577 = insertelement <2 x i16> poison, i16 %1571, i64 0
  %1578 = shufflevector <2 x i16> %1577, <2 x i16> poison, <2 x i32> zeroinitializer
  %1579 = add <2 x i16> %1578, <i16 1, i16 2>
  store <2 x i16> %1579, ptr %1576, align 2, !tbaa !44
  %1580 = icmp ult i8 %1575, 4
  br i1 %1580, label %1584, label %1581

1581:                                             ; preds = %1567
  %1582 = add <2 x i16> %1578, <i16 3, i16 4>
  %1583 = getelementptr inbounds i16, ptr %1569, i64 3
  store <2 x i16> %1582, ptr %1583, align 2, !tbaa !44
  br label %1584

1584:                                             ; preds = %1581, %1567
  %1585 = zext i8 %1575 to i64
  %1586 = getelementptr inbounds i16, ptr %1569, i64 %1585
  %1587 = add nuw nsw i64 %1568, 1
  %1588 = icmp eq i64 %1587, %1539
  br i1 %1588, label %1589, label %1567

1589:                                             ; preds = %1584, %1535, %1422
  %1590 = phi ptr [ %1425, %1422 ], [ %1425, %1535 ], [ %1586, %1584 ]
  %1591 = ptrtoint ptr %1590 to i64
  %1592 = sub i64 %1591, %987
  %1593 = lshr exact i64 %1592, 1
  %1594 = trunc i64 %1593 to i32
  %1595 = icmp eq i32 %1594, 0
  br i1 %1595, label %1607, label %1596

1596:                                             ; preds = %1589
  %1597 = shl i64 %1592, 31
  %1598 = add i64 %1597, -4294967296
  %1599 = ashr i64 %1598, 32
  %1600 = getelementptr inbounds i16, ptr %488, i64 %1599
  %1601 = load i16, ptr %1600, align 2, !tbaa !44
  %1602 = ashr i64 %1597, 32
  %1603 = getelementptr inbounds i16, ptr %488, i64 %1602
  store i16 %1601, ptr %1603, align 2, !tbaa !44
  br label %1607

1604:                                             ; preds = %1303
  %1605 = add nsw i32 %1028, 1
  %1606 = load i32, ptr @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4, !tbaa !5
  br label %1607

1607:                                             ; preds = %1589, %1596, %1604
  %1608 = phi i32 [ %1606, %1604 ], [ %1312, %1596 ], [ %1312, %1589 ]
  %1609 = phi i32 [ %1605, %1604 ], [ 0, %1596 ], [ 0, %1589 ]
  %1610 = phi i32 [ %1027, %1604 ], [ %1594, %1596 ], [ 0, %1589 ]
  %1611 = phi i32 [ %1026, %1604 ], [ %1353, %1596 ], [ %1353, %1589 ]
  %1612 = phi i32 [ %1025, %1604 ], [ %1354, %1596 ], [ %1354, %1589 ]
  %1613 = icmp eq i32 %1608, 0
  br i1 %1613, label %1618, label %1614

1614:                                             ; preds = %1607
  %1615 = load i32, ptr %1035, align 4
  %1616 = and i32 %1615, 1073741824
  %1617 = icmp ne i32 %1616, 0
  br label %1618

1618:                                             ; preds = %1614, %1607
  %1619 = phi i1 [ false, %1607 ], [ %1617, %1614 ]
  %1620 = load i32, ptr %17, align 8, !tbaa !17
  %1621 = add nsw i32 %988, %1620
  %1622 = load i32, ptr %989, align 4, !tbaa !69
  %1623 = icmp sgt i32 %1622, %1621
  br i1 %1623, label %1639, label %1624

1624:                                             ; preds = %1618, %1624
  %1625 = phi i32 [ %1627, %1624 ], [ %1622, %1618 ]
  %1626 = ashr i32 %1625, 1
  %1627 = add nsw i32 %1626, %1625
  %1628 = icmp sgt i32 %1627, %1621
  br i1 %1628, label %1629, label %1624

1629:                                             ; preds = %1624
  %1630 = sext i32 %1627 to i64
  %1631 = icmp slt i32 %1627, 0
  %1632 = shl nsw i64 %1630, 1
  %1633 = select i1 %1631, i64 -1, i64 %1632
  %1634 = call noalias noundef nonnull ptr @_Znam(i64 noundef %1633) #12
  %1635 = load ptr, ptr %12, align 8, !tbaa !46
  %1636 = sext i32 %1620 to i64
  %1637 = shl nsw i64 %1636, 1
  call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 2 %1634, ptr align 2 %1635, i64 %1637, i1 false)
  %1638 = icmp eq ptr %1635, null
  br i1 %1638, label %1643, label %1641

1639:                                             ; preds = %1618
  %1640 = load ptr, ptr %12, align 8, !tbaa !46
  br label %1645

1641:                                             ; preds = %1629
  call void @_ZdaPv(ptr noundef nonnull %1635) #13
  %1642 = load i32, ptr %17, align 8, !tbaa !17
  br label %1643

1643:                                             ; preds = %1641, %1629
  %1644 = phi i32 [ %1642, %1641 ], [ %1620, %1629 ]
  store ptr %1634, ptr %12, align 8, !tbaa !46
  store i32 %1627, ptr %989, align 4, !tbaa !69
  br label %1645

1645:                                             ; preds = %1639, %1643
  %1646 = phi i32 [ %1620, %1639 ], [ %1644, %1643 ]
  %1647 = phi ptr [ %1640, %1639 ], [ %1634, %1643 ]
  %1648 = ptrtoint ptr %1647 to i64
  %1649 = add nsw i32 %1646, 1
  %1650 = sext i32 %1649 to i64
  %1651 = getelementptr inbounds i16, ptr %1647, i64 %1650
  %1652 = icmp slt i32 %1609, %1610
  br i1 %1619, label %1653, label %1701

1653:                                             ; preds = %1645
  br i1 %1652, label %1654, label %1872

1654:                                             ; preds = %1653
  %1655 = sext i32 %1609 to i64
  %1656 = sext i32 %1610 to i64
  %1657 = extractelement <2 x double> %1051, i64 0
  %1658 = extractelement <2 x double> %1051, i64 1
  br label %1659

1659:                                             ; preds = %1654, %1696
  %1660 = phi i64 [ %1655, %1654 ], [ %1699, %1696 ]
  %1661 = phi ptr [ %534, %1654 ], [ %1698, %1696 ]
  %1662 = phi ptr [ %1651, %1654 ], [ %1697, %1696 ]
  %1663 = getelementptr inbounds i16, ptr %488, i64 %1660
  %1664 = load i16, ptr %1663, align 2, !tbaa !44
  %1665 = zext i16 %1664 to i64
  %1666 = getelementptr inbounds %struct.CompAtomExt, ptr %112, i64 %1665
  %1667 = load i32, ptr %1666, align 4
  %1668 = and i32 %1667, 1073741824
  %1669 = icmp eq i32 %1668, 0
  br i1 %1669, label %1670, label %1696

1670:                                             ; preds = %1659
  %1671 = getelementptr inbounds %struct.CompAtom, ptr %108, i64 %1665
  %1672 = getelementptr inbounds %class.Vector, ptr %1671, i64 0, i32 2
  %1673 = load double, ptr %1672, align 8, !tbaa !49
  %1674 = fsub double %1054, %1673
  %1675 = getelementptr inbounds %class.Vector, ptr %1671, i64 0, i32 1
  %1676 = load double, ptr %1675, align 8, !tbaa !67
  %1677 = fsub double %1658, %1676
  %1678 = load double, ptr %1671, align 8, !tbaa !68
  %1679 = fsub double %1657, %1678
  %1680 = fmul double %1679, %1679
  %1681 = call double @llvm.fmuladd.f64(double %1677, double %1677, double %1680)
  %1682 = call double @llvm.fmuladd.f64(double %1674, double %1674, double %1681)
  %1683 = fcmp ugt double %1682, %24
  br i1 %1683, label %1696, label %1684

1684:                                             ; preds = %1670
  %1685 = shl i32 %1667, 2
  %1686 = ashr exact i32 %1685, 2
  %1687 = icmp slt i32 %1686, %1067
  %1688 = icmp sgt i32 %1686, %1069
  %1689 = select i1 %1687, i1 true, i1 %1688
  %1690 = select i1 %1689, ptr %1662, ptr %1661
  %1691 = zext i1 %1689 to i64
  %1692 = getelementptr inbounds i16, ptr %1662, i64 %1691
  %1693 = xor i1 %1689, true
  %1694 = zext i1 %1693 to i64
  %1695 = getelementptr inbounds i16, ptr %1661, i64 %1694
  store i16 %1664, ptr %1690, align 2, !tbaa !44
  br label %1696

1696:                                             ; preds = %1684, %1670, %1659
  %1697 = phi ptr [ %1662, %1659 ], [ %1662, %1670 ], [ %1692, %1684 ]
  %1698 = phi ptr [ %1661, %1659 ], [ %1661, %1670 ], [ %1695, %1684 ]
  %1699 = add nsw i64 %1660, 1
  %1700 = icmp eq i64 %1699, %1656
  br i1 %1700, label %1872, label %1659

1701:                                             ; preds = %1645
  br i1 %1652, label %1702, label %1872

1702:                                             ; preds = %1701
  %1703 = sub nsw i32 %1610, %1609
  %1704 = icmp sgt i32 %1703, 6
  br i1 %1704, label %1705, label %1823

1705:                                             ; preds = %1702
  %1706 = add nsw i32 %1610, -2
  %1707 = add nsw i32 %1609, 2
  %1708 = icmp slt i32 %1707, %1706
  br i1 %1708, label %1709, label %1823

1709:                                             ; preds = %1705
  %1710 = sext i32 %1609 to i64
  %1711 = getelementptr inbounds i16, ptr %488, i64 %1710
  %1712 = load i16, ptr %1711, align 2, !tbaa !44
  %1713 = zext i16 %1712 to i64
  %1714 = getelementptr inbounds %struct.CompAtomExt, ptr %112, i64 %1713
  %1715 = load i32, ptr %1714, align 4
  %1716 = add nsw i32 %1609, 1
  %1717 = sext i32 %1716 to i64
  %1718 = getelementptr inbounds i16, ptr %488, i64 %1717
  %1719 = load i16, ptr %1718, align 2, !tbaa !44
  %1720 = zext i16 %1719 to i64
  %1721 = getelementptr inbounds %struct.CompAtom, ptr %108, i64 %1720
  %1722 = getelementptr inbounds %class.Vector, ptr %1721, i64 0, i32 2
  %1723 = load double, ptr %1722, align 8, !tbaa !49
  %1724 = getelementptr inbounds %struct.CompAtom, ptr %108, i64 %1713
  %1725 = getelementptr inbounds %class.Vector, ptr %1724, i64 0, i32 2
  %1726 = load double, ptr %1725, align 8, !tbaa !49
  %1727 = getelementptr inbounds %class.Vector, ptr %1721, i64 0, i32 1
  %1728 = load double, ptr %1727, align 8, !tbaa !67
  %1729 = getelementptr inbounds %class.Vector, ptr %1724, i64 0, i32 1
  %1730 = load double, ptr %1729, align 8, !tbaa !67
  %1731 = load double, ptr %1721, align 8, !tbaa !68
  %1732 = load double, ptr %1724, align 8, !tbaa !68
  %1733 = sext i32 %1707 to i64
  %1734 = sext i32 %1706 to i64
  %1735 = extractelement <2 x double> %1051, i64 0
  %1736 = extractelement <2 x double> %1051, i64 1
  br label %1737

1737:                                             ; preds = %1709, %1817
  %1738 = phi i64 [ %1733, %1709 ], [ %1820, %1817 ]
  %1739 = phi i64 [ %1720, %1709 ], [ %1777, %1817 ]
  %1740 = phi i32 [ %1715, %1709 ], [ %1805, %1817 ]
  %1741 = phi ptr [ %534, %1709 ], [ %1819, %1817 ]
  %1742 = phi ptr [ %1651, %1709 ], [ %1818, %1817 ]
  %1743 = phi i32 [ %1609, %1709 ], [ %1822, %1817 ]
  %1744 = phi i16 [ %1712, %1709 ], [ %1769, %1817 ]
  %1745 = phi i16 [ %1719, %1709 ], [ %1773, %1817 ]
  %1746 = phi double [ %1732, %1709 ], [ %1776, %1817 ]
  %1747 = phi double [ %1731, %1709 ], [ %1779, %1817 ]
  %1748 = phi double [ %1730, %1709 ], [ %1781, %1817 ]
  %1749 = phi double [ %1728, %1709 ], [ %1783, %1817 ]
  %1750 = phi double [ %1726, %1709 ], [ %1785, %1817 ]
  %1751 = phi double [ %1723, %1709 ], [ %1787, %1817 ]
  %1752 = getelementptr inbounds %struct.CompAtomExt, ptr %112, i64 %1739
  %1753 = load i32, ptr %1752, align 4
  %1754 = shl i32 %1753, 2
  %1755 = ashr exact i32 %1754, 2
  %1756 = fsub double %1735, %1746
  %1757 = fsub double %1735, %1747
  %1758 = fmul double %1756, %1756
  %1759 = fmul double %1757, %1757
  %1760 = fsub double %1736, %1748
  %1761 = fsub double %1736, %1749
  %1762 = call double @llvm.fmuladd.f64(double %1760, double %1760, double %1758)
  %1763 = call double @llvm.fmuladd.f64(double %1761, double %1761, double %1759)
  %1764 = fsub double %1054, %1750
  %1765 = fsub double %1054, %1751
  %1766 = call double @llvm.fmuladd.f64(double %1764, double %1764, double %1762)
  %1767 = call double @llvm.fmuladd.f64(double %1765, double %1765, double %1763)
  %1768 = getelementptr inbounds i16, ptr %488, i64 %1738
  %1769 = load i16, ptr %1768, align 2, !tbaa !44
  %1770 = add nsw i32 %1743, 3
  %1771 = sext i32 %1770 to i64
  %1772 = getelementptr inbounds i16, ptr %488, i64 %1771
  %1773 = load i16, ptr %1772, align 2, !tbaa !44
  %1774 = zext i16 %1769 to i64
  %1775 = getelementptr inbounds %struct.CompAtom, ptr %108, i64 %1774
  %1776 = load double, ptr %1775, align 8, !tbaa !68
  %1777 = zext i16 %1773 to i64
  %1778 = getelementptr inbounds %struct.CompAtom, ptr %108, i64 %1777
  %1779 = load double, ptr %1778, align 8, !tbaa !68
  %1780 = getelementptr inbounds %class.Vector, ptr %1775, i64 0, i32 1
  %1781 = load double, ptr %1780, align 8, !tbaa !67
  %1782 = getelementptr inbounds %class.Vector, ptr %1778, i64 0, i32 1
  %1783 = load double, ptr %1782, align 8, !tbaa !67
  %1784 = getelementptr inbounds %class.Vector, ptr %1775, i64 0, i32 2
  %1785 = load double, ptr %1784, align 8, !tbaa !49
  %1786 = getelementptr inbounds %class.Vector, ptr %1778, i64 0, i32 2
  %1787 = load double, ptr %1786, align 8, !tbaa !49
  %1788 = fcmp ugt double %1766, %24
  br i1 %1788, label %1801, label %1789

1789:                                             ; preds = %1737
  %1790 = shl i32 %1740, 2
  %1791 = ashr exact i32 %1790, 2
  %1792 = icmp slt i32 %1791, %1067
  %1793 = icmp sgt i32 %1791, %1069
  %1794 = select i1 %1792, i1 true, i1 %1793
  %1795 = select i1 %1794, ptr %1742, ptr %1741
  %1796 = zext i1 %1794 to i64
  %1797 = getelementptr inbounds i16, ptr %1742, i64 %1796
  %1798 = xor i1 %1794, true
  %1799 = zext i1 %1798 to i64
  %1800 = getelementptr inbounds i16, ptr %1741, i64 %1799
  store i16 %1744, ptr %1795, align 2, !tbaa !44
  br label %1801

1801:                                             ; preds = %1789, %1737
  %1802 = phi ptr [ %1742, %1737 ], [ %1797, %1789 ]
  %1803 = phi ptr [ %1741, %1737 ], [ %1800, %1789 ]
  %1804 = getelementptr inbounds %struct.CompAtomExt, ptr %112, i64 %1774
  %1805 = load i32, ptr %1804, align 4
  %1806 = fcmp ugt double %1767, %24
  br i1 %1806, label %1817, label %1807

1807:                                             ; preds = %1801
  %1808 = icmp slt i32 %1755, %1067
  %1809 = icmp sgt i32 %1755, %1069
  %1810 = select i1 %1808, i1 true, i1 %1809
  %1811 = select i1 %1810, ptr %1802, ptr %1803
  %1812 = zext i1 %1810 to i64
  %1813 = getelementptr inbounds i16, ptr %1802, i64 %1812
  %1814 = xor i1 %1810, true
  %1815 = zext i1 %1814 to i64
  %1816 = getelementptr inbounds i16, ptr %1803, i64 %1815
  store i16 %1745, ptr %1811, align 2, !tbaa !44
  br label %1817

1817:                                             ; preds = %1807, %1801
  %1818 = phi ptr [ %1802, %1801 ], [ %1813, %1807 ]
  %1819 = phi ptr [ %1803, %1801 ], [ %1816, %1807 ]
  %1820 = add nsw i64 %1738, 2
  %1821 = icmp slt i64 %1820, %1734
  %1822 = trunc i64 %1738 to i32
  br i1 %1821, label %1737, label %1823

1823:                                             ; preds = %1817, %1705, %1702
  %1824 = phi i32 [ %1609, %1702 ], [ %1609, %1705 ], [ %1822, %1817 ]
  %1825 = phi ptr [ %1651, %1702 ], [ %1651, %1705 ], [ %1818, %1817 ]
  %1826 = phi ptr [ %534, %1702 ], [ %534, %1705 ], [ %1819, %1817 ]
  %1827 = icmp slt i32 %1824, %1610
  br i1 %1827, label %1828, label %1872

1828:                                             ; preds = %1823
  %1829 = sext i32 %1824 to i64
  %1830 = sext i32 %1610 to i64
  %1831 = extractelement <2 x double> %1051, i64 0
  %1832 = extractelement <2 x double> %1051, i64 1
  br label %1833

1833:                                             ; preds = %1828, %1867
  %1834 = phi i64 [ %1829, %1828 ], [ %1870, %1867 ]
  %1835 = phi ptr [ %1826, %1828 ], [ %1869, %1867 ]
  %1836 = phi ptr [ %1825, %1828 ], [ %1868, %1867 ]
  %1837 = getelementptr inbounds i16, ptr %488, i64 %1834
  %1838 = load i16, ptr %1837, align 2, !tbaa !44
  %1839 = zext i16 %1838 to i64
  %1840 = getelementptr inbounds %struct.CompAtom, ptr %108, i64 %1839
  %1841 = load double, ptr %1840, align 8, !tbaa !68
  %1842 = getelementptr inbounds %class.Vector, ptr %1840, i64 0, i32 1
  %1843 = load double, ptr %1842, align 8, !tbaa !67
  %1844 = getelementptr inbounds %class.Vector, ptr %1840, i64 0, i32 2
  %1845 = load double, ptr %1844, align 8, !tbaa !49
  %1846 = fsub double %1831, %1841
  %1847 = fmul double %1846, %1846
  %1848 = fsub double %1832, %1843
  %1849 = call double @llvm.fmuladd.f64(double %1848, double %1848, double %1847)
  %1850 = fsub double %1054, %1845
  %1851 = call double @llvm.fmuladd.f64(double %1850, double %1850, double %1849)
  %1852 = fcmp ugt double %1851, %24
  br i1 %1852, label %1867, label %1853

1853:                                             ; preds = %1833
  %1854 = getelementptr inbounds %struct.CompAtomExt, ptr %112, i64 %1839
  %1855 = load i32, ptr %1854, align 4
  %1856 = shl i32 %1855, 2
  %1857 = ashr exact i32 %1856, 2
  %1858 = icmp slt i32 %1857, %1067
  %1859 = icmp sgt i32 %1857, %1069
  %1860 = select i1 %1858, i1 true, i1 %1859
  %1861 = select i1 %1860, ptr %1836, ptr %1835
  %1862 = zext i1 %1860 to i64
  %1863 = getelementptr inbounds i16, ptr %1836, i64 %1862
  %1864 = xor i1 %1860, true
  %1865 = zext i1 %1864 to i64
  %1866 = getelementptr inbounds i16, ptr %1835, i64 %1865
  store i16 %1838, ptr %1861, align 2, !tbaa !44
  br label %1867

1867:                                             ; preds = %1853, %1833
  %1868 = phi ptr [ %1836, %1833 ], [ %1863, %1853 ]
  %1869 = phi ptr [ %1835, %1833 ], [ %1866, %1853 ]
  %1870 = add nsw i64 %1834, 1
  %1871 = icmp eq i64 %1870, %1830
  br i1 %1871, label %1872, label %1833

1872:                                             ; preds = %1867, %1696, %1823, %1653, %1701
  %1873 = phi ptr [ %1651, %1701 ], [ %1651, %1653 ], [ %1825, %1823 ], [ %1697, %1696 ], [ %1868, %1867 ]
  %1874 = phi ptr [ %534, %1701 ], [ %534, %1653 ], [ %1826, %1823 ], [ %1698, %1696 ], [ %1869, %1867 ]
  %1875 = ptrtoint ptr %1873 to i64
  %1876 = ptrtoint ptr %1651 to i64
  %1877 = sub i64 %1875, %1876
  %1878 = lshr exact i64 %1877, 1
  %1879 = trunc i64 %1878 to i32
  %1880 = icmp sgt i32 %1879, 0
  br i1 %1880, label %1881, label %1981

1881:                                             ; preds = %1872
  %1882 = and i64 %1878, 4294967295
  %1883 = and i64 %1878, 1
  %1884 = icmp eq i64 %1882, 1
  br i1 %1884, label %1949, label %1885

1885:                                             ; preds = %1881
  %1886 = sub nsw i64 %1882, %1883
  br label %1887

1887:                                             ; preds = %1942, %1885
  %1888 = phi i64 [ 0, %1885 ], [ %1946, %1942 ]
  %1889 = phi ptr [ %1651, %1885 ], [ %1945, %1942 ]
  %1890 = phi ptr [ %580, %1885 ], [ %1944, %1942 ]
  %1891 = phi ptr [ %718, %1885 ], [ %1943, %1942 ]
  %1892 = phi i64 [ 0, %1885 ], [ %1947, %1942 ]
  %1893 = getelementptr inbounds i16, ptr %1651, i64 %1888
  %1894 = load i16, ptr %1893, align 2, !tbaa !44
  %1895 = zext i16 %1894 to i64
  %1896 = getelementptr inbounds %struct.CompAtom, ptr %108, i64 %1895, i32 3
  %1897 = load i8, ptr %1896, align 2, !tbaa !51
  %1898 = zext i8 %1897 to i32
  %1899 = mul nuw nsw i32 %1898, 3
  %1900 = add nuw nsw i32 %1899, %1057
  %1901 = zext i32 %1900 to i64
  %1902 = getelementptr inbounds [9 x i32], ptr %2, i64 0, i64 %1901
  %1903 = load i32, ptr %1902, align 4, !tbaa !5
  switch i32 %1903, label %1915 [
    i32 0, label %1904
    i32 1, label %1906
    i32 2, label %1908
  ]

1904:                                             ; preds = %1887
  %1905 = getelementptr inbounds i16, ptr %1889, i64 1
  br label %1910

1906:                                             ; preds = %1887
  %1907 = getelementptr inbounds i16, ptr %1890, i64 1
  br label %1910

1908:                                             ; preds = %1887
  %1909 = getelementptr inbounds i16, ptr %1891, i64 1
  br label %1910

1910:                                             ; preds = %1904, %1906, %1908
  %1911 = phi ptr [ %1891, %1908 ], [ %1890, %1906 ], [ %1889, %1904 ]
  %1912 = phi ptr [ %1909, %1908 ], [ %1891, %1906 ], [ %1891, %1904 ]
  %1913 = phi ptr [ %1890, %1908 ], [ %1907, %1906 ], [ %1890, %1904 ]
  %1914 = phi ptr [ %1889, %1908 ], [ %1889, %1906 ], [ %1905, %1904 ]
  store i16 %1894, ptr %1911, align 2, !tbaa !44
  br label %1915

1915:                                             ; preds = %1910, %1887
  %1916 = phi ptr [ %1891, %1887 ], [ %1912, %1910 ]
  %1917 = phi ptr [ %1890, %1887 ], [ %1913, %1910 ]
  %1918 = phi ptr [ %1889, %1887 ], [ %1914, %1910 ]
  %1919 = or i64 %1888, 1
  %1920 = getelementptr inbounds i16, ptr %1651, i64 %1919
  %1921 = load i16, ptr %1920, align 2, !tbaa !44
  %1922 = zext i16 %1921 to i64
  %1923 = getelementptr inbounds %struct.CompAtom, ptr %108, i64 %1922, i32 3
  %1924 = load i8, ptr %1923, align 2, !tbaa !51
  %1925 = zext i8 %1924 to i32
  %1926 = mul nuw nsw i32 %1925, 3
  %1927 = add nuw nsw i32 %1926, %1057
  %1928 = zext i32 %1927 to i64
  %1929 = getelementptr inbounds [9 x i32], ptr %2, i64 0, i64 %1928
  %1930 = load i32, ptr %1929, align 4, !tbaa !5
  switch i32 %1930, label %1942 [
    i32 0, label %1935
    i32 1, label %1933
    i32 2, label %1931
  ]

1931:                                             ; preds = %1915
  %1932 = getelementptr inbounds i16, ptr %1916, i64 1
  br label %1937

1933:                                             ; preds = %1915
  %1934 = getelementptr inbounds i16, ptr %1917, i64 1
  br label %1937

1935:                                             ; preds = %1915
  %1936 = getelementptr inbounds i16, ptr %1918, i64 1
  br label %1937

1937:                                             ; preds = %1935, %1933, %1931
  %1938 = phi ptr [ %1916, %1931 ], [ %1917, %1933 ], [ %1918, %1935 ]
  %1939 = phi ptr [ %1932, %1931 ], [ %1916, %1933 ], [ %1916, %1935 ]
  %1940 = phi ptr [ %1917, %1931 ], [ %1934, %1933 ], [ %1917, %1935 ]
  %1941 = phi ptr [ %1918, %1931 ], [ %1918, %1933 ], [ %1936, %1935 ]
  store i16 %1921, ptr %1938, align 2, !tbaa !44
  br label %1942

1942:                                             ; preds = %1937, %1915
  %1943 = phi ptr [ %1916, %1915 ], [ %1939, %1937 ]
  %1944 = phi ptr [ %1917, %1915 ], [ %1940, %1937 ]
  %1945 = phi ptr [ %1918, %1915 ], [ %1941, %1937 ]
  %1946 = add nuw nsw i64 %1888, 2
  %1947 = add i64 %1892, 2
  %1948 = icmp eq i64 %1947, %1886
  br i1 %1948, label %1949, label %1887

1949:                                             ; preds = %1942, %1881
  %1950 = phi ptr [ undef, %1881 ], [ %1943, %1942 ]
  %1951 = phi ptr [ undef, %1881 ], [ %1944, %1942 ]
  %1952 = phi ptr [ undef, %1881 ], [ %1945, %1942 ]
  %1953 = phi i64 [ 0, %1881 ], [ %1946, %1942 ]
  %1954 = phi ptr [ %1651, %1881 ], [ %1945, %1942 ]
  %1955 = phi ptr [ %580, %1881 ], [ %1944, %1942 ]
  %1956 = phi ptr [ %718, %1881 ], [ %1943, %1942 ]
  %1957 = icmp eq i64 %1883, 0
  br i1 %1957, label %1981, label %1958

1958:                                             ; preds = %1949
  %1959 = getelementptr inbounds i16, ptr %1651, i64 %1953
  %1960 = load i16, ptr %1959, align 2, !tbaa !44
  %1961 = zext i16 %1960 to i64
  %1962 = getelementptr inbounds %struct.CompAtom, ptr %108, i64 %1961, i32 3
  %1963 = load i8, ptr %1962, align 2, !tbaa !51
  %1964 = zext i8 %1963 to i32
  %1965 = mul nuw nsw i32 %1964, 3
  %1966 = add nuw nsw i32 %1965, %1057
  %1967 = zext i32 %1966 to i64
  %1968 = getelementptr inbounds [9 x i32], ptr %2, i64 0, i64 %1967
  %1969 = load i32, ptr %1968, align 4, !tbaa !5
  switch i32 %1969, label %1981 [
    i32 0, label %1974
    i32 1, label %1972
    i32 2, label %1970
  ]

1970:                                             ; preds = %1958
  %1971 = getelementptr inbounds i16, ptr %1956, i64 1
  br label %1976

1972:                                             ; preds = %1958
  %1973 = getelementptr inbounds i16, ptr %1955, i64 1
  br label %1976

1974:                                             ; preds = %1958
  %1975 = getelementptr inbounds i16, ptr %1954, i64 1
  br label %1976

1976:                                             ; preds = %1974, %1972, %1970
  %1977 = phi ptr [ %1956, %1970 ], [ %1955, %1972 ], [ %1954, %1974 ]
  %1978 = phi ptr [ %1971, %1970 ], [ %1956, %1972 ], [ %1956, %1974 ]
  %1979 = phi ptr [ %1955, %1970 ], [ %1973, %1972 ], [ %1955, %1974 ]
  %1980 = phi ptr [ %1954, %1970 ], [ %1954, %1972 ], [ %1975, %1974 ]
  store i16 %1960, ptr %1977, align 2, !tbaa !44
  br label %1981

1981:                                             ; preds = %1949, %1976, %1958, %1872
  %1982 = phi ptr [ %718, %1872 ], [ %1950, %1949 ], [ %1956, %1958 ], [ %1978, %1976 ]
  %1983 = phi ptr [ %580, %1872 ], [ %1951, %1949 ], [ %1955, %1958 ], [ %1979, %1976 ]
  %1984 = phi ptr [ %1651, %1872 ], [ %1952, %1949 ], [ %1954, %1958 ], [ %1980, %1976 ]
  %1985 = ptrtoint ptr %1874 to i64
  %1986 = sub i64 %1985, %990
  %1987 = lshr exact i64 %1986, 1
  %1988 = trunc i64 %1987 to i32
  %1989 = icmp sgt i32 %1988, 0
  br i1 %1989, label %1990, label %2065

1990:                                             ; preds = %1981
  %1991 = and i64 %1987, 4294967295
  br label %1992

1992:                                             ; preds = %1990, %2053
  %1993 = phi i64 [ 0, %1990 ], [ %2063, %2053 ]
  %1994 = phi ptr [ %1984, %1990 ], [ %2062, %2053 ]
  %1995 = phi ptr [ %396, %1990 ], [ %2061, %2053 ]
  %1996 = phi ptr [ %442, %1990 ], [ %2060, %2053 ]
  %1997 = phi ptr [ %1983, %1990 ], [ %2059, %2053 ]
  %1998 = phi ptr [ %626, %1990 ], [ %2058, %2053 ]
  %1999 = phi ptr [ %672, %1990 ], [ %2057, %2053 ]
  %2000 = phi ptr [ %1982, %1990 ], [ %2056, %2053 ]
  %2001 = phi ptr [ %764, %1990 ], [ %2055, %2053 ]
  %2002 = phi ptr [ %810, %1990 ], [ %2054, %2053 ]
  %2003 = getelementptr inbounds i16, ptr %534, i64 %1993
  %2004 = load i16, ptr %2003, align 2, !tbaa !44
  %2005 = zext i16 %2004 to i64
  %2006 = getelementptr inbounds %struct.CompAtomExt, ptr %112, i64 %2005
  %2007 = load i32, ptr %2006, align 4
  %2008 = shl i32 %2007, 2
  %2009 = ashr exact i32 %2008, 2
  %2010 = sext i32 %2009 to i64
  %2011 = getelementptr inbounds i8, ptr %1304, i64 %2010
  %2012 = load i8, ptr %2011, align 1, !tbaa !58
  %2013 = sext i8 %2012 to i32
  %2014 = getelementptr inbounds %struct.CompAtom, ptr %108, i64 %2005, i32 3
  %2015 = load i8, ptr %2014, align 2, !tbaa !51
  %2016 = zext i8 %2015 to i32
  %2017 = mul nuw nsw i32 %2016, 3
  %2018 = add nuw nsw i32 %2017, %1057
  %2019 = zext i32 %2018 to i64
  %2020 = getelementptr inbounds [9 x i32], ptr %2, i64 0, i64 %2019
  %2021 = load i32, ptr %2020, align 4, !tbaa !5
  %2022 = mul nsw i32 %2021, 3
  %2023 = add nsw i32 %2022, %2013
  switch i32 %2023, label %2053 [
    i32 0, label %2024
    i32 1, label %2026
    i32 2, label %2028
    i32 3, label %2030
    i32 6, label %2032
    i32 5, label %2034
    i32 8, label %2036
    i32 4, label %2038
    i32 7, label %2040
  ]

2024:                                             ; preds = %1992
  %2025 = getelementptr inbounds i16, ptr %1994, i64 1
  br label %2042

2026:                                             ; preds = %1992
  %2027 = getelementptr inbounds i16, ptr %1995, i64 1
  br label %2042

2028:                                             ; preds = %1992
  %2029 = getelementptr inbounds i16, ptr %1996, i64 1
  br label %2042

2030:                                             ; preds = %1992
  %2031 = getelementptr inbounds i16, ptr %1997, i64 1
  br label %2042

2032:                                             ; preds = %1992
  %2033 = getelementptr inbounds i16, ptr %2000, i64 1
  br label %2042

2034:                                             ; preds = %1992
  %2035 = getelementptr inbounds i16, ptr %1999, i64 1
  br label %2042

2036:                                             ; preds = %1992
  %2037 = getelementptr inbounds i16, ptr %2002, i64 1
  br label %2042

2038:                                             ; preds = %1992
  %2039 = getelementptr inbounds i16, ptr %1998, i64 1
  br label %2042

2040:                                             ; preds = %1992
  %2041 = getelementptr inbounds i16, ptr %2001, i64 1
  br label %2042

2042:                                             ; preds = %2024, %2026, %2028, %2030, %2032, %2034, %2036, %2038, %2040
  %2043 = phi ptr [ %2001, %2040 ], [ %1998, %2038 ], [ %2002, %2036 ], [ %1999, %2034 ], [ %2000, %2032 ], [ %1997, %2030 ], [ %1996, %2028 ], [ %1995, %2026 ], [ %1994, %2024 ]
  %2044 = phi ptr [ %2002, %2040 ], [ %2002, %2038 ], [ %2037, %2036 ], [ %2002, %2034 ], [ %2002, %2032 ], [ %2002, %2030 ], [ %2002, %2028 ], [ %2002, %2026 ], [ %2002, %2024 ]
  %2045 = phi ptr [ %2041, %2040 ], [ %2001, %2038 ], [ %2001, %2036 ], [ %2001, %2034 ], [ %2001, %2032 ], [ %2001, %2030 ], [ %2001, %2028 ], [ %2001, %2026 ], [ %2001, %2024 ]
  %2046 = phi ptr [ %2000, %2040 ], [ %2000, %2038 ], [ %2000, %2036 ], [ %2000, %2034 ], [ %2033, %2032 ], [ %2000, %2030 ], [ %2000, %2028 ], [ %2000, %2026 ], [ %2000, %2024 ]
  %2047 = phi ptr [ %1999, %2040 ], [ %1999, %2038 ], [ %1999, %2036 ], [ %2035, %2034 ], [ %1999, %2032 ], [ %1999, %2030 ], [ %1999, %2028 ], [ %1999, %2026 ], [ %1999, %2024 ]
  %2048 = phi ptr [ %1998, %2040 ], [ %2039, %2038 ], [ %1998, %2036 ], [ %1998, %2034 ], [ %1998, %2032 ], [ %1998, %2030 ], [ %1998, %2028 ], [ %1998, %2026 ], [ %1998, %2024 ]
  %2049 = phi ptr [ %1997, %2040 ], [ %1997, %2038 ], [ %1997, %2036 ], [ %1997, %2034 ], [ %1997, %2032 ], [ %2031, %2030 ], [ %1997, %2028 ], [ %1997, %2026 ], [ %1997, %2024 ]
  %2050 = phi ptr [ %1996, %2040 ], [ %1996, %2038 ], [ %1996, %2036 ], [ %1996, %2034 ], [ %1996, %2032 ], [ %1996, %2030 ], [ %2029, %2028 ], [ %1996, %2026 ], [ %1996, %2024 ]
  %2051 = phi ptr [ %1995, %2040 ], [ %1995, %2038 ], [ %1995, %2036 ], [ %1995, %2034 ], [ %1995, %2032 ], [ %1995, %2030 ], [ %1995, %2028 ], [ %2027, %2026 ], [ %1995, %2024 ]
  %2052 = phi ptr [ %1994, %2040 ], [ %1994, %2038 ], [ %1994, %2036 ], [ %1994, %2034 ], [ %1994, %2032 ], [ %1994, %2030 ], [ %1994, %2028 ], [ %1994, %2026 ], [ %2025, %2024 ]
  store i16 %2004, ptr %2043, align 2, !tbaa !44
  br label %2053

2053:                                             ; preds = %2042, %1992
  %2054 = phi ptr [ %2002, %1992 ], [ %2044, %2042 ]
  %2055 = phi ptr [ %2001, %1992 ], [ %2045, %2042 ]
  %2056 = phi ptr [ %2000, %1992 ], [ %2046, %2042 ]
  %2057 = phi ptr [ %1999, %1992 ], [ %2047, %2042 ]
  %2058 = phi ptr [ %1998, %1992 ], [ %2048, %2042 ]
  %2059 = phi ptr [ %1997, %1992 ], [ %2049, %2042 ]
  %2060 = phi ptr [ %1996, %1992 ], [ %2050, %2042 ]
  %2061 = phi ptr [ %1995, %1992 ], [ %2051, %2042 ]
  %2062 = phi ptr [ %1994, %1992 ], [ %2052, %2042 ]
  %2063 = add nuw nsw i64 %1993, 1
  %2064 = icmp eq i64 %2063, %1991
  br i1 %2064, label %2065, label %1992

2065:                                             ; preds = %2053, %1981
  %2066 = phi ptr [ %810, %1981 ], [ %2054, %2053 ]
  %2067 = phi ptr [ %764, %1981 ], [ %2055, %2053 ]
  %2068 = phi ptr [ %1982, %1981 ], [ %2056, %2053 ]
  %2069 = phi ptr [ %672, %1981 ], [ %2057, %2053 ]
  %2070 = phi ptr [ %626, %1981 ], [ %2058, %2053 ]
  %2071 = phi ptr [ %1983, %1981 ], [ %2059, %2053 ]
  %2072 = phi ptr [ %442, %1981 ], [ %2060, %2053 ]
  %2073 = phi ptr [ %396, %1981 ], [ %2061, %2053 ]
  %2074 = phi ptr [ %1984, %1981 ], [ %2062, %2053 ]
  %2075 = ptrtoint ptr %2074 to i64
  %2076 = sub i64 %2075, %1876
  %2077 = lshr exact i64 %2076, 1
  %2078 = trunc i64 %2077 to i32
  %2079 = icmp eq i32 %2078, 0
  %2080 = shl i64 %2076, 31
  br i1 %2079, label %2086, label %2081

2081:                                             ; preds = %2065
  %2082 = add i64 %2080, -4294967296
  %2083 = ashr i64 %2082, 32
  %2084 = getelementptr inbounds i16, ptr %1651, i64 %2083
  %2085 = load i16, ptr %2084, align 2, !tbaa !44
  br label %2086

2086:                                             ; preds = %2065, %2081
  %2087 = phi i16 [ %2085, %2081 ], [ -1, %2065 ]
  %2088 = ashr i64 %2080, 32
  %2089 = getelementptr inbounds i16, ptr %1651, i64 %2088
  store i16 %2087, ptr %2089, align 2, !tbaa !44
  %2090 = trunc i64 %2077 to i16
  %2091 = add i16 %2090, 1
  %2092 = load i32, ptr %17, align 8, !tbaa !17
  %2093 = sext i32 %2092 to i64
  %2094 = getelementptr inbounds i16, ptr %1647, i64 %2093
  store i16 %2091, ptr %2094, align 2, !tbaa !44
  %2095 = add nsw i32 %2078, 2
  %2096 = add nsw i32 %2095, %2092
  store i32 %2096, ptr %17, align 8, !tbaa !17
  %2097 = ptrtoint ptr %2073 to i64
  %2098 = sub i64 %2097, %991
  %2099 = lshr exact i64 %2098, 1
  %2100 = trunc i64 %2099 to i32
  %2101 = add nsw i32 %2096, 1
  %2102 = sext i32 %2101 to i64
  %2103 = getelementptr i16, ptr %1647, i64 %2102
  %2104 = icmp sgt i32 %2100, 0
  br i1 %2104, label %2105, label %2195

2105:                                             ; preds = %2086
  %2106 = and i64 %2099, 4294967295
  %2107 = icmp ult i64 %2106, 8
  br i1 %2107, label %2151, label %2108

2108:                                             ; preds = %2105
  %2109 = shl nsw i64 %2102, 1
  %2110 = add i64 %2109, %1648
  %2111 = sub i64 %2110, %991
  %2112 = icmp ult i64 %2111, 128
  br i1 %2112, label %2151, label %2113

2113:                                             ; preds = %2108
  %2114 = icmp ult i64 %2106, 64
  br i1 %2114, label %2138, label %2115

2115:                                             ; preds = %2113
  %2116 = and i64 %2099, 63
  %2117 = sub nsw i64 %2106, %2116
  br label %2118

2118:                                             ; preds = %2118, %2115
  %2119 = phi i64 [ 0, %2115 ], [ %2132, %2118 ]
  %2120 = getelementptr inbounds i16, ptr %396, i64 %2119
  %2121 = load <16 x i16>, ptr %2120, align 2, !tbaa !44
  %2122 = getelementptr inbounds i16, ptr %2120, i64 16
  %2123 = load <16 x i16>, ptr %2122, align 2, !tbaa !44
  %2124 = getelementptr inbounds i16, ptr %2120, i64 32
  %2125 = load <16 x i16>, ptr %2124, align 2, !tbaa !44
  %2126 = getelementptr inbounds i16, ptr %2120, i64 48
  %2127 = load <16 x i16>, ptr %2126, align 2, !tbaa !44
  %2128 = getelementptr inbounds i16, ptr %2103, i64 %2119
  store <16 x i16> %2121, ptr %2128, align 2, !tbaa !44
  %2129 = getelementptr inbounds i16, ptr %2128, i64 16
  store <16 x i16> %2123, ptr %2129, align 2, !tbaa !44
  %2130 = getelementptr inbounds i16, ptr %2128, i64 32
  store <16 x i16> %2125, ptr %2130, align 2, !tbaa !44
  %2131 = getelementptr inbounds i16, ptr %2128, i64 48
  store <16 x i16> %2127, ptr %2131, align 2, !tbaa !44
  %2132 = add nuw i64 %2119, 64
  %2133 = icmp eq i64 %2132, %2117
  br i1 %2133, label %2134, label %2118, !llvm.loop !272

2134:                                             ; preds = %2118
  %2135 = icmp eq i64 %2116, 0
  br i1 %2135, label %2189, label %2136

2136:                                             ; preds = %2134
  %2137 = icmp ult i64 %2116, 8
  br i1 %2137, label %2151, label %2138

2138:                                             ; preds = %2113, %2136
  %2139 = phi i64 [ %2117, %2136 ], [ 0, %2113 ]
  %2140 = and i64 %2099, 7
  %2141 = sub nsw i64 %2106, %2140
  br label %2142

2142:                                             ; preds = %2142, %2138
  %2143 = phi i64 [ %2139, %2138 ], [ %2147, %2142 ]
  %2144 = getelementptr inbounds i16, ptr %396, i64 %2143
  %2145 = load <8 x i16>, ptr %2144, align 2, !tbaa !44
  %2146 = getelementptr inbounds i16, ptr %2103, i64 %2143
  store <8 x i16> %2145, ptr %2146, align 2, !tbaa !44
  %2147 = add nuw i64 %2143, 8
  %2148 = icmp eq i64 %2147, %2141
  br i1 %2148, label %2149, label %2142, !llvm.loop !273

2149:                                             ; preds = %2142
  %2150 = icmp eq i64 %2140, 0
  br i1 %2150, label %2189, label %2151

2151:                                             ; preds = %2108, %2105, %2136, %2149
  %2152 = phi i64 [ 0, %2105 ], [ 0, %2108 ], [ %2117, %2136 ], [ %2141, %2149 ]
  %2153 = sub i64 %2099, %2152
  %2154 = xor i64 %2152, -1
  %2155 = add nsw i64 %2106, %2154
  %2156 = and i64 %2153, 3
  %2157 = icmp eq i64 %2156, 0
  br i1 %2157, label %2167, label %2158

2158:                                             ; preds = %2151, %2158
  %2159 = phi i64 [ %2164, %2158 ], [ %2152, %2151 ]
  %2160 = phi i64 [ %2165, %2158 ], [ 0, %2151 ]
  %2161 = getelementptr inbounds i16, ptr %396, i64 %2159
  %2162 = load i16, ptr %2161, align 2, !tbaa !44
  %2163 = getelementptr inbounds i16, ptr %2103, i64 %2159
  store i16 %2162, ptr %2163, align 2, !tbaa !44
  %2164 = add nuw nsw i64 %2159, 1
  %2165 = add i64 %2160, 1
  %2166 = icmp eq i64 %2165, %2156
  br i1 %2166, label %2167, label %2158, !llvm.loop !274

2167:                                             ; preds = %2158, %2151
  %2168 = phi i64 [ %2152, %2151 ], [ %2164, %2158 ]
  %2169 = icmp ult i64 %2155, 3
  br i1 %2169, label %2189, label %2170

2170:                                             ; preds = %2167, %2170
  %2171 = phi i64 [ %2187, %2170 ], [ %2168, %2167 ]
  %2172 = getelementptr inbounds i16, ptr %396, i64 %2171
  %2173 = load i16, ptr %2172, align 2, !tbaa !44
  %2174 = getelementptr inbounds i16, ptr %2103, i64 %2171
  store i16 %2173, ptr %2174, align 2, !tbaa !44
  %2175 = add nuw nsw i64 %2171, 1
  %2176 = getelementptr inbounds i16, ptr %396, i64 %2175
  %2177 = load i16, ptr %2176, align 2, !tbaa !44
  %2178 = getelementptr inbounds i16, ptr %2103, i64 %2175
  store i16 %2177, ptr %2178, align 2, !tbaa !44
  %2179 = add nuw nsw i64 %2171, 2
  %2180 = getelementptr inbounds i16, ptr %396, i64 %2179
  %2181 = load i16, ptr %2180, align 2, !tbaa !44
  %2182 = getelementptr inbounds i16, ptr %2103, i64 %2179
  store i16 %2181, ptr %2182, align 2, !tbaa !44
  %2183 = add nuw nsw i64 %2171, 3
  %2184 = getelementptr inbounds i16, ptr %396, i64 %2183
  %2185 = load i16, ptr %2184, align 2, !tbaa !44
  %2186 = getelementptr inbounds i16, ptr %2103, i64 %2183
  store i16 %2185, ptr %2186, align 2, !tbaa !44
  %2187 = add nuw nsw i64 %2171, 4
  %2188 = icmp eq i64 %2187, %2106
  br i1 %2188, label %2189, label %2170, !llvm.loop !275

2189:                                             ; preds = %2167, %2170, %2134, %2149
  %2190 = shl i64 %2098, 31
  %2191 = add i64 %2190, -4294967296
  %2192 = ashr i64 %2191, 32
  %2193 = getelementptr inbounds i16, ptr %2103, i64 %2192
  %2194 = load i16, ptr %2193, align 2, !tbaa !44
  br label %2195

2195:                                             ; preds = %2086, %2189
  %2196 = phi i64 [ %2099, %2189 ], [ 0, %2086 ]
  %2197 = phi i16 [ %2194, %2189 ], [ -1, %2086 ]
  %2198 = and i64 %2196, 4294967295
  %2199 = getelementptr inbounds i16, ptr %2103, i64 %2198
  store i16 %2197, ptr %2199, align 2, !tbaa !44
  %2200 = trunc i64 %2099 to i16
  %2201 = add i16 %2200, 1
  %2202 = sext i32 %2096 to i64
  %2203 = getelementptr inbounds i16, ptr %1647, i64 %2202
  store i16 %2201, ptr %2203, align 2, !tbaa !44
  %2204 = add nsw i32 %2100, 2
  %2205 = add nsw i32 %2204, %2096
  %2206 = ptrtoint ptr %2072 to i64
  %2207 = sub i64 %2206, %992
  %2208 = lshr exact i64 %2207, 1
  %2209 = trunc i64 %2208 to i32
  %2210 = add nsw i32 %2205, 1
  %2211 = sext i32 %2210 to i64
  %2212 = getelementptr i16, ptr %1647, i64 %2211
  %2213 = icmp sgt i32 %2209, 0
  br i1 %2213, label %2214, label %2304

2214:                                             ; preds = %2195
  %2215 = and i64 %2208, 4294967295
  %2216 = icmp ult i64 %2215, 8
  br i1 %2216, label %2260, label %2217

2217:                                             ; preds = %2214
  %2218 = shl nsw i64 %2211, 1
  %2219 = add i64 %2218, %1648
  %2220 = sub i64 %2219, %992
  %2221 = icmp ult i64 %2220, 128
  br i1 %2221, label %2260, label %2222

2222:                                             ; preds = %2217
  %2223 = icmp ult i64 %2215, 64
  br i1 %2223, label %2247, label %2224

2224:                                             ; preds = %2222
  %2225 = and i64 %2208, 63
  %2226 = sub nsw i64 %2215, %2225
  br label %2227

2227:                                             ; preds = %2227, %2224
  %2228 = phi i64 [ 0, %2224 ], [ %2241, %2227 ]
  %2229 = getelementptr inbounds i16, ptr %442, i64 %2228
  %2230 = load <16 x i16>, ptr %2229, align 2, !tbaa !44
  %2231 = getelementptr inbounds i16, ptr %2229, i64 16
  %2232 = load <16 x i16>, ptr %2231, align 2, !tbaa !44
  %2233 = getelementptr inbounds i16, ptr %2229, i64 32
  %2234 = load <16 x i16>, ptr %2233, align 2, !tbaa !44
  %2235 = getelementptr inbounds i16, ptr %2229, i64 48
  %2236 = load <16 x i16>, ptr %2235, align 2, !tbaa !44
  %2237 = getelementptr inbounds i16, ptr %2212, i64 %2228
  store <16 x i16> %2230, ptr %2237, align 2, !tbaa !44
  %2238 = getelementptr inbounds i16, ptr %2237, i64 16
  store <16 x i16> %2232, ptr %2238, align 2, !tbaa !44
  %2239 = getelementptr inbounds i16, ptr %2237, i64 32
  store <16 x i16> %2234, ptr %2239, align 2, !tbaa !44
  %2240 = getelementptr inbounds i16, ptr %2237, i64 48
  store <16 x i16> %2236, ptr %2240, align 2, !tbaa !44
  %2241 = add nuw i64 %2228, 64
  %2242 = icmp eq i64 %2241, %2226
  br i1 %2242, label %2243, label %2227, !llvm.loop !276

2243:                                             ; preds = %2227
  %2244 = icmp eq i64 %2225, 0
  br i1 %2244, label %2298, label %2245

2245:                                             ; preds = %2243
  %2246 = icmp ult i64 %2225, 8
  br i1 %2246, label %2260, label %2247

2247:                                             ; preds = %2222, %2245
  %2248 = phi i64 [ %2226, %2245 ], [ 0, %2222 ]
  %2249 = and i64 %2208, 7
  %2250 = sub nsw i64 %2215, %2249
  br label %2251

2251:                                             ; preds = %2251, %2247
  %2252 = phi i64 [ %2248, %2247 ], [ %2256, %2251 ]
  %2253 = getelementptr inbounds i16, ptr %442, i64 %2252
  %2254 = load <8 x i16>, ptr %2253, align 2, !tbaa !44
  %2255 = getelementptr inbounds i16, ptr %2212, i64 %2252
  store <8 x i16> %2254, ptr %2255, align 2, !tbaa !44
  %2256 = add nuw i64 %2252, 8
  %2257 = icmp eq i64 %2256, %2250
  br i1 %2257, label %2258, label %2251, !llvm.loop !277

2258:                                             ; preds = %2251
  %2259 = icmp eq i64 %2249, 0
  br i1 %2259, label %2298, label %2260

2260:                                             ; preds = %2217, %2214, %2245, %2258
  %2261 = phi i64 [ 0, %2214 ], [ 0, %2217 ], [ %2226, %2245 ], [ %2250, %2258 ]
  %2262 = sub i64 %2208, %2261
  %2263 = xor i64 %2261, -1
  %2264 = add nsw i64 %2215, %2263
  %2265 = and i64 %2262, 3
  %2266 = icmp eq i64 %2265, 0
  br i1 %2266, label %2276, label %2267

2267:                                             ; preds = %2260, %2267
  %2268 = phi i64 [ %2273, %2267 ], [ %2261, %2260 ]
  %2269 = phi i64 [ %2274, %2267 ], [ 0, %2260 ]
  %2270 = getelementptr inbounds i16, ptr %442, i64 %2268
  %2271 = load i16, ptr %2270, align 2, !tbaa !44
  %2272 = getelementptr inbounds i16, ptr %2212, i64 %2268
  store i16 %2271, ptr %2272, align 2, !tbaa !44
  %2273 = add nuw nsw i64 %2268, 1
  %2274 = add i64 %2269, 1
  %2275 = icmp eq i64 %2274, %2265
  br i1 %2275, label %2276, label %2267, !llvm.loop !278

2276:                                             ; preds = %2267, %2260
  %2277 = phi i64 [ %2261, %2260 ], [ %2273, %2267 ]
  %2278 = icmp ult i64 %2264, 3
  br i1 %2278, label %2298, label %2279

2279:                                             ; preds = %2276, %2279
  %2280 = phi i64 [ %2296, %2279 ], [ %2277, %2276 ]
  %2281 = getelementptr inbounds i16, ptr %442, i64 %2280
  %2282 = load i16, ptr %2281, align 2, !tbaa !44
  %2283 = getelementptr inbounds i16, ptr %2212, i64 %2280
  store i16 %2282, ptr %2283, align 2, !tbaa !44
  %2284 = add nuw nsw i64 %2280, 1
  %2285 = getelementptr inbounds i16, ptr %442, i64 %2284
  %2286 = load i16, ptr %2285, align 2, !tbaa !44
  %2287 = getelementptr inbounds i16, ptr %2212, i64 %2284
  store i16 %2286, ptr %2287, align 2, !tbaa !44
  %2288 = add nuw nsw i64 %2280, 2
  %2289 = getelementptr inbounds i16, ptr %442, i64 %2288
  %2290 = load i16, ptr %2289, align 2, !tbaa !44
  %2291 = getelementptr inbounds i16, ptr %2212, i64 %2288
  store i16 %2290, ptr %2291, align 2, !tbaa !44
  %2292 = add nuw nsw i64 %2280, 3
  %2293 = getelementptr inbounds i16, ptr %442, i64 %2292
  %2294 = load i16, ptr %2293, align 2, !tbaa !44
  %2295 = getelementptr inbounds i16, ptr %2212, i64 %2292
  store i16 %2294, ptr %2295, align 2, !tbaa !44
  %2296 = add nuw nsw i64 %2280, 4
  %2297 = icmp eq i64 %2296, %2215
  br i1 %2297, label %2298, label %2279, !llvm.loop !279

2298:                                             ; preds = %2276, %2279, %2243, %2258
  %2299 = shl i64 %2207, 31
  %2300 = add i64 %2299, -4294967296
  %2301 = ashr i64 %2300, 32
  %2302 = getelementptr inbounds i16, ptr %2212, i64 %2301
  %2303 = load i16, ptr %2302, align 2, !tbaa !44
  br label %2304

2304:                                             ; preds = %2195, %2298
  %2305 = phi i64 [ %2208, %2298 ], [ 0, %2195 ]
  %2306 = phi i16 [ %2303, %2298 ], [ -1, %2195 ]
  %2307 = and i64 %2305, 4294967295
  %2308 = getelementptr inbounds i16, ptr %2212, i64 %2307
  store i16 %2306, ptr %2308, align 2, !tbaa !44
  %2309 = trunc i64 %2208 to i16
  %2310 = add i16 %2309, 1
  %2311 = sext i32 %2205 to i64
  %2312 = getelementptr inbounds i16, ptr %1647, i64 %2311
  store i16 %2310, ptr %2312, align 2, !tbaa !44
  %2313 = add nsw i32 %2209, 2
  %2314 = add nsw i32 %2313, %2205
  %2315 = ptrtoint ptr %2071 to i64
  %2316 = sub i64 %2315, %993
  %2317 = lshr exact i64 %2316, 1
  %2318 = trunc i64 %2317 to i32
  %2319 = add nsw i32 %2314, 1
  %2320 = sext i32 %2319 to i64
  %2321 = getelementptr i16, ptr %1647, i64 %2320
  %2322 = icmp sgt i32 %2318, 0
  br i1 %2322, label %2323, label %2413

2323:                                             ; preds = %2304
  %2324 = and i64 %2317, 4294967295
  %2325 = icmp ult i64 %2324, 8
  br i1 %2325, label %2369, label %2326

2326:                                             ; preds = %2323
  %2327 = shl nsw i64 %2320, 1
  %2328 = add i64 %2327, %1648
  %2329 = sub i64 %2328, %993
  %2330 = icmp ult i64 %2329, 128
  br i1 %2330, label %2369, label %2331

2331:                                             ; preds = %2326
  %2332 = icmp ult i64 %2324, 64
  br i1 %2332, label %2356, label %2333

2333:                                             ; preds = %2331
  %2334 = and i64 %2317, 63
  %2335 = sub nsw i64 %2324, %2334
  br label %2336

2336:                                             ; preds = %2336, %2333
  %2337 = phi i64 [ 0, %2333 ], [ %2350, %2336 ]
  %2338 = getelementptr inbounds i16, ptr %580, i64 %2337
  %2339 = load <16 x i16>, ptr %2338, align 2, !tbaa !44
  %2340 = getelementptr inbounds i16, ptr %2338, i64 16
  %2341 = load <16 x i16>, ptr %2340, align 2, !tbaa !44
  %2342 = getelementptr inbounds i16, ptr %2338, i64 32
  %2343 = load <16 x i16>, ptr %2342, align 2, !tbaa !44
  %2344 = getelementptr inbounds i16, ptr %2338, i64 48
  %2345 = load <16 x i16>, ptr %2344, align 2, !tbaa !44
  %2346 = getelementptr inbounds i16, ptr %2321, i64 %2337
  store <16 x i16> %2339, ptr %2346, align 2, !tbaa !44
  %2347 = getelementptr inbounds i16, ptr %2346, i64 16
  store <16 x i16> %2341, ptr %2347, align 2, !tbaa !44
  %2348 = getelementptr inbounds i16, ptr %2346, i64 32
  store <16 x i16> %2343, ptr %2348, align 2, !tbaa !44
  %2349 = getelementptr inbounds i16, ptr %2346, i64 48
  store <16 x i16> %2345, ptr %2349, align 2, !tbaa !44
  %2350 = add nuw i64 %2337, 64
  %2351 = icmp eq i64 %2350, %2335
  br i1 %2351, label %2352, label %2336, !llvm.loop !280

2352:                                             ; preds = %2336
  %2353 = icmp eq i64 %2334, 0
  br i1 %2353, label %2407, label %2354

2354:                                             ; preds = %2352
  %2355 = icmp ult i64 %2334, 8
  br i1 %2355, label %2369, label %2356

2356:                                             ; preds = %2331, %2354
  %2357 = phi i64 [ %2335, %2354 ], [ 0, %2331 ]
  %2358 = and i64 %2317, 7
  %2359 = sub nsw i64 %2324, %2358
  br label %2360

2360:                                             ; preds = %2360, %2356
  %2361 = phi i64 [ %2357, %2356 ], [ %2365, %2360 ]
  %2362 = getelementptr inbounds i16, ptr %580, i64 %2361
  %2363 = load <8 x i16>, ptr %2362, align 2, !tbaa !44
  %2364 = getelementptr inbounds i16, ptr %2321, i64 %2361
  store <8 x i16> %2363, ptr %2364, align 2, !tbaa !44
  %2365 = add nuw i64 %2361, 8
  %2366 = icmp eq i64 %2365, %2359
  br i1 %2366, label %2367, label %2360, !llvm.loop !281

2367:                                             ; preds = %2360
  %2368 = icmp eq i64 %2358, 0
  br i1 %2368, label %2407, label %2369

2369:                                             ; preds = %2326, %2323, %2354, %2367
  %2370 = phi i64 [ 0, %2323 ], [ 0, %2326 ], [ %2335, %2354 ], [ %2359, %2367 ]
  %2371 = sub i64 %2317, %2370
  %2372 = xor i64 %2370, -1
  %2373 = add nsw i64 %2324, %2372
  %2374 = and i64 %2371, 3
  %2375 = icmp eq i64 %2374, 0
  br i1 %2375, label %2385, label %2376

2376:                                             ; preds = %2369, %2376
  %2377 = phi i64 [ %2382, %2376 ], [ %2370, %2369 ]
  %2378 = phi i64 [ %2383, %2376 ], [ 0, %2369 ]
  %2379 = getelementptr inbounds i16, ptr %580, i64 %2377
  %2380 = load i16, ptr %2379, align 2, !tbaa !44
  %2381 = getelementptr inbounds i16, ptr %2321, i64 %2377
  store i16 %2380, ptr %2381, align 2, !tbaa !44
  %2382 = add nuw nsw i64 %2377, 1
  %2383 = add i64 %2378, 1
  %2384 = icmp eq i64 %2383, %2374
  br i1 %2384, label %2385, label %2376, !llvm.loop !282

2385:                                             ; preds = %2376, %2369
  %2386 = phi i64 [ %2370, %2369 ], [ %2382, %2376 ]
  %2387 = icmp ult i64 %2373, 3
  br i1 %2387, label %2407, label %2388

2388:                                             ; preds = %2385, %2388
  %2389 = phi i64 [ %2405, %2388 ], [ %2386, %2385 ]
  %2390 = getelementptr inbounds i16, ptr %580, i64 %2389
  %2391 = load i16, ptr %2390, align 2, !tbaa !44
  %2392 = getelementptr inbounds i16, ptr %2321, i64 %2389
  store i16 %2391, ptr %2392, align 2, !tbaa !44
  %2393 = add nuw nsw i64 %2389, 1
  %2394 = getelementptr inbounds i16, ptr %580, i64 %2393
  %2395 = load i16, ptr %2394, align 2, !tbaa !44
  %2396 = getelementptr inbounds i16, ptr %2321, i64 %2393
  store i16 %2395, ptr %2396, align 2, !tbaa !44
  %2397 = add nuw nsw i64 %2389, 2
  %2398 = getelementptr inbounds i16, ptr %580, i64 %2397
  %2399 = load i16, ptr %2398, align 2, !tbaa !44
  %2400 = getelementptr inbounds i16, ptr %2321, i64 %2397
  store i16 %2399, ptr %2400, align 2, !tbaa !44
  %2401 = add nuw nsw i64 %2389, 3
  %2402 = getelementptr inbounds i16, ptr %580, i64 %2401
  %2403 = load i16, ptr %2402, align 2, !tbaa !44
  %2404 = getelementptr inbounds i16, ptr %2321, i64 %2401
  store i16 %2403, ptr %2404, align 2, !tbaa !44
  %2405 = add nuw nsw i64 %2389, 4
  %2406 = icmp eq i64 %2405, %2324
  br i1 %2406, label %2407, label %2388, !llvm.loop !283

2407:                                             ; preds = %2385, %2388, %2352, %2367
  %2408 = shl i64 %2316, 31
  %2409 = add i64 %2408, -4294967296
  %2410 = ashr i64 %2409, 32
  %2411 = getelementptr inbounds i16, ptr %2321, i64 %2410
  %2412 = load i16, ptr %2411, align 2, !tbaa !44
  br label %2413

2413:                                             ; preds = %2304, %2407
  %2414 = phi i64 [ %2317, %2407 ], [ 0, %2304 ]
  %2415 = phi i16 [ %2412, %2407 ], [ -1, %2304 ]
  %2416 = and i64 %2414, 4294967295
  %2417 = getelementptr inbounds i16, ptr %2321, i64 %2416
  store i16 %2415, ptr %2417, align 2, !tbaa !44
  %2418 = trunc i64 %2317 to i16
  %2419 = add i16 %2418, 1
  %2420 = sext i32 %2314 to i64
  %2421 = getelementptr inbounds i16, ptr %1647, i64 %2420
  store i16 %2419, ptr %2421, align 2, !tbaa !44
  %2422 = add nsw i32 %2318, 2
  %2423 = add nsw i32 %2422, %2314
  %2424 = ptrtoint ptr %2070 to i64
  %2425 = sub i64 %2424, %994
  %2426 = lshr exact i64 %2425, 1
  %2427 = trunc i64 %2426 to i32
  %2428 = add nsw i32 %2423, 1
  %2429 = sext i32 %2428 to i64
  %2430 = getelementptr i16, ptr %1647, i64 %2429
  %2431 = icmp sgt i32 %2427, 0
  br i1 %2431, label %2432, label %2522

2432:                                             ; preds = %2413
  %2433 = and i64 %2426, 4294967295
  %2434 = icmp ult i64 %2433, 8
  br i1 %2434, label %2478, label %2435

2435:                                             ; preds = %2432
  %2436 = shl nsw i64 %2429, 1
  %2437 = add i64 %2436, %1648
  %2438 = sub i64 %2437, %994
  %2439 = icmp ult i64 %2438, 128
  br i1 %2439, label %2478, label %2440

2440:                                             ; preds = %2435
  %2441 = icmp ult i64 %2433, 64
  br i1 %2441, label %2465, label %2442

2442:                                             ; preds = %2440
  %2443 = and i64 %2426, 63
  %2444 = sub nsw i64 %2433, %2443
  br label %2445

2445:                                             ; preds = %2445, %2442
  %2446 = phi i64 [ 0, %2442 ], [ %2459, %2445 ]
  %2447 = getelementptr inbounds i16, ptr %626, i64 %2446
  %2448 = load <16 x i16>, ptr %2447, align 2, !tbaa !44
  %2449 = getelementptr inbounds i16, ptr %2447, i64 16
  %2450 = load <16 x i16>, ptr %2449, align 2, !tbaa !44
  %2451 = getelementptr inbounds i16, ptr %2447, i64 32
  %2452 = load <16 x i16>, ptr %2451, align 2, !tbaa !44
  %2453 = getelementptr inbounds i16, ptr %2447, i64 48
  %2454 = load <16 x i16>, ptr %2453, align 2, !tbaa !44
  %2455 = getelementptr inbounds i16, ptr %2430, i64 %2446
  store <16 x i16> %2448, ptr %2455, align 2, !tbaa !44
  %2456 = getelementptr inbounds i16, ptr %2455, i64 16
  store <16 x i16> %2450, ptr %2456, align 2, !tbaa !44
  %2457 = getelementptr inbounds i16, ptr %2455, i64 32
  store <16 x i16> %2452, ptr %2457, align 2, !tbaa !44
  %2458 = getelementptr inbounds i16, ptr %2455, i64 48
  store <16 x i16> %2454, ptr %2458, align 2, !tbaa !44
  %2459 = add nuw i64 %2446, 64
  %2460 = icmp eq i64 %2459, %2444
  br i1 %2460, label %2461, label %2445, !llvm.loop !284

2461:                                             ; preds = %2445
  %2462 = icmp eq i64 %2443, 0
  br i1 %2462, label %2516, label %2463

2463:                                             ; preds = %2461
  %2464 = icmp ult i64 %2443, 8
  br i1 %2464, label %2478, label %2465

2465:                                             ; preds = %2440, %2463
  %2466 = phi i64 [ %2444, %2463 ], [ 0, %2440 ]
  %2467 = and i64 %2426, 7
  %2468 = sub nsw i64 %2433, %2467
  br label %2469

2469:                                             ; preds = %2469, %2465
  %2470 = phi i64 [ %2466, %2465 ], [ %2474, %2469 ]
  %2471 = getelementptr inbounds i16, ptr %626, i64 %2470
  %2472 = load <8 x i16>, ptr %2471, align 2, !tbaa !44
  %2473 = getelementptr inbounds i16, ptr %2430, i64 %2470
  store <8 x i16> %2472, ptr %2473, align 2, !tbaa !44
  %2474 = add nuw i64 %2470, 8
  %2475 = icmp eq i64 %2474, %2468
  br i1 %2475, label %2476, label %2469, !llvm.loop !285

2476:                                             ; preds = %2469
  %2477 = icmp eq i64 %2467, 0
  br i1 %2477, label %2516, label %2478

2478:                                             ; preds = %2435, %2432, %2463, %2476
  %2479 = phi i64 [ 0, %2432 ], [ 0, %2435 ], [ %2444, %2463 ], [ %2468, %2476 ]
  %2480 = sub i64 %2426, %2479
  %2481 = xor i64 %2479, -1
  %2482 = add nsw i64 %2433, %2481
  %2483 = and i64 %2480, 3
  %2484 = icmp eq i64 %2483, 0
  br i1 %2484, label %2494, label %2485

2485:                                             ; preds = %2478, %2485
  %2486 = phi i64 [ %2491, %2485 ], [ %2479, %2478 ]
  %2487 = phi i64 [ %2492, %2485 ], [ 0, %2478 ]
  %2488 = getelementptr inbounds i16, ptr %626, i64 %2486
  %2489 = load i16, ptr %2488, align 2, !tbaa !44
  %2490 = getelementptr inbounds i16, ptr %2430, i64 %2486
  store i16 %2489, ptr %2490, align 2, !tbaa !44
  %2491 = add nuw nsw i64 %2486, 1
  %2492 = add i64 %2487, 1
  %2493 = icmp eq i64 %2492, %2483
  br i1 %2493, label %2494, label %2485, !llvm.loop !286

2494:                                             ; preds = %2485, %2478
  %2495 = phi i64 [ %2479, %2478 ], [ %2491, %2485 ]
  %2496 = icmp ult i64 %2482, 3
  br i1 %2496, label %2516, label %2497

2497:                                             ; preds = %2494, %2497
  %2498 = phi i64 [ %2514, %2497 ], [ %2495, %2494 ]
  %2499 = getelementptr inbounds i16, ptr %626, i64 %2498
  %2500 = load i16, ptr %2499, align 2, !tbaa !44
  %2501 = getelementptr inbounds i16, ptr %2430, i64 %2498
  store i16 %2500, ptr %2501, align 2, !tbaa !44
  %2502 = add nuw nsw i64 %2498, 1
  %2503 = getelementptr inbounds i16, ptr %626, i64 %2502
  %2504 = load i16, ptr %2503, align 2, !tbaa !44
  %2505 = getelementptr inbounds i16, ptr %2430, i64 %2502
  store i16 %2504, ptr %2505, align 2, !tbaa !44
  %2506 = add nuw nsw i64 %2498, 2
  %2507 = getelementptr inbounds i16, ptr %626, i64 %2506
  %2508 = load i16, ptr %2507, align 2, !tbaa !44
  %2509 = getelementptr inbounds i16, ptr %2430, i64 %2506
  store i16 %2508, ptr %2509, align 2, !tbaa !44
  %2510 = add nuw nsw i64 %2498, 3
  %2511 = getelementptr inbounds i16, ptr %626, i64 %2510
  %2512 = load i16, ptr %2511, align 2, !tbaa !44
  %2513 = getelementptr inbounds i16, ptr %2430, i64 %2510
  store i16 %2512, ptr %2513, align 2, !tbaa !44
  %2514 = add nuw nsw i64 %2498, 4
  %2515 = icmp eq i64 %2514, %2433
  br i1 %2515, label %2516, label %2497, !llvm.loop !287

2516:                                             ; preds = %2494, %2497, %2461, %2476
  %2517 = shl i64 %2425, 31
  %2518 = add i64 %2517, -4294967296
  %2519 = ashr i64 %2518, 32
  %2520 = getelementptr inbounds i16, ptr %2430, i64 %2519
  %2521 = load i16, ptr %2520, align 2, !tbaa !44
  br label %2522

2522:                                             ; preds = %2413, %2516
  %2523 = phi i64 [ %2426, %2516 ], [ 0, %2413 ]
  %2524 = phi i16 [ %2521, %2516 ], [ -1, %2413 ]
  %2525 = and i64 %2523, 4294967295
  %2526 = getelementptr inbounds i16, ptr %2430, i64 %2525
  store i16 %2524, ptr %2526, align 2, !tbaa !44
  %2527 = trunc i64 %2426 to i16
  %2528 = add i16 %2527, 1
  %2529 = sext i32 %2423 to i64
  %2530 = getelementptr inbounds i16, ptr %1647, i64 %2529
  store i16 %2528, ptr %2530, align 2, !tbaa !44
  %2531 = add nsw i32 %2427, 2
  %2532 = add nsw i32 %2531, %2423
  store i32 %2532, ptr %17, align 8, !tbaa !17
  %2533 = ptrtoint ptr %2069 to i64
  %2534 = sub i64 %2533, %995
  %2535 = lshr exact i64 %2534, 1
  %2536 = trunc i64 %2535 to i32
  %2537 = add nsw i32 %2532, 1
  %2538 = sext i32 %2537 to i64
  %2539 = getelementptr i16, ptr %1647, i64 %2538
  %2540 = icmp sgt i32 %2536, 0
  br i1 %2540, label %2541, label %2631

2541:                                             ; preds = %2522
  %2542 = and i64 %2535, 4294967295
  %2543 = icmp ult i64 %2542, 8
  br i1 %2543, label %2587, label %2544

2544:                                             ; preds = %2541
  %2545 = shl nsw i64 %2538, 1
  %2546 = add i64 %2545, %1648
  %2547 = sub i64 %2546, %995
  %2548 = icmp ult i64 %2547, 128
  br i1 %2548, label %2587, label %2549

2549:                                             ; preds = %2544
  %2550 = icmp ult i64 %2542, 64
  br i1 %2550, label %2574, label %2551

2551:                                             ; preds = %2549
  %2552 = and i64 %2535, 63
  %2553 = sub nsw i64 %2542, %2552
  br label %2554

2554:                                             ; preds = %2554, %2551
  %2555 = phi i64 [ 0, %2551 ], [ %2568, %2554 ]
  %2556 = getelementptr inbounds i16, ptr %672, i64 %2555
  %2557 = load <16 x i16>, ptr %2556, align 2, !tbaa !44
  %2558 = getelementptr inbounds i16, ptr %2556, i64 16
  %2559 = load <16 x i16>, ptr %2558, align 2, !tbaa !44
  %2560 = getelementptr inbounds i16, ptr %2556, i64 32
  %2561 = load <16 x i16>, ptr %2560, align 2, !tbaa !44
  %2562 = getelementptr inbounds i16, ptr %2556, i64 48
  %2563 = load <16 x i16>, ptr %2562, align 2, !tbaa !44
  %2564 = getelementptr inbounds i16, ptr %2539, i64 %2555
  store <16 x i16> %2557, ptr %2564, align 2, !tbaa !44
  %2565 = getelementptr inbounds i16, ptr %2564, i64 16
  store <16 x i16> %2559, ptr %2565, align 2, !tbaa !44
  %2566 = getelementptr inbounds i16, ptr %2564, i64 32
  store <16 x i16> %2561, ptr %2566, align 2, !tbaa !44
  %2567 = getelementptr inbounds i16, ptr %2564, i64 48
  store <16 x i16> %2563, ptr %2567, align 2, !tbaa !44
  %2568 = add nuw i64 %2555, 64
  %2569 = icmp eq i64 %2568, %2553
  br i1 %2569, label %2570, label %2554, !llvm.loop !288

2570:                                             ; preds = %2554
  %2571 = icmp eq i64 %2552, 0
  br i1 %2571, label %2625, label %2572

2572:                                             ; preds = %2570
  %2573 = icmp ult i64 %2552, 8
  br i1 %2573, label %2587, label %2574

2574:                                             ; preds = %2549, %2572
  %2575 = phi i64 [ %2553, %2572 ], [ 0, %2549 ]
  %2576 = and i64 %2535, 7
  %2577 = sub nsw i64 %2542, %2576
  br label %2578

2578:                                             ; preds = %2578, %2574
  %2579 = phi i64 [ %2575, %2574 ], [ %2583, %2578 ]
  %2580 = getelementptr inbounds i16, ptr %672, i64 %2579
  %2581 = load <8 x i16>, ptr %2580, align 2, !tbaa !44
  %2582 = getelementptr inbounds i16, ptr %2539, i64 %2579
  store <8 x i16> %2581, ptr %2582, align 2, !tbaa !44
  %2583 = add nuw i64 %2579, 8
  %2584 = icmp eq i64 %2583, %2577
  br i1 %2584, label %2585, label %2578, !llvm.loop !289

2585:                                             ; preds = %2578
  %2586 = icmp eq i64 %2576, 0
  br i1 %2586, label %2625, label %2587

2587:                                             ; preds = %2544, %2541, %2572, %2585
  %2588 = phi i64 [ 0, %2541 ], [ 0, %2544 ], [ %2553, %2572 ], [ %2577, %2585 ]
  %2589 = sub i64 %2535, %2588
  %2590 = xor i64 %2588, -1
  %2591 = add nsw i64 %2542, %2590
  %2592 = and i64 %2589, 3
  %2593 = icmp eq i64 %2592, 0
  br i1 %2593, label %2603, label %2594

2594:                                             ; preds = %2587, %2594
  %2595 = phi i64 [ %2600, %2594 ], [ %2588, %2587 ]
  %2596 = phi i64 [ %2601, %2594 ], [ 0, %2587 ]
  %2597 = getelementptr inbounds i16, ptr %672, i64 %2595
  %2598 = load i16, ptr %2597, align 2, !tbaa !44
  %2599 = getelementptr inbounds i16, ptr %2539, i64 %2595
  store i16 %2598, ptr %2599, align 2, !tbaa !44
  %2600 = add nuw nsw i64 %2595, 1
  %2601 = add i64 %2596, 1
  %2602 = icmp eq i64 %2601, %2592
  br i1 %2602, label %2603, label %2594, !llvm.loop !290

2603:                                             ; preds = %2594, %2587
  %2604 = phi i64 [ %2588, %2587 ], [ %2600, %2594 ]
  %2605 = icmp ult i64 %2591, 3
  br i1 %2605, label %2625, label %2606

2606:                                             ; preds = %2603, %2606
  %2607 = phi i64 [ %2623, %2606 ], [ %2604, %2603 ]
  %2608 = getelementptr inbounds i16, ptr %672, i64 %2607
  %2609 = load i16, ptr %2608, align 2, !tbaa !44
  %2610 = getelementptr inbounds i16, ptr %2539, i64 %2607
  store i16 %2609, ptr %2610, align 2, !tbaa !44
  %2611 = add nuw nsw i64 %2607, 1
  %2612 = getelementptr inbounds i16, ptr %672, i64 %2611
  %2613 = load i16, ptr %2612, align 2, !tbaa !44
  %2614 = getelementptr inbounds i16, ptr %2539, i64 %2611
  store i16 %2613, ptr %2614, align 2, !tbaa !44
  %2615 = add nuw nsw i64 %2607, 2
  %2616 = getelementptr inbounds i16, ptr %672, i64 %2615
  %2617 = load i16, ptr %2616, align 2, !tbaa !44
  %2618 = getelementptr inbounds i16, ptr %2539, i64 %2615
  store i16 %2617, ptr %2618, align 2, !tbaa !44
  %2619 = add nuw nsw i64 %2607, 3
  %2620 = getelementptr inbounds i16, ptr %672, i64 %2619
  %2621 = load i16, ptr %2620, align 2, !tbaa !44
  %2622 = getelementptr inbounds i16, ptr %2539, i64 %2619
  store i16 %2621, ptr %2622, align 2, !tbaa !44
  %2623 = add nuw nsw i64 %2607, 4
  %2624 = icmp eq i64 %2623, %2542
  br i1 %2624, label %2625, label %2606, !llvm.loop !291

2625:                                             ; preds = %2603, %2606, %2570, %2585
  %2626 = shl i64 %2534, 31
  %2627 = add i64 %2626, -4294967296
  %2628 = ashr i64 %2627, 32
  %2629 = getelementptr inbounds i16, ptr %2539, i64 %2628
  %2630 = load i16, ptr %2629, align 2, !tbaa !44
  br label %2631

2631:                                             ; preds = %2522, %2625
  %2632 = phi i64 [ %2535, %2625 ], [ 0, %2522 ]
  %2633 = phi i16 [ %2630, %2625 ], [ -1, %2522 ]
  %2634 = and i64 %2632, 4294967295
  %2635 = getelementptr inbounds i16, ptr %2539, i64 %2634
  store i16 %2633, ptr %2635, align 2, !tbaa !44
  %2636 = trunc i64 %2535 to i16
  %2637 = add i16 %2636, 1
  %2638 = sext i32 %2532 to i64
  %2639 = getelementptr inbounds i16, ptr %1647, i64 %2638
  store i16 %2637, ptr %2639, align 2, !tbaa !44
  %2640 = add nsw i32 %2536, 2
  %2641 = add nsw i32 %2640, %2532
  %2642 = ptrtoint ptr %2068 to i64
  %2643 = sub i64 %2642, %996
  %2644 = lshr exact i64 %2643, 1
  %2645 = trunc i64 %2644 to i32
  %2646 = add nsw i32 %2641, 1
  %2647 = sext i32 %2646 to i64
  %2648 = getelementptr i16, ptr %1647, i64 %2647
  %2649 = icmp sgt i32 %2645, 0
  br i1 %2649, label %2650, label %2740

2650:                                             ; preds = %2631
  %2651 = and i64 %2644, 4294967295
  %2652 = icmp ult i64 %2651, 8
  br i1 %2652, label %2696, label %2653

2653:                                             ; preds = %2650
  %2654 = shl nsw i64 %2647, 1
  %2655 = add i64 %2654, %1648
  %2656 = sub i64 %2655, %996
  %2657 = icmp ult i64 %2656, 128
  br i1 %2657, label %2696, label %2658

2658:                                             ; preds = %2653
  %2659 = icmp ult i64 %2651, 64
  br i1 %2659, label %2683, label %2660

2660:                                             ; preds = %2658
  %2661 = and i64 %2644, 63
  %2662 = sub nsw i64 %2651, %2661
  br label %2663

2663:                                             ; preds = %2663, %2660
  %2664 = phi i64 [ 0, %2660 ], [ %2677, %2663 ]
  %2665 = getelementptr inbounds i16, ptr %718, i64 %2664
  %2666 = load <16 x i16>, ptr %2665, align 2, !tbaa !44
  %2667 = getelementptr inbounds i16, ptr %2665, i64 16
  %2668 = load <16 x i16>, ptr %2667, align 2, !tbaa !44
  %2669 = getelementptr inbounds i16, ptr %2665, i64 32
  %2670 = load <16 x i16>, ptr %2669, align 2, !tbaa !44
  %2671 = getelementptr inbounds i16, ptr %2665, i64 48
  %2672 = load <16 x i16>, ptr %2671, align 2, !tbaa !44
  %2673 = getelementptr inbounds i16, ptr %2648, i64 %2664
  store <16 x i16> %2666, ptr %2673, align 2, !tbaa !44
  %2674 = getelementptr inbounds i16, ptr %2673, i64 16
  store <16 x i16> %2668, ptr %2674, align 2, !tbaa !44
  %2675 = getelementptr inbounds i16, ptr %2673, i64 32
  store <16 x i16> %2670, ptr %2675, align 2, !tbaa !44
  %2676 = getelementptr inbounds i16, ptr %2673, i64 48
  store <16 x i16> %2672, ptr %2676, align 2, !tbaa !44
  %2677 = add nuw i64 %2664, 64
  %2678 = icmp eq i64 %2677, %2662
  br i1 %2678, label %2679, label %2663, !llvm.loop !292

2679:                                             ; preds = %2663
  %2680 = icmp eq i64 %2661, 0
  br i1 %2680, label %2734, label %2681

2681:                                             ; preds = %2679
  %2682 = icmp ult i64 %2661, 8
  br i1 %2682, label %2696, label %2683

2683:                                             ; preds = %2658, %2681
  %2684 = phi i64 [ %2662, %2681 ], [ 0, %2658 ]
  %2685 = and i64 %2644, 7
  %2686 = sub nsw i64 %2651, %2685
  br label %2687

2687:                                             ; preds = %2687, %2683
  %2688 = phi i64 [ %2684, %2683 ], [ %2692, %2687 ]
  %2689 = getelementptr inbounds i16, ptr %718, i64 %2688
  %2690 = load <8 x i16>, ptr %2689, align 2, !tbaa !44
  %2691 = getelementptr inbounds i16, ptr %2648, i64 %2688
  store <8 x i16> %2690, ptr %2691, align 2, !tbaa !44
  %2692 = add nuw i64 %2688, 8
  %2693 = icmp eq i64 %2692, %2686
  br i1 %2693, label %2694, label %2687, !llvm.loop !293

2694:                                             ; preds = %2687
  %2695 = icmp eq i64 %2685, 0
  br i1 %2695, label %2734, label %2696

2696:                                             ; preds = %2653, %2650, %2681, %2694
  %2697 = phi i64 [ 0, %2650 ], [ 0, %2653 ], [ %2662, %2681 ], [ %2686, %2694 ]
  %2698 = sub i64 %2644, %2697
  %2699 = xor i64 %2697, -1
  %2700 = add nsw i64 %2651, %2699
  %2701 = and i64 %2698, 3
  %2702 = icmp eq i64 %2701, 0
  br i1 %2702, label %2712, label %2703

2703:                                             ; preds = %2696, %2703
  %2704 = phi i64 [ %2709, %2703 ], [ %2697, %2696 ]
  %2705 = phi i64 [ %2710, %2703 ], [ 0, %2696 ]
  %2706 = getelementptr inbounds i16, ptr %718, i64 %2704
  %2707 = load i16, ptr %2706, align 2, !tbaa !44
  %2708 = getelementptr inbounds i16, ptr %2648, i64 %2704
  store i16 %2707, ptr %2708, align 2, !tbaa !44
  %2709 = add nuw nsw i64 %2704, 1
  %2710 = add i64 %2705, 1
  %2711 = icmp eq i64 %2710, %2701
  br i1 %2711, label %2712, label %2703, !llvm.loop !294

2712:                                             ; preds = %2703, %2696
  %2713 = phi i64 [ %2697, %2696 ], [ %2709, %2703 ]
  %2714 = icmp ult i64 %2700, 3
  br i1 %2714, label %2734, label %2715

2715:                                             ; preds = %2712, %2715
  %2716 = phi i64 [ %2732, %2715 ], [ %2713, %2712 ]
  %2717 = getelementptr inbounds i16, ptr %718, i64 %2716
  %2718 = load i16, ptr %2717, align 2, !tbaa !44
  %2719 = getelementptr inbounds i16, ptr %2648, i64 %2716
  store i16 %2718, ptr %2719, align 2, !tbaa !44
  %2720 = add nuw nsw i64 %2716, 1
  %2721 = getelementptr inbounds i16, ptr %718, i64 %2720
  %2722 = load i16, ptr %2721, align 2, !tbaa !44
  %2723 = getelementptr inbounds i16, ptr %2648, i64 %2720
  store i16 %2722, ptr %2723, align 2, !tbaa !44
  %2724 = add nuw nsw i64 %2716, 2
  %2725 = getelementptr inbounds i16, ptr %718, i64 %2724
  %2726 = load i16, ptr %2725, align 2, !tbaa !44
  %2727 = getelementptr inbounds i16, ptr %2648, i64 %2724
  store i16 %2726, ptr %2727, align 2, !tbaa !44
  %2728 = add nuw nsw i64 %2716, 3
  %2729 = getelementptr inbounds i16, ptr %718, i64 %2728
  %2730 = load i16, ptr %2729, align 2, !tbaa !44
  %2731 = getelementptr inbounds i16, ptr %2648, i64 %2728
  store i16 %2730, ptr %2731, align 2, !tbaa !44
  %2732 = add nuw nsw i64 %2716, 4
  %2733 = icmp eq i64 %2732, %2651
  br i1 %2733, label %2734, label %2715, !llvm.loop !295

2734:                                             ; preds = %2712, %2715, %2679, %2694
  %2735 = shl i64 %2643, 31
  %2736 = add i64 %2735, -4294967296
  %2737 = ashr i64 %2736, 32
  %2738 = getelementptr inbounds i16, ptr %2648, i64 %2737
  %2739 = load i16, ptr %2738, align 2, !tbaa !44
  br label %2740

2740:                                             ; preds = %2631, %2734
  %2741 = phi i64 [ %2644, %2734 ], [ 0, %2631 ]
  %2742 = phi i16 [ %2739, %2734 ], [ -1, %2631 ]
  %2743 = and i64 %2741, 4294967295
  %2744 = getelementptr inbounds i16, ptr %2648, i64 %2743
  store i16 %2742, ptr %2744, align 2, !tbaa !44
  %2745 = trunc i64 %2644 to i16
  %2746 = add i16 %2745, 1
  %2747 = sext i32 %2641 to i64
  %2748 = getelementptr inbounds i16, ptr %1647, i64 %2747
  store i16 %2746, ptr %2748, align 2, !tbaa !44
  %2749 = add nsw i32 %2645, 2
  %2750 = add nsw i32 %2749, %2641
  %2751 = ptrtoint ptr %2067 to i64
  %2752 = sub i64 %2751, %997
  %2753 = lshr exact i64 %2752, 1
  %2754 = trunc i64 %2753 to i32
  %2755 = add nsw i32 %2750, 1
  %2756 = sext i32 %2755 to i64
  %2757 = getelementptr i16, ptr %1647, i64 %2756
  %2758 = icmp sgt i32 %2754, 0
  br i1 %2758, label %2759, label %2849

2759:                                             ; preds = %2740
  %2760 = and i64 %2753, 4294967295
  %2761 = icmp ult i64 %2760, 8
  br i1 %2761, label %2805, label %2762

2762:                                             ; preds = %2759
  %2763 = shl nsw i64 %2756, 1
  %2764 = add i64 %2763, %1648
  %2765 = sub i64 %2764, %997
  %2766 = icmp ult i64 %2765, 128
  br i1 %2766, label %2805, label %2767

2767:                                             ; preds = %2762
  %2768 = icmp ult i64 %2760, 64
  br i1 %2768, label %2792, label %2769

2769:                                             ; preds = %2767
  %2770 = and i64 %2753, 63
  %2771 = sub nsw i64 %2760, %2770
  br label %2772

2772:                                             ; preds = %2772, %2769
  %2773 = phi i64 [ 0, %2769 ], [ %2786, %2772 ]
  %2774 = getelementptr inbounds i16, ptr %764, i64 %2773
  %2775 = load <16 x i16>, ptr %2774, align 2, !tbaa !44
  %2776 = getelementptr inbounds i16, ptr %2774, i64 16
  %2777 = load <16 x i16>, ptr %2776, align 2, !tbaa !44
  %2778 = getelementptr inbounds i16, ptr %2774, i64 32
  %2779 = load <16 x i16>, ptr %2778, align 2, !tbaa !44
  %2780 = getelementptr inbounds i16, ptr %2774, i64 48
  %2781 = load <16 x i16>, ptr %2780, align 2, !tbaa !44
  %2782 = getelementptr inbounds i16, ptr %2757, i64 %2773
  store <16 x i16> %2775, ptr %2782, align 2, !tbaa !44
  %2783 = getelementptr inbounds i16, ptr %2782, i64 16
  store <16 x i16> %2777, ptr %2783, align 2, !tbaa !44
  %2784 = getelementptr inbounds i16, ptr %2782, i64 32
  store <16 x i16> %2779, ptr %2784, align 2, !tbaa !44
  %2785 = getelementptr inbounds i16, ptr %2782, i64 48
  store <16 x i16> %2781, ptr %2785, align 2, !tbaa !44
  %2786 = add nuw i64 %2773, 64
  %2787 = icmp eq i64 %2786, %2771
  br i1 %2787, label %2788, label %2772, !llvm.loop !296

2788:                                             ; preds = %2772
  %2789 = icmp eq i64 %2770, 0
  br i1 %2789, label %2843, label %2790

2790:                                             ; preds = %2788
  %2791 = icmp ult i64 %2770, 8
  br i1 %2791, label %2805, label %2792

2792:                                             ; preds = %2767, %2790
  %2793 = phi i64 [ %2771, %2790 ], [ 0, %2767 ]
  %2794 = and i64 %2753, 7
  %2795 = sub nsw i64 %2760, %2794
  br label %2796

2796:                                             ; preds = %2796, %2792
  %2797 = phi i64 [ %2793, %2792 ], [ %2801, %2796 ]
  %2798 = getelementptr inbounds i16, ptr %764, i64 %2797
  %2799 = load <8 x i16>, ptr %2798, align 2, !tbaa !44
  %2800 = getelementptr inbounds i16, ptr %2757, i64 %2797
  store <8 x i16> %2799, ptr %2800, align 2, !tbaa !44
  %2801 = add nuw i64 %2797, 8
  %2802 = icmp eq i64 %2801, %2795
  br i1 %2802, label %2803, label %2796, !llvm.loop !297

2803:                                             ; preds = %2796
  %2804 = icmp eq i64 %2794, 0
  br i1 %2804, label %2843, label %2805

2805:                                             ; preds = %2762, %2759, %2790, %2803
  %2806 = phi i64 [ 0, %2759 ], [ 0, %2762 ], [ %2771, %2790 ], [ %2795, %2803 ]
  %2807 = sub i64 %2753, %2806
  %2808 = xor i64 %2806, -1
  %2809 = add nsw i64 %2760, %2808
  %2810 = and i64 %2807, 3
  %2811 = icmp eq i64 %2810, 0
  br i1 %2811, label %2821, label %2812

2812:                                             ; preds = %2805, %2812
  %2813 = phi i64 [ %2818, %2812 ], [ %2806, %2805 ]
  %2814 = phi i64 [ %2819, %2812 ], [ 0, %2805 ]
  %2815 = getelementptr inbounds i16, ptr %764, i64 %2813
  %2816 = load i16, ptr %2815, align 2, !tbaa !44
  %2817 = getelementptr inbounds i16, ptr %2757, i64 %2813
  store i16 %2816, ptr %2817, align 2, !tbaa !44
  %2818 = add nuw nsw i64 %2813, 1
  %2819 = add i64 %2814, 1
  %2820 = icmp eq i64 %2819, %2810
  br i1 %2820, label %2821, label %2812, !llvm.loop !298

2821:                                             ; preds = %2812, %2805
  %2822 = phi i64 [ %2806, %2805 ], [ %2818, %2812 ]
  %2823 = icmp ult i64 %2809, 3
  br i1 %2823, label %2843, label %2824

2824:                                             ; preds = %2821, %2824
  %2825 = phi i64 [ %2841, %2824 ], [ %2822, %2821 ]
  %2826 = getelementptr inbounds i16, ptr %764, i64 %2825
  %2827 = load i16, ptr %2826, align 2, !tbaa !44
  %2828 = getelementptr inbounds i16, ptr %2757, i64 %2825
  store i16 %2827, ptr %2828, align 2, !tbaa !44
  %2829 = add nuw nsw i64 %2825, 1
  %2830 = getelementptr inbounds i16, ptr %764, i64 %2829
  %2831 = load i16, ptr %2830, align 2, !tbaa !44
  %2832 = getelementptr inbounds i16, ptr %2757, i64 %2829
  store i16 %2831, ptr %2832, align 2, !tbaa !44
  %2833 = add nuw nsw i64 %2825, 2
  %2834 = getelementptr inbounds i16, ptr %764, i64 %2833
  %2835 = load i16, ptr %2834, align 2, !tbaa !44
  %2836 = getelementptr inbounds i16, ptr %2757, i64 %2833
  store i16 %2835, ptr %2836, align 2, !tbaa !44
  %2837 = add nuw nsw i64 %2825, 3
  %2838 = getelementptr inbounds i16, ptr %764, i64 %2837
  %2839 = load i16, ptr %2838, align 2, !tbaa !44
  %2840 = getelementptr inbounds i16, ptr %2757, i64 %2837
  store i16 %2839, ptr %2840, align 2, !tbaa !44
  %2841 = add nuw nsw i64 %2825, 4
  %2842 = icmp eq i64 %2841, %2760
  br i1 %2842, label %2843, label %2824, !llvm.loop !299

2843:                                             ; preds = %2821, %2824, %2788, %2803
  %2844 = shl i64 %2752, 31
  %2845 = add i64 %2844, -4294967296
  %2846 = ashr i64 %2845, 32
  %2847 = getelementptr inbounds i16, ptr %2757, i64 %2846
  %2848 = load i16, ptr %2847, align 2, !tbaa !44
  br label %2849

2849:                                             ; preds = %2740, %2843
  %2850 = phi i64 [ %2753, %2843 ], [ 0, %2740 ]
  %2851 = phi i16 [ %2848, %2843 ], [ -1, %2740 ]
  %2852 = and i64 %2850, 4294967295
  %2853 = getelementptr inbounds i16, ptr %2757, i64 %2852
  store i16 %2851, ptr %2853, align 2, !tbaa !44
  %2854 = trunc i64 %2753 to i16
  %2855 = add i16 %2854, 1
  %2856 = sext i32 %2750 to i64
  %2857 = getelementptr inbounds i16, ptr %1647, i64 %2856
  store i16 %2855, ptr %2857, align 2, !tbaa !44
  %2858 = add nsw i32 %2754, 2
  %2859 = add nsw i32 %2858, %2750
  %2860 = ptrtoint ptr %2066 to i64
  %2861 = sub i64 %2860, %998
  %2862 = lshr exact i64 %2861, 1
  %2863 = trunc i64 %2862 to i32
  %2864 = add nsw i32 %2859, 1
  %2865 = sext i32 %2864 to i64
  %2866 = getelementptr i16, ptr %1647, i64 %2865
  %2867 = icmp sgt i32 %2863, 0
  br i1 %2867, label %2868, label %2958

2868:                                             ; preds = %2849
  %2869 = and i64 %2862, 4294967295
  %2870 = icmp ult i64 %2869, 8
  br i1 %2870, label %2914, label %2871

2871:                                             ; preds = %2868
  %2872 = shl nsw i64 %2865, 1
  %2873 = add i64 %2872, %1648
  %2874 = sub i64 %2873, %998
  %2875 = icmp ult i64 %2874, 128
  br i1 %2875, label %2914, label %2876

2876:                                             ; preds = %2871
  %2877 = icmp ult i64 %2869, 64
  br i1 %2877, label %2901, label %2878

2878:                                             ; preds = %2876
  %2879 = and i64 %2862, 63
  %2880 = sub nsw i64 %2869, %2879
  br label %2881

2881:                                             ; preds = %2881, %2878
  %2882 = phi i64 [ 0, %2878 ], [ %2895, %2881 ]
  %2883 = getelementptr inbounds i16, ptr %810, i64 %2882
  %2884 = load <16 x i16>, ptr %2883, align 2, !tbaa !44
  %2885 = getelementptr inbounds i16, ptr %2883, i64 16
  %2886 = load <16 x i16>, ptr %2885, align 2, !tbaa !44
  %2887 = getelementptr inbounds i16, ptr %2883, i64 32
  %2888 = load <16 x i16>, ptr %2887, align 2, !tbaa !44
  %2889 = getelementptr inbounds i16, ptr %2883, i64 48
  %2890 = load <16 x i16>, ptr %2889, align 2, !tbaa !44
  %2891 = getelementptr inbounds i16, ptr %2866, i64 %2882
  store <16 x i16> %2884, ptr %2891, align 2, !tbaa !44
  %2892 = getelementptr inbounds i16, ptr %2891, i64 16
  store <16 x i16> %2886, ptr %2892, align 2, !tbaa !44
  %2893 = getelementptr inbounds i16, ptr %2891, i64 32
  store <16 x i16> %2888, ptr %2893, align 2, !tbaa !44
  %2894 = getelementptr inbounds i16, ptr %2891, i64 48
  store <16 x i16> %2890, ptr %2894, align 2, !tbaa !44
  %2895 = add nuw i64 %2882, 64
  %2896 = icmp eq i64 %2895, %2880
  br i1 %2896, label %2897, label %2881, !llvm.loop !300

2897:                                             ; preds = %2881
  %2898 = icmp eq i64 %2879, 0
  br i1 %2898, label %2952, label %2899

2899:                                             ; preds = %2897
  %2900 = icmp ult i64 %2879, 8
  br i1 %2900, label %2914, label %2901

2901:                                             ; preds = %2876, %2899
  %2902 = phi i64 [ %2880, %2899 ], [ 0, %2876 ]
  %2903 = and i64 %2862, 7
  %2904 = sub nsw i64 %2869, %2903
  br label %2905

2905:                                             ; preds = %2905, %2901
  %2906 = phi i64 [ %2902, %2901 ], [ %2910, %2905 ]
  %2907 = getelementptr inbounds i16, ptr %810, i64 %2906
  %2908 = load <8 x i16>, ptr %2907, align 2, !tbaa !44
  %2909 = getelementptr inbounds i16, ptr %2866, i64 %2906
  store <8 x i16> %2908, ptr %2909, align 2, !tbaa !44
  %2910 = add nuw i64 %2906, 8
  %2911 = icmp eq i64 %2910, %2904
  br i1 %2911, label %2912, label %2905, !llvm.loop !301

2912:                                             ; preds = %2905
  %2913 = icmp eq i64 %2903, 0
  br i1 %2913, label %2952, label %2914

2914:                                             ; preds = %2871, %2868, %2899, %2912
  %2915 = phi i64 [ 0, %2868 ], [ 0, %2871 ], [ %2880, %2899 ], [ %2904, %2912 ]
  %2916 = sub i64 %2862, %2915
  %2917 = xor i64 %2915, -1
  %2918 = add nsw i64 %2869, %2917
  %2919 = and i64 %2916, 3
  %2920 = icmp eq i64 %2919, 0
  br i1 %2920, label %2930, label %2921

2921:                                             ; preds = %2914, %2921
  %2922 = phi i64 [ %2927, %2921 ], [ %2915, %2914 ]
  %2923 = phi i64 [ %2928, %2921 ], [ 0, %2914 ]
  %2924 = getelementptr inbounds i16, ptr %810, i64 %2922
  %2925 = load i16, ptr %2924, align 2, !tbaa !44
  %2926 = getelementptr inbounds i16, ptr %2866, i64 %2922
  store i16 %2925, ptr %2926, align 2, !tbaa !44
  %2927 = add nuw nsw i64 %2922, 1
  %2928 = add i64 %2923, 1
  %2929 = icmp eq i64 %2928, %2919
  br i1 %2929, label %2930, label %2921, !llvm.loop !302

2930:                                             ; preds = %2921, %2914
  %2931 = phi i64 [ %2915, %2914 ], [ %2927, %2921 ]
  %2932 = icmp ult i64 %2918, 3
  br i1 %2932, label %2952, label %2933

2933:                                             ; preds = %2930, %2933
  %2934 = phi i64 [ %2950, %2933 ], [ %2931, %2930 ]
  %2935 = getelementptr inbounds i16, ptr %810, i64 %2934
  %2936 = load i16, ptr %2935, align 2, !tbaa !44
  %2937 = getelementptr inbounds i16, ptr %2866, i64 %2934
  store i16 %2936, ptr %2937, align 2, !tbaa !44
  %2938 = add nuw nsw i64 %2934, 1
  %2939 = getelementptr inbounds i16, ptr %810, i64 %2938
  %2940 = load i16, ptr %2939, align 2, !tbaa !44
  %2941 = getelementptr inbounds i16, ptr %2866, i64 %2938
  store i16 %2940, ptr %2941, align 2, !tbaa !44
  %2942 = add nuw nsw i64 %2934, 2
  %2943 = getelementptr inbounds i16, ptr %810, i64 %2942
  %2944 = load i16, ptr %2943, align 2, !tbaa !44
  %2945 = getelementptr inbounds i16, ptr %2866, i64 %2942
  store i16 %2944, ptr %2945, align 2, !tbaa !44
  %2946 = add nuw nsw i64 %2934, 3
  %2947 = getelementptr inbounds i16, ptr %810, i64 %2946
  %2948 = load i16, ptr %2947, align 2, !tbaa !44
  %2949 = getelementptr inbounds i16, ptr %2866, i64 %2946
  store i16 %2948, ptr %2949, align 2, !tbaa !44
  %2950 = add nuw nsw i64 %2934, 4
  %2951 = icmp eq i64 %2950, %2869
  br i1 %2951, label %2952, label %2933, !llvm.loop !303

2952:                                             ; preds = %2930, %2933, %2897, %2912
  %2953 = shl i64 %2861, 31
  %2954 = add i64 %2953, -4294967296
  %2955 = ashr i64 %2954, 32
  %2956 = getelementptr inbounds i16, ptr %2866, i64 %2955
  %2957 = load i16, ptr %2956, align 2, !tbaa !44
  br label %2958

2958:                                             ; preds = %2849, %2952
  %2959 = phi i64 [ %2862, %2952 ], [ 0, %2849 ]
  %2960 = phi i16 [ %2957, %2952 ], [ -1, %2849 ]
  %2961 = and i64 %2959, 4294967295
  %2962 = getelementptr inbounds i16, ptr %2866, i64 %2961
  store i16 %2960, ptr %2962, align 2, !tbaa !44
  %2963 = trunc i64 %2862 to i16
  %2964 = add i16 %2963, 1
  %2965 = sext i32 %2859 to i64
  %2966 = getelementptr inbounds i16, ptr %1647, i64 %2965
  store i16 %2964, ptr %2966, align 2, !tbaa !44
  %2967 = add nsw i32 %2863, 2
  %2968 = add nsw i32 %2967, %2859
  %2969 = select i1 %209, i32 0, i32 %2968
  store i32 %2969, ptr %17, align 8
  br label %3054

2970:                                             ; preds = %1048
  %2971 = load ptr, ptr %12, align 8, !tbaa !46
  %2972 = load i32, ptr %17, align 8, !tbaa !17
  %2973 = add i32 %2972, 1
  %2974 = sext i32 %2973 to i64
  %2975 = getelementptr inbounds i16, ptr %2971, i64 %2974
  %2976 = sext i32 %2972 to i64
  %2977 = getelementptr inbounds i16, ptr %2971, i64 %2976
  %2978 = load i16, ptr %2977, align 2, !tbaa !44
  %2979 = zext i16 %2978 to i32
  %2980 = add i32 %2973, %2979
  %2981 = add nsw i32 %2979, -1
  %2982 = add i32 %2980, 1
  %2983 = sext i32 %2982 to i64
  %2984 = getelementptr inbounds i16, ptr %2971, i64 %2983
  %2985 = sext i32 %2980 to i64
  %2986 = getelementptr inbounds i16, ptr %2971, i64 %2985
  %2987 = load i16, ptr %2986, align 2, !tbaa !44
  %2988 = zext i16 %2987 to i32
  %2989 = add i32 %2982, %2988
  %2990 = add nsw i32 %2988, -1
  %2991 = add i32 %2989, 1
  %2992 = sext i32 %2991 to i64
  %2993 = getelementptr inbounds i16, ptr %2971, i64 %2992
  %2994 = sext i32 %2989 to i64
  %2995 = getelementptr inbounds i16, ptr %2971, i64 %2994
  %2996 = load i16, ptr %2995, align 2, !tbaa !44
  %2997 = zext i16 %2996 to i32
  %2998 = add i32 %2991, %2997
  %2999 = add nsw i32 %2997, -1
  %3000 = add i32 %2998, 1
  %3001 = sext i32 %3000 to i64
  %3002 = getelementptr inbounds i16, ptr %2971, i64 %3001
  %3003 = sext i32 %2998 to i64
  %3004 = getelementptr inbounds i16, ptr %2971, i64 %3003
  %3005 = load i16, ptr %3004, align 2, !tbaa !44
  %3006 = zext i16 %3005 to i32
  %3007 = add i32 %3000, %3006
  %3008 = add nsw i32 %3006, -1
  %3009 = add i32 %3007, 1
  %3010 = sext i32 %3009 to i64
  %3011 = getelementptr inbounds i16, ptr %2971, i64 %3010
  %3012 = sext i32 %3007 to i64
  %3013 = getelementptr inbounds i16, ptr %2971, i64 %3012
  %3014 = load i16, ptr %3013, align 2, !tbaa !44
  %3015 = zext i16 %3014 to i32
  %3016 = add i32 %3009, %3015
  %3017 = add nsw i32 %3015, -1
  %3018 = add i32 %3016, 1
  %3019 = sext i32 %3018 to i64
  %3020 = getelementptr inbounds i16, ptr %2971, i64 %3019
  %3021 = sext i32 %3016 to i64
  %3022 = getelementptr inbounds i16, ptr %2971, i64 %3021
  %3023 = load i16, ptr %3022, align 2, !tbaa !44
  %3024 = zext i16 %3023 to i32
  %3025 = add i32 %3018, %3024
  %3026 = add nsw i32 %3024, -1
  %3027 = add i32 %3025, 1
  %3028 = sext i32 %3027 to i64
  %3029 = getelementptr inbounds i16, ptr %2971, i64 %3028
  %3030 = sext i32 %3025 to i64
  %3031 = getelementptr inbounds i16, ptr %2971, i64 %3030
  %3032 = load i16, ptr %3031, align 2, !tbaa !44
  %3033 = zext i16 %3032 to i32
  %3034 = add i32 %3027, %3033
  %3035 = add nsw i32 %3033, -1
  %3036 = add i32 %3034, 1
  %3037 = sext i32 %3036 to i64
  %3038 = getelementptr inbounds i16, ptr %2971, i64 %3037
  %3039 = sext i32 %3034 to i64
  %3040 = getelementptr inbounds i16, ptr %2971, i64 %3039
  %3041 = load i16, ptr %3040, align 2, !tbaa !44
  %3042 = zext i16 %3041 to i32
  %3043 = add i32 %3036, %3042
  %3044 = add nsw i32 %3042, -1
  %3045 = add i32 %3043, 1
  %3046 = sext i32 %3045 to i64
  %3047 = getelementptr inbounds i16, ptr %2971, i64 %3046
  %3048 = sext i32 %3043 to i64
  %3049 = getelementptr inbounds i16, ptr %2971, i64 %3048
  %3050 = load i16, ptr %3049, align 2, !tbaa !44
  %3051 = zext i16 %3050 to i32
  %3052 = add i32 %3045, %3051
  store i32 %3052, ptr %17, align 8, !tbaa !17
  %3053 = add nsw i32 %3051, -1
  br label %3054

3054:                                             ; preds = %2958, %2970
  %3055 = phi ptr [ %2975, %2970 ], [ %1651, %2958 ]
  %3056 = phi i32 [ %2981, %2970 ], [ %2078, %2958 ]
  %3057 = phi ptr [ %2984, %2970 ], [ %2103, %2958 ]
  %3058 = phi i32 [ %2990, %2970 ], [ %2100, %2958 ]
  %3059 = phi ptr [ %2993, %2970 ], [ %2212, %2958 ]
  %3060 = phi i32 [ %2999, %2970 ], [ %2209, %2958 ]
  %3061 = phi ptr [ %3002, %2970 ], [ %2321, %2958 ]
  %3062 = phi i32 [ %3008, %2970 ], [ %2318, %2958 ]
  %3063 = phi ptr [ %3011, %2970 ], [ %2430, %2958 ]
  %3064 = phi i32 [ %3017, %2970 ], [ %2427, %2958 ]
  %3065 = phi ptr [ %3020, %2970 ], [ %2539, %2958 ]
  %3066 = phi i32 [ %3026, %2970 ], [ %2536, %2958 ]
  %3067 = phi ptr [ %3029, %2970 ], [ %2648, %2958 ]
  %3068 = phi i32 [ %3035, %2970 ], [ %2645, %2958 ]
  %3069 = phi ptr [ %3038, %2970 ], [ %2757, %2958 ]
  %3070 = phi i32 [ %3044, %2970 ], [ %2754, %2958 ]
  %3071 = phi ptr [ %3047, %2970 ], [ %2866, %2958 ]
  %3072 = phi i32 [ %3053, %2970 ], [ %2863, %2958 ]
  %3073 = phi i32 [ %1028, %2970 ], [ %1609, %2958 ]
  %3074 = phi i32 [ %1027, %2970 ], [ %1610, %2958 ]
  %3075 = phi i32 [ %1026, %2970 ], [ %1611, %2958 ]
  %3076 = phi i32 [ %1025, %2970 ], [ %1612, %2958 ]
  %3077 = phi ptr [ %1023, %2970 ], [ %1305, %2958 ]
  %3078 = phi ptr [ %1022, %2970 ], [ %1306, %2958 ]
  %3079 = phi ptr [ %1021, %2970 ], [ %1307, %2958 ]
  %3080 = getelementptr inbounds %struct.CompAtom, ptr %106, i64 %1033, i32 1
  %3081 = load float, ptr %3080, align 8, !tbaa !104
  %3082 = fpext float %3081 to double
  %3083 = fmul double %3082, 0x4074C104816F0069
  %3084 = fmul double %33, %3083
  %3085 = fmul double %28, %3084
  %3086 = getelementptr inbounds %struct.CompAtom, ptr %106, i64 %1033, i32 2
  %3087 = load i16, ptr %3086, align 4, !tbaa !105
  %3088 = sext i16 %3087 to i32
  %3089 = load ptr, ptr %999, align 8, !tbaa !106
  %3090 = load i32, ptr %1000, align 8, !tbaa !108
  %3091 = shl nsw i32 %3088, 1
  %3092 = mul i32 %3091, %3090
  %3093 = zext i32 %3092 to i64
  %3094 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %3089, i64 %3093
  %3095 = load double, ptr @_ZN20ComputeNonbondedUtil7cutoff2E, align 8, !tbaa !19
  %3096 = extractelement <2 x double> %1051, i64 0
  %3097 = extractelement <2 x double> %1051, i64 1
  %3098 = call noundef i32 @_Z22pairlist_from_pairlistddddPK8CompAtomPKtiPtdPd(double noundef %3095, double noundef %3096, double noundef %3097, double noundef %1054, ptr noundef %108, ptr noundef nonnull %3055, i32 noundef %3056, ptr noundef %161, double noundef %36, ptr noundef %207)
  %3099 = icmp sgt i32 %3098, 0
  %3100 = shufflevector <2 x double> %1031, <2 x double> %1030, <2 x i32> <i32 1, i32 3>
  %3101 = shufflevector <2 x double> %1031, <2 x double> %1030, <2 x i32> <i32 0, i32 2>
  br i1 %3099, label %3102, label %3259

3102:                                             ; preds = %3054
  %3103 = load ptr, ptr @_ZN20ComputeNonbondedUtil8r2_tableE, align 8, !tbaa !23
  %3104 = zext i32 %3098 to i64
  br label %3105

3105:                                             ; preds = %3102, %3105
  %3106 = phi i64 [ 0, %3102 ], [ %3257, %3105 ]
  %3107 = phi double [ 0.000000e+00, %3102 ], [ %3219, %3105 ]
  %3108 = phi double [ 0.000000e+00, %3102 ], [ %3253, %3105 ]
  %3109 = phi <2 x double> [ %1032, %3102 ], [ %3183, %3105 ]
  %3110 = phi <2 x double> [ zeroinitializer, %3102 ], [ %3215, %3105 ]
  %3111 = phi <2 x double> [ %3100, %3102 ], [ %3243, %3105 ]
  %3112 = phi <2 x double> [ %3101, %3102 ], [ %3204, %3105 ]
  %3113 = phi <2 x double> [ zeroinitializer, %3102 ], [ %3249, %3105 ]
  %3114 = shl nuw nsw i64 %3106, 1
  %3115 = getelementptr inbounds i32, ptr %208, i64 %3114
  %3116 = load i32, ptr %3115, align 4, !tbaa !5
  %3117 = ashr i32 %3116, 14
  %3118 = add nsw i32 %3117, %39
  %3119 = getelementptr inbounds i16, ptr %161, i64 %3106
  %3120 = load i16, ptr %3119, align 2, !tbaa !44
  %3121 = zext i16 %3120 to i64
  %3122 = getelementptr inbounds %struct.CompAtom, ptr %108, i64 %3121
  %3123 = getelementptr inbounds double, ptr %207, i64 %3106
  %3124 = load double, ptr %3123, align 8, !tbaa !19
  %3125 = sext i32 %3118 to i64
  %3126 = getelementptr inbounds double, ptr %3103, i64 %3125
  %3127 = load double, ptr %3126, align 8, !tbaa !19
  %3128 = fsub double %3124, %3127
  %3129 = shl nsw i32 %3118, 4
  %3130 = sext i32 %3129 to i64
  %3131 = getelementptr inbounds double, ptr %31, i64 %3130
  %3132 = getelementptr inbounds %struct.CompAtom, ptr %108, i64 %3121, i32 2
  %3133 = load i16, ptr %3132, align 4, !tbaa !105
  %3134 = sext i16 %3133 to i32
  %3135 = shl nsw i32 %3134, 1
  %3136 = sext i32 %3135 to i64
  %3137 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %3094, i64 %3136
  %3138 = getelementptr inbounds %class.Vector, ptr %968, i64 %3121
  %3139 = getelementptr inbounds %class.Vector, ptr %974, i64 %3121
  %3140 = getelementptr inbounds %struct.CompAtom, ptr %108, i64 %3121, i32 1
  %3141 = load float, ptr %3140, align 8, !tbaa !104
  %3142 = fpext float %3141 to double
  %3143 = fmul double %3085, %3142
  %3144 = getelementptr inbounds %class.Vector, ptr %3122, i64 0, i32 2
  %3145 = load double, ptr %3144, align 8, !tbaa !49
  %3146 = fsub double %1054, %3145
  %3147 = load double, ptr %3137, align 8, !tbaa !109
  %3148 = fmul double %33, %3147
  %3149 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %3094, i64 %3136, i32 1
  %3150 = load double, ptr %3149, align 8, !tbaa !111
  %3151 = load double, ptr %3131, align 8, !tbaa !19
  %3152 = getelementptr inbounds double, ptr %3131, i64 2
  %3153 = load double, ptr %3152, align 8, !tbaa !19
  %3154 = fmul double %3150, %1001
  %3155 = fmul double %3154, %3153
  %3156 = call double @llvm.fmuladd.f64(double %3148, double %3151, double %3155)
  %3157 = getelementptr inbounds double, ptr %3131, i64 1
  %3158 = load double, ptr %3157, align 8, !tbaa !19
  %3159 = getelementptr inbounds double, ptr %3131, i64 3
  %3160 = load double, ptr %3159, align 8, !tbaa !19
  %3161 = fmul double %3154, %3160
  %3162 = call double @llvm.fmuladd.f64(double %3148, double %3158, double %3161)
  %3163 = getelementptr inbounds double, ptr %3131, i64 4
  %3164 = load double, ptr %3163, align 8, !tbaa !19
  %3165 = getelementptr inbounds double, ptr %3131, i64 6
  %3166 = load double, ptr %3165, align 8, !tbaa !19
  %3167 = fmul double %3154, %3166
  %3168 = call double @llvm.fmuladd.f64(double %3148, double %3164, double %3167)
  %3169 = getelementptr inbounds double, ptr %3131, i64 5
  %3170 = load double, ptr %3169, align 8, !tbaa !19
  %3171 = getelementptr inbounds double, ptr %3131, i64 7
  %3172 = load double, ptr %3171, align 8, !tbaa !19
  %3173 = fmul double %3154, %3172
  %3174 = call double @llvm.fmuladd.f64(double %3148, double %3170, double %3173)
  %3175 = fmul double %3128, %3156
  %3176 = fmul double %3162, 2.500000e-01
  %3177 = call double @llvm.fmuladd.f64(double %3175, double 0x3FC5555555555555, double %3176)
  %3178 = fmul double %3168, 5.000000e-01
  %3179 = call double @llvm.fmuladd.f64(double %3177, double %3128, double %3178)
  %3180 = call double @llvm.fmuladd.f64(double %3179, double %3128, double %3174)
  %3181 = insertelement <2 x double> poison, double %3180, i64 0
  %3182 = shufflevector <2 x double> %3181, <2 x double> poison, <2 x i32> zeroinitializer
  %3183 = fsub <2 x double> %3109, %3182
  %3184 = getelementptr inbounds double, ptr %3131, i64 8
  %3185 = load double, ptr %3184, align 8, !tbaa !19
  %3186 = fmul double %3143, %3185
  %3187 = getelementptr inbounds double, ptr %3131, i64 9
  %3188 = load double, ptr %3187, align 8, !tbaa !19
  %3189 = fmul double %3143, %3188
  %3190 = getelementptr inbounds double, ptr %3131, i64 10
  %3191 = load double, ptr %3190, align 8, !tbaa !19
  %3192 = fmul double %3143, %3191
  %3193 = getelementptr inbounds double, ptr %3131, i64 11
  %3194 = load double, ptr %3193, align 8, !tbaa !19
  %3195 = fmul double %3143, %3194
  %3196 = fmul double %3128, %3186
  %3197 = fmul double %3189, 2.500000e-01
  %3198 = call double @llvm.fmuladd.f64(double %3196, double 0x3FC5555555555555, double %3197)
  %3199 = fmul double %3192, 5.000000e-01
  %3200 = call double @llvm.fmuladd.f64(double %3198, double %3128, double %3199)
  %3201 = call double @llvm.fmuladd.f64(double %3200, double %3128, double %3195)
  %3202 = insertelement <2 x double> poison, double %3201, i64 0
  %3203 = shufflevector <2 x double> %3202, <2 x double> poison, <2 x i32> zeroinitializer
  %3204 = fsub <2 x double> %3112, %3203
  %3205 = fadd double %3156, %3186
  %3206 = fadd double %3162, %3189
  %3207 = fadd double %3168, %3192
  %3208 = call double @llvm.fmuladd.f64(double %3128, double %3205, double %3206)
  %3209 = call double @llvm.fmuladd.f64(double %3208, double %3128, double %3207)
  %3210 = load <2 x double>, ptr %3122, align 8, !tbaa !19
  %3211 = fsub <2 x double> %1051, %3210
  %3212 = insertelement <2 x double> poison, double %3209, i64 0
  %3213 = shufflevector <2 x double> %3212, <2 x double> poison, <2 x i32> zeroinitializer
  %3214 = fmul <2 x double> %3211, %3213
  %3215 = fadd <2 x double> %3110, %3214
  %3216 = load <2 x double>, ptr %3138, align 8, !tbaa !19
  %3217 = fsub <2 x double> %3216, %3214
  store <2 x double> %3217, ptr %3138, align 8, !tbaa !19
  %3218 = fmul double %3146, %3209
  %3219 = fadd double %3107, %3218
  %3220 = getelementptr inbounds %class.Vector, ptr %968, i64 %3121, i32 2
  %3221 = load double, ptr %3220, align 8, !tbaa !112
  %3222 = fsub double %3221, %3218
  store double %3222, ptr %3220, align 8, !tbaa !112
  %3223 = getelementptr inbounds double, ptr %3131, i64 12
  %3224 = load double, ptr %3223, align 8, !tbaa !19
  %3225 = getelementptr inbounds double, ptr %3131, i64 13
  %3226 = load double, ptr %3225, align 8, !tbaa !19
  %3227 = getelementptr inbounds double, ptr %3131, i64 14
  %3228 = load double, ptr %3227, align 8, !tbaa !19
  %3229 = getelementptr inbounds double, ptr %3131, i64 15
  %3230 = load double, ptr %3229, align 8, !tbaa !19
  %3231 = fmul double %3143, %3224
  %3232 = fmul double %3143, %3226
  %3233 = fmul double %3143, %3228
  %3234 = fmul double %3143, %3230
  %3235 = fmul double %3128, %3231
  %3236 = fmul double %3232, 2.500000e-01
  %3237 = call double @llvm.fmuladd.f64(double %3235, double 0x3FC5555555555555, double %3236)
  %3238 = fmul double %3233, 5.000000e-01
  %3239 = call double @llvm.fmuladd.f64(double %3237, double %3128, double %3238)
  %3240 = call double @llvm.fmuladd.f64(double %3239, double %3128, double %3234)
  %3241 = insertelement <2 x double> poison, double %3240, i64 0
  %3242 = shufflevector <2 x double> %3241, <2 x double> poison, <2 x i32> zeroinitializer
  %3243 = fsub <2 x double> %3111, %3242
  %3244 = call double @llvm.fmuladd.f64(double %3128, double %3231, double %3232)
  %3245 = call double @llvm.fmuladd.f64(double %3244, double %3128, double %3233)
  %3246 = insertelement <2 x double> poison, double %3245, i64 0
  %3247 = shufflevector <2 x double> %3246, <2 x double> poison, <2 x i32> zeroinitializer
  %3248 = fmul <2 x double> %3211, %3247
  %3249 = fadd <2 x double> %3113, %3248
  %3250 = load <2 x double>, ptr %3139, align 8, !tbaa !19
  %3251 = fsub <2 x double> %3250, %3248
  store <2 x double> %3251, ptr %3139, align 8, !tbaa !19
  %3252 = fmul double %3146, %3245
  %3253 = fadd double %3108, %3252
  %3254 = getelementptr inbounds %class.Vector, ptr %974, i64 %3121, i32 2
  %3255 = load double, ptr %3254, align 8, !tbaa !112
  %3256 = fsub double %3255, %3252
  store double %3256, ptr %3254, align 8, !tbaa !112
  %3257 = add nuw nsw i64 %3106, 1
  %3258 = icmp eq i64 %3257, %3104
  br i1 %3258, label %3259, label %3105

3259:                                             ; preds = %3105, %3054
  %3260 = phi double [ 0.000000e+00, %3054 ], [ %3253, %3105 ]
  %3261 = phi double [ 0.000000e+00, %3054 ], [ %3219, %3105 ]
  %3262 = phi <2 x double> [ %1032, %3054 ], [ %3183, %3105 ]
  %3263 = phi <2 x double> [ zeroinitializer, %3054 ], [ %3215, %3105 ]
  %3264 = phi <2 x double> [ zeroinitializer, %3054 ], [ %3249, %3105 ]
  %3265 = phi <2 x double> [ %3100, %3054 ], [ %3243, %3105 ]
  %3266 = phi <2 x double> [ %3101, %3054 ], [ %3204, %3105 ]
  %3267 = load double, ptr @_ZN20ComputeNonbondedUtil7cutoff2E, align 8, !tbaa !19
  %3268 = call noundef i32 @_Z22pairlist_from_pairlistddddPK8CompAtomPKtiPtdPd(double noundef %3267, double noundef %3096, double noundef %3097, double noundef %1054, ptr noundef %108, ptr noundef %3059, i32 noundef %3060, ptr noundef %161, double noundef %36, ptr noundef %207)
  %3269 = add nsw i32 %3268, %1019
  %3270 = icmp sgt i32 %3268, 0
  br i1 %3270, label %3271, label %3444

3271:                                             ; preds = %3259
  %3272 = load ptr, ptr @_ZN20ComputeNonbondedUtil8r2_tableE, align 8, !tbaa !23
  %3273 = zext i32 %3268 to i64
  br label %3274

3274:                                             ; preds = %3271, %3274
  %3275 = phi i64 [ 0, %3271 ], [ %3442, %3274 ]
  %3276 = phi double [ %3261, %3271 ], [ %3390, %3274 ]
  %3277 = phi double [ %3260, %3271 ], [ %3438, %3274 ]
  %3278 = phi <2 x double> [ %3262, %3271 ], [ %3353, %3274 ]
  %3279 = phi <2 x double> [ %3263, %3271 ], [ %3386, %3274 ]
  %3280 = phi <2 x double> [ %3264, %3271 ], [ %3434, %3274 ]
  %3281 = phi <2 x double> [ %3265, %3271 ], [ %3428, %3274 ]
  %3282 = phi <2 x double> [ %3266, %3271 ], [ %3375, %3274 ]
  %3283 = shl nuw nsw i64 %3275, 1
  %3284 = getelementptr inbounds i32, ptr %208, i64 %3283
  %3285 = load i32, ptr %3284, align 4, !tbaa !5
  %3286 = ashr i32 %3285, 14
  %3287 = add nsw i32 %3286, %39
  %3288 = getelementptr inbounds i16, ptr %161, i64 %3275
  %3289 = load i16, ptr %3288, align 2, !tbaa !44
  %3290 = zext i16 %3289 to i64
  %3291 = getelementptr inbounds %struct.CompAtom, ptr %108, i64 %3290
  %3292 = getelementptr inbounds double, ptr %207, i64 %3275
  %3293 = load double, ptr %3292, align 8, !tbaa !19
  %3294 = sext i32 %3287 to i64
  %3295 = getelementptr inbounds double, ptr %3272, i64 %3294
  %3296 = load double, ptr %3295, align 8, !tbaa !19
  %3297 = fsub double %3293, %3296
  %3298 = shl nsw i32 %3287, 4
  %3299 = sext i32 %3298 to i64
  %3300 = getelementptr inbounds double, ptr %31, i64 %3299
  %3301 = getelementptr inbounds %struct.CompAtom, ptr %108, i64 %3290, i32 2
  %3302 = load i16, ptr %3301, align 4, !tbaa !105
  %3303 = sext i16 %3302 to i32
  %3304 = shl nsw i32 %3303, 1
  %3305 = sext i32 %3304 to i64
  %3306 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %3094, i64 %3305
  %3307 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %3306, i64 1
  %3308 = getelementptr inbounds %class.Vector, ptr %968, i64 %3290
  %3309 = getelementptr inbounds %class.Vector, ptr %974, i64 %3290
  %3310 = getelementptr inbounds %struct.CompAtom, ptr %108, i64 %3290, i32 1
  %3311 = load float, ptr %3310, align 8, !tbaa !104
  %3312 = fpext float %3311 to double
  %3313 = fmul double %3085, %3312
  %3314 = getelementptr inbounds %class.Vector, ptr %3291, i64 0, i32 2
  %3315 = load double, ptr %3314, align 8, !tbaa !49
  %3316 = fsub double %1054, %3315
  %3317 = load double, ptr %3307, align 8, !tbaa !109
  %3318 = fmul double %33, %3317
  %3319 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %3306, i64 1, i32 1
  %3320 = load double, ptr %3319, align 8, !tbaa !111
  %3321 = load double, ptr %3300, align 8, !tbaa !19
  %3322 = getelementptr inbounds double, ptr %3300, i64 2
  %3323 = load double, ptr %3322, align 8, !tbaa !19
  %3324 = fmul double %3320, %1001
  %3325 = fmul double %3324, %3323
  %3326 = call double @llvm.fmuladd.f64(double %3318, double %3321, double %3325)
  %3327 = getelementptr inbounds double, ptr %3300, i64 1
  %3328 = load double, ptr %3327, align 8, !tbaa !19
  %3329 = getelementptr inbounds double, ptr %3300, i64 3
  %3330 = load double, ptr %3329, align 8, !tbaa !19
  %3331 = fmul double %3324, %3330
  %3332 = call double @llvm.fmuladd.f64(double %3318, double %3328, double %3331)
  %3333 = getelementptr inbounds double, ptr %3300, i64 4
  %3334 = load double, ptr %3333, align 8, !tbaa !19
  %3335 = getelementptr inbounds double, ptr %3300, i64 6
  %3336 = load double, ptr %3335, align 8, !tbaa !19
  %3337 = fmul double %3324, %3336
  %3338 = call double @llvm.fmuladd.f64(double %3318, double %3334, double %3337)
  %3339 = getelementptr inbounds double, ptr %3300, i64 5
  %3340 = load double, ptr %3339, align 8, !tbaa !19
  %3341 = getelementptr inbounds double, ptr %3300, i64 7
  %3342 = load double, ptr %3341, align 8, !tbaa !19
  %3343 = fmul double %3324, %3342
  %3344 = call double @llvm.fmuladd.f64(double %3318, double %3340, double %3343)
  %3345 = fmul double %3297, %3326
  %3346 = fmul double %3332, 2.500000e-01
  %3347 = call double @llvm.fmuladd.f64(double %3345, double 0x3FC5555555555555, double %3346)
  %3348 = fmul double %3338, 5.000000e-01
  %3349 = call double @llvm.fmuladd.f64(double %3347, double %3297, double %3348)
  %3350 = call double @llvm.fmuladd.f64(double %3349, double %3297, double %3344)
  %3351 = insertelement <2 x double> poison, double %3350, i64 0
  %3352 = shufflevector <2 x double> %3351, <2 x double> poison, <2 x i32> zeroinitializer
  %3353 = fsub <2 x double> %3278, %3352
  %3354 = fmul double %1002, %3313
  %3355 = getelementptr inbounds double, ptr %3300, i64 8
  %3356 = load double, ptr %3355, align 8, !tbaa !19
  %3357 = fmul double %3354, %3356
  %3358 = getelementptr inbounds double, ptr %3300, i64 9
  %3359 = load double, ptr %3358, align 8, !tbaa !19
  %3360 = fmul double %3354, %3359
  %3361 = getelementptr inbounds double, ptr %3300, i64 10
  %3362 = load double, ptr %3361, align 8, !tbaa !19
  %3363 = fmul double %3354, %3362
  %3364 = getelementptr inbounds double, ptr %3300, i64 11
  %3365 = load double, ptr %3364, align 8, !tbaa !19
  %3366 = fmul double %3354, %3365
  %3367 = fmul double %3297, %3357
  %3368 = fmul double %3360, 2.500000e-01
  %3369 = call double @llvm.fmuladd.f64(double %3367, double 0x3FC5555555555555, double %3368)
  %3370 = fmul double %3363, 5.000000e-01
  %3371 = call double @llvm.fmuladd.f64(double %3369, double %3297, double %3370)
  %3372 = call double @llvm.fmuladd.f64(double %3371, double %3297, double %3366)
  %3373 = insertelement <2 x double> poison, double %3372, i64 0
  %3374 = shufflevector <2 x double> %3373, <2 x double> poison, <2 x i32> zeroinitializer
  %3375 = fsub <2 x double> %3282, %3374
  %3376 = fadd double %3326, %3357
  %3377 = fadd double %3332, %3360
  %3378 = fadd double %3338, %3363
  %3379 = call double @llvm.fmuladd.f64(double %3297, double %3376, double %3377)
  %3380 = call double @llvm.fmuladd.f64(double %3379, double %3297, double %3378)
  %3381 = load <2 x double>, ptr %3291, align 8, !tbaa !19
  %3382 = fsub <2 x double> %1051, %3381
  %3383 = insertelement <2 x double> poison, double %3380, i64 0
  %3384 = shufflevector <2 x double> %3383, <2 x double> poison, <2 x i32> zeroinitializer
  %3385 = fmul <2 x double> %3382, %3384
  %3386 = fadd <2 x double> %3279, %3385
  %3387 = load <2 x double>, ptr %3308, align 8, !tbaa !19
  %3388 = fsub <2 x double> %3387, %3385
  store <2 x double> %3388, ptr %3308, align 8, !tbaa !19
  %3389 = fmul double %3316, %3380
  %3390 = fadd double %3276, %3389
  %3391 = getelementptr inbounds %class.Vector, ptr %968, i64 %3290, i32 2
  %3392 = load double, ptr %3391, align 8, !tbaa !112
  %3393 = fsub double %3392, %3389
  store double %3393, ptr %3391, align 8, !tbaa !112
  %3394 = shl nsw i32 %3287, 2
  %3395 = sext i32 %3394 to i64
  %3396 = getelementptr inbounds double, ptr %32, i64 %3395
  %3397 = getelementptr inbounds double, ptr %3300, i64 12
  %3398 = load double, ptr %3397, align 8, !tbaa !19
  %3399 = getelementptr inbounds double, ptr %3300, i64 13
  %3400 = load double, ptr %3399, align 8, !tbaa !19
  %3401 = getelementptr inbounds double, ptr %3300, i64 14
  %3402 = load double, ptr %3401, align 8, !tbaa !19
  %3403 = getelementptr inbounds double, ptr %3300, i64 15
  %3404 = load double, ptr %3403, align 8, !tbaa !19
  %3405 = load double, ptr %3396, align 8, !tbaa !19
  %3406 = call double @llvm.fmuladd.f64(double %35, double %3405, double %3404)
  %3407 = getelementptr inbounds double, ptr %3396, i64 1
  %3408 = load double, ptr %3407, align 8, !tbaa !19
  %3409 = call double @llvm.fmuladd.f64(double %1003, double %3408, double %3402)
  %3410 = getelementptr inbounds double, ptr %3396, i64 2
  %3411 = load double, ptr %3410, align 8, !tbaa !19
  %3412 = call double @llvm.fmuladd.f64(double %1004, double %3411, double %3400)
  %3413 = getelementptr inbounds double, ptr %3396, i64 3
  %3414 = load double, ptr %3413, align 8, !tbaa !19
  %3415 = call double @llvm.fmuladd.f64(double %1005, double %3414, double %3398)
  %3416 = fmul double %3313, %3415
  %3417 = fmul double %3313, %3412
  %3418 = fmul double %3313, %3409
  %3419 = fmul double %3313, %3406
  %3420 = fmul double %3297, %3416
  %3421 = fmul double %3417, 2.500000e-01
  %3422 = call double @llvm.fmuladd.f64(double %3420, double 0x3FC5555555555555, double %3421)
  %3423 = fmul double %3418, 5.000000e-01
  %3424 = call double @llvm.fmuladd.f64(double %3422, double %3297, double %3423)
  %3425 = call double @llvm.fmuladd.f64(double %3424, double %3297, double %3419)
  %3426 = insertelement <2 x double> poison, double %3425, i64 0
  %3427 = shufflevector <2 x double> %3426, <2 x double> poison, <2 x i32> zeroinitializer
  %3428 = fsub <2 x double> %3281, %3427
  %3429 = call double @llvm.fmuladd.f64(double %3297, double %3416, double %3417)
  %3430 = call double @llvm.fmuladd.f64(double %3429, double %3297, double %3418)
  %3431 = insertelement <2 x double> poison, double %3430, i64 0
  %3432 = shufflevector <2 x double> %3431, <2 x double> poison, <2 x i32> zeroinitializer
  %3433 = fmul <2 x double> %3382, %3432
  %3434 = fadd <2 x double> %3280, %3433
  %3435 = load <2 x double>, ptr %3309, align 8, !tbaa !19
  %3436 = fsub <2 x double> %3435, %3433
  store <2 x double> %3436, ptr %3309, align 8, !tbaa !19
  %3437 = fmul double %3316, %3430
  %3438 = fadd double %3277, %3437
  %3439 = getelementptr inbounds %class.Vector, ptr %974, i64 %3290, i32 2
  %3440 = load double, ptr %3439, align 8, !tbaa !112
  %3441 = fsub double %3440, %3437
  store double %3441, ptr %3439, align 8, !tbaa !112
  %3442 = add nuw nsw i64 %3275, 1
  %3443 = icmp eq i64 %3442, %3273
  br i1 %3443, label %3444, label %3274

3444:                                             ; preds = %3274, %3259
  %3445 = phi double [ %3260, %3259 ], [ %3438, %3274 ]
  %3446 = phi double [ %3261, %3259 ], [ %3390, %3274 ]
  %3447 = phi <2 x double> [ %3262, %3259 ], [ %3353, %3274 ]
  %3448 = phi <2 x double> [ %3263, %3259 ], [ %3386, %3274 ]
  %3449 = phi <2 x double> [ %3264, %3259 ], [ %3434, %3274 ]
  %3450 = phi <2 x double> [ %3265, %3259 ], [ %3428, %3274 ]
  %3451 = phi <2 x double> [ %3266, %3259 ], [ %3375, %3274 ]
  %3452 = load double, ptr @_ZN20ComputeNonbondedUtil7cutoff2E, align 8, !tbaa !19
  %3453 = call noundef i32 @_Z22pairlist_from_pairlistddddPK8CompAtomPKtiPtdPd(double noundef %3452, double noundef %3096, double noundef %3097, double noundef %1054, ptr noundef %108, ptr noundef %3057, i32 noundef %3058, ptr noundef %161, double noundef %36, ptr noundef %207)
  %3454 = add nsw i32 %3269, %3453
  %3455 = icmp sgt i32 %3453, 0
  br i1 %3455, label %3456, label %3542

3456:                                             ; preds = %3444
  %3457 = load ptr, ptr @_ZN20ComputeNonbondedUtil8r2_tableE, align 8, !tbaa !23
  %3458 = zext i32 %3453 to i64
  br label %3459

3459:                                             ; preds = %3456, %3459
  %3460 = phi i64 [ 0, %3456 ], [ %3540, %3459 ]
  %3461 = phi double [ %3445, %3456 ], [ %3536, %3459 ]
  %3462 = phi <2 x double> [ %3449, %3456 ], [ %3532, %3459 ]
  %3463 = phi <2 x double> [ %3450, %3456 ], [ %3525, %3459 ]
  %3464 = shl nuw nsw i64 %3460, 1
  %3465 = getelementptr inbounds i32, ptr %208, i64 %3464
  %3466 = load i32, ptr %3465, align 4, !tbaa !5
  %3467 = ashr i32 %3466, 14
  %3468 = add nsw i32 %3467, %39
  %3469 = getelementptr inbounds i16, ptr %161, i64 %3460
  %3470 = load i16, ptr %3469, align 2, !tbaa !44
  %3471 = zext i16 %3470 to i64
  %3472 = getelementptr inbounds %struct.CompAtom, ptr %108, i64 %3471
  %3473 = getelementptr inbounds double, ptr %207, i64 %3460
  %3474 = load double, ptr %3473, align 8, !tbaa !19
  %3475 = sext i32 %3468 to i64
  %3476 = getelementptr inbounds double, ptr %3457, i64 %3475
  %3477 = load double, ptr %3476, align 8, !tbaa !19
  %3478 = fsub double %3474, %3477
  %3479 = shl nsw i32 %3468, 4
  %3480 = sext i32 %3479 to i64
  %3481 = getelementptr inbounds double, ptr %31, i64 %3480
  %3482 = getelementptr inbounds %class.Vector, ptr %974, i64 %3471
  %3483 = getelementptr inbounds %struct.CompAtom, ptr %108, i64 %3471, i32 1
  %3484 = load float, ptr %3483, align 8, !tbaa !104
  %3485 = fpext float %3484 to double
  %3486 = fmul double %3085, %3485
  %3487 = load <2 x double>, ptr %3472, align 8, !tbaa !19
  %3488 = getelementptr inbounds %class.Vector, ptr %3472, i64 0, i32 2
  %3489 = load double, ptr %3488, align 8, !tbaa !49
  %3490 = fsub double %1054, %3489
  %3491 = shl nsw i32 %3468, 2
  %3492 = sext i32 %3491 to i64
  %3493 = getelementptr inbounds double, ptr %32, i64 %3492
  %3494 = getelementptr inbounds double, ptr %3481, i64 12
  %3495 = load double, ptr %3494, align 8, !tbaa !19
  %3496 = getelementptr inbounds double, ptr %3481, i64 13
  %3497 = load double, ptr %3496, align 8, !tbaa !19
  %3498 = getelementptr inbounds double, ptr %3481, i64 14
  %3499 = load double, ptr %3498, align 8, !tbaa !19
  %3500 = getelementptr inbounds double, ptr %3481, i64 15
  %3501 = load double, ptr %3500, align 8, !tbaa !19
  %3502 = load double, ptr %3493, align 8, !tbaa !19
  %3503 = fadd double %3501, %3502
  %3504 = getelementptr inbounds double, ptr %3493, i64 1
  %3505 = load double, ptr %3504, align 8, !tbaa !19
  %3506 = call double @llvm.fmuladd.f64(double %3505, double 2.000000e+00, double %3499)
  %3507 = getelementptr inbounds double, ptr %3493, i64 2
  %3508 = load double, ptr %3507, align 8, !tbaa !19
  %3509 = call double @llvm.fmuladd.f64(double %3508, double 4.000000e+00, double %3497)
  %3510 = getelementptr inbounds double, ptr %3493, i64 3
  %3511 = load double, ptr %3510, align 8, !tbaa !19
  %3512 = call double @llvm.fmuladd.f64(double %3511, double 6.000000e+00, double %3495)
  %3513 = fmul double %3486, %3512
  %3514 = fmul double %3486, %3509
  %3515 = fmul double %3486, %3506
  %3516 = fmul double %3486, %3503
  %3517 = fmul double %3478, %3513
  %3518 = fmul double %3514, 2.500000e-01
  %3519 = call double @llvm.fmuladd.f64(double %3517, double 0x3FC5555555555555, double %3518)
  %3520 = fmul double %3515, 5.000000e-01
  %3521 = call double @llvm.fmuladd.f64(double %3519, double %3478, double %3520)
  %3522 = call double @llvm.fmuladd.f64(double %3521, double %3478, double %3516)
  %3523 = insertelement <2 x double> poison, double %3522, i64 0
  %3524 = shufflevector <2 x double> %3523, <2 x double> poison, <2 x i32> zeroinitializer
  %3525 = fsub <2 x double> %3463, %3524
  %3526 = call double @llvm.fmuladd.f64(double %3478, double %3513, double %3514)
  %3527 = call double @llvm.fmuladd.f64(double %3526, double %3478, double %3515)
  %3528 = fsub <2 x double> %1051, %3487
  %3529 = insertelement <2 x double> poison, double %3527, i64 0
  %3530 = shufflevector <2 x double> %3529, <2 x double> poison, <2 x i32> zeroinitializer
  %3531 = fmul <2 x double> %3528, %3530
  %3532 = fadd <2 x double> %3462, %3531
  %3533 = load <2 x double>, ptr %3482, align 8, !tbaa !19
  %3534 = fsub <2 x double> %3533, %3531
  store <2 x double> %3534, ptr %3482, align 8, !tbaa !19
  %3535 = fmul double %3490, %3527
  %3536 = fadd double %3461, %3535
  %3537 = getelementptr inbounds %class.Vector, ptr %974, i64 %3471, i32 2
  %3538 = load double, ptr %3537, align 8, !tbaa !112
  %3539 = fsub double %3538, %3535
  store double %3539, ptr %3537, align 8, !tbaa !112
  %3540 = add nuw nsw i64 %3460, 1
  %3541 = icmp eq i64 %3540, %3458
  br i1 %3541, label %3542, label %3459

3542:                                             ; preds = %3459, %3444
  %3543 = phi double [ %3445, %3444 ], [ %3536, %3459 ]
  %3544 = phi <2 x double> [ %3449, %3444 ], [ %3532, %3459 ]
  %3545 = phi <2 x double> [ %3450, %3444 ], [ %3525, %3459 ]
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %3) #11
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %4) #11
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %5) #11
  %3546 = load double, ptr @_ZN20ComputeNonbondedUtil7cutoff2E, align 8, !tbaa !19
  %3547 = call noundef i32 @_Z22pairlist_from_pairlistddddPK8CompAtomPKtiPtdPd(double noundef %3546, double noundef %3096, double noundef %3097, double noundef %1054, ptr noundef %108, ptr noundef %3061, i32 noundef %3062, ptr noundef %161, double noundef %36, ptr noundef %207)
  %3548 = icmp sgt i32 %3547, 0
  br i1 %3548, label %3549, label %3681

3549:                                             ; preds = %3542
  %3550 = zext i32 %3547 to i64
  br label %3551

3551:                                             ; preds = %3549, %3551
  %3552 = phi i64 [ 0, %3549 ], [ %3679, %3551 ]
  %3553 = phi double [ %3446, %3549 ], [ %3640, %3551 ]
  %3554 = phi double [ %3543, %3549 ], [ %3675, %3551 ]
  %3555 = phi <2 x double> [ %3447, %3549 ], [ %3610, %3551 ]
  %3556 = phi <2 x double> [ %3448, %3549 ], [ %3636, %3551 ]
  %3557 = phi <2 x double> [ %3544, %3549 ], [ %3671, %3551 ]
  %3558 = phi <2 x double> [ %3545, %3549 ], [ %3664, %3551 ]
  %3559 = phi <2 x double> [ %3451, %3549 ], [ %3627, %3551 ]
  %3560 = shl nuw nsw i64 %3552, 1
  %3561 = getelementptr inbounds i32, ptr %208, i64 %3560
  %3562 = load i32, ptr %3561, align 4, !tbaa !5
  %3563 = ashr i32 %3562, 14
  %3564 = add nsw i32 %3563, %39
  %3565 = getelementptr inbounds i16, ptr %161, i64 %3552
  %3566 = load i16, ptr %3565, align 2, !tbaa !44
  %3567 = zext i16 %3566 to i64
  %3568 = getelementptr inbounds %struct.CompAtom, ptr %108, i64 %3567
  %3569 = getelementptr inbounds double, ptr %207, i64 %3552
  %3570 = load double, ptr %3569, align 8, !tbaa !19
  %3571 = load ptr, ptr @_ZN20ComputeNonbondedUtil8r2_tableE, align 8, !tbaa !23
  %3572 = sext i32 %3564 to i64
  %3573 = getelementptr inbounds double, ptr %3571, i64 %3572
  %3574 = load double, ptr %3573, align 8, !tbaa !19
  %3575 = fsub double %3570, %3574
  %3576 = shl nsw i32 %3564, 4
  %3577 = sext i32 %3576 to i64
  %3578 = getelementptr inbounds double, ptr %31, i64 %3577
  %3579 = getelementptr inbounds %struct.CompAtom, ptr %108, i64 %3567, i32 2
  %3580 = load i16, ptr %3579, align 4, !tbaa !105
  %3581 = sext i16 %3580 to i32
  %3582 = shl nsw i32 %3581, 1
  %3583 = sext i32 %3582 to i64
  %3584 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %3094, i64 %3583
  %3585 = getelementptr inbounds %class.Vector, ptr %968, i64 %3567
  %3586 = getelementptr inbounds %class.Vector, ptr %974, i64 %3567
  %3587 = getelementptr inbounds %struct.CompAtom, ptr %108, i64 %3567, i32 1
  %3588 = load float, ptr %3587, align 8, !tbaa !104
  %3589 = fpext float %3588 to double
  %3590 = fmul double %3085, %3589
  %3591 = getelementptr inbounds %class.Vector, ptr %3568, i64 0, i32 2
  %3592 = load double, ptr %3591, align 8, !tbaa !49
  %3593 = fsub double %1054, %3592
  %3594 = load double, ptr %3584, align 8, !tbaa !109
  %3595 = fmul double %33, %3594
  %3596 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %3094, i64 %3583, i32 1
  %3597 = load double, ptr %3596, align 8, !tbaa !111
  %3598 = fmul double %33, %3597
  %3599 = fsub double %3570, %36
  %3600 = getelementptr inbounds double, ptr %3578, i64 8
  %3601 = getelementptr inbounds double, ptr %3578, i64 9
  %3602 = getelementptr inbounds double, ptr %3578, i64 10
  %3603 = getelementptr inbounds double, ptr %3578, i64 11
  %3604 = load <2 x double>, ptr %3568, align 8, !tbaa !19
  %3605 = fsub <2 x double> %1051, %3604
  call void @_Z24fep_vdw_forceandenergiesdddddddddiidddPdS_S_(double noundef %3595, double noundef %3598, double noundef %3599, double noundef %59, double noundef %65, double noundef %40, double noundef %41, double noundef %56, double noundef %63, i32 noundef %48, i32 noundef %49, double noundef %50, double noundef %51, double noundef %45, ptr noundef nonnull %3, ptr noundef nonnull %4, ptr noundef nonnull %5)
  %3606 = load double, ptr %3, align 8, !tbaa !19
  %3607 = load double, ptr %5, align 8, !tbaa !19
  %3608 = insertelement <2 x double> poison, double %3607, i64 0
  %3609 = insertelement <2 x double> %3608, double %3606, i64 1
  %3610 = fadd <2 x double> %3555, %3609
  %3611 = load double, ptr %3600, align 8, !tbaa !19
  %3612 = fmul double %3590, %3611
  %3613 = load double, ptr %3601, align 8, !tbaa !19
  %3614 = fmul double %3590, %3613
  %3615 = load double, ptr %3602, align 8, !tbaa !19
  %3616 = fmul double %3590, %3615
  %3617 = load double, ptr %3603, align 8, !tbaa !19
  %3618 = fmul double %3590, %3617
  %3619 = fmul double %3575, %3612
  %3620 = fmul double %3614, 2.500000e-01
  %3621 = call double @llvm.fmuladd.f64(double %3619, double 0x3FC5555555555555, double %3620)
  %3622 = fmul double %3616, 5.000000e-01
  %3623 = call double @llvm.fmuladd.f64(double %3621, double %3575, double %3622)
  %3624 = call double @llvm.fmuladd.f64(double %3623, double %3575, double %3618)
  %3625 = insertelement <2 x double> poison, double %3624, i64 0
  %3626 = shufflevector <2 x double> %3625, <2 x double> poison, <2 x i32> zeroinitializer
  %3627 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %1006, <2 x double> %3626, <2 x double> %3559)
  %3628 = call double @llvm.fmuladd.f64(double %3575, double %3612, double %3614)
  %3629 = call double @llvm.fmuladd.f64(double %3628, double %3575, double %3616)
  %3630 = fmul double %1012, %3629
  %3631 = load double, ptr %4, align 8, !tbaa !19
  %3632 = fadd double %3631, %3630
  %3633 = insertelement <2 x double> poison, double %3632, i64 0
  %3634 = shufflevector <2 x double> %3633, <2 x double> poison, <2 x i32> zeroinitializer
  %3635 = fmul <2 x double> %3605, %3634
  %3636 = fadd <2 x double> %3556, %3635
  %3637 = load <2 x double>, ptr %3585, align 8, !tbaa !19
  %3638 = fsub <2 x double> %3637, %3635
  store <2 x double> %3638, ptr %3585, align 8, !tbaa !19
  %3639 = fmul double %3593, %3632
  %3640 = fadd double %3553, %3639
  %3641 = getelementptr inbounds %class.Vector, ptr %968, i64 %3567, i32 2
  %3642 = load double, ptr %3641, align 8, !tbaa !112
  %3643 = fsub double %3642, %3639
  store double %3643, ptr %3641, align 8, !tbaa !112
  %3644 = getelementptr inbounds double, ptr %3578, i64 12
  %3645 = load double, ptr %3644, align 8, !tbaa !19
  %3646 = getelementptr inbounds double, ptr %3578, i64 13
  %3647 = load double, ptr %3646, align 8, !tbaa !19
  %3648 = getelementptr inbounds double, ptr %3578, i64 14
  %3649 = load double, ptr %3648, align 8, !tbaa !19
  %3650 = getelementptr inbounds double, ptr %3578, i64 15
  %3651 = load double, ptr %3650, align 8, !tbaa !19
  %3652 = fmul double %3590, %3645
  %3653 = fmul double %3590, %3647
  %3654 = fmul double %3590, %3649
  %3655 = fmul double %3590, %3651
  %3656 = fmul double %3575, %3652
  %3657 = fmul double %3653, 2.500000e-01
  %3658 = call double @llvm.fmuladd.f64(double %3656, double 0x3FC5555555555555, double %3657)
  %3659 = fmul double %3654, 5.000000e-01
  %3660 = call double @llvm.fmuladd.f64(double %3658, double %3575, double %3659)
  %3661 = call double @llvm.fmuladd.f64(double %3660, double %3575, double %3655)
  %3662 = insertelement <2 x double> poison, double %3661, i64 0
  %3663 = shufflevector <2 x double> %3662, <2 x double> poison, <2 x i32> zeroinitializer
  %3664 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %1006, <2 x double> %3663, <2 x double> %3558)
  %3665 = call double @llvm.fmuladd.f64(double %3575, double %3652, double %3653)
  %3666 = call double @llvm.fmuladd.f64(double %3665, double %3575, double %3654)
  %3667 = fmul double %1012, %3666
  %3668 = insertelement <2 x double> poison, double %3667, i64 0
  %3669 = shufflevector <2 x double> %3668, <2 x double> poison, <2 x i32> zeroinitializer
  %3670 = fmul <2 x double> %3605, %3669
  %3671 = fadd <2 x double> %3557, %3670
  %3672 = load <2 x double>, ptr %3586, align 8, !tbaa !19
  %3673 = fsub <2 x double> %3672, %3670
  store <2 x double> %3673, ptr %3586, align 8, !tbaa !19
  %3674 = fmul double %3593, %3667
  %3675 = fadd double %3554, %3674
  %3676 = getelementptr inbounds %class.Vector, ptr %974, i64 %3567, i32 2
  %3677 = load double, ptr %3676, align 8, !tbaa !112
  %3678 = fsub double %3677, %3674
  store double %3678, ptr %3676, align 8, !tbaa !112
  %3679 = add nuw nsw i64 %3552, 1
  %3680 = icmp eq i64 %3679, %3550
  br i1 %3680, label %3681, label %3551

3681:                                             ; preds = %3551, %3542
  %3682 = phi double [ %3543, %3542 ], [ %3675, %3551 ]
  %3683 = phi double [ %3446, %3542 ], [ %3640, %3551 ]
  %3684 = phi <2 x double> [ %3447, %3542 ], [ %3610, %3551 ]
  %3685 = phi <2 x double> [ %3448, %3542 ], [ %3636, %3551 ]
  %3686 = phi <2 x double> [ %3544, %3542 ], [ %3671, %3551 ]
  %3687 = phi <2 x double> [ %3545, %3542 ], [ %3664, %3551 ]
  %3688 = phi <2 x double> [ %3451, %3542 ], [ %3627, %3551 ]
  %3689 = load double, ptr @_ZN20ComputeNonbondedUtil7cutoff2E, align 8, !tbaa !19
  %3690 = call noundef i32 @_Z22pairlist_from_pairlistddddPK8CompAtomPKtiPtdPd(double noundef %3689, double noundef %3096, double noundef %3097, double noundef %1054, ptr noundef %108, ptr noundef %3067, i32 noundef %3068, ptr noundef %161, double noundef %36, ptr noundef %207)
  %3691 = icmp sgt i32 %3690, 0
  br i1 %3691, label %3692, label %3824

3692:                                             ; preds = %3681
  %3693 = zext i32 %3690 to i64
  br label %3694

3694:                                             ; preds = %3692, %3694
  %3695 = phi i64 [ 0, %3692 ], [ %3822, %3694 ]
  %3696 = phi double [ %3683, %3692 ], [ %3783, %3694 ]
  %3697 = phi double [ %3682, %3692 ], [ %3818, %3694 ]
  %3698 = phi <2 x double> [ %3684, %3692 ], [ %3753, %3694 ]
  %3699 = phi <2 x double> [ %3685, %3692 ], [ %3779, %3694 ]
  %3700 = phi <2 x double> [ %3686, %3692 ], [ %3814, %3694 ]
  %3701 = phi <2 x double> [ %3687, %3692 ], [ %3807, %3694 ]
  %3702 = phi <2 x double> [ %3688, %3692 ], [ %3770, %3694 ]
  %3703 = shl nuw nsw i64 %3695, 1
  %3704 = getelementptr inbounds i32, ptr %208, i64 %3703
  %3705 = load i32, ptr %3704, align 4, !tbaa !5
  %3706 = ashr i32 %3705, 14
  %3707 = add nsw i32 %3706, %39
  %3708 = getelementptr inbounds i16, ptr %161, i64 %3695
  %3709 = load i16, ptr %3708, align 2, !tbaa !44
  %3710 = zext i16 %3709 to i64
  %3711 = getelementptr inbounds %struct.CompAtom, ptr %108, i64 %3710
  %3712 = getelementptr inbounds double, ptr %207, i64 %3695
  %3713 = load double, ptr %3712, align 8, !tbaa !19
  %3714 = load ptr, ptr @_ZN20ComputeNonbondedUtil8r2_tableE, align 8, !tbaa !23
  %3715 = sext i32 %3707 to i64
  %3716 = getelementptr inbounds double, ptr %3714, i64 %3715
  %3717 = load double, ptr %3716, align 8, !tbaa !19
  %3718 = fsub double %3713, %3717
  %3719 = shl nsw i32 %3707, 4
  %3720 = sext i32 %3719 to i64
  %3721 = getelementptr inbounds double, ptr %31, i64 %3720
  %3722 = getelementptr inbounds %struct.CompAtom, ptr %108, i64 %3710, i32 2
  %3723 = load i16, ptr %3722, align 4, !tbaa !105
  %3724 = sext i16 %3723 to i32
  %3725 = shl nsw i32 %3724, 1
  %3726 = sext i32 %3725 to i64
  %3727 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %3094, i64 %3726
  %3728 = getelementptr inbounds %class.Vector, ptr %968, i64 %3710
  %3729 = getelementptr inbounds %class.Vector, ptr %974, i64 %3710
  %3730 = getelementptr inbounds %struct.CompAtom, ptr %108, i64 %3710, i32 1
  %3731 = load float, ptr %3730, align 8, !tbaa !104
  %3732 = fpext float %3731 to double
  %3733 = fmul double %3085, %3732
  %3734 = getelementptr inbounds %class.Vector, ptr %3711, i64 0, i32 2
  %3735 = load double, ptr %3734, align 8, !tbaa !49
  %3736 = fsub double %1054, %3735
  %3737 = load double, ptr %3727, align 8, !tbaa !109
  %3738 = fmul double %33, %3737
  %3739 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %3094, i64 %3726, i32 1
  %3740 = load double, ptr %3739, align 8, !tbaa !111
  %3741 = fmul double %33, %3740
  %3742 = fsub double %3713, %36
  %3743 = getelementptr inbounds double, ptr %3721, i64 8
  %3744 = getelementptr inbounds double, ptr %3721, i64 9
  %3745 = getelementptr inbounds double, ptr %3721, i64 10
  %3746 = getelementptr inbounds double, ptr %3721, i64 11
  %3747 = load <2 x double>, ptr %3711, align 8, !tbaa !19
  %3748 = fsub <2 x double> %1051, %3747
  call void @_Z24fep_vdw_forceandenergiesdddddddddiidddPdS_S_(double noundef %3738, double noundef %3741, double noundef %3742, double noundef %85, double noundef %92, double noundef %40, double noundef %41, double noundef %83, double noundef %90, i32 noundef %48, i32 noundef %49, double noundef %50, double noundef %51, double noundef %45, ptr noundef nonnull %3, ptr noundef nonnull %4, ptr noundef nonnull %5)
  %3749 = load double, ptr %3, align 8, !tbaa !19
  %3750 = load double, ptr %5, align 8, !tbaa !19
  %3751 = insertelement <2 x double> poison, double %3750, i64 0
  %3752 = insertelement <2 x double> %3751, double %3749, i64 1
  %3753 = fadd <2 x double> %3698, %3752
  %3754 = load double, ptr %3743, align 8, !tbaa !19
  %3755 = fmul double %3733, %3754
  %3756 = load double, ptr %3744, align 8, !tbaa !19
  %3757 = fmul double %3733, %3756
  %3758 = load double, ptr %3745, align 8, !tbaa !19
  %3759 = fmul double %3733, %3758
  %3760 = load double, ptr %3746, align 8, !tbaa !19
  %3761 = fmul double %3733, %3760
  %3762 = fmul double %3718, %3755
  %3763 = fmul double %3757, 2.500000e-01
  %3764 = call double @llvm.fmuladd.f64(double %3762, double 0x3FC5555555555555, double %3763)
  %3765 = fmul double %3759, 5.000000e-01
  %3766 = call double @llvm.fmuladd.f64(double %3764, double %3718, double %3765)
  %3767 = call double @llvm.fmuladd.f64(double %3766, double %3718, double %3761)
  %3768 = insertelement <2 x double> poison, double %3767, i64 0
  %3769 = shufflevector <2 x double> %3768, <2 x double> poison, <2 x i32> zeroinitializer
  %3770 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %1007, <2 x double> %3769, <2 x double> %3702)
  %3771 = call double @llvm.fmuladd.f64(double %3718, double %3755, double %3757)
  %3772 = call double @llvm.fmuladd.f64(double %3771, double %3718, double %3759)
  %3773 = fmul double %1013, %3772
  %3774 = load double, ptr %4, align 8, !tbaa !19
  %3775 = fadd double %3774, %3773
  %3776 = insertelement <2 x double> poison, double %3775, i64 0
  %3777 = shufflevector <2 x double> %3776, <2 x double> poison, <2 x i32> zeroinitializer
  %3778 = fmul <2 x double> %3748, %3777
  %3779 = fadd <2 x double> %3699, %3778
  %3780 = load <2 x double>, ptr %3728, align 8, !tbaa !19
  %3781 = fsub <2 x double> %3780, %3778
  store <2 x double> %3781, ptr %3728, align 8, !tbaa !19
  %3782 = fmul double %3736, %3775
  %3783 = fadd double %3696, %3782
  %3784 = getelementptr inbounds %class.Vector, ptr %968, i64 %3710, i32 2
  %3785 = load double, ptr %3784, align 8, !tbaa !112
  %3786 = fsub double %3785, %3782
  store double %3786, ptr %3784, align 8, !tbaa !112
  %3787 = getelementptr inbounds double, ptr %3721, i64 12
  %3788 = load double, ptr %3787, align 8, !tbaa !19
  %3789 = getelementptr inbounds double, ptr %3721, i64 13
  %3790 = load double, ptr %3789, align 8, !tbaa !19
  %3791 = getelementptr inbounds double, ptr %3721, i64 14
  %3792 = load double, ptr %3791, align 8, !tbaa !19
  %3793 = getelementptr inbounds double, ptr %3721, i64 15
  %3794 = load double, ptr %3793, align 8, !tbaa !19
  %3795 = fmul double %3733, %3788
  %3796 = fmul double %3733, %3790
  %3797 = fmul double %3733, %3792
  %3798 = fmul double %3733, %3794
  %3799 = fmul double %3718, %3795
  %3800 = fmul double %3796, 2.500000e-01
  %3801 = call double @llvm.fmuladd.f64(double %3799, double 0x3FC5555555555555, double %3800)
  %3802 = fmul double %3797, 5.000000e-01
  %3803 = call double @llvm.fmuladd.f64(double %3801, double %3718, double %3802)
  %3804 = call double @llvm.fmuladd.f64(double %3803, double %3718, double %3798)
  %3805 = insertelement <2 x double> poison, double %3804, i64 0
  %3806 = shufflevector <2 x double> %3805, <2 x double> poison, <2 x i32> zeroinitializer
  %3807 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %1007, <2 x double> %3806, <2 x double> %3701)
  %3808 = call double @llvm.fmuladd.f64(double %3718, double %3795, double %3796)
  %3809 = call double @llvm.fmuladd.f64(double %3808, double %3718, double %3797)
  %3810 = fmul double %1013, %3809
  %3811 = insertelement <2 x double> poison, double %3810, i64 0
  %3812 = shufflevector <2 x double> %3811, <2 x double> poison, <2 x i32> zeroinitializer
  %3813 = fmul <2 x double> %3748, %3812
  %3814 = fadd <2 x double> %3700, %3813
  %3815 = load <2 x double>, ptr %3729, align 8, !tbaa !19
  %3816 = fsub <2 x double> %3815, %3813
  store <2 x double> %3816, ptr %3729, align 8, !tbaa !19
  %3817 = fmul double %3736, %3810
  %3818 = fadd double %3697, %3817
  %3819 = getelementptr inbounds %class.Vector, ptr %974, i64 %3710, i32 2
  %3820 = load double, ptr %3819, align 8, !tbaa !112
  %3821 = fsub double %3820, %3817
  store double %3821, ptr %3819, align 8, !tbaa !112
  %3822 = add nuw nsw i64 %3695, 1
  %3823 = icmp eq i64 %3822, %3693
  br i1 %3823, label %3824, label %3694

3824:                                             ; preds = %3694, %3681
  %3825 = phi double [ %3682, %3681 ], [ %3818, %3694 ]
  %3826 = phi double [ %3683, %3681 ], [ %3783, %3694 ]
  %3827 = phi <2 x double> [ %3684, %3681 ], [ %3753, %3694 ]
  %3828 = phi <2 x double> [ %3685, %3681 ], [ %3779, %3694 ]
  %3829 = phi <2 x double> [ %3686, %3681 ], [ %3814, %3694 ]
  %3830 = phi <2 x double> [ %3687, %3681 ], [ %3807, %3694 ]
  %3831 = phi <2 x double> [ %3688, %3681 ], [ %3770, %3694 ]
  %3832 = load double, ptr @_ZN20ComputeNonbondedUtil7cutoff2E, align 8, !tbaa !19
  %3833 = call noundef i32 @_Z22pairlist_from_pairlistddddPK8CompAtomPKtiPtdPd(double noundef %3832, double noundef %3096, double noundef %3097, double noundef %1054, ptr noundef %108, ptr noundef %3065, i32 noundef %3066, ptr noundef %161, double noundef %36, ptr noundef %207)
  %3834 = add nsw i32 %3454, %3833
  %3835 = icmp sgt i32 %3833, 0
  br i1 %3835, label %3836, label %3984

3836:                                             ; preds = %3824
  %3837 = zext i32 %3833 to i64
  br label %3838

3838:                                             ; preds = %3836, %3838
  %3839 = phi i64 [ 0, %3836 ], [ %3982, %3838 ]
  %3840 = phi double [ %3826, %3836 ], [ %3929, %3838 ]
  %3841 = phi double [ %3825, %3836 ], [ %3978, %3838 ]
  %3842 = phi <2 x double> [ %3827, %3836 ], [ %3899, %3838 ]
  %3843 = phi <2 x double> [ %3828, %3836 ], [ %3925, %3838 ]
  %3844 = phi <2 x double> [ %3829, %3836 ], [ %3974, %3838 ]
  %3845 = phi <2 x double> [ %3830, %3836 ], [ %3967, %3838 ]
  %3846 = phi <2 x double> [ %3831, %3836 ], [ %3916, %3838 ]
  %3847 = shl nuw nsw i64 %3839, 1
  %3848 = getelementptr inbounds i32, ptr %208, i64 %3847
  %3849 = load i32, ptr %3848, align 4, !tbaa !5
  %3850 = ashr i32 %3849, 14
  %3851 = add nsw i32 %3850, %39
  %3852 = getelementptr inbounds i16, ptr %161, i64 %3839
  %3853 = load i16, ptr %3852, align 2, !tbaa !44
  %3854 = zext i16 %3853 to i64
  %3855 = getelementptr inbounds %struct.CompAtom, ptr %108, i64 %3854
  %3856 = getelementptr inbounds double, ptr %207, i64 %3839
  %3857 = load double, ptr %3856, align 8, !tbaa !19
  %3858 = load ptr, ptr @_ZN20ComputeNonbondedUtil8r2_tableE, align 8, !tbaa !23
  %3859 = sext i32 %3851 to i64
  %3860 = getelementptr inbounds double, ptr %3858, i64 %3859
  %3861 = load double, ptr %3860, align 8, !tbaa !19
  %3862 = fsub double %3857, %3861
  %3863 = shl nsw i32 %3851, 4
  %3864 = sext i32 %3863 to i64
  %3865 = getelementptr inbounds double, ptr %31, i64 %3864
  %3866 = getelementptr inbounds %struct.CompAtom, ptr %108, i64 %3854, i32 2
  %3867 = load i16, ptr %3866, align 4, !tbaa !105
  %3868 = sext i16 %3867 to i32
  %3869 = shl nsw i32 %3868, 1
  %3870 = sext i32 %3869 to i64
  %3871 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %3094, i64 %3870
  %3872 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %3871, i64 1
  %3873 = getelementptr inbounds %class.Vector, ptr %968, i64 %3854
  %3874 = getelementptr inbounds %class.Vector, ptr %974, i64 %3854
  %3875 = getelementptr inbounds %struct.CompAtom, ptr %108, i64 %3854, i32 1
  %3876 = load float, ptr %3875, align 8, !tbaa !104
  %3877 = fpext float %3876 to double
  %3878 = fmul double %3085, %3877
  %3879 = getelementptr inbounds %class.Vector, ptr %3855, i64 0, i32 2
  %3880 = load double, ptr %3879, align 8, !tbaa !49
  %3881 = fsub double %1054, %3880
  %3882 = load double, ptr %3872, align 8, !tbaa !109
  %3883 = fmul double %33, %3882
  %3884 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %3871, i64 1, i32 1
  %3885 = load double, ptr %3884, align 8, !tbaa !111
  %3886 = fmul double %33, %3885
  %3887 = fsub double %3857, %36
  %3888 = fmul double %1002, %3878
  %3889 = getelementptr inbounds double, ptr %3865, i64 8
  %3890 = getelementptr inbounds double, ptr %3865, i64 9
  %3891 = getelementptr inbounds double, ptr %3865, i64 10
  %3892 = getelementptr inbounds double, ptr %3865, i64 11
  %3893 = load <2 x double>, ptr %3855, align 8, !tbaa !19
  %3894 = fsub <2 x double> %1051, %3893
  call void @_Z24fep_vdw_forceandenergiesdddddddddiidddPdS_S_(double noundef %3883, double noundef %3886, double noundef %3887, double noundef %59, double noundef %65, double noundef %40, double noundef %41, double noundef %56, double noundef %63, i32 noundef %48, i32 noundef %49, double noundef %50, double noundef %51, double noundef %45, ptr noundef nonnull %3, ptr noundef nonnull %4, ptr noundef nonnull %5)
  %3895 = load double, ptr %3, align 8, !tbaa !19
  %3896 = load double, ptr %5, align 8, !tbaa !19
  %3897 = insertelement <2 x double> poison, double %3896, i64 0
  %3898 = insertelement <2 x double> %3897, double %3895, i64 1
  %3899 = fadd <2 x double> %3842, %3898
  %3900 = load double, ptr %3889, align 8, !tbaa !19
  %3901 = fmul double %3888, %3900
  %3902 = load double, ptr %3890, align 8, !tbaa !19
  %3903 = fmul double %3888, %3902
  %3904 = load double, ptr %3891, align 8, !tbaa !19
  %3905 = fmul double %3888, %3904
  %3906 = load double, ptr %3892, align 8, !tbaa !19
  %3907 = fmul double %3888, %3906
  %3908 = fmul double %3862, %3901
  %3909 = fmul double %3903, 2.500000e-01
  %3910 = call double @llvm.fmuladd.f64(double %3908, double 0x3FC5555555555555, double %3909)
  %3911 = fmul double %3905, 5.000000e-01
  %3912 = call double @llvm.fmuladd.f64(double %3910, double %3862, double %3911)
  %3913 = call double @llvm.fmuladd.f64(double %3912, double %3862, double %3907)
  %3914 = insertelement <2 x double> poison, double %3913, i64 0
  %3915 = shufflevector <2 x double> %3914, <2 x double> poison, <2 x i32> zeroinitializer
  %3916 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %1006, <2 x double> %3915, <2 x double> %3846)
  %3917 = call double @llvm.fmuladd.f64(double %3862, double %3901, double %3903)
  %3918 = call double @llvm.fmuladd.f64(double %3917, double %3862, double %3905)
  %3919 = fmul double %1014, %3918
  %3920 = load double, ptr %4, align 8, !tbaa !19
  %3921 = fadd double %3920, %3919
  %3922 = insertelement <2 x double> poison, double %3921, i64 0
  %3923 = shufflevector <2 x double> %3922, <2 x double> poison, <2 x i32> zeroinitializer
  %3924 = fmul <2 x double> %3894, %3923
  %3925 = fadd <2 x double> %3843, %3924
  %3926 = load <2 x double>, ptr %3873, align 8, !tbaa !19
  %3927 = fsub <2 x double> %3926, %3924
  store <2 x double> %3927, ptr %3873, align 8, !tbaa !19
  %3928 = fmul double %3881, %3921
  %3929 = fadd double %3840, %3928
  %3930 = getelementptr inbounds %class.Vector, ptr %968, i64 %3854, i32 2
  %3931 = load double, ptr %3930, align 8, !tbaa !112
  %3932 = fsub double %3931, %3928
  store double %3932, ptr %3930, align 8, !tbaa !112
  %3933 = shl nsw i32 %3851, 2
  %3934 = sext i32 %3933 to i64
  %3935 = getelementptr inbounds double, ptr %32, i64 %3934
  %3936 = getelementptr inbounds double, ptr %3865, i64 12
  %3937 = load double, ptr %3936, align 8, !tbaa !19
  %3938 = getelementptr inbounds double, ptr %3865, i64 13
  %3939 = load double, ptr %3938, align 8, !tbaa !19
  %3940 = getelementptr inbounds double, ptr %3865, i64 14
  %3941 = load double, ptr %3940, align 8, !tbaa !19
  %3942 = getelementptr inbounds double, ptr %3865, i64 15
  %3943 = load double, ptr %3942, align 8, !tbaa !19
  %3944 = load double, ptr %3935, align 8, !tbaa !19
  %3945 = call double @llvm.fmuladd.f64(double %35, double %3944, double %3943)
  %3946 = getelementptr inbounds double, ptr %3935, i64 1
  %3947 = load double, ptr %3946, align 8, !tbaa !19
  %3948 = call double @llvm.fmuladd.f64(double %1003, double %3947, double %3941)
  %3949 = getelementptr inbounds double, ptr %3935, i64 2
  %3950 = load double, ptr %3949, align 8, !tbaa !19
  %3951 = call double @llvm.fmuladd.f64(double %1004, double %3950, double %3939)
  %3952 = getelementptr inbounds double, ptr %3935, i64 3
  %3953 = load double, ptr %3952, align 8, !tbaa !19
  %3954 = call double @llvm.fmuladd.f64(double %1005, double %3953, double %3937)
  %3955 = fmul double %3878, %3954
  %3956 = fmul double %3878, %3951
  %3957 = fmul double %3878, %3948
  %3958 = fmul double %3878, %3945
  %3959 = fmul double %3862, %3955
  %3960 = fmul double %3956, 2.500000e-01
  %3961 = call double @llvm.fmuladd.f64(double %3959, double 0x3FC5555555555555, double %3960)
  %3962 = fmul double %3957, 5.000000e-01
  %3963 = call double @llvm.fmuladd.f64(double %3961, double %3862, double %3962)
  %3964 = call double @llvm.fmuladd.f64(double %3963, double %3862, double %3958)
  %3965 = insertelement <2 x double> poison, double %3964, i64 0
  %3966 = shufflevector <2 x double> %3965, <2 x double> poison, <2 x i32> zeroinitializer
  %3967 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %1006, <2 x double> %3966, <2 x double> %3845)
  %3968 = call double @llvm.fmuladd.f64(double %3862, double %3955, double %3956)
  %3969 = call double @llvm.fmuladd.f64(double %3968, double %3862, double %3957)
  %3970 = fmul double %1014, %3969
  %3971 = insertelement <2 x double> poison, double %3970, i64 0
  %3972 = shufflevector <2 x double> %3971, <2 x double> poison, <2 x i32> zeroinitializer
  %3973 = fmul <2 x double> %3894, %3972
  %3974 = fadd <2 x double> %3844, %3973
  %3975 = load <2 x double>, ptr %3874, align 8, !tbaa !19
  %3976 = fsub <2 x double> %3975, %3973
  store <2 x double> %3976, ptr %3874, align 8, !tbaa !19
  %3977 = fmul double %3881, %3970
  %3978 = fadd double %3841, %3977
  %3979 = getelementptr inbounds %class.Vector, ptr %974, i64 %3854, i32 2
  %3980 = load double, ptr %3979, align 8, !tbaa !112
  %3981 = fsub double %3980, %3977
  store double %3981, ptr %3979, align 8, !tbaa !112
  %3982 = add nuw nsw i64 %3839, 1
  %3983 = icmp eq i64 %3982, %3837
  br i1 %3983, label %3984, label %3838

3984:                                             ; preds = %3838, %3824
  %3985 = phi double [ %3825, %3824 ], [ %3978, %3838 ]
  %3986 = phi double [ %3826, %3824 ], [ %3929, %3838 ]
  %3987 = phi <2 x double> [ %3827, %3824 ], [ %3899, %3838 ]
  %3988 = phi <2 x double> [ %3828, %3824 ], [ %3925, %3838 ]
  %3989 = phi <2 x double> [ %3829, %3824 ], [ %3974, %3838 ]
  %3990 = phi <2 x double> [ %3830, %3824 ], [ %3967, %3838 ]
  %3991 = phi <2 x double> [ %3831, %3824 ], [ %3916, %3838 ]
  %3992 = load double, ptr @_ZN20ComputeNonbondedUtil7cutoff2E, align 8, !tbaa !19
  %3993 = call noundef i32 @_Z22pairlist_from_pairlistddddPK8CompAtomPKtiPtdPd(double noundef %3992, double noundef %3096, double noundef %3097, double noundef %1054, ptr noundef %108, ptr noundef %3071, i32 noundef %3072, ptr noundef %161, double noundef %36, ptr noundef %207)
  %3994 = add nsw i32 %3834, %3993
  %3995 = icmp sgt i32 %3993, 0
  br i1 %3995, label %3996, label %4144

3996:                                             ; preds = %3984
  %3997 = zext i32 %3993 to i64
  br label %3998

3998:                                             ; preds = %3996, %3998
  %3999 = phi i64 [ 0, %3996 ], [ %4142, %3998 ]
  %4000 = phi double [ %3986, %3996 ], [ %4089, %3998 ]
  %4001 = phi double [ %3985, %3996 ], [ %4138, %3998 ]
  %4002 = phi <2 x double> [ %3987, %3996 ], [ %4059, %3998 ]
  %4003 = phi <2 x double> [ %3988, %3996 ], [ %4085, %3998 ]
  %4004 = phi <2 x double> [ %3989, %3996 ], [ %4134, %3998 ]
  %4005 = phi <2 x double> [ %3990, %3996 ], [ %4127, %3998 ]
  %4006 = phi <2 x double> [ %3991, %3996 ], [ %4076, %3998 ]
  %4007 = shl nuw nsw i64 %3999, 1
  %4008 = getelementptr inbounds i32, ptr %208, i64 %4007
  %4009 = load i32, ptr %4008, align 4, !tbaa !5
  %4010 = ashr i32 %4009, 14
  %4011 = add nsw i32 %4010, %39
  %4012 = getelementptr inbounds i16, ptr %161, i64 %3999
  %4013 = load i16, ptr %4012, align 2, !tbaa !44
  %4014 = zext i16 %4013 to i64
  %4015 = getelementptr inbounds %struct.CompAtom, ptr %108, i64 %4014
  %4016 = getelementptr inbounds double, ptr %207, i64 %3999
  %4017 = load double, ptr %4016, align 8, !tbaa !19
  %4018 = load ptr, ptr @_ZN20ComputeNonbondedUtil8r2_tableE, align 8, !tbaa !23
  %4019 = sext i32 %4011 to i64
  %4020 = getelementptr inbounds double, ptr %4018, i64 %4019
  %4021 = load double, ptr %4020, align 8, !tbaa !19
  %4022 = fsub double %4017, %4021
  %4023 = shl nsw i32 %4011, 4
  %4024 = sext i32 %4023 to i64
  %4025 = getelementptr inbounds double, ptr %31, i64 %4024
  %4026 = getelementptr inbounds %struct.CompAtom, ptr %108, i64 %4014, i32 2
  %4027 = load i16, ptr %4026, align 4, !tbaa !105
  %4028 = sext i16 %4027 to i32
  %4029 = shl nsw i32 %4028, 1
  %4030 = sext i32 %4029 to i64
  %4031 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %3094, i64 %4030
  %4032 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %4031, i64 1
  %4033 = getelementptr inbounds %class.Vector, ptr %968, i64 %4014
  %4034 = getelementptr inbounds %class.Vector, ptr %974, i64 %4014
  %4035 = getelementptr inbounds %struct.CompAtom, ptr %108, i64 %4014, i32 1
  %4036 = load float, ptr %4035, align 8, !tbaa !104
  %4037 = fpext float %4036 to double
  %4038 = fmul double %3085, %4037
  %4039 = getelementptr inbounds %class.Vector, ptr %4015, i64 0, i32 2
  %4040 = load double, ptr %4039, align 8, !tbaa !49
  %4041 = fsub double %1054, %4040
  %4042 = load double, ptr %4032, align 8, !tbaa !109
  %4043 = fmul double %33, %4042
  %4044 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %4031, i64 1, i32 1
  %4045 = load double, ptr %4044, align 8, !tbaa !111
  %4046 = fmul double %33, %4045
  %4047 = fsub double %4017, %36
  %4048 = fmul double %1002, %4038
  %4049 = getelementptr inbounds double, ptr %4025, i64 8
  %4050 = getelementptr inbounds double, ptr %4025, i64 9
  %4051 = getelementptr inbounds double, ptr %4025, i64 10
  %4052 = getelementptr inbounds double, ptr %4025, i64 11
  %4053 = load <2 x double>, ptr %4015, align 8, !tbaa !19
  %4054 = fsub <2 x double> %1051, %4053
  call void @_Z24fep_vdw_forceandenergiesdddddddddiidddPdS_S_(double noundef %4043, double noundef %4046, double noundef %4047, double noundef %85, double noundef %92, double noundef %40, double noundef %41, double noundef %83, double noundef %90, i32 noundef %48, i32 noundef %49, double noundef %50, double noundef %51, double noundef %45, ptr noundef nonnull %3, ptr noundef nonnull %4, ptr noundef nonnull %5)
  %4055 = load double, ptr %3, align 8, !tbaa !19
  %4056 = load double, ptr %5, align 8, !tbaa !19
  %4057 = insertelement <2 x double> poison, double %4056, i64 0
  %4058 = insertelement <2 x double> %4057, double %4055, i64 1
  %4059 = fadd <2 x double> %4002, %4058
  %4060 = load double, ptr %4049, align 8, !tbaa !19
  %4061 = fmul double %4048, %4060
  %4062 = load double, ptr %4050, align 8, !tbaa !19
  %4063 = fmul double %4048, %4062
  %4064 = load double, ptr %4051, align 8, !tbaa !19
  %4065 = fmul double %4048, %4064
  %4066 = load double, ptr %4052, align 8, !tbaa !19
  %4067 = fmul double %4048, %4066
  %4068 = fmul double %4022, %4061
  %4069 = fmul double %4063, 2.500000e-01
  %4070 = call double @llvm.fmuladd.f64(double %4068, double 0x3FC5555555555555, double %4069)
  %4071 = fmul double %4065, 5.000000e-01
  %4072 = call double @llvm.fmuladd.f64(double %4070, double %4022, double %4071)
  %4073 = call double @llvm.fmuladd.f64(double %4072, double %4022, double %4067)
  %4074 = insertelement <2 x double> poison, double %4073, i64 0
  %4075 = shufflevector <2 x double> %4074, <2 x double> poison, <2 x i32> zeroinitializer
  %4076 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %1007, <2 x double> %4075, <2 x double> %4006)
  %4077 = call double @llvm.fmuladd.f64(double %4022, double %4061, double %4063)
  %4078 = call double @llvm.fmuladd.f64(double %4077, double %4022, double %4065)
  %4079 = fmul double %1015, %4078
  %4080 = load double, ptr %4, align 8, !tbaa !19
  %4081 = fadd double %4080, %4079
  %4082 = insertelement <2 x double> poison, double %4081, i64 0
  %4083 = shufflevector <2 x double> %4082, <2 x double> poison, <2 x i32> zeroinitializer
  %4084 = fmul <2 x double> %4054, %4083
  %4085 = fadd <2 x double> %4003, %4084
  %4086 = load <2 x double>, ptr %4033, align 8, !tbaa !19
  %4087 = fsub <2 x double> %4086, %4084
  store <2 x double> %4087, ptr %4033, align 8, !tbaa !19
  %4088 = fmul double %4041, %4081
  %4089 = fadd double %4000, %4088
  %4090 = getelementptr inbounds %class.Vector, ptr %968, i64 %4014, i32 2
  %4091 = load double, ptr %4090, align 8, !tbaa !112
  %4092 = fsub double %4091, %4088
  store double %4092, ptr %4090, align 8, !tbaa !112
  %4093 = shl nsw i32 %4011, 2
  %4094 = sext i32 %4093 to i64
  %4095 = getelementptr inbounds double, ptr %32, i64 %4094
  %4096 = getelementptr inbounds double, ptr %4025, i64 12
  %4097 = load double, ptr %4096, align 8, !tbaa !19
  %4098 = getelementptr inbounds double, ptr %4025, i64 13
  %4099 = load double, ptr %4098, align 8, !tbaa !19
  %4100 = getelementptr inbounds double, ptr %4025, i64 14
  %4101 = load double, ptr %4100, align 8, !tbaa !19
  %4102 = getelementptr inbounds double, ptr %4025, i64 15
  %4103 = load double, ptr %4102, align 8, !tbaa !19
  %4104 = load double, ptr %4095, align 8, !tbaa !19
  %4105 = call double @llvm.fmuladd.f64(double %35, double %4104, double %4103)
  %4106 = getelementptr inbounds double, ptr %4095, i64 1
  %4107 = load double, ptr %4106, align 8, !tbaa !19
  %4108 = call double @llvm.fmuladd.f64(double %1003, double %4107, double %4101)
  %4109 = getelementptr inbounds double, ptr %4095, i64 2
  %4110 = load double, ptr %4109, align 8, !tbaa !19
  %4111 = call double @llvm.fmuladd.f64(double %1004, double %4110, double %4099)
  %4112 = getelementptr inbounds double, ptr %4095, i64 3
  %4113 = load double, ptr %4112, align 8, !tbaa !19
  %4114 = call double @llvm.fmuladd.f64(double %1005, double %4113, double %4097)
  %4115 = fmul double %4038, %4114
  %4116 = fmul double %4038, %4111
  %4117 = fmul double %4038, %4108
  %4118 = fmul double %4038, %4105
  %4119 = fmul double %4022, %4115
  %4120 = fmul double %4116, 2.500000e-01
  %4121 = call double @llvm.fmuladd.f64(double %4119, double 0x3FC5555555555555, double %4120)
  %4122 = fmul double %4117, 5.000000e-01
  %4123 = call double @llvm.fmuladd.f64(double %4121, double %4022, double %4122)
  %4124 = call double @llvm.fmuladd.f64(double %4123, double %4022, double %4118)
  %4125 = insertelement <2 x double> poison, double %4124, i64 0
  %4126 = shufflevector <2 x double> %4125, <2 x double> poison, <2 x i32> zeroinitializer
  %4127 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %1007, <2 x double> %4126, <2 x double> %4005)
  %4128 = call double @llvm.fmuladd.f64(double %4022, double %4115, double %4116)
  %4129 = call double @llvm.fmuladd.f64(double %4128, double %4022, double %4117)
  %4130 = fmul double %1015, %4129
  %4131 = insertelement <2 x double> poison, double %4130, i64 0
  %4132 = shufflevector <2 x double> %4131, <2 x double> poison, <2 x i32> zeroinitializer
  %4133 = fmul <2 x double> %4054, %4132
  %4134 = fadd <2 x double> %4004, %4133
  %4135 = load <2 x double>, ptr %4034, align 8, !tbaa !19
  %4136 = fsub <2 x double> %4135, %4133
  store <2 x double> %4136, ptr %4034, align 8, !tbaa !19
  %4137 = fmul double %4041, %4130
  %4138 = fadd double %4001, %4137
  %4139 = getelementptr inbounds %class.Vector, ptr %974, i64 %4014, i32 2
  %4140 = load double, ptr %4139, align 8, !tbaa !112
  %4141 = fsub double %4140, %4137
  store double %4141, ptr %4139, align 8, !tbaa !112
  %4142 = add nuw nsw i64 %3999, 1
  %4143 = icmp eq i64 %4142, %3997
  br i1 %4143, label %4144, label %3998

4144:                                             ; preds = %3998, %3984
  %4145 = phi double [ %3985, %3984 ], [ %4138, %3998 ]
  %4146 = phi double [ %3986, %3984 ], [ %4089, %3998 ]
  %4147 = phi <2 x double> [ %3987, %3984 ], [ %4059, %3998 ]
  %4148 = phi <2 x double> [ %3988, %3984 ], [ %4085, %3998 ]
  %4149 = phi <2 x double> [ %3989, %3984 ], [ %4134, %3998 ]
  %4150 = phi <2 x double> [ %3990, %3984 ], [ %4127, %3998 ]
  %4151 = phi <2 x double> [ %3991, %3984 ], [ %4076, %3998 ]
  %4152 = load double, ptr @_ZN20ComputeNonbondedUtil7cutoff2E, align 8, !tbaa !19
  %4153 = call noundef i32 @_Z22pairlist_from_pairlistddddPK8CompAtomPKtiPtdPd(double noundef %4152, double noundef %3096, double noundef %3097, double noundef %1054, ptr noundef %108, ptr noundef %3063, i32 noundef %3064, ptr noundef %161, double noundef %36, ptr noundef %207)
  %4154 = add nsw i32 %3994, %4153
  %4155 = icmp sgt i32 %4153, 0
  br i1 %4155, label %4156, label %4243

4156:                                             ; preds = %4144
  %4157 = load ptr, ptr @_ZN20ComputeNonbondedUtil8r2_tableE, align 8, !tbaa !23
  %4158 = zext i32 %4153 to i64
  br label %4159

4159:                                             ; preds = %4156, %4159
  %4160 = phi i64 [ 0, %4156 ], [ %4241, %4159 ]
  %4161 = phi double [ %4145, %4156 ], [ %4237, %4159 ]
  %4162 = phi <2 x double> [ %4149, %4156 ], [ %4233, %4159 ]
  %4163 = phi <2 x double> [ %4150, %4156 ], [ %4224, %4159 ]
  %4164 = shl nuw nsw i64 %4160, 1
  %4165 = getelementptr inbounds i32, ptr %208, i64 %4164
  %4166 = load i32, ptr %4165, align 4, !tbaa !5
  %4167 = ashr i32 %4166, 14
  %4168 = add nsw i32 %4167, %39
  %4169 = getelementptr inbounds i16, ptr %161, i64 %4160
  %4170 = load i16, ptr %4169, align 2, !tbaa !44
  %4171 = zext i16 %4170 to i64
  %4172 = getelementptr inbounds %struct.CompAtom, ptr %108, i64 %4171
  %4173 = getelementptr inbounds double, ptr %207, i64 %4160
  %4174 = load double, ptr %4173, align 8, !tbaa !19
  %4175 = sext i32 %4168 to i64
  %4176 = getelementptr inbounds double, ptr %4157, i64 %4175
  %4177 = load double, ptr %4176, align 8, !tbaa !19
  %4178 = fsub double %4174, %4177
  %4179 = shl nsw i32 %4168, 4
  %4180 = sext i32 %4179 to i64
  %4181 = getelementptr inbounds double, ptr %31, i64 %4180
  %4182 = getelementptr inbounds %class.Vector, ptr %974, i64 %4171
  %4183 = getelementptr inbounds %struct.CompAtom, ptr %108, i64 %4171, i32 1
  %4184 = load float, ptr %4183, align 8, !tbaa !104
  %4185 = fpext float %4184 to double
  %4186 = fmul double %3085, %4185
  %4187 = getelementptr inbounds %class.Vector, ptr %4172, i64 0, i32 2
  %4188 = load double, ptr %4187, align 8, !tbaa !49
  %4189 = fsub double %1054, %4188
  %4190 = shl nsw i32 %4168, 2
  %4191 = sext i32 %4190 to i64
  %4192 = getelementptr inbounds double, ptr %32, i64 %4191
  %4193 = getelementptr inbounds double, ptr %4181, i64 12
  %4194 = load double, ptr %4193, align 8, !tbaa !19
  %4195 = getelementptr inbounds double, ptr %4181, i64 13
  %4196 = load double, ptr %4195, align 8, !tbaa !19
  %4197 = getelementptr inbounds double, ptr %4181, i64 14
  %4198 = load double, ptr %4197, align 8, !tbaa !19
  %4199 = getelementptr inbounds double, ptr %4181, i64 15
  %4200 = load double, ptr %4199, align 8, !tbaa !19
  %4201 = load double, ptr %4192, align 8, !tbaa !19
  %4202 = fadd double %4200, %4201
  %4203 = getelementptr inbounds double, ptr %4192, i64 1
  %4204 = load double, ptr %4203, align 8, !tbaa !19
  %4205 = call double @llvm.fmuladd.f64(double %4204, double 2.000000e+00, double %4198)
  %4206 = getelementptr inbounds double, ptr %4192, i64 2
  %4207 = load double, ptr %4206, align 8, !tbaa !19
  %4208 = call double @llvm.fmuladd.f64(double %4207, double 4.000000e+00, double %4196)
  %4209 = getelementptr inbounds double, ptr %4192, i64 3
  %4210 = load double, ptr %4209, align 8, !tbaa !19
  %4211 = call double @llvm.fmuladd.f64(double %4210, double 6.000000e+00, double %4194)
  %4212 = fmul double %4186, %4211
  %4213 = fmul double %4186, %4208
  %4214 = fmul double %4186, %4205
  %4215 = fmul double %4186, %4202
  %4216 = fmul double %4178, %4212
  %4217 = fmul double %4213, 2.500000e-01
  %4218 = call double @llvm.fmuladd.f64(double %4216, double 0x3FC5555555555555, double %4217)
  %4219 = fmul double %4214, 5.000000e-01
  %4220 = call double @llvm.fmuladd.f64(double %4218, double %4178, double %4219)
  %4221 = call double @llvm.fmuladd.f64(double %4220, double %4178, double %4215)
  %4222 = insertelement <2 x double> poison, double %4221, i64 0
  %4223 = shufflevector <2 x double> %4222, <2 x double> poison, <2 x i32> zeroinitializer
  %4224 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %1006, <2 x double> %4223, <2 x double> %4163)
  %4225 = call double @llvm.fmuladd.f64(double %4178, double %4212, double %4213)
  %4226 = call double @llvm.fmuladd.f64(double %4225, double %4178, double %4214)
  %4227 = fmul double %1016, %4226
  %4228 = load <2 x double>, ptr %4172, align 8, !tbaa !19
  %4229 = fsub <2 x double> %1051, %4228
  %4230 = insertelement <2 x double> poison, double %4227, i64 0
  %4231 = shufflevector <2 x double> %4230, <2 x double> poison, <2 x i32> zeroinitializer
  %4232 = fmul <2 x double> %4229, %4231
  %4233 = fadd <2 x double> %4162, %4232
  %4234 = load <2 x double>, ptr %4182, align 8, !tbaa !19
  %4235 = fsub <2 x double> %4234, %4232
  store <2 x double> %4235, ptr %4182, align 8, !tbaa !19
  %4236 = fmul double %4189, %4227
  %4237 = fadd double %4161, %4236
  %4238 = getelementptr inbounds %class.Vector, ptr %974, i64 %4171, i32 2
  %4239 = load double, ptr %4238, align 8, !tbaa !112
  %4240 = fsub double %4239, %4236
  store double %4240, ptr %4238, align 8, !tbaa !112
  %4241 = add nuw nsw i64 %4160, 1
  %4242 = icmp eq i64 %4241, %4158
  br i1 %4242, label %4243, label %4159

4243:                                             ; preds = %4159, %4144
  %4244 = phi double [ %4145, %4144 ], [ %4237, %4159 ]
  %4245 = phi <2 x double> [ %4149, %4144 ], [ %4233, %4159 ]
  %4246 = phi <2 x double> [ %4150, %4144 ], [ %4224, %4159 ]
  %4247 = load double, ptr @_ZN20ComputeNonbondedUtil7cutoff2E, align 8, !tbaa !19
  %4248 = call noundef i32 @_Z22pairlist_from_pairlistddddPK8CompAtomPKtiPtdPd(double noundef %4247, double noundef %3096, double noundef %3097, double noundef %1054, ptr noundef %108, ptr noundef %3069, i32 noundef %3070, ptr noundef %161, double noundef %36, ptr noundef %207)
  %4249 = add nsw i32 %4154, %4248
  %4250 = icmp sgt i32 %4248, 0
  br i1 %4250, label %4251, label %4338

4251:                                             ; preds = %4243
  %4252 = load ptr, ptr @_ZN20ComputeNonbondedUtil8r2_tableE, align 8, !tbaa !23
  %4253 = zext i32 %4248 to i64
  br label %4254

4254:                                             ; preds = %4251, %4254
  %4255 = phi i64 [ 0, %4251 ], [ %4336, %4254 ]
  %4256 = phi double [ %4244, %4251 ], [ %4332, %4254 ]
  %4257 = phi <2 x double> [ %4245, %4251 ], [ %4328, %4254 ]
  %4258 = phi <2 x double> [ %4246, %4251 ], [ %4319, %4254 ]
  %4259 = shl nuw nsw i64 %4255, 1
  %4260 = getelementptr inbounds i32, ptr %208, i64 %4259
  %4261 = load i32, ptr %4260, align 4, !tbaa !5
  %4262 = ashr i32 %4261, 14
  %4263 = add nsw i32 %4262, %39
  %4264 = getelementptr inbounds i16, ptr %161, i64 %4255
  %4265 = load i16, ptr %4264, align 2, !tbaa !44
  %4266 = zext i16 %4265 to i64
  %4267 = getelementptr inbounds %struct.CompAtom, ptr %108, i64 %4266
  %4268 = getelementptr inbounds double, ptr %207, i64 %4255
  %4269 = load double, ptr %4268, align 8, !tbaa !19
  %4270 = sext i32 %4263 to i64
  %4271 = getelementptr inbounds double, ptr %4252, i64 %4270
  %4272 = load double, ptr %4271, align 8, !tbaa !19
  %4273 = fsub double %4269, %4272
  %4274 = shl nsw i32 %4263, 4
  %4275 = sext i32 %4274 to i64
  %4276 = getelementptr inbounds double, ptr %31, i64 %4275
  %4277 = getelementptr inbounds %class.Vector, ptr %974, i64 %4266
  %4278 = getelementptr inbounds %struct.CompAtom, ptr %108, i64 %4266, i32 1
  %4279 = load float, ptr %4278, align 8, !tbaa !104
  %4280 = fpext float %4279 to double
  %4281 = fmul double %3085, %4280
  %4282 = getelementptr inbounds %class.Vector, ptr %4267, i64 0, i32 2
  %4283 = load double, ptr %4282, align 8, !tbaa !49
  %4284 = fsub double %1054, %4283
  %4285 = shl nsw i32 %4263, 2
  %4286 = sext i32 %4285 to i64
  %4287 = getelementptr inbounds double, ptr %32, i64 %4286
  %4288 = getelementptr inbounds double, ptr %4276, i64 12
  %4289 = load double, ptr %4288, align 8, !tbaa !19
  %4290 = getelementptr inbounds double, ptr %4276, i64 13
  %4291 = load double, ptr %4290, align 8, !tbaa !19
  %4292 = getelementptr inbounds double, ptr %4276, i64 14
  %4293 = load double, ptr %4292, align 8, !tbaa !19
  %4294 = getelementptr inbounds double, ptr %4276, i64 15
  %4295 = load double, ptr %4294, align 8, !tbaa !19
  %4296 = load double, ptr %4287, align 8, !tbaa !19
  %4297 = fadd double %4295, %4296
  %4298 = getelementptr inbounds double, ptr %4287, i64 1
  %4299 = load double, ptr %4298, align 8, !tbaa !19
  %4300 = call double @llvm.fmuladd.f64(double %4299, double 2.000000e+00, double %4293)
  %4301 = getelementptr inbounds double, ptr %4287, i64 2
  %4302 = load double, ptr %4301, align 8, !tbaa !19
  %4303 = call double @llvm.fmuladd.f64(double %4302, double 4.000000e+00, double %4291)
  %4304 = getelementptr inbounds double, ptr %4287, i64 3
  %4305 = load double, ptr %4304, align 8, !tbaa !19
  %4306 = call double @llvm.fmuladd.f64(double %4305, double 6.000000e+00, double %4289)
  %4307 = fmul double %4281, %4306
  %4308 = fmul double %4281, %4303
  %4309 = fmul double %4281, %4300
  %4310 = fmul double %4281, %4297
  %4311 = fmul double %4273, %4307
  %4312 = fmul double %4308, 2.500000e-01
  %4313 = call double @llvm.fmuladd.f64(double %4311, double 0x3FC5555555555555, double %4312)
  %4314 = fmul double %4309, 5.000000e-01
  %4315 = call double @llvm.fmuladd.f64(double %4313, double %4273, double %4314)
  %4316 = call double @llvm.fmuladd.f64(double %4315, double %4273, double %4310)
  %4317 = insertelement <2 x double> poison, double %4316, i64 0
  %4318 = shufflevector <2 x double> %4317, <2 x double> poison, <2 x i32> zeroinitializer
  %4319 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %1007, <2 x double> %4318, <2 x double> %4258)
  %4320 = call double @llvm.fmuladd.f64(double %4273, double %4307, double %4308)
  %4321 = call double @llvm.fmuladd.f64(double %4320, double %4273, double %4309)
  %4322 = fmul double %1017, %4321
  %4323 = load <2 x double>, ptr %4267, align 8, !tbaa !19
  %4324 = fsub <2 x double> %1051, %4323
  %4325 = insertelement <2 x double> poison, double %4322, i64 0
  %4326 = shufflevector <2 x double> %4325, <2 x double> poison, <2 x i32> zeroinitializer
  %4327 = fmul <2 x double> %4324, %4326
  %4328 = fadd <2 x double> %4257, %4327
  %4329 = load <2 x double>, ptr %4277, align 8, !tbaa !19
  %4330 = fsub <2 x double> %4329, %4327
  store <2 x double> %4330, ptr %4277, align 8, !tbaa !19
  %4331 = fmul double %4284, %4322
  %4332 = fadd double %4256, %4331
  %4333 = getelementptr inbounds %class.Vector, ptr %974, i64 %4266, i32 2
  %4334 = load double, ptr %4333, align 8, !tbaa !112
  %4335 = fsub double %4334, %4331
  store double %4335, ptr %4333, align 8, !tbaa !112
  %4336 = add nuw nsw i64 %4255, 1
  %4337 = icmp eq i64 %4336, %4253
  br i1 %4337, label %4338, label %4254

4338:                                             ; preds = %4254, %4243
  %4339 = phi double [ %4244, %4243 ], [ %4332, %4254 ]
  %4340 = phi <2 x double> [ %4245, %4243 ], [ %4328, %4254 ]
  %4341 = phi <2 x double> [ %4246, %4243 ], [ %4319, %4254 ]
  %4342 = getelementptr inbounds %class.Vector, ptr %968, i64 %1033
  %4343 = load <2 x double>, ptr %4342, align 8, !tbaa !19
  %4344 = fadd <2 x double> %4148, %4343
  store <2 x double> %4344, ptr %4342, align 8, !tbaa !19
  %4345 = getelementptr inbounds %class.Vector, ptr %968, i64 %1033, i32 2
  %4346 = load double, ptr %4345, align 8, !tbaa !112
  %4347 = fadd double %4146, %4346
  store double %4347, ptr %4345, align 8, !tbaa !112
  %4348 = getelementptr inbounds %class.Vector, ptr %974, i64 %1033
  %4349 = load <2 x double>, ptr %4348, align 8, !tbaa !19
  %4350 = fadd <2 x double> %4340, %4349
  store <2 x double> %4350, ptr %4348, align 8, !tbaa !19
  %4351 = getelementptr inbounds %class.Vector, ptr %974, i64 %1033, i32 2
  %4352 = load double, ptr %4351, align 8, !tbaa !112
  %4353 = fadd double %4339, %4352
  store double %4353, ptr %4351, align 8, !tbaa !112
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %5) #11
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %4) #11
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %3) #11
  %4354 = shufflevector <2 x double> %4151, <2 x double> poison, <2 x i32> <i32 1, i32 poison>
  %4355 = shufflevector <2 x double> %4354, <2 x double> %4341, <2 x i32> <i32 0, i32 3>
  %4356 = shufflevector <2 x double> %4151, <2 x double> %4341, <2 x i32> <i32 0, i32 2>
  br label %4357

4357:                                             ; preds = %4338, %1044
  %4358 = phi i32 [ %1045, %1044 ], [ %1049, %4338 ]
  %4359 = phi i32 [ %1028, %1044 ], [ %3073, %4338 ]
  %4360 = phi i32 [ %1027, %1044 ], [ %3074, %4338 ]
  %4361 = phi i32 [ %1026, %1044 ], [ %3075, %4338 ]
  %4362 = phi i32 [ %1025, %1044 ], [ %3076, %4338 ]
  %4363 = phi i32 [ %1024, %1044 ], [ %1059, %4338 ]
  %4364 = phi ptr [ %1023, %1044 ], [ %3077, %4338 ]
  %4365 = phi ptr [ %1022, %1044 ], [ %3078, %4338 ]
  %4366 = phi ptr [ %1021, %1044 ], [ %3079, %4338 ]
  %4367 = phi i32 [ %1047, %1044 ], [ %1020, %4338 ]
  %4368 = phi i32 [ %1019, %1044 ], [ %4249, %4338 ]
  %4369 = phi <2 x double> [ %1030, %1044 ], [ %4355, %4338 ]
  %4370 = phi <2 x double> [ %1031, %1044 ], [ %4356, %4338 ]
  %4371 = phi <2 x double> [ %1032, %1044 ], [ %4147, %4338 ]
  %4372 = add nsw i32 %4367, 1
  %4373 = icmp slt i32 %4372, %978
  br i1 %4373, label %1018, label %4374

4374:                                             ; preds = %4357, %962
  %4375 = phi ptr [ null, %962 ], [ %4366, %4357 ]
  %4376 = phi i32 [ 0, %962 ], [ %4368, %4357 ]
  %4377 = phi <2 x double> [ zeroinitializer, %962 ], [ %4369, %4357 ]
  %4378 = phi <2 x double> [ zeroinitializer, %962 ], [ %4370, %4357 ]
  %4379 = phi <2 x double> [ zeroinitializer, %962 ], [ %4371, %4357 ]
  %4380 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 3
  %4381 = load ptr, ptr %4380, align 8, !tbaa !23
  %4382 = icmp sgt i32 %103, 0
  br i1 %4382, label %4383, label %4424

4383:                                             ; preds = %4374
  %4384 = zext i32 %103 to i64
  br label %4392

4385:                                             ; preds = %4392
  %4386 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 4
  %4387 = load ptr, ptr %4386, align 8, !tbaa !23
  %4388 = extractelement <2 x double> %4421, i64 0
  %4389 = extractelement <2 x double> %4421, i64 1
  br i1 %4382, label %4390, label %4424

4390:                                             ; preds = %4385
  %4391 = zext i32 %103 to i64
  br label %4470

4392:                                             ; preds = %4383, %4392
  %4393 = phi i64 [ 0, %4383 ], [ %4422, %4392 ]
  %4394 = phi <4 x double> [ zeroinitializer, %4383 ], [ %4415, %4392 ]
  %4395 = phi <2 x double> [ zeroinitializer, %4383 ], [ %4421, %4392 ]
  %4396 = getelementptr inbounds %class.Vector, ptr %968, i64 %4393
  %4397 = getelementptr inbounds %class.Vector, ptr %4381, i64 %4393
  %4398 = load <2 x double>, ptr %4396, align 8, !tbaa !19
  %4399 = load <2 x double>, ptr %4397, align 8, !tbaa !19
  %4400 = fadd <2 x double> %4398, %4399
  store <2 x double> %4400, ptr %4397, align 8, !tbaa !19
  %4401 = getelementptr inbounds %class.Vector, ptr %968, i64 %4393, i32 2
  %4402 = load double, ptr %4401, align 8, !tbaa !112
  %4403 = getelementptr inbounds %class.Vector, ptr %4381, i64 %4393, i32 2
  %4404 = load double, ptr %4403, align 8, !tbaa !112
  %4405 = fadd double %4402, %4404
  store double %4405, ptr %4403, align 8, !tbaa !112
  %4406 = getelementptr inbounds %struct.CompAtom, ptr %106, i64 %4393
  %4407 = load <2 x double>, ptr %4406, align 8, !tbaa !19
  %4408 = getelementptr inbounds %class.Vector, ptr %4406, i64 0, i32 2
  %4409 = load double, ptr %4408, align 8, !tbaa !49
  %4410 = load <2 x double>, ptr %4396, align 8, !tbaa !19
  %4411 = shufflevector <2 x double> %4410, <2 x double> poison, <4 x i32> <i32 0, i32 0, i32 0, i32 1>
  %4412 = shufflevector <2 x double> %4407, <2 x double> poison, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>
  %4413 = insertelement <4 x double> %4412, double %4409, i64 2
  %4414 = shufflevector <4 x double> %4413, <4 x double> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 1>
  %4415 = call <4 x double> @llvm.fmuladd.v4f64(<4 x double> %4411, <4 x double> %4414, <4 x double> %4394)
  %4416 = load double, ptr %4401, align 8, !tbaa !112
  %4417 = shufflevector <2 x double> %4410, <2 x double> poison, <2 x i32> <i32 1, i32 poison>
  %4418 = insertelement <2 x double> %4417, double %4416, i64 1
  %4419 = insertelement <2 x double> poison, double %4409, i64 0
  %4420 = shufflevector <2 x double> %4419, <2 x double> poison, <2 x i32> zeroinitializer
  %4421 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %4418, <2 x double> %4420, <2 x double> %4395)
  %4422 = add nuw nsw i64 %4393, 1
  %4423 = icmp eq i64 %4422, %4384
  br i1 %4423, label %4385, label %4392

4424:                                             ; preds = %4470, %4374, %4385
  %4425 = phi double [ %4388, %4385 ], [ 0.000000e+00, %4374 ], [ %4388, %4470 ]
  %4426 = phi double [ %4389, %4385 ], [ 0.000000e+00, %4374 ], [ %4389, %4470 ]
  %4427 = phi <4 x double> [ zeroinitializer, %4385 ], [ zeroinitializer, %4374 ], [ %4500, %4470 ]
  %4428 = phi <4 x double> [ %4415, %4385 ], [ zeroinitializer, %4374 ], [ %4415, %4470 ]
  %4429 = phi <2 x double> [ zeroinitializer, %4385 ], [ zeroinitializer, %4374 ], [ %4495, %4470 ]
  %4430 = sitofp i32 %4376 to double
  %4431 = getelementptr inbounds double, ptr %10, i64 22
  %4432 = getelementptr inbounds double, ptr %10, i64 4
  %4433 = load <4 x double>, ptr %4432, align 8, !tbaa !19
  %4434 = shufflevector <4 x double> %4428, <4 x double> poison, <4 x i32> <i32 1, i32 2, i32 poison, i32 3>
  %4435 = shufflevector <4 x double> %4434, <4 x double> poison, <4 x i32> <i32 0, i32 1, i32 0, i32 3>
  %4436 = fadd <4 x double> %4435, %4433
  store <4 x double> %4436, ptr %4432, align 8, !tbaa !19
  %4437 = getelementptr inbounds double, ptr %10, i64 8
  %4438 = load <4 x double>, ptr %4437, align 8, !tbaa !19
  %4439 = insertelement <4 x double> poison, double %4425, i64 0
  %4440 = shufflevector <4 x double> %4439, <4 x double> %4428, <4 x i32> <i32 0, i32 6, i32 poison, i32 poison>
  %4441 = insertelement <4 x double> %4440, double %4426, i64 3
  %4442 = shufflevector <4 x double> %4441, <4 x double> poison, <4 x i32> <i32 0, i32 1, i32 0, i32 3>
  %4443 = fadd <4 x double> %4442, %4438
  store <4 x double> %4443, ptr %4437, align 8, !tbaa !19
  %4444 = load <4 x double>, ptr %10, align 8, !tbaa !19
  %4445 = shufflevector <2 x double> %4379, <2 x double> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %4446 = shufflevector <2 x double> %4377, <2 x double> %4379, <4 x i32> <i32 0, i32 1, i32 3, i32 poison>
  %4447 = shufflevector <4 x double> %4446, <4 x double> %4428, <4 x i32> <i32 0, i32 1, i32 2, i32 4>
  %4448 = fadd <4 x double> %4447, %4444
  store <4 x double> %4448, ptr %10, align 8, !tbaa !19
  %4449 = load <4 x double>, ptr %4431, align 8, !tbaa !19
  %4450 = shufflevector <2 x double> %4378, <2 x double> poison, <4 x i32> <i32 poison, i32 0, i32 1, i32 poison>
  %4451 = shufflevector <4 x double> %4450, <4 x double> %4445, <4 x i32> <i32 poison, i32 1, i32 2, i32 4>
  %4452 = insertelement <4 x double> %4451, double %4430, i64 0
  %4453 = fadd <4 x double> %4449, %4452
  store <4 x double> %4453, ptr %4431, align 8, !tbaa !19
  %4454 = getelementptr inbounds double, ptr %10, i64 12
  %4455 = load <4 x double>, ptr %4454, align 8, !tbaa !19
  %4456 = shufflevector <2 x double> %4429, <2 x double> poison, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>
  %4457 = shufflevector <4 x double> %4456, <4 x double> %4427, <4 x i32> <i32 0, i32 1, i32 7, i32 poison>
  %4458 = shufflevector <4 x double> %4457, <4 x double> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 1>
  %4459 = fadd <4 x double> %4458, %4455
  store <4 x double> %4459, ptr %4454, align 8, !tbaa !19
  %4460 = getelementptr inbounds double, ptr %10, i64 16
  %4461 = load <4 x double>, ptr %4460, align 8, !tbaa !19
  %4462 = shufflevector <4 x double> %4427, <4 x double> poison, <4 x i32> <i32 2, i32 1, i32 3, i32 poison>
  %4463 = shufflevector <4 x double> %4462, <4 x double> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 1>
  %4464 = fadd <4 x double> %4463, %4461
  store <4 x double> %4464, ptr %4460, align 8, !tbaa !19
  %4465 = getelementptr inbounds double, ptr %10, i64 20
  %4466 = load double, ptr %4465, align 8, !tbaa !19
  %4467 = extractelement <4 x double> %4427, i64 0
  %4468 = fadd double %4467, %4466
  store double %4468, ptr %4465, align 8, !tbaa !19
  %4469 = icmp eq ptr %4375, null
  br i1 %4469, label %4504, label %4503

4470:                                             ; preds = %4390, %4470
  %4471 = phi i64 [ 0, %4390 ], [ %4501, %4470 ]
  %4472 = phi <4 x double> [ zeroinitializer, %4390 ], [ %4500, %4470 ]
  %4473 = phi <2 x double> [ zeroinitializer, %4390 ], [ %4495, %4470 ]
  %4474 = getelementptr inbounds %class.Vector, ptr %974, i64 %4471
  %4475 = getelementptr inbounds %class.Vector, ptr %4387, i64 %4471
  %4476 = getelementptr inbounds %class.Vector, ptr %974, i64 %4471, i32 1
  %4477 = load <2 x double>, ptr %4474, align 8, !tbaa !19
  %4478 = load <2 x double>, ptr %4475, align 8, !tbaa !19
  %4479 = fadd <2 x double> %4477, %4478
  store <2 x double> %4479, ptr %4475, align 8, !tbaa !19
  %4480 = getelementptr inbounds %class.Vector, ptr %974, i64 %4471, i32 2
  %4481 = load double, ptr %4480, align 8, !tbaa !112
  %4482 = getelementptr inbounds %class.Vector, ptr %4387, i64 %4471, i32 2
  %4483 = load double, ptr %4482, align 8, !tbaa !112
  %4484 = fadd double %4481, %4483
  store double %4484, ptr %4482, align 8, !tbaa !112
  %4485 = load double, ptr %4474, align 8, !tbaa !304
  %4486 = getelementptr inbounds %struct.CompAtom, ptr %106, i64 %4471
  %4487 = load double, ptr %4486, align 8, !tbaa !68
  %4488 = getelementptr inbounds %class.Vector, ptr %4486, i64 0, i32 1
  %4489 = load <2 x double>, ptr %4488, align 8, !tbaa !19
  %4490 = shufflevector <2 x double> %4489, <2 x double> poison, <4 x i32> <i32 1, i32 1, i32 0, i32 1>
  %4491 = insertelement <2 x double> poison, double %4485, i64 0
  %4492 = shufflevector <2 x double> %4491, <2 x double> poison, <2 x i32> zeroinitializer
  %4493 = shufflevector <2 x double> %4489, <2 x double> poison, <2 x i32> <i32 poison, i32 0>
  %4494 = insertelement <2 x double> %4493, double %4487, i64 0
  %4495 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %4492, <2 x double> %4494, <2 x double> %4473)
  %4496 = load <2 x double>, ptr %4476, align 8, !tbaa !19
  %4497 = shufflevector <2 x double> %4496, <2 x double> poison, <4 x i32> <i32 1, i32 0, i32 poison, i32 poison>
  %4498 = insertelement <4 x double> %4497, double %4485, i64 3
  %4499 = shufflevector <4 x double> %4498, <4 x double> poison, <4 x i32> <i32 0, i32 1, i32 1, i32 3>
  %4500 = call <4 x double> @llvm.fmuladd.v4f64(<4 x double> %4499, <4 x double> %4490, <4 x double> %4472)
  %4501 = add nuw nsw i64 %4471, 1
  %4502 = icmp eq i64 %4501, %4391
  br i1 %4502, label %4424, label %4470

4503:                                             ; preds = %4424
  call void @_ZdaPv(ptr noundef nonnull %4375) #13
  br label %4504

4504:                                             ; preds = %4503, %4424
  call void @llvm.lifetime.end.p0(i64 36, ptr nonnull %2) #11
  br label %4505

4505:                                             ; preds = %1, %4504
  ret void
}

; Function Attrs: sspstrong uwtable
define dso_local void @_ZN20ComputeNonbondedUtil36calc_self_energy_merge_fullelect_fepEP9nonbonded(ptr nocapture noundef readonly %0) local_unnamed_addr #0 align 2 {
  %2 = alloca [9 x i32], align 16
  %3 = alloca double, align 8
  %4 = alloca double, align 8
  %5 = alloca double, align 8
  %6 = load i32, ptr @_ZN20ComputeNonbondedUtil8commOnlyE, align 4, !tbaa !5
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %8, label %4167

8:                                                ; preds = %1
  %9 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 7
  %10 = load ptr, ptr %9, align 8, !tbaa !9
  %11 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 10
  %12 = load ptr, ptr %11, align 8, !tbaa !14
  %13 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 11
  %14 = load i32, ptr %13, align 8, !tbaa !15
  %15 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 12
  %16 = load i32, ptr %15, align 4, !tbaa !16
  %17 = getelementptr inbounds %class.Pairlists, ptr %12, i64 0, i32 1
  store i32 0, ptr %17, align 8, !tbaa !17
  %18 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 6
  %19 = load <2 x double>, ptr %18, align 8, !tbaa !19
  %20 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 6, i32 2
  %21 = load double, ptr %20, align 8, !tbaa !20
  %22 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 13
  %23 = load double, ptr %22, align 8, !tbaa !21
  %24 = fmul double %23, %23
  %25 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 14
  %26 = load double, ptr %25, align 8, !tbaa !22
  %27 = fmul double %26, %26
  %28 = load double, ptr @_ZN20ComputeNonbondedUtil12dielectric_1E, align 8, !tbaa !19
  %29 = load ptr, ptr @_ZN20ComputeNonbondedUtil7ljTableE, align 8, !tbaa !23
  %30 = load ptr, ptr @_ZN20ComputeNonbondedUtil3molE, align 8, !tbaa !23
  %31 = load ptr, ptr @_ZN20ComputeNonbondedUtil13table_noshortE, align 8, !tbaa !23
  %32 = load double, ptr @_ZN20ComputeNonbondedUtil7scalingE, align 8, !tbaa !19
  %33 = load double, ptr @_ZN20ComputeNonbondedUtil7scale14E, align 8, !tbaa !19
  %34 = fsub double 1.000000e+00, %33
  %35 = load double, ptr @_ZN20ComputeNonbondedUtil8r2_deltaE, align 8, !tbaa !19
  %36 = load i32, ptr @_ZN20ComputeNonbondedUtil12r2_delta_expE, align 4, !tbaa !5
  %37 = shl i32 %36, 6
  %38 = add i32 %37, -65472
  %39 = load double, ptr @_ZN20ComputeNonbondedUtil9switchOn2E, align 8, !tbaa !19
  %40 = load double, ptr @_ZN20ComputeNonbondedUtil7cutoff2E, align 8, !tbaa !19
  %41 = fsub double %40, %39
  %42 = fmul double %41, %41
  %43 = fmul double %41, %42
  %44 = fdiv double 1.000000e+00, %43
  %45 = load double, ptr @_ZN20ComputeNonbondedUtil19alchElecLambdaStartE, align 8, !tbaa !19
  %46 = load double, ptr @_ZN20ComputeNonbondedUtil16alchVdwLambdaEndE, align 8, !tbaa !19
  %47 = load i32, ptr @_ZN20ComputeNonbondedUtil14Fep_WCA_repuOnE, align 4, !tbaa !5
  %48 = load i32, ptr @_ZN20ComputeNonbondedUtil14Fep_WCA_dispOnE, align 4, !tbaa !5
  %49 = load double, ptr @_ZN20ComputeNonbondedUtil9WCA_rcut1E, align 8, !tbaa !19
  %50 = load double, ptr @_ZN20ComputeNonbondedUtil9WCA_rcut2E, align 8, !tbaa !19
  %51 = load double, ptr @_ZN20ComputeNonbondedUtil10alchLambdaE, align 8, !tbaa !19
  %52 = fsub double 1.000000e+00, %45
  %53 = fcmp oge double %51, %46
  %54 = fdiv double %51, %46
  %55 = select i1 %53, double 1.000000e+00, double %54
  %56 = load double, ptr @_ZN20ComputeNonbondedUtil17alchVdwShiftCoeffE, align 8, !tbaa !19
  %57 = fsub double 1.000000e+00, %55
  %58 = fmul double %56, %57
  %59 = load double, ptr @_ZN20ComputeNonbondedUtil11alchLambda2E, align 8, !tbaa !19
  %60 = fcmp oge double %59, %46
  %61 = fdiv double %59, %46
  %62 = select i1 %60, double 1.000000e+00, double %61
  %63 = fsub double 1.000000e+00, %62
  %64 = fmul double %56, %63
  %65 = insertelement <2 x double> poison, double %59, i64 0
  %66 = insertelement <2 x double> %65, double %51, i64 1
  %67 = insertelement <2 x double> poison, double %45, i64 0
  %68 = shufflevector <2 x double> %67, <2 x double> poison, <2 x i32> zeroinitializer
  %69 = fcmp ugt <2 x double> %66, %68
  %70 = fsub <2 x double> %66, %68
  %71 = insertelement <2 x double> poison, double %52, i64 0
  %72 = shufflevector <2 x double> %71, <2 x double> poison, <2 x i32> zeroinitializer
  %73 = fdiv <2 x double> %70, %72
  %74 = select <2 x i1> %69, <2 x double> %73, <2 x double> zeroinitializer
  %75 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %66
  %76 = fcmp ugt <2 x double> %75, %68
  %77 = fsub <2 x double> %75, %68
  %78 = fdiv <2 x double> %77, %72
  %79 = extractelement <2 x double> %75, i64 1
  %80 = fcmp oge double %79, %46
  %81 = fdiv double %79, %46
  %82 = select i1 %80, double 1.000000e+00, double %81
  %83 = fsub double 1.000000e+00, %82
  %84 = fmul double %56, %83
  %85 = select <2 x i1> %76, <2 x double> %78, <2 x double> zeroinitializer
  %86 = extractelement <2 x double> %75, i64 0
  %87 = fcmp oge double %86, %46
  %88 = fdiv double %86, %46
  %89 = select i1 %87, double 1.000000e+00, double %88
  %90 = fsub double 1.000000e+00, %89
  %91 = fmul double %56, %90
  call void @llvm.lifetime.start.p0(i64 36, ptr nonnull %2) #11
  %92 = load i32, ptr @_ZN20ComputeNonbondedUtil12alchDecoupleE, align 4, !tbaa !5
  %93 = icmp eq i32 %92, 0
  %94 = getelementptr inbounds [9 x i32], ptr %2, i64 0, i64 6
  store i32 2, ptr %94, align 8, !tbaa !5
  %95 = getelementptr inbounds [9 x i32], ptr %2, i64 0, i64 4
  %96 = getelementptr inbounds [9 x i32], ptr %2, i64 0, i64 7
  %97 = getelementptr inbounds [9 x i32], ptr %2, i64 0, i64 5
  %98 = getelementptr inbounds [9 x i32], ptr %2, i64 0, i64 8
  %99 = zext i1 %93 to i32
  %100 = select i1 %93, i32 2, i32 0
  store i32 %99, ptr %95, align 16, !tbaa !5
  store i32 99, ptr %96, align 4, !tbaa !5
  store <4 x i32> <i32 0, i32 1, i32 2, i32 1>, ptr %2, align 16, !tbaa !5
  store i32 99, ptr %97, align 4, !tbaa !5
  store i32 %100, ptr %98, align 16, !tbaa !5
  %101 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 5
  %102 = load i32, ptr %101, align 8, !tbaa !5
  %103 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 5, i64 1
  %104 = load i32, ptr %103, align 4, !tbaa !5
  %105 = load ptr, ptr %0, align 8, !tbaa !23
  %106 = getelementptr inbounds [2 x ptr], ptr %0, i64 0, i64 1
  %107 = load ptr, ptr %106, align 8, !tbaa !23
  %108 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 1
  %109 = load ptr, ptr %108, align 8, !tbaa !23
  %110 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 1, i64 1
  %111 = load ptr, ptr %110, align 8, !tbaa !23
  %112 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 9
  %113 = load ptr, ptr %112, align 8, !tbaa !24
  %114 = add nsw i32 %104, 5
  %115 = getelementptr inbounds %class.ResizeArray, ptr %113, i64 0, i32 1
  %116 = load ptr, ptr %115, align 8, !tbaa !25
  %117 = getelementptr inbounds %class.ResizeArrayRaw, ptr %116, i64 0, i32 2
  %118 = load i32, ptr %117, align 8, !tbaa !27
  %119 = icmp slt i32 %118, %114
  br i1 %119, label %120, label %158

120:                                              ; preds = %8
  %121 = getelementptr inbounds %class.ResizeArrayRaw, ptr %116, i64 0, i32 3
  %122 = load i32, ptr %121, align 4, !tbaa !30
  %123 = icmp slt i32 %122, %114
  br i1 %123, label %124, label %158

124:                                              ; preds = %120
  %125 = sitofp i32 %122 to float
  %126 = getelementptr inbounds %class.ResizeArrayRaw, ptr %116, i64 0, i32 5
  %127 = load float, ptr %126, align 4, !tbaa !31
  %128 = fmul float %127, %125
  %129 = fptosi float %128 to i32
  %130 = tail call i32 @llvm.smax.i32(i32 %129, i32 %114)
  %131 = sub nsw i32 %130, %122
  %132 = getelementptr inbounds %class.ResizeArrayRaw, ptr %116, i64 0, i32 6
  %133 = load i32, ptr %132, align 8, !tbaa !32
  %134 = icmp slt i32 %131, %133
  %135 = add nsw i32 %133, %122
  %136 = select i1 %134, i32 %135, i32 %130
  %137 = sext i32 %136 to i64
  %138 = shl nsw i64 %137, 1
  %139 = add nsw i64 %138, 31
  %140 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %139) #12
  %141 = getelementptr inbounds i8, ptr %140, i64 31
  %142 = ptrtoint ptr %141 to i64
  %143 = and i64 %142, 31
  %144 = sub nsw i64 0, %143
  %145 = getelementptr inbounds i8, ptr %141, i64 %144
  %146 = load ptr, ptr %116, align 8, !tbaa !33
  %147 = sext i32 %118 to i64
  %148 = shl nsw i64 %147, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %145, ptr align 1 %146, i64 %148, i1 false)
  %149 = icmp eq i32 %122, 0
  br i1 %149, label %155, label %150

150:                                              ; preds = %124
  %151 = getelementptr inbounds %class.ResizeArrayRaw, ptr %116, i64 0, i32 1
  %152 = load ptr, ptr %151, align 8, !tbaa !34
  %153 = icmp eq ptr %152, null
  br i1 %153, label %155, label %154

154:                                              ; preds = %150
  tail call void @_ZdaPv(ptr noundef nonnull %152) #13
  br label %155

155:                                              ; preds = %154, %150, %124
  %156 = getelementptr inbounds %class.ResizeArrayRaw, ptr %116, i64 0, i32 1
  store ptr %140, ptr %156, align 8, !tbaa !34
  store ptr %145, ptr %116, align 8, !tbaa !33
  store i32 %136, ptr %121, align 4, !tbaa !30
  %157 = load ptr, ptr %115, align 8, !tbaa !25
  br label %158

158:                                              ; preds = %8, %120, %155
  %159 = phi ptr [ %116, %8 ], [ %116, %120 ], [ %157, %155 ]
  store i32 %114, ptr %117, align 8, !tbaa !27
  %160 = load ptr, ptr %159, align 8, !tbaa !33
  %161 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %113, i64 0, i32 1, i32 1
  %162 = load ptr, ptr %161, align 8, !tbaa !35
  %163 = getelementptr inbounds %class.ResizeArrayRaw.9, ptr %162, i64 0, i32 2
  %164 = load i32, ptr %163, align 8, !tbaa !37
  %165 = icmp slt i32 %164, %114
  br i1 %165, label %166, label %204

166:                                              ; preds = %158
  %167 = getelementptr inbounds %class.ResizeArrayRaw.9, ptr %162, i64 0, i32 3
  %168 = load i32, ptr %167, align 4, !tbaa !39
  %169 = icmp slt i32 %168, %114
  br i1 %169, label %170, label %204

170:                                              ; preds = %166
  %171 = sitofp i32 %168 to float
  %172 = getelementptr inbounds %class.ResizeArrayRaw.9, ptr %162, i64 0, i32 5
  %173 = load float, ptr %172, align 4, !tbaa !40
  %174 = fmul float %173, %171
  %175 = fptosi float %174 to i32
  %176 = tail call i32 @llvm.smax.i32(i32 %175, i32 %114)
  %177 = sub nsw i32 %176, %168
  %178 = getelementptr inbounds %class.ResizeArrayRaw.9, ptr %162, i64 0, i32 6
  %179 = load i32, ptr %178, align 8, !tbaa !41
  %180 = icmp slt i32 %177, %179
  %181 = add nsw i32 %179, %168
  %182 = select i1 %180, i32 %181, i32 %176
  %183 = sext i32 %182 to i64
  %184 = shl nsw i64 %183, 3
  %185 = add nsw i64 %184, 31
  %186 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %185) #12
  %187 = getelementptr inbounds i8, ptr %186, i64 31
  %188 = ptrtoint ptr %187 to i64
  %189 = and i64 %188, 31
  %190 = sub nsw i64 0, %189
  %191 = getelementptr inbounds i8, ptr %187, i64 %190
  %192 = load ptr, ptr %162, align 8, !tbaa !42
  %193 = sext i32 %164 to i64
  %194 = shl nsw i64 %193, 3
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %191, ptr align 1 %192, i64 %194, i1 false)
  %195 = icmp eq i32 %168, 0
  br i1 %195, label %201, label %196

196:                                              ; preds = %170
  %197 = getelementptr inbounds %class.ResizeArrayRaw.9, ptr %162, i64 0, i32 1
  %198 = load ptr, ptr %197, align 8, !tbaa !43
  %199 = icmp eq ptr %198, null
  br i1 %199, label %201, label %200

200:                                              ; preds = %196
  tail call void @_ZdaPv(ptr noundef nonnull %198) #13
  br label %201

201:                                              ; preds = %200, %196, %170
  %202 = getelementptr inbounds %class.ResizeArrayRaw.9, ptr %162, i64 0, i32 1
  store ptr %186, ptr %202, align 8, !tbaa !43
  store ptr %191, ptr %162, align 8, !tbaa !42
  store i32 %182, ptr %167, align 4, !tbaa !39
  %203 = load ptr, ptr %161, align 8, !tbaa !35
  br label %204

204:                                              ; preds = %158, %166, %201
  %205 = phi ptr [ %162, %158 ], [ %162, %166 ], [ %203, %201 ]
  store i32 %114, ptr %163, align 8, !tbaa !37
  %206 = load ptr, ptr %205, align 8, !tbaa !42
  %207 = getelementptr inbounds i32, ptr %206, i64 1
  %208 = icmp eq i32 %14, 0
  %209 = icmp ne i32 %16, 0
  %210 = select i1 %208, i1 %209, i1 false
  %211 = select i1 %210, i32 0, i32 %114
  %212 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %113, i64 0, i32 2, i32 1
  %213 = load ptr, ptr %212, align 8, !tbaa !25
  %214 = getelementptr inbounds %class.ResizeArrayRaw, ptr %213, i64 0, i32 2
  %215 = load i32, ptr %214, align 8, !tbaa !27
  %216 = icmp slt i32 %215, %211
  br i1 %216, label %217, label %255

217:                                              ; preds = %204
  %218 = getelementptr inbounds %class.ResizeArrayRaw, ptr %213, i64 0, i32 3
  %219 = load i32, ptr %218, align 4, !tbaa !30
  %220 = icmp slt i32 %219, %211
  br i1 %220, label %221, label %255

221:                                              ; preds = %217
  %222 = sitofp i32 %219 to float
  %223 = getelementptr inbounds %class.ResizeArrayRaw, ptr %213, i64 0, i32 5
  %224 = load float, ptr %223, align 4, !tbaa !31
  %225 = fmul float %224, %222
  %226 = fptosi float %225 to i32
  %227 = tail call i32 @llvm.smax.i32(i32 %226, i32 %211)
  %228 = sub nsw i32 %227, %219
  %229 = getelementptr inbounds %class.ResizeArrayRaw, ptr %213, i64 0, i32 6
  %230 = load i32, ptr %229, align 8, !tbaa !32
  %231 = icmp slt i32 %228, %230
  %232 = add nsw i32 %230, %219
  %233 = select i1 %231, i32 %232, i32 %227
  %234 = sext i32 %233 to i64
  %235 = shl nsw i64 %234, 1
  %236 = add nsw i64 %235, 31
  %237 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %236) #12
  %238 = getelementptr inbounds i8, ptr %237, i64 31
  %239 = ptrtoint ptr %238 to i64
  %240 = and i64 %239, 31
  %241 = sub nsw i64 0, %240
  %242 = getelementptr inbounds i8, ptr %238, i64 %241
  %243 = load ptr, ptr %213, align 8, !tbaa !33
  %244 = sext i32 %215 to i64
  %245 = shl nsw i64 %244, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %242, ptr align 1 %243, i64 %245, i1 false)
  %246 = icmp eq i32 %219, 0
  br i1 %246, label %252, label %247

247:                                              ; preds = %221
  %248 = getelementptr inbounds %class.ResizeArrayRaw, ptr %213, i64 0, i32 1
  %249 = load ptr, ptr %248, align 8, !tbaa !34
  %250 = icmp eq ptr %249, null
  br i1 %250, label %252, label %251

251:                                              ; preds = %247
  tail call void @_ZdaPv(ptr noundef nonnull %249) #13
  br label %252

252:                                              ; preds = %251, %247, %221
  %253 = getelementptr inbounds %class.ResizeArrayRaw, ptr %213, i64 0, i32 1
  store ptr %237, ptr %253, align 8, !tbaa !34
  store ptr %242, ptr %213, align 8, !tbaa !33
  store i32 %233, ptr %218, align 4, !tbaa !30
  %254 = load ptr, ptr %212, align 8, !tbaa !25
  br label %255

255:                                              ; preds = %204, %217, %252
  %256 = phi ptr [ %213, %204 ], [ %213, %217 ], [ %254, %252 ]
  store i32 %211, ptr %214, align 8, !tbaa !27
  %257 = load ptr, ptr %256, align 8, !tbaa !33
  %258 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %113, i64 0, i32 3, i32 1
  %259 = load ptr, ptr %258, align 8, !tbaa !25
  %260 = getelementptr inbounds %class.ResizeArrayRaw, ptr %259, i64 0, i32 2
  %261 = load i32, ptr %260, align 8, !tbaa !27
  %262 = icmp slt i32 %261, %211
  br i1 %262, label %263, label %301

263:                                              ; preds = %255
  %264 = getelementptr inbounds %class.ResizeArrayRaw, ptr %259, i64 0, i32 3
  %265 = load i32, ptr %264, align 4, !tbaa !30
  %266 = icmp slt i32 %265, %211
  br i1 %266, label %267, label %301

267:                                              ; preds = %263
  %268 = sitofp i32 %265 to float
  %269 = getelementptr inbounds %class.ResizeArrayRaw, ptr %259, i64 0, i32 5
  %270 = load float, ptr %269, align 4, !tbaa !31
  %271 = fmul float %270, %268
  %272 = fptosi float %271 to i32
  %273 = tail call i32 @llvm.smax.i32(i32 %272, i32 %211)
  %274 = sub nsw i32 %273, %265
  %275 = getelementptr inbounds %class.ResizeArrayRaw, ptr %259, i64 0, i32 6
  %276 = load i32, ptr %275, align 8, !tbaa !32
  %277 = icmp slt i32 %274, %276
  %278 = add nsw i32 %276, %265
  %279 = select i1 %277, i32 %278, i32 %273
  %280 = sext i32 %279 to i64
  %281 = shl nsw i64 %280, 1
  %282 = add nsw i64 %281, 31
  %283 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %282) #12
  %284 = getelementptr inbounds i8, ptr %283, i64 31
  %285 = ptrtoint ptr %284 to i64
  %286 = and i64 %285, 31
  %287 = sub nsw i64 0, %286
  %288 = getelementptr inbounds i8, ptr %284, i64 %287
  %289 = load ptr, ptr %259, align 8, !tbaa !33
  %290 = sext i32 %261 to i64
  %291 = shl nsw i64 %290, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %288, ptr align 1 %289, i64 %291, i1 false)
  %292 = icmp eq i32 %265, 0
  br i1 %292, label %298, label %293

293:                                              ; preds = %267
  %294 = getelementptr inbounds %class.ResizeArrayRaw, ptr %259, i64 0, i32 1
  %295 = load ptr, ptr %294, align 8, !tbaa !34
  %296 = icmp eq ptr %295, null
  br i1 %296, label %298, label %297

297:                                              ; preds = %293
  tail call void @_ZdaPv(ptr noundef nonnull %295) #13
  br label %298

298:                                              ; preds = %297, %293, %267
  %299 = getelementptr inbounds %class.ResizeArrayRaw, ptr %259, i64 0, i32 1
  store ptr %283, ptr %299, align 8, !tbaa !34
  store ptr %288, ptr %259, align 8, !tbaa !33
  store i32 %279, ptr %264, align 4, !tbaa !30
  %300 = load ptr, ptr %258, align 8, !tbaa !25
  br label %301

301:                                              ; preds = %255, %263, %298
  %302 = phi ptr [ %259, %255 ], [ %259, %263 ], [ %300, %298 ]
  store i32 %211, ptr %260, align 8, !tbaa !27
  %303 = load ptr, ptr %302, align 8, !tbaa !33
  %304 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %113, i64 0, i32 4, i32 1
  %305 = load ptr, ptr %304, align 8, !tbaa !25
  %306 = getelementptr inbounds %class.ResizeArrayRaw, ptr %305, i64 0, i32 2
  %307 = load i32, ptr %306, align 8, !tbaa !27
  %308 = icmp slt i32 %307, %211
  br i1 %308, label %309, label %347

309:                                              ; preds = %301
  %310 = getelementptr inbounds %class.ResizeArrayRaw, ptr %305, i64 0, i32 3
  %311 = load i32, ptr %310, align 4, !tbaa !30
  %312 = icmp slt i32 %311, %211
  br i1 %312, label %313, label %347

313:                                              ; preds = %309
  %314 = sitofp i32 %311 to float
  %315 = getelementptr inbounds %class.ResizeArrayRaw, ptr %305, i64 0, i32 5
  %316 = load float, ptr %315, align 4, !tbaa !31
  %317 = fmul float %316, %314
  %318 = fptosi float %317 to i32
  %319 = tail call i32 @llvm.smax.i32(i32 %318, i32 %211)
  %320 = sub nsw i32 %319, %311
  %321 = getelementptr inbounds %class.ResizeArrayRaw, ptr %305, i64 0, i32 6
  %322 = load i32, ptr %321, align 8, !tbaa !32
  %323 = icmp slt i32 %320, %322
  %324 = add nsw i32 %322, %311
  %325 = select i1 %323, i32 %324, i32 %319
  %326 = sext i32 %325 to i64
  %327 = shl nsw i64 %326, 1
  %328 = add nsw i64 %327, 31
  %329 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %328) #12
  %330 = getelementptr inbounds i8, ptr %329, i64 31
  %331 = ptrtoint ptr %330 to i64
  %332 = and i64 %331, 31
  %333 = sub nsw i64 0, %332
  %334 = getelementptr inbounds i8, ptr %330, i64 %333
  %335 = load ptr, ptr %305, align 8, !tbaa !33
  %336 = sext i32 %307 to i64
  %337 = shl nsw i64 %336, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %334, ptr align 1 %335, i64 %337, i1 false)
  %338 = icmp eq i32 %311, 0
  br i1 %338, label %344, label %339

339:                                              ; preds = %313
  %340 = getelementptr inbounds %class.ResizeArrayRaw, ptr %305, i64 0, i32 1
  %341 = load ptr, ptr %340, align 8, !tbaa !34
  %342 = icmp eq ptr %341, null
  br i1 %342, label %344, label %343

343:                                              ; preds = %339
  tail call void @_ZdaPv(ptr noundef nonnull %341) #13
  br label %344

344:                                              ; preds = %343, %339, %313
  %345 = getelementptr inbounds %class.ResizeArrayRaw, ptr %305, i64 0, i32 1
  store ptr %329, ptr %345, align 8, !tbaa !34
  store ptr %334, ptr %305, align 8, !tbaa !33
  store i32 %325, ptr %310, align 4, !tbaa !30
  %346 = load ptr, ptr %304, align 8, !tbaa !25
  br label %347

347:                                              ; preds = %301, %309, %344
  %348 = phi ptr [ %305, %301 ], [ %305, %309 ], [ %346, %344 ]
  store i32 %211, ptr %306, align 8, !tbaa !27
  %349 = load ptr, ptr %348, align 8, !tbaa !33
  %350 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %113, i64 0, i32 5, i32 1
  %351 = load ptr, ptr %350, align 8, !tbaa !25
  %352 = getelementptr inbounds %class.ResizeArrayRaw, ptr %351, i64 0, i32 2
  %353 = load i32, ptr %352, align 8, !tbaa !27
  %354 = icmp slt i32 %353, %211
  br i1 %354, label %355, label %393

355:                                              ; preds = %347
  %356 = getelementptr inbounds %class.ResizeArrayRaw, ptr %351, i64 0, i32 3
  %357 = load i32, ptr %356, align 4, !tbaa !30
  %358 = icmp slt i32 %357, %211
  br i1 %358, label %359, label %393

359:                                              ; preds = %355
  %360 = sitofp i32 %357 to float
  %361 = getelementptr inbounds %class.ResizeArrayRaw, ptr %351, i64 0, i32 5
  %362 = load float, ptr %361, align 4, !tbaa !31
  %363 = fmul float %362, %360
  %364 = fptosi float %363 to i32
  %365 = tail call i32 @llvm.smax.i32(i32 %364, i32 %211)
  %366 = sub nsw i32 %365, %357
  %367 = getelementptr inbounds %class.ResizeArrayRaw, ptr %351, i64 0, i32 6
  %368 = load i32, ptr %367, align 8, !tbaa !32
  %369 = icmp slt i32 %366, %368
  %370 = add nsw i32 %368, %357
  %371 = select i1 %369, i32 %370, i32 %365
  %372 = sext i32 %371 to i64
  %373 = shl nsw i64 %372, 1
  %374 = add nsw i64 %373, 31
  %375 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %374) #12
  %376 = getelementptr inbounds i8, ptr %375, i64 31
  %377 = ptrtoint ptr %376 to i64
  %378 = and i64 %377, 31
  %379 = sub nsw i64 0, %378
  %380 = getelementptr inbounds i8, ptr %376, i64 %379
  %381 = load ptr, ptr %351, align 8, !tbaa !33
  %382 = sext i32 %353 to i64
  %383 = shl nsw i64 %382, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %380, ptr align 1 %381, i64 %383, i1 false)
  %384 = icmp eq i32 %357, 0
  br i1 %384, label %390, label %385

385:                                              ; preds = %359
  %386 = getelementptr inbounds %class.ResizeArrayRaw, ptr %351, i64 0, i32 1
  %387 = load ptr, ptr %386, align 8, !tbaa !34
  %388 = icmp eq ptr %387, null
  br i1 %388, label %390, label %389

389:                                              ; preds = %385
  tail call void @_ZdaPv(ptr noundef nonnull %387) #13
  br label %390

390:                                              ; preds = %389, %385, %359
  %391 = getelementptr inbounds %class.ResizeArrayRaw, ptr %351, i64 0, i32 1
  store ptr %375, ptr %391, align 8, !tbaa !34
  store ptr %380, ptr %351, align 8, !tbaa !33
  store i32 %371, ptr %356, align 4, !tbaa !30
  %392 = load ptr, ptr %350, align 8, !tbaa !25
  br label %393

393:                                              ; preds = %347, %355, %390
  %394 = phi ptr [ %351, %347 ], [ %351, %355 ], [ %392, %390 ]
  store i32 %211, ptr %352, align 8, !tbaa !27
  %395 = load ptr, ptr %394, align 8, !tbaa !33
  %396 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %113, i64 0, i32 6, i32 1
  %397 = load ptr, ptr %396, align 8, !tbaa !25
  %398 = getelementptr inbounds %class.ResizeArrayRaw, ptr %397, i64 0, i32 2
  %399 = load i32, ptr %398, align 8, !tbaa !27
  %400 = icmp slt i32 %399, %211
  br i1 %400, label %401, label %439

401:                                              ; preds = %393
  %402 = getelementptr inbounds %class.ResizeArrayRaw, ptr %397, i64 0, i32 3
  %403 = load i32, ptr %402, align 4, !tbaa !30
  %404 = icmp slt i32 %403, %211
  br i1 %404, label %405, label %439

405:                                              ; preds = %401
  %406 = sitofp i32 %403 to float
  %407 = getelementptr inbounds %class.ResizeArrayRaw, ptr %397, i64 0, i32 5
  %408 = load float, ptr %407, align 4, !tbaa !31
  %409 = fmul float %408, %406
  %410 = fptosi float %409 to i32
  %411 = tail call i32 @llvm.smax.i32(i32 %410, i32 %211)
  %412 = sub nsw i32 %411, %403
  %413 = getelementptr inbounds %class.ResizeArrayRaw, ptr %397, i64 0, i32 6
  %414 = load i32, ptr %413, align 8, !tbaa !32
  %415 = icmp slt i32 %412, %414
  %416 = add nsw i32 %414, %403
  %417 = select i1 %415, i32 %416, i32 %411
  %418 = sext i32 %417 to i64
  %419 = shl nsw i64 %418, 1
  %420 = add nsw i64 %419, 31
  %421 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %420) #12
  %422 = getelementptr inbounds i8, ptr %421, i64 31
  %423 = ptrtoint ptr %422 to i64
  %424 = and i64 %423, 31
  %425 = sub nsw i64 0, %424
  %426 = getelementptr inbounds i8, ptr %422, i64 %425
  %427 = load ptr, ptr %397, align 8, !tbaa !33
  %428 = sext i32 %399 to i64
  %429 = shl nsw i64 %428, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %426, ptr align 1 %427, i64 %429, i1 false)
  %430 = icmp eq i32 %403, 0
  br i1 %430, label %436, label %431

431:                                              ; preds = %405
  %432 = getelementptr inbounds %class.ResizeArrayRaw, ptr %397, i64 0, i32 1
  %433 = load ptr, ptr %432, align 8, !tbaa !34
  %434 = icmp eq ptr %433, null
  br i1 %434, label %436, label %435

435:                                              ; preds = %431
  tail call void @_ZdaPv(ptr noundef nonnull %433) #13
  br label %436

436:                                              ; preds = %435, %431, %405
  %437 = getelementptr inbounds %class.ResizeArrayRaw, ptr %397, i64 0, i32 1
  store ptr %421, ptr %437, align 8, !tbaa !34
  store ptr %426, ptr %397, align 8, !tbaa !33
  store i32 %417, ptr %402, align 4, !tbaa !30
  %438 = load ptr, ptr %396, align 8, !tbaa !25
  br label %439

439:                                              ; preds = %393, %401, %436
  %440 = phi ptr [ %397, %393 ], [ %397, %401 ], [ %438, %436 ]
  store i32 %211, ptr %398, align 8, !tbaa !27
  %441 = load ptr, ptr %440, align 8, !tbaa !33
  %442 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %113, i64 0, i32 15, i32 1
  %443 = load ptr, ptr %442, align 8, !tbaa !25
  %444 = getelementptr inbounds %class.ResizeArrayRaw, ptr %443, i64 0, i32 2
  %445 = load i32, ptr %444, align 8, !tbaa !27
  %446 = icmp slt i32 %445, %211
  br i1 %446, label %447, label %485

447:                                              ; preds = %439
  %448 = getelementptr inbounds %class.ResizeArrayRaw, ptr %443, i64 0, i32 3
  %449 = load i32, ptr %448, align 4, !tbaa !30
  %450 = icmp slt i32 %449, %211
  br i1 %450, label %451, label %485

451:                                              ; preds = %447
  %452 = sitofp i32 %449 to float
  %453 = getelementptr inbounds %class.ResizeArrayRaw, ptr %443, i64 0, i32 5
  %454 = load float, ptr %453, align 4, !tbaa !31
  %455 = fmul float %454, %452
  %456 = fptosi float %455 to i32
  %457 = tail call i32 @llvm.smax.i32(i32 %456, i32 %211)
  %458 = sub nsw i32 %457, %449
  %459 = getelementptr inbounds %class.ResizeArrayRaw, ptr %443, i64 0, i32 6
  %460 = load i32, ptr %459, align 8, !tbaa !32
  %461 = icmp slt i32 %458, %460
  %462 = add nsw i32 %460, %449
  %463 = select i1 %461, i32 %462, i32 %457
  %464 = sext i32 %463 to i64
  %465 = shl nsw i64 %464, 1
  %466 = add nsw i64 %465, 31
  %467 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %466) #12
  %468 = getelementptr inbounds i8, ptr %467, i64 31
  %469 = ptrtoint ptr %468 to i64
  %470 = and i64 %469, 31
  %471 = sub nsw i64 0, %470
  %472 = getelementptr inbounds i8, ptr %468, i64 %471
  %473 = load ptr, ptr %443, align 8, !tbaa !33
  %474 = sext i32 %445 to i64
  %475 = shl nsw i64 %474, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %472, ptr align 1 %473, i64 %475, i1 false)
  %476 = icmp eq i32 %449, 0
  br i1 %476, label %482, label %477

477:                                              ; preds = %451
  %478 = getelementptr inbounds %class.ResizeArrayRaw, ptr %443, i64 0, i32 1
  %479 = load ptr, ptr %478, align 8, !tbaa !34
  %480 = icmp eq ptr %479, null
  br i1 %480, label %482, label %481

481:                                              ; preds = %477
  tail call void @_ZdaPv(ptr noundef nonnull %479) #13
  br label %482

482:                                              ; preds = %481, %477, %451
  %483 = getelementptr inbounds %class.ResizeArrayRaw, ptr %443, i64 0, i32 1
  store ptr %467, ptr %483, align 8, !tbaa !34
  store ptr %472, ptr %443, align 8, !tbaa !33
  store i32 %463, ptr %448, align 4, !tbaa !30
  %484 = load ptr, ptr %442, align 8, !tbaa !25
  br label %485

485:                                              ; preds = %439, %447, %482
  %486 = phi ptr [ %443, %439 ], [ %443, %447 ], [ %484, %482 ]
  store i32 %211, ptr %444, align 8, !tbaa !27
  %487 = load ptr, ptr %486, align 8, !tbaa !33
  %488 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %113, i64 0, i32 16, i32 1
  %489 = load ptr, ptr %488, align 8, !tbaa !25
  %490 = getelementptr inbounds %class.ResizeArrayRaw, ptr %489, i64 0, i32 2
  %491 = load i32, ptr %490, align 8, !tbaa !27
  %492 = icmp slt i32 %491, %211
  br i1 %492, label %493, label %531

493:                                              ; preds = %485
  %494 = getelementptr inbounds %class.ResizeArrayRaw, ptr %489, i64 0, i32 3
  %495 = load i32, ptr %494, align 4, !tbaa !30
  %496 = icmp slt i32 %495, %211
  br i1 %496, label %497, label %531

497:                                              ; preds = %493
  %498 = sitofp i32 %495 to float
  %499 = getelementptr inbounds %class.ResizeArrayRaw, ptr %489, i64 0, i32 5
  %500 = load float, ptr %499, align 4, !tbaa !31
  %501 = fmul float %500, %498
  %502 = fptosi float %501 to i32
  %503 = tail call i32 @llvm.smax.i32(i32 %502, i32 %211)
  %504 = sub nsw i32 %503, %495
  %505 = getelementptr inbounds %class.ResizeArrayRaw, ptr %489, i64 0, i32 6
  %506 = load i32, ptr %505, align 8, !tbaa !32
  %507 = icmp slt i32 %504, %506
  %508 = add nsw i32 %506, %495
  %509 = select i1 %507, i32 %508, i32 %503
  %510 = sext i32 %509 to i64
  %511 = shl nsw i64 %510, 1
  %512 = add nsw i64 %511, 31
  %513 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %512) #12
  %514 = getelementptr inbounds i8, ptr %513, i64 31
  %515 = ptrtoint ptr %514 to i64
  %516 = and i64 %515, 31
  %517 = sub nsw i64 0, %516
  %518 = getelementptr inbounds i8, ptr %514, i64 %517
  %519 = load ptr, ptr %489, align 8, !tbaa !33
  %520 = sext i32 %491 to i64
  %521 = shl nsw i64 %520, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %518, ptr align 1 %519, i64 %521, i1 false)
  %522 = icmp eq i32 %495, 0
  br i1 %522, label %528, label %523

523:                                              ; preds = %497
  %524 = getelementptr inbounds %class.ResizeArrayRaw, ptr %489, i64 0, i32 1
  %525 = load ptr, ptr %524, align 8, !tbaa !34
  %526 = icmp eq ptr %525, null
  br i1 %526, label %528, label %527

527:                                              ; preds = %523
  tail call void @_ZdaPv(ptr noundef nonnull %525) #13
  br label %528

528:                                              ; preds = %527, %523, %497
  %529 = getelementptr inbounds %class.ResizeArrayRaw, ptr %489, i64 0, i32 1
  store ptr %513, ptr %529, align 8, !tbaa !34
  store ptr %518, ptr %489, align 8, !tbaa !33
  store i32 %509, ptr %494, align 4, !tbaa !30
  %530 = load ptr, ptr %488, align 8, !tbaa !25
  br label %531

531:                                              ; preds = %485, %493, %528
  %532 = phi ptr [ %489, %485 ], [ %489, %493 ], [ %530, %528 ]
  store i32 %211, ptr %490, align 8, !tbaa !27
  %533 = load ptr, ptr %532, align 8, !tbaa !33
  %534 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %113, i64 0, i32 9, i32 1
  %535 = load ptr, ptr %534, align 8, !tbaa !25
  %536 = getelementptr inbounds %class.ResizeArrayRaw, ptr %535, i64 0, i32 2
  %537 = load i32, ptr %536, align 8, !tbaa !27
  %538 = icmp slt i32 %537, %211
  br i1 %538, label %539, label %577

539:                                              ; preds = %531
  %540 = getelementptr inbounds %class.ResizeArrayRaw, ptr %535, i64 0, i32 3
  %541 = load i32, ptr %540, align 4, !tbaa !30
  %542 = icmp slt i32 %541, %211
  br i1 %542, label %543, label %577

543:                                              ; preds = %539
  %544 = sitofp i32 %541 to float
  %545 = getelementptr inbounds %class.ResizeArrayRaw, ptr %535, i64 0, i32 5
  %546 = load float, ptr %545, align 4, !tbaa !31
  %547 = fmul float %546, %544
  %548 = fptosi float %547 to i32
  %549 = tail call i32 @llvm.smax.i32(i32 %548, i32 %211)
  %550 = sub nsw i32 %549, %541
  %551 = getelementptr inbounds %class.ResizeArrayRaw, ptr %535, i64 0, i32 6
  %552 = load i32, ptr %551, align 8, !tbaa !32
  %553 = icmp slt i32 %550, %552
  %554 = add nsw i32 %552, %541
  %555 = select i1 %553, i32 %554, i32 %549
  %556 = sext i32 %555 to i64
  %557 = shl nsw i64 %556, 1
  %558 = add nsw i64 %557, 31
  %559 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %558) #12
  %560 = getelementptr inbounds i8, ptr %559, i64 31
  %561 = ptrtoint ptr %560 to i64
  %562 = and i64 %561, 31
  %563 = sub nsw i64 0, %562
  %564 = getelementptr inbounds i8, ptr %560, i64 %563
  %565 = load ptr, ptr %535, align 8, !tbaa !33
  %566 = sext i32 %537 to i64
  %567 = shl nsw i64 %566, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %564, ptr align 1 %565, i64 %567, i1 false)
  %568 = icmp eq i32 %541, 0
  br i1 %568, label %574, label %569

569:                                              ; preds = %543
  %570 = getelementptr inbounds %class.ResizeArrayRaw, ptr %535, i64 0, i32 1
  %571 = load ptr, ptr %570, align 8, !tbaa !34
  %572 = icmp eq ptr %571, null
  br i1 %572, label %574, label %573

573:                                              ; preds = %569
  tail call void @_ZdaPv(ptr noundef nonnull %571) #13
  br label %574

574:                                              ; preds = %573, %569, %543
  %575 = getelementptr inbounds %class.ResizeArrayRaw, ptr %535, i64 0, i32 1
  store ptr %559, ptr %575, align 8, !tbaa !34
  store ptr %564, ptr %535, align 8, !tbaa !33
  store i32 %555, ptr %540, align 4, !tbaa !30
  %576 = load ptr, ptr %534, align 8, !tbaa !25
  br label %577

577:                                              ; preds = %531, %539, %574
  %578 = phi ptr [ %535, %531 ], [ %535, %539 ], [ %576, %574 ]
  store i32 %211, ptr %536, align 8, !tbaa !27
  %579 = load ptr, ptr %578, align 8, !tbaa !33
  %580 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %113, i64 0, i32 10, i32 1
  %581 = load ptr, ptr %580, align 8, !tbaa !25
  %582 = getelementptr inbounds %class.ResizeArrayRaw, ptr %581, i64 0, i32 2
  %583 = load i32, ptr %582, align 8, !tbaa !27
  %584 = icmp slt i32 %583, %211
  br i1 %584, label %585, label %623

585:                                              ; preds = %577
  %586 = getelementptr inbounds %class.ResizeArrayRaw, ptr %581, i64 0, i32 3
  %587 = load i32, ptr %586, align 4, !tbaa !30
  %588 = icmp slt i32 %587, %211
  br i1 %588, label %589, label %623

589:                                              ; preds = %585
  %590 = sitofp i32 %587 to float
  %591 = getelementptr inbounds %class.ResizeArrayRaw, ptr %581, i64 0, i32 5
  %592 = load float, ptr %591, align 4, !tbaa !31
  %593 = fmul float %592, %590
  %594 = fptosi float %593 to i32
  %595 = tail call i32 @llvm.smax.i32(i32 %594, i32 %211)
  %596 = sub nsw i32 %595, %587
  %597 = getelementptr inbounds %class.ResizeArrayRaw, ptr %581, i64 0, i32 6
  %598 = load i32, ptr %597, align 8, !tbaa !32
  %599 = icmp slt i32 %596, %598
  %600 = add nsw i32 %598, %587
  %601 = select i1 %599, i32 %600, i32 %595
  %602 = sext i32 %601 to i64
  %603 = shl nsw i64 %602, 1
  %604 = add nsw i64 %603, 31
  %605 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %604) #12
  %606 = getelementptr inbounds i8, ptr %605, i64 31
  %607 = ptrtoint ptr %606 to i64
  %608 = and i64 %607, 31
  %609 = sub nsw i64 0, %608
  %610 = getelementptr inbounds i8, ptr %606, i64 %609
  %611 = load ptr, ptr %581, align 8, !tbaa !33
  %612 = sext i32 %583 to i64
  %613 = shl nsw i64 %612, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %610, ptr align 1 %611, i64 %613, i1 false)
  %614 = icmp eq i32 %587, 0
  br i1 %614, label %620, label %615

615:                                              ; preds = %589
  %616 = getelementptr inbounds %class.ResizeArrayRaw, ptr %581, i64 0, i32 1
  %617 = load ptr, ptr %616, align 8, !tbaa !34
  %618 = icmp eq ptr %617, null
  br i1 %618, label %620, label %619

619:                                              ; preds = %615
  tail call void @_ZdaPv(ptr noundef nonnull %617) #13
  br label %620

620:                                              ; preds = %619, %615, %589
  %621 = getelementptr inbounds %class.ResizeArrayRaw, ptr %581, i64 0, i32 1
  store ptr %605, ptr %621, align 8, !tbaa !34
  store ptr %610, ptr %581, align 8, !tbaa !33
  store i32 %601, ptr %586, align 4, !tbaa !30
  %622 = load ptr, ptr %580, align 8, !tbaa !25
  br label %623

623:                                              ; preds = %577, %585, %620
  %624 = phi ptr [ %581, %577 ], [ %581, %585 ], [ %622, %620 ]
  store i32 %211, ptr %582, align 8, !tbaa !27
  %625 = load ptr, ptr %624, align 8, !tbaa !33
  %626 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %113, i64 0, i32 11, i32 1
  %627 = load ptr, ptr %626, align 8, !tbaa !25
  %628 = getelementptr inbounds %class.ResizeArrayRaw, ptr %627, i64 0, i32 2
  %629 = load i32, ptr %628, align 8, !tbaa !27
  %630 = icmp slt i32 %629, %211
  br i1 %630, label %631, label %669

631:                                              ; preds = %623
  %632 = getelementptr inbounds %class.ResizeArrayRaw, ptr %627, i64 0, i32 3
  %633 = load i32, ptr %632, align 4, !tbaa !30
  %634 = icmp slt i32 %633, %211
  br i1 %634, label %635, label %669

635:                                              ; preds = %631
  %636 = sitofp i32 %633 to float
  %637 = getelementptr inbounds %class.ResizeArrayRaw, ptr %627, i64 0, i32 5
  %638 = load float, ptr %637, align 4, !tbaa !31
  %639 = fmul float %638, %636
  %640 = fptosi float %639 to i32
  %641 = tail call i32 @llvm.smax.i32(i32 %640, i32 %211)
  %642 = sub nsw i32 %641, %633
  %643 = getelementptr inbounds %class.ResizeArrayRaw, ptr %627, i64 0, i32 6
  %644 = load i32, ptr %643, align 8, !tbaa !32
  %645 = icmp slt i32 %642, %644
  %646 = add nsw i32 %644, %633
  %647 = select i1 %645, i32 %646, i32 %641
  %648 = sext i32 %647 to i64
  %649 = shl nsw i64 %648, 1
  %650 = add nsw i64 %649, 31
  %651 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %650) #12
  %652 = getelementptr inbounds i8, ptr %651, i64 31
  %653 = ptrtoint ptr %652 to i64
  %654 = and i64 %653, 31
  %655 = sub nsw i64 0, %654
  %656 = getelementptr inbounds i8, ptr %652, i64 %655
  %657 = load ptr, ptr %627, align 8, !tbaa !33
  %658 = sext i32 %629 to i64
  %659 = shl nsw i64 %658, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %656, ptr align 1 %657, i64 %659, i1 false)
  %660 = icmp eq i32 %633, 0
  br i1 %660, label %666, label %661

661:                                              ; preds = %635
  %662 = getelementptr inbounds %class.ResizeArrayRaw, ptr %627, i64 0, i32 1
  %663 = load ptr, ptr %662, align 8, !tbaa !34
  %664 = icmp eq ptr %663, null
  br i1 %664, label %666, label %665

665:                                              ; preds = %661
  tail call void @_ZdaPv(ptr noundef nonnull %663) #13
  br label %666

666:                                              ; preds = %665, %661, %635
  %667 = getelementptr inbounds %class.ResizeArrayRaw, ptr %627, i64 0, i32 1
  store ptr %651, ptr %667, align 8, !tbaa !34
  store ptr %656, ptr %627, align 8, !tbaa !33
  store i32 %647, ptr %632, align 4, !tbaa !30
  %668 = load ptr, ptr %626, align 8, !tbaa !25
  br label %669

669:                                              ; preds = %623, %631, %666
  %670 = phi ptr [ %627, %623 ], [ %627, %631 ], [ %668, %666 ]
  store i32 %211, ptr %628, align 8, !tbaa !27
  %671 = load ptr, ptr %670, align 8, !tbaa !33
  %672 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %113, i64 0, i32 12, i32 1
  %673 = load ptr, ptr %672, align 8, !tbaa !25
  %674 = getelementptr inbounds %class.ResizeArrayRaw, ptr %673, i64 0, i32 2
  %675 = load i32, ptr %674, align 8, !tbaa !27
  %676 = icmp slt i32 %675, %211
  br i1 %676, label %677, label %715

677:                                              ; preds = %669
  %678 = getelementptr inbounds %class.ResizeArrayRaw, ptr %673, i64 0, i32 3
  %679 = load i32, ptr %678, align 4, !tbaa !30
  %680 = icmp slt i32 %679, %211
  br i1 %680, label %681, label %715

681:                                              ; preds = %677
  %682 = sitofp i32 %679 to float
  %683 = getelementptr inbounds %class.ResizeArrayRaw, ptr %673, i64 0, i32 5
  %684 = load float, ptr %683, align 4, !tbaa !31
  %685 = fmul float %684, %682
  %686 = fptosi float %685 to i32
  %687 = tail call i32 @llvm.smax.i32(i32 %686, i32 %211)
  %688 = sub nsw i32 %687, %679
  %689 = getelementptr inbounds %class.ResizeArrayRaw, ptr %673, i64 0, i32 6
  %690 = load i32, ptr %689, align 8, !tbaa !32
  %691 = icmp slt i32 %688, %690
  %692 = add nsw i32 %690, %679
  %693 = select i1 %691, i32 %692, i32 %687
  %694 = sext i32 %693 to i64
  %695 = shl nsw i64 %694, 1
  %696 = add nsw i64 %695, 31
  %697 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %696) #12
  %698 = getelementptr inbounds i8, ptr %697, i64 31
  %699 = ptrtoint ptr %698 to i64
  %700 = and i64 %699, 31
  %701 = sub nsw i64 0, %700
  %702 = getelementptr inbounds i8, ptr %698, i64 %701
  %703 = load ptr, ptr %673, align 8, !tbaa !33
  %704 = sext i32 %675 to i64
  %705 = shl nsw i64 %704, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %702, ptr align 1 %703, i64 %705, i1 false)
  %706 = icmp eq i32 %679, 0
  br i1 %706, label %712, label %707

707:                                              ; preds = %681
  %708 = getelementptr inbounds %class.ResizeArrayRaw, ptr %673, i64 0, i32 1
  %709 = load ptr, ptr %708, align 8, !tbaa !34
  %710 = icmp eq ptr %709, null
  br i1 %710, label %712, label %711

711:                                              ; preds = %707
  tail call void @_ZdaPv(ptr noundef nonnull %709) #13
  br label %712

712:                                              ; preds = %711, %707, %681
  %713 = getelementptr inbounds %class.ResizeArrayRaw, ptr %673, i64 0, i32 1
  store ptr %697, ptr %713, align 8, !tbaa !34
  store ptr %702, ptr %673, align 8, !tbaa !33
  store i32 %693, ptr %678, align 4, !tbaa !30
  %714 = load ptr, ptr %672, align 8, !tbaa !25
  br label %715

715:                                              ; preds = %669, %677, %712
  %716 = phi ptr [ %673, %669 ], [ %673, %677 ], [ %714, %712 ]
  store i32 %211, ptr %674, align 8, !tbaa !27
  %717 = load ptr, ptr %716, align 8, !tbaa !33
  %718 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %113, i64 0, i32 13, i32 1
  %719 = load ptr, ptr %718, align 8, !tbaa !25
  %720 = getelementptr inbounds %class.ResizeArrayRaw, ptr %719, i64 0, i32 2
  %721 = load i32, ptr %720, align 8, !tbaa !27
  %722 = icmp slt i32 %721, %211
  br i1 %722, label %723, label %761

723:                                              ; preds = %715
  %724 = getelementptr inbounds %class.ResizeArrayRaw, ptr %719, i64 0, i32 3
  %725 = load i32, ptr %724, align 4, !tbaa !30
  %726 = icmp slt i32 %725, %211
  br i1 %726, label %727, label %761

727:                                              ; preds = %723
  %728 = sitofp i32 %725 to float
  %729 = getelementptr inbounds %class.ResizeArrayRaw, ptr %719, i64 0, i32 5
  %730 = load float, ptr %729, align 4, !tbaa !31
  %731 = fmul float %730, %728
  %732 = fptosi float %731 to i32
  %733 = tail call i32 @llvm.smax.i32(i32 %732, i32 %211)
  %734 = sub nsw i32 %733, %725
  %735 = getelementptr inbounds %class.ResizeArrayRaw, ptr %719, i64 0, i32 6
  %736 = load i32, ptr %735, align 8, !tbaa !32
  %737 = icmp slt i32 %734, %736
  %738 = add nsw i32 %736, %725
  %739 = select i1 %737, i32 %738, i32 %733
  %740 = sext i32 %739 to i64
  %741 = shl nsw i64 %740, 1
  %742 = add nsw i64 %741, 31
  %743 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %742) #12
  %744 = getelementptr inbounds i8, ptr %743, i64 31
  %745 = ptrtoint ptr %744 to i64
  %746 = and i64 %745, 31
  %747 = sub nsw i64 0, %746
  %748 = getelementptr inbounds i8, ptr %744, i64 %747
  %749 = load ptr, ptr %719, align 8, !tbaa !33
  %750 = sext i32 %721 to i64
  %751 = shl nsw i64 %750, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %748, ptr align 1 %749, i64 %751, i1 false)
  %752 = icmp eq i32 %725, 0
  br i1 %752, label %758, label %753

753:                                              ; preds = %727
  %754 = getelementptr inbounds %class.ResizeArrayRaw, ptr %719, i64 0, i32 1
  %755 = load ptr, ptr %754, align 8, !tbaa !34
  %756 = icmp eq ptr %755, null
  br i1 %756, label %758, label %757

757:                                              ; preds = %753
  tail call void @_ZdaPv(ptr noundef nonnull %755) #13
  br label %758

758:                                              ; preds = %757, %753, %727
  %759 = getelementptr inbounds %class.ResizeArrayRaw, ptr %719, i64 0, i32 1
  store ptr %743, ptr %759, align 8, !tbaa !34
  store ptr %748, ptr %719, align 8, !tbaa !33
  store i32 %739, ptr %724, align 4, !tbaa !30
  %760 = load ptr, ptr %718, align 8, !tbaa !25
  br label %761

761:                                              ; preds = %715, %723, %758
  %762 = phi ptr [ %719, %715 ], [ %719, %723 ], [ %760, %758 ]
  store i32 %211, ptr %720, align 8, !tbaa !27
  %763 = load ptr, ptr %762, align 8, !tbaa !33
  %764 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %113, i64 0, i32 14, i32 1
  %765 = load ptr, ptr %764, align 8, !tbaa !25
  %766 = getelementptr inbounds %class.ResizeArrayRaw, ptr %765, i64 0, i32 2
  %767 = load i32, ptr %766, align 8, !tbaa !27
  %768 = icmp slt i32 %767, %211
  br i1 %768, label %769, label %807

769:                                              ; preds = %761
  %770 = getelementptr inbounds %class.ResizeArrayRaw, ptr %765, i64 0, i32 3
  %771 = load i32, ptr %770, align 4, !tbaa !30
  %772 = icmp slt i32 %771, %211
  br i1 %772, label %773, label %807

773:                                              ; preds = %769
  %774 = sitofp i32 %771 to float
  %775 = getelementptr inbounds %class.ResizeArrayRaw, ptr %765, i64 0, i32 5
  %776 = load float, ptr %775, align 4, !tbaa !31
  %777 = fmul float %776, %774
  %778 = fptosi float %777 to i32
  %779 = tail call i32 @llvm.smax.i32(i32 %778, i32 %211)
  %780 = sub nsw i32 %779, %771
  %781 = getelementptr inbounds %class.ResizeArrayRaw, ptr %765, i64 0, i32 6
  %782 = load i32, ptr %781, align 8, !tbaa !32
  %783 = icmp slt i32 %780, %782
  %784 = add nsw i32 %782, %771
  %785 = select i1 %783, i32 %784, i32 %779
  %786 = sext i32 %785 to i64
  %787 = shl nsw i64 %786, 1
  %788 = add nsw i64 %787, 31
  %789 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %788) #12
  %790 = getelementptr inbounds i8, ptr %789, i64 31
  %791 = ptrtoint ptr %790 to i64
  %792 = and i64 %791, 31
  %793 = sub nsw i64 0, %792
  %794 = getelementptr inbounds i8, ptr %790, i64 %793
  %795 = load ptr, ptr %765, align 8, !tbaa !33
  %796 = sext i32 %767 to i64
  %797 = shl nsw i64 %796, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %794, ptr align 1 %795, i64 %797, i1 false)
  %798 = icmp eq i32 %771, 0
  br i1 %798, label %804, label %799

799:                                              ; preds = %773
  %800 = getelementptr inbounds %class.ResizeArrayRaw, ptr %765, i64 0, i32 1
  %801 = load ptr, ptr %800, align 8, !tbaa !34
  %802 = icmp eq ptr %801, null
  br i1 %802, label %804, label %803

803:                                              ; preds = %799
  tail call void @_ZdaPv(ptr noundef nonnull %801) #13
  br label %804

804:                                              ; preds = %803, %799, %773
  %805 = getelementptr inbounds %class.ResizeArrayRaw, ptr %765, i64 0, i32 1
  store ptr %789, ptr %805, align 8, !tbaa !34
  store ptr %794, ptr %765, align 8, !tbaa !33
  store i32 %785, ptr %770, align 4, !tbaa !30
  %806 = load ptr, ptr %764, align 8, !tbaa !25
  br label %807

807:                                              ; preds = %761, %769, %804
  %808 = phi ptr [ %765, %761 ], [ %765, %769 ], [ %806, %804 ]
  store i32 %211, ptr %766, align 8, !tbaa !27
  %809 = load ptr, ptr %808, align 8, !tbaa !33
  br i1 %210, label %951, label %810

810:                                              ; preds = %807
  %811 = icmp sgt i32 %104, 0
  br i1 %811, label %812, label %942

812:                                              ; preds = %810
  %813 = zext i32 %104 to i64
  %814 = and i64 %813, 1
  %815 = icmp eq i32 %104, 1
  br i1 %815, label %848, label %816

816:                                              ; preds = %812
  %817 = and i64 %813, 4294967294
  br label %818

818:                                              ; preds = %843, %816
  %819 = phi i64 [ 0, %816 ], [ %845, %843 ]
  %820 = phi i32 [ 0, %816 ], [ %844, %843 ]
  %821 = phi i64 [ 0, %816 ], [ %846, %843 ]
  %822 = getelementptr inbounds %struct.CompAtom, ptr %107, i64 %819, i32 4
  %823 = load i8, ptr %822, align 1
  %824 = and i8 %823, 7
  %825 = icmp eq i8 %824, 0
  br i1 %825, label %831, label %826

826:                                              ; preds = %818
  %827 = trunc i64 %819 to i16
  %828 = add nsw i32 %820, 1
  %829 = sext i32 %820 to i64
  %830 = getelementptr inbounds i16, ptr %257, i64 %829
  store i16 %827, ptr %830, align 2, !tbaa !44
  br label %831

831:                                              ; preds = %818, %826
  %832 = phi i32 [ %828, %826 ], [ %820, %818 ]
  %833 = or i64 %819, 1
  %834 = getelementptr inbounds %struct.CompAtom, ptr %107, i64 %833, i32 4
  %835 = load i8, ptr %834, align 1
  %836 = and i8 %835, 7
  %837 = icmp eq i8 %836, 0
  br i1 %837, label %843, label %838

838:                                              ; preds = %831
  %839 = trunc i64 %833 to i16
  %840 = add nsw i32 %832, 1
  %841 = sext i32 %832 to i64
  %842 = getelementptr inbounds i16, ptr %257, i64 %841
  store i16 %839, ptr %842, align 2, !tbaa !44
  br label %843

843:                                              ; preds = %838, %831
  %844 = phi i32 [ %840, %838 ], [ %832, %831 ]
  %845 = add nuw nsw i64 %819, 2
  %846 = add i64 %821, 2
  %847 = icmp eq i64 %846, %817
  br i1 %847, label %848, label %818

848:                                              ; preds = %843, %812
  %849 = phi i32 [ undef, %812 ], [ %844, %843 ]
  %850 = phi i64 [ 0, %812 ], [ %845, %843 ]
  %851 = phi i32 [ 0, %812 ], [ %844, %843 ]
  %852 = icmp eq i64 %814, 0
  br i1 %852, label %863, label %853

853:                                              ; preds = %848
  %854 = getelementptr inbounds %struct.CompAtom, ptr %107, i64 %850, i32 4
  %855 = load i8, ptr %854, align 1
  %856 = and i8 %855, 7
  %857 = icmp eq i8 %856, 0
  br i1 %857, label %863, label %858

858:                                              ; preds = %853
  %859 = trunc i64 %850 to i16
  %860 = add nsw i32 %851, 1
  %861 = sext i32 %851 to i64
  %862 = getelementptr inbounds i16, ptr %257, i64 %861
  store i16 %859, ptr %862, align 2, !tbaa !44
  br label %863

863:                                              ; preds = %853, %858, %848
  %864 = phi i32 [ %849, %848 ], [ %860, %858 ], [ %851, %853 ]
  %865 = icmp eq i32 %864, 0
  br i1 %865, label %873, label %866

866:                                              ; preds = %863
  %867 = add nsw i32 %864, -1
  %868 = sext i32 %867 to i64
  %869 = getelementptr inbounds i16, ptr %257, i64 %868
  %870 = load i16, ptr %869, align 2, !tbaa !44
  %871 = sext i32 %864 to i64
  %872 = getelementptr inbounds i16, ptr %257, i64 %871
  store i16 %870, ptr %872, align 2, !tbaa !44
  br label %873

873:                                              ; preds = %866, %863
  %874 = load i32, ptr @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4, !tbaa !5
  %875 = icmp ne i32 %874, 0
  %876 = icmp sgt i32 %864, 0
  %877 = and i1 %875, %876
  br i1 %877, label %878, label %942

878:                                              ; preds = %873
  %879 = zext i32 %864 to i64
  %880 = and i64 %879, 1
  %881 = icmp eq i32 %864, 1
  br i1 %881, label %916, label %882

882:                                              ; preds = %878
  %883 = and i64 %879, 4294967294
  br label %884

884:                                              ; preds = %911, %882
  %885 = phi i64 [ 0, %882 ], [ %913, %911 ]
  %886 = phi i32 [ 0, %882 ], [ %912, %911 ]
  %887 = phi i64 [ 0, %882 ], [ %914, %911 ]
  %888 = getelementptr inbounds i16, ptr %257, i64 %885
  %889 = load i16, ptr %888, align 2, !tbaa !44
  %890 = zext i16 %889 to i64
  %891 = getelementptr inbounds %struct.CompAtomExt, ptr %111, i64 %890
  %892 = load i32, ptr %891, align 4
  %893 = icmp sgt i32 %892, -1
  br i1 %893, label %894, label %898

894:                                              ; preds = %884
  %895 = add nsw i32 %886, 1
  %896 = sext i32 %886 to i64
  %897 = getelementptr inbounds i16, ptr %303, i64 %896
  store i16 %889, ptr %897, align 2, !tbaa !44
  br label %898

898:                                              ; preds = %884, %894
  %899 = phi i32 [ %886, %884 ], [ %895, %894 ]
  %900 = or i64 %885, 1
  %901 = getelementptr inbounds i16, ptr %257, i64 %900
  %902 = load i16, ptr %901, align 2, !tbaa !44
  %903 = zext i16 %902 to i64
  %904 = getelementptr inbounds %struct.CompAtomExt, ptr %111, i64 %903
  %905 = load i32, ptr %904, align 4
  %906 = icmp sgt i32 %905, -1
  br i1 %906, label %907, label %911

907:                                              ; preds = %898
  %908 = add nsw i32 %899, 1
  %909 = sext i32 %899 to i64
  %910 = getelementptr inbounds i16, ptr %303, i64 %909
  store i16 %902, ptr %910, align 2, !tbaa !44
  br label %911

911:                                              ; preds = %907, %898
  %912 = phi i32 [ %899, %898 ], [ %908, %907 ]
  %913 = add nuw nsw i64 %885, 2
  %914 = add i64 %887, 2
  %915 = icmp eq i64 %914, %883
  br i1 %915, label %916, label %884

916:                                              ; preds = %911, %878
  %917 = phi i32 [ undef, %878 ], [ %912, %911 ]
  %918 = phi i64 [ 0, %878 ], [ %913, %911 ]
  %919 = phi i32 [ 0, %878 ], [ %912, %911 ]
  %920 = icmp eq i64 %880, 0
  br i1 %920, label %932, label %921

921:                                              ; preds = %916
  %922 = getelementptr inbounds i16, ptr %257, i64 %918
  %923 = load i16, ptr %922, align 2, !tbaa !44
  %924 = zext i16 %923 to i64
  %925 = getelementptr inbounds %struct.CompAtomExt, ptr %111, i64 %924
  %926 = load i32, ptr %925, align 4
  %927 = icmp sgt i32 %926, -1
  br i1 %927, label %928, label %932

928:                                              ; preds = %921
  %929 = add nsw i32 %919, 1
  %930 = sext i32 %919 to i64
  %931 = getelementptr inbounds i16, ptr %303, i64 %930
  store i16 %923, ptr %931, align 2, !tbaa !44
  br label %932

932:                                              ; preds = %921, %928, %916
  %933 = phi i32 [ %917, %916 ], [ %919, %921 ], [ %929, %928 ]
  %934 = icmp eq i32 %933, 0
  br i1 %934, label %942, label %935

935:                                              ; preds = %932
  %936 = add nsw i32 %933, -1
  %937 = sext i32 %936 to i64
  %938 = getelementptr inbounds i16, ptr %303, i64 %937
  %939 = load i16, ptr %938, align 2, !tbaa !44
  %940 = sext i32 %933 to i64
  %941 = getelementptr inbounds i16, ptr %303, i64 %940
  store i16 %939, ptr %941, align 2, !tbaa !44
  br label %942

942:                                              ; preds = %810, %873, %935, %932
  %943 = phi i32 [ %864, %935 ], [ %864, %932 ], [ %864, %873 ], [ 0, %810 ]
  %944 = phi i32 [ %933, %935 ], [ 0, %932 ], [ 0, %873 ], [ 0, %810 ]
  %945 = load i32, ptr %17, align 8, !tbaa !17
  %946 = add nsw i32 %945, 1
  store i32 %946, ptr %17, align 8, !tbaa !17
  %947 = trunc i32 %102 to i16
  %948 = load ptr, ptr %12, align 8, !tbaa !46
  %949 = sext i32 %945 to i64
  %950 = getelementptr inbounds i16, ptr %948, i64 %949
  store i16 %947, ptr %950, align 2, !tbaa !44
  br label %961

951:                                              ; preds = %807
  %952 = load ptr, ptr %12, align 8, !tbaa !46
  %953 = load i32, ptr %17, align 8, !tbaa !17
  %954 = add nsw i32 %953, 1
  store i32 %954, ptr %17, align 8, !tbaa !17
  %955 = sext i32 %953 to i64
  %956 = getelementptr inbounds i16, ptr %952, i64 %955
  %957 = load i16, ptr %956, align 2, !tbaa !44
  %958 = zext i16 %957 to i32
  %959 = icmp eq i32 %102, %958
  br i1 %959, label %961, label %960

960:                                              ; preds = %951
  tail call void @_Z8NAMD_bugPKc(ptr noundef nonnull @.str)
  br label %961

961:                                              ; preds = %951, %960, %942
  %962 = phi i32 [ 0, %960 ], [ 0, %951 ], [ %943, %942 ]
  %963 = phi i32 [ 0, %960 ], [ 0, %951 ], [ %944, %942 ]
  %964 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %113, i64 0, i32 18, i32 1
  %965 = load ptr, ptr %964, align 8, !tbaa !222
  tail call void @_ZN14ResizeArrayRawI6VectorE6resizeEi(ptr noundef nonnull align 8 dereferenceable(36) %965, i32 noundef %102)
  %966 = load ptr, ptr %964, align 8, !tbaa !222
  %967 = load ptr, ptr %966, align 8, !tbaa !224
  %968 = sext i32 %102 to i64
  %969 = mul nsw i64 %968, 24
  tail call void @llvm.memset.p0.i64(ptr align 1 %967, i8 0, i64 %969, i1 false)
  %970 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 18
  %971 = load i32, ptr %970, align 4, !tbaa !48
  %972 = add nsw i32 %971, -1
  %973 = add nsw i32 %102, -1
  %974 = icmp sgt i32 %102, 1
  br i1 %974, label %975, label %4093

975:                                              ; preds = %961
  %976 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 16
  %977 = load i32, ptr %976, align 4, !tbaa !47
  %978 = getelementptr inbounds %class.Molecule, ptr %30, i64 0, i32 1
  %979 = getelementptr inbounds %class.Molecule, ptr %30, i64 0, i32 4
  %980 = getelementptr inbounds %class.Molecule, ptr %30, i64 0, i32 2
  %981 = getelementptr inbounds %class.Molecule, ptr %30, i64 0, i32 3
  %982 = ptrtoint ptr %487 to i64
  %983 = add nsw i32 %104, 30
  %984 = getelementptr inbounds %class.Pairlists, ptr %12, i64 0, i32 2
  %985 = ptrtoint ptr %533 to i64
  %986 = ptrtoint ptr %395 to i64
  %987 = ptrtoint ptr %441 to i64
  %988 = ptrtoint ptr %579 to i64
  %989 = ptrtoint ptr %625 to i64
  %990 = ptrtoint ptr %671 to i64
  %991 = ptrtoint ptr %717 to i64
  %992 = ptrtoint ptr %763 to i64
  %993 = ptrtoint ptr %809 to i64
  %994 = getelementptr inbounds %class.LJTable, ptr %29, i64 0, i32 1
  %995 = getelementptr inbounds %class.LJTable, ptr %29, i64 0, i32 2
  %996 = fneg double %32
  %997 = fneg double %34
  %998 = fneg <2 x double> %74
  %999 = fneg <2 x double> %85
  %1000 = sext i32 %962 to i64
  %1001 = sext i32 %963 to i64
  %1002 = insertelement <2 x double> poison, double %27, i64 0
  %1003 = shufflevector <2 x double> %1002, <2 x double> poison, <2 x i32> zeroinitializer
  %1004 = extractelement <2 x double> %74, i64 1
  %1005 = extractelement <2 x double> %85, i64 1
  %1006 = extractelement <2 x double> %74, i64 1
  %1007 = extractelement <2 x double> %85, i64 1
  %1008 = extractelement <2 x double> %74, i64 1
  %1009 = extractelement <2 x double> %85, i64 1
  br label %1010

1010:                                             ; preds = %975, %4077
  %1011 = phi i32 [ 0, %975 ], [ %4088, %4077 ]
  %1012 = phi i32 [ 0, %975 ], [ %4091, %4077 ]
  %1013 = phi ptr [ null, %975 ], [ %4086, %4077 ]
  %1014 = phi ptr [ null, %975 ], [ %4085, %4077 ]
  %1015 = phi ptr [ null, %975 ], [ %4084, %4077 ]
  %1016 = phi i32 [ 0, %975 ], [ %4083, %4077 ]
  %1017 = phi i32 [ 0, %975 ], [ %4082, %4077 ]
  %1018 = phi i32 [ 0, %975 ], [ %4081, %4077 ]
  %1019 = phi i32 [ 0, %975 ], [ %4080, %4077 ]
  %1020 = phi i32 [ 0, %975 ], [ %4079, %4077 ]
  %1021 = phi i32 [ %977, %975 ], [ %4078, %4077 ]
  %1022 = phi <2 x double> [ zeroinitializer, %975 ], [ %4089, %4077 ]
  %1023 = phi <2 x double> [ zeroinitializer, %975 ], [ %4090, %4077 ]
  %1024 = sext i32 %1012 to i64
  %1025 = getelementptr inbounds %struct.CompAtom, ptr %105, i64 %1024
  %1026 = getelementptr inbounds %struct.CompAtomExt, ptr %109, i64 %1024
  %1027 = getelementptr inbounds %struct.CompAtom, ptr %105, i64 %1024, i32 4
  %1028 = load i8, ptr %1027, align 1
  %1029 = lshr i8 %1028, 3
  %1030 = and i8 %1029, 15
  %1031 = zext i8 %1030 to i32
  %1032 = icmp eq i8 %1030, 0
  br i1 %1032, label %1039, label %1033

1033:                                             ; preds = %1010
  %1034 = icmp eq i32 %1021, 0
  br i1 %1034, label %1039, label %1035

1035:                                             ; preds = %1033
  %1036 = add nsw i32 %1021, -1
  %1037 = add nsw i32 %1012, -1
  %1038 = add i32 %1037, %1031
  br label %4077

1039:                                             ; preds = %1033, %1010
  %1040 = phi i32 [ %1021, %1010 ], [ %972, %1033 ]
  %1041 = load <2 x double>, ptr %1025, align 8, !tbaa !19
  %1042 = fadd <2 x double> %19, %1041
  %1043 = getelementptr inbounds %class.Vector, ptr %1025, i64 0, i32 2
  %1044 = load double, ptr %1043, align 8, !tbaa !49
  %1045 = fadd double %21, %1044
  %1046 = getelementptr inbounds %struct.CompAtom, ptr %105, i64 %1024, i32 3
  %1047 = load i8, ptr %1046, align 2, !tbaa !51
  %1048 = zext i8 %1047 to i32
  %1049 = add nsw i32 %1012, %1031
  %1050 = select i1 %1032, i32 %1016, i32 %1049
  br i1 %210, label %2961, label %1051

1051:                                             ; preds = %1039
  %1052 = load i32, ptr %1026, align 4
  %1053 = shl i32 %1052, 2
  %1054 = ashr exact i32 %1053, 2
  %1055 = load ptr, ptr %978, align 8, !tbaa !52
  %1056 = sext i32 %1054 to i64
  %1057 = getelementptr inbounds %class.ExclusionCheck, ptr %1055, i64 %1056
  %1058 = load i32, ptr %1057, align 8, !tbaa !54
  %1059 = getelementptr inbounds %class.ExclusionCheck, ptr %1055, i64 %1056, i32 1
  %1060 = load i32, ptr %1059, align 4, !tbaa !56
  %1061 = getelementptr inbounds %class.ExclusionCheck, ptr %1055, i64 %1056, i32 2
  %1062 = load ptr, ptr %1061, align 8, !tbaa !57
  %1063 = icmp eq ptr %1062, null
  br i1 %1063, label %1068, label %1064

1064:                                             ; preds = %1051
  %1065 = sext i32 %1058 to i64
  %1066 = sub nsw i64 0, %1065
  %1067 = getelementptr inbounds i8, ptr %1062, i64 %1066
  br label %1294

1068:                                             ; preds = %1051
  %1069 = icmp eq ptr %1013, null
  br i1 %1069, label %1157, label %1070

1070:                                             ; preds = %1068
  %1071 = load i32, ptr %1014, align 4, !tbaa !5
  %1072 = icmp slt i32 %1071, 1
  br i1 %1072, label %1120, label %1073

1073:                                             ; preds = %1070
  %1074 = add nuw i32 %1071, 1
  %1075 = zext i32 %1074 to i64
  %1076 = add nsw i64 %1075, -1
  %1077 = add nsw i64 %1075, -2
  %1078 = and i64 %1076, 3
  %1079 = icmp ult i64 %1077, 3
  br i1 %1079, label %1107, label %1080

1080:                                             ; preds = %1073
  %1081 = and i64 %1076, -4
  br label %1082

1082:                                             ; preds = %1082, %1080
  %1083 = phi i64 [ 1, %1080 ], [ %1104, %1082 ]
  %1084 = phi i64 [ 0, %1080 ], [ %1105, %1082 ]
  %1085 = getelementptr inbounds i32, ptr %1014, i64 %1083
  %1086 = load i32, ptr %1085, align 4, !tbaa !5
  %1087 = sext i32 %1086 to i64
  %1088 = getelementptr inbounds i8, ptr %1013, i64 %1087
  store i8 0, ptr %1088, align 1, !tbaa !58
  %1089 = add nuw nsw i64 %1083, 1
  %1090 = getelementptr inbounds i32, ptr %1014, i64 %1089
  %1091 = load i32, ptr %1090, align 4, !tbaa !5
  %1092 = sext i32 %1091 to i64
  %1093 = getelementptr inbounds i8, ptr %1013, i64 %1092
  store i8 0, ptr %1093, align 1, !tbaa !58
  %1094 = add nuw nsw i64 %1083, 2
  %1095 = getelementptr inbounds i32, ptr %1014, i64 %1094
  %1096 = load i32, ptr %1095, align 4, !tbaa !5
  %1097 = sext i32 %1096 to i64
  %1098 = getelementptr inbounds i8, ptr %1013, i64 %1097
  store i8 0, ptr %1098, align 1, !tbaa !58
  %1099 = add nuw nsw i64 %1083, 3
  %1100 = getelementptr inbounds i32, ptr %1014, i64 %1099
  %1101 = load i32, ptr %1100, align 4, !tbaa !5
  %1102 = sext i32 %1101 to i64
  %1103 = getelementptr inbounds i8, ptr %1013, i64 %1102
  store i8 0, ptr %1103, align 1, !tbaa !58
  %1104 = add nuw nsw i64 %1083, 4
  %1105 = add i64 %1084, 4
  %1106 = icmp eq i64 %1105, %1081
  br i1 %1106, label %1107, label %1082

1107:                                             ; preds = %1082, %1073
  %1108 = phi i64 [ 1, %1073 ], [ %1104, %1082 ]
  %1109 = icmp eq i64 %1078, 0
  br i1 %1109, label %1120, label %1110

1110:                                             ; preds = %1107, %1110
  %1111 = phi i64 [ %1117, %1110 ], [ %1108, %1107 ]
  %1112 = phi i64 [ %1118, %1110 ], [ 0, %1107 ]
  %1113 = getelementptr inbounds i32, ptr %1014, i64 %1111
  %1114 = load i32, ptr %1113, align 4, !tbaa !5
  %1115 = sext i32 %1114 to i64
  %1116 = getelementptr inbounds i8, ptr %1013, i64 %1115
  store i8 0, ptr %1116, align 1, !tbaa !58
  %1117 = add nuw nsw i64 %1111, 1
  %1118 = add i64 %1112, 1
  %1119 = icmp eq i64 %1118, %1078
  br i1 %1119, label %1120, label %1110, !llvm.loop !305

1120:                                             ; preds = %1107, %1110, %1070
  %1121 = load i32, ptr %1015, align 4, !tbaa !5
  %1122 = icmp slt i32 %1121, 1
  br i1 %1122, label %1177, label %1123

1123:                                             ; preds = %1120
  %1124 = add nuw i32 %1121, 1
  %1125 = zext i32 %1124 to i64
  %1126 = add nsw i64 %1125, -1
  %1127 = add nsw i64 %1125, -2
  %1128 = and i64 %1126, 3
  %1129 = icmp ult i64 %1127, 3
  br i1 %1129, label %1164, label %1130

1130:                                             ; preds = %1123
  %1131 = and i64 %1126, -4
  br label %1132

1132:                                             ; preds = %1132, %1130
  %1133 = phi i64 [ 1, %1130 ], [ %1154, %1132 ]
  %1134 = phi i64 [ 0, %1130 ], [ %1155, %1132 ]
  %1135 = getelementptr inbounds i32, ptr %1015, i64 %1133
  %1136 = load i32, ptr %1135, align 4, !tbaa !5
  %1137 = sext i32 %1136 to i64
  %1138 = getelementptr inbounds i8, ptr %1013, i64 %1137
  store i8 0, ptr %1138, align 1, !tbaa !58
  %1139 = add nuw nsw i64 %1133, 1
  %1140 = getelementptr inbounds i32, ptr %1015, i64 %1139
  %1141 = load i32, ptr %1140, align 4, !tbaa !5
  %1142 = sext i32 %1141 to i64
  %1143 = getelementptr inbounds i8, ptr %1013, i64 %1142
  store i8 0, ptr %1143, align 1, !tbaa !58
  %1144 = add nuw nsw i64 %1133, 2
  %1145 = getelementptr inbounds i32, ptr %1015, i64 %1144
  %1146 = load i32, ptr %1145, align 4, !tbaa !5
  %1147 = sext i32 %1146 to i64
  %1148 = getelementptr inbounds i8, ptr %1013, i64 %1147
  store i8 0, ptr %1148, align 1, !tbaa !58
  %1149 = add nuw nsw i64 %1133, 3
  %1150 = getelementptr inbounds i32, ptr %1015, i64 %1149
  %1151 = load i32, ptr %1150, align 4, !tbaa !5
  %1152 = sext i32 %1151 to i64
  %1153 = getelementptr inbounds i8, ptr %1013, i64 %1152
  store i8 0, ptr %1153, align 1, !tbaa !58
  %1154 = add nuw nsw i64 %1133, 4
  %1155 = add i64 %1134, 4
  %1156 = icmp eq i64 %1155, %1131
  br i1 %1156, label %1164, label %1132

1157:                                             ; preds = %1068
  %1158 = load i32, ptr %979, align 8, !tbaa !61
  %1159 = call i32 @llvm.smax.i32(i32 %1158, i32 -1)
  %1160 = sext i32 %1159 to i64
  %1161 = call noalias noundef nonnull ptr @_Znam(i64 noundef %1160) #12
  %1162 = load i32, ptr %979, align 8, !tbaa !61
  %1163 = sext i32 %1162 to i64
  call void @llvm.memset.p0.i64(ptr nonnull align 1 %1161, i8 0, i64 %1163, i1 false)
  br label %1177

1164:                                             ; preds = %1132, %1123
  %1165 = phi i64 [ 1, %1123 ], [ %1154, %1132 ]
  %1166 = icmp eq i64 %1128, 0
  br i1 %1166, label %1177, label %1167

1167:                                             ; preds = %1164, %1167
  %1168 = phi i64 [ %1174, %1167 ], [ %1165, %1164 ]
  %1169 = phi i64 [ %1175, %1167 ], [ 0, %1164 ]
  %1170 = getelementptr inbounds i32, ptr %1015, i64 %1168
  %1171 = load i32, ptr %1170, align 4, !tbaa !5
  %1172 = sext i32 %1171 to i64
  %1173 = getelementptr inbounds i8, ptr %1013, i64 %1172
  store i8 0, ptr %1173, align 1, !tbaa !58
  %1174 = add nuw nsw i64 %1168, 1
  %1175 = add i64 %1169, 1
  %1176 = icmp eq i64 %1175, %1128
  br i1 %1176, label %1177, label %1167, !llvm.loop !306

1177:                                             ; preds = %1164, %1167, %1120, %1157
  %1178 = phi ptr [ %1161, %1157 ], [ %1013, %1120 ], [ %1013, %1167 ], [ %1013, %1164 ]
  %1179 = load i32, ptr %1026, align 4
  %1180 = shl i32 %1179, 2
  %1181 = ashr exact i32 %1180, 2
  %1182 = load ptr, ptr %980, align 8, !tbaa !63
  %1183 = sext i32 %1181 to i64
  %1184 = getelementptr inbounds ptr, ptr %1182, i64 %1183
  %1185 = load ptr, ptr %1184, align 8, !tbaa !23
  %1186 = load i32, ptr %1185, align 4, !tbaa !5
  %1187 = icmp slt i32 %1186, 1
  br i1 %1187, label %1240, label %1188

1188:                                             ; preds = %1177
  %1189 = add nuw i32 %1186, 1
  %1190 = zext i32 %1189 to i64
  %1191 = add nsw i64 %1190, -1
  %1192 = add nsw i64 %1190, -2
  %1193 = and i64 %1191, 3
  %1194 = icmp ult i64 %1192, 3
  br i1 %1194, label %1222, label %1195

1195:                                             ; preds = %1188
  %1196 = and i64 %1191, -4
  br label %1197

1197:                                             ; preds = %1197, %1195
  %1198 = phi i64 [ 1, %1195 ], [ %1219, %1197 ]
  %1199 = phi i64 [ 0, %1195 ], [ %1220, %1197 ]
  %1200 = getelementptr inbounds i32, ptr %1185, i64 %1198
  %1201 = load i32, ptr %1200, align 4, !tbaa !5
  %1202 = sext i32 %1201 to i64
  %1203 = getelementptr inbounds i8, ptr %1178, i64 %1202
  store i8 1, ptr %1203, align 1, !tbaa !58
  %1204 = add nuw nsw i64 %1198, 1
  %1205 = getelementptr inbounds i32, ptr %1185, i64 %1204
  %1206 = load i32, ptr %1205, align 4, !tbaa !5
  %1207 = sext i32 %1206 to i64
  %1208 = getelementptr inbounds i8, ptr %1178, i64 %1207
  store i8 1, ptr %1208, align 1, !tbaa !58
  %1209 = add nuw nsw i64 %1198, 2
  %1210 = getelementptr inbounds i32, ptr %1185, i64 %1209
  %1211 = load i32, ptr %1210, align 4, !tbaa !5
  %1212 = sext i32 %1211 to i64
  %1213 = getelementptr inbounds i8, ptr %1178, i64 %1212
  store i8 1, ptr %1213, align 1, !tbaa !58
  %1214 = add nuw nsw i64 %1198, 3
  %1215 = getelementptr inbounds i32, ptr %1185, i64 %1214
  %1216 = load i32, ptr %1215, align 4, !tbaa !5
  %1217 = sext i32 %1216 to i64
  %1218 = getelementptr inbounds i8, ptr %1178, i64 %1217
  store i8 1, ptr %1218, align 1, !tbaa !58
  %1219 = add nuw nsw i64 %1198, 4
  %1220 = add i64 %1199, 4
  %1221 = icmp eq i64 %1220, %1196
  br i1 %1221, label %1222, label %1197

1222:                                             ; preds = %1197, %1188
  %1223 = phi i64 [ 1, %1188 ], [ %1219, %1197 ]
  %1224 = icmp eq i64 %1193, 0
  br i1 %1224, label %1235, label %1225

1225:                                             ; preds = %1222, %1225
  %1226 = phi i64 [ %1232, %1225 ], [ %1223, %1222 ]
  %1227 = phi i64 [ %1233, %1225 ], [ 0, %1222 ]
  %1228 = getelementptr inbounds i32, ptr %1185, i64 %1226
  %1229 = load i32, ptr %1228, align 4, !tbaa !5
  %1230 = sext i32 %1229 to i64
  %1231 = getelementptr inbounds i8, ptr %1178, i64 %1230
  store i8 1, ptr %1231, align 1, !tbaa !58
  %1232 = add nuw nsw i64 %1226, 1
  %1233 = add i64 %1227, 1
  %1234 = icmp eq i64 %1233, %1193
  br i1 %1234, label %1235, label %1225, !llvm.loop !307

1235:                                             ; preds = %1225, %1222
  %1236 = load i32, ptr %1026, align 4
  %1237 = shl i32 %1236, 2
  %1238 = ashr exact i32 %1237, 2
  %1239 = sext i32 %1238 to i64
  br label %1240

1240:                                             ; preds = %1235, %1177
  %1241 = phi i64 [ %1239, %1235 ], [ %1183, %1177 ]
  %1242 = load ptr, ptr %981, align 8, !tbaa !65
  %1243 = getelementptr inbounds ptr, ptr %1242, i64 %1241
  %1244 = load ptr, ptr %1243, align 8, !tbaa !23
  %1245 = load i32, ptr %1244, align 4, !tbaa !5
  %1246 = icmp slt i32 %1245, 1
  br i1 %1246, label %1294, label %1247

1247:                                             ; preds = %1240
  %1248 = add nuw i32 %1245, 1
  %1249 = zext i32 %1248 to i64
  %1250 = add nsw i64 %1249, -1
  %1251 = add nsw i64 %1249, -2
  %1252 = and i64 %1250, 3
  %1253 = icmp ult i64 %1251, 3
  br i1 %1253, label %1281, label %1254

1254:                                             ; preds = %1247
  %1255 = and i64 %1250, -4
  br label %1256

1256:                                             ; preds = %1256, %1254
  %1257 = phi i64 [ 1, %1254 ], [ %1278, %1256 ]
  %1258 = phi i64 [ 0, %1254 ], [ %1279, %1256 ]
  %1259 = getelementptr inbounds i32, ptr %1244, i64 %1257
  %1260 = load i32, ptr %1259, align 4, !tbaa !5
  %1261 = sext i32 %1260 to i64
  %1262 = getelementptr inbounds i8, ptr %1178, i64 %1261
  store i8 2, ptr %1262, align 1, !tbaa !58
  %1263 = add nuw nsw i64 %1257, 1
  %1264 = getelementptr inbounds i32, ptr %1244, i64 %1263
  %1265 = load i32, ptr %1264, align 4, !tbaa !5
  %1266 = sext i32 %1265 to i64
  %1267 = getelementptr inbounds i8, ptr %1178, i64 %1266
  store i8 2, ptr %1267, align 1, !tbaa !58
  %1268 = add nuw nsw i64 %1257, 2
  %1269 = getelementptr inbounds i32, ptr %1244, i64 %1268
  %1270 = load i32, ptr %1269, align 4, !tbaa !5
  %1271 = sext i32 %1270 to i64
  %1272 = getelementptr inbounds i8, ptr %1178, i64 %1271
  store i8 2, ptr %1272, align 1, !tbaa !58
  %1273 = add nuw nsw i64 %1257, 3
  %1274 = getelementptr inbounds i32, ptr %1244, i64 %1273
  %1275 = load i32, ptr %1274, align 4, !tbaa !5
  %1276 = sext i32 %1275 to i64
  %1277 = getelementptr inbounds i8, ptr %1178, i64 %1276
  store i8 2, ptr %1277, align 1, !tbaa !58
  %1278 = add nuw nsw i64 %1257, 4
  %1279 = add i64 %1258, 4
  %1280 = icmp eq i64 %1279, %1255
  br i1 %1280, label %1281, label %1256

1281:                                             ; preds = %1256, %1247
  %1282 = phi i64 [ 1, %1247 ], [ %1278, %1256 ]
  %1283 = icmp eq i64 %1252, 0
  br i1 %1283, label %1294, label %1284

1284:                                             ; preds = %1281, %1284
  %1285 = phi i64 [ %1291, %1284 ], [ %1282, %1281 ]
  %1286 = phi i64 [ %1292, %1284 ], [ 0, %1281 ]
  %1287 = getelementptr inbounds i32, ptr %1244, i64 %1285
  %1288 = load i32, ptr %1287, align 4, !tbaa !5
  %1289 = sext i32 %1288 to i64
  %1290 = getelementptr inbounds i8, ptr %1178, i64 %1289
  store i8 2, ptr %1290, align 1, !tbaa !58
  %1291 = add nuw nsw i64 %1285, 1
  %1292 = add i64 %1286, 1
  %1293 = icmp eq i64 %1292, %1252
  br i1 %1293, label %1294, label %1284, !llvm.loop !308

1294:                                             ; preds = %1281, %1284, %1240, %1064
  %1295 = phi ptr [ %1067, %1064 ], [ %1178, %1240 ], [ %1178, %1284 ], [ %1178, %1281 ]
  %1296 = phi ptr [ %1015, %1064 ], [ %1244, %1240 ], [ %1244, %1284 ], [ %1244, %1281 ]
  %1297 = phi ptr [ %1014, %1064 ], [ %1185, %1240 ], [ %1185, %1284 ], [ %1185, %1281 ]
  %1298 = phi ptr [ %1013, %1064 ], [ %1178, %1240 ], [ %1178, %1284 ], [ %1178, %1281 ]
  %1299 = load i8, ptr %1027, align 1
  %1300 = and i8 %1299, 7
  %1301 = icmp eq i8 %1300, 0
  br i1 %1301, label %1595, label %1302

1302:                                             ; preds = %1294
  %1303 = load i32, ptr @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4, !tbaa !5
  %1304 = icmp eq i32 %1303, 0
  br i1 %1304, label %1308, label %1305

1305:                                             ; preds = %1302
  %1306 = load i32, ptr %1026, align 4
  %1307 = icmp slt i32 %1306, 0
  br label %1308

1308:                                             ; preds = %1305, %1302
  %1309 = phi i1 [ false, %1302 ], [ %1307, %1305 ]
  %1310 = and i8 %1299, 120
  %1311 = icmp eq i8 %1310, 0
  br i1 %1311, label %1343, label %1312

1312:                                             ; preds = %1308
  %1313 = icmp slt i32 %1017, %962
  br i1 %1313, label %1314, label %1327

1314:                                             ; preds = %1312
  %1315 = sext i32 %1017 to i64
  br label %1316

1316:                                             ; preds = %1314, %1322
  %1317 = phi i64 [ %1315, %1314 ], [ %1323, %1322 ]
  %1318 = getelementptr inbounds i16, ptr %257, i64 %1317
  %1319 = load i16, ptr %1318, align 2, !tbaa !44
  %1320 = zext i16 %1319 to i32
  %1321 = icmp sgt i32 %1050, %1320
  br i1 %1321, label %1322, label %1325

1322:                                             ; preds = %1316
  %1323 = add nsw i64 %1317, 1
  %1324 = icmp eq i64 %1323, %1000
  br i1 %1324, label %1327, label %1316

1325:                                             ; preds = %1316
  %1326 = trunc i64 %1317 to i32
  br label %1327

1327:                                             ; preds = %1322, %1325, %1312
  %1328 = phi i32 [ %1017, %1312 ], [ %1326, %1325 ], [ %962, %1322 ]
  %1329 = icmp slt i32 %1018, %963
  br i1 %1329, label %1330, label %1343

1330:                                             ; preds = %1327
  %1331 = sext i32 %1018 to i64
  br label %1332

1332:                                             ; preds = %1330, %1338
  %1333 = phi i64 [ %1331, %1330 ], [ %1339, %1338 ]
  %1334 = getelementptr inbounds i16, ptr %303, i64 %1333
  %1335 = load i16, ptr %1334, align 2, !tbaa !44
  %1336 = zext i16 %1335 to i32
  %1337 = icmp sgt i32 %1050, %1336
  br i1 %1337, label %1338, label %1341

1338:                                             ; preds = %1332
  %1339 = add nsw i64 %1333, 1
  %1340 = icmp eq i64 %1339, %1001
  br i1 %1340, label %1343, label %1332

1341:                                             ; preds = %1332
  %1342 = trunc i64 %1333 to i32
  br label %1343

1343:                                             ; preds = %1338, %1341, %1327, %1308
  %1344 = phi i32 [ %1018, %1308 ], [ %1018, %1327 ], [ %1342, %1341 ], [ %963, %1338 ]
  %1345 = phi i32 [ %1017, %1308 ], [ %1328, %1327 ], [ %1328, %1341 ], [ %1328, %1338 ]
  %1346 = add nsw i32 %1012, 1
  %1347 = icmp slt i32 %1346, %1050
  br i1 %1347, label %1348, label %1413

1348:                                             ; preds = %1343
  %1349 = xor i32 %1012, -1
  %1350 = add i32 %1050, %1349
  %1351 = zext i32 %1350 to i64
  %1352 = icmp ult i32 %1350, 8
  br i1 %1352, label %1402, label %1353

1353:                                             ; preds = %1348
  %1354 = icmp ult i32 %1350, 64
  br i1 %1354, label %1383, label %1355

1355:                                             ; preds = %1353
  %1356 = and i64 %1351, 4294967232
  %1357 = trunc i32 %1346 to i16
  %1358 = insertelement <16 x i16> poison, i16 %1357, i64 0
  %1359 = shufflevector <16 x i16> %1358, <16 x i16> poison, <16 x i32> zeroinitializer
  %1360 = add <16 x i16> %1359, <i16 0, i16 1, i16 2, i16 3, i16 4, i16 5, i16 6, i16 7, i16 8, i16 9, i16 10, i16 11, i16 12, i16 13, i16 14, i16 15>
  %1361 = trunc i64 %1356 to i32
  %1362 = add i32 %1346, %1361
  br label %1363

1363:                                             ; preds = %1363, %1355
  %1364 = phi i64 [ 0, %1355 ], [ %1373, %1363 ]
  %1365 = phi <16 x i16> [ %1360, %1355 ], [ %1374, %1363 ]
  %1366 = add <16 x i16> %1365, <i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16>
  %1367 = add <16 x i16> %1365, <i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32>
  %1368 = add <16 x i16> %1365, <i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48>
  %1369 = getelementptr inbounds i16, ptr %487, i64 %1364
  store <16 x i16> %1365, ptr %1369, align 2, !tbaa !44
  %1370 = getelementptr inbounds i16, ptr %1369, i64 16
  store <16 x i16> %1366, ptr %1370, align 2, !tbaa !44
  %1371 = getelementptr inbounds i16, ptr %1369, i64 32
  store <16 x i16> %1367, ptr %1371, align 2, !tbaa !44
  %1372 = getelementptr inbounds i16, ptr %1369, i64 48
  store <16 x i16> %1368, ptr %1372, align 2, !tbaa !44
  %1373 = add nuw i64 %1364, 64
  %1374 = add <16 x i16> %1365, <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>
  %1375 = icmp eq i64 %1373, %1356
  br i1 %1375, label %1376, label %1363, !llvm.loop !309

1376:                                             ; preds = %1363
  %1377 = icmp eq i64 %1356, %1351
  br i1 %1377, label %1413, label %1378

1378:                                             ; preds = %1376
  %1379 = trunc i64 %1356 to i32
  %1380 = add i32 %1346, %1379
  %1381 = and i64 %1351, 56
  %1382 = icmp eq i64 %1381, 0
  br i1 %1382, label %1402, label %1383

1383:                                             ; preds = %1353, %1378
  %1384 = phi i32 [ %1362, %1378 ], [ %1346, %1353 ]
  %1385 = phi i64 [ %1356, %1378 ], [ 0, %1353 ]
  %1386 = and i64 %1351, 4294967288
  %1387 = trunc i64 %1386 to i32
  %1388 = add i32 %1346, %1387
  %1389 = trunc i32 %1384 to i16
  %1390 = insertelement <8 x i16> poison, i16 %1389, i64 0
  %1391 = shufflevector <8 x i16> %1390, <8 x i16> poison, <8 x i32> zeroinitializer
  %1392 = add <8 x i16> %1391, <i16 0, i16 1, i16 2, i16 3, i16 4, i16 5, i16 6, i16 7>
  br label %1393

1393:                                             ; preds = %1393, %1383
  %1394 = phi i64 [ %1385, %1383 ], [ %1397, %1393 ]
  %1395 = phi <8 x i16> [ %1392, %1383 ], [ %1398, %1393 ]
  %1396 = getelementptr inbounds i16, ptr %487, i64 %1394
  store <8 x i16> %1395, ptr %1396, align 2, !tbaa !44
  %1397 = add nuw i64 %1394, 8
  %1398 = add <8 x i16> %1395, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %1399 = icmp eq i64 %1397, %1386
  br i1 %1399, label %1400, label %1393, !llvm.loop !310

1400:                                             ; preds = %1393
  %1401 = icmp eq i64 %1386, %1351
  br i1 %1401, label %1413, label %1402

1402:                                             ; preds = %1348, %1378, %1400
  %1403 = phi i64 [ 0, %1348 ], [ %1356, %1378 ], [ %1386, %1400 ]
  %1404 = phi i32 [ %1346, %1348 ], [ %1380, %1378 ], [ %1388, %1400 ]
  br label %1405

1405:                                             ; preds = %1402, %1405
  %1406 = phi i64 [ %1409, %1405 ], [ %1403, %1402 ]
  %1407 = phi i32 [ %1411, %1405 ], [ %1404, %1402 ]
  %1408 = trunc i32 %1407 to i16
  %1409 = add nuw nsw i64 %1406, 1
  %1410 = getelementptr inbounds i16, ptr %487, i64 %1406
  store i16 %1408, ptr %1410, align 2, !tbaa !44
  %1411 = add nsw i32 %1407, 1
  %1412 = icmp eq i64 %1409, %1351
  br i1 %1412, label %1413, label %1405, !llvm.loop !311

1413:                                             ; preds = %1405, %1376, %1400, %1343
  %1414 = phi i32 [ 0, %1343 ], [ %1350, %1400 ], [ %1350, %1376 ], [ %1350, %1405 ]
  %1415 = zext i32 %1414 to i64
  %1416 = getelementptr inbounds i16, ptr %487, i64 %1415
  %1417 = select i1 %1309, ptr %303, ptr %257
  %1418 = select i1 %1309, i32 %1344, i32 %1345
  %1419 = select i1 %1309, i32 %963, i32 %962
  %1420 = icmp slt i32 %1418, %1419
  br i1 %1420, label %1421, label %1580

1421:                                             ; preds = %1413
  %1422 = sub nsw i32 %1419, %1418
  %1423 = icmp sgt i32 %1422, 6
  br i1 %1423, label %1424, label %1517

1424:                                             ; preds = %1421
  %1425 = add nsw i32 %1419, -2
  %1426 = add nsw i32 %1418, 2
  %1427 = icmp slt i32 %1426, %1425
  br i1 %1427, label %1428, label %1517

1428:                                             ; preds = %1424
  %1429 = add nsw i32 %1418, 1
  %1430 = sext i32 %1429 to i64
  %1431 = getelementptr inbounds i16, ptr %1417, i64 %1430
  %1432 = load i16, ptr %1431, align 2, !tbaa !44
  %1433 = zext i16 %1432 to i64
  %1434 = getelementptr inbounds %struct.CompAtom, ptr %107, i64 %1433
  %1435 = getelementptr inbounds %class.Vector, ptr %1434, i64 0, i32 2
  %1436 = load double, ptr %1435, align 8, !tbaa !49
  %1437 = sext i32 %1418 to i64
  %1438 = getelementptr inbounds i16, ptr %1417, i64 %1437
  %1439 = load i16, ptr %1438, align 2, !tbaa !44
  %1440 = zext i16 %1439 to i64
  %1441 = getelementptr inbounds %struct.CompAtom, ptr %107, i64 %1440
  %1442 = getelementptr inbounds %class.Vector, ptr %1441, i64 0, i32 2
  %1443 = load double, ptr %1442, align 8, !tbaa !49
  %1444 = getelementptr inbounds %class.Vector, ptr %1434, i64 0, i32 1
  %1445 = load double, ptr %1444, align 8, !tbaa !67
  %1446 = getelementptr inbounds %class.Vector, ptr %1441, i64 0, i32 1
  %1447 = load double, ptr %1446, align 8, !tbaa !67
  %1448 = load double, ptr %1434, align 8, !tbaa !68
  %1449 = load double, ptr %1441, align 8, !tbaa !68
  %1450 = sext i32 %1426 to i64
  %1451 = sext i32 %1425 to i64
  %1452 = insertelement <2 x double> poison, double %1436, i64 0
  %1453 = insertelement <2 x double> %1452, double %1443, i64 1
  %1454 = insertelement <2 x double> poison, double %1445, i64 0
  %1455 = insertelement <2 x double> %1454, double %1447, i64 1
  %1456 = insertelement <2 x double> poison, double %1448, i64 0
  %1457 = insertelement <2 x double> %1456, double %1449, i64 1
  %1458 = insertelement <2 x double> poison, double %1045, i64 0
  %1459 = shufflevector <2 x double> %1458, <2 x double> poison, <2 x i32> zeroinitializer
  %1460 = shufflevector <2 x double> %1042, <2 x double> poison, <2 x i32> <i32 1, i32 1>
  %1461 = shufflevector <2 x double> %1042, <2 x double> poison, <2 x i32> zeroinitializer
  br label %1462

1462:                                             ; preds = %1428, %1462
  %1463 = phi i64 [ %1450, %1428 ], [ %1508, %1462 ]
  %1464 = phi i32 [ %1418, %1428 ], [ %1510, %1462 ]
  %1465 = phi i32 [ 0, %1428 ], [ %1507, %1462 ]
  %1466 = phi i16 [ %1439, %1428 ], [ %1473, %1462 ]
  %1467 = phi i16 [ %1432, %1428 ], [ %1477, %1462 ]
  %1468 = phi <2 x double> [ %1453, %1428 ], [ %1512, %1462 ]
  %1469 = phi <2 x double> [ %1455, %1428 ], [ %1514, %1462 ]
  %1470 = phi <2 x double> [ %1457, %1428 ], [ %1516, %1462 ]
  %1471 = fsub <2 x double> %1459, %1468
  %1472 = getelementptr inbounds i16, ptr %1417, i64 %1463
  %1473 = load i16, ptr %1472, align 2, !tbaa !44
  %1474 = add nsw i32 %1464, 3
  %1475 = sext i32 %1474 to i64
  %1476 = getelementptr inbounds i16, ptr %1417, i64 %1475
  %1477 = load i16, ptr %1476, align 2, !tbaa !44
  %1478 = zext i16 %1473 to i64
  %1479 = getelementptr inbounds %struct.CompAtom, ptr %107, i64 %1478
  %1480 = load double, ptr %1479, align 8, !tbaa !68
  %1481 = zext i16 %1477 to i64
  %1482 = getelementptr inbounds %struct.CompAtom, ptr %107, i64 %1481
  %1483 = load double, ptr %1482, align 8, !tbaa !68
  %1484 = getelementptr inbounds %class.Vector, ptr %1479, i64 0, i32 1
  %1485 = load double, ptr %1484, align 8, !tbaa !67
  %1486 = getelementptr inbounds %class.Vector, ptr %1482, i64 0, i32 1
  %1487 = load double, ptr %1486, align 8, !tbaa !67
  %1488 = getelementptr inbounds %class.Vector, ptr %1479, i64 0, i32 2
  %1489 = load double, ptr %1488, align 8, !tbaa !49
  %1490 = getelementptr inbounds %class.Vector, ptr %1482, i64 0, i32 2
  %1491 = load double, ptr %1490, align 8, !tbaa !49
  %1492 = fsub <2 x double> %1461, %1470
  %1493 = fmul <2 x double> %1492, %1492
  %1494 = fsub <2 x double> %1460, %1469
  %1495 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %1494, <2 x double> %1494, <2 x double> %1493)
  %1496 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %1471, <2 x double> %1471, <2 x double> %1495)
  %1497 = fcmp olt <2 x double> %1496, %1003
  %1498 = zext i32 %1465 to i64
  %1499 = getelementptr inbounds i16, ptr %349, i64 %1498
  store i16 %1466, ptr %1499, align 2, !tbaa !44
  %1500 = extractelement <2 x i1> %1497, i64 1
  %1501 = zext i1 %1500 to i32
  %1502 = add nuw nsw i32 %1465, %1501
  %1503 = zext i32 %1502 to i64
  %1504 = getelementptr inbounds i16, ptr %349, i64 %1503
  store i16 %1467, ptr %1504, align 2, !tbaa !44
  %1505 = extractelement <2 x i1> %1497, i64 0
  %1506 = zext i1 %1505 to i32
  %1507 = add i32 %1502, %1506
  %1508 = add nsw i64 %1463, 2
  %1509 = icmp slt i64 %1508, %1451
  %1510 = trunc i64 %1463 to i32
  %1511 = insertelement <2 x double> poison, double %1491, i64 0
  %1512 = insertelement <2 x double> %1511, double %1489, i64 1
  %1513 = insertelement <2 x double> poison, double %1487, i64 0
  %1514 = insertelement <2 x double> %1513, double %1485, i64 1
  %1515 = insertelement <2 x double> poison, double %1483, i64 0
  %1516 = insertelement <2 x double> %1515, double %1480, i64 1
  br i1 %1509, label %1462, label %1517

1517:                                             ; preds = %1462, %1424, %1421
  %1518 = phi i32 [ 0, %1421 ], [ 0, %1424 ], [ %1507, %1462 ]
  %1519 = phi i32 [ %1418, %1421 ], [ %1418, %1424 ], [ %1510, %1462 ]
  %1520 = icmp slt i32 %1519, %1419
  br i1 %1520, label %1521, label %1526

1521:                                             ; preds = %1517
  %1522 = sext i32 %1519 to i64
  %1523 = sext i32 %1419 to i64
  %1524 = extractelement <2 x double> %1042, i64 0
  %1525 = extractelement <2 x double> %1042, i64 1
  br label %1531

1526:                                             ; preds = %1554, %1517
  %1527 = phi i32 [ %1518, %1517 ], [ %1555, %1554 ]
  %1528 = icmp sgt i32 %1527, 0
  br i1 %1528, label %1529, label %1580

1529:                                             ; preds = %1526
  %1530 = zext i32 %1527 to i64
  br label %1558

1531:                                             ; preds = %1521, %1554
  %1532 = phi i64 [ %1522, %1521 ], [ %1556, %1554 ]
  %1533 = phi i32 [ %1518, %1521 ], [ %1555, %1554 ]
  %1534 = getelementptr inbounds i16, ptr %1417, i64 %1532
  %1535 = load i16, ptr %1534, align 2, !tbaa !44
  %1536 = zext i16 %1535 to i64
  %1537 = getelementptr inbounds %struct.CompAtom, ptr %107, i64 %1536
  %1538 = load double, ptr %1537, align 8, !tbaa !68
  %1539 = getelementptr inbounds %class.Vector, ptr %1537, i64 0, i32 1
  %1540 = load double, ptr %1539, align 8, !tbaa !67
  %1541 = getelementptr inbounds %class.Vector, ptr %1537, i64 0, i32 2
  %1542 = load double, ptr %1541, align 8, !tbaa !49
  %1543 = fsub double %1524, %1538
  %1544 = fmul double %1543, %1543
  %1545 = fsub double %1525, %1540
  %1546 = call double @llvm.fmuladd.f64(double %1545, double %1545, double %1544)
  %1547 = fsub double %1045, %1542
  %1548 = call double @llvm.fmuladd.f64(double %1547, double %1547, double %1546)
  %1549 = fcmp ugt double %1548, %27
  br i1 %1549, label %1554, label %1550

1550:                                             ; preds = %1531
  %1551 = add nsw i32 %1533, 1
  %1552 = sext i32 %1533 to i64
  %1553 = getelementptr inbounds i16, ptr %349, i64 %1552
  store i16 %1535, ptr %1553, align 2, !tbaa !44
  br label %1554

1554:                                             ; preds = %1550, %1531
  %1555 = phi i32 [ %1551, %1550 ], [ %1533, %1531 ]
  %1556 = add nsw i64 %1532, 1
  %1557 = icmp eq i64 %1556, %1523
  br i1 %1557, label %1526, label %1531

1558:                                             ; preds = %1529, %1575
  %1559 = phi i64 [ 0, %1529 ], [ %1578, %1575 ]
  %1560 = phi ptr [ %1416, %1529 ], [ %1577, %1575 ]
  %1561 = getelementptr inbounds i16, ptr %349, i64 %1559
  %1562 = load i16, ptr %1561, align 2, !tbaa !44
  %1563 = zext i16 %1562 to i64
  %1564 = getelementptr inbounds %struct.CompAtom, ptr %107, i64 %1563, i32 4
  %1565 = load i8, ptr %1564, align 1
  %1566 = and i8 %1565, 7
  store i16 %1562, ptr %1560, align 2, !tbaa !44
  %1567 = getelementptr inbounds i16, ptr %1560, i64 1
  %1568 = insertelement <2 x i16> poison, i16 %1562, i64 0
  %1569 = shufflevector <2 x i16> %1568, <2 x i16> poison, <2 x i32> zeroinitializer
  %1570 = add <2 x i16> %1569, <i16 1, i16 2>
  store <2 x i16> %1570, ptr %1567, align 2, !tbaa !44
  %1571 = icmp ult i8 %1566, 4
  br i1 %1571, label %1575, label %1572

1572:                                             ; preds = %1558
  %1573 = add <2 x i16> %1569, <i16 3, i16 4>
  %1574 = getelementptr inbounds i16, ptr %1560, i64 3
  store <2 x i16> %1573, ptr %1574, align 2, !tbaa !44
  br label %1575

1575:                                             ; preds = %1572, %1558
  %1576 = zext i8 %1566 to i64
  %1577 = getelementptr inbounds i16, ptr %1560, i64 %1576
  %1578 = add nuw nsw i64 %1559, 1
  %1579 = icmp eq i64 %1578, %1530
  br i1 %1579, label %1580, label %1558

1580:                                             ; preds = %1575, %1526, %1413
  %1581 = phi ptr [ %1416, %1413 ], [ %1416, %1526 ], [ %1577, %1575 ]
  %1582 = ptrtoint ptr %1581 to i64
  %1583 = sub i64 %1582, %982
  %1584 = lshr exact i64 %1583, 1
  %1585 = trunc i64 %1584 to i32
  %1586 = icmp eq i32 %1585, 0
  br i1 %1586, label %1598, label %1587

1587:                                             ; preds = %1580
  %1588 = shl i64 %1583, 31
  %1589 = add i64 %1588, -4294967296
  %1590 = ashr i64 %1589, 32
  %1591 = getelementptr inbounds i16, ptr %487, i64 %1590
  %1592 = load i16, ptr %1591, align 2, !tbaa !44
  %1593 = ashr i64 %1588, 32
  %1594 = getelementptr inbounds i16, ptr %487, i64 %1593
  store i16 %1592, ptr %1594, align 2, !tbaa !44
  br label %1598

1595:                                             ; preds = %1294
  %1596 = add nsw i32 %1020, 1
  %1597 = load i32, ptr @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4, !tbaa !5
  br label %1598

1598:                                             ; preds = %1580, %1587, %1595
  %1599 = phi i32 [ %1597, %1595 ], [ %1303, %1587 ], [ %1303, %1580 ]
  %1600 = phi i32 [ %1596, %1595 ], [ 0, %1587 ], [ 0, %1580 ]
  %1601 = phi i32 [ %1019, %1595 ], [ %1585, %1587 ], [ 0, %1580 ]
  %1602 = phi i32 [ %1018, %1595 ], [ %1344, %1587 ], [ %1344, %1580 ]
  %1603 = phi i32 [ %1017, %1595 ], [ %1345, %1587 ], [ %1345, %1580 ]
  %1604 = icmp eq i32 %1599, 0
  br i1 %1604, label %1609, label %1605

1605:                                             ; preds = %1598
  %1606 = load i32, ptr %1026, align 4
  %1607 = and i32 %1606, 1073741824
  %1608 = icmp ne i32 %1607, 0
  br label %1609

1609:                                             ; preds = %1605, %1598
  %1610 = phi i1 [ false, %1598 ], [ %1608, %1605 ]
  %1611 = load i32, ptr %17, align 8, !tbaa !17
  %1612 = add nsw i32 %983, %1611
  %1613 = load i32, ptr %984, align 4, !tbaa !69
  %1614 = icmp sgt i32 %1613, %1612
  br i1 %1614, label %1630, label %1615

1615:                                             ; preds = %1609, %1615
  %1616 = phi i32 [ %1618, %1615 ], [ %1613, %1609 ]
  %1617 = ashr i32 %1616, 1
  %1618 = add nsw i32 %1617, %1616
  %1619 = icmp sgt i32 %1618, %1612
  br i1 %1619, label %1620, label %1615

1620:                                             ; preds = %1615
  %1621 = sext i32 %1618 to i64
  %1622 = icmp slt i32 %1618, 0
  %1623 = shl nsw i64 %1621, 1
  %1624 = select i1 %1622, i64 -1, i64 %1623
  %1625 = call noalias noundef nonnull ptr @_Znam(i64 noundef %1624) #12
  %1626 = load ptr, ptr %12, align 8, !tbaa !46
  %1627 = sext i32 %1611 to i64
  %1628 = shl nsw i64 %1627, 1
  call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 2 %1625, ptr align 2 %1626, i64 %1628, i1 false)
  %1629 = icmp eq ptr %1626, null
  br i1 %1629, label %1634, label %1632

1630:                                             ; preds = %1609
  %1631 = load ptr, ptr %12, align 8, !tbaa !46
  br label %1636

1632:                                             ; preds = %1620
  call void @_ZdaPv(ptr noundef nonnull %1626) #13
  %1633 = load i32, ptr %17, align 8, !tbaa !17
  br label %1634

1634:                                             ; preds = %1632, %1620
  %1635 = phi i32 [ %1633, %1632 ], [ %1611, %1620 ]
  store ptr %1625, ptr %12, align 8, !tbaa !46
  store i32 %1618, ptr %984, align 4, !tbaa !69
  br label %1636

1636:                                             ; preds = %1630, %1634
  %1637 = phi i32 [ %1611, %1630 ], [ %1635, %1634 ]
  %1638 = phi ptr [ %1631, %1630 ], [ %1625, %1634 ]
  %1639 = ptrtoint ptr %1638 to i64
  %1640 = add nsw i32 %1637, 1
  %1641 = sext i32 %1640 to i64
  %1642 = getelementptr inbounds i16, ptr %1638, i64 %1641
  %1643 = icmp slt i32 %1600, %1601
  br i1 %1610, label %1644, label %1692

1644:                                             ; preds = %1636
  br i1 %1643, label %1645, label %1863

1645:                                             ; preds = %1644
  %1646 = sext i32 %1600 to i64
  %1647 = sext i32 %1601 to i64
  %1648 = extractelement <2 x double> %1042, i64 0
  %1649 = extractelement <2 x double> %1042, i64 1
  br label %1650

1650:                                             ; preds = %1645, %1687
  %1651 = phi i64 [ %1646, %1645 ], [ %1690, %1687 ]
  %1652 = phi ptr [ %533, %1645 ], [ %1689, %1687 ]
  %1653 = phi ptr [ %1642, %1645 ], [ %1688, %1687 ]
  %1654 = getelementptr inbounds i16, ptr %487, i64 %1651
  %1655 = load i16, ptr %1654, align 2, !tbaa !44
  %1656 = zext i16 %1655 to i64
  %1657 = getelementptr inbounds %struct.CompAtomExt, ptr %111, i64 %1656
  %1658 = load i32, ptr %1657, align 4
  %1659 = and i32 %1658, 1073741824
  %1660 = icmp eq i32 %1659, 0
  br i1 %1660, label %1661, label %1687

1661:                                             ; preds = %1650
  %1662 = getelementptr inbounds %struct.CompAtom, ptr %107, i64 %1656
  %1663 = getelementptr inbounds %class.Vector, ptr %1662, i64 0, i32 2
  %1664 = load double, ptr %1663, align 8, !tbaa !49
  %1665 = fsub double %1045, %1664
  %1666 = getelementptr inbounds %class.Vector, ptr %1662, i64 0, i32 1
  %1667 = load double, ptr %1666, align 8, !tbaa !67
  %1668 = fsub double %1649, %1667
  %1669 = load double, ptr %1662, align 8, !tbaa !68
  %1670 = fsub double %1648, %1669
  %1671 = fmul double %1670, %1670
  %1672 = call double @llvm.fmuladd.f64(double %1668, double %1668, double %1671)
  %1673 = call double @llvm.fmuladd.f64(double %1665, double %1665, double %1672)
  %1674 = fcmp ugt double %1673, %24
  br i1 %1674, label %1687, label %1675

1675:                                             ; preds = %1661
  %1676 = shl i32 %1658, 2
  %1677 = ashr exact i32 %1676, 2
  %1678 = icmp slt i32 %1677, %1058
  %1679 = icmp sgt i32 %1677, %1060
  %1680 = select i1 %1678, i1 true, i1 %1679
  %1681 = select i1 %1680, ptr %1653, ptr %1652
  %1682 = zext i1 %1680 to i64
  %1683 = getelementptr inbounds i16, ptr %1653, i64 %1682
  %1684 = xor i1 %1680, true
  %1685 = zext i1 %1684 to i64
  %1686 = getelementptr inbounds i16, ptr %1652, i64 %1685
  store i16 %1655, ptr %1681, align 2, !tbaa !44
  br label %1687

1687:                                             ; preds = %1675, %1661, %1650
  %1688 = phi ptr [ %1653, %1650 ], [ %1653, %1661 ], [ %1683, %1675 ]
  %1689 = phi ptr [ %1652, %1650 ], [ %1652, %1661 ], [ %1686, %1675 ]
  %1690 = add nsw i64 %1651, 1
  %1691 = icmp eq i64 %1690, %1647
  br i1 %1691, label %1863, label %1650

1692:                                             ; preds = %1636
  br i1 %1643, label %1693, label %1863

1693:                                             ; preds = %1692
  %1694 = sub nsw i32 %1601, %1600
  %1695 = icmp sgt i32 %1694, 6
  br i1 %1695, label %1696, label %1814

1696:                                             ; preds = %1693
  %1697 = add nsw i32 %1601, -2
  %1698 = add nsw i32 %1600, 2
  %1699 = icmp slt i32 %1698, %1697
  br i1 %1699, label %1700, label %1814

1700:                                             ; preds = %1696
  %1701 = sext i32 %1600 to i64
  %1702 = getelementptr inbounds i16, ptr %487, i64 %1701
  %1703 = load i16, ptr %1702, align 2, !tbaa !44
  %1704 = zext i16 %1703 to i64
  %1705 = getelementptr inbounds %struct.CompAtomExt, ptr %111, i64 %1704
  %1706 = load i32, ptr %1705, align 4
  %1707 = add nsw i32 %1600, 1
  %1708 = sext i32 %1707 to i64
  %1709 = getelementptr inbounds i16, ptr %487, i64 %1708
  %1710 = load i16, ptr %1709, align 2, !tbaa !44
  %1711 = zext i16 %1710 to i64
  %1712 = getelementptr inbounds %struct.CompAtom, ptr %107, i64 %1711
  %1713 = getelementptr inbounds %class.Vector, ptr %1712, i64 0, i32 2
  %1714 = load double, ptr %1713, align 8, !tbaa !49
  %1715 = getelementptr inbounds %struct.CompAtom, ptr %107, i64 %1704
  %1716 = getelementptr inbounds %class.Vector, ptr %1715, i64 0, i32 2
  %1717 = load double, ptr %1716, align 8, !tbaa !49
  %1718 = getelementptr inbounds %class.Vector, ptr %1712, i64 0, i32 1
  %1719 = load double, ptr %1718, align 8, !tbaa !67
  %1720 = getelementptr inbounds %class.Vector, ptr %1715, i64 0, i32 1
  %1721 = load double, ptr %1720, align 8, !tbaa !67
  %1722 = load double, ptr %1712, align 8, !tbaa !68
  %1723 = load double, ptr %1715, align 8, !tbaa !68
  %1724 = sext i32 %1698 to i64
  %1725 = sext i32 %1697 to i64
  %1726 = extractelement <2 x double> %1042, i64 0
  %1727 = extractelement <2 x double> %1042, i64 1
  br label %1728

1728:                                             ; preds = %1700, %1808
  %1729 = phi i64 [ %1724, %1700 ], [ %1811, %1808 ]
  %1730 = phi i64 [ %1711, %1700 ], [ %1768, %1808 ]
  %1731 = phi i32 [ %1706, %1700 ], [ %1796, %1808 ]
  %1732 = phi ptr [ %533, %1700 ], [ %1810, %1808 ]
  %1733 = phi ptr [ %1642, %1700 ], [ %1809, %1808 ]
  %1734 = phi i32 [ %1600, %1700 ], [ %1813, %1808 ]
  %1735 = phi i16 [ %1703, %1700 ], [ %1760, %1808 ]
  %1736 = phi i16 [ %1710, %1700 ], [ %1764, %1808 ]
  %1737 = phi double [ %1723, %1700 ], [ %1767, %1808 ]
  %1738 = phi double [ %1722, %1700 ], [ %1770, %1808 ]
  %1739 = phi double [ %1721, %1700 ], [ %1772, %1808 ]
  %1740 = phi double [ %1719, %1700 ], [ %1774, %1808 ]
  %1741 = phi double [ %1717, %1700 ], [ %1776, %1808 ]
  %1742 = phi double [ %1714, %1700 ], [ %1778, %1808 ]
  %1743 = getelementptr inbounds %struct.CompAtomExt, ptr %111, i64 %1730
  %1744 = load i32, ptr %1743, align 4
  %1745 = shl i32 %1744, 2
  %1746 = ashr exact i32 %1745, 2
  %1747 = fsub double %1726, %1737
  %1748 = fsub double %1726, %1738
  %1749 = fmul double %1747, %1747
  %1750 = fmul double %1748, %1748
  %1751 = fsub double %1727, %1739
  %1752 = fsub double %1727, %1740
  %1753 = call double @llvm.fmuladd.f64(double %1751, double %1751, double %1749)
  %1754 = call double @llvm.fmuladd.f64(double %1752, double %1752, double %1750)
  %1755 = fsub double %1045, %1741
  %1756 = fsub double %1045, %1742
  %1757 = call double @llvm.fmuladd.f64(double %1755, double %1755, double %1753)
  %1758 = call double @llvm.fmuladd.f64(double %1756, double %1756, double %1754)
  %1759 = getelementptr inbounds i16, ptr %487, i64 %1729
  %1760 = load i16, ptr %1759, align 2, !tbaa !44
  %1761 = add nsw i32 %1734, 3
  %1762 = sext i32 %1761 to i64
  %1763 = getelementptr inbounds i16, ptr %487, i64 %1762
  %1764 = load i16, ptr %1763, align 2, !tbaa !44
  %1765 = zext i16 %1760 to i64
  %1766 = getelementptr inbounds %struct.CompAtom, ptr %107, i64 %1765
  %1767 = load double, ptr %1766, align 8, !tbaa !68
  %1768 = zext i16 %1764 to i64
  %1769 = getelementptr inbounds %struct.CompAtom, ptr %107, i64 %1768
  %1770 = load double, ptr %1769, align 8, !tbaa !68
  %1771 = getelementptr inbounds %class.Vector, ptr %1766, i64 0, i32 1
  %1772 = load double, ptr %1771, align 8, !tbaa !67
  %1773 = getelementptr inbounds %class.Vector, ptr %1769, i64 0, i32 1
  %1774 = load double, ptr %1773, align 8, !tbaa !67
  %1775 = getelementptr inbounds %class.Vector, ptr %1766, i64 0, i32 2
  %1776 = load double, ptr %1775, align 8, !tbaa !49
  %1777 = getelementptr inbounds %class.Vector, ptr %1769, i64 0, i32 2
  %1778 = load double, ptr %1777, align 8, !tbaa !49
  %1779 = fcmp ugt double %1757, %24
  br i1 %1779, label %1792, label %1780

1780:                                             ; preds = %1728
  %1781 = shl i32 %1731, 2
  %1782 = ashr exact i32 %1781, 2
  %1783 = icmp slt i32 %1782, %1058
  %1784 = icmp sgt i32 %1782, %1060
  %1785 = select i1 %1783, i1 true, i1 %1784
  %1786 = select i1 %1785, ptr %1733, ptr %1732
  %1787 = zext i1 %1785 to i64
  %1788 = getelementptr inbounds i16, ptr %1733, i64 %1787
  %1789 = xor i1 %1785, true
  %1790 = zext i1 %1789 to i64
  %1791 = getelementptr inbounds i16, ptr %1732, i64 %1790
  store i16 %1735, ptr %1786, align 2, !tbaa !44
  br label %1792

1792:                                             ; preds = %1780, %1728
  %1793 = phi ptr [ %1733, %1728 ], [ %1788, %1780 ]
  %1794 = phi ptr [ %1732, %1728 ], [ %1791, %1780 ]
  %1795 = getelementptr inbounds %struct.CompAtomExt, ptr %111, i64 %1765
  %1796 = load i32, ptr %1795, align 4
  %1797 = fcmp ugt double %1758, %24
  br i1 %1797, label %1808, label %1798

1798:                                             ; preds = %1792
  %1799 = icmp slt i32 %1746, %1058
  %1800 = icmp sgt i32 %1746, %1060
  %1801 = select i1 %1799, i1 true, i1 %1800
  %1802 = select i1 %1801, ptr %1793, ptr %1794
  %1803 = zext i1 %1801 to i64
  %1804 = getelementptr inbounds i16, ptr %1793, i64 %1803
  %1805 = xor i1 %1801, true
  %1806 = zext i1 %1805 to i64
  %1807 = getelementptr inbounds i16, ptr %1794, i64 %1806
  store i16 %1736, ptr %1802, align 2, !tbaa !44
  br label %1808

1808:                                             ; preds = %1798, %1792
  %1809 = phi ptr [ %1793, %1792 ], [ %1804, %1798 ]
  %1810 = phi ptr [ %1794, %1792 ], [ %1807, %1798 ]
  %1811 = add nsw i64 %1729, 2
  %1812 = icmp slt i64 %1811, %1725
  %1813 = trunc i64 %1729 to i32
  br i1 %1812, label %1728, label %1814

1814:                                             ; preds = %1808, %1696, %1693
  %1815 = phi i32 [ %1600, %1693 ], [ %1600, %1696 ], [ %1813, %1808 ]
  %1816 = phi ptr [ %1642, %1693 ], [ %1642, %1696 ], [ %1809, %1808 ]
  %1817 = phi ptr [ %533, %1693 ], [ %533, %1696 ], [ %1810, %1808 ]
  %1818 = icmp slt i32 %1815, %1601
  br i1 %1818, label %1819, label %1863

1819:                                             ; preds = %1814
  %1820 = sext i32 %1815 to i64
  %1821 = sext i32 %1601 to i64
  %1822 = extractelement <2 x double> %1042, i64 0
  %1823 = extractelement <2 x double> %1042, i64 1
  br label %1824

1824:                                             ; preds = %1819, %1858
  %1825 = phi i64 [ %1820, %1819 ], [ %1861, %1858 ]
  %1826 = phi ptr [ %1817, %1819 ], [ %1860, %1858 ]
  %1827 = phi ptr [ %1816, %1819 ], [ %1859, %1858 ]
  %1828 = getelementptr inbounds i16, ptr %487, i64 %1825
  %1829 = load i16, ptr %1828, align 2, !tbaa !44
  %1830 = zext i16 %1829 to i64
  %1831 = getelementptr inbounds %struct.CompAtom, ptr %107, i64 %1830
  %1832 = load double, ptr %1831, align 8, !tbaa !68
  %1833 = getelementptr inbounds %class.Vector, ptr %1831, i64 0, i32 1
  %1834 = load double, ptr %1833, align 8, !tbaa !67
  %1835 = getelementptr inbounds %class.Vector, ptr %1831, i64 0, i32 2
  %1836 = load double, ptr %1835, align 8, !tbaa !49
  %1837 = fsub double %1822, %1832
  %1838 = fmul double %1837, %1837
  %1839 = fsub double %1823, %1834
  %1840 = call double @llvm.fmuladd.f64(double %1839, double %1839, double %1838)
  %1841 = fsub double %1045, %1836
  %1842 = call double @llvm.fmuladd.f64(double %1841, double %1841, double %1840)
  %1843 = fcmp ugt double %1842, %24
  br i1 %1843, label %1858, label %1844

1844:                                             ; preds = %1824
  %1845 = getelementptr inbounds %struct.CompAtomExt, ptr %111, i64 %1830
  %1846 = load i32, ptr %1845, align 4
  %1847 = shl i32 %1846, 2
  %1848 = ashr exact i32 %1847, 2
  %1849 = icmp slt i32 %1848, %1058
  %1850 = icmp sgt i32 %1848, %1060
  %1851 = select i1 %1849, i1 true, i1 %1850
  %1852 = select i1 %1851, ptr %1827, ptr %1826
  %1853 = zext i1 %1851 to i64
  %1854 = getelementptr inbounds i16, ptr %1827, i64 %1853
  %1855 = xor i1 %1851, true
  %1856 = zext i1 %1855 to i64
  %1857 = getelementptr inbounds i16, ptr %1826, i64 %1856
  store i16 %1829, ptr %1852, align 2, !tbaa !44
  br label %1858

1858:                                             ; preds = %1844, %1824
  %1859 = phi ptr [ %1827, %1824 ], [ %1854, %1844 ]
  %1860 = phi ptr [ %1826, %1824 ], [ %1857, %1844 ]
  %1861 = add nsw i64 %1825, 1
  %1862 = icmp eq i64 %1861, %1821
  br i1 %1862, label %1863, label %1824

1863:                                             ; preds = %1858, %1687, %1814, %1644, %1692
  %1864 = phi ptr [ %1642, %1692 ], [ %1642, %1644 ], [ %1816, %1814 ], [ %1688, %1687 ], [ %1859, %1858 ]
  %1865 = phi ptr [ %533, %1692 ], [ %533, %1644 ], [ %1817, %1814 ], [ %1689, %1687 ], [ %1860, %1858 ]
  %1866 = ptrtoint ptr %1864 to i64
  %1867 = ptrtoint ptr %1642 to i64
  %1868 = sub i64 %1866, %1867
  %1869 = lshr exact i64 %1868, 1
  %1870 = trunc i64 %1869 to i32
  %1871 = icmp sgt i32 %1870, 0
  br i1 %1871, label %1872, label %1972

1872:                                             ; preds = %1863
  %1873 = and i64 %1869, 4294967295
  %1874 = and i64 %1869, 1
  %1875 = icmp eq i64 %1873, 1
  br i1 %1875, label %1940, label %1876

1876:                                             ; preds = %1872
  %1877 = sub nsw i64 %1873, %1874
  br label %1878

1878:                                             ; preds = %1933, %1876
  %1879 = phi i64 [ 0, %1876 ], [ %1937, %1933 ]
  %1880 = phi ptr [ %1642, %1876 ], [ %1936, %1933 ]
  %1881 = phi ptr [ %579, %1876 ], [ %1935, %1933 ]
  %1882 = phi ptr [ %717, %1876 ], [ %1934, %1933 ]
  %1883 = phi i64 [ 0, %1876 ], [ %1938, %1933 ]
  %1884 = getelementptr inbounds i16, ptr %1642, i64 %1879
  %1885 = load i16, ptr %1884, align 2, !tbaa !44
  %1886 = zext i16 %1885 to i64
  %1887 = getelementptr inbounds %struct.CompAtom, ptr %107, i64 %1886, i32 3
  %1888 = load i8, ptr %1887, align 2, !tbaa !51
  %1889 = zext i8 %1888 to i32
  %1890 = mul nuw nsw i32 %1889, 3
  %1891 = add nuw nsw i32 %1890, %1048
  %1892 = zext i32 %1891 to i64
  %1893 = getelementptr inbounds [9 x i32], ptr %2, i64 0, i64 %1892
  %1894 = load i32, ptr %1893, align 4, !tbaa !5
  switch i32 %1894, label %1906 [
    i32 0, label %1895
    i32 1, label %1897
    i32 2, label %1899
  ]

1895:                                             ; preds = %1878
  %1896 = getelementptr inbounds i16, ptr %1880, i64 1
  br label %1901

1897:                                             ; preds = %1878
  %1898 = getelementptr inbounds i16, ptr %1881, i64 1
  br label %1901

1899:                                             ; preds = %1878
  %1900 = getelementptr inbounds i16, ptr %1882, i64 1
  br label %1901

1901:                                             ; preds = %1895, %1897, %1899
  %1902 = phi ptr [ %1882, %1899 ], [ %1881, %1897 ], [ %1880, %1895 ]
  %1903 = phi ptr [ %1900, %1899 ], [ %1882, %1897 ], [ %1882, %1895 ]
  %1904 = phi ptr [ %1881, %1899 ], [ %1898, %1897 ], [ %1881, %1895 ]
  %1905 = phi ptr [ %1880, %1899 ], [ %1880, %1897 ], [ %1896, %1895 ]
  store i16 %1885, ptr %1902, align 2, !tbaa !44
  br label %1906

1906:                                             ; preds = %1901, %1878
  %1907 = phi ptr [ %1882, %1878 ], [ %1903, %1901 ]
  %1908 = phi ptr [ %1881, %1878 ], [ %1904, %1901 ]
  %1909 = phi ptr [ %1880, %1878 ], [ %1905, %1901 ]
  %1910 = or i64 %1879, 1
  %1911 = getelementptr inbounds i16, ptr %1642, i64 %1910
  %1912 = load i16, ptr %1911, align 2, !tbaa !44
  %1913 = zext i16 %1912 to i64
  %1914 = getelementptr inbounds %struct.CompAtom, ptr %107, i64 %1913, i32 3
  %1915 = load i8, ptr %1914, align 2, !tbaa !51
  %1916 = zext i8 %1915 to i32
  %1917 = mul nuw nsw i32 %1916, 3
  %1918 = add nuw nsw i32 %1917, %1048
  %1919 = zext i32 %1918 to i64
  %1920 = getelementptr inbounds [9 x i32], ptr %2, i64 0, i64 %1919
  %1921 = load i32, ptr %1920, align 4, !tbaa !5
  switch i32 %1921, label %1933 [
    i32 0, label %1926
    i32 1, label %1924
    i32 2, label %1922
  ]

1922:                                             ; preds = %1906
  %1923 = getelementptr inbounds i16, ptr %1907, i64 1
  br label %1928

1924:                                             ; preds = %1906
  %1925 = getelementptr inbounds i16, ptr %1908, i64 1
  br label %1928

1926:                                             ; preds = %1906
  %1927 = getelementptr inbounds i16, ptr %1909, i64 1
  br label %1928

1928:                                             ; preds = %1926, %1924, %1922
  %1929 = phi ptr [ %1907, %1922 ], [ %1908, %1924 ], [ %1909, %1926 ]
  %1930 = phi ptr [ %1923, %1922 ], [ %1907, %1924 ], [ %1907, %1926 ]
  %1931 = phi ptr [ %1908, %1922 ], [ %1925, %1924 ], [ %1908, %1926 ]
  %1932 = phi ptr [ %1909, %1922 ], [ %1909, %1924 ], [ %1927, %1926 ]
  store i16 %1912, ptr %1929, align 2, !tbaa !44
  br label %1933

1933:                                             ; preds = %1928, %1906
  %1934 = phi ptr [ %1907, %1906 ], [ %1930, %1928 ]
  %1935 = phi ptr [ %1908, %1906 ], [ %1931, %1928 ]
  %1936 = phi ptr [ %1909, %1906 ], [ %1932, %1928 ]
  %1937 = add nuw nsw i64 %1879, 2
  %1938 = add i64 %1883, 2
  %1939 = icmp eq i64 %1938, %1877
  br i1 %1939, label %1940, label %1878

1940:                                             ; preds = %1933, %1872
  %1941 = phi ptr [ undef, %1872 ], [ %1934, %1933 ]
  %1942 = phi ptr [ undef, %1872 ], [ %1935, %1933 ]
  %1943 = phi ptr [ undef, %1872 ], [ %1936, %1933 ]
  %1944 = phi i64 [ 0, %1872 ], [ %1937, %1933 ]
  %1945 = phi ptr [ %1642, %1872 ], [ %1936, %1933 ]
  %1946 = phi ptr [ %579, %1872 ], [ %1935, %1933 ]
  %1947 = phi ptr [ %717, %1872 ], [ %1934, %1933 ]
  %1948 = icmp eq i64 %1874, 0
  br i1 %1948, label %1972, label %1949

1949:                                             ; preds = %1940
  %1950 = getelementptr inbounds i16, ptr %1642, i64 %1944
  %1951 = load i16, ptr %1950, align 2, !tbaa !44
  %1952 = zext i16 %1951 to i64
  %1953 = getelementptr inbounds %struct.CompAtom, ptr %107, i64 %1952, i32 3
  %1954 = load i8, ptr %1953, align 2, !tbaa !51
  %1955 = zext i8 %1954 to i32
  %1956 = mul nuw nsw i32 %1955, 3
  %1957 = add nuw nsw i32 %1956, %1048
  %1958 = zext i32 %1957 to i64
  %1959 = getelementptr inbounds [9 x i32], ptr %2, i64 0, i64 %1958
  %1960 = load i32, ptr %1959, align 4, !tbaa !5
  switch i32 %1960, label %1972 [
    i32 0, label %1965
    i32 1, label %1963
    i32 2, label %1961
  ]

1961:                                             ; preds = %1949
  %1962 = getelementptr inbounds i16, ptr %1947, i64 1
  br label %1967

1963:                                             ; preds = %1949
  %1964 = getelementptr inbounds i16, ptr %1946, i64 1
  br label %1967

1965:                                             ; preds = %1949
  %1966 = getelementptr inbounds i16, ptr %1945, i64 1
  br label %1967

1967:                                             ; preds = %1965, %1963, %1961
  %1968 = phi ptr [ %1947, %1961 ], [ %1946, %1963 ], [ %1945, %1965 ]
  %1969 = phi ptr [ %1962, %1961 ], [ %1947, %1963 ], [ %1947, %1965 ]
  %1970 = phi ptr [ %1946, %1961 ], [ %1964, %1963 ], [ %1946, %1965 ]
  %1971 = phi ptr [ %1945, %1961 ], [ %1945, %1963 ], [ %1966, %1965 ]
  store i16 %1951, ptr %1968, align 2, !tbaa !44
  br label %1972

1972:                                             ; preds = %1940, %1967, %1949, %1863
  %1973 = phi ptr [ %717, %1863 ], [ %1941, %1940 ], [ %1947, %1949 ], [ %1969, %1967 ]
  %1974 = phi ptr [ %579, %1863 ], [ %1942, %1940 ], [ %1946, %1949 ], [ %1970, %1967 ]
  %1975 = phi ptr [ %1642, %1863 ], [ %1943, %1940 ], [ %1945, %1949 ], [ %1971, %1967 ]
  %1976 = ptrtoint ptr %1865 to i64
  %1977 = sub i64 %1976, %985
  %1978 = lshr exact i64 %1977, 1
  %1979 = trunc i64 %1978 to i32
  %1980 = icmp sgt i32 %1979, 0
  br i1 %1980, label %1981, label %2056

1981:                                             ; preds = %1972
  %1982 = and i64 %1978, 4294967295
  br label %1983

1983:                                             ; preds = %1981, %2044
  %1984 = phi i64 [ 0, %1981 ], [ %2054, %2044 ]
  %1985 = phi ptr [ %1975, %1981 ], [ %2053, %2044 ]
  %1986 = phi ptr [ %395, %1981 ], [ %2052, %2044 ]
  %1987 = phi ptr [ %441, %1981 ], [ %2051, %2044 ]
  %1988 = phi ptr [ %1974, %1981 ], [ %2050, %2044 ]
  %1989 = phi ptr [ %625, %1981 ], [ %2049, %2044 ]
  %1990 = phi ptr [ %671, %1981 ], [ %2048, %2044 ]
  %1991 = phi ptr [ %1973, %1981 ], [ %2047, %2044 ]
  %1992 = phi ptr [ %763, %1981 ], [ %2046, %2044 ]
  %1993 = phi ptr [ %809, %1981 ], [ %2045, %2044 ]
  %1994 = getelementptr inbounds i16, ptr %533, i64 %1984
  %1995 = load i16, ptr %1994, align 2, !tbaa !44
  %1996 = zext i16 %1995 to i64
  %1997 = getelementptr inbounds %struct.CompAtomExt, ptr %111, i64 %1996
  %1998 = load i32, ptr %1997, align 4
  %1999 = shl i32 %1998, 2
  %2000 = ashr exact i32 %1999, 2
  %2001 = sext i32 %2000 to i64
  %2002 = getelementptr inbounds i8, ptr %1295, i64 %2001
  %2003 = load i8, ptr %2002, align 1, !tbaa !58
  %2004 = sext i8 %2003 to i32
  %2005 = getelementptr inbounds %struct.CompAtom, ptr %107, i64 %1996, i32 3
  %2006 = load i8, ptr %2005, align 2, !tbaa !51
  %2007 = zext i8 %2006 to i32
  %2008 = mul nuw nsw i32 %2007, 3
  %2009 = add nuw nsw i32 %2008, %1048
  %2010 = zext i32 %2009 to i64
  %2011 = getelementptr inbounds [9 x i32], ptr %2, i64 0, i64 %2010
  %2012 = load i32, ptr %2011, align 4, !tbaa !5
  %2013 = mul nsw i32 %2012, 3
  %2014 = add nsw i32 %2013, %2004
  switch i32 %2014, label %2044 [
    i32 0, label %2015
    i32 1, label %2017
    i32 2, label %2019
    i32 3, label %2021
    i32 6, label %2023
    i32 5, label %2025
    i32 8, label %2027
    i32 4, label %2029
    i32 7, label %2031
  ]

2015:                                             ; preds = %1983
  %2016 = getelementptr inbounds i16, ptr %1985, i64 1
  br label %2033

2017:                                             ; preds = %1983
  %2018 = getelementptr inbounds i16, ptr %1986, i64 1
  br label %2033

2019:                                             ; preds = %1983
  %2020 = getelementptr inbounds i16, ptr %1987, i64 1
  br label %2033

2021:                                             ; preds = %1983
  %2022 = getelementptr inbounds i16, ptr %1988, i64 1
  br label %2033

2023:                                             ; preds = %1983
  %2024 = getelementptr inbounds i16, ptr %1991, i64 1
  br label %2033

2025:                                             ; preds = %1983
  %2026 = getelementptr inbounds i16, ptr %1990, i64 1
  br label %2033

2027:                                             ; preds = %1983
  %2028 = getelementptr inbounds i16, ptr %1993, i64 1
  br label %2033

2029:                                             ; preds = %1983
  %2030 = getelementptr inbounds i16, ptr %1989, i64 1
  br label %2033

2031:                                             ; preds = %1983
  %2032 = getelementptr inbounds i16, ptr %1992, i64 1
  br label %2033

2033:                                             ; preds = %2015, %2017, %2019, %2021, %2023, %2025, %2027, %2029, %2031
  %2034 = phi ptr [ %1992, %2031 ], [ %1989, %2029 ], [ %1993, %2027 ], [ %1990, %2025 ], [ %1991, %2023 ], [ %1988, %2021 ], [ %1987, %2019 ], [ %1986, %2017 ], [ %1985, %2015 ]
  %2035 = phi ptr [ %1993, %2031 ], [ %1993, %2029 ], [ %2028, %2027 ], [ %1993, %2025 ], [ %1993, %2023 ], [ %1993, %2021 ], [ %1993, %2019 ], [ %1993, %2017 ], [ %1993, %2015 ]
  %2036 = phi ptr [ %2032, %2031 ], [ %1992, %2029 ], [ %1992, %2027 ], [ %1992, %2025 ], [ %1992, %2023 ], [ %1992, %2021 ], [ %1992, %2019 ], [ %1992, %2017 ], [ %1992, %2015 ]
  %2037 = phi ptr [ %1991, %2031 ], [ %1991, %2029 ], [ %1991, %2027 ], [ %1991, %2025 ], [ %2024, %2023 ], [ %1991, %2021 ], [ %1991, %2019 ], [ %1991, %2017 ], [ %1991, %2015 ]
  %2038 = phi ptr [ %1990, %2031 ], [ %1990, %2029 ], [ %1990, %2027 ], [ %2026, %2025 ], [ %1990, %2023 ], [ %1990, %2021 ], [ %1990, %2019 ], [ %1990, %2017 ], [ %1990, %2015 ]
  %2039 = phi ptr [ %1989, %2031 ], [ %2030, %2029 ], [ %1989, %2027 ], [ %1989, %2025 ], [ %1989, %2023 ], [ %1989, %2021 ], [ %1989, %2019 ], [ %1989, %2017 ], [ %1989, %2015 ]
  %2040 = phi ptr [ %1988, %2031 ], [ %1988, %2029 ], [ %1988, %2027 ], [ %1988, %2025 ], [ %1988, %2023 ], [ %2022, %2021 ], [ %1988, %2019 ], [ %1988, %2017 ], [ %1988, %2015 ]
  %2041 = phi ptr [ %1987, %2031 ], [ %1987, %2029 ], [ %1987, %2027 ], [ %1987, %2025 ], [ %1987, %2023 ], [ %1987, %2021 ], [ %2020, %2019 ], [ %1987, %2017 ], [ %1987, %2015 ]
  %2042 = phi ptr [ %1986, %2031 ], [ %1986, %2029 ], [ %1986, %2027 ], [ %1986, %2025 ], [ %1986, %2023 ], [ %1986, %2021 ], [ %1986, %2019 ], [ %2018, %2017 ], [ %1986, %2015 ]
  %2043 = phi ptr [ %1985, %2031 ], [ %1985, %2029 ], [ %1985, %2027 ], [ %1985, %2025 ], [ %1985, %2023 ], [ %1985, %2021 ], [ %1985, %2019 ], [ %1985, %2017 ], [ %2016, %2015 ]
  store i16 %1995, ptr %2034, align 2, !tbaa !44
  br label %2044

2044:                                             ; preds = %2033, %1983
  %2045 = phi ptr [ %1993, %1983 ], [ %2035, %2033 ]
  %2046 = phi ptr [ %1992, %1983 ], [ %2036, %2033 ]
  %2047 = phi ptr [ %1991, %1983 ], [ %2037, %2033 ]
  %2048 = phi ptr [ %1990, %1983 ], [ %2038, %2033 ]
  %2049 = phi ptr [ %1989, %1983 ], [ %2039, %2033 ]
  %2050 = phi ptr [ %1988, %1983 ], [ %2040, %2033 ]
  %2051 = phi ptr [ %1987, %1983 ], [ %2041, %2033 ]
  %2052 = phi ptr [ %1986, %1983 ], [ %2042, %2033 ]
  %2053 = phi ptr [ %1985, %1983 ], [ %2043, %2033 ]
  %2054 = add nuw nsw i64 %1984, 1
  %2055 = icmp eq i64 %2054, %1982
  br i1 %2055, label %2056, label %1983

2056:                                             ; preds = %2044, %1972
  %2057 = phi ptr [ %809, %1972 ], [ %2045, %2044 ]
  %2058 = phi ptr [ %763, %1972 ], [ %2046, %2044 ]
  %2059 = phi ptr [ %1973, %1972 ], [ %2047, %2044 ]
  %2060 = phi ptr [ %671, %1972 ], [ %2048, %2044 ]
  %2061 = phi ptr [ %625, %1972 ], [ %2049, %2044 ]
  %2062 = phi ptr [ %1974, %1972 ], [ %2050, %2044 ]
  %2063 = phi ptr [ %441, %1972 ], [ %2051, %2044 ]
  %2064 = phi ptr [ %395, %1972 ], [ %2052, %2044 ]
  %2065 = phi ptr [ %1975, %1972 ], [ %2053, %2044 ]
  %2066 = ptrtoint ptr %2065 to i64
  %2067 = sub i64 %2066, %1867
  %2068 = lshr exact i64 %2067, 1
  %2069 = trunc i64 %2068 to i32
  %2070 = icmp eq i32 %2069, 0
  %2071 = shl i64 %2067, 31
  br i1 %2070, label %2077, label %2072

2072:                                             ; preds = %2056
  %2073 = add i64 %2071, -4294967296
  %2074 = ashr i64 %2073, 32
  %2075 = getelementptr inbounds i16, ptr %1642, i64 %2074
  %2076 = load i16, ptr %2075, align 2, !tbaa !44
  br label %2077

2077:                                             ; preds = %2056, %2072
  %2078 = phi i16 [ %2076, %2072 ], [ -1, %2056 ]
  %2079 = ashr i64 %2071, 32
  %2080 = getelementptr inbounds i16, ptr %1642, i64 %2079
  store i16 %2078, ptr %2080, align 2, !tbaa !44
  %2081 = trunc i64 %2068 to i16
  %2082 = add i16 %2081, 1
  %2083 = load i32, ptr %17, align 8, !tbaa !17
  %2084 = sext i32 %2083 to i64
  %2085 = getelementptr inbounds i16, ptr %1638, i64 %2084
  store i16 %2082, ptr %2085, align 2, !tbaa !44
  %2086 = add nsw i32 %2069, 2
  %2087 = add nsw i32 %2086, %2083
  store i32 %2087, ptr %17, align 8, !tbaa !17
  %2088 = ptrtoint ptr %2064 to i64
  %2089 = sub i64 %2088, %986
  %2090 = lshr exact i64 %2089, 1
  %2091 = trunc i64 %2090 to i32
  %2092 = add nsw i32 %2087, 1
  %2093 = sext i32 %2092 to i64
  %2094 = getelementptr i16, ptr %1638, i64 %2093
  %2095 = icmp sgt i32 %2091, 0
  br i1 %2095, label %2096, label %2186

2096:                                             ; preds = %2077
  %2097 = and i64 %2090, 4294967295
  %2098 = icmp ult i64 %2097, 8
  br i1 %2098, label %2142, label %2099

2099:                                             ; preds = %2096
  %2100 = shl nsw i64 %2093, 1
  %2101 = add i64 %2100, %1639
  %2102 = sub i64 %2101, %986
  %2103 = icmp ult i64 %2102, 128
  br i1 %2103, label %2142, label %2104

2104:                                             ; preds = %2099
  %2105 = icmp ult i64 %2097, 64
  br i1 %2105, label %2129, label %2106

2106:                                             ; preds = %2104
  %2107 = and i64 %2090, 63
  %2108 = sub nsw i64 %2097, %2107
  br label %2109

2109:                                             ; preds = %2109, %2106
  %2110 = phi i64 [ 0, %2106 ], [ %2123, %2109 ]
  %2111 = getelementptr inbounds i16, ptr %395, i64 %2110
  %2112 = load <16 x i16>, ptr %2111, align 2, !tbaa !44
  %2113 = getelementptr inbounds i16, ptr %2111, i64 16
  %2114 = load <16 x i16>, ptr %2113, align 2, !tbaa !44
  %2115 = getelementptr inbounds i16, ptr %2111, i64 32
  %2116 = load <16 x i16>, ptr %2115, align 2, !tbaa !44
  %2117 = getelementptr inbounds i16, ptr %2111, i64 48
  %2118 = load <16 x i16>, ptr %2117, align 2, !tbaa !44
  %2119 = getelementptr inbounds i16, ptr %2094, i64 %2110
  store <16 x i16> %2112, ptr %2119, align 2, !tbaa !44
  %2120 = getelementptr inbounds i16, ptr %2119, i64 16
  store <16 x i16> %2114, ptr %2120, align 2, !tbaa !44
  %2121 = getelementptr inbounds i16, ptr %2119, i64 32
  store <16 x i16> %2116, ptr %2121, align 2, !tbaa !44
  %2122 = getelementptr inbounds i16, ptr %2119, i64 48
  store <16 x i16> %2118, ptr %2122, align 2, !tbaa !44
  %2123 = add nuw i64 %2110, 64
  %2124 = icmp eq i64 %2123, %2108
  br i1 %2124, label %2125, label %2109, !llvm.loop !312

2125:                                             ; preds = %2109
  %2126 = icmp eq i64 %2107, 0
  br i1 %2126, label %2180, label %2127

2127:                                             ; preds = %2125
  %2128 = icmp ult i64 %2107, 8
  br i1 %2128, label %2142, label %2129

2129:                                             ; preds = %2104, %2127
  %2130 = phi i64 [ %2108, %2127 ], [ 0, %2104 ]
  %2131 = and i64 %2090, 7
  %2132 = sub nsw i64 %2097, %2131
  br label %2133

2133:                                             ; preds = %2133, %2129
  %2134 = phi i64 [ %2130, %2129 ], [ %2138, %2133 ]
  %2135 = getelementptr inbounds i16, ptr %395, i64 %2134
  %2136 = load <8 x i16>, ptr %2135, align 2, !tbaa !44
  %2137 = getelementptr inbounds i16, ptr %2094, i64 %2134
  store <8 x i16> %2136, ptr %2137, align 2, !tbaa !44
  %2138 = add nuw i64 %2134, 8
  %2139 = icmp eq i64 %2138, %2132
  br i1 %2139, label %2140, label %2133, !llvm.loop !313

2140:                                             ; preds = %2133
  %2141 = icmp eq i64 %2131, 0
  br i1 %2141, label %2180, label %2142

2142:                                             ; preds = %2099, %2096, %2127, %2140
  %2143 = phi i64 [ 0, %2096 ], [ 0, %2099 ], [ %2108, %2127 ], [ %2132, %2140 ]
  %2144 = sub i64 %2090, %2143
  %2145 = xor i64 %2143, -1
  %2146 = add nsw i64 %2097, %2145
  %2147 = and i64 %2144, 3
  %2148 = icmp eq i64 %2147, 0
  br i1 %2148, label %2158, label %2149

2149:                                             ; preds = %2142, %2149
  %2150 = phi i64 [ %2155, %2149 ], [ %2143, %2142 ]
  %2151 = phi i64 [ %2156, %2149 ], [ 0, %2142 ]
  %2152 = getelementptr inbounds i16, ptr %395, i64 %2150
  %2153 = load i16, ptr %2152, align 2, !tbaa !44
  %2154 = getelementptr inbounds i16, ptr %2094, i64 %2150
  store i16 %2153, ptr %2154, align 2, !tbaa !44
  %2155 = add nuw nsw i64 %2150, 1
  %2156 = add i64 %2151, 1
  %2157 = icmp eq i64 %2156, %2147
  br i1 %2157, label %2158, label %2149, !llvm.loop !314

2158:                                             ; preds = %2149, %2142
  %2159 = phi i64 [ %2143, %2142 ], [ %2155, %2149 ]
  %2160 = icmp ult i64 %2146, 3
  br i1 %2160, label %2180, label %2161

2161:                                             ; preds = %2158, %2161
  %2162 = phi i64 [ %2178, %2161 ], [ %2159, %2158 ]
  %2163 = getelementptr inbounds i16, ptr %395, i64 %2162
  %2164 = load i16, ptr %2163, align 2, !tbaa !44
  %2165 = getelementptr inbounds i16, ptr %2094, i64 %2162
  store i16 %2164, ptr %2165, align 2, !tbaa !44
  %2166 = add nuw nsw i64 %2162, 1
  %2167 = getelementptr inbounds i16, ptr %395, i64 %2166
  %2168 = load i16, ptr %2167, align 2, !tbaa !44
  %2169 = getelementptr inbounds i16, ptr %2094, i64 %2166
  store i16 %2168, ptr %2169, align 2, !tbaa !44
  %2170 = add nuw nsw i64 %2162, 2
  %2171 = getelementptr inbounds i16, ptr %395, i64 %2170
  %2172 = load i16, ptr %2171, align 2, !tbaa !44
  %2173 = getelementptr inbounds i16, ptr %2094, i64 %2170
  store i16 %2172, ptr %2173, align 2, !tbaa !44
  %2174 = add nuw nsw i64 %2162, 3
  %2175 = getelementptr inbounds i16, ptr %395, i64 %2174
  %2176 = load i16, ptr %2175, align 2, !tbaa !44
  %2177 = getelementptr inbounds i16, ptr %2094, i64 %2174
  store i16 %2176, ptr %2177, align 2, !tbaa !44
  %2178 = add nuw nsw i64 %2162, 4
  %2179 = icmp eq i64 %2178, %2097
  br i1 %2179, label %2180, label %2161, !llvm.loop !315

2180:                                             ; preds = %2158, %2161, %2125, %2140
  %2181 = shl i64 %2089, 31
  %2182 = add i64 %2181, -4294967296
  %2183 = ashr i64 %2182, 32
  %2184 = getelementptr inbounds i16, ptr %2094, i64 %2183
  %2185 = load i16, ptr %2184, align 2, !tbaa !44
  br label %2186

2186:                                             ; preds = %2077, %2180
  %2187 = phi i64 [ %2090, %2180 ], [ 0, %2077 ]
  %2188 = phi i16 [ %2185, %2180 ], [ -1, %2077 ]
  %2189 = and i64 %2187, 4294967295
  %2190 = getelementptr inbounds i16, ptr %2094, i64 %2189
  store i16 %2188, ptr %2190, align 2, !tbaa !44
  %2191 = trunc i64 %2090 to i16
  %2192 = add i16 %2191, 1
  %2193 = sext i32 %2087 to i64
  %2194 = getelementptr inbounds i16, ptr %1638, i64 %2193
  store i16 %2192, ptr %2194, align 2, !tbaa !44
  %2195 = add nsw i32 %2091, 2
  %2196 = add nsw i32 %2195, %2087
  %2197 = ptrtoint ptr %2063 to i64
  %2198 = sub i64 %2197, %987
  %2199 = lshr exact i64 %2198, 1
  %2200 = trunc i64 %2199 to i32
  %2201 = add nsw i32 %2196, 1
  %2202 = sext i32 %2201 to i64
  %2203 = getelementptr i16, ptr %1638, i64 %2202
  %2204 = icmp sgt i32 %2200, 0
  br i1 %2204, label %2205, label %2295

2205:                                             ; preds = %2186
  %2206 = and i64 %2199, 4294967295
  %2207 = icmp ult i64 %2206, 8
  br i1 %2207, label %2251, label %2208

2208:                                             ; preds = %2205
  %2209 = shl nsw i64 %2202, 1
  %2210 = add i64 %2209, %1639
  %2211 = sub i64 %2210, %987
  %2212 = icmp ult i64 %2211, 128
  br i1 %2212, label %2251, label %2213

2213:                                             ; preds = %2208
  %2214 = icmp ult i64 %2206, 64
  br i1 %2214, label %2238, label %2215

2215:                                             ; preds = %2213
  %2216 = and i64 %2199, 63
  %2217 = sub nsw i64 %2206, %2216
  br label %2218

2218:                                             ; preds = %2218, %2215
  %2219 = phi i64 [ 0, %2215 ], [ %2232, %2218 ]
  %2220 = getelementptr inbounds i16, ptr %441, i64 %2219
  %2221 = load <16 x i16>, ptr %2220, align 2, !tbaa !44
  %2222 = getelementptr inbounds i16, ptr %2220, i64 16
  %2223 = load <16 x i16>, ptr %2222, align 2, !tbaa !44
  %2224 = getelementptr inbounds i16, ptr %2220, i64 32
  %2225 = load <16 x i16>, ptr %2224, align 2, !tbaa !44
  %2226 = getelementptr inbounds i16, ptr %2220, i64 48
  %2227 = load <16 x i16>, ptr %2226, align 2, !tbaa !44
  %2228 = getelementptr inbounds i16, ptr %2203, i64 %2219
  store <16 x i16> %2221, ptr %2228, align 2, !tbaa !44
  %2229 = getelementptr inbounds i16, ptr %2228, i64 16
  store <16 x i16> %2223, ptr %2229, align 2, !tbaa !44
  %2230 = getelementptr inbounds i16, ptr %2228, i64 32
  store <16 x i16> %2225, ptr %2230, align 2, !tbaa !44
  %2231 = getelementptr inbounds i16, ptr %2228, i64 48
  store <16 x i16> %2227, ptr %2231, align 2, !tbaa !44
  %2232 = add nuw i64 %2219, 64
  %2233 = icmp eq i64 %2232, %2217
  br i1 %2233, label %2234, label %2218, !llvm.loop !316

2234:                                             ; preds = %2218
  %2235 = icmp eq i64 %2216, 0
  br i1 %2235, label %2289, label %2236

2236:                                             ; preds = %2234
  %2237 = icmp ult i64 %2216, 8
  br i1 %2237, label %2251, label %2238

2238:                                             ; preds = %2213, %2236
  %2239 = phi i64 [ %2217, %2236 ], [ 0, %2213 ]
  %2240 = and i64 %2199, 7
  %2241 = sub nsw i64 %2206, %2240
  br label %2242

2242:                                             ; preds = %2242, %2238
  %2243 = phi i64 [ %2239, %2238 ], [ %2247, %2242 ]
  %2244 = getelementptr inbounds i16, ptr %441, i64 %2243
  %2245 = load <8 x i16>, ptr %2244, align 2, !tbaa !44
  %2246 = getelementptr inbounds i16, ptr %2203, i64 %2243
  store <8 x i16> %2245, ptr %2246, align 2, !tbaa !44
  %2247 = add nuw i64 %2243, 8
  %2248 = icmp eq i64 %2247, %2241
  br i1 %2248, label %2249, label %2242, !llvm.loop !317

2249:                                             ; preds = %2242
  %2250 = icmp eq i64 %2240, 0
  br i1 %2250, label %2289, label %2251

2251:                                             ; preds = %2208, %2205, %2236, %2249
  %2252 = phi i64 [ 0, %2205 ], [ 0, %2208 ], [ %2217, %2236 ], [ %2241, %2249 ]
  %2253 = sub i64 %2199, %2252
  %2254 = xor i64 %2252, -1
  %2255 = add nsw i64 %2206, %2254
  %2256 = and i64 %2253, 3
  %2257 = icmp eq i64 %2256, 0
  br i1 %2257, label %2267, label %2258

2258:                                             ; preds = %2251, %2258
  %2259 = phi i64 [ %2264, %2258 ], [ %2252, %2251 ]
  %2260 = phi i64 [ %2265, %2258 ], [ 0, %2251 ]
  %2261 = getelementptr inbounds i16, ptr %441, i64 %2259
  %2262 = load i16, ptr %2261, align 2, !tbaa !44
  %2263 = getelementptr inbounds i16, ptr %2203, i64 %2259
  store i16 %2262, ptr %2263, align 2, !tbaa !44
  %2264 = add nuw nsw i64 %2259, 1
  %2265 = add i64 %2260, 1
  %2266 = icmp eq i64 %2265, %2256
  br i1 %2266, label %2267, label %2258, !llvm.loop !318

2267:                                             ; preds = %2258, %2251
  %2268 = phi i64 [ %2252, %2251 ], [ %2264, %2258 ]
  %2269 = icmp ult i64 %2255, 3
  br i1 %2269, label %2289, label %2270

2270:                                             ; preds = %2267, %2270
  %2271 = phi i64 [ %2287, %2270 ], [ %2268, %2267 ]
  %2272 = getelementptr inbounds i16, ptr %441, i64 %2271
  %2273 = load i16, ptr %2272, align 2, !tbaa !44
  %2274 = getelementptr inbounds i16, ptr %2203, i64 %2271
  store i16 %2273, ptr %2274, align 2, !tbaa !44
  %2275 = add nuw nsw i64 %2271, 1
  %2276 = getelementptr inbounds i16, ptr %441, i64 %2275
  %2277 = load i16, ptr %2276, align 2, !tbaa !44
  %2278 = getelementptr inbounds i16, ptr %2203, i64 %2275
  store i16 %2277, ptr %2278, align 2, !tbaa !44
  %2279 = add nuw nsw i64 %2271, 2
  %2280 = getelementptr inbounds i16, ptr %441, i64 %2279
  %2281 = load i16, ptr %2280, align 2, !tbaa !44
  %2282 = getelementptr inbounds i16, ptr %2203, i64 %2279
  store i16 %2281, ptr %2282, align 2, !tbaa !44
  %2283 = add nuw nsw i64 %2271, 3
  %2284 = getelementptr inbounds i16, ptr %441, i64 %2283
  %2285 = load i16, ptr %2284, align 2, !tbaa !44
  %2286 = getelementptr inbounds i16, ptr %2203, i64 %2283
  store i16 %2285, ptr %2286, align 2, !tbaa !44
  %2287 = add nuw nsw i64 %2271, 4
  %2288 = icmp eq i64 %2287, %2206
  br i1 %2288, label %2289, label %2270, !llvm.loop !319

2289:                                             ; preds = %2267, %2270, %2234, %2249
  %2290 = shl i64 %2198, 31
  %2291 = add i64 %2290, -4294967296
  %2292 = ashr i64 %2291, 32
  %2293 = getelementptr inbounds i16, ptr %2203, i64 %2292
  %2294 = load i16, ptr %2293, align 2, !tbaa !44
  br label %2295

2295:                                             ; preds = %2186, %2289
  %2296 = phi i64 [ %2199, %2289 ], [ 0, %2186 ]
  %2297 = phi i16 [ %2294, %2289 ], [ -1, %2186 ]
  %2298 = and i64 %2296, 4294967295
  %2299 = getelementptr inbounds i16, ptr %2203, i64 %2298
  store i16 %2297, ptr %2299, align 2, !tbaa !44
  %2300 = trunc i64 %2199 to i16
  %2301 = add i16 %2300, 1
  %2302 = sext i32 %2196 to i64
  %2303 = getelementptr inbounds i16, ptr %1638, i64 %2302
  store i16 %2301, ptr %2303, align 2, !tbaa !44
  %2304 = add nsw i32 %2200, 2
  %2305 = add nsw i32 %2304, %2196
  %2306 = ptrtoint ptr %2062 to i64
  %2307 = sub i64 %2306, %988
  %2308 = lshr exact i64 %2307, 1
  %2309 = trunc i64 %2308 to i32
  %2310 = add nsw i32 %2305, 1
  %2311 = sext i32 %2310 to i64
  %2312 = getelementptr i16, ptr %1638, i64 %2311
  %2313 = icmp sgt i32 %2309, 0
  br i1 %2313, label %2314, label %2404

2314:                                             ; preds = %2295
  %2315 = and i64 %2308, 4294967295
  %2316 = icmp ult i64 %2315, 8
  br i1 %2316, label %2360, label %2317

2317:                                             ; preds = %2314
  %2318 = shl nsw i64 %2311, 1
  %2319 = add i64 %2318, %1639
  %2320 = sub i64 %2319, %988
  %2321 = icmp ult i64 %2320, 128
  br i1 %2321, label %2360, label %2322

2322:                                             ; preds = %2317
  %2323 = icmp ult i64 %2315, 64
  br i1 %2323, label %2347, label %2324

2324:                                             ; preds = %2322
  %2325 = and i64 %2308, 63
  %2326 = sub nsw i64 %2315, %2325
  br label %2327

2327:                                             ; preds = %2327, %2324
  %2328 = phi i64 [ 0, %2324 ], [ %2341, %2327 ]
  %2329 = getelementptr inbounds i16, ptr %579, i64 %2328
  %2330 = load <16 x i16>, ptr %2329, align 2, !tbaa !44
  %2331 = getelementptr inbounds i16, ptr %2329, i64 16
  %2332 = load <16 x i16>, ptr %2331, align 2, !tbaa !44
  %2333 = getelementptr inbounds i16, ptr %2329, i64 32
  %2334 = load <16 x i16>, ptr %2333, align 2, !tbaa !44
  %2335 = getelementptr inbounds i16, ptr %2329, i64 48
  %2336 = load <16 x i16>, ptr %2335, align 2, !tbaa !44
  %2337 = getelementptr inbounds i16, ptr %2312, i64 %2328
  store <16 x i16> %2330, ptr %2337, align 2, !tbaa !44
  %2338 = getelementptr inbounds i16, ptr %2337, i64 16
  store <16 x i16> %2332, ptr %2338, align 2, !tbaa !44
  %2339 = getelementptr inbounds i16, ptr %2337, i64 32
  store <16 x i16> %2334, ptr %2339, align 2, !tbaa !44
  %2340 = getelementptr inbounds i16, ptr %2337, i64 48
  store <16 x i16> %2336, ptr %2340, align 2, !tbaa !44
  %2341 = add nuw i64 %2328, 64
  %2342 = icmp eq i64 %2341, %2326
  br i1 %2342, label %2343, label %2327, !llvm.loop !320

2343:                                             ; preds = %2327
  %2344 = icmp eq i64 %2325, 0
  br i1 %2344, label %2398, label %2345

2345:                                             ; preds = %2343
  %2346 = icmp ult i64 %2325, 8
  br i1 %2346, label %2360, label %2347

2347:                                             ; preds = %2322, %2345
  %2348 = phi i64 [ %2326, %2345 ], [ 0, %2322 ]
  %2349 = and i64 %2308, 7
  %2350 = sub nsw i64 %2315, %2349
  br label %2351

2351:                                             ; preds = %2351, %2347
  %2352 = phi i64 [ %2348, %2347 ], [ %2356, %2351 ]
  %2353 = getelementptr inbounds i16, ptr %579, i64 %2352
  %2354 = load <8 x i16>, ptr %2353, align 2, !tbaa !44
  %2355 = getelementptr inbounds i16, ptr %2312, i64 %2352
  store <8 x i16> %2354, ptr %2355, align 2, !tbaa !44
  %2356 = add nuw i64 %2352, 8
  %2357 = icmp eq i64 %2356, %2350
  br i1 %2357, label %2358, label %2351, !llvm.loop !321

2358:                                             ; preds = %2351
  %2359 = icmp eq i64 %2349, 0
  br i1 %2359, label %2398, label %2360

2360:                                             ; preds = %2317, %2314, %2345, %2358
  %2361 = phi i64 [ 0, %2314 ], [ 0, %2317 ], [ %2326, %2345 ], [ %2350, %2358 ]
  %2362 = sub i64 %2308, %2361
  %2363 = xor i64 %2361, -1
  %2364 = add nsw i64 %2315, %2363
  %2365 = and i64 %2362, 3
  %2366 = icmp eq i64 %2365, 0
  br i1 %2366, label %2376, label %2367

2367:                                             ; preds = %2360, %2367
  %2368 = phi i64 [ %2373, %2367 ], [ %2361, %2360 ]
  %2369 = phi i64 [ %2374, %2367 ], [ 0, %2360 ]
  %2370 = getelementptr inbounds i16, ptr %579, i64 %2368
  %2371 = load i16, ptr %2370, align 2, !tbaa !44
  %2372 = getelementptr inbounds i16, ptr %2312, i64 %2368
  store i16 %2371, ptr %2372, align 2, !tbaa !44
  %2373 = add nuw nsw i64 %2368, 1
  %2374 = add i64 %2369, 1
  %2375 = icmp eq i64 %2374, %2365
  br i1 %2375, label %2376, label %2367, !llvm.loop !322

2376:                                             ; preds = %2367, %2360
  %2377 = phi i64 [ %2361, %2360 ], [ %2373, %2367 ]
  %2378 = icmp ult i64 %2364, 3
  br i1 %2378, label %2398, label %2379

2379:                                             ; preds = %2376, %2379
  %2380 = phi i64 [ %2396, %2379 ], [ %2377, %2376 ]
  %2381 = getelementptr inbounds i16, ptr %579, i64 %2380
  %2382 = load i16, ptr %2381, align 2, !tbaa !44
  %2383 = getelementptr inbounds i16, ptr %2312, i64 %2380
  store i16 %2382, ptr %2383, align 2, !tbaa !44
  %2384 = add nuw nsw i64 %2380, 1
  %2385 = getelementptr inbounds i16, ptr %579, i64 %2384
  %2386 = load i16, ptr %2385, align 2, !tbaa !44
  %2387 = getelementptr inbounds i16, ptr %2312, i64 %2384
  store i16 %2386, ptr %2387, align 2, !tbaa !44
  %2388 = add nuw nsw i64 %2380, 2
  %2389 = getelementptr inbounds i16, ptr %579, i64 %2388
  %2390 = load i16, ptr %2389, align 2, !tbaa !44
  %2391 = getelementptr inbounds i16, ptr %2312, i64 %2388
  store i16 %2390, ptr %2391, align 2, !tbaa !44
  %2392 = add nuw nsw i64 %2380, 3
  %2393 = getelementptr inbounds i16, ptr %579, i64 %2392
  %2394 = load i16, ptr %2393, align 2, !tbaa !44
  %2395 = getelementptr inbounds i16, ptr %2312, i64 %2392
  store i16 %2394, ptr %2395, align 2, !tbaa !44
  %2396 = add nuw nsw i64 %2380, 4
  %2397 = icmp eq i64 %2396, %2315
  br i1 %2397, label %2398, label %2379, !llvm.loop !323

2398:                                             ; preds = %2376, %2379, %2343, %2358
  %2399 = shl i64 %2307, 31
  %2400 = add i64 %2399, -4294967296
  %2401 = ashr i64 %2400, 32
  %2402 = getelementptr inbounds i16, ptr %2312, i64 %2401
  %2403 = load i16, ptr %2402, align 2, !tbaa !44
  br label %2404

2404:                                             ; preds = %2295, %2398
  %2405 = phi i64 [ %2308, %2398 ], [ 0, %2295 ]
  %2406 = phi i16 [ %2403, %2398 ], [ -1, %2295 ]
  %2407 = and i64 %2405, 4294967295
  %2408 = getelementptr inbounds i16, ptr %2312, i64 %2407
  store i16 %2406, ptr %2408, align 2, !tbaa !44
  %2409 = trunc i64 %2308 to i16
  %2410 = add i16 %2409, 1
  %2411 = sext i32 %2305 to i64
  %2412 = getelementptr inbounds i16, ptr %1638, i64 %2411
  store i16 %2410, ptr %2412, align 2, !tbaa !44
  %2413 = add nsw i32 %2309, 2
  %2414 = add nsw i32 %2413, %2305
  %2415 = ptrtoint ptr %2061 to i64
  %2416 = sub i64 %2415, %989
  %2417 = lshr exact i64 %2416, 1
  %2418 = trunc i64 %2417 to i32
  %2419 = add nsw i32 %2414, 1
  %2420 = sext i32 %2419 to i64
  %2421 = getelementptr i16, ptr %1638, i64 %2420
  %2422 = icmp sgt i32 %2418, 0
  br i1 %2422, label %2423, label %2513

2423:                                             ; preds = %2404
  %2424 = and i64 %2417, 4294967295
  %2425 = icmp ult i64 %2424, 8
  br i1 %2425, label %2469, label %2426

2426:                                             ; preds = %2423
  %2427 = shl nsw i64 %2420, 1
  %2428 = add i64 %2427, %1639
  %2429 = sub i64 %2428, %989
  %2430 = icmp ult i64 %2429, 128
  br i1 %2430, label %2469, label %2431

2431:                                             ; preds = %2426
  %2432 = icmp ult i64 %2424, 64
  br i1 %2432, label %2456, label %2433

2433:                                             ; preds = %2431
  %2434 = and i64 %2417, 63
  %2435 = sub nsw i64 %2424, %2434
  br label %2436

2436:                                             ; preds = %2436, %2433
  %2437 = phi i64 [ 0, %2433 ], [ %2450, %2436 ]
  %2438 = getelementptr inbounds i16, ptr %625, i64 %2437
  %2439 = load <16 x i16>, ptr %2438, align 2, !tbaa !44
  %2440 = getelementptr inbounds i16, ptr %2438, i64 16
  %2441 = load <16 x i16>, ptr %2440, align 2, !tbaa !44
  %2442 = getelementptr inbounds i16, ptr %2438, i64 32
  %2443 = load <16 x i16>, ptr %2442, align 2, !tbaa !44
  %2444 = getelementptr inbounds i16, ptr %2438, i64 48
  %2445 = load <16 x i16>, ptr %2444, align 2, !tbaa !44
  %2446 = getelementptr inbounds i16, ptr %2421, i64 %2437
  store <16 x i16> %2439, ptr %2446, align 2, !tbaa !44
  %2447 = getelementptr inbounds i16, ptr %2446, i64 16
  store <16 x i16> %2441, ptr %2447, align 2, !tbaa !44
  %2448 = getelementptr inbounds i16, ptr %2446, i64 32
  store <16 x i16> %2443, ptr %2448, align 2, !tbaa !44
  %2449 = getelementptr inbounds i16, ptr %2446, i64 48
  store <16 x i16> %2445, ptr %2449, align 2, !tbaa !44
  %2450 = add nuw i64 %2437, 64
  %2451 = icmp eq i64 %2450, %2435
  br i1 %2451, label %2452, label %2436, !llvm.loop !324

2452:                                             ; preds = %2436
  %2453 = icmp eq i64 %2434, 0
  br i1 %2453, label %2507, label %2454

2454:                                             ; preds = %2452
  %2455 = icmp ult i64 %2434, 8
  br i1 %2455, label %2469, label %2456

2456:                                             ; preds = %2431, %2454
  %2457 = phi i64 [ %2435, %2454 ], [ 0, %2431 ]
  %2458 = and i64 %2417, 7
  %2459 = sub nsw i64 %2424, %2458
  br label %2460

2460:                                             ; preds = %2460, %2456
  %2461 = phi i64 [ %2457, %2456 ], [ %2465, %2460 ]
  %2462 = getelementptr inbounds i16, ptr %625, i64 %2461
  %2463 = load <8 x i16>, ptr %2462, align 2, !tbaa !44
  %2464 = getelementptr inbounds i16, ptr %2421, i64 %2461
  store <8 x i16> %2463, ptr %2464, align 2, !tbaa !44
  %2465 = add nuw i64 %2461, 8
  %2466 = icmp eq i64 %2465, %2459
  br i1 %2466, label %2467, label %2460, !llvm.loop !325

2467:                                             ; preds = %2460
  %2468 = icmp eq i64 %2458, 0
  br i1 %2468, label %2507, label %2469

2469:                                             ; preds = %2426, %2423, %2454, %2467
  %2470 = phi i64 [ 0, %2423 ], [ 0, %2426 ], [ %2435, %2454 ], [ %2459, %2467 ]
  %2471 = sub i64 %2417, %2470
  %2472 = xor i64 %2470, -1
  %2473 = add nsw i64 %2424, %2472
  %2474 = and i64 %2471, 3
  %2475 = icmp eq i64 %2474, 0
  br i1 %2475, label %2485, label %2476

2476:                                             ; preds = %2469, %2476
  %2477 = phi i64 [ %2482, %2476 ], [ %2470, %2469 ]
  %2478 = phi i64 [ %2483, %2476 ], [ 0, %2469 ]
  %2479 = getelementptr inbounds i16, ptr %625, i64 %2477
  %2480 = load i16, ptr %2479, align 2, !tbaa !44
  %2481 = getelementptr inbounds i16, ptr %2421, i64 %2477
  store i16 %2480, ptr %2481, align 2, !tbaa !44
  %2482 = add nuw nsw i64 %2477, 1
  %2483 = add i64 %2478, 1
  %2484 = icmp eq i64 %2483, %2474
  br i1 %2484, label %2485, label %2476, !llvm.loop !326

2485:                                             ; preds = %2476, %2469
  %2486 = phi i64 [ %2470, %2469 ], [ %2482, %2476 ]
  %2487 = icmp ult i64 %2473, 3
  br i1 %2487, label %2507, label %2488

2488:                                             ; preds = %2485, %2488
  %2489 = phi i64 [ %2505, %2488 ], [ %2486, %2485 ]
  %2490 = getelementptr inbounds i16, ptr %625, i64 %2489
  %2491 = load i16, ptr %2490, align 2, !tbaa !44
  %2492 = getelementptr inbounds i16, ptr %2421, i64 %2489
  store i16 %2491, ptr %2492, align 2, !tbaa !44
  %2493 = add nuw nsw i64 %2489, 1
  %2494 = getelementptr inbounds i16, ptr %625, i64 %2493
  %2495 = load i16, ptr %2494, align 2, !tbaa !44
  %2496 = getelementptr inbounds i16, ptr %2421, i64 %2493
  store i16 %2495, ptr %2496, align 2, !tbaa !44
  %2497 = add nuw nsw i64 %2489, 2
  %2498 = getelementptr inbounds i16, ptr %625, i64 %2497
  %2499 = load i16, ptr %2498, align 2, !tbaa !44
  %2500 = getelementptr inbounds i16, ptr %2421, i64 %2497
  store i16 %2499, ptr %2500, align 2, !tbaa !44
  %2501 = add nuw nsw i64 %2489, 3
  %2502 = getelementptr inbounds i16, ptr %625, i64 %2501
  %2503 = load i16, ptr %2502, align 2, !tbaa !44
  %2504 = getelementptr inbounds i16, ptr %2421, i64 %2501
  store i16 %2503, ptr %2504, align 2, !tbaa !44
  %2505 = add nuw nsw i64 %2489, 4
  %2506 = icmp eq i64 %2505, %2424
  br i1 %2506, label %2507, label %2488, !llvm.loop !327

2507:                                             ; preds = %2485, %2488, %2452, %2467
  %2508 = shl i64 %2416, 31
  %2509 = add i64 %2508, -4294967296
  %2510 = ashr i64 %2509, 32
  %2511 = getelementptr inbounds i16, ptr %2421, i64 %2510
  %2512 = load i16, ptr %2511, align 2, !tbaa !44
  br label %2513

2513:                                             ; preds = %2404, %2507
  %2514 = phi i64 [ %2417, %2507 ], [ 0, %2404 ]
  %2515 = phi i16 [ %2512, %2507 ], [ -1, %2404 ]
  %2516 = and i64 %2514, 4294967295
  %2517 = getelementptr inbounds i16, ptr %2421, i64 %2516
  store i16 %2515, ptr %2517, align 2, !tbaa !44
  %2518 = trunc i64 %2417 to i16
  %2519 = add i16 %2518, 1
  %2520 = sext i32 %2414 to i64
  %2521 = getelementptr inbounds i16, ptr %1638, i64 %2520
  store i16 %2519, ptr %2521, align 2, !tbaa !44
  %2522 = add nsw i32 %2418, 2
  %2523 = add nsw i32 %2522, %2414
  store i32 %2523, ptr %17, align 8, !tbaa !17
  %2524 = ptrtoint ptr %2060 to i64
  %2525 = sub i64 %2524, %990
  %2526 = lshr exact i64 %2525, 1
  %2527 = trunc i64 %2526 to i32
  %2528 = add nsw i32 %2523, 1
  %2529 = sext i32 %2528 to i64
  %2530 = getelementptr i16, ptr %1638, i64 %2529
  %2531 = icmp sgt i32 %2527, 0
  br i1 %2531, label %2532, label %2622

2532:                                             ; preds = %2513
  %2533 = and i64 %2526, 4294967295
  %2534 = icmp ult i64 %2533, 8
  br i1 %2534, label %2578, label %2535

2535:                                             ; preds = %2532
  %2536 = shl nsw i64 %2529, 1
  %2537 = add i64 %2536, %1639
  %2538 = sub i64 %2537, %990
  %2539 = icmp ult i64 %2538, 128
  br i1 %2539, label %2578, label %2540

2540:                                             ; preds = %2535
  %2541 = icmp ult i64 %2533, 64
  br i1 %2541, label %2565, label %2542

2542:                                             ; preds = %2540
  %2543 = and i64 %2526, 63
  %2544 = sub nsw i64 %2533, %2543
  br label %2545

2545:                                             ; preds = %2545, %2542
  %2546 = phi i64 [ 0, %2542 ], [ %2559, %2545 ]
  %2547 = getelementptr inbounds i16, ptr %671, i64 %2546
  %2548 = load <16 x i16>, ptr %2547, align 2, !tbaa !44
  %2549 = getelementptr inbounds i16, ptr %2547, i64 16
  %2550 = load <16 x i16>, ptr %2549, align 2, !tbaa !44
  %2551 = getelementptr inbounds i16, ptr %2547, i64 32
  %2552 = load <16 x i16>, ptr %2551, align 2, !tbaa !44
  %2553 = getelementptr inbounds i16, ptr %2547, i64 48
  %2554 = load <16 x i16>, ptr %2553, align 2, !tbaa !44
  %2555 = getelementptr inbounds i16, ptr %2530, i64 %2546
  store <16 x i16> %2548, ptr %2555, align 2, !tbaa !44
  %2556 = getelementptr inbounds i16, ptr %2555, i64 16
  store <16 x i16> %2550, ptr %2556, align 2, !tbaa !44
  %2557 = getelementptr inbounds i16, ptr %2555, i64 32
  store <16 x i16> %2552, ptr %2557, align 2, !tbaa !44
  %2558 = getelementptr inbounds i16, ptr %2555, i64 48
  store <16 x i16> %2554, ptr %2558, align 2, !tbaa !44
  %2559 = add nuw i64 %2546, 64
  %2560 = icmp eq i64 %2559, %2544
  br i1 %2560, label %2561, label %2545, !llvm.loop !328

2561:                                             ; preds = %2545
  %2562 = icmp eq i64 %2543, 0
  br i1 %2562, label %2616, label %2563

2563:                                             ; preds = %2561
  %2564 = icmp ult i64 %2543, 8
  br i1 %2564, label %2578, label %2565

2565:                                             ; preds = %2540, %2563
  %2566 = phi i64 [ %2544, %2563 ], [ 0, %2540 ]
  %2567 = and i64 %2526, 7
  %2568 = sub nsw i64 %2533, %2567
  br label %2569

2569:                                             ; preds = %2569, %2565
  %2570 = phi i64 [ %2566, %2565 ], [ %2574, %2569 ]
  %2571 = getelementptr inbounds i16, ptr %671, i64 %2570
  %2572 = load <8 x i16>, ptr %2571, align 2, !tbaa !44
  %2573 = getelementptr inbounds i16, ptr %2530, i64 %2570
  store <8 x i16> %2572, ptr %2573, align 2, !tbaa !44
  %2574 = add nuw i64 %2570, 8
  %2575 = icmp eq i64 %2574, %2568
  br i1 %2575, label %2576, label %2569, !llvm.loop !329

2576:                                             ; preds = %2569
  %2577 = icmp eq i64 %2567, 0
  br i1 %2577, label %2616, label %2578

2578:                                             ; preds = %2535, %2532, %2563, %2576
  %2579 = phi i64 [ 0, %2532 ], [ 0, %2535 ], [ %2544, %2563 ], [ %2568, %2576 ]
  %2580 = sub i64 %2526, %2579
  %2581 = xor i64 %2579, -1
  %2582 = add nsw i64 %2533, %2581
  %2583 = and i64 %2580, 3
  %2584 = icmp eq i64 %2583, 0
  br i1 %2584, label %2594, label %2585

2585:                                             ; preds = %2578, %2585
  %2586 = phi i64 [ %2591, %2585 ], [ %2579, %2578 ]
  %2587 = phi i64 [ %2592, %2585 ], [ 0, %2578 ]
  %2588 = getelementptr inbounds i16, ptr %671, i64 %2586
  %2589 = load i16, ptr %2588, align 2, !tbaa !44
  %2590 = getelementptr inbounds i16, ptr %2530, i64 %2586
  store i16 %2589, ptr %2590, align 2, !tbaa !44
  %2591 = add nuw nsw i64 %2586, 1
  %2592 = add i64 %2587, 1
  %2593 = icmp eq i64 %2592, %2583
  br i1 %2593, label %2594, label %2585, !llvm.loop !330

2594:                                             ; preds = %2585, %2578
  %2595 = phi i64 [ %2579, %2578 ], [ %2591, %2585 ]
  %2596 = icmp ult i64 %2582, 3
  br i1 %2596, label %2616, label %2597

2597:                                             ; preds = %2594, %2597
  %2598 = phi i64 [ %2614, %2597 ], [ %2595, %2594 ]
  %2599 = getelementptr inbounds i16, ptr %671, i64 %2598
  %2600 = load i16, ptr %2599, align 2, !tbaa !44
  %2601 = getelementptr inbounds i16, ptr %2530, i64 %2598
  store i16 %2600, ptr %2601, align 2, !tbaa !44
  %2602 = add nuw nsw i64 %2598, 1
  %2603 = getelementptr inbounds i16, ptr %671, i64 %2602
  %2604 = load i16, ptr %2603, align 2, !tbaa !44
  %2605 = getelementptr inbounds i16, ptr %2530, i64 %2602
  store i16 %2604, ptr %2605, align 2, !tbaa !44
  %2606 = add nuw nsw i64 %2598, 2
  %2607 = getelementptr inbounds i16, ptr %671, i64 %2606
  %2608 = load i16, ptr %2607, align 2, !tbaa !44
  %2609 = getelementptr inbounds i16, ptr %2530, i64 %2606
  store i16 %2608, ptr %2609, align 2, !tbaa !44
  %2610 = add nuw nsw i64 %2598, 3
  %2611 = getelementptr inbounds i16, ptr %671, i64 %2610
  %2612 = load i16, ptr %2611, align 2, !tbaa !44
  %2613 = getelementptr inbounds i16, ptr %2530, i64 %2610
  store i16 %2612, ptr %2613, align 2, !tbaa !44
  %2614 = add nuw nsw i64 %2598, 4
  %2615 = icmp eq i64 %2614, %2533
  br i1 %2615, label %2616, label %2597, !llvm.loop !331

2616:                                             ; preds = %2594, %2597, %2561, %2576
  %2617 = shl i64 %2525, 31
  %2618 = add i64 %2617, -4294967296
  %2619 = ashr i64 %2618, 32
  %2620 = getelementptr inbounds i16, ptr %2530, i64 %2619
  %2621 = load i16, ptr %2620, align 2, !tbaa !44
  br label %2622

2622:                                             ; preds = %2513, %2616
  %2623 = phi i64 [ %2526, %2616 ], [ 0, %2513 ]
  %2624 = phi i16 [ %2621, %2616 ], [ -1, %2513 ]
  %2625 = and i64 %2623, 4294967295
  %2626 = getelementptr inbounds i16, ptr %2530, i64 %2625
  store i16 %2624, ptr %2626, align 2, !tbaa !44
  %2627 = trunc i64 %2526 to i16
  %2628 = add i16 %2627, 1
  %2629 = sext i32 %2523 to i64
  %2630 = getelementptr inbounds i16, ptr %1638, i64 %2629
  store i16 %2628, ptr %2630, align 2, !tbaa !44
  %2631 = add nsw i32 %2527, 2
  %2632 = add nsw i32 %2631, %2523
  %2633 = ptrtoint ptr %2059 to i64
  %2634 = sub i64 %2633, %991
  %2635 = lshr exact i64 %2634, 1
  %2636 = trunc i64 %2635 to i32
  %2637 = add nsw i32 %2632, 1
  %2638 = sext i32 %2637 to i64
  %2639 = getelementptr i16, ptr %1638, i64 %2638
  %2640 = icmp sgt i32 %2636, 0
  br i1 %2640, label %2641, label %2731

2641:                                             ; preds = %2622
  %2642 = and i64 %2635, 4294967295
  %2643 = icmp ult i64 %2642, 8
  br i1 %2643, label %2687, label %2644

2644:                                             ; preds = %2641
  %2645 = shl nsw i64 %2638, 1
  %2646 = add i64 %2645, %1639
  %2647 = sub i64 %2646, %991
  %2648 = icmp ult i64 %2647, 128
  br i1 %2648, label %2687, label %2649

2649:                                             ; preds = %2644
  %2650 = icmp ult i64 %2642, 64
  br i1 %2650, label %2674, label %2651

2651:                                             ; preds = %2649
  %2652 = and i64 %2635, 63
  %2653 = sub nsw i64 %2642, %2652
  br label %2654

2654:                                             ; preds = %2654, %2651
  %2655 = phi i64 [ 0, %2651 ], [ %2668, %2654 ]
  %2656 = getelementptr inbounds i16, ptr %717, i64 %2655
  %2657 = load <16 x i16>, ptr %2656, align 2, !tbaa !44
  %2658 = getelementptr inbounds i16, ptr %2656, i64 16
  %2659 = load <16 x i16>, ptr %2658, align 2, !tbaa !44
  %2660 = getelementptr inbounds i16, ptr %2656, i64 32
  %2661 = load <16 x i16>, ptr %2660, align 2, !tbaa !44
  %2662 = getelementptr inbounds i16, ptr %2656, i64 48
  %2663 = load <16 x i16>, ptr %2662, align 2, !tbaa !44
  %2664 = getelementptr inbounds i16, ptr %2639, i64 %2655
  store <16 x i16> %2657, ptr %2664, align 2, !tbaa !44
  %2665 = getelementptr inbounds i16, ptr %2664, i64 16
  store <16 x i16> %2659, ptr %2665, align 2, !tbaa !44
  %2666 = getelementptr inbounds i16, ptr %2664, i64 32
  store <16 x i16> %2661, ptr %2666, align 2, !tbaa !44
  %2667 = getelementptr inbounds i16, ptr %2664, i64 48
  store <16 x i16> %2663, ptr %2667, align 2, !tbaa !44
  %2668 = add nuw i64 %2655, 64
  %2669 = icmp eq i64 %2668, %2653
  br i1 %2669, label %2670, label %2654, !llvm.loop !332

2670:                                             ; preds = %2654
  %2671 = icmp eq i64 %2652, 0
  br i1 %2671, label %2725, label %2672

2672:                                             ; preds = %2670
  %2673 = icmp ult i64 %2652, 8
  br i1 %2673, label %2687, label %2674

2674:                                             ; preds = %2649, %2672
  %2675 = phi i64 [ %2653, %2672 ], [ 0, %2649 ]
  %2676 = and i64 %2635, 7
  %2677 = sub nsw i64 %2642, %2676
  br label %2678

2678:                                             ; preds = %2678, %2674
  %2679 = phi i64 [ %2675, %2674 ], [ %2683, %2678 ]
  %2680 = getelementptr inbounds i16, ptr %717, i64 %2679
  %2681 = load <8 x i16>, ptr %2680, align 2, !tbaa !44
  %2682 = getelementptr inbounds i16, ptr %2639, i64 %2679
  store <8 x i16> %2681, ptr %2682, align 2, !tbaa !44
  %2683 = add nuw i64 %2679, 8
  %2684 = icmp eq i64 %2683, %2677
  br i1 %2684, label %2685, label %2678, !llvm.loop !333

2685:                                             ; preds = %2678
  %2686 = icmp eq i64 %2676, 0
  br i1 %2686, label %2725, label %2687

2687:                                             ; preds = %2644, %2641, %2672, %2685
  %2688 = phi i64 [ 0, %2641 ], [ 0, %2644 ], [ %2653, %2672 ], [ %2677, %2685 ]
  %2689 = sub i64 %2635, %2688
  %2690 = xor i64 %2688, -1
  %2691 = add nsw i64 %2642, %2690
  %2692 = and i64 %2689, 3
  %2693 = icmp eq i64 %2692, 0
  br i1 %2693, label %2703, label %2694

2694:                                             ; preds = %2687, %2694
  %2695 = phi i64 [ %2700, %2694 ], [ %2688, %2687 ]
  %2696 = phi i64 [ %2701, %2694 ], [ 0, %2687 ]
  %2697 = getelementptr inbounds i16, ptr %717, i64 %2695
  %2698 = load i16, ptr %2697, align 2, !tbaa !44
  %2699 = getelementptr inbounds i16, ptr %2639, i64 %2695
  store i16 %2698, ptr %2699, align 2, !tbaa !44
  %2700 = add nuw nsw i64 %2695, 1
  %2701 = add i64 %2696, 1
  %2702 = icmp eq i64 %2701, %2692
  br i1 %2702, label %2703, label %2694, !llvm.loop !334

2703:                                             ; preds = %2694, %2687
  %2704 = phi i64 [ %2688, %2687 ], [ %2700, %2694 ]
  %2705 = icmp ult i64 %2691, 3
  br i1 %2705, label %2725, label %2706

2706:                                             ; preds = %2703, %2706
  %2707 = phi i64 [ %2723, %2706 ], [ %2704, %2703 ]
  %2708 = getelementptr inbounds i16, ptr %717, i64 %2707
  %2709 = load i16, ptr %2708, align 2, !tbaa !44
  %2710 = getelementptr inbounds i16, ptr %2639, i64 %2707
  store i16 %2709, ptr %2710, align 2, !tbaa !44
  %2711 = add nuw nsw i64 %2707, 1
  %2712 = getelementptr inbounds i16, ptr %717, i64 %2711
  %2713 = load i16, ptr %2712, align 2, !tbaa !44
  %2714 = getelementptr inbounds i16, ptr %2639, i64 %2711
  store i16 %2713, ptr %2714, align 2, !tbaa !44
  %2715 = add nuw nsw i64 %2707, 2
  %2716 = getelementptr inbounds i16, ptr %717, i64 %2715
  %2717 = load i16, ptr %2716, align 2, !tbaa !44
  %2718 = getelementptr inbounds i16, ptr %2639, i64 %2715
  store i16 %2717, ptr %2718, align 2, !tbaa !44
  %2719 = add nuw nsw i64 %2707, 3
  %2720 = getelementptr inbounds i16, ptr %717, i64 %2719
  %2721 = load i16, ptr %2720, align 2, !tbaa !44
  %2722 = getelementptr inbounds i16, ptr %2639, i64 %2719
  store i16 %2721, ptr %2722, align 2, !tbaa !44
  %2723 = add nuw nsw i64 %2707, 4
  %2724 = icmp eq i64 %2723, %2642
  br i1 %2724, label %2725, label %2706, !llvm.loop !335

2725:                                             ; preds = %2703, %2706, %2670, %2685
  %2726 = shl i64 %2634, 31
  %2727 = add i64 %2726, -4294967296
  %2728 = ashr i64 %2727, 32
  %2729 = getelementptr inbounds i16, ptr %2639, i64 %2728
  %2730 = load i16, ptr %2729, align 2, !tbaa !44
  br label %2731

2731:                                             ; preds = %2622, %2725
  %2732 = phi i64 [ %2635, %2725 ], [ 0, %2622 ]
  %2733 = phi i16 [ %2730, %2725 ], [ -1, %2622 ]
  %2734 = and i64 %2732, 4294967295
  %2735 = getelementptr inbounds i16, ptr %2639, i64 %2734
  store i16 %2733, ptr %2735, align 2, !tbaa !44
  %2736 = trunc i64 %2635 to i16
  %2737 = add i16 %2736, 1
  %2738 = sext i32 %2632 to i64
  %2739 = getelementptr inbounds i16, ptr %1638, i64 %2738
  store i16 %2737, ptr %2739, align 2, !tbaa !44
  %2740 = add nsw i32 %2636, 2
  %2741 = add nsw i32 %2740, %2632
  %2742 = ptrtoint ptr %2058 to i64
  %2743 = sub i64 %2742, %992
  %2744 = lshr exact i64 %2743, 1
  %2745 = trunc i64 %2744 to i32
  %2746 = add nsw i32 %2741, 1
  %2747 = sext i32 %2746 to i64
  %2748 = getelementptr i16, ptr %1638, i64 %2747
  %2749 = icmp sgt i32 %2745, 0
  br i1 %2749, label %2750, label %2840

2750:                                             ; preds = %2731
  %2751 = and i64 %2744, 4294967295
  %2752 = icmp ult i64 %2751, 8
  br i1 %2752, label %2796, label %2753

2753:                                             ; preds = %2750
  %2754 = shl nsw i64 %2747, 1
  %2755 = add i64 %2754, %1639
  %2756 = sub i64 %2755, %992
  %2757 = icmp ult i64 %2756, 128
  br i1 %2757, label %2796, label %2758

2758:                                             ; preds = %2753
  %2759 = icmp ult i64 %2751, 64
  br i1 %2759, label %2783, label %2760

2760:                                             ; preds = %2758
  %2761 = and i64 %2744, 63
  %2762 = sub nsw i64 %2751, %2761
  br label %2763

2763:                                             ; preds = %2763, %2760
  %2764 = phi i64 [ 0, %2760 ], [ %2777, %2763 ]
  %2765 = getelementptr inbounds i16, ptr %763, i64 %2764
  %2766 = load <16 x i16>, ptr %2765, align 2, !tbaa !44
  %2767 = getelementptr inbounds i16, ptr %2765, i64 16
  %2768 = load <16 x i16>, ptr %2767, align 2, !tbaa !44
  %2769 = getelementptr inbounds i16, ptr %2765, i64 32
  %2770 = load <16 x i16>, ptr %2769, align 2, !tbaa !44
  %2771 = getelementptr inbounds i16, ptr %2765, i64 48
  %2772 = load <16 x i16>, ptr %2771, align 2, !tbaa !44
  %2773 = getelementptr inbounds i16, ptr %2748, i64 %2764
  store <16 x i16> %2766, ptr %2773, align 2, !tbaa !44
  %2774 = getelementptr inbounds i16, ptr %2773, i64 16
  store <16 x i16> %2768, ptr %2774, align 2, !tbaa !44
  %2775 = getelementptr inbounds i16, ptr %2773, i64 32
  store <16 x i16> %2770, ptr %2775, align 2, !tbaa !44
  %2776 = getelementptr inbounds i16, ptr %2773, i64 48
  store <16 x i16> %2772, ptr %2776, align 2, !tbaa !44
  %2777 = add nuw i64 %2764, 64
  %2778 = icmp eq i64 %2777, %2762
  br i1 %2778, label %2779, label %2763, !llvm.loop !336

2779:                                             ; preds = %2763
  %2780 = icmp eq i64 %2761, 0
  br i1 %2780, label %2834, label %2781

2781:                                             ; preds = %2779
  %2782 = icmp ult i64 %2761, 8
  br i1 %2782, label %2796, label %2783

2783:                                             ; preds = %2758, %2781
  %2784 = phi i64 [ %2762, %2781 ], [ 0, %2758 ]
  %2785 = and i64 %2744, 7
  %2786 = sub nsw i64 %2751, %2785
  br label %2787

2787:                                             ; preds = %2787, %2783
  %2788 = phi i64 [ %2784, %2783 ], [ %2792, %2787 ]
  %2789 = getelementptr inbounds i16, ptr %763, i64 %2788
  %2790 = load <8 x i16>, ptr %2789, align 2, !tbaa !44
  %2791 = getelementptr inbounds i16, ptr %2748, i64 %2788
  store <8 x i16> %2790, ptr %2791, align 2, !tbaa !44
  %2792 = add nuw i64 %2788, 8
  %2793 = icmp eq i64 %2792, %2786
  br i1 %2793, label %2794, label %2787, !llvm.loop !337

2794:                                             ; preds = %2787
  %2795 = icmp eq i64 %2785, 0
  br i1 %2795, label %2834, label %2796

2796:                                             ; preds = %2753, %2750, %2781, %2794
  %2797 = phi i64 [ 0, %2750 ], [ 0, %2753 ], [ %2762, %2781 ], [ %2786, %2794 ]
  %2798 = sub i64 %2744, %2797
  %2799 = xor i64 %2797, -1
  %2800 = add nsw i64 %2751, %2799
  %2801 = and i64 %2798, 3
  %2802 = icmp eq i64 %2801, 0
  br i1 %2802, label %2812, label %2803

2803:                                             ; preds = %2796, %2803
  %2804 = phi i64 [ %2809, %2803 ], [ %2797, %2796 ]
  %2805 = phi i64 [ %2810, %2803 ], [ 0, %2796 ]
  %2806 = getelementptr inbounds i16, ptr %763, i64 %2804
  %2807 = load i16, ptr %2806, align 2, !tbaa !44
  %2808 = getelementptr inbounds i16, ptr %2748, i64 %2804
  store i16 %2807, ptr %2808, align 2, !tbaa !44
  %2809 = add nuw nsw i64 %2804, 1
  %2810 = add i64 %2805, 1
  %2811 = icmp eq i64 %2810, %2801
  br i1 %2811, label %2812, label %2803, !llvm.loop !338

2812:                                             ; preds = %2803, %2796
  %2813 = phi i64 [ %2797, %2796 ], [ %2809, %2803 ]
  %2814 = icmp ult i64 %2800, 3
  br i1 %2814, label %2834, label %2815

2815:                                             ; preds = %2812, %2815
  %2816 = phi i64 [ %2832, %2815 ], [ %2813, %2812 ]
  %2817 = getelementptr inbounds i16, ptr %763, i64 %2816
  %2818 = load i16, ptr %2817, align 2, !tbaa !44
  %2819 = getelementptr inbounds i16, ptr %2748, i64 %2816
  store i16 %2818, ptr %2819, align 2, !tbaa !44
  %2820 = add nuw nsw i64 %2816, 1
  %2821 = getelementptr inbounds i16, ptr %763, i64 %2820
  %2822 = load i16, ptr %2821, align 2, !tbaa !44
  %2823 = getelementptr inbounds i16, ptr %2748, i64 %2820
  store i16 %2822, ptr %2823, align 2, !tbaa !44
  %2824 = add nuw nsw i64 %2816, 2
  %2825 = getelementptr inbounds i16, ptr %763, i64 %2824
  %2826 = load i16, ptr %2825, align 2, !tbaa !44
  %2827 = getelementptr inbounds i16, ptr %2748, i64 %2824
  store i16 %2826, ptr %2827, align 2, !tbaa !44
  %2828 = add nuw nsw i64 %2816, 3
  %2829 = getelementptr inbounds i16, ptr %763, i64 %2828
  %2830 = load i16, ptr %2829, align 2, !tbaa !44
  %2831 = getelementptr inbounds i16, ptr %2748, i64 %2828
  store i16 %2830, ptr %2831, align 2, !tbaa !44
  %2832 = add nuw nsw i64 %2816, 4
  %2833 = icmp eq i64 %2832, %2751
  br i1 %2833, label %2834, label %2815, !llvm.loop !339

2834:                                             ; preds = %2812, %2815, %2779, %2794
  %2835 = shl i64 %2743, 31
  %2836 = add i64 %2835, -4294967296
  %2837 = ashr i64 %2836, 32
  %2838 = getelementptr inbounds i16, ptr %2748, i64 %2837
  %2839 = load i16, ptr %2838, align 2, !tbaa !44
  br label %2840

2840:                                             ; preds = %2731, %2834
  %2841 = phi i64 [ %2744, %2834 ], [ 0, %2731 ]
  %2842 = phi i16 [ %2839, %2834 ], [ -1, %2731 ]
  %2843 = and i64 %2841, 4294967295
  %2844 = getelementptr inbounds i16, ptr %2748, i64 %2843
  store i16 %2842, ptr %2844, align 2, !tbaa !44
  %2845 = trunc i64 %2744 to i16
  %2846 = add i16 %2845, 1
  %2847 = sext i32 %2741 to i64
  %2848 = getelementptr inbounds i16, ptr %1638, i64 %2847
  store i16 %2846, ptr %2848, align 2, !tbaa !44
  %2849 = add nsw i32 %2745, 2
  %2850 = add nsw i32 %2849, %2741
  %2851 = ptrtoint ptr %2057 to i64
  %2852 = sub i64 %2851, %993
  %2853 = lshr exact i64 %2852, 1
  %2854 = trunc i64 %2853 to i32
  %2855 = add nsw i32 %2850, 1
  %2856 = sext i32 %2855 to i64
  %2857 = getelementptr i16, ptr %1638, i64 %2856
  %2858 = icmp sgt i32 %2854, 0
  br i1 %2858, label %2859, label %2949

2859:                                             ; preds = %2840
  %2860 = and i64 %2853, 4294967295
  %2861 = icmp ult i64 %2860, 8
  br i1 %2861, label %2905, label %2862

2862:                                             ; preds = %2859
  %2863 = shl nsw i64 %2856, 1
  %2864 = add i64 %2863, %1639
  %2865 = sub i64 %2864, %993
  %2866 = icmp ult i64 %2865, 128
  br i1 %2866, label %2905, label %2867

2867:                                             ; preds = %2862
  %2868 = icmp ult i64 %2860, 64
  br i1 %2868, label %2892, label %2869

2869:                                             ; preds = %2867
  %2870 = and i64 %2853, 63
  %2871 = sub nsw i64 %2860, %2870
  br label %2872

2872:                                             ; preds = %2872, %2869
  %2873 = phi i64 [ 0, %2869 ], [ %2886, %2872 ]
  %2874 = getelementptr inbounds i16, ptr %809, i64 %2873
  %2875 = load <16 x i16>, ptr %2874, align 2, !tbaa !44
  %2876 = getelementptr inbounds i16, ptr %2874, i64 16
  %2877 = load <16 x i16>, ptr %2876, align 2, !tbaa !44
  %2878 = getelementptr inbounds i16, ptr %2874, i64 32
  %2879 = load <16 x i16>, ptr %2878, align 2, !tbaa !44
  %2880 = getelementptr inbounds i16, ptr %2874, i64 48
  %2881 = load <16 x i16>, ptr %2880, align 2, !tbaa !44
  %2882 = getelementptr inbounds i16, ptr %2857, i64 %2873
  store <16 x i16> %2875, ptr %2882, align 2, !tbaa !44
  %2883 = getelementptr inbounds i16, ptr %2882, i64 16
  store <16 x i16> %2877, ptr %2883, align 2, !tbaa !44
  %2884 = getelementptr inbounds i16, ptr %2882, i64 32
  store <16 x i16> %2879, ptr %2884, align 2, !tbaa !44
  %2885 = getelementptr inbounds i16, ptr %2882, i64 48
  store <16 x i16> %2881, ptr %2885, align 2, !tbaa !44
  %2886 = add nuw i64 %2873, 64
  %2887 = icmp eq i64 %2886, %2871
  br i1 %2887, label %2888, label %2872, !llvm.loop !340

2888:                                             ; preds = %2872
  %2889 = icmp eq i64 %2870, 0
  br i1 %2889, label %2943, label %2890

2890:                                             ; preds = %2888
  %2891 = icmp ult i64 %2870, 8
  br i1 %2891, label %2905, label %2892

2892:                                             ; preds = %2867, %2890
  %2893 = phi i64 [ %2871, %2890 ], [ 0, %2867 ]
  %2894 = and i64 %2853, 7
  %2895 = sub nsw i64 %2860, %2894
  br label %2896

2896:                                             ; preds = %2896, %2892
  %2897 = phi i64 [ %2893, %2892 ], [ %2901, %2896 ]
  %2898 = getelementptr inbounds i16, ptr %809, i64 %2897
  %2899 = load <8 x i16>, ptr %2898, align 2, !tbaa !44
  %2900 = getelementptr inbounds i16, ptr %2857, i64 %2897
  store <8 x i16> %2899, ptr %2900, align 2, !tbaa !44
  %2901 = add nuw i64 %2897, 8
  %2902 = icmp eq i64 %2901, %2895
  br i1 %2902, label %2903, label %2896, !llvm.loop !341

2903:                                             ; preds = %2896
  %2904 = icmp eq i64 %2894, 0
  br i1 %2904, label %2943, label %2905

2905:                                             ; preds = %2862, %2859, %2890, %2903
  %2906 = phi i64 [ 0, %2859 ], [ 0, %2862 ], [ %2871, %2890 ], [ %2895, %2903 ]
  %2907 = sub i64 %2853, %2906
  %2908 = xor i64 %2906, -1
  %2909 = add nsw i64 %2860, %2908
  %2910 = and i64 %2907, 3
  %2911 = icmp eq i64 %2910, 0
  br i1 %2911, label %2921, label %2912

2912:                                             ; preds = %2905, %2912
  %2913 = phi i64 [ %2918, %2912 ], [ %2906, %2905 ]
  %2914 = phi i64 [ %2919, %2912 ], [ 0, %2905 ]
  %2915 = getelementptr inbounds i16, ptr %809, i64 %2913
  %2916 = load i16, ptr %2915, align 2, !tbaa !44
  %2917 = getelementptr inbounds i16, ptr %2857, i64 %2913
  store i16 %2916, ptr %2917, align 2, !tbaa !44
  %2918 = add nuw nsw i64 %2913, 1
  %2919 = add i64 %2914, 1
  %2920 = icmp eq i64 %2919, %2910
  br i1 %2920, label %2921, label %2912, !llvm.loop !342

2921:                                             ; preds = %2912, %2905
  %2922 = phi i64 [ %2906, %2905 ], [ %2918, %2912 ]
  %2923 = icmp ult i64 %2909, 3
  br i1 %2923, label %2943, label %2924

2924:                                             ; preds = %2921, %2924
  %2925 = phi i64 [ %2941, %2924 ], [ %2922, %2921 ]
  %2926 = getelementptr inbounds i16, ptr %809, i64 %2925
  %2927 = load i16, ptr %2926, align 2, !tbaa !44
  %2928 = getelementptr inbounds i16, ptr %2857, i64 %2925
  store i16 %2927, ptr %2928, align 2, !tbaa !44
  %2929 = add nuw nsw i64 %2925, 1
  %2930 = getelementptr inbounds i16, ptr %809, i64 %2929
  %2931 = load i16, ptr %2930, align 2, !tbaa !44
  %2932 = getelementptr inbounds i16, ptr %2857, i64 %2929
  store i16 %2931, ptr %2932, align 2, !tbaa !44
  %2933 = add nuw nsw i64 %2925, 2
  %2934 = getelementptr inbounds i16, ptr %809, i64 %2933
  %2935 = load i16, ptr %2934, align 2, !tbaa !44
  %2936 = getelementptr inbounds i16, ptr %2857, i64 %2933
  store i16 %2935, ptr %2936, align 2, !tbaa !44
  %2937 = add nuw nsw i64 %2925, 3
  %2938 = getelementptr inbounds i16, ptr %809, i64 %2937
  %2939 = load i16, ptr %2938, align 2, !tbaa !44
  %2940 = getelementptr inbounds i16, ptr %2857, i64 %2937
  store i16 %2939, ptr %2940, align 2, !tbaa !44
  %2941 = add nuw nsw i64 %2925, 4
  %2942 = icmp eq i64 %2941, %2860
  br i1 %2942, label %2943, label %2924, !llvm.loop !343

2943:                                             ; preds = %2921, %2924, %2888, %2903
  %2944 = shl i64 %2852, 31
  %2945 = add i64 %2944, -4294967296
  %2946 = ashr i64 %2945, 32
  %2947 = getelementptr inbounds i16, ptr %2857, i64 %2946
  %2948 = load i16, ptr %2947, align 2, !tbaa !44
  br label %2949

2949:                                             ; preds = %2840, %2943
  %2950 = phi i64 [ %2853, %2943 ], [ 0, %2840 ]
  %2951 = phi i16 [ %2948, %2943 ], [ -1, %2840 ]
  %2952 = and i64 %2950, 4294967295
  %2953 = getelementptr inbounds i16, ptr %2857, i64 %2952
  store i16 %2951, ptr %2953, align 2, !tbaa !44
  %2954 = trunc i64 %2853 to i16
  %2955 = add i16 %2954, 1
  %2956 = sext i32 %2850 to i64
  %2957 = getelementptr inbounds i16, ptr %1638, i64 %2956
  store i16 %2955, ptr %2957, align 2, !tbaa !44
  %2958 = add nsw i32 %2854, 2
  %2959 = add nsw i32 %2958, %2850
  %2960 = select i1 %208, i32 0, i32 %2959
  store i32 %2960, ptr %17, align 8
  br label %3045

2961:                                             ; preds = %1039
  %2962 = load ptr, ptr %12, align 8, !tbaa !46
  %2963 = load i32, ptr %17, align 8, !tbaa !17
  %2964 = add i32 %2963, 1
  %2965 = sext i32 %2964 to i64
  %2966 = getelementptr inbounds i16, ptr %2962, i64 %2965
  %2967 = sext i32 %2963 to i64
  %2968 = getelementptr inbounds i16, ptr %2962, i64 %2967
  %2969 = load i16, ptr %2968, align 2, !tbaa !44
  %2970 = zext i16 %2969 to i32
  %2971 = add i32 %2964, %2970
  %2972 = add nsw i32 %2970, -1
  %2973 = add i32 %2971, 1
  %2974 = sext i32 %2973 to i64
  %2975 = getelementptr inbounds i16, ptr %2962, i64 %2974
  %2976 = sext i32 %2971 to i64
  %2977 = getelementptr inbounds i16, ptr %2962, i64 %2976
  %2978 = load i16, ptr %2977, align 2, !tbaa !44
  %2979 = zext i16 %2978 to i32
  %2980 = add i32 %2973, %2979
  %2981 = add nsw i32 %2979, -1
  %2982 = add i32 %2980, 1
  %2983 = sext i32 %2982 to i64
  %2984 = getelementptr inbounds i16, ptr %2962, i64 %2983
  %2985 = sext i32 %2980 to i64
  %2986 = getelementptr inbounds i16, ptr %2962, i64 %2985
  %2987 = load i16, ptr %2986, align 2, !tbaa !44
  %2988 = zext i16 %2987 to i32
  %2989 = add i32 %2982, %2988
  %2990 = add nsw i32 %2988, -1
  %2991 = add i32 %2989, 1
  %2992 = sext i32 %2991 to i64
  %2993 = getelementptr inbounds i16, ptr %2962, i64 %2992
  %2994 = sext i32 %2989 to i64
  %2995 = getelementptr inbounds i16, ptr %2962, i64 %2994
  %2996 = load i16, ptr %2995, align 2, !tbaa !44
  %2997 = zext i16 %2996 to i32
  %2998 = add i32 %2991, %2997
  %2999 = add nsw i32 %2997, -1
  %3000 = add i32 %2998, 1
  %3001 = sext i32 %3000 to i64
  %3002 = getelementptr inbounds i16, ptr %2962, i64 %3001
  %3003 = sext i32 %2998 to i64
  %3004 = getelementptr inbounds i16, ptr %2962, i64 %3003
  %3005 = load i16, ptr %3004, align 2, !tbaa !44
  %3006 = zext i16 %3005 to i32
  %3007 = add i32 %3000, %3006
  %3008 = add nsw i32 %3006, -1
  %3009 = add i32 %3007, 1
  %3010 = sext i32 %3009 to i64
  %3011 = getelementptr inbounds i16, ptr %2962, i64 %3010
  %3012 = sext i32 %3007 to i64
  %3013 = getelementptr inbounds i16, ptr %2962, i64 %3012
  %3014 = load i16, ptr %3013, align 2, !tbaa !44
  %3015 = zext i16 %3014 to i32
  %3016 = add i32 %3009, %3015
  %3017 = add nsw i32 %3015, -1
  %3018 = add i32 %3016, 1
  %3019 = sext i32 %3018 to i64
  %3020 = getelementptr inbounds i16, ptr %2962, i64 %3019
  %3021 = sext i32 %3016 to i64
  %3022 = getelementptr inbounds i16, ptr %2962, i64 %3021
  %3023 = load i16, ptr %3022, align 2, !tbaa !44
  %3024 = zext i16 %3023 to i32
  %3025 = add i32 %3018, %3024
  %3026 = add nsw i32 %3024, -1
  %3027 = add i32 %3025, 1
  %3028 = sext i32 %3027 to i64
  %3029 = getelementptr inbounds i16, ptr %2962, i64 %3028
  %3030 = sext i32 %3025 to i64
  %3031 = getelementptr inbounds i16, ptr %2962, i64 %3030
  %3032 = load i16, ptr %3031, align 2, !tbaa !44
  %3033 = zext i16 %3032 to i32
  %3034 = add i32 %3027, %3033
  %3035 = add nsw i32 %3033, -1
  %3036 = add i32 %3034, 1
  %3037 = sext i32 %3036 to i64
  %3038 = getelementptr inbounds i16, ptr %2962, i64 %3037
  %3039 = sext i32 %3034 to i64
  %3040 = getelementptr inbounds i16, ptr %2962, i64 %3039
  %3041 = load i16, ptr %3040, align 2, !tbaa !44
  %3042 = zext i16 %3041 to i32
  %3043 = add i32 %3036, %3042
  store i32 %3043, ptr %17, align 8, !tbaa !17
  %3044 = add nsw i32 %3042, -1
  br label %3045

3045:                                             ; preds = %2949, %2961
  %3046 = phi ptr [ %2966, %2961 ], [ %1642, %2949 ]
  %3047 = phi i32 [ %2972, %2961 ], [ %2069, %2949 ]
  %3048 = phi ptr [ %2975, %2961 ], [ %2094, %2949 ]
  %3049 = phi i32 [ %2981, %2961 ], [ %2091, %2949 ]
  %3050 = phi ptr [ %2984, %2961 ], [ %2203, %2949 ]
  %3051 = phi i32 [ %2990, %2961 ], [ %2200, %2949 ]
  %3052 = phi ptr [ %2993, %2961 ], [ %2312, %2949 ]
  %3053 = phi i32 [ %2999, %2961 ], [ %2309, %2949 ]
  %3054 = phi ptr [ %3002, %2961 ], [ %2421, %2949 ]
  %3055 = phi i32 [ %3008, %2961 ], [ %2418, %2949 ]
  %3056 = phi ptr [ %3011, %2961 ], [ %2530, %2949 ]
  %3057 = phi i32 [ %3017, %2961 ], [ %2527, %2949 ]
  %3058 = phi ptr [ %3020, %2961 ], [ %2639, %2949 ]
  %3059 = phi i32 [ %3026, %2961 ], [ %2636, %2949 ]
  %3060 = phi ptr [ %3029, %2961 ], [ %2748, %2949 ]
  %3061 = phi i32 [ %3035, %2961 ], [ %2745, %2949 ]
  %3062 = phi ptr [ %3038, %2961 ], [ %2857, %2949 ]
  %3063 = phi i32 [ %3044, %2961 ], [ %2854, %2949 ]
  %3064 = phi i32 [ %1020, %2961 ], [ %1600, %2949 ]
  %3065 = phi i32 [ %1019, %2961 ], [ %1601, %2949 ]
  %3066 = phi i32 [ %1018, %2961 ], [ %1602, %2949 ]
  %3067 = phi i32 [ %1017, %2961 ], [ %1603, %2949 ]
  %3068 = phi ptr [ %1015, %2961 ], [ %1296, %2949 ]
  %3069 = phi ptr [ %1014, %2961 ], [ %1297, %2949 ]
  %3070 = phi ptr [ %1013, %2961 ], [ %1298, %2949 ]
  %3071 = getelementptr inbounds %struct.CompAtom, ptr %105, i64 %1024, i32 1
  %3072 = load float, ptr %3071, align 8, !tbaa !104
  %3073 = fpext float %3072 to double
  %3074 = fmul double %3073, 0x4074C104816F0069
  %3075 = fmul double %32, %3074
  %3076 = fmul double %28, %3075
  %3077 = getelementptr inbounds %struct.CompAtom, ptr %105, i64 %1024, i32 2
  %3078 = load i16, ptr %3077, align 4, !tbaa !105
  %3079 = sext i16 %3078 to i32
  %3080 = load ptr, ptr %994, align 8, !tbaa !106
  %3081 = load i32, ptr %995, align 8, !tbaa !108
  %3082 = shl nsw i32 %3079, 1
  %3083 = mul i32 %3082, %3081
  %3084 = zext i32 %3083 to i64
  %3085 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %3080, i64 %3084
  %3086 = load double, ptr @_ZN20ComputeNonbondedUtil7cutoff2E, align 8, !tbaa !19
  %3087 = extractelement <2 x double> %1042, i64 0
  %3088 = extractelement <2 x double> %1042, i64 1
  %3089 = call noundef i32 @_Z22pairlist_from_pairlistddddPK8CompAtomPKtiPtdPd(double noundef %3086, double noundef %3087, double noundef %3088, double noundef %1045, ptr noundef %107, ptr noundef nonnull %3046, i32 noundef %3047, ptr noundef %160, double noundef %35, ptr noundef %206)
  %3090 = icmp sgt i32 %3089, 0
  %3091 = shufflevector <2 x double> %1023, <2 x double> %1022, <2 x i32> <i32 0, i32 2>
  %3092 = shufflevector <2 x double> %1023, <2 x double> %1022, <2 x i32> <i32 1, i32 3>
  br i1 %3090, label %3093, label %3212

3093:                                             ; preds = %3045
  %3094 = load ptr, ptr @_ZN20ComputeNonbondedUtil8r2_tableE, align 8, !tbaa !23
  %3095 = zext i32 %3089 to i64
  br label %3096

3096:                                             ; preds = %3093, %3096
  %3097 = phi i64 [ 0, %3093 ], [ %3210, %3096 ]
  %3098 = phi double [ 0.000000e+00, %3093 ], [ %3206, %3096 ]
  %3099 = phi <2 x double> [ %3091, %3093 ], [ %3191, %3096 ]
  %3100 = phi <2 x double> [ %3092, %3093 ], [ %3170, %3096 ]
  %3101 = phi <2 x double> [ zeroinitializer, %3093 ], [ %3202, %3096 ]
  %3102 = shl nuw nsw i64 %3097, 1
  %3103 = getelementptr inbounds i32, ptr %207, i64 %3102
  %3104 = load i32, ptr %3103, align 4, !tbaa !5
  %3105 = ashr i32 %3104, 14
  %3106 = add nsw i32 %3105, %38
  %3107 = getelementptr inbounds i16, ptr %160, i64 %3097
  %3108 = load i16, ptr %3107, align 2, !tbaa !44
  %3109 = zext i16 %3108 to i64
  %3110 = getelementptr inbounds %struct.CompAtom, ptr %107, i64 %3109
  %3111 = getelementptr inbounds double, ptr %206, i64 %3097
  %3112 = load double, ptr %3111, align 8, !tbaa !19
  %3113 = sext i32 %3106 to i64
  %3114 = getelementptr inbounds double, ptr %3094, i64 %3113
  %3115 = load double, ptr %3114, align 8, !tbaa !19
  %3116 = fsub double %3112, %3115
  %3117 = shl nsw i32 %3106, 4
  %3118 = sext i32 %3117 to i64
  %3119 = getelementptr inbounds double, ptr %31, i64 %3118
  %3120 = getelementptr inbounds %struct.CompAtom, ptr %107, i64 %3109, i32 2
  %3121 = load i16, ptr %3120, align 4, !tbaa !105
  %3122 = sext i16 %3121 to i32
  %3123 = shl nsw i32 %3122, 1
  %3124 = sext i32 %3123 to i64
  %3125 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %3085, i64 %3124
  %3126 = getelementptr inbounds %class.Vector, ptr %967, i64 %3109
  %3127 = getelementptr inbounds %struct.CompAtom, ptr %107, i64 %3109, i32 1
  %3128 = load float, ptr %3127, align 8, !tbaa !104
  %3129 = fpext float %3128 to double
  %3130 = fmul double %3076, %3129
  %3131 = getelementptr inbounds %class.Vector, ptr %3110, i64 0, i32 2
  %3132 = load double, ptr %3131, align 8, !tbaa !49
  %3133 = fsub double %1045, %3132
  %3134 = load double, ptr %3125, align 8, !tbaa !109
  %3135 = fmul double %32, %3134
  %3136 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %3085, i64 %3124, i32 1
  %3137 = load double, ptr %3136, align 8, !tbaa !111
  %3138 = load double, ptr %3119, align 8, !tbaa !19
  %3139 = getelementptr inbounds double, ptr %3119, i64 2
  %3140 = load double, ptr %3139, align 8, !tbaa !19
  %3141 = fmul double %3137, %996
  %3142 = fmul double %3141, %3140
  %3143 = call double @llvm.fmuladd.f64(double %3135, double %3138, double %3142)
  %3144 = getelementptr inbounds double, ptr %3119, i64 1
  %3145 = load double, ptr %3144, align 8, !tbaa !19
  %3146 = getelementptr inbounds double, ptr %3119, i64 3
  %3147 = load double, ptr %3146, align 8, !tbaa !19
  %3148 = fmul double %3141, %3147
  %3149 = call double @llvm.fmuladd.f64(double %3135, double %3145, double %3148)
  %3150 = getelementptr inbounds double, ptr %3119, i64 4
  %3151 = load double, ptr %3150, align 8, !tbaa !19
  %3152 = getelementptr inbounds double, ptr %3119, i64 6
  %3153 = load double, ptr %3152, align 8, !tbaa !19
  %3154 = fmul double %3141, %3153
  %3155 = call double @llvm.fmuladd.f64(double %3135, double %3151, double %3154)
  %3156 = getelementptr inbounds double, ptr %3119, i64 5
  %3157 = load double, ptr %3156, align 8, !tbaa !19
  %3158 = getelementptr inbounds double, ptr %3119, i64 7
  %3159 = load double, ptr %3158, align 8, !tbaa !19
  %3160 = fmul double %3141, %3159
  %3161 = call double @llvm.fmuladd.f64(double %3135, double %3157, double %3160)
  %3162 = fmul double %3116, %3143
  %3163 = fmul double %3149, 2.500000e-01
  %3164 = call double @llvm.fmuladd.f64(double %3162, double 0x3FC5555555555555, double %3163)
  %3165 = fmul double %3155, 5.000000e-01
  %3166 = call double @llvm.fmuladd.f64(double %3164, double %3116, double %3165)
  %3167 = call double @llvm.fmuladd.f64(double %3166, double %3116, double %3161)
  %3168 = insertelement <2 x double> poison, double %3167, i64 0
  %3169 = shufflevector <2 x double> %3168, <2 x double> poison, <2 x i32> zeroinitializer
  %3170 = fsub <2 x double> %3100, %3169
  %3171 = getelementptr inbounds double, ptr %3119, i64 8
  %3172 = load double, ptr %3171, align 8, !tbaa !19
  %3173 = getelementptr inbounds double, ptr %3119, i64 9
  %3174 = load double, ptr %3173, align 8, !tbaa !19
  %3175 = getelementptr inbounds double, ptr %3119, i64 10
  %3176 = load double, ptr %3175, align 8, !tbaa !19
  %3177 = getelementptr inbounds double, ptr %3119, i64 11
  %3178 = load double, ptr %3177, align 8, !tbaa !19
  %3179 = fmul double %3130, %3172
  %3180 = fmul double %3130, %3174
  %3181 = fmul double %3130, %3176
  %3182 = fmul double %3130, %3178
  %3183 = fmul double %3116, %3179
  %3184 = fmul double %3180, 2.500000e-01
  %3185 = call double @llvm.fmuladd.f64(double %3183, double 0x3FC5555555555555, double %3184)
  %3186 = fmul double %3181, 5.000000e-01
  %3187 = call double @llvm.fmuladd.f64(double %3185, double %3116, double %3186)
  %3188 = call double @llvm.fmuladd.f64(double %3187, double %3116, double %3182)
  %3189 = insertelement <2 x double> poison, double %3188, i64 0
  %3190 = shufflevector <2 x double> %3189, <2 x double> poison, <2 x i32> zeroinitializer
  %3191 = fsub <2 x double> %3099, %3190
  %3192 = fadd double %3143, %3179
  %3193 = fadd double %3149, %3180
  %3194 = fadd double %3155, %3181
  %3195 = call double @llvm.fmuladd.f64(double %3116, double %3192, double %3193)
  %3196 = call double @llvm.fmuladd.f64(double %3195, double %3116, double %3194)
  %3197 = load <2 x double>, ptr %3110, align 8, !tbaa !19
  %3198 = fsub <2 x double> %1042, %3197
  %3199 = insertelement <2 x double> poison, double %3196, i64 0
  %3200 = shufflevector <2 x double> %3199, <2 x double> poison, <2 x i32> zeroinitializer
  %3201 = fmul <2 x double> %3198, %3200
  %3202 = fadd <2 x double> %3101, %3201
  %3203 = load <2 x double>, ptr %3126, align 8, !tbaa !19
  %3204 = fsub <2 x double> %3203, %3201
  store <2 x double> %3204, ptr %3126, align 8, !tbaa !19
  %3205 = fmul double %3133, %3196
  %3206 = fadd double %3098, %3205
  %3207 = getelementptr inbounds %class.Vector, ptr %967, i64 %3109, i32 2
  %3208 = load double, ptr %3207, align 8, !tbaa !112
  %3209 = fsub double %3208, %3205
  store double %3209, ptr %3207, align 8, !tbaa !112
  %3210 = add nuw nsw i64 %3097, 1
  %3211 = icmp eq i64 %3210, %3095
  br i1 %3211, label %3212, label %3096

3212:                                             ; preds = %3096, %3045
  %3213 = phi double [ 0.000000e+00, %3045 ], [ %3206, %3096 ]
  %3214 = phi <2 x double> [ zeroinitializer, %3045 ], [ %3202, %3096 ]
  %3215 = phi <2 x double> [ %3091, %3045 ], [ %3191, %3096 ]
  %3216 = phi <2 x double> [ %3092, %3045 ], [ %3170, %3096 ]
  %3217 = load double, ptr @_ZN20ComputeNonbondedUtil7cutoff2E, align 8, !tbaa !19
  %3218 = call noundef i32 @_Z22pairlist_from_pairlistddddPK8CompAtomPKtiPtdPd(double noundef %3217, double noundef %3087, double noundef %3088, double noundef %1045, ptr noundef %107, ptr noundef %3050, i32 noundef %3051, ptr noundef %160, double noundef %35, ptr noundef %206)
  %3219 = add nsw i32 %3218, %1011
  %3220 = icmp sgt i32 %3218, 0
  br i1 %3220, label %3221, label %3353

3221:                                             ; preds = %3212
  %3222 = load ptr, ptr @_ZN20ComputeNonbondedUtil8r2_tableE, align 8, !tbaa !23
  %3223 = zext i32 %3218 to i64
  br label %3224

3224:                                             ; preds = %3221, %3224
  %3225 = phi i64 [ 0, %3221 ], [ %3351, %3224 ]
  %3226 = phi double [ %3213, %3221 ], [ %3347, %3224 ]
  %3227 = phi <2 x double> [ %3214, %3221 ], [ %3343, %3224 ]
  %3228 = phi <2 x double> [ %3215, %3221 ], [ %3334, %3224 ]
  %3229 = phi <2 x double> [ %3216, %3221 ], [ %3301, %3224 ]
  %3230 = shl nuw nsw i64 %3225, 1
  %3231 = getelementptr inbounds i32, ptr %207, i64 %3230
  %3232 = load i32, ptr %3231, align 4, !tbaa !5
  %3233 = ashr i32 %3232, 14
  %3234 = add nsw i32 %3233, %38
  %3235 = getelementptr inbounds i16, ptr %160, i64 %3225
  %3236 = load i16, ptr %3235, align 2, !tbaa !44
  %3237 = zext i16 %3236 to i64
  %3238 = getelementptr inbounds %struct.CompAtom, ptr %107, i64 %3237
  %3239 = getelementptr inbounds double, ptr %206, i64 %3225
  %3240 = load double, ptr %3239, align 8, !tbaa !19
  %3241 = sext i32 %3234 to i64
  %3242 = getelementptr inbounds double, ptr %3222, i64 %3241
  %3243 = load double, ptr %3242, align 8, !tbaa !19
  %3244 = fsub double %3240, %3243
  %3245 = shl nsw i32 %3234, 4
  %3246 = sext i32 %3245 to i64
  %3247 = getelementptr inbounds double, ptr %31, i64 %3246
  %3248 = getelementptr inbounds %struct.CompAtom, ptr %107, i64 %3237, i32 2
  %3249 = load i16, ptr %3248, align 4, !tbaa !105
  %3250 = sext i16 %3249 to i32
  %3251 = shl nsw i32 %3250, 1
  %3252 = sext i32 %3251 to i64
  %3253 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %3085, i64 %3252
  %3254 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %3253, i64 1
  %3255 = getelementptr inbounds %class.Vector, ptr %967, i64 %3237
  %3256 = getelementptr inbounds %struct.CompAtom, ptr %107, i64 %3237, i32 1
  %3257 = load float, ptr %3256, align 8, !tbaa !104
  %3258 = fpext float %3257 to double
  %3259 = fmul double %3076, %3258
  %3260 = load <2 x double>, ptr %3238, align 8, !tbaa !19
  %3261 = fsub <2 x double> %1042, %3260
  %3262 = getelementptr inbounds %class.Vector, ptr %3238, i64 0, i32 2
  %3263 = load double, ptr %3262, align 8, !tbaa !49
  %3264 = fsub double %1045, %3263
  %3265 = load double, ptr %3254, align 8, !tbaa !109
  %3266 = fmul double %32, %3265
  %3267 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %3253, i64 1, i32 1
  %3268 = load double, ptr %3267, align 8, !tbaa !111
  %3269 = load double, ptr %3247, align 8, !tbaa !19
  %3270 = getelementptr inbounds double, ptr %3247, i64 2
  %3271 = load double, ptr %3270, align 8, !tbaa !19
  %3272 = fmul double %3268, %996
  %3273 = fmul double %3272, %3271
  %3274 = call double @llvm.fmuladd.f64(double %3266, double %3269, double %3273)
  %3275 = getelementptr inbounds double, ptr %3247, i64 1
  %3276 = load double, ptr %3275, align 8, !tbaa !19
  %3277 = getelementptr inbounds double, ptr %3247, i64 3
  %3278 = load double, ptr %3277, align 8, !tbaa !19
  %3279 = fmul double %3272, %3278
  %3280 = call double @llvm.fmuladd.f64(double %3266, double %3276, double %3279)
  %3281 = getelementptr inbounds double, ptr %3247, i64 4
  %3282 = load double, ptr %3281, align 8, !tbaa !19
  %3283 = getelementptr inbounds double, ptr %3247, i64 6
  %3284 = load double, ptr %3283, align 8, !tbaa !19
  %3285 = fmul double %3272, %3284
  %3286 = call double @llvm.fmuladd.f64(double %3266, double %3282, double %3285)
  %3287 = getelementptr inbounds double, ptr %3247, i64 5
  %3288 = load double, ptr %3287, align 8, !tbaa !19
  %3289 = getelementptr inbounds double, ptr %3247, i64 7
  %3290 = load double, ptr %3289, align 8, !tbaa !19
  %3291 = fmul double %3272, %3290
  %3292 = call double @llvm.fmuladd.f64(double %3266, double %3288, double %3291)
  %3293 = fmul double %3244, %3274
  %3294 = fmul double %3280, 2.500000e-01
  %3295 = call double @llvm.fmuladd.f64(double %3293, double 0x3FC5555555555555, double %3294)
  %3296 = fmul double %3286, 5.000000e-01
  %3297 = call double @llvm.fmuladd.f64(double %3295, double %3244, double %3296)
  %3298 = call double @llvm.fmuladd.f64(double %3297, double %3244, double %3292)
  %3299 = insertelement <2 x double> poison, double %3298, i64 0
  %3300 = shufflevector <2 x double> %3299, <2 x double> poison, <2 x i32> zeroinitializer
  %3301 = fsub <2 x double> %3229, %3300
  %3302 = getelementptr inbounds double, ptr %3247, i64 8
  %3303 = load double, ptr %3302, align 8, !tbaa !19
  %3304 = getelementptr inbounds double, ptr %3247, i64 9
  %3305 = load double, ptr %3304, align 8, !tbaa !19
  %3306 = getelementptr inbounds double, ptr %3247, i64 10
  %3307 = load double, ptr %3306, align 8, !tbaa !19
  %3308 = getelementptr inbounds double, ptr %3247, i64 11
  %3309 = load double, ptr %3308, align 8, !tbaa !19
  %3310 = getelementptr inbounds double, ptr %3247, i64 12
  %3311 = load double, ptr %3310, align 8, !tbaa !19
  %3312 = call double @llvm.fmuladd.f64(double %997, double %3311, double %3303)
  %3313 = getelementptr inbounds double, ptr %3247, i64 13
  %3314 = load double, ptr %3313, align 8, !tbaa !19
  %3315 = call double @llvm.fmuladd.f64(double %997, double %3314, double %3305)
  %3316 = getelementptr inbounds double, ptr %3247, i64 14
  %3317 = load double, ptr %3316, align 8, !tbaa !19
  %3318 = call double @llvm.fmuladd.f64(double %997, double %3317, double %3307)
  %3319 = getelementptr inbounds double, ptr %3247, i64 15
  %3320 = load double, ptr %3319, align 8, !tbaa !19
  %3321 = call double @llvm.fmuladd.f64(double %997, double %3320, double %3309)
  %3322 = fmul double %3259, %3312
  %3323 = fmul double %3259, %3315
  %3324 = fmul double %3259, %3318
  %3325 = fmul double %3259, %3321
  %3326 = fmul double %3244, %3322
  %3327 = fmul double %3323, 2.500000e-01
  %3328 = call double @llvm.fmuladd.f64(double %3326, double 0x3FC5555555555555, double %3327)
  %3329 = fmul double %3324, 5.000000e-01
  %3330 = call double @llvm.fmuladd.f64(double %3328, double %3244, double %3329)
  %3331 = call double @llvm.fmuladd.f64(double %3330, double %3244, double %3325)
  %3332 = insertelement <2 x double> poison, double %3331, i64 0
  %3333 = shufflevector <2 x double> %3332, <2 x double> poison, <2 x i32> zeroinitializer
  %3334 = fsub <2 x double> %3228, %3333
  %3335 = fadd double %3274, %3322
  %3336 = fadd double %3280, %3323
  %3337 = fadd double %3286, %3324
  %3338 = call double @llvm.fmuladd.f64(double %3244, double %3335, double %3336)
  %3339 = call double @llvm.fmuladd.f64(double %3338, double %3244, double %3337)
  %3340 = insertelement <2 x double> poison, double %3339, i64 0
  %3341 = shufflevector <2 x double> %3340, <2 x double> poison, <2 x i32> zeroinitializer
  %3342 = fmul <2 x double> %3261, %3341
  %3343 = fadd <2 x double> %3227, %3342
  %3344 = load <2 x double>, ptr %3255, align 8, !tbaa !19
  %3345 = fsub <2 x double> %3344, %3342
  store <2 x double> %3345, ptr %3255, align 8, !tbaa !19
  %3346 = fmul double %3264, %3339
  %3347 = fadd double %3226, %3346
  %3348 = getelementptr inbounds %class.Vector, ptr %967, i64 %3237, i32 2
  %3349 = load double, ptr %3348, align 8, !tbaa !112
  %3350 = fsub double %3349, %3346
  store double %3350, ptr %3348, align 8, !tbaa !112
  %3351 = add nuw nsw i64 %3225, 1
  %3352 = icmp eq i64 %3351, %3223
  br i1 %3352, label %3353, label %3224

3353:                                             ; preds = %3224, %3212
  %3354 = phi double [ %3213, %3212 ], [ %3347, %3224 ]
  %3355 = phi <2 x double> [ %3214, %3212 ], [ %3343, %3224 ]
  %3356 = phi <2 x double> [ %3215, %3212 ], [ %3334, %3224 ]
  %3357 = phi <2 x double> [ %3216, %3212 ], [ %3301, %3224 ]
  %3358 = load double, ptr @_ZN20ComputeNonbondedUtil7cutoff2E, align 8, !tbaa !19
  %3359 = call noundef i32 @_Z22pairlist_from_pairlistddddPK8CompAtomPKtiPtdPd(double noundef %3358, double noundef %3087, double noundef %3088, double noundef %1045, ptr noundef %107, ptr noundef %3048, i32 noundef %3049, ptr noundef %160, double noundef %35, ptr noundef %206)
  %3360 = add nsw i32 %3219, %3359
  %3361 = icmp sgt i32 %3359, 0
  br i1 %3361, label %3362, label %3446

3362:                                             ; preds = %3353
  %3363 = load ptr, ptr @_ZN20ComputeNonbondedUtil8r2_tableE, align 8, !tbaa !23
  %3364 = zext i32 %3359 to i64
  br label %3365

3365:                                             ; preds = %3362, %3365
  %3366 = phi i64 [ 0, %3362 ], [ %3444, %3365 ]
  %3367 = phi double [ %3354, %3362 ], [ %3440, %3365 ]
  %3368 = phi <2 x double> [ %3355, %3362 ], [ %3436, %3365 ]
  %3369 = phi <2 x double> [ %3356, %3362 ], [ %3429, %3365 ]
  %3370 = shl nuw nsw i64 %3366, 1
  %3371 = getelementptr inbounds i32, ptr %207, i64 %3370
  %3372 = load i32, ptr %3371, align 4, !tbaa !5
  %3373 = ashr i32 %3372, 14
  %3374 = add nsw i32 %3373, %38
  %3375 = getelementptr inbounds i16, ptr %160, i64 %3366
  %3376 = load i16, ptr %3375, align 2, !tbaa !44
  %3377 = zext i16 %3376 to i64
  %3378 = getelementptr inbounds %struct.CompAtom, ptr %107, i64 %3377
  %3379 = getelementptr inbounds double, ptr %206, i64 %3366
  %3380 = load double, ptr %3379, align 8, !tbaa !19
  %3381 = sext i32 %3374 to i64
  %3382 = getelementptr inbounds double, ptr %3363, i64 %3381
  %3383 = load double, ptr %3382, align 8, !tbaa !19
  %3384 = fsub double %3380, %3383
  %3385 = shl nsw i32 %3374, 4
  %3386 = sext i32 %3385 to i64
  %3387 = getelementptr inbounds double, ptr %31, i64 %3386
  %3388 = getelementptr inbounds %class.Vector, ptr %967, i64 %3377
  %3389 = getelementptr inbounds %struct.CompAtom, ptr %107, i64 %3377, i32 1
  %3390 = load float, ptr %3389, align 8, !tbaa !104
  %3391 = fpext float %3390 to double
  %3392 = fmul double %3076, %3391
  %3393 = load <2 x double>, ptr %3378, align 8, !tbaa !19
  %3394 = getelementptr inbounds %class.Vector, ptr %3378, i64 0, i32 2
  %3395 = load double, ptr %3394, align 8, !tbaa !49
  %3396 = fsub double %1045, %3395
  %3397 = getelementptr inbounds double, ptr %3387, i64 8
  %3398 = load double, ptr %3397, align 8, !tbaa !19
  %3399 = getelementptr inbounds double, ptr %3387, i64 9
  %3400 = load double, ptr %3399, align 8, !tbaa !19
  %3401 = getelementptr inbounds double, ptr %3387, i64 10
  %3402 = load double, ptr %3401, align 8, !tbaa !19
  %3403 = getelementptr inbounds double, ptr %3387, i64 11
  %3404 = load double, ptr %3403, align 8, !tbaa !19
  %3405 = getelementptr inbounds double, ptr %3387, i64 12
  %3406 = load double, ptr %3405, align 8, !tbaa !19
  %3407 = fsub double %3398, %3406
  %3408 = getelementptr inbounds double, ptr %3387, i64 13
  %3409 = load double, ptr %3408, align 8, !tbaa !19
  %3410 = fsub double %3400, %3409
  %3411 = getelementptr inbounds double, ptr %3387, i64 14
  %3412 = load double, ptr %3411, align 8, !tbaa !19
  %3413 = fsub double %3402, %3412
  %3414 = getelementptr inbounds double, ptr %3387, i64 15
  %3415 = load double, ptr %3414, align 8, !tbaa !19
  %3416 = fsub double %3404, %3415
  %3417 = fmul double %3392, %3407
  %3418 = fmul double %3392, %3410
  %3419 = fmul double %3392, %3413
  %3420 = fmul double %3392, %3416
  %3421 = fmul double %3384, %3417
  %3422 = fmul double %3418, 2.500000e-01
  %3423 = call double @llvm.fmuladd.f64(double %3421, double 0x3FC5555555555555, double %3422)
  %3424 = fmul double %3419, 5.000000e-01
  %3425 = call double @llvm.fmuladd.f64(double %3423, double %3384, double %3424)
  %3426 = call double @llvm.fmuladd.f64(double %3425, double %3384, double %3420)
  %3427 = insertelement <2 x double> poison, double %3426, i64 0
  %3428 = shufflevector <2 x double> %3427, <2 x double> poison, <2 x i32> zeroinitializer
  %3429 = fsub <2 x double> %3369, %3428
  %3430 = call double @llvm.fmuladd.f64(double %3384, double %3417, double %3418)
  %3431 = call double @llvm.fmuladd.f64(double %3430, double %3384, double %3419)
  %3432 = fsub <2 x double> %1042, %3393
  %3433 = insertelement <2 x double> poison, double %3431, i64 0
  %3434 = shufflevector <2 x double> %3433, <2 x double> poison, <2 x i32> zeroinitializer
  %3435 = fmul <2 x double> %3432, %3434
  %3436 = fadd <2 x double> %3368, %3435
  %3437 = load <2 x double>, ptr %3388, align 8, !tbaa !19
  %3438 = fsub <2 x double> %3437, %3435
  store <2 x double> %3438, ptr %3388, align 8, !tbaa !19
  %3439 = fmul double %3396, %3431
  %3440 = fadd double %3367, %3439
  %3441 = getelementptr inbounds %class.Vector, ptr %967, i64 %3377, i32 2
  %3442 = load double, ptr %3441, align 8, !tbaa !112
  %3443 = fsub double %3442, %3439
  store double %3443, ptr %3441, align 8, !tbaa !112
  %3444 = add nuw nsw i64 %3366, 1
  %3445 = icmp eq i64 %3444, %3364
  br i1 %3445, label %3446, label %3365

3446:                                             ; preds = %3365, %3353
  %3447 = phi double [ %3354, %3353 ], [ %3440, %3365 ]
  %3448 = phi <2 x double> [ %3355, %3353 ], [ %3436, %3365 ]
  %3449 = phi <2 x double> [ %3356, %3353 ], [ %3429, %3365 ]
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %3) #11
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %4) #11
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %5) #11
  %3450 = load double, ptr @_ZN20ComputeNonbondedUtil7cutoff2E, align 8, !tbaa !19
  %3451 = call noundef i32 @_Z22pairlist_from_pairlistddddPK8CompAtomPKtiPtdPd(double noundef %3450, double noundef %3087, double noundef %3088, double noundef %1045, ptr noundef %107, ptr noundef %3052, i32 noundef %3053, ptr noundef %160, double noundef %35, ptr noundef %206)
  %3452 = icmp sgt i32 %3451, 0
  br i1 %3452, label %3453, label %3546

3453:                                             ; preds = %3446
  %3454 = zext i32 %3451 to i64
  br label %3455

3455:                                             ; preds = %3453, %3455
  %3456 = phi i64 [ 0, %3453 ], [ %3544, %3455 ]
  %3457 = phi double [ %3447, %3453 ], [ %3540, %3455 ]
  %3458 = phi <2 x double> [ %3448, %3453 ], [ %3536, %3455 ]
  %3459 = phi <2 x double> [ %3449, %3453 ], [ %3527, %3455 ]
  %3460 = phi <2 x double> [ %3357, %3453 ], [ %3510, %3455 ]
  %3461 = shl nuw nsw i64 %3456, 1
  %3462 = getelementptr inbounds i32, ptr %207, i64 %3461
  %3463 = load i32, ptr %3462, align 4, !tbaa !5
  %3464 = ashr i32 %3463, 14
  %3465 = add nsw i32 %3464, %38
  %3466 = getelementptr inbounds i16, ptr %160, i64 %3456
  %3467 = load i16, ptr %3466, align 2, !tbaa !44
  %3468 = zext i16 %3467 to i64
  %3469 = getelementptr inbounds %struct.CompAtom, ptr %107, i64 %3468
  %3470 = getelementptr inbounds double, ptr %206, i64 %3456
  %3471 = load double, ptr %3470, align 8, !tbaa !19
  %3472 = load ptr, ptr @_ZN20ComputeNonbondedUtil8r2_tableE, align 8, !tbaa !23
  %3473 = sext i32 %3465 to i64
  %3474 = getelementptr inbounds double, ptr %3472, i64 %3473
  %3475 = load double, ptr %3474, align 8, !tbaa !19
  %3476 = fsub double %3471, %3475
  %3477 = shl nsw i32 %3465, 4
  %3478 = sext i32 %3477 to i64
  %3479 = getelementptr inbounds double, ptr %31, i64 %3478
  %3480 = getelementptr inbounds %struct.CompAtom, ptr %107, i64 %3468, i32 2
  %3481 = load i16, ptr %3480, align 4, !tbaa !105
  %3482 = sext i16 %3481 to i32
  %3483 = shl nsw i32 %3482, 1
  %3484 = sext i32 %3483 to i64
  %3485 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %3085, i64 %3484
  %3486 = getelementptr inbounds %class.Vector, ptr %967, i64 %3468
  %3487 = getelementptr inbounds %struct.CompAtom, ptr %107, i64 %3468, i32 1
  %3488 = load float, ptr %3487, align 8, !tbaa !104
  %3489 = fpext float %3488 to double
  %3490 = fmul double %3076, %3489
  %3491 = getelementptr inbounds %class.Vector, ptr %3469, i64 0, i32 2
  %3492 = load double, ptr %3491, align 8, !tbaa !49
  %3493 = fsub double %1045, %3492
  %3494 = load double, ptr %3485, align 8, !tbaa !109
  %3495 = fmul double %32, %3494
  %3496 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %3085, i64 %3484, i32 1
  %3497 = load double, ptr %3496, align 8, !tbaa !111
  %3498 = fmul double %32, %3497
  %3499 = fsub double %3471, %35
  %3500 = getelementptr inbounds double, ptr %3479, i64 8
  %3501 = getelementptr inbounds double, ptr %3479, i64 9
  %3502 = getelementptr inbounds double, ptr %3479, i64 10
  %3503 = getelementptr inbounds double, ptr %3479, i64 11
  %3504 = load <2 x double>, ptr %3469, align 8, !tbaa !19
  %3505 = fsub <2 x double> %1042, %3504
  call void @_Z24fep_vdw_forceandenergiesdddddddddiidddPdS_S_(double noundef %3495, double noundef %3498, double noundef %3499, double noundef %58, double noundef %64, double noundef %39, double noundef %40, double noundef %55, double noundef %62, i32 noundef %47, i32 noundef %48, double noundef %49, double noundef %50, double noundef %44, ptr noundef nonnull %3, ptr noundef nonnull %4, ptr noundef nonnull %5)
  %3506 = load double, ptr %3, align 8, !tbaa !19
  %3507 = load double, ptr %5, align 8, !tbaa !19
  %3508 = insertelement <2 x double> poison, double %3507, i64 0
  %3509 = insertelement <2 x double> %3508, double %3506, i64 1
  %3510 = fadd <2 x double> %3460, %3509
  %3511 = load double, ptr %3500, align 8, !tbaa !19
  %3512 = load double, ptr %3501, align 8, !tbaa !19
  %3513 = load double, ptr %3502, align 8, !tbaa !19
  %3514 = load double, ptr %3503, align 8, !tbaa !19
  %3515 = fmul double %3490, %3511
  %3516 = fmul double %3490, %3512
  %3517 = fmul double %3490, %3513
  %3518 = fmul double %3490, %3514
  %3519 = fmul double %3476, %3515
  %3520 = fmul double %3516, 2.500000e-01
  %3521 = call double @llvm.fmuladd.f64(double %3519, double 0x3FC5555555555555, double %3520)
  %3522 = fmul double %3517, 5.000000e-01
  %3523 = call double @llvm.fmuladd.f64(double %3521, double %3476, double %3522)
  %3524 = call double @llvm.fmuladd.f64(double %3523, double %3476, double %3518)
  %3525 = insertelement <2 x double> poison, double %3524, i64 0
  %3526 = shufflevector <2 x double> %3525, <2 x double> poison, <2 x i32> zeroinitializer
  %3527 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %998, <2 x double> %3526, <2 x double> %3459)
  %3528 = call double @llvm.fmuladd.f64(double %3476, double %3515, double %3516)
  %3529 = call double @llvm.fmuladd.f64(double %3528, double %3476, double %3517)
  %3530 = fmul double %1004, %3529
  %3531 = load double, ptr %4, align 8, !tbaa !19
  %3532 = fadd double %3531, %3530
  %3533 = insertelement <2 x double> poison, double %3532, i64 0
  %3534 = shufflevector <2 x double> %3533, <2 x double> poison, <2 x i32> zeroinitializer
  %3535 = fmul <2 x double> %3505, %3534
  %3536 = fadd <2 x double> %3458, %3535
  %3537 = load <2 x double>, ptr %3486, align 8, !tbaa !19
  %3538 = fsub <2 x double> %3537, %3535
  store <2 x double> %3538, ptr %3486, align 8, !tbaa !19
  %3539 = fmul double %3493, %3532
  %3540 = fadd double %3457, %3539
  %3541 = getelementptr inbounds %class.Vector, ptr %967, i64 %3468, i32 2
  %3542 = load double, ptr %3541, align 8, !tbaa !112
  %3543 = fsub double %3542, %3539
  store double %3543, ptr %3541, align 8, !tbaa !112
  %3544 = add nuw nsw i64 %3456, 1
  %3545 = icmp eq i64 %3544, %3454
  br i1 %3545, label %3546, label %3455

3546:                                             ; preds = %3455, %3446
  %3547 = phi double [ %3447, %3446 ], [ %3540, %3455 ]
  %3548 = phi <2 x double> [ %3448, %3446 ], [ %3536, %3455 ]
  %3549 = phi <2 x double> [ %3449, %3446 ], [ %3527, %3455 ]
  %3550 = phi <2 x double> [ %3357, %3446 ], [ %3510, %3455 ]
  %3551 = load double, ptr @_ZN20ComputeNonbondedUtil7cutoff2E, align 8, !tbaa !19
  %3552 = call noundef i32 @_Z22pairlist_from_pairlistddddPK8CompAtomPKtiPtdPd(double noundef %3551, double noundef %3087, double noundef %3088, double noundef %1045, ptr noundef %107, ptr noundef %3058, i32 noundef %3059, ptr noundef %160, double noundef %35, ptr noundef %206)
  %3553 = icmp sgt i32 %3552, 0
  br i1 %3553, label %3554, label %3647

3554:                                             ; preds = %3546
  %3555 = zext i32 %3552 to i64
  br label %3556

3556:                                             ; preds = %3554, %3556
  %3557 = phi i64 [ 0, %3554 ], [ %3645, %3556 ]
  %3558 = phi double [ %3547, %3554 ], [ %3641, %3556 ]
  %3559 = phi <2 x double> [ %3548, %3554 ], [ %3637, %3556 ]
  %3560 = phi <2 x double> [ %3549, %3554 ], [ %3628, %3556 ]
  %3561 = phi <2 x double> [ %3550, %3554 ], [ %3611, %3556 ]
  %3562 = shl nuw nsw i64 %3557, 1
  %3563 = getelementptr inbounds i32, ptr %207, i64 %3562
  %3564 = load i32, ptr %3563, align 4, !tbaa !5
  %3565 = ashr i32 %3564, 14
  %3566 = add nsw i32 %3565, %38
  %3567 = getelementptr inbounds i16, ptr %160, i64 %3557
  %3568 = load i16, ptr %3567, align 2, !tbaa !44
  %3569 = zext i16 %3568 to i64
  %3570 = getelementptr inbounds %struct.CompAtom, ptr %107, i64 %3569
  %3571 = getelementptr inbounds double, ptr %206, i64 %3557
  %3572 = load double, ptr %3571, align 8, !tbaa !19
  %3573 = load ptr, ptr @_ZN20ComputeNonbondedUtil8r2_tableE, align 8, !tbaa !23
  %3574 = sext i32 %3566 to i64
  %3575 = getelementptr inbounds double, ptr %3573, i64 %3574
  %3576 = load double, ptr %3575, align 8, !tbaa !19
  %3577 = fsub double %3572, %3576
  %3578 = shl nsw i32 %3566, 4
  %3579 = sext i32 %3578 to i64
  %3580 = getelementptr inbounds double, ptr %31, i64 %3579
  %3581 = getelementptr inbounds %struct.CompAtom, ptr %107, i64 %3569, i32 2
  %3582 = load i16, ptr %3581, align 4, !tbaa !105
  %3583 = sext i16 %3582 to i32
  %3584 = shl nsw i32 %3583, 1
  %3585 = sext i32 %3584 to i64
  %3586 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %3085, i64 %3585
  %3587 = getelementptr inbounds %class.Vector, ptr %967, i64 %3569
  %3588 = getelementptr inbounds %struct.CompAtom, ptr %107, i64 %3569, i32 1
  %3589 = load float, ptr %3588, align 8, !tbaa !104
  %3590 = fpext float %3589 to double
  %3591 = fmul double %3076, %3590
  %3592 = getelementptr inbounds %class.Vector, ptr %3570, i64 0, i32 2
  %3593 = load double, ptr %3592, align 8, !tbaa !49
  %3594 = fsub double %1045, %3593
  %3595 = load double, ptr %3586, align 8, !tbaa !109
  %3596 = fmul double %32, %3595
  %3597 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %3085, i64 %3585, i32 1
  %3598 = load double, ptr %3597, align 8, !tbaa !111
  %3599 = fmul double %32, %3598
  %3600 = fsub double %3572, %35
  %3601 = getelementptr inbounds double, ptr %3580, i64 8
  %3602 = getelementptr inbounds double, ptr %3580, i64 9
  %3603 = getelementptr inbounds double, ptr %3580, i64 10
  %3604 = getelementptr inbounds double, ptr %3580, i64 11
  %3605 = load <2 x double>, ptr %3570, align 8, !tbaa !19
  %3606 = fsub <2 x double> %1042, %3605
  call void @_Z24fep_vdw_forceandenergiesdddddddddiidddPdS_S_(double noundef %3596, double noundef %3599, double noundef %3600, double noundef %84, double noundef %91, double noundef %39, double noundef %40, double noundef %82, double noundef %89, i32 noundef %47, i32 noundef %48, double noundef %49, double noundef %50, double noundef %44, ptr noundef nonnull %3, ptr noundef nonnull %4, ptr noundef nonnull %5)
  %3607 = load double, ptr %3, align 8, !tbaa !19
  %3608 = load double, ptr %5, align 8, !tbaa !19
  %3609 = insertelement <2 x double> poison, double %3608, i64 0
  %3610 = insertelement <2 x double> %3609, double %3607, i64 1
  %3611 = fadd <2 x double> %3561, %3610
  %3612 = load double, ptr %3601, align 8, !tbaa !19
  %3613 = load double, ptr %3602, align 8, !tbaa !19
  %3614 = load double, ptr %3603, align 8, !tbaa !19
  %3615 = load double, ptr %3604, align 8, !tbaa !19
  %3616 = fmul double %3591, %3612
  %3617 = fmul double %3591, %3613
  %3618 = fmul double %3591, %3614
  %3619 = fmul double %3591, %3615
  %3620 = fmul double %3577, %3616
  %3621 = fmul double %3617, 2.500000e-01
  %3622 = call double @llvm.fmuladd.f64(double %3620, double 0x3FC5555555555555, double %3621)
  %3623 = fmul double %3618, 5.000000e-01
  %3624 = call double @llvm.fmuladd.f64(double %3622, double %3577, double %3623)
  %3625 = call double @llvm.fmuladd.f64(double %3624, double %3577, double %3619)
  %3626 = insertelement <2 x double> poison, double %3625, i64 0
  %3627 = shufflevector <2 x double> %3626, <2 x double> poison, <2 x i32> zeroinitializer
  %3628 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %999, <2 x double> %3627, <2 x double> %3560)
  %3629 = call double @llvm.fmuladd.f64(double %3577, double %3616, double %3617)
  %3630 = call double @llvm.fmuladd.f64(double %3629, double %3577, double %3618)
  %3631 = fmul double %1005, %3630
  %3632 = load double, ptr %4, align 8, !tbaa !19
  %3633 = fadd double %3632, %3631
  %3634 = insertelement <2 x double> poison, double %3633, i64 0
  %3635 = shufflevector <2 x double> %3634, <2 x double> poison, <2 x i32> zeroinitializer
  %3636 = fmul <2 x double> %3606, %3635
  %3637 = fadd <2 x double> %3559, %3636
  %3638 = load <2 x double>, ptr %3587, align 8, !tbaa !19
  %3639 = fsub <2 x double> %3638, %3636
  store <2 x double> %3639, ptr %3587, align 8, !tbaa !19
  %3640 = fmul double %3594, %3633
  %3641 = fadd double %3558, %3640
  %3642 = getelementptr inbounds %class.Vector, ptr %967, i64 %3569, i32 2
  %3643 = load double, ptr %3642, align 8, !tbaa !112
  %3644 = fsub double %3643, %3640
  store double %3644, ptr %3642, align 8, !tbaa !112
  %3645 = add nuw nsw i64 %3557, 1
  %3646 = icmp eq i64 %3645, %3555
  br i1 %3646, label %3647, label %3556

3647:                                             ; preds = %3556, %3546
  %3648 = phi double [ %3547, %3546 ], [ %3641, %3556 ]
  %3649 = phi <2 x double> [ %3548, %3546 ], [ %3637, %3556 ]
  %3650 = phi <2 x double> [ %3549, %3546 ], [ %3628, %3556 ]
  %3651 = phi <2 x double> [ %3550, %3546 ], [ %3611, %3556 ]
  %3652 = load double, ptr @_ZN20ComputeNonbondedUtil7cutoff2E, align 8, !tbaa !19
  %3653 = call noundef i32 @_Z22pairlist_from_pairlistddddPK8CompAtomPKtiPtdPd(double noundef %3652, double noundef %3087, double noundef %3088, double noundef %1045, ptr noundef %107, ptr noundef %3056, i32 noundef %3057, ptr noundef %160, double noundef %35, ptr noundef %206)
  %3654 = add nsw i32 %3360, %3653
  %3655 = icmp sgt i32 %3653, 0
  br i1 %3655, label %3656, label %3762

3656:                                             ; preds = %3647
  %3657 = zext i32 %3653 to i64
  br label %3658

3658:                                             ; preds = %3656, %3658
  %3659 = phi i64 [ 0, %3656 ], [ %3760, %3658 ]
  %3660 = phi double [ %3648, %3656 ], [ %3756, %3658 ]
  %3661 = phi <2 x double> [ %3649, %3656 ], [ %3752, %3658 ]
  %3662 = phi <2 x double> [ %3650, %3656 ], [ %3743, %3658 ]
  %3663 = phi <2 x double> [ %3651, %3656 ], [ %3718, %3658 ]
  %3664 = shl nuw nsw i64 %3659, 1
  %3665 = getelementptr inbounds i32, ptr %207, i64 %3664
  %3666 = load i32, ptr %3665, align 4, !tbaa !5
  %3667 = ashr i32 %3666, 14
  %3668 = add nsw i32 %3667, %38
  %3669 = getelementptr inbounds i16, ptr %160, i64 %3659
  %3670 = load i16, ptr %3669, align 2, !tbaa !44
  %3671 = zext i16 %3670 to i64
  %3672 = getelementptr inbounds %struct.CompAtom, ptr %107, i64 %3671
  %3673 = getelementptr inbounds double, ptr %206, i64 %3659
  %3674 = load double, ptr %3673, align 8, !tbaa !19
  %3675 = load ptr, ptr @_ZN20ComputeNonbondedUtil8r2_tableE, align 8, !tbaa !23
  %3676 = sext i32 %3668 to i64
  %3677 = getelementptr inbounds double, ptr %3675, i64 %3676
  %3678 = load double, ptr %3677, align 8, !tbaa !19
  %3679 = fsub double %3674, %3678
  %3680 = shl nsw i32 %3668, 4
  %3681 = sext i32 %3680 to i64
  %3682 = getelementptr inbounds double, ptr %31, i64 %3681
  %3683 = getelementptr inbounds %struct.CompAtom, ptr %107, i64 %3671, i32 2
  %3684 = load i16, ptr %3683, align 4, !tbaa !105
  %3685 = sext i16 %3684 to i32
  %3686 = shl nsw i32 %3685, 1
  %3687 = sext i32 %3686 to i64
  %3688 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %3085, i64 %3687
  %3689 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %3688, i64 1
  %3690 = getelementptr inbounds %class.Vector, ptr %967, i64 %3671
  %3691 = getelementptr inbounds %struct.CompAtom, ptr %107, i64 %3671, i32 1
  %3692 = load float, ptr %3691, align 8, !tbaa !104
  %3693 = fpext float %3692 to double
  %3694 = fmul double %3076, %3693
  %3695 = getelementptr inbounds %class.Vector, ptr %3672, i64 0, i32 2
  %3696 = load double, ptr %3695, align 8, !tbaa !49
  %3697 = fsub double %1045, %3696
  %3698 = load double, ptr %3689, align 8, !tbaa !109
  %3699 = fmul double %32, %3698
  %3700 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %3688, i64 1, i32 1
  %3701 = load double, ptr %3700, align 8, !tbaa !111
  %3702 = fmul double %32, %3701
  %3703 = fsub double %3674, %35
  %3704 = getelementptr inbounds double, ptr %3682, i64 8
  %3705 = getelementptr inbounds double, ptr %3682, i64 9
  %3706 = getelementptr inbounds double, ptr %3682, i64 10
  %3707 = getelementptr inbounds double, ptr %3682, i64 11
  %3708 = getelementptr inbounds double, ptr %3682, i64 12
  %3709 = getelementptr inbounds double, ptr %3682, i64 13
  %3710 = getelementptr inbounds double, ptr %3682, i64 14
  %3711 = getelementptr inbounds double, ptr %3682, i64 15
  %3712 = load <2 x double>, ptr %3672, align 8, !tbaa !19
  %3713 = fsub <2 x double> %1042, %3712
  call void @_Z24fep_vdw_forceandenergiesdddddddddiidddPdS_S_(double noundef %3699, double noundef %3702, double noundef %3703, double noundef %58, double noundef %64, double noundef %39, double noundef %40, double noundef %55, double noundef %62, i32 noundef %47, i32 noundef %48, double noundef %49, double noundef %50, double noundef %44, ptr noundef nonnull %3, ptr noundef nonnull %4, ptr noundef nonnull %5)
  %3714 = load double, ptr %3, align 8, !tbaa !19
  %3715 = load double, ptr %5, align 8, !tbaa !19
  %3716 = insertelement <2 x double> poison, double %3715, i64 0
  %3717 = insertelement <2 x double> %3716, double %3714, i64 1
  %3718 = fadd <2 x double> %3663, %3717
  %3719 = load double, ptr %3704, align 8, !tbaa !19
  %3720 = load double, ptr %3705, align 8, !tbaa !19
  %3721 = load double, ptr %3706, align 8, !tbaa !19
  %3722 = load double, ptr %3707, align 8, !tbaa !19
  %3723 = load double, ptr %3708, align 8, !tbaa !19
  %3724 = call double @llvm.fmuladd.f64(double %997, double %3723, double %3719)
  %3725 = load double, ptr %3709, align 8, !tbaa !19
  %3726 = call double @llvm.fmuladd.f64(double %997, double %3725, double %3720)
  %3727 = load double, ptr %3710, align 8, !tbaa !19
  %3728 = call double @llvm.fmuladd.f64(double %997, double %3727, double %3721)
  %3729 = load double, ptr %3711, align 8, !tbaa !19
  %3730 = call double @llvm.fmuladd.f64(double %997, double %3729, double %3722)
  %3731 = fmul double %3694, %3724
  %3732 = fmul double %3694, %3726
  %3733 = fmul double %3694, %3728
  %3734 = fmul double %3694, %3730
  %3735 = fmul double %3679, %3731
  %3736 = fmul double %3732, 2.500000e-01
  %3737 = call double @llvm.fmuladd.f64(double %3735, double 0x3FC5555555555555, double %3736)
  %3738 = fmul double %3733, 5.000000e-01
  %3739 = call double @llvm.fmuladd.f64(double %3737, double %3679, double %3738)
  %3740 = call double @llvm.fmuladd.f64(double %3739, double %3679, double %3734)
  %3741 = insertelement <2 x double> poison, double %3740, i64 0
  %3742 = shufflevector <2 x double> %3741, <2 x double> poison, <2 x i32> zeroinitializer
  %3743 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %998, <2 x double> %3742, <2 x double> %3662)
  %3744 = call double @llvm.fmuladd.f64(double %3679, double %3731, double %3732)
  %3745 = call double @llvm.fmuladd.f64(double %3744, double %3679, double %3733)
  %3746 = fmul double %1006, %3745
  %3747 = load double, ptr %4, align 8, !tbaa !19
  %3748 = fadd double %3747, %3746
  %3749 = insertelement <2 x double> poison, double %3748, i64 0
  %3750 = shufflevector <2 x double> %3749, <2 x double> poison, <2 x i32> zeroinitializer
  %3751 = fmul <2 x double> %3713, %3750
  %3752 = fadd <2 x double> %3661, %3751
  %3753 = load <2 x double>, ptr %3690, align 8, !tbaa !19
  %3754 = fsub <2 x double> %3753, %3751
  store <2 x double> %3754, ptr %3690, align 8, !tbaa !19
  %3755 = fmul double %3697, %3748
  %3756 = fadd double %3660, %3755
  %3757 = getelementptr inbounds %class.Vector, ptr %967, i64 %3671, i32 2
  %3758 = load double, ptr %3757, align 8, !tbaa !112
  %3759 = fsub double %3758, %3755
  store double %3759, ptr %3757, align 8, !tbaa !112
  %3760 = add nuw nsw i64 %3659, 1
  %3761 = icmp eq i64 %3760, %3657
  br i1 %3761, label %3762, label %3658

3762:                                             ; preds = %3658, %3647
  %3763 = phi double [ %3648, %3647 ], [ %3756, %3658 ]
  %3764 = phi <2 x double> [ %3649, %3647 ], [ %3752, %3658 ]
  %3765 = phi <2 x double> [ %3650, %3647 ], [ %3743, %3658 ]
  %3766 = phi <2 x double> [ %3651, %3647 ], [ %3718, %3658 ]
  %3767 = load double, ptr @_ZN20ComputeNonbondedUtil7cutoff2E, align 8, !tbaa !19
  %3768 = call noundef i32 @_Z22pairlist_from_pairlistddddPK8CompAtomPKtiPtdPd(double noundef %3767, double noundef %3087, double noundef %3088, double noundef %1045, ptr noundef %107, ptr noundef %3062, i32 noundef %3063, ptr noundef %160, double noundef %35, ptr noundef %206)
  %3769 = add nsw i32 %3654, %3768
  %3770 = icmp sgt i32 %3768, 0
  br i1 %3770, label %3771, label %3877

3771:                                             ; preds = %3762
  %3772 = zext i32 %3768 to i64
  br label %3773

3773:                                             ; preds = %3771, %3773
  %3774 = phi i64 [ 0, %3771 ], [ %3875, %3773 ]
  %3775 = phi double [ %3763, %3771 ], [ %3871, %3773 ]
  %3776 = phi <2 x double> [ %3764, %3771 ], [ %3867, %3773 ]
  %3777 = phi <2 x double> [ %3765, %3771 ], [ %3858, %3773 ]
  %3778 = phi <2 x double> [ %3766, %3771 ], [ %3833, %3773 ]
  %3779 = shl nuw nsw i64 %3774, 1
  %3780 = getelementptr inbounds i32, ptr %207, i64 %3779
  %3781 = load i32, ptr %3780, align 4, !tbaa !5
  %3782 = ashr i32 %3781, 14
  %3783 = add nsw i32 %3782, %38
  %3784 = getelementptr inbounds i16, ptr %160, i64 %3774
  %3785 = load i16, ptr %3784, align 2, !tbaa !44
  %3786 = zext i16 %3785 to i64
  %3787 = getelementptr inbounds %struct.CompAtom, ptr %107, i64 %3786
  %3788 = getelementptr inbounds double, ptr %206, i64 %3774
  %3789 = load double, ptr %3788, align 8, !tbaa !19
  %3790 = load ptr, ptr @_ZN20ComputeNonbondedUtil8r2_tableE, align 8, !tbaa !23
  %3791 = sext i32 %3783 to i64
  %3792 = getelementptr inbounds double, ptr %3790, i64 %3791
  %3793 = load double, ptr %3792, align 8, !tbaa !19
  %3794 = fsub double %3789, %3793
  %3795 = shl nsw i32 %3783, 4
  %3796 = sext i32 %3795 to i64
  %3797 = getelementptr inbounds double, ptr %31, i64 %3796
  %3798 = getelementptr inbounds %struct.CompAtom, ptr %107, i64 %3786, i32 2
  %3799 = load i16, ptr %3798, align 4, !tbaa !105
  %3800 = sext i16 %3799 to i32
  %3801 = shl nsw i32 %3800, 1
  %3802 = sext i32 %3801 to i64
  %3803 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %3085, i64 %3802
  %3804 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %3803, i64 1
  %3805 = getelementptr inbounds %class.Vector, ptr %967, i64 %3786
  %3806 = getelementptr inbounds %struct.CompAtom, ptr %107, i64 %3786, i32 1
  %3807 = load float, ptr %3806, align 8, !tbaa !104
  %3808 = fpext float %3807 to double
  %3809 = fmul double %3076, %3808
  %3810 = getelementptr inbounds %class.Vector, ptr %3787, i64 0, i32 2
  %3811 = load double, ptr %3810, align 8, !tbaa !49
  %3812 = fsub double %1045, %3811
  %3813 = load double, ptr %3804, align 8, !tbaa !109
  %3814 = fmul double %32, %3813
  %3815 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %3803, i64 1, i32 1
  %3816 = load double, ptr %3815, align 8, !tbaa !111
  %3817 = fmul double %32, %3816
  %3818 = fsub double %3789, %35
  %3819 = getelementptr inbounds double, ptr %3797, i64 8
  %3820 = getelementptr inbounds double, ptr %3797, i64 9
  %3821 = getelementptr inbounds double, ptr %3797, i64 10
  %3822 = getelementptr inbounds double, ptr %3797, i64 11
  %3823 = getelementptr inbounds double, ptr %3797, i64 12
  %3824 = getelementptr inbounds double, ptr %3797, i64 13
  %3825 = getelementptr inbounds double, ptr %3797, i64 14
  %3826 = getelementptr inbounds double, ptr %3797, i64 15
  %3827 = load <2 x double>, ptr %3787, align 8, !tbaa !19
  %3828 = fsub <2 x double> %1042, %3827
  call void @_Z24fep_vdw_forceandenergiesdddddddddiidddPdS_S_(double noundef %3814, double noundef %3817, double noundef %3818, double noundef %84, double noundef %91, double noundef %39, double noundef %40, double noundef %82, double noundef %89, i32 noundef %47, i32 noundef %48, double noundef %49, double noundef %50, double noundef %44, ptr noundef nonnull %3, ptr noundef nonnull %4, ptr noundef nonnull %5)
  %3829 = load double, ptr %3, align 8, !tbaa !19
  %3830 = load double, ptr %5, align 8, !tbaa !19
  %3831 = insertelement <2 x double> poison, double %3830, i64 0
  %3832 = insertelement <2 x double> %3831, double %3829, i64 1
  %3833 = fadd <2 x double> %3778, %3832
  %3834 = load double, ptr %3819, align 8, !tbaa !19
  %3835 = load double, ptr %3820, align 8, !tbaa !19
  %3836 = load double, ptr %3821, align 8, !tbaa !19
  %3837 = load double, ptr %3822, align 8, !tbaa !19
  %3838 = load double, ptr %3823, align 8, !tbaa !19
  %3839 = call double @llvm.fmuladd.f64(double %997, double %3838, double %3834)
  %3840 = load double, ptr %3824, align 8, !tbaa !19
  %3841 = call double @llvm.fmuladd.f64(double %997, double %3840, double %3835)
  %3842 = load double, ptr %3825, align 8, !tbaa !19
  %3843 = call double @llvm.fmuladd.f64(double %997, double %3842, double %3836)
  %3844 = load double, ptr %3826, align 8, !tbaa !19
  %3845 = call double @llvm.fmuladd.f64(double %997, double %3844, double %3837)
  %3846 = fmul double %3809, %3839
  %3847 = fmul double %3809, %3841
  %3848 = fmul double %3809, %3843
  %3849 = fmul double %3809, %3845
  %3850 = fmul double %3794, %3846
  %3851 = fmul double %3847, 2.500000e-01
  %3852 = call double @llvm.fmuladd.f64(double %3850, double 0x3FC5555555555555, double %3851)
  %3853 = fmul double %3848, 5.000000e-01
  %3854 = call double @llvm.fmuladd.f64(double %3852, double %3794, double %3853)
  %3855 = call double @llvm.fmuladd.f64(double %3854, double %3794, double %3849)
  %3856 = insertelement <2 x double> poison, double %3855, i64 0
  %3857 = shufflevector <2 x double> %3856, <2 x double> poison, <2 x i32> zeroinitializer
  %3858 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %999, <2 x double> %3857, <2 x double> %3777)
  %3859 = call double @llvm.fmuladd.f64(double %3794, double %3846, double %3847)
  %3860 = call double @llvm.fmuladd.f64(double %3859, double %3794, double %3848)
  %3861 = fmul double %1007, %3860
  %3862 = load double, ptr %4, align 8, !tbaa !19
  %3863 = fadd double %3862, %3861
  %3864 = insertelement <2 x double> poison, double %3863, i64 0
  %3865 = shufflevector <2 x double> %3864, <2 x double> poison, <2 x i32> zeroinitializer
  %3866 = fmul <2 x double> %3828, %3865
  %3867 = fadd <2 x double> %3776, %3866
  %3868 = load <2 x double>, ptr %3805, align 8, !tbaa !19
  %3869 = fsub <2 x double> %3868, %3866
  store <2 x double> %3869, ptr %3805, align 8, !tbaa !19
  %3870 = fmul double %3812, %3863
  %3871 = fadd double %3775, %3870
  %3872 = getelementptr inbounds %class.Vector, ptr %967, i64 %3786, i32 2
  %3873 = load double, ptr %3872, align 8, !tbaa !112
  %3874 = fsub double %3873, %3870
  store double %3874, ptr %3872, align 8, !tbaa !112
  %3875 = add nuw nsw i64 %3774, 1
  %3876 = icmp eq i64 %3875, %3772
  br i1 %3876, label %3877, label %3773

3877:                                             ; preds = %3773, %3762
  %3878 = phi double [ %3763, %3762 ], [ %3871, %3773 ]
  %3879 = phi <2 x double> [ %3764, %3762 ], [ %3867, %3773 ]
  %3880 = phi <2 x double> [ %3765, %3762 ], [ %3858, %3773 ]
  %3881 = phi <2 x double> [ %3766, %3762 ], [ %3833, %3773 ]
  %3882 = load double, ptr @_ZN20ComputeNonbondedUtil7cutoff2E, align 8, !tbaa !19
  %3883 = call noundef i32 @_Z22pairlist_from_pairlistddddPK8CompAtomPKtiPtdPd(double noundef %3882, double noundef %3087, double noundef %3088, double noundef %1045, ptr noundef %107, ptr noundef %3054, i32 noundef %3055, ptr noundef %160, double noundef %35, ptr noundef %206)
  %3884 = add nsw i32 %3769, %3883
  %3885 = icmp sgt i32 %3883, 0
  br i1 %3885, label %3886, label %3971

3886:                                             ; preds = %3877
  %3887 = load ptr, ptr @_ZN20ComputeNonbondedUtil8r2_tableE, align 8, !tbaa !23
  %3888 = zext i32 %3883 to i64
  br label %3889

3889:                                             ; preds = %3886, %3889
  %3890 = phi i64 [ 0, %3886 ], [ %3969, %3889 ]
  %3891 = phi double [ %3878, %3886 ], [ %3965, %3889 ]
  %3892 = phi <2 x double> [ %3879, %3886 ], [ %3961, %3889 ]
  %3893 = phi <2 x double> [ %3880, %3886 ], [ %3952, %3889 ]
  %3894 = shl nuw nsw i64 %3890, 1
  %3895 = getelementptr inbounds i32, ptr %207, i64 %3894
  %3896 = load i32, ptr %3895, align 4, !tbaa !5
  %3897 = ashr i32 %3896, 14
  %3898 = add nsw i32 %3897, %38
  %3899 = getelementptr inbounds i16, ptr %160, i64 %3890
  %3900 = load i16, ptr %3899, align 2, !tbaa !44
  %3901 = zext i16 %3900 to i64
  %3902 = getelementptr inbounds %struct.CompAtom, ptr %107, i64 %3901
  %3903 = getelementptr inbounds double, ptr %206, i64 %3890
  %3904 = load double, ptr %3903, align 8, !tbaa !19
  %3905 = sext i32 %3898 to i64
  %3906 = getelementptr inbounds double, ptr %3887, i64 %3905
  %3907 = load double, ptr %3906, align 8, !tbaa !19
  %3908 = fsub double %3904, %3907
  %3909 = shl nsw i32 %3898, 4
  %3910 = sext i32 %3909 to i64
  %3911 = getelementptr inbounds double, ptr %31, i64 %3910
  %3912 = getelementptr inbounds %class.Vector, ptr %967, i64 %3901
  %3913 = getelementptr inbounds %struct.CompAtom, ptr %107, i64 %3901, i32 1
  %3914 = load float, ptr %3913, align 8, !tbaa !104
  %3915 = fpext float %3914 to double
  %3916 = fmul double %3076, %3915
  %3917 = getelementptr inbounds %class.Vector, ptr %3902, i64 0, i32 2
  %3918 = load double, ptr %3917, align 8, !tbaa !49
  %3919 = fsub double %1045, %3918
  %3920 = getelementptr inbounds double, ptr %3911, i64 8
  %3921 = load double, ptr %3920, align 8, !tbaa !19
  %3922 = getelementptr inbounds double, ptr %3911, i64 9
  %3923 = load double, ptr %3922, align 8, !tbaa !19
  %3924 = getelementptr inbounds double, ptr %3911, i64 10
  %3925 = load double, ptr %3924, align 8, !tbaa !19
  %3926 = getelementptr inbounds double, ptr %3911, i64 11
  %3927 = load double, ptr %3926, align 8, !tbaa !19
  %3928 = getelementptr inbounds double, ptr %3911, i64 12
  %3929 = load double, ptr %3928, align 8, !tbaa !19
  %3930 = fsub double %3921, %3929
  %3931 = getelementptr inbounds double, ptr %3911, i64 13
  %3932 = load double, ptr %3931, align 8, !tbaa !19
  %3933 = fsub double %3923, %3932
  %3934 = getelementptr inbounds double, ptr %3911, i64 14
  %3935 = load double, ptr %3934, align 8, !tbaa !19
  %3936 = fsub double %3925, %3935
  %3937 = getelementptr inbounds double, ptr %3911, i64 15
  %3938 = load double, ptr %3937, align 8, !tbaa !19
  %3939 = fsub double %3927, %3938
  %3940 = fmul double %3916, %3930
  %3941 = fmul double %3916, %3933
  %3942 = fmul double %3916, %3936
  %3943 = fmul double %3916, %3939
  %3944 = fmul double %3908, %3940
  %3945 = fmul double %3941, 2.500000e-01
  %3946 = call double @llvm.fmuladd.f64(double %3944, double 0x3FC5555555555555, double %3945)
  %3947 = fmul double %3942, 5.000000e-01
  %3948 = call double @llvm.fmuladd.f64(double %3946, double %3908, double %3947)
  %3949 = call double @llvm.fmuladd.f64(double %3948, double %3908, double %3943)
  %3950 = insertelement <2 x double> poison, double %3949, i64 0
  %3951 = shufflevector <2 x double> %3950, <2 x double> poison, <2 x i32> zeroinitializer
  %3952 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %998, <2 x double> %3951, <2 x double> %3893)
  %3953 = call double @llvm.fmuladd.f64(double %3908, double %3940, double %3941)
  %3954 = call double @llvm.fmuladd.f64(double %3953, double %3908, double %3942)
  %3955 = fmul double %1008, %3954
  %3956 = load <2 x double>, ptr %3902, align 8, !tbaa !19
  %3957 = fsub <2 x double> %1042, %3956
  %3958 = insertelement <2 x double> poison, double %3955, i64 0
  %3959 = shufflevector <2 x double> %3958, <2 x double> poison, <2 x i32> zeroinitializer
  %3960 = fmul <2 x double> %3957, %3959
  %3961 = fadd <2 x double> %3892, %3960
  %3962 = load <2 x double>, ptr %3912, align 8, !tbaa !19
  %3963 = fsub <2 x double> %3962, %3960
  store <2 x double> %3963, ptr %3912, align 8, !tbaa !19
  %3964 = fmul double %3919, %3955
  %3965 = fadd double %3891, %3964
  %3966 = getelementptr inbounds %class.Vector, ptr %967, i64 %3901, i32 2
  %3967 = load double, ptr %3966, align 8, !tbaa !112
  %3968 = fsub double %3967, %3964
  store double %3968, ptr %3966, align 8, !tbaa !112
  %3969 = add nuw nsw i64 %3890, 1
  %3970 = icmp eq i64 %3969, %3888
  br i1 %3970, label %3971, label %3889

3971:                                             ; preds = %3889, %3877
  %3972 = phi double [ %3878, %3877 ], [ %3965, %3889 ]
  %3973 = phi <2 x double> [ %3879, %3877 ], [ %3961, %3889 ]
  %3974 = phi <2 x double> [ %3880, %3877 ], [ %3952, %3889 ]
  %3975 = load double, ptr @_ZN20ComputeNonbondedUtil7cutoff2E, align 8, !tbaa !19
  %3976 = call noundef i32 @_Z22pairlist_from_pairlistddddPK8CompAtomPKtiPtdPd(double noundef %3975, double noundef %3087, double noundef %3088, double noundef %1045, ptr noundef %107, ptr noundef %3060, i32 noundef %3061, ptr noundef %160, double noundef %35, ptr noundef %206)
  %3977 = add nsw i32 %3884, %3976
  %3978 = icmp sgt i32 %3976, 0
  br i1 %3978, label %3979, label %4064

3979:                                             ; preds = %3971
  %3980 = load ptr, ptr @_ZN20ComputeNonbondedUtil8r2_tableE, align 8, !tbaa !23
  %3981 = zext i32 %3976 to i64
  br label %3982

3982:                                             ; preds = %3979, %3982
  %3983 = phi i64 [ 0, %3979 ], [ %4062, %3982 ]
  %3984 = phi double [ %3972, %3979 ], [ %4058, %3982 ]
  %3985 = phi <2 x double> [ %3973, %3979 ], [ %4054, %3982 ]
  %3986 = phi <2 x double> [ %3974, %3979 ], [ %4045, %3982 ]
  %3987 = shl nuw nsw i64 %3983, 1
  %3988 = getelementptr inbounds i32, ptr %207, i64 %3987
  %3989 = load i32, ptr %3988, align 4, !tbaa !5
  %3990 = ashr i32 %3989, 14
  %3991 = add nsw i32 %3990, %38
  %3992 = getelementptr inbounds i16, ptr %160, i64 %3983
  %3993 = load i16, ptr %3992, align 2, !tbaa !44
  %3994 = zext i16 %3993 to i64
  %3995 = getelementptr inbounds %struct.CompAtom, ptr %107, i64 %3994
  %3996 = getelementptr inbounds double, ptr %206, i64 %3983
  %3997 = load double, ptr %3996, align 8, !tbaa !19
  %3998 = sext i32 %3991 to i64
  %3999 = getelementptr inbounds double, ptr %3980, i64 %3998
  %4000 = load double, ptr %3999, align 8, !tbaa !19
  %4001 = fsub double %3997, %4000
  %4002 = shl nsw i32 %3991, 4
  %4003 = sext i32 %4002 to i64
  %4004 = getelementptr inbounds double, ptr %31, i64 %4003
  %4005 = getelementptr inbounds %class.Vector, ptr %967, i64 %3994
  %4006 = getelementptr inbounds %struct.CompAtom, ptr %107, i64 %3994, i32 1
  %4007 = load float, ptr %4006, align 8, !tbaa !104
  %4008 = fpext float %4007 to double
  %4009 = fmul double %3076, %4008
  %4010 = getelementptr inbounds %class.Vector, ptr %3995, i64 0, i32 2
  %4011 = load double, ptr %4010, align 8, !tbaa !49
  %4012 = fsub double %1045, %4011
  %4013 = getelementptr inbounds double, ptr %4004, i64 8
  %4014 = load double, ptr %4013, align 8, !tbaa !19
  %4015 = getelementptr inbounds double, ptr %4004, i64 9
  %4016 = load double, ptr %4015, align 8, !tbaa !19
  %4017 = getelementptr inbounds double, ptr %4004, i64 10
  %4018 = load double, ptr %4017, align 8, !tbaa !19
  %4019 = getelementptr inbounds double, ptr %4004, i64 11
  %4020 = load double, ptr %4019, align 8, !tbaa !19
  %4021 = getelementptr inbounds double, ptr %4004, i64 12
  %4022 = load double, ptr %4021, align 8, !tbaa !19
  %4023 = fsub double %4014, %4022
  %4024 = getelementptr inbounds double, ptr %4004, i64 13
  %4025 = load double, ptr %4024, align 8, !tbaa !19
  %4026 = fsub double %4016, %4025
  %4027 = getelementptr inbounds double, ptr %4004, i64 14
  %4028 = load double, ptr %4027, align 8, !tbaa !19
  %4029 = fsub double %4018, %4028
  %4030 = getelementptr inbounds double, ptr %4004, i64 15
  %4031 = load double, ptr %4030, align 8, !tbaa !19
  %4032 = fsub double %4020, %4031
  %4033 = fmul double %4009, %4023
  %4034 = fmul double %4009, %4026
  %4035 = fmul double %4009, %4029
  %4036 = fmul double %4009, %4032
  %4037 = fmul double %4001, %4033
  %4038 = fmul double %4034, 2.500000e-01
  %4039 = call double @llvm.fmuladd.f64(double %4037, double 0x3FC5555555555555, double %4038)
  %4040 = fmul double %4035, 5.000000e-01
  %4041 = call double @llvm.fmuladd.f64(double %4039, double %4001, double %4040)
  %4042 = call double @llvm.fmuladd.f64(double %4041, double %4001, double %4036)
  %4043 = insertelement <2 x double> poison, double %4042, i64 0
  %4044 = shufflevector <2 x double> %4043, <2 x double> poison, <2 x i32> zeroinitializer
  %4045 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %999, <2 x double> %4044, <2 x double> %3986)
  %4046 = call double @llvm.fmuladd.f64(double %4001, double %4033, double %4034)
  %4047 = call double @llvm.fmuladd.f64(double %4046, double %4001, double %4035)
  %4048 = fmul double %1009, %4047
  %4049 = load <2 x double>, ptr %3995, align 8, !tbaa !19
  %4050 = fsub <2 x double> %1042, %4049
  %4051 = insertelement <2 x double> poison, double %4048, i64 0
  %4052 = shufflevector <2 x double> %4051, <2 x double> poison, <2 x i32> zeroinitializer
  %4053 = fmul <2 x double> %4050, %4052
  %4054 = fadd <2 x double> %3985, %4053
  %4055 = load <2 x double>, ptr %4005, align 8, !tbaa !19
  %4056 = fsub <2 x double> %4055, %4053
  store <2 x double> %4056, ptr %4005, align 8, !tbaa !19
  %4057 = fmul double %4012, %4048
  %4058 = fadd double %3984, %4057
  %4059 = getelementptr inbounds %class.Vector, ptr %967, i64 %3994, i32 2
  %4060 = load double, ptr %4059, align 8, !tbaa !112
  %4061 = fsub double %4060, %4057
  store double %4061, ptr %4059, align 8, !tbaa !112
  %4062 = add nuw nsw i64 %3983, 1
  %4063 = icmp eq i64 %4062, %3981
  br i1 %4063, label %4064, label %3982

4064:                                             ; preds = %3982, %3971
  %4065 = phi double [ %3972, %3971 ], [ %4058, %3982 ]
  %4066 = phi <2 x double> [ %3973, %3971 ], [ %4054, %3982 ]
  %4067 = phi <2 x double> [ %3974, %3971 ], [ %4045, %3982 ]
  %4068 = getelementptr inbounds %class.Vector, ptr %967, i64 %1024
  %4069 = load <2 x double>, ptr %4068, align 8, !tbaa !19
  %4070 = fadd <2 x double> %4066, %4069
  store <2 x double> %4070, ptr %4068, align 8, !tbaa !19
  %4071 = getelementptr inbounds %class.Vector, ptr %967, i64 %1024, i32 2
  %4072 = load double, ptr %4071, align 8, !tbaa !112
  %4073 = fadd double %4065, %4072
  store double %4073, ptr %4071, align 8, !tbaa !112
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %5) #11
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %4) #11
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %3) #11
  %4074 = shufflevector <2 x double> %4067, <2 x double> poison, <2 x i32> <i32 1, i32 poison>
  %4075 = shufflevector <2 x double> %4074, <2 x double> %3881, <2 x i32> <i32 0, i32 3>
  %4076 = shufflevector <2 x double> %4067, <2 x double> %3881, <2 x i32> <i32 0, i32 2>
  br label %4077

4077:                                             ; preds = %4064, %1035
  %4078 = phi i32 [ %1036, %1035 ], [ %1040, %4064 ]
  %4079 = phi i32 [ %1020, %1035 ], [ %3064, %4064 ]
  %4080 = phi i32 [ %1019, %1035 ], [ %3065, %4064 ]
  %4081 = phi i32 [ %1018, %1035 ], [ %3066, %4064 ]
  %4082 = phi i32 [ %1017, %1035 ], [ %3067, %4064 ]
  %4083 = phi i32 [ %1016, %1035 ], [ %1050, %4064 ]
  %4084 = phi ptr [ %1015, %1035 ], [ %3068, %4064 ]
  %4085 = phi ptr [ %1014, %1035 ], [ %3069, %4064 ]
  %4086 = phi ptr [ %1013, %1035 ], [ %3070, %4064 ]
  %4087 = phi i32 [ %1038, %1035 ], [ %1012, %4064 ]
  %4088 = phi i32 [ %1011, %1035 ], [ %3977, %4064 ]
  %4089 = phi <2 x double> [ %1022, %1035 ], [ %4075, %4064 ]
  %4090 = phi <2 x double> [ %1023, %1035 ], [ %4076, %4064 ]
  %4091 = add nsw i32 %4087, 1
  %4092 = icmp slt i32 %4091, %973
  br i1 %4092, label %1010, label %4093

4093:                                             ; preds = %4077, %961
  %4094 = phi ptr [ null, %961 ], [ %4086, %4077 ]
  %4095 = phi i32 [ 0, %961 ], [ %4088, %4077 ]
  %4096 = phi <2 x double> [ zeroinitializer, %961 ], [ %4089, %4077 ]
  %4097 = phi <2 x double> [ zeroinitializer, %961 ], [ %4090, %4077 ]
  %4098 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 4
  %4099 = load ptr, ptr %4098, align 8, !tbaa !23
  %4100 = icmp sgt i32 %102, 0
  br i1 %4100, label %4101, label %4103

4101:                                             ; preds = %4093
  %4102 = zext i32 %102 to i64
  br label %4132

4103:                                             ; preds = %4132, %4093
  %4104 = phi <4 x double> [ zeroinitializer, %4093 ], [ %4162, %4132 ]
  %4105 = phi <2 x double> [ zeroinitializer, %4093 ], [ %4157, %4132 ]
  %4106 = sitofp i32 %4095 to double
  %4107 = getelementptr inbounds double, ptr %10, i64 22
  %4108 = load double, ptr %4107, align 8, !tbaa !19
  %4109 = fadd double %4108, %4106
  store double %4109, ptr %4107, align 8, !tbaa !19
  %4110 = getelementptr inbounds double, ptr %10, i64 1
  %4111 = load <2 x double>, ptr %4110, align 8, !tbaa !19
  %4112 = fadd <2 x double> %4096, %4111
  store <2 x double> %4112, ptr %4110, align 8, !tbaa !19
  %4113 = getelementptr inbounds double, ptr %10, i64 24
  %4114 = load <2 x double>, ptr %4113, align 8, !tbaa !19
  %4115 = fadd <2 x double> %4097, %4114
  store <2 x double> %4115, ptr %4113, align 8, !tbaa !19
  %4116 = getelementptr inbounds double, ptr %10, i64 12
  %4117 = load <4 x double>, ptr %4116, align 8, !tbaa !19
  %4118 = shufflevector <2 x double> %4105, <2 x double> poison, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>
  %4119 = shufflevector <4 x double> %4118, <4 x double> %4104, <4 x i32> <i32 0, i32 1, i32 7, i32 poison>
  %4120 = shufflevector <4 x double> %4119, <4 x double> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 1>
  %4121 = fadd <4 x double> %4120, %4117
  store <4 x double> %4121, ptr %4116, align 8, !tbaa !19
  %4122 = getelementptr inbounds double, ptr %10, i64 16
  %4123 = load <4 x double>, ptr %4122, align 8, !tbaa !19
  %4124 = shufflevector <4 x double> %4104, <4 x double> poison, <4 x i32> <i32 2, i32 1, i32 3, i32 poison>
  %4125 = shufflevector <4 x double> %4124, <4 x double> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 1>
  %4126 = fadd <4 x double> %4125, %4123
  store <4 x double> %4126, ptr %4122, align 8, !tbaa !19
  %4127 = getelementptr inbounds double, ptr %10, i64 20
  %4128 = load double, ptr %4127, align 8, !tbaa !19
  %4129 = extractelement <4 x double> %4104, i64 0
  %4130 = fadd double %4129, %4128
  store double %4130, ptr %4127, align 8, !tbaa !19
  %4131 = icmp eq ptr %4094, null
  br i1 %4131, label %4166, label %4165

4132:                                             ; preds = %4101, %4132
  %4133 = phi i64 [ 0, %4101 ], [ %4163, %4132 ]
  %4134 = phi <4 x double> [ zeroinitializer, %4101 ], [ %4162, %4132 ]
  %4135 = phi <2 x double> [ zeroinitializer, %4101 ], [ %4157, %4132 ]
  %4136 = getelementptr inbounds %class.Vector, ptr %967, i64 %4133
  %4137 = getelementptr inbounds %class.Vector, ptr %4099, i64 %4133
  %4138 = getelementptr inbounds %class.Vector, ptr %967, i64 %4133, i32 1
  %4139 = load <2 x double>, ptr %4136, align 8, !tbaa !19
  %4140 = load <2 x double>, ptr %4137, align 8, !tbaa !19
  %4141 = fadd <2 x double> %4139, %4140
  store <2 x double> %4141, ptr %4137, align 8, !tbaa !19
  %4142 = getelementptr inbounds %class.Vector, ptr %967, i64 %4133, i32 2
  %4143 = load double, ptr %4142, align 8, !tbaa !112
  %4144 = getelementptr inbounds %class.Vector, ptr %4099, i64 %4133, i32 2
  %4145 = load double, ptr %4144, align 8, !tbaa !112
  %4146 = fadd double %4143, %4145
  store double %4146, ptr %4144, align 8, !tbaa !112
  %4147 = load double, ptr %4136, align 8, !tbaa !304
  %4148 = getelementptr inbounds %struct.CompAtom, ptr %105, i64 %4133
  %4149 = load double, ptr %4148, align 8, !tbaa !68
  %4150 = getelementptr inbounds %class.Vector, ptr %4148, i64 0, i32 1
  %4151 = load <2 x double>, ptr %4150, align 8, !tbaa !19
  %4152 = shufflevector <2 x double> %4151, <2 x double> poison, <4 x i32> <i32 1, i32 1, i32 0, i32 1>
  %4153 = insertelement <2 x double> poison, double %4147, i64 0
  %4154 = shufflevector <2 x double> %4153, <2 x double> poison, <2 x i32> zeroinitializer
  %4155 = shufflevector <2 x double> %4151, <2 x double> poison, <2 x i32> <i32 poison, i32 0>
  %4156 = insertelement <2 x double> %4155, double %4149, i64 0
  %4157 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %4154, <2 x double> %4156, <2 x double> %4135)
  %4158 = load <2 x double>, ptr %4138, align 8, !tbaa !19
  %4159 = shufflevector <2 x double> %4158, <2 x double> poison, <4 x i32> <i32 1, i32 0, i32 poison, i32 poison>
  %4160 = insertelement <4 x double> %4159, double %4147, i64 3
  %4161 = shufflevector <4 x double> %4160, <4 x double> poison, <4 x i32> <i32 0, i32 1, i32 1, i32 3>
  %4162 = call <4 x double> @llvm.fmuladd.v4f64(<4 x double> %4161, <4 x double> %4152, <4 x double> %4134)
  %4163 = add nuw nsw i64 %4133, 1
  %4164 = icmp eq i64 %4163, %4102
  br i1 %4164, label %4103, label %4132

4165:                                             ; preds = %4103
  call void @_ZdaPv(ptr noundef nonnull %4094) #13
  br label %4166

4166:                                             ; preds = %4165, %4103
  call void @llvm.lifetime.end.p0(i64 36, ptr nonnull %2) #11
  br label %4167

4167:                                             ; preds = %1, %4166
  ret void
}

; Function Attrs: sspstrong uwtable
define dso_local void @_ZN20ComputeNonbondedUtil35calc_self_energy_slow_fullelect_fepEP9nonbonded(ptr nocapture noundef readonly %0) local_unnamed_addr #0 align 2 {
  %2 = alloca [9 x i32], align 16
  %3 = load i32, ptr @_ZN20ComputeNonbondedUtil8commOnlyE, align 4, !tbaa !5
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %5, label %3943

5:                                                ; preds = %1
  %6 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 7
  %7 = load ptr, ptr %6, align 8, !tbaa !9
  %8 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 10
  %9 = load ptr, ptr %8, align 8, !tbaa !14
  %10 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 11
  %11 = load i32, ptr %10, align 8, !tbaa !15
  %12 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 12
  %13 = load i32, ptr %12, align 4, !tbaa !16
  %14 = getelementptr inbounds %class.Pairlists, ptr %9, i64 0, i32 1
  store i32 0, ptr %14, align 8, !tbaa !17
  %15 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 6
  %16 = load <2 x double>, ptr %15, align 8, !tbaa !19
  %17 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 6, i32 2
  %18 = load double, ptr %17, align 8, !tbaa !20
  %19 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 13
  %20 = load double, ptr %19, align 8, !tbaa !21
  %21 = fmul double %20, %20
  %22 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 14
  %23 = load double, ptr %22, align 8, !tbaa !22
  %24 = fmul double %23, %23
  %25 = load double, ptr @_ZN20ComputeNonbondedUtil12dielectric_1E, align 8, !tbaa !19
  %26 = load ptr, ptr @_ZN20ComputeNonbondedUtil3molE, align 8, !tbaa !23
  %27 = load ptr, ptr @_ZN20ComputeNonbondedUtil11table_shortE, align 8, !tbaa !23
  %28 = load ptr, ptr @_ZN20ComputeNonbondedUtil10slow_tableE, align 8, !tbaa !23
  %29 = load double, ptr @_ZN20ComputeNonbondedUtil7scalingE, align 8, !tbaa !19
  %30 = load double, ptr @_ZN20ComputeNonbondedUtil7scale14E, align 8, !tbaa !19
  %31 = fsub double 1.000000e+00, %30
  %32 = load double, ptr @_ZN20ComputeNonbondedUtil8r2_deltaE, align 8, !tbaa !19
  %33 = load i32, ptr @_ZN20ComputeNonbondedUtil12r2_delta_expE, align 4, !tbaa !5
  %34 = shl i32 %33, 6
  %35 = add i32 %34, -65472
  %36 = load double, ptr @_ZN20ComputeNonbondedUtil19alchElecLambdaStartE, align 8, !tbaa !19
  %37 = load double, ptr @_ZN20ComputeNonbondedUtil10alchLambdaE, align 8, !tbaa !19
  %38 = fsub double 1.000000e+00, %36
  %39 = load double, ptr @_ZN20ComputeNonbondedUtil11alchLambda2E, align 8, !tbaa !19
  %40 = insertelement <2 x double> poison, double %39, i64 0
  %41 = insertelement <2 x double> %40, double %37, i64 1
  %42 = insertelement <2 x double> poison, double %36, i64 0
  %43 = shufflevector <2 x double> %42, <2 x double> poison, <2 x i32> zeroinitializer
  %44 = fsub <2 x double> %41, %43
  %45 = fcmp ugt <2 x double> %41, %43
  %46 = insertelement <2 x double> poison, double %38, i64 0
  %47 = shufflevector <2 x double> %46, <2 x double> poison, <2 x i32> zeroinitializer
  %48 = fdiv <2 x double> %44, %47
  %49 = select <2 x i1> %45, <2 x double> %48, <2 x double> zeroinitializer
  %50 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %41
  %51 = fcmp ugt <2 x double> %50, %43
  %52 = fsub <2 x double> %50, %43
  %53 = fdiv <2 x double> %52, %47
  %54 = select <2 x i1> %51, <2 x double> %53, <2 x double> zeroinitializer
  call void @llvm.lifetime.start.p0(i64 36, ptr nonnull %2) #11
  %55 = load i32, ptr @_ZN20ComputeNonbondedUtil12alchDecoupleE, align 4, !tbaa !5
  %56 = icmp eq i32 %55, 0
  %57 = getelementptr inbounds [9 x i32], ptr %2, i64 0, i64 6
  store i32 2, ptr %57, align 8, !tbaa !5
  %58 = getelementptr inbounds [9 x i32], ptr %2, i64 0, i64 4
  %59 = getelementptr inbounds [9 x i32], ptr %2, i64 0, i64 7
  %60 = getelementptr inbounds [9 x i32], ptr %2, i64 0, i64 5
  %61 = getelementptr inbounds [9 x i32], ptr %2, i64 0, i64 8
  %62 = zext i1 %56 to i32
  %63 = select i1 %56, i32 2, i32 0
  store i32 %62, ptr %58, align 16, !tbaa !5
  store i32 99, ptr %59, align 4, !tbaa !5
  store <4 x i32> <i32 0, i32 1, i32 2, i32 1>, ptr %2, align 16, !tbaa !5
  store i32 99, ptr %60, align 4, !tbaa !5
  store i32 %63, ptr %61, align 16, !tbaa !5
  %64 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 5
  %65 = load i32, ptr %64, align 8, !tbaa !5
  %66 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 5, i64 1
  %67 = load i32, ptr %66, align 4, !tbaa !5
  %68 = load ptr, ptr %0, align 8, !tbaa !23
  %69 = getelementptr inbounds [2 x ptr], ptr %0, i64 0, i64 1
  %70 = load ptr, ptr %69, align 8, !tbaa !23
  %71 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 1
  %72 = load ptr, ptr %71, align 8, !tbaa !23
  %73 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 1, i64 1
  %74 = load ptr, ptr %73, align 8, !tbaa !23
  %75 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 9
  %76 = load ptr, ptr %75, align 8, !tbaa !24
  %77 = add nsw i32 %67, 5
  %78 = getelementptr inbounds %class.ResizeArray, ptr %76, i64 0, i32 1
  %79 = load ptr, ptr %78, align 8, !tbaa !25
  %80 = getelementptr inbounds %class.ResizeArrayRaw, ptr %79, i64 0, i32 2
  %81 = load i32, ptr %80, align 8, !tbaa !27
  %82 = icmp slt i32 %81, %77
  br i1 %82, label %83, label %121

83:                                               ; preds = %5
  %84 = getelementptr inbounds %class.ResizeArrayRaw, ptr %79, i64 0, i32 3
  %85 = load i32, ptr %84, align 4, !tbaa !30
  %86 = icmp slt i32 %85, %77
  br i1 %86, label %87, label %121

87:                                               ; preds = %83
  %88 = sitofp i32 %85 to float
  %89 = getelementptr inbounds %class.ResizeArrayRaw, ptr %79, i64 0, i32 5
  %90 = load float, ptr %89, align 4, !tbaa !31
  %91 = fmul float %90, %88
  %92 = fptosi float %91 to i32
  %93 = tail call i32 @llvm.smax.i32(i32 %92, i32 %77)
  %94 = sub nsw i32 %93, %85
  %95 = getelementptr inbounds %class.ResizeArrayRaw, ptr %79, i64 0, i32 6
  %96 = load i32, ptr %95, align 8, !tbaa !32
  %97 = icmp slt i32 %94, %96
  %98 = add nsw i32 %96, %85
  %99 = select i1 %97, i32 %98, i32 %93
  %100 = sext i32 %99 to i64
  %101 = shl nsw i64 %100, 1
  %102 = add nsw i64 %101, 31
  %103 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %102) #12
  %104 = getelementptr inbounds i8, ptr %103, i64 31
  %105 = ptrtoint ptr %104 to i64
  %106 = and i64 %105, 31
  %107 = sub nsw i64 0, %106
  %108 = getelementptr inbounds i8, ptr %104, i64 %107
  %109 = load ptr, ptr %79, align 8, !tbaa !33
  %110 = sext i32 %81 to i64
  %111 = shl nsw i64 %110, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %108, ptr align 1 %109, i64 %111, i1 false)
  %112 = icmp eq i32 %85, 0
  br i1 %112, label %118, label %113

113:                                              ; preds = %87
  %114 = getelementptr inbounds %class.ResizeArrayRaw, ptr %79, i64 0, i32 1
  %115 = load ptr, ptr %114, align 8, !tbaa !34
  %116 = icmp eq ptr %115, null
  br i1 %116, label %118, label %117

117:                                              ; preds = %113
  tail call void @_ZdaPv(ptr noundef nonnull %115) #13
  br label %118

118:                                              ; preds = %117, %113, %87
  %119 = getelementptr inbounds %class.ResizeArrayRaw, ptr %79, i64 0, i32 1
  store ptr %103, ptr %119, align 8, !tbaa !34
  store ptr %108, ptr %79, align 8, !tbaa !33
  store i32 %99, ptr %84, align 4, !tbaa !30
  %120 = load ptr, ptr %78, align 8, !tbaa !25
  br label %121

121:                                              ; preds = %5, %83, %118
  %122 = phi ptr [ %79, %5 ], [ %79, %83 ], [ %120, %118 ]
  store i32 %77, ptr %80, align 8, !tbaa !27
  %123 = load ptr, ptr %122, align 8, !tbaa !33
  %124 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %76, i64 0, i32 1, i32 1
  %125 = load ptr, ptr %124, align 8, !tbaa !35
  %126 = getelementptr inbounds %class.ResizeArrayRaw.9, ptr %125, i64 0, i32 2
  %127 = load i32, ptr %126, align 8, !tbaa !37
  %128 = icmp slt i32 %127, %77
  br i1 %128, label %129, label %167

129:                                              ; preds = %121
  %130 = getelementptr inbounds %class.ResizeArrayRaw.9, ptr %125, i64 0, i32 3
  %131 = load i32, ptr %130, align 4, !tbaa !39
  %132 = icmp slt i32 %131, %77
  br i1 %132, label %133, label %167

133:                                              ; preds = %129
  %134 = sitofp i32 %131 to float
  %135 = getelementptr inbounds %class.ResizeArrayRaw.9, ptr %125, i64 0, i32 5
  %136 = load float, ptr %135, align 4, !tbaa !40
  %137 = fmul float %136, %134
  %138 = fptosi float %137 to i32
  %139 = tail call i32 @llvm.smax.i32(i32 %138, i32 %77)
  %140 = sub nsw i32 %139, %131
  %141 = getelementptr inbounds %class.ResizeArrayRaw.9, ptr %125, i64 0, i32 6
  %142 = load i32, ptr %141, align 8, !tbaa !41
  %143 = icmp slt i32 %140, %142
  %144 = add nsw i32 %142, %131
  %145 = select i1 %143, i32 %144, i32 %139
  %146 = sext i32 %145 to i64
  %147 = shl nsw i64 %146, 3
  %148 = add nsw i64 %147, 31
  %149 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %148) #12
  %150 = getelementptr inbounds i8, ptr %149, i64 31
  %151 = ptrtoint ptr %150 to i64
  %152 = and i64 %151, 31
  %153 = sub nsw i64 0, %152
  %154 = getelementptr inbounds i8, ptr %150, i64 %153
  %155 = load ptr, ptr %125, align 8, !tbaa !42
  %156 = sext i32 %127 to i64
  %157 = shl nsw i64 %156, 3
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %154, ptr align 1 %155, i64 %157, i1 false)
  %158 = icmp eq i32 %131, 0
  br i1 %158, label %164, label %159

159:                                              ; preds = %133
  %160 = getelementptr inbounds %class.ResizeArrayRaw.9, ptr %125, i64 0, i32 1
  %161 = load ptr, ptr %160, align 8, !tbaa !43
  %162 = icmp eq ptr %161, null
  br i1 %162, label %164, label %163

163:                                              ; preds = %159
  tail call void @_ZdaPv(ptr noundef nonnull %161) #13
  br label %164

164:                                              ; preds = %163, %159, %133
  %165 = getelementptr inbounds %class.ResizeArrayRaw.9, ptr %125, i64 0, i32 1
  store ptr %149, ptr %165, align 8, !tbaa !43
  store ptr %154, ptr %125, align 8, !tbaa !42
  store i32 %145, ptr %130, align 4, !tbaa !39
  %166 = load ptr, ptr %124, align 8, !tbaa !35
  br label %167

167:                                              ; preds = %121, %129, %164
  %168 = phi ptr [ %125, %121 ], [ %125, %129 ], [ %166, %164 ]
  store i32 %77, ptr %126, align 8, !tbaa !37
  %169 = load ptr, ptr %168, align 8, !tbaa !42
  %170 = getelementptr inbounds i32, ptr %169, i64 1
  %171 = icmp eq i32 %11, 0
  %172 = icmp ne i32 %13, 0
  %173 = select i1 %171, i1 %172, i1 false
  %174 = select i1 %173, i32 0, i32 %77
  %175 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %76, i64 0, i32 2, i32 1
  %176 = load ptr, ptr %175, align 8, !tbaa !25
  %177 = getelementptr inbounds %class.ResizeArrayRaw, ptr %176, i64 0, i32 2
  %178 = load i32, ptr %177, align 8, !tbaa !27
  %179 = icmp slt i32 %178, %174
  br i1 %179, label %180, label %218

180:                                              ; preds = %167
  %181 = getelementptr inbounds %class.ResizeArrayRaw, ptr %176, i64 0, i32 3
  %182 = load i32, ptr %181, align 4, !tbaa !30
  %183 = icmp slt i32 %182, %174
  br i1 %183, label %184, label %218

184:                                              ; preds = %180
  %185 = sitofp i32 %182 to float
  %186 = getelementptr inbounds %class.ResizeArrayRaw, ptr %176, i64 0, i32 5
  %187 = load float, ptr %186, align 4, !tbaa !31
  %188 = fmul float %187, %185
  %189 = fptosi float %188 to i32
  %190 = tail call i32 @llvm.smax.i32(i32 %189, i32 %174)
  %191 = sub nsw i32 %190, %182
  %192 = getelementptr inbounds %class.ResizeArrayRaw, ptr %176, i64 0, i32 6
  %193 = load i32, ptr %192, align 8, !tbaa !32
  %194 = icmp slt i32 %191, %193
  %195 = add nsw i32 %193, %182
  %196 = select i1 %194, i32 %195, i32 %190
  %197 = sext i32 %196 to i64
  %198 = shl nsw i64 %197, 1
  %199 = add nsw i64 %198, 31
  %200 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %199) #12
  %201 = getelementptr inbounds i8, ptr %200, i64 31
  %202 = ptrtoint ptr %201 to i64
  %203 = and i64 %202, 31
  %204 = sub nsw i64 0, %203
  %205 = getelementptr inbounds i8, ptr %201, i64 %204
  %206 = load ptr, ptr %176, align 8, !tbaa !33
  %207 = sext i32 %178 to i64
  %208 = shl nsw i64 %207, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %205, ptr align 1 %206, i64 %208, i1 false)
  %209 = icmp eq i32 %182, 0
  br i1 %209, label %215, label %210

210:                                              ; preds = %184
  %211 = getelementptr inbounds %class.ResizeArrayRaw, ptr %176, i64 0, i32 1
  %212 = load ptr, ptr %211, align 8, !tbaa !34
  %213 = icmp eq ptr %212, null
  br i1 %213, label %215, label %214

214:                                              ; preds = %210
  tail call void @_ZdaPv(ptr noundef nonnull %212) #13
  br label %215

215:                                              ; preds = %214, %210, %184
  %216 = getelementptr inbounds %class.ResizeArrayRaw, ptr %176, i64 0, i32 1
  store ptr %200, ptr %216, align 8, !tbaa !34
  store ptr %205, ptr %176, align 8, !tbaa !33
  store i32 %196, ptr %181, align 4, !tbaa !30
  %217 = load ptr, ptr %175, align 8, !tbaa !25
  br label %218

218:                                              ; preds = %167, %180, %215
  %219 = phi ptr [ %176, %167 ], [ %176, %180 ], [ %217, %215 ]
  store i32 %174, ptr %177, align 8, !tbaa !27
  %220 = load ptr, ptr %219, align 8, !tbaa !33
  %221 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %76, i64 0, i32 3, i32 1
  %222 = load ptr, ptr %221, align 8, !tbaa !25
  %223 = getelementptr inbounds %class.ResizeArrayRaw, ptr %222, i64 0, i32 2
  %224 = load i32, ptr %223, align 8, !tbaa !27
  %225 = icmp slt i32 %224, %174
  br i1 %225, label %226, label %264

226:                                              ; preds = %218
  %227 = getelementptr inbounds %class.ResizeArrayRaw, ptr %222, i64 0, i32 3
  %228 = load i32, ptr %227, align 4, !tbaa !30
  %229 = icmp slt i32 %228, %174
  br i1 %229, label %230, label %264

230:                                              ; preds = %226
  %231 = sitofp i32 %228 to float
  %232 = getelementptr inbounds %class.ResizeArrayRaw, ptr %222, i64 0, i32 5
  %233 = load float, ptr %232, align 4, !tbaa !31
  %234 = fmul float %233, %231
  %235 = fptosi float %234 to i32
  %236 = tail call i32 @llvm.smax.i32(i32 %235, i32 %174)
  %237 = sub nsw i32 %236, %228
  %238 = getelementptr inbounds %class.ResizeArrayRaw, ptr %222, i64 0, i32 6
  %239 = load i32, ptr %238, align 8, !tbaa !32
  %240 = icmp slt i32 %237, %239
  %241 = add nsw i32 %239, %228
  %242 = select i1 %240, i32 %241, i32 %236
  %243 = sext i32 %242 to i64
  %244 = shl nsw i64 %243, 1
  %245 = add nsw i64 %244, 31
  %246 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %245) #12
  %247 = getelementptr inbounds i8, ptr %246, i64 31
  %248 = ptrtoint ptr %247 to i64
  %249 = and i64 %248, 31
  %250 = sub nsw i64 0, %249
  %251 = getelementptr inbounds i8, ptr %247, i64 %250
  %252 = load ptr, ptr %222, align 8, !tbaa !33
  %253 = sext i32 %224 to i64
  %254 = shl nsw i64 %253, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %251, ptr align 1 %252, i64 %254, i1 false)
  %255 = icmp eq i32 %228, 0
  br i1 %255, label %261, label %256

256:                                              ; preds = %230
  %257 = getelementptr inbounds %class.ResizeArrayRaw, ptr %222, i64 0, i32 1
  %258 = load ptr, ptr %257, align 8, !tbaa !34
  %259 = icmp eq ptr %258, null
  br i1 %259, label %261, label %260

260:                                              ; preds = %256
  tail call void @_ZdaPv(ptr noundef nonnull %258) #13
  br label %261

261:                                              ; preds = %260, %256, %230
  %262 = getelementptr inbounds %class.ResizeArrayRaw, ptr %222, i64 0, i32 1
  store ptr %246, ptr %262, align 8, !tbaa !34
  store ptr %251, ptr %222, align 8, !tbaa !33
  store i32 %242, ptr %227, align 4, !tbaa !30
  %263 = load ptr, ptr %221, align 8, !tbaa !25
  br label %264

264:                                              ; preds = %218, %226, %261
  %265 = phi ptr [ %222, %218 ], [ %222, %226 ], [ %263, %261 ]
  store i32 %174, ptr %223, align 8, !tbaa !27
  %266 = load ptr, ptr %265, align 8, !tbaa !33
  %267 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %76, i64 0, i32 4, i32 1
  %268 = load ptr, ptr %267, align 8, !tbaa !25
  %269 = getelementptr inbounds %class.ResizeArrayRaw, ptr %268, i64 0, i32 2
  %270 = load i32, ptr %269, align 8, !tbaa !27
  %271 = icmp slt i32 %270, %174
  br i1 %271, label %272, label %310

272:                                              ; preds = %264
  %273 = getelementptr inbounds %class.ResizeArrayRaw, ptr %268, i64 0, i32 3
  %274 = load i32, ptr %273, align 4, !tbaa !30
  %275 = icmp slt i32 %274, %174
  br i1 %275, label %276, label %310

276:                                              ; preds = %272
  %277 = sitofp i32 %274 to float
  %278 = getelementptr inbounds %class.ResizeArrayRaw, ptr %268, i64 0, i32 5
  %279 = load float, ptr %278, align 4, !tbaa !31
  %280 = fmul float %279, %277
  %281 = fptosi float %280 to i32
  %282 = tail call i32 @llvm.smax.i32(i32 %281, i32 %174)
  %283 = sub nsw i32 %282, %274
  %284 = getelementptr inbounds %class.ResizeArrayRaw, ptr %268, i64 0, i32 6
  %285 = load i32, ptr %284, align 8, !tbaa !32
  %286 = icmp slt i32 %283, %285
  %287 = add nsw i32 %285, %274
  %288 = select i1 %286, i32 %287, i32 %282
  %289 = sext i32 %288 to i64
  %290 = shl nsw i64 %289, 1
  %291 = add nsw i64 %290, 31
  %292 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %291) #12
  %293 = getelementptr inbounds i8, ptr %292, i64 31
  %294 = ptrtoint ptr %293 to i64
  %295 = and i64 %294, 31
  %296 = sub nsw i64 0, %295
  %297 = getelementptr inbounds i8, ptr %293, i64 %296
  %298 = load ptr, ptr %268, align 8, !tbaa !33
  %299 = sext i32 %270 to i64
  %300 = shl nsw i64 %299, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %297, ptr align 1 %298, i64 %300, i1 false)
  %301 = icmp eq i32 %274, 0
  br i1 %301, label %307, label %302

302:                                              ; preds = %276
  %303 = getelementptr inbounds %class.ResizeArrayRaw, ptr %268, i64 0, i32 1
  %304 = load ptr, ptr %303, align 8, !tbaa !34
  %305 = icmp eq ptr %304, null
  br i1 %305, label %307, label %306

306:                                              ; preds = %302
  tail call void @_ZdaPv(ptr noundef nonnull %304) #13
  br label %307

307:                                              ; preds = %306, %302, %276
  %308 = getelementptr inbounds %class.ResizeArrayRaw, ptr %268, i64 0, i32 1
  store ptr %292, ptr %308, align 8, !tbaa !34
  store ptr %297, ptr %268, align 8, !tbaa !33
  store i32 %288, ptr %273, align 4, !tbaa !30
  %309 = load ptr, ptr %267, align 8, !tbaa !25
  br label %310

310:                                              ; preds = %264, %272, %307
  %311 = phi ptr [ %268, %264 ], [ %268, %272 ], [ %309, %307 ]
  store i32 %174, ptr %269, align 8, !tbaa !27
  %312 = load ptr, ptr %311, align 8, !tbaa !33
  %313 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %76, i64 0, i32 5, i32 1
  %314 = load ptr, ptr %313, align 8, !tbaa !25
  %315 = getelementptr inbounds %class.ResizeArrayRaw, ptr %314, i64 0, i32 2
  %316 = load i32, ptr %315, align 8, !tbaa !27
  %317 = icmp slt i32 %316, %174
  br i1 %317, label %318, label %356

318:                                              ; preds = %310
  %319 = getelementptr inbounds %class.ResizeArrayRaw, ptr %314, i64 0, i32 3
  %320 = load i32, ptr %319, align 4, !tbaa !30
  %321 = icmp slt i32 %320, %174
  br i1 %321, label %322, label %356

322:                                              ; preds = %318
  %323 = sitofp i32 %320 to float
  %324 = getelementptr inbounds %class.ResizeArrayRaw, ptr %314, i64 0, i32 5
  %325 = load float, ptr %324, align 4, !tbaa !31
  %326 = fmul float %325, %323
  %327 = fptosi float %326 to i32
  %328 = tail call i32 @llvm.smax.i32(i32 %327, i32 %174)
  %329 = sub nsw i32 %328, %320
  %330 = getelementptr inbounds %class.ResizeArrayRaw, ptr %314, i64 0, i32 6
  %331 = load i32, ptr %330, align 8, !tbaa !32
  %332 = icmp slt i32 %329, %331
  %333 = add nsw i32 %331, %320
  %334 = select i1 %332, i32 %333, i32 %328
  %335 = sext i32 %334 to i64
  %336 = shl nsw i64 %335, 1
  %337 = add nsw i64 %336, 31
  %338 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %337) #12
  %339 = getelementptr inbounds i8, ptr %338, i64 31
  %340 = ptrtoint ptr %339 to i64
  %341 = and i64 %340, 31
  %342 = sub nsw i64 0, %341
  %343 = getelementptr inbounds i8, ptr %339, i64 %342
  %344 = load ptr, ptr %314, align 8, !tbaa !33
  %345 = sext i32 %316 to i64
  %346 = shl nsw i64 %345, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %343, ptr align 1 %344, i64 %346, i1 false)
  %347 = icmp eq i32 %320, 0
  br i1 %347, label %353, label %348

348:                                              ; preds = %322
  %349 = getelementptr inbounds %class.ResizeArrayRaw, ptr %314, i64 0, i32 1
  %350 = load ptr, ptr %349, align 8, !tbaa !34
  %351 = icmp eq ptr %350, null
  br i1 %351, label %353, label %352

352:                                              ; preds = %348
  tail call void @_ZdaPv(ptr noundef nonnull %350) #13
  br label %353

353:                                              ; preds = %352, %348, %322
  %354 = getelementptr inbounds %class.ResizeArrayRaw, ptr %314, i64 0, i32 1
  store ptr %338, ptr %354, align 8, !tbaa !34
  store ptr %343, ptr %314, align 8, !tbaa !33
  store i32 %334, ptr %319, align 4, !tbaa !30
  %355 = load ptr, ptr %313, align 8, !tbaa !25
  br label %356

356:                                              ; preds = %310, %318, %353
  %357 = phi ptr [ %314, %310 ], [ %314, %318 ], [ %355, %353 ]
  store i32 %174, ptr %315, align 8, !tbaa !27
  %358 = load ptr, ptr %357, align 8, !tbaa !33
  %359 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %76, i64 0, i32 6, i32 1
  %360 = load ptr, ptr %359, align 8, !tbaa !25
  %361 = getelementptr inbounds %class.ResizeArrayRaw, ptr %360, i64 0, i32 2
  %362 = load i32, ptr %361, align 8, !tbaa !27
  %363 = icmp slt i32 %362, %174
  br i1 %363, label %364, label %402

364:                                              ; preds = %356
  %365 = getelementptr inbounds %class.ResizeArrayRaw, ptr %360, i64 0, i32 3
  %366 = load i32, ptr %365, align 4, !tbaa !30
  %367 = icmp slt i32 %366, %174
  br i1 %367, label %368, label %402

368:                                              ; preds = %364
  %369 = sitofp i32 %366 to float
  %370 = getelementptr inbounds %class.ResizeArrayRaw, ptr %360, i64 0, i32 5
  %371 = load float, ptr %370, align 4, !tbaa !31
  %372 = fmul float %371, %369
  %373 = fptosi float %372 to i32
  %374 = tail call i32 @llvm.smax.i32(i32 %373, i32 %174)
  %375 = sub nsw i32 %374, %366
  %376 = getelementptr inbounds %class.ResizeArrayRaw, ptr %360, i64 0, i32 6
  %377 = load i32, ptr %376, align 8, !tbaa !32
  %378 = icmp slt i32 %375, %377
  %379 = add nsw i32 %377, %366
  %380 = select i1 %378, i32 %379, i32 %374
  %381 = sext i32 %380 to i64
  %382 = shl nsw i64 %381, 1
  %383 = add nsw i64 %382, 31
  %384 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %383) #12
  %385 = getelementptr inbounds i8, ptr %384, i64 31
  %386 = ptrtoint ptr %385 to i64
  %387 = and i64 %386, 31
  %388 = sub nsw i64 0, %387
  %389 = getelementptr inbounds i8, ptr %385, i64 %388
  %390 = load ptr, ptr %360, align 8, !tbaa !33
  %391 = sext i32 %362 to i64
  %392 = shl nsw i64 %391, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %389, ptr align 1 %390, i64 %392, i1 false)
  %393 = icmp eq i32 %366, 0
  br i1 %393, label %399, label %394

394:                                              ; preds = %368
  %395 = getelementptr inbounds %class.ResizeArrayRaw, ptr %360, i64 0, i32 1
  %396 = load ptr, ptr %395, align 8, !tbaa !34
  %397 = icmp eq ptr %396, null
  br i1 %397, label %399, label %398

398:                                              ; preds = %394
  tail call void @_ZdaPv(ptr noundef nonnull %396) #13
  br label %399

399:                                              ; preds = %398, %394, %368
  %400 = getelementptr inbounds %class.ResizeArrayRaw, ptr %360, i64 0, i32 1
  store ptr %384, ptr %400, align 8, !tbaa !34
  store ptr %389, ptr %360, align 8, !tbaa !33
  store i32 %380, ptr %365, align 4, !tbaa !30
  %401 = load ptr, ptr %359, align 8, !tbaa !25
  br label %402

402:                                              ; preds = %356, %364, %399
  %403 = phi ptr [ %360, %356 ], [ %360, %364 ], [ %401, %399 ]
  store i32 %174, ptr %361, align 8, !tbaa !27
  %404 = load ptr, ptr %403, align 8, !tbaa !33
  %405 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %76, i64 0, i32 15, i32 1
  %406 = load ptr, ptr %405, align 8, !tbaa !25
  %407 = getelementptr inbounds %class.ResizeArrayRaw, ptr %406, i64 0, i32 2
  %408 = load i32, ptr %407, align 8, !tbaa !27
  %409 = icmp slt i32 %408, %174
  br i1 %409, label %410, label %448

410:                                              ; preds = %402
  %411 = getelementptr inbounds %class.ResizeArrayRaw, ptr %406, i64 0, i32 3
  %412 = load i32, ptr %411, align 4, !tbaa !30
  %413 = icmp slt i32 %412, %174
  br i1 %413, label %414, label %448

414:                                              ; preds = %410
  %415 = sitofp i32 %412 to float
  %416 = getelementptr inbounds %class.ResizeArrayRaw, ptr %406, i64 0, i32 5
  %417 = load float, ptr %416, align 4, !tbaa !31
  %418 = fmul float %417, %415
  %419 = fptosi float %418 to i32
  %420 = tail call i32 @llvm.smax.i32(i32 %419, i32 %174)
  %421 = sub nsw i32 %420, %412
  %422 = getelementptr inbounds %class.ResizeArrayRaw, ptr %406, i64 0, i32 6
  %423 = load i32, ptr %422, align 8, !tbaa !32
  %424 = icmp slt i32 %421, %423
  %425 = add nsw i32 %423, %412
  %426 = select i1 %424, i32 %425, i32 %420
  %427 = sext i32 %426 to i64
  %428 = shl nsw i64 %427, 1
  %429 = add nsw i64 %428, 31
  %430 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %429) #12
  %431 = getelementptr inbounds i8, ptr %430, i64 31
  %432 = ptrtoint ptr %431 to i64
  %433 = and i64 %432, 31
  %434 = sub nsw i64 0, %433
  %435 = getelementptr inbounds i8, ptr %431, i64 %434
  %436 = load ptr, ptr %406, align 8, !tbaa !33
  %437 = sext i32 %408 to i64
  %438 = shl nsw i64 %437, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %435, ptr align 1 %436, i64 %438, i1 false)
  %439 = icmp eq i32 %412, 0
  br i1 %439, label %445, label %440

440:                                              ; preds = %414
  %441 = getelementptr inbounds %class.ResizeArrayRaw, ptr %406, i64 0, i32 1
  %442 = load ptr, ptr %441, align 8, !tbaa !34
  %443 = icmp eq ptr %442, null
  br i1 %443, label %445, label %444

444:                                              ; preds = %440
  tail call void @_ZdaPv(ptr noundef nonnull %442) #13
  br label %445

445:                                              ; preds = %444, %440, %414
  %446 = getelementptr inbounds %class.ResizeArrayRaw, ptr %406, i64 0, i32 1
  store ptr %430, ptr %446, align 8, !tbaa !34
  store ptr %435, ptr %406, align 8, !tbaa !33
  store i32 %426, ptr %411, align 4, !tbaa !30
  %447 = load ptr, ptr %405, align 8, !tbaa !25
  br label %448

448:                                              ; preds = %402, %410, %445
  %449 = phi ptr [ %406, %402 ], [ %406, %410 ], [ %447, %445 ]
  store i32 %174, ptr %407, align 8, !tbaa !27
  %450 = load ptr, ptr %449, align 8, !tbaa !33
  %451 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %76, i64 0, i32 16, i32 1
  %452 = load ptr, ptr %451, align 8, !tbaa !25
  %453 = getelementptr inbounds %class.ResizeArrayRaw, ptr %452, i64 0, i32 2
  %454 = load i32, ptr %453, align 8, !tbaa !27
  %455 = icmp slt i32 %454, %174
  br i1 %455, label %456, label %494

456:                                              ; preds = %448
  %457 = getelementptr inbounds %class.ResizeArrayRaw, ptr %452, i64 0, i32 3
  %458 = load i32, ptr %457, align 4, !tbaa !30
  %459 = icmp slt i32 %458, %174
  br i1 %459, label %460, label %494

460:                                              ; preds = %456
  %461 = sitofp i32 %458 to float
  %462 = getelementptr inbounds %class.ResizeArrayRaw, ptr %452, i64 0, i32 5
  %463 = load float, ptr %462, align 4, !tbaa !31
  %464 = fmul float %463, %461
  %465 = fptosi float %464 to i32
  %466 = tail call i32 @llvm.smax.i32(i32 %465, i32 %174)
  %467 = sub nsw i32 %466, %458
  %468 = getelementptr inbounds %class.ResizeArrayRaw, ptr %452, i64 0, i32 6
  %469 = load i32, ptr %468, align 8, !tbaa !32
  %470 = icmp slt i32 %467, %469
  %471 = add nsw i32 %469, %458
  %472 = select i1 %470, i32 %471, i32 %466
  %473 = sext i32 %472 to i64
  %474 = shl nsw i64 %473, 1
  %475 = add nsw i64 %474, 31
  %476 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %475) #12
  %477 = getelementptr inbounds i8, ptr %476, i64 31
  %478 = ptrtoint ptr %477 to i64
  %479 = and i64 %478, 31
  %480 = sub nsw i64 0, %479
  %481 = getelementptr inbounds i8, ptr %477, i64 %480
  %482 = load ptr, ptr %452, align 8, !tbaa !33
  %483 = sext i32 %454 to i64
  %484 = shl nsw i64 %483, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %481, ptr align 1 %482, i64 %484, i1 false)
  %485 = icmp eq i32 %458, 0
  br i1 %485, label %491, label %486

486:                                              ; preds = %460
  %487 = getelementptr inbounds %class.ResizeArrayRaw, ptr %452, i64 0, i32 1
  %488 = load ptr, ptr %487, align 8, !tbaa !34
  %489 = icmp eq ptr %488, null
  br i1 %489, label %491, label %490

490:                                              ; preds = %486
  tail call void @_ZdaPv(ptr noundef nonnull %488) #13
  br label %491

491:                                              ; preds = %490, %486, %460
  %492 = getelementptr inbounds %class.ResizeArrayRaw, ptr %452, i64 0, i32 1
  store ptr %476, ptr %492, align 8, !tbaa !34
  store ptr %481, ptr %452, align 8, !tbaa !33
  store i32 %472, ptr %457, align 4, !tbaa !30
  %493 = load ptr, ptr %451, align 8, !tbaa !25
  br label %494

494:                                              ; preds = %448, %456, %491
  %495 = phi ptr [ %452, %448 ], [ %452, %456 ], [ %493, %491 ]
  store i32 %174, ptr %453, align 8, !tbaa !27
  %496 = load ptr, ptr %495, align 8, !tbaa !33
  %497 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %76, i64 0, i32 9, i32 1
  %498 = load ptr, ptr %497, align 8, !tbaa !25
  %499 = getelementptr inbounds %class.ResizeArrayRaw, ptr %498, i64 0, i32 2
  %500 = load i32, ptr %499, align 8, !tbaa !27
  %501 = icmp slt i32 %500, %174
  br i1 %501, label %502, label %540

502:                                              ; preds = %494
  %503 = getelementptr inbounds %class.ResizeArrayRaw, ptr %498, i64 0, i32 3
  %504 = load i32, ptr %503, align 4, !tbaa !30
  %505 = icmp slt i32 %504, %174
  br i1 %505, label %506, label %540

506:                                              ; preds = %502
  %507 = sitofp i32 %504 to float
  %508 = getelementptr inbounds %class.ResizeArrayRaw, ptr %498, i64 0, i32 5
  %509 = load float, ptr %508, align 4, !tbaa !31
  %510 = fmul float %509, %507
  %511 = fptosi float %510 to i32
  %512 = tail call i32 @llvm.smax.i32(i32 %511, i32 %174)
  %513 = sub nsw i32 %512, %504
  %514 = getelementptr inbounds %class.ResizeArrayRaw, ptr %498, i64 0, i32 6
  %515 = load i32, ptr %514, align 8, !tbaa !32
  %516 = icmp slt i32 %513, %515
  %517 = add nsw i32 %515, %504
  %518 = select i1 %516, i32 %517, i32 %512
  %519 = sext i32 %518 to i64
  %520 = shl nsw i64 %519, 1
  %521 = add nsw i64 %520, 31
  %522 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %521) #12
  %523 = getelementptr inbounds i8, ptr %522, i64 31
  %524 = ptrtoint ptr %523 to i64
  %525 = and i64 %524, 31
  %526 = sub nsw i64 0, %525
  %527 = getelementptr inbounds i8, ptr %523, i64 %526
  %528 = load ptr, ptr %498, align 8, !tbaa !33
  %529 = sext i32 %500 to i64
  %530 = shl nsw i64 %529, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %527, ptr align 1 %528, i64 %530, i1 false)
  %531 = icmp eq i32 %504, 0
  br i1 %531, label %537, label %532

532:                                              ; preds = %506
  %533 = getelementptr inbounds %class.ResizeArrayRaw, ptr %498, i64 0, i32 1
  %534 = load ptr, ptr %533, align 8, !tbaa !34
  %535 = icmp eq ptr %534, null
  br i1 %535, label %537, label %536

536:                                              ; preds = %532
  tail call void @_ZdaPv(ptr noundef nonnull %534) #13
  br label %537

537:                                              ; preds = %536, %532, %506
  %538 = getelementptr inbounds %class.ResizeArrayRaw, ptr %498, i64 0, i32 1
  store ptr %522, ptr %538, align 8, !tbaa !34
  store ptr %527, ptr %498, align 8, !tbaa !33
  store i32 %518, ptr %503, align 4, !tbaa !30
  %539 = load ptr, ptr %497, align 8, !tbaa !25
  br label %540

540:                                              ; preds = %494, %502, %537
  %541 = phi ptr [ %498, %494 ], [ %498, %502 ], [ %539, %537 ]
  store i32 %174, ptr %499, align 8, !tbaa !27
  %542 = load ptr, ptr %541, align 8, !tbaa !33
  %543 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %76, i64 0, i32 10, i32 1
  %544 = load ptr, ptr %543, align 8, !tbaa !25
  %545 = getelementptr inbounds %class.ResizeArrayRaw, ptr %544, i64 0, i32 2
  %546 = load i32, ptr %545, align 8, !tbaa !27
  %547 = icmp slt i32 %546, %174
  br i1 %547, label %548, label %586

548:                                              ; preds = %540
  %549 = getelementptr inbounds %class.ResizeArrayRaw, ptr %544, i64 0, i32 3
  %550 = load i32, ptr %549, align 4, !tbaa !30
  %551 = icmp slt i32 %550, %174
  br i1 %551, label %552, label %586

552:                                              ; preds = %548
  %553 = sitofp i32 %550 to float
  %554 = getelementptr inbounds %class.ResizeArrayRaw, ptr %544, i64 0, i32 5
  %555 = load float, ptr %554, align 4, !tbaa !31
  %556 = fmul float %555, %553
  %557 = fptosi float %556 to i32
  %558 = tail call i32 @llvm.smax.i32(i32 %557, i32 %174)
  %559 = sub nsw i32 %558, %550
  %560 = getelementptr inbounds %class.ResizeArrayRaw, ptr %544, i64 0, i32 6
  %561 = load i32, ptr %560, align 8, !tbaa !32
  %562 = icmp slt i32 %559, %561
  %563 = add nsw i32 %561, %550
  %564 = select i1 %562, i32 %563, i32 %558
  %565 = sext i32 %564 to i64
  %566 = shl nsw i64 %565, 1
  %567 = add nsw i64 %566, 31
  %568 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %567) #12
  %569 = getelementptr inbounds i8, ptr %568, i64 31
  %570 = ptrtoint ptr %569 to i64
  %571 = and i64 %570, 31
  %572 = sub nsw i64 0, %571
  %573 = getelementptr inbounds i8, ptr %569, i64 %572
  %574 = load ptr, ptr %544, align 8, !tbaa !33
  %575 = sext i32 %546 to i64
  %576 = shl nsw i64 %575, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %573, ptr align 1 %574, i64 %576, i1 false)
  %577 = icmp eq i32 %550, 0
  br i1 %577, label %583, label %578

578:                                              ; preds = %552
  %579 = getelementptr inbounds %class.ResizeArrayRaw, ptr %544, i64 0, i32 1
  %580 = load ptr, ptr %579, align 8, !tbaa !34
  %581 = icmp eq ptr %580, null
  br i1 %581, label %583, label %582

582:                                              ; preds = %578
  tail call void @_ZdaPv(ptr noundef nonnull %580) #13
  br label %583

583:                                              ; preds = %582, %578, %552
  %584 = getelementptr inbounds %class.ResizeArrayRaw, ptr %544, i64 0, i32 1
  store ptr %568, ptr %584, align 8, !tbaa !34
  store ptr %573, ptr %544, align 8, !tbaa !33
  store i32 %564, ptr %549, align 4, !tbaa !30
  %585 = load ptr, ptr %543, align 8, !tbaa !25
  br label %586

586:                                              ; preds = %540, %548, %583
  %587 = phi ptr [ %544, %540 ], [ %544, %548 ], [ %585, %583 ]
  store i32 %174, ptr %545, align 8, !tbaa !27
  %588 = load ptr, ptr %587, align 8, !tbaa !33
  %589 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %76, i64 0, i32 11, i32 1
  %590 = load ptr, ptr %589, align 8, !tbaa !25
  %591 = getelementptr inbounds %class.ResizeArrayRaw, ptr %590, i64 0, i32 2
  %592 = load i32, ptr %591, align 8, !tbaa !27
  %593 = icmp slt i32 %592, %174
  br i1 %593, label %594, label %632

594:                                              ; preds = %586
  %595 = getelementptr inbounds %class.ResizeArrayRaw, ptr %590, i64 0, i32 3
  %596 = load i32, ptr %595, align 4, !tbaa !30
  %597 = icmp slt i32 %596, %174
  br i1 %597, label %598, label %632

598:                                              ; preds = %594
  %599 = sitofp i32 %596 to float
  %600 = getelementptr inbounds %class.ResizeArrayRaw, ptr %590, i64 0, i32 5
  %601 = load float, ptr %600, align 4, !tbaa !31
  %602 = fmul float %601, %599
  %603 = fptosi float %602 to i32
  %604 = tail call i32 @llvm.smax.i32(i32 %603, i32 %174)
  %605 = sub nsw i32 %604, %596
  %606 = getelementptr inbounds %class.ResizeArrayRaw, ptr %590, i64 0, i32 6
  %607 = load i32, ptr %606, align 8, !tbaa !32
  %608 = icmp slt i32 %605, %607
  %609 = add nsw i32 %607, %596
  %610 = select i1 %608, i32 %609, i32 %604
  %611 = sext i32 %610 to i64
  %612 = shl nsw i64 %611, 1
  %613 = add nsw i64 %612, 31
  %614 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %613) #12
  %615 = getelementptr inbounds i8, ptr %614, i64 31
  %616 = ptrtoint ptr %615 to i64
  %617 = and i64 %616, 31
  %618 = sub nsw i64 0, %617
  %619 = getelementptr inbounds i8, ptr %615, i64 %618
  %620 = load ptr, ptr %590, align 8, !tbaa !33
  %621 = sext i32 %592 to i64
  %622 = shl nsw i64 %621, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %619, ptr align 1 %620, i64 %622, i1 false)
  %623 = icmp eq i32 %596, 0
  br i1 %623, label %629, label %624

624:                                              ; preds = %598
  %625 = getelementptr inbounds %class.ResizeArrayRaw, ptr %590, i64 0, i32 1
  %626 = load ptr, ptr %625, align 8, !tbaa !34
  %627 = icmp eq ptr %626, null
  br i1 %627, label %629, label %628

628:                                              ; preds = %624
  tail call void @_ZdaPv(ptr noundef nonnull %626) #13
  br label %629

629:                                              ; preds = %628, %624, %598
  %630 = getelementptr inbounds %class.ResizeArrayRaw, ptr %590, i64 0, i32 1
  store ptr %614, ptr %630, align 8, !tbaa !34
  store ptr %619, ptr %590, align 8, !tbaa !33
  store i32 %610, ptr %595, align 4, !tbaa !30
  %631 = load ptr, ptr %589, align 8, !tbaa !25
  br label %632

632:                                              ; preds = %586, %594, %629
  %633 = phi ptr [ %590, %586 ], [ %590, %594 ], [ %631, %629 ]
  store i32 %174, ptr %591, align 8, !tbaa !27
  %634 = load ptr, ptr %633, align 8, !tbaa !33
  %635 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %76, i64 0, i32 12, i32 1
  %636 = load ptr, ptr %635, align 8, !tbaa !25
  %637 = getelementptr inbounds %class.ResizeArrayRaw, ptr %636, i64 0, i32 2
  %638 = load i32, ptr %637, align 8, !tbaa !27
  %639 = icmp slt i32 %638, %174
  br i1 %639, label %640, label %678

640:                                              ; preds = %632
  %641 = getelementptr inbounds %class.ResizeArrayRaw, ptr %636, i64 0, i32 3
  %642 = load i32, ptr %641, align 4, !tbaa !30
  %643 = icmp slt i32 %642, %174
  br i1 %643, label %644, label %678

644:                                              ; preds = %640
  %645 = sitofp i32 %642 to float
  %646 = getelementptr inbounds %class.ResizeArrayRaw, ptr %636, i64 0, i32 5
  %647 = load float, ptr %646, align 4, !tbaa !31
  %648 = fmul float %647, %645
  %649 = fptosi float %648 to i32
  %650 = tail call i32 @llvm.smax.i32(i32 %649, i32 %174)
  %651 = sub nsw i32 %650, %642
  %652 = getelementptr inbounds %class.ResizeArrayRaw, ptr %636, i64 0, i32 6
  %653 = load i32, ptr %652, align 8, !tbaa !32
  %654 = icmp slt i32 %651, %653
  %655 = add nsw i32 %653, %642
  %656 = select i1 %654, i32 %655, i32 %650
  %657 = sext i32 %656 to i64
  %658 = shl nsw i64 %657, 1
  %659 = add nsw i64 %658, 31
  %660 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %659) #12
  %661 = getelementptr inbounds i8, ptr %660, i64 31
  %662 = ptrtoint ptr %661 to i64
  %663 = and i64 %662, 31
  %664 = sub nsw i64 0, %663
  %665 = getelementptr inbounds i8, ptr %661, i64 %664
  %666 = load ptr, ptr %636, align 8, !tbaa !33
  %667 = sext i32 %638 to i64
  %668 = shl nsw i64 %667, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %665, ptr align 1 %666, i64 %668, i1 false)
  %669 = icmp eq i32 %642, 0
  br i1 %669, label %675, label %670

670:                                              ; preds = %644
  %671 = getelementptr inbounds %class.ResizeArrayRaw, ptr %636, i64 0, i32 1
  %672 = load ptr, ptr %671, align 8, !tbaa !34
  %673 = icmp eq ptr %672, null
  br i1 %673, label %675, label %674

674:                                              ; preds = %670
  tail call void @_ZdaPv(ptr noundef nonnull %672) #13
  br label %675

675:                                              ; preds = %674, %670, %644
  %676 = getelementptr inbounds %class.ResizeArrayRaw, ptr %636, i64 0, i32 1
  store ptr %660, ptr %676, align 8, !tbaa !34
  store ptr %665, ptr %636, align 8, !tbaa !33
  store i32 %656, ptr %641, align 4, !tbaa !30
  %677 = load ptr, ptr %635, align 8, !tbaa !25
  br label %678

678:                                              ; preds = %632, %640, %675
  %679 = phi ptr [ %636, %632 ], [ %636, %640 ], [ %677, %675 ]
  store i32 %174, ptr %637, align 8, !tbaa !27
  %680 = load ptr, ptr %679, align 8, !tbaa !33
  %681 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %76, i64 0, i32 13, i32 1
  %682 = load ptr, ptr %681, align 8, !tbaa !25
  %683 = getelementptr inbounds %class.ResizeArrayRaw, ptr %682, i64 0, i32 2
  %684 = load i32, ptr %683, align 8, !tbaa !27
  %685 = icmp slt i32 %684, %174
  br i1 %685, label %686, label %724

686:                                              ; preds = %678
  %687 = getelementptr inbounds %class.ResizeArrayRaw, ptr %682, i64 0, i32 3
  %688 = load i32, ptr %687, align 4, !tbaa !30
  %689 = icmp slt i32 %688, %174
  br i1 %689, label %690, label %724

690:                                              ; preds = %686
  %691 = sitofp i32 %688 to float
  %692 = getelementptr inbounds %class.ResizeArrayRaw, ptr %682, i64 0, i32 5
  %693 = load float, ptr %692, align 4, !tbaa !31
  %694 = fmul float %693, %691
  %695 = fptosi float %694 to i32
  %696 = tail call i32 @llvm.smax.i32(i32 %695, i32 %174)
  %697 = sub nsw i32 %696, %688
  %698 = getelementptr inbounds %class.ResizeArrayRaw, ptr %682, i64 0, i32 6
  %699 = load i32, ptr %698, align 8, !tbaa !32
  %700 = icmp slt i32 %697, %699
  %701 = add nsw i32 %699, %688
  %702 = select i1 %700, i32 %701, i32 %696
  %703 = sext i32 %702 to i64
  %704 = shl nsw i64 %703, 1
  %705 = add nsw i64 %704, 31
  %706 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %705) #12
  %707 = getelementptr inbounds i8, ptr %706, i64 31
  %708 = ptrtoint ptr %707 to i64
  %709 = and i64 %708, 31
  %710 = sub nsw i64 0, %709
  %711 = getelementptr inbounds i8, ptr %707, i64 %710
  %712 = load ptr, ptr %682, align 8, !tbaa !33
  %713 = sext i32 %684 to i64
  %714 = shl nsw i64 %713, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %711, ptr align 1 %712, i64 %714, i1 false)
  %715 = icmp eq i32 %688, 0
  br i1 %715, label %721, label %716

716:                                              ; preds = %690
  %717 = getelementptr inbounds %class.ResizeArrayRaw, ptr %682, i64 0, i32 1
  %718 = load ptr, ptr %717, align 8, !tbaa !34
  %719 = icmp eq ptr %718, null
  br i1 %719, label %721, label %720

720:                                              ; preds = %716
  tail call void @_ZdaPv(ptr noundef nonnull %718) #13
  br label %721

721:                                              ; preds = %720, %716, %690
  %722 = getelementptr inbounds %class.ResizeArrayRaw, ptr %682, i64 0, i32 1
  store ptr %706, ptr %722, align 8, !tbaa !34
  store ptr %711, ptr %682, align 8, !tbaa !33
  store i32 %702, ptr %687, align 4, !tbaa !30
  %723 = load ptr, ptr %681, align 8, !tbaa !25
  br label %724

724:                                              ; preds = %678, %686, %721
  %725 = phi ptr [ %682, %678 ], [ %682, %686 ], [ %723, %721 ]
  store i32 %174, ptr %683, align 8, !tbaa !27
  %726 = load ptr, ptr %725, align 8, !tbaa !33
  %727 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %76, i64 0, i32 14, i32 1
  %728 = load ptr, ptr %727, align 8, !tbaa !25
  %729 = getelementptr inbounds %class.ResizeArrayRaw, ptr %728, i64 0, i32 2
  %730 = load i32, ptr %729, align 8, !tbaa !27
  %731 = icmp slt i32 %730, %174
  br i1 %731, label %732, label %770

732:                                              ; preds = %724
  %733 = getelementptr inbounds %class.ResizeArrayRaw, ptr %728, i64 0, i32 3
  %734 = load i32, ptr %733, align 4, !tbaa !30
  %735 = icmp slt i32 %734, %174
  br i1 %735, label %736, label %770

736:                                              ; preds = %732
  %737 = sitofp i32 %734 to float
  %738 = getelementptr inbounds %class.ResizeArrayRaw, ptr %728, i64 0, i32 5
  %739 = load float, ptr %738, align 4, !tbaa !31
  %740 = fmul float %739, %737
  %741 = fptosi float %740 to i32
  %742 = tail call i32 @llvm.smax.i32(i32 %741, i32 %174)
  %743 = sub nsw i32 %742, %734
  %744 = getelementptr inbounds %class.ResizeArrayRaw, ptr %728, i64 0, i32 6
  %745 = load i32, ptr %744, align 8, !tbaa !32
  %746 = icmp slt i32 %743, %745
  %747 = add nsw i32 %745, %734
  %748 = select i1 %746, i32 %747, i32 %742
  %749 = sext i32 %748 to i64
  %750 = shl nsw i64 %749, 1
  %751 = add nsw i64 %750, 31
  %752 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %751) #12
  %753 = getelementptr inbounds i8, ptr %752, i64 31
  %754 = ptrtoint ptr %753 to i64
  %755 = and i64 %754, 31
  %756 = sub nsw i64 0, %755
  %757 = getelementptr inbounds i8, ptr %753, i64 %756
  %758 = load ptr, ptr %728, align 8, !tbaa !33
  %759 = sext i32 %730 to i64
  %760 = shl nsw i64 %759, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %757, ptr align 1 %758, i64 %760, i1 false)
  %761 = icmp eq i32 %734, 0
  br i1 %761, label %767, label %762

762:                                              ; preds = %736
  %763 = getelementptr inbounds %class.ResizeArrayRaw, ptr %728, i64 0, i32 1
  %764 = load ptr, ptr %763, align 8, !tbaa !34
  %765 = icmp eq ptr %764, null
  br i1 %765, label %767, label %766

766:                                              ; preds = %762
  tail call void @_ZdaPv(ptr noundef nonnull %764) #13
  br label %767

767:                                              ; preds = %766, %762, %736
  %768 = getelementptr inbounds %class.ResizeArrayRaw, ptr %728, i64 0, i32 1
  store ptr %752, ptr %768, align 8, !tbaa !34
  store ptr %757, ptr %728, align 8, !tbaa !33
  store i32 %748, ptr %733, align 4, !tbaa !30
  %769 = load ptr, ptr %727, align 8, !tbaa !25
  br label %770

770:                                              ; preds = %724, %732, %767
  %771 = phi ptr [ %728, %724 ], [ %728, %732 ], [ %769, %767 ]
  store i32 %174, ptr %729, align 8, !tbaa !27
  %772 = load ptr, ptr %771, align 8, !tbaa !33
  br i1 %173, label %914, label %773

773:                                              ; preds = %770
  %774 = icmp sgt i32 %67, 0
  br i1 %774, label %775, label %905

775:                                              ; preds = %773
  %776 = zext i32 %67 to i64
  %777 = and i64 %776, 1
  %778 = icmp eq i32 %67, 1
  br i1 %778, label %811, label %779

779:                                              ; preds = %775
  %780 = and i64 %776, 4294967294
  br label %781

781:                                              ; preds = %806, %779
  %782 = phi i64 [ 0, %779 ], [ %808, %806 ]
  %783 = phi i32 [ 0, %779 ], [ %807, %806 ]
  %784 = phi i64 [ 0, %779 ], [ %809, %806 ]
  %785 = getelementptr inbounds %struct.CompAtom, ptr %70, i64 %782, i32 4
  %786 = load i8, ptr %785, align 1
  %787 = and i8 %786, 7
  %788 = icmp eq i8 %787, 0
  br i1 %788, label %794, label %789

789:                                              ; preds = %781
  %790 = trunc i64 %782 to i16
  %791 = add nsw i32 %783, 1
  %792 = sext i32 %783 to i64
  %793 = getelementptr inbounds i16, ptr %220, i64 %792
  store i16 %790, ptr %793, align 2, !tbaa !44
  br label %794

794:                                              ; preds = %781, %789
  %795 = phi i32 [ %791, %789 ], [ %783, %781 ]
  %796 = or i64 %782, 1
  %797 = getelementptr inbounds %struct.CompAtom, ptr %70, i64 %796, i32 4
  %798 = load i8, ptr %797, align 1
  %799 = and i8 %798, 7
  %800 = icmp eq i8 %799, 0
  br i1 %800, label %806, label %801

801:                                              ; preds = %794
  %802 = trunc i64 %796 to i16
  %803 = add nsw i32 %795, 1
  %804 = sext i32 %795 to i64
  %805 = getelementptr inbounds i16, ptr %220, i64 %804
  store i16 %802, ptr %805, align 2, !tbaa !44
  br label %806

806:                                              ; preds = %801, %794
  %807 = phi i32 [ %803, %801 ], [ %795, %794 ]
  %808 = add nuw nsw i64 %782, 2
  %809 = add i64 %784, 2
  %810 = icmp eq i64 %809, %780
  br i1 %810, label %811, label %781

811:                                              ; preds = %806, %775
  %812 = phi i32 [ undef, %775 ], [ %807, %806 ]
  %813 = phi i64 [ 0, %775 ], [ %808, %806 ]
  %814 = phi i32 [ 0, %775 ], [ %807, %806 ]
  %815 = icmp eq i64 %777, 0
  br i1 %815, label %826, label %816

816:                                              ; preds = %811
  %817 = getelementptr inbounds %struct.CompAtom, ptr %70, i64 %813, i32 4
  %818 = load i8, ptr %817, align 1
  %819 = and i8 %818, 7
  %820 = icmp eq i8 %819, 0
  br i1 %820, label %826, label %821

821:                                              ; preds = %816
  %822 = trunc i64 %813 to i16
  %823 = add nsw i32 %814, 1
  %824 = sext i32 %814 to i64
  %825 = getelementptr inbounds i16, ptr %220, i64 %824
  store i16 %822, ptr %825, align 2, !tbaa !44
  br label %826

826:                                              ; preds = %816, %821, %811
  %827 = phi i32 [ %812, %811 ], [ %823, %821 ], [ %814, %816 ]
  %828 = icmp eq i32 %827, 0
  br i1 %828, label %836, label %829

829:                                              ; preds = %826
  %830 = add nsw i32 %827, -1
  %831 = sext i32 %830 to i64
  %832 = getelementptr inbounds i16, ptr %220, i64 %831
  %833 = load i16, ptr %832, align 2, !tbaa !44
  %834 = sext i32 %827 to i64
  %835 = getelementptr inbounds i16, ptr %220, i64 %834
  store i16 %833, ptr %835, align 2, !tbaa !44
  br label %836

836:                                              ; preds = %829, %826
  %837 = load i32, ptr @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4, !tbaa !5
  %838 = icmp ne i32 %837, 0
  %839 = icmp sgt i32 %827, 0
  %840 = and i1 %838, %839
  br i1 %840, label %841, label %905

841:                                              ; preds = %836
  %842 = zext i32 %827 to i64
  %843 = and i64 %842, 1
  %844 = icmp eq i32 %827, 1
  br i1 %844, label %879, label %845

845:                                              ; preds = %841
  %846 = and i64 %842, 4294967294
  br label %847

847:                                              ; preds = %874, %845
  %848 = phi i64 [ 0, %845 ], [ %876, %874 ]
  %849 = phi i32 [ 0, %845 ], [ %875, %874 ]
  %850 = phi i64 [ 0, %845 ], [ %877, %874 ]
  %851 = getelementptr inbounds i16, ptr %220, i64 %848
  %852 = load i16, ptr %851, align 2, !tbaa !44
  %853 = zext i16 %852 to i64
  %854 = getelementptr inbounds %struct.CompAtomExt, ptr %74, i64 %853
  %855 = load i32, ptr %854, align 4
  %856 = icmp sgt i32 %855, -1
  br i1 %856, label %857, label %861

857:                                              ; preds = %847
  %858 = add nsw i32 %849, 1
  %859 = sext i32 %849 to i64
  %860 = getelementptr inbounds i16, ptr %266, i64 %859
  store i16 %852, ptr %860, align 2, !tbaa !44
  br label %861

861:                                              ; preds = %847, %857
  %862 = phi i32 [ %849, %847 ], [ %858, %857 ]
  %863 = or i64 %848, 1
  %864 = getelementptr inbounds i16, ptr %220, i64 %863
  %865 = load i16, ptr %864, align 2, !tbaa !44
  %866 = zext i16 %865 to i64
  %867 = getelementptr inbounds %struct.CompAtomExt, ptr %74, i64 %866
  %868 = load i32, ptr %867, align 4
  %869 = icmp sgt i32 %868, -1
  br i1 %869, label %870, label %874

870:                                              ; preds = %861
  %871 = add nsw i32 %862, 1
  %872 = sext i32 %862 to i64
  %873 = getelementptr inbounds i16, ptr %266, i64 %872
  store i16 %865, ptr %873, align 2, !tbaa !44
  br label %874

874:                                              ; preds = %870, %861
  %875 = phi i32 [ %862, %861 ], [ %871, %870 ]
  %876 = add nuw nsw i64 %848, 2
  %877 = add i64 %850, 2
  %878 = icmp eq i64 %877, %846
  br i1 %878, label %879, label %847

879:                                              ; preds = %874, %841
  %880 = phi i32 [ undef, %841 ], [ %875, %874 ]
  %881 = phi i64 [ 0, %841 ], [ %876, %874 ]
  %882 = phi i32 [ 0, %841 ], [ %875, %874 ]
  %883 = icmp eq i64 %843, 0
  br i1 %883, label %895, label %884

884:                                              ; preds = %879
  %885 = getelementptr inbounds i16, ptr %220, i64 %881
  %886 = load i16, ptr %885, align 2, !tbaa !44
  %887 = zext i16 %886 to i64
  %888 = getelementptr inbounds %struct.CompAtomExt, ptr %74, i64 %887
  %889 = load i32, ptr %888, align 4
  %890 = icmp sgt i32 %889, -1
  br i1 %890, label %891, label %895

891:                                              ; preds = %884
  %892 = add nsw i32 %882, 1
  %893 = sext i32 %882 to i64
  %894 = getelementptr inbounds i16, ptr %266, i64 %893
  store i16 %886, ptr %894, align 2, !tbaa !44
  br label %895

895:                                              ; preds = %884, %891, %879
  %896 = phi i32 [ %880, %879 ], [ %882, %884 ], [ %892, %891 ]
  %897 = icmp eq i32 %896, 0
  br i1 %897, label %905, label %898

898:                                              ; preds = %895
  %899 = add nsw i32 %896, -1
  %900 = sext i32 %899 to i64
  %901 = getelementptr inbounds i16, ptr %266, i64 %900
  %902 = load i16, ptr %901, align 2, !tbaa !44
  %903 = sext i32 %896 to i64
  %904 = getelementptr inbounds i16, ptr %266, i64 %903
  store i16 %902, ptr %904, align 2, !tbaa !44
  br label %905

905:                                              ; preds = %773, %836, %898, %895
  %906 = phi i32 [ %827, %898 ], [ %827, %895 ], [ %827, %836 ], [ 0, %773 ]
  %907 = phi i32 [ %896, %898 ], [ 0, %895 ], [ 0, %836 ], [ 0, %773 ]
  %908 = load i32, ptr %14, align 8, !tbaa !17
  %909 = add nsw i32 %908, 1
  store i32 %909, ptr %14, align 8, !tbaa !17
  %910 = trunc i32 %65 to i16
  %911 = load ptr, ptr %9, align 8, !tbaa !46
  %912 = sext i32 %908 to i64
  %913 = getelementptr inbounds i16, ptr %911, i64 %912
  store i16 %910, ptr %913, align 2, !tbaa !44
  br label %924

914:                                              ; preds = %770
  %915 = load ptr, ptr %9, align 8, !tbaa !46
  %916 = load i32, ptr %14, align 8, !tbaa !17
  %917 = add nsw i32 %916, 1
  store i32 %917, ptr %14, align 8, !tbaa !17
  %918 = sext i32 %916 to i64
  %919 = getelementptr inbounds i16, ptr %915, i64 %918
  %920 = load i16, ptr %919, align 2, !tbaa !44
  %921 = zext i16 %920 to i32
  %922 = icmp eq i32 %65, %921
  br i1 %922, label %924, label %923

923:                                              ; preds = %914
  tail call void @_Z8NAMD_bugPKc(ptr noundef nonnull @.str)
  br label %924

924:                                              ; preds = %914, %923, %905
  %925 = phi i32 [ 0, %923 ], [ 0, %914 ], [ %906, %905 ]
  %926 = phi i32 [ 0, %923 ], [ 0, %914 ], [ %907, %905 ]
  %927 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %76, i64 0, i32 18, i32 1
  %928 = load ptr, ptr %927, align 8, !tbaa !222
  tail call void @_ZN14ResizeArrayRawI6VectorE6resizeEi(ptr noundef nonnull align 8 dereferenceable(36) %928, i32 noundef %65)
  %929 = load ptr, ptr %927, align 8, !tbaa !222
  %930 = load ptr, ptr %929, align 8, !tbaa !224
  %931 = sext i32 %65 to i64
  %932 = mul nsw i64 %931, 24
  tail call void @llvm.memset.p0.i64(ptr align 1 %930, i8 0, i64 %932, i1 false)
  %933 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 18
  %934 = load i32, ptr %933, align 4, !tbaa !48
  %935 = add nsw i32 %934, -1
  %936 = add nsw i32 %65, -1
  %937 = icmp sgt i32 %65, 1
  br i1 %937, label %938, label %3868

938:                                              ; preds = %924
  %939 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 16
  %940 = load i32, ptr %939, align 4, !tbaa !47
  %941 = getelementptr inbounds %class.Molecule, ptr %26, i64 0, i32 1
  %942 = getelementptr inbounds %class.Molecule, ptr %26, i64 0, i32 4
  %943 = getelementptr inbounds %class.Molecule, ptr %26, i64 0, i32 2
  %944 = getelementptr inbounds %class.Molecule, ptr %26, i64 0, i32 3
  %945 = ptrtoint ptr %450 to i64
  %946 = add nsw i32 %67, 30
  %947 = getelementptr inbounds %class.Pairlists, ptr %9, i64 0, i32 2
  %948 = ptrtoint ptr %496 to i64
  %949 = ptrtoint ptr %358 to i64
  %950 = ptrtoint ptr %404 to i64
  %951 = ptrtoint ptr %542 to i64
  %952 = ptrtoint ptr %588 to i64
  %953 = ptrtoint ptr %634 to i64
  %954 = ptrtoint ptr %680 to i64
  %955 = ptrtoint ptr %726 to i64
  %956 = ptrtoint ptr %772 to i64
  %957 = fmul double %31, 2.000000e+00
  %958 = fmul double %31, 4.000000e+00
  %959 = fmul double %31, 6.000000e+00
  %960 = fneg <2 x double> %49
  %961 = fneg <2 x double> %54
  %962 = sext i32 %925 to i64
  %963 = sext i32 %926 to i64
  %964 = insertelement <2 x double> poison, double %24, i64 0
  %965 = shufflevector <2 x double> %964, <2 x double> poison, <2 x i32> zeroinitializer
  %966 = extractelement <2 x double> %49, i64 1
  %967 = extractelement <2 x double> %54, i64 1
  %968 = extractelement <2 x double> %49, i64 1
  %969 = extractelement <2 x double> %54, i64 1
  %970 = extractelement <2 x double> %49, i64 1
  %971 = extractelement <2 x double> %54, i64 1
  br label %972

972:                                              ; preds = %938, %3853
  %973 = phi i32 [ 0, %938 ], [ %3864, %3853 ]
  %974 = phi i32 [ 0, %938 ], [ %3866, %3853 ]
  %975 = phi ptr [ null, %938 ], [ %3862, %3853 ]
  %976 = phi ptr [ null, %938 ], [ %3861, %3853 ]
  %977 = phi ptr [ null, %938 ], [ %3860, %3853 ]
  %978 = phi i32 [ 0, %938 ], [ %3859, %3853 ]
  %979 = phi i32 [ 0, %938 ], [ %3858, %3853 ]
  %980 = phi i32 [ 0, %938 ], [ %3857, %3853 ]
  %981 = phi i32 [ 0, %938 ], [ %3856, %3853 ]
  %982 = phi i32 [ 0, %938 ], [ %3855, %3853 ]
  %983 = phi i32 [ %940, %938 ], [ %3854, %3853 ]
  %984 = phi <2 x double> [ zeroinitializer, %938 ], [ %3865, %3853 ]
  %985 = sext i32 %974 to i64
  %986 = getelementptr inbounds %struct.CompAtom, ptr %68, i64 %985
  %987 = getelementptr inbounds %struct.CompAtomExt, ptr %72, i64 %985
  %988 = getelementptr inbounds %struct.CompAtom, ptr %68, i64 %985, i32 4
  %989 = load i8, ptr %988, align 1
  %990 = lshr i8 %989, 3
  %991 = and i8 %990, 15
  %992 = zext i8 %991 to i32
  %993 = icmp eq i8 %991, 0
  br i1 %993, label %1000, label %994

994:                                              ; preds = %972
  %995 = icmp eq i32 %983, 0
  br i1 %995, label %1000, label %996

996:                                              ; preds = %994
  %997 = add nsw i32 %983, -1
  %998 = add nsw i32 %974, -1
  %999 = add i32 %998, %992
  br label %3853

1000:                                             ; preds = %994, %972
  %1001 = phi i32 [ %983, %972 ], [ %935, %994 ]
  %1002 = load <2 x double>, ptr %986, align 8, !tbaa !19
  %1003 = fadd <2 x double> %16, %1002
  %1004 = getelementptr inbounds %class.Vector, ptr %986, i64 0, i32 2
  %1005 = load double, ptr %1004, align 8, !tbaa !49
  %1006 = fadd double %18, %1005
  %1007 = getelementptr inbounds %struct.CompAtom, ptr %68, i64 %985, i32 3
  %1008 = load i8, ptr %1007, align 2, !tbaa !51
  %1009 = zext i8 %1008 to i32
  %1010 = add nsw i32 %974, %992
  %1011 = select i1 %993, i32 %978, i32 %1010
  br i1 %173, label %2922, label %1012

1012:                                             ; preds = %1000
  %1013 = load i32, ptr %987, align 4
  %1014 = shl i32 %1013, 2
  %1015 = ashr exact i32 %1014, 2
  %1016 = load ptr, ptr %941, align 8, !tbaa !52
  %1017 = sext i32 %1015 to i64
  %1018 = getelementptr inbounds %class.ExclusionCheck, ptr %1016, i64 %1017
  %1019 = load i32, ptr %1018, align 8, !tbaa !54
  %1020 = getelementptr inbounds %class.ExclusionCheck, ptr %1016, i64 %1017, i32 1
  %1021 = load i32, ptr %1020, align 4, !tbaa !56
  %1022 = getelementptr inbounds %class.ExclusionCheck, ptr %1016, i64 %1017, i32 2
  %1023 = load ptr, ptr %1022, align 8, !tbaa !57
  %1024 = icmp eq ptr %1023, null
  br i1 %1024, label %1029, label %1025

1025:                                             ; preds = %1012
  %1026 = sext i32 %1019 to i64
  %1027 = sub nsw i64 0, %1026
  %1028 = getelementptr inbounds i8, ptr %1023, i64 %1027
  br label %1255

1029:                                             ; preds = %1012
  %1030 = icmp eq ptr %975, null
  br i1 %1030, label %1118, label %1031

1031:                                             ; preds = %1029
  %1032 = load i32, ptr %976, align 4, !tbaa !5
  %1033 = icmp slt i32 %1032, 1
  br i1 %1033, label %1081, label %1034

1034:                                             ; preds = %1031
  %1035 = add nuw i32 %1032, 1
  %1036 = zext i32 %1035 to i64
  %1037 = add nsw i64 %1036, -1
  %1038 = add nsw i64 %1036, -2
  %1039 = and i64 %1037, 3
  %1040 = icmp ult i64 %1038, 3
  br i1 %1040, label %1068, label %1041

1041:                                             ; preds = %1034
  %1042 = and i64 %1037, -4
  br label %1043

1043:                                             ; preds = %1043, %1041
  %1044 = phi i64 [ 1, %1041 ], [ %1065, %1043 ]
  %1045 = phi i64 [ 0, %1041 ], [ %1066, %1043 ]
  %1046 = getelementptr inbounds i32, ptr %976, i64 %1044
  %1047 = load i32, ptr %1046, align 4, !tbaa !5
  %1048 = sext i32 %1047 to i64
  %1049 = getelementptr inbounds i8, ptr %975, i64 %1048
  store i8 0, ptr %1049, align 1, !tbaa !58
  %1050 = add nuw nsw i64 %1044, 1
  %1051 = getelementptr inbounds i32, ptr %976, i64 %1050
  %1052 = load i32, ptr %1051, align 4, !tbaa !5
  %1053 = sext i32 %1052 to i64
  %1054 = getelementptr inbounds i8, ptr %975, i64 %1053
  store i8 0, ptr %1054, align 1, !tbaa !58
  %1055 = add nuw nsw i64 %1044, 2
  %1056 = getelementptr inbounds i32, ptr %976, i64 %1055
  %1057 = load i32, ptr %1056, align 4, !tbaa !5
  %1058 = sext i32 %1057 to i64
  %1059 = getelementptr inbounds i8, ptr %975, i64 %1058
  store i8 0, ptr %1059, align 1, !tbaa !58
  %1060 = add nuw nsw i64 %1044, 3
  %1061 = getelementptr inbounds i32, ptr %976, i64 %1060
  %1062 = load i32, ptr %1061, align 4, !tbaa !5
  %1063 = sext i32 %1062 to i64
  %1064 = getelementptr inbounds i8, ptr %975, i64 %1063
  store i8 0, ptr %1064, align 1, !tbaa !58
  %1065 = add nuw nsw i64 %1044, 4
  %1066 = add i64 %1045, 4
  %1067 = icmp eq i64 %1066, %1042
  br i1 %1067, label %1068, label %1043

1068:                                             ; preds = %1043, %1034
  %1069 = phi i64 [ 1, %1034 ], [ %1065, %1043 ]
  %1070 = icmp eq i64 %1039, 0
  br i1 %1070, label %1081, label %1071

1071:                                             ; preds = %1068, %1071
  %1072 = phi i64 [ %1078, %1071 ], [ %1069, %1068 ]
  %1073 = phi i64 [ %1079, %1071 ], [ 0, %1068 ]
  %1074 = getelementptr inbounds i32, ptr %976, i64 %1072
  %1075 = load i32, ptr %1074, align 4, !tbaa !5
  %1076 = sext i32 %1075 to i64
  %1077 = getelementptr inbounds i8, ptr %975, i64 %1076
  store i8 0, ptr %1077, align 1, !tbaa !58
  %1078 = add nuw nsw i64 %1072, 1
  %1079 = add i64 %1073, 1
  %1080 = icmp eq i64 %1079, %1039
  br i1 %1080, label %1081, label %1071, !llvm.loop !344

1081:                                             ; preds = %1068, %1071, %1031
  %1082 = load i32, ptr %977, align 4, !tbaa !5
  %1083 = icmp slt i32 %1082, 1
  br i1 %1083, label %1138, label %1084

1084:                                             ; preds = %1081
  %1085 = add nuw i32 %1082, 1
  %1086 = zext i32 %1085 to i64
  %1087 = add nsw i64 %1086, -1
  %1088 = add nsw i64 %1086, -2
  %1089 = and i64 %1087, 3
  %1090 = icmp ult i64 %1088, 3
  br i1 %1090, label %1125, label %1091

1091:                                             ; preds = %1084
  %1092 = and i64 %1087, -4
  br label %1093

1093:                                             ; preds = %1093, %1091
  %1094 = phi i64 [ 1, %1091 ], [ %1115, %1093 ]
  %1095 = phi i64 [ 0, %1091 ], [ %1116, %1093 ]
  %1096 = getelementptr inbounds i32, ptr %977, i64 %1094
  %1097 = load i32, ptr %1096, align 4, !tbaa !5
  %1098 = sext i32 %1097 to i64
  %1099 = getelementptr inbounds i8, ptr %975, i64 %1098
  store i8 0, ptr %1099, align 1, !tbaa !58
  %1100 = add nuw nsw i64 %1094, 1
  %1101 = getelementptr inbounds i32, ptr %977, i64 %1100
  %1102 = load i32, ptr %1101, align 4, !tbaa !5
  %1103 = sext i32 %1102 to i64
  %1104 = getelementptr inbounds i8, ptr %975, i64 %1103
  store i8 0, ptr %1104, align 1, !tbaa !58
  %1105 = add nuw nsw i64 %1094, 2
  %1106 = getelementptr inbounds i32, ptr %977, i64 %1105
  %1107 = load i32, ptr %1106, align 4, !tbaa !5
  %1108 = sext i32 %1107 to i64
  %1109 = getelementptr inbounds i8, ptr %975, i64 %1108
  store i8 0, ptr %1109, align 1, !tbaa !58
  %1110 = add nuw nsw i64 %1094, 3
  %1111 = getelementptr inbounds i32, ptr %977, i64 %1110
  %1112 = load i32, ptr %1111, align 4, !tbaa !5
  %1113 = sext i32 %1112 to i64
  %1114 = getelementptr inbounds i8, ptr %975, i64 %1113
  store i8 0, ptr %1114, align 1, !tbaa !58
  %1115 = add nuw nsw i64 %1094, 4
  %1116 = add i64 %1095, 4
  %1117 = icmp eq i64 %1116, %1092
  br i1 %1117, label %1125, label %1093

1118:                                             ; preds = %1029
  %1119 = load i32, ptr %942, align 8, !tbaa !61
  %1120 = tail call i32 @llvm.smax.i32(i32 %1119, i32 -1)
  %1121 = sext i32 %1120 to i64
  %1122 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %1121) #12
  %1123 = load i32, ptr %942, align 8, !tbaa !61
  %1124 = sext i32 %1123 to i64
  tail call void @llvm.memset.p0.i64(ptr nonnull align 1 %1122, i8 0, i64 %1124, i1 false)
  br label %1138

1125:                                             ; preds = %1093, %1084
  %1126 = phi i64 [ 1, %1084 ], [ %1115, %1093 ]
  %1127 = icmp eq i64 %1089, 0
  br i1 %1127, label %1138, label %1128

1128:                                             ; preds = %1125, %1128
  %1129 = phi i64 [ %1135, %1128 ], [ %1126, %1125 ]
  %1130 = phi i64 [ %1136, %1128 ], [ 0, %1125 ]
  %1131 = getelementptr inbounds i32, ptr %977, i64 %1129
  %1132 = load i32, ptr %1131, align 4, !tbaa !5
  %1133 = sext i32 %1132 to i64
  %1134 = getelementptr inbounds i8, ptr %975, i64 %1133
  store i8 0, ptr %1134, align 1, !tbaa !58
  %1135 = add nuw nsw i64 %1129, 1
  %1136 = add i64 %1130, 1
  %1137 = icmp eq i64 %1136, %1089
  br i1 %1137, label %1138, label %1128, !llvm.loop !345

1138:                                             ; preds = %1125, %1128, %1081, %1118
  %1139 = phi ptr [ %1122, %1118 ], [ %975, %1081 ], [ %975, %1128 ], [ %975, %1125 ]
  %1140 = load i32, ptr %987, align 4
  %1141 = shl i32 %1140, 2
  %1142 = ashr exact i32 %1141, 2
  %1143 = load ptr, ptr %943, align 8, !tbaa !63
  %1144 = sext i32 %1142 to i64
  %1145 = getelementptr inbounds ptr, ptr %1143, i64 %1144
  %1146 = load ptr, ptr %1145, align 8, !tbaa !23
  %1147 = load i32, ptr %1146, align 4, !tbaa !5
  %1148 = icmp slt i32 %1147, 1
  br i1 %1148, label %1201, label %1149

1149:                                             ; preds = %1138
  %1150 = add nuw i32 %1147, 1
  %1151 = zext i32 %1150 to i64
  %1152 = add nsw i64 %1151, -1
  %1153 = add nsw i64 %1151, -2
  %1154 = and i64 %1152, 3
  %1155 = icmp ult i64 %1153, 3
  br i1 %1155, label %1183, label %1156

1156:                                             ; preds = %1149
  %1157 = and i64 %1152, -4
  br label %1158

1158:                                             ; preds = %1158, %1156
  %1159 = phi i64 [ 1, %1156 ], [ %1180, %1158 ]
  %1160 = phi i64 [ 0, %1156 ], [ %1181, %1158 ]
  %1161 = getelementptr inbounds i32, ptr %1146, i64 %1159
  %1162 = load i32, ptr %1161, align 4, !tbaa !5
  %1163 = sext i32 %1162 to i64
  %1164 = getelementptr inbounds i8, ptr %1139, i64 %1163
  store i8 1, ptr %1164, align 1, !tbaa !58
  %1165 = add nuw nsw i64 %1159, 1
  %1166 = getelementptr inbounds i32, ptr %1146, i64 %1165
  %1167 = load i32, ptr %1166, align 4, !tbaa !5
  %1168 = sext i32 %1167 to i64
  %1169 = getelementptr inbounds i8, ptr %1139, i64 %1168
  store i8 1, ptr %1169, align 1, !tbaa !58
  %1170 = add nuw nsw i64 %1159, 2
  %1171 = getelementptr inbounds i32, ptr %1146, i64 %1170
  %1172 = load i32, ptr %1171, align 4, !tbaa !5
  %1173 = sext i32 %1172 to i64
  %1174 = getelementptr inbounds i8, ptr %1139, i64 %1173
  store i8 1, ptr %1174, align 1, !tbaa !58
  %1175 = add nuw nsw i64 %1159, 3
  %1176 = getelementptr inbounds i32, ptr %1146, i64 %1175
  %1177 = load i32, ptr %1176, align 4, !tbaa !5
  %1178 = sext i32 %1177 to i64
  %1179 = getelementptr inbounds i8, ptr %1139, i64 %1178
  store i8 1, ptr %1179, align 1, !tbaa !58
  %1180 = add nuw nsw i64 %1159, 4
  %1181 = add i64 %1160, 4
  %1182 = icmp eq i64 %1181, %1157
  br i1 %1182, label %1183, label %1158

1183:                                             ; preds = %1158, %1149
  %1184 = phi i64 [ 1, %1149 ], [ %1180, %1158 ]
  %1185 = icmp eq i64 %1154, 0
  br i1 %1185, label %1196, label %1186

1186:                                             ; preds = %1183, %1186
  %1187 = phi i64 [ %1193, %1186 ], [ %1184, %1183 ]
  %1188 = phi i64 [ %1194, %1186 ], [ 0, %1183 ]
  %1189 = getelementptr inbounds i32, ptr %1146, i64 %1187
  %1190 = load i32, ptr %1189, align 4, !tbaa !5
  %1191 = sext i32 %1190 to i64
  %1192 = getelementptr inbounds i8, ptr %1139, i64 %1191
  store i8 1, ptr %1192, align 1, !tbaa !58
  %1193 = add nuw nsw i64 %1187, 1
  %1194 = add i64 %1188, 1
  %1195 = icmp eq i64 %1194, %1154
  br i1 %1195, label %1196, label %1186, !llvm.loop !346

1196:                                             ; preds = %1186, %1183
  %1197 = load i32, ptr %987, align 4
  %1198 = shl i32 %1197, 2
  %1199 = ashr exact i32 %1198, 2
  %1200 = sext i32 %1199 to i64
  br label %1201

1201:                                             ; preds = %1196, %1138
  %1202 = phi i64 [ %1200, %1196 ], [ %1144, %1138 ]
  %1203 = load ptr, ptr %944, align 8, !tbaa !65
  %1204 = getelementptr inbounds ptr, ptr %1203, i64 %1202
  %1205 = load ptr, ptr %1204, align 8, !tbaa !23
  %1206 = load i32, ptr %1205, align 4, !tbaa !5
  %1207 = icmp slt i32 %1206, 1
  br i1 %1207, label %1255, label %1208

1208:                                             ; preds = %1201
  %1209 = add nuw i32 %1206, 1
  %1210 = zext i32 %1209 to i64
  %1211 = add nsw i64 %1210, -1
  %1212 = add nsw i64 %1210, -2
  %1213 = and i64 %1211, 3
  %1214 = icmp ult i64 %1212, 3
  br i1 %1214, label %1242, label %1215

1215:                                             ; preds = %1208
  %1216 = and i64 %1211, -4
  br label %1217

1217:                                             ; preds = %1217, %1215
  %1218 = phi i64 [ 1, %1215 ], [ %1239, %1217 ]
  %1219 = phi i64 [ 0, %1215 ], [ %1240, %1217 ]
  %1220 = getelementptr inbounds i32, ptr %1205, i64 %1218
  %1221 = load i32, ptr %1220, align 4, !tbaa !5
  %1222 = sext i32 %1221 to i64
  %1223 = getelementptr inbounds i8, ptr %1139, i64 %1222
  store i8 2, ptr %1223, align 1, !tbaa !58
  %1224 = add nuw nsw i64 %1218, 1
  %1225 = getelementptr inbounds i32, ptr %1205, i64 %1224
  %1226 = load i32, ptr %1225, align 4, !tbaa !5
  %1227 = sext i32 %1226 to i64
  %1228 = getelementptr inbounds i8, ptr %1139, i64 %1227
  store i8 2, ptr %1228, align 1, !tbaa !58
  %1229 = add nuw nsw i64 %1218, 2
  %1230 = getelementptr inbounds i32, ptr %1205, i64 %1229
  %1231 = load i32, ptr %1230, align 4, !tbaa !5
  %1232 = sext i32 %1231 to i64
  %1233 = getelementptr inbounds i8, ptr %1139, i64 %1232
  store i8 2, ptr %1233, align 1, !tbaa !58
  %1234 = add nuw nsw i64 %1218, 3
  %1235 = getelementptr inbounds i32, ptr %1205, i64 %1234
  %1236 = load i32, ptr %1235, align 4, !tbaa !5
  %1237 = sext i32 %1236 to i64
  %1238 = getelementptr inbounds i8, ptr %1139, i64 %1237
  store i8 2, ptr %1238, align 1, !tbaa !58
  %1239 = add nuw nsw i64 %1218, 4
  %1240 = add i64 %1219, 4
  %1241 = icmp eq i64 %1240, %1216
  br i1 %1241, label %1242, label %1217

1242:                                             ; preds = %1217, %1208
  %1243 = phi i64 [ 1, %1208 ], [ %1239, %1217 ]
  %1244 = icmp eq i64 %1213, 0
  br i1 %1244, label %1255, label %1245

1245:                                             ; preds = %1242, %1245
  %1246 = phi i64 [ %1252, %1245 ], [ %1243, %1242 ]
  %1247 = phi i64 [ %1253, %1245 ], [ 0, %1242 ]
  %1248 = getelementptr inbounds i32, ptr %1205, i64 %1246
  %1249 = load i32, ptr %1248, align 4, !tbaa !5
  %1250 = sext i32 %1249 to i64
  %1251 = getelementptr inbounds i8, ptr %1139, i64 %1250
  store i8 2, ptr %1251, align 1, !tbaa !58
  %1252 = add nuw nsw i64 %1246, 1
  %1253 = add i64 %1247, 1
  %1254 = icmp eq i64 %1253, %1213
  br i1 %1254, label %1255, label %1245, !llvm.loop !347

1255:                                             ; preds = %1242, %1245, %1201, %1025
  %1256 = phi ptr [ %1028, %1025 ], [ %1139, %1201 ], [ %1139, %1245 ], [ %1139, %1242 ]
  %1257 = phi ptr [ %977, %1025 ], [ %1205, %1201 ], [ %1205, %1245 ], [ %1205, %1242 ]
  %1258 = phi ptr [ %976, %1025 ], [ %1146, %1201 ], [ %1146, %1245 ], [ %1146, %1242 ]
  %1259 = phi ptr [ %975, %1025 ], [ %1139, %1201 ], [ %1139, %1245 ], [ %1139, %1242 ]
  %1260 = load i8, ptr %988, align 1
  %1261 = and i8 %1260, 7
  %1262 = icmp eq i8 %1261, 0
  br i1 %1262, label %1556, label %1263

1263:                                             ; preds = %1255
  %1264 = load i32, ptr @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4, !tbaa !5
  %1265 = icmp eq i32 %1264, 0
  br i1 %1265, label %1269, label %1266

1266:                                             ; preds = %1263
  %1267 = load i32, ptr %987, align 4
  %1268 = icmp slt i32 %1267, 0
  br label %1269

1269:                                             ; preds = %1266, %1263
  %1270 = phi i1 [ false, %1263 ], [ %1268, %1266 ]
  %1271 = and i8 %1260, 120
  %1272 = icmp eq i8 %1271, 0
  br i1 %1272, label %1304, label %1273

1273:                                             ; preds = %1269
  %1274 = icmp slt i32 %979, %925
  br i1 %1274, label %1275, label %1288

1275:                                             ; preds = %1273
  %1276 = sext i32 %979 to i64
  br label %1277

1277:                                             ; preds = %1275, %1283
  %1278 = phi i64 [ %1276, %1275 ], [ %1284, %1283 ]
  %1279 = getelementptr inbounds i16, ptr %220, i64 %1278
  %1280 = load i16, ptr %1279, align 2, !tbaa !44
  %1281 = zext i16 %1280 to i32
  %1282 = icmp sgt i32 %1011, %1281
  br i1 %1282, label %1283, label %1286

1283:                                             ; preds = %1277
  %1284 = add nsw i64 %1278, 1
  %1285 = icmp eq i64 %1284, %962
  br i1 %1285, label %1288, label %1277

1286:                                             ; preds = %1277
  %1287 = trunc i64 %1278 to i32
  br label %1288

1288:                                             ; preds = %1283, %1286, %1273
  %1289 = phi i32 [ %979, %1273 ], [ %1287, %1286 ], [ %925, %1283 ]
  %1290 = icmp slt i32 %980, %926
  br i1 %1290, label %1291, label %1304

1291:                                             ; preds = %1288
  %1292 = sext i32 %980 to i64
  br label %1293

1293:                                             ; preds = %1291, %1299
  %1294 = phi i64 [ %1292, %1291 ], [ %1300, %1299 ]
  %1295 = getelementptr inbounds i16, ptr %266, i64 %1294
  %1296 = load i16, ptr %1295, align 2, !tbaa !44
  %1297 = zext i16 %1296 to i32
  %1298 = icmp sgt i32 %1011, %1297
  br i1 %1298, label %1299, label %1302

1299:                                             ; preds = %1293
  %1300 = add nsw i64 %1294, 1
  %1301 = icmp eq i64 %1300, %963
  br i1 %1301, label %1304, label %1293

1302:                                             ; preds = %1293
  %1303 = trunc i64 %1294 to i32
  br label %1304

1304:                                             ; preds = %1299, %1302, %1288, %1269
  %1305 = phi i32 [ %980, %1269 ], [ %980, %1288 ], [ %1303, %1302 ], [ %926, %1299 ]
  %1306 = phi i32 [ %979, %1269 ], [ %1289, %1288 ], [ %1289, %1302 ], [ %1289, %1299 ]
  %1307 = add nsw i32 %974, 1
  %1308 = icmp slt i32 %1307, %1011
  br i1 %1308, label %1309, label %1374

1309:                                             ; preds = %1304
  %1310 = xor i32 %974, -1
  %1311 = add i32 %1011, %1310
  %1312 = zext i32 %1311 to i64
  %1313 = icmp ult i32 %1311, 8
  br i1 %1313, label %1363, label %1314

1314:                                             ; preds = %1309
  %1315 = icmp ult i32 %1311, 64
  br i1 %1315, label %1344, label %1316

1316:                                             ; preds = %1314
  %1317 = and i64 %1312, 4294967232
  %1318 = trunc i32 %1307 to i16
  %1319 = insertelement <16 x i16> poison, i16 %1318, i64 0
  %1320 = shufflevector <16 x i16> %1319, <16 x i16> poison, <16 x i32> zeroinitializer
  %1321 = add <16 x i16> %1320, <i16 0, i16 1, i16 2, i16 3, i16 4, i16 5, i16 6, i16 7, i16 8, i16 9, i16 10, i16 11, i16 12, i16 13, i16 14, i16 15>
  %1322 = trunc i64 %1317 to i32
  %1323 = add i32 %1307, %1322
  br label %1324

1324:                                             ; preds = %1324, %1316
  %1325 = phi i64 [ 0, %1316 ], [ %1334, %1324 ]
  %1326 = phi <16 x i16> [ %1321, %1316 ], [ %1335, %1324 ]
  %1327 = add <16 x i16> %1326, <i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16>
  %1328 = add <16 x i16> %1326, <i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32>
  %1329 = add <16 x i16> %1326, <i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48>
  %1330 = getelementptr inbounds i16, ptr %450, i64 %1325
  store <16 x i16> %1326, ptr %1330, align 2, !tbaa !44
  %1331 = getelementptr inbounds i16, ptr %1330, i64 16
  store <16 x i16> %1327, ptr %1331, align 2, !tbaa !44
  %1332 = getelementptr inbounds i16, ptr %1330, i64 32
  store <16 x i16> %1328, ptr %1332, align 2, !tbaa !44
  %1333 = getelementptr inbounds i16, ptr %1330, i64 48
  store <16 x i16> %1329, ptr %1333, align 2, !tbaa !44
  %1334 = add nuw i64 %1325, 64
  %1335 = add <16 x i16> %1326, <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>
  %1336 = icmp eq i64 %1334, %1317
  br i1 %1336, label %1337, label %1324, !llvm.loop !348

1337:                                             ; preds = %1324
  %1338 = icmp eq i64 %1317, %1312
  br i1 %1338, label %1374, label %1339

1339:                                             ; preds = %1337
  %1340 = trunc i64 %1317 to i32
  %1341 = add i32 %1307, %1340
  %1342 = and i64 %1312, 56
  %1343 = icmp eq i64 %1342, 0
  br i1 %1343, label %1363, label %1344

1344:                                             ; preds = %1314, %1339
  %1345 = phi i32 [ %1323, %1339 ], [ %1307, %1314 ]
  %1346 = phi i64 [ %1317, %1339 ], [ 0, %1314 ]
  %1347 = and i64 %1312, 4294967288
  %1348 = trunc i64 %1347 to i32
  %1349 = add i32 %1307, %1348
  %1350 = trunc i32 %1345 to i16
  %1351 = insertelement <8 x i16> poison, i16 %1350, i64 0
  %1352 = shufflevector <8 x i16> %1351, <8 x i16> poison, <8 x i32> zeroinitializer
  %1353 = add <8 x i16> %1352, <i16 0, i16 1, i16 2, i16 3, i16 4, i16 5, i16 6, i16 7>
  br label %1354

1354:                                             ; preds = %1354, %1344
  %1355 = phi i64 [ %1346, %1344 ], [ %1358, %1354 ]
  %1356 = phi <8 x i16> [ %1353, %1344 ], [ %1359, %1354 ]
  %1357 = getelementptr inbounds i16, ptr %450, i64 %1355
  store <8 x i16> %1356, ptr %1357, align 2, !tbaa !44
  %1358 = add nuw i64 %1355, 8
  %1359 = add <8 x i16> %1356, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %1360 = icmp eq i64 %1358, %1347
  br i1 %1360, label %1361, label %1354, !llvm.loop !349

1361:                                             ; preds = %1354
  %1362 = icmp eq i64 %1347, %1312
  br i1 %1362, label %1374, label %1363

1363:                                             ; preds = %1309, %1339, %1361
  %1364 = phi i64 [ 0, %1309 ], [ %1317, %1339 ], [ %1347, %1361 ]
  %1365 = phi i32 [ %1307, %1309 ], [ %1341, %1339 ], [ %1349, %1361 ]
  br label %1366

1366:                                             ; preds = %1363, %1366
  %1367 = phi i64 [ %1370, %1366 ], [ %1364, %1363 ]
  %1368 = phi i32 [ %1372, %1366 ], [ %1365, %1363 ]
  %1369 = trunc i32 %1368 to i16
  %1370 = add nuw nsw i64 %1367, 1
  %1371 = getelementptr inbounds i16, ptr %450, i64 %1367
  store i16 %1369, ptr %1371, align 2, !tbaa !44
  %1372 = add nsw i32 %1368, 1
  %1373 = icmp eq i64 %1370, %1312
  br i1 %1373, label %1374, label %1366, !llvm.loop !350

1374:                                             ; preds = %1366, %1337, %1361, %1304
  %1375 = phi i32 [ 0, %1304 ], [ %1311, %1361 ], [ %1311, %1337 ], [ %1311, %1366 ]
  %1376 = zext i32 %1375 to i64
  %1377 = getelementptr inbounds i16, ptr %450, i64 %1376
  %1378 = select i1 %1270, ptr %266, ptr %220
  %1379 = select i1 %1270, i32 %1305, i32 %1306
  %1380 = select i1 %1270, i32 %926, i32 %925
  %1381 = icmp slt i32 %1379, %1380
  br i1 %1381, label %1382, label %1541

1382:                                             ; preds = %1374
  %1383 = sub nsw i32 %1380, %1379
  %1384 = icmp sgt i32 %1383, 6
  br i1 %1384, label %1385, label %1478

1385:                                             ; preds = %1382
  %1386 = add nsw i32 %1380, -2
  %1387 = add nsw i32 %1379, 2
  %1388 = icmp slt i32 %1387, %1386
  br i1 %1388, label %1389, label %1478

1389:                                             ; preds = %1385
  %1390 = add nsw i32 %1379, 1
  %1391 = sext i32 %1390 to i64
  %1392 = getelementptr inbounds i16, ptr %1378, i64 %1391
  %1393 = load i16, ptr %1392, align 2, !tbaa !44
  %1394 = zext i16 %1393 to i64
  %1395 = getelementptr inbounds %struct.CompAtom, ptr %70, i64 %1394
  %1396 = getelementptr inbounds %class.Vector, ptr %1395, i64 0, i32 2
  %1397 = load double, ptr %1396, align 8, !tbaa !49
  %1398 = sext i32 %1379 to i64
  %1399 = getelementptr inbounds i16, ptr %1378, i64 %1398
  %1400 = load i16, ptr %1399, align 2, !tbaa !44
  %1401 = zext i16 %1400 to i64
  %1402 = getelementptr inbounds %struct.CompAtom, ptr %70, i64 %1401
  %1403 = getelementptr inbounds %class.Vector, ptr %1402, i64 0, i32 2
  %1404 = load double, ptr %1403, align 8, !tbaa !49
  %1405 = getelementptr inbounds %class.Vector, ptr %1395, i64 0, i32 1
  %1406 = load double, ptr %1405, align 8, !tbaa !67
  %1407 = getelementptr inbounds %class.Vector, ptr %1402, i64 0, i32 1
  %1408 = load double, ptr %1407, align 8, !tbaa !67
  %1409 = load double, ptr %1395, align 8, !tbaa !68
  %1410 = load double, ptr %1402, align 8, !tbaa !68
  %1411 = sext i32 %1387 to i64
  %1412 = sext i32 %1386 to i64
  %1413 = insertelement <2 x double> poison, double %1397, i64 0
  %1414 = insertelement <2 x double> %1413, double %1404, i64 1
  %1415 = insertelement <2 x double> poison, double %1406, i64 0
  %1416 = insertelement <2 x double> %1415, double %1408, i64 1
  %1417 = insertelement <2 x double> poison, double %1409, i64 0
  %1418 = insertelement <2 x double> %1417, double %1410, i64 1
  %1419 = insertelement <2 x double> poison, double %1006, i64 0
  %1420 = shufflevector <2 x double> %1419, <2 x double> poison, <2 x i32> zeroinitializer
  %1421 = shufflevector <2 x double> %1003, <2 x double> poison, <2 x i32> <i32 1, i32 1>
  %1422 = shufflevector <2 x double> %1003, <2 x double> poison, <2 x i32> zeroinitializer
  br label %1423

1423:                                             ; preds = %1389, %1423
  %1424 = phi i64 [ %1411, %1389 ], [ %1469, %1423 ]
  %1425 = phi i32 [ %1379, %1389 ], [ %1471, %1423 ]
  %1426 = phi i32 [ 0, %1389 ], [ %1468, %1423 ]
  %1427 = phi i16 [ %1400, %1389 ], [ %1434, %1423 ]
  %1428 = phi i16 [ %1393, %1389 ], [ %1438, %1423 ]
  %1429 = phi <2 x double> [ %1414, %1389 ], [ %1473, %1423 ]
  %1430 = phi <2 x double> [ %1416, %1389 ], [ %1475, %1423 ]
  %1431 = phi <2 x double> [ %1418, %1389 ], [ %1477, %1423 ]
  %1432 = fsub <2 x double> %1420, %1429
  %1433 = getelementptr inbounds i16, ptr %1378, i64 %1424
  %1434 = load i16, ptr %1433, align 2, !tbaa !44
  %1435 = add nsw i32 %1425, 3
  %1436 = sext i32 %1435 to i64
  %1437 = getelementptr inbounds i16, ptr %1378, i64 %1436
  %1438 = load i16, ptr %1437, align 2, !tbaa !44
  %1439 = zext i16 %1434 to i64
  %1440 = getelementptr inbounds %struct.CompAtom, ptr %70, i64 %1439
  %1441 = load double, ptr %1440, align 8, !tbaa !68
  %1442 = zext i16 %1438 to i64
  %1443 = getelementptr inbounds %struct.CompAtom, ptr %70, i64 %1442
  %1444 = load double, ptr %1443, align 8, !tbaa !68
  %1445 = getelementptr inbounds %class.Vector, ptr %1440, i64 0, i32 1
  %1446 = load double, ptr %1445, align 8, !tbaa !67
  %1447 = getelementptr inbounds %class.Vector, ptr %1443, i64 0, i32 1
  %1448 = load double, ptr %1447, align 8, !tbaa !67
  %1449 = getelementptr inbounds %class.Vector, ptr %1440, i64 0, i32 2
  %1450 = load double, ptr %1449, align 8, !tbaa !49
  %1451 = getelementptr inbounds %class.Vector, ptr %1443, i64 0, i32 2
  %1452 = load double, ptr %1451, align 8, !tbaa !49
  %1453 = fsub <2 x double> %1422, %1431
  %1454 = fmul <2 x double> %1453, %1453
  %1455 = fsub <2 x double> %1421, %1430
  %1456 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %1455, <2 x double> %1455, <2 x double> %1454)
  %1457 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %1432, <2 x double> %1432, <2 x double> %1456)
  %1458 = fcmp olt <2 x double> %1457, %965
  %1459 = zext i32 %1426 to i64
  %1460 = getelementptr inbounds i16, ptr %312, i64 %1459
  store i16 %1427, ptr %1460, align 2, !tbaa !44
  %1461 = extractelement <2 x i1> %1458, i64 1
  %1462 = zext i1 %1461 to i32
  %1463 = add nuw nsw i32 %1426, %1462
  %1464 = zext i32 %1463 to i64
  %1465 = getelementptr inbounds i16, ptr %312, i64 %1464
  store i16 %1428, ptr %1465, align 2, !tbaa !44
  %1466 = extractelement <2 x i1> %1458, i64 0
  %1467 = zext i1 %1466 to i32
  %1468 = add i32 %1463, %1467
  %1469 = add nsw i64 %1424, 2
  %1470 = icmp slt i64 %1469, %1412
  %1471 = trunc i64 %1424 to i32
  %1472 = insertelement <2 x double> poison, double %1452, i64 0
  %1473 = insertelement <2 x double> %1472, double %1450, i64 1
  %1474 = insertelement <2 x double> poison, double %1448, i64 0
  %1475 = insertelement <2 x double> %1474, double %1446, i64 1
  %1476 = insertelement <2 x double> poison, double %1444, i64 0
  %1477 = insertelement <2 x double> %1476, double %1441, i64 1
  br i1 %1470, label %1423, label %1478

1478:                                             ; preds = %1423, %1385, %1382
  %1479 = phi i32 [ 0, %1382 ], [ 0, %1385 ], [ %1468, %1423 ]
  %1480 = phi i32 [ %1379, %1382 ], [ %1379, %1385 ], [ %1471, %1423 ]
  %1481 = icmp slt i32 %1480, %1380
  br i1 %1481, label %1482, label %1487

1482:                                             ; preds = %1478
  %1483 = sext i32 %1480 to i64
  %1484 = sext i32 %1380 to i64
  %1485 = extractelement <2 x double> %1003, i64 0
  %1486 = extractelement <2 x double> %1003, i64 1
  br label %1492

1487:                                             ; preds = %1515, %1478
  %1488 = phi i32 [ %1479, %1478 ], [ %1516, %1515 ]
  %1489 = icmp sgt i32 %1488, 0
  br i1 %1489, label %1490, label %1541

1490:                                             ; preds = %1487
  %1491 = zext i32 %1488 to i64
  br label %1519

1492:                                             ; preds = %1482, %1515
  %1493 = phi i64 [ %1483, %1482 ], [ %1517, %1515 ]
  %1494 = phi i32 [ %1479, %1482 ], [ %1516, %1515 ]
  %1495 = getelementptr inbounds i16, ptr %1378, i64 %1493
  %1496 = load i16, ptr %1495, align 2, !tbaa !44
  %1497 = zext i16 %1496 to i64
  %1498 = getelementptr inbounds %struct.CompAtom, ptr %70, i64 %1497
  %1499 = load double, ptr %1498, align 8, !tbaa !68
  %1500 = getelementptr inbounds %class.Vector, ptr %1498, i64 0, i32 1
  %1501 = load double, ptr %1500, align 8, !tbaa !67
  %1502 = getelementptr inbounds %class.Vector, ptr %1498, i64 0, i32 2
  %1503 = load double, ptr %1502, align 8, !tbaa !49
  %1504 = fsub double %1485, %1499
  %1505 = fmul double %1504, %1504
  %1506 = fsub double %1486, %1501
  %1507 = tail call double @llvm.fmuladd.f64(double %1506, double %1506, double %1505)
  %1508 = fsub double %1006, %1503
  %1509 = tail call double @llvm.fmuladd.f64(double %1508, double %1508, double %1507)
  %1510 = fcmp ugt double %1509, %24
  br i1 %1510, label %1515, label %1511

1511:                                             ; preds = %1492
  %1512 = add nsw i32 %1494, 1
  %1513 = sext i32 %1494 to i64
  %1514 = getelementptr inbounds i16, ptr %312, i64 %1513
  store i16 %1496, ptr %1514, align 2, !tbaa !44
  br label %1515

1515:                                             ; preds = %1511, %1492
  %1516 = phi i32 [ %1512, %1511 ], [ %1494, %1492 ]
  %1517 = add nsw i64 %1493, 1
  %1518 = icmp eq i64 %1517, %1484
  br i1 %1518, label %1487, label %1492

1519:                                             ; preds = %1490, %1536
  %1520 = phi i64 [ 0, %1490 ], [ %1539, %1536 ]
  %1521 = phi ptr [ %1377, %1490 ], [ %1538, %1536 ]
  %1522 = getelementptr inbounds i16, ptr %312, i64 %1520
  %1523 = load i16, ptr %1522, align 2, !tbaa !44
  %1524 = zext i16 %1523 to i64
  %1525 = getelementptr inbounds %struct.CompAtom, ptr %70, i64 %1524, i32 4
  %1526 = load i8, ptr %1525, align 1
  %1527 = and i8 %1526, 7
  store i16 %1523, ptr %1521, align 2, !tbaa !44
  %1528 = getelementptr inbounds i16, ptr %1521, i64 1
  %1529 = insertelement <2 x i16> poison, i16 %1523, i64 0
  %1530 = shufflevector <2 x i16> %1529, <2 x i16> poison, <2 x i32> zeroinitializer
  %1531 = add <2 x i16> %1530, <i16 1, i16 2>
  store <2 x i16> %1531, ptr %1528, align 2, !tbaa !44
  %1532 = icmp ult i8 %1527, 4
  br i1 %1532, label %1536, label %1533

1533:                                             ; preds = %1519
  %1534 = add <2 x i16> %1530, <i16 3, i16 4>
  %1535 = getelementptr inbounds i16, ptr %1521, i64 3
  store <2 x i16> %1534, ptr %1535, align 2, !tbaa !44
  br label %1536

1536:                                             ; preds = %1533, %1519
  %1537 = zext i8 %1527 to i64
  %1538 = getelementptr inbounds i16, ptr %1521, i64 %1537
  %1539 = add nuw nsw i64 %1520, 1
  %1540 = icmp eq i64 %1539, %1491
  br i1 %1540, label %1541, label %1519

1541:                                             ; preds = %1536, %1487, %1374
  %1542 = phi ptr [ %1377, %1374 ], [ %1377, %1487 ], [ %1538, %1536 ]
  %1543 = ptrtoint ptr %1542 to i64
  %1544 = sub i64 %1543, %945
  %1545 = lshr exact i64 %1544, 1
  %1546 = trunc i64 %1545 to i32
  %1547 = icmp eq i32 %1546, 0
  br i1 %1547, label %1559, label %1548

1548:                                             ; preds = %1541
  %1549 = shl i64 %1544, 31
  %1550 = add i64 %1549, -4294967296
  %1551 = ashr i64 %1550, 32
  %1552 = getelementptr inbounds i16, ptr %450, i64 %1551
  %1553 = load i16, ptr %1552, align 2, !tbaa !44
  %1554 = ashr i64 %1549, 32
  %1555 = getelementptr inbounds i16, ptr %450, i64 %1554
  store i16 %1553, ptr %1555, align 2, !tbaa !44
  br label %1559

1556:                                             ; preds = %1255
  %1557 = add nsw i32 %982, 1
  %1558 = load i32, ptr @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4, !tbaa !5
  br label %1559

1559:                                             ; preds = %1541, %1548, %1556
  %1560 = phi i32 [ %1558, %1556 ], [ %1264, %1548 ], [ %1264, %1541 ]
  %1561 = phi i32 [ %1557, %1556 ], [ 0, %1548 ], [ 0, %1541 ]
  %1562 = phi i32 [ %981, %1556 ], [ %1546, %1548 ], [ 0, %1541 ]
  %1563 = phi i32 [ %980, %1556 ], [ %1305, %1548 ], [ %1305, %1541 ]
  %1564 = phi i32 [ %979, %1556 ], [ %1306, %1548 ], [ %1306, %1541 ]
  %1565 = icmp eq i32 %1560, 0
  br i1 %1565, label %1570, label %1566

1566:                                             ; preds = %1559
  %1567 = load i32, ptr %987, align 4
  %1568 = and i32 %1567, 1073741824
  %1569 = icmp ne i32 %1568, 0
  br label %1570

1570:                                             ; preds = %1566, %1559
  %1571 = phi i1 [ false, %1559 ], [ %1569, %1566 ]
  %1572 = load i32, ptr %14, align 8, !tbaa !17
  %1573 = add nsw i32 %946, %1572
  %1574 = load i32, ptr %947, align 4, !tbaa !69
  %1575 = icmp sgt i32 %1574, %1573
  br i1 %1575, label %1591, label %1576

1576:                                             ; preds = %1570, %1576
  %1577 = phi i32 [ %1579, %1576 ], [ %1574, %1570 ]
  %1578 = ashr i32 %1577, 1
  %1579 = add nsw i32 %1578, %1577
  %1580 = icmp sgt i32 %1579, %1573
  br i1 %1580, label %1581, label %1576

1581:                                             ; preds = %1576
  %1582 = sext i32 %1579 to i64
  %1583 = icmp slt i32 %1579, 0
  %1584 = shl nsw i64 %1582, 1
  %1585 = select i1 %1583, i64 -1, i64 %1584
  %1586 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %1585) #12
  %1587 = load ptr, ptr %9, align 8, !tbaa !46
  %1588 = sext i32 %1572 to i64
  %1589 = shl nsw i64 %1588, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 2 %1586, ptr align 2 %1587, i64 %1589, i1 false)
  %1590 = icmp eq ptr %1587, null
  br i1 %1590, label %1595, label %1593

1591:                                             ; preds = %1570
  %1592 = load ptr, ptr %9, align 8, !tbaa !46
  br label %1597

1593:                                             ; preds = %1581
  tail call void @_ZdaPv(ptr noundef nonnull %1587) #13
  %1594 = load i32, ptr %14, align 8, !tbaa !17
  br label %1595

1595:                                             ; preds = %1593, %1581
  %1596 = phi i32 [ %1594, %1593 ], [ %1572, %1581 ]
  store ptr %1586, ptr %9, align 8, !tbaa !46
  store i32 %1579, ptr %947, align 4, !tbaa !69
  br label %1597

1597:                                             ; preds = %1591, %1595
  %1598 = phi i32 [ %1572, %1591 ], [ %1596, %1595 ]
  %1599 = phi ptr [ %1592, %1591 ], [ %1586, %1595 ]
  %1600 = ptrtoint ptr %1599 to i64
  %1601 = add nsw i32 %1598, 1
  %1602 = sext i32 %1601 to i64
  %1603 = getelementptr inbounds i16, ptr %1599, i64 %1602
  %1604 = icmp slt i32 %1561, %1562
  br i1 %1571, label %1605, label %1653

1605:                                             ; preds = %1597
  br i1 %1604, label %1606, label %1824

1606:                                             ; preds = %1605
  %1607 = sext i32 %1561 to i64
  %1608 = sext i32 %1562 to i64
  %1609 = extractelement <2 x double> %1003, i64 0
  %1610 = extractelement <2 x double> %1003, i64 1
  br label %1611

1611:                                             ; preds = %1606, %1648
  %1612 = phi i64 [ %1607, %1606 ], [ %1651, %1648 ]
  %1613 = phi ptr [ %496, %1606 ], [ %1650, %1648 ]
  %1614 = phi ptr [ %1603, %1606 ], [ %1649, %1648 ]
  %1615 = getelementptr inbounds i16, ptr %450, i64 %1612
  %1616 = load i16, ptr %1615, align 2, !tbaa !44
  %1617 = zext i16 %1616 to i64
  %1618 = getelementptr inbounds %struct.CompAtomExt, ptr %74, i64 %1617
  %1619 = load i32, ptr %1618, align 4
  %1620 = and i32 %1619, 1073741824
  %1621 = icmp eq i32 %1620, 0
  br i1 %1621, label %1622, label %1648

1622:                                             ; preds = %1611
  %1623 = getelementptr inbounds %struct.CompAtom, ptr %70, i64 %1617
  %1624 = getelementptr inbounds %class.Vector, ptr %1623, i64 0, i32 2
  %1625 = load double, ptr %1624, align 8, !tbaa !49
  %1626 = fsub double %1006, %1625
  %1627 = getelementptr inbounds %class.Vector, ptr %1623, i64 0, i32 1
  %1628 = load double, ptr %1627, align 8, !tbaa !67
  %1629 = fsub double %1610, %1628
  %1630 = load double, ptr %1623, align 8, !tbaa !68
  %1631 = fsub double %1609, %1630
  %1632 = fmul double %1631, %1631
  %1633 = tail call double @llvm.fmuladd.f64(double %1629, double %1629, double %1632)
  %1634 = tail call double @llvm.fmuladd.f64(double %1626, double %1626, double %1633)
  %1635 = fcmp ugt double %1634, %21
  br i1 %1635, label %1648, label %1636

1636:                                             ; preds = %1622
  %1637 = shl i32 %1619, 2
  %1638 = ashr exact i32 %1637, 2
  %1639 = icmp slt i32 %1638, %1019
  %1640 = icmp sgt i32 %1638, %1021
  %1641 = select i1 %1639, i1 true, i1 %1640
  %1642 = select i1 %1641, ptr %1614, ptr %1613
  %1643 = zext i1 %1641 to i64
  %1644 = getelementptr inbounds i16, ptr %1614, i64 %1643
  %1645 = xor i1 %1641, true
  %1646 = zext i1 %1645 to i64
  %1647 = getelementptr inbounds i16, ptr %1613, i64 %1646
  store i16 %1616, ptr %1642, align 2, !tbaa !44
  br label %1648

1648:                                             ; preds = %1636, %1622, %1611
  %1649 = phi ptr [ %1614, %1611 ], [ %1614, %1622 ], [ %1644, %1636 ]
  %1650 = phi ptr [ %1613, %1611 ], [ %1613, %1622 ], [ %1647, %1636 ]
  %1651 = add nsw i64 %1612, 1
  %1652 = icmp eq i64 %1651, %1608
  br i1 %1652, label %1824, label %1611

1653:                                             ; preds = %1597
  br i1 %1604, label %1654, label %1824

1654:                                             ; preds = %1653
  %1655 = sub nsw i32 %1562, %1561
  %1656 = icmp sgt i32 %1655, 6
  br i1 %1656, label %1657, label %1775

1657:                                             ; preds = %1654
  %1658 = add nsw i32 %1562, -2
  %1659 = add nsw i32 %1561, 2
  %1660 = icmp slt i32 %1659, %1658
  br i1 %1660, label %1661, label %1775

1661:                                             ; preds = %1657
  %1662 = sext i32 %1561 to i64
  %1663 = getelementptr inbounds i16, ptr %450, i64 %1662
  %1664 = load i16, ptr %1663, align 2, !tbaa !44
  %1665 = zext i16 %1664 to i64
  %1666 = getelementptr inbounds %struct.CompAtomExt, ptr %74, i64 %1665
  %1667 = load i32, ptr %1666, align 4
  %1668 = add nsw i32 %1561, 1
  %1669 = sext i32 %1668 to i64
  %1670 = getelementptr inbounds i16, ptr %450, i64 %1669
  %1671 = load i16, ptr %1670, align 2, !tbaa !44
  %1672 = zext i16 %1671 to i64
  %1673 = getelementptr inbounds %struct.CompAtom, ptr %70, i64 %1672
  %1674 = getelementptr inbounds %class.Vector, ptr %1673, i64 0, i32 2
  %1675 = load double, ptr %1674, align 8, !tbaa !49
  %1676 = getelementptr inbounds %struct.CompAtom, ptr %70, i64 %1665
  %1677 = getelementptr inbounds %class.Vector, ptr %1676, i64 0, i32 2
  %1678 = load double, ptr %1677, align 8, !tbaa !49
  %1679 = getelementptr inbounds %class.Vector, ptr %1673, i64 0, i32 1
  %1680 = load double, ptr %1679, align 8, !tbaa !67
  %1681 = getelementptr inbounds %class.Vector, ptr %1676, i64 0, i32 1
  %1682 = load double, ptr %1681, align 8, !tbaa !67
  %1683 = load double, ptr %1673, align 8, !tbaa !68
  %1684 = load double, ptr %1676, align 8, !tbaa !68
  %1685 = sext i32 %1659 to i64
  %1686 = sext i32 %1658 to i64
  %1687 = extractelement <2 x double> %1003, i64 0
  %1688 = extractelement <2 x double> %1003, i64 1
  br label %1689

1689:                                             ; preds = %1661, %1769
  %1690 = phi i64 [ %1685, %1661 ], [ %1772, %1769 ]
  %1691 = phi i64 [ %1672, %1661 ], [ %1729, %1769 ]
  %1692 = phi i32 [ %1667, %1661 ], [ %1757, %1769 ]
  %1693 = phi ptr [ %496, %1661 ], [ %1771, %1769 ]
  %1694 = phi ptr [ %1603, %1661 ], [ %1770, %1769 ]
  %1695 = phi i32 [ %1561, %1661 ], [ %1774, %1769 ]
  %1696 = phi i16 [ %1664, %1661 ], [ %1721, %1769 ]
  %1697 = phi i16 [ %1671, %1661 ], [ %1725, %1769 ]
  %1698 = phi double [ %1684, %1661 ], [ %1728, %1769 ]
  %1699 = phi double [ %1683, %1661 ], [ %1731, %1769 ]
  %1700 = phi double [ %1682, %1661 ], [ %1733, %1769 ]
  %1701 = phi double [ %1680, %1661 ], [ %1735, %1769 ]
  %1702 = phi double [ %1678, %1661 ], [ %1737, %1769 ]
  %1703 = phi double [ %1675, %1661 ], [ %1739, %1769 ]
  %1704 = getelementptr inbounds %struct.CompAtomExt, ptr %74, i64 %1691
  %1705 = load i32, ptr %1704, align 4
  %1706 = shl i32 %1705, 2
  %1707 = ashr exact i32 %1706, 2
  %1708 = fsub double %1687, %1698
  %1709 = fsub double %1687, %1699
  %1710 = fmul double %1708, %1708
  %1711 = fmul double %1709, %1709
  %1712 = fsub double %1688, %1700
  %1713 = fsub double %1688, %1701
  %1714 = tail call double @llvm.fmuladd.f64(double %1712, double %1712, double %1710)
  %1715 = tail call double @llvm.fmuladd.f64(double %1713, double %1713, double %1711)
  %1716 = fsub double %1006, %1702
  %1717 = fsub double %1006, %1703
  %1718 = tail call double @llvm.fmuladd.f64(double %1716, double %1716, double %1714)
  %1719 = tail call double @llvm.fmuladd.f64(double %1717, double %1717, double %1715)
  %1720 = getelementptr inbounds i16, ptr %450, i64 %1690
  %1721 = load i16, ptr %1720, align 2, !tbaa !44
  %1722 = add nsw i32 %1695, 3
  %1723 = sext i32 %1722 to i64
  %1724 = getelementptr inbounds i16, ptr %450, i64 %1723
  %1725 = load i16, ptr %1724, align 2, !tbaa !44
  %1726 = zext i16 %1721 to i64
  %1727 = getelementptr inbounds %struct.CompAtom, ptr %70, i64 %1726
  %1728 = load double, ptr %1727, align 8, !tbaa !68
  %1729 = zext i16 %1725 to i64
  %1730 = getelementptr inbounds %struct.CompAtom, ptr %70, i64 %1729
  %1731 = load double, ptr %1730, align 8, !tbaa !68
  %1732 = getelementptr inbounds %class.Vector, ptr %1727, i64 0, i32 1
  %1733 = load double, ptr %1732, align 8, !tbaa !67
  %1734 = getelementptr inbounds %class.Vector, ptr %1730, i64 0, i32 1
  %1735 = load double, ptr %1734, align 8, !tbaa !67
  %1736 = getelementptr inbounds %class.Vector, ptr %1727, i64 0, i32 2
  %1737 = load double, ptr %1736, align 8, !tbaa !49
  %1738 = getelementptr inbounds %class.Vector, ptr %1730, i64 0, i32 2
  %1739 = load double, ptr %1738, align 8, !tbaa !49
  %1740 = fcmp ugt double %1718, %21
  br i1 %1740, label %1753, label %1741

1741:                                             ; preds = %1689
  %1742 = shl i32 %1692, 2
  %1743 = ashr exact i32 %1742, 2
  %1744 = icmp slt i32 %1743, %1019
  %1745 = icmp sgt i32 %1743, %1021
  %1746 = select i1 %1744, i1 true, i1 %1745
  %1747 = select i1 %1746, ptr %1694, ptr %1693
  %1748 = zext i1 %1746 to i64
  %1749 = getelementptr inbounds i16, ptr %1694, i64 %1748
  %1750 = xor i1 %1746, true
  %1751 = zext i1 %1750 to i64
  %1752 = getelementptr inbounds i16, ptr %1693, i64 %1751
  store i16 %1696, ptr %1747, align 2, !tbaa !44
  br label %1753

1753:                                             ; preds = %1741, %1689
  %1754 = phi ptr [ %1694, %1689 ], [ %1749, %1741 ]
  %1755 = phi ptr [ %1693, %1689 ], [ %1752, %1741 ]
  %1756 = getelementptr inbounds %struct.CompAtomExt, ptr %74, i64 %1726
  %1757 = load i32, ptr %1756, align 4
  %1758 = fcmp ugt double %1719, %21
  br i1 %1758, label %1769, label %1759

1759:                                             ; preds = %1753
  %1760 = icmp slt i32 %1707, %1019
  %1761 = icmp sgt i32 %1707, %1021
  %1762 = select i1 %1760, i1 true, i1 %1761
  %1763 = select i1 %1762, ptr %1754, ptr %1755
  %1764 = zext i1 %1762 to i64
  %1765 = getelementptr inbounds i16, ptr %1754, i64 %1764
  %1766 = xor i1 %1762, true
  %1767 = zext i1 %1766 to i64
  %1768 = getelementptr inbounds i16, ptr %1755, i64 %1767
  store i16 %1697, ptr %1763, align 2, !tbaa !44
  br label %1769

1769:                                             ; preds = %1759, %1753
  %1770 = phi ptr [ %1754, %1753 ], [ %1765, %1759 ]
  %1771 = phi ptr [ %1755, %1753 ], [ %1768, %1759 ]
  %1772 = add nsw i64 %1690, 2
  %1773 = icmp slt i64 %1772, %1686
  %1774 = trunc i64 %1690 to i32
  br i1 %1773, label %1689, label %1775

1775:                                             ; preds = %1769, %1657, %1654
  %1776 = phi i32 [ %1561, %1654 ], [ %1561, %1657 ], [ %1774, %1769 ]
  %1777 = phi ptr [ %1603, %1654 ], [ %1603, %1657 ], [ %1770, %1769 ]
  %1778 = phi ptr [ %496, %1654 ], [ %496, %1657 ], [ %1771, %1769 ]
  %1779 = icmp slt i32 %1776, %1562
  br i1 %1779, label %1780, label %1824

1780:                                             ; preds = %1775
  %1781 = sext i32 %1776 to i64
  %1782 = sext i32 %1562 to i64
  %1783 = extractelement <2 x double> %1003, i64 0
  %1784 = extractelement <2 x double> %1003, i64 1
  br label %1785

1785:                                             ; preds = %1780, %1819
  %1786 = phi i64 [ %1781, %1780 ], [ %1822, %1819 ]
  %1787 = phi ptr [ %1778, %1780 ], [ %1821, %1819 ]
  %1788 = phi ptr [ %1777, %1780 ], [ %1820, %1819 ]
  %1789 = getelementptr inbounds i16, ptr %450, i64 %1786
  %1790 = load i16, ptr %1789, align 2, !tbaa !44
  %1791 = zext i16 %1790 to i64
  %1792 = getelementptr inbounds %struct.CompAtom, ptr %70, i64 %1791
  %1793 = load double, ptr %1792, align 8, !tbaa !68
  %1794 = getelementptr inbounds %class.Vector, ptr %1792, i64 0, i32 1
  %1795 = load double, ptr %1794, align 8, !tbaa !67
  %1796 = getelementptr inbounds %class.Vector, ptr %1792, i64 0, i32 2
  %1797 = load double, ptr %1796, align 8, !tbaa !49
  %1798 = fsub double %1783, %1793
  %1799 = fmul double %1798, %1798
  %1800 = fsub double %1784, %1795
  %1801 = tail call double @llvm.fmuladd.f64(double %1800, double %1800, double %1799)
  %1802 = fsub double %1006, %1797
  %1803 = tail call double @llvm.fmuladd.f64(double %1802, double %1802, double %1801)
  %1804 = fcmp ugt double %1803, %21
  br i1 %1804, label %1819, label %1805

1805:                                             ; preds = %1785
  %1806 = getelementptr inbounds %struct.CompAtomExt, ptr %74, i64 %1791
  %1807 = load i32, ptr %1806, align 4
  %1808 = shl i32 %1807, 2
  %1809 = ashr exact i32 %1808, 2
  %1810 = icmp slt i32 %1809, %1019
  %1811 = icmp sgt i32 %1809, %1021
  %1812 = select i1 %1810, i1 true, i1 %1811
  %1813 = select i1 %1812, ptr %1788, ptr %1787
  %1814 = zext i1 %1812 to i64
  %1815 = getelementptr inbounds i16, ptr %1788, i64 %1814
  %1816 = xor i1 %1812, true
  %1817 = zext i1 %1816 to i64
  %1818 = getelementptr inbounds i16, ptr %1787, i64 %1817
  store i16 %1790, ptr %1813, align 2, !tbaa !44
  br label %1819

1819:                                             ; preds = %1805, %1785
  %1820 = phi ptr [ %1788, %1785 ], [ %1815, %1805 ]
  %1821 = phi ptr [ %1787, %1785 ], [ %1818, %1805 ]
  %1822 = add nsw i64 %1786, 1
  %1823 = icmp eq i64 %1822, %1782
  br i1 %1823, label %1824, label %1785

1824:                                             ; preds = %1819, %1648, %1775, %1605, %1653
  %1825 = phi ptr [ %1603, %1653 ], [ %1603, %1605 ], [ %1777, %1775 ], [ %1649, %1648 ], [ %1820, %1819 ]
  %1826 = phi ptr [ %496, %1653 ], [ %496, %1605 ], [ %1778, %1775 ], [ %1650, %1648 ], [ %1821, %1819 ]
  %1827 = ptrtoint ptr %1825 to i64
  %1828 = ptrtoint ptr %1603 to i64
  %1829 = sub i64 %1827, %1828
  %1830 = lshr exact i64 %1829, 1
  %1831 = trunc i64 %1830 to i32
  %1832 = icmp sgt i32 %1831, 0
  br i1 %1832, label %1833, label %1933

1833:                                             ; preds = %1824
  %1834 = and i64 %1830, 4294967295
  %1835 = and i64 %1830, 1
  %1836 = icmp eq i64 %1834, 1
  br i1 %1836, label %1901, label %1837

1837:                                             ; preds = %1833
  %1838 = sub nsw i64 %1834, %1835
  br label %1839

1839:                                             ; preds = %1894, %1837
  %1840 = phi i64 [ 0, %1837 ], [ %1898, %1894 ]
  %1841 = phi ptr [ %1603, %1837 ], [ %1897, %1894 ]
  %1842 = phi ptr [ %542, %1837 ], [ %1896, %1894 ]
  %1843 = phi ptr [ %680, %1837 ], [ %1895, %1894 ]
  %1844 = phi i64 [ 0, %1837 ], [ %1899, %1894 ]
  %1845 = getelementptr inbounds i16, ptr %1603, i64 %1840
  %1846 = load i16, ptr %1845, align 2, !tbaa !44
  %1847 = zext i16 %1846 to i64
  %1848 = getelementptr inbounds %struct.CompAtom, ptr %70, i64 %1847, i32 3
  %1849 = load i8, ptr %1848, align 2, !tbaa !51
  %1850 = zext i8 %1849 to i32
  %1851 = mul nuw nsw i32 %1850, 3
  %1852 = add nuw nsw i32 %1851, %1009
  %1853 = zext i32 %1852 to i64
  %1854 = getelementptr inbounds [9 x i32], ptr %2, i64 0, i64 %1853
  %1855 = load i32, ptr %1854, align 4, !tbaa !5
  switch i32 %1855, label %1867 [
    i32 0, label %1856
    i32 1, label %1858
    i32 2, label %1860
  ]

1856:                                             ; preds = %1839
  %1857 = getelementptr inbounds i16, ptr %1841, i64 1
  br label %1862

1858:                                             ; preds = %1839
  %1859 = getelementptr inbounds i16, ptr %1842, i64 1
  br label %1862

1860:                                             ; preds = %1839
  %1861 = getelementptr inbounds i16, ptr %1843, i64 1
  br label %1862

1862:                                             ; preds = %1856, %1858, %1860
  %1863 = phi ptr [ %1843, %1860 ], [ %1842, %1858 ], [ %1841, %1856 ]
  %1864 = phi ptr [ %1861, %1860 ], [ %1843, %1858 ], [ %1843, %1856 ]
  %1865 = phi ptr [ %1842, %1860 ], [ %1859, %1858 ], [ %1842, %1856 ]
  %1866 = phi ptr [ %1841, %1860 ], [ %1841, %1858 ], [ %1857, %1856 ]
  store i16 %1846, ptr %1863, align 2, !tbaa !44
  br label %1867

1867:                                             ; preds = %1862, %1839
  %1868 = phi ptr [ %1843, %1839 ], [ %1864, %1862 ]
  %1869 = phi ptr [ %1842, %1839 ], [ %1865, %1862 ]
  %1870 = phi ptr [ %1841, %1839 ], [ %1866, %1862 ]
  %1871 = or i64 %1840, 1
  %1872 = getelementptr inbounds i16, ptr %1603, i64 %1871
  %1873 = load i16, ptr %1872, align 2, !tbaa !44
  %1874 = zext i16 %1873 to i64
  %1875 = getelementptr inbounds %struct.CompAtom, ptr %70, i64 %1874, i32 3
  %1876 = load i8, ptr %1875, align 2, !tbaa !51
  %1877 = zext i8 %1876 to i32
  %1878 = mul nuw nsw i32 %1877, 3
  %1879 = add nuw nsw i32 %1878, %1009
  %1880 = zext i32 %1879 to i64
  %1881 = getelementptr inbounds [9 x i32], ptr %2, i64 0, i64 %1880
  %1882 = load i32, ptr %1881, align 4, !tbaa !5
  switch i32 %1882, label %1894 [
    i32 0, label %1887
    i32 1, label %1885
    i32 2, label %1883
  ]

1883:                                             ; preds = %1867
  %1884 = getelementptr inbounds i16, ptr %1868, i64 1
  br label %1889

1885:                                             ; preds = %1867
  %1886 = getelementptr inbounds i16, ptr %1869, i64 1
  br label %1889

1887:                                             ; preds = %1867
  %1888 = getelementptr inbounds i16, ptr %1870, i64 1
  br label %1889

1889:                                             ; preds = %1887, %1885, %1883
  %1890 = phi ptr [ %1868, %1883 ], [ %1869, %1885 ], [ %1870, %1887 ]
  %1891 = phi ptr [ %1884, %1883 ], [ %1868, %1885 ], [ %1868, %1887 ]
  %1892 = phi ptr [ %1869, %1883 ], [ %1886, %1885 ], [ %1869, %1887 ]
  %1893 = phi ptr [ %1870, %1883 ], [ %1870, %1885 ], [ %1888, %1887 ]
  store i16 %1873, ptr %1890, align 2, !tbaa !44
  br label %1894

1894:                                             ; preds = %1889, %1867
  %1895 = phi ptr [ %1868, %1867 ], [ %1891, %1889 ]
  %1896 = phi ptr [ %1869, %1867 ], [ %1892, %1889 ]
  %1897 = phi ptr [ %1870, %1867 ], [ %1893, %1889 ]
  %1898 = add nuw nsw i64 %1840, 2
  %1899 = add i64 %1844, 2
  %1900 = icmp eq i64 %1899, %1838
  br i1 %1900, label %1901, label %1839

1901:                                             ; preds = %1894, %1833
  %1902 = phi ptr [ undef, %1833 ], [ %1895, %1894 ]
  %1903 = phi ptr [ undef, %1833 ], [ %1896, %1894 ]
  %1904 = phi ptr [ undef, %1833 ], [ %1897, %1894 ]
  %1905 = phi i64 [ 0, %1833 ], [ %1898, %1894 ]
  %1906 = phi ptr [ %1603, %1833 ], [ %1897, %1894 ]
  %1907 = phi ptr [ %542, %1833 ], [ %1896, %1894 ]
  %1908 = phi ptr [ %680, %1833 ], [ %1895, %1894 ]
  %1909 = icmp eq i64 %1835, 0
  br i1 %1909, label %1933, label %1910

1910:                                             ; preds = %1901
  %1911 = getelementptr inbounds i16, ptr %1603, i64 %1905
  %1912 = load i16, ptr %1911, align 2, !tbaa !44
  %1913 = zext i16 %1912 to i64
  %1914 = getelementptr inbounds %struct.CompAtom, ptr %70, i64 %1913, i32 3
  %1915 = load i8, ptr %1914, align 2, !tbaa !51
  %1916 = zext i8 %1915 to i32
  %1917 = mul nuw nsw i32 %1916, 3
  %1918 = add nuw nsw i32 %1917, %1009
  %1919 = zext i32 %1918 to i64
  %1920 = getelementptr inbounds [9 x i32], ptr %2, i64 0, i64 %1919
  %1921 = load i32, ptr %1920, align 4, !tbaa !5
  switch i32 %1921, label %1933 [
    i32 0, label %1926
    i32 1, label %1924
    i32 2, label %1922
  ]

1922:                                             ; preds = %1910
  %1923 = getelementptr inbounds i16, ptr %1908, i64 1
  br label %1928

1924:                                             ; preds = %1910
  %1925 = getelementptr inbounds i16, ptr %1907, i64 1
  br label %1928

1926:                                             ; preds = %1910
  %1927 = getelementptr inbounds i16, ptr %1906, i64 1
  br label %1928

1928:                                             ; preds = %1926, %1924, %1922
  %1929 = phi ptr [ %1908, %1922 ], [ %1907, %1924 ], [ %1906, %1926 ]
  %1930 = phi ptr [ %1923, %1922 ], [ %1908, %1924 ], [ %1908, %1926 ]
  %1931 = phi ptr [ %1907, %1922 ], [ %1925, %1924 ], [ %1907, %1926 ]
  %1932 = phi ptr [ %1906, %1922 ], [ %1906, %1924 ], [ %1927, %1926 ]
  store i16 %1912, ptr %1929, align 2, !tbaa !44
  br label %1933

1933:                                             ; preds = %1901, %1928, %1910, %1824
  %1934 = phi ptr [ %680, %1824 ], [ %1902, %1901 ], [ %1908, %1910 ], [ %1930, %1928 ]
  %1935 = phi ptr [ %542, %1824 ], [ %1903, %1901 ], [ %1907, %1910 ], [ %1931, %1928 ]
  %1936 = phi ptr [ %1603, %1824 ], [ %1904, %1901 ], [ %1906, %1910 ], [ %1932, %1928 ]
  %1937 = ptrtoint ptr %1826 to i64
  %1938 = sub i64 %1937, %948
  %1939 = lshr exact i64 %1938, 1
  %1940 = trunc i64 %1939 to i32
  %1941 = icmp sgt i32 %1940, 0
  br i1 %1941, label %1942, label %2017

1942:                                             ; preds = %1933
  %1943 = and i64 %1939, 4294967295
  br label %1944

1944:                                             ; preds = %1942, %2005
  %1945 = phi i64 [ 0, %1942 ], [ %2015, %2005 ]
  %1946 = phi ptr [ %1936, %1942 ], [ %2014, %2005 ]
  %1947 = phi ptr [ %358, %1942 ], [ %2013, %2005 ]
  %1948 = phi ptr [ %404, %1942 ], [ %2012, %2005 ]
  %1949 = phi ptr [ %1935, %1942 ], [ %2011, %2005 ]
  %1950 = phi ptr [ %588, %1942 ], [ %2010, %2005 ]
  %1951 = phi ptr [ %634, %1942 ], [ %2009, %2005 ]
  %1952 = phi ptr [ %1934, %1942 ], [ %2008, %2005 ]
  %1953 = phi ptr [ %726, %1942 ], [ %2007, %2005 ]
  %1954 = phi ptr [ %772, %1942 ], [ %2006, %2005 ]
  %1955 = getelementptr inbounds i16, ptr %496, i64 %1945
  %1956 = load i16, ptr %1955, align 2, !tbaa !44
  %1957 = zext i16 %1956 to i64
  %1958 = getelementptr inbounds %struct.CompAtomExt, ptr %74, i64 %1957
  %1959 = load i32, ptr %1958, align 4
  %1960 = shl i32 %1959, 2
  %1961 = ashr exact i32 %1960, 2
  %1962 = sext i32 %1961 to i64
  %1963 = getelementptr inbounds i8, ptr %1256, i64 %1962
  %1964 = load i8, ptr %1963, align 1, !tbaa !58
  %1965 = sext i8 %1964 to i32
  %1966 = getelementptr inbounds %struct.CompAtom, ptr %70, i64 %1957, i32 3
  %1967 = load i8, ptr %1966, align 2, !tbaa !51
  %1968 = zext i8 %1967 to i32
  %1969 = mul nuw nsw i32 %1968, 3
  %1970 = add nuw nsw i32 %1969, %1009
  %1971 = zext i32 %1970 to i64
  %1972 = getelementptr inbounds [9 x i32], ptr %2, i64 0, i64 %1971
  %1973 = load i32, ptr %1972, align 4, !tbaa !5
  %1974 = mul nsw i32 %1973, 3
  %1975 = add nsw i32 %1974, %1965
  switch i32 %1975, label %2005 [
    i32 0, label %1976
    i32 1, label %1978
    i32 2, label %1980
    i32 3, label %1982
    i32 6, label %1984
    i32 5, label %1986
    i32 8, label %1988
    i32 4, label %1990
    i32 7, label %1992
  ]

1976:                                             ; preds = %1944
  %1977 = getelementptr inbounds i16, ptr %1946, i64 1
  br label %1994

1978:                                             ; preds = %1944
  %1979 = getelementptr inbounds i16, ptr %1947, i64 1
  br label %1994

1980:                                             ; preds = %1944
  %1981 = getelementptr inbounds i16, ptr %1948, i64 1
  br label %1994

1982:                                             ; preds = %1944
  %1983 = getelementptr inbounds i16, ptr %1949, i64 1
  br label %1994

1984:                                             ; preds = %1944
  %1985 = getelementptr inbounds i16, ptr %1952, i64 1
  br label %1994

1986:                                             ; preds = %1944
  %1987 = getelementptr inbounds i16, ptr %1951, i64 1
  br label %1994

1988:                                             ; preds = %1944
  %1989 = getelementptr inbounds i16, ptr %1954, i64 1
  br label %1994

1990:                                             ; preds = %1944
  %1991 = getelementptr inbounds i16, ptr %1950, i64 1
  br label %1994

1992:                                             ; preds = %1944
  %1993 = getelementptr inbounds i16, ptr %1953, i64 1
  br label %1994

1994:                                             ; preds = %1976, %1978, %1980, %1982, %1984, %1986, %1988, %1990, %1992
  %1995 = phi ptr [ %1953, %1992 ], [ %1950, %1990 ], [ %1954, %1988 ], [ %1951, %1986 ], [ %1952, %1984 ], [ %1949, %1982 ], [ %1948, %1980 ], [ %1947, %1978 ], [ %1946, %1976 ]
  %1996 = phi ptr [ %1954, %1992 ], [ %1954, %1990 ], [ %1989, %1988 ], [ %1954, %1986 ], [ %1954, %1984 ], [ %1954, %1982 ], [ %1954, %1980 ], [ %1954, %1978 ], [ %1954, %1976 ]
  %1997 = phi ptr [ %1993, %1992 ], [ %1953, %1990 ], [ %1953, %1988 ], [ %1953, %1986 ], [ %1953, %1984 ], [ %1953, %1982 ], [ %1953, %1980 ], [ %1953, %1978 ], [ %1953, %1976 ]
  %1998 = phi ptr [ %1952, %1992 ], [ %1952, %1990 ], [ %1952, %1988 ], [ %1952, %1986 ], [ %1985, %1984 ], [ %1952, %1982 ], [ %1952, %1980 ], [ %1952, %1978 ], [ %1952, %1976 ]
  %1999 = phi ptr [ %1951, %1992 ], [ %1951, %1990 ], [ %1951, %1988 ], [ %1987, %1986 ], [ %1951, %1984 ], [ %1951, %1982 ], [ %1951, %1980 ], [ %1951, %1978 ], [ %1951, %1976 ]
  %2000 = phi ptr [ %1950, %1992 ], [ %1991, %1990 ], [ %1950, %1988 ], [ %1950, %1986 ], [ %1950, %1984 ], [ %1950, %1982 ], [ %1950, %1980 ], [ %1950, %1978 ], [ %1950, %1976 ]
  %2001 = phi ptr [ %1949, %1992 ], [ %1949, %1990 ], [ %1949, %1988 ], [ %1949, %1986 ], [ %1949, %1984 ], [ %1983, %1982 ], [ %1949, %1980 ], [ %1949, %1978 ], [ %1949, %1976 ]
  %2002 = phi ptr [ %1948, %1992 ], [ %1948, %1990 ], [ %1948, %1988 ], [ %1948, %1986 ], [ %1948, %1984 ], [ %1948, %1982 ], [ %1981, %1980 ], [ %1948, %1978 ], [ %1948, %1976 ]
  %2003 = phi ptr [ %1947, %1992 ], [ %1947, %1990 ], [ %1947, %1988 ], [ %1947, %1986 ], [ %1947, %1984 ], [ %1947, %1982 ], [ %1947, %1980 ], [ %1979, %1978 ], [ %1947, %1976 ]
  %2004 = phi ptr [ %1946, %1992 ], [ %1946, %1990 ], [ %1946, %1988 ], [ %1946, %1986 ], [ %1946, %1984 ], [ %1946, %1982 ], [ %1946, %1980 ], [ %1946, %1978 ], [ %1977, %1976 ]
  store i16 %1956, ptr %1995, align 2, !tbaa !44
  br label %2005

2005:                                             ; preds = %1994, %1944
  %2006 = phi ptr [ %1954, %1944 ], [ %1996, %1994 ]
  %2007 = phi ptr [ %1953, %1944 ], [ %1997, %1994 ]
  %2008 = phi ptr [ %1952, %1944 ], [ %1998, %1994 ]
  %2009 = phi ptr [ %1951, %1944 ], [ %1999, %1994 ]
  %2010 = phi ptr [ %1950, %1944 ], [ %2000, %1994 ]
  %2011 = phi ptr [ %1949, %1944 ], [ %2001, %1994 ]
  %2012 = phi ptr [ %1948, %1944 ], [ %2002, %1994 ]
  %2013 = phi ptr [ %1947, %1944 ], [ %2003, %1994 ]
  %2014 = phi ptr [ %1946, %1944 ], [ %2004, %1994 ]
  %2015 = add nuw nsw i64 %1945, 1
  %2016 = icmp eq i64 %2015, %1943
  br i1 %2016, label %2017, label %1944

2017:                                             ; preds = %2005, %1933
  %2018 = phi ptr [ %772, %1933 ], [ %2006, %2005 ]
  %2019 = phi ptr [ %726, %1933 ], [ %2007, %2005 ]
  %2020 = phi ptr [ %1934, %1933 ], [ %2008, %2005 ]
  %2021 = phi ptr [ %634, %1933 ], [ %2009, %2005 ]
  %2022 = phi ptr [ %588, %1933 ], [ %2010, %2005 ]
  %2023 = phi ptr [ %1935, %1933 ], [ %2011, %2005 ]
  %2024 = phi ptr [ %404, %1933 ], [ %2012, %2005 ]
  %2025 = phi ptr [ %358, %1933 ], [ %2013, %2005 ]
  %2026 = phi ptr [ %1936, %1933 ], [ %2014, %2005 ]
  %2027 = ptrtoint ptr %2026 to i64
  %2028 = sub i64 %2027, %1828
  %2029 = lshr exact i64 %2028, 1
  %2030 = trunc i64 %2029 to i32
  %2031 = icmp eq i32 %2030, 0
  %2032 = shl i64 %2028, 31
  br i1 %2031, label %2038, label %2033

2033:                                             ; preds = %2017
  %2034 = add i64 %2032, -4294967296
  %2035 = ashr i64 %2034, 32
  %2036 = getelementptr inbounds i16, ptr %1603, i64 %2035
  %2037 = load i16, ptr %2036, align 2, !tbaa !44
  br label %2038

2038:                                             ; preds = %2017, %2033
  %2039 = phi i16 [ %2037, %2033 ], [ -1, %2017 ]
  %2040 = ashr i64 %2032, 32
  %2041 = getelementptr inbounds i16, ptr %1603, i64 %2040
  store i16 %2039, ptr %2041, align 2, !tbaa !44
  %2042 = trunc i64 %2029 to i16
  %2043 = add i16 %2042, 1
  %2044 = load i32, ptr %14, align 8, !tbaa !17
  %2045 = sext i32 %2044 to i64
  %2046 = getelementptr inbounds i16, ptr %1599, i64 %2045
  store i16 %2043, ptr %2046, align 2, !tbaa !44
  %2047 = add nsw i32 %2030, 2
  %2048 = add nsw i32 %2047, %2044
  store i32 %2048, ptr %14, align 8, !tbaa !17
  %2049 = ptrtoint ptr %2025 to i64
  %2050 = sub i64 %2049, %949
  %2051 = lshr exact i64 %2050, 1
  %2052 = trunc i64 %2051 to i32
  %2053 = add nsw i32 %2048, 1
  %2054 = sext i32 %2053 to i64
  %2055 = getelementptr i16, ptr %1599, i64 %2054
  %2056 = icmp sgt i32 %2052, 0
  br i1 %2056, label %2057, label %2147

2057:                                             ; preds = %2038
  %2058 = and i64 %2051, 4294967295
  %2059 = icmp ult i64 %2058, 8
  br i1 %2059, label %2103, label %2060

2060:                                             ; preds = %2057
  %2061 = shl nsw i64 %2054, 1
  %2062 = add i64 %2061, %1600
  %2063 = sub i64 %2062, %949
  %2064 = icmp ult i64 %2063, 128
  br i1 %2064, label %2103, label %2065

2065:                                             ; preds = %2060
  %2066 = icmp ult i64 %2058, 64
  br i1 %2066, label %2090, label %2067

2067:                                             ; preds = %2065
  %2068 = and i64 %2051, 63
  %2069 = sub nsw i64 %2058, %2068
  br label %2070

2070:                                             ; preds = %2070, %2067
  %2071 = phi i64 [ 0, %2067 ], [ %2084, %2070 ]
  %2072 = getelementptr inbounds i16, ptr %358, i64 %2071
  %2073 = load <16 x i16>, ptr %2072, align 2, !tbaa !44
  %2074 = getelementptr inbounds i16, ptr %2072, i64 16
  %2075 = load <16 x i16>, ptr %2074, align 2, !tbaa !44
  %2076 = getelementptr inbounds i16, ptr %2072, i64 32
  %2077 = load <16 x i16>, ptr %2076, align 2, !tbaa !44
  %2078 = getelementptr inbounds i16, ptr %2072, i64 48
  %2079 = load <16 x i16>, ptr %2078, align 2, !tbaa !44
  %2080 = getelementptr inbounds i16, ptr %2055, i64 %2071
  store <16 x i16> %2073, ptr %2080, align 2, !tbaa !44
  %2081 = getelementptr inbounds i16, ptr %2080, i64 16
  store <16 x i16> %2075, ptr %2081, align 2, !tbaa !44
  %2082 = getelementptr inbounds i16, ptr %2080, i64 32
  store <16 x i16> %2077, ptr %2082, align 2, !tbaa !44
  %2083 = getelementptr inbounds i16, ptr %2080, i64 48
  store <16 x i16> %2079, ptr %2083, align 2, !tbaa !44
  %2084 = add nuw i64 %2071, 64
  %2085 = icmp eq i64 %2084, %2069
  br i1 %2085, label %2086, label %2070, !llvm.loop !351

2086:                                             ; preds = %2070
  %2087 = icmp eq i64 %2068, 0
  br i1 %2087, label %2141, label %2088

2088:                                             ; preds = %2086
  %2089 = icmp ult i64 %2068, 8
  br i1 %2089, label %2103, label %2090

2090:                                             ; preds = %2065, %2088
  %2091 = phi i64 [ %2069, %2088 ], [ 0, %2065 ]
  %2092 = and i64 %2051, 7
  %2093 = sub nsw i64 %2058, %2092
  br label %2094

2094:                                             ; preds = %2094, %2090
  %2095 = phi i64 [ %2091, %2090 ], [ %2099, %2094 ]
  %2096 = getelementptr inbounds i16, ptr %358, i64 %2095
  %2097 = load <8 x i16>, ptr %2096, align 2, !tbaa !44
  %2098 = getelementptr inbounds i16, ptr %2055, i64 %2095
  store <8 x i16> %2097, ptr %2098, align 2, !tbaa !44
  %2099 = add nuw i64 %2095, 8
  %2100 = icmp eq i64 %2099, %2093
  br i1 %2100, label %2101, label %2094, !llvm.loop !352

2101:                                             ; preds = %2094
  %2102 = icmp eq i64 %2092, 0
  br i1 %2102, label %2141, label %2103

2103:                                             ; preds = %2060, %2057, %2088, %2101
  %2104 = phi i64 [ 0, %2057 ], [ 0, %2060 ], [ %2069, %2088 ], [ %2093, %2101 ]
  %2105 = sub i64 %2051, %2104
  %2106 = xor i64 %2104, -1
  %2107 = add nsw i64 %2058, %2106
  %2108 = and i64 %2105, 3
  %2109 = icmp eq i64 %2108, 0
  br i1 %2109, label %2119, label %2110

2110:                                             ; preds = %2103, %2110
  %2111 = phi i64 [ %2116, %2110 ], [ %2104, %2103 ]
  %2112 = phi i64 [ %2117, %2110 ], [ 0, %2103 ]
  %2113 = getelementptr inbounds i16, ptr %358, i64 %2111
  %2114 = load i16, ptr %2113, align 2, !tbaa !44
  %2115 = getelementptr inbounds i16, ptr %2055, i64 %2111
  store i16 %2114, ptr %2115, align 2, !tbaa !44
  %2116 = add nuw nsw i64 %2111, 1
  %2117 = add i64 %2112, 1
  %2118 = icmp eq i64 %2117, %2108
  br i1 %2118, label %2119, label %2110, !llvm.loop !353

2119:                                             ; preds = %2110, %2103
  %2120 = phi i64 [ %2104, %2103 ], [ %2116, %2110 ]
  %2121 = icmp ult i64 %2107, 3
  br i1 %2121, label %2141, label %2122

2122:                                             ; preds = %2119, %2122
  %2123 = phi i64 [ %2139, %2122 ], [ %2120, %2119 ]
  %2124 = getelementptr inbounds i16, ptr %358, i64 %2123
  %2125 = load i16, ptr %2124, align 2, !tbaa !44
  %2126 = getelementptr inbounds i16, ptr %2055, i64 %2123
  store i16 %2125, ptr %2126, align 2, !tbaa !44
  %2127 = add nuw nsw i64 %2123, 1
  %2128 = getelementptr inbounds i16, ptr %358, i64 %2127
  %2129 = load i16, ptr %2128, align 2, !tbaa !44
  %2130 = getelementptr inbounds i16, ptr %2055, i64 %2127
  store i16 %2129, ptr %2130, align 2, !tbaa !44
  %2131 = add nuw nsw i64 %2123, 2
  %2132 = getelementptr inbounds i16, ptr %358, i64 %2131
  %2133 = load i16, ptr %2132, align 2, !tbaa !44
  %2134 = getelementptr inbounds i16, ptr %2055, i64 %2131
  store i16 %2133, ptr %2134, align 2, !tbaa !44
  %2135 = add nuw nsw i64 %2123, 3
  %2136 = getelementptr inbounds i16, ptr %358, i64 %2135
  %2137 = load i16, ptr %2136, align 2, !tbaa !44
  %2138 = getelementptr inbounds i16, ptr %2055, i64 %2135
  store i16 %2137, ptr %2138, align 2, !tbaa !44
  %2139 = add nuw nsw i64 %2123, 4
  %2140 = icmp eq i64 %2139, %2058
  br i1 %2140, label %2141, label %2122, !llvm.loop !354

2141:                                             ; preds = %2119, %2122, %2086, %2101
  %2142 = shl i64 %2050, 31
  %2143 = add i64 %2142, -4294967296
  %2144 = ashr i64 %2143, 32
  %2145 = getelementptr inbounds i16, ptr %2055, i64 %2144
  %2146 = load i16, ptr %2145, align 2, !tbaa !44
  br label %2147

2147:                                             ; preds = %2038, %2141
  %2148 = phi i64 [ %2051, %2141 ], [ 0, %2038 ]
  %2149 = phi i16 [ %2146, %2141 ], [ -1, %2038 ]
  %2150 = and i64 %2148, 4294967295
  %2151 = getelementptr inbounds i16, ptr %2055, i64 %2150
  store i16 %2149, ptr %2151, align 2, !tbaa !44
  %2152 = trunc i64 %2051 to i16
  %2153 = add i16 %2152, 1
  %2154 = sext i32 %2048 to i64
  %2155 = getelementptr inbounds i16, ptr %1599, i64 %2154
  store i16 %2153, ptr %2155, align 2, !tbaa !44
  %2156 = add nsw i32 %2052, 2
  %2157 = add nsw i32 %2156, %2048
  %2158 = ptrtoint ptr %2024 to i64
  %2159 = sub i64 %2158, %950
  %2160 = lshr exact i64 %2159, 1
  %2161 = trunc i64 %2160 to i32
  %2162 = add nsw i32 %2157, 1
  %2163 = sext i32 %2162 to i64
  %2164 = getelementptr i16, ptr %1599, i64 %2163
  %2165 = icmp sgt i32 %2161, 0
  br i1 %2165, label %2166, label %2256

2166:                                             ; preds = %2147
  %2167 = and i64 %2160, 4294967295
  %2168 = icmp ult i64 %2167, 8
  br i1 %2168, label %2212, label %2169

2169:                                             ; preds = %2166
  %2170 = shl nsw i64 %2163, 1
  %2171 = add i64 %2170, %1600
  %2172 = sub i64 %2171, %950
  %2173 = icmp ult i64 %2172, 128
  br i1 %2173, label %2212, label %2174

2174:                                             ; preds = %2169
  %2175 = icmp ult i64 %2167, 64
  br i1 %2175, label %2199, label %2176

2176:                                             ; preds = %2174
  %2177 = and i64 %2160, 63
  %2178 = sub nsw i64 %2167, %2177
  br label %2179

2179:                                             ; preds = %2179, %2176
  %2180 = phi i64 [ 0, %2176 ], [ %2193, %2179 ]
  %2181 = getelementptr inbounds i16, ptr %404, i64 %2180
  %2182 = load <16 x i16>, ptr %2181, align 2, !tbaa !44
  %2183 = getelementptr inbounds i16, ptr %2181, i64 16
  %2184 = load <16 x i16>, ptr %2183, align 2, !tbaa !44
  %2185 = getelementptr inbounds i16, ptr %2181, i64 32
  %2186 = load <16 x i16>, ptr %2185, align 2, !tbaa !44
  %2187 = getelementptr inbounds i16, ptr %2181, i64 48
  %2188 = load <16 x i16>, ptr %2187, align 2, !tbaa !44
  %2189 = getelementptr inbounds i16, ptr %2164, i64 %2180
  store <16 x i16> %2182, ptr %2189, align 2, !tbaa !44
  %2190 = getelementptr inbounds i16, ptr %2189, i64 16
  store <16 x i16> %2184, ptr %2190, align 2, !tbaa !44
  %2191 = getelementptr inbounds i16, ptr %2189, i64 32
  store <16 x i16> %2186, ptr %2191, align 2, !tbaa !44
  %2192 = getelementptr inbounds i16, ptr %2189, i64 48
  store <16 x i16> %2188, ptr %2192, align 2, !tbaa !44
  %2193 = add nuw i64 %2180, 64
  %2194 = icmp eq i64 %2193, %2178
  br i1 %2194, label %2195, label %2179, !llvm.loop !355

2195:                                             ; preds = %2179
  %2196 = icmp eq i64 %2177, 0
  br i1 %2196, label %2250, label %2197

2197:                                             ; preds = %2195
  %2198 = icmp ult i64 %2177, 8
  br i1 %2198, label %2212, label %2199

2199:                                             ; preds = %2174, %2197
  %2200 = phi i64 [ %2178, %2197 ], [ 0, %2174 ]
  %2201 = and i64 %2160, 7
  %2202 = sub nsw i64 %2167, %2201
  br label %2203

2203:                                             ; preds = %2203, %2199
  %2204 = phi i64 [ %2200, %2199 ], [ %2208, %2203 ]
  %2205 = getelementptr inbounds i16, ptr %404, i64 %2204
  %2206 = load <8 x i16>, ptr %2205, align 2, !tbaa !44
  %2207 = getelementptr inbounds i16, ptr %2164, i64 %2204
  store <8 x i16> %2206, ptr %2207, align 2, !tbaa !44
  %2208 = add nuw i64 %2204, 8
  %2209 = icmp eq i64 %2208, %2202
  br i1 %2209, label %2210, label %2203, !llvm.loop !356

2210:                                             ; preds = %2203
  %2211 = icmp eq i64 %2201, 0
  br i1 %2211, label %2250, label %2212

2212:                                             ; preds = %2169, %2166, %2197, %2210
  %2213 = phi i64 [ 0, %2166 ], [ 0, %2169 ], [ %2178, %2197 ], [ %2202, %2210 ]
  %2214 = sub i64 %2160, %2213
  %2215 = xor i64 %2213, -1
  %2216 = add nsw i64 %2167, %2215
  %2217 = and i64 %2214, 3
  %2218 = icmp eq i64 %2217, 0
  br i1 %2218, label %2228, label %2219

2219:                                             ; preds = %2212, %2219
  %2220 = phi i64 [ %2225, %2219 ], [ %2213, %2212 ]
  %2221 = phi i64 [ %2226, %2219 ], [ 0, %2212 ]
  %2222 = getelementptr inbounds i16, ptr %404, i64 %2220
  %2223 = load i16, ptr %2222, align 2, !tbaa !44
  %2224 = getelementptr inbounds i16, ptr %2164, i64 %2220
  store i16 %2223, ptr %2224, align 2, !tbaa !44
  %2225 = add nuw nsw i64 %2220, 1
  %2226 = add i64 %2221, 1
  %2227 = icmp eq i64 %2226, %2217
  br i1 %2227, label %2228, label %2219, !llvm.loop !357

2228:                                             ; preds = %2219, %2212
  %2229 = phi i64 [ %2213, %2212 ], [ %2225, %2219 ]
  %2230 = icmp ult i64 %2216, 3
  br i1 %2230, label %2250, label %2231

2231:                                             ; preds = %2228, %2231
  %2232 = phi i64 [ %2248, %2231 ], [ %2229, %2228 ]
  %2233 = getelementptr inbounds i16, ptr %404, i64 %2232
  %2234 = load i16, ptr %2233, align 2, !tbaa !44
  %2235 = getelementptr inbounds i16, ptr %2164, i64 %2232
  store i16 %2234, ptr %2235, align 2, !tbaa !44
  %2236 = add nuw nsw i64 %2232, 1
  %2237 = getelementptr inbounds i16, ptr %404, i64 %2236
  %2238 = load i16, ptr %2237, align 2, !tbaa !44
  %2239 = getelementptr inbounds i16, ptr %2164, i64 %2236
  store i16 %2238, ptr %2239, align 2, !tbaa !44
  %2240 = add nuw nsw i64 %2232, 2
  %2241 = getelementptr inbounds i16, ptr %404, i64 %2240
  %2242 = load i16, ptr %2241, align 2, !tbaa !44
  %2243 = getelementptr inbounds i16, ptr %2164, i64 %2240
  store i16 %2242, ptr %2243, align 2, !tbaa !44
  %2244 = add nuw nsw i64 %2232, 3
  %2245 = getelementptr inbounds i16, ptr %404, i64 %2244
  %2246 = load i16, ptr %2245, align 2, !tbaa !44
  %2247 = getelementptr inbounds i16, ptr %2164, i64 %2244
  store i16 %2246, ptr %2247, align 2, !tbaa !44
  %2248 = add nuw nsw i64 %2232, 4
  %2249 = icmp eq i64 %2248, %2167
  br i1 %2249, label %2250, label %2231, !llvm.loop !358

2250:                                             ; preds = %2228, %2231, %2195, %2210
  %2251 = shl i64 %2159, 31
  %2252 = add i64 %2251, -4294967296
  %2253 = ashr i64 %2252, 32
  %2254 = getelementptr inbounds i16, ptr %2164, i64 %2253
  %2255 = load i16, ptr %2254, align 2, !tbaa !44
  br label %2256

2256:                                             ; preds = %2147, %2250
  %2257 = phi i64 [ %2160, %2250 ], [ 0, %2147 ]
  %2258 = phi i16 [ %2255, %2250 ], [ -1, %2147 ]
  %2259 = and i64 %2257, 4294967295
  %2260 = getelementptr inbounds i16, ptr %2164, i64 %2259
  store i16 %2258, ptr %2260, align 2, !tbaa !44
  %2261 = trunc i64 %2160 to i16
  %2262 = add i16 %2261, 1
  %2263 = sext i32 %2157 to i64
  %2264 = getelementptr inbounds i16, ptr %1599, i64 %2263
  store i16 %2262, ptr %2264, align 2, !tbaa !44
  %2265 = add nsw i32 %2161, 2
  %2266 = add nsw i32 %2265, %2157
  %2267 = ptrtoint ptr %2023 to i64
  %2268 = sub i64 %2267, %951
  %2269 = lshr exact i64 %2268, 1
  %2270 = trunc i64 %2269 to i32
  %2271 = add nsw i32 %2266, 1
  %2272 = sext i32 %2271 to i64
  %2273 = getelementptr i16, ptr %1599, i64 %2272
  %2274 = icmp sgt i32 %2270, 0
  br i1 %2274, label %2275, label %2365

2275:                                             ; preds = %2256
  %2276 = and i64 %2269, 4294967295
  %2277 = icmp ult i64 %2276, 8
  br i1 %2277, label %2321, label %2278

2278:                                             ; preds = %2275
  %2279 = shl nsw i64 %2272, 1
  %2280 = add i64 %2279, %1600
  %2281 = sub i64 %2280, %951
  %2282 = icmp ult i64 %2281, 128
  br i1 %2282, label %2321, label %2283

2283:                                             ; preds = %2278
  %2284 = icmp ult i64 %2276, 64
  br i1 %2284, label %2308, label %2285

2285:                                             ; preds = %2283
  %2286 = and i64 %2269, 63
  %2287 = sub nsw i64 %2276, %2286
  br label %2288

2288:                                             ; preds = %2288, %2285
  %2289 = phi i64 [ 0, %2285 ], [ %2302, %2288 ]
  %2290 = getelementptr inbounds i16, ptr %542, i64 %2289
  %2291 = load <16 x i16>, ptr %2290, align 2, !tbaa !44
  %2292 = getelementptr inbounds i16, ptr %2290, i64 16
  %2293 = load <16 x i16>, ptr %2292, align 2, !tbaa !44
  %2294 = getelementptr inbounds i16, ptr %2290, i64 32
  %2295 = load <16 x i16>, ptr %2294, align 2, !tbaa !44
  %2296 = getelementptr inbounds i16, ptr %2290, i64 48
  %2297 = load <16 x i16>, ptr %2296, align 2, !tbaa !44
  %2298 = getelementptr inbounds i16, ptr %2273, i64 %2289
  store <16 x i16> %2291, ptr %2298, align 2, !tbaa !44
  %2299 = getelementptr inbounds i16, ptr %2298, i64 16
  store <16 x i16> %2293, ptr %2299, align 2, !tbaa !44
  %2300 = getelementptr inbounds i16, ptr %2298, i64 32
  store <16 x i16> %2295, ptr %2300, align 2, !tbaa !44
  %2301 = getelementptr inbounds i16, ptr %2298, i64 48
  store <16 x i16> %2297, ptr %2301, align 2, !tbaa !44
  %2302 = add nuw i64 %2289, 64
  %2303 = icmp eq i64 %2302, %2287
  br i1 %2303, label %2304, label %2288, !llvm.loop !359

2304:                                             ; preds = %2288
  %2305 = icmp eq i64 %2286, 0
  br i1 %2305, label %2359, label %2306

2306:                                             ; preds = %2304
  %2307 = icmp ult i64 %2286, 8
  br i1 %2307, label %2321, label %2308

2308:                                             ; preds = %2283, %2306
  %2309 = phi i64 [ %2287, %2306 ], [ 0, %2283 ]
  %2310 = and i64 %2269, 7
  %2311 = sub nsw i64 %2276, %2310
  br label %2312

2312:                                             ; preds = %2312, %2308
  %2313 = phi i64 [ %2309, %2308 ], [ %2317, %2312 ]
  %2314 = getelementptr inbounds i16, ptr %542, i64 %2313
  %2315 = load <8 x i16>, ptr %2314, align 2, !tbaa !44
  %2316 = getelementptr inbounds i16, ptr %2273, i64 %2313
  store <8 x i16> %2315, ptr %2316, align 2, !tbaa !44
  %2317 = add nuw i64 %2313, 8
  %2318 = icmp eq i64 %2317, %2311
  br i1 %2318, label %2319, label %2312, !llvm.loop !360

2319:                                             ; preds = %2312
  %2320 = icmp eq i64 %2310, 0
  br i1 %2320, label %2359, label %2321

2321:                                             ; preds = %2278, %2275, %2306, %2319
  %2322 = phi i64 [ 0, %2275 ], [ 0, %2278 ], [ %2287, %2306 ], [ %2311, %2319 ]
  %2323 = sub i64 %2269, %2322
  %2324 = xor i64 %2322, -1
  %2325 = add nsw i64 %2276, %2324
  %2326 = and i64 %2323, 3
  %2327 = icmp eq i64 %2326, 0
  br i1 %2327, label %2337, label %2328

2328:                                             ; preds = %2321, %2328
  %2329 = phi i64 [ %2334, %2328 ], [ %2322, %2321 ]
  %2330 = phi i64 [ %2335, %2328 ], [ 0, %2321 ]
  %2331 = getelementptr inbounds i16, ptr %542, i64 %2329
  %2332 = load i16, ptr %2331, align 2, !tbaa !44
  %2333 = getelementptr inbounds i16, ptr %2273, i64 %2329
  store i16 %2332, ptr %2333, align 2, !tbaa !44
  %2334 = add nuw nsw i64 %2329, 1
  %2335 = add i64 %2330, 1
  %2336 = icmp eq i64 %2335, %2326
  br i1 %2336, label %2337, label %2328, !llvm.loop !361

2337:                                             ; preds = %2328, %2321
  %2338 = phi i64 [ %2322, %2321 ], [ %2334, %2328 ]
  %2339 = icmp ult i64 %2325, 3
  br i1 %2339, label %2359, label %2340

2340:                                             ; preds = %2337, %2340
  %2341 = phi i64 [ %2357, %2340 ], [ %2338, %2337 ]
  %2342 = getelementptr inbounds i16, ptr %542, i64 %2341
  %2343 = load i16, ptr %2342, align 2, !tbaa !44
  %2344 = getelementptr inbounds i16, ptr %2273, i64 %2341
  store i16 %2343, ptr %2344, align 2, !tbaa !44
  %2345 = add nuw nsw i64 %2341, 1
  %2346 = getelementptr inbounds i16, ptr %542, i64 %2345
  %2347 = load i16, ptr %2346, align 2, !tbaa !44
  %2348 = getelementptr inbounds i16, ptr %2273, i64 %2345
  store i16 %2347, ptr %2348, align 2, !tbaa !44
  %2349 = add nuw nsw i64 %2341, 2
  %2350 = getelementptr inbounds i16, ptr %542, i64 %2349
  %2351 = load i16, ptr %2350, align 2, !tbaa !44
  %2352 = getelementptr inbounds i16, ptr %2273, i64 %2349
  store i16 %2351, ptr %2352, align 2, !tbaa !44
  %2353 = add nuw nsw i64 %2341, 3
  %2354 = getelementptr inbounds i16, ptr %542, i64 %2353
  %2355 = load i16, ptr %2354, align 2, !tbaa !44
  %2356 = getelementptr inbounds i16, ptr %2273, i64 %2353
  store i16 %2355, ptr %2356, align 2, !tbaa !44
  %2357 = add nuw nsw i64 %2341, 4
  %2358 = icmp eq i64 %2357, %2276
  br i1 %2358, label %2359, label %2340, !llvm.loop !362

2359:                                             ; preds = %2337, %2340, %2304, %2319
  %2360 = shl i64 %2268, 31
  %2361 = add i64 %2360, -4294967296
  %2362 = ashr i64 %2361, 32
  %2363 = getelementptr inbounds i16, ptr %2273, i64 %2362
  %2364 = load i16, ptr %2363, align 2, !tbaa !44
  br label %2365

2365:                                             ; preds = %2256, %2359
  %2366 = phi i64 [ %2269, %2359 ], [ 0, %2256 ]
  %2367 = phi i16 [ %2364, %2359 ], [ -1, %2256 ]
  %2368 = and i64 %2366, 4294967295
  %2369 = getelementptr inbounds i16, ptr %2273, i64 %2368
  store i16 %2367, ptr %2369, align 2, !tbaa !44
  %2370 = trunc i64 %2269 to i16
  %2371 = add i16 %2370, 1
  %2372 = sext i32 %2266 to i64
  %2373 = getelementptr inbounds i16, ptr %1599, i64 %2372
  store i16 %2371, ptr %2373, align 2, !tbaa !44
  %2374 = add nsw i32 %2270, 2
  %2375 = add nsw i32 %2374, %2266
  %2376 = ptrtoint ptr %2022 to i64
  %2377 = sub i64 %2376, %952
  %2378 = lshr exact i64 %2377, 1
  %2379 = trunc i64 %2378 to i32
  %2380 = add nsw i32 %2375, 1
  %2381 = sext i32 %2380 to i64
  %2382 = getelementptr i16, ptr %1599, i64 %2381
  %2383 = icmp sgt i32 %2379, 0
  br i1 %2383, label %2384, label %2474

2384:                                             ; preds = %2365
  %2385 = and i64 %2378, 4294967295
  %2386 = icmp ult i64 %2385, 8
  br i1 %2386, label %2430, label %2387

2387:                                             ; preds = %2384
  %2388 = shl nsw i64 %2381, 1
  %2389 = add i64 %2388, %1600
  %2390 = sub i64 %2389, %952
  %2391 = icmp ult i64 %2390, 128
  br i1 %2391, label %2430, label %2392

2392:                                             ; preds = %2387
  %2393 = icmp ult i64 %2385, 64
  br i1 %2393, label %2417, label %2394

2394:                                             ; preds = %2392
  %2395 = and i64 %2378, 63
  %2396 = sub nsw i64 %2385, %2395
  br label %2397

2397:                                             ; preds = %2397, %2394
  %2398 = phi i64 [ 0, %2394 ], [ %2411, %2397 ]
  %2399 = getelementptr inbounds i16, ptr %588, i64 %2398
  %2400 = load <16 x i16>, ptr %2399, align 2, !tbaa !44
  %2401 = getelementptr inbounds i16, ptr %2399, i64 16
  %2402 = load <16 x i16>, ptr %2401, align 2, !tbaa !44
  %2403 = getelementptr inbounds i16, ptr %2399, i64 32
  %2404 = load <16 x i16>, ptr %2403, align 2, !tbaa !44
  %2405 = getelementptr inbounds i16, ptr %2399, i64 48
  %2406 = load <16 x i16>, ptr %2405, align 2, !tbaa !44
  %2407 = getelementptr inbounds i16, ptr %2382, i64 %2398
  store <16 x i16> %2400, ptr %2407, align 2, !tbaa !44
  %2408 = getelementptr inbounds i16, ptr %2407, i64 16
  store <16 x i16> %2402, ptr %2408, align 2, !tbaa !44
  %2409 = getelementptr inbounds i16, ptr %2407, i64 32
  store <16 x i16> %2404, ptr %2409, align 2, !tbaa !44
  %2410 = getelementptr inbounds i16, ptr %2407, i64 48
  store <16 x i16> %2406, ptr %2410, align 2, !tbaa !44
  %2411 = add nuw i64 %2398, 64
  %2412 = icmp eq i64 %2411, %2396
  br i1 %2412, label %2413, label %2397, !llvm.loop !363

2413:                                             ; preds = %2397
  %2414 = icmp eq i64 %2395, 0
  br i1 %2414, label %2468, label %2415

2415:                                             ; preds = %2413
  %2416 = icmp ult i64 %2395, 8
  br i1 %2416, label %2430, label %2417

2417:                                             ; preds = %2392, %2415
  %2418 = phi i64 [ %2396, %2415 ], [ 0, %2392 ]
  %2419 = and i64 %2378, 7
  %2420 = sub nsw i64 %2385, %2419
  br label %2421

2421:                                             ; preds = %2421, %2417
  %2422 = phi i64 [ %2418, %2417 ], [ %2426, %2421 ]
  %2423 = getelementptr inbounds i16, ptr %588, i64 %2422
  %2424 = load <8 x i16>, ptr %2423, align 2, !tbaa !44
  %2425 = getelementptr inbounds i16, ptr %2382, i64 %2422
  store <8 x i16> %2424, ptr %2425, align 2, !tbaa !44
  %2426 = add nuw i64 %2422, 8
  %2427 = icmp eq i64 %2426, %2420
  br i1 %2427, label %2428, label %2421, !llvm.loop !364

2428:                                             ; preds = %2421
  %2429 = icmp eq i64 %2419, 0
  br i1 %2429, label %2468, label %2430

2430:                                             ; preds = %2387, %2384, %2415, %2428
  %2431 = phi i64 [ 0, %2384 ], [ 0, %2387 ], [ %2396, %2415 ], [ %2420, %2428 ]
  %2432 = sub i64 %2378, %2431
  %2433 = xor i64 %2431, -1
  %2434 = add nsw i64 %2385, %2433
  %2435 = and i64 %2432, 3
  %2436 = icmp eq i64 %2435, 0
  br i1 %2436, label %2446, label %2437

2437:                                             ; preds = %2430, %2437
  %2438 = phi i64 [ %2443, %2437 ], [ %2431, %2430 ]
  %2439 = phi i64 [ %2444, %2437 ], [ 0, %2430 ]
  %2440 = getelementptr inbounds i16, ptr %588, i64 %2438
  %2441 = load i16, ptr %2440, align 2, !tbaa !44
  %2442 = getelementptr inbounds i16, ptr %2382, i64 %2438
  store i16 %2441, ptr %2442, align 2, !tbaa !44
  %2443 = add nuw nsw i64 %2438, 1
  %2444 = add i64 %2439, 1
  %2445 = icmp eq i64 %2444, %2435
  br i1 %2445, label %2446, label %2437, !llvm.loop !365

2446:                                             ; preds = %2437, %2430
  %2447 = phi i64 [ %2431, %2430 ], [ %2443, %2437 ]
  %2448 = icmp ult i64 %2434, 3
  br i1 %2448, label %2468, label %2449

2449:                                             ; preds = %2446, %2449
  %2450 = phi i64 [ %2466, %2449 ], [ %2447, %2446 ]
  %2451 = getelementptr inbounds i16, ptr %588, i64 %2450
  %2452 = load i16, ptr %2451, align 2, !tbaa !44
  %2453 = getelementptr inbounds i16, ptr %2382, i64 %2450
  store i16 %2452, ptr %2453, align 2, !tbaa !44
  %2454 = add nuw nsw i64 %2450, 1
  %2455 = getelementptr inbounds i16, ptr %588, i64 %2454
  %2456 = load i16, ptr %2455, align 2, !tbaa !44
  %2457 = getelementptr inbounds i16, ptr %2382, i64 %2454
  store i16 %2456, ptr %2457, align 2, !tbaa !44
  %2458 = add nuw nsw i64 %2450, 2
  %2459 = getelementptr inbounds i16, ptr %588, i64 %2458
  %2460 = load i16, ptr %2459, align 2, !tbaa !44
  %2461 = getelementptr inbounds i16, ptr %2382, i64 %2458
  store i16 %2460, ptr %2461, align 2, !tbaa !44
  %2462 = add nuw nsw i64 %2450, 3
  %2463 = getelementptr inbounds i16, ptr %588, i64 %2462
  %2464 = load i16, ptr %2463, align 2, !tbaa !44
  %2465 = getelementptr inbounds i16, ptr %2382, i64 %2462
  store i16 %2464, ptr %2465, align 2, !tbaa !44
  %2466 = add nuw nsw i64 %2450, 4
  %2467 = icmp eq i64 %2466, %2385
  br i1 %2467, label %2468, label %2449, !llvm.loop !366

2468:                                             ; preds = %2446, %2449, %2413, %2428
  %2469 = shl i64 %2377, 31
  %2470 = add i64 %2469, -4294967296
  %2471 = ashr i64 %2470, 32
  %2472 = getelementptr inbounds i16, ptr %2382, i64 %2471
  %2473 = load i16, ptr %2472, align 2, !tbaa !44
  br label %2474

2474:                                             ; preds = %2365, %2468
  %2475 = phi i64 [ %2378, %2468 ], [ 0, %2365 ]
  %2476 = phi i16 [ %2473, %2468 ], [ -1, %2365 ]
  %2477 = and i64 %2475, 4294967295
  %2478 = getelementptr inbounds i16, ptr %2382, i64 %2477
  store i16 %2476, ptr %2478, align 2, !tbaa !44
  %2479 = trunc i64 %2378 to i16
  %2480 = add i16 %2479, 1
  %2481 = sext i32 %2375 to i64
  %2482 = getelementptr inbounds i16, ptr %1599, i64 %2481
  store i16 %2480, ptr %2482, align 2, !tbaa !44
  %2483 = add nsw i32 %2379, 2
  %2484 = add nsw i32 %2483, %2375
  store i32 %2484, ptr %14, align 8, !tbaa !17
  %2485 = ptrtoint ptr %2021 to i64
  %2486 = sub i64 %2485, %953
  %2487 = lshr exact i64 %2486, 1
  %2488 = trunc i64 %2487 to i32
  %2489 = add nsw i32 %2484, 1
  %2490 = sext i32 %2489 to i64
  %2491 = getelementptr i16, ptr %1599, i64 %2490
  %2492 = icmp sgt i32 %2488, 0
  br i1 %2492, label %2493, label %2583

2493:                                             ; preds = %2474
  %2494 = and i64 %2487, 4294967295
  %2495 = icmp ult i64 %2494, 8
  br i1 %2495, label %2539, label %2496

2496:                                             ; preds = %2493
  %2497 = shl nsw i64 %2490, 1
  %2498 = add i64 %2497, %1600
  %2499 = sub i64 %2498, %953
  %2500 = icmp ult i64 %2499, 128
  br i1 %2500, label %2539, label %2501

2501:                                             ; preds = %2496
  %2502 = icmp ult i64 %2494, 64
  br i1 %2502, label %2526, label %2503

2503:                                             ; preds = %2501
  %2504 = and i64 %2487, 63
  %2505 = sub nsw i64 %2494, %2504
  br label %2506

2506:                                             ; preds = %2506, %2503
  %2507 = phi i64 [ 0, %2503 ], [ %2520, %2506 ]
  %2508 = getelementptr inbounds i16, ptr %634, i64 %2507
  %2509 = load <16 x i16>, ptr %2508, align 2, !tbaa !44
  %2510 = getelementptr inbounds i16, ptr %2508, i64 16
  %2511 = load <16 x i16>, ptr %2510, align 2, !tbaa !44
  %2512 = getelementptr inbounds i16, ptr %2508, i64 32
  %2513 = load <16 x i16>, ptr %2512, align 2, !tbaa !44
  %2514 = getelementptr inbounds i16, ptr %2508, i64 48
  %2515 = load <16 x i16>, ptr %2514, align 2, !tbaa !44
  %2516 = getelementptr inbounds i16, ptr %2491, i64 %2507
  store <16 x i16> %2509, ptr %2516, align 2, !tbaa !44
  %2517 = getelementptr inbounds i16, ptr %2516, i64 16
  store <16 x i16> %2511, ptr %2517, align 2, !tbaa !44
  %2518 = getelementptr inbounds i16, ptr %2516, i64 32
  store <16 x i16> %2513, ptr %2518, align 2, !tbaa !44
  %2519 = getelementptr inbounds i16, ptr %2516, i64 48
  store <16 x i16> %2515, ptr %2519, align 2, !tbaa !44
  %2520 = add nuw i64 %2507, 64
  %2521 = icmp eq i64 %2520, %2505
  br i1 %2521, label %2522, label %2506, !llvm.loop !367

2522:                                             ; preds = %2506
  %2523 = icmp eq i64 %2504, 0
  br i1 %2523, label %2577, label %2524

2524:                                             ; preds = %2522
  %2525 = icmp ult i64 %2504, 8
  br i1 %2525, label %2539, label %2526

2526:                                             ; preds = %2501, %2524
  %2527 = phi i64 [ %2505, %2524 ], [ 0, %2501 ]
  %2528 = and i64 %2487, 7
  %2529 = sub nsw i64 %2494, %2528
  br label %2530

2530:                                             ; preds = %2530, %2526
  %2531 = phi i64 [ %2527, %2526 ], [ %2535, %2530 ]
  %2532 = getelementptr inbounds i16, ptr %634, i64 %2531
  %2533 = load <8 x i16>, ptr %2532, align 2, !tbaa !44
  %2534 = getelementptr inbounds i16, ptr %2491, i64 %2531
  store <8 x i16> %2533, ptr %2534, align 2, !tbaa !44
  %2535 = add nuw i64 %2531, 8
  %2536 = icmp eq i64 %2535, %2529
  br i1 %2536, label %2537, label %2530, !llvm.loop !368

2537:                                             ; preds = %2530
  %2538 = icmp eq i64 %2528, 0
  br i1 %2538, label %2577, label %2539

2539:                                             ; preds = %2496, %2493, %2524, %2537
  %2540 = phi i64 [ 0, %2493 ], [ 0, %2496 ], [ %2505, %2524 ], [ %2529, %2537 ]
  %2541 = sub i64 %2487, %2540
  %2542 = xor i64 %2540, -1
  %2543 = add nsw i64 %2494, %2542
  %2544 = and i64 %2541, 3
  %2545 = icmp eq i64 %2544, 0
  br i1 %2545, label %2555, label %2546

2546:                                             ; preds = %2539, %2546
  %2547 = phi i64 [ %2552, %2546 ], [ %2540, %2539 ]
  %2548 = phi i64 [ %2553, %2546 ], [ 0, %2539 ]
  %2549 = getelementptr inbounds i16, ptr %634, i64 %2547
  %2550 = load i16, ptr %2549, align 2, !tbaa !44
  %2551 = getelementptr inbounds i16, ptr %2491, i64 %2547
  store i16 %2550, ptr %2551, align 2, !tbaa !44
  %2552 = add nuw nsw i64 %2547, 1
  %2553 = add i64 %2548, 1
  %2554 = icmp eq i64 %2553, %2544
  br i1 %2554, label %2555, label %2546, !llvm.loop !369

2555:                                             ; preds = %2546, %2539
  %2556 = phi i64 [ %2540, %2539 ], [ %2552, %2546 ]
  %2557 = icmp ult i64 %2543, 3
  br i1 %2557, label %2577, label %2558

2558:                                             ; preds = %2555, %2558
  %2559 = phi i64 [ %2575, %2558 ], [ %2556, %2555 ]
  %2560 = getelementptr inbounds i16, ptr %634, i64 %2559
  %2561 = load i16, ptr %2560, align 2, !tbaa !44
  %2562 = getelementptr inbounds i16, ptr %2491, i64 %2559
  store i16 %2561, ptr %2562, align 2, !tbaa !44
  %2563 = add nuw nsw i64 %2559, 1
  %2564 = getelementptr inbounds i16, ptr %634, i64 %2563
  %2565 = load i16, ptr %2564, align 2, !tbaa !44
  %2566 = getelementptr inbounds i16, ptr %2491, i64 %2563
  store i16 %2565, ptr %2566, align 2, !tbaa !44
  %2567 = add nuw nsw i64 %2559, 2
  %2568 = getelementptr inbounds i16, ptr %634, i64 %2567
  %2569 = load i16, ptr %2568, align 2, !tbaa !44
  %2570 = getelementptr inbounds i16, ptr %2491, i64 %2567
  store i16 %2569, ptr %2570, align 2, !tbaa !44
  %2571 = add nuw nsw i64 %2559, 3
  %2572 = getelementptr inbounds i16, ptr %634, i64 %2571
  %2573 = load i16, ptr %2572, align 2, !tbaa !44
  %2574 = getelementptr inbounds i16, ptr %2491, i64 %2571
  store i16 %2573, ptr %2574, align 2, !tbaa !44
  %2575 = add nuw nsw i64 %2559, 4
  %2576 = icmp eq i64 %2575, %2494
  br i1 %2576, label %2577, label %2558, !llvm.loop !370

2577:                                             ; preds = %2555, %2558, %2522, %2537
  %2578 = shl i64 %2486, 31
  %2579 = add i64 %2578, -4294967296
  %2580 = ashr i64 %2579, 32
  %2581 = getelementptr inbounds i16, ptr %2491, i64 %2580
  %2582 = load i16, ptr %2581, align 2, !tbaa !44
  br label %2583

2583:                                             ; preds = %2474, %2577
  %2584 = phi i64 [ %2487, %2577 ], [ 0, %2474 ]
  %2585 = phi i16 [ %2582, %2577 ], [ -1, %2474 ]
  %2586 = and i64 %2584, 4294967295
  %2587 = getelementptr inbounds i16, ptr %2491, i64 %2586
  store i16 %2585, ptr %2587, align 2, !tbaa !44
  %2588 = trunc i64 %2487 to i16
  %2589 = add i16 %2588, 1
  %2590 = sext i32 %2484 to i64
  %2591 = getelementptr inbounds i16, ptr %1599, i64 %2590
  store i16 %2589, ptr %2591, align 2, !tbaa !44
  %2592 = add nsw i32 %2488, 2
  %2593 = add nsw i32 %2592, %2484
  %2594 = ptrtoint ptr %2020 to i64
  %2595 = sub i64 %2594, %954
  %2596 = lshr exact i64 %2595, 1
  %2597 = trunc i64 %2596 to i32
  %2598 = add nsw i32 %2593, 1
  %2599 = sext i32 %2598 to i64
  %2600 = getelementptr i16, ptr %1599, i64 %2599
  %2601 = icmp sgt i32 %2597, 0
  br i1 %2601, label %2602, label %2692

2602:                                             ; preds = %2583
  %2603 = and i64 %2596, 4294967295
  %2604 = icmp ult i64 %2603, 8
  br i1 %2604, label %2648, label %2605

2605:                                             ; preds = %2602
  %2606 = shl nsw i64 %2599, 1
  %2607 = add i64 %2606, %1600
  %2608 = sub i64 %2607, %954
  %2609 = icmp ult i64 %2608, 128
  br i1 %2609, label %2648, label %2610

2610:                                             ; preds = %2605
  %2611 = icmp ult i64 %2603, 64
  br i1 %2611, label %2635, label %2612

2612:                                             ; preds = %2610
  %2613 = and i64 %2596, 63
  %2614 = sub nsw i64 %2603, %2613
  br label %2615

2615:                                             ; preds = %2615, %2612
  %2616 = phi i64 [ 0, %2612 ], [ %2629, %2615 ]
  %2617 = getelementptr inbounds i16, ptr %680, i64 %2616
  %2618 = load <16 x i16>, ptr %2617, align 2, !tbaa !44
  %2619 = getelementptr inbounds i16, ptr %2617, i64 16
  %2620 = load <16 x i16>, ptr %2619, align 2, !tbaa !44
  %2621 = getelementptr inbounds i16, ptr %2617, i64 32
  %2622 = load <16 x i16>, ptr %2621, align 2, !tbaa !44
  %2623 = getelementptr inbounds i16, ptr %2617, i64 48
  %2624 = load <16 x i16>, ptr %2623, align 2, !tbaa !44
  %2625 = getelementptr inbounds i16, ptr %2600, i64 %2616
  store <16 x i16> %2618, ptr %2625, align 2, !tbaa !44
  %2626 = getelementptr inbounds i16, ptr %2625, i64 16
  store <16 x i16> %2620, ptr %2626, align 2, !tbaa !44
  %2627 = getelementptr inbounds i16, ptr %2625, i64 32
  store <16 x i16> %2622, ptr %2627, align 2, !tbaa !44
  %2628 = getelementptr inbounds i16, ptr %2625, i64 48
  store <16 x i16> %2624, ptr %2628, align 2, !tbaa !44
  %2629 = add nuw i64 %2616, 64
  %2630 = icmp eq i64 %2629, %2614
  br i1 %2630, label %2631, label %2615, !llvm.loop !371

2631:                                             ; preds = %2615
  %2632 = icmp eq i64 %2613, 0
  br i1 %2632, label %2686, label %2633

2633:                                             ; preds = %2631
  %2634 = icmp ult i64 %2613, 8
  br i1 %2634, label %2648, label %2635

2635:                                             ; preds = %2610, %2633
  %2636 = phi i64 [ %2614, %2633 ], [ 0, %2610 ]
  %2637 = and i64 %2596, 7
  %2638 = sub nsw i64 %2603, %2637
  br label %2639

2639:                                             ; preds = %2639, %2635
  %2640 = phi i64 [ %2636, %2635 ], [ %2644, %2639 ]
  %2641 = getelementptr inbounds i16, ptr %680, i64 %2640
  %2642 = load <8 x i16>, ptr %2641, align 2, !tbaa !44
  %2643 = getelementptr inbounds i16, ptr %2600, i64 %2640
  store <8 x i16> %2642, ptr %2643, align 2, !tbaa !44
  %2644 = add nuw i64 %2640, 8
  %2645 = icmp eq i64 %2644, %2638
  br i1 %2645, label %2646, label %2639, !llvm.loop !372

2646:                                             ; preds = %2639
  %2647 = icmp eq i64 %2637, 0
  br i1 %2647, label %2686, label %2648

2648:                                             ; preds = %2605, %2602, %2633, %2646
  %2649 = phi i64 [ 0, %2602 ], [ 0, %2605 ], [ %2614, %2633 ], [ %2638, %2646 ]
  %2650 = sub i64 %2596, %2649
  %2651 = xor i64 %2649, -1
  %2652 = add nsw i64 %2603, %2651
  %2653 = and i64 %2650, 3
  %2654 = icmp eq i64 %2653, 0
  br i1 %2654, label %2664, label %2655

2655:                                             ; preds = %2648, %2655
  %2656 = phi i64 [ %2661, %2655 ], [ %2649, %2648 ]
  %2657 = phi i64 [ %2662, %2655 ], [ 0, %2648 ]
  %2658 = getelementptr inbounds i16, ptr %680, i64 %2656
  %2659 = load i16, ptr %2658, align 2, !tbaa !44
  %2660 = getelementptr inbounds i16, ptr %2600, i64 %2656
  store i16 %2659, ptr %2660, align 2, !tbaa !44
  %2661 = add nuw nsw i64 %2656, 1
  %2662 = add i64 %2657, 1
  %2663 = icmp eq i64 %2662, %2653
  br i1 %2663, label %2664, label %2655, !llvm.loop !373

2664:                                             ; preds = %2655, %2648
  %2665 = phi i64 [ %2649, %2648 ], [ %2661, %2655 ]
  %2666 = icmp ult i64 %2652, 3
  br i1 %2666, label %2686, label %2667

2667:                                             ; preds = %2664, %2667
  %2668 = phi i64 [ %2684, %2667 ], [ %2665, %2664 ]
  %2669 = getelementptr inbounds i16, ptr %680, i64 %2668
  %2670 = load i16, ptr %2669, align 2, !tbaa !44
  %2671 = getelementptr inbounds i16, ptr %2600, i64 %2668
  store i16 %2670, ptr %2671, align 2, !tbaa !44
  %2672 = add nuw nsw i64 %2668, 1
  %2673 = getelementptr inbounds i16, ptr %680, i64 %2672
  %2674 = load i16, ptr %2673, align 2, !tbaa !44
  %2675 = getelementptr inbounds i16, ptr %2600, i64 %2672
  store i16 %2674, ptr %2675, align 2, !tbaa !44
  %2676 = add nuw nsw i64 %2668, 2
  %2677 = getelementptr inbounds i16, ptr %680, i64 %2676
  %2678 = load i16, ptr %2677, align 2, !tbaa !44
  %2679 = getelementptr inbounds i16, ptr %2600, i64 %2676
  store i16 %2678, ptr %2679, align 2, !tbaa !44
  %2680 = add nuw nsw i64 %2668, 3
  %2681 = getelementptr inbounds i16, ptr %680, i64 %2680
  %2682 = load i16, ptr %2681, align 2, !tbaa !44
  %2683 = getelementptr inbounds i16, ptr %2600, i64 %2680
  store i16 %2682, ptr %2683, align 2, !tbaa !44
  %2684 = add nuw nsw i64 %2668, 4
  %2685 = icmp eq i64 %2684, %2603
  br i1 %2685, label %2686, label %2667, !llvm.loop !374

2686:                                             ; preds = %2664, %2667, %2631, %2646
  %2687 = shl i64 %2595, 31
  %2688 = add i64 %2687, -4294967296
  %2689 = ashr i64 %2688, 32
  %2690 = getelementptr inbounds i16, ptr %2600, i64 %2689
  %2691 = load i16, ptr %2690, align 2, !tbaa !44
  br label %2692

2692:                                             ; preds = %2583, %2686
  %2693 = phi i64 [ %2596, %2686 ], [ 0, %2583 ]
  %2694 = phi i16 [ %2691, %2686 ], [ -1, %2583 ]
  %2695 = and i64 %2693, 4294967295
  %2696 = getelementptr inbounds i16, ptr %2600, i64 %2695
  store i16 %2694, ptr %2696, align 2, !tbaa !44
  %2697 = trunc i64 %2596 to i16
  %2698 = add i16 %2697, 1
  %2699 = sext i32 %2593 to i64
  %2700 = getelementptr inbounds i16, ptr %1599, i64 %2699
  store i16 %2698, ptr %2700, align 2, !tbaa !44
  %2701 = add nsw i32 %2597, 2
  %2702 = add nsw i32 %2701, %2593
  %2703 = ptrtoint ptr %2019 to i64
  %2704 = sub i64 %2703, %955
  %2705 = lshr exact i64 %2704, 1
  %2706 = trunc i64 %2705 to i32
  %2707 = add nsw i32 %2702, 1
  %2708 = sext i32 %2707 to i64
  %2709 = getelementptr i16, ptr %1599, i64 %2708
  %2710 = icmp sgt i32 %2706, 0
  br i1 %2710, label %2711, label %2801

2711:                                             ; preds = %2692
  %2712 = and i64 %2705, 4294967295
  %2713 = icmp ult i64 %2712, 8
  br i1 %2713, label %2757, label %2714

2714:                                             ; preds = %2711
  %2715 = shl nsw i64 %2708, 1
  %2716 = add i64 %2715, %1600
  %2717 = sub i64 %2716, %955
  %2718 = icmp ult i64 %2717, 128
  br i1 %2718, label %2757, label %2719

2719:                                             ; preds = %2714
  %2720 = icmp ult i64 %2712, 64
  br i1 %2720, label %2744, label %2721

2721:                                             ; preds = %2719
  %2722 = and i64 %2705, 63
  %2723 = sub nsw i64 %2712, %2722
  br label %2724

2724:                                             ; preds = %2724, %2721
  %2725 = phi i64 [ 0, %2721 ], [ %2738, %2724 ]
  %2726 = getelementptr inbounds i16, ptr %726, i64 %2725
  %2727 = load <16 x i16>, ptr %2726, align 2, !tbaa !44
  %2728 = getelementptr inbounds i16, ptr %2726, i64 16
  %2729 = load <16 x i16>, ptr %2728, align 2, !tbaa !44
  %2730 = getelementptr inbounds i16, ptr %2726, i64 32
  %2731 = load <16 x i16>, ptr %2730, align 2, !tbaa !44
  %2732 = getelementptr inbounds i16, ptr %2726, i64 48
  %2733 = load <16 x i16>, ptr %2732, align 2, !tbaa !44
  %2734 = getelementptr inbounds i16, ptr %2709, i64 %2725
  store <16 x i16> %2727, ptr %2734, align 2, !tbaa !44
  %2735 = getelementptr inbounds i16, ptr %2734, i64 16
  store <16 x i16> %2729, ptr %2735, align 2, !tbaa !44
  %2736 = getelementptr inbounds i16, ptr %2734, i64 32
  store <16 x i16> %2731, ptr %2736, align 2, !tbaa !44
  %2737 = getelementptr inbounds i16, ptr %2734, i64 48
  store <16 x i16> %2733, ptr %2737, align 2, !tbaa !44
  %2738 = add nuw i64 %2725, 64
  %2739 = icmp eq i64 %2738, %2723
  br i1 %2739, label %2740, label %2724, !llvm.loop !375

2740:                                             ; preds = %2724
  %2741 = icmp eq i64 %2722, 0
  br i1 %2741, label %2795, label %2742

2742:                                             ; preds = %2740
  %2743 = icmp ult i64 %2722, 8
  br i1 %2743, label %2757, label %2744

2744:                                             ; preds = %2719, %2742
  %2745 = phi i64 [ %2723, %2742 ], [ 0, %2719 ]
  %2746 = and i64 %2705, 7
  %2747 = sub nsw i64 %2712, %2746
  br label %2748

2748:                                             ; preds = %2748, %2744
  %2749 = phi i64 [ %2745, %2744 ], [ %2753, %2748 ]
  %2750 = getelementptr inbounds i16, ptr %726, i64 %2749
  %2751 = load <8 x i16>, ptr %2750, align 2, !tbaa !44
  %2752 = getelementptr inbounds i16, ptr %2709, i64 %2749
  store <8 x i16> %2751, ptr %2752, align 2, !tbaa !44
  %2753 = add nuw i64 %2749, 8
  %2754 = icmp eq i64 %2753, %2747
  br i1 %2754, label %2755, label %2748, !llvm.loop !376

2755:                                             ; preds = %2748
  %2756 = icmp eq i64 %2746, 0
  br i1 %2756, label %2795, label %2757

2757:                                             ; preds = %2714, %2711, %2742, %2755
  %2758 = phi i64 [ 0, %2711 ], [ 0, %2714 ], [ %2723, %2742 ], [ %2747, %2755 ]
  %2759 = sub i64 %2705, %2758
  %2760 = xor i64 %2758, -1
  %2761 = add nsw i64 %2712, %2760
  %2762 = and i64 %2759, 3
  %2763 = icmp eq i64 %2762, 0
  br i1 %2763, label %2773, label %2764

2764:                                             ; preds = %2757, %2764
  %2765 = phi i64 [ %2770, %2764 ], [ %2758, %2757 ]
  %2766 = phi i64 [ %2771, %2764 ], [ 0, %2757 ]
  %2767 = getelementptr inbounds i16, ptr %726, i64 %2765
  %2768 = load i16, ptr %2767, align 2, !tbaa !44
  %2769 = getelementptr inbounds i16, ptr %2709, i64 %2765
  store i16 %2768, ptr %2769, align 2, !tbaa !44
  %2770 = add nuw nsw i64 %2765, 1
  %2771 = add i64 %2766, 1
  %2772 = icmp eq i64 %2771, %2762
  br i1 %2772, label %2773, label %2764, !llvm.loop !377

2773:                                             ; preds = %2764, %2757
  %2774 = phi i64 [ %2758, %2757 ], [ %2770, %2764 ]
  %2775 = icmp ult i64 %2761, 3
  br i1 %2775, label %2795, label %2776

2776:                                             ; preds = %2773, %2776
  %2777 = phi i64 [ %2793, %2776 ], [ %2774, %2773 ]
  %2778 = getelementptr inbounds i16, ptr %726, i64 %2777
  %2779 = load i16, ptr %2778, align 2, !tbaa !44
  %2780 = getelementptr inbounds i16, ptr %2709, i64 %2777
  store i16 %2779, ptr %2780, align 2, !tbaa !44
  %2781 = add nuw nsw i64 %2777, 1
  %2782 = getelementptr inbounds i16, ptr %726, i64 %2781
  %2783 = load i16, ptr %2782, align 2, !tbaa !44
  %2784 = getelementptr inbounds i16, ptr %2709, i64 %2781
  store i16 %2783, ptr %2784, align 2, !tbaa !44
  %2785 = add nuw nsw i64 %2777, 2
  %2786 = getelementptr inbounds i16, ptr %726, i64 %2785
  %2787 = load i16, ptr %2786, align 2, !tbaa !44
  %2788 = getelementptr inbounds i16, ptr %2709, i64 %2785
  store i16 %2787, ptr %2788, align 2, !tbaa !44
  %2789 = add nuw nsw i64 %2777, 3
  %2790 = getelementptr inbounds i16, ptr %726, i64 %2789
  %2791 = load i16, ptr %2790, align 2, !tbaa !44
  %2792 = getelementptr inbounds i16, ptr %2709, i64 %2789
  store i16 %2791, ptr %2792, align 2, !tbaa !44
  %2793 = add nuw nsw i64 %2777, 4
  %2794 = icmp eq i64 %2793, %2712
  br i1 %2794, label %2795, label %2776, !llvm.loop !378

2795:                                             ; preds = %2773, %2776, %2740, %2755
  %2796 = shl i64 %2704, 31
  %2797 = add i64 %2796, -4294967296
  %2798 = ashr i64 %2797, 32
  %2799 = getelementptr inbounds i16, ptr %2709, i64 %2798
  %2800 = load i16, ptr %2799, align 2, !tbaa !44
  br label %2801

2801:                                             ; preds = %2692, %2795
  %2802 = phi i64 [ %2705, %2795 ], [ 0, %2692 ]
  %2803 = phi i16 [ %2800, %2795 ], [ -1, %2692 ]
  %2804 = and i64 %2802, 4294967295
  %2805 = getelementptr inbounds i16, ptr %2709, i64 %2804
  store i16 %2803, ptr %2805, align 2, !tbaa !44
  %2806 = trunc i64 %2705 to i16
  %2807 = add i16 %2806, 1
  %2808 = sext i32 %2702 to i64
  %2809 = getelementptr inbounds i16, ptr %1599, i64 %2808
  store i16 %2807, ptr %2809, align 2, !tbaa !44
  %2810 = add nsw i32 %2706, 2
  %2811 = add nsw i32 %2810, %2702
  %2812 = ptrtoint ptr %2018 to i64
  %2813 = sub i64 %2812, %956
  %2814 = lshr exact i64 %2813, 1
  %2815 = trunc i64 %2814 to i32
  %2816 = add nsw i32 %2811, 1
  %2817 = sext i32 %2816 to i64
  %2818 = getelementptr i16, ptr %1599, i64 %2817
  %2819 = icmp sgt i32 %2815, 0
  br i1 %2819, label %2820, label %2910

2820:                                             ; preds = %2801
  %2821 = and i64 %2814, 4294967295
  %2822 = icmp ult i64 %2821, 8
  br i1 %2822, label %2866, label %2823

2823:                                             ; preds = %2820
  %2824 = shl nsw i64 %2817, 1
  %2825 = add i64 %2824, %1600
  %2826 = sub i64 %2825, %956
  %2827 = icmp ult i64 %2826, 128
  br i1 %2827, label %2866, label %2828

2828:                                             ; preds = %2823
  %2829 = icmp ult i64 %2821, 64
  br i1 %2829, label %2853, label %2830

2830:                                             ; preds = %2828
  %2831 = and i64 %2814, 63
  %2832 = sub nsw i64 %2821, %2831
  br label %2833

2833:                                             ; preds = %2833, %2830
  %2834 = phi i64 [ 0, %2830 ], [ %2847, %2833 ]
  %2835 = getelementptr inbounds i16, ptr %772, i64 %2834
  %2836 = load <16 x i16>, ptr %2835, align 2, !tbaa !44
  %2837 = getelementptr inbounds i16, ptr %2835, i64 16
  %2838 = load <16 x i16>, ptr %2837, align 2, !tbaa !44
  %2839 = getelementptr inbounds i16, ptr %2835, i64 32
  %2840 = load <16 x i16>, ptr %2839, align 2, !tbaa !44
  %2841 = getelementptr inbounds i16, ptr %2835, i64 48
  %2842 = load <16 x i16>, ptr %2841, align 2, !tbaa !44
  %2843 = getelementptr inbounds i16, ptr %2818, i64 %2834
  store <16 x i16> %2836, ptr %2843, align 2, !tbaa !44
  %2844 = getelementptr inbounds i16, ptr %2843, i64 16
  store <16 x i16> %2838, ptr %2844, align 2, !tbaa !44
  %2845 = getelementptr inbounds i16, ptr %2843, i64 32
  store <16 x i16> %2840, ptr %2845, align 2, !tbaa !44
  %2846 = getelementptr inbounds i16, ptr %2843, i64 48
  store <16 x i16> %2842, ptr %2846, align 2, !tbaa !44
  %2847 = add nuw i64 %2834, 64
  %2848 = icmp eq i64 %2847, %2832
  br i1 %2848, label %2849, label %2833, !llvm.loop !379

2849:                                             ; preds = %2833
  %2850 = icmp eq i64 %2831, 0
  br i1 %2850, label %2904, label %2851

2851:                                             ; preds = %2849
  %2852 = icmp ult i64 %2831, 8
  br i1 %2852, label %2866, label %2853

2853:                                             ; preds = %2828, %2851
  %2854 = phi i64 [ %2832, %2851 ], [ 0, %2828 ]
  %2855 = and i64 %2814, 7
  %2856 = sub nsw i64 %2821, %2855
  br label %2857

2857:                                             ; preds = %2857, %2853
  %2858 = phi i64 [ %2854, %2853 ], [ %2862, %2857 ]
  %2859 = getelementptr inbounds i16, ptr %772, i64 %2858
  %2860 = load <8 x i16>, ptr %2859, align 2, !tbaa !44
  %2861 = getelementptr inbounds i16, ptr %2818, i64 %2858
  store <8 x i16> %2860, ptr %2861, align 2, !tbaa !44
  %2862 = add nuw i64 %2858, 8
  %2863 = icmp eq i64 %2862, %2856
  br i1 %2863, label %2864, label %2857, !llvm.loop !380

2864:                                             ; preds = %2857
  %2865 = icmp eq i64 %2855, 0
  br i1 %2865, label %2904, label %2866

2866:                                             ; preds = %2823, %2820, %2851, %2864
  %2867 = phi i64 [ 0, %2820 ], [ 0, %2823 ], [ %2832, %2851 ], [ %2856, %2864 ]
  %2868 = sub i64 %2814, %2867
  %2869 = xor i64 %2867, -1
  %2870 = add nsw i64 %2821, %2869
  %2871 = and i64 %2868, 3
  %2872 = icmp eq i64 %2871, 0
  br i1 %2872, label %2882, label %2873

2873:                                             ; preds = %2866, %2873
  %2874 = phi i64 [ %2879, %2873 ], [ %2867, %2866 ]
  %2875 = phi i64 [ %2880, %2873 ], [ 0, %2866 ]
  %2876 = getelementptr inbounds i16, ptr %772, i64 %2874
  %2877 = load i16, ptr %2876, align 2, !tbaa !44
  %2878 = getelementptr inbounds i16, ptr %2818, i64 %2874
  store i16 %2877, ptr %2878, align 2, !tbaa !44
  %2879 = add nuw nsw i64 %2874, 1
  %2880 = add i64 %2875, 1
  %2881 = icmp eq i64 %2880, %2871
  br i1 %2881, label %2882, label %2873, !llvm.loop !381

2882:                                             ; preds = %2873, %2866
  %2883 = phi i64 [ %2867, %2866 ], [ %2879, %2873 ]
  %2884 = icmp ult i64 %2870, 3
  br i1 %2884, label %2904, label %2885

2885:                                             ; preds = %2882, %2885
  %2886 = phi i64 [ %2902, %2885 ], [ %2883, %2882 ]
  %2887 = getelementptr inbounds i16, ptr %772, i64 %2886
  %2888 = load i16, ptr %2887, align 2, !tbaa !44
  %2889 = getelementptr inbounds i16, ptr %2818, i64 %2886
  store i16 %2888, ptr %2889, align 2, !tbaa !44
  %2890 = add nuw nsw i64 %2886, 1
  %2891 = getelementptr inbounds i16, ptr %772, i64 %2890
  %2892 = load i16, ptr %2891, align 2, !tbaa !44
  %2893 = getelementptr inbounds i16, ptr %2818, i64 %2890
  store i16 %2892, ptr %2893, align 2, !tbaa !44
  %2894 = add nuw nsw i64 %2886, 2
  %2895 = getelementptr inbounds i16, ptr %772, i64 %2894
  %2896 = load i16, ptr %2895, align 2, !tbaa !44
  %2897 = getelementptr inbounds i16, ptr %2818, i64 %2894
  store i16 %2896, ptr %2897, align 2, !tbaa !44
  %2898 = add nuw nsw i64 %2886, 3
  %2899 = getelementptr inbounds i16, ptr %772, i64 %2898
  %2900 = load i16, ptr %2899, align 2, !tbaa !44
  %2901 = getelementptr inbounds i16, ptr %2818, i64 %2898
  store i16 %2900, ptr %2901, align 2, !tbaa !44
  %2902 = add nuw nsw i64 %2886, 4
  %2903 = icmp eq i64 %2902, %2821
  br i1 %2903, label %2904, label %2885, !llvm.loop !382

2904:                                             ; preds = %2882, %2885, %2849, %2864
  %2905 = shl i64 %2813, 31
  %2906 = add i64 %2905, -4294967296
  %2907 = ashr i64 %2906, 32
  %2908 = getelementptr inbounds i16, ptr %2818, i64 %2907
  %2909 = load i16, ptr %2908, align 2, !tbaa !44
  br label %2910

2910:                                             ; preds = %2801, %2904
  %2911 = phi i64 [ %2814, %2904 ], [ 0, %2801 ]
  %2912 = phi i16 [ %2909, %2904 ], [ -1, %2801 ]
  %2913 = and i64 %2911, 4294967295
  %2914 = getelementptr inbounds i16, ptr %2818, i64 %2913
  store i16 %2912, ptr %2914, align 2, !tbaa !44
  %2915 = trunc i64 %2814 to i16
  %2916 = add i16 %2915, 1
  %2917 = sext i32 %2811 to i64
  %2918 = getelementptr inbounds i16, ptr %1599, i64 %2917
  store i16 %2916, ptr %2918, align 2, !tbaa !44
  %2919 = add nsw i32 %2815, 2
  %2920 = add nsw i32 %2919, %2811
  %2921 = select i1 %171, i32 0, i32 %2920
  store i32 %2921, ptr %14, align 8
  br label %3006

2922:                                             ; preds = %1000
  %2923 = load ptr, ptr %9, align 8, !tbaa !46
  %2924 = load i32, ptr %14, align 8, !tbaa !17
  %2925 = add i32 %2924, 1
  %2926 = sext i32 %2925 to i64
  %2927 = getelementptr inbounds i16, ptr %2923, i64 %2926
  %2928 = sext i32 %2924 to i64
  %2929 = getelementptr inbounds i16, ptr %2923, i64 %2928
  %2930 = load i16, ptr %2929, align 2, !tbaa !44
  %2931 = zext i16 %2930 to i32
  %2932 = add i32 %2925, %2931
  %2933 = add nsw i32 %2931, -1
  %2934 = add i32 %2932, 1
  %2935 = sext i32 %2934 to i64
  %2936 = getelementptr inbounds i16, ptr %2923, i64 %2935
  %2937 = sext i32 %2932 to i64
  %2938 = getelementptr inbounds i16, ptr %2923, i64 %2937
  %2939 = load i16, ptr %2938, align 2, !tbaa !44
  %2940 = zext i16 %2939 to i32
  %2941 = add i32 %2934, %2940
  %2942 = add nsw i32 %2940, -1
  %2943 = add i32 %2941, 1
  %2944 = sext i32 %2943 to i64
  %2945 = getelementptr inbounds i16, ptr %2923, i64 %2944
  %2946 = sext i32 %2941 to i64
  %2947 = getelementptr inbounds i16, ptr %2923, i64 %2946
  %2948 = load i16, ptr %2947, align 2, !tbaa !44
  %2949 = zext i16 %2948 to i32
  %2950 = add i32 %2943, %2949
  %2951 = add nsw i32 %2949, -1
  %2952 = add i32 %2950, 1
  %2953 = sext i32 %2952 to i64
  %2954 = getelementptr inbounds i16, ptr %2923, i64 %2953
  %2955 = sext i32 %2950 to i64
  %2956 = getelementptr inbounds i16, ptr %2923, i64 %2955
  %2957 = load i16, ptr %2956, align 2, !tbaa !44
  %2958 = zext i16 %2957 to i32
  %2959 = add i32 %2952, %2958
  %2960 = add nsw i32 %2958, -1
  %2961 = add i32 %2959, 1
  %2962 = sext i32 %2961 to i64
  %2963 = getelementptr inbounds i16, ptr %2923, i64 %2962
  %2964 = sext i32 %2959 to i64
  %2965 = getelementptr inbounds i16, ptr %2923, i64 %2964
  %2966 = load i16, ptr %2965, align 2, !tbaa !44
  %2967 = zext i16 %2966 to i32
  %2968 = add i32 %2961, %2967
  %2969 = add nsw i32 %2967, -1
  %2970 = add i32 %2968, 1
  %2971 = sext i32 %2970 to i64
  %2972 = getelementptr inbounds i16, ptr %2923, i64 %2971
  %2973 = sext i32 %2968 to i64
  %2974 = getelementptr inbounds i16, ptr %2923, i64 %2973
  %2975 = load i16, ptr %2974, align 2, !tbaa !44
  %2976 = zext i16 %2975 to i32
  %2977 = add i32 %2970, %2976
  %2978 = add nsw i32 %2976, -1
  %2979 = add i32 %2977, 1
  %2980 = sext i32 %2979 to i64
  %2981 = getelementptr inbounds i16, ptr %2923, i64 %2980
  %2982 = sext i32 %2977 to i64
  %2983 = getelementptr inbounds i16, ptr %2923, i64 %2982
  %2984 = load i16, ptr %2983, align 2, !tbaa !44
  %2985 = zext i16 %2984 to i32
  %2986 = add i32 %2979, %2985
  %2987 = add nsw i32 %2985, -1
  %2988 = add i32 %2986, 1
  %2989 = sext i32 %2988 to i64
  %2990 = getelementptr inbounds i16, ptr %2923, i64 %2989
  %2991 = sext i32 %2986 to i64
  %2992 = getelementptr inbounds i16, ptr %2923, i64 %2991
  %2993 = load i16, ptr %2992, align 2, !tbaa !44
  %2994 = zext i16 %2993 to i32
  %2995 = add i32 %2988, %2994
  %2996 = add nsw i32 %2994, -1
  %2997 = add i32 %2995, 1
  %2998 = sext i32 %2997 to i64
  %2999 = getelementptr inbounds i16, ptr %2923, i64 %2998
  %3000 = sext i32 %2995 to i64
  %3001 = getelementptr inbounds i16, ptr %2923, i64 %3000
  %3002 = load i16, ptr %3001, align 2, !tbaa !44
  %3003 = zext i16 %3002 to i32
  %3004 = add i32 %2997, %3003
  store i32 %3004, ptr %14, align 8, !tbaa !17
  %3005 = add nsw i32 %3003, -1
  br label %3006

3006:                                             ; preds = %2910, %2922
  %3007 = phi ptr [ %2927, %2922 ], [ %1603, %2910 ]
  %3008 = phi i32 [ %2933, %2922 ], [ %2030, %2910 ]
  %3009 = phi ptr [ %2936, %2922 ], [ %2055, %2910 ]
  %3010 = phi i32 [ %2942, %2922 ], [ %2052, %2910 ]
  %3011 = phi ptr [ %2945, %2922 ], [ %2164, %2910 ]
  %3012 = phi i32 [ %2951, %2922 ], [ %2161, %2910 ]
  %3013 = phi ptr [ %2954, %2922 ], [ %2273, %2910 ]
  %3014 = phi i32 [ %2960, %2922 ], [ %2270, %2910 ]
  %3015 = phi ptr [ %2963, %2922 ], [ %2382, %2910 ]
  %3016 = phi i32 [ %2969, %2922 ], [ %2379, %2910 ]
  %3017 = phi ptr [ %2972, %2922 ], [ %2491, %2910 ]
  %3018 = phi i32 [ %2978, %2922 ], [ %2488, %2910 ]
  %3019 = phi ptr [ %2981, %2922 ], [ %2600, %2910 ]
  %3020 = phi i32 [ %2987, %2922 ], [ %2597, %2910 ]
  %3021 = phi ptr [ %2990, %2922 ], [ %2709, %2910 ]
  %3022 = phi i32 [ %2996, %2922 ], [ %2706, %2910 ]
  %3023 = phi ptr [ %2999, %2922 ], [ %2818, %2910 ]
  %3024 = phi i32 [ %3005, %2922 ], [ %2815, %2910 ]
  %3025 = phi i32 [ %982, %2922 ], [ %1561, %2910 ]
  %3026 = phi i32 [ %981, %2922 ], [ %1562, %2910 ]
  %3027 = phi i32 [ %980, %2922 ], [ %1563, %2910 ]
  %3028 = phi i32 [ %979, %2922 ], [ %1564, %2910 ]
  %3029 = phi ptr [ %977, %2922 ], [ %1257, %2910 ]
  %3030 = phi ptr [ %976, %2922 ], [ %1258, %2910 ]
  %3031 = phi ptr [ %975, %2922 ], [ %1259, %2910 ]
  %3032 = getelementptr inbounds %struct.CompAtom, ptr %68, i64 %985, i32 1
  %3033 = load float, ptr %3032, align 8, !tbaa !104
  %3034 = fpext float %3033 to double
  %3035 = fmul double %3034, 0x4074C104816F0069
  %3036 = fmul double %29, %3035
  %3037 = fmul double %25, %3036
  %3038 = load double, ptr @_ZN20ComputeNonbondedUtil7cutoff2E, align 8, !tbaa !19
  %3039 = extractelement <2 x double> %1003, i64 0
  %3040 = extractelement <2 x double> %1003, i64 1
  %3041 = tail call noundef i32 @_Z22pairlist_from_pairlistddddPK8CompAtomPKtiPtdPd(double noundef %3038, double noundef %3039, double noundef %3040, double noundef %1006, ptr noundef %70, ptr noundef nonnull %3007, i32 noundef %3008, ptr noundef %123, double noundef %32, ptr noundef %169)
  %3042 = icmp sgt i32 %3041, 0
  br i1 %3042, label %3043, label %3115

3043:                                             ; preds = %3006
  %3044 = load ptr, ptr @_ZN20ComputeNonbondedUtil8r2_tableE, align 8, !tbaa !23
  %3045 = zext i32 %3041 to i64
  br label %3046

3046:                                             ; preds = %3043, %3046
  %3047 = phi i64 [ 0, %3043 ], [ %3113, %3046 ]
  %3048 = phi double [ 0.000000e+00, %3043 ], [ %3109, %3046 ]
  %3049 = phi <2 x double> [ zeroinitializer, %3043 ], [ %3105, %3046 ]
  %3050 = phi <2 x double> [ %984, %3043 ], [ %3097, %3046 ]
  %3051 = shl nuw nsw i64 %3047, 1
  %3052 = getelementptr inbounds i32, ptr %170, i64 %3051
  %3053 = load i32, ptr %3052, align 4, !tbaa !5
  %3054 = ashr i32 %3053, 14
  %3055 = add nsw i32 %3054, %35
  %3056 = getelementptr inbounds i16, ptr %123, i64 %3047
  %3057 = load i16, ptr %3056, align 2, !tbaa !44
  %3058 = zext i16 %3057 to i64
  %3059 = getelementptr inbounds %struct.CompAtom, ptr %70, i64 %3058
  %3060 = getelementptr inbounds double, ptr %169, i64 %3047
  %3061 = load double, ptr %3060, align 8, !tbaa !19
  %3062 = sext i32 %3055 to i64
  %3063 = getelementptr inbounds double, ptr %3044, i64 %3062
  %3064 = load double, ptr %3063, align 8, !tbaa !19
  %3065 = fsub double %3061, %3064
  %3066 = shl nsw i32 %3055, 4
  %3067 = sext i32 %3066 to i64
  %3068 = getelementptr inbounds double, ptr %27, i64 %3067
  %3069 = getelementptr inbounds %class.Vector, ptr %930, i64 %3058
  %3070 = getelementptr inbounds %struct.CompAtom, ptr %70, i64 %3058, i32 1
  %3071 = load float, ptr %3070, align 8, !tbaa !104
  %3072 = fpext float %3071 to double
  %3073 = fmul double %3037, %3072
  %3074 = getelementptr inbounds %class.Vector, ptr %3059, i64 0, i32 2
  %3075 = load double, ptr %3074, align 8, !tbaa !49
  %3076 = fsub double %1006, %3075
  %3077 = getelementptr inbounds double, ptr %3068, i64 12
  %3078 = load double, ptr %3077, align 8, !tbaa !19
  %3079 = getelementptr inbounds double, ptr %3068, i64 13
  %3080 = load double, ptr %3079, align 8, !tbaa !19
  %3081 = getelementptr inbounds double, ptr %3068, i64 14
  %3082 = load double, ptr %3081, align 8, !tbaa !19
  %3083 = getelementptr inbounds double, ptr %3068, i64 15
  %3084 = load double, ptr %3083, align 8, !tbaa !19
  %3085 = fmul double %3073, %3078
  %3086 = fmul double %3073, %3080
  %3087 = fmul double %3073, %3082
  %3088 = fmul double %3073, %3084
  %3089 = fmul double %3065, %3085
  %3090 = fmul double %3086, 2.500000e-01
  %3091 = tail call double @llvm.fmuladd.f64(double %3089, double 0x3FC5555555555555, double %3090)
  %3092 = fmul double %3087, 5.000000e-01
  %3093 = tail call double @llvm.fmuladd.f64(double %3091, double %3065, double %3092)
  %3094 = tail call double @llvm.fmuladd.f64(double %3093, double %3065, double %3088)
  %3095 = insertelement <2 x double> poison, double %3094, i64 0
  %3096 = shufflevector <2 x double> %3095, <2 x double> poison, <2 x i32> zeroinitializer
  %3097 = fsub <2 x double> %3050, %3096
  %3098 = tail call double @llvm.fmuladd.f64(double %3065, double %3085, double %3086)
  %3099 = tail call double @llvm.fmuladd.f64(double %3098, double %3065, double %3087)
  %3100 = load <2 x double>, ptr %3059, align 8, !tbaa !19
  %3101 = fsub <2 x double> %1003, %3100
  %3102 = insertelement <2 x double> poison, double %3099, i64 0
  %3103 = shufflevector <2 x double> %3102, <2 x double> poison, <2 x i32> zeroinitializer
  %3104 = fmul <2 x double> %3101, %3103
  %3105 = fadd <2 x double> %3049, %3104
  %3106 = load <2 x double>, ptr %3069, align 8, !tbaa !19
  %3107 = fsub <2 x double> %3106, %3104
  store <2 x double> %3107, ptr %3069, align 8, !tbaa !19
  %3108 = fmul double %3076, %3099
  %3109 = fadd double %3048, %3108
  %3110 = getelementptr inbounds %class.Vector, ptr %930, i64 %3058, i32 2
  %3111 = load double, ptr %3110, align 8, !tbaa !112
  %3112 = fsub double %3111, %3108
  store double %3112, ptr %3110, align 8, !tbaa !112
  %3113 = add nuw nsw i64 %3047, 1
  %3114 = icmp eq i64 %3113, %3045
  br i1 %3114, label %3115, label %3046

3115:                                             ; preds = %3046, %3006
  %3116 = phi double [ 0.000000e+00, %3006 ], [ %3109, %3046 ]
  %3117 = phi <2 x double> [ %984, %3006 ], [ %3097, %3046 ]
  %3118 = phi <2 x double> [ zeroinitializer, %3006 ], [ %3105, %3046 ]
  %3119 = load double, ptr @_ZN20ComputeNonbondedUtil7cutoff2E, align 8, !tbaa !19
  %3120 = tail call noundef i32 @_Z22pairlist_from_pairlistddddPK8CompAtomPKtiPtdPd(double noundef %3119, double noundef %3039, double noundef %3040, double noundef %1006, ptr noundef %70, ptr noundef %3011, i32 noundef %3012, ptr noundef %123, double noundef %32, ptr noundef %169)
  %3121 = add nsw i32 %3120, %973
  %3122 = icmp sgt i32 %3120, 0
  br i1 %3122, label %3123, label %3209

3123:                                             ; preds = %3115
  %3124 = load ptr, ptr @_ZN20ComputeNonbondedUtil8r2_tableE, align 8, !tbaa !23
  %3125 = zext i32 %3120 to i64
  br label %3126

3126:                                             ; preds = %3123, %3126
  %3127 = phi i64 [ 0, %3123 ], [ %3207, %3126 ]
  %3128 = phi double [ %3116, %3123 ], [ %3203, %3126 ]
  %3129 = phi <2 x double> [ %3117, %3123 ], [ %3193, %3126 ]
  %3130 = phi <2 x double> [ %3118, %3123 ], [ %3199, %3126 ]
  %3131 = shl nuw nsw i64 %3127, 1
  %3132 = getelementptr inbounds i32, ptr %170, i64 %3131
  %3133 = load i32, ptr %3132, align 4, !tbaa !5
  %3134 = ashr i32 %3133, 14
  %3135 = add nsw i32 %3134, %35
  %3136 = getelementptr inbounds i16, ptr %123, i64 %3127
  %3137 = load i16, ptr %3136, align 2, !tbaa !44
  %3138 = zext i16 %3137 to i64
  %3139 = getelementptr inbounds %struct.CompAtom, ptr %70, i64 %3138
  %3140 = getelementptr inbounds double, ptr %169, i64 %3127
  %3141 = load double, ptr %3140, align 8, !tbaa !19
  %3142 = sext i32 %3135 to i64
  %3143 = getelementptr inbounds double, ptr %3124, i64 %3142
  %3144 = load double, ptr %3143, align 8, !tbaa !19
  %3145 = fsub double %3141, %3144
  %3146 = shl nsw i32 %3135, 4
  %3147 = sext i32 %3146 to i64
  %3148 = getelementptr inbounds double, ptr %27, i64 %3147
  %3149 = getelementptr inbounds %class.Vector, ptr %930, i64 %3138
  %3150 = getelementptr inbounds %struct.CompAtom, ptr %70, i64 %3138, i32 1
  %3151 = load float, ptr %3150, align 8, !tbaa !104
  %3152 = fpext float %3151 to double
  %3153 = fmul double %3037, %3152
  %3154 = load <2 x double>, ptr %3139, align 8, !tbaa !19
  %3155 = fsub <2 x double> %1003, %3154
  %3156 = getelementptr inbounds %class.Vector, ptr %3139, i64 0, i32 2
  %3157 = load double, ptr %3156, align 8, !tbaa !49
  %3158 = fsub double %1006, %3157
  %3159 = shl nsw i32 %3135, 2
  %3160 = sext i32 %3159 to i64
  %3161 = getelementptr inbounds double, ptr %28, i64 %3160
  %3162 = getelementptr inbounds double, ptr %3148, i64 12
  %3163 = load double, ptr %3162, align 8, !tbaa !19
  %3164 = getelementptr inbounds double, ptr %3148, i64 13
  %3165 = load double, ptr %3164, align 8, !tbaa !19
  %3166 = getelementptr inbounds double, ptr %3148, i64 14
  %3167 = load double, ptr %3166, align 8, !tbaa !19
  %3168 = getelementptr inbounds double, ptr %3148, i64 15
  %3169 = load double, ptr %3168, align 8, !tbaa !19
  %3170 = load double, ptr %3161, align 8, !tbaa !19
  %3171 = tail call double @llvm.fmuladd.f64(double %31, double %3170, double %3169)
  %3172 = getelementptr inbounds double, ptr %3161, i64 1
  %3173 = load double, ptr %3172, align 8, !tbaa !19
  %3174 = tail call double @llvm.fmuladd.f64(double %957, double %3173, double %3167)
  %3175 = getelementptr inbounds double, ptr %3161, i64 2
  %3176 = load double, ptr %3175, align 8, !tbaa !19
  %3177 = tail call double @llvm.fmuladd.f64(double %958, double %3176, double %3165)
  %3178 = getelementptr inbounds double, ptr %3161, i64 3
  %3179 = load double, ptr %3178, align 8, !tbaa !19
  %3180 = tail call double @llvm.fmuladd.f64(double %959, double %3179, double %3163)
  %3181 = fmul double %3153, %3180
  %3182 = fmul double %3153, %3177
  %3183 = fmul double %3153, %3174
  %3184 = fmul double %3153, %3171
  %3185 = fmul double %3145, %3181
  %3186 = fmul double %3182, 2.500000e-01
  %3187 = tail call double @llvm.fmuladd.f64(double %3185, double 0x3FC5555555555555, double %3186)
  %3188 = fmul double %3183, 5.000000e-01
  %3189 = tail call double @llvm.fmuladd.f64(double %3187, double %3145, double %3188)
  %3190 = tail call double @llvm.fmuladd.f64(double %3189, double %3145, double %3184)
  %3191 = insertelement <2 x double> poison, double %3190, i64 0
  %3192 = shufflevector <2 x double> %3191, <2 x double> poison, <2 x i32> zeroinitializer
  %3193 = fsub <2 x double> %3129, %3192
  %3194 = tail call double @llvm.fmuladd.f64(double %3145, double %3181, double %3182)
  %3195 = tail call double @llvm.fmuladd.f64(double %3194, double %3145, double %3183)
  %3196 = insertelement <2 x double> poison, double %3195, i64 0
  %3197 = shufflevector <2 x double> %3196, <2 x double> poison, <2 x i32> zeroinitializer
  %3198 = fmul <2 x double> %3155, %3197
  %3199 = fadd <2 x double> %3130, %3198
  %3200 = load <2 x double>, ptr %3149, align 8, !tbaa !19
  %3201 = fsub <2 x double> %3200, %3198
  store <2 x double> %3201, ptr %3149, align 8, !tbaa !19
  %3202 = fmul double %3158, %3195
  %3203 = fadd double %3128, %3202
  %3204 = getelementptr inbounds %class.Vector, ptr %930, i64 %3138, i32 2
  %3205 = load double, ptr %3204, align 8, !tbaa !112
  %3206 = fsub double %3205, %3202
  store double %3206, ptr %3204, align 8, !tbaa !112
  %3207 = add nuw nsw i64 %3127, 1
  %3208 = icmp eq i64 %3207, %3125
  br i1 %3208, label %3209, label %3126

3209:                                             ; preds = %3126, %3115
  %3210 = phi double [ %3116, %3115 ], [ %3203, %3126 ]
  %3211 = phi <2 x double> [ %3117, %3115 ], [ %3193, %3126 ]
  %3212 = phi <2 x double> [ %3118, %3115 ], [ %3199, %3126 ]
  %3213 = load double, ptr @_ZN20ComputeNonbondedUtil7cutoff2E, align 8, !tbaa !19
  %3214 = tail call noundef i32 @_Z22pairlist_from_pairlistddddPK8CompAtomPKtiPtdPd(double noundef %3213, double noundef %3039, double noundef %3040, double noundef %1006, ptr noundef %70, ptr noundef %3009, i32 noundef %3010, ptr noundef %123, double noundef %32, ptr noundef %169)
  %3215 = add nsw i32 %3121, %3214
  %3216 = icmp sgt i32 %3214, 0
  br i1 %3216, label %3217, label %3303

3217:                                             ; preds = %3209
  %3218 = load ptr, ptr @_ZN20ComputeNonbondedUtil8r2_tableE, align 8, !tbaa !23
  %3219 = zext i32 %3214 to i64
  br label %3220

3220:                                             ; preds = %3217, %3220
  %3221 = phi i64 [ 0, %3217 ], [ %3301, %3220 ]
  %3222 = phi double [ %3210, %3217 ], [ %3297, %3220 ]
  %3223 = phi <2 x double> [ %3211, %3217 ], [ %3286, %3220 ]
  %3224 = phi <2 x double> [ %3212, %3217 ], [ %3293, %3220 ]
  %3225 = shl nuw nsw i64 %3221, 1
  %3226 = getelementptr inbounds i32, ptr %170, i64 %3225
  %3227 = load i32, ptr %3226, align 4, !tbaa !5
  %3228 = ashr i32 %3227, 14
  %3229 = add nsw i32 %3228, %35
  %3230 = getelementptr inbounds i16, ptr %123, i64 %3221
  %3231 = load i16, ptr %3230, align 2, !tbaa !44
  %3232 = zext i16 %3231 to i64
  %3233 = getelementptr inbounds %struct.CompAtom, ptr %70, i64 %3232
  %3234 = getelementptr inbounds double, ptr %169, i64 %3221
  %3235 = load double, ptr %3234, align 8, !tbaa !19
  %3236 = sext i32 %3229 to i64
  %3237 = getelementptr inbounds double, ptr %3218, i64 %3236
  %3238 = load double, ptr %3237, align 8, !tbaa !19
  %3239 = fsub double %3235, %3238
  %3240 = shl nsw i32 %3229, 4
  %3241 = sext i32 %3240 to i64
  %3242 = getelementptr inbounds double, ptr %27, i64 %3241
  %3243 = getelementptr inbounds %class.Vector, ptr %930, i64 %3232
  %3244 = getelementptr inbounds %struct.CompAtom, ptr %70, i64 %3232, i32 1
  %3245 = load float, ptr %3244, align 8, !tbaa !104
  %3246 = fpext float %3245 to double
  %3247 = fmul double %3037, %3246
  %3248 = load <2 x double>, ptr %3233, align 8, !tbaa !19
  %3249 = getelementptr inbounds %class.Vector, ptr %3233, i64 0, i32 2
  %3250 = load double, ptr %3249, align 8, !tbaa !49
  %3251 = fsub double %1006, %3250
  %3252 = shl nsw i32 %3229, 2
  %3253 = sext i32 %3252 to i64
  %3254 = getelementptr inbounds double, ptr %28, i64 %3253
  %3255 = getelementptr inbounds double, ptr %3242, i64 12
  %3256 = load double, ptr %3255, align 8, !tbaa !19
  %3257 = getelementptr inbounds double, ptr %3242, i64 13
  %3258 = load double, ptr %3257, align 8, !tbaa !19
  %3259 = getelementptr inbounds double, ptr %3242, i64 14
  %3260 = load double, ptr %3259, align 8, !tbaa !19
  %3261 = getelementptr inbounds double, ptr %3242, i64 15
  %3262 = load double, ptr %3261, align 8, !tbaa !19
  %3263 = load double, ptr %3254, align 8, !tbaa !19
  %3264 = fadd double %3262, %3263
  %3265 = getelementptr inbounds double, ptr %3254, i64 1
  %3266 = load double, ptr %3265, align 8, !tbaa !19
  %3267 = tail call double @llvm.fmuladd.f64(double %3266, double 2.000000e+00, double %3260)
  %3268 = getelementptr inbounds double, ptr %3254, i64 2
  %3269 = load double, ptr %3268, align 8, !tbaa !19
  %3270 = tail call double @llvm.fmuladd.f64(double %3269, double 4.000000e+00, double %3258)
  %3271 = getelementptr inbounds double, ptr %3254, i64 3
  %3272 = load double, ptr %3271, align 8, !tbaa !19
  %3273 = tail call double @llvm.fmuladd.f64(double %3272, double 6.000000e+00, double %3256)
  %3274 = fmul double %3247, %3273
  %3275 = fmul double %3247, %3270
  %3276 = fmul double %3247, %3267
  %3277 = fmul double %3247, %3264
  %3278 = fmul double %3239, %3274
  %3279 = fmul double %3275, 2.500000e-01
  %3280 = tail call double @llvm.fmuladd.f64(double %3278, double 0x3FC5555555555555, double %3279)
  %3281 = fmul double %3276, 5.000000e-01
  %3282 = tail call double @llvm.fmuladd.f64(double %3280, double %3239, double %3281)
  %3283 = tail call double @llvm.fmuladd.f64(double %3282, double %3239, double %3277)
  %3284 = insertelement <2 x double> poison, double %3283, i64 0
  %3285 = shufflevector <2 x double> %3284, <2 x double> poison, <2 x i32> zeroinitializer
  %3286 = fsub <2 x double> %3223, %3285
  %3287 = tail call double @llvm.fmuladd.f64(double %3239, double %3274, double %3275)
  %3288 = tail call double @llvm.fmuladd.f64(double %3287, double %3239, double %3276)
  %3289 = fsub <2 x double> %1003, %3248
  %3290 = insertelement <2 x double> poison, double %3288, i64 0
  %3291 = shufflevector <2 x double> %3290, <2 x double> poison, <2 x i32> zeroinitializer
  %3292 = fmul <2 x double> %3289, %3291
  %3293 = fadd <2 x double> %3224, %3292
  %3294 = load <2 x double>, ptr %3243, align 8, !tbaa !19
  %3295 = fsub <2 x double> %3294, %3292
  store <2 x double> %3295, ptr %3243, align 8, !tbaa !19
  %3296 = fmul double %3251, %3288
  %3297 = fadd double %3222, %3296
  %3298 = getelementptr inbounds %class.Vector, ptr %930, i64 %3232, i32 2
  %3299 = load double, ptr %3298, align 8, !tbaa !112
  %3300 = fsub double %3299, %3296
  store double %3300, ptr %3298, align 8, !tbaa !112
  %3301 = add nuw nsw i64 %3221, 1
  %3302 = icmp eq i64 %3301, %3219
  br i1 %3302, label %3303, label %3220

3303:                                             ; preds = %3220, %3209
  %3304 = phi double [ %3210, %3209 ], [ %3297, %3220 ]
  %3305 = phi <2 x double> [ %3211, %3209 ], [ %3286, %3220 ]
  %3306 = phi <2 x double> [ %3212, %3209 ], [ %3293, %3220 ]
  %3307 = load double, ptr @_ZN20ComputeNonbondedUtil7cutoff2E, align 8, !tbaa !19
  %3308 = tail call noundef i32 @_Z22pairlist_from_pairlistddddPK8CompAtomPKtiPtdPd(double noundef %3307, double noundef %3039, double noundef %3040, double noundef %1006, ptr noundef %70, ptr noundef %3013, i32 noundef %3014, ptr noundef %123, double noundef %32, ptr noundef %169)
  %3309 = icmp sgt i32 %3308, 0
  br i1 %3309, label %3310, label %3383

3310:                                             ; preds = %3303
  %3311 = load ptr, ptr @_ZN20ComputeNonbondedUtil8r2_tableE, align 8, !tbaa !23
  %3312 = zext i32 %3308 to i64
  br label %3313

3313:                                             ; preds = %3310, %3313
  %3314 = phi i64 [ 0, %3310 ], [ %3381, %3313 ]
  %3315 = phi double [ %3304, %3310 ], [ %3377, %3313 ]
  %3316 = phi <2 x double> [ %3305, %3310 ], [ %3364, %3313 ]
  %3317 = phi <2 x double> [ %3306, %3310 ], [ %3373, %3313 ]
  %3318 = shl nuw nsw i64 %3314, 1
  %3319 = getelementptr inbounds i32, ptr %170, i64 %3318
  %3320 = load i32, ptr %3319, align 4, !tbaa !5
  %3321 = ashr i32 %3320, 14
  %3322 = add nsw i32 %3321, %35
  %3323 = getelementptr inbounds i16, ptr %123, i64 %3314
  %3324 = load i16, ptr %3323, align 2, !tbaa !44
  %3325 = zext i16 %3324 to i64
  %3326 = getelementptr inbounds %struct.CompAtom, ptr %70, i64 %3325
  %3327 = getelementptr inbounds double, ptr %169, i64 %3314
  %3328 = load double, ptr %3327, align 8, !tbaa !19
  %3329 = sext i32 %3322 to i64
  %3330 = getelementptr inbounds double, ptr %3311, i64 %3329
  %3331 = load double, ptr %3330, align 8, !tbaa !19
  %3332 = fsub double %3328, %3331
  %3333 = shl nsw i32 %3322, 4
  %3334 = sext i32 %3333 to i64
  %3335 = getelementptr inbounds double, ptr %27, i64 %3334
  %3336 = getelementptr inbounds %class.Vector, ptr %930, i64 %3325
  %3337 = getelementptr inbounds %struct.CompAtom, ptr %70, i64 %3325, i32 1
  %3338 = load float, ptr %3337, align 8, !tbaa !104
  %3339 = fpext float %3338 to double
  %3340 = fmul double %3037, %3339
  %3341 = getelementptr inbounds %class.Vector, ptr %3326, i64 0, i32 2
  %3342 = load double, ptr %3341, align 8, !tbaa !49
  %3343 = fsub double %1006, %3342
  %3344 = getelementptr inbounds double, ptr %3335, i64 12
  %3345 = load double, ptr %3344, align 8, !tbaa !19
  %3346 = getelementptr inbounds double, ptr %3335, i64 13
  %3347 = load double, ptr %3346, align 8, !tbaa !19
  %3348 = getelementptr inbounds double, ptr %3335, i64 14
  %3349 = load double, ptr %3348, align 8, !tbaa !19
  %3350 = getelementptr inbounds double, ptr %3335, i64 15
  %3351 = load double, ptr %3350, align 8, !tbaa !19
  %3352 = fmul double %3340, %3345
  %3353 = fmul double %3340, %3347
  %3354 = fmul double %3340, %3349
  %3355 = fmul double %3340, %3351
  %3356 = fmul double %3332, %3352
  %3357 = fmul double %3353, 2.500000e-01
  %3358 = tail call double @llvm.fmuladd.f64(double %3356, double 0x3FC5555555555555, double %3357)
  %3359 = fmul double %3354, 5.000000e-01
  %3360 = tail call double @llvm.fmuladd.f64(double %3358, double %3332, double %3359)
  %3361 = tail call double @llvm.fmuladd.f64(double %3360, double %3332, double %3355)
  %3362 = insertelement <2 x double> poison, double %3361, i64 0
  %3363 = shufflevector <2 x double> %3362, <2 x double> poison, <2 x i32> zeroinitializer
  %3364 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %960, <2 x double> %3363, <2 x double> %3316)
  %3365 = tail call double @llvm.fmuladd.f64(double %3332, double %3352, double %3353)
  %3366 = tail call double @llvm.fmuladd.f64(double %3365, double %3332, double %3354)
  %3367 = fmul double %966, %3366
  %3368 = load <2 x double>, ptr %3326, align 8, !tbaa !19
  %3369 = fsub <2 x double> %1003, %3368
  %3370 = insertelement <2 x double> poison, double %3367, i64 0
  %3371 = shufflevector <2 x double> %3370, <2 x double> poison, <2 x i32> zeroinitializer
  %3372 = fmul <2 x double> %3369, %3371
  %3373 = fadd <2 x double> %3317, %3372
  %3374 = load <2 x double>, ptr %3336, align 8, !tbaa !19
  %3375 = fsub <2 x double> %3374, %3372
  store <2 x double> %3375, ptr %3336, align 8, !tbaa !19
  %3376 = fmul double %3343, %3367
  %3377 = fadd double %3315, %3376
  %3378 = getelementptr inbounds %class.Vector, ptr %930, i64 %3325, i32 2
  %3379 = load double, ptr %3378, align 8, !tbaa !112
  %3380 = fsub double %3379, %3376
  store double %3380, ptr %3378, align 8, !tbaa !112
  %3381 = add nuw nsw i64 %3314, 1
  %3382 = icmp eq i64 %3381, %3312
  br i1 %3382, label %3383, label %3313

3383:                                             ; preds = %3313, %3303
  %3384 = phi double [ %3304, %3303 ], [ %3377, %3313 ]
  %3385 = phi <2 x double> [ %3305, %3303 ], [ %3364, %3313 ]
  %3386 = phi <2 x double> [ %3306, %3303 ], [ %3373, %3313 ]
  %3387 = load double, ptr @_ZN20ComputeNonbondedUtil7cutoff2E, align 8, !tbaa !19
  %3388 = tail call noundef i32 @_Z22pairlist_from_pairlistddddPK8CompAtomPKtiPtdPd(double noundef %3387, double noundef %3039, double noundef %3040, double noundef %1006, ptr noundef %70, ptr noundef %3019, i32 noundef %3020, ptr noundef %123, double noundef %32, ptr noundef %169)
  %3389 = icmp sgt i32 %3388, 0
  br i1 %3389, label %3390, label %3463

3390:                                             ; preds = %3383
  %3391 = load ptr, ptr @_ZN20ComputeNonbondedUtil8r2_tableE, align 8, !tbaa !23
  %3392 = zext i32 %3388 to i64
  br label %3393

3393:                                             ; preds = %3390, %3393
  %3394 = phi i64 [ 0, %3390 ], [ %3461, %3393 ]
  %3395 = phi double [ %3384, %3390 ], [ %3457, %3393 ]
  %3396 = phi <2 x double> [ %3385, %3390 ], [ %3444, %3393 ]
  %3397 = phi <2 x double> [ %3386, %3390 ], [ %3453, %3393 ]
  %3398 = shl nuw nsw i64 %3394, 1
  %3399 = getelementptr inbounds i32, ptr %170, i64 %3398
  %3400 = load i32, ptr %3399, align 4, !tbaa !5
  %3401 = ashr i32 %3400, 14
  %3402 = add nsw i32 %3401, %35
  %3403 = getelementptr inbounds i16, ptr %123, i64 %3394
  %3404 = load i16, ptr %3403, align 2, !tbaa !44
  %3405 = zext i16 %3404 to i64
  %3406 = getelementptr inbounds %struct.CompAtom, ptr %70, i64 %3405
  %3407 = getelementptr inbounds double, ptr %169, i64 %3394
  %3408 = load double, ptr %3407, align 8, !tbaa !19
  %3409 = sext i32 %3402 to i64
  %3410 = getelementptr inbounds double, ptr %3391, i64 %3409
  %3411 = load double, ptr %3410, align 8, !tbaa !19
  %3412 = fsub double %3408, %3411
  %3413 = shl nsw i32 %3402, 4
  %3414 = sext i32 %3413 to i64
  %3415 = getelementptr inbounds double, ptr %27, i64 %3414
  %3416 = getelementptr inbounds %class.Vector, ptr %930, i64 %3405
  %3417 = getelementptr inbounds %struct.CompAtom, ptr %70, i64 %3405, i32 1
  %3418 = load float, ptr %3417, align 8, !tbaa !104
  %3419 = fpext float %3418 to double
  %3420 = fmul double %3037, %3419
  %3421 = getelementptr inbounds %class.Vector, ptr %3406, i64 0, i32 2
  %3422 = load double, ptr %3421, align 8, !tbaa !49
  %3423 = fsub double %1006, %3422
  %3424 = getelementptr inbounds double, ptr %3415, i64 12
  %3425 = load double, ptr %3424, align 8, !tbaa !19
  %3426 = getelementptr inbounds double, ptr %3415, i64 13
  %3427 = load double, ptr %3426, align 8, !tbaa !19
  %3428 = getelementptr inbounds double, ptr %3415, i64 14
  %3429 = load double, ptr %3428, align 8, !tbaa !19
  %3430 = getelementptr inbounds double, ptr %3415, i64 15
  %3431 = load double, ptr %3430, align 8, !tbaa !19
  %3432 = fmul double %3420, %3425
  %3433 = fmul double %3420, %3427
  %3434 = fmul double %3420, %3429
  %3435 = fmul double %3420, %3431
  %3436 = fmul double %3412, %3432
  %3437 = fmul double %3433, 2.500000e-01
  %3438 = tail call double @llvm.fmuladd.f64(double %3436, double 0x3FC5555555555555, double %3437)
  %3439 = fmul double %3434, 5.000000e-01
  %3440 = tail call double @llvm.fmuladd.f64(double %3438, double %3412, double %3439)
  %3441 = tail call double @llvm.fmuladd.f64(double %3440, double %3412, double %3435)
  %3442 = insertelement <2 x double> poison, double %3441, i64 0
  %3443 = shufflevector <2 x double> %3442, <2 x double> poison, <2 x i32> zeroinitializer
  %3444 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %961, <2 x double> %3443, <2 x double> %3396)
  %3445 = tail call double @llvm.fmuladd.f64(double %3412, double %3432, double %3433)
  %3446 = tail call double @llvm.fmuladd.f64(double %3445, double %3412, double %3434)
  %3447 = fmul double %967, %3446
  %3448 = load <2 x double>, ptr %3406, align 8, !tbaa !19
  %3449 = fsub <2 x double> %1003, %3448
  %3450 = insertelement <2 x double> poison, double %3447, i64 0
  %3451 = shufflevector <2 x double> %3450, <2 x double> poison, <2 x i32> zeroinitializer
  %3452 = fmul <2 x double> %3449, %3451
  %3453 = fadd <2 x double> %3397, %3452
  %3454 = load <2 x double>, ptr %3416, align 8, !tbaa !19
  %3455 = fsub <2 x double> %3454, %3452
  store <2 x double> %3455, ptr %3416, align 8, !tbaa !19
  %3456 = fmul double %3423, %3447
  %3457 = fadd double %3395, %3456
  %3458 = getelementptr inbounds %class.Vector, ptr %930, i64 %3405, i32 2
  %3459 = load double, ptr %3458, align 8, !tbaa !112
  %3460 = fsub double %3459, %3456
  store double %3460, ptr %3458, align 8, !tbaa !112
  %3461 = add nuw nsw i64 %3394, 1
  %3462 = icmp eq i64 %3461, %3392
  br i1 %3462, label %3463, label %3393

3463:                                             ; preds = %3393, %3383
  %3464 = phi double [ %3384, %3383 ], [ %3457, %3393 ]
  %3465 = phi <2 x double> [ %3385, %3383 ], [ %3444, %3393 ]
  %3466 = phi <2 x double> [ %3386, %3383 ], [ %3453, %3393 ]
  %3467 = load double, ptr @_ZN20ComputeNonbondedUtil7cutoff2E, align 8, !tbaa !19
  %3468 = tail call noundef i32 @_Z22pairlist_from_pairlistddddPK8CompAtomPKtiPtdPd(double noundef %3467, double noundef %3039, double noundef %3040, double noundef %1006, ptr noundef %70, ptr noundef %3017, i32 noundef %3018, ptr noundef %123, double noundef %32, ptr noundef %169)
  %3469 = add nsw i32 %3215, %3468
  %3470 = icmp sgt i32 %3468, 0
  br i1 %3470, label %3471, label %3558

3471:                                             ; preds = %3463
  %3472 = load ptr, ptr @_ZN20ComputeNonbondedUtil8r2_tableE, align 8, !tbaa !23
  %3473 = zext i32 %3468 to i64
  br label %3474

3474:                                             ; preds = %3471, %3474
  %3475 = phi i64 [ 0, %3471 ], [ %3556, %3474 ]
  %3476 = phi double [ %3464, %3471 ], [ %3552, %3474 ]
  %3477 = phi <2 x double> [ %3465, %3471 ], [ %3539, %3474 ]
  %3478 = phi <2 x double> [ %3466, %3471 ], [ %3548, %3474 ]
  %3479 = shl nuw nsw i64 %3475, 1
  %3480 = getelementptr inbounds i32, ptr %170, i64 %3479
  %3481 = load i32, ptr %3480, align 4, !tbaa !5
  %3482 = ashr i32 %3481, 14
  %3483 = add nsw i32 %3482, %35
  %3484 = getelementptr inbounds i16, ptr %123, i64 %3475
  %3485 = load i16, ptr %3484, align 2, !tbaa !44
  %3486 = zext i16 %3485 to i64
  %3487 = getelementptr inbounds %struct.CompAtom, ptr %70, i64 %3486
  %3488 = getelementptr inbounds double, ptr %169, i64 %3475
  %3489 = load double, ptr %3488, align 8, !tbaa !19
  %3490 = sext i32 %3483 to i64
  %3491 = getelementptr inbounds double, ptr %3472, i64 %3490
  %3492 = load double, ptr %3491, align 8, !tbaa !19
  %3493 = fsub double %3489, %3492
  %3494 = shl nsw i32 %3483, 4
  %3495 = sext i32 %3494 to i64
  %3496 = getelementptr inbounds double, ptr %27, i64 %3495
  %3497 = getelementptr inbounds %class.Vector, ptr %930, i64 %3486
  %3498 = getelementptr inbounds %struct.CompAtom, ptr %70, i64 %3486, i32 1
  %3499 = load float, ptr %3498, align 8, !tbaa !104
  %3500 = fpext float %3499 to double
  %3501 = fmul double %3037, %3500
  %3502 = getelementptr inbounds %class.Vector, ptr %3487, i64 0, i32 2
  %3503 = load double, ptr %3502, align 8, !tbaa !49
  %3504 = fsub double %1006, %3503
  %3505 = shl nsw i32 %3483, 2
  %3506 = sext i32 %3505 to i64
  %3507 = getelementptr inbounds double, ptr %28, i64 %3506
  %3508 = getelementptr inbounds double, ptr %3496, i64 12
  %3509 = load double, ptr %3508, align 8, !tbaa !19
  %3510 = getelementptr inbounds double, ptr %3496, i64 13
  %3511 = load double, ptr %3510, align 8, !tbaa !19
  %3512 = getelementptr inbounds double, ptr %3496, i64 14
  %3513 = load double, ptr %3512, align 8, !tbaa !19
  %3514 = getelementptr inbounds double, ptr %3496, i64 15
  %3515 = load double, ptr %3514, align 8, !tbaa !19
  %3516 = load double, ptr %3507, align 8, !tbaa !19
  %3517 = tail call double @llvm.fmuladd.f64(double %31, double %3516, double %3515)
  %3518 = getelementptr inbounds double, ptr %3507, i64 1
  %3519 = load double, ptr %3518, align 8, !tbaa !19
  %3520 = tail call double @llvm.fmuladd.f64(double %957, double %3519, double %3513)
  %3521 = getelementptr inbounds double, ptr %3507, i64 2
  %3522 = load double, ptr %3521, align 8, !tbaa !19
  %3523 = tail call double @llvm.fmuladd.f64(double %958, double %3522, double %3511)
  %3524 = getelementptr inbounds double, ptr %3507, i64 3
  %3525 = load double, ptr %3524, align 8, !tbaa !19
  %3526 = tail call double @llvm.fmuladd.f64(double %959, double %3525, double %3509)
  %3527 = fmul double %3501, %3526
  %3528 = fmul double %3501, %3523
  %3529 = fmul double %3501, %3520
  %3530 = fmul double %3501, %3517
  %3531 = fmul double %3493, %3527
  %3532 = fmul double %3528, 2.500000e-01
  %3533 = tail call double @llvm.fmuladd.f64(double %3531, double 0x3FC5555555555555, double %3532)
  %3534 = fmul double %3529, 5.000000e-01
  %3535 = tail call double @llvm.fmuladd.f64(double %3533, double %3493, double %3534)
  %3536 = tail call double @llvm.fmuladd.f64(double %3535, double %3493, double %3530)
  %3537 = insertelement <2 x double> poison, double %3536, i64 0
  %3538 = shufflevector <2 x double> %3537, <2 x double> poison, <2 x i32> zeroinitializer
  %3539 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %960, <2 x double> %3538, <2 x double> %3477)
  %3540 = tail call double @llvm.fmuladd.f64(double %3493, double %3527, double %3528)
  %3541 = tail call double @llvm.fmuladd.f64(double %3540, double %3493, double %3529)
  %3542 = fmul double %968, %3541
  %3543 = load <2 x double>, ptr %3487, align 8, !tbaa !19
  %3544 = fsub <2 x double> %1003, %3543
  %3545 = insertelement <2 x double> poison, double %3542, i64 0
  %3546 = shufflevector <2 x double> %3545, <2 x double> poison, <2 x i32> zeroinitializer
  %3547 = fmul <2 x double> %3544, %3546
  %3548 = fadd <2 x double> %3478, %3547
  %3549 = load <2 x double>, ptr %3497, align 8, !tbaa !19
  %3550 = fsub <2 x double> %3549, %3547
  store <2 x double> %3550, ptr %3497, align 8, !tbaa !19
  %3551 = fmul double %3504, %3542
  %3552 = fadd double %3476, %3551
  %3553 = getelementptr inbounds %class.Vector, ptr %930, i64 %3486, i32 2
  %3554 = load double, ptr %3553, align 8, !tbaa !112
  %3555 = fsub double %3554, %3551
  store double %3555, ptr %3553, align 8, !tbaa !112
  %3556 = add nuw nsw i64 %3475, 1
  %3557 = icmp eq i64 %3556, %3473
  br i1 %3557, label %3558, label %3474

3558:                                             ; preds = %3474, %3463
  %3559 = phi double [ %3464, %3463 ], [ %3552, %3474 ]
  %3560 = phi <2 x double> [ %3465, %3463 ], [ %3539, %3474 ]
  %3561 = phi <2 x double> [ %3466, %3463 ], [ %3548, %3474 ]
  %3562 = load double, ptr @_ZN20ComputeNonbondedUtil7cutoff2E, align 8, !tbaa !19
  %3563 = tail call noundef i32 @_Z22pairlist_from_pairlistddddPK8CompAtomPKtiPtdPd(double noundef %3562, double noundef %3039, double noundef %3040, double noundef %1006, ptr noundef %70, ptr noundef %3023, i32 noundef %3024, ptr noundef %123, double noundef %32, ptr noundef %169)
  %3564 = add nsw i32 %3469, %3563
  %3565 = icmp sgt i32 %3563, 0
  br i1 %3565, label %3566, label %3653

3566:                                             ; preds = %3558
  %3567 = load ptr, ptr @_ZN20ComputeNonbondedUtil8r2_tableE, align 8, !tbaa !23
  %3568 = zext i32 %3563 to i64
  br label %3569

3569:                                             ; preds = %3566, %3569
  %3570 = phi i64 [ 0, %3566 ], [ %3651, %3569 ]
  %3571 = phi double [ %3559, %3566 ], [ %3647, %3569 ]
  %3572 = phi <2 x double> [ %3560, %3566 ], [ %3634, %3569 ]
  %3573 = phi <2 x double> [ %3561, %3566 ], [ %3643, %3569 ]
  %3574 = shl nuw nsw i64 %3570, 1
  %3575 = getelementptr inbounds i32, ptr %170, i64 %3574
  %3576 = load i32, ptr %3575, align 4, !tbaa !5
  %3577 = ashr i32 %3576, 14
  %3578 = add nsw i32 %3577, %35
  %3579 = getelementptr inbounds i16, ptr %123, i64 %3570
  %3580 = load i16, ptr %3579, align 2, !tbaa !44
  %3581 = zext i16 %3580 to i64
  %3582 = getelementptr inbounds %struct.CompAtom, ptr %70, i64 %3581
  %3583 = getelementptr inbounds double, ptr %169, i64 %3570
  %3584 = load double, ptr %3583, align 8, !tbaa !19
  %3585 = sext i32 %3578 to i64
  %3586 = getelementptr inbounds double, ptr %3567, i64 %3585
  %3587 = load double, ptr %3586, align 8, !tbaa !19
  %3588 = fsub double %3584, %3587
  %3589 = shl nsw i32 %3578, 4
  %3590 = sext i32 %3589 to i64
  %3591 = getelementptr inbounds double, ptr %27, i64 %3590
  %3592 = getelementptr inbounds %class.Vector, ptr %930, i64 %3581
  %3593 = getelementptr inbounds %struct.CompAtom, ptr %70, i64 %3581, i32 1
  %3594 = load float, ptr %3593, align 8, !tbaa !104
  %3595 = fpext float %3594 to double
  %3596 = fmul double %3037, %3595
  %3597 = getelementptr inbounds %class.Vector, ptr %3582, i64 0, i32 2
  %3598 = load double, ptr %3597, align 8, !tbaa !49
  %3599 = fsub double %1006, %3598
  %3600 = shl nsw i32 %3578, 2
  %3601 = sext i32 %3600 to i64
  %3602 = getelementptr inbounds double, ptr %28, i64 %3601
  %3603 = getelementptr inbounds double, ptr %3591, i64 12
  %3604 = load double, ptr %3603, align 8, !tbaa !19
  %3605 = getelementptr inbounds double, ptr %3591, i64 13
  %3606 = load double, ptr %3605, align 8, !tbaa !19
  %3607 = getelementptr inbounds double, ptr %3591, i64 14
  %3608 = load double, ptr %3607, align 8, !tbaa !19
  %3609 = getelementptr inbounds double, ptr %3591, i64 15
  %3610 = load double, ptr %3609, align 8, !tbaa !19
  %3611 = load double, ptr %3602, align 8, !tbaa !19
  %3612 = tail call double @llvm.fmuladd.f64(double %31, double %3611, double %3610)
  %3613 = getelementptr inbounds double, ptr %3602, i64 1
  %3614 = load double, ptr %3613, align 8, !tbaa !19
  %3615 = tail call double @llvm.fmuladd.f64(double %957, double %3614, double %3608)
  %3616 = getelementptr inbounds double, ptr %3602, i64 2
  %3617 = load double, ptr %3616, align 8, !tbaa !19
  %3618 = tail call double @llvm.fmuladd.f64(double %958, double %3617, double %3606)
  %3619 = getelementptr inbounds double, ptr %3602, i64 3
  %3620 = load double, ptr %3619, align 8, !tbaa !19
  %3621 = tail call double @llvm.fmuladd.f64(double %959, double %3620, double %3604)
  %3622 = fmul double %3596, %3621
  %3623 = fmul double %3596, %3618
  %3624 = fmul double %3596, %3615
  %3625 = fmul double %3596, %3612
  %3626 = fmul double %3588, %3622
  %3627 = fmul double %3623, 2.500000e-01
  %3628 = tail call double @llvm.fmuladd.f64(double %3626, double 0x3FC5555555555555, double %3627)
  %3629 = fmul double %3624, 5.000000e-01
  %3630 = tail call double @llvm.fmuladd.f64(double %3628, double %3588, double %3629)
  %3631 = tail call double @llvm.fmuladd.f64(double %3630, double %3588, double %3625)
  %3632 = insertelement <2 x double> poison, double %3631, i64 0
  %3633 = shufflevector <2 x double> %3632, <2 x double> poison, <2 x i32> zeroinitializer
  %3634 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %961, <2 x double> %3633, <2 x double> %3572)
  %3635 = tail call double @llvm.fmuladd.f64(double %3588, double %3622, double %3623)
  %3636 = tail call double @llvm.fmuladd.f64(double %3635, double %3588, double %3624)
  %3637 = fmul double %969, %3636
  %3638 = load <2 x double>, ptr %3582, align 8, !tbaa !19
  %3639 = fsub <2 x double> %1003, %3638
  %3640 = insertelement <2 x double> poison, double %3637, i64 0
  %3641 = shufflevector <2 x double> %3640, <2 x double> poison, <2 x i32> zeroinitializer
  %3642 = fmul <2 x double> %3639, %3641
  %3643 = fadd <2 x double> %3573, %3642
  %3644 = load <2 x double>, ptr %3592, align 8, !tbaa !19
  %3645 = fsub <2 x double> %3644, %3642
  store <2 x double> %3645, ptr %3592, align 8, !tbaa !19
  %3646 = fmul double %3599, %3637
  %3647 = fadd double %3571, %3646
  %3648 = getelementptr inbounds %class.Vector, ptr %930, i64 %3581, i32 2
  %3649 = load double, ptr %3648, align 8, !tbaa !112
  %3650 = fsub double %3649, %3646
  store double %3650, ptr %3648, align 8, !tbaa !112
  %3651 = add nuw nsw i64 %3570, 1
  %3652 = icmp eq i64 %3651, %3568
  br i1 %3652, label %3653, label %3569

3653:                                             ; preds = %3569, %3558
  %3654 = phi double [ %3559, %3558 ], [ %3647, %3569 ]
  %3655 = phi <2 x double> [ %3560, %3558 ], [ %3634, %3569 ]
  %3656 = phi <2 x double> [ %3561, %3558 ], [ %3643, %3569 ]
  %3657 = load double, ptr @_ZN20ComputeNonbondedUtil7cutoff2E, align 8, !tbaa !19
  %3658 = tail call noundef i32 @_Z22pairlist_from_pairlistddddPK8CompAtomPKtiPtdPd(double noundef %3657, double noundef %3039, double noundef %3040, double noundef %1006, ptr noundef %70, ptr noundef %3015, i32 noundef %3016, ptr noundef %123, double noundef %32, ptr noundef %169)
  %3659 = add nsw i32 %3564, %3658
  %3660 = icmp sgt i32 %3658, 0
  br i1 %3660, label %3661, label %3748

3661:                                             ; preds = %3653
  %3662 = load ptr, ptr @_ZN20ComputeNonbondedUtil8r2_tableE, align 8, !tbaa !23
  %3663 = zext i32 %3658 to i64
  br label %3664

3664:                                             ; preds = %3661, %3664
  %3665 = phi i64 [ 0, %3661 ], [ %3746, %3664 ]
  %3666 = phi double [ %3654, %3661 ], [ %3742, %3664 ]
  %3667 = phi <2 x double> [ %3655, %3661 ], [ %3729, %3664 ]
  %3668 = phi <2 x double> [ %3656, %3661 ], [ %3738, %3664 ]
  %3669 = shl nuw nsw i64 %3665, 1
  %3670 = getelementptr inbounds i32, ptr %170, i64 %3669
  %3671 = load i32, ptr %3670, align 4, !tbaa !5
  %3672 = ashr i32 %3671, 14
  %3673 = add nsw i32 %3672, %35
  %3674 = getelementptr inbounds i16, ptr %123, i64 %3665
  %3675 = load i16, ptr %3674, align 2, !tbaa !44
  %3676 = zext i16 %3675 to i64
  %3677 = getelementptr inbounds %struct.CompAtom, ptr %70, i64 %3676
  %3678 = getelementptr inbounds double, ptr %169, i64 %3665
  %3679 = load double, ptr %3678, align 8, !tbaa !19
  %3680 = sext i32 %3673 to i64
  %3681 = getelementptr inbounds double, ptr %3662, i64 %3680
  %3682 = load double, ptr %3681, align 8, !tbaa !19
  %3683 = fsub double %3679, %3682
  %3684 = shl nsw i32 %3673, 4
  %3685 = sext i32 %3684 to i64
  %3686 = getelementptr inbounds double, ptr %27, i64 %3685
  %3687 = getelementptr inbounds %class.Vector, ptr %930, i64 %3676
  %3688 = getelementptr inbounds %struct.CompAtom, ptr %70, i64 %3676, i32 1
  %3689 = load float, ptr %3688, align 8, !tbaa !104
  %3690 = fpext float %3689 to double
  %3691 = fmul double %3037, %3690
  %3692 = getelementptr inbounds %class.Vector, ptr %3677, i64 0, i32 2
  %3693 = load double, ptr %3692, align 8, !tbaa !49
  %3694 = fsub double %1006, %3693
  %3695 = shl nsw i32 %3673, 2
  %3696 = sext i32 %3695 to i64
  %3697 = getelementptr inbounds double, ptr %28, i64 %3696
  %3698 = getelementptr inbounds double, ptr %3686, i64 12
  %3699 = load double, ptr %3698, align 8, !tbaa !19
  %3700 = getelementptr inbounds double, ptr %3686, i64 13
  %3701 = load double, ptr %3700, align 8, !tbaa !19
  %3702 = getelementptr inbounds double, ptr %3686, i64 14
  %3703 = load double, ptr %3702, align 8, !tbaa !19
  %3704 = getelementptr inbounds double, ptr %3686, i64 15
  %3705 = load double, ptr %3704, align 8, !tbaa !19
  %3706 = load double, ptr %3697, align 8, !tbaa !19
  %3707 = fadd double %3705, %3706
  %3708 = getelementptr inbounds double, ptr %3697, i64 1
  %3709 = load double, ptr %3708, align 8, !tbaa !19
  %3710 = tail call double @llvm.fmuladd.f64(double %3709, double 2.000000e+00, double %3703)
  %3711 = getelementptr inbounds double, ptr %3697, i64 2
  %3712 = load double, ptr %3711, align 8, !tbaa !19
  %3713 = tail call double @llvm.fmuladd.f64(double %3712, double 4.000000e+00, double %3701)
  %3714 = getelementptr inbounds double, ptr %3697, i64 3
  %3715 = load double, ptr %3714, align 8, !tbaa !19
  %3716 = tail call double @llvm.fmuladd.f64(double %3715, double 6.000000e+00, double %3699)
  %3717 = fmul double %3691, %3716
  %3718 = fmul double %3691, %3713
  %3719 = fmul double %3691, %3710
  %3720 = fmul double %3691, %3707
  %3721 = fmul double %3683, %3717
  %3722 = fmul double %3718, 2.500000e-01
  %3723 = tail call double @llvm.fmuladd.f64(double %3721, double 0x3FC5555555555555, double %3722)
  %3724 = fmul double %3719, 5.000000e-01
  %3725 = tail call double @llvm.fmuladd.f64(double %3723, double %3683, double %3724)
  %3726 = tail call double @llvm.fmuladd.f64(double %3725, double %3683, double %3720)
  %3727 = insertelement <2 x double> poison, double %3726, i64 0
  %3728 = shufflevector <2 x double> %3727, <2 x double> poison, <2 x i32> zeroinitializer
  %3729 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %960, <2 x double> %3728, <2 x double> %3667)
  %3730 = tail call double @llvm.fmuladd.f64(double %3683, double %3717, double %3718)
  %3731 = tail call double @llvm.fmuladd.f64(double %3730, double %3683, double %3719)
  %3732 = fmul double %970, %3731
  %3733 = load <2 x double>, ptr %3677, align 8, !tbaa !19
  %3734 = fsub <2 x double> %1003, %3733
  %3735 = insertelement <2 x double> poison, double %3732, i64 0
  %3736 = shufflevector <2 x double> %3735, <2 x double> poison, <2 x i32> zeroinitializer
  %3737 = fmul <2 x double> %3734, %3736
  %3738 = fadd <2 x double> %3668, %3737
  %3739 = load <2 x double>, ptr %3687, align 8, !tbaa !19
  %3740 = fsub <2 x double> %3739, %3737
  store <2 x double> %3740, ptr %3687, align 8, !tbaa !19
  %3741 = fmul double %3694, %3732
  %3742 = fadd double %3666, %3741
  %3743 = getelementptr inbounds %class.Vector, ptr %930, i64 %3676, i32 2
  %3744 = load double, ptr %3743, align 8, !tbaa !112
  %3745 = fsub double %3744, %3741
  store double %3745, ptr %3743, align 8, !tbaa !112
  %3746 = add nuw nsw i64 %3665, 1
  %3747 = icmp eq i64 %3746, %3663
  br i1 %3747, label %3748, label %3664

3748:                                             ; preds = %3664, %3653
  %3749 = phi double [ %3654, %3653 ], [ %3742, %3664 ]
  %3750 = phi <2 x double> [ %3655, %3653 ], [ %3729, %3664 ]
  %3751 = phi <2 x double> [ %3656, %3653 ], [ %3738, %3664 ]
  %3752 = load double, ptr @_ZN20ComputeNonbondedUtil7cutoff2E, align 8, !tbaa !19
  %3753 = tail call noundef i32 @_Z22pairlist_from_pairlistddddPK8CompAtomPKtiPtdPd(double noundef %3752, double noundef %3039, double noundef %3040, double noundef %1006, ptr noundef %70, ptr noundef %3021, i32 noundef %3022, ptr noundef %123, double noundef %32, ptr noundef %169)
  %3754 = add nsw i32 %3659, %3753
  %3755 = icmp sgt i32 %3753, 0
  br i1 %3755, label %3756, label %3843

3756:                                             ; preds = %3748
  %3757 = load ptr, ptr @_ZN20ComputeNonbondedUtil8r2_tableE, align 8, !tbaa !23
  %3758 = zext i32 %3753 to i64
  br label %3759

3759:                                             ; preds = %3756, %3759
  %3760 = phi i64 [ 0, %3756 ], [ %3841, %3759 ]
  %3761 = phi double [ %3749, %3756 ], [ %3837, %3759 ]
  %3762 = phi <2 x double> [ %3750, %3756 ], [ %3824, %3759 ]
  %3763 = phi <2 x double> [ %3751, %3756 ], [ %3833, %3759 ]
  %3764 = shl nuw nsw i64 %3760, 1
  %3765 = getelementptr inbounds i32, ptr %170, i64 %3764
  %3766 = load i32, ptr %3765, align 4, !tbaa !5
  %3767 = ashr i32 %3766, 14
  %3768 = add nsw i32 %3767, %35
  %3769 = getelementptr inbounds i16, ptr %123, i64 %3760
  %3770 = load i16, ptr %3769, align 2, !tbaa !44
  %3771 = zext i16 %3770 to i64
  %3772 = getelementptr inbounds %struct.CompAtom, ptr %70, i64 %3771
  %3773 = getelementptr inbounds double, ptr %169, i64 %3760
  %3774 = load double, ptr %3773, align 8, !tbaa !19
  %3775 = sext i32 %3768 to i64
  %3776 = getelementptr inbounds double, ptr %3757, i64 %3775
  %3777 = load double, ptr %3776, align 8, !tbaa !19
  %3778 = fsub double %3774, %3777
  %3779 = shl nsw i32 %3768, 4
  %3780 = sext i32 %3779 to i64
  %3781 = getelementptr inbounds double, ptr %27, i64 %3780
  %3782 = getelementptr inbounds %class.Vector, ptr %930, i64 %3771
  %3783 = getelementptr inbounds %struct.CompAtom, ptr %70, i64 %3771, i32 1
  %3784 = load float, ptr %3783, align 8, !tbaa !104
  %3785 = fpext float %3784 to double
  %3786 = fmul double %3037, %3785
  %3787 = getelementptr inbounds %class.Vector, ptr %3772, i64 0, i32 2
  %3788 = load double, ptr %3787, align 8, !tbaa !49
  %3789 = fsub double %1006, %3788
  %3790 = shl nsw i32 %3768, 2
  %3791 = sext i32 %3790 to i64
  %3792 = getelementptr inbounds double, ptr %28, i64 %3791
  %3793 = getelementptr inbounds double, ptr %3781, i64 12
  %3794 = load double, ptr %3793, align 8, !tbaa !19
  %3795 = getelementptr inbounds double, ptr %3781, i64 13
  %3796 = load double, ptr %3795, align 8, !tbaa !19
  %3797 = getelementptr inbounds double, ptr %3781, i64 14
  %3798 = load double, ptr %3797, align 8, !tbaa !19
  %3799 = getelementptr inbounds double, ptr %3781, i64 15
  %3800 = load double, ptr %3799, align 8, !tbaa !19
  %3801 = load double, ptr %3792, align 8, !tbaa !19
  %3802 = fadd double %3800, %3801
  %3803 = getelementptr inbounds double, ptr %3792, i64 1
  %3804 = load double, ptr %3803, align 8, !tbaa !19
  %3805 = tail call double @llvm.fmuladd.f64(double %3804, double 2.000000e+00, double %3798)
  %3806 = getelementptr inbounds double, ptr %3792, i64 2
  %3807 = load double, ptr %3806, align 8, !tbaa !19
  %3808 = tail call double @llvm.fmuladd.f64(double %3807, double 4.000000e+00, double %3796)
  %3809 = getelementptr inbounds double, ptr %3792, i64 3
  %3810 = load double, ptr %3809, align 8, !tbaa !19
  %3811 = tail call double @llvm.fmuladd.f64(double %3810, double 6.000000e+00, double %3794)
  %3812 = fmul double %3786, %3811
  %3813 = fmul double %3786, %3808
  %3814 = fmul double %3786, %3805
  %3815 = fmul double %3786, %3802
  %3816 = fmul double %3778, %3812
  %3817 = fmul double %3813, 2.500000e-01
  %3818 = tail call double @llvm.fmuladd.f64(double %3816, double 0x3FC5555555555555, double %3817)
  %3819 = fmul double %3814, 5.000000e-01
  %3820 = tail call double @llvm.fmuladd.f64(double %3818, double %3778, double %3819)
  %3821 = tail call double @llvm.fmuladd.f64(double %3820, double %3778, double %3815)
  %3822 = insertelement <2 x double> poison, double %3821, i64 0
  %3823 = shufflevector <2 x double> %3822, <2 x double> poison, <2 x i32> zeroinitializer
  %3824 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %961, <2 x double> %3823, <2 x double> %3762)
  %3825 = tail call double @llvm.fmuladd.f64(double %3778, double %3812, double %3813)
  %3826 = tail call double @llvm.fmuladd.f64(double %3825, double %3778, double %3814)
  %3827 = fmul double %971, %3826
  %3828 = load <2 x double>, ptr %3772, align 8, !tbaa !19
  %3829 = fsub <2 x double> %1003, %3828
  %3830 = insertelement <2 x double> poison, double %3827, i64 0
  %3831 = shufflevector <2 x double> %3830, <2 x double> poison, <2 x i32> zeroinitializer
  %3832 = fmul <2 x double> %3829, %3831
  %3833 = fadd <2 x double> %3763, %3832
  %3834 = load <2 x double>, ptr %3782, align 8, !tbaa !19
  %3835 = fsub <2 x double> %3834, %3832
  store <2 x double> %3835, ptr %3782, align 8, !tbaa !19
  %3836 = fmul double %3789, %3827
  %3837 = fadd double %3761, %3836
  %3838 = getelementptr inbounds %class.Vector, ptr %930, i64 %3771, i32 2
  %3839 = load double, ptr %3838, align 8, !tbaa !112
  %3840 = fsub double %3839, %3836
  store double %3840, ptr %3838, align 8, !tbaa !112
  %3841 = add nuw nsw i64 %3760, 1
  %3842 = icmp eq i64 %3841, %3758
  br i1 %3842, label %3843, label %3759

3843:                                             ; preds = %3759, %3748
  %3844 = phi double [ %3749, %3748 ], [ %3837, %3759 ]
  %3845 = phi <2 x double> [ %3750, %3748 ], [ %3824, %3759 ]
  %3846 = phi <2 x double> [ %3751, %3748 ], [ %3833, %3759 ]
  %3847 = getelementptr inbounds %class.Vector, ptr %930, i64 %985
  %3848 = load <2 x double>, ptr %3847, align 8, !tbaa !19
  %3849 = fadd <2 x double> %3846, %3848
  store <2 x double> %3849, ptr %3847, align 8, !tbaa !19
  %3850 = getelementptr inbounds %class.Vector, ptr %930, i64 %985, i32 2
  %3851 = load double, ptr %3850, align 8, !tbaa !112
  %3852 = fadd double %3844, %3851
  store double %3852, ptr %3850, align 8, !tbaa !112
  br label %3853

3853:                                             ; preds = %3843, %996
  %3854 = phi i32 [ %997, %996 ], [ %1001, %3843 ]
  %3855 = phi i32 [ %982, %996 ], [ %3025, %3843 ]
  %3856 = phi i32 [ %981, %996 ], [ %3026, %3843 ]
  %3857 = phi i32 [ %980, %996 ], [ %3027, %3843 ]
  %3858 = phi i32 [ %979, %996 ], [ %3028, %3843 ]
  %3859 = phi i32 [ %978, %996 ], [ %1011, %3843 ]
  %3860 = phi ptr [ %977, %996 ], [ %3029, %3843 ]
  %3861 = phi ptr [ %976, %996 ], [ %3030, %3843 ]
  %3862 = phi ptr [ %975, %996 ], [ %3031, %3843 ]
  %3863 = phi i32 [ %999, %996 ], [ %974, %3843 ]
  %3864 = phi i32 [ %973, %996 ], [ %3754, %3843 ]
  %3865 = phi <2 x double> [ %984, %996 ], [ %3845, %3843 ]
  %3866 = add nsw i32 %3863, 1
  %3867 = icmp slt i32 %3866, %936
  br i1 %3867, label %972, label %3868

3868:                                             ; preds = %3853, %924
  %3869 = phi ptr [ null, %924 ], [ %3862, %3853 ]
  %3870 = phi i32 [ 0, %924 ], [ %3864, %3853 ]
  %3871 = phi <2 x double> [ zeroinitializer, %924 ], [ %3865, %3853 ]
  %3872 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 4
  %3873 = load ptr, ptr %3872, align 8, !tbaa !23
  %3874 = icmp sgt i32 %65, 0
  br i1 %3874, label %3875, label %3877

3875:                                             ; preds = %3868
  %3876 = zext i32 %65 to i64
  br label %3908

3877:                                             ; preds = %3908, %3868
  %3878 = phi <4 x double> [ zeroinitializer, %3868 ], [ %3938, %3908 ]
  %3879 = phi <2 x double> [ zeroinitializer, %3868 ], [ %3933, %3908 ]
  %3880 = sitofp i32 %3870 to double
  %3881 = getelementptr inbounds double, ptr %7, i64 22
  %3882 = load double, ptr %3881, align 8, !tbaa !19
  %3883 = fadd double %3882, %3880
  store double %3883, ptr %3881, align 8, !tbaa !19
  %3884 = getelementptr inbounds double, ptr %7, i64 1
  %3885 = load double, ptr %3884, align 8, !tbaa !19
  %3886 = extractelement <2 x double> %3871, i64 1
  %3887 = fadd double %3886, %3885
  store double %3887, ptr %3884, align 8, !tbaa !19
  %3888 = getelementptr inbounds double, ptr %7, i64 24
  %3889 = load double, ptr %3888, align 8, !tbaa !19
  %3890 = extractelement <2 x double> %3871, i64 0
  %3891 = fadd double %3890, %3889
  store double %3891, ptr %3888, align 8, !tbaa !19
  %3892 = getelementptr inbounds double, ptr %7, i64 12
  %3893 = load <4 x double>, ptr %3892, align 8, !tbaa !19
  %3894 = shufflevector <2 x double> %3879, <2 x double> poison, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>
  %3895 = shufflevector <4 x double> %3894, <4 x double> %3878, <4 x i32> <i32 0, i32 1, i32 7, i32 poison>
  %3896 = shufflevector <4 x double> %3895, <4 x double> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 1>
  %3897 = fadd <4 x double> %3896, %3893
  store <4 x double> %3897, ptr %3892, align 8, !tbaa !19
  %3898 = getelementptr inbounds double, ptr %7, i64 16
  %3899 = load <4 x double>, ptr %3898, align 8, !tbaa !19
  %3900 = shufflevector <4 x double> %3878, <4 x double> poison, <4 x i32> <i32 2, i32 1, i32 3, i32 poison>
  %3901 = shufflevector <4 x double> %3900, <4 x double> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 1>
  %3902 = fadd <4 x double> %3901, %3899
  store <4 x double> %3902, ptr %3898, align 8, !tbaa !19
  %3903 = getelementptr inbounds double, ptr %7, i64 20
  %3904 = load double, ptr %3903, align 8, !tbaa !19
  %3905 = extractelement <4 x double> %3878, i64 0
  %3906 = fadd double %3905, %3904
  store double %3906, ptr %3903, align 8, !tbaa !19
  %3907 = icmp eq ptr %3869, null
  br i1 %3907, label %3942, label %3941

3908:                                             ; preds = %3875, %3908
  %3909 = phi i64 [ 0, %3875 ], [ %3939, %3908 ]
  %3910 = phi <4 x double> [ zeroinitializer, %3875 ], [ %3938, %3908 ]
  %3911 = phi <2 x double> [ zeroinitializer, %3875 ], [ %3933, %3908 ]
  %3912 = getelementptr inbounds %class.Vector, ptr %930, i64 %3909
  %3913 = getelementptr inbounds %class.Vector, ptr %3873, i64 %3909
  %3914 = getelementptr inbounds %class.Vector, ptr %930, i64 %3909, i32 1
  %3915 = load <2 x double>, ptr %3912, align 8, !tbaa !19
  %3916 = load <2 x double>, ptr %3913, align 8, !tbaa !19
  %3917 = fadd <2 x double> %3915, %3916
  store <2 x double> %3917, ptr %3913, align 8, !tbaa !19
  %3918 = getelementptr inbounds %class.Vector, ptr %930, i64 %3909, i32 2
  %3919 = load double, ptr %3918, align 8, !tbaa !112
  %3920 = getelementptr inbounds %class.Vector, ptr %3873, i64 %3909, i32 2
  %3921 = load double, ptr %3920, align 8, !tbaa !112
  %3922 = fadd double %3919, %3921
  store double %3922, ptr %3920, align 8, !tbaa !112
  %3923 = load double, ptr %3912, align 8, !tbaa !304
  %3924 = getelementptr inbounds %struct.CompAtom, ptr %68, i64 %3909
  %3925 = load double, ptr %3924, align 8, !tbaa !68
  %3926 = getelementptr inbounds %class.Vector, ptr %3924, i64 0, i32 1
  %3927 = load <2 x double>, ptr %3926, align 8, !tbaa !19
  %3928 = shufflevector <2 x double> %3927, <2 x double> poison, <4 x i32> <i32 1, i32 1, i32 0, i32 1>
  %3929 = insertelement <2 x double> poison, double %3923, i64 0
  %3930 = shufflevector <2 x double> %3929, <2 x double> poison, <2 x i32> zeroinitializer
  %3931 = shufflevector <2 x double> %3927, <2 x double> poison, <2 x i32> <i32 poison, i32 0>
  %3932 = insertelement <2 x double> %3931, double %3925, i64 0
  %3933 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %3930, <2 x double> %3932, <2 x double> %3911)
  %3934 = load <2 x double>, ptr %3914, align 8, !tbaa !19
  %3935 = shufflevector <2 x double> %3934, <2 x double> poison, <4 x i32> <i32 1, i32 0, i32 poison, i32 poison>
  %3936 = insertelement <4 x double> %3935, double %3923, i64 3
  %3937 = shufflevector <4 x double> %3936, <4 x double> poison, <4 x i32> <i32 0, i32 1, i32 1, i32 3>
  %3938 = tail call <4 x double> @llvm.fmuladd.v4f64(<4 x double> %3937, <4 x double> %3928, <4 x double> %3910)
  %3939 = add nuw nsw i64 %3909, 1
  %3940 = icmp eq i64 %3939, %3876
  br i1 %3940, label %3877, label %3908

3941:                                             ; preds = %3877
  tail call void @_ZdaPv(ptr noundef nonnull %3869) #13
  br label %3942

3942:                                             ; preds = %3941, %3877
  call void @llvm.lifetime.end.p0(i64 36, ptr nonnull %2) #11
  br label %3943

3943:                                             ; preds = %1, %3942
  ret void
}

; Function Attrs: mustprogress nocallback nofree nounwind willreturn memory(argmem: readwrite)
declare void @llvm.memcpy.p0.p0.i64(ptr noalias nocapture writeonly, ptr noalias nocapture readonly, i64, i1 immarg) #8

; Function Attrs: mustprogress nofree nounwind willreturn memory(write)
declare float @powf(float noundef, float noundef) local_unnamed_addr #9

; Function Attrs: sspstrong uwtable
define linkonce_odr dso_local void @_ZN14ResizeArrayRawI6VectorE6resizeEi(ptr noundef nonnull align 8 dereferenceable(36) %0, i32 noundef %1) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %class.ResizeArrayRaw.11, ptr %0, i64 0, i32 2
  %4 = load i32, ptr %3, align 8, !tbaa !383
  %5 = icmp slt i32 %4, %1
  br i1 %5, label %6, label %79

6:                                                ; preds = %2
  %7 = getelementptr inbounds %class.ResizeArrayRaw.11, ptr %0, i64 0, i32 3
  %8 = load i32, ptr %7, align 4, !tbaa !384
  %9 = icmp slt i32 %8, %1
  br i1 %9, label %10, label %45

10:                                               ; preds = %6
  %11 = sitofp i32 %8 to float
  %12 = getelementptr inbounds %class.ResizeArrayRaw.11, ptr %0, i64 0, i32 5
  %13 = load float, ptr %12, align 4, !tbaa !385
  %14 = fmul float %13, %11
  %15 = fptosi float %14 to i32
  %16 = tail call i32 @llvm.smax.i32(i32 %15, i32 %1)
  %17 = sub nsw i32 %16, %8
  %18 = getelementptr inbounds %class.ResizeArrayRaw.11, ptr %0, i64 0, i32 6
  %19 = load i32, ptr %18, align 8, !tbaa !386
  %20 = icmp slt i32 %17, %19
  %21 = add nsw i32 %19, %8
  %22 = select i1 %20, i32 %21, i32 %16
  %23 = sext i32 %22 to i64
  %24 = mul nsw i64 %23, 24
  %25 = add nsw i64 %24, 31
  %26 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %25) #12
  %27 = getelementptr inbounds i8, ptr %26, i64 31
  %28 = ptrtoint ptr %27 to i64
  %29 = and i64 %28, 31
  %30 = sub nsw i64 0, %29
  %31 = getelementptr inbounds i8, ptr %27, i64 %30
  %32 = load ptr, ptr %0, align 8, !tbaa !224
  %33 = sext i32 %4 to i64
  %34 = mul nsw i64 %33, 24
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %31, ptr align 1 %32, i64 %34, i1 false)
  %35 = icmp eq i32 %8, 0
  br i1 %35, label %42, label %36

36:                                               ; preds = %10
  %37 = getelementptr inbounds %class.ResizeArrayRaw.11, ptr %0, i64 0, i32 1
  %38 = load ptr, ptr %37, align 8, !tbaa !387
  %39 = icmp eq ptr %38, null
  br i1 %39, label %42, label %40

40:                                               ; preds = %36
  tail call void @_ZdaPv(ptr noundef nonnull %38) #13
  %41 = load i32, ptr %3, align 8, !tbaa !383
  br label %42

42:                                               ; preds = %40, %36, %10
  %43 = phi i32 [ %41, %40 ], [ %4, %36 ], [ %4, %10 ]
  %44 = getelementptr inbounds %class.ResizeArrayRaw.11, ptr %0, i64 0, i32 1
  store ptr %26, ptr %44, align 8, !tbaa !387
  store ptr %31, ptr %0, align 8, !tbaa !224
  store i32 %22, ptr %7, align 4, !tbaa !384
  br label %45

45:                                               ; preds = %6, %42
  %46 = phi i32 [ %4, %6 ], [ %43, %42 ]
  %47 = icmp slt i32 %46, %1
  br i1 %47, label %48, label %79

48:                                               ; preds = %45
  %49 = load ptr, ptr %0, align 8, !tbaa !224
  %50 = sext i32 %46 to i64
  %51 = sext i32 %1 to i64
  %52 = sub nsw i64 %51, %50
  %53 = icmp ult i64 %52, 8
  br i1 %53, label %71, label %54

54:                                               ; preds = %48
  %55 = and i64 %52, -8
  %56 = add nsw i64 %55, %50
  br label %57

57:                                               ; preds = %57, %54
  %58 = phi i64 [ 0, %54 ], [ %67, %57 ]
  %59 = add i64 %58, %50
  %60 = add i64 %59, 2
  %61 = add i64 %59, 4
  %62 = add i64 %59, 6
  %63 = getelementptr inbounds %class.Vector, ptr %49, i64 %59
  %64 = getelementptr inbounds %class.Vector, ptr %49, i64 %60
  %65 = getelementptr inbounds %class.Vector, ptr %49, i64 %61
  %66 = getelementptr inbounds %class.Vector, ptr %49, i64 %62
  store <6 x double> <double -9.999900e+04, double -9.999900e+04, double -9.999900e+04, double -9.999900e+04, double -9.999900e+04, double -9.999900e+04>, ptr %63, align 8, !tbaa !19
  store <6 x double> <double -9.999900e+04, double -9.999900e+04, double -9.999900e+04, double -9.999900e+04, double -9.999900e+04, double -9.999900e+04>, ptr %64, align 8, !tbaa !19
  store <6 x double> <double -9.999900e+04, double -9.999900e+04, double -9.999900e+04, double -9.999900e+04, double -9.999900e+04, double -9.999900e+04>, ptr %65, align 8, !tbaa !19
  store <6 x double> <double -9.999900e+04, double -9.999900e+04, double -9.999900e+04, double -9.999900e+04, double -9.999900e+04, double -9.999900e+04>, ptr %66, align 8, !tbaa !19
  %67 = add nuw i64 %58, 8
  %68 = icmp eq i64 %67, %55
  br i1 %68, label %69, label %57, !llvm.loop !388

69:                                               ; preds = %57
  %70 = icmp eq i64 %52, %55
  br i1 %70, label %79, label %71

71:                                               ; preds = %48, %69
  %72 = phi i64 [ %50, %48 ], [ %56, %69 ]
  br label %73

73:                                               ; preds = %71, %73
  %74 = phi i64 [ %77, %73 ], [ %72, %71 ]
  %75 = getelementptr inbounds %class.Vector, ptr %49, i64 %74
  store <2 x double> <double -9.999900e+04, double -9.999900e+04>, ptr %75, align 8, !tbaa !19
  %76 = getelementptr inbounds %class.Vector, ptr %49, i64 %74, i32 2
  store double -9.999900e+04, ptr %76, align 8, !tbaa !112
  %77 = add nsw i64 %74, 1
  %78 = icmp eq i64 %77, %51
  br i1 %78, label %79, label %73, !llvm.loop !389

79:                                               ; preds = %73, %69, %2, %45
  store i32 %1, ptr %3, align 8, !tbaa !383
  ret void
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smax.i32(i32, i32) #10

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare <2 x double> @llvm.fmuladd.v2f64(<2 x double>, <2 x double>, <2 x double>) #10

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare <4 x double> @llvm.fmuladd.v4f64(<4 x double>, <4 x double>, <4 x double>) #10

attributes #0 = { sspstrong uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cmov,+crc32,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" }
attributes #1 = { mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: readwrite) }
attributes #2 = { "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cmov,+crc32,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" }
attributes #3 = { nobuiltin allocsize(0) "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cmov,+crc32,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" }
attributes #4 = { mustprogress nocallback nofree nounwind willreturn memory(argmem: write) }
attributes #5 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #6 = { inlinehint nounwind sspstrong uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cmov,+crc32,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" }
attributes #7 = { nobuiltin nounwind "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cmov,+crc32,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" }
attributes #8 = { mustprogress nocallback nofree nounwind willreturn memory(argmem: readwrite) }
attributes #9 = { mustprogress nofree nounwind willreturn memory(write) "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cmov,+crc32,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" }
attributes #10 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #11 = { nounwind }
attributes #12 = { builtin allocsize(0) }
attributes #13 = { builtin nounwind }

!llvm.module.flags = !{!0, !1, !2, !3}
!llvm.ident = !{!4}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 8, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{i32 7, !"uwtable", i32 2}
!4 = !{!"clang version 17.0.6"}
!5 = !{!6, !6, i64 0}
!6 = !{!"int", !7, i64 0}
!7 = !{!"omnipotent char", !8, i64 0}
!8 = !{!"Simple C++ TBAA"}
!9 = !{!10, !13, i64 112}
!10 = !{!"_ZTS9nonbonded", !7, i64 0, !7, i64 16, !7, i64 32, !7, i64 48, !7, i64 64, !7, i64 80, !11, i64 88, !13, i64 112, !13, i64 120, !13, i64 128, !13, i64 136, !6, i64 144, !6, i64 148, !12, i64 152, !12, i64 160, !6, i64 168, !6, i64 172, !6, i64 176, !6, i64 180}
!11 = !{!"_ZTS6Vector", !12, i64 0, !12, i64 8, !12, i64 16}
!12 = !{!"double", !7, i64 0}
!13 = !{!"any pointer", !7, i64 0}
!14 = !{!10, !13, i64 136}
!15 = !{!10, !6, i64 144}
!16 = !{!10, !6, i64 148}
!17 = !{!18, !6, i64 8}
!18 = !{!"_ZTS9Pairlists", !13, i64 0, !6, i64 8, !6, i64 12}
!19 = !{!12, !12, i64 0}
!20 = !{!10, !12, i64 104}
!21 = !{!10, !12, i64 152}
!22 = !{!10, !12, i64 160}
!23 = !{!13, !13, i64 0}
!24 = !{!10, !13, i64 128}
!25 = !{!26, !13, i64 8}
!26 = !{!"_ZTS11ResizeArrayItE", !13, i64 8}
!27 = !{!28, !6, i64 16}
!28 = !{!"_ZTS14ResizeArrayRawItE", !13, i64 0, !13, i64 8, !6, i64 16, !6, i64 20, !6, i64 24, !29, i64 28, !6, i64 32}
!29 = !{!"float", !7, i64 0}
!30 = !{!28, !6, i64 20}
!31 = !{!28, !29, i64 28}
!32 = !{!28, !6, i64 32}
!33 = !{!28, !13, i64 0}
!34 = !{!28, !13, i64 8}
!35 = !{!36, !13, i64 8}
!36 = !{!"_ZTS11ResizeArrayIdE", !13, i64 8}
!37 = !{!38, !6, i64 16}
!38 = !{!"_ZTS14ResizeArrayRawIdE", !13, i64 0, !13, i64 8, !6, i64 16, !6, i64 20, !6, i64 24, !29, i64 28, !6, i64 32}
!39 = !{!38, !6, i64 20}
!40 = !{!38, !29, i64 28}
!41 = !{!38, !6, i64 32}
!42 = !{!38, !13, i64 0}
!43 = !{!38, !13, i64 8}
!44 = !{!45, !45, i64 0}
!45 = !{!"short", !7, i64 0}
!46 = !{!18, !13, i64 0}
!47 = !{!10, !6, i64 172}
!48 = !{!10, !6, i64 180}
!49 = !{!50, !12, i64 16}
!50 = !{!"_ZTS8CompAtom", !11, i64 0, !29, i64 24, !45, i64 28, !7, i64 30, !6, i64 31, !6, i64 31, !6, i64 31}
!51 = !{!50, !7, i64 30}
!52 = !{!53, !13, i64 8}
!53 = !{!"_ZTS8Molecule", !13, i64 0, !13, i64 8, !13, i64 16, !13, i64 24, !6, i64 32, !6, i64 36, !13, i64 40}
!54 = !{!55, !6, i64 0}
!55 = !{!"_ZTS14ExclusionCheck", !6, i64 0, !6, i64 4, !13, i64 8}
!56 = !{!55, !6, i64 4}
!57 = !{!55, !13, i64 8}
!58 = !{!7, !7, i64 0}
!59 = distinct !{!59, !60}
!60 = !{!"llvm.loop.unroll.disable"}
!61 = !{!53, !6, i64 32}
!62 = distinct !{!62, !60}
!63 = !{!53, !13, i64 16}
!64 = distinct !{!64, !60}
!65 = !{!53, !13, i64 24}
!66 = distinct !{!66, !60}
!67 = !{!50, !12, i64 8}
!68 = !{!50, !12, i64 0}
!69 = !{!18, !6, i64 12}
!70 = distinct !{!70, !71, !72}
!71 = !{!"llvm.loop.isvectorized", i32 1}
!72 = !{!"llvm.loop.unroll.runtime.disable"}
!73 = distinct !{!73, !71, !72}
!74 = distinct !{!74, !60}
!75 = distinct !{!75, !71}
!76 = distinct !{!76, !71, !72}
!77 = distinct !{!77, !71, !72}
!78 = distinct !{!78, !60}
!79 = distinct !{!79, !71}
!80 = distinct !{!80, !71, !72}
!81 = distinct !{!81, !71, !72}
!82 = distinct !{!82, !60}
!83 = distinct !{!83, !71}
!84 = distinct !{!84, !71, !72}
!85 = distinct !{!85, !71, !72}
!86 = distinct !{!86, !60}
!87 = distinct !{!87, !71}
!88 = distinct !{!88, !71, !72}
!89 = distinct !{!89, !71, !72}
!90 = distinct !{!90, !60}
!91 = distinct !{!91, !71}
!92 = distinct !{!92, !71, !72}
!93 = distinct !{!93, !71, !72}
!94 = distinct !{!94, !60}
!95 = distinct !{!95, !71}
!96 = distinct !{!96, !71, !72}
!97 = distinct !{!97, !71, !72}
!98 = distinct !{!98, !60}
!99 = distinct !{!99, !71}
!100 = distinct !{!100, !71, !72}
!101 = distinct !{!101, !71, !72}
!102 = distinct !{!102, !60}
!103 = distinct !{!103, !71}
!104 = !{!50, !29, i64 24}
!105 = !{!50, !45, i64 28}
!106 = !{!107, !13, i64 8}
!107 = !{!"_ZTS7LJTable", !13, i64 0, !13, i64 8, !6, i64 16}
!108 = !{!107, !6, i64 16}
!109 = !{!110, !12, i64 0}
!110 = !{!"_ZTSN7LJTable10TableEntryE", !12, i64 0, !12, i64 8}
!111 = !{!110, !12, i64 8}
!112 = !{!11, !12, i64 16}
!113 = !{!10, !12, i64 88}
!114 = distinct !{!114, !60}
!115 = distinct !{!115, !60}
!116 = distinct !{!116, !60}
!117 = distinct !{!117, !60}
!118 = distinct !{!118, !71, !72}
!119 = distinct !{!119, !71, !72}
!120 = distinct !{!120, !60}
!121 = distinct !{!121, !71}
!122 = distinct !{!122, !71, !72}
!123 = distinct !{!123, !71, !72}
!124 = distinct !{!124, !60}
!125 = distinct !{!125, !71}
!126 = distinct !{!126, !71, !72}
!127 = distinct !{!127, !71, !72}
!128 = distinct !{!128, !60}
!129 = distinct !{!129, !71}
!130 = distinct !{!130, !71, !72}
!131 = distinct !{!131, !71, !72}
!132 = distinct !{!132, !60}
!133 = distinct !{!133, !71}
!134 = distinct !{!134, !71, !72}
!135 = distinct !{!135, !71, !72}
!136 = distinct !{!136, !60}
!137 = distinct !{!137, !71}
!138 = distinct !{!138, !71, !72}
!139 = distinct !{!139, !71, !72}
!140 = distinct !{!140, !60}
!141 = distinct !{!141, !71}
!142 = distinct !{!142, !71, !72}
!143 = distinct !{!143, !71, !72}
!144 = distinct !{!144, !60}
!145 = distinct !{!145, !71}
!146 = distinct !{!146, !71, !72}
!147 = distinct !{!147, !71, !72}
!148 = distinct !{!148, !60}
!149 = distinct !{!149, !71}
!150 = distinct !{!150, !60}
!151 = distinct !{!151, !60}
!152 = distinct !{!152, !60}
!153 = distinct !{!153, !60}
!154 = distinct !{!154, !71, !72}
!155 = distinct !{!155, !71, !72}
!156 = distinct !{!156, !60}
!157 = distinct !{!157, !71}
!158 = distinct !{!158, !71, !72}
!159 = distinct !{!159, !71, !72}
!160 = distinct !{!160, !60}
!161 = distinct !{!161, !71}
!162 = distinct !{!162, !71, !72}
!163 = distinct !{!163, !71, !72}
!164 = distinct !{!164, !60}
!165 = distinct !{!165, !71}
!166 = distinct !{!166, !71, !72}
!167 = distinct !{!167, !71, !72}
!168 = distinct !{!168, !60}
!169 = distinct !{!169, !71}
!170 = distinct !{!170, !71, !72}
!171 = distinct !{!171, !71, !72}
!172 = distinct !{!172, !60}
!173 = distinct !{!173, !71}
!174 = distinct !{!174, !71, !72}
!175 = distinct !{!175, !71, !72}
!176 = distinct !{!176, !60}
!177 = distinct !{!177, !71}
!178 = distinct !{!178, !71, !72}
!179 = distinct !{!179, !71, !72}
!180 = distinct !{!180, !60}
!181 = distinct !{!181, !71}
!182 = distinct !{!182, !71, !72}
!183 = distinct !{!183, !71, !72}
!184 = distinct !{!184, !60}
!185 = distinct !{!185, !71}
!186 = distinct !{!186, !60}
!187 = distinct !{!187, !60}
!188 = distinct !{!188, !60}
!189 = distinct !{!189, !60}
!190 = distinct !{!190, !71, !72}
!191 = distinct !{!191, !71, !72}
!192 = distinct !{!192, !60}
!193 = distinct !{!193, !71}
!194 = distinct !{!194, !71, !72}
!195 = distinct !{!195, !71, !72}
!196 = distinct !{!196, !60}
!197 = distinct !{!197, !71}
!198 = distinct !{!198, !71, !72}
!199 = distinct !{!199, !71, !72}
!200 = distinct !{!200, !60}
!201 = distinct !{!201, !71}
!202 = distinct !{!202, !71, !72}
!203 = distinct !{!203, !71, !72}
!204 = distinct !{!204, !60}
!205 = distinct !{!205, !71}
!206 = distinct !{!206, !71, !72}
!207 = distinct !{!207, !71, !72}
!208 = distinct !{!208, !60}
!209 = distinct !{!209, !71}
!210 = distinct !{!210, !71, !72}
!211 = distinct !{!211, !71, !72}
!212 = distinct !{!212, !60}
!213 = distinct !{!213, !71}
!214 = distinct !{!214, !71, !72}
!215 = distinct !{!215, !71, !72}
!216 = distinct !{!216, !60}
!217 = distinct !{!217, !71}
!218 = distinct !{!218, !71, !72}
!219 = distinct !{!219, !71, !72}
!220 = distinct !{!220, !60}
!221 = distinct !{!221, !71}
!222 = !{!223, !13, i64 8}
!223 = !{!"_ZTS11ResizeArrayI6VectorE", !13, i64 8}
!224 = !{!225, !13, i64 0}
!225 = !{!"_ZTS14ResizeArrayRawI6VectorE", !13, i64 0, !13, i64 8, !6, i64 16, !6, i64 20, !6, i64 24, !29, i64 28, !6, i64 32}
!226 = distinct !{!226, !60}
!227 = distinct !{!227, !60}
!228 = distinct !{!228, !60}
!229 = distinct !{!229, !60}
!230 = distinct !{!230, !71, !72}
!231 = distinct !{!231, !71, !72}
!232 = distinct !{!232, !72, !71}
!233 = distinct !{!233, !71, !72}
!234 = distinct !{!234, !71, !72}
!235 = distinct !{!235, !60}
!236 = distinct !{!236, !71}
!237 = distinct !{!237, !71, !72}
!238 = distinct !{!238, !71, !72}
!239 = distinct !{!239, !60}
!240 = distinct !{!240, !71}
!241 = distinct !{!241, !71, !72}
!242 = distinct !{!242, !71, !72}
!243 = distinct !{!243, !60}
!244 = distinct !{!244, !71}
!245 = distinct !{!245, !71, !72}
!246 = distinct !{!246, !71, !72}
!247 = distinct !{!247, !60}
!248 = distinct !{!248, !71}
!249 = distinct !{!249, !71, !72}
!250 = distinct !{!250, !71, !72}
!251 = distinct !{!251, !60}
!252 = distinct !{!252, !71}
!253 = distinct !{!253, !71, !72}
!254 = distinct !{!254, !71, !72}
!255 = distinct !{!255, !60}
!256 = distinct !{!256, !71}
!257 = distinct !{!257, !71, !72}
!258 = distinct !{!258, !71, !72}
!259 = distinct !{!259, !60}
!260 = distinct !{!260, !71}
!261 = distinct !{!261, !71, !72}
!262 = distinct !{!262, !71, !72}
!263 = distinct !{!263, !60}
!264 = distinct !{!264, !71}
!265 = distinct !{!265, !60}
!266 = distinct !{!266, !60}
!267 = distinct !{!267, !60}
!268 = distinct !{!268, !60}
!269 = distinct !{!269, !71, !72}
!270 = distinct !{!270, !71, !72}
!271 = distinct !{!271, !72, !71}
!272 = distinct !{!272, !71, !72}
!273 = distinct !{!273, !71, !72}
!274 = distinct !{!274, !60}
!275 = distinct !{!275, !71}
!276 = distinct !{!276, !71, !72}
!277 = distinct !{!277, !71, !72}
!278 = distinct !{!278, !60}
!279 = distinct !{!279, !71}
!280 = distinct !{!280, !71, !72}
!281 = distinct !{!281, !71, !72}
!282 = distinct !{!282, !60}
!283 = distinct !{!283, !71}
!284 = distinct !{!284, !71, !72}
!285 = distinct !{!285, !71, !72}
!286 = distinct !{!286, !60}
!287 = distinct !{!287, !71}
!288 = distinct !{!288, !71, !72}
!289 = distinct !{!289, !71, !72}
!290 = distinct !{!290, !60}
!291 = distinct !{!291, !71}
!292 = distinct !{!292, !71, !72}
!293 = distinct !{!293, !71, !72}
!294 = distinct !{!294, !60}
!295 = distinct !{!295, !71}
!296 = distinct !{!296, !71, !72}
!297 = distinct !{!297, !71, !72}
!298 = distinct !{!298, !60}
!299 = distinct !{!299, !71}
!300 = distinct !{!300, !71, !72}
!301 = distinct !{!301, !71, !72}
!302 = distinct !{!302, !60}
!303 = distinct !{!303, !71}
!304 = !{!11, !12, i64 0}
!305 = distinct !{!305, !60}
!306 = distinct !{!306, !60}
!307 = distinct !{!307, !60}
!308 = distinct !{!308, !60}
!309 = distinct !{!309, !71, !72}
!310 = distinct !{!310, !71, !72}
!311 = distinct !{!311, !72, !71}
!312 = distinct !{!312, !71, !72}
!313 = distinct !{!313, !71, !72}
!314 = distinct !{!314, !60}
!315 = distinct !{!315, !71}
!316 = distinct !{!316, !71, !72}
!317 = distinct !{!317, !71, !72}
!318 = distinct !{!318, !60}
!319 = distinct !{!319, !71}
!320 = distinct !{!320, !71, !72}
!321 = distinct !{!321, !71, !72}
!322 = distinct !{!322, !60}
!323 = distinct !{!323, !71}
!324 = distinct !{!324, !71, !72}
!325 = distinct !{!325, !71, !72}
!326 = distinct !{!326, !60}
!327 = distinct !{!327, !71}
!328 = distinct !{!328, !71, !72}
!329 = distinct !{!329, !71, !72}
!330 = distinct !{!330, !60}
!331 = distinct !{!331, !71}
!332 = distinct !{!332, !71, !72}
!333 = distinct !{!333, !71, !72}
!334 = distinct !{!334, !60}
!335 = distinct !{!335, !71}
!336 = distinct !{!336, !71, !72}
!337 = distinct !{!337, !71, !72}
!338 = distinct !{!338, !60}
!339 = distinct !{!339, !71}
!340 = distinct !{!340, !71, !72}
!341 = distinct !{!341, !71, !72}
!342 = distinct !{!342, !60}
!343 = distinct !{!343, !71}
!344 = distinct !{!344, !60}
!345 = distinct !{!345, !60}
!346 = distinct !{!346, !60}
!347 = distinct !{!347, !60}
!348 = distinct !{!348, !71, !72}
!349 = distinct !{!349, !71, !72}
!350 = distinct !{!350, !72, !71}
!351 = distinct !{!351, !71, !72}
!352 = distinct !{!352, !71, !72}
!353 = distinct !{!353, !60}
!354 = distinct !{!354, !71}
!355 = distinct !{!355, !71, !72}
!356 = distinct !{!356, !71, !72}
!357 = distinct !{!357, !60}
!358 = distinct !{!358, !71}
!359 = distinct !{!359, !71, !72}
!360 = distinct !{!360, !71, !72}
!361 = distinct !{!361, !60}
!362 = distinct !{!362, !71}
!363 = distinct !{!363, !71, !72}
!364 = distinct !{!364, !71, !72}
!365 = distinct !{!365, !60}
!366 = distinct !{!366, !71}
!367 = distinct !{!367, !71, !72}
!368 = distinct !{!368, !71, !72}
!369 = distinct !{!369, !60}
!370 = distinct !{!370, !71}
!371 = distinct !{!371, !71, !72}
!372 = distinct !{!372, !71, !72}
!373 = distinct !{!373, !60}
!374 = distinct !{!374, !71}
!375 = distinct !{!375, !71, !72}
!376 = distinct !{!376, !71, !72}
!377 = distinct !{!377, !60}
!378 = distinct !{!378, !71}
!379 = distinct !{!379, !71, !72}
!380 = distinct !{!380, !71, !72}
!381 = distinct !{!381, !60}
!382 = distinct !{!382, !71}
!383 = !{!225, !6, i64 16}
!384 = !{!225, !6, i64 20}
!385 = !{!225, !29, i64 28}
!386 = !{!225, !6, i64 32}
!387 = !{!225, !13, i64 8}
!388 = distinct !{!388, !71, !72}
!389 = distinct !{!389, !72, !71}
