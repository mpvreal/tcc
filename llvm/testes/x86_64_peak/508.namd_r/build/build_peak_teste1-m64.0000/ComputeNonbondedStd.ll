; ModuleID = 'ComputeNonbondedStd.C'
source_filename = "ComputeNonbondedStd.C"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%struct.nonbonded = type { [2 x ptr], [2 x ptr], [2 x ptr], [2 x ptr], [2 x ptr], [2 x i32], %class.Vector, ptr, ptr, ptr, ptr, i32, i32, double, double, i32, i32, i32, i32 }
%class.Vector = type { double, double, double }
%class.Pairlists = type { ptr, i32, i32 }
%class.ResizeArray = type { ptr, ptr }
%class.ResizeArrayRaw = type <{ ptr, ptr, i32, i32, i32, float, i32, [4 x i8] }>
%class.ComputeNonbondedWorkArrays = type { %class.ResizeArray, %class.ResizeArray.0, %class.ResizeArray, %class.ResizeArray, %class.ResizeArray, %class.ResizeArray, %class.ResizeArray, %class.ResizeArray, %class.ResizeArray, %class.ResizeArray, %class.ResizeArray, %class.ResizeArray, %class.ResizeArray, %class.ResizeArray, %class.ResizeArray, %class.ResizeArray, %class.ResizeArray, %class.ResizeArray.1, %class.ResizeArray.1 }
%class.ResizeArray.0 = type { ptr, ptr }
%class.ResizeArray.1 = type { ptr, ptr }
%class.ResizeArrayRaw.23 = type <{ ptr, ptr, i32, i32, i32, float, i32, [4 x i8] }>
%struct.CompAtom = type { %class.Vector, float, i16, i8, i8 }
%struct.CompAtomExt = type { i32 }
%class.Molecule = type { ptr, ptr, ptr, ptr, i32, i32, ptr }
%class.LJTable = type <{ ptr, ptr, i32, [4 x i8] }>
%class.ExclusionCheck = type { i32, i32, ptr }
%"struct.LJTable::TableEntry" = type { double, double }
%class.ResizeArrayRaw.25 = type <{ ptr, ptr, i32, i32, i32, float, i32, [4 x i8] }>

$_Z22pairlist_from_pairlistddddPK8CompAtomPKtiPtdPd = comdat any

$_ZN14ResizeArrayRawI6VectorE6resizeEi = comdat any

@_ZN20ComputeNonbondedUtil8commOnlyE = external local_unnamed_addr global i32, align 4
@_ZN20ComputeNonbondedUtil12dielectric_1E = external local_unnamed_addr global double, align 8
@_ZN20ComputeNonbondedUtil7ljTableE = external local_unnamed_addr global ptr, align 8
@_ZN20ComputeNonbondedUtil3molE = external local_unnamed_addr global ptr, align 8
@_ZN20ComputeNonbondedUtil11table_shortE = external local_unnamed_addr global ptr, align 8
@_ZN20ComputeNonbondedUtil7scalingE = external local_unnamed_addr global double, align 8
@_ZN20ComputeNonbondedUtil7scale14E = external local_unnamed_addr global double, align 8
@_ZN20ComputeNonbondedUtil8r2_deltaE = external local_unnamed_addr global double, align 8
@_ZN20ComputeNonbondedUtil12r2_delta_expE = external local_unnamed_addr global i32, align 4
@_ZN20ComputeNonbondedUtil12fixedAtomsOnE = external local_unnamed_addr global i32, align 4
@.str = private unnamed_addr constant [27 x i8] c"pairlist i_upper mismatch!\00", align 1
@_ZN20ComputeNonbondedUtil7cutoff2E = external local_unnamed_addr global double, align 8
@_ZN20ComputeNonbondedUtil8r2_tableE = external local_unnamed_addr global ptr, align 8
@_ZN20ComputeNonbondedUtil10slow_tableE = external local_unnamed_addr global ptr, align 8
@_ZN20ComputeNonbondedUtil13table_noshortE = external local_unnamed_addr global ptr, align 8
@_ZN20ComputeNonbondedUtil17pairInteractionOnE = external local_unnamed_addr global i32, align 4
@_ZN20ComputeNonbondedUtil19pairInteractionSelfE = external local_unnamed_addr global i32, align 4

; Function Attrs: sspstrong uwtable
define dso_local void @_ZN20ComputeNonbondedUtil9calc_pairEP9nonbonded(ptr nocapture noundef readonly %0) local_unnamed_addr #0 align 2 {
  %2 = load i32, ptr @_ZN20ComputeNonbondedUtil8commOnlyE, align 4, !tbaa !5
  %3 = icmp eq i32 %2, 0
  br i1 %3, label %4, label %2114

4:                                                ; preds = %1
  %5 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 7
  %6 = load ptr, ptr %5, align 8, !tbaa !9
  %7 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 10
  %8 = load ptr, ptr %7, align 8, !tbaa !14
  %9 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 11
  %10 = load i32, ptr %9, align 8, !tbaa !15
  %11 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 12
  %12 = load i32, ptr %11, align 4, !tbaa !16
  %13 = getelementptr inbounds %class.Pairlists, ptr %8, i64 0, i32 1
  store i32 0, ptr %13, align 8, !tbaa !17
  %14 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 6
  %15 = load <2 x double>, ptr %14, align 8, !tbaa !19
  %16 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 6, i32 2
  %17 = load double, ptr %16, align 8, !tbaa !20
  %18 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 13
  %19 = load double, ptr %18, align 8, !tbaa !21
  %20 = fmul double %19, %19
  %21 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 14
  %22 = load double, ptr %21, align 8, !tbaa !22
  %23 = fmul double %22, %22
  %24 = load double, ptr @_ZN20ComputeNonbondedUtil12dielectric_1E, align 8, !tbaa !19
  %25 = load ptr, ptr @_ZN20ComputeNonbondedUtil7ljTableE, align 8, !tbaa !23
  %26 = load ptr, ptr @_ZN20ComputeNonbondedUtil3molE, align 8, !tbaa !23
  %27 = load ptr, ptr @_ZN20ComputeNonbondedUtil11table_shortE, align 8, !tbaa !23
  %28 = load double, ptr @_ZN20ComputeNonbondedUtil7scalingE, align 8, !tbaa !19
  %29 = load double, ptr @_ZN20ComputeNonbondedUtil7scale14E, align 8, !tbaa !19
  %30 = load double, ptr @_ZN20ComputeNonbondedUtil8r2_deltaE, align 8, !tbaa !19
  %31 = load i32, ptr @_ZN20ComputeNonbondedUtil12r2_delta_expE, align 4, !tbaa !5
  %32 = shl i32 %31, 6
  %33 = add i32 %32, -65472
  %34 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 5
  %35 = load i32, ptr %34, align 8, !tbaa !5
  %36 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 5, i64 1
  %37 = load i32, ptr %36, align 4, !tbaa !5
  %38 = load ptr, ptr %0, align 8, !tbaa !23
  %39 = getelementptr inbounds [2 x ptr], ptr %0, i64 0, i64 1
  %40 = load ptr, ptr %39, align 8, !tbaa !23
  %41 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 1
  %42 = load ptr, ptr %41, align 8, !tbaa !23
  %43 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 1, i64 1
  %44 = load ptr, ptr %43, align 8, !tbaa !23
  %45 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 9
  %46 = load ptr, ptr %45, align 8, !tbaa !24
  %47 = add nsw i32 %37, 5
  %48 = getelementptr inbounds %class.ResizeArray, ptr %46, i64 0, i32 1
  %49 = load ptr, ptr %48, align 8, !tbaa !25
  %50 = getelementptr inbounds %class.ResizeArrayRaw, ptr %49, i64 0, i32 2
  %51 = load i32, ptr %50, align 8, !tbaa !27
  %52 = icmp slt i32 %51, %47
  br i1 %52, label %53, label %91

53:                                               ; preds = %4
  %54 = getelementptr inbounds %class.ResizeArrayRaw, ptr %49, i64 0, i32 3
  %55 = load i32, ptr %54, align 4, !tbaa !30
  %56 = icmp slt i32 %55, %47
  br i1 %56, label %57, label %91

57:                                               ; preds = %53
  %58 = sitofp i32 %55 to float
  %59 = getelementptr inbounds %class.ResizeArrayRaw, ptr %49, i64 0, i32 5
  %60 = load float, ptr %59, align 4, !tbaa !31
  %61 = fmul float %60, %58
  %62 = fptosi float %61 to i32
  %63 = tail call i32 @llvm.smax.i32(i32 %62, i32 %47)
  %64 = sub nsw i32 %63, %55
  %65 = getelementptr inbounds %class.ResizeArrayRaw, ptr %49, i64 0, i32 6
  %66 = load i32, ptr %65, align 8, !tbaa !32
  %67 = icmp slt i32 %64, %66
  %68 = add nsw i32 %66, %55
  %69 = select i1 %67, i32 %68, i32 %63
  %70 = sext i32 %69 to i64
  %71 = shl nsw i64 %70, 1
  %72 = add nsw i64 %71, 31
  %73 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %72) #9
  %74 = getelementptr inbounds i8, ptr %73, i64 31
  %75 = ptrtoint ptr %74 to i64
  %76 = and i64 %75, 31
  %77 = sub nsw i64 0, %76
  %78 = getelementptr inbounds i8, ptr %74, i64 %77
  %79 = load ptr, ptr %49, align 8, !tbaa !33
  %80 = sext i32 %51 to i64
  %81 = shl nsw i64 %80, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %78, ptr align 1 %79, i64 %81, i1 false)
  %82 = icmp eq i32 %55, 0
  br i1 %82, label %88, label %83

83:                                               ; preds = %57
  %84 = getelementptr inbounds %class.ResizeArrayRaw, ptr %49, i64 0, i32 1
  %85 = load ptr, ptr %84, align 8, !tbaa !34
  %86 = icmp eq ptr %85, null
  br i1 %86, label %88, label %87

87:                                               ; preds = %83
  tail call void @_ZdaPv(ptr noundef nonnull %85) #10
  br label %88

88:                                               ; preds = %87, %83, %57
  %89 = getelementptr inbounds %class.ResizeArrayRaw, ptr %49, i64 0, i32 1
  store ptr %73, ptr %89, align 8, !tbaa !34
  store ptr %78, ptr %49, align 8, !tbaa !33
  store i32 %69, ptr %54, align 4, !tbaa !30
  %90 = load ptr, ptr %48, align 8, !tbaa !25
  br label %91

91:                                               ; preds = %4, %53, %88
  %92 = phi ptr [ %49, %4 ], [ %49, %53 ], [ %90, %88 ]
  store i32 %47, ptr %50, align 8, !tbaa !27
  %93 = load ptr, ptr %92, align 8, !tbaa !33
  %94 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %46, i64 0, i32 1, i32 1
  %95 = load ptr, ptr %94, align 8, !tbaa !35
  %96 = getelementptr inbounds %class.ResizeArrayRaw.23, ptr %95, i64 0, i32 2
  %97 = load i32, ptr %96, align 8, !tbaa !37
  %98 = icmp slt i32 %97, %47
  br i1 %98, label %99, label %137

99:                                               ; preds = %91
  %100 = getelementptr inbounds %class.ResizeArrayRaw.23, ptr %95, i64 0, i32 3
  %101 = load i32, ptr %100, align 4, !tbaa !39
  %102 = icmp slt i32 %101, %47
  br i1 %102, label %103, label %137

103:                                              ; preds = %99
  %104 = sitofp i32 %101 to float
  %105 = getelementptr inbounds %class.ResizeArrayRaw.23, ptr %95, i64 0, i32 5
  %106 = load float, ptr %105, align 4, !tbaa !40
  %107 = fmul float %106, %104
  %108 = fptosi float %107 to i32
  %109 = tail call i32 @llvm.smax.i32(i32 %108, i32 %47)
  %110 = sub nsw i32 %109, %101
  %111 = getelementptr inbounds %class.ResizeArrayRaw.23, ptr %95, i64 0, i32 6
  %112 = load i32, ptr %111, align 8, !tbaa !41
  %113 = icmp slt i32 %110, %112
  %114 = add nsw i32 %112, %101
  %115 = select i1 %113, i32 %114, i32 %109
  %116 = sext i32 %115 to i64
  %117 = shl nsw i64 %116, 3
  %118 = add nsw i64 %117, 31
  %119 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %118) #9
  %120 = getelementptr inbounds i8, ptr %119, i64 31
  %121 = ptrtoint ptr %120 to i64
  %122 = and i64 %121, 31
  %123 = sub nsw i64 0, %122
  %124 = getelementptr inbounds i8, ptr %120, i64 %123
  %125 = load ptr, ptr %95, align 8, !tbaa !42
  %126 = sext i32 %97 to i64
  %127 = shl nsw i64 %126, 3
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %124, ptr align 1 %125, i64 %127, i1 false)
  %128 = icmp eq i32 %101, 0
  br i1 %128, label %134, label %129

129:                                              ; preds = %103
  %130 = getelementptr inbounds %class.ResizeArrayRaw.23, ptr %95, i64 0, i32 1
  %131 = load ptr, ptr %130, align 8, !tbaa !43
  %132 = icmp eq ptr %131, null
  br i1 %132, label %134, label %133

133:                                              ; preds = %129
  tail call void @_ZdaPv(ptr noundef nonnull %131) #10
  br label %134

134:                                              ; preds = %133, %129, %103
  %135 = getelementptr inbounds %class.ResizeArrayRaw.23, ptr %95, i64 0, i32 1
  store ptr %119, ptr %135, align 8, !tbaa !43
  store ptr %124, ptr %95, align 8, !tbaa !42
  store i32 %115, ptr %100, align 4, !tbaa !39
  %136 = load ptr, ptr %94, align 8, !tbaa !35
  br label %137

137:                                              ; preds = %91, %99, %134
  %138 = phi ptr [ %95, %91 ], [ %95, %99 ], [ %136, %134 ]
  store i32 %47, ptr %96, align 8, !tbaa !37
  %139 = load ptr, ptr %138, align 8, !tbaa !42
  %140 = getelementptr inbounds i32, ptr %139, i64 1
  %141 = icmp eq i32 %10, 0
  %142 = icmp ne i32 %12, 0
  %143 = select i1 %141, i1 %142, i1 false
  %144 = select i1 %143, i32 0, i32 %47
  %145 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %46, i64 0, i32 2, i32 1
  %146 = load ptr, ptr %145, align 8, !tbaa !25
  %147 = getelementptr inbounds %class.ResizeArrayRaw, ptr %146, i64 0, i32 2
  %148 = load i32, ptr %147, align 8, !tbaa !27
  %149 = icmp slt i32 %148, %144
  br i1 %149, label %150, label %188

150:                                              ; preds = %137
  %151 = getelementptr inbounds %class.ResizeArrayRaw, ptr %146, i64 0, i32 3
  %152 = load i32, ptr %151, align 4, !tbaa !30
  %153 = icmp slt i32 %152, %144
  br i1 %153, label %154, label %188

154:                                              ; preds = %150
  %155 = sitofp i32 %152 to float
  %156 = getelementptr inbounds %class.ResizeArrayRaw, ptr %146, i64 0, i32 5
  %157 = load float, ptr %156, align 4, !tbaa !31
  %158 = fmul float %157, %155
  %159 = fptosi float %158 to i32
  %160 = tail call i32 @llvm.smax.i32(i32 %159, i32 %144)
  %161 = sub nsw i32 %160, %152
  %162 = getelementptr inbounds %class.ResizeArrayRaw, ptr %146, i64 0, i32 6
  %163 = load i32, ptr %162, align 8, !tbaa !32
  %164 = icmp slt i32 %161, %163
  %165 = add nsw i32 %163, %152
  %166 = select i1 %164, i32 %165, i32 %160
  %167 = sext i32 %166 to i64
  %168 = shl nsw i64 %167, 1
  %169 = add nsw i64 %168, 31
  %170 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %169) #9
  %171 = getelementptr inbounds i8, ptr %170, i64 31
  %172 = ptrtoint ptr %171 to i64
  %173 = and i64 %172, 31
  %174 = sub nsw i64 0, %173
  %175 = getelementptr inbounds i8, ptr %171, i64 %174
  %176 = load ptr, ptr %146, align 8, !tbaa !33
  %177 = sext i32 %148 to i64
  %178 = shl nsw i64 %177, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %175, ptr align 1 %176, i64 %178, i1 false)
  %179 = icmp eq i32 %152, 0
  br i1 %179, label %185, label %180

180:                                              ; preds = %154
  %181 = getelementptr inbounds %class.ResizeArrayRaw, ptr %146, i64 0, i32 1
  %182 = load ptr, ptr %181, align 8, !tbaa !34
  %183 = icmp eq ptr %182, null
  br i1 %183, label %185, label %184

184:                                              ; preds = %180
  tail call void @_ZdaPv(ptr noundef nonnull %182) #10
  br label %185

185:                                              ; preds = %184, %180, %154
  %186 = getelementptr inbounds %class.ResizeArrayRaw, ptr %146, i64 0, i32 1
  store ptr %170, ptr %186, align 8, !tbaa !34
  store ptr %175, ptr %146, align 8, !tbaa !33
  store i32 %166, ptr %151, align 4, !tbaa !30
  %187 = load ptr, ptr %145, align 8, !tbaa !25
  br label %188

188:                                              ; preds = %137, %150, %185
  %189 = phi ptr [ %146, %137 ], [ %146, %150 ], [ %187, %185 ]
  store i32 %144, ptr %147, align 8, !tbaa !27
  %190 = load ptr, ptr %189, align 8, !tbaa !33
  %191 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %46, i64 0, i32 3, i32 1
  %192 = load ptr, ptr %191, align 8, !tbaa !25
  %193 = getelementptr inbounds %class.ResizeArrayRaw, ptr %192, i64 0, i32 2
  %194 = load i32, ptr %193, align 8, !tbaa !27
  %195 = icmp slt i32 %194, %144
  br i1 %195, label %196, label %234

196:                                              ; preds = %188
  %197 = getelementptr inbounds %class.ResizeArrayRaw, ptr %192, i64 0, i32 3
  %198 = load i32, ptr %197, align 4, !tbaa !30
  %199 = icmp slt i32 %198, %144
  br i1 %199, label %200, label %234

200:                                              ; preds = %196
  %201 = sitofp i32 %198 to float
  %202 = getelementptr inbounds %class.ResizeArrayRaw, ptr %192, i64 0, i32 5
  %203 = load float, ptr %202, align 4, !tbaa !31
  %204 = fmul float %203, %201
  %205 = fptosi float %204 to i32
  %206 = tail call i32 @llvm.smax.i32(i32 %205, i32 %144)
  %207 = sub nsw i32 %206, %198
  %208 = getelementptr inbounds %class.ResizeArrayRaw, ptr %192, i64 0, i32 6
  %209 = load i32, ptr %208, align 8, !tbaa !32
  %210 = icmp slt i32 %207, %209
  %211 = add nsw i32 %209, %198
  %212 = select i1 %210, i32 %211, i32 %206
  %213 = sext i32 %212 to i64
  %214 = shl nsw i64 %213, 1
  %215 = add nsw i64 %214, 31
  %216 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %215) #9
  %217 = getelementptr inbounds i8, ptr %216, i64 31
  %218 = ptrtoint ptr %217 to i64
  %219 = and i64 %218, 31
  %220 = sub nsw i64 0, %219
  %221 = getelementptr inbounds i8, ptr %217, i64 %220
  %222 = load ptr, ptr %192, align 8, !tbaa !33
  %223 = sext i32 %194 to i64
  %224 = shl nsw i64 %223, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %221, ptr align 1 %222, i64 %224, i1 false)
  %225 = icmp eq i32 %198, 0
  br i1 %225, label %231, label %226

226:                                              ; preds = %200
  %227 = getelementptr inbounds %class.ResizeArrayRaw, ptr %192, i64 0, i32 1
  %228 = load ptr, ptr %227, align 8, !tbaa !34
  %229 = icmp eq ptr %228, null
  br i1 %229, label %231, label %230

230:                                              ; preds = %226
  tail call void @_ZdaPv(ptr noundef nonnull %228) #10
  br label %231

231:                                              ; preds = %230, %226, %200
  %232 = getelementptr inbounds %class.ResizeArrayRaw, ptr %192, i64 0, i32 1
  store ptr %216, ptr %232, align 8, !tbaa !34
  store ptr %221, ptr %192, align 8, !tbaa !33
  store i32 %212, ptr %197, align 4, !tbaa !30
  %233 = load ptr, ptr %191, align 8, !tbaa !25
  br label %234

234:                                              ; preds = %188, %196, %231
  %235 = phi ptr [ %192, %188 ], [ %192, %196 ], [ %233, %231 ]
  store i32 %144, ptr %193, align 8, !tbaa !27
  %236 = load ptr, ptr %235, align 8, !tbaa !33
  %237 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %46, i64 0, i32 4, i32 1
  %238 = load ptr, ptr %237, align 8, !tbaa !25
  %239 = getelementptr inbounds %class.ResizeArrayRaw, ptr %238, i64 0, i32 2
  %240 = load i32, ptr %239, align 8, !tbaa !27
  %241 = icmp slt i32 %240, %144
  br i1 %241, label %242, label %280

242:                                              ; preds = %234
  %243 = getelementptr inbounds %class.ResizeArrayRaw, ptr %238, i64 0, i32 3
  %244 = load i32, ptr %243, align 4, !tbaa !30
  %245 = icmp slt i32 %244, %144
  br i1 %245, label %246, label %280

246:                                              ; preds = %242
  %247 = sitofp i32 %244 to float
  %248 = getelementptr inbounds %class.ResizeArrayRaw, ptr %238, i64 0, i32 5
  %249 = load float, ptr %248, align 4, !tbaa !31
  %250 = fmul float %249, %247
  %251 = fptosi float %250 to i32
  %252 = tail call i32 @llvm.smax.i32(i32 %251, i32 %144)
  %253 = sub nsw i32 %252, %244
  %254 = getelementptr inbounds %class.ResizeArrayRaw, ptr %238, i64 0, i32 6
  %255 = load i32, ptr %254, align 8, !tbaa !32
  %256 = icmp slt i32 %253, %255
  %257 = add nsw i32 %255, %244
  %258 = select i1 %256, i32 %257, i32 %252
  %259 = sext i32 %258 to i64
  %260 = shl nsw i64 %259, 1
  %261 = add nsw i64 %260, 31
  %262 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %261) #9
  %263 = getelementptr inbounds i8, ptr %262, i64 31
  %264 = ptrtoint ptr %263 to i64
  %265 = and i64 %264, 31
  %266 = sub nsw i64 0, %265
  %267 = getelementptr inbounds i8, ptr %263, i64 %266
  %268 = load ptr, ptr %238, align 8, !tbaa !33
  %269 = sext i32 %240 to i64
  %270 = shl nsw i64 %269, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %267, ptr align 1 %268, i64 %270, i1 false)
  %271 = icmp eq i32 %244, 0
  br i1 %271, label %277, label %272

272:                                              ; preds = %246
  %273 = getelementptr inbounds %class.ResizeArrayRaw, ptr %238, i64 0, i32 1
  %274 = load ptr, ptr %273, align 8, !tbaa !34
  %275 = icmp eq ptr %274, null
  br i1 %275, label %277, label %276

276:                                              ; preds = %272
  tail call void @_ZdaPv(ptr noundef nonnull %274) #10
  br label %277

277:                                              ; preds = %276, %272, %246
  %278 = getelementptr inbounds %class.ResizeArrayRaw, ptr %238, i64 0, i32 1
  store ptr %262, ptr %278, align 8, !tbaa !34
  store ptr %267, ptr %238, align 8, !tbaa !33
  store i32 %258, ptr %243, align 4, !tbaa !30
  %279 = load ptr, ptr %237, align 8, !tbaa !25
  br label %280

280:                                              ; preds = %234, %242, %277
  %281 = phi ptr [ %238, %234 ], [ %238, %242 ], [ %279, %277 ]
  store i32 %144, ptr %239, align 8, !tbaa !27
  %282 = load ptr, ptr %281, align 8, !tbaa !33
  %283 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %46, i64 0, i32 5, i32 1
  %284 = load ptr, ptr %283, align 8, !tbaa !25
  %285 = getelementptr inbounds %class.ResizeArrayRaw, ptr %284, i64 0, i32 2
  %286 = load i32, ptr %285, align 8, !tbaa !27
  %287 = icmp slt i32 %286, %144
  br i1 %287, label %288, label %326

288:                                              ; preds = %280
  %289 = getelementptr inbounds %class.ResizeArrayRaw, ptr %284, i64 0, i32 3
  %290 = load i32, ptr %289, align 4, !tbaa !30
  %291 = icmp slt i32 %290, %144
  br i1 %291, label %292, label %326

292:                                              ; preds = %288
  %293 = sitofp i32 %290 to float
  %294 = getelementptr inbounds %class.ResizeArrayRaw, ptr %284, i64 0, i32 5
  %295 = load float, ptr %294, align 4, !tbaa !31
  %296 = fmul float %295, %293
  %297 = fptosi float %296 to i32
  %298 = tail call i32 @llvm.smax.i32(i32 %297, i32 %144)
  %299 = sub nsw i32 %298, %290
  %300 = getelementptr inbounds %class.ResizeArrayRaw, ptr %284, i64 0, i32 6
  %301 = load i32, ptr %300, align 8, !tbaa !32
  %302 = icmp slt i32 %299, %301
  %303 = add nsw i32 %301, %290
  %304 = select i1 %302, i32 %303, i32 %298
  %305 = sext i32 %304 to i64
  %306 = shl nsw i64 %305, 1
  %307 = add nsw i64 %306, 31
  %308 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %307) #9
  %309 = getelementptr inbounds i8, ptr %308, i64 31
  %310 = ptrtoint ptr %309 to i64
  %311 = and i64 %310, 31
  %312 = sub nsw i64 0, %311
  %313 = getelementptr inbounds i8, ptr %309, i64 %312
  %314 = load ptr, ptr %284, align 8, !tbaa !33
  %315 = sext i32 %286 to i64
  %316 = shl nsw i64 %315, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %313, ptr align 1 %314, i64 %316, i1 false)
  %317 = icmp eq i32 %290, 0
  br i1 %317, label %323, label %318

318:                                              ; preds = %292
  %319 = getelementptr inbounds %class.ResizeArrayRaw, ptr %284, i64 0, i32 1
  %320 = load ptr, ptr %319, align 8, !tbaa !34
  %321 = icmp eq ptr %320, null
  br i1 %321, label %323, label %322

322:                                              ; preds = %318
  tail call void @_ZdaPv(ptr noundef nonnull %320) #10
  br label %323

323:                                              ; preds = %322, %318, %292
  %324 = getelementptr inbounds %class.ResizeArrayRaw, ptr %284, i64 0, i32 1
  store ptr %308, ptr %324, align 8, !tbaa !34
  store ptr %313, ptr %284, align 8, !tbaa !33
  store i32 %304, ptr %289, align 4, !tbaa !30
  %325 = load ptr, ptr %283, align 8, !tbaa !25
  br label %326

326:                                              ; preds = %280, %288, %323
  %327 = phi ptr [ %284, %280 ], [ %284, %288 ], [ %325, %323 ]
  store i32 %144, ptr %285, align 8, !tbaa !27
  %328 = load ptr, ptr %327, align 8, !tbaa !33
  %329 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %46, i64 0, i32 6, i32 1
  %330 = load ptr, ptr %329, align 8, !tbaa !25
  %331 = getelementptr inbounds %class.ResizeArrayRaw, ptr %330, i64 0, i32 2
  %332 = load i32, ptr %331, align 8, !tbaa !27
  %333 = icmp slt i32 %332, %144
  br i1 %333, label %334, label %372

334:                                              ; preds = %326
  %335 = getelementptr inbounds %class.ResizeArrayRaw, ptr %330, i64 0, i32 3
  %336 = load i32, ptr %335, align 4, !tbaa !30
  %337 = icmp slt i32 %336, %144
  br i1 %337, label %338, label %372

338:                                              ; preds = %334
  %339 = sitofp i32 %336 to float
  %340 = getelementptr inbounds %class.ResizeArrayRaw, ptr %330, i64 0, i32 5
  %341 = load float, ptr %340, align 4, !tbaa !31
  %342 = fmul float %341, %339
  %343 = fptosi float %342 to i32
  %344 = tail call i32 @llvm.smax.i32(i32 %343, i32 %144)
  %345 = sub nsw i32 %344, %336
  %346 = getelementptr inbounds %class.ResizeArrayRaw, ptr %330, i64 0, i32 6
  %347 = load i32, ptr %346, align 8, !tbaa !32
  %348 = icmp slt i32 %345, %347
  %349 = add nsw i32 %347, %336
  %350 = select i1 %348, i32 %349, i32 %344
  %351 = sext i32 %350 to i64
  %352 = shl nsw i64 %351, 1
  %353 = add nsw i64 %352, 31
  %354 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %353) #9
  %355 = getelementptr inbounds i8, ptr %354, i64 31
  %356 = ptrtoint ptr %355 to i64
  %357 = and i64 %356, 31
  %358 = sub nsw i64 0, %357
  %359 = getelementptr inbounds i8, ptr %355, i64 %358
  %360 = load ptr, ptr %330, align 8, !tbaa !33
  %361 = sext i32 %332 to i64
  %362 = shl nsw i64 %361, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %359, ptr align 1 %360, i64 %362, i1 false)
  %363 = icmp eq i32 %336, 0
  br i1 %363, label %369, label %364

364:                                              ; preds = %338
  %365 = getelementptr inbounds %class.ResizeArrayRaw, ptr %330, i64 0, i32 1
  %366 = load ptr, ptr %365, align 8, !tbaa !34
  %367 = icmp eq ptr %366, null
  br i1 %367, label %369, label %368

368:                                              ; preds = %364
  tail call void @_ZdaPv(ptr noundef nonnull %366) #10
  br label %369

369:                                              ; preds = %368, %364, %338
  %370 = getelementptr inbounds %class.ResizeArrayRaw, ptr %330, i64 0, i32 1
  store ptr %354, ptr %370, align 8, !tbaa !34
  store ptr %359, ptr %330, align 8, !tbaa !33
  store i32 %350, ptr %335, align 4, !tbaa !30
  %371 = load ptr, ptr %329, align 8, !tbaa !25
  br label %372

372:                                              ; preds = %326, %334, %369
  %373 = phi ptr [ %330, %326 ], [ %330, %334 ], [ %371, %369 ]
  store i32 %144, ptr %331, align 8, !tbaa !27
  %374 = load ptr, ptr %373, align 8, !tbaa !33
  %375 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %46, i64 0, i32 15, i32 1
  %376 = load ptr, ptr %375, align 8, !tbaa !25
  %377 = getelementptr inbounds %class.ResizeArrayRaw, ptr %376, i64 0, i32 2
  %378 = load i32, ptr %377, align 8, !tbaa !27
  %379 = icmp slt i32 %378, %144
  br i1 %379, label %380, label %418

380:                                              ; preds = %372
  %381 = getelementptr inbounds %class.ResizeArrayRaw, ptr %376, i64 0, i32 3
  %382 = load i32, ptr %381, align 4, !tbaa !30
  %383 = icmp slt i32 %382, %144
  br i1 %383, label %384, label %418

384:                                              ; preds = %380
  %385 = sitofp i32 %382 to float
  %386 = getelementptr inbounds %class.ResizeArrayRaw, ptr %376, i64 0, i32 5
  %387 = load float, ptr %386, align 4, !tbaa !31
  %388 = fmul float %387, %385
  %389 = fptosi float %388 to i32
  %390 = tail call i32 @llvm.smax.i32(i32 %389, i32 %144)
  %391 = sub nsw i32 %390, %382
  %392 = getelementptr inbounds %class.ResizeArrayRaw, ptr %376, i64 0, i32 6
  %393 = load i32, ptr %392, align 8, !tbaa !32
  %394 = icmp slt i32 %391, %393
  %395 = add nsw i32 %393, %382
  %396 = select i1 %394, i32 %395, i32 %390
  %397 = sext i32 %396 to i64
  %398 = shl nsw i64 %397, 1
  %399 = add nsw i64 %398, 31
  %400 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %399) #9
  %401 = getelementptr inbounds i8, ptr %400, i64 31
  %402 = ptrtoint ptr %401 to i64
  %403 = and i64 %402, 31
  %404 = sub nsw i64 0, %403
  %405 = getelementptr inbounds i8, ptr %401, i64 %404
  %406 = load ptr, ptr %376, align 8, !tbaa !33
  %407 = sext i32 %378 to i64
  %408 = shl nsw i64 %407, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %405, ptr align 1 %406, i64 %408, i1 false)
  %409 = icmp eq i32 %382, 0
  br i1 %409, label %415, label %410

410:                                              ; preds = %384
  %411 = getelementptr inbounds %class.ResizeArrayRaw, ptr %376, i64 0, i32 1
  %412 = load ptr, ptr %411, align 8, !tbaa !34
  %413 = icmp eq ptr %412, null
  br i1 %413, label %415, label %414

414:                                              ; preds = %410
  tail call void @_ZdaPv(ptr noundef nonnull %412) #10
  br label %415

415:                                              ; preds = %414, %410, %384
  %416 = getelementptr inbounds %class.ResizeArrayRaw, ptr %376, i64 0, i32 1
  store ptr %400, ptr %416, align 8, !tbaa !34
  store ptr %405, ptr %376, align 8, !tbaa !33
  store i32 %396, ptr %381, align 4, !tbaa !30
  %417 = load ptr, ptr %375, align 8, !tbaa !25
  br label %418

418:                                              ; preds = %372, %380, %415
  %419 = phi ptr [ %376, %372 ], [ %376, %380 ], [ %417, %415 ]
  store i32 %144, ptr %377, align 8, !tbaa !27
  %420 = load ptr, ptr %419, align 8, !tbaa !33
  %421 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %46, i64 0, i32 16, i32 1
  %422 = load ptr, ptr %421, align 8, !tbaa !25
  %423 = getelementptr inbounds %class.ResizeArrayRaw, ptr %422, i64 0, i32 2
  %424 = load i32, ptr %423, align 8, !tbaa !27
  %425 = icmp slt i32 %424, %144
  br i1 %425, label %426, label %464

426:                                              ; preds = %418
  %427 = getelementptr inbounds %class.ResizeArrayRaw, ptr %422, i64 0, i32 3
  %428 = load i32, ptr %427, align 4, !tbaa !30
  %429 = icmp slt i32 %428, %144
  br i1 %429, label %430, label %464

430:                                              ; preds = %426
  %431 = sitofp i32 %428 to float
  %432 = getelementptr inbounds %class.ResizeArrayRaw, ptr %422, i64 0, i32 5
  %433 = load float, ptr %432, align 4, !tbaa !31
  %434 = fmul float %433, %431
  %435 = fptosi float %434 to i32
  %436 = tail call i32 @llvm.smax.i32(i32 %435, i32 %144)
  %437 = sub nsw i32 %436, %428
  %438 = getelementptr inbounds %class.ResizeArrayRaw, ptr %422, i64 0, i32 6
  %439 = load i32, ptr %438, align 8, !tbaa !32
  %440 = icmp slt i32 %437, %439
  %441 = add nsw i32 %439, %428
  %442 = select i1 %440, i32 %441, i32 %436
  %443 = sext i32 %442 to i64
  %444 = shl nsw i64 %443, 1
  %445 = add nsw i64 %444, 31
  %446 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %445) #9
  %447 = getelementptr inbounds i8, ptr %446, i64 31
  %448 = ptrtoint ptr %447 to i64
  %449 = and i64 %448, 31
  %450 = sub nsw i64 0, %449
  %451 = getelementptr inbounds i8, ptr %447, i64 %450
  %452 = load ptr, ptr %422, align 8, !tbaa !33
  %453 = sext i32 %424 to i64
  %454 = shl nsw i64 %453, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %451, ptr align 1 %452, i64 %454, i1 false)
  %455 = icmp eq i32 %428, 0
  br i1 %455, label %461, label %456

456:                                              ; preds = %430
  %457 = getelementptr inbounds %class.ResizeArrayRaw, ptr %422, i64 0, i32 1
  %458 = load ptr, ptr %457, align 8, !tbaa !34
  %459 = icmp eq ptr %458, null
  br i1 %459, label %461, label %460

460:                                              ; preds = %456
  tail call void @_ZdaPv(ptr noundef nonnull %458) #10
  br label %461

461:                                              ; preds = %460, %456, %430
  %462 = getelementptr inbounds %class.ResizeArrayRaw, ptr %422, i64 0, i32 1
  store ptr %446, ptr %462, align 8, !tbaa !34
  store ptr %451, ptr %422, align 8, !tbaa !33
  store i32 %442, ptr %427, align 4, !tbaa !30
  %463 = load ptr, ptr %421, align 8, !tbaa !25
  br label %464

464:                                              ; preds = %418, %426, %461
  %465 = phi ptr [ %422, %418 ], [ %422, %426 ], [ %463, %461 ]
  store i32 %144, ptr %423, align 8, !tbaa !27
  %466 = load ptr, ptr %465, align 8, !tbaa !33
  br i1 %143, label %599, label %467

467:                                              ; preds = %464
  %468 = icmp sgt i32 %37, 0
  br i1 %468, label %469, label %611

469:                                              ; preds = %467
  %470 = zext i32 %37 to i64
  %471 = and i64 %470, 1
  %472 = icmp eq i32 %37, 1
  br i1 %472, label %505, label %473

473:                                              ; preds = %469
  %474 = and i64 %470, 4294967294
  br label %475

475:                                              ; preds = %500, %473
  %476 = phi i64 [ 0, %473 ], [ %502, %500 ]
  %477 = phi i32 [ 0, %473 ], [ %501, %500 ]
  %478 = phi i64 [ 0, %473 ], [ %503, %500 ]
  %479 = getelementptr inbounds %struct.CompAtom, ptr %40, i64 %476, i32 4
  %480 = load i8, ptr %479, align 1
  %481 = and i8 %480, 7
  %482 = icmp eq i8 %481, 0
  br i1 %482, label %488, label %483

483:                                              ; preds = %475
  %484 = trunc i64 %476 to i16
  %485 = add nsw i32 %477, 1
  %486 = sext i32 %477 to i64
  %487 = getelementptr inbounds i16, ptr %190, i64 %486
  store i16 %484, ptr %487, align 2, !tbaa !44
  br label %488

488:                                              ; preds = %475, %483
  %489 = phi i32 [ %485, %483 ], [ %477, %475 ]
  %490 = or i64 %476, 1
  %491 = getelementptr inbounds %struct.CompAtom, ptr %40, i64 %490, i32 4
  %492 = load i8, ptr %491, align 1
  %493 = and i8 %492, 7
  %494 = icmp eq i8 %493, 0
  br i1 %494, label %500, label %495

495:                                              ; preds = %488
  %496 = trunc i64 %490 to i16
  %497 = add nsw i32 %489, 1
  %498 = sext i32 %489 to i64
  %499 = getelementptr inbounds i16, ptr %190, i64 %498
  store i16 %496, ptr %499, align 2, !tbaa !44
  br label %500

500:                                              ; preds = %495, %488
  %501 = phi i32 [ %497, %495 ], [ %489, %488 ]
  %502 = add nuw nsw i64 %476, 2
  %503 = add i64 %478, 2
  %504 = icmp eq i64 %503, %474
  br i1 %504, label %505, label %475

505:                                              ; preds = %500, %469
  %506 = phi i32 [ undef, %469 ], [ %501, %500 ]
  %507 = phi i64 [ 0, %469 ], [ %502, %500 ]
  %508 = phi i32 [ 0, %469 ], [ %501, %500 ]
  %509 = icmp eq i64 %471, 0
  br i1 %509, label %520, label %510

510:                                              ; preds = %505
  %511 = getelementptr inbounds %struct.CompAtom, ptr %40, i64 %507, i32 4
  %512 = load i8, ptr %511, align 1
  %513 = and i8 %512, 7
  %514 = icmp eq i8 %513, 0
  br i1 %514, label %520, label %515

515:                                              ; preds = %510
  %516 = trunc i64 %507 to i16
  %517 = add nsw i32 %508, 1
  %518 = sext i32 %508 to i64
  %519 = getelementptr inbounds i16, ptr %190, i64 %518
  store i16 %516, ptr %519, align 2, !tbaa !44
  br label %520

520:                                              ; preds = %510, %515, %505
  %521 = phi i32 [ %506, %505 ], [ %517, %515 ], [ %508, %510 ]
  %522 = icmp eq i32 %521, 0
  br i1 %522, label %530, label %523

523:                                              ; preds = %520
  %524 = add nsw i32 %521, -1
  %525 = sext i32 %524 to i64
  %526 = getelementptr inbounds i16, ptr %190, i64 %525
  %527 = load i16, ptr %526, align 2, !tbaa !44
  %528 = sext i32 %521 to i64
  %529 = getelementptr inbounds i16, ptr %190, i64 %528
  store i16 %527, ptr %529, align 2, !tbaa !44
  br label %530

530:                                              ; preds = %523, %520
  %531 = load i32, ptr @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4, !tbaa !5
  %532 = icmp ne i32 %531, 0
  %533 = icmp sgt i32 %521, 0
  %534 = and i1 %532, %533
  br i1 %534, label %535, label %611

535:                                              ; preds = %530
  %536 = zext i32 %521 to i64
  %537 = and i64 %536, 1
  %538 = icmp eq i32 %521, 1
  br i1 %538, label %573, label %539

539:                                              ; preds = %535
  %540 = and i64 %536, 4294967294
  br label %541

541:                                              ; preds = %568, %539
  %542 = phi i64 [ 0, %539 ], [ %570, %568 ]
  %543 = phi i32 [ 0, %539 ], [ %569, %568 ]
  %544 = phi i64 [ 0, %539 ], [ %571, %568 ]
  %545 = getelementptr inbounds i16, ptr %190, i64 %542
  %546 = load i16, ptr %545, align 2, !tbaa !44
  %547 = zext i16 %546 to i64
  %548 = getelementptr inbounds %struct.CompAtomExt, ptr %44, i64 %547
  %549 = load i32, ptr %548, align 4
  %550 = icmp sgt i32 %549, -1
  br i1 %550, label %551, label %555

551:                                              ; preds = %541
  %552 = add nsw i32 %543, 1
  %553 = sext i32 %543 to i64
  %554 = getelementptr inbounds i16, ptr %236, i64 %553
  store i16 %546, ptr %554, align 2, !tbaa !44
  br label %555

555:                                              ; preds = %541, %551
  %556 = phi i32 [ %543, %541 ], [ %552, %551 ]
  %557 = or i64 %542, 1
  %558 = getelementptr inbounds i16, ptr %190, i64 %557
  %559 = load i16, ptr %558, align 2, !tbaa !44
  %560 = zext i16 %559 to i64
  %561 = getelementptr inbounds %struct.CompAtomExt, ptr %44, i64 %560
  %562 = load i32, ptr %561, align 4
  %563 = icmp sgt i32 %562, -1
  br i1 %563, label %564, label %568

564:                                              ; preds = %555
  %565 = add nsw i32 %556, 1
  %566 = sext i32 %556 to i64
  %567 = getelementptr inbounds i16, ptr %236, i64 %566
  store i16 %559, ptr %567, align 2, !tbaa !44
  br label %568

568:                                              ; preds = %564, %555
  %569 = phi i32 [ %556, %555 ], [ %565, %564 ]
  %570 = add nuw nsw i64 %542, 2
  %571 = add i64 %544, 2
  %572 = icmp eq i64 %571, %540
  br i1 %572, label %573, label %541

573:                                              ; preds = %568, %535
  %574 = phi i32 [ undef, %535 ], [ %569, %568 ]
  %575 = phi i64 [ 0, %535 ], [ %570, %568 ]
  %576 = phi i32 [ 0, %535 ], [ %569, %568 ]
  %577 = icmp eq i64 %537, 0
  br i1 %577, label %589, label %578

578:                                              ; preds = %573
  %579 = getelementptr inbounds i16, ptr %190, i64 %575
  %580 = load i16, ptr %579, align 2, !tbaa !44
  %581 = zext i16 %580 to i64
  %582 = getelementptr inbounds %struct.CompAtomExt, ptr %44, i64 %581
  %583 = load i32, ptr %582, align 4
  %584 = icmp sgt i32 %583, -1
  br i1 %584, label %585, label %589

585:                                              ; preds = %578
  %586 = add nsw i32 %576, 1
  %587 = sext i32 %576 to i64
  %588 = getelementptr inbounds i16, ptr %236, i64 %587
  store i16 %580, ptr %588, align 2, !tbaa !44
  br label %589

589:                                              ; preds = %578, %585, %573
  %590 = phi i32 [ %574, %573 ], [ %576, %578 ], [ %586, %585 ]
  %591 = icmp eq i32 %590, 0
  br i1 %591, label %611, label %592

592:                                              ; preds = %589
  %593 = add nsw i32 %590, -1
  %594 = sext i32 %593 to i64
  %595 = getelementptr inbounds i16, ptr %236, i64 %594
  %596 = load i16, ptr %595, align 2, !tbaa !44
  %597 = sext i32 %590 to i64
  %598 = getelementptr inbounds i16, ptr %236, i64 %597
  store i16 %596, ptr %598, align 2, !tbaa !44
  br label %611

599:                                              ; preds = %464
  %600 = load ptr, ptr %8, align 8, !tbaa !46
  %601 = load i32, ptr %13, align 8, !tbaa !17
  %602 = add nsw i32 %601, 1
  store i32 %602, ptr %13, align 8, !tbaa !17
  %603 = sext i32 %601 to i64
  %604 = getelementptr inbounds i16, ptr %600, i64 %603
  %605 = load i16, ptr %604, align 2, !tbaa !44
  %606 = zext i16 %605 to i32
  %607 = icmp eq i32 %35, %606
  br i1 %607, label %628, label %608

608:                                              ; preds = %599
  tail call void @_Z8NAMD_bugPKc(ptr noundef nonnull @.str)
  %609 = load ptr, ptr %8, align 8, !tbaa !46
  %610 = load i32, ptr %13, align 8, !tbaa !17
  br label %628

611:                                              ; preds = %467, %592, %589, %530
  %612 = phi i32 [ %521, %592 ], [ %521, %589 ], [ %521, %530 ], [ 0, %467 ]
  %613 = phi i32 [ %590, %592 ], [ 0, %589 ], [ 0, %530 ], [ 0, %467 ]
  %614 = load i32, ptr %13, align 8, !tbaa !17
  %615 = trunc i32 %35 to i16
  %616 = load ptr, ptr %8, align 8, !tbaa !46
  %617 = sext i32 %614 to i64
  %618 = getelementptr inbounds i16, ptr %616, i64 %617
  store i16 %615, ptr %618, align 2, !tbaa !44
  %619 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 16
  %620 = load i32, ptr %619, align 4, !tbaa !47
  %621 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 18
  %622 = load i32, ptr %621, align 4, !tbaa !48
  %623 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 3, i64 1
  %624 = load ptr, ptr %623, align 8, !tbaa !23
  %625 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 3
  %626 = load ptr, ptr %625, align 8, !tbaa !23
  %627 = add nsw i32 %614, 2
  store i32 %627, ptr %13, align 8, !tbaa !17
  br label %644

628:                                              ; preds = %608, %599
  %629 = phi i32 [ %602, %599 ], [ %610, %608 ]
  %630 = phi ptr [ %600, %599 ], [ %609, %608 ]
  %631 = sext i32 %629 to i64
  %632 = getelementptr inbounds i16, ptr %630, i64 %631
  %633 = load i16, ptr %632, align 2, !tbaa !44
  %634 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 16
  %635 = load i32, ptr %634, align 4, !tbaa !47
  %636 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 18
  %637 = load i32, ptr %636, align 4, !tbaa !48
  %638 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 3, i64 1
  %639 = load ptr, ptr %638, align 8, !tbaa !23
  %640 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 3
  %641 = load ptr, ptr %640, align 8, !tbaa !23
  %642 = add nsw i32 %629, 1
  store i32 %642, ptr %13, align 8, !tbaa !17
  %643 = zext i16 %633 to i32
  br label %644

644:                                              ; preds = %628, %611
  %645 = phi i32 [ %635, %628 ], [ %620, %611 ]
  %646 = phi i32 [ %637, %628 ], [ %622, %611 ]
  %647 = phi ptr [ %639, %628 ], [ %624, %611 ]
  %648 = phi ptr [ %641, %628 ], [ %626, %611 ]
  %649 = phi i32 [ 0, %628 ], [ %613, %611 ]
  %650 = phi i32 [ 0, %628 ], [ %612, %611 ]
  %651 = phi i32 [ %643, %628 ], [ 0, %611 ]
  %652 = add nsw i32 %646, -1
  %653 = icmp slt i32 %651, %35
  br i1 %653, label %654, label %2079

654:                                              ; preds = %644
  %655 = getelementptr inbounds %class.Molecule, ptr %26, i64 0, i32 1
  %656 = getelementptr inbounds %class.Molecule, ptr %26, i64 0, i32 4
  %657 = getelementptr inbounds %class.Molecule, ptr %26, i64 0, i32 2
  %658 = getelementptr inbounds %class.Molecule, ptr %26, i64 0, i32 3
  %659 = ptrtoint ptr %420 to i64
  %660 = add nsw i32 %37, 10
  %661 = getelementptr inbounds %class.Pairlists, ptr %8, i64 0, i32 2
  %662 = getelementptr inbounds i16, ptr %420, i64 1
  %663 = ptrtoint ptr %466 to i64
  %664 = ptrtoint ptr %328 to i64
  %665 = ptrtoint ptr %374 to i64
  %666 = getelementptr inbounds %class.LJTable, ptr %25, i64 0, i32 1
  %667 = getelementptr inbounds %class.LJTable, ptr %25, i64 0, i32 2
  %668 = fneg double %28
  %669 = fadd double %29, -1.000000e+00
  %670 = fadd double %669, 1.000000e+00
  %671 = insertelement <2 x double> poison, double %23, i64 0
  %672 = shufflevector <2 x double> %671, <2 x double> poison, <2 x i32> zeroinitializer
  br label %673

673:                                              ; preds = %654, %2067
  %674 = phi i32 [ 0, %654 ], [ %2074, %2067 ]
  %675 = phi i32 [ %651, %654 ], [ %2073, %2067 ]
  %676 = phi ptr [ null, %654 ], [ %2072, %2067 ]
  %677 = phi ptr [ null, %654 ], [ %2071, %2067 ]
  %678 = phi ptr [ null, %654 ], [ %2070, %2067 ]
  %679 = phi i32 [ 0, %654 ], [ %2069, %2067 ]
  %680 = phi i32 [ %645, %654 ], [ %2068, %2067 ]
  %681 = phi <2 x double> [ zeroinitializer, %654 ], [ %2075, %2067 ]
  %682 = phi <2 x double> [ zeroinitializer, %654 ], [ %2076, %2067 ]
  %683 = phi <2 x double> [ zeroinitializer, %654 ], [ %2077, %2067 ]
  %684 = sext i32 %675 to i64
  %685 = getelementptr inbounds %struct.CompAtom, ptr %38, i64 %684
  %686 = getelementptr inbounds %struct.CompAtomExt, ptr %42, i64 %684
  br i1 %143, label %1752, label %687

687:                                              ; preds = %673
  %688 = getelementptr inbounds %struct.CompAtom, ptr %38, i64 %684, i32 4
  %689 = load i8, ptr %688, align 1
  %690 = lshr i8 %689, 3
  %691 = and i8 %690, 15
  %692 = zext i8 %691 to i32
  %693 = icmp eq i8 %691, 0
  br i1 %693, label %699, label %694

694:                                              ; preds = %687
  %695 = icmp eq i32 %680, 0
  br i1 %695, label %699, label %696

696:                                              ; preds = %694
  %697 = add nsw i32 %680, -1
  %698 = add nsw i32 %675, %692
  br label %2067

699:                                              ; preds = %694, %687
  %700 = phi i32 [ %652, %694 ], [ %680, %687 ]
  %701 = load <2 x double>, ptr %685, align 8, !tbaa !19
  %702 = fadd <2 x double> %15, %701
  %703 = getelementptr inbounds %class.Vector, ptr %685, i64 0, i32 2
  %704 = load double, ptr %703, align 8, !tbaa !49
  %705 = fadd double %17, %704
  %706 = load i32, ptr %686, align 4
  %707 = shl i32 %706, 2
  %708 = ashr exact i32 %707, 2
  %709 = load ptr, ptr %655, align 8, !tbaa !51
  %710 = sext i32 %708 to i64
  %711 = getelementptr inbounds %class.ExclusionCheck, ptr %709, i64 %710
  %712 = load i32, ptr %711, align 8, !tbaa !53
  %713 = getelementptr inbounds %class.ExclusionCheck, ptr %709, i64 %710, i32 1
  %714 = load i32, ptr %713, align 4, !tbaa !55
  %715 = getelementptr inbounds %class.ExclusionCheck, ptr %709, i64 %710, i32 2
  %716 = load ptr, ptr %715, align 8, !tbaa !56
  %717 = icmp eq ptr %716, null
  br i1 %717, label %722, label %718

718:                                              ; preds = %699
  %719 = sext i32 %712 to i64
  %720 = sub nsw i64 0, %719
  %721 = getelementptr inbounds i8, ptr %716, i64 %720
  br label %948

722:                                              ; preds = %699
  %723 = icmp eq ptr %676, null
  br i1 %723, label %811, label %724

724:                                              ; preds = %722
  %725 = load i32, ptr %677, align 4, !tbaa !5
  %726 = icmp slt i32 %725, 1
  br i1 %726, label %774, label %727

727:                                              ; preds = %724
  %728 = add nuw i32 %725, 1
  %729 = zext i32 %728 to i64
  %730 = add nsw i64 %729, -1
  %731 = add nsw i64 %729, -2
  %732 = and i64 %730, 3
  %733 = icmp ult i64 %731, 3
  br i1 %733, label %761, label %734

734:                                              ; preds = %727
  %735 = and i64 %730, -4
  br label %736

736:                                              ; preds = %736, %734
  %737 = phi i64 [ 1, %734 ], [ %758, %736 ]
  %738 = phi i64 [ 0, %734 ], [ %759, %736 ]
  %739 = getelementptr inbounds i32, ptr %677, i64 %737
  %740 = load i32, ptr %739, align 4, !tbaa !5
  %741 = sext i32 %740 to i64
  %742 = getelementptr inbounds i8, ptr %676, i64 %741
  store i8 0, ptr %742, align 1, !tbaa !57
  %743 = add nuw nsw i64 %737, 1
  %744 = getelementptr inbounds i32, ptr %677, i64 %743
  %745 = load i32, ptr %744, align 4, !tbaa !5
  %746 = sext i32 %745 to i64
  %747 = getelementptr inbounds i8, ptr %676, i64 %746
  store i8 0, ptr %747, align 1, !tbaa !57
  %748 = add nuw nsw i64 %737, 2
  %749 = getelementptr inbounds i32, ptr %677, i64 %748
  %750 = load i32, ptr %749, align 4, !tbaa !5
  %751 = sext i32 %750 to i64
  %752 = getelementptr inbounds i8, ptr %676, i64 %751
  store i8 0, ptr %752, align 1, !tbaa !57
  %753 = add nuw nsw i64 %737, 3
  %754 = getelementptr inbounds i32, ptr %677, i64 %753
  %755 = load i32, ptr %754, align 4, !tbaa !5
  %756 = sext i32 %755 to i64
  %757 = getelementptr inbounds i8, ptr %676, i64 %756
  store i8 0, ptr %757, align 1, !tbaa !57
  %758 = add nuw nsw i64 %737, 4
  %759 = add i64 %738, 4
  %760 = icmp eq i64 %759, %735
  br i1 %760, label %761, label %736

761:                                              ; preds = %736, %727
  %762 = phi i64 [ 1, %727 ], [ %758, %736 ]
  %763 = icmp eq i64 %732, 0
  br i1 %763, label %774, label %764

764:                                              ; preds = %761, %764
  %765 = phi i64 [ %771, %764 ], [ %762, %761 ]
  %766 = phi i64 [ %772, %764 ], [ 0, %761 ]
  %767 = getelementptr inbounds i32, ptr %677, i64 %765
  %768 = load i32, ptr %767, align 4, !tbaa !5
  %769 = sext i32 %768 to i64
  %770 = getelementptr inbounds i8, ptr %676, i64 %769
  store i8 0, ptr %770, align 1, !tbaa !57
  %771 = add nuw nsw i64 %765, 1
  %772 = add i64 %766, 1
  %773 = icmp eq i64 %772, %732
  br i1 %773, label %774, label %764, !llvm.loop !58

774:                                              ; preds = %761, %764, %724
  %775 = load i32, ptr %678, align 4, !tbaa !5
  %776 = icmp slt i32 %775, 1
  br i1 %776, label %831, label %777

777:                                              ; preds = %774
  %778 = add nuw i32 %775, 1
  %779 = zext i32 %778 to i64
  %780 = add nsw i64 %779, -1
  %781 = add nsw i64 %779, -2
  %782 = and i64 %780, 3
  %783 = icmp ult i64 %781, 3
  br i1 %783, label %818, label %784

784:                                              ; preds = %777
  %785 = and i64 %780, -4
  br label %786

786:                                              ; preds = %786, %784
  %787 = phi i64 [ 1, %784 ], [ %808, %786 ]
  %788 = phi i64 [ 0, %784 ], [ %809, %786 ]
  %789 = getelementptr inbounds i32, ptr %678, i64 %787
  %790 = load i32, ptr %789, align 4, !tbaa !5
  %791 = sext i32 %790 to i64
  %792 = getelementptr inbounds i8, ptr %676, i64 %791
  store i8 0, ptr %792, align 1, !tbaa !57
  %793 = add nuw nsw i64 %787, 1
  %794 = getelementptr inbounds i32, ptr %678, i64 %793
  %795 = load i32, ptr %794, align 4, !tbaa !5
  %796 = sext i32 %795 to i64
  %797 = getelementptr inbounds i8, ptr %676, i64 %796
  store i8 0, ptr %797, align 1, !tbaa !57
  %798 = add nuw nsw i64 %787, 2
  %799 = getelementptr inbounds i32, ptr %678, i64 %798
  %800 = load i32, ptr %799, align 4, !tbaa !5
  %801 = sext i32 %800 to i64
  %802 = getelementptr inbounds i8, ptr %676, i64 %801
  store i8 0, ptr %802, align 1, !tbaa !57
  %803 = add nuw nsw i64 %787, 3
  %804 = getelementptr inbounds i32, ptr %678, i64 %803
  %805 = load i32, ptr %804, align 4, !tbaa !5
  %806 = sext i32 %805 to i64
  %807 = getelementptr inbounds i8, ptr %676, i64 %806
  store i8 0, ptr %807, align 1, !tbaa !57
  %808 = add nuw nsw i64 %787, 4
  %809 = add i64 %788, 4
  %810 = icmp eq i64 %809, %785
  br i1 %810, label %818, label %786

811:                                              ; preds = %722
  %812 = load i32, ptr %656, align 8, !tbaa !60
  %813 = tail call i32 @llvm.smax.i32(i32 %812, i32 -1)
  %814 = sext i32 %813 to i64
  %815 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %814) #9
  %816 = load i32, ptr %656, align 8, !tbaa !60
  %817 = sext i32 %816 to i64
  tail call void @llvm.memset.p0.i64(ptr nonnull align 1 %815, i8 0, i64 %817, i1 false)
  br label %831

818:                                              ; preds = %786, %777
  %819 = phi i64 [ 1, %777 ], [ %808, %786 ]
  %820 = icmp eq i64 %782, 0
  br i1 %820, label %831, label %821

821:                                              ; preds = %818, %821
  %822 = phi i64 [ %828, %821 ], [ %819, %818 ]
  %823 = phi i64 [ %829, %821 ], [ 0, %818 ]
  %824 = getelementptr inbounds i32, ptr %678, i64 %822
  %825 = load i32, ptr %824, align 4, !tbaa !5
  %826 = sext i32 %825 to i64
  %827 = getelementptr inbounds i8, ptr %676, i64 %826
  store i8 0, ptr %827, align 1, !tbaa !57
  %828 = add nuw nsw i64 %822, 1
  %829 = add i64 %823, 1
  %830 = icmp eq i64 %829, %782
  br i1 %830, label %831, label %821, !llvm.loop !61

831:                                              ; preds = %818, %821, %774, %811
  %832 = phi ptr [ %815, %811 ], [ %676, %774 ], [ %676, %821 ], [ %676, %818 ]
  %833 = load i32, ptr %686, align 4
  %834 = shl i32 %833, 2
  %835 = ashr exact i32 %834, 2
  %836 = load ptr, ptr %657, align 8, !tbaa !62
  %837 = sext i32 %835 to i64
  %838 = getelementptr inbounds ptr, ptr %836, i64 %837
  %839 = load ptr, ptr %838, align 8, !tbaa !23
  %840 = load i32, ptr %839, align 4, !tbaa !5
  %841 = icmp slt i32 %840, 1
  br i1 %841, label %894, label %842

842:                                              ; preds = %831
  %843 = add nuw i32 %840, 1
  %844 = zext i32 %843 to i64
  %845 = add nsw i64 %844, -1
  %846 = add nsw i64 %844, -2
  %847 = and i64 %845, 3
  %848 = icmp ult i64 %846, 3
  br i1 %848, label %876, label %849

849:                                              ; preds = %842
  %850 = and i64 %845, -4
  br label %851

851:                                              ; preds = %851, %849
  %852 = phi i64 [ 1, %849 ], [ %873, %851 ]
  %853 = phi i64 [ 0, %849 ], [ %874, %851 ]
  %854 = getelementptr inbounds i32, ptr %839, i64 %852
  %855 = load i32, ptr %854, align 4, !tbaa !5
  %856 = sext i32 %855 to i64
  %857 = getelementptr inbounds i8, ptr %832, i64 %856
  store i8 1, ptr %857, align 1, !tbaa !57
  %858 = add nuw nsw i64 %852, 1
  %859 = getelementptr inbounds i32, ptr %839, i64 %858
  %860 = load i32, ptr %859, align 4, !tbaa !5
  %861 = sext i32 %860 to i64
  %862 = getelementptr inbounds i8, ptr %832, i64 %861
  store i8 1, ptr %862, align 1, !tbaa !57
  %863 = add nuw nsw i64 %852, 2
  %864 = getelementptr inbounds i32, ptr %839, i64 %863
  %865 = load i32, ptr %864, align 4, !tbaa !5
  %866 = sext i32 %865 to i64
  %867 = getelementptr inbounds i8, ptr %832, i64 %866
  store i8 1, ptr %867, align 1, !tbaa !57
  %868 = add nuw nsw i64 %852, 3
  %869 = getelementptr inbounds i32, ptr %839, i64 %868
  %870 = load i32, ptr %869, align 4, !tbaa !5
  %871 = sext i32 %870 to i64
  %872 = getelementptr inbounds i8, ptr %832, i64 %871
  store i8 1, ptr %872, align 1, !tbaa !57
  %873 = add nuw nsw i64 %852, 4
  %874 = add i64 %853, 4
  %875 = icmp eq i64 %874, %850
  br i1 %875, label %876, label %851

876:                                              ; preds = %851, %842
  %877 = phi i64 [ 1, %842 ], [ %873, %851 ]
  %878 = icmp eq i64 %847, 0
  br i1 %878, label %889, label %879

879:                                              ; preds = %876, %879
  %880 = phi i64 [ %886, %879 ], [ %877, %876 ]
  %881 = phi i64 [ %887, %879 ], [ 0, %876 ]
  %882 = getelementptr inbounds i32, ptr %839, i64 %880
  %883 = load i32, ptr %882, align 4, !tbaa !5
  %884 = sext i32 %883 to i64
  %885 = getelementptr inbounds i8, ptr %832, i64 %884
  store i8 1, ptr %885, align 1, !tbaa !57
  %886 = add nuw nsw i64 %880, 1
  %887 = add i64 %881, 1
  %888 = icmp eq i64 %887, %847
  br i1 %888, label %889, label %879, !llvm.loop !63

889:                                              ; preds = %879, %876
  %890 = load i32, ptr %686, align 4
  %891 = shl i32 %890, 2
  %892 = ashr exact i32 %891, 2
  %893 = sext i32 %892 to i64
  br label %894

894:                                              ; preds = %889, %831
  %895 = phi i64 [ %893, %889 ], [ %837, %831 ]
  %896 = load ptr, ptr %658, align 8, !tbaa !64
  %897 = getelementptr inbounds ptr, ptr %896, i64 %895
  %898 = load ptr, ptr %897, align 8, !tbaa !23
  %899 = load i32, ptr %898, align 4, !tbaa !5
  %900 = icmp slt i32 %899, 1
  br i1 %900, label %948, label %901

901:                                              ; preds = %894
  %902 = add nuw i32 %899, 1
  %903 = zext i32 %902 to i64
  %904 = add nsw i64 %903, -1
  %905 = add nsw i64 %903, -2
  %906 = and i64 %904, 3
  %907 = icmp ult i64 %905, 3
  br i1 %907, label %935, label %908

908:                                              ; preds = %901
  %909 = and i64 %904, -4
  br label %910

910:                                              ; preds = %910, %908
  %911 = phi i64 [ 1, %908 ], [ %932, %910 ]
  %912 = phi i64 [ 0, %908 ], [ %933, %910 ]
  %913 = getelementptr inbounds i32, ptr %898, i64 %911
  %914 = load i32, ptr %913, align 4, !tbaa !5
  %915 = sext i32 %914 to i64
  %916 = getelementptr inbounds i8, ptr %832, i64 %915
  store i8 2, ptr %916, align 1, !tbaa !57
  %917 = add nuw nsw i64 %911, 1
  %918 = getelementptr inbounds i32, ptr %898, i64 %917
  %919 = load i32, ptr %918, align 4, !tbaa !5
  %920 = sext i32 %919 to i64
  %921 = getelementptr inbounds i8, ptr %832, i64 %920
  store i8 2, ptr %921, align 1, !tbaa !57
  %922 = add nuw nsw i64 %911, 2
  %923 = getelementptr inbounds i32, ptr %898, i64 %922
  %924 = load i32, ptr %923, align 4, !tbaa !5
  %925 = sext i32 %924 to i64
  %926 = getelementptr inbounds i8, ptr %832, i64 %925
  store i8 2, ptr %926, align 1, !tbaa !57
  %927 = add nuw nsw i64 %911, 3
  %928 = getelementptr inbounds i32, ptr %898, i64 %927
  %929 = load i32, ptr %928, align 4, !tbaa !5
  %930 = sext i32 %929 to i64
  %931 = getelementptr inbounds i8, ptr %832, i64 %930
  store i8 2, ptr %931, align 1, !tbaa !57
  %932 = add nuw nsw i64 %911, 4
  %933 = add i64 %912, 4
  %934 = icmp eq i64 %933, %909
  br i1 %934, label %935, label %910

935:                                              ; preds = %910, %901
  %936 = phi i64 [ 1, %901 ], [ %932, %910 ]
  %937 = icmp eq i64 %906, 0
  br i1 %937, label %948, label %938

938:                                              ; preds = %935, %938
  %939 = phi i64 [ %945, %938 ], [ %936, %935 ]
  %940 = phi i64 [ %946, %938 ], [ 0, %935 ]
  %941 = getelementptr inbounds i32, ptr %898, i64 %939
  %942 = load i32, ptr %941, align 4, !tbaa !5
  %943 = sext i32 %942 to i64
  %944 = getelementptr inbounds i8, ptr %832, i64 %943
  store i8 2, ptr %944, align 1, !tbaa !57
  %945 = add nuw nsw i64 %939, 1
  %946 = add i64 %940, 1
  %947 = icmp eq i64 %946, %906
  br i1 %947, label %948, label %938, !llvm.loop !65

948:                                              ; preds = %935, %938, %894, %718
  %949 = phi ptr [ %721, %718 ], [ %832, %894 ], [ %832, %938 ], [ %832, %935 ]
  %950 = phi ptr [ %678, %718 ], [ %898, %894 ], [ %898, %938 ], [ %898, %935 ]
  %951 = phi ptr [ %677, %718 ], [ %839, %894 ], [ %839, %938 ], [ %839, %935 ]
  %952 = phi ptr [ %676, %718 ], [ %832, %894 ], [ %832, %938 ], [ %832, %935 ]
  %953 = load i8, ptr %688, align 1
  %954 = and i8 %953, 7
  %955 = icmp eq i8 %954, 0
  %956 = load i32, ptr @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4, !tbaa !5
  br i1 %955, label %1139, label %957

957:                                              ; preds = %948
  %958 = icmp eq i32 %956, 0
  br i1 %958, label %965, label %959

959:                                              ; preds = %957
  %960 = load i32, ptr %686, align 4
  %961 = freeze i32 %960
  %962 = icmp slt i32 %961, 0
  %963 = select i1 %962, ptr %236, ptr %190
  %964 = select i1 %962, i32 %649, i32 %650
  br label %965

965:                                              ; preds = %959, %957
  %966 = phi ptr [ %190, %957 ], [ %963, %959 ]
  %967 = phi i32 [ %650, %957 ], [ %964, %959 ]
  %968 = icmp sgt i32 %967, 0
  br i1 %968, label %969, label %1120

969:                                              ; preds = %965
  %970 = icmp ugt i32 %967, 6
  br i1 %970, label %971, label %1055

971:                                              ; preds = %969
  %972 = add nsw i32 %967, -2
  %973 = getelementptr inbounds i16, ptr %966, i64 1
  %974 = load i16, ptr %973, align 2, !tbaa !44
  %975 = zext i16 %974 to i64
  %976 = getelementptr inbounds %struct.CompAtom, ptr %40, i64 %975
  %977 = getelementptr inbounds %class.Vector, ptr %976, i64 0, i32 2
  %978 = load double, ptr %977, align 8, !tbaa !49
  %979 = load i16, ptr %966, align 2, !tbaa !44
  %980 = zext i16 %979 to i64
  %981 = getelementptr inbounds %struct.CompAtom, ptr %40, i64 %980
  %982 = getelementptr inbounds %class.Vector, ptr %981, i64 0, i32 2
  %983 = load double, ptr %982, align 8, !tbaa !49
  %984 = getelementptr inbounds %class.Vector, ptr %976, i64 0, i32 1
  %985 = load double, ptr %984, align 8, !tbaa !66
  %986 = getelementptr inbounds %class.Vector, ptr %981, i64 0, i32 1
  %987 = load double, ptr %986, align 8, !tbaa !66
  %988 = load double, ptr %976, align 8, !tbaa !67
  %989 = load double, ptr %981, align 8, !tbaa !67
  %990 = zext i32 %972 to i64
  %991 = insertelement <2 x double> poison, double %978, i64 0
  %992 = insertelement <2 x double> %991, double %983, i64 1
  %993 = insertelement <2 x double> poison, double %985, i64 0
  %994 = insertelement <2 x double> %993, double %987, i64 1
  %995 = insertelement <2 x double> poison, double %988, i64 0
  %996 = insertelement <2 x double> %995, double %989, i64 1
  %997 = insertelement <2 x double> poison, double %705, i64 0
  %998 = shufflevector <2 x double> %997, <2 x double> poison, <2 x i32> zeroinitializer
  %999 = shufflevector <2 x double> %702, <2 x double> poison, <2 x i32> <i32 1, i32 1>
  %1000 = shufflevector <2 x double> %702, <2 x double> poison, <2 x i32> zeroinitializer
  br label %1001

1001:                                             ; preds = %971, %1001
  %1002 = phi i64 [ 2, %971 ], [ %1045, %1001 ]
  %1003 = phi i32 [ 0, %971 ], [ %1044, %1001 ]
  %1004 = phi i16 [ %979, %971 ], [ %1011, %1001 ]
  %1005 = phi i16 [ %974, %971 ], [ %1014, %1001 ]
  %1006 = phi <2 x double> [ %992, %971 ], [ %1048, %1001 ]
  %1007 = phi <2 x double> [ %994, %971 ], [ %1050, %1001 ]
  %1008 = phi <2 x double> [ %996, %971 ], [ %1052, %1001 ]
  %1009 = fsub <2 x double> %998, %1006
  %1010 = getelementptr inbounds i16, ptr %966, i64 %1002
  %1011 = load i16, ptr %1010, align 2, !tbaa !44
  %1012 = or i64 %1002, 1
  %1013 = getelementptr inbounds i16, ptr %966, i64 %1012
  %1014 = load i16, ptr %1013, align 2, !tbaa !44
  %1015 = zext i16 %1011 to i64
  %1016 = getelementptr inbounds %struct.CompAtom, ptr %40, i64 %1015
  %1017 = load double, ptr %1016, align 8, !tbaa !67
  %1018 = zext i16 %1014 to i64
  %1019 = getelementptr inbounds %struct.CompAtom, ptr %40, i64 %1018
  %1020 = load double, ptr %1019, align 8, !tbaa !67
  %1021 = getelementptr inbounds %class.Vector, ptr %1016, i64 0, i32 1
  %1022 = load double, ptr %1021, align 8, !tbaa !66
  %1023 = getelementptr inbounds %class.Vector, ptr %1019, i64 0, i32 1
  %1024 = load double, ptr %1023, align 8, !tbaa !66
  %1025 = getelementptr inbounds %class.Vector, ptr %1016, i64 0, i32 2
  %1026 = load double, ptr %1025, align 8, !tbaa !49
  %1027 = getelementptr inbounds %class.Vector, ptr %1019, i64 0, i32 2
  %1028 = load double, ptr %1027, align 8, !tbaa !49
  %1029 = fsub <2 x double> %1000, %1008
  %1030 = fmul <2 x double> %1029, %1029
  %1031 = fsub <2 x double> %999, %1007
  %1032 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %1031, <2 x double> %1031, <2 x double> %1030)
  %1033 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %1009, <2 x double> %1009, <2 x double> %1032)
  %1034 = fcmp olt <2 x double> %1033, %672
  %1035 = zext i32 %1003 to i64
  %1036 = getelementptr inbounds i16, ptr %282, i64 %1035
  store i16 %1004, ptr %1036, align 2, !tbaa !44
  %1037 = extractelement <2 x i1> %1034, i64 1
  %1038 = zext i1 %1037 to i32
  %1039 = add nuw nsw i32 %1003, %1038
  %1040 = zext i32 %1039 to i64
  %1041 = getelementptr inbounds i16, ptr %282, i64 %1040
  store i16 %1005, ptr %1041, align 2, !tbaa !44
  %1042 = extractelement <2 x i1> %1034, i64 0
  %1043 = zext i1 %1042 to i32
  %1044 = add i32 %1039, %1043
  %1045 = add nuw nsw i64 %1002, 2
  %1046 = icmp ult i64 %1045, %990
  %1047 = insertelement <2 x double> poison, double %1028, i64 0
  %1048 = insertelement <2 x double> %1047, double %1026, i64 1
  %1049 = insertelement <2 x double> poison, double %1024, i64 0
  %1050 = insertelement <2 x double> %1049, double %1022, i64 1
  %1051 = insertelement <2 x double> poison, double %1020, i64 0
  %1052 = insertelement <2 x double> %1051, double %1017, i64 1
  br i1 %1046, label %1001, label %1053

1053:                                             ; preds = %1001
  %1054 = trunc i64 %1002 to i32
  br label %1055

1055:                                             ; preds = %1053, %969
  %1056 = phi i32 [ %1044, %1053 ], [ 0, %969 ]
  %1057 = phi i32 [ %1054, %1053 ], [ 0, %969 ]
  %1058 = icmp slt i32 %1057, %967
  br i1 %1058, label %1059, label %1064

1059:                                             ; preds = %1055
  %1060 = zext i32 %1057 to i64
  %1061 = zext i32 %967 to i64
  %1062 = extractelement <2 x double> %702, i64 0
  %1063 = extractelement <2 x double> %702, i64 1
  br label %1069

1064:                                             ; preds = %1092, %1055
  %1065 = phi i32 [ %1056, %1055 ], [ %1093, %1092 ]
  %1066 = icmp sgt i32 %1065, 0
  br i1 %1066, label %1067, label %1120

1067:                                             ; preds = %1064
  %1068 = zext i32 %1065 to i64
  br label %1096

1069:                                             ; preds = %1059, %1092
  %1070 = phi i64 [ %1060, %1059 ], [ %1094, %1092 ]
  %1071 = phi i32 [ %1056, %1059 ], [ %1093, %1092 ]
  %1072 = getelementptr inbounds i16, ptr %966, i64 %1070
  %1073 = load i16, ptr %1072, align 2, !tbaa !44
  %1074 = zext i16 %1073 to i64
  %1075 = getelementptr inbounds %struct.CompAtom, ptr %40, i64 %1074
  %1076 = load double, ptr %1075, align 8, !tbaa !67
  %1077 = getelementptr inbounds %class.Vector, ptr %1075, i64 0, i32 1
  %1078 = load double, ptr %1077, align 8, !tbaa !66
  %1079 = getelementptr inbounds %class.Vector, ptr %1075, i64 0, i32 2
  %1080 = load double, ptr %1079, align 8, !tbaa !49
  %1081 = fsub double %1062, %1076
  %1082 = fmul double %1081, %1081
  %1083 = fsub double %1063, %1078
  %1084 = tail call double @llvm.fmuladd.f64(double %1083, double %1083, double %1082)
  %1085 = fsub double %705, %1080
  %1086 = tail call double @llvm.fmuladd.f64(double %1085, double %1085, double %1084)
  %1087 = fcmp ugt double %1086, %23
  br i1 %1087, label %1092, label %1088

1088:                                             ; preds = %1069
  %1089 = add nsw i32 %1071, 1
  %1090 = sext i32 %1071 to i64
  %1091 = getelementptr inbounds i16, ptr %282, i64 %1090
  store i16 %1073, ptr %1091, align 2, !tbaa !44
  br label %1092

1092:                                             ; preds = %1088, %1069
  %1093 = phi i32 [ %1089, %1088 ], [ %1071, %1069 ]
  %1094 = add nuw nsw i64 %1070, 1
  %1095 = icmp eq i64 %1094, %1061
  br i1 %1095, label %1064, label %1069

1096:                                             ; preds = %1067, %1113
  %1097 = phi i64 [ 0, %1067 ], [ %1116, %1113 ]
  %1098 = phi ptr [ %420, %1067 ], [ %1115, %1113 ]
  %1099 = getelementptr inbounds i16, ptr %282, i64 %1097
  %1100 = load i16, ptr %1099, align 2, !tbaa !44
  %1101 = zext i16 %1100 to i64
  %1102 = getelementptr inbounds %struct.CompAtom, ptr %40, i64 %1101, i32 4
  %1103 = load i8, ptr %1102, align 1
  %1104 = and i8 %1103, 7
  store i16 %1100, ptr %1098, align 2, !tbaa !44
  %1105 = getelementptr inbounds i16, ptr %1098, i64 1
  %1106 = insertelement <2 x i16> poison, i16 %1100, i64 0
  %1107 = shufflevector <2 x i16> %1106, <2 x i16> poison, <2 x i32> zeroinitializer
  %1108 = add <2 x i16> %1107, <i16 1, i16 2>
  store <2 x i16> %1108, ptr %1105, align 2, !tbaa !44
  %1109 = icmp ult i8 %1104, 4
  br i1 %1109, label %1113, label %1110

1110:                                             ; preds = %1096
  %1111 = add <2 x i16> %1107, <i16 3, i16 4>
  %1112 = getelementptr inbounds i16, ptr %1098, i64 3
  store <2 x i16> %1111, ptr %1112, align 2, !tbaa !44
  br label %1113

1113:                                             ; preds = %1110, %1096
  %1114 = zext i8 %1104 to i64
  %1115 = getelementptr inbounds i16, ptr %1098, i64 %1114
  %1116 = add nuw nsw i64 %1097, 1
  %1117 = icmp eq i64 %1116, %1068
  br i1 %1117, label %1118, label %1096

1118:                                             ; preds = %1113
  %1119 = ptrtoint ptr %1115 to i64
  br label %1120

1120:                                             ; preds = %1118, %1064, %965
  %1121 = phi i64 [ %1119, %1118 ], [ %659, %1064 ], [ %659, %965 ]
  %1122 = sub i64 %1121, %659
  %1123 = lshr exact i64 %1122, 1
  %1124 = trunc i64 %1123 to i32
  %1125 = icmp eq i32 %1124, 0
  br i1 %1125, label %1126, label %1131

1126:                                             ; preds = %1120
  %1127 = load i8, ptr %688, align 1
  %1128 = and i8 %1127, 7
  %1129 = zext i8 %1128 to i32
  %1130 = add nsw i32 %675, %1129
  br label %2067

1131:                                             ; preds = %1120
  %1132 = shl i64 %1122, 31
  %1133 = add i64 %1132, -4294967296
  %1134 = ashr i64 %1133, 32
  %1135 = getelementptr inbounds i16, ptr %420, i64 %1134
  %1136 = load i16, ptr %1135, align 2, !tbaa !44
  %1137 = ashr i64 %1132, 32
  %1138 = getelementptr inbounds i16, ptr %420, i64 %1137
  store i16 %1136, ptr %1138, align 2, !tbaa !44
  br label %1139

1139:                                             ; preds = %1131, %948
  %1140 = phi i32 [ %1124, %1131 ], [ %679, %948 ]
  %1141 = icmp eq i32 %956, 0
  br i1 %1141, label %1146, label %1142

1142:                                             ; preds = %1139
  %1143 = load i32, ptr %686, align 4
  %1144 = and i32 %1143, 1073741824
  %1145 = icmp ne i32 %1144, 0
  br label %1146

1146:                                             ; preds = %1142, %1139
  %1147 = phi i1 [ false, %1139 ], [ %1145, %1142 ]
  %1148 = load i32, ptr %13, align 8, !tbaa !17
  %1149 = add nsw i32 %660, %1148
  %1150 = load i32, ptr %661, align 4, !tbaa !68
  %1151 = icmp sgt i32 %1150, %1149
  br i1 %1151, label %1167, label %1152

1152:                                             ; preds = %1146, %1152
  %1153 = phi i32 [ %1155, %1152 ], [ %1150, %1146 ]
  %1154 = ashr i32 %1153, 1
  %1155 = add nsw i32 %1154, %1153
  %1156 = icmp sgt i32 %1155, %1149
  br i1 %1156, label %1157, label %1152

1157:                                             ; preds = %1152
  %1158 = sext i32 %1155 to i64
  %1159 = icmp slt i32 %1155, 0
  %1160 = shl nsw i64 %1158, 1
  %1161 = select i1 %1159, i64 -1, i64 %1160
  %1162 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %1161) #9
  %1163 = load ptr, ptr %8, align 8, !tbaa !46
  %1164 = sext i32 %1148 to i64
  %1165 = shl nsw i64 %1164, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 2 %1162, ptr align 2 %1163, i64 %1165, i1 false)
  %1166 = icmp eq ptr %1163, null
  br i1 %1166, label %1171, label %1169

1167:                                             ; preds = %1146
  %1168 = load ptr, ptr %8, align 8, !tbaa !46
  br label %1173

1169:                                             ; preds = %1157
  tail call void @_ZdaPv(ptr noundef nonnull %1163) #10
  %1170 = load i32, ptr %13, align 8, !tbaa !17
  br label %1171

1171:                                             ; preds = %1169, %1157
  %1172 = phi i32 [ %1170, %1169 ], [ %1148, %1157 ]
  store ptr %1162, ptr %8, align 8, !tbaa !46
  store i32 %1155, ptr %661, align 4, !tbaa !68
  br label %1173

1173:                                             ; preds = %1167, %1171
  %1174 = phi i32 [ %1148, %1167 ], [ %1172, %1171 ]
  %1175 = phi ptr [ %1168, %1167 ], [ %1162, %1171 ]
  %1176 = ptrtoint ptr %1175 to i64
  %1177 = add nsw i32 %1174, 1
  %1178 = sext i32 %1177 to i64
  %1179 = getelementptr inbounds i16, ptr %1175, i64 %1178
  %1180 = icmp sgt i32 %1140, 0
  br i1 %1147, label %1181, label %1228

1181:                                             ; preds = %1173
  br i1 %1180, label %1182, label %1388

1182:                                             ; preds = %1181
  %1183 = zext i32 %1140 to i64
  %1184 = extractelement <2 x double> %702, i64 0
  %1185 = extractelement <2 x double> %702, i64 1
  br label %1186

1186:                                             ; preds = %1182, %1223
  %1187 = phi i64 [ 0, %1182 ], [ %1226, %1223 ]
  %1188 = phi ptr [ %466, %1182 ], [ %1225, %1223 ]
  %1189 = phi ptr [ %1179, %1182 ], [ %1224, %1223 ]
  %1190 = getelementptr inbounds i16, ptr %420, i64 %1187
  %1191 = load i16, ptr %1190, align 2, !tbaa !44
  %1192 = zext i16 %1191 to i64
  %1193 = getelementptr inbounds %struct.CompAtomExt, ptr %44, i64 %1192
  %1194 = load i32, ptr %1193, align 4
  %1195 = and i32 %1194, 1073741824
  %1196 = icmp eq i32 %1195, 0
  br i1 %1196, label %1197, label %1223

1197:                                             ; preds = %1186
  %1198 = getelementptr inbounds %struct.CompAtom, ptr %40, i64 %1192
  %1199 = getelementptr inbounds %class.Vector, ptr %1198, i64 0, i32 2
  %1200 = load double, ptr %1199, align 8, !tbaa !49
  %1201 = fsub double %705, %1200
  %1202 = getelementptr inbounds %class.Vector, ptr %1198, i64 0, i32 1
  %1203 = load double, ptr %1202, align 8, !tbaa !66
  %1204 = fsub double %1185, %1203
  %1205 = load double, ptr %1198, align 8, !tbaa !67
  %1206 = fsub double %1184, %1205
  %1207 = fmul double %1206, %1206
  %1208 = tail call double @llvm.fmuladd.f64(double %1204, double %1204, double %1207)
  %1209 = tail call double @llvm.fmuladd.f64(double %1201, double %1201, double %1208)
  %1210 = fcmp ugt double %1209, %20
  br i1 %1210, label %1223, label %1211

1211:                                             ; preds = %1197
  %1212 = shl i32 %1194, 2
  %1213 = ashr exact i32 %1212, 2
  %1214 = icmp slt i32 %1213, %712
  %1215 = icmp sgt i32 %1213, %714
  %1216 = select i1 %1214, i1 true, i1 %1215
  %1217 = select i1 %1216, ptr %1189, ptr %1188
  %1218 = zext i1 %1216 to i64
  %1219 = getelementptr inbounds i16, ptr %1189, i64 %1218
  %1220 = xor i1 %1216, true
  %1221 = zext i1 %1220 to i64
  %1222 = getelementptr inbounds i16, ptr %1188, i64 %1221
  store i16 %1191, ptr %1217, align 2, !tbaa !44
  br label %1223

1223:                                             ; preds = %1211, %1197, %1186
  %1224 = phi ptr [ %1189, %1186 ], [ %1189, %1197 ], [ %1219, %1211 ]
  %1225 = phi ptr [ %1188, %1186 ], [ %1188, %1197 ], [ %1222, %1211 ]
  %1226 = add nuw nsw i64 %1187, 1
  %1227 = icmp eq i64 %1226, %1183
  br i1 %1227, label %1388, label %1186

1228:                                             ; preds = %1173
  br i1 %1180, label %1229, label %1388

1229:                                             ; preds = %1228
  %1230 = icmp ugt i32 %1140, 6
  br i1 %1230, label %1231, label %1339

1231:                                             ; preds = %1229
  %1232 = add nsw i32 %1140, -2
  %1233 = load i16, ptr %420, align 2, !tbaa !44
  %1234 = zext i16 %1233 to i64
  %1235 = getelementptr inbounds %struct.CompAtomExt, ptr %44, i64 %1234
  %1236 = load i32, ptr %1235, align 4
  %1237 = load i16, ptr %662, align 2, !tbaa !44
  %1238 = zext i16 %1237 to i64
  %1239 = getelementptr inbounds %struct.CompAtom, ptr %40, i64 %1238
  %1240 = getelementptr inbounds %class.Vector, ptr %1239, i64 0, i32 2
  %1241 = load double, ptr %1240, align 8, !tbaa !49
  %1242 = getelementptr inbounds %struct.CompAtom, ptr %40, i64 %1234
  %1243 = getelementptr inbounds %class.Vector, ptr %1242, i64 0, i32 2
  %1244 = load double, ptr %1243, align 8, !tbaa !49
  %1245 = getelementptr inbounds %class.Vector, ptr %1239, i64 0, i32 1
  %1246 = load double, ptr %1245, align 8, !tbaa !66
  %1247 = getelementptr inbounds %class.Vector, ptr %1242, i64 0, i32 1
  %1248 = load double, ptr %1247, align 8, !tbaa !66
  %1249 = load double, ptr %1239, align 8, !tbaa !67
  %1250 = load double, ptr %1242, align 8, !tbaa !67
  %1251 = zext i32 %1232 to i64
  %1252 = extractelement <2 x double> %702, i64 0
  %1253 = extractelement <2 x double> %702, i64 1
  br label %1254

1254:                                             ; preds = %1231, %1332
  %1255 = phi i64 [ 2, %1231 ], [ %1335, %1332 ]
  %1256 = phi i64 [ %1238, %1231 ], [ %1292, %1332 ]
  %1257 = phi i32 [ %1236, %1231 ], [ %1320, %1332 ]
  %1258 = phi ptr [ %466, %1231 ], [ %1334, %1332 ]
  %1259 = phi ptr [ %1179, %1231 ], [ %1333, %1332 ]
  %1260 = phi i16 [ %1233, %1231 ], [ %1285, %1332 ]
  %1261 = phi i16 [ %1237, %1231 ], [ %1288, %1332 ]
  %1262 = phi double [ %1250, %1231 ], [ %1291, %1332 ]
  %1263 = phi double [ %1249, %1231 ], [ %1294, %1332 ]
  %1264 = phi double [ %1248, %1231 ], [ %1296, %1332 ]
  %1265 = phi double [ %1246, %1231 ], [ %1298, %1332 ]
  %1266 = phi double [ %1244, %1231 ], [ %1300, %1332 ]
  %1267 = phi double [ %1241, %1231 ], [ %1302, %1332 ]
  %1268 = getelementptr inbounds %struct.CompAtomExt, ptr %44, i64 %1256
  %1269 = load i32, ptr %1268, align 4
  %1270 = shl i32 %1269, 2
  %1271 = ashr exact i32 %1270, 2
  %1272 = fsub double %1252, %1262
  %1273 = fsub double %1252, %1263
  %1274 = fmul double %1272, %1272
  %1275 = fmul double %1273, %1273
  %1276 = fsub double %1253, %1264
  %1277 = fsub double %1253, %1265
  %1278 = tail call double @llvm.fmuladd.f64(double %1276, double %1276, double %1274)
  %1279 = tail call double @llvm.fmuladd.f64(double %1277, double %1277, double %1275)
  %1280 = fsub double %705, %1266
  %1281 = fsub double %705, %1267
  %1282 = tail call double @llvm.fmuladd.f64(double %1280, double %1280, double %1278)
  %1283 = tail call double @llvm.fmuladd.f64(double %1281, double %1281, double %1279)
  %1284 = getelementptr inbounds i16, ptr %420, i64 %1255
  %1285 = load i16, ptr %1284, align 2, !tbaa !44
  %1286 = or i64 %1255, 1
  %1287 = getelementptr inbounds i16, ptr %420, i64 %1286
  %1288 = load i16, ptr %1287, align 2, !tbaa !44
  %1289 = zext i16 %1285 to i64
  %1290 = getelementptr inbounds %struct.CompAtom, ptr %40, i64 %1289
  %1291 = load double, ptr %1290, align 8, !tbaa !67
  %1292 = zext i16 %1288 to i64
  %1293 = getelementptr inbounds %struct.CompAtom, ptr %40, i64 %1292
  %1294 = load double, ptr %1293, align 8, !tbaa !67
  %1295 = getelementptr inbounds %class.Vector, ptr %1290, i64 0, i32 1
  %1296 = load double, ptr %1295, align 8, !tbaa !66
  %1297 = getelementptr inbounds %class.Vector, ptr %1293, i64 0, i32 1
  %1298 = load double, ptr %1297, align 8, !tbaa !66
  %1299 = getelementptr inbounds %class.Vector, ptr %1290, i64 0, i32 2
  %1300 = load double, ptr %1299, align 8, !tbaa !49
  %1301 = getelementptr inbounds %class.Vector, ptr %1293, i64 0, i32 2
  %1302 = load double, ptr %1301, align 8, !tbaa !49
  %1303 = fcmp ugt double %1282, %20
  br i1 %1303, label %1316, label %1304

1304:                                             ; preds = %1254
  %1305 = shl i32 %1257, 2
  %1306 = ashr exact i32 %1305, 2
  %1307 = icmp slt i32 %1306, %712
  %1308 = icmp sgt i32 %1306, %714
  %1309 = select i1 %1307, i1 true, i1 %1308
  %1310 = select i1 %1309, ptr %1259, ptr %1258
  %1311 = zext i1 %1309 to i64
  %1312 = getelementptr inbounds i16, ptr %1259, i64 %1311
  %1313 = xor i1 %1309, true
  %1314 = zext i1 %1313 to i64
  %1315 = getelementptr inbounds i16, ptr %1258, i64 %1314
  store i16 %1260, ptr %1310, align 2, !tbaa !44
  br label %1316

1316:                                             ; preds = %1304, %1254
  %1317 = phi ptr [ %1259, %1254 ], [ %1312, %1304 ]
  %1318 = phi ptr [ %1258, %1254 ], [ %1315, %1304 ]
  %1319 = getelementptr inbounds %struct.CompAtomExt, ptr %44, i64 %1289
  %1320 = load i32, ptr %1319, align 4
  %1321 = fcmp ugt double %1283, %20
  br i1 %1321, label %1332, label %1322

1322:                                             ; preds = %1316
  %1323 = icmp slt i32 %1271, %712
  %1324 = icmp sgt i32 %1271, %714
  %1325 = select i1 %1323, i1 true, i1 %1324
  %1326 = select i1 %1325, ptr %1317, ptr %1318
  %1327 = zext i1 %1325 to i64
  %1328 = getelementptr inbounds i16, ptr %1317, i64 %1327
  %1329 = xor i1 %1325, true
  %1330 = zext i1 %1329 to i64
  %1331 = getelementptr inbounds i16, ptr %1318, i64 %1330
  store i16 %1261, ptr %1326, align 2, !tbaa !44
  br label %1332

1332:                                             ; preds = %1322, %1316
  %1333 = phi ptr [ %1317, %1316 ], [ %1328, %1322 ]
  %1334 = phi ptr [ %1318, %1316 ], [ %1331, %1322 ]
  %1335 = add nuw nsw i64 %1255, 2
  %1336 = icmp ult i64 %1335, %1251
  br i1 %1336, label %1254, label %1337

1337:                                             ; preds = %1332
  %1338 = trunc i64 %1255 to i32
  br label %1339

1339:                                             ; preds = %1337, %1229
  %1340 = phi i32 [ %1338, %1337 ], [ 0, %1229 ]
  %1341 = phi ptr [ %1333, %1337 ], [ %1179, %1229 ]
  %1342 = phi ptr [ %1334, %1337 ], [ %466, %1229 ]
  %1343 = icmp slt i32 %1340, %1140
  br i1 %1343, label %1344, label %1388

1344:                                             ; preds = %1339
  %1345 = zext i32 %1340 to i64
  %1346 = zext i32 %1140 to i64
  %1347 = extractelement <2 x double> %702, i64 0
  %1348 = extractelement <2 x double> %702, i64 1
  br label %1349

1349:                                             ; preds = %1344, %1383
  %1350 = phi i64 [ %1345, %1344 ], [ %1386, %1383 ]
  %1351 = phi ptr [ %1342, %1344 ], [ %1385, %1383 ]
  %1352 = phi ptr [ %1341, %1344 ], [ %1384, %1383 ]
  %1353 = getelementptr inbounds i16, ptr %420, i64 %1350
  %1354 = load i16, ptr %1353, align 2, !tbaa !44
  %1355 = zext i16 %1354 to i64
  %1356 = getelementptr inbounds %struct.CompAtom, ptr %40, i64 %1355
  %1357 = load double, ptr %1356, align 8, !tbaa !67
  %1358 = getelementptr inbounds %class.Vector, ptr %1356, i64 0, i32 1
  %1359 = load double, ptr %1358, align 8, !tbaa !66
  %1360 = getelementptr inbounds %class.Vector, ptr %1356, i64 0, i32 2
  %1361 = load double, ptr %1360, align 8, !tbaa !49
  %1362 = fsub double %1347, %1357
  %1363 = fmul double %1362, %1362
  %1364 = fsub double %1348, %1359
  %1365 = tail call double @llvm.fmuladd.f64(double %1364, double %1364, double %1363)
  %1366 = fsub double %705, %1361
  %1367 = tail call double @llvm.fmuladd.f64(double %1366, double %1366, double %1365)
  %1368 = fcmp ugt double %1367, %20
  br i1 %1368, label %1383, label %1369

1369:                                             ; preds = %1349
  %1370 = getelementptr inbounds %struct.CompAtomExt, ptr %44, i64 %1355
  %1371 = load i32, ptr %1370, align 4
  %1372 = shl i32 %1371, 2
  %1373 = ashr exact i32 %1372, 2
  %1374 = icmp slt i32 %1373, %712
  %1375 = icmp sgt i32 %1373, %714
  %1376 = select i1 %1374, i1 true, i1 %1375
  %1377 = select i1 %1376, ptr %1352, ptr %1351
  %1378 = zext i1 %1376 to i64
  %1379 = getelementptr inbounds i16, ptr %1352, i64 %1378
  %1380 = xor i1 %1376, true
  %1381 = zext i1 %1380 to i64
  %1382 = getelementptr inbounds i16, ptr %1351, i64 %1381
  store i16 %1354, ptr %1377, align 2, !tbaa !44
  br label %1383

1383:                                             ; preds = %1369, %1349
  %1384 = phi ptr [ %1352, %1349 ], [ %1379, %1369 ]
  %1385 = phi ptr [ %1351, %1349 ], [ %1382, %1369 ]
  %1386 = add nuw nsw i64 %1350, 1
  %1387 = icmp eq i64 %1386, %1346
  br i1 %1387, label %1388, label %1349

1388:                                             ; preds = %1383, %1223, %1339, %1181, %1228
  %1389 = phi ptr [ %1179, %1228 ], [ %1179, %1181 ], [ %1341, %1339 ], [ %1224, %1223 ], [ %1384, %1383 ]
  %1390 = phi ptr [ %466, %1228 ], [ %466, %1181 ], [ %1342, %1339 ], [ %1225, %1223 ], [ %1385, %1383 ]
  %1391 = icmp eq ptr %1389, %1179
  %1392 = icmp eq ptr %1390, %466
  %1393 = select i1 %1391, i1 %1392, i1 false
  br i1 %1393, label %1394, label %1396

1394:                                             ; preds = %1388
  %1395 = add nsw i32 %675, 1
  br label %2067

1396:                                             ; preds = %1388
  %1397 = trunc i32 %675 to i16
  %1398 = load i32, ptr %13, align 8, !tbaa !17
  %1399 = add nsw i32 %1398, -1
  %1400 = sext i32 %1399 to i64
  %1401 = getelementptr inbounds i16, ptr %1175, i64 %1400
  store i16 %1397, ptr %1401, align 2, !tbaa !44
  %1402 = ptrtoint ptr %1390 to i64
  %1403 = sub i64 %1402, %663
  %1404 = lshr exact i64 %1403, 1
  %1405 = trunc i64 %1404 to i32
  %1406 = icmp sgt i32 %1405, 0
  br i1 %1406, label %1407, label %1507

1407:                                             ; preds = %1396
  %1408 = and i64 %1404, 4294967295
  %1409 = and i64 %1404, 1
  %1410 = icmp eq i64 %1408, 1
  br i1 %1410, label %1475, label %1411

1411:                                             ; preds = %1407
  %1412 = sub nsw i64 %1408, %1409
  br label %1413

1413:                                             ; preds = %1468, %1411
  %1414 = phi i64 [ 0, %1411 ], [ %1472, %1468 ]
  %1415 = phi ptr [ %1389, %1411 ], [ %1471, %1468 ]
  %1416 = phi ptr [ %328, %1411 ], [ %1470, %1468 ]
  %1417 = phi ptr [ %374, %1411 ], [ %1469, %1468 ]
  %1418 = phi i64 [ 0, %1411 ], [ %1473, %1468 ]
  %1419 = getelementptr inbounds i16, ptr %466, i64 %1414
  %1420 = load i16, ptr %1419, align 2, !tbaa !44
  %1421 = zext i16 %1420 to i64
  %1422 = getelementptr inbounds %struct.CompAtomExt, ptr %44, i64 %1421
  %1423 = load i32, ptr %1422, align 4
  %1424 = shl i32 %1423, 2
  %1425 = ashr exact i32 %1424, 2
  %1426 = sext i32 %1425 to i64
  %1427 = getelementptr inbounds i8, ptr %949, i64 %1426
  %1428 = load i8, ptr %1427, align 1, !tbaa !57
  %1429 = sext i8 %1428 to i32
  switch i32 %1429, label %1441 [
    i32 0, label %1430
    i32 1, label %1432
    i32 2, label %1434
  ]

1430:                                             ; preds = %1413
  %1431 = getelementptr inbounds i16, ptr %1415, i64 1
  br label %1436

1432:                                             ; preds = %1413
  %1433 = getelementptr inbounds i16, ptr %1416, i64 1
  br label %1436

1434:                                             ; preds = %1413
  %1435 = getelementptr inbounds i16, ptr %1417, i64 1
  br label %1436

1436:                                             ; preds = %1430, %1432, %1434
  %1437 = phi ptr [ %1417, %1434 ], [ %1416, %1432 ], [ %1415, %1430 ]
  %1438 = phi ptr [ %1435, %1434 ], [ %1417, %1432 ], [ %1417, %1430 ]
  %1439 = phi ptr [ %1416, %1434 ], [ %1433, %1432 ], [ %1416, %1430 ]
  %1440 = phi ptr [ %1415, %1434 ], [ %1415, %1432 ], [ %1431, %1430 ]
  store i16 %1420, ptr %1437, align 2, !tbaa !44
  br label %1441

1441:                                             ; preds = %1436, %1413
  %1442 = phi ptr [ %1417, %1413 ], [ %1438, %1436 ]
  %1443 = phi ptr [ %1416, %1413 ], [ %1439, %1436 ]
  %1444 = phi ptr [ %1415, %1413 ], [ %1440, %1436 ]
  %1445 = or i64 %1414, 1
  %1446 = getelementptr inbounds i16, ptr %466, i64 %1445
  %1447 = load i16, ptr %1446, align 2, !tbaa !44
  %1448 = zext i16 %1447 to i64
  %1449 = getelementptr inbounds %struct.CompAtomExt, ptr %44, i64 %1448
  %1450 = load i32, ptr %1449, align 4
  %1451 = shl i32 %1450, 2
  %1452 = ashr exact i32 %1451, 2
  %1453 = sext i32 %1452 to i64
  %1454 = getelementptr inbounds i8, ptr %949, i64 %1453
  %1455 = load i8, ptr %1454, align 1, !tbaa !57
  %1456 = sext i8 %1455 to i32
  switch i32 %1456, label %1468 [
    i32 0, label %1461
    i32 1, label %1459
    i32 2, label %1457
  ]

1457:                                             ; preds = %1441
  %1458 = getelementptr inbounds i16, ptr %1442, i64 1
  br label %1463

1459:                                             ; preds = %1441
  %1460 = getelementptr inbounds i16, ptr %1443, i64 1
  br label %1463

1461:                                             ; preds = %1441
  %1462 = getelementptr inbounds i16, ptr %1444, i64 1
  br label %1463

1463:                                             ; preds = %1461, %1459, %1457
  %1464 = phi ptr [ %1442, %1457 ], [ %1443, %1459 ], [ %1444, %1461 ]
  %1465 = phi ptr [ %1458, %1457 ], [ %1442, %1459 ], [ %1442, %1461 ]
  %1466 = phi ptr [ %1443, %1457 ], [ %1460, %1459 ], [ %1443, %1461 ]
  %1467 = phi ptr [ %1444, %1457 ], [ %1444, %1459 ], [ %1462, %1461 ]
  store i16 %1447, ptr %1464, align 2, !tbaa !44
  br label %1468

1468:                                             ; preds = %1463, %1441
  %1469 = phi ptr [ %1442, %1441 ], [ %1465, %1463 ]
  %1470 = phi ptr [ %1443, %1441 ], [ %1466, %1463 ]
  %1471 = phi ptr [ %1444, %1441 ], [ %1467, %1463 ]
  %1472 = add nuw nsw i64 %1414, 2
  %1473 = add i64 %1418, 2
  %1474 = icmp eq i64 %1473, %1412
  br i1 %1474, label %1475, label %1413

1475:                                             ; preds = %1468, %1407
  %1476 = phi ptr [ undef, %1407 ], [ %1469, %1468 ]
  %1477 = phi ptr [ undef, %1407 ], [ %1470, %1468 ]
  %1478 = phi ptr [ undef, %1407 ], [ %1471, %1468 ]
  %1479 = phi i64 [ 0, %1407 ], [ %1472, %1468 ]
  %1480 = phi ptr [ %1389, %1407 ], [ %1471, %1468 ]
  %1481 = phi ptr [ %328, %1407 ], [ %1470, %1468 ]
  %1482 = phi ptr [ %374, %1407 ], [ %1469, %1468 ]
  %1483 = icmp eq i64 %1409, 0
  br i1 %1483, label %1507, label %1484

1484:                                             ; preds = %1475
  %1485 = getelementptr inbounds i16, ptr %466, i64 %1479
  %1486 = load i16, ptr %1485, align 2, !tbaa !44
  %1487 = zext i16 %1486 to i64
  %1488 = getelementptr inbounds %struct.CompAtomExt, ptr %44, i64 %1487
  %1489 = load i32, ptr %1488, align 4
  %1490 = shl i32 %1489, 2
  %1491 = ashr exact i32 %1490, 2
  %1492 = sext i32 %1491 to i64
  %1493 = getelementptr inbounds i8, ptr %949, i64 %1492
  %1494 = load i8, ptr %1493, align 1, !tbaa !57
  %1495 = sext i8 %1494 to i32
  switch i32 %1495, label %1507 [
    i32 0, label %1500
    i32 1, label %1498
    i32 2, label %1496
  ]

1496:                                             ; preds = %1484
  %1497 = getelementptr inbounds i16, ptr %1482, i64 1
  br label %1502

1498:                                             ; preds = %1484
  %1499 = getelementptr inbounds i16, ptr %1481, i64 1
  br label %1502

1500:                                             ; preds = %1484
  %1501 = getelementptr inbounds i16, ptr %1480, i64 1
  br label %1502

1502:                                             ; preds = %1500, %1498, %1496
  %1503 = phi ptr [ %1482, %1496 ], [ %1481, %1498 ], [ %1480, %1500 ]
  %1504 = phi ptr [ %1497, %1496 ], [ %1482, %1498 ], [ %1482, %1500 ]
  %1505 = phi ptr [ %1481, %1496 ], [ %1499, %1498 ], [ %1481, %1500 ]
  %1506 = phi ptr [ %1480, %1496 ], [ %1480, %1498 ], [ %1501, %1500 ]
  store i16 %1486, ptr %1503, align 2, !tbaa !44
  br label %1507

1507:                                             ; preds = %1475, %1502, %1484, %1396
  %1508 = phi ptr [ %374, %1396 ], [ %1476, %1475 ], [ %1482, %1484 ], [ %1504, %1502 ]
  %1509 = phi ptr [ %328, %1396 ], [ %1477, %1475 ], [ %1481, %1484 ], [ %1505, %1502 ]
  %1510 = phi ptr [ %1389, %1396 ], [ %1478, %1475 ], [ %1480, %1484 ], [ %1506, %1502 ]
  %1511 = ptrtoint ptr %1510 to i64
  %1512 = ptrtoint ptr %1179 to i64
  %1513 = sub i64 %1511, %1512
  %1514 = lshr exact i64 %1513, 1
  %1515 = trunc i64 %1514 to i32
  %1516 = icmp eq i32 %1515, 0
  %1517 = shl i64 %1513, 31
  br i1 %1516, label %1523, label %1518

1518:                                             ; preds = %1507
  %1519 = add i64 %1517, -4294967296
  %1520 = ashr i64 %1519, 32
  %1521 = getelementptr inbounds i16, ptr %1179, i64 %1520
  %1522 = load i16, ptr %1521, align 2, !tbaa !44
  br label %1523

1523:                                             ; preds = %1507, %1518
  %1524 = phi i16 [ %1522, %1518 ], [ -1, %1507 ]
  %1525 = ashr i64 %1517, 32
  %1526 = getelementptr inbounds i16, ptr %1179, i64 %1525
  store i16 %1524, ptr %1526, align 2, !tbaa !44
  %1527 = trunc i64 %1514 to i16
  %1528 = add i16 %1527, 1
  %1529 = sext i32 %1398 to i64
  %1530 = getelementptr inbounds i16, ptr %1175, i64 %1529
  store i16 %1528, ptr %1530, align 2, !tbaa !44
  %1531 = add i32 %1398, 2
  %1532 = add i32 %1531, %1515
  %1533 = ptrtoint ptr %1509 to i64
  %1534 = sub i64 %1533, %664
  %1535 = lshr exact i64 %1534, 1
  %1536 = trunc i64 %1535 to i32
  %1537 = add nsw i32 %1532, 1
  %1538 = sext i32 %1537 to i64
  %1539 = getelementptr i16, ptr %1175, i64 %1538
  %1540 = icmp sgt i32 %1536, 0
  br i1 %1540, label %1541, label %1631

1541:                                             ; preds = %1523
  %1542 = and i64 %1535, 4294967295
  %1543 = icmp ult i64 %1542, 8
  br i1 %1543, label %1587, label %1544

1544:                                             ; preds = %1541
  %1545 = shl nsw i64 %1538, 1
  %1546 = add i64 %1545, %1176
  %1547 = sub i64 %1546, %664
  %1548 = icmp ult i64 %1547, 128
  br i1 %1548, label %1587, label %1549

1549:                                             ; preds = %1544
  %1550 = icmp ult i64 %1542, 64
  br i1 %1550, label %1574, label %1551

1551:                                             ; preds = %1549
  %1552 = and i64 %1535, 63
  %1553 = sub nsw i64 %1542, %1552
  br label %1554

1554:                                             ; preds = %1554, %1551
  %1555 = phi i64 [ 0, %1551 ], [ %1568, %1554 ]
  %1556 = getelementptr inbounds i16, ptr %328, i64 %1555
  %1557 = load <16 x i16>, ptr %1556, align 2, !tbaa !44
  %1558 = getelementptr inbounds i16, ptr %1556, i64 16
  %1559 = load <16 x i16>, ptr %1558, align 2, !tbaa !44
  %1560 = getelementptr inbounds i16, ptr %1556, i64 32
  %1561 = load <16 x i16>, ptr %1560, align 2, !tbaa !44
  %1562 = getelementptr inbounds i16, ptr %1556, i64 48
  %1563 = load <16 x i16>, ptr %1562, align 2, !tbaa !44
  %1564 = getelementptr inbounds i16, ptr %1539, i64 %1555
  store <16 x i16> %1557, ptr %1564, align 2, !tbaa !44
  %1565 = getelementptr inbounds i16, ptr %1564, i64 16
  store <16 x i16> %1559, ptr %1565, align 2, !tbaa !44
  %1566 = getelementptr inbounds i16, ptr %1564, i64 32
  store <16 x i16> %1561, ptr %1566, align 2, !tbaa !44
  %1567 = getelementptr inbounds i16, ptr %1564, i64 48
  store <16 x i16> %1563, ptr %1567, align 2, !tbaa !44
  %1568 = add nuw i64 %1555, 64
  %1569 = icmp eq i64 %1568, %1553
  br i1 %1569, label %1570, label %1554, !llvm.loop !69

1570:                                             ; preds = %1554
  %1571 = icmp eq i64 %1552, 0
  br i1 %1571, label %1625, label %1572

1572:                                             ; preds = %1570
  %1573 = icmp ult i64 %1552, 8
  br i1 %1573, label %1587, label %1574

1574:                                             ; preds = %1549, %1572
  %1575 = phi i64 [ %1553, %1572 ], [ 0, %1549 ]
  %1576 = and i64 %1535, 7
  %1577 = sub nsw i64 %1542, %1576
  br label %1578

1578:                                             ; preds = %1578, %1574
  %1579 = phi i64 [ %1575, %1574 ], [ %1583, %1578 ]
  %1580 = getelementptr inbounds i16, ptr %328, i64 %1579
  %1581 = load <8 x i16>, ptr %1580, align 2, !tbaa !44
  %1582 = getelementptr inbounds i16, ptr %1539, i64 %1579
  store <8 x i16> %1581, ptr %1582, align 2, !tbaa !44
  %1583 = add nuw i64 %1579, 8
  %1584 = icmp eq i64 %1583, %1577
  br i1 %1584, label %1585, label %1578, !llvm.loop !72

1585:                                             ; preds = %1578
  %1586 = icmp eq i64 %1576, 0
  br i1 %1586, label %1625, label %1587

1587:                                             ; preds = %1544, %1541, %1572, %1585
  %1588 = phi i64 [ 0, %1541 ], [ 0, %1544 ], [ %1553, %1572 ], [ %1577, %1585 ]
  %1589 = sub i64 %1535, %1588
  %1590 = xor i64 %1588, -1
  %1591 = add nsw i64 %1542, %1590
  %1592 = and i64 %1589, 3
  %1593 = icmp eq i64 %1592, 0
  br i1 %1593, label %1603, label %1594

1594:                                             ; preds = %1587, %1594
  %1595 = phi i64 [ %1600, %1594 ], [ %1588, %1587 ]
  %1596 = phi i64 [ %1601, %1594 ], [ 0, %1587 ]
  %1597 = getelementptr inbounds i16, ptr %328, i64 %1595
  %1598 = load i16, ptr %1597, align 2, !tbaa !44
  %1599 = getelementptr inbounds i16, ptr %1539, i64 %1595
  store i16 %1598, ptr %1599, align 2, !tbaa !44
  %1600 = add nuw nsw i64 %1595, 1
  %1601 = add i64 %1596, 1
  %1602 = icmp eq i64 %1601, %1592
  br i1 %1602, label %1603, label %1594, !llvm.loop !73

1603:                                             ; preds = %1594, %1587
  %1604 = phi i64 [ %1588, %1587 ], [ %1600, %1594 ]
  %1605 = icmp ult i64 %1591, 3
  br i1 %1605, label %1625, label %1606

1606:                                             ; preds = %1603, %1606
  %1607 = phi i64 [ %1623, %1606 ], [ %1604, %1603 ]
  %1608 = getelementptr inbounds i16, ptr %328, i64 %1607
  %1609 = load i16, ptr %1608, align 2, !tbaa !44
  %1610 = getelementptr inbounds i16, ptr %1539, i64 %1607
  store i16 %1609, ptr %1610, align 2, !tbaa !44
  %1611 = add nuw nsw i64 %1607, 1
  %1612 = getelementptr inbounds i16, ptr %328, i64 %1611
  %1613 = load i16, ptr %1612, align 2, !tbaa !44
  %1614 = getelementptr inbounds i16, ptr %1539, i64 %1611
  store i16 %1613, ptr %1614, align 2, !tbaa !44
  %1615 = add nuw nsw i64 %1607, 2
  %1616 = getelementptr inbounds i16, ptr %328, i64 %1615
  %1617 = load i16, ptr %1616, align 2, !tbaa !44
  %1618 = getelementptr inbounds i16, ptr %1539, i64 %1615
  store i16 %1617, ptr %1618, align 2, !tbaa !44
  %1619 = add nuw nsw i64 %1607, 3
  %1620 = getelementptr inbounds i16, ptr %328, i64 %1619
  %1621 = load i16, ptr %1620, align 2, !tbaa !44
  %1622 = getelementptr inbounds i16, ptr %1539, i64 %1619
  store i16 %1621, ptr %1622, align 2, !tbaa !44
  %1623 = add nuw nsw i64 %1607, 4
  %1624 = icmp eq i64 %1623, %1542
  br i1 %1624, label %1625, label %1606, !llvm.loop !74

1625:                                             ; preds = %1603, %1606, %1570, %1585
  %1626 = shl i64 %1534, 31
  %1627 = add i64 %1626, -4294967296
  %1628 = ashr i64 %1627, 32
  %1629 = getelementptr inbounds i16, ptr %1539, i64 %1628
  %1630 = load i16, ptr %1629, align 2, !tbaa !44
  br label %1631

1631:                                             ; preds = %1523, %1625
  %1632 = phi i64 [ %1535, %1625 ], [ 0, %1523 ]
  %1633 = phi i16 [ %1630, %1625 ], [ -1, %1523 ]
  %1634 = and i64 %1632, 4294967295
  %1635 = getelementptr inbounds i16, ptr %1539, i64 %1634
  store i16 %1633, ptr %1635, align 2, !tbaa !44
  %1636 = trunc i64 %1535 to i16
  %1637 = add i16 %1636, 1
  %1638 = sext i32 %1532 to i64
  %1639 = getelementptr inbounds i16, ptr %1175, i64 %1638
  store i16 %1637, ptr %1639, align 2, !tbaa !44
  %1640 = add nsw i32 %1536, 2
  %1641 = add nsw i32 %1640, %1532
  %1642 = ptrtoint ptr %1508 to i64
  %1643 = sub i64 %1642, %665
  %1644 = lshr exact i64 %1643, 1
  %1645 = trunc i64 %1644 to i32
  %1646 = add nsw i32 %1641, 1
  %1647 = sext i32 %1646 to i64
  %1648 = getelementptr i16, ptr %1175, i64 %1647
  %1649 = icmp sgt i32 %1645, 0
  br i1 %1649, label %1650, label %1740

1650:                                             ; preds = %1631
  %1651 = and i64 %1644, 4294967295
  %1652 = icmp ult i64 %1651, 8
  br i1 %1652, label %1696, label %1653

1653:                                             ; preds = %1650
  %1654 = shl nsw i64 %1647, 1
  %1655 = add i64 %1654, %1176
  %1656 = sub i64 %1655, %665
  %1657 = icmp ult i64 %1656, 128
  br i1 %1657, label %1696, label %1658

1658:                                             ; preds = %1653
  %1659 = icmp ult i64 %1651, 64
  br i1 %1659, label %1683, label %1660

1660:                                             ; preds = %1658
  %1661 = and i64 %1644, 63
  %1662 = sub nsw i64 %1651, %1661
  br label %1663

1663:                                             ; preds = %1663, %1660
  %1664 = phi i64 [ 0, %1660 ], [ %1677, %1663 ]
  %1665 = getelementptr inbounds i16, ptr %374, i64 %1664
  %1666 = load <16 x i16>, ptr %1665, align 2, !tbaa !44
  %1667 = getelementptr inbounds i16, ptr %1665, i64 16
  %1668 = load <16 x i16>, ptr %1667, align 2, !tbaa !44
  %1669 = getelementptr inbounds i16, ptr %1665, i64 32
  %1670 = load <16 x i16>, ptr %1669, align 2, !tbaa !44
  %1671 = getelementptr inbounds i16, ptr %1665, i64 48
  %1672 = load <16 x i16>, ptr %1671, align 2, !tbaa !44
  %1673 = getelementptr inbounds i16, ptr %1648, i64 %1664
  store <16 x i16> %1666, ptr %1673, align 2, !tbaa !44
  %1674 = getelementptr inbounds i16, ptr %1673, i64 16
  store <16 x i16> %1668, ptr %1674, align 2, !tbaa !44
  %1675 = getelementptr inbounds i16, ptr %1673, i64 32
  store <16 x i16> %1670, ptr %1675, align 2, !tbaa !44
  %1676 = getelementptr inbounds i16, ptr %1673, i64 48
  store <16 x i16> %1672, ptr %1676, align 2, !tbaa !44
  %1677 = add nuw i64 %1664, 64
  %1678 = icmp eq i64 %1677, %1662
  br i1 %1678, label %1679, label %1663, !llvm.loop !75

1679:                                             ; preds = %1663
  %1680 = icmp eq i64 %1661, 0
  br i1 %1680, label %1734, label %1681

1681:                                             ; preds = %1679
  %1682 = icmp ult i64 %1661, 8
  br i1 %1682, label %1696, label %1683

1683:                                             ; preds = %1658, %1681
  %1684 = phi i64 [ %1662, %1681 ], [ 0, %1658 ]
  %1685 = and i64 %1644, 7
  %1686 = sub nsw i64 %1651, %1685
  br label %1687

1687:                                             ; preds = %1687, %1683
  %1688 = phi i64 [ %1684, %1683 ], [ %1692, %1687 ]
  %1689 = getelementptr inbounds i16, ptr %374, i64 %1688
  %1690 = load <8 x i16>, ptr %1689, align 2, !tbaa !44
  %1691 = getelementptr inbounds i16, ptr %1648, i64 %1688
  store <8 x i16> %1690, ptr %1691, align 2, !tbaa !44
  %1692 = add nuw i64 %1688, 8
  %1693 = icmp eq i64 %1692, %1686
  br i1 %1693, label %1694, label %1687, !llvm.loop !76

1694:                                             ; preds = %1687
  %1695 = icmp eq i64 %1685, 0
  br i1 %1695, label %1734, label %1696

1696:                                             ; preds = %1653, %1650, %1681, %1694
  %1697 = phi i64 [ 0, %1650 ], [ 0, %1653 ], [ %1662, %1681 ], [ %1686, %1694 ]
  %1698 = sub i64 %1644, %1697
  %1699 = xor i64 %1697, -1
  %1700 = add nsw i64 %1651, %1699
  %1701 = and i64 %1698, 3
  %1702 = icmp eq i64 %1701, 0
  br i1 %1702, label %1712, label %1703

1703:                                             ; preds = %1696, %1703
  %1704 = phi i64 [ %1709, %1703 ], [ %1697, %1696 ]
  %1705 = phi i64 [ %1710, %1703 ], [ 0, %1696 ]
  %1706 = getelementptr inbounds i16, ptr %374, i64 %1704
  %1707 = load i16, ptr %1706, align 2, !tbaa !44
  %1708 = getelementptr inbounds i16, ptr %1648, i64 %1704
  store i16 %1707, ptr %1708, align 2, !tbaa !44
  %1709 = add nuw nsw i64 %1704, 1
  %1710 = add i64 %1705, 1
  %1711 = icmp eq i64 %1710, %1701
  br i1 %1711, label %1712, label %1703, !llvm.loop !77

1712:                                             ; preds = %1703, %1696
  %1713 = phi i64 [ %1697, %1696 ], [ %1709, %1703 ]
  %1714 = icmp ult i64 %1700, 3
  br i1 %1714, label %1734, label %1715

1715:                                             ; preds = %1712, %1715
  %1716 = phi i64 [ %1732, %1715 ], [ %1713, %1712 ]
  %1717 = getelementptr inbounds i16, ptr %374, i64 %1716
  %1718 = load i16, ptr %1717, align 2, !tbaa !44
  %1719 = getelementptr inbounds i16, ptr %1648, i64 %1716
  store i16 %1718, ptr %1719, align 2, !tbaa !44
  %1720 = add nuw nsw i64 %1716, 1
  %1721 = getelementptr inbounds i16, ptr %374, i64 %1720
  %1722 = load i16, ptr %1721, align 2, !tbaa !44
  %1723 = getelementptr inbounds i16, ptr %1648, i64 %1720
  store i16 %1722, ptr %1723, align 2, !tbaa !44
  %1724 = add nuw nsw i64 %1716, 2
  %1725 = getelementptr inbounds i16, ptr %374, i64 %1724
  %1726 = load i16, ptr %1725, align 2, !tbaa !44
  %1727 = getelementptr inbounds i16, ptr %1648, i64 %1724
  store i16 %1726, ptr %1727, align 2, !tbaa !44
  %1728 = add nuw nsw i64 %1716, 3
  %1729 = getelementptr inbounds i16, ptr %374, i64 %1728
  %1730 = load i16, ptr %1729, align 2, !tbaa !44
  %1731 = getelementptr inbounds i16, ptr %1648, i64 %1728
  store i16 %1730, ptr %1731, align 2, !tbaa !44
  %1732 = add nuw nsw i64 %1716, 4
  %1733 = icmp eq i64 %1732, %1651
  br i1 %1733, label %1734, label %1715, !llvm.loop !78

1734:                                             ; preds = %1712, %1715, %1679, %1694
  %1735 = shl i64 %1643, 31
  %1736 = add i64 %1735, -4294967296
  %1737 = ashr i64 %1736, 32
  %1738 = getelementptr inbounds i16, ptr %1648, i64 %1737
  %1739 = load i16, ptr %1738, align 2, !tbaa !44
  br label %1740

1740:                                             ; preds = %1631, %1734
  %1741 = phi i64 [ %1644, %1734 ], [ 0, %1631 ]
  %1742 = phi i16 [ %1739, %1734 ], [ -1, %1631 ]
  %1743 = and i64 %1741, 4294967295
  %1744 = getelementptr inbounds i16, ptr %1648, i64 %1743
  store i16 %1742, ptr %1744, align 2, !tbaa !44
  %1745 = trunc i64 %1644 to i16
  %1746 = add i16 %1745, 1
  %1747 = sext i32 %1641 to i64
  %1748 = getelementptr inbounds i16, ptr %1175, i64 %1747
  store i16 %1746, ptr %1748, align 2, !tbaa !44
  %1749 = add i32 %1645, 3
  %1750 = add i32 %1749, %1641
  %1751 = select i1 %141, i32 1, i32 %1750
  store i32 %1751, ptr %13, align 8, !tbaa !17
  br label %1785

1752:                                             ; preds = %673
  %1753 = load <2 x double>, ptr %685, align 8, !tbaa !19
  %1754 = fadd <2 x double> %15, %1753
  %1755 = getelementptr inbounds %class.Vector, ptr %685, i64 0, i32 2
  %1756 = load double, ptr %1755, align 8, !tbaa !49
  %1757 = fadd double %17, %1756
  %1758 = load ptr, ptr %8, align 8, !tbaa !46
  %1759 = load i32, ptr %13, align 8, !tbaa !17
  %1760 = add i32 %1759, 1
  %1761 = sext i32 %1760 to i64
  %1762 = getelementptr inbounds i16, ptr %1758, i64 %1761
  %1763 = sext i32 %1759 to i64
  %1764 = getelementptr inbounds i16, ptr %1758, i64 %1763
  %1765 = load i16, ptr %1764, align 2, !tbaa !44
  %1766 = zext i16 %1765 to i32
  %1767 = add i32 %1760, %1766
  %1768 = add nsw i32 %1766, -1
  %1769 = sext i32 %1767 to i64
  %1770 = getelementptr inbounds i16, ptr %1758, i64 %1769
  %1771 = load i16, ptr %1770, align 2, !tbaa !44
  %1772 = zext i16 %1771 to i32
  %1773 = add nuw nsw i32 %1772, 1
  %1774 = add nsw i32 %1773, %1767
  %1775 = add nsw i32 %1772, -1
  %1776 = add i32 %1774, 1
  %1777 = sext i32 %1776 to i64
  %1778 = getelementptr inbounds i16, ptr %1758, i64 %1777
  %1779 = sext i32 %1774 to i64
  %1780 = getelementptr inbounds i16, ptr %1758, i64 %1779
  %1781 = load i16, ptr %1780, align 2, !tbaa !44
  %1782 = zext i16 %1781 to i32
  %1783 = add i32 %1776, %1782
  store i32 %1783, ptr %13, align 8, !tbaa !17
  %1784 = add nsw i32 %1782, -1
  br label %1785

1785:                                             ; preds = %1740, %1752
  %1786 = phi double [ %1757, %1752 ], [ %705, %1740 ]
  %1787 = phi i32 [ %680, %1752 ], [ %700, %1740 ]
  %1788 = phi ptr [ %1762, %1752 ], [ %1179, %1740 ]
  %1789 = phi i32 [ %1768, %1752 ], [ %1515, %1740 ]
  %1790 = phi i32 [ %1775, %1752 ], [ %1536, %1740 ]
  %1791 = phi ptr [ %1778, %1752 ], [ %1648, %1740 ]
  %1792 = phi i32 [ %1784, %1752 ], [ %1645, %1740 ]
  %1793 = phi i32 [ %679, %1752 ], [ %1140, %1740 ]
  %1794 = phi ptr [ %678, %1752 ], [ %950, %1740 ]
  %1795 = phi ptr [ %677, %1752 ], [ %951, %1740 ]
  %1796 = phi ptr [ %676, %1752 ], [ %952, %1740 ]
  %1797 = phi <2 x double> [ %1754, %1752 ], [ %702, %1740 ]
  %1798 = getelementptr inbounds %struct.CompAtom, ptr %38, i64 %684, i32 1
  %1799 = load float, ptr %1798, align 8, !tbaa !79
  %1800 = fpext float %1799 to double
  %1801 = fmul double %1800, 0x4074C104816F0069
  %1802 = fmul double %28, %1801
  %1803 = fmul double %24, %1802
  %1804 = getelementptr inbounds %struct.CompAtom, ptr %38, i64 %684, i32 2
  %1805 = load i16, ptr %1804, align 4, !tbaa !80
  %1806 = sext i16 %1805 to i32
  %1807 = load ptr, ptr %666, align 8, !tbaa !81
  %1808 = load i32, ptr %667, align 8, !tbaa !83
  %1809 = shl nsw i32 %1806, 1
  %1810 = mul i32 %1809, %1808
  %1811 = zext i32 %1810 to i64
  %1812 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %1807, i64 %1811
  %1813 = load double, ptr @_ZN20ComputeNonbondedUtil7cutoff2E, align 8, !tbaa !19
  %1814 = extractelement <2 x double> %1797, i64 0
  %1815 = extractelement <2 x double> %1797, i64 1
  %1816 = tail call noundef i32 @_Z22pairlist_from_pairlistddddPK8CompAtomPKtiPtdPd(double noundef %1813, double noundef %1814, double noundef %1815, double noundef %1786, ptr noundef %40, ptr noundef nonnull %1788, i32 noundef %1789, ptr noundef %93, double noundef %30, ptr noundef %139)
  %1817 = icmp sgt i32 %1816, 0
  br i1 %1817, label %1818, label %1925

1818:                                             ; preds = %1785
  %1819 = load ptr, ptr @_ZN20ComputeNonbondedUtil8r2_tableE, align 8, !tbaa !23
  %1820 = zext i32 %1816 to i64
  br label %1821

1821:                                             ; preds = %1818, %1821
  %1822 = phi i64 [ 0, %1818 ], [ %1923, %1821 ]
  %1823 = phi double [ 0.000000e+00, %1818 ], [ %1919, %1821 ]
  %1824 = phi <2 x double> [ %681, %1818 ], [ %1911, %1821 ]
  %1825 = phi <2 x double> [ %682, %1818 ], [ %1904, %1821 ]
  %1826 = phi <2 x double> [ %683, %1818 ], [ %1917, %1821 ]
  %1827 = phi <2 x double> [ zeroinitializer, %1818 ], [ %1913, %1821 ]
  %1828 = shl nuw nsw i64 %1822, 1
  %1829 = getelementptr inbounds i32, ptr %140, i64 %1828
  %1830 = load i32, ptr %1829, align 4, !tbaa !5
  %1831 = ashr i32 %1830, 14
  %1832 = add nsw i32 %1831, %33
  %1833 = getelementptr inbounds i16, ptr %93, i64 %1822
  %1834 = load i16, ptr %1833, align 2, !tbaa !44
  %1835 = zext i16 %1834 to i64
  %1836 = getelementptr inbounds %struct.CompAtom, ptr %40, i64 %1835
  %1837 = getelementptr inbounds double, ptr %139, i64 %1822
  %1838 = load double, ptr %1837, align 8, !tbaa !19
  %1839 = sext i32 %1832 to i64
  %1840 = getelementptr inbounds double, ptr %1819, i64 %1839
  %1841 = load double, ptr %1840, align 8, !tbaa !19
  %1842 = fsub double %1838, %1841
  %1843 = shl nsw i32 %1832, 4
  %1844 = sext i32 %1843 to i64
  %1845 = getelementptr inbounds double, ptr %27, i64 %1844
  %1846 = getelementptr inbounds %struct.CompAtom, ptr %40, i64 %1835, i32 2
  %1847 = load i16, ptr %1846, align 4, !tbaa !80
  %1848 = sext i16 %1847 to i32
  %1849 = shl nsw i32 %1848, 1
  %1850 = sext i32 %1849 to i64
  %1851 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %1812, i64 %1850
  %1852 = getelementptr inbounds %class.Vector, ptr %647, i64 %1835
  %1853 = getelementptr inbounds %struct.CompAtom, ptr %40, i64 %1835, i32 1
  %1854 = load float, ptr %1853, align 8, !tbaa !79
  %1855 = fpext float %1854 to double
  %1856 = fmul double %1803, %1855
  %1857 = load <2 x double>, ptr %1836, align 8, !tbaa !19
  %1858 = fsub <2 x double> %1797, %1857
  %1859 = getelementptr inbounds %class.Vector, ptr %1836, i64 0, i32 2
  %1860 = load double, ptr %1859, align 8, !tbaa !49
  %1861 = fsub double %1786, %1860
  %1862 = load double, ptr %1851, align 8, !tbaa !84
  %1863 = fmul double %28, %1862
  %1864 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %1812, i64 %1850, i32 1
  %1865 = load double, ptr %1864, align 8, !tbaa !86
  %1866 = load double, ptr %1845, align 8, !tbaa !19
  %1867 = getelementptr inbounds double, ptr %1845, i64 2
  %1868 = load double, ptr %1867, align 8, !tbaa !19
  %1869 = fmul double %1865, %668
  %1870 = fmul double %1869, %1868
  %1871 = tail call double @llvm.fmuladd.f64(double %1863, double %1866, double %1870)
  %1872 = getelementptr inbounds double, ptr %1845, i64 1
  %1873 = load double, ptr %1872, align 8, !tbaa !19
  %1874 = getelementptr inbounds double, ptr %1845, i64 3
  %1875 = load double, ptr %1874, align 8, !tbaa !19
  %1876 = fmul double %1869, %1875
  %1877 = tail call double @llvm.fmuladd.f64(double %1863, double %1873, double %1876)
  %1878 = getelementptr inbounds double, ptr %1845, i64 4
  %1879 = load double, ptr %1878, align 8, !tbaa !19
  %1880 = getelementptr inbounds double, ptr %1845, i64 6
  %1881 = load double, ptr %1880, align 8, !tbaa !19
  %1882 = fmul double %1869, %1881
  %1883 = tail call double @llvm.fmuladd.f64(double %1863, double %1879, double %1882)
  %1884 = getelementptr inbounds double, ptr %1845, i64 8
  %1885 = load double, ptr %1884, align 8, !tbaa !19
  %1886 = fmul double %1856, %1885
  %1887 = getelementptr inbounds double, ptr %1845, i64 9
  %1888 = load double, ptr %1887, align 8, !tbaa !19
  %1889 = fmul double %1856, %1888
  %1890 = getelementptr inbounds double, ptr %1845, i64 10
  %1891 = load double, ptr %1890, align 8, !tbaa !19
  %1892 = fmul double %1856, %1891
  %1893 = fadd double %1871, %1886
  %1894 = fadd double %1877, %1889
  %1895 = fadd double %1883, %1892
  %1896 = tail call double @llvm.fmuladd.f64(double %1842, double %1893, double %1894)
  %1897 = tail call double @llvm.fmuladd.f64(double %1896, double %1842, double %1895)
  %1898 = extractelement <2 x double> %1858, i64 1
  %1899 = fmul double %1898, %1897
  %1900 = insertelement <2 x double> poison, double %1899, i64 0
  %1901 = shufflevector <2 x double> %1900, <2 x double> poison, <2 x i32> zeroinitializer
  %1902 = shufflevector <2 x double> %1858, <2 x double> poison, <2 x i32> <i32 1, i32 0>
  %1903 = insertelement <2 x double> %1902, double %1861, i64 1
  %1904 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %1901, <2 x double> %1903, <2 x double> %1825)
  %1905 = insertelement <2 x double> %1902, double %1861, i64 0
  %1906 = insertelement <2 x double> poison, double %1897, i64 0
  %1907 = shufflevector <2 x double> %1906, <2 x double> poison, <2 x i32> zeroinitializer
  %1908 = fmul <2 x double> %1905, %1907
  %1909 = shufflevector <2 x double> %1908, <2 x double> poison, <2 x i32> <i32 1, i32 poison>
  %1910 = shufflevector <2 x double> %1908, <2 x double> poison, <2 x i32> <i32 1, i32 1>
  %1911 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %1910, <2 x double> %1858, <2 x double> %1824)
  %1912 = insertelement <2 x double> %1909, double %1899, i64 1
  %1913 = fadd <2 x double> %1827, %1912
  %1914 = load <2 x double>, ptr %1852, align 8, !tbaa !19
  %1915 = fsub <2 x double> %1914, %1912
  store <2 x double> %1915, ptr %1852, align 8, !tbaa !19
  %1916 = shufflevector <2 x double> %1905, <2 x double> poison, <2 x i32> zeroinitializer
  %1917 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %1908, <2 x double> %1916, <2 x double> %1826)
  %1918 = extractelement <2 x double> %1908, i64 0
  %1919 = fadd double %1823, %1918
  %1920 = getelementptr inbounds %class.Vector, ptr %647, i64 %1835, i32 2
  %1921 = load double, ptr %1920, align 8, !tbaa !87
  %1922 = fsub double %1921, %1918
  store double %1922, ptr %1920, align 8, !tbaa !87
  %1923 = add nuw nsw i64 %1822, 1
  %1924 = icmp eq i64 %1923, %1820
  br i1 %1924, label %1925, label %1821

1925:                                             ; preds = %1821, %1785
  %1926 = phi double [ 0.000000e+00, %1785 ], [ %1919, %1821 ]
  %1927 = phi <2 x double> [ %681, %1785 ], [ %1911, %1821 ]
  %1928 = phi <2 x double> [ %682, %1785 ], [ %1904, %1821 ]
  %1929 = phi <2 x double> [ %683, %1785 ], [ %1917, %1821 ]
  %1930 = phi <2 x double> [ zeroinitializer, %1785 ], [ %1913, %1821 ]
  %1931 = load double, ptr @_ZN20ComputeNonbondedUtil7cutoff2E, align 8, !tbaa !19
  %1932 = tail call noundef i32 @_Z22pairlist_from_pairlistddddPK8CompAtomPKtiPtdPd(double noundef %1931, double noundef %1814, double noundef %1815, double noundef %1786, ptr noundef %40, ptr noundef %1791, i32 noundef %1792, ptr noundef %93, double noundef %30, ptr noundef %139)
  %1933 = icmp sgt i32 %1932, 0
  br i1 %1933, label %1934, label %2043

1934:                                             ; preds = %1925
  %1935 = load ptr, ptr @_ZN20ComputeNonbondedUtil8r2_tableE, align 8, !tbaa !23
  %1936 = zext i32 %1932 to i64
  br label %1937

1937:                                             ; preds = %1934, %1937
  %1938 = phi i64 [ 0, %1934 ], [ %2041, %1937 ]
  %1939 = phi double [ %1926, %1934 ], [ %2037, %1937 ]
  %1940 = phi <2 x double> [ %1927, %1934 ], [ %2029, %1937 ]
  %1941 = phi <2 x double> [ %1928, %1934 ], [ %2022, %1937 ]
  %1942 = phi <2 x double> [ %1929, %1934 ], [ %2035, %1937 ]
  %1943 = phi <2 x double> [ %1930, %1934 ], [ %2031, %1937 ]
  %1944 = shl nuw nsw i64 %1938, 1
  %1945 = getelementptr inbounds i32, ptr %140, i64 %1944
  %1946 = load i32, ptr %1945, align 4, !tbaa !5
  %1947 = ashr i32 %1946, 14
  %1948 = add nsw i32 %1947, %33
  %1949 = getelementptr inbounds i16, ptr %93, i64 %1938
  %1950 = load i16, ptr %1949, align 2, !tbaa !44
  %1951 = zext i16 %1950 to i64
  %1952 = getelementptr inbounds %struct.CompAtom, ptr %40, i64 %1951
  %1953 = getelementptr inbounds double, ptr %139, i64 %1938
  %1954 = load double, ptr %1953, align 8, !tbaa !19
  %1955 = sext i32 %1948 to i64
  %1956 = getelementptr inbounds double, ptr %1935, i64 %1955
  %1957 = load double, ptr %1956, align 8, !tbaa !19
  %1958 = fsub double %1954, %1957
  %1959 = shl nsw i32 %1948, 4
  %1960 = sext i32 %1959 to i64
  %1961 = getelementptr inbounds double, ptr %27, i64 %1960
  %1962 = getelementptr inbounds %struct.CompAtom, ptr %40, i64 %1951, i32 2
  %1963 = load i16, ptr %1962, align 4, !tbaa !80
  %1964 = sext i16 %1963 to i32
  %1965 = shl nsw i32 %1964, 1
  %1966 = sext i32 %1965 to i64
  %1967 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %1812, i64 %1966
  %1968 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %1967, i64 1
  %1969 = getelementptr inbounds %class.Vector, ptr %647, i64 %1951
  %1970 = getelementptr inbounds %struct.CompAtom, ptr %40, i64 %1951, i32 1
  %1971 = load float, ptr %1970, align 8, !tbaa !79
  %1972 = fpext float %1971 to double
  %1973 = fmul double %1803, %1972
  %1974 = load <2 x double>, ptr %1952, align 8, !tbaa !19
  %1975 = fsub <2 x double> %1797, %1974
  %1976 = getelementptr inbounds %class.Vector, ptr %1952, i64 0, i32 2
  %1977 = load double, ptr %1976, align 8, !tbaa !49
  %1978 = fsub double %1786, %1977
  %1979 = load double, ptr %1968, align 8, !tbaa !84
  %1980 = fmul double %28, %1979
  %1981 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %1967, i64 1, i32 1
  %1982 = load double, ptr %1981, align 8, !tbaa !86
  %1983 = load double, ptr %1961, align 8, !tbaa !19
  %1984 = getelementptr inbounds double, ptr %1961, i64 2
  %1985 = load double, ptr %1984, align 8, !tbaa !19
  %1986 = fmul double %1982, %668
  %1987 = fmul double %1986, %1985
  %1988 = tail call double @llvm.fmuladd.f64(double %1980, double %1983, double %1987)
  %1989 = getelementptr inbounds double, ptr %1961, i64 1
  %1990 = load double, ptr %1989, align 8, !tbaa !19
  %1991 = getelementptr inbounds double, ptr %1961, i64 3
  %1992 = load double, ptr %1991, align 8, !tbaa !19
  %1993 = fmul double %1986, %1992
  %1994 = tail call double @llvm.fmuladd.f64(double %1980, double %1990, double %1993)
  %1995 = getelementptr inbounds double, ptr %1961, i64 4
  %1996 = load double, ptr %1995, align 8, !tbaa !19
  %1997 = getelementptr inbounds double, ptr %1961, i64 6
  %1998 = load double, ptr %1997, align 8, !tbaa !19
  %1999 = fmul double %1986, %1998
  %2000 = tail call double @llvm.fmuladd.f64(double %1980, double %1996, double %1999)
  %2001 = fmul double %670, %1973
  %2002 = getelementptr inbounds double, ptr %1961, i64 8
  %2003 = load double, ptr %2002, align 8, !tbaa !19
  %2004 = fmul double %2001, %2003
  %2005 = getelementptr inbounds double, ptr %1961, i64 9
  %2006 = load double, ptr %2005, align 8, !tbaa !19
  %2007 = fmul double %2001, %2006
  %2008 = getelementptr inbounds double, ptr %1961, i64 10
  %2009 = load double, ptr %2008, align 8, !tbaa !19
  %2010 = fmul double %2001, %2009
  %2011 = fadd double %1988, %2004
  %2012 = fadd double %1994, %2007
  %2013 = fadd double %2000, %2010
  %2014 = tail call double @llvm.fmuladd.f64(double %1958, double %2011, double %2012)
  %2015 = tail call double @llvm.fmuladd.f64(double %2014, double %1958, double %2013)
  %2016 = extractelement <2 x double> %1975, i64 1
  %2017 = fmul double %2016, %2015
  %2018 = insertelement <2 x double> poison, double %2017, i64 0
  %2019 = shufflevector <2 x double> %2018, <2 x double> poison, <2 x i32> zeroinitializer
  %2020 = shufflevector <2 x double> %1975, <2 x double> poison, <2 x i32> <i32 1, i32 0>
  %2021 = insertelement <2 x double> %2020, double %1978, i64 1
  %2022 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2019, <2 x double> %2021, <2 x double> %1941)
  %2023 = insertelement <2 x double> %2020, double %1978, i64 0
  %2024 = insertelement <2 x double> poison, double %2015, i64 0
  %2025 = shufflevector <2 x double> %2024, <2 x double> poison, <2 x i32> zeroinitializer
  %2026 = fmul <2 x double> %2023, %2025
  %2027 = shufflevector <2 x double> %2026, <2 x double> poison, <2 x i32> <i32 1, i32 poison>
  %2028 = shufflevector <2 x double> %2026, <2 x double> poison, <2 x i32> <i32 1, i32 1>
  %2029 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2028, <2 x double> %1975, <2 x double> %1940)
  %2030 = insertelement <2 x double> %2027, double %2017, i64 1
  %2031 = fadd <2 x double> %1943, %2030
  %2032 = load <2 x double>, ptr %1969, align 8, !tbaa !19
  %2033 = fsub <2 x double> %2032, %2030
  store <2 x double> %2033, ptr %1969, align 8, !tbaa !19
  %2034 = shufflevector <2 x double> %2023, <2 x double> poison, <2 x i32> zeroinitializer
  %2035 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2026, <2 x double> %2034, <2 x double> %1942)
  %2036 = extractelement <2 x double> %2026, i64 0
  %2037 = fadd double %1939, %2036
  %2038 = getelementptr inbounds %class.Vector, ptr %647, i64 %1951, i32 2
  %2039 = load double, ptr %2038, align 8, !tbaa !87
  %2040 = fsub double %2039, %2036
  store double %2040, ptr %2038, align 8, !tbaa !87
  %2041 = add nuw nsw i64 %1938, 1
  %2042 = icmp eq i64 %2041, %1936
  br i1 %2042, label %2043, label %1937

2043:                                             ; preds = %1937, %1925
  %2044 = phi double [ %1926, %1925 ], [ %2037, %1937 ]
  %2045 = phi <2 x double> [ %1927, %1925 ], [ %2029, %1937 ]
  %2046 = phi <2 x double> [ %1928, %1925 ], [ %2022, %1937 ]
  %2047 = phi <2 x double> [ %1929, %1925 ], [ %2035, %1937 ]
  %2048 = phi <2 x double> [ %1930, %1925 ], [ %2031, %1937 ]
  %2049 = add i32 %1790, %674
  %2050 = add i32 %2049, %1932
  %2051 = getelementptr inbounds %class.Vector, ptr %648, i64 %684
  %2052 = load <2 x double>, ptr %2051, align 8, !tbaa !19
  %2053 = fadd <2 x double> %2048, %2052
  store <2 x double> %2053, ptr %2051, align 8, !tbaa !19
  %2054 = getelementptr inbounds %class.Vector, ptr %648, i64 %684, i32 2
  %2055 = load double, ptr %2054, align 8, !tbaa !87
  %2056 = fadd double %2044, %2055
  store double %2056, ptr %2054, align 8, !tbaa !87
  br i1 %143, label %2059, label %2057

2057:                                             ; preds = %2043
  %2058 = add nsw i32 %675, 1
  br label %2067

2059:                                             ; preds = %2043
  %2060 = load ptr, ptr %8, align 8, !tbaa !46
  %2061 = load i32, ptr %13, align 8, !tbaa !17
  %2062 = add nsw i32 %2061, 1
  store i32 %2062, ptr %13, align 8, !tbaa !17
  %2063 = sext i32 %2061 to i64
  %2064 = getelementptr inbounds i16, ptr %2060, i64 %2063
  %2065 = load i16, ptr %2064, align 2, !tbaa !44
  %2066 = zext i16 %2065 to i32
  br label %2067

2067:                                             ; preds = %1126, %1394, %2059, %2057, %696
  %2068 = phi i32 [ %1787, %2059 ], [ %1787, %2057 ], [ %697, %696 ], [ %700, %1394 ], [ %700, %1126 ]
  %2069 = phi i32 [ %1793, %2059 ], [ %1793, %2057 ], [ %679, %696 ], [ %1140, %1394 ], [ 0, %1126 ]
  %2070 = phi ptr [ %1794, %2059 ], [ %1794, %2057 ], [ %678, %696 ], [ %950, %1394 ], [ %950, %1126 ]
  %2071 = phi ptr [ %1795, %2059 ], [ %1795, %2057 ], [ %677, %696 ], [ %951, %1394 ], [ %951, %1126 ]
  %2072 = phi ptr [ %1796, %2059 ], [ %1796, %2057 ], [ %676, %696 ], [ %952, %1394 ], [ %952, %1126 ]
  %2073 = phi i32 [ %2066, %2059 ], [ %2058, %2057 ], [ %698, %696 ], [ %1395, %1394 ], [ %1130, %1126 ]
  %2074 = phi i32 [ %2050, %2059 ], [ %2050, %2057 ], [ %674, %696 ], [ %674, %1394 ], [ %674, %1126 ]
  %2075 = phi <2 x double> [ %2045, %2059 ], [ %2045, %2057 ], [ %681, %696 ], [ %681, %1394 ], [ %681, %1126 ]
  %2076 = phi <2 x double> [ %2046, %2059 ], [ %2046, %2057 ], [ %682, %696 ], [ %682, %1394 ], [ %682, %1126 ]
  %2077 = phi <2 x double> [ %2047, %2059 ], [ %2047, %2057 ], [ %683, %696 ], [ %683, %1394 ], [ %683, %1126 ]
  %2078 = icmp slt i32 %2073, %35
  br i1 %2078, label %673, label %2079

2079:                                             ; preds = %2067, %644
  %2080 = phi ptr [ null, %644 ], [ %2072, %2067 ]
  %2081 = phi i32 [ %651, %644 ], [ %2073, %2067 ]
  %2082 = phi i32 [ 0, %644 ], [ %2074, %2067 ]
  %2083 = phi <2 x double> [ zeroinitializer, %644 ], [ %2075, %2067 ]
  %2084 = phi <2 x double> [ zeroinitializer, %644 ], [ %2076, %2067 ]
  %2085 = phi <2 x double> [ zeroinitializer, %644 ], [ %2077, %2067 ]
  br i1 %141, label %2093, label %2086

2086:                                             ; preds = %2079
  %2087 = trunc i32 %2081 to i16
  %2088 = load ptr, ptr %8, align 8, !tbaa !46
  %2089 = load i32, ptr %13, align 8, !tbaa !17
  %2090 = add nsw i32 %2089, -1
  %2091 = sext i32 %2090 to i64
  %2092 = getelementptr inbounds i16, ptr %2088, i64 %2091
  store i16 %2087, ptr %2092, align 2, !tbaa !44
  br label %2093

2093:                                             ; preds = %2086, %2079
  %2094 = sitofp i32 %2082 to double
  %2095 = getelementptr inbounds double, ptr %6, i64 22
  %2096 = load double, ptr %2095, align 8, !tbaa !19
  %2097 = fadd double %2096, %2094
  store double %2097, ptr %2095, align 8, !tbaa !19
  %2098 = getelementptr inbounds double, ptr %6, i64 3
  %2099 = load <4 x double>, ptr %2098, align 8, !tbaa !19
  %2100 = shufflevector <2 x double> %2083, <2 x double> %2085, <4 x i32> <i32 0, i32 1, i32 3, i32 poison>
  %2101 = shufflevector <4 x double> %2100, <4 x double> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 1>
  %2102 = fadd <4 x double> %2101, %2099
  store <4 x double> %2102, ptr %2098, align 8, !tbaa !19
  %2103 = getelementptr inbounds double, ptr %6, i64 7
  %2104 = load <4 x double>, ptr %2103, align 8, !tbaa !19
  %2105 = shufflevector <2 x double> %2084, <2 x double> %2085, <4 x i32> <i32 0, i32 1, i32 3, i32 poison>
  %2106 = shufflevector <4 x double> %2105, <4 x double> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 1>
  %2107 = fadd <4 x double> %2106, %2104
  store <4 x double> %2107, ptr %2103, align 8, !tbaa !19
  %2108 = getelementptr inbounds double, ptr %6, i64 11
  %2109 = load double, ptr %2108, align 8, !tbaa !19
  %2110 = extractelement <2 x double> %2085, i64 0
  %2111 = fadd double %2110, %2109
  store double %2111, ptr %2108, align 8, !tbaa !19
  %2112 = icmp eq ptr %2080, null
  br i1 %2112, label %2114, label %2113

2113:                                             ; preds = %2093
  tail call void @_ZdaPv(ptr noundef nonnull %2080) #10
  br label %2114

2114:                                             ; preds = %2093, %2113, %1
  ret void
}

declare void @_Z8NAMD_bugPKc(ptr noundef) local_unnamed_addr #1

; Function Attrs: nobuiltin allocsize(0)
declare noundef nonnull ptr @_Znam(i64 noundef) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nounwind willreturn memory(argmem: write)
declare void @llvm.memset.p0.i64(ptr nocapture writeonly, i8, i64, i1 immarg) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare double @llvm.fmuladd.f64(double, double, double) #4

; Function Attrs: inlinehint nounwind sspstrong uwtable
define linkonce_odr dso_local noundef i32 @_Z22pairlist_from_pairlistddddPK8CompAtomPKtiPtdPd(double noundef %0, double noundef %1, double noundef %2, double noundef %3, ptr noundef %4, ptr noundef %5, i32 noundef %6, ptr noundef %7, double noundef %8, ptr noundef %9) local_unnamed_addr #5 comdat {
  %11 = fadd double %0, %8
  %12 = icmp slt i32 %6, 1
  br i1 %12, label %218, label %13

13:                                               ; preds = %10
  %14 = icmp ugt i32 %6, 16
  br i1 %14, label %15, label %164

15:                                               ; preds = %13
  %16 = add nsw i32 %6, -4
  %17 = getelementptr inbounds i16, ptr %5, i64 3
  %18 = load i16, ptr %17, align 2, !tbaa !44
  %19 = zext i16 %18 to i64
  %20 = getelementptr inbounds %struct.CompAtom, ptr %4, i64 %19
  %21 = getelementptr inbounds %class.Vector, ptr %20, i64 0, i32 2
  %22 = load double, ptr %21, align 8, !tbaa !49
  %23 = getelementptr inbounds i16, ptr %5, i64 2
  %24 = load i16, ptr %23, align 2, !tbaa !44
  %25 = zext i16 %24 to i64
  %26 = getelementptr inbounds %struct.CompAtom, ptr %4, i64 %25
  %27 = getelementptr inbounds %class.Vector, ptr %26, i64 0, i32 2
  %28 = load double, ptr %27, align 8, !tbaa !49
  %29 = getelementptr inbounds i16, ptr %5, i64 1
  %30 = load i16, ptr %29, align 2, !tbaa !44
  %31 = zext i16 %30 to i64
  %32 = getelementptr inbounds %struct.CompAtom, ptr %4, i64 %31
  %33 = getelementptr inbounds %class.Vector, ptr %32, i64 0, i32 2
  %34 = load double, ptr %33, align 8, !tbaa !49
  %35 = load i16, ptr %5, align 2, !tbaa !44
  %36 = zext i16 %35 to i64
  %37 = getelementptr inbounds %struct.CompAtom, ptr %4, i64 %36
  %38 = getelementptr inbounds %class.Vector, ptr %37, i64 0, i32 2
  %39 = load double, ptr %38, align 8, !tbaa !49
  %40 = getelementptr inbounds %class.Vector, ptr %20, i64 0, i32 1
  %41 = load double, ptr %40, align 8, !tbaa !66
  %42 = getelementptr inbounds %class.Vector, ptr %26, i64 0, i32 1
  %43 = load double, ptr %42, align 8, !tbaa !66
  %44 = getelementptr inbounds %class.Vector, ptr %32, i64 0, i32 1
  %45 = load double, ptr %44, align 8, !tbaa !66
  %46 = getelementptr inbounds %class.Vector, ptr %37, i64 0, i32 1
  %47 = load double, ptr %46, align 8, !tbaa !66
  %48 = load double, ptr %20, align 8, !tbaa !67
  %49 = load double, ptr %26, align 8, !tbaa !67
  %50 = load double, ptr %32, align 8, !tbaa !67
  %51 = load double, ptr %37, align 8, !tbaa !67
  %52 = zext i32 %16 to i64
  br label %53

53:                                               ; preds = %15, %53
  %54 = phi i64 [ 4, %15 ], [ %159, %53 ]
  %55 = phi i32 [ 0, %15 ], [ %158, %53 ]
  %56 = phi i16 [ %35, %15 ], [ %73, %53 ]
  %57 = phi i16 [ %30, %15 ], [ %76, %53 ]
  %58 = phi i16 [ %24, %15 ], [ %79, %53 ]
  %59 = phi i16 [ %18, %15 ], [ %82, %53 ]
  %60 = phi double [ %51, %15 ], [ %109, %53 ]
  %61 = phi double [ %50, %15 ], [ %112, %53 ]
  %62 = phi double [ %49, %15 ], [ %115, %53 ]
  %63 = phi double [ %48, %15 ], [ %118, %53 ]
  %64 = phi double [ %47, %15 ], [ %120, %53 ]
  %65 = phi double [ %45, %15 ], [ %122, %53 ]
  %66 = phi double [ %43, %15 ], [ %124, %53 ]
  %67 = phi double [ %41, %15 ], [ %126, %53 ]
  %68 = phi double [ %22, %15 ], [ %134, %53 ]
  %69 = phi double [ %28, %15 ], [ %132, %53 ]
  %70 = phi double [ %34, %15 ], [ %130, %53 ]
  %71 = phi double [ %39, %15 ], [ %128, %53 ]
  %72 = getelementptr inbounds i16, ptr %5, i64 %54
  %73 = load i16, ptr %72, align 2, !tbaa !44
  %74 = or i64 %54, 1
  %75 = getelementptr inbounds i16, ptr %5, i64 %74
  %76 = load i16, ptr %75, align 2, !tbaa !44
  %77 = or i64 %54, 2
  %78 = getelementptr inbounds i16, ptr %5, i64 %77
  %79 = load i16, ptr %78, align 2, !tbaa !44
  %80 = or i64 %54, 3
  %81 = getelementptr inbounds i16, ptr %5, i64 %80
  %82 = load i16, ptr %81, align 2, !tbaa !44
  %83 = fsub double %1, %60
  %84 = fsub double %1, %61
  %85 = fsub double %1, %62
  %86 = fsub double %1, %63
  %87 = tail call double @llvm.fmuladd.f64(double %83, double %83, double %8)
  %88 = tail call double @llvm.fmuladd.f64(double %84, double %84, double %8)
  %89 = tail call double @llvm.fmuladd.f64(double %85, double %85, double %8)
  %90 = tail call double @llvm.fmuladd.f64(double %86, double %86, double %8)
  %91 = fsub double %2, %64
  %92 = fsub double %2, %65
  %93 = fsub double %2, %66
  %94 = fsub double %2, %67
  %95 = tail call double @llvm.fmuladd.f64(double %91, double %91, double %87)
  %96 = tail call double @llvm.fmuladd.f64(double %92, double %92, double %88)
  %97 = tail call double @llvm.fmuladd.f64(double %93, double %93, double %89)
  %98 = tail call double @llvm.fmuladd.f64(double %94, double %94, double %90)
  %99 = fsub double %3, %71
  %100 = fsub double %3, %70
  %101 = fsub double %3, %69
  %102 = fsub double %3, %68
  %103 = tail call double @llvm.fmuladd.f64(double %99, double %99, double %95)
  %104 = tail call double @llvm.fmuladd.f64(double %100, double %100, double %96)
  %105 = tail call double @llvm.fmuladd.f64(double %101, double %101, double %97)
  %106 = tail call double @llvm.fmuladd.f64(double %102, double %102, double %98)
  %107 = zext i16 %73 to i64
  %108 = getelementptr inbounds %struct.CompAtom, ptr %4, i64 %107
  %109 = load double, ptr %108, align 8, !tbaa !67
  %110 = zext i16 %76 to i64
  %111 = getelementptr inbounds %struct.CompAtom, ptr %4, i64 %110
  %112 = load double, ptr %111, align 8, !tbaa !67
  %113 = zext i16 %79 to i64
  %114 = getelementptr inbounds %struct.CompAtom, ptr %4, i64 %113
  %115 = load double, ptr %114, align 8, !tbaa !67
  %116 = zext i16 %82 to i64
  %117 = getelementptr inbounds %struct.CompAtom, ptr %4, i64 %116
  %118 = load double, ptr %117, align 8, !tbaa !67
  %119 = getelementptr inbounds %class.Vector, ptr %108, i64 0, i32 1
  %120 = load double, ptr %119, align 8, !tbaa !66
  %121 = getelementptr inbounds %class.Vector, ptr %111, i64 0, i32 1
  %122 = load double, ptr %121, align 8, !tbaa !66
  %123 = getelementptr inbounds %class.Vector, ptr %114, i64 0, i32 1
  %124 = load double, ptr %123, align 8, !tbaa !66
  %125 = getelementptr inbounds %class.Vector, ptr %117, i64 0, i32 1
  %126 = load double, ptr %125, align 8, !tbaa !66
  %127 = getelementptr inbounds %class.Vector, ptr %108, i64 0, i32 2
  %128 = load double, ptr %127, align 8, !tbaa !49
  %129 = getelementptr inbounds %class.Vector, ptr %111, i64 0, i32 2
  %130 = load double, ptr %129, align 8, !tbaa !49
  %131 = getelementptr inbounds %class.Vector, ptr %114, i64 0, i32 2
  %132 = load double, ptr %131, align 8, !tbaa !49
  %133 = getelementptr inbounds %class.Vector, ptr %117, i64 0, i32 2
  %134 = load double, ptr %133, align 8, !tbaa !49
  %135 = fcmp olt double %103, %11
  %136 = fcmp olt double %104, %11
  %137 = fcmp olt double %105, %11
  %138 = fcmp olt double %106, %11
  %139 = sext i32 %55 to i64
  %140 = getelementptr inbounds i16, ptr %7, i64 %139
  store i16 %56, ptr %140, align 2, !tbaa !44
  %141 = getelementptr inbounds double, ptr %9, i64 %139
  store double %103, ptr %141, align 8, !tbaa !19
  %142 = zext i1 %135 to i32
  %143 = add nsw i32 %55, %142
  %144 = sext i32 %143 to i64
  %145 = getelementptr inbounds i16, ptr %7, i64 %144
  store i16 %57, ptr %145, align 2, !tbaa !44
  %146 = getelementptr inbounds double, ptr %9, i64 %144
  store double %104, ptr %146, align 8, !tbaa !19
  %147 = zext i1 %136 to i32
  %148 = add nsw i32 %143, %147
  %149 = sext i32 %148 to i64
  %150 = getelementptr inbounds i16, ptr %7, i64 %149
  store i16 %58, ptr %150, align 2, !tbaa !44
  %151 = getelementptr inbounds double, ptr %9, i64 %149
  store double %105, ptr %151, align 8, !tbaa !19
  %152 = zext i1 %137 to i32
  %153 = add nsw i32 %148, %152
  %154 = sext i32 %153 to i64
  %155 = getelementptr inbounds i16, ptr %7, i64 %154
  store i16 %59, ptr %155, align 2, !tbaa !44
  %156 = getelementptr inbounds double, ptr %9, i64 %154
  store double %106, ptr %156, align 8, !tbaa !19
  %157 = zext i1 %138 to i32
  %158 = add nsw i32 %153, %157
  %159 = add nuw nsw i64 %54, 4
  %160 = icmp ult i64 %159, %52
  br i1 %160, label %53, label %161

161:                                              ; preds = %53
  %162 = trunc i64 %54 to i32
  %163 = sext i32 %158 to i64
  br label %164

164:                                              ; preds = %161, %13
  %165 = phi i64 [ %163, %161 ], [ 0, %13 ]
  %166 = phi i32 [ %162, %161 ], [ 0, %13 ]
  %167 = getelementptr inbounds i16, ptr %7, i64 %165
  %168 = icmp slt i32 %166, %6
  br i1 %168, label %169, label %211

169:                                              ; preds = %164
  %170 = zext i32 %166 to i64
  %171 = getelementptr inbounds i16, ptr %5, i64 %170
  %172 = load i16, ptr %171, align 2, !tbaa !44
  %173 = zext i16 %172 to i64
  %174 = getelementptr inbounds %struct.CompAtom, ptr %4, i64 %173
  %175 = getelementptr inbounds %class.Vector, ptr %174, i64 0, i32 1
  %176 = load <2 x double>, ptr %175, align 8, !tbaa !19
  %177 = load double, ptr %174, align 8, !tbaa !67
  %178 = getelementptr inbounds double, ptr %9, i64 %165
  %179 = zext i32 %6 to i64
  br label %180

180:                                              ; preds = %169, %207
  %181 = phi i64 [ %170, %169 ], [ %187, %207 ]
  %182 = phi ptr [ %167, %169 ], [ %209, %207 ]
  %183 = phi double [ %177, %169 ], [ %194, %207 ]
  %184 = phi i16 [ %172, %169 ], [ %189, %207 ]
  %185 = phi ptr [ %178, %169 ], [ %208, %207 ]
  %186 = phi <2 x double> [ %176, %169 ], [ %202, %207 ]
  %187 = add nuw nsw i64 %181, 1
  %188 = getelementptr inbounds i16, ptr %5, i64 %187
  %189 = load i16, ptr %188, align 2, !tbaa !44
  %190 = fsub double %1, %183
  %191 = tail call double @llvm.fmuladd.f64(double %190, double %190, double %8)
  %192 = zext i16 %189 to i64
  %193 = getelementptr inbounds %struct.CompAtom, ptr %4, i64 %192
  %194 = load double, ptr %193, align 8, !tbaa !67
  %195 = extractelement <2 x double> %186, i64 0
  %196 = fsub double %2, %195
  %197 = tail call double @llvm.fmuladd.f64(double %196, double %196, double %191)
  %198 = getelementptr inbounds %class.Vector, ptr %193, i64 0, i32 1
  %199 = extractelement <2 x double> %186, i64 1
  %200 = fsub double %3, %199
  %201 = tail call double @llvm.fmuladd.f64(double %200, double %200, double %197)
  %202 = load <2 x double>, ptr %198, align 8, !tbaa !19
  %203 = fcmp ugt double %201, %11
  br i1 %203, label %207, label %204

204:                                              ; preds = %180
  store i16 %184, ptr %182, align 2, !tbaa !44
  %205 = getelementptr inbounds i16, ptr %182, i64 1
  store double %201, ptr %185, align 8, !tbaa !19
  %206 = getelementptr inbounds double, ptr %185, i64 1
  br label %207

207:                                              ; preds = %204, %180
  %208 = phi ptr [ %206, %204 ], [ %185, %180 ]
  %209 = phi ptr [ %205, %204 ], [ %182, %180 ]
  %210 = icmp eq i64 %187, %179
  br i1 %210, label %211, label %180

211:                                              ; preds = %207, %164
  %212 = phi ptr [ %167, %164 ], [ %209, %207 ]
  %213 = ptrtoint ptr %212 to i64
  %214 = ptrtoint ptr %7 to i64
  %215 = sub i64 %213, %214
  %216 = lshr exact i64 %215, 1
  %217 = trunc i64 %216 to i32
  br label %218

218:                                              ; preds = %10, %211
  %219 = phi i32 [ %217, %211 ], [ 0, %10 ]
  ret i32 %219
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdaPv(ptr noundef) local_unnamed_addr #6

; Function Attrs: sspstrong uwtable
define dso_local void @_ZN20ComputeNonbondedUtil16calc_pair_energyEP9nonbonded(ptr nocapture noundef readonly %0) local_unnamed_addr #0 align 2 {
  %2 = load i32, ptr @_ZN20ComputeNonbondedUtil8commOnlyE, align 4, !tbaa !5
  %3 = icmp eq i32 %2, 0
  br i1 %3, label %4, label %2180

4:                                                ; preds = %1
  %5 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 7
  %6 = load ptr, ptr %5, align 8, !tbaa !9
  %7 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 10
  %8 = load ptr, ptr %7, align 8, !tbaa !14
  %9 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 11
  %10 = load i32, ptr %9, align 8, !tbaa !15
  %11 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 12
  %12 = load i32, ptr %11, align 4, !tbaa !16
  %13 = getelementptr inbounds %class.Pairlists, ptr %8, i64 0, i32 1
  store i32 0, ptr %13, align 8, !tbaa !17
  %14 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 6
  %15 = load <2 x double>, ptr %14, align 8, !tbaa !19
  %16 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 6, i32 2
  %17 = load double, ptr %16, align 8, !tbaa !20
  %18 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 13
  %19 = load double, ptr %18, align 8, !tbaa !21
  %20 = fmul double %19, %19
  %21 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 14
  %22 = load double, ptr %21, align 8, !tbaa !22
  %23 = fmul double %22, %22
  %24 = load double, ptr @_ZN20ComputeNonbondedUtil12dielectric_1E, align 8, !tbaa !19
  %25 = load ptr, ptr @_ZN20ComputeNonbondedUtil7ljTableE, align 8, !tbaa !23
  %26 = load ptr, ptr @_ZN20ComputeNonbondedUtil3molE, align 8, !tbaa !23
  %27 = load ptr, ptr @_ZN20ComputeNonbondedUtil11table_shortE, align 8, !tbaa !23
  %28 = load double, ptr @_ZN20ComputeNonbondedUtil7scalingE, align 8, !tbaa !19
  %29 = load double, ptr @_ZN20ComputeNonbondedUtil7scale14E, align 8, !tbaa !19
  %30 = load double, ptr @_ZN20ComputeNonbondedUtil8r2_deltaE, align 8, !tbaa !19
  %31 = load i32, ptr @_ZN20ComputeNonbondedUtil12r2_delta_expE, align 4, !tbaa !5
  %32 = shl i32 %31, 6
  %33 = add i32 %32, -65472
  %34 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 5
  %35 = load i32, ptr %34, align 8, !tbaa !5
  %36 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 5, i64 1
  %37 = load i32, ptr %36, align 4, !tbaa !5
  %38 = load ptr, ptr %0, align 8, !tbaa !23
  %39 = getelementptr inbounds [2 x ptr], ptr %0, i64 0, i64 1
  %40 = load ptr, ptr %39, align 8, !tbaa !23
  %41 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 1
  %42 = load ptr, ptr %41, align 8, !tbaa !23
  %43 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 1, i64 1
  %44 = load ptr, ptr %43, align 8, !tbaa !23
  %45 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 9
  %46 = load ptr, ptr %45, align 8, !tbaa !24
  %47 = add nsw i32 %37, 5
  %48 = getelementptr inbounds %class.ResizeArray, ptr %46, i64 0, i32 1
  %49 = load ptr, ptr %48, align 8, !tbaa !25
  %50 = getelementptr inbounds %class.ResizeArrayRaw, ptr %49, i64 0, i32 2
  %51 = load i32, ptr %50, align 8, !tbaa !27
  %52 = icmp slt i32 %51, %47
  br i1 %52, label %53, label %91

53:                                               ; preds = %4
  %54 = getelementptr inbounds %class.ResizeArrayRaw, ptr %49, i64 0, i32 3
  %55 = load i32, ptr %54, align 4, !tbaa !30
  %56 = icmp slt i32 %55, %47
  br i1 %56, label %57, label %91

57:                                               ; preds = %53
  %58 = sitofp i32 %55 to float
  %59 = getelementptr inbounds %class.ResizeArrayRaw, ptr %49, i64 0, i32 5
  %60 = load float, ptr %59, align 4, !tbaa !31
  %61 = fmul float %60, %58
  %62 = fptosi float %61 to i32
  %63 = tail call i32 @llvm.smax.i32(i32 %62, i32 %47)
  %64 = sub nsw i32 %63, %55
  %65 = getelementptr inbounds %class.ResizeArrayRaw, ptr %49, i64 0, i32 6
  %66 = load i32, ptr %65, align 8, !tbaa !32
  %67 = icmp slt i32 %64, %66
  %68 = add nsw i32 %66, %55
  %69 = select i1 %67, i32 %68, i32 %63
  %70 = sext i32 %69 to i64
  %71 = shl nsw i64 %70, 1
  %72 = add nsw i64 %71, 31
  %73 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %72) #9
  %74 = getelementptr inbounds i8, ptr %73, i64 31
  %75 = ptrtoint ptr %74 to i64
  %76 = and i64 %75, 31
  %77 = sub nsw i64 0, %76
  %78 = getelementptr inbounds i8, ptr %74, i64 %77
  %79 = load ptr, ptr %49, align 8, !tbaa !33
  %80 = sext i32 %51 to i64
  %81 = shl nsw i64 %80, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %78, ptr align 1 %79, i64 %81, i1 false)
  %82 = icmp eq i32 %55, 0
  br i1 %82, label %88, label %83

83:                                               ; preds = %57
  %84 = getelementptr inbounds %class.ResizeArrayRaw, ptr %49, i64 0, i32 1
  %85 = load ptr, ptr %84, align 8, !tbaa !34
  %86 = icmp eq ptr %85, null
  br i1 %86, label %88, label %87

87:                                               ; preds = %83
  tail call void @_ZdaPv(ptr noundef nonnull %85) #10
  br label %88

88:                                               ; preds = %87, %83, %57
  %89 = getelementptr inbounds %class.ResizeArrayRaw, ptr %49, i64 0, i32 1
  store ptr %73, ptr %89, align 8, !tbaa !34
  store ptr %78, ptr %49, align 8, !tbaa !33
  store i32 %69, ptr %54, align 4, !tbaa !30
  %90 = load ptr, ptr %48, align 8, !tbaa !25
  br label %91

91:                                               ; preds = %4, %53, %88
  %92 = phi ptr [ %49, %4 ], [ %49, %53 ], [ %90, %88 ]
  store i32 %47, ptr %50, align 8, !tbaa !27
  %93 = load ptr, ptr %92, align 8, !tbaa !33
  %94 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %46, i64 0, i32 1, i32 1
  %95 = load ptr, ptr %94, align 8, !tbaa !35
  %96 = getelementptr inbounds %class.ResizeArrayRaw.23, ptr %95, i64 0, i32 2
  %97 = load i32, ptr %96, align 8, !tbaa !37
  %98 = icmp slt i32 %97, %47
  br i1 %98, label %99, label %137

99:                                               ; preds = %91
  %100 = getelementptr inbounds %class.ResizeArrayRaw.23, ptr %95, i64 0, i32 3
  %101 = load i32, ptr %100, align 4, !tbaa !39
  %102 = icmp slt i32 %101, %47
  br i1 %102, label %103, label %137

103:                                              ; preds = %99
  %104 = sitofp i32 %101 to float
  %105 = getelementptr inbounds %class.ResizeArrayRaw.23, ptr %95, i64 0, i32 5
  %106 = load float, ptr %105, align 4, !tbaa !40
  %107 = fmul float %106, %104
  %108 = fptosi float %107 to i32
  %109 = tail call i32 @llvm.smax.i32(i32 %108, i32 %47)
  %110 = sub nsw i32 %109, %101
  %111 = getelementptr inbounds %class.ResizeArrayRaw.23, ptr %95, i64 0, i32 6
  %112 = load i32, ptr %111, align 8, !tbaa !41
  %113 = icmp slt i32 %110, %112
  %114 = add nsw i32 %112, %101
  %115 = select i1 %113, i32 %114, i32 %109
  %116 = sext i32 %115 to i64
  %117 = shl nsw i64 %116, 3
  %118 = add nsw i64 %117, 31
  %119 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %118) #9
  %120 = getelementptr inbounds i8, ptr %119, i64 31
  %121 = ptrtoint ptr %120 to i64
  %122 = and i64 %121, 31
  %123 = sub nsw i64 0, %122
  %124 = getelementptr inbounds i8, ptr %120, i64 %123
  %125 = load ptr, ptr %95, align 8, !tbaa !42
  %126 = sext i32 %97 to i64
  %127 = shl nsw i64 %126, 3
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %124, ptr align 1 %125, i64 %127, i1 false)
  %128 = icmp eq i32 %101, 0
  br i1 %128, label %134, label %129

129:                                              ; preds = %103
  %130 = getelementptr inbounds %class.ResizeArrayRaw.23, ptr %95, i64 0, i32 1
  %131 = load ptr, ptr %130, align 8, !tbaa !43
  %132 = icmp eq ptr %131, null
  br i1 %132, label %134, label %133

133:                                              ; preds = %129
  tail call void @_ZdaPv(ptr noundef nonnull %131) #10
  br label %134

134:                                              ; preds = %133, %129, %103
  %135 = getelementptr inbounds %class.ResizeArrayRaw.23, ptr %95, i64 0, i32 1
  store ptr %119, ptr %135, align 8, !tbaa !43
  store ptr %124, ptr %95, align 8, !tbaa !42
  store i32 %115, ptr %100, align 4, !tbaa !39
  %136 = load ptr, ptr %94, align 8, !tbaa !35
  br label %137

137:                                              ; preds = %91, %99, %134
  %138 = phi ptr [ %95, %91 ], [ %95, %99 ], [ %136, %134 ]
  store i32 %47, ptr %96, align 8, !tbaa !37
  %139 = load ptr, ptr %138, align 8, !tbaa !42
  %140 = getelementptr inbounds i32, ptr %139, i64 1
  %141 = icmp eq i32 %10, 0
  %142 = icmp ne i32 %12, 0
  %143 = select i1 %141, i1 %142, i1 false
  %144 = select i1 %143, i32 0, i32 %47
  %145 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %46, i64 0, i32 2, i32 1
  %146 = load ptr, ptr %145, align 8, !tbaa !25
  %147 = getelementptr inbounds %class.ResizeArrayRaw, ptr %146, i64 0, i32 2
  %148 = load i32, ptr %147, align 8, !tbaa !27
  %149 = icmp slt i32 %148, %144
  br i1 %149, label %150, label %188

150:                                              ; preds = %137
  %151 = getelementptr inbounds %class.ResizeArrayRaw, ptr %146, i64 0, i32 3
  %152 = load i32, ptr %151, align 4, !tbaa !30
  %153 = icmp slt i32 %152, %144
  br i1 %153, label %154, label %188

154:                                              ; preds = %150
  %155 = sitofp i32 %152 to float
  %156 = getelementptr inbounds %class.ResizeArrayRaw, ptr %146, i64 0, i32 5
  %157 = load float, ptr %156, align 4, !tbaa !31
  %158 = fmul float %157, %155
  %159 = fptosi float %158 to i32
  %160 = tail call i32 @llvm.smax.i32(i32 %159, i32 %144)
  %161 = sub nsw i32 %160, %152
  %162 = getelementptr inbounds %class.ResizeArrayRaw, ptr %146, i64 0, i32 6
  %163 = load i32, ptr %162, align 8, !tbaa !32
  %164 = icmp slt i32 %161, %163
  %165 = add nsw i32 %163, %152
  %166 = select i1 %164, i32 %165, i32 %160
  %167 = sext i32 %166 to i64
  %168 = shl nsw i64 %167, 1
  %169 = add nsw i64 %168, 31
  %170 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %169) #9
  %171 = getelementptr inbounds i8, ptr %170, i64 31
  %172 = ptrtoint ptr %171 to i64
  %173 = and i64 %172, 31
  %174 = sub nsw i64 0, %173
  %175 = getelementptr inbounds i8, ptr %171, i64 %174
  %176 = load ptr, ptr %146, align 8, !tbaa !33
  %177 = sext i32 %148 to i64
  %178 = shl nsw i64 %177, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %175, ptr align 1 %176, i64 %178, i1 false)
  %179 = icmp eq i32 %152, 0
  br i1 %179, label %185, label %180

180:                                              ; preds = %154
  %181 = getelementptr inbounds %class.ResizeArrayRaw, ptr %146, i64 0, i32 1
  %182 = load ptr, ptr %181, align 8, !tbaa !34
  %183 = icmp eq ptr %182, null
  br i1 %183, label %185, label %184

184:                                              ; preds = %180
  tail call void @_ZdaPv(ptr noundef nonnull %182) #10
  br label %185

185:                                              ; preds = %184, %180, %154
  %186 = getelementptr inbounds %class.ResizeArrayRaw, ptr %146, i64 0, i32 1
  store ptr %170, ptr %186, align 8, !tbaa !34
  store ptr %175, ptr %146, align 8, !tbaa !33
  store i32 %166, ptr %151, align 4, !tbaa !30
  %187 = load ptr, ptr %145, align 8, !tbaa !25
  br label %188

188:                                              ; preds = %137, %150, %185
  %189 = phi ptr [ %146, %137 ], [ %146, %150 ], [ %187, %185 ]
  store i32 %144, ptr %147, align 8, !tbaa !27
  %190 = load ptr, ptr %189, align 8, !tbaa !33
  %191 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %46, i64 0, i32 3, i32 1
  %192 = load ptr, ptr %191, align 8, !tbaa !25
  %193 = getelementptr inbounds %class.ResizeArrayRaw, ptr %192, i64 0, i32 2
  %194 = load i32, ptr %193, align 8, !tbaa !27
  %195 = icmp slt i32 %194, %144
  br i1 %195, label %196, label %234

196:                                              ; preds = %188
  %197 = getelementptr inbounds %class.ResizeArrayRaw, ptr %192, i64 0, i32 3
  %198 = load i32, ptr %197, align 4, !tbaa !30
  %199 = icmp slt i32 %198, %144
  br i1 %199, label %200, label %234

200:                                              ; preds = %196
  %201 = sitofp i32 %198 to float
  %202 = getelementptr inbounds %class.ResizeArrayRaw, ptr %192, i64 0, i32 5
  %203 = load float, ptr %202, align 4, !tbaa !31
  %204 = fmul float %203, %201
  %205 = fptosi float %204 to i32
  %206 = tail call i32 @llvm.smax.i32(i32 %205, i32 %144)
  %207 = sub nsw i32 %206, %198
  %208 = getelementptr inbounds %class.ResizeArrayRaw, ptr %192, i64 0, i32 6
  %209 = load i32, ptr %208, align 8, !tbaa !32
  %210 = icmp slt i32 %207, %209
  %211 = add nsw i32 %209, %198
  %212 = select i1 %210, i32 %211, i32 %206
  %213 = sext i32 %212 to i64
  %214 = shl nsw i64 %213, 1
  %215 = add nsw i64 %214, 31
  %216 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %215) #9
  %217 = getelementptr inbounds i8, ptr %216, i64 31
  %218 = ptrtoint ptr %217 to i64
  %219 = and i64 %218, 31
  %220 = sub nsw i64 0, %219
  %221 = getelementptr inbounds i8, ptr %217, i64 %220
  %222 = load ptr, ptr %192, align 8, !tbaa !33
  %223 = sext i32 %194 to i64
  %224 = shl nsw i64 %223, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %221, ptr align 1 %222, i64 %224, i1 false)
  %225 = icmp eq i32 %198, 0
  br i1 %225, label %231, label %226

226:                                              ; preds = %200
  %227 = getelementptr inbounds %class.ResizeArrayRaw, ptr %192, i64 0, i32 1
  %228 = load ptr, ptr %227, align 8, !tbaa !34
  %229 = icmp eq ptr %228, null
  br i1 %229, label %231, label %230

230:                                              ; preds = %226
  tail call void @_ZdaPv(ptr noundef nonnull %228) #10
  br label %231

231:                                              ; preds = %230, %226, %200
  %232 = getelementptr inbounds %class.ResizeArrayRaw, ptr %192, i64 0, i32 1
  store ptr %216, ptr %232, align 8, !tbaa !34
  store ptr %221, ptr %192, align 8, !tbaa !33
  store i32 %212, ptr %197, align 4, !tbaa !30
  %233 = load ptr, ptr %191, align 8, !tbaa !25
  br label %234

234:                                              ; preds = %188, %196, %231
  %235 = phi ptr [ %192, %188 ], [ %192, %196 ], [ %233, %231 ]
  store i32 %144, ptr %193, align 8, !tbaa !27
  %236 = load ptr, ptr %235, align 8, !tbaa !33
  %237 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %46, i64 0, i32 4, i32 1
  %238 = load ptr, ptr %237, align 8, !tbaa !25
  %239 = getelementptr inbounds %class.ResizeArrayRaw, ptr %238, i64 0, i32 2
  %240 = load i32, ptr %239, align 8, !tbaa !27
  %241 = icmp slt i32 %240, %144
  br i1 %241, label %242, label %280

242:                                              ; preds = %234
  %243 = getelementptr inbounds %class.ResizeArrayRaw, ptr %238, i64 0, i32 3
  %244 = load i32, ptr %243, align 4, !tbaa !30
  %245 = icmp slt i32 %244, %144
  br i1 %245, label %246, label %280

246:                                              ; preds = %242
  %247 = sitofp i32 %244 to float
  %248 = getelementptr inbounds %class.ResizeArrayRaw, ptr %238, i64 0, i32 5
  %249 = load float, ptr %248, align 4, !tbaa !31
  %250 = fmul float %249, %247
  %251 = fptosi float %250 to i32
  %252 = tail call i32 @llvm.smax.i32(i32 %251, i32 %144)
  %253 = sub nsw i32 %252, %244
  %254 = getelementptr inbounds %class.ResizeArrayRaw, ptr %238, i64 0, i32 6
  %255 = load i32, ptr %254, align 8, !tbaa !32
  %256 = icmp slt i32 %253, %255
  %257 = add nsw i32 %255, %244
  %258 = select i1 %256, i32 %257, i32 %252
  %259 = sext i32 %258 to i64
  %260 = shl nsw i64 %259, 1
  %261 = add nsw i64 %260, 31
  %262 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %261) #9
  %263 = getelementptr inbounds i8, ptr %262, i64 31
  %264 = ptrtoint ptr %263 to i64
  %265 = and i64 %264, 31
  %266 = sub nsw i64 0, %265
  %267 = getelementptr inbounds i8, ptr %263, i64 %266
  %268 = load ptr, ptr %238, align 8, !tbaa !33
  %269 = sext i32 %240 to i64
  %270 = shl nsw i64 %269, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %267, ptr align 1 %268, i64 %270, i1 false)
  %271 = icmp eq i32 %244, 0
  br i1 %271, label %277, label %272

272:                                              ; preds = %246
  %273 = getelementptr inbounds %class.ResizeArrayRaw, ptr %238, i64 0, i32 1
  %274 = load ptr, ptr %273, align 8, !tbaa !34
  %275 = icmp eq ptr %274, null
  br i1 %275, label %277, label %276

276:                                              ; preds = %272
  tail call void @_ZdaPv(ptr noundef nonnull %274) #10
  br label %277

277:                                              ; preds = %276, %272, %246
  %278 = getelementptr inbounds %class.ResizeArrayRaw, ptr %238, i64 0, i32 1
  store ptr %262, ptr %278, align 8, !tbaa !34
  store ptr %267, ptr %238, align 8, !tbaa !33
  store i32 %258, ptr %243, align 4, !tbaa !30
  %279 = load ptr, ptr %237, align 8, !tbaa !25
  br label %280

280:                                              ; preds = %234, %242, %277
  %281 = phi ptr [ %238, %234 ], [ %238, %242 ], [ %279, %277 ]
  store i32 %144, ptr %239, align 8, !tbaa !27
  %282 = load ptr, ptr %281, align 8, !tbaa !33
  %283 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %46, i64 0, i32 5, i32 1
  %284 = load ptr, ptr %283, align 8, !tbaa !25
  %285 = getelementptr inbounds %class.ResizeArrayRaw, ptr %284, i64 0, i32 2
  %286 = load i32, ptr %285, align 8, !tbaa !27
  %287 = icmp slt i32 %286, %144
  br i1 %287, label %288, label %326

288:                                              ; preds = %280
  %289 = getelementptr inbounds %class.ResizeArrayRaw, ptr %284, i64 0, i32 3
  %290 = load i32, ptr %289, align 4, !tbaa !30
  %291 = icmp slt i32 %290, %144
  br i1 %291, label %292, label %326

292:                                              ; preds = %288
  %293 = sitofp i32 %290 to float
  %294 = getelementptr inbounds %class.ResizeArrayRaw, ptr %284, i64 0, i32 5
  %295 = load float, ptr %294, align 4, !tbaa !31
  %296 = fmul float %295, %293
  %297 = fptosi float %296 to i32
  %298 = tail call i32 @llvm.smax.i32(i32 %297, i32 %144)
  %299 = sub nsw i32 %298, %290
  %300 = getelementptr inbounds %class.ResizeArrayRaw, ptr %284, i64 0, i32 6
  %301 = load i32, ptr %300, align 8, !tbaa !32
  %302 = icmp slt i32 %299, %301
  %303 = add nsw i32 %301, %290
  %304 = select i1 %302, i32 %303, i32 %298
  %305 = sext i32 %304 to i64
  %306 = shl nsw i64 %305, 1
  %307 = add nsw i64 %306, 31
  %308 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %307) #9
  %309 = getelementptr inbounds i8, ptr %308, i64 31
  %310 = ptrtoint ptr %309 to i64
  %311 = and i64 %310, 31
  %312 = sub nsw i64 0, %311
  %313 = getelementptr inbounds i8, ptr %309, i64 %312
  %314 = load ptr, ptr %284, align 8, !tbaa !33
  %315 = sext i32 %286 to i64
  %316 = shl nsw i64 %315, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %313, ptr align 1 %314, i64 %316, i1 false)
  %317 = icmp eq i32 %290, 0
  br i1 %317, label %323, label %318

318:                                              ; preds = %292
  %319 = getelementptr inbounds %class.ResizeArrayRaw, ptr %284, i64 0, i32 1
  %320 = load ptr, ptr %319, align 8, !tbaa !34
  %321 = icmp eq ptr %320, null
  br i1 %321, label %323, label %322

322:                                              ; preds = %318
  tail call void @_ZdaPv(ptr noundef nonnull %320) #10
  br label %323

323:                                              ; preds = %322, %318, %292
  %324 = getelementptr inbounds %class.ResizeArrayRaw, ptr %284, i64 0, i32 1
  store ptr %308, ptr %324, align 8, !tbaa !34
  store ptr %313, ptr %284, align 8, !tbaa !33
  store i32 %304, ptr %289, align 4, !tbaa !30
  %325 = load ptr, ptr %283, align 8, !tbaa !25
  br label %326

326:                                              ; preds = %280, %288, %323
  %327 = phi ptr [ %284, %280 ], [ %284, %288 ], [ %325, %323 ]
  store i32 %144, ptr %285, align 8, !tbaa !27
  %328 = load ptr, ptr %327, align 8, !tbaa !33
  %329 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %46, i64 0, i32 6, i32 1
  %330 = load ptr, ptr %329, align 8, !tbaa !25
  %331 = getelementptr inbounds %class.ResizeArrayRaw, ptr %330, i64 0, i32 2
  %332 = load i32, ptr %331, align 8, !tbaa !27
  %333 = icmp slt i32 %332, %144
  br i1 %333, label %334, label %372

334:                                              ; preds = %326
  %335 = getelementptr inbounds %class.ResizeArrayRaw, ptr %330, i64 0, i32 3
  %336 = load i32, ptr %335, align 4, !tbaa !30
  %337 = icmp slt i32 %336, %144
  br i1 %337, label %338, label %372

338:                                              ; preds = %334
  %339 = sitofp i32 %336 to float
  %340 = getelementptr inbounds %class.ResizeArrayRaw, ptr %330, i64 0, i32 5
  %341 = load float, ptr %340, align 4, !tbaa !31
  %342 = fmul float %341, %339
  %343 = fptosi float %342 to i32
  %344 = tail call i32 @llvm.smax.i32(i32 %343, i32 %144)
  %345 = sub nsw i32 %344, %336
  %346 = getelementptr inbounds %class.ResizeArrayRaw, ptr %330, i64 0, i32 6
  %347 = load i32, ptr %346, align 8, !tbaa !32
  %348 = icmp slt i32 %345, %347
  %349 = add nsw i32 %347, %336
  %350 = select i1 %348, i32 %349, i32 %344
  %351 = sext i32 %350 to i64
  %352 = shl nsw i64 %351, 1
  %353 = add nsw i64 %352, 31
  %354 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %353) #9
  %355 = getelementptr inbounds i8, ptr %354, i64 31
  %356 = ptrtoint ptr %355 to i64
  %357 = and i64 %356, 31
  %358 = sub nsw i64 0, %357
  %359 = getelementptr inbounds i8, ptr %355, i64 %358
  %360 = load ptr, ptr %330, align 8, !tbaa !33
  %361 = sext i32 %332 to i64
  %362 = shl nsw i64 %361, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %359, ptr align 1 %360, i64 %362, i1 false)
  %363 = icmp eq i32 %336, 0
  br i1 %363, label %369, label %364

364:                                              ; preds = %338
  %365 = getelementptr inbounds %class.ResizeArrayRaw, ptr %330, i64 0, i32 1
  %366 = load ptr, ptr %365, align 8, !tbaa !34
  %367 = icmp eq ptr %366, null
  br i1 %367, label %369, label %368

368:                                              ; preds = %364
  tail call void @_ZdaPv(ptr noundef nonnull %366) #10
  br label %369

369:                                              ; preds = %368, %364, %338
  %370 = getelementptr inbounds %class.ResizeArrayRaw, ptr %330, i64 0, i32 1
  store ptr %354, ptr %370, align 8, !tbaa !34
  store ptr %359, ptr %330, align 8, !tbaa !33
  store i32 %350, ptr %335, align 4, !tbaa !30
  %371 = load ptr, ptr %329, align 8, !tbaa !25
  br label %372

372:                                              ; preds = %326, %334, %369
  %373 = phi ptr [ %330, %326 ], [ %330, %334 ], [ %371, %369 ]
  store i32 %144, ptr %331, align 8, !tbaa !27
  %374 = load ptr, ptr %373, align 8, !tbaa !33
  %375 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %46, i64 0, i32 15, i32 1
  %376 = load ptr, ptr %375, align 8, !tbaa !25
  %377 = getelementptr inbounds %class.ResizeArrayRaw, ptr %376, i64 0, i32 2
  %378 = load i32, ptr %377, align 8, !tbaa !27
  %379 = icmp slt i32 %378, %144
  br i1 %379, label %380, label %418

380:                                              ; preds = %372
  %381 = getelementptr inbounds %class.ResizeArrayRaw, ptr %376, i64 0, i32 3
  %382 = load i32, ptr %381, align 4, !tbaa !30
  %383 = icmp slt i32 %382, %144
  br i1 %383, label %384, label %418

384:                                              ; preds = %380
  %385 = sitofp i32 %382 to float
  %386 = getelementptr inbounds %class.ResizeArrayRaw, ptr %376, i64 0, i32 5
  %387 = load float, ptr %386, align 4, !tbaa !31
  %388 = fmul float %387, %385
  %389 = fptosi float %388 to i32
  %390 = tail call i32 @llvm.smax.i32(i32 %389, i32 %144)
  %391 = sub nsw i32 %390, %382
  %392 = getelementptr inbounds %class.ResizeArrayRaw, ptr %376, i64 0, i32 6
  %393 = load i32, ptr %392, align 8, !tbaa !32
  %394 = icmp slt i32 %391, %393
  %395 = add nsw i32 %393, %382
  %396 = select i1 %394, i32 %395, i32 %390
  %397 = sext i32 %396 to i64
  %398 = shl nsw i64 %397, 1
  %399 = add nsw i64 %398, 31
  %400 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %399) #9
  %401 = getelementptr inbounds i8, ptr %400, i64 31
  %402 = ptrtoint ptr %401 to i64
  %403 = and i64 %402, 31
  %404 = sub nsw i64 0, %403
  %405 = getelementptr inbounds i8, ptr %401, i64 %404
  %406 = load ptr, ptr %376, align 8, !tbaa !33
  %407 = sext i32 %378 to i64
  %408 = shl nsw i64 %407, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %405, ptr align 1 %406, i64 %408, i1 false)
  %409 = icmp eq i32 %382, 0
  br i1 %409, label %415, label %410

410:                                              ; preds = %384
  %411 = getelementptr inbounds %class.ResizeArrayRaw, ptr %376, i64 0, i32 1
  %412 = load ptr, ptr %411, align 8, !tbaa !34
  %413 = icmp eq ptr %412, null
  br i1 %413, label %415, label %414

414:                                              ; preds = %410
  tail call void @_ZdaPv(ptr noundef nonnull %412) #10
  br label %415

415:                                              ; preds = %414, %410, %384
  %416 = getelementptr inbounds %class.ResizeArrayRaw, ptr %376, i64 0, i32 1
  store ptr %400, ptr %416, align 8, !tbaa !34
  store ptr %405, ptr %376, align 8, !tbaa !33
  store i32 %396, ptr %381, align 4, !tbaa !30
  %417 = load ptr, ptr %375, align 8, !tbaa !25
  br label %418

418:                                              ; preds = %372, %380, %415
  %419 = phi ptr [ %376, %372 ], [ %376, %380 ], [ %417, %415 ]
  store i32 %144, ptr %377, align 8, !tbaa !27
  %420 = load ptr, ptr %419, align 8, !tbaa !33
  %421 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %46, i64 0, i32 16, i32 1
  %422 = load ptr, ptr %421, align 8, !tbaa !25
  %423 = getelementptr inbounds %class.ResizeArrayRaw, ptr %422, i64 0, i32 2
  %424 = load i32, ptr %423, align 8, !tbaa !27
  %425 = icmp slt i32 %424, %144
  br i1 %425, label %426, label %464

426:                                              ; preds = %418
  %427 = getelementptr inbounds %class.ResizeArrayRaw, ptr %422, i64 0, i32 3
  %428 = load i32, ptr %427, align 4, !tbaa !30
  %429 = icmp slt i32 %428, %144
  br i1 %429, label %430, label %464

430:                                              ; preds = %426
  %431 = sitofp i32 %428 to float
  %432 = getelementptr inbounds %class.ResizeArrayRaw, ptr %422, i64 0, i32 5
  %433 = load float, ptr %432, align 4, !tbaa !31
  %434 = fmul float %433, %431
  %435 = fptosi float %434 to i32
  %436 = tail call i32 @llvm.smax.i32(i32 %435, i32 %144)
  %437 = sub nsw i32 %436, %428
  %438 = getelementptr inbounds %class.ResizeArrayRaw, ptr %422, i64 0, i32 6
  %439 = load i32, ptr %438, align 8, !tbaa !32
  %440 = icmp slt i32 %437, %439
  %441 = add nsw i32 %439, %428
  %442 = select i1 %440, i32 %441, i32 %436
  %443 = sext i32 %442 to i64
  %444 = shl nsw i64 %443, 1
  %445 = add nsw i64 %444, 31
  %446 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %445) #9
  %447 = getelementptr inbounds i8, ptr %446, i64 31
  %448 = ptrtoint ptr %447 to i64
  %449 = and i64 %448, 31
  %450 = sub nsw i64 0, %449
  %451 = getelementptr inbounds i8, ptr %447, i64 %450
  %452 = load ptr, ptr %422, align 8, !tbaa !33
  %453 = sext i32 %424 to i64
  %454 = shl nsw i64 %453, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %451, ptr align 1 %452, i64 %454, i1 false)
  %455 = icmp eq i32 %428, 0
  br i1 %455, label %461, label %456

456:                                              ; preds = %430
  %457 = getelementptr inbounds %class.ResizeArrayRaw, ptr %422, i64 0, i32 1
  %458 = load ptr, ptr %457, align 8, !tbaa !34
  %459 = icmp eq ptr %458, null
  br i1 %459, label %461, label %460

460:                                              ; preds = %456
  tail call void @_ZdaPv(ptr noundef nonnull %458) #10
  br label %461

461:                                              ; preds = %460, %456, %430
  %462 = getelementptr inbounds %class.ResizeArrayRaw, ptr %422, i64 0, i32 1
  store ptr %446, ptr %462, align 8, !tbaa !34
  store ptr %451, ptr %422, align 8, !tbaa !33
  store i32 %442, ptr %427, align 4, !tbaa !30
  %463 = load ptr, ptr %421, align 8, !tbaa !25
  br label %464

464:                                              ; preds = %418, %426, %461
  %465 = phi ptr [ %422, %418 ], [ %422, %426 ], [ %463, %461 ]
  store i32 %144, ptr %423, align 8, !tbaa !27
  %466 = load ptr, ptr %465, align 8, !tbaa !33
  br i1 %143, label %599, label %467

467:                                              ; preds = %464
  %468 = icmp sgt i32 %37, 0
  br i1 %468, label %469, label %611

469:                                              ; preds = %467
  %470 = zext i32 %37 to i64
  %471 = and i64 %470, 1
  %472 = icmp eq i32 %37, 1
  br i1 %472, label %505, label %473

473:                                              ; preds = %469
  %474 = and i64 %470, 4294967294
  br label %475

475:                                              ; preds = %500, %473
  %476 = phi i64 [ 0, %473 ], [ %502, %500 ]
  %477 = phi i32 [ 0, %473 ], [ %501, %500 ]
  %478 = phi i64 [ 0, %473 ], [ %503, %500 ]
  %479 = getelementptr inbounds %struct.CompAtom, ptr %40, i64 %476, i32 4
  %480 = load i8, ptr %479, align 1
  %481 = and i8 %480, 7
  %482 = icmp eq i8 %481, 0
  br i1 %482, label %488, label %483

483:                                              ; preds = %475
  %484 = trunc i64 %476 to i16
  %485 = add nsw i32 %477, 1
  %486 = sext i32 %477 to i64
  %487 = getelementptr inbounds i16, ptr %190, i64 %486
  store i16 %484, ptr %487, align 2, !tbaa !44
  br label %488

488:                                              ; preds = %475, %483
  %489 = phi i32 [ %485, %483 ], [ %477, %475 ]
  %490 = or i64 %476, 1
  %491 = getelementptr inbounds %struct.CompAtom, ptr %40, i64 %490, i32 4
  %492 = load i8, ptr %491, align 1
  %493 = and i8 %492, 7
  %494 = icmp eq i8 %493, 0
  br i1 %494, label %500, label %495

495:                                              ; preds = %488
  %496 = trunc i64 %490 to i16
  %497 = add nsw i32 %489, 1
  %498 = sext i32 %489 to i64
  %499 = getelementptr inbounds i16, ptr %190, i64 %498
  store i16 %496, ptr %499, align 2, !tbaa !44
  br label %500

500:                                              ; preds = %495, %488
  %501 = phi i32 [ %497, %495 ], [ %489, %488 ]
  %502 = add nuw nsw i64 %476, 2
  %503 = add i64 %478, 2
  %504 = icmp eq i64 %503, %474
  br i1 %504, label %505, label %475

505:                                              ; preds = %500, %469
  %506 = phi i32 [ undef, %469 ], [ %501, %500 ]
  %507 = phi i64 [ 0, %469 ], [ %502, %500 ]
  %508 = phi i32 [ 0, %469 ], [ %501, %500 ]
  %509 = icmp eq i64 %471, 0
  br i1 %509, label %520, label %510

510:                                              ; preds = %505
  %511 = getelementptr inbounds %struct.CompAtom, ptr %40, i64 %507, i32 4
  %512 = load i8, ptr %511, align 1
  %513 = and i8 %512, 7
  %514 = icmp eq i8 %513, 0
  br i1 %514, label %520, label %515

515:                                              ; preds = %510
  %516 = trunc i64 %507 to i16
  %517 = add nsw i32 %508, 1
  %518 = sext i32 %508 to i64
  %519 = getelementptr inbounds i16, ptr %190, i64 %518
  store i16 %516, ptr %519, align 2, !tbaa !44
  br label %520

520:                                              ; preds = %510, %515, %505
  %521 = phi i32 [ %506, %505 ], [ %517, %515 ], [ %508, %510 ]
  %522 = icmp eq i32 %521, 0
  br i1 %522, label %530, label %523

523:                                              ; preds = %520
  %524 = add nsw i32 %521, -1
  %525 = sext i32 %524 to i64
  %526 = getelementptr inbounds i16, ptr %190, i64 %525
  %527 = load i16, ptr %526, align 2, !tbaa !44
  %528 = sext i32 %521 to i64
  %529 = getelementptr inbounds i16, ptr %190, i64 %528
  store i16 %527, ptr %529, align 2, !tbaa !44
  br label %530

530:                                              ; preds = %523, %520
  %531 = load i32, ptr @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4, !tbaa !5
  %532 = icmp ne i32 %531, 0
  %533 = icmp sgt i32 %521, 0
  %534 = and i1 %532, %533
  br i1 %534, label %535, label %611

535:                                              ; preds = %530
  %536 = zext i32 %521 to i64
  %537 = and i64 %536, 1
  %538 = icmp eq i32 %521, 1
  br i1 %538, label %573, label %539

539:                                              ; preds = %535
  %540 = and i64 %536, 4294967294
  br label %541

541:                                              ; preds = %568, %539
  %542 = phi i64 [ 0, %539 ], [ %570, %568 ]
  %543 = phi i32 [ 0, %539 ], [ %569, %568 ]
  %544 = phi i64 [ 0, %539 ], [ %571, %568 ]
  %545 = getelementptr inbounds i16, ptr %190, i64 %542
  %546 = load i16, ptr %545, align 2, !tbaa !44
  %547 = zext i16 %546 to i64
  %548 = getelementptr inbounds %struct.CompAtomExt, ptr %44, i64 %547
  %549 = load i32, ptr %548, align 4
  %550 = icmp sgt i32 %549, -1
  br i1 %550, label %551, label %555

551:                                              ; preds = %541
  %552 = add nsw i32 %543, 1
  %553 = sext i32 %543 to i64
  %554 = getelementptr inbounds i16, ptr %236, i64 %553
  store i16 %546, ptr %554, align 2, !tbaa !44
  br label %555

555:                                              ; preds = %541, %551
  %556 = phi i32 [ %543, %541 ], [ %552, %551 ]
  %557 = or i64 %542, 1
  %558 = getelementptr inbounds i16, ptr %190, i64 %557
  %559 = load i16, ptr %558, align 2, !tbaa !44
  %560 = zext i16 %559 to i64
  %561 = getelementptr inbounds %struct.CompAtomExt, ptr %44, i64 %560
  %562 = load i32, ptr %561, align 4
  %563 = icmp sgt i32 %562, -1
  br i1 %563, label %564, label %568

564:                                              ; preds = %555
  %565 = add nsw i32 %556, 1
  %566 = sext i32 %556 to i64
  %567 = getelementptr inbounds i16, ptr %236, i64 %566
  store i16 %559, ptr %567, align 2, !tbaa !44
  br label %568

568:                                              ; preds = %564, %555
  %569 = phi i32 [ %556, %555 ], [ %565, %564 ]
  %570 = add nuw nsw i64 %542, 2
  %571 = add i64 %544, 2
  %572 = icmp eq i64 %571, %540
  br i1 %572, label %573, label %541

573:                                              ; preds = %568, %535
  %574 = phi i32 [ undef, %535 ], [ %569, %568 ]
  %575 = phi i64 [ 0, %535 ], [ %570, %568 ]
  %576 = phi i32 [ 0, %535 ], [ %569, %568 ]
  %577 = icmp eq i64 %537, 0
  br i1 %577, label %589, label %578

578:                                              ; preds = %573
  %579 = getelementptr inbounds i16, ptr %190, i64 %575
  %580 = load i16, ptr %579, align 2, !tbaa !44
  %581 = zext i16 %580 to i64
  %582 = getelementptr inbounds %struct.CompAtomExt, ptr %44, i64 %581
  %583 = load i32, ptr %582, align 4
  %584 = icmp sgt i32 %583, -1
  br i1 %584, label %585, label %589

585:                                              ; preds = %578
  %586 = add nsw i32 %576, 1
  %587 = sext i32 %576 to i64
  %588 = getelementptr inbounds i16, ptr %236, i64 %587
  store i16 %580, ptr %588, align 2, !tbaa !44
  br label %589

589:                                              ; preds = %578, %585, %573
  %590 = phi i32 [ %574, %573 ], [ %576, %578 ], [ %586, %585 ]
  %591 = icmp eq i32 %590, 0
  br i1 %591, label %611, label %592

592:                                              ; preds = %589
  %593 = add nsw i32 %590, -1
  %594 = sext i32 %593 to i64
  %595 = getelementptr inbounds i16, ptr %236, i64 %594
  %596 = load i16, ptr %595, align 2, !tbaa !44
  %597 = sext i32 %590 to i64
  %598 = getelementptr inbounds i16, ptr %236, i64 %597
  store i16 %596, ptr %598, align 2, !tbaa !44
  br label %611

599:                                              ; preds = %464
  %600 = load ptr, ptr %8, align 8, !tbaa !46
  %601 = load i32, ptr %13, align 8, !tbaa !17
  %602 = add nsw i32 %601, 1
  store i32 %602, ptr %13, align 8, !tbaa !17
  %603 = sext i32 %601 to i64
  %604 = getelementptr inbounds i16, ptr %600, i64 %603
  %605 = load i16, ptr %604, align 2, !tbaa !44
  %606 = zext i16 %605 to i32
  %607 = icmp eq i32 %35, %606
  br i1 %607, label %628, label %608

608:                                              ; preds = %599
  tail call void @_Z8NAMD_bugPKc(ptr noundef nonnull @.str)
  %609 = load ptr, ptr %8, align 8, !tbaa !46
  %610 = load i32, ptr %13, align 8, !tbaa !17
  br label %628

611:                                              ; preds = %467, %592, %589, %530
  %612 = phi i32 [ %521, %592 ], [ %521, %589 ], [ %521, %530 ], [ 0, %467 ]
  %613 = phi i32 [ %590, %592 ], [ 0, %589 ], [ 0, %530 ], [ 0, %467 ]
  %614 = load i32, ptr %13, align 8, !tbaa !17
  %615 = trunc i32 %35 to i16
  %616 = load ptr, ptr %8, align 8, !tbaa !46
  %617 = sext i32 %614 to i64
  %618 = getelementptr inbounds i16, ptr %616, i64 %617
  store i16 %615, ptr %618, align 2, !tbaa !44
  %619 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 16
  %620 = load i32, ptr %619, align 4, !tbaa !47
  %621 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 18
  %622 = load i32, ptr %621, align 4, !tbaa !48
  %623 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 3, i64 1
  %624 = load ptr, ptr %623, align 8, !tbaa !23
  %625 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 3
  %626 = load ptr, ptr %625, align 8, !tbaa !23
  %627 = add nsw i32 %614, 2
  store i32 %627, ptr %13, align 8, !tbaa !17
  br label %644

628:                                              ; preds = %608, %599
  %629 = phi i32 [ %602, %599 ], [ %610, %608 ]
  %630 = phi ptr [ %600, %599 ], [ %609, %608 ]
  %631 = sext i32 %629 to i64
  %632 = getelementptr inbounds i16, ptr %630, i64 %631
  %633 = load i16, ptr %632, align 2, !tbaa !44
  %634 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 16
  %635 = load i32, ptr %634, align 4, !tbaa !47
  %636 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 18
  %637 = load i32, ptr %636, align 4, !tbaa !48
  %638 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 3, i64 1
  %639 = load ptr, ptr %638, align 8, !tbaa !23
  %640 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 3
  %641 = load ptr, ptr %640, align 8, !tbaa !23
  %642 = add nsw i32 %629, 1
  store i32 %642, ptr %13, align 8, !tbaa !17
  %643 = zext i16 %633 to i32
  br label %644

644:                                              ; preds = %628, %611
  %645 = phi i32 [ %635, %628 ], [ %620, %611 ]
  %646 = phi i32 [ %637, %628 ], [ %622, %611 ]
  %647 = phi ptr [ %639, %628 ], [ %624, %611 ]
  %648 = phi ptr [ %641, %628 ], [ %626, %611 ]
  %649 = phi i32 [ 0, %628 ], [ %613, %611 ]
  %650 = phi i32 [ 0, %628 ], [ %612, %611 ]
  %651 = phi i32 [ %643, %628 ], [ 0, %611 ]
  %652 = add nsw i32 %646, -1
  %653 = icmp slt i32 %651, %35
  br i1 %653, label %654, label %2137

654:                                              ; preds = %644
  %655 = getelementptr inbounds %class.Molecule, ptr %26, i64 0, i32 1
  %656 = getelementptr inbounds %class.Molecule, ptr %26, i64 0, i32 4
  %657 = getelementptr inbounds %class.Molecule, ptr %26, i64 0, i32 2
  %658 = getelementptr inbounds %class.Molecule, ptr %26, i64 0, i32 3
  %659 = ptrtoint ptr %420 to i64
  %660 = add nsw i32 %37, 10
  %661 = getelementptr inbounds %class.Pairlists, ptr %8, i64 0, i32 2
  %662 = getelementptr inbounds i16, ptr %420, i64 1
  %663 = ptrtoint ptr %466 to i64
  %664 = ptrtoint ptr %328 to i64
  %665 = ptrtoint ptr %374 to i64
  %666 = getelementptr inbounds %class.LJTable, ptr %25, i64 0, i32 1
  %667 = getelementptr inbounds %class.LJTable, ptr %25, i64 0, i32 2
  %668 = fneg double %28
  %669 = fadd double %29, -1.000000e+00
  %670 = fadd double %669, 1.000000e+00
  %671 = insertelement <2 x double> poison, double %23, i64 0
  %672 = shufflevector <2 x double> %671, <2 x double> poison, <2 x i32> zeroinitializer
  br label %673

673:                                              ; preds = %654, %2124
  %674 = phi i32 [ 0, %654 ], [ %2131, %2124 ]
  %675 = phi i32 [ %651, %654 ], [ %2130, %2124 ]
  %676 = phi ptr [ null, %654 ], [ %2129, %2124 ]
  %677 = phi ptr [ null, %654 ], [ %2128, %2124 ]
  %678 = phi ptr [ null, %654 ], [ %2127, %2124 ]
  %679 = phi i32 [ 0, %654 ], [ %2126, %2124 ]
  %680 = phi i32 [ %645, %654 ], [ %2125, %2124 ]
  %681 = phi <2 x double> [ zeroinitializer, %654 ], [ %2132, %2124 ]
  %682 = phi <2 x double> [ zeroinitializer, %654 ], [ %2133, %2124 ]
  %683 = phi <2 x double> [ zeroinitializer, %654 ], [ %2134, %2124 ]
  %684 = phi <2 x double> [ zeroinitializer, %654 ], [ %2135, %2124 ]
  %685 = sext i32 %675 to i64
  %686 = getelementptr inbounds %struct.CompAtom, ptr %38, i64 %685
  %687 = getelementptr inbounds %struct.CompAtomExt, ptr %42, i64 %685
  br i1 %143, label %1753, label %688

688:                                              ; preds = %673
  %689 = getelementptr inbounds %struct.CompAtom, ptr %38, i64 %685, i32 4
  %690 = load i8, ptr %689, align 1
  %691 = lshr i8 %690, 3
  %692 = and i8 %691, 15
  %693 = zext i8 %692 to i32
  %694 = icmp eq i8 %692, 0
  br i1 %694, label %700, label %695

695:                                              ; preds = %688
  %696 = icmp eq i32 %680, 0
  br i1 %696, label %700, label %697

697:                                              ; preds = %695
  %698 = add nsw i32 %680, -1
  %699 = add nsw i32 %675, %693
  br label %2124

700:                                              ; preds = %695, %688
  %701 = phi i32 [ %652, %695 ], [ %680, %688 ]
  %702 = load <2 x double>, ptr %686, align 8, !tbaa !19
  %703 = fadd <2 x double> %15, %702
  %704 = getelementptr inbounds %class.Vector, ptr %686, i64 0, i32 2
  %705 = load double, ptr %704, align 8, !tbaa !49
  %706 = fadd double %17, %705
  %707 = load i32, ptr %687, align 4
  %708 = shl i32 %707, 2
  %709 = ashr exact i32 %708, 2
  %710 = load ptr, ptr %655, align 8, !tbaa !51
  %711 = sext i32 %709 to i64
  %712 = getelementptr inbounds %class.ExclusionCheck, ptr %710, i64 %711
  %713 = load i32, ptr %712, align 8, !tbaa !53
  %714 = getelementptr inbounds %class.ExclusionCheck, ptr %710, i64 %711, i32 1
  %715 = load i32, ptr %714, align 4, !tbaa !55
  %716 = getelementptr inbounds %class.ExclusionCheck, ptr %710, i64 %711, i32 2
  %717 = load ptr, ptr %716, align 8, !tbaa !56
  %718 = icmp eq ptr %717, null
  br i1 %718, label %723, label %719

719:                                              ; preds = %700
  %720 = sext i32 %713 to i64
  %721 = sub nsw i64 0, %720
  %722 = getelementptr inbounds i8, ptr %717, i64 %721
  br label %949

723:                                              ; preds = %700
  %724 = icmp eq ptr %676, null
  br i1 %724, label %812, label %725

725:                                              ; preds = %723
  %726 = load i32, ptr %677, align 4, !tbaa !5
  %727 = icmp slt i32 %726, 1
  br i1 %727, label %775, label %728

728:                                              ; preds = %725
  %729 = add nuw i32 %726, 1
  %730 = zext i32 %729 to i64
  %731 = add nsw i64 %730, -1
  %732 = add nsw i64 %730, -2
  %733 = and i64 %731, 3
  %734 = icmp ult i64 %732, 3
  br i1 %734, label %762, label %735

735:                                              ; preds = %728
  %736 = and i64 %731, -4
  br label %737

737:                                              ; preds = %737, %735
  %738 = phi i64 [ 1, %735 ], [ %759, %737 ]
  %739 = phi i64 [ 0, %735 ], [ %760, %737 ]
  %740 = getelementptr inbounds i32, ptr %677, i64 %738
  %741 = load i32, ptr %740, align 4, !tbaa !5
  %742 = sext i32 %741 to i64
  %743 = getelementptr inbounds i8, ptr %676, i64 %742
  store i8 0, ptr %743, align 1, !tbaa !57
  %744 = add nuw nsw i64 %738, 1
  %745 = getelementptr inbounds i32, ptr %677, i64 %744
  %746 = load i32, ptr %745, align 4, !tbaa !5
  %747 = sext i32 %746 to i64
  %748 = getelementptr inbounds i8, ptr %676, i64 %747
  store i8 0, ptr %748, align 1, !tbaa !57
  %749 = add nuw nsw i64 %738, 2
  %750 = getelementptr inbounds i32, ptr %677, i64 %749
  %751 = load i32, ptr %750, align 4, !tbaa !5
  %752 = sext i32 %751 to i64
  %753 = getelementptr inbounds i8, ptr %676, i64 %752
  store i8 0, ptr %753, align 1, !tbaa !57
  %754 = add nuw nsw i64 %738, 3
  %755 = getelementptr inbounds i32, ptr %677, i64 %754
  %756 = load i32, ptr %755, align 4, !tbaa !5
  %757 = sext i32 %756 to i64
  %758 = getelementptr inbounds i8, ptr %676, i64 %757
  store i8 0, ptr %758, align 1, !tbaa !57
  %759 = add nuw nsw i64 %738, 4
  %760 = add i64 %739, 4
  %761 = icmp eq i64 %760, %736
  br i1 %761, label %762, label %737

762:                                              ; preds = %737, %728
  %763 = phi i64 [ 1, %728 ], [ %759, %737 ]
  %764 = icmp eq i64 %733, 0
  br i1 %764, label %775, label %765

765:                                              ; preds = %762, %765
  %766 = phi i64 [ %772, %765 ], [ %763, %762 ]
  %767 = phi i64 [ %773, %765 ], [ 0, %762 ]
  %768 = getelementptr inbounds i32, ptr %677, i64 %766
  %769 = load i32, ptr %768, align 4, !tbaa !5
  %770 = sext i32 %769 to i64
  %771 = getelementptr inbounds i8, ptr %676, i64 %770
  store i8 0, ptr %771, align 1, !tbaa !57
  %772 = add nuw nsw i64 %766, 1
  %773 = add i64 %767, 1
  %774 = icmp eq i64 %773, %733
  br i1 %774, label %775, label %765, !llvm.loop !88

775:                                              ; preds = %762, %765, %725
  %776 = load i32, ptr %678, align 4, !tbaa !5
  %777 = icmp slt i32 %776, 1
  br i1 %777, label %832, label %778

778:                                              ; preds = %775
  %779 = add nuw i32 %776, 1
  %780 = zext i32 %779 to i64
  %781 = add nsw i64 %780, -1
  %782 = add nsw i64 %780, -2
  %783 = and i64 %781, 3
  %784 = icmp ult i64 %782, 3
  br i1 %784, label %819, label %785

785:                                              ; preds = %778
  %786 = and i64 %781, -4
  br label %787

787:                                              ; preds = %787, %785
  %788 = phi i64 [ 1, %785 ], [ %809, %787 ]
  %789 = phi i64 [ 0, %785 ], [ %810, %787 ]
  %790 = getelementptr inbounds i32, ptr %678, i64 %788
  %791 = load i32, ptr %790, align 4, !tbaa !5
  %792 = sext i32 %791 to i64
  %793 = getelementptr inbounds i8, ptr %676, i64 %792
  store i8 0, ptr %793, align 1, !tbaa !57
  %794 = add nuw nsw i64 %788, 1
  %795 = getelementptr inbounds i32, ptr %678, i64 %794
  %796 = load i32, ptr %795, align 4, !tbaa !5
  %797 = sext i32 %796 to i64
  %798 = getelementptr inbounds i8, ptr %676, i64 %797
  store i8 0, ptr %798, align 1, !tbaa !57
  %799 = add nuw nsw i64 %788, 2
  %800 = getelementptr inbounds i32, ptr %678, i64 %799
  %801 = load i32, ptr %800, align 4, !tbaa !5
  %802 = sext i32 %801 to i64
  %803 = getelementptr inbounds i8, ptr %676, i64 %802
  store i8 0, ptr %803, align 1, !tbaa !57
  %804 = add nuw nsw i64 %788, 3
  %805 = getelementptr inbounds i32, ptr %678, i64 %804
  %806 = load i32, ptr %805, align 4, !tbaa !5
  %807 = sext i32 %806 to i64
  %808 = getelementptr inbounds i8, ptr %676, i64 %807
  store i8 0, ptr %808, align 1, !tbaa !57
  %809 = add nuw nsw i64 %788, 4
  %810 = add i64 %789, 4
  %811 = icmp eq i64 %810, %786
  br i1 %811, label %819, label %787

812:                                              ; preds = %723
  %813 = load i32, ptr %656, align 8, !tbaa !60
  %814 = tail call i32 @llvm.smax.i32(i32 %813, i32 -1)
  %815 = sext i32 %814 to i64
  %816 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %815) #9
  %817 = load i32, ptr %656, align 8, !tbaa !60
  %818 = sext i32 %817 to i64
  tail call void @llvm.memset.p0.i64(ptr nonnull align 1 %816, i8 0, i64 %818, i1 false)
  br label %832

819:                                              ; preds = %787, %778
  %820 = phi i64 [ 1, %778 ], [ %809, %787 ]
  %821 = icmp eq i64 %783, 0
  br i1 %821, label %832, label %822

822:                                              ; preds = %819, %822
  %823 = phi i64 [ %829, %822 ], [ %820, %819 ]
  %824 = phi i64 [ %830, %822 ], [ 0, %819 ]
  %825 = getelementptr inbounds i32, ptr %678, i64 %823
  %826 = load i32, ptr %825, align 4, !tbaa !5
  %827 = sext i32 %826 to i64
  %828 = getelementptr inbounds i8, ptr %676, i64 %827
  store i8 0, ptr %828, align 1, !tbaa !57
  %829 = add nuw nsw i64 %823, 1
  %830 = add i64 %824, 1
  %831 = icmp eq i64 %830, %783
  br i1 %831, label %832, label %822, !llvm.loop !89

832:                                              ; preds = %819, %822, %775, %812
  %833 = phi ptr [ %816, %812 ], [ %676, %775 ], [ %676, %822 ], [ %676, %819 ]
  %834 = load i32, ptr %687, align 4
  %835 = shl i32 %834, 2
  %836 = ashr exact i32 %835, 2
  %837 = load ptr, ptr %657, align 8, !tbaa !62
  %838 = sext i32 %836 to i64
  %839 = getelementptr inbounds ptr, ptr %837, i64 %838
  %840 = load ptr, ptr %839, align 8, !tbaa !23
  %841 = load i32, ptr %840, align 4, !tbaa !5
  %842 = icmp slt i32 %841, 1
  br i1 %842, label %895, label %843

843:                                              ; preds = %832
  %844 = add nuw i32 %841, 1
  %845 = zext i32 %844 to i64
  %846 = add nsw i64 %845, -1
  %847 = add nsw i64 %845, -2
  %848 = and i64 %846, 3
  %849 = icmp ult i64 %847, 3
  br i1 %849, label %877, label %850

850:                                              ; preds = %843
  %851 = and i64 %846, -4
  br label %852

852:                                              ; preds = %852, %850
  %853 = phi i64 [ 1, %850 ], [ %874, %852 ]
  %854 = phi i64 [ 0, %850 ], [ %875, %852 ]
  %855 = getelementptr inbounds i32, ptr %840, i64 %853
  %856 = load i32, ptr %855, align 4, !tbaa !5
  %857 = sext i32 %856 to i64
  %858 = getelementptr inbounds i8, ptr %833, i64 %857
  store i8 1, ptr %858, align 1, !tbaa !57
  %859 = add nuw nsw i64 %853, 1
  %860 = getelementptr inbounds i32, ptr %840, i64 %859
  %861 = load i32, ptr %860, align 4, !tbaa !5
  %862 = sext i32 %861 to i64
  %863 = getelementptr inbounds i8, ptr %833, i64 %862
  store i8 1, ptr %863, align 1, !tbaa !57
  %864 = add nuw nsw i64 %853, 2
  %865 = getelementptr inbounds i32, ptr %840, i64 %864
  %866 = load i32, ptr %865, align 4, !tbaa !5
  %867 = sext i32 %866 to i64
  %868 = getelementptr inbounds i8, ptr %833, i64 %867
  store i8 1, ptr %868, align 1, !tbaa !57
  %869 = add nuw nsw i64 %853, 3
  %870 = getelementptr inbounds i32, ptr %840, i64 %869
  %871 = load i32, ptr %870, align 4, !tbaa !5
  %872 = sext i32 %871 to i64
  %873 = getelementptr inbounds i8, ptr %833, i64 %872
  store i8 1, ptr %873, align 1, !tbaa !57
  %874 = add nuw nsw i64 %853, 4
  %875 = add i64 %854, 4
  %876 = icmp eq i64 %875, %851
  br i1 %876, label %877, label %852

877:                                              ; preds = %852, %843
  %878 = phi i64 [ 1, %843 ], [ %874, %852 ]
  %879 = icmp eq i64 %848, 0
  br i1 %879, label %890, label %880

880:                                              ; preds = %877, %880
  %881 = phi i64 [ %887, %880 ], [ %878, %877 ]
  %882 = phi i64 [ %888, %880 ], [ 0, %877 ]
  %883 = getelementptr inbounds i32, ptr %840, i64 %881
  %884 = load i32, ptr %883, align 4, !tbaa !5
  %885 = sext i32 %884 to i64
  %886 = getelementptr inbounds i8, ptr %833, i64 %885
  store i8 1, ptr %886, align 1, !tbaa !57
  %887 = add nuw nsw i64 %881, 1
  %888 = add i64 %882, 1
  %889 = icmp eq i64 %888, %848
  br i1 %889, label %890, label %880, !llvm.loop !90

890:                                              ; preds = %880, %877
  %891 = load i32, ptr %687, align 4
  %892 = shl i32 %891, 2
  %893 = ashr exact i32 %892, 2
  %894 = sext i32 %893 to i64
  br label %895

895:                                              ; preds = %890, %832
  %896 = phi i64 [ %894, %890 ], [ %838, %832 ]
  %897 = load ptr, ptr %658, align 8, !tbaa !64
  %898 = getelementptr inbounds ptr, ptr %897, i64 %896
  %899 = load ptr, ptr %898, align 8, !tbaa !23
  %900 = load i32, ptr %899, align 4, !tbaa !5
  %901 = icmp slt i32 %900, 1
  br i1 %901, label %949, label %902

902:                                              ; preds = %895
  %903 = add nuw i32 %900, 1
  %904 = zext i32 %903 to i64
  %905 = add nsw i64 %904, -1
  %906 = add nsw i64 %904, -2
  %907 = and i64 %905, 3
  %908 = icmp ult i64 %906, 3
  br i1 %908, label %936, label %909

909:                                              ; preds = %902
  %910 = and i64 %905, -4
  br label %911

911:                                              ; preds = %911, %909
  %912 = phi i64 [ 1, %909 ], [ %933, %911 ]
  %913 = phi i64 [ 0, %909 ], [ %934, %911 ]
  %914 = getelementptr inbounds i32, ptr %899, i64 %912
  %915 = load i32, ptr %914, align 4, !tbaa !5
  %916 = sext i32 %915 to i64
  %917 = getelementptr inbounds i8, ptr %833, i64 %916
  store i8 2, ptr %917, align 1, !tbaa !57
  %918 = add nuw nsw i64 %912, 1
  %919 = getelementptr inbounds i32, ptr %899, i64 %918
  %920 = load i32, ptr %919, align 4, !tbaa !5
  %921 = sext i32 %920 to i64
  %922 = getelementptr inbounds i8, ptr %833, i64 %921
  store i8 2, ptr %922, align 1, !tbaa !57
  %923 = add nuw nsw i64 %912, 2
  %924 = getelementptr inbounds i32, ptr %899, i64 %923
  %925 = load i32, ptr %924, align 4, !tbaa !5
  %926 = sext i32 %925 to i64
  %927 = getelementptr inbounds i8, ptr %833, i64 %926
  store i8 2, ptr %927, align 1, !tbaa !57
  %928 = add nuw nsw i64 %912, 3
  %929 = getelementptr inbounds i32, ptr %899, i64 %928
  %930 = load i32, ptr %929, align 4, !tbaa !5
  %931 = sext i32 %930 to i64
  %932 = getelementptr inbounds i8, ptr %833, i64 %931
  store i8 2, ptr %932, align 1, !tbaa !57
  %933 = add nuw nsw i64 %912, 4
  %934 = add i64 %913, 4
  %935 = icmp eq i64 %934, %910
  br i1 %935, label %936, label %911

936:                                              ; preds = %911, %902
  %937 = phi i64 [ 1, %902 ], [ %933, %911 ]
  %938 = icmp eq i64 %907, 0
  br i1 %938, label %949, label %939

939:                                              ; preds = %936, %939
  %940 = phi i64 [ %946, %939 ], [ %937, %936 ]
  %941 = phi i64 [ %947, %939 ], [ 0, %936 ]
  %942 = getelementptr inbounds i32, ptr %899, i64 %940
  %943 = load i32, ptr %942, align 4, !tbaa !5
  %944 = sext i32 %943 to i64
  %945 = getelementptr inbounds i8, ptr %833, i64 %944
  store i8 2, ptr %945, align 1, !tbaa !57
  %946 = add nuw nsw i64 %940, 1
  %947 = add i64 %941, 1
  %948 = icmp eq i64 %947, %907
  br i1 %948, label %949, label %939, !llvm.loop !91

949:                                              ; preds = %936, %939, %895, %719
  %950 = phi ptr [ %722, %719 ], [ %833, %895 ], [ %833, %939 ], [ %833, %936 ]
  %951 = phi ptr [ %678, %719 ], [ %899, %895 ], [ %899, %939 ], [ %899, %936 ]
  %952 = phi ptr [ %677, %719 ], [ %840, %895 ], [ %840, %939 ], [ %840, %936 ]
  %953 = phi ptr [ %676, %719 ], [ %833, %895 ], [ %833, %939 ], [ %833, %936 ]
  %954 = load i8, ptr %689, align 1
  %955 = and i8 %954, 7
  %956 = icmp eq i8 %955, 0
  %957 = load i32, ptr @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4, !tbaa !5
  br i1 %956, label %1140, label %958

958:                                              ; preds = %949
  %959 = icmp eq i32 %957, 0
  br i1 %959, label %966, label %960

960:                                              ; preds = %958
  %961 = load i32, ptr %687, align 4
  %962 = freeze i32 %961
  %963 = icmp slt i32 %962, 0
  %964 = select i1 %963, ptr %236, ptr %190
  %965 = select i1 %963, i32 %649, i32 %650
  br label %966

966:                                              ; preds = %960, %958
  %967 = phi ptr [ %190, %958 ], [ %964, %960 ]
  %968 = phi i32 [ %650, %958 ], [ %965, %960 ]
  %969 = icmp sgt i32 %968, 0
  br i1 %969, label %970, label %1121

970:                                              ; preds = %966
  %971 = icmp ugt i32 %968, 6
  br i1 %971, label %972, label %1056

972:                                              ; preds = %970
  %973 = add nsw i32 %968, -2
  %974 = getelementptr inbounds i16, ptr %967, i64 1
  %975 = load i16, ptr %974, align 2, !tbaa !44
  %976 = zext i16 %975 to i64
  %977 = getelementptr inbounds %struct.CompAtom, ptr %40, i64 %976
  %978 = getelementptr inbounds %class.Vector, ptr %977, i64 0, i32 2
  %979 = load double, ptr %978, align 8, !tbaa !49
  %980 = load i16, ptr %967, align 2, !tbaa !44
  %981 = zext i16 %980 to i64
  %982 = getelementptr inbounds %struct.CompAtom, ptr %40, i64 %981
  %983 = getelementptr inbounds %class.Vector, ptr %982, i64 0, i32 2
  %984 = load double, ptr %983, align 8, !tbaa !49
  %985 = getelementptr inbounds %class.Vector, ptr %977, i64 0, i32 1
  %986 = load double, ptr %985, align 8, !tbaa !66
  %987 = getelementptr inbounds %class.Vector, ptr %982, i64 0, i32 1
  %988 = load double, ptr %987, align 8, !tbaa !66
  %989 = load double, ptr %977, align 8, !tbaa !67
  %990 = load double, ptr %982, align 8, !tbaa !67
  %991 = zext i32 %973 to i64
  %992 = insertelement <2 x double> poison, double %979, i64 0
  %993 = insertelement <2 x double> %992, double %984, i64 1
  %994 = insertelement <2 x double> poison, double %986, i64 0
  %995 = insertelement <2 x double> %994, double %988, i64 1
  %996 = insertelement <2 x double> poison, double %989, i64 0
  %997 = insertelement <2 x double> %996, double %990, i64 1
  %998 = insertelement <2 x double> poison, double %706, i64 0
  %999 = shufflevector <2 x double> %998, <2 x double> poison, <2 x i32> zeroinitializer
  %1000 = shufflevector <2 x double> %703, <2 x double> poison, <2 x i32> <i32 1, i32 1>
  %1001 = shufflevector <2 x double> %703, <2 x double> poison, <2 x i32> zeroinitializer
  br label %1002

1002:                                             ; preds = %972, %1002
  %1003 = phi i64 [ 2, %972 ], [ %1046, %1002 ]
  %1004 = phi i32 [ 0, %972 ], [ %1045, %1002 ]
  %1005 = phi i16 [ %980, %972 ], [ %1012, %1002 ]
  %1006 = phi i16 [ %975, %972 ], [ %1015, %1002 ]
  %1007 = phi <2 x double> [ %993, %972 ], [ %1049, %1002 ]
  %1008 = phi <2 x double> [ %995, %972 ], [ %1051, %1002 ]
  %1009 = phi <2 x double> [ %997, %972 ], [ %1053, %1002 ]
  %1010 = fsub <2 x double> %999, %1007
  %1011 = getelementptr inbounds i16, ptr %967, i64 %1003
  %1012 = load i16, ptr %1011, align 2, !tbaa !44
  %1013 = or i64 %1003, 1
  %1014 = getelementptr inbounds i16, ptr %967, i64 %1013
  %1015 = load i16, ptr %1014, align 2, !tbaa !44
  %1016 = zext i16 %1012 to i64
  %1017 = getelementptr inbounds %struct.CompAtom, ptr %40, i64 %1016
  %1018 = load double, ptr %1017, align 8, !tbaa !67
  %1019 = zext i16 %1015 to i64
  %1020 = getelementptr inbounds %struct.CompAtom, ptr %40, i64 %1019
  %1021 = load double, ptr %1020, align 8, !tbaa !67
  %1022 = getelementptr inbounds %class.Vector, ptr %1017, i64 0, i32 1
  %1023 = load double, ptr %1022, align 8, !tbaa !66
  %1024 = getelementptr inbounds %class.Vector, ptr %1020, i64 0, i32 1
  %1025 = load double, ptr %1024, align 8, !tbaa !66
  %1026 = getelementptr inbounds %class.Vector, ptr %1017, i64 0, i32 2
  %1027 = load double, ptr %1026, align 8, !tbaa !49
  %1028 = getelementptr inbounds %class.Vector, ptr %1020, i64 0, i32 2
  %1029 = load double, ptr %1028, align 8, !tbaa !49
  %1030 = fsub <2 x double> %1001, %1009
  %1031 = fmul <2 x double> %1030, %1030
  %1032 = fsub <2 x double> %1000, %1008
  %1033 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %1032, <2 x double> %1032, <2 x double> %1031)
  %1034 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %1010, <2 x double> %1010, <2 x double> %1033)
  %1035 = fcmp olt <2 x double> %1034, %672
  %1036 = zext i32 %1004 to i64
  %1037 = getelementptr inbounds i16, ptr %282, i64 %1036
  store i16 %1005, ptr %1037, align 2, !tbaa !44
  %1038 = extractelement <2 x i1> %1035, i64 1
  %1039 = zext i1 %1038 to i32
  %1040 = add nuw nsw i32 %1004, %1039
  %1041 = zext i32 %1040 to i64
  %1042 = getelementptr inbounds i16, ptr %282, i64 %1041
  store i16 %1006, ptr %1042, align 2, !tbaa !44
  %1043 = extractelement <2 x i1> %1035, i64 0
  %1044 = zext i1 %1043 to i32
  %1045 = add i32 %1040, %1044
  %1046 = add nuw nsw i64 %1003, 2
  %1047 = icmp ult i64 %1046, %991
  %1048 = insertelement <2 x double> poison, double %1029, i64 0
  %1049 = insertelement <2 x double> %1048, double %1027, i64 1
  %1050 = insertelement <2 x double> poison, double %1025, i64 0
  %1051 = insertelement <2 x double> %1050, double %1023, i64 1
  %1052 = insertelement <2 x double> poison, double %1021, i64 0
  %1053 = insertelement <2 x double> %1052, double %1018, i64 1
  br i1 %1047, label %1002, label %1054

1054:                                             ; preds = %1002
  %1055 = trunc i64 %1003 to i32
  br label %1056

1056:                                             ; preds = %1054, %970
  %1057 = phi i32 [ %1045, %1054 ], [ 0, %970 ]
  %1058 = phi i32 [ %1055, %1054 ], [ 0, %970 ]
  %1059 = icmp slt i32 %1058, %968
  br i1 %1059, label %1060, label %1065

1060:                                             ; preds = %1056
  %1061 = zext i32 %1058 to i64
  %1062 = zext i32 %968 to i64
  %1063 = extractelement <2 x double> %703, i64 0
  %1064 = extractelement <2 x double> %703, i64 1
  br label %1070

1065:                                             ; preds = %1093, %1056
  %1066 = phi i32 [ %1057, %1056 ], [ %1094, %1093 ]
  %1067 = icmp sgt i32 %1066, 0
  br i1 %1067, label %1068, label %1121

1068:                                             ; preds = %1065
  %1069 = zext i32 %1066 to i64
  br label %1097

1070:                                             ; preds = %1060, %1093
  %1071 = phi i64 [ %1061, %1060 ], [ %1095, %1093 ]
  %1072 = phi i32 [ %1057, %1060 ], [ %1094, %1093 ]
  %1073 = getelementptr inbounds i16, ptr %967, i64 %1071
  %1074 = load i16, ptr %1073, align 2, !tbaa !44
  %1075 = zext i16 %1074 to i64
  %1076 = getelementptr inbounds %struct.CompAtom, ptr %40, i64 %1075
  %1077 = load double, ptr %1076, align 8, !tbaa !67
  %1078 = getelementptr inbounds %class.Vector, ptr %1076, i64 0, i32 1
  %1079 = load double, ptr %1078, align 8, !tbaa !66
  %1080 = getelementptr inbounds %class.Vector, ptr %1076, i64 0, i32 2
  %1081 = load double, ptr %1080, align 8, !tbaa !49
  %1082 = fsub double %1063, %1077
  %1083 = fmul double %1082, %1082
  %1084 = fsub double %1064, %1079
  %1085 = tail call double @llvm.fmuladd.f64(double %1084, double %1084, double %1083)
  %1086 = fsub double %706, %1081
  %1087 = tail call double @llvm.fmuladd.f64(double %1086, double %1086, double %1085)
  %1088 = fcmp ugt double %1087, %23
  br i1 %1088, label %1093, label %1089

1089:                                             ; preds = %1070
  %1090 = add nsw i32 %1072, 1
  %1091 = sext i32 %1072 to i64
  %1092 = getelementptr inbounds i16, ptr %282, i64 %1091
  store i16 %1074, ptr %1092, align 2, !tbaa !44
  br label %1093

1093:                                             ; preds = %1089, %1070
  %1094 = phi i32 [ %1090, %1089 ], [ %1072, %1070 ]
  %1095 = add nuw nsw i64 %1071, 1
  %1096 = icmp eq i64 %1095, %1062
  br i1 %1096, label %1065, label %1070

1097:                                             ; preds = %1068, %1114
  %1098 = phi i64 [ 0, %1068 ], [ %1117, %1114 ]
  %1099 = phi ptr [ %420, %1068 ], [ %1116, %1114 ]
  %1100 = getelementptr inbounds i16, ptr %282, i64 %1098
  %1101 = load i16, ptr %1100, align 2, !tbaa !44
  %1102 = zext i16 %1101 to i64
  %1103 = getelementptr inbounds %struct.CompAtom, ptr %40, i64 %1102, i32 4
  %1104 = load i8, ptr %1103, align 1
  %1105 = and i8 %1104, 7
  store i16 %1101, ptr %1099, align 2, !tbaa !44
  %1106 = getelementptr inbounds i16, ptr %1099, i64 1
  %1107 = insertelement <2 x i16> poison, i16 %1101, i64 0
  %1108 = shufflevector <2 x i16> %1107, <2 x i16> poison, <2 x i32> zeroinitializer
  %1109 = add <2 x i16> %1108, <i16 1, i16 2>
  store <2 x i16> %1109, ptr %1106, align 2, !tbaa !44
  %1110 = icmp ult i8 %1105, 4
  br i1 %1110, label %1114, label %1111

1111:                                             ; preds = %1097
  %1112 = add <2 x i16> %1108, <i16 3, i16 4>
  %1113 = getelementptr inbounds i16, ptr %1099, i64 3
  store <2 x i16> %1112, ptr %1113, align 2, !tbaa !44
  br label %1114

1114:                                             ; preds = %1111, %1097
  %1115 = zext i8 %1105 to i64
  %1116 = getelementptr inbounds i16, ptr %1099, i64 %1115
  %1117 = add nuw nsw i64 %1098, 1
  %1118 = icmp eq i64 %1117, %1069
  br i1 %1118, label %1119, label %1097

1119:                                             ; preds = %1114
  %1120 = ptrtoint ptr %1116 to i64
  br label %1121

1121:                                             ; preds = %1119, %1065, %966
  %1122 = phi i64 [ %1120, %1119 ], [ %659, %1065 ], [ %659, %966 ]
  %1123 = sub i64 %1122, %659
  %1124 = lshr exact i64 %1123, 1
  %1125 = trunc i64 %1124 to i32
  %1126 = icmp eq i32 %1125, 0
  br i1 %1126, label %1127, label %1132

1127:                                             ; preds = %1121
  %1128 = load i8, ptr %689, align 1
  %1129 = and i8 %1128, 7
  %1130 = zext i8 %1129 to i32
  %1131 = add nsw i32 %675, %1130
  br label %2124

1132:                                             ; preds = %1121
  %1133 = shl i64 %1123, 31
  %1134 = add i64 %1133, -4294967296
  %1135 = ashr i64 %1134, 32
  %1136 = getelementptr inbounds i16, ptr %420, i64 %1135
  %1137 = load i16, ptr %1136, align 2, !tbaa !44
  %1138 = ashr i64 %1133, 32
  %1139 = getelementptr inbounds i16, ptr %420, i64 %1138
  store i16 %1137, ptr %1139, align 2, !tbaa !44
  br label %1140

1140:                                             ; preds = %1132, %949
  %1141 = phi i32 [ %1125, %1132 ], [ %679, %949 ]
  %1142 = icmp eq i32 %957, 0
  br i1 %1142, label %1147, label %1143

1143:                                             ; preds = %1140
  %1144 = load i32, ptr %687, align 4
  %1145 = and i32 %1144, 1073741824
  %1146 = icmp ne i32 %1145, 0
  br label %1147

1147:                                             ; preds = %1143, %1140
  %1148 = phi i1 [ false, %1140 ], [ %1146, %1143 ]
  %1149 = load i32, ptr %13, align 8, !tbaa !17
  %1150 = add nsw i32 %660, %1149
  %1151 = load i32, ptr %661, align 4, !tbaa !68
  %1152 = icmp sgt i32 %1151, %1150
  br i1 %1152, label %1168, label %1153

1153:                                             ; preds = %1147, %1153
  %1154 = phi i32 [ %1156, %1153 ], [ %1151, %1147 ]
  %1155 = ashr i32 %1154, 1
  %1156 = add nsw i32 %1155, %1154
  %1157 = icmp sgt i32 %1156, %1150
  br i1 %1157, label %1158, label %1153

1158:                                             ; preds = %1153
  %1159 = sext i32 %1156 to i64
  %1160 = icmp slt i32 %1156, 0
  %1161 = shl nsw i64 %1159, 1
  %1162 = select i1 %1160, i64 -1, i64 %1161
  %1163 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %1162) #9
  %1164 = load ptr, ptr %8, align 8, !tbaa !46
  %1165 = sext i32 %1149 to i64
  %1166 = shl nsw i64 %1165, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 2 %1163, ptr align 2 %1164, i64 %1166, i1 false)
  %1167 = icmp eq ptr %1164, null
  br i1 %1167, label %1172, label %1170

1168:                                             ; preds = %1147
  %1169 = load ptr, ptr %8, align 8, !tbaa !46
  br label %1174

1170:                                             ; preds = %1158
  tail call void @_ZdaPv(ptr noundef nonnull %1164) #10
  %1171 = load i32, ptr %13, align 8, !tbaa !17
  br label %1172

1172:                                             ; preds = %1170, %1158
  %1173 = phi i32 [ %1171, %1170 ], [ %1149, %1158 ]
  store ptr %1163, ptr %8, align 8, !tbaa !46
  store i32 %1156, ptr %661, align 4, !tbaa !68
  br label %1174

1174:                                             ; preds = %1168, %1172
  %1175 = phi i32 [ %1149, %1168 ], [ %1173, %1172 ]
  %1176 = phi ptr [ %1169, %1168 ], [ %1163, %1172 ]
  %1177 = ptrtoint ptr %1176 to i64
  %1178 = add nsw i32 %1175, 1
  %1179 = sext i32 %1178 to i64
  %1180 = getelementptr inbounds i16, ptr %1176, i64 %1179
  %1181 = icmp sgt i32 %1141, 0
  br i1 %1148, label %1182, label %1229

1182:                                             ; preds = %1174
  br i1 %1181, label %1183, label %1389

1183:                                             ; preds = %1182
  %1184 = zext i32 %1141 to i64
  %1185 = extractelement <2 x double> %703, i64 0
  %1186 = extractelement <2 x double> %703, i64 1
  br label %1187

1187:                                             ; preds = %1183, %1224
  %1188 = phi i64 [ 0, %1183 ], [ %1227, %1224 ]
  %1189 = phi ptr [ %466, %1183 ], [ %1226, %1224 ]
  %1190 = phi ptr [ %1180, %1183 ], [ %1225, %1224 ]
  %1191 = getelementptr inbounds i16, ptr %420, i64 %1188
  %1192 = load i16, ptr %1191, align 2, !tbaa !44
  %1193 = zext i16 %1192 to i64
  %1194 = getelementptr inbounds %struct.CompAtomExt, ptr %44, i64 %1193
  %1195 = load i32, ptr %1194, align 4
  %1196 = and i32 %1195, 1073741824
  %1197 = icmp eq i32 %1196, 0
  br i1 %1197, label %1198, label %1224

1198:                                             ; preds = %1187
  %1199 = getelementptr inbounds %struct.CompAtom, ptr %40, i64 %1193
  %1200 = getelementptr inbounds %class.Vector, ptr %1199, i64 0, i32 2
  %1201 = load double, ptr %1200, align 8, !tbaa !49
  %1202 = fsub double %706, %1201
  %1203 = getelementptr inbounds %class.Vector, ptr %1199, i64 0, i32 1
  %1204 = load double, ptr %1203, align 8, !tbaa !66
  %1205 = fsub double %1186, %1204
  %1206 = load double, ptr %1199, align 8, !tbaa !67
  %1207 = fsub double %1185, %1206
  %1208 = fmul double %1207, %1207
  %1209 = tail call double @llvm.fmuladd.f64(double %1205, double %1205, double %1208)
  %1210 = tail call double @llvm.fmuladd.f64(double %1202, double %1202, double %1209)
  %1211 = fcmp ugt double %1210, %20
  br i1 %1211, label %1224, label %1212

1212:                                             ; preds = %1198
  %1213 = shl i32 %1195, 2
  %1214 = ashr exact i32 %1213, 2
  %1215 = icmp slt i32 %1214, %713
  %1216 = icmp sgt i32 %1214, %715
  %1217 = select i1 %1215, i1 true, i1 %1216
  %1218 = select i1 %1217, ptr %1190, ptr %1189
  %1219 = zext i1 %1217 to i64
  %1220 = getelementptr inbounds i16, ptr %1190, i64 %1219
  %1221 = xor i1 %1217, true
  %1222 = zext i1 %1221 to i64
  %1223 = getelementptr inbounds i16, ptr %1189, i64 %1222
  store i16 %1192, ptr %1218, align 2, !tbaa !44
  br label %1224

1224:                                             ; preds = %1212, %1198, %1187
  %1225 = phi ptr [ %1190, %1187 ], [ %1190, %1198 ], [ %1220, %1212 ]
  %1226 = phi ptr [ %1189, %1187 ], [ %1189, %1198 ], [ %1223, %1212 ]
  %1227 = add nuw nsw i64 %1188, 1
  %1228 = icmp eq i64 %1227, %1184
  br i1 %1228, label %1389, label %1187

1229:                                             ; preds = %1174
  br i1 %1181, label %1230, label %1389

1230:                                             ; preds = %1229
  %1231 = icmp ugt i32 %1141, 6
  br i1 %1231, label %1232, label %1340

1232:                                             ; preds = %1230
  %1233 = add nsw i32 %1141, -2
  %1234 = load i16, ptr %420, align 2, !tbaa !44
  %1235 = zext i16 %1234 to i64
  %1236 = getelementptr inbounds %struct.CompAtomExt, ptr %44, i64 %1235
  %1237 = load i32, ptr %1236, align 4
  %1238 = load i16, ptr %662, align 2, !tbaa !44
  %1239 = zext i16 %1238 to i64
  %1240 = getelementptr inbounds %struct.CompAtom, ptr %40, i64 %1239
  %1241 = getelementptr inbounds %class.Vector, ptr %1240, i64 0, i32 2
  %1242 = load double, ptr %1241, align 8, !tbaa !49
  %1243 = getelementptr inbounds %struct.CompAtom, ptr %40, i64 %1235
  %1244 = getelementptr inbounds %class.Vector, ptr %1243, i64 0, i32 2
  %1245 = load double, ptr %1244, align 8, !tbaa !49
  %1246 = getelementptr inbounds %class.Vector, ptr %1240, i64 0, i32 1
  %1247 = load double, ptr %1246, align 8, !tbaa !66
  %1248 = getelementptr inbounds %class.Vector, ptr %1243, i64 0, i32 1
  %1249 = load double, ptr %1248, align 8, !tbaa !66
  %1250 = load double, ptr %1240, align 8, !tbaa !67
  %1251 = load double, ptr %1243, align 8, !tbaa !67
  %1252 = zext i32 %1233 to i64
  %1253 = extractelement <2 x double> %703, i64 0
  %1254 = extractelement <2 x double> %703, i64 1
  br label %1255

1255:                                             ; preds = %1232, %1333
  %1256 = phi i64 [ 2, %1232 ], [ %1336, %1333 ]
  %1257 = phi i64 [ %1239, %1232 ], [ %1293, %1333 ]
  %1258 = phi i32 [ %1237, %1232 ], [ %1321, %1333 ]
  %1259 = phi ptr [ %466, %1232 ], [ %1335, %1333 ]
  %1260 = phi ptr [ %1180, %1232 ], [ %1334, %1333 ]
  %1261 = phi i16 [ %1234, %1232 ], [ %1286, %1333 ]
  %1262 = phi i16 [ %1238, %1232 ], [ %1289, %1333 ]
  %1263 = phi double [ %1251, %1232 ], [ %1292, %1333 ]
  %1264 = phi double [ %1250, %1232 ], [ %1295, %1333 ]
  %1265 = phi double [ %1249, %1232 ], [ %1297, %1333 ]
  %1266 = phi double [ %1247, %1232 ], [ %1299, %1333 ]
  %1267 = phi double [ %1245, %1232 ], [ %1301, %1333 ]
  %1268 = phi double [ %1242, %1232 ], [ %1303, %1333 ]
  %1269 = getelementptr inbounds %struct.CompAtomExt, ptr %44, i64 %1257
  %1270 = load i32, ptr %1269, align 4
  %1271 = shl i32 %1270, 2
  %1272 = ashr exact i32 %1271, 2
  %1273 = fsub double %1253, %1263
  %1274 = fsub double %1253, %1264
  %1275 = fmul double %1273, %1273
  %1276 = fmul double %1274, %1274
  %1277 = fsub double %1254, %1265
  %1278 = fsub double %1254, %1266
  %1279 = tail call double @llvm.fmuladd.f64(double %1277, double %1277, double %1275)
  %1280 = tail call double @llvm.fmuladd.f64(double %1278, double %1278, double %1276)
  %1281 = fsub double %706, %1267
  %1282 = fsub double %706, %1268
  %1283 = tail call double @llvm.fmuladd.f64(double %1281, double %1281, double %1279)
  %1284 = tail call double @llvm.fmuladd.f64(double %1282, double %1282, double %1280)
  %1285 = getelementptr inbounds i16, ptr %420, i64 %1256
  %1286 = load i16, ptr %1285, align 2, !tbaa !44
  %1287 = or i64 %1256, 1
  %1288 = getelementptr inbounds i16, ptr %420, i64 %1287
  %1289 = load i16, ptr %1288, align 2, !tbaa !44
  %1290 = zext i16 %1286 to i64
  %1291 = getelementptr inbounds %struct.CompAtom, ptr %40, i64 %1290
  %1292 = load double, ptr %1291, align 8, !tbaa !67
  %1293 = zext i16 %1289 to i64
  %1294 = getelementptr inbounds %struct.CompAtom, ptr %40, i64 %1293
  %1295 = load double, ptr %1294, align 8, !tbaa !67
  %1296 = getelementptr inbounds %class.Vector, ptr %1291, i64 0, i32 1
  %1297 = load double, ptr %1296, align 8, !tbaa !66
  %1298 = getelementptr inbounds %class.Vector, ptr %1294, i64 0, i32 1
  %1299 = load double, ptr %1298, align 8, !tbaa !66
  %1300 = getelementptr inbounds %class.Vector, ptr %1291, i64 0, i32 2
  %1301 = load double, ptr %1300, align 8, !tbaa !49
  %1302 = getelementptr inbounds %class.Vector, ptr %1294, i64 0, i32 2
  %1303 = load double, ptr %1302, align 8, !tbaa !49
  %1304 = fcmp ugt double %1283, %20
  br i1 %1304, label %1317, label %1305

1305:                                             ; preds = %1255
  %1306 = shl i32 %1258, 2
  %1307 = ashr exact i32 %1306, 2
  %1308 = icmp slt i32 %1307, %713
  %1309 = icmp sgt i32 %1307, %715
  %1310 = select i1 %1308, i1 true, i1 %1309
  %1311 = select i1 %1310, ptr %1260, ptr %1259
  %1312 = zext i1 %1310 to i64
  %1313 = getelementptr inbounds i16, ptr %1260, i64 %1312
  %1314 = xor i1 %1310, true
  %1315 = zext i1 %1314 to i64
  %1316 = getelementptr inbounds i16, ptr %1259, i64 %1315
  store i16 %1261, ptr %1311, align 2, !tbaa !44
  br label %1317

1317:                                             ; preds = %1305, %1255
  %1318 = phi ptr [ %1260, %1255 ], [ %1313, %1305 ]
  %1319 = phi ptr [ %1259, %1255 ], [ %1316, %1305 ]
  %1320 = getelementptr inbounds %struct.CompAtomExt, ptr %44, i64 %1290
  %1321 = load i32, ptr %1320, align 4
  %1322 = fcmp ugt double %1284, %20
  br i1 %1322, label %1333, label %1323

1323:                                             ; preds = %1317
  %1324 = icmp slt i32 %1272, %713
  %1325 = icmp sgt i32 %1272, %715
  %1326 = select i1 %1324, i1 true, i1 %1325
  %1327 = select i1 %1326, ptr %1318, ptr %1319
  %1328 = zext i1 %1326 to i64
  %1329 = getelementptr inbounds i16, ptr %1318, i64 %1328
  %1330 = xor i1 %1326, true
  %1331 = zext i1 %1330 to i64
  %1332 = getelementptr inbounds i16, ptr %1319, i64 %1331
  store i16 %1262, ptr %1327, align 2, !tbaa !44
  br label %1333

1333:                                             ; preds = %1323, %1317
  %1334 = phi ptr [ %1318, %1317 ], [ %1329, %1323 ]
  %1335 = phi ptr [ %1319, %1317 ], [ %1332, %1323 ]
  %1336 = add nuw nsw i64 %1256, 2
  %1337 = icmp ult i64 %1336, %1252
  br i1 %1337, label %1255, label %1338

1338:                                             ; preds = %1333
  %1339 = trunc i64 %1256 to i32
  br label %1340

1340:                                             ; preds = %1338, %1230
  %1341 = phi i32 [ %1339, %1338 ], [ 0, %1230 ]
  %1342 = phi ptr [ %1334, %1338 ], [ %1180, %1230 ]
  %1343 = phi ptr [ %1335, %1338 ], [ %466, %1230 ]
  %1344 = icmp slt i32 %1341, %1141
  br i1 %1344, label %1345, label %1389

1345:                                             ; preds = %1340
  %1346 = zext i32 %1341 to i64
  %1347 = zext i32 %1141 to i64
  %1348 = extractelement <2 x double> %703, i64 0
  %1349 = extractelement <2 x double> %703, i64 1
  br label %1350

1350:                                             ; preds = %1345, %1384
  %1351 = phi i64 [ %1346, %1345 ], [ %1387, %1384 ]
  %1352 = phi ptr [ %1343, %1345 ], [ %1386, %1384 ]
  %1353 = phi ptr [ %1342, %1345 ], [ %1385, %1384 ]
  %1354 = getelementptr inbounds i16, ptr %420, i64 %1351
  %1355 = load i16, ptr %1354, align 2, !tbaa !44
  %1356 = zext i16 %1355 to i64
  %1357 = getelementptr inbounds %struct.CompAtom, ptr %40, i64 %1356
  %1358 = load double, ptr %1357, align 8, !tbaa !67
  %1359 = getelementptr inbounds %class.Vector, ptr %1357, i64 0, i32 1
  %1360 = load double, ptr %1359, align 8, !tbaa !66
  %1361 = getelementptr inbounds %class.Vector, ptr %1357, i64 0, i32 2
  %1362 = load double, ptr %1361, align 8, !tbaa !49
  %1363 = fsub double %1348, %1358
  %1364 = fmul double %1363, %1363
  %1365 = fsub double %1349, %1360
  %1366 = tail call double @llvm.fmuladd.f64(double %1365, double %1365, double %1364)
  %1367 = fsub double %706, %1362
  %1368 = tail call double @llvm.fmuladd.f64(double %1367, double %1367, double %1366)
  %1369 = fcmp ugt double %1368, %20
  br i1 %1369, label %1384, label %1370

1370:                                             ; preds = %1350
  %1371 = getelementptr inbounds %struct.CompAtomExt, ptr %44, i64 %1356
  %1372 = load i32, ptr %1371, align 4
  %1373 = shl i32 %1372, 2
  %1374 = ashr exact i32 %1373, 2
  %1375 = icmp slt i32 %1374, %713
  %1376 = icmp sgt i32 %1374, %715
  %1377 = select i1 %1375, i1 true, i1 %1376
  %1378 = select i1 %1377, ptr %1353, ptr %1352
  %1379 = zext i1 %1377 to i64
  %1380 = getelementptr inbounds i16, ptr %1353, i64 %1379
  %1381 = xor i1 %1377, true
  %1382 = zext i1 %1381 to i64
  %1383 = getelementptr inbounds i16, ptr %1352, i64 %1382
  store i16 %1355, ptr %1378, align 2, !tbaa !44
  br label %1384

1384:                                             ; preds = %1370, %1350
  %1385 = phi ptr [ %1353, %1350 ], [ %1380, %1370 ]
  %1386 = phi ptr [ %1352, %1350 ], [ %1383, %1370 ]
  %1387 = add nuw nsw i64 %1351, 1
  %1388 = icmp eq i64 %1387, %1347
  br i1 %1388, label %1389, label %1350

1389:                                             ; preds = %1384, %1224, %1340, %1182, %1229
  %1390 = phi ptr [ %1180, %1229 ], [ %1180, %1182 ], [ %1342, %1340 ], [ %1225, %1224 ], [ %1385, %1384 ]
  %1391 = phi ptr [ %466, %1229 ], [ %466, %1182 ], [ %1343, %1340 ], [ %1226, %1224 ], [ %1386, %1384 ]
  %1392 = icmp eq ptr %1390, %1180
  %1393 = icmp eq ptr %1391, %466
  %1394 = select i1 %1392, i1 %1393, i1 false
  br i1 %1394, label %1395, label %1397

1395:                                             ; preds = %1389
  %1396 = add nsw i32 %675, 1
  br label %2124

1397:                                             ; preds = %1389
  %1398 = trunc i32 %675 to i16
  %1399 = load i32, ptr %13, align 8, !tbaa !17
  %1400 = add nsw i32 %1399, -1
  %1401 = sext i32 %1400 to i64
  %1402 = getelementptr inbounds i16, ptr %1176, i64 %1401
  store i16 %1398, ptr %1402, align 2, !tbaa !44
  %1403 = ptrtoint ptr %1391 to i64
  %1404 = sub i64 %1403, %663
  %1405 = lshr exact i64 %1404, 1
  %1406 = trunc i64 %1405 to i32
  %1407 = icmp sgt i32 %1406, 0
  br i1 %1407, label %1408, label %1508

1408:                                             ; preds = %1397
  %1409 = and i64 %1405, 4294967295
  %1410 = and i64 %1405, 1
  %1411 = icmp eq i64 %1409, 1
  br i1 %1411, label %1476, label %1412

1412:                                             ; preds = %1408
  %1413 = sub nsw i64 %1409, %1410
  br label %1414

1414:                                             ; preds = %1469, %1412
  %1415 = phi i64 [ 0, %1412 ], [ %1473, %1469 ]
  %1416 = phi ptr [ %1390, %1412 ], [ %1472, %1469 ]
  %1417 = phi ptr [ %328, %1412 ], [ %1471, %1469 ]
  %1418 = phi ptr [ %374, %1412 ], [ %1470, %1469 ]
  %1419 = phi i64 [ 0, %1412 ], [ %1474, %1469 ]
  %1420 = getelementptr inbounds i16, ptr %466, i64 %1415
  %1421 = load i16, ptr %1420, align 2, !tbaa !44
  %1422 = zext i16 %1421 to i64
  %1423 = getelementptr inbounds %struct.CompAtomExt, ptr %44, i64 %1422
  %1424 = load i32, ptr %1423, align 4
  %1425 = shl i32 %1424, 2
  %1426 = ashr exact i32 %1425, 2
  %1427 = sext i32 %1426 to i64
  %1428 = getelementptr inbounds i8, ptr %950, i64 %1427
  %1429 = load i8, ptr %1428, align 1, !tbaa !57
  %1430 = sext i8 %1429 to i32
  switch i32 %1430, label %1442 [
    i32 0, label %1431
    i32 1, label %1433
    i32 2, label %1435
  ]

1431:                                             ; preds = %1414
  %1432 = getelementptr inbounds i16, ptr %1416, i64 1
  br label %1437

1433:                                             ; preds = %1414
  %1434 = getelementptr inbounds i16, ptr %1417, i64 1
  br label %1437

1435:                                             ; preds = %1414
  %1436 = getelementptr inbounds i16, ptr %1418, i64 1
  br label %1437

1437:                                             ; preds = %1431, %1433, %1435
  %1438 = phi ptr [ %1418, %1435 ], [ %1417, %1433 ], [ %1416, %1431 ]
  %1439 = phi ptr [ %1436, %1435 ], [ %1418, %1433 ], [ %1418, %1431 ]
  %1440 = phi ptr [ %1417, %1435 ], [ %1434, %1433 ], [ %1417, %1431 ]
  %1441 = phi ptr [ %1416, %1435 ], [ %1416, %1433 ], [ %1432, %1431 ]
  store i16 %1421, ptr %1438, align 2, !tbaa !44
  br label %1442

1442:                                             ; preds = %1437, %1414
  %1443 = phi ptr [ %1418, %1414 ], [ %1439, %1437 ]
  %1444 = phi ptr [ %1417, %1414 ], [ %1440, %1437 ]
  %1445 = phi ptr [ %1416, %1414 ], [ %1441, %1437 ]
  %1446 = or i64 %1415, 1
  %1447 = getelementptr inbounds i16, ptr %466, i64 %1446
  %1448 = load i16, ptr %1447, align 2, !tbaa !44
  %1449 = zext i16 %1448 to i64
  %1450 = getelementptr inbounds %struct.CompAtomExt, ptr %44, i64 %1449
  %1451 = load i32, ptr %1450, align 4
  %1452 = shl i32 %1451, 2
  %1453 = ashr exact i32 %1452, 2
  %1454 = sext i32 %1453 to i64
  %1455 = getelementptr inbounds i8, ptr %950, i64 %1454
  %1456 = load i8, ptr %1455, align 1, !tbaa !57
  %1457 = sext i8 %1456 to i32
  switch i32 %1457, label %1469 [
    i32 0, label %1462
    i32 1, label %1460
    i32 2, label %1458
  ]

1458:                                             ; preds = %1442
  %1459 = getelementptr inbounds i16, ptr %1443, i64 1
  br label %1464

1460:                                             ; preds = %1442
  %1461 = getelementptr inbounds i16, ptr %1444, i64 1
  br label %1464

1462:                                             ; preds = %1442
  %1463 = getelementptr inbounds i16, ptr %1445, i64 1
  br label %1464

1464:                                             ; preds = %1462, %1460, %1458
  %1465 = phi ptr [ %1443, %1458 ], [ %1444, %1460 ], [ %1445, %1462 ]
  %1466 = phi ptr [ %1459, %1458 ], [ %1443, %1460 ], [ %1443, %1462 ]
  %1467 = phi ptr [ %1444, %1458 ], [ %1461, %1460 ], [ %1444, %1462 ]
  %1468 = phi ptr [ %1445, %1458 ], [ %1445, %1460 ], [ %1463, %1462 ]
  store i16 %1448, ptr %1465, align 2, !tbaa !44
  br label %1469

1469:                                             ; preds = %1464, %1442
  %1470 = phi ptr [ %1443, %1442 ], [ %1466, %1464 ]
  %1471 = phi ptr [ %1444, %1442 ], [ %1467, %1464 ]
  %1472 = phi ptr [ %1445, %1442 ], [ %1468, %1464 ]
  %1473 = add nuw nsw i64 %1415, 2
  %1474 = add i64 %1419, 2
  %1475 = icmp eq i64 %1474, %1413
  br i1 %1475, label %1476, label %1414

1476:                                             ; preds = %1469, %1408
  %1477 = phi ptr [ undef, %1408 ], [ %1470, %1469 ]
  %1478 = phi ptr [ undef, %1408 ], [ %1471, %1469 ]
  %1479 = phi ptr [ undef, %1408 ], [ %1472, %1469 ]
  %1480 = phi i64 [ 0, %1408 ], [ %1473, %1469 ]
  %1481 = phi ptr [ %1390, %1408 ], [ %1472, %1469 ]
  %1482 = phi ptr [ %328, %1408 ], [ %1471, %1469 ]
  %1483 = phi ptr [ %374, %1408 ], [ %1470, %1469 ]
  %1484 = icmp eq i64 %1410, 0
  br i1 %1484, label %1508, label %1485

1485:                                             ; preds = %1476
  %1486 = getelementptr inbounds i16, ptr %466, i64 %1480
  %1487 = load i16, ptr %1486, align 2, !tbaa !44
  %1488 = zext i16 %1487 to i64
  %1489 = getelementptr inbounds %struct.CompAtomExt, ptr %44, i64 %1488
  %1490 = load i32, ptr %1489, align 4
  %1491 = shl i32 %1490, 2
  %1492 = ashr exact i32 %1491, 2
  %1493 = sext i32 %1492 to i64
  %1494 = getelementptr inbounds i8, ptr %950, i64 %1493
  %1495 = load i8, ptr %1494, align 1, !tbaa !57
  %1496 = sext i8 %1495 to i32
  switch i32 %1496, label %1508 [
    i32 0, label %1501
    i32 1, label %1499
    i32 2, label %1497
  ]

1497:                                             ; preds = %1485
  %1498 = getelementptr inbounds i16, ptr %1483, i64 1
  br label %1503

1499:                                             ; preds = %1485
  %1500 = getelementptr inbounds i16, ptr %1482, i64 1
  br label %1503

1501:                                             ; preds = %1485
  %1502 = getelementptr inbounds i16, ptr %1481, i64 1
  br label %1503

1503:                                             ; preds = %1501, %1499, %1497
  %1504 = phi ptr [ %1483, %1497 ], [ %1482, %1499 ], [ %1481, %1501 ]
  %1505 = phi ptr [ %1498, %1497 ], [ %1483, %1499 ], [ %1483, %1501 ]
  %1506 = phi ptr [ %1482, %1497 ], [ %1500, %1499 ], [ %1482, %1501 ]
  %1507 = phi ptr [ %1481, %1497 ], [ %1481, %1499 ], [ %1502, %1501 ]
  store i16 %1487, ptr %1504, align 2, !tbaa !44
  br label %1508

1508:                                             ; preds = %1476, %1503, %1485, %1397
  %1509 = phi ptr [ %374, %1397 ], [ %1477, %1476 ], [ %1483, %1485 ], [ %1505, %1503 ]
  %1510 = phi ptr [ %328, %1397 ], [ %1478, %1476 ], [ %1482, %1485 ], [ %1506, %1503 ]
  %1511 = phi ptr [ %1390, %1397 ], [ %1479, %1476 ], [ %1481, %1485 ], [ %1507, %1503 ]
  %1512 = ptrtoint ptr %1511 to i64
  %1513 = ptrtoint ptr %1180 to i64
  %1514 = sub i64 %1512, %1513
  %1515 = lshr exact i64 %1514, 1
  %1516 = trunc i64 %1515 to i32
  %1517 = icmp eq i32 %1516, 0
  %1518 = shl i64 %1514, 31
  br i1 %1517, label %1524, label %1519

1519:                                             ; preds = %1508
  %1520 = add i64 %1518, -4294967296
  %1521 = ashr i64 %1520, 32
  %1522 = getelementptr inbounds i16, ptr %1180, i64 %1521
  %1523 = load i16, ptr %1522, align 2, !tbaa !44
  br label %1524

1524:                                             ; preds = %1508, %1519
  %1525 = phi i16 [ %1523, %1519 ], [ -1, %1508 ]
  %1526 = ashr i64 %1518, 32
  %1527 = getelementptr inbounds i16, ptr %1180, i64 %1526
  store i16 %1525, ptr %1527, align 2, !tbaa !44
  %1528 = trunc i64 %1515 to i16
  %1529 = add i16 %1528, 1
  %1530 = sext i32 %1399 to i64
  %1531 = getelementptr inbounds i16, ptr %1176, i64 %1530
  store i16 %1529, ptr %1531, align 2, !tbaa !44
  %1532 = add i32 %1399, 2
  %1533 = add i32 %1532, %1516
  %1534 = ptrtoint ptr %1510 to i64
  %1535 = sub i64 %1534, %664
  %1536 = lshr exact i64 %1535, 1
  %1537 = trunc i64 %1536 to i32
  %1538 = add nsw i32 %1533, 1
  %1539 = sext i32 %1538 to i64
  %1540 = getelementptr i16, ptr %1176, i64 %1539
  %1541 = icmp sgt i32 %1537, 0
  br i1 %1541, label %1542, label %1632

1542:                                             ; preds = %1524
  %1543 = and i64 %1536, 4294967295
  %1544 = icmp ult i64 %1543, 8
  br i1 %1544, label %1588, label %1545

1545:                                             ; preds = %1542
  %1546 = shl nsw i64 %1539, 1
  %1547 = add i64 %1546, %1177
  %1548 = sub i64 %1547, %664
  %1549 = icmp ult i64 %1548, 128
  br i1 %1549, label %1588, label %1550

1550:                                             ; preds = %1545
  %1551 = icmp ult i64 %1543, 64
  br i1 %1551, label %1575, label %1552

1552:                                             ; preds = %1550
  %1553 = and i64 %1536, 63
  %1554 = sub nsw i64 %1543, %1553
  br label %1555

1555:                                             ; preds = %1555, %1552
  %1556 = phi i64 [ 0, %1552 ], [ %1569, %1555 ]
  %1557 = getelementptr inbounds i16, ptr %328, i64 %1556
  %1558 = load <16 x i16>, ptr %1557, align 2, !tbaa !44
  %1559 = getelementptr inbounds i16, ptr %1557, i64 16
  %1560 = load <16 x i16>, ptr %1559, align 2, !tbaa !44
  %1561 = getelementptr inbounds i16, ptr %1557, i64 32
  %1562 = load <16 x i16>, ptr %1561, align 2, !tbaa !44
  %1563 = getelementptr inbounds i16, ptr %1557, i64 48
  %1564 = load <16 x i16>, ptr %1563, align 2, !tbaa !44
  %1565 = getelementptr inbounds i16, ptr %1540, i64 %1556
  store <16 x i16> %1558, ptr %1565, align 2, !tbaa !44
  %1566 = getelementptr inbounds i16, ptr %1565, i64 16
  store <16 x i16> %1560, ptr %1566, align 2, !tbaa !44
  %1567 = getelementptr inbounds i16, ptr %1565, i64 32
  store <16 x i16> %1562, ptr %1567, align 2, !tbaa !44
  %1568 = getelementptr inbounds i16, ptr %1565, i64 48
  store <16 x i16> %1564, ptr %1568, align 2, !tbaa !44
  %1569 = add nuw i64 %1556, 64
  %1570 = icmp eq i64 %1569, %1554
  br i1 %1570, label %1571, label %1555, !llvm.loop !92

1571:                                             ; preds = %1555
  %1572 = icmp eq i64 %1553, 0
  br i1 %1572, label %1626, label %1573

1573:                                             ; preds = %1571
  %1574 = icmp ult i64 %1553, 8
  br i1 %1574, label %1588, label %1575

1575:                                             ; preds = %1550, %1573
  %1576 = phi i64 [ %1554, %1573 ], [ 0, %1550 ]
  %1577 = and i64 %1536, 7
  %1578 = sub nsw i64 %1543, %1577
  br label %1579

1579:                                             ; preds = %1579, %1575
  %1580 = phi i64 [ %1576, %1575 ], [ %1584, %1579 ]
  %1581 = getelementptr inbounds i16, ptr %328, i64 %1580
  %1582 = load <8 x i16>, ptr %1581, align 2, !tbaa !44
  %1583 = getelementptr inbounds i16, ptr %1540, i64 %1580
  store <8 x i16> %1582, ptr %1583, align 2, !tbaa !44
  %1584 = add nuw i64 %1580, 8
  %1585 = icmp eq i64 %1584, %1578
  br i1 %1585, label %1586, label %1579, !llvm.loop !93

1586:                                             ; preds = %1579
  %1587 = icmp eq i64 %1577, 0
  br i1 %1587, label %1626, label %1588

1588:                                             ; preds = %1545, %1542, %1573, %1586
  %1589 = phi i64 [ 0, %1542 ], [ 0, %1545 ], [ %1554, %1573 ], [ %1578, %1586 ]
  %1590 = sub i64 %1536, %1589
  %1591 = xor i64 %1589, -1
  %1592 = add nsw i64 %1543, %1591
  %1593 = and i64 %1590, 3
  %1594 = icmp eq i64 %1593, 0
  br i1 %1594, label %1604, label %1595

1595:                                             ; preds = %1588, %1595
  %1596 = phi i64 [ %1601, %1595 ], [ %1589, %1588 ]
  %1597 = phi i64 [ %1602, %1595 ], [ 0, %1588 ]
  %1598 = getelementptr inbounds i16, ptr %328, i64 %1596
  %1599 = load i16, ptr %1598, align 2, !tbaa !44
  %1600 = getelementptr inbounds i16, ptr %1540, i64 %1596
  store i16 %1599, ptr %1600, align 2, !tbaa !44
  %1601 = add nuw nsw i64 %1596, 1
  %1602 = add i64 %1597, 1
  %1603 = icmp eq i64 %1602, %1593
  br i1 %1603, label %1604, label %1595, !llvm.loop !94

1604:                                             ; preds = %1595, %1588
  %1605 = phi i64 [ %1589, %1588 ], [ %1601, %1595 ]
  %1606 = icmp ult i64 %1592, 3
  br i1 %1606, label %1626, label %1607

1607:                                             ; preds = %1604, %1607
  %1608 = phi i64 [ %1624, %1607 ], [ %1605, %1604 ]
  %1609 = getelementptr inbounds i16, ptr %328, i64 %1608
  %1610 = load i16, ptr %1609, align 2, !tbaa !44
  %1611 = getelementptr inbounds i16, ptr %1540, i64 %1608
  store i16 %1610, ptr %1611, align 2, !tbaa !44
  %1612 = add nuw nsw i64 %1608, 1
  %1613 = getelementptr inbounds i16, ptr %328, i64 %1612
  %1614 = load i16, ptr %1613, align 2, !tbaa !44
  %1615 = getelementptr inbounds i16, ptr %1540, i64 %1612
  store i16 %1614, ptr %1615, align 2, !tbaa !44
  %1616 = add nuw nsw i64 %1608, 2
  %1617 = getelementptr inbounds i16, ptr %328, i64 %1616
  %1618 = load i16, ptr %1617, align 2, !tbaa !44
  %1619 = getelementptr inbounds i16, ptr %1540, i64 %1616
  store i16 %1618, ptr %1619, align 2, !tbaa !44
  %1620 = add nuw nsw i64 %1608, 3
  %1621 = getelementptr inbounds i16, ptr %328, i64 %1620
  %1622 = load i16, ptr %1621, align 2, !tbaa !44
  %1623 = getelementptr inbounds i16, ptr %1540, i64 %1620
  store i16 %1622, ptr %1623, align 2, !tbaa !44
  %1624 = add nuw nsw i64 %1608, 4
  %1625 = icmp eq i64 %1624, %1543
  br i1 %1625, label %1626, label %1607, !llvm.loop !95

1626:                                             ; preds = %1604, %1607, %1571, %1586
  %1627 = shl i64 %1535, 31
  %1628 = add i64 %1627, -4294967296
  %1629 = ashr i64 %1628, 32
  %1630 = getelementptr inbounds i16, ptr %1540, i64 %1629
  %1631 = load i16, ptr %1630, align 2, !tbaa !44
  br label %1632

1632:                                             ; preds = %1524, %1626
  %1633 = phi i64 [ %1536, %1626 ], [ 0, %1524 ]
  %1634 = phi i16 [ %1631, %1626 ], [ -1, %1524 ]
  %1635 = and i64 %1633, 4294967295
  %1636 = getelementptr inbounds i16, ptr %1540, i64 %1635
  store i16 %1634, ptr %1636, align 2, !tbaa !44
  %1637 = trunc i64 %1536 to i16
  %1638 = add i16 %1637, 1
  %1639 = sext i32 %1533 to i64
  %1640 = getelementptr inbounds i16, ptr %1176, i64 %1639
  store i16 %1638, ptr %1640, align 2, !tbaa !44
  %1641 = add nsw i32 %1537, 2
  %1642 = add nsw i32 %1641, %1533
  %1643 = ptrtoint ptr %1509 to i64
  %1644 = sub i64 %1643, %665
  %1645 = lshr exact i64 %1644, 1
  %1646 = trunc i64 %1645 to i32
  %1647 = add nsw i32 %1642, 1
  %1648 = sext i32 %1647 to i64
  %1649 = getelementptr i16, ptr %1176, i64 %1648
  %1650 = icmp sgt i32 %1646, 0
  br i1 %1650, label %1651, label %1741

1651:                                             ; preds = %1632
  %1652 = and i64 %1645, 4294967295
  %1653 = icmp ult i64 %1652, 8
  br i1 %1653, label %1697, label %1654

1654:                                             ; preds = %1651
  %1655 = shl nsw i64 %1648, 1
  %1656 = add i64 %1655, %1177
  %1657 = sub i64 %1656, %665
  %1658 = icmp ult i64 %1657, 128
  br i1 %1658, label %1697, label %1659

1659:                                             ; preds = %1654
  %1660 = icmp ult i64 %1652, 64
  br i1 %1660, label %1684, label %1661

1661:                                             ; preds = %1659
  %1662 = and i64 %1645, 63
  %1663 = sub nsw i64 %1652, %1662
  br label %1664

1664:                                             ; preds = %1664, %1661
  %1665 = phi i64 [ 0, %1661 ], [ %1678, %1664 ]
  %1666 = getelementptr inbounds i16, ptr %374, i64 %1665
  %1667 = load <16 x i16>, ptr %1666, align 2, !tbaa !44
  %1668 = getelementptr inbounds i16, ptr %1666, i64 16
  %1669 = load <16 x i16>, ptr %1668, align 2, !tbaa !44
  %1670 = getelementptr inbounds i16, ptr %1666, i64 32
  %1671 = load <16 x i16>, ptr %1670, align 2, !tbaa !44
  %1672 = getelementptr inbounds i16, ptr %1666, i64 48
  %1673 = load <16 x i16>, ptr %1672, align 2, !tbaa !44
  %1674 = getelementptr inbounds i16, ptr %1649, i64 %1665
  store <16 x i16> %1667, ptr %1674, align 2, !tbaa !44
  %1675 = getelementptr inbounds i16, ptr %1674, i64 16
  store <16 x i16> %1669, ptr %1675, align 2, !tbaa !44
  %1676 = getelementptr inbounds i16, ptr %1674, i64 32
  store <16 x i16> %1671, ptr %1676, align 2, !tbaa !44
  %1677 = getelementptr inbounds i16, ptr %1674, i64 48
  store <16 x i16> %1673, ptr %1677, align 2, !tbaa !44
  %1678 = add nuw i64 %1665, 64
  %1679 = icmp eq i64 %1678, %1663
  br i1 %1679, label %1680, label %1664, !llvm.loop !96

1680:                                             ; preds = %1664
  %1681 = icmp eq i64 %1662, 0
  br i1 %1681, label %1735, label %1682

1682:                                             ; preds = %1680
  %1683 = icmp ult i64 %1662, 8
  br i1 %1683, label %1697, label %1684

1684:                                             ; preds = %1659, %1682
  %1685 = phi i64 [ %1663, %1682 ], [ 0, %1659 ]
  %1686 = and i64 %1645, 7
  %1687 = sub nsw i64 %1652, %1686
  br label %1688

1688:                                             ; preds = %1688, %1684
  %1689 = phi i64 [ %1685, %1684 ], [ %1693, %1688 ]
  %1690 = getelementptr inbounds i16, ptr %374, i64 %1689
  %1691 = load <8 x i16>, ptr %1690, align 2, !tbaa !44
  %1692 = getelementptr inbounds i16, ptr %1649, i64 %1689
  store <8 x i16> %1691, ptr %1692, align 2, !tbaa !44
  %1693 = add nuw i64 %1689, 8
  %1694 = icmp eq i64 %1693, %1687
  br i1 %1694, label %1695, label %1688, !llvm.loop !97

1695:                                             ; preds = %1688
  %1696 = icmp eq i64 %1686, 0
  br i1 %1696, label %1735, label %1697

1697:                                             ; preds = %1654, %1651, %1682, %1695
  %1698 = phi i64 [ 0, %1651 ], [ 0, %1654 ], [ %1663, %1682 ], [ %1687, %1695 ]
  %1699 = sub i64 %1645, %1698
  %1700 = xor i64 %1698, -1
  %1701 = add nsw i64 %1652, %1700
  %1702 = and i64 %1699, 3
  %1703 = icmp eq i64 %1702, 0
  br i1 %1703, label %1713, label %1704

1704:                                             ; preds = %1697, %1704
  %1705 = phi i64 [ %1710, %1704 ], [ %1698, %1697 ]
  %1706 = phi i64 [ %1711, %1704 ], [ 0, %1697 ]
  %1707 = getelementptr inbounds i16, ptr %374, i64 %1705
  %1708 = load i16, ptr %1707, align 2, !tbaa !44
  %1709 = getelementptr inbounds i16, ptr %1649, i64 %1705
  store i16 %1708, ptr %1709, align 2, !tbaa !44
  %1710 = add nuw nsw i64 %1705, 1
  %1711 = add i64 %1706, 1
  %1712 = icmp eq i64 %1711, %1702
  br i1 %1712, label %1713, label %1704, !llvm.loop !98

1713:                                             ; preds = %1704, %1697
  %1714 = phi i64 [ %1698, %1697 ], [ %1710, %1704 ]
  %1715 = icmp ult i64 %1701, 3
  br i1 %1715, label %1735, label %1716

1716:                                             ; preds = %1713, %1716
  %1717 = phi i64 [ %1733, %1716 ], [ %1714, %1713 ]
  %1718 = getelementptr inbounds i16, ptr %374, i64 %1717
  %1719 = load i16, ptr %1718, align 2, !tbaa !44
  %1720 = getelementptr inbounds i16, ptr %1649, i64 %1717
  store i16 %1719, ptr %1720, align 2, !tbaa !44
  %1721 = add nuw nsw i64 %1717, 1
  %1722 = getelementptr inbounds i16, ptr %374, i64 %1721
  %1723 = load i16, ptr %1722, align 2, !tbaa !44
  %1724 = getelementptr inbounds i16, ptr %1649, i64 %1721
  store i16 %1723, ptr %1724, align 2, !tbaa !44
  %1725 = add nuw nsw i64 %1717, 2
  %1726 = getelementptr inbounds i16, ptr %374, i64 %1725
  %1727 = load i16, ptr %1726, align 2, !tbaa !44
  %1728 = getelementptr inbounds i16, ptr %1649, i64 %1725
  store i16 %1727, ptr %1728, align 2, !tbaa !44
  %1729 = add nuw nsw i64 %1717, 3
  %1730 = getelementptr inbounds i16, ptr %374, i64 %1729
  %1731 = load i16, ptr %1730, align 2, !tbaa !44
  %1732 = getelementptr inbounds i16, ptr %1649, i64 %1729
  store i16 %1731, ptr %1732, align 2, !tbaa !44
  %1733 = add nuw nsw i64 %1717, 4
  %1734 = icmp eq i64 %1733, %1652
  br i1 %1734, label %1735, label %1716, !llvm.loop !99

1735:                                             ; preds = %1713, %1716, %1680, %1695
  %1736 = shl i64 %1644, 31
  %1737 = add i64 %1736, -4294967296
  %1738 = ashr i64 %1737, 32
  %1739 = getelementptr inbounds i16, ptr %1649, i64 %1738
  %1740 = load i16, ptr %1739, align 2, !tbaa !44
  br label %1741

1741:                                             ; preds = %1632, %1735
  %1742 = phi i64 [ %1645, %1735 ], [ 0, %1632 ]
  %1743 = phi i16 [ %1740, %1735 ], [ -1, %1632 ]
  %1744 = and i64 %1742, 4294967295
  %1745 = getelementptr inbounds i16, ptr %1649, i64 %1744
  store i16 %1743, ptr %1745, align 2, !tbaa !44
  %1746 = trunc i64 %1645 to i16
  %1747 = add i16 %1746, 1
  %1748 = sext i32 %1642 to i64
  %1749 = getelementptr inbounds i16, ptr %1176, i64 %1748
  store i16 %1747, ptr %1749, align 2, !tbaa !44
  %1750 = add i32 %1646, 3
  %1751 = add i32 %1750, %1642
  %1752 = select i1 %141, i32 1, i32 %1751
  store i32 %1752, ptr %13, align 8, !tbaa !17
  br label %1786

1753:                                             ; preds = %673
  %1754 = load <2 x double>, ptr %686, align 8, !tbaa !19
  %1755 = fadd <2 x double> %15, %1754
  %1756 = getelementptr inbounds %class.Vector, ptr %686, i64 0, i32 2
  %1757 = load double, ptr %1756, align 8, !tbaa !49
  %1758 = fadd double %17, %1757
  %1759 = load ptr, ptr %8, align 8, !tbaa !46
  %1760 = load i32, ptr %13, align 8, !tbaa !17
  %1761 = add i32 %1760, 1
  %1762 = sext i32 %1761 to i64
  %1763 = getelementptr inbounds i16, ptr %1759, i64 %1762
  %1764 = sext i32 %1760 to i64
  %1765 = getelementptr inbounds i16, ptr %1759, i64 %1764
  %1766 = load i16, ptr %1765, align 2, !tbaa !44
  %1767 = zext i16 %1766 to i32
  %1768 = add i32 %1761, %1767
  %1769 = add nsw i32 %1767, -1
  %1770 = sext i32 %1768 to i64
  %1771 = getelementptr inbounds i16, ptr %1759, i64 %1770
  %1772 = load i16, ptr %1771, align 2, !tbaa !44
  %1773 = zext i16 %1772 to i32
  %1774 = add nuw nsw i32 %1773, 1
  %1775 = add nsw i32 %1774, %1768
  %1776 = add nsw i32 %1773, -1
  %1777 = add i32 %1775, 1
  %1778 = sext i32 %1777 to i64
  %1779 = getelementptr inbounds i16, ptr %1759, i64 %1778
  %1780 = sext i32 %1775 to i64
  %1781 = getelementptr inbounds i16, ptr %1759, i64 %1780
  %1782 = load i16, ptr %1781, align 2, !tbaa !44
  %1783 = zext i16 %1782 to i32
  %1784 = add i32 %1777, %1783
  store i32 %1784, ptr %13, align 8, !tbaa !17
  %1785 = add nsw i32 %1783, -1
  br label %1786

1786:                                             ; preds = %1741, %1753
  %1787 = phi double [ %1758, %1753 ], [ %706, %1741 ]
  %1788 = phi i32 [ %680, %1753 ], [ %701, %1741 ]
  %1789 = phi ptr [ %1763, %1753 ], [ %1180, %1741 ]
  %1790 = phi i32 [ %1769, %1753 ], [ %1516, %1741 ]
  %1791 = phi i32 [ %1776, %1753 ], [ %1537, %1741 ]
  %1792 = phi ptr [ %1779, %1753 ], [ %1649, %1741 ]
  %1793 = phi i32 [ %1785, %1753 ], [ %1646, %1741 ]
  %1794 = phi i32 [ %679, %1753 ], [ %1141, %1741 ]
  %1795 = phi ptr [ %678, %1753 ], [ %951, %1741 ]
  %1796 = phi ptr [ %677, %1753 ], [ %952, %1741 ]
  %1797 = phi ptr [ %676, %1753 ], [ %953, %1741 ]
  %1798 = phi <2 x double> [ %1755, %1753 ], [ %703, %1741 ]
  %1799 = getelementptr inbounds %struct.CompAtom, ptr %38, i64 %685, i32 1
  %1800 = load float, ptr %1799, align 8, !tbaa !79
  %1801 = fpext float %1800 to double
  %1802 = fmul double %1801, 0x4074C104816F0069
  %1803 = fmul double %28, %1802
  %1804 = fmul double %24, %1803
  %1805 = getelementptr inbounds %struct.CompAtom, ptr %38, i64 %685, i32 2
  %1806 = load i16, ptr %1805, align 4, !tbaa !80
  %1807 = sext i16 %1806 to i32
  %1808 = load ptr, ptr %666, align 8, !tbaa !81
  %1809 = load i32, ptr %667, align 8, !tbaa !83
  %1810 = shl nsw i32 %1807, 1
  %1811 = mul i32 %1810, %1809
  %1812 = zext i32 %1811 to i64
  %1813 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %1808, i64 %1812
  %1814 = load double, ptr @_ZN20ComputeNonbondedUtil7cutoff2E, align 8, !tbaa !19
  %1815 = extractelement <2 x double> %1798, i64 0
  %1816 = extractelement <2 x double> %1798, i64 1
  %1817 = tail call noundef i32 @_Z22pairlist_from_pairlistddddPK8CompAtomPKtiPtdPd(double noundef %1814, double noundef %1815, double noundef %1816, double noundef %1787, ptr noundef %40, ptr noundef nonnull %1789, i32 noundef %1790, ptr noundef %93, double noundef %30, ptr noundef %139)
  %1818 = icmp sgt i32 %1817, 0
  br i1 %1818, label %1819, label %1953

1819:                                             ; preds = %1786
  %1820 = load ptr, ptr @_ZN20ComputeNonbondedUtil8r2_tableE, align 8, !tbaa !23
  %1821 = zext i32 %1817 to i64
  br label %1822

1822:                                             ; preds = %1819, %1822
  %1823 = phi i64 [ 0, %1819 ], [ %1951, %1822 ]
  %1824 = phi double [ 0.000000e+00, %1819 ], [ %1947, %1822 ]
  %1825 = phi <2 x double> [ %681, %1819 ], [ %1939, %1822 ]
  %1826 = phi <2 x double> [ %682, %1819 ], [ %1932, %1822 ]
  %1827 = phi <2 x double> [ %683, %1819 ], [ %1920, %1822 ]
  %1828 = phi <2 x double> [ %684, %1819 ], [ %1945, %1822 ]
  %1829 = phi <2 x double> [ zeroinitializer, %1819 ], [ %1941, %1822 ]
  %1830 = shl nuw nsw i64 %1823, 1
  %1831 = getelementptr inbounds i32, ptr %140, i64 %1830
  %1832 = load i32, ptr %1831, align 4, !tbaa !5
  %1833 = ashr i32 %1832, 14
  %1834 = add nsw i32 %1833, %33
  %1835 = getelementptr inbounds i16, ptr %93, i64 %1823
  %1836 = load i16, ptr %1835, align 2, !tbaa !44
  %1837 = zext i16 %1836 to i64
  %1838 = getelementptr inbounds %struct.CompAtom, ptr %40, i64 %1837
  %1839 = getelementptr inbounds double, ptr %139, i64 %1823
  %1840 = load double, ptr %1839, align 8, !tbaa !19
  %1841 = sext i32 %1834 to i64
  %1842 = getelementptr inbounds double, ptr %1820, i64 %1841
  %1843 = load double, ptr %1842, align 8, !tbaa !19
  %1844 = fsub double %1840, %1843
  %1845 = shl nsw i32 %1834, 4
  %1846 = sext i32 %1845 to i64
  %1847 = getelementptr inbounds double, ptr %27, i64 %1846
  %1848 = getelementptr inbounds %struct.CompAtom, ptr %40, i64 %1837, i32 2
  %1849 = load i16, ptr %1848, align 4, !tbaa !80
  %1850 = sext i16 %1849 to i32
  %1851 = shl nsw i32 %1850, 1
  %1852 = sext i32 %1851 to i64
  %1853 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %1813, i64 %1852
  %1854 = getelementptr inbounds %class.Vector, ptr %647, i64 %1837
  %1855 = getelementptr inbounds %struct.CompAtom, ptr %40, i64 %1837, i32 1
  %1856 = load float, ptr %1855, align 8, !tbaa !79
  %1857 = fpext float %1856 to double
  %1858 = fmul double %1804, %1857
  %1859 = load <2 x double>, ptr %1838, align 8, !tbaa !19
  %1860 = fsub <2 x double> %1798, %1859
  %1861 = getelementptr inbounds %class.Vector, ptr %1838, i64 0, i32 2
  %1862 = load double, ptr %1861, align 8, !tbaa !49
  %1863 = fsub double %1787, %1862
  %1864 = load double, ptr %1853, align 8, !tbaa !84
  %1865 = fmul double %28, %1864
  %1866 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %1813, i64 %1852, i32 1
  %1867 = load double, ptr %1866, align 8, !tbaa !86
  %1868 = load double, ptr %1847, align 8, !tbaa !19
  %1869 = getelementptr inbounds double, ptr %1847, i64 2
  %1870 = load double, ptr %1869, align 8, !tbaa !19
  %1871 = fmul double %1867, %668
  %1872 = fmul double %1871, %1870
  %1873 = tail call double @llvm.fmuladd.f64(double %1865, double %1868, double %1872)
  %1874 = getelementptr inbounds double, ptr %1847, i64 1
  %1875 = load double, ptr %1874, align 8, !tbaa !19
  %1876 = getelementptr inbounds double, ptr %1847, i64 3
  %1877 = load double, ptr %1876, align 8, !tbaa !19
  %1878 = fmul double %1871, %1877
  %1879 = tail call double @llvm.fmuladd.f64(double %1865, double %1875, double %1878)
  %1880 = getelementptr inbounds double, ptr %1847, i64 4
  %1881 = load double, ptr %1880, align 8, !tbaa !19
  %1882 = getelementptr inbounds double, ptr %1847, i64 6
  %1883 = load double, ptr %1882, align 8, !tbaa !19
  %1884 = fmul double %1871, %1883
  %1885 = tail call double @llvm.fmuladd.f64(double %1865, double %1881, double %1884)
  %1886 = getelementptr inbounds double, ptr %1847, i64 5
  %1887 = load double, ptr %1886, align 8, !tbaa !19
  %1888 = getelementptr inbounds double, ptr %1847, i64 7
  %1889 = load double, ptr %1888, align 8, !tbaa !19
  %1890 = fmul double %1871, %1889
  %1891 = tail call double @llvm.fmuladd.f64(double %1865, double %1887, double %1890)
  %1892 = getelementptr inbounds double, ptr %1847, i64 8
  %1893 = load double, ptr %1892, align 8, !tbaa !19
  %1894 = fmul double %1858, %1893
  %1895 = getelementptr inbounds double, ptr %1847, i64 9
  %1896 = load double, ptr %1895, align 8, !tbaa !19
  %1897 = fmul double %1858, %1896
  %1898 = getelementptr inbounds double, ptr %1847, i64 10
  %1899 = load double, ptr %1898, align 8, !tbaa !19
  %1900 = fmul double %1858, %1899
  %1901 = getelementptr inbounds double, ptr %1847, i64 11
  %1902 = load double, ptr %1901, align 8, !tbaa !19
  %1903 = fmul double %1858, %1902
  %1904 = insertelement <2 x double> poison, double %1844, i64 0
  %1905 = shufflevector <2 x double> %1904, <2 x double> poison, <2 x i32> zeroinitializer
  %1906 = insertelement <2 x double> poison, double %1894, i64 0
  %1907 = insertelement <2 x double> %1906, double %1873, i64 1
  %1908 = fmul <2 x double> %1905, %1907
  %1909 = insertelement <2 x double> poison, double %1897, i64 0
  %1910 = insertelement <2 x double> %1909, double %1879, i64 1
  %1911 = fmul <2 x double> %1910, <double 2.500000e-01, double 2.500000e-01>
  %1912 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %1908, <2 x double> <double 0x3FC5555555555555, double 0x3FC5555555555555>, <2 x double> %1911)
  %1913 = insertelement <2 x double> poison, double %1900, i64 0
  %1914 = insertelement <2 x double> %1913, double %1885, i64 1
  %1915 = fmul <2 x double> %1914, <double 5.000000e-01, double 5.000000e-01>
  %1916 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %1912, <2 x double> %1905, <2 x double> %1915)
  %1917 = insertelement <2 x double> poison, double %1903, i64 0
  %1918 = insertelement <2 x double> %1917, double %1891, i64 1
  %1919 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %1916, <2 x double> %1905, <2 x double> %1918)
  %1920 = fsub <2 x double> %1827, %1919
  %1921 = fadd double %1873, %1894
  %1922 = fadd double %1879, %1897
  %1923 = fadd double %1885, %1900
  %1924 = tail call double @llvm.fmuladd.f64(double %1844, double %1921, double %1922)
  %1925 = tail call double @llvm.fmuladd.f64(double %1924, double %1844, double %1923)
  %1926 = extractelement <2 x double> %1860, i64 1
  %1927 = fmul double %1926, %1925
  %1928 = insertelement <2 x double> poison, double %1927, i64 0
  %1929 = shufflevector <2 x double> %1928, <2 x double> poison, <2 x i32> zeroinitializer
  %1930 = shufflevector <2 x double> %1860, <2 x double> poison, <2 x i32> <i32 1, i32 0>
  %1931 = insertelement <2 x double> %1930, double %1863, i64 1
  %1932 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %1929, <2 x double> %1931, <2 x double> %1826)
  %1933 = insertelement <2 x double> %1930, double %1863, i64 0
  %1934 = insertelement <2 x double> poison, double %1925, i64 0
  %1935 = shufflevector <2 x double> %1934, <2 x double> poison, <2 x i32> zeroinitializer
  %1936 = fmul <2 x double> %1933, %1935
  %1937 = shufflevector <2 x double> %1936, <2 x double> poison, <2 x i32> <i32 1, i32 poison>
  %1938 = shufflevector <2 x double> %1936, <2 x double> poison, <2 x i32> <i32 1, i32 1>
  %1939 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %1938, <2 x double> %1860, <2 x double> %1825)
  %1940 = insertelement <2 x double> %1937, double %1927, i64 1
  %1941 = fadd <2 x double> %1829, %1940
  %1942 = load <2 x double>, ptr %1854, align 8, !tbaa !19
  %1943 = fsub <2 x double> %1942, %1940
  store <2 x double> %1943, ptr %1854, align 8, !tbaa !19
  %1944 = shufflevector <2 x double> %1933, <2 x double> poison, <2 x i32> zeroinitializer
  %1945 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %1936, <2 x double> %1944, <2 x double> %1828)
  %1946 = extractelement <2 x double> %1936, i64 0
  %1947 = fadd double %1824, %1946
  %1948 = getelementptr inbounds %class.Vector, ptr %647, i64 %1837, i32 2
  %1949 = load double, ptr %1948, align 8, !tbaa !87
  %1950 = fsub double %1949, %1946
  store double %1950, ptr %1948, align 8, !tbaa !87
  %1951 = add nuw nsw i64 %1823, 1
  %1952 = icmp eq i64 %1951, %1821
  br i1 %1952, label %1953, label %1822

1953:                                             ; preds = %1822, %1786
  %1954 = phi double [ 0.000000e+00, %1786 ], [ %1947, %1822 ]
  %1955 = phi <2 x double> [ %681, %1786 ], [ %1939, %1822 ]
  %1956 = phi <2 x double> [ %682, %1786 ], [ %1932, %1822 ]
  %1957 = phi <2 x double> [ %683, %1786 ], [ %1920, %1822 ]
  %1958 = phi <2 x double> [ %684, %1786 ], [ %1945, %1822 ]
  %1959 = phi <2 x double> [ zeroinitializer, %1786 ], [ %1941, %1822 ]
  %1960 = load double, ptr @_ZN20ComputeNonbondedUtil7cutoff2E, align 8, !tbaa !19
  %1961 = tail call noundef i32 @_Z22pairlist_from_pairlistddddPK8CompAtomPKtiPtdPd(double noundef %1960, double noundef %1815, double noundef %1816, double noundef %1787, ptr noundef %40, ptr noundef %1792, i32 noundef %1793, ptr noundef %93, double noundef %30, ptr noundef %139)
  %1962 = icmp sgt i32 %1961, 0
  br i1 %1962, label %1963, label %2099

1963:                                             ; preds = %1953
  %1964 = load ptr, ptr @_ZN20ComputeNonbondedUtil8r2_tableE, align 8, !tbaa !23
  %1965 = zext i32 %1961 to i64
  br label %1966

1966:                                             ; preds = %1963, %1966
  %1967 = phi i64 [ 0, %1963 ], [ %2097, %1966 ]
  %1968 = phi double [ %1954, %1963 ], [ %2093, %1966 ]
  %1969 = phi <2 x double> [ %1955, %1963 ], [ %2085, %1966 ]
  %1970 = phi <2 x double> [ %1956, %1963 ], [ %2078, %1966 ]
  %1971 = phi <2 x double> [ %1957, %1963 ], [ %2066, %1966 ]
  %1972 = phi <2 x double> [ %1958, %1963 ], [ %2091, %1966 ]
  %1973 = phi <2 x double> [ %1959, %1963 ], [ %2087, %1966 ]
  %1974 = shl nuw nsw i64 %1967, 1
  %1975 = getelementptr inbounds i32, ptr %140, i64 %1974
  %1976 = load i32, ptr %1975, align 4, !tbaa !5
  %1977 = ashr i32 %1976, 14
  %1978 = add nsw i32 %1977, %33
  %1979 = getelementptr inbounds i16, ptr %93, i64 %1967
  %1980 = load i16, ptr %1979, align 2, !tbaa !44
  %1981 = zext i16 %1980 to i64
  %1982 = getelementptr inbounds %struct.CompAtom, ptr %40, i64 %1981
  %1983 = getelementptr inbounds double, ptr %139, i64 %1967
  %1984 = load double, ptr %1983, align 8, !tbaa !19
  %1985 = sext i32 %1978 to i64
  %1986 = getelementptr inbounds double, ptr %1964, i64 %1985
  %1987 = load double, ptr %1986, align 8, !tbaa !19
  %1988 = fsub double %1984, %1987
  %1989 = shl nsw i32 %1978, 4
  %1990 = sext i32 %1989 to i64
  %1991 = getelementptr inbounds double, ptr %27, i64 %1990
  %1992 = getelementptr inbounds %struct.CompAtom, ptr %40, i64 %1981, i32 2
  %1993 = load i16, ptr %1992, align 4, !tbaa !80
  %1994 = sext i16 %1993 to i32
  %1995 = shl nsw i32 %1994, 1
  %1996 = sext i32 %1995 to i64
  %1997 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %1813, i64 %1996
  %1998 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %1997, i64 1
  %1999 = getelementptr inbounds %class.Vector, ptr %647, i64 %1981
  %2000 = getelementptr inbounds %struct.CompAtom, ptr %40, i64 %1981, i32 1
  %2001 = load float, ptr %2000, align 8, !tbaa !79
  %2002 = fpext float %2001 to double
  %2003 = fmul double %1804, %2002
  %2004 = load <2 x double>, ptr %1982, align 8, !tbaa !19
  %2005 = fsub <2 x double> %1798, %2004
  %2006 = getelementptr inbounds %class.Vector, ptr %1982, i64 0, i32 2
  %2007 = load double, ptr %2006, align 8, !tbaa !49
  %2008 = fsub double %1787, %2007
  %2009 = load double, ptr %1998, align 8, !tbaa !84
  %2010 = fmul double %28, %2009
  %2011 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %1997, i64 1, i32 1
  %2012 = load double, ptr %2011, align 8, !tbaa !86
  %2013 = load double, ptr %1991, align 8, !tbaa !19
  %2014 = getelementptr inbounds double, ptr %1991, i64 2
  %2015 = load double, ptr %2014, align 8, !tbaa !19
  %2016 = fmul double %2012, %668
  %2017 = fmul double %2016, %2015
  %2018 = tail call double @llvm.fmuladd.f64(double %2010, double %2013, double %2017)
  %2019 = getelementptr inbounds double, ptr %1991, i64 1
  %2020 = load double, ptr %2019, align 8, !tbaa !19
  %2021 = getelementptr inbounds double, ptr %1991, i64 3
  %2022 = load double, ptr %2021, align 8, !tbaa !19
  %2023 = fmul double %2016, %2022
  %2024 = tail call double @llvm.fmuladd.f64(double %2010, double %2020, double %2023)
  %2025 = getelementptr inbounds double, ptr %1991, i64 4
  %2026 = load double, ptr %2025, align 8, !tbaa !19
  %2027 = getelementptr inbounds double, ptr %1991, i64 6
  %2028 = load double, ptr %2027, align 8, !tbaa !19
  %2029 = fmul double %2016, %2028
  %2030 = tail call double @llvm.fmuladd.f64(double %2010, double %2026, double %2029)
  %2031 = getelementptr inbounds double, ptr %1991, i64 5
  %2032 = load double, ptr %2031, align 8, !tbaa !19
  %2033 = getelementptr inbounds double, ptr %1991, i64 7
  %2034 = load double, ptr %2033, align 8, !tbaa !19
  %2035 = fmul double %2016, %2034
  %2036 = tail call double @llvm.fmuladd.f64(double %2010, double %2032, double %2035)
  %2037 = fmul double %670, %2003
  %2038 = getelementptr inbounds double, ptr %1991, i64 8
  %2039 = load double, ptr %2038, align 8, !tbaa !19
  %2040 = fmul double %2037, %2039
  %2041 = getelementptr inbounds double, ptr %1991, i64 9
  %2042 = load double, ptr %2041, align 8, !tbaa !19
  %2043 = fmul double %2037, %2042
  %2044 = getelementptr inbounds double, ptr %1991, i64 10
  %2045 = load double, ptr %2044, align 8, !tbaa !19
  %2046 = fmul double %2037, %2045
  %2047 = getelementptr inbounds double, ptr %1991, i64 11
  %2048 = load double, ptr %2047, align 8, !tbaa !19
  %2049 = fmul double %2037, %2048
  %2050 = insertelement <2 x double> poison, double %1988, i64 0
  %2051 = shufflevector <2 x double> %2050, <2 x double> poison, <2 x i32> zeroinitializer
  %2052 = insertelement <2 x double> poison, double %2040, i64 0
  %2053 = insertelement <2 x double> %2052, double %2018, i64 1
  %2054 = fmul <2 x double> %2051, %2053
  %2055 = insertelement <2 x double> poison, double %2043, i64 0
  %2056 = insertelement <2 x double> %2055, double %2024, i64 1
  %2057 = fmul <2 x double> %2056, <double 2.500000e-01, double 2.500000e-01>
  %2058 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2054, <2 x double> <double 0x3FC5555555555555, double 0x3FC5555555555555>, <2 x double> %2057)
  %2059 = insertelement <2 x double> poison, double %2046, i64 0
  %2060 = insertelement <2 x double> %2059, double %2030, i64 1
  %2061 = fmul <2 x double> %2060, <double 5.000000e-01, double 5.000000e-01>
  %2062 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2058, <2 x double> %2051, <2 x double> %2061)
  %2063 = insertelement <2 x double> poison, double %2049, i64 0
  %2064 = insertelement <2 x double> %2063, double %2036, i64 1
  %2065 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2062, <2 x double> %2051, <2 x double> %2064)
  %2066 = fsub <2 x double> %1971, %2065
  %2067 = fadd double %2018, %2040
  %2068 = fadd double %2024, %2043
  %2069 = fadd double %2030, %2046
  %2070 = tail call double @llvm.fmuladd.f64(double %1988, double %2067, double %2068)
  %2071 = tail call double @llvm.fmuladd.f64(double %2070, double %1988, double %2069)
  %2072 = extractelement <2 x double> %2005, i64 1
  %2073 = fmul double %2072, %2071
  %2074 = insertelement <2 x double> poison, double %2073, i64 0
  %2075 = shufflevector <2 x double> %2074, <2 x double> poison, <2 x i32> zeroinitializer
  %2076 = shufflevector <2 x double> %2005, <2 x double> poison, <2 x i32> <i32 1, i32 0>
  %2077 = insertelement <2 x double> %2076, double %2008, i64 1
  %2078 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2075, <2 x double> %2077, <2 x double> %1970)
  %2079 = insertelement <2 x double> %2076, double %2008, i64 0
  %2080 = insertelement <2 x double> poison, double %2071, i64 0
  %2081 = shufflevector <2 x double> %2080, <2 x double> poison, <2 x i32> zeroinitializer
  %2082 = fmul <2 x double> %2079, %2081
  %2083 = shufflevector <2 x double> %2082, <2 x double> poison, <2 x i32> <i32 1, i32 poison>
  %2084 = shufflevector <2 x double> %2082, <2 x double> poison, <2 x i32> <i32 1, i32 1>
  %2085 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2084, <2 x double> %2005, <2 x double> %1969)
  %2086 = insertelement <2 x double> %2083, double %2073, i64 1
  %2087 = fadd <2 x double> %1973, %2086
  %2088 = load <2 x double>, ptr %1999, align 8, !tbaa !19
  %2089 = fsub <2 x double> %2088, %2086
  store <2 x double> %2089, ptr %1999, align 8, !tbaa !19
  %2090 = shufflevector <2 x double> %2079, <2 x double> poison, <2 x i32> zeroinitializer
  %2091 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2082, <2 x double> %2090, <2 x double> %1972)
  %2092 = extractelement <2 x double> %2082, i64 0
  %2093 = fadd double %1968, %2092
  %2094 = getelementptr inbounds %class.Vector, ptr %647, i64 %1981, i32 2
  %2095 = load double, ptr %2094, align 8, !tbaa !87
  %2096 = fsub double %2095, %2092
  store double %2096, ptr %2094, align 8, !tbaa !87
  %2097 = add nuw nsw i64 %1967, 1
  %2098 = icmp eq i64 %2097, %1965
  br i1 %2098, label %2099, label %1966

2099:                                             ; preds = %1966, %1953
  %2100 = phi double [ %1954, %1953 ], [ %2093, %1966 ]
  %2101 = phi <2 x double> [ %1955, %1953 ], [ %2085, %1966 ]
  %2102 = phi <2 x double> [ %1956, %1953 ], [ %2078, %1966 ]
  %2103 = phi <2 x double> [ %1957, %1953 ], [ %2066, %1966 ]
  %2104 = phi <2 x double> [ %1958, %1953 ], [ %2091, %1966 ]
  %2105 = phi <2 x double> [ %1959, %1953 ], [ %2087, %1966 ]
  %2106 = add i32 %1791, %674
  %2107 = add i32 %2106, %1961
  %2108 = getelementptr inbounds %class.Vector, ptr %648, i64 %685
  %2109 = load <2 x double>, ptr %2108, align 8, !tbaa !19
  %2110 = fadd <2 x double> %2105, %2109
  store <2 x double> %2110, ptr %2108, align 8, !tbaa !19
  %2111 = getelementptr inbounds %class.Vector, ptr %648, i64 %685, i32 2
  %2112 = load double, ptr %2111, align 8, !tbaa !87
  %2113 = fadd double %2100, %2112
  store double %2113, ptr %2111, align 8, !tbaa !87
  br i1 %143, label %2116, label %2114

2114:                                             ; preds = %2099
  %2115 = add nsw i32 %675, 1
  br label %2124

2116:                                             ; preds = %2099
  %2117 = load ptr, ptr %8, align 8, !tbaa !46
  %2118 = load i32, ptr %13, align 8, !tbaa !17
  %2119 = add nsw i32 %2118, 1
  store i32 %2119, ptr %13, align 8, !tbaa !17
  %2120 = sext i32 %2118 to i64
  %2121 = getelementptr inbounds i16, ptr %2117, i64 %2120
  %2122 = load i16, ptr %2121, align 2, !tbaa !44
  %2123 = zext i16 %2122 to i32
  br label %2124

2124:                                             ; preds = %1127, %1395, %2116, %2114, %697
  %2125 = phi i32 [ %1788, %2116 ], [ %1788, %2114 ], [ %698, %697 ], [ %701, %1395 ], [ %701, %1127 ]
  %2126 = phi i32 [ %1794, %2116 ], [ %1794, %2114 ], [ %679, %697 ], [ %1141, %1395 ], [ 0, %1127 ]
  %2127 = phi ptr [ %1795, %2116 ], [ %1795, %2114 ], [ %678, %697 ], [ %951, %1395 ], [ %951, %1127 ]
  %2128 = phi ptr [ %1796, %2116 ], [ %1796, %2114 ], [ %677, %697 ], [ %952, %1395 ], [ %952, %1127 ]
  %2129 = phi ptr [ %1797, %2116 ], [ %1797, %2114 ], [ %676, %697 ], [ %953, %1395 ], [ %953, %1127 ]
  %2130 = phi i32 [ %2123, %2116 ], [ %2115, %2114 ], [ %699, %697 ], [ %1396, %1395 ], [ %1131, %1127 ]
  %2131 = phi i32 [ %2107, %2116 ], [ %2107, %2114 ], [ %674, %697 ], [ %674, %1395 ], [ %674, %1127 ]
  %2132 = phi <2 x double> [ %2101, %2116 ], [ %2101, %2114 ], [ %681, %697 ], [ %681, %1395 ], [ %681, %1127 ]
  %2133 = phi <2 x double> [ %2102, %2116 ], [ %2102, %2114 ], [ %682, %697 ], [ %682, %1395 ], [ %682, %1127 ]
  %2134 = phi <2 x double> [ %2103, %2116 ], [ %2103, %2114 ], [ %683, %697 ], [ %683, %1395 ], [ %683, %1127 ]
  %2135 = phi <2 x double> [ %2104, %2116 ], [ %2104, %2114 ], [ %684, %697 ], [ %684, %1395 ], [ %684, %1127 ]
  %2136 = icmp slt i32 %2130, %35
  br i1 %2136, label %673, label %2137

2137:                                             ; preds = %2124, %644
  %2138 = phi ptr [ null, %644 ], [ %2129, %2124 ]
  %2139 = phi i32 [ %651, %644 ], [ %2130, %2124 ]
  %2140 = phi i32 [ 0, %644 ], [ %2131, %2124 ]
  %2141 = phi <2 x double> [ zeroinitializer, %644 ], [ %2132, %2124 ]
  %2142 = phi <2 x double> [ zeroinitializer, %644 ], [ %2133, %2124 ]
  %2143 = phi <2 x double> [ zeroinitializer, %644 ], [ %2134, %2124 ]
  %2144 = phi <2 x double> [ zeroinitializer, %644 ], [ %2135, %2124 ]
  br i1 %141, label %2152, label %2145

2145:                                             ; preds = %2137
  %2146 = trunc i32 %2139 to i16
  %2147 = load ptr, ptr %8, align 8, !tbaa !46
  %2148 = load i32, ptr %13, align 8, !tbaa !17
  %2149 = add nsw i32 %2148, -1
  %2150 = sext i32 %2149 to i64
  %2151 = getelementptr inbounds i16, ptr %2147, i64 %2150
  store i16 %2146, ptr %2151, align 2, !tbaa !44
  br label %2152

2152:                                             ; preds = %2145, %2137
  %2153 = sitofp i32 %2140 to double
  %2154 = getelementptr inbounds double, ptr %6, i64 22
  %2155 = load double, ptr %2154, align 8, !tbaa !19
  %2156 = fadd double %2155, %2153
  store double %2156, ptr %2154, align 8, !tbaa !19
  %2157 = getelementptr inbounds double, ptr %6, i64 2
  %2158 = load double, ptr %2157, align 8, !tbaa !19
  %2159 = extractelement <2 x double> %2143, i64 1
  %2160 = fadd double %2159, %2158
  store double %2160, ptr %2157, align 8, !tbaa !19
  %2161 = load double, ptr %6, align 8, !tbaa !19
  %2162 = extractelement <2 x double> %2143, i64 0
  %2163 = fadd double %2162, %2161
  store double %2163, ptr %6, align 8, !tbaa !19
  %2164 = getelementptr inbounds double, ptr %6, i64 3
  %2165 = load <4 x double>, ptr %2164, align 8, !tbaa !19
  %2166 = shufflevector <2 x double> %2141, <2 x double> %2144, <4 x i32> <i32 0, i32 1, i32 3, i32 poison>
  %2167 = shufflevector <4 x double> %2166, <4 x double> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 1>
  %2168 = fadd <4 x double> %2167, %2165
  store <4 x double> %2168, ptr %2164, align 8, !tbaa !19
  %2169 = getelementptr inbounds double, ptr %6, i64 7
  %2170 = load <4 x double>, ptr %2169, align 8, !tbaa !19
  %2171 = shufflevector <2 x double> %2142, <2 x double> %2144, <4 x i32> <i32 0, i32 1, i32 3, i32 poison>
  %2172 = shufflevector <4 x double> %2171, <4 x double> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 1>
  %2173 = fadd <4 x double> %2172, %2170
  store <4 x double> %2173, ptr %2169, align 8, !tbaa !19
  %2174 = getelementptr inbounds double, ptr %6, i64 11
  %2175 = load double, ptr %2174, align 8, !tbaa !19
  %2176 = extractelement <2 x double> %2144, i64 0
  %2177 = fadd double %2176, %2175
  store double %2177, ptr %2174, align 8, !tbaa !19
  %2178 = icmp eq ptr %2138, null
  br i1 %2178, label %2180, label %2179

2179:                                             ; preds = %2152
  tail call void @_ZdaPv(ptr noundef nonnull %2138) #10
  br label %2180

2180:                                             ; preds = %2152, %2179, %1
  ret void
}

; Function Attrs: sspstrong uwtable
define dso_local void @_ZN20ComputeNonbondedUtil19calc_pair_fullelectEP9nonbonded(ptr nocapture noundef readonly %0) local_unnamed_addr #0 align 2 {
  %2 = load i32, ptr @_ZN20ComputeNonbondedUtil8commOnlyE, align 4, !tbaa !5
  %3 = icmp eq i32 %2, 0
  br i1 %3, label %4, label %2337

4:                                                ; preds = %1
  %5 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 7
  %6 = load ptr, ptr %5, align 8, !tbaa !9
  %7 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 10
  %8 = load ptr, ptr %7, align 8, !tbaa !14
  %9 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 11
  %10 = load i32, ptr %9, align 8, !tbaa !15
  %11 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 12
  %12 = load i32, ptr %11, align 4, !tbaa !16
  %13 = getelementptr inbounds %class.Pairlists, ptr %8, i64 0, i32 1
  store i32 0, ptr %13, align 8, !tbaa !17
  %14 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 6
  %15 = load <2 x double>, ptr %14, align 8, !tbaa !19
  %16 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 6, i32 2
  %17 = load double, ptr %16, align 8, !tbaa !20
  %18 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 13
  %19 = load double, ptr %18, align 8, !tbaa !21
  %20 = fmul double %19, %19
  %21 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 14
  %22 = load double, ptr %21, align 8, !tbaa !22
  %23 = fmul double %22, %22
  %24 = load double, ptr @_ZN20ComputeNonbondedUtil12dielectric_1E, align 8, !tbaa !19
  %25 = load ptr, ptr @_ZN20ComputeNonbondedUtil7ljTableE, align 8, !tbaa !23
  %26 = load ptr, ptr @_ZN20ComputeNonbondedUtil3molE, align 8, !tbaa !23
  %27 = load ptr, ptr @_ZN20ComputeNonbondedUtil11table_shortE, align 8, !tbaa !23
  %28 = load ptr, ptr @_ZN20ComputeNonbondedUtil10slow_tableE, align 8, !tbaa !23
  %29 = load double, ptr @_ZN20ComputeNonbondedUtil7scalingE, align 8, !tbaa !19
  %30 = load double, ptr @_ZN20ComputeNonbondedUtil7scale14E, align 8, !tbaa !19
  %31 = fsub double 1.000000e+00, %30
  %32 = load double, ptr @_ZN20ComputeNonbondedUtil8r2_deltaE, align 8, !tbaa !19
  %33 = load i32, ptr @_ZN20ComputeNonbondedUtil12r2_delta_expE, align 4, !tbaa !5
  %34 = shl i32 %33, 6
  %35 = add i32 %34, -65472
  %36 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 5
  %37 = load i32, ptr %36, align 8, !tbaa !5
  %38 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 5, i64 1
  %39 = load i32, ptr %38, align 4, !tbaa !5
  %40 = load ptr, ptr %0, align 8, !tbaa !23
  %41 = getelementptr inbounds [2 x ptr], ptr %0, i64 0, i64 1
  %42 = load ptr, ptr %41, align 8, !tbaa !23
  %43 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 1
  %44 = load ptr, ptr %43, align 8, !tbaa !23
  %45 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 1, i64 1
  %46 = load ptr, ptr %45, align 8, !tbaa !23
  %47 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 9
  %48 = load ptr, ptr %47, align 8, !tbaa !24
  %49 = add nsw i32 %39, 5
  %50 = getelementptr inbounds %class.ResizeArray, ptr %48, i64 0, i32 1
  %51 = load ptr, ptr %50, align 8, !tbaa !25
  %52 = getelementptr inbounds %class.ResizeArrayRaw, ptr %51, i64 0, i32 2
  %53 = load i32, ptr %52, align 8, !tbaa !27
  %54 = icmp slt i32 %53, %49
  br i1 %54, label %55, label %93

55:                                               ; preds = %4
  %56 = getelementptr inbounds %class.ResizeArrayRaw, ptr %51, i64 0, i32 3
  %57 = load i32, ptr %56, align 4, !tbaa !30
  %58 = icmp slt i32 %57, %49
  br i1 %58, label %59, label %93

59:                                               ; preds = %55
  %60 = sitofp i32 %57 to float
  %61 = getelementptr inbounds %class.ResizeArrayRaw, ptr %51, i64 0, i32 5
  %62 = load float, ptr %61, align 4, !tbaa !31
  %63 = fmul float %62, %60
  %64 = fptosi float %63 to i32
  %65 = tail call i32 @llvm.smax.i32(i32 %64, i32 %49)
  %66 = sub nsw i32 %65, %57
  %67 = getelementptr inbounds %class.ResizeArrayRaw, ptr %51, i64 0, i32 6
  %68 = load i32, ptr %67, align 8, !tbaa !32
  %69 = icmp slt i32 %66, %68
  %70 = add nsw i32 %68, %57
  %71 = select i1 %69, i32 %70, i32 %65
  %72 = sext i32 %71 to i64
  %73 = shl nsw i64 %72, 1
  %74 = add nsw i64 %73, 31
  %75 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %74) #9
  %76 = getelementptr inbounds i8, ptr %75, i64 31
  %77 = ptrtoint ptr %76 to i64
  %78 = and i64 %77, 31
  %79 = sub nsw i64 0, %78
  %80 = getelementptr inbounds i8, ptr %76, i64 %79
  %81 = load ptr, ptr %51, align 8, !tbaa !33
  %82 = sext i32 %53 to i64
  %83 = shl nsw i64 %82, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %80, ptr align 1 %81, i64 %83, i1 false)
  %84 = icmp eq i32 %57, 0
  br i1 %84, label %90, label %85

85:                                               ; preds = %59
  %86 = getelementptr inbounds %class.ResizeArrayRaw, ptr %51, i64 0, i32 1
  %87 = load ptr, ptr %86, align 8, !tbaa !34
  %88 = icmp eq ptr %87, null
  br i1 %88, label %90, label %89

89:                                               ; preds = %85
  tail call void @_ZdaPv(ptr noundef nonnull %87) #10
  br label %90

90:                                               ; preds = %89, %85, %59
  %91 = getelementptr inbounds %class.ResizeArrayRaw, ptr %51, i64 0, i32 1
  store ptr %75, ptr %91, align 8, !tbaa !34
  store ptr %80, ptr %51, align 8, !tbaa !33
  store i32 %71, ptr %56, align 4, !tbaa !30
  %92 = load ptr, ptr %50, align 8, !tbaa !25
  br label %93

93:                                               ; preds = %4, %55, %90
  %94 = phi ptr [ %51, %4 ], [ %51, %55 ], [ %92, %90 ]
  store i32 %49, ptr %52, align 8, !tbaa !27
  %95 = load ptr, ptr %94, align 8, !tbaa !33
  %96 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %48, i64 0, i32 1, i32 1
  %97 = load ptr, ptr %96, align 8, !tbaa !35
  %98 = getelementptr inbounds %class.ResizeArrayRaw.23, ptr %97, i64 0, i32 2
  %99 = load i32, ptr %98, align 8, !tbaa !37
  %100 = icmp slt i32 %99, %49
  br i1 %100, label %101, label %139

101:                                              ; preds = %93
  %102 = getelementptr inbounds %class.ResizeArrayRaw.23, ptr %97, i64 0, i32 3
  %103 = load i32, ptr %102, align 4, !tbaa !39
  %104 = icmp slt i32 %103, %49
  br i1 %104, label %105, label %139

105:                                              ; preds = %101
  %106 = sitofp i32 %103 to float
  %107 = getelementptr inbounds %class.ResizeArrayRaw.23, ptr %97, i64 0, i32 5
  %108 = load float, ptr %107, align 4, !tbaa !40
  %109 = fmul float %108, %106
  %110 = fptosi float %109 to i32
  %111 = tail call i32 @llvm.smax.i32(i32 %110, i32 %49)
  %112 = sub nsw i32 %111, %103
  %113 = getelementptr inbounds %class.ResizeArrayRaw.23, ptr %97, i64 0, i32 6
  %114 = load i32, ptr %113, align 8, !tbaa !41
  %115 = icmp slt i32 %112, %114
  %116 = add nsw i32 %114, %103
  %117 = select i1 %115, i32 %116, i32 %111
  %118 = sext i32 %117 to i64
  %119 = shl nsw i64 %118, 3
  %120 = add nsw i64 %119, 31
  %121 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %120) #9
  %122 = getelementptr inbounds i8, ptr %121, i64 31
  %123 = ptrtoint ptr %122 to i64
  %124 = and i64 %123, 31
  %125 = sub nsw i64 0, %124
  %126 = getelementptr inbounds i8, ptr %122, i64 %125
  %127 = load ptr, ptr %97, align 8, !tbaa !42
  %128 = sext i32 %99 to i64
  %129 = shl nsw i64 %128, 3
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %126, ptr align 1 %127, i64 %129, i1 false)
  %130 = icmp eq i32 %103, 0
  br i1 %130, label %136, label %131

131:                                              ; preds = %105
  %132 = getelementptr inbounds %class.ResizeArrayRaw.23, ptr %97, i64 0, i32 1
  %133 = load ptr, ptr %132, align 8, !tbaa !43
  %134 = icmp eq ptr %133, null
  br i1 %134, label %136, label %135

135:                                              ; preds = %131
  tail call void @_ZdaPv(ptr noundef nonnull %133) #10
  br label %136

136:                                              ; preds = %135, %131, %105
  %137 = getelementptr inbounds %class.ResizeArrayRaw.23, ptr %97, i64 0, i32 1
  store ptr %121, ptr %137, align 8, !tbaa !43
  store ptr %126, ptr %97, align 8, !tbaa !42
  store i32 %117, ptr %102, align 4, !tbaa !39
  %138 = load ptr, ptr %96, align 8, !tbaa !35
  br label %139

139:                                              ; preds = %93, %101, %136
  %140 = phi ptr [ %97, %93 ], [ %97, %101 ], [ %138, %136 ]
  store i32 %49, ptr %98, align 8, !tbaa !37
  %141 = load ptr, ptr %140, align 8, !tbaa !42
  %142 = getelementptr inbounds i32, ptr %141, i64 1
  %143 = icmp eq i32 %10, 0
  %144 = icmp ne i32 %12, 0
  %145 = select i1 %143, i1 %144, i1 false
  %146 = select i1 %145, i32 0, i32 %49
  %147 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %48, i64 0, i32 2, i32 1
  %148 = load ptr, ptr %147, align 8, !tbaa !25
  %149 = getelementptr inbounds %class.ResizeArrayRaw, ptr %148, i64 0, i32 2
  %150 = load i32, ptr %149, align 8, !tbaa !27
  %151 = icmp slt i32 %150, %146
  br i1 %151, label %152, label %190

152:                                              ; preds = %139
  %153 = getelementptr inbounds %class.ResizeArrayRaw, ptr %148, i64 0, i32 3
  %154 = load i32, ptr %153, align 4, !tbaa !30
  %155 = icmp slt i32 %154, %146
  br i1 %155, label %156, label %190

156:                                              ; preds = %152
  %157 = sitofp i32 %154 to float
  %158 = getelementptr inbounds %class.ResizeArrayRaw, ptr %148, i64 0, i32 5
  %159 = load float, ptr %158, align 4, !tbaa !31
  %160 = fmul float %159, %157
  %161 = fptosi float %160 to i32
  %162 = tail call i32 @llvm.smax.i32(i32 %161, i32 %146)
  %163 = sub nsw i32 %162, %154
  %164 = getelementptr inbounds %class.ResizeArrayRaw, ptr %148, i64 0, i32 6
  %165 = load i32, ptr %164, align 8, !tbaa !32
  %166 = icmp slt i32 %163, %165
  %167 = add nsw i32 %165, %154
  %168 = select i1 %166, i32 %167, i32 %162
  %169 = sext i32 %168 to i64
  %170 = shl nsw i64 %169, 1
  %171 = add nsw i64 %170, 31
  %172 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %171) #9
  %173 = getelementptr inbounds i8, ptr %172, i64 31
  %174 = ptrtoint ptr %173 to i64
  %175 = and i64 %174, 31
  %176 = sub nsw i64 0, %175
  %177 = getelementptr inbounds i8, ptr %173, i64 %176
  %178 = load ptr, ptr %148, align 8, !tbaa !33
  %179 = sext i32 %150 to i64
  %180 = shl nsw i64 %179, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %177, ptr align 1 %178, i64 %180, i1 false)
  %181 = icmp eq i32 %154, 0
  br i1 %181, label %187, label %182

182:                                              ; preds = %156
  %183 = getelementptr inbounds %class.ResizeArrayRaw, ptr %148, i64 0, i32 1
  %184 = load ptr, ptr %183, align 8, !tbaa !34
  %185 = icmp eq ptr %184, null
  br i1 %185, label %187, label %186

186:                                              ; preds = %182
  tail call void @_ZdaPv(ptr noundef nonnull %184) #10
  br label %187

187:                                              ; preds = %186, %182, %156
  %188 = getelementptr inbounds %class.ResizeArrayRaw, ptr %148, i64 0, i32 1
  store ptr %172, ptr %188, align 8, !tbaa !34
  store ptr %177, ptr %148, align 8, !tbaa !33
  store i32 %168, ptr %153, align 4, !tbaa !30
  %189 = load ptr, ptr %147, align 8, !tbaa !25
  br label %190

190:                                              ; preds = %139, %152, %187
  %191 = phi ptr [ %148, %139 ], [ %148, %152 ], [ %189, %187 ]
  store i32 %146, ptr %149, align 8, !tbaa !27
  %192 = load ptr, ptr %191, align 8, !tbaa !33
  %193 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %48, i64 0, i32 3, i32 1
  %194 = load ptr, ptr %193, align 8, !tbaa !25
  %195 = getelementptr inbounds %class.ResizeArrayRaw, ptr %194, i64 0, i32 2
  %196 = load i32, ptr %195, align 8, !tbaa !27
  %197 = icmp slt i32 %196, %146
  br i1 %197, label %198, label %236

198:                                              ; preds = %190
  %199 = getelementptr inbounds %class.ResizeArrayRaw, ptr %194, i64 0, i32 3
  %200 = load i32, ptr %199, align 4, !tbaa !30
  %201 = icmp slt i32 %200, %146
  br i1 %201, label %202, label %236

202:                                              ; preds = %198
  %203 = sitofp i32 %200 to float
  %204 = getelementptr inbounds %class.ResizeArrayRaw, ptr %194, i64 0, i32 5
  %205 = load float, ptr %204, align 4, !tbaa !31
  %206 = fmul float %205, %203
  %207 = fptosi float %206 to i32
  %208 = tail call i32 @llvm.smax.i32(i32 %207, i32 %146)
  %209 = sub nsw i32 %208, %200
  %210 = getelementptr inbounds %class.ResizeArrayRaw, ptr %194, i64 0, i32 6
  %211 = load i32, ptr %210, align 8, !tbaa !32
  %212 = icmp slt i32 %209, %211
  %213 = add nsw i32 %211, %200
  %214 = select i1 %212, i32 %213, i32 %208
  %215 = sext i32 %214 to i64
  %216 = shl nsw i64 %215, 1
  %217 = add nsw i64 %216, 31
  %218 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %217) #9
  %219 = getelementptr inbounds i8, ptr %218, i64 31
  %220 = ptrtoint ptr %219 to i64
  %221 = and i64 %220, 31
  %222 = sub nsw i64 0, %221
  %223 = getelementptr inbounds i8, ptr %219, i64 %222
  %224 = load ptr, ptr %194, align 8, !tbaa !33
  %225 = sext i32 %196 to i64
  %226 = shl nsw i64 %225, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %223, ptr align 1 %224, i64 %226, i1 false)
  %227 = icmp eq i32 %200, 0
  br i1 %227, label %233, label %228

228:                                              ; preds = %202
  %229 = getelementptr inbounds %class.ResizeArrayRaw, ptr %194, i64 0, i32 1
  %230 = load ptr, ptr %229, align 8, !tbaa !34
  %231 = icmp eq ptr %230, null
  br i1 %231, label %233, label %232

232:                                              ; preds = %228
  tail call void @_ZdaPv(ptr noundef nonnull %230) #10
  br label %233

233:                                              ; preds = %232, %228, %202
  %234 = getelementptr inbounds %class.ResizeArrayRaw, ptr %194, i64 0, i32 1
  store ptr %218, ptr %234, align 8, !tbaa !34
  store ptr %223, ptr %194, align 8, !tbaa !33
  store i32 %214, ptr %199, align 4, !tbaa !30
  %235 = load ptr, ptr %193, align 8, !tbaa !25
  br label %236

236:                                              ; preds = %190, %198, %233
  %237 = phi ptr [ %194, %190 ], [ %194, %198 ], [ %235, %233 ]
  store i32 %146, ptr %195, align 8, !tbaa !27
  %238 = load ptr, ptr %237, align 8, !tbaa !33
  %239 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %48, i64 0, i32 4, i32 1
  %240 = load ptr, ptr %239, align 8, !tbaa !25
  %241 = getelementptr inbounds %class.ResizeArrayRaw, ptr %240, i64 0, i32 2
  %242 = load i32, ptr %241, align 8, !tbaa !27
  %243 = icmp slt i32 %242, %146
  br i1 %243, label %244, label %282

244:                                              ; preds = %236
  %245 = getelementptr inbounds %class.ResizeArrayRaw, ptr %240, i64 0, i32 3
  %246 = load i32, ptr %245, align 4, !tbaa !30
  %247 = icmp slt i32 %246, %146
  br i1 %247, label %248, label %282

248:                                              ; preds = %244
  %249 = sitofp i32 %246 to float
  %250 = getelementptr inbounds %class.ResizeArrayRaw, ptr %240, i64 0, i32 5
  %251 = load float, ptr %250, align 4, !tbaa !31
  %252 = fmul float %251, %249
  %253 = fptosi float %252 to i32
  %254 = tail call i32 @llvm.smax.i32(i32 %253, i32 %146)
  %255 = sub nsw i32 %254, %246
  %256 = getelementptr inbounds %class.ResizeArrayRaw, ptr %240, i64 0, i32 6
  %257 = load i32, ptr %256, align 8, !tbaa !32
  %258 = icmp slt i32 %255, %257
  %259 = add nsw i32 %257, %246
  %260 = select i1 %258, i32 %259, i32 %254
  %261 = sext i32 %260 to i64
  %262 = shl nsw i64 %261, 1
  %263 = add nsw i64 %262, 31
  %264 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %263) #9
  %265 = getelementptr inbounds i8, ptr %264, i64 31
  %266 = ptrtoint ptr %265 to i64
  %267 = and i64 %266, 31
  %268 = sub nsw i64 0, %267
  %269 = getelementptr inbounds i8, ptr %265, i64 %268
  %270 = load ptr, ptr %240, align 8, !tbaa !33
  %271 = sext i32 %242 to i64
  %272 = shl nsw i64 %271, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %269, ptr align 1 %270, i64 %272, i1 false)
  %273 = icmp eq i32 %246, 0
  br i1 %273, label %279, label %274

274:                                              ; preds = %248
  %275 = getelementptr inbounds %class.ResizeArrayRaw, ptr %240, i64 0, i32 1
  %276 = load ptr, ptr %275, align 8, !tbaa !34
  %277 = icmp eq ptr %276, null
  br i1 %277, label %279, label %278

278:                                              ; preds = %274
  tail call void @_ZdaPv(ptr noundef nonnull %276) #10
  br label %279

279:                                              ; preds = %278, %274, %248
  %280 = getelementptr inbounds %class.ResizeArrayRaw, ptr %240, i64 0, i32 1
  store ptr %264, ptr %280, align 8, !tbaa !34
  store ptr %269, ptr %240, align 8, !tbaa !33
  store i32 %260, ptr %245, align 4, !tbaa !30
  %281 = load ptr, ptr %239, align 8, !tbaa !25
  br label %282

282:                                              ; preds = %236, %244, %279
  %283 = phi ptr [ %240, %236 ], [ %240, %244 ], [ %281, %279 ]
  store i32 %146, ptr %241, align 8, !tbaa !27
  %284 = load ptr, ptr %283, align 8, !tbaa !33
  %285 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %48, i64 0, i32 5, i32 1
  %286 = load ptr, ptr %285, align 8, !tbaa !25
  %287 = getelementptr inbounds %class.ResizeArrayRaw, ptr %286, i64 0, i32 2
  %288 = load i32, ptr %287, align 8, !tbaa !27
  %289 = icmp slt i32 %288, %146
  br i1 %289, label %290, label %328

290:                                              ; preds = %282
  %291 = getelementptr inbounds %class.ResizeArrayRaw, ptr %286, i64 0, i32 3
  %292 = load i32, ptr %291, align 4, !tbaa !30
  %293 = icmp slt i32 %292, %146
  br i1 %293, label %294, label %328

294:                                              ; preds = %290
  %295 = sitofp i32 %292 to float
  %296 = getelementptr inbounds %class.ResizeArrayRaw, ptr %286, i64 0, i32 5
  %297 = load float, ptr %296, align 4, !tbaa !31
  %298 = fmul float %297, %295
  %299 = fptosi float %298 to i32
  %300 = tail call i32 @llvm.smax.i32(i32 %299, i32 %146)
  %301 = sub nsw i32 %300, %292
  %302 = getelementptr inbounds %class.ResizeArrayRaw, ptr %286, i64 0, i32 6
  %303 = load i32, ptr %302, align 8, !tbaa !32
  %304 = icmp slt i32 %301, %303
  %305 = add nsw i32 %303, %292
  %306 = select i1 %304, i32 %305, i32 %300
  %307 = sext i32 %306 to i64
  %308 = shl nsw i64 %307, 1
  %309 = add nsw i64 %308, 31
  %310 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %309) #9
  %311 = getelementptr inbounds i8, ptr %310, i64 31
  %312 = ptrtoint ptr %311 to i64
  %313 = and i64 %312, 31
  %314 = sub nsw i64 0, %313
  %315 = getelementptr inbounds i8, ptr %311, i64 %314
  %316 = load ptr, ptr %286, align 8, !tbaa !33
  %317 = sext i32 %288 to i64
  %318 = shl nsw i64 %317, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %315, ptr align 1 %316, i64 %318, i1 false)
  %319 = icmp eq i32 %292, 0
  br i1 %319, label %325, label %320

320:                                              ; preds = %294
  %321 = getelementptr inbounds %class.ResizeArrayRaw, ptr %286, i64 0, i32 1
  %322 = load ptr, ptr %321, align 8, !tbaa !34
  %323 = icmp eq ptr %322, null
  br i1 %323, label %325, label %324

324:                                              ; preds = %320
  tail call void @_ZdaPv(ptr noundef nonnull %322) #10
  br label %325

325:                                              ; preds = %324, %320, %294
  %326 = getelementptr inbounds %class.ResizeArrayRaw, ptr %286, i64 0, i32 1
  store ptr %310, ptr %326, align 8, !tbaa !34
  store ptr %315, ptr %286, align 8, !tbaa !33
  store i32 %306, ptr %291, align 4, !tbaa !30
  %327 = load ptr, ptr %285, align 8, !tbaa !25
  br label %328

328:                                              ; preds = %282, %290, %325
  %329 = phi ptr [ %286, %282 ], [ %286, %290 ], [ %327, %325 ]
  store i32 %146, ptr %287, align 8, !tbaa !27
  %330 = load ptr, ptr %329, align 8, !tbaa !33
  %331 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %48, i64 0, i32 6, i32 1
  %332 = load ptr, ptr %331, align 8, !tbaa !25
  %333 = getelementptr inbounds %class.ResizeArrayRaw, ptr %332, i64 0, i32 2
  %334 = load i32, ptr %333, align 8, !tbaa !27
  %335 = icmp slt i32 %334, %146
  br i1 %335, label %336, label %374

336:                                              ; preds = %328
  %337 = getelementptr inbounds %class.ResizeArrayRaw, ptr %332, i64 0, i32 3
  %338 = load i32, ptr %337, align 4, !tbaa !30
  %339 = icmp slt i32 %338, %146
  br i1 %339, label %340, label %374

340:                                              ; preds = %336
  %341 = sitofp i32 %338 to float
  %342 = getelementptr inbounds %class.ResizeArrayRaw, ptr %332, i64 0, i32 5
  %343 = load float, ptr %342, align 4, !tbaa !31
  %344 = fmul float %343, %341
  %345 = fptosi float %344 to i32
  %346 = tail call i32 @llvm.smax.i32(i32 %345, i32 %146)
  %347 = sub nsw i32 %346, %338
  %348 = getelementptr inbounds %class.ResizeArrayRaw, ptr %332, i64 0, i32 6
  %349 = load i32, ptr %348, align 8, !tbaa !32
  %350 = icmp slt i32 %347, %349
  %351 = add nsw i32 %349, %338
  %352 = select i1 %350, i32 %351, i32 %346
  %353 = sext i32 %352 to i64
  %354 = shl nsw i64 %353, 1
  %355 = add nsw i64 %354, 31
  %356 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %355) #9
  %357 = getelementptr inbounds i8, ptr %356, i64 31
  %358 = ptrtoint ptr %357 to i64
  %359 = and i64 %358, 31
  %360 = sub nsw i64 0, %359
  %361 = getelementptr inbounds i8, ptr %357, i64 %360
  %362 = load ptr, ptr %332, align 8, !tbaa !33
  %363 = sext i32 %334 to i64
  %364 = shl nsw i64 %363, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %361, ptr align 1 %362, i64 %364, i1 false)
  %365 = icmp eq i32 %338, 0
  br i1 %365, label %371, label %366

366:                                              ; preds = %340
  %367 = getelementptr inbounds %class.ResizeArrayRaw, ptr %332, i64 0, i32 1
  %368 = load ptr, ptr %367, align 8, !tbaa !34
  %369 = icmp eq ptr %368, null
  br i1 %369, label %371, label %370

370:                                              ; preds = %366
  tail call void @_ZdaPv(ptr noundef nonnull %368) #10
  br label %371

371:                                              ; preds = %370, %366, %340
  %372 = getelementptr inbounds %class.ResizeArrayRaw, ptr %332, i64 0, i32 1
  store ptr %356, ptr %372, align 8, !tbaa !34
  store ptr %361, ptr %332, align 8, !tbaa !33
  store i32 %352, ptr %337, align 4, !tbaa !30
  %373 = load ptr, ptr %331, align 8, !tbaa !25
  br label %374

374:                                              ; preds = %328, %336, %371
  %375 = phi ptr [ %332, %328 ], [ %332, %336 ], [ %373, %371 ]
  store i32 %146, ptr %333, align 8, !tbaa !27
  %376 = load ptr, ptr %375, align 8, !tbaa !33
  %377 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %48, i64 0, i32 15, i32 1
  %378 = load ptr, ptr %377, align 8, !tbaa !25
  %379 = getelementptr inbounds %class.ResizeArrayRaw, ptr %378, i64 0, i32 2
  %380 = load i32, ptr %379, align 8, !tbaa !27
  %381 = icmp slt i32 %380, %146
  br i1 %381, label %382, label %420

382:                                              ; preds = %374
  %383 = getelementptr inbounds %class.ResizeArrayRaw, ptr %378, i64 0, i32 3
  %384 = load i32, ptr %383, align 4, !tbaa !30
  %385 = icmp slt i32 %384, %146
  br i1 %385, label %386, label %420

386:                                              ; preds = %382
  %387 = sitofp i32 %384 to float
  %388 = getelementptr inbounds %class.ResizeArrayRaw, ptr %378, i64 0, i32 5
  %389 = load float, ptr %388, align 4, !tbaa !31
  %390 = fmul float %389, %387
  %391 = fptosi float %390 to i32
  %392 = tail call i32 @llvm.smax.i32(i32 %391, i32 %146)
  %393 = sub nsw i32 %392, %384
  %394 = getelementptr inbounds %class.ResizeArrayRaw, ptr %378, i64 0, i32 6
  %395 = load i32, ptr %394, align 8, !tbaa !32
  %396 = icmp slt i32 %393, %395
  %397 = add nsw i32 %395, %384
  %398 = select i1 %396, i32 %397, i32 %392
  %399 = sext i32 %398 to i64
  %400 = shl nsw i64 %399, 1
  %401 = add nsw i64 %400, 31
  %402 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %401) #9
  %403 = getelementptr inbounds i8, ptr %402, i64 31
  %404 = ptrtoint ptr %403 to i64
  %405 = and i64 %404, 31
  %406 = sub nsw i64 0, %405
  %407 = getelementptr inbounds i8, ptr %403, i64 %406
  %408 = load ptr, ptr %378, align 8, !tbaa !33
  %409 = sext i32 %380 to i64
  %410 = shl nsw i64 %409, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %407, ptr align 1 %408, i64 %410, i1 false)
  %411 = icmp eq i32 %384, 0
  br i1 %411, label %417, label %412

412:                                              ; preds = %386
  %413 = getelementptr inbounds %class.ResizeArrayRaw, ptr %378, i64 0, i32 1
  %414 = load ptr, ptr %413, align 8, !tbaa !34
  %415 = icmp eq ptr %414, null
  br i1 %415, label %417, label %416

416:                                              ; preds = %412
  tail call void @_ZdaPv(ptr noundef nonnull %414) #10
  br label %417

417:                                              ; preds = %416, %412, %386
  %418 = getelementptr inbounds %class.ResizeArrayRaw, ptr %378, i64 0, i32 1
  store ptr %402, ptr %418, align 8, !tbaa !34
  store ptr %407, ptr %378, align 8, !tbaa !33
  store i32 %398, ptr %383, align 4, !tbaa !30
  %419 = load ptr, ptr %377, align 8, !tbaa !25
  br label %420

420:                                              ; preds = %374, %382, %417
  %421 = phi ptr [ %378, %374 ], [ %378, %382 ], [ %419, %417 ]
  store i32 %146, ptr %379, align 8, !tbaa !27
  %422 = load ptr, ptr %421, align 8, !tbaa !33
  %423 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %48, i64 0, i32 16, i32 1
  %424 = load ptr, ptr %423, align 8, !tbaa !25
  %425 = getelementptr inbounds %class.ResizeArrayRaw, ptr %424, i64 0, i32 2
  %426 = load i32, ptr %425, align 8, !tbaa !27
  %427 = icmp slt i32 %426, %146
  br i1 %427, label %428, label %466

428:                                              ; preds = %420
  %429 = getelementptr inbounds %class.ResizeArrayRaw, ptr %424, i64 0, i32 3
  %430 = load i32, ptr %429, align 4, !tbaa !30
  %431 = icmp slt i32 %430, %146
  br i1 %431, label %432, label %466

432:                                              ; preds = %428
  %433 = sitofp i32 %430 to float
  %434 = getelementptr inbounds %class.ResizeArrayRaw, ptr %424, i64 0, i32 5
  %435 = load float, ptr %434, align 4, !tbaa !31
  %436 = fmul float %435, %433
  %437 = fptosi float %436 to i32
  %438 = tail call i32 @llvm.smax.i32(i32 %437, i32 %146)
  %439 = sub nsw i32 %438, %430
  %440 = getelementptr inbounds %class.ResizeArrayRaw, ptr %424, i64 0, i32 6
  %441 = load i32, ptr %440, align 8, !tbaa !32
  %442 = icmp slt i32 %439, %441
  %443 = add nsw i32 %441, %430
  %444 = select i1 %442, i32 %443, i32 %438
  %445 = sext i32 %444 to i64
  %446 = shl nsw i64 %445, 1
  %447 = add nsw i64 %446, 31
  %448 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %447) #9
  %449 = getelementptr inbounds i8, ptr %448, i64 31
  %450 = ptrtoint ptr %449 to i64
  %451 = and i64 %450, 31
  %452 = sub nsw i64 0, %451
  %453 = getelementptr inbounds i8, ptr %449, i64 %452
  %454 = load ptr, ptr %424, align 8, !tbaa !33
  %455 = sext i32 %426 to i64
  %456 = shl nsw i64 %455, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %453, ptr align 1 %454, i64 %456, i1 false)
  %457 = icmp eq i32 %430, 0
  br i1 %457, label %463, label %458

458:                                              ; preds = %432
  %459 = getelementptr inbounds %class.ResizeArrayRaw, ptr %424, i64 0, i32 1
  %460 = load ptr, ptr %459, align 8, !tbaa !34
  %461 = icmp eq ptr %460, null
  br i1 %461, label %463, label %462

462:                                              ; preds = %458
  tail call void @_ZdaPv(ptr noundef nonnull %460) #10
  br label %463

463:                                              ; preds = %462, %458, %432
  %464 = getelementptr inbounds %class.ResizeArrayRaw, ptr %424, i64 0, i32 1
  store ptr %448, ptr %464, align 8, !tbaa !34
  store ptr %453, ptr %424, align 8, !tbaa !33
  store i32 %444, ptr %429, align 4, !tbaa !30
  %465 = load ptr, ptr %423, align 8, !tbaa !25
  br label %466

466:                                              ; preds = %420, %428, %463
  %467 = phi ptr [ %424, %420 ], [ %424, %428 ], [ %465, %463 ]
  store i32 %146, ptr %425, align 8, !tbaa !27
  %468 = load ptr, ptr %467, align 8, !tbaa !33
  br i1 %145, label %610, label %469

469:                                              ; preds = %466
  %470 = icmp sgt i32 %39, 0
  br i1 %470, label %471, label %601

471:                                              ; preds = %469
  %472 = zext i32 %39 to i64
  %473 = and i64 %472, 1
  %474 = icmp eq i32 %39, 1
  br i1 %474, label %507, label %475

475:                                              ; preds = %471
  %476 = and i64 %472, 4294967294
  br label %477

477:                                              ; preds = %502, %475
  %478 = phi i64 [ 0, %475 ], [ %504, %502 ]
  %479 = phi i32 [ 0, %475 ], [ %503, %502 ]
  %480 = phi i64 [ 0, %475 ], [ %505, %502 ]
  %481 = getelementptr inbounds %struct.CompAtom, ptr %42, i64 %478, i32 4
  %482 = load i8, ptr %481, align 1
  %483 = and i8 %482, 7
  %484 = icmp eq i8 %483, 0
  br i1 %484, label %490, label %485

485:                                              ; preds = %477
  %486 = trunc i64 %478 to i16
  %487 = add nsw i32 %479, 1
  %488 = sext i32 %479 to i64
  %489 = getelementptr inbounds i16, ptr %192, i64 %488
  store i16 %486, ptr %489, align 2, !tbaa !44
  br label %490

490:                                              ; preds = %477, %485
  %491 = phi i32 [ %487, %485 ], [ %479, %477 ]
  %492 = or i64 %478, 1
  %493 = getelementptr inbounds %struct.CompAtom, ptr %42, i64 %492, i32 4
  %494 = load i8, ptr %493, align 1
  %495 = and i8 %494, 7
  %496 = icmp eq i8 %495, 0
  br i1 %496, label %502, label %497

497:                                              ; preds = %490
  %498 = trunc i64 %492 to i16
  %499 = add nsw i32 %491, 1
  %500 = sext i32 %491 to i64
  %501 = getelementptr inbounds i16, ptr %192, i64 %500
  store i16 %498, ptr %501, align 2, !tbaa !44
  br label %502

502:                                              ; preds = %497, %490
  %503 = phi i32 [ %499, %497 ], [ %491, %490 ]
  %504 = add nuw nsw i64 %478, 2
  %505 = add i64 %480, 2
  %506 = icmp eq i64 %505, %476
  br i1 %506, label %507, label %477

507:                                              ; preds = %502, %471
  %508 = phi i32 [ undef, %471 ], [ %503, %502 ]
  %509 = phi i64 [ 0, %471 ], [ %504, %502 ]
  %510 = phi i32 [ 0, %471 ], [ %503, %502 ]
  %511 = icmp eq i64 %473, 0
  br i1 %511, label %522, label %512

512:                                              ; preds = %507
  %513 = getelementptr inbounds %struct.CompAtom, ptr %42, i64 %509, i32 4
  %514 = load i8, ptr %513, align 1
  %515 = and i8 %514, 7
  %516 = icmp eq i8 %515, 0
  br i1 %516, label %522, label %517

517:                                              ; preds = %512
  %518 = trunc i64 %509 to i16
  %519 = add nsw i32 %510, 1
  %520 = sext i32 %510 to i64
  %521 = getelementptr inbounds i16, ptr %192, i64 %520
  store i16 %518, ptr %521, align 2, !tbaa !44
  br label %522

522:                                              ; preds = %512, %517, %507
  %523 = phi i32 [ %508, %507 ], [ %519, %517 ], [ %510, %512 ]
  %524 = icmp eq i32 %523, 0
  br i1 %524, label %532, label %525

525:                                              ; preds = %522
  %526 = add nsw i32 %523, -1
  %527 = sext i32 %526 to i64
  %528 = getelementptr inbounds i16, ptr %192, i64 %527
  %529 = load i16, ptr %528, align 2, !tbaa !44
  %530 = sext i32 %523 to i64
  %531 = getelementptr inbounds i16, ptr %192, i64 %530
  store i16 %529, ptr %531, align 2, !tbaa !44
  br label %532

532:                                              ; preds = %525, %522
  %533 = load i32, ptr @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4, !tbaa !5
  %534 = icmp ne i32 %533, 0
  %535 = icmp sgt i32 %523, 0
  %536 = and i1 %534, %535
  br i1 %536, label %537, label %601

537:                                              ; preds = %532
  %538 = zext i32 %523 to i64
  %539 = and i64 %538, 1
  %540 = icmp eq i32 %523, 1
  br i1 %540, label %575, label %541

541:                                              ; preds = %537
  %542 = and i64 %538, 4294967294
  br label %543

543:                                              ; preds = %570, %541
  %544 = phi i64 [ 0, %541 ], [ %572, %570 ]
  %545 = phi i32 [ 0, %541 ], [ %571, %570 ]
  %546 = phi i64 [ 0, %541 ], [ %573, %570 ]
  %547 = getelementptr inbounds i16, ptr %192, i64 %544
  %548 = load i16, ptr %547, align 2, !tbaa !44
  %549 = zext i16 %548 to i64
  %550 = getelementptr inbounds %struct.CompAtomExt, ptr %46, i64 %549
  %551 = load i32, ptr %550, align 4
  %552 = icmp sgt i32 %551, -1
  br i1 %552, label %553, label %557

553:                                              ; preds = %543
  %554 = add nsw i32 %545, 1
  %555 = sext i32 %545 to i64
  %556 = getelementptr inbounds i16, ptr %238, i64 %555
  store i16 %548, ptr %556, align 2, !tbaa !44
  br label %557

557:                                              ; preds = %543, %553
  %558 = phi i32 [ %545, %543 ], [ %554, %553 ]
  %559 = or i64 %544, 1
  %560 = getelementptr inbounds i16, ptr %192, i64 %559
  %561 = load i16, ptr %560, align 2, !tbaa !44
  %562 = zext i16 %561 to i64
  %563 = getelementptr inbounds %struct.CompAtomExt, ptr %46, i64 %562
  %564 = load i32, ptr %563, align 4
  %565 = icmp sgt i32 %564, -1
  br i1 %565, label %566, label %570

566:                                              ; preds = %557
  %567 = add nsw i32 %558, 1
  %568 = sext i32 %558 to i64
  %569 = getelementptr inbounds i16, ptr %238, i64 %568
  store i16 %561, ptr %569, align 2, !tbaa !44
  br label %570

570:                                              ; preds = %566, %557
  %571 = phi i32 [ %558, %557 ], [ %567, %566 ]
  %572 = add nuw nsw i64 %544, 2
  %573 = add i64 %546, 2
  %574 = icmp eq i64 %573, %542
  br i1 %574, label %575, label %543

575:                                              ; preds = %570, %537
  %576 = phi i32 [ undef, %537 ], [ %571, %570 ]
  %577 = phi i64 [ 0, %537 ], [ %572, %570 ]
  %578 = phi i32 [ 0, %537 ], [ %571, %570 ]
  %579 = icmp eq i64 %539, 0
  br i1 %579, label %591, label %580

580:                                              ; preds = %575
  %581 = getelementptr inbounds i16, ptr %192, i64 %577
  %582 = load i16, ptr %581, align 2, !tbaa !44
  %583 = zext i16 %582 to i64
  %584 = getelementptr inbounds %struct.CompAtomExt, ptr %46, i64 %583
  %585 = load i32, ptr %584, align 4
  %586 = icmp sgt i32 %585, -1
  br i1 %586, label %587, label %591

587:                                              ; preds = %580
  %588 = add nsw i32 %578, 1
  %589 = sext i32 %578 to i64
  %590 = getelementptr inbounds i16, ptr %238, i64 %589
  store i16 %582, ptr %590, align 2, !tbaa !44
  br label %591

591:                                              ; preds = %580, %587, %575
  %592 = phi i32 [ %576, %575 ], [ %578, %580 ], [ %588, %587 ]
  %593 = icmp eq i32 %592, 0
  br i1 %593, label %601, label %594

594:                                              ; preds = %591
  %595 = add nsw i32 %592, -1
  %596 = sext i32 %595 to i64
  %597 = getelementptr inbounds i16, ptr %238, i64 %596
  %598 = load i16, ptr %597, align 2, !tbaa !44
  %599 = sext i32 %592 to i64
  %600 = getelementptr inbounds i16, ptr %238, i64 %599
  store i16 %598, ptr %600, align 2, !tbaa !44
  br label %601

601:                                              ; preds = %469, %532, %594, %591
  %602 = phi i32 [ %523, %594 ], [ %523, %591 ], [ %523, %532 ], [ 0, %469 ]
  %603 = phi i32 [ %592, %594 ], [ 0, %591 ], [ 0, %532 ], [ 0, %469 ]
  %604 = load i32, ptr %13, align 8, !tbaa !17
  %605 = add nsw i32 %604, 1
  store i32 %605, ptr %13, align 8, !tbaa !17
  %606 = trunc i32 %37 to i16
  %607 = load ptr, ptr %8, align 8, !tbaa !46
  %608 = sext i32 %604 to i64
  %609 = getelementptr inbounds i16, ptr %607, i64 %608
  store i16 %606, ptr %609, align 2, !tbaa !44
  br label %620

610:                                              ; preds = %466
  %611 = load ptr, ptr %8, align 8, !tbaa !46
  %612 = load i32, ptr %13, align 8, !tbaa !17
  %613 = add nsw i32 %612, 1
  store i32 %613, ptr %13, align 8, !tbaa !17
  %614 = sext i32 %612 to i64
  %615 = getelementptr inbounds i16, ptr %611, i64 %614
  %616 = load i16, ptr %615, align 2, !tbaa !44
  %617 = zext i16 %616 to i32
  %618 = icmp eq i32 %37, %617
  br i1 %618, label %620, label %619

619:                                              ; preds = %610
  tail call void @_Z8NAMD_bugPKc(ptr noundef nonnull @.str)
  br label %620

620:                                              ; preds = %610, %619, %601
  %621 = phi i32 [ 0, %619 ], [ 0, %610 ], [ %602, %601 ]
  %622 = phi i32 [ 0, %619 ], [ 0, %610 ], [ %603, %601 ]
  %623 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 3
  %624 = load ptr, ptr %623, align 8, !tbaa !23
  %625 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 3, i64 1
  %626 = load ptr, ptr %625, align 8, !tbaa !23
  %627 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 4
  %628 = load ptr, ptr %627, align 8, !tbaa !23
  %629 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 4, i64 1
  %630 = load ptr, ptr %629, align 8, !tbaa !23
  %631 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 18
  %632 = load i32, ptr %631, align 4, !tbaa !48
  %633 = add nsw i32 %632, -1
  %634 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 16
  %635 = load i32, ptr %634, align 4, !tbaa !47
  br i1 %145, label %638, label %636

636:                                              ; preds = %620
  %637 = load i32, ptr %13, align 8, !tbaa !17
  br label %645

638:                                              ; preds = %620
  %639 = load ptr, ptr %8, align 8, !tbaa !46
  %640 = load i32, ptr %13, align 8, !tbaa !17
  %641 = sext i32 %640 to i64
  %642 = getelementptr inbounds i16, ptr %639, i64 %641
  %643 = load i16, ptr %642, align 2, !tbaa !44
  %644 = zext i16 %643 to i32
  br label %645

645:                                              ; preds = %638, %636
  %646 = phi i32 [ %640, %638 ], [ %637, %636 ]
  %647 = phi i32 [ %644, %638 ], [ 0, %636 ]
  %648 = add nsw i32 %646, 1
  store i32 %648, ptr %13, align 8
  %649 = icmp slt i32 %647, %37
  br i1 %649, label %650, label %2285

650:                                              ; preds = %645
  %651 = getelementptr inbounds %class.Molecule, ptr %26, i64 0, i32 1
  %652 = getelementptr inbounds %class.Molecule, ptr %26, i64 0, i32 4
  %653 = getelementptr inbounds %class.Molecule, ptr %26, i64 0, i32 2
  %654 = getelementptr inbounds %class.Molecule, ptr %26, i64 0, i32 3
  %655 = ptrtoint ptr %422 to i64
  %656 = add nsw i32 %39, 10
  %657 = getelementptr inbounds %class.Pairlists, ptr %8, i64 0, i32 2
  %658 = getelementptr inbounds i16, ptr %422, i64 1
  %659 = ptrtoint ptr %468 to i64
  %660 = ptrtoint ptr %330 to i64
  %661 = ptrtoint ptr %376 to i64
  %662 = getelementptr inbounds %class.LJTable, ptr %25, i64 0, i32 1
  %663 = getelementptr inbounds %class.LJTable, ptr %25, i64 0, i32 2
  %664 = fneg double %29
  %665 = fsub double 1.000000e+00, %31
  %666 = fmul double %31, 2.000000e+00
  %667 = fmul double %31, 4.000000e+00
  %668 = fmul double %31, 6.000000e+00
  %669 = insertelement <2 x double> poison, double %23, i64 0
  %670 = shufflevector <2 x double> %669, <2 x double> poison, <2 x i32> zeroinitializer
  br label %671

671:                                              ; preds = %650, %2270
  %672 = phi i32 [ 0, %650 ], [ %2277, %2270 ]
  %673 = phi i32 [ %647, %650 ], [ %2276, %2270 ]
  %674 = phi ptr [ null, %650 ], [ %2275, %2270 ]
  %675 = phi ptr [ null, %650 ], [ %2274, %2270 ]
  %676 = phi ptr [ null, %650 ], [ %2273, %2270 ]
  %677 = phi i32 [ 0, %650 ], [ %2272, %2270 ]
  %678 = phi i32 [ %635, %650 ], [ %2271, %2270 ]
  %679 = phi <2 x double> [ zeroinitializer, %650 ], [ %2278, %2270 ]
  %680 = phi <2 x double> [ zeroinitializer, %650 ], [ %2279, %2270 ]
  %681 = phi <2 x double> [ zeroinitializer, %650 ], [ %2280, %2270 ]
  %682 = phi <2 x double> [ zeroinitializer, %650 ], [ %2281, %2270 ]
  %683 = phi <2 x double> [ zeroinitializer, %650 ], [ %2282, %2270 ]
  %684 = phi <2 x double> [ zeroinitializer, %650 ], [ %2283, %2270 ]
  %685 = sext i32 %673 to i64
  %686 = getelementptr inbounds %struct.CompAtom, ptr %40, i64 %685
  %687 = getelementptr inbounds %struct.CompAtomExt, ptr %44, i64 %685
  br i1 %145, label %1753, label %688

688:                                              ; preds = %671
  %689 = getelementptr inbounds %struct.CompAtom, ptr %40, i64 %685, i32 4
  %690 = load i8, ptr %689, align 1
  %691 = lshr i8 %690, 3
  %692 = and i8 %691, 15
  %693 = zext i8 %692 to i32
  %694 = icmp eq i8 %692, 0
  br i1 %694, label %700, label %695

695:                                              ; preds = %688
  %696 = icmp eq i32 %678, 0
  br i1 %696, label %700, label %697

697:                                              ; preds = %695
  %698 = add nsw i32 %678, -1
  %699 = add nsw i32 %673, %693
  br label %2270

700:                                              ; preds = %695, %688
  %701 = phi i32 [ %633, %695 ], [ %678, %688 ]
  %702 = load <2 x double>, ptr %686, align 8, !tbaa !19
  %703 = fadd <2 x double> %15, %702
  %704 = getelementptr inbounds %class.Vector, ptr %686, i64 0, i32 2
  %705 = load double, ptr %704, align 8, !tbaa !49
  %706 = fadd double %17, %705
  %707 = load i32, ptr %687, align 4
  %708 = shl i32 %707, 2
  %709 = ashr exact i32 %708, 2
  %710 = load ptr, ptr %651, align 8, !tbaa !51
  %711 = sext i32 %709 to i64
  %712 = getelementptr inbounds %class.ExclusionCheck, ptr %710, i64 %711
  %713 = load i32, ptr %712, align 8, !tbaa !53
  %714 = getelementptr inbounds %class.ExclusionCheck, ptr %710, i64 %711, i32 1
  %715 = load i32, ptr %714, align 4, !tbaa !55
  %716 = getelementptr inbounds %class.ExclusionCheck, ptr %710, i64 %711, i32 2
  %717 = load ptr, ptr %716, align 8, !tbaa !56
  %718 = icmp eq ptr %717, null
  br i1 %718, label %723, label %719

719:                                              ; preds = %700
  %720 = sext i32 %713 to i64
  %721 = sub nsw i64 0, %720
  %722 = getelementptr inbounds i8, ptr %717, i64 %721
  br label %949

723:                                              ; preds = %700
  %724 = icmp eq ptr %674, null
  br i1 %724, label %812, label %725

725:                                              ; preds = %723
  %726 = load i32, ptr %675, align 4, !tbaa !5
  %727 = icmp slt i32 %726, 1
  br i1 %727, label %775, label %728

728:                                              ; preds = %725
  %729 = add nuw i32 %726, 1
  %730 = zext i32 %729 to i64
  %731 = add nsw i64 %730, -1
  %732 = add nsw i64 %730, -2
  %733 = and i64 %731, 3
  %734 = icmp ult i64 %732, 3
  br i1 %734, label %762, label %735

735:                                              ; preds = %728
  %736 = and i64 %731, -4
  br label %737

737:                                              ; preds = %737, %735
  %738 = phi i64 [ 1, %735 ], [ %759, %737 ]
  %739 = phi i64 [ 0, %735 ], [ %760, %737 ]
  %740 = getelementptr inbounds i32, ptr %675, i64 %738
  %741 = load i32, ptr %740, align 4, !tbaa !5
  %742 = sext i32 %741 to i64
  %743 = getelementptr inbounds i8, ptr %674, i64 %742
  store i8 0, ptr %743, align 1, !tbaa !57
  %744 = add nuw nsw i64 %738, 1
  %745 = getelementptr inbounds i32, ptr %675, i64 %744
  %746 = load i32, ptr %745, align 4, !tbaa !5
  %747 = sext i32 %746 to i64
  %748 = getelementptr inbounds i8, ptr %674, i64 %747
  store i8 0, ptr %748, align 1, !tbaa !57
  %749 = add nuw nsw i64 %738, 2
  %750 = getelementptr inbounds i32, ptr %675, i64 %749
  %751 = load i32, ptr %750, align 4, !tbaa !5
  %752 = sext i32 %751 to i64
  %753 = getelementptr inbounds i8, ptr %674, i64 %752
  store i8 0, ptr %753, align 1, !tbaa !57
  %754 = add nuw nsw i64 %738, 3
  %755 = getelementptr inbounds i32, ptr %675, i64 %754
  %756 = load i32, ptr %755, align 4, !tbaa !5
  %757 = sext i32 %756 to i64
  %758 = getelementptr inbounds i8, ptr %674, i64 %757
  store i8 0, ptr %758, align 1, !tbaa !57
  %759 = add nuw nsw i64 %738, 4
  %760 = add i64 %739, 4
  %761 = icmp eq i64 %760, %736
  br i1 %761, label %762, label %737

762:                                              ; preds = %737, %728
  %763 = phi i64 [ 1, %728 ], [ %759, %737 ]
  %764 = icmp eq i64 %733, 0
  br i1 %764, label %775, label %765

765:                                              ; preds = %762, %765
  %766 = phi i64 [ %772, %765 ], [ %763, %762 ]
  %767 = phi i64 [ %773, %765 ], [ 0, %762 ]
  %768 = getelementptr inbounds i32, ptr %675, i64 %766
  %769 = load i32, ptr %768, align 4, !tbaa !5
  %770 = sext i32 %769 to i64
  %771 = getelementptr inbounds i8, ptr %674, i64 %770
  store i8 0, ptr %771, align 1, !tbaa !57
  %772 = add nuw nsw i64 %766, 1
  %773 = add i64 %767, 1
  %774 = icmp eq i64 %773, %733
  br i1 %774, label %775, label %765, !llvm.loop !100

775:                                              ; preds = %762, %765, %725
  %776 = load i32, ptr %676, align 4, !tbaa !5
  %777 = icmp slt i32 %776, 1
  br i1 %777, label %832, label %778

778:                                              ; preds = %775
  %779 = add nuw i32 %776, 1
  %780 = zext i32 %779 to i64
  %781 = add nsw i64 %780, -1
  %782 = add nsw i64 %780, -2
  %783 = and i64 %781, 3
  %784 = icmp ult i64 %782, 3
  br i1 %784, label %819, label %785

785:                                              ; preds = %778
  %786 = and i64 %781, -4
  br label %787

787:                                              ; preds = %787, %785
  %788 = phi i64 [ 1, %785 ], [ %809, %787 ]
  %789 = phi i64 [ 0, %785 ], [ %810, %787 ]
  %790 = getelementptr inbounds i32, ptr %676, i64 %788
  %791 = load i32, ptr %790, align 4, !tbaa !5
  %792 = sext i32 %791 to i64
  %793 = getelementptr inbounds i8, ptr %674, i64 %792
  store i8 0, ptr %793, align 1, !tbaa !57
  %794 = add nuw nsw i64 %788, 1
  %795 = getelementptr inbounds i32, ptr %676, i64 %794
  %796 = load i32, ptr %795, align 4, !tbaa !5
  %797 = sext i32 %796 to i64
  %798 = getelementptr inbounds i8, ptr %674, i64 %797
  store i8 0, ptr %798, align 1, !tbaa !57
  %799 = add nuw nsw i64 %788, 2
  %800 = getelementptr inbounds i32, ptr %676, i64 %799
  %801 = load i32, ptr %800, align 4, !tbaa !5
  %802 = sext i32 %801 to i64
  %803 = getelementptr inbounds i8, ptr %674, i64 %802
  store i8 0, ptr %803, align 1, !tbaa !57
  %804 = add nuw nsw i64 %788, 3
  %805 = getelementptr inbounds i32, ptr %676, i64 %804
  %806 = load i32, ptr %805, align 4, !tbaa !5
  %807 = sext i32 %806 to i64
  %808 = getelementptr inbounds i8, ptr %674, i64 %807
  store i8 0, ptr %808, align 1, !tbaa !57
  %809 = add nuw nsw i64 %788, 4
  %810 = add i64 %789, 4
  %811 = icmp eq i64 %810, %786
  br i1 %811, label %819, label %787

812:                                              ; preds = %723
  %813 = load i32, ptr %652, align 8, !tbaa !60
  %814 = tail call i32 @llvm.smax.i32(i32 %813, i32 -1)
  %815 = sext i32 %814 to i64
  %816 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %815) #9
  %817 = load i32, ptr %652, align 8, !tbaa !60
  %818 = sext i32 %817 to i64
  tail call void @llvm.memset.p0.i64(ptr nonnull align 1 %816, i8 0, i64 %818, i1 false)
  br label %832

819:                                              ; preds = %787, %778
  %820 = phi i64 [ 1, %778 ], [ %809, %787 ]
  %821 = icmp eq i64 %783, 0
  br i1 %821, label %832, label %822

822:                                              ; preds = %819, %822
  %823 = phi i64 [ %829, %822 ], [ %820, %819 ]
  %824 = phi i64 [ %830, %822 ], [ 0, %819 ]
  %825 = getelementptr inbounds i32, ptr %676, i64 %823
  %826 = load i32, ptr %825, align 4, !tbaa !5
  %827 = sext i32 %826 to i64
  %828 = getelementptr inbounds i8, ptr %674, i64 %827
  store i8 0, ptr %828, align 1, !tbaa !57
  %829 = add nuw nsw i64 %823, 1
  %830 = add i64 %824, 1
  %831 = icmp eq i64 %830, %783
  br i1 %831, label %832, label %822, !llvm.loop !101

832:                                              ; preds = %819, %822, %775, %812
  %833 = phi ptr [ %816, %812 ], [ %674, %775 ], [ %674, %822 ], [ %674, %819 ]
  %834 = load i32, ptr %687, align 4
  %835 = shl i32 %834, 2
  %836 = ashr exact i32 %835, 2
  %837 = load ptr, ptr %653, align 8, !tbaa !62
  %838 = sext i32 %836 to i64
  %839 = getelementptr inbounds ptr, ptr %837, i64 %838
  %840 = load ptr, ptr %839, align 8, !tbaa !23
  %841 = load i32, ptr %840, align 4, !tbaa !5
  %842 = icmp slt i32 %841, 1
  br i1 %842, label %895, label %843

843:                                              ; preds = %832
  %844 = add nuw i32 %841, 1
  %845 = zext i32 %844 to i64
  %846 = add nsw i64 %845, -1
  %847 = add nsw i64 %845, -2
  %848 = and i64 %846, 3
  %849 = icmp ult i64 %847, 3
  br i1 %849, label %877, label %850

850:                                              ; preds = %843
  %851 = and i64 %846, -4
  br label %852

852:                                              ; preds = %852, %850
  %853 = phi i64 [ 1, %850 ], [ %874, %852 ]
  %854 = phi i64 [ 0, %850 ], [ %875, %852 ]
  %855 = getelementptr inbounds i32, ptr %840, i64 %853
  %856 = load i32, ptr %855, align 4, !tbaa !5
  %857 = sext i32 %856 to i64
  %858 = getelementptr inbounds i8, ptr %833, i64 %857
  store i8 1, ptr %858, align 1, !tbaa !57
  %859 = add nuw nsw i64 %853, 1
  %860 = getelementptr inbounds i32, ptr %840, i64 %859
  %861 = load i32, ptr %860, align 4, !tbaa !5
  %862 = sext i32 %861 to i64
  %863 = getelementptr inbounds i8, ptr %833, i64 %862
  store i8 1, ptr %863, align 1, !tbaa !57
  %864 = add nuw nsw i64 %853, 2
  %865 = getelementptr inbounds i32, ptr %840, i64 %864
  %866 = load i32, ptr %865, align 4, !tbaa !5
  %867 = sext i32 %866 to i64
  %868 = getelementptr inbounds i8, ptr %833, i64 %867
  store i8 1, ptr %868, align 1, !tbaa !57
  %869 = add nuw nsw i64 %853, 3
  %870 = getelementptr inbounds i32, ptr %840, i64 %869
  %871 = load i32, ptr %870, align 4, !tbaa !5
  %872 = sext i32 %871 to i64
  %873 = getelementptr inbounds i8, ptr %833, i64 %872
  store i8 1, ptr %873, align 1, !tbaa !57
  %874 = add nuw nsw i64 %853, 4
  %875 = add i64 %854, 4
  %876 = icmp eq i64 %875, %851
  br i1 %876, label %877, label %852

877:                                              ; preds = %852, %843
  %878 = phi i64 [ 1, %843 ], [ %874, %852 ]
  %879 = icmp eq i64 %848, 0
  br i1 %879, label %890, label %880

880:                                              ; preds = %877, %880
  %881 = phi i64 [ %887, %880 ], [ %878, %877 ]
  %882 = phi i64 [ %888, %880 ], [ 0, %877 ]
  %883 = getelementptr inbounds i32, ptr %840, i64 %881
  %884 = load i32, ptr %883, align 4, !tbaa !5
  %885 = sext i32 %884 to i64
  %886 = getelementptr inbounds i8, ptr %833, i64 %885
  store i8 1, ptr %886, align 1, !tbaa !57
  %887 = add nuw nsw i64 %881, 1
  %888 = add i64 %882, 1
  %889 = icmp eq i64 %888, %848
  br i1 %889, label %890, label %880, !llvm.loop !102

890:                                              ; preds = %880, %877
  %891 = load i32, ptr %687, align 4
  %892 = shl i32 %891, 2
  %893 = ashr exact i32 %892, 2
  %894 = sext i32 %893 to i64
  br label %895

895:                                              ; preds = %890, %832
  %896 = phi i64 [ %894, %890 ], [ %838, %832 ]
  %897 = load ptr, ptr %654, align 8, !tbaa !64
  %898 = getelementptr inbounds ptr, ptr %897, i64 %896
  %899 = load ptr, ptr %898, align 8, !tbaa !23
  %900 = load i32, ptr %899, align 4, !tbaa !5
  %901 = icmp slt i32 %900, 1
  br i1 %901, label %949, label %902

902:                                              ; preds = %895
  %903 = add nuw i32 %900, 1
  %904 = zext i32 %903 to i64
  %905 = add nsw i64 %904, -1
  %906 = add nsw i64 %904, -2
  %907 = and i64 %905, 3
  %908 = icmp ult i64 %906, 3
  br i1 %908, label %936, label %909

909:                                              ; preds = %902
  %910 = and i64 %905, -4
  br label %911

911:                                              ; preds = %911, %909
  %912 = phi i64 [ 1, %909 ], [ %933, %911 ]
  %913 = phi i64 [ 0, %909 ], [ %934, %911 ]
  %914 = getelementptr inbounds i32, ptr %899, i64 %912
  %915 = load i32, ptr %914, align 4, !tbaa !5
  %916 = sext i32 %915 to i64
  %917 = getelementptr inbounds i8, ptr %833, i64 %916
  store i8 2, ptr %917, align 1, !tbaa !57
  %918 = add nuw nsw i64 %912, 1
  %919 = getelementptr inbounds i32, ptr %899, i64 %918
  %920 = load i32, ptr %919, align 4, !tbaa !5
  %921 = sext i32 %920 to i64
  %922 = getelementptr inbounds i8, ptr %833, i64 %921
  store i8 2, ptr %922, align 1, !tbaa !57
  %923 = add nuw nsw i64 %912, 2
  %924 = getelementptr inbounds i32, ptr %899, i64 %923
  %925 = load i32, ptr %924, align 4, !tbaa !5
  %926 = sext i32 %925 to i64
  %927 = getelementptr inbounds i8, ptr %833, i64 %926
  store i8 2, ptr %927, align 1, !tbaa !57
  %928 = add nuw nsw i64 %912, 3
  %929 = getelementptr inbounds i32, ptr %899, i64 %928
  %930 = load i32, ptr %929, align 4, !tbaa !5
  %931 = sext i32 %930 to i64
  %932 = getelementptr inbounds i8, ptr %833, i64 %931
  store i8 2, ptr %932, align 1, !tbaa !57
  %933 = add nuw nsw i64 %912, 4
  %934 = add i64 %913, 4
  %935 = icmp eq i64 %934, %910
  br i1 %935, label %936, label %911

936:                                              ; preds = %911, %902
  %937 = phi i64 [ 1, %902 ], [ %933, %911 ]
  %938 = icmp eq i64 %907, 0
  br i1 %938, label %949, label %939

939:                                              ; preds = %936, %939
  %940 = phi i64 [ %946, %939 ], [ %937, %936 ]
  %941 = phi i64 [ %947, %939 ], [ 0, %936 ]
  %942 = getelementptr inbounds i32, ptr %899, i64 %940
  %943 = load i32, ptr %942, align 4, !tbaa !5
  %944 = sext i32 %943 to i64
  %945 = getelementptr inbounds i8, ptr %833, i64 %944
  store i8 2, ptr %945, align 1, !tbaa !57
  %946 = add nuw nsw i64 %940, 1
  %947 = add i64 %941, 1
  %948 = icmp eq i64 %947, %907
  br i1 %948, label %949, label %939, !llvm.loop !103

949:                                              ; preds = %936, %939, %895, %719
  %950 = phi ptr [ %722, %719 ], [ %833, %895 ], [ %833, %939 ], [ %833, %936 ]
  %951 = phi ptr [ %676, %719 ], [ %899, %895 ], [ %899, %939 ], [ %899, %936 ]
  %952 = phi ptr [ %675, %719 ], [ %840, %895 ], [ %840, %939 ], [ %840, %936 ]
  %953 = phi ptr [ %674, %719 ], [ %833, %895 ], [ %833, %939 ], [ %833, %936 ]
  %954 = load i8, ptr %689, align 1
  %955 = and i8 %954, 7
  %956 = icmp eq i8 %955, 0
  %957 = load i32, ptr @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4, !tbaa !5
  br i1 %956, label %1140, label %958

958:                                              ; preds = %949
  %959 = icmp eq i32 %957, 0
  br i1 %959, label %966, label %960

960:                                              ; preds = %958
  %961 = load i32, ptr %687, align 4
  %962 = freeze i32 %961
  %963 = icmp slt i32 %962, 0
  %964 = select i1 %963, ptr %238, ptr %192
  %965 = select i1 %963, i32 %622, i32 %621
  br label %966

966:                                              ; preds = %960, %958
  %967 = phi ptr [ %192, %958 ], [ %964, %960 ]
  %968 = phi i32 [ %621, %958 ], [ %965, %960 ]
  %969 = icmp sgt i32 %968, 0
  br i1 %969, label %970, label %1121

970:                                              ; preds = %966
  %971 = icmp ugt i32 %968, 6
  br i1 %971, label %972, label %1056

972:                                              ; preds = %970
  %973 = add nsw i32 %968, -2
  %974 = getelementptr inbounds i16, ptr %967, i64 1
  %975 = load i16, ptr %974, align 2, !tbaa !44
  %976 = zext i16 %975 to i64
  %977 = getelementptr inbounds %struct.CompAtom, ptr %42, i64 %976
  %978 = getelementptr inbounds %class.Vector, ptr %977, i64 0, i32 2
  %979 = load double, ptr %978, align 8, !tbaa !49
  %980 = load i16, ptr %967, align 2, !tbaa !44
  %981 = zext i16 %980 to i64
  %982 = getelementptr inbounds %struct.CompAtom, ptr %42, i64 %981
  %983 = getelementptr inbounds %class.Vector, ptr %982, i64 0, i32 2
  %984 = load double, ptr %983, align 8, !tbaa !49
  %985 = getelementptr inbounds %class.Vector, ptr %977, i64 0, i32 1
  %986 = load double, ptr %985, align 8, !tbaa !66
  %987 = getelementptr inbounds %class.Vector, ptr %982, i64 0, i32 1
  %988 = load double, ptr %987, align 8, !tbaa !66
  %989 = load double, ptr %977, align 8, !tbaa !67
  %990 = load double, ptr %982, align 8, !tbaa !67
  %991 = zext i32 %973 to i64
  %992 = insertelement <2 x double> poison, double %979, i64 0
  %993 = insertelement <2 x double> %992, double %984, i64 1
  %994 = insertelement <2 x double> poison, double %986, i64 0
  %995 = insertelement <2 x double> %994, double %988, i64 1
  %996 = insertelement <2 x double> poison, double %989, i64 0
  %997 = insertelement <2 x double> %996, double %990, i64 1
  %998 = insertelement <2 x double> poison, double %706, i64 0
  %999 = shufflevector <2 x double> %998, <2 x double> poison, <2 x i32> zeroinitializer
  %1000 = shufflevector <2 x double> %703, <2 x double> poison, <2 x i32> <i32 1, i32 1>
  %1001 = shufflevector <2 x double> %703, <2 x double> poison, <2 x i32> zeroinitializer
  br label %1002

1002:                                             ; preds = %972, %1002
  %1003 = phi i64 [ 2, %972 ], [ %1046, %1002 ]
  %1004 = phi i32 [ 0, %972 ], [ %1045, %1002 ]
  %1005 = phi i16 [ %980, %972 ], [ %1012, %1002 ]
  %1006 = phi i16 [ %975, %972 ], [ %1015, %1002 ]
  %1007 = phi <2 x double> [ %993, %972 ], [ %1049, %1002 ]
  %1008 = phi <2 x double> [ %995, %972 ], [ %1051, %1002 ]
  %1009 = phi <2 x double> [ %997, %972 ], [ %1053, %1002 ]
  %1010 = fsub <2 x double> %999, %1007
  %1011 = getelementptr inbounds i16, ptr %967, i64 %1003
  %1012 = load i16, ptr %1011, align 2, !tbaa !44
  %1013 = or i64 %1003, 1
  %1014 = getelementptr inbounds i16, ptr %967, i64 %1013
  %1015 = load i16, ptr %1014, align 2, !tbaa !44
  %1016 = zext i16 %1012 to i64
  %1017 = getelementptr inbounds %struct.CompAtom, ptr %42, i64 %1016
  %1018 = load double, ptr %1017, align 8, !tbaa !67
  %1019 = zext i16 %1015 to i64
  %1020 = getelementptr inbounds %struct.CompAtom, ptr %42, i64 %1019
  %1021 = load double, ptr %1020, align 8, !tbaa !67
  %1022 = getelementptr inbounds %class.Vector, ptr %1017, i64 0, i32 1
  %1023 = load double, ptr %1022, align 8, !tbaa !66
  %1024 = getelementptr inbounds %class.Vector, ptr %1020, i64 0, i32 1
  %1025 = load double, ptr %1024, align 8, !tbaa !66
  %1026 = getelementptr inbounds %class.Vector, ptr %1017, i64 0, i32 2
  %1027 = load double, ptr %1026, align 8, !tbaa !49
  %1028 = getelementptr inbounds %class.Vector, ptr %1020, i64 0, i32 2
  %1029 = load double, ptr %1028, align 8, !tbaa !49
  %1030 = fsub <2 x double> %1001, %1009
  %1031 = fmul <2 x double> %1030, %1030
  %1032 = fsub <2 x double> %1000, %1008
  %1033 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %1032, <2 x double> %1032, <2 x double> %1031)
  %1034 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %1010, <2 x double> %1010, <2 x double> %1033)
  %1035 = fcmp olt <2 x double> %1034, %670
  %1036 = zext i32 %1004 to i64
  %1037 = getelementptr inbounds i16, ptr %284, i64 %1036
  store i16 %1005, ptr %1037, align 2, !tbaa !44
  %1038 = extractelement <2 x i1> %1035, i64 1
  %1039 = zext i1 %1038 to i32
  %1040 = add nuw nsw i32 %1004, %1039
  %1041 = zext i32 %1040 to i64
  %1042 = getelementptr inbounds i16, ptr %284, i64 %1041
  store i16 %1006, ptr %1042, align 2, !tbaa !44
  %1043 = extractelement <2 x i1> %1035, i64 0
  %1044 = zext i1 %1043 to i32
  %1045 = add i32 %1040, %1044
  %1046 = add nuw nsw i64 %1003, 2
  %1047 = icmp ult i64 %1046, %991
  %1048 = insertelement <2 x double> poison, double %1029, i64 0
  %1049 = insertelement <2 x double> %1048, double %1027, i64 1
  %1050 = insertelement <2 x double> poison, double %1025, i64 0
  %1051 = insertelement <2 x double> %1050, double %1023, i64 1
  %1052 = insertelement <2 x double> poison, double %1021, i64 0
  %1053 = insertelement <2 x double> %1052, double %1018, i64 1
  br i1 %1047, label %1002, label %1054

1054:                                             ; preds = %1002
  %1055 = trunc i64 %1003 to i32
  br label %1056

1056:                                             ; preds = %1054, %970
  %1057 = phi i32 [ %1045, %1054 ], [ 0, %970 ]
  %1058 = phi i32 [ %1055, %1054 ], [ 0, %970 ]
  %1059 = icmp slt i32 %1058, %968
  br i1 %1059, label %1060, label %1065

1060:                                             ; preds = %1056
  %1061 = zext i32 %1058 to i64
  %1062 = zext i32 %968 to i64
  %1063 = extractelement <2 x double> %703, i64 0
  %1064 = extractelement <2 x double> %703, i64 1
  br label %1070

1065:                                             ; preds = %1093, %1056
  %1066 = phi i32 [ %1057, %1056 ], [ %1094, %1093 ]
  %1067 = icmp sgt i32 %1066, 0
  br i1 %1067, label %1068, label %1121

1068:                                             ; preds = %1065
  %1069 = zext i32 %1066 to i64
  br label %1097

1070:                                             ; preds = %1060, %1093
  %1071 = phi i64 [ %1061, %1060 ], [ %1095, %1093 ]
  %1072 = phi i32 [ %1057, %1060 ], [ %1094, %1093 ]
  %1073 = getelementptr inbounds i16, ptr %967, i64 %1071
  %1074 = load i16, ptr %1073, align 2, !tbaa !44
  %1075 = zext i16 %1074 to i64
  %1076 = getelementptr inbounds %struct.CompAtom, ptr %42, i64 %1075
  %1077 = load double, ptr %1076, align 8, !tbaa !67
  %1078 = getelementptr inbounds %class.Vector, ptr %1076, i64 0, i32 1
  %1079 = load double, ptr %1078, align 8, !tbaa !66
  %1080 = getelementptr inbounds %class.Vector, ptr %1076, i64 0, i32 2
  %1081 = load double, ptr %1080, align 8, !tbaa !49
  %1082 = fsub double %1063, %1077
  %1083 = fmul double %1082, %1082
  %1084 = fsub double %1064, %1079
  %1085 = tail call double @llvm.fmuladd.f64(double %1084, double %1084, double %1083)
  %1086 = fsub double %706, %1081
  %1087 = tail call double @llvm.fmuladd.f64(double %1086, double %1086, double %1085)
  %1088 = fcmp ugt double %1087, %23
  br i1 %1088, label %1093, label %1089

1089:                                             ; preds = %1070
  %1090 = add nsw i32 %1072, 1
  %1091 = sext i32 %1072 to i64
  %1092 = getelementptr inbounds i16, ptr %284, i64 %1091
  store i16 %1074, ptr %1092, align 2, !tbaa !44
  br label %1093

1093:                                             ; preds = %1089, %1070
  %1094 = phi i32 [ %1090, %1089 ], [ %1072, %1070 ]
  %1095 = add nuw nsw i64 %1071, 1
  %1096 = icmp eq i64 %1095, %1062
  br i1 %1096, label %1065, label %1070

1097:                                             ; preds = %1068, %1114
  %1098 = phi i64 [ 0, %1068 ], [ %1117, %1114 ]
  %1099 = phi ptr [ %422, %1068 ], [ %1116, %1114 ]
  %1100 = getelementptr inbounds i16, ptr %284, i64 %1098
  %1101 = load i16, ptr %1100, align 2, !tbaa !44
  %1102 = zext i16 %1101 to i64
  %1103 = getelementptr inbounds %struct.CompAtom, ptr %42, i64 %1102, i32 4
  %1104 = load i8, ptr %1103, align 1
  %1105 = and i8 %1104, 7
  store i16 %1101, ptr %1099, align 2, !tbaa !44
  %1106 = getelementptr inbounds i16, ptr %1099, i64 1
  %1107 = insertelement <2 x i16> poison, i16 %1101, i64 0
  %1108 = shufflevector <2 x i16> %1107, <2 x i16> poison, <2 x i32> zeroinitializer
  %1109 = add <2 x i16> %1108, <i16 1, i16 2>
  store <2 x i16> %1109, ptr %1106, align 2, !tbaa !44
  %1110 = icmp ult i8 %1105, 4
  br i1 %1110, label %1114, label %1111

1111:                                             ; preds = %1097
  %1112 = add <2 x i16> %1108, <i16 3, i16 4>
  %1113 = getelementptr inbounds i16, ptr %1099, i64 3
  store <2 x i16> %1112, ptr %1113, align 2, !tbaa !44
  br label %1114

1114:                                             ; preds = %1111, %1097
  %1115 = zext i8 %1105 to i64
  %1116 = getelementptr inbounds i16, ptr %1099, i64 %1115
  %1117 = add nuw nsw i64 %1098, 1
  %1118 = icmp eq i64 %1117, %1069
  br i1 %1118, label %1119, label %1097

1119:                                             ; preds = %1114
  %1120 = ptrtoint ptr %1116 to i64
  br label %1121

1121:                                             ; preds = %1119, %1065, %966
  %1122 = phi i64 [ %1120, %1119 ], [ %655, %1065 ], [ %655, %966 ]
  %1123 = sub i64 %1122, %655
  %1124 = lshr exact i64 %1123, 1
  %1125 = trunc i64 %1124 to i32
  %1126 = icmp eq i32 %1125, 0
  br i1 %1126, label %1127, label %1132

1127:                                             ; preds = %1121
  %1128 = load i8, ptr %689, align 1
  %1129 = and i8 %1128, 7
  %1130 = zext i8 %1129 to i32
  %1131 = add nsw i32 %673, %1130
  br label %2270

1132:                                             ; preds = %1121
  %1133 = shl i64 %1123, 31
  %1134 = add i64 %1133, -4294967296
  %1135 = ashr i64 %1134, 32
  %1136 = getelementptr inbounds i16, ptr %422, i64 %1135
  %1137 = load i16, ptr %1136, align 2, !tbaa !44
  %1138 = ashr i64 %1133, 32
  %1139 = getelementptr inbounds i16, ptr %422, i64 %1138
  store i16 %1137, ptr %1139, align 2, !tbaa !44
  br label %1140

1140:                                             ; preds = %1132, %949
  %1141 = phi i32 [ %1125, %1132 ], [ %677, %949 ]
  %1142 = icmp eq i32 %957, 0
  br i1 %1142, label %1147, label %1143

1143:                                             ; preds = %1140
  %1144 = load i32, ptr %687, align 4
  %1145 = and i32 %1144, 1073741824
  %1146 = icmp ne i32 %1145, 0
  br label %1147

1147:                                             ; preds = %1143, %1140
  %1148 = phi i1 [ false, %1140 ], [ %1146, %1143 ]
  %1149 = load i32, ptr %13, align 8, !tbaa !17
  %1150 = add nsw i32 %656, %1149
  %1151 = load i32, ptr %657, align 4, !tbaa !68
  %1152 = icmp sgt i32 %1151, %1150
  br i1 %1152, label %1168, label %1153

1153:                                             ; preds = %1147, %1153
  %1154 = phi i32 [ %1156, %1153 ], [ %1151, %1147 ]
  %1155 = ashr i32 %1154, 1
  %1156 = add nsw i32 %1155, %1154
  %1157 = icmp sgt i32 %1156, %1150
  br i1 %1157, label %1158, label %1153

1158:                                             ; preds = %1153
  %1159 = sext i32 %1156 to i64
  %1160 = icmp slt i32 %1156, 0
  %1161 = shl nsw i64 %1159, 1
  %1162 = select i1 %1160, i64 -1, i64 %1161
  %1163 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %1162) #9
  %1164 = load ptr, ptr %8, align 8, !tbaa !46
  %1165 = sext i32 %1149 to i64
  %1166 = shl nsw i64 %1165, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 2 %1163, ptr align 2 %1164, i64 %1166, i1 false)
  %1167 = icmp eq ptr %1164, null
  br i1 %1167, label %1172, label %1170

1168:                                             ; preds = %1147
  %1169 = load ptr, ptr %8, align 8, !tbaa !46
  br label %1174

1170:                                             ; preds = %1158
  tail call void @_ZdaPv(ptr noundef nonnull %1164) #10
  %1171 = load i32, ptr %13, align 8, !tbaa !17
  br label %1172

1172:                                             ; preds = %1170, %1158
  %1173 = phi i32 [ %1171, %1170 ], [ %1149, %1158 ]
  store ptr %1163, ptr %8, align 8, !tbaa !46
  store i32 %1156, ptr %657, align 4, !tbaa !68
  br label %1174

1174:                                             ; preds = %1168, %1172
  %1175 = phi i32 [ %1149, %1168 ], [ %1173, %1172 ]
  %1176 = phi ptr [ %1169, %1168 ], [ %1163, %1172 ]
  %1177 = ptrtoint ptr %1176 to i64
  %1178 = add nsw i32 %1175, 1
  %1179 = sext i32 %1178 to i64
  %1180 = getelementptr inbounds i16, ptr %1176, i64 %1179
  %1181 = icmp sgt i32 %1141, 0
  br i1 %1148, label %1182, label %1229

1182:                                             ; preds = %1174
  br i1 %1181, label %1183, label %1389

1183:                                             ; preds = %1182
  %1184 = zext i32 %1141 to i64
  %1185 = extractelement <2 x double> %703, i64 0
  %1186 = extractelement <2 x double> %703, i64 1
  br label %1187

1187:                                             ; preds = %1183, %1224
  %1188 = phi i64 [ 0, %1183 ], [ %1227, %1224 ]
  %1189 = phi ptr [ %468, %1183 ], [ %1226, %1224 ]
  %1190 = phi ptr [ %1180, %1183 ], [ %1225, %1224 ]
  %1191 = getelementptr inbounds i16, ptr %422, i64 %1188
  %1192 = load i16, ptr %1191, align 2, !tbaa !44
  %1193 = zext i16 %1192 to i64
  %1194 = getelementptr inbounds %struct.CompAtomExt, ptr %46, i64 %1193
  %1195 = load i32, ptr %1194, align 4
  %1196 = and i32 %1195, 1073741824
  %1197 = icmp eq i32 %1196, 0
  br i1 %1197, label %1198, label %1224

1198:                                             ; preds = %1187
  %1199 = getelementptr inbounds %struct.CompAtom, ptr %42, i64 %1193
  %1200 = getelementptr inbounds %class.Vector, ptr %1199, i64 0, i32 2
  %1201 = load double, ptr %1200, align 8, !tbaa !49
  %1202 = fsub double %706, %1201
  %1203 = getelementptr inbounds %class.Vector, ptr %1199, i64 0, i32 1
  %1204 = load double, ptr %1203, align 8, !tbaa !66
  %1205 = fsub double %1186, %1204
  %1206 = load double, ptr %1199, align 8, !tbaa !67
  %1207 = fsub double %1185, %1206
  %1208 = fmul double %1207, %1207
  %1209 = tail call double @llvm.fmuladd.f64(double %1205, double %1205, double %1208)
  %1210 = tail call double @llvm.fmuladd.f64(double %1202, double %1202, double %1209)
  %1211 = fcmp ugt double %1210, %20
  br i1 %1211, label %1224, label %1212

1212:                                             ; preds = %1198
  %1213 = shl i32 %1195, 2
  %1214 = ashr exact i32 %1213, 2
  %1215 = icmp slt i32 %1214, %713
  %1216 = icmp sgt i32 %1214, %715
  %1217 = select i1 %1215, i1 true, i1 %1216
  %1218 = select i1 %1217, ptr %1190, ptr %1189
  %1219 = zext i1 %1217 to i64
  %1220 = getelementptr inbounds i16, ptr %1190, i64 %1219
  %1221 = xor i1 %1217, true
  %1222 = zext i1 %1221 to i64
  %1223 = getelementptr inbounds i16, ptr %1189, i64 %1222
  store i16 %1192, ptr %1218, align 2, !tbaa !44
  br label %1224

1224:                                             ; preds = %1212, %1198, %1187
  %1225 = phi ptr [ %1190, %1187 ], [ %1190, %1198 ], [ %1220, %1212 ]
  %1226 = phi ptr [ %1189, %1187 ], [ %1189, %1198 ], [ %1223, %1212 ]
  %1227 = add nuw nsw i64 %1188, 1
  %1228 = icmp eq i64 %1227, %1184
  br i1 %1228, label %1389, label %1187

1229:                                             ; preds = %1174
  br i1 %1181, label %1230, label %1389

1230:                                             ; preds = %1229
  %1231 = icmp ugt i32 %1141, 6
  br i1 %1231, label %1232, label %1340

1232:                                             ; preds = %1230
  %1233 = add nsw i32 %1141, -2
  %1234 = load i16, ptr %422, align 2, !tbaa !44
  %1235 = zext i16 %1234 to i64
  %1236 = getelementptr inbounds %struct.CompAtomExt, ptr %46, i64 %1235
  %1237 = load i32, ptr %1236, align 4
  %1238 = load i16, ptr %658, align 2, !tbaa !44
  %1239 = zext i16 %1238 to i64
  %1240 = getelementptr inbounds %struct.CompAtom, ptr %42, i64 %1239
  %1241 = getelementptr inbounds %class.Vector, ptr %1240, i64 0, i32 2
  %1242 = load double, ptr %1241, align 8, !tbaa !49
  %1243 = getelementptr inbounds %struct.CompAtom, ptr %42, i64 %1235
  %1244 = getelementptr inbounds %class.Vector, ptr %1243, i64 0, i32 2
  %1245 = load double, ptr %1244, align 8, !tbaa !49
  %1246 = getelementptr inbounds %class.Vector, ptr %1240, i64 0, i32 1
  %1247 = load double, ptr %1246, align 8, !tbaa !66
  %1248 = getelementptr inbounds %class.Vector, ptr %1243, i64 0, i32 1
  %1249 = load double, ptr %1248, align 8, !tbaa !66
  %1250 = load double, ptr %1240, align 8, !tbaa !67
  %1251 = load double, ptr %1243, align 8, !tbaa !67
  %1252 = zext i32 %1233 to i64
  %1253 = extractelement <2 x double> %703, i64 0
  %1254 = extractelement <2 x double> %703, i64 1
  br label %1255

1255:                                             ; preds = %1232, %1333
  %1256 = phi i64 [ 2, %1232 ], [ %1336, %1333 ]
  %1257 = phi i64 [ %1239, %1232 ], [ %1293, %1333 ]
  %1258 = phi i32 [ %1237, %1232 ], [ %1321, %1333 ]
  %1259 = phi ptr [ %468, %1232 ], [ %1335, %1333 ]
  %1260 = phi ptr [ %1180, %1232 ], [ %1334, %1333 ]
  %1261 = phi i16 [ %1234, %1232 ], [ %1286, %1333 ]
  %1262 = phi i16 [ %1238, %1232 ], [ %1289, %1333 ]
  %1263 = phi double [ %1251, %1232 ], [ %1292, %1333 ]
  %1264 = phi double [ %1250, %1232 ], [ %1295, %1333 ]
  %1265 = phi double [ %1249, %1232 ], [ %1297, %1333 ]
  %1266 = phi double [ %1247, %1232 ], [ %1299, %1333 ]
  %1267 = phi double [ %1245, %1232 ], [ %1301, %1333 ]
  %1268 = phi double [ %1242, %1232 ], [ %1303, %1333 ]
  %1269 = getelementptr inbounds %struct.CompAtomExt, ptr %46, i64 %1257
  %1270 = load i32, ptr %1269, align 4
  %1271 = shl i32 %1270, 2
  %1272 = ashr exact i32 %1271, 2
  %1273 = fsub double %1253, %1263
  %1274 = fsub double %1253, %1264
  %1275 = fmul double %1273, %1273
  %1276 = fmul double %1274, %1274
  %1277 = fsub double %1254, %1265
  %1278 = fsub double %1254, %1266
  %1279 = tail call double @llvm.fmuladd.f64(double %1277, double %1277, double %1275)
  %1280 = tail call double @llvm.fmuladd.f64(double %1278, double %1278, double %1276)
  %1281 = fsub double %706, %1267
  %1282 = fsub double %706, %1268
  %1283 = tail call double @llvm.fmuladd.f64(double %1281, double %1281, double %1279)
  %1284 = tail call double @llvm.fmuladd.f64(double %1282, double %1282, double %1280)
  %1285 = getelementptr inbounds i16, ptr %422, i64 %1256
  %1286 = load i16, ptr %1285, align 2, !tbaa !44
  %1287 = or i64 %1256, 1
  %1288 = getelementptr inbounds i16, ptr %422, i64 %1287
  %1289 = load i16, ptr %1288, align 2, !tbaa !44
  %1290 = zext i16 %1286 to i64
  %1291 = getelementptr inbounds %struct.CompAtom, ptr %42, i64 %1290
  %1292 = load double, ptr %1291, align 8, !tbaa !67
  %1293 = zext i16 %1289 to i64
  %1294 = getelementptr inbounds %struct.CompAtom, ptr %42, i64 %1293
  %1295 = load double, ptr %1294, align 8, !tbaa !67
  %1296 = getelementptr inbounds %class.Vector, ptr %1291, i64 0, i32 1
  %1297 = load double, ptr %1296, align 8, !tbaa !66
  %1298 = getelementptr inbounds %class.Vector, ptr %1294, i64 0, i32 1
  %1299 = load double, ptr %1298, align 8, !tbaa !66
  %1300 = getelementptr inbounds %class.Vector, ptr %1291, i64 0, i32 2
  %1301 = load double, ptr %1300, align 8, !tbaa !49
  %1302 = getelementptr inbounds %class.Vector, ptr %1294, i64 0, i32 2
  %1303 = load double, ptr %1302, align 8, !tbaa !49
  %1304 = fcmp ugt double %1283, %20
  br i1 %1304, label %1317, label %1305

1305:                                             ; preds = %1255
  %1306 = shl i32 %1258, 2
  %1307 = ashr exact i32 %1306, 2
  %1308 = icmp slt i32 %1307, %713
  %1309 = icmp sgt i32 %1307, %715
  %1310 = select i1 %1308, i1 true, i1 %1309
  %1311 = select i1 %1310, ptr %1260, ptr %1259
  %1312 = zext i1 %1310 to i64
  %1313 = getelementptr inbounds i16, ptr %1260, i64 %1312
  %1314 = xor i1 %1310, true
  %1315 = zext i1 %1314 to i64
  %1316 = getelementptr inbounds i16, ptr %1259, i64 %1315
  store i16 %1261, ptr %1311, align 2, !tbaa !44
  br label %1317

1317:                                             ; preds = %1305, %1255
  %1318 = phi ptr [ %1260, %1255 ], [ %1313, %1305 ]
  %1319 = phi ptr [ %1259, %1255 ], [ %1316, %1305 ]
  %1320 = getelementptr inbounds %struct.CompAtomExt, ptr %46, i64 %1290
  %1321 = load i32, ptr %1320, align 4
  %1322 = fcmp ugt double %1284, %20
  br i1 %1322, label %1333, label %1323

1323:                                             ; preds = %1317
  %1324 = icmp slt i32 %1272, %713
  %1325 = icmp sgt i32 %1272, %715
  %1326 = select i1 %1324, i1 true, i1 %1325
  %1327 = select i1 %1326, ptr %1318, ptr %1319
  %1328 = zext i1 %1326 to i64
  %1329 = getelementptr inbounds i16, ptr %1318, i64 %1328
  %1330 = xor i1 %1326, true
  %1331 = zext i1 %1330 to i64
  %1332 = getelementptr inbounds i16, ptr %1319, i64 %1331
  store i16 %1262, ptr %1327, align 2, !tbaa !44
  br label %1333

1333:                                             ; preds = %1323, %1317
  %1334 = phi ptr [ %1318, %1317 ], [ %1329, %1323 ]
  %1335 = phi ptr [ %1319, %1317 ], [ %1332, %1323 ]
  %1336 = add nuw nsw i64 %1256, 2
  %1337 = icmp ult i64 %1336, %1252
  br i1 %1337, label %1255, label %1338

1338:                                             ; preds = %1333
  %1339 = trunc i64 %1256 to i32
  br label %1340

1340:                                             ; preds = %1338, %1230
  %1341 = phi i32 [ %1339, %1338 ], [ 0, %1230 ]
  %1342 = phi ptr [ %1334, %1338 ], [ %1180, %1230 ]
  %1343 = phi ptr [ %1335, %1338 ], [ %468, %1230 ]
  %1344 = icmp slt i32 %1341, %1141
  br i1 %1344, label %1345, label %1389

1345:                                             ; preds = %1340
  %1346 = zext i32 %1341 to i64
  %1347 = zext i32 %1141 to i64
  %1348 = extractelement <2 x double> %703, i64 0
  %1349 = extractelement <2 x double> %703, i64 1
  br label %1350

1350:                                             ; preds = %1345, %1384
  %1351 = phi i64 [ %1346, %1345 ], [ %1387, %1384 ]
  %1352 = phi ptr [ %1343, %1345 ], [ %1386, %1384 ]
  %1353 = phi ptr [ %1342, %1345 ], [ %1385, %1384 ]
  %1354 = getelementptr inbounds i16, ptr %422, i64 %1351
  %1355 = load i16, ptr %1354, align 2, !tbaa !44
  %1356 = zext i16 %1355 to i64
  %1357 = getelementptr inbounds %struct.CompAtom, ptr %42, i64 %1356
  %1358 = load double, ptr %1357, align 8, !tbaa !67
  %1359 = getelementptr inbounds %class.Vector, ptr %1357, i64 0, i32 1
  %1360 = load double, ptr %1359, align 8, !tbaa !66
  %1361 = getelementptr inbounds %class.Vector, ptr %1357, i64 0, i32 2
  %1362 = load double, ptr %1361, align 8, !tbaa !49
  %1363 = fsub double %1348, %1358
  %1364 = fmul double %1363, %1363
  %1365 = fsub double %1349, %1360
  %1366 = tail call double @llvm.fmuladd.f64(double %1365, double %1365, double %1364)
  %1367 = fsub double %706, %1362
  %1368 = tail call double @llvm.fmuladd.f64(double %1367, double %1367, double %1366)
  %1369 = fcmp ugt double %1368, %20
  br i1 %1369, label %1384, label %1370

1370:                                             ; preds = %1350
  %1371 = getelementptr inbounds %struct.CompAtomExt, ptr %46, i64 %1356
  %1372 = load i32, ptr %1371, align 4
  %1373 = shl i32 %1372, 2
  %1374 = ashr exact i32 %1373, 2
  %1375 = icmp slt i32 %1374, %713
  %1376 = icmp sgt i32 %1374, %715
  %1377 = select i1 %1375, i1 true, i1 %1376
  %1378 = select i1 %1377, ptr %1353, ptr %1352
  %1379 = zext i1 %1377 to i64
  %1380 = getelementptr inbounds i16, ptr %1353, i64 %1379
  %1381 = xor i1 %1377, true
  %1382 = zext i1 %1381 to i64
  %1383 = getelementptr inbounds i16, ptr %1352, i64 %1382
  store i16 %1355, ptr %1378, align 2, !tbaa !44
  br label %1384

1384:                                             ; preds = %1370, %1350
  %1385 = phi ptr [ %1353, %1350 ], [ %1380, %1370 ]
  %1386 = phi ptr [ %1352, %1350 ], [ %1383, %1370 ]
  %1387 = add nuw nsw i64 %1351, 1
  %1388 = icmp eq i64 %1387, %1347
  br i1 %1388, label %1389, label %1350

1389:                                             ; preds = %1384, %1224, %1340, %1182, %1229
  %1390 = phi ptr [ %1180, %1229 ], [ %1180, %1182 ], [ %1342, %1340 ], [ %1225, %1224 ], [ %1385, %1384 ]
  %1391 = phi ptr [ %468, %1229 ], [ %468, %1182 ], [ %1343, %1340 ], [ %1226, %1224 ], [ %1386, %1384 ]
  %1392 = icmp eq ptr %1390, %1180
  %1393 = icmp eq ptr %1391, %468
  %1394 = select i1 %1392, i1 %1393, i1 false
  br i1 %1394, label %1395, label %1397

1395:                                             ; preds = %1389
  %1396 = add nsw i32 %673, 1
  br label %2270

1397:                                             ; preds = %1389
  %1398 = trunc i32 %673 to i16
  %1399 = load i32, ptr %13, align 8, !tbaa !17
  %1400 = add nsw i32 %1399, -1
  %1401 = sext i32 %1400 to i64
  %1402 = getelementptr inbounds i16, ptr %1176, i64 %1401
  store i16 %1398, ptr %1402, align 2, !tbaa !44
  %1403 = ptrtoint ptr %1391 to i64
  %1404 = sub i64 %1403, %659
  %1405 = lshr exact i64 %1404, 1
  %1406 = trunc i64 %1405 to i32
  %1407 = icmp sgt i32 %1406, 0
  br i1 %1407, label %1408, label %1508

1408:                                             ; preds = %1397
  %1409 = and i64 %1405, 4294967295
  %1410 = and i64 %1405, 1
  %1411 = icmp eq i64 %1409, 1
  br i1 %1411, label %1476, label %1412

1412:                                             ; preds = %1408
  %1413 = sub nsw i64 %1409, %1410
  br label %1414

1414:                                             ; preds = %1469, %1412
  %1415 = phi i64 [ 0, %1412 ], [ %1473, %1469 ]
  %1416 = phi ptr [ %1390, %1412 ], [ %1472, %1469 ]
  %1417 = phi ptr [ %330, %1412 ], [ %1471, %1469 ]
  %1418 = phi ptr [ %376, %1412 ], [ %1470, %1469 ]
  %1419 = phi i64 [ 0, %1412 ], [ %1474, %1469 ]
  %1420 = getelementptr inbounds i16, ptr %468, i64 %1415
  %1421 = load i16, ptr %1420, align 2, !tbaa !44
  %1422 = zext i16 %1421 to i64
  %1423 = getelementptr inbounds %struct.CompAtomExt, ptr %46, i64 %1422
  %1424 = load i32, ptr %1423, align 4
  %1425 = shl i32 %1424, 2
  %1426 = ashr exact i32 %1425, 2
  %1427 = sext i32 %1426 to i64
  %1428 = getelementptr inbounds i8, ptr %950, i64 %1427
  %1429 = load i8, ptr %1428, align 1, !tbaa !57
  %1430 = sext i8 %1429 to i32
  switch i32 %1430, label %1442 [
    i32 0, label %1431
    i32 1, label %1433
    i32 2, label %1435
  ]

1431:                                             ; preds = %1414
  %1432 = getelementptr inbounds i16, ptr %1416, i64 1
  br label %1437

1433:                                             ; preds = %1414
  %1434 = getelementptr inbounds i16, ptr %1417, i64 1
  br label %1437

1435:                                             ; preds = %1414
  %1436 = getelementptr inbounds i16, ptr %1418, i64 1
  br label %1437

1437:                                             ; preds = %1431, %1433, %1435
  %1438 = phi ptr [ %1418, %1435 ], [ %1417, %1433 ], [ %1416, %1431 ]
  %1439 = phi ptr [ %1436, %1435 ], [ %1418, %1433 ], [ %1418, %1431 ]
  %1440 = phi ptr [ %1417, %1435 ], [ %1434, %1433 ], [ %1417, %1431 ]
  %1441 = phi ptr [ %1416, %1435 ], [ %1416, %1433 ], [ %1432, %1431 ]
  store i16 %1421, ptr %1438, align 2, !tbaa !44
  br label %1442

1442:                                             ; preds = %1437, %1414
  %1443 = phi ptr [ %1418, %1414 ], [ %1439, %1437 ]
  %1444 = phi ptr [ %1417, %1414 ], [ %1440, %1437 ]
  %1445 = phi ptr [ %1416, %1414 ], [ %1441, %1437 ]
  %1446 = or i64 %1415, 1
  %1447 = getelementptr inbounds i16, ptr %468, i64 %1446
  %1448 = load i16, ptr %1447, align 2, !tbaa !44
  %1449 = zext i16 %1448 to i64
  %1450 = getelementptr inbounds %struct.CompAtomExt, ptr %46, i64 %1449
  %1451 = load i32, ptr %1450, align 4
  %1452 = shl i32 %1451, 2
  %1453 = ashr exact i32 %1452, 2
  %1454 = sext i32 %1453 to i64
  %1455 = getelementptr inbounds i8, ptr %950, i64 %1454
  %1456 = load i8, ptr %1455, align 1, !tbaa !57
  %1457 = sext i8 %1456 to i32
  switch i32 %1457, label %1469 [
    i32 0, label %1462
    i32 1, label %1460
    i32 2, label %1458
  ]

1458:                                             ; preds = %1442
  %1459 = getelementptr inbounds i16, ptr %1443, i64 1
  br label %1464

1460:                                             ; preds = %1442
  %1461 = getelementptr inbounds i16, ptr %1444, i64 1
  br label %1464

1462:                                             ; preds = %1442
  %1463 = getelementptr inbounds i16, ptr %1445, i64 1
  br label %1464

1464:                                             ; preds = %1462, %1460, %1458
  %1465 = phi ptr [ %1443, %1458 ], [ %1444, %1460 ], [ %1445, %1462 ]
  %1466 = phi ptr [ %1459, %1458 ], [ %1443, %1460 ], [ %1443, %1462 ]
  %1467 = phi ptr [ %1444, %1458 ], [ %1461, %1460 ], [ %1444, %1462 ]
  %1468 = phi ptr [ %1445, %1458 ], [ %1445, %1460 ], [ %1463, %1462 ]
  store i16 %1448, ptr %1465, align 2, !tbaa !44
  br label %1469

1469:                                             ; preds = %1464, %1442
  %1470 = phi ptr [ %1443, %1442 ], [ %1466, %1464 ]
  %1471 = phi ptr [ %1444, %1442 ], [ %1467, %1464 ]
  %1472 = phi ptr [ %1445, %1442 ], [ %1468, %1464 ]
  %1473 = add nuw nsw i64 %1415, 2
  %1474 = add i64 %1419, 2
  %1475 = icmp eq i64 %1474, %1413
  br i1 %1475, label %1476, label %1414

1476:                                             ; preds = %1469, %1408
  %1477 = phi ptr [ undef, %1408 ], [ %1470, %1469 ]
  %1478 = phi ptr [ undef, %1408 ], [ %1471, %1469 ]
  %1479 = phi ptr [ undef, %1408 ], [ %1472, %1469 ]
  %1480 = phi i64 [ 0, %1408 ], [ %1473, %1469 ]
  %1481 = phi ptr [ %1390, %1408 ], [ %1472, %1469 ]
  %1482 = phi ptr [ %330, %1408 ], [ %1471, %1469 ]
  %1483 = phi ptr [ %376, %1408 ], [ %1470, %1469 ]
  %1484 = icmp eq i64 %1410, 0
  br i1 %1484, label %1508, label %1485

1485:                                             ; preds = %1476
  %1486 = getelementptr inbounds i16, ptr %468, i64 %1480
  %1487 = load i16, ptr %1486, align 2, !tbaa !44
  %1488 = zext i16 %1487 to i64
  %1489 = getelementptr inbounds %struct.CompAtomExt, ptr %46, i64 %1488
  %1490 = load i32, ptr %1489, align 4
  %1491 = shl i32 %1490, 2
  %1492 = ashr exact i32 %1491, 2
  %1493 = sext i32 %1492 to i64
  %1494 = getelementptr inbounds i8, ptr %950, i64 %1493
  %1495 = load i8, ptr %1494, align 1, !tbaa !57
  %1496 = sext i8 %1495 to i32
  switch i32 %1496, label %1508 [
    i32 0, label %1501
    i32 1, label %1499
    i32 2, label %1497
  ]

1497:                                             ; preds = %1485
  %1498 = getelementptr inbounds i16, ptr %1483, i64 1
  br label %1503

1499:                                             ; preds = %1485
  %1500 = getelementptr inbounds i16, ptr %1482, i64 1
  br label %1503

1501:                                             ; preds = %1485
  %1502 = getelementptr inbounds i16, ptr %1481, i64 1
  br label %1503

1503:                                             ; preds = %1501, %1499, %1497
  %1504 = phi ptr [ %1483, %1497 ], [ %1482, %1499 ], [ %1481, %1501 ]
  %1505 = phi ptr [ %1498, %1497 ], [ %1483, %1499 ], [ %1483, %1501 ]
  %1506 = phi ptr [ %1482, %1497 ], [ %1500, %1499 ], [ %1482, %1501 ]
  %1507 = phi ptr [ %1481, %1497 ], [ %1481, %1499 ], [ %1502, %1501 ]
  store i16 %1487, ptr %1504, align 2, !tbaa !44
  br label %1508

1508:                                             ; preds = %1476, %1503, %1485, %1397
  %1509 = phi ptr [ %376, %1397 ], [ %1477, %1476 ], [ %1483, %1485 ], [ %1505, %1503 ]
  %1510 = phi ptr [ %330, %1397 ], [ %1478, %1476 ], [ %1482, %1485 ], [ %1506, %1503 ]
  %1511 = phi ptr [ %1390, %1397 ], [ %1479, %1476 ], [ %1481, %1485 ], [ %1507, %1503 ]
  %1512 = ptrtoint ptr %1511 to i64
  %1513 = ptrtoint ptr %1180 to i64
  %1514 = sub i64 %1512, %1513
  %1515 = lshr exact i64 %1514, 1
  %1516 = trunc i64 %1515 to i32
  %1517 = icmp eq i32 %1516, 0
  %1518 = shl i64 %1514, 31
  br i1 %1517, label %1524, label %1519

1519:                                             ; preds = %1508
  %1520 = add i64 %1518, -4294967296
  %1521 = ashr i64 %1520, 32
  %1522 = getelementptr inbounds i16, ptr %1180, i64 %1521
  %1523 = load i16, ptr %1522, align 2, !tbaa !44
  br label %1524

1524:                                             ; preds = %1508, %1519
  %1525 = phi i16 [ %1523, %1519 ], [ -1, %1508 ]
  %1526 = ashr i64 %1518, 32
  %1527 = getelementptr inbounds i16, ptr %1180, i64 %1526
  store i16 %1525, ptr %1527, align 2, !tbaa !44
  %1528 = trunc i64 %1515 to i16
  %1529 = add i16 %1528, 1
  %1530 = sext i32 %1399 to i64
  %1531 = getelementptr inbounds i16, ptr %1176, i64 %1530
  store i16 %1529, ptr %1531, align 2, !tbaa !44
  %1532 = add i32 %1399, 2
  %1533 = add i32 %1532, %1516
  %1534 = ptrtoint ptr %1510 to i64
  %1535 = sub i64 %1534, %660
  %1536 = lshr exact i64 %1535, 1
  %1537 = trunc i64 %1536 to i32
  %1538 = add nsw i32 %1533, 1
  %1539 = sext i32 %1538 to i64
  %1540 = getelementptr i16, ptr %1176, i64 %1539
  %1541 = icmp sgt i32 %1537, 0
  br i1 %1541, label %1542, label %1632

1542:                                             ; preds = %1524
  %1543 = and i64 %1536, 4294967295
  %1544 = icmp ult i64 %1543, 8
  br i1 %1544, label %1588, label %1545

1545:                                             ; preds = %1542
  %1546 = shl nsw i64 %1539, 1
  %1547 = add i64 %1546, %1177
  %1548 = sub i64 %1547, %660
  %1549 = icmp ult i64 %1548, 128
  br i1 %1549, label %1588, label %1550

1550:                                             ; preds = %1545
  %1551 = icmp ult i64 %1543, 64
  br i1 %1551, label %1575, label %1552

1552:                                             ; preds = %1550
  %1553 = and i64 %1536, 63
  %1554 = sub nsw i64 %1543, %1553
  br label %1555

1555:                                             ; preds = %1555, %1552
  %1556 = phi i64 [ 0, %1552 ], [ %1569, %1555 ]
  %1557 = getelementptr inbounds i16, ptr %330, i64 %1556
  %1558 = load <16 x i16>, ptr %1557, align 2, !tbaa !44
  %1559 = getelementptr inbounds i16, ptr %1557, i64 16
  %1560 = load <16 x i16>, ptr %1559, align 2, !tbaa !44
  %1561 = getelementptr inbounds i16, ptr %1557, i64 32
  %1562 = load <16 x i16>, ptr %1561, align 2, !tbaa !44
  %1563 = getelementptr inbounds i16, ptr %1557, i64 48
  %1564 = load <16 x i16>, ptr %1563, align 2, !tbaa !44
  %1565 = getelementptr inbounds i16, ptr %1540, i64 %1556
  store <16 x i16> %1558, ptr %1565, align 2, !tbaa !44
  %1566 = getelementptr inbounds i16, ptr %1565, i64 16
  store <16 x i16> %1560, ptr %1566, align 2, !tbaa !44
  %1567 = getelementptr inbounds i16, ptr %1565, i64 32
  store <16 x i16> %1562, ptr %1567, align 2, !tbaa !44
  %1568 = getelementptr inbounds i16, ptr %1565, i64 48
  store <16 x i16> %1564, ptr %1568, align 2, !tbaa !44
  %1569 = add nuw i64 %1556, 64
  %1570 = icmp eq i64 %1569, %1554
  br i1 %1570, label %1571, label %1555, !llvm.loop !104

1571:                                             ; preds = %1555
  %1572 = icmp eq i64 %1553, 0
  br i1 %1572, label %1626, label %1573

1573:                                             ; preds = %1571
  %1574 = icmp ult i64 %1553, 8
  br i1 %1574, label %1588, label %1575

1575:                                             ; preds = %1550, %1573
  %1576 = phi i64 [ %1554, %1573 ], [ 0, %1550 ]
  %1577 = and i64 %1536, 7
  %1578 = sub nsw i64 %1543, %1577
  br label %1579

1579:                                             ; preds = %1579, %1575
  %1580 = phi i64 [ %1576, %1575 ], [ %1584, %1579 ]
  %1581 = getelementptr inbounds i16, ptr %330, i64 %1580
  %1582 = load <8 x i16>, ptr %1581, align 2, !tbaa !44
  %1583 = getelementptr inbounds i16, ptr %1540, i64 %1580
  store <8 x i16> %1582, ptr %1583, align 2, !tbaa !44
  %1584 = add nuw i64 %1580, 8
  %1585 = icmp eq i64 %1584, %1578
  br i1 %1585, label %1586, label %1579, !llvm.loop !105

1586:                                             ; preds = %1579
  %1587 = icmp eq i64 %1577, 0
  br i1 %1587, label %1626, label %1588

1588:                                             ; preds = %1545, %1542, %1573, %1586
  %1589 = phi i64 [ 0, %1542 ], [ 0, %1545 ], [ %1554, %1573 ], [ %1578, %1586 ]
  %1590 = sub i64 %1536, %1589
  %1591 = xor i64 %1589, -1
  %1592 = add nsw i64 %1543, %1591
  %1593 = and i64 %1590, 3
  %1594 = icmp eq i64 %1593, 0
  br i1 %1594, label %1604, label %1595

1595:                                             ; preds = %1588, %1595
  %1596 = phi i64 [ %1601, %1595 ], [ %1589, %1588 ]
  %1597 = phi i64 [ %1602, %1595 ], [ 0, %1588 ]
  %1598 = getelementptr inbounds i16, ptr %330, i64 %1596
  %1599 = load i16, ptr %1598, align 2, !tbaa !44
  %1600 = getelementptr inbounds i16, ptr %1540, i64 %1596
  store i16 %1599, ptr %1600, align 2, !tbaa !44
  %1601 = add nuw nsw i64 %1596, 1
  %1602 = add i64 %1597, 1
  %1603 = icmp eq i64 %1602, %1593
  br i1 %1603, label %1604, label %1595, !llvm.loop !106

1604:                                             ; preds = %1595, %1588
  %1605 = phi i64 [ %1589, %1588 ], [ %1601, %1595 ]
  %1606 = icmp ult i64 %1592, 3
  br i1 %1606, label %1626, label %1607

1607:                                             ; preds = %1604, %1607
  %1608 = phi i64 [ %1624, %1607 ], [ %1605, %1604 ]
  %1609 = getelementptr inbounds i16, ptr %330, i64 %1608
  %1610 = load i16, ptr %1609, align 2, !tbaa !44
  %1611 = getelementptr inbounds i16, ptr %1540, i64 %1608
  store i16 %1610, ptr %1611, align 2, !tbaa !44
  %1612 = add nuw nsw i64 %1608, 1
  %1613 = getelementptr inbounds i16, ptr %330, i64 %1612
  %1614 = load i16, ptr %1613, align 2, !tbaa !44
  %1615 = getelementptr inbounds i16, ptr %1540, i64 %1612
  store i16 %1614, ptr %1615, align 2, !tbaa !44
  %1616 = add nuw nsw i64 %1608, 2
  %1617 = getelementptr inbounds i16, ptr %330, i64 %1616
  %1618 = load i16, ptr %1617, align 2, !tbaa !44
  %1619 = getelementptr inbounds i16, ptr %1540, i64 %1616
  store i16 %1618, ptr %1619, align 2, !tbaa !44
  %1620 = add nuw nsw i64 %1608, 3
  %1621 = getelementptr inbounds i16, ptr %330, i64 %1620
  %1622 = load i16, ptr %1621, align 2, !tbaa !44
  %1623 = getelementptr inbounds i16, ptr %1540, i64 %1620
  store i16 %1622, ptr %1623, align 2, !tbaa !44
  %1624 = add nuw nsw i64 %1608, 4
  %1625 = icmp eq i64 %1624, %1543
  br i1 %1625, label %1626, label %1607, !llvm.loop !107

1626:                                             ; preds = %1604, %1607, %1571, %1586
  %1627 = shl i64 %1535, 31
  %1628 = add i64 %1627, -4294967296
  %1629 = ashr i64 %1628, 32
  %1630 = getelementptr inbounds i16, ptr %1540, i64 %1629
  %1631 = load i16, ptr %1630, align 2, !tbaa !44
  br label %1632

1632:                                             ; preds = %1524, %1626
  %1633 = phi i64 [ %1536, %1626 ], [ 0, %1524 ]
  %1634 = phi i16 [ %1631, %1626 ], [ -1, %1524 ]
  %1635 = and i64 %1633, 4294967295
  %1636 = getelementptr inbounds i16, ptr %1540, i64 %1635
  store i16 %1634, ptr %1636, align 2, !tbaa !44
  %1637 = trunc i64 %1536 to i16
  %1638 = add i16 %1637, 1
  %1639 = sext i32 %1533 to i64
  %1640 = getelementptr inbounds i16, ptr %1176, i64 %1639
  store i16 %1638, ptr %1640, align 2, !tbaa !44
  %1641 = add nsw i32 %1537, 2
  %1642 = add nsw i32 %1641, %1533
  %1643 = ptrtoint ptr %1509 to i64
  %1644 = sub i64 %1643, %661
  %1645 = lshr exact i64 %1644, 1
  %1646 = trunc i64 %1645 to i32
  %1647 = add nsw i32 %1642, 1
  %1648 = sext i32 %1647 to i64
  %1649 = getelementptr i16, ptr %1176, i64 %1648
  %1650 = icmp sgt i32 %1646, 0
  br i1 %1650, label %1651, label %1741

1651:                                             ; preds = %1632
  %1652 = and i64 %1645, 4294967295
  %1653 = icmp ult i64 %1652, 8
  br i1 %1653, label %1697, label %1654

1654:                                             ; preds = %1651
  %1655 = shl nsw i64 %1648, 1
  %1656 = add i64 %1655, %1177
  %1657 = sub i64 %1656, %661
  %1658 = icmp ult i64 %1657, 128
  br i1 %1658, label %1697, label %1659

1659:                                             ; preds = %1654
  %1660 = icmp ult i64 %1652, 64
  br i1 %1660, label %1684, label %1661

1661:                                             ; preds = %1659
  %1662 = and i64 %1645, 63
  %1663 = sub nsw i64 %1652, %1662
  br label %1664

1664:                                             ; preds = %1664, %1661
  %1665 = phi i64 [ 0, %1661 ], [ %1678, %1664 ]
  %1666 = getelementptr inbounds i16, ptr %376, i64 %1665
  %1667 = load <16 x i16>, ptr %1666, align 2, !tbaa !44
  %1668 = getelementptr inbounds i16, ptr %1666, i64 16
  %1669 = load <16 x i16>, ptr %1668, align 2, !tbaa !44
  %1670 = getelementptr inbounds i16, ptr %1666, i64 32
  %1671 = load <16 x i16>, ptr %1670, align 2, !tbaa !44
  %1672 = getelementptr inbounds i16, ptr %1666, i64 48
  %1673 = load <16 x i16>, ptr %1672, align 2, !tbaa !44
  %1674 = getelementptr inbounds i16, ptr %1649, i64 %1665
  store <16 x i16> %1667, ptr %1674, align 2, !tbaa !44
  %1675 = getelementptr inbounds i16, ptr %1674, i64 16
  store <16 x i16> %1669, ptr %1675, align 2, !tbaa !44
  %1676 = getelementptr inbounds i16, ptr %1674, i64 32
  store <16 x i16> %1671, ptr %1676, align 2, !tbaa !44
  %1677 = getelementptr inbounds i16, ptr %1674, i64 48
  store <16 x i16> %1673, ptr %1677, align 2, !tbaa !44
  %1678 = add nuw i64 %1665, 64
  %1679 = icmp eq i64 %1678, %1663
  br i1 %1679, label %1680, label %1664, !llvm.loop !108

1680:                                             ; preds = %1664
  %1681 = icmp eq i64 %1662, 0
  br i1 %1681, label %1735, label %1682

1682:                                             ; preds = %1680
  %1683 = icmp ult i64 %1662, 8
  br i1 %1683, label %1697, label %1684

1684:                                             ; preds = %1659, %1682
  %1685 = phi i64 [ %1663, %1682 ], [ 0, %1659 ]
  %1686 = and i64 %1645, 7
  %1687 = sub nsw i64 %1652, %1686
  br label %1688

1688:                                             ; preds = %1688, %1684
  %1689 = phi i64 [ %1685, %1684 ], [ %1693, %1688 ]
  %1690 = getelementptr inbounds i16, ptr %376, i64 %1689
  %1691 = load <8 x i16>, ptr %1690, align 2, !tbaa !44
  %1692 = getelementptr inbounds i16, ptr %1649, i64 %1689
  store <8 x i16> %1691, ptr %1692, align 2, !tbaa !44
  %1693 = add nuw i64 %1689, 8
  %1694 = icmp eq i64 %1693, %1687
  br i1 %1694, label %1695, label %1688, !llvm.loop !109

1695:                                             ; preds = %1688
  %1696 = icmp eq i64 %1686, 0
  br i1 %1696, label %1735, label %1697

1697:                                             ; preds = %1654, %1651, %1682, %1695
  %1698 = phi i64 [ 0, %1651 ], [ 0, %1654 ], [ %1663, %1682 ], [ %1687, %1695 ]
  %1699 = sub i64 %1645, %1698
  %1700 = xor i64 %1698, -1
  %1701 = add nsw i64 %1652, %1700
  %1702 = and i64 %1699, 3
  %1703 = icmp eq i64 %1702, 0
  br i1 %1703, label %1713, label %1704

1704:                                             ; preds = %1697, %1704
  %1705 = phi i64 [ %1710, %1704 ], [ %1698, %1697 ]
  %1706 = phi i64 [ %1711, %1704 ], [ 0, %1697 ]
  %1707 = getelementptr inbounds i16, ptr %376, i64 %1705
  %1708 = load i16, ptr %1707, align 2, !tbaa !44
  %1709 = getelementptr inbounds i16, ptr %1649, i64 %1705
  store i16 %1708, ptr %1709, align 2, !tbaa !44
  %1710 = add nuw nsw i64 %1705, 1
  %1711 = add i64 %1706, 1
  %1712 = icmp eq i64 %1711, %1702
  br i1 %1712, label %1713, label %1704, !llvm.loop !110

1713:                                             ; preds = %1704, %1697
  %1714 = phi i64 [ %1698, %1697 ], [ %1710, %1704 ]
  %1715 = icmp ult i64 %1701, 3
  br i1 %1715, label %1735, label %1716

1716:                                             ; preds = %1713, %1716
  %1717 = phi i64 [ %1733, %1716 ], [ %1714, %1713 ]
  %1718 = getelementptr inbounds i16, ptr %376, i64 %1717
  %1719 = load i16, ptr %1718, align 2, !tbaa !44
  %1720 = getelementptr inbounds i16, ptr %1649, i64 %1717
  store i16 %1719, ptr %1720, align 2, !tbaa !44
  %1721 = add nuw nsw i64 %1717, 1
  %1722 = getelementptr inbounds i16, ptr %376, i64 %1721
  %1723 = load i16, ptr %1722, align 2, !tbaa !44
  %1724 = getelementptr inbounds i16, ptr %1649, i64 %1721
  store i16 %1723, ptr %1724, align 2, !tbaa !44
  %1725 = add nuw nsw i64 %1717, 2
  %1726 = getelementptr inbounds i16, ptr %376, i64 %1725
  %1727 = load i16, ptr %1726, align 2, !tbaa !44
  %1728 = getelementptr inbounds i16, ptr %1649, i64 %1725
  store i16 %1727, ptr %1728, align 2, !tbaa !44
  %1729 = add nuw nsw i64 %1717, 3
  %1730 = getelementptr inbounds i16, ptr %376, i64 %1729
  %1731 = load i16, ptr %1730, align 2, !tbaa !44
  %1732 = getelementptr inbounds i16, ptr %1649, i64 %1729
  store i16 %1731, ptr %1732, align 2, !tbaa !44
  %1733 = add nuw nsw i64 %1717, 4
  %1734 = icmp eq i64 %1733, %1652
  br i1 %1734, label %1735, label %1716, !llvm.loop !111

1735:                                             ; preds = %1713, %1716, %1680, %1695
  %1736 = shl i64 %1644, 31
  %1737 = add i64 %1736, -4294967296
  %1738 = ashr i64 %1737, 32
  %1739 = getelementptr inbounds i16, ptr %1649, i64 %1738
  %1740 = load i16, ptr %1739, align 2, !tbaa !44
  br label %1741

1741:                                             ; preds = %1632, %1735
  %1742 = phi i64 [ %1645, %1735 ], [ 0, %1632 ]
  %1743 = phi i16 [ %1740, %1735 ], [ -1, %1632 ]
  %1744 = and i64 %1742, 4294967295
  %1745 = getelementptr inbounds i16, ptr %1649, i64 %1744
  store i16 %1743, ptr %1745, align 2, !tbaa !44
  %1746 = trunc i64 %1645 to i16
  %1747 = add i16 %1746, 1
  %1748 = sext i32 %1642 to i64
  %1749 = getelementptr inbounds i16, ptr %1176, i64 %1748
  store i16 %1747, ptr %1749, align 2, !tbaa !44
  %1750 = add i32 %1646, 3
  %1751 = add i32 %1750, %1642
  %1752 = select i1 %143, i32 1, i32 %1751
  store i32 %1752, ptr %13, align 8, !tbaa !17
  br label %1788

1753:                                             ; preds = %671
  %1754 = load <2 x double>, ptr %686, align 8, !tbaa !19
  %1755 = fadd <2 x double> %15, %1754
  %1756 = getelementptr inbounds %class.Vector, ptr %686, i64 0, i32 2
  %1757 = load double, ptr %1756, align 8, !tbaa !49
  %1758 = fadd double %17, %1757
  %1759 = load ptr, ptr %8, align 8, !tbaa !46
  %1760 = load i32, ptr %13, align 8, !tbaa !17
  %1761 = add i32 %1760, 1
  %1762 = sext i32 %1761 to i64
  %1763 = getelementptr inbounds i16, ptr %1759, i64 %1762
  %1764 = sext i32 %1760 to i64
  %1765 = getelementptr inbounds i16, ptr %1759, i64 %1764
  %1766 = load i16, ptr %1765, align 2, !tbaa !44
  %1767 = zext i16 %1766 to i32
  %1768 = add i32 %1761, %1767
  %1769 = add nsw i32 %1767, -1
  %1770 = add i32 %1768, 1
  %1771 = sext i32 %1770 to i64
  %1772 = getelementptr inbounds i16, ptr %1759, i64 %1771
  %1773 = sext i32 %1768 to i64
  %1774 = getelementptr inbounds i16, ptr %1759, i64 %1773
  %1775 = load i16, ptr %1774, align 2, !tbaa !44
  %1776 = zext i16 %1775 to i32
  %1777 = add i32 %1770, %1776
  %1778 = add nsw i32 %1776, -1
  %1779 = add i32 %1777, 1
  %1780 = sext i32 %1779 to i64
  %1781 = getelementptr inbounds i16, ptr %1759, i64 %1780
  %1782 = sext i32 %1777 to i64
  %1783 = getelementptr inbounds i16, ptr %1759, i64 %1782
  %1784 = load i16, ptr %1783, align 2, !tbaa !44
  %1785 = zext i16 %1784 to i32
  %1786 = add i32 %1779, %1785
  store i32 %1786, ptr %13, align 8, !tbaa !17
  %1787 = add nsw i32 %1785, -1
  br label %1788

1788:                                             ; preds = %1741, %1753
  %1789 = phi double [ %1758, %1753 ], [ %706, %1741 ]
  %1790 = phi i32 [ %678, %1753 ], [ %701, %1741 ]
  %1791 = phi ptr [ %1763, %1753 ], [ %1180, %1741 ]
  %1792 = phi i32 [ %1769, %1753 ], [ %1516, %1741 ]
  %1793 = phi ptr [ %1772, %1753 ], [ %1540, %1741 ]
  %1794 = phi i32 [ %1778, %1753 ], [ %1537, %1741 ]
  %1795 = phi ptr [ %1781, %1753 ], [ %1649, %1741 ]
  %1796 = phi i32 [ %1787, %1753 ], [ %1646, %1741 ]
  %1797 = phi i32 [ %677, %1753 ], [ %1141, %1741 ]
  %1798 = phi ptr [ %676, %1753 ], [ %951, %1741 ]
  %1799 = phi ptr [ %675, %1753 ], [ %952, %1741 ]
  %1800 = phi ptr [ %674, %1753 ], [ %953, %1741 ]
  %1801 = phi <2 x double> [ %1755, %1753 ], [ %703, %1741 ]
  %1802 = getelementptr inbounds %struct.CompAtom, ptr %40, i64 %685, i32 1
  %1803 = load float, ptr %1802, align 8, !tbaa !79
  %1804 = fpext float %1803 to double
  %1805 = fmul double %1804, 0x4074C104816F0069
  %1806 = fmul double %29, %1805
  %1807 = fmul double %24, %1806
  %1808 = getelementptr inbounds %struct.CompAtom, ptr %40, i64 %685, i32 2
  %1809 = load i16, ptr %1808, align 4, !tbaa !80
  %1810 = sext i16 %1809 to i32
  %1811 = load ptr, ptr %662, align 8, !tbaa !81
  %1812 = load i32, ptr %663, align 8, !tbaa !83
  %1813 = shl nsw i32 %1810, 1
  %1814 = mul i32 %1813, %1812
  %1815 = zext i32 %1814 to i64
  %1816 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %1811, i64 %1815
  %1817 = load double, ptr @_ZN20ComputeNonbondedUtil7cutoff2E, align 8, !tbaa !19
  %1818 = extractelement <2 x double> %1801, i64 0
  %1819 = extractelement <2 x double> %1801, i64 1
  %1820 = tail call noundef i32 @_Z22pairlist_from_pairlistddddPK8CompAtomPKtiPtdPd(double noundef %1817, double noundef %1818, double noundef %1819, double noundef %1789, ptr noundef %42, ptr noundef nonnull %1791, i32 noundef %1792, ptr noundef %95, double noundef %32, ptr noundef %141)
  %1821 = icmp sgt i32 %1820, 0
  br i1 %1821, label %1822, label %1966

1822:                                             ; preds = %1788
  %1823 = load ptr, ptr @_ZN20ComputeNonbondedUtil8r2_tableE, align 8, !tbaa !23
  %1824 = zext i32 %1820 to i64
  br label %1825

1825:                                             ; preds = %1822, %1825
  %1826 = phi i64 [ 0, %1822 ], [ %1964, %1825 ]
  %1827 = phi double [ 0.000000e+00, %1822 ], [ %1929, %1825 ]
  %1828 = phi double [ 0.000000e+00, %1822 ], [ %1960, %1825 ]
  %1829 = phi <2 x double> [ %679, %1822 ], [ %1921, %1825 ]
  %1830 = phi <2 x double> [ %680, %1822 ], [ %1914, %1825 ]
  %1831 = phi <2 x double> [ %681, %1822 ], [ %1953, %1825 ]
  %1832 = phi <2 x double> [ %682, %1822 ], [ %1947, %1825 ]
  %1833 = phi <2 x double> [ %683, %1822 ], [ %1927, %1825 ]
  %1834 = phi <2 x double> [ %684, %1822 ], [ %1958, %1825 ]
  %1835 = phi <2 x double> [ zeroinitializer, %1822 ], [ %1923, %1825 ]
  %1836 = phi <2 x double> [ zeroinitializer, %1822 ], [ %1955, %1825 ]
  %1837 = shl nuw nsw i64 %1826, 1
  %1838 = getelementptr inbounds i32, ptr %142, i64 %1837
  %1839 = load i32, ptr %1838, align 4, !tbaa !5
  %1840 = ashr i32 %1839, 14
  %1841 = add nsw i32 %1840, %35
  %1842 = getelementptr inbounds i16, ptr %95, i64 %1826
  %1843 = load i16, ptr %1842, align 2, !tbaa !44
  %1844 = zext i16 %1843 to i64
  %1845 = getelementptr inbounds %struct.CompAtom, ptr %42, i64 %1844
  %1846 = getelementptr inbounds double, ptr %141, i64 %1826
  %1847 = load double, ptr %1846, align 8, !tbaa !19
  %1848 = sext i32 %1841 to i64
  %1849 = getelementptr inbounds double, ptr %1823, i64 %1848
  %1850 = load double, ptr %1849, align 8, !tbaa !19
  %1851 = fsub double %1847, %1850
  %1852 = shl nsw i32 %1841, 4
  %1853 = sext i32 %1852 to i64
  %1854 = getelementptr inbounds double, ptr %27, i64 %1853
  %1855 = getelementptr inbounds %struct.CompAtom, ptr %42, i64 %1844, i32 2
  %1856 = load i16, ptr %1855, align 4, !tbaa !80
  %1857 = sext i16 %1856 to i32
  %1858 = shl nsw i32 %1857, 1
  %1859 = sext i32 %1858 to i64
  %1860 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %1816, i64 %1859
  %1861 = getelementptr inbounds %class.Vector, ptr %626, i64 %1844
  %1862 = getelementptr inbounds %class.Vector, ptr %630, i64 %1844
  %1863 = getelementptr inbounds %struct.CompAtom, ptr %42, i64 %1844, i32 1
  %1864 = load float, ptr %1863, align 8, !tbaa !79
  %1865 = fpext float %1864 to double
  %1866 = fmul double %1807, %1865
  %1867 = load <2 x double>, ptr %1845, align 8, !tbaa !19
  %1868 = fsub <2 x double> %1801, %1867
  %1869 = getelementptr inbounds %class.Vector, ptr %1845, i64 0, i32 2
  %1870 = load double, ptr %1869, align 8, !tbaa !49
  %1871 = fsub double %1789, %1870
  %1872 = load double, ptr %1860, align 8, !tbaa !84
  %1873 = fmul double %29, %1872
  %1874 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %1816, i64 %1859, i32 1
  %1875 = load double, ptr %1874, align 8, !tbaa !86
  %1876 = load double, ptr %1854, align 8, !tbaa !19
  %1877 = getelementptr inbounds double, ptr %1854, i64 2
  %1878 = load double, ptr %1877, align 8, !tbaa !19
  %1879 = fmul double %1875, %664
  %1880 = fmul double %1879, %1878
  %1881 = tail call double @llvm.fmuladd.f64(double %1873, double %1876, double %1880)
  %1882 = getelementptr inbounds double, ptr %1854, i64 1
  %1883 = load double, ptr %1882, align 8, !tbaa !19
  %1884 = getelementptr inbounds double, ptr %1854, i64 3
  %1885 = load double, ptr %1884, align 8, !tbaa !19
  %1886 = fmul double %1879, %1885
  %1887 = tail call double @llvm.fmuladd.f64(double %1873, double %1883, double %1886)
  %1888 = getelementptr inbounds double, ptr %1854, i64 4
  %1889 = load double, ptr %1888, align 8, !tbaa !19
  %1890 = getelementptr inbounds double, ptr %1854, i64 6
  %1891 = load double, ptr %1890, align 8, !tbaa !19
  %1892 = fmul double %1879, %1891
  %1893 = tail call double @llvm.fmuladd.f64(double %1873, double %1889, double %1892)
  %1894 = getelementptr inbounds double, ptr %1854, i64 8
  %1895 = load double, ptr %1894, align 8, !tbaa !19
  %1896 = fmul double %1866, %1895
  %1897 = getelementptr inbounds double, ptr %1854, i64 9
  %1898 = load double, ptr %1897, align 8, !tbaa !19
  %1899 = fmul double %1866, %1898
  %1900 = getelementptr inbounds double, ptr %1854, i64 10
  %1901 = load double, ptr %1900, align 8, !tbaa !19
  %1902 = fmul double %1866, %1901
  %1903 = fadd double %1881, %1896
  %1904 = fadd double %1887, %1899
  %1905 = fadd double %1893, %1902
  %1906 = tail call double @llvm.fmuladd.f64(double %1851, double %1903, double %1904)
  %1907 = tail call double @llvm.fmuladd.f64(double %1906, double %1851, double %1905)
  %1908 = extractelement <2 x double> %1868, i64 1
  %1909 = fmul double %1908, %1907
  %1910 = insertelement <2 x double> poison, double %1909, i64 0
  %1911 = shufflevector <2 x double> %1910, <2 x double> poison, <2 x i32> zeroinitializer
  %1912 = shufflevector <2 x double> %1868, <2 x double> poison, <2 x i32> <i32 1, i32 0>
  %1913 = insertelement <2 x double> %1912, double %1871, i64 1
  %1914 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %1911, <2 x double> %1913, <2 x double> %1830)
  %1915 = insertelement <2 x double> %1912, double %1871, i64 0
  %1916 = insertelement <2 x double> poison, double %1907, i64 0
  %1917 = shufflevector <2 x double> %1916, <2 x double> poison, <2 x i32> zeroinitializer
  %1918 = fmul <2 x double> %1915, %1917
  %1919 = shufflevector <2 x double> %1918, <2 x double> poison, <2 x i32> <i32 1, i32 poison>
  %1920 = shufflevector <2 x double> %1918, <2 x double> poison, <2 x i32> <i32 1, i32 1>
  %1921 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %1920, <2 x double> %1868, <2 x double> %1829)
  %1922 = insertelement <2 x double> %1919, double %1909, i64 1
  %1923 = fadd <2 x double> %1835, %1922
  %1924 = load <2 x double>, ptr %1861, align 8, !tbaa !19
  %1925 = fsub <2 x double> %1924, %1922
  store <2 x double> %1925, ptr %1861, align 8, !tbaa !19
  %1926 = shufflevector <2 x double> %1915, <2 x double> poison, <2 x i32> zeroinitializer
  %1927 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %1918, <2 x double> %1926, <2 x double> %1833)
  %1928 = extractelement <2 x double> %1918, i64 0
  %1929 = fadd double %1827, %1928
  %1930 = getelementptr inbounds %class.Vector, ptr %626, i64 %1844, i32 2
  %1931 = load double, ptr %1930, align 8, !tbaa !87
  %1932 = fsub double %1931, %1928
  store double %1932, ptr %1930, align 8, !tbaa !87
  %1933 = getelementptr inbounds double, ptr %1854, i64 12
  %1934 = load double, ptr %1933, align 8, !tbaa !19
  %1935 = getelementptr inbounds double, ptr %1854, i64 13
  %1936 = load double, ptr %1935, align 8, !tbaa !19
  %1937 = getelementptr inbounds double, ptr %1854, i64 14
  %1938 = load double, ptr %1937, align 8, !tbaa !19
  %1939 = fmul double %1866, %1934
  %1940 = fmul double %1866, %1936
  %1941 = fmul double %1866, %1938
  %1942 = tail call double @llvm.fmuladd.f64(double %1851, double %1939, double %1940)
  %1943 = tail call double @llvm.fmuladd.f64(double %1942, double %1851, double %1941)
  %1944 = fmul double %1908, %1943
  %1945 = insertelement <2 x double> poison, double %1944, i64 0
  %1946 = shufflevector <2 x double> %1945, <2 x double> poison, <2 x i32> zeroinitializer
  %1947 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %1946, <2 x double> %1913, <2 x double> %1832)
  %1948 = insertelement <2 x double> poison, double %1943, i64 0
  %1949 = shufflevector <2 x double> %1948, <2 x double> poison, <2 x i32> zeroinitializer
  %1950 = fmul <2 x double> %1915, %1949
  %1951 = shufflevector <2 x double> %1950, <2 x double> poison, <2 x i32> <i32 1, i32 poison>
  %1952 = shufflevector <2 x double> %1950, <2 x double> poison, <2 x i32> <i32 1, i32 1>
  %1953 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %1952, <2 x double> %1868, <2 x double> %1831)
  %1954 = insertelement <2 x double> %1951, double %1944, i64 1
  %1955 = fadd <2 x double> %1836, %1954
  %1956 = load <2 x double>, ptr %1862, align 8, !tbaa !19
  %1957 = fsub <2 x double> %1956, %1954
  store <2 x double> %1957, ptr %1862, align 8, !tbaa !19
  %1958 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %1950, <2 x double> %1926, <2 x double> %1834)
  %1959 = extractelement <2 x double> %1950, i64 0
  %1960 = fadd double %1828, %1959
  %1961 = getelementptr inbounds %class.Vector, ptr %630, i64 %1844, i32 2
  %1962 = load double, ptr %1961, align 8, !tbaa !87
  %1963 = fsub double %1962, %1959
  store double %1963, ptr %1961, align 8, !tbaa !87
  %1964 = add nuw nsw i64 %1826, 1
  %1965 = icmp eq i64 %1964, %1824
  br i1 %1965, label %1966, label %1825

1966:                                             ; preds = %1825, %1788
  %1967 = phi double [ 0.000000e+00, %1788 ], [ %1960, %1825 ]
  %1968 = phi double [ 0.000000e+00, %1788 ], [ %1929, %1825 ]
  %1969 = phi <2 x double> [ %679, %1788 ], [ %1921, %1825 ]
  %1970 = phi <2 x double> [ %680, %1788 ], [ %1914, %1825 ]
  %1971 = phi <2 x double> [ %681, %1788 ], [ %1953, %1825 ]
  %1972 = phi <2 x double> [ %682, %1788 ], [ %1947, %1825 ]
  %1973 = phi <2 x double> [ %683, %1788 ], [ %1927, %1825 ]
  %1974 = phi <2 x double> [ %684, %1788 ], [ %1958, %1825 ]
  %1975 = phi <2 x double> [ zeroinitializer, %1788 ], [ %1923, %1825 ]
  %1976 = phi <2 x double> [ zeroinitializer, %1788 ], [ %1955, %1825 ]
  %1977 = load double, ptr @_ZN20ComputeNonbondedUtil7cutoff2E, align 8, !tbaa !19
  %1978 = tail call noundef i32 @_Z22pairlist_from_pairlistddddPK8CompAtomPKtiPtdPd(double noundef %1977, double noundef %1818, double noundef %1819, double noundef %1789, ptr noundef %42, ptr noundef %1795, i32 noundef %1796, ptr noundef %95, double noundef %32, ptr noundef %141)
  %1979 = add nsw i32 %1978, %672
  %1980 = icmp sgt i32 %1978, 0
  br i1 %1980, label %1981, label %2139

1981:                                             ; preds = %1966
  %1982 = load ptr, ptr @_ZN20ComputeNonbondedUtil8r2_tableE, align 8, !tbaa !23
  %1983 = zext i32 %1978 to i64
  br label %1984

1984:                                             ; preds = %1981, %1984
  %1985 = phi i64 [ 0, %1981 ], [ %2137, %1984 ]
  %1986 = phi double [ %1968, %1981 ], [ %2090, %1984 ]
  %1987 = phi double [ %1967, %1981 ], [ %2133, %1984 ]
  %1988 = phi <2 x double> [ %1969, %1981 ], [ %2082, %1984 ]
  %1989 = phi <2 x double> [ %1970, %1981 ], [ %2075, %1984 ]
  %1990 = phi <2 x double> [ %1971, %1981 ], [ %2126, %1984 ]
  %1991 = phi <2 x double> [ %1972, %1981 ], [ %2120, %1984 ]
  %1992 = phi <2 x double> [ %1973, %1981 ], [ %2088, %1984 ]
  %1993 = phi <2 x double> [ %1974, %1981 ], [ %2131, %1984 ]
  %1994 = phi <2 x double> [ %1975, %1981 ], [ %2084, %1984 ]
  %1995 = phi <2 x double> [ %1976, %1981 ], [ %2128, %1984 ]
  %1996 = shl nuw nsw i64 %1985, 1
  %1997 = getelementptr inbounds i32, ptr %142, i64 %1996
  %1998 = load i32, ptr %1997, align 4, !tbaa !5
  %1999 = ashr i32 %1998, 14
  %2000 = add nsw i32 %1999, %35
  %2001 = getelementptr inbounds i16, ptr %95, i64 %1985
  %2002 = load i16, ptr %2001, align 2, !tbaa !44
  %2003 = zext i16 %2002 to i64
  %2004 = getelementptr inbounds %struct.CompAtom, ptr %42, i64 %2003
  %2005 = getelementptr inbounds double, ptr %141, i64 %1985
  %2006 = load double, ptr %2005, align 8, !tbaa !19
  %2007 = sext i32 %2000 to i64
  %2008 = getelementptr inbounds double, ptr %1982, i64 %2007
  %2009 = load double, ptr %2008, align 8, !tbaa !19
  %2010 = fsub double %2006, %2009
  %2011 = shl nsw i32 %2000, 4
  %2012 = sext i32 %2011 to i64
  %2013 = getelementptr inbounds double, ptr %27, i64 %2012
  %2014 = getelementptr inbounds %struct.CompAtom, ptr %42, i64 %2003, i32 2
  %2015 = load i16, ptr %2014, align 4, !tbaa !80
  %2016 = sext i16 %2015 to i32
  %2017 = shl nsw i32 %2016, 1
  %2018 = sext i32 %2017 to i64
  %2019 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %1816, i64 %2018
  %2020 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %2019, i64 1
  %2021 = getelementptr inbounds %class.Vector, ptr %626, i64 %2003
  %2022 = getelementptr inbounds %class.Vector, ptr %630, i64 %2003
  %2023 = getelementptr inbounds %struct.CompAtom, ptr %42, i64 %2003, i32 1
  %2024 = load float, ptr %2023, align 8, !tbaa !79
  %2025 = fpext float %2024 to double
  %2026 = fmul double %1807, %2025
  %2027 = load <2 x double>, ptr %2004, align 8, !tbaa !19
  %2028 = fsub <2 x double> %1801, %2027
  %2029 = getelementptr inbounds %class.Vector, ptr %2004, i64 0, i32 2
  %2030 = load double, ptr %2029, align 8, !tbaa !49
  %2031 = fsub double %1789, %2030
  %2032 = load double, ptr %2020, align 8, !tbaa !84
  %2033 = fmul double %29, %2032
  %2034 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %2019, i64 1, i32 1
  %2035 = load double, ptr %2034, align 8, !tbaa !86
  %2036 = load double, ptr %2013, align 8, !tbaa !19
  %2037 = getelementptr inbounds double, ptr %2013, i64 2
  %2038 = load double, ptr %2037, align 8, !tbaa !19
  %2039 = fmul double %2035, %664
  %2040 = fmul double %2039, %2038
  %2041 = tail call double @llvm.fmuladd.f64(double %2033, double %2036, double %2040)
  %2042 = getelementptr inbounds double, ptr %2013, i64 1
  %2043 = load double, ptr %2042, align 8, !tbaa !19
  %2044 = getelementptr inbounds double, ptr %2013, i64 3
  %2045 = load double, ptr %2044, align 8, !tbaa !19
  %2046 = fmul double %2039, %2045
  %2047 = tail call double @llvm.fmuladd.f64(double %2033, double %2043, double %2046)
  %2048 = getelementptr inbounds double, ptr %2013, i64 4
  %2049 = load double, ptr %2048, align 8, !tbaa !19
  %2050 = getelementptr inbounds double, ptr %2013, i64 6
  %2051 = load double, ptr %2050, align 8, !tbaa !19
  %2052 = fmul double %2039, %2051
  %2053 = tail call double @llvm.fmuladd.f64(double %2033, double %2049, double %2052)
  %2054 = fmul double %665, %2026
  %2055 = getelementptr inbounds double, ptr %2013, i64 8
  %2056 = load double, ptr %2055, align 8, !tbaa !19
  %2057 = fmul double %2054, %2056
  %2058 = getelementptr inbounds double, ptr %2013, i64 9
  %2059 = load double, ptr %2058, align 8, !tbaa !19
  %2060 = fmul double %2054, %2059
  %2061 = getelementptr inbounds double, ptr %2013, i64 10
  %2062 = load double, ptr %2061, align 8, !tbaa !19
  %2063 = fmul double %2054, %2062
  %2064 = fadd double %2041, %2057
  %2065 = fadd double %2047, %2060
  %2066 = fadd double %2053, %2063
  %2067 = tail call double @llvm.fmuladd.f64(double %2010, double %2064, double %2065)
  %2068 = tail call double @llvm.fmuladd.f64(double %2067, double %2010, double %2066)
  %2069 = extractelement <2 x double> %2028, i64 1
  %2070 = fmul double %2069, %2068
  %2071 = insertelement <2 x double> poison, double %2070, i64 0
  %2072 = shufflevector <2 x double> %2071, <2 x double> poison, <2 x i32> zeroinitializer
  %2073 = shufflevector <2 x double> %2028, <2 x double> poison, <2 x i32> <i32 1, i32 0>
  %2074 = insertelement <2 x double> %2073, double %2031, i64 1
  %2075 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2072, <2 x double> %2074, <2 x double> %1989)
  %2076 = insertelement <2 x double> %2073, double %2031, i64 0
  %2077 = insertelement <2 x double> poison, double %2068, i64 0
  %2078 = shufflevector <2 x double> %2077, <2 x double> poison, <2 x i32> zeroinitializer
  %2079 = fmul <2 x double> %2076, %2078
  %2080 = shufflevector <2 x double> %2079, <2 x double> poison, <2 x i32> <i32 1, i32 poison>
  %2081 = shufflevector <2 x double> %2079, <2 x double> poison, <2 x i32> <i32 1, i32 1>
  %2082 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2081, <2 x double> %2028, <2 x double> %1988)
  %2083 = insertelement <2 x double> %2080, double %2070, i64 1
  %2084 = fadd <2 x double> %1994, %2083
  %2085 = load <2 x double>, ptr %2021, align 8, !tbaa !19
  %2086 = fsub <2 x double> %2085, %2083
  store <2 x double> %2086, ptr %2021, align 8, !tbaa !19
  %2087 = shufflevector <2 x double> %2076, <2 x double> poison, <2 x i32> zeroinitializer
  %2088 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2079, <2 x double> %2087, <2 x double> %1992)
  %2089 = extractelement <2 x double> %2079, i64 0
  %2090 = fadd double %1986, %2089
  %2091 = getelementptr inbounds %class.Vector, ptr %626, i64 %2003, i32 2
  %2092 = load double, ptr %2091, align 8, !tbaa !87
  %2093 = fsub double %2092, %2089
  store double %2093, ptr %2091, align 8, !tbaa !87
  %2094 = shl nsw i32 %2000, 2
  %2095 = sext i32 %2094 to i64
  %2096 = getelementptr inbounds double, ptr %28, i64 %2095
  %2097 = getelementptr inbounds double, ptr %2013, i64 12
  %2098 = load double, ptr %2097, align 8, !tbaa !19
  %2099 = getelementptr inbounds double, ptr %2013, i64 13
  %2100 = load double, ptr %2099, align 8, !tbaa !19
  %2101 = getelementptr inbounds double, ptr %2013, i64 14
  %2102 = load double, ptr %2101, align 8, !tbaa !19
  %2103 = getelementptr inbounds double, ptr %2096, i64 1
  %2104 = load double, ptr %2103, align 8, !tbaa !19
  %2105 = tail call double @llvm.fmuladd.f64(double %666, double %2104, double %2102)
  %2106 = getelementptr inbounds double, ptr %2096, i64 2
  %2107 = load double, ptr %2106, align 8, !tbaa !19
  %2108 = tail call double @llvm.fmuladd.f64(double %667, double %2107, double %2100)
  %2109 = getelementptr inbounds double, ptr %2096, i64 3
  %2110 = load double, ptr %2109, align 8, !tbaa !19
  %2111 = tail call double @llvm.fmuladd.f64(double %668, double %2110, double %2098)
  %2112 = fmul double %2026, %2111
  %2113 = fmul double %2026, %2108
  %2114 = fmul double %2026, %2105
  %2115 = tail call double @llvm.fmuladd.f64(double %2010, double %2112, double %2113)
  %2116 = tail call double @llvm.fmuladd.f64(double %2115, double %2010, double %2114)
  %2117 = fmul double %2069, %2116
  %2118 = insertelement <2 x double> poison, double %2117, i64 0
  %2119 = shufflevector <2 x double> %2118, <2 x double> poison, <2 x i32> zeroinitializer
  %2120 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2119, <2 x double> %2074, <2 x double> %1991)
  %2121 = insertelement <2 x double> poison, double %2116, i64 0
  %2122 = shufflevector <2 x double> %2121, <2 x double> poison, <2 x i32> zeroinitializer
  %2123 = fmul <2 x double> %2076, %2122
  %2124 = shufflevector <2 x double> %2123, <2 x double> poison, <2 x i32> <i32 1, i32 poison>
  %2125 = shufflevector <2 x double> %2123, <2 x double> poison, <2 x i32> <i32 1, i32 1>
  %2126 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2125, <2 x double> %2028, <2 x double> %1990)
  %2127 = insertelement <2 x double> %2124, double %2117, i64 1
  %2128 = fadd <2 x double> %1995, %2127
  %2129 = load <2 x double>, ptr %2022, align 8, !tbaa !19
  %2130 = fsub <2 x double> %2129, %2127
  store <2 x double> %2130, ptr %2022, align 8, !tbaa !19
  %2131 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2123, <2 x double> %2087, <2 x double> %1993)
  %2132 = extractelement <2 x double> %2123, i64 0
  %2133 = fadd double %1987, %2132
  %2134 = getelementptr inbounds %class.Vector, ptr %630, i64 %2003, i32 2
  %2135 = load double, ptr %2134, align 8, !tbaa !87
  %2136 = fsub double %2135, %2132
  store double %2136, ptr %2134, align 8, !tbaa !87
  %2137 = add nuw nsw i64 %1985, 1
  %2138 = icmp eq i64 %2137, %1983
  br i1 %2138, label %2139, label %1984

2139:                                             ; preds = %1984, %1966
  %2140 = phi double [ %1967, %1966 ], [ %2133, %1984 ]
  %2141 = phi double [ %1968, %1966 ], [ %2090, %1984 ]
  %2142 = phi <2 x double> [ %1969, %1966 ], [ %2082, %1984 ]
  %2143 = phi <2 x double> [ %1970, %1966 ], [ %2075, %1984 ]
  %2144 = phi <2 x double> [ %1971, %1966 ], [ %2126, %1984 ]
  %2145 = phi <2 x double> [ %1972, %1966 ], [ %2120, %1984 ]
  %2146 = phi <2 x double> [ %1973, %1966 ], [ %2088, %1984 ]
  %2147 = phi <2 x double> [ %1974, %1966 ], [ %2131, %1984 ]
  %2148 = phi <2 x double> [ %1975, %1966 ], [ %2084, %1984 ]
  %2149 = phi <2 x double> [ %1976, %1966 ], [ %2128, %1984 ]
  %2150 = load double, ptr @_ZN20ComputeNonbondedUtil7cutoff2E, align 8, !tbaa !19
  %2151 = tail call noundef i32 @_Z22pairlist_from_pairlistddddPK8CompAtomPKtiPtdPd(double noundef %2150, double noundef %1818, double noundef %1819, double noundef %1789, ptr noundef %42, ptr noundef %1793, i32 noundef %1794, ptr noundef %95, double noundef %32, ptr noundef %141)
  %2152 = add nsw i32 %1979, %2151
  %2153 = icmp sgt i32 %2151, 0
  br i1 %2153, label %2154, label %2242

2154:                                             ; preds = %2139
  %2155 = load ptr, ptr @_ZN20ComputeNonbondedUtil8r2_tableE, align 8, !tbaa !23
  %2156 = zext i32 %2151 to i64
  br label %2157

2157:                                             ; preds = %2154, %2157
  %2158 = phi i64 [ 0, %2154 ], [ %2240, %2157 ]
  %2159 = phi double [ %2140, %2154 ], [ %2236, %2157 ]
  %2160 = phi <2 x double> [ %2144, %2154 ], [ %2228, %2157 ]
  %2161 = phi <2 x double> [ %2145, %2154 ], [ %2221, %2157 ]
  %2162 = phi <2 x double> [ %2147, %2154 ], [ %2234, %2157 ]
  %2163 = phi <2 x double> [ %2149, %2154 ], [ %2230, %2157 ]
  %2164 = shl nuw nsw i64 %2158, 1
  %2165 = getelementptr inbounds i32, ptr %142, i64 %2164
  %2166 = load i32, ptr %2165, align 4, !tbaa !5
  %2167 = ashr i32 %2166, 14
  %2168 = add nsw i32 %2167, %35
  %2169 = getelementptr inbounds i16, ptr %95, i64 %2158
  %2170 = load i16, ptr %2169, align 2, !tbaa !44
  %2171 = zext i16 %2170 to i64
  %2172 = getelementptr inbounds %struct.CompAtom, ptr %42, i64 %2171
  %2173 = getelementptr inbounds double, ptr %141, i64 %2158
  %2174 = load double, ptr %2173, align 8, !tbaa !19
  %2175 = sext i32 %2168 to i64
  %2176 = getelementptr inbounds double, ptr %2155, i64 %2175
  %2177 = load double, ptr %2176, align 8, !tbaa !19
  %2178 = fsub double %2174, %2177
  %2179 = shl nsw i32 %2168, 4
  %2180 = sext i32 %2179 to i64
  %2181 = getelementptr inbounds double, ptr %27, i64 %2180
  %2182 = getelementptr inbounds %class.Vector, ptr %630, i64 %2171
  %2183 = getelementptr inbounds %struct.CompAtom, ptr %42, i64 %2171, i32 1
  %2184 = load float, ptr %2183, align 8, !tbaa !79
  %2185 = fpext float %2184 to double
  %2186 = fmul double %1807, %2185
  %2187 = load <2 x double>, ptr %2172, align 8, !tbaa !19
  %2188 = fsub <2 x double> %1801, %2187
  %2189 = getelementptr inbounds %class.Vector, ptr %2172, i64 0, i32 2
  %2190 = load double, ptr %2189, align 8, !tbaa !49
  %2191 = fsub double %1789, %2190
  %2192 = shl nsw i32 %2168, 2
  %2193 = sext i32 %2192 to i64
  %2194 = getelementptr inbounds double, ptr %28, i64 %2193
  %2195 = getelementptr inbounds double, ptr %2181, i64 12
  %2196 = load double, ptr %2195, align 8, !tbaa !19
  %2197 = getelementptr inbounds double, ptr %2181, i64 13
  %2198 = load double, ptr %2197, align 8, !tbaa !19
  %2199 = getelementptr inbounds double, ptr %2181, i64 14
  %2200 = load double, ptr %2199, align 8, !tbaa !19
  %2201 = getelementptr inbounds double, ptr %2194, i64 1
  %2202 = load double, ptr %2201, align 8, !tbaa !19
  %2203 = tail call double @llvm.fmuladd.f64(double %2202, double 2.000000e+00, double %2200)
  %2204 = getelementptr inbounds double, ptr %2194, i64 2
  %2205 = load double, ptr %2204, align 8, !tbaa !19
  %2206 = tail call double @llvm.fmuladd.f64(double %2205, double 4.000000e+00, double %2198)
  %2207 = getelementptr inbounds double, ptr %2194, i64 3
  %2208 = load double, ptr %2207, align 8, !tbaa !19
  %2209 = tail call double @llvm.fmuladd.f64(double %2208, double 6.000000e+00, double %2196)
  %2210 = fmul double %2186, %2209
  %2211 = fmul double %2186, %2206
  %2212 = fmul double %2186, %2203
  %2213 = tail call double @llvm.fmuladd.f64(double %2178, double %2210, double %2211)
  %2214 = tail call double @llvm.fmuladd.f64(double %2213, double %2178, double %2212)
  %2215 = extractelement <2 x double> %2188, i64 1
  %2216 = fmul double %2215, %2214
  %2217 = insertelement <2 x double> poison, double %2216, i64 0
  %2218 = shufflevector <2 x double> %2217, <2 x double> poison, <2 x i32> zeroinitializer
  %2219 = shufflevector <2 x double> %2188, <2 x double> poison, <2 x i32> <i32 1, i32 0>
  %2220 = insertelement <2 x double> %2219, double %2191, i64 1
  %2221 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2218, <2 x double> %2220, <2 x double> %2161)
  %2222 = insertelement <2 x double> %2219, double %2191, i64 0
  %2223 = insertelement <2 x double> poison, double %2214, i64 0
  %2224 = shufflevector <2 x double> %2223, <2 x double> poison, <2 x i32> zeroinitializer
  %2225 = fmul <2 x double> %2222, %2224
  %2226 = shufflevector <2 x double> %2225, <2 x double> poison, <2 x i32> <i32 1, i32 poison>
  %2227 = shufflevector <2 x double> %2225, <2 x double> poison, <2 x i32> <i32 1, i32 1>
  %2228 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2227, <2 x double> %2188, <2 x double> %2160)
  %2229 = insertelement <2 x double> %2226, double %2216, i64 1
  %2230 = fadd <2 x double> %2163, %2229
  %2231 = load <2 x double>, ptr %2182, align 8, !tbaa !19
  %2232 = fsub <2 x double> %2231, %2229
  store <2 x double> %2232, ptr %2182, align 8, !tbaa !19
  %2233 = shufflevector <2 x double> %2222, <2 x double> poison, <2 x i32> zeroinitializer
  %2234 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2225, <2 x double> %2233, <2 x double> %2162)
  %2235 = extractelement <2 x double> %2225, i64 0
  %2236 = fadd double %2159, %2235
  %2237 = getelementptr inbounds %class.Vector, ptr %630, i64 %2171, i32 2
  %2238 = load double, ptr %2237, align 8, !tbaa !87
  %2239 = fsub double %2238, %2235
  store double %2239, ptr %2237, align 8, !tbaa !87
  %2240 = add nuw nsw i64 %2158, 1
  %2241 = icmp eq i64 %2240, %2156
  br i1 %2241, label %2242, label %2157

2242:                                             ; preds = %2157, %2139
  %2243 = phi double [ %2140, %2139 ], [ %2236, %2157 ]
  %2244 = phi <2 x double> [ %2144, %2139 ], [ %2228, %2157 ]
  %2245 = phi <2 x double> [ %2145, %2139 ], [ %2221, %2157 ]
  %2246 = phi <2 x double> [ %2147, %2139 ], [ %2234, %2157 ]
  %2247 = phi <2 x double> [ %2149, %2139 ], [ %2230, %2157 ]
  %2248 = getelementptr inbounds %class.Vector, ptr %624, i64 %685
  %2249 = load <2 x double>, ptr %2248, align 8, !tbaa !19
  %2250 = fadd <2 x double> %2148, %2249
  store <2 x double> %2250, ptr %2248, align 8, !tbaa !19
  %2251 = getelementptr inbounds %class.Vector, ptr %624, i64 %685, i32 2
  %2252 = load double, ptr %2251, align 8, !tbaa !87
  %2253 = fadd double %2141, %2252
  store double %2253, ptr %2251, align 8, !tbaa !87
  %2254 = getelementptr inbounds %class.Vector, ptr %628, i64 %685
  %2255 = load <2 x double>, ptr %2254, align 8, !tbaa !19
  %2256 = fadd <2 x double> %2247, %2255
  store <2 x double> %2256, ptr %2254, align 8, !tbaa !19
  %2257 = getelementptr inbounds %class.Vector, ptr %628, i64 %685, i32 2
  %2258 = load double, ptr %2257, align 8, !tbaa !87
  %2259 = fadd double %2243, %2258
  store double %2259, ptr %2257, align 8, !tbaa !87
  br i1 %145, label %2262, label %2260

2260:                                             ; preds = %2242
  %2261 = add nsw i32 %673, 1
  br label %2270

2262:                                             ; preds = %2242
  %2263 = load ptr, ptr %8, align 8, !tbaa !46
  %2264 = load i32, ptr %13, align 8, !tbaa !17
  %2265 = add nsw i32 %2264, 1
  store i32 %2265, ptr %13, align 8, !tbaa !17
  %2266 = sext i32 %2264 to i64
  %2267 = getelementptr inbounds i16, ptr %2263, i64 %2266
  %2268 = load i16, ptr %2267, align 2, !tbaa !44
  %2269 = zext i16 %2268 to i32
  br label %2270

2270:                                             ; preds = %1127, %1395, %2262, %2260, %697
  %2271 = phi i32 [ %1790, %2262 ], [ %1790, %2260 ], [ %698, %697 ], [ %701, %1395 ], [ %701, %1127 ]
  %2272 = phi i32 [ %1797, %2262 ], [ %1797, %2260 ], [ %677, %697 ], [ %1141, %1395 ], [ 0, %1127 ]
  %2273 = phi ptr [ %1798, %2262 ], [ %1798, %2260 ], [ %676, %697 ], [ %951, %1395 ], [ %951, %1127 ]
  %2274 = phi ptr [ %1799, %2262 ], [ %1799, %2260 ], [ %675, %697 ], [ %952, %1395 ], [ %952, %1127 ]
  %2275 = phi ptr [ %1800, %2262 ], [ %1800, %2260 ], [ %674, %697 ], [ %953, %1395 ], [ %953, %1127 ]
  %2276 = phi i32 [ %2269, %2262 ], [ %2261, %2260 ], [ %699, %697 ], [ %1396, %1395 ], [ %1131, %1127 ]
  %2277 = phi i32 [ %2152, %2262 ], [ %2152, %2260 ], [ %672, %697 ], [ %672, %1395 ], [ %672, %1127 ]
  %2278 = phi <2 x double> [ %2142, %2262 ], [ %2142, %2260 ], [ %679, %697 ], [ %679, %1395 ], [ %679, %1127 ]
  %2279 = phi <2 x double> [ %2143, %2262 ], [ %2143, %2260 ], [ %680, %697 ], [ %680, %1395 ], [ %680, %1127 ]
  %2280 = phi <2 x double> [ %2244, %2262 ], [ %2244, %2260 ], [ %681, %697 ], [ %681, %1395 ], [ %681, %1127 ]
  %2281 = phi <2 x double> [ %2245, %2262 ], [ %2245, %2260 ], [ %682, %697 ], [ %682, %1395 ], [ %682, %1127 ]
  %2282 = phi <2 x double> [ %2146, %2262 ], [ %2146, %2260 ], [ %683, %697 ], [ %683, %1395 ], [ %683, %1127 ]
  %2283 = phi <2 x double> [ %2246, %2262 ], [ %2246, %2260 ], [ %684, %697 ], [ %684, %1395 ], [ %684, %1127 ]
  %2284 = icmp slt i32 %2276, %37
  br i1 %2284, label %671, label %2285

2285:                                             ; preds = %2270, %645
  %2286 = phi ptr [ null, %645 ], [ %2275, %2270 ]
  %2287 = phi i32 [ %647, %645 ], [ %2276, %2270 ]
  %2288 = phi i32 [ 0, %645 ], [ %2277, %2270 ]
  %2289 = phi <2 x double> [ zeroinitializer, %645 ], [ %2278, %2270 ]
  %2290 = phi <2 x double> [ zeroinitializer, %645 ], [ %2279, %2270 ]
  %2291 = phi <2 x double> [ zeroinitializer, %645 ], [ %2280, %2270 ]
  %2292 = phi <2 x double> [ zeroinitializer, %645 ], [ %2281, %2270 ]
  %2293 = phi <2 x double> [ zeroinitializer, %645 ], [ %2282, %2270 ]
  %2294 = phi <2 x double> [ zeroinitializer, %645 ], [ %2283, %2270 ]
  br i1 %143, label %2302, label %2295

2295:                                             ; preds = %2285
  %2296 = trunc i32 %2287 to i16
  %2297 = load ptr, ptr %8, align 8, !tbaa !46
  %2298 = load i32, ptr %13, align 8, !tbaa !17
  %2299 = add nsw i32 %2298, -1
  %2300 = sext i32 %2299 to i64
  %2301 = getelementptr inbounds i16, ptr %2297, i64 %2300
  store i16 %2296, ptr %2301, align 2, !tbaa !44
  br label %2302

2302:                                             ; preds = %2295, %2285
  %2303 = sitofp i32 %2288 to double
  %2304 = getelementptr inbounds double, ptr %6, i64 22
  %2305 = load double, ptr %2304, align 8, !tbaa !19
  %2306 = fadd double %2305, %2303
  store double %2306, ptr %2304, align 8, !tbaa !19
  %2307 = getelementptr inbounds double, ptr %6, i64 3
  %2308 = load <4 x double>, ptr %2307, align 8, !tbaa !19
  %2309 = shufflevector <2 x double> %2289, <2 x double> %2293, <4 x i32> <i32 0, i32 1, i32 3, i32 poison>
  %2310 = shufflevector <4 x double> %2309, <4 x double> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 1>
  %2311 = fadd <4 x double> %2310, %2308
  store <4 x double> %2311, ptr %2307, align 8, !tbaa !19
  %2312 = getelementptr inbounds double, ptr %6, i64 7
  %2313 = load <4 x double>, ptr %2312, align 8, !tbaa !19
  %2314 = shufflevector <2 x double> %2290, <2 x double> %2293, <4 x i32> <i32 0, i32 1, i32 3, i32 poison>
  %2315 = shufflevector <4 x double> %2314, <4 x double> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 1>
  %2316 = fadd <4 x double> %2315, %2313
  store <4 x double> %2316, ptr %2312, align 8, !tbaa !19
  %2317 = getelementptr inbounds double, ptr %6, i64 11
  %2318 = load double, ptr %2317, align 8, !tbaa !19
  %2319 = extractelement <2 x double> %2293, i64 0
  %2320 = fadd double %2319, %2318
  store double %2320, ptr %2317, align 8, !tbaa !19
  %2321 = getelementptr inbounds double, ptr %6, i64 12
  %2322 = load <4 x double>, ptr %2321, align 8, !tbaa !19
  %2323 = shufflevector <2 x double> %2291, <2 x double> %2294, <4 x i32> <i32 0, i32 1, i32 3, i32 poison>
  %2324 = shufflevector <4 x double> %2323, <4 x double> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 1>
  %2325 = fadd <4 x double> %2324, %2322
  store <4 x double> %2325, ptr %2321, align 8, !tbaa !19
  %2326 = getelementptr inbounds double, ptr %6, i64 16
  %2327 = load <4 x double>, ptr %2326, align 8, !tbaa !19
  %2328 = shufflevector <2 x double> %2292, <2 x double> %2294, <4 x i32> <i32 0, i32 1, i32 3, i32 poison>
  %2329 = shufflevector <4 x double> %2328, <4 x double> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 1>
  %2330 = fadd <4 x double> %2329, %2327
  store <4 x double> %2330, ptr %2326, align 8, !tbaa !19
  %2331 = getelementptr inbounds double, ptr %6, i64 20
  %2332 = load double, ptr %2331, align 8, !tbaa !19
  %2333 = extractelement <2 x double> %2294, i64 0
  %2334 = fadd double %2333, %2332
  store double %2334, ptr %2331, align 8, !tbaa !19
  %2335 = icmp eq ptr %2286, null
  br i1 %2335, label %2337, label %2336

2336:                                             ; preds = %2302
  tail call void @_ZdaPv(ptr noundef nonnull %2286) #10
  br label %2337

2337:                                             ; preds = %2302, %2336, %1
  ret void
}

; Function Attrs: sspstrong uwtable
define dso_local void @_ZN20ComputeNonbondedUtil26calc_pair_energy_fullelectEP9nonbonded(ptr nocapture noundef readonly %0) local_unnamed_addr #0 align 2 {
  %2 = load i32, ptr @_ZN20ComputeNonbondedUtil8commOnlyE, align 4, !tbaa !5
  %3 = icmp eq i32 %2, 0
  br i1 %3, label %4, label %2449

4:                                                ; preds = %1
  %5 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 7
  %6 = load ptr, ptr %5, align 8, !tbaa !9
  %7 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 10
  %8 = load ptr, ptr %7, align 8, !tbaa !14
  %9 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 11
  %10 = load i32, ptr %9, align 8, !tbaa !15
  %11 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 12
  %12 = load i32, ptr %11, align 4, !tbaa !16
  %13 = getelementptr inbounds %class.Pairlists, ptr %8, i64 0, i32 1
  store i32 0, ptr %13, align 8, !tbaa !17
  %14 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 6
  %15 = load <2 x double>, ptr %14, align 8, !tbaa !19
  %16 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 6, i32 2
  %17 = load double, ptr %16, align 8, !tbaa !20
  %18 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 13
  %19 = load double, ptr %18, align 8, !tbaa !21
  %20 = fmul double %19, %19
  %21 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 14
  %22 = load double, ptr %21, align 8, !tbaa !22
  %23 = fmul double %22, %22
  %24 = load double, ptr @_ZN20ComputeNonbondedUtil12dielectric_1E, align 8, !tbaa !19
  %25 = load ptr, ptr @_ZN20ComputeNonbondedUtil7ljTableE, align 8, !tbaa !23
  %26 = load ptr, ptr @_ZN20ComputeNonbondedUtil3molE, align 8, !tbaa !23
  %27 = load ptr, ptr @_ZN20ComputeNonbondedUtil11table_shortE, align 8, !tbaa !23
  %28 = load ptr, ptr @_ZN20ComputeNonbondedUtil10slow_tableE, align 8, !tbaa !23
  %29 = load double, ptr @_ZN20ComputeNonbondedUtil7scalingE, align 8, !tbaa !19
  %30 = load double, ptr @_ZN20ComputeNonbondedUtil7scale14E, align 8, !tbaa !19
  %31 = fsub double 1.000000e+00, %30
  %32 = load double, ptr @_ZN20ComputeNonbondedUtil8r2_deltaE, align 8, !tbaa !19
  %33 = load i32, ptr @_ZN20ComputeNonbondedUtil12r2_delta_expE, align 4, !tbaa !5
  %34 = shl i32 %33, 6
  %35 = add i32 %34, -65472
  %36 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 5
  %37 = load i32, ptr %36, align 8, !tbaa !5
  %38 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 5, i64 1
  %39 = load i32, ptr %38, align 4, !tbaa !5
  %40 = load ptr, ptr %0, align 8, !tbaa !23
  %41 = getelementptr inbounds [2 x ptr], ptr %0, i64 0, i64 1
  %42 = load ptr, ptr %41, align 8, !tbaa !23
  %43 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 1
  %44 = load ptr, ptr %43, align 8, !tbaa !23
  %45 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 1, i64 1
  %46 = load ptr, ptr %45, align 8, !tbaa !23
  %47 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 9
  %48 = load ptr, ptr %47, align 8, !tbaa !24
  %49 = add nsw i32 %39, 5
  %50 = getelementptr inbounds %class.ResizeArray, ptr %48, i64 0, i32 1
  %51 = load ptr, ptr %50, align 8, !tbaa !25
  %52 = getelementptr inbounds %class.ResizeArrayRaw, ptr %51, i64 0, i32 2
  %53 = load i32, ptr %52, align 8, !tbaa !27
  %54 = icmp slt i32 %53, %49
  br i1 %54, label %55, label %93

55:                                               ; preds = %4
  %56 = getelementptr inbounds %class.ResizeArrayRaw, ptr %51, i64 0, i32 3
  %57 = load i32, ptr %56, align 4, !tbaa !30
  %58 = icmp slt i32 %57, %49
  br i1 %58, label %59, label %93

59:                                               ; preds = %55
  %60 = sitofp i32 %57 to float
  %61 = getelementptr inbounds %class.ResizeArrayRaw, ptr %51, i64 0, i32 5
  %62 = load float, ptr %61, align 4, !tbaa !31
  %63 = fmul float %62, %60
  %64 = fptosi float %63 to i32
  %65 = tail call i32 @llvm.smax.i32(i32 %64, i32 %49)
  %66 = sub nsw i32 %65, %57
  %67 = getelementptr inbounds %class.ResizeArrayRaw, ptr %51, i64 0, i32 6
  %68 = load i32, ptr %67, align 8, !tbaa !32
  %69 = icmp slt i32 %66, %68
  %70 = add nsw i32 %68, %57
  %71 = select i1 %69, i32 %70, i32 %65
  %72 = sext i32 %71 to i64
  %73 = shl nsw i64 %72, 1
  %74 = add nsw i64 %73, 31
  %75 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %74) #9
  %76 = getelementptr inbounds i8, ptr %75, i64 31
  %77 = ptrtoint ptr %76 to i64
  %78 = and i64 %77, 31
  %79 = sub nsw i64 0, %78
  %80 = getelementptr inbounds i8, ptr %76, i64 %79
  %81 = load ptr, ptr %51, align 8, !tbaa !33
  %82 = sext i32 %53 to i64
  %83 = shl nsw i64 %82, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %80, ptr align 1 %81, i64 %83, i1 false)
  %84 = icmp eq i32 %57, 0
  br i1 %84, label %90, label %85

85:                                               ; preds = %59
  %86 = getelementptr inbounds %class.ResizeArrayRaw, ptr %51, i64 0, i32 1
  %87 = load ptr, ptr %86, align 8, !tbaa !34
  %88 = icmp eq ptr %87, null
  br i1 %88, label %90, label %89

89:                                               ; preds = %85
  tail call void @_ZdaPv(ptr noundef nonnull %87) #10
  br label %90

90:                                               ; preds = %89, %85, %59
  %91 = getelementptr inbounds %class.ResizeArrayRaw, ptr %51, i64 0, i32 1
  store ptr %75, ptr %91, align 8, !tbaa !34
  store ptr %80, ptr %51, align 8, !tbaa !33
  store i32 %71, ptr %56, align 4, !tbaa !30
  %92 = load ptr, ptr %50, align 8, !tbaa !25
  br label %93

93:                                               ; preds = %4, %55, %90
  %94 = phi ptr [ %51, %4 ], [ %51, %55 ], [ %92, %90 ]
  store i32 %49, ptr %52, align 8, !tbaa !27
  %95 = load ptr, ptr %94, align 8, !tbaa !33
  %96 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %48, i64 0, i32 1, i32 1
  %97 = load ptr, ptr %96, align 8, !tbaa !35
  %98 = getelementptr inbounds %class.ResizeArrayRaw.23, ptr %97, i64 0, i32 2
  %99 = load i32, ptr %98, align 8, !tbaa !37
  %100 = icmp slt i32 %99, %49
  br i1 %100, label %101, label %139

101:                                              ; preds = %93
  %102 = getelementptr inbounds %class.ResizeArrayRaw.23, ptr %97, i64 0, i32 3
  %103 = load i32, ptr %102, align 4, !tbaa !39
  %104 = icmp slt i32 %103, %49
  br i1 %104, label %105, label %139

105:                                              ; preds = %101
  %106 = sitofp i32 %103 to float
  %107 = getelementptr inbounds %class.ResizeArrayRaw.23, ptr %97, i64 0, i32 5
  %108 = load float, ptr %107, align 4, !tbaa !40
  %109 = fmul float %108, %106
  %110 = fptosi float %109 to i32
  %111 = tail call i32 @llvm.smax.i32(i32 %110, i32 %49)
  %112 = sub nsw i32 %111, %103
  %113 = getelementptr inbounds %class.ResizeArrayRaw.23, ptr %97, i64 0, i32 6
  %114 = load i32, ptr %113, align 8, !tbaa !41
  %115 = icmp slt i32 %112, %114
  %116 = add nsw i32 %114, %103
  %117 = select i1 %115, i32 %116, i32 %111
  %118 = sext i32 %117 to i64
  %119 = shl nsw i64 %118, 3
  %120 = add nsw i64 %119, 31
  %121 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %120) #9
  %122 = getelementptr inbounds i8, ptr %121, i64 31
  %123 = ptrtoint ptr %122 to i64
  %124 = and i64 %123, 31
  %125 = sub nsw i64 0, %124
  %126 = getelementptr inbounds i8, ptr %122, i64 %125
  %127 = load ptr, ptr %97, align 8, !tbaa !42
  %128 = sext i32 %99 to i64
  %129 = shl nsw i64 %128, 3
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %126, ptr align 1 %127, i64 %129, i1 false)
  %130 = icmp eq i32 %103, 0
  br i1 %130, label %136, label %131

131:                                              ; preds = %105
  %132 = getelementptr inbounds %class.ResizeArrayRaw.23, ptr %97, i64 0, i32 1
  %133 = load ptr, ptr %132, align 8, !tbaa !43
  %134 = icmp eq ptr %133, null
  br i1 %134, label %136, label %135

135:                                              ; preds = %131
  tail call void @_ZdaPv(ptr noundef nonnull %133) #10
  br label %136

136:                                              ; preds = %135, %131, %105
  %137 = getelementptr inbounds %class.ResizeArrayRaw.23, ptr %97, i64 0, i32 1
  store ptr %121, ptr %137, align 8, !tbaa !43
  store ptr %126, ptr %97, align 8, !tbaa !42
  store i32 %117, ptr %102, align 4, !tbaa !39
  %138 = load ptr, ptr %96, align 8, !tbaa !35
  br label %139

139:                                              ; preds = %93, %101, %136
  %140 = phi ptr [ %97, %93 ], [ %97, %101 ], [ %138, %136 ]
  store i32 %49, ptr %98, align 8, !tbaa !37
  %141 = load ptr, ptr %140, align 8, !tbaa !42
  %142 = getelementptr inbounds i32, ptr %141, i64 1
  %143 = icmp eq i32 %10, 0
  %144 = icmp ne i32 %12, 0
  %145 = select i1 %143, i1 %144, i1 false
  %146 = select i1 %145, i32 0, i32 %49
  %147 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %48, i64 0, i32 2, i32 1
  %148 = load ptr, ptr %147, align 8, !tbaa !25
  %149 = getelementptr inbounds %class.ResizeArrayRaw, ptr %148, i64 0, i32 2
  %150 = load i32, ptr %149, align 8, !tbaa !27
  %151 = icmp slt i32 %150, %146
  br i1 %151, label %152, label %190

152:                                              ; preds = %139
  %153 = getelementptr inbounds %class.ResizeArrayRaw, ptr %148, i64 0, i32 3
  %154 = load i32, ptr %153, align 4, !tbaa !30
  %155 = icmp slt i32 %154, %146
  br i1 %155, label %156, label %190

156:                                              ; preds = %152
  %157 = sitofp i32 %154 to float
  %158 = getelementptr inbounds %class.ResizeArrayRaw, ptr %148, i64 0, i32 5
  %159 = load float, ptr %158, align 4, !tbaa !31
  %160 = fmul float %159, %157
  %161 = fptosi float %160 to i32
  %162 = tail call i32 @llvm.smax.i32(i32 %161, i32 %146)
  %163 = sub nsw i32 %162, %154
  %164 = getelementptr inbounds %class.ResizeArrayRaw, ptr %148, i64 0, i32 6
  %165 = load i32, ptr %164, align 8, !tbaa !32
  %166 = icmp slt i32 %163, %165
  %167 = add nsw i32 %165, %154
  %168 = select i1 %166, i32 %167, i32 %162
  %169 = sext i32 %168 to i64
  %170 = shl nsw i64 %169, 1
  %171 = add nsw i64 %170, 31
  %172 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %171) #9
  %173 = getelementptr inbounds i8, ptr %172, i64 31
  %174 = ptrtoint ptr %173 to i64
  %175 = and i64 %174, 31
  %176 = sub nsw i64 0, %175
  %177 = getelementptr inbounds i8, ptr %173, i64 %176
  %178 = load ptr, ptr %148, align 8, !tbaa !33
  %179 = sext i32 %150 to i64
  %180 = shl nsw i64 %179, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %177, ptr align 1 %178, i64 %180, i1 false)
  %181 = icmp eq i32 %154, 0
  br i1 %181, label %187, label %182

182:                                              ; preds = %156
  %183 = getelementptr inbounds %class.ResizeArrayRaw, ptr %148, i64 0, i32 1
  %184 = load ptr, ptr %183, align 8, !tbaa !34
  %185 = icmp eq ptr %184, null
  br i1 %185, label %187, label %186

186:                                              ; preds = %182
  tail call void @_ZdaPv(ptr noundef nonnull %184) #10
  br label %187

187:                                              ; preds = %186, %182, %156
  %188 = getelementptr inbounds %class.ResizeArrayRaw, ptr %148, i64 0, i32 1
  store ptr %172, ptr %188, align 8, !tbaa !34
  store ptr %177, ptr %148, align 8, !tbaa !33
  store i32 %168, ptr %153, align 4, !tbaa !30
  %189 = load ptr, ptr %147, align 8, !tbaa !25
  br label %190

190:                                              ; preds = %139, %152, %187
  %191 = phi ptr [ %148, %139 ], [ %148, %152 ], [ %189, %187 ]
  store i32 %146, ptr %149, align 8, !tbaa !27
  %192 = load ptr, ptr %191, align 8, !tbaa !33
  %193 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %48, i64 0, i32 3, i32 1
  %194 = load ptr, ptr %193, align 8, !tbaa !25
  %195 = getelementptr inbounds %class.ResizeArrayRaw, ptr %194, i64 0, i32 2
  %196 = load i32, ptr %195, align 8, !tbaa !27
  %197 = icmp slt i32 %196, %146
  br i1 %197, label %198, label %236

198:                                              ; preds = %190
  %199 = getelementptr inbounds %class.ResizeArrayRaw, ptr %194, i64 0, i32 3
  %200 = load i32, ptr %199, align 4, !tbaa !30
  %201 = icmp slt i32 %200, %146
  br i1 %201, label %202, label %236

202:                                              ; preds = %198
  %203 = sitofp i32 %200 to float
  %204 = getelementptr inbounds %class.ResizeArrayRaw, ptr %194, i64 0, i32 5
  %205 = load float, ptr %204, align 4, !tbaa !31
  %206 = fmul float %205, %203
  %207 = fptosi float %206 to i32
  %208 = tail call i32 @llvm.smax.i32(i32 %207, i32 %146)
  %209 = sub nsw i32 %208, %200
  %210 = getelementptr inbounds %class.ResizeArrayRaw, ptr %194, i64 0, i32 6
  %211 = load i32, ptr %210, align 8, !tbaa !32
  %212 = icmp slt i32 %209, %211
  %213 = add nsw i32 %211, %200
  %214 = select i1 %212, i32 %213, i32 %208
  %215 = sext i32 %214 to i64
  %216 = shl nsw i64 %215, 1
  %217 = add nsw i64 %216, 31
  %218 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %217) #9
  %219 = getelementptr inbounds i8, ptr %218, i64 31
  %220 = ptrtoint ptr %219 to i64
  %221 = and i64 %220, 31
  %222 = sub nsw i64 0, %221
  %223 = getelementptr inbounds i8, ptr %219, i64 %222
  %224 = load ptr, ptr %194, align 8, !tbaa !33
  %225 = sext i32 %196 to i64
  %226 = shl nsw i64 %225, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %223, ptr align 1 %224, i64 %226, i1 false)
  %227 = icmp eq i32 %200, 0
  br i1 %227, label %233, label %228

228:                                              ; preds = %202
  %229 = getelementptr inbounds %class.ResizeArrayRaw, ptr %194, i64 0, i32 1
  %230 = load ptr, ptr %229, align 8, !tbaa !34
  %231 = icmp eq ptr %230, null
  br i1 %231, label %233, label %232

232:                                              ; preds = %228
  tail call void @_ZdaPv(ptr noundef nonnull %230) #10
  br label %233

233:                                              ; preds = %232, %228, %202
  %234 = getelementptr inbounds %class.ResizeArrayRaw, ptr %194, i64 0, i32 1
  store ptr %218, ptr %234, align 8, !tbaa !34
  store ptr %223, ptr %194, align 8, !tbaa !33
  store i32 %214, ptr %199, align 4, !tbaa !30
  %235 = load ptr, ptr %193, align 8, !tbaa !25
  br label %236

236:                                              ; preds = %190, %198, %233
  %237 = phi ptr [ %194, %190 ], [ %194, %198 ], [ %235, %233 ]
  store i32 %146, ptr %195, align 8, !tbaa !27
  %238 = load ptr, ptr %237, align 8, !tbaa !33
  %239 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %48, i64 0, i32 4, i32 1
  %240 = load ptr, ptr %239, align 8, !tbaa !25
  %241 = getelementptr inbounds %class.ResizeArrayRaw, ptr %240, i64 0, i32 2
  %242 = load i32, ptr %241, align 8, !tbaa !27
  %243 = icmp slt i32 %242, %146
  br i1 %243, label %244, label %282

244:                                              ; preds = %236
  %245 = getelementptr inbounds %class.ResizeArrayRaw, ptr %240, i64 0, i32 3
  %246 = load i32, ptr %245, align 4, !tbaa !30
  %247 = icmp slt i32 %246, %146
  br i1 %247, label %248, label %282

248:                                              ; preds = %244
  %249 = sitofp i32 %246 to float
  %250 = getelementptr inbounds %class.ResizeArrayRaw, ptr %240, i64 0, i32 5
  %251 = load float, ptr %250, align 4, !tbaa !31
  %252 = fmul float %251, %249
  %253 = fptosi float %252 to i32
  %254 = tail call i32 @llvm.smax.i32(i32 %253, i32 %146)
  %255 = sub nsw i32 %254, %246
  %256 = getelementptr inbounds %class.ResizeArrayRaw, ptr %240, i64 0, i32 6
  %257 = load i32, ptr %256, align 8, !tbaa !32
  %258 = icmp slt i32 %255, %257
  %259 = add nsw i32 %257, %246
  %260 = select i1 %258, i32 %259, i32 %254
  %261 = sext i32 %260 to i64
  %262 = shl nsw i64 %261, 1
  %263 = add nsw i64 %262, 31
  %264 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %263) #9
  %265 = getelementptr inbounds i8, ptr %264, i64 31
  %266 = ptrtoint ptr %265 to i64
  %267 = and i64 %266, 31
  %268 = sub nsw i64 0, %267
  %269 = getelementptr inbounds i8, ptr %265, i64 %268
  %270 = load ptr, ptr %240, align 8, !tbaa !33
  %271 = sext i32 %242 to i64
  %272 = shl nsw i64 %271, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %269, ptr align 1 %270, i64 %272, i1 false)
  %273 = icmp eq i32 %246, 0
  br i1 %273, label %279, label %274

274:                                              ; preds = %248
  %275 = getelementptr inbounds %class.ResizeArrayRaw, ptr %240, i64 0, i32 1
  %276 = load ptr, ptr %275, align 8, !tbaa !34
  %277 = icmp eq ptr %276, null
  br i1 %277, label %279, label %278

278:                                              ; preds = %274
  tail call void @_ZdaPv(ptr noundef nonnull %276) #10
  br label %279

279:                                              ; preds = %278, %274, %248
  %280 = getelementptr inbounds %class.ResizeArrayRaw, ptr %240, i64 0, i32 1
  store ptr %264, ptr %280, align 8, !tbaa !34
  store ptr %269, ptr %240, align 8, !tbaa !33
  store i32 %260, ptr %245, align 4, !tbaa !30
  %281 = load ptr, ptr %239, align 8, !tbaa !25
  br label %282

282:                                              ; preds = %236, %244, %279
  %283 = phi ptr [ %240, %236 ], [ %240, %244 ], [ %281, %279 ]
  store i32 %146, ptr %241, align 8, !tbaa !27
  %284 = load ptr, ptr %283, align 8, !tbaa !33
  %285 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %48, i64 0, i32 5, i32 1
  %286 = load ptr, ptr %285, align 8, !tbaa !25
  %287 = getelementptr inbounds %class.ResizeArrayRaw, ptr %286, i64 0, i32 2
  %288 = load i32, ptr %287, align 8, !tbaa !27
  %289 = icmp slt i32 %288, %146
  br i1 %289, label %290, label %328

290:                                              ; preds = %282
  %291 = getelementptr inbounds %class.ResizeArrayRaw, ptr %286, i64 0, i32 3
  %292 = load i32, ptr %291, align 4, !tbaa !30
  %293 = icmp slt i32 %292, %146
  br i1 %293, label %294, label %328

294:                                              ; preds = %290
  %295 = sitofp i32 %292 to float
  %296 = getelementptr inbounds %class.ResizeArrayRaw, ptr %286, i64 0, i32 5
  %297 = load float, ptr %296, align 4, !tbaa !31
  %298 = fmul float %297, %295
  %299 = fptosi float %298 to i32
  %300 = tail call i32 @llvm.smax.i32(i32 %299, i32 %146)
  %301 = sub nsw i32 %300, %292
  %302 = getelementptr inbounds %class.ResizeArrayRaw, ptr %286, i64 0, i32 6
  %303 = load i32, ptr %302, align 8, !tbaa !32
  %304 = icmp slt i32 %301, %303
  %305 = add nsw i32 %303, %292
  %306 = select i1 %304, i32 %305, i32 %300
  %307 = sext i32 %306 to i64
  %308 = shl nsw i64 %307, 1
  %309 = add nsw i64 %308, 31
  %310 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %309) #9
  %311 = getelementptr inbounds i8, ptr %310, i64 31
  %312 = ptrtoint ptr %311 to i64
  %313 = and i64 %312, 31
  %314 = sub nsw i64 0, %313
  %315 = getelementptr inbounds i8, ptr %311, i64 %314
  %316 = load ptr, ptr %286, align 8, !tbaa !33
  %317 = sext i32 %288 to i64
  %318 = shl nsw i64 %317, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %315, ptr align 1 %316, i64 %318, i1 false)
  %319 = icmp eq i32 %292, 0
  br i1 %319, label %325, label %320

320:                                              ; preds = %294
  %321 = getelementptr inbounds %class.ResizeArrayRaw, ptr %286, i64 0, i32 1
  %322 = load ptr, ptr %321, align 8, !tbaa !34
  %323 = icmp eq ptr %322, null
  br i1 %323, label %325, label %324

324:                                              ; preds = %320
  tail call void @_ZdaPv(ptr noundef nonnull %322) #10
  br label %325

325:                                              ; preds = %324, %320, %294
  %326 = getelementptr inbounds %class.ResizeArrayRaw, ptr %286, i64 0, i32 1
  store ptr %310, ptr %326, align 8, !tbaa !34
  store ptr %315, ptr %286, align 8, !tbaa !33
  store i32 %306, ptr %291, align 4, !tbaa !30
  %327 = load ptr, ptr %285, align 8, !tbaa !25
  br label %328

328:                                              ; preds = %282, %290, %325
  %329 = phi ptr [ %286, %282 ], [ %286, %290 ], [ %327, %325 ]
  store i32 %146, ptr %287, align 8, !tbaa !27
  %330 = load ptr, ptr %329, align 8, !tbaa !33
  %331 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %48, i64 0, i32 6, i32 1
  %332 = load ptr, ptr %331, align 8, !tbaa !25
  %333 = getelementptr inbounds %class.ResizeArrayRaw, ptr %332, i64 0, i32 2
  %334 = load i32, ptr %333, align 8, !tbaa !27
  %335 = icmp slt i32 %334, %146
  br i1 %335, label %336, label %374

336:                                              ; preds = %328
  %337 = getelementptr inbounds %class.ResizeArrayRaw, ptr %332, i64 0, i32 3
  %338 = load i32, ptr %337, align 4, !tbaa !30
  %339 = icmp slt i32 %338, %146
  br i1 %339, label %340, label %374

340:                                              ; preds = %336
  %341 = sitofp i32 %338 to float
  %342 = getelementptr inbounds %class.ResizeArrayRaw, ptr %332, i64 0, i32 5
  %343 = load float, ptr %342, align 4, !tbaa !31
  %344 = fmul float %343, %341
  %345 = fptosi float %344 to i32
  %346 = tail call i32 @llvm.smax.i32(i32 %345, i32 %146)
  %347 = sub nsw i32 %346, %338
  %348 = getelementptr inbounds %class.ResizeArrayRaw, ptr %332, i64 0, i32 6
  %349 = load i32, ptr %348, align 8, !tbaa !32
  %350 = icmp slt i32 %347, %349
  %351 = add nsw i32 %349, %338
  %352 = select i1 %350, i32 %351, i32 %346
  %353 = sext i32 %352 to i64
  %354 = shl nsw i64 %353, 1
  %355 = add nsw i64 %354, 31
  %356 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %355) #9
  %357 = getelementptr inbounds i8, ptr %356, i64 31
  %358 = ptrtoint ptr %357 to i64
  %359 = and i64 %358, 31
  %360 = sub nsw i64 0, %359
  %361 = getelementptr inbounds i8, ptr %357, i64 %360
  %362 = load ptr, ptr %332, align 8, !tbaa !33
  %363 = sext i32 %334 to i64
  %364 = shl nsw i64 %363, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %361, ptr align 1 %362, i64 %364, i1 false)
  %365 = icmp eq i32 %338, 0
  br i1 %365, label %371, label %366

366:                                              ; preds = %340
  %367 = getelementptr inbounds %class.ResizeArrayRaw, ptr %332, i64 0, i32 1
  %368 = load ptr, ptr %367, align 8, !tbaa !34
  %369 = icmp eq ptr %368, null
  br i1 %369, label %371, label %370

370:                                              ; preds = %366
  tail call void @_ZdaPv(ptr noundef nonnull %368) #10
  br label %371

371:                                              ; preds = %370, %366, %340
  %372 = getelementptr inbounds %class.ResizeArrayRaw, ptr %332, i64 0, i32 1
  store ptr %356, ptr %372, align 8, !tbaa !34
  store ptr %361, ptr %332, align 8, !tbaa !33
  store i32 %352, ptr %337, align 4, !tbaa !30
  %373 = load ptr, ptr %331, align 8, !tbaa !25
  br label %374

374:                                              ; preds = %328, %336, %371
  %375 = phi ptr [ %332, %328 ], [ %332, %336 ], [ %373, %371 ]
  store i32 %146, ptr %333, align 8, !tbaa !27
  %376 = load ptr, ptr %375, align 8, !tbaa !33
  %377 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %48, i64 0, i32 15, i32 1
  %378 = load ptr, ptr %377, align 8, !tbaa !25
  %379 = getelementptr inbounds %class.ResizeArrayRaw, ptr %378, i64 0, i32 2
  %380 = load i32, ptr %379, align 8, !tbaa !27
  %381 = icmp slt i32 %380, %146
  br i1 %381, label %382, label %420

382:                                              ; preds = %374
  %383 = getelementptr inbounds %class.ResizeArrayRaw, ptr %378, i64 0, i32 3
  %384 = load i32, ptr %383, align 4, !tbaa !30
  %385 = icmp slt i32 %384, %146
  br i1 %385, label %386, label %420

386:                                              ; preds = %382
  %387 = sitofp i32 %384 to float
  %388 = getelementptr inbounds %class.ResizeArrayRaw, ptr %378, i64 0, i32 5
  %389 = load float, ptr %388, align 4, !tbaa !31
  %390 = fmul float %389, %387
  %391 = fptosi float %390 to i32
  %392 = tail call i32 @llvm.smax.i32(i32 %391, i32 %146)
  %393 = sub nsw i32 %392, %384
  %394 = getelementptr inbounds %class.ResizeArrayRaw, ptr %378, i64 0, i32 6
  %395 = load i32, ptr %394, align 8, !tbaa !32
  %396 = icmp slt i32 %393, %395
  %397 = add nsw i32 %395, %384
  %398 = select i1 %396, i32 %397, i32 %392
  %399 = sext i32 %398 to i64
  %400 = shl nsw i64 %399, 1
  %401 = add nsw i64 %400, 31
  %402 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %401) #9
  %403 = getelementptr inbounds i8, ptr %402, i64 31
  %404 = ptrtoint ptr %403 to i64
  %405 = and i64 %404, 31
  %406 = sub nsw i64 0, %405
  %407 = getelementptr inbounds i8, ptr %403, i64 %406
  %408 = load ptr, ptr %378, align 8, !tbaa !33
  %409 = sext i32 %380 to i64
  %410 = shl nsw i64 %409, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %407, ptr align 1 %408, i64 %410, i1 false)
  %411 = icmp eq i32 %384, 0
  br i1 %411, label %417, label %412

412:                                              ; preds = %386
  %413 = getelementptr inbounds %class.ResizeArrayRaw, ptr %378, i64 0, i32 1
  %414 = load ptr, ptr %413, align 8, !tbaa !34
  %415 = icmp eq ptr %414, null
  br i1 %415, label %417, label %416

416:                                              ; preds = %412
  tail call void @_ZdaPv(ptr noundef nonnull %414) #10
  br label %417

417:                                              ; preds = %416, %412, %386
  %418 = getelementptr inbounds %class.ResizeArrayRaw, ptr %378, i64 0, i32 1
  store ptr %402, ptr %418, align 8, !tbaa !34
  store ptr %407, ptr %378, align 8, !tbaa !33
  store i32 %398, ptr %383, align 4, !tbaa !30
  %419 = load ptr, ptr %377, align 8, !tbaa !25
  br label %420

420:                                              ; preds = %374, %382, %417
  %421 = phi ptr [ %378, %374 ], [ %378, %382 ], [ %419, %417 ]
  store i32 %146, ptr %379, align 8, !tbaa !27
  %422 = load ptr, ptr %421, align 8, !tbaa !33
  %423 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %48, i64 0, i32 16, i32 1
  %424 = load ptr, ptr %423, align 8, !tbaa !25
  %425 = getelementptr inbounds %class.ResizeArrayRaw, ptr %424, i64 0, i32 2
  %426 = load i32, ptr %425, align 8, !tbaa !27
  %427 = icmp slt i32 %426, %146
  br i1 %427, label %428, label %466

428:                                              ; preds = %420
  %429 = getelementptr inbounds %class.ResizeArrayRaw, ptr %424, i64 0, i32 3
  %430 = load i32, ptr %429, align 4, !tbaa !30
  %431 = icmp slt i32 %430, %146
  br i1 %431, label %432, label %466

432:                                              ; preds = %428
  %433 = sitofp i32 %430 to float
  %434 = getelementptr inbounds %class.ResizeArrayRaw, ptr %424, i64 0, i32 5
  %435 = load float, ptr %434, align 4, !tbaa !31
  %436 = fmul float %435, %433
  %437 = fptosi float %436 to i32
  %438 = tail call i32 @llvm.smax.i32(i32 %437, i32 %146)
  %439 = sub nsw i32 %438, %430
  %440 = getelementptr inbounds %class.ResizeArrayRaw, ptr %424, i64 0, i32 6
  %441 = load i32, ptr %440, align 8, !tbaa !32
  %442 = icmp slt i32 %439, %441
  %443 = add nsw i32 %441, %430
  %444 = select i1 %442, i32 %443, i32 %438
  %445 = sext i32 %444 to i64
  %446 = shl nsw i64 %445, 1
  %447 = add nsw i64 %446, 31
  %448 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %447) #9
  %449 = getelementptr inbounds i8, ptr %448, i64 31
  %450 = ptrtoint ptr %449 to i64
  %451 = and i64 %450, 31
  %452 = sub nsw i64 0, %451
  %453 = getelementptr inbounds i8, ptr %449, i64 %452
  %454 = load ptr, ptr %424, align 8, !tbaa !33
  %455 = sext i32 %426 to i64
  %456 = shl nsw i64 %455, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %453, ptr align 1 %454, i64 %456, i1 false)
  %457 = icmp eq i32 %430, 0
  br i1 %457, label %463, label %458

458:                                              ; preds = %432
  %459 = getelementptr inbounds %class.ResizeArrayRaw, ptr %424, i64 0, i32 1
  %460 = load ptr, ptr %459, align 8, !tbaa !34
  %461 = icmp eq ptr %460, null
  br i1 %461, label %463, label %462

462:                                              ; preds = %458
  tail call void @_ZdaPv(ptr noundef nonnull %460) #10
  br label %463

463:                                              ; preds = %462, %458, %432
  %464 = getelementptr inbounds %class.ResizeArrayRaw, ptr %424, i64 0, i32 1
  store ptr %448, ptr %464, align 8, !tbaa !34
  store ptr %453, ptr %424, align 8, !tbaa !33
  store i32 %444, ptr %429, align 4, !tbaa !30
  %465 = load ptr, ptr %423, align 8, !tbaa !25
  br label %466

466:                                              ; preds = %420, %428, %463
  %467 = phi ptr [ %424, %420 ], [ %424, %428 ], [ %465, %463 ]
  store i32 %146, ptr %425, align 8, !tbaa !27
  %468 = load ptr, ptr %467, align 8, !tbaa !33
  br i1 %145, label %610, label %469

469:                                              ; preds = %466
  %470 = icmp sgt i32 %39, 0
  br i1 %470, label %471, label %601

471:                                              ; preds = %469
  %472 = zext i32 %39 to i64
  %473 = and i64 %472, 1
  %474 = icmp eq i32 %39, 1
  br i1 %474, label %507, label %475

475:                                              ; preds = %471
  %476 = and i64 %472, 4294967294
  br label %477

477:                                              ; preds = %502, %475
  %478 = phi i64 [ 0, %475 ], [ %504, %502 ]
  %479 = phi i32 [ 0, %475 ], [ %503, %502 ]
  %480 = phi i64 [ 0, %475 ], [ %505, %502 ]
  %481 = getelementptr inbounds %struct.CompAtom, ptr %42, i64 %478, i32 4
  %482 = load i8, ptr %481, align 1
  %483 = and i8 %482, 7
  %484 = icmp eq i8 %483, 0
  br i1 %484, label %490, label %485

485:                                              ; preds = %477
  %486 = trunc i64 %478 to i16
  %487 = add nsw i32 %479, 1
  %488 = sext i32 %479 to i64
  %489 = getelementptr inbounds i16, ptr %192, i64 %488
  store i16 %486, ptr %489, align 2, !tbaa !44
  br label %490

490:                                              ; preds = %477, %485
  %491 = phi i32 [ %487, %485 ], [ %479, %477 ]
  %492 = or i64 %478, 1
  %493 = getelementptr inbounds %struct.CompAtom, ptr %42, i64 %492, i32 4
  %494 = load i8, ptr %493, align 1
  %495 = and i8 %494, 7
  %496 = icmp eq i8 %495, 0
  br i1 %496, label %502, label %497

497:                                              ; preds = %490
  %498 = trunc i64 %492 to i16
  %499 = add nsw i32 %491, 1
  %500 = sext i32 %491 to i64
  %501 = getelementptr inbounds i16, ptr %192, i64 %500
  store i16 %498, ptr %501, align 2, !tbaa !44
  br label %502

502:                                              ; preds = %497, %490
  %503 = phi i32 [ %499, %497 ], [ %491, %490 ]
  %504 = add nuw nsw i64 %478, 2
  %505 = add i64 %480, 2
  %506 = icmp eq i64 %505, %476
  br i1 %506, label %507, label %477

507:                                              ; preds = %502, %471
  %508 = phi i32 [ undef, %471 ], [ %503, %502 ]
  %509 = phi i64 [ 0, %471 ], [ %504, %502 ]
  %510 = phi i32 [ 0, %471 ], [ %503, %502 ]
  %511 = icmp eq i64 %473, 0
  br i1 %511, label %522, label %512

512:                                              ; preds = %507
  %513 = getelementptr inbounds %struct.CompAtom, ptr %42, i64 %509, i32 4
  %514 = load i8, ptr %513, align 1
  %515 = and i8 %514, 7
  %516 = icmp eq i8 %515, 0
  br i1 %516, label %522, label %517

517:                                              ; preds = %512
  %518 = trunc i64 %509 to i16
  %519 = add nsw i32 %510, 1
  %520 = sext i32 %510 to i64
  %521 = getelementptr inbounds i16, ptr %192, i64 %520
  store i16 %518, ptr %521, align 2, !tbaa !44
  br label %522

522:                                              ; preds = %512, %517, %507
  %523 = phi i32 [ %508, %507 ], [ %519, %517 ], [ %510, %512 ]
  %524 = icmp eq i32 %523, 0
  br i1 %524, label %532, label %525

525:                                              ; preds = %522
  %526 = add nsw i32 %523, -1
  %527 = sext i32 %526 to i64
  %528 = getelementptr inbounds i16, ptr %192, i64 %527
  %529 = load i16, ptr %528, align 2, !tbaa !44
  %530 = sext i32 %523 to i64
  %531 = getelementptr inbounds i16, ptr %192, i64 %530
  store i16 %529, ptr %531, align 2, !tbaa !44
  br label %532

532:                                              ; preds = %525, %522
  %533 = load i32, ptr @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4, !tbaa !5
  %534 = icmp ne i32 %533, 0
  %535 = icmp sgt i32 %523, 0
  %536 = and i1 %534, %535
  br i1 %536, label %537, label %601

537:                                              ; preds = %532
  %538 = zext i32 %523 to i64
  %539 = and i64 %538, 1
  %540 = icmp eq i32 %523, 1
  br i1 %540, label %575, label %541

541:                                              ; preds = %537
  %542 = and i64 %538, 4294967294
  br label %543

543:                                              ; preds = %570, %541
  %544 = phi i64 [ 0, %541 ], [ %572, %570 ]
  %545 = phi i32 [ 0, %541 ], [ %571, %570 ]
  %546 = phi i64 [ 0, %541 ], [ %573, %570 ]
  %547 = getelementptr inbounds i16, ptr %192, i64 %544
  %548 = load i16, ptr %547, align 2, !tbaa !44
  %549 = zext i16 %548 to i64
  %550 = getelementptr inbounds %struct.CompAtomExt, ptr %46, i64 %549
  %551 = load i32, ptr %550, align 4
  %552 = icmp sgt i32 %551, -1
  br i1 %552, label %553, label %557

553:                                              ; preds = %543
  %554 = add nsw i32 %545, 1
  %555 = sext i32 %545 to i64
  %556 = getelementptr inbounds i16, ptr %238, i64 %555
  store i16 %548, ptr %556, align 2, !tbaa !44
  br label %557

557:                                              ; preds = %543, %553
  %558 = phi i32 [ %545, %543 ], [ %554, %553 ]
  %559 = or i64 %544, 1
  %560 = getelementptr inbounds i16, ptr %192, i64 %559
  %561 = load i16, ptr %560, align 2, !tbaa !44
  %562 = zext i16 %561 to i64
  %563 = getelementptr inbounds %struct.CompAtomExt, ptr %46, i64 %562
  %564 = load i32, ptr %563, align 4
  %565 = icmp sgt i32 %564, -1
  br i1 %565, label %566, label %570

566:                                              ; preds = %557
  %567 = add nsw i32 %558, 1
  %568 = sext i32 %558 to i64
  %569 = getelementptr inbounds i16, ptr %238, i64 %568
  store i16 %561, ptr %569, align 2, !tbaa !44
  br label %570

570:                                              ; preds = %566, %557
  %571 = phi i32 [ %558, %557 ], [ %567, %566 ]
  %572 = add nuw nsw i64 %544, 2
  %573 = add i64 %546, 2
  %574 = icmp eq i64 %573, %542
  br i1 %574, label %575, label %543

575:                                              ; preds = %570, %537
  %576 = phi i32 [ undef, %537 ], [ %571, %570 ]
  %577 = phi i64 [ 0, %537 ], [ %572, %570 ]
  %578 = phi i32 [ 0, %537 ], [ %571, %570 ]
  %579 = icmp eq i64 %539, 0
  br i1 %579, label %591, label %580

580:                                              ; preds = %575
  %581 = getelementptr inbounds i16, ptr %192, i64 %577
  %582 = load i16, ptr %581, align 2, !tbaa !44
  %583 = zext i16 %582 to i64
  %584 = getelementptr inbounds %struct.CompAtomExt, ptr %46, i64 %583
  %585 = load i32, ptr %584, align 4
  %586 = icmp sgt i32 %585, -1
  br i1 %586, label %587, label %591

587:                                              ; preds = %580
  %588 = add nsw i32 %578, 1
  %589 = sext i32 %578 to i64
  %590 = getelementptr inbounds i16, ptr %238, i64 %589
  store i16 %582, ptr %590, align 2, !tbaa !44
  br label %591

591:                                              ; preds = %580, %587, %575
  %592 = phi i32 [ %576, %575 ], [ %578, %580 ], [ %588, %587 ]
  %593 = icmp eq i32 %592, 0
  br i1 %593, label %601, label %594

594:                                              ; preds = %591
  %595 = add nsw i32 %592, -1
  %596 = sext i32 %595 to i64
  %597 = getelementptr inbounds i16, ptr %238, i64 %596
  %598 = load i16, ptr %597, align 2, !tbaa !44
  %599 = sext i32 %592 to i64
  %600 = getelementptr inbounds i16, ptr %238, i64 %599
  store i16 %598, ptr %600, align 2, !tbaa !44
  br label %601

601:                                              ; preds = %469, %532, %594, %591
  %602 = phi i32 [ %523, %594 ], [ %523, %591 ], [ %523, %532 ], [ 0, %469 ]
  %603 = phi i32 [ %592, %594 ], [ 0, %591 ], [ 0, %532 ], [ 0, %469 ]
  %604 = load i32, ptr %13, align 8, !tbaa !17
  %605 = add nsw i32 %604, 1
  store i32 %605, ptr %13, align 8, !tbaa !17
  %606 = trunc i32 %37 to i16
  %607 = load ptr, ptr %8, align 8, !tbaa !46
  %608 = sext i32 %604 to i64
  %609 = getelementptr inbounds i16, ptr %607, i64 %608
  store i16 %606, ptr %609, align 2, !tbaa !44
  br label %620

610:                                              ; preds = %466
  %611 = load ptr, ptr %8, align 8, !tbaa !46
  %612 = load i32, ptr %13, align 8, !tbaa !17
  %613 = add nsw i32 %612, 1
  store i32 %613, ptr %13, align 8, !tbaa !17
  %614 = sext i32 %612 to i64
  %615 = getelementptr inbounds i16, ptr %611, i64 %614
  %616 = load i16, ptr %615, align 2, !tbaa !44
  %617 = zext i16 %616 to i32
  %618 = icmp eq i32 %37, %617
  br i1 %618, label %620, label %619

619:                                              ; preds = %610
  tail call void @_Z8NAMD_bugPKc(ptr noundef nonnull @.str)
  br label %620

620:                                              ; preds = %610, %619, %601
  %621 = phi i32 [ 0, %619 ], [ 0, %610 ], [ %602, %601 ]
  %622 = phi i32 [ 0, %619 ], [ 0, %610 ], [ %603, %601 ]
  %623 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 3
  %624 = load ptr, ptr %623, align 8, !tbaa !23
  %625 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 3, i64 1
  %626 = load ptr, ptr %625, align 8, !tbaa !23
  %627 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 4
  %628 = load ptr, ptr %627, align 8, !tbaa !23
  %629 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 4, i64 1
  %630 = load ptr, ptr %629, align 8, !tbaa !23
  %631 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 18
  %632 = load i32, ptr %631, align 4, !tbaa !48
  %633 = add nsw i32 %632, -1
  %634 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 16
  %635 = load i32, ptr %634, align 4, !tbaa !47
  br i1 %145, label %638, label %636

636:                                              ; preds = %620
  %637 = load i32, ptr %13, align 8, !tbaa !17
  br label %645

638:                                              ; preds = %620
  %639 = load ptr, ptr %8, align 8, !tbaa !46
  %640 = load i32, ptr %13, align 8, !tbaa !17
  %641 = sext i32 %640 to i64
  %642 = getelementptr inbounds i16, ptr %639, i64 %641
  %643 = load i16, ptr %642, align 2, !tbaa !44
  %644 = zext i16 %643 to i32
  br label %645

645:                                              ; preds = %638, %636
  %646 = phi i32 [ %640, %638 ], [ %637, %636 ]
  %647 = phi i32 [ %644, %638 ], [ 0, %636 ]
  %648 = add nsw i32 %646, 1
  store i32 %648, ptr %13, align 8
  %649 = icmp slt i32 %647, %37
  br i1 %649, label %650, label %2385

650:                                              ; preds = %645
  %651 = getelementptr inbounds %class.Molecule, ptr %26, i64 0, i32 1
  %652 = getelementptr inbounds %class.Molecule, ptr %26, i64 0, i32 4
  %653 = getelementptr inbounds %class.Molecule, ptr %26, i64 0, i32 2
  %654 = getelementptr inbounds %class.Molecule, ptr %26, i64 0, i32 3
  %655 = ptrtoint ptr %422 to i64
  %656 = add nsw i32 %39, 10
  %657 = getelementptr inbounds %class.Pairlists, ptr %8, i64 0, i32 2
  %658 = getelementptr inbounds i16, ptr %422, i64 1
  %659 = ptrtoint ptr %468 to i64
  %660 = ptrtoint ptr %330 to i64
  %661 = ptrtoint ptr %376 to i64
  %662 = getelementptr inbounds %class.LJTable, ptr %25, i64 0, i32 1
  %663 = getelementptr inbounds %class.LJTable, ptr %25, i64 0, i32 2
  %664 = fneg double %29
  %665 = fsub double 1.000000e+00, %31
  %666 = fmul double %31, 2.000000e+00
  %667 = fmul double %31, 4.000000e+00
  %668 = fmul double %31, 6.000000e+00
  %669 = insertelement <2 x double> poison, double %23, i64 0
  %670 = shufflevector <2 x double> %669, <2 x double> poison, <2 x i32> zeroinitializer
  br label %671

671:                                              ; preds = %650, %2368
  %672 = phi i32 [ 0, %650 ], [ %2376, %2368 ]
  %673 = phi double [ 0.000000e+00, %650 ], [ %2375, %2368 ]
  %674 = phi i32 [ %647, %650 ], [ %2374, %2368 ]
  %675 = phi ptr [ null, %650 ], [ %2373, %2368 ]
  %676 = phi ptr [ null, %650 ], [ %2372, %2368 ]
  %677 = phi ptr [ null, %650 ], [ %2371, %2368 ]
  %678 = phi i32 [ 0, %650 ], [ %2370, %2368 ]
  %679 = phi i32 [ %635, %650 ], [ %2369, %2368 ]
  %680 = phi <2 x double> [ zeroinitializer, %650 ], [ %2377, %2368 ]
  %681 = phi <2 x double> [ zeroinitializer, %650 ], [ %2378, %2368 ]
  %682 = phi <2 x double> [ zeroinitializer, %650 ], [ %2379, %2368 ]
  %683 = phi <2 x double> [ zeroinitializer, %650 ], [ %2380, %2368 ]
  %684 = phi <2 x double> [ zeroinitializer, %650 ], [ %2381, %2368 ]
  %685 = phi <2 x double> [ zeroinitializer, %650 ], [ %2382, %2368 ]
  %686 = phi <2 x double> [ zeroinitializer, %650 ], [ %2383, %2368 ]
  %687 = sext i32 %674 to i64
  %688 = getelementptr inbounds %struct.CompAtom, ptr %40, i64 %687
  %689 = getelementptr inbounds %struct.CompAtomExt, ptr %44, i64 %687
  br i1 %145, label %1755, label %690

690:                                              ; preds = %671
  %691 = getelementptr inbounds %struct.CompAtom, ptr %40, i64 %687, i32 4
  %692 = load i8, ptr %691, align 1
  %693 = lshr i8 %692, 3
  %694 = and i8 %693, 15
  %695 = zext i8 %694 to i32
  %696 = icmp eq i8 %694, 0
  br i1 %696, label %702, label %697

697:                                              ; preds = %690
  %698 = icmp eq i32 %679, 0
  br i1 %698, label %702, label %699

699:                                              ; preds = %697
  %700 = add nsw i32 %679, -1
  %701 = add nsw i32 %674, %695
  br label %2368

702:                                              ; preds = %697, %690
  %703 = phi i32 [ %633, %697 ], [ %679, %690 ]
  %704 = load <2 x double>, ptr %688, align 8, !tbaa !19
  %705 = fadd <2 x double> %15, %704
  %706 = getelementptr inbounds %class.Vector, ptr %688, i64 0, i32 2
  %707 = load double, ptr %706, align 8, !tbaa !49
  %708 = fadd double %17, %707
  %709 = load i32, ptr %689, align 4
  %710 = shl i32 %709, 2
  %711 = ashr exact i32 %710, 2
  %712 = load ptr, ptr %651, align 8, !tbaa !51
  %713 = sext i32 %711 to i64
  %714 = getelementptr inbounds %class.ExclusionCheck, ptr %712, i64 %713
  %715 = load i32, ptr %714, align 8, !tbaa !53
  %716 = getelementptr inbounds %class.ExclusionCheck, ptr %712, i64 %713, i32 1
  %717 = load i32, ptr %716, align 4, !tbaa !55
  %718 = getelementptr inbounds %class.ExclusionCheck, ptr %712, i64 %713, i32 2
  %719 = load ptr, ptr %718, align 8, !tbaa !56
  %720 = icmp eq ptr %719, null
  br i1 %720, label %725, label %721

721:                                              ; preds = %702
  %722 = sext i32 %715 to i64
  %723 = sub nsw i64 0, %722
  %724 = getelementptr inbounds i8, ptr %719, i64 %723
  br label %951

725:                                              ; preds = %702
  %726 = icmp eq ptr %675, null
  br i1 %726, label %814, label %727

727:                                              ; preds = %725
  %728 = load i32, ptr %676, align 4, !tbaa !5
  %729 = icmp slt i32 %728, 1
  br i1 %729, label %777, label %730

730:                                              ; preds = %727
  %731 = add nuw i32 %728, 1
  %732 = zext i32 %731 to i64
  %733 = add nsw i64 %732, -1
  %734 = add nsw i64 %732, -2
  %735 = and i64 %733, 3
  %736 = icmp ult i64 %734, 3
  br i1 %736, label %764, label %737

737:                                              ; preds = %730
  %738 = and i64 %733, -4
  br label %739

739:                                              ; preds = %739, %737
  %740 = phi i64 [ 1, %737 ], [ %761, %739 ]
  %741 = phi i64 [ 0, %737 ], [ %762, %739 ]
  %742 = getelementptr inbounds i32, ptr %676, i64 %740
  %743 = load i32, ptr %742, align 4, !tbaa !5
  %744 = sext i32 %743 to i64
  %745 = getelementptr inbounds i8, ptr %675, i64 %744
  store i8 0, ptr %745, align 1, !tbaa !57
  %746 = add nuw nsw i64 %740, 1
  %747 = getelementptr inbounds i32, ptr %676, i64 %746
  %748 = load i32, ptr %747, align 4, !tbaa !5
  %749 = sext i32 %748 to i64
  %750 = getelementptr inbounds i8, ptr %675, i64 %749
  store i8 0, ptr %750, align 1, !tbaa !57
  %751 = add nuw nsw i64 %740, 2
  %752 = getelementptr inbounds i32, ptr %676, i64 %751
  %753 = load i32, ptr %752, align 4, !tbaa !5
  %754 = sext i32 %753 to i64
  %755 = getelementptr inbounds i8, ptr %675, i64 %754
  store i8 0, ptr %755, align 1, !tbaa !57
  %756 = add nuw nsw i64 %740, 3
  %757 = getelementptr inbounds i32, ptr %676, i64 %756
  %758 = load i32, ptr %757, align 4, !tbaa !5
  %759 = sext i32 %758 to i64
  %760 = getelementptr inbounds i8, ptr %675, i64 %759
  store i8 0, ptr %760, align 1, !tbaa !57
  %761 = add nuw nsw i64 %740, 4
  %762 = add i64 %741, 4
  %763 = icmp eq i64 %762, %738
  br i1 %763, label %764, label %739

764:                                              ; preds = %739, %730
  %765 = phi i64 [ 1, %730 ], [ %761, %739 ]
  %766 = icmp eq i64 %735, 0
  br i1 %766, label %777, label %767

767:                                              ; preds = %764, %767
  %768 = phi i64 [ %774, %767 ], [ %765, %764 ]
  %769 = phi i64 [ %775, %767 ], [ 0, %764 ]
  %770 = getelementptr inbounds i32, ptr %676, i64 %768
  %771 = load i32, ptr %770, align 4, !tbaa !5
  %772 = sext i32 %771 to i64
  %773 = getelementptr inbounds i8, ptr %675, i64 %772
  store i8 0, ptr %773, align 1, !tbaa !57
  %774 = add nuw nsw i64 %768, 1
  %775 = add i64 %769, 1
  %776 = icmp eq i64 %775, %735
  br i1 %776, label %777, label %767, !llvm.loop !112

777:                                              ; preds = %764, %767, %727
  %778 = load i32, ptr %677, align 4, !tbaa !5
  %779 = icmp slt i32 %778, 1
  br i1 %779, label %834, label %780

780:                                              ; preds = %777
  %781 = add nuw i32 %778, 1
  %782 = zext i32 %781 to i64
  %783 = add nsw i64 %782, -1
  %784 = add nsw i64 %782, -2
  %785 = and i64 %783, 3
  %786 = icmp ult i64 %784, 3
  br i1 %786, label %821, label %787

787:                                              ; preds = %780
  %788 = and i64 %783, -4
  br label %789

789:                                              ; preds = %789, %787
  %790 = phi i64 [ 1, %787 ], [ %811, %789 ]
  %791 = phi i64 [ 0, %787 ], [ %812, %789 ]
  %792 = getelementptr inbounds i32, ptr %677, i64 %790
  %793 = load i32, ptr %792, align 4, !tbaa !5
  %794 = sext i32 %793 to i64
  %795 = getelementptr inbounds i8, ptr %675, i64 %794
  store i8 0, ptr %795, align 1, !tbaa !57
  %796 = add nuw nsw i64 %790, 1
  %797 = getelementptr inbounds i32, ptr %677, i64 %796
  %798 = load i32, ptr %797, align 4, !tbaa !5
  %799 = sext i32 %798 to i64
  %800 = getelementptr inbounds i8, ptr %675, i64 %799
  store i8 0, ptr %800, align 1, !tbaa !57
  %801 = add nuw nsw i64 %790, 2
  %802 = getelementptr inbounds i32, ptr %677, i64 %801
  %803 = load i32, ptr %802, align 4, !tbaa !5
  %804 = sext i32 %803 to i64
  %805 = getelementptr inbounds i8, ptr %675, i64 %804
  store i8 0, ptr %805, align 1, !tbaa !57
  %806 = add nuw nsw i64 %790, 3
  %807 = getelementptr inbounds i32, ptr %677, i64 %806
  %808 = load i32, ptr %807, align 4, !tbaa !5
  %809 = sext i32 %808 to i64
  %810 = getelementptr inbounds i8, ptr %675, i64 %809
  store i8 0, ptr %810, align 1, !tbaa !57
  %811 = add nuw nsw i64 %790, 4
  %812 = add i64 %791, 4
  %813 = icmp eq i64 %812, %788
  br i1 %813, label %821, label %789

814:                                              ; preds = %725
  %815 = load i32, ptr %652, align 8, !tbaa !60
  %816 = tail call i32 @llvm.smax.i32(i32 %815, i32 -1)
  %817 = sext i32 %816 to i64
  %818 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %817) #9
  %819 = load i32, ptr %652, align 8, !tbaa !60
  %820 = sext i32 %819 to i64
  tail call void @llvm.memset.p0.i64(ptr nonnull align 1 %818, i8 0, i64 %820, i1 false)
  br label %834

821:                                              ; preds = %789, %780
  %822 = phi i64 [ 1, %780 ], [ %811, %789 ]
  %823 = icmp eq i64 %785, 0
  br i1 %823, label %834, label %824

824:                                              ; preds = %821, %824
  %825 = phi i64 [ %831, %824 ], [ %822, %821 ]
  %826 = phi i64 [ %832, %824 ], [ 0, %821 ]
  %827 = getelementptr inbounds i32, ptr %677, i64 %825
  %828 = load i32, ptr %827, align 4, !tbaa !5
  %829 = sext i32 %828 to i64
  %830 = getelementptr inbounds i8, ptr %675, i64 %829
  store i8 0, ptr %830, align 1, !tbaa !57
  %831 = add nuw nsw i64 %825, 1
  %832 = add i64 %826, 1
  %833 = icmp eq i64 %832, %785
  br i1 %833, label %834, label %824, !llvm.loop !113

834:                                              ; preds = %821, %824, %777, %814
  %835 = phi ptr [ %818, %814 ], [ %675, %777 ], [ %675, %824 ], [ %675, %821 ]
  %836 = load i32, ptr %689, align 4
  %837 = shl i32 %836, 2
  %838 = ashr exact i32 %837, 2
  %839 = load ptr, ptr %653, align 8, !tbaa !62
  %840 = sext i32 %838 to i64
  %841 = getelementptr inbounds ptr, ptr %839, i64 %840
  %842 = load ptr, ptr %841, align 8, !tbaa !23
  %843 = load i32, ptr %842, align 4, !tbaa !5
  %844 = icmp slt i32 %843, 1
  br i1 %844, label %897, label %845

845:                                              ; preds = %834
  %846 = add nuw i32 %843, 1
  %847 = zext i32 %846 to i64
  %848 = add nsw i64 %847, -1
  %849 = add nsw i64 %847, -2
  %850 = and i64 %848, 3
  %851 = icmp ult i64 %849, 3
  br i1 %851, label %879, label %852

852:                                              ; preds = %845
  %853 = and i64 %848, -4
  br label %854

854:                                              ; preds = %854, %852
  %855 = phi i64 [ 1, %852 ], [ %876, %854 ]
  %856 = phi i64 [ 0, %852 ], [ %877, %854 ]
  %857 = getelementptr inbounds i32, ptr %842, i64 %855
  %858 = load i32, ptr %857, align 4, !tbaa !5
  %859 = sext i32 %858 to i64
  %860 = getelementptr inbounds i8, ptr %835, i64 %859
  store i8 1, ptr %860, align 1, !tbaa !57
  %861 = add nuw nsw i64 %855, 1
  %862 = getelementptr inbounds i32, ptr %842, i64 %861
  %863 = load i32, ptr %862, align 4, !tbaa !5
  %864 = sext i32 %863 to i64
  %865 = getelementptr inbounds i8, ptr %835, i64 %864
  store i8 1, ptr %865, align 1, !tbaa !57
  %866 = add nuw nsw i64 %855, 2
  %867 = getelementptr inbounds i32, ptr %842, i64 %866
  %868 = load i32, ptr %867, align 4, !tbaa !5
  %869 = sext i32 %868 to i64
  %870 = getelementptr inbounds i8, ptr %835, i64 %869
  store i8 1, ptr %870, align 1, !tbaa !57
  %871 = add nuw nsw i64 %855, 3
  %872 = getelementptr inbounds i32, ptr %842, i64 %871
  %873 = load i32, ptr %872, align 4, !tbaa !5
  %874 = sext i32 %873 to i64
  %875 = getelementptr inbounds i8, ptr %835, i64 %874
  store i8 1, ptr %875, align 1, !tbaa !57
  %876 = add nuw nsw i64 %855, 4
  %877 = add i64 %856, 4
  %878 = icmp eq i64 %877, %853
  br i1 %878, label %879, label %854

879:                                              ; preds = %854, %845
  %880 = phi i64 [ 1, %845 ], [ %876, %854 ]
  %881 = icmp eq i64 %850, 0
  br i1 %881, label %892, label %882

882:                                              ; preds = %879, %882
  %883 = phi i64 [ %889, %882 ], [ %880, %879 ]
  %884 = phi i64 [ %890, %882 ], [ 0, %879 ]
  %885 = getelementptr inbounds i32, ptr %842, i64 %883
  %886 = load i32, ptr %885, align 4, !tbaa !5
  %887 = sext i32 %886 to i64
  %888 = getelementptr inbounds i8, ptr %835, i64 %887
  store i8 1, ptr %888, align 1, !tbaa !57
  %889 = add nuw nsw i64 %883, 1
  %890 = add i64 %884, 1
  %891 = icmp eq i64 %890, %850
  br i1 %891, label %892, label %882, !llvm.loop !114

892:                                              ; preds = %882, %879
  %893 = load i32, ptr %689, align 4
  %894 = shl i32 %893, 2
  %895 = ashr exact i32 %894, 2
  %896 = sext i32 %895 to i64
  br label %897

897:                                              ; preds = %892, %834
  %898 = phi i64 [ %896, %892 ], [ %840, %834 ]
  %899 = load ptr, ptr %654, align 8, !tbaa !64
  %900 = getelementptr inbounds ptr, ptr %899, i64 %898
  %901 = load ptr, ptr %900, align 8, !tbaa !23
  %902 = load i32, ptr %901, align 4, !tbaa !5
  %903 = icmp slt i32 %902, 1
  br i1 %903, label %951, label %904

904:                                              ; preds = %897
  %905 = add nuw i32 %902, 1
  %906 = zext i32 %905 to i64
  %907 = add nsw i64 %906, -1
  %908 = add nsw i64 %906, -2
  %909 = and i64 %907, 3
  %910 = icmp ult i64 %908, 3
  br i1 %910, label %938, label %911

911:                                              ; preds = %904
  %912 = and i64 %907, -4
  br label %913

913:                                              ; preds = %913, %911
  %914 = phi i64 [ 1, %911 ], [ %935, %913 ]
  %915 = phi i64 [ 0, %911 ], [ %936, %913 ]
  %916 = getelementptr inbounds i32, ptr %901, i64 %914
  %917 = load i32, ptr %916, align 4, !tbaa !5
  %918 = sext i32 %917 to i64
  %919 = getelementptr inbounds i8, ptr %835, i64 %918
  store i8 2, ptr %919, align 1, !tbaa !57
  %920 = add nuw nsw i64 %914, 1
  %921 = getelementptr inbounds i32, ptr %901, i64 %920
  %922 = load i32, ptr %921, align 4, !tbaa !5
  %923 = sext i32 %922 to i64
  %924 = getelementptr inbounds i8, ptr %835, i64 %923
  store i8 2, ptr %924, align 1, !tbaa !57
  %925 = add nuw nsw i64 %914, 2
  %926 = getelementptr inbounds i32, ptr %901, i64 %925
  %927 = load i32, ptr %926, align 4, !tbaa !5
  %928 = sext i32 %927 to i64
  %929 = getelementptr inbounds i8, ptr %835, i64 %928
  store i8 2, ptr %929, align 1, !tbaa !57
  %930 = add nuw nsw i64 %914, 3
  %931 = getelementptr inbounds i32, ptr %901, i64 %930
  %932 = load i32, ptr %931, align 4, !tbaa !5
  %933 = sext i32 %932 to i64
  %934 = getelementptr inbounds i8, ptr %835, i64 %933
  store i8 2, ptr %934, align 1, !tbaa !57
  %935 = add nuw nsw i64 %914, 4
  %936 = add i64 %915, 4
  %937 = icmp eq i64 %936, %912
  br i1 %937, label %938, label %913

938:                                              ; preds = %913, %904
  %939 = phi i64 [ 1, %904 ], [ %935, %913 ]
  %940 = icmp eq i64 %909, 0
  br i1 %940, label %951, label %941

941:                                              ; preds = %938, %941
  %942 = phi i64 [ %948, %941 ], [ %939, %938 ]
  %943 = phi i64 [ %949, %941 ], [ 0, %938 ]
  %944 = getelementptr inbounds i32, ptr %901, i64 %942
  %945 = load i32, ptr %944, align 4, !tbaa !5
  %946 = sext i32 %945 to i64
  %947 = getelementptr inbounds i8, ptr %835, i64 %946
  store i8 2, ptr %947, align 1, !tbaa !57
  %948 = add nuw nsw i64 %942, 1
  %949 = add i64 %943, 1
  %950 = icmp eq i64 %949, %909
  br i1 %950, label %951, label %941, !llvm.loop !115

951:                                              ; preds = %938, %941, %897, %721
  %952 = phi ptr [ %724, %721 ], [ %835, %897 ], [ %835, %941 ], [ %835, %938 ]
  %953 = phi ptr [ %677, %721 ], [ %901, %897 ], [ %901, %941 ], [ %901, %938 ]
  %954 = phi ptr [ %676, %721 ], [ %842, %897 ], [ %842, %941 ], [ %842, %938 ]
  %955 = phi ptr [ %675, %721 ], [ %835, %897 ], [ %835, %941 ], [ %835, %938 ]
  %956 = load i8, ptr %691, align 1
  %957 = and i8 %956, 7
  %958 = icmp eq i8 %957, 0
  %959 = load i32, ptr @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4, !tbaa !5
  br i1 %958, label %1142, label %960

960:                                              ; preds = %951
  %961 = icmp eq i32 %959, 0
  br i1 %961, label %968, label %962

962:                                              ; preds = %960
  %963 = load i32, ptr %689, align 4
  %964 = freeze i32 %963
  %965 = icmp slt i32 %964, 0
  %966 = select i1 %965, ptr %238, ptr %192
  %967 = select i1 %965, i32 %622, i32 %621
  br label %968

968:                                              ; preds = %962, %960
  %969 = phi ptr [ %192, %960 ], [ %966, %962 ]
  %970 = phi i32 [ %621, %960 ], [ %967, %962 ]
  %971 = icmp sgt i32 %970, 0
  br i1 %971, label %972, label %1123

972:                                              ; preds = %968
  %973 = icmp ugt i32 %970, 6
  br i1 %973, label %974, label %1058

974:                                              ; preds = %972
  %975 = add nsw i32 %970, -2
  %976 = getelementptr inbounds i16, ptr %969, i64 1
  %977 = load i16, ptr %976, align 2, !tbaa !44
  %978 = zext i16 %977 to i64
  %979 = getelementptr inbounds %struct.CompAtom, ptr %42, i64 %978
  %980 = getelementptr inbounds %class.Vector, ptr %979, i64 0, i32 2
  %981 = load double, ptr %980, align 8, !tbaa !49
  %982 = load i16, ptr %969, align 2, !tbaa !44
  %983 = zext i16 %982 to i64
  %984 = getelementptr inbounds %struct.CompAtom, ptr %42, i64 %983
  %985 = getelementptr inbounds %class.Vector, ptr %984, i64 0, i32 2
  %986 = load double, ptr %985, align 8, !tbaa !49
  %987 = getelementptr inbounds %class.Vector, ptr %979, i64 0, i32 1
  %988 = load double, ptr %987, align 8, !tbaa !66
  %989 = getelementptr inbounds %class.Vector, ptr %984, i64 0, i32 1
  %990 = load double, ptr %989, align 8, !tbaa !66
  %991 = load double, ptr %979, align 8, !tbaa !67
  %992 = load double, ptr %984, align 8, !tbaa !67
  %993 = zext i32 %975 to i64
  %994 = insertelement <2 x double> poison, double %981, i64 0
  %995 = insertelement <2 x double> %994, double %986, i64 1
  %996 = insertelement <2 x double> poison, double %988, i64 0
  %997 = insertelement <2 x double> %996, double %990, i64 1
  %998 = insertelement <2 x double> poison, double %991, i64 0
  %999 = insertelement <2 x double> %998, double %992, i64 1
  %1000 = insertelement <2 x double> poison, double %708, i64 0
  %1001 = shufflevector <2 x double> %1000, <2 x double> poison, <2 x i32> zeroinitializer
  %1002 = shufflevector <2 x double> %705, <2 x double> poison, <2 x i32> <i32 1, i32 1>
  %1003 = shufflevector <2 x double> %705, <2 x double> poison, <2 x i32> zeroinitializer
  br label %1004

1004:                                             ; preds = %974, %1004
  %1005 = phi i64 [ 2, %974 ], [ %1048, %1004 ]
  %1006 = phi i32 [ 0, %974 ], [ %1047, %1004 ]
  %1007 = phi i16 [ %982, %974 ], [ %1014, %1004 ]
  %1008 = phi i16 [ %977, %974 ], [ %1017, %1004 ]
  %1009 = phi <2 x double> [ %995, %974 ], [ %1051, %1004 ]
  %1010 = phi <2 x double> [ %997, %974 ], [ %1053, %1004 ]
  %1011 = phi <2 x double> [ %999, %974 ], [ %1055, %1004 ]
  %1012 = fsub <2 x double> %1001, %1009
  %1013 = getelementptr inbounds i16, ptr %969, i64 %1005
  %1014 = load i16, ptr %1013, align 2, !tbaa !44
  %1015 = or i64 %1005, 1
  %1016 = getelementptr inbounds i16, ptr %969, i64 %1015
  %1017 = load i16, ptr %1016, align 2, !tbaa !44
  %1018 = zext i16 %1014 to i64
  %1019 = getelementptr inbounds %struct.CompAtom, ptr %42, i64 %1018
  %1020 = load double, ptr %1019, align 8, !tbaa !67
  %1021 = zext i16 %1017 to i64
  %1022 = getelementptr inbounds %struct.CompAtom, ptr %42, i64 %1021
  %1023 = load double, ptr %1022, align 8, !tbaa !67
  %1024 = getelementptr inbounds %class.Vector, ptr %1019, i64 0, i32 1
  %1025 = load double, ptr %1024, align 8, !tbaa !66
  %1026 = getelementptr inbounds %class.Vector, ptr %1022, i64 0, i32 1
  %1027 = load double, ptr %1026, align 8, !tbaa !66
  %1028 = getelementptr inbounds %class.Vector, ptr %1019, i64 0, i32 2
  %1029 = load double, ptr %1028, align 8, !tbaa !49
  %1030 = getelementptr inbounds %class.Vector, ptr %1022, i64 0, i32 2
  %1031 = load double, ptr %1030, align 8, !tbaa !49
  %1032 = fsub <2 x double> %1003, %1011
  %1033 = fmul <2 x double> %1032, %1032
  %1034 = fsub <2 x double> %1002, %1010
  %1035 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %1034, <2 x double> %1034, <2 x double> %1033)
  %1036 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %1012, <2 x double> %1012, <2 x double> %1035)
  %1037 = fcmp olt <2 x double> %1036, %670
  %1038 = zext i32 %1006 to i64
  %1039 = getelementptr inbounds i16, ptr %284, i64 %1038
  store i16 %1007, ptr %1039, align 2, !tbaa !44
  %1040 = extractelement <2 x i1> %1037, i64 1
  %1041 = zext i1 %1040 to i32
  %1042 = add nuw nsw i32 %1006, %1041
  %1043 = zext i32 %1042 to i64
  %1044 = getelementptr inbounds i16, ptr %284, i64 %1043
  store i16 %1008, ptr %1044, align 2, !tbaa !44
  %1045 = extractelement <2 x i1> %1037, i64 0
  %1046 = zext i1 %1045 to i32
  %1047 = add i32 %1042, %1046
  %1048 = add nuw nsw i64 %1005, 2
  %1049 = icmp ult i64 %1048, %993
  %1050 = insertelement <2 x double> poison, double %1031, i64 0
  %1051 = insertelement <2 x double> %1050, double %1029, i64 1
  %1052 = insertelement <2 x double> poison, double %1027, i64 0
  %1053 = insertelement <2 x double> %1052, double %1025, i64 1
  %1054 = insertelement <2 x double> poison, double %1023, i64 0
  %1055 = insertelement <2 x double> %1054, double %1020, i64 1
  br i1 %1049, label %1004, label %1056

1056:                                             ; preds = %1004
  %1057 = trunc i64 %1005 to i32
  br label %1058

1058:                                             ; preds = %1056, %972
  %1059 = phi i32 [ %1047, %1056 ], [ 0, %972 ]
  %1060 = phi i32 [ %1057, %1056 ], [ 0, %972 ]
  %1061 = icmp slt i32 %1060, %970
  br i1 %1061, label %1062, label %1067

1062:                                             ; preds = %1058
  %1063 = zext i32 %1060 to i64
  %1064 = zext i32 %970 to i64
  %1065 = extractelement <2 x double> %705, i64 0
  %1066 = extractelement <2 x double> %705, i64 1
  br label %1072

1067:                                             ; preds = %1095, %1058
  %1068 = phi i32 [ %1059, %1058 ], [ %1096, %1095 ]
  %1069 = icmp sgt i32 %1068, 0
  br i1 %1069, label %1070, label %1123

1070:                                             ; preds = %1067
  %1071 = zext i32 %1068 to i64
  br label %1099

1072:                                             ; preds = %1062, %1095
  %1073 = phi i64 [ %1063, %1062 ], [ %1097, %1095 ]
  %1074 = phi i32 [ %1059, %1062 ], [ %1096, %1095 ]
  %1075 = getelementptr inbounds i16, ptr %969, i64 %1073
  %1076 = load i16, ptr %1075, align 2, !tbaa !44
  %1077 = zext i16 %1076 to i64
  %1078 = getelementptr inbounds %struct.CompAtom, ptr %42, i64 %1077
  %1079 = load double, ptr %1078, align 8, !tbaa !67
  %1080 = getelementptr inbounds %class.Vector, ptr %1078, i64 0, i32 1
  %1081 = load double, ptr %1080, align 8, !tbaa !66
  %1082 = getelementptr inbounds %class.Vector, ptr %1078, i64 0, i32 2
  %1083 = load double, ptr %1082, align 8, !tbaa !49
  %1084 = fsub double %1065, %1079
  %1085 = fmul double %1084, %1084
  %1086 = fsub double %1066, %1081
  %1087 = tail call double @llvm.fmuladd.f64(double %1086, double %1086, double %1085)
  %1088 = fsub double %708, %1083
  %1089 = tail call double @llvm.fmuladd.f64(double %1088, double %1088, double %1087)
  %1090 = fcmp ugt double %1089, %23
  br i1 %1090, label %1095, label %1091

1091:                                             ; preds = %1072
  %1092 = add nsw i32 %1074, 1
  %1093 = sext i32 %1074 to i64
  %1094 = getelementptr inbounds i16, ptr %284, i64 %1093
  store i16 %1076, ptr %1094, align 2, !tbaa !44
  br label %1095

1095:                                             ; preds = %1091, %1072
  %1096 = phi i32 [ %1092, %1091 ], [ %1074, %1072 ]
  %1097 = add nuw nsw i64 %1073, 1
  %1098 = icmp eq i64 %1097, %1064
  br i1 %1098, label %1067, label %1072

1099:                                             ; preds = %1070, %1116
  %1100 = phi i64 [ 0, %1070 ], [ %1119, %1116 ]
  %1101 = phi ptr [ %422, %1070 ], [ %1118, %1116 ]
  %1102 = getelementptr inbounds i16, ptr %284, i64 %1100
  %1103 = load i16, ptr %1102, align 2, !tbaa !44
  %1104 = zext i16 %1103 to i64
  %1105 = getelementptr inbounds %struct.CompAtom, ptr %42, i64 %1104, i32 4
  %1106 = load i8, ptr %1105, align 1
  %1107 = and i8 %1106, 7
  store i16 %1103, ptr %1101, align 2, !tbaa !44
  %1108 = getelementptr inbounds i16, ptr %1101, i64 1
  %1109 = insertelement <2 x i16> poison, i16 %1103, i64 0
  %1110 = shufflevector <2 x i16> %1109, <2 x i16> poison, <2 x i32> zeroinitializer
  %1111 = add <2 x i16> %1110, <i16 1, i16 2>
  store <2 x i16> %1111, ptr %1108, align 2, !tbaa !44
  %1112 = icmp ult i8 %1107, 4
  br i1 %1112, label %1116, label %1113

1113:                                             ; preds = %1099
  %1114 = add <2 x i16> %1110, <i16 3, i16 4>
  %1115 = getelementptr inbounds i16, ptr %1101, i64 3
  store <2 x i16> %1114, ptr %1115, align 2, !tbaa !44
  br label %1116

1116:                                             ; preds = %1113, %1099
  %1117 = zext i8 %1107 to i64
  %1118 = getelementptr inbounds i16, ptr %1101, i64 %1117
  %1119 = add nuw nsw i64 %1100, 1
  %1120 = icmp eq i64 %1119, %1071
  br i1 %1120, label %1121, label %1099

1121:                                             ; preds = %1116
  %1122 = ptrtoint ptr %1118 to i64
  br label %1123

1123:                                             ; preds = %1121, %1067, %968
  %1124 = phi i64 [ %1122, %1121 ], [ %655, %1067 ], [ %655, %968 ]
  %1125 = sub i64 %1124, %655
  %1126 = lshr exact i64 %1125, 1
  %1127 = trunc i64 %1126 to i32
  %1128 = icmp eq i32 %1127, 0
  br i1 %1128, label %1129, label %1134

1129:                                             ; preds = %1123
  %1130 = load i8, ptr %691, align 1
  %1131 = and i8 %1130, 7
  %1132 = zext i8 %1131 to i32
  %1133 = add nsw i32 %674, %1132
  br label %2368

1134:                                             ; preds = %1123
  %1135 = shl i64 %1125, 31
  %1136 = add i64 %1135, -4294967296
  %1137 = ashr i64 %1136, 32
  %1138 = getelementptr inbounds i16, ptr %422, i64 %1137
  %1139 = load i16, ptr %1138, align 2, !tbaa !44
  %1140 = ashr i64 %1135, 32
  %1141 = getelementptr inbounds i16, ptr %422, i64 %1140
  store i16 %1139, ptr %1141, align 2, !tbaa !44
  br label %1142

1142:                                             ; preds = %1134, %951
  %1143 = phi i32 [ %1127, %1134 ], [ %678, %951 ]
  %1144 = icmp eq i32 %959, 0
  br i1 %1144, label %1149, label %1145

1145:                                             ; preds = %1142
  %1146 = load i32, ptr %689, align 4
  %1147 = and i32 %1146, 1073741824
  %1148 = icmp ne i32 %1147, 0
  br label %1149

1149:                                             ; preds = %1145, %1142
  %1150 = phi i1 [ false, %1142 ], [ %1148, %1145 ]
  %1151 = load i32, ptr %13, align 8, !tbaa !17
  %1152 = add nsw i32 %656, %1151
  %1153 = load i32, ptr %657, align 4, !tbaa !68
  %1154 = icmp sgt i32 %1153, %1152
  br i1 %1154, label %1170, label %1155

1155:                                             ; preds = %1149, %1155
  %1156 = phi i32 [ %1158, %1155 ], [ %1153, %1149 ]
  %1157 = ashr i32 %1156, 1
  %1158 = add nsw i32 %1157, %1156
  %1159 = icmp sgt i32 %1158, %1152
  br i1 %1159, label %1160, label %1155

1160:                                             ; preds = %1155
  %1161 = sext i32 %1158 to i64
  %1162 = icmp slt i32 %1158, 0
  %1163 = shl nsw i64 %1161, 1
  %1164 = select i1 %1162, i64 -1, i64 %1163
  %1165 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %1164) #9
  %1166 = load ptr, ptr %8, align 8, !tbaa !46
  %1167 = sext i32 %1151 to i64
  %1168 = shl nsw i64 %1167, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 2 %1165, ptr align 2 %1166, i64 %1168, i1 false)
  %1169 = icmp eq ptr %1166, null
  br i1 %1169, label %1174, label %1172

1170:                                             ; preds = %1149
  %1171 = load ptr, ptr %8, align 8, !tbaa !46
  br label %1176

1172:                                             ; preds = %1160
  tail call void @_ZdaPv(ptr noundef nonnull %1166) #10
  %1173 = load i32, ptr %13, align 8, !tbaa !17
  br label %1174

1174:                                             ; preds = %1172, %1160
  %1175 = phi i32 [ %1173, %1172 ], [ %1151, %1160 ]
  store ptr %1165, ptr %8, align 8, !tbaa !46
  store i32 %1158, ptr %657, align 4, !tbaa !68
  br label %1176

1176:                                             ; preds = %1170, %1174
  %1177 = phi i32 [ %1151, %1170 ], [ %1175, %1174 ]
  %1178 = phi ptr [ %1171, %1170 ], [ %1165, %1174 ]
  %1179 = ptrtoint ptr %1178 to i64
  %1180 = add nsw i32 %1177, 1
  %1181 = sext i32 %1180 to i64
  %1182 = getelementptr inbounds i16, ptr %1178, i64 %1181
  %1183 = icmp sgt i32 %1143, 0
  br i1 %1150, label %1184, label %1231

1184:                                             ; preds = %1176
  br i1 %1183, label %1185, label %1391

1185:                                             ; preds = %1184
  %1186 = zext i32 %1143 to i64
  %1187 = extractelement <2 x double> %705, i64 0
  %1188 = extractelement <2 x double> %705, i64 1
  br label %1189

1189:                                             ; preds = %1185, %1226
  %1190 = phi i64 [ 0, %1185 ], [ %1229, %1226 ]
  %1191 = phi ptr [ %468, %1185 ], [ %1228, %1226 ]
  %1192 = phi ptr [ %1182, %1185 ], [ %1227, %1226 ]
  %1193 = getelementptr inbounds i16, ptr %422, i64 %1190
  %1194 = load i16, ptr %1193, align 2, !tbaa !44
  %1195 = zext i16 %1194 to i64
  %1196 = getelementptr inbounds %struct.CompAtomExt, ptr %46, i64 %1195
  %1197 = load i32, ptr %1196, align 4
  %1198 = and i32 %1197, 1073741824
  %1199 = icmp eq i32 %1198, 0
  br i1 %1199, label %1200, label %1226

1200:                                             ; preds = %1189
  %1201 = getelementptr inbounds %struct.CompAtom, ptr %42, i64 %1195
  %1202 = getelementptr inbounds %class.Vector, ptr %1201, i64 0, i32 2
  %1203 = load double, ptr %1202, align 8, !tbaa !49
  %1204 = fsub double %708, %1203
  %1205 = getelementptr inbounds %class.Vector, ptr %1201, i64 0, i32 1
  %1206 = load double, ptr %1205, align 8, !tbaa !66
  %1207 = fsub double %1188, %1206
  %1208 = load double, ptr %1201, align 8, !tbaa !67
  %1209 = fsub double %1187, %1208
  %1210 = fmul double %1209, %1209
  %1211 = tail call double @llvm.fmuladd.f64(double %1207, double %1207, double %1210)
  %1212 = tail call double @llvm.fmuladd.f64(double %1204, double %1204, double %1211)
  %1213 = fcmp ugt double %1212, %20
  br i1 %1213, label %1226, label %1214

1214:                                             ; preds = %1200
  %1215 = shl i32 %1197, 2
  %1216 = ashr exact i32 %1215, 2
  %1217 = icmp slt i32 %1216, %715
  %1218 = icmp sgt i32 %1216, %717
  %1219 = select i1 %1217, i1 true, i1 %1218
  %1220 = select i1 %1219, ptr %1192, ptr %1191
  %1221 = zext i1 %1219 to i64
  %1222 = getelementptr inbounds i16, ptr %1192, i64 %1221
  %1223 = xor i1 %1219, true
  %1224 = zext i1 %1223 to i64
  %1225 = getelementptr inbounds i16, ptr %1191, i64 %1224
  store i16 %1194, ptr %1220, align 2, !tbaa !44
  br label %1226

1226:                                             ; preds = %1214, %1200, %1189
  %1227 = phi ptr [ %1192, %1189 ], [ %1192, %1200 ], [ %1222, %1214 ]
  %1228 = phi ptr [ %1191, %1189 ], [ %1191, %1200 ], [ %1225, %1214 ]
  %1229 = add nuw nsw i64 %1190, 1
  %1230 = icmp eq i64 %1229, %1186
  br i1 %1230, label %1391, label %1189

1231:                                             ; preds = %1176
  br i1 %1183, label %1232, label %1391

1232:                                             ; preds = %1231
  %1233 = icmp ugt i32 %1143, 6
  br i1 %1233, label %1234, label %1342

1234:                                             ; preds = %1232
  %1235 = add nsw i32 %1143, -2
  %1236 = load i16, ptr %422, align 2, !tbaa !44
  %1237 = zext i16 %1236 to i64
  %1238 = getelementptr inbounds %struct.CompAtomExt, ptr %46, i64 %1237
  %1239 = load i32, ptr %1238, align 4
  %1240 = load i16, ptr %658, align 2, !tbaa !44
  %1241 = zext i16 %1240 to i64
  %1242 = getelementptr inbounds %struct.CompAtom, ptr %42, i64 %1241
  %1243 = getelementptr inbounds %class.Vector, ptr %1242, i64 0, i32 2
  %1244 = load double, ptr %1243, align 8, !tbaa !49
  %1245 = getelementptr inbounds %struct.CompAtom, ptr %42, i64 %1237
  %1246 = getelementptr inbounds %class.Vector, ptr %1245, i64 0, i32 2
  %1247 = load double, ptr %1246, align 8, !tbaa !49
  %1248 = getelementptr inbounds %class.Vector, ptr %1242, i64 0, i32 1
  %1249 = load double, ptr %1248, align 8, !tbaa !66
  %1250 = getelementptr inbounds %class.Vector, ptr %1245, i64 0, i32 1
  %1251 = load double, ptr %1250, align 8, !tbaa !66
  %1252 = load double, ptr %1242, align 8, !tbaa !67
  %1253 = load double, ptr %1245, align 8, !tbaa !67
  %1254 = zext i32 %1235 to i64
  %1255 = extractelement <2 x double> %705, i64 0
  %1256 = extractelement <2 x double> %705, i64 1
  br label %1257

1257:                                             ; preds = %1234, %1335
  %1258 = phi i64 [ 2, %1234 ], [ %1338, %1335 ]
  %1259 = phi i64 [ %1241, %1234 ], [ %1295, %1335 ]
  %1260 = phi i32 [ %1239, %1234 ], [ %1323, %1335 ]
  %1261 = phi ptr [ %468, %1234 ], [ %1337, %1335 ]
  %1262 = phi ptr [ %1182, %1234 ], [ %1336, %1335 ]
  %1263 = phi i16 [ %1236, %1234 ], [ %1288, %1335 ]
  %1264 = phi i16 [ %1240, %1234 ], [ %1291, %1335 ]
  %1265 = phi double [ %1253, %1234 ], [ %1294, %1335 ]
  %1266 = phi double [ %1252, %1234 ], [ %1297, %1335 ]
  %1267 = phi double [ %1251, %1234 ], [ %1299, %1335 ]
  %1268 = phi double [ %1249, %1234 ], [ %1301, %1335 ]
  %1269 = phi double [ %1247, %1234 ], [ %1303, %1335 ]
  %1270 = phi double [ %1244, %1234 ], [ %1305, %1335 ]
  %1271 = getelementptr inbounds %struct.CompAtomExt, ptr %46, i64 %1259
  %1272 = load i32, ptr %1271, align 4
  %1273 = shl i32 %1272, 2
  %1274 = ashr exact i32 %1273, 2
  %1275 = fsub double %1255, %1265
  %1276 = fsub double %1255, %1266
  %1277 = fmul double %1275, %1275
  %1278 = fmul double %1276, %1276
  %1279 = fsub double %1256, %1267
  %1280 = fsub double %1256, %1268
  %1281 = tail call double @llvm.fmuladd.f64(double %1279, double %1279, double %1277)
  %1282 = tail call double @llvm.fmuladd.f64(double %1280, double %1280, double %1278)
  %1283 = fsub double %708, %1269
  %1284 = fsub double %708, %1270
  %1285 = tail call double @llvm.fmuladd.f64(double %1283, double %1283, double %1281)
  %1286 = tail call double @llvm.fmuladd.f64(double %1284, double %1284, double %1282)
  %1287 = getelementptr inbounds i16, ptr %422, i64 %1258
  %1288 = load i16, ptr %1287, align 2, !tbaa !44
  %1289 = or i64 %1258, 1
  %1290 = getelementptr inbounds i16, ptr %422, i64 %1289
  %1291 = load i16, ptr %1290, align 2, !tbaa !44
  %1292 = zext i16 %1288 to i64
  %1293 = getelementptr inbounds %struct.CompAtom, ptr %42, i64 %1292
  %1294 = load double, ptr %1293, align 8, !tbaa !67
  %1295 = zext i16 %1291 to i64
  %1296 = getelementptr inbounds %struct.CompAtom, ptr %42, i64 %1295
  %1297 = load double, ptr %1296, align 8, !tbaa !67
  %1298 = getelementptr inbounds %class.Vector, ptr %1293, i64 0, i32 1
  %1299 = load double, ptr %1298, align 8, !tbaa !66
  %1300 = getelementptr inbounds %class.Vector, ptr %1296, i64 0, i32 1
  %1301 = load double, ptr %1300, align 8, !tbaa !66
  %1302 = getelementptr inbounds %class.Vector, ptr %1293, i64 0, i32 2
  %1303 = load double, ptr %1302, align 8, !tbaa !49
  %1304 = getelementptr inbounds %class.Vector, ptr %1296, i64 0, i32 2
  %1305 = load double, ptr %1304, align 8, !tbaa !49
  %1306 = fcmp ugt double %1285, %20
  br i1 %1306, label %1319, label %1307

1307:                                             ; preds = %1257
  %1308 = shl i32 %1260, 2
  %1309 = ashr exact i32 %1308, 2
  %1310 = icmp slt i32 %1309, %715
  %1311 = icmp sgt i32 %1309, %717
  %1312 = select i1 %1310, i1 true, i1 %1311
  %1313 = select i1 %1312, ptr %1262, ptr %1261
  %1314 = zext i1 %1312 to i64
  %1315 = getelementptr inbounds i16, ptr %1262, i64 %1314
  %1316 = xor i1 %1312, true
  %1317 = zext i1 %1316 to i64
  %1318 = getelementptr inbounds i16, ptr %1261, i64 %1317
  store i16 %1263, ptr %1313, align 2, !tbaa !44
  br label %1319

1319:                                             ; preds = %1307, %1257
  %1320 = phi ptr [ %1262, %1257 ], [ %1315, %1307 ]
  %1321 = phi ptr [ %1261, %1257 ], [ %1318, %1307 ]
  %1322 = getelementptr inbounds %struct.CompAtomExt, ptr %46, i64 %1292
  %1323 = load i32, ptr %1322, align 4
  %1324 = fcmp ugt double %1286, %20
  br i1 %1324, label %1335, label %1325

1325:                                             ; preds = %1319
  %1326 = icmp slt i32 %1274, %715
  %1327 = icmp sgt i32 %1274, %717
  %1328 = select i1 %1326, i1 true, i1 %1327
  %1329 = select i1 %1328, ptr %1320, ptr %1321
  %1330 = zext i1 %1328 to i64
  %1331 = getelementptr inbounds i16, ptr %1320, i64 %1330
  %1332 = xor i1 %1328, true
  %1333 = zext i1 %1332 to i64
  %1334 = getelementptr inbounds i16, ptr %1321, i64 %1333
  store i16 %1264, ptr %1329, align 2, !tbaa !44
  br label %1335

1335:                                             ; preds = %1325, %1319
  %1336 = phi ptr [ %1320, %1319 ], [ %1331, %1325 ]
  %1337 = phi ptr [ %1321, %1319 ], [ %1334, %1325 ]
  %1338 = add nuw nsw i64 %1258, 2
  %1339 = icmp ult i64 %1338, %1254
  br i1 %1339, label %1257, label %1340

1340:                                             ; preds = %1335
  %1341 = trunc i64 %1258 to i32
  br label %1342

1342:                                             ; preds = %1340, %1232
  %1343 = phi i32 [ %1341, %1340 ], [ 0, %1232 ]
  %1344 = phi ptr [ %1336, %1340 ], [ %1182, %1232 ]
  %1345 = phi ptr [ %1337, %1340 ], [ %468, %1232 ]
  %1346 = icmp slt i32 %1343, %1143
  br i1 %1346, label %1347, label %1391

1347:                                             ; preds = %1342
  %1348 = zext i32 %1343 to i64
  %1349 = zext i32 %1143 to i64
  %1350 = extractelement <2 x double> %705, i64 0
  %1351 = extractelement <2 x double> %705, i64 1
  br label %1352

1352:                                             ; preds = %1347, %1386
  %1353 = phi i64 [ %1348, %1347 ], [ %1389, %1386 ]
  %1354 = phi ptr [ %1345, %1347 ], [ %1388, %1386 ]
  %1355 = phi ptr [ %1344, %1347 ], [ %1387, %1386 ]
  %1356 = getelementptr inbounds i16, ptr %422, i64 %1353
  %1357 = load i16, ptr %1356, align 2, !tbaa !44
  %1358 = zext i16 %1357 to i64
  %1359 = getelementptr inbounds %struct.CompAtom, ptr %42, i64 %1358
  %1360 = load double, ptr %1359, align 8, !tbaa !67
  %1361 = getelementptr inbounds %class.Vector, ptr %1359, i64 0, i32 1
  %1362 = load double, ptr %1361, align 8, !tbaa !66
  %1363 = getelementptr inbounds %class.Vector, ptr %1359, i64 0, i32 2
  %1364 = load double, ptr %1363, align 8, !tbaa !49
  %1365 = fsub double %1350, %1360
  %1366 = fmul double %1365, %1365
  %1367 = fsub double %1351, %1362
  %1368 = tail call double @llvm.fmuladd.f64(double %1367, double %1367, double %1366)
  %1369 = fsub double %708, %1364
  %1370 = tail call double @llvm.fmuladd.f64(double %1369, double %1369, double %1368)
  %1371 = fcmp ugt double %1370, %20
  br i1 %1371, label %1386, label %1372

1372:                                             ; preds = %1352
  %1373 = getelementptr inbounds %struct.CompAtomExt, ptr %46, i64 %1358
  %1374 = load i32, ptr %1373, align 4
  %1375 = shl i32 %1374, 2
  %1376 = ashr exact i32 %1375, 2
  %1377 = icmp slt i32 %1376, %715
  %1378 = icmp sgt i32 %1376, %717
  %1379 = select i1 %1377, i1 true, i1 %1378
  %1380 = select i1 %1379, ptr %1355, ptr %1354
  %1381 = zext i1 %1379 to i64
  %1382 = getelementptr inbounds i16, ptr %1355, i64 %1381
  %1383 = xor i1 %1379, true
  %1384 = zext i1 %1383 to i64
  %1385 = getelementptr inbounds i16, ptr %1354, i64 %1384
  store i16 %1357, ptr %1380, align 2, !tbaa !44
  br label %1386

1386:                                             ; preds = %1372, %1352
  %1387 = phi ptr [ %1355, %1352 ], [ %1382, %1372 ]
  %1388 = phi ptr [ %1354, %1352 ], [ %1385, %1372 ]
  %1389 = add nuw nsw i64 %1353, 1
  %1390 = icmp eq i64 %1389, %1349
  br i1 %1390, label %1391, label %1352

1391:                                             ; preds = %1386, %1226, %1342, %1184, %1231
  %1392 = phi ptr [ %1182, %1231 ], [ %1182, %1184 ], [ %1344, %1342 ], [ %1227, %1226 ], [ %1387, %1386 ]
  %1393 = phi ptr [ %468, %1231 ], [ %468, %1184 ], [ %1345, %1342 ], [ %1228, %1226 ], [ %1388, %1386 ]
  %1394 = icmp eq ptr %1392, %1182
  %1395 = icmp eq ptr %1393, %468
  %1396 = select i1 %1394, i1 %1395, i1 false
  br i1 %1396, label %1397, label %1399

1397:                                             ; preds = %1391
  %1398 = add nsw i32 %674, 1
  br label %2368

1399:                                             ; preds = %1391
  %1400 = trunc i32 %674 to i16
  %1401 = load i32, ptr %13, align 8, !tbaa !17
  %1402 = add nsw i32 %1401, -1
  %1403 = sext i32 %1402 to i64
  %1404 = getelementptr inbounds i16, ptr %1178, i64 %1403
  store i16 %1400, ptr %1404, align 2, !tbaa !44
  %1405 = ptrtoint ptr %1393 to i64
  %1406 = sub i64 %1405, %659
  %1407 = lshr exact i64 %1406, 1
  %1408 = trunc i64 %1407 to i32
  %1409 = icmp sgt i32 %1408, 0
  br i1 %1409, label %1410, label %1510

1410:                                             ; preds = %1399
  %1411 = and i64 %1407, 4294967295
  %1412 = and i64 %1407, 1
  %1413 = icmp eq i64 %1411, 1
  br i1 %1413, label %1478, label %1414

1414:                                             ; preds = %1410
  %1415 = sub nsw i64 %1411, %1412
  br label %1416

1416:                                             ; preds = %1471, %1414
  %1417 = phi i64 [ 0, %1414 ], [ %1475, %1471 ]
  %1418 = phi ptr [ %1392, %1414 ], [ %1474, %1471 ]
  %1419 = phi ptr [ %330, %1414 ], [ %1473, %1471 ]
  %1420 = phi ptr [ %376, %1414 ], [ %1472, %1471 ]
  %1421 = phi i64 [ 0, %1414 ], [ %1476, %1471 ]
  %1422 = getelementptr inbounds i16, ptr %468, i64 %1417
  %1423 = load i16, ptr %1422, align 2, !tbaa !44
  %1424 = zext i16 %1423 to i64
  %1425 = getelementptr inbounds %struct.CompAtomExt, ptr %46, i64 %1424
  %1426 = load i32, ptr %1425, align 4
  %1427 = shl i32 %1426, 2
  %1428 = ashr exact i32 %1427, 2
  %1429 = sext i32 %1428 to i64
  %1430 = getelementptr inbounds i8, ptr %952, i64 %1429
  %1431 = load i8, ptr %1430, align 1, !tbaa !57
  %1432 = sext i8 %1431 to i32
  switch i32 %1432, label %1444 [
    i32 0, label %1433
    i32 1, label %1435
    i32 2, label %1437
  ]

1433:                                             ; preds = %1416
  %1434 = getelementptr inbounds i16, ptr %1418, i64 1
  br label %1439

1435:                                             ; preds = %1416
  %1436 = getelementptr inbounds i16, ptr %1419, i64 1
  br label %1439

1437:                                             ; preds = %1416
  %1438 = getelementptr inbounds i16, ptr %1420, i64 1
  br label %1439

1439:                                             ; preds = %1433, %1435, %1437
  %1440 = phi ptr [ %1420, %1437 ], [ %1419, %1435 ], [ %1418, %1433 ]
  %1441 = phi ptr [ %1438, %1437 ], [ %1420, %1435 ], [ %1420, %1433 ]
  %1442 = phi ptr [ %1419, %1437 ], [ %1436, %1435 ], [ %1419, %1433 ]
  %1443 = phi ptr [ %1418, %1437 ], [ %1418, %1435 ], [ %1434, %1433 ]
  store i16 %1423, ptr %1440, align 2, !tbaa !44
  br label %1444

1444:                                             ; preds = %1439, %1416
  %1445 = phi ptr [ %1420, %1416 ], [ %1441, %1439 ]
  %1446 = phi ptr [ %1419, %1416 ], [ %1442, %1439 ]
  %1447 = phi ptr [ %1418, %1416 ], [ %1443, %1439 ]
  %1448 = or i64 %1417, 1
  %1449 = getelementptr inbounds i16, ptr %468, i64 %1448
  %1450 = load i16, ptr %1449, align 2, !tbaa !44
  %1451 = zext i16 %1450 to i64
  %1452 = getelementptr inbounds %struct.CompAtomExt, ptr %46, i64 %1451
  %1453 = load i32, ptr %1452, align 4
  %1454 = shl i32 %1453, 2
  %1455 = ashr exact i32 %1454, 2
  %1456 = sext i32 %1455 to i64
  %1457 = getelementptr inbounds i8, ptr %952, i64 %1456
  %1458 = load i8, ptr %1457, align 1, !tbaa !57
  %1459 = sext i8 %1458 to i32
  switch i32 %1459, label %1471 [
    i32 0, label %1464
    i32 1, label %1462
    i32 2, label %1460
  ]

1460:                                             ; preds = %1444
  %1461 = getelementptr inbounds i16, ptr %1445, i64 1
  br label %1466

1462:                                             ; preds = %1444
  %1463 = getelementptr inbounds i16, ptr %1446, i64 1
  br label %1466

1464:                                             ; preds = %1444
  %1465 = getelementptr inbounds i16, ptr %1447, i64 1
  br label %1466

1466:                                             ; preds = %1464, %1462, %1460
  %1467 = phi ptr [ %1445, %1460 ], [ %1446, %1462 ], [ %1447, %1464 ]
  %1468 = phi ptr [ %1461, %1460 ], [ %1445, %1462 ], [ %1445, %1464 ]
  %1469 = phi ptr [ %1446, %1460 ], [ %1463, %1462 ], [ %1446, %1464 ]
  %1470 = phi ptr [ %1447, %1460 ], [ %1447, %1462 ], [ %1465, %1464 ]
  store i16 %1450, ptr %1467, align 2, !tbaa !44
  br label %1471

1471:                                             ; preds = %1466, %1444
  %1472 = phi ptr [ %1445, %1444 ], [ %1468, %1466 ]
  %1473 = phi ptr [ %1446, %1444 ], [ %1469, %1466 ]
  %1474 = phi ptr [ %1447, %1444 ], [ %1470, %1466 ]
  %1475 = add nuw nsw i64 %1417, 2
  %1476 = add i64 %1421, 2
  %1477 = icmp eq i64 %1476, %1415
  br i1 %1477, label %1478, label %1416

1478:                                             ; preds = %1471, %1410
  %1479 = phi ptr [ undef, %1410 ], [ %1472, %1471 ]
  %1480 = phi ptr [ undef, %1410 ], [ %1473, %1471 ]
  %1481 = phi ptr [ undef, %1410 ], [ %1474, %1471 ]
  %1482 = phi i64 [ 0, %1410 ], [ %1475, %1471 ]
  %1483 = phi ptr [ %1392, %1410 ], [ %1474, %1471 ]
  %1484 = phi ptr [ %330, %1410 ], [ %1473, %1471 ]
  %1485 = phi ptr [ %376, %1410 ], [ %1472, %1471 ]
  %1486 = icmp eq i64 %1412, 0
  br i1 %1486, label %1510, label %1487

1487:                                             ; preds = %1478
  %1488 = getelementptr inbounds i16, ptr %468, i64 %1482
  %1489 = load i16, ptr %1488, align 2, !tbaa !44
  %1490 = zext i16 %1489 to i64
  %1491 = getelementptr inbounds %struct.CompAtomExt, ptr %46, i64 %1490
  %1492 = load i32, ptr %1491, align 4
  %1493 = shl i32 %1492, 2
  %1494 = ashr exact i32 %1493, 2
  %1495 = sext i32 %1494 to i64
  %1496 = getelementptr inbounds i8, ptr %952, i64 %1495
  %1497 = load i8, ptr %1496, align 1, !tbaa !57
  %1498 = sext i8 %1497 to i32
  switch i32 %1498, label %1510 [
    i32 0, label %1503
    i32 1, label %1501
    i32 2, label %1499
  ]

1499:                                             ; preds = %1487
  %1500 = getelementptr inbounds i16, ptr %1485, i64 1
  br label %1505

1501:                                             ; preds = %1487
  %1502 = getelementptr inbounds i16, ptr %1484, i64 1
  br label %1505

1503:                                             ; preds = %1487
  %1504 = getelementptr inbounds i16, ptr %1483, i64 1
  br label %1505

1505:                                             ; preds = %1503, %1501, %1499
  %1506 = phi ptr [ %1485, %1499 ], [ %1484, %1501 ], [ %1483, %1503 ]
  %1507 = phi ptr [ %1500, %1499 ], [ %1485, %1501 ], [ %1485, %1503 ]
  %1508 = phi ptr [ %1484, %1499 ], [ %1502, %1501 ], [ %1484, %1503 ]
  %1509 = phi ptr [ %1483, %1499 ], [ %1483, %1501 ], [ %1504, %1503 ]
  store i16 %1489, ptr %1506, align 2, !tbaa !44
  br label %1510

1510:                                             ; preds = %1478, %1505, %1487, %1399
  %1511 = phi ptr [ %376, %1399 ], [ %1479, %1478 ], [ %1485, %1487 ], [ %1507, %1505 ]
  %1512 = phi ptr [ %330, %1399 ], [ %1480, %1478 ], [ %1484, %1487 ], [ %1508, %1505 ]
  %1513 = phi ptr [ %1392, %1399 ], [ %1481, %1478 ], [ %1483, %1487 ], [ %1509, %1505 ]
  %1514 = ptrtoint ptr %1513 to i64
  %1515 = ptrtoint ptr %1182 to i64
  %1516 = sub i64 %1514, %1515
  %1517 = lshr exact i64 %1516, 1
  %1518 = trunc i64 %1517 to i32
  %1519 = icmp eq i32 %1518, 0
  %1520 = shl i64 %1516, 31
  br i1 %1519, label %1526, label %1521

1521:                                             ; preds = %1510
  %1522 = add i64 %1520, -4294967296
  %1523 = ashr i64 %1522, 32
  %1524 = getelementptr inbounds i16, ptr %1182, i64 %1523
  %1525 = load i16, ptr %1524, align 2, !tbaa !44
  br label %1526

1526:                                             ; preds = %1510, %1521
  %1527 = phi i16 [ %1525, %1521 ], [ -1, %1510 ]
  %1528 = ashr i64 %1520, 32
  %1529 = getelementptr inbounds i16, ptr %1182, i64 %1528
  store i16 %1527, ptr %1529, align 2, !tbaa !44
  %1530 = trunc i64 %1517 to i16
  %1531 = add i16 %1530, 1
  %1532 = sext i32 %1401 to i64
  %1533 = getelementptr inbounds i16, ptr %1178, i64 %1532
  store i16 %1531, ptr %1533, align 2, !tbaa !44
  %1534 = add i32 %1401, 2
  %1535 = add i32 %1534, %1518
  %1536 = ptrtoint ptr %1512 to i64
  %1537 = sub i64 %1536, %660
  %1538 = lshr exact i64 %1537, 1
  %1539 = trunc i64 %1538 to i32
  %1540 = add nsw i32 %1535, 1
  %1541 = sext i32 %1540 to i64
  %1542 = getelementptr i16, ptr %1178, i64 %1541
  %1543 = icmp sgt i32 %1539, 0
  br i1 %1543, label %1544, label %1634

1544:                                             ; preds = %1526
  %1545 = and i64 %1538, 4294967295
  %1546 = icmp ult i64 %1545, 8
  br i1 %1546, label %1590, label %1547

1547:                                             ; preds = %1544
  %1548 = shl nsw i64 %1541, 1
  %1549 = add i64 %1548, %1179
  %1550 = sub i64 %1549, %660
  %1551 = icmp ult i64 %1550, 128
  br i1 %1551, label %1590, label %1552

1552:                                             ; preds = %1547
  %1553 = icmp ult i64 %1545, 64
  br i1 %1553, label %1577, label %1554

1554:                                             ; preds = %1552
  %1555 = and i64 %1538, 63
  %1556 = sub nsw i64 %1545, %1555
  br label %1557

1557:                                             ; preds = %1557, %1554
  %1558 = phi i64 [ 0, %1554 ], [ %1571, %1557 ]
  %1559 = getelementptr inbounds i16, ptr %330, i64 %1558
  %1560 = load <16 x i16>, ptr %1559, align 2, !tbaa !44
  %1561 = getelementptr inbounds i16, ptr %1559, i64 16
  %1562 = load <16 x i16>, ptr %1561, align 2, !tbaa !44
  %1563 = getelementptr inbounds i16, ptr %1559, i64 32
  %1564 = load <16 x i16>, ptr %1563, align 2, !tbaa !44
  %1565 = getelementptr inbounds i16, ptr %1559, i64 48
  %1566 = load <16 x i16>, ptr %1565, align 2, !tbaa !44
  %1567 = getelementptr inbounds i16, ptr %1542, i64 %1558
  store <16 x i16> %1560, ptr %1567, align 2, !tbaa !44
  %1568 = getelementptr inbounds i16, ptr %1567, i64 16
  store <16 x i16> %1562, ptr %1568, align 2, !tbaa !44
  %1569 = getelementptr inbounds i16, ptr %1567, i64 32
  store <16 x i16> %1564, ptr %1569, align 2, !tbaa !44
  %1570 = getelementptr inbounds i16, ptr %1567, i64 48
  store <16 x i16> %1566, ptr %1570, align 2, !tbaa !44
  %1571 = add nuw i64 %1558, 64
  %1572 = icmp eq i64 %1571, %1556
  br i1 %1572, label %1573, label %1557, !llvm.loop !116

1573:                                             ; preds = %1557
  %1574 = icmp eq i64 %1555, 0
  br i1 %1574, label %1628, label %1575

1575:                                             ; preds = %1573
  %1576 = icmp ult i64 %1555, 8
  br i1 %1576, label %1590, label %1577

1577:                                             ; preds = %1552, %1575
  %1578 = phi i64 [ %1556, %1575 ], [ 0, %1552 ]
  %1579 = and i64 %1538, 7
  %1580 = sub nsw i64 %1545, %1579
  br label %1581

1581:                                             ; preds = %1581, %1577
  %1582 = phi i64 [ %1578, %1577 ], [ %1586, %1581 ]
  %1583 = getelementptr inbounds i16, ptr %330, i64 %1582
  %1584 = load <8 x i16>, ptr %1583, align 2, !tbaa !44
  %1585 = getelementptr inbounds i16, ptr %1542, i64 %1582
  store <8 x i16> %1584, ptr %1585, align 2, !tbaa !44
  %1586 = add nuw i64 %1582, 8
  %1587 = icmp eq i64 %1586, %1580
  br i1 %1587, label %1588, label %1581, !llvm.loop !117

1588:                                             ; preds = %1581
  %1589 = icmp eq i64 %1579, 0
  br i1 %1589, label %1628, label %1590

1590:                                             ; preds = %1547, %1544, %1575, %1588
  %1591 = phi i64 [ 0, %1544 ], [ 0, %1547 ], [ %1556, %1575 ], [ %1580, %1588 ]
  %1592 = sub i64 %1538, %1591
  %1593 = xor i64 %1591, -1
  %1594 = add nsw i64 %1545, %1593
  %1595 = and i64 %1592, 3
  %1596 = icmp eq i64 %1595, 0
  br i1 %1596, label %1606, label %1597

1597:                                             ; preds = %1590, %1597
  %1598 = phi i64 [ %1603, %1597 ], [ %1591, %1590 ]
  %1599 = phi i64 [ %1604, %1597 ], [ 0, %1590 ]
  %1600 = getelementptr inbounds i16, ptr %330, i64 %1598
  %1601 = load i16, ptr %1600, align 2, !tbaa !44
  %1602 = getelementptr inbounds i16, ptr %1542, i64 %1598
  store i16 %1601, ptr %1602, align 2, !tbaa !44
  %1603 = add nuw nsw i64 %1598, 1
  %1604 = add i64 %1599, 1
  %1605 = icmp eq i64 %1604, %1595
  br i1 %1605, label %1606, label %1597, !llvm.loop !118

1606:                                             ; preds = %1597, %1590
  %1607 = phi i64 [ %1591, %1590 ], [ %1603, %1597 ]
  %1608 = icmp ult i64 %1594, 3
  br i1 %1608, label %1628, label %1609

1609:                                             ; preds = %1606, %1609
  %1610 = phi i64 [ %1626, %1609 ], [ %1607, %1606 ]
  %1611 = getelementptr inbounds i16, ptr %330, i64 %1610
  %1612 = load i16, ptr %1611, align 2, !tbaa !44
  %1613 = getelementptr inbounds i16, ptr %1542, i64 %1610
  store i16 %1612, ptr %1613, align 2, !tbaa !44
  %1614 = add nuw nsw i64 %1610, 1
  %1615 = getelementptr inbounds i16, ptr %330, i64 %1614
  %1616 = load i16, ptr %1615, align 2, !tbaa !44
  %1617 = getelementptr inbounds i16, ptr %1542, i64 %1614
  store i16 %1616, ptr %1617, align 2, !tbaa !44
  %1618 = add nuw nsw i64 %1610, 2
  %1619 = getelementptr inbounds i16, ptr %330, i64 %1618
  %1620 = load i16, ptr %1619, align 2, !tbaa !44
  %1621 = getelementptr inbounds i16, ptr %1542, i64 %1618
  store i16 %1620, ptr %1621, align 2, !tbaa !44
  %1622 = add nuw nsw i64 %1610, 3
  %1623 = getelementptr inbounds i16, ptr %330, i64 %1622
  %1624 = load i16, ptr %1623, align 2, !tbaa !44
  %1625 = getelementptr inbounds i16, ptr %1542, i64 %1622
  store i16 %1624, ptr %1625, align 2, !tbaa !44
  %1626 = add nuw nsw i64 %1610, 4
  %1627 = icmp eq i64 %1626, %1545
  br i1 %1627, label %1628, label %1609, !llvm.loop !119

1628:                                             ; preds = %1606, %1609, %1573, %1588
  %1629 = shl i64 %1537, 31
  %1630 = add i64 %1629, -4294967296
  %1631 = ashr i64 %1630, 32
  %1632 = getelementptr inbounds i16, ptr %1542, i64 %1631
  %1633 = load i16, ptr %1632, align 2, !tbaa !44
  br label %1634

1634:                                             ; preds = %1526, %1628
  %1635 = phi i64 [ %1538, %1628 ], [ 0, %1526 ]
  %1636 = phi i16 [ %1633, %1628 ], [ -1, %1526 ]
  %1637 = and i64 %1635, 4294967295
  %1638 = getelementptr inbounds i16, ptr %1542, i64 %1637
  store i16 %1636, ptr %1638, align 2, !tbaa !44
  %1639 = trunc i64 %1538 to i16
  %1640 = add i16 %1639, 1
  %1641 = sext i32 %1535 to i64
  %1642 = getelementptr inbounds i16, ptr %1178, i64 %1641
  store i16 %1640, ptr %1642, align 2, !tbaa !44
  %1643 = add nsw i32 %1539, 2
  %1644 = add nsw i32 %1643, %1535
  %1645 = ptrtoint ptr %1511 to i64
  %1646 = sub i64 %1645, %661
  %1647 = lshr exact i64 %1646, 1
  %1648 = trunc i64 %1647 to i32
  %1649 = add nsw i32 %1644, 1
  %1650 = sext i32 %1649 to i64
  %1651 = getelementptr i16, ptr %1178, i64 %1650
  %1652 = icmp sgt i32 %1648, 0
  br i1 %1652, label %1653, label %1743

1653:                                             ; preds = %1634
  %1654 = and i64 %1647, 4294967295
  %1655 = icmp ult i64 %1654, 8
  br i1 %1655, label %1699, label %1656

1656:                                             ; preds = %1653
  %1657 = shl nsw i64 %1650, 1
  %1658 = add i64 %1657, %1179
  %1659 = sub i64 %1658, %661
  %1660 = icmp ult i64 %1659, 128
  br i1 %1660, label %1699, label %1661

1661:                                             ; preds = %1656
  %1662 = icmp ult i64 %1654, 64
  br i1 %1662, label %1686, label %1663

1663:                                             ; preds = %1661
  %1664 = and i64 %1647, 63
  %1665 = sub nsw i64 %1654, %1664
  br label %1666

1666:                                             ; preds = %1666, %1663
  %1667 = phi i64 [ 0, %1663 ], [ %1680, %1666 ]
  %1668 = getelementptr inbounds i16, ptr %376, i64 %1667
  %1669 = load <16 x i16>, ptr %1668, align 2, !tbaa !44
  %1670 = getelementptr inbounds i16, ptr %1668, i64 16
  %1671 = load <16 x i16>, ptr %1670, align 2, !tbaa !44
  %1672 = getelementptr inbounds i16, ptr %1668, i64 32
  %1673 = load <16 x i16>, ptr %1672, align 2, !tbaa !44
  %1674 = getelementptr inbounds i16, ptr %1668, i64 48
  %1675 = load <16 x i16>, ptr %1674, align 2, !tbaa !44
  %1676 = getelementptr inbounds i16, ptr %1651, i64 %1667
  store <16 x i16> %1669, ptr %1676, align 2, !tbaa !44
  %1677 = getelementptr inbounds i16, ptr %1676, i64 16
  store <16 x i16> %1671, ptr %1677, align 2, !tbaa !44
  %1678 = getelementptr inbounds i16, ptr %1676, i64 32
  store <16 x i16> %1673, ptr %1678, align 2, !tbaa !44
  %1679 = getelementptr inbounds i16, ptr %1676, i64 48
  store <16 x i16> %1675, ptr %1679, align 2, !tbaa !44
  %1680 = add nuw i64 %1667, 64
  %1681 = icmp eq i64 %1680, %1665
  br i1 %1681, label %1682, label %1666, !llvm.loop !120

1682:                                             ; preds = %1666
  %1683 = icmp eq i64 %1664, 0
  br i1 %1683, label %1737, label %1684

1684:                                             ; preds = %1682
  %1685 = icmp ult i64 %1664, 8
  br i1 %1685, label %1699, label %1686

1686:                                             ; preds = %1661, %1684
  %1687 = phi i64 [ %1665, %1684 ], [ 0, %1661 ]
  %1688 = and i64 %1647, 7
  %1689 = sub nsw i64 %1654, %1688
  br label %1690

1690:                                             ; preds = %1690, %1686
  %1691 = phi i64 [ %1687, %1686 ], [ %1695, %1690 ]
  %1692 = getelementptr inbounds i16, ptr %376, i64 %1691
  %1693 = load <8 x i16>, ptr %1692, align 2, !tbaa !44
  %1694 = getelementptr inbounds i16, ptr %1651, i64 %1691
  store <8 x i16> %1693, ptr %1694, align 2, !tbaa !44
  %1695 = add nuw i64 %1691, 8
  %1696 = icmp eq i64 %1695, %1689
  br i1 %1696, label %1697, label %1690, !llvm.loop !121

1697:                                             ; preds = %1690
  %1698 = icmp eq i64 %1688, 0
  br i1 %1698, label %1737, label %1699

1699:                                             ; preds = %1656, %1653, %1684, %1697
  %1700 = phi i64 [ 0, %1653 ], [ 0, %1656 ], [ %1665, %1684 ], [ %1689, %1697 ]
  %1701 = sub i64 %1647, %1700
  %1702 = xor i64 %1700, -1
  %1703 = add nsw i64 %1654, %1702
  %1704 = and i64 %1701, 3
  %1705 = icmp eq i64 %1704, 0
  br i1 %1705, label %1715, label %1706

1706:                                             ; preds = %1699, %1706
  %1707 = phi i64 [ %1712, %1706 ], [ %1700, %1699 ]
  %1708 = phi i64 [ %1713, %1706 ], [ 0, %1699 ]
  %1709 = getelementptr inbounds i16, ptr %376, i64 %1707
  %1710 = load i16, ptr %1709, align 2, !tbaa !44
  %1711 = getelementptr inbounds i16, ptr %1651, i64 %1707
  store i16 %1710, ptr %1711, align 2, !tbaa !44
  %1712 = add nuw nsw i64 %1707, 1
  %1713 = add i64 %1708, 1
  %1714 = icmp eq i64 %1713, %1704
  br i1 %1714, label %1715, label %1706, !llvm.loop !122

1715:                                             ; preds = %1706, %1699
  %1716 = phi i64 [ %1700, %1699 ], [ %1712, %1706 ]
  %1717 = icmp ult i64 %1703, 3
  br i1 %1717, label %1737, label %1718

1718:                                             ; preds = %1715, %1718
  %1719 = phi i64 [ %1735, %1718 ], [ %1716, %1715 ]
  %1720 = getelementptr inbounds i16, ptr %376, i64 %1719
  %1721 = load i16, ptr %1720, align 2, !tbaa !44
  %1722 = getelementptr inbounds i16, ptr %1651, i64 %1719
  store i16 %1721, ptr %1722, align 2, !tbaa !44
  %1723 = add nuw nsw i64 %1719, 1
  %1724 = getelementptr inbounds i16, ptr %376, i64 %1723
  %1725 = load i16, ptr %1724, align 2, !tbaa !44
  %1726 = getelementptr inbounds i16, ptr %1651, i64 %1723
  store i16 %1725, ptr %1726, align 2, !tbaa !44
  %1727 = add nuw nsw i64 %1719, 2
  %1728 = getelementptr inbounds i16, ptr %376, i64 %1727
  %1729 = load i16, ptr %1728, align 2, !tbaa !44
  %1730 = getelementptr inbounds i16, ptr %1651, i64 %1727
  store i16 %1729, ptr %1730, align 2, !tbaa !44
  %1731 = add nuw nsw i64 %1719, 3
  %1732 = getelementptr inbounds i16, ptr %376, i64 %1731
  %1733 = load i16, ptr %1732, align 2, !tbaa !44
  %1734 = getelementptr inbounds i16, ptr %1651, i64 %1731
  store i16 %1733, ptr %1734, align 2, !tbaa !44
  %1735 = add nuw nsw i64 %1719, 4
  %1736 = icmp eq i64 %1735, %1654
  br i1 %1736, label %1737, label %1718, !llvm.loop !123

1737:                                             ; preds = %1715, %1718, %1682, %1697
  %1738 = shl i64 %1646, 31
  %1739 = add i64 %1738, -4294967296
  %1740 = ashr i64 %1739, 32
  %1741 = getelementptr inbounds i16, ptr %1651, i64 %1740
  %1742 = load i16, ptr %1741, align 2, !tbaa !44
  br label %1743

1743:                                             ; preds = %1634, %1737
  %1744 = phi i64 [ %1647, %1737 ], [ 0, %1634 ]
  %1745 = phi i16 [ %1742, %1737 ], [ -1, %1634 ]
  %1746 = and i64 %1744, 4294967295
  %1747 = getelementptr inbounds i16, ptr %1651, i64 %1746
  store i16 %1745, ptr %1747, align 2, !tbaa !44
  %1748 = trunc i64 %1647 to i16
  %1749 = add i16 %1748, 1
  %1750 = sext i32 %1644 to i64
  %1751 = getelementptr inbounds i16, ptr %1178, i64 %1750
  store i16 %1749, ptr %1751, align 2, !tbaa !44
  %1752 = add i32 %1648, 3
  %1753 = add i32 %1752, %1644
  %1754 = select i1 %143, i32 1, i32 %1753
  store i32 %1754, ptr %13, align 8, !tbaa !17
  br label %1790

1755:                                             ; preds = %671
  %1756 = load <2 x double>, ptr %688, align 8, !tbaa !19
  %1757 = fadd <2 x double> %15, %1756
  %1758 = getelementptr inbounds %class.Vector, ptr %688, i64 0, i32 2
  %1759 = load double, ptr %1758, align 8, !tbaa !49
  %1760 = fadd double %17, %1759
  %1761 = load ptr, ptr %8, align 8, !tbaa !46
  %1762 = load i32, ptr %13, align 8, !tbaa !17
  %1763 = add i32 %1762, 1
  %1764 = sext i32 %1763 to i64
  %1765 = getelementptr inbounds i16, ptr %1761, i64 %1764
  %1766 = sext i32 %1762 to i64
  %1767 = getelementptr inbounds i16, ptr %1761, i64 %1766
  %1768 = load i16, ptr %1767, align 2, !tbaa !44
  %1769 = zext i16 %1768 to i32
  %1770 = add i32 %1763, %1769
  %1771 = add nsw i32 %1769, -1
  %1772 = add i32 %1770, 1
  %1773 = sext i32 %1772 to i64
  %1774 = getelementptr inbounds i16, ptr %1761, i64 %1773
  %1775 = sext i32 %1770 to i64
  %1776 = getelementptr inbounds i16, ptr %1761, i64 %1775
  %1777 = load i16, ptr %1776, align 2, !tbaa !44
  %1778 = zext i16 %1777 to i32
  %1779 = add i32 %1772, %1778
  %1780 = add nsw i32 %1778, -1
  %1781 = add i32 %1779, 1
  %1782 = sext i32 %1781 to i64
  %1783 = getelementptr inbounds i16, ptr %1761, i64 %1782
  %1784 = sext i32 %1779 to i64
  %1785 = getelementptr inbounds i16, ptr %1761, i64 %1784
  %1786 = load i16, ptr %1785, align 2, !tbaa !44
  %1787 = zext i16 %1786 to i32
  %1788 = add i32 %1781, %1787
  store i32 %1788, ptr %13, align 8, !tbaa !17
  %1789 = add nsw i32 %1787, -1
  br label %1790

1790:                                             ; preds = %1743, %1755
  %1791 = phi double [ %1760, %1755 ], [ %708, %1743 ]
  %1792 = phi i32 [ %679, %1755 ], [ %703, %1743 ]
  %1793 = phi ptr [ %1765, %1755 ], [ %1182, %1743 ]
  %1794 = phi i32 [ %1771, %1755 ], [ %1518, %1743 ]
  %1795 = phi ptr [ %1774, %1755 ], [ %1542, %1743 ]
  %1796 = phi i32 [ %1780, %1755 ], [ %1539, %1743 ]
  %1797 = phi ptr [ %1783, %1755 ], [ %1651, %1743 ]
  %1798 = phi i32 [ %1789, %1755 ], [ %1648, %1743 ]
  %1799 = phi i32 [ %678, %1755 ], [ %1143, %1743 ]
  %1800 = phi ptr [ %677, %1755 ], [ %953, %1743 ]
  %1801 = phi ptr [ %676, %1755 ], [ %954, %1743 ]
  %1802 = phi ptr [ %675, %1755 ], [ %955, %1743 ]
  %1803 = phi <2 x double> [ %1757, %1755 ], [ %705, %1743 ]
  %1804 = getelementptr inbounds %struct.CompAtom, ptr %40, i64 %687, i32 1
  %1805 = load float, ptr %1804, align 8, !tbaa !79
  %1806 = fpext float %1805 to double
  %1807 = fmul double %1806, 0x4074C104816F0069
  %1808 = fmul double %29, %1807
  %1809 = fmul double %24, %1808
  %1810 = getelementptr inbounds %struct.CompAtom, ptr %40, i64 %687, i32 2
  %1811 = load i16, ptr %1810, align 4, !tbaa !80
  %1812 = sext i16 %1811 to i32
  %1813 = load ptr, ptr %662, align 8, !tbaa !81
  %1814 = load i32, ptr %663, align 8, !tbaa !83
  %1815 = shl nsw i32 %1812, 1
  %1816 = mul i32 %1815, %1814
  %1817 = zext i32 %1816 to i64
  %1818 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %1813, i64 %1817
  %1819 = load double, ptr @_ZN20ComputeNonbondedUtil7cutoff2E, align 8, !tbaa !19
  %1820 = extractelement <2 x double> %1803, i64 0
  %1821 = extractelement <2 x double> %1803, i64 1
  %1822 = tail call noundef i32 @_Z22pairlist_from_pairlistddddPK8CompAtomPKtiPtdPd(double noundef %1819, double noundef %1820, double noundef %1821, double noundef %1791, ptr noundef %42, ptr noundef nonnull %1793, i32 noundef %1794, ptr noundef %95, double noundef %32, ptr noundef %141)
  %1823 = icmp sgt i32 %1822, 0
  br i1 %1823, label %1824, label %2006

1824:                                             ; preds = %1790
  %1825 = load ptr, ptr @_ZN20ComputeNonbondedUtil8r2_tableE, align 8, !tbaa !23
  %1826 = zext i32 %1822 to i64
  br label %1827

1827:                                             ; preds = %1824, %1827
  %1828 = phi i64 [ 0, %1824 ], [ %2004, %1827 ]
  %1829 = phi double [ %673, %1824 ], [ %1981, %1827 ]
  %1830 = phi double [ 0.000000e+00, %1824 ], [ %1959, %1827 ]
  %1831 = phi double [ 0.000000e+00, %1824 ], [ %2000, %1827 ]
  %1832 = phi <2 x double> [ %680, %1824 ], [ %1951, %1827 ]
  %1833 = phi <2 x double> [ %681, %1824 ], [ %1944, %1827 ]
  %1834 = phi <2 x double> [ %682, %1824 ], [ %1993, %1827 ]
  %1835 = phi <2 x double> [ %683, %1824 ], [ %1987, %1827 ]
  %1836 = phi <2 x double> [ %684, %1824 ], [ %1932, %1827 ]
  %1837 = phi <2 x double> [ %685, %1824 ], [ %1957, %1827 ]
  %1838 = phi <2 x double> [ %686, %1824 ], [ %1998, %1827 ]
  %1839 = phi <2 x double> [ zeroinitializer, %1824 ], [ %1953, %1827 ]
  %1840 = phi <2 x double> [ zeroinitializer, %1824 ], [ %1995, %1827 ]
  %1841 = shl nuw nsw i64 %1828, 1
  %1842 = getelementptr inbounds i32, ptr %142, i64 %1841
  %1843 = load i32, ptr %1842, align 4, !tbaa !5
  %1844 = ashr i32 %1843, 14
  %1845 = add nsw i32 %1844, %35
  %1846 = getelementptr inbounds i16, ptr %95, i64 %1828
  %1847 = load i16, ptr %1846, align 2, !tbaa !44
  %1848 = zext i16 %1847 to i64
  %1849 = getelementptr inbounds %struct.CompAtom, ptr %42, i64 %1848
  %1850 = getelementptr inbounds double, ptr %141, i64 %1828
  %1851 = load double, ptr %1850, align 8, !tbaa !19
  %1852 = sext i32 %1845 to i64
  %1853 = getelementptr inbounds double, ptr %1825, i64 %1852
  %1854 = load double, ptr %1853, align 8, !tbaa !19
  %1855 = fsub double %1851, %1854
  %1856 = shl nsw i32 %1845, 4
  %1857 = sext i32 %1856 to i64
  %1858 = getelementptr inbounds double, ptr %27, i64 %1857
  %1859 = getelementptr inbounds %struct.CompAtom, ptr %42, i64 %1848, i32 2
  %1860 = load i16, ptr %1859, align 4, !tbaa !80
  %1861 = sext i16 %1860 to i32
  %1862 = shl nsw i32 %1861, 1
  %1863 = sext i32 %1862 to i64
  %1864 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %1818, i64 %1863
  %1865 = getelementptr inbounds %class.Vector, ptr %626, i64 %1848
  %1866 = getelementptr inbounds %class.Vector, ptr %630, i64 %1848
  %1867 = getelementptr inbounds %struct.CompAtom, ptr %42, i64 %1848, i32 1
  %1868 = load float, ptr %1867, align 8, !tbaa !79
  %1869 = fpext float %1868 to double
  %1870 = fmul double %1809, %1869
  %1871 = load <2 x double>, ptr %1849, align 8, !tbaa !19
  %1872 = fsub <2 x double> %1803, %1871
  %1873 = getelementptr inbounds %class.Vector, ptr %1849, i64 0, i32 2
  %1874 = load double, ptr %1873, align 8, !tbaa !49
  %1875 = fsub double %1791, %1874
  %1876 = load double, ptr %1864, align 8, !tbaa !84
  %1877 = fmul double %29, %1876
  %1878 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %1818, i64 %1863, i32 1
  %1879 = load double, ptr %1878, align 8, !tbaa !86
  %1880 = load double, ptr %1858, align 8, !tbaa !19
  %1881 = getelementptr inbounds double, ptr %1858, i64 2
  %1882 = load double, ptr %1881, align 8, !tbaa !19
  %1883 = fmul double %1879, %664
  %1884 = fmul double %1883, %1882
  %1885 = tail call double @llvm.fmuladd.f64(double %1877, double %1880, double %1884)
  %1886 = getelementptr inbounds double, ptr %1858, i64 1
  %1887 = load double, ptr %1886, align 8, !tbaa !19
  %1888 = getelementptr inbounds double, ptr %1858, i64 3
  %1889 = load double, ptr %1888, align 8, !tbaa !19
  %1890 = fmul double %1883, %1889
  %1891 = tail call double @llvm.fmuladd.f64(double %1877, double %1887, double %1890)
  %1892 = getelementptr inbounds double, ptr %1858, i64 4
  %1893 = load double, ptr %1892, align 8, !tbaa !19
  %1894 = getelementptr inbounds double, ptr %1858, i64 6
  %1895 = load double, ptr %1894, align 8, !tbaa !19
  %1896 = fmul double %1883, %1895
  %1897 = tail call double @llvm.fmuladd.f64(double %1877, double %1893, double %1896)
  %1898 = getelementptr inbounds double, ptr %1858, i64 5
  %1899 = load double, ptr %1898, align 8, !tbaa !19
  %1900 = getelementptr inbounds double, ptr %1858, i64 7
  %1901 = load double, ptr %1900, align 8, !tbaa !19
  %1902 = fmul double %1883, %1901
  %1903 = tail call double @llvm.fmuladd.f64(double %1877, double %1899, double %1902)
  %1904 = getelementptr inbounds double, ptr %1858, i64 8
  %1905 = load double, ptr %1904, align 8, !tbaa !19
  %1906 = fmul double %1870, %1905
  %1907 = getelementptr inbounds double, ptr %1858, i64 9
  %1908 = load double, ptr %1907, align 8, !tbaa !19
  %1909 = fmul double %1870, %1908
  %1910 = getelementptr inbounds double, ptr %1858, i64 10
  %1911 = load double, ptr %1910, align 8, !tbaa !19
  %1912 = fmul double %1870, %1911
  %1913 = getelementptr inbounds double, ptr %1858, i64 11
  %1914 = load double, ptr %1913, align 8, !tbaa !19
  %1915 = fmul double %1870, %1914
  %1916 = insertelement <2 x double> poison, double %1855, i64 0
  %1917 = shufflevector <2 x double> %1916, <2 x double> poison, <2 x i32> zeroinitializer
  %1918 = insertelement <2 x double> poison, double %1906, i64 0
  %1919 = insertelement <2 x double> %1918, double %1885, i64 1
  %1920 = fmul <2 x double> %1917, %1919
  %1921 = insertelement <2 x double> poison, double %1909, i64 0
  %1922 = insertelement <2 x double> %1921, double %1891, i64 1
  %1923 = fmul <2 x double> %1922, <double 2.500000e-01, double 2.500000e-01>
  %1924 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %1920, <2 x double> <double 0x3FC5555555555555, double 0x3FC5555555555555>, <2 x double> %1923)
  %1925 = insertelement <2 x double> poison, double %1912, i64 0
  %1926 = insertelement <2 x double> %1925, double %1897, i64 1
  %1927 = fmul <2 x double> %1926, <double 5.000000e-01, double 5.000000e-01>
  %1928 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %1924, <2 x double> %1917, <2 x double> %1927)
  %1929 = insertelement <2 x double> poison, double %1915, i64 0
  %1930 = insertelement <2 x double> %1929, double %1903, i64 1
  %1931 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %1928, <2 x double> %1917, <2 x double> %1930)
  %1932 = fsub <2 x double> %1836, %1931
  %1933 = fadd double %1885, %1906
  %1934 = fadd double %1891, %1909
  %1935 = fadd double %1897, %1912
  %1936 = tail call double @llvm.fmuladd.f64(double %1855, double %1933, double %1934)
  %1937 = tail call double @llvm.fmuladd.f64(double %1936, double %1855, double %1935)
  %1938 = extractelement <2 x double> %1872, i64 1
  %1939 = fmul double %1938, %1937
  %1940 = insertelement <2 x double> poison, double %1939, i64 0
  %1941 = shufflevector <2 x double> %1940, <2 x double> poison, <2 x i32> zeroinitializer
  %1942 = shufflevector <2 x double> %1872, <2 x double> poison, <2 x i32> <i32 1, i32 0>
  %1943 = insertelement <2 x double> %1942, double %1875, i64 1
  %1944 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %1941, <2 x double> %1943, <2 x double> %1833)
  %1945 = insertelement <2 x double> %1942, double %1875, i64 0
  %1946 = insertelement <2 x double> poison, double %1937, i64 0
  %1947 = shufflevector <2 x double> %1946, <2 x double> poison, <2 x i32> zeroinitializer
  %1948 = fmul <2 x double> %1945, %1947
  %1949 = shufflevector <2 x double> %1948, <2 x double> poison, <2 x i32> <i32 1, i32 poison>
  %1950 = shufflevector <2 x double> %1948, <2 x double> poison, <2 x i32> <i32 1, i32 1>
  %1951 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %1950, <2 x double> %1872, <2 x double> %1832)
  %1952 = insertelement <2 x double> %1949, double %1939, i64 1
  %1953 = fadd <2 x double> %1839, %1952
  %1954 = load <2 x double>, ptr %1865, align 8, !tbaa !19
  %1955 = fsub <2 x double> %1954, %1952
  store <2 x double> %1955, ptr %1865, align 8, !tbaa !19
  %1956 = shufflevector <2 x double> %1945, <2 x double> poison, <2 x i32> zeroinitializer
  %1957 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %1948, <2 x double> %1956, <2 x double> %1837)
  %1958 = extractelement <2 x double> %1948, i64 0
  %1959 = fadd double %1830, %1958
  %1960 = getelementptr inbounds %class.Vector, ptr %626, i64 %1848, i32 2
  %1961 = load double, ptr %1960, align 8, !tbaa !87
  %1962 = fsub double %1961, %1958
  store double %1962, ptr %1960, align 8, !tbaa !87
  %1963 = getelementptr inbounds double, ptr %1858, i64 12
  %1964 = load double, ptr %1963, align 8, !tbaa !19
  %1965 = getelementptr inbounds double, ptr %1858, i64 13
  %1966 = load double, ptr %1965, align 8, !tbaa !19
  %1967 = getelementptr inbounds double, ptr %1858, i64 14
  %1968 = load double, ptr %1967, align 8, !tbaa !19
  %1969 = getelementptr inbounds double, ptr %1858, i64 15
  %1970 = load double, ptr %1969, align 8, !tbaa !19
  %1971 = fmul double %1870, %1964
  %1972 = fmul double %1870, %1966
  %1973 = fmul double %1870, %1968
  %1974 = fmul double %1870, %1970
  %1975 = fmul double %1855, %1971
  %1976 = fmul double %1972, 2.500000e-01
  %1977 = tail call double @llvm.fmuladd.f64(double %1975, double 0x3FC5555555555555, double %1976)
  %1978 = fmul double %1973, 5.000000e-01
  %1979 = tail call double @llvm.fmuladd.f64(double %1977, double %1855, double %1978)
  %1980 = tail call double @llvm.fmuladd.f64(double %1979, double %1855, double %1974)
  %1981 = fsub double %1829, %1980
  %1982 = tail call double @llvm.fmuladd.f64(double %1855, double %1971, double %1972)
  %1983 = tail call double @llvm.fmuladd.f64(double %1982, double %1855, double %1973)
  %1984 = fmul double %1938, %1983
  %1985 = insertelement <2 x double> poison, double %1984, i64 0
  %1986 = shufflevector <2 x double> %1985, <2 x double> poison, <2 x i32> zeroinitializer
  %1987 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %1986, <2 x double> %1943, <2 x double> %1835)
  %1988 = insertelement <2 x double> poison, double %1983, i64 0
  %1989 = shufflevector <2 x double> %1988, <2 x double> poison, <2 x i32> zeroinitializer
  %1990 = fmul <2 x double> %1945, %1989
  %1991 = shufflevector <2 x double> %1990, <2 x double> poison, <2 x i32> <i32 1, i32 poison>
  %1992 = shufflevector <2 x double> %1990, <2 x double> poison, <2 x i32> <i32 1, i32 1>
  %1993 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %1992, <2 x double> %1872, <2 x double> %1834)
  %1994 = insertelement <2 x double> %1991, double %1984, i64 1
  %1995 = fadd <2 x double> %1840, %1994
  %1996 = load <2 x double>, ptr %1866, align 8, !tbaa !19
  %1997 = fsub <2 x double> %1996, %1994
  store <2 x double> %1997, ptr %1866, align 8, !tbaa !19
  %1998 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %1990, <2 x double> %1956, <2 x double> %1838)
  %1999 = extractelement <2 x double> %1990, i64 0
  %2000 = fadd double %1831, %1999
  %2001 = getelementptr inbounds %class.Vector, ptr %630, i64 %1848, i32 2
  %2002 = load double, ptr %2001, align 8, !tbaa !87
  %2003 = fsub double %2002, %1999
  store double %2003, ptr %2001, align 8, !tbaa !87
  %2004 = add nuw nsw i64 %1828, 1
  %2005 = icmp eq i64 %2004, %1826
  br i1 %2005, label %2006, label %1827

2006:                                             ; preds = %1827, %1790
  %2007 = phi double [ 0.000000e+00, %1790 ], [ %2000, %1827 ]
  %2008 = phi double [ 0.000000e+00, %1790 ], [ %1959, %1827 ]
  %2009 = phi double [ %673, %1790 ], [ %1981, %1827 ]
  %2010 = phi <2 x double> [ %680, %1790 ], [ %1951, %1827 ]
  %2011 = phi <2 x double> [ %681, %1790 ], [ %1944, %1827 ]
  %2012 = phi <2 x double> [ %682, %1790 ], [ %1993, %1827 ]
  %2013 = phi <2 x double> [ %683, %1790 ], [ %1987, %1827 ]
  %2014 = phi <2 x double> [ %684, %1790 ], [ %1932, %1827 ]
  %2015 = phi <2 x double> [ %685, %1790 ], [ %1957, %1827 ]
  %2016 = phi <2 x double> [ %686, %1790 ], [ %1998, %1827 ]
  %2017 = phi <2 x double> [ zeroinitializer, %1790 ], [ %1953, %1827 ]
  %2018 = phi <2 x double> [ zeroinitializer, %1790 ], [ %1995, %1827 ]
  %2019 = load double, ptr @_ZN20ComputeNonbondedUtil7cutoff2E, align 8, !tbaa !19
  %2020 = tail call noundef i32 @_Z22pairlist_from_pairlistddddPK8CompAtomPKtiPtdPd(double noundef %2019, double noundef %1820, double noundef %1821, double noundef %1791, ptr noundef %42, ptr noundef %1797, i32 noundef %1798, ptr noundef %95, double noundef %32, ptr noundef %141)
  %2021 = add nsw i32 %2020, %672
  %2022 = icmp sgt i32 %2020, 0
  br i1 %2022, label %2023, label %2221

2023:                                             ; preds = %2006
  %2024 = load ptr, ptr @_ZN20ComputeNonbondedUtil8r2_tableE, align 8, !tbaa !23
  %2025 = zext i32 %2020 to i64
  br label %2026

2026:                                             ; preds = %2023, %2026
  %2027 = phi i64 [ 0, %2023 ], [ %2219, %2026 ]
  %2028 = phi double [ %2009, %2023 ], [ %2196, %2026 ]
  %2029 = phi double [ %2008, %2023 ], [ %2160, %2026 ]
  %2030 = phi double [ %2007, %2023 ], [ %2215, %2026 ]
  %2031 = phi <2 x double> [ %2010, %2023 ], [ %2152, %2026 ]
  %2032 = phi <2 x double> [ %2011, %2023 ], [ %2145, %2026 ]
  %2033 = phi <2 x double> [ %2012, %2023 ], [ %2208, %2026 ]
  %2034 = phi <2 x double> [ %2013, %2023 ], [ %2202, %2026 ]
  %2035 = phi <2 x double> [ %2014, %2023 ], [ %2133, %2026 ]
  %2036 = phi <2 x double> [ %2015, %2023 ], [ %2158, %2026 ]
  %2037 = phi <2 x double> [ %2016, %2023 ], [ %2213, %2026 ]
  %2038 = phi <2 x double> [ %2017, %2023 ], [ %2154, %2026 ]
  %2039 = phi <2 x double> [ %2018, %2023 ], [ %2210, %2026 ]
  %2040 = shl nuw nsw i64 %2027, 1
  %2041 = getelementptr inbounds i32, ptr %142, i64 %2040
  %2042 = load i32, ptr %2041, align 4, !tbaa !5
  %2043 = ashr i32 %2042, 14
  %2044 = add nsw i32 %2043, %35
  %2045 = getelementptr inbounds i16, ptr %95, i64 %2027
  %2046 = load i16, ptr %2045, align 2, !tbaa !44
  %2047 = zext i16 %2046 to i64
  %2048 = getelementptr inbounds %struct.CompAtom, ptr %42, i64 %2047
  %2049 = getelementptr inbounds double, ptr %141, i64 %2027
  %2050 = load double, ptr %2049, align 8, !tbaa !19
  %2051 = sext i32 %2044 to i64
  %2052 = getelementptr inbounds double, ptr %2024, i64 %2051
  %2053 = load double, ptr %2052, align 8, !tbaa !19
  %2054 = fsub double %2050, %2053
  %2055 = shl nsw i32 %2044, 4
  %2056 = sext i32 %2055 to i64
  %2057 = getelementptr inbounds double, ptr %27, i64 %2056
  %2058 = getelementptr inbounds %struct.CompAtom, ptr %42, i64 %2047, i32 2
  %2059 = load i16, ptr %2058, align 4, !tbaa !80
  %2060 = sext i16 %2059 to i32
  %2061 = shl nsw i32 %2060, 1
  %2062 = sext i32 %2061 to i64
  %2063 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %1818, i64 %2062
  %2064 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %2063, i64 1
  %2065 = getelementptr inbounds %class.Vector, ptr %626, i64 %2047
  %2066 = getelementptr inbounds %class.Vector, ptr %630, i64 %2047
  %2067 = getelementptr inbounds %struct.CompAtom, ptr %42, i64 %2047, i32 1
  %2068 = load float, ptr %2067, align 8, !tbaa !79
  %2069 = fpext float %2068 to double
  %2070 = fmul double %1809, %2069
  %2071 = load <2 x double>, ptr %2048, align 8, !tbaa !19
  %2072 = fsub <2 x double> %1803, %2071
  %2073 = getelementptr inbounds %class.Vector, ptr %2048, i64 0, i32 2
  %2074 = load double, ptr %2073, align 8, !tbaa !49
  %2075 = fsub double %1791, %2074
  %2076 = load double, ptr %2064, align 8, !tbaa !84
  %2077 = fmul double %29, %2076
  %2078 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %2063, i64 1, i32 1
  %2079 = load double, ptr %2078, align 8, !tbaa !86
  %2080 = load double, ptr %2057, align 8, !tbaa !19
  %2081 = getelementptr inbounds double, ptr %2057, i64 2
  %2082 = load double, ptr %2081, align 8, !tbaa !19
  %2083 = fmul double %2079, %664
  %2084 = fmul double %2083, %2082
  %2085 = tail call double @llvm.fmuladd.f64(double %2077, double %2080, double %2084)
  %2086 = getelementptr inbounds double, ptr %2057, i64 1
  %2087 = load double, ptr %2086, align 8, !tbaa !19
  %2088 = getelementptr inbounds double, ptr %2057, i64 3
  %2089 = load double, ptr %2088, align 8, !tbaa !19
  %2090 = fmul double %2083, %2089
  %2091 = tail call double @llvm.fmuladd.f64(double %2077, double %2087, double %2090)
  %2092 = getelementptr inbounds double, ptr %2057, i64 4
  %2093 = load double, ptr %2092, align 8, !tbaa !19
  %2094 = getelementptr inbounds double, ptr %2057, i64 6
  %2095 = load double, ptr %2094, align 8, !tbaa !19
  %2096 = fmul double %2083, %2095
  %2097 = tail call double @llvm.fmuladd.f64(double %2077, double %2093, double %2096)
  %2098 = getelementptr inbounds double, ptr %2057, i64 5
  %2099 = load double, ptr %2098, align 8, !tbaa !19
  %2100 = getelementptr inbounds double, ptr %2057, i64 7
  %2101 = load double, ptr %2100, align 8, !tbaa !19
  %2102 = fmul double %2083, %2101
  %2103 = tail call double @llvm.fmuladd.f64(double %2077, double %2099, double %2102)
  %2104 = fmul double %665, %2070
  %2105 = getelementptr inbounds double, ptr %2057, i64 8
  %2106 = load double, ptr %2105, align 8, !tbaa !19
  %2107 = fmul double %2104, %2106
  %2108 = getelementptr inbounds double, ptr %2057, i64 9
  %2109 = load double, ptr %2108, align 8, !tbaa !19
  %2110 = fmul double %2104, %2109
  %2111 = getelementptr inbounds double, ptr %2057, i64 10
  %2112 = load double, ptr %2111, align 8, !tbaa !19
  %2113 = fmul double %2104, %2112
  %2114 = getelementptr inbounds double, ptr %2057, i64 11
  %2115 = load double, ptr %2114, align 8, !tbaa !19
  %2116 = fmul double %2104, %2115
  %2117 = insertelement <2 x double> poison, double %2054, i64 0
  %2118 = shufflevector <2 x double> %2117, <2 x double> poison, <2 x i32> zeroinitializer
  %2119 = insertelement <2 x double> poison, double %2107, i64 0
  %2120 = insertelement <2 x double> %2119, double %2085, i64 1
  %2121 = fmul <2 x double> %2118, %2120
  %2122 = insertelement <2 x double> poison, double %2110, i64 0
  %2123 = insertelement <2 x double> %2122, double %2091, i64 1
  %2124 = fmul <2 x double> %2123, <double 2.500000e-01, double 2.500000e-01>
  %2125 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2121, <2 x double> <double 0x3FC5555555555555, double 0x3FC5555555555555>, <2 x double> %2124)
  %2126 = insertelement <2 x double> poison, double %2113, i64 0
  %2127 = insertelement <2 x double> %2126, double %2097, i64 1
  %2128 = fmul <2 x double> %2127, <double 5.000000e-01, double 5.000000e-01>
  %2129 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2125, <2 x double> %2118, <2 x double> %2128)
  %2130 = insertelement <2 x double> poison, double %2116, i64 0
  %2131 = insertelement <2 x double> %2130, double %2103, i64 1
  %2132 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2129, <2 x double> %2118, <2 x double> %2131)
  %2133 = fsub <2 x double> %2035, %2132
  %2134 = fadd double %2085, %2107
  %2135 = fadd double %2091, %2110
  %2136 = fadd double %2097, %2113
  %2137 = tail call double @llvm.fmuladd.f64(double %2054, double %2134, double %2135)
  %2138 = tail call double @llvm.fmuladd.f64(double %2137, double %2054, double %2136)
  %2139 = extractelement <2 x double> %2072, i64 1
  %2140 = fmul double %2139, %2138
  %2141 = insertelement <2 x double> poison, double %2140, i64 0
  %2142 = shufflevector <2 x double> %2141, <2 x double> poison, <2 x i32> zeroinitializer
  %2143 = shufflevector <2 x double> %2072, <2 x double> poison, <2 x i32> <i32 1, i32 0>
  %2144 = insertelement <2 x double> %2143, double %2075, i64 1
  %2145 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2142, <2 x double> %2144, <2 x double> %2032)
  %2146 = insertelement <2 x double> %2143, double %2075, i64 0
  %2147 = insertelement <2 x double> poison, double %2138, i64 0
  %2148 = shufflevector <2 x double> %2147, <2 x double> poison, <2 x i32> zeroinitializer
  %2149 = fmul <2 x double> %2146, %2148
  %2150 = shufflevector <2 x double> %2149, <2 x double> poison, <2 x i32> <i32 1, i32 poison>
  %2151 = shufflevector <2 x double> %2149, <2 x double> poison, <2 x i32> <i32 1, i32 1>
  %2152 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2151, <2 x double> %2072, <2 x double> %2031)
  %2153 = insertelement <2 x double> %2150, double %2140, i64 1
  %2154 = fadd <2 x double> %2038, %2153
  %2155 = load <2 x double>, ptr %2065, align 8, !tbaa !19
  %2156 = fsub <2 x double> %2155, %2153
  store <2 x double> %2156, ptr %2065, align 8, !tbaa !19
  %2157 = shufflevector <2 x double> %2146, <2 x double> poison, <2 x i32> zeroinitializer
  %2158 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2149, <2 x double> %2157, <2 x double> %2036)
  %2159 = extractelement <2 x double> %2149, i64 0
  %2160 = fadd double %2029, %2159
  %2161 = getelementptr inbounds %class.Vector, ptr %626, i64 %2047, i32 2
  %2162 = load double, ptr %2161, align 8, !tbaa !87
  %2163 = fsub double %2162, %2159
  store double %2163, ptr %2161, align 8, !tbaa !87
  %2164 = shl nsw i32 %2044, 2
  %2165 = sext i32 %2164 to i64
  %2166 = getelementptr inbounds double, ptr %28, i64 %2165
  %2167 = getelementptr inbounds double, ptr %2057, i64 12
  %2168 = load double, ptr %2167, align 8, !tbaa !19
  %2169 = getelementptr inbounds double, ptr %2057, i64 13
  %2170 = load double, ptr %2169, align 8, !tbaa !19
  %2171 = getelementptr inbounds double, ptr %2057, i64 14
  %2172 = load double, ptr %2171, align 8, !tbaa !19
  %2173 = getelementptr inbounds double, ptr %2057, i64 15
  %2174 = load double, ptr %2173, align 8, !tbaa !19
  %2175 = load double, ptr %2166, align 8, !tbaa !19
  %2176 = tail call double @llvm.fmuladd.f64(double %31, double %2175, double %2174)
  %2177 = getelementptr inbounds double, ptr %2166, i64 1
  %2178 = load double, ptr %2177, align 8, !tbaa !19
  %2179 = tail call double @llvm.fmuladd.f64(double %666, double %2178, double %2172)
  %2180 = getelementptr inbounds double, ptr %2166, i64 2
  %2181 = load double, ptr %2180, align 8, !tbaa !19
  %2182 = tail call double @llvm.fmuladd.f64(double %667, double %2181, double %2170)
  %2183 = getelementptr inbounds double, ptr %2166, i64 3
  %2184 = load double, ptr %2183, align 8, !tbaa !19
  %2185 = tail call double @llvm.fmuladd.f64(double %668, double %2184, double %2168)
  %2186 = fmul double %2070, %2185
  %2187 = fmul double %2070, %2182
  %2188 = fmul double %2070, %2179
  %2189 = fmul double %2070, %2176
  %2190 = fmul double %2054, %2186
  %2191 = fmul double %2187, 2.500000e-01
  %2192 = tail call double @llvm.fmuladd.f64(double %2190, double 0x3FC5555555555555, double %2191)
  %2193 = fmul double %2188, 5.000000e-01
  %2194 = tail call double @llvm.fmuladd.f64(double %2192, double %2054, double %2193)
  %2195 = tail call double @llvm.fmuladd.f64(double %2194, double %2054, double %2189)
  %2196 = fsub double %2028, %2195
  %2197 = tail call double @llvm.fmuladd.f64(double %2054, double %2186, double %2187)
  %2198 = tail call double @llvm.fmuladd.f64(double %2197, double %2054, double %2188)
  %2199 = fmul double %2139, %2198
  %2200 = insertelement <2 x double> poison, double %2199, i64 0
  %2201 = shufflevector <2 x double> %2200, <2 x double> poison, <2 x i32> zeroinitializer
  %2202 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2201, <2 x double> %2144, <2 x double> %2034)
  %2203 = insertelement <2 x double> poison, double %2198, i64 0
  %2204 = shufflevector <2 x double> %2203, <2 x double> poison, <2 x i32> zeroinitializer
  %2205 = fmul <2 x double> %2146, %2204
  %2206 = shufflevector <2 x double> %2205, <2 x double> poison, <2 x i32> <i32 1, i32 poison>
  %2207 = shufflevector <2 x double> %2205, <2 x double> poison, <2 x i32> <i32 1, i32 1>
  %2208 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2207, <2 x double> %2072, <2 x double> %2033)
  %2209 = insertelement <2 x double> %2206, double %2199, i64 1
  %2210 = fadd <2 x double> %2039, %2209
  %2211 = load <2 x double>, ptr %2066, align 8, !tbaa !19
  %2212 = fsub <2 x double> %2211, %2209
  store <2 x double> %2212, ptr %2066, align 8, !tbaa !19
  %2213 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2205, <2 x double> %2157, <2 x double> %2037)
  %2214 = extractelement <2 x double> %2205, i64 0
  %2215 = fadd double %2030, %2214
  %2216 = getelementptr inbounds %class.Vector, ptr %630, i64 %2047, i32 2
  %2217 = load double, ptr %2216, align 8, !tbaa !87
  %2218 = fsub double %2217, %2214
  store double %2218, ptr %2216, align 8, !tbaa !87
  %2219 = add nuw nsw i64 %2027, 1
  %2220 = icmp eq i64 %2219, %2025
  br i1 %2220, label %2221, label %2026

2221:                                             ; preds = %2026, %2006
  %2222 = phi double [ %2007, %2006 ], [ %2215, %2026 ]
  %2223 = phi double [ %2008, %2006 ], [ %2160, %2026 ]
  %2224 = phi double [ %2009, %2006 ], [ %2196, %2026 ]
  %2225 = phi <2 x double> [ %2010, %2006 ], [ %2152, %2026 ]
  %2226 = phi <2 x double> [ %2011, %2006 ], [ %2145, %2026 ]
  %2227 = phi <2 x double> [ %2012, %2006 ], [ %2208, %2026 ]
  %2228 = phi <2 x double> [ %2013, %2006 ], [ %2202, %2026 ]
  %2229 = phi <2 x double> [ %2014, %2006 ], [ %2133, %2026 ]
  %2230 = phi <2 x double> [ %2015, %2006 ], [ %2158, %2026 ]
  %2231 = phi <2 x double> [ %2016, %2006 ], [ %2213, %2026 ]
  %2232 = phi <2 x double> [ %2017, %2006 ], [ %2154, %2026 ]
  %2233 = phi <2 x double> [ %2018, %2006 ], [ %2210, %2026 ]
  %2234 = load double, ptr @_ZN20ComputeNonbondedUtil7cutoff2E, align 8, !tbaa !19
  %2235 = tail call noundef i32 @_Z22pairlist_from_pairlistddddPK8CompAtomPKtiPtdPd(double noundef %2234, double noundef %1820, double noundef %1821, double noundef %1791, ptr noundef %42, ptr noundef %1795, i32 noundef %1796, ptr noundef %95, double noundef %32, ptr noundef %141)
  %2236 = add nsw i32 %2021, %2235
  %2237 = icmp sgt i32 %2235, 0
  br i1 %2237, label %2238, label %2339

2238:                                             ; preds = %2221
  %2239 = load ptr, ptr @_ZN20ComputeNonbondedUtil8r2_tableE, align 8, !tbaa !23
  %2240 = zext i32 %2235 to i64
  br label %2241

2241:                                             ; preds = %2238, %2241
  %2242 = phi i64 [ 0, %2238 ], [ %2337, %2241 ]
  %2243 = phi double [ %2224, %2238 ], [ %2309, %2241 ]
  %2244 = phi double [ %2222, %2238 ], [ %2333, %2241 ]
  %2245 = phi <2 x double> [ %2227, %2238 ], [ %2325, %2241 ]
  %2246 = phi <2 x double> [ %2228, %2238 ], [ %2318, %2241 ]
  %2247 = phi <2 x double> [ %2231, %2238 ], [ %2331, %2241 ]
  %2248 = phi <2 x double> [ %2233, %2238 ], [ %2327, %2241 ]
  %2249 = shl nuw nsw i64 %2242, 1
  %2250 = getelementptr inbounds i32, ptr %142, i64 %2249
  %2251 = load i32, ptr %2250, align 4, !tbaa !5
  %2252 = ashr i32 %2251, 14
  %2253 = add nsw i32 %2252, %35
  %2254 = getelementptr inbounds i16, ptr %95, i64 %2242
  %2255 = load i16, ptr %2254, align 2, !tbaa !44
  %2256 = zext i16 %2255 to i64
  %2257 = getelementptr inbounds %struct.CompAtom, ptr %42, i64 %2256
  %2258 = getelementptr inbounds double, ptr %141, i64 %2242
  %2259 = load double, ptr %2258, align 8, !tbaa !19
  %2260 = sext i32 %2253 to i64
  %2261 = getelementptr inbounds double, ptr %2239, i64 %2260
  %2262 = load double, ptr %2261, align 8, !tbaa !19
  %2263 = fsub double %2259, %2262
  %2264 = shl nsw i32 %2253, 4
  %2265 = sext i32 %2264 to i64
  %2266 = getelementptr inbounds double, ptr %27, i64 %2265
  %2267 = getelementptr inbounds %class.Vector, ptr %630, i64 %2256
  %2268 = getelementptr inbounds %struct.CompAtom, ptr %42, i64 %2256, i32 1
  %2269 = load float, ptr %2268, align 8, !tbaa !79
  %2270 = fpext float %2269 to double
  %2271 = fmul double %1809, %2270
  %2272 = load <2 x double>, ptr %2257, align 8, !tbaa !19
  %2273 = fsub <2 x double> %1803, %2272
  %2274 = getelementptr inbounds %class.Vector, ptr %2257, i64 0, i32 2
  %2275 = load double, ptr %2274, align 8, !tbaa !49
  %2276 = fsub double %1791, %2275
  %2277 = shl nsw i32 %2253, 2
  %2278 = sext i32 %2277 to i64
  %2279 = getelementptr inbounds double, ptr %28, i64 %2278
  %2280 = getelementptr inbounds double, ptr %2266, i64 12
  %2281 = load double, ptr %2280, align 8, !tbaa !19
  %2282 = getelementptr inbounds double, ptr %2266, i64 13
  %2283 = load double, ptr %2282, align 8, !tbaa !19
  %2284 = getelementptr inbounds double, ptr %2266, i64 14
  %2285 = load double, ptr %2284, align 8, !tbaa !19
  %2286 = getelementptr inbounds double, ptr %2266, i64 15
  %2287 = load double, ptr %2286, align 8, !tbaa !19
  %2288 = load double, ptr %2279, align 8, !tbaa !19
  %2289 = fadd double %2287, %2288
  %2290 = getelementptr inbounds double, ptr %2279, i64 1
  %2291 = load double, ptr %2290, align 8, !tbaa !19
  %2292 = tail call double @llvm.fmuladd.f64(double %2291, double 2.000000e+00, double %2285)
  %2293 = getelementptr inbounds double, ptr %2279, i64 2
  %2294 = load double, ptr %2293, align 8, !tbaa !19
  %2295 = tail call double @llvm.fmuladd.f64(double %2294, double 4.000000e+00, double %2283)
  %2296 = getelementptr inbounds double, ptr %2279, i64 3
  %2297 = load double, ptr %2296, align 8, !tbaa !19
  %2298 = tail call double @llvm.fmuladd.f64(double %2297, double 6.000000e+00, double %2281)
  %2299 = fmul double %2271, %2298
  %2300 = fmul double %2271, %2295
  %2301 = fmul double %2271, %2292
  %2302 = fmul double %2271, %2289
  %2303 = fmul double %2263, %2299
  %2304 = fmul double %2300, 2.500000e-01
  %2305 = tail call double @llvm.fmuladd.f64(double %2303, double 0x3FC5555555555555, double %2304)
  %2306 = fmul double %2301, 5.000000e-01
  %2307 = tail call double @llvm.fmuladd.f64(double %2305, double %2263, double %2306)
  %2308 = tail call double @llvm.fmuladd.f64(double %2307, double %2263, double %2302)
  %2309 = fsub double %2243, %2308
  %2310 = tail call double @llvm.fmuladd.f64(double %2263, double %2299, double %2300)
  %2311 = tail call double @llvm.fmuladd.f64(double %2310, double %2263, double %2301)
  %2312 = extractelement <2 x double> %2273, i64 1
  %2313 = fmul double %2312, %2311
  %2314 = insertelement <2 x double> poison, double %2313, i64 0
  %2315 = shufflevector <2 x double> %2314, <2 x double> poison, <2 x i32> zeroinitializer
  %2316 = shufflevector <2 x double> %2273, <2 x double> poison, <2 x i32> <i32 1, i32 0>
  %2317 = insertelement <2 x double> %2316, double %2276, i64 1
  %2318 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2315, <2 x double> %2317, <2 x double> %2246)
  %2319 = insertelement <2 x double> %2316, double %2276, i64 0
  %2320 = insertelement <2 x double> poison, double %2311, i64 0
  %2321 = shufflevector <2 x double> %2320, <2 x double> poison, <2 x i32> zeroinitializer
  %2322 = fmul <2 x double> %2319, %2321
  %2323 = shufflevector <2 x double> %2322, <2 x double> poison, <2 x i32> <i32 1, i32 poison>
  %2324 = shufflevector <2 x double> %2322, <2 x double> poison, <2 x i32> <i32 1, i32 1>
  %2325 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2324, <2 x double> %2273, <2 x double> %2245)
  %2326 = insertelement <2 x double> %2323, double %2313, i64 1
  %2327 = fadd <2 x double> %2248, %2326
  %2328 = load <2 x double>, ptr %2267, align 8, !tbaa !19
  %2329 = fsub <2 x double> %2328, %2326
  store <2 x double> %2329, ptr %2267, align 8, !tbaa !19
  %2330 = shufflevector <2 x double> %2319, <2 x double> poison, <2 x i32> zeroinitializer
  %2331 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2322, <2 x double> %2330, <2 x double> %2247)
  %2332 = extractelement <2 x double> %2322, i64 0
  %2333 = fadd double %2244, %2332
  %2334 = getelementptr inbounds %class.Vector, ptr %630, i64 %2256, i32 2
  %2335 = load double, ptr %2334, align 8, !tbaa !87
  %2336 = fsub double %2335, %2332
  store double %2336, ptr %2334, align 8, !tbaa !87
  %2337 = add nuw nsw i64 %2242, 1
  %2338 = icmp eq i64 %2337, %2240
  br i1 %2338, label %2339, label %2241

2339:                                             ; preds = %2241, %2221
  %2340 = phi double [ %2222, %2221 ], [ %2333, %2241 ]
  %2341 = phi double [ %2224, %2221 ], [ %2309, %2241 ]
  %2342 = phi <2 x double> [ %2227, %2221 ], [ %2325, %2241 ]
  %2343 = phi <2 x double> [ %2228, %2221 ], [ %2318, %2241 ]
  %2344 = phi <2 x double> [ %2231, %2221 ], [ %2331, %2241 ]
  %2345 = phi <2 x double> [ %2233, %2221 ], [ %2327, %2241 ]
  %2346 = getelementptr inbounds %class.Vector, ptr %624, i64 %687
  %2347 = load <2 x double>, ptr %2346, align 8, !tbaa !19
  %2348 = fadd <2 x double> %2232, %2347
  store <2 x double> %2348, ptr %2346, align 8, !tbaa !19
  %2349 = getelementptr inbounds %class.Vector, ptr %624, i64 %687, i32 2
  %2350 = load double, ptr %2349, align 8, !tbaa !87
  %2351 = fadd double %2223, %2350
  store double %2351, ptr %2349, align 8, !tbaa !87
  %2352 = getelementptr inbounds %class.Vector, ptr %628, i64 %687
  %2353 = load <2 x double>, ptr %2352, align 8, !tbaa !19
  %2354 = fadd <2 x double> %2345, %2353
  store <2 x double> %2354, ptr %2352, align 8, !tbaa !19
  %2355 = getelementptr inbounds %class.Vector, ptr %628, i64 %687, i32 2
  %2356 = load double, ptr %2355, align 8, !tbaa !87
  %2357 = fadd double %2340, %2356
  store double %2357, ptr %2355, align 8, !tbaa !87
  br i1 %145, label %2360, label %2358

2358:                                             ; preds = %2339
  %2359 = add nsw i32 %674, 1
  br label %2368

2360:                                             ; preds = %2339
  %2361 = load ptr, ptr %8, align 8, !tbaa !46
  %2362 = load i32, ptr %13, align 8, !tbaa !17
  %2363 = add nsw i32 %2362, 1
  store i32 %2363, ptr %13, align 8, !tbaa !17
  %2364 = sext i32 %2362 to i64
  %2365 = getelementptr inbounds i16, ptr %2361, i64 %2364
  %2366 = load i16, ptr %2365, align 2, !tbaa !44
  %2367 = zext i16 %2366 to i32
  br label %2368

2368:                                             ; preds = %1129, %1397, %2360, %2358, %699
  %2369 = phi i32 [ %1792, %2360 ], [ %1792, %2358 ], [ %700, %699 ], [ %703, %1397 ], [ %703, %1129 ]
  %2370 = phi i32 [ %1799, %2360 ], [ %1799, %2358 ], [ %678, %699 ], [ %1143, %1397 ], [ 0, %1129 ]
  %2371 = phi ptr [ %1800, %2360 ], [ %1800, %2358 ], [ %677, %699 ], [ %953, %1397 ], [ %953, %1129 ]
  %2372 = phi ptr [ %1801, %2360 ], [ %1801, %2358 ], [ %676, %699 ], [ %954, %1397 ], [ %954, %1129 ]
  %2373 = phi ptr [ %1802, %2360 ], [ %1802, %2358 ], [ %675, %699 ], [ %955, %1397 ], [ %955, %1129 ]
  %2374 = phi i32 [ %2367, %2360 ], [ %2359, %2358 ], [ %701, %699 ], [ %1398, %1397 ], [ %1133, %1129 ]
  %2375 = phi double [ %2341, %2360 ], [ %2341, %2358 ], [ %673, %699 ], [ %673, %1397 ], [ %673, %1129 ]
  %2376 = phi i32 [ %2236, %2360 ], [ %2236, %2358 ], [ %672, %699 ], [ %672, %1397 ], [ %672, %1129 ]
  %2377 = phi <2 x double> [ %2225, %2360 ], [ %2225, %2358 ], [ %680, %699 ], [ %680, %1397 ], [ %680, %1129 ]
  %2378 = phi <2 x double> [ %2226, %2360 ], [ %2226, %2358 ], [ %681, %699 ], [ %681, %1397 ], [ %681, %1129 ]
  %2379 = phi <2 x double> [ %2342, %2360 ], [ %2342, %2358 ], [ %682, %699 ], [ %682, %1397 ], [ %682, %1129 ]
  %2380 = phi <2 x double> [ %2343, %2360 ], [ %2343, %2358 ], [ %683, %699 ], [ %683, %1397 ], [ %683, %1129 ]
  %2381 = phi <2 x double> [ %2229, %2360 ], [ %2229, %2358 ], [ %684, %699 ], [ %684, %1397 ], [ %684, %1129 ]
  %2382 = phi <2 x double> [ %2230, %2360 ], [ %2230, %2358 ], [ %685, %699 ], [ %685, %1397 ], [ %685, %1129 ]
  %2383 = phi <2 x double> [ %2344, %2360 ], [ %2344, %2358 ], [ %686, %699 ], [ %686, %1397 ], [ %686, %1129 ]
  %2384 = icmp slt i32 %2374, %37
  br i1 %2384, label %671, label %2385

2385:                                             ; preds = %2368, %645
  %2386 = phi ptr [ null, %645 ], [ %2373, %2368 ]
  %2387 = phi i32 [ %647, %645 ], [ %2374, %2368 ]
  %2388 = phi double [ 0.000000e+00, %645 ], [ %2375, %2368 ]
  %2389 = phi i32 [ 0, %645 ], [ %2376, %2368 ]
  %2390 = phi <2 x double> [ zeroinitializer, %645 ], [ %2377, %2368 ]
  %2391 = phi <2 x double> [ zeroinitializer, %645 ], [ %2378, %2368 ]
  %2392 = phi <2 x double> [ zeroinitializer, %645 ], [ %2379, %2368 ]
  %2393 = phi <2 x double> [ zeroinitializer, %645 ], [ %2380, %2368 ]
  %2394 = phi <2 x double> [ zeroinitializer, %645 ], [ %2381, %2368 ]
  %2395 = phi <2 x double> [ zeroinitializer, %645 ], [ %2382, %2368 ]
  %2396 = phi <2 x double> [ zeroinitializer, %645 ], [ %2383, %2368 ]
  br i1 %143, label %2404, label %2397

2397:                                             ; preds = %2385
  %2398 = trunc i32 %2387 to i16
  %2399 = load ptr, ptr %8, align 8, !tbaa !46
  %2400 = load i32, ptr %13, align 8, !tbaa !17
  %2401 = add nsw i32 %2400, -1
  %2402 = sext i32 %2401 to i64
  %2403 = getelementptr inbounds i16, ptr %2399, i64 %2402
  store i16 %2398, ptr %2403, align 2, !tbaa !44
  br label %2404

2404:                                             ; preds = %2397, %2385
  %2405 = sitofp i32 %2389 to double
  %2406 = getelementptr inbounds double, ptr %6, i64 22
  %2407 = load double, ptr %2406, align 8, !tbaa !19
  %2408 = fadd double %2407, %2405
  store double %2408, ptr %2406, align 8, !tbaa !19
  %2409 = getelementptr inbounds double, ptr %6, i64 2
  %2410 = load double, ptr %2409, align 8, !tbaa !19
  %2411 = extractelement <2 x double> %2394, i64 1
  %2412 = fadd double %2411, %2410
  store double %2412, ptr %2409, align 8, !tbaa !19
  %2413 = load double, ptr %6, align 8, !tbaa !19
  %2414 = extractelement <2 x double> %2394, i64 0
  %2415 = fadd double %2414, %2413
  store double %2415, ptr %6, align 8, !tbaa !19
  %2416 = getelementptr inbounds double, ptr %6, i64 3
  %2417 = load <4 x double>, ptr %2416, align 8, !tbaa !19
  %2418 = shufflevector <2 x double> %2390, <2 x double> %2395, <4 x i32> <i32 0, i32 1, i32 3, i32 poison>
  %2419 = shufflevector <4 x double> %2418, <4 x double> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 1>
  %2420 = fadd <4 x double> %2419, %2417
  store <4 x double> %2420, ptr %2416, align 8, !tbaa !19
  %2421 = getelementptr inbounds double, ptr %6, i64 7
  %2422 = load <4 x double>, ptr %2421, align 8, !tbaa !19
  %2423 = shufflevector <2 x double> %2391, <2 x double> %2395, <4 x i32> <i32 0, i32 1, i32 3, i32 poison>
  %2424 = shufflevector <4 x double> %2423, <4 x double> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 1>
  %2425 = fadd <4 x double> %2424, %2422
  store <4 x double> %2425, ptr %2421, align 8, !tbaa !19
  %2426 = getelementptr inbounds double, ptr %6, i64 11
  %2427 = load double, ptr %2426, align 8, !tbaa !19
  %2428 = extractelement <2 x double> %2395, i64 0
  %2429 = fadd double %2428, %2427
  store double %2429, ptr %2426, align 8, !tbaa !19
  %2430 = getelementptr inbounds double, ptr %6, i64 1
  %2431 = load double, ptr %2430, align 8, !tbaa !19
  %2432 = fadd double %2388, %2431
  store double %2432, ptr %2430, align 8, !tbaa !19
  %2433 = getelementptr inbounds double, ptr %6, i64 12
  %2434 = load <4 x double>, ptr %2433, align 8, !tbaa !19
  %2435 = shufflevector <2 x double> %2392, <2 x double> %2396, <4 x i32> <i32 0, i32 1, i32 3, i32 poison>
  %2436 = shufflevector <4 x double> %2435, <4 x double> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 1>
  %2437 = fadd <4 x double> %2436, %2434
  store <4 x double> %2437, ptr %2433, align 8, !tbaa !19
  %2438 = getelementptr inbounds double, ptr %6, i64 16
  %2439 = load <4 x double>, ptr %2438, align 8, !tbaa !19
  %2440 = shufflevector <2 x double> %2393, <2 x double> %2396, <4 x i32> <i32 0, i32 1, i32 3, i32 poison>
  %2441 = shufflevector <4 x double> %2440, <4 x double> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 1>
  %2442 = fadd <4 x double> %2441, %2439
  store <4 x double> %2442, ptr %2438, align 8, !tbaa !19
  %2443 = getelementptr inbounds double, ptr %6, i64 20
  %2444 = load double, ptr %2443, align 8, !tbaa !19
  %2445 = extractelement <2 x double> %2396, i64 0
  %2446 = fadd double %2445, %2444
  store double %2446, ptr %2443, align 8, !tbaa !19
  %2447 = icmp eq ptr %2386, null
  br i1 %2447, label %2449, label %2448

2448:                                             ; preds = %2404
  tail call void @_ZdaPv(ptr noundef nonnull %2386) #10
  br label %2449

2449:                                             ; preds = %2404, %2448, %1
  ret void
}

; Function Attrs: sspstrong uwtable
define dso_local void @_ZN20ComputeNonbondedUtil25calc_pair_merge_fullelectEP9nonbonded(ptr nocapture noundef readonly %0) local_unnamed_addr #0 align 2 {
  %2 = load i32, ptr @_ZN20ComputeNonbondedUtil8commOnlyE, align 4, !tbaa !5
  %3 = icmp eq i32 %2, 0
  br i1 %3, label %4, label %2219

4:                                                ; preds = %1
  %5 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 7
  %6 = load ptr, ptr %5, align 8, !tbaa !9
  %7 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 10
  %8 = load ptr, ptr %7, align 8, !tbaa !14
  %9 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 11
  %10 = load i32, ptr %9, align 8, !tbaa !15
  %11 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 12
  %12 = load i32, ptr %11, align 4, !tbaa !16
  %13 = getelementptr inbounds %class.Pairlists, ptr %8, i64 0, i32 1
  store i32 0, ptr %13, align 8, !tbaa !17
  %14 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 6
  %15 = load <2 x double>, ptr %14, align 8, !tbaa !19
  %16 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 6, i32 2
  %17 = load double, ptr %16, align 8, !tbaa !20
  %18 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 13
  %19 = load double, ptr %18, align 8, !tbaa !21
  %20 = fmul double %19, %19
  %21 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 14
  %22 = load double, ptr %21, align 8, !tbaa !22
  %23 = fmul double %22, %22
  %24 = load double, ptr @_ZN20ComputeNonbondedUtil12dielectric_1E, align 8, !tbaa !19
  %25 = load ptr, ptr @_ZN20ComputeNonbondedUtil7ljTableE, align 8, !tbaa !23
  %26 = load ptr, ptr @_ZN20ComputeNonbondedUtil3molE, align 8, !tbaa !23
  %27 = load ptr, ptr @_ZN20ComputeNonbondedUtil13table_noshortE, align 8, !tbaa !23
  %28 = load double, ptr @_ZN20ComputeNonbondedUtil7scalingE, align 8, !tbaa !19
  %29 = load double, ptr @_ZN20ComputeNonbondedUtil7scale14E, align 8, !tbaa !19
  %30 = fsub double 1.000000e+00, %29
  %31 = load double, ptr @_ZN20ComputeNonbondedUtil8r2_deltaE, align 8, !tbaa !19
  %32 = load i32, ptr @_ZN20ComputeNonbondedUtil12r2_delta_expE, align 4, !tbaa !5
  %33 = shl i32 %32, 6
  %34 = add i32 %33, -65472
  %35 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 5
  %36 = load i32, ptr %35, align 8, !tbaa !5
  %37 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 5, i64 1
  %38 = load i32, ptr %37, align 4, !tbaa !5
  %39 = load ptr, ptr %0, align 8, !tbaa !23
  %40 = getelementptr inbounds [2 x ptr], ptr %0, i64 0, i64 1
  %41 = load ptr, ptr %40, align 8, !tbaa !23
  %42 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 1
  %43 = load ptr, ptr %42, align 8, !tbaa !23
  %44 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 1, i64 1
  %45 = load ptr, ptr %44, align 8, !tbaa !23
  %46 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 9
  %47 = load ptr, ptr %46, align 8, !tbaa !24
  %48 = add nsw i32 %38, 5
  %49 = getelementptr inbounds %class.ResizeArray, ptr %47, i64 0, i32 1
  %50 = load ptr, ptr %49, align 8, !tbaa !25
  %51 = getelementptr inbounds %class.ResizeArrayRaw, ptr %50, i64 0, i32 2
  %52 = load i32, ptr %51, align 8, !tbaa !27
  %53 = icmp slt i32 %52, %48
  br i1 %53, label %54, label %92

54:                                               ; preds = %4
  %55 = getelementptr inbounds %class.ResizeArrayRaw, ptr %50, i64 0, i32 3
  %56 = load i32, ptr %55, align 4, !tbaa !30
  %57 = icmp slt i32 %56, %48
  br i1 %57, label %58, label %92

58:                                               ; preds = %54
  %59 = sitofp i32 %56 to float
  %60 = getelementptr inbounds %class.ResizeArrayRaw, ptr %50, i64 0, i32 5
  %61 = load float, ptr %60, align 4, !tbaa !31
  %62 = fmul float %61, %59
  %63 = fptosi float %62 to i32
  %64 = tail call i32 @llvm.smax.i32(i32 %63, i32 %48)
  %65 = sub nsw i32 %64, %56
  %66 = getelementptr inbounds %class.ResizeArrayRaw, ptr %50, i64 0, i32 6
  %67 = load i32, ptr %66, align 8, !tbaa !32
  %68 = icmp slt i32 %65, %67
  %69 = add nsw i32 %67, %56
  %70 = select i1 %68, i32 %69, i32 %64
  %71 = sext i32 %70 to i64
  %72 = shl nsw i64 %71, 1
  %73 = add nsw i64 %72, 31
  %74 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %73) #9
  %75 = getelementptr inbounds i8, ptr %74, i64 31
  %76 = ptrtoint ptr %75 to i64
  %77 = and i64 %76, 31
  %78 = sub nsw i64 0, %77
  %79 = getelementptr inbounds i8, ptr %75, i64 %78
  %80 = load ptr, ptr %50, align 8, !tbaa !33
  %81 = sext i32 %52 to i64
  %82 = shl nsw i64 %81, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %79, ptr align 1 %80, i64 %82, i1 false)
  %83 = icmp eq i32 %56, 0
  br i1 %83, label %89, label %84

84:                                               ; preds = %58
  %85 = getelementptr inbounds %class.ResizeArrayRaw, ptr %50, i64 0, i32 1
  %86 = load ptr, ptr %85, align 8, !tbaa !34
  %87 = icmp eq ptr %86, null
  br i1 %87, label %89, label %88

88:                                               ; preds = %84
  tail call void @_ZdaPv(ptr noundef nonnull %86) #10
  br label %89

89:                                               ; preds = %88, %84, %58
  %90 = getelementptr inbounds %class.ResizeArrayRaw, ptr %50, i64 0, i32 1
  store ptr %74, ptr %90, align 8, !tbaa !34
  store ptr %79, ptr %50, align 8, !tbaa !33
  store i32 %70, ptr %55, align 4, !tbaa !30
  %91 = load ptr, ptr %49, align 8, !tbaa !25
  br label %92

92:                                               ; preds = %4, %54, %89
  %93 = phi ptr [ %50, %4 ], [ %50, %54 ], [ %91, %89 ]
  store i32 %48, ptr %51, align 8, !tbaa !27
  %94 = load ptr, ptr %93, align 8, !tbaa !33
  %95 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %47, i64 0, i32 1, i32 1
  %96 = load ptr, ptr %95, align 8, !tbaa !35
  %97 = getelementptr inbounds %class.ResizeArrayRaw.23, ptr %96, i64 0, i32 2
  %98 = load i32, ptr %97, align 8, !tbaa !37
  %99 = icmp slt i32 %98, %48
  br i1 %99, label %100, label %138

100:                                              ; preds = %92
  %101 = getelementptr inbounds %class.ResizeArrayRaw.23, ptr %96, i64 0, i32 3
  %102 = load i32, ptr %101, align 4, !tbaa !39
  %103 = icmp slt i32 %102, %48
  br i1 %103, label %104, label %138

104:                                              ; preds = %100
  %105 = sitofp i32 %102 to float
  %106 = getelementptr inbounds %class.ResizeArrayRaw.23, ptr %96, i64 0, i32 5
  %107 = load float, ptr %106, align 4, !tbaa !40
  %108 = fmul float %107, %105
  %109 = fptosi float %108 to i32
  %110 = tail call i32 @llvm.smax.i32(i32 %109, i32 %48)
  %111 = sub nsw i32 %110, %102
  %112 = getelementptr inbounds %class.ResizeArrayRaw.23, ptr %96, i64 0, i32 6
  %113 = load i32, ptr %112, align 8, !tbaa !41
  %114 = icmp slt i32 %111, %113
  %115 = add nsw i32 %113, %102
  %116 = select i1 %114, i32 %115, i32 %110
  %117 = sext i32 %116 to i64
  %118 = shl nsw i64 %117, 3
  %119 = add nsw i64 %118, 31
  %120 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %119) #9
  %121 = getelementptr inbounds i8, ptr %120, i64 31
  %122 = ptrtoint ptr %121 to i64
  %123 = and i64 %122, 31
  %124 = sub nsw i64 0, %123
  %125 = getelementptr inbounds i8, ptr %121, i64 %124
  %126 = load ptr, ptr %96, align 8, !tbaa !42
  %127 = sext i32 %98 to i64
  %128 = shl nsw i64 %127, 3
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %125, ptr align 1 %126, i64 %128, i1 false)
  %129 = icmp eq i32 %102, 0
  br i1 %129, label %135, label %130

130:                                              ; preds = %104
  %131 = getelementptr inbounds %class.ResizeArrayRaw.23, ptr %96, i64 0, i32 1
  %132 = load ptr, ptr %131, align 8, !tbaa !43
  %133 = icmp eq ptr %132, null
  br i1 %133, label %135, label %134

134:                                              ; preds = %130
  tail call void @_ZdaPv(ptr noundef nonnull %132) #10
  br label %135

135:                                              ; preds = %134, %130, %104
  %136 = getelementptr inbounds %class.ResizeArrayRaw.23, ptr %96, i64 0, i32 1
  store ptr %120, ptr %136, align 8, !tbaa !43
  store ptr %125, ptr %96, align 8, !tbaa !42
  store i32 %116, ptr %101, align 4, !tbaa !39
  %137 = load ptr, ptr %95, align 8, !tbaa !35
  br label %138

138:                                              ; preds = %92, %100, %135
  %139 = phi ptr [ %96, %92 ], [ %96, %100 ], [ %137, %135 ]
  store i32 %48, ptr %97, align 8, !tbaa !37
  %140 = load ptr, ptr %139, align 8, !tbaa !42
  %141 = getelementptr inbounds i32, ptr %140, i64 1
  %142 = icmp eq i32 %10, 0
  %143 = icmp ne i32 %12, 0
  %144 = select i1 %142, i1 %143, i1 false
  %145 = select i1 %144, i32 0, i32 %48
  %146 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %47, i64 0, i32 2, i32 1
  %147 = load ptr, ptr %146, align 8, !tbaa !25
  %148 = getelementptr inbounds %class.ResizeArrayRaw, ptr %147, i64 0, i32 2
  %149 = load i32, ptr %148, align 8, !tbaa !27
  %150 = icmp slt i32 %149, %145
  br i1 %150, label %151, label %189

151:                                              ; preds = %138
  %152 = getelementptr inbounds %class.ResizeArrayRaw, ptr %147, i64 0, i32 3
  %153 = load i32, ptr %152, align 4, !tbaa !30
  %154 = icmp slt i32 %153, %145
  br i1 %154, label %155, label %189

155:                                              ; preds = %151
  %156 = sitofp i32 %153 to float
  %157 = getelementptr inbounds %class.ResizeArrayRaw, ptr %147, i64 0, i32 5
  %158 = load float, ptr %157, align 4, !tbaa !31
  %159 = fmul float %158, %156
  %160 = fptosi float %159 to i32
  %161 = tail call i32 @llvm.smax.i32(i32 %160, i32 %145)
  %162 = sub nsw i32 %161, %153
  %163 = getelementptr inbounds %class.ResizeArrayRaw, ptr %147, i64 0, i32 6
  %164 = load i32, ptr %163, align 8, !tbaa !32
  %165 = icmp slt i32 %162, %164
  %166 = add nsw i32 %164, %153
  %167 = select i1 %165, i32 %166, i32 %161
  %168 = sext i32 %167 to i64
  %169 = shl nsw i64 %168, 1
  %170 = add nsw i64 %169, 31
  %171 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %170) #9
  %172 = getelementptr inbounds i8, ptr %171, i64 31
  %173 = ptrtoint ptr %172 to i64
  %174 = and i64 %173, 31
  %175 = sub nsw i64 0, %174
  %176 = getelementptr inbounds i8, ptr %172, i64 %175
  %177 = load ptr, ptr %147, align 8, !tbaa !33
  %178 = sext i32 %149 to i64
  %179 = shl nsw i64 %178, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %176, ptr align 1 %177, i64 %179, i1 false)
  %180 = icmp eq i32 %153, 0
  br i1 %180, label %186, label %181

181:                                              ; preds = %155
  %182 = getelementptr inbounds %class.ResizeArrayRaw, ptr %147, i64 0, i32 1
  %183 = load ptr, ptr %182, align 8, !tbaa !34
  %184 = icmp eq ptr %183, null
  br i1 %184, label %186, label %185

185:                                              ; preds = %181
  tail call void @_ZdaPv(ptr noundef nonnull %183) #10
  br label %186

186:                                              ; preds = %185, %181, %155
  %187 = getelementptr inbounds %class.ResizeArrayRaw, ptr %147, i64 0, i32 1
  store ptr %171, ptr %187, align 8, !tbaa !34
  store ptr %176, ptr %147, align 8, !tbaa !33
  store i32 %167, ptr %152, align 4, !tbaa !30
  %188 = load ptr, ptr %146, align 8, !tbaa !25
  br label %189

189:                                              ; preds = %138, %151, %186
  %190 = phi ptr [ %147, %138 ], [ %147, %151 ], [ %188, %186 ]
  store i32 %145, ptr %148, align 8, !tbaa !27
  %191 = load ptr, ptr %190, align 8, !tbaa !33
  %192 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %47, i64 0, i32 3, i32 1
  %193 = load ptr, ptr %192, align 8, !tbaa !25
  %194 = getelementptr inbounds %class.ResizeArrayRaw, ptr %193, i64 0, i32 2
  %195 = load i32, ptr %194, align 8, !tbaa !27
  %196 = icmp slt i32 %195, %145
  br i1 %196, label %197, label %235

197:                                              ; preds = %189
  %198 = getelementptr inbounds %class.ResizeArrayRaw, ptr %193, i64 0, i32 3
  %199 = load i32, ptr %198, align 4, !tbaa !30
  %200 = icmp slt i32 %199, %145
  br i1 %200, label %201, label %235

201:                                              ; preds = %197
  %202 = sitofp i32 %199 to float
  %203 = getelementptr inbounds %class.ResizeArrayRaw, ptr %193, i64 0, i32 5
  %204 = load float, ptr %203, align 4, !tbaa !31
  %205 = fmul float %204, %202
  %206 = fptosi float %205 to i32
  %207 = tail call i32 @llvm.smax.i32(i32 %206, i32 %145)
  %208 = sub nsw i32 %207, %199
  %209 = getelementptr inbounds %class.ResizeArrayRaw, ptr %193, i64 0, i32 6
  %210 = load i32, ptr %209, align 8, !tbaa !32
  %211 = icmp slt i32 %208, %210
  %212 = add nsw i32 %210, %199
  %213 = select i1 %211, i32 %212, i32 %207
  %214 = sext i32 %213 to i64
  %215 = shl nsw i64 %214, 1
  %216 = add nsw i64 %215, 31
  %217 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %216) #9
  %218 = getelementptr inbounds i8, ptr %217, i64 31
  %219 = ptrtoint ptr %218 to i64
  %220 = and i64 %219, 31
  %221 = sub nsw i64 0, %220
  %222 = getelementptr inbounds i8, ptr %218, i64 %221
  %223 = load ptr, ptr %193, align 8, !tbaa !33
  %224 = sext i32 %195 to i64
  %225 = shl nsw i64 %224, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %222, ptr align 1 %223, i64 %225, i1 false)
  %226 = icmp eq i32 %199, 0
  br i1 %226, label %232, label %227

227:                                              ; preds = %201
  %228 = getelementptr inbounds %class.ResizeArrayRaw, ptr %193, i64 0, i32 1
  %229 = load ptr, ptr %228, align 8, !tbaa !34
  %230 = icmp eq ptr %229, null
  br i1 %230, label %232, label %231

231:                                              ; preds = %227
  tail call void @_ZdaPv(ptr noundef nonnull %229) #10
  br label %232

232:                                              ; preds = %231, %227, %201
  %233 = getelementptr inbounds %class.ResizeArrayRaw, ptr %193, i64 0, i32 1
  store ptr %217, ptr %233, align 8, !tbaa !34
  store ptr %222, ptr %193, align 8, !tbaa !33
  store i32 %213, ptr %198, align 4, !tbaa !30
  %234 = load ptr, ptr %192, align 8, !tbaa !25
  br label %235

235:                                              ; preds = %189, %197, %232
  %236 = phi ptr [ %193, %189 ], [ %193, %197 ], [ %234, %232 ]
  store i32 %145, ptr %194, align 8, !tbaa !27
  %237 = load ptr, ptr %236, align 8, !tbaa !33
  %238 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %47, i64 0, i32 4, i32 1
  %239 = load ptr, ptr %238, align 8, !tbaa !25
  %240 = getelementptr inbounds %class.ResizeArrayRaw, ptr %239, i64 0, i32 2
  %241 = load i32, ptr %240, align 8, !tbaa !27
  %242 = icmp slt i32 %241, %145
  br i1 %242, label %243, label %281

243:                                              ; preds = %235
  %244 = getelementptr inbounds %class.ResizeArrayRaw, ptr %239, i64 0, i32 3
  %245 = load i32, ptr %244, align 4, !tbaa !30
  %246 = icmp slt i32 %245, %145
  br i1 %246, label %247, label %281

247:                                              ; preds = %243
  %248 = sitofp i32 %245 to float
  %249 = getelementptr inbounds %class.ResizeArrayRaw, ptr %239, i64 0, i32 5
  %250 = load float, ptr %249, align 4, !tbaa !31
  %251 = fmul float %250, %248
  %252 = fptosi float %251 to i32
  %253 = tail call i32 @llvm.smax.i32(i32 %252, i32 %145)
  %254 = sub nsw i32 %253, %245
  %255 = getelementptr inbounds %class.ResizeArrayRaw, ptr %239, i64 0, i32 6
  %256 = load i32, ptr %255, align 8, !tbaa !32
  %257 = icmp slt i32 %254, %256
  %258 = add nsw i32 %256, %245
  %259 = select i1 %257, i32 %258, i32 %253
  %260 = sext i32 %259 to i64
  %261 = shl nsw i64 %260, 1
  %262 = add nsw i64 %261, 31
  %263 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %262) #9
  %264 = getelementptr inbounds i8, ptr %263, i64 31
  %265 = ptrtoint ptr %264 to i64
  %266 = and i64 %265, 31
  %267 = sub nsw i64 0, %266
  %268 = getelementptr inbounds i8, ptr %264, i64 %267
  %269 = load ptr, ptr %239, align 8, !tbaa !33
  %270 = sext i32 %241 to i64
  %271 = shl nsw i64 %270, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %268, ptr align 1 %269, i64 %271, i1 false)
  %272 = icmp eq i32 %245, 0
  br i1 %272, label %278, label %273

273:                                              ; preds = %247
  %274 = getelementptr inbounds %class.ResizeArrayRaw, ptr %239, i64 0, i32 1
  %275 = load ptr, ptr %274, align 8, !tbaa !34
  %276 = icmp eq ptr %275, null
  br i1 %276, label %278, label %277

277:                                              ; preds = %273
  tail call void @_ZdaPv(ptr noundef nonnull %275) #10
  br label %278

278:                                              ; preds = %277, %273, %247
  %279 = getelementptr inbounds %class.ResizeArrayRaw, ptr %239, i64 0, i32 1
  store ptr %263, ptr %279, align 8, !tbaa !34
  store ptr %268, ptr %239, align 8, !tbaa !33
  store i32 %259, ptr %244, align 4, !tbaa !30
  %280 = load ptr, ptr %238, align 8, !tbaa !25
  br label %281

281:                                              ; preds = %235, %243, %278
  %282 = phi ptr [ %239, %235 ], [ %239, %243 ], [ %280, %278 ]
  store i32 %145, ptr %240, align 8, !tbaa !27
  %283 = load ptr, ptr %282, align 8, !tbaa !33
  %284 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %47, i64 0, i32 5, i32 1
  %285 = load ptr, ptr %284, align 8, !tbaa !25
  %286 = getelementptr inbounds %class.ResizeArrayRaw, ptr %285, i64 0, i32 2
  %287 = load i32, ptr %286, align 8, !tbaa !27
  %288 = icmp slt i32 %287, %145
  br i1 %288, label %289, label %327

289:                                              ; preds = %281
  %290 = getelementptr inbounds %class.ResizeArrayRaw, ptr %285, i64 0, i32 3
  %291 = load i32, ptr %290, align 4, !tbaa !30
  %292 = icmp slt i32 %291, %145
  br i1 %292, label %293, label %327

293:                                              ; preds = %289
  %294 = sitofp i32 %291 to float
  %295 = getelementptr inbounds %class.ResizeArrayRaw, ptr %285, i64 0, i32 5
  %296 = load float, ptr %295, align 4, !tbaa !31
  %297 = fmul float %296, %294
  %298 = fptosi float %297 to i32
  %299 = tail call i32 @llvm.smax.i32(i32 %298, i32 %145)
  %300 = sub nsw i32 %299, %291
  %301 = getelementptr inbounds %class.ResizeArrayRaw, ptr %285, i64 0, i32 6
  %302 = load i32, ptr %301, align 8, !tbaa !32
  %303 = icmp slt i32 %300, %302
  %304 = add nsw i32 %302, %291
  %305 = select i1 %303, i32 %304, i32 %299
  %306 = sext i32 %305 to i64
  %307 = shl nsw i64 %306, 1
  %308 = add nsw i64 %307, 31
  %309 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %308) #9
  %310 = getelementptr inbounds i8, ptr %309, i64 31
  %311 = ptrtoint ptr %310 to i64
  %312 = and i64 %311, 31
  %313 = sub nsw i64 0, %312
  %314 = getelementptr inbounds i8, ptr %310, i64 %313
  %315 = load ptr, ptr %285, align 8, !tbaa !33
  %316 = sext i32 %287 to i64
  %317 = shl nsw i64 %316, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %314, ptr align 1 %315, i64 %317, i1 false)
  %318 = icmp eq i32 %291, 0
  br i1 %318, label %324, label %319

319:                                              ; preds = %293
  %320 = getelementptr inbounds %class.ResizeArrayRaw, ptr %285, i64 0, i32 1
  %321 = load ptr, ptr %320, align 8, !tbaa !34
  %322 = icmp eq ptr %321, null
  br i1 %322, label %324, label %323

323:                                              ; preds = %319
  tail call void @_ZdaPv(ptr noundef nonnull %321) #10
  br label %324

324:                                              ; preds = %323, %319, %293
  %325 = getelementptr inbounds %class.ResizeArrayRaw, ptr %285, i64 0, i32 1
  store ptr %309, ptr %325, align 8, !tbaa !34
  store ptr %314, ptr %285, align 8, !tbaa !33
  store i32 %305, ptr %290, align 4, !tbaa !30
  %326 = load ptr, ptr %284, align 8, !tbaa !25
  br label %327

327:                                              ; preds = %281, %289, %324
  %328 = phi ptr [ %285, %281 ], [ %285, %289 ], [ %326, %324 ]
  store i32 %145, ptr %286, align 8, !tbaa !27
  %329 = load ptr, ptr %328, align 8, !tbaa !33
  %330 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %47, i64 0, i32 6, i32 1
  %331 = load ptr, ptr %330, align 8, !tbaa !25
  %332 = getelementptr inbounds %class.ResizeArrayRaw, ptr %331, i64 0, i32 2
  %333 = load i32, ptr %332, align 8, !tbaa !27
  %334 = icmp slt i32 %333, %145
  br i1 %334, label %335, label %373

335:                                              ; preds = %327
  %336 = getelementptr inbounds %class.ResizeArrayRaw, ptr %331, i64 0, i32 3
  %337 = load i32, ptr %336, align 4, !tbaa !30
  %338 = icmp slt i32 %337, %145
  br i1 %338, label %339, label %373

339:                                              ; preds = %335
  %340 = sitofp i32 %337 to float
  %341 = getelementptr inbounds %class.ResizeArrayRaw, ptr %331, i64 0, i32 5
  %342 = load float, ptr %341, align 4, !tbaa !31
  %343 = fmul float %342, %340
  %344 = fptosi float %343 to i32
  %345 = tail call i32 @llvm.smax.i32(i32 %344, i32 %145)
  %346 = sub nsw i32 %345, %337
  %347 = getelementptr inbounds %class.ResizeArrayRaw, ptr %331, i64 0, i32 6
  %348 = load i32, ptr %347, align 8, !tbaa !32
  %349 = icmp slt i32 %346, %348
  %350 = add nsw i32 %348, %337
  %351 = select i1 %349, i32 %350, i32 %345
  %352 = sext i32 %351 to i64
  %353 = shl nsw i64 %352, 1
  %354 = add nsw i64 %353, 31
  %355 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %354) #9
  %356 = getelementptr inbounds i8, ptr %355, i64 31
  %357 = ptrtoint ptr %356 to i64
  %358 = and i64 %357, 31
  %359 = sub nsw i64 0, %358
  %360 = getelementptr inbounds i8, ptr %356, i64 %359
  %361 = load ptr, ptr %331, align 8, !tbaa !33
  %362 = sext i32 %333 to i64
  %363 = shl nsw i64 %362, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %360, ptr align 1 %361, i64 %363, i1 false)
  %364 = icmp eq i32 %337, 0
  br i1 %364, label %370, label %365

365:                                              ; preds = %339
  %366 = getelementptr inbounds %class.ResizeArrayRaw, ptr %331, i64 0, i32 1
  %367 = load ptr, ptr %366, align 8, !tbaa !34
  %368 = icmp eq ptr %367, null
  br i1 %368, label %370, label %369

369:                                              ; preds = %365
  tail call void @_ZdaPv(ptr noundef nonnull %367) #10
  br label %370

370:                                              ; preds = %369, %365, %339
  %371 = getelementptr inbounds %class.ResizeArrayRaw, ptr %331, i64 0, i32 1
  store ptr %355, ptr %371, align 8, !tbaa !34
  store ptr %360, ptr %331, align 8, !tbaa !33
  store i32 %351, ptr %336, align 4, !tbaa !30
  %372 = load ptr, ptr %330, align 8, !tbaa !25
  br label %373

373:                                              ; preds = %327, %335, %370
  %374 = phi ptr [ %331, %327 ], [ %331, %335 ], [ %372, %370 ]
  store i32 %145, ptr %332, align 8, !tbaa !27
  %375 = load ptr, ptr %374, align 8, !tbaa !33
  %376 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %47, i64 0, i32 15, i32 1
  %377 = load ptr, ptr %376, align 8, !tbaa !25
  %378 = getelementptr inbounds %class.ResizeArrayRaw, ptr %377, i64 0, i32 2
  %379 = load i32, ptr %378, align 8, !tbaa !27
  %380 = icmp slt i32 %379, %145
  br i1 %380, label %381, label %419

381:                                              ; preds = %373
  %382 = getelementptr inbounds %class.ResizeArrayRaw, ptr %377, i64 0, i32 3
  %383 = load i32, ptr %382, align 4, !tbaa !30
  %384 = icmp slt i32 %383, %145
  br i1 %384, label %385, label %419

385:                                              ; preds = %381
  %386 = sitofp i32 %383 to float
  %387 = getelementptr inbounds %class.ResizeArrayRaw, ptr %377, i64 0, i32 5
  %388 = load float, ptr %387, align 4, !tbaa !31
  %389 = fmul float %388, %386
  %390 = fptosi float %389 to i32
  %391 = tail call i32 @llvm.smax.i32(i32 %390, i32 %145)
  %392 = sub nsw i32 %391, %383
  %393 = getelementptr inbounds %class.ResizeArrayRaw, ptr %377, i64 0, i32 6
  %394 = load i32, ptr %393, align 8, !tbaa !32
  %395 = icmp slt i32 %392, %394
  %396 = add nsw i32 %394, %383
  %397 = select i1 %395, i32 %396, i32 %391
  %398 = sext i32 %397 to i64
  %399 = shl nsw i64 %398, 1
  %400 = add nsw i64 %399, 31
  %401 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %400) #9
  %402 = getelementptr inbounds i8, ptr %401, i64 31
  %403 = ptrtoint ptr %402 to i64
  %404 = and i64 %403, 31
  %405 = sub nsw i64 0, %404
  %406 = getelementptr inbounds i8, ptr %402, i64 %405
  %407 = load ptr, ptr %377, align 8, !tbaa !33
  %408 = sext i32 %379 to i64
  %409 = shl nsw i64 %408, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %406, ptr align 1 %407, i64 %409, i1 false)
  %410 = icmp eq i32 %383, 0
  br i1 %410, label %416, label %411

411:                                              ; preds = %385
  %412 = getelementptr inbounds %class.ResizeArrayRaw, ptr %377, i64 0, i32 1
  %413 = load ptr, ptr %412, align 8, !tbaa !34
  %414 = icmp eq ptr %413, null
  br i1 %414, label %416, label %415

415:                                              ; preds = %411
  tail call void @_ZdaPv(ptr noundef nonnull %413) #10
  br label %416

416:                                              ; preds = %415, %411, %385
  %417 = getelementptr inbounds %class.ResizeArrayRaw, ptr %377, i64 0, i32 1
  store ptr %401, ptr %417, align 8, !tbaa !34
  store ptr %406, ptr %377, align 8, !tbaa !33
  store i32 %397, ptr %382, align 4, !tbaa !30
  %418 = load ptr, ptr %376, align 8, !tbaa !25
  br label %419

419:                                              ; preds = %373, %381, %416
  %420 = phi ptr [ %377, %373 ], [ %377, %381 ], [ %418, %416 ]
  store i32 %145, ptr %378, align 8, !tbaa !27
  %421 = load ptr, ptr %420, align 8, !tbaa !33
  %422 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %47, i64 0, i32 16, i32 1
  %423 = load ptr, ptr %422, align 8, !tbaa !25
  %424 = getelementptr inbounds %class.ResizeArrayRaw, ptr %423, i64 0, i32 2
  %425 = load i32, ptr %424, align 8, !tbaa !27
  %426 = icmp slt i32 %425, %145
  br i1 %426, label %427, label %465

427:                                              ; preds = %419
  %428 = getelementptr inbounds %class.ResizeArrayRaw, ptr %423, i64 0, i32 3
  %429 = load i32, ptr %428, align 4, !tbaa !30
  %430 = icmp slt i32 %429, %145
  br i1 %430, label %431, label %465

431:                                              ; preds = %427
  %432 = sitofp i32 %429 to float
  %433 = getelementptr inbounds %class.ResizeArrayRaw, ptr %423, i64 0, i32 5
  %434 = load float, ptr %433, align 4, !tbaa !31
  %435 = fmul float %434, %432
  %436 = fptosi float %435 to i32
  %437 = tail call i32 @llvm.smax.i32(i32 %436, i32 %145)
  %438 = sub nsw i32 %437, %429
  %439 = getelementptr inbounds %class.ResizeArrayRaw, ptr %423, i64 0, i32 6
  %440 = load i32, ptr %439, align 8, !tbaa !32
  %441 = icmp slt i32 %438, %440
  %442 = add nsw i32 %440, %429
  %443 = select i1 %441, i32 %442, i32 %437
  %444 = sext i32 %443 to i64
  %445 = shl nsw i64 %444, 1
  %446 = add nsw i64 %445, 31
  %447 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %446) #9
  %448 = getelementptr inbounds i8, ptr %447, i64 31
  %449 = ptrtoint ptr %448 to i64
  %450 = and i64 %449, 31
  %451 = sub nsw i64 0, %450
  %452 = getelementptr inbounds i8, ptr %448, i64 %451
  %453 = load ptr, ptr %423, align 8, !tbaa !33
  %454 = sext i32 %425 to i64
  %455 = shl nsw i64 %454, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %452, ptr align 1 %453, i64 %455, i1 false)
  %456 = icmp eq i32 %429, 0
  br i1 %456, label %462, label %457

457:                                              ; preds = %431
  %458 = getelementptr inbounds %class.ResizeArrayRaw, ptr %423, i64 0, i32 1
  %459 = load ptr, ptr %458, align 8, !tbaa !34
  %460 = icmp eq ptr %459, null
  br i1 %460, label %462, label %461

461:                                              ; preds = %457
  tail call void @_ZdaPv(ptr noundef nonnull %459) #10
  br label %462

462:                                              ; preds = %461, %457, %431
  %463 = getelementptr inbounds %class.ResizeArrayRaw, ptr %423, i64 0, i32 1
  store ptr %447, ptr %463, align 8, !tbaa !34
  store ptr %452, ptr %423, align 8, !tbaa !33
  store i32 %443, ptr %428, align 4, !tbaa !30
  %464 = load ptr, ptr %422, align 8, !tbaa !25
  br label %465

465:                                              ; preds = %419, %427, %462
  %466 = phi ptr [ %423, %419 ], [ %423, %427 ], [ %464, %462 ]
  store i32 %145, ptr %424, align 8, !tbaa !27
  %467 = load ptr, ptr %466, align 8, !tbaa !33
  br i1 %144, label %600, label %468

468:                                              ; preds = %465
  %469 = icmp sgt i32 %38, 0
  br i1 %469, label %470, label %612

470:                                              ; preds = %468
  %471 = zext i32 %38 to i64
  %472 = and i64 %471, 1
  %473 = icmp eq i32 %38, 1
  br i1 %473, label %506, label %474

474:                                              ; preds = %470
  %475 = and i64 %471, 4294967294
  br label %476

476:                                              ; preds = %501, %474
  %477 = phi i64 [ 0, %474 ], [ %503, %501 ]
  %478 = phi i32 [ 0, %474 ], [ %502, %501 ]
  %479 = phi i64 [ 0, %474 ], [ %504, %501 ]
  %480 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %477, i32 4
  %481 = load i8, ptr %480, align 1
  %482 = and i8 %481, 7
  %483 = icmp eq i8 %482, 0
  br i1 %483, label %489, label %484

484:                                              ; preds = %476
  %485 = trunc i64 %477 to i16
  %486 = add nsw i32 %478, 1
  %487 = sext i32 %478 to i64
  %488 = getelementptr inbounds i16, ptr %191, i64 %487
  store i16 %485, ptr %488, align 2, !tbaa !44
  br label %489

489:                                              ; preds = %476, %484
  %490 = phi i32 [ %486, %484 ], [ %478, %476 ]
  %491 = or i64 %477, 1
  %492 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %491, i32 4
  %493 = load i8, ptr %492, align 1
  %494 = and i8 %493, 7
  %495 = icmp eq i8 %494, 0
  br i1 %495, label %501, label %496

496:                                              ; preds = %489
  %497 = trunc i64 %491 to i16
  %498 = add nsw i32 %490, 1
  %499 = sext i32 %490 to i64
  %500 = getelementptr inbounds i16, ptr %191, i64 %499
  store i16 %497, ptr %500, align 2, !tbaa !44
  br label %501

501:                                              ; preds = %496, %489
  %502 = phi i32 [ %498, %496 ], [ %490, %489 ]
  %503 = add nuw nsw i64 %477, 2
  %504 = add i64 %479, 2
  %505 = icmp eq i64 %504, %475
  br i1 %505, label %506, label %476

506:                                              ; preds = %501, %470
  %507 = phi i32 [ undef, %470 ], [ %502, %501 ]
  %508 = phi i64 [ 0, %470 ], [ %503, %501 ]
  %509 = phi i32 [ 0, %470 ], [ %502, %501 ]
  %510 = icmp eq i64 %472, 0
  br i1 %510, label %521, label %511

511:                                              ; preds = %506
  %512 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %508, i32 4
  %513 = load i8, ptr %512, align 1
  %514 = and i8 %513, 7
  %515 = icmp eq i8 %514, 0
  br i1 %515, label %521, label %516

516:                                              ; preds = %511
  %517 = trunc i64 %508 to i16
  %518 = add nsw i32 %509, 1
  %519 = sext i32 %509 to i64
  %520 = getelementptr inbounds i16, ptr %191, i64 %519
  store i16 %517, ptr %520, align 2, !tbaa !44
  br label %521

521:                                              ; preds = %511, %516, %506
  %522 = phi i32 [ %507, %506 ], [ %518, %516 ], [ %509, %511 ]
  %523 = icmp eq i32 %522, 0
  br i1 %523, label %531, label %524

524:                                              ; preds = %521
  %525 = add nsw i32 %522, -1
  %526 = sext i32 %525 to i64
  %527 = getelementptr inbounds i16, ptr %191, i64 %526
  %528 = load i16, ptr %527, align 2, !tbaa !44
  %529 = sext i32 %522 to i64
  %530 = getelementptr inbounds i16, ptr %191, i64 %529
  store i16 %528, ptr %530, align 2, !tbaa !44
  br label %531

531:                                              ; preds = %524, %521
  %532 = load i32, ptr @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4, !tbaa !5
  %533 = icmp ne i32 %532, 0
  %534 = icmp sgt i32 %522, 0
  %535 = and i1 %533, %534
  br i1 %535, label %536, label %612

536:                                              ; preds = %531
  %537 = zext i32 %522 to i64
  %538 = and i64 %537, 1
  %539 = icmp eq i32 %522, 1
  br i1 %539, label %574, label %540

540:                                              ; preds = %536
  %541 = and i64 %537, 4294967294
  br label %542

542:                                              ; preds = %569, %540
  %543 = phi i64 [ 0, %540 ], [ %571, %569 ]
  %544 = phi i32 [ 0, %540 ], [ %570, %569 ]
  %545 = phi i64 [ 0, %540 ], [ %572, %569 ]
  %546 = getelementptr inbounds i16, ptr %191, i64 %543
  %547 = load i16, ptr %546, align 2, !tbaa !44
  %548 = zext i16 %547 to i64
  %549 = getelementptr inbounds %struct.CompAtomExt, ptr %45, i64 %548
  %550 = load i32, ptr %549, align 4
  %551 = icmp sgt i32 %550, -1
  br i1 %551, label %552, label %556

552:                                              ; preds = %542
  %553 = add nsw i32 %544, 1
  %554 = sext i32 %544 to i64
  %555 = getelementptr inbounds i16, ptr %237, i64 %554
  store i16 %547, ptr %555, align 2, !tbaa !44
  br label %556

556:                                              ; preds = %542, %552
  %557 = phi i32 [ %544, %542 ], [ %553, %552 ]
  %558 = or i64 %543, 1
  %559 = getelementptr inbounds i16, ptr %191, i64 %558
  %560 = load i16, ptr %559, align 2, !tbaa !44
  %561 = zext i16 %560 to i64
  %562 = getelementptr inbounds %struct.CompAtomExt, ptr %45, i64 %561
  %563 = load i32, ptr %562, align 4
  %564 = icmp sgt i32 %563, -1
  br i1 %564, label %565, label %569

565:                                              ; preds = %556
  %566 = add nsw i32 %557, 1
  %567 = sext i32 %557 to i64
  %568 = getelementptr inbounds i16, ptr %237, i64 %567
  store i16 %560, ptr %568, align 2, !tbaa !44
  br label %569

569:                                              ; preds = %565, %556
  %570 = phi i32 [ %557, %556 ], [ %566, %565 ]
  %571 = add nuw nsw i64 %543, 2
  %572 = add i64 %545, 2
  %573 = icmp eq i64 %572, %541
  br i1 %573, label %574, label %542

574:                                              ; preds = %569, %536
  %575 = phi i32 [ undef, %536 ], [ %570, %569 ]
  %576 = phi i64 [ 0, %536 ], [ %571, %569 ]
  %577 = phi i32 [ 0, %536 ], [ %570, %569 ]
  %578 = icmp eq i64 %538, 0
  br i1 %578, label %590, label %579

579:                                              ; preds = %574
  %580 = getelementptr inbounds i16, ptr %191, i64 %576
  %581 = load i16, ptr %580, align 2, !tbaa !44
  %582 = zext i16 %581 to i64
  %583 = getelementptr inbounds %struct.CompAtomExt, ptr %45, i64 %582
  %584 = load i32, ptr %583, align 4
  %585 = icmp sgt i32 %584, -1
  br i1 %585, label %586, label %590

586:                                              ; preds = %579
  %587 = add nsw i32 %577, 1
  %588 = sext i32 %577 to i64
  %589 = getelementptr inbounds i16, ptr %237, i64 %588
  store i16 %581, ptr %589, align 2, !tbaa !44
  br label %590

590:                                              ; preds = %579, %586, %574
  %591 = phi i32 [ %575, %574 ], [ %577, %579 ], [ %587, %586 ]
  %592 = icmp eq i32 %591, 0
  br i1 %592, label %612, label %593

593:                                              ; preds = %590
  %594 = add nsw i32 %591, -1
  %595 = sext i32 %594 to i64
  %596 = getelementptr inbounds i16, ptr %237, i64 %595
  %597 = load i16, ptr %596, align 2, !tbaa !44
  %598 = sext i32 %591 to i64
  %599 = getelementptr inbounds i16, ptr %237, i64 %598
  store i16 %597, ptr %599, align 2, !tbaa !44
  br label %612

600:                                              ; preds = %465
  %601 = load ptr, ptr %8, align 8, !tbaa !46
  %602 = load i32, ptr %13, align 8, !tbaa !17
  %603 = add nsw i32 %602, 1
  store i32 %603, ptr %13, align 8, !tbaa !17
  %604 = sext i32 %602 to i64
  %605 = getelementptr inbounds i16, ptr %601, i64 %604
  %606 = load i16, ptr %605, align 2, !tbaa !44
  %607 = zext i16 %606 to i32
  %608 = icmp eq i32 %36, %607
  br i1 %608, label %629, label %609

609:                                              ; preds = %600
  tail call void @_Z8NAMD_bugPKc(ptr noundef nonnull @.str)
  %610 = load ptr, ptr %8, align 8, !tbaa !46
  %611 = load i32, ptr %13, align 8, !tbaa !17
  br label %629

612:                                              ; preds = %468, %593, %590, %531
  %613 = phi i32 [ %522, %593 ], [ %522, %590 ], [ %522, %531 ], [ 0, %468 ]
  %614 = phi i32 [ %591, %593 ], [ 0, %590 ], [ 0, %531 ], [ 0, %468 ]
  %615 = load i32, ptr %13, align 8, !tbaa !17
  %616 = trunc i32 %36 to i16
  %617 = load ptr, ptr %8, align 8, !tbaa !46
  %618 = sext i32 %615 to i64
  %619 = getelementptr inbounds i16, ptr %617, i64 %618
  store i16 %616, ptr %619, align 2, !tbaa !44
  %620 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 16
  %621 = load i32, ptr %620, align 4, !tbaa !47
  %622 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 18
  %623 = load i32, ptr %622, align 4, !tbaa !48
  %624 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 4, i64 1
  %625 = load ptr, ptr %624, align 8, !tbaa !23
  %626 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 4
  %627 = load ptr, ptr %626, align 8, !tbaa !23
  %628 = add nsw i32 %615, 2
  store i32 %628, ptr %13, align 8, !tbaa !17
  br label %645

629:                                              ; preds = %609, %600
  %630 = phi i32 [ %603, %600 ], [ %611, %609 ]
  %631 = phi ptr [ %601, %600 ], [ %610, %609 ]
  %632 = sext i32 %630 to i64
  %633 = getelementptr inbounds i16, ptr %631, i64 %632
  %634 = load i16, ptr %633, align 2, !tbaa !44
  %635 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 16
  %636 = load i32, ptr %635, align 4, !tbaa !47
  %637 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 18
  %638 = load i32, ptr %637, align 4, !tbaa !48
  %639 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 4, i64 1
  %640 = load ptr, ptr %639, align 8, !tbaa !23
  %641 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 4
  %642 = load ptr, ptr %641, align 8, !tbaa !23
  %643 = add nsw i32 %630, 1
  store i32 %643, ptr %13, align 8, !tbaa !17
  %644 = zext i16 %634 to i32
  br label %645

645:                                              ; preds = %629, %612
  %646 = phi i32 [ %636, %629 ], [ %621, %612 ]
  %647 = phi i32 [ %638, %629 ], [ %623, %612 ]
  %648 = phi ptr [ %640, %629 ], [ %625, %612 ]
  %649 = phi ptr [ %642, %629 ], [ %627, %612 ]
  %650 = phi i32 [ 0, %629 ], [ %614, %612 ]
  %651 = phi i32 [ 0, %629 ], [ %613, %612 ]
  %652 = phi i32 [ %644, %629 ], [ 0, %612 ]
  %653 = add nsw i32 %647, -1
  %654 = icmp slt i32 %652, %36
  br i1 %654, label %655, label %2184

655:                                              ; preds = %645
  %656 = getelementptr inbounds %class.Molecule, ptr %26, i64 0, i32 1
  %657 = getelementptr inbounds %class.Molecule, ptr %26, i64 0, i32 4
  %658 = getelementptr inbounds %class.Molecule, ptr %26, i64 0, i32 2
  %659 = getelementptr inbounds %class.Molecule, ptr %26, i64 0, i32 3
  %660 = ptrtoint ptr %421 to i64
  %661 = add nsw i32 %38, 10
  %662 = getelementptr inbounds %class.Pairlists, ptr %8, i64 0, i32 2
  %663 = getelementptr inbounds i16, ptr %421, i64 1
  %664 = ptrtoint ptr %467 to i64
  %665 = ptrtoint ptr %329 to i64
  %666 = ptrtoint ptr %375 to i64
  %667 = getelementptr inbounds %class.LJTable, ptr %25, i64 0, i32 1
  %668 = getelementptr inbounds %class.LJTable, ptr %25, i64 0, i32 2
  %669 = fneg double %28
  %670 = fneg double %30
  %671 = insertelement <2 x double> poison, double %23, i64 0
  %672 = shufflevector <2 x double> %671, <2 x double> poison, <2 x i32> zeroinitializer
  br label %673

673:                                              ; preds = %655, %2172
  %674 = phi i32 [ 0, %655 ], [ %2179, %2172 ]
  %675 = phi i32 [ %652, %655 ], [ %2178, %2172 ]
  %676 = phi ptr [ null, %655 ], [ %2177, %2172 ]
  %677 = phi ptr [ null, %655 ], [ %2176, %2172 ]
  %678 = phi ptr [ null, %655 ], [ %2175, %2172 ]
  %679 = phi i32 [ 0, %655 ], [ %2174, %2172 ]
  %680 = phi i32 [ %646, %655 ], [ %2173, %2172 ]
  %681 = phi <2 x double> [ zeroinitializer, %655 ], [ %2180, %2172 ]
  %682 = phi <2 x double> [ zeroinitializer, %655 ], [ %2181, %2172 ]
  %683 = phi <2 x double> [ zeroinitializer, %655 ], [ %2182, %2172 ]
  %684 = sext i32 %675 to i64
  %685 = getelementptr inbounds %struct.CompAtom, ptr %39, i64 %684
  %686 = getelementptr inbounds %struct.CompAtomExt, ptr %43, i64 %684
  br i1 %144, label %1752, label %687

687:                                              ; preds = %673
  %688 = getelementptr inbounds %struct.CompAtom, ptr %39, i64 %684, i32 4
  %689 = load i8, ptr %688, align 1
  %690 = lshr i8 %689, 3
  %691 = and i8 %690, 15
  %692 = zext i8 %691 to i32
  %693 = icmp eq i8 %691, 0
  br i1 %693, label %699, label %694

694:                                              ; preds = %687
  %695 = icmp eq i32 %680, 0
  br i1 %695, label %699, label %696

696:                                              ; preds = %694
  %697 = add nsw i32 %680, -1
  %698 = add nsw i32 %675, %692
  br label %2172

699:                                              ; preds = %694, %687
  %700 = phi i32 [ %653, %694 ], [ %680, %687 ]
  %701 = load <2 x double>, ptr %685, align 8, !tbaa !19
  %702 = fadd <2 x double> %15, %701
  %703 = getelementptr inbounds %class.Vector, ptr %685, i64 0, i32 2
  %704 = load double, ptr %703, align 8, !tbaa !49
  %705 = fadd double %17, %704
  %706 = load i32, ptr %686, align 4
  %707 = shl i32 %706, 2
  %708 = ashr exact i32 %707, 2
  %709 = load ptr, ptr %656, align 8, !tbaa !51
  %710 = sext i32 %708 to i64
  %711 = getelementptr inbounds %class.ExclusionCheck, ptr %709, i64 %710
  %712 = load i32, ptr %711, align 8, !tbaa !53
  %713 = getelementptr inbounds %class.ExclusionCheck, ptr %709, i64 %710, i32 1
  %714 = load i32, ptr %713, align 4, !tbaa !55
  %715 = getelementptr inbounds %class.ExclusionCheck, ptr %709, i64 %710, i32 2
  %716 = load ptr, ptr %715, align 8, !tbaa !56
  %717 = icmp eq ptr %716, null
  br i1 %717, label %722, label %718

718:                                              ; preds = %699
  %719 = sext i32 %712 to i64
  %720 = sub nsw i64 0, %719
  %721 = getelementptr inbounds i8, ptr %716, i64 %720
  br label %948

722:                                              ; preds = %699
  %723 = icmp eq ptr %676, null
  br i1 %723, label %811, label %724

724:                                              ; preds = %722
  %725 = load i32, ptr %677, align 4, !tbaa !5
  %726 = icmp slt i32 %725, 1
  br i1 %726, label %774, label %727

727:                                              ; preds = %724
  %728 = add nuw i32 %725, 1
  %729 = zext i32 %728 to i64
  %730 = add nsw i64 %729, -1
  %731 = add nsw i64 %729, -2
  %732 = and i64 %730, 3
  %733 = icmp ult i64 %731, 3
  br i1 %733, label %761, label %734

734:                                              ; preds = %727
  %735 = and i64 %730, -4
  br label %736

736:                                              ; preds = %736, %734
  %737 = phi i64 [ 1, %734 ], [ %758, %736 ]
  %738 = phi i64 [ 0, %734 ], [ %759, %736 ]
  %739 = getelementptr inbounds i32, ptr %677, i64 %737
  %740 = load i32, ptr %739, align 4, !tbaa !5
  %741 = sext i32 %740 to i64
  %742 = getelementptr inbounds i8, ptr %676, i64 %741
  store i8 0, ptr %742, align 1, !tbaa !57
  %743 = add nuw nsw i64 %737, 1
  %744 = getelementptr inbounds i32, ptr %677, i64 %743
  %745 = load i32, ptr %744, align 4, !tbaa !5
  %746 = sext i32 %745 to i64
  %747 = getelementptr inbounds i8, ptr %676, i64 %746
  store i8 0, ptr %747, align 1, !tbaa !57
  %748 = add nuw nsw i64 %737, 2
  %749 = getelementptr inbounds i32, ptr %677, i64 %748
  %750 = load i32, ptr %749, align 4, !tbaa !5
  %751 = sext i32 %750 to i64
  %752 = getelementptr inbounds i8, ptr %676, i64 %751
  store i8 0, ptr %752, align 1, !tbaa !57
  %753 = add nuw nsw i64 %737, 3
  %754 = getelementptr inbounds i32, ptr %677, i64 %753
  %755 = load i32, ptr %754, align 4, !tbaa !5
  %756 = sext i32 %755 to i64
  %757 = getelementptr inbounds i8, ptr %676, i64 %756
  store i8 0, ptr %757, align 1, !tbaa !57
  %758 = add nuw nsw i64 %737, 4
  %759 = add i64 %738, 4
  %760 = icmp eq i64 %759, %735
  br i1 %760, label %761, label %736

761:                                              ; preds = %736, %727
  %762 = phi i64 [ 1, %727 ], [ %758, %736 ]
  %763 = icmp eq i64 %732, 0
  br i1 %763, label %774, label %764

764:                                              ; preds = %761, %764
  %765 = phi i64 [ %771, %764 ], [ %762, %761 ]
  %766 = phi i64 [ %772, %764 ], [ 0, %761 ]
  %767 = getelementptr inbounds i32, ptr %677, i64 %765
  %768 = load i32, ptr %767, align 4, !tbaa !5
  %769 = sext i32 %768 to i64
  %770 = getelementptr inbounds i8, ptr %676, i64 %769
  store i8 0, ptr %770, align 1, !tbaa !57
  %771 = add nuw nsw i64 %765, 1
  %772 = add i64 %766, 1
  %773 = icmp eq i64 %772, %732
  br i1 %773, label %774, label %764, !llvm.loop !124

774:                                              ; preds = %761, %764, %724
  %775 = load i32, ptr %678, align 4, !tbaa !5
  %776 = icmp slt i32 %775, 1
  br i1 %776, label %831, label %777

777:                                              ; preds = %774
  %778 = add nuw i32 %775, 1
  %779 = zext i32 %778 to i64
  %780 = add nsw i64 %779, -1
  %781 = add nsw i64 %779, -2
  %782 = and i64 %780, 3
  %783 = icmp ult i64 %781, 3
  br i1 %783, label %818, label %784

784:                                              ; preds = %777
  %785 = and i64 %780, -4
  br label %786

786:                                              ; preds = %786, %784
  %787 = phi i64 [ 1, %784 ], [ %808, %786 ]
  %788 = phi i64 [ 0, %784 ], [ %809, %786 ]
  %789 = getelementptr inbounds i32, ptr %678, i64 %787
  %790 = load i32, ptr %789, align 4, !tbaa !5
  %791 = sext i32 %790 to i64
  %792 = getelementptr inbounds i8, ptr %676, i64 %791
  store i8 0, ptr %792, align 1, !tbaa !57
  %793 = add nuw nsw i64 %787, 1
  %794 = getelementptr inbounds i32, ptr %678, i64 %793
  %795 = load i32, ptr %794, align 4, !tbaa !5
  %796 = sext i32 %795 to i64
  %797 = getelementptr inbounds i8, ptr %676, i64 %796
  store i8 0, ptr %797, align 1, !tbaa !57
  %798 = add nuw nsw i64 %787, 2
  %799 = getelementptr inbounds i32, ptr %678, i64 %798
  %800 = load i32, ptr %799, align 4, !tbaa !5
  %801 = sext i32 %800 to i64
  %802 = getelementptr inbounds i8, ptr %676, i64 %801
  store i8 0, ptr %802, align 1, !tbaa !57
  %803 = add nuw nsw i64 %787, 3
  %804 = getelementptr inbounds i32, ptr %678, i64 %803
  %805 = load i32, ptr %804, align 4, !tbaa !5
  %806 = sext i32 %805 to i64
  %807 = getelementptr inbounds i8, ptr %676, i64 %806
  store i8 0, ptr %807, align 1, !tbaa !57
  %808 = add nuw nsw i64 %787, 4
  %809 = add i64 %788, 4
  %810 = icmp eq i64 %809, %785
  br i1 %810, label %818, label %786

811:                                              ; preds = %722
  %812 = load i32, ptr %657, align 8, !tbaa !60
  %813 = tail call i32 @llvm.smax.i32(i32 %812, i32 -1)
  %814 = sext i32 %813 to i64
  %815 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %814) #9
  %816 = load i32, ptr %657, align 8, !tbaa !60
  %817 = sext i32 %816 to i64
  tail call void @llvm.memset.p0.i64(ptr nonnull align 1 %815, i8 0, i64 %817, i1 false)
  br label %831

818:                                              ; preds = %786, %777
  %819 = phi i64 [ 1, %777 ], [ %808, %786 ]
  %820 = icmp eq i64 %782, 0
  br i1 %820, label %831, label %821

821:                                              ; preds = %818, %821
  %822 = phi i64 [ %828, %821 ], [ %819, %818 ]
  %823 = phi i64 [ %829, %821 ], [ 0, %818 ]
  %824 = getelementptr inbounds i32, ptr %678, i64 %822
  %825 = load i32, ptr %824, align 4, !tbaa !5
  %826 = sext i32 %825 to i64
  %827 = getelementptr inbounds i8, ptr %676, i64 %826
  store i8 0, ptr %827, align 1, !tbaa !57
  %828 = add nuw nsw i64 %822, 1
  %829 = add i64 %823, 1
  %830 = icmp eq i64 %829, %782
  br i1 %830, label %831, label %821, !llvm.loop !125

831:                                              ; preds = %818, %821, %774, %811
  %832 = phi ptr [ %815, %811 ], [ %676, %774 ], [ %676, %821 ], [ %676, %818 ]
  %833 = load i32, ptr %686, align 4
  %834 = shl i32 %833, 2
  %835 = ashr exact i32 %834, 2
  %836 = load ptr, ptr %658, align 8, !tbaa !62
  %837 = sext i32 %835 to i64
  %838 = getelementptr inbounds ptr, ptr %836, i64 %837
  %839 = load ptr, ptr %838, align 8, !tbaa !23
  %840 = load i32, ptr %839, align 4, !tbaa !5
  %841 = icmp slt i32 %840, 1
  br i1 %841, label %894, label %842

842:                                              ; preds = %831
  %843 = add nuw i32 %840, 1
  %844 = zext i32 %843 to i64
  %845 = add nsw i64 %844, -1
  %846 = add nsw i64 %844, -2
  %847 = and i64 %845, 3
  %848 = icmp ult i64 %846, 3
  br i1 %848, label %876, label %849

849:                                              ; preds = %842
  %850 = and i64 %845, -4
  br label %851

851:                                              ; preds = %851, %849
  %852 = phi i64 [ 1, %849 ], [ %873, %851 ]
  %853 = phi i64 [ 0, %849 ], [ %874, %851 ]
  %854 = getelementptr inbounds i32, ptr %839, i64 %852
  %855 = load i32, ptr %854, align 4, !tbaa !5
  %856 = sext i32 %855 to i64
  %857 = getelementptr inbounds i8, ptr %832, i64 %856
  store i8 1, ptr %857, align 1, !tbaa !57
  %858 = add nuw nsw i64 %852, 1
  %859 = getelementptr inbounds i32, ptr %839, i64 %858
  %860 = load i32, ptr %859, align 4, !tbaa !5
  %861 = sext i32 %860 to i64
  %862 = getelementptr inbounds i8, ptr %832, i64 %861
  store i8 1, ptr %862, align 1, !tbaa !57
  %863 = add nuw nsw i64 %852, 2
  %864 = getelementptr inbounds i32, ptr %839, i64 %863
  %865 = load i32, ptr %864, align 4, !tbaa !5
  %866 = sext i32 %865 to i64
  %867 = getelementptr inbounds i8, ptr %832, i64 %866
  store i8 1, ptr %867, align 1, !tbaa !57
  %868 = add nuw nsw i64 %852, 3
  %869 = getelementptr inbounds i32, ptr %839, i64 %868
  %870 = load i32, ptr %869, align 4, !tbaa !5
  %871 = sext i32 %870 to i64
  %872 = getelementptr inbounds i8, ptr %832, i64 %871
  store i8 1, ptr %872, align 1, !tbaa !57
  %873 = add nuw nsw i64 %852, 4
  %874 = add i64 %853, 4
  %875 = icmp eq i64 %874, %850
  br i1 %875, label %876, label %851

876:                                              ; preds = %851, %842
  %877 = phi i64 [ 1, %842 ], [ %873, %851 ]
  %878 = icmp eq i64 %847, 0
  br i1 %878, label %889, label %879

879:                                              ; preds = %876, %879
  %880 = phi i64 [ %886, %879 ], [ %877, %876 ]
  %881 = phi i64 [ %887, %879 ], [ 0, %876 ]
  %882 = getelementptr inbounds i32, ptr %839, i64 %880
  %883 = load i32, ptr %882, align 4, !tbaa !5
  %884 = sext i32 %883 to i64
  %885 = getelementptr inbounds i8, ptr %832, i64 %884
  store i8 1, ptr %885, align 1, !tbaa !57
  %886 = add nuw nsw i64 %880, 1
  %887 = add i64 %881, 1
  %888 = icmp eq i64 %887, %847
  br i1 %888, label %889, label %879, !llvm.loop !126

889:                                              ; preds = %879, %876
  %890 = load i32, ptr %686, align 4
  %891 = shl i32 %890, 2
  %892 = ashr exact i32 %891, 2
  %893 = sext i32 %892 to i64
  br label %894

894:                                              ; preds = %889, %831
  %895 = phi i64 [ %893, %889 ], [ %837, %831 ]
  %896 = load ptr, ptr %659, align 8, !tbaa !64
  %897 = getelementptr inbounds ptr, ptr %896, i64 %895
  %898 = load ptr, ptr %897, align 8, !tbaa !23
  %899 = load i32, ptr %898, align 4, !tbaa !5
  %900 = icmp slt i32 %899, 1
  br i1 %900, label %948, label %901

901:                                              ; preds = %894
  %902 = add nuw i32 %899, 1
  %903 = zext i32 %902 to i64
  %904 = add nsw i64 %903, -1
  %905 = add nsw i64 %903, -2
  %906 = and i64 %904, 3
  %907 = icmp ult i64 %905, 3
  br i1 %907, label %935, label %908

908:                                              ; preds = %901
  %909 = and i64 %904, -4
  br label %910

910:                                              ; preds = %910, %908
  %911 = phi i64 [ 1, %908 ], [ %932, %910 ]
  %912 = phi i64 [ 0, %908 ], [ %933, %910 ]
  %913 = getelementptr inbounds i32, ptr %898, i64 %911
  %914 = load i32, ptr %913, align 4, !tbaa !5
  %915 = sext i32 %914 to i64
  %916 = getelementptr inbounds i8, ptr %832, i64 %915
  store i8 2, ptr %916, align 1, !tbaa !57
  %917 = add nuw nsw i64 %911, 1
  %918 = getelementptr inbounds i32, ptr %898, i64 %917
  %919 = load i32, ptr %918, align 4, !tbaa !5
  %920 = sext i32 %919 to i64
  %921 = getelementptr inbounds i8, ptr %832, i64 %920
  store i8 2, ptr %921, align 1, !tbaa !57
  %922 = add nuw nsw i64 %911, 2
  %923 = getelementptr inbounds i32, ptr %898, i64 %922
  %924 = load i32, ptr %923, align 4, !tbaa !5
  %925 = sext i32 %924 to i64
  %926 = getelementptr inbounds i8, ptr %832, i64 %925
  store i8 2, ptr %926, align 1, !tbaa !57
  %927 = add nuw nsw i64 %911, 3
  %928 = getelementptr inbounds i32, ptr %898, i64 %927
  %929 = load i32, ptr %928, align 4, !tbaa !5
  %930 = sext i32 %929 to i64
  %931 = getelementptr inbounds i8, ptr %832, i64 %930
  store i8 2, ptr %931, align 1, !tbaa !57
  %932 = add nuw nsw i64 %911, 4
  %933 = add i64 %912, 4
  %934 = icmp eq i64 %933, %909
  br i1 %934, label %935, label %910

935:                                              ; preds = %910, %901
  %936 = phi i64 [ 1, %901 ], [ %932, %910 ]
  %937 = icmp eq i64 %906, 0
  br i1 %937, label %948, label %938

938:                                              ; preds = %935, %938
  %939 = phi i64 [ %945, %938 ], [ %936, %935 ]
  %940 = phi i64 [ %946, %938 ], [ 0, %935 ]
  %941 = getelementptr inbounds i32, ptr %898, i64 %939
  %942 = load i32, ptr %941, align 4, !tbaa !5
  %943 = sext i32 %942 to i64
  %944 = getelementptr inbounds i8, ptr %832, i64 %943
  store i8 2, ptr %944, align 1, !tbaa !57
  %945 = add nuw nsw i64 %939, 1
  %946 = add i64 %940, 1
  %947 = icmp eq i64 %946, %906
  br i1 %947, label %948, label %938, !llvm.loop !127

948:                                              ; preds = %935, %938, %894, %718
  %949 = phi ptr [ %721, %718 ], [ %832, %894 ], [ %832, %938 ], [ %832, %935 ]
  %950 = phi ptr [ %678, %718 ], [ %898, %894 ], [ %898, %938 ], [ %898, %935 ]
  %951 = phi ptr [ %677, %718 ], [ %839, %894 ], [ %839, %938 ], [ %839, %935 ]
  %952 = phi ptr [ %676, %718 ], [ %832, %894 ], [ %832, %938 ], [ %832, %935 ]
  %953 = load i8, ptr %688, align 1
  %954 = and i8 %953, 7
  %955 = icmp eq i8 %954, 0
  %956 = load i32, ptr @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4, !tbaa !5
  br i1 %955, label %1139, label %957

957:                                              ; preds = %948
  %958 = icmp eq i32 %956, 0
  br i1 %958, label %965, label %959

959:                                              ; preds = %957
  %960 = load i32, ptr %686, align 4
  %961 = freeze i32 %960
  %962 = icmp slt i32 %961, 0
  %963 = select i1 %962, ptr %237, ptr %191
  %964 = select i1 %962, i32 %650, i32 %651
  br label %965

965:                                              ; preds = %959, %957
  %966 = phi ptr [ %191, %957 ], [ %963, %959 ]
  %967 = phi i32 [ %651, %957 ], [ %964, %959 ]
  %968 = icmp sgt i32 %967, 0
  br i1 %968, label %969, label %1120

969:                                              ; preds = %965
  %970 = icmp ugt i32 %967, 6
  br i1 %970, label %971, label %1055

971:                                              ; preds = %969
  %972 = add nsw i32 %967, -2
  %973 = getelementptr inbounds i16, ptr %966, i64 1
  %974 = load i16, ptr %973, align 2, !tbaa !44
  %975 = zext i16 %974 to i64
  %976 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %975
  %977 = getelementptr inbounds %class.Vector, ptr %976, i64 0, i32 2
  %978 = load double, ptr %977, align 8, !tbaa !49
  %979 = load i16, ptr %966, align 2, !tbaa !44
  %980 = zext i16 %979 to i64
  %981 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %980
  %982 = getelementptr inbounds %class.Vector, ptr %981, i64 0, i32 2
  %983 = load double, ptr %982, align 8, !tbaa !49
  %984 = getelementptr inbounds %class.Vector, ptr %976, i64 0, i32 1
  %985 = load double, ptr %984, align 8, !tbaa !66
  %986 = getelementptr inbounds %class.Vector, ptr %981, i64 0, i32 1
  %987 = load double, ptr %986, align 8, !tbaa !66
  %988 = load double, ptr %976, align 8, !tbaa !67
  %989 = load double, ptr %981, align 8, !tbaa !67
  %990 = zext i32 %972 to i64
  %991 = insertelement <2 x double> poison, double %978, i64 0
  %992 = insertelement <2 x double> %991, double %983, i64 1
  %993 = insertelement <2 x double> poison, double %985, i64 0
  %994 = insertelement <2 x double> %993, double %987, i64 1
  %995 = insertelement <2 x double> poison, double %988, i64 0
  %996 = insertelement <2 x double> %995, double %989, i64 1
  %997 = insertelement <2 x double> poison, double %705, i64 0
  %998 = shufflevector <2 x double> %997, <2 x double> poison, <2 x i32> zeroinitializer
  %999 = shufflevector <2 x double> %702, <2 x double> poison, <2 x i32> <i32 1, i32 1>
  %1000 = shufflevector <2 x double> %702, <2 x double> poison, <2 x i32> zeroinitializer
  br label %1001

1001:                                             ; preds = %971, %1001
  %1002 = phi i64 [ 2, %971 ], [ %1045, %1001 ]
  %1003 = phi i32 [ 0, %971 ], [ %1044, %1001 ]
  %1004 = phi i16 [ %979, %971 ], [ %1011, %1001 ]
  %1005 = phi i16 [ %974, %971 ], [ %1014, %1001 ]
  %1006 = phi <2 x double> [ %992, %971 ], [ %1048, %1001 ]
  %1007 = phi <2 x double> [ %994, %971 ], [ %1050, %1001 ]
  %1008 = phi <2 x double> [ %996, %971 ], [ %1052, %1001 ]
  %1009 = fsub <2 x double> %998, %1006
  %1010 = getelementptr inbounds i16, ptr %966, i64 %1002
  %1011 = load i16, ptr %1010, align 2, !tbaa !44
  %1012 = or i64 %1002, 1
  %1013 = getelementptr inbounds i16, ptr %966, i64 %1012
  %1014 = load i16, ptr %1013, align 2, !tbaa !44
  %1015 = zext i16 %1011 to i64
  %1016 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %1015
  %1017 = load double, ptr %1016, align 8, !tbaa !67
  %1018 = zext i16 %1014 to i64
  %1019 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %1018
  %1020 = load double, ptr %1019, align 8, !tbaa !67
  %1021 = getelementptr inbounds %class.Vector, ptr %1016, i64 0, i32 1
  %1022 = load double, ptr %1021, align 8, !tbaa !66
  %1023 = getelementptr inbounds %class.Vector, ptr %1019, i64 0, i32 1
  %1024 = load double, ptr %1023, align 8, !tbaa !66
  %1025 = getelementptr inbounds %class.Vector, ptr %1016, i64 0, i32 2
  %1026 = load double, ptr %1025, align 8, !tbaa !49
  %1027 = getelementptr inbounds %class.Vector, ptr %1019, i64 0, i32 2
  %1028 = load double, ptr %1027, align 8, !tbaa !49
  %1029 = fsub <2 x double> %1000, %1008
  %1030 = fmul <2 x double> %1029, %1029
  %1031 = fsub <2 x double> %999, %1007
  %1032 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %1031, <2 x double> %1031, <2 x double> %1030)
  %1033 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %1009, <2 x double> %1009, <2 x double> %1032)
  %1034 = fcmp olt <2 x double> %1033, %672
  %1035 = zext i32 %1003 to i64
  %1036 = getelementptr inbounds i16, ptr %283, i64 %1035
  store i16 %1004, ptr %1036, align 2, !tbaa !44
  %1037 = extractelement <2 x i1> %1034, i64 1
  %1038 = zext i1 %1037 to i32
  %1039 = add nuw nsw i32 %1003, %1038
  %1040 = zext i32 %1039 to i64
  %1041 = getelementptr inbounds i16, ptr %283, i64 %1040
  store i16 %1005, ptr %1041, align 2, !tbaa !44
  %1042 = extractelement <2 x i1> %1034, i64 0
  %1043 = zext i1 %1042 to i32
  %1044 = add i32 %1039, %1043
  %1045 = add nuw nsw i64 %1002, 2
  %1046 = icmp ult i64 %1045, %990
  %1047 = insertelement <2 x double> poison, double %1028, i64 0
  %1048 = insertelement <2 x double> %1047, double %1026, i64 1
  %1049 = insertelement <2 x double> poison, double %1024, i64 0
  %1050 = insertelement <2 x double> %1049, double %1022, i64 1
  %1051 = insertelement <2 x double> poison, double %1020, i64 0
  %1052 = insertelement <2 x double> %1051, double %1017, i64 1
  br i1 %1046, label %1001, label %1053

1053:                                             ; preds = %1001
  %1054 = trunc i64 %1002 to i32
  br label %1055

1055:                                             ; preds = %1053, %969
  %1056 = phi i32 [ %1044, %1053 ], [ 0, %969 ]
  %1057 = phi i32 [ %1054, %1053 ], [ 0, %969 ]
  %1058 = icmp slt i32 %1057, %967
  br i1 %1058, label %1059, label %1064

1059:                                             ; preds = %1055
  %1060 = zext i32 %1057 to i64
  %1061 = zext i32 %967 to i64
  %1062 = extractelement <2 x double> %702, i64 0
  %1063 = extractelement <2 x double> %702, i64 1
  br label %1069

1064:                                             ; preds = %1092, %1055
  %1065 = phi i32 [ %1056, %1055 ], [ %1093, %1092 ]
  %1066 = icmp sgt i32 %1065, 0
  br i1 %1066, label %1067, label %1120

1067:                                             ; preds = %1064
  %1068 = zext i32 %1065 to i64
  br label %1096

1069:                                             ; preds = %1059, %1092
  %1070 = phi i64 [ %1060, %1059 ], [ %1094, %1092 ]
  %1071 = phi i32 [ %1056, %1059 ], [ %1093, %1092 ]
  %1072 = getelementptr inbounds i16, ptr %966, i64 %1070
  %1073 = load i16, ptr %1072, align 2, !tbaa !44
  %1074 = zext i16 %1073 to i64
  %1075 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %1074
  %1076 = load double, ptr %1075, align 8, !tbaa !67
  %1077 = getelementptr inbounds %class.Vector, ptr %1075, i64 0, i32 1
  %1078 = load double, ptr %1077, align 8, !tbaa !66
  %1079 = getelementptr inbounds %class.Vector, ptr %1075, i64 0, i32 2
  %1080 = load double, ptr %1079, align 8, !tbaa !49
  %1081 = fsub double %1062, %1076
  %1082 = fmul double %1081, %1081
  %1083 = fsub double %1063, %1078
  %1084 = tail call double @llvm.fmuladd.f64(double %1083, double %1083, double %1082)
  %1085 = fsub double %705, %1080
  %1086 = tail call double @llvm.fmuladd.f64(double %1085, double %1085, double %1084)
  %1087 = fcmp ugt double %1086, %23
  br i1 %1087, label %1092, label %1088

1088:                                             ; preds = %1069
  %1089 = add nsw i32 %1071, 1
  %1090 = sext i32 %1071 to i64
  %1091 = getelementptr inbounds i16, ptr %283, i64 %1090
  store i16 %1073, ptr %1091, align 2, !tbaa !44
  br label %1092

1092:                                             ; preds = %1088, %1069
  %1093 = phi i32 [ %1089, %1088 ], [ %1071, %1069 ]
  %1094 = add nuw nsw i64 %1070, 1
  %1095 = icmp eq i64 %1094, %1061
  br i1 %1095, label %1064, label %1069

1096:                                             ; preds = %1067, %1113
  %1097 = phi i64 [ 0, %1067 ], [ %1116, %1113 ]
  %1098 = phi ptr [ %421, %1067 ], [ %1115, %1113 ]
  %1099 = getelementptr inbounds i16, ptr %283, i64 %1097
  %1100 = load i16, ptr %1099, align 2, !tbaa !44
  %1101 = zext i16 %1100 to i64
  %1102 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %1101, i32 4
  %1103 = load i8, ptr %1102, align 1
  %1104 = and i8 %1103, 7
  store i16 %1100, ptr %1098, align 2, !tbaa !44
  %1105 = getelementptr inbounds i16, ptr %1098, i64 1
  %1106 = insertelement <2 x i16> poison, i16 %1100, i64 0
  %1107 = shufflevector <2 x i16> %1106, <2 x i16> poison, <2 x i32> zeroinitializer
  %1108 = add <2 x i16> %1107, <i16 1, i16 2>
  store <2 x i16> %1108, ptr %1105, align 2, !tbaa !44
  %1109 = icmp ult i8 %1104, 4
  br i1 %1109, label %1113, label %1110

1110:                                             ; preds = %1096
  %1111 = add <2 x i16> %1107, <i16 3, i16 4>
  %1112 = getelementptr inbounds i16, ptr %1098, i64 3
  store <2 x i16> %1111, ptr %1112, align 2, !tbaa !44
  br label %1113

1113:                                             ; preds = %1110, %1096
  %1114 = zext i8 %1104 to i64
  %1115 = getelementptr inbounds i16, ptr %1098, i64 %1114
  %1116 = add nuw nsw i64 %1097, 1
  %1117 = icmp eq i64 %1116, %1068
  br i1 %1117, label %1118, label %1096

1118:                                             ; preds = %1113
  %1119 = ptrtoint ptr %1115 to i64
  br label %1120

1120:                                             ; preds = %1118, %1064, %965
  %1121 = phi i64 [ %1119, %1118 ], [ %660, %1064 ], [ %660, %965 ]
  %1122 = sub i64 %1121, %660
  %1123 = lshr exact i64 %1122, 1
  %1124 = trunc i64 %1123 to i32
  %1125 = icmp eq i32 %1124, 0
  br i1 %1125, label %1126, label %1131

1126:                                             ; preds = %1120
  %1127 = load i8, ptr %688, align 1
  %1128 = and i8 %1127, 7
  %1129 = zext i8 %1128 to i32
  %1130 = add nsw i32 %675, %1129
  br label %2172

1131:                                             ; preds = %1120
  %1132 = shl i64 %1122, 31
  %1133 = add i64 %1132, -4294967296
  %1134 = ashr i64 %1133, 32
  %1135 = getelementptr inbounds i16, ptr %421, i64 %1134
  %1136 = load i16, ptr %1135, align 2, !tbaa !44
  %1137 = ashr i64 %1132, 32
  %1138 = getelementptr inbounds i16, ptr %421, i64 %1137
  store i16 %1136, ptr %1138, align 2, !tbaa !44
  br label %1139

1139:                                             ; preds = %1131, %948
  %1140 = phi i32 [ %1124, %1131 ], [ %679, %948 ]
  %1141 = icmp eq i32 %956, 0
  br i1 %1141, label %1146, label %1142

1142:                                             ; preds = %1139
  %1143 = load i32, ptr %686, align 4
  %1144 = and i32 %1143, 1073741824
  %1145 = icmp ne i32 %1144, 0
  br label %1146

1146:                                             ; preds = %1142, %1139
  %1147 = phi i1 [ false, %1139 ], [ %1145, %1142 ]
  %1148 = load i32, ptr %13, align 8, !tbaa !17
  %1149 = add nsw i32 %661, %1148
  %1150 = load i32, ptr %662, align 4, !tbaa !68
  %1151 = icmp sgt i32 %1150, %1149
  br i1 %1151, label %1167, label %1152

1152:                                             ; preds = %1146, %1152
  %1153 = phi i32 [ %1155, %1152 ], [ %1150, %1146 ]
  %1154 = ashr i32 %1153, 1
  %1155 = add nsw i32 %1154, %1153
  %1156 = icmp sgt i32 %1155, %1149
  br i1 %1156, label %1157, label %1152

1157:                                             ; preds = %1152
  %1158 = sext i32 %1155 to i64
  %1159 = icmp slt i32 %1155, 0
  %1160 = shl nsw i64 %1158, 1
  %1161 = select i1 %1159, i64 -1, i64 %1160
  %1162 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %1161) #9
  %1163 = load ptr, ptr %8, align 8, !tbaa !46
  %1164 = sext i32 %1148 to i64
  %1165 = shl nsw i64 %1164, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 2 %1162, ptr align 2 %1163, i64 %1165, i1 false)
  %1166 = icmp eq ptr %1163, null
  br i1 %1166, label %1171, label %1169

1167:                                             ; preds = %1146
  %1168 = load ptr, ptr %8, align 8, !tbaa !46
  br label %1173

1169:                                             ; preds = %1157
  tail call void @_ZdaPv(ptr noundef nonnull %1163) #10
  %1170 = load i32, ptr %13, align 8, !tbaa !17
  br label %1171

1171:                                             ; preds = %1169, %1157
  %1172 = phi i32 [ %1170, %1169 ], [ %1148, %1157 ]
  store ptr %1162, ptr %8, align 8, !tbaa !46
  store i32 %1155, ptr %662, align 4, !tbaa !68
  br label %1173

1173:                                             ; preds = %1167, %1171
  %1174 = phi i32 [ %1148, %1167 ], [ %1172, %1171 ]
  %1175 = phi ptr [ %1168, %1167 ], [ %1162, %1171 ]
  %1176 = ptrtoint ptr %1175 to i64
  %1177 = add nsw i32 %1174, 1
  %1178 = sext i32 %1177 to i64
  %1179 = getelementptr inbounds i16, ptr %1175, i64 %1178
  %1180 = icmp sgt i32 %1140, 0
  br i1 %1147, label %1181, label %1228

1181:                                             ; preds = %1173
  br i1 %1180, label %1182, label %1388

1182:                                             ; preds = %1181
  %1183 = zext i32 %1140 to i64
  %1184 = extractelement <2 x double> %702, i64 0
  %1185 = extractelement <2 x double> %702, i64 1
  br label %1186

1186:                                             ; preds = %1182, %1223
  %1187 = phi i64 [ 0, %1182 ], [ %1226, %1223 ]
  %1188 = phi ptr [ %467, %1182 ], [ %1225, %1223 ]
  %1189 = phi ptr [ %1179, %1182 ], [ %1224, %1223 ]
  %1190 = getelementptr inbounds i16, ptr %421, i64 %1187
  %1191 = load i16, ptr %1190, align 2, !tbaa !44
  %1192 = zext i16 %1191 to i64
  %1193 = getelementptr inbounds %struct.CompAtomExt, ptr %45, i64 %1192
  %1194 = load i32, ptr %1193, align 4
  %1195 = and i32 %1194, 1073741824
  %1196 = icmp eq i32 %1195, 0
  br i1 %1196, label %1197, label %1223

1197:                                             ; preds = %1186
  %1198 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %1192
  %1199 = getelementptr inbounds %class.Vector, ptr %1198, i64 0, i32 2
  %1200 = load double, ptr %1199, align 8, !tbaa !49
  %1201 = fsub double %705, %1200
  %1202 = getelementptr inbounds %class.Vector, ptr %1198, i64 0, i32 1
  %1203 = load double, ptr %1202, align 8, !tbaa !66
  %1204 = fsub double %1185, %1203
  %1205 = load double, ptr %1198, align 8, !tbaa !67
  %1206 = fsub double %1184, %1205
  %1207 = fmul double %1206, %1206
  %1208 = tail call double @llvm.fmuladd.f64(double %1204, double %1204, double %1207)
  %1209 = tail call double @llvm.fmuladd.f64(double %1201, double %1201, double %1208)
  %1210 = fcmp ugt double %1209, %20
  br i1 %1210, label %1223, label %1211

1211:                                             ; preds = %1197
  %1212 = shl i32 %1194, 2
  %1213 = ashr exact i32 %1212, 2
  %1214 = icmp slt i32 %1213, %712
  %1215 = icmp sgt i32 %1213, %714
  %1216 = select i1 %1214, i1 true, i1 %1215
  %1217 = select i1 %1216, ptr %1189, ptr %1188
  %1218 = zext i1 %1216 to i64
  %1219 = getelementptr inbounds i16, ptr %1189, i64 %1218
  %1220 = xor i1 %1216, true
  %1221 = zext i1 %1220 to i64
  %1222 = getelementptr inbounds i16, ptr %1188, i64 %1221
  store i16 %1191, ptr %1217, align 2, !tbaa !44
  br label %1223

1223:                                             ; preds = %1211, %1197, %1186
  %1224 = phi ptr [ %1189, %1186 ], [ %1189, %1197 ], [ %1219, %1211 ]
  %1225 = phi ptr [ %1188, %1186 ], [ %1188, %1197 ], [ %1222, %1211 ]
  %1226 = add nuw nsw i64 %1187, 1
  %1227 = icmp eq i64 %1226, %1183
  br i1 %1227, label %1388, label %1186

1228:                                             ; preds = %1173
  br i1 %1180, label %1229, label %1388

1229:                                             ; preds = %1228
  %1230 = icmp ugt i32 %1140, 6
  br i1 %1230, label %1231, label %1339

1231:                                             ; preds = %1229
  %1232 = add nsw i32 %1140, -2
  %1233 = load i16, ptr %421, align 2, !tbaa !44
  %1234 = zext i16 %1233 to i64
  %1235 = getelementptr inbounds %struct.CompAtomExt, ptr %45, i64 %1234
  %1236 = load i32, ptr %1235, align 4
  %1237 = load i16, ptr %663, align 2, !tbaa !44
  %1238 = zext i16 %1237 to i64
  %1239 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %1238
  %1240 = getelementptr inbounds %class.Vector, ptr %1239, i64 0, i32 2
  %1241 = load double, ptr %1240, align 8, !tbaa !49
  %1242 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %1234
  %1243 = getelementptr inbounds %class.Vector, ptr %1242, i64 0, i32 2
  %1244 = load double, ptr %1243, align 8, !tbaa !49
  %1245 = getelementptr inbounds %class.Vector, ptr %1239, i64 0, i32 1
  %1246 = load double, ptr %1245, align 8, !tbaa !66
  %1247 = getelementptr inbounds %class.Vector, ptr %1242, i64 0, i32 1
  %1248 = load double, ptr %1247, align 8, !tbaa !66
  %1249 = load double, ptr %1239, align 8, !tbaa !67
  %1250 = load double, ptr %1242, align 8, !tbaa !67
  %1251 = zext i32 %1232 to i64
  %1252 = extractelement <2 x double> %702, i64 0
  %1253 = extractelement <2 x double> %702, i64 1
  br label %1254

1254:                                             ; preds = %1231, %1332
  %1255 = phi i64 [ 2, %1231 ], [ %1335, %1332 ]
  %1256 = phi i64 [ %1238, %1231 ], [ %1292, %1332 ]
  %1257 = phi i32 [ %1236, %1231 ], [ %1320, %1332 ]
  %1258 = phi ptr [ %467, %1231 ], [ %1334, %1332 ]
  %1259 = phi ptr [ %1179, %1231 ], [ %1333, %1332 ]
  %1260 = phi i16 [ %1233, %1231 ], [ %1285, %1332 ]
  %1261 = phi i16 [ %1237, %1231 ], [ %1288, %1332 ]
  %1262 = phi double [ %1250, %1231 ], [ %1291, %1332 ]
  %1263 = phi double [ %1249, %1231 ], [ %1294, %1332 ]
  %1264 = phi double [ %1248, %1231 ], [ %1296, %1332 ]
  %1265 = phi double [ %1246, %1231 ], [ %1298, %1332 ]
  %1266 = phi double [ %1244, %1231 ], [ %1300, %1332 ]
  %1267 = phi double [ %1241, %1231 ], [ %1302, %1332 ]
  %1268 = getelementptr inbounds %struct.CompAtomExt, ptr %45, i64 %1256
  %1269 = load i32, ptr %1268, align 4
  %1270 = shl i32 %1269, 2
  %1271 = ashr exact i32 %1270, 2
  %1272 = fsub double %1252, %1262
  %1273 = fsub double %1252, %1263
  %1274 = fmul double %1272, %1272
  %1275 = fmul double %1273, %1273
  %1276 = fsub double %1253, %1264
  %1277 = fsub double %1253, %1265
  %1278 = tail call double @llvm.fmuladd.f64(double %1276, double %1276, double %1274)
  %1279 = tail call double @llvm.fmuladd.f64(double %1277, double %1277, double %1275)
  %1280 = fsub double %705, %1266
  %1281 = fsub double %705, %1267
  %1282 = tail call double @llvm.fmuladd.f64(double %1280, double %1280, double %1278)
  %1283 = tail call double @llvm.fmuladd.f64(double %1281, double %1281, double %1279)
  %1284 = getelementptr inbounds i16, ptr %421, i64 %1255
  %1285 = load i16, ptr %1284, align 2, !tbaa !44
  %1286 = or i64 %1255, 1
  %1287 = getelementptr inbounds i16, ptr %421, i64 %1286
  %1288 = load i16, ptr %1287, align 2, !tbaa !44
  %1289 = zext i16 %1285 to i64
  %1290 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %1289
  %1291 = load double, ptr %1290, align 8, !tbaa !67
  %1292 = zext i16 %1288 to i64
  %1293 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %1292
  %1294 = load double, ptr %1293, align 8, !tbaa !67
  %1295 = getelementptr inbounds %class.Vector, ptr %1290, i64 0, i32 1
  %1296 = load double, ptr %1295, align 8, !tbaa !66
  %1297 = getelementptr inbounds %class.Vector, ptr %1293, i64 0, i32 1
  %1298 = load double, ptr %1297, align 8, !tbaa !66
  %1299 = getelementptr inbounds %class.Vector, ptr %1290, i64 0, i32 2
  %1300 = load double, ptr %1299, align 8, !tbaa !49
  %1301 = getelementptr inbounds %class.Vector, ptr %1293, i64 0, i32 2
  %1302 = load double, ptr %1301, align 8, !tbaa !49
  %1303 = fcmp ugt double %1282, %20
  br i1 %1303, label %1316, label %1304

1304:                                             ; preds = %1254
  %1305 = shl i32 %1257, 2
  %1306 = ashr exact i32 %1305, 2
  %1307 = icmp slt i32 %1306, %712
  %1308 = icmp sgt i32 %1306, %714
  %1309 = select i1 %1307, i1 true, i1 %1308
  %1310 = select i1 %1309, ptr %1259, ptr %1258
  %1311 = zext i1 %1309 to i64
  %1312 = getelementptr inbounds i16, ptr %1259, i64 %1311
  %1313 = xor i1 %1309, true
  %1314 = zext i1 %1313 to i64
  %1315 = getelementptr inbounds i16, ptr %1258, i64 %1314
  store i16 %1260, ptr %1310, align 2, !tbaa !44
  br label %1316

1316:                                             ; preds = %1304, %1254
  %1317 = phi ptr [ %1259, %1254 ], [ %1312, %1304 ]
  %1318 = phi ptr [ %1258, %1254 ], [ %1315, %1304 ]
  %1319 = getelementptr inbounds %struct.CompAtomExt, ptr %45, i64 %1289
  %1320 = load i32, ptr %1319, align 4
  %1321 = fcmp ugt double %1283, %20
  br i1 %1321, label %1332, label %1322

1322:                                             ; preds = %1316
  %1323 = icmp slt i32 %1271, %712
  %1324 = icmp sgt i32 %1271, %714
  %1325 = select i1 %1323, i1 true, i1 %1324
  %1326 = select i1 %1325, ptr %1317, ptr %1318
  %1327 = zext i1 %1325 to i64
  %1328 = getelementptr inbounds i16, ptr %1317, i64 %1327
  %1329 = xor i1 %1325, true
  %1330 = zext i1 %1329 to i64
  %1331 = getelementptr inbounds i16, ptr %1318, i64 %1330
  store i16 %1261, ptr %1326, align 2, !tbaa !44
  br label %1332

1332:                                             ; preds = %1322, %1316
  %1333 = phi ptr [ %1317, %1316 ], [ %1328, %1322 ]
  %1334 = phi ptr [ %1318, %1316 ], [ %1331, %1322 ]
  %1335 = add nuw nsw i64 %1255, 2
  %1336 = icmp ult i64 %1335, %1251
  br i1 %1336, label %1254, label %1337

1337:                                             ; preds = %1332
  %1338 = trunc i64 %1255 to i32
  br label %1339

1339:                                             ; preds = %1337, %1229
  %1340 = phi i32 [ %1338, %1337 ], [ 0, %1229 ]
  %1341 = phi ptr [ %1333, %1337 ], [ %1179, %1229 ]
  %1342 = phi ptr [ %1334, %1337 ], [ %467, %1229 ]
  %1343 = icmp slt i32 %1340, %1140
  br i1 %1343, label %1344, label %1388

1344:                                             ; preds = %1339
  %1345 = zext i32 %1340 to i64
  %1346 = zext i32 %1140 to i64
  %1347 = extractelement <2 x double> %702, i64 0
  %1348 = extractelement <2 x double> %702, i64 1
  br label %1349

1349:                                             ; preds = %1344, %1383
  %1350 = phi i64 [ %1345, %1344 ], [ %1386, %1383 ]
  %1351 = phi ptr [ %1342, %1344 ], [ %1385, %1383 ]
  %1352 = phi ptr [ %1341, %1344 ], [ %1384, %1383 ]
  %1353 = getelementptr inbounds i16, ptr %421, i64 %1350
  %1354 = load i16, ptr %1353, align 2, !tbaa !44
  %1355 = zext i16 %1354 to i64
  %1356 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %1355
  %1357 = load double, ptr %1356, align 8, !tbaa !67
  %1358 = getelementptr inbounds %class.Vector, ptr %1356, i64 0, i32 1
  %1359 = load double, ptr %1358, align 8, !tbaa !66
  %1360 = getelementptr inbounds %class.Vector, ptr %1356, i64 0, i32 2
  %1361 = load double, ptr %1360, align 8, !tbaa !49
  %1362 = fsub double %1347, %1357
  %1363 = fmul double %1362, %1362
  %1364 = fsub double %1348, %1359
  %1365 = tail call double @llvm.fmuladd.f64(double %1364, double %1364, double %1363)
  %1366 = fsub double %705, %1361
  %1367 = tail call double @llvm.fmuladd.f64(double %1366, double %1366, double %1365)
  %1368 = fcmp ugt double %1367, %20
  br i1 %1368, label %1383, label %1369

1369:                                             ; preds = %1349
  %1370 = getelementptr inbounds %struct.CompAtomExt, ptr %45, i64 %1355
  %1371 = load i32, ptr %1370, align 4
  %1372 = shl i32 %1371, 2
  %1373 = ashr exact i32 %1372, 2
  %1374 = icmp slt i32 %1373, %712
  %1375 = icmp sgt i32 %1373, %714
  %1376 = select i1 %1374, i1 true, i1 %1375
  %1377 = select i1 %1376, ptr %1352, ptr %1351
  %1378 = zext i1 %1376 to i64
  %1379 = getelementptr inbounds i16, ptr %1352, i64 %1378
  %1380 = xor i1 %1376, true
  %1381 = zext i1 %1380 to i64
  %1382 = getelementptr inbounds i16, ptr %1351, i64 %1381
  store i16 %1354, ptr %1377, align 2, !tbaa !44
  br label %1383

1383:                                             ; preds = %1369, %1349
  %1384 = phi ptr [ %1352, %1349 ], [ %1379, %1369 ]
  %1385 = phi ptr [ %1351, %1349 ], [ %1382, %1369 ]
  %1386 = add nuw nsw i64 %1350, 1
  %1387 = icmp eq i64 %1386, %1346
  br i1 %1387, label %1388, label %1349

1388:                                             ; preds = %1383, %1223, %1339, %1181, %1228
  %1389 = phi ptr [ %1179, %1228 ], [ %1179, %1181 ], [ %1341, %1339 ], [ %1224, %1223 ], [ %1384, %1383 ]
  %1390 = phi ptr [ %467, %1228 ], [ %467, %1181 ], [ %1342, %1339 ], [ %1225, %1223 ], [ %1385, %1383 ]
  %1391 = icmp eq ptr %1389, %1179
  %1392 = icmp eq ptr %1390, %467
  %1393 = select i1 %1391, i1 %1392, i1 false
  br i1 %1393, label %1394, label %1396

1394:                                             ; preds = %1388
  %1395 = add nsw i32 %675, 1
  br label %2172

1396:                                             ; preds = %1388
  %1397 = trunc i32 %675 to i16
  %1398 = load i32, ptr %13, align 8, !tbaa !17
  %1399 = add nsw i32 %1398, -1
  %1400 = sext i32 %1399 to i64
  %1401 = getelementptr inbounds i16, ptr %1175, i64 %1400
  store i16 %1397, ptr %1401, align 2, !tbaa !44
  %1402 = ptrtoint ptr %1390 to i64
  %1403 = sub i64 %1402, %664
  %1404 = lshr exact i64 %1403, 1
  %1405 = trunc i64 %1404 to i32
  %1406 = icmp sgt i32 %1405, 0
  br i1 %1406, label %1407, label %1507

1407:                                             ; preds = %1396
  %1408 = and i64 %1404, 4294967295
  %1409 = and i64 %1404, 1
  %1410 = icmp eq i64 %1408, 1
  br i1 %1410, label %1475, label %1411

1411:                                             ; preds = %1407
  %1412 = sub nsw i64 %1408, %1409
  br label %1413

1413:                                             ; preds = %1468, %1411
  %1414 = phi i64 [ 0, %1411 ], [ %1472, %1468 ]
  %1415 = phi ptr [ %1389, %1411 ], [ %1471, %1468 ]
  %1416 = phi ptr [ %329, %1411 ], [ %1470, %1468 ]
  %1417 = phi ptr [ %375, %1411 ], [ %1469, %1468 ]
  %1418 = phi i64 [ 0, %1411 ], [ %1473, %1468 ]
  %1419 = getelementptr inbounds i16, ptr %467, i64 %1414
  %1420 = load i16, ptr %1419, align 2, !tbaa !44
  %1421 = zext i16 %1420 to i64
  %1422 = getelementptr inbounds %struct.CompAtomExt, ptr %45, i64 %1421
  %1423 = load i32, ptr %1422, align 4
  %1424 = shl i32 %1423, 2
  %1425 = ashr exact i32 %1424, 2
  %1426 = sext i32 %1425 to i64
  %1427 = getelementptr inbounds i8, ptr %949, i64 %1426
  %1428 = load i8, ptr %1427, align 1, !tbaa !57
  %1429 = sext i8 %1428 to i32
  switch i32 %1429, label %1441 [
    i32 0, label %1430
    i32 1, label %1432
    i32 2, label %1434
  ]

1430:                                             ; preds = %1413
  %1431 = getelementptr inbounds i16, ptr %1415, i64 1
  br label %1436

1432:                                             ; preds = %1413
  %1433 = getelementptr inbounds i16, ptr %1416, i64 1
  br label %1436

1434:                                             ; preds = %1413
  %1435 = getelementptr inbounds i16, ptr %1417, i64 1
  br label %1436

1436:                                             ; preds = %1430, %1432, %1434
  %1437 = phi ptr [ %1417, %1434 ], [ %1416, %1432 ], [ %1415, %1430 ]
  %1438 = phi ptr [ %1435, %1434 ], [ %1417, %1432 ], [ %1417, %1430 ]
  %1439 = phi ptr [ %1416, %1434 ], [ %1433, %1432 ], [ %1416, %1430 ]
  %1440 = phi ptr [ %1415, %1434 ], [ %1415, %1432 ], [ %1431, %1430 ]
  store i16 %1420, ptr %1437, align 2, !tbaa !44
  br label %1441

1441:                                             ; preds = %1436, %1413
  %1442 = phi ptr [ %1417, %1413 ], [ %1438, %1436 ]
  %1443 = phi ptr [ %1416, %1413 ], [ %1439, %1436 ]
  %1444 = phi ptr [ %1415, %1413 ], [ %1440, %1436 ]
  %1445 = or i64 %1414, 1
  %1446 = getelementptr inbounds i16, ptr %467, i64 %1445
  %1447 = load i16, ptr %1446, align 2, !tbaa !44
  %1448 = zext i16 %1447 to i64
  %1449 = getelementptr inbounds %struct.CompAtomExt, ptr %45, i64 %1448
  %1450 = load i32, ptr %1449, align 4
  %1451 = shl i32 %1450, 2
  %1452 = ashr exact i32 %1451, 2
  %1453 = sext i32 %1452 to i64
  %1454 = getelementptr inbounds i8, ptr %949, i64 %1453
  %1455 = load i8, ptr %1454, align 1, !tbaa !57
  %1456 = sext i8 %1455 to i32
  switch i32 %1456, label %1468 [
    i32 0, label %1461
    i32 1, label %1459
    i32 2, label %1457
  ]

1457:                                             ; preds = %1441
  %1458 = getelementptr inbounds i16, ptr %1442, i64 1
  br label %1463

1459:                                             ; preds = %1441
  %1460 = getelementptr inbounds i16, ptr %1443, i64 1
  br label %1463

1461:                                             ; preds = %1441
  %1462 = getelementptr inbounds i16, ptr %1444, i64 1
  br label %1463

1463:                                             ; preds = %1461, %1459, %1457
  %1464 = phi ptr [ %1442, %1457 ], [ %1443, %1459 ], [ %1444, %1461 ]
  %1465 = phi ptr [ %1458, %1457 ], [ %1442, %1459 ], [ %1442, %1461 ]
  %1466 = phi ptr [ %1443, %1457 ], [ %1460, %1459 ], [ %1443, %1461 ]
  %1467 = phi ptr [ %1444, %1457 ], [ %1444, %1459 ], [ %1462, %1461 ]
  store i16 %1447, ptr %1464, align 2, !tbaa !44
  br label %1468

1468:                                             ; preds = %1463, %1441
  %1469 = phi ptr [ %1442, %1441 ], [ %1465, %1463 ]
  %1470 = phi ptr [ %1443, %1441 ], [ %1466, %1463 ]
  %1471 = phi ptr [ %1444, %1441 ], [ %1467, %1463 ]
  %1472 = add nuw nsw i64 %1414, 2
  %1473 = add i64 %1418, 2
  %1474 = icmp eq i64 %1473, %1412
  br i1 %1474, label %1475, label %1413

1475:                                             ; preds = %1468, %1407
  %1476 = phi ptr [ undef, %1407 ], [ %1469, %1468 ]
  %1477 = phi ptr [ undef, %1407 ], [ %1470, %1468 ]
  %1478 = phi ptr [ undef, %1407 ], [ %1471, %1468 ]
  %1479 = phi i64 [ 0, %1407 ], [ %1472, %1468 ]
  %1480 = phi ptr [ %1389, %1407 ], [ %1471, %1468 ]
  %1481 = phi ptr [ %329, %1407 ], [ %1470, %1468 ]
  %1482 = phi ptr [ %375, %1407 ], [ %1469, %1468 ]
  %1483 = icmp eq i64 %1409, 0
  br i1 %1483, label %1507, label %1484

1484:                                             ; preds = %1475
  %1485 = getelementptr inbounds i16, ptr %467, i64 %1479
  %1486 = load i16, ptr %1485, align 2, !tbaa !44
  %1487 = zext i16 %1486 to i64
  %1488 = getelementptr inbounds %struct.CompAtomExt, ptr %45, i64 %1487
  %1489 = load i32, ptr %1488, align 4
  %1490 = shl i32 %1489, 2
  %1491 = ashr exact i32 %1490, 2
  %1492 = sext i32 %1491 to i64
  %1493 = getelementptr inbounds i8, ptr %949, i64 %1492
  %1494 = load i8, ptr %1493, align 1, !tbaa !57
  %1495 = sext i8 %1494 to i32
  switch i32 %1495, label %1507 [
    i32 0, label %1500
    i32 1, label %1498
    i32 2, label %1496
  ]

1496:                                             ; preds = %1484
  %1497 = getelementptr inbounds i16, ptr %1482, i64 1
  br label %1502

1498:                                             ; preds = %1484
  %1499 = getelementptr inbounds i16, ptr %1481, i64 1
  br label %1502

1500:                                             ; preds = %1484
  %1501 = getelementptr inbounds i16, ptr %1480, i64 1
  br label %1502

1502:                                             ; preds = %1500, %1498, %1496
  %1503 = phi ptr [ %1482, %1496 ], [ %1481, %1498 ], [ %1480, %1500 ]
  %1504 = phi ptr [ %1497, %1496 ], [ %1482, %1498 ], [ %1482, %1500 ]
  %1505 = phi ptr [ %1481, %1496 ], [ %1499, %1498 ], [ %1481, %1500 ]
  %1506 = phi ptr [ %1480, %1496 ], [ %1480, %1498 ], [ %1501, %1500 ]
  store i16 %1486, ptr %1503, align 2, !tbaa !44
  br label %1507

1507:                                             ; preds = %1475, %1502, %1484, %1396
  %1508 = phi ptr [ %375, %1396 ], [ %1476, %1475 ], [ %1482, %1484 ], [ %1504, %1502 ]
  %1509 = phi ptr [ %329, %1396 ], [ %1477, %1475 ], [ %1481, %1484 ], [ %1505, %1502 ]
  %1510 = phi ptr [ %1389, %1396 ], [ %1478, %1475 ], [ %1480, %1484 ], [ %1506, %1502 ]
  %1511 = ptrtoint ptr %1510 to i64
  %1512 = ptrtoint ptr %1179 to i64
  %1513 = sub i64 %1511, %1512
  %1514 = lshr exact i64 %1513, 1
  %1515 = trunc i64 %1514 to i32
  %1516 = icmp eq i32 %1515, 0
  %1517 = shl i64 %1513, 31
  br i1 %1516, label %1523, label %1518

1518:                                             ; preds = %1507
  %1519 = add i64 %1517, -4294967296
  %1520 = ashr i64 %1519, 32
  %1521 = getelementptr inbounds i16, ptr %1179, i64 %1520
  %1522 = load i16, ptr %1521, align 2, !tbaa !44
  br label %1523

1523:                                             ; preds = %1507, %1518
  %1524 = phi i16 [ %1522, %1518 ], [ -1, %1507 ]
  %1525 = ashr i64 %1517, 32
  %1526 = getelementptr inbounds i16, ptr %1179, i64 %1525
  store i16 %1524, ptr %1526, align 2, !tbaa !44
  %1527 = trunc i64 %1514 to i16
  %1528 = add i16 %1527, 1
  %1529 = sext i32 %1398 to i64
  %1530 = getelementptr inbounds i16, ptr %1175, i64 %1529
  store i16 %1528, ptr %1530, align 2, !tbaa !44
  %1531 = add i32 %1398, 2
  %1532 = add i32 %1531, %1515
  %1533 = ptrtoint ptr %1509 to i64
  %1534 = sub i64 %1533, %665
  %1535 = lshr exact i64 %1534, 1
  %1536 = trunc i64 %1535 to i32
  %1537 = add nsw i32 %1532, 1
  %1538 = sext i32 %1537 to i64
  %1539 = getelementptr i16, ptr %1175, i64 %1538
  %1540 = icmp sgt i32 %1536, 0
  br i1 %1540, label %1541, label %1631

1541:                                             ; preds = %1523
  %1542 = and i64 %1535, 4294967295
  %1543 = icmp ult i64 %1542, 8
  br i1 %1543, label %1587, label %1544

1544:                                             ; preds = %1541
  %1545 = shl nsw i64 %1538, 1
  %1546 = add i64 %1545, %1176
  %1547 = sub i64 %1546, %665
  %1548 = icmp ult i64 %1547, 128
  br i1 %1548, label %1587, label %1549

1549:                                             ; preds = %1544
  %1550 = icmp ult i64 %1542, 64
  br i1 %1550, label %1574, label %1551

1551:                                             ; preds = %1549
  %1552 = and i64 %1535, 63
  %1553 = sub nsw i64 %1542, %1552
  br label %1554

1554:                                             ; preds = %1554, %1551
  %1555 = phi i64 [ 0, %1551 ], [ %1568, %1554 ]
  %1556 = getelementptr inbounds i16, ptr %329, i64 %1555
  %1557 = load <16 x i16>, ptr %1556, align 2, !tbaa !44
  %1558 = getelementptr inbounds i16, ptr %1556, i64 16
  %1559 = load <16 x i16>, ptr %1558, align 2, !tbaa !44
  %1560 = getelementptr inbounds i16, ptr %1556, i64 32
  %1561 = load <16 x i16>, ptr %1560, align 2, !tbaa !44
  %1562 = getelementptr inbounds i16, ptr %1556, i64 48
  %1563 = load <16 x i16>, ptr %1562, align 2, !tbaa !44
  %1564 = getelementptr inbounds i16, ptr %1539, i64 %1555
  store <16 x i16> %1557, ptr %1564, align 2, !tbaa !44
  %1565 = getelementptr inbounds i16, ptr %1564, i64 16
  store <16 x i16> %1559, ptr %1565, align 2, !tbaa !44
  %1566 = getelementptr inbounds i16, ptr %1564, i64 32
  store <16 x i16> %1561, ptr %1566, align 2, !tbaa !44
  %1567 = getelementptr inbounds i16, ptr %1564, i64 48
  store <16 x i16> %1563, ptr %1567, align 2, !tbaa !44
  %1568 = add nuw i64 %1555, 64
  %1569 = icmp eq i64 %1568, %1553
  br i1 %1569, label %1570, label %1554, !llvm.loop !128

1570:                                             ; preds = %1554
  %1571 = icmp eq i64 %1552, 0
  br i1 %1571, label %1625, label %1572

1572:                                             ; preds = %1570
  %1573 = icmp ult i64 %1552, 8
  br i1 %1573, label %1587, label %1574

1574:                                             ; preds = %1549, %1572
  %1575 = phi i64 [ %1553, %1572 ], [ 0, %1549 ]
  %1576 = and i64 %1535, 7
  %1577 = sub nsw i64 %1542, %1576
  br label %1578

1578:                                             ; preds = %1578, %1574
  %1579 = phi i64 [ %1575, %1574 ], [ %1583, %1578 ]
  %1580 = getelementptr inbounds i16, ptr %329, i64 %1579
  %1581 = load <8 x i16>, ptr %1580, align 2, !tbaa !44
  %1582 = getelementptr inbounds i16, ptr %1539, i64 %1579
  store <8 x i16> %1581, ptr %1582, align 2, !tbaa !44
  %1583 = add nuw i64 %1579, 8
  %1584 = icmp eq i64 %1583, %1577
  br i1 %1584, label %1585, label %1578, !llvm.loop !129

1585:                                             ; preds = %1578
  %1586 = icmp eq i64 %1576, 0
  br i1 %1586, label %1625, label %1587

1587:                                             ; preds = %1544, %1541, %1572, %1585
  %1588 = phi i64 [ 0, %1541 ], [ 0, %1544 ], [ %1553, %1572 ], [ %1577, %1585 ]
  %1589 = sub i64 %1535, %1588
  %1590 = xor i64 %1588, -1
  %1591 = add nsw i64 %1542, %1590
  %1592 = and i64 %1589, 3
  %1593 = icmp eq i64 %1592, 0
  br i1 %1593, label %1603, label %1594

1594:                                             ; preds = %1587, %1594
  %1595 = phi i64 [ %1600, %1594 ], [ %1588, %1587 ]
  %1596 = phi i64 [ %1601, %1594 ], [ 0, %1587 ]
  %1597 = getelementptr inbounds i16, ptr %329, i64 %1595
  %1598 = load i16, ptr %1597, align 2, !tbaa !44
  %1599 = getelementptr inbounds i16, ptr %1539, i64 %1595
  store i16 %1598, ptr %1599, align 2, !tbaa !44
  %1600 = add nuw nsw i64 %1595, 1
  %1601 = add i64 %1596, 1
  %1602 = icmp eq i64 %1601, %1592
  br i1 %1602, label %1603, label %1594, !llvm.loop !130

1603:                                             ; preds = %1594, %1587
  %1604 = phi i64 [ %1588, %1587 ], [ %1600, %1594 ]
  %1605 = icmp ult i64 %1591, 3
  br i1 %1605, label %1625, label %1606

1606:                                             ; preds = %1603, %1606
  %1607 = phi i64 [ %1623, %1606 ], [ %1604, %1603 ]
  %1608 = getelementptr inbounds i16, ptr %329, i64 %1607
  %1609 = load i16, ptr %1608, align 2, !tbaa !44
  %1610 = getelementptr inbounds i16, ptr %1539, i64 %1607
  store i16 %1609, ptr %1610, align 2, !tbaa !44
  %1611 = add nuw nsw i64 %1607, 1
  %1612 = getelementptr inbounds i16, ptr %329, i64 %1611
  %1613 = load i16, ptr %1612, align 2, !tbaa !44
  %1614 = getelementptr inbounds i16, ptr %1539, i64 %1611
  store i16 %1613, ptr %1614, align 2, !tbaa !44
  %1615 = add nuw nsw i64 %1607, 2
  %1616 = getelementptr inbounds i16, ptr %329, i64 %1615
  %1617 = load i16, ptr %1616, align 2, !tbaa !44
  %1618 = getelementptr inbounds i16, ptr %1539, i64 %1615
  store i16 %1617, ptr %1618, align 2, !tbaa !44
  %1619 = add nuw nsw i64 %1607, 3
  %1620 = getelementptr inbounds i16, ptr %329, i64 %1619
  %1621 = load i16, ptr %1620, align 2, !tbaa !44
  %1622 = getelementptr inbounds i16, ptr %1539, i64 %1619
  store i16 %1621, ptr %1622, align 2, !tbaa !44
  %1623 = add nuw nsw i64 %1607, 4
  %1624 = icmp eq i64 %1623, %1542
  br i1 %1624, label %1625, label %1606, !llvm.loop !131

1625:                                             ; preds = %1603, %1606, %1570, %1585
  %1626 = shl i64 %1534, 31
  %1627 = add i64 %1626, -4294967296
  %1628 = ashr i64 %1627, 32
  %1629 = getelementptr inbounds i16, ptr %1539, i64 %1628
  %1630 = load i16, ptr %1629, align 2, !tbaa !44
  br label %1631

1631:                                             ; preds = %1523, %1625
  %1632 = phi i64 [ %1535, %1625 ], [ 0, %1523 ]
  %1633 = phi i16 [ %1630, %1625 ], [ -1, %1523 ]
  %1634 = and i64 %1632, 4294967295
  %1635 = getelementptr inbounds i16, ptr %1539, i64 %1634
  store i16 %1633, ptr %1635, align 2, !tbaa !44
  %1636 = trunc i64 %1535 to i16
  %1637 = add i16 %1636, 1
  %1638 = sext i32 %1532 to i64
  %1639 = getelementptr inbounds i16, ptr %1175, i64 %1638
  store i16 %1637, ptr %1639, align 2, !tbaa !44
  %1640 = add nsw i32 %1536, 2
  %1641 = add nsw i32 %1640, %1532
  %1642 = ptrtoint ptr %1508 to i64
  %1643 = sub i64 %1642, %666
  %1644 = lshr exact i64 %1643, 1
  %1645 = trunc i64 %1644 to i32
  %1646 = add nsw i32 %1641, 1
  %1647 = sext i32 %1646 to i64
  %1648 = getelementptr i16, ptr %1175, i64 %1647
  %1649 = icmp sgt i32 %1645, 0
  br i1 %1649, label %1650, label %1740

1650:                                             ; preds = %1631
  %1651 = and i64 %1644, 4294967295
  %1652 = icmp ult i64 %1651, 8
  br i1 %1652, label %1696, label %1653

1653:                                             ; preds = %1650
  %1654 = shl nsw i64 %1647, 1
  %1655 = add i64 %1654, %1176
  %1656 = sub i64 %1655, %666
  %1657 = icmp ult i64 %1656, 128
  br i1 %1657, label %1696, label %1658

1658:                                             ; preds = %1653
  %1659 = icmp ult i64 %1651, 64
  br i1 %1659, label %1683, label %1660

1660:                                             ; preds = %1658
  %1661 = and i64 %1644, 63
  %1662 = sub nsw i64 %1651, %1661
  br label %1663

1663:                                             ; preds = %1663, %1660
  %1664 = phi i64 [ 0, %1660 ], [ %1677, %1663 ]
  %1665 = getelementptr inbounds i16, ptr %375, i64 %1664
  %1666 = load <16 x i16>, ptr %1665, align 2, !tbaa !44
  %1667 = getelementptr inbounds i16, ptr %1665, i64 16
  %1668 = load <16 x i16>, ptr %1667, align 2, !tbaa !44
  %1669 = getelementptr inbounds i16, ptr %1665, i64 32
  %1670 = load <16 x i16>, ptr %1669, align 2, !tbaa !44
  %1671 = getelementptr inbounds i16, ptr %1665, i64 48
  %1672 = load <16 x i16>, ptr %1671, align 2, !tbaa !44
  %1673 = getelementptr inbounds i16, ptr %1648, i64 %1664
  store <16 x i16> %1666, ptr %1673, align 2, !tbaa !44
  %1674 = getelementptr inbounds i16, ptr %1673, i64 16
  store <16 x i16> %1668, ptr %1674, align 2, !tbaa !44
  %1675 = getelementptr inbounds i16, ptr %1673, i64 32
  store <16 x i16> %1670, ptr %1675, align 2, !tbaa !44
  %1676 = getelementptr inbounds i16, ptr %1673, i64 48
  store <16 x i16> %1672, ptr %1676, align 2, !tbaa !44
  %1677 = add nuw i64 %1664, 64
  %1678 = icmp eq i64 %1677, %1662
  br i1 %1678, label %1679, label %1663, !llvm.loop !132

1679:                                             ; preds = %1663
  %1680 = icmp eq i64 %1661, 0
  br i1 %1680, label %1734, label %1681

1681:                                             ; preds = %1679
  %1682 = icmp ult i64 %1661, 8
  br i1 %1682, label %1696, label %1683

1683:                                             ; preds = %1658, %1681
  %1684 = phi i64 [ %1662, %1681 ], [ 0, %1658 ]
  %1685 = and i64 %1644, 7
  %1686 = sub nsw i64 %1651, %1685
  br label %1687

1687:                                             ; preds = %1687, %1683
  %1688 = phi i64 [ %1684, %1683 ], [ %1692, %1687 ]
  %1689 = getelementptr inbounds i16, ptr %375, i64 %1688
  %1690 = load <8 x i16>, ptr %1689, align 2, !tbaa !44
  %1691 = getelementptr inbounds i16, ptr %1648, i64 %1688
  store <8 x i16> %1690, ptr %1691, align 2, !tbaa !44
  %1692 = add nuw i64 %1688, 8
  %1693 = icmp eq i64 %1692, %1686
  br i1 %1693, label %1694, label %1687, !llvm.loop !133

1694:                                             ; preds = %1687
  %1695 = icmp eq i64 %1685, 0
  br i1 %1695, label %1734, label %1696

1696:                                             ; preds = %1653, %1650, %1681, %1694
  %1697 = phi i64 [ 0, %1650 ], [ 0, %1653 ], [ %1662, %1681 ], [ %1686, %1694 ]
  %1698 = sub i64 %1644, %1697
  %1699 = xor i64 %1697, -1
  %1700 = add nsw i64 %1651, %1699
  %1701 = and i64 %1698, 3
  %1702 = icmp eq i64 %1701, 0
  br i1 %1702, label %1712, label %1703

1703:                                             ; preds = %1696, %1703
  %1704 = phi i64 [ %1709, %1703 ], [ %1697, %1696 ]
  %1705 = phi i64 [ %1710, %1703 ], [ 0, %1696 ]
  %1706 = getelementptr inbounds i16, ptr %375, i64 %1704
  %1707 = load i16, ptr %1706, align 2, !tbaa !44
  %1708 = getelementptr inbounds i16, ptr %1648, i64 %1704
  store i16 %1707, ptr %1708, align 2, !tbaa !44
  %1709 = add nuw nsw i64 %1704, 1
  %1710 = add i64 %1705, 1
  %1711 = icmp eq i64 %1710, %1701
  br i1 %1711, label %1712, label %1703, !llvm.loop !134

1712:                                             ; preds = %1703, %1696
  %1713 = phi i64 [ %1697, %1696 ], [ %1709, %1703 ]
  %1714 = icmp ult i64 %1700, 3
  br i1 %1714, label %1734, label %1715

1715:                                             ; preds = %1712, %1715
  %1716 = phi i64 [ %1732, %1715 ], [ %1713, %1712 ]
  %1717 = getelementptr inbounds i16, ptr %375, i64 %1716
  %1718 = load i16, ptr %1717, align 2, !tbaa !44
  %1719 = getelementptr inbounds i16, ptr %1648, i64 %1716
  store i16 %1718, ptr %1719, align 2, !tbaa !44
  %1720 = add nuw nsw i64 %1716, 1
  %1721 = getelementptr inbounds i16, ptr %375, i64 %1720
  %1722 = load i16, ptr %1721, align 2, !tbaa !44
  %1723 = getelementptr inbounds i16, ptr %1648, i64 %1720
  store i16 %1722, ptr %1723, align 2, !tbaa !44
  %1724 = add nuw nsw i64 %1716, 2
  %1725 = getelementptr inbounds i16, ptr %375, i64 %1724
  %1726 = load i16, ptr %1725, align 2, !tbaa !44
  %1727 = getelementptr inbounds i16, ptr %1648, i64 %1724
  store i16 %1726, ptr %1727, align 2, !tbaa !44
  %1728 = add nuw nsw i64 %1716, 3
  %1729 = getelementptr inbounds i16, ptr %375, i64 %1728
  %1730 = load i16, ptr %1729, align 2, !tbaa !44
  %1731 = getelementptr inbounds i16, ptr %1648, i64 %1728
  store i16 %1730, ptr %1731, align 2, !tbaa !44
  %1732 = add nuw nsw i64 %1716, 4
  %1733 = icmp eq i64 %1732, %1651
  br i1 %1733, label %1734, label %1715, !llvm.loop !135

1734:                                             ; preds = %1712, %1715, %1679, %1694
  %1735 = shl i64 %1643, 31
  %1736 = add i64 %1735, -4294967296
  %1737 = ashr i64 %1736, 32
  %1738 = getelementptr inbounds i16, ptr %1648, i64 %1737
  %1739 = load i16, ptr %1738, align 2, !tbaa !44
  br label %1740

1740:                                             ; preds = %1631, %1734
  %1741 = phi i64 [ %1644, %1734 ], [ 0, %1631 ]
  %1742 = phi i16 [ %1739, %1734 ], [ -1, %1631 ]
  %1743 = and i64 %1741, 4294967295
  %1744 = getelementptr inbounds i16, ptr %1648, i64 %1743
  store i16 %1742, ptr %1744, align 2, !tbaa !44
  %1745 = trunc i64 %1644 to i16
  %1746 = add i16 %1745, 1
  %1747 = sext i32 %1641 to i64
  %1748 = getelementptr inbounds i16, ptr %1175, i64 %1747
  store i16 %1746, ptr %1748, align 2, !tbaa !44
  %1749 = add i32 %1645, 3
  %1750 = add i32 %1749, %1641
  %1751 = select i1 %142, i32 1, i32 %1750
  store i32 %1751, ptr %13, align 8, !tbaa !17
  br label %1787

1752:                                             ; preds = %673
  %1753 = load <2 x double>, ptr %685, align 8, !tbaa !19
  %1754 = fadd <2 x double> %15, %1753
  %1755 = getelementptr inbounds %class.Vector, ptr %685, i64 0, i32 2
  %1756 = load double, ptr %1755, align 8, !tbaa !49
  %1757 = fadd double %17, %1756
  %1758 = load ptr, ptr %8, align 8, !tbaa !46
  %1759 = load i32, ptr %13, align 8, !tbaa !17
  %1760 = add i32 %1759, 1
  %1761 = sext i32 %1760 to i64
  %1762 = getelementptr inbounds i16, ptr %1758, i64 %1761
  %1763 = sext i32 %1759 to i64
  %1764 = getelementptr inbounds i16, ptr %1758, i64 %1763
  %1765 = load i16, ptr %1764, align 2, !tbaa !44
  %1766 = zext i16 %1765 to i32
  %1767 = add i32 %1760, %1766
  %1768 = add nsw i32 %1766, -1
  %1769 = add i32 %1767, 1
  %1770 = sext i32 %1769 to i64
  %1771 = getelementptr inbounds i16, ptr %1758, i64 %1770
  %1772 = sext i32 %1767 to i64
  %1773 = getelementptr inbounds i16, ptr %1758, i64 %1772
  %1774 = load i16, ptr %1773, align 2, !tbaa !44
  %1775 = zext i16 %1774 to i32
  %1776 = add i32 %1769, %1775
  %1777 = add nsw i32 %1775, -1
  %1778 = add i32 %1776, 1
  %1779 = sext i32 %1778 to i64
  %1780 = getelementptr inbounds i16, ptr %1758, i64 %1779
  %1781 = sext i32 %1776 to i64
  %1782 = getelementptr inbounds i16, ptr %1758, i64 %1781
  %1783 = load i16, ptr %1782, align 2, !tbaa !44
  %1784 = zext i16 %1783 to i32
  %1785 = add i32 %1778, %1784
  store i32 %1785, ptr %13, align 8, !tbaa !17
  %1786 = add nsw i32 %1784, -1
  br label %1787

1787:                                             ; preds = %1740, %1752
  %1788 = phi double [ %1757, %1752 ], [ %705, %1740 ]
  %1789 = phi i32 [ %680, %1752 ], [ %700, %1740 ]
  %1790 = phi ptr [ %1762, %1752 ], [ %1179, %1740 ]
  %1791 = phi i32 [ %1768, %1752 ], [ %1515, %1740 ]
  %1792 = phi ptr [ %1771, %1752 ], [ %1539, %1740 ]
  %1793 = phi i32 [ %1777, %1752 ], [ %1536, %1740 ]
  %1794 = phi ptr [ %1780, %1752 ], [ %1648, %1740 ]
  %1795 = phi i32 [ %1786, %1752 ], [ %1645, %1740 ]
  %1796 = phi i32 [ %679, %1752 ], [ %1140, %1740 ]
  %1797 = phi ptr [ %678, %1752 ], [ %950, %1740 ]
  %1798 = phi ptr [ %677, %1752 ], [ %951, %1740 ]
  %1799 = phi ptr [ %676, %1752 ], [ %952, %1740 ]
  %1800 = phi <2 x double> [ %1754, %1752 ], [ %702, %1740 ]
  %1801 = getelementptr inbounds %struct.CompAtom, ptr %39, i64 %684, i32 1
  %1802 = load float, ptr %1801, align 8, !tbaa !79
  %1803 = fpext float %1802 to double
  %1804 = fmul double %1803, 0x4074C104816F0069
  %1805 = fmul double %28, %1804
  %1806 = fmul double %24, %1805
  %1807 = getelementptr inbounds %struct.CompAtom, ptr %39, i64 %684, i32 2
  %1808 = load i16, ptr %1807, align 4, !tbaa !80
  %1809 = sext i16 %1808 to i32
  %1810 = load ptr, ptr %667, align 8, !tbaa !81
  %1811 = load i32, ptr %668, align 8, !tbaa !83
  %1812 = shl nsw i32 %1809, 1
  %1813 = mul i32 %1812, %1811
  %1814 = zext i32 %1813 to i64
  %1815 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %1810, i64 %1814
  %1816 = load double, ptr @_ZN20ComputeNonbondedUtil7cutoff2E, align 8, !tbaa !19
  %1817 = extractelement <2 x double> %1800, i64 0
  %1818 = extractelement <2 x double> %1800, i64 1
  %1819 = tail call noundef i32 @_Z22pairlist_from_pairlistddddPK8CompAtomPKtiPtdPd(double noundef %1816, double noundef %1817, double noundef %1818, double noundef %1788, ptr noundef %41, ptr noundef nonnull %1790, i32 noundef %1791, ptr noundef %94, double noundef %31, ptr noundef %140)
  %1820 = icmp sgt i32 %1819, 0
  br i1 %1820, label %1821, label %1928

1821:                                             ; preds = %1787
  %1822 = load ptr, ptr @_ZN20ComputeNonbondedUtil8r2_tableE, align 8, !tbaa !23
  %1823 = zext i32 %1819 to i64
  br label %1824

1824:                                             ; preds = %1821, %1824
  %1825 = phi i64 [ 0, %1821 ], [ %1926, %1824 ]
  %1826 = phi double [ 0.000000e+00, %1821 ], [ %1922, %1824 ]
  %1827 = phi <2 x double> [ %681, %1821 ], [ %1914, %1824 ]
  %1828 = phi <2 x double> [ %682, %1821 ], [ %1907, %1824 ]
  %1829 = phi <2 x double> [ %683, %1821 ], [ %1920, %1824 ]
  %1830 = phi <2 x double> [ zeroinitializer, %1821 ], [ %1916, %1824 ]
  %1831 = shl nuw nsw i64 %1825, 1
  %1832 = getelementptr inbounds i32, ptr %141, i64 %1831
  %1833 = load i32, ptr %1832, align 4, !tbaa !5
  %1834 = ashr i32 %1833, 14
  %1835 = add nsw i32 %1834, %34
  %1836 = getelementptr inbounds i16, ptr %94, i64 %1825
  %1837 = load i16, ptr %1836, align 2, !tbaa !44
  %1838 = zext i16 %1837 to i64
  %1839 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %1838
  %1840 = getelementptr inbounds double, ptr %140, i64 %1825
  %1841 = load double, ptr %1840, align 8, !tbaa !19
  %1842 = sext i32 %1835 to i64
  %1843 = getelementptr inbounds double, ptr %1822, i64 %1842
  %1844 = load double, ptr %1843, align 8, !tbaa !19
  %1845 = fsub double %1841, %1844
  %1846 = shl nsw i32 %1835, 4
  %1847 = sext i32 %1846 to i64
  %1848 = getelementptr inbounds double, ptr %27, i64 %1847
  %1849 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %1838, i32 2
  %1850 = load i16, ptr %1849, align 4, !tbaa !80
  %1851 = sext i16 %1850 to i32
  %1852 = shl nsw i32 %1851, 1
  %1853 = sext i32 %1852 to i64
  %1854 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %1815, i64 %1853
  %1855 = getelementptr inbounds %class.Vector, ptr %648, i64 %1838
  %1856 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %1838, i32 1
  %1857 = load float, ptr %1856, align 8, !tbaa !79
  %1858 = fpext float %1857 to double
  %1859 = fmul double %1806, %1858
  %1860 = load <2 x double>, ptr %1839, align 8, !tbaa !19
  %1861 = fsub <2 x double> %1800, %1860
  %1862 = getelementptr inbounds %class.Vector, ptr %1839, i64 0, i32 2
  %1863 = load double, ptr %1862, align 8, !tbaa !49
  %1864 = fsub double %1788, %1863
  %1865 = load double, ptr %1854, align 8, !tbaa !84
  %1866 = fmul double %28, %1865
  %1867 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %1815, i64 %1853, i32 1
  %1868 = load double, ptr %1867, align 8, !tbaa !86
  %1869 = load double, ptr %1848, align 8, !tbaa !19
  %1870 = getelementptr inbounds double, ptr %1848, i64 2
  %1871 = load double, ptr %1870, align 8, !tbaa !19
  %1872 = fmul double %1868, %669
  %1873 = fmul double %1872, %1871
  %1874 = tail call double @llvm.fmuladd.f64(double %1866, double %1869, double %1873)
  %1875 = getelementptr inbounds double, ptr %1848, i64 1
  %1876 = load double, ptr %1875, align 8, !tbaa !19
  %1877 = getelementptr inbounds double, ptr %1848, i64 3
  %1878 = load double, ptr %1877, align 8, !tbaa !19
  %1879 = fmul double %1872, %1878
  %1880 = tail call double @llvm.fmuladd.f64(double %1866, double %1876, double %1879)
  %1881 = getelementptr inbounds double, ptr %1848, i64 4
  %1882 = load double, ptr %1881, align 8, !tbaa !19
  %1883 = getelementptr inbounds double, ptr %1848, i64 6
  %1884 = load double, ptr %1883, align 8, !tbaa !19
  %1885 = fmul double %1872, %1884
  %1886 = tail call double @llvm.fmuladd.f64(double %1866, double %1882, double %1885)
  %1887 = getelementptr inbounds double, ptr %1848, i64 8
  %1888 = load double, ptr %1887, align 8, !tbaa !19
  %1889 = getelementptr inbounds double, ptr %1848, i64 9
  %1890 = load double, ptr %1889, align 8, !tbaa !19
  %1891 = getelementptr inbounds double, ptr %1848, i64 10
  %1892 = load double, ptr %1891, align 8, !tbaa !19
  %1893 = fmul double %1859, %1888
  %1894 = fmul double %1859, %1890
  %1895 = fmul double %1859, %1892
  %1896 = fadd double %1874, %1893
  %1897 = fadd double %1880, %1894
  %1898 = fadd double %1886, %1895
  %1899 = tail call double @llvm.fmuladd.f64(double %1845, double %1896, double %1897)
  %1900 = tail call double @llvm.fmuladd.f64(double %1899, double %1845, double %1898)
  %1901 = extractelement <2 x double> %1861, i64 1
  %1902 = fmul double %1901, %1900
  %1903 = insertelement <2 x double> poison, double %1902, i64 0
  %1904 = shufflevector <2 x double> %1903, <2 x double> poison, <2 x i32> zeroinitializer
  %1905 = shufflevector <2 x double> %1861, <2 x double> poison, <2 x i32> <i32 1, i32 0>
  %1906 = insertelement <2 x double> %1905, double %1864, i64 1
  %1907 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %1904, <2 x double> %1906, <2 x double> %1828)
  %1908 = insertelement <2 x double> %1905, double %1864, i64 0
  %1909 = insertelement <2 x double> poison, double %1900, i64 0
  %1910 = shufflevector <2 x double> %1909, <2 x double> poison, <2 x i32> zeroinitializer
  %1911 = fmul <2 x double> %1908, %1910
  %1912 = shufflevector <2 x double> %1911, <2 x double> poison, <2 x i32> <i32 1, i32 poison>
  %1913 = shufflevector <2 x double> %1911, <2 x double> poison, <2 x i32> <i32 1, i32 1>
  %1914 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %1913, <2 x double> %1861, <2 x double> %1827)
  %1915 = insertelement <2 x double> %1912, double %1902, i64 1
  %1916 = fadd <2 x double> %1830, %1915
  %1917 = load <2 x double>, ptr %1855, align 8, !tbaa !19
  %1918 = fsub <2 x double> %1917, %1915
  store <2 x double> %1918, ptr %1855, align 8, !tbaa !19
  %1919 = shufflevector <2 x double> %1908, <2 x double> poison, <2 x i32> zeroinitializer
  %1920 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %1911, <2 x double> %1919, <2 x double> %1829)
  %1921 = extractelement <2 x double> %1911, i64 0
  %1922 = fadd double %1826, %1921
  %1923 = getelementptr inbounds %class.Vector, ptr %648, i64 %1838, i32 2
  %1924 = load double, ptr %1923, align 8, !tbaa !87
  %1925 = fsub double %1924, %1921
  store double %1925, ptr %1923, align 8, !tbaa !87
  %1926 = add nuw nsw i64 %1825, 1
  %1927 = icmp eq i64 %1926, %1823
  br i1 %1927, label %1928, label %1824

1928:                                             ; preds = %1824, %1787
  %1929 = phi double [ 0.000000e+00, %1787 ], [ %1922, %1824 ]
  %1930 = phi <2 x double> [ %681, %1787 ], [ %1914, %1824 ]
  %1931 = phi <2 x double> [ %682, %1787 ], [ %1907, %1824 ]
  %1932 = phi <2 x double> [ %683, %1787 ], [ %1920, %1824 ]
  %1933 = phi <2 x double> [ zeroinitializer, %1787 ], [ %1916, %1824 ]
  %1934 = load double, ptr @_ZN20ComputeNonbondedUtil7cutoff2E, align 8, !tbaa !19
  %1935 = tail call noundef i32 @_Z22pairlist_from_pairlistddddPK8CompAtomPKtiPtdPd(double noundef %1934, double noundef %1817, double noundef %1818, double noundef %1788, ptr noundef %41, ptr noundef %1794, i32 noundef %1795, ptr noundef %94, double noundef %31, ptr noundef %140)
  %1936 = add nsw i32 %1935, %674
  %1937 = icmp sgt i32 %1935, 0
  br i1 %1937, label %1938, label %2055

1938:                                             ; preds = %1928
  %1939 = load ptr, ptr @_ZN20ComputeNonbondedUtil8r2_tableE, align 8, !tbaa !23
  %1940 = zext i32 %1935 to i64
  br label %1941

1941:                                             ; preds = %1938, %1941
  %1942 = phi i64 [ 0, %1938 ], [ %2053, %1941 ]
  %1943 = phi double [ %1929, %1938 ], [ %2049, %1941 ]
  %1944 = phi <2 x double> [ %1930, %1938 ], [ %2041, %1941 ]
  %1945 = phi <2 x double> [ %1931, %1938 ], [ %2034, %1941 ]
  %1946 = phi <2 x double> [ %1932, %1938 ], [ %2047, %1941 ]
  %1947 = phi <2 x double> [ %1933, %1938 ], [ %2043, %1941 ]
  %1948 = shl nuw nsw i64 %1942, 1
  %1949 = getelementptr inbounds i32, ptr %141, i64 %1948
  %1950 = load i32, ptr %1949, align 4, !tbaa !5
  %1951 = ashr i32 %1950, 14
  %1952 = add nsw i32 %1951, %34
  %1953 = getelementptr inbounds i16, ptr %94, i64 %1942
  %1954 = load i16, ptr %1953, align 2, !tbaa !44
  %1955 = zext i16 %1954 to i64
  %1956 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %1955
  %1957 = getelementptr inbounds double, ptr %140, i64 %1942
  %1958 = load double, ptr %1957, align 8, !tbaa !19
  %1959 = sext i32 %1952 to i64
  %1960 = getelementptr inbounds double, ptr %1939, i64 %1959
  %1961 = load double, ptr %1960, align 8, !tbaa !19
  %1962 = fsub double %1958, %1961
  %1963 = shl nsw i32 %1952, 4
  %1964 = sext i32 %1963 to i64
  %1965 = getelementptr inbounds double, ptr %27, i64 %1964
  %1966 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %1955, i32 2
  %1967 = load i16, ptr %1966, align 4, !tbaa !80
  %1968 = sext i16 %1967 to i32
  %1969 = shl nsw i32 %1968, 1
  %1970 = sext i32 %1969 to i64
  %1971 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %1815, i64 %1970
  %1972 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %1971, i64 1
  %1973 = getelementptr inbounds %class.Vector, ptr %648, i64 %1955
  %1974 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %1955, i32 1
  %1975 = load float, ptr %1974, align 8, !tbaa !79
  %1976 = fpext float %1975 to double
  %1977 = fmul double %1806, %1976
  %1978 = load <2 x double>, ptr %1956, align 8, !tbaa !19
  %1979 = fsub <2 x double> %1800, %1978
  %1980 = getelementptr inbounds %class.Vector, ptr %1956, i64 0, i32 2
  %1981 = load double, ptr %1980, align 8, !tbaa !49
  %1982 = fsub double %1788, %1981
  %1983 = load double, ptr %1972, align 8, !tbaa !84
  %1984 = fmul double %28, %1983
  %1985 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %1971, i64 1, i32 1
  %1986 = load double, ptr %1985, align 8, !tbaa !86
  %1987 = load double, ptr %1965, align 8, !tbaa !19
  %1988 = getelementptr inbounds double, ptr %1965, i64 2
  %1989 = load double, ptr %1988, align 8, !tbaa !19
  %1990 = fmul double %1986, %669
  %1991 = fmul double %1990, %1989
  %1992 = tail call double @llvm.fmuladd.f64(double %1984, double %1987, double %1991)
  %1993 = getelementptr inbounds double, ptr %1965, i64 1
  %1994 = load double, ptr %1993, align 8, !tbaa !19
  %1995 = getelementptr inbounds double, ptr %1965, i64 3
  %1996 = load double, ptr %1995, align 8, !tbaa !19
  %1997 = fmul double %1990, %1996
  %1998 = tail call double @llvm.fmuladd.f64(double %1984, double %1994, double %1997)
  %1999 = getelementptr inbounds double, ptr %1965, i64 4
  %2000 = load double, ptr %1999, align 8, !tbaa !19
  %2001 = getelementptr inbounds double, ptr %1965, i64 6
  %2002 = load double, ptr %2001, align 8, !tbaa !19
  %2003 = fmul double %1990, %2002
  %2004 = tail call double @llvm.fmuladd.f64(double %1984, double %2000, double %2003)
  %2005 = getelementptr inbounds double, ptr %1965, i64 8
  %2006 = load double, ptr %2005, align 8, !tbaa !19
  %2007 = getelementptr inbounds double, ptr %1965, i64 9
  %2008 = load double, ptr %2007, align 8, !tbaa !19
  %2009 = getelementptr inbounds double, ptr %1965, i64 10
  %2010 = load double, ptr %2009, align 8, !tbaa !19
  %2011 = getelementptr inbounds double, ptr %1965, i64 12
  %2012 = load double, ptr %2011, align 8, !tbaa !19
  %2013 = tail call double @llvm.fmuladd.f64(double %670, double %2012, double %2006)
  %2014 = getelementptr inbounds double, ptr %1965, i64 13
  %2015 = load double, ptr %2014, align 8, !tbaa !19
  %2016 = tail call double @llvm.fmuladd.f64(double %670, double %2015, double %2008)
  %2017 = getelementptr inbounds double, ptr %1965, i64 14
  %2018 = load double, ptr %2017, align 8, !tbaa !19
  %2019 = tail call double @llvm.fmuladd.f64(double %670, double %2018, double %2010)
  %2020 = fmul double %1977, %2013
  %2021 = fmul double %1977, %2016
  %2022 = fmul double %1977, %2019
  %2023 = fadd double %1992, %2020
  %2024 = fadd double %1998, %2021
  %2025 = fadd double %2004, %2022
  %2026 = tail call double @llvm.fmuladd.f64(double %1962, double %2023, double %2024)
  %2027 = tail call double @llvm.fmuladd.f64(double %2026, double %1962, double %2025)
  %2028 = extractelement <2 x double> %1979, i64 1
  %2029 = fmul double %2028, %2027
  %2030 = insertelement <2 x double> poison, double %2029, i64 0
  %2031 = shufflevector <2 x double> %2030, <2 x double> poison, <2 x i32> zeroinitializer
  %2032 = shufflevector <2 x double> %1979, <2 x double> poison, <2 x i32> <i32 1, i32 0>
  %2033 = insertelement <2 x double> %2032, double %1982, i64 1
  %2034 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2031, <2 x double> %2033, <2 x double> %1945)
  %2035 = insertelement <2 x double> %2032, double %1982, i64 0
  %2036 = insertelement <2 x double> poison, double %2027, i64 0
  %2037 = shufflevector <2 x double> %2036, <2 x double> poison, <2 x i32> zeroinitializer
  %2038 = fmul <2 x double> %2035, %2037
  %2039 = shufflevector <2 x double> %2038, <2 x double> poison, <2 x i32> <i32 1, i32 poison>
  %2040 = shufflevector <2 x double> %2038, <2 x double> poison, <2 x i32> <i32 1, i32 1>
  %2041 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2040, <2 x double> %1979, <2 x double> %1944)
  %2042 = insertelement <2 x double> %2039, double %2029, i64 1
  %2043 = fadd <2 x double> %1947, %2042
  %2044 = load <2 x double>, ptr %1973, align 8, !tbaa !19
  %2045 = fsub <2 x double> %2044, %2042
  store <2 x double> %2045, ptr %1973, align 8, !tbaa !19
  %2046 = shufflevector <2 x double> %2035, <2 x double> poison, <2 x i32> zeroinitializer
  %2047 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2038, <2 x double> %2046, <2 x double> %1946)
  %2048 = extractelement <2 x double> %2038, i64 0
  %2049 = fadd double %1943, %2048
  %2050 = getelementptr inbounds %class.Vector, ptr %648, i64 %1955, i32 2
  %2051 = load double, ptr %2050, align 8, !tbaa !87
  %2052 = fsub double %2051, %2048
  store double %2052, ptr %2050, align 8, !tbaa !87
  %2053 = add nuw nsw i64 %1942, 1
  %2054 = icmp eq i64 %2053, %1940
  br i1 %2054, label %2055, label %1941

2055:                                             ; preds = %1941, %1928
  %2056 = phi double [ %1929, %1928 ], [ %2049, %1941 ]
  %2057 = phi <2 x double> [ %1930, %1928 ], [ %2041, %1941 ]
  %2058 = phi <2 x double> [ %1931, %1928 ], [ %2034, %1941 ]
  %2059 = phi <2 x double> [ %1932, %1928 ], [ %2047, %1941 ]
  %2060 = phi <2 x double> [ %1933, %1928 ], [ %2043, %1941 ]
  %2061 = load double, ptr @_ZN20ComputeNonbondedUtil7cutoff2E, align 8, !tbaa !19
  %2062 = tail call noundef i32 @_Z22pairlist_from_pairlistddddPK8CompAtomPKtiPtdPd(double noundef %2061, double noundef %1817, double noundef %1818, double noundef %1788, ptr noundef %41, ptr noundef %1792, i32 noundef %1793, ptr noundef %94, double noundef %31, ptr noundef %140)
  %2063 = add nsw i32 %1936, %2062
  %2064 = icmp sgt i32 %2062, 0
  br i1 %2064, label %2065, label %2150

2065:                                             ; preds = %2055
  %2066 = load ptr, ptr @_ZN20ComputeNonbondedUtil8r2_tableE, align 8, !tbaa !23
  %2067 = zext i32 %2062 to i64
  br label %2068

2068:                                             ; preds = %2065, %2068
  %2069 = phi i64 [ 0, %2065 ], [ %2148, %2068 ]
  %2070 = phi double [ %2056, %2065 ], [ %2144, %2068 ]
  %2071 = phi <2 x double> [ %2057, %2065 ], [ %2136, %2068 ]
  %2072 = phi <2 x double> [ %2058, %2065 ], [ %2129, %2068 ]
  %2073 = phi <2 x double> [ %2059, %2065 ], [ %2142, %2068 ]
  %2074 = phi <2 x double> [ %2060, %2065 ], [ %2138, %2068 ]
  %2075 = shl nuw nsw i64 %2069, 1
  %2076 = getelementptr inbounds i32, ptr %141, i64 %2075
  %2077 = load i32, ptr %2076, align 4, !tbaa !5
  %2078 = ashr i32 %2077, 14
  %2079 = add nsw i32 %2078, %34
  %2080 = getelementptr inbounds i16, ptr %94, i64 %2069
  %2081 = load i16, ptr %2080, align 2, !tbaa !44
  %2082 = zext i16 %2081 to i64
  %2083 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %2082
  %2084 = getelementptr inbounds double, ptr %140, i64 %2069
  %2085 = load double, ptr %2084, align 8, !tbaa !19
  %2086 = sext i32 %2079 to i64
  %2087 = getelementptr inbounds double, ptr %2066, i64 %2086
  %2088 = load double, ptr %2087, align 8, !tbaa !19
  %2089 = fsub double %2085, %2088
  %2090 = shl nsw i32 %2079, 4
  %2091 = sext i32 %2090 to i64
  %2092 = getelementptr inbounds double, ptr %27, i64 %2091
  %2093 = getelementptr inbounds %class.Vector, ptr %648, i64 %2082
  %2094 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %2082, i32 1
  %2095 = load float, ptr %2094, align 8, !tbaa !79
  %2096 = fpext float %2095 to double
  %2097 = fmul double %1806, %2096
  %2098 = load <2 x double>, ptr %2083, align 8, !tbaa !19
  %2099 = fsub <2 x double> %1800, %2098
  %2100 = getelementptr inbounds %class.Vector, ptr %2083, i64 0, i32 2
  %2101 = load double, ptr %2100, align 8, !tbaa !49
  %2102 = fsub double %1788, %2101
  %2103 = getelementptr inbounds double, ptr %2092, i64 8
  %2104 = load double, ptr %2103, align 8, !tbaa !19
  %2105 = getelementptr inbounds double, ptr %2092, i64 9
  %2106 = load double, ptr %2105, align 8, !tbaa !19
  %2107 = getelementptr inbounds double, ptr %2092, i64 10
  %2108 = load double, ptr %2107, align 8, !tbaa !19
  %2109 = getelementptr inbounds double, ptr %2092, i64 12
  %2110 = load double, ptr %2109, align 8, !tbaa !19
  %2111 = fsub double %2104, %2110
  %2112 = getelementptr inbounds double, ptr %2092, i64 13
  %2113 = load double, ptr %2112, align 8, !tbaa !19
  %2114 = fsub double %2106, %2113
  %2115 = getelementptr inbounds double, ptr %2092, i64 14
  %2116 = load double, ptr %2115, align 8, !tbaa !19
  %2117 = fsub double %2108, %2116
  %2118 = fmul double %2097, %2111
  %2119 = fmul double %2097, %2114
  %2120 = fmul double %2097, %2117
  %2121 = tail call double @llvm.fmuladd.f64(double %2089, double %2118, double %2119)
  %2122 = tail call double @llvm.fmuladd.f64(double %2121, double %2089, double %2120)
  %2123 = extractelement <2 x double> %2099, i64 1
  %2124 = fmul double %2123, %2122
  %2125 = insertelement <2 x double> poison, double %2124, i64 0
  %2126 = shufflevector <2 x double> %2125, <2 x double> poison, <2 x i32> zeroinitializer
  %2127 = shufflevector <2 x double> %2099, <2 x double> poison, <2 x i32> <i32 1, i32 0>
  %2128 = insertelement <2 x double> %2127, double %2102, i64 1
  %2129 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2126, <2 x double> %2128, <2 x double> %2072)
  %2130 = insertelement <2 x double> %2127, double %2102, i64 0
  %2131 = insertelement <2 x double> poison, double %2122, i64 0
  %2132 = shufflevector <2 x double> %2131, <2 x double> poison, <2 x i32> zeroinitializer
  %2133 = fmul <2 x double> %2130, %2132
  %2134 = shufflevector <2 x double> %2133, <2 x double> poison, <2 x i32> <i32 1, i32 poison>
  %2135 = shufflevector <2 x double> %2133, <2 x double> poison, <2 x i32> <i32 1, i32 1>
  %2136 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2135, <2 x double> %2099, <2 x double> %2071)
  %2137 = insertelement <2 x double> %2134, double %2124, i64 1
  %2138 = fadd <2 x double> %2074, %2137
  %2139 = load <2 x double>, ptr %2093, align 8, !tbaa !19
  %2140 = fsub <2 x double> %2139, %2137
  store <2 x double> %2140, ptr %2093, align 8, !tbaa !19
  %2141 = shufflevector <2 x double> %2130, <2 x double> poison, <2 x i32> zeroinitializer
  %2142 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2133, <2 x double> %2141, <2 x double> %2073)
  %2143 = extractelement <2 x double> %2133, i64 0
  %2144 = fadd double %2070, %2143
  %2145 = getelementptr inbounds %class.Vector, ptr %648, i64 %2082, i32 2
  %2146 = load double, ptr %2145, align 8, !tbaa !87
  %2147 = fsub double %2146, %2143
  store double %2147, ptr %2145, align 8, !tbaa !87
  %2148 = add nuw nsw i64 %2069, 1
  %2149 = icmp eq i64 %2148, %2067
  br i1 %2149, label %2150, label %2068

2150:                                             ; preds = %2068, %2055
  %2151 = phi double [ %2056, %2055 ], [ %2144, %2068 ]
  %2152 = phi <2 x double> [ %2057, %2055 ], [ %2136, %2068 ]
  %2153 = phi <2 x double> [ %2058, %2055 ], [ %2129, %2068 ]
  %2154 = phi <2 x double> [ %2059, %2055 ], [ %2142, %2068 ]
  %2155 = phi <2 x double> [ %2060, %2055 ], [ %2138, %2068 ]
  %2156 = getelementptr inbounds %class.Vector, ptr %649, i64 %684
  %2157 = load <2 x double>, ptr %2156, align 8, !tbaa !19
  %2158 = fadd <2 x double> %2155, %2157
  store <2 x double> %2158, ptr %2156, align 8, !tbaa !19
  %2159 = getelementptr inbounds %class.Vector, ptr %649, i64 %684, i32 2
  %2160 = load double, ptr %2159, align 8, !tbaa !87
  %2161 = fadd double %2151, %2160
  store double %2161, ptr %2159, align 8, !tbaa !87
  br i1 %144, label %2164, label %2162

2162:                                             ; preds = %2150
  %2163 = add nsw i32 %675, 1
  br label %2172

2164:                                             ; preds = %2150
  %2165 = load ptr, ptr %8, align 8, !tbaa !46
  %2166 = load i32, ptr %13, align 8, !tbaa !17
  %2167 = add nsw i32 %2166, 1
  store i32 %2167, ptr %13, align 8, !tbaa !17
  %2168 = sext i32 %2166 to i64
  %2169 = getelementptr inbounds i16, ptr %2165, i64 %2168
  %2170 = load i16, ptr %2169, align 2, !tbaa !44
  %2171 = zext i16 %2170 to i32
  br label %2172

2172:                                             ; preds = %1126, %1394, %2164, %2162, %696
  %2173 = phi i32 [ %1789, %2164 ], [ %1789, %2162 ], [ %697, %696 ], [ %700, %1394 ], [ %700, %1126 ]
  %2174 = phi i32 [ %1796, %2164 ], [ %1796, %2162 ], [ %679, %696 ], [ %1140, %1394 ], [ 0, %1126 ]
  %2175 = phi ptr [ %1797, %2164 ], [ %1797, %2162 ], [ %678, %696 ], [ %950, %1394 ], [ %950, %1126 ]
  %2176 = phi ptr [ %1798, %2164 ], [ %1798, %2162 ], [ %677, %696 ], [ %951, %1394 ], [ %951, %1126 ]
  %2177 = phi ptr [ %1799, %2164 ], [ %1799, %2162 ], [ %676, %696 ], [ %952, %1394 ], [ %952, %1126 ]
  %2178 = phi i32 [ %2171, %2164 ], [ %2163, %2162 ], [ %698, %696 ], [ %1395, %1394 ], [ %1130, %1126 ]
  %2179 = phi i32 [ %2063, %2164 ], [ %2063, %2162 ], [ %674, %696 ], [ %674, %1394 ], [ %674, %1126 ]
  %2180 = phi <2 x double> [ %2152, %2164 ], [ %2152, %2162 ], [ %681, %696 ], [ %681, %1394 ], [ %681, %1126 ]
  %2181 = phi <2 x double> [ %2153, %2164 ], [ %2153, %2162 ], [ %682, %696 ], [ %682, %1394 ], [ %682, %1126 ]
  %2182 = phi <2 x double> [ %2154, %2164 ], [ %2154, %2162 ], [ %683, %696 ], [ %683, %1394 ], [ %683, %1126 ]
  %2183 = icmp slt i32 %2178, %36
  br i1 %2183, label %673, label %2184

2184:                                             ; preds = %2172, %645
  %2185 = phi ptr [ null, %645 ], [ %2177, %2172 ]
  %2186 = phi i32 [ %652, %645 ], [ %2178, %2172 ]
  %2187 = phi i32 [ 0, %645 ], [ %2179, %2172 ]
  %2188 = phi <2 x double> [ zeroinitializer, %645 ], [ %2180, %2172 ]
  %2189 = phi <2 x double> [ zeroinitializer, %645 ], [ %2181, %2172 ]
  %2190 = phi <2 x double> [ zeroinitializer, %645 ], [ %2182, %2172 ]
  br i1 %142, label %2198, label %2191

2191:                                             ; preds = %2184
  %2192 = trunc i32 %2186 to i16
  %2193 = load ptr, ptr %8, align 8, !tbaa !46
  %2194 = load i32, ptr %13, align 8, !tbaa !17
  %2195 = add nsw i32 %2194, -1
  %2196 = sext i32 %2195 to i64
  %2197 = getelementptr inbounds i16, ptr %2193, i64 %2196
  store i16 %2192, ptr %2197, align 2, !tbaa !44
  br label %2198

2198:                                             ; preds = %2191, %2184
  %2199 = sitofp i32 %2187 to double
  %2200 = getelementptr inbounds double, ptr %6, i64 22
  %2201 = load double, ptr %2200, align 8, !tbaa !19
  %2202 = fadd double %2201, %2199
  store double %2202, ptr %2200, align 8, !tbaa !19
  %2203 = getelementptr inbounds double, ptr %6, i64 12
  %2204 = load <4 x double>, ptr %2203, align 8, !tbaa !19
  %2205 = shufflevector <2 x double> %2188, <2 x double> %2190, <4 x i32> <i32 0, i32 1, i32 3, i32 poison>
  %2206 = shufflevector <4 x double> %2205, <4 x double> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 1>
  %2207 = fadd <4 x double> %2206, %2204
  store <4 x double> %2207, ptr %2203, align 8, !tbaa !19
  %2208 = getelementptr inbounds double, ptr %6, i64 16
  %2209 = load <4 x double>, ptr %2208, align 8, !tbaa !19
  %2210 = shufflevector <2 x double> %2189, <2 x double> %2190, <4 x i32> <i32 0, i32 1, i32 3, i32 poison>
  %2211 = shufflevector <4 x double> %2210, <4 x double> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 1>
  %2212 = fadd <4 x double> %2211, %2209
  store <4 x double> %2212, ptr %2208, align 8, !tbaa !19
  %2213 = getelementptr inbounds double, ptr %6, i64 20
  %2214 = load double, ptr %2213, align 8, !tbaa !19
  %2215 = extractelement <2 x double> %2190, i64 0
  %2216 = fadd double %2215, %2214
  store double %2216, ptr %2213, align 8, !tbaa !19
  %2217 = icmp eq ptr %2185, null
  br i1 %2217, label %2219, label %2218

2218:                                             ; preds = %2198
  tail call void @_ZdaPv(ptr noundef nonnull %2185) #10
  br label %2219

2219:                                             ; preds = %2198, %2218, %1
  ret void
}

; Function Attrs: sspstrong uwtable
define dso_local void @_ZN20ComputeNonbondedUtil32calc_pair_energy_merge_fullelectEP9nonbonded(ptr nocapture noundef readonly %0) local_unnamed_addr #0 align 2 {
  %2 = load i32, ptr @_ZN20ComputeNonbondedUtil8commOnlyE, align 4, !tbaa !5
  %3 = icmp eq i32 %2, 0
  br i1 %3, label %4, label %2309

4:                                                ; preds = %1
  %5 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 7
  %6 = load ptr, ptr %5, align 8, !tbaa !9
  %7 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 10
  %8 = load ptr, ptr %7, align 8, !tbaa !14
  %9 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 11
  %10 = load i32, ptr %9, align 8, !tbaa !15
  %11 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 12
  %12 = load i32, ptr %11, align 4, !tbaa !16
  %13 = getelementptr inbounds %class.Pairlists, ptr %8, i64 0, i32 1
  store i32 0, ptr %13, align 8, !tbaa !17
  %14 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 6
  %15 = load <2 x double>, ptr %14, align 8, !tbaa !19
  %16 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 6, i32 2
  %17 = load double, ptr %16, align 8, !tbaa !20
  %18 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 13
  %19 = load double, ptr %18, align 8, !tbaa !21
  %20 = fmul double %19, %19
  %21 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 14
  %22 = load double, ptr %21, align 8, !tbaa !22
  %23 = fmul double %22, %22
  %24 = load double, ptr @_ZN20ComputeNonbondedUtil12dielectric_1E, align 8, !tbaa !19
  %25 = load ptr, ptr @_ZN20ComputeNonbondedUtil7ljTableE, align 8, !tbaa !23
  %26 = load ptr, ptr @_ZN20ComputeNonbondedUtil3molE, align 8, !tbaa !23
  %27 = load ptr, ptr @_ZN20ComputeNonbondedUtil13table_noshortE, align 8, !tbaa !23
  %28 = load double, ptr @_ZN20ComputeNonbondedUtil7scalingE, align 8, !tbaa !19
  %29 = load double, ptr @_ZN20ComputeNonbondedUtil7scale14E, align 8, !tbaa !19
  %30 = fsub double 1.000000e+00, %29
  %31 = load double, ptr @_ZN20ComputeNonbondedUtil8r2_deltaE, align 8, !tbaa !19
  %32 = load i32, ptr @_ZN20ComputeNonbondedUtil12r2_delta_expE, align 4, !tbaa !5
  %33 = shl i32 %32, 6
  %34 = add i32 %33, -65472
  %35 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 5
  %36 = load i32, ptr %35, align 8, !tbaa !5
  %37 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 5, i64 1
  %38 = load i32, ptr %37, align 4, !tbaa !5
  %39 = load ptr, ptr %0, align 8, !tbaa !23
  %40 = getelementptr inbounds [2 x ptr], ptr %0, i64 0, i64 1
  %41 = load ptr, ptr %40, align 8, !tbaa !23
  %42 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 1
  %43 = load ptr, ptr %42, align 8, !tbaa !23
  %44 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 1, i64 1
  %45 = load ptr, ptr %44, align 8, !tbaa !23
  %46 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 9
  %47 = load ptr, ptr %46, align 8, !tbaa !24
  %48 = add nsw i32 %38, 5
  %49 = getelementptr inbounds %class.ResizeArray, ptr %47, i64 0, i32 1
  %50 = load ptr, ptr %49, align 8, !tbaa !25
  %51 = getelementptr inbounds %class.ResizeArrayRaw, ptr %50, i64 0, i32 2
  %52 = load i32, ptr %51, align 8, !tbaa !27
  %53 = icmp slt i32 %52, %48
  br i1 %53, label %54, label %92

54:                                               ; preds = %4
  %55 = getelementptr inbounds %class.ResizeArrayRaw, ptr %50, i64 0, i32 3
  %56 = load i32, ptr %55, align 4, !tbaa !30
  %57 = icmp slt i32 %56, %48
  br i1 %57, label %58, label %92

58:                                               ; preds = %54
  %59 = sitofp i32 %56 to float
  %60 = getelementptr inbounds %class.ResizeArrayRaw, ptr %50, i64 0, i32 5
  %61 = load float, ptr %60, align 4, !tbaa !31
  %62 = fmul float %61, %59
  %63 = fptosi float %62 to i32
  %64 = tail call i32 @llvm.smax.i32(i32 %63, i32 %48)
  %65 = sub nsw i32 %64, %56
  %66 = getelementptr inbounds %class.ResizeArrayRaw, ptr %50, i64 0, i32 6
  %67 = load i32, ptr %66, align 8, !tbaa !32
  %68 = icmp slt i32 %65, %67
  %69 = add nsw i32 %67, %56
  %70 = select i1 %68, i32 %69, i32 %64
  %71 = sext i32 %70 to i64
  %72 = shl nsw i64 %71, 1
  %73 = add nsw i64 %72, 31
  %74 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %73) #9
  %75 = getelementptr inbounds i8, ptr %74, i64 31
  %76 = ptrtoint ptr %75 to i64
  %77 = and i64 %76, 31
  %78 = sub nsw i64 0, %77
  %79 = getelementptr inbounds i8, ptr %75, i64 %78
  %80 = load ptr, ptr %50, align 8, !tbaa !33
  %81 = sext i32 %52 to i64
  %82 = shl nsw i64 %81, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %79, ptr align 1 %80, i64 %82, i1 false)
  %83 = icmp eq i32 %56, 0
  br i1 %83, label %89, label %84

84:                                               ; preds = %58
  %85 = getelementptr inbounds %class.ResizeArrayRaw, ptr %50, i64 0, i32 1
  %86 = load ptr, ptr %85, align 8, !tbaa !34
  %87 = icmp eq ptr %86, null
  br i1 %87, label %89, label %88

88:                                               ; preds = %84
  tail call void @_ZdaPv(ptr noundef nonnull %86) #10
  br label %89

89:                                               ; preds = %88, %84, %58
  %90 = getelementptr inbounds %class.ResizeArrayRaw, ptr %50, i64 0, i32 1
  store ptr %74, ptr %90, align 8, !tbaa !34
  store ptr %79, ptr %50, align 8, !tbaa !33
  store i32 %70, ptr %55, align 4, !tbaa !30
  %91 = load ptr, ptr %49, align 8, !tbaa !25
  br label %92

92:                                               ; preds = %4, %54, %89
  %93 = phi ptr [ %50, %4 ], [ %50, %54 ], [ %91, %89 ]
  store i32 %48, ptr %51, align 8, !tbaa !27
  %94 = load ptr, ptr %93, align 8, !tbaa !33
  %95 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %47, i64 0, i32 1, i32 1
  %96 = load ptr, ptr %95, align 8, !tbaa !35
  %97 = getelementptr inbounds %class.ResizeArrayRaw.23, ptr %96, i64 0, i32 2
  %98 = load i32, ptr %97, align 8, !tbaa !37
  %99 = icmp slt i32 %98, %48
  br i1 %99, label %100, label %138

100:                                              ; preds = %92
  %101 = getelementptr inbounds %class.ResizeArrayRaw.23, ptr %96, i64 0, i32 3
  %102 = load i32, ptr %101, align 4, !tbaa !39
  %103 = icmp slt i32 %102, %48
  br i1 %103, label %104, label %138

104:                                              ; preds = %100
  %105 = sitofp i32 %102 to float
  %106 = getelementptr inbounds %class.ResizeArrayRaw.23, ptr %96, i64 0, i32 5
  %107 = load float, ptr %106, align 4, !tbaa !40
  %108 = fmul float %107, %105
  %109 = fptosi float %108 to i32
  %110 = tail call i32 @llvm.smax.i32(i32 %109, i32 %48)
  %111 = sub nsw i32 %110, %102
  %112 = getelementptr inbounds %class.ResizeArrayRaw.23, ptr %96, i64 0, i32 6
  %113 = load i32, ptr %112, align 8, !tbaa !41
  %114 = icmp slt i32 %111, %113
  %115 = add nsw i32 %113, %102
  %116 = select i1 %114, i32 %115, i32 %110
  %117 = sext i32 %116 to i64
  %118 = shl nsw i64 %117, 3
  %119 = add nsw i64 %118, 31
  %120 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %119) #9
  %121 = getelementptr inbounds i8, ptr %120, i64 31
  %122 = ptrtoint ptr %121 to i64
  %123 = and i64 %122, 31
  %124 = sub nsw i64 0, %123
  %125 = getelementptr inbounds i8, ptr %121, i64 %124
  %126 = load ptr, ptr %96, align 8, !tbaa !42
  %127 = sext i32 %98 to i64
  %128 = shl nsw i64 %127, 3
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %125, ptr align 1 %126, i64 %128, i1 false)
  %129 = icmp eq i32 %102, 0
  br i1 %129, label %135, label %130

130:                                              ; preds = %104
  %131 = getelementptr inbounds %class.ResizeArrayRaw.23, ptr %96, i64 0, i32 1
  %132 = load ptr, ptr %131, align 8, !tbaa !43
  %133 = icmp eq ptr %132, null
  br i1 %133, label %135, label %134

134:                                              ; preds = %130
  tail call void @_ZdaPv(ptr noundef nonnull %132) #10
  br label %135

135:                                              ; preds = %134, %130, %104
  %136 = getelementptr inbounds %class.ResizeArrayRaw.23, ptr %96, i64 0, i32 1
  store ptr %120, ptr %136, align 8, !tbaa !43
  store ptr %125, ptr %96, align 8, !tbaa !42
  store i32 %116, ptr %101, align 4, !tbaa !39
  %137 = load ptr, ptr %95, align 8, !tbaa !35
  br label %138

138:                                              ; preds = %92, %100, %135
  %139 = phi ptr [ %96, %92 ], [ %96, %100 ], [ %137, %135 ]
  store i32 %48, ptr %97, align 8, !tbaa !37
  %140 = load ptr, ptr %139, align 8, !tbaa !42
  %141 = getelementptr inbounds i32, ptr %140, i64 1
  %142 = icmp eq i32 %10, 0
  %143 = icmp ne i32 %12, 0
  %144 = select i1 %142, i1 %143, i1 false
  %145 = select i1 %144, i32 0, i32 %48
  %146 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %47, i64 0, i32 2, i32 1
  %147 = load ptr, ptr %146, align 8, !tbaa !25
  %148 = getelementptr inbounds %class.ResizeArrayRaw, ptr %147, i64 0, i32 2
  %149 = load i32, ptr %148, align 8, !tbaa !27
  %150 = icmp slt i32 %149, %145
  br i1 %150, label %151, label %189

151:                                              ; preds = %138
  %152 = getelementptr inbounds %class.ResizeArrayRaw, ptr %147, i64 0, i32 3
  %153 = load i32, ptr %152, align 4, !tbaa !30
  %154 = icmp slt i32 %153, %145
  br i1 %154, label %155, label %189

155:                                              ; preds = %151
  %156 = sitofp i32 %153 to float
  %157 = getelementptr inbounds %class.ResizeArrayRaw, ptr %147, i64 0, i32 5
  %158 = load float, ptr %157, align 4, !tbaa !31
  %159 = fmul float %158, %156
  %160 = fptosi float %159 to i32
  %161 = tail call i32 @llvm.smax.i32(i32 %160, i32 %145)
  %162 = sub nsw i32 %161, %153
  %163 = getelementptr inbounds %class.ResizeArrayRaw, ptr %147, i64 0, i32 6
  %164 = load i32, ptr %163, align 8, !tbaa !32
  %165 = icmp slt i32 %162, %164
  %166 = add nsw i32 %164, %153
  %167 = select i1 %165, i32 %166, i32 %161
  %168 = sext i32 %167 to i64
  %169 = shl nsw i64 %168, 1
  %170 = add nsw i64 %169, 31
  %171 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %170) #9
  %172 = getelementptr inbounds i8, ptr %171, i64 31
  %173 = ptrtoint ptr %172 to i64
  %174 = and i64 %173, 31
  %175 = sub nsw i64 0, %174
  %176 = getelementptr inbounds i8, ptr %172, i64 %175
  %177 = load ptr, ptr %147, align 8, !tbaa !33
  %178 = sext i32 %149 to i64
  %179 = shl nsw i64 %178, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %176, ptr align 1 %177, i64 %179, i1 false)
  %180 = icmp eq i32 %153, 0
  br i1 %180, label %186, label %181

181:                                              ; preds = %155
  %182 = getelementptr inbounds %class.ResizeArrayRaw, ptr %147, i64 0, i32 1
  %183 = load ptr, ptr %182, align 8, !tbaa !34
  %184 = icmp eq ptr %183, null
  br i1 %184, label %186, label %185

185:                                              ; preds = %181
  tail call void @_ZdaPv(ptr noundef nonnull %183) #10
  br label %186

186:                                              ; preds = %185, %181, %155
  %187 = getelementptr inbounds %class.ResizeArrayRaw, ptr %147, i64 0, i32 1
  store ptr %171, ptr %187, align 8, !tbaa !34
  store ptr %176, ptr %147, align 8, !tbaa !33
  store i32 %167, ptr %152, align 4, !tbaa !30
  %188 = load ptr, ptr %146, align 8, !tbaa !25
  br label %189

189:                                              ; preds = %138, %151, %186
  %190 = phi ptr [ %147, %138 ], [ %147, %151 ], [ %188, %186 ]
  store i32 %145, ptr %148, align 8, !tbaa !27
  %191 = load ptr, ptr %190, align 8, !tbaa !33
  %192 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %47, i64 0, i32 3, i32 1
  %193 = load ptr, ptr %192, align 8, !tbaa !25
  %194 = getelementptr inbounds %class.ResizeArrayRaw, ptr %193, i64 0, i32 2
  %195 = load i32, ptr %194, align 8, !tbaa !27
  %196 = icmp slt i32 %195, %145
  br i1 %196, label %197, label %235

197:                                              ; preds = %189
  %198 = getelementptr inbounds %class.ResizeArrayRaw, ptr %193, i64 0, i32 3
  %199 = load i32, ptr %198, align 4, !tbaa !30
  %200 = icmp slt i32 %199, %145
  br i1 %200, label %201, label %235

201:                                              ; preds = %197
  %202 = sitofp i32 %199 to float
  %203 = getelementptr inbounds %class.ResizeArrayRaw, ptr %193, i64 0, i32 5
  %204 = load float, ptr %203, align 4, !tbaa !31
  %205 = fmul float %204, %202
  %206 = fptosi float %205 to i32
  %207 = tail call i32 @llvm.smax.i32(i32 %206, i32 %145)
  %208 = sub nsw i32 %207, %199
  %209 = getelementptr inbounds %class.ResizeArrayRaw, ptr %193, i64 0, i32 6
  %210 = load i32, ptr %209, align 8, !tbaa !32
  %211 = icmp slt i32 %208, %210
  %212 = add nsw i32 %210, %199
  %213 = select i1 %211, i32 %212, i32 %207
  %214 = sext i32 %213 to i64
  %215 = shl nsw i64 %214, 1
  %216 = add nsw i64 %215, 31
  %217 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %216) #9
  %218 = getelementptr inbounds i8, ptr %217, i64 31
  %219 = ptrtoint ptr %218 to i64
  %220 = and i64 %219, 31
  %221 = sub nsw i64 0, %220
  %222 = getelementptr inbounds i8, ptr %218, i64 %221
  %223 = load ptr, ptr %193, align 8, !tbaa !33
  %224 = sext i32 %195 to i64
  %225 = shl nsw i64 %224, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %222, ptr align 1 %223, i64 %225, i1 false)
  %226 = icmp eq i32 %199, 0
  br i1 %226, label %232, label %227

227:                                              ; preds = %201
  %228 = getelementptr inbounds %class.ResizeArrayRaw, ptr %193, i64 0, i32 1
  %229 = load ptr, ptr %228, align 8, !tbaa !34
  %230 = icmp eq ptr %229, null
  br i1 %230, label %232, label %231

231:                                              ; preds = %227
  tail call void @_ZdaPv(ptr noundef nonnull %229) #10
  br label %232

232:                                              ; preds = %231, %227, %201
  %233 = getelementptr inbounds %class.ResizeArrayRaw, ptr %193, i64 0, i32 1
  store ptr %217, ptr %233, align 8, !tbaa !34
  store ptr %222, ptr %193, align 8, !tbaa !33
  store i32 %213, ptr %198, align 4, !tbaa !30
  %234 = load ptr, ptr %192, align 8, !tbaa !25
  br label %235

235:                                              ; preds = %189, %197, %232
  %236 = phi ptr [ %193, %189 ], [ %193, %197 ], [ %234, %232 ]
  store i32 %145, ptr %194, align 8, !tbaa !27
  %237 = load ptr, ptr %236, align 8, !tbaa !33
  %238 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %47, i64 0, i32 4, i32 1
  %239 = load ptr, ptr %238, align 8, !tbaa !25
  %240 = getelementptr inbounds %class.ResizeArrayRaw, ptr %239, i64 0, i32 2
  %241 = load i32, ptr %240, align 8, !tbaa !27
  %242 = icmp slt i32 %241, %145
  br i1 %242, label %243, label %281

243:                                              ; preds = %235
  %244 = getelementptr inbounds %class.ResizeArrayRaw, ptr %239, i64 0, i32 3
  %245 = load i32, ptr %244, align 4, !tbaa !30
  %246 = icmp slt i32 %245, %145
  br i1 %246, label %247, label %281

247:                                              ; preds = %243
  %248 = sitofp i32 %245 to float
  %249 = getelementptr inbounds %class.ResizeArrayRaw, ptr %239, i64 0, i32 5
  %250 = load float, ptr %249, align 4, !tbaa !31
  %251 = fmul float %250, %248
  %252 = fptosi float %251 to i32
  %253 = tail call i32 @llvm.smax.i32(i32 %252, i32 %145)
  %254 = sub nsw i32 %253, %245
  %255 = getelementptr inbounds %class.ResizeArrayRaw, ptr %239, i64 0, i32 6
  %256 = load i32, ptr %255, align 8, !tbaa !32
  %257 = icmp slt i32 %254, %256
  %258 = add nsw i32 %256, %245
  %259 = select i1 %257, i32 %258, i32 %253
  %260 = sext i32 %259 to i64
  %261 = shl nsw i64 %260, 1
  %262 = add nsw i64 %261, 31
  %263 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %262) #9
  %264 = getelementptr inbounds i8, ptr %263, i64 31
  %265 = ptrtoint ptr %264 to i64
  %266 = and i64 %265, 31
  %267 = sub nsw i64 0, %266
  %268 = getelementptr inbounds i8, ptr %264, i64 %267
  %269 = load ptr, ptr %239, align 8, !tbaa !33
  %270 = sext i32 %241 to i64
  %271 = shl nsw i64 %270, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %268, ptr align 1 %269, i64 %271, i1 false)
  %272 = icmp eq i32 %245, 0
  br i1 %272, label %278, label %273

273:                                              ; preds = %247
  %274 = getelementptr inbounds %class.ResizeArrayRaw, ptr %239, i64 0, i32 1
  %275 = load ptr, ptr %274, align 8, !tbaa !34
  %276 = icmp eq ptr %275, null
  br i1 %276, label %278, label %277

277:                                              ; preds = %273
  tail call void @_ZdaPv(ptr noundef nonnull %275) #10
  br label %278

278:                                              ; preds = %277, %273, %247
  %279 = getelementptr inbounds %class.ResizeArrayRaw, ptr %239, i64 0, i32 1
  store ptr %263, ptr %279, align 8, !tbaa !34
  store ptr %268, ptr %239, align 8, !tbaa !33
  store i32 %259, ptr %244, align 4, !tbaa !30
  %280 = load ptr, ptr %238, align 8, !tbaa !25
  br label %281

281:                                              ; preds = %235, %243, %278
  %282 = phi ptr [ %239, %235 ], [ %239, %243 ], [ %280, %278 ]
  store i32 %145, ptr %240, align 8, !tbaa !27
  %283 = load ptr, ptr %282, align 8, !tbaa !33
  %284 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %47, i64 0, i32 5, i32 1
  %285 = load ptr, ptr %284, align 8, !tbaa !25
  %286 = getelementptr inbounds %class.ResizeArrayRaw, ptr %285, i64 0, i32 2
  %287 = load i32, ptr %286, align 8, !tbaa !27
  %288 = icmp slt i32 %287, %145
  br i1 %288, label %289, label %327

289:                                              ; preds = %281
  %290 = getelementptr inbounds %class.ResizeArrayRaw, ptr %285, i64 0, i32 3
  %291 = load i32, ptr %290, align 4, !tbaa !30
  %292 = icmp slt i32 %291, %145
  br i1 %292, label %293, label %327

293:                                              ; preds = %289
  %294 = sitofp i32 %291 to float
  %295 = getelementptr inbounds %class.ResizeArrayRaw, ptr %285, i64 0, i32 5
  %296 = load float, ptr %295, align 4, !tbaa !31
  %297 = fmul float %296, %294
  %298 = fptosi float %297 to i32
  %299 = tail call i32 @llvm.smax.i32(i32 %298, i32 %145)
  %300 = sub nsw i32 %299, %291
  %301 = getelementptr inbounds %class.ResizeArrayRaw, ptr %285, i64 0, i32 6
  %302 = load i32, ptr %301, align 8, !tbaa !32
  %303 = icmp slt i32 %300, %302
  %304 = add nsw i32 %302, %291
  %305 = select i1 %303, i32 %304, i32 %299
  %306 = sext i32 %305 to i64
  %307 = shl nsw i64 %306, 1
  %308 = add nsw i64 %307, 31
  %309 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %308) #9
  %310 = getelementptr inbounds i8, ptr %309, i64 31
  %311 = ptrtoint ptr %310 to i64
  %312 = and i64 %311, 31
  %313 = sub nsw i64 0, %312
  %314 = getelementptr inbounds i8, ptr %310, i64 %313
  %315 = load ptr, ptr %285, align 8, !tbaa !33
  %316 = sext i32 %287 to i64
  %317 = shl nsw i64 %316, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %314, ptr align 1 %315, i64 %317, i1 false)
  %318 = icmp eq i32 %291, 0
  br i1 %318, label %324, label %319

319:                                              ; preds = %293
  %320 = getelementptr inbounds %class.ResizeArrayRaw, ptr %285, i64 0, i32 1
  %321 = load ptr, ptr %320, align 8, !tbaa !34
  %322 = icmp eq ptr %321, null
  br i1 %322, label %324, label %323

323:                                              ; preds = %319
  tail call void @_ZdaPv(ptr noundef nonnull %321) #10
  br label %324

324:                                              ; preds = %323, %319, %293
  %325 = getelementptr inbounds %class.ResizeArrayRaw, ptr %285, i64 0, i32 1
  store ptr %309, ptr %325, align 8, !tbaa !34
  store ptr %314, ptr %285, align 8, !tbaa !33
  store i32 %305, ptr %290, align 4, !tbaa !30
  %326 = load ptr, ptr %284, align 8, !tbaa !25
  br label %327

327:                                              ; preds = %281, %289, %324
  %328 = phi ptr [ %285, %281 ], [ %285, %289 ], [ %326, %324 ]
  store i32 %145, ptr %286, align 8, !tbaa !27
  %329 = load ptr, ptr %328, align 8, !tbaa !33
  %330 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %47, i64 0, i32 6, i32 1
  %331 = load ptr, ptr %330, align 8, !tbaa !25
  %332 = getelementptr inbounds %class.ResizeArrayRaw, ptr %331, i64 0, i32 2
  %333 = load i32, ptr %332, align 8, !tbaa !27
  %334 = icmp slt i32 %333, %145
  br i1 %334, label %335, label %373

335:                                              ; preds = %327
  %336 = getelementptr inbounds %class.ResizeArrayRaw, ptr %331, i64 0, i32 3
  %337 = load i32, ptr %336, align 4, !tbaa !30
  %338 = icmp slt i32 %337, %145
  br i1 %338, label %339, label %373

339:                                              ; preds = %335
  %340 = sitofp i32 %337 to float
  %341 = getelementptr inbounds %class.ResizeArrayRaw, ptr %331, i64 0, i32 5
  %342 = load float, ptr %341, align 4, !tbaa !31
  %343 = fmul float %342, %340
  %344 = fptosi float %343 to i32
  %345 = tail call i32 @llvm.smax.i32(i32 %344, i32 %145)
  %346 = sub nsw i32 %345, %337
  %347 = getelementptr inbounds %class.ResizeArrayRaw, ptr %331, i64 0, i32 6
  %348 = load i32, ptr %347, align 8, !tbaa !32
  %349 = icmp slt i32 %346, %348
  %350 = add nsw i32 %348, %337
  %351 = select i1 %349, i32 %350, i32 %345
  %352 = sext i32 %351 to i64
  %353 = shl nsw i64 %352, 1
  %354 = add nsw i64 %353, 31
  %355 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %354) #9
  %356 = getelementptr inbounds i8, ptr %355, i64 31
  %357 = ptrtoint ptr %356 to i64
  %358 = and i64 %357, 31
  %359 = sub nsw i64 0, %358
  %360 = getelementptr inbounds i8, ptr %356, i64 %359
  %361 = load ptr, ptr %331, align 8, !tbaa !33
  %362 = sext i32 %333 to i64
  %363 = shl nsw i64 %362, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %360, ptr align 1 %361, i64 %363, i1 false)
  %364 = icmp eq i32 %337, 0
  br i1 %364, label %370, label %365

365:                                              ; preds = %339
  %366 = getelementptr inbounds %class.ResizeArrayRaw, ptr %331, i64 0, i32 1
  %367 = load ptr, ptr %366, align 8, !tbaa !34
  %368 = icmp eq ptr %367, null
  br i1 %368, label %370, label %369

369:                                              ; preds = %365
  tail call void @_ZdaPv(ptr noundef nonnull %367) #10
  br label %370

370:                                              ; preds = %369, %365, %339
  %371 = getelementptr inbounds %class.ResizeArrayRaw, ptr %331, i64 0, i32 1
  store ptr %355, ptr %371, align 8, !tbaa !34
  store ptr %360, ptr %331, align 8, !tbaa !33
  store i32 %351, ptr %336, align 4, !tbaa !30
  %372 = load ptr, ptr %330, align 8, !tbaa !25
  br label %373

373:                                              ; preds = %327, %335, %370
  %374 = phi ptr [ %331, %327 ], [ %331, %335 ], [ %372, %370 ]
  store i32 %145, ptr %332, align 8, !tbaa !27
  %375 = load ptr, ptr %374, align 8, !tbaa !33
  %376 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %47, i64 0, i32 15, i32 1
  %377 = load ptr, ptr %376, align 8, !tbaa !25
  %378 = getelementptr inbounds %class.ResizeArrayRaw, ptr %377, i64 0, i32 2
  %379 = load i32, ptr %378, align 8, !tbaa !27
  %380 = icmp slt i32 %379, %145
  br i1 %380, label %381, label %419

381:                                              ; preds = %373
  %382 = getelementptr inbounds %class.ResizeArrayRaw, ptr %377, i64 0, i32 3
  %383 = load i32, ptr %382, align 4, !tbaa !30
  %384 = icmp slt i32 %383, %145
  br i1 %384, label %385, label %419

385:                                              ; preds = %381
  %386 = sitofp i32 %383 to float
  %387 = getelementptr inbounds %class.ResizeArrayRaw, ptr %377, i64 0, i32 5
  %388 = load float, ptr %387, align 4, !tbaa !31
  %389 = fmul float %388, %386
  %390 = fptosi float %389 to i32
  %391 = tail call i32 @llvm.smax.i32(i32 %390, i32 %145)
  %392 = sub nsw i32 %391, %383
  %393 = getelementptr inbounds %class.ResizeArrayRaw, ptr %377, i64 0, i32 6
  %394 = load i32, ptr %393, align 8, !tbaa !32
  %395 = icmp slt i32 %392, %394
  %396 = add nsw i32 %394, %383
  %397 = select i1 %395, i32 %396, i32 %391
  %398 = sext i32 %397 to i64
  %399 = shl nsw i64 %398, 1
  %400 = add nsw i64 %399, 31
  %401 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %400) #9
  %402 = getelementptr inbounds i8, ptr %401, i64 31
  %403 = ptrtoint ptr %402 to i64
  %404 = and i64 %403, 31
  %405 = sub nsw i64 0, %404
  %406 = getelementptr inbounds i8, ptr %402, i64 %405
  %407 = load ptr, ptr %377, align 8, !tbaa !33
  %408 = sext i32 %379 to i64
  %409 = shl nsw i64 %408, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %406, ptr align 1 %407, i64 %409, i1 false)
  %410 = icmp eq i32 %383, 0
  br i1 %410, label %416, label %411

411:                                              ; preds = %385
  %412 = getelementptr inbounds %class.ResizeArrayRaw, ptr %377, i64 0, i32 1
  %413 = load ptr, ptr %412, align 8, !tbaa !34
  %414 = icmp eq ptr %413, null
  br i1 %414, label %416, label %415

415:                                              ; preds = %411
  tail call void @_ZdaPv(ptr noundef nonnull %413) #10
  br label %416

416:                                              ; preds = %415, %411, %385
  %417 = getelementptr inbounds %class.ResizeArrayRaw, ptr %377, i64 0, i32 1
  store ptr %401, ptr %417, align 8, !tbaa !34
  store ptr %406, ptr %377, align 8, !tbaa !33
  store i32 %397, ptr %382, align 4, !tbaa !30
  %418 = load ptr, ptr %376, align 8, !tbaa !25
  br label %419

419:                                              ; preds = %373, %381, %416
  %420 = phi ptr [ %377, %373 ], [ %377, %381 ], [ %418, %416 ]
  store i32 %145, ptr %378, align 8, !tbaa !27
  %421 = load ptr, ptr %420, align 8, !tbaa !33
  %422 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %47, i64 0, i32 16, i32 1
  %423 = load ptr, ptr %422, align 8, !tbaa !25
  %424 = getelementptr inbounds %class.ResizeArrayRaw, ptr %423, i64 0, i32 2
  %425 = load i32, ptr %424, align 8, !tbaa !27
  %426 = icmp slt i32 %425, %145
  br i1 %426, label %427, label %465

427:                                              ; preds = %419
  %428 = getelementptr inbounds %class.ResizeArrayRaw, ptr %423, i64 0, i32 3
  %429 = load i32, ptr %428, align 4, !tbaa !30
  %430 = icmp slt i32 %429, %145
  br i1 %430, label %431, label %465

431:                                              ; preds = %427
  %432 = sitofp i32 %429 to float
  %433 = getelementptr inbounds %class.ResizeArrayRaw, ptr %423, i64 0, i32 5
  %434 = load float, ptr %433, align 4, !tbaa !31
  %435 = fmul float %434, %432
  %436 = fptosi float %435 to i32
  %437 = tail call i32 @llvm.smax.i32(i32 %436, i32 %145)
  %438 = sub nsw i32 %437, %429
  %439 = getelementptr inbounds %class.ResizeArrayRaw, ptr %423, i64 0, i32 6
  %440 = load i32, ptr %439, align 8, !tbaa !32
  %441 = icmp slt i32 %438, %440
  %442 = add nsw i32 %440, %429
  %443 = select i1 %441, i32 %442, i32 %437
  %444 = sext i32 %443 to i64
  %445 = shl nsw i64 %444, 1
  %446 = add nsw i64 %445, 31
  %447 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %446) #9
  %448 = getelementptr inbounds i8, ptr %447, i64 31
  %449 = ptrtoint ptr %448 to i64
  %450 = and i64 %449, 31
  %451 = sub nsw i64 0, %450
  %452 = getelementptr inbounds i8, ptr %448, i64 %451
  %453 = load ptr, ptr %423, align 8, !tbaa !33
  %454 = sext i32 %425 to i64
  %455 = shl nsw i64 %454, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %452, ptr align 1 %453, i64 %455, i1 false)
  %456 = icmp eq i32 %429, 0
  br i1 %456, label %462, label %457

457:                                              ; preds = %431
  %458 = getelementptr inbounds %class.ResizeArrayRaw, ptr %423, i64 0, i32 1
  %459 = load ptr, ptr %458, align 8, !tbaa !34
  %460 = icmp eq ptr %459, null
  br i1 %460, label %462, label %461

461:                                              ; preds = %457
  tail call void @_ZdaPv(ptr noundef nonnull %459) #10
  br label %462

462:                                              ; preds = %461, %457, %431
  %463 = getelementptr inbounds %class.ResizeArrayRaw, ptr %423, i64 0, i32 1
  store ptr %447, ptr %463, align 8, !tbaa !34
  store ptr %452, ptr %423, align 8, !tbaa !33
  store i32 %443, ptr %428, align 4, !tbaa !30
  %464 = load ptr, ptr %422, align 8, !tbaa !25
  br label %465

465:                                              ; preds = %419, %427, %462
  %466 = phi ptr [ %423, %419 ], [ %423, %427 ], [ %464, %462 ]
  store i32 %145, ptr %424, align 8, !tbaa !27
  %467 = load ptr, ptr %466, align 8, !tbaa !33
  br i1 %144, label %600, label %468

468:                                              ; preds = %465
  %469 = icmp sgt i32 %38, 0
  br i1 %469, label %470, label %612

470:                                              ; preds = %468
  %471 = zext i32 %38 to i64
  %472 = and i64 %471, 1
  %473 = icmp eq i32 %38, 1
  br i1 %473, label %506, label %474

474:                                              ; preds = %470
  %475 = and i64 %471, 4294967294
  br label %476

476:                                              ; preds = %501, %474
  %477 = phi i64 [ 0, %474 ], [ %503, %501 ]
  %478 = phi i32 [ 0, %474 ], [ %502, %501 ]
  %479 = phi i64 [ 0, %474 ], [ %504, %501 ]
  %480 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %477, i32 4
  %481 = load i8, ptr %480, align 1
  %482 = and i8 %481, 7
  %483 = icmp eq i8 %482, 0
  br i1 %483, label %489, label %484

484:                                              ; preds = %476
  %485 = trunc i64 %477 to i16
  %486 = add nsw i32 %478, 1
  %487 = sext i32 %478 to i64
  %488 = getelementptr inbounds i16, ptr %191, i64 %487
  store i16 %485, ptr %488, align 2, !tbaa !44
  br label %489

489:                                              ; preds = %476, %484
  %490 = phi i32 [ %486, %484 ], [ %478, %476 ]
  %491 = or i64 %477, 1
  %492 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %491, i32 4
  %493 = load i8, ptr %492, align 1
  %494 = and i8 %493, 7
  %495 = icmp eq i8 %494, 0
  br i1 %495, label %501, label %496

496:                                              ; preds = %489
  %497 = trunc i64 %491 to i16
  %498 = add nsw i32 %490, 1
  %499 = sext i32 %490 to i64
  %500 = getelementptr inbounds i16, ptr %191, i64 %499
  store i16 %497, ptr %500, align 2, !tbaa !44
  br label %501

501:                                              ; preds = %496, %489
  %502 = phi i32 [ %498, %496 ], [ %490, %489 ]
  %503 = add nuw nsw i64 %477, 2
  %504 = add i64 %479, 2
  %505 = icmp eq i64 %504, %475
  br i1 %505, label %506, label %476

506:                                              ; preds = %501, %470
  %507 = phi i32 [ undef, %470 ], [ %502, %501 ]
  %508 = phi i64 [ 0, %470 ], [ %503, %501 ]
  %509 = phi i32 [ 0, %470 ], [ %502, %501 ]
  %510 = icmp eq i64 %472, 0
  br i1 %510, label %521, label %511

511:                                              ; preds = %506
  %512 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %508, i32 4
  %513 = load i8, ptr %512, align 1
  %514 = and i8 %513, 7
  %515 = icmp eq i8 %514, 0
  br i1 %515, label %521, label %516

516:                                              ; preds = %511
  %517 = trunc i64 %508 to i16
  %518 = add nsw i32 %509, 1
  %519 = sext i32 %509 to i64
  %520 = getelementptr inbounds i16, ptr %191, i64 %519
  store i16 %517, ptr %520, align 2, !tbaa !44
  br label %521

521:                                              ; preds = %511, %516, %506
  %522 = phi i32 [ %507, %506 ], [ %518, %516 ], [ %509, %511 ]
  %523 = icmp eq i32 %522, 0
  br i1 %523, label %531, label %524

524:                                              ; preds = %521
  %525 = add nsw i32 %522, -1
  %526 = sext i32 %525 to i64
  %527 = getelementptr inbounds i16, ptr %191, i64 %526
  %528 = load i16, ptr %527, align 2, !tbaa !44
  %529 = sext i32 %522 to i64
  %530 = getelementptr inbounds i16, ptr %191, i64 %529
  store i16 %528, ptr %530, align 2, !tbaa !44
  br label %531

531:                                              ; preds = %524, %521
  %532 = load i32, ptr @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4, !tbaa !5
  %533 = icmp ne i32 %532, 0
  %534 = icmp sgt i32 %522, 0
  %535 = and i1 %533, %534
  br i1 %535, label %536, label %612

536:                                              ; preds = %531
  %537 = zext i32 %522 to i64
  %538 = and i64 %537, 1
  %539 = icmp eq i32 %522, 1
  br i1 %539, label %574, label %540

540:                                              ; preds = %536
  %541 = and i64 %537, 4294967294
  br label %542

542:                                              ; preds = %569, %540
  %543 = phi i64 [ 0, %540 ], [ %571, %569 ]
  %544 = phi i32 [ 0, %540 ], [ %570, %569 ]
  %545 = phi i64 [ 0, %540 ], [ %572, %569 ]
  %546 = getelementptr inbounds i16, ptr %191, i64 %543
  %547 = load i16, ptr %546, align 2, !tbaa !44
  %548 = zext i16 %547 to i64
  %549 = getelementptr inbounds %struct.CompAtomExt, ptr %45, i64 %548
  %550 = load i32, ptr %549, align 4
  %551 = icmp sgt i32 %550, -1
  br i1 %551, label %552, label %556

552:                                              ; preds = %542
  %553 = add nsw i32 %544, 1
  %554 = sext i32 %544 to i64
  %555 = getelementptr inbounds i16, ptr %237, i64 %554
  store i16 %547, ptr %555, align 2, !tbaa !44
  br label %556

556:                                              ; preds = %542, %552
  %557 = phi i32 [ %544, %542 ], [ %553, %552 ]
  %558 = or i64 %543, 1
  %559 = getelementptr inbounds i16, ptr %191, i64 %558
  %560 = load i16, ptr %559, align 2, !tbaa !44
  %561 = zext i16 %560 to i64
  %562 = getelementptr inbounds %struct.CompAtomExt, ptr %45, i64 %561
  %563 = load i32, ptr %562, align 4
  %564 = icmp sgt i32 %563, -1
  br i1 %564, label %565, label %569

565:                                              ; preds = %556
  %566 = add nsw i32 %557, 1
  %567 = sext i32 %557 to i64
  %568 = getelementptr inbounds i16, ptr %237, i64 %567
  store i16 %560, ptr %568, align 2, !tbaa !44
  br label %569

569:                                              ; preds = %565, %556
  %570 = phi i32 [ %557, %556 ], [ %566, %565 ]
  %571 = add nuw nsw i64 %543, 2
  %572 = add i64 %545, 2
  %573 = icmp eq i64 %572, %541
  br i1 %573, label %574, label %542

574:                                              ; preds = %569, %536
  %575 = phi i32 [ undef, %536 ], [ %570, %569 ]
  %576 = phi i64 [ 0, %536 ], [ %571, %569 ]
  %577 = phi i32 [ 0, %536 ], [ %570, %569 ]
  %578 = icmp eq i64 %538, 0
  br i1 %578, label %590, label %579

579:                                              ; preds = %574
  %580 = getelementptr inbounds i16, ptr %191, i64 %576
  %581 = load i16, ptr %580, align 2, !tbaa !44
  %582 = zext i16 %581 to i64
  %583 = getelementptr inbounds %struct.CompAtomExt, ptr %45, i64 %582
  %584 = load i32, ptr %583, align 4
  %585 = icmp sgt i32 %584, -1
  br i1 %585, label %586, label %590

586:                                              ; preds = %579
  %587 = add nsw i32 %577, 1
  %588 = sext i32 %577 to i64
  %589 = getelementptr inbounds i16, ptr %237, i64 %588
  store i16 %581, ptr %589, align 2, !tbaa !44
  br label %590

590:                                              ; preds = %579, %586, %574
  %591 = phi i32 [ %575, %574 ], [ %577, %579 ], [ %587, %586 ]
  %592 = icmp eq i32 %591, 0
  br i1 %592, label %612, label %593

593:                                              ; preds = %590
  %594 = add nsw i32 %591, -1
  %595 = sext i32 %594 to i64
  %596 = getelementptr inbounds i16, ptr %237, i64 %595
  %597 = load i16, ptr %596, align 2, !tbaa !44
  %598 = sext i32 %591 to i64
  %599 = getelementptr inbounds i16, ptr %237, i64 %598
  store i16 %597, ptr %599, align 2, !tbaa !44
  br label %612

600:                                              ; preds = %465
  %601 = load ptr, ptr %8, align 8, !tbaa !46
  %602 = load i32, ptr %13, align 8, !tbaa !17
  %603 = add nsw i32 %602, 1
  store i32 %603, ptr %13, align 8, !tbaa !17
  %604 = sext i32 %602 to i64
  %605 = getelementptr inbounds i16, ptr %601, i64 %604
  %606 = load i16, ptr %605, align 2, !tbaa !44
  %607 = zext i16 %606 to i32
  %608 = icmp eq i32 %36, %607
  br i1 %608, label %629, label %609

609:                                              ; preds = %600
  tail call void @_Z8NAMD_bugPKc(ptr noundef nonnull @.str)
  %610 = load ptr, ptr %8, align 8, !tbaa !46
  %611 = load i32, ptr %13, align 8, !tbaa !17
  br label %629

612:                                              ; preds = %468, %593, %590, %531
  %613 = phi i32 [ %522, %593 ], [ %522, %590 ], [ %522, %531 ], [ 0, %468 ]
  %614 = phi i32 [ %591, %593 ], [ 0, %590 ], [ 0, %531 ], [ 0, %468 ]
  %615 = load i32, ptr %13, align 8, !tbaa !17
  %616 = trunc i32 %36 to i16
  %617 = load ptr, ptr %8, align 8, !tbaa !46
  %618 = sext i32 %615 to i64
  %619 = getelementptr inbounds i16, ptr %617, i64 %618
  store i16 %616, ptr %619, align 2, !tbaa !44
  %620 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 16
  %621 = load i32, ptr %620, align 4, !tbaa !47
  %622 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 18
  %623 = load i32, ptr %622, align 4, !tbaa !48
  %624 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 4, i64 1
  %625 = load ptr, ptr %624, align 8, !tbaa !23
  %626 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 4
  %627 = load ptr, ptr %626, align 8, !tbaa !23
  %628 = add nsw i32 %615, 2
  store i32 %628, ptr %13, align 8, !tbaa !17
  br label %645

629:                                              ; preds = %609, %600
  %630 = phi i32 [ %603, %600 ], [ %611, %609 ]
  %631 = phi ptr [ %601, %600 ], [ %610, %609 ]
  %632 = sext i32 %630 to i64
  %633 = getelementptr inbounds i16, ptr %631, i64 %632
  %634 = load i16, ptr %633, align 2, !tbaa !44
  %635 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 16
  %636 = load i32, ptr %635, align 4, !tbaa !47
  %637 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 18
  %638 = load i32, ptr %637, align 4, !tbaa !48
  %639 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 4, i64 1
  %640 = load ptr, ptr %639, align 8, !tbaa !23
  %641 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 4
  %642 = load ptr, ptr %641, align 8, !tbaa !23
  %643 = add nsw i32 %630, 1
  store i32 %643, ptr %13, align 8, !tbaa !17
  %644 = zext i16 %634 to i32
  br label %645

645:                                              ; preds = %629, %612
  %646 = phi i32 [ %636, %629 ], [ %621, %612 ]
  %647 = phi i32 [ %638, %629 ], [ %623, %612 ]
  %648 = phi ptr [ %640, %629 ], [ %625, %612 ]
  %649 = phi ptr [ %642, %629 ], [ %627, %612 ]
  %650 = phi i32 [ 0, %629 ], [ %614, %612 ]
  %651 = phi i32 [ 0, %629 ], [ %613, %612 ]
  %652 = phi i32 [ %644, %629 ], [ 0, %612 ]
  %653 = add nsw i32 %647, -1
  %654 = icmp slt i32 %652, %36
  br i1 %654, label %655, label %2266

655:                                              ; preds = %645
  %656 = getelementptr inbounds %class.Molecule, ptr %26, i64 0, i32 1
  %657 = getelementptr inbounds %class.Molecule, ptr %26, i64 0, i32 4
  %658 = getelementptr inbounds %class.Molecule, ptr %26, i64 0, i32 2
  %659 = getelementptr inbounds %class.Molecule, ptr %26, i64 0, i32 3
  %660 = ptrtoint ptr %421 to i64
  %661 = add nsw i32 %38, 10
  %662 = getelementptr inbounds %class.Pairlists, ptr %8, i64 0, i32 2
  %663 = getelementptr inbounds i16, ptr %421, i64 1
  %664 = ptrtoint ptr %467 to i64
  %665 = ptrtoint ptr %329 to i64
  %666 = ptrtoint ptr %375 to i64
  %667 = getelementptr inbounds %class.LJTable, ptr %25, i64 0, i32 1
  %668 = getelementptr inbounds %class.LJTable, ptr %25, i64 0, i32 2
  %669 = fneg double %28
  %670 = fneg double %30
  %671 = insertelement <2 x double> poison, double %23, i64 0
  %672 = shufflevector <2 x double> %671, <2 x double> poison, <2 x i32> zeroinitializer
  br label %673

673:                                              ; preds = %655, %2250
  %674 = phi i32 [ 0, %655 ], [ %2257, %2250 ]
  %675 = phi i32 [ %652, %655 ], [ %2256, %2250 ]
  %676 = phi ptr [ null, %655 ], [ %2255, %2250 ]
  %677 = phi ptr [ null, %655 ], [ %2254, %2250 ]
  %678 = phi ptr [ null, %655 ], [ %2253, %2250 ]
  %679 = phi i32 [ 0, %655 ], [ %2252, %2250 ]
  %680 = phi i32 [ %646, %655 ], [ %2251, %2250 ]
  %681 = phi <2 x double> [ zeroinitializer, %655 ], [ %2258, %2250 ]
  %682 = phi <2 x double> [ zeroinitializer, %655 ], [ %2259, %2250 ]
  %683 = phi <2 x double> [ zeroinitializer, %655 ], [ %2260, %2250 ]
  %684 = phi <2 x double> [ zeroinitializer, %655 ], [ %2261, %2250 ]
  %685 = sext i32 %675 to i64
  %686 = getelementptr inbounds %struct.CompAtom, ptr %39, i64 %685
  %687 = getelementptr inbounds %struct.CompAtomExt, ptr %43, i64 %685
  br i1 %144, label %1753, label %688

688:                                              ; preds = %673
  %689 = getelementptr inbounds %struct.CompAtom, ptr %39, i64 %685, i32 4
  %690 = load i8, ptr %689, align 1
  %691 = lshr i8 %690, 3
  %692 = and i8 %691, 15
  %693 = zext i8 %692 to i32
  %694 = icmp eq i8 %692, 0
  br i1 %694, label %700, label %695

695:                                              ; preds = %688
  %696 = icmp eq i32 %680, 0
  br i1 %696, label %700, label %697

697:                                              ; preds = %695
  %698 = add nsw i32 %680, -1
  %699 = add nsw i32 %675, %693
  br label %2250

700:                                              ; preds = %695, %688
  %701 = phi i32 [ %653, %695 ], [ %680, %688 ]
  %702 = load <2 x double>, ptr %686, align 8, !tbaa !19
  %703 = fadd <2 x double> %15, %702
  %704 = getelementptr inbounds %class.Vector, ptr %686, i64 0, i32 2
  %705 = load double, ptr %704, align 8, !tbaa !49
  %706 = fadd double %17, %705
  %707 = load i32, ptr %687, align 4
  %708 = shl i32 %707, 2
  %709 = ashr exact i32 %708, 2
  %710 = load ptr, ptr %656, align 8, !tbaa !51
  %711 = sext i32 %709 to i64
  %712 = getelementptr inbounds %class.ExclusionCheck, ptr %710, i64 %711
  %713 = load i32, ptr %712, align 8, !tbaa !53
  %714 = getelementptr inbounds %class.ExclusionCheck, ptr %710, i64 %711, i32 1
  %715 = load i32, ptr %714, align 4, !tbaa !55
  %716 = getelementptr inbounds %class.ExclusionCheck, ptr %710, i64 %711, i32 2
  %717 = load ptr, ptr %716, align 8, !tbaa !56
  %718 = icmp eq ptr %717, null
  br i1 %718, label %723, label %719

719:                                              ; preds = %700
  %720 = sext i32 %713 to i64
  %721 = sub nsw i64 0, %720
  %722 = getelementptr inbounds i8, ptr %717, i64 %721
  br label %949

723:                                              ; preds = %700
  %724 = icmp eq ptr %676, null
  br i1 %724, label %812, label %725

725:                                              ; preds = %723
  %726 = load i32, ptr %677, align 4, !tbaa !5
  %727 = icmp slt i32 %726, 1
  br i1 %727, label %775, label %728

728:                                              ; preds = %725
  %729 = add nuw i32 %726, 1
  %730 = zext i32 %729 to i64
  %731 = add nsw i64 %730, -1
  %732 = add nsw i64 %730, -2
  %733 = and i64 %731, 3
  %734 = icmp ult i64 %732, 3
  br i1 %734, label %762, label %735

735:                                              ; preds = %728
  %736 = and i64 %731, -4
  br label %737

737:                                              ; preds = %737, %735
  %738 = phi i64 [ 1, %735 ], [ %759, %737 ]
  %739 = phi i64 [ 0, %735 ], [ %760, %737 ]
  %740 = getelementptr inbounds i32, ptr %677, i64 %738
  %741 = load i32, ptr %740, align 4, !tbaa !5
  %742 = sext i32 %741 to i64
  %743 = getelementptr inbounds i8, ptr %676, i64 %742
  store i8 0, ptr %743, align 1, !tbaa !57
  %744 = add nuw nsw i64 %738, 1
  %745 = getelementptr inbounds i32, ptr %677, i64 %744
  %746 = load i32, ptr %745, align 4, !tbaa !5
  %747 = sext i32 %746 to i64
  %748 = getelementptr inbounds i8, ptr %676, i64 %747
  store i8 0, ptr %748, align 1, !tbaa !57
  %749 = add nuw nsw i64 %738, 2
  %750 = getelementptr inbounds i32, ptr %677, i64 %749
  %751 = load i32, ptr %750, align 4, !tbaa !5
  %752 = sext i32 %751 to i64
  %753 = getelementptr inbounds i8, ptr %676, i64 %752
  store i8 0, ptr %753, align 1, !tbaa !57
  %754 = add nuw nsw i64 %738, 3
  %755 = getelementptr inbounds i32, ptr %677, i64 %754
  %756 = load i32, ptr %755, align 4, !tbaa !5
  %757 = sext i32 %756 to i64
  %758 = getelementptr inbounds i8, ptr %676, i64 %757
  store i8 0, ptr %758, align 1, !tbaa !57
  %759 = add nuw nsw i64 %738, 4
  %760 = add i64 %739, 4
  %761 = icmp eq i64 %760, %736
  br i1 %761, label %762, label %737

762:                                              ; preds = %737, %728
  %763 = phi i64 [ 1, %728 ], [ %759, %737 ]
  %764 = icmp eq i64 %733, 0
  br i1 %764, label %775, label %765

765:                                              ; preds = %762, %765
  %766 = phi i64 [ %772, %765 ], [ %763, %762 ]
  %767 = phi i64 [ %773, %765 ], [ 0, %762 ]
  %768 = getelementptr inbounds i32, ptr %677, i64 %766
  %769 = load i32, ptr %768, align 4, !tbaa !5
  %770 = sext i32 %769 to i64
  %771 = getelementptr inbounds i8, ptr %676, i64 %770
  store i8 0, ptr %771, align 1, !tbaa !57
  %772 = add nuw nsw i64 %766, 1
  %773 = add i64 %767, 1
  %774 = icmp eq i64 %773, %733
  br i1 %774, label %775, label %765, !llvm.loop !136

775:                                              ; preds = %762, %765, %725
  %776 = load i32, ptr %678, align 4, !tbaa !5
  %777 = icmp slt i32 %776, 1
  br i1 %777, label %832, label %778

778:                                              ; preds = %775
  %779 = add nuw i32 %776, 1
  %780 = zext i32 %779 to i64
  %781 = add nsw i64 %780, -1
  %782 = add nsw i64 %780, -2
  %783 = and i64 %781, 3
  %784 = icmp ult i64 %782, 3
  br i1 %784, label %819, label %785

785:                                              ; preds = %778
  %786 = and i64 %781, -4
  br label %787

787:                                              ; preds = %787, %785
  %788 = phi i64 [ 1, %785 ], [ %809, %787 ]
  %789 = phi i64 [ 0, %785 ], [ %810, %787 ]
  %790 = getelementptr inbounds i32, ptr %678, i64 %788
  %791 = load i32, ptr %790, align 4, !tbaa !5
  %792 = sext i32 %791 to i64
  %793 = getelementptr inbounds i8, ptr %676, i64 %792
  store i8 0, ptr %793, align 1, !tbaa !57
  %794 = add nuw nsw i64 %788, 1
  %795 = getelementptr inbounds i32, ptr %678, i64 %794
  %796 = load i32, ptr %795, align 4, !tbaa !5
  %797 = sext i32 %796 to i64
  %798 = getelementptr inbounds i8, ptr %676, i64 %797
  store i8 0, ptr %798, align 1, !tbaa !57
  %799 = add nuw nsw i64 %788, 2
  %800 = getelementptr inbounds i32, ptr %678, i64 %799
  %801 = load i32, ptr %800, align 4, !tbaa !5
  %802 = sext i32 %801 to i64
  %803 = getelementptr inbounds i8, ptr %676, i64 %802
  store i8 0, ptr %803, align 1, !tbaa !57
  %804 = add nuw nsw i64 %788, 3
  %805 = getelementptr inbounds i32, ptr %678, i64 %804
  %806 = load i32, ptr %805, align 4, !tbaa !5
  %807 = sext i32 %806 to i64
  %808 = getelementptr inbounds i8, ptr %676, i64 %807
  store i8 0, ptr %808, align 1, !tbaa !57
  %809 = add nuw nsw i64 %788, 4
  %810 = add i64 %789, 4
  %811 = icmp eq i64 %810, %786
  br i1 %811, label %819, label %787

812:                                              ; preds = %723
  %813 = load i32, ptr %657, align 8, !tbaa !60
  %814 = tail call i32 @llvm.smax.i32(i32 %813, i32 -1)
  %815 = sext i32 %814 to i64
  %816 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %815) #9
  %817 = load i32, ptr %657, align 8, !tbaa !60
  %818 = sext i32 %817 to i64
  tail call void @llvm.memset.p0.i64(ptr nonnull align 1 %816, i8 0, i64 %818, i1 false)
  br label %832

819:                                              ; preds = %787, %778
  %820 = phi i64 [ 1, %778 ], [ %809, %787 ]
  %821 = icmp eq i64 %783, 0
  br i1 %821, label %832, label %822

822:                                              ; preds = %819, %822
  %823 = phi i64 [ %829, %822 ], [ %820, %819 ]
  %824 = phi i64 [ %830, %822 ], [ 0, %819 ]
  %825 = getelementptr inbounds i32, ptr %678, i64 %823
  %826 = load i32, ptr %825, align 4, !tbaa !5
  %827 = sext i32 %826 to i64
  %828 = getelementptr inbounds i8, ptr %676, i64 %827
  store i8 0, ptr %828, align 1, !tbaa !57
  %829 = add nuw nsw i64 %823, 1
  %830 = add i64 %824, 1
  %831 = icmp eq i64 %830, %783
  br i1 %831, label %832, label %822, !llvm.loop !137

832:                                              ; preds = %819, %822, %775, %812
  %833 = phi ptr [ %816, %812 ], [ %676, %775 ], [ %676, %822 ], [ %676, %819 ]
  %834 = load i32, ptr %687, align 4
  %835 = shl i32 %834, 2
  %836 = ashr exact i32 %835, 2
  %837 = load ptr, ptr %658, align 8, !tbaa !62
  %838 = sext i32 %836 to i64
  %839 = getelementptr inbounds ptr, ptr %837, i64 %838
  %840 = load ptr, ptr %839, align 8, !tbaa !23
  %841 = load i32, ptr %840, align 4, !tbaa !5
  %842 = icmp slt i32 %841, 1
  br i1 %842, label %895, label %843

843:                                              ; preds = %832
  %844 = add nuw i32 %841, 1
  %845 = zext i32 %844 to i64
  %846 = add nsw i64 %845, -1
  %847 = add nsw i64 %845, -2
  %848 = and i64 %846, 3
  %849 = icmp ult i64 %847, 3
  br i1 %849, label %877, label %850

850:                                              ; preds = %843
  %851 = and i64 %846, -4
  br label %852

852:                                              ; preds = %852, %850
  %853 = phi i64 [ 1, %850 ], [ %874, %852 ]
  %854 = phi i64 [ 0, %850 ], [ %875, %852 ]
  %855 = getelementptr inbounds i32, ptr %840, i64 %853
  %856 = load i32, ptr %855, align 4, !tbaa !5
  %857 = sext i32 %856 to i64
  %858 = getelementptr inbounds i8, ptr %833, i64 %857
  store i8 1, ptr %858, align 1, !tbaa !57
  %859 = add nuw nsw i64 %853, 1
  %860 = getelementptr inbounds i32, ptr %840, i64 %859
  %861 = load i32, ptr %860, align 4, !tbaa !5
  %862 = sext i32 %861 to i64
  %863 = getelementptr inbounds i8, ptr %833, i64 %862
  store i8 1, ptr %863, align 1, !tbaa !57
  %864 = add nuw nsw i64 %853, 2
  %865 = getelementptr inbounds i32, ptr %840, i64 %864
  %866 = load i32, ptr %865, align 4, !tbaa !5
  %867 = sext i32 %866 to i64
  %868 = getelementptr inbounds i8, ptr %833, i64 %867
  store i8 1, ptr %868, align 1, !tbaa !57
  %869 = add nuw nsw i64 %853, 3
  %870 = getelementptr inbounds i32, ptr %840, i64 %869
  %871 = load i32, ptr %870, align 4, !tbaa !5
  %872 = sext i32 %871 to i64
  %873 = getelementptr inbounds i8, ptr %833, i64 %872
  store i8 1, ptr %873, align 1, !tbaa !57
  %874 = add nuw nsw i64 %853, 4
  %875 = add i64 %854, 4
  %876 = icmp eq i64 %875, %851
  br i1 %876, label %877, label %852

877:                                              ; preds = %852, %843
  %878 = phi i64 [ 1, %843 ], [ %874, %852 ]
  %879 = icmp eq i64 %848, 0
  br i1 %879, label %890, label %880

880:                                              ; preds = %877, %880
  %881 = phi i64 [ %887, %880 ], [ %878, %877 ]
  %882 = phi i64 [ %888, %880 ], [ 0, %877 ]
  %883 = getelementptr inbounds i32, ptr %840, i64 %881
  %884 = load i32, ptr %883, align 4, !tbaa !5
  %885 = sext i32 %884 to i64
  %886 = getelementptr inbounds i8, ptr %833, i64 %885
  store i8 1, ptr %886, align 1, !tbaa !57
  %887 = add nuw nsw i64 %881, 1
  %888 = add i64 %882, 1
  %889 = icmp eq i64 %888, %848
  br i1 %889, label %890, label %880, !llvm.loop !138

890:                                              ; preds = %880, %877
  %891 = load i32, ptr %687, align 4
  %892 = shl i32 %891, 2
  %893 = ashr exact i32 %892, 2
  %894 = sext i32 %893 to i64
  br label %895

895:                                              ; preds = %890, %832
  %896 = phi i64 [ %894, %890 ], [ %838, %832 ]
  %897 = load ptr, ptr %659, align 8, !tbaa !64
  %898 = getelementptr inbounds ptr, ptr %897, i64 %896
  %899 = load ptr, ptr %898, align 8, !tbaa !23
  %900 = load i32, ptr %899, align 4, !tbaa !5
  %901 = icmp slt i32 %900, 1
  br i1 %901, label %949, label %902

902:                                              ; preds = %895
  %903 = add nuw i32 %900, 1
  %904 = zext i32 %903 to i64
  %905 = add nsw i64 %904, -1
  %906 = add nsw i64 %904, -2
  %907 = and i64 %905, 3
  %908 = icmp ult i64 %906, 3
  br i1 %908, label %936, label %909

909:                                              ; preds = %902
  %910 = and i64 %905, -4
  br label %911

911:                                              ; preds = %911, %909
  %912 = phi i64 [ 1, %909 ], [ %933, %911 ]
  %913 = phi i64 [ 0, %909 ], [ %934, %911 ]
  %914 = getelementptr inbounds i32, ptr %899, i64 %912
  %915 = load i32, ptr %914, align 4, !tbaa !5
  %916 = sext i32 %915 to i64
  %917 = getelementptr inbounds i8, ptr %833, i64 %916
  store i8 2, ptr %917, align 1, !tbaa !57
  %918 = add nuw nsw i64 %912, 1
  %919 = getelementptr inbounds i32, ptr %899, i64 %918
  %920 = load i32, ptr %919, align 4, !tbaa !5
  %921 = sext i32 %920 to i64
  %922 = getelementptr inbounds i8, ptr %833, i64 %921
  store i8 2, ptr %922, align 1, !tbaa !57
  %923 = add nuw nsw i64 %912, 2
  %924 = getelementptr inbounds i32, ptr %899, i64 %923
  %925 = load i32, ptr %924, align 4, !tbaa !5
  %926 = sext i32 %925 to i64
  %927 = getelementptr inbounds i8, ptr %833, i64 %926
  store i8 2, ptr %927, align 1, !tbaa !57
  %928 = add nuw nsw i64 %912, 3
  %929 = getelementptr inbounds i32, ptr %899, i64 %928
  %930 = load i32, ptr %929, align 4, !tbaa !5
  %931 = sext i32 %930 to i64
  %932 = getelementptr inbounds i8, ptr %833, i64 %931
  store i8 2, ptr %932, align 1, !tbaa !57
  %933 = add nuw nsw i64 %912, 4
  %934 = add i64 %913, 4
  %935 = icmp eq i64 %934, %910
  br i1 %935, label %936, label %911

936:                                              ; preds = %911, %902
  %937 = phi i64 [ 1, %902 ], [ %933, %911 ]
  %938 = icmp eq i64 %907, 0
  br i1 %938, label %949, label %939

939:                                              ; preds = %936, %939
  %940 = phi i64 [ %946, %939 ], [ %937, %936 ]
  %941 = phi i64 [ %947, %939 ], [ 0, %936 ]
  %942 = getelementptr inbounds i32, ptr %899, i64 %940
  %943 = load i32, ptr %942, align 4, !tbaa !5
  %944 = sext i32 %943 to i64
  %945 = getelementptr inbounds i8, ptr %833, i64 %944
  store i8 2, ptr %945, align 1, !tbaa !57
  %946 = add nuw nsw i64 %940, 1
  %947 = add i64 %941, 1
  %948 = icmp eq i64 %947, %907
  br i1 %948, label %949, label %939, !llvm.loop !139

949:                                              ; preds = %936, %939, %895, %719
  %950 = phi ptr [ %722, %719 ], [ %833, %895 ], [ %833, %939 ], [ %833, %936 ]
  %951 = phi ptr [ %678, %719 ], [ %899, %895 ], [ %899, %939 ], [ %899, %936 ]
  %952 = phi ptr [ %677, %719 ], [ %840, %895 ], [ %840, %939 ], [ %840, %936 ]
  %953 = phi ptr [ %676, %719 ], [ %833, %895 ], [ %833, %939 ], [ %833, %936 ]
  %954 = load i8, ptr %689, align 1
  %955 = and i8 %954, 7
  %956 = icmp eq i8 %955, 0
  %957 = load i32, ptr @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4, !tbaa !5
  br i1 %956, label %1140, label %958

958:                                              ; preds = %949
  %959 = icmp eq i32 %957, 0
  br i1 %959, label %966, label %960

960:                                              ; preds = %958
  %961 = load i32, ptr %687, align 4
  %962 = freeze i32 %961
  %963 = icmp slt i32 %962, 0
  %964 = select i1 %963, ptr %237, ptr %191
  %965 = select i1 %963, i32 %650, i32 %651
  br label %966

966:                                              ; preds = %960, %958
  %967 = phi ptr [ %191, %958 ], [ %964, %960 ]
  %968 = phi i32 [ %651, %958 ], [ %965, %960 ]
  %969 = icmp sgt i32 %968, 0
  br i1 %969, label %970, label %1121

970:                                              ; preds = %966
  %971 = icmp ugt i32 %968, 6
  br i1 %971, label %972, label %1056

972:                                              ; preds = %970
  %973 = add nsw i32 %968, -2
  %974 = getelementptr inbounds i16, ptr %967, i64 1
  %975 = load i16, ptr %974, align 2, !tbaa !44
  %976 = zext i16 %975 to i64
  %977 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %976
  %978 = getelementptr inbounds %class.Vector, ptr %977, i64 0, i32 2
  %979 = load double, ptr %978, align 8, !tbaa !49
  %980 = load i16, ptr %967, align 2, !tbaa !44
  %981 = zext i16 %980 to i64
  %982 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %981
  %983 = getelementptr inbounds %class.Vector, ptr %982, i64 0, i32 2
  %984 = load double, ptr %983, align 8, !tbaa !49
  %985 = getelementptr inbounds %class.Vector, ptr %977, i64 0, i32 1
  %986 = load double, ptr %985, align 8, !tbaa !66
  %987 = getelementptr inbounds %class.Vector, ptr %982, i64 0, i32 1
  %988 = load double, ptr %987, align 8, !tbaa !66
  %989 = load double, ptr %977, align 8, !tbaa !67
  %990 = load double, ptr %982, align 8, !tbaa !67
  %991 = zext i32 %973 to i64
  %992 = insertelement <2 x double> poison, double %979, i64 0
  %993 = insertelement <2 x double> %992, double %984, i64 1
  %994 = insertelement <2 x double> poison, double %986, i64 0
  %995 = insertelement <2 x double> %994, double %988, i64 1
  %996 = insertelement <2 x double> poison, double %989, i64 0
  %997 = insertelement <2 x double> %996, double %990, i64 1
  %998 = insertelement <2 x double> poison, double %706, i64 0
  %999 = shufflevector <2 x double> %998, <2 x double> poison, <2 x i32> zeroinitializer
  %1000 = shufflevector <2 x double> %703, <2 x double> poison, <2 x i32> <i32 1, i32 1>
  %1001 = shufflevector <2 x double> %703, <2 x double> poison, <2 x i32> zeroinitializer
  br label %1002

1002:                                             ; preds = %972, %1002
  %1003 = phi i64 [ 2, %972 ], [ %1046, %1002 ]
  %1004 = phi i32 [ 0, %972 ], [ %1045, %1002 ]
  %1005 = phi i16 [ %980, %972 ], [ %1012, %1002 ]
  %1006 = phi i16 [ %975, %972 ], [ %1015, %1002 ]
  %1007 = phi <2 x double> [ %993, %972 ], [ %1049, %1002 ]
  %1008 = phi <2 x double> [ %995, %972 ], [ %1051, %1002 ]
  %1009 = phi <2 x double> [ %997, %972 ], [ %1053, %1002 ]
  %1010 = fsub <2 x double> %999, %1007
  %1011 = getelementptr inbounds i16, ptr %967, i64 %1003
  %1012 = load i16, ptr %1011, align 2, !tbaa !44
  %1013 = or i64 %1003, 1
  %1014 = getelementptr inbounds i16, ptr %967, i64 %1013
  %1015 = load i16, ptr %1014, align 2, !tbaa !44
  %1016 = zext i16 %1012 to i64
  %1017 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %1016
  %1018 = load double, ptr %1017, align 8, !tbaa !67
  %1019 = zext i16 %1015 to i64
  %1020 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %1019
  %1021 = load double, ptr %1020, align 8, !tbaa !67
  %1022 = getelementptr inbounds %class.Vector, ptr %1017, i64 0, i32 1
  %1023 = load double, ptr %1022, align 8, !tbaa !66
  %1024 = getelementptr inbounds %class.Vector, ptr %1020, i64 0, i32 1
  %1025 = load double, ptr %1024, align 8, !tbaa !66
  %1026 = getelementptr inbounds %class.Vector, ptr %1017, i64 0, i32 2
  %1027 = load double, ptr %1026, align 8, !tbaa !49
  %1028 = getelementptr inbounds %class.Vector, ptr %1020, i64 0, i32 2
  %1029 = load double, ptr %1028, align 8, !tbaa !49
  %1030 = fsub <2 x double> %1001, %1009
  %1031 = fmul <2 x double> %1030, %1030
  %1032 = fsub <2 x double> %1000, %1008
  %1033 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %1032, <2 x double> %1032, <2 x double> %1031)
  %1034 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %1010, <2 x double> %1010, <2 x double> %1033)
  %1035 = fcmp olt <2 x double> %1034, %672
  %1036 = zext i32 %1004 to i64
  %1037 = getelementptr inbounds i16, ptr %283, i64 %1036
  store i16 %1005, ptr %1037, align 2, !tbaa !44
  %1038 = extractelement <2 x i1> %1035, i64 1
  %1039 = zext i1 %1038 to i32
  %1040 = add nuw nsw i32 %1004, %1039
  %1041 = zext i32 %1040 to i64
  %1042 = getelementptr inbounds i16, ptr %283, i64 %1041
  store i16 %1006, ptr %1042, align 2, !tbaa !44
  %1043 = extractelement <2 x i1> %1035, i64 0
  %1044 = zext i1 %1043 to i32
  %1045 = add i32 %1040, %1044
  %1046 = add nuw nsw i64 %1003, 2
  %1047 = icmp ult i64 %1046, %991
  %1048 = insertelement <2 x double> poison, double %1029, i64 0
  %1049 = insertelement <2 x double> %1048, double %1027, i64 1
  %1050 = insertelement <2 x double> poison, double %1025, i64 0
  %1051 = insertelement <2 x double> %1050, double %1023, i64 1
  %1052 = insertelement <2 x double> poison, double %1021, i64 0
  %1053 = insertelement <2 x double> %1052, double %1018, i64 1
  br i1 %1047, label %1002, label %1054

1054:                                             ; preds = %1002
  %1055 = trunc i64 %1003 to i32
  br label %1056

1056:                                             ; preds = %1054, %970
  %1057 = phi i32 [ %1045, %1054 ], [ 0, %970 ]
  %1058 = phi i32 [ %1055, %1054 ], [ 0, %970 ]
  %1059 = icmp slt i32 %1058, %968
  br i1 %1059, label %1060, label %1065

1060:                                             ; preds = %1056
  %1061 = zext i32 %1058 to i64
  %1062 = zext i32 %968 to i64
  %1063 = extractelement <2 x double> %703, i64 0
  %1064 = extractelement <2 x double> %703, i64 1
  br label %1070

1065:                                             ; preds = %1093, %1056
  %1066 = phi i32 [ %1057, %1056 ], [ %1094, %1093 ]
  %1067 = icmp sgt i32 %1066, 0
  br i1 %1067, label %1068, label %1121

1068:                                             ; preds = %1065
  %1069 = zext i32 %1066 to i64
  br label %1097

1070:                                             ; preds = %1060, %1093
  %1071 = phi i64 [ %1061, %1060 ], [ %1095, %1093 ]
  %1072 = phi i32 [ %1057, %1060 ], [ %1094, %1093 ]
  %1073 = getelementptr inbounds i16, ptr %967, i64 %1071
  %1074 = load i16, ptr %1073, align 2, !tbaa !44
  %1075 = zext i16 %1074 to i64
  %1076 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %1075
  %1077 = load double, ptr %1076, align 8, !tbaa !67
  %1078 = getelementptr inbounds %class.Vector, ptr %1076, i64 0, i32 1
  %1079 = load double, ptr %1078, align 8, !tbaa !66
  %1080 = getelementptr inbounds %class.Vector, ptr %1076, i64 0, i32 2
  %1081 = load double, ptr %1080, align 8, !tbaa !49
  %1082 = fsub double %1063, %1077
  %1083 = fmul double %1082, %1082
  %1084 = fsub double %1064, %1079
  %1085 = tail call double @llvm.fmuladd.f64(double %1084, double %1084, double %1083)
  %1086 = fsub double %706, %1081
  %1087 = tail call double @llvm.fmuladd.f64(double %1086, double %1086, double %1085)
  %1088 = fcmp ugt double %1087, %23
  br i1 %1088, label %1093, label %1089

1089:                                             ; preds = %1070
  %1090 = add nsw i32 %1072, 1
  %1091 = sext i32 %1072 to i64
  %1092 = getelementptr inbounds i16, ptr %283, i64 %1091
  store i16 %1074, ptr %1092, align 2, !tbaa !44
  br label %1093

1093:                                             ; preds = %1089, %1070
  %1094 = phi i32 [ %1090, %1089 ], [ %1072, %1070 ]
  %1095 = add nuw nsw i64 %1071, 1
  %1096 = icmp eq i64 %1095, %1062
  br i1 %1096, label %1065, label %1070

1097:                                             ; preds = %1068, %1114
  %1098 = phi i64 [ 0, %1068 ], [ %1117, %1114 ]
  %1099 = phi ptr [ %421, %1068 ], [ %1116, %1114 ]
  %1100 = getelementptr inbounds i16, ptr %283, i64 %1098
  %1101 = load i16, ptr %1100, align 2, !tbaa !44
  %1102 = zext i16 %1101 to i64
  %1103 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %1102, i32 4
  %1104 = load i8, ptr %1103, align 1
  %1105 = and i8 %1104, 7
  store i16 %1101, ptr %1099, align 2, !tbaa !44
  %1106 = getelementptr inbounds i16, ptr %1099, i64 1
  %1107 = insertelement <2 x i16> poison, i16 %1101, i64 0
  %1108 = shufflevector <2 x i16> %1107, <2 x i16> poison, <2 x i32> zeroinitializer
  %1109 = add <2 x i16> %1108, <i16 1, i16 2>
  store <2 x i16> %1109, ptr %1106, align 2, !tbaa !44
  %1110 = icmp ult i8 %1105, 4
  br i1 %1110, label %1114, label %1111

1111:                                             ; preds = %1097
  %1112 = add <2 x i16> %1108, <i16 3, i16 4>
  %1113 = getelementptr inbounds i16, ptr %1099, i64 3
  store <2 x i16> %1112, ptr %1113, align 2, !tbaa !44
  br label %1114

1114:                                             ; preds = %1111, %1097
  %1115 = zext i8 %1105 to i64
  %1116 = getelementptr inbounds i16, ptr %1099, i64 %1115
  %1117 = add nuw nsw i64 %1098, 1
  %1118 = icmp eq i64 %1117, %1069
  br i1 %1118, label %1119, label %1097

1119:                                             ; preds = %1114
  %1120 = ptrtoint ptr %1116 to i64
  br label %1121

1121:                                             ; preds = %1119, %1065, %966
  %1122 = phi i64 [ %1120, %1119 ], [ %660, %1065 ], [ %660, %966 ]
  %1123 = sub i64 %1122, %660
  %1124 = lshr exact i64 %1123, 1
  %1125 = trunc i64 %1124 to i32
  %1126 = icmp eq i32 %1125, 0
  br i1 %1126, label %1127, label %1132

1127:                                             ; preds = %1121
  %1128 = load i8, ptr %689, align 1
  %1129 = and i8 %1128, 7
  %1130 = zext i8 %1129 to i32
  %1131 = add nsw i32 %675, %1130
  br label %2250

1132:                                             ; preds = %1121
  %1133 = shl i64 %1123, 31
  %1134 = add i64 %1133, -4294967296
  %1135 = ashr i64 %1134, 32
  %1136 = getelementptr inbounds i16, ptr %421, i64 %1135
  %1137 = load i16, ptr %1136, align 2, !tbaa !44
  %1138 = ashr i64 %1133, 32
  %1139 = getelementptr inbounds i16, ptr %421, i64 %1138
  store i16 %1137, ptr %1139, align 2, !tbaa !44
  br label %1140

1140:                                             ; preds = %1132, %949
  %1141 = phi i32 [ %1125, %1132 ], [ %679, %949 ]
  %1142 = icmp eq i32 %957, 0
  br i1 %1142, label %1147, label %1143

1143:                                             ; preds = %1140
  %1144 = load i32, ptr %687, align 4
  %1145 = and i32 %1144, 1073741824
  %1146 = icmp ne i32 %1145, 0
  br label %1147

1147:                                             ; preds = %1143, %1140
  %1148 = phi i1 [ false, %1140 ], [ %1146, %1143 ]
  %1149 = load i32, ptr %13, align 8, !tbaa !17
  %1150 = add nsw i32 %661, %1149
  %1151 = load i32, ptr %662, align 4, !tbaa !68
  %1152 = icmp sgt i32 %1151, %1150
  br i1 %1152, label %1168, label %1153

1153:                                             ; preds = %1147, %1153
  %1154 = phi i32 [ %1156, %1153 ], [ %1151, %1147 ]
  %1155 = ashr i32 %1154, 1
  %1156 = add nsw i32 %1155, %1154
  %1157 = icmp sgt i32 %1156, %1150
  br i1 %1157, label %1158, label %1153

1158:                                             ; preds = %1153
  %1159 = sext i32 %1156 to i64
  %1160 = icmp slt i32 %1156, 0
  %1161 = shl nsw i64 %1159, 1
  %1162 = select i1 %1160, i64 -1, i64 %1161
  %1163 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %1162) #9
  %1164 = load ptr, ptr %8, align 8, !tbaa !46
  %1165 = sext i32 %1149 to i64
  %1166 = shl nsw i64 %1165, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 2 %1163, ptr align 2 %1164, i64 %1166, i1 false)
  %1167 = icmp eq ptr %1164, null
  br i1 %1167, label %1172, label %1170

1168:                                             ; preds = %1147
  %1169 = load ptr, ptr %8, align 8, !tbaa !46
  br label %1174

1170:                                             ; preds = %1158
  tail call void @_ZdaPv(ptr noundef nonnull %1164) #10
  %1171 = load i32, ptr %13, align 8, !tbaa !17
  br label %1172

1172:                                             ; preds = %1170, %1158
  %1173 = phi i32 [ %1171, %1170 ], [ %1149, %1158 ]
  store ptr %1163, ptr %8, align 8, !tbaa !46
  store i32 %1156, ptr %662, align 4, !tbaa !68
  br label %1174

1174:                                             ; preds = %1168, %1172
  %1175 = phi i32 [ %1149, %1168 ], [ %1173, %1172 ]
  %1176 = phi ptr [ %1169, %1168 ], [ %1163, %1172 ]
  %1177 = ptrtoint ptr %1176 to i64
  %1178 = add nsw i32 %1175, 1
  %1179 = sext i32 %1178 to i64
  %1180 = getelementptr inbounds i16, ptr %1176, i64 %1179
  %1181 = icmp sgt i32 %1141, 0
  br i1 %1148, label %1182, label %1229

1182:                                             ; preds = %1174
  br i1 %1181, label %1183, label %1389

1183:                                             ; preds = %1182
  %1184 = zext i32 %1141 to i64
  %1185 = extractelement <2 x double> %703, i64 0
  %1186 = extractelement <2 x double> %703, i64 1
  br label %1187

1187:                                             ; preds = %1183, %1224
  %1188 = phi i64 [ 0, %1183 ], [ %1227, %1224 ]
  %1189 = phi ptr [ %467, %1183 ], [ %1226, %1224 ]
  %1190 = phi ptr [ %1180, %1183 ], [ %1225, %1224 ]
  %1191 = getelementptr inbounds i16, ptr %421, i64 %1188
  %1192 = load i16, ptr %1191, align 2, !tbaa !44
  %1193 = zext i16 %1192 to i64
  %1194 = getelementptr inbounds %struct.CompAtomExt, ptr %45, i64 %1193
  %1195 = load i32, ptr %1194, align 4
  %1196 = and i32 %1195, 1073741824
  %1197 = icmp eq i32 %1196, 0
  br i1 %1197, label %1198, label %1224

1198:                                             ; preds = %1187
  %1199 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %1193
  %1200 = getelementptr inbounds %class.Vector, ptr %1199, i64 0, i32 2
  %1201 = load double, ptr %1200, align 8, !tbaa !49
  %1202 = fsub double %706, %1201
  %1203 = getelementptr inbounds %class.Vector, ptr %1199, i64 0, i32 1
  %1204 = load double, ptr %1203, align 8, !tbaa !66
  %1205 = fsub double %1186, %1204
  %1206 = load double, ptr %1199, align 8, !tbaa !67
  %1207 = fsub double %1185, %1206
  %1208 = fmul double %1207, %1207
  %1209 = tail call double @llvm.fmuladd.f64(double %1205, double %1205, double %1208)
  %1210 = tail call double @llvm.fmuladd.f64(double %1202, double %1202, double %1209)
  %1211 = fcmp ugt double %1210, %20
  br i1 %1211, label %1224, label %1212

1212:                                             ; preds = %1198
  %1213 = shl i32 %1195, 2
  %1214 = ashr exact i32 %1213, 2
  %1215 = icmp slt i32 %1214, %713
  %1216 = icmp sgt i32 %1214, %715
  %1217 = select i1 %1215, i1 true, i1 %1216
  %1218 = select i1 %1217, ptr %1190, ptr %1189
  %1219 = zext i1 %1217 to i64
  %1220 = getelementptr inbounds i16, ptr %1190, i64 %1219
  %1221 = xor i1 %1217, true
  %1222 = zext i1 %1221 to i64
  %1223 = getelementptr inbounds i16, ptr %1189, i64 %1222
  store i16 %1192, ptr %1218, align 2, !tbaa !44
  br label %1224

1224:                                             ; preds = %1212, %1198, %1187
  %1225 = phi ptr [ %1190, %1187 ], [ %1190, %1198 ], [ %1220, %1212 ]
  %1226 = phi ptr [ %1189, %1187 ], [ %1189, %1198 ], [ %1223, %1212 ]
  %1227 = add nuw nsw i64 %1188, 1
  %1228 = icmp eq i64 %1227, %1184
  br i1 %1228, label %1389, label %1187

1229:                                             ; preds = %1174
  br i1 %1181, label %1230, label %1389

1230:                                             ; preds = %1229
  %1231 = icmp ugt i32 %1141, 6
  br i1 %1231, label %1232, label %1340

1232:                                             ; preds = %1230
  %1233 = add nsw i32 %1141, -2
  %1234 = load i16, ptr %421, align 2, !tbaa !44
  %1235 = zext i16 %1234 to i64
  %1236 = getelementptr inbounds %struct.CompAtomExt, ptr %45, i64 %1235
  %1237 = load i32, ptr %1236, align 4
  %1238 = load i16, ptr %663, align 2, !tbaa !44
  %1239 = zext i16 %1238 to i64
  %1240 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %1239
  %1241 = getelementptr inbounds %class.Vector, ptr %1240, i64 0, i32 2
  %1242 = load double, ptr %1241, align 8, !tbaa !49
  %1243 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %1235
  %1244 = getelementptr inbounds %class.Vector, ptr %1243, i64 0, i32 2
  %1245 = load double, ptr %1244, align 8, !tbaa !49
  %1246 = getelementptr inbounds %class.Vector, ptr %1240, i64 0, i32 1
  %1247 = load double, ptr %1246, align 8, !tbaa !66
  %1248 = getelementptr inbounds %class.Vector, ptr %1243, i64 0, i32 1
  %1249 = load double, ptr %1248, align 8, !tbaa !66
  %1250 = load double, ptr %1240, align 8, !tbaa !67
  %1251 = load double, ptr %1243, align 8, !tbaa !67
  %1252 = zext i32 %1233 to i64
  %1253 = extractelement <2 x double> %703, i64 0
  %1254 = extractelement <2 x double> %703, i64 1
  br label %1255

1255:                                             ; preds = %1232, %1333
  %1256 = phi i64 [ 2, %1232 ], [ %1336, %1333 ]
  %1257 = phi i64 [ %1239, %1232 ], [ %1293, %1333 ]
  %1258 = phi i32 [ %1237, %1232 ], [ %1321, %1333 ]
  %1259 = phi ptr [ %467, %1232 ], [ %1335, %1333 ]
  %1260 = phi ptr [ %1180, %1232 ], [ %1334, %1333 ]
  %1261 = phi i16 [ %1234, %1232 ], [ %1286, %1333 ]
  %1262 = phi i16 [ %1238, %1232 ], [ %1289, %1333 ]
  %1263 = phi double [ %1251, %1232 ], [ %1292, %1333 ]
  %1264 = phi double [ %1250, %1232 ], [ %1295, %1333 ]
  %1265 = phi double [ %1249, %1232 ], [ %1297, %1333 ]
  %1266 = phi double [ %1247, %1232 ], [ %1299, %1333 ]
  %1267 = phi double [ %1245, %1232 ], [ %1301, %1333 ]
  %1268 = phi double [ %1242, %1232 ], [ %1303, %1333 ]
  %1269 = getelementptr inbounds %struct.CompAtomExt, ptr %45, i64 %1257
  %1270 = load i32, ptr %1269, align 4
  %1271 = shl i32 %1270, 2
  %1272 = ashr exact i32 %1271, 2
  %1273 = fsub double %1253, %1263
  %1274 = fsub double %1253, %1264
  %1275 = fmul double %1273, %1273
  %1276 = fmul double %1274, %1274
  %1277 = fsub double %1254, %1265
  %1278 = fsub double %1254, %1266
  %1279 = tail call double @llvm.fmuladd.f64(double %1277, double %1277, double %1275)
  %1280 = tail call double @llvm.fmuladd.f64(double %1278, double %1278, double %1276)
  %1281 = fsub double %706, %1267
  %1282 = fsub double %706, %1268
  %1283 = tail call double @llvm.fmuladd.f64(double %1281, double %1281, double %1279)
  %1284 = tail call double @llvm.fmuladd.f64(double %1282, double %1282, double %1280)
  %1285 = getelementptr inbounds i16, ptr %421, i64 %1256
  %1286 = load i16, ptr %1285, align 2, !tbaa !44
  %1287 = or i64 %1256, 1
  %1288 = getelementptr inbounds i16, ptr %421, i64 %1287
  %1289 = load i16, ptr %1288, align 2, !tbaa !44
  %1290 = zext i16 %1286 to i64
  %1291 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %1290
  %1292 = load double, ptr %1291, align 8, !tbaa !67
  %1293 = zext i16 %1289 to i64
  %1294 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %1293
  %1295 = load double, ptr %1294, align 8, !tbaa !67
  %1296 = getelementptr inbounds %class.Vector, ptr %1291, i64 0, i32 1
  %1297 = load double, ptr %1296, align 8, !tbaa !66
  %1298 = getelementptr inbounds %class.Vector, ptr %1294, i64 0, i32 1
  %1299 = load double, ptr %1298, align 8, !tbaa !66
  %1300 = getelementptr inbounds %class.Vector, ptr %1291, i64 0, i32 2
  %1301 = load double, ptr %1300, align 8, !tbaa !49
  %1302 = getelementptr inbounds %class.Vector, ptr %1294, i64 0, i32 2
  %1303 = load double, ptr %1302, align 8, !tbaa !49
  %1304 = fcmp ugt double %1283, %20
  br i1 %1304, label %1317, label %1305

1305:                                             ; preds = %1255
  %1306 = shl i32 %1258, 2
  %1307 = ashr exact i32 %1306, 2
  %1308 = icmp slt i32 %1307, %713
  %1309 = icmp sgt i32 %1307, %715
  %1310 = select i1 %1308, i1 true, i1 %1309
  %1311 = select i1 %1310, ptr %1260, ptr %1259
  %1312 = zext i1 %1310 to i64
  %1313 = getelementptr inbounds i16, ptr %1260, i64 %1312
  %1314 = xor i1 %1310, true
  %1315 = zext i1 %1314 to i64
  %1316 = getelementptr inbounds i16, ptr %1259, i64 %1315
  store i16 %1261, ptr %1311, align 2, !tbaa !44
  br label %1317

1317:                                             ; preds = %1305, %1255
  %1318 = phi ptr [ %1260, %1255 ], [ %1313, %1305 ]
  %1319 = phi ptr [ %1259, %1255 ], [ %1316, %1305 ]
  %1320 = getelementptr inbounds %struct.CompAtomExt, ptr %45, i64 %1290
  %1321 = load i32, ptr %1320, align 4
  %1322 = fcmp ugt double %1284, %20
  br i1 %1322, label %1333, label %1323

1323:                                             ; preds = %1317
  %1324 = icmp slt i32 %1272, %713
  %1325 = icmp sgt i32 %1272, %715
  %1326 = select i1 %1324, i1 true, i1 %1325
  %1327 = select i1 %1326, ptr %1318, ptr %1319
  %1328 = zext i1 %1326 to i64
  %1329 = getelementptr inbounds i16, ptr %1318, i64 %1328
  %1330 = xor i1 %1326, true
  %1331 = zext i1 %1330 to i64
  %1332 = getelementptr inbounds i16, ptr %1319, i64 %1331
  store i16 %1262, ptr %1327, align 2, !tbaa !44
  br label %1333

1333:                                             ; preds = %1323, %1317
  %1334 = phi ptr [ %1318, %1317 ], [ %1329, %1323 ]
  %1335 = phi ptr [ %1319, %1317 ], [ %1332, %1323 ]
  %1336 = add nuw nsw i64 %1256, 2
  %1337 = icmp ult i64 %1336, %1252
  br i1 %1337, label %1255, label %1338

1338:                                             ; preds = %1333
  %1339 = trunc i64 %1256 to i32
  br label %1340

1340:                                             ; preds = %1338, %1230
  %1341 = phi i32 [ %1339, %1338 ], [ 0, %1230 ]
  %1342 = phi ptr [ %1334, %1338 ], [ %1180, %1230 ]
  %1343 = phi ptr [ %1335, %1338 ], [ %467, %1230 ]
  %1344 = icmp slt i32 %1341, %1141
  br i1 %1344, label %1345, label %1389

1345:                                             ; preds = %1340
  %1346 = zext i32 %1341 to i64
  %1347 = zext i32 %1141 to i64
  %1348 = extractelement <2 x double> %703, i64 0
  %1349 = extractelement <2 x double> %703, i64 1
  br label %1350

1350:                                             ; preds = %1345, %1384
  %1351 = phi i64 [ %1346, %1345 ], [ %1387, %1384 ]
  %1352 = phi ptr [ %1343, %1345 ], [ %1386, %1384 ]
  %1353 = phi ptr [ %1342, %1345 ], [ %1385, %1384 ]
  %1354 = getelementptr inbounds i16, ptr %421, i64 %1351
  %1355 = load i16, ptr %1354, align 2, !tbaa !44
  %1356 = zext i16 %1355 to i64
  %1357 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %1356
  %1358 = load double, ptr %1357, align 8, !tbaa !67
  %1359 = getelementptr inbounds %class.Vector, ptr %1357, i64 0, i32 1
  %1360 = load double, ptr %1359, align 8, !tbaa !66
  %1361 = getelementptr inbounds %class.Vector, ptr %1357, i64 0, i32 2
  %1362 = load double, ptr %1361, align 8, !tbaa !49
  %1363 = fsub double %1348, %1358
  %1364 = fmul double %1363, %1363
  %1365 = fsub double %1349, %1360
  %1366 = tail call double @llvm.fmuladd.f64(double %1365, double %1365, double %1364)
  %1367 = fsub double %706, %1362
  %1368 = tail call double @llvm.fmuladd.f64(double %1367, double %1367, double %1366)
  %1369 = fcmp ugt double %1368, %20
  br i1 %1369, label %1384, label %1370

1370:                                             ; preds = %1350
  %1371 = getelementptr inbounds %struct.CompAtomExt, ptr %45, i64 %1356
  %1372 = load i32, ptr %1371, align 4
  %1373 = shl i32 %1372, 2
  %1374 = ashr exact i32 %1373, 2
  %1375 = icmp slt i32 %1374, %713
  %1376 = icmp sgt i32 %1374, %715
  %1377 = select i1 %1375, i1 true, i1 %1376
  %1378 = select i1 %1377, ptr %1353, ptr %1352
  %1379 = zext i1 %1377 to i64
  %1380 = getelementptr inbounds i16, ptr %1353, i64 %1379
  %1381 = xor i1 %1377, true
  %1382 = zext i1 %1381 to i64
  %1383 = getelementptr inbounds i16, ptr %1352, i64 %1382
  store i16 %1355, ptr %1378, align 2, !tbaa !44
  br label %1384

1384:                                             ; preds = %1370, %1350
  %1385 = phi ptr [ %1353, %1350 ], [ %1380, %1370 ]
  %1386 = phi ptr [ %1352, %1350 ], [ %1383, %1370 ]
  %1387 = add nuw nsw i64 %1351, 1
  %1388 = icmp eq i64 %1387, %1347
  br i1 %1388, label %1389, label %1350

1389:                                             ; preds = %1384, %1224, %1340, %1182, %1229
  %1390 = phi ptr [ %1180, %1229 ], [ %1180, %1182 ], [ %1342, %1340 ], [ %1225, %1224 ], [ %1385, %1384 ]
  %1391 = phi ptr [ %467, %1229 ], [ %467, %1182 ], [ %1343, %1340 ], [ %1226, %1224 ], [ %1386, %1384 ]
  %1392 = icmp eq ptr %1390, %1180
  %1393 = icmp eq ptr %1391, %467
  %1394 = select i1 %1392, i1 %1393, i1 false
  br i1 %1394, label %1395, label %1397

1395:                                             ; preds = %1389
  %1396 = add nsw i32 %675, 1
  br label %2250

1397:                                             ; preds = %1389
  %1398 = trunc i32 %675 to i16
  %1399 = load i32, ptr %13, align 8, !tbaa !17
  %1400 = add nsw i32 %1399, -1
  %1401 = sext i32 %1400 to i64
  %1402 = getelementptr inbounds i16, ptr %1176, i64 %1401
  store i16 %1398, ptr %1402, align 2, !tbaa !44
  %1403 = ptrtoint ptr %1391 to i64
  %1404 = sub i64 %1403, %664
  %1405 = lshr exact i64 %1404, 1
  %1406 = trunc i64 %1405 to i32
  %1407 = icmp sgt i32 %1406, 0
  br i1 %1407, label %1408, label %1508

1408:                                             ; preds = %1397
  %1409 = and i64 %1405, 4294967295
  %1410 = and i64 %1405, 1
  %1411 = icmp eq i64 %1409, 1
  br i1 %1411, label %1476, label %1412

1412:                                             ; preds = %1408
  %1413 = sub nsw i64 %1409, %1410
  br label %1414

1414:                                             ; preds = %1469, %1412
  %1415 = phi i64 [ 0, %1412 ], [ %1473, %1469 ]
  %1416 = phi ptr [ %1390, %1412 ], [ %1472, %1469 ]
  %1417 = phi ptr [ %329, %1412 ], [ %1471, %1469 ]
  %1418 = phi ptr [ %375, %1412 ], [ %1470, %1469 ]
  %1419 = phi i64 [ 0, %1412 ], [ %1474, %1469 ]
  %1420 = getelementptr inbounds i16, ptr %467, i64 %1415
  %1421 = load i16, ptr %1420, align 2, !tbaa !44
  %1422 = zext i16 %1421 to i64
  %1423 = getelementptr inbounds %struct.CompAtomExt, ptr %45, i64 %1422
  %1424 = load i32, ptr %1423, align 4
  %1425 = shl i32 %1424, 2
  %1426 = ashr exact i32 %1425, 2
  %1427 = sext i32 %1426 to i64
  %1428 = getelementptr inbounds i8, ptr %950, i64 %1427
  %1429 = load i8, ptr %1428, align 1, !tbaa !57
  %1430 = sext i8 %1429 to i32
  switch i32 %1430, label %1442 [
    i32 0, label %1431
    i32 1, label %1433
    i32 2, label %1435
  ]

1431:                                             ; preds = %1414
  %1432 = getelementptr inbounds i16, ptr %1416, i64 1
  br label %1437

1433:                                             ; preds = %1414
  %1434 = getelementptr inbounds i16, ptr %1417, i64 1
  br label %1437

1435:                                             ; preds = %1414
  %1436 = getelementptr inbounds i16, ptr %1418, i64 1
  br label %1437

1437:                                             ; preds = %1431, %1433, %1435
  %1438 = phi ptr [ %1418, %1435 ], [ %1417, %1433 ], [ %1416, %1431 ]
  %1439 = phi ptr [ %1436, %1435 ], [ %1418, %1433 ], [ %1418, %1431 ]
  %1440 = phi ptr [ %1417, %1435 ], [ %1434, %1433 ], [ %1417, %1431 ]
  %1441 = phi ptr [ %1416, %1435 ], [ %1416, %1433 ], [ %1432, %1431 ]
  store i16 %1421, ptr %1438, align 2, !tbaa !44
  br label %1442

1442:                                             ; preds = %1437, %1414
  %1443 = phi ptr [ %1418, %1414 ], [ %1439, %1437 ]
  %1444 = phi ptr [ %1417, %1414 ], [ %1440, %1437 ]
  %1445 = phi ptr [ %1416, %1414 ], [ %1441, %1437 ]
  %1446 = or i64 %1415, 1
  %1447 = getelementptr inbounds i16, ptr %467, i64 %1446
  %1448 = load i16, ptr %1447, align 2, !tbaa !44
  %1449 = zext i16 %1448 to i64
  %1450 = getelementptr inbounds %struct.CompAtomExt, ptr %45, i64 %1449
  %1451 = load i32, ptr %1450, align 4
  %1452 = shl i32 %1451, 2
  %1453 = ashr exact i32 %1452, 2
  %1454 = sext i32 %1453 to i64
  %1455 = getelementptr inbounds i8, ptr %950, i64 %1454
  %1456 = load i8, ptr %1455, align 1, !tbaa !57
  %1457 = sext i8 %1456 to i32
  switch i32 %1457, label %1469 [
    i32 0, label %1462
    i32 1, label %1460
    i32 2, label %1458
  ]

1458:                                             ; preds = %1442
  %1459 = getelementptr inbounds i16, ptr %1443, i64 1
  br label %1464

1460:                                             ; preds = %1442
  %1461 = getelementptr inbounds i16, ptr %1444, i64 1
  br label %1464

1462:                                             ; preds = %1442
  %1463 = getelementptr inbounds i16, ptr %1445, i64 1
  br label %1464

1464:                                             ; preds = %1462, %1460, %1458
  %1465 = phi ptr [ %1443, %1458 ], [ %1444, %1460 ], [ %1445, %1462 ]
  %1466 = phi ptr [ %1459, %1458 ], [ %1443, %1460 ], [ %1443, %1462 ]
  %1467 = phi ptr [ %1444, %1458 ], [ %1461, %1460 ], [ %1444, %1462 ]
  %1468 = phi ptr [ %1445, %1458 ], [ %1445, %1460 ], [ %1463, %1462 ]
  store i16 %1448, ptr %1465, align 2, !tbaa !44
  br label %1469

1469:                                             ; preds = %1464, %1442
  %1470 = phi ptr [ %1443, %1442 ], [ %1466, %1464 ]
  %1471 = phi ptr [ %1444, %1442 ], [ %1467, %1464 ]
  %1472 = phi ptr [ %1445, %1442 ], [ %1468, %1464 ]
  %1473 = add nuw nsw i64 %1415, 2
  %1474 = add i64 %1419, 2
  %1475 = icmp eq i64 %1474, %1413
  br i1 %1475, label %1476, label %1414

1476:                                             ; preds = %1469, %1408
  %1477 = phi ptr [ undef, %1408 ], [ %1470, %1469 ]
  %1478 = phi ptr [ undef, %1408 ], [ %1471, %1469 ]
  %1479 = phi ptr [ undef, %1408 ], [ %1472, %1469 ]
  %1480 = phi i64 [ 0, %1408 ], [ %1473, %1469 ]
  %1481 = phi ptr [ %1390, %1408 ], [ %1472, %1469 ]
  %1482 = phi ptr [ %329, %1408 ], [ %1471, %1469 ]
  %1483 = phi ptr [ %375, %1408 ], [ %1470, %1469 ]
  %1484 = icmp eq i64 %1410, 0
  br i1 %1484, label %1508, label %1485

1485:                                             ; preds = %1476
  %1486 = getelementptr inbounds i16, ptr %467, i64 %1480
  %1487 = load i16, ptr %1486, align 2, !tbaa !44
  %1488 = zext i16 %1487 to i64
  %1489 = getelementptr inbounds %struct.CompAtomExt, ptr %45, i64 %1488
  %1490 = load i32, ptr %1489, align 4
  %1491 = shl i32 %1490, 2
  %1492 = ashr exact i32 %1491, 2
  %1493 = sext i32 %1492 to i64
  %1494 = getelementptr inbounds i8, ptr %950, i64 %1493
  %1495 = load i8, ptr %1494, align 1, !tbaa !57
  %1496 = sext i8 %1495 to i32
  switch i32 %1496, label %1508 [
    i32 0, label %1501
    i32 1, label %1499
    i32 2, label %1497
  ]

1497:                                             ; preds = %1485
  %1498 = getelementptr inbounds i16, ptr %1483, i64 1
  br label %1503

1499:                                             ; preds = %1485
  %1500 = getelementptr inbounds i16, ptr %1482, i64 1
  br label %1503

1501:                                             ; preds = %1485
  %1502 = getelementptr inbounds i16, ptr %1481, i64 1
  br label %1503

1503:                                             ; preds = %1501, %1499, %1497
  %1504 = phi ptr [ %1483, %1497 ], [ %1482, %1499 ], [ %1481, %1501 ]
  %1505 = phi ptr [ %1498, %1497 ], [ %1483, %1499 ], [ %1483, %1501 ]
  %1506 = phi ptr [ %1482, %1497 ], [ %1500, %1499 ], [ %1482, %1501 ]
  %1507 = phi ptr [ %1481, %1497 ], [ %1481, %1499 ], [ %1502, %1501 ]
  store i16 %1487, ptr %1504, align 2, !tbaa !44
  br label %1508

1508:                                             ; preds = %1476, %1503, %1485, %1397
  %1509 = phi ptr [ %375, %1397 ], [ %1477, %1476 ], [ %1483, %1485 ], [ %1505, %1503 ]
  %1510 = phi ptr [ %329, %1397 ], [ %1478, %1476 ], [ %1482, %1485 ], [ %1506, %1503 ]
  %1511 = phi ptr [ %1390, %1397 ], [ %1479, %1476 ], [ %1481, %1485 ], [ %1507, %1503 ]
  %1512 = ptrtoint ptr %1511 to i64
  %1513 = ptrtoint ptr %1180 to i64
  %1514 = sub i64 %1512, %1513
  %1515 = lshr exact i64 %1514, 1
  %1516 = trunc i64 %1515 to i32
  %1517 = icmp eq i32 %1516, 0
  %1518 = shl i64 %1514, 31
  br i1 %1517, label %1524, label %1519

1519:                                             ; preds = %1508
  %1520 = add i64 %1518, -4294967296
  %1521 = ashr i64 %1520, 32
  %1522 = getelementptr inbounds i16, ptr %1180, i64 %1521
  %1523 = load i16, ptr %1522, align 2, !tbaa !44
  br label %1524

1524:                                             ; preds = %1508, %1519
  %1525 = phi i16 [ %1523, %1519 ], [ -1, %1508 ]
  %1526 = ashr i64 %1518, 32
  %1527 = getelementptr inbounds i16, ptr %1180, i64 %1526
  store i16 %1525, ptr %1527, align 2, !tbaa !44
  %1528 = trunc i64 %1515 to i16
  %1529 = add i16 %1528, 1
  %1530 = sext i32 %1399 to i64
  %1531 = getelementptr inbounds i16, ptr %1176, i64 %1530
  store i16 %1529, ptr %1531, align 2, !tbaa !44
  %1532 = add i32 %1399, 2
  %1533 = add i32 %1532, %1516
  %1534 = ptrtoint ptr %1510 to i64
  %1535 = sub i64 %1534, %665
  %1536 = lshr exact i64 %1535, 1
  %1537 = trunc i64 %1536 to i32
  %1538 = add nsw i32 %1533, 1
  %1539 = sext i32 %1538 to i64
  %1540 = getelementptr i16, ptr %1176, i64 %1539
  %1541 = icmp sgt i32 %1537, 0
  br i1 %1541, label %1542, label %1632

1542:                                             ; preds = %1524
  %1543 = and i64 %1536, 4294967295
  %1544 = icmp ult i64 %1543, 8
  br i1 %1544, label %1588, label %1545

1545:                                             ; preds = %1542
  %1546 = shl nsw i64 %1539, 1
  %1547 = add i64 %1546, %1177
  %1548 = sub i64 %1547, %665
  %1549 = icmp ult i64 %1548, 128
  br i1 %1549, label %1588, label %1550

1550:                                             ; preds = %1545
  %1551 = icmp ult i64 %1543, 64
  br i1 %1551, label %1575, label %1552

1552:                                             ; preds = %1550
  %1553 = and i64 %1536, 63
  %1554 = sub nsw i64 %1543, %1553
  br label %1555

1555:                                             ; preds = %1555, %1552
  %1556 = phi i64 [ 0, %1552 ], [ %1569, %1555 ]
  %1557 = getelementptr inbounds i16, ptr %329, i64 %1556
  %1558 = load <16 x i16>, ptr %1557, align 2, !tbaa !44
  %1559 = getelementptr inbounds i16, ptr %1557, i64 16
  %1560 = load <16 x i16>, ptr %1559, align 2, !tbaa !44
  %1561 = getelementptr inbounds i16, ptr %1557, i64 32
  %1562 = load <16 x i16>, ptr %1561, align 2, !tbaa !44
  %1563 = getelementptr inbounds i16, ptr %1557, i64 48
  %1564 = load <16 x i16>, ptr %1563, align 2, !tbaa !44
  %1565 = getelementptr inbounds i16, ptr %1540, i64 %1556
  store <16 x i16> %1558, ptr %1565, align 2, !tbaa !44
  %1566 = getelementptr inbounds i16, ptr %1565, i64 16
  store <16 x i16> %1560, ptr %1566, align 2, !tbaa !44
  %1567 = getelementptr inbounds i16, ptr %1565, i64 32
  store <16 x i16> %1562, ptr %1567, align 2, !tbaa !44
  %1568 = getelementptr inbounds i16, ptr %1565, i64 48
  store <16 x i16> %1564, ptr %1568, align 2, !tbaa !44
  %1569 = add nuw i64 %1556, 64
  %1570 = icmp eq i64 %1569, %1554
  br i1 %1570, label %1571, label %1555, !llvm.loop !140

1571:                                             ; preds = %1555
  %1572 = icmp eq i64 %1553, 0
  br i1 %1572, label %1626, label %1573

1573:                                             ; preds = %1571
  %1574 = icmp ult i64 %1553, 8
  br i1 %1574, label %1588, label %1575

1575:                                             ; preds = %1550, %1573
  %1576 = phi i64 [ %1554, %1573 ], [ 0, %1550 ]
  %1577 = and i64 %1536, 7
  %1578 = sub nsw i64 %1543, %1577
  br label %1579

1579:                                             ; preds = %1579, %1575
  %1580 = phi i64 [ %1576, %1575 ], [ %1584, %1579 ]
  %1581 = getelementptr inbounds i16, ptr %329, i64 %1580
  %1582 = load <8 x i16>, ptr %1581, align 2, !tbaa !44
  %1583 = getelementptr inbounds i16, ptr %1540, i64 %1580
  store <8 x i16> %1582, ptr %1583, align 2, !tbaa !44
  %1584 = add nuw i64 %1580, 8
  %1585 = icmp eq i64 %1584, %1578
  br i1 %1585, label %1586, label %1579, !llvm.loop !141

1586:                                             ; preds = %1579
  %1587 = icmp eq i64 %1577, 0
  br i1 %1587, label %1626, label %1588

1588:                                             ; preds = %1545, %1542, %1573, %1586
  %1589 = phi i64 [ 0, %1542 ], [ 0, %1545 ], [ %1554, %1573 ], [ %1578, %1586 ]
  %1590 = sub i64 %1536, %1589
  %1591 = xor i64 %1589, -1
  %1592 = add nsw i64 %1543, %1591
  %1593 = and i64 %1590, 3
  %1594 = icmp eq i64 %1593, 0
  br i1 %1594, label %1604, label %1595

1595:                                             ; preds = %1588, %1595
  %1596 = phi i64 [ %1601, %1595 ], [ %1589, %1588 ]
  %1597 = phi i64 [ %1602, %1595 ], [ 0, %1588 ]
  %1598 = getelementptr inbounds i16, ptr %329, i64 %1596
  %1599 = load i16, ptr %1598, align 2, !tbaa !44
  %1600 = getelementptr inbounds i16, ptr %1540, i64 %1596
  store i16 %1599, ptr %1600, align 2, !tbaa !44
  %1601 = add nuw nsw i64 %1596, 1
  %1602 = add i64 %1597, 1
  %1603 = icmp eq i64 %1602, %1593
  br i1 %1603, label %1604, label %1595, !llvm.loop !142

1604:                                             ; preds = %1595, %1588
  %1605 = phi i64 [ %1589, %1588 ], [ %1601, %1595 ]
  %1606 = icmp ult i64 %1592, 3
  br i1 %1606, label %1626, label %1607

1607:                                             ; preds = %1604, %1607
  %1608 = phi i64 [ %1624, %1607 ], [ %1605, %1604 ]
  %1609 = getelementptr inbounds i16, ptr %329, i64 %1608
  %1610 = load i16, ptr %1609, align 2, !tbaa !44
  %1611 = getelementptr inbounds i16, ptr %1540, i64 %1608
  store i16 %1610, ptr %1611, align 2, !tbaa !44
  %1612 = add nuw nsw i64 %1608, 1
  %1613 = getelementptr inbounds i16, ptr %329, i64 %1612
  %1614 = load i16, ptr %1613, align 2, !tbaa !44
  %1615 = getelementptr inbounds i16, ptr %1540, i64 %1612
  store i16 %1614, ptr %1615, align 2, !tbaa !44
  %1616 = add nuw nsw i64 %1608, 2
  %1617 = getelementptr inbounds i16, ptr %329, i64 %1616
  %1618 = load i16, ptr %1617, align 2, !tbaa !44
  %1619 = getelementptr inbounds i16, ptr %1540, i64 %1616
  store i16 %1618, ptr %1619, align 2, !tbaa !44
  %1620 = add nuw nsw i64 %1608, 3
  %1621 = getelementptr inbounds i16, ptr %329, i64 %1620
  %1622 = load i16, ptr %1621, align 2, !tbaa !44
  %1623 = getelementptr inbounds i16, ptr %1540, i64 %1620
  store i16 %1622, ptr %1623, align 2, !tbaa !44
  %1624 = add nuw nsw i64 %1608, 4
  %1625 = icmp eq i64 %1624, %1543
  br i1 %1625, label %1626, label %1607, !llvm.loop !143

1626:                                             ; preds = %1604, %1607, %1571, %1586
  %1627 = shl i64 %1535, 31
  %1628 = add i64 %1627, -4294967296
  %1629 = ashr i64 %1628, 32
  %1630 = getelementptr inbounds i16, ptr %1540, i64 %1629
  %1631 = load i16, ptr %1630, align 2, !tbaa !44
  br label %1632

1632:                                             ; preds = %1524, %1626
  %1633 = phi i64 [ %1536, %1626 ], [ 0, %1524 ]
  %1634 = phi i16 [ %1631, %1626 ], [ -1, %1524 ]
  %1635 = and i64 %1633, 4294967295
  %1636 = getelementptr inbounds i16, ptr %1540, i64 %1635
  store i16 %1634, ptr %1636, align 2, !tbaa !44
  %1637 = trunc i64 %1536 to i16
  %1638 = add i16 %1637, 1
  %1639 = sext i32 %1533 to i64
  %1640 = getelementptr inbounds i16, ptr %1176, i64 %1639
  store i16 %1638, ptr %1640, align 2, !tbaa !44
  %1641 = add nsw i32 %1537, 2
  %1642 = add nsw i32 %1641, %1533
  %1643 = ptrtoint ptr %1509 to i64
  %1644 = sub i64 %1643, %666
  %1645 = lshr exact i64 %1644, 1
  %1646 = trunc i64 %1645 to i32
  %1647 = add nsw i32 %1642, 1
  %1648 = sext i32 %1647 to i64
  %1649 = getelementptr i16, ptr %1176, i64 %1648
  %1650 = icmp sgt i32 %1646, 0
  br i1 %1650, label %1651, label %1741

1651:                                             ; preds = %1632
  %1652 = and i64 %1645, 4294967295
  %1653 = icmp ult i64 %1652, 8
  br i1 %1653, label %1697, label %1654

1654:                                             ; preds = %1651
  %1655 = shl nsw i64 %1648, 1
  %1656 = add i64 %1655, %1177
  %1657 = sub i64 %1656, %666
  %1658 = icmp ult i64 %1657, 128
  br i1 %1658, label %1697, label %1659

1659:                                             ; preds = %1654
  %1660 = icmp ult i64 %1652, 64
  br i1 %1660, label %1684, label %1661

1661:                                             ; preds = %1659
  %1662 = and i64 %1645, 63
  %1663 = sub nsw i64 %1652, %1662
  br label %1664

1664:                                             ; preds = %1664, %1661
  %1665 = phi i64 [ 0, %1661 ], [ %1678, %1664 ]
  %1666 = getelementptr inbounds i16, ptr %375, i64 %1665
  %1667 = load <16 x i16>, ptr %1666, align 2, !tbaa !44
  %1668 = getelementptr inbounds i16, ptr %1666, i64 16
  %1669 = load <16 x i16>, ptr %1668, align 2, !tbaa !44
  %1670 = getelementptr inbounds i16, ptr %1666, i64 32
  %1671 = load <16 x i16>, ptr %1670, align 2, !tbaa !44
  %1672 = getelementptr inbounds i16, ptr %1666, i64 48
  %1673 = load <16 x i16>, ptr %1672, align 2, !tbaa !44
  %1674 = getelementptr inbounds i16, ptr %1649, i64 %1665
  store <16 x i16> %1667, ptr %1674, align 2, !tbaa !44
  %1675 = getelementptr inbounds i16, ptr %1674, i64 16
  store <16 x i16> %1669, ptr %1675, align 2, !tbaa !44
  %1676 = getelementptr inbounds i16, ptr %1674, i64 32
  store <16 x i16> %1671, ptr %1676, align 2, !tbaa !44
  %1677 = getelementptr inbounds i16, ptr %1674, i64 48
  store <16 x i16> %1673, ptr %1677, align 2, !tbaa !44
  %1678 = add nuw i64 %1665, 64
  %1679 = icmp eq i64 %1678, %1663
  br i1 %1679, label %1680, label %1664, !llvm.loop !144

1680:                                             ; preds = %1664
  %1681 = icmp eq i64 %1662, 0
  br i1 %1681, label %1735, label %1682

1682:                                             ; preds = %1680
  %1683 = icmp ult i64 %1662, 8
  br i1 %1683, label %1697, label %1684

1684:                                             ; preds = %1659, %1682
  %1685 = phi i64 [ %1663, %1682 ], [ 0, %1659 ]
  %1686 = and i64 %1645, 7
  %1687 = sub nsw i64 %1652, %1686
  br label %1688

1688:                                             ; preds = %1688, %1684
  %1689 = phi i64 [ %1685, %1684 ], [ %1693, %1688 ]
  %1690 = getelementptr inbounds i16, ptr %375, i64 %1689
  %1691 = load <8 x i16>, ptr %1690, align 2, !tbaa !44
  %1692 = getelementptr inbounds i16, ptr %1649, i64 %1689
  store <8 x i16> %1691, ptr %1692, align 2, !tbaa !44
  %1693 = add nuw i64 %1689, 8
  %1694 = icmp eq i64 %1693, %1687
  br i1 %1694, label %1695, label %1688, !llvm.loop !145

1695:                                             ; preds = %1688
  %1696 = icmp eq i64 %1686, 0
  br i1 %1696, label %1735, label %1697

1697:                                             ; preds = %1654, %1651, %1682, %1695
  %1698 = phi i64 [ 0, %1651 ], [ 0, %1654 ], [ %1663, %1682 ], [ %1687, %1695 ]
  %1699 = sub i64 %1645, %1698
  %1700 = xor i64 %1698, -1
  %1701 = add nsw i64 %1652, %1700
  %1702 = and i64 %1699, 3
  %1703 = icmp eq i64 %1702, 0
  br i1 %1703, label %1713, label %1704

1704:                                             ; preds = %1697, %1704
  %1705 = phi i64 [ %1710, %1704 ], [ %1698, %1697 ]
  %1706 = phi i64 [ %1711, %1704 ], [ 0, %1697 ]
  %1707 = getelementptr inbounds i16, ptr %375, i64 %1705
  %1708 = load i16, ptr %1707, align 2, !tbaa !44
  %1709 = getelementptr inbounds i16, ptr %1649, i64 %1705
  store i16 %1708, ptr %1709, align 2, !tbaa !44
  %1710 = add nuw nsw i64 %1705, 1
  %1711 = add i64 %1706, 1
  %1712 = icmp eq i64 %1711, %1702
  br i1 %1712, label %1713, label %1704, !llvm.loop !146

1713:                                             ; preds = %1704, %1697
  %1714 = phi i64 [ %1698, %1697 ], [ %1710, %1704 ]
  %1715 = icmp ult i64 %1701, 3
  br i1 %1715, label %1735, label %1716

1716:                                             ; preds = %1713, %1716
  %1717 = phi i64 [ %1733, %1716 ], [ %1714, %1713 ]
  %1718 = getelementptr inbounds i16, ptr %375, i64 %1717
  %1719 = load i16, ptr %1718, align 2, !tbaa !44
  %1720 = getelementptr inbounds i16, ptr %1649, i64 %1717
  store i16 %1719, ptr %1720, align 2, !tbaa !44
  %1721 = add nuw nsw i64 %1717, 1
  %1722 = getelementptr inbounds i16, ptr %375, i64 %1721
  %1723 = load i16, ptr %1722, align 2, !tbaa !44
  %1724 = getelementptr inbounds i16, ptr %1649, i64 %1721
  store i16 %1723, ptr %1724, align 2, !tbaa !44
  %1725 = add nuw nsw i64 %1717, 2
  %1726 = getelementptr inbounds i16, ptr %375, i64 %1725
  %1727 = load i16, ptr %1726, align 2, !tbaa !44
  %1728 = getelementptr inbounds i16, ptr %1649, i64 %1725
  store i16 %1727, ptr %1728, align 2, !tbaa !44
  %1729 = add nuw nsw i64 %1717, 3
  %1730 = getelementptr inbounds i16, ptr %375, i64 %1729
  %1731 = load i16, ptr %1730, align 2, !tbaa !44
  %1732 = getelementptr inbounds i16, ptr %1649, i64 %1729
  store i16 %1731, ptr %1732, align 2, !tbaa !44
  %1733 = add nuw nsw i64 %1717, 4
  %1734 = icmp eq i64 %1733, %1652
  br i1 %1734, label %1735, label %1716, !llvm.loop !147

1735:                                             ; preds = %1713, %1716, %1680, %1695
  %1736 = shl i64 %1644, 31
  %1737 = add i64 %1736, -4294967296
  %1738 = ashr i64 %1737, 32
  %1739 = getelementptr inbounds i16, ptr %1649, i64 %1738
  %1740 = load i16, ptr %1739, align 2, !tbaa !44
  br label %1741

1741:                                             ; preds = %1632, %1735
  %1742 = phi i64 [ %1645, %1735 ], [ 0, %1632 ]
  %1743 = phi i16 [ %1740, %1735 ], [ -1, %1632 ]
  %1744 = and i64 %1742, 4294967295
  %1745 = getelementptr inbounds i16, ptr %1649, i64 %1744
  store i16 %1743, ptr %1745, align 2, !tbaa !44
  %1746 = trunc i64 %1645 to i16
  %1747 = add i16 %1746, 1
  %1748 = sext i32 %1642 to i64
  %1749 = getelementptr inbounds i16, ptr %1176, i64 %1748
  store i16 %1747, ptr %1749, align 2, !tbaa !44
  %1750 = add i32 %1646, 3
  %1751 = add i32 %1750, %1642
  %1752 = select i1 %142, i32 1, i32 %1751
  store i32 %1752, ptr %13, align 8, !tbaa !17
  br label %1788

1753:                                             ; preds = %673
  %1754 = load <2 x double>, ptr %686, align 8, !tbaa !19
  %1755 = fadd <2 x double> %15, %1754
  %1756 = getelementptr inbounds %class.Vector, ptr %686, i64 0, i32 2
  %1757 = load double, ptr %1756, align 8, !tbaa !49
  %1758 = fadd double %17, %1757
  %1759 = load ptr, ptr %8, align 8, !tbaa !46
  %1760 = load i32, ptr %13, align 8, !tbaa !17
  %1761 = add i32 %1760, 1
  %1762 = sext i32 %1761 to i64
  %1763 = getelementptr inbounds i16, ptr %1759, i64 %1762
  %1764 = sext i32 %1760 to i64
  %1765 = getelementptr inbounds i16, ptr %1759, i64 %1764
  %1766 = load i16, ptr %1765, align 2, !tbaa !44
  %1767 = zext i16 %1766 to i32
  %1768 = add i32 %1761, %1767
  %1769 = add nsw i32 %1767, -1
  %1770 = add i32 %1768, 1
  %1771 = sext i32 %1770 to i64
  %1772 = getelementptr inbounds i16, ptr %1759, i64 %1771
  %1773 = sext i32 %1768 to i64
  %1774 = getelementptr inbounds i16, ptr %1759, i64 %1773
  %1775 = load i16, ptr %1774, align 2, !tbaa !44
  %1776 = zext i16 %1775 to i32
  %1777 = add i32 %1770, %1776
  %1778 = add nsw i32 %1776, -1
  %1779 = add i32 %1777, 1
  %1780 = sext i32 %1779 to i64
  %1781 = getelementptr inbounds i16, ptr %1759, i64 %1780
  %1782 = sext i32 %1777 to i64
  %1783 = getelementptr inbounds i16, ptr %1759, i64 %1782
  %1784 = load i16, ptr %1783, align 2, !tbaa !44
  %1785 = zext i16 %1784 to i32
  %1786 = add i32 %1779, %1785
  store i32 %1786, ptr %13, align 8, !tbaa !17
  %1787 = add nsw i32 %1785, -1
  br label %1788

1788:                                             ; preds = %1741, %1753
  %1789 = phi double [ %1758, %1753 ], [ %706, %1741 ]
  %1790 = phi i32 [ %680, %1753 ], [ %701, %1741 ]
  %1791 = phi ptr [ %1763, %1753 ], [ %1180, %1741 ]
  %1792 = phi i32 [ %1769, %1753 ], [ %1516, %1741 ]
  %1793 = phi ptr [ %1772, %1753 ], [ %1540, %1741 ]
  %1794 = phi i32 [ %1778, %1753 ], [ %1537, %1741 ]
  %1795 = phi ptr [ %1781, %1753 ], [ %1649, %1741 ]
  %1796 = phi i32 [ %1787, %1753 ], [ %1646, %1741 ]
  %1797 = phi i32 [ %679, %1753 ], [ %1141, %1741 ]
  %1798 = phi ptr [ %678, %1753 ], [ %951, %1741 ]
  %1799 = phi ptr [ %677, %1753 ], [ %952, %1741 ]
  %1800 = phi ptr [ %676, %1753 ], [ %953, %1741 ]
  %1801 = phi <2 x double> [ %1755, %1753 ], [ %703, %1741 ]
  %1802 = getelementptr inbounds %struct.CompAtom, ptr %39, i64 %685, i32 1
  %1803 = load float, ptr %1802, align 8, !tbaa !79
  %1804 = fpext float %1803 to double
  %1805 = fmul double %1804, 0x4074C104816F0069
  %1806 = fmul double %28, %1805
  %1807 = fmul double %24, %1806
  %1808 = getelementptr inbounds %struct.CompAtom, ptr %39, i64 %685, i32 2
  %1809 = load i16, ptr %1808, align 4, !tbaa !80
  %1810 = sext i16 %1809 to i32
  %1811 = load ptr, ptr %667, align 8, !tbaa !81
  %1812 = load i32, ptr %668, align 8, !tbaa !83
  %1813 = shl nsw i32 %1810, 1
  %1814 = mul i32 %1813, %1812
  %1815 = zext i32 %1814 to i64
  %1816 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %1811, i64 %1815
  %1817 = load double, ptr @_ZN20ComputeNonbondedUtil7cutoff2E, align 8, !tbaa !19
  %1818 = extractelement <2 x double> %1801, i64 0
  %1819 = extractelement <2 x double> %1801, i64 1
  %1820 = tail call noundef i32 @_Z22pairlist_from_pairlistddddPK8CompAtomPKtiPtdPd(double noundef %1817, double noundef %1818, double noundef %1819, double noundef %1789, ptr noundef %41, ptr noundef nonnull %1791, i32 noundef %1792, ptr noundef %94, double noundef %31, ptr noundef %140)
  %1821 = icmp sgt i32 %1820, 0
  br i1 %1821, label %1822, label %1956

1822:                                             ; preds = %1788
  %1823 = load ptr, ptr @_ZN20ComputeNonbondedUtil8r2_tableE, align 8, !tbaa !23
  %1824 = zext i32 %1820 to i64
  br label %1825

1825:                                             ; preds = %1822, %1825
  %1826 = phi i64 [ 0, %1822 ], [ %1954, %1825 ]
  %1827 = phi double [ 0.000000e+00, %1822 ], [ %1950, %1825 ]
  %1828 = phi <2 x double> [ %681, %1822 ], [ %1942, %1825 ]
  %1829 = phi <2 x double> [ %682, %1822 ], [ %1935, %1825 ]
  %1830 = phi <2 x double> [ %683, %1822 ], [ %1948, %1825 ]
  %1831 = phi <2 x double> [ zeroinitializer, %1822 ], [ %1944, %1825 ]
  %1832 = phi <2 x double> [ %684, %1822 ], [ %1923, %1825 ]
  %1833 = shl nuw nsw i64 %1826, 1
  %1834 = getelementptr inbounds i32, ptr %141, i64 %1833
  %1835 = load i32, ptr %1834, align 4, !tbaa !5
  %1836 = ashr i32 %1835, 14
  %1837 = add nsw i32 %1836, %34
  %1838 = getelementptr inbounds i16, ptr %94, i64 %1826
  %1839 = load i16, ptr %1838, align 2, !tbaa !44
  %1840 = zext i16 %1839 to i64
  %1841 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %1840
  %1842 = getelementptr inbounds double, ptr %140, i64 %1826
  %1843 = load double, ptr %1842, align 8, !tbaa !19
  %1844 = sext i32 %1837 to i64
  %1845 = getelementptr inbounds double, ptr %1823, i64 %1844
  %1846 = load double, ptr %1845, align 8, !tbaa !19
  %1847 = fsub double %1843, %1846
  %1848 = shl nsw i32 %1837, 4
  %1849 = sext i32 %1848 to i64
  %1850 = getelementptr inbounds double, ptr %27, i64 %1849
  %1851 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %1840, i32 2
  %1852 = load i16, ptr %1851, align 4, !tbaa !80
  %1853 = sext i16 %1852 to i32
  %1854 = shl nsw i32 %1853, 1
  %1855 = sext i32 %1854 to i64
  %1856 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %1816, i64 %1855
  %1857 = getelementptr inbounds %class.Vector, ptr %648, i64 %1840
  %1858 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %1840, i32 1
  %1859 = load float, ptr %1858, align 8, !tbaa !79
  %1860 = fpext float %1859 to double
  %1861 = fmul double %1807, %1860
  %1862 = load <2 x double>, ptr %1841, align 8, !tbaa !19
  %1863 = fsub <2 x double> %1801, %1862
  %1864 = getelementptr inbounds %class.Vector, ptr %1841, i64 0, i32 2
  %1865 = load double, ptr %1864, align 8, !tbaa !49
  %1866 = fsub double %1789, %1865
  %1867 = load double, ptr %1856, align 8, !tbaa !84
  %1868 = fmul double %28, %1867
  %1869 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %1816, i64 %1855, i32 1
  %1870 = load double, ptr %1869, align 8, !tbaa !86
  %1871 = load double, ptr %1850, align 8, !tbaa !19
  %1872 = getelementptr inbounds double, ptr %1850, i64 2
  %1873 = load double, ptr %1872, align 8, !tbaa !19
  %1874 = fmul double %1870, %669
  %1875 = fmul double %1874, %1873
  %1876 = tail call double @llvm.fmuladd.f64(double %1868, double %1871, double %1875)
  %1877 = getelementptr inbounds double, ptr %1850, i64 1
  %1878 = load double, ptr %1877, align 8, !tbaa !19
  %1879 = getelementptr inbounds double, ptr %1850, i64 3
  %1880 = load double, ptr %1879, align 8, !tbaa !19
  %1881 = fmul double %1874, %1880
  %1882 = tail call double @llvm.fmuladd.f64(double %1868, double %1878, double %1881)
  %1883 = getelementptr inbounds double, ptr %1850, i64 4
  %1884 = load double, ptr %1883, align 8, !tbaa !19
  %1885 = getelementptr inbounds double, ptr %1850, i64 6
  %1886 = load double, ptr %1885, align 8, !tbaa !19
  %1887 = fmul double %1874, %1886
  %1888 = tail call double @llvm.fmuladd.f64(double %1868, double %1884, double %1887)
  %1889 = getelementptr inbounds double, ptr %1850, i64 5
  %1890 = load double, ptr %1889, align 8, !tbaa !19
  %1891 = getelementptr inbounds double, ptr %1850, i64 7
  %1892 = load double, ptr %1891, align 8, !tbaa !19
  %1893 = fmul double %1874, %1892
  %1894 = tail call double @llvm.fmuladd.f64(double %1868, double %1890, double %1893)
  %1895 = getelementptr inbounds double, ptr %1850, i64 8
  %1896 = load double, ptr %1895, align 8, !tbaa !19
  %1897 = getelementptr inbounds double, ptr %1850, i64 9
  %1898 = load double, ptr %1897, align 8, !tbaa !19
  %1899 = getelementptr inbounds double, ptr %1850, i64 10
  %1900 = load double, ptr %1899, align 8, !tbaa !19
  %1901 = getelementptr inbounds double, ptr %1850, i64 11
  %1902 = load double, ptr %1901, align 8, !tbaa !19
  %1903 = fmul double %1861, %1896
  %1904 = fmul double %1861, %1898
  %1905 = fmul double %1861, %1900
  %1906 = fmul double %1861, %1902
  %1907 = insertelement <2 x double> poison, double %1847, i64 0
  %1908 = shufflevector <2 x double> %1907, <2 x double> poison, <2 x i32> zeroinitializer
  %1909 = insertelement <2 x double> poison, double %1876, i64 0
  %1910 = insertelement <2 x double> %1909, double %1903, i64 1
  %1911 = fmul <2 x double> %1908, %1910
  %1912 = insertelement <2 x double> poison, double %1882, i64 0
  %1913 = insertelement <2 x double> %1912, double %1904, i64 1
  %1914 = fmul <2 x double> %1913, <double 2.500000e-01, double 2.500000e-01>
  %1915 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %1911, <2 x double> <double 0x3FC5555555555555, double 0x3FC5555555555555>, <2 x double> %1914)
  %1916 = insertelement <2 x double> poison, double %1888, i64 0
  %1917 = insertelement <2 x double> %1916, double %1905, i64 1
  %1918 = fmul <2 x double> %1917, <double 5.000000e-01, double 5.000000e-01>
  %1919 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %1915, <2 x double> %1908, <2 x double> %1918)
  %1920 = insertelement <2 x double> poison, double %1894, i64 0
  %1921 = insertelement <2 x double> %1920, double %1906, i64 1
  %1922 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %1919, <2 x double> %1908, <2 x double> %1921)
  %1923 = fsub <2 x double> %1832, %1922
  %1924 = fadd double %1876, %1903
  %1925 = fadd double %1882, %1904
  %1926 = fadd double %1888, %1905
  %1927 = tail call double @llvm.fmuladd.f64(double %1847, double %1924, double %1925)
  %1928 = tail call double @llvm.fmuladd.f64(double %1927, double %1847, double %1926)
  %1929 = extractelement <2 x double> %1863, i64 1
  %1930 = fmul double %1929, %1928
  %1931 = insertelement <2 x double> poison, double %1930, i64 0
  %1932 = shufflevector <2 x double> %1931, <2 x double> poison, <2 x i32> zeroinitializer
  %1933 = shufflevector <2 x double> %1863, <2 x double> poison, <2 x i32> <i32 1, i32 0>
  %1934 = insertelement <2 x double> %1933, double %1866, i64 1
  %1935 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %1932, <2 x double> %1934, <2 x double> %1829)
  %1936 = insertelement <2 x double> %1933, double %1866, i64 0
  %1937 = insertelement <2 x double> poison, double %1928, i64 0
  %1938 = shufflevector <2 x double> %1937, <2 x double> poison, <2 x i32> zeroinitializer
  %1939 = fmul <2 x double> %1936, %1938
  %1940 = shufflevector <2 x double> %1939, <2 x double> poison, <2 x i32> <i32 1, i32 poison>
  %1941 = shufflevector <2 x double> %1939, <2 x double> poison, <2 x i32> <i32 1, i32 1>
  %1942 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %1941, <2 x double> %1863, <2 x double> %1828)
  %1943 = insertelement <2 x double> %1940, double %1930, i64 1
  %1944 = fadd <2 x double> %1831, %1943
  %1945 = load <2 x double>, ptr %1857, align 8, !tbaa !19
  %1946 = fsub <2 x double> %1945, %1943
  store <2 x double> %1946, ptr %1857, align 8, !tbaa !19
  %1947 = shufflevector <2 x double> %1936, <2 x double> poison, <2 x i32> zeroinitializer
  %1948 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %1939, <2 x double> %1947, <2 x double> %1830)
  %1949 = extractelement <2 x double> %1939, i64 0
  %1950 = fadd double %1827, %1949
  %1951 = getelementptr inbounds %class.Vector, ptr %648, i64 %1840, i32 2
  %1952 = load double, ptr %1951, align 8, !tbaa !87
  %1953 = fsub double %1952, %1949
  store double %1953, ptr %1951, align 8, !tbaa !87
  %1954 = add nuw nsw i64 %1826, 1
  %1955 = icmp eq i64 %1954, %1824
  br i1 %1955, label %1956, label %1825

1956:                                             ; preds = %1825, %1788
  %1957 = phi double [ 0.000000e+00, %1788 ], [ %1950, %1825 ]
  %1958 = phi <2 x double> [ %681, %1788 ], [ %1942, %1825 ]
  %1959 = phi <2 x double> [ %682, %1788 ], [ %1935, %1825 ]
  %1960 = phi <2 x double> [ %683, %1788 ], [ %1948, %1825 ]
  %1961 = phi <2 x double> [ zeroinitializer, %1788 ], [ %1944, %1825 ]
  %1962 = phi <2 x double> [ %684, %1788 ], [ %1923, %1825 ]
  %1963 = load double, ptr @_ZN20ComputeNonbondedUtil7cutoff2E, align 8, !tbaa !19
  %1964 = tail call noundef i32 @_Z22pairlist_from_pairlistddddPK8CompAtomPKtiPtdPd(double noundef %1963, double noundef %1818, double noundef %1819, double noundef %1789, ptr noundef %41, ptr noundef %1795, i32 noundef %1796, ptr noundef %94, double noundef %31, ptr noundef %140)
  %1965 = add nsw i32 %1964, %674
  %1966 = icmp sgt i32 %1964, 0
  br i1 %1966, label %1967, label %2114

1967:                                             ; preds = %1956
  %1968 = load ptr, ptr @_ZN20ComputeNonbondedUtil8r2_tableE, align 8, !tbaa !23
  %1969 = zext i32 %1964 to i64
  br label %1970

1970:                                             ; preds = %1967, %1970
  %1971 = phi i64 [ 0, %1967 ], [ %2112, %1970 ]
  %1972 = phi double [ %1957, %1967 ], [ %2108, %1970 ]
  %1973 = phi <2 x double> [ %1958, %1967 ], [ %2100, %1970 ]
  %1974 = phi <2 x double> [ %1959, %1967 ], [ %2093, %1970 ]
  %1975 = phi <2 x double> [ %1960, %1967 ], [ %2106, %1970 ]
  %1976 = phi <2 x double> [ %1961, %1967 ], [ %2102, %1970 ]
  %1977 = phi <2 x double> [ %1962, %1967 ], [ %2081, %1970 ]
  %1978 = shl nuw nsw i64 %1971, 1
  %1979 = getelementptr inbounds i32, ptr %141, i64 %1978
  %1980 = load i32, ptr %1979, align 4, !tbaa !5
  %1981 = ashr i32 %1980, 14
  %1982 = add nsw i32 %1981, %34
  %1983 = getelementptr inbounds i16, ptr %94, i64 %1971
  %1984 = load i16, ptr %1983, align 2, !tbaa !44
  %1985 = zext i16 %1984 to i64
  %1986 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %1985
  %1987 = getelementptr inbounds double, ptr %140, i64 %1971
  %1988 = load double, ptr %1987, align 8, !tbaa !19
  %1989 = sext i32 %1982 to i64
  %1990 = getelementptr inbounds double, ptr %1968, i64 %1989
  %1991 = load double, ptr %1990, align 8, !tbaa !19
  %1992 = fsub double %1988, %1991
  %1993 = shl nsw i32 %1982, 4
  %1994 = sext i32 %1993 to i64
  %1995 = getelementptr inbounds double, ptr %27, i64 %1994
  %1996 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %1985, i32 2
  %1997 = load i16, ptr %1996, align 4, !tbaa !80
  %1998 = sext i16 %1997 to i32
  %1999 = shl nsw i32 %1998, 1
  %2000 = sext i32 %1999 to i64
  %2001 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %1816, i64 %2000
  %2002 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %2001, i64 1
  %2003 = getelementptr inbounds %class.Vector, ptr %648, i64 %1985
  %2004 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %1985, i32 1
  %2005 = load float, ptr %2004, align 8, !tbaa !79
  %2006 = fpext float %2005 to double
  %2007 = fmul double %1807, %2006
  %2008 = load <2 x double>, ptr %1986, align 8, !tbaa !19
  %2009 = fsub <2 x double> %1801, %2008
  %2010 = getelementptr inbounds %class.Vector, ptr %1986, i64 0, i32 2
  %2011 = load double, ptr %2010, align 8, !tbaa !49
  %2012 = fsub double %1789, %2011
  %2013 = load double, ptr %2002, align 8, !tbaa !84
  %2014 = fmul double %28, %2013
  %2015 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %2001, i64 1, i32 1
  %2016 = load double, ptr %2015, align 8, !tbaa !86
  %2017 = load double, ptr %1995, align 8, !tbaa !19
  %2018 = getelementptr inbounds double, ptr %1995, i64 2
  %2019 = load double, ptr %2018, align 8, !tbaa !19
  %2020 = fmul double %2016, %669
  %2021 = fmul double %2020, %2019
  %2022 = tail call double @llvm.fmuladd.f64(double %2014, double %2017, double %2021)
  %2023 = getelementptr inbounds double, ptr %1995, i64 1
  %2024 = load double, ptr %2023, align 8, !tbaa !19
  %2025 = getelementptr inbounds double, ptr %1995, i64 3
  %2026 = load double, ptr %2025, align 8, !tbaa !19
  %2027 = fmul double %2020, %2026
  %2028 = tail call double @llvm.fmuladd.f64(double %2014, double %2024, double %2027)
  %2029 = getelementptr inbounds double, ptr %1995, i64 4
  %2030 = load double, ptr %2029, align 8, !tbaa !19
  %2031 = getelementptr inbounds double, ptr %1995, i64 6
  %2032 = load double, ptr %2031, align 8, !tbaa !19
  %2033 = fmul double %2020, %2032
  %2034 = tail call double @llvm.fmuladd.f64(double %2014, double %2030, double %2033)
  %2035 = getelementptr inbounds double, ptr %1995, i64 5
  %2036 = load double, ptr %2035, align 8, !tbaa !19
  %2037 = getelementptr inbounds double, ptr %1995, i64 7
  %2038 = load double, ptr %2037, align 8, !tbaa !19
  %2039 = fmul double %2020, %2038
  %2040 = tail call double @llvm.fmuladd.f64(double %2014, double %2036, double %2039)
  %2041 = getelementptr inbounds double, ptr %1995, i64 8
  %2042 = load double, ptr %2041, align 8, !tbaa !19
  %2043 = getelementptr inbounds double, ptr %1995, i64 9
  %2044 = load double, ptr %2043, align 8, !tbaa !19
  %2045 = getelementptr inbounds double, ptr %1995, i64 10
  %2046 = load double, ptr %2045, align 8, !tbaa !19
  %2047 = getelementptr inbounds double, ptr %1995, i64 11
  %2048 = load double, ptr %2047, align 8, !tbaa !19
  %2049 = getelementptr inbounds double, ptr %1995, i64 12
  %2050 = load double, ptr %2049, align 8, !tbaa !19
  %2051 = tail call double @llvm.fmuladd.f64(double %670, double %2050, double %2042)
  %2052 = getelementptr inbounds double, ptr %1995, i64 13
  %2053 = load double, ptr %2052, align 8, !tbaa !19
  %2054 = tail call double @llvm.fmuladd.f64(double %670, double %2053, double %2044)
  %2055 = getelementptr inbounds double, ptr %1995, i64 14
  %2056 = load double, ptr %2055, align 8, !tbaa !19
  %2057 = tail call double @llvm.fmuladd.f64(double %670, double %2056, double %2046)
  %2058 = getelementptr inbounds double, ptr %1995, i64 15
  %2059 = load double, ptr %2058, align 8, !tbaa !19
  %2060 = tail call double @llvm.fmuladd.f64(double %670, double %2059, double %2048)
  %2061 = fmul double %2007, %2051
  %2062 = fmul double %2007, %2054
  %2063 = fmul double %2007, %2057
  %2064 = fmul double %2007, %2060
  %2065 = insertelement <2 x double> poison, double %1992, i64 0
  %2066 = shufflevector <2 x double> %2065, <2 x double> poison, <2 x i32> zeroinitializer
  %2067 = insertelement <2 x double> poison, double %2022, i64 0
  %2068 = insertelement <2 x double> %2067, double %2061, i64 1
  %2069 = fmul <2 x double> %2066, %2068
  %2070 = insertelement <2 x double> poison, double %2028, i64 0
  %2071 = insertelement <2 x double> %2070, double %2062, i64 1
  %2072 = fmul <2 x double> %2071, <double 2.500000e-01, double 2.500000e-01>
  %2073 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2069, <2 x double> <double 0x3FC5555555555555, double 0x3FC5555555555555>, <2 x double> %2072)
  %2074 = insertelement <2 x double> poison, double %2034, i64 0
  %2075 = insertelement <2 x double> %2074, double %2063, i64 1
  %2076 = fmul <2 x double> %2075, <double 5.000000e-01, double 5.000000e-01>
  %2077 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2073, <2 x double> %2066, <2 x double> %2076)
  %2078 = insertelement <2 x double> poison, double %2040, i64 0
  %2079 = insertelement <2 x double> %2078, double %2064, i64 1
  %2080 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2077, <2 x double> %2066, <2 x double> %2079)
  %2081 = fsub <2 x double> %1977, %2080
  %2082 = fadd double %2022, %2061
  %2083 = fadd double %2028, %2062
  %2084 = fadd double %2034, %2063
  %2085 = tail call double @llvm.fmuladd.f64(double %1992, double %2082, double %2083)
  %2086 = tail call double @llvm.fmuladd.f64(double %2085, double %1992, double %2084)
  %2087 = extractelement <2 x double> %2009, i64 1
  %2088 = fmul double %2087, %2086
  %2089 = insertelement <2 x double> poison, double %2088, i64 0
  %2090 = shufflevector <2 x double> %2089, <2 x double> poison, <2 x i32> zeroinitializer
  %2091 = shufflevector <2 x double> %2009, <2 x double> poison, <2 x i32> <i32 1, i32 0>
  %2092 = insertelement <2 x double> %2091, double %2012, i64 1
  %2093 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2090, <2 x double> %2092, <2 x double> %1974)
  %2094 = insertelement <2 x double> %2091, double %2012, i64 0
  %2095 = insertelement <2 x double> poison, double %2086, i64 0
  %2096 = shufflevector <2 x double> %2095, <2 x double> poison, <2 x i32> zeroinitializer
  %2097 = fmul <2 x double> %2094, %2096
  %2098 = shufflevector <2 x double> %2097, <2 x double> poison, <2 x i32> <i32 1, i32 poison>
  %2099 = shufflevector <2 x double> %2097, <2 x double> poison, <2 x i32> <i32 1, i32 1>
  %2100 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2099, <2 x double> %2009, <2 x double> %1973)
  %2101 = insertelement <2 x double> %2098, double %2088, i64 1
  %2102 = fadd <2 x double> %1976, %2101
  %2103 = load <2 x double>, ptr %2003, align 8, !tbaa !19
  %2104 = fsub <2 x double> %2103, %2101
  store <2 x double> %2104, ptr %2003, align 8, !tbaa !19
  %2105 = shufflevector <2 x double> %2094, <2 x double> poison, <2 x i32> zeroinitializer
  %2106 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2097, <2 x double> %2105, <2 x double> %1975)
  %2107 = extractelement <2 x double> %2097, i64 0
  %2108 = fadd double %1972, %2107
  %2109 = getelementptr inbounds %class.Vector, ptr %648, i64 %1985, i32 2
  %2110 = load double, ptr %2109, align 8, !tbaa !87
  %2111 = fsub double %2110, %2107
  store double %2111, ptr %2109, align 8, !tbaa !87
  %2112 = add nuw nsw i64 %1971, 1
  %2113 = icmp eq i64 %2112, %1969
  br i1 %2113, label %2114, label %1970

2114:                                             ; preds = %1970, %1956
  %2115 = phi double [ %1957, %1956 ], [ %2108, %1970 ]
  %2116 = phi <2 x double> [ %1958, %1956 ], [ %2100, %1970 ]
  %2117 = phi <2 x double> [ %1959, %1956 ], [ %2093, %1970 ]
  %2118 = phi <2 x double> [ %1960, %1956 ], [ %2106, %1970 ]
  %2119 = phi <2 x double> [ %1961, %1956 ], [ %2102, %1970 ]
  %2120 = phi <2 x double> [ %1962, %1956 ], [ %2081, %1970 ]
  %2121 = load double, ptr @_ZN20ComputeNonbondedUtil7cutoff2E, align 8, !tbaa !19
  %2122 = tail call noundef i32 @_Z22pairlist_from_pairlistddddPK8CompAtomPKtiPtdPd(double noundef %2121, double noundef %1818, double noundef %1819, double noundef %1789, ptr noundef %41, ptr noundef %1793, i32 noundef %1794, ptr noundef %94, double noundef %31, ptr noundef %140)
  %2123 = add nsw i32 %1965, %2122
  %2124 = icmp sgt i32 %2122, 0
  %2125 = extractelement <2 x double> %2120, i64 1
  br i1 %2124, label %2126, label %2225

2126:                                             ; preds = %2114
  %2127 = load ptr, ptr @_ZN20ComputeNonbondedUtil8r2_tableE, align 8, !tbaa !23
  %2128 = zext i32 %2122 to i64
  br label %2129

2129:                                             ; preds = %2126, %2129
  %2130 = phi i64 [ 0, %2126 ], [ %2223, %2129 ]
  %2131 = phi double [ %2125, %2126 ], [ %2195, %2129 ]
  %2132 = phi double [ %2115, %2126 ], [ %2219, %2129 ]
  %2133 = phi <2 x double> [ %2116, %2126 ], [ %2211, %2129 ]
  %2134 = phi <2 x double> [ %2117, %2126 ], [ %2204, %2129 ]
  %2135 = phi <2 x double> [ %2118, %2126 ], [ %2217, %2129 ]
  %2136 = phi <2 x double> [ %2119, %2126 ], [ %2213, %2129 ]
  %2137 = shl nuw nsw i64 %2130, 1
  %2138 = getelementptr inbounds i32, ptr %141, i64 %2137
  %2139 = load i32, ptr %2138, align 4, !tbaa !5
  %2140 = ashr i32 %2139, 14
  %2141 = add nsw i32 %2140, %34
  %2142 = getelementptr inbounds i16, ptr %94, i64 %2130
  %2143 = load i16, ptr %2142, align 2, !tbaa !44
  %2144 = zext i16 %2143 to i64
  %2145 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %2144
  %2146 = getelementptr inbounds double, ptr %140, i64 %2130
  %2147 = load double, ptr %2146, align 8, !tbaa !19
  %2148 = sext i32 %2141 to i64
  %2149 = getelementptr inbounds double, ptr %2127, i64 %2148
  %2150 = load double, ptr %2149, align 8, !tbaa !19
  %2151 = fsub double %2147, %2150
  %2152 = shl nsw i32 %2141, 4
  %2153 = sext i32 %2152 to i64
  %2154 = getelementptr inbounds double, ptr %27, i64 %2153
  %2155 = getelementptr inbounds %class.Vector, ptr %648, i64 %2144
  %2156 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %2144, i32 1
  %2157 = load float, ptr %2156, align 8, !tbaa !79
  %2158 = fpext float %2157 to double
  %2159 = fmul double %1807, %2158
  %2160 = load <2 x double>, ptr %2145, align 8, !tbaa !19
  %2161 = fsub <2 x double> %1801, %2160
  %2162 = getelementptr inbounds %class.Vector, ptr %2145, i64 0, i32 2
  %2163 = load double, ptr %2162, align 8, !tbaa !49
  %2164 = fsub double %1789, %2163
  %2165 = getelementptr inbounds double, ptr %2154, i64 8
  %2166 = load double, ptr %2165, align 8, !tbaa !19
  %2167 = getelementptr inbounds double, ptr %2154, i64 9
  %2168 = load double, ptr %2167, align 8, !tbaa !19
  %2169 = getelementptr inbounds double, ptr %2154, i64 10
  %2170 = load double, ptr %2169, align 8, !tbaa !19
  %2171 = getelementptr inbounds double, ptr %2154, i64 11
  %2172 = load double, ptr %2171, align 8, !tbaa !19
  %2173 = getelementptr inbounds double, ptr %2154, i64 12
  %2174 = load double, ptr %2173, align 8, !tbaa !19
  %2175 = fsub double %2166, %2174
  %2176 = getelementptr inbounds double, ptr %2154, i64 13
  %2177 = load double, ptr %2176, align 8, !tbaa !19
  %2178 = fsub double %2168, %2177
  %2179 = getelementptr inbounds double, ptr %2154, i64 14
  %2180 = load double, ptr %2179, align 8, !tbaa !19
  %2181 = fsub double %2170, %2180
  %2182 = getelementptr inbounds double, ptr %2154, i64 15
  %2183 = load double, ptr %2182, align 8, !tbaa !19
  %2184 = fsub double %2172, %2183
  %2185 = fmul double %2159, %2175
  %2186 = fmul double %2159, %2178
  %2187 = fmul double %2159, %2181
  %2188 = fmul double %2159, %2184
  %2189 = fmul double %2151, %2185
  %2190 = fmul double %2186, 2.500000e-01
  %2191 = tail call double @llvm.fmuladd.f64(double %2189, double 0x3FC5555555555555, double %2190)
  %2192 = fmul double %2187, 5.000000e-01
  %2193 = tail call double @llvm.fmuladd.f64(double %2191, double %2151, double %2192)
  %2194 = tail call double @llvm.fmuladd.f64(double %2193, double %2151, double %2188)
  %2195 = fsub double %2131, %2194
  %2196 = tail call double @llvm.fmuladd.f64(double %2151, double %2185, double %2186)
  %2197 = tail call double @llvm.fmuladd.f64(double %2196, double %2151, double %2187)
  %2198 = extractelement <2 x double> %2161, i64 1
  %2199 = fmul double %2198, %2197
  %2200 = insertelement <2 x double> poison, double %2199, i64 0
  %2201 = shufflevector <2 x double> %2200, <2 x double> poison, <2 x i32> zeroinitializer
  %2202 = shufflevector <2 x double> %2161, <2 x double> poison, <2 x i32> <i32 1, i32 0>
  %2203 = insertelement <2 x double> %2202, double %2164, i64 1
  %2204 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2201, <2 x double> %2203, <2 x double> %2134)
  %2205 = insertelement <2 x double> %2202, double %2164, i64 0
  %2206 = insertelement <2 x double> poison, double %2197, i64 0
  %2207 = shufflevector <2 x double> %2206, <2 x double> poison, <2 x i32> zeroinitializer
  %2208 = fmul <2 x double> %2205, %2207
  %2209 = shufflevector <2 x double> %2208, <2 x double> poison, <2 x i32> <i32 1, i32 poison>
  %2210 = shufflevector <2 x double> %2208, <2 x double> poison, <2 x i32> <i32 1, i32 1>
  %2211 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2210, <2 x double> %2161, <2 x double> %2133)
  %2212 = insertelement <2 x double> %2209, double %2199, i64 1
  %2213 = fadd <2 x double> %2136, %2212
  %2214 = load <2 x double>, ptr %2155, align 8, !tbaa !19
  %2215 = fsub <2 x double> %2214, %2212
  store <2 x double> %2215, ptr %2155, align 8, !tbaa !19
  %2216 = shufflevector <2 x double> %2205, <2 x double> poison, <2 x i32> zeroinitializer
  %2217 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2208, <2 x double> %2216, <2 x double> %2135)
  %2218 = extractelement <2 x double> %2208, i64 0
  %2219 = fadd double %2132, %2218
  %2220 = getelementptr inbounds %class.Vector, ptr %648, i64 %2144, i32 2
  %2221 = load double, ptr %2220, align 8, !tbaa !87
  %2222 = fsub double %2221, %2218
  store double %2222, ptr %2220, align 8, !tbaa !87
  %2223 = add nuw nsw i64 %2130, 1
  %2224 = icmp eq i64 %2223, %2128
  br i1 %2224, label %2225, label %2129

2225:                                             ; preds = %2129, %2114
  %2226 = phi double [ %2115, %2114 ], [ %2219, %2129 ]
  %2227 = phi double [ %2125, %2114 ], [ %2195, %2129 ]
  %2228 = phi <2 x double> [ %2116, %2114 ], [ %2211, %2129 ]
  %2229 = phi <2 x double> [ %2117, %2114 ], [ %2204, %2129 ]
  %2230 = phi <2 x double> [ %2118, %2114 ], [ %2217, %2129 ]
  %2231 = phi <2 x double> [ %2119, %2114 ], [ %2213, %2129 ]
  %2232 = getelementptr inbounds %class.Vector, ptr %649, i64 %685
  %2233 = load <2 x double>, ptr %2232, align 8, !tbaa !19
  %2234 = fadd <2 x double> %2231, %2233
  store <2 x double> %2234, ptr %2232, align 8, !tbaa !19
  %2235 = getelementptr inbounds %class.Vector, ptr %649, i64 %685, i32 2
  %2236 = load double, ptr %2235, align 8, !tbaa !87
  %2237 = fadd double %2226, %2236
  store double %2237, ptr %2235, align 8, !tbaa !87
  br i1 %144, label %2241, label %2238

2238:                                             ; preds = %2225
  %2239 = add nsw i32 %675, 1
  %2240 = insertelement <2 x double> %2120, double %2227, i64 1
  br label %2250

2241:                                             ; preds = %2225
  %2242 = load ptr, ptr %8, align 8, !tbaa !46
  %2243 = load i32, ptr %13, align 8, !tbaa !17
  %2244 = add nsw i32 %2243, 1
  store i32 %2244, ptr %13, align 8, !tbaa !17
  %2245 = sext i32 %2243 to i64
  %2246 = getelementptr inbounds i16, ptr %2242, i64 %2245
  %2247 = load i16, ptr %2246, align 2, !tbaa !44
  %2248 = zext i16 %2247 to i32
  %2249 = insertelement <2 x double> %2120, double %2227, i64 1
  br label %2250

2250:                                             ; preds = %1127, %1395, %2241, %2238, %697
  %2251 = phi i32 [ %1790, %2241 ], [ %1790, %2238 ], [ %698, %697 ], [ %701, %1395 ], [ %701, %1127 ]
  %2252 = phi i32 [ %1797, %2241 ], [ %1797, %2238 ], [ %679, %697 ], [ %1141, %1395 ], [ 0, %1127 ]
  %2253 = phi ptr [ %1798, %2241 ], [ %1798, %2238 ], [ %678, %697 ], [ %951, %1395 ], [ %951, %1127 ]
  %2254 = phi ptr [ %1799, %2241 ], [ %1799, %2238 ], [ %677, %697 ], [ %952, %1395 ], [ %952, %1127 ]
  %2255 = phi ptr [ %1800, %2241 ], [ %1800, %2238 ], [ %676, %697 ], [ %953, %1395 ], [ %953, %1127 ]
  %2256 = phi i32 [ %2248, %2241 ], [ %2239, %2238 ], [ %699, %697 ], [ %1396, %1395 ], [ %1131, %1127 ]
  %2257 = phi i32 [ %2123, %2241 ], [ %2123, %2238 ], [ %674, %697 ], [ %674, %1395 ], [ %674, %1127 ]
  %2258 = phi <2 x double> [ %2228, %2241 ], [ %2228, %2238 ], [ %681, %697 ], [ %681, %1395 ], [ %681, %1127 ]
  %2259 = phi <2 x double> [ %2229, %2241 ], [ %2229, %2238 ], [ %682, %697 ], [ %682, %1395 ], [ %682, %1127 ]
  %2260 = phi <2 x double> [ %2230, %2241 ], [ %2230, %2238 ], [ %683, %697 ], [ %683, %1395 ], [ %683, %1127 ]
  %2261 = phi <2 x double> [ %2249, %2241 ], [ %2240, %2238 ], [ %684, %697 ], [ %684, %1395 ], [ %684, %1127 ]
  %2262 = icmp slt i32 %2256, %36
  br i1 %2262, label %673, label %2263

2263:                                             ; preds = %2250
  %2264 = extractelement <2 x double> %2261, i64 1
  %2265 = extractelement <2 x double> %2261, i64 0
  br label %2266

2266:                                             ; preds = %2263, %645
  %2267 = phi ptr [ null, %645 ], [ %2255, %2263 ]
  %2268 = phi i32 [ %652, %645 ], [ %2256, %2263 ]
  %2269 = phi double [ 0.000000e+00, %645 ], [ %2264, %2263 ]
  %2270 = phi double [ 0.000000e+00, %645 ], [ %2265, %2263 ]
  %2271 = phi i32 [ 0, %645 ], [ %2257, %2263 ]
  %2272 = phi <2 x double> [ zeroinitializer, %645 ], [ %2258, %2263 ]
  %2273 = phi <2 x double> [ zeroinitializer, %645 ], [ %2259, %2263 ]
  %2274 = phi <2 x double> [ zeroinitializer, %645 ], [ %2260, %2263 ]
  br i1 %142, label %2282, label %2275

2275:                                             ; preds = %2266
  %2276 = trunc i32 %2268 to i16
  %2277 = load ptr, ptr %8, align 8, !tbaa !46
  %2278 = load i32, ptr %13, align 8, !tbaa !17
  %2279 = add nsw i32 %2278, -1
  %2280 = sext i32 %2279 to i64
  %2281 = getelementptr inbounds i16, ptr %2277, i64 %2280
  store i16 %2276, ptr %2281, align 2, !tbaa !44
  br label %2282

2282:                                             ; preds = %2275, %2266
  %2283 = sitofp i32 %2271 to double
  %2284 = getelementptr inbounds double, ptr %6, i64 22
  %2285 = load double, ptr %2284, align 8, !tbaa !19
  %2286 = fadd double %2285, %2283
  store double %2286, ptr %2284, align 8, !tbaa !19
  %2287 = getelementptr inbounds double, ptr %6, i64 2
  %2288 = load double, ptr %2287, align 8, !tbaa !19
  %2289 = fadd double %2270, %2288
  store double %2289, ptr %2287, align 8, !tbaa !19
  %2290 = getelementptr inbounds double, ptr %6, i64 1
  %2291 = load double, ptr %2290, align 8, !tbaa !19
  %2292 = fadd double %2269, %2291
  store double %2292, ptr %2290, align 8, !tbaa !19
  %2293 = getelementptr inbounds double, ptr %6, i64 12
  %2294 = load <4 x double>, ptr %2293, align 8, !tbaa !19
  %2295 = shufflevector <2 x double> %2272, <2 x double> %2274, <4 x i32> <i32 0, i32 1, i32 3, i32 poison>
  %2296 = shufflevector <4 x double> %2295, <4 x double> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 1>
  %2297 = fadd <4 x double> %2296, %2294
  store <4 x double> %2297, ptr %2293, align 8, !tbaa !19
  %2298 = getelementptr inbounds double, ptr %6, i64 16
  %2299 = load <4 x double>, ptr %2298, align 8, !tbaa !19
  %2300 = shufflevector <2 x double> %2273, <2 x double> %2274, <4 x i32> <i32 0, i32 1, i32 3, i32 poison>
  %2301 = shufflevector <4 x double> %2300, <4 x double> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 1>
  %2302 = fadd <4 x double> %2301, %2299
  store <4 x double> %2302, ptr %2298, align 8, !tbaa !19
  %2303 = getelementptr inbounds double, ptr %6, i64 20
  %2304 = load double, ptr %2303, align 8, !tbaa !19
  %2305 = extractelement <2 x double> %2274, i64 0
  %2306 = fadd double %2305, %2304
  store double %2306, ptr %2303, align 8, !tbaa !19
  %2307 = icmp eq ptr %2267, null
  br i1 %2307, label %2309, label %2308

2308:                                             ; preds = %2282
  tail call void @_ZdaPv(ptr noundef nonnull %2267) #10
  br label %2309

2309:                                             ; preds = %2282, %2308, %1
  ret void
}

; Function Attrs: sspstrong uwtable
define dso_local void @_ZN20ComputeNonbondedUtil24calc_pair_slow_fullelectEP9nonbonded(ptr nocapture noundef readonly %0) local_unnamed_addr #0 align 2 {
  %2 = load i32, ptr @_ZN20ComputeNonbondedUtil8commOnlyE, align 4, !tbaa !5
  %3 = icmp eq i32 %2, 0
  br i1 %3, label %4, label %2152

4:                                                ; preds = %1
  %5 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 7
  %6 = load ptr, ptr %5, align 8, !tbaa !9
  %7 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 10
  %8 = load ptr, ptr %7, align 8, !tbaa !14
  %9 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 11
  %10 = load i32, ptr %9, align 8, !tbaa !15
  %11 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 12
  %12 = load i32, ptr %11, align 4, !tbaa !16
  %13 = getelementptr inbounds %class.Pairlists, ptr %8, i64 0, i32 1
  store i32 0, ptr %13, align 8, !tbaa !17
  %14 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 6
  %15 = load <2 x double>, ptr %14, align 8, !tbaa !19
  %16 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 6, i32 2
  %17 = load double, ptr %16, align 8, !tbaa !20
  %18 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 13
  %19 = load double, ptr %18, align 8, !tbaa !21
  %20 = fmul double %19, %19
  %21 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 14
  %22 = load double, ptr %21, align 8, !tbaa !22
  %23 = fmul double %22, %22
  %24 = load double, ptr @_ZN20ComputeNonbondedUtil12dielectric_1E, align 8, !tbaa !19
  %25 = load ptr, ptr @_ZN20ComputeNonbondedUtil3molE, align 8, !tbaa !23
  %26 = load ptr, ptr @_ZN20ComputeNonbondedUtil11table_shortE, align 8, !tbaa !23
  %27 = load ptr, ptr @_ZN20ComputeNonbondedUtil10slow_tableE, align 8, !tbaa !23
  %28 = load double, ptr @_ZN20ComputeNonbondedUtil7scalingE, align 8, !tbaa !19
  %29 = load double, ptr @_ZN20ComputeNonbondedUtil7scale14E, align 8, !tbaa !19
  %30 = fsub double 1.000000e+00, %29
  %31 = load double, ptr @_ZN20ComputeNonbondedUtil8r2_deltaE, align 8, !tbaa !19
  %32 = load i32, ptr @_ZN20ComputeNonbondedUtil12r2_delta_expE, align 4, !tbaa !5
  %33 = shl i32 %32, 6
  %34 = add i32 %33, -65472
  %35 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 5
  %36 = load i32, ptr %35, align 8, !tbaa !5
  %37 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 5, i64 1
  %38 = load i32, ptr %37, align 4, !tbaa !5
  %39 = load ptr, ptr %0, align 8, !tbaa !23
  %40 = getelementptr inbounds [2 x ptr], ptr %0, i64 0, i64 1
  %41 = load ptr, ptr %40, align 8, !tbaa !23
  %42 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 1
  %43 = load ptr, ptr %42, align 8, !tbaa !23
  %44 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 1, i64 1
  %45 = load ptr, ptr %44, align 8, !tbaa !23
  %46 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 9
  %47 = load ptr, ptr %46, align 8, !tbaa !24
  %48 = add nsw i32 %38, 5
  %49 = getelementptr inbounds %class.ResizeArray, ptr %47, i64 0, i32 1
  %50 = load ptr, ptr %49, align 8, !tbaa !25
  %51 = getelementptr inbounds %class.ResizeArrayRaw, ptr %50, i64 0, i32 2
  %52 = load i32, ptr %51, align 8, !tbaa !27
  %53 = icmp slt i32 %52, %48
  br i1 %53, label %54, label %92

54:                                               ; preds = %4
  %55 = getelementptr inbounds %class.ResizeArrayRaw, ptr %50, i64 0, i32 3
  %56 = load i32, ptr %55, align 4, !tbaa !30
  %57 = icmp slt i32 %56, %48
  br i1 %57, label %58, label %92

58:                                               ; preds = %54
  %59 = sitofp i32 %56 to float
  %60 = getelementptr inbounds %class.ResizeArrayRaw, ptr %50, i64 0, i32 5
  %61 = load float, ptr %60, align 4, !tbaa !31
  %62 = fmul float %61, %59
  %63 = fptosi float %62 to i32
  %64 = tail call i32 @llvm.smax.i32(i32 %63, i32 %48)
  %65 = sub nsw i32 %64, %56
  %66 = getelementptr inbounds %class.ResizeArrayRaw, ptr %50, i64 0, i32 6
  %67 = load i32, ptr %66, align 8, !tbaa !32
  %68 = icmp slt i32 %65, %67
  %69 = add nsw i32 %67, %56
  %70 = select i1 %68, i32 %69, i32 %64
  %71 = sext i32 %70 to i64
  %72 = shl nsw i64 %71, 1
  %73 = add nsw i64 %72, 31
  %74 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %73) #9
  %75 = getelementptr inbounds i8, ptr %74, i64 31
  %76 = ptrtoint ptr %75 to i64
  %77 = and i64 %76, 31
  %78 = sub nsw i64 0, %77
  %79 = getelementptr inbounds i8, ptr %75, i64 %78
  %80 = load ptr, ptr %50, align 8, !tbaa !33
  %81 = sext i32 %52 to i64
  %82 = shl nsw i64 %81, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %79, ptr align 1 %80, i64 %82, i1 false)
  %83 = icmp eq i32 %56, 0
  br i1 %83, label %89, label %84

84:                                               ; preds = %58
  %85 = getelementptr inbounds %class.ResizeArrayRaw, ptr %50, i64 0, i32 1
  %86 = load ptr, ptr %85, align 8, !tbaa !34
  %87 = icmp eq ptr %86, null
  br i1 %87, label %89, label %88

88:                                               ; preds = %84
  tail call void @_ZdaPv(ptr noundef nonnull %86) #10
  br label %89

89:                                               ; preds = %88, %84, %58
  %90 = getelementptr inbounds %class.ResizeArrayRaw, ptr %50, i64 0, i32 1
  store ptr %74, ptr %90, align 8, !tbaa !34
  store ptr %79, ptr %50, align 8, !tbaa !33
  store i32 %70, ptr %55, align 4, !tbaa !30
  %91 = load ptr, ptr %49, align 8, !tbaa !25
  br label %92

92:                                               ; preds = %4, %54, %89
  %93 = phi ptr [ %50, %4 ], [ %50, %54 ], [ %91, %89 ]
  store i32 %48, ptr %51, align 8, !tbaa !27
  %94 = load ptr, ptr %93, align 8, !tbaa !33
  %95 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %47, i64 0, i32 1, i32 1
  %96 = load ptr, ptr %95, align 8, !tbaa !35
  %97 = getelementptr inbounds %class.ResizeArrayRaw.23, ptr %96, i64 0, i32 2
  %98 = load i32, ptr %97, align 8, !tbaa !37
  %99 = icmp slt i32 %98, %48
  br i1 %99, label %100, label %138

100:                                              ; preds = %92
  %101 = getelementptr inbounds %class.ResizeArrayRaw.23, ptr %96, i64 0, i32 3
  %102 = load i32, ptr %101, align 4, !tbaa !39
  %103 = icmp slt i32 %102, %48
  br i1 %103, label %104, label %138

104:                                              ; preds = %100
  %105 = sitofp i32 %102 to float
  %106 = getelementptr inbounds %class.ResizeArrayRaw.23, ptr %96, i64 0, i32 5
  %107 = load float, ptr %106, align 4, !tbaa !40
  %108 = fmul float %107, %105
  %109 = fptosi float %108 to i32
  %110 = tail call i32 @llvm.smax.i32(i32 %109, i32 %48)
  %111 = sub nsw i32 %110, %102
  %112 = getelementptr inbounds %class.ResizeArrayRaw.23, ptr %96, i64 0, i32 6
  %113 = load i32, ptr %112, align 8, !tbaa !41
  %114 = icmp slt i32 %111, %113
  %115 = add nsw i32 %113, %102
  %116 = select i1 %114, i32 %115, i32 %110
  %117 = sext i32 %116 to i64
  %118 = shl nsw i64 %117, 3
  %119 = add nsw i64 %118, 31
  %120 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %119) #9
  %121 = getelementptr inbounds i8, ptr %120, i64 31
  %122 = ptrtoint ptr %121 to i64
  %123 = and i64 %122, 31
  %124 = sub nsw i64 0, %123
  %125 = getelementptr inbounds i8, ptr %121, i64 %124
  %126 = load ptr, ptr %96, align 8, !tbaa !42
  %127 = sext i32 %98 to i64
  %128 = shl nsw i64 %127, 3
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %125, ptr align 1 %126, i64 %128, i1 false)
  %129 = icmp eq i32 %102, 0
  br i1 %129, label %135, label %130

130:                                              ; preds = %104
  %131 = getelementptr inbounds %class.ResizeArrayRaw.23, ptr %96, i64 0, i32 1
  %132 = load ptr, ptr %131, align 8, !tbaa !43
  %133 = icmp eq ptr %132, null
  br i1 %133, label %135, label %134

134:                                              ; preds = %130
  tail call void @_ZdaPv(ptr noundef nonnull %132) #10
  br label %135

135:                                              ; preds = %134, %130, %104
  %136 = getelementptr inbounds %class.ResizeArrayRaw.23, ptr %96, i64 0, i32 1
  store ptr %120, ptr %136, align 8, !tbaa !43
  store ptr %125, ptr %96, align 8, !tbaa !42
  store i32 %116, ptr %101, align 4, !tbaa !39
  %137 = load ptr, ptr %95, align 8, !tbaa !35
  br label %138

138:                                              ; preds = %92, %100, %135
  %139 = phi ptr [ %96, %92 ], [ %96, %100 ], [ %137, %135 ]
  store i32 %48, ptr %97, align 8, !tbaa !37
  %140 = load ptr, ptr %139, align 8, !tbaa !42
  %141 = getelementptr inbounds i32, ptr %140, i64 1
  %142 = icmp eq i32 %10, 0
  %143 = icmp ne i32 %12, 0
  %144 = select i1 %142, i1 %143, i1 false
  %145 = select i1 %144, i32 0, i32 %48
  %146 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %47, i64 0, i32 2, i32 1
  %147 = load ptr, ptr %146, align 8, !tbaa !25
  %148 = getelementptr inbounds %class.ResizeArrayRaw, ptr %147, i64 0, i32 2
  %149 = load i32, ptr %148, align 8, !tbaa !27
  %150 = icmp slt i32 %149, %145
  br i1 %150, label %151, label %189

151:                                              ; preds = %138
  %152 = getelementptr inbounds %class.ResizeArrayRaw, ptr %147, i64 0, i32 3
  %153 = load i32, ptr %152, align 4, !tbaa !30
  %154 = icmp slt i32 %153, %145
  br i1 %154, label %155, label %189

155:                                              ; preds = %151
  %156 = sitofp i32 %153 to float
  %157 = getelementptr inbounds %class.ResizeArrayRaw, ptr %147, i64 0, i32 5
  %158 = load float, ptr %157, align 4, !tbaa !31
  %159 = fmul float %158, %156
  %160 = fptosi float %159 to i32
  %161 = tail call i32 @llvm.smax.i32(i32 %160, i32 %145)
  %162 = sub nsw i32 %161, %153
  %163 = getelementptr inbounds %class.ResizeArrayRaw, ptr %147, i64 0, i32 6
  %164 = load i32, ptr %163, align 8, !tbaa !32
  %165 = icmp slt i32 %162, %164
  %166 = add nsw i32 %164, %153
  %167 = select i1 %165, i32 %166, i32 %161
  %168 = sext i32 %167 to i64
  %169 = shl nsw i64 %168, 1
  %170 = add nsw i64 %169, 31
  %171 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %170) #9
  %172 = getelementptr inbounds i8, ptr %171, i64 31
  %173 = ptrtoint ptr %172 to i64
  %174 = and i64 %173, 31
  %175 = sub nsw i64 0, %174
  %176 = getelementptr inbounds i8, ptr %172, i64 %175
  %177 = load ptr, ptr %147, align 8, !tbaa !33
  %178 = sext i32 %149 to i64
  %179 = shl nsw i64 %178, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %176, ptr align 1 %177, i64 %179, i1 false)
  %180 = icmp eq i32 %153, 0
  br i1 %180, label %186, label %181

181:                                              ; preds = %155
  %182 = getelementptr inbounds %class.ResizeArrayRaw, ptr %147, i64 0, i32 1
  %183 = load ptr, ptr %182, align 8, !tbaa !34
  %184 = icmp eq ptr %183, null
  br i1 %184, label %186, label %185

185:                                              ; preds = %181
  tail call void @_ZdaPv(ptr noundef nonnull %183) #10
  br label %186

186:                                              ; preds = %185, %181, %155
  %187 = getelementptr inbounds %class.ResizeArrayRaw, ptr %147, i64 0, i32 1
  store ptr %171, ptr %187, align 8, !tbaa !34
  store ptr %176, ptr %147, align 8, !tbaa !33
  store i32 %167, ptr %152, align 4, !tbaa !30
  %188 = load ptr, ptr %146, align 8, !tbaa !25
  br label %189

189:                                              ; preds = %138, %151, %186
  %190 = phi ptr [ %147, %138 ], [ %147, %151 ], [ %188, %186 ]
  store i32 %145, ptr %148, align 8, !tbaa !27
  %191 = load ptr, ptr %190, align 8, !tbaa !33
  %192 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %47, i64 0, i32 3, i32 1
  %193 = load ptr, ptr %192, align 8, !tbaa !25
  %194 = getelementptr inbounds %class.ResizeArrayRaw, ptr %193, i64 0, i32 2
  %195 = load i32, ptr %194, align 8, !tbaa !27
  %196 = icmp slt i32 %195, %145
  br i1 %196, label %197, label %235

197:                                              ; preds = %189
  %198 = getelementptr inbounds %class.ResizeArrayRaw, ptr %193, i64 0, i32 3
  %199 = load i32, ptr %198, align 4, !tbaa !30
  %200 = icmp slt i32 %199, %145
  br i1 %200, label %201, label %235

201:                                              ; preds = %197
  %202 = sitofp i32 %199 to float
  %203 = getelementptr inbounds %class.ResizeArrayRaw, ptr %193, i64 0, i32 5
  %204 = load float, ptr %203, align 4, !tbaa !31
  %205 = fmul float %204, %202
  %206 = fptosi float %205 to i32
  %207 = tail call i32 @llvm.smax.i32(i32 %206, i32 %145)
  %208 = sub nsw i32 %207, %199
  %209 = getelementptr inbounds %class.ResizeArrayRaw, ptr %193, i64 0, i32 6
  %210 = load i32, ptr %209, align 8, !tbaa !32
  %211 = icmp slt i32 %208, %210
  %212 = add nsw i32 %210, %199
  %213 = select i1 %211, i32 %212, i32 %207
  %214 = sext i32 %213 to i64
  %215 = shl nsw i64 %214, 1
  %216 = add nsw i64 %215, 31
  %217 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %216) #9
  %218 = getelementptr inbounds i8, ptr %217, i64 31
  %219 = ptrtoint ptr %218 to i64
  %220 = and i64 %219, 31
  %221 = sub nsw i64 0, %220
  %222 = getelementptr inbounds i8, ptr %218, i64 %221
  %223 = load ptr, ptr %193, align 8, !tbaa !33
  %224 = sext i32 %195 to i64
  %225 = shl nsw i64 %224, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %222, ptr align 1 %223, i64 %225, i1 false)
  %226 = icmp eq i32 %199, 0
  br i1 %226, label %232, label %227

227:                                              ; preds = %201
  %228 = getelementptr inbounds %class.ResizeArrayRaw, ptr %193, i64 0, i32 1
  %229 = load ptr, ptr %228, align 8, !tbaa !34
  %230 = icmp eq ptr %229, null
  br i1 %230, label %232, label %231

231:                                              ; preds = %227
  tail call void @_ZdaPv(ptr noundef nonnull %229) #10
  br label %232

232:                                              ; preds = %231, %227, %201
  %233 = getelementptr inbounds %class.ResizeArrayRaw, ptr %193, i64 0, i32 1
  store ptr %217, ptr %233, align 8, !tbaa !34
  store ptr %222, ptr %193, align 8, !tbaa !33
  store i32 %213, ptr %198, align 4, !tbaa !30
  %234 = load ptr, ptr %192, align 8, !tbaa !25
  br label %235

235:                                              ; preds = %189, %197, %232
  %236 = phi ptr [ %193, %189 ], [ %193, %197 ], [ %234, %232 ]
  store i32 %145, ptr %194, align 8, !tbaa !27
  %237 = load ptr, ptr %236, align 8, !tbaa !33
  %238 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %47, i64 0, i32 4, i32 1
  %239 = load ptr, ptr %238, align 8, !tbaa !25
  %240 = getelementptr inbounds %class.ResizeArrayRaw, ptr %239, i64 0, i32 2
  %241 = load i32, ptr %240, align 8, !tbaa !27
  %242 = icmp slt i32 %241, %145
  br i1 %242, label %243, label %281

243:                                              ; preds = %235
  %244 = getelementptr inbounds %class.ResizeArrayRaw, ptr %239, i64 0, i32 3
  %245 = load i32, ptr %244, align 4, !tbaa !30
  %246 = icmp slt i32 %245, %145
  br i1 %246, label %247, label %281

247:                                              ; preds = %243
  %248 = sitofp i32 %245 to float
  %249 = getelementptr inbounds %class.ResizeArrayRaw, ptr %239, i64 0, i32 5
  %250 = load float, ptr %249, align 4, !tbaa !31
  %251 = fmul float %250, %248
  %252 = fptosi float %251 to i32
  %253 = tail call i32 @llvm.smax.i32(i32 %252, i32 %145)
  %254 = sub nsw i32 %253, %245
  %255 = getelementptr inbounds %class.ResizeArrayRaw, ptr %239, i64 0, i32 6
  %256 = load i32, ptr %255, align 8, !tbaa !32
  %257 = icmp slt i32 %254, %256
  %258 = add nsw i32 %256, %245
  %259 = select i1 %257, i32 %258, i32 %253
  %260 = sext i32 %259 to i64
  %261 = shl nsw i64 %260, 1
  %262 = add nsw i64 %261, 31
  %263 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %262) #9
  %264 = getelementptr inbounds i8, ptr %263, i64 31
  %265 = ptrtoint ptr %264 to i64
  %266 = and i64 %265, 31
  %267 = sub nsw i64 0, %266
  %268 = getelementptr inbounds i8, ptr %264, i64 %267
  %269 = load ptr, ptr %239, align 8, !tbaa !33
  %270 = sext i32 %241 to i64
  %271 = shl nsw i64 %270, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %268, ptr align 1 %269, i64 %271, i1 false)
  %272 = icmp eq i32 %245, 0
  br i1 %272, label %278, label %273

273:                                              ; preds = %247
  %274 = getelementptr inbounds %class.ResizeArrayRaw, ptr %239, i64 0, i32 1
  %275 = load ptr, ptr %274, align 8, !tbaa !34
  %276 = icmp eq ptr %275, null
  br i1 %276, label %278, label %277

277:                                              ; preds = %273
  tail call void @_ZdaPv(ptr noundef nonnull %275) #10
  br label %278

278:                                              ; preds = %277, %273, %247
  %279 = getelementptr inbounds %class.ResizeArrayRaw, ptr %239, i64 0, i32 1
  store ptr %263, ptr %279, align 8, !tbaa !34
  store ptr %268, ptr %239, align 8, !tbaa !33
  store i32 %259, ptr %244, align 4, !tbaa !30
  %280 = load ptr, ptr %238, align 8, !tbaa !25
  br label %281

281:                                              ; preds = %235, %243, %278
  %282 = phi ptr [ %239, %235 ], [ %239, %243 ], [ %280, %278 ]
  store i32 %145, ptr %240, align 8, !tbaa !27
  %283 = load ptr, ptr %282, align 8, !tbaa !33
  %284 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %47, i64 0, i32 5, i32 1
  %285 = load ptr, ptr %284, align 8, !tbaa !25
  %286 = getelementptr inbounds %class.ResizeArrayRaw, ptr %285, i64 0, i32 2
  %287 = load i32, ptr %286, align 8, !tbaa !27
  %288 = icmp slt i32 %287, %145
  br i1 %288, label %289, label %327

289:                                              ; preds = %281
  %290 = getelementptr inbounds %class.ResizeArrayRaw, ptr %285, i64 0, i32 3
  %291 = load i32, ptr %290, align 4, !tbaa !30
  %292 = icmp slt i32 %291, %145
  br i1 %292, label %293, label %327

293:                                              ; preds = %289
  %294 = sitofp i32 %291 to float
  %295 = getelementptr inbounds %class.ResizeArrayRaw, ptr %285, i64 0, i32 5
  %296 = load float, ptr %295, align 4, !tbaa !31
  %297 = fmul float %296, %294
  %298 = fptosi float %297 to i32
  %299 = tail call i32 @llvm.smax.i32(i32 %298, i32 %145)
  %300 = sub nsw i32 %299, %291
  %301 = getelementptr inbounds %class.ResizeArrayRaw, ptr %285, i64 0, i32 6
  %302 = load i32, ptr %301, align 8, !tbaa !32
  %303 = icmp slt i32 %300, %302
  %304 = add nsw i32 %302, %291
  %305 = select i1 %303, i32 %304, i32 %299
  %306 = sext i32 %305 to i64
  %307 = shl nsw i64 %306, 1
  %308 = add nsw i64 %307, 31
  %309 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %308) #9
  %310 = getelementptr inbounds i8, ptr %309, i64 31
  %311 = ptrtoint ptr %310 to i64
  %312 = and i64 %311, 31
  %313 = sub nsw i64 0, %312
  %314 = getelementptr inbounds i8, ptr %310, i64 %313
  %315 = load ptr, ptr %285, align 8, !tbaa !33
  %316 = sext i32 %287 to i64
  %317 = shl nsw i64 %316, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %314, ptr align 1 %315, i64 %317, i1 false)
  %318 = icmp eq i32 %291, 0
  br i1 %318, label %324, label %319

319:                                              ; preds = %293
  %320 = getelementptr inbounds %class.ResizeArrayRaw, ptr %285, i64 0, i32 1
  %321 = load ptr, ptr %320, align 8, !tbaa !34
  %322 = icmp eq ptr %321, null
  br i1 %322, label %324, label %323

323:                                              ; preds = %319
  tail call void @_ZdaPv(ptr noundef nonnull %321) #10
  br label %324

324:                                              ; preds = %323, %319, %293
  %325 = getelementptr inbounds %class.ResizeArrayRaw, ptr %285, i64 0, i32 1
  store ptr %309, ptr %325, align 8, !tbaa !34
  store ptr %314, ptr %285, align 8, !tbaa !33
  store i32 %305, ptr %290, align 4, !tbaa !30
  %326 = load ptr, ptr %284, align 8, !tbaa !25
  br label %327

327:                                              ; preds = %281, %289, %324
  %328 = phi ptr [ %285, %281 ], [ %285, %289 ], [ %326, %324 ]
  store i32 %145, ptr %286, align 8, !tbaa !27
  %329 = load ptr, ptr %328, align 8, !tbaa !33
  %330 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %47, i64 0, i32 6, i32 1
  %331 = load ptr, ptr %330, align 8, !tbaa !25
  %332 = getelementptr inbounds %class.ResizeArrayRaw, ptr %331, i64 0, i32 2
  %333 = load i32, ptr %332, align 8, !tbaa !27
  %334 = icmp slt i32 %333, %145
  br i1 %334, label %335, label %373

335:                                              ; preds = %327
  %336 = getelementptr inbounds %class.ResizeArrayRaw, ptr %331, i64 0, i32 3
  %337 = load i32, ptr %336, align 4, !tbaa !30
  %338 = icmp slt i32 %337, %145
  br i1 %338, label %339, label %373

339:                                              ; preds = %335
  %340 = sitofp i32 %337 to float
  %341 = getelementptr inbounds %class.ResizeArrayRaw, ptr %331, i64 0, i32 5
  %342 = load float, ptr %341, align 4, !tbaa !31
  %343 = fmul float %342, %340
  %344 = fptosi float %343 to i32
  %345 = tail call i32 @llvm.smax.i32(i32 %344, i32 %145)
  %346 = sub nsw i32 %345, %337
  %347 = getelementptr inbounds %class.ResizeArrayRaw, ptr %331, i64 0, i32 6
  %348 = load i32, ptr %347, align 8, !tbaa !32
  %349 = icmp slt i32 %346, %348
  %350 = add nsw i32 %348, %337
  %351 = select i1 %349, i32 %350, i32 %345
  %352 = sext i32 %351 to i64
  %353 = shl nsw i64 %352, 1
  %354 = add nsw i64 %353, 31
  %355 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %354) #9
  %356 = getelementptr inbounds i8, ptr %355, i64 31
  %357 = ptrtoint ptr %356 to i64
  %358 = and i64 %357, 31
  %359 = sub nsw i64 0, %358
  %360 = getelementptr inbounds i8, ptr %356, i64 %359
  %361 = load ptr, ptr %331, align 8, !tbaa !33
  %362 = sext i32 %333 to i64
  %363 = shl nsw i64 %362, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %360, ptr align 1 %361, i64 %363, i1 false)
  %364 = icmp eq i32 %337, 0
  br i1 %364, label %370, label %365

365:                                              ; preds = %339
  %366 = getelementptr inbounds %class.ResizeArrayRaw, ptr %331, i64 0, i32 1
  %367 = load ptr, ptr %366, align 8, !tbaa !34
  %368 = icmp eq ptr %367, null
  br i1 %368, label %370, label %369

369:                                              ; preds = %365
  tail call void @_ZdaPv(ptr noundef nonnull %367) #10
  br label %370

370:                                              ; preds = %369, %365, %339
  %371 = getelementptr inbounds %class.ResizeArrayRaw, ptr %331, i64 0, i32 1
  store ptr %355, ptr %371, align 8, !tbaa !34
  store ptr %360, ptr %331, align 8, !tbaa !33
  store i32 %351, ptr %336, align 4, !tbaa !30
  %372 = load ptr, ptr %330, align 8, !tbaa !25
  br label %373

373:                                              ; preds = %327, %335, %370
  %374 = phi ptr [ %331, %327 ], [ %331, %335 ], [ %372, %370 ]
  store i32 %145, ptr %332, align 8, !tbaa !27
  %375 = load ptr, ptr %374, align 8, !tbaa !33
  %376 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %47, i64 0, i32 15, i32 1
  %377 = load ptr, ptr %376, align 8, !tbaa !25
  %378 = getelementptr inbounds %class.ResizeArrayRaw, ptr %377, i64 0, i32 2
  %379 = load i32, ptr %378, align 8, !tbaa !27
  %380 = icmp slt i32 %379, %145
  br i1 %380, label %381, label %419

381:                                              ; preds = %373
  %382 = getelementptr inbounds %class.ResizeArrayRaw, ptr %377, i64 0, i32 3
  %383 = load i32, ptr %382, align 4, !tbaa !30
  %384 = icmp slt i32 %383, %145
  br i1 %384, label %385, label %419

385:                                              ; preds = %381
  %386 = sitofp i32 %383 to float
  %387 = getelementptr inbounds %class.ResizeArrayRaw, ptr %377, i64 0, i32 5
  %388 = load float, ptr %387, align 4, !tbaa !31
  %389 = fmul float %388, %386
  %390 = fptosi float %389 to i32
  %391 = tail call i32 @llvm.smax.i32(i32 %390, i32 %145)
  %392 = sub nsw i32 %391, %383
  %393 = getelementptr inbounds %class.ResizeArrayRaw, ptr %377, i64 0, i32 6
  %394 = load i32, ptr %393, align 8, !tbaa !32
  %395 = icmp slt i32 %392, %394
  %396 = add nsw i32 %394, %383
  %397 = select i1 %395, i32 %396, i32 %391
  %398 = sext i32 %397 to i64
  %399 = shl nsw i64 %398, 1
  %400 = add nsw i64 %399, 31
  %401 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %400) #9
  %402 = getelementptr inbounds i8, ptr %401, i64 31
  %403 = ptrtoint ptr %402 to i64
  %404 = and i64 %403, 31
  %405 = sub nsw i64 0, %404
  %406 = getelementptr inbounds i8, ptr %402, i64 %405
  %407 = load ptr, ptr %377, align 8, !tbaa !33
  %408 = sext i32 %379 to i64
  %409 = shl nsw i64 %408, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %406, ptr align 1 %407, i64 %409, i1 false)
  %410 = icmp eq i32 %383, 0
  br i1 %410, label %416, label %411

411:                                              ; preds = %385
  %412 = getelementptr inbounds %class.ResizeArrayRaw, ptr %377, i64 0, i32 1
  %413 = load ptr, ptr %412, align 8, !tbaa !34
  %414 = icmp eq ptr %413, null
  br i1 %414, label %416, label %415

415:                                              ; preds = %411
  tail call void @_ZdaPv(ptr noundef nonnull %413) #10
  br label %416

416:                                              ; preds = %415, %411, %385
  %417 = getelementptr inbounds %class.ResizeArrayRaw, ptr %377, i64 0, i32 1
  store ptr %401, ptr %417, align 8, !tbaa !34
  store ptr %406, ptr %377, align 8, !tbaa !33
  store i32 %397, ptr %382, align 4, !tbaa !30
  %418 = load ptr, ptr %376, align 8, !tbaa !25
  br label %419

419:                                              ; preds = %373, %381, %416
  %420 = phi ptr [ %377, %373 ], [ %377, %381 ], [ %418, %416 ]
  store i32 %145, ptr %378, align 8, !tbaa !27
  %421 = load ptr, ptr %420, align 8, !tbaa !33
  %422 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %47, i64 0, i32 16, i32 1
  %423 = load ptr, ptr %422, align 8, !tbaa !25
  %424 = getelementptr inbounds %class.ResizeArrayRaw, ptr %423, i64 0, i32 2
  %425 = load i32, ptr %424, align 8, !tbaa !27
  %426 = icmp slt i32 %425, %145
  br i1 %426, label %427, label %465

427:                                              ; preds = %419
  %428 = getelementptr inbounds %class.ResizeArrayRaw, ptr %423, i64 0, i32 3
  %429 = load i32, ptr %428, align 4, !tbaa !30
  %430 = icmp slt i32 %429, %145
  br i1 %430, label %431, label %465

431:                                              ; preds = %427
  %432 = sitofp i32 %429 to float
  %433 = getelementptr inbounds %class.ResizeArrayRaw, ptr %423, i64 0, i32 5
  %434 = load float, ptr %433, align 4, !tbaa !31
  %435 = fmul float %434, %432
  %436 = fptosi float %435 to i32
  %437 = tail call i32 @llvm.smax.i32(i32 %436, i32 %145)
  %438 = sub nsw i32 %437, %429
  %439 = getelementptr inbounds %class.ResizeArrayRaw, ptr %423, i64 0, i32 6
  %440 = load i32, ptr %439, align 8, !tbaa !32
  %441 = icmp slt i32 %438, %440
  %442 = add nsw i32 %440, %429
  %443 = select i1 %441, i32 %442, i32 %437
  %444 = sext i32 %443 to i64
  %445 = shl nsw i64 %444, 1
  %446 = add nsw i64 %445, 31
  %447 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %446) #9
  %448 = getelementptr inbounds i8, ptr %447, i64 31
  %449 = ptrtoint ptr %448 to i64
  %450 = and i64 %449, 31
  %451 = sub nsw i64 0, %450
  %452 = getelementptr inbounds i8, ptr %448, i64 %451
  %453 = load ptr, ptr %423, align 8, !tbaa !33
  %454 = sext i32 %425 to i64
  %455 = shl nsw i64 %454, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %452, ptr align 1 %453, i64 %455, i1 false)
  %456 = icmp eq i32 %429, 0
  br i1 %456, label %462, label %457

457:                                              ; preds = %431
  %458 = getelementptr inbounds %class.ResizeArrayRaw, ptr %423, i64 0, i32 1
  %459 = load ptr, ptr %458, align 8, !tbaa !34
  %460 = icmp eq ptr %459, null
  br i1 %460, label %462, label %461

461:                                              ; preds = %457
  tail call void @_ZdaPv(ptr noundef nonnull %459) #10
  br label %462

462:                                              ; preds = %461, %457, %431
  %463 = getelementptr inbounds %class.ResizeArrayRaw, ptr %423, i64 0, i32 1
  store ptr %447, ptr %463, align 8, !tbaa !34
  store ptr %452, ptr %423, align 8, !tbaa !33
  store i32 %443, ptr %428, align 4, !tbaa !30
  %464 = load ptr, ptr %422, align 8, !tbaa !25
  br label %465

465:                                              ; preds = %419, %427, %462
  %466 = phi ptr [ %423, %419 ], [ %423, %427 ], [ %464, %462 ]
  store i32 %145, ptr %424, align 8, !tbaa !27
  %467 = load ptr, ptr %466, align 8, !tbaa !33
  br i1 %144, label %600, label %468

468:                                              ; preds = %465
  %469 = icmp sgt i32 %38, 0
  br i1 %469, label %470, label %612

470:                                              ; preds = %468
  %471 = zext i32 %38 to i64
  %472 = and i64 %471, 1
  %473 = icmp eq i32 %38, 1
  br i1 %473, label %506, label %474

474:                                              ; preds = %470
  %475 = and i64 %471, 4294967294
  br label %476

476:                                              ; preds = %501, %474
  %477 = phi i64 [ 0, %474 ], [ %503, %501 ]
  %478 = phi i32 [ 0, %474 ], [ %502, %501 ]
  %479 = phi i64 [ 0, %474 ], [ %504, %501 ]
  %480 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %477, i32 4
  %481 = load i8, ptr %480, align 1
  %482 = and i8 %481, 7
  %483 = icmp eq i8 %482, 0
  br i1 %483, label %489, label %484

484:                                              ; preds = %476
  %485 = trunc i64 %477 to i16
  %486 = add nsw i32 %478, 1
  %487 = sext i32 %478 to i64
  %488 = getelementptr inbounds i16, ptr %191, i64 %487
  store i16 %485, ptr %488, align 2, !tbaa !44
  br label %489

489:                                              ; preds = %476, %484
  %490 = phi i32 [ %486, %484 ], [ %478, %476 ]
  %491 = or i64 %477, 1
  %492 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %491, i32 4
  %493 = load i8, ptr %492, align 1
  %494 = and i8 %493, 7
  %495 = icmp eq i8 %494, 0
  br i1 %495, label %501, label %496

496:                                              ; preds = %489
  %497 = trunc i64 %491 to i16
  %498 = add nsw i32 %490, 1
  %499 = sext i32 %490 to i64
  %500 = getelementptr inbounds i16, ptr %191, i64 %499
  store i16 %497, ptr %500, align 2, !tbaa !44
  br label %501

501:                                              ; preds = %496, %489
  %502 = phi i32 [ %498, %496 ], [ %490, %489 ]
  %503 = add nuw nsw i64 %477, 2
  %504 = add i64 %479, 2
  %505 = icmp eq i64 %504, %475
  br i1 %505, label %506, label %476

506:                                              ; preds = %501, %470
  %507 = phi i32 [ undef, %470 ], [ %502, %501 ]
  %508 = phi i64 [ 0, %470 ], [ %503, %501 ]
  %509 = phi i32 [ 0, %470 ], [ %502, %501 ]
  %510 = icmp eq i64 %472, 0
  br i1 %510, label %521, label %511

511:                                              ; preds = %506
  %512 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %508, i32 4
  %513 = load i8, ptr %512, align 1
  %514 = and i8 %513, 7
  %515 = icmp eq i8 %514, 0
  br i1 %515, label %521, label %516

516:                                              ; preds = %511
  %517 = trunc i64 %508 to i16
  %518 = add nsw i32 %509, 1
  %519 = sext i32 %509 to i64
  %520 = getelementptr inbounds i16, ptr %191, i64 %519
  store i16 %517, ptr %520, align 2, !tbaa !44
  br label %521

521:                                              ; preds = %511, %516, %506
  %522 = phi i32 [ %507, %506 ], [ %518, %516 ], [ %509, %511 ]
  %523 = icmp eq i32 %522, 0
  br i1 %523, label %531, label %524

524:                                              ; preds = %521
  %525 = add nsw i32 %522, -1
  %526 = sext i32 %525 to i64
  %527 = getelementptr inbounds i16, ptr %191, i64 %526
  %528 = load i16, ptr %527, align 2, !tbaa !44
  %529 = sext i32 %522 to i64
  %530 = getelementptr inbounds i16, ptr %191, i64 %529
  store i16 %528, ptr %530, align 2, !tbaa !44
  br label %531

531:                                              ; preds = %524, %521
  %532 = load i32, ptr @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4, !tbaa !5
  %533 = icmp ne i32 %532, 0
  %534 = icmp sgt i32 %522, 0
  %535 = and i1 %533, %534
  br i1 %535, label %536, label %612

536:                                              ; preds = %531
  %537 = zext i32 %522 to i64
  %538 = and i64 %537, 1
  %539 = icmp eq i32 %522, 1
  br i1 %539, label %574, label %540

540:                                              ; preds = %536
  %541 = and i64 %537, 4294967294
  br label %542

542:                                              ; preds = %569, %540
  %543 = phi i64 [ 0, %540 ], [ %571, %569 ]
  %544 = phi i32 [ 0, %540 ], [ %570, %569 ]
  %545 = phi i64 [ 0, %540 ], [ %572, %569 ]
  %546 = getelementptr inbounds i16, ptr %191, i64 %543
  %547 = load i16, ptr %546, align 2, !tbaa !44
  %548 = zext i16 %547 to i64
  %549 = getelementptr inbounds %struct.CompAtomExt, ptr %45, i64 %548
  %550 = load i32, ptr %549, align 4
  %551 = icmp sgt i32 %550, -1
  br i1 %551, label %552, label %556

552:                                              ; preds = %542
  %553 = add nsw i32 %544, 1
  %554 = sext i32 %544 to i64
  %555 = getelementptr inbounds i16, ptr %237, i64 %554
  store i16 %547, ptr %555, align 2, !tbaa !44
  br label %556

556:                                              ; preds = %542, %552
  %557 = phi i32 [ %544, %542 ], [ %553, %552 ]
  %558 = or i64 %543, 1
  %559 = getelementptr inbounds i16, ptr %191, i64 %558
  %560 = load i16, ptr %559, align 2, !tbaa !44
  %561 = zext i16 %560 to i64
  %562 = getelementptr inbounds %struct.CompAtomExt, ptr %45, i64 %561
  %563 = load i32, ptr %562, align 4
  %564 = icmp sgt i32 %563, -1
  br i1 %564, label %565, label %569

565:                                              ; preds = %556
  %566 = add nsw i32 %557, 1
  %567 = sext i32 %557 to i64
  %568 = getelementptr inbounds i16, ptr %237, i64 %567
  store i16 %560, ptr %568, align 2, !tbaa !44
  br label %569

569:                                              ; preds = %565, %556
  %570 = phi i32 [ %557, %556 ], [ %566, %565 ]
  %571 = add nuw nsw i64 %543, 2
  %572 = add i64 %545, 2
  %573 = icmp eq i64 %572, %541
  br i1 %573, label %574, label %542

574:                                              ; preds = %569, %536
  %575 = phi i32 [ undef, %536 ], [ %570, %569 ]
  %576 = phi i64 [ 0, %536 ], [ %571, %569 ]
  %577 = phi i32 [ 0, %536 ], [ %570, %569 ]
  %578 = icmp eq i64 %538, 0
  br i1 %578, label %590, label %579

579:                                              ; preds = %574
  %580 = getelementptr inbounds i16, ptr %191, i64 %576
  %581 = load i16, ptr %580, align 2, !tbaa !44
  %582 = zext i16 %581 to i64
  %583 = getelementptr inbounds %struct.CompAtomExt, ptr %45, i64 %582
  %584 = load i32, ptr %583, align 4
  %585 = icmp sgt i32 %584, -1
  br i1 %585, label %586, label %590

586:                                              ; preds = %579
  %587 = add nsw i32 %577, 1
  %588 = sext i32 %577 to i64
  %589 = getelementptr inbounds i16, ptr %237, i64 %588
  store i16 %581, ptr %589, align 2, !tbaa !44
  br label %590

590:                                              ; preds = %579, %586, %574
  %591 = phi i32 [ %575, %574 ], [ %577, %579 ], [ %587, %586 ]
  %592 = icmp eq i32 %591, 0
  br i1 %592, label %612, label %593

593:                                              ; preds = %590
  %594 = add nsw i32 %591, -1
  %595 = sext i32 %594 to i64
  %596 = getelementptr inbounds i16, ptr %237, i64 %595
  %597 = load i16, ptr %596, align 2, !tbaa !44
  %598 = sext i32 %591 to i64
  %599 = getelementptr inbounds i16, ptr %237, i64 %598
  store i16 %597, ptr %599, align 2, !tbaa !44
  br label %612

600:                                              ; preds = %465
  %601 = load ptr, ptr %8, align 8, !tbaa !46
  %602 = load i32, ptr %13, align 8, !tbaa !17
  %603 = add nsw i32 %602, 1
  store i32 %603, ptr %13, align 8, !tbaa !17
  %604 = sext i32 %602 to i64
  %605 = getelementptr inbounds i16, ptr %601, i64 %604
  %606 = load i16, ptr %605, align 2, !tbaa !44
  %607 = zext i16 %606 to i32
  %608 = icmp eq i32 %36, %607
  br i1 %608, label %629, label %609

609:                                              ; preds = %600
  tail call void @_Z8NAMD_bugPKc(ptr noundef nonnull @.str)
  %610 = load ptr, ptr %8, align 8, !tbaa !46
  %611 = load i32, ptr %13, align 8, !tbaa !17
  br label %629

612:                                              ; preds = %468, %593, %590, %531
  %613 = phi i32 [ %522, %593 ], [ %522, %590 ], [ %522, %531 ], [ 0, %468 ]
  %614 = phi i32 [ %591, %593 ], [ 0, %590 ], [ 0, %531 ], [ 0, %468 ]
  %615 = load i32, ptr %13, align 8, !tbaa !17
  %616 = trunc i32 %36 to i16
  %617 = load ptr, ptr %8, align 8, !tbaa !46
  %618 = sext i32 %615 to i64
  %619 = getelementptr inbounds i16, ptr %617, i64 %618
  store i16 %616, ptr %619, align 2, !tbaa !44
  %620 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 16
  %621 = load i32, ptr %620, align 4, !tbaa !47
  %622 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 18
  %623 = load i32, ptr %622, align 4, !tbaa !48
  %624 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 4, i64 1
  %625 = load ptr, ptr %624, align 8, !tbaa !23
  %626 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 4
  %627 = load ptr, ptr %626, align 8, !tbaa !23
  %628 = add nsw i32 %615, 2
  store i32 %628, ptr %13, align 8, !tbaa !17
  br label %645

629:                                              ; preds = %609, %600
  %630 = phi i32 [ %603, %600 ], [ %611, %609 ]
  %631 = phi ptr [ %601, %600 ], [ %610, %609 ]
  %632 = sext i32 %630 to i64
  %633 = getelementptr inbounds i16, ptr %631, i64 %632
  %634 = load i16, ptr %633, align 2, !tbaa !44
  %635 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 16
  %636 = load i32, ptr %635, align 4, !tbaa !47
  %637 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 18
  %638 = load i32, ptr %637, align 4, !tbaa !48
  %639 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 4, i64 1
  %640 = load ptr, ptr %639, align 8, !tbaa !23
  %641 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 4
  %642 = load ptr, ptr %641, align 8, !tbaa !23
  %643 = add nsw i32 %630, 1
  store i32 %643, ptr %13, align 8, !tbaa !17
  %644 = zext i16 %634 to i32
  br label %645

645:                                              ; preds = %629, %612
  %646 = phi i32 [ %636, %629 ], [ %621, %612 ]
  %647 = phi i32 [ %638, %629 ], [ %623, %612 ]
  %648 = phi ptr [ %640, %629 ], [ %625, %612 ]
  %649 = phi ptr [ %642, %629 ], [ %627, %612 ]
  %650 = phi i32 [ 0, %629 ], [ %614, %612 ]
  %651 = phi i32 [ 0, %629 ], [ %613, %612 ]
  %652 = phi i32 [ %644, %629 ], [ 0, %612 ]
  %653 = add nsw i32 %647, -1
  %654 = icmp slt i32 %652, %36
  br i1 %654, label %655, label %2117

655:                                              ; preds = %645
  %656 = getelementptr inbounds %class.Molecule, ptr %25, i64 0, i32 1
  %657 = getelementptr inbounds %class.Molecule, ptr %25, i64 0, i32 4
  %658 = getelementptr inbounds %class.Molecule, ptr %25, i64 0, i32 2
  %659 = getelementptr inbounds %class.Molecule, ptr %25, i64 0, i32 3
  %660 = ptrtoint ptr %421 to i64
  %661 = add nsw i32 %38, 10
  %662 = getelementptr inbounds %class.Pairlists, ptr %8, i64 0, i32 2
  %663 = getelementptr inbounds i16, ptr %421, i64 1
  %664 = ptrtoint ptr %467 to i64
  %665 = ptrtoint ptr %329 to i64
  %666 = ptrtoint ptr %375 to i64
  %667 = fmul double %30, 2.000000e+00
  %668 = fmul double %30, 4.000000e+00
  %669 = fmul double %30, 6.000000e+00
  %670 = insertelement <2 x double> poison, double %23, i64 0
  %671 = shufflevector <2 x double> %670, <2 x double> poison, <2 x i32> zeroinitializer
  br label %672

672:                                              ; preds = %655, %2105
  %673 = phi i32 [ 0, %655 ], [ %2112, %2105 ]
  %674 = phi i32 [ %652, %655 ], [ %2111, %2105 ]
  %675 = phi ptr [ null, %655 ], [ %2110, %2105 ]
  %676 = phi ptr [ null, %655 ], [ %2109, %2105 ]
  %677 = phi ptr [ null, %655 ], [ %2108, %2105 ]
  %678 = phi i32 [ 0, %655 ], [ %2107, %2105 ]
  %679 = phi i32 [ %646, %655 ], [ %2106, %2105 ]
  %680 = phi <2 x double> [ zeroinitializer, %655 ], [ %2113, %2105 ]
  %681 = phi <2 x double> [ zeroinitializer, %655 ], [ %2114, %2105 ]
  %682 = phi <2 x double> [ zeroinitializer, %655 ], [ %2115, %2105 ]
  %683 = sext i32 %674 to i64
  %684 = getelementptr inbounds %struct.CompAtom, ptr %39, i64 %683
  %685 = getelementptr inbounds %struct.CompAtomExt, ptr %43, i64 %683
  br i1 %144, label %1751, label %686

686:                                              ; preds = %672
  %687 = getelementptr inbounds %struct.CompAtom, ptr %39, i64 %683, i32 4
  %688 = load i8, ptr %687, align 1
  %689 = lshr i8 %688, 3
  %690 = and i8 %689, 15
  %691 = zext i8 %690 to i32
  %692 = icmp eq i8 %690, 0
  br i1 %692, label %698, label %693

693:                                              ; preds = %686
  %694 = icmp eq i32 %679, 0
  br i1 %694, label %698, label %695

695:                                              ; preds = %693
  %696 = add nsw i32 %679, -1
  %697 = add nsw i32 %674, %691
  br label %2105

698:                                              ; preds = %693, %686
  %699 = phi i32 [ %653, %693 ], [ %679, %686 ]
  %700 = load <2 x double>, ptr %684, align 8, !tbaa !19
  %701 = fadd <2 x double> %15, %700
  %702 = getelementptr inbounds %class.Vector, ptr %684, i64 0, i32 2
  %703 = load double, ptr %702, align 8, !tbaa !49
  %704 = fadd double %17, %703
  %705 = load i32, ptr %685, align 4
  %706 = shl i32 %705, 2
  %707 = ashr exact i32 %706, 2
  %708 = load ptr, ptr %656, align 8, !tbaa !51
  %709 = sext i32 %707 to i64
  %710 = getelementptr inbounds %class.ExclusionCheck, ptr %708, i64 %709
  %711 = load i32, ptr %710, align 8, !tbaa !53
  %712 = getelementptr inbounds %class.ExclusionCheck, ptr %708, i64 %709, i32 1
  %713 = load i32, ptr %712, align 4, !tbaa !55
  %714 = getelementptr inbounds %class.ExclusionCheck, ptr %708, i64 %709, i32 2
  %715 = load ptr, ptr %714, align 8, !tbaa !56
  %716 = icmp eq ptr %715, null
  br i1 %716, label %721, label %717

717:                                              ; preds = %698
  %718 = sext i32 %711 to i64
  %719 = sub nsw i64 0, %718
  %720 = getelementptr inbounds i8, ptr %715, i64 %719
  br label %947

721:                                              ; preds = %698
  %722 = icmp eq ptr %675, null
  br i1 %722, label %810, label %723

723:                                              ; preds = %721
  %724 = load i32, ptr %676, align 4, !tbaa !5
  %725 = icmp slt i32 %724, 1
  br i1 %725, label %773, label %726

726:                                              ; preds = %723
  %727 = add nuw i32 %724, 1
  %728 = zext i32 %727 to i64
  %729 = add nsw i64 %728, -1
  %730 = add nsw i64 %728, -2
  %731 = and i64 %729, 3
  %732 = icmp ult i64 %730, 3
  br i1 %732, label %760, label %733

733:                                              ; preds = %726
  %734 = and i64 %729, -4
  br label %735

735:                                              ; preds = %735, %733
  %736 = phi i64 [ 1, %733 ], [ %757, %735 ]
  %737 = phi i64 [ 0, %733 ], [ %758, %735 ]
  %738 = getelementptr inbounds i32, ptr %676, i64 %736
  %739 = load i32, ptr %738, align 4, !tbaa !5
  %740 = sext i32 %739 to i64
  %741 = getelementptr inbounds i8, ptr %675, i64 %740
  store i8 0, ptr %741, align 1, !tbaa !57
  %742 = add nuw nsw i64 %736, 1
  %743 = getelementptr inbounds i32, ptr %676, i64 %742
  %744 = load i32, ptr %743, align 4, !tbaa !5
  %745 = sext i32 %744 to i64
  %746 = getelementptr inbounds i8, ptr %675, i64 %745
  store i8 0, ptr %746, align 1, !tbaa !57
  %747 = add nuw nsw i64 %736, 2
  %748 = getelementptr inbounds i32, ptr %676, i64 %747
  %749 = load i32, ptr %748, align 4, !tbaa !5
  %750 = sext i32 %749 to i64
  %751 = getelementptr inbounds i8, ptr %675, i64 %750
  store i8 0, ptr %751, align 1, !tbaa !57
  %752 = add nuw nsw i64 %736, 3
  %753 = getelementptr inbounds i32, ptr %676, i64 %752
  %754 = load i32, ptr %753, align 4, !tbaa !5
  %755 = sext i32 %754 to i64
  %756 = getelementptr inbounds i8, ptr %675, i64 %755
  store i8 0, ptr %756, align 1, !tbaa !57
  %757 = add nuw nsw i64 %736, 4
  %758 = add i64 %737, 4
  %759 = icmp eq i64 %758, %734
  br i1 %759, label %760, label %735

760:                                              ; preds = %735, %726
  %761 = phi i64 [ 1, %726 ], [ %757, %735 ]
  %762 = icmp eq i64 %731, 0
  br i1 %762, label %773, label %763

763:                                              ; preds = %760, %763
  %764 = phi i64 [ %770, %763 ], [ %761, %760 ]
  %765 = phi i64 [ %771, %763 ], [ 0, %760 ]
  %766 = getelementptr inbounds i32, ptr %676, i64 %764
  %767 = load i32, ptr %766, align 4, !tbaa !5
  %768 = sext i32 %767 to i64
  %769 = getelementptr inbounds i8, ptr %675, i64 %768
  store i8 0, ptr %769, align 1, !tbaa !57
  %770 = add nuw nsw i64 %764, 1
  %771 = add i64 %765, 1
  %772 = icmp eq i64 %771, %731
  br i1 %772, label %773, label %763, !llvm.loop !148

773:                                              ; preds = %760, %763, %723
  %774 = load i32, ptr %677, align 4, !tbaa !5
  %775 = icmp slt i32 %774, 1
  br i1 %775, label %830, label %776

776:                                              ; preds = %773
  %777 = add nuw i32 %774, 1
  %778 = zext i32 %777 to i64
  %779 = add nsw i64 %778, -1
  %780 = add nsw i64 %778, -2
  %781 = and i64 %779, 3
  %782 = icmp ult i64 %780, 3
  br i1 %782, label %817, label %783

783:                                              ; preds = %776
  %784 = and i64 %779, -4
  br label %785

785:                                              ; preds = %785, %783
  %786 = phi i64 [ 1, %783 ], [ %807, %785 ]
  %787 = phi i64 [ 0, %783 ], [ %808, %785 ]
  %788 = getelementptr inbounds i32, ptr %677, i64 %786
  %789 = load i32, ptr %788, align 4, !tbaa !5
  %790 = sext i32 %789 to i64
  %791 = getelementptr inbounds i8, ptr %675, i64 %790
  store i8 0, ptr %791, align 1, !tbaa !57
  %792 = add nuw nsw i64 %786, 1
  %793 = getelementptr inbounds i32, ptr %677, i64 %792
  %794 = load i32, ptr %793, align 4, !tbaa !5
  %795 = sext i32 %794 to i64
  %796 = getelementptr inbounds i8, ptr %675, i64 %795
  store i8 0, ptr %796, align 1, !tbaa !57
  %797 = add nuw nsw i64 %786, 2
  %798 = getelementptr inbounds i32, ptr %677, i64 %797
  %799 = load i32, ptr %798, align 4, !tbaa !5
  %800 = sext i32 %799 to i64
  %801 = getelementptr inbounds i8, ptr %675, i64 %800
  store i8 0, ptr %801, align 1, !tbaa !57
  %802 = add nuw nsw i64 %786, 3
  %803 = getelementptr inbounds i32, ptr %677, i64 %802
  %804 = load i32, ptr %803, align 4, !tbaa !5
  %805 = sext i32 %804 to i64
  %806 = getelementptr inbounds i8, ptr %675, i64 %805
  store i8 0, ptr %806, align 1, !tbaa !57
  %807 = add nuw nsw i64 %786, 4
  %808 = add i64 %787, 4
  %809 = icmp eq i64 %808, %784
  br i1 %809, label %817, label %785

810:                                              ; preds = %721
  %811 = load i32, ptr %657, align 8, !tbaa !60
  %812 = tail call i32 @llvm.smax.i32(i32 %811, i32 -1)
  %813 = sext i32 %812 to i64
  %814 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %813) #9
  %815 = load i32, ptr %657, align 8, !tbaa !60
  %816 = sext i32 %815 to i64
  tail call void @llvm.memset.p0.i64(ptr nonnull align 1 %814, i8 0, i64 %816, i1 false)
  br label %830

817:                                              ; preds = %785, %776
  %818 = phi i64 [ 1, %776 ], [ %807, %785 ]
  %819 = icmp eq i64 %781, 0
  br i1 %819, label %830, label %820

820:                                              ; preds = %817, %820
  %821 = phi i64 [ %827, %820 ], [ %818, %817 ]
  %822 = phi i64 [ %828, %820 ], [ 0, %817 ]
  %823 = getelementptr inbounds i32, ptr %677, i64 %821
  %824 = load i32, ptr %823, align 4, !tbaa !5
  %825 = sext i32 %824 to i64
  %826 = getelementptr inbounds i8, ptr %675, i64 %825
  store i8 0, ptr %826, align 1, !tbaa !57
  %827 = add nuw nsw i64 %821, 1
  %828 = add i64 %822, 1
  %829 = icmp eq i64 %828, %781
  br i1 %829, label %830, label %820, !llvm.loop !149

830:                                              ; preds = %817, %820, %773, %810
  %831 = phi ptr [ %814, %810 ], [ %675, %773 ], [ %675, %820 ], [ %675, %817 ]
  %832 = load i32, ptr %685, align 4
  %833 = shl i32 %832, 2
  %834 = ashr exact i32 %833, 2
  %835 = load ptr, ptr %658, align 8, !tbaa !62
  %836 = sext i32 %834 to i64
  %837 = getelementptr inbounds ptr, ptr %835, i64 %836
  %838 = load ptr, ptr %837, align 8, !tbaa !23
  %839 = load i32, ptr %838, align 4, !tbaa !5
  %840 = icmp slt i32 %839, 1
  br i1 %840, label %893, label %841

841:                                              ; preds = %830
  %842 = add nuw i32 %839, 1
  %843 = zext i32 %842 to i64
  %844 = add nsw i64 %843, -1
  %845 = add nsw i64 %843, -2
  %846 = and i64 %844, 3
  %847 = icmp ult i64 %845, 3
  br i1 %847, label %875, label %848

848:                                              ; preds = %841
  %849 = and i64 %844, -4
  br label %850

850:                                              ; preds = %850, %848
  %851 = phi i64 [ 1, %848 ], [ %872, %850 ]
  %852 = phi i64 [ 0, %848 ], [ %873, %850 ]
  %853 = getelementptr inbounds i32, ptr %838, i64 %851
  %854 = load i32, ptr %853, align 4, !tbaa !5
  %855 = sext i32 %854 to i64
  %856 = getelementptr inbounds i8, ptr %831, i64 %855
  store i8 1, ptr %856, align 1, !tbaa !57
  %857 = add nuw nsw i64 %851, 1
  %858 = getelementptr inbounds i32, ptr %838, i64 %857
  %859 = load i32, ptr %858, align 4, !tbaa !5
  %860 = sext i32 %859 to i64
  %861 = getelementptr inbounds i8, ptr %831, i64 %860
  store i8 1, ptr %861, align 1, !tbaa !57
  %862 = add nuw nsw i64 %851, 2
  %863 = getelementptr inbounds i32, ptr %838, i64 %862
  %864 = load i32, ptr %863, align 4, !tbaa !5
  %865 = sext i32 %864 to i64
  %866 = getelementptr inbounds i8, ptr %831, i64 %865
  store i8 1, ptr %866, align 1, !tbaa !57
  %867 = add nuw nsw i64 %851, 3
  %868 = getelementptr inbounds i32, ptr %838, i64 %867
  %869 = load i32, ptr %868, align 4, !tbaa !5
  %870 = sext i32 %869 to i64
  %871 = getelementptr inbounds i8, ptr %831, i64 %870
  store i8 1, ptr %871, align 1, !tbaa !57
  %872 = add nuw nsw i64 %851, 4
  %873 = add i64 %852, 4
  %874 = icmp eq i64 %873, %849
  br i1 %874, label %875, label %850

875:                                              ; preds = %850, %841
  %876 = phi i64 [ 1, %841 ], [ %872, %850 ]
  %877 = icmp eq i64 %846, 0
  br i1 %877, label %888, label %878

878:                                              ; preds = %875, %878
  %879 = phi i64 [ %885, %878 ], [ %876, %875 ]
  %880 = phi i64 [ %886, %878 ], [ 0, %875 ]
  %881 = getelementptr inbounds i32, ptr %838, i64 %879
  %882 = load i32, ptr %881, align 4, !tbaa !5
  %883 = sext i32 %882 to i64
  %884 = getelementptr inbounds i8, ptr %831, i64 %883
  store i8 1, ptr %884, align 1, !tbaa !57
  %885 = add nuw nsw i64 %879, 1
  %886 = add i64 %880, 1
  %887 = icmp eq i64 %886, %846
  br i1 %887, label %888, label %878, !llvm.loop !150

888:                                              ; preds = %878, %875
  %889 = load i32, ptr %685, align 4
  %890 = shl i32 %889, 2
  %891 = ashr exact i32 %890, 2
  %892 = sext i32 %891 to i64
  br label %893

893:                                              ; preds = %888, %830
  %894 = phi i64 [ %892, %888 ], [ %836, %830 ]
  %895 = load ptr, ptr %659, align 8, !tbaa !64
  %896 = getelementptr inbounds ptr, ptr %895, i64 %894
  %897 = load ptr, ptr %896, align 8, !tbaa !23
  %898 = load i32, ptr %897, align 4, !tbaa !5
  %899 = icmp slt i32 %898, 1
  br i1 %899, label %947, label %900

900:                                              ; preds = %893
  %901 = add nuw i32 %898, 1
  %902 = zext i32 %901 to i64
  %903 = add nsw i64 %902, -1
  %904 = add nsw i64 %902, -2
  %905 = and i64 %903, 3
  %906 = icmp ult i64 %904, 3
  br i1 %906, label %934, label %907

907:                                              ; preds = %900
  %908 = and i64 %903, -4
  br label %909

909:                                              ; preds = %909, %907
  %910 = phi i64 [ 1, %907 ], [ %931, %909 ]
  %911 = phi i64 [ 0, %907 ], [ %932, %909 ]
  %912 = getelementptr inbounds i32, ptr %897, i64 %910
  %913 = load i32, ptr %912, align 4, !tbaa !5
  %914 = sext i32 %913 to i64
  %915 = getelementptr inbounds i8, ptr %831, i64 %914
  store i8 2, ptr %915, align 1, !tbaa !57
  %916 = add nuw nsw i64 %910, 1
  %917 = getelementptr inbounds i32, ptr %897, i64 %916
  %918 = load i32, ptr %917, align 4, !tbaa !5
  %919 = sext i32 %918 to i64
  %920 = getelementptr inbounds i8, ptr %831, i64 %919
  store i8 2, ptr %920, align 1, !tbaa !57
  %921 = add nuw nsw i64 %910, 2
  %922 = getelementptr inbounds i32, ptr %897, i64 %921
  %923 = load i32, ptr %922, align 4, !tbaa !5
  %924 = sext i32 %923 to i64
  %925 = getelementptr inbounds i8, ptr %831, i64 %924
  store i8 2, ptr %925, align 1, !tbaa !57
  %926 = add nuw nsw i64 %910, 3
  %927 = getelementptr inbounds i32, ptr %897, i64 %926
  %928 = load i32, ptr %927, align 4, !tbaa !5
  %929 = sext i32 %928 to i64
  %930 = getelementptr inbounds i8, ptr %831, i64 %929
  store i8 2, ptr %930, align 1, !tbaa !57
  %931 = add nuw nsw i64 %910, 4
  %932 = add i64 %911, 4
  %933 = icmp eq i64 %932, %908
  br i1 %933, label %934, label %909

934:                                              ; preds = %909, %900
  %935 = phi i64 [ 1, %900 ], [ %931, %909 ]
  %936 = icmp eq i64 %905, 0
  br i1 %936, label %947, label %937

937:                                              ; preds = %934, %937
  %938 = phi i64 [ %944, %937 ], [ %935, %934 ]
  %939 = phi i64 [ %945, %937 ], [ 0, %934 ]
  %940 = getelementptr inbounds i32, ptr %897, i64 %938
  %941 = load i32, ptr %940, align 4, !tbaa !5
  %942 = sext i32 %941 to i64
  %943 = getelementptr inbounds i8, ptr %831, i64 %942
  store i8 2, ptr %943, align 1, !tbaa !57
  %944 = add nuw nsw i64 %938, 1
  %945 = add i64 %939, 1
  %946 = icmp eq i64 %945, %905
  br i1 %946, label %947, label %937, !llvm.loop !151

947:                                              ; preds = %934, %937, %893, %717
  %948 = phi ptr [ %720, %717 ], [ %831, %893 ], [ %831, %937 ], [ %831, %934 ]
  %949 = phi ptr [ %677, %717 ], [ %897, %893 ], [ %897, %937 ], [ %897, %934 ]
  %950 = phi ptr [ %676, %717 ], [ %838, %893 ], [ %838, %937 ], [ %838, %934 ]
  %951 = phi ptr [ %675, %717 ], [ %831, %893 ], [ %831, %937 ], [ %831, %934 ]
  %952 = load i8, ptr %687, align 1
  %953 = and i8 %952, 7
  %954 = icmp eq i8 %953, 0
  %955 = load i32, ptr @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4, !tbaa !5
  br i1 %954, label %1138, label %956

956:                                              ; preds = %947
  %957 = icmp eq i32 %955, 0
  br i1 %957, label %964, label %958

958:                                              ; preds = %956
  %959 = load i32, ptr %685, align 4
  %960 = freeze i32 %959
  %961 = icmp slt i32 %960, 0
  %962 = select i1 %961, ptr %237, ptr %191
  %963 = select i1 %961, i32 %650, i32 %651
  br label %964

964:                                              ; preds = %958, %956
  %965 = phi ptr [ %191, %956 ], [ %962, %958 ]
  %966 = phi i32 [ %651, %956 ], [ %963, %958 ]
  %967 = icmp sgt i32 %966, 0
  br i1 %967, label %968, label %1119

968:                                              ; preds = %964
  %969 = icmp ugt i32 %966, 6
  br i1 %969, label %970, label %1054

970:                                              ; preds = %968
  %971 = add nsw i32 %966, -2
  %972 = getelementptr inbounds i16, ptr %965, i64 1
  %973 = load i16, ptr %972, align 2, !tbaa !44
  %974 = zext i16 %973 to i64
  %975 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %974
  %976 = getelementptr inbounds %class.Vector, ptr %975, i64 0, i32 2
  %977 = load double, ptr %976, align 8, !tbaa !49
  %978 = load i16, ptr %965, align 2, !tbaa !44
  %979 = zext i16 %978 to i64
  %980 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %979
  %981 = getelementptr inbounds %class.Vector, ptr %980, i64 0, i32 2
  %982 = load double, ptr %981, align 8, !tbaa !49
  %983 = getelementptr inbounds %class.Vector, ptr %975, i64 0, i32 1
  %984 = load double, ptr %983, align 8, !tbaa !66
  %985 = getelementptr inbounds %class.Vector, ptr %980, i64 0, i32 1
  %986 = load double, ptr %985, align 8, !tbaa !66
  %987 = load double, ptr %975, align 8, !tbaa !67
  %988 = load double, ptr %980, align 8, !tbaa !67
  %989 = zext i32 %971 to i64
  %990 = insertelement <2 x double> poison, double %977, i64 0
  %991 = insertelement <2 x double> %990, double %982, i64 1
  %992 = insertelement <2 x double> poison, double %984, i64 0
  %993 = insertelement <2 x double> %992, double %986, i64 1
  %994 = insertelement <2 x double> poison, double %987, i64 0
  %995 = insertelement <2 x double> %994, double %988, i64 1
  %996 = insertelement <2 x double> poison, double %704, i64 0
  %997 = shufflevector <2 x double> %996, <2 x double> poison, <2 x i32> zeroinitializer
  %998 = shufflevector <2 x double> %701, <2 x double> poison, <2 x i32> <i32 1, i32 1>
  %999 = shufflevector <2 x double> %701, <2 x double> poison, <2 x i32> zeroinitializer
  br label %1000

1000:                                             ; preds = %970, %1000
  %1001 = phi i64 [ 2, %970 ], [ %1044, %1000 ]
  %1002 = phi i32 [ 0, %970 ], [ %1043, %1000 ]
  %1003 = phi i16 [ %978, %970 ], [ %1010, %1000 ]
  %1004 = phi i16 [ %973, %970 ], [ %1013, %1000 ]
  %1005 = phi <2 x double> [ %991, %970 ], [ %1047, %1000 ]
  %1006 = phi <2 x double> [ %993, %970 ], [ %1049, %1000 ]
  %1007 = phi <2 x double> [ %995, %970 ], [ %1051, %1000 ]
  %1008 = fsub <2 x double> %997, %1005
  %1009 = getelementptr inbounds i16, ptr %965, i64 %1001
  %1010 = load i16, ptr %1009, align 2, !tbaa !44
  %1011 = or i64 %1001, 1
  %1012 = getelementptr inbounds i16, ptr %965, i64 %1011
  %1013 = load i16, ptr %1012, align 2, !tbaa !44
  %1014 = zext i16 %1010 to i64
  %1015 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %1014
  %1016 = load double, ptr %1015, align 8, !tbaa !67
  %1017 = zext i16 %1013 to i64
  %1018 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %1017
  %1019 = load double, ptr %1018, align 8, !tbaa !67
  %1020 = getelementptr inbounds %class.Vector, ptr %1015, i64 0, i32 1
  %1021 = load double, ptr %1020, align 8, !tbaa !66
  %1022 = getelementptr inbounds %class.Vector, ptr %1018, i64 0, i32 1
  %1023 = load double, ptr %1022, align 8, !tbaa !66
  %1024 = getelementptr inbounds %class.Vector, ptr %1015, i64 0, i32 2
  %1025 = load double, ptr %1024, align 8, !tbaa !49
  %1026 = getelementptr inbounds %class.Vector, ptr %1018, i64 0, i32 2
  %1027 = load double, ptr %1026, align 8, !tbaa !49
  %1028 = fsub <2 x double> %999, %1007
  %1029 = fmul <2 x double> %1028, %1028
  %1030 = fsub <2 x double> %998, %1006
  %1031 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %1030, <2 x double> %1030, <2 x double> %1029)
  %1032 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %1008, <2 x double> %1008, <2 x double> %1031)
  %1033 = fcmp olt <2 x double> %1032, %671
  %1034 = zext i32 %1002 to i64
  %1035 = getelementptr inbounds i16, ptr %283, i64 %1034
  store i16 %1003, ptr %1035, align 2, !tbaa !44
  %1036 = extractelement <2 x i1> %1033, i64 1
  %1037 = zext i1 %1036 to i32
  %1038 = add nuw nsw i32 %1002, %1037
  %1039 = zext i32 %1038 to i64
  %1040 = getelementptr inbounds i16, ptr %283, i64 %1039
  store i16 %1004, ptr %1040, align 2, !tbaa !44
  %1041 = extractelement <2 x i1> %1033, i64 0
  %1042 = zext i1 %1041 to i32
  %1043 = add i32 %1038, %1042
  %1044 = add nuw nsw i64 %1001, 2
  %1045 = icmp ult i64 %1044, %989
  %1046 = insertelement <2 x double> poison, double %1027, i64 0
  %1047 = insertelement <2 x double> %1046, double %1025, i64 1
  %1048 = insertelement <2 x double> poison, double %1023, i64 0
  %1049 = insertelement <2 x double> %1048, double %1021, i64 1
  %1050 = insertelement <2 x double> poison, double %1019, i64 0
  %1051 = insertelement <2 x double> %1050, double %1016, i64 1
  br i1 %1045, label %1000, label %1052

1052:                                             ; preds = %1000
  %1053 = trunc i64 %1001 to i32
  br label %1054

1054:                                             ; preds = %1052, %968
  %1055 = phi i32 [ %1043, %1052 ], [ 0, %968 ]
  %1056 = phi i32 [ %1053, %1052 ], [ 0, %968 ]
  %1057 = icmp slt i32 %1056, %966
  br i1 %1057, label %1058, label %1063

1058:                                             ; preds = %1054
  %1059 = zext i32 %1056 to i64
  %1060 = zext i32 %966 to i64
  %1061 = extractelement <2 x double> %701, i64 0
  %1062 = extractelement <2 x double> %701, i64 1
  br label %1068

1063:                                             ; preds = %1091, %1054
  %1064 = phi i32 [ %1055, %1054 ], [ %1092, %1091 ]
  %1065 = icmp sgt i32 %1064, 0
  br i1 %1065, label %1066, label %1119

1066:                                             ; preds = %1063
  %1067 = zext i32 %1064 to i64
  br label %1095

1068:                                             ; preds = %1058, %1091
  %1069 = phi i64 [ %1059, %1058 ], [ %1093, %1091 ]
  %1070 = phi i32 [ %1055, %1058 ], [ %1092, %1091 ]
  %1071 = getelementptr inbounds i16, ptr %965, i64 %1069
  %1072 = load i16, ptr %1071, align 2, !tbaa !44
  %1073 = zext i16 %1072 to i64
  %1074 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %1073
  %1075 = load double, ptr %1074, align 8, !tbaa !67
  %1076 = getelementptr inbounds %class.Vector, ptr %1074, i64 0, i32 1
  %1077 = load double, ptr %1076, align 8, !tbaa !66
  %1078 = getelementptr inbounds %class.Vector, ptr %1074, i64 0, i32 2
  %1079 = load double, ptr %1078, align 8, !tbaa !49
  %1080 = fsub double %1061, %1075
  %1081 = fmul double %1080, %1080
  %1082 = fsub double %1062, %1077
  %1083 = tail call double @llvm.fmuladd.f64(double %1082, double %1082, double %1081)
  %1084 = fsub double %704, %1079
  %1085 = tail call double @llvm.fmuladd.f64(double %1084, double %1084, double %1083)
  %1086 = fcmp ugt double %1085, %23
  br i1 %1086, label %1091, label %1087

1087:                                             ; preds = %1068
  %1088 = add nsw i32 %1070, 1
  %1089 = sext i32 %1070 to i64
  %1090 = getelementptr inbounds i16, ptr %283, i64 %1089
  store i16 %1072, ptr %1090, align 2, !tbaa !44
  br label %1091

1091:                                             ; preds = %1087, %1068
  %1092 = phi i32 [ %1088, %1087 ], [ %1070, %1068 ]
  %1093 = add nuw nsw i64 %1069, 1
  %1094 = icmp eq i64 %1093, %1060
  br i1 %1094, label %1063, label %1068

1095:                                             ; preds = %1066, %1112
  %1096 = phi i64 [ 0, %1066 ], [ %1115, %1112 ]
  %1097 = phi ptr [ %421, %1066 ], [ %1114, %1112 ]
  %1098 = getelementptr inbounds i16, ptr %283, i64 %1096
  %1099 = load i16, ptr %1098, align 2, !tbaa !44
  %1100 = zext i16 %1099 to i64
  %1101 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %1100, i32 4
  %1102 = load i8, ptr %1101, align 1
  %1103 = and i8 %1102, 7
  store i16 %1099, ptr %1097, align 2, !tbaa !44
  %1104 = getelementptr inbounds i16, ptr %1097, i64 1
  %1105 = insertelement <2 x i16> poison, i16 %1099, i64 0
  %1106 = shufflevector <2 x i16> %1105, <2 x i16> poison, <2 x i32> zeroinitializer
  %1107 = add <2 x i16> %1106, <i16 1, i16 2>
  store <2 x i16> %1107, ptr %1104, align 2, !tbaa !44
  %1108 = icmp ult i8 %1103, 4
  br i1 %1108, label %1112, label %1109

1109:                                             ; preds = %1095
  %1110 = add <2 x i16> %1106, <i16 3, i16 4>
  %1111 = getelementptr inbounds i16, ptr %1097, i64 3
  store <2 x i16> %1110, ptr %1111, align 2, !tbaa !44
  br label %1112

1112:                                             ; preds = %1109, %1095
  %1113 = zext i8 %1103 to i64
  %1114 = getelementptr inbounds i16, ptr %1097, i64 %1113
  %1115 = add nuw nsw i64 %1096, 1
  %1116 = icmp eq i64 %1115, %1067
  br i1 %1116, label %1117, label %1095

1117:                                             ; preds = %1112
  %1118 = ptrtoint ptr %1114 to i64
  br label %1119

1119:                                             ; preds = %1117, %1063, %964
  %1120 = phi i64 [ %1118, %1117 ], [ %660, %1063 ], [ %660, %964 ]
  %1121 = sub i64 %1120, %660
  %1122 = lshr exact i64 %1121, 1
  %1123 = trunc i64 %1122 to i32
  %1124 = icmp eq i32 %1123, 0
  br i1 %1124, label %1125, label %1130

1125:                                             ; preds = %1119
  %1126 = load i8, ptr %687, align 1
  %1127 = and i8 %1126, 7
  %1128 = zext i8 %1127 to i32
  %1129 = add nsw i32 %674, %1128
  br label %2105

1130:                                             ; preds = %1119
  %1131 = shl i64 %1121, 31
  %1132 = add i64 %1131, -4294967296
  %1133 = ashr i64 %1132, 32
  %1134 = getelementptr inbounds i16, ptr %421, i64 %1133
  %1135 = load i16, ptr %1134, align 2, !tbaa !44
  %1136 = ashr i64 %1131, 32
  %1137 = getelementptr inbounds i16, ptr %421, i64 %1136
  store i16 %1135, ptr %1137, align 2, !tbaa !44
  br label %1138

1138:                                             ; preds = %1130, %947
  %1139 = phi i32 [ %1123, %1130 ], [ %678, %947 ]
  %1140 = icmp eq i32 %955, 0
  br i1 %1140, label %1145, label %1141

1141:                                             ; preds = %1138
  %1142 = load i32, ptr %685, align 4
  %1143 = and i32 %1142, 1073741824
  %1144 = icmp ne i32 %1143, 0
  br label %1145

1145:                                             ; preds = %1141, %1138
  %1146 = phi i1 [ false, %1138 ], [ %1144, %1141 ]
  %1147 = load i32, ptr %13, align 8, !tbaa !17
  %1148 = add nsw i32 %661, %1147
  %1149 = load i32, ptr %662, align 4, !tbaa !68
  %1150 = icmp sgt i32 %1149, %1148
  br i1 %1150, label %1166, label %1151

1151:                                             ; preds = %1145, %1151
  %1152 = phi i32 [ %1154, %1151 ], [ %1149, %1145 ]
  %1153 = ashr i32 %1152, 1
  %1154 = add nsw i32 %1153, %1152
  %1155 = icmp sgt i32 %1154, %1148
  br i1 %1155, label %1156, label %1151

1156:                                             ; preds = %1151
  %1157 = sext i32 %1154 to i64
  %1158 = icmp slt i32 %1154, 0
  %1159 = shl nsw i64 %1157, 1
  %1160 = select i1 %1158, i64 -1, i64 %1159
  %1161 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %1160) #9
  %1162 = load ptr, ptr %8, align 8, !tbaa !46
  %1163 = sext i32 %1147 to i64
  %1164 = shl nsw i64 %1163, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 2 %1161, ptr align 2 %1162, i64 %1164, i1 false)
  %1165 = icmp eq ptr %1162, null
  br i1 %1165, label %1170, label %1168

1166:                                             ; preds = %1145
  %1167 = load ptr, ptr %8, align 8, !tbaa !46
  br label %1172

1168:                                             ; preds = %1156
  tail call void @_ZdaPv(ptr noundef nonnull %1162) #10
  %1169 = load i32, ptr %13, align 8, !tbaa !17
  br label %1170

1170:                                             ; preds = %1168, %1156
  %1171 = phi i32 [ %1169, %1168 ], [ %1147, %1156 ]
  store ptr %1161, ptr %8, align 8, !tbaa !46
  store i32 %1154, ptr %662, align 4, !tbaa !68
  br label %1172

1172:                                             ; preds = %1166, %1170
  %1173 = phi i32 [ %1147, %1166 ], [ %1171, %1170 ]
  %1174 = phi ptr [ %1167, %1166 ], [ %1161, %1170 ]
  %1175 = ptrtoint ptr %1174 to i64
  %1176 = add nsw i32 %1173, 1
  %1177 = sext i32 %1176 to i64
  %1178 = getelementptr inbounds i16, ptr %1174, i64 %1177
  %1179 = icmp sgt i32 %1139, 0
  br i1 %1146, label %1180, label %1227

1180:                                             ; preds = %1172
  br i1 %1179, label %1181, label %1387

1181:                                             ; preds = %1180
  %1182 = zext i32 %1139 to i64
  %1183 = extractelement <2 x double> %701, i64 0
  %1184 = extractelement <2 x double> %701, i64 1
  br label %1185

1185:                                             ; preds = %1181, %1222
  %1186 = phi i64 [ 0, %1181 ], [ %1225, %1222 ]
  %1187 = phi ptr [ %467, %1181 ], [ %1224, %1222 ]
  %1188 = phi ptr [ %1178, %1181 ], [ %1223, %1222 ]
  %1189 = getelementptr inbounds i16, ptr %421, i64 %1186
  %1190 = load i16, ptr %1189, align 2, !tbaa !44
  %1191 = zext i16 %1190 to i64
  %1192 = getelementptr inbounds %struct.CompAtomExt, ptr %45, i64 %1191
  %1193 = load i32, ptr %1192, align 4
  %1194 = and i32 %1193, 1073741824
  %1195 = icmp eq i32 %1194, 0
  br i1 %1195, label %1196, label %1222

1196:                                             ; preds = %1185
  %1197 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %1191
  %1198 = getelementptr inbounds %class.Vector, ptr %1197, i64 0, i32 2
  %1199 = load double, ptr %1198, align 8, !tbaa !49
  %1200 = fsub double %704, %1199
  %1201 = getelementptr inbounds %class.Vector, ptr %1197, i64 0, i32 1
  %1202 = load double, ptr %1201, align 8, !tbaa !66
  %1203 = fsub double %1184, %1202
  %1204 = load double, ptr %1197, align 8, !tbaa !67
  %1205 = fsub double %1183, %1204
  %1206 = fmul double %1205, %1205
  %1207 = tail call double @llvm.fmuladd.f64(double %1203, double %1203, double %1206)
  %1208 = tail call double @llvm.fmuladd.f64(double %1200, double %1200, double %1207)
  %1209 = fcmp ugt double %1208, %20
  br i1 %1209, label %1222, label %1210

1210:                                             ; preds = %1196
  %1211 = shl i32 %1193, 2
  %1212 = ashr exact i32 %1211, 2
  %1213 = icmp slt i32 %1212, %711
  %1214 = icmp sgt i32 %1212, %713
  %1215 = select i1 %1213, i1 true, i1 %1214
  %1216 = select i1 %1215, ptr %1188, ptr %1187
  %1217 = zext i1 %1215 to i64
  %1218 = getelementptr inbounds i16, ptr %1188, i64 %1217
  %1219 = xor i1 %1215, true
  %1220 = zext i1 %1219 to i64
  %1221 = getelementptr inbounds i16, ptr %1187, i64 %1220
  store i16 %1190, ptr %1216, align 2, !tbaa !44
  br label %1222

1222:                                             ; preds = %1210, %1196, %1185
  %1223 = phi ptr [ %1188, %1185 ], [ %1188, %1196 ], [ %1218, %1210 ]
  %1224 = phi ptr [ %1187, %1185 ], [ %1187, %1196 ], [ %1221, %1210 ]
  %1225 = add nuw nsw i64 %1186, 1
  %1226 = icmp eq i64 %1225, %1182
  br i1 %1226, label %1387, label %1185

1227:                                             ; preds = %1172
  br i1 %1179, label %1228, label %1387

1228:                                             ; preds = %1227
  %1229 = icmp ugt i32 %1139, 6
  br i1 %1229, label %1230, label %1338

1230:                                             ; preds = %1228
  %1231 = add nsw i32 %1139, -2
  %1232 = load i16, ptr %421, align 2, !tbaa !44
  %1233 = zext i16 %1232 to i64
  %1234 = getelementptr inbounds %struct.CompAtomExt, ptr %45, i64 %1233
  %1235 = load i32, ptr %1234, align 4
  %1236 = load i16, ptr %663, align 2, !tbaa !44
  %1237 = zext i16 %1236 to i64
  %1238 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %1237
  %1239 = getelementptr inbounds %class.Vector, ptr %1238, i64 0, i32 2
  %1240 = load double, ptr %1239, align 8, !tbaa !49
  %1241 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %1233
  %1242 = getelementptr inbounds %class.Vector, ptr %1241, i64 0, i32 2
  %1243 = load double, ptr %1242, align 8, !tbaa !49
  %1244 = getelementptr inbounds %class.Vector, ptr %1238, i64 0, i32 1
  %1245 = load double, ptr %1244, align 8, !tbaa !66
  %1246 = getelementptr inbounds %class.Vector, ptr %1241, i64 0, i32 1
  %1247 = load double, ptr %1246, align 8, !tbaa !66
  %1248 = load double, ptr %1238, align 8, !tbaa !67
  %1249 = load double, ptr %1241, align 8, !tbaa !67
  %1250 = zext i32 %1231 to i64
  %1251 = extractelement <2 x double> %701, i64 0
  %1252 = extractelement <2 x double> %701, i64 1
  br label %1253

1253:                                             ; preds = %1230, %1331
  %1254 = phi i64 [ 2, %1230 ], [ %1334, %1331 ]
  %1255 = phi i64 [ %1237, %1230 ], [ %1291, %1331 ]
  %1256 = phi i32 [ %1235, %1230 ], [ %1319, %1331 ]
  %1257 = phi ptr [ %467, %1230 ], [ %1333, %1331 ]
  %1258 = phi ptr [ %1178, %1230 ], [ %1332, %1331 ]
  %1259 = phi i16 [ %1232, %1230 ], [ %1284, %1331 ]
  %1260 = phi i16 [ %1236, %1230 ], [ %1287, %1331 ]
  %1261 = phi double [ %1249, %1230 ], [ %1290, %1331 ]
  %1262 = phi double [ %1248, %1230 ], [ %1293, %1331 ]
  %1263 = phi double [ %1247, %1230 ], [ %1295, %1331 ]
  %1264 = phi double [ %1245, %1230 ], [ %1297, %1331 ]
  %1265 = phi double [ %1243, %1230 ], [ %1299, %1331 ]
  %1266 = phi double [ %1240, %1230 ], [ %1301, %1331 ]
  %1267 = getelementptr inbounds %struct.CompAtomExt, ptr %45, i64 %1255
  %1268 = load i32, ptr %1267, align 4
  %1269 = shl i32 %1268, 2
  %1270 = ashr exact i32 %1269, 2
  %1271 = fsub double %1251, %1261
  %1272 = fsub double %1251, %1262
  %1273 = fmul double %1271, %1271
  %1274 = fmul double %1272, %1272
  %1275 = fsub double %1252, %1263
  %1276 = fsub double %1252, %1264
  %1277 = tail call double @llvm.fmuladd.f64(double %1275, double %1275, double %1273)
  %1278 = tail call double @llvm.fmuladd.f64(double %1276, double %1276, double %1274)
  %1279 = fsub double %704, %1265
  %1280 = fsub double %704, %1266
  %1281 = tail call double @llvm.fmuladd.f64(double %1279, double %1279, double %1277)
  %1282 = tail call double @llvm.fmuladd.f64(double %1280, double %1280, double %1278)
  %1283 = getelementptr inbounds i16, ptr %421, i64 %1254
  %1284 = load i16, ptr %1283, align 2, !tbaa !44
  %1285 = or i64 %1254, 1
  %1286 = getelementptr inbounds i16, ptr %421, i64 %1285
  %1287 = load i16, ptr %1286, align 2, !tbaa !44
  %1288 = zext i16 %1284 to i64
  %1289 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %1288
  %1290 = load double, ptr %1289, align 8, !tbaa !67
  %1291 = zext i16 %1287 to i64
  %1292 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %1291
  %1293 = load double, ptr %1292, align 8, !tbaa !67
  %1294 = getelementptr inbounds %class.Vector, ptr %1289, i64 0, i32 1
  %1295 = load double, ptr %1294, align 8, !tbaa !66
  %1296 = getelementptr inbounds %class.Vector, ptr %1292, i64 0, i32 1
  %1297 = load double, ptr %1296, align 8, !tbaa !66
  %1298 = getelementptr inbounds %class.Vector, ptr %1289, i64 0, i32 2
  %1299 = load double, ptr %1298, align 8, !tbaa !49
  %1300 = getelementptr inbounds %class.Vector, ptr %1292, i64 0, i32 2
  %1301 = load double, ptr %1300, align 8, !tbaa !49
  %1302 = fcmp ugt double %1281, %20
  br i1 %1302, label %1315, label %1303

1303:                                             ; preds = %1253
  %1304 = shl i32 %1256, 2
  %1305 = ashr exact i32 %1304, 2
  %1306 = icmp slt i32 %1305, %711
  %1307 = icmp sgt i32 %1305, %713
  %1308 = select i1 %1306, i1 true, i1 %1307
  %1309 = select i1 %1308, ptr %1258, ptr %1257
  %1310 = zext i1 %1308 to i64
  %1311 = getelementptr inbounds i16, ptr %1258, i64 %1310
  %1312 = xor i1 %1308, true
  %1313 = zext i1 %1312 to i64
  %1314 = getelementptr inbounds i16, ptr %1257, i64 %1313
  store i16 %1259, ptr %1309, align 2, !tbaa !44
  br label %1315

1315:                                             ; preds = %1303, %1253
  %1316 = phi ptr [ %1258, %1253 ], [ %1311, %1303 ]
  %1317 = phi ptr [ %1257, %1253 ], [ %1314, %1303 ]
  %1318 = getelementptr inbounds %struct.CompAtomExt, ptr %45, i64 %1288
  %1319 = load i32, ptr %1318, align 4
  %1320 = fcmp ugt double %1282, %20
  br i1 %1320, label %1331, label %1321

1321:                                             ; preds = %1315
  %1322 = icmp slt i32 %1270, %711
  %1323 = icmp sgt i32 %1270, %713
  %1324 = select i1 %1322, i1 true, i1 %1323
  %1325 = select i1 %1324, ptr %1316, ptr %1317
  %1326 = zext i1 %1324 to i64
  %1327 = getelementptr inbounds i16, ptr %1316, i64 %1326
  %1328 = xor i1 %1324, true
  %1329 = zext i1 %1328 to i64
  %1330 = getelementptr inbounds i16, ptr %1317, i64 %1329
  store i16 %1260, ptr %1325, align 2, !tbaa !44
  br label %1331

1331:                                             ; preds = %1321, %1315
  %1332 = phi ptr [ %1316, %1315 ], [ %1327, %1321 ]
  %1333 = phi ptr [ %1317, %1315 ], [ %1330, %1321 ]
  %1334 = add nuw nsw i64 %1254, 2
  %1335 = icmp ult i64 %1334, %1250
  br i1 %1335, label %1253, label %1336

1336:                                             ; preds = %1331
  %1337 = trunc i64 %1254 to i32
  br label %1338

1338:                                             ; preds = %1336, %1228
  %1339 = phi i32 [ %1337, %1336 ], [ 0, %1228 ]
  %1340 = phi ptr [ %1332, %1336 ], [ %1178, %1228 ]
  %1341 = phi ptr [ %1333, %1336 ], [ %467, %1228 ]
  %1342 = icmp slt i32 %1339, %1139
  br i1 %1342, label %1343, label %1387

1343:                                             ; preds = %1338
  %1344 = zext i32 %1339 to i64
  %1345 = zext i32 %1139 to i64
  %1346 = extractelement <2 x double> %701, i64 0
  %1347 = extractelement <2 x double> %701, i64 1
  br label %1348

1348:                                             ; preds = %1343, %1382
  %1349 = phi i64 [ %1344, %1343 ], [ %1385, %1382 ]
  %1350 = phi ptr [ %1341, %1343 ], [ %1384, %1382 ]
  %1351 = phi ptr [ %1340, %1343 ], [ %1383, %1382 ]
  %1352 = getelementptr inbounds i16, ptr %421, i64 %1349
  %1353 = load i16, ptr %1352, align 2, !tbaa !44
  %1354 = zext i16 %1353 to i64
  %1355 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %1354
  %1356 = load double, ptr %1355, align 8, !tbaa !67
  %1357 = getelementptr inbounds %class.Vector, ptr %1355, i64 0, i32 1
  %1358 = load double, ptr %1357, align 8, !tbaa !66
  %1359 = getelementptr inbounds %class.Vector, ptr %1355, i64 0, i32 2
  %1360 = load double, ptr %1359, align 8, !tbaa !49
  %1361 = fsub double %1346, %1356
  %1362 = fmul double %1361, %1361
  %1363 = fsub double %1347, %1358
  %1364 = tail call double @llvm.fmuladd.f64(double %1363, double %1363, double %1362)
  %1365 = fsub double %704, %1360
  %1366 = tail call double @llvm.fmuladd.f64(double %1365, double %1365, double %1364)
  %1367 = fcmp ugt double %1366, %20
  br i1 %1367, label %1382, label %1368

1368:                                             ; preds = %1348
  %1369 = getelementptr inbounds %struct.CompAtomExt, ptr %45, i64 %1354
  %1370 = load i32, ptr %1369, align 4
  %1371 = shl i32 %1370, 2
  %1372 = ashr exact i32 %1371, 2
  %1373 = icmp slt i32 %1372, %711
  %1374 = icmp sgt i32 %1372, %713
  %1375 = select i1 %1373, i1 true, i1 %1374
  %1376 = select i1 %1375, ptr %1351, ptr %1350
  %1377 = zext i1 %1375 to i64
  %1378 = getelementptr inbounds i16, ptr %1351, i64 %1377
  %1379 = xor i1 %1375, true
  %1380 = zext i1 %1379 to i64
  %1381 = getelementptr inbounds i16, ptr %1350, i64 %1380
  store i16 %1353, ptr %1376, align 2, !tbaa !44
  br label %1382

1382:                                             ; preds = %1368, %1348
  %1383 = phi ptr [ %1351, %1348 ], [ %1378, %1368 ]
  %1384 = phi ptr [ %1350, %1348 ], [ %1381, %1368 ]
  %1385 = add nuw nsw i64 %1349, 1
  %1386 = icmp eq i64 %1385, %1345
  br i1 %1386, label %1387, label %1348

1387:                                             ; preds = %1382, %1222, %1338, %1180, %1227
  %1388 = phi ptr [ %1178, %1227 ], [ %1178, %1180 ], [ %1340, %1338 ], [ %1223, %1222 ], [ %1383, %1382 ]
  %1389 = phi ptr [ %467, %1227 ], [ %467, %1180 ], [ %1341, %1338 ], [ %1224, %1222 ], [ %1384, %1382 ]
  %1390 = icmp eq ptr %1388, %1178
  %1391 = icmp eq ptr %1389, %467
  %1392 = select i1 %1390, i1 %1391, i1 false
  br i1 %1392, label %1393, label %1395

1393:                                             ; preds = %1387
  %1394 = add nsw i32 %674, 1
  br label %2105

1395:                                             ; preds = %1387
  %1396 = trunc i32 %674 to i16
  %1397 = load i32, ptr %13, align 8, !tbaa !17
  %1398 = add nsw i32 %1397, -1
  %1399 = sext i32 %1398 to i64
  %1400 = getelementptr inbounds i16, ptr %1174, i64 %1399
  store i16 %1396, ptr %1400, align 2, !tbaa !44
  %1401 = ptrtoint ptr %1389 to i64
  %1402 = sub i64 %1401, %664
  %1403 = lshr exact i64 %1402, 1
  %1404 = trunc i64 %1403 to i32
  %1405 = icmp sgt i32 %1404, 0
  br i1 %1405, label %1406, label %1506

1406:                                             ; preds = %1395
  %1407 = and i64 %1403, 4294967295
  %1408 = and i64 %1403, 1
  %1409 = icmp eq i64 %1407, 1
  br i1 %1409, label %1474, label %1410

1410:                                             ; preds = %1406
  %1411 = sub nsw i64 %1407, %1408
  br label %1412

1412:                                             ; preds = %1467, %1410
  %1413 = phi i64 [ 0, %1410 ], [ %1471, %1467 ]
  %1414 = phi ptr [ %1388, %1410 ], [ %1470, %1467 ]
  %1415 = phi ptr [ %329, %1410 ], [ %1469, %1467 ]
  %1416 = phi ptr [ %375, %1410 ], [ %1468, %1467 ]
  %1417 = phi i64 [ 0, %1410 ], [ %1472, %1467 ]
  %1418 = getelementptr inbounds i16, ptr %467, i64 %1413
  %1419 = load i16, ptr %1418, align 2, !tbaa !44
  %1420 = zext i16 %1419 to i64
  %1421 = getelementptr inbounds %struct.CompAtomExt, ptr %45, i64 %1420
  %1422 = load i32, ptr %1421, align 4
  %1423 = shl i32 %1422, 2
  %1424 = ashr exact i32 %1423, 2
  %1425 = sext i32 %1424 to i64
  %1426 = getelementptr inbounds i8, ptr %948, i64 %1425
  %1427 = load i8, ptr %1426, align 1, !tbaa !57
  %1428 = sext i8 %1427 to i32
  switch i32 %1428, label %1440 [
    i32 0, label %1429
    i32 1, label %1431
    i32 2, label %1433
  ]

1429:                                             ; preds = %1412
  %1430 = getelementptr inbounds i16, ptr %1414, i64 1
  br label %1435

1431:                                             ; preds = %1412
  %1432 = getelementptr inbounds i16, ptr %1415, i64 1
  br label %1435

1433:                                             ; preds = %1412
  %1434 = getelementptr inbounds i16, ptr %1416, i64 1
  br label %1435

1435:                                             ; preds = %1429, %1431, %1433
  %1436 = phi ptr [ %1416, %1433 ], [ %1415, %1431 ], [ %1414, %1429 ]
  %1437 = phi ptr [ %1434, %1433 ], [ %1416, %1431 ], [ %1416, %1429 ]
  %1438 = phi ptr [ %1415, %1433 ], [ %1432, %1431 ], [ %1415, %1429 ]
  %1439 = phi ptr [ %1414, %1433 ], [ %1414, %1431 ], [ %1430, %1429 ]
  store i16 %1419, ptr %1436, align 2, !tbaa !44
  br label %1440

1440:                                             ; preds = %1435, %1412
  %1441 = phi ptr [ %1416, %1412 ], [ %1437, %1435 ]
  %1442 = phi ptr [ %1415, %1412 ], [ %1438, %1435 ]
  %1443 = phi ptr [ %1414, %1412 ], [ %1439, %1435 ]
  %1444 = or i64 %1413, 1
  %1445 = getelementptr inbounds i16, ptr %467, i64 %1444
  %1446 = load i16, ptr %1445, align 2, !tbaa !44
  %1447 = zext i16 %1446 to i64
  %1448 = getelementptr inbounds %struct.CompAtomExt, ptr %45, i64 %1447
  %1449 = load i32, ptr %1448, align 4
  %1450 = shl i32 %1449, 2
  %1451 = ashr exact i32 %1450, 2
  %1452 = sext i32 %1451 to i64
  %1453 = getelementptr inbounds i8, ptr %948, i64 %1452
  %1454 = load i8, ptr %1453, align 1, !tbaa !57
  %1455 = sext i8 %1454 to i32
  switch i32 %1455, label %1467 [
    i32 0, label %1460
    i32 1, label %1458
    i32 2, label %1456
  ]

1456:                                             ; preds = %1440
  %1457 = getelementptr inbounds i16, ptr %1441, i64 1
  br label %1462

1458:                                             ; preds = %1440
  %1459 = getelementptr inbounds i16, ptr %1442, i64 1
  br label %1462

1460:                                             ; preds = %1440
  %1461 = getelementptr inbounds i16, ptr %1443, i64 1
  br label %1462

1462:                                             ; preds = %1460, %1458, %1456
  %1463 = phi ptr [ %1441, %1456 ], [ %1442, %1458 ], [ %1443, %1460 ]
  %1464 = phi ptr [ %1457, %1456 ], [ %1441, %1458 ], [ %1441, %1460 ]
  %1465 = phi ptr [ %1442, %1456 ], [ %1459, %1458 ], [ %1442, %1460 ]
  %1466 = phi ptr [ %1443, %1456 ], [ %1443, %1458 ], [ %1461, %1460 ]
  store i16 %1446, ptr %1463, align 2, !tbaa !44
  br label %1467

1467:                                             ; preds = %1462, %1440
  %1468 = phi ptr [ %1441, %1440 ], [ %1464, %1462 ]
  %1469 = phi ptr [ %1442, %1440 ], [ %1465, %1462 ]
  %1470 = phi ptr [ %1443, %1440 ], [ %1466, %1462 ]
  %1471 = add nuw nsw i64 %1413, 2
  %1472 = add i64 %1417, 2
  %1473 = icmp eq i64 %1472, %1411
  br i1 %1473, label %1474, label %1412

1474:                                             ; preds = %1467, %1406
  %1475 = phi ptr [ undef, %1406 ], [ %1468, %1467 ]
  %1476 = phi ptr [ undef, %1406 ], [ %1469, %1467 ]
  %1477 = phi ptr [ undef, %1406 ], [ %1470, %1467 ]
  %1478 = phi i64 [ 0, %1406 ], [ %1471, %1467 ]
  %1479 = phi ptr [ %1388, %1406 ], [ %1470, %1467 ]
  %1480 = phi ptr [ %329, %1406 ], [ %1469, %1467 ]
  %1481 = phi ptr [ %375, %1406 ], [ %1468, %1467 ]
  %1482 = icmp eq i64 %1408, 0
  br i1 %1482, label %1506, label %1483

1483:                                             ; preds = %1474
  %1484 = getelementptr inbounds i16, ptr %467, i64 %1478
  %1485 = load i16, ptr %1484, align 2, !tbaa !44
  %1486 = zext i16 %1485 to i64
  %1487 = getelementptr inbounds %struct.CompAtomExt, ptr %45, i64 %1486
  %1488 = load i32, ptr %1487, align 4
  %1489 = shl i32 %1488, 2
  %1490 = ashr exact i32 %1489, 2
  %1491 = sext i32 %1490 to i64
  %1492 = getelementptr inbounds i8, ptr %948, i64 %1491
  %1493 = load i8, ptr %1492, align 1, !tbaa !57
  %1494 = sext i8 %1493 to i32
  switch i32 %1494, label %1506 [
    i32 0, label %1499
    i32 1, label %1497
    i32 2, label %1495
  ]

1495:                                             ; preds = %1483
  %1496 = getelementptr inbounds i16, ptr %1481, i64 1
  br label %1501

1497:                                             ; preds = %1483
  %1498 = getelementptr inbounds i16, ptr %1480, i64 1
  br label %1501

1499:                                             ; preds = %1483
  %1500 = getelementptr inbounds i16, ptr %1479, i64 1
  br label %1501

1501:                                             ; preds = %1499, %1497, %1495
  %1502 = phi ptr [ %1481, %1495 ], [ %1480, %1497 ], [ %1479, %1499 ]
  %1503 = phi ptr [ %1496, %1495 ], [ %1481, %1497 ], [ %1481, %1499 ]
  %1504 = phi ptr [ %1480, %1495 ], [ %1498, %1497 ], [ %1480, %1499 ]
  %1505 = phi ptr [ %1479, %1495 ], [ %1479, %1497 ], [ %1500, %1499 ]
  store i16 %1485, ptr %1502, align 2, !tbaa !44
  br label %1506

1506:                                             ; preds = %1474, %1501, %1483, %1395
  %1507 = phi ptr [ %375, %1395 ], [ %1475, %1474 ], [ %1481, %1483 ], [ %1503, %1501 ]
  %1508 = phi ptr [ %329, %1395 ], [ %1476, %1474 ], [ %1480, %1483 ], [ %1504, %1501 ]
  %1509 = phi ptr [ %1388, %1395 ], [ %1477, %1474 ], [ %1479, %1483 ], [ %1505, %1501 ]
  %1510 = ptrtoint ptr %1509 to i64
  %1511 = ptrtoint ptr %1178 to i64
  %1512 = sub i64 %1510, %1511
  %1513 = lshr exact i64 %1512, 1
  %1514 = trunc i64 %1513 to i32
  %1515 = icmp eq i32 %1514, 0
  %1516 = shl i64 %1512, 31
  br i1 %1515, label %1522, label %1517

1517:                                             ; preds = %1506
  %1518 = add i64 %1516, -4294967296
  %1519 = ashr i64 %1518, 32
  %1520 = getelementptr inbounds i16, ptr %1178, i64 %1519
  %1521 = load i16, ptr %1520, align 2, !tbaa !44
  br label %1522

1522:                                             ; preds = %1506, %1517
  %1523 = phi i16 [ %1521, %1517 ], [ -1, %1506 ]
  %1524 = ashr i64 %1516, 32
  %1525 = getelementptr inbounds i16, ptr %1178, i64 %1524
  store i16 %1523, ptr %1525, align 2, !tbaa !44
  %1526 = trunc i64 %1513 to i16
  %1527 = add i16 %1526, 1
  %1528 = sext i32 %1397 to i64
  %1529 = getelementptr inbounds i16, ptr %1174, i64 %1528
  store i16 %1527, ptr %1529, align 2, !tbaa !44
  %1530 = add i32 %1397, 2
  %1531 = add i32 %1530, %1514
  %1532 = ptrtoint ptr %1508 to i64
  %1533 = sub i64 %1532, %665
  %1534 = lshr exact i64 %1533, 1
  %1535 = trunc i64 %1534 to i32
  %1536 = add nsw i32 %1531, 1
  %1537 = sext i32 %1536 to i64
  %1538 = getelementptr i16, ptr %1174, i64 %1537
  %1539 = icmp sgt i32 %1535, 0
  br i1 %1539, label %1540, label %1630

1540:                                             ; preds = %1522
  %1541 = and i64 %1534, 4294967295
  %1542 = icmp ult i64 %1541, 8
  br i1 %1542, label %1586, label %1543

1543:                                             ; preds = %1540
  %1544 = shl nsw i64 %1537, 1
  %1545 = add i64 %1544, %1175
  %1546 = sub i64 %1545, %665
  %1547 = icmp ult i64 %1546, 128
  br i1 %1547, label %1586, label %1548

1548:                                             ; preds = %1543
  %1549 = icmp ult i64 %1541, 64
  br i1 %1549, label %1573, label %1550

1550:                                             ; preds = %1548
  %1551 = and i64 %1534, 63
  %1552 = sub nsw i64 %1541, %1551
  br label %1553

1553:                                             ; preds = %1553, %1550
  %1554 = phi i64 [ 0, %1550 ], [ %1567, %1553 ]
  %1555 = getelementptr inbounds i16, ptr %329, i64 %1554
  %1556 = load <16 x i16>, ptr %1555, align 2, !tbaa !44
  %1557 = getelementptr inbounds i16, ptr %1555, i64 16
  %1558 = load <16 x i16>, ptr %1557, align 2, !tbaa !44
  %1559 = getelementptr inbounds i16, ptr %1555, i64 32
  %1560 = load <16 x i16>, ptr %1559, align 2, !tbaa !44
  %1561 = getelementptr inbounds i16, ptr %1555, i64 48
  %1562 = load <16 x i16>, ptr %1561, align 2, !tbaa !44
  %1563 = getelementptr inbounds i16, ptr %1538, i64 %1554
  store <16 x i16> %1556, ptr %1563, align 2, !tbaa !44
  %1564 = getelementptr inbounds i16, ptr %1563, i64 16
  store <16 x i16> %1558, ptr %1564, align 2, !tbaa !44
  %1565 = getelementptr inbounds i16, ptr %1563, i64 32
  store <16 x i16> %1560, ptr %1565, align 2, !tbaa !44
  %1566 = getelementptr inbounds i16, ptr %1563, i64 48
  store <16 x i16> %1562, ptr %1566, align 2, !tbaa !44
  %1567 = add nuw i64 %1554, 64
  %1568 = icmp eq i64 %1567, %1552
  br i1 %1568, label %1569, label %1553, !llvm.loop !152

1569:                                             ; preds = %1553
  %1570 = icmp eq i64 %1551, 0
  br i1 %1570, label %1624, label %1571

1571:                                             ; preds = %1569
  %1572 = icmp ult i64 %1551, 8
  br i1 %1572, label %1586, label %1573

1573:                                             ; preds = %1548, %1571
  %1574 = phi i64 [ %1552, %1571 ], [ 0, %1548 ]
  %1575 = and i64 %1534, 7
  %1576 = sub nsw i64 %1541, %1575
  br label %1577

1577:                                             ; preds = %1577, %1573
  %1578 = phi i64 [ %1574, %1573 ], [ %1582, %1577 ]
  %1579 = getelementptr inbounds i16, ptr %329, i64 %1578
  %1580 = load <8 x i16>, ptr %1579, align 2, !tbaa !44
  %1581 = getelementptr inbounds i16, ptr %1538, i64 %1578
  store <8 x i16> %1580, ptr %1581, align 2, !tbaa !44
  %1582 = add nuw i64 %1578, 8
  %1583 = icmp eq i64 %1582, %1576
  br i1 %1583, label %1584, label %1577, !llvm.loop !153

1584:                                             ; preds = %1577
  %1585 = icmp eq i64 %1575, 0
  br i1 %1585, label %1624, label %1586

1586:                                             ; preds = %1543, %1540, %1571, %1584
  %1587 = phi i64 [ 0, %1540 ], [ 0, %1543 ], [ %1552, %1571 ], [ %1576, %1584 ]
  %1588 = sub i64 %1534, %1587
  %1589 = xor i64 %1587, -1
  %1590 = add nsw i64 %1541, %1589
  %1591 = and i64 %1588, 3
  %1592 = icmp eq i64 %1591, 0
  br i1 %1592, label %1602, label %1593

1593:                                             ; preds = %1586, %1593
  %1594 = phi i64 [ %1599, %1593 ], [ %1587, %1586 ]
  %1595 = phi i64 [ %1600, %1593 ], [ 0, %1586 ]
  %1596 = getelementptr inbounds i16, ptr %329, i64 %1594
  %1597 = load i16, ptr %1596, align 2, !tbaa !44
  %1598 = getelementptr inbounds i16, ptr %1538, i64 %1594
  store i16 %1597, ptr %1598, align 2, !tbaa !44
  %1599 = add nuw nsw i64 %1594, 1
  %1600 = add i64 %1595, 1
  %1601 = icmp eq i64 %1600, %1591
  br i1 %1601, label %1602, label %1593, !llvm.loop !154

1602:                                             ; preds = %1593, %1586
  %1603 = phi i64 [ %1587, %1586 ], [ %1599, %1593 ]
  %1604 = icmp ult i64 %1590, 3
  br i1 %1604, label %1624, label %1605

1605:                                             ; preds = %1602, %1605
  %1606 = phi i64 [ %1622, %1605 ], [ %1603, %1602 ]
  %1607 = getelementptr inbounds i16, ptr %329, i64 %1606
  %1608 = load i16, ptr %1607, align 2, !tbaa !44
  %1609 = getelementptr inbounds i16, ptr %1538, i64 %1606
  store i16 %1608, ptr %1609, align 2, !tbaa !44
  %1610 = add nuw nsw i64 %1606, 1
  %1611 = getelementptr inbounds i16, ptr %329, i64 %1610
  %1612 = load i16, ptr %1611, align 2, !tbaa !44
  %1613 = getelementptr inbounds i16, ptr %1538, i64 %1610
  store i16 %1612, ptr %1613, align 2, !tbaa !44
  %1614 = add nuw nsw i64 %1606, 2
  %1615 = getelementptr inbounds i16, ptr %329, i64 %1614
  %1616 = load i16, ptr %1615, align 2, !tbaa !44
  %1617 = getelementptr inbounds i16, ptr %1538, i64 %1614
  store i16 %1616, ptr %1617, align 2, !tbaa !44
  %1618 = add nuw nsw i64 %1606, 3
  %1619 = getelementptr inbounds i16, ptr %329, i64 %1618
  %1620 = load i16, ptr %1619, align 2, !tbaa !44
  %1621 = getelementptr inbounds i16, ptr %1538, i64 %1618
  store i16 %1620, ptr %1621, align 2, !tbaa !44
  %1622 = add nuw nsw i64 %1606, 4
  %1623 = icmp eq i64 %1622, %1541
  br i1 %1623, label %1624, label %1605, !llvm.loop !155

1624:                                             ; preds = %1602, %1605, %1569, %1584
  %1625 = shl i64 %1533, 31
  %1626 = add i64 %1625, -4294967296
  %1627 = ashr i64 %1626, 32
  %1628 = getelementptr inbounds i16, ptr %1538, i64 %1627
  %1629 = load i16, ptr %1628, align 2, !tbaa !44
  br label %1630

1630:                                             ; preds = %1522, %1624
  %1631 = phi i64 [ %1534, %1624 ], [ 0, %1522 ]
  %1632 = phi i16 [ %1629, %1624 ], [ -1, %1522 ]
  %1633 = and i64 %1631, 4294967295
  %1634 = getelementptr inbounds i16, ptr %1538, i64 %1633
  store i16 %1632, ptr %1634, align 2, !tbaa !44
  %1635 = trunc i64 %1534 to i16
  %1636 = add i16 %1635, 1
  %1637 = sext i32 %1531 to i64
  %1638 = getelementptr inbounds i16, ptr %1174, i64 %1637
  store i16 %1636, ptr %1638, align 2, !tbaa !44
  %1639 = add nsw i32 %1535, 2
  %1640 = add nsw i32 %1639, %1531
  %1641 = ptrtoint ptr %1507 to i64
  %1642 = sub i64 %1641, %666
  %1643 = lshr exact i64 %1642, 1
  %1644 = trunc i64 %1643 to i32
  %1645 = add nsw i32 %1640, 1
  %1646 = sext i32 %1645 to i64
  %1647 = getelementptr i16, ptr %1174, i64 %1646
  %1648 = icmp sgt i32 %1644, 0
  br i1 %1648, label %1649, label %1739

1649:                                             ; preds = %1630
  %1650 = and i64 %1643, 4294967295
  %1651 = icmp ult i64 %1650, 8
  br i1 %1651, label %1695, label %1652

1652:                                             ; preds = %1649
  %1653 = shl nsw i64 %1646, 1
  %1654 = add i64 %1653, %1175
  %1655 = sub i64 %1654, %666
  %1656 = icmp ult i64 %1655, 128
  br i1 %1656, label %1695, label %1657

1657:                                             ; preds = %1652
  %1658 = icmp ult i64 %1650, 64
  br i1 %1658, label %1682, label %1659

1659:                                             ; preds = %1657
  %1660 = and i64 %1643, 63
  %1661 = sub nsw i64 %1650, %1660
  br label %1662

1662:                                             ; preds = %1662, %1659
  %1663 = phi i64 [ 0, %1659 ], [ %1676, %1662 ]
  %1664 = getelementptr inbounds i16, ptr %375, i64 %1663
  %1665 = load <16 x i16>, ptr %1664, align 2, !tbaa !44
  %1666 = getelementptr inbounds i16, ptr %1664, i64 16
  %1667 = load <16 x i16>, ptr %1666, align 2, !tbaa !44
  %1668 = getelementptr inbounds i16, ptr %1664, i64 32
  %1669 = load <16 x i16>, ptr %1668, align 2, !tbaa !44
  %1670 = getelementptr inbounds i16, ptr %1664, i64 48
  %1671 = load <16 x i16>, ptr %1670, align 2, !tbaa !44
  %1672 = getelementptr inbounds i16, ptr %1647, i64 %1663
  store <16 x i16> %1665, ptr %1672, align 2, !tbaa !44
  %1673 = getelementptr inbounds i16, ptr %1672, i64 16
  store <16 x i16> %1667, ptr %1673, align 2, !tbaa !44
  %1674 = getelementptr inbounds i16, ptr %1672, i64 32
  store <16 x i16> %1669, ptr %1674, align 2, !tbaa !44
  %1675 = getelementptr inbounds i16, ptr %1672, i64 48
  store <16 x i16> %1671, ptr %1675, align 2, !tbaa !44
  %1676 = add nuw i64 %1663, 64
  %1677 = icmp eq i64 %1676, %1661
  br i1 %1677, label %1678, label %1662, !llvm.loop !156

1678:                                             ; preds = %1662
  %1679 = icmp eq i64 %1660, 0
  br i1 %1679, label %1733, label %1680

1680:                                             ; preds = %1678
  %1681 = icmp ult i64 %1660, 8
  br i1 %1681, label %1695, label %1682

1682:                                             ; preds = %1657, %1680
  %1683 = phi i64 [ %1661, %1680 ], [ 0, %1657 ]
  %1684 = and i64 %1643, 7
  %1685 = sub nsw i64 %1650, %1684
  br label %1686

1686:                                             ; preds = %1686, %1682
  %1687 = phi i64 [ %1683, %1682 ], [ %1691, %1686 ]
  %1688 = getelementptr inbounds i16, ptr %375, i64 %1687
  %1689 = load <8 x i16>, ptr %1688, align 2, !tbaa !44
  %1690 = getelementptr inbounds i16, ptr %1647, i64 %1687
  store <8 x i16> %1689, ptr %1690, align 2, !tbaa !44
  %1691 = add nuw i64 %1687, 8
  %1692 = icmp eq i64 %1691, %1685
  br i1 %1692, label %1693, label %1686, !llvm.loop !157

1693:                                             ; preds = %1686
  %1694 = icmp eq i64 %1684, 0
  br i1 %1694, label %1733, label %1695

1695:                                             ; preds = %1652, %1649, %1680, %1693
  %1696 = phi i64 [ 0, %1649 ], [ 0, %1652 ], [ %1661, %1680 ], [ %1685, %1693 ]
  %1697 = sub i64 %1643, %1696
  %1698 = xor i64 %1696, -1
  %1699 = add nsw i64 %1650, %1698
  %1700 = and i64 %1697, 3
  %1701 = icmp eq i64 %1700, 0
  br i1 %1701, label %1711, label %1702

1702:                                             ; preds = %1695, %1702
  %1703 = phi i64 [ %1708, %1702 ], [ %1696, %1695 ]
  %1704 = phi i64 [ %1709, %1702 ], [ 0, %1695 ]
  %1705 = getelementptr inbounds i16, ptr %375, i64 %1703
  %1706 = load i16, ptr %1705, align 2, !tbaa !44
  %1707 = getelementptr inbounds i16, ptr %1647, i64 %1703
  store i16 %1706, ptr %1707, align 2, !tbaa !44
  %1708 = add nuw nsw i64 %1703, 1
  %1709 = add i64 %1704, 1
  %1710 = icmp eq i64 %1709, %1700
  br i1 %1710, label %1711, label %1702, !llvm.loop !158

1711:                                             ; preds = %1702, %1695
  %1712 = phi i64 [ %1696, %1695 ], [ %1708, %1702 ]
  %1713 = icmp ult i64 %1699, 3
  br i1 %1713, label %1733, label %1714

1714:                                             ; preds = %1711, %1714
  %1715 = phi i64 [ %1731, %1714 ], [ %1712, %1711 ]
  %1716 = getelementptr inbounds i16, ptr %375, i64 %1715
  %1717 = load i16, ptr %1716, align 2, !tbaa !44
  %1718 = getelementptr inbounds i16, ptr %1647, i64 %1715
  store i16 %1717, ptr %1718, align 2, !tbaa !44
  %1719 = add nuw nsw i64 %1715, 1
  %1720 = getelementptr inbounds i16, ptr %375, i64 %1719
  %1721 = load i16, ptr %1720, align 2, !tbaa !44
  %1722 = getelementptr inbounds i16, ptr %1647, i64 %1719
  store i16 %1721, ptr %1722, align 2, !tbaa !44
  %1723 = add nuw nsw i64 %1715, 2
  %1724 = getelementptr inbounds i16, ptr %375, i64 %1723
  %1725 = load i16, ptr %1724, align 2, !tbaa !44
  %1726 = getelementptr inbounds i16, ptr %1647, i64 %1723
  store i16 %1725, ptr %1726, align 2, !tbaa !44
  %1727 = add nuw nsw i64 %1715, 3
  %1728 = getelementptr inbounds i16, ptr %375, i64 %1727
  %1729 = load i16, ptr %1728, align 2, !tbaa !44
  %1730 = getelementptr inbounds i16, ptr %1647, i64 %1727
  store i16 %1729, ptr %1730, align 2, !tbaa !44
  %1731 = add nuw nsw i64 %1715, 4
  %1732 = icmp eq i64 %1731, %1650
  br i1 %1732, label %1733, label %1714, !llvm.loop !159

1733:                                             ; preds = %1711, %1714, %1678, %1693
  %1734 = shl i64 %1642, 31
  %1735 = add i64 %1734, -4294967296
  %1736 = ashr i64 %1735, 32
  %1737 = getelementptr inbounds i16, ptr %1647, i64 %1736
  %1738 = load i16, ptr %1737, align 2, !tbaa !44
  br label %1739

1739:                                             ; preds = %1630, %1733
  %1740 = phi i64 [ %1643, %1733 ], [ 0, %1630 ]
  %1741 = phi i16 [ %1738, %1733 ], [ -1, %1630 ]
  %1742 = and i64 %1740, 4294967295
  %1743 = getelementptr inbounds i16, ptr %1647, i64 %1742
  store i16 %1741, ptr %1743, align 2, !tbaa !44
  %1744 = trunc i64 %1643 to i16
  %1745 = add i16 %1744, 1
  %1746 = sext i32 %1640 to i64
  %1747 = getelementptr inbounds i16, ptr %1174, i64 %1746
  store i16 %1745, ptr %1747, align 2, !tbaa !44
  %1748 = add i32 %1644, 3
  %1749 = add i32 %1748, %1640
  %1750 = select i1 %142, i32 1, i32 %1749
  store i32 %1750, ptr %13, align 8, !tbaa !17
  br label %1786

1751:                                             ; preds = %672
  %1752 = load <2 x double>, ptr %684, align 8, !tbaa !19
  %1753 = fadd <2 x double> %15, %1752
  %1754 = getelementptr inbounds %class.Vector, ptr %684, i64 0, i32 2
  %1755 = load double, ptr %1754, align 8, !tbaa !49
  %1756 = fadd double %17, %1755
  %1757 = load ptr, ptr %8, align 8, !tbaa !46
  %1758 = load i32, ptr %13, align 8, !tbaa !17
  %1759 = add i32 %1758, 1
  %1760 = sext i32 %1759 to i64
  %1761 = getelementptr inbounds i16, ptr %1757, i64 %1760
  %1762 = sext i32 %1758 to i64
  %1763 = getelementptr inbounds i16, ptr %1757, i64 %1762
  %1764 = load i16, ptr %1763, align 2, !tbaa !44
  %1765 = zext i16 %1764 to i32
  %1766 = add i32 %1759, %1765
  %1767 = add nsw i32 %1765, -1
  %1768 = add i32 %1766, 1
  %1769 = sext i32 %1768 to i64
  %1770 = getelementptr inbounds i16, ptr %1757, i64 %1769
  %1771 = sext i32 %1766 to i64
  %1772 = getelementptr inbounds i16, ptr %1757, i64 %1771
  %1773 = load i16, ptr %1772, align 2, !tbaa !44
  %1774 = zext i16 %1773 to i32
  %1775 = add i32 %1768, %1774
  %1776 = add nsw i32 %1774, -1
  %1777 = add i32 %1775, 1
  %1778 = sext i32 %1777 to i64
  %1779 = getelementptr inbounds i16, ptr %1757, i64 %1778
  %1780 = sext i32 %1775 to i64
  %1781 = getelementptr inbounds i16, ptr %1757, i64 %1780
  %1782 = load i16, ptr %1781, align 2, !tbaa !44
  %1783 = zext i16 %1782 to i32
  %1784 = add i32 %1777, %1783
  store i32 %1784, ptr %13, align 8, !tbaa !17
  %1785 = add nsw i32 %1783, -1
  br label %1786

1786:                                             ; preds = %1739, %1751
  %1787 = phi double [ %1756, %1751 ], [ %704, %1739 ]
  %1788 = phi i32 [ %679, %1751 ], [ %699, %1739 ]
  %1789 = phi ptr [ %1761, %1751 ], [ %1178, %1739 ]
  %1790 = phi i32 [ %1767, %1751 ], [ %1514, %1739 ]
  %1791 = phi ptr [ %1770, %1751 ], [ %1538, %1739 ]
  %1792 = phi i32 [ %1776, %1751 ], [ %1535, %1739 ]
  %1793 = phi ptr [ %1779, %1751 ], [ %1647, %1739 ]
  %1794 = phi i32 [ %1785, %1751 ], [ %1644, %1739 ]
  %1795 = phi i32 [ %678, %1751 ], [ %1139, %1739 ]
  %1796 = phi ptr [ %677, %1751 ], [ %949, %1739 ]
  %1797 = phi ptr [ %676, %1751 ], [ %950, %1739 ]
  %1798 = phi ptr [ %675, %1751 ], [ %951, %1739 ]
  %1799 = phi <2 x double> [ %1753, %1751 ], [ %701, %1739 ]
  %1800 = getelementptr inbounds %struct.CompAtom, ptr %39, i64 %683, i32 1
  %1801 = load float, ptr %1800, align 8, !tbaa !79
  %1802 = fpext float %1801 to double
  %1803 = fmul double %1802, 0x4074C104816F0069
  %1804 = fmul double %28, %1803
  %1805 = fmul double %24, %1804
  %1806 = load double, ptr @_ZN20ComputeNonbondedUtil7cutoff2E, align 8, !tbaa !19
  %1807 = extractelement <2 x double> %1799, i64 0
  %1808 = extractelement <2 x double> %1799, i64 1
  %1809 = tail call noundef i32 @_Z22pairlist_from_pairlistddddPK8CompAtomPKtiPtdPd(double noundef %1806, double noundef %1807, double noundef %1808, double noundef %1787, ptr noundef %41, ptr noundef nonnull %1789, i32 noundef %1790, ptr noundef %94, double noundef %31, ptr noundef %140)
  %1810 = icmp sgt i32 %1809, 0
  br i1 %1810, label %1811, label %1887

1811:                                             ; preds = %1786
  %1812 = load ptr, ptr @_ZN20ComputeNonbondedUtil8r2_tableE, align 8, !tbaa !23
  %1813 = zext i32 %1809 to i64
  br label %1814

1814:                                             ; preds = %1811, %1814
  %1815 = phi i64 [ 0, %1811 ], [ %1885, %1814 ]
  %1816 = phi double [ 0.000000e+00, %1811 ], [ %1881, %1814 ]
  %1817 = phi <2 x double> [ %680, %1811 ], [ %1873, %1814 ]
  %1818 = phi <2 x double> [ %681, %1811 ], [ %1866, %1814 ]
  %1819 = phi <2 x double> [ %682, %1811 ], [ %1879, %1814 ]
  %1820 = phi <2 x double> [ zeroinitializer, %1811 ], [ %1875, %1814 ]
  %1821 = shl nuw nsw i64 %1815, 1
  %1822 = getelementptr inbounds i32, ptr %141, i64 %1821
  %1823 = load i32, ptr %1822, align 4, !tbaa !5
  %1824 = ashr i32 %1823, 14
  %1825 = add nsw i32 %1824, %34
  %1826 = getelementptr inbounds i16, ptr %94, i64 %1815
  %1827 = load i16, ptr %1826, align 2, !tbaa !44
  %1828 = zext i16 %1827 to i64
  %1829 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %1828
  %1830 = getelementptr inbounds double, ptr %140, i64 %1815
  %1831 = load double, ptr %1830, align 8, !tbaa !19
  %1832 = sext i32 %1825 to i64
  %1833 = getelementptr inbounds double, ptr %1812, i64 %1832
  %1834 = load double, ptr %1833, align 8, !tbaa !19
  %1835 = fsub double %1831, %1834
  %1836 = shl nsw i32 %1825, 4
  %1837 = sext i32 %1836 to i64
  %1838 = getelementptr inbounds double, ptr %26, i64 %1837
  %1839 = getelementptr inbounds %class.Vector, ptr %648, i64 %1828
  %1840 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %1828, i32 1
  %1841 = load float, ptr %1840, align 8, !tbaa !79
  %1842 = fpext float %1841 to double
  %1843 = fmul double %1805, %1842
  %1844 = load <2 x double>, ptr %1829, align 8, !tbaa !19
  %1845 = fsub <2 x double> %1799, %1844
  %1846 = getelementptr inbounds %class.Vector, ptr %1829, i64 0, i32 2
  %1847 = load double, ptr %1846, align 8, !tbaa !49
  %1848 = fsub double %1787, %1847
  %1849 = getelementptr inbounds double, ptr %1838, i64 12
  %1850 = load double, ptr %1849, align 8, !tbaa !19
  %1851 = getelementptr inbounds double, ptr %1838, i64 13
  %1852 = load double, ptr %1851, align 8, !tbaa !19
  %1853 = getelementptr inbounds double, ptr %1838, i64 14
  %1854 = load double, ptr %1853, align 8, !tbaa !19
  %1855 = fmul double %1843, %1850
  %1856 = fmul double %1843, %1852
  %1857 = fmul double %1843, %1854
  %1858 = tail call double @llvm.fmuladd.f64(double %1835, double %1855, double %1856)
  %1859 = tail call double @llvm.fmuladd.f64(double %1858, double %1835, double %1857)
  %1860 = extractelement <2 x double> %1845, i64 1
  %1861 = fmul double %1860, %1859
  %1862 = insertelement <2 x double> poison, double %1861, i64 0
  %1863 = shufflevector <2 x double> %1862, <2 x double> poison, <2 x i32> zeroinitializer
  %1864 = shufflevector <2 x double> %1845, <2 x double> poison, <2 x i32> <i32 1, i32 0>
  %1865 = insertelement <2 x double> %1864, double %1848, i64 1
  %1866 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %1863, <2 x double> %1865, <2 x double> %1818)
  %1867 = insertelement <2 x double> %1864, double %1848, i64 0
  %1868 = insertelement <2 x double> poison, double %1859, i64 0
  %1869 = shufflevector <2 x double> %1868, <2 x double> poison, <2 x i32> zeroinitializer
  %1870 = fmul <2 x double> %1867, %1869
  %1871 = shufflevector <2 x double> %1870, <2 x double> poison, <2 x i32> <i32 1, i32 poison>
  %1872 = shufflevector <2 x double> %1870, <2 x double> poison, <2 x i32> <i32 1, i32 1>
  %1873 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %1872, <2 x double> %1845, <2 x double> %1817)
  %1874 = insertelement <2 x double> %1871, double %1861, i64 1
  %1875 = fadd <2 x double> %1820, %1874
  %1876 = load <2 x double>, ptr %1839, align 8, !tbaa !19
  %1877 = fsub <2 x double> %1876, %1874
  store <2 x double> %1877, ptr %1839, align 8, !tbaa !19
  %1878 = shufflevector <2 x double> %1867, <2 x double> poison, <2 x i32> zeroinitializer
  %1879 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %1870, <2 x double> %1878, <2 x double> %1819)
  %1880 = extractelement <2 x double> %1870, i64 0
  %1881 = fadd double %1816, %1880
  %1882 = getelementptr inbounds %class.Vector, ptr %648, i64 %1828, i32 2
  %1883 = load double, ptr %1882, align 8, !tbaa !87
  %1884 = fsub double %1883, %1880
  store double %1884, ptr %1882, align 8, !tbaa !87
  %1885 = add nuw nsw i64 %1815, 1
  %1886 = icmp eq i64 %1885, %1813
  br i1 %1886, label %1887, label %1814

1887:                                             ; preds = %1814, %1786
  %1888 = phi double [ 0.000000e+00, %1786 ], [ %1881, %1814 ]
  %1889 = phi <2 x double> [ %680, %1786 ], [ %1873, %1814 ]
  %1890 = phi <2 x double> [ %681, %1786 ], [ %1866, %1814 ]
  %1891 = phi <2 x double> [ %682, %1786 ], [ %1879, %1814 ]
  %1892 = phi <2 x double> [ zeroinitializer, %1786 ], [ %1875, %1814 ]
  %1893 = load double, ptr @_ZN20ComputeNonbondedUtil7cutoff2E, align 8, !tbaa !19
  %1894 = tail call noundef i32 @_Z22pairlist_from_pairlistddddPK8CompAtomPKtiPtdPd(double noundef %1893, double noundef %1807, double noundef %1808, double noundef %1787, ptr noundef %41, ptr noundef %1793, i32 noundef %1794, ptr noundef %94, double noundef %31, ptr noundef %140)
  %1895 = add nsw i32 %1894, %673
  %1896 = icmp sgt i32 %1894, 0
  br i1 %1896, label %1897, label %1985

1897:                                             ; preds = %1887
  %1898 = load ptr, ptr @_ZN20ComputeNonbondedUtil8r2_tableE, align 8, !tbaa !23
  %1899 = zext i32 %1894 to i64
  br label %1900

1900:                                             ; preds = %1897, %1900
  %1901 = phi i64 [ 0, %1897 ], [ %1983, %1900 ]
  %1902 = phi double [ %1888, %1897 ], [ %1979, %1900 ]
  %1903 = phi <2 x double> [ %1889, %1897 ], [ %1971, %1900 ]
  %1904 = phi <2 x double> [ %1890, %1897 ], [ %1964, %1900 ]
  %1905 = phi <2 x double> [ %1891, %1897 ], [ %1977, %1900 ]
  %1906 = phi <2 x double> [ %1892, %1897 ], [ %1973, %1900 ]
  %1907 = shl nuw nsw i64 %1901, 1
  %1908 = getelementptr inbounds i32, ptr %141, i64 %1907
  %1909 = load i32, ptr %1908, align 4, !tbaa !5
  %1910 = ashr i32 %1909, 14
  %1911 = add nsw i32 %1910, %34
  %1912 = getelementptr inbounds i16, ptr %94, i64 %1901
  %1913 = load i16, ptr %1912, align 2, !tbaa !44
  %1914 = zext i16 %1913 to i64
  %1915 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %1914
  %1916 = getelementptr inbounds double, ptr %140, i64 %1901
  %1917 = load double, ptr %1916, align 8, !tbaa !19
  %1918 = sext i32 %1911 to i64
  %1919 = getelementptr inbounds double, ptr %1898, i64 %1918
  %1920 = load double, ptr %1919, align 8, !tbaa !19
  %1921 = fsub double %1917, %1920
  %1922 = shl nsw i32 %1911, 4
  %1923 = sext i32 %1922 to i64
  %1924 = getelementptr inbounds double, ptr %26, i64 %1923
  %1925 = getelementptr inbounds %class.Vector, ptr %648, i64 %1914
  %1926 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %1914, i32 1
  %1927 = load float, ptr %1926, align 8, !tbaa !79
  %1928 = fpext float %1927 to double
  %1929 = fmul double %1805, %1928
  %1930 = load <2 x double>, ptr %1915, align 8, !tbaa !19
  %1931 = fsub <2 x double> %1799, %1930
  %1932 = getelementptr inbounds %class.Vector, ptr %1915, i64 0, i32 2
  %1933 = load double, ptr %1932, align 8, !tbaa !49
  %1934 = fsub double %1787, %1933
  %1935 = shl nsw i32 %1911, 2
  %1936 = sext i32 %1935 to i64
  %1937 = getelementptr inbounds double, ptr %27, i64 %1936
  %1938 = getelementptr inbounds double, ptr %1924, i64 12
  %1939 = load double, ptr %1938, align 8, !tbaa !19
  %1940 = getelementptr inbounds double, ptr %1924, i64 13
  %1941 = load double, ptr %1940, align 8, !tbaa !19
  %1942 = getelementptr inbounds double, ptr %1924, i64 14
  %1943 = load double, ptr %1942, align 8, !tbaa !19
  %1944 = getelementptr inbounds double, ptr %1937, i64 1
  %1945 = load double, ptr %1944, align 8, !tbaa !19
  %1946 = tail call double @llvm.fmuladd.f64(double %667, double %1945, double %1943)
  %1947 = getelementptr inbounds double, ptr %1937, i64 2
  %1948 = load double, ptr %1947, align 8, !tbaa !19
  %1949 = tail call double @llvm.fmuladd.f64(double %668, double %1948, double %1941)
  %1950 = getelementptr inbounds double, ptr %1937, i64 3
  %1951 = load double, ptr %1950, align 8, !tbaa !19
  %1952 = tail call double @llvm.fmuladd.f64(double %669, double %1951, double %1939)
  %1953 = fmul double %1929, %1952
  %1954 = fmul double %1929, %1949
  %1955 = fmul double %1929, %1946
  %1956 = tail call double @llvm.fmuladd.f64(double %1921, double %1953, double %1954)
  %1957 = tail call double @llvm.fmuladd.f64(double %1956, double %1921, double %1955)
  %1958 = extractelement <2 x double> %1931, i64 1
  %1959 = fmul double %1958, %1957
  %1960 = insertelement <2 x double> poison, double %1959, i64 0
  %1961 = shufflevector <2 x double> %1960, <2 x double> poison, <2 x i32> zeroinitializer
  %1962 = shufflevector <2 x double> %1931, <2 x double> poison, <2 x i32> <i32 1, i32 0>
  %1963 = insertelement <2 x double> %1962, double %1934, i64 1
  %1964 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %1961, <2 x double> %1963, <2 x double> %1904)
  %1965 = insertelement <2 x double> %1962, double %1934, i64 0
  %1966 = insertelement <2 x double> poison, double %1957, i64 0
  %1967 = shufflevector <2 x double> %1966, <2 x double> poison, <2 x i32> zeroinitializer
  %1968 = fmul <2 x double> %1965, %1967
  %1969 = shufflevector <2 x double> %1968, <2 x double> poison, <2 x i32> <i32 1, i32 poison>
  %1970 = shufflevector <2 x double> %1968, <2 x double> poison, <2 x i32> <i32 1, i32 1>
  %1971 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %1970, <2 x double> %1931, <2 x double> %1903)
  %1972 = insertelement <2 x double> %1969, double %1959, i64 1
  %1973 = fadd <2 x double> %1906, %1972
  %1974 = load <2 x double>, ptr %1925, align 8, !tbaa !19
  %1975 = fsub <2 x double> %1974, %1972
  store <2 x double> %1975, ptr %1925, align 8, !tbaa !19
  %1976 = shufflevector <2 x double> %1965, <2 x double> poison, <2 x i32> zeroinitializer
  %1977 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %1968, <2 x double> %1976, <2 x double> %1905)
  %1978 = extractelement <2 x double> %1968, i64 0
  %1979 = fadd double %1902, %1978
  %1980 = getelementptr inbounds %class.Vector, ptr %648, i64 %1914, i32 2
  %1981 = load double, ptr %1980, align 8, !tbaa !87
  %1982 = fsub double %1981, %1978
  store double %1982, ptr %1980, align 8, !tbaa !87
  %1983 = add nuw nsw i64 %1901, 1
  %1984 = icmp eq i64 %1983, %1899
  br i1 %1984, label %1985, label %1900

1985:                                             ; preds = %1900, %1887
  %1986 = phi double [ %1888, %1887 ], [ %1979, %1900 ]
  %1987 = phi <2 x double> [ %1889, %1887 ], [ %1971, %1900 ]
  %1988 = phi <2 x double> [ %1890, %1887 ], [ %1964, %1900 ]
  %1989 = phi <2 x double> [ %1891, %1887 ], [ %1977, %1900 ]
  %1990 = phi <2 x double> [ %1892, %1887 ], [ %1973, %1900 ]
  %1991 = load double, ptr @_ZN20ComputeNonbondedUtil7cutoff2E, align 8, !tbaa !19
  %1992 = tail call noundef i32 @_Z22pairlist_from_pairlistddddPK8CompAtomPKtiPtdPd(double noundef %1991, double noundef %1807, double noundef %1808, double noundef %1787, ptr noundef %41, ptr noundef %1791, i32 noundef %1792, ptr noundef %94, double noundef %31, ptr noundef %140)
  %1993 = add nsw i32 %1895, %1992
  %1994 = icmp sgt i32 %1992, 0
  br i1 %1994, label %1995, label %2083

1995:                                             ; preds = %1985
  %1996 = load ptr, ptr @_ZN20ComputeNonbondedUtil8r2_tableE, align 8, !tbaa !23
  %1997 = zext i32 %1992 to i64
  br label %1998

1998:                                             ; preds = %1995, %1998
  %1999 = phi i64 [ 0, %1995 ], [ %2081, %1998 ]
  %2000 = phi double [ %1986, %1995 ], [ %2077, %1998 ]
  %2001 = phi <2 x double> [ %1987, %1995 ], [ %2069, %1998 ]
  %2002 = phi <2 x double> [ %1988, %1995 ], [ %2062, %1998 ]
  %2003 = phi <2 x double> [ %1989, %1995 ], [ %2075, %1998 ]
  %2004 = phi <2 x double> [ %1990, %1995 ], [ %2071, %1998 ]
  %2005 = shl nuw nsw i64 %1999, 1
  %2006 = getelementptr inbounds i32, ptr %141, i64 %2005
  %2007 = load i32, ptr %2006, align 4, !tbaa !5
  %2008 = ashr i32 %2007, 14
  %2009 = add nsw i32 %2008, %34
  %2010 = getelementptr inbounds i16, ptr %94, i64 %1999
  %2011 = load i16, ptr %2010, align 2, !tbaa !44
  %2012 = zext i16 %2011 to i64
  %2013 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %2012
  %2014 = getelementptr inbounds double, ptr %140, i64 %1999
  %2015 = load double, ptr %2014, align 8, !tbaa !19
  %2016 = sext i32 %2009 to i64
  %2017 = getelementptr inbounds double, ptr %1996, i64 %2016
  %2018 = load double, ptr %2017, align 8, !tbaa !19
  %2019 = fsub double %2015, %2018
  %2020 = shl nsw i32 %2009, 4
  %2021 = sext i32 %2020 to i64
  %2022 = getelementptr inbounds double, ptr %26, i64 %2021
  %2023 = getelementptr inbounds %class.Vector, ptr %648, i64 %2012
  %2024 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %2012, i32 1
  %2025 = load float, ptr %2024, align 8, !tbaa !79
  %2026 = fpext float %2025 to double
  %2027 = fmul double %1805, %2026
  %2028 = load <2 x double>, ptr %2013, align 8, !tbaa !19
  %2029 = fsub <2 x double> %1799, %2028
  %2030 = getelementptr inbounds %class.Vector, ptr %2013, i64 0, i32 2
  %2031 = load double, ptr %2030, align 8, !tbaa !49
  %2032 = fsub double %1787, %2031
  %2033 = shl nsw i32 %2009, 2
  %2034 = sext i32 %2033 to i64
  %2035 = getelementptr inbounds double, ptr %27, i64 %2034
  %2036 = getelementptr inbounds double, ptr %2022, i64 12
  %2037 = load double, ptr %2036, align 8, !tbaa !19
  %2038 = getelementptr inbounds double, ptr %2022, i64 13
  %2039 = load double, ptr %2038, align 8, !tbaa !19
  %2040 = getelementptr inbounds double, ptr %2022, i64 14
  %2041 = load double, ptr %2040, align 8, !tbaa !19
  %2042 = getelementptr inbounds double, ptr %2035, i64 1
  %2043 = load double, ptr %2042, align 8, !tbaa !19
  %2044 = tail call double @llvm.fmuladd.f64(double %2043, double 2.000000e+00, double %2041)
  %2045 = getelementptr inbounds double, ptr %2035, i64 2
  %2046 = load double, ptr %2045, align 8, !tbaa !19
  %2047 = tail call double @llvm.fmuladd.f64(double %2046, double 4.000000e+00, double %2039)
  %2048 = getelementptr inbounds double, ptr %2035, i64 3
  %2049 = load double, ptr %2048, align 8, !tbaa !19
  %2050 = tail call double @llvm.fmuladd.f64(double %2049, double 6.000000e+00, double %2037)
  %2051 = fmul double %2027, %2050
  %2052 = fmul double %2027, %2047
  %2053 = fmul double %2027, %2044
  %2054 = tail call double @llvm.fmuladd.f64(double %2019, double %2051, double %2052)
  %2055 = tail call double @llvm.fmuladd.f64(double %2054, double %2019, double %2053)
  %2056 = extractelement <2 x double> %2029, i64 1
  %2057 = fmul double %2056, %2055
  %2058 = insertelement <2 x double> poison, double %2057, i64 0
  %2059 = shufflevector <2 x double> %2058, <2 x double> poison, <2 x i32> zeroinitializer
  %2060 = shufflevector <2 x double> %2029, <2 x double> poison, <2 x i32> <i32 1, i32 0>
  %2061 = insertelement <2 x double> %2060, double %2032, i64 1
  %2062 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2059, <2 x double> %2061, <2 x double> %2002)
  %2063 = insertelement <2 x double> %2060, double %2032, i64 0
  %2064 = insertelement <2 x double> poison, double %2055, i64 0
  %2065 = shufflevector <2 x double> %2064, <2 x double> poison, <2 x i32> zeroinitializer
  %2066 = fmul <2 x double> %2063, %2065
  %2067 = shufflevector <2 x double> %2066, <2 x double> poison, <2 x i32> <i32 1, i32 poison>
  %2068 = shufflevector <2 x double> %2066, <2 x double> poison, <2 x i32> <i32 1, i32 1>
  %2069 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2068, <2 x double> %2029, <2 x double> %2001)
  %2070 = insertelement <2 x double> %2067, double %2057, i64 1
  %2071 = fadd <2 x double> %2004, %2070
  %2072 = load <2 x double>, ptr %2023, align 8, !tbaa !19
  %2073 = fsub <2 x double> %2072, %2070
  store <2 x double> %2073, ptr %2023, align 8, !tbaa !19
  %2074 = shufflevector <2 x double> %2063, <2 x double> poison, <2 x i32> zeroinitializer
  %2075 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2066, <2 x double> %2074, <2 x double> %2003)
  %2076 = extractelement <2 x double> %2066, i64 0
  %2077 = fadd double %2000, %2076
  %2078 = getelementptr inbounds %class.Vector, ptr %648, i64 %2012, i32 2
  %2079 = load double, ptr %2078, align 8, !tbaa !87
  %2080 = fsub double %2079, %2076
  store double %2080, ptr %2078, align 8, !tbaa !87
  %2081 = add nuw nsw i64 %1999, 1
  %2082 = icmp eq i64 %2081, %1997
  br i1 %2082, label %2083, label %1998

2083:                                             ; preds = %1998, %1985
  %2084 = phi double [ %1986, %1985 ], [ %2077, %1998 ]
  %2085 = phi <2 x double> [ %1987, %1985 ], [ %2069, %1998 ]
  %2086 = phi <2 x double> [ %1988, %1985 ], [ %2062, %1998 ]
  %2087 = phi <2 x double> [ %1989, %1985 ], [ %2075, %1998 ]
  %2088 = phi <2 x double> [ %1990, %1985 ], [ %2071, %1998 ]
  %2089 = getelementptr inbounds %class.Vector, ptr %649, i64 %683
  %2090 = load <2 x double>, ptr %2089, align 8, !tbaa !19
  %2091 = fadd <2 x double> %2088, %2090
  store <2 x double> %2091, ptr %2089, align 8, !tbaa !19
  %2092 = getelementptr inbounds %class.Vector, ptr %649, i64 %683, i32 2
  %2093 = load double, ptr %2092, align 8, !tbaa !87
  %2094 = fadd double %2084, %2093
  store double %2094, ptr %2092, align 8, !tbaa !87
  br i1 %144, label %2097, label %2095

2095:                                             ; preds = %2083
  %2096 = add nsw i32 %674, 1
  br label %2105

2097:                                             ; preds = %2083
  %2098 = load ptr, ptr %8, align 8, !tbaa !46
  %2099 = load i32, ptr %13, align 8, !tbaa !17
  %2100 = add nsw i32 %2099, 1
  store i32 %2100, ptr %13, align 8, !tbaa !17
  %2101 = sext i32 %2099 to i64
  %2102 = getelementptr inbounds i16, ptr %2098, i64 %2101
  %2103 = load i16, ptr %2102, align 2, !tbaa !44
  %2104 = zext i16 %2103 to i32
  br label %2105

2105:                                             ; preds = %1125, %1393, %2097, %2095, %695
  %2106 = phi i32 [ %1788, %2097 ], [ %1788, %2095 ], [ %696, %695 ], [ %699, %1393 ], [ %699, %1125 ]
  %2107 = phi i32 [ %1795, %2097 ], [ %1795, %2095 ], [ %678, %695 ], [ %1139, %1393 ], [ 0, %1125 ]
  %2108 = phi ptr [ %1796, %2097 ], [ %1796, %2095 ], [ %677, %695 ], [ %949, %1393 ], [ %949, %1125 ]
  %2109 = phi ptr [ %1797, %2097 ], [ %1797, %2095 ], [ %676, %695 ], [ %950, %1393 ], [ %950, %1125 ]
  %2110 = phi ptr [ %1798, %2097 ], [ %1798, %2095 ], [ %675, %695 ], [ %951, %1393 ], [ %951, %1125 ]
  %2111 = phi i32 [ %2104, %2097 ], [ %2096, %2095 ], [ %697, %695 ], [ %1394, %1393 ], [ %1129, %1125 ]
  %2112 = phi i32 [ %1993, %2097 ], [ %1993, %2095 ], [ %673, %695 ], [ %673, %1393 ], [ %673, %1125 ]
  %2113 = phi <2 x double> [ %2085, %2097 ], [ %2085, %2095 ], [ %680, %695 ], [ %680, %1393 ], [ %680, %1125 ]
  %2114 = phi <2 x double> [ %2086, %2097 ], [ %2086, %2095 ], [ %681, %695 ], [ %681, %1393 ], [ %681, %1125 ]
  %2115 = phi <2 x double> [ %2087, %2097 ], [ %2087, %2095 ], [ %682, %695 ], [ %682, %1393 ], [ %682, %1125 ]
  %2116 = icmp slt i32 %2111, %36
  br i1 %2116, label %672, label %2117

2117:                                             ; preds = %2105, %645
  %2118 = phi ptr [ null, %645 ], [ %2110, %2105 ]
  %2119 = phi i32 [ %652, %645 ], [ %2111, %2105 ]
  %2120 = phi i32 [ 0, %645 ], [ %2112, %2105 ]
  %2121 = phi <2 x double> [ zeroinitializer, %645 ], [ %2113, %2105 ]
  %2122 = phi <2 x double> [ zeroinitializer, %645 ], [ %2114, %2105 ]
  %2123 = phi <2 x double> [ zeroinitializer, %645 ], [ %2115, %2105 ]
  br i1 %142, label %2131, label %2124

2124:                                             ; preds = %2117
  %2125 = trunc i32 %2119 to i16
  %2126 = load ptr, ptr %8, align 8, !tbaa !46
  %2127 = load i32, ptr %13, align 8, !tbaa !17
  %2128 = add nsw i32 %2127, -1
  %2129 = sext i32 %2128 to i64
  %2130 = getelementptr inbounds i16, ptr %2126, i64 %2129
  store i16 %2125, ptr %2130, align 2, !tbaa !44
  br label %2131

2131:                                             ; preds = %2124, %2117
  %2132 = sitofp i32 %2120 to double
  %2133 = getelementptr inbounds double, ptr %6, i64 22
  %2134 = load double, ptr %2133, align 8, !tbaa !19
  %2135 = fadd double %2134, %2132
  store double %2135, ptr %2133, align 8, !tbaa !19
  %2136 = getelementptr inbounds double, ptr %6, i64 12
  %2137 = load <4 x double>, ptr %2136, align 8, !tbaa !19
  %2138 = shufflevector <2 x double> %2121, <2 x double> %2123, <4 x i32> <i32 0, i32 1, i32 3, i32 poison>
  %2139 = shufflevector <4 x double> %2138, <4 x double> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 1>
  %2140 = fadd <4 x double> %2139, %2137
  store <4 x double> %2140, ptr %2136, align 8, !tbaa !19
  %2141 = getelementptr inbounds double, ptr %6, i64 16
  %2142 = load <4 x double>, ptr %2141, align 8, !tbaa !19
  %2143 = shufflevector <2 x double> %2122, <2 x double> %2123, <4 x i32> <i32 0, i32 1, i32 3, i32 poison>
  %2144 = shufflevector <4 x double> %2143, <4 x double> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 1>
  %2145 = fadd <4 x double> %2144, %2142
  store <4 x double> %2145, ptr %2141, align 8, !tbaa !19
  %2146 = getelementptr inbounds double, ptr %6, i64 20
  %2147 = load double, ptr %2146, align 8, !tbaa !19
  %2148 = extractelement <2 x double> %2123, i64 0
  %2149 = fadd double %2148, %2147
  store double %2149, ptr %2146, align 8, !tbaa !19
  %2150 = icmp eq ptr %2118, null
  br i1 %2150, label %2152, label %2151

2151:                                             ; preds = %2131
  tail call void @_ZdaPv(ptr noundef nonnull %2118) #10
  br label %2152

2152:                                             ; preds = %2131, %2151, %1
  ret void
}

; Function Attrs: sspstrong uwtable
define dso_local void @_ZN20ComputeNonbondedUtil31calc_pair_energy_slow_fullelectEP9nonbonded(ptr nocapture noundef readonly %0) local_unnamed_addr #0 align 2 {
  %2 = load i32, ptr @_ZN20ComputeNonbondedUtil8commOnlyE, align 4, !tbaa !5
  %3 = icmp eq i32 %2, 0
  br i1 %3, label %4, label %2198

4:                                                ; preds = %1
  %5 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 7
  %6 = load ptr, ptr %5, align 8, !tbaa !9
  %7 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 10
  %8 = load ptr, ptr %7, align 8, !tbaa !14
  %9 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 11
  %10 = load i32, ptr %9, align 8, !tbaa !15
  %11 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 12
  %12 = load i32, ptr %11, align 4, !tbaa !16
  %13 = getelementptr inbounds %class.Pairlists, ptr %8, i64 0, i32 1
  store i32 0, ptr %13, align 8, !tbaa !17
  %14 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 6
  %15 = load <2 x double>, ptr %14, align 8, !tbaa !19
  %16 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 6, i32 2
  %17 = load double, ptr %16, align 8, !tbaa !20
  %18 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 13
  %19 = load double, ptr %18, align 8, !tbaa !21
  %20 = fmul double %19, %19
  %21 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 14
  %22 = load double, ptr %21, align 8, !tbaa !22
  %23 = fmul double %22, %22
  %24 = load double, ptr @_ZN20ComputeNonbondedUtil12dielectric_1E, align 8, !tbaa !19
  %25 = load ptr, ptr @_ZN20ComputeNonbondedUtil3molE, align 8, !tbaa !23
  %26 = load ptr, ptr @_ZN20ComputeNonbondedUtil11table_shortE, align 8, !tbaa !23
  %27 = load ptr, ptr @_ZN20ComputeNonbondedUtil10slow_tableE, align 8, !tbaa !23
  %28 = load double, ptr @_ZN20ComputeNonbondedUtil7scalingE, align 8, !tbaa !19
  %29 = load double, ptr @_ZN20ComputeNonbondedUtil7scale14E, align 8, !tbaa !19
  %30 = fsub double 1.000000e+00, %29
  %31 = load double, ptr @_ZN20ComputeNonbondedUtil8r2_deltaE, align 8, !tbaa !19
  %32 = load i32, ptr @_ZN20ComputeNonbondedUtil12r2_delta_expE, align 4, !tbaa !5
  %33 = shl i32 %32, 6
  %34 = add i32 %33, -65472
  %35 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 5
  %36 = load i32, ptr %35, align 8, !tbaa !5
  %37 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 5, i64 1
  %38 = load i32, ptr %37, align 4, !tbaa !5
  %39 = load ptr, ptr %0, align 8, !tbaa !23
  %40 = getelementptr inbounds [2 x ptr], ptr %0, i64 0, i64 1
  %41 = load ptr, ptr %40, align 8, !tbaa !23
  %42 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 1
  %43 = load ptr, ptr %42, align 8, !tbaa !23
  %44 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 1, i64 1
  %45 = load ptr, ptr %44, align 8, !tbaa !23
  %46 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 9
  %47 = load ptr, ptr %46, align 8, !tbaa !24
  %48 = add nsw i32 %38, 5
  %49 = getelementptr inbounds %class.ResizeArray, ptr %47, i64 0, i32 1
  %50 = load ptr, ptr %49, align 8, !tbaa !25
  %51 = getelementptr inbounds %class.ResizeArrayRaw, ptr %50, i64 0, i32 2
  %52 = load i32, ptr %51, align 8, !tbaa !27
  %53 = icmp slt i32 %52, %48
  br i1 %53, label %54, label %92

54:                                               ; preds = %4
  %55 = getelementptr inbounds %class.ResizeArrayRaw, ptr %50, i64 0, i32 3
  %56 = load i32, ptr %55, align 4, !tbaa !30
  %57 = icmp slt i32 %56, %48
  br i1 %57, label %58, label %92

58:                                               ; preds = %54
  %59 = sitofp i32 %56 to float
  %60 = getelementptr inbounds %class.ResizeArrayRaw, ptr %50, i64 0, i32 5
  %61 = load float, ptr %60, align 4, !tbaa !31
  %62 = fmul float %61, %59
  %63 = fptosi float %62 to i32
  %64 = tail call i32 @llvm.smax.i32(i32 %63, i32 %48)
  %65 = sub nsw i32 %64, %56
  %66 = getelementptr inbounds %class.ResizeArrayRaw, ptr %50, i64 0, i32 6
  %67 = load i32, ptr %66, align 8, !tbaa !32
  %68 = icmp slt i32 %65, %67
  %69 = add nsw i32 %67, %56
  %70 = select i1 %68, i32 %69, i32 %64
  %71 = sext i32 %70 to i64
  %72 = shl nsw i64 %71, 1
  %73 = add nsw i64 %72, 31
  %74 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %73) #9
  %75 = getelementptr inbounds i8, ptr %74, i64 31
  %76 = ptrtoint ptr %75 to i64
  %77 = and i64 %76, 31
  %78 = sub nsw i64 0, %77
  %79 = getelementptr inbounds i8, ptr %75, i64 %78
  %80 = load ptr, ptr %50, align 8, !tbaa !33
  %81 = sext i32 %52 to i64
  %82 = shl nsw i64 %81, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %79, ptr align 1 %80, i64 %82, i1 false)
  %83 = icmp eq i32 %56, 0
  br i1 %83, label %89, label %84

84:                                               ; preds = %58
  %85 = getelementptr inbounds %class.ResizeArrayRaw, ptr %50, i64 0, i32 1
  %86 = load ptr, ptr %85, align 8, !tbaa !34
  %87 = icmp eq ptr %86, null
  br i1 %87, label %89, label %88

88:                                               ; preds = %84
  tail call void @_ZdaPv(ptr noundef nonnull %86) #10
  br label %89

89:                                               ; preds = %88, %84, %58
  %90 = getelementptr inbounds %class.ResizeArrayRaw, ptr %50, i64 0, i32 1
  store ptr %74, ptr %90, align 8, !tbaa !34
  store ptr %79, ptr %50, align 8, !tbaa !33
  store i32 %70, ptr %55, align 4, !tbaa !30
  %91 = load ptr, ptr %49, align 8, !tbaa !25
  br label %92

92:                                               ; preds = %4, %54, %89
  %93 = phi ptr [ %50, %4 ], [ %50, %54 ], [ %91, %89 ]
  store i32 %48, ptr %51, align 8, !tbaa !27
  %94 = load ptr, ptr %93, align 8, !tbaa !33
  %95 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %47, i64 0, i32 1, i32 1
  %96 = load ptr, ptr %95, align 8, !tbaa !35
  %97 = getelementptr inbounds %class.ResizeArrayRaw.23, ptr %96, i64 0, i32 2
  %98 = load i32, ptr %97, align 8, !tbaa !37
  %99 = icmp slt i32 %98, %48
  br i1 %99, label %100, label %138

100:                                              ; preds = %92
  %101 = getelementptr inbounds %class.ResizeArrayRaw.23, ptr %96, i64 0, i32 3
  %102 = load i32, ptr %101, align 4, !tbaa !39
  %103 = icmp slt i32 %102, %48
  br i1 %103, label %104, label %138

104:                                              ; preds = %100
  %105 = sitofp i32 %102 to float
  %106 = getelementptr inbounds %class.ResizeArrayRaw.23, ptr %96, i64 0, i32 5
  %107 = load float, ptr %106, align 4, !tbaa !40
  %108 = fmul float %107, %105
  %109 = fptosi float %108 to i32
  %110 = tail call i32 @llvm.smax.i32(i32 %109, i32 %48)
  %111 = sub nsw i32 %110, %102
  %112 = getelementptr inbounds %class.ResizeArrayRaw.23, ptr %96, i64 0, i32 6
  %113 = load i32, ptr %112, align 8, !tbaa !41
  %114 = icmp slt i32 %111, %113
  %115 = add nsw i32 %113, %102
  %116 = select i1 %114, i32 %115, i32 %110
  %117 = sext i32 %116 to i64
  %118 = shl nsw i64 %117, 3
  %119 = add nsw i64 %118, 31
  %120 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %119) #9
  %121 = getelementptr inbounds i8, ptr %120, i64 31
  %122 = ptrtoint ptr %121 to i64
  %123 = and i64 %122, 31
  %124 = sub nsw i64 0, %123
  %125 = getelementptr inbounds i8, ptr %121, i64 %124
  %126 = load ptr, ptr %96, align 8, !tbaa !42
  %127 = sext i32 %98 to i64
  %128 = shl nsw i64 %127, 3
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %125, ptr align 1 %126, i64 %128, i1 false)
  %129 = icmp eq i32 %102, 0
  br i1 %129, label %135, label %130

130:                                              ; preds = %104
  %131 = getelementptr inbounds %class.ResizeArrayRaw.23, ptr %96, i64 0, i32 1
  %132 = load ptr, ptr %131, align 8, !tbaa !43
  %133 = icmp eq ptr %132, null
  br i1 %133, label %135, label %134

134:                                              ; preds = %130
  tail call void @_ZdaPv(ptr noundef nonnull %132) #10
  br label %135

135:                                              ; preds = %134, %130, %104
  %136 = getelementptr inbounds %class.ResizeArrayRaw.23, ptr %96, i64 0, i32 1
  store ptr %120, ptr %136, align 8, !tbaa !43
  store ptr %125, ptr %96, align 8, !tbaa !42
  store i32 %116, ptr %101, align 4, !tbaa !39
  %137 = load ptr, ptr %95, align 8, !tbaa !35
  br label %138

138:                                              ; preds = %92, %100, %135
  %139 = phi ptr [ %96, %92 ], [ %96, %100 ], [ %137, %135 ]
  store i32 %48, ptr %97, align 8, !tbaa !37
  %140 = load ptr, ptr %139, align 8, !tbaa !42
  %141 = getelementptr inbounds i32, ptr %140, i64 1
  %142 = icmp eq i32 %10, 0
  %143 = icmp ne i32 %12, 0
  %144 = select i1 %142, i1 %143, i1 false
  %145 = select i1 %144, i32 0, i32 %48
  %146 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %47, i64 0, i32 2, i32 1
  %147 = load ptr, ptr %146, align 8, !tbaa !25
  %148 = getelementptr inbounds %class.ResizeArrayRaw, ptr %147, i64 0, i32 2
  %149 = load i32, ptr %148, align 8, !tbaa !27
  %150 = icmp slt i32 %149, %145
  br i1 %150, label %151, label %189

151:                                              ; preds = %138
  %152 = getelementptr inbounds %class.ResizeArrayRaw, ptr %147, i64 0, i32 3
  %153 = load i32, ptr %152, align 4, !tbaa !30
  %154 = icmp slt i32 %153, %145
  br i1 %154, label %155, label %189

155:                                              ; preds = %151
  %156 = sitofp i32 %153 to float
  %157 = getelementptr inbounds %class.ResizeArrayRaw, ptr %147, i64 0, i32 5
  %158 = load float, ptr %157, align 4, !tbaa !31
  %159 = fmul float %158, %156
  %160 = fptosi float %159 to i32
  %161 = tail call i32 @llvm.smax.i32(i32 %160, i32 %145)
  %162 = sub nsw i32 %161, %153
  %163 = getelementptr inbounds %class.ResizeArrayRaw, ptr %147, i64 0, i32 6
  %164 = load i32, ptr %163, align 8, !tbaa !32
  %165 = icmp slt i32 %162, %164
  %166 = add nsw i32 %164, %153
  %167 = select i1 %165, i32 %166, i32 %161
  %168 = sext i32 %167 to i64
  %169 = shl nsw i64 %168, 1
  %170 = add nsw i64 %169, 31
  %171 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %170) #9
  %172 = getelementptr inbounds i8, ptr %171, i64 31
  %173 = ptrtoint ptr %172 to i64
  %174 = and i64 %173, 31
  %175 = sub nsw i64 0, %174
  %176 = getelementptr inbounds i8, ptr %172, i64 %175
  %177 = load ptr, ptr %147, align 8, !tbaa !33
  %178 = sext i32 %149 to i64
  %179 = shl nsw i64 %178, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %176, ptr align 1 %177, i64 %179, i1 false)
  %180 = icmp eq i32 %153, 0
  br i1 %180, label %186, label %181

181:                                              ; preds = %155
  %182 = getelementptr inbounds %class.ResizeArrayRaw, ptr %147, i64 0, i32 1
  %183 = load ptr, ptr %182, align 8, !tbaa !34
  %184 = icmp eq ptr %183, null
  br i1 %184, label %186, label %185

185:                                              ; preds = %181
  tail call void @_ZdaPv(ptr noundef nonnull %183) #10
  br label %186

186:                                              ; preds = %185, %181, %155
  %187 = getelementptr inbounds %class.ResizeArrayRaw, ptr %147, i64 0, i32 1
  store ptr %171, ptr %187, align 8, !tbaa !34
  store ptr %176, ptr %147, align 8, !tbaa !33
  store i32 %167, ptr %152, align 4, !tbaa !30
  %188 = load ptr, ptr %146, align 8, !tbaa !25
  br label %189

189:                                              ; preds = %138, %151, %186
  %190 = phi ptr [ %147, %138 ], [ %147, %151 ], [ %188, %186 ]
  store i32 %145, ptr %148, align 8, !tbaa !27
  %191 = load ptr, ptr %190, align 8, !tbaa !33
  %192 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %47, i64 0, i32 3, i32 1
  %193 = load ptr, ptr %192, align 8, !tbaa !25
  %194 = getelementptr inbounds %class.ResizeArrayRaw, ptr %193, i64 0, i32 2
  %195 = load i32, ptr %194, align 8, !tbaa !27
  %196 = icmp slt i32 %195, %145
  br i1 %196, label %197, label %235

197:                                              ; preds = %189
  %198 = getelementptr inbounds %class.ResizeArrayRaw, ptr %193, i64 0, i32 3
  %199 = load i32, ptr %198, align 4, !tbaa !30
  %200 = icmp slt i32 %199, %145
  br i1 %200, label %201, label %235

201:                                              ; preds = %197
  %202 = sitofp i32 %199 to float
  %203 = getelementptr inbounds %class.ResizeArrayRaw, ptr %193, i64 0, i32 5
  %204 = load float, ptr %203, align 4, !tbaa !31
  %205 = fmul float %204, %202
  %206 = fptosi float %205 to i32
  %207 = tail call i32 @llvm.smax.i32(i32 %206, i32 %145)
  %208 = sub nsw i32 %207, %199
  %209 = getelementptr inbounds %class.ResizeArrayRaw, ptr %193, i64 0, i32 6
  %210 = load i32, ptr %209, align 8, !tbaa !32
  %211 = icmp slt i32 %208, %210
  %212 = add nsw i32 %210, %199
  %213 = select i1 %211, i32 %212, i32 %207
  %214 = sext i32 %213 to i64
  %215 = shl nsw i64 %214, 1
  %216 = add nsw i64 %215, 31
  %217 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %216) #9
  %218 = getelementptr inbounds i8, ptr %217, i64 31
  %219 = ptrtoint ptr %218 to i64
  %220 = and i64 %219, 31
  %221 = sub nsw i64 0, %220
  %222 = getelementptr inbounds i8, ptr %218, i64 %221
  %223 = load ptr, ptr %193, align 8, !tbaa !33
  %224 = sext i32 %195 to i64
  %225 = shl nsw i64 %224, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %222, ptr align 1 %223, i64 %225, i1 false)
  %226 = icmp eq i32 %199, 0
  br i1 %226, label %232, label %227

227:                                              ; preds = %201
  %228 = getelementptr inbounds %class.ResizeArrayRaw, ptr %193, i64 0, i32 1
  %229 = load ptr, ptr %228, align 8, !tbaa !34
  %230 = icmp eq ptr %229, null
  br i1 %230, label %232, label %231

231:                                              ; preds = %227
  tail call void @_ZdaPv(ptr noundef nonnull %229) #10
  br label %232

232:                                              ; preds = %231, %227, %201
  %233 = getelementptr inbounds %class.ResizeArrayRaw, ptr %193, i64 0, i32 1
  store ptr %217, ptr %233, align 8, !tbaa !34
  store ptr %222, ptr %193, align 8, !tbaa !33
  store i32 %213, ptr %198, align 4, !tbaa !30
  %234 = load ptr, ptr %192, align 8, !tbaa !25
  br label %235

235:                                              ; preds = %189, %197, %232
  %236 = phi ptr [ %193, %189 ], [ %193, %197 ], [ %234, %232 ]
  store i32 %145, ptr %194, align 8, !tbaa !27
  %237 = load ptr, ptr %236, align 8, !tbaa !33
  %238 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %47, i64 0, i32 4, i32 1
  %239 = load ptr, ptr %238, align 8, !tbaa !25
  %240 = getelementptr inbounds %class.ResizeArrayRaw, ptr %239, i64 0, i32 2
  %241 = load i32, ptr %240, align 8, !tbaa !27
  %242 = icmp slt i32 %241, %145
  br i1 %242, label %243, label %281

243:                                              ; preds = %235
  %244 = getelementptr inbounds %class.ResizeArrayRaw, ptr %239, i64 0, i32 3
  %245 = load i32, ptr %244, align 4, !tbaa !30
  %246 = icmp slt i32 %245, %145
  br i1 %246, label %247, label %281

247:                                              ; preds = %243
  %248 = sitofp i32 %245 to float
  %249 = getelementptr inbounds %class.ResizeArrayRaw, ptr %239, i64 0, i32 5
  %250 = load float, ptr %249, align 4, !tbaa !31
  %251 = fmul float %250, %248
  %252 = fptosi float %251 to i32
  %253 = tail call i32 @llvm.smax.i32(i32 %252, i32 %145)
  %254 = sub nsw i32 %253, %245
  %255 = getelementptr inbounds %class.ResizeArrayRaw, ptr %239, i64 0, i32 6
  %256 = load i32, ptr %255, align 8, !tbaa !32
  %257 = icmp slt i32 %254, %256
  %258 = add nsw i32 %256, %245
  %259 = select i1 %257, i32 %258, i32 %253
  %260 = sext i32 %259 to i64
  %261 = shl nsw i64 %260, 1
  %262 = add nsw i64 %261, 31
  %263 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %262) #9
  %264 = getelementptr inbounds i8, ptr %263, i64 31
  %265 = ptrtoint ptr %264 to i64
  %266 = and i64 %265, 31
  %267 = sub nsw i64 0, %266
  %268 = getelementptr inbounds i8, ptr %264, i64 %267
  %269 = load ptr, ptr %239, align 8, !tbaa !33
  %270 = sext i32 %241 to i64
  %271 = shl nsw i64 %270, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %268, ptr align 1 %269, i64 %271, i1 false)
  %272 = icmp eq i32 %245, 0
  br i1 %272, label %278, label %273

273:                                              ; preds = %247
  %274 = getelementptr inbounds %class.ResizeArrayRaw, ptr %239, i64 0, i32 1
  %275 = load ptr, ptr %274, align 8, !tbaa !34
  %276 = icmp eq ptr %275, null
  br i1 %276, label %278, label %277

277:                                              ; preds = %273
  tail call void @_ZdaPv(ptr noundef nonnull %275) #10
  br label %278

278:                                              ; preds = %277, %273, %247
  %279 = getelementptr inbounds %class.ResizeArrayRaw, ptr %239, i64 0, i32 1
  store ptr %263, ptr %279, align 8, !tbaa !34
  store ptr %268, ptr %239, align 8, !tbaa !33
  store i32 %259, ptr %244, align 4, !tbaa !30
  %280 = load ptr, ptr %238, align 8, !tbaa !25
  br label %281

281:                                              ; preds = %235, %243, %278
  %282 = phi ptr [ %239, %235 ], [ %239, %243 ], [ %280, %278 ]
  store i32 %145, ptr %240, align 8, !tbaa !27
  %283 = load ptr, ptr %282, align 8, !tbaa !33
  %284 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %47, i64 0, i32 5, i32 1
  %285 = load ptr, ptr %284, align 8, !tbaa !25
  %286 = getelementptr inbounds %class.ResizeArrayRaw, ptr %285, i64 0, i32 2
  %287 = load i32, ptr %286, align 8, !tbaa !27
  %288 = icmp slt i32 %287, %145
  br i1 %288, label %289, label %327

289:                                              ; preds = %281
  %290 = getelementptr inbounds %class.ResizeArrayRaw, ptr %285, i64 0, i32 3
  %291 = load i32, ptr %290, align 4, !tbaa !30
  %292 = icmp slt i32 %291, %145
  br i1 %292, label %293, label %327

293:                                              ; preds = %289
  %294 = sitofp i32 %291 to float
  %295 = getelementptr inbounds %class.ResizeArrayRaw, ptr %285, i64 0, i32 5
  %296 = load float, ptr %295, align 4, !tbaa !31
  %297 = fmul float %296, %294
  %298 = fptosi float %297 to i32
  %299 = tail call i32 @llvm.smax.i32(i32 %298, i32 %145)
  %300 = sub nsw i32 %299, %291
  %301 = getelementptr inbounds %class.ResizeArrayRaw, ptr %285, i64 0, i32 6
  %302 = load i32, ptr %301, align 8, !tbaa !32
  %303 = icmp slt i32 %300, %302
  %304 = add nsw i32 %302, %291
  %305 = select i1 %303, i32 %304, i32 %299
  %306 = sext i32 %305 to i64
  %307 = shl nsw i64 %306, 1
  %308 = add nsw i64 %307, 31
  %309 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %308) #9
  %310 = getelementptr inbounds i8, ptr %309, i64 31
  %311 = ptrtoint ptr %310 to i64
  %312 = and i64 %311, 31
  %313 = sub nsw i64 0, %312
  %314 = getelementptr inbounds i8, ptr %310, i64 %313
  %315 = load ptr, ptr %285, align 8, !tbaa !33
  %316 = sext i32 %287 to i64
  %317 = shl nsw i64 %316, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %314, ptr align 1 %315, i64 %317, i1 false)
  %318 = icmp eq i32 %291, 0
  br i1 %318, label %324, label %319

319:                                              ; preds = %293
  %320 = getelementptr inbounds %class.ResizeArrayRaw, ptr %285, i64 0, i32 1
  %321 = load ptr, ptr %320, align 8, !tbaa !34
  %322 = icmp eq ptr %321, null
  br i1 %322, label %324, label %323

323:                                              ; preds = %319
  tail call void @_ZdaPv(ptr noundef nonnull %321) #10
  br label %324

324:                                              ; preds = %323, %319, %293
  %325 = getelementptr inbounds %class.ResizeArrayRaw, ptr %285, i64 0, i32 1
  store ptr %309, ptr %325, align 8, !tbaa !34
  store ptr %314, ptr %285, align 8, !tbaa !33
  store i32 %305, ptr %290, align 4, !tbaa !30
  %326 = load ptr, ptr %284, align 8, !tbaa !25
  br label %327

327:                                              ; preds = %281, %289, %324
  %328 = phi ptr [ %285, %281 ], [ %285, %289 ], [ %326, %324 ]
  store i32 %145, ptr %286, align 8, !tbaa !27
  %329 = load ptr, ptr %328, align 8, !tbaa !33
  %330 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %47, i64 0, i32 6, i32 1
  %331 = load ptr, ptr %330, align 8, !tbaa !25
  %332 = getelementptr inbounds %class.ResizeArrayRaw, ptr %331, i64 0, i32 2
  %333 = load i32, ptr %332, align 8, !tbaa !27
  %334 = icmp slt i32 %333, %145
  br i1 %334, label %335, label %373

335:                                              ; preds = %327
  %336 = getelementptr inbounds %class.ResizeArrayRaw, ptr %331, i64 0, i32 3
  %337 = load i32, ptr %336, align 4, !tbaa !30
  %338 = icmp slt i32 %337, %145
  br i1 %338, label %339, label %373

339:                                              ; preds = %335
  %340 = sitofp i32 %337 to float
  %341 = getelementptr inbounds %class.ResizeArrayRaw, ptr %331, i64 0, i32 5
  %342 = load float, ptr %341, align 4, !tbaa !31
  %343 = fmul float %342, %340
  %344 = fptosi float %343 to i32
  %345 = tail call i32 @llvm.smax.i32(i32 %344, i32 %145)
  %346 = sub nsw i32 %345, %337
  %347 = getelementptr inbounds %class.ResizeArrayRaw, ptr %331, i64 0, i32 6
  %348 = load i32, ptr %347, align 8, !tbaa !32
  %349 = icmp slt i32 %346, %348
  %350 = add nsw i32 %348, %337
  %351 = select i1 %349, i32 %350, i32 %345
  %352 = sext i32 %351 to i64
  %353 = shl nsw i64 %352, 1
  %354 = add nsw i64 %353, 31
  %355 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %354) #9
  %356 = getelementptr inbounds i8, ptr %355, i64 31
  %357 = ptrtoint ptr %356 to i64
  %358 = and i64 %357, 31
  %359 = sub nsw i64 0, %358
  %360 = getelementptr inbounds i8, ptr %356, i64 %359
  %361 = load ptr, ptr %331, align 8, !tbaa !33
  %362 = sext i32 %333 to i64
  %363 = shl nsw i64 %362, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %360, ptr align 1 %361, i64 %363, i1 false)
  %364 = icmp eq i32 %337, 0
  br i1 %364, label %370, label %365

365:                                              ; preds = %339
  %366 = getelementptr inbounds %class.ResizeArrayRaw, ptr %331, i64 0, i32 1
  %367 = load ptr, ptr %366, align 8, !tbaa !34
  %368 = icmp eq ptr %367, null
  br i1 %368, label %370, label %369

369:                                              ; preds = %365
  tail call void @_ZdaPv(ptr noundef nonnull %367) #10
  br label %370

370:                                              ; preds = %369, %365, %339
  %371 = getelementptr inbounds %class.ResizeArrayRaw, ptr %331, i64 0, i32 1
  store ptr %355, ptr %371, align 8, !tbaa !34
  store ptr %360, ptr %331, align 8, !tbaa !33
  store i32 %351, ptr %336, align 4, !tbaa !30
  %372 = load ptr, ptr %330, align 8, !tbaa !25
  br label %373

373:                                              ; preds = %327, %335, %370
  %374 = phi ptr [ %331, %327 ], [ %331, %335 ], [ %372, %370 ]
  store i32 %145, ptr %332, align 8, !tbaa !27
  %375 = load ptr, ptr %374, align 8, !tbaa !33
  %376 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %47, i64 0, i32 15, i32 1
  %377 = load ptr, ptr %376, align 8, !tbaa !25
  %378 = getelementptr inbounds %class.ResizeArrayRaw, ptr %377, i64 0, i32 2
  %379 = load i32, ptr %378, align 8, !tbaa !27
  %380 = icmp slt i32 %379, %145
  br i1 %380, label %381, label %419

381:                                              ; preds = %373
  %382 = getelementptr inbounds %class.ResizeArrayRaw, ptr %377, i64 0, i32 3
  %383 = load i32, ptr %382, align 4, !tbaa !30
  %384 = icmp slt i32 %383, %145
  br i1 %384, label %385, label %419

385:                                              ; preds = %381
  %386 = sitofp i32 %383 to float
  %387 = getelementptr inbounds %class.ResizeArrayRaw, ptr %377, i64 0, i32 5
  %388 = load float, ptr %387, align 4, !tbaa !31
  %389 = fmul float %388, %386
  %390 = fptosi float %389 to i32
  %391 = tail call i32 @llvm.smax.i32(i32 %390, i32 %145)
  %392 = sub nsw i32 %391, %383
  %393 = getelementptr inbounds %class.ResizeArrayRaw, ptr %377, i64 0, i32 6
  %394 = load i32, ptr %393, align 8, !tbaa !32
  %395 = icmp slt i32 %392, %394
  %396 = add nsw i32 %394, %383
  %397 = select i1 %395, i32 %396, i32 %391
  %398 = sext i32 %397 to i64
  %399 = shl nsw i64 %398, 1
  %400 = add nsw i64 %399, 31
  %401 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %400) #9
  %402 = getelementptr inbounds i8, ptr %401, i64 31
  %403 = ptrtoint ptr %402 to i64
  %404 = and i64 %403, 31
  %405 = sub nsw i64 0, %404
  %406 = getelementptr inbounds i8, ptr %402, i64 %405
  %407 = load ptr, ptr %377, align 8, !tbaa !33
  %408 = sext i32 %379 to i64
  %409 = shl nsw i64 %408, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %406, ptr align 1 %407, i64 %409, i1 false)
  %410 = icmp eq i32 %383, 0
  br i1 %410, label %416, label %411

411:                                              ; preds = %385
  %412 = getelementptr inbounds %class.ResizeArrayRaw, ptr %377, i64 0, i32 1
  %413 = load ptr, ptr %412, align 8, !tbaa !34
  %414 = icmp eq ptr %413, null
  br i1 %414, label %416, label %415

415:                                              ; preds = %411
  tail call void @_ZdaPv(ptr noundef nonnull %413) #10
  br label %416

416:                                              ; preds = %415, %411, %385
  %417 = getelementptr inbounds %class.ResizeArrayRaw, ptr %377, i64 0, i32 1
  store ptr %401, ptr %417, align 8, !tbaa !34
  store ptr %406, ptr %377, align 8, !tbaa !33
  store i32 %397, ptr %382, align 4, !tbaa !30
  %418 = load ptr, ptr %376, align 8, !tbaa !25
  br label %419

419:                                              ; preds = %373, %381, %416
  %420 = phi ptr [ %377, %373 ], [ %377, %381 ], [ %418, %416 ]
  store i32 %145, ptr %378, align 8, !tbaa !27
  %421 = load ptr, ptr %420, align 8, !tbaa !33
  %422 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %47, i64 0, i32 16, i32 1
  %423 = load ptr, ptr %422, align 8, !tbaa !25
  %424 = getelementptr inbounds %class.ResizeArrayRaw, ptr %423, i64 0, i32 2
  %425 = load i32, ptr %424, align 8, !tbaa !27
  %426 = icmp slt i32 %425, %145
  br i1 %426, label %427, label %465

427:                                              ; preds = %419
  %428 = getelementptr inbounds %class.ResizeArrayRaw, ptr %423, i64 0, i32 3
  %429 = load i32, ptr %428, align 4, !tbaa !30
  %430 = icmp slt i32 %429, %145
  br i1 %430, label %431, label %465

431:                                              ; preds = %427
  %432 = sitofp i32 %429 to float
  %433 = getelementptr inbounds %class.ResizeArrayRaw, ptr %423, i64 0, i32 5
  %434 = load float, ptr %433, align 4, !tbaa !31
  %435 = fmul float %434, %432
  %436 = fptosi float %435 to i32
  %437 = tail call i32 @llvm.smax.i32(i32 %436, i32 %145)
  %438 = sub nsw i32 %437, %429
  %439 = getelementptr inbounds %class.ResizeArrayRaw, ptr %423, i64 0, i32 6
  %440 = load i32, ptr %439, align 8, !tbaa !32
  %441 = icmp slt i32 %438, %440
  %442 = add nsw i32 %440, %429
  %443 = select i1 %441, i32 %442, i32 %437
  %444 = sext i32 %443 to i64
  %445 = shl nsw i64 %444, 1
  %446 = add nsw i64 %445, 31
  %447 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %446) #9
  %448 = getelementptr inbounds i8, ptr %447, i64 31
  %449 = ptrtoint ptr %448 to i64
  %450 = and i64 %449, 31
  %451 = sub nsw i64 0, %450
  %452 = getelementptr inbounds i8, ptr %448, i64 %451
  %453 = load ptr, ptr %423, align 8, !tbaa !33
  %454 = sext i32 %425 to i64
  %455 = shl nsw i64 %454, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %452, ptr align 1 %453, i64 %455, i1 false)
  %456 = icmp eq i32 %429, 0
  br i1 %456, label %462, label %457

457:                                              ; preds = %431
  %458 = getelementptr inbounds %class.ResizeArrayRaw, ptr %423, i64 0, i32 1
  %459 = load ptr, ptr %458, align 8, !tbaa !34
  %460 = icmp eq ptr %459, null
  br i1 %460, label %462, label %461

461:                                              ; preds = %457
  tail call void @_ZdaPv(ptr noundef nonnull %459) #10
  br label %462

462:                                              ; preds = %461, %457, %431
  %463 = getelementptr inbounds %class.ResizeArrayRaw, ptr %423, i64 0, i32 1
  store ptr %447, ptr %463, align 8, !tbaa !34
  store ptr %452, ptr %423, align 8, !tbaa !33
  store i32 %443, ptr %428, align 4, !tbaa !30
  %464 = load ptr, ptr %422, align 8, !tbaa !25
  br label %465

465:                                              ; preds = %419, %427, %462
  %466 = phi ptr [ %423, %419 ], [ %423, %427 ], [ %464, %462 ]
  store i32 %145, ptr %424, align 8, !tbaa !27
  %467 = load ptr, ptr %466, align 8, !tbaa !33
  br i1 %144, label %600, label %468

468:                                              ; preds = %465
  %469 = icmp sgt i32 %38, 0
  br i1 %469, label %470, label %612

470:                                              ; preds = %468
  %471 = zext i32 %38 to i64
  %472 = and i64 %471, 1
  %473 = icmp eq i32 %38, 1
  br i1 %473, label %506, label %474

474:                                              ; preds = %470
  %475 = and i64 %471, 4294967294
  br label %476

476:                                              ; preds = %501, %474
  %477 = phi i64 [ 0, %474 ], [ %503, %501 ]
  %478 = phi i32 [ 0, %474 ], [ %502, %501 ]
  %479 = phi i64 [ 0, %474 ], [ %504, %501 ]
  %480 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %477, i32 4
  %481 = load i8, ptr %480, align 1
  %482 = and i8 %481, 7
  %483 = icmp eq i8 %482, 0
  br i1 %483, label %489, label %484

484:                                              ; preds = %476
  %485 = trunc i64 %477 to i16
  %486 = add nsw i32 %478, 1
  %487 = sext i32 %478 to i64
  %488 = getelementptr inbounds i16, ptr %191, i64 %487
  store i16 %485, ptr %488, align 2, !tbaa !44
  br label %489

489:                                              ; preds = %476, %484
  %490 = phi i32 [ %486, %484 ], [ %478, %476 ]
  %491 = or i64 %477, 1
  %492 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %491, i32 4
  %493 = load i8, ptr %492, align 1
  %494 = and i8 %493, 7
  %495 = icmp eq i8 %494, 0
  br i1 %495, label %501, label %496

496:                                              ; preds = %489
  %497 = trunc i64 %491 to i16
  %498 = add nsw i32 %490, 1
  %499 = sext i32 %490 to i64
  %500 = getelementptr inbounds i16, ptr %191, i64 %499
  store i16 %497, ptr %500, align 2, !tbaa !44
  br label %501

501:                                              ; preds = %496, %489
  %502 = phi i32 [ %498, %496 ], [ %490, %489 ]
  %503 = add nuw nsw i64 %477, 2
  %504 = add i64 %479, 2
  %505 = icmp eq i64 %504, %475
  br i1 %505, label %506, label %476

506:                                              ; preds = %501, %470
  %507 = phi i32 [ undef, %470 ], [ %502, %501 ]
  %508 = phi i64 [ 0, %470 ], [ %503, %501 ]
  %509 = phi i32 [ 0, %470 ], [ %502, %501 ]
  %510 = icmp eq i64 %472, 0
  br i1 %510, label %521, label %511

511:                                              ; preds = %506
  %512 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %508, i32 4
  %513 = load i8, ptr %512, align 1
  %514 = and i8 %513, 7
  %515 = icmp eq i8 %514, 0
  br i1 %515, label %521, label %516

516:                                              ; preds = %511
  %517 = trunc i64 %508 to i16
  %518 = add nsw i32 %509, 1
  %519 = sext i32 %509 to i64
  %520 = getelementptr inbounds i16, ptr %191, i64 %519
  store i16 %517, ptr %520, align 2, !tbaa !44
  br label %521

521:                                              ; preds = %511, %516, %506
  %522 = phi i32 [ %507, %506 ], [ %518, %516 ], [ %509, %511 ]
  %523 = icmp eq i32 %522, 0
  br i1 %523, label %531, label %524

524:                                              ; preds = %521
  %525 = add nsw i32 %522, -1
  %526 = sext i32 %525 to i64
  %527 = getelementptr inbounds i16, ptr %191, i64 %526
  %528 = load i16, ptr %527, align 2, !tbaa !44
  %529 = sext i32 %522 to i64
  %530 = getelementptr inbounds i16, ptr %191, i64 %529
  store i16 %528, ptr %530, align 2, !tbaa !44
  br label %531

531:                                              ; preds = %524, %521
  %532 = load i32, ptr @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4, !tbaa !5
  %533 = icmp ne i32 %532, 0
  %534 = icmp sgt i32 %522, 0
  %535 = and i1 %533, %534
  br i1 %535, label %536, label %612

536:                                              ; preds = %531
  %537 = zext i32 %522 to i64
  %538 = and i64 %537, 1
  %539 = icmp eq i32 %522, 1
  br i1 %539, label %574, label %540

540:                                              ; preds = %536
  %541 = and i64 %537, 4294967294
  br label %542

542:                                              ; preds = %569, %540
  %543 = phi i64 [ 0, %540 ], [ %571, %569 ]
  %544 = phi i32 [ 0, %540 ], [ %570, %569 ]
  %545 = phi i64 [ 0, %540 ], [ %572, %569 ]
  %546 = getelementptr inbounds i16, ptr %191, i64 %543
  %547 = load i16, ptr %546, align 2, !tbaa !44
  %548 = zext i16 %547 to i64
  %549 = getelementptr inbounds %struct.CompAtomExt, ptr %45, i64 %548
  %550 = load i32, ptr %549, align 4
  %551 = icmp sgt i32 %550, -1
  br i1 %551, label %552, label %556

552:                                              ; preds = %542
  %553 = add nsw i32 %544, 1
  %554 = sext i32 %544 to i64
  %555 = getelementptr inbounds i16, ptr %237, i64 %554
  store i16 %547, ptr %555, align 2, !tbaa !44
  br label %556

556:                                              ; preds = %542, %552
  %557 = phi i32 [ %544, %542 ], [ %553, %552 ]
  %558 = or i64 %543, 1
  %559 = getelementptr inbounds i16, ptr %191, i64 %558
  %560 = load i16, ptr %559, align 2, !tbaa !44
  %561 = zext i16 %560 to i64
  %562 = getelementptr inbounds %struct.CompAtomExt, ptr %45, i64 %561
  %563 = load i32, ptr %562, align 4
  %564 = icmp sgt i32 %563, -1
  br i1 %564, label %565, label %569

565:                                              ; preds = %556
  %566 = add nsw i32 %557, 1
  %567 = sext i32 %557 to i64
  %568 = getelementptr inbounds i16, ptr %237, i64 %567
  store i16 %560, ptr %568, align 2, !tbaa !44
  br label %569

569:                                              ; preds = %565, %556
  %570 = phi i32 [ %557, %556 ], [ %566, %565 ]
  %571 = add nuw nsw i64 %543, 2
  %572 = add i64 %545, 2
  %573 = icmp eq i64 %572, %541
  br i1 %573, label %574, label %542

574:                                              ; preds = %569, %536
  %575 = phi i32 [ undef, %536 ], [ %570, %569 ]
  %576 = phi i64 [ 0, %536 ], [ %571, %569 ]
  %577 = phi i32 [ 0, %536 ], [ %570, %569 ]
  %578 = icmp eq i64 %538, 0
  br i1 %578, label %590, label %579

579:                                              ; preds = %574
  %580 = getelementptr inbounds i16, ptr %191, i64 %576
  %581 = load i16, ptr %580, align 2, !tbaa !44
  %582 = zext i16 %581 to i64
  %583 = getelementptr inbounds %struct.CompAtomExt, ptr %45, i64 %582
  %584 = load i32, ptr %583, align 4
  %585 = icmp sgt i32 %584, -1
  br i1 %585, label %586, label %590

586:                                              ; preds = %579
  %587 = add nsw i32 %577, 1
  %588 = sext i32 %577 to i64
  %589 = getelementptr inbounds i16, ptr %237, i64 %588
  store i16 %581, ptr %589, align 2, !tbaa !44
  br label %590

590:                                              ; preds = %579, %586, %574
  %591 = phi i32 [ %575, %574 ], [ %577, %579 ], [ %587, %586 ]
  %592 = icmp eq i32 %591, 0
  br i1 %592, label %612, label %593

593:                                              ; preds = %590
  %594 = add nsw i32 %591, -1
  %595 = sext i32 %594 to i64
  %596 = getelementptr inbounds i16, ptr %237, i64 %595
  %597 = load i16, ptr %596, align 2, !tbaa !44
  %598 = sext i32 %591 to i64
  %599 = getelementptr inbounds i16, ptr %237, i64 %598
  store i16 %597, ptr %599, align 2, !tbaa !44
  br label %612

600:                                              ; preds = %465
  %601 = load ptr, ptr %8, align 8, !tbaa !46
  %602 = load i32, ptr %13, align 8, !tbaa !17
  %603 = add nsw i32 %602, 1
  store i32 %603, ptr %13, align 8, !tbaa !17
  %604 = sext i32 %602 to i64
  %605 = getelementptr inbounds i16, ptr %601, i64 %604
  %606 = load i16, ptr %605, align 2, !tbaa !44
  %607 = zext i16 %606 to i32
  %608 = icmp eq i32 %36, %607
  br i1 %608, label %629, label %609

609:                                              ; preds = %600
  tail call void @_Z8NAMD_bugPKc(ptr noundef nonnull @.str)
  %610 = load ptr, ptr %8, align 8, !tbaa !46
  %611 = load i32, ptr %13, align 8, !tbaa !17
  br label %629

612:                                              ; preds = %468, %593, %590, %531
  %613 = phi i32 [ %522, %593 ], [ %522, %590 ], [ %522, %531 ], [ 0, %468 ]
  %614 = phi i32 [ %591, %593 ], [ 0, %590 ], [ 0, %531 ], [ 0, %468 ]
  %615 = load i32, ptr %13, align 8, !tbaa !17
  %616 = trunc i32 %36 to i16
  %617 = load ptr, ptr %8, align 8, !tbaa !46
  %618 = sext i32 %615 to i64
  %619 = getelementptr inbounds i16, ptr %617, i64 %618
  store i16 %616, ptr %619, align 2, !tbaa !44
  %620 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 16
  %621 = load i32, ptr %620, align 4, !tbaa !47
  %622 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 18
  %623 = load i32, ptr %622, align 4, !tbaa !48
  %624 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 4, i64 1
  %625 = load ptr, ptr %624, align 8, !tbaa !23
  %626 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 4
  %627 = load ptr, ptr %626, align 8, !tbaa !23
  %628 = add nsw i32 %615, 2
  store i32 %628, ptr %13, align 8, !tbaa !17
  br label %645

629:                                              ; preds = %609, %600
  %630 = phi i32 [ %603, %600 ], [ %611, %609 ]
  %631 = phi ptr [ %601, %600 ], [ %610, %609 ]
  %632 = sext i32 %630 to i64
  %633 = getelementptr inbounds i16, ptr %631, i64 %632
  %634 = load i16, ptr %633, align 2, !tbaa !44
  %635 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 16
  %636 = load i32, ptr %635, align 4, !tbaa !47
  %637 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 18
  %638 = load i32, ptr %637, align 4, !tbaa !48
  %639 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 4, i64 1
  %640 = load ptr, ptr %639, align 8, !tbaa !23
  %641 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 4
  %642 = load ptr, ptr %641, align 8, !tbaa !23
  %643 = add nsw i32 %630, 1
  store i32 %643, ptr %13, align 8, !tbaa !17
  %644 = zext i16 %634 to i32
  br label %645

645:                                              ; preds = %629, %612
  %646 = phi i32 [ %636, %629 ], [ %621, %612 ]
  %647 = phi i32 [ %638, %629 ], [ %623, %612 ]
  %648 = phi ptr [ %640, %629 ], [ %625, %612 ]
  %649 = phi ptr [ %642, %629 ], [ %627, %612 ]
  %650 = phi i32 [ 0, %629 ], [ %614, %612 ]
  %651 = phi i32 [ 0, %629 ], [ %613, %612 ]
  %652 = phi i32 [ %644, %629 ], [ 0, %612 ]
  %653 = add nsw i32 %647, -1
  %654 = icmp slt i32 %652, %36
  br i1 %654, label %655, label %2159

655:                                              ; preds = %645
  %656 = getelementptr inbounds %class.Molecule, ptr %25, i64 0, i32 1
  %657 = getelementptr inbounds %class.Molecule, ptr %25, i64 0, i32 4
  %658 = getelementptr inbounds %class.Molecule, ptr %25, i64 0, i32 2
  %659 = getelementptr inbounds %class.Molecule, ptr %25, i64 0, i32 3
  %660 = ptrtoint ptr %421 to i64
  %661 = add nsw i32 %38, 10
  %662 = getelementptr inbounds %class.Pairlists, ptr %8, i64 0, i32 2
  %663 = getelementptr inbounds i16, ptr %421, i64 1
  %664 = ptrtoint ptr %467 to i64
  %665 = ptrtoint ptr %329 to i64
  %666 = ptrtoint ptr %375 to i64
  %667 = fmul double %30, 2.000000e+00
  %668 = fmul double %30, 4.000000e+00
  %669 = fmul double %30, 6.000000e+00
  %670 = insertelement <2 x double> poison, double %23, i64 0
  %671 = shufflevector <2 x double> %670, <2 x double> poison, <2 x i32> zeroinitializer
  br label %672

672:                                              ; preds = %655, %2146
  %673 = phi i32 [ 0, %655 ], [ %2154, %2146 ]
  %674 = phi double [ 0.000000e+00, %655 ], [ %2153, %2146 ]
  %675 = phi i32 [ %652, %655 ], [ %2152, %2146 ]
  %676 = phi ptr [ null, %655 ], [ %2151, %2146 ]
  %677 = phi ptr [ null, %655 ], [ %2150, %2146 ]
  %678 = phi ptr [ null, %655 ], [ %2149, %2146 ]
  %679 = phi i32 [ 0, %655 ], [ %2148, %2146 ]
  %680 = phi i32 [ %646, %655 ], [ %2147, %2146 ]
  %681 = phi <2 x double> [ zeroinitializer, %655 ], [ %2155, %2146 ]
  %682 = phi <2 x double> [ zeroinitializer, %655 ], [ %2156, %2146 ]
  %683 = phi <2 x double> [ zeroinitializer, %655 ], [ %2157, %2146 ]
  %684 = sext i32 %675 to i64
  %685 = getelementptr inbounds %struct.CompAtom, ptr %39, i64 %684
  %686 = getelementptr inbounds %struct.CompAtomExt, ptr %43, i64 %684
  br i1 %144, label %1752, label %687

687:                                              ; preds = %672
  %688 = getelementptr inbounds %struct.CompAtom, ptr %39, i64 %684, i32 4
  %689 = load i8, ptr %688, align 1
  %690 = lshr i8 %689, 3
  %691 = and i8 %690, 15
  %692 = zext i8 %691 to i32
  %693 = icmp eq i8 %691, 0
  br i1 %693, label %699, label %694

694:                                              ; preds = %687
  %695 = icmp eq i32 %680, 0
  br i1 %695, label %699, label %696

696:                                              ; preds = %694
  %697 = add nsw i32 %680, -1
  %698 = add nsw i32 %675, %692
  br label %2146

699:                                              ; preds = %694, %687
  %700 = phi i32 [ %653, %694 ], [ %680, %687 ]
  %701 = load <2 x double>, ptr %685, align 8, !tbaa !19
  %702 = fadd <2 x double> %15, %701
  %703 = getelementptr inbounds %class.Vector, ptr %685, i64 0, i32 2
  %704 = load double, ptr %703, align 8, !tbaa !49
  %705 = fadd double %17, %704
  %706 = load i32, ptr %686, align 4
  %707 = shl i32 %706, 2
  %708 = ashr exact i32 %707, 2
  %709 = load ptr, ptr %656, align 8, !tbaa !51
  %710 = sext i32 %708 to i64
  %711 = getelementptr inbounds %class.ExclusionCheck, ptr %709, i64 %710
  %712 = load i32, ptr %711, align 8, !tbaa !53
  %713 = getelementptr inbounds %class.ExclusionCheck, ptr %709, i64 %710, i32 1
  %714 = load i32, ptr %713, align 4, !tbaa !55
  %715 = getelementptr inbounds %class.ExclusionCheck, ptr %709, i64 %710, i32 2
  %716 = load ptr, ptr %715, align 8, !tbaa !56
  %717 = icmp eq ptr %716, null
  br i1 %717, label %722, label %718

718:                                              ; preds = %699
  %719 = sext i32 %712 to i64
  %720 = sub nsw i64 0, %719
  %721 = getelementptr inbounds i8, ptr %716, i64 %720
  br label %948

722:                                              ; preds = %699
  %723 = icmp eq ptr %676, null
  br i1 %723, label %811, label %724

724:                                              ; preds = %722
  %725 = load i32, ptr %677, align 4, !tbaa !5
  %726 = icmp slt i32 %725, 1
  br i1 %726, label %774, label %727

727:                                              ; preds = %724
  %728 = add nuw i32 %725, 1
  %729 = zext i32 %728 to i64
  %730 = add nsw i64 %729, -1
  %731 = add nsw i64 %729, -2
  %732 = and i64 %730, 3
  %733 = icmp ult i64 %731, 3
  br i1 %733, label %761, label %734

734:                                              ; preds = %727
  %735 = and i64 %730, -4
  br label %736

736:                                              ; preds = %736, %734
  %737 = phi i64 [ 1, %734 ], [ %758, %736 ]
  %738 = phi i64 [ 0, %734 ], [ %759, %736 ]
  %739 = getelementptr inbounds i32, ptr %677, i64 %737
  %740 = load i32, ptr %739, align 4, !tbaa !5
  %741 = sext i32 %740 to i64
  %742 = getelementptr inbounds i8, ptr %676, i64 %741
  store i8 0, ptr %742, align 1, !tbaa !57
  %743 = add nuw nsw i64 %737, 1
  %744 = getelementptr inbounds i32, ptr %677, i64 %743
  %745 = load i32, ptr %744, align 4, !tbaa !5
  %746 = sext i32 %745 to i64
  %747 = getelementptr inbounds i8, ptr %676, i64 %746
  store i8 0, ptr %747, align 1, !tbaa !57
  %748 = add nuw nsw i64 %737, 2
  %749 = getelementptr inbounds i32, ptr %677, i64 %748
  %750 = load i32, ptr %749, align 4, !tbaa !5
  %751 = sext i32 %750 to i64
  %752 = getelementptr inbounds i8, ptr %676, i64 %751
  store i8 0, ptr %752, align 1, !tbaa !57
  %753 = add nuw nsw i64 %737, 3
  %754 = getelementptr inbounds i32, ptr %677, i64 %753
  %755 = load i32, ptr %754, align 4, !tbaa !5
  %756 = sext i32 %755 to i64
  %757 = getelementptr inbounds i8, ptr %676, i64 %756
  store i8 0, ptr %757, align 1, !tbaa !57
  %758 = add nuw nsw i64 %737, 4
  %759 = add i64 %738, 4
  %760 = icmp eq i64 %759, %735
  br i1 %760, label %761, label %736

761:                                              ; preds = %736, %727
  %762 = phi i64 [ 1, %727 ], [ %758, %736 ]
  %763 = icmp eq i64 %732, 0
  br i1 %763, label %774, label %764

764:                                              ; preds = %761, %764
  %765 = phi i64 [ %771, %764 ], [ %762, %761 ]
  %766 = phi i64 [ %772, %764 ], [ 0, %761 ]
  %767 = getelementptr inbounds i32, ptr %677, i64 %765
  %768 = load i32, ptr %767, align 4, !tbaa !5
  %769 = sext i32 %768 to i64
  %770 = getelementptr inbounds i8, ptr %676, i64 %769
  store i8 0, ptr %770, align 1, !tbaa !57
  %771 = add nuw nsw i64 %765, 1
  %772 = add i64 %766, 1
  %773 = icmp eq i64 %772, %732
  br i1 %773, label %774, label %764, !llvm.loop !160

774:                                              ; preds = %761, %764, %724
  %775 = load i32, ptr %678, align 4, !tbaa !5
  %776 = icmp slt i32 %775, 1
  br i1 %776, label %831, label %777

777:                                              ; preds = %774
  %778 = add nuw i32 %775, 1
  %779 = zext i32 %778 to i64
  %780 = add nsw i64 %779, -1
  %781 = add nsw i64 %779, -2
  %782 = and i64 %780, 3
  %783 = icmp ult i64 %781, 3
  br i1 %783, label %818, label %784

784:                                              ; preds = %777
  %785 = and i64 %780, -4
  br label %786

786:                                              ; preds = %786, %784
  %787 = phi i64 [ 1, %784 ], [ %808, %786 ]
  %788 = phi i64 [ 0, %784 ], [ %809, %786 ]
  %789 = getelementptr inbounds i32, ptr %678, i64 %787
  %790 = load i32, ptr %789, align 4, !tbaa !5
  %791 = sext i32 %790 to i64
  %792 = getelementptr inbounds i8, ptr %676, i64 %791
  store i8 0, ptr %792, align 1, !tbaa !57
  %793 = add nuw nsw i64 %787, 1
  %794 = getelementptr inbounds i32, ptr %678, i64 %793
  %795 = load i32, ptr %794, align 4, !tbaa !5
  %796 = sext i32 %795 to i64
  %797 = getelementptr inbounds i8, ptr %676, i64 %796
  store i8 0, ptr %797, align 1, !tbaa !57
  %798 = add nuw nsw i64 %787, 2
  %799 = getelementptr inbounds i32, ptr %678, i64 %798
  %800 = load i32, ptr %799, align 4, !tbaa !5
  %801 = sext i32 %800 to i64
  %802 = getelementptr inbounds i8, ptr %676, i64 %801
  store i8 0, ptr %802, align 1, !tbaa !57
  %803 = add nuw nsw i64 %787, 3
  %804 = getelementptr inbounds i32, ptr %678, i64 %803
  %805 = load i32, ptr %804, align 4, !tbaa !5
  %806 = sext i32 %805 to i64
  %807 = getelementptr inbounds i8, ptr %676, i64 %806
  store i8 0, ptr %807, align 1, !tbaa !57
  %808 = add nuw nsw i64 %787, 4
  %809 = add i64 %788, 4
  %810 = icmp eq i64 %809, %785
  br i1 %810, label %818, label %786

811:                                              ; preds = %722
  %812 = load i32, ptr %657, align 8, !tbaa !60
  %813 = tail call i32 @llvm.smax.i32(i32 %812, i32 -1)
  %814 = sext i32 %813 to i64
  %815 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %814) #9
  %816 = load i32, ptr %657, align 8, !tbaa !60
  %817 = sext i32 %816 to i64
  tail call void @llvm.memset.p0.i64(ptr nonnull align 1 %815, i8 0, i64 %817, i1 false)
  br label %831

818:                                              ; preds = %786, %777
  %819 = phi i64 [ 1, %777 ], [ %808, %786 ]
  %820 = icmp eq i64 %782, 0
  br i1 %820, label %831, label %821

821:                                              ; preds = %818, %821
  %822 = phi i64 [ %828, %821 ], [ %819, %818 ]
  %823 = phi i64 [ %829, %821 ], [ 0, %818 ]
  %824 = getelementptr inbounds i32, ptr %678, i64 %822
  %825 = load i32, ptr %824, align 4, !tbaa !5
  %826 = sext i32 %825 to i64
  %827 = getelementptr inbounds i8, ptr %676, i64 %826
  store i8 0, ptr %827, align 1, !tbaa !57
  %828 = add nuw nsw i64 %822, 1
  %829 = add i64 %823, 1
  %830 = icmp eq i64 %829, %782
  br i1 %830, label %831, label %821, !llvm.loop !161

831:                                              ; preds = %818, %821, %774, %811
  %832 = phi ptr [ %815, %811 ], [ %676, %774 ], [ %676, %821 ], [ %676, %818 ]
  %833 = load i32, ptr %686, align 4
  %834 = shl i32 %833, 2
  %835 = ashr exact i32 %834, 2
  %836 = load ptr, ptr %658, align 8, !tbaa !62
  %837 = sext i32 %835 to i64
  %838 = getelementptr inbounds ptr, ptr %836, i64 %837
  %839 = load ptr, ptr %838, align 8, !tbaa !23
  %840 = load i32, ptr %839, align 4, !tbaa !5
  %841 = icmp slt i32 %840, 1
  br i1 %841, label %894, label %842

842:                                              ; preds = %831
  %843 = add nuw i32 %840, 1
  %844 = zext i32 %843 to i64
  %845 = add nsw i64 %844, -1
  %846 = add nsw i64 %844, -2
  %847 = and i64 %845, 3
  %848 = icmp ult i64 %846, 3
  br i1 %848, label %876, label %849

849:                                              ; preds = %842
  %850 = and i64 %845, -4
  br label %851

851:                                              ; preds = %851, %849
  %852 = phi i64 [ 1, %849 ], [ %873, %851 ]
  %853 = phi i64 [ 0, %849 ], [ %874, %851 ]
  %854 = getelementptr inbounds i32, ptr %839, i64 %852
  %855 = load i32, ptr %854, align 4, !tbaa !5
  %856 = sext i32 %855 to i64
  %857 = getelementptr inbounds i8, ptr %832, i64 %856
  store i8 1, ptr %857, align 1, !tbaa !57
  %858 = add nuw nsw i64 %852, 1
  %859 = getelementptr inbounds i32, ptr %839, i64 %858
  %860 = load i32, ptr %859, align 4, !tbaa !5
  %861 = sext i32 %860 to i64
  %862 = getelementptr inbounds i8, ptr %832, i64 %861
  store i8 1, ptr %862, align 1, !tbaa !57
  %863 = add nuw nsw i64 %852, 2
  %864 = getelementptr inbounds i32, ptr %839, i64 %863
  %865 = load i32, ptr %864, align 4, !tbaa !5
  %866 = sext i32 %865 to i64
  %867 = getelementptr inbounds i8, ptr %832, i64 %866
  store i8 1, ptr %867, align 1, !tbaa !57
  %868 = add nuw nsw i64 %852, 3
  %869 = getelementptr inbounds i32, ptr %839, i64 %868
  %870 = load i32, ptr %869, align 4, !tbaa !5
  %871 = sext i32 %870 to i64
  %872 = getelementptr inbounds i8, ptr %832, i64 %871
  store i8 1, ptr %872, align 1, !tbaa !57
  %873 = add nuw nsw i64 %852, 4
  %874 = add i64 %853, 4
  %875 = icmp eq i64 %874, %850
  br i1 %875, label %876, label %851

876:                                              ; preds = %851, %842
  %877 = phi i64 [ 1, %842 ], [ %873, %851 ]
  %878 = icmp eq i64 %847, 0
  br i1 %878, label %889, label %879

879:                                              ; preds = %876, %879
  %880 = phi i64 [ %886, %879 ], [ %877, %876 ]
  %881 = phi i64 [ %887, %879 ], [ 0, %876 ]
  %882 = getelementptr inbounds i32, ptr %839, i64 %880
  %883 = load i32, ptr %882, align 4, !tbaa !5
  %884 = sext i32 %883 to i64
  %885 = getelementptr inbounds i8, ptr %832, i64 %884
  store i8 1, ptr %885, align 1, !tbaa !57
  %886 = add nuw nsw i64 %880, 1
  %887 = add i64 %881, 1
  %888 = icmp eq i64 %887, %847
  br i1 %888, label %889, label %879, !llvm.loop !162

889:                                              ; preds = %879, %876
  %890 = load i32, ptr %686, align 4
  %891 = shl i32 %890, 2
  %892 = ashr exact i32 %891, 2
  %893 = sext i32 %892 to i64
  br label %894

894:                                              ; preds = %889, %831
  %895 = phi i64 [ %893, %889 ], [ %837, %831 ]
  %896 = load ptr, ptr %659, align 8, !tbaa !64
  %897 = getelementptr inbounds ptr, ptr %896, i64 %895
  %898 = load ptr, ptr %897, align 8, !tbaa !23
  %899 = load i32, ptr %898, align 4, !tbaa !5
  %900 = icmp slt i32 %899, 1
  br i1 %900, label %948, label %901

901:                                              ; preds = %894
  %902 = add nuw i32 %899, 1
  %903 = zext i32 %902 to i64
  %904 = add nsw i64 %903, -1
  %905 = add nsw i64 %903, -2
  %906 = and i64 %904, 3
  %907 = icmp ult i64 %905, 3
  br i1 %907, label %935, label %908

908:                                              ; preds = %901
  %909 = and i64 %904, -4
  br label %910

910:                                              ; preds = %910, %908
  %911 = phi i64 [ 1, %908 ], [ %932, %910 ]
  %912 = phi i64 [ 0, %908 ], [ %933, %910 ]
  %913 = getelementptr inbounds i32, ptr %898, i64 %911
  %914 = load i32, ptr %913, align 4, !tbaa !5
  %915 = sext i32 %914 to i64
  %916 = getelementptr inbounds i8, ptr %832, i64 %915
  store i8 2, ptr %916, align 1, !tbaa !57
  %917 = add nuw nsw i64 %911, 1
  %918 = getelementptr inbounds i32, ptr %898, i64 %917
  %919 = load i32, ptr %918, align 4, !tbaa !5
  %920 = sext i32 %919 to i64
  %921 = getelementptr inbounds i8, ptr %832, i64 %920
  store i8 2, ptr %921, align 1, !tbaa !57
  %922 = add nuw nsw i64 %911, 2
  %923 = getelementptr inbounds i32, ptr %898, i64 %922
  %924 = load i32, ptr %923, align 4, !tbaa !5
  %925 = sext i32 %924 to i64
  %926 = getelementptr inbounds i8, ptr %832, i64 %925
  store i8 2, ptr %926, align 1, !tbaa !57
  %927 = add nuw nsw i64 %911, 3
  %928 = getelementptr inbounds i32, ptr %898, i64 %927
  %929 = load i32, ptr %928, align 4, !tbaa !5
  %930 = sext i32 %929 to i64
  %931 = getelementptr inbounds i8, ptr %832, i64 %930
  store i8 2, ptr %931, align 1, !tbaa !57
  %932 = add nuw nsw i64 %911, 4
  %933 = add i64 %912, 4
  %934 = icmp eq i64 %933, %909
  br i1 %934, label %935, label %910

935:                                              ; preds = %910, %901
  %936 = phi i64 [ 1, %901 ], [ %932, %910 ]
  %937 = icmp eq i64 %906, 0
  br i1 %937, label %948, label %938

938:                                              ; preds = %935, %938
  %939 = phi i64 [ %945, %938 ], [ %936, %935 ]
  %940 = phi i64 [ %946, %938 ], [ 0, %935 ]
  %941 = getelementptr inbounds i32, ptr %898, i64 %939
  %942 = load i32, ptr %941, align 4, !tbaa !5
  %943 = sext i32 %942 to i64
  %944 = getelementptr inbounds i8, ptr %832, i64 %943
  store i8 2, ptr %944, align 1, !tbaa !57
  %945 = add nuw nsw i64 %939, 1
  %946 = add i64 %940, 1
  %947 = icmp eq i64 %946, %906
  br i1 %947, label %948, label %938, !llvm.loop !163

948:                                              ; preds = %935, %938, %894, %718
  %949 = phi ptr [ %721, %718 ], [ %832, %894 ], [ %832, %938 ], [ %832, %935 ]
  %950 = phi ptr [ %678, %718 ], [ %898, %894 ], [ %898, %938 ], [ %898, %935 ]
  %951 = phi ptr [ %677, %718 ], [ %839, %894 ], [ %839, %938 ], [ %839, %935 ]
  %952 = phi ptr [ %676, %718 ], [ %832, %894 ], [ %832, %938 ], [ %832, %935 ]
  %953 = load i8, ptr %688, align 1
  %954 = and i8 %953, 7
  %955 = icmp eq i8 %954, 0
  %956 = load i32, ptr @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4, !tbaa !5
  br i1 %955, label %1139, label %957

957:                                              ; preds = %948
  %958 = icmp eq i32 %956, 0
  br i1 %958, label %965, label %959

959:                                              ; preds = %957
  %960 = load i32, ptr %686, align 4
  %961 = freeze i32 %960
  %962 = icmp slt i32 %961, 0
  %963 = select i1 %962, ptr %237, ptr %191
  %964 = select i1 %962, i32 %650, i32 %651
  br label %965

965:                                              ; preds = %959, %957
  %966 = phi ptr [ %191, %957 ], [ %963, %959 ]
  %967 = phi i32 [ %651, %957 ], [ %964, %959 ]
  %968 = icmp sgt i32 %967, 0
  br i1 %968, label %969, label %1120

969:                                              ; preds = %965
  %970 = icmp ugt i32 %967, 6
  br i1 %970, label %971, label %1055

971:                                              ; preds = %969
  %972 = add nsw i32 %967, -2
  %973 = getelementptr inbounds i16, ptr %966, i64 1
  %974 = load i16, ptr %973, align 2, !tbaa !44
  %975 = zext i16 %974 to i64
  %976 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %975
  %977 = getelementptr inbounds %class.Vector, ptr %976, i64 0, i32 2
  %978 = load double, ptr %977, align 8, !tbaa !49
  %979 = load i16, ptr %966, align 2, !tbaa !44
  %980 = zext i16 %979 to i64
  %981 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %980
  %982 = getelementptr inbounds %class.Vector, ptr %981, i64 0, i32 2
  %983 = load double, ptr %982, align 8, !tbaa !49
  %984 = getelementptr inbounds %class.Vector, ptr %976, i64 0, i32 1
  %985 = load double, ptr %984, align 8, !tbaa !66
  %986 = getelementptr inbounds %class.Vector, ptr %981, i64 0, i32 1
  %987 = load double, ptr %986, align 8, !tbaa !66
  %988 = load double, ptr %976, align 8, !tbaa !67
  %989 = load double, ptr %981, align 8, !tbaa !67
  %990 = zext i32 %972 to i64
  %991 = insertelement <2 x double> poison, double %978, i64 0
  %992 = insertelement <2 x double> %991, double %983, i64 1
  %993 = insertelement <2 x double> poison, double %985, i64 0
  %994 = insertelement <2 x double> %993, double %987, i64 1
  %995 = insertelement <2 x double> poison, double %988, i64 0
  %996 = insertelement <2 x double> %995, double %989, i64 1
  %997 = insertelement <2 x double> poison, double %705, i64 0
  %998 = shufflevector <2 x double> %997, <2 x double> poison, <2 x i32> zeroinitializer
  %999 = shufflevector <2 x double> %702, <2 x double> poison, <2 x i32> <i32 1, i32 1>
  %1000 = shufflevector <2 x double> %702, <2 x double> poison, <2 x i32> zeroinitializer
  br label %1001

1001:                                             ; preds = %971, %1001
  %1002 = phi i64 [ 2, %971 ], [ %1045, %1001 ]
  %1003 = phi i32 [ 0, %971 ], [ %1044, %1001 ]
  %1004 = phi i16 [ %979, %971 ], [ %1011, %1001 ]
  %1005 = phi i16 [ %974, %971 ], [ %1014, %1001 ]
  %1006 = phi <2 x double> [ %992, %971 ], [ %1048, %1001 ]
  %1007 = phi <2 x double> [ %994, %971 ], [ %1050, %1001 ]
  %1008 = phi <2 x double> [ %996, %971 ], [ %1052, %1001 ]
  %1009 = fsub <2 x double> %998, %1006
  %1010 = getelementptr inbounds i16, ptr %966, i64 %1002
  %1011 = load i16, ptr %1010, align 2, !tbaa !44
  %1012 = or i64 %1002, 1
  %1013 = getelementptr inbounds i16, ptr %966, i64 %1012
  %1014 = load i16, ptr %1013, align 2, !tbaa !44
  %1015 = zext i16 %1011 to i64
  %1016 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %1015
  %1017 = load double, ptr %1016, align 8, !tbaa !67
  %1018 = zext i16 %1014 to i64
  %1019 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %1018
  %1020 = load double, ptr %1019, align 8, !tbaa !67
  %1021 = getelementptr inbounds %class.Vector, ptr %1016, i64 0, i32 1
  %1022 = load double, ptr %1021, align 8, !tbaa !66
  %1023 = getelementptr inbounds %class.Vector, ptr %1019, i64 0, i32 1
  %1024 = load double, ptr %1023, align 8, !tbaa !66
  %1025 = getelementptr inbounds %class.Vector, ptr %1016, i64 0, i32 2
  %1026 = load double, ptr %1025, align 8, !tbaa !49
  %1027 = getelementptr inbounds %class.Vector, ptr %1019, i64 0, i32 2
  %1028 = load double, ptr %1027, align 8, !tbaa !49
  %1029 = fsub <2 x double> %1000, %1008
  %1030 = fmul <2 x double> %1029, %1029
  %1031 = fsub <2 x double> %999, %1007
  %1032 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %1031, <2 x double> %1031, <2 x double> %1030)
  %1033 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %1009, <2 x double> %1009, <2 x double> %1032)
  %1034 = fcmp olt <2 x double> %1033, %671
  %1035 = zext i32 %1003 to i64
  %1036 = getelementptr inbounds i16, ptr %283, i64 %1035
  store i16 %1004, ptr %1036, align 2, !tbaa !44
  %1037 = extractelement <2 x i1> %1034, i64 1
  %1038 = zext i1 %1037 to i32
  %1039 = add nuw nsw i32 %1003, %1038
  %1040 = zext i32 %1039 to i64
  %1041 = getelementptr inbounds i16, ptr %283, i64 %1040
  store i16 %1005, ptr %1041, align 2, !tbaa !44
  %1042 = extractelement <2 x i1> %1034, i64 0
  %1043 = zext i1 %1042 to i32
  %1044 = add i32 %1039, %1043
  %1045 = add nuw nsw i64 %1002, 2
  %1046 = icmp ult i64 %1045, %990
  %1047 = insertelement <2 x double> poison, double %1028, i64 0
  %1048 = insertelement <2 x double> %1047, double %1026, i64 1
  %1049 = insertelement <2 x double> poison, double %1024, i64 0
  %1050 = insertelement <2 x double> %1049, double %1022, i64 1
  %1051 = insertelement <2 x double> poison, double %1020, i64 0
  %1052 = insertelement <2 x double> %1051, double %1017, i64 1
  br i1 %1046, label %1001, label %1053

1053:                                             ; preds = %1001
  %1054 = trunc i64 %1002 to i32
  br label %1055

1055:                                             ; preds = %1053, %969
  %1056 = phi i32 [ %1044, %1053 ], [ 0, %969 ]
  %1057 = phi i32 [ %1054, %1053 ], [ 0, %969 ]
  %1058 = icmp slt i32 %1057, %967
  br i1 %1058, label %1059, label %1064

1059:                                             ; preds = %1055
  %1060 = zext i32 %1057 to i64
  %1061 = zext i32 %967 to i64
  %1062 = extractelement <2 x double> %702, i64 0
  %1063 = extractelement <2 x double> %702, i64 1
  br label %1069

1064:                                             ; preds = %1092, %1055
  %1065 = phi i32 [ %1056, %1055 ], [ %1093, %1092 ]
  %1066 = icmp sgt i32 %1065, 0
  br i1 %1066, label %1067, label %1120

1067:                                             ; preds = %1064
  %1068 = zext i32 %1065 to i64
  br label %1096

1069:                                             ; preds = %1059, %1092
  %1070 = phi i64 [ %1060, %1059 ], [ %1094, %1092 ]
  %1071 = phi i32 [ %1056, %1059 ], [ %1093, %1092 ]
  %1072 = getelementptr inbounds i16, ptr %966, i64 %1070
  %1073 = load i16, ptr %1072, align 2, !tbaa !44
  %1074 = zext i16 %1073 to i64
  %1075 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %1074
  %1076 = load double, ptr %1075, align 8, !tbaa !67
  %1077 = getelementptr inbounds %class.Vector, ptr %1075, i64 0, i32 1
  %1078 = load double, ptr %1077, align 8, !tbaa !66
  %1079 = getelementptr inbounds %class.Vector, ptr %1075, i64 0, i32 2
  %1080 = load double, ptr %1079, align 8, !tbaa !49
  %1081 = fsub double %1062, %1076
  %1082 = fmul double %1081, %1081
  %1083 = fsub double %1063, %1078
  %1084 = tail call double @llvm.fmuladd.f64(double %1083, double %1083, double %1082)
  %1085 = fsub double %705, %1080
  %1086 = tail call double @llvm.fmuladd.f64(double %1085, double %1085, double %1084)
  %1087 = fcmp ugt double %1086, %23
  br i1 %1087, label %1092, label %1088

1088:                                             ; preds = %1069
  %1089 = add nsw i32 %1071, 1
  %1090 = sext i32 %1071 to i64
  %1091 = getelementptr inbounds i16, ptr %283, i64 %1090
  store i16 %1073, ptr %1091, align 2, !tbaa !44
  br label %1092

1092:                                             ; preds = %1088, %1069
  %1093 = phi i32 [ %1089, %1088 ], [ %1071, %1069 ]
  %1094 = add nuw nsw i64 %1070, 1
  %1095 = icmp eq i64 %1094, %1061
  br i1 %1095, label %1064, label %1069

1096:                                             ; preds = %1067, %1113
  %1097 = phi i64 [ 0, %1067 ], [ %1116, %1113 ]
  %1098 = phi ptr [ %421, %1067 ], [ %1115, %1113 ]
  %1099 = getelementptr inbounds i16, ptr %283, i64 %1097
  %1100 = load i16, ptr %1099, align 2, !tbaa !44
  %1101 = zext i16 %1100 to i64
  %1102 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %1101, i32 4
  %1103 = load i8, ptr %1102, align 1
  %1104 = and i8 %1103, 7
  store i16 %1100, ptr %1098, align 2, !tbaa !44
  %1105 = getelementptr inbounds i16, ptr %1098, i64 1
  %1106 = insertelement <2 x i16> poison, i16 %1100, i64 0
  %1107 = shufflevector <2 x i16> %1106, <2 x i16> poison, <2 x i32> zeroinitializer
  %1108 = add <2 x i16> %1107, <i16 1, i16 2>
  store <2 x i16> %1108, ptr %1105, align 2, !tbaa !44
  %1109 = icmp ult i8 %1104, 4
  br i1 %1109, label %1113, label %1110

1110:                                             ; preds = %1096
  %1111 = add <2 x i16> %1107, <i16 3, i16 4>
  %1112 = getelementptr inbounds i16, ptr %1098, i64 3
  store <2 x i16> %1111, ptr %1112, align 2, !tbaa !44
  br label %1113

1113:                                             ; preds = %1110, %1096
  %1114 = zext i8 %1104 to i64
  %1115 = getelementptr inbounds i16, ptr %1098, i64 %1114
  %1116 = add nuw nsw i64 %1097, 1
  %1117 = icmp eq i64 %1116, %1068
  br i1 %1117, label %1118, label %1096

1118:                                             ; preds = %1113
  %1119 = ptrtoint ptr %1115 to i64
  br label %1120

1120:                                             ; preds = %1118, %1064, %965
  %1121 = phi i64 [ %1119, %1118 ], [ %660, %1064 ], [ %660, %965 ]
  %1122 = sub i64 %1121, %660
  %1123 = lshr exact i64 %1122, 1
  %1124 = trunc i64 %1123 to i32
  %1125 = icmp eq i32 %1124, 0
  br i1 %1125, label %1126, label %1131

1126:                                             ; preds = %1120
  %1127 = load i8, ptr %688, align 1
  %1128 = and i8 %1127, 7
  %1129 = zext i8 %1128 to i32
  %1130 = add nsw i32 %675, %1129
  br label %2146

1131:                                             ; preds = %1120
  %1132 = shl i64 %1122, 31
  %1133 = add i64 %1132, -4294967296
  %1134 = ashr i64 %1133, 32
  %1135 = getelementptr inbounds i16, ptr %421, i64 %1134
  %1136 = load i16, ptr %1135, align 2, !tbaa !44
  %1137 = ashr i64 %1132, 32
  %1138 = getelementptr inbounds i16, ptr %421, i64 %1137
  store i16 %1136, ptr %1138, align 2, !tbaa !44
  br label %1139

1139:                                             ; preds = %1131, %948
  %1140 = phi i32 [ %1124, %1131 ], [ %679, %948 ]
  %1141 = icmp eq i32 %956, 0
  br i1 %1141, label %1146, label %1142

1142:                                             ; preds = %1139
  %1143 = load i32, ptr %686, align 4
  %1144 = and i32 %1143, 1073741824
  %1145 = icmp ne i32 %1144, 0
  br label %1146

1146:                                             ; preds = %1142, %1139
  %1147 = phi i1 [ false, %1139 ], [ %1145, %1142 ]
  %1148 = load i32, ptr %13, align 8, !tbaa !17
  %1149 = add nsw i32 %661, %1148
  %1150 = load i32, ptr %662, align 4, !tbaa !68
  %1151 = icmp sgt i32 %1150, %1149
  br i1 %1151, label %1167, label %1152

1152:                                             ; preds = %1146, %1152
  %1153 = phi i32 [ %1155, %1152 ], [ %1150, %1146 ]
  %1154 = ashr i32 %1153, 1
  %1155 = add nsw i32 %1154, %1153
  %1156 = icmp sgt i32 %1155, %1149
  br i1 %1156, label %1157, label %1152

1157:                                             ; preds = %1152
  %1158 = sext i32 %1155 to i64
  %1159 = icmp slt i32 %1155, 0
  %1160 = shl nsw i64 %1158, 1
  %1161 = select i1 %1159, i64 -1, i64 %1160
  %1162 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %1161) #9
  %1163 = load ptr, ptr %8, align 8, !tbaa !46
  %1164 = sext i32 %1148 to i64
  %1165 = shl nsw i64 %1164, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 2 %1162, ptr align 2 %1163, i64 %1165, i1 false)
  %1166 = icmp eq ptr %1163, null
  br i1 %1166, label %1171, label %1169

1167:                                             ; preds = %1146
  %1168 = load ptr, ptr %8, align 8, !tbaa !46
  br label %1173

1169:                                             ; preds = %1157
  tail call void @_ZdaPv(ptr noundef nonnull %1163) #10
  %1170 = load i32, ptr %13, align 8, !tbaa !17
  br label %1171

1171:                                             ; preds = %1169, %1157
  %1172 = phi i32 [ %1170, %1169 ], [ %1148, %1157 ]
  store ptr %1162, ptr %8, align 8, !tbaa !46
  store i32 %1155, ptr %662, align 4, !tbaa !68
  br label %1173

1173:                                             ; preds = %1167, %1171
  %1174 = phi i32 [ %1148, %1167 ], [ %1172, %1171 ]
  %1175 = phi ptr [ %1168, %1167 ], [ %1162, %1171 ]
  %1176 = ptrtoint ptr %1175 to i64
  %1177 = add nsw i32 %1174, 1
  %1178 = sext i32 %1177 to i64
  %1179 = getelementptr inbounds i16, ptr %1175, i64 %1178
  %1180 = icmp sgt i32 %1140, 0
  br i1 %1147, label %1181, label %1228

1181:                                             ; preds = %1173
  br i1 %1180, label %1182, label %1388

1182:                                             ; preds = %1181
  %1183 = zext i32 %1140 to i64
  %1184 = extractelement <2 x double> %702, i64 0
  %1185 = extractelement <2 x double> %702, i64 1
  br label %1186

1186:                                             ; preds = %1182, %1223
  %1187 = phi i64 [ 0, %1182 ], [ %1226, %1223 ]
  %1188 = phi ptr [ %467, %1182 ], [ %1225, %1223 ]
  %1189 = phi ptr [ %1179, %1182 ], [ %1224, %1223 ]
  %1190 = getelementptr inbounds i16, ptr %421, i64 %1187
  %1191 = load i16, ptr %1190, align 2, !tbaa !44
  %1192 = zext i16 %1191 to i64
  %1193 = getelementptr inbounds %struct.CompAtomExt, ptr %45, i64 %1192
  %1194 = load i32, ptr %1193, align 4
  %1195 = and i32 %1194, 1073741824
  %1196 = icmp eq i32 %1195, 0
  br i1 %1196, label %1197, label %1223

1197:                                             ; preds = %1186
  %1198 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %1192
  %1199 = getelementptr inbounds %class.Vector, ptr %1198, i64 0, i32 2
  %1200 = load double, ptr %1199, align 8, !tbaa !49
  %1201 = fsub double %705, %1200
  %1202 = getelementptr inbounds %class.Vector, ptr %1198, i64 0, i32 1
  %1203 = load double, ptr %1202, align 8, !tbaa !66
  %1204 = fsub double %1185, %1203
  %1205 = load double, ptr %1198, align 8, !tbaa !67
  %1206 = fsub double %1184, %1205
  %1207 = fmul double %1206, %1206
  %1208 = tail call double @llvm.fmuladd.f64(double %1204, double %1204, double %1207)
  %1209 = tail call double @llvm.fmuladd.f64(double %1201, double %1201, double %1208)
  %1210 = fcmp ugt double %1209, %20
  br i1 %1210, label %1223, label %1211

1211:                                             ; preds = %1197
  %1212 = shl i32 %1194, 2
  %1213 = ashr exact i32 %1212, 2
  %1214 = icmp slt i32 %1213, %712
  %1215 = icmp sgt i32 %1213, %714
  %1216 = select i1 %1214, i1 true, i1 %1215
  %1217 = select i1 %1216, ptr %1189, ptr %1188
  %1218 = zext i1 %1216 to i64
  %1219 = getelementptr inbounds i16, ptr %1189, i64 %1218
  %1220 = xor i1 %1216, true
  %1221 = zext i1 %1220 to i64
  %1222 = getelementptr inbounds i16, ptr %1188, i64 %1221
  store i16 %1191, ptr %1217, align 2, !tbaa !44
  br label %1223

1223:                                             ; preds = %1211, %1197, %1186
  %1224 = phi ptr [ %1189, %1186 ], [ %1189, %1197 ], [ %1219, %1211 ]
  %1225 = phi ptr [ %1188, %1186 ], [ %1188, %1197 ], [ %1222, %1211 ]
  %1226 = add nuw nsw i64 %1187, 1
  %1227 = icmp eq i64 %1226, %1183
  br i1 %1227, label %1388, label %1186

1228:                                             ; preds = %1173
  br i1 %1180, label %1229, label %1388

1229:                                             ; preds = %1228
  %1230 = icmp ugt i32 %1140, 6
  br i1 %1230, label %1231, label %1339

1231:                                             ; preds = %1229
  %1232 = add nsw i32 %1140, -2
  %1233 = load i16, ptr %421, align 2, !tbaa !44
  %1234 = zext i16 %1233 to i64
  %1235 = getelementptr inbounds %struct.CompAtomExt, ptr %45, i64 %1234
  %1236 = load i32, ptr %1235, align 4
  %1237 = load i16, ptr %663, align 2, !tbaa !44
  %1238 = zext i16 %1237 to i64
  %1239 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %1238
  %1240 = getelementptr inbounds %class.Vector, ptr %1239, i64 0, i32 2
  %1241 = load double, ptr %1240, align 8, !tbaa !49
  %1242 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %1234
  %1243 = getelementptr inbounds %class.Vector, ptr %1242, i64 0, i32 2
  %1244 = load double, ptr %1243, align 8, !tbaa !49
  %1245 = getelementptr inbounds %class.Vector, ptr %1239, i64 0, i32 1
  %1246 = load double, ptr %1245, align 8, !tbaa !66
  %1247 = getelementptr inbounds %class.Vector, ptr %1242, i64 0, i32 1
  %1248 = load double, ptr %1247, align 8, !tbaa !66
  %1249 = load double, ptr %1239, align 8, !tbaa !67
  %1250 = load double, ptr %1242, align 8, !tbaa !67
  %1251 = zext i32 %1232 to i64
  %1252 = extractelement <2 x double> %702, i64 0
  %1253 = extractelement <2 x double> %702, i64 1
  br label %1254

1254:                                             ; preds = %1231, %1332
  %1255 = phi i64 [ 2, %1231 ], [ %1335, %1332 ]
  %1256 = phi i64 [ %1238, %1231 ], [ %1292, %1332 ]
  %1257 = phi i32 [ %1236, %1231 ], [ %1320, %1332 ]
  %1258 = phi ptr [ %467, %1231 ], [ %1334, %1332 ]
  %1259 = phi ptr [ %1179, %1231 ], [ %1333, %1332 ]
  %1260 = phi i16 [ %1233, %1231 ], [ %1285, %1332 ]
  %1261 = phi i16 [ %1237, %1231 ], [ %1288, %1332 ]
  %1262 = phi double [ %1250, %1231 ], [ %1291, %1332 ]
  %1263 = phi double [ %1249, %1231 ], [ %1294, %1332 ]
  %1264 = phi double [ %1248, %1231 ], [ %1296, %1332 ]
  %1265 = phi double [ %1246, %1231 ], [ %1298, %1332 ]
  %1266 = phi double [ %1244, %1231 ], [ %1300, %1332 ]
  %1267 = phi double [ %1241, %1231 ], [ %1302, %1332 ]
  %1268 = getelementptr inbounds %struct.CompAtomExt, ptr %45, i64 %1256
  %1269 = load i32, ptr %1268, align 4
  %1270 = shl i32 %1269, 2
  %1271 = ashr exact i32 %1270, 2
  %1272 = fsub double %1252, %1262
  %1273 = fsub double %1252, %1263
  %1274 = fmul double %1272, %1272
  %1275 = fmul double %1273, %1273
  %1276 = fsub double %1253, %1264
  %1277 = fsub double %1253, %1265
  %1278 = tail call double @llvm.fmuladd.f64(double %1276, double %1276, double %1274)
  %1279 = tail call double @llvm.fmuladd.f64(double %1277, double %1277, double %1275)
  %1280 = fsub double %705, %1266
  %1281 = fsub double %705, %1267
  %1282 = tail call double @llvm.fmuladd.f64(double %1280, double %1280, double %1278)
  %1283 = tail call double @llvm.fmuladd.f64(double %1281, double %1281, double %1279)
  %1284 = getelementptr inbounds i16, ptr %421, i64 %1255
  %1285 = load i16, ptr %1284, align 2, !tbaa !44
  %1286 = or i64 %1255, 1
  %1287 = getelementptr inbounds i16, ptr %421, i64 %1286
  %1288 = load i16, ptr %1287, align 2, !tbaa !44
  %1289 = zext i16 %1285 to i64
  %1290 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %1289
  %1291 = load double, ptr %1290, align 8, !tbaa !67
  %1292 = zext i16 %1288 to i64
  %1293 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %1292
  %1294 = load double, ptr %1293, align 8, !tbaa !67
  %1295 = getelementptr inbounds %class.Vector, ptr %1290, i64 0, i32 1
  %1296 = load double, ptr %1295, align 8, !tbaa !66
  %1297 = getelementptr inbounds %class.Vector, ptr %1293, i64 0, i32 1
  %1298 = load double, ptr %1297, align 8, !tbaa !66
  %1299 = getelementptr inbounds %class.Vector, ptr %1290, i64 0, i32 2
  %1300 = load double, ptr %1299, align 8, !tbaa !49
  %1301 = getelementptr inbounds %class.Vector, ptr %1293, i64 0, i32 2
  %1302 = load double, ptr %1301, align 8, !tbaa !49
  %1303 = fcmp ugt double %1282, %20
  br i1 %1303, label %1316, label %1304

1304:                                             ; preds = %1254
  %1305 = shl i32 %1257, 2
  %1306 = ashr exact i32 %1305, 2
  %1307 = icmp slt i32 %1306, %712
  %1308 = icmp sgt i32 %1306, %714
  %1309 = select i1 %1307, i1 true, i1 %1308
  %1310 = select i1 %1309, ptr %1259, ptr %1258
  %1311 = zext i1 %1309 to i64
  %1312 = getelementptr inbounds i16, ptr %1259, i64 %1311
  %1313 = xor i1 %1309, true
  %1314 = zext i1 %1313 to i64
  %1315 = getelementptr inbounds i16, ptr %1258, i64 %1314
  store i16 %1260, ptr %1310, align 2, !tbaa !44
  br label %1316

1316:                                             ; preds = %1304, %1254
  %1317 = phi ptr [ %1259, %1254 ], [ %1312, %1304 ]
  %1318 = phi ptr [ %1258, %1254 ], [ %1315, %1304 ]
  %1319 = getelementptr inbounds %struct.CompAtomExt, ptr %45, i64 %1289
  %1320 = load i32, ptr %1319, align 4
  %1321 = fcmp ugt double %1283, %20
  br i1 %1321, label %1332, label %1322

1322:                                             ; preds = %1316
  %1323 = icmp slt i32 %1271, %712
  %1324 = icmp sgt i32 %1271, %714
  %1325 = select i1 %1323, i1 true, i1 %1324
  %1326 = select i1 %1325, ptr %1317, ptr %1318
  %1327 = zext i1 %1325 to i64
  %1328 = getelementptr inbounds i16, ptr %1317, i64 %1327
  %1329 = xor i1 %1325, true
  %1330 = zext i1 %1329 to i64
  %1331 = getelementptr inbounds i16, ptr %1318, i64 %1330
  store i16 %1261, ptr %1326, align 2, !tbaa !44
  br label %1332

1332:                                             ; preds = %1322, %1316
  %1333 = phi ptr [ %1317, %1316 ], [ %1328, %1322 ]
  %1334 = phi ptr [ %1318, %1316 ], [ %1331, %1322 ]
  %1335 = add nuw nsw i64 %1255, 2
  %1336 = icmp ult i64 %1335, %1251
  br i1 %1336, label %1254, label %1337

1337:                                             ; preds = %1332
  %1338 = trunc i64 %1255 to i32
  br label %1339

1339:                                             ; preds = %1337, %1229
  %1340 = phi i32 [ %1338, %1337 ], [ 0, %1229 ]
  %1341 = phi ptr [ %1333, %1337 ], [ %1179, %1229 ]
  %1342 = phi ptr [ %1334, %1337 ], [ %467, %1229 ]
  %1343 = icmp slt i32 %1340, %1140
  br i1 %1343, label %1344, label %1388

1344:                                             ; preds = %1339
  %1345 = zext i32 %1340 to i64
  %1346 = zext i32 %1140 to i64
  %1347 = extractelement <2 x double> %702, i64 0
  %1348 = extractelement <2 x double> %702, i64 1
  br label %1349

1349:                                             ; preds = %1344, %1383
  %1350 = phi i64 [ %1345, %1344 ], [ %1386, %1383 ]
  %1351 = phi ptr [ %1342, %1344 ], [ %1385, %1383 ]
  %1352 = phi ptr [ %1341, %1344 ], [ %1384, %1383 ]
  %1353 = getelementptr inbounds i16, ptr %421, i64 %1350
  %1354 = load i16, ptr %1353, align 2, !tbaa !44
  %1355 = zext i16 %1354 to i64
  %1356 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %1355
  %1357 = load double, ptr %1356, align 8, !tbaa !67
  %1358 = getelementptr inbounds %class.Vector, ptr %1356, i64 0, i32 1
  %1359 = load double, ptr %1358, align 8, !tbaa !66
  %1360 = getelementptr inbounds %class.Vector, ptr %1356, i64 0, i32 2
  %1361 = load double, ptr %1360, align 8, !tbaa !49
  %1362 = fsub double %1347, %1357
  %1363 = fmul double %1362, %1362
  %1364 = fsub double %1348, %1359
  %1365 = tail call double @llvm.fmuladd.f64(double %1364, double %1364, double %1363)
  %1366 = fsub double %705, %1361
  %1367 = tail call double @llvm.fmuladd.f64(double %1366, double %1366, double %1365)
  %1368 = fcmp ugt double %1367, %20
  br i1 %1368, label %1383, label %1369

1369:                                             ; preds = %1349
  %1370 = getelementptr inbounds %struct.CompAtomExt, ptr %45, i64 %1355
  %1371 = load i32, ptr %1370, align 4
  %1372 = shl i32 %1371, 2
  %1373 = ashr exact i32 %1372, 2
  %1374 = icmp slt i32 %1373, %712
  %1375 = icmp sgt i32 %1373, %714
  %1376 = select i1 %1374, i1 true, i1 %1375
  %1377 = select i1 %1376, ptr %1352, ptr %1351
  %1378 = zext i1 %1376 to i64
  %1379 = getelementptr inbounds i16, ptr %1352, i64 %1378
  %1380 = xor i1 %1376, true
  %1381 = zext i1 %1380 to i64
  %1382 = getelementptr inbounds i16, ptr %1351, i64 %1381
  store i16 %1354, ptr %1377, align 2, !tbaa !44
  br label %1383

1383:                                             ; preds = %1369, %1349
  %1384 = phi ptr [ %1352, %1349 ], [ %1379, %1369 ]
  %1385 = phi ptr [ %1351, %1349 ], [ %1382, %1369 ]
  %1386 = add nuw nsw i64 %1350, 1
  %1387 = icmp eq i64 %1386, %1346
  br i1 %1387, label %1388, label %1349

1388:                                             ; preds = %1383, %1223, %1339, %1181, %1228
  %1389 = phi ptr [ %1179, %1228 ], [ %1179, %1181 ], [ %1341, %1339 ], [ %1224, %1223 ], [ %1384, %1383 ]
  %1390 = phi ptr [ %467, %1228 ], [ %467, %1181 ], [ %1342, %1339 ], [ %1225, %1223 ], [ %1385, %1383 ]
  %1391 = icmp eq ptr %1389, %1179
  %1392 = icmp eq ptr %1390, %467
  %1393 = select i1 %1391, i1 %1392, i1 false
  br i1 %1393, label %1394, label %1396

1394:                                             ; preds = %1388
  %1395 = add nsw i32 %675, 1
  br label %2146

1396:                                             ; preds = %1388
  %1397 = trunc i32 %675 to i16
  %1398 = load i32, ptr %13, align 8, !tbaa !17
  %1399 = add nsw i32 %1398, -1
  %1400 = sext i32 %1399 to i64
  %1401 = getelementptr inbounds i16, ptr %1175, i64 %1400
  store i16 %1397, ptr %1401, align 2, !tbaa !44
  %1402 = ptrtoint ptr %1390 to i64
  %1403 = sub i64 %1402, %664
  %1404 = lshr exact i64 %1403, 1
  %1405 = trunc i64 %1404 to i32
  %1406 = icmp sgt i32 %1405, 0
  br i1 %1406, label %1407, label %1507

1407:                                             ; preds = %1396
  %1408 = and i64 %1404, 4294967295
  %1409 = and i64 %1404, 1
  %1410 = icmp eq i64 %1408, 1
  br i1 %1410, label %1475, label %1411

1411:                                             ; preds = %1407
  %1412 = sub nsw i64 %1408, %1409
  br label %1413

1413:                                             ; preds = %1468, %1411
  %1414 = phi i64 [ 0, %1411 ], [ %1472, %1468 ]
  %1415 = phi ptr [ %1389, %1411 ], [ %1471, %1468 ]
  %1416 = phi ptr [ %329, %1411 ], [ %1470, %1468 ]
  %1417 = phi ptr [ %375, %1411 ], [ %1469, %1468 ]
  %1418 = phi i64 [ 0, %1411 ], [ %1473, %1468 ]
  %1419 = getelementptr inbounds i16, ptr %467, i64 %1414
  %1420 = load i16, ptr %1419, align 2, !tbaa !44
  %1421 = zext i16 %1420 to i64
  %1422 = getelementptr inbounds %struct.CompAtomExt, ptr %45, i64 %1421
  %1423 = load i32, ptr %1422, align 4
  %1424 = shl i32 %1423, 2
  %1425 = ashr exact i32 %1424, 2
  %1426 = sext i32 %1425 to i64
  %1427 = getelementptr inbounds i8, ptr %949, i64 %1426
  %1428 = load i8, ptr %1427, align 1, !tbaa !57
  %1429 = sext i8 %1428 to i32
  switch i32 %1429, label %1441 [
    i32 0, label %1430
    i32 1, label %1432
    i32 2, label %1434
  ]

1430:                                             ; preds = %1413
  %1431 = getelementptr inbounds i16, ptr %1415, i64 1
  br label %1436

1432:                                             ; preds = %1413
  %1433 = getelementptr inbounds i16, ptr %1416, i64 1
  br label %1436

1434:                                             ; preds = %1413
  %1435 = getelementptr inbounds i16, ptr %1417, i64 1
  br label %1436

1436:                                             ; preds = %1430, %1432, %1434
  %1437 = phi ptr [ %1417, %1434 ], [ %1416, %1432 ], [ %1415, %1430 ]
  %1438 = phi ptr [ %1435, %1434 ], [ %1417, %1432 ], [ %1417, %1430 ]
  %1439 = phi ptr [ %1416, %1434 ], [ %1433, %1432 ], [ %1416, %1430 ]
  %1440 = phi ptr [ %1415, %1434 ], [ %1415, %1432 ], [ %1431, %1430 ]
  store i16 %1420, ptr %1437, align 2, !tbaa !44
  br label %1441

1441:                                             ; preds = %1436, %1413
  %1442 = phi ptr [ %1417, %1413 ], [ %1438, %1436 ]
  %1443 = phi ptr [ %1416, %1413 ], [ %1439, %1436 ]
  %1444 = phi ptr [ %1415, %1413 ], [ %1440, %1436 ]
  %1445 = or i64 %1414, 1
  %1446 = getelementptr inbounds i16, ptr %467, i64 %1445
  %1447 = load i16, ptr %1446, align 2, !tbaa !44
  %1448 = zext i16 %1447 to i64
  %1449 = getelementptr inbounds %struct.CompAtomExt, ptr %45, i64 %1448
  %1450 = load i32, ptr %1449, align 4
  %1451 = shl i32 %1450, 2
  %1452 = ashr exact i32 %1451, 2
  %1453 = sext i32 %1452 to i64
  %1454 = getelementptr inbounds i8, ptr %949, i64 %1453
  %1455 = load i8, ptr %1454, align 1, !tbaa !57
  %1456 = sext i8 %1455 to i32
  switch i32 %1456, label %1468 [
    i32 0, label %1461
    i32 1, label %1459
    i32 2, label %1457
  ]

1457:                                             ; preds = %1441
  %1458 = getelementptr inbounds i16, ptr %1442, i64 1
  br label %1463

1459:                                             ; preds = %1441
  %1460 = getelementptr inbounds i16, ptr %1443, i64 1
  br label %1463

1461:                                             ; preds = %1441
  %1462 = getelementptr inbounds i16, ptr %1444, i64 1
  br label %1463

1463:                                             ; preds = %1461, %1459, %1457
  %1464 = phi ptr [ %1442, %1457 ], [ %1443, %1459 ], [ %1444, %1461 ]
  %1465 = phi ptr [ %1458, %1457 ], [ %1442, %1459 ], [ %1442, %1461 ]
  %1466 = phi ptr [ %1443, %1457 ], [ %1460, %1459 ], [ %1443, %1461 ]
  %1467 = phi ptr [ %1444, %1457 ], [ %1444, %1459 ], [ %1462, %1461 ]
  store i16 %1447, ptr %1464, align 2, !tbaa !44
  br label %1468

1468:                                             ; preds = %1463, %1441
  %1469 = phi ptr [ %1442, %1441 ], [ %1465, %1463 ]
  %1470 = phi ptr [ %1443, %1441 ], [ %1466, %1463 ]
  %1471 = phi ptr [ %1444, %1441 ], [ %1467, %1463 ]
  %1472 = add nuw nsw i64 %1414, 2
  %1473 = add i64 %1418, 2
  %1474 = icmp eq i64 %1473, %1412
  br i1 %1474, label %1475, label %1413

1475:                                             ; preds = %1468, %1407
  %1476 = phi ptr [ undef, %1407 ], [ %1469, %1468 ]
  %1477 = phi ptr [ undef, %1407 ], [ %1470, %1468 ]
  %1478 = phi ptr [ undef, %1407 ], [ %1471, %1468 ]
  %1479 = phi i64 [ 0, %1407 ], [ %1472, %1468 ]
  %1480 = phi ptr [ %1389, %1407 ], [ %1471, %1468 ]
  %1481 = phi ptr [ %329, %1407 ], [ %1470, %1468 ]
  %1482 = phi ptr [ %375, %1407 ], [ %1469, %1468 ]
  %1483 = icmp eq i64 %1409, 0
  br i1 %1483, label %1507, label %1484

1484:                                             ; preds = %1475
  %1485 = getelementptr inbounds i16, ptr %467, i64 %1479
  %1486 = load i16, ptr %1485, align 2, !tbaa !44
  %1487 = zext i16 %1486 to i64
  %1488 = getelementptr inbounds %struct.CompAtomExt, ptr %45, i64 %1487
  %1489 = load i32, ptr %1488, align 4
  %1490 = shl i32 %1489, 2
  %1491 = ashr exact i32 %1490, 2
  %1492 = sext i32 %1491 to i64
  %1493 = getelementptr inbounds i8, ptr %949, i64 %1492
  %1494 = load i8, ptr %1493, align 1, !tbaa !57
  %1495 = sext i8 %1494 to i32
  switch i32 %1495, label %1507 [
    i32 0, label %1500
    i32 1, label %1498
    i32 2, label %1496
  ]

1496:                                             ; preds = %1484
  %1497 = getelementptr inbounds i16, ptr %1482, i64 1
  br label %1502

1498:                                             ; preds = %1484
  %1499 = getelementptr inbounds i16, ptr %1481, i64 1
  br label %1502

1500:                                             ; preds = %1484
  %1501 = getelementptr inbounds i16, ptr %1480, i64 1
  br label %1502

1502:                                             ; preds = %1500, %1498, %1496
  %1503 = phi ptr [ %1482, %1496 ], [ %1481, %1498 ], [ %1480, %1500 ]
  %1504 = phi ptr [ %1497, %1496 ], [ %1482, %1498 ], [ %1482, %1500 ]
  %1505 = phi ptr [ %1481, %1496 ], [ %1499, %1498 ], [ %1481, %1500 ]
  %1506 = phi ptr [ %1480, %1496 ], [ %1480, %1498 ], [ %1501, %1500 ]
  store i16 %1486, ptr %1503, align 2, !tbaa !44
  br label %1507

1507:                                             ; preds = %1475, %1502, %1484, %1396
  %1508 = phi ptr [ %375, %1396 ], [ %1476, %1475 ], [ %1482, %1484 ], [ %1504, %1502 ]
  %1509 = phi ptr [ %329, %1396 ], [ %1477, %1475 ], [ %1481, %1484 ], [ %1505, %1502 ]
  %1510 = phi ptr [ %1389, %1396 ], [ %1478, %1475 ], [ %1480, %1484 ], [ %1506, %1502 ]
  %1511 = ptrtoint ptr %1510 to i64
  %1512 = ptrtoint ptr %1179 to i64
  %1513 = sub i64 %1511, %1512
  %1514 = lshr exact i64 %1513, 1
  %1515 = trunc i64 %1514 to i32
  %1516 = icmp eq i32 %1515, 0
  %1517 = shl i64 %1513, 31
  br i1 %1516, label %1523, label %1518

1518:                                             ; preds = %1507
  %1519 = add i64 %1517, -4294967296
  %1520 = ashr i64 %1519, 32
  %1521 = getelementptr inbounds i16, ptr %1179, i64 %1520
  %1522 = load i16, ptr %1521, align 2, !tbaa !44
  br label %1523

1523:                                             ; preds = %1507, %1518
  %1524 = phi i16 [ %1522, %1518 ], [ -1, %1507 ]
  %1525 = ashr i64 %1517, 32
  %1526 = getelementptr inbounds i16, ptr %1179, i64 %1525
  store i16 %1524, ptr %1526, align 2, !tbaa !44
  %1527 = trunc i64 %1514 to i16
  %1528 = add i16 %1527, 1
  %1529 = sext i32 %1398 to i64
  %1530 = getelementptr inbounds i16, ptr %1175, i64 %1529
  store i16 %1528, ptr %1530, align 2, !tbaa !44
  %1531 = add i32 %1398, 2
  %1532 = add i32 %1531, %1515
  %1533 = ptrtoint ptr %1509 to i64
  %1534 = sub i64 %1533, %665
  %1535 = lshr exact i64 %1534, 1
  %1536 = trunc i64 %1535 to i32
  %1537 = add nsw i32 %1532, 1
  %1538 = sext i32 %1537 to i64
  %1539 = getelementptr i16, ptr %1175, i64 %1538
  %1540 = icmp sgt i32 %1536, 0
  br i1 %1540, label %1541, label %1631

1541:                                             ; preds = %1523
  %1542 = and i64 %1535, 4294967295
  %1543 = icmp ult i64 %1542, 8
  br i1 %1543, label %1587, label %1544

1544:                                             ; preds = %1541
  %1545 = shl nsw i64 %1538, 1
  %1546 = add i64 %1545, %1176
  %1547 = sub i64 %1546, %665
  %1548 = icmp ult i64 %1547, 128
  br i1 %1548, label %1587, label %1549

1549:                                             ; preds = %1544
  %1550 = icmp ult i64 %1542, 64
  br i1 %1550, label %1574, label %1551

1551:                                             ; preds = %1549
  %1552 = and i64 %1535, 63
  %1553 = sub nsw i64 %1542, %1552
  br label %1554

1554:                                             ; preds = %1554, %1551
  %1555 = phi i64 [ 0, %1551 ], [ %1568, %1554 ]
  %1556 = getelementptr inbounds i16, ptr %329, i64 %1555
  %1557 = load <16 x i16>, ptr %1556, align 2, !tbaa !44
  %1558 = getelementptr inbounds i16, ptr %1556, i64 16
  %1559 = load <16 x i16>, ptr %1558, align 2, !tbaa !44
  %1560 = getelementptr inbounds i16, ptr %1556, i64 32
  %1561 = load <16 x i16>, ptr %1560, align 2, !tbaa !44
  %1562 = getelementptr inbounds i16, ptr %1556, i64 48
  %1563 = load <16 x i16>, ptr %1562, align 2, !tbaa !44
  %1564 = getelementptr inbounds i16, ptr %1539, i64 %1555
  store <16 x i16> %1557, ptr %1564, align 2, !tbaa !44
  %1565 = getelementptr inbounds i16, ptr %1564, i64 16
  store <16 x i16> %1559, ptr %1565, align 2, !tbaa !44
  %1566 = getelementptr inbounds i16, ptr %1564, i64 32
  store <16 x i16> %1561, ptr %1566, align 2, !tbaa !44
  %1567 = getelementptr inbounds i16, ptr %1564, i64 48
  store <16 x i16> %1563, ptr %1567, align 2, !tbaa !44
  %1568 = add nuw i64 %1555, 64
  %1569 = icmp eq i64 %1568, %1553
  br i1 %1569, label %1570, label %1554, !llvm.loop !164

1570:                                             ; preds = %1554
  %1571 = icmp eq i64 %1552, 0
  br i1 %1571, label %1625, label %1572

1572:                                             ; preds = %1570
  %1573 = icmp ult i64 %1552, 8
  br i1 %1573, label %1587, label %1574

1574:                                             ; preds = %1549, %1572
  %1575 = phi i64 [ %1553, %1572 ], [ 0, %1549 ]
  %1576 = and i64 %1535, 7
  %1577 = sub nsw i64 %1542, %1576
  br label %1578

1578:                                             ; preds = %1578, %1574
  %1579 = phi i64 [ %1575, %1574 ], [ %1583, %1578 ]
  %1580 = getelementptr inbounds i16, ptr %329, i64 %1579
  %1581 = load <8 x i16>, ptr %1580, align 2, !tbaa !44
  %1582 = getelementptr inbounds i16, ptr %1539, i64 %1579
  store <8 x i16> %1581, ptr %1582, align 2, !tbaa !44
  %1583 = add nuw i64 %1579, 8
  %1584 = icmp eq i64 %1583, %1577
  br i1 %1584, label %1585, label %1578, !llvm.loop !165

1585:                                             ; preds = %1578
  %1586 = icmp eq i64 %1576, 0
  br i1 %1586, label %1625, label %1587

1587:                                             ; preds = %1544, %1541, %1572, %1585
  %1588 = phi i64 [ 0, %1541 ], [ 0, %1544 ], [ %1553, %1572 ], [ %1577, %1585 ]
  %1589 = sub i64 %1535, %1588
  %1590 = xor i64 %1588, -1
  %1591 = add nsw i64 %1542, %1590
  %1592 = and i64 %1589, 3
  %1593 = icmp eq i64 %1592, 0
  br i1 %1593, label %1603, label %1594

1594:                                             ; preds = %1587, %1594
  %1595 = phi i64 [ %1600, %1594 ], [ %1588, %1587 ]
  %1596 = phi i64 [ %1601, %1594 ], [ 0, %1587 ]
  %1597 = getelementptr inbounds i16, ptr %329, i64 %1595
  %1598 = load i16, ptr %1597, align 2, !tbaa !44
  %1599 = getelementptr inbounds i16, ptr %1539, i64 %1595
  store i16 %1598, ptr %1599, align 2, !tbaa !44
  %1600 = add nuw nsw i64 %1595, 1
  %1601 = add i64 %1596, 1
  %1602 = icmp eq i64 %1601, %1592
  br i1 %1602, label %1603, label %1594, !llvm.loop !166

1603:                                             ; preds = %1594, %1587
  %1604 = phi i64 [ %1588, %1587 ], [ %1600, %1594 ]
  %1605 = icmp ult i64 %1591, 3
  br i1 %1605, label %1625, label %1606

1606:                                             ; preds = %1603, %1606
  %1607 = phi i64 [ %1623, %1606 ], [ %1604, %1603 ]
  %1608 = getelementptr inbounds i16, ptr %329, i64 %1607
  %1609 = load i16, ptr %1608, align 2, !tbaa !44
  %1610 = getelementptr inbounds i16, ptr %1539, i64 %1607
  store i16 %1609, ptr %1610, align 2, !tbaa !44
  %1611 = add nuw nsw i64 %1607, 1
  %1612 = getelementptr inbounds i16, ptr %329, i64 %1611
  %1613 = load i16, ptr %1612, align 2, !tbaa !44
  %1614 = getelementptr inbounds i16, ptr %1539, i64 %1611
  store i16 %1613, ptr %1614, align 2, !tbaa !44
  %1615 = add nuw nsw i64 %1607, 2
  %1616 = getelementptr inbounds i16, ptr %329, i64 %1615
  %1617 = load i16, ptr %1616, align 2, !tbaa !44
  %1618 = getelementptr inbounds i16, ptr %1539, i64 %1615
  store i16 %1617, ptr %1618, align 2, !tbaa !44
  %1619 = add nuw nsw i64 %1607, 3
  %1620 = getelementptr inbounds i16, ptr %329, i64 %1619
  %1621 = load i16, ptr %1620, align 2, !tbaa !44
  %1622 = getelementptr inbounds i16, ptr %1539, i64 %1619
  store i16 %1621, ptr %1622, align 2, !tbaa !44
  %1623 = add nuw nsw i64 %1607, 4
  %1624 = icmp eq i64 %1623, %1542
  br i1 %1624, label %1625, label %1606, !llvm.loop !167

1625:                                             ; preds = %1603, %1606, %1570, %1585
  %1626 = shl i64 %1534, 31
  %1627 = add i64 %1626, -4294967296
  %1628 = ashr i64 %1627, 32
  %1629 = getelementptr inbounds i16, ptr %1539, i64 %1628
  %1630 = load i16, ptr %1629, align 2, !tbaa !44
  br label %1631

1631:                                             ; preds = %1523, %1625
  %1632 = phi i64 [ %1535, %1625 ], [ 0, %1523 ]
  %1633 = phi i16 [ %1630, %1625 ], [ -1, %1523 ]
  %1634 = and i64 %1632, 4294967295
  %1635 = getelementptr inbounds i16, ptr %1539, i64 %1634
  store i16 %1633, ptr %1635, align 2, !tbaa !44
  %1636 = trunc i64 %1535 to i16
  %1637 = add i16 %1636, 1
  %1638 = sext i32 %1532 to i64
  %1639 = getelementptr inbounds i16, ptr %1175, i64 %1638
  store i16 %1637, ptr %1639, align 2, !tbaa !44
  %1640 = add nsw i32 %1536, 2
  %1641 = add nsw i32 %1640, %1532
  %1642 = ptrtoint ptr %1508 to i64
  %1643 = sub i64 %1642, %666
  %1644 = lshr exact i64 %1643, 1
  %1645 = trunc i64 %1644 to i32
  %1646 = add nsw i32 %1641, 1
  %1647 = sext i32 %1646 to i64
  %1648 = getelementptr i16, ptr %1175, i64 %1647
  %1649 = icmp sgt i32 %1645, 0
  br i1 %1649, label %1650, label %1740

1650:                                             ; preds = %1631
  %1651 = and i64 %1644, 4294967295
  %1652 = icmp ult i64 %1651, 8
  br i1 %1652, label %1696, label %1653

1653:                                             ; preds = %1650
  %1654 = shl nsw i64 %1647, 1
  %1655 = add i64 %1654, %1176
  %1656 = sub i64 %1655, %666
  %1657 = icmp ult i64 %1656, 128
  br i1 %1657, label %1696, label %1658

1658:                                             ; preds = %1653
  %1659 = icmp ult i64 %1651, 64
  br i1 %1659, label %1683, label %1660

1660:                                             ; preds = %1658
  %1661 = and i64 %1644, 63
  %1662 = sub nsw i64 %1651, %1661
  br label %1663

1663:                                             ; preds = %1663, %1660
  %1664 = phi i64 [ 0, %1660 ], [ %1677, %1663 ]
  %1665 = getelementptr inbounds i16, ptr %375, i64 %1664
  %1666 = load <16 x i16>, ptr %1665, align 2, !tbaa !44
  %1667 = getelementptr inbounds i16, ptr %1665, i64 16
  %1668 = load <16 x i16>, ptr %1667, align 2, !tbaa !44
  %1669 = getelementptr inbounds i16, ptr %1665, i64 32
  %1670 = load <16 x i16>, ptr %1669, align 2, !tbaa !44
  %1671 = getelementptr inbounds i16, ptr %1665, i64 48
  %1672 = load <16 x i16>, ptr %1671, align 2, !tbaa !44
  %1673 = getelementptr inbounds i16, ptr %1648, i64 %1664
  store <16 x i16> %1666, ptr %1673, align 2, !tbaa !44
  %1674 = getelementptr inbounds i16, ptr %1673, i64 16
  store <16 x i16> %1668, ptr %1674, align 2, !tbaa !44
  %1675 = getelementptr inbounds i16, ptr %1673, i64 32
  store <16 x i16> %1670, ptr %1675, align 2, !tbaa !44
  %1676 = getelementptr inbounds i16, ptr %1673, i64 48
  store <16 x i16> %1672, ptr %1676, align 2, !tbaa !44
  %1677 = add nuw i64 %1664, 64
  %1678 = icmp eq i64 %1677, %1662
  br i1 %1678, label %1679, label %1663, !llvm.loop !168

1679:                                             ; preds = %1663
  %1680 = icmp eq i64 %1661, 0
  br i1 %1680, label %1734, label %1681

1681:                                             ; preds = %1679
  %1682 = icmp ult i64 %1661, 8
  br i1 %1682, label %1696, label %1683

1683:                                             ; preds = %1658, %1681
  %1684 = phi i64 [ %1662, %1681 ], [ 0, %1658 ]
  %1685 = and i64 %1644, 7
  %1686 = sub nsw i64 %1651, %1685
  br label %1687

1687:                                             ; preds = %1687, %1683
  %1688 = phi i64 [ %1684, %1683 ], [ %1692, %1687 ]
  %1689 = getelementptr inbounds i16, ptr %375, i64 %1688
  %1690 = load <8 x i16>, ptr %1689, align 2, !tbaa !44
  %1691 = getelementptr inbounds i16, ptr %1648, i64 %1688
  store <8 x i16> %1690, ptr %1691, align 2, !tbaa !44
  %1692 = add nuw i64 %1688, 8
  %1693 = icmp eq i64 %1692, %1686
  br i1 %1693, label %1694, label %1687, !llvm.loop !169

1694:                                             ; preds = %1687
  %1695 = icmp eq i64 %1685, 0
  br i1 %1695, label %1734, label %1696

1696:                                             ; preds = %1653, %1650, %1681, %1694
  %1697 = phi i64 [ 0, %1650 ], [ 0, %1653 ], [ %1662, %1681 ], [ %1686, %1694 ]
  %1698 = sub i64 %1644, %1697
  %1699 = xor i64 %1697, -1
  %1700 = add nsw i64 %1651, %1699
  %1701 = and i64 %1698, 3
  %1702 = icmp eq i64 %1701, 0
  br i1 %1702, label %1712, label %1703

1703:                                             ; preds = %1696, %1703
  %1704 = phi i64 [ %1709, %1703 ], [ %1697, %1696 ]
  %1705 = phi i64 [ %1710, %1703 ], [ 0, %1696 ]
  %1706 = getelementptr inbounds i16, ptr %375, i64 %1704
  %1707 = load i16, ptr %1706, align 2, !tbaa !44
  %1708 = getelementptr inbounds i16, ptr %1648, i64 %1704
  store i16 %1707, ptr %1708, align 2, !tbaa !44
  %1709 = add nuw nsw i64 %1704, 1
  %1710 = add i64 %1705, 1
  %1711 = icmp eq i64 %1710, %1701
  br i1 %1711, label %1712, label %1703, !llvm.loop !170

1712:                                             ; preds = %1703, %1696
  %1713 = phi i64 [ %1697, %1696 ], [ %1709, %1703 ]
  %1714 = icmp ult i64 %1700, 3
  br i1 %1714, label %1734, label %1715

1715:                                             ; preds = %1712, %1715
  %1716 = phi i64 [ %1732, %1715 ], [ %1713, %1712 ]
  %1717 = getelementptr inbounds i16, ptr %375, i64 %1716
  %1718 = load i16, ptr %1717, align 2, !tbaa !44
  %1719 = getelementptr inbounds i16, ptr %1648, i64 %1716
  store i16 %1718, ptr %1719, align 2, !tbaa !44
  %1720 = add nuw nsw i64 %1716, 1
  %1721 = getelementptr inbounds i16, ptr %375, i64 %1720
  %1722 = load i16, ptr %1721, align 2, !tbaa !44
  %1723 = getelementptr inbounds i16, ptr %1648, i64 %1720
  store i16 %1722, ptr %1723, align 2, !tbaa !44
  %1724 = add nuw nsw i64 %1716, 2
  %1725 = getelementptr inbounds i16, ptr %375, i64 %1724
  %1726 = load i16, ptr %1725, align 2, !tbaa !44
  %1727 = getelementptr inbounds i16, ptr %1648, i64 %1724
  store i16 %1726, ptr %1727, align 2, !tbaa !44
  %1728 = add nuw nsw i64 %1716, 3
  %1729 = getelementptr inbounds i16, ptr %375, i64 %1728
  %1730 = load i16, ptr %1729, align 2, !tbaa !44
  %1731 = getelementptr inbounds i16, ptr %1648, i64 %1728
  store i16 %1730, ptr %1731, align 2, !tbaa !44
  %1732 = add nuw nsw i64 %1716, 4
  %1733 = icmp eq i64 %1732, %1651
  br i1 %1733, label %1734, label %1715, !llvm.loop !171

1734:                                             ; preds = %1712, %1715, %1679, %1694
  %1735 = shl i64 %1643, 31
  %1736 = add i64 %1735, -4294967296
  %1737 = ashr i64 %1736, 32
  %1738 = getelementptr inbounds i16, ptr %1648, i64 %1737
  %1739 = load i16, ptr %1738, align 2, !tbaa !44
  br label %1740

1740:                                             ; preds = %1631, %1734
  %1741 = phi i64 [ %1644, %1734 ], [ 0, %1631 ]
  %1742 = phi i16 [ %1739, %1734 ], [ -1, %1631 ]
  %1743 = and i64 %1741, 4294967295
  %1744 = getelementptr inbounds i16, ptr %1648, i64 %1743
  store i16 %1742, ptr %1744, align 2, !tbaa !44
  %1745 = trunc i64 %1644 to i16
  %1746 = add i16 %1745, 1
  %1747 = sext i32 %1641 to i64
  %1748 = getelementptr inbounds i16, ptr %1175, i64 %1747
  store i16 %1746, ptr %1748, align 2, !tbaa !44
  %1749 = add i32 %1645, 3
  %1750 = add i32 %1749, %1641
  %1751 = select i1 %142, i32 1, i32 %1750
  store i32 %1751, ptr %13, align 8, !tbaa !17
  br label %1787

1752:                                             ; preds = %672
  %1753 = load <2 x double>, ptr %685, align 8, !tbaa !19
  %1754 = fadd <2 x double> %15, %1753
  %1755 = getelementptr inbounds %class.Vector, ptr %685, i64 0, i32 2
  %1756 = load double, ptr %1755, align 8, !tbaa !49
  %1757 = fadd double %17, %1756
  %1758 = load ptr, ptr %8, align 8, !tbaa !46
  %1759 = load i32, ptr %13, align 8, !tbaa !17
  %1760 = add i32 %1759, 1
  %1761 = sext i32 %1760 to i64
  %1762 = getelementptr inbounds i16, ptr %1758, i64 %1761
  %1763 = sext i32 %1759 to i64
  %1764 = getelementptr inbounds i16, ptr %1758, i64 %1763
  %1765 = load i16, ptr %1764, align 2, !tbaa !44
  %1766 = zext i16 %1765 to i32
  %1767 = add i32 %1760, %1766
  %1768 = add nsw i32 %1766, -1
  %1769 = add i32 %1767, 1
  %1770 = sext i32 %1769 to i64
  %1771 = getelementptr inbounds i16, ptr %1758, i64 %1770
  %1772 = sext i32 %1767 to i64
  %1773 = getelementptr inbounds i16, ptr %1758, i64 %1772
  %1774 = load i16, ptr %1773, align 2, !tbaa !44
  %1775 = zext i16 %1774 to i32
  %1776 = add i32 %1769, %1775
  %1777 = add nsw i32 %1775, -1
  %1778 = add i32 %1776, 1
  %1779 = sext i32 %1778 to i64
  %1780 = getelementptr inbounds i16, ptr %1758, i64 %1779
  %1781 = sext i32 %1776 to i64
  %1782 = getelementptr inbounds i16, ptr %1758, i64 %1781
  %1783 = load i16, ptr %1782, align 2, !tbaa !44
  %1784 = zext i16 %1783 to i32
  %1785 = add i32 %1778, %1784
  store i32 %1785, ptr %13, align 8, !tbaa !17
  %1786 = add nsw i32 %1784, -1
  br label %1787

1787:                                             ; preds = %1740, %1752
  %1788 = phi double [ %1757, %1752 ], [ %705, %1740 ]
  %1789 = phi i32 [ %680, %1752 ], [ %700, %1740 ]
  %1790 = phi ptr [ %1762, %1752 ], [ %1179, %1740 ]
  %1791 = phi i32 [ %1768, %1752 ], [ %1515, %1740 ]
  %1792 = phi ptr [ %1771, %1752 ], [ %1539, %1740 ]
  %1793 = phi i32 [ %1777, %1752 ], [ %1536, %1740 ]
  %1794 = phi ptr [ %1780, %1752 ], [ %1648, %1740 ]
  %1795 = phi i32 [ %1786, %1752 ], [ %1645, %1740 ]
  %1796 = phi i32 [ %679, %1752 ], [ %1140, %1740 ]
  %1797 = phi ptr [ %678, %1752 ], [ %950, %1740 ]
  %1798 = phi ptr [ %677, %1752 ], [ %951, %1740 ]
  %1799 = phi ptr [ %676, %1752 ], [ %952, %1740 ]
  %1800 = phi <2 x double> [ %1754, %1752 ], [ %702, %1740 ]
  %1801 = getelementptr inbounds %struct.CompAtom, ptr %39, i64 %684, i32 1
  %1802 = load float, ptr %1801, align 8, !tbaa !79
  %1803 = fpext float %1802 to double
  %1804 = fmul double %1803, 0x4074C104816F0069
  %1805 = fmul double %28, %1804
  %1806 = fmul double %24, %1805
  %1807 = load double, ptr @_ZN20ComputeNonbondedUtil7cutoff2E, align 8, !tbaa !19
  %1808 = extractelement <2 x double> %1800, i64 0
  %1809 = extractelement <2 x double> %1800, i64 1
  %1810 = tail call noundef i32 @_Z22pairlist_from_pairlistddddPK8CompAtomPKtiPtdPd(double noundef %1807, double noundef %1808, double noundef %1809, double noundef %1788, ptr noundef %41, ptr noundef nonnull %1790, i32 noundef %1791, ptr noundef %94, double noundef %31, ptr noundef %140)
  %1811 = icmp sgt i32 %1810, 0
  br i1 %1811, label %1812, label %1899

1812:                                             ; preds = %1787
  %1813 = load ptr, ptr @_ZN20ComputeNonbondedUtil8r2_tableE, align 8, !tbaa !23
  %1814 = zext i32 %1810 to i64
  br label %1815

1815:                                             ; preds = %1812, %1815
  %1816 = phi i64 [ 0, %1812 ], [ %1897, %1815 ]
  %1817 = phi double [ %674, %1812 ], [ %1869, %1815 ]
  %1818 = phi double [ 0.000000e+00, %1812 ], [ %1893, %1815 ]
  %1819 = phi <2 x double> [ %681, %1812 ], [ %1885, %1815 ]
  %1820 = phi <2 x double> [ %682, %1812 ], [ %1878, %1815 ]
  %1821 = phi <2 x double> [ %683, %1812 ], [ %1891, %1815 ]
  %1822 = phi <2 x double> [ zeroinitializer, %1812 ], [ %1887, %1815 ]
  %1823 = shl nuw nsw i64 %1816, 1
  %1824 = getelementptr inbounds i32, ptr %141, i64 %1823
  %1825 = load i32, ptr %1824, align 4, !tbaa !5
  %1826 = ashr i32 %1825, 14
  %1827 = add nsw i32 %1826, %34
  %1828 = getelementptr inbounds i16, ptr %94, i64 %1816
  %1829 = load i16, ptr %1828, align 2, !tbaa !44
  %1830 = zext i16 %1829 to i64
  %1831 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %1830
  %1832 = getelementptr inbounds double, ptr %140, i64 %1816
  %1833 = load double, ptr %1832, align 8, !tbaa !19
  %1834 = sext i32 %1827 to i64
  %1835 = getelementptr inbounds double, ptr %1813, i64 %1834
  %1836 = load double, ptr %1835, align 8, !tbaa !19
  %1837 = fsub double %1833, %1836
  %1838 = shl nsw i32 %1827, 4
  %1839 = sext i32 %1838 to i64
  %1840 = getelementptr inbounds double, ptr %26, i64 %1839
  %1841 = getelementptr inbounds %class.Vector, ptr %648, i64 %1830
  %1842 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %1830, i32 1
  %1843 = load float, ptr %1842, align 8, !tbaa !79
  %1844 = fpext float %1843 to double
  %1845 = fmul double %1806, %1844
  %1846 = load <2 x double>, ptr %1831, align 8, !tbaa !19
  %1847 = fsub <2 x double> %1800, %1846
  %1848 = getelementptr inbounds %class.Vector, ptr %1831, i64 0, i32 2
  %1849 = load double, ptr %1848, align 8, !tbaa !49
  %1850 = fsub double %1788, %1849
  %1851 = getelementptr inbounds double, ptr %1840, i64 12
  %1852 = load double, ptr %1851, align 8, !tbaa !19
  %1853 = getelementptr inbounds double, ptr %1840, i64 13
  %1854 = load double, ptr %1853, align 8, !tbaa !19
  %1855 = getelementptr inbounds double, ptr %1840, i64 14
  %1856 = load double, ptr %1855, align 8, !tbaa !19
  %1857 = getelementptr inbounds double, ptr %1840, i64 15
  %1858 = load double, ptr %1857, align 8, !tbaa !19
  %1859 = fmul double %1845, %1852
  %1860 = fmul double %1845, %1854
  %1861 = fmul double %1845, %1856
  %1862 = fmul double %1845, %1858
  %1863 = fmul double %1837, %1859
  %1864 = fmul double %1860, 2.500000e-01
  %1865 = tail call double @llvm.fmuladd.f64(double %1863, double 0x3FC5555555555555, double %1864)
  %1866 = fmul double %1861, 5.000000e-01
  %1867 = tail call double @llvm.fmuladd.f64(double %1865, double %1837, double %1866)
  %1868 = tail call double @llvm.fmuladd.f64(double %1867, double %1837, double %1862)
  %1869 = fsub double %1817, %1868
  %1870 = tail call double @llvm.fmuladd.f64(double %1837, double %1859, double %1860)
  %1871 = tail call double @llvm.fmuladd.f64(double %1870, double %1837, double %1861)
  %1872 = extractelement <2 x double> %1847, i64 1
  %1873 = fmul double %1872, %1871
  %1874 = insertelement <2 x double> poison, double %1873, i64 0
  %1875 = shufflevector <2 x double> %1874, <2 x double> poison, <2 x i32> zeroinitializer
  %1876 = shufflevector <2 x double> %1847, <2 x double> poison, <2 x i32> <i32 1, i32 0>
  %1877 = insertelement <2 x double> %1876, double %1850, i64 1
  %1878 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %1875, <2 x double> %1877, <2 x double> %1820)
  %1879 = insertelement <2 x double> %1876, double %1850, i64 0
  %1880 = insertelement <2 x double> poison, double %1871, i64 0
  %1881 = shufflevector <2 x double> %1880, <2 x double> poison, <2 x i32> zeroinitializer
  %1882 = fmul <2 x double> %1879, %1881
  %1883 = shufflevector <2 x double> %1882, <2 x double> poison, <2 x i32> <i32 1, i32 poison>
  %1884 = shufflevector <2 x double> %1882, <2 x double> poison, <2 x i32> <i32 1, i32 1>
  %1885 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %1884, <2 x double> %1847, <2 x double> %1819)
  %1886 = insertelement <2 x double> %1883, double %1873, i64 1
  %1887 = fadd <2 x double> %1822, %1886
  %1888 = load <2 x double>, ptr %1841, align 8, !tbaa !19
  %1889 = fsub <2 x double> %1888, %1886
  store <2 x double> %1889, ptr %1841, align 8, !tbaa !19
  %1890 = shufflevector <2 x double> %1879, <2 x double> poison, <2 x i32> zeroinitializer
  %1891 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %1882, <2 x double> %1890, <2 x double> %1821)
  %1892 = extractelement <2 x double> %1882, i64 0
  %1893 = fadd double %1818, %1892
  %1894 = getelementptr inbounds %class.Vector, ptr %648, i64 %1830, i32 2
  %1895 = load double, ptr %1894, align 8, !tbaa !87
  %1896 = fsub double %1895, %1892
  store double %1896, ptr %1894, align 8, !tbaa !87
  %1897 = add nuw nsw i64 %1816, 1
  %1898 = icmp eq i64 %1897, %1814
  br i1 %1898, label %1899, label %1815

1899:                                             ; preds = %1815, %1787
  %1900 = phi double [ 0.000000e+00, %1787 ], [ %1893, %1815 ]
  %1901 = phi double [ %674, %1787 ], [ %1869, %1815 ]
  %1902 = phi <2 x double> [ %681, %1787 ], [ %1885, %1815 ]
  %1903 = phi <2 x double> [ %682, %1787 ], [ %1878, %1815 ]
  %1904 = phi <2 x double> [ %683, %1787 ], [ %1891, %1815 ]
  %1905 = phi <2 x double> [ zeroinitializer, %1787 ], [ %1887, %1815 ]
  %1906 = load double, ptr @_ZN20ComputeNonbondedUtil7cutoff2E, align 8, !tbaa !19
  %1907 = tail call noundef i32 @_Z22pairlist_from_pairlistddddPK8CompAtomPKtiPtdPd(double noundef %1906, double noundef %1808, double noundef %1809, double noundef %1788, ptr noundef %41, ptr noundef %1794, i32 noundef %1795, ptr noundef %94, double noundef %31, ptr noundef %140)
  %1908 = add nsw i32 %1907, %673
  %1909 = icmp sgt i32 %1907, 0
  br i1 %1909, label %1910, label %2011

1910:                                             ; preds = %1899
  %1911 = load ptr, ptr @_ZN20ComputeNonbondedUtil8r2_tableE, align 8, !tbaa !23
  %1912 = zext i32 %1907 to i64
  br label %1913

1913:                                             ; preds = %1910, %1913
  %1914 = phi i64 [ 0, %1910 ], [ %2009, %1913 ]
  %1915 = phi double [ %1901, %1910 ], [ %1981, %1913 ]
  %1916 = phi double [ %1900, %1910 ], [ %2005, %1913 ]
  %1917 = phi <2 x double> [ %1902, %1910 ], [ %1997, %1913 ]
  %1918 = phi <2 x double> [ %1903, %1910 ], [ %1990, %1913 ]
  %1919 = phi <2 x double> [ %1904, %1910 ], [ %2003, %1913 ]
  %1920 = phi <2 x double> [ %1905, %1910 ], [ %1999, %1913 ]
  %1921 = shl nuw nsw i64 %1914, 1
  %1922 = getelementptr inbounds i32, ptr %141, i64 %1921
  %1923 = load i32, ptr %1922, align 4, !tbaa !5
  %1924 = ashr i32 %1923, 14
  %1925 = add nsw i32 %1924, %34
  %1926 = getelementptr inbounds i16, ptr %94, i64 %1914
  %1927 = load i16, ptr %1926, align 2, !tbaa !44
  %1928 = zext i16 %1927 to i64
  %1929 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %1928
  %1930 = getelementptr inbounds double, ptr %140, i64 %1914
  %1931 = load double, ptr %1930, align 8, !tbaa !19
  %1932 = sext i32 %1925 to i64
  %1933 = getelementptr inbounds double, ptr %1911, i64 %1932
  %1934 = load double, ptr %1933, align 8, !tbaa !19
  %1935 = fsub double %1931, %1934
  %1936 = shl nsw i32 %1925, 4
  %1937 = sext i32 %1936 to i64
  %1938 = getelementptr inbounds double, ptr %26, i64 %1937
  %1939 = getelementptr inbounds %class.Vector, ptr %648, i64 %1928
  %1940 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %1928, i32 1
  %1941 = load float, ptr %1940, align 8, !tbaa !79
  %1942 = fpext float %1941 to double
  %1943 = fmul double %1806, %1942
  %1944 = load <2 x double>, ptr %1929, align 8, !tbaa !19
  %1945 = fsub <2 x double> %1800, %1944
  %1946 = getelementptr inbounds %class.Vector, ptr %1929, i64 0, i32 2
  %1947 = load double, ptr %1946, align 8, !tbaa !49
  %1948 = fsub double %1788, %1947
  %1949 = shl nsw i32 %1925, 2
  %1950 = sext i32 %1949 to i64
  %1951 = getelementptr inbounds double, ptr %27, i64 %1950
  %1952 = getelementptr inbounds double, ptr %1938, i64 12
  %1953 = load double, ptr %1952, align 8, !tbaa !19
  %1954 = getelementptr inbounds double, ptr %1938, i64 13
  %1955 = load double, ptr %1954, align 8, !tbaa !19
  %1956 = getelementptr inbounds double, ptr %1938, i64 14
  %1957 = load double, ptr %1956, align 8, !tbaa !19
  %1958 = getelementptr inbounds double, ptr %1938, i64 15
  %1959 = load double, ptr %1958, align 8, !tbaa !19
  %1960 = load double, ptr %1951, align 8, !tbaa !19
  %1961 = tail call double @llvm.fmuladd.f64(double %30, double %1960, double %1959)
  %1962 = getelementptr inbounds double, ptr %1951, i64 1
  %1963 = load double, ptr %1962, align 8, !tbaa !19
  %1964 = tail call double @llvm.fmuladd.f64(double %667, double %1963, double %1957)
  %1965 = getelementptr inbounds double, ptr %1951, i64 2
  %1966 = load double, ptr %1965, align 8, !tbaa !19
  %1967 = tail call double @llvm.fmuladd.f64(double %668, double %1966, double %1955)
  %1968 = getelementptr inbounds double, ptr %1951, i64 3
  %1969 = load double, ptr %1968, align 8, !tbaa !19
  %1970 = tail call double @llvm.fmuladd.f64(double %669, double %1969, double %1953)
  %1971 = fmul double %1943, %1970
  %1972 = fmul double %1943, %1967
  %1973 = fmul double %1943, %1964
  %1974 = fmul double %1943, %1961
  %1975 = fmul double %1935, %1971
  %1976 = fmul double %1972, 2.500000e-01
  %1977 = tail call double @llvm.fmuladd.f64(double %1975, double 0x3FC5555555555555, double %1976)
  %1978 = fmul double %1973, 5.000000e-01
  %1979 = tail call double @llvm.fmuladd.f64(double %1977, double %1935, double %1978)
  %1980 = tail call double @llvm.fmuladd.f64(double %1979, double %1935, double %1974)
  %1981 = fsub double %1915, %1980
  %1982 = tail call double @llvm.fmuladd.f64(double %1935, double %1971, double %1972)
  %1983 = tail call double @llvm.fmuladd.f64(double %1982, double %1935, double %1973)
  %1984 = extractelement <2 x double> %1945, i64 1
  %1985 = fmul double %1984, %1983
  %1986 = insertelement <2 x double> poison, double %1985, i64 0
  %1987 = shufflevector <2 x double> %1986, <2 x double> poison, <2 x i32> zeroinitializer
  %1988 = shufflevector <2 x double> %1945, <2 x double> poison, <2 x i32> <i32 1, i32 0>
  %1989 = insertelement <2 x double> %1988, double %1948, i64 1
  %1990 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %1987, <2 x double> %1989, <2 x double> %1918)
  %1991 = insertelement <2 x double> %1988, double %1948, i64 0
  %1992 = insertelement <2 x double> poison, double %1983, i64 0
  %1993 = shufflevector <2 x double> %1992, <2 x double> poison, <2 x i32> zeroinitializer
  %1994 = fmul <2 x double> %1991, %1993
  %1995 = shufflevector <2 x double> %1994, <2 x double> poison, <2 x i32> <i32 1, i32 poison>
  %1996 = shufflevector <2 x double> %1994, <2 x double> poison, <2 x i32> <i32 1, i32 1>
  %1997 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %1996, <2 x double> %1945, <2 x double> %1917)
  %1998 = insertelement <2 x double> %1995, double %1985, i64 1
  %1999 = fadd <2 x double> %1920, %1998
  %2000 = load <2 x double>, ptr %1939, align 8, !tbaa !19
  %2001 = fsub <2 x double> %2000, %1998
  store <2 x double> %2001, ptr %1939, align 8, !tbaa !19
  %2002 = shufflevector <2 x double> %1991, <2 x double> poison, <2 x i32> zeroinitializer
  %2003 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %1994, <2 x double> %2002, <2 x double> %1919)
  %2004 = extractelement <2 x double> %1994, i64 0
  %2005 = fadd double %1916, %2004
  %2006 = getelementptr inbounds %class.Vector, ptr %648, i64 %1928, i32 2
  %2007 = load double, ptr %2006, align 8, !tbaa !87
  %2008 = fsub double %2007, %2004
  store double %2008, ptr %2006, align 8, !tbaa !87
  %2009 = add nuw nsw i64 %1914, 1
  %2010 = icmp eq i64 %2009, %1912
  br i1 %2010, label %2011, label %1913

2011:                                             ; preds = %1913, %1899
  %2012 = phi double [ %1900, %1899 ], [ %2005, %1913 ]
  %2013 = phi double [ %1901, %1899 ], [ %1981, %1913 ]
  %2014 = phi <2 x double> [ %1902, %1899 ], [ %1997, %1913 ]
  %2015 = phi <2 x double> [ %1903, %1899 ], [ %1990, %1913 ]
  %2016 = phi <2 x double> [ %1904, %1899 ], [ %2003, %1913 ]
  %2017 = phi <2 x double> [ %1905, %1899 ], [ %1999, %1913 ]
  %2018 = load double, ptr @_ZN20ComputeNonbondedUtil7cutoff2E, align 8, !tbaa !19
  %2019 = tail call noundef i32 @_Z22pairlist_from_pairlistddddPK8CompAtomPKtiPtdPd(double noundef %2018, double noundef %1808, double noundef %1809, double noundef %1788, ptr noundef %41, ptr noundef %1792, i32 noundef %1793, ptr noundef %94, double noundef %31, ptr noundef %140)
  %2020 = add nsw i32 %1908, %2019
  %2021 = icmp sgt i32 %2019, 0
  br i1 %2021, label %2022, label %2123

2022:                                             ; preds = %2011
  %2023 = load ptr, ptr @_ZN20ComputeNonbondedUtil8r2_tableE, align 8, !tbaa !23
  %2024 = zext i32 %2019 to i64
  br label %2025

2025:                                             ; preds = %2022, %2025
  %2026 = phi i64 [ 0, %2022 ], [ %2121, %2025 ]
  %2027 = phi double [ %2013, %2022 ], [ %2093, %2025 ]
  %2028 = phi double [ %2012, %2022 ], [ %2117, %2025 ]
  %2029 = phi <2 x double> [ %2014, %2022 ], [ %2109, %2025 ]
  %2030 = phi <2 x double> [ %2015, %2022 ], [ %2102, %2025 ]
  %2031 = phi <2 x double> [ %2016, %2022 ], [ %2115, %2025 ]
  %2032 = phi <2 x double> [ %2017, %2022 ], [ %2111, %2025 ]
  %2033 = shl nuw nsw i64 %2026, 1
  %2034 = getelementptr inbounds i32, ptr %141, i64 %2033
  %2035 = load i32, ptr %2034, align 4, !tbaa !5
  %2036 = ashr i32 %2035, 14
  %2037 = add nsw i32 %2036, %34
  %2038 = getelementptr inbounds i16, ptr %94, i64 %2026
  %2039 = load i16, ptr %2038, align 2, !tbaa !44
  %2040 = zext i16 %2039 to i64
  %2041 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %2040
  %2042 = getelementptr inbounds double, ptr %140, i64 %2026
  %2043 = load double, ptr %2042, align 8, !tbaa !19
  %2044 = sext i32 %2037 to i64
  %2045 = getelementptr inbounds double, ptr %2023, i64 %2044
  %2046 = load double, ptr %2045, align 8, !tbaa !19
  %2047 = fsub double %2043, %2046
  %2048 = shl nsw i32 %2037, 4
  %2049 = sext i32 %2048 to i64
  %2050 = getelementptr inbounds double, ptr %26, i64 %2049
  %2051 = getelementptr inbounds %class.Vector, ptr %648, i64 %2040
  %2052 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %2040, i32 1
  %2053 = load float, ptr %2052, align 8, !tbaa !79
  %2054 = fpext float %2053 to double
  %2055 = fmul double %1806, %2054
  %2056 = load <2 x double>, ptr %2041, align 8, !tbaa !19
  %2057 = fsub <2 x double> %1800, %2056
  %2058 = getelementptr inbounds %class.Vector, ptr %2041, i64 0, i32 2
  %2059 = load double, ptr %2058, align 8, !tbaa !49
  %2060 = fsub double %1788, %2059
  %2061 = shl nsw i32 %2037, 2
  %2062 = sext i32 %2061 to i64
  %2063 = getelementptr inbounds double, ptr %27, i64 %2062
  %2064 = getelementptr inbounds double, ptr %2050, i64 12
  %2065 = load double, ptr %2064, align 8, !tbaa !19
  %2066 = getelementptr inbounds double, ptr %2050, i64 13
  %2067 = load double, ptr %2066, align 8, !tbaa !19
  %2068 = getelementptr inbounds double, ptr %2050, i64 14
  %2069 = load double, ptr %2068, align 8, !tbaa !19
  %2070 = getelementptr inbounds double, ptr %2050, i64 15
  %2071 = load double, ptr %2070, align 8, !tbaa !19
  %2072 = load double, ptr %2063, align 8, !tbaa !19
  %2073 = fadd double %2071, %2072
  %2074 = getelementptr inbounds double, ptr %2063, i64 1
  %2075 = load double, ptr %2074, align 8, !tbaa !19
  %2076 = tail call double @llvm.fmuladd.f64(double %2075, double 2.000000e+00, double %2069)
  %2077 = getelementptr inbounds double, ptr %2063, i64 2
  %2078 = load double, ptr %2077, align 8, !tbaa !19
  %2079 = tail call double @llvm.fmuladd.f64(double %2078, double 4.000000e+00, double %2067)
  %2080 = getelementptr inbounds double, ptr %2063, i64 3
  %2081 = load double, ptr %2080, align 8, !tbaa !19
  %2082 = tail call double @llvm.fmuladd.f64(double %2081, double 6.000000e+00, double %2065)
  %2083 = fmul double %2055, %2082
  %2084 = fmul double %2055, %2079
  %2085 = fmul double %2055, %2076
  %2086 = fmul double %2055, %2073
  %2087 = fmul double %2047, %2083
  %2088 = fmul double %2084, 2.500000e-01
  %2089 = tail call double @llvm.fmuladd.f64(double %2087, double 0x3FC5555555555555, double %2088)
  %2090 = fmul double %2085, 5.000000e-01
  %2091 = tail call double @llvm.fmuladd.f64(double %2089, double %2047, double %2090)
  %2092 = tail call double @llvm.fmuladd.f64(double %2091, double %2047, double %2086)
  %2093 = fsub double %2027, %2092
  %2094 = tail call double @llvm.fmuladd.f64(double %2047, double %2083, double %2084)
  %2095 = tail call double @llvm.fmuladd.f64(double %2094, double %2047, double %2085)
  %2096 = extractelement <2 x double> %2057, i64 1
  %2097 = fmul double %2096, %2095
  %2098 = insertelement <2 x double> poison, double %2097, i64 0
  %2099 = shufflevector <2 x double> %2098, <2 x double> poison, <2 x i32> zeroinitializer
  %2100 = shufflevector <2 x double> %2057, <2 x double> poison, <2 x i32> <i32 1, i32 0>
  %2101 = insertelement <2 x double> %2100, double %2060, i64 1
  %2102 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2099, <2 x double> %2101, <2 x double> %2030)
  %2103 = insertelement <2 x double> %2100, double %2060, i64 0
  %2104 = insertelement <2 x double> poison, double %2095, i64 0
  %2105 = shufflevector <2 x double> %2104, <2 x double> poison, <2 x i32> zeroinitializer
  %2106 = fmul <2 x double> %2103, %2105
  %2107 = shufflevector <2 x double> %2106, <2 x double> poison, <2 x i32> <i32 1, i32 poison>
  %2108 = shufflevector <2 x double> %2106, <2 x double> poison, <2 x i32> <i32 1, i32 1>
  %2109 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2108, <2 x double> %2057, <2 x double> %2029)
  %2110 = insertelement <2 x double> %2107, double %2097, i64 1
  %2111 = fadd <2 x double> %2032, %2110
  %2112 = load <2 x double>, ptr %2051, align 8, !tbaa !19
  %2113 = fsub <2 x double> %2112, %2110
  store <2 x double> %2113, ptr %2051, align 8, !tbaa !19
  %2114 = shufflevector <2 x double> %2103, <2 x double> poison, <2 x i32> zeroinitializer
  %2115 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2106, <2 x double> %2114, <2 x double> %2031)
  %2116 = extractelement <2 x double> %2106, i64 0
  %2117 = fadd double %2028, %2116
  %2118 = getelementptr inbounds %class.Vector, ptr %648, i64 %2040, i32 2
  %2119 = load double, ptr %2118, align 8, !tbaa !87
  %2120 = fsub double %2119, %2116
  store double %2120, ptr %2118, align 8, !tbaa !87
  %2121 = add nuw nsw i64 %2026, 1
  %2122 = icmp eq i64 %2121, %2024
  br i1 %2122, label %2123, label %2025

2123:                                             ; preds = %2025, %2011
  %2124 = phi double [ %2012, %2011 ], [ %2117, %2025 ]
  %2125 = phi double [ %2013, %2011 ], [ %2093, %2025 ]
  %2126 = phi <2 x double> [ %2014, %2011 ], [ %2109, %2025 ]
  %2127 = phi <2 x double> [ %2015, %2011 ], [ %2102, %2025 ]
  %2128 = phi <2 x double> [ %2016, %2011 ], [ %2115, %2025 ]
  %2129 = phi <2 x double> [ %2017, %2011 ], [ %2111, %2025 ]
  %2130 = getelementptr inbounds %class.Vector, ptr %649, i64 %684
  %2131 = load <2 x double>, ptr %2130, align 8, !tbaa !19
  %2132 = fadd <2 x double> %2129, %2131
  store <2 x double> %2132, ptr %2130, align 8, !tbaa !19
  %2133 = getelementptr inbounds %class.Vector, ptr %649, i64 %684, i32 2
  %2134 = load double, ptr %2133, align 8, !tbaa !87
  %2135 = fadd double %2124, %2134
  store double %2135, ptr %2133, align 8, !tbaa !87
  br i1 %144, label %2138, label %2136

2136:                                             ; preds = %2123
  %2137 = add nsw i32 %675, 1
  br label %2146

2138:                                             ; preds = %2123
  %2139 = load ptr, ptr %8, align 8, !tbaa !46
  %2140 = load i32, ptr %13, align 8, !tbaa !17
  %2141 = add nsw i32 %2140, 1
  store i32 %2141, ptr %13, align 8, !tbaa !17
  %2142 = sext i32 %2140 to i64
  %2143 = getelementptr inbounds i16, ptr %2139, i64 %2142
  %2144 = load i16, ptr %2143, align 2, !tbaa !44
  %2145 = zext i16 %2144 to i32
  br label %2146

2146:                                             ; preds = %1126, %1394, %2138, %2136, %696
  %2147 = phi i32 [ %1789, %2138 ], [ %1789, %2136 ], [ %697, %696 ], [ %700, %1394 ], [ %700, %1126 ]
  %2148 = phi i32 [ %1796, %2138 ], [ %1796, %2136 ], [ %679, %696 ], [ %1140, %1394 ], [ 0, %1126 ]
  %2149 = phi ptr [ %1797, %2138 ], [ %1797, %2136 ], [ %678, %696 ], [ %950, %1394 ], [ %950, %1126 ]
  %2150 = phi ptr [ %1798, %2138 ], [ %1798, %2136 ], [ %677, %696 ], [ %951, %1394 ], [ %951, %1126 ]
  %2151 = phi ptr [ %1799, %2138 ], [ %1799, %2136 ], [ %676, %696 ], [ %952, %1394 ], [ %952, %1126 ]
  %2152 = phi i32 [ %2145, %2138 ], [ %2137, %2136 ], [ %698, %696 ], [ %1395, %1394 ], [ %1130, %1126 ]
  %2153 = phi double [ %2125, %2138 ], [ %2125, %2136 ], [ %674, %696 ], [ %674, %1394 ], [ %674, %1126 ]
  %2154 = phi i32 [ %2020, %2138 ], [ %2020, %2136 ], [ %673, %696 ], [ %673, %1394 ], [ %673, %1126 ]
  %2155 = phi <2 x double> [ %2126, %2138 ], [ %2126, %2136 ], [ %681, %696 ], [ %681, %1394 ], [ %681, %1126 ]
  %2156 = phi <2 x double> [ %2127, %2138 ], [ %2127, %2136 ], [ %682, %696 ], [ %682, %1394 ], [ %682, %1126 ]
  %2157 = phi <2 x double> [ %2128, %2138 ], [ %2128, %2136 ], [ %683, %696 ], [ %683, %1394 ], [ %683, %1126 ]
  %2158 = icmp slt i32 %2152, %36
  br i1 %2158, label %672, label %2159

2159:                                             ; preds = %2146, %645
  %2160 = phi ptr [ null, %645 ], [ %2151, %2146 ]
  %2161 = phi i32 [ %652, %645 ], [ %2152, %2146 ]
  %2162 = phi double [ 0.000000e+00, %645 ], [ %2153, %2146 ]
  %2163 = phi i32 [ 0, %645 ], [ %2154, %2146 ]
  %2164 = phi <2 x double> [ zeroinitializer, %645 ], [ %2155, %2146 ]
  %2165 = phi <2 x double> [ zeroinitializer, %645 ], [ %2156, %2146 ]
  %2166 = phi <2 x double> [ zeroinitializer, %645 ], [ %2157, %2146 ]
  br i1 %142, label %2174, label %2167

2167:                                             ; preds = %2159
  %2168 = trunc i32 %2161 to i16
  %2169 = load ptr, ptr %8, align 8, !tbaa !46
  %2170 = load i32, ptr %13, align 8, !tbaa !17
  %2171 = add nsw i32 %2170, -1
  %2172 = sext i32 %2171 to i64
  %2173 = getelementptr inbounds i16, ptr %2169, i64 %2172
  store i16 %2168, ptr %2173, align 2, !tbaa !44
  br label %2174

2174:                                             ; preds = %2167, %2159
  %2175 = sitofp i32 %2163 to double
  %2176 = getelementptr inbounds double, ptr %6, i64 22
  %2177 = load double, ptr %2176, align 8, !tbaa !19
  %2178 = fadd double %2177, %2175
  store double %2178, ptr %2176, align 8, !tbaa !19
  %2179 = getelementptr inbounds double, ptr %6, i64 1
  %2180 = load double, ptr %2179, align 8, !tbaa !19
  %2181 = fadd double %2162, %2180
  store double %2181, ptr %2179, align 8, !tbaa !19
  %2182 = getelementptr inbounds double, ptr %6, i64 12
  %2183 = load <4 x double>, ptr %2182, align 8, !tbaa !19
  %2184 = shufflevector <2 x double> %2164, <2 x double> %2166, <4 x i32> <i32 0, i32 1, i32 3, i32 poison>
  %2185 = shufflevector <4 x double> %2184, <4 x double> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 1>
  %2186 = fadd <4 x double> %2185, %2183
  store <4 x double> %2186, ptr %2182, align 8, !tbaa !19
  %2187 = getelementptr inbounds double, ptr %6, i64 16
  %2188 = load <4 x double>, ptr %2187, align 8, !tbaa !19
  %2189 = shufflevector <2 x double> %2165, <2 x double> %2166, <4 x i32> <i32 0, i32 1, i32 3, i32 poison>
  %2190 = shufflevector <4 x double> %2189, <4 x double> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 1>
  %2191 = fadd <4 x double> %2190, %2188
  store <4 x double> %2191, ptr %2187, align 8, !tbaa !19
  %2192 = getelementptr inbounds double, ptr %6, i64 20
  %2193 = load double, ptr %2192, align 8, !tbaa !19
  %2194 = extractelement <2 x double> %2166, i64 0
  %2195 = fadd double %2194, %2193
  store double %2195, ptr %2192, align 8, !tbaa !19
  %2196 = icmp eq ptr %2160, null
  br i1 %2196, label %2198, label %2197

2197:                                             ; preds = %2174
  tail call void @_ZdaPv(ptr noundef nonnull %2160) #10
  br label %2198

2198:                                             ; preds = %2174, %2197, %1
  ret void
}

; Function Attrs: sspstrong uwtable
define dso_local void @_ZN20ComputeNonbondedUtil9calc_selfEP9nonbonded(ptr nocapture noundef readonly %0) local_unnamed_addr #0 align 2 {
  %2 = load i32, ptr @_ZN20ComputeNonbondedUtil8commOnlyE, align 4, !tbaa !5
  %3 = icmp eq i32 %2, 0
  br i1 %3, label %4, label %2195

4:                                                ; preds = %1
  %5 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 7
  %6 = load ptr, ptr %5, align 8, !tbaa !9
  %7 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 10
  %8 = load ptr, ptr %7, align 8, !tbaa !14
  %9 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 11
  %10 = load i32, ptr %9, align 8, !tbaa !15
  %11 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 12
  %12 = load i32, ptr %11, align 4, !tbaa !16
  %13 = getelementptr inbounds %class.Pairlists, ptr %8, i64 0, i32 1
  store i32 0, ptr %13, align 8, !tbaa !17
  %14 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 6
  %15 = load <2 x double>, ptr %14, align 8, !tbaa !19
  %16 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 6, i32 2
  %17 = load double, ptr %16, align 8, !tbaa !20
  %18 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 13
  %19 = load double, ptr %18, align 8, !tbaa !21
  %20 = fmul double %19, %19
  %21 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 14
  %22 = load double, ptr %21, align 8, !tbaa !22
  %23 = fmul double %22, %22
  %24 = load double, ptr @_ZN20ComputeNonbondedUtil12dielectric_1E, align 8, !tbaa !19
  %25 = load ptr, ptr @_ZN20ComputeNonbondedUtil7ljTableE, align 8, !tbaa !23
  %26 = load ptr, ptr @_ZN20ComputeNonbondedUtil3molE, align 8, !tbaa !23
  %27 = load ptr, ptr @_ZN20ComputeNonbondedUtil11table_shortE, align 8, !tbaa !23
  %28 = load double, ptr @_ZN20ComputeNonbondedUtil7scalingE, align 8, !tbaa !19
  %29 = load double, ptr @_ZN20ComputeNonbondedUtil7scale14E, align 8, !tbaa !19
  %30 = load double, ptr @_ZN20ComputeNonbondedUtil8r2_deltaE, align 8, !tbaa !19
  %31 = load i32, ptr @_ZN20ComputeNonbondedUtil12r2_delta_expE, align 4, !tbaa !5
  %32 = shl i32 %31, 6
  %33 = add i32 %32, -65472
  %34 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 5
  %35 = load i32, ptr %34, align 8, !tbaa !5
  %36 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 5, i64 1
  %37 = load i32, ptr %36, align 4, !tbaa !5
  %38 = load ptr, ptr %0, align 8, !tbaa !23
  %39 = getelementptr inbounds [2 x ptr], ptr %0, i64 0, i64 1
  %40 = load ptr, ptr %39, align 8, !tbaa !23
  %41 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 1
  %42 = load ptr, ptr %41, align 8, !tbaa !23
  %43 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 1, i64 1
  %44 = load ptr, ptr %43, align 8, !tbaa !23
  %45 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 9
  %46 = load ptr, ptr %45, align 8, !tbaa !24
  %47 = add nsw i32 %37, 5
  %48 = getelementptr inbounds %class.ResizeArray, ptr %46, i64 0, i32 1
  %49 = load ptr, ptr %48, align 8, !tbaa !25
  %50 = getelementptr inbounds %class.ResizeArrayRaw, ptr %49, i64 0, i32 2
  %51 = load i32, ptr %50, align 8, !tbaa !27
  %52 = icmp slt i32 %51, %47
  br i1 %52, label %53, label %91

53:                                               ; preds = %4
  %54 = getelementptr inbounds %class.ResizeArrayRaw, ptr %49, i64 0, i32 3
  %55 = load i32, ptr %54, align 4, !tbaa !30
  %56 = icmp slt i32 %55, %47
  br i1 %56, label %57, label %91

57:                                               ; preds = %53
  %58 = sitofp i32 %55 to float
  %59 = getelementptr inbounds %class.ResizeArrayRaw, ptr %49, i64 0, i32 5
  %60 = load float, ptr %59, align 4, !tbaa !31
  %61 = fmul float %60, %58
  %62 = fptosi float %61 to i32
  %63 = tail call i32 @llvm.smax.i32(i32 %62, i32 %47)
  %64 = sub nsw i32 %63, %55
  %65 = getelementptr inbounds %class.ResizeArrayRaw, ptr %49, i64 0, i32 6
  %66 = load i32, ptr %65, align 8, !tbaa !32
  %67 = icmp slt i32 %64, %66
  %68 = add nsw i32 %66, %55
  %69 = select i1 %67, i32 %68, i32 %63
  %70 = sext i32 %69 to i64
  %71 = shl nsw i64 %70, 1
  %72 = add nsw i64 %71, 31
  %73 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %72) #9
  %74 = getelementptr inbounds i8, ptr %73, i64 31
  %75 = ptrtoint ptr %74 to i64
  %76 = and i64 %75, 31
  %77 = sub nsw i64 0, %76
  %78 = getelementptr inbounds i8, ptr %74, i64 %77
  %79 = load ptr, ptr %49, align 8, !tbaa !33
  %80 = sext i32 %51 to i64
  %81 = shl nsw i64 %80, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %78, ptr align 1 %79, i64 %81, i1 false)
  %82 = icmp eq i32 %55, 0
  br i1 %82, label %88, label %83

83:                                               ; preds = %57
  %84 = getelementptr inbounds %class.ResizeArrayRaw, ptr %49, i64 0, i32 1
  %85 = load ptr, ptr %84, align 8, !tbaa !34
  %86 = icmp eq ptr %85, null
  br i1 %86, label %88, label %87

87:                                               ; preds = %83
  tail call void @_ZdaPv(ptr noundef nonnull %85) #10
  br label %88

88:                                               ; preds = %87, %83, %57
  %89 = getelementptr inbounds %class.ResizeArrayRaw, ptr %49, i64 0, i32 1
  store ptr %73, ptr %89, align 8, !tbaa !34
  store ptr %78, ptr %49, align 8, !tbaa !33
  store i32 %69, ptr %54, align 4, !tbaa !30
  %90 = load ptr, ptr %48, align 8, !tbaa !25
  br label %91

91:                                               ; preds = %4, %53, %88
  %92 = phi ptr [ %49, %4 ], [ %49, %53 ], [ %90, %88 ]
  store i32 %47, ptr %50, align 8, !tbaa !27
  %93 = load ptr, ptr %92, align 8, !tbaa !33
  %94 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %46, i64 0, i32 1, i32 1
  %95 = load ptr, ptr %94, align 8, !tbaa !35
  %96 = getelementptr inbounds %class.ResizeArrayRaw.23, ptr %95, i64 0, i32 2
  %97 = load i32, ptr %96, align 8, !tbaa !37
  %98 = icmp slt i32 %97, %47
  br i1 %98, label %99, label %137

99:                                               ; preds = %91
  %100 = getelementptr inbounds %class.ResizeArrayRaw.23, ptr %95, i64 0, i32 3
  %101 = load i32, ptr %100, align 4, !tbaa !39
  %102 = icmp slt i32 %101, %47
  br i1 %102, label %103, label %137

103:                                              ; preds = %99
  %104 = sitofp i32 %101 to float
  %105 = getelementptr inbounds %class.ResizeArrayRaw.23, ptr %95, i64 0, i32 5
  %106 = load float, ptr %105, align 4, !tbaa !40
  %107 = fmul float %106, %104
  %108 = fptosi float %107 to i32
  %109 = tail call i32 @llvm.smax.i32(i32 %108, i32 %47)
  %110 = sub nsw i32 %109, %101
  %111 = getelementptr inbounds %class.ResizeArrayRaw.23, ptr %95, i64 0, i32 6
  %112 = load i32, ptr %111, align 8, !tbaa !41
  %113 = icmp slt i32 %110, %112
  %114 = add nsw i32 %112, %101
  %115 = select i1 %113, i32 %114, i32 %109
  %116 = sext i32 %115 to i64
  %117 = shl nsw i64 %116, 3
  %118 = add nsw i64 %117, 31
  %119 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %118) #9
  %120 = getelementptr inbounds i8, ptr %119, i64 31
  %121 = ptrtoint ptr %120 to i64
  %122 = and i64 %121, 31
  %123 = sub nsw i64 0, %122
  %124 = getelementptr inbounds i8, ptr %120, i64 %123
  %125 = load ptr, ptr %95, align 8, !tbaa !42
  %126 = sext i32 %97 to i64
  %127 = shl nsw i64 %126, 3
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %124, ptr align 1 %125, i64 %127, i1 false)
  %128 = icmp eq i32 %101, 0
  br i1 %128, label %134, label %129

129:                                              ; preds = %103
  %130 = getelementptr inbounds %class.ResizeArrayRaw.23, ptr %95, i64 0, i32 1
  %131 = load ptr, ptr %130, align 8, !tbaa !43
  %132 = icmp eq ptr %131, null
  br i1 %132, label %134, label %133

133:                                              ; preds = %129
  tail call void @_ZdaPv(ptr noundef nonnull %131) #10
  br label %134

134:                                              ; preds = %133, %129, %103
  %135 = getelementptr inbounds %class.ResizeArrayRaw.23, ptr %95, i64 0, i32 1
  store ptr %119, ptr %135, align 8, !tbaa !43
  store ptr %124, ptr %95, align 8, !tbaa !42
  store i32 %115, ptr %100, align 4, !tbaa !39
  %136 = load ptr, ptr %94, align 8, !tbaa !35
  br label %137

137:                                              ; preds = %91, %99, %134
  %138 = phi ptr [ %95, %91 ], [ %95, %99 ], [ %136, %134 ]
  store i32 %47, ptr %96, align 8, !tbaa !37
  %139 = load ptr, ptr %138, align 8, !tbaa !42
  %140 = getelementptr inbounds i32, ptr %139, i64 1
  %141 = icmp eq i32 %10, 0
  %142 = icmp ne i32 %12, 0
  %143 = select i1 %141, i1 %142, i1 false
  %144 = select i1 %143, i32 0, i32 %47
  %145 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %46, i64 0, i32 2, i32 1
  %146 = load ptr, ptr %145, align 8, !tbaa !25
  %147 = getelementptr inbounds %class.ResizeArrayRaw, ptr %146, i64 0, i32 2
  %148 = load i32, ptr %147, align 8, !tbaa !27
  %149 = icmp slt i32 %148, %144
  br i1 %149, label %150, label %188

150:                                              ; preds = %137
  %151 = getelementptr inbounds %class.ResizeArrayRaw, ptr %146, i64 0, i32 3
  %152 = load i32, ptr %151, align 4, !tbaa !30
  %153 = icmp slt i32 %152, %144
  br i1 %153, label %154, label %188

154:                                              ; preds = %150
  %155 = sitofp i32 %152 to float
  %156 = getelementptr inbounds %class.ResizeArrayRaw, ptr %146, i64 0, i32 5
  %157 = load float, ptr %156, align 4, !tbaa !31
  %158 = fmul float %157, %155
  %159 = fptosi float %158 to i32
  %160 = tail call i32 @llvm.smax.i32(i32 %159, i32 %144)
  %161 = sub nsw i32 %160, %152
  %162 = getelementptr inbounds %class.ResizeArrayRaw, ptr %146, i64 0, i32 6
  %163 = load i32, ptr %162, align 8, !tbaa !32
  %164 = icmp slt i32 %161, %163
  %165 = add nsw i32 %163, %152
  %166 = select i1 %164, i32 %165, i32 %160
  %167 = sext i32 %166 to i64
  %168 = shl nsw i64 %167, 1
  %169 = add nsw i64 %168, 31
  %170 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %169) #9
  %171 = getelementptr inbounds i8, ptr %170, i64 31
  %172 = ptrtoint ptr %171 to i64
  %173 = and i64 %172, 31
  %174 = sub nsw i64 0, %173
  %175 = getelementptr inbounds i8, ptr %171, i64 %174
  %176 = load ptr, ptr %146, align 8, !tbaa !33
  %177 = sext i32 %148 to i64
  %178 = shl nsw i64 %177, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %175, ptr align 1 %176, i64 %178, i1 false)
  %179 = icmp eq i32 %152, 0
  br i1 %179, label %185, label %180

180:                                              ; preds = %154
  %181 = getelementptr inbounds %class.ResizeArrayRaw, ptr %146, i64 0, i32 1
  %182 = load ptr, ptr %181, align 8, !tbaa !34
  %183 = icmp eq ptr %182, null
  br i1 %183, label %185, label %184

184:                                              ; preds = %180
  tail call void @_ZdaPv(ptr noundef nonnull %182) #10
  br label %185

185:                                              ; preds = %184, %180, %154
  %186 = getelementptr inbounds %class.ResizeArrayRaw, ptr %146, i64 0, i32 1
  store ptr %170, ptr %186, align 8, !tbaa !34
  store ptr %175, ptr %146, align 8, !tbaa !33
  store i32 %166, ptr %151, align 4, !tbaa !30
  %187 = load ptr, ptr %145, align 8, !tbaa !25
  br label %188

188:                                              ; preds = %137, %150, %185
  %189 = phi ptr [ %146, %137 ], [ %146, %150 ], [ %187, %185 ]
  store i32 %144, ptr %147, align 8, !tbaa !27
  %190 = load ptr, ptr %189, align 8, !tbaa !33
  %191 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %46, i64 0, i32 3, i32 1
  %192 = load ptr, ptr %191, align 8, !tbaa !25
  %193 = getelementptr inbounds %class.ResizeArrayRaw, ptr %192, i64 0, i32 2
  %194 = load i32, ptr %193, align 8, !tbaa !27
  %195 = icmp slt i32 %194, %144
  br i1 %195, label %196, label %234

196:                                              ; preds = %188
  %197 = getelementptr inbounds %class.ResizeArrayRaw, ptr %192, i64 0, i32 3
  %198 = load i32, ptr %197, align 4, !tbaa !30
  %199 = icmp slt i32 %198, %144
  br i1 %199, label %200, label %234

200:                                              ; preds = %196
  %201 = sitofp i32 %198 to float
  %202 = getelementptr inbounds %class.ResizeArrayRaw, ptr %192, i64 0, i32 5
  %203 = load float, ptr %202, align 4, !tbaa !31
  %204 = fmul float %203, %201
  %205 = fptosi float %204 to i32
  %206 = tail call i32 @llvm.smax.i32(i32 %205, i32 %144)
  %207 = sub nsw i32 %206, %198
  %208 = getelementptr inbounds %class.ResizeArrayRaw, ptr %192, i64 0, i32 6
  %209 = load i32, ptr %208, align 8, !tbaa !32
  %210 = icmp slt i32 %207, %209
  %211 = add nsw i32 %209, %198
  %212 = select i1 %210, i32 %211, i32 %206
  %213 = sext i32 %212 to i64
  %214 = shl nsw i64 %213, 1
  %215 = add nsw i64 %214, 31
  %216 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %215) #9
  %217 = getelementptr inbounds i8, ptr %216, i64 31
  %218 = ptrtoint ptr %217 to i64
  %219 = and i64 %218, 31
  %220 = sub nsw i64 0, %219
  %221 = getelementptr inbounds i8, ptr %217, i64 %220
  %222 = load ptr, ptr %192, align 8, !tbaa !33
  %223 = sext i32 %194 to i64
  %224 = shl nsw i64 %223, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %221, ptr align 1 %222, i64 %224, i1 false)
  %225 = icmp eq i32 %198, 0
  br i1 %225, label %231, label %226

226:                                              ; preds = %200
  %227 = getelementptr inbounds %class.ResizeArrayRaw, ptr %192, i64 0, i32 1
  %228 = load ptr, ptr %227, align 8, !tbaa !34
  %229 = icmp eq ptr %228, null
  br i1 %229, label %231, label %230

230:                                              ; preds = %226
  tail call void @_ZdaPv(ptr noundef nonnull %228) #10
  br label %231

231:                                              ; preds = %230, %226, %200
  %232 = getelementptr inbounds %class.ResizeArrayRaw, ptr %192, i64 0, i32 1
  store ptr %216, ptr %232, align 8, !tbaa !34
  store ptr %221, ptr %192, align 8, !tbaa !33
  store i32 %212, ptr %197, align 4, !tbaa !30
  %233 = load ptr, ptr %191, align 8, !tbaa !25
  br label %234

234:                                              ; preds = %188, %196, %231
  %235 = phi ptr [ %192, %188 ], [ %192, %196 ], [ %233, %231 ]
  store i32 %144, ptr %193, align 8, !tbaa !27
  %236 = load ptr, ptr %235, align 8, !tbaa !33
  %237 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %46, i64 0, i32 4, i32 1
  %238 = load ptr, ptr %237, align 8, !tbaa !25
  %239 = getelementptr inbounds %class.ResizeArrayRaw, ptr %238, i64 0, i32 2
  %240 = load i32, ptr %239, align 8, !tbaa !27
  %241 = icmp slt i32 %240, %144
  br i1 %241, label %242, label %280

242:                                              ; preds = %234
  %243 = getelementptr inbounds %class.ResizeArrayRaw, ptr %238, i64 0, i32 3
  %244 = load i32, ptr %243, align 4, !tbaa !30
  %245 = icmp slt i32 %244, %144
  br i1 %245, label %246, label %280

246:                                              ; preds = %242
  %247 = sitofp i32 %244 to float
  %248 = getelementptr inbounds %class.ResizeArrayRaw, ptr %238, i64 0, i32 5
  %249 = load float, ptr %248, align 4, !tbaa !31
  %250 = fmul float %249, %247
  %251 = fptosi float %250 to i32
  %252 = tail call i32 @llvm.smax.i32(i32 %251, i32 %144)
  %253 = sub nsw i32 %252, %244
  %254 = getelementptr inbounds %class.ResizeArrayRaw, ptr %238, i64 0, i32 6
  %255 = load i32, ptr %254, align 8, !tbaa !32
  %256 = icmp slt i32 %253, %255
  %257 = add nsw i32 %255, %244
  %258 = select i1 %256, i32 %257, i32 %252
  %259 = sext i32 %258 to i64
  %260 = shl nsw i64 %259, 1
  %261 = add nsw i64 %260, 31
  %262 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %261) #9
  %263 = getelementptr inbounds i8, ptr %262, i64 31
  %264 = ptrtoint ptr %263 to i64
  %265 = and i64 %264, 31
  %266 = sub nsw i64 0, %265
  %267 = getelementptr inbounds i8, ptr %263, i64 %266
  %268 = load ptr, ptr %238, align 8, !tbaa !33
  %269 = sext i32 %240 to i64
  %270 = shl nsw i64 %269, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %267, ptr align 1 %268, i64 %270, i1 false)
  %271 = icmp eq i32 %244, 0
  br i1 %271, label %277, label %272

272:                                              ; preds = %246
  %273 = getelementptr inbounds %class.ResizeArrayRaw, ptr %238, i64 0, i32 1
  %274 = load ptr, ptr %273, align 8, !tbaa !34
  %275 = icmp eq ptr %274, null
  br i1 %275, label %277, label %276

276:                                              ; preds = %272
  tail call void @_ZdaPv(ptr noundef nonnull %274) #10
  br label %277

277:                                              ; preds = %276, %272, %246
  %278 = getelementptr inbounds %class.ResizeArrayRaw, ptr %238, i64 0, i32 1
  store ptr %262, ptr %278, align 8, !tbaa !34
  store ptr %267, ptr %238, align 8, !tbaa !33
  store i32 %258, ptr %243, align 4, !tbaa !30
  %279 = load ptr, ptr %237, align 8, !tbaa !25
  br label %280

280:                                              ; preds = %234, %242, %277
  %281 = phi ptr [ %238, %234 ], [ %238, %242 ], [ %279, %277 ]
  store i32 %144, ptr %239, align 8, !tbaa !27
  %282 = load ptr, ptr %281, align 8, !tbaa !33
  %283 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %46, i64 0, i32 5, i32 1
  %284 = load ptr, ptr %283, align 8, !tbaa !25
  %285 = getelementptr inbounds %class.ResizeArrayRaw, ptr %284, i64 0, i32 2
  %286 = load i32, ptr %285, align 8, !tbaa !27
  %287 = icmp slt i32 %286, %144
  br i1 %287, label %288, label %326

288:                                              ; preds = %280
  %289 = getelementptr inbounds %class.ResizeArrayRaw, ptr %284, i64 0, i32 3
  %290 = load i32, ptr %289, align 4, !tbaa !30
  %291 = icmp slt i32 %290, %144
  br i1 %291, label %292, label %326

292:                                              ; preds = %288
  %293 = sitofp i32 %290 to float
  %294 = getelementptr inbounds %class.ResizeArrayRaw, ptr %284, i64 0, i32 5
  %295 = load float, ptr %294, align 4, !tbaa !31
  %296 = fmul float %295, %293
  %297 = fptosi float %296 to i32
  %298 = tail call i32 @llvm.smax.i32(i32 %297, i32 %144)
  %299 = sub nsw i32 %298, %290
  %300 = getelementptr inbounds %class.ResizeArrayRaw, ptr %284, i64 0, i32 6
  %301 = load i32, ptr %300, align 8, !tbaa !32
  %302 = icmp slt i32 %299, %301
  %303 = add nsw i32 %301, %290
  %304 = select i1 %302, i32 %303, i32 %298
  %305 = sext i32 %304 to i64
  %306 = shl nsw i64 %305, 1
  %307 = add nsw i64 %306, 31
  %308 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %307) #9
  %309 = getelementptr inbounds i8, ptr %308, i64 31
  %310 = ptrtoint ptr %309 to i64
  %311 = and i64 %310, 31
  %312 = sub nsw i64 0, %311
  %313 = getelementptr inbounds i8, ptr %309, i64 %312
  %314 = load ptr, ptr %284, align 8, !tbaa !33
  %315 = sext i32 %286 to i64
  %316 = shl nsw i64 %315, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %313, ptr align 1 %314, i64 %316, i1 false)
  %317 = icmp eq i32 %290, 0
  br i1 %317, label %323, label %318

318:                                              ; preds = %292
  %319 = getelementptr inbounds %class.ResizeArrayRaw, ptr %284, i64 0, i32 1
  %320 = load ptr, ptr %319, align 8, !tbaa !34
  %321 = icmp eq ptr %320, null
  br i1 %321, label %323, label %322

322:                                              ; preds = %318
  tail call void @_ZdaPv(ptr noundef nonnull %320) #10
  br label %323

323:                                              ; preds = %322, %318, %292
  %324 = getelementptr inbounds %class.ResizeArrayRaw, ptr %284, i64 0, i32 1
  store ptr %308, ptr %324, align 8, !tbaa !34
  store ptr %313, ptr %284, align 8, !tbaa !33
  store i32 %304, ptr %289, align 4, !tbaa !30
  %325 = load ptr, ptr %283, align 8, !tbaa !25
  br label %326

326:                                              ; preds = %280, %288, %323
  %327 = phi ptr [ %284, %280 ], [ %284, %288 ], [ %325, %323 ]
  store i32 %144, ptr %285, align 8, !tbaa !27
  %328 = load ptr, ptr %327, align 8, !tbaa !33
  %329 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %46, i64 0, i32 6, i32 1
  %330 = load ptr, ptr %329, align 8, !tbaa !25
  %331 = getelementptr inbounds %class.ResizeArrayRaw, ptr %330, i64 0, i32 2
  %332 = load i32, ptr %331, align 8, !tbaa !27
  %333 = icmp slt i32 %332, %144
  br i1 %333, label %334, label %372

334:                                              ; preds = %326
  %335 = getelementptr inbounds %class.ResizeArrayRaw, ptr %330, i64 0, i32 3
  %336 = load i32, ptr %335, align 4, !tbaa !30
  %337 = icmp slt i32 %336, %144
  br i1 %337, label %338, label %372

338:                                              ; preds = %334
  %339 = sitofp i32 %336 to float
  %340 = getelementptr inbounds %class.ResizeArrayRaw, ptr %330, i64 0, i32 5
  %341 = load float, ptr %340, align 4, !tbaa !31
  %342 = fmul float %341, %339
  %343 = fptosi float %342 to i32
  %344 = tail call i32 @llvm.smax.i32(i32 %343, i32 %144)
  %345 = sub nsw i32 %344, %336
  %346 = getelementptr inbounds %class.ResizeArrayRaw, ptr %330, i64 0, i32 6
  %347 = load i32, ptr %346, align 8, !tbaa !32
  %348 = icmp slt i32 %345, %347
  %349 = add nsw i32 %347, %336
  %350 = select i1 %348, i32 %349, i32 %344
  %351 = sext i32 %350 to i64
  %352 = shl nsw i64 %351, 1
  %353 = add nsw i64 %352, 31
  %354 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %353) #9
  %355 = getelementptr inbounds i8, ptr %354, i64 31
  %356 = ptrtoint ptr %355 to i64
  %357 = and i64 %356, 31
  %358 = sub nsw i64 0, %357
  %359 = getelementptr inbounds i8, ptr %355, i64 %358
  %360 = load ptr, ptr %330, align 8, !tbaa !33
  %361 = sext i32 %332 to i64
  %362 = shl nsw i64 %361, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %359, ptr align 1 %360, i64 %362, i1 false)
  %363 = icmp eq i32 %336, 0
  br i1 %363, label %369, label %364

364:                                              ; preds = %338
  %365 = getelementptr inbounds %class.ResizeArrayRaw, ptr %330, i64 0, i32 1
  %366 = load ptr, ptr %365, align 8, !tbaa !34
  %367 = icmp eq ptr %366, null
  br i1 %367, label %369, label %368

368:                                              ; preds = %364
  tail call void @_ZdaPv(ptr noundef nonnull %366) #10
  br label %369

369:                                              ; preds = %368, %364, %338
  %370 = getelementptr inbounds %class.ResizeArrayRaw, ptr %330, i64 0, i32 1
  store ptr %354, ptr %370, align 8, !tbaa !34
  store ptr %359, ptr %330, align 8, !tbaa !33
  store i32 %350, ptr %335, align 4, !tbaa !30
  %371 = load ptr, ptr %329, align 8, !tbaa !25
  br label %372

372:                                              ; preds = %326, %334, %369
  %373 = phi ptr [ %330, %326 ], [ %330, %334 ], [ %371, %369 ]
  store i32 %144, ptr %331, align 8, !tbaa !27
  %374 = load ptr, ptr %373, align 8, !tbaa !33
  %375 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %46, i64 0, i32 15, i32 1
  %376 = load ptr, ptr %375, align 8, !tbaa !25
  %377 = getelementptr inbounds %class.ResizeArrayRaw, ptr %376, i64 0, i32 2
  %378 = load i32, ptr %377, align 8, !tbaa !27
  %379 = icmp slt i32 %378, %144
  br i1 %379, label %380, label %418

380:                                              ; preds = %372
  %381 = getelementptr inbounds %class.ResizeArrayRaw, ptr %376, i64 0, i32 3
  %382 = load i32, ptr %381, align 4, !tbaa !30
  %383 = icmp slt i32 %382, %144
  br i1 %383, label %384, label %418

384:                                              ; preds = %380
  %385 = sitofp i32 %382 to float
  %386 = getelementptr inbounds %class.ResizeArrayRaw, ptr %376, i64 0, i32 5
  %387 = load float, ptr %386, align 4, !tbaa !31
  %388 = fmul float %387, %385
  %389 = fptosi float %388 to i32
  %390 = tail call i32 @llvm.smax.i32(i32 %389, i32 %144)
  %391 = sub nsw i32 %390, %382
  %392 = getelementptr inbounds %class.ResizeArrayRaw, ptr %376, i64 0, i32 6
  %393 = load i32, ptr %392, align 8, !tbaa !32
  %394 = icmp slt i32 %391, %393
  %395 = add nsw i32 %393, %382
  %396 = select i1 %394, i32 %395, i32 %390
  %397 = sext i32 %396 to i64
  %398 = shl nsw i64 %397, 1
  %399 = add nsw i64 %398, 31
  %400 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %399) #9
  %401 = getelementptr inbounds i8, ptr %400, i64 31
  %402 = ptrtoint ptr %401 to i64
  %403 = and i64 %402, 31
  %404 = sub nsw i64 0, %403
  %405 = getelementptr inbounds i8, ptr %401, i64 %404
  %406 = load ptr, ptr %376, align 8, !tbaa !33
  %407 = sext i32 %378 to i64
  %408 = shl nsw i64 %407, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %405, ptr align 1 %406, i64 %408, i1 false)
  %409 = icmp eq i32 %382, 0
  br i1 %409, label %415, label %410

410:                                              ; preds = %384
  %411 = getelementptr inbounds %class.ResizeArrayRaw, ptr %376, i64 0, i32 1
  %412 = load ptr, ptr %411, align 8, !tbaa !34
  %413 = icmp eq ptr %412, null
  br i1 %413, label %415, label %414

414:                                              ; preds = %410
  tail call void @_ZdaPv(ptr noundef nonnull %412) #10
  br label %415

415:                                              ; preds = %414, %410, %384
  %416 = getelementptr inbounds %class.ResizeArrayRaw, ptr %376, i64 0, i32 1
  store ptr %400, ptr %416, align 8, !tbaa !34
  store ptr %405, ptr %376, align 8, !tbaa !33
  store i32 %396, ptr %381, align 4, !tbaa !30
  %417 = load ptr, ptr %375, align 8, !tbaa !25
  br label %418

418:                                              ; preds = %372, %380, %415
  %419 = phi ptr [ %376, %372 ], [ %376, %380 ], [ %417, %415 ]
  store i32 %144, ptr %377, align 8, !tbaa !27
  %420 = load ptr, ptr %419, align 8, !tbaa !33
  %421 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %46, i64 0, i32 16, i32 1
  %422 = load ptr, ptr %421, align 8, !tbaa !25
  %423 = getelementptr inbounds %class.ResizeArrayRaw, ptr %422, i64 0, i32 2
  %424 = load i32, ptr %423, align 8, !tbaa !27
  %425 = icmp slt i32 %424, %144
  br i1 %425, label %426, label %464

426:                                              ; preds = %418
  %427 = getelementptr inbounds %class.ResizeArrayRaw, ptr %422, i64 0, i32 3
  %428 = load i32, ptr %427, align 4, !tbaa !30
  %429 = icmp slt i32 %428, %144
  br i1 %429, label %430, label %464

430:                                              ; preds = %426
  %431 = sitofp i32 %428 to float
  %432 = getelementptr inbounds %class.ResizeArrayRaw, ptr %422, i64 0, i32 5
  %433 = load float, ptr %432, align 4, !tbaa !31
  %434 = fmul float %433, %431
  %435 = fptosi float %434 to i32
  %436 = tail call i32 @llvm.smax.i32(i32 %435, i32 %144)
  %437 = sub nsw i32 %436, %428
  %438 = getelementptr inbounds %class.ResizeArrayRaw, ptr %422, i64 0, i32 6
  %439 = load i32, ptr %438, align 8, !tbaa !32
  %440 = icmp slt i32 %437, %439
  %441 = add nsw i32 %439, %428
  %442 = select i1 %440, i32 %441, i32 %436
  %443 = sext i32 %442 to i64
  %444 = shl nsw i64 %443, 1
  %445 = add nsw i64 %444, 31
  %446 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %445) #9
  %447 = getelementptr inbounds i8, ptr %446, i64 31
  %448 = ptrtoint ptr %447 to i64
  %449 = and i64 %448, 31
  %450 = sub nsw i64 0, %449
  %451 = getelementptr inbounds i8, ptr %447, i64 %450
  %452 = load ptr, ptr %422, align 8, !tbaa !33
  %453 = sext i32 %424 to i64
  %454 = shl nsw i64 %453, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %451, ptr align 1 %452, i64 %454, i1 false)
  %455 = icmp eq i32 %428, 0
  br i1 %455, label %461, label %456

456:                                              ; preds = %430
  %457 = getelementptr inbounds %class.ResizeArrayRaw, ptr %422, i64 0, i32 1
  %458 = load ptr, ptr %457, align 8, !tbaa !34
  %459 = icmp eq ptr %458, null
  br i1 %459, label %461, label %460

460:                                              ; preds = %456
  tail call void @_ZdaPv(ptr noundef nonnull %458) #10
  br label %461

461:                                              ; preds = %460, %456, %430
  %462 = getelementptr inbounds %class.ResizeArrayRaw, ptr %422, i64 0, i32 1
  store ptr %446, ptr %462, align 8, !tbaa !34
  store ptr %451, ptr %422, align 8, !tbaa !33
  store i32 %442, ptr %427, align 4, !tbaa !30
  %463 = load ptr, ptr %421, align 8, !tbaa !25
  br label %464

464:                                              ; preds = %418, %426, %461
  %465 = phi ptr [ %422, %418 ], [ %422, %426 ], [ %463, %461 ]
  store i32 %144, ptr %423, align 8, !tbaa !27
  %466 = load ptr, ptr %465, align 8, !tbaa !33
  br i1 %143, label %608, label %467

467:                                              ; preds = %464
  %468 = icmp sgt i32 %37, 0
  br i1 %468, label %469, label %599

469:                                              ; preds = %467
  %470 = zext i32 %37 to i64
  %471 = and i64 %470, 1
  %472 = icmp eq i32 %37, 1
  br i1 %472, label %505, label %473

473:                                              ; preds = %469
  %474 = and i64 %470, 4294967294
  br label %475

475:                                              ; preds = %500, %473
  %476 = phi i64 [ 0, %473 ], [ %502, %500 ]
  %477 = phi i32 [ 0, %473 ], [ %501, %500 ]
  %478 = phi i64 [ 0, %473 ], [ %503, %500 ]
  %479 = getelementptr inbounds %struct.CompAtom, ptr %40, i64 %476, i32 4
  %480 = load i8, ptr %479, align 1
  %481 = and i8 %480, 7
  %482 = icmp eq i8 %481, 0
  br i1 %482, label %488, label %483

483:                                              ; preds = %475
  %484 = trunc i64 %476 to i16
  %485 = add nsw i32 %477, 1
  %486 = sext i32 %477 to i64
  %487 = getelementptr inbounds i16, ptr %190, i64 %486
  store i16 %484, ptr %487, align 2, !tbaa !44
  br label %488

488:                                              ; preds = %475, %483
  %489 = phi i32 [ %485, %483 ], [ %477, %475 ]
  %490 = or i64 %476, 1
  %491 = getelementptr inbounds %struct.CompAtom, ptr %40, i64 %490, i32 4
  %492 = load i8, ptr %491, align 1
  %493 = and i8 %492, 7
  %494 = icmp eq i8 %493, 0
  br i1 %494, label %500, label %495

495:                                              ; preds = %488
  %496 = trunc i64 %490 to i16
  %497 = add nsw i32 %489, 1
  %498 = sext i32 %489 to i64
  %499 = getelementptr inbounds i16, ptr %190, i64 %498
  store i16 %496, ptr %499, align 2, !tbaa !44
  br label %500

500:                                              ; preds = %495, %488
  %501 = phi i32 [ %497, %495 ], [ %489, %488 ]
  %502 = add nuw nsw i64 %476, 2
  %503 = add i64 %478, 2
  %504 = icmp eq i64 %503, %474
  br i1 %504, label %505, label %475

505:                                              ; preds = %500, %469
  %506 = phi i32 [ undef, %469 ], [ %501, %500 ]
  %507 = phi i64 [ 0, %469 ], [ %502, %500 ]
  %508 = phi i32 [ 0, %469 ], [ %501, %500 ]
  %509 = icmp eq i64 %471, 0
  br i1 %509, label %520, label %510

510:                                              ; preds = %505
  %511 = getelementptr inbounds %struct.CompAtom, ptr %40, i64 %507, i32 4
  %512 = load i8, ptr %511, align 1
  %513 = and i8 %512, 7
  %514 = icmp eq i8 %513, 0
  br i1 %514, label %520, label %515

515:                                              ; preds = %510
  %516 = trunc i64 %507 to i16
  %517 = add nsw i32 %508, 1
  %518 = sext i32 %508 to i64
  %519 = getelementptr inbounds i16, ptr %190, i64 %518
  store i16 %516, ptr %519, align 2, !tbaa !44
  br label %520

520:                                              ; preds = %510, %515, %505
  %521 = phi i32 [ %506, %505 ], [ %517, %515 ], [ %508, %510 ]
  %522 = icmp eq i32 %521, 0
  br i1 %522, label %530, label %523

523:                                              ; preds = %520
  %524 = add nsw i32 %521, -1
  %525 = sext i32 %524 to i64
  %526 = getelementptr inbounds i16, ptr %190, i64 %525
  %527 = load i16, ptr %526, align 2, !tbaa !44
  %528 = sext i32 %521 to i64
  %529 = getelementptr inbounds i16, ptr %190, i64 %528
  store i16 %527, ptr %529, align 2, !tbaa !44
  br label %530

530:                                              ; preds = %523, %520
  %531 = load i32, ptr @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4, !tbaa !5
  %532 = icmp ne i32 %531, 0
  %533 = icmp sgt i32 %521, 0
  %534 = and i1 %532, %533
  br i1 %534, label %535, label %599

535:                                              ; preds = %530
  %536 = zext i32 %521 to i64
  %537 = and i64 %536, 1
  %538 = icmp eq i32 %521, 1
  br i1 %538, label %573, label %539

539:                                              ; preds = %535
  %540 = and i64 %536, 4294967294
  br label %541

541:                                              ; preds = %568, %539
  %542 = phi i64 [ 0, %539 ], [ %570, %568 ]
  %543 = phi i32 [ 0, %539 ], [ %569, %568 ]
  %544 = phi i64 [ 0, %539 ], [ %571, %568 ]
  %545 = getelementptr inbounds i16, ptr %190, i64 %542
  %546 = load i16, ptr %545, align 2, !tbaa !44
  %547 = zext i16 %546 to i64
  %548 = getelementptr inbounds %struct.CompAtomExt, ptr %44, i64 %547
  %549 = load i32, ptr %548, align 4
  %550 = icmp sgt i32 %549, -1
  br i1 %550, label %551, label %555

551:                                              ; preds = %541
  %552 = add nsw i32 %543, 1
  %553 = sext i32 %543 to i64
  %554 = getelementptr inbounds i16, ptr %236, i64 %553
  store i16 %546, ptr %554, align 2, !tbaa !44
  br label %555

555:                                              ; preds = %541, %551
  %556 = phi i32 [ %543, %541 ], [ %552, %551 ]
  %557 = or i64 %542, 1
  %558 = getelementptr inbounds i16, ptr %190, i64 %557
  %559 = load i16, ptr %558, align 2, !tbaa !44
  %560 = zext i16 %559 to i64
  %561 = getelementptr inbounds %struct.CompAtomExt, ptr %44, i64 %560
  %562 = load i32, ptr %561, align 4
  %563 = icmp sgt i32 %562, -1
  br i1 %563, label %564, label %568

564:                                              ; preds = %555
  %565 = add nsw i32 %556, 1
  %566 = sext i32 %556 to i64
  %567 = getelementptr inbounds i16, ptr %236, i64 %566
  store i16 %559, ptr %567, align 2, !tbaa !44
  br label %568

568:                                              ; preds = %564, %555
  %569 = phi i32 [ %556, %555 ], [ %565, %564 ]
  %570 = add nuw nsw i64 %542, 2
  %571 = add i64 %544, 2
  %572 = icmp eq i64 %571, %540
  br i1 %572, label %573, label %541

573:                                              ; preds = %568, %535
  %574 = phi i32 [ undef, %535 ], [ %569, %568 ]
  %575 = phi i64 [ 0, %535 ], [ %570, %568 ]
  %576 = phi i32 [ 0, %535 ], [ %569, %568 ]
  %577 = icmp eq i64 %537, 0
  br i1 %577, label %589, label %578

578:                                              ; preds = %573
  %579 = getelementptr inbounds i16, ptr %190, i64 %575
  %580 = load i16, ptr %579, align 2, !tbaa !44
  %581 = zext i16 %580 to i64
  %582 = getelementptr inbounds %struct.CompAtomExt, ptr %44, i64 %581
  %583 = load i32, ptr %582, align 4
  %584 = icmp sgt i32 %583, -1
  br i1 %584, label %585, label %589

585:                                              ; preds = %578
  %586 = add nsw i32 %576, 1
  %587 = sext i32 %576 to i64
  %588 = getelementptr inbounds i16, ptr %236, i64 %587
  store i16 %580, ptr %588, align 2, !tbaa !44
  br label %589

589:                                              ; preds = %578, %585, %573
  %590 = phi i32 [ %574, %573 ], [ %576, %578 ], [ %586, %585 ]
  %591 = icmp eq i32 %590, 0
  br i1 %591, label %599, label %592

592:                                              ; preds = %589
  %593 = add nsw i32 %590, -1
  %594 = sext i32 %593 to i64
  %595 = getelementptr inbounds i16, ptr %236, i64 %594
  %596 = load i16, ptr %595, align 2, !tbaa !44
  %597 = sext i32 %590 to i64
  %598 = getelementptr inbounds i16, ptr %236, i64 %597
  store i16 %596, ptr %598, align 2, !tbaa !44
  br label %599

599:                                              ; preds = %467, %530, %592, %589
  %600 = phi i32 [ %521, %592 ], [ %521, %589 ], [ %521, %530 ], [ 0, %467 ]
  %601 = phi i32 [ %590, %592 ], [ 0, %589 ], [ 0, %530 ], [ 0, %467 ]
  %602 = load i32, ptr %13, align 8, !tbaa !17
  %603 = add nsw i32 %602, 1
  store i32 %603, ptr %13, align 8, !tbaa !17
  %604 = trunc i32 %35 to i16
  %605 = load ptr, ptr %8, align 8, !tbaa !46
  %606 = sext i32 %602 to i64
  %607 = getelementptr inbounds i16, ptr %605, i64 %606
  store i16 %604, ptr %607, align 2, !tbaa !44
  br label %618

608:                                              ; preds = %464
  %609 = load ptr, ptr %8, align 8, !tbaa !46
  %610 = load i32, ptr %13, align 8, !tbaa !17
  %611 = add nsw i32 %610, 1
  store i32 %611, ptr %13, align 8, !tbaa !17
  %612 = sext i32 %610 to i64
  %613 = getelementptr inbounds i16, ptr %609, i64 %612
  %614 = load i16, ptr %613, align 2, !tbaa !44
  %615 = zext i16 %614 to i32
  %616 = icmp eq i32 %35, %615
  br i1 %616, label %618, label %617

617:                                              ; preds = %608
  tail call void @_Z8NAMD_bugPKc(ptr noundef nonnull @.str)
  br label %618

618:                                              ; preds = %608, %617, %599
  %619 = phi i32 [ 0, %617 ], [ 0, %608 ], [ %600, %599 ]
  %620 = phi i32 [ 0, %617 ], [ 0, %608 ], [ %601, %599 ]
  %621 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %46, i64 0, i32 17, i32 1
  %622 = load ptr, ptr %621, align 8, !tbaa !172
  tail call void @_ZN14ResizeArrayRawI6VectorE6resizeEi(ptr noundef nonnull align 8 dereferenceable(36) %622, i32 noundef %35)
  %623 = load ptr, ptr %621, align 8, !tbaa !172
  %624 = load ptr, ptr %623, align 8, !tbaa !174
  %625 = sext i32 %35 to i64
  %626 = mul nsw i64 %625, 24
  tail call void @llvm.memset.p0.i64(ptr align 1 %624, i8 0, i64 %626, i1 false)
  %627 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 18
  %628 = load i32, ptr %627, align 4, !tbaa !48
  %629 = add nsw i32 %628, -1
  %630 = add nsw i32 %35, -1
  %631 = icmp sgt i32 %35, 1
  br i1 %631, label %632, label %2130

632:                                              ; preds = %618
  %633 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 16
  %634 = load i32, ptr %633, align 4, !tbaa !47
  %635 = getelementptr inbounds %class.Molecule, ptr %26, i64 0, i32 1
  %636 = getelementptr inbounds %class.Molecule, ptr %26, i64 0, i32 4
  %637 = getelementptr inbounds %class.Molecule, ptr %26, i64 0, i32 2
  %638 = getelementptr inbounds %class.Molecule, ptr %26, i64 0, i32 3
  %639 = ptrtoint ptr %420 to i64
  %640 = add nsw i32 %37, 10
  %641 = getelementptr inbounds %class.Pairlists, ptr %8, i64 0, i32 2
  %642 = ptrtoint ptr %466 to i64
  %643 = ptrtoint ptr %328 to i64
  %644 = ptrtoint ptr %374 to i64
  %645 = getelementptr inbounds %class.LJTable, ptr %25, i64 0, i32 1
  %646 = getelementptr inbounds %class.LJTable, ptr %25, i64 0, i32 2
  %647 = fneg double %28
  %648 = fadd double %29, -1.000000e+00
  %649 = fadd double %648, 1.000000e+00
  %650 = sext i32 %619 to i64
  %651 = sext i32 %620 to i64
  %652 = insertelement <2 x double> poison, double %23, i64 0
  %653 = shufflevector <2 x double> %652, <2 x double> poison, <2 x i32> zeroinitializer
  br label %654

654:                                              ; preds = %632, %2116
  %655 = phi i32 [ 0, %632 ], [ %2127, %2116 ]
  %656 = phi i32 [ 0, %632 ], [ %2128, %2116 ]
  %657 = phi ptr [ null, %632 ], [ %2125, %2116 ]
  %658 = phi ptr [ null, %632 ], [ %2124, %2116 ]
  %659 = phi ptr [ null, %632 ], [ %2123, %2116 ]
  %660 = phi i32 [ 0, %632 ], [ %2122, %2116 ]
  %661 = phi i32 [ 0, %632 ], [ %2121, %2116 ]
  %662 = phi i32 [ 0, %632 ], [ %2120, %2116 ]
  %663 = phi i32 [ 0, %632 ], [ %2119, %2116 ]
  %664 = phi i32 [ 0, %632 ], [ %2118, %2116 ]
  %665 = phi i32 [ %634, %632 ], [ %2117, %2116 ]
  %666 = sext i32 %656 to i64
  %667 = getelementptr inbounds %struct.CompAtom, ptr %38, i64 %666
  %668 = getelementptr inbounds %struct.CompAtomExt, ptr %42, i64 %666
  %669 = getelementptr inbounds %struct.CompAtom, ptr %38, i64 %666, i32 4
  %670 = load i8, ptr %669, align 1
  %671 = lshr i8 %670, 3
  %672 = and i8 %671, 15
  %673 = zext i8 %672 to i32
  %674 = icmp eq i8 %672, 0
  br i1 %674, label %681, label %675

675:                                              ; preds = %654
  %676 = icmp eq i32 %665, 0
  br i1 %676, label %681, label %677

677:                                              ; preds = %675
  %678 = add nsw i32 %665, -1
  %679 = add nsw i32 %656, -1
  %680 = add i32 %679, %673
  br label %2116

681:                                              ; preds = %675, %654
  %682 = phi i32 [ %665, %654 ], [ %629, %675 ]
  %683 = load <2 x double>, ptr %667, align 8, !tbaa !19
  %684 = fadd <2 x double> %15, %683
  %685 = getelementptr inbounds %class.Vector, ptr %667, i64 0, i32 2
  %686 = load double, ptr %685, align 8, !tbaa !49
  %687 = fadd double %17, %686
  %688 = add nsw i32 %656, %673
  %689 = select i1 %674, i32 %660, i32 %688
  br i1 %143, label %1856, label %690

690:                                              ; preds = %681
  %691 = load i32, ptr %668, align 4
  %692 = shl i32 %691, 2
  %693 = ashr exact i32 %692, 2
  %694 = load ptr, ptr %635, align 8, !tbaa !51
  %695 = sext i32 %693 to i64
  %696 = getelementptr inbounds %class.ExclusionCheck, ptr %694, i64 %695
  %697 = load i32, ptr %696, align 8, !tbaa !53
  %698 = getelementptr inbounds %class.ExclusionCheck, ptr %694, i64 %695, i32 1
  %699 = load i32, ptr %698, align 4, !tbaa !55
  %700 = getelementptr inbounds %class.ExclusionCheck, ptr %694, i64 %695, i32 2
  %701 = load ptr, ptr %700, align 8, !tbaa !56
  %702 = icmp eq ptr %701, null
  br i1 %702, label %707, label %703

703:                                              ; preds = %690
  %704 = sext i32 %697 to i64
  %705 = sub nsw i64 0, %704
  %706 = getelementptr inbounds i8, ptr %701, i64 %705
  br label %933

707:                                              ; preds = %690
  %708 = icmp eq ptr %657, null
  br i1 %708, label %796, label %709

709:                                              ; preds = %707
  %710 = load i32, ptr %658, align 4, !tbaa !5
  %711 = icmp slt i32 %710, 1
  br i1 %711, label %759, label %712

712:                                              ; preds = %709
  %713 = add nuw i32 %710, 1
  %714 = zext i32 %713 to i64
  %715 = add nsw i64 %714, -1
  %716 = add nsw i64 %714, -2
  %717 = and i64 %715, 3
  %718 = icmp ult i64 %716, 3
  br i1 %718, label %746, label %719

719:                                              ; preds = %712
  %720 = and i64 %715, -4
  br label %721

721:                                              ; preds = %721, %719
  %722 = phi i64 [ 1, %719 ], [ %743, %721 ]
  %723 = phi i64 [ 0, %719 ], [ %744, %721 ]
  %724 = getelementptr inbounds i32, ptr %658, i64 %722
  %725 = load i32, ptr %724, align 4, !tbaa !5
  %726 = sext i32 %725 to i64
  %727 = getelementptr inbounds i8, ptr %657, i64 %726
  store i8 0, ptr %727, align 1, !tbaa !57
  %728 = add nuw nsw i64 %722, 1
  %729 = getelementptr inbounds i32, ptr %658, i64 %728
  %730 = load i32, ptr %729, align 4, !tbaa !5
  %731 = sext i32 %730 to i64
  %732 = getelementptr inbounds i8, ptr %657, i64 %731
  store i8 0, ptr %732, align 1, !tbaa !57
  %733 = add nuw nsw i64 %722, 2
  %734 = getelementptr inbounds i32, ptr %658, i64 %733
  %735 = load i32, ptr %734, align 4, !tbaa !5
  %736 = sext i32 %735 to i64
  %737 = getelementptr inbounds i8, ptr %657, i64 %736
  store i8 0, ptr %737, align 1, !tbaa !57
  %738 = add nuw nsw i64 %722, 3
  %739 = getelementptr inbounds i32, ptr %658, i64 %738
  %740 = load i32, ptr %739, align 4, !tbaa !5
  %741 = sext i32 %740 to i64
  %742 = getelementptr inbounds i8, ptr %657, i64 %741
  store i8 0, ptr %742, align 1, !tbaa !57
  %743 = add nuw nsw i64 %722, 4
  %744 = add i64 %723, 4
  %745 = icmp eq i64 %744, %720
  br i1 %745, label %746, label %721

746:                                              ; preds = %721, %712
  %747 = phi i64 [ 1, %712 ], [ %743, %721 ]
  %748 = icmp eq i64 %717, 0
  br i1 %748, label %759, label %749

749:                                              ; preds = %746, %749
  %750 = phi i64 [ %756, %749 ], [ %747, %746 ]
  %751 = phi i64 [ %757, %749 ], [ 0, %746 ]
  %752 = getelementptr inbounds i32, ptr %658, i64 %750
  %753 = load i32, ptr %752, align 4, !tbaa !5
  %754 = sext i32 %753 to i64
  %755 = getelementptr inbounds i8, ptr %657, i64 %754
  store i8 0, ptr %755, align 1, !tbaa !57
  %756 = add nuw nsw i64 %750, 1
  %757 = add i64 %751, 1
  %758 = icmp eq i64 %757, %717
  br i1 %758, label %759, label %749, !llvm.loop !176

759:                                              ; preds = %746, %749, %709
  %760 = load i32, ptr %659, align 4, !tbaa !5
  %761 = icmp slt i32 %760, 1
  br i1 %761, label %816, label %762

762:                                              ; preds = %759
  %763 = add nuw i32 %760, 1
  %764 = zext i32 %763 to i64
  %765 = add nsw i64 %764, -1
  %766 = add nsw i64 %764, -2
  %767 = and i64 %765, 3
  %768 = icmp ult i64 %766, 3
  br i1 %768, label %803, label %769

769:                                              ; preds = %762
  %770 = and i64 %765, -4
  br label %771

771:                                              ; preds = %771, %769
  %772 = phi i64 [ 1, %769 ], [ %793, %771 ]
  %773 = phi i64 [ 0, %769 ], [ %794, %771 ]
  %774 = getelementptr inbounds i32, ptr %659, i64 %772
  %775 = load i32, ptr %774, align 4, !tbaa !5
  %776 = sext i32 %775 to i64
  %777 = getelementptr inbounds i8, ptr %657, i64 %776
  store i8 0, ptr %777, align 1, !tbaa !57
  %778 = add nuw nsw i64 %772, 1
  %779 = getelementptr inbounds i32, ptr %659, i64 %778
  %780 = load i32, ptr %779, align 4, !tbaa !5
  %781 = sext i32 %780 to i64
  %782 = getelementptr inbounds i8, ptr %657, i64 %781
  store i8 0, ptr %782, align 1, !tbaa !57
  %783 = add nuw nsw i64 %772, 2
  %784 = getelementptr inbounds i32, ptr %659, i64 %783
  %785 = load i32, ptr %784, align 4, !tbaa !5
  %786 = sext i32 %785 to i64
  %787 = getelementptr inbounds i8, ptr %657, i64 %786
  store i8 0, ptr %787, align 1, !tbaa !57
  %788 = add nuw nsw i64 %772, 3
  %789 = getelementptr inbounds i32, ptr %659, i64 %788
  %790 = load i32, ptr %789, align 4, !tbaa !5
  %791 = sext i32 %790 to i64
  %792 = getelementptr inbounds i8, ptr %657, i64 %791
  store i8 0, ptr %792, align 1, !tbaa !57
  %793 = add nuw nsw i64 %772, 4
  %794 = add i64 %773, 4
  %795 = icmp eq i64 %794, %770
  br i1 %795, label %803, label %771

796:                                              ; preds = %707
  %797 = load i32, ptr %636, align 8, !tbaa !60
  %798 = tail call i32 @llvm.smax.i32(i32 %797, i32 -1)
  %799 = sext i32 %798 to i64
  %800 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %799) #9
  %801 = load i32, ptr %636, align 8, !tbaa !60
  %802 = sext i32 %801 to i64
  tail call void @llvm.memset.p0.i64(ptr nonnull align 1 %800, i8 0, i64 %802, i1 false)
  br label %816

803:                                              ; preds = %771, %762
  %804 = phi i64 [ 1, %762 ], [ %793, %771 ]
  %805 = icmp eq i64 %767, 0
  br i1 %805, label %816, label %806

806:                                              ; preds = %803, %806
  %807 = phi i64 [ %813, %806 ], [ %804, %803 ]
  %808 = phi i64 [ %814, %806 ], [ 0, %803 ]
  %809 = getelementptr inbounds i32, ptr %659, i64 %807
  %810 = load i32, ptr %809, align 4, !tbaa !5
  %811 = sext i32 %810 to i64
  %812 = getelementptr inbounds i8, ptr %657, i64 %811
  store i8 0, ptr %812, align 1, !tbaa !57
  %813 = add nuw nsw i64 %807, 1
  %814 = add i64 %808, 1
  %815 = icmp eq i64 %814, %767
  br i1 %815, label %816, label %806, !llvm.loop !177

816:                                              ; preds = %803, %806, %759, %796
  %817 = phi ptr [ %800, %796 ], [ %657, %759 ], [ %657, %806 ], [ %657, %803 ]
  %818 = load i32, ptr %668, align 4
  %819 = shl i32 %818, 2
  %820 = ashr exact i32 %819, 2
  %821 = load ptr, ptr %637, align 8, !tbaa !62
  %822 = sext i32 %820 to i64
  %823 = getelementptr inbounds ptr, ptr %821, i64 %822
  %824 = load ptr, ptr %823, align 8, !tbaa !23
  %825 = load i32, ptr %824, align 4, !tbaa !5
  %826 = icmp slt i32 %825, 1
  br i1 %826, label %879, label %827

827:                                              ; preds = %816
  %828 = add nuw i32 %825, 1
  %829 = zext i32 %828 to i64
  %830 = add nsw i64 %829, -1
  %831 = add nsw i64 %829, -2
  %832 = and i64 %830, 3
  %833 = icmp ult i64 %831, 3
  br i1 %833, label %861, label %834

834:                                              ; preds = %827
  %835 = and i64 %830, -4
  br label %836

836:                                              ; preds = %836, %834
  %837 = phi i64 [ 1, %834 ], [ %858, %836 ]
  %838 = phi i64 [ 0, %834 ], [ %859, %836 ]
  %839 = getelementptr inbounds i32, ptr %824, i64 %837
  %840 = load i32, ptr %839, align 4, !tbaa !5
  %841 = sext i32 %840 to i64
  %842 = getelementptr inbounds i8, ptr %817, i64 %841
  store i8 1, ptr %842, align 1, !tbaa !57
  %843 = add nuw nsw i64 %837, 1
  %844 = getelementptr inbounds i32, ptr %824, i64 %843
  %845 = load i32, ptr %844, align 4, !tbaa !5
  %846 = sext i32 %845 to i64
  %847 = getelementptr inbounds i8, ptr %817, i64 %846
  store i8 1, ptr %847, align 1, !tbaa !57
  %848 = add nuw nsw i64 %837, 2
  %849 = getelementptr inbounds i32, ptr %824, i64 %848
  %850 = load i32, ptr %849, align 4, !tbaa !5
  %851 = sext i32 %850 to i64
  %852 = getelementptr inbounds i8, ptr %817, i64 %851
  store i8 1, ptr %852, align 1, !tbaa !57
  %853 = add nuw nsw i64 %837, 3
  %854 = getelementptr inbounds i32, ptr %824, i64 %853
  %855 = load i32, ptr %854, align 4, !tbaa !5
  %856 = sext i32 %855 to i64
  %857 = getelementptr inbounds i8, ptr %817, i64 %856
  store i8 1, ptr %857, align 1, !tbaa !57
  %858 = add nuw nsw i64 %837, 4
  %859 = add i64 %838, 4
  %860 = icmp eq i64 %859, %835
  br i1 %860, label %861, label %836

861:                                              ; preds = %836, %827
  %862 = phi i64 [ 1, %827 ], [ %858, %836 ]
  %863 = icmp eq i64 %832, 0
  br i1 %863, label %874, label %864

864:                                              ; preds = %861, %864
  %865 = phi i64 [ %871, %864 ], [ %862, %861 ]
  %866 = phi i64 [ %872, %864 ], [ 0, %861 ]
  %867 = getelementptr inbounds i32, ptr %824, i64 %865
  %868 = load i32, ptr %867, align 4, !tbaa !5
  %869 = sext i32 %868 to i64
  %870 = getelementptr inbounds i8, ptr %817, i64 %869
  store i8 1, ptr %870, align 1, !tbaa !57
  %871 = add nuw nsw i64 %865, 1
  %872 = add i64 %866, 1
  %873 = icmp eq i64 %872, %832
  br i1 %873, label %874, label %864, !llvm.loop !178

874:                                              ; preds = %864, %861
  %875 = load i32, ptr %668, align 4
  %876 = shl i32 %875, 2
  %877 = ashr exact i32 %876, 2
  %878 = sext i32 %877 to i64
  br label %879

879:                                              ; preds = %874, %816
  %880 = phi i64 [ %878, %874 ], [ %822, %816 ]
  %881 = load ptr, ptr %638, align 8, !tbaa !64
  %882 = getelementptr inbounds ptr, ptr %881, i64 %880
  %883 = load ptr, ptr %882, align 8, !tbaa !23
  %884 = load i32, ptr %883, align 4, !tbaa !5
  %885 = icmp slt i32 %884, 1
  br i1 %885, label %933, label %886

886:                                              ; preds = %879
  %887 = add nuw i32 %884, 1
  %888 = zext i32 %887 to i64
  %889 = add nsw i64 %888, -1
  %890 = add nsw i64 %888, -2
  %891 = and i64 %889, 3
  %892 = icmp ult i64 %890, 3
  br i1 %892, label %920, label %893

893:                                              ; preds = %886
  %894 = and i64 %889, -4
  br label %895

895:                                              ; preds = %895, %893
  %896 = phi i64 [ 1, %893 ], [ %917, %895 ]
  %897 = phi i64 [ 0, %893 ], [ %918, %895 ]
  %898 = getelementptr inbounds i32, ptr %883, i64 %896
  %899 = load i32, ptr %898, align 4, !tbaa !5
  %900 = sext i32 %899 to i64
  %901 = getelementptr inbounds i8, ptr %817, i64 %900
  store i8 2, ptr %901, align 1, !tbaa !57
  %902 = add nuw nsw i64 %896, 1
  %903 = getelementptr inbounds i32, ptr %883, i64 %902
  %904 = load i32, ptr %903, align 4, !tbaa !5
  %905 = sext i32 %904 to i64
  %906 = getelementptr inbounds i8, ptr %817, i64 %905
  store i8 2, ptr %906, align 1, !tbaa !57
  %907 = add nuw nsw i64 %896, 2
  %908 = getelementptr inbounds i32, ptr %883, i64 %907
  %909 = load i32, ptr %908, align 4, !tbaa !5
  %910 = sext i32 %909 to i64
  %911 = getelementptr inbounds i8, ptr %817, i64 %910
  store i8 2, ptr %911, align 1, !tbaa !57
  %912 = add nuw nsw i64 %896, 3
  %913 = getelementptr inbounds i32, ptr %883, i64 %912
  %914 = load i32, ptr %913, align 4, !tbaa !5
  %915 = sext i32 %914 to i64
  %916 = getelementptr inbounds i8, ptr %817, i64 %915
  store i8 2, ptr %916, align 1, !tbaa !57
  %917 = add nuw nsw i64 %896, 4
  %918 = add i64 %897, 4
  %919 = icmp eq i64 %918, %894
  br i1 %919, label %920, label %895

920:                                              ; preds = %895, %886
  %921 = phi i64 [ 1, %886 ], [ %917, %895 ]
  %922 = icmp eq i64 %891, 0
  br i1 %922, label %933, label %923

923:                                              ; preds = %920, %923
  %924 = phi i64 [ %930, %923 ], [ %921, %920 ]
  %925 = phi i64 [ %931, %923 ], [ 0, %920 ]
  %926 = getelementptr inbounds i32, ptr %883, i64 %924
  %927 = load i32, ptr %926, align 4, !tbaa !5
  %928 = sext i32 %927 to i64
  %929 = getelementptr inbounds i8, ptr %817, i64 %928
  store i8 2, ptr %929, align 1, !tbaa !57
  %930 = add nuw nsw i64 %924, 1
  %931 = add i64 %925, 1
  %932 = icmp eq i64 %931, %891
  br i1 %932, label %933, label %923, !llvm.loop !179

933:                                              ; preds = %920, %923, %879, %703
  %934 = phi ptr [ %706, %703 ], [ %817, %879 ], [ %817, %923 ], [ %817, %920 ]
  %935 = phi ptr [ %659, %703 ], [ %883, %879 ], [ %883, %923 ], [ %883, %920 ]
  %936 = phi ptr [ %658, %703 ], [ %824, %879 ], [ %824, %923 ], [ %824, %920 ]
  %937 = phi ptr [ %657, %703 ], [ %817, %879 ], [ %817, %923 ], [ %817, %920 ]
  %938 = load i8, ptr %669, align 1
  %939 = and i8 %938, 7
  %940 = icmp eq i8 %939, 0
  br i1 %940, label %1234, label %941

941:                                              ; preds = %933
  %942 = load i32, ptr @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4, !tbaa !5
  %943 = icmp eq i32 %942, 0
  br i1 %943, label %947, label %944

944:                                              ; preds = %941
  %945 = load i32, ptr %668, align 4
  %946 = icmp slt i32 %945, 0
  br label %947

947:                                              ; preds = %944, %941
  %948 = phi i1 [ false, %941 ], [ %946, %944 ]
  %949 = and i8 %938, 120
  %950 = icmp eq i8 %949, 0
  br i1 %950, label %982, label %951

951:                                              ; preds = %947
  %952 = icmp slt i32 %661, %619
  br i1 %952, label %953, label %966

953:                                              ; preds = %951
  %954 = sext i32 %661 to i64
  br label %955

955:                                              ; preds = %953, %961
  %956 = phi i64 [ %954, %953 ], [ %962, %961 ]
  %957 = getelementptr inbounds i16, ptr %190, i64 %956
  %958 = load i16, ptr %957, align 2, !tbaa !44
  %959 = zext i16 %958 to i32
  %960 = icmp sgt i32 %689, %959
  br i1 %960, label %961, label %964

961:                                              ; preds = %955
  %962 = add nsw i64 %956, 1
  %963 = icmp eq i64 %962, %650
  br i1 %963, label %966, label %955

964:                                              ; preds = %955
  %965 = trunc i64 %956 to i32
  br label %966

966:                                              ; preds = %961, %964, %951
  %967 = phi i32 [ %661, %951 ], [ %965, %964 ], [ %619, %961 ]
  %968 = icmp slt i32 %662, %620
  br i1 %968, label %969, label %982

969:                                              ; preds = %966
  %970 = sext i32 %662 to i64
  br label %971

971:                                              ; preds = %969, %977
  %972 = phi i64 [ %970, %969 ], [ %978, %977 ]
  %973 = getelementptr inbounds i16, ptr %236, i64 %972
  %974 = load i16, ptr %973, align 2, !tbaa !44
  %975 = zext i16 %974 to i32
  %976 = icmp sgt i32 %689, %975
  br i1 %976, label %977, label %980

977:                                              ; preds = %971
  %978 = add nsw i64 %972, 1
  %979 = icmp eq i64 %978, %651
  br i1 %979, label %982, label %971

980:                                              ; preds = %971
  %981 = trunc i64 %972 to i32
  br label %982

982:                                              ; preds = %977, %980, %966, %947
  %983 = phi i32 [ %662, %947 ], [ %662, %966 ], [ %981, %980 ], [ %620, %977 ]
  %984 = phi i32 [ %661, %947 ], [ %967, %966 ], [ %967, %980 ], [ %967, %977 ]
  %985 = add nsw i32 %656, 1
  %986 = icmp slt i32 %985, %689
  br i1 %986, label %987, label %1052

987:                                              ; preds = %982
  %988 = xor i32 %656, -1
  %989 = add i32 %689, %988
  %990 = zext i32 %989 to i64
  %991 = icmp ult i32 %989, 8
  br i1 %991, label %1041, label %992

992:                                              ; preds = %987
  %993 = icmp ult i32 %989, 64
  br i1 %993, label %1022, label %994

994:                                              ; preds = %992
  %995 = and i64 %990, 4294967232
  %996 = trunc i32 %985 to i16
  %997 = insertelement <16 x i16> poison, i16 %996, i64 0
  %998 = shufflevector <16 x i16> %997, <16 x i16> poison, <16 x i32> zeroinitializer
  %999 = add <16 x i16> %998, <i16 0, i16 1, i16 2, i16 3, i16 4, i16 5, i16 6, i16 7, i16 8, i16 9, i16 10, i16 11, i16 12, i16 13, i16 14, i16 15>
  %1000 = trunc i64 %995 to i32
  %1001 = add i32 %985, %1000
  br label %1002

1002:                                             ; preds = %1002, %994
  %1003 = phi i64 [ 0, %994 ], [ %1012, %1002 ]
  %1004 = phi <16 x i16> [ %999, %994 ], [ %1013, %1002 ]
  %1005 = add <16 x i16> %1004, <i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16>
  %1006 = add <16 x i16> %1004, <i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32>
  %1007 = add <16 x i16> %1004, <i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48>
  %1008 = getelementptr inbounds i16, ptr %420, i64 %1003
  store <16 x i16> %1004, ptr %1008, align 2, !tbaa !44
  %1009 = getelementptr inbounds i16, ptr %1008, i64 16
  store <16 x i16> %1005, ptr %1009, align 2, !tbaa !44
  %1010 = getelementptr inbounds i16, ptr %1008, i64 32
  store <16 x i16> %1006, ptr %1010, align 2, !tbaa !44
  %1011 = getelementptr inbounds i16, ptr %1008, i64 48
  store <16 x i16> %1007, ptr %1011, align 2, !tbaa !44
  %1012 = add nuw i64 %1003, 64
  %1013 = add <16 x i16> %1004, <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>
  %1014 = icmp eq i64 %1012, %995
  br i1 %1014, label %1015, label %1002, !llvm.loop !180

1015:                                             ; preds = %1002
  %1016 = icmp eq i64 %995, %990
  br i1 %1016, label %1052, label %1017

1017:                                             ; preds = %1015
  %1018 = trunc i64 %995 to i32
  %1019 = add i32 %985, %1018
  %1020 = and i64 %990, 56
  %1021 = icmp eq i64 %1020, 0
  br i1 %1021, label %1041, label %1022

1022:                                             ; preds = %992, %1017
  %1023 = phi i32 [ %1001, %1017 ], [ %985, %992 ]
  %1024 = phi i64 [ %995, %1017 ], [ 0, %992 ]
  %1025 = and i64 %990, 4294967288
  %1026 = trunc i64 %1025 to i32
  %1027 = add i32 %985, %1026
  %1028 = trunc i32 %1023 to i16
  %1029 = insertelement <8 x i16> poison, i16 %1028, i64 0
  %1030 = shufflevector <8 x i16> %1029, <8 x i16> poison, <8 x i32> zeroinitializer
  %1031 = add <8 x i16> %1030, <i16 0, i16 1, i16 2, i16 3, i16 4, i16 5, i16 6, i16 7>
  br label %1032

1032:                                             ; preds = %1032, %1022
  %1033 = phi i64 [ %1024, %1022 ], [ %1036, %1032 ]
  %1034 = phi <8 x i16> [ %1031, %1022 ], [ %1037, %1032 ]
  %1035 = getelementptr inbounds i16, ptr %420, i64 %1033
  store <8 x i16> %1034, ptr %1035, align 2, !tbaa !44
  %1036 = add nuw i64 %1033, 8
  %1037 = add <8 x i16> %1034, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %1038 = icmp eq i64 %1036, %1025
  br i1 %1038, label %1039, label %1032, !llvm.loop !181

1039:                                             ; preds = %1032
  %1040 = icmp eq i64 %1025, %990
  br i1 %1040, label %1052, label %1041

1041:                                             ; preds = %987, %1017, %1039
  %1042 = phi i64 [ 0, %987 ], [ %995, %1017 ], [ %1025, %1039 ]
  %1043 = phi i32 [ %985, %987 ], [ %1019, %1017 ], [ %1027, %1039 ]
  br label %1044

1044:                                             ; preds = %1041, %1044
  %1045 = phi i64 [ %1048, %1044 ], [ %1042, %1041 ]
  %1046 = phi i32 [ %1050, %1044 ], [ %1043, %1041 ]
  %1047 = trunc i32 %1046 to i16
  %1048 = add nuw nsw i64 %1045, 1
  %1049 = getelementptr inbounds i16, ptr %420, i64 %1045
  store i16 %1047, ptr %1049, align 2, !tbaa !44
  %1050 = add nsw i32 %1046, 1
  %1051 = icmp eq i64 %1048, %990
  br i1 %1051, label %1052, label %1044, !llvm.loop !182

1052:                                             ; preds = %1044, %1015, %1039, %982
  %1053 = phi i32 [ 0, %982 ], [ %989, %1039 ], [ %989, %1015 ], [ %989, %1044 ]
  %1054 = zext i32 %1053 to i64
  %1055 = getelementptr inbounds i16, ptr %420, i64 %1054
  %1056 = select i1 %948, ptr %236, ptr %190
  %1057 = select i1 %948, i32 %983, i32 %984
  %1058 = select i1 %948, i32 %620, i32 %619
  %1059 = icmp slt i32 %1057, %1058
  br i1 %1059, label %1060, label %1219

1060:                                             ; preds = %1052
  %1061 = sub nsw i32 %1058, %1057
  %1062 = icmp sgt i32 %1061, 6
  br i1 %1062, label %1063, label %1156

1063:                                             ; preds = %1060
  %1064 = add nsw i32 %1058, -2
  %1065 = add nsw i32 %1057, 2
  %1066 = icmp slt i32 %1065, %1064
  br i1 %1066, label %1067, label %1156

1067:                                             ; preds = %1063
  %1068 = add nsw i32 %1057, 1
  %1069 = sext i32 %1068 to i64
  %1070 = getelementptr inbounds i16, ptr %1056, i64 %1069
  %1071 = load i16, ptr %1070, align 2, !tbaa !44
  %1072 = zext i16 %1071 to i64
  %1073 = getelementptr inbounds %struct.CompAtom, ptr %40, i64 %1072
  %1074 = getelementptr inbounds %class.Vector, ptr %1073, i64 0, i32 2
  %1075 = load double, ptr %1074, align 8, !tbaa !49
  %1076 = sext i32 %1057 to i64
  %1077 = getelementptr inbounds i16, ptr %1056, i64 %1076
  %1078 = load i16, ptr %1077, align 2, !tbaa !44
  %1079 = zext i16 %1078 to i64
  %1080 = getelementptr inbounds %struct.CompAtom, ptr %40, i64 %1079
  %1081 = getelementptr inbounds %class.Vector, ptr %1080, i64 0, i32 2
  %1082 = load double, ptr %1081, align 8, !tbaa !49
  %1083 = getelementptr inbounds %class.Vector, ptr %1073, i64 0, i32 1
  %1084 = load double, ptr %1083, align 8, !tbaa !66
  %1085 = getelementptr inbounds %class.Vector, ptr %1080, i64 0, i32 1
  %1086 = load double, ptr %1085, align 8, !tbaa !66
  %1087 = load double, ptr %1073, align 8, !tbaa !67
  %1088 = load double, ptr %1080, align 8, !tbaa !67
  %1089 = sext i32 %1065 to i64
  %1090 = sext i32 %1064 to i64
  %1091 = insertelement <2 x double> poison, double %1075, i64 0
  %1092 = insertelement <2 x double> %1091, double %1082, i64 1
  %1093 = insertelement <2 x double> poison, double %1084, i64 0
  %1094 = insertelement <2 x double> %1093, double %1086, i64 1
  %1095 = insertelement <2 x double> poison, double %1087, i64 0
  %1096 = insertelement <2 x double> %1095, double %1088, i64 1
  %1097 = insertelement <2 x double> poison, double %687, i64 0
  %1098 = shufflevector <2 x double> %1097, <2 x double> poison, <2 x i32> zeroinitializer
  %1099 = shufflevector <2 x double> %684, <2 x double> poison, <2 x i32> <i32 1, i32 1>
  %1100 = shufflevector <2 x double> %684, <2 x double> poison, <2 x i32> zeroinitializer
  br label %1101

1101:                                             ; preds = %1067, %1101
  %1102 = phi i64 [ %1089, %1067 ], [ %1147, %1101 ]
  %1103 = phi i32 [ %1057, %1067 ], [ %1149, %1101 ]
  %1104 = phi i32 [ 0, %1067 ], [ %1146, %1101 ]
  %1105 = phi i16 [ %1078, %1067 ], [ %1112, %1101 ]
  %1106 = phi i16 [ %1071, %1067 ], [ %1116, %1101 ]
  %1107 = phi <2 x double> [ %1092, %1067 ], [ %1151, %1101 ]
  %1108 = phi <2 x double> [ %1094, %1067 ], [ %1153, %1101 ]
  %1109 = phi <2 x double> [ %1096, %1067 ], [ %1155, %1101 ]
  %1110 = fsub <2 x double> %1098, %1107
  %1111 = getelementptr inbounds i16, ptr %1056, i64 %1102
  %1112 = load i16, ptr %1111, align 2, !tbaa !44
  %1113 = add nsw i32 %1103, 3
  %1114 = sext i32 %1113 to i64
  %1115 = getelementptr inbounds i16, ptr %1056, i64 %1114
  %1116 = load i16, ptr %1115, align 2, !tbaa !44
  %1117 = zext i16 %1112 to i64
  %1118 = getelementptr inbounds %struct.CompAtom, ptr %40, i64 %1117
  %1119 = load double, ptr %1118, align 8, !tbaa !67
  %1120 = zext i16 %1116 to i64
  %1121 = getelementptr inbounds %struct.CompAtom, ptr %40, i64 %1120
  %1122 = load double, ptr %1121, align 8, !tbaa !67
  %1123 = getelementptr inbounds %class.Vector, ptr %1118, i64 0, i32 1
  %1124 = load double, ptr %1123, align 8, !tbaa !66
  %1125 = getelementptr inbounds %class.Vector, ptr %1121, i64 0, i32 1
  %1126 = load double, ptr %1125, align 8, !tbaa !66
  %1127 = getelementptr inbounds %class.Vector, ptr %1118, i64 0, i32 2
  %1128 = load double, ptr %1127, align 8, !tbaa !49
  %1129 = getelementptr inbounds %class.Vector, ptr %1121, i64 0, i32 2
  %1130 = load double, ptr %1129, align 8, !tbaa !49
  %1131 = fsub <2 x double> %1100, %1109
  %1132 = fmul <2 x double> %1131, %1131
  %1133 = fsub <2 x double> %1099, %1108
  %1134 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %1133, <2 x double> %1133, <2 x double> %1132)
  %1135 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %1110, <2 x double> %1110, <2 x double> %1134)
  %1136 = fcmp olt <2 x double> %1135, %653
  %1137 = zext i32 %1104 to i64
  %1138 = getelementptr inbounds i16, ptr %282, i64 %1137
  store i16 %1105, ptr %1138, align 2, !tbaa !44
  %1139 = extractelement <2 x i1> %1136, i64 1
  %1140 = zext i1 %1139 to i32
  %1141 = add nuw nsw i32 %1104, %1140
  %1142 = zext i32 %1141 to i64
  %1143 = getelementptr inbounds i16, ptr %282, i64 %1142
  store i16 %1106, ptr %1143, align 2, !tbaa !44
  %1144 = extractelement <2 x i1> %1136, i64 0
  %1145 = zext i1 %1144 to i32
  %1146 = add i32 %1141, %1145
  %1147 = add nsw i64 %1102, 2
  %1148 = icmp slt i64 %1147, %1090
  %1149 = trunc i64 %1102 to i32
  %1150 = insertelement <2 x double> poison, double %1130, i64 0
  %1151 = insertelement <2 x double> %1150, double %1128, i64 1
  %1152 = insertelement <2 x double> poison, double %1126, i64 0
  %1153 = insertelement <2 x double> %1152, double %1124, i64 1
  %1154 = insertelement <2 x double> poison, double %1122, i64 0
  %1155 = insertelement <2 x double> %1154, double %1119, i64 1
  br i1 %1148, label %1101, label %1156

1156:                                             ; preds = %1101, %1063, %1060
  %1157 = phi i32 [ 0, %1060 ], [ 0, %1063 ], [ %1146, %1101 ]
  %1158 = phi i32 [ %1057, %1060 ], [ %1057, %1063 ], [ %1149, %1101 ]
  %1159 = icmp slt i32 %1158, %1058
  br i1 %1159, label %1160, label %1165

1160:                                             ; preds = %1156
  %1161 = sext i32 %1158 to i64
  %1162 = sext i32 %1058 to i64
  %1163 = extractelement <2 x double> %684, i64 0
  %1164 = extractelement <2 x double> %684, i64 1
  br label %1170

1165:                                             ; preds = %1193, %1156
  %1166 = phi i32 [ %1157, %1156 ], [ %1194, %1193 ]
  %1167 = icmp sgt i32 %1166, 0
  br i1 %1167, label %1168, label %1219

1168:                                             ; preds = %1165
  %1169 = zext i32 %1166 to i64
  br label %1197

1170:                                             ; preds = %1160, %1193
  %1171 = phi i64 [ %1161, %1160 ], [ %1195, %1193 ]
  %1172 = phi i32 [ %1157, %1160 ], [ %1194, %1193 ]
  %1173 = getelementptr inbounds i16, ptr %1056, i64 %1171
  %1174 = load i16, ptr %1173, align 2, !tbaa !44
  %1175 = zext i16 %1174 to i64
  %1176 = getelementptr inbounds %struct.CompAtom, ptr %40, i64 %1175
  %1177 = load double, ptr %1176, align 8, !tbaa !67
  %1178 = getelementptr inbounds %class.Vector, ptr %1176, i64 0, i32 1
  %1179 = load double, ptr %1178, align 8, !tbaa !66
  %1180 = getelementptr inbounds %class.Vector, ptr %1176, i64 0, i32 2
  %1181 = load double, ptr %1180, align 8, !tbaa !49
  %1182 = fsub double %1163, %1177
  %1183 = fmul double %1182, %1182
  %1184 = fsub double %1164, %1179
  %1185 = tail call double @llvm.fmuladd.f64(double %1184, double %1184, double %1183)
  %1186 = fsub double %687, %1181
  %1187 = tail call double @llvm.fmuladd.f64(double %1186, double %1186, double %1185)
  %1188 = fcmp ugt double %1187, %23
  br i1 %1188, label %1193, label %1189

1189:                                             ; preds = %1170
  %1190 = add nsw i32 %1172, 1
  %1191 = sext i32 %1172 to i64
  %1192 = getelementptr inbounds i16, ptr %282, i64 %1191
  store i16 %1174, ptr %1192, align 2, !tbaa !44
  br label %1193

1193:                                             ; preds = %1189, %1170
  %1194 = phi i32 [ %1190, %1189 ], [ %1172, %1170 ]
  %1195 = add nsw i64 %1171, 1
  %1196 = icmp eq i64 %1195, %1162
  br i1 %1196, label %1165, label %1170

1197:                                             ; preds = %1168, %1214
  %1198 = phi i64 [ 0, %1168 ], [ %1217, %1214 ]
  %1199 = phi ptr [ %1055, %1168 ], [ %1216, %1214 ]
  %1200 = getelementptr inbounds i16, ptr %282, i64 %1198
  %1201 = load i16, ptr %1200, align 2, !tbaa !44
  %1202 = zext i16 %1201 to i64
  %1203 = getelementptr inbounds %struct.CompAtom, ptr %40, i64 %1202, i32 4
  %1204 = load i8, ptr %1203, align 1
  %1205 = and i8 %1204, 7
  store i16 %1201, ptr %1199, align 2, !tbaa !44
  %1206 = getelementptr inbounds i16, ptr %1199, i64 1
  %1207 = insertelement <2 x i16> poison, i16 %1201, i64 0
  %1208 = shufflevector <2 x i16> %1207, <2 x i16> poison, <2 x i32> zeroinitializer
  %1209 = add <2 x i16> %1208, <i16 1, i16 2>
  store <2 x i16> %1209, ptr %1206, align 2, !tbaa !44
  %1210 = icmp ult i8 %1205, 4
  br i1 %1210, label %1214, label %1211

1211:                                             ; preds = %1197
  %1212 = add <2 x i16> %1208, <i16 3, i16 4>
  %1213 = getelementptr inbounds i16, ptr %1199, i64 3
  store <2 x i16> %1212, ptr %1213, align 2, !tbaa !44
  br label %1214

1214:                                             ; preds = %1211, %1197
  %1215 = zext i8 %1205 to i64
  %1216 = getelementptr inbounds i16, ptr %1199, i64 %1215
  %1217 = add nuw nsw i64 %1198, 1
  %1218 = icmp eq i64 %1217, %1169
  br i1 %1218, label %1219, label %1197

1219:                                             ; preds = %1214, %1165, %1052
  %1220 = phi ptr [ %1055, %1052 ], [ %1055, %1165 ], [ %1216, %1214 ]
  %1221 = ptrtoint ptr %1220 to i64
  %1222 = sub i64 %1221, %639
  %1223 = lshr exact i64 %1222, 1
  %1224 = trunc i64 %1223 to i32
  %1225 = icmp eq i32 %1224, 0
  br i1 %1225, label %1237, label %1226

1226:                                             ; preds = %1219
  %1227 = shl i64 %1222, 31
  %1228 = add i64 %1227, -4294967296
  %1229 = ashr i64 %1228, 32
  %1230 = getelementptr inbounds i16, ptr %420, i64 %1229
  %1231 = load i16, ptr %1230, align 2, !tbaa !44
  %1232 = ashr i64 %1227, 32
  %1233 = getelementptr inbounds i16, ptr %420, i64 %1232
  store i16 %1231, ptr %1233, align 2, !tbaa !44
  br label %1237

1234:                                             ; preds = %933
  %1235 = add nsw i32 %664, 1
  %1236 = load i32, ptr @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4, !tbaa !5
  br label %1237

1237:                                             ; preds = %1219, %1226, %1234
  %1238 = phi i32 [ %1236, %1234 ], [ %942, %1226 ], [ %942, %1219 ]
  %1239 = phi i32 [ %1235, %1234 ], [ 0, %1226 ], [ 0, %1219 ]
  %1240 = phi i32 [ %663, %1234 ], [ %1224, %1226 ], [ 0, %1219 ]
  %1241 = phi i32 [ %662, %1234 ], [ %983, %1226 ], [ %983, %1219 ]
  %1242 = phi i32 [ %661, %1234 ], [ %984, %1226 ], [ %984, %1219 ]
  %1243 = icmp eq i32 %1238, 0
  br i1 %1243, label %1248, label %1244

1244:                                             ; preds = %1237
  %1245 = load i32, ptr %668, align 4
  %1246 = and i32 %1245, 1073741824
  %1247 = icmp ne i32 %1246, 0
  br label %1248

1248:                                             ; preds = %1244, %1237
  %1249 = phi i1 [ false, %1237 ], [ %1247, %1244 ]
  %1250 = load i32, ptr %13, align 8, !tbaa !17
  %1251 = add nsw i32 %640, %1250
  %1252 = load i32, ptr %641, align 4, !tbaa !68
  %1253 = icmp sgt i32 %1252, %1251
  br i1 %1253, label %1269, label %1254

1254:                                             ; preds = %1248, %1254
  %1255 = phi i32 [ %1257, %1254 ], [ %1252, %1248 ]
  %1256 = ashr i32 %1255, 1
  %1257 = add nsw i32 %1256, %1255
  %1258 = icmp sgt i32 %1257, %1251
  br i1 %1258, label %1259, label %1254

1259:                                             ; preds = %1254
  %1260 = sext i32 %1257 to i64
  %1261 = icmp slt i32 %1257, 0
  %1262 = shl nsw i64 %1260, 1
  %1263 = select i1 %1261, i64 -1, i64 %1262
  %1264 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %1263) #9
  %1265 = load ptr, ptr %8, align 8, !tbaa !46
  %1266 = sext i32 %1250 to i64
  %1267 = shl nsw i64 %1266, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 2 %1264, ptr align 2 %1265, i64 %1267, i1 false)
  %1268 = icmp eq ptr %1265, null
  br i1 %1268, label %1273, label %1271

1269:                                             ; preds = %1248
  %1270 = load ptr, ptr %8, align 8, !tbaa !46
  br label %1275

1271:                                             ; preds = %1259
  tail call void @_ZdaPv(ptr noundef nonnull %1265) #10
  %1272 = load i32, ptr %13, align 8, !tbaa !17
  br label %1273

1273:                                             ; preds = %1271, %1259
  %1274 = phi i32 [ %1272, %1271 ], [ %1250, %1259 ]
  store ptr %1264, ptr %8, align 8, !tbaa !46
  store i32 %1257, ptr %641, align 4, !tbaa !68
  br label %1275

1275:                                             ; preds = %1269, %1273
  %1276 = phi i32 [ %1250, %1269 ], [ %1274, %1273 ]
  %1277 = phi ptr [ %1270, %1269 ], [ %1264, %1273 ]
  %1278 = ptrtoint ptr %1277 to i64
  %1279 = add nsw i32 %1276, 1
  %1280 = sext i32 %1279 to i64
  %1281 = getelementptr inbounds i16, ptr %1277, i64 %1280
  %1282 = icmp slt i32 %1239, %1240
  br i1 %1249, label %1283, label %1331

1283:                                             ; preds = %1275
  br i1 %1282, label %1284, label %1502

1284:                                             ; preds = %1283
  %1285 = sext i32 %1239 to i64
  %1286 = sext i32 %1240 to i64
  %1287 = extractelement <2 x double> %684, i64 0
  %1288 = extractelement <2 x double> %684, i64 1
  br label %1289

1289:                                             ; preds = %1284, %1326
  %1290 = phi i64 [ %1285, %1284 ], [ %1329, %1326 ]
  %1291 = phi ptr [ %466, %1284 ], [ %1328, %1326 ]
  %1292 = phi ptr [ %1281, %1284 ], [ %1327, %1326 ]
  %1293 = getelementptr inbounds i16, ptr %420, i64 %1290
  %1294 = load i16, ptr %1293, align 2, !tbaa !44
  %1295 = zext i16 %1294 to i64
  %1296 = getelementptr inbounds %struct.CompAtomExt, ptr %44, i64 %1295
  %1297 = load i32, ptr %1296, align 4
  %1298 = and i32 %1297, 1073741824
  %1299 = icmp eq i32 %1298, 0
  br i1 %1299, label %1300, label %1326

1300:                                             ; preds = %1289
  %1301 = getelementptr inbounds %struct.CompAtom, ptr %40, i64 %1295
  %1302 = getelementptr inbounds %class.Vector, ptr %1301, i64 0, i32 2
  %1303 = load double, ptr %1302, align 8, !tbaa !49
  %1304 = fsub double %687, %1303
  %1305 = getelementptr inbounds %class.Vector, ptr %1301, i64 0, i32 1
  %1306 = load double, ptr %1305, align 8, !tbaa !66
  %1307 = fsub double %1288, %1306
  %1308 = load double, ptr %1301, align 8, !tbaa !67
  %1309 = fsub double %1287, %1308
  %1310 = fmul double %1309, %1309
  %1311 = tail call double @llvm.fmuladd.f64(double %1307, double %1307, double %1310)
  %1312 = tail call double @llvm.fmuladd.f64(double %1304, double %1304, double %1311)
  %1313 = fcmp ugt double %1312, %20
  br i1 %1313, label %1326, label %1314

1314:                                             ; preds = %1300
  %1315 = shl i32 %1297, 2
  %1316 = ashr exact i32 %1315, 2
  %1317 = icmp slt i32 %1316, %697
  %1318 = icmp sgt i32 %1316, %699
  %1319 = select i1 %1317, i1 true, i1 %1318
  %1320 = select i1 %1319, ptr %1292, ptr %1291
  %1321 = zext i1 %1319 to i64
  %1322 = getelementptr inbounds i16, ptr %1292, i64 %1321
  %1323 = xor i1 %1319, true
  %1324 = zext i1 %1323 to i64
  %1325 = getelementptr inbounds i16, ptr %1291, i64 %1324
  store i16 %1294, ptr %1320, align 2, !tbaa !44
  br label %1326

1326:                                             ; preds = %1314, %1300, %1289
  %1327 = phi ptr [ %1292, %1289 ], [ %1292, %1300 ], [ %1322, %1314 ]
  %1328 = phi ptr [ %1291, %1289 ], [ %1291, %1300 ], [ %1325, %1314 ]
  %1329 = add nsw i64 %1290, 1
  %1330 = icmp eq i64 %1329, %1286
  br i1 %1330, label %1502, label %1289

1331:                                             ; preds = %1275
  br i1 %1282, label %1332, label %1502

1332:                                             ; preds = %1331
  %1333 = sub nsw i32 %1240, %1239
  %1334 = icmp sgt i32 %1333, 6
  br i1 %1334, label %1335, label %1453

1335:                                             ; preds = %1332
  %1336 = add nsw i32 %1240, -2
  %1337 = add nsw i32 %1239, 2
  %1338 = icmp slt i32 %1337, %1336
  br i1 %1338, label %1339, label %1453

1339:                                             ; preds = %1335
  %1340 = sext i32 %1239 to i64
  %1341 = getelementptr inbounds i16, ptr %420, i64 %1340
  %1342 = load i16, ptr %1341, align 2, !tbaa !44
  %1343 = zext i16 %1342 to i64
  %1344 = getelementptr inbounds %struct.CompAtomExt, ptr %44, i64 %1343
  %1345 = load i32, ptr %1344, align 4
  %1346 = add nsw i32 %1239, 1
  %1347 = sext i32 %1346 to i64
  %1348 = getelementptr inbounds i16, ptr %420, i64 %1347
  %1349 = load i16, ptr %1348, align 2, !tbaa !44
  %1350 = zext i16 %1349 to i64
  %1351 = getelementptr inbounds %struct.CompAtom, ptr %40, i64 %1350
  %1352 = getelementptr inbounds %class.Vector, ptr %1351, i64 0, i32 2
  %1353 = load double, ptr %1352, align 8, !tbaa !49
  %1354 = getelementptr inbounds %struct.CompAtom, ptr %40, i64 %1343
  %1355 = getelementptr inbounds %class.Vector, ptr %1354, i64 0, i32 2
  %1356 = load double, ptr %1355, align 8, !tbaa !49
  %1357 = getelementptr inbounds %class.Vector, ptr %1351, i64 0, i32 1
  %1358 = load double, ptr %1357, align 8, !tbaa !66
  %1359 = getelementptr inbounds %class.Vector, ptr %1354, i64 0, i32 1
  %1360 = load double, ptr %1359, align 8, !tbaa !66
  %1361 = load double, ptr %1351, align 8, !tbaa !67
  %1362 = load double, ptr %1354, align 8, !tbaa !67
  %1363 = sext i32 %1337 to i64
  %1364 = sext i32 %1336 to i64
  %1365 = extractelement <2 x double> %684, i64 0
  %1366 = extractelement <2 x double> %684, i64 1
  br label %1367

1367:                                             ; preds = %1339, %1447
  %1368 = phi i64 [ %1363, %1339 ], [ %1450, %1447 ]
  %1369 = phi i64 [ %1350, %1339 ], [ %1407, %1447 ]
  %1370 = phi i32 [ %1345, %1339 ], [ %1435, %1447 ]
  %1371 = phi ptr [ %466, %1339 ], [ %1449, %1447 ]
  %1372 = phi ptr [ %1281, %1339 ], [ %1448, %1447 ]
  %1373 = phi i32 [ %1239, %1339 ], [ %1452, %1447 ]
  %1374 = phi i16 [ %1342, %1339 ], [ %1399, %1447 ]
  %1375 = phi i16 [ %1349, %1339 ], [ %1403, %1447 ]
  %1376 = phi double [ %1362, %1339 ], [ %1406, %1447 ]
  %1377 = phi double [ %1361, %1339 ], [ %1409, %1447 ]
  %1378 = phi double [ %1360, %1339 ], [ %1411, %1447 ]
  %1379 = phi double [ %1358, %1339 ], [ %1413, %1447 ]
  %1380 = phi double [ %1356, %1339 ], [ %1415, %1447 ]
  %1381 = phi double [ %1353, %1339 ], [ %1417, %1447 ]
  %1382 = getelementptr inbounds %struct.CompAtomExt, ptr %44, i64 %1369
  %1383 = load i32, ptr %1382, align 4
  %1384 = shl i32 %1383, 2
  %1385 = ashr exact i32 %1384, 2
  %1386 = fsub double %1365, %1376
  %1387 = fsub double %1365, %1377
  %1388 = fmul double %1386, %1386
  %1389 = fmul double %1387, %1387
  %1390 = fsub double %1366, %1378
  %1391 = fsub double %1366, %1379
  %1392 = tail call double @llvm.fmuladd.f64(double %1390, double %1390, double %1388)
  %1393 = tail call double @llvm.fmuladd.f64(double %1391, double %1391, double %1389)
  %1394 = fsub double %687, %1380
  %1395 = fsub double %687, %1381
  %1396 = tail call double @llvm.fmuladd.f64(double %1394, double %1394, double %1392)
  %1397 = tail call double @llvm.fmuladd.f64(double %1395, double %1395, double %1393)
  %1398 = getelementptr inbounds i16, ptr %420, i64 %1368
  %1399 = load i16, ptr %1398, align 2, !tbaa !44
  %1400 = add nsw i32 %1373, 3
  %1401 = sext i32 %1400 to i64
  %1402 = getelementptr inbounds i16, ptr %420, i64 %1401
  %1403 = load i16, ptr %1402, align 2, !tbaa !44
  %1404 = zext i16 %1399 to i64
  %1405 = getelementptr inbounds %struct.CompAtom, ptr %40, i64 %1404
  %1406 = load double, ptr %1405, align 8, !tbaa !67
  %1407 = zext i16 %1403 to i64
  %1408 = getelementptr inbounds %struct.CompAtom, ptr %40, i64 %1407
  %1409 = load double, ptr %1408, align 8, !tbaa !67
  %1410 = getelementptr inbounds %class.Vector, ptr %1405, i64 0, i32 1
  %1411 = load double, ptr %1410, align 8, !tbaa !66
  %1412 = getelementptr inbounds %class.Vector, ptr %1408, i64 0, i32 1
  %1413 = load double, ptr %1412, align 8, !tbaa !66
  %1414 = getelementptr inbounds %class.Vector, ptr %1405, i64 0, i32 2
  %1415 = load double, ptr %1414, align 8, !tbaa !49
  %1416 = getelementptr inbounds %class.Vector, ptr %1408, i64 0, i32 2
  %1417 = load double, ptr %1416, align 8, !tbaa !49
  %1418 = fcmp ugt double %1396, %20
  br i1 %1418, label %1431, label %1419

1419:                                             ; preds = %1367
  %1420 = shl i32 %1370, 2
  %1421 = ashr exact i32 %1420, 2
  %1422 = icmp slt i32 %1421, %697
  %1423 = icmp sgt i32 %1421, %699
  %1424 = select i1 %1422, i1 true, i1 %1423
  %1425 = select i1 %1424, ptr %1372, ptr %1371
  %1426 = zext i1 %1424 to i64
  %1427 = getelementptr inbounds i16, ptr %1372, i64 %1426
  %1428 = xor i1 %1424, true
  %1429 = zext i1 %1428 to i64
  %1430 = getelementptr inbounds i16, ptr %1371, i64 %1429
  store i16 %1374, ptr %1425, align 2, !tbaa !44
  br label %1431

1431:                                             ; preds = %1419, %1367
  %1432 = phi ptr [ %1372, %1367 ], [ %1427, %1419 ]
  %1433 = phi ptr [ %1371, %1367 ], [ %1430, %1419 ]
  %1434 = getelementptr inbounds %struct.CompAtomExt, ptr %44, i64 %1404
  %1435 = load i32, ptr %1434, align 4
  %1436 = fcmp ugt double %1397, %20
  br i1 %1436, label %1447, label %1437

1437:                                             ; preds = %1431
  %1438 = icmp slt i32 %1385, %697
  %1439 = icmp sgt i32 %1385, %699
  %1440 = select i1 %1438, i1 true, i1 %1439
  %1441 = select i1 %1440, ptr %1432, ptr %1433
  %1442 = zext i1 %1440 to i64
  %1443 = getelementptr inbounds i16, ptr %1432, i64 %1442
  %1444 = xor i1 %1440, true
  %1445 = zext i1 %1444 to i64
  %1446 = getelementptr inbounds i16, ptr %1433, i64 %1445
  store i16 %1375, ptr %1441, align 2, !tbaa !44
  br label %1447

1447:                                             ; preds = %1437, %1431
  %1448 = phi ptr [ %1432, %1431 ], [ %1443, %1437 ]
  %1449 = phi ptr [ %1433, %1431 ], [ %1446, %1437 ]
  %1450 = add nsw i64 %1368, 2
  %1451 = icmp slt i64 %1450, %1364
  %1452 = trunc i64 %1368 to i32
  br i1 %1451, label %1367, label %1453

1453:                                             ; preds = %1447, %1335, %1332
  %1454 = phi i32 [ %1239, %1332 ], [ %1239, %1335 ], [ %1452, %1447 ]
  %1455 = phi ptr [ %1281, %1332 ], [ %1281, %1335 ], [ %1448, %1447 ]
  %1456 = phi ptr [ %466, %1332 ], [ %466, %1335 ], [ %1449, %1447 ]
  %1457 = icmp slt i32 %1454, %1240
  br i1 %1457, label %1458, label %1502

1458:                                             ; preds = %1453
  %1459 = sext i32 %1454 to i64
  %1460 = sext i32 %1240 to i64
  %1461 = extractelement <2 x double> %684, i64 0
  %1462 = extractelement <2 x double> %684, i64 1
  br label %1463

1463:                                             ; preds = %1458, %1497
  %1464 = phi i64 [ %1459, %1458 ], [ %1500, %1497 ]
  %1465 = phi ptr [ %1456, %1458 ], [ %1499, %1497 ]
  %1466 = phi ptr [ %1455, %1458 ], [ %1498, %1497 ]
  %1467 = getelementptr inbounds i16, ptr %420, i64 %1464
  %1468 = load i16, ptr %1467, align 2, !tbaa !44
  %1469 = zext i16 %1468 to i64
  %1470 = getelementptr inbounds %struct.CompAtom, ptr %40, i64 %1469
  %1471 = load double, ptr %1470, align 8, !tbaa !67
  %1472 = getelementptr inbounds %class.Vector, ptr %1470, i64 0, i32 1
  %1473 = load double, ptr %1472, align 8, !tbaa !66
  %1474 = getelementptr inbounds %class.Vector, ptr %1470, i64 0, i32 2
  %1475 = load double, ptr %1474, align 8, !tbaa !49
  %1476 = fsub double %1461, %1471
  %1477 = fmul double %1476, %1476
  %1478 = fsub double %1462, %1473
  %1479 = tail call double @llvm.fmuladd.f64(double %1478, double %1478, double %1477)
  %1480 = fsub double %687, %1475
  %1481 = tail call double @llvm.fmuladd.f64(double %1480, double %1480, double %1479)
  %1482 = fcmp ugt double %1481, %20
  br i1 %1482, label %1497, label %1483

1483:                                             ; preds = %1463
  %1484 = getelementptr inbounds %struct.CompAtomExt, ptr %44, i64 %1469
  %1485 = load i32, ptr %1484, align 4
  %1486 = shl i32 %1485, 2
  %1487 = ashr exact i32 %1486, 2
  %1488 = icmp slt i32 %1487, %697
  %1489 = icmp sgt i32 %1487, %699
  %1490 = select i1 %1488, i1 true, i1 %1489
  %1491 = select i1 %1490, ptr %1466, ptr %1465
  %1492 = zext i1 %1490 to i64
  %1493 = getelementptr inbounds i16, ptr %1466, i64 %1492
  %1494 = xor i1 %1490, true
  %1495 = zext i1 %1494 to i64
  %1496 = getelementptr inbounds i16, ptr %1465, i64 %1495
  store i16 %1468, ptr %1491, align 2, !tbaa !44
  br label %1497

1497:                                             ; preds = %1483, %1463
  %1498 = phi ptr [ %1466, %1463 ], [ %1493, %1483 ]
  %1499 = phi ptr [ %1465, %1463 ], [ %1496, %1483 ]
  %1500 = add nsw i64 %1464, 1
  %1501 = icmp eq i64 %1500, %1460
  br i1 %1501, label %1502, label %1463

1502:                                             ; preds = %1497, %1326, %1453, %1283, %1331
  %1503 = phi ptr [ %1281, %1331 ], [ %1281, %1283 ], [ %1455, %1453 ], [ %1327, %1326 ], [ %1498, %1497 ]
  %1504 = phi ptr [ %466, %1331 ], [ %466, %1283 ], [ %1456, %1453 ], [ %1328, %1326 ], [ %1499, %1497 ]
  %1505 = ptrtoint ptr %1504 to i64
  %1506 = sub i64 %1505, %642
  %1507 = lshr exact i64 %1506, 1
  %1508 = trunc i64 %1507 to i32
  %1509 = icmp sgt i32 %1508, 0
  br i1 %1509, label %1510, label %1610

1510:                                             ; preds = %1502
  %1511 = and i64 %1507, 4294967295
  %1512 = and i64 %1507, 1
  %1513 = icmp eq i64 %1511, 1
  br i1 %1513, label %1578, label %1514

1514:                                             ; preds = %1510
  %1515 = sub nsw i64 %1511, %1512
  br label %1516

1516:                                             ; preds = %1571, %1514
  %1517 = phi i64 [ 0, %1514 ], [ %1575, %1571 ]
  %1518 = phi ptr [ %1503, %1514 ], [ %1574, %1571 ]
  %1519 = phi ptr [ %328, %1514 ], [ %1573, %1571 ]
  %1520 = phi ptr [ %374, %1514 ], [ %1572, %1571 ]
  %1521 = phi i64 [ 0, %1514 ], [ %1576, %1571 ]
  %1522 = getelementptr inbounds i16, ptr %466, i64 %1517
  %1523 = load i16, ptr %1522, align 2, !tbaa !44
  %1524 = zext i16 %1523 to i64
  %1525 = getelementptr inbounds %struct.CompAtomExt, ptr %44, i64 %1524
  %1526 = load i32, ptr %1525, align 4
  %1527 = shl i32 %1526, 2
  %1528 = ashr exact i32 %1527, 2
  %1529 = sext i32 %1528 to i64
  %1530 = getelementptr inbounds i8, ptr %934, i64 %1529
  %1531 = load i8, ptr %1530, align 1, !tbaa !57
  %1532 = sext i8 %1531 to i32
  switch i32 %1532, label %1544 [
    i32 0, label %1533
    i32 1, label %1535
    i32 2, label %1537
  ]

1533:                                             ; preds = %1516
  %1534 = getelementptr inbounds i16, ptr %1518, i64 1
  br label %1539

1535:                                             ; preds = %1516
  %1536 = getelementptr inbounds i16, ptr %1519, i64 1
  br label %1539

1537:                                             ; preds = %1516
  %1538 = getelementptr inbounds i16, ptr %1520, i64 1
  br label %1539

1539:                                             ; preds = %1533, %1535, %1537
  %1540 = phi ptr [ %1520, %1537 ], [ %1519, %1535 ], [ %1518, %1533 ]
  %1541 = phi ptr [ %1538, %1537 ], [ %1520, %1535 ], [ %1520, %1533 ]
  %1542 = phi ptr [ %1519, %1537 ], [ %1536, %1535 ], [ %1519, %1533 ]
  %1543 = phi ptr [ %1518, %1537 ], [ %1518, %1535 ], [ %1534, %1533 ]
  store i16 %1523, ptr %1540, align 2, !tbaa !44
  br label %1544

1544:                                             ; preds = %1539, %1516
  %1545 = phi ptr [ %1520, %1516 ], [ %1541, %1539 ]
  %1546 = phi ptr [ %1519, %1516 ], [ %1542, %1539 ]
  %1547 = phi ptr [ %1518, %1516 ], [ %1543, %1539 ]
  %1548 = or i64 %1517, 1
  %1549 = getelementptr inbounds i16, ptr %466, i64 %1548
  %1550 = load i16, ptr %1549, align 2, !tbaa !44
  %1551 = zext i16 %1550 to i64
  %1552 = getelementptr inbounds %struct.CompAtomExt, ptr %44, i64 %1551
  %1553 = load i32, ptr %1552, align 4
  %1554 = shl i32 %1553, 2
  %1555 = ashr exact i32 %1554, 2
  %1556 = sext i32 %1555 to i64
  %1557 = getelementptr inbounds i8, ptr %934, i64 %1556
  %1558 = load i8, ptr %1557, align 1, !tbaa !57
  %1559 = sext i8 %1558 to i32
  switch i32 %1559, label %1571 [
    i32 0, label %1564
    i32 1, label %1562
    i32 2, label %1560
  ]

1560:                                             ; preds = %1544
  %1561 = getelementptr inbounds i16, ptr %1545, i64 1
  br label %1566

1562:                                             ; preds = %1544
  %1563 = getelementptr inbounds i16, ptr %1546, i64 1
  br label %1566

1564:                                             ; preds = %1544
  %1565 = getelementptr inbounds i16, ptr %1547, i64 1
  br label %1566

1566:                                             ; preds = %1564, %1562, %1560
  %1567 = phi ptr [ %1545, %1560 ], [ %1546, %1562 ], [ %1547, %1564 ]
  %1568 = phi ptr [ %1561, %1560 ], [ %1545, %1562 ], [ %1545, %1564 ]
  %1569 = phi ptr [ %1546, %1560 ], [ %1563, %1562 ], [ %1546, %1564 ]
  %1570 = phi ptr [ %1547, %1560 ], [ %1547, %1562 ], [ %1565, %1564 ]
  store i16 %1550, ptr %1567, align 2, !tbaa !44
  br label %1571

1571:                                             ; preds = %1566, %1544
  %1572 = phi ptr [ %1545, %1544 ], [ %1568, %1566 ]
  %1573 = phi ptr [ %1546, %1544 ], [ %1569, %1566 ]
  %1574 = phi ptr [ %1547, %1544 ], [ %1570, %1566 ]
  %1575 = add nuw nsw i64 %1517, 2
  %1576 = add i64 %1521, 2
  %1577 = icmp eq i64 %1576, %1515
  br i1 %1577, label %1578, label %1516

1578:                                             ; preds = %1571, %1510
  %1579 = phi ptr [ undef, %1510 ], [ %1572, %1571 ]
  %1580 = phi ptr [ undef, %1510 ], [ %1573, %1571 ]
  %1581 = phi ptr [ undef, %1510 ], [ %1574, %1571 ]
  %1582 = phi i64 [ 0, %1510 ], [ %1575, %1571 ]
  %1583 = phi ptr [ %1503, %1510 ], [ %1574, %1571 ]
  %1584 = phi ptr [ %328, %1510 ], [ %1573, %1571 ]
  %1585 = phi ptr [ %374, %1510 ], [ %1572, %1571 ]
  %1586 = icmp eq i64 %1512, 0
  br i1 %1586, label %1610, label %1587

1587:                                             ; preds = %1578
  %1588 = getelementptr inbounds i16, ptr %466, i64 %1582
  %1589 = load i16, ptr %1588, align 2, !tbaa !44
  %1590 = zext i16 %1589 to i64
  %1591 = getelementptr inbounds %struct.CompAtomExt, ptr %44, i64 %1590
  %1592 = load i32, ptr %1591, align 4
  %1593 = shl i32 %1592, 2
  %1594 = ashr exact i32 %1593, 2
  %1595 = sext i32 %1594 to i64
  %1596 = getelementptr inbounds i8, ptr %934, i64 %1595
  %1597 = load i8, ptr %1596, align 1, !tbaa !57
  %1598 = sext i8 %1597 to i32
  switch i32 %1598, label %1610 [
    i32 0, label %1603
    i32 1, label %1601
    i32 2, label %1599
  ]

1599:                                             ; preds = %1587
  %1600 = getelementptr inbounds i16, ptr %1585, i64 1
  br label %1605

1601:                                             ; preds = %1587
  %1602 = getelementptr inbounds i16, ptr %1584, i64 1
  br label %1605

1603:                                             ; preds = %1587
  %1604 = getelementptr inbounds i16, ptr %1583, i64 1
  br label %1605

1605:                                             ; preds = %1603, %1601, %1599
  %1606 = phi ptr [ %1585, %1599 ], [ %1584, %1601 ], [ %1583, %1603 ]
  %1607 = phi ptr [ %1600, %1599 ], [ %1585, %1601 ], [ %1585, %1603 ]
  %1608 = phi ptr [ %1584, %1599 ], [ %1602, %1601 ], [ %1584, %1603 ]
  %1609 = phi ptr [ %1583, %1599 ], [ %1583, %1601 ], [ %1604, %1603 ]
  store i16 %1589, ptr %1606, align 2, !tbaa !44
  br label %1610

1610:                                             ; preds = %1578, %1605, %1587, %1502
  %1611 = phi ptr [ %374, %1502 ], [ %1579, %1578 ], [ %1585, %1587 ], [ %1607, %1605 ]
  %1612 = phi ptr [ %328, %1502 ], [ %1580, %1578 ], [ %1584, %1587 ], [ %1608, %1605 ]
  %1613 = phi ptr [ %1503, %1502 ], [ %1581, %1578 ], [ %1583, %1587 ], [ %1609, %1605 ]
  %1614 = ptrtoint ptr %1613 to i64
  %1615 = ptrtoint ptr %1281 to i64
  %1616 = sub i64 %1614, %1615
  %1617 = lshr exact i64 %1616, 1
  %1618 = trunc i64 %1617 to i32
  %1619 = icmp eq i32 %1618, 0
  %1620 = shl i64 %1616, 31
  br i1 %1619, label %1626, label %1621

1621:                                             ; preds = %1610
  %1622 = add i64 %1620, -4294967296
  %1623 = ashr i64 %1622, 32
  %1624 = getelementptr inbounds i16, ptr %1281, i64 %1623
  %1625 = load i16, ptr %1624, align 2, !tbaa !44
  br label %1626

1626:                                             ; preds = %1610, %1621
  %1627 = phi i16 [ %1625, %1621 ], [ -1, %1610 ]
  %1628 = ashr i64 %1620, 32
  %1629 = getelementptr inbounds i16, ptr %1281, i64 %1628
  store i16 %1627, ptr %1629, align 2, !tbaa !44
  %1630 = trunc i64 %1617 to i16
  %1631 = add i16 %1630, 1
  %1632 = load i32, ptr %13, align 8, !tbaa !17
  %1633 = sext i32 %1632 to i64
  %1634 = getelementptr inbounds i16, ptr %1277, i64 %1633
  store i16 %1631, ptr %1634, align 2, !tbaa !44
  %1635 = add nsw i32 %1618, 2
  %1636 = add nsw i32 %1635, %1632
  %1637 = ptrtoint ptr %1612 to i64
  %1638 = sub i64 %1637, %643
  %1639 = lshr exact i64 %1638, 1
  %1640 = trunc i64 %1639 to i32
  %1641 = add nsw i32 %1636, 1
  %1642 = sext i32 %1641 to i64
  %1643 = getelementptr i16, ptr %1277, i64 %1642
  %1644 = icmp sgt i32 %1640, 0
  br i1 %1644, label %1645, label %1735

1645:                                             ; preds = %1626
  %1646 = and i64 %1639, 4294967295
  %1647 = icmp ult i64 %1646, 8
  br i1 %1647, label %1691, label %1648

1648:                                             ; preds = %1645
  %1649 = shl nsw i64 %1642, 1
  %1650 = add i64 %1649, %1278
  %1651 = sub i64 %1650, %643
  %1652 = icmp ult i64 %1651, 128
  br i1 %1652, label %1691, label %1653

1653:                                             ; preds = %1648
  %1654 = icmp ult i64 %1646, 64
  br i1 %1654, label %1678, label %1655

1655:                                             ; preds = %1653
  %1656 = and i64 %1639, 63
  %1657 = sub nsw i64 %1646, %1656
  br label %1658

1658:                                             ; preds = %1658, %1655
  %1659 = phi i64 [ 0, %1655 ], [ %1672, %1658 ]
  %1660 = getelementptr inbounds i16, ptr %328, i64 %1659
  %1661 = load <16 x i16>, ptr %1660, align 2, !tbaa !44
  %1662 = getelementptr inbounds i16, ptr %1660, i64 16
  %1663 = load <16 x i16>, ptr %1662, align 2, !tbaa !44
  %1664 = getelementptr inbounds i16, ptr %1660, i64 32
  %1665 = load <16 x i16>, ptr %1664, align 2, !tbaa !44
  %1666 = getelementptr inbounds i16, ptr %1660, i64 48
  %1667 = load <16 x i16>, ptr %1666, align 2, !tbaa !44
  %1668 = getelementptr inbounds i16, ptr %1643, i64 %1659
  store <16 x i16> %1661, ptr %1668, align 2, !tbaa !44
  %1669 = getelementptr inbounds i16, ptr %1668, i64 16
  store <16 x i16> %1663, ptr %1669, align 2, !tbaa !44
  %1670 = getelementptr inbounds i16, ptr %1668, i64 32
  store <16 x i16> %1665, ptr %1670, align 2, !tbaa !44
  %1671 = getelementptr inbounds i16, ptr %1668, i64 48
  store <16 x i16> %1667, ptr %1671, align 2, !tbaa !44
  %1672 = add nuw i64 %1659, 64
  %1673 = icmp eq i64 %1672, %1657
  br i1 %1673, label %1674, label %1658, !llvm.loop !183

1674:                                             ; preds = %1658
  %1675 = icmp eq i64 %1656, 0
  br i1 %1675, label %1729, label %1676

1676:                                             ; preds = %1674
  %1677 = icmp ult i64 %1656, 8
  br i1 %1677, label %1691, label %1678

1678:                                             ; preds = %1653, %1676
  %1679 = phi i64 [ %1657, %1676 ], [ 0, %1653 ]
  %1680 = and i64 %1639, 7
  %1681 = sub nsw i64 %1646, %1680
  br label %1682

1682:                                             ; preds = %1682, %1678
  %1683 = phi i64 [ %1679, %1678 ], [ %1687, %1682 ]
  %1684 = getelementptr inbounds i16, ptr %328, i64 %1683
  %1685 = load <8 x i16>, ptr %1684, align 2, !tbaa !44
  %1686 = getelementptr inbounds i16, ptr %1643, i64 %1683
  store <8 x i16> %1685, ptr %1686, align 2, !tbaa !44
  %1687 = add nuw i64 %1683, 8
  %1688 = icmp eq i64 %1687, %1681
  br i1 %1688, label %1689, label %1682, !llvm.loop !184

1689:                                             ; preds = %1682
  %1690 = icmp eq i64 %1680, 0
  br i1 %1690, label %1729, label %1691

1691:                                             ; preds = %1648, %1645, %1676, %1689
  %1692 = phi i64 [ 0, %1645 ], [ 0, %1648 ], [ %1657, %1676 ], [ %1681, %1689 ]
  %1693 = sub i64 %1639, %1692
  %1694 = xor i64 %1692, -1
  %1695 = add nsw i64 %1646, %1694
  %1696 = and i64 %1693, 3
  %1697 = icmp eq i64 %1696, 0
  br i1 %1697, label %1707, label %1698

1698:                                             ; preds = %1691, %1698
  %1699 = phi i64 [ %1704, %1698 ], [ %1692, %1691 ]
  %1700 = phi i64 [ %1705, %1698 ], [ 0, %1691 ]
  %1701 = getelementptr inbounds i16, ptr %328, i64 %1699
  %1702 = load i16, ptr %1701, align 2, !tbaa !44
  %1703 = getelementptr inbounds i16, ptr %1643, i64 %1699
  store i16 %1702, ptr %1703, align 2, !tbaa !44
  %1704 = add nuw nsw i64 %1699, 1
  %1705 = add i64 %1700, 1
  %1706 = icmp eq i64 %1705, %1696
  br i1 %1706, label %1707, label %1698, !llvm.loop !185

1707:                                             ; preds = %1698, %1691
  %1708 = phi i64 [ %1692, %1691 ], [ %1704, %1698 ]
  %1709 = icmp ult i64 %1695, 3
  br i1 %1709, label %1729, label %1710

1710:                                             ; preds = %1707, %1710
  %1711 = phi i64 [ %1727, %1710 ], [ %1708, %1707 ]
  %1712 = getelementptr inbounds i16, ptr %328, i64 %1711
  %1713 = load i16, ptr %1712, align 2, !tbaa !44
  %1714 = getelementptr inbounds i16, ptr %1643, i64 %1711
  store i16 %1713, ptr %1714, align 2, !tbaa !44
  %1715 = add nuw nsw i64 %1711, 1
  %1716 = getelementptr inbounds i16, ptr %328, i64 %1715
  %1717 = load i16, ptr %1716, align 2, !tbaa !44
  %1718 = getelementptr inbounds i16, ptr %1643, i64 %1715
  store i16 %1717, ptr %1718, align 2, !tbaa !44
  %1719 = add nuw nsw i64 %1711, 2
  %1720 = getelementptr inbounds i16, ptr %328, i64 %1719
  %1721 = load i16, ptr %1720, align 2, !tbaa !44
  %1722 = getelementptr inbounds i16, ptr %1643, i64 %1719
  store i16 %1721, ptr %1722, align 2, !tbaa !44
  %1723 = add nuw nsw i64 %1711, 3
  %1724 = getelementptr inbounds i16, ptr %328, i64 %1723
  %1725 = load i16, ptr %1724, align 2, !tbaa !44
  %1726 = getelementptr inbounds i16, ptr %1643, i64 %1723
  store i16 %1725, ptr %1726, align 2, !tbaa !44
  %1727 = add nuw nsw i64 %1711, 4
  %1728 = icmp eq i64 %1727, %1646
  br i1 %1728, label %1729, label %1710, !llvm.loop !186

1729:                                             ; preds = %1707, %1710, %1674, %1689
  %1730 = shl i64 %1638, 31
  %1731 = add i64 %1730, -4294967296
  %1732 = ashr i64 %1731, 32
  %1733 = getelementptr inbounds i16, ptr %1643, i64 %1732
  %1734 = load i16, ptr %1733, align 2, !tbaa !44
  br label %1735

1735:                                             ; preds = %1626, %1729
  %1736 = phi i64 [ %1639, %1729 ], [ 0, %1626 ]
  %1737 = phi i16 [ %1734, %1729 ], [ -1, %1626 ]
  %1738 = and i64 %1736, 4294967295
  %1739 = getelementptr inbounds i16, ptr %1643, i64 %1738
  store i16 %1737, ptr %1739, align 2, !tbaa !44
  %1740 = trunc i64 %1639 to i16
  %1741 = add i16 %1740, 1
  %1742 = sext i32 %1636 to i64
  %1743 = getelementptr inbounds i16, ptr %1277, i64 %1742
  store i16 %1741, ptr %1743, align 2, !tbaa !44
  %1744 = add nsw i32 %1640, 2
  %1745 = add nsw i32 %1744, %1636
  %1746 = ptrtoint ptr %1611 to i64
  %1747 = sub i64 %1746, %644
  %1748 = lshr exact i64 %1747, 1
  %1749 = trunc i64 %1748 to i32
  %1750 = add nsw i32 %1745, 1
  %1751 = sext i32 %1750 to i64
  %1752 = getelementptr i16, ptr %1277, i64 %1751
  %1753 = icmp sgt i32 %1749, 0
  br i1 %1753, label %1754, label %1844

1754:                                             ; preds = %1735
  %1755 = and i64 %1748, 4294967295
  %1756 = icmp ult i64 %1755, 8
  br i1 %1756, label %1800, label %1757

1757:                                             ; preds = %1754
  %1758 = shl nsw i64 %1751, 1
  %1759 = add i64 %1758, %1278
  %1760 = sub i64 %1759, %644
  %1761 = icmp ult i64 %1760, 128
  br i1 %1761, label %1800, label %1762

1762:                                             ; preds = %1757
  %1763 = icmp ult i64 %1755, 64
  br i1 %1763, label %1787, label %1764

1764:                                             ; preds = %1762
  %1765 = and i64 %1748, 63
  %1766 = sub nsw i64 %1755, %1765
  br label %1767

1767:                                             ; preds = %1767, %1764
  %1768 = phi i64 [ 0, %1764 ], [ %1781, %1767 ]
  %1769 = getelementptr inbounds i16, ptr %374, i64 %1768
  %1770 = load <16 x i16>, ptr %1769, align 2, !tbaa !44
  %1771 = getelementptr inbounds i16, ptr %1769, i64 16
  %1772 = load <16 x i16>, ptr %1771, align 2, !tbaa !44
  %1773 = getelementptr inbounds i16, ptr %1769, i64 32
  %1774 = load <16 x i16>, ptr %1773, align 2, !tbaa !44
  %1775 = getelementptr inbounds i16, ptr %1769, i64 48
  %1776 = load <16 x i16>, ptr %1775, align 2, !tbaa !44
  %1777 = getelementptr inbounds i16, ptr %1752, i64 %1768
  store <16 x i16> %1770, ptr %1777, align 2, !tbaa !44
  %1778 = getelementptr inbounds i16, ptr %1777, i64 16
  store <16 x i16> %1772, ptr %1778, align 2, !tbaa !44
  %1779 = getelementptr inbounds i16, ptr %1777, i64 32
  store <16 x i16> %1774, ptr %1779, align 2, !tbaa !44
  %1780 = getelementptr inbounds i16, ptr %1777, i64 48
  store <16 x i16> %1776, ptr %1780, align 2, !tbaa !44
  %1781 = add nuw i64 %1768, 64
  %1782 = icmp eq i64 %1781, %1766
  br i1 %1782, label %1783, label %1767, !llvm.loop !187

1783:                                             ; preds = %1767
  %1784 = icmp eq i64 %1765, 0
  br i1 %1784, label %1838, label %1785

1785:                                             ; preds = %1783
  %1786 = icmp ult i64 %1765, 8
  br i1 %1786, label %1800, label %1787

1787:                                             ; preds = %1762, %1785
  %1788 = phi i64 [ %1766, %1785 ], [ 0, %1762 ]
  %1789 = and i64 %1748, 7
  %1790 = sub nsw i64 %1755, %1789
  br label %1791

1791:                                             ; preds = %1791, %1787
  %1792 = phi i64 [ %1788, %1787 ], [ %1796, %1791 ]
  %1793 = getelementptr inbounds i16, ptr %374, i64 %1792
  %1794 = load <8 x i16>, ptr %1793, align 2, !tbaa !44
  %1795 = getelementptr inbounds i16, ptr %1752, i64 %1792
  store <8 x i16> %1794, ptr %1795, align 2, !tbaa !44
  %1796 = add nuw i64 %1792, 8
  %1797 = icmp eq i64 %1796, %1790
  br i1 %1797, label %1798, label %1791, !llvm.loop !188

1798:                                             ; preds = %1791
  %1799 = icmp eq i64 %1789, 0
  br i1 %1799, label %1838, label %1800

1800:                                             ; preds = %1757, %1754, %1785, %1798
  %1801 = phi i64 [ 0, %1754 ], [ 0, %1757 ], [ %1766, %1785 ], [ %1790, %1798 ]
  %1802 = sub i64 %1748, %1801
  %1803 = xor i64 %1801, -1
  %1804 = add nsw i64 %1755, %1803
  %1805 = and i64 %1802, 3
  %1806 = icmp eq i64 %1805, 0
  br i1 %1806, label %1816, label %1807

1807:                                             ; preds = %1800, %1807
  %1808 = phi i64 [ %1813, %1807 ], [ %1801, %1800 ]
  %1809 = phi i64 [ %1814, %1807 ], [ 0, %1800 ]
  %1810 = getelementptr inbounds i16, ptr %374, i64 %1808
  %1811 = load i16, ptr %1810, align 2, !tbaa !44
  %1812 = getelementptr inbounds i16, ptr %1752, i64 %1808
  store i16 %1811, ptr %1812, align 2, !tbaa !44
  %1813 = add nuw nsw i64 %1808, 1
  %1814 = add i64 %1809, 1
  %1815 = icmp eq i64 %1814, %1805
  br i1 %1815, label %1816, label %1807, !llvm.loop !189

1816:                                             ; preds = %1807, %1800
  %1817 = phi i64 [ %1801, %1800 ], [ %1813, %1807 ]
  %1818 = icmp ult i64 %1804, 3
  br i1 %1818, label %1838, label %1819

1819:                                             ; preds = %1816, %1819
  %1820 = phi i64 [ %1836, %1819 ], [ %1817, %1816 ]
  %1821 = getelementptr inbounds i16, ptr %374, i64 %1820
  %1822 = load i16, ptr %1821, align 2, !tbaa !44
  %1823 = getelementptr inbounds i16, ptr %1752, i64 %1820
  store i16 %1822, ptr %1823, align 2, !tbaa !44
  %1824 = add nuw nsw i64 %1820, 1
  %1825 = getelementptr inbounds i16, ptr %374, i64 %1824
  %1826 = load i16, ptr %1825, align 2, !tbaa !44
  %1827 = getelementptr inbounds i16, ptr %1752, i64 %1824
  store i16 %1826, ptr %1827, align 2, !tbaa !44
  %1828 = add nuw nsw i64 %1820, 2
  %1829 = getelementptr inbounds i16, ptr %374, i64 %1828
  %1830 = load i16, ptr %1829, align 2, !tbaa !44
  %1831 = getelementptr inbounds i16, ptr %1752, i64 %1828
  store i16 %1830, ptr %1831, align 2, !tbaa !44
  %1832 = add nuw nsw i64 %1820, 3
  %1833 = getelementptr inbounds i16, ptr %374, i64 %1832
  %1834 = load i16, ptr %1833, align 2, !tbaa !44
  %1835 = getelementptr inbounds i16, ptr %1752, i64 %1832
  store i16 %1834, ptr %1835, align 2, !tbaa !44
  %1836 = add nuw nsw i64 %1820, 4
  %1837 = icmp eq i64 %1836, %1755
  br i1 %1837, label %1838, label %1819, !llvm.loop !190

1838:                                             ; preds = %1816, %1819, %1783, %1798
  %1839 = shl i64 %1747, 31
  %1840 = add i64 %1839, -4294967296
  %1841 = ashr i64 %1840, 32
  %1842 = getelementptr inbounds i16, ptr %1752, i64 %1841
  %1843 = load i16, ptr %1842, align 2, !tbaa !44
  br label %1844

1844:                                             ; preds = %1735, %1838
  %1845 = phi i64 [ %1748, %1838 ], [ 0, %1735 ]
  %1846 = phi i16 [ %1843, %1838 ], [ -1, %1735 ]
  %1847 = and i64 %1845, 4294967295
  %1848 = getelementptr inbounds i16, ptr %1752, i64 %1847
  store i16 %1846, ptr %1848, align 2, !tbaa !44
  %1849 = trunc i64 %1748 to i16
  %1850 = add i16 %1849, 1
  %1851 = sext i32 %1745 to i64
  %1852 = getelementptr inbounds i16, ptr %1277, i64 %1851
  store i16 %1850, ptr %1852, align 2, !tbaa !44
  %1853 = add nsw i32 %1749, 2
  %1854 = add nsw i32 %1853, %1745
  %1855 = select i1 %141, i32 0, i32 %1854
  store i32 %1855, ptr %13, align 8
  br label %1884

1856:                                             ; preds = %681
  %1857 = load ptr, ptr %8, align 8, !tbaa !46
  %1858 = load i32, ptr %13, align 8, !tbaa !17
  %1859 = add i32 %1858, 1
  %1860 = sext i32 %1859 to i64
  %1861 = getelementptr inbounds i16, ptr %1857, i64 %1860
  %1862 = sext i32 %1858 to i64
  %1863 = getelementptr inbounds i16, ptr %1857, i64 %1862
  %1864 = load i16, ptr %1863, align 2, !tbaa !44
  %1865 = zext i16 %1864 to i32
  %1866 = add i32 %1859, %1865
  %1867 = add nsw i32 %1865, -1
  %1868 = sext i32 %1866 to i64
  %1869 = getelementptr inbounds i16, ptr %1857, i64 %1868
  %1870 = load i16, ptr %1869, align 2, !tbaa !44
  %1871 = zext i16 %1870 to i32
  %1872 = add nuw nsw i32 %1871, 1
  %1873 = add nsw i32 %1872, %1866
  %1874 = add nsw i32 %1871, -1
  %1875 = add i32 %1873, 1
  %1876 = sext i32 %1875 to i64
  %1877 = getelementptr inbounds i16, ptr %1857, i64 %1876
  %1878 = sext i32 %1873 to i64
  %1879 = getelementptr inbounds i16, ptr %1857, i64 %1878
  %1880 = load i16, ptr %1879, align 2, !tbaa !44
  %1881 = zext i16 %1880 to i32
  %1882 = add i32 %1875, %1881
  store i32 %1882, ptr %13, align 8, !tbaa !17
  %1883 = add nsw i32 %1881, -1
  br label %1884

1884:                                             ; preds = %1844, %1856
  %1885 = phi ptr [ %1861, %1856 ], [ %1281, %1844 ]
  %1886 = phi i32 [ %1867, %1856 ], [ %1618, %1844 ]
  %1887 = phi i32 [ %1874, %1856 ], [ %1640, %1844 ]
  %1888 = phi ptr [ %1877, %1856 ], [ %1752, %1844 ]
  %1889 = phi i32 [ %1883, %1856 ], [ %1749, %1844 ]
  %1890 = phi i32 [ %664, %1856 ], [ %1239, %1844 ]
  %1891 = phi i32 [ %663, %1856 ], [ %1240, %1844 ]
  %1892 = phi i32 [ %662, %1856 ], [ %1241, %1844 ]
  %1893 = phi i32 [ %661, %1856 ], [ %1242, %1844 ]
  %1894 = phi ptr [ %659, %1856 ], [ %935, %1844 ]
  %1895 = phi ptr [ %658, %1856 ], [ %936, %1844 ]
  %1896 = phi ptr [ %657, %1856 ], [ %937, %1844 ]
  %1897 = getelementptr inbounds %struct.CompAtom, ptr %38, i64 %666, i32 1
  %1898 = load float, ptr %1897, align 8, !tbaa !79
  %1899 = fpext float %1898 to double
  %1900 = fmul double %1899, 0x4074C104816F0069
  %1901 = fmul double %28, %1900
  %1902 = fmul double %24, %1901
  %1903 = getelementptr inbounds %struct.CompAtom, ptr %38, i64 %666, i32 2
  %1904 = load i16, ptr %1903, align 4, !tbaa !80
  %1905 = sext i16 %1904 to i32
  %1906 = load ptr, ptr %645, align 8, !tbaa !81
  %1907 = load i32, ptr %646, align 8, !tbaa !83
  %1908 = shl nsw i32 %1905, 1
  %1909 = mul i32 %1908, %1907
  %1910 = zext i32 %1909 to i64
  %1911 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %1906, i64 %1910
  %1912 = load double, ptr @_ZN20ComputeNonbondedUtil7cutoff2E, align 8, !tbaa !19
  %1913 = extractelement <2 x double> %684, i64 0
  %1914 = extractelement <2 x double> %684, i64 1
  %1915 = tail call noundef i32 @_Z22pairlist_from_pairlistddddPK8CompAtomPKtiPtdPd(double noundef %1912, double noundef %1913, double noundef %1914, double noundef %687, ptr noundef %40, ptr noundef nonnull %1885, i32 noundef %1886, ptr noundef %93, double noundef %30, ptr noundef %139)
  %1916 = icmp sgt i32 %1915, 0
  br i1 %1916, label %1917, label %2007

1917:                                             ; preds = %1884
  %1918 = load ptr, ptr @_ZN20ComputeNonbondedUtil8r2_tableE, align 8, !tbaa !23
  %1919 = zext i32 %1915 to i64
  br label %1920

1920:                                             ; preds = %1917, %1920
  %1921 = phi i64 [ 0, %1917 ], [ %2005, %1920 ]
  %1922 = phi double [ 0.000000e+00, %1917 ], [ %2001, %1920 ]
  %1923 = phi <2 x double> [ zeroinitializer, %1917 ], [ %1997, %1920 ]
  %1924 = shl nuw nsw i64 %1921, 1
  %1925 = getelementptr inbounds i32, ptr %140, i64 %1924
  %1926 = load i32, ptr %1925, align 4, !tbaa !5
  %1927 = ashr i32 %1926, 14
  %1928 = add nsw i32 %1927, %33
  %1929 = getelementptr inbounds i16, ptr %93, i64 %1921
  %1930 = load i16, ptr %1929, align 2, !tbaa !44
  %1931 = zext i16 %1930 to i64
  %1932 = getelementptr inbounds %struct.CompAtom, ptr %40, i64 %1931
  %1933 = getelementptr inbounds double, ptr %139, i64 %1921
  %1934 = load double, ptr %1933, align 8, !tbaa !19
  %1935 = sext i32 %1928 to i64
  %1936 = getelementptr inbounds double, ptr %1918, i64 %1935
  %1937 = load double, ptr %1936, align 8, !tbaa !19
  %1938 = fsub double %1934, %1937
  %1939 = shl nsw i32 %1928, 4
  %1940 = sext i32 %1939 to i64
  %1941 = getelementptr inbounds double, ptr %27, i64 %1940
  %1942 = getelementptr inbounds %struct.CompAtom, ptr %40, i64 %1931, i32 2
  %1943 = load i16, ptr %1942, align 4, !tbaa !80
  %1944 = sext i16 %1943 to i32
  %1945 = shl nsw i32 %1944, 1
  %1946 = sext i32 %1945 to i64
  %1947 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %1911, i64 %1946
  %1948 = getelementptr inbounds %class.Vector, ptr %624, i64 %1931
  %1949 = getelementptr inbounds %struct.CompAtom, ptr %40, i64 %1931, i32 1
  %1950 = load float, ptr %1949, align 8, !tbaa !79
  %1951 = fpext float %1950 to double
  %1952 = fmul double %1902, %1951
  %1953 = getelementptr inbounds %class.Vector, ptr %1932, i64 0, i32 2
  %1954 = load double, ptr %1953, align 8, !tbaa !49
  %1955 = fsub double %687, %1954
  %1956 = load double, ptr %1947, align 8, !tbaa !84
  %1957 = fmul double %28, %1956
  %1958 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %1911, i64 %1946, i32 1
  %1959 = load double, ptr %1958, align 8, !tbaa !86
  %1960 = load double, ptr %1941, align 8, !tbaa !19
  %1961 = getelementptr inbounds double, ptr %1941, i64 2
  %1962 = load double, ptr %1961, align 8, !tbaa !19
  %1963 = fmul double %1959, %647
  %1964 = fmul double %1963, %1962
  %1965 = tail call double @llvm.fmuladd.f64(double %1957, double %1960, double %1964)
  %1966 = getelementptr inbounds double, ptr %1941, i64 1
  %1967 = load double, ptr %1966, align 8, !tbaa !19
  %1968 = getelementptr inbounds double, ptr %1941, i64 3
  %1969 = load double, ptr %1968, align 8, !tbaa !19
  %1970 = fmul double %1963, %1969
  %1971 = tail call double @llvm.fmuladd.f64(double %1957, double %1967, double %1970)
  %1972 = getelementptr inbounds double, ptr %1941, i64 4
  %1973 = load double, ptr %1972, align 8, !tbaa !19
  %1974 = getelementptr inbounds double, ptr %1941, i64 6
  %1975 = load double, ptr %1974, align 8, !tbaa !19
  %1976 = fmul double %1963, %1975
  %1977 = tail call double @llvm.fmuladd.f64(double %1957, double %1973, double %1976)
  %1978 = getelementptr inbounds double, ptr %1941, i64 8
  %1979 = load double, ptr %1978, align 8, !tbaa !19
  %1980 = fmul double %1952, %1979
  %1981 = getelementptr inbounds double, ptr %1941, i64 9
  %1982 = load double, ptr %1981, align 8, !tbaa !19
  %1983 = fmul double %1952, %1982
  %1984 = getelementptr inbounds double, ptr %1941, i64 10
  %1985 = load double, ptr %1984, align 8, !tbaa !19
  %1986 = fmul double %1952, %1985
  %1987 = fadd double %1965, %1980
  %1988 = fadd double %1971, %1983
  %1989 = fadd double %1977, %1986
  %1990 = tail call double @llvm.fmuladd.f64(double %1938, double %1987, double %1988)
  %1991 = tail call double @llvm.fmuladd.f64(double %1990, double %1938, double %1989)
  %1992 = load <2 x double>, ptr %1932, align 8, !tbaa !19
  %1993 = fsub <2 x double> %684, %1992
  %1994 = insertelement <2 x double> poison, double %1991, i64 0
  %1995 = shufflevector <2 x double> %1994, <2 x double> poison, <2 x i32> zeroinitializer
  %1996 = fmul <2 x double> %1993, %1995
  %1997 = fadd <2 x double> %1923, %1996
  %1998 = load <2 x double>, ptr %1948, align 8, !tbaa !19
  %1999 = fsub <2 x double> %1998, %1996
  store <2 x double> %1999, ptr %1948, align 8, !tbaa !19
  %2000 = fmul double %1955, %1991
  %2001 = fadd double %1922, %2000
  %2002 = getelementptr inbounds %class.Vector, ptr %624, i64 %1931, i32 2
  %2003 = load double, ptr %2002, align 8, !tbaa !87
  %2004 = fsub double %2003, %2000
  store double %2004, ptr %2002, align 8, !tbaa !87
  %2005 = add nuw nsw i64 %1921, 1
  %2006 = icmp eq i64 %2005, %1919
  br i1 %2006, label %2007, label %1920

2007:                                             ; preds = %1920, %1884
  %2008 = phi double [ 0.000000e+00, %1884 ], [ %2001, %1920 ]
  %2009 = phi <2 x double> [ zeroinitializer, %1884 ], [ %1997, %1920 ]
  %2010 = load double, ptr @_ZN20ComputeNonbondedUtil7cutoff2E, align 8, !tbaa !19
  %2011 = tail call noundef i32 @_Z22pairlist_from_pairlistddddPK8CompAtomPKtiPtdPd(double noundef %2010, double noundef %1913, double noundef %1914, double noundef %687, ptr noundef %40, ptr noundef %1888, i32 noundef %1889, ptr noundef %93, double noundef %30, ptr noundef %139)
  %2012 = icmp sgt i32 %2011, 0
  br i1 %2012, label %2013, label %2105

2013:                                             ; preds = %2007
  %2014 = load ptr, ptr @_ZN20ComputeNonbondedUtil8r2_tableE, align 8, !tbaa !23
  %2015 = zext i32 %2011 to i64
  br label %2016

2016:                                             ; preds = %2013, %2016
  %2017 = phi i64 [ 0, %2013 ], [ %2103, %2016 ]
  %2018 = phi double [ %2008, %2013 ], [ %2099, %2016 ]
  %2019 = phi <2 x double> [ %2009, %2013 ], [ %2095, %2016 ]
  %2020 = shl nuw nsw i64 %2017, 1
  %2021 = getelementptr inbounds i32, ptr %140, i64 %2020
  %2022 = load i32, ptr %2021, align 4, !tbaa !5
  %2023 = ashr i32 %2022, 14
  %2024 = add nsw i32 %2023, %33
  %2025 = getelementptr inbounds i16, ptr %93, i64 %2017
  %2026 = load i16, ptr %2025, align 2, !tbaa !44
  %2027 = zext i16 %2026 to i64
  %2028 = getelementptr inbounds %struct.CompAtom, ptr %40, i64 %2027
  %2029 = getelementptr inbounds double, ptr %139, i64 %2017
  %2030 = load double, ptr %2029, align 8, !tbaa !19
  %2031 = sext i32 %2024 to i64
  %2032 = getelementptr inbounds double, ptr %2014, i64 %2031
  %2033 = load double, ptr %2032, align 8, !tbaa !19
  %2034 = fsub double %2030, %2033
  %2035 = shl nsw i32 %2024, 4
  %2036 = sext i32 %2035 to i64
  %2037 = getelementptr inbounds double, ptr %27, i64 %2036
  %2038 = getelementptr inbounds %struct.CompAtom, ptr %40, i64 %2027, i32 2
  %2039 = load i16, ptr %2038, align 4, !tbaa !80
  %2040 = sext i16 %2039 to i32
  %2041 = shl nsw i32 %2040, 1
  %2042 = sext i32 %2041 to i64
  %2043 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %1911, i64 %2042
  %2044 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %2043, i64 1
  %2045 = getelementptr inbounds %class.Vector, ptr %624, i64 %2027
  %2046 = getelementptr inbounds %struct.CompAtom, ptr %40, i64 %2027, i32 1
  %2047 = load float, ptr %2046, align 8, !tbaa !79
  %2048 = fpext float %2047 to double
  %2049 = fmul double %1902, %2048
  %2050 = getelementptr inbounds %class.Vector, ptr %2028, i64 0, i32 2
  %2051 = load double, ptr %2050, align 8, !tbaa !49
  %2052 = fsub double %687, %2051
  %2053 = load double, ptr %2044, align 8, !tbaa !84
  %2054 = fmul double %28, %2053
  %2055 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %2043, i64 1, i32 1
  %2056 = load double, ptr %2055, align 8, !tbaa !86
  %2057 = load double, ptr %2037, align 8, !tbaa !19
  %2058 = getelementptr inbounds double, ptr %2037, i64 2
  %2059 = load double, ptr %2058, align 8, !tbaa !19
  %2060 = fmul double %2056, %647
  %2061 = fmul double %2060, %2059
  %2062 = tail call double @llvm.fmuladd.f64(double %2054, double %2057, double %2061)
  %2063 = getelementptr inbounds double, ptr %2037, i64 1
  %2064 = load double, ptr %2063, align 8, !tbaa !19
  %2065 = getelementptr inbounds double, ptr %2037, i64 3
  %2066 = load double, ptr %2065, align 8, !tbaa !19
  %2067 = fmul double %2060, %2066
  %2068 = tail call double @llvm.fmuladd.f64(double %2054, double %2064, double %2067)
  %2069 = getelementptr inbounds double, ptr %2037, i64 4
  %2070 = load double, ptr %2069, align 8, !tbaa !19
  %2071 = getelementptr inbounds double, ptr %2037, i64 6
  %2072 = load double, ptr %2071, align 8, !tbaa !19
  %2073 = fmul double %2060, %2072
  %2074 = tail call double @llvm.fmuladd.f64(double %2054, double %2070, double %2073)
  %2075 = fmul double %649, %2049
  %2076 = getelementptr inbounds double, ptr %2037, i64 8
  %2077 = load double, ptr %2076, align 8, !tbaa !19
  %2078 = fmul double %2075, %2077
  %2079 = getelementptr inbounds double, ptr %2037, i64 9
  %2080 = load double, ptr %2079, align 8, !tbaa !19
  %2081 = fmul double %2075, %2080
  %2082 = getelementptr inbounds double, ptr %2037, i64 10
  %2083 = load double, ptr %2082, align 8, !tbaa !19
  %2084 = fmul double %2075, %2083
  %2085 = fadd double %2062, %2078
  %2086 = fadd double %2068, %2081
  %2087 = fadd double %2074, %2084
  %2088 = tail call double @llvm.fmuladd.f64(double %2034, double %2085, double %2086)
  %2089 = tail call double @llvm.fmuladd.f64(double %2088, double %2034, double %2087)
  %2090 = load <2 x double>, ptr %2028, align 8, !tbaa !19
  %2091 = fsub <2 x double> %684, %2090
  %2092 = insertelement <2 x double> poison, double %2089, i64 0
  %2093 = shufflevector <2 x double> %2092, <2 x double> poison, <2 x i32> zeroinitializer
  %2094 = fmul <2 x double> %2091, %2093
  %2095 = fadd <2 x double> %2019, %2094
  %2096 = load <2 x double>, ptr %2045, align 8, !tbaa !19
  %2097 = fsub <2 x double> %2096, %2094
  store <2 x double> %2097, ptr %2045, align 8, !tbaa !19
  %2098 = fmul double %2052, %2089
  %2099 = fadd double %2018, %2098
  %2100 = getelementptr inbounds %class.Vector, ptr %624, i64 %2027, i32 2
  %2101 = load double, ptr %2100, align 8, !tbaa !87
  %2102 = fsub double %2101, %2098
  store double %2102, ptr %2100, align 8, !tbaa !87
  %2103 = add nuw nsw i64 %2017, 1
  %2104 = icmp eq i64 %2103, %2015
  br i1 %2104, label %2105, label %2016

2105:                                             ; preds = %2016, %2007
  %2106 = phi double [ %2008, %2007 ], [ %2099, %2016 ]
  %2107 = phi <2 x double> [ %2009, %2007 ], [ %2095, %2016 ]
  %2108 = add i32 %1887, %655
  %2109 = add i32 %2108, %2011
  %2110 = getelementptr inbounds %class.Vector, ptr %624, i64 %666
  %2111 = load <2 x double>, ptr %2110, align 8, !tbaa !19
  %2112 = fadd <2 x double> %2107, %2111
  store <2 x double> %2112, ptr %2110, align 8, !tbaa !19
  %2113 = getelementptr inbounds %class.Vector, ptr %624, i64 %666, i32 2
  %2114 = load double, ptr %2113, align 8, !tbaa !87
  %2115 = fadd double %2106, %2114
  store double %2115, ptr %2113, align 8, !tbaa !87
  br label %2116

2116:                                             ; preds = %2105, %677
  %2117 = phi i32 [ %678, %677 ], [ %682, %2105 ]
  %2118 = phi i32 [ %664, %677 ], [ %1890, %2105 ]
  %2119 = phi i32 [ %663, %677 ], [ %1891, %2105 ]
  %2120 = phi i32 [ %662, %677 ], [ %1892, %2105 ]
  %2121 = phi i32 [ %661, %677 ], [ %1893, %2105 ]
  %2122 = phi i32 [ %660, %677 ], [ %689, %2105 ]
  %2123 = phi ptr [ %659, %677 ], [ %1894, %2105 ]
  %2124 = phi ptr [ %658, %677 ], [ %1895, %2105 ]
  %2125 = phi ptr [ %657, %677 ], [ %1896, %2105 ]
  %2126 = phi i32 [ %680, %677 ], [ %656, %2105 ]
  %2127 = phi i32 [ %655, %677 ], [ %2109, %2105 ]
  %2128 = add nsw i32 %2126, 1
  %2129 = icmp slt i32 %2128, %630
  br i1 %2129, label %654, label %2130

2130:                                             ; preds = %2116, %618
  %2131 = phi ptr [ null, %618 ], [ %2125, %2116 ]
  %2132 = phi i32 [ 0, %618 ], [ %2127, %2116 ]
  %2133 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 3
  %2134 = load ptr, ptr %2133, align 8, !tbaa !23
  %2135 = icmp sgt i32 %35, 0
  br i1 %2135, label %2136, label %2138

2136:                                             ; preds = %2130
  %2137 = zext i32 %35 to i64
  br label %2161

2138:                                             ; preds = %2161, %2130
  %2139 = phi <4 x double> [ zeroinitializer, %2130 ], [ %2191, %2161 ]
  %2140 = phi <2 x double> [ zeroinitializer, %2130 ], [ %2186, %2161 ]
  %2141 = sitofp i32 %2132 to double
  %2142 = getelementptr inbounds double, ptr %6, i64 22
  %2143 = load double, ptr %2142, align 8, !tbaa !19
  %2144 = fadd double %2143, %2141
  store double %2144, ptr %2142, align 8, !tbaa !19
  %2145 = getelementptr inbounds double, ptr %6, i64 3
  %2146 = load <4 x double>, ptr %2145, align 8, !tbaa !19
  %2147 = shufflevector <2 x double> %2140, <2 x double> poison, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>
  %2148 = shufflevector <4 x double> %2147, <4 x double> %2139, <4 x i32> <i32 0, i32 1, i32 7, i32 poison>
  %2149 = shufflevector <4 x double> %2148, <4 x double> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 1>
  %2150 = fadd <4 x double> %2149, %2146
  store <4 x double> %2150, ptr %2145, align 8, !tbaa !19
  %2151 = getelementptr inbounds double, ptr %6, i64 7
  %2152 = load <4 x double>, ptr %2151, align 8, !tbaa !19
  %2153 = shufflevector <4 x double> %2139, <4 x double> poison, <4 x i32> <i32 2, i32 1, i32 3, i32 poison>
  %2154 = shufflevector <4 x double> %2153, <4 x double> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 1>
  %2155 = fadd <4 x double> %2154, %2152
  store <4 x double> %2155, ptr %2151, align 8, !tbaa !19
  %2156 = getelementptr inbounds double, ptr %6, i64 11
  %2157 = load double, ptr %2156, align 8, !tbaa !19
  %2158 = extractelement <4 x double> %2139, i64 0
  %2159 = fadd double %2158, %2157
  store double %2159, ptr %2156, align 8, !tbaa !19
  %2160 = icmp eq ptr %2131, null
  br i1 %2160, label %2195, label %2194

2161:                                             ; preds = %2136, %2161
  %2162 = phi i64 [ 0, %2136 ], [ %2192, %2161 ]
  %2163 = phi <4 x double> [ zeroinitializer, %2136 ], [ %2191, %2161 ]
  %2164 = phi <2 x double> [ zeroinitializer, %2136 ], [ %2186, %2161 ]
  %2165 = getelementptr inbounds %class.Vector, ptr %624, i64 %2162
  %2166 = getelementptr inbounds %class.Vector, ptr %2134, i64 %2162
  %2167 = getelementptr inbounds %class.Vector, ptr %624, i64 %2162, i32 1
  %2168 = load <2 x double>, ptr %2165, align 8, !tbaa !19
  %2169 = load <2 x double>, ptr %2166, align 8, !tbaa !19
  %2170 = fadd <2 x double> %2168, %2169
  store <2 x double> %2170, ptr %2166, align 8, !tbaa !19
  %2171 = getelementptr inbounds %class.Vector, ptr %624, i64 %2162, i32 2
  %2172 = load double, ptr %2171, align 8, !tbaa !87
  %2173 = getelementptr inbounds %class.Vector, ptr %2134, i64 %2162, i32 2
  %2174 = load double, ptr %2173, align 8, !tbaa !87
  %2175 = fadd double %2172, %2174
  store double %2175, ptr %2173, align 8, !tbaa !87
  %2176 = load double, ptr %2165, align 8, !tbaa !191
  %2177 = getelementptr inbounds %struct.CompAtom, ptr %38, i64 %2162
  %2178 = load double, ptr %2177, align 8, !tbaa !67
  %2179 = getelementptr inbounds %class.Vector, ptr %2177, i64 0, i32 1
  %2180 = load <2 x double>, ptr %2179, align 8, !tbaa !19
  %2181 = shufflevector <2 x double> %2180, <2 x double> poison, <4 x i32> <i32 1, i32 1, i32 0, i32 1>
  %2182 = insertelement <2 x double> poison, double %2176, i64 0
  %2183 = shufflevector <2 x double> %2182, <2 x double> poison, <2 x i32> zeroinitializer
  %2184 = shufflevector <2 x double> %2180, <2 x double> poison, <2 x i32> <i32 poison, i32 0>
  %2185 = insertelement <2 x double> %2184, double %2178, i64 0
  %2186 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2183, <2 x double> %2185, <2 x double> %2164)
  %2187 = load <2 x double>, ptr %2167, align 8, !tbaa !19
  %2188 = shufflevector <2 x double> %2187, <2 x double> poison, <4 x i32> <i32 1, i32 0, i32 poison, i32 poison>
  %2189 = insertelement <4 x double> %2188, double %2176, i64 3
  %2190 = shufflevector <4 x double> %2189, <4 x double> poison, <4 x i32> <i32 0, i32 1, i32 1, i32 3>
  %2191 = tail call <4 x double> @llvm.fmuladd.v4f64(<4 x double> %2190, <4 x double> %2181, <4 x double> %2163)
  %2192 = add nuw nsw i64 %2162, 1
  %2193 = icmp eq i64 %2192, %2137
  br i1 %2193, label %2138, label %2161

2194:                                             ; preds = %2138
  tail call void @_ZdaPv(ptr noundef nonnull %2131) #10
  br label %2195

2195:                                             ; preds = %2138, %2194, %1
  ret void
}

; Function Attrs: sspstrong uwtable
define dso_local void @_ZN20ComputeNonbondedUtil16calc_self_energyEP9nonbonded(ptr nocapture noundef readonly %0) local_unnamed_addr #0 align 2 {
  %2 = load i32, ptr @_ZN20ComputeNonbondedUtil8commOnlyE, align 4, !tbaa !5
  %3 = icmp eq i32 %2, 0
  br i1 %3, label %4, label %2254

4:                                                ; preds = %1
  %5 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 7
  %6 = load ptr, ptr %5, align 8, !tbaa !9
  %7 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 10
  %8 = load ptr, ptr %7, align 8, !tbaa !14
  %9 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 11
  %10 = load i32, ptr %9, align 8, !tbaa !15
  %11 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 12
  %12 = load i32, ptr %11, align 4, !tbaa !16
  %13 = getelementptr inbounds %class.Pairlists, ptr %8, i64 0, i32 1
  store i32 0, ptr %13, align 8, !tbaa !17
  %14 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 6
  %15 = load <2 x double>, ptr %14, align 8, !tbaa !19
  %16 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 6, i32 2
  %17 = load double, ptr %16, align 8, !tbaa !20
  %18 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 13
  %19 = load double, ptr %18, align 8, !tbaa !21
  %20 = fmul double %19, %19
  %21 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 14
  %22 = load double, ptr %21, align 8, !tbaa !22
  %23 = fmul double %22, %22
  %24 = load double, ptr @_ZN20ComputeNonbondedUtil12dielectric_1E, align 8, !tbaa !19
  %25 = load ptr, ptr @_ZN20ComputeNonbondedUtil7ljTableE, align 8, !tbaa !23
  %26 = load ptr, ptr @_ZN20ComputeNonbondedUtil3molE, align 8, !tbaa !23
  %27 = load ptr, ptr @_ZN20ComputeNonbondedUtil11table_shortE, align 8, !tbaa !23
  %28 = load double, ptr @_ZN20ComputeNonbondedUtil7scalingE, align 8, !tbaa !19
  %29 = load double, ptr @_ZN20ComputeNonbondedUtil7scale14E, align 8, !tbaa !19
  %30 = load double, ptr @_ZN20ComputeNonbondedUtil8r2_deltaE, align 8, !tbaa !19
  %31 = load i32, ptr @_ZN20ComputeNonbondedUtil12r2_delta_expE, align 4, !tbaa !5
  %32 = shl i32 %31, 6
  %33 = add i32 %32, -65472
  %34 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 5
  %35 = load i32, ptr %34, align 8, !tbaa !5
  %36 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 5, i64 1
  %37 = load i32, ptr %36, align 4, !tbaa !5
  %38 = load ptr, ptr %0, align 8, !tbaa !23
  %39 = getelementptr inbounds [2 x ptr], ptr %0, i64 0, i64 1
  %40 = load ptr, ptr %39, align 8, !tbaa !23
  %41 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 1
  %42 = load ptr, ptr %41, align 8, !tbaa !23
  %43 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 1, i64 1
  %44 = load ptr, ptr %43, align 8, !tbaa !23
  %45 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 9
  %46 = load ptr, ptr %45, align 8, !tbaa !24
  %47 = add nsw i32 %37, 5
  %48 = getelementptr inbounds %class.ResizeArray, ptr %46, i64 0, i32 1
  %49 = load ptr, ptr %48, align 8, !tbaa !25
  %50 = getelementptr inbounds %class.ResizeArrayRaw, ptr %49, i64 0, i32 2
  %51 = load i32, ptr %50, align 8, !tbaa !27
  %52 = icmp slt i32 %51, %47
  br i1 %52, label %53, label %91

53:                                               ; preds = %4
  %54 = getelementptr inbounds %class.ResizeArrayRaw, ptr %49, i64 0, i32 3
  %55 = load i32, ptr %54, align 4, !tbaa !30
  %56 = icmp slt i32 %55, %47
  br i1 %56, label %57, label %91

57:                                               ; preds = %53
  %58 = sitofp i32 %55 to float
  %59 = getelementptr inbounds %class.ResizeArrayRaw, ptr %49, i64 0, i32 5
  %60 = load float, ptr %59, align 4, !tbaa !31
  %61 = fmul float %60, %58
  %62 = fptosi float %61 to i32
  %63 = tail call i32 @llvm.smax.i32(i32 %62, i32 %47)
  %64 = sub nsw i32 %63, %55
  %65 = getelementptr inbounds %class.ResizeArrayRaw, ptr %49, i64 0, i32 6
  %66 = load i32, ptr %65, align 8, !tbaa !32
  %67 = icmp slt i32 %64, %66
  %68 = add nsw i32 %66, %55
  %69 = select i1 %67, i32 %68, i32 %63
  %70 = sext i32 %69 to i64
  %71 = shl nsw i64 %70, 1
  %72 = add nsw i64 %71, 31
  %73 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %72) #9
  %74 = getelementptr inbounds i8, ptr %73, i64 31
  %75 = ptrtoint ptr %74 to i64
  %76 = and i64 %75, 31
  %77 = sub nsw i64 0, %76
  %78 = getelementptr inbounds i8, ptr %74, i64 %77
  %79 = load ptr, ptr %49, align 8, !tbaa !33
  %80 = sext i32 %51 to i64
  %81 = shl nsw i64 %80, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %78, ptr align 1 %79, i64 %81, i1 false)
  %82 = icmp eq i32 %55, 0
  br i1 %82, label %88, label %83

83:                                               ; preds = %57
  %84 = getelementptr inbounds %class.ResizeArrayRaw, ptr %49, i64 0, i32 1
  %85 = load ptr, ptr %84, align 8, !tbaa !34
  %86 = icmp eq ptr %85, null
  br i1 %86, label %88, label %87

87:                                               ; preds = %83
  tail call void @_ZdaPv(ptr noundef nonnull %85) #10
  br label %88

88:                                               ; preds = %87, %83, %57
  %89 = getelementptr inbounds %class.ResizeArrayRaw, ptr %49, i64 0, i32 1
  store ptr %73, ptr %89, align 8, !tbaa !34
  store ptr %78, ptr %49, align 8, !tbaa !33
  store i32 %69, ptr %54, align 4, !tbaa !30
  %90 = load ptr, ptr %48, align 8, !tbaa !25
  br label %91

91:                                               ; preds = %4, %53, %88
  %92 = phi ptr [ %49, %4 ], [ %49, %53 ], [ %90, %88 ]
  store i32 %47, ptr %50, align 8, !tbaa !27
  %93 = load ptr, ptr %92, align 8, !tbaa !33
  %94 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %46, i64 0, i32 1, i32 1
  %95 = load ptr, ptr %94, align 8, !tbaa !35
  %96 = getelementptr inbounds %class.ResizeArrayRaw.23, ptr %95, i64 0, i32 2
  %97 = load i32, ptr %96, align 8, !tbaa !37
  %98 = icmp slt i32 %97, %47
  br i1 %98, label %99, label %137

99:                                               ; preds = %91
  %100 = getelementptr inbounds %class.ResizeArrayRaw.23, ptr %95, i64 0, i32 3
  %101 = load i32, ptr %100, align 4, !tbaa !39
  %102 = icmp slt i32 %101, %47
  br i1 %102, label %103, label %137

103:                                              ; preds = %99
  %104 = sitofp i32 %101 to float
  %105 = getelementptr inbounds %class.ResizeArrayRaw.23, ptr %95, i64 0, i32 5
  %106 = load float, ptr %105, align 4, !tbaa !40
  %107 = fmul float %106, %104
  %108 = fptosi float %107 to i32
  %109 = tail call i32 @llvm.smax.i32(i32 %108, i32 %47)
  %110 = sub nsw i32 %109, %101
  %111 = getelementptr inbounds %class.ResizeArrayRaw.23, ptr %95, i64 0, i32 6
  %112 = load i32, ptr %111, align 8, !tbaa !41
  %113 = icmp slt i32 %110, %112
  %114 = add nsw i32 %112, %101
  %115 = select i1 %113, i32 %114, i32 %109
  %116 = sext i32 %115 to i64
  %117 = shl nsw i64 %116, 3
  %118 = add nsw i64 %117, 31
  %119 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %118) #9
  %120 = getelementptr inbounds i8, ptr %119, i64 31
  %121 = ptrtoint ptr %120 to i64
  %122 = and i64 %121, 31
  %123 = sub nsw i64 0, %122
  %124 = getelementptr inbounds i8, ptr %120, i64 %123
  %125 = load ptr, ptr %95, align 8, !tbaa !42
  %126 = sext i32 %97 to i64
  %127 = shl nsw i64 %126, 3
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %124, ptr align 1 %125, i64 %127, i1 false)
  %128 = icmp eq i32 %101, 0
  br i1 %128, label %134, label %129

129:                                              ; preds = %103
  %130 = getelementptr inbounds %class.ResizeArrayRaw.23, ptr %95, i64 0, i32 1
  %131 = load ptr, ptr %130, align 8, !tbaa !43
  %132 = icmp eq ptr %131, null
  br i1 %132, label %134, label %133

133:                                              ; preds = %129
  tail call void @_ZdaPv(ptr noundef nonnull %131) #10
  br label %134

134:                                              ; preds = %133, %129, %103
  %135 = getelementptr inbounds %class.ResizeArrayRaw.23, ptr %95, i64 0, i32 1
  store ptr %119, ptr %135, align 8, !tbaa !43
  store ptr %124, ptr %95, align 8, !tbaa !42
  store i32 %115, ptr %100, align 4, !tbaa !39
  %136 = load ptr, ptr %94, align 8, !tbaa !35
  br label %137

137:                                              ; preds = %91, %99, %134
  %138 = phi ptr [ %95, %91 ], [ %95, %99 ], [ %136, %134 ]
  store i32 %47, ptr %96, align 8, !tbaa !37
  %139 = load ptr, ptr %138, align 8, !tbaa !42
  %140 = getelementptr inbounds i32, ptr %139, i64 1
  %141 = icmp eq i32 %10, 0
  %142 = icmp ne i32 %12, 0
  %143 = select i1 %141, i1 %142, i1 false
  %144 = select i1 %143, i32 0, i32 %47
  %145 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %46, i64 0, i32 2, i32 1
  %146 = load ptr, ptr %145, align 8, !tbaa !25
  %147 = getelementptr inbounds %class.ResizeArrayRaw, ptr %146, i64 0, i32 2
  %148 = load i32, ptr %147, align 8, !tbaa !27
  %149 = icmp slt i32 %148, %144
  br i1 %149, label %150, label %188

150:                                              ; preds = %137
  %151 = getelementptr inbounds %class.ResizeArrayRaw, ptr %146, i64 0, i32 3
  %152 = load i32, ptr %151, align 4, !tbaa !30
  %153 = icmp slt i32 %152, %144
  br i1 %153, label %154, label %188

154:                                              ; preds = %150
  %155 = sitofp i32 %152 to float
  %156 = getelementptr inbounds %class.ResizeArrayRaw, ptr %146, i64 0, i32 5
  %157 = load float, ptr %156, align 4, !tbaa !31
  %158 = fmul float %157, %155
  %159 = fptosi float %158 to i32
  %160 = tail call i32 @llvm.smax.i32(i32 %159, i32 %144)
  %161 = sub nsw i32 %160, %152
  %162 = getelementptr inbounds %class.ResizeArrayRaw, ptr %146, i64 0, i32 6
  %163 = load i32, ptr %162, align 8, !tbaa !32
  %164 = icmp slt i32 %161, %163
  %165 = add nsw i32 %163, %152
  %166 = select i1 %164, i32 %165, i32 %160
  %167 = sext i32 %166 to i64
  %168 = shl nsw i64 %167, 1
  %169 = add nsw i64 %168, 31
  %170 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %169) #9
  %171 = getelementptr inbounds i8, ptr %170, i64 31
  %172 = ptrtoint ptr %171 to i64
  %173 = and i64 %172, 31
  %174 = sub nsw i64 0, %173
  %175 = getelementptr inbounds i8, ptr %171, i64 %174
  %176 = load ptr, ptr %146, align 8, !tbaa !33
  %177 = sext i32 %148 to i64
  %178 = shl nsw i64 %177, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %175, ptr align 1 %176, i64 %178, i1 false)
  %179 = icmp eq i32 %152, 0
  br i1 %179, label %185, label %180

180:                                              ; preds = %154
  %181 = getelementptr inbounds %class.ResizeArrayRaw, ptr %146, i64 0, i32 1
  %182 = load ptr, ptr %181, align 8, !tbaa !34
  %183 = icmp eq ptr %182, null
  br i1 %183, label %185, label %184

184:                                              ; preds = %180
  tail call void @_ZdaPv(ptr noundef nonnull %182) #10
  br label %185

185:                                              ; preds = %184, %180, %154
  %186 = getelementptr inbounds %class.ResizeArrayRaw, ptr %146, i64 0, i32 1
  store ptr %170, ptr %186, align 8, !tbaa !34
  store ptr %175, ptr %146, align 8, !tbaa !33
  store i32 %166, ptr %151, align 4, !tbaa !30
  %187 = load ptr, ptr %145, align 8, !tbaa !25
  br label %188

188:                                              ; preds = %137, %150, %185
  %189 = phi ptr [ %146, %137 ], [ %146, %150 ], [ %187, %185 ]
  store i32 %144, ptr %147, align 8, !tbaa !27
  %190 = load ptr, ptr %189, align 8, !tbaa !33
  %191 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %46, i64 0, i32 3, i32 1
  %192 = load ptr, ptr %191, align 8, !tbaa !25
  %193 = getelementptr inbounds %class.ResizeArrayRaw, ptr %192, i64 0, i32 2
  %194 = load i32, ptr %193, align 8, !tbaa !27
  %195 = icmp slt i32 %194, %144
  br i1 %195, label %196, label %234

196:                                              ; preds = %188
  %197 = getelementptr inbounds %class.ResizeArrayRaw, ptr %192, i64 0, i32 3
  %198 = load i32, ptr %197, align 4, !tbaa !30
  %199 = icmp slt i32 %198, %144
  br i1 %199, label %200, label %234

200:                                              ; preds = %196
  %201 = sitofp i32 %198 to float
  %202 = getelementptr inbounds %class.ResizeArrayRaw, ptr %192, i64 0, i32 5
  %203 = load float, ptr %202, align 4, !tbaa !31
  %204 = fmul float %203, %201
  %205 = fptosi float %204 to i32
  %206 = tail call i32 @llvm.smax.i32(i32 %205, i32 %144)
  %207 = sub nsw i32 %206, %198
  %208 = getelementptr inbounds %class.ResizeArrayRaw, ptr %192, i64 0, i32 6
  %209 = load i32, ptr %208, align 8, !tbaa !32
  %210 = icmp slt i32 %207, %209
  %211 = add nsw i32 %209, %198
  %212 = select i1 %210, i32 %211, i32 %206
  %213 = sext i32 %212 to i64
  %214 = shl nsw i64 %213, 1
  %215 = add nsw i64 %214, 31
  %216 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %215) #9
  %217 = getelementptr inbounds i8, ptr %216, i64 31
  %218 = ptrtoint ptr %217 to i64
  %219 = and i64 %218, 31
  %220 = sub nsw i64 0, %219
  %221 = getelementptr inbounds i8, ptr %217, i64 %220
  %222 = load ptr, ptr %192, align 8, !tbaa !33
  %223 = sext i32 %194 to i64
  %224 = shl nsw i64 %223, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %221, ptr align 1 %222, i64 %224, i1 false)
  %225 = icmp eq i32 %198, 0
  br i1 %225, label %231, label %226

226:                                              ; preds = %200
  %227 = getelementptr inbounds %class.ResizeArrayRaw, ptr %192, i64 0, i32 1
  %228 = load ptr, ptr %227, align 8, !tbaa !34
  %229 = icmp eq ptr %228, null
  br i1 %229, label %231, label %230

230:                                              ; preds = %226
  tail call void @_ZdaPv(ptr noundef nonnull %228) #10
  br label %231

231:                                              ; preds = %230, %226, %200
  %232 = getelementptr inbounds %class.ResizeArrayRaw, ptr %192, i64 0, i32 1
  store ptr %216, ptr %232, align 8, !tbaa !34
  store ptr %221, ptr %192, align 8, !tbaa !33
  store i32 %212, ptr %197, align 4, !tbaa !30
  %233 = load ptr, ptr %191, align 8, !tbaa !25
  br label %234

234:                                              ; preds = %188, %196, %231
  %235 = phi ptr [ %192, %188 ], [ %192, %196 ], [ %233, %231 ]
  store i32 %144, ptr %193, align 8, !tbaa !27
  %236 = load ptr, ptr %235, align 8, !tbaa !33
  %237 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %46, i64 0, i32 4, i32 1
  %238 = load ptr, ptr %237, align 8, !tbaa !25
  %239 = getelementptr inbounds %class.ResizeArrayRaw, ptr %238, i64 0, i32 2
  %240 = load i32, ptr %239, align 8, !tbaa !27
  %241 = icmp slt i32 %240, %144
  br i1 %241, label %242, label %280

242:                                              ; preds = %234
  %243 = getelementptr inbounds %class.ResizeArrayRaw, ptr %238, i64 0, i32 3
  %244 = load i32, ptr %243, align 4, !tbaa !30
  %245 = icmp slt i32 %244, %144
  br i1 %245, label %246, label %280

246:                                              ; preds = %242
  %247 = sitofp i32 %244 to float
  %248 = getelementptr inbounds %class.ResizeArrayRaw, ptr %238, i64 0, i32 5
  %249 = load float, ptr %248, align 4, !tbaa !31
  %250 = fmul float %249, %247
  %251 = fptosi float %250 to i32
  %252 = tail call i32 @llvm.smax.i32(i32 %251, i32 %144)
  %253 = sub nsw i32 %252, %244
  %254 = getelementptr inbounds %class.ResizeArrayRaw, ptr %238, i64 0, i32 6
  %255 = load i32, ptr %254, align 8, !tbaa !32
  %256 = icmp slt i32 %253, %255
  %257 = add nsw i32 %255, %244
  %258 = select i1 %256, i32 %257, i32 %252
  %259 = sext i32 %258 to i64
  %260 = shl nsw i64 %259, 1
  %261 = add nsw i64 %260, 31
  %262 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %261) #9
  %263 = getelementptr inbounds i8, ptr %262, i64 31
  %264 = ptrtoint ptr %263 to i64
  %265 = and i64 %264, 31
  %266 = sub nsw i64 0, %265
  %267 = getelementptr inbounds i8, ptr %263, i64 %266
  %268 = load ptr, ptr %238, align 8, !tbaa !33
  %269 = sext i32 %240 to i64
  %270 = shl nsw i64 %269, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %267, ptr align 1 %268, i64 %270, i1 false)
  %271 = icmp eq i32 %244, 0
  br i1 %271, label %277, label %272

272:                                              ; preds = %246
  %273 = getelementptr inbounds %class.ResizeArrayRaw, ptr %238, i64 0, i32 1
  %274 = load ptr, ptr %273, align 8, !tbaa !34
  %275 = icmp eq ptr %274, null
  br i1 %275, label %277, label %276

276:                                              ; preds = %272
  tail call void @_ZdaPv(ptr noundef nonnull %274) #10
  br label %277

277:                                              ; preds = %276, %272, %246
  %278 = getelementptr inbounds %class.ResizeArrayRaw, ptr %238, i64 0, i32 1
  store ptr %262, ptr %278, align 8, !tbaa !34
  store ptr %267, ptr %238, align 8, !tbaa !33
  store i32 %258, ptr %243, align 4, !tbaa !30
  %279 = load ptr, ptr %237, align 8, !tbaa !25
  br label %280

280:                                              ; preds = %234, %242, %277
  %281 = phi ptr [ %238, %234 ], [ %238, %242 ], [ %279, %277 ]
  store i32 %144, ptr %239, align 8, !tbaa !27
  %282 = load ptr, ptr %281, align 8, !tbaa !33
  %283 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %46, i64 0, i32 5, i32 1
  %284 = load ptr, ptr %283, align 8, !tbaa !25
  %285 = getelementptr inbounds %class.ResizeArrayRaw, ptr %284, i64 0, i32 2
  %286 = load i32, ptr %285, align 8, !tbaa !27
  %287 = icmp slt i32 %286, %144
  br i1 %287, label %288, label %326

288:                                              ; preds = %280
  %289 = getelementptr inbounds %class.ResizeArrayRaw, ptr %284, i64 0, i32 3
  %290 = load i32, ptr %289, align 4, !tbaa !30
  %291 = icmp slt i32 %290, %144
  br i1 %291, label %292, label %326

292:                                              ; preds = %288
  %293 = sitofp i32 %290 to float
  %294 = getelementptr inbounds %class.ResizeArrayRaw, ptr %284, i64 0, i32 5
  %295 = load float, ptr %294, align 4, !tbaa !31
  %296 = fmul float %295, %293
  %297 = fptosi float %296 to i32
  %298 = tail call i32 @llvm.smax.i32(i32 %297, i32 %144)
  %299 = sub nsw i32 %298, %290
  %300 = getelementptr inbounds %class.ResizeArrayRaw, ptr %284, i64 0, i32 6
  %301 = load i32, ptr %300, align 8, !tbaa !32
  %302 = icmp slt i32 %299, %301
  %303 = add nsw i32 %301, %290
  %304 = select i1 %302, i32 %303, i32 %298
  %305 = sext i32 %304 to i64
  %306 = shl nsw i64 %305, 1
  %307 = add nsw i64 %306, 31
  %308 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %307) #9
  %309 = getelementptr inbounds i8, ptr %308, i64 31
  %310 = ptrtoint ptr %309 to i64
  %311 = and i64 %310, 31
  %312 = sub nsw i64 0, %311
  %313 = getelementptr inbounds i8, ptr %309, i64 %312
  %314 = load ptr, ptr %284, align 8, !tbaa !33
  %315 = sext i32 %286 to i64
  %316 = shl nsw i64 %315, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %313, ptr align 1 %314, i64 %316, i1 false)
  %317 = icmp eq i32 %290, 0
  br i1 %317, label %323, label %318

318:                                              ; preds = %292
  %319 = getelementptr inbounds %class.ResizeArrayRaw, ptr %284, i64 0, i32 1
  %320 = load ptr, ptr %319, align 8, !tbaa !34
  %321 = icmp eq ptr %320, null
  br i1 %321, label %323, label %322

322:                                              ; preds = %318
  tail call void @_ZdaPv(ptr noundef nonnull %320) #10
  br label %323

323:                                              ; preds = %322, %318, %292
  %324 = getelementptr inbounds %class.ResizeArrayRaw, ptr %284, i64 0, i32 1
  store ptr %308, ptr %324, align 8, !tbaa !34
  store ptr %313, ptr %284, align 8, !tbaa !33
  store i32 %304, ptr %289, align 4, !tbaa !30
  %325 = load ptr, ptr %283, align 8, !tbaa !25
  br label %326

326:                                              ; preds = %280, %288, %323
  %327 = phi ptr [ %284, %280 ], [ %284, %288 ], [ %325, %323 ]
  store i32 %144, ptr %285, align 8, !tbaa !27
  %328 = load ptr, ptr %327, align 8, !tbaa !33
  %329 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %46, i64 0, i32 6, i32 1
  %330 = load ptr, ptr %329, align 8, !tbaa !25
  %331 = getelementptr inbounds %class.ResizeArrayRaw, ptr %330, i64 0, i32 2
  %332 = load i32, ptr %331, align 8, !tbaa !27
  %333 = icmp slt i32 %332, %144
  br i1 %333, label %334, label %372

334:                                              ; preds = %326
  %335 = getelementptr inbounds %class.ResizeArrayRaw, ptr %330, i64 0, i32 3
  %336 = load i32, ptr %335, align 4, !tbaa !30
  %337 = icmp slt i32 %336, %144
  br i1 %337, label %338, label %372

338:                                              ; preds = %334
  %339 = sitofp i32 %336 to float
  %340 = getelementptr inbounds %class.ResizeArrayRaw, ptr %330, i64 0, i32 5
  %341 = load float, ptr %340, align 4, !tbaa !31
  %342 = fmul float %341, %339
  %343 = fptosi float %342 to i32
  %344 = tail call i32 @llvm.smax.i32(i32 %343, i32 %144)
  %345 = sub nsw i32 %344, %336
  %346 = getelementptr inbounds %class.ResizeArrayRaw, ptr %330, i64 0, i32 6
  %347 = load i32, ptr %346, align 8, !tbaa !32
  %348 = icmp slt i32 %345, %347
  %349 = add nsw i32 %347, %336
  %350 = select i1 %348, i32 %349, i32 %344
  %351 = sext i32 %350 to i64
  %352 = shl nsw i64 %351, 1
  %353 = add nsw i64 %352, 31
  %354 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %353) #9
  %355 = getelementptr inbounds i8, ptr %354, i64 31
  %356 = ptrtoint ptr %355 to i64
  %357 = and i64 %356, 31
  %358 = sub nsw i64 0, %357
  %359 = getelementptr inbounds i8, ptr %355, i64 %358
  %360 = load ptr, ptr %330, align 8, !tbaa !33
  %361 = sext i32 %332 to i64
  %362 = shl nsw i64 %361, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %359, ptr align 1 %360, i64 %362, i1 false)
  %363 = icmp eq i32 %336, 0
  br i1 %363, label %369, label %364

364:                                              ; preds = %338
  %365 = getelementptr inbounds %class.ResizeArrayRaw, ptr %330, i64 0, i32 1
  %366 = load ptr, ptr %365, align 8, !tbaa !34
  %367 = icmp eq ptr %366, null
  br i1 %367, label %369, label %368

368:                                              ; preds = %364
  tail call void @_ZdaPv(ptr noundef nonnull %366) #10
  br label %369

369:                                              ; preds = %368, %364, %338
  %370 = getelementptr inbounds %class.ResizeArrayRaw, ptr %330, i64 0, i32 1
  store ptr %354, ptr %370, align 8, !tbaa !34
  store ptr %359, ptr %330, align 8, !tbaa !33
  store i32 %350, ptr %335, align 4, !tbaa !30
  %371 = load ptr, ptr %329, align 8, !tbaa !25
  br label %372

372:                                              ; preds = %326, %334, %369
  %373 = phi ptr [ %330, %326 ], [ %330, %334 ], [ %371, %369 ]
  store i32 %144, ptr %331, align 8, !tbaa !27
  %374 = load ptr, ptr %373, align 8, !tbaa !33
  %375 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %46, i64 0, i32 15, i32 1
  %376 = load ptr, ptr %375, align 8, !tbaa !25
  %377 = getelementptr inbounds %class.ResizeArrayRaw, ptr %376, i64 0, i32 2
  %378 = load i32, ptr %377, align 8, !tbaa !27
  %379 = icmp slt i32 %378, %144
  br i1 %379, label %380, label %418

380:                                              ; preds = %372
  %381 = getelementptr inbounds %class.ResizeArrayRaw, ptr %376, i64 0, i32 3
  %382 = load i32, ptr %381, align 4, !tbaa !30
  %383 = icmp slt i32 %382, %144
  br i1 %383, label %384, label %418

384:                                              ; preds = %380
  %385 = sitofp i32 %382 to float
  %386 = getelementptr inbounds %class.ResizeArrayRaw, ptr %376, i64 0, i32 5
  %387 = load float, ptr %386, align 4, !tbaa !31
  %388 = fmul float %387, %385
  %389 = fptosi float %388 to i32
  %390 = tail call i32 @llvm.smax.i32(i32 %389, i32 %144)
  %391 = sub nsw i32 %390, %382
  %392 = getelementptr inbounds %class.ResizeArrayRaw, ptr %376, i64 0, i32 6
  %393 = load i32, ptr %392, align 8, !tbaa !32
  %394 = icmp slt i32 %391, %393
  %395 = add nsw i32 %393, %382
  %396 = select i1 %394, i32 %395, i32 %390
  %397 = sext i32 %396 to i64
  %398 = shl nsw i64 %397, 1
  %399 = add nsw i64 %398, 31
  %400 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %399) #9
  %401 = getelementptr inbounds i8, ptr %400, i64 31
  %402 = ptrtoint ptr %401 to i64
  %403 = and i64 %402, 31
  %404 = sub nsw i64 0, %403
  %405 = getelementptr inbounds i8, ptr %401, i64 %404
  %406 = load ptr, ptr %376, align 8, !tbaa !33
  %407 = sext i32 %378 to i64
  %408 = shl nsw i64 %407, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %405, ptr align 1 %406, i64 %408, i1 false)
  %409 = icmp eq i32 %382, 0
  br i1 %409, label %415, label %410

410:                                              ; preds = %384
  %411 = getelementptr inbounds %class.ResizeArrayRaw, ptr %376, i64 0, i32 1
  %412 = load ptr, ptr %411, align 8, !tbaa !34
  %413 = icmp eq ptr %412, null
  br i1 %413, label %415, label %414

414:                                              ; preds = %410
  tail call void @_ZdaPv(ptr noundef nonnull %412) #10
  br label %415

415:                                              ; preds = %414, %410, %384
  %416 = getelementptr inbounds %class.ResizeArrayRaw, ptr %376, i64 0, i32 1
  store ptr %400, ptr %416, align 8, !tbaa !34
  store ptr %405, ptr %376, align 8, !tbaa !33
  store i32 %396, ptr %381, align 4, !tbaa !30
  %417 = load ptr, ptr %375, align 8, !tbaa !25
  br label %418

418:                                              ; preds = %372, %380, %415
  %419 = phi ptr [ %376, %372 ], [ %376, %380 ], [ %417, %415 ]
  store i32 %144, ptr %377, align 8, !tbaa !27
  %420 = load ptr, ptr %419, align 8, !tbaa !33
  %421 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %46, i64 0, i32 16, i32 1
  %422 = load ptr, ptr %421, align 8, !tbaa !25
  %423 = getelementptr inbounds %class.ResizeArrayRaw, ptr %422, i64 0, i32 2
  %424 = load i32, ptr %423, align 8, !tbaa !27
  %425 = icmp slt i32 %424, %144
  br i1 %425, label %426, label %464

426:                                              ; preds = %418
  %427 = getelementptr inbounds %class.ResizeArrayRaw, ptr %422, i64 0, i32 3
  %428 = load i32, ptr %427, align 4, !tbaa !30
  %429 = icmp slt i32 %428, %144
  br i1 %429, label %430, label %464

430:                                              ; preds = %426
  %431 = sitofp i32 %428 to float
  %432 = getelementptr inbounds %class.ResizeArrayRaw, ptr %422, i64 0, i32 5
  %433 = load float, ptr %432, align 4, !tbaa !31
  %434 = fmul float %433, %431
  %435 = fptosi float %434 to i32
  %436 = tail call i32 @llvm.smax.i32(i32 %435, i32 %144)
  %437 = sub nsw i32 %436, %428
  %438 = getelementptr inbounds %class.ResizeArrayRaw, ptr %422, i64 0, i32 6
  %439 = load i32, ptr %438, align 8, !tbaa !32
  %440 = icmp slt i32 %437, %439
  %441 = add nsw i32 %439, %428
  %442 = select i1 %440, i32 %441, i32 %436
  %443 = sext i32 %442 to i64
  %444 = shl nsw i64 %443, 1
  %445 = add nsw i64 %444, 31
  %446 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %445) #9
  %447 = getelementptr inbounds i8, ptr %446, i64 31
  %448 = ptrtoint ptr %447 to i64
  %449 = and i64 %448, 31
  %450 = sub nsw i64 0, %449
  %451 = getelementptr inbounds i8, ptr %447, i64 %450
  %452 = load ptr, ptr %422, align 8, !tbaa !33
  %453 = sext i32 %424 to i64
  %454 = shl nsw i64 %453, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %451, ptr align 1 %452, i64 %454, i1 false)
  %455 = icmp eq i32 %428, 0
  br i1 %455, label %461, label %456

456:                                              ; preds = %430
  %457 = getelementptr inbounds %class.ResizeArrayRaw, ptr %422, i64 0, i32 1
  %458 = load ptr, ptr %457, align 8, !tbaa !34
  %459 = icmp eq ptr %458, null
  br i1 %459, label %461, label %460

460:                                              ; preds = %456
  tail call void @_ZdaPv(ptr noundef nonnull %458) #10
  br label %461

461:                                              ; preds = %460, %456, %430
  %462 = getelementptr inbounds %class.ResizeArrayRaw, ptr %422, i64 0, i32 1
  store ptr %446, ptr %462, align 8, !tbaa !34
  store ptr %451, ptr %422, align 8, !tbaa !33
  store i32 %442, ptr %427, align 4, !tbaa !30
  %463 = load ptr, ptr %421, align 8, !tbaa !25
  br label %464

464:                                              ; preds = %418, %426, %461
  %465 = phi ptr [ %422, %418 ], [ %422, %426 ], [ %463, %461 ]
  store i32 %144, ptr %423, align 8, !tbaa !27
  %466 = load ptr, ptr %465, align 8, !tbaa !33
  br i1 %143, label %608, label %467

467:                                              ; preds = %464
  %468 = icmp sgt i32 %37, 0
  br i1 %468, label %469, label %599

469:                                              ; preds = %467
  %470 = zext i32 %37 to i64
  %471 = and i64 %470, 1
  %472 = icmp eq i32 %37, 1
  br i1 %472, label %505, label %473

473:                                              ; preds = %469
  %474 = and i64 %470, 4294967294
  br label %475

475:                                              ; preds = %500, %473
  %476 = phi i64 [ 0, %473 ], [ %502, %500 ]
  %477 = phi i32 [ 0, %473 ], [ %501, %500 ]
  %478 = phi i64 [ 0, %473 ], [ %503, %500 ]
  %479 = getelementptr inbounds %struct.CompAtom, ptr %40, i64 %476, i32 4
  %480 = load i8, ptr %479, align 1
  %481 = and i8 %480, 7
  %482 = icmp eq i8 %481, 0
  br i1 %482, label %488, label %483

483:                                              ; preds = %475
  %484 = trunc i64 %476 to i16
  %485 = add nsw i32 %477, 1
  %486 = sext i32 %477 to i64
  %487 = getelementptr inbounds i16, ptr %190, i64 %486
  store i16 %484, ptr %487, align 2, !tbaa !44
  br label %488

488:                                              ; preds = %475, %483
  %489 = phi i32 [ %485, %483 ], [ %477, %475 ]
  %490 = or i64 %476, 1
  %491 = getelementptr inbounds %struct.CompAtom, ptr %40, i64 %490, i32 4
  %492 = load i8, ptr %491, align 1
  %493 = and i8 %492, 7
  %494 = icmp eq i8 %493, 0
  br i1 %494, label %500, label %495

495:                                              ; preds = %488
  %496 = trunc i64 %490 to i16
  %497 = add nsw i32 %489, 1
  %498 = sext i32 %489 to i64
  %499 = getelementptr inbounds i16, ptr %190, i64 %498
  store i16 %496, ptr %499, align 2, !tbaa !44
  br label %500

500:                                              ; preds = %495, %488
  %501 = phi i32 [ %497, %495 ], [ %489, %488 ]
  %502 = add nuw nsw i64 %476, 2
  %503 = add i64 %478, 2
  %504 = icmp eq i64 %503, %474
  br i1 %504, label %505, label %475

505:                                              ; preds = %500, %469
  %506 = phi i32 [ undef, %469 ], [ %501, %500 ]
  %507 = phi i64 [ 0, %469 ], [ %502, %500 ]
  %508 = phi i32 [ 0, %469 ], [ %501, %500 ]
  %509 = icmp eq i64 %471, 0
  br i1 %509, label %520, label %510

510:                                              ; preds = %505
  %511 = getelementptr inbounds %struct.CompAtom, ptr %40, i64 %507, i32 4
  %512 = load i8, ptr %511, align 1
  %513 = and i8 %512, 7
  %514 = icmp eq i8 %513, 0
  br i1 %514, label %520, label %515

515:                                              ; preds = %510
  %516 = trunc i64 %507 to i16
  %517 = add nsw i32 %508, 1
  %518 = sext i32 %508 to i64
  %519 = getelementptr inbounds i16, ptr %190, i64 %518
  store i16 %516, ptr %519, align 2, !tbaa !44
  br label %520

520:                                              ; preds = %510, %515, %505
  %521 = phi i32 [ %506, %505 ], [ %517, %515 ], [ %508, %510 ]
  %522 = icmp eq i32 %521, 0
  br i1 %522, label %530, label %523

523:                                              ; preds = %520
  %524 = add nsw i32 %521, -1
  %525 = sext i32 %524 to i64
  %526 = getelementptr inbounds i16, ptr %190, i64 %525
  %527 = load i16, ptr %526, align 2, !tbaa !44
  %528 = sext i32 %521 to i64
  %529 = getelementptr inbounds i16, ptr %190, i64 %528
  store i16 %527, ptr %529, align 2, !tbaa !44
  br label %530

530:                                              ; preds = %523, %520
  %531 = load i32, ptr @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4, !tbaa !5
  %532 = icmp ne i32 %531, 0
  %533 = icmp sgt i32 %521, 0
  %534 = and i1 %532, %533
  br i1 %534, label %535, label %599

535:                                              ; preds = %530
  %536 = zext i32 %521 to i64
  %537 = and i64 %536, 1
  %538 = icmp eq i32 %521, 1
  br i1 %538, label %573, label %539

539:                                              ; preds = %535
  %540 = and i64 %536, 4294967294
  br label %541

541:                                              ; preds = %568, %539
  %542 = phi i64 [ 0, %539 ], [ %570, %568 ]
  %543 = phi i32 [ 0, %539 ], [ %569, %568 ]
  %544 = phi i64 [ 0, %539 ], [ %571, %568 ]
  %545 = getelementptr inbounds i16, ptr %190, i64 %542
  %546 = load i16, ptr %545, align 2, !tbaa !44
  %547 = zext i16 %546 to i64
  %548 = getelementptr inbounds %struct.CompAtomExt, ptr %44, i64 %547
  %549 = load i32, ptr %548, align 4
  %550 = icmp sgt i32 %549, -1
  br i1 %550, label %551, label %555

551:                                              ; preds = %541
  %552 = add nsw i32 %543, 1
  %553 = sext i32 %543 to i64
  %554 = getelementptr inbounds i16, ptr %236, i64 %553
  store i16 %546, ptr %554, align 2, !tbaa !44
  br label %555

555:                                              ; preds = %541, %551
  %556 = phi i32 [ %543, %541 ], [ %552, %551 ]
  %557 = or i64 %542, 1
  %558 = getelementptr inbounds i16, ptr %190, i64 %557
  %559 = load i16, ptr %558, align 2, !tbaa !44
  %560 = zext i16 %559 to i64
  %561 = getelementptr inbounds %struct.CompAtomExt, ptr %44, i64 %560
  %562 = load i32, ptr %561, align 4
  %563 = icmp sgt i32 %562, -1
  br i1 %563, label %564, label %568

564:                                              ; preds = %555
  %565 = add nsw i32 %556, 1
  %566 = sext i32 %556 to i64
  %567 = getelementptr inbounds i16, ptr %236, i64 %566
  store i16 %559, ptr %567, align 2, !tbaa !44
  br label %568

568:                                              ; preds = %564, %555
  %569 = phi i32 [ %556, %555 ], [ %565, %564 ]
  %570 = add nuw nsw i64 %542, 2
  %571 = add i64 %544, 2
  %572 = icmp eq i64 %571, %540
  br i1 %572, label %573, label %541

573:                                              ; preds = %568, %535
  %574 = phi i32 [ undef, %535 ], [ %569, %568 ]
  %575 = phi i64 [ 0, %535 ], [ %570, %568 ]
  %576 = phi i32 [ 0, %535 ], [ %569, %568 ]
  %577 = icmp eq i64 %537, 0
  br i1 %577, label %589, label %578

578:                                              ; preds = %573
  %579 = getelementptr inbounds i16, ptr %190, i64 %575
  %580 = load i16, ptr %579, align 2, !tbaa !44
  %581 = zext i16 %580 to i64
  %582 = getelementptr inbounds %struct.CompAtomExt, ptr %44, i64 %581
  %583 = load i32, ptr %582, align 4
  %584 = icmp sgt i32 %583, -1
  br i1 %584, label %585, label %589

585:                                              ; preds = %578
  %586 = add nsw i32 %576, 1
  %587 = sext i32 %576 to i64
  %588 = getelementptr inbounds i16, ptr %236, i64 %587
  store i16 %580, ptr %588, align 2, !tbaa !44
  br label %589

589:                                              ; preds = %578, %585, %573
  %590 = phi i32 [ %574, %573 ], [ %576, %578 ], [ %586, %585 ]
  %591 = icmp eq i32 %590, 0
  br i1 %591, label %599, label %592

592:                                              ; preds = %589
  %593 = add nsw i32 %590, -1
  %594 = sext i32 %593 to i64
  %595 = getelementptr inbounds i16, ptr %236, i64 %594
  %596 = load i16, ptr %595, align 2, !tbaa !44
  %597 = sext i32 %590 to i64
  %598 = getelementptr inbounds i16, ptr %236, i64 %597
  store i16 %596, ptr %598, align 2, !tbaa !44
  br label %599

599:                                              ; preds = %467, %530, %592, %589
  %600 = phi i32 [ %521, %592 ], [ %521, %589 ], [ %521, %530 ], [ 0, %467 ]
  %601 = phi i32 [ %590, %592 ], [ 0, %589 ], [ 0, %530 ], [ 0, %467 ]
  %602 = load i32, ptr %13, align 8, !tbaa !17
  %603 = add nsw i32 %602, 1
  store i32 %603, ptr %13, align 8, !tbaa !17
  %604 = trunc i32 %35 to i16
  %605 = load ptr, ptr %8, align 8, !tbaa !46
  %606 = sext i32 %602 to i64
  %607 = getelementptr inbounds i16, ptr %605, i64 %606
  store i16 %604, ptr %607, align 2, !tbaa !44
  br label %618

608:                                              ; preds = %464
  %609 = load ptr, ptr %8, align 8, !tbaa !46
  %610 = load i32, ptr %13, align 8, !tbaa !17
  %611 = add nsw i32 %610, 1
  store i32 %611, ptr %13, align 8, !tbaa !17
  %612 = sext i32 %610 to i64
  %613 = getelementptr inbounds i16, ptr %609, i64 %612
  %614 = load i16, ptr %613, align 2, !tbaa !44
  %615 = zext i16 %614 to i32
  %616 = icmp eq i32 %35, %615
  br i1 %616, label %618, label %617

617:                                              ; preds = %608
  tail call void @_Z8NAMD_bugPKc(ptr noundef nonnull @.str)
  br label %618

618:                                              ; preds = %608, %617, %599
  %619 = phi i32 [ 0, %617 ], [ 0, %608 ], [ %600, %599 ]
  %620 = phi i32 [ 0, %617 ], [ 0, %608 ], [ %601, %599 ]
  %621 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %46, i64 0, i32 17, i32 1
  %622 = load ptr, ptr %621, align 8, !tbaa !172
  tail call void @_ZN14ResizeArrayRawI6VectorE6resizeEi(ptr noundef nonnull align 8 dereferenceable(36) %622, i32 noundef %35)
  %623 = load ptr, ptr %621, align 8, !tbaa !172
  %624 = load ptr, ptr %623, align 8, !tbaa !174
  %625 = sext i32 %35 to i64
  %626 = mul nsw i64 %625, 24
  tail call void @llvm.memset.p0.i64(ptr align 1 %624, i8 0, i64 %626, i1 false)
  %627 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 18
  %628 = load i32, ptr %627, align 4, !tbaa !48
  %629 = add nsw i32 %628, -1
  %630 = add nsw i32 %35, -1
  %631 = icmp sgt i32 %35, 1
  br i1 %631, label %632, label %2188

632:                                              ; preds = %618
  %633 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 16
  %634 = load i32, ptr %633, align 4, !tbaa !47
  %635 = getelementptr inbounds %class.Molecule, ptr %26, i64 0, i32 1
  %636 = getelementptr inbounds %class.Molecule, ptr %26, i64 0, i32 4
  %637 = getelementptr inbounds %class.Molecule, ptr %26, i64 0, i32 2
  %638 = getelementptr inbounds %class.Molecule, ptr %26, i64 0, i32 3
  %639 = ptrtoint ptr %420 to i64
  %640 = add nsw i32 %37, 10
  %641 = getelementptr inbounds %class.Pairlists, ptr %8, i64 0, i32 2
  %642 = ptrtoint ptr %466 to i64
  %643 = ptrtoint ptr %328 to i64
  %644 = ptrtoint ptr %374 to i64
  %645 = getelementptr inbounds %class.LJTable, ptr %25, i64 0, i32 1
  %646 = getelementptr inbounds %class.LJTable, ptr %25, i64 0, i32 2
  %647 = fneg double %28
  %648 = fadd double %29, -1.000000e+00
  %649 = fadd double %648, 1.000000e+00
  %650 = sext i32 %619 to i64
  %651 = sext i32 %620 to i64
  %652 = insertelement <2 x double> poison, double %23, i64 0
  %653 = shufflevector <2 x double> %652, <2 x double> poison, <2 x i32> zeroinitializer
  br label %654

654:                                              ; preds = %632, %2173
  %655 = phi i32 [ 0, %632 ], [ %2184, %2173 ]
  %656 = phi i32 [ 0, %632 ], [ %2186, %2173 ]
  %657 = phi ptr [ null, %632 ], [ %2182, %2173 ]
  %658 = phi ptr [ null, %632 ], [ %2181, %2173 ]
  %659 = phi ptr [ null, %632 ], [ %2180, %2173 ]
  %660 = phi i32 [ 0, %632 ], [ %2179, %2173 ]
  %661 = phi i32 [ 0, %632 ], [ %2178, %2173 ]
  %662 = phi i32 [ 0, %632 ], [ %2177, %2173 ]
  %663 = phi i32 [ 0, %632 ], [ %2176, %2173 ]
  %664 = phi i32 [ 0, %632 ], [ %2175, %2173 ]
  %665 = phi i32 [ %634, %632 ], [ %2174, %2173 ]
  %666 = phi <2 x double> [ zeroinitializer, %632 ], [ %2185, %2173 ]
  %667 = sext i32 %656 to i64
  %668 = getelementptr inbounds %struct.CompAtom, ptr %38, i64 %667
  %669 = getelementptr inbounds %struct.CompAtomExt, ptr %42, i64 %667
  %670 = getelementptr inbounds %struct.CompAtom, ptr %38, i64 %667, i32 4
  %671 = load i8, ptr %670, align 1
  %672 = lshr i8 %671, 3
  %673 = and i8 %672, 15
  %674 = zext i8 %673 to i32
  %675 = icmp eq i8 %673, 0
  br i1 %675, label %682, label %676

676:                                              ; preds = %654
  %677 = icmp eq i32 %665, 0
  br i1 %677, label %682, label %678

678:                                              ; preds = %676
  %679 = add nsw i32 %665, -1
  %680 = add nsw i32 %656, -1
  %681 = add i32 %680, %674
  br label %2173

682:                                              ; preds = %676, %654
  %683 = phi i32 [ %665, %654 ], [ %629, %676 ]
  %684 = load <2 x double>, ptr %668, align 8, !tbaa !19
  %685 = fadd <2 x double> %15, %684
  %686 = getelementptr inbounds %class.Vector, ptr %668, i64 0, i32 2
  %687 = load double, ptr %686, align 8, !tbaa !49
  %688 = fadd double %17, %687
  %689 = add nsw i32 %656, %674
  %690 = select i1 %675, i32 %660, i32 %689
  br i1 %143, label %1857, label %691

691:                                              ; preds = %682
  %692 = load i32, ptr %669, align 4
  %693 = shl i32 %692, 2
  %694 = ashr exact i32 %693, 2
  %695 = load ptr, ptr %635, align 8, !tbaa !51
  %696 = sext i32 %694 to i64
  %697 = getelementptr inbounds %class.ExclusionCheck, ptr %695, i64 %696
  %698 = load i32, ptr %697, align 8, !tbaa !53
  %699 = getelementptr inbounds %class.ExclusionCheck, ptr %695, i64 %696, i32 1
  %700 = load i32, ptr %699, align 4, !tbaa !55
  %701 = getelementptr inbounds %class.ExclusionCheck, ptr %695, i64 %696, i32 2
  %702 = load ptr, ptr %701, align 8, !tbaa !56
  %703 = icmp eq ptr %702, null
  br i1 %703, label %708, label %704

704:                                              ; preds = %691
  %705 = sext i32 %698 to i64
  %706 = sub nsw i64 0, %705
  %707 = getelementptr inbounds i8, ptr %702, i64 %706
  br label %934

708:                                              ; preds = %691
  %709 = icmp eq ptr %657, null
  br i1 %709, label %797, label %710

710:                                              ; preds = %708
  %711 = load i32, ptr %658, align 4, !tbaa !5
  %712 = icmp slt i32 %711, 1
  br i1 %712, label %760, label %713

713:                                              ; preds = %710
  %714 = add nuw i32 %711, 1
  %715 = zext i32 %714 to i64
  %716 = add nsw i64 %715, -1
  %717 = add nsw i64 %715, -2
  %718 = and i64 %716, 3
  %719 = icmp ult i64 %717, 3
  br i1 %719, label %747, label %720

720:                                              ; preds = %713
  %721 = and i64 %716, -4
  br label %722

722:                                              ; preds = %722, %720
  %723 = phi i64 [ 1, %720 ], [ %744, %722 ]
  %724 = phi i64 [ 0, %720 ], [ %745, %722 ]
  %725 = getelementptr inbounds i32, ptr %658, i64 %723
  %726 = load i32, ptr %725, align 4, !tbaa !5
  %727 = sext i32 %726 to i64
  %728 = getelementptr inbounds i8, ptr %657, i64 %727
  store i8 0, ptr %728, align 1, !tbaa !57
  %729 = add nuw nsw i64 %723, 1
  %730 = getelementptr inbounds i32, ptr %658, i64 %729
  %731 = load i32, ptr %730, align 4, !tbaa !5
  %732 = sext i32 %731 to i64
  %733 = getelementptr inbounds i8, ptr %657, i64 %732
  store i8 0, ptr %733, align 1, !tbaa !57
  %734 = add nuw nsw i64 %723, 2
  %735 = getelementptr inbounds i32, ptr %658, i64 %734
  %736 = load i32, ptr %735, align 4, !tbaa !5
  %737 = sext i32 %736 to i64
  %738 = getelementptr inbounds i8, ptr %657, i64 %737
  store i8 0, ptr %738, align 1, !tbaa !57
  %739 = add nuw nsw i64 %723, 3
  %740 = getelementptr inbounds i32, ptr %658, i64 %739
  %741 = load i32, ptr %740, align 4, !tbaa !5
  %742 = sext i32 %741 to i64
  %743 = getelementptr inbounds i8, ptr %657, i64 %742
  store i8 0, ptr %743, align 1, !tbaa !57
  %744 = add nuw nsw i64 %723, 4
  %745 = add i64 %724, 4
  %746 = icmp eq i64 %745, %721
  br i1 %746, label %747, label %722

747:                                              ; preds = %722, %713
  %748 = phi i64 [ 1, %713 ], [ %744, %722 ]
  %749 = icmp eq i64 %718, 0
  br i1 %749, label %760, label %750

750:                                              ; preds = %747, %750
  %751 = phi i64 [ %757, %750 ], [ %748, %747 ]
  %752 = phi i64 [ %758, %750 ], [ 0, %747 ]
  %753 = getelementptr inbounds i32, ptr %658, i64 %751
  %754 = load i32, ptr %753, align 4, !tbaa !5
  %755 = sext i32 %754 to i64
  %756 = getelementptr inbounds i8, ptr %657, i64 %755
  store i8 0, ptr %756, align 1, !tbaa !57
  %757 = add nuw nsw i64 %751, 1
  %758 = add i64 %752, 1
  %759 = icmp eq i64 %758, %718
  br i1 %759, label %760, label %750, !llvm.loop !192

760:                                              ; preds = %747, %750, %710
  %761 = load i32, ptr %659, align 4, !tbaa !5
  %762 = icmp slt i32 %761, 1
  br i1 %762, label %817, label %763

763:                                              ; preds = %760
  %764 = add nuw i32 %761, 1
  %765 = zext i32 %764 to i64
  %766 = add nsw i64 %765, -1
  %767 = add nsw i64 %765, -2
  %768 = and i64 %766, 3
  %769 = icmp ult i64 %767, 3
  br i1 %769, label %804, label %770

770:                                              ; preds = %763
  %771 = and i64 %766, -4
  br label %772

772:                                              ; preds = %772, %770
  %773 = phi i64 [ 1, %770 ], [ %794, %772 ]
  %774 = phi i64 [ 0, %770 ], [ %795, %772 ]
  %775 = getelementptr inbounds i32, ptr %659, i64 %773
  %776 = load i32, ptr %775, align 4, !tbaa !5
  %777 = sext i32 %776 to i64
  %778 = getelementptr inbounds i8, ptr %657, i64 %777
  store i8 0, ptr %778, align 1, !tbaa !57
  %779 = add nuw nsw i64 %773, 1
  %780 = getelementptr inbounds i32, ptr %659, i64 %779
  %781 = load i32, ptr %780, align 4, !tbaa !5
  %782 = sext i32 %781 to i64
  %783 = getelementptr inbounds i8, ptr %657, i64 %782
  store i8 0, ptr %783, align 1, !tbaa !57
  %784 = add nuw nsw i64 %773, 2
  %785 = getelementptr inbounds i32, ptr %659, i64 %784
  %786 = load i32, ptr %785, align 4, !tbaa !5
  %787 = sext i32 %786 to i64
  %788 = getelementptr inbounds i8, ptr %657, i64 %787
  store i8 0, ptr %788, align 1, !tbaa !57
  %789 = add nuw nsw i64 %773, 3
  %790 = getelementptr inbounds i32, ptr %659, i64 %789
  %791 = load i32, ptr %790, align 4, !tbaa !5
  %792 = sext i32 %791 to i64
  %793 = getelementptr inbounds i8, ptr %657, i64 %792
  store i8 0, ptr %793, align 1, !tbaa !57
  %794 = add nuw nsw i64 %773, 4
  %795 = add i64 %774, 4
  %796 = icmp eq i64 %795, %771
  br i1 %796, label %804, label %772

797:                                              ; preds = %708
  %798 = load i32, ptr %636, align 8, !tbaa !60
  %799 = tail call i32 @llvm.smax.i32(i32 %798, i32 -1)
  %800 = sext i32 %799 to i64
  %801 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %800) #9
  %802 = load i32, ptr %636, align 8, !tbaa !60
  %803 = sext i32 %802 to i64
  tail call void @llvm.memset.p0.i64(ptr nonnull align 1 %801, i8 0, i64 %803, i1 false)
  br label %817

804:                                              ; preds = %772, %763
  %805 = phi i64 [ 1, %763 ], [ %794, %772 ]
  %806 = icmp eq i64 %768, 0
  br i1 %806, label %817, label %807

807:                                              ; preds = %804, %807
  %808 = phi i64 [ %814, %807 ], [ %805, %804 ]
  %809 = phi i64 [ %815, %807 ], [ 0, %804 ]
  %810 = getelementptr inbounds i32, ptr %659, i64 %808
  %811 = load i32, ptr %810, align 4, !tbaa !5
  %812 = sext i32 %811 to i64
  %813 = getelementptr inbounds i8, ptr %657, i64 %812
  store i8 0, ptr %813, align 1, !tbaa !57
  %814 = add nuw nsw i64 %808, 1
  %815 = add i64 %809, 1
  %816 = icmp eq i64 %815, %768
  br i1 %816, label %817, label %807, !llvm.loop !193

817:                                              ; preds = %804, %807, %760, %797
  %818 = phi ptr [ %801, %797 ], [ %657, %760 ], [ %657, %807 ], [ %657, %804 ]
  %819 = load i32, ptr %669, align 4
  %820 = shl i32 %819, 2
  %821 = ashr exact i32 %820, 2
  %822 = load ptr, ptr %637, align 8, !tbaa !62
  %823 = sext i32 %821 to i64
  %824 = getelementptr inbounds ptr, ptr %822, i64 %823
  %825 = load ptr, ptr %824, align 8, !tbaa !23
  %826 = load i32, ptr %825, align 4, !tbaa !5
  %827 = icmp slt i32 %826, 1
  br i1 %827, label %880, label %828

828:                                              ; preds = %817
  %829 = add nuw i32 %826, 1
  %830 = zext i32 %829 to i64
  %831 = add nsw i64 %830, -1
  %832 = add nsw i64 %830, -2
  %833 = and i64 %831, 3
  %834 = icmp ult i64 %832, 3
  br i1 %834, label %862, label %835

835:                                              ; preds = %828
  %836 = and i64 %831, -4
  br label %837

837:                                              ; preds = %837, %835
  %838 = phi i64 [ 1, %835 ], [ %859, %837 ]
  %839 = phi i64 [ 0, %835 ], [ %860, %837 ]
  %840 = getelementptr inbounds i32, ptr %825, i64 %838
  %841 = load i32, ptr %840, align 4, !tbaa !5
  %842 = sext i32 %841 to i64
  %843 = getelementptr inbounds i8, ptr %818, i64 %842
  store i8 1, ptr %843, align 1, !tbaa !57
  %844 = add nuw nsw i64 %838, 1
  %845 = getelementptr inbounds i32, ptr %825, i64 %844
  %846 = load i32, ptr %845, align 4, !tbaa !5
  %847 = sext i32 %846 to i64
  %848 = getelementptr inbounds i8, ptr %818, i64 %847
  store i8 1, ptr %848, align 1, !tbaa !57
  %849 = add nuw nsw i64 %838, 2
  %850 = getelementptr inbounds i32, ptr %825, i64 %849
  %851 = load i32, ptr %850, align 4, !tbaa !5
  %852 = sext i32 %851 to i64
  %853 = getelementptr inbounds i8, ptr %818, i64 %852
  store i8 1, ptr %853, align 1, !tbaa !57
  %854 = add nuw nsw i64 %838, 3
  %855 = getelementptr inbounds i32, ptr %825, i64 %854
  %856 = load i32, ptr %855, align 4, !tbaa !5
  %857 = sext i32 %856 to i64
  %858 = getelementptr inbounds i8, ptr %818, i64 %857
  store i8 1, ptr %858, align 1, !tbaa !57
  %859 = add nuw nsw i64 %838, 4
  %860 = add i64 %839, 4
  %861 = icmp eq i64 %860, %836
  br i1 %861, label %862, label %837

862:                                              ; preds = %837, %828
  %863 = phi i64 [ 1, %828 ], [ %859, %837 ]
  %864 = icmp eq i64 %833, 0
  br i1 %864, label %875, label %865

865:                                              ; preds = %862, %865
  %866 = phi i64 [ %872, %865 ], [ %863, %862 ]
  %867 = phi i64 [ %873, %865 ], [ 0, %862 ]
  %868 = getelementptr inbounds i32, ptr %825, i64 %866
  %869 = load i32, ptr %868, align 4, !tbaa !5
  %870 = sext i32 %869 to i64
  %871 = getelementptr inbounds i8, ptr %818, i64 %870
  store i8 1, ptr %871, align 1, !tbaa !57
  %872 = add nuw nsw i64 %866, 1
  %873 = add i64 %867, 1
  %874 = icmp eq i64 %873, %833
  br i1 %874, label %875, label %865, !llvm.loop !194

875:                                              ; preds = %865, %862
  %876 = load i32, ptr %669, align 4
  %877 = shl i32 %876, 2
  %878 = ashr exact i32 %877, 2
  %879 = sext i32 %878 to i64
  br label %880

880:                                              ; preds = %875, %817
  %881 = phi i64 [ %879, %875 ], [ %823, %817 ]
  %882 = load ptr, ptr %638, align 8, !tbaa !64
  %883 = getelementptr inbounds ptr, ptr %882, i64 %881
  %884 = load ptr, ptr %883, align 8, !tbaa !23
  %885 = load i32, ptr %884, align 4, !tbaa !5
  %886 = icmp slt i32 %885, 1
  br i1 %886, label %934, label %887

887:                                              ; preds = %880
  %888 = add nuw i32 %885, 1
  %889 = zext i32 %888 to i64
  %890 = add nsw i64 %889, -1
  %891 = add nsw i64 %889, -2
  %892 = and i64 %890, 3
  %893 = icmp ult i64 %891, 3
  br i1 %893, label %921, label %894

894:                                              ; preds = %887
  %895 = and i64 %890, -4
  br label %896

896:                                              ; preds = %896, %894
  %897 = phi i64 [ 1, %894 ], [ %918, %896 ]
  %898 = phi i64 [ 0, %894 ], [ %919, %896 ]
  %899 = getelementptr inbounds i32, ptr %884, i64 %897
  %900 = load i32, ptr %899, align 4, !tbaa !5
  %901 = sext i32 %900 to i64
  %902 = getelementptr inbounds i8, ptr %818, i64 %901
  store i8 2, ptr %902, align 1, !tbaa !57
  %903 = add nuw nsw i64 %897, 1
  %904 = getelementptr inbounds i32, ptr %884, i64 %903
  %905 = load i32, ptr %904, align 4, !tbaa !5
  %906 = sext i32 %905 to i64
  %907 = getelementptr inbounds i8, ptr %818, i64 %906
  store i8 2, ptr %907, align 1, !tbaa !57
  %908 = add nuw nsw i64 %897, 2
  %909 = getelementptr inbounds i32, ptr %884, i64 %908
  %910 = load i32, ptr %909, align 4, !tbaa !5
  %911 = sext i32 %910 to i64
  %912 = getelementptr inbounds i8, ptr %818, i64 %911
  store i8 2, ptr %912, align 1, !tbaa !57
  %913 = add nuw nsw i64 %897, 3
  %914 = getelementptr inbounds i32, ptr %884, i64 %913
  %915 = load i32, ptr %914, align 4, !tbaa !5
  %916 = sext i32 %915 to i64
  %917 = getelementptr inbounds i8, ptr %818, i64 %916
  store i8 2, ptr %917, align 1, !tbaa !57
  %918 = add nuw nsw i64 %897, 4
  %919 = add i64 %898, 4
  %920 = icmp eq i64 %919, %895
  br i1 %920, label %921, label %896

921:                                              ; preds = %896, %887
  %922 = phi i64 [ 1, %887 ], [ %918, %896 ]
  %923 = icmp eq i64 %892, 0
  br i1 %923, label %934, label %924

924:                                              ; preds = %921, %924
  %925 = phi i64 [ %931, %924 ], [ %922, %921 ]
  %926 = phi i64 [ %932, %924 ], [ 0, %921 ]
  %927 = getelementptr inbounds i32, ptr %884, i64 %925
  %928 = load i32, ptr %927, align 4, !tbaa !5
  %929 = sext i32 %928 to i64
  %930 = getelementptr inbounds i8, ptr %818, i64 %929
  store i8 2, ptr %930, align 1, !tbaa !57
  %931 = add nuw nsw i64 %925, 1
  %932 = add i64 %926, 1
  %933 = icmp eq i64 %932, %892
  br i1 %933, label %934, label %924, !llvm.loop !195

934:                                              ; preds = %921, %924, %880, %704
  %935 = phi ptr [ %707, %704 ], [ %818, %880 ], [ %818, %924 ], [ %818, %921 ]
  %936 = phi ptr [ %659, %704 ], [ %884, %880 ], [ %884, %924 ], [ %884, %921 ]
  %937 = phi ptr [ %658, %704 ], [ %825, %880 ], [ %825, %924 ], [ %825, %921 ]
  %938 = phi ptr [ %657, %704 ], [ %818, %880 ], [ %818, %924 ], [ %818, %921 ]
  %939 = load i8, ptr %670, align 1
  %940 = and i8 %939, 7
  %941 = icmp eq i8 %940, 0
  br i1 %941, label %1235, label %942

942:                                              ; preds = %934
  %943 = load i32, ptr @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4, !tbaa !5
  %944 = icmp eq i32 %943, 0
  br i1 %944, label %948, label %945

945:                                              ; preds = %942
  %946 = load i32, ptr %669, align 4
  %947 = icmp slt i32 %946, 0
  br label %948

948:                                              ; preds = %945, %942
  %949 = phi i1 [ false, %942 ], [ %947, %945 ]
  %950 = and i8 %939, 120
  %951 = icmp eq i8 %950, 0
  br i1 %951, label %983, label %952

952:                                              ; preds = %948
  %953 = icmp slt i32 %661, %619
  br i1 %953, label %954, label %967

954:                                              ; preds = %952
  %955 = sext i32 %661 to i64
  br label %956

956:                                              ; preds = %954, %962
  %957 = phi i64 [ %955, %954 ], [ %963, %962 ]
  %958 = getelementptr inbounds i16, ptr %190, i64 %957
  %959 = load i16, ptr %958, align 2, !tbaa !44
  %960 = zext i16 %959 to i32
  %961 = icmp sgt i32 %690, %960
  br i1 %961, label %962, label %965

962:                                              ; preds = %956
  %963 = add nsw i64 %957, 1
  %964 = icmp eq i64 %963, %650
  br i1 %964, label %967, label %956

965:                                              ; preds = %956
  %966 = trunc i64 %957 to i32
  br label %967

967:                                              ; preds = %962, %965, %952
  %968 = phi i32 [ %661, %952 ], [ %966, %965 ], [ %619, %962 ]
  %969 = icmp slt i32 %662, %620
  br i1 %969, label %970, label %983

970:                                              ; preds = %967
  %971 = sext i32 %662 to i64
  br label %972

972:                                              ; preds = %970, %978
  %973 = phi i64 [ %971, %970 ], [ %979, %978 ]
  %974 = getelementptr inbounds i16, ptr %236, i64 %973
  %975 = load i16, ptr %974, align 2, !tbaa !44
  %976 = zext i16 %975 to i32
  %977 = icmp sgt i32 %690, %976
  br i1 %977, label %978, label %981

978:                                              ; preds = %972
  %979 = add nsw i64 %973, 1
  %980 = icmp eq i64 %979, %651
  br i1 %980, label %983, label %972

981:                                              ; preds = %972
  %982 = trunc i64 %973 to i32
  br label %983

983:                                              ; preds = %978, %981, %967, %948
  %984 = phi i32 [ %662, %948 ], [ %662, %967 ], [ %982, %981 ], [ %620, %978 ]
  %985 = phi i32 [ %661, %948 ], [ %968, %967 ], [ %968, %981 ], [ %968, %978 ]
  %986 = add nsw i32 %656, 1
  %987 = icmp slt i32 %986, %690
  br i1 %987, label %988, label %1053

988:                                              ; preds = %983
  %989 = xor i32 %656, -1
  %990 = add i32 %690, %989
  %991 = zext i32 %990 to i64
  %992 = icmp ult i32 %990, 8
  br i1 %992, label %1042, label %993

993:                                              ; preds = %988
  %994 = icmp ult i32 %990, 64
  br i1 %994, label %1023, label %995

995:                                              ; preds = %993
  %996 = and i64 %991, 4294967232
  %997 = trunc i32 %986 to i16
  %998 = insertelement <16 x i16> poison, i16 %997, i64 0
  %999 = shufflevector <16 x i16> %998, <16 x i16> poison, <16 x i32> zeroinitializer
  %1000 = add <16 x i16> %999, <i16 0, i16 1, i16 2, i16 3, i16 4, i16 5, i16 6, i16 7, i16 8, i16 9, i16 10, i16 11, i16 12, i16 13, i16 14, i16 15>
  %1001 = trunc i64 %996 to i32
  %1002 = add i32 %986, %1001
  br label %1003

1003:                                             ; preds = %1003, %995
  %1004 = phi i64 [ 0, %995 ], [ %1013, %1003 ]
  %1005 = phi <16 x i16> [ %1000, %995 ], [ %1014, %1003 ]
  %1006 = add <16 x i16> %1005, <i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16>
  %1007 = add <16 x i16> %1005, <i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32>
  %1008 = add <16 x i16> %1005, <i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48>
  %1009 = getelementptr inbounds i16, ptr %420, i64 %1004
  store <16 x i16> %1005, ptr %1009, align 2, !tbaa !44
  %1010 = getelementptr inbounds i16, ptr %1009, i64 16
  store <16 x i16> %1006, ptr %1010, align 2, !tbaa !44
  %1011 = getelementptr inbounds i16, ptr %1009, i64 32
  store <16 x i16> %1007, ptr %1011, align 2, !tbaa !44
  %1012 = getelementptr inbounds i16, ptr %1009, i64 48
  store <16 x i16> %1008, ptr %1012, align 2, !tbaa !44
  %1013 = add nuw i64 %1004, 64
  %1014 = add <16 x i16> %1005, <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>
  %1015 = icmp eq i64 %1013, %996
  br i1 %1015, label %1016, label %1003, !llvm.loop !196

1016:                                             ; preds = %1003
  %1017 = icmp eq i64 %996, %991
  br i1 %1017, label %1053, label %1018

1018:                                             ; preds = %1016
  %1019 = trunc i64 %996 to i32
  %1020 = add i32 %986, %1019
  %1021 = and i64 %991, 56
  %1022 = icmp eq i64 %1021, 0
  br i1 %1022, label %1042, label %1023

1023:                                             ; preds = %993, %1018
  %1024 = phi i32 [ %1002, %1018 ], [ %986, %993 ]
  %1025 = phi i64 [ %996, %1018 ], [ 0, %993 ]
  %1026 = and i64 %991, 4294967288
  %1027 = trunc i64 %1026 to i32
  %1028 = add i32 %986, %1027
  %1029 = trunc i32 %1024 to i16
  %1030 = insertelement <8 x i16> poison, i16 %1029, i64 0
  %1031 = shufflevector <8 x i16> %1030, <8 x i16> poison, <8 x i32> zeroinitializer
  %1032 = add <8 x i16> %1031, <i16 0, i16 1, i16 2, i16 3, i16 4, i16 5, i16 6, i16 7>
  br label %1033

1033:                                             ; preds = %1033, %1023
  %1034 = phi i64 [ %1025, %1023 ], [ %1037, %1033 ]
  %1035 = phi <8 x i16> [ %1032, %1023 ], [ %1038, %1033 ]
  %1036 = getelementptr inbounds i16, ptr %420, i64 %1034
  store <8 x i16> %1035, ptr %1036, align 2, !tbaa !44
  %1037 = add nuw i64 %1034, 8
  %1038 = add <8 x i16> %1035, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %1039 = icmp eq i64 %1037, %1026
  br i1 %1039, label %1040, label %1033, !llvm.loop !197

1040:                                             ; preds = %1033
  %1041 = icmp eq i64 %1026, %991
  br i1 %1041, label %1053, label %1042

1042:                                             ; preds = %988, %1018, %1040
  %1043 = phi i64 [ 0, %988 ], [ %996, %1018 ], [ %1026, %1040 ]
  %1044 = phi i32 [ %986, %988 ], [ %1020, %1018 ], [ %1028, %1040 ]
  br label %1045

1045:                                             ; preds = %1042, %1045
  %1046 = phi i64 [ %1049, %1045 ], [ %1043, %1042 ]
  %1047 = phi i32 [ %1051, %1045 ], [ %1044, %1042 ]
  %1048 = trunc i32 %1047 to i16
  %1049 = add nuw nsw i64 %1046, 1
  %1050 = getelementptr inbounds i16, ptr %420, i64 %1046
  store i16 %1048, ptr %1050, align 2, !tbaa !44
  %1051 = add nsw i32 %1047, 1
  %1052 = icmp eq i64 %1049, %991
  br i1 %1052, label %1053, label %1045, !llvm.loop !198

1053:                                             ; preds = %1045, %1016, %1040, %983
  %1054 = phi i32 [ 0, %983 ], [ %990, %1040 ], [ %990, %1016 ], [ %990, %1045 ]
  %1055 = zext i32 %1054 to i64
  %1056 = getelementptr inbounds i16, ptr %420, i64 %1055
  %1057 = select i1 %949, ptr %236, ptr %190
  %1058 = select i1 %949, i32 %984, i32 %985
  %1059 = select i1 %949, i32 %620, i32 %619
  %1060 = icmp slt i32 %1058, %1059
  br i1 %1060, label %1061, label %1220

1061:                                             ; preds = %1053
  %1062 = sub nsw i32 %1059, %1058
  %1063 = icmp sgt i32 %1062, 6
  br i1 %1063, label %1064, label %1157

1064:                                             ; preds = %1061
  %1065 = add nsw i32 %1059, -2
  %1066 = add nsw i32 %1058, 2
  %1067 = icmp slt i32 %1066, %1065
  br i1 %1067, label %1068, label %1157

1068:                                             ; preds = %1064
  %1069 = add nsw i32 %1058, 1
  %1070 = sext i32 %1069 to i64
  %1071 = getelementptr inbounds i16, ptr %1057, i64 %1070
  %1072 = load i16, ptr %1071, align 2, !tbaa !44
  %1073 = zext i16 %1072 to i64
  %1074 = getelementptr inbounds %struct.CompAtom, ptr %40, i64 %1073
  %1075 = getelementptr inbounds %class.Vector, ptr %1074, i64 0, i32 2
  %1076 = load double, ptr %1075, align 8, !tbaa !49
  %1077 = sext i32 %1058 to i64
  %1078 = getelementptr inbounds i16, ptr %1057, i64 %1077
  %1079 = load i16, ptr %1078, align 2, !tbaa !44
  %1080 = zext i16 %1079 to i64
  %1081 = getelementptr inbounds %struct.CompAtom, ptr %40, i64 %1080
  %1082 = getelementptr inbounds %class.Vector, ptr %1081, i64 0, i32 2
  %1083 = load double, ptr %1082, align 8, !tbaa !49
  %1084 = getelementptr inbounds %class.Vector, ptr %1074, i64 0, i32 1
  %1085 = load double, ptr %1084, align 8, !tbaa !66
  %1086 = getelementptr inbounds %class.Vector, ptr %1081, i64 0, i32 1
  %1087 = load double, ptr %1086, align 8, !tbaa !66
  %1088 = load double, ptr %1074, align 8, !tbaa !67
  %1089 = load double, ptr %1081, align 8, !tbaa !67
  %1090 = sext i32 %1066 to i64
  %1091 = sext i32 %1065 to i64
  %1092 = insertelement <2 x double> poison, double %1076, i64 0
  %1093 = insertelement <2 x double> %1092, double %1083, i64 1
  %1094 = insertelement <2 x double> poison, double %1085, i64 0
  %1095 = insertelement <2 x double> %1094, double %1087, i64 1
  %1096 = insertelement <2 x double> poison, double %1088, i64 0
  %1097 = insertelement <2 x double> %1096, double %1089, i64 1
  %1098 = insertelement <2 x double> poison, double %688, i64 0
  %1099 = shufflevector <2 x double> %1098, <2 x double> poison, <2 x i32> zeroinitializer
  %1100 = shufflevector <2 x double> %685, <2 x double> poison, <2 x i32> <i32 1, i32 1>
  %1101 = shufflevector <2 x double> %685, <2 x double> poison, <2 x i32> zeroinitializer
  br label %1102

1102:                                             ; preds = %1068, %1102
  %1103 = phi i64 [ %1090, %1068 ], [ %1148, %1102 ]
  %1104 = phi i32 [ %1058, %1068 ], [ %1150, %1102 ]
  %1105 = phi i32 [ 0, %1068 ], [ %1147, %1102 ]
  %1106 = phi i16 [ %1079, %1068 ], [ %1113, %1102 ]
  %1107 = phi i16 [ %1072, %1068 ], [ %1117, %1102 ]
  %1108 = phi <2 x double> [ %1093, %1068 ], [ %1152, %1102 ]
  %1109 = phi <2 x double> [ %1095, %1068 ], [ %1154, %1102 ]
  %1110 = phi <2 x double> [ %1097, %1068 ], [ %1156, %1102 ]
  %1111 = fsub <2 x double> %1099, %1108
  %1112 = getelementptr inbounds i16, ptr %1057, i64 %1103
  %1113 = load i16, ptr %1112, align 2, !tbaa !44
  %1114 = add nsw i32 %1104, 3
  %1115 = sext i32 %1114 to i64
  %1116 = getelementptr inbounds i16, ptr %1057, i64 %1115
  %1117 = load i16, ptr %1116, align 2, !tbaa !44
  %1118 = zext i16 %1113 to i64
  %1119 = getelementptr inbounds %struct.CompAtom, ptr %40, i64 %1118
  %1120 = load double, ptr %1119, align 8, !tbaa !67
  %1121 = zext i16 %1117 to i64
  %1122 = getelementptr inbounds %struct.CompAtom, ptr %40, i64 %1121
  %1123 = load double, ptr %1122, align 8, !tbaa !67
  %1124 = getelementptr inbounds %class.Vector, ptr %1119, i64 0, i32 1
  %1125 = load double, ptr %1124, align 8, !tbaa !66
  %1126 = getelementptr inbounds %class.Vector, ptr %1122, i64 0, i32 1
  %1127 = load double, ptr %1126, align 8, !tbaa !66
  %1128 = getelementptr inbounds %class.Vector, ptr %1119, i64 0, i32 2
  %1129 = load double, ptr %1128, align 8, !tbaa !49
  %1130 = getelementptr inbounds %class.Vector, ptr %1122, i64 0, i32 2
  %1131 = load double, ptr %1130, align 8, !tbaa !49
  %1132 = fsub <2 x double> %1101, %1110
  %1133 = fmul <2 x double> %1132, %1132
  %1134 = fsub <2 x double> %1100, %1109
  %1135 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %1134, <2 x double> %1134, <2 x double> %1133)
  %1136 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %1111, <2 x double> %1111, <2 x double> %1135)
  %1137 = fcmp olt <2 x double> %1136, %653
  %1138 = zext i32 %1105 to i64
  %1139 = getelementptr inbounds i16, ptr %282, i64 %1138
  store i16 %1106, ptr %1139, align 2, !tbaa !44
  %1140 = extractelement <2 x i1> %1137, i64 1
  %1141 = zext i1 %1140 to i32
  %1142 = add nuw nsw i32 %1105, %1141
  %1143 = zext i32 %1142 to i64
  %1144 = getelementptr inbounds i16, ptr %282, i64 %1143
  store i16 %1107, ptr %1144, align 2, !tbaa !44
  %1145 = extractelement <2 x i1> %1137, i64 0
  %1146 = zext i1 %1145 to i32
  %1147 = add i32 %1142, %1146
  %1148 = add nsw i64 %1103, 2
  %1149 = icmp slt i64 %1148, %1091
  %1150 = trunc i64 %1103 to i32
  %1151 = insertelement <2 x double> poison, double %1131, i64 0
  %1152 = insertelement <2 x double> %1151, double %1129, i64 1
  %1153 = insertelement <2 x double> poison, double %1127, i64 0
  %1154 = insertelement <2 x double> %1153, double %1125, i64 1
  %1155 = insertelement <2 x double> poison, double %1123, i64 0
  %1156 = insertelement <2 x double> %1155, double %1120, i64 1
  br i1 %1149, label %1102, label %1157

1157:                                             ; preds = %1102, %1064, %1061
  %1158 = phi i32 [ 0, %1061 ], [ 0, %1064 ], [ %1147, %1102 ]
  %1159 = phi i32 [ %1058, %1061 ], [ %1058, %1064 ], [ %1150, %1102 ]
  %1160 = icmp slt i32 %1159, %1059
  br i1 %1160, label %1161, label %1166

1161:                                             ; preds = %1157
  %1162 = sext i32 %1159 to i64
  %1163 = sext i32 %1059 to i64
  %1164 = extractelement <2 x double> %685, i64 0
  %1165 = extractelement <2 x double> %685, i64 1
  br label %1171

1166:                                             ; preds = %1194, %1157
  %1167 = phi i32 [ %1158, %1157 ], [ %1195, %1194 ]
  %1168 = icmp sgt i32 %1167, 0
  br i1 %1168, label %1169, label %1220

1169:                                             ; preds = %1166
  %1170 = zext i32 %1167 to i64
  br label %1198

1171:                                             ; preds = %1161, %1194
  %1172 = phi i64 [ %1162, %1161 ], [ %1196, %1194 ]
  %1173 = phi i32 [ %1158, %1161 ], [ %1195, %1194 ]
  %1174 = getelementptr inbounds i16, ptr %1057, i64 %1172
  %1175 = load i16, ptr %1174, align 2, !tbaa !44
  %1176 = zext i16 %1175 to i64
  %1177 = getelementptr inbounds %struct.CompAtom, ptr %40, i64 %1176
  %1178 = load double, ptr %1177, align 8, !tbaa !67
  %1179 = getelementptr inbounds %class.Vector, ptr %1177, i64 0, i32 1
  %1180 = load double, ptr %1179, align 8, !tbaa !66
  %1181 = getelementptr inbounds %class.Vector, ptr %1177, i64 0, i32 2
  %1182 = load double, ptr %1181, align 8, !tbaa !49
  %1183 = fsub double %1164, %1178
  %1184 = fmul double %1183, %1183
  %1185 = fsub double %1165, %1180
  %1186 = tail call double @llvm.fmuladd.f64(double %1185, double %1185, double %1184)
  %1187 = fsub double %688, %1182
  %1188 = tail call double @llvm.fmuladd.f64(double %1187, double %1187, double %1186)
  %1189 = fcmp ugt double %1188, %23
  br i1 %1189, label %1194, label %1190

1190:                                             ; preds = %1171
  %1191 = add nsw i32 %1173, 1
  %1192 = sext i32 %1173 to i64
  %1193 = getelementptr inbounds i16, ptr %282, i64 %1192
  store i16 %1175, ptr %1193, align 2, !tbaa !44
  br label %1194

1194:                                             ; preds = %1190, %1171
  %1195 = phi i32 [ %1191, %1190 ], [ %1173, %1171 ]
  %1196 = add nsw i64 %1172, 1
  %1197 = icmp eq i64 %1196, %1163
  br i1 %1197, label %1166, label %1171

1198:                                             ; preds = %1169, %1215
  %1199 = phi i64 [ 0, %1169 ], [ %1218, %1215 ]
  %1200 = phi ptr [ %1056, %1169 ], [ %1217, %1215 ]
  %1201 = getelementptr inbounds i16, ptr %282, i64 %1199
  %1202 = load i16, ptr %1201, align 2, !tbaa !44
  %1203 = zext i16 %1202 to i64
  %1204 = getelementptr inbounds %struct.CompAtom, ptr %40, i64 %1203, i32 4
  %1205 = load i8, ptr %1204, align 1
  %1206 = and i8 %1205, 7
  store i16 %1202, ptr %1200, align 2, !tbaa !44
  %1207 = getelementptr inbounds i16, ptr %1200, i64 1
  %1208 = insertelement <2 x i16> poison, i16 %1202, i64 0
  %1209 = shufflevector <2 x i16> %1208, <2 x i16> poison, <2 x i32> zeroinitializer
  %1210 = add <2 x i16> %1209, <i16 1, i16 2>
  store <2 x i16> %1210, ptr %1207, align 2, !tbaa !44
  %1211 = icmp ult i8 %1206, 4
  br i1 %1211, label %1215, label %1212

1212:                                             ; preds = %1198
  %1213 = add <2 x i16> %1209, <i16 3, i16 4>
  %1214 = getelementptr inbounds i16, ptr %1200, i64 3
  store <2 x i16> %1213, ptr %1214, align 2, !tbaa !44
  br label %1215

1215:                                             ; preds = %1212, %1198
  %1216 = zext i8 %1206 to i64
  %1217 = getelementptr inbounds i16, ptr %1200, i64 %1216
  %1218 = add nuw nsw i64 %1199, 1
  %1219 = icmp eq i64 %1218, %1170
  br i1 %1219, label %1220, label %1198

1220:                                             ; preds = %1215, %1166, %1053
  %1221 = phi ptr [ %1056, %1053 ], [ %1056, %1166 ], [ %1217, %1215 ]
  %1222 = ptrtoint ptr %1221 to i64
  %1223 = sub i64 %1222, %639
  %1224 = lshr exact i64 %1223, 1
  %1225 = trunc i64 %1224 to i32
  %1226 = icmp eq i32 %1225, 0
  br i1 %1226, label %1238, label %1227

1227:                                             ; preds = %1220
  %1228 = shl i64 %1223, 31
  %1229 = add i64 %1228, -4294967296
  %1230 = ashr i64 %1229, 32
  %1231 = getelementptr inbounds i16, ptr %420, i64 %1230
  %1232 = load i16, ptr %1231, align 2, !tbaa !44
  %1233 = ashr i64 %1228, 32
  %1234 = getelementptr inbounds i16, ptr %420, i64 %1233
  store i16 %1232, ptr %1234, align 2, !tbaa !44
  br label %1238

1235:                                             ; preds = %934
  %1236 = add nsw i32 %664, 1
  %1237 = load i32, ptr @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4, !tbaa !5
  br label %1238

1238:                                             ; preds = %1220, %1227, %1235
  %1239 = phi i32 [ %1237, %1235 ], [ %943, %1227 ], [ %943, %1220 ]
  %1240 = phi i32 [ %1236, %1235 ], [ 0, %1227 ], [ 0, %1220 ]
  %1241 = phi i32 [ %663, %1235 ], [ %1225, %1227 ], [ 0, %1220 ]
  %1242 = phi i32 [ %662, %1235 ], [ %984, %1227 ], [ %984, %1220 ]
  %1243 = phi i32 [ %661, %1235 ], [ %985, %1227 ], [ %985, %1220 ]
  %1244 = icmp eq i32 %1239, 0
  br i1 %1244, label %1249, label %1245

1245:                                             ; preds = %1238
  %1246 = load i32, ptr %669, align 4
  %1247 = and i32 %1246, 1073741824
  %1248 = icmp ne i32 %1247, 0
  br label %1249

1249:                                             ; preds = %1245, %1238
  %1250 = phi i1 [ false, %1238 ], [ %1248, %1245 ]
  %1251 = load i32, ptr %13, align 8, !tbaa !17
  %1252 = add nsw i32 %640, %1251
  %1253 = load i32, ptr %641, align 4, !tbaa !68
  %1254 = icmp sgt i32 %1253, %1252
  br i1 %1254, label %1270, label %1255

1255:                                             ; preds = %1249, %1255
  %1256 = phi i32 [ %1258, %1255 ], [ %1253, %1249 ]
  %1257 = ashr i32 %1256, 1
  %1258 = add nsw i32 %1257, %1256
  %1259 = icmp sgt i32 %1258, %1252
  br i1 %1259, label %1260, label %1255

1260:                                             ; preds = %1255
  %1261 = sext i32 %1258 to i64
  %1262 = icmp slt i32 %1258, 0
  %1263 = shl nsw i64 %1261, 1
  %1264 = select i1 %1262, i64 -1, i64 %1263
  %1265 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %1264) #9
  %1266 = load ptr, ptr %8, align 8, !tbaa !46
  %1267 = sext i32 %1251 to i64
  %1268 = shl nsw i64 %1267, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 2 %1265, ptr align 2 %1266, i64 %1268, i1 false)
  %1269 = icmp eq ptr %1266, null
  br i1 %1269, label %1274, label %1272

1270:                                             ; preds = %1249
  %1271 = load ptr, ptr %8, align 8, !tbaa !46
  br label %1276

1272:                                             ; preds = %1260
  tail call void @_ZdaPv(ptr noundef nonnull %1266) #10
  %1273 = load i32, ptr %13, align 8, !tbaa !17
  br label %1274

1274:                                             ; preds = %1272, %1260
  %1275 = phi i32 [ %1273, %1272 ], [ %1251, %1260 ]
  store ptr %1265, ptr %8, align 8, !tbaa !46
  store i32 %1258, ptr %641, align 4, !tbaa !68
  br label %1276

1276:                                             ; preds = %1270, %1274
  %1277 = phi i32 [ %1251, %1270 ], [ %1275, %1274 ]
  %1278 = phi ptr [ %1271, %1270 ], [ %1265, %1274 ]
  %1279 = ptrtoint ptr %1278 to i64
  %1280 = add nsw i32 %1277, 1
  %1281 = sext i32 %1280 to i64
  %1282 = getelementptr inbounds i16, ptr %1278, i64 %1281
  %1283 = icmp slt i32 %1240, %1241
  br i1 %1250, label %1284, label %1332

1284:                                             ; preds = %1276
  br i1 %1283, label %1285, label %1503

1285:                                             ; preds = %1284
  %1286 = sext i32 %1240 to i64
  %1287 = sext i32 %1241 to i64
  %1288 = extractelement <2 x double> %685, i64 0
  %1289 = extractelement <2 x double> %685, i64 1
  br label %1290

1290:                                             ; preds = %1285, %1327
  %1291 = phi i64 [ %1286, %1285 ], [ %1330, %1327 ]
  %1292 = phi ptr [ %466, %1285 ], [ %1329, %1327 ]
  %1293 = phi ptr [ %1282, %1285 ], [ %1328, %1327 ]
  %1294 = getelementptr inbounds i16, ptr %420, i64 %1291
  %1295 = load i16, ptr %1294, align 2, !tbaa !44
  %1296 = zext i16 %1295 to i64
  %1297 = getelementptr inbounds %struct.CompAtomExt, ptr %44, i64 %1296
  %1298 = load i32, ptr %1297, align 4
  %1299 = and i32 %1298, 1073741824
  %1300 = icmp eq i32 %1299, 0
  br i1 %1300, label %1301, label %1327

1301:                                             ; preds = %1290
  %1302 = getelementptr inbounds %struct.CompAtom, ptr %40, i64 %1296
  %1303 = getelementptr inbounds %class.Vector, ptr %1302, i64 0, i32 2
  %1304 = load double, ptr %1303, align 8, !tbaa !49
  %1305 = fsub double %688, %1304
  %1306 = getelementptr inbounds %class.Vector, ptr %1302, i64 0, i32 1
  %1307 = load double, ptr %1306, align 8, !tbaa !66
  %1308 = fsub double %1289, %1307
  %1309 = load double, ptr %1302, align 8, !tbaa !67
  %1310 = fsub double %1288, %1309
  %1311 = fmul double %1310, %1310
  %1312 = tail call double @llvm.fmuladd.f64(double %1308, double %1308, double %1311)
  %1313 = tail call double @llvm.fmuladd.f64(double %1305, double %1305, double %1312)
  %1314 = fcmp ugt double %1313, %20
  br i1 %1314, label %1327, label %1315

1315:                                             ; preds = %1301
  %1316 = shl i32 %1298, 2
  %1317 = ashr exact i32 %1316, 2
  %1318 = icmp slt i32 %1317, %698
  %1319 = icmp sgt i32 %1317, %700
  %1320 = select i1 %1318, i1 true, i1 %1319
  %1321 = select i1 %1320, ptr %1293, ptr %1292
  %1322 = zext i1 %1320 to i64
  %1323 = getelementptr inbounds i16, ptr %1293, i64 %1322
  %1324 = xor i1 %1320, true
  %1325 = zext i1 %1324 to i64
  %1326 = getelementptr inbounds i16, ptr %1292, i64 %1325
  store i16 %1295, ptr %1321, align 2, !tbaa !44
  br label %1327

1327:                                             ; preds = %1315, %1301, %1290
  %1328 = phi ptr [ %1293, %1290 ], [ %1293, %1301 ], [ %1323, %1315 ]
  %1329 = phi ptr [ %1292, %1290 ], [ %1292, %1301 ], [ %1326, %1315 ]
  %1330 = add nsw i64 %1291, 1
  %1331 = icmp eq i64 %1330, %1287
  br i1 %1331, label %1503, label %1290

1332:                                             ; preds = %1276
  br i1 %1283, label %1333, label %1503

1333:                                             ; preds = %1332
  %1334 = sub nsw i32 %1241, %1240
  %1335 = icmp sgt i32 %1334, 6
  br i1 %1335, label %1336, label %1454

1336:                                             ; preds = %1333
  %1337 = add nsw i32 %1241, -2
  %1338 = add nsw i32 %1240, 2
  %1339 = icmp slt i32 %1338, %1337
  br i1 %1339, label %1340, label %1454

1340:                                             ; preds = %1336
  %1341 = sext i32 %1240 to i64
  %1342 = getelementptr inbounds i16, ptr %420, i64 %1341
  %1343 = load i16, ptr %1342, align 2, !tbaa !44
  %1344 = zext i16 %1343 to i64
  %1345 = getelementptr inbounds %struct.CompAtomExt, ptr %44, i64 %1344
  %1346 = load i32, ptr %1345, align 4
  %1347 = add nsw i32 %1240, 1
  %1348 = sext i32 %1347 to i64
  %1349 = getelementptr inbounds i16, ptr %420, i64 %1348
  %1350 = load i16, ptr %1349, align 2, !tbaa !44
  %1351 = zext i16 %1350 to i64
  %1352 = getelementptr inbounds %struct.CompAtom, ptr %40, i64 %1351
  %1353 = getelementptr inbounds %class.Vector, ptr %1352, i64 0, i32 2
  %1354 = load double, ptr %1353, align 8, !tbaa !49
  %1355 = getelementptr inbounds %struct.CompAtom, ptr %40, i64 %1344
  %1356 = getelementptr inbounds %class.Vector, ptr %1355, i64 0, i32 2
  %1357 = load double, ptr %1356, align 8, !tbaa !49
  %1358 = getelementptr inbounds %class.Vector, ptr %1352, i64 0, i32 1
  %1359 = load double, ptr %1358, align 8, !tbaa !66
  %1360 = getelementptr inbounds %class.Vector, ptr %1355, i64 0, i32 1
  %1361 = load double, ptr %1360, align 8, !tbaa !66
  %1362 = load double, ptr %1352, align 8, !tbaa !67
  %1363 = load double, ptr %1355, align 8, !tbaa !67
  %1364 = sext i32 %1338 to i64
  %1365 = sext i32 %1337 to i64
  %1366 = extractelement <2 x double> %685, i64 0
  %1367 = extractelement <2 x double> %685, i64 1
  br label %1368

1368:                                             ; preds = %1340, %1448
  %1369 = phi i64 [ %1364, %1340 ], [ %1451, %1448 ]
  %1370 = phi i64 [ %1351, %1340 ], [ %1408, %1448 ]
  %1371 = phi i32 [ %1346, %1340 ], [ %1436, %1448 ]
  %1372 = phi ptr [ %466, %1340 ], [ %1450, %1448 ]
  %1373 = phi ptr [ %1282, %1340 ], [ %1449, %1448 ]
  %1374 = phi i32 [ %1240, %1340 ], [ %1453, %1448 ]
  %1375 = phi i16 [ %1343, %1340 ], [ %1400, %1448 ]
  %1376 = phi i16 [ %1350, %1340 ], [ %1404, %1448 ]
  %1377 = phi double [ %1363, %1340 ], [ %1407, %1448 ]
  %1378 = phi double [ %1362, %1340 ], [ %1410, %1448 ]
  %1379 = phi double [ %1361, %1340 ], [ %1412, %1448 ]
  %1380 = phi double [ %1359, %1340 ], [ %1414, %1448 ]
  %1381 = phi double [ %1357, %1340 ], [ %1416, %1448 ]
  %1382 = phi double [ %1354, %1340 ], [ %1418, %1448 ]
  %1383 = getelementptr inbounds %struct.CompAtomExt, ptr %44, i64 %1370
  %1384 = load i32, ptr %1383, align 4
  %1385 = shl i32 %1384, 2
  %1386 = ashr exact i32 %1385, 2
  %1387 = fsub double %1366, %1377
  %1388 = fsub double %1366, %1378
  %1389 = fmul double %1387, %1387
  %1390 = fmul double %1388, %1388
  %1391 = fsub double %1367, %1379
  %1392 = fsub double %1367, %1380
  %1393 = tail call double @llvm.fmuladd.f64(double %1391, double %1391, double %1389)
  %1394 = tail call double @llvm.fmuladd.f64(double %1392, double %1392, double %1390)
  %1395 = fsub double %688, %1381
  %1396 = fsub double %688, %1382
  %1397 = tail call double @llvm.fmuladd.f64(double %1395, double %1395, double %1393)
  %1398 = tail call double @llvm.fmuladd.f64(double %1396, double %1396, double %1394)
  %1399 = getelementptr inbounds i16, ptr %420, i64 %1369
  %1400 = load i16, ptr %1399, align 2, !tbaa !44
  %1401 = add nsw i32 %1374, 3
  %1402 = sext i32 %1401 to i64
  %1403 = getelementptr inbounds i16, ptr %420, i64 %1402
  %1404 = load i16, ptr %1403, align 2, !tbaa !44
  %1405 = zext i16 %1400 to i64
  %1406 = getelementptr inbounds %struct.CompAtom, ptr %40, i64 %1405
  %1407 = load double, ptr %1406, align 8, !tbaa !67
  %1408 = zext i16 %1404 to i64
  %1409 = getelementptr inbounds %struct.CompAtom, ptr %40, i64 %1408
  %1410 = load double, ptr %1409, align 8, !tbaa !67
  %1411 = getelementptr inbounds %class.Vector, ptr %1406, i64 0, i32 1
  %1412 = load double, ptr %1411, align 8, !tbaa !66
  %1413 = getelementptr inbounds %class.Vector, ptr %1409, i64 0, i32 1
  %1414 = load double, ptr %1413, align 8, !tbaa !66
  %1415 = getelementptr inbounds %class.Vector, ptr %1406, i64 0, i32 2
  %1416 = load double, ptr %1415, align 8, !tbaa !49
  %1417 = getelementptr inbounds %class.Vector, ptr %1409, i64 0, i32 2
  %1418 = load double, ptr %1417, align 8, !tbaa !49
  %1419 = fcmp ugt double %1397, %20
  br i1 %1419, label %1432, label %1420

1420:                                             ; preds = %1368
  %1421 = shl i32 %1371, 2
  %1422 = ashr exact i32 %1421, 2
  %1423 = icmp slt i32 %1422, %698
  %1424 = icmp sgt i32 %1422, %700
  %1425 = select i1 %1423, i1 true, i1 %1424
  %1426 = select i1 %1425, ptr %1373, ptr %1372
  %1427 = zext i1 %1425 to i64
  %1428 = getelementptr inbounds i16, ptr %1373, i64 %1427
  %1429 = xor i1 %1425, true
  %1430 = zext i1 %1429 to i64
  %1431 = getelementptr inbounds i16, ptr %1372, i64 %1430
  store i16 %1375, ptr %1426, align 2, !tbaa !44
  br label %1432

1432:                                             ; preds = %1420, %1368
  %1433 = phi ptr [ %1373, %1368 ], [ %1428, %1420 ]
  %1434 = phi ptr [ %1372, %1368 ], [ %1431, %1420 ]
  %1435 = getelementptr inbounds %struct.CompAtomExt, ptr %44, i64 %1405
  %1436 = load i32, ptr %1435, align 4
  %1437 = fcmp ugt double %1398, %20
  br i1 %1437, label %1448, label %1438

1438:                                             ; preds = %1432
  %1439 = icmp slt i32 %1386, %698
  %1440 = icmp sgt i32 %1386, %700
  %1441 = select i1 %1439, i1 true, i1 %1440
  %1442 = select i1 %1441, ptr %1433, ptr %1434
  %1443 = zext i1 %1441 to i64
  %1444 = getelementptr inbounds i16, ptr %1433, i64 %1443
  %1445 = xor i1 %1441, true
  %1446 = zext i1 %1445 to i64
  %1447 = getelementptr inbounds i16, ptr %1434, i64 %1446
  store i16 %1376, ptr %1442, align 2, !tbaa !44
  br label %1448

1448:                                             ; preds = %1438, %1432
  %1449 = phi ptr [ %1433, %1432 ], [ %1444, %1438 ]
  %1450 = phi ptr [ %1434, %1432 ], [ %1447, %1438 ]
  %1451 = add nsw i64 %1369, 2
  %1452 = icmp slt i64 %1451, %1365
  %1453 = trunc i64 %1369 to i32
  br i1 %1452, label %1368, label %1454

1454:                                             ; preds = %1448, %1336, %1333
  %1455 = phi i32 [ %1240, %1333 ], [ %1240, %1336 ], [ %1453, %1448 ]
  %1456 = phi ptr [ %1282, %1333 ], [ %1282, %1336 ], [ %1449, %1448 ]
  %1457 = phi ptr [ %466, %1333 ], [ %466, %1336 ], [ %1450, %1448 ]
  %1458 = icmp slt i32 %1455, %1241
  br i1 %1458, label %1459, label %1503

1459:                                             ; preds = %1454
  %1460 = sext i32 %1455 to i64
  %1461 = sext i32 %1241 to i64
  %1462 = extractelement <2 x double> %685, i64 0
  %1463 = extractelement <2 x double> %685, i64 1
  br label %1464

1464:                                             ; preds = %1459, %1498
  %1465 = phi i64 [ %1460, %1459 ], [ %1501, %1498 ]
  %1466 = phi ptr [ %1457, %1459 ], [ %1500, %1498 ]
  %1467 = phi ptr [ %1456, %1459 ], [ %1499, %1498 ]
  %1468 = getelementptr inbounds i16, ptr %420, i64 %1465
  %1469 = load i16, ptr %1468, align 2, !tbaa !44
  %1470 = zext i16 %1469 to i64
  %1471 = getelementptr inbounds %struct.CompAtom, ptr %40, i64 %1470
  %1472 = load double, ptr %1471, align 8, !tbaa !67
  %1473 = getelementptr inbounds %class.Vector, ptr %1471, i64 0, i32 1
  %1474 = load double, ptr %1473, align 8, !tbaa !66
  %1475 = getelementptr inbounds %class.Vector, ptr %1471, i64 0, i32 2
  %1476 = load double, ptr %1475, align 8, !tbaa !49
  %1477 = fsub double %1462, %1472
  %1478 = fmul double %1477, %1477
  %1479 = fsub double %1463, %1474
  %1480 = tail call double @llvm.fmuladd.f64(double %1479, double %1479, double %1478)
  %1481 = fsub double %688, %1476
  %1482 = tail call double @llvm.fmuladd.f64(double %1481, double %1481, double %1480)
  %1483 = fcmp ugt double %1482, %20
  br i1 %1483, label %1498, label %1484

1484:                                             ; preds = %1464
  %1485 = getelementptr inbounds %struct.CompAtomExt, ptr %44, i64 %1470
  %1486 = load i32, ptr %1485, align 4
  %1487 = shl i32 %1486, 2
  %1488 = ashr exact i32 %1487, 2
  %1489 = icmp slt i32 %1488, %698
  %1490 = icmp sgt i32 %1488, %700
  %1491 = select i1 %1489, i1 true, i1 %1490
  %1492 = select i1 %1491, ptr %1467, ptr %1466
  %1493 = zext i1 %1491 to i64
  %1494 = getelementptr inbounds i16, ptr %1467, i64 %1493
  %1495 = xor i1 %1491, true
  %1496 = zext i1 %1495 to i64
  %1497 = getelementptr inbounds i16, ptr %1466, i64 %1496
  store i16 %1469, ptr %1492, align 2, !tbaa !44
  br label %1498

1498:                                             ; preds = %1484, %1464
  %1499 = phi ptr [ %1467, %1464 ], [ %1494, %1484 ]
  %1500 = phi ptr [ %1466, %1464 ], [ %1497, %1484 ]
  %1501 = add nsw i64 %1465, 1
  %1502 = icmp eq i64 %1501, %1461
  br i1 %1502, label %1503, label %1464

1503:                                             ; preds = %1498, %1327, %1454, %1284, %1332
  %1504 = phi ptr [ %1282, %1332 ], [ %1282, %1284 ], [ %1456, %1454 ], [ %1328, %1327 ], [ %1499, %1498 ]
  %1505 = phi ptr [ %466, %1332 ], [ %466, %1284 ], [ %1457, %1454 ], [ %1329, %1327 ], [ %1500, %1498 ]
  %1506 = ptrtoint ptr %1505 to i64
  %1507 = sub i64 %1506, %642
  %1508 = lshr exact i64 %1507, 1
  %1509 = trunc i64 %1508 to i32
  %1510 = icmp sgt i32 %1509, 0
  br i1 %1510, label %1511, label %1611

1511:                                             ; preds = %1503
  %1512 = and i64 %1508, 4294967295
  %1513 = and i64 %1508, 1
  %1514 = icmp eq i64 %1512, 1
  br i1 %1514, label %1579, label %1515

1515:                                             ; preds = %1511
  %1516 = sub nsw i64 %1512, %1513
  br label %1517

1517:                                             ; preds = %1572, %1515
  %1518 = phi i64 [ 0, %1515 ], [ %1576, %1572 ]
  %1519 = phi ptr [ %1504, %1515 ], [ %1575, %1572 ]
  %1520 = phi ptr [ %328, %1515 ], [ %1574, %1572 ]
  %1521 = phi ptr [ %374, %1515 ], [ %1573, %1572 ]
  %1522 = phi i64 [ 0, %1515 ], [ %1577, %1572 ]
  %1523 = getelementptr inbounds i16, ptr %466, i64 %1518
  %1524 = load i16, ptr %1523, align 2, !tbaa !44
  %1525 = zext i16 %1524 to i64
  %1526 = getelementptr inbounds %struct.CompAtomExt, ptr %44, i64 %1525
  %1527 = load i32, ptr %1526, align 4
  %1528 = shl i32 %1527, 2
  %1529 = ashr exact i32 %1528, 2
  %1530 = sext i32 %1529 to i64
  %1531 = getelementptr inbounds i8, ptr %935, i64 %1530
  %1532 = load i8, ptr %1531, align 1, !tbaa !57
  %1533 = sext i8 %1532 to i32
  switch i32 %1533, label %1545 [
    i32 0, label %1534
    i32 1, label %1536
    i32 2, label %1538
  ]

1534:                                             ; preds = %1517
  %1535 = getelementptr inbounds i16, ptr %1519, i64 1
  br label %1540

1536:                                             ; preds = %1517
  %1537 = getelementptr inbounds i16, ptr %1520, i64 1
  br label %1540

1538:                                             ; preds = %1517
  %1539 = getelementptr inbounds i16, ptr %1521, i64 1
  br label %1540

1540:                                             ; preds = %1534, %1536, %1538
  %1541 = phi ptr [ %1521, %1538 ], [ %1520, %1536 ], [ %1519, %1534 ]
  %1542 = phi ptr [ %1539, %1538 ], [ %1521, %1536 ], [ %1521, %1534 ]
  %1543 = phi ptr [ %1520, %1538 ], [ %1537, %1536 ], [ %1520, %1534 ]
  %1544 = phi ptr [ %1519, %1538 ], [ %1519, %1536 ], [ %1535, %1534 ]
  store i16 %1524, ptr %1541, align 2, !tbaa !44
  br label %1545

1545:                                             ; preds = %1540, %1517
  %1546 = phi ptr [ %1521, %1517 ], [ %1542, %1540 ]
  %1547 = phi ptr [ %1520, %1517 ], [ %1543, %1540 ]
  %1548 = phi ptr [ %1519, %1517 ], [ %1544, %1540 ]
  %1549 = or i64 %1518, 1
  %1550 = getelementptr inbounds i16, ptr %466, i64 %1549
  %1551 = load i16, ptr %1550, align 2, !tbaa !44
  %1552 = zext i16 %1551 to i64
  %1553 = getelementptr inbounds %struct.CompAtomExt, ptr %44, i64 %1552
  %1554 = load i32, ptr %1553, align 4
  %1555 = shl i32 %1554, 2
  %1556 = ashr exact i32 %1555, 2
  %1557 = sext i32 %1556 to i64
  %1558 = getelementptr inbounds i8, ptr %935, i64 %1557
  %1559 = load i8, ptr %1558, align 1, !tbaa !57
  %1560 = sext i8 %1559 to i32
  switch i32 %1560, label %1572 [
    i32 0, label %1565
    i32 1, label %1563
    i32 2, label %1561
  ]

1561:                                             ; preds = %1545
  %1562 = getelementptr inbounds i16, ptr %1546, i64 1
  br label %1567

1563:                                             ; preds = %1545
  %1564 = getelementptr inbounds i16, ptr %1547, i64 1
  br label %1567

1565:                                             ; preds = %1545
  %1566 = getelementptr inbounds i16, ptr %1548, i64 1
  br label %1567

1567:                                             ; preds = %1565, %1563, %1561
  %1568 = phi ptr [ %1546, %1561 ], [ %1547, %1563 ], [ %1548, %1565 ]
  %1569 = phi ptr [ %1562, %1561 ], [ %1546, %1563 ], [ %1546, %1565 ]
  %1570 = phi ptr [ %1547, %1561 ], [ %1564, %1563 ], [ %1547, %1565 ]
  %1571 = phi ptr [ %1548, %1561 ], [ %1548, %1563 ], [ %1566, %1565 ]
  store i16 %1551, ptr %1568, align 2, !tbaa !44
  br label %1572

1572:                                             ; preds = %1567, %1545
  %1573 = phi ptr [ %1546, %1545 ], [ %1569, %1567 ]
  %1574 = phi ptr [ %1547, %1545 ], [ %1570, %1567 ]
  %1575 = phi ptr [ %1548, %1545 ], [ %1571, %1567 ]
  %1576 = add nuw nsw i64 %1518, 2
  %1577 = add i64 %1522, 2
  %1578 = icmp eq i64 %1577, %1516
  br i1 %1578, label %1579, label %1517

1579:                                             ; preds = %1572, %1511
  %1580 = phi ptr [ undef, %1511 ], [ %1573, %1572 ]
  %1581 = phi ptr [ undef, %1511 ], [ %1574, %1572 ]
  %1582 = phi ptr [ undef, %1511 ], [ %1575, %1572 ]
  %1583 = phi i64 [ 0, %1511 ], [ %1576, %1572 ]
  %1584 = phi ptr [ %1504, %1511 ], [ %1575, %1572 ]
  %1585 = phi ptr [ %328, %1511 ], [ %1574, %1572 ]
  %1586 = phi ptr [ %374, %1511 ], [ %1573, %1572 ]
  %1587 = icmp eq i64 %1513, 0
  br i1 %1587, label %1611, label %1588

1588:                                             ; preds = %1579
  %1589 = getelementptr inbounds i16, ptr %466, i64 %1583
  %1590 = load i16, ptr %1589, align 2, !tbaa !44
  %1591 = zext i16 %1590 to i64
  %1592 = getelementptr inbounds %struct.CompAtomExt, ptr %44, i64 %1591
  %1593 = load i32, ptr %1592, align 4
  %1594 = shl i32 %1593, 2
  %1595 = ashr exact i32 %1594, 2
  %1596 = sext i32 %1595 to i64
  %1597 = getelementptr inbounds i8, ptr %935, i64 %1596
  %1598 = load i8, ptr %1597, align 1, !tbaa !57
  %1599 = sext i8 %1598 to i32
  switch i32 %1599, label %1611 [
    i32 0, label %1604
    i32 1, label %1602
    i32 2, label %1600
  ]

1600:                                             ; preds = %1588
  %1601 = getelementptr inbounds i16, ptr %1586, i64 1
  br label %1606

1602:                                             ; preds = %1588
  %1603 = getelementptr inbounds i16, ptr %1585, i64 1
  br label %1606

1604:                                             ; preds = %1588
  %1605 = getelementptr inbounds i16, ptr %1584, i64 1
  br label %1606

1606:                                             ; preds = %1604, %1602, %1600
  %1607 = phi ptr [ %1586, %1600 ], [ %1585, %1602 ], [ %1584, %1604 ]
  %1608 = phi ptr [ %1601, %1600 ], [ %1586, %1602 ], [ %1586, %1604 ]
  %1609 = phi ptr [ %1585, %1600 ], [ %1603, %1602 ], [ %1585, %1604 ]
  %1610 = phi ptr [ %1584, %1600 ], [ %1584, %1602 ], [ %1605, %1604 ]
  store i16 %1590, ptr %1607, align 2, !tbaa !44
  br label %1611

1611:                                             ; preds = %1579, %1606, %1588, %1503
  %1612 = phi ptr [ %374, %1503 ], [ %1580, %1579 ], [ %1586, %1588 ], [ %1608, %1606 ]
  %1613 = phi ptr [ %328, %1503 ], [ %1581, %1579 ], [ %1585, %1588 ], [ %1609, %1606 ]
  %1614 = phi ptr [ %1504, %1503 ], [ %1582, %1579 ], [ %1584, %1588 ], [ %1610, %1606 ]
  %1615 = ptrtoint ptr %1614 to i64
  %1616 = ptrtoint ptr %1282 to i64
  %1617 = sub i64 %1615, %1616
  %1618 = lshr exact i64 %1617, 1
  %1619 = trunc i64 %1618 to i32
  %1620 = icmp eq i32 %1619, 0
  %1621 = shl i64 %1617, 31
  br i1 %1620, label %1627, label %1622

1622:                                             ; preds = %1611
  %1623 = add i64 %1621, -4294967296
  %1624 = ashr i64 %1623, 32
  %1625 = getelementptr inbounds i16, ptr %1282, i64 %1624
  %1626 = load i16, ptr %1625, align 2, !tbaa !44
  br label %1627

1627:                                             ; preds = %1611, %1622
  %1628 = phi i16 [ %1626, %1622 ], [ -1, %1611 ]
  %1629 = ashr i64 %1621, 32
  %1630 = getelementptr inbounds i16, ptr %1282, i64 %1629
  store i16 %1628, ptr %1630, align 2, !tbaa !44
  %1631 = trunc i64 %1618 to i16
  %1632 = add i16 %1631, 1
  %1633 = load i32, ptr %13, align 8, !tbaa !17
  %1634 = sext i32 %1633 to i64
  %1635 = getelementptr inbounds i16, ptr %1278, i64 %1634
  store i16 %1632, ptr %1635, align 2, !tbaa !44
  %1636 = add nsw i32 %1619, 2
  %1637 = add nsw i32 %1636, %1633
  %1638 = ptrtoint ptr %1613 to i64
  %1639 = sub i64 %1638, %643
  %1640 = lshr exact i64 %1639, 1
  %1641 = trunc i64 %1640 to i32
  %1642 = add nsw i32 %1637, 1
  %1643 = sext i32 %1642 to i64
  %1644 = getelementptr i16, ptr %1278, i64 %1643
  %1645 = icmp sgt i32 %1641, 0
  br i1 %1645, label %1646, label %1736

1646:                                             ; preds = %1627
  %1647 = and i64 %1640, 4294967295
  %1648 = icmp ult i64 %1647, 8
  br i1 %1648, label %1692, label %1649

1649:                                             ; preds = %1646
  %1650 = shl nsw i64 %1643, 1
  %1651 = add i64 %1650, %1279
  %1652 = sub i64 %1651, %643
  %1653 = icmp ult i64 %1652, 128
  br i1 %1653, label %1692, label %1654

1654:                                             ; preds = %1649
  %1655 = icmp ult i64 %1647, 64
  br i1 %1655, label %1679, label %1656

1656:                                             ; preds = %1654
  %1657 = and i64 %1640, 63
  %1658 = sub nsw i64 %1647, %1657
  br label %1659

1659:                                             ; preds = %1659, %1656
  %1660 = phi i64 [ 0, %1656 ], [ %1673, %1659 ]
  %1661 = getelementptr inbounds i16, ptr %328, i64 %1660
  %1662 = load <16 x i16>, ptr %1661, align 2, !tbaa !44
  %1663 = getelementptr inbounds i16, ptr %1661, i64 16
  %1664 = load <16 x i16>, ptr %1663, align 2, !tbaa !44
  %1665 = getelementptr inbounds i16, ptr %1661, i64 32
  %1666 = load <16 x i16>, ptr %1665, align 2, !tbaa !44
  %1667 = getelementptr inbounds i16, ptr %1661, i64 48
  %1668 = load <16 x i16>, ptr %1667, align 2, !tbaa !44
  %1669 = getelementptr inbounds i16, ptr %1644, i64 %1660
  store <16 x i16> %1662, ptr %1669, align 2, !tbaa !44
  %1670 = getelementptr inbounds i16, ptr %1669, i64 16
  store <16 x i16> %1664, ptr %1670, align 2, !tbaa !44
  %1671 = getelementptr inbounds i16, ptr %1669, i64 32
  store <16 x i16> %1666, ptr %1671, align 2, !tbaa !44
  %1672 = getelementptr inbounds i16, ptr %1669, i64 48
  store <16 x i16> %1668, ptr %1672, align 2, !tbaa !44
  %1673 = add nuw i64 %1660, 64
  %1674 = icmp eq i64 %1673, %1658
  br i1 %1674, label %1675, label %1659, !llvm.loop !199

1675:                                             ; preds = %1659
  %1676 = icmp eq i64 %1657, 0
  br i1 %1676, label %1730, label %1677

1677:                                             ; preds = %1675
  %1678 = icmp ult i64 %1657, 8
  br i1 %1678, label %1692, label %1679

1679:                                             ; preds = %1654, %1677
  %1680 = phi i64 [ %1658, %1677 ], [ 0, %1654 ]
  %1681 = and i64 %1640, 7
  %1682 = sub nsw i64 %1647, %1681
  br label %1683

1683:                                             ; preds = %1683, %1679
  %1684 = phi i64 [ %1680, %1679 ], [ %1688, %1683 ]
  %1685 = getelementptr inbounds i16, ptr %328, i64 %1684
  %1686 = load <8 x i16>, ptr %1685, align 2, !tbaa !44
  %1687 = getelementptr inbounds i16, ptr %1644, i64 %1684
  store <8 x i16> %1686, ptr %1687, align 2, !tbaa !44
  %1688 = add nuw i64 %1684, 8
  %1689 = icmp eq i64 %1688, %1682
  br i1 %1689, label %1690, label %1683, !llvm.loop !200

1690:                                             ; preds = %1683
  %1691 = icmp eq i64 %1681, 0
  br i1 %1691, label %1730, label %1692

1692:                                             ; preds = %1649, %1646, %1677, %1690
  %1693 = phi i64 [ 0, %1646 ], [ 0, %1649 ], [ %1658, %1677 ], [ %1682, %1690 ]
  %1694 = sub i64 %1640, %1693
  %1695 = xor i64 %1693, -1
  %1696 = add nsw i64 %1647, %1695
  %1697 = and i64 %1694, 3
  %1698 = icmp eq i64 %1697, 0
  br i1 %1698, label %1708, label %1699

1699:                                             ; preds = %1692, %1699
  %1700 = phi i64 [ %1705, %1699 ], [ %1693, %1692 ]
  %1701 = phi i64 [ %1706, %1699 ], [ 0, %1692 ]
  %1702 = getelementptr inbounds i16, ptr %328, i64 %1700
  %1703 = load i16, ptr %1702, align 2, !tbaa !44
  %1704 = getelementptr inbounds i16, ptr %1644, i64 %1700
  store i16 %1703, ptr %1704, align 2, !tbaa !44
  %1705 = add nuw nsw i64 %1700, 1
  %1706 = add i64 %1701, 1
  %1707 = icmp eq i64 %1706, %1697
  br i1 %1707, label %1708, label %1699, !llvm.loop !201

1708:                                             ; preds = %1699, %1692
  %1709 = phi i64 [ %1693, %1692 ], [ %1705, %1699 ]
  %1710 = icmp ult i64 %1696, 3
  br i1 %1710, label %1730, label %1711

1711:                                             ; preds = %1708, %1711
  %1712 = phi i64 [ %1728, %1711 ], [ %1709, %1708 ]
  %1713 = getelementptr inbounds i16, ptr %328, i64 %1712
  %1714 = load i16, ptr %1713, align 2, !tbaa !44
  %1715 = getelementptr inbounds i16, ptr %1644, i64 %1712
  store i16 %1714, ptr %1715, align 2, !tbaa !44
  %1716 = add nuw nsw i64 %1712, 1
  %1717 = getelementptr inbounds i16, ptr %328, i64 %1716
  %1718 = load i16, ptr %1717, align 2, !tbaa !44
  %1719 = getelementptr inbounds i16, ptr %1644, i64 %1716
  store i16 %1718, ptr %1719, align 2, !tbaa !44
  %1720 = add nuw nsw i64 %1712, 2
  %1721 = getelementptr inbounds i16, ptr %328, i64 %1720
  %1722 = load i16, ptr %1721, align 2, !tbaa !44
  %1723 = getelementptr inbounds i16, ptr %1644, i64 %1720
  store i16 %1722, ptr %1723, align 2, !tbaa !44
  %1724 = add nuw nsw i64 %1712, 3
  %1725 = getelementptr inbounds i16, ptr %328, i64 %1724
  %1726 = load i16, ptr %1725, align 2, !tbaa !44
  %1727 = getelementptr inbounds i16, ptr %1644, i64 %1724
  store i16 %1726, ptr %1727, align 2, !tbaa !44
  %1728 = add nuw nsw i64 %1712, 4
  %1729 = icmp eq i64 %1728, %1647
  br i1 %1729, label %1730, label %1711, !llvm.loop !202

1730:                                             ; preds = %1708, %1711, %1675, %1690
  %1731 = shl i64 %1639, 31
  %1732 = add i64 %1731, -4294967296
  %1733 = ashr i64 %1732, 32
  %1734 = getelementptr inbounds i16, ptr %1644, i64 %1733
  %1735 = load i16, ptr %1734, align 2, !tbaa !44
  br label %1736

1736:                                             ; preds = %1627, %1730
  %1737 = phi i64 [ %1640, %1730 ], [ 0, %1627 ]
  %1738 = phi i16 [ %1735, %1730 ], [ -1, %1627 ]
  %1739 = and i64 %1737, 4294967295
  %1740 = getelementptr inbounds i16, ptr %1644, i64 %1739
  store i16 %1738, ptr %1740, align 2, !tbaa !44
  %1741 = trunc i64 %1640 to i16
  %1742 = add i16 %1741, 1
  %1743 = sext i32 %1637 to i64
  %1744 = getelementptr inbounds i16, ptr %1278, i64 %1743
  store i16 %1742, ptr %1744, align 2, !tbaa !44
  %1745 = add nsw i32 %1641, 2
  %1746 = add nsw i32 %1745, %1637
  %1747 = ptrtoint ptr %1612 to i64
  %1748 = sub i64 %1747, %644
  %1749 = lshr exact i64 %1748, 1
  %1750 = trunc i64 %1749 to i32
  %1751 = add nsw i32 %1746, 1
  %1752 = sext i32 %1751 to i64
  %1753 = getelementptr i16, ptr %1278, i64 %1752
  %1754 = icmp sgt i32 %1750, 0
  br i1 %1754, label %1755, label %1845

1755:                                             ; preds = %1736
  %1756 = and i64 %1749, 4294967295
  %1757 = icmp ult i64 %1756, 8
  br i1 %1757, label %1801, label %1758

1758:                                             ; preds = %1755
  %1759 = shl nsw i64 %1752, 1
  %1760 = add i64 %1759, %1279
  %1761 = sub i64 %1760, %644
  %1762 = icmp ult i64 %1761, 128
  br i1 %1762, label %1801, label %1763

1763:                                             ; preds = %1758
  %1764 = icmp ult i64 %1756, 64
  br i1 %1764, label %1788, label %1765

1765:                                             ; preds = %1763
  %1766 = and i64 %1749, 63
  %1767 = sub nsw i64 %1756, %1766
  br label %1768

1768:                                             ; preds = %1768, %1765
  %1769 = phi i64 [ 0, %1765 ], [ %1782, %1768 ]
  %1770 = getelementptr inbounds i16, ptr %374, i64 %1769
  %1771 = load <16 x i16>, ptr %1770, align 2, !tbaa !44
  %1772 = getelementptr inbounds i16, ptr %1770, i64 16
  %1773 = load <16 x i16>, ptr %1772, align 2, !tbaa !44
  %1774 = getelementptr inbounds i16, ptr %1770, i64 32
  %1775 = load <16 x i16>, ptr %1774, align 2, !tbaa !44
  %1776 = getelementptr inbounds i16, ptr %1770, i64 48
  %1777 = load <16 x i16>, ptr %1776, align 2, !tbaa !44
  %1778 = getelementptr inbounds i16, ptr %1753, i64 %1769
  store <16 x i16> %1771, ptr %1778, align 2, !tbaa !44
  %1779 = getelementptr inbounds i16, ptr %1778, i64 16
  store <16 x i16> %1773, ptr %1779, align 2, !tbaa !44
  %1780 = getelementptr inbounds i16, ptr %1778, i64 32
  store <16 x i16> %1775, ptr %1780, align 2, !tbaa !44
  %1781 = getelementptr inbounds i16, ptr %1778, i64 48
  store <16 x i16> %1777, ptr %1781, align 2, !tbaa !44
  %1782 = add nuw i64 %1769, 64
  %1783 = icmp eq i64 %1782, %1767
  br i1 %1783, label %1784, label %1768, !llvm.loop !203

1784:                                             ; preds = %1768
  %1785 = icmp eq i64 %1766, 0
  br i1 %1785, label %1839, label %1786

1786:                                             ; preds = %1784
  %1787 = icmp ult i64 %1766, 8
  br i1 %1787, label %1801, label %1788

1788:                                             ; preds = %1763, %1786
  %1789 = phi i64 [ %1767, %1786 ], [ 0, %1763 ]
  %1790 = and i64 %1749, 7
  %1791 = sub nsw i64 %1756, %1790
  br label %1792

1792:                                             ; preds = %1792, %1788
  %1793 = phi i64 [ %1789, %1788 ], [ %1797, %1792 ]
  %1794 = getelementptr inbounds i16, ptr %374, i64 %1793
  %1795 = load <8 x i16>, ptr %1794, align 2, !tbaa !44
  %1796 = getelementptr inbounds i16, ptr %1753, i64 %1793
  store <8 x i16> %1795, ptr %1796, align 2, !tbaa !44
  %1797 = add nuw i64 %1793, 8
  %1798 = icmp eq i64 %1797, %1791
  br i1 %1798, label %1799, label %1792, !llvm.loop !204

1799:                                             ; preds = %1792
  %1800 = icmp eq i64 %1790, 0
  br i1 %1800, label %1839, label %1801

1801:                                             ; preds = %1758, %1755, %1786, %1799
  %1802 = phi i64 [ 0, %1755 ], [ 0, %1758 ], [ %1767, %1786 ], [ %1791, %1799 ]
  %1803 = sub i64 %1749, %1802
  %1804 = xor i64 %1802, -1
  %1805 = add nsw i64 %1756, %1804
  %1806 = and i64 %1803, 3
  %1807 = icmp eq i64 %1806, 0
  br i1 %1807, label %1817, label %1808

1808:                                             ; preds = %1801, %1808
  %1809 = phi i64 [ %1814, %1808 ], [ %1802, %1801 ]
  %1810 = phi i64 [ %1815, %1808 ], [ 0, %1801 ]
  %1811 = getelementptr inbounds i16, ptr %374, i64 %1809
  %1812 = load i16, ptr %1811, align 2, !tbaa !44
  %1813 = getelementptr inbounds i16, ptr %1753, i64 %1809
  store i16 %1812, ptr %1813, align 2, !tbaa !44
  %1814 = add nuw nsw i64 %1809, 1
  %1815 = add i64 %1810, 1
  %1816 = icmp eq i64 %1815, %1806
  br i1 %1816, label %1817, label %1808, !llvm.loop !205

1817:                                             ; preds = %1808, %1801
  %1818 = phi i64 [ %1802, %1801 ], [ %1814, %1808 ]
  %1819 = icmp ult i64 %1805, 3
  br i1 %1819, label %1839, label %1820

1820:                                             ; preds = %1817, %1820
  %1821 = phi i64 [ %1837, %1820 ], [ %1818, %1817 ]
  %1822 = getelementptr inbounds i16, ptr %374, i64 %1821
  %1823 = load i16, ptr %1822, align 2, !tbaa !44
  %1824 = getelementptr inbounds i16, ptr %1753, i64 %1821
  store i16 %1823, ptr %1824, align 2, !tbaa !44
  %1825 = add nuw nsw i64 %1821, 1
  %1826 = getelementptr inbounds i16, ptr %374, i64 %1825
  %1827 = load i16, ptr %1826, align 2, !tbaa !44
  %1828 = getelementptr inbounds i16, ptr %1753, i64 %1825
  store i16 %1827, ptr %1828, align 2, !tbaa !44
  %1829 = add nuw nsw i64 %1821, 2
  %1830 = getelementptr inbounds i16, ptr %374, i64 %1829
  %1831 = load i16, ptr %1830, align 2, !tbaa !44
  %1832 = getelementptr inbounds i16, ptr %1753, i64 %1829
  store i16 %1831, ptr %1832, align 2, !tbaa !44
  %1833 = add nuw nsw i64 %1821, 3
  %1834 = getelementptr inbounds i16, ptr %374, i64 %1833
  %1835 = load i16, ptr %1834, align 2, !tbaa !44
  %1836 = getelementptr inbounds i16, ptr %1753, i64 %1833
  store i16 %1835, ptr %1836, align 2, !tbaa !44
  %1837 = add nuw nsw i64 %1821, 4
  %1838 = icmp eq i64 %1837, %1756
  br i1 %1838, label %1839, label %1820, !llvm.loop !206

1839:                                             ; preds = %1817, %1820, %1784, %1799
  %1840 = shl i64 %1748, 31
  %1841 = add i64 %1840, -4294967296
  %1842 = ashr i64 %1841, 32
  %1843 = getelementptr inbounds i16, ptr %1753, i64 %1842
  %1844 = load i16, ptr %1843, align 2, !tbaa !44
  br label %1845

1845:                                             ; preds = %1736, %1839
  %1846 = phi i64 [ %1749, %1839 ], [ 0, %1736 ]
  %1847 = phi i16 [ %1844, %1839 ], [ -1, %1736 ]
  %1848 = and i64 %1846, 4294967295
  %1849 = getelementptr inbounds i16, ptr %1753, i64 %1848
  store i16 %1847, ptr %1849, align 2, !tbaa !44
  %1850 = trunc i64 %1749 to i16
  %1851 = add i16 %1850, 1
  %1852 = sext i32 %1746 to i64
  %1853 = getelementptr inbounds i16, ptr %1278, i64 %1852
  store i16 %1851, ptr %1853, align 2, !tbaa !44
  %1854 = add nsw i32 %1750, 2
  %1855 = add nsw i32 %1854, %1746
  %1856 = select i1 %141, i32 0, i32 %1855
  store i32 %1856, ptr %13, align 8
  br label %1885

1857:                                             ; preds = %682
  %1858 = load ptr, ptr %8, align 8, !tbaa !46
  %1859 = load i32, ptr %13, align 8, !tbaa !17
  %1860 = add i32 %1859, 1
  %1861 = sext i32 %1860 to i64
  %1862 = getelementptr inbounds i16, ptr %1858, i64 %1861
  %1863 = sext i32 %1859 to i64
  %1864 = getelementptr inbounds i16, ptr %1858, i64 %1863
  %1865 = load i16, ptr %1864, align 2, !tbaa !44
  %1866 = zext i16 %1865 to i32
  %1867 = add i32 %1860, %1866
  %1868 = add nsw i32 %1866, -1
  %1869 = sext i32 %1867 to i64
  %1870 = getelementptr inbounds i16, ptr %1858, i64 %1869
  %1871 = load i16, ptr %1870, align 2, !tbaa !44
  %1872 = zext i16 %1871 to i32
  %1873 = add nuw nsw i32 %1872, 1
  %1874 = add nsw i32 %1873, %1867
  %1875 = add nsw i32 %1872, -1
  %1876 = add i32 %1874, 1
  %1877 = sext i32 %1876 to i64
  %1878 = getelementptr inbounds i16, ptr %1858, i64 %1877
  %1879 = sext i32 %1874 to i64
  %1880 = getelementptr inbounds i16, ptr %1858, i64 %1879
  %1881 = load i16, ptr %1880, align 2, !tbaa !44
  %1882 = zext i16 %1881 to i32
  %1883 = add i32 %1876, %1882
  store i32 %1883, ptr %13, align 8, !tbaa !17
  %1884 = add nsw i32 %1882, -1
  br label %1885

1885:                                             ; preds = %1845, %1857
  %1886 = phi ptr [ %1862, %1857 ], [ %1282, %1845 ]
  %1887 = phi i32 [ %1868, %1857 ], [ %1619, %1845 ]
  %1888 = phi i32 [ %1875, %1857 ], [ %1641, %1845 ]
  %1889 = phi ptr [ %1878, %1857 ], [ %1753, %1845 ]
  %1890 = phi i32 [ %1884, %1857 ], [ %1750, %1845 ]
  %1891 = phi i32 [ %664, %1857 ], [ %1240, %1845 ]
  %1892 = phi i32 [ %663, %1857 ], [ %1241, %1845 ]
  %1893 = phi i32 [ %662, %1857 ], [ %1242, %1845 ]
  %1894 = phi i32 [ %661, %1857 ], [ %1243, %1845 ]
  %1895 = phi ptr [ %659, %1857 ], [ %936, %1845 ]
  %1896 = phi ptr [ %658, %1857 ], [ %937, %1845 ]
  %1897 = phi ptr [ %657, %1857 ], [ %938, %1845 ]
  %1898 = getelementptr inbounds %struct.CompAtom, ptr %38, i64 %667, i32 1
  %1899 = load float, ptr %1898, align 8, !tbaa !79
  %1900 = fpext float %1899 to double
  %1901 = fmul double %1900, 0x4074C104816F0069
  %1902 = fmul double %28, %1901
  %1903 = fmul double %24, %1902
  %1904 = getelementptr inbounds %struct.CompAtom, ptr %38, i64 %667, i32 2
  %1905 = load i16, ptr %1904, align 4, !tbaa !80
  %1906 = sext i16 %1905 to i32
  %1907 = load ptr, ptr %645, align 8, !tbaa !81
  %1908 = load i32, ptr %646, align 8, !tbaa !83
  %1909 = shl nsw i32 %1906, 1
  %1910 = mul i32 %1909, %1908
  %1911 = zext i32 %1910 to i64
  %1912 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %1907, i64 %1911
  %1913 = load double, ptr @_ZN20ComputeNonbondedUtil7cutoff2E, align 8, !tbaa !19
  %1914 = extractelement <2 x double> %685, i64 0
  %1915 = extractelement <2 x double> %685, i64 1
  %1916 = tail call noundef i32 @_Z22pairlist_from_pairlistddddPK8CompAtomPKtiPtdPd(double noundef %1913, double noundef %1914, double noundef %1915, double noundef %688, ptr noundef %40, ptr noundef nonnull %1886, i32 noundef %1887, ptr noundef %93, double noundef %30, ptr noundef %139)
  %1917 = icmp sgt i32 %1916, 0
  br i1 %1917, label %1918, label %2035

1918:                                             ; preds = %1885
  %1919 = load ptr, ptr @_ZN20ComputeNonbondedUtil8r2_tableE, align 8, !tbaa !23
  %1920 = zext i32 %1916 to i64
  br label %1921

1921:                                             ; preds = %1918, %1921
  %1922 = phi i64 [ 0, %1918 ], [ %2033, %1921 ]
  %1923 = phi double [ 0.000000e+00, %1918 ], [ %2029, %1921 ]
  %1924 = phi <2 x double> [ %666, %1918 ], [ %2014, %1921 ]
  %1925 = phi <2 x double> [ zeroinitializer, %1918 ], [ %2025, %1921 ]
  %1926 = shl nuw nsw i64 %1922, 1
  %1927 = getelementptr inbounds i32, ptr %140, i64 %1926
  %1928 = load i32, ptr %1927, align 4, !tbaa !5
  %1929 = ashr i32 %1928, 14
  %1930 = add nsw i32 %1929, %33
  %1931 = getelementptr inbounds i16, ptr %93, i64 %1922
  %1932 = load i16, ptr %1931, align 2, !tbaa !44
  %1933 = zext i16 %1932 to i64
  %1934 = getelementptr inbounds %struct.CompAtom, ptr %40, i64 %1933
  %1935 = getelementptr inbounds double, ptr %139, i64 %1922
  %1936 = load double, ptr %1935, align 8, !tbaa !19
  %1937 = sext i32 %1930 to i64
  %1938 = getelementptr inbounds double, ptr %1919, i64 %1937
  %1939 = load double, ptr %1938, align 8, !tbaa !19
  %1940 = fsub double %1936, %1939
  %1941 = shl nsw i32 %1930, 4
  %1942 = sext i32 %1941 to i64
  %1943 = getelementptr inbounds double, ptr %27, i64 %1942
  %1944 = getelementptr inbounds %struct.CompAtom, ptr %40, i64 %1933, i32 2
  %1945 = load i16, ptr %1944, align 4, !tbaa !80
  %1946 = sext i16 %1945 to i32
  %1947 = shl nsw i32 %1946, 1
  %1948 = sext i32 %1947 to i64
  %1949 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %1912, i64 %1948
  %1950 = getelementptr inbounds %class.Vector, ptr %624, i64 %1933
  %1951 = getelementptr inbounds %struct.CompAtom, ptr %40, i64 %1933, i32 1
  %1952 = load float, ptr %1951, align 8, !tbaa !79
  %1953 = fpext float %1952 to double
  %1954 = fmul double %1903, %1953
  %1955 = getelementptr inbounds %class.Vector, ptr %1934, i64 0, i32 2
  %1956 = load double, ptr %1955, align 8, !tbaa !49
  %1957 = fsub double %688, %1956
  %1958 = load double, ptr %1949, align 8, !tbaa !84
  %1959 = fmul double %28, %1958
  %1960 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %1912, i64 %1948, i32 1
  %1961 = load double, ptr %1960, align 8, !tbaa !86
  %1962 = load double, ptr %1943, align 8, !tbaa !19
  %1963 = getelementptr inbounds double, ptr %1943, i64 2
  %1964 = load double, ptr %1963, align 8, !tbaa !19
  %1965 = fmul double %1961, %647
  %1966 = fmul double %1965, %1964
  %1967 = tail call double @llvm.fmuladd.f64(double %1959, double %1962, double %1966)
  %1968 = getelementptr inbounds double, ptr %1943, i64 1
  %1969 = load double, ptr %1968, align 8, !tbaa !19
  %1970 = getelementptr inbounds double, ptr %1943, i64 3
  %1971 = load double, ptr %1970, align 8, !tbaa !19
  %1972 = fmul double %1965, %1971
  %1973 = tail call double @llvm.fmuladd.f64(double %1959, double %1969, double %1972)
  %1974 = getelementptr inbounds double, ptr %1943, i64 4
  %1975 = load double, ptr %1974, align 8, !tbaa !19
  %1976 = getelementptr inbounds double, ptr %1943, i64 6
  %1977 = load double, ptr %1976, align 8, !tbaa !19
  %1978 = fmul double %1965, %1977
  %1979 = tail call double @llvm.fmuladd.f64(double %1959, double %1975, double %1978)
  %1980 = getelementptr inbounds double, ptr %1943, i64 5
  %1981 = load double, ptr %1980, align 8, !tbaa !19
  %1982 = getelementptr inbounds double, ptr %1943, i64 7
  %1983 = load double, ptr %1982, align 8, !tbaa !19
  %1984 = fmul double %1965, %1983
  %1985 = tail call double @llvm.fmuladd.f64(double %1959, double %1981, double %1984)
  %1986 = getelementptr inbounds double, ptr %1943, i64 8
  %1987 = load double, ptr %1986, align 8, !tbaa !19
  %1988 = fmul double %1954, %1987
  %1989 = getelementptr inbounds double, ptr %1943, i64 9
  %1990 = load double, ptr %1989, align 8, !tbaa !19
  %1991 = fmul double %1954, %1990
  %1992 = getelementptr inbounds double, ptr %1943, i64 10
  %1993 = load double, ptr %1992, align 8, !tbaa !19
  %1994 = fmul double %1954, %1993
  %1995 = getelementptr inbounds double, ptr %1943, i64 11
  %1996 = load double, ptr %1995, align 8, !tbaa !19
  %1997 = fmul double %1954, %1996
  %1998 = insertelement <2 x double> poison, double %1940, i64 0
  %1999 = shufflevector <2 x double> %1998, <2 x double> poison, <2 x i32> zeroinitializer
  %2000 = insertelement <2 x double> poison, double %1988, i64 0
  %2001 = insertelement <2 x double> %2000, double %1967, i64 1
  %2002 = fmul <2 x double> %1999, %2001
  %2003 = insertelement <2 x double> poison, double %1991, i64 0
  %2004 = insertelement <2 x double> %2003, double %1973, i64 1
  %2005 = fmul <2 x double> %2004, <double 2.500000e-01, double 2.500000e-01>
  %2006 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2002, <2 x double> <double 0x3FC5555555555555, double 0x3FC5555555555555>, <2 x double> %2005)
  %2007 = insertelement <2 x double> poison, double %1994, i64 0
  %2008 = insertelement <2 x double> %2007, double %1979, i64 1
  %2009 = fmul <2 x double> %2008, <double 5.000000e-01, double 5.000000e-01>
  %2010 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2006, <2 x double> %1999, <2 x double> %2009)
  %2011 = insertelement <2 x double> poison, double %1997, i64 0
  %2012 = insertelement <2 x double> %2011, double %1985, i64 1
  %2013 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2010, <2 x double> %1999, <2 x double> %2012)
  %2014 = fsub <2 x double> %1924, %2013
  %2015 = fadd double %1967, %1988
  %2016 = fadd double %1973, %1991
  %2017 = fadd double %1979, %1994
  %2018 = tail call double @llvm.fmuladd.f64(double %1940, double %2015, double %2016)
  %2019 = tail call double @llvm.fmuladd.f64(double %2018, double %1940, double %2017)
  %2020 = load <2 x double>, ptr %1934, align 8, !tbaa !19
  %2021 = fsub <2 x double> %685, %2020
  %2022 = insertelement <2 x double> poison, double %2019, i64 0
  %2023 = shufflevector <2 x double> %2022, <2 x double> poison, <2 x i32> zeroinitializer
  %2024 = fmul <2 x double> %2021, %2023
  %2025 = fadd <2 x double> %1925, %2024
  %2026 = load <2 x double>, ptr %1950, align 8, !tbaa !19
  %2027 = fsub <2 x double> %2026, %2024
  store <2 x double> %2027, ptr %1950, align 8, !tbaa !19
  %2028 = fmul double %1957, %2019
  %2029 = fadd double %1923, %2028
  %2030 = getelementptr inbounds %class.Vector, ptr %624, i64 %1933, i32 2
  %2031 = load double, ptr %2030, align 8, !tbaa !87
  %2032 = fsub double %2031, %2028
  store double %2032, ptr %2030, align 8, !tbaa !87
  %2033 = add nuw nsw i64 %1922, 1
  %2034 = icmp eq i64 %2033, %1920
  br i1 %2034, label %2035, label %1921

2035:                                             ; preds = %1921, %1885
  %2036 = phi double [ 0.000000e+00, %1885 ], [ %2029, %1921 ]
  %2037 = phi <2 x double> [ %666, %1885 ], [ %2014, %1921 ]
  %2038 = phi <2 x double> [ zeroinitializer, %1885 ], [ %2025, %1921 ]
  %2039 = load double, ptr @_ZN20ComputeNonbondedUtil7cutoff2E, align 8, !tbaa !19
  %2040 = tail call noundef i32 @_Z22pairlist_from_pairlistddddPK8CompAtomPKtiPtdPd(double noundef %2039, double noundef %1914, double noundef %1915, double noundef %688, ptr noundef %40, ptr noundef %1889, i32 noundef %1890, ptr noundef %93, double noundef %30, ptr noundef %139)
  %2041 = icmp sgt i32 %2040, 0
  br i1 %2041, label %2042, label %2161

2042:                                             ; preds = %2035
  %2043 = load ptr, ptr @_ZN20ComputeNonbondedUtil8r2_tableE, align 8, !tbaa !23
  %2044 = zext i32 %2040 to i64
  br label %2045

2045:                                             ; preds = %2042, %2045
  %2046 = phi i64 [ 0, %2042 ], [ %2159, %2045 ]
  %2047 = phi double [ %2036, %2042 ], [ %2155, %2045 ]
  %2048 = phi <2 x double> [ %2037, %2042 ], [ %2140, %2045 ]
  %2049 = phi <2 x double> [ %2038, %2042 ], [ %2151, %2045 ]
  %2050 = shl nuw nsw i64 %2046, 1
  %2051 = getelementptr inbounds i32, ptr %140, i64 %2050
  %2052 = load i32, ptr %2051, align 4, !tbaa !5
  %2053 = ashr i32 %2052, 14
  %2054 = add nsw i32 %2053, %33
  %2055 = getelementptr inbounds i16, ptr %93, i64 %2046
  %2056 = load i16, ptr %2055, align 2, !tbaa !44
  %2057 = zext i16 %2056 to i64
  %2058 = getelementptr inbounds %struct.CompAtom, ptr %40, i64 %2057
  %2059 = getelementptr inbounds double, ptr %139, i64 %2046
  %2060 = load double, ptr %2059, align 8, !tbaa !19
  %2061 = sext i32 %2054 to i64
  %2062 = getelementptr inbounds double, ptr %2043, i64 %2061
  %2063 = load double, ptr %2062, align 8, !tbaa !19
  %2064 = fsub double %2060, %2063
  %2065 = shl nsw i32 %2054, 4
  %2066 = sext i32 %2065 to i64
  %2067 = getelementptr inbounds double, ptr %27, i64 %2066
  %2068 = getelementptr inbounds %struct.CompAtom, ptr %40, i64 %2057, i32 2
  %2069 = load i16, ptr %2068, align 4, !tbaa !80
  %2070 = sext i16 %2069 to i32
  %2071 = shl nsw i32 %2070, 1
  %2072 = sext i32 %2071 to i64
  %2073 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %1912, i64 %2072
  %2074 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %2073, i64 1
  %2075 = getelementptr inbounds %class.Vector, ptr %624, i64 %2057
  %2076 = getelementptr inbounds %struct.CompAtom, ptr %40, i64 %2057, i32 1
  %2077 = load float, ptr %2076, align 8, !tbaa !79
  %2078 = fpext float %2077 to double
  %2079 = fmul double %1903, %2078
  %2080 = getelementptr inbounds %class.Vector, ptr %2058, i64 0, i32 2
  %2081 = load double, ptr %2080, align 8, !tbaa !49
  %2082 = fsub double %688, %2081
  %2083 = load double, ptr %2074, align 8, !tbaa !84
  %2084 = fmul double %28, %2083
  %2085 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %2073, i64 1, i32 1
  %2086 = load double, ptr %2085, align 8, !tbaa !86
  %2087 = load double, ptr %2067, align 8, !tbaa !19
  %2088 = getelementptr inbounds double, ptr %2067, i64 2
  %2089 = load double, ptr %2088, align 8, !tbaa !19
  %2090 = fmul double %2086, %647
  %2091 = fmul double %2090, %2089
  %2092 = tail call double @llvm.fmuladd.f64(double %2084, double %2087, double %2091)
  %2093 = getelementptr inbounds double, ptr %2067, i64 1
  %2094 = load double, ptr %2093, align 8, !tbaa !19
  %2095 = getelementptr inbounds double, ptr %2067, i64 3
  %2096 = load double, ptr %2095, align 8, !tbaa !19
  %2097 = fmul double %2090, %2096
  %2098 = tail call double @llvm.fmuladd.f64(double %2084, double %2094, double %2097)
  %2099 = getelementptr inbounds double, ptr %2067, i64 4
  %2100 = load double, ptr %2099, align 8, !tbaa !19
  %2101 = getelementptr inbounds double, ptr %2067, i64 6
  %2102 = load double, ptr %2101, align 8, !tbaa !19
  %2103 = fmul double %2090, %2102
  %2104 = tail call double @llvm.fmuladd.f64(double %2084, double %2100, double %2103)
  %2105 = getelementptr inbounds double, ptr %2067, i64 5
  %2106 = load double, ptr %2105, align 8, !tbaa !19
  %2107 = getelementptr inbounds double, ptr %2067, i64 7
  %2108 = load double, ptr %2107, align 8, !tbaa !19
  %2109 = fmul double %2090, %2108
  %2110 = tail call double @llvm.fmuladd.f64(double %2084, double %2106, double %2109)
  %2111 = fmul double %649, %2079
  %2112 = getelementptr inbounds double, ptr %2067, i64 8
  %2113 = load double, ptr %2112, align 8, !tbaa !19
  %2114 = fmul double %2111, %2113
  %2115 = getelementptr inbounds double, ptr %2067, i64 9
  %2116 = load double, ptr %2115, align 8, !tbaa !19
  %2117 = fmul double %2111, %2116
  %2118 = getelementptr inbounds double, ptr %2067, i64 10
  %2119 = load double, ptr %2118, align 8, !tbaa !19
  %2120 = fmul double %2111, %2119
  %2121 = getelementptr inbounds double, ptr %2067, i64 11
  %2122 = load double, ptr %2121, align 8, !tbaa !19
  %2123 = fmul double %2111, %2122
  %2124 = insertelement <2 x double> poison, double %2064, i64 0
  %2125 = shufflevector <2 x double> %2124, <2 x double> poison, <2 x i32> zeroinitializer
  %2126 = insertelement <2 x double> poison, double %2114, i64 0
  %2127 = insertelement <2 x double> %2126, double %2092, i64 1
  %2128 = fmul <2 x double> %2125, %2127
  %2129 = insertelement <2 x double> poison, double %2117, i64 0
  %2130 = insertelement <2 x double> %2129, double %2098, i64 1
  %2131 = fmul <2 x double> %2130, <double 2.500000e-01, double 2.500000e-01>
  %2132 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2128, <2 x double> <double 0x3FC5555555555555, double 0x3FC5555555555555>, <2 x double> %2131)
  %2133 = insertelement <2 x double> poison, double %2120, i64 0
  %2134 = insertelement <2 x double> %2133, double %2104, i64 1
  %2135 = fmul <2 x double> %2134, <double 5.000000e-01, double 5.000000e-01>
  %2136 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2132, <2 x double> %2125, <2 x double> %2135)
  %2137 = insertelement <2 x double> poison, double %2123, i64 0
  %2138 = insertelement <2 x double> %2137, double %2110, i64 1
  %2139 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2136, <2 x double> %2125, <2 x double> %2138)
  %2140 = fsub <2 x double> %2048, %2139
  %2141 = fadd double %2092, %2114
  %2142 = fadd double %2098, %2117
  %2143 = fadd double %2104, %2120
  %2144 = tail call double @llvm.fmuladd.f64(double %2064, double %2141, double %2142)
  %2145 = tail call double @llvm.fmuladd.f64(double %2144, double %2064, double %2143)
  %2146 = load <2 x double>, ptr %2058, align 8, !tbaa !19
  %2147 = fsub <2 x double> %685, %2146
  %2148 = insertelement <2 x double> poison, double %2145, i64 0
  %2149 = shufflevector <2 x double> %2148, <2 x double> poison, <2 x i32> zeroinitializer
  %2150 = fmul <2 x double> %2147, %2149
  %2151 = fadd <2 x double> %2049, %2150
  %2152 = load <2 x double>, ptr %2075, align 8, !tbaa !19
  %2153 = fsub <2 x double> %2152, %2150
  store <2 x double> %2153, ptr %2075, align 8, !tbaa !19
  %2154 = fmul double %2082, %2145
  %2155 = fadd double %2047, %2154
  %2156 = getelementptr inbounds %class.Vector, ptr %624, i64 %2057, i32 2
  %2157 = load double, ptr %2156, align 8, !tbaa !87
  %2158 = fsub double %2157, %2154
  store double %2158, ptr %2156, align 8, !tbaa !87
  %2159 = add nuw nsw i64 %2046, 1
  %2160 = icmp eq i64 %2159, %2044
  br i1 %2160, label %2161, label %2045

2161:                                             ; preds = %2045, %2035
  %2162 = phi double [ %2036, %2035 ], [ %2155, %2045 ]
  %2163 = phi <2 x double> [ %2037, %2035 ], [ %2140, %2045 ]
  %2164 = phi <2 x double> [ %2038, %2035 ], [ %2151, %2045 ]
  %2165 = add i32 %1888, %655
  %2166 = add i32 %2165, %2040
  %2167 = getelementptr inbounds %class.Vector, ptr %624, i64 %667
  %2168 = load <2 x double>, ptr %2167, align 8, !tbaa !19
  %2169 = fadd <2 x double> %2164, %2168
  store <2 x double> %2169, ptr %2167, align 8, !tbaa !19
  %2170 = getelementptr inbounds %class.Vector, ptr %624, i64 %667, i32 2
  %2171 = load double, ptr %2170, align 8, !tbaa !87
  %2172 = fadd double %2162, %2171
  store double %2172, ptr %2170, align 8, !tbaa !87
  br label %2173

2173:                                             ; preds = %2161, %678
  %2174 = phi i32 [ %679, %678 ], [ %683, %2161 ]
  %2175 = phi i32 [ %664, %678 ], [ %1891, %2161 ]
  %2176 = phi i32 [ %663, %678 ], [ %1892, %2161 ]
  %2177 = phi i32 [ %662, %678 ], [ %1893, %2161 ]
  %2178 = phi i32 [ %661, %678 ], [ %1894, %2161 ]
  %2179 = phi i32 [ %660, %678 ], [ %690, %2161 ]
  %2180 = phi ptr [ %659, %678 ], [ %1895, %2161 ]
  %2181 = phi ptr [ %658, %678 ], [ %1896, %2161 ]
  %2182 = phi ptr [ %657, %678 ], [ %1897, %2161 ]
  %2183 = phi i32 [ %681, %678 ], [ %656, %2161 ]
  %2184 = phi i32 [ %655, %678 ], [ %2166, %2161 ]
  %2185 = phi <2 x double> [ %666, %678 ], [ %2163, %2161 ]
  %2186 = add nsw i32 %2183, 1
  %2187 = icmp slt i32 %2186, %630
  br i1 %2187, label %654, label %2188

2188:                                             ; preds = %2173, %618
  %2189 = phi ptr [ null, %618 ], [ %2182, %2173 ]
  %2190 = phi i32 [ 0, %618 ], [ %2184, %2173 ]
  %2191 = phi <2 x double> [ zeroinitializer, %618 ], [ %2185, %2173 ]
  %2192 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 3
  %2193 = load ptr, ptr %2192, align 8, !tbaa !23
  %2194 = icmp sgt i32 %35, 0
  br i1 %2194, label %2195, label %2197

2195:                                             ; preds = %2188
  %2196 = zext i32 %35 to i64
  br label %2223

2197:                                             ; preds = %2223, %2188
  %2198 = phi <4 x double> [ zeroinitializer, %2188 ], [ %2244, %2223 ]
  %2199 = phi <2 x double> [ zeroinitializer, %2188 ], [ %2250, %2223 ]
  %2200 = sitofp i32 %2190 to double
  %2201 = getelementptr inbounds double, ptr %6, i64 22
  %2202 = load double, ptr %2201, align 8, !tbaa !19
  %2203 = fadd double %2202, %2200
  store double %2203, ptr %2201, align 8, !tbaa !19
  %2204 = getelementptr inbounds double, ptr %6, i64 2
  %2205 = load double, ptr %6, align 8, !tbaa !19
  %2206 = extractelement <2 x double> %2191, i64 0
  %2207 = fadd double %2206, %2205
  store double %2207, ptr %6, align 8, !tbaa !19
  %2208 = load <4 x double>, ptr %2204, align 8, !tbaa !19
  %2209 = shufflevector <2 x double> %2191, <2 x double> poison, <4 x i32> <i32 1, i32 poison, i32 poison, i32 poison>
  %2210 = shufflevector <2 x double> %2199, <2 x double> poison, <4 x i32> <i32 poison, i32 1, i32 poison, i32 poison>
  %2211 = shufflevector <4 x double> %2209, <4 x double> %2210, <4 x i32> <i32 0, i32 5, i32 poison, i32 poison>
  %2212 = shufflevector <4 x double> %2211, <4 x double> %2198, <4 x i32> <i32 0, i32 1, i32 4, i32 7>
  %2213 = fadd <4 x double> %2212, %2208
  store <4 x double> %2213, ptr %2204, align 8, !tbaa !19
  %2214 = getelementptr inbounds double, ptr %6, i64 6
  %2215 = load <4 x double>, ptr %2214, align 8, !tbaa !19
  %2216 = fadd <4 x double> %2198, %2215
  store <4 x double> %2216, ptr %2214, align 8, !tbaa !19
  %2217 = getelementptr inbounds double, ptr %6, i64 10
  %2218 = load <2 x double>, ptr %2217, align 8, !tbaa !19
  %2219 = shufflevector <4 x double> %2198, <4 x double> poison, <2 x i32> <i32 2, i32 poison>
  %2220 = shufflevector <2 x double> %2219, <2 x double> %2199, <2 x i32> <i32 0, i32 2>
  %2221 = fadd <2 x double> %2220, %2218
  store <2 x double> %2221, ptr %2217, align 8, !tbaa !19
  %2222 = icmp eq ptr %2189, null
  br i1 %2222, label %2254, label %2253

2223:                                             ; preds = %2195, %2223
  %2224 = phi i64 [ 0, %2195 ], [ %2251, %2223 ]
  %2225 = phi <4 x double> [ zeroinitializer, %2195 ], [ %2244, %2223 ]
  %2226 = phi <2 x double> [ zeroinitializer, %2195 ], [ %2250, %2223 ]
  %2227 = getelementptr inbounds %class.Vector, ptr %624, i64 %2224
  %2228 = getelementptr inbounds %class.Vector, ptr %2193, i64 %2224
  %2229 = load <2 x double>, ptr %2227, align 8, !tbaa !19
  %2230 = load <2 x double>, ptr %2228, align 8, !tbaa !19
  %2231 = fadd <2 x double> %2229, %2230
  store <2 x double> %2231, ptr %2228, align 8, !tbaa !19
  %2232 = getelementptr inbounds %class.Vector, ptr %624, i64 %2224, i32 2
  %2233 = load double, ptr %2232, align 8, !tbaa !87
  %2234 = getelementptr inbounds %class.Vector, ptr %2193, i64 %2224, i32 2
  %2235 = load double, ptr %2234, align 8, !tbaa !87
  %2236 = fadd double %2233, %2235
  store double %2236, ptr %2234, align 8, !tbaa !87
  %2237 = getelementptr inbounds %struct.CompAtom, ptr %38, i64 %2224
  %2238 = load double, ptr %2237, align 8, !tbaa !67
  %2239 = getelementptr inbounds %class.Vector, ptr %2237, i64 0, i32 1
  %2240 = load <2 x double>, ptr %2227, align 8, !tbaa !19
  %2241 = shufflevector <2 x double> %2240, <2 x double> poison, <4 x i32> <i32 0, i32 1, i32 1, i32 0>
  %2242 = load <2 x double>, ptr %2239, align 8, !tbaa !19
  %2243 = shufflevector <2 x double> %2242, <2 x double> poison, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %2244 = tail call <4 x double> @llvm.fmuladd.v4f64(<4 x double> %2241, <4 x double> %2243, <4 x double> %2225)
  %2245 = load double, ptr %2232, align 8, !tbaa !87
  %2246 = shufflevector <2 x double> %2240, <2 x double> poison, <2 x i32> <i32 poison, i32 0>
  %2247 = insertelement <2 x double> %2246, double %2245, i64 0
  %2248 = shufflevector <2 x double> %2242, <2 x double> poison, <2 x i32> <i32 1, i32 poison>
  %2249 = insertelement <2 x double> %2248, double %2238, i64 1
  %2250 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2247, <2 x double> %2249, <2 x double> %2226)
  %2251 = add nuw nsw i64 %2224, 1
  %2252 = icmp eq i64 %2251, %2196
  br i1 %2252, label %2197, label %2223

2253:                                             ; preds = %2197
  tail call void @_ZdaPv(ptr noundef nonnull %2189) #10
  br label %2254

2254:                                             ; preds = %2197, %2253, %1
  ret void
}

; Function Attrs: sspstrong uwtable
define dso_local void @_ZN20ComputeNonbondedUtil19calc_self_fullelectEP9nonbonded(ptr nocapture noundef readonly %0) local_unnamed_addr #0 align 2 {
  %2 = load i32, ptr @_ZN20ComputeNonbondedUtil8commOnlyE, align 4, !tbaa !5
  %3 = icmp eq i32 %2, 0
  br i1 %3, label %4, label %2410

4:                                                ; preds = %1
  %5 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 7
  %6 = load ptr, ptr %5, align 8, !tbaa !9
  %7 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 10
  %8 = load ptr, ptr %7, align 8, !tbaa !14
  %9 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 11
  %10 = load i32, ptr %9, align 8, !tbaa !15
  %11 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 12
  %12 = load i32, ptr %11, align 4, !tbaa !16
  %13 = getelementptr inbounds %class.Pairlists, ptr %8, i64 0, i32 1
  store i32 0, ptr %13, align 8, !tbaa !17
  %14 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 6
  %15 = load <2 x double>, ptr %14, align 8, !tbaa !19
  %16 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 6, i32 2
  %17 = load double, ptr %16, align 8, !tbaa !20
  %18 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 13
  %19 = load double, ptr %18, align 8, !tbaa !21
  %20 = fmul double %19, %19
  %21 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 14
  %22 = load double, ptr %21, align 8, !tbaa !22
  %23 = fmul double %22, %22
  %24 = load double, ptr @_ZN20ComputeNonbondedUtil12dielectric_1E, align 8, !tbaa !19
  %25 = load ptr, ptr @_ZN20ComputeNonbondedUtil7ljTableE, align 8, !tbaa !23
  %26 = load ptr, ptr @_ZN20ComputeNonbondedUtil3molE, align 8, !tbaa !23
  %27 = load ptr, ptr @_ZN20ComputeNonbondedUtil11table_shortE, align 8, !tbaa !23
  %28 = load ptr, ptr @_ZN20ComputeNonbondedUtil10slow_tableE, align 8, !tbaa !23
  %29 = load double, ptr @_ZN20ComputeNonbondedUtil7scalingE, align 8, !tbaa !19
  %30 = load double, ptr @_ZN20ComputeNonbondedUtil7scale14E, align 8, !tbaa !19
  %31 = fsub double 1.000000e+00, %30
  %32 = load double, ptr @_ZN20ComputeNonbondedUtil8r2_deltaE, align 8, !tbaa !19
  %33 = load i32, ptr @_ZN20ComputeNonbondedUtil12r2_delta_expE, align 4, !tbaa !5
  %34 = shl i32 %33, 6
  %35 = add i32 %34, -65472
  %36 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 5
  %37 = load i32, ptr %36, align 8, !tbaa !5
  %38 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 5, i64 1
  %39 = load i32, ptr %38, align 4, !tbaa !5
  %40 = load ptr, ptr %0, align 8, !tbaa !23
  %41 = getelementptr inbounds [2 x ptr], ptr %0, i64 0, i64 1
  %42 = load ptr, ptr %41, align 8, !tbaa !23
  %43 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 1
  %44 = load ptr, ptr %43, align 8, !tbaa !23
  %45 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 1, i64 1
  %46 = load ptr, ptr %45, align 8, !tbaa !23
  %47 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 9
  %48 = load ptr, ptr %47, align 8, !tbaa !24
  %49 = add nsw i32 %39, 5
  %50 = getelementptr inbounds %class.ResizeArray, ptr %48, i64 0, i32 1
  %51 = load ptr, ptr %50, align 8, !tbaa !25
  %52 = getelementptr inbounds %class.ResizeArrayRaw, ptr %51, i64 0, i32 2
  %53 = load i32, ptr %52, align 8, !tbaa !27
  %54 = icmp slt i32 %53, %49
  br i1 %54, label %55, label %93

55:                                               ; preds = %4
  %56 = getelementptr inbounds %class.ResizeArrayRaw, ptr %51, i64 0, i32 3
  %57 = load i32, ptr %56, align 4, !tbaa !30
  %58 = icmp slt i32 %57, %49
  br i1 %58, label %59, label %93

59:                                               ; preds = %55
  %60 = sitofp i32 %57 to float
  %61 = getelementptr inbounds %class.ResizeArrayRaw, ptr %51, i64 0, i32 5
  %62 = load float, ptr %61, align 4, !tbaa !31
  %63 = fmul float %62, %60
  %64 = fptosi float %63 to i32
  %65 = tail call i32 @llvm.smax.i32(i32 %64, i32 %49)
  %66 = sub nsw i32 %65, %57
  %67 = getelementptr inbounds %class.ResizeArrayRaw, ptr %51, i64 0, i32 6
  %68 = load i32, ptr %67, align 8, !tbaa !32
  %69 = icmp slt i32 %66, %68
  %70 = add nsw i32 %68, %57
  %71 = select i1 %69, i32 %70, i32 %65
  %72 = sext i32 %71 to i64
  %73 = shl nsw i64 %72, 1
  %74 = add nsw i64 %73, 31
  %75 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %74) #9
  %76 = getelementptr inbounds i8, ptr %75, i64 31
  %77 = ptrtoint ptr %76 to i64
  %78 = and i64 %77, 31
  %79 = sub nsw i64 0, %78
  %80 = getelementptr inbounds i8, ptr %76, i64 %79
  %81 = load ptr, ptr %51, align 8, !tbaa !33
  %82 = sext i32 %53 to i64
  %83 = shl nsw i64 %82, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %80, ptr align 1 %81, i64 %83, i1 false)
  %84 = icmp eq i32 %57, 0
  br i1 %84, label %90, label %85

85:                                               ; preds = %59
  %86 = getelementptr inbounds %class.ResizeArrayRaw, ptr %51, i64 0, i32 1
  %87 = load ptr, ptr %86, align 8, !tbaa !34
  %88 = icmp eq ptr %87, null
  br i1 %88, label %90, label %89

89:                                               ; preds = %85
  tail call void @_ZdaPv(ptr noundef nonnull %87) #10
  br label %90

90:                                               ; preds = %89, %85, %59
  %91 = getelementptr inbounds %class.ResizeArrayRaw, ptr %51, i64 0, i32 1
  store ptr %75, ptr %91, align 8, !tbaa !34
  store ptr %80, ptr %51, align 8, !tbaa !33
  store i32 %71, ptr %56, align 4, !tbaa !30
  %92 = load ptr, ptr %50, align 8, !tbaa !25
  br label %93

93:                                               ; preds = %4, %55, %90
  %94 = phi ptr [ %51, %4 ], [ %51, %55 ], [ %92, %90 ]
  store i32 %49, ptr %52, align 8, !tbaa !27
  %95 = load ptr, ptr %94, align 8, !tbaa !33
  %96 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %48, i64 0, i32 1, i32 1
  %97 = load ptr, ptr %96, align 8, !tbaa !35
  %98 = getelementptr inbounds %class.ResizeArrayRaw.23, ptr %97, i64 0, i32 2
  %99 = load i32, ptr %98, align 8, !tbaa !37
  %100 = icmp slt i32 %99, %49
  br i1 %100, label %101, label %139

101:                                              ; preds = %93
  %102 = getelementptr inbounds %class.ResizeArrayRaw.23, ptr %97, i64 0, i32 3
  %103 = load i32, ptr %102, align 4, !tbaa !39
  %104 = icmp slt i32 %103, %49
  br i1 %104, label %105, label %139

105:                                              ; preds = %101
  %106 = sitofp i32 %103 to float
  %107 = getelementptr inbounds %class.ResizeArrayRaw.23, ptr %97, i64 0, i32 5
  %108 = load float, ptr %107, align 4, !tbaa !40
  %109 = fmul float %108, %106
  %110 = fptosi float %109 to i32
  %111 = tail call i32 @llvm.smax.i32(i32 %110, i32 %49)
  %112 = sub nsw i32 %111, %103
  %113 = getelementptr inbounds %class.ResizeArrayRaw.23, ptr %97, i64 0, i32 6
  %114 = load i32, ptr %113, align 8, !tbaa !41
  %115 = icmp slt i32 %112, %114
  %116 = add nsw i32 %114, %103
  %117 = select i1 %115, i32 %116, i32 %111
  %118 = sext i32 %117 to i64
  %119 = shl nsw i64 %118, 3
  %120 = add nsw i64 %119, 31
  %121 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %120) #9
  %122 = getelementptr inbounds i8, ptr %121, i64 31
  %123 = ptrtoint ptr %122 to i64
  %124 = and i64 %123, 31
  %125 = sub nsw i64 0, %124
  %126 = getelementptr inbounds i8, ptr %122, i64 %125
  %127 = load ptr, ptr %97, align 8, !tbaa !42
  %128 = sext i32 %99 to i64
  %129 = shl nsw i64 %128, 3
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %126, ptr align 1 %127, i64 %129, i1 false)
  %130 = icmp eq i32 %103, 0
  br i1 %130, label %136, label %131

131:                                              ; preds = %105
  %132 = getelementptr inbounds %class.ResizeArrayRaw.23, ptr %97, i64 0, i32 1
  %133 = load ptr, ptr %132, align 8, !tbaa !43
  %134 = icmp eq ptr %133, null
  br i1 %134, label %136, label %135

135:                                              ; preds = %131
  tail call void @_ZdaPv(ptr noundef nonnull %133) #10
  br label %136

136:                                              ; preds = %135, %131, %105
  %137 = getelementptr inbounds %class.ResizeArrayRaw.23, ptr %97, i64 0, i32 1
  store ptr %121, ptr %137, align 8, !tbaa !43
  store ptr %126, ptr %97, align 8, !tbaa !42
  store i32 %117, ptr %102, align 4, !tbaa !39
  %138 = load ptr, ptr %96, align 8, !tbaa !35
  br label %139

139:                                              ; preds = %93, %101, %136
  %140 = phi ptr [ %97, %93 ], [ %97, %101 ], [ %138, %136 ]
  store i32 %49, ptr %98, align 8, !tbaa !37
  %141 = load ptr, ptr %140, align 8, !tbaa !42
  %142 = getelementptr inbounds i32, ptr %141, i64 1
  %143 = icmp eq i32 %10, 0
  %144 = icmp ne i32 %12, 0
  %145 = select i1 %143, i1 %144, i1 false
  %146 = select i1 %145, i32 0, i32 %49
  %147 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %48, i64 0, i32 2, i32 1
  %148 = load ptr, ptr %147, align 8, !tbaa !25
  %149 = getelementptr inbounds %class.ResizeArrayRaw, ptr %148, i64 0, i32 2
  %150 = load i32, ptr %149, align 8, !tbaa !27
  %151 = icmp slt i32 %150, %146
  br i1 %151, label %152, label %190

152:                                              ; preds = %139
  %153 = getelementptr inbounds %class.ResizeArrayRaw, ptr %148, i64 0, i32 3
  %154 = load i32, ptr %153, align 4, !tbaa !30
  %155 = icmp slt i32 %154, %146
  br i1 %155, label %156, label %190

156:                                              ; preds = %152
  %157 = sitofp i32 %154 to float
  %158 = getelementptr inbounds %class.ResizeArrayRaw, ptr %148, i64 0, i32 5
  %159 = load float, ptr %158, align 4, !tbaa !31
  %160 = fmul float %159, %157
  %161 = fptosi float %160 to i32
  %162 = tail call i32 @llvm.smax.i32(i32 %161, i32 %146)
  %163 = sub nsw i32 %162, %154
  %164 = getelementptr inbounds %class.ResizeArrayRaw, ptr %148, i64 0, i32 6
  %165 = load i32, ptr %164, align 8, !tbaa !32
  %166 = icmp slt i32 %163, %165
  %167 = add nsw i32 %165, %154
  %168 = select i1 %166, i32 %167, i32 %162
  %169 = sext i32 %168 to i64
  %170 = shl nsw i64 %169, 1
  %171 = add nsw i64 %170, 31
  %172 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %171) #9
  %173 = getelementptr inbounds i8, ptr %172, i64 31
  %174 = ptrtoint ptr %173 to i64
  %175 = and i64 %174, 31
  %176 = sub nsw i64 0, %175
  %177 = getelementptr inbounds i8, ptr %173, i64 %176
  %178 = load ptr, ptr %148, align 8, !tbaa !33
  %179 = sext i32 %150 to i64
  %180 = shl nsw i64 %179, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %177, ptr align 1 %178, i64 %180, i1 false)
  %181 = icmp eq i32 %154, 0
  br i1 %181, label %187, label %182

182:                                              ; preds = %156
  %183 = getelementptr inbounds %class.ResizeArrayRaw, ptr %148, i64 0, i32 1
  %184 = load ptr, ptr %183, align 8, !tbaa !34
  %185 = icmp eq ptr %184, null
  br i1 %185, label %187, label %186

186:                                              ; preds = %182
  tail call void @_ZdaPv(ptr noundef nonnull %184) #10
  br label %187

187:                                              ; preds = %186, %182, %156
  %188 = getelementptr inbounds %class.ResizeArrayRaw, ptr %148, i64 0, i32 1
  store ptr %172, ptr %188, align 8, !tbaa !34
  store ptr %177, ptr %148, align 8, !tbaa !33
  store i32 %168, ptr %153, align 4, !tbaa !30
  %189 = load ptr, ptr %147, align 8, !tbaa !25
  br label %190

190:                                              ; preds = %139, %152, %187
  %191 = phi ptr [ %148, %139 ], [ %148, %152 ], [ %189, %187 ]
  store i32 %146, ptr %149, align 8, !tbaa !27
  %192 = load ptr, ptr %191, align 8, !tbaa !33
  %193 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %48, i64 0, i32 3, i32 1
  %194 = load ptr, ptr %193, align 8, !tbaa !25
  %195 = getelementptr inbounds %class.ResizeArrayRaw, ptr %194, i64 0, i32 2
  %196 = load i32, ptr %195, align 8, !tbaa !27
  %197 = icmp slt i32 %196, %146
  br i1 %197, label %198, label %236

198:                                              ; preds = %190
  %199 = getelementptr inbounds %class.ResizeArrayRaw, ptr %194, i64 0, i32 3
  %200 = load i32, ptr %199, align 4, !tbaa !30
  %201 = icmp slt i32 %200, %146
  br i1 %201, label %202, label %236

202:                                              ; preds = %198
  %203 = sitofp i32 %200 to float
  %204 = getelementptr inbounds %class.ResizeArrayRaw, ptr %194, i64 0, i32 5
  %205 = load float, ptr %204, align 4, !tbaa !31
  %206 = fmul float %205, %203
  %207 = fptosi float %206 to i32
  %208 = tail call i32 @llvm.smax.i32(i32 %207, i32 %146)
  %209 = sub nsw i32 %208, %200
  %210 = getelementptr inbounds %class.ResizeArrayRaw, ptr %194, i64 0, i32 6
  %211 = load i32, ptr %210, align 8, !tbaa !32
  %212 = icmp slt i32 %209, %211
  %213 = add nsw i32 %211, %200
  %214 = select i1 %212, i32 %213, i32 %208
  %215 = sext i32 %214 to i64
  %216 = shl nsw i64 %215, 1
  %217 = add nsw i64 %216, 31
  %218 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %217) #9
  %219 = getelementptr inbounds i8, ptr %218, i64 31
  %220 = ptrtoint ptr %219 to i64
  %221 = and i64 %220, 31
  %222 = sub nsw i64 0, %221
  %223 = getelementptr inbounds i8, ptr %219, i64 %222
  %224 = load ptr, ptr %194, align 8, !tbaa !33
  %225 = sext i32 %196 to i64
  %226 = shl nsw i64 %225, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %223, ptr align 1 %224, i64 %226, i1 false)
  %227 = icmp eq i32 %200, 0
  br i1 %227, label %233, label %228

228:                                              ; preds = %202
  %229 = getelementptr inbounds %class.ResizeArrayRaw, ptr %194, i64 0, i32 1
  %230 = load ptr, ptr %229, align 8, !tbaa !34
  %231 = icmp eq ptr %230, null
  br i1 %231, label %233, label %232

232:                                              ; preds = %228
  tail call void @_ZdaPv(ptr noundef nonnull %230) #10
  br label %233

233:                                              ; preds = %232, %228, %202
  %234 = getelementptr inbounds %class.ResizeArrayRaw, ptr %194, i64 0, i32 1
  store ptr %218, ptr %234, align 8, !tbaa !34
  store ptr %223, ptr %194, align 8, !tbaa !33
  store i32 %214, ptr %199, align 4, !tbaa !30
  %235 = load ptr, ptr %193, align 8, !tbaa !25
  br label %236

236:                                              ; preds = %190, %198, %233
  %237 = phi ptr [ %194, %190 ], [ %194, %198 ], [ %235, %233 ]
  store i32 %146, ptr %195, align 8, !tbaa !27
  %238 = load ptr, ptr %237, align 8, !tbaa !33
  %239 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %48, i64 0, i32 4, i32 1
  %240 = load ptr, ptr %239, align 8, !tbaa !25
  %241 = getelementptr inbounds %class.ResizeArrayRaw, ptr %240, i64 0, i32 2
  %242 = load i32, ptr %241, align 8, !tbaa !27
  %243 = icmp slt i32 %242, %146
  br i1 %243, label %244, label %282

244:                                              ; preds = %236
  %245 = getelementptr inbounds %class.ResizeArrayRaw, ptr %240, i64 0, i32 3
  %246 = load i32, ptr %245, align 4, !tbaa !30
  %247 = icmp slt i32 %246, %146
  br i1 %247, label %248, label %282

248:                                              ; preds = %244
  %249 = sitofp i32 %246 to float
  %250 = getelementptr inbounds %class.ResizeArrayRaw, ptr %240, i64 0, i32 5
  %251 = load float, ptr %250, align 4, !tbaa !31
  %252 = fmul float %251, %249
  %253 = fptosi float %252 to i32
  %254 = tail call i32 @llvm.smax.i32(i32 %253, i32 %146)
  %255 = sub nsw i32 %254, %246
  %256 = getelementptr inbounds %class.ResizeArrayRaw, ptr %240, i64 0, i32 6
  %257 = load i32, ptr %256, align 8, !tbaa !32
  %258 = icmp slt i32 %255, %257
  %259 = add nsw i32 %257, %246
  %260 = select i1 %258, i32 %259, i32 %254
  %261 = sext i32 %260 to i64
  %262 = shl nsw i64 %261, 1
  %263 = add nsw i64 %262, 31
  %264 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %263) #9
  %265 = getelementptr inbounds i8, ptr %264, i64 31
  %266 = ptrtoint ptr %265 to i64
  %267 = and i64 %266, 31
  %268 = sub nsw i64 0, %267
  %269 = getelementptr inbounds i8, ptr %265, i64 %268
  %270 = load ptr, ptr %240, align 8, !tbaa !33
  %271 = sext i32 %242 to i64
  %272 = shl nsw i64 %271, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %269, ptr align 1 %270, i64 %272, i1 false)
  %273 = icmp eq i32 %246, 0
  br i1 %273, label %279, label %274

274:                                              ; preds = %248
  %275 = getelementptr inbounds %class.ResizeArrayRaw, ptr %240, i64 0, i32 1
  %276 = load ptr, ptr %275, align 8, !tbaa !34
  %277 = icmp eq ptr %276, null
  br i1 %277, label %279, label %278

278:                                              ; preds = %274
  tail call void @_ZdaPv(ptr noundef nonnull %276) #10
  br label %279

279:                                              ; preds = %278, %274, %248
  %280 = getelementptr inbounds %class.ResizeArrayRaw, ptr %240, i64 0, i32 1
  store ptr %264, ptr %280, align 8, !tbaa !34
  store ptr %269, ptr %240, align 8, !tbaa !33
  store i32 %260, ptr %245, align 4, !tbaa !30
  %281 = load ptr, ptr %239, align 8, !tbaa !25
  br label %282

282:                                              ; preds = %236, %244, %279
  %283 = phi ptr [ %240, %236 ], [ %240, %244 ], [ %281, %279 ]
  store i32 %146, ptr %241, align 8, !tbaa !27
  %284 = load ptr, ptr %283, align 8, !tbaa !33
  %285 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %48, i64 0, i32 5, i32 1
  %286 = load ptr, ptr %285, align 8, !tbaa !25
  %287 = getelementptr inbounds %class.ResizeArrayRaw, ptr %286, i64 0, i32 2
  %288 = load i32, ptr %287, align 8, !tbaa !27
  %289 = icmp slt i32 %288, %146
  br i1 %289, label %290, label %328

290:                                              ; preds = %282
  %291 = getelementptr inbounds %class.ResizeArrayRaw, ptr %286, i64 0, i32 3
  %292 = load i32, ptr %291, align 4, !tbaa !30
  %293 = icmp slt i32 %292, %146
  br i1 %293, label %294, label %328

294:                                              ; preds = %290
  %295 = sitofp i32 %292 to float
  %296 = getelementptr inbounds %class.ResizeArrayRaw, ptr %286, i64 0, i32 5
  %297 = load float, ptr %296, align 4, !tbaa !31
  %298 = fmul float %297, %295
  %299 = fptosi float %298 to i32
  %300 = tail call i32 @llvm.smax.i32(i32 %299, i32 %146)
  %301 = sub nsw i32 %300, %292
  %302 = getelementptr inbounds %class.ResizeArrayRaw, ptr %286, i64 0, i32 6
  %303 = load i32, ptr %302, align 8, !tbaa !32
  %304 = icmp slt i32 %301, %303
  %305 = add nsw i32 %303, %292
  %306 = select i1 %304, i32 %305, i32 %300
  %307 = sext i32 %306 to i64
  %308 = shl nsw i64 %307, 1
  %309 = add nsw i64 %308, 31
  %310 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %309) #9
  %311 = getelementptr inbounds i8, ptr %310, i64 31
  %312 = ptrtoint ptr %311 to i64
  %313 = and i64 %312, 31
  %314 = sub nsw i64 0, %313
  %315 = getelementptr inbounds i8, ptr %311, i64 %314
  %316 = load ptr, ptr %286, align 8, !tbaa !33
  %317 = sext i32 %288 to i64
  %318 = shl nsw i64 %317, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %315, ptr align 1 %316, i64 %318, i1 false)
  %319 = icmp eq i32 %292, 0
  br i1 %319, label %325, label %320

320:                                              ; preds = %294
  %321 = getelementptr inbounds %class.ResizeArrayRaw, ptr %286, i64 0, i32 1
  %322 = load ptr, ptr %321, align 8, !tbaa !34
  %323 = icmp eq ptr %322, null
  br i1 %323, label %325, label %324

324:                                              ; preds = %320
  tail call void @_ZdaPv(ptr noundef nonnull %322) #10
  br label %325

325:                                              ; preds = %324, %320, %294
  %326 = getelementptr inbounds %class.ResizeArrayRaw, ptr %286, i64 0, i32 1
  store ptr %310, ptr %326, align 8, !tbaa !34
  store ptr %315, ptr %286, align 8, !tbaa !33
  store i32 %306, ptr %291, align 4, !tbaa !30
  %327 = load ptr, ptr %285, align 8, !tbaa !25
  br label %328

328:                                              ; preds = %282, %290, %325
  %329 = phi ptr [ %286, %282 ], [ %286, %290 ], [ %327, %325 ]
  store i32 %146, ptr %287, align 8, !tbaa !27
  %330 = load ptr, ptr %329, align 8, !tbaa !33
  %331 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %48, i64 0, i32 6, i32 1
  %332 = load ptr, ptr %331, align 8, !tbaa !25
  %333 = getelementptr inbounds %class.ResizeArrayRaw, ptr %332, i64 0, i32 2
  %334 = load i32, ptr %333, align 8, !tbaa !27
  %335 = icmp slt i32 %334, %146
  br i1 %335, label %336, label %374

336:                                              ; preds = %328
  %337 = getelementptr inbounds %class.ResizeArrayRaw, ptr %332, i64 0, i32 3
  %338 = load i32, ptr %337, align 4, !tbaa !30
  %339 = icmp slt i32 %338, %146
  br i1 %339, label %340, label %374

340:                                              ; preds = %336
  %341 = sitofp i32 %338 to float
  %342 = getelementptr inbounds %class.ResizeArrayRaw, ptr %332, i64 0, i32 5
  %343 = load float, ptr %342, align 4, !tbaa !31
  %344 = fmul float %343, %341
  %345 = fptosi float %344 to i32
  %346 = tail call i32 @llvm.smax.i32(i32 %345, i32 %146)
  %347 = sub nsw i32 %346, %338
  %348 = getelementptr inbounds %class.ResizeArrayRaw, ptr %332, i64 0, i32 6
  %349 = load i32, ptr %348, align 8, !tbaa !32
  %350 = icmp slt i32 %347, %349
  %351 = add nsw i32 %349, %338
  %352 = select i1 %350, i32 %351, i32 %346
  %353 = sext i32 %352 to i64
  %354 = shl nsw i64 %353, 1
  %355 = add nsw i64 %354, 31
  %356 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %355) #9
  %357 = getelementptr inbounds i8, ptr %356, i64 31
  %358 = ptrtoint ptr %357 to i64
  %359 = and i64 %358, 31
  %360 = sub nsw i64 0, %359
  %361 = getelementptr inbounds i8, ptr %357, i64 %360
  %362 = load ptr, ptr %332, align 8, !tbaa !33
  %363 = sext i32 %334 to i64
  %364 = shl nsw i64 %363, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %361, ptr align 1 %362, i64 %364, i1 false)
  %365 = icmp eq i32 %338, 0
  br i1 %365, label %371, label %366

366:                                              ; preds = %340
  %367 = getelementptr inbounds %class.ResizeArrayRaw, ptr %332, i64 0, i32 1
  %368 = load ptr, ptr %367, align 8, !tbaa !34
  %369 = icmp eq ptr %368, null
  br i1 %369, label %371, label %370

370:                                              ; preds = %366
  tail call void @_ZdaPv(ptr noundef nonnull %368) #10
  br label %371

371:                                              ; preds = %370, %366, %340
  %372 = getelementptr inbounds %class.ResizeArrayRaw, ptr %332, i64 0, i32 1
  store ptr %356, ptr %372, align 8, !tbaa !34
  store ptr %361, ptr %332, align 8, !tbaa !33
  store i32 %352, ptr %337, align 4, !tbaa !30
  %373 = load ptr, ptr %331, align 8, !tbaa !25
  br label %374

374:                                              ; preds = %328, %336, %371
  %375 = phi ptr [ %332, %328 ], [ %332, %336 ], [ %373, %371 ]
  store i32 %146, ptr %333, align 8, !tbaa !27
  %376 = load ptr, ptr %375, align 8, !tbaa !33
  %377 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %48, i64 0, i32 15, i32 1
  %378 = load ptr, ptr %377, align 8, !tbaa !25
  %379 = getelementptr inbounds %class.ResizeArrayRaw, ptr %378, i64 0, i32 2
  %380 = load i32, ptr %379, align 8, !tbaa !27
  %381 = icmp slt i32 %380, %146
  br i1 %381, label %382, label %420

382:                                              ; preds = %374
  %383 = getelementptr inbounds %class.ResizeArrayRaw, ptr %378, i64 0, i32 3
  %384 = load i32, ptr %383, align 4, !tbaa !30
  %385 = icmp slt i32 %384, %146
  br i1 %385, label %386, label %420

386:                                              ; preds = %382
  %387 = sitofp i32 %384 to float
  %388 = getelementptr inbounds %class.ResizeArrayRaw, ptr %378, i64 0, i32 5
  %389 = load float, ptr %388, align 4, !tbaa !31
  %390 = fmul float %389, %387
  %391 = fptosi float %390 to i32
  %392 = tail call i32 @llvm.smax.i32(i32 %391, i32 %146)
  %393 = sub nsw i32 %392, %384
  %394 = getelementptr inbounds %class.ResizeArrayRaw, ptr %378, i64 0, i32 6
  %395 = load i32, ptr %394, align 8, !tbaa !32
  %396 = icmp slt i32 %393, %395
  %397 = add nsw i32 %395, %384
  %398 = select i1 %396, i32 %397, i32 %392
  %399 = sext i32 %398 to i64
  %400 = shl nsw i64 %399, 1
  %401 = add nsw i64 %400, 31
  %402 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %401) #9
  %403 = getelementptr inbounds i8, ptr %402, i64 31
  %404 = ptrtoint ptr %403 to i64
  %405 = and i64 %404, 31
  %406 = sub nsw i64 0, %405
  %407 = getelementptr inbounds i8, ptr %403, i64 %406
  %408 = load ptr, ptr %378, align 8, !tbaa !33
  %409 = sext i32 %380 to i64
  %410 = shl nsw i64 %409, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %407, ptr align 1 %408, i64 %410, i1 false)
  %411 = icmp eq i32 %384, 0
  br i1 %411, label %417, label %412

412:                                              ; preds = %386
  %413 = getelementptr inbounds %class.ResizeArrayRaw, ptr %378, i64 0, i32 1
  %414 = load ptr, ptr %413, align 8, !tbaa !34
  %415 = icmp eq ptr %414, null
  br i1 %415, label %417, label %416

416:                                              ; preds = %412
  tail call void @_ZdaPv(ptr noundef nonnull %414) #10
  br label %417

417:                                              ; preds = %416, %412, %386
  %418 = getelementptr inbounds %class.ResizeArrayRaw, ptr %378, i64 0, i32 1
  store ptr %402, ptr %418, align 8, !tbaa !34
  store ptr %407, ptr %378, align 8, !tbaa !33
  store i32 %398, ptr %383, align 4, !tbaa !30
  %419 = load ptr, ptr %377, align 8, !tbaa !25
  br label %420

420:                                              ; preds = %374, %382, %417
  %421 = phi ptr [ %378, %374 ], [ %378, %382 ], [ %419, %417 ]
  store i32 %146, ptr %379, align 8, !tbaa !27
  %422 = load ptr, ptr %421, align 8, !tbaa !33
  %423 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %48, i64 0, i32 16, i32 1
  %424 = load ptr, ptr %423, align 8, !tbaa !25
  %425 = getelementptr inbounds %class.ResizeArrayRaw, ptr %424, i64 0, i32 2
  %426 = load i32, ptr %425, align 8, !tbaa !27
  %427 = icmp slt i32 %426, %146
  br i1 %427, label %428, label %466

428:                                              ; preds = %420
  %429 = getelementptr inbounds %class.ResizeArrayRaw, ptr %424, i64 0, i32 3
  %430 = load i32, ptr %429, align 4, !tbaa !30
  %431 = icmp slt i32 %430, %146
  br i1 %431, label %432, label %466

432:                                              ; preds = %428
  %433 = sitofp i32 %430 to float
  %434 = getelementptr inbounds %class.ResizeArrayRaw, ptr %424, i64 0, i32 5
  %435 = load float, ptr %434, align 4, !tbaa !31
  %436 = fmul float %435, %433
  %437 = fptosi float %436 to i32
  %438 = tail call i32 @llvm.smax.i32(i32 %437, i32 %146)
  %439 = sub nsw i32 %438, %430
  %440 = getelementptr inbounds %class.ResizeArrayRaw, ptr %424, i64 0, i32 6
  %441 = load i32, ptr %440, align 8, !tbaa !32
  %442 = icmp slt i32 %439, %441
  %443 = add nsw i32 %441, %430
  %444 = select i1 %442, i32 %443, i32 %438
  %445 = sext i32 %444 to i64
  %446 = shl nsw i64 %445, 1
  %447 = add nsw i64 %446, 31
  %448 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %447) #9
  %449 = getelementptr inbounds i8, ptr %448, i64 31
  %450 = ptrtoint ptr %449 to i64
  %451 = and i64 %450, 31
  %452 = sub nsw i64 0, %451
  %453 = getelementptr inbounds i8, ptr %449, i64 %452
  %454 = load ptr, ptr %424, align 8, !tbaa !33
  %455 = sext i32 %426 to i64
  %456 = shl nsw i64 %455, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %453, ptr align 1 %454, i64 %456, i1 false)
  %457 = icmp eq i32 %430, 0
  br i1 %457, label %463, label %458

458:                                              ; preds = %432
  %459 = getelementptr inbounds %class.ResizeArrayRaw, ptr %424, i64 0, i32 1
  %460 = load ptr, ptr %459, align 8, !tbaa !34
  %461 = icmp eq ptr %460, null
  br i1 %461, label %463, label %462

462:                                              ; preds = %458
  tail call void @_ZdaPv(ptr noundef nonnull %460) #10
  br label %463

463:                                              ; preds = %462, %458, %432
  %464 = getelementptr inbounds %class.ResizeArrayRaw, ptr %424, i64 0, i32 1
  store ptr %448, ptr %464, align 8, !tbaa !34
  store ptr %453, ptr %424, align 8, !tbaa !33
  store i32 %444, ptr %429, align 4, !tbaa !30
  %465 = load ptr, ptr %423, align 8, !tbaa !25
  br label %466

466:                                              ; preds = %420, %428, %463
  %467 = phi ptr [ %424, %420 ], [ %424, %428 ], [ %465, %463 ]
  store i32 %146, ptr %425, align 8, !tbaa !27
  %468 = load ptr, ptr %467, align 8, !tbaa !33
  br i1 %145, label %610, label %469

469:                                              ; preds = %466
  %470 = icmp sgt i32 %39, 0
  br i1 %470, label %471, label %601

471:                                              ; preds = %469
  %472 = zext i32 %39 to i64
  %473 = and i64 %472, 1
  %474 = icmp eq i32 %39, 1
  br i1 %474, label %507, label %475

475:                                              ; preds = %471
  %476 = and i64 %472, 4294967294
  br label %477

477:                                              ; preds = %502, %475
  %478 = phi i64 [ 0, %475 ], [ %504, %502 ]
  %479 = phi i32 [ 0, %475 ], [ %503, %502 ]
  %480 = phi i64 [ 0, %475 ], [ %505, %502 ]
  %481 = getelementptr inbounds %struct.CompAtom, ptr %42, i64 %478, i32 4
  %482 = load i8, ptr %481, align 1
  %483 = and i8 %482, 7
  %484 = icmp eq i8 %483, 0
  br i1 %484, label %490, label %485

485:                                              ; preds = %477
  %486 = trunc i64 %478 to i16
  %487 = add nsw i32 %479, 1
  %488 = sext i32 %479 to i64
  %489 = getelementptr inbounds i16, ptr %192, i64 %488
  store i16 %486, ptr %489, align 2, !tbaa !44
  br label %490

490:                                              ; preds = %477, %485
  %491 = phi i32 [ %487, %485 ], [ %479, %477 ]
  %492 = or i64 %478, 1
  %493 = getelementptr inbounds %struct.CompAtom, ptr %42, i64 %492, i32 4
  %494 = load i8, ptr %493, align 1
  %495 = and i8 %494, 7
  %496 = icmp eq i8 %495, 0
  br i1 %496, label %502, label %497

497:                                              ; preds = %490
  %498 = trunc i64 %492 to i16
  %499 = add nsw i32 %491, 1
  %500 = sext i32 %491 to i64
  %501 = getelementptr inbounds i16, ptr %192, i64 %500
  store i16 %498, ptr %501, align 2, !tbaa !44
  br label %502

502:                                              ; preds = %497, %490
  %503 = phi i32 [ %499, %497 ], [ %491, %490 ]
  %504 = add nuw nsw i64 %478, 2
  %505 = add i64 %480, 2
  %506 = icmp eq i64 %505, %476
  br i1 %506, label %507, label %477

507:                                              ; preds = %502, %471
  %508 = phi i32 [ undef, %471 ], [ %503, %502 ]
  %509 = phi i64 [ 0, %471 ], [ %504, %502 ]
  %510 = phi i32 [ 0, %471 ], [ %503, %502 ]
  %511 = icmp eq i64 %473, 0
  br i1 %511, label %522, label %512

512:                                              ; preds = %507
  %513 = getelementptr inbounds %struct.CompAtom, ptr %42, i64 %509, i32 4
  %514 = load i8, ptr %513, align 1
  %515 = and i8 %514, 7
  %516 = icmp eq i8 %515, 0
  br i1 %516, label %522, label %517

517:                                              ; preds = %512
  %518 = trunc i64 %509 to i16
  %519 = add nsw i32 %510, 1
  %520 = sext i32 %510 to i64
  %521 = getelementptr inbounds i16, ptr %192, i64 %520
  store i16 %518, ptr %521, align 2, !tbaa !44
  br label %522

522:                                              ; preds = %512, %517, %507
  %523 = phi i32 [ %508, %507 ], [ %519, %517 ], [ %510, %512 ]
  %524 = icmp eq i32 %523, 0
  br i1 %524, label %532, label %525

525:                                              ; preds = %522
  %526 = add nsw i32 %523, -1
  %527 = sext i32 %526 to i64
  %528 = getelementptr inbounds i16, ptr %192, i64 %527
  %529 = load i16, ptr %528, align 2, !tbaa !44
  %530 = sext i32 %523 to i64
  %531 = getelementptr inbounds i16, ptr %192, i64 %530
  store i16 %529, ptr %531, align 2, !tbaa !44
  br label %532

532:                                              ; preds = %525, %522
  %533 = load i32, ptr @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4, !tbaa !5
  %534 = icmp ne i32 %533, 0
  %535 = icmp sgt i32 %523, 0
  %536 = and i1 %534, %535
  br i1 %536, label %537, label %601

537:                                              ; preds = %532
  %538 = zext i32 %523 to i64
  %539 = and i64 %538, 1
  %540 = icmp eq i32 %523, 1
  br i1 %540, label %575, label %541

541:                                              ; preds = %537
  %542 = and i64 %538, 4294967294
  br label %543

543:                                              ; preds = %570, %541
  %544 = phi i64 [ 0, %541 ], [ %572, %570 ]
  %545 = phi i32 [ 0, %541 ], [ %571, %570 ]
  %546 = phi i64 [ 0, %541 ], [ %573, %570 ]
  %547 = getelementptr inbounds i16, ptr %192, i64 %544
  %548 = load i16, ptr %547, align 2, !tbaa !44
  %549 = zext i16 %548 to i64
  %550 = getelementptr inbounds %struct.CompAtomExt, ptr %46, i64 %549
  %551 = load i32, ptr %550, align 4
  %552 = icmp sgt i32 %551, -1
  br i1 %552, label %553, label %557

553:                                              ; preds = %543
  %554 = add nsw i32 %545, 1
  %555 = sext i32 %545 to i64
  %556 = getelementptr inbounds i16, ptr %238, i64 %555
  store i16 %548, ptr %556, align 2, !tbaa !44
  br label %557

557:                                              ; preds = %543, %553
  %558 = phi i32 [ %545, %543 ], [ %554, %553 ]
  %559 = or i64 %544, 1
  %560 = getelementptr inbounds i16, ptr %192, i64 %559
  %561 = load i16, ptr %560, align 2, !tbaa !44
  %562 = zext i16 %561 to i64
  %563 = getelementptr inbounds %struct.CompAtomExt, ptr %46, i64 %562
  %564 = load i32, ptr %563, align 4
  %565 = icmp sgt i32 %564, -1
  br i1 %565, label %566, label %570

566:                                              ; preds = %557
  %567 = add nsw i32 %558, 1
  %568 = sext i32 %558 to i64
  %569 = getelementptr inbounds i16, ptr %238, i64 %568
  store i16 %561, ptr %569, align 2, !tbaa !44
  br label %570

570:                                              ; preds = %566, %557
  %571 = phi i32 [ %558, %557 ], [ %567, %566 ]
  %572 = add nuw nsw i64 %544, 2
  %573 = add i64 %546, 2
  %574 = icmp eq i64 %573, %542
  br i1 %574, label %575, label %543

575:                                              ; preds = %570, %537
  %576 = phi i32 [ undef, %537 ], [ %571, %570 ]
  %577 = phi i64 [ 0, %537 ], [ %572, %570 ]
  %578 = phi i32 [ 0, %537 ], [ %571, %570 ]
  %579 = icmp eq i64 %539, 0
  br i1 %579, label %591, label %580

580:                                              ; preds = %575
  %581 = getelementptr inbounds i16, ptr %192, i64 %577
  %582 = load i16, ptr %581, align 2, !tbaa !44
  %583 = zext i16 %582 to i64
  %584 = getelementptr inbounds %struct.CompAtomExt, ptr %46, i64 %583
  %585 = load i32, ptr %584, align 4
  %586 = icmp sgt i32 %585, -1
  br i1 %586, label %587, label %591

587:                                              ; preds = %580
  %588 = add nsw i32 %578, 1
  %589 = sext i32 %578 to i64
  %590 = getelementptr inbounds i16, ptr %238, i64 %589
  store i16 %582, ptr %590, align 2, !tbaa !44
  br label %591

591:                                              ; preds = %580, %587, %575
  %592 = phi i32 [ %576, %575 ], [ %578, %580 ], [ %588, %587 ]
  %593 = icmp eq i32 %592, 0
  br i1 %593, label %601, label %594

594:                                              ; preds = %591
  %595 = add nsw i32 %592, -1
  %596 = sext i32 %595 to i64
  %597 = getelementptr inbounds i16, ptr %238, i64 %596
  %598 = load i16, ptr %597, align 2, !tbaa !44
  %599 = sext i32 %592 to i64
  %600 = getelementptr inbounds i16, ptr %238, i64 %599
  store i16 %598, ptr %600, align 2, !tbaa !44
  br label %601

601:                                              ; preds = %469, %532, %594, %591
  %602 = phi i32 [ %523, %594 ], [ %523, %591 ], [ %523, %532 ], [ 0, %469 ]
  %603 = phi i32 [ %592, %594 ], [ 0, %591 ], [ 0, %532 ], [ 0, %469 ]
  %604 = load i32, ptr %13, align 8, !tbaa !17
  %605 = add nsw i32 %604, 1
  store i32 %605, ptr %13, align 8, !tbaa !17
  %606 = trunc i32 %37 to i16
  %607 = load ptr, ptr %8, align 8, !tbaa !46
  %608 = sext i32 %604 to i64
  %609 = getelementptr inbounds i16, ptr %607, i64 %608
  store i16 %606, ptr %609, align 2, !tbaa !44
  br label %620

610:                                              ; preds = %466
  %611 = load ptr, ptr %8, align 8, !tbaa !46
  %612 = load i32, ptr %13, align 8, !tbaa !17
  %613 = add nsw i32 %612, 1
  store i32 %613, ptr %13, align 8, !tbaa !17
  %614 = sext i32 %612 to i64
  %615 = getelementptr inbounds i16, ptr %611, i64 %614
  %616 = load i16, ptr %615, align 2, !tbaa !44
  %617 = zext i16 %616 to i32
  %618 = icmp eq i32 %37, %617
  br i1 %618, label %620, label %619

619:                                              ; preds = %610
  tail call void @_Z8NAMD_bugPKc(ptr noundef nonnull @.str)
  br label %620

620:                                              ; preds = %610, %619, %601
  %621 = phi i32 [ 0, %619 ], [ 0, %610 ], [ %602, %601 ]
  %622 = phi i32 [ 0, %619 ], [ 0, %610 ], [ %603, %601 ]
  %623 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %48, i64 0, i32 17, i32 1
  %624 = load ptr, ptr %623, align 8, !tbaa !172
  tail call void @_ZN14ResizeArrayRawI6VectorE6resizeEi(ptr noundef nonnull align 8 dereferenceable(36) %624, i32 noundef %37)
  %625 = load ptr, ptr %623, align 8, !tbaa !172
  %626 = load ptr, ptr %625, align 8, !tbaa !174
  %627 = sext i32 %37 to i64
  %628 = mul nsw i64 %627, 24
  tail call void @llvm.memset.p0.i64(ptr align 1 %626, i8 0, i64 %628, i1 false)
  %629 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %48, i64 0, i32 18, i32 1
  %630 = load ptr, ptr %629, align 8, !tbaa !172
  tail call void @_ZN14ResizeArrayRawI6VectorE6resizeEi(ptr noundef nonnull align 8 dereferenceable(36) %630, i32 noundef %37)
  %631 = load ptr, ptr %629, align 8, !tbaa !172
  %632 = load ptr, ptr %631, align 8, !tbaa !174
  tail call void @llvm.memset.p0.i64(ptr align 1 %632, i8 0, i64 %628, i1 false)
  %633 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 18
  %634 = load i32, ptr %633, align 4, !tbaa !48
  %635 = add nsw i32 %634, -1
  %636 = add nsw i32 %37, -1
  %637 = icmp sgt i32 %37, 1
  br i1 %637, label %638, label %2290

638:                                              ; preds = %620
  %639 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 16
  %640 = load i32, ptr %639, align 4, !tbaa !47
  %641 = getelementptr inbounds %class.Molecule, ptr %26, i64 0, i32 1
  %642 = getelementptr inbounds %class.Molecule, ptr %26, i64 0, i32 4
  %643 = getelementptr inbounds %class.Molecule, ptr %26, i64 0, i32 2
  %644 = getelementptr inbounds %class.Molecule, ptr %26, i64 0, i32 3
  %645 = ptrtoint ptr %422 to i64
  %646 = add nsw i32 %39, 10
  %647 = getelementptr inbounds %class.Pairlists, ptr %8, i64 0, i32 2
  %648 = ptrtoint ptr %468 to i64
  %649 = ptrtoint ptr %330 to i64
  %650 = ptrtoint ptr %376 to i64
  %651 = getelementptr inbounds %class.LJTable, ptr %25, i64 0, i32 1
  %652 = getelementptr inbounds %class.LJTable, ptr %25, i64 0, i32 2
  %653 = fneg double %29
  %654 = fsub double 1.000000e+00, %31
  %655 = fmul double %31, 2.000000e+00
  %656 = fmul double %31, 4.000000e+00
  %657 = fmul double %31, 6.000000e+00
  %658 = sext i32 %621 to i64
  %659 = sext i32 %622 to i64
  %660 = insertelement <2 x double> poison, double %23, i64 0
  %661 = shufflevector <2 x double> %660, <2 x double> poison, <2 x i32> zeroinitializer
  br label %662

662:                                              ; preds = %638, %2276
  %663 = phi i32 [ 0, %638 ], [ %2287, %2276 ]
  %664 = phi i32 [ 0, %638 ], [ %2288, %2276 ]
  %665 = phi ptr [ null, %638 ], [ %2285, %2276 ]
  %666 = phi ptr [ null, %638 ], [ %2284, %2276 ]
  %667 = phi ptr [ null, %638 ], [ %2283, %2276 ]
  %668 = phi i32 [ 0, %638 ], [ %2282, %2276 ]
  %669 = phi i32 [ 0, %638 ], [ %2281, %2276 ]
  %670 = phi i32 [ 0, %638 ], [ %2280, %2276 ]
  %671 = phi i32 [ 0, %638 ], [ %2279, %2276 ]
  %672 = phi i32 [ 0, %638 ], [ %2278, %2276 ]
  %673 = phi i32 [ %640, %638 ], [ %2277, %2276 ]
  %674 = sext i32 %664 to i64
  %675 = getelementptr inbounds %struct.CompAtom, ptr %40, i64 %674
  %676 = getelementptr inbounds %struct.CompAtomExt, ptr %44, i64 %674
  %677 = getelementptr inbounds %struct.CompAtom, ptr %40, i64 %674, i32 4
  %678 = load i8, ptr %677, align 1
  %679 = lshr i8 %678, 3
  %680 = and i8 %679, 15
  %681 = zext i8 %680 to i32
  %682 = icmp eq i8 %680, 0
  br i1 %682, label %689, label %683

683:                                              ; preds = %662
  %684 = icmp eq i32 %673, 0
  br i1 %684, label %689, label %685

685:                                              ; preds = %683
  %686 = add nsw i32 %673, -1
  %687 = add nsw i32 %664, -1
  %688 = add i32 %687, %681
  br label %2276

689:                                              ; preds = %683, %662
  %690 = phi i32 [ %673, %662 ], [ %635, %683 ]
  %691 = load <2 x double>, ptr %675, align 8, !tbaa !19
  %692 = fadd <2 x double> %15, %691
  %693 = getelementptr inbounds %class.Vector, ptr %675, i64 0, i32 2
  %694 = load double, ptr %693, align 8, !tbaa !49
  %695 = fadd double %17, %694
  %696 = add nsw i32 %664, %681
  %697 = select i1 %682, i32 %668, i32 %696
  br i1 %145, label %1864, label %698

698:                                              ; preds = %689
  %699 = load i32, ptr %676, align 4
  %700 = shl i32 %699, 2
  %701 = ashr exact i32 %700, 2
  %702 = load ptr, ptr %641, align 8, !tbaa !51
  %703 = sext i32 %701 to i64
  %704 = getelementptr inbounds %class.ExclusionCheck, ptr %702, i64 %703
  %705 = load i32, ptr %704, align 8, !tbaa !53
  %706 = getelementptr inbounds %class.ExclusionCheck, ptr %702, i64 %703, i32 1
  %707 = load i32, ptr %706, align 4, !tbaa !55
  %708 = getelementptr inbounds %class.ExclusionCheck, ptr %702, i64 %703, i32 2
  %709 = load ptr, ptr %708, align 8, !tbaa !56
  %710 = icmp eq ptr %709, null
  br i1 %710, label %715, label %711

711:                                              ; preds = %698
  %712 = sext i32 %705 to i64
  %713 = sub nsw i64 0, %712
  %714 = getelementptr inbounds i8, ptr %709, i64 %713
  br label %941

715:                                              ; preds = %698
  %716 = icmp eq ptr %665, null
  br i1 %716, label %804, label %717

717:                                              ; preds = %715
  %718 = load i32, ptr %666, align 4, !tbaa !5
  %719 = icmp slt i32 %718, 1
  br i1 %719, label %767, label %720

720:                                              ; preds = %717
  %721 = add nuw i32 %718, 1
  %722 = zext i32 %721 to i64
  %723 = add nsw i64 %722, -1
  %724 = add nsw i64 %722, -2
  %725 = and i64 %723, 3
  %726 = icmp ult i64 %724, 3
  br i1 %726, label %754, label %727

727:                                              ; preds = %720
  %728 = and i64 %723, -4
  br label %729

729:                                              ; preds = %729, %727
  %730 = phi i64 [ 1, %727 ], [ %751, %729 ]
  %731 = phi i64 [ 0, %727 ], [ %752, %729 ]
  %732 = getelementptr inbounds i32, ptr %666, i64 %730
  %733 = load i32, ptr %732, align 4, !tbaa !5
  %734 = sext i32 %733 to i64
  %735 = getelementptr inbounds i8, ptr %665, i64 %734
  store i8 0, ptr %735, align 1, !tbaa !57
  %736 = add nuw nsw i64 %730, 1
  %737 = getelementptr inbounds i32, ptr %666, i64 %736
  %738 = load i32, ptr %737, align 4, !tbaa !5
  %739 = sext i32 %738 to i64
  %740 = getelementptr inbounds i8, ptr %665, i64 %739
  store i8 0, ptr %740, align 1, !tbaa !57
  %741 = add nuw nsw i64 %730, 2
  %742 = getelementptr inbounds i32, ptr %666, i64 %741
  %743 = load i32, ptr %742, align 4, !tbaa !5
  %744 = sext i32 %743 to i64
  %745 = getelementptr inbounds i8, ptr %665, i64 %744
  store i8 0, ptr %745, align 1, !tbaa !57
  %746 = add nuw nsw i64 %730, 3
  %747 = getelementptr inbounds i32, ptr %666, i64 %746
  %748 = load i32, ptr %747, align 4, !tbaa !5
  %749 = sext i32 %748 to i64
  %750 = getelementptr inbounds i8, ptr %665, i64 %749
  store i8 0, ptr %750, align 1, !tbaa !57
  %751 = add nuw nsw i64 %730, 4
  %752 = add i64 %731, 4
  %753 = icmp eq i64 %752, %728
  br i1 %753, label %754, label %729

754:                                              ; preds = %729, %720
  %755 = phi i64 [ 1, %720 ], [ %751, %729 ]
  %756 = icmp eq i64 %725, 0
  br i1 %756, label %767, label %757

757:                                              ; preds = %754, %757
  %758 = phi i64 [ %764, %757 ], [ %755, %754 ]
  %759 = phi i64 [ %765, %757 ], [ 0, %754 ]
  %760 = getelementptr inbounds i32, ptr %666, i64 %758
  %761 = load i32, ptr %760, align 4, !tbaa !5
  %762 = sext i32 %761 to i64
  %763 = getelementptr inbounds i8, ptr %665, i64 %762
  store i8 0, ptr %763, align 1, !tbaa !57
  %764 = add nuw nsw i64 %758, 1
  %765 = add i64 %759, 1
  %766 = icmp eq i64 %765, %725
  br i1 %766, label %767, label %757, !llvm.loop !207

767:                                              ; preds = %754, %757, %717
  %768 = load i32, ptr %667, align 4, !tbaa !5
  %769 = icmp slt i32 %768, 1
  br i1 %769, label %824, label %770

770:                                              ; preds = %767
  %771 = add nuw i32 %768, 1
  %772 = zext i32 %771 to i64
  %773 = add nsw i64 %772, -1
  %774 = add nsw i64 %772, -2
  %775 = and i64 %773, 3
  %776 = icmp ult i64 %774, 3
  br i1 %776, label %811, label %777

777:                                              ; preds = %770
  %778 = and i64 %773, -4
  br label %779

779:                                              ; preds = %779, %777
  %780 = phi i64 [ 1, %777 ], [ %801, %779 ]
  %781 = phi i64 [ 0, %777 ], [ %802, %779 ]
  %782 = getelementptr inbounds i32, ptr %667, i64 %780
  %783 = load i32, ptr %782, align 4, !tbaa !5
  %784 = sext i32 %783 to i64
  %785 = getelementptr inbounds i8, ptr %665, i64 %784
  store i8 0, ptr %785, align 1, !tbaa !57
  %786 = add nuw nsw i64 %780, 1
  %787 = getelementptr inbounds i32, ptr %667, i64 %786
  %788 = load i32, ptr %787, align 4, !tbaa !5
  %789 = sext i32 %788 to i64
  %790 = getelementptr inbounds i8, ptr %665, i64 %789
  store i8 0, ptr %790, align 1, !tbaa !57
  %791 = add nuw nsw i64 %780, 2
  %792 = getelementptr inbounds i32, ptr %667, i64 %791
  %793 = load i32, ptr %792, align 4, !tbaa !5
  %794 = sext i32 %793 to i64
  %795 = getelementptr inbounds i8, ptr %665, i64 %794
  store i8 0, ptr %795, align 1, !tbaa !57
  %796 = add nuw nsw i64 %780, 3
  %797 = getelementptr inbounds i32, ptr %667, i64 %796
  %798 = load i32, ptr %797, align 4, !tbaa !5
  %799 = sext i32 %798 to i64
  %800 = getelementptr inbounds i8, ptr %665, i64 %799
  store i8 0, ptr %800, align 1, !tbaa !57
  %801 = add nuw nsw i64 %780, 4
  %802 = add i64 %781, 4
  %803 = icmp eq i64 %802, %778
  br i1 %803, label %811, label %779

804:                                              ; preds = %715
  %805 = load i32, ptr %642, align 8, !tbaa !60
  %806 = tail call i32 @llvm.smax.i32(i32 %805, i32 -1)
  %807 = sext i32 %806 to i64
  %808 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %807) #9
  %809 = load i32, ptr %642, align 8, !tbaa !60
  %810 = sext i32 %809 to i64
  tail call void @llvm.memset.p0.i64(ptr nonnull align 1 %808, i8 0, i64 %810, i1 false)
  br label %824

811:                                              ; preds = %779, %770
  %812 = phi i64 [ 1, %770 ], [ %801, %779 ]
  %813 = icmp eq i64 %775, 0
  br i1 %813, label %824, label %814

814:                                              ; preds = %811, %814
  %815 = phi i64 [ %821, %814 ], [ %812, %811 ]
  %816 = phi i64 [ %822, %814 ], [ 0, %811 ]
  %817 = getelementptr inbounds i32, ptr %667, i64 %815
  %818 = load i32, ptr %817, align 4, !tbaa !5
  %819 = sext i32 %818 to i64
  %820 = getelementptr inbounds i8, ptr %665, i64 %819
  store i8 0, ptr %820, align 1, !tbaa !57
  %821 = add nuw nsw i64 %815, 1
  %822 = add i64 %816, 1
  %823 = icmp eq i64 %822, %775
  br i1 %823, label %824, label %814, !llvm.loop !208

824:                                              ; preds = %811, %814, %767, %804
  %825 = phi ptr [ %808, %804 ], [ %665, %767 ], [ %665, %814 ], [ %665, %811 ]
  %826 = load i32, ptr %676, align 4
  %827 = shl i32 %826, 2
  %828 = ashr exact i32 %827, 2
  %829 = load ptr, ptr %643, align 8, !tbaa !62
  %830 = sext i32 %828 to i64
  %831 = getelementptr inbounds ptr, ptr %829, i64 %830
  %832 = load ptr, ptr %831, align 8, !tbaa !23
  %833 = load i32, ptr %832, align 4, !tbaa !5
  %834 = icmp slt i32 %833, 1
  br i1 %834, label %887, label %835

835:                                              ; preds = %824
  %836 = add nuw i32 %833, 1
  %837 = zext i32 %836 to i64
  %838 = add nsw i64 %837, -1
  %839 = add nsw i64 %837, -2
  %840 = and i64 %838, 3
  %841 = icmp ult i64 %839, 3
  br i1 %841, label %869, label %842

842:                                              ; preds = %835
  %843 = and i64 %838, -4
  br label %844

844:                                              ; preds = %844, %842
  %845 = phi i64 [ 1, %842 ], [ %866, %844 ]
  %846 = phi i64 [ 0, %842 ], [ %867, %844 ]
  %847 = getelementptr inbounds i32, ptr %832, i64 %845
  %848 = load i32, ptr %847, align 4, !tbaa !5
  %849 = sext i32 %848 to i64
  %850 = getelementptr inbounds i8, ptr %825, i64 %849
  store i8 1, ptr %850, align 1, !tbaa !57
  %851 = add nuw nsw i64 %845, 1
  %852 = getelementptr inbounds i32, ptr %832, i64 %851
  %853 = load i32, ptr %852, align 4, !tbaa !5
  %854 = sext i32 %853 to i64
  %855 = getelementptr inbounds i8, ptr %825, i64 %854
  store i8 1, ptr %855, align 1, !tbaa !57
  %856 = add nuw nsw i64 %845, 2
  %857 = getelementptr inbounds i32, ptr %832, i64 %856
  %858 = load i32, ptr %857, align 4, !tbaa !5
  %859 = sext i32 %858 to i64
  %860 = getelementptr inbounds i8, ptr %825, i64 %859
  store i8 1, ptr %860, align 1, !tbaa !57
  %861 = add nuw nsw i64 %845, 3
  %862 = getelementptr inbounds i32, ptr %832, i64 %861
  %863 = load i32, ptr %862, align 4, !tbaa !5
  %864 = sext i32 %863 to i64
  %865 = getelementptr inbounds i8, ptr %825, i64 %864
  store i8 1, ptr %865, align 1, !tbaa !57
  %866 = add nuw nsw i64 %845, 4
  %867 = add i64 %846, 4
  %868 = icmp eq i64 %867, %843
  br i1 %868, label %869, label %844

869:                                              ; preds = %844, %835
  %870 = phi i64 [ 1, %835 ], [ %866, %844 ]
  %871 = icmp eq i64 %840, 0
  br i1 %871, label %882, label %872

872:                                              ; preds = %869, %872
  %873 = phi i64 [ %879, %872 ], [ %870, %869 ]
  %874 = phi i64 [ %880, %872 ], [ 0, %869 ]
  %875 = getelementptr inbounds i32, ptr %832, i64 %873
  %876 = load i32, ptr %875, align 4, !tbaa !5
  %877 = sext i32 %876 to i64
  %878 = getelementptr inbounds i8, ptr %825, i64 %877
  store i8 1, ptr %878, align 1, !tbaa !57
  %879 = add nuw nsw i64 %873, 1
  %880 = add i64 %874, 1
  %881 = icmp eq i64 %880, %840
  br i1 %881, label %882, label %872, !llvm.loop !209

882:                                              ; preds = %872, %869
  %883 = load i32, ptr %676, align 4
  %884 = shl i32 %883, 2
  %885 = ashr exact i32 %884, 2
  %886 = sext i32 %885 to i64
  br label %887

887:                                              ; preds = %882, %824
  %888 = phi i64 [ %886, %882 ], [ %830, %824 ]
  %889 = load ptr, ptr %644, align 8, !tbaa !64
  %890 = getelementptr inbounds ptr, ptr %889, i64 %888
  %891 = load ptr, ptr %890, align 8, !tbaa !23
  %892 = load i32, ptr %891, align 4, !tbaa !5
  %893 = icmp slt i32 %892, 1
  br i1 %893, label %941, label %894

894:                                              ; preds = %887
  %895 = add nuw i32 %892, 1
  %896 = zext i32 %895 to i64
  %897 = add nsw i64 %896, -1
  %898 = add nsw i64 %896, -2
  %899 = and i64 %897, 3
  %900 = icmp ult i64 %898, 3
  br i1 %900, label %928, label %901

901:                                              ; preds = %894
  %902 = and i64 %897, -4
  br label %903

903:                                              ; preds = %903, %901
  %904 = phi i64 [ 1, %901 ], [ %925, %903 ]
  %905 = phi i64 [ 0, %901 ], [ %926, %903 ]
  %906 = getelementptr inbounds i32, ptr %891, i64 %904
  %907 = load i32, ptr %906, align 4, !tbaa !5
  %908 = sext i32 %907 to i64
  %909 = getelementptr inbounds i8, ptr %825, i64 %908
  store i8 2, ptr %909, align 1, !tbaa !57
  %910 = add nuw nsw i64 %904, 1
  %911 = getelementptr inbounds i32, ptr %891, i64 %910
  %912 = load i32, ptr %911, align 4, !tbaa !5
  %913 = sext i32 %912 to i64
  %914 = getelementptr inbounds i8, ptr %825, i64 %913
  store i8 2, ptr %914, align 1, !tbaa !57
  %915 = add nuw nsw i64 %904, 2
  %916 = getelementptr inbounds i32, ptr %891, i64 %915
  %917 = load i32, ptr %916, align 4, !tbaa !5
  %918 = sext i32 %917 to i64
  %919 = getelementptr inbounds i8, ptr %825, i64 %918
  store i8 2, ptr %919, align 1, !tbaa !57
  %920 = add nuw nsw i64 %904, 3
  %921 = getelementptr inbounds i32, ptr %891, i64 %920
  %922 = load i32, ptr %921, align 4, !tbaa !5
  %923 = sext i32 %922 to i64
  %924 = getelementptr inbounds i8, ptr %825, i64 %923
  store i8 2, ptr %924, align 1, !tbaa !57
  %925 = add nuw nsw i64 %904, 4
  %926 = add i64 %905, 4
  %927 = icmp eq i64 %926, %902
  br i1 %927, label %928, label %903

928:                                              ; preds = %903, %894
  %929 = phi i64 [ 1, %894 ], [ %925, %903 ]
  %930 = icmp eq i64 %899, 0
  br i1 %930, label %941, label %931

931:                                              ; preds = %928, %931
  %932 = phi i64 [ %938, %931 ], [ %929, %928 ]
  %933 = phi i64 [ %939, %931 ], [ 0, %928 ]
  %934 = getelementptr inbounds i32, ptr %891, i64 %932
  %935 = load i32, ptr %934, align 4, !tbaa !5
  %936 = sext i32 %935 to i64
  %937 = getelementptr inbounds i8, ptr %825, i64 %936
  store i8 2, ptr %937, align 1, !tbaa !57
  %938 = add nuw nsw i64 %932, 1
  %939 = add i64 %933, 1
  %940 = icmp eq i64 %939, %899
  br i1 %940, label %941, label %931, !llvm.loop !210

941:                                              ; preds = %928, %931, %887, %711
  %942 = phi ptr [ %714, %711 ], [ %825, %887 ], [ %825, %931 ], [ %825, %928 ]
  %943 = phi ptr [ %667, %711 ], [ %891, %887 ], [ %891, %931 ], [ %891, %928 ]
  %944 = phi ptr [ %666, %711 ], [ %832, %887 ], [ %832, %931 ], [ %832, %928 ]
  %945 = phi ptr [ %665, %711 ], [ %825, %887 ], [ %825, %931 ], [ %825, %928 ]
  %946 = load i8, ptr %677, align 1
  %947 = and i8 %946, 7
  %948 = icmp eq i8 %947, 0
  br i1 %948, label %1242, label %949

949:                                              ; preds = %941
  %950 = load i32, ptr @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4, !tbaa !5
  %951 = icmp eq i32 %950, 0
  br i1 %951, label %955, label %952

952:                                              ; preds = %949
  %953 = load i32, ptr %676, align 4
  %954 = icmp slt i32 %953, 0
  br label %955

955:                                              ; preds = %952, %949
  %956 = phi i1 [ false, %949 ], [ %954, %952 ]
  %957 = and i8 %946, 120
  %958 = icmp eq i8 %957, 0
  br i1 %958, label %990, label %959

959:                                              ; preds = %955
  %960 = icmp slt i32 %669, %621
  br i1 %960, label %961, label %974

961:                                              ; preds = %959
  %962 = sext i32 %669 to i64
  br label %963

963:                                              ; preds = %961, %969
  %964 = phi i64 [ %962, %961 ], [ %970, %969 ]
  %965 = getelementptr inbounds i16, ptr %192, i64 %964
  %966 = load i16, ptr %965, align 2, !tbaa !44
  %967 = zext i16 %966 to i32
  %968 = icmp sgt i32 %697, %967
  br i1 %968, label %969, label %972

969:                                              ; preds = %963
  %970 = add nsw i64 %964, 1
  %971 = icmp eq i64 %970, %658
  br i1 %971, label %974, label %963

972:                                              ; preds = %963
  %973 = trunc i64 %964 to i32
  br label %974

974:                                              ; preds = %969, %972, %959
  %975 = phi i32 [ %669, %959 ], [ %973, %972 ], [ %621, %969 ]
  %976 = icmp slt i32 %670, %622
  br i1 %976, label %977, label %990

977:                                              ; preds = %974
  %978 = sext i32 %670 to i64
  br label %979

979:                                              ; preds = %977, %985
  %980 = phi i64 [ %978, %977 ], [ %986, %985 ]
  %981 = getelementptr inbounds i16, ptr %238, i64 %980
  %982 = load i16, ptr %981, align 2, !tbaa !44
  %983 = zext i16 %982 to i32
  %984 = icmp sgt i32 %697, %983
  br i1 %984, label %985, label %988

985:                                              ; preds = %979
  %986 = add nsw i64 %980, 1
  %987 = icmp eq i64 %986, %659
  br i1 %987, label %990, label %979

988:                                              ; preds = %979
  %989 = trunc i64 %980 to i32
  br label %990

990:                                              ; preds = %985, %988, %974, %955
  %991 = phi i32 [ %670, %955 ], [ %670, %974 ], [ %989, %988 ], [ %622, %985 ]
  %992 = phi i32 [ %669, %955 ], [ %975, %974 ], [ %975, %988 ], [ %975, %985 ]
  %993 = add nsw i32 %664, 1
  %994 = icmp slt i32 %993, %697
  br i1 %994, label %995, label %1060

995:                                              ; preds = %990
  %996 = xor i32 %664, -1
  %997 = add i32 %697, %996
  %998 = zext i32 %997 to i64
  %999 = icmp ult i32 %997, 8
  br i1 %999, label %1049, label %1000

1000:                                             ; preds = %995
  %1001 = icmp ult i32 %997, 64
  br i1 %1001, label %1030, label %1002

1002:                                             ; preds = %1000
  %1003 = and i64 %998, 4294967232
  %1004 = trunc i32 %993 to i16
  %1005 = insertelement <16 x i16> poison, i16 %1004, i64 0
  %1006 = shufflevector <16 x i16> %1005, <16 x i16> poison, <16 x i32> zeroinitializer
  %1007 = add <16 x i16> %1006, <i16 0, i16 1, i16 2, i16 3, i16 4, i16 5, i16 6, i16 7, i16 8, i16 9, i16 10, i16 11, i16 12, i16 13, i16 14, i16 15>
  %1008 = trunc i64 %1003 to i32
  %1009 = add i32 %993, %1008
  br label %1010

1010:                                             ; preds = %1010, %1002
  %1011 = phi i64 [ 0, %1002 ], [ %1020, %1010 ]
  %1012 = phi <16 x i16> [ %1007, %1002 ], [ %1021, %1010 ]
  %1013 = add <16 x i16> %1012, <i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16>
  %1014 = add <16 x i16> %1012, <i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32>
  %1015 = add <16 x i16> %1012, <i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48>
  %1016 = getelementptr inbounds i16, ptr %422, i64 %1011
  store <16 x i16> %1012, ptr %1016, align 2, !tbaa !44
  %1017 = getelementptr inbounds i16, ptr %1016, i64 16
  store <16 x i16> %1013, ptr %1017, align 2, !tbaa !44
  %1018 = getelementptr inbounds i16, ptr %1016, i64 32
  store <16 x i16> %1014, ptr %1018, align 2, !tbaa !44
  %1019 = getelementptr inbounds i16, ptr %1016, i64 48
  store <16 x i16> %1015, ptr %1019, align 2, !tbaa !44
  %1020 = add nuw i64 %1011, 64
  %1021 = add <16 x i16> %1012, <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>
  %1022 = icmp eq i64 %1020, %1003
  br i1 %1022, label %1023, label %1010, !llvm.loop !211

1023:                                             ; preds = %1010
  %1024 = icmp eq i64 %1003, %998
  br i1 %1024, label %1060, label %1025

1025:                                             ; preds = %1023
  %1026 = trunc i64 %1003 to i32
  %1027 = add i32 %993, %1026
  %1028 = and i64 %998, 56
  %1029 = icmp eq i64 %1028, 0
  br i1 %1029, label %1049, label %1030

1030:                                             ; preds = %1000, %1025
  %1031 = phi i32 [ %1009, %1025 ], [ %993, %1000 ]
  %1032 = phi i64 [ %1003, %1025 ], [ 0, %1000 ]
  %1033 = and i64 %998, 4294967288
  %1034 = trunc i64 %1033 to i32
  %1035 = add i32 %993, %1034
  %1036 = trunc i32 %1031 to i16
  %1037 = insertelement <8 x i16> poison, i16 %1036, i64 0
  %1038 = shufflevector <8 x i16> %1037, <8 x i16> poison, <8 x i32> zeroinitializer
  %1039 = add <8 x i16> %1038, <i16 0, i16 1, i16 2, i16 3, i16 4, i16 5, i16 6, i16 7>
  br label %1040

1040:                                             ; preds = %1040, %1030
  %1041 = phi i64 [ %1032, %1030 ], [ %1044, %1040 ]
  %1042 = phi <8 x i16> [ %1039, %1030 ], [ %1045, %1040 ]
  %1043 = getelementptr inbounds i16, ptr %422, i64 %1041
  store <8 x i16> %1042, ptr %1043, align 2, !tbaa !44
  %1044 = add nuw i64 %1041, 8
  %1045 = add <8 x i16> %1042, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %1046 = icmp eq i64 %1044, %1033
  br i1 %1046, label %1047, label %1040, !llvm.loop !212

1047:                                             ; preds = %1040
  %1048 = icmp eq i64 %1033, %998
  br i1 %1048, label %1060, label %1049

1049:                                             ; preds = %995, %1025, %1047
  %1050 = phi i64 [ 0, %995 ], [ %1003, %1025 ], [ %1033, %1047 ]
  %1051 = phi i32 [ %993, %995 ], [ %1027, %1025 ], [ %1035, %1047 ]
  br label %1052

1052:                                             ; preds = %1049, %1052
  %1053 = phi i64 [ %1056, %1052 ], [ %1050, %1049 ]
  %1054 = phi i32 [ %1058, %1052 ], [ %1051, %1049 ]
  %1055 = trunc i32 %1054 to i16
  %1056 = add nuw nsw i64 %1053, 1
  %1057 = getelementptr inbounds i16, ptr %422, i64 %1053
  store i16 %1055, ptr %1057, align 2, !tbaa !44
  %1058 = add nsw i32 %1054, 1
  %1059 = icmp eq i64 %1056, %998
  br i1 %1059, label %1060, label %1052, !llvm.loop !213

1060:                                             ; preds = %1052, %1023, %1047, %990
  %1061 = phi i32 [ 0, %990 ], [ %997, %1047 ], [ %997, %1023 ], [ %997, %1052 ]
  %1062 = zext i32 %1061 to i64
  %1063 = getelementptr inbounds i16, ptr %422, i64 %1062
  %1064 = select i1 %956, ptr %238, ptr %192
  %1065 = select i1 %956, i32 %991, i32 %992
  %1066 = select i1 %956, i32 %622, i32 %621
  %1067 = icmp slt i32 %1065, %1066
  br i1 %1067, label %1068, label %1227

1068:                                             ; preds = %1060
  %1069 = sub nsw i32 %1066, %1065
  %1070 = icmp sgt i32 %1069, 6
  br i1 %1070, label %1071, label %1164

1071:                                             ; preds = %1068
  %1072 = add nsw i32 %1066, -2
  %1073 = add nsw i32 %1065, 2
  %1074 = icmp slt i32 %1073, %1072
  br i1 %1074, label %1075, label %1164

1075:                                             ; preds = %1071
  %1076 = add nsw i32 %1065, 1
  %1077 = sext i32 %1076 to i64
  %1078 = getelementptr inbounds i16, ptr %1064, i64 %1077
  %1079 = load i16, ptr %1078, align 2, !tbaa !44
  %1080 = zext i16 %1079 to i64
  %1081 = getelementptr inbounds %struct.CompAtom, ptr %42, i64 %1080
  %1082 = getelementptr inbounds %class.Vector, ptr %1081, i64 0, i32 2
  %1083 = load double, ptr %1082, align 8, !tbaa !49
  %1084 = sext i32 %1065 to i64
  %1085 = getelementptr inbounds i16, ptr %1064, i64 %1084
  %1086 = load i16, ptr %1085, align 2, !tbaa !44
  %1087 = zext i16 %1086 to i64
  %1088 = getelementptr inbounds %struct.CompAtom, ptr %42, i64 %1087
  %1089 = getelementptr inbounds %class.Vector, ptr %1088, i64 0, i32 2
  %1090 = load double, ptr %1089, align 8, !tbaa !49
  %1091 = getelementptr inbounds %class.Vector, ptr %1081, i64 0, i32 1
  %1092 = load double, ptr %1091, align 8, !tbaa !66
  %1093 = getelementptr inbounds %class.Vector, ptr %1088, i64 0, i32 1
  %1094 = load double, ptr %1093, align 8, !tbaa !66
  %1095 = load double, ptr %1081, align 8, !tbaa !67
  %1096 = load double, ptr %1088, align 8, !tbaa !67
  %1097 = sext i32 %1073 to i64
  %1098 = sext i32 %1072 to i64
  %1099 = insertelement <2 x double> poison, double %1083, i64 0
  %1100 = insertelement <2 x double> %1099, double %1090, i64 1
  %1101 = insertelement <2 x double> poison, double %1092, i64 0
  %1102 = insertelement <2 x double> %1101, double %1094, i64 1
  %1103 = insertelement <2 x double> poison, double %1095, i64 0
  %1104 = insertelement <2 x double> %1103, double %1096, i64 1
  %1105 = insertelement <2 x double> poison, double %695, i64 0
  %1106 = shufflevector <2 x double> %1105, <2 x double> poison, <2 x i32> zeroinitializer
  %1107 = shufflevector <2 x double> %692, <2 x double> poison, <2 x i32> <i32 1, i32 1>
  %1108 = shufflevector <2 x double> %692, <2 x double> poison, <2 x i32> zeroinitializer
  br label %1109

1109:                                             ; preds = %1075, %1109
  %1110 = phi i64 [ %1097, %1075 ], [ %1155, %1109 ]
  %1111 = phi i32 [ %1065, %1075 ], [ %1157, %1109 ]
  %1112 = phi i32 [ 0, %1075 ], [ %1154, %1109 ]
  %1113 = phi i16 [ %1086, %1075 ], [ %1120, %1109 ]
  %1114 = phi i16 [ %1079, %1075 ], [ %1124, %1109 ]
  %1115 = phi <2 x double> [ %1100, %1075 ], [ %1159, %1109 ]
  %1116 = phi <2 x double> [ %1102, %1075 ], [ %1161, %1109 ]
  %1117 = phi <2 x double> [ %1104, %1075 ], [ %1163, %1109 ]
  %1118 = fsub <2 x double> %1106, %1115
  %1119 = getelementptr inbounds i16, ptr %1064, i64 %1110
  %1120 = load i16, ptr %1119, align 2, !tbaa !44
  %1121 = add nsw i32 %1111, 3
  %1122 = sext i32 %1121 to i64
  %1123 = getelementptr inbounds i16, ptr %1064, i64 %1122
  %1124 = load i16, ptr %1123, align 2, !tbaa !44
  %1125 = zext i16 %1120 to i64
  %1126 = getelementptr inbounds %struct.CompAtom, ptr %42, i64 %1125
  %1127 = load double, ptr %1126, align 8, !tbaa !67
  %1128 = zext i16 %1124 to i64
  %1129 = getelementptr inbounds %struct.CompAtom, ptr %42, i64 %1128
  %1130 = load double, ptr %1129, align 8, !tbaa !67
  %1131 = getelementptr inbounds %class.Vector, ptr %1126, i64 0, i32 1
  %1132 = load double, ptr %1131, align 8, !tbaa !66
  %1133 = getelementptr inbounds %class.Vector, ptr %1129, i64 0, i32 1
  %1134 = load double, ptr %1133, align 8, !tbaa !66
  %1135 = getelementptr inbounds %class.Vector, ptr %1126, i64 0, i32 2
  %1136 = load double, ptr %1135, align 8, !tbaa !49
  %1137 = getelementptr inbounds %class.Vector, ptr %1129, i64 0, i32 2
  %1138 = load double, ptr %1137, align 8, !tbaa !49
  %1139 = fsub <2 x double> %1108, %1117
  %1140 = fmul <2 x double> %1139, %1139
  %1141 = fsub <2 x double> %1107, %1116
  %1142 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %1141, <2 x double> %1141, <2 x double> %1140)
  %1143 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %1118, <2 x double> %1118, <2 x double> %1142)
  %1144 = fcmp olt <2 x double> %1143, %661
  %1145 = zext i32 %1112 to i64
  %1146 = getelementptr inbounds i16, ptr %284, i64 %1145
  store i16 %1113, ptr %1146, align 2, !tbaa !44
  %1147 = extractelement <2 x i1> %1144, i64 1
  %1148 = zext i1 %1147 to i32
  %1149 = add nuw nsw i32 %1112, %1148
  %1150 = zext i32 %1149 to i64
  %1151 = getelementptr inbounds i16, ptr %284, i64 %1150
  store i16 %1114, ptr %1151, align 2, !tbaa !44
  %1152 = extractelement <2 x i1> %1144, i64 0
  %1153 = zext i1 %1152 to i32
  %1154 = add i32 %1149, %1153
  %1155 = add nsw i64 %1110, 2
  %1156 = icmp slt i64 %1155, %1098
  %1157 = trunc i64 %1110 to i32
  %1158 = insertelement <2 x double> poison, double %1138, i64 0
  %1159 = insertelement <2 x double> %1158, double %1136, i64 1
  %1160 = insertelement <2 x double> poison, double %1134, i64 0
  %1161 = insertelement <2 x double> %1160, double %1132, i64 1
  %1162 = insertelement <2 x double> poison, double %1130, i64 0
  %1163 = insertelement <2 x double> %1162, double %1127, i64 1
  br i1 %1156, label %1109, label %1164

1164:                                             ; preds = %1109, %1071, %1068
  %1165 = phi i32 [ 0, %1068 ], [ 0, %1071 ], [ %1154, %1109 ]
  %1166 = phi i32 [ %1065, %1068 ], [ %1065, %1071 ], [ %1157, %1109 ]
  %1167 = icmp slt i32 %1166, %1066
  br i1 %1167, label %1168, label %1173

1168:                                             ; preds = %1164
  %1169 = sext i32 %1166 to i64
  %1170 = sext i32 %1066 to i64
  %1171 = extractelement <2 x double> %692, i64 0
  %1172 = extractelement <2 x double> %692, i64 1
  br label %1178

1173:                                             ; preds = %1201, %1164
  %1174 = phi i32 [ %1165, %1164 ], [ %1202, %1201 ]
  %1175 = icmp sgt i32 %1174, 0
  br i1 %1175, label %1176, label %1227

1176:                                             ; preds = %1173
  %1177 = zext i32 %1174 to i64
  br label %1205

1178:                                             ; preds = %1168, %1201
  %1179 = phi i64 [ %1169, %1168 ], [ %1203, %1201 ]
  %1180 = phi i32 [ %1165, %1168 ], [ %1202, %1201 ]
  %1181 = getelementptr inbounds i16, ptr %1064, i64 %1179
  %1182 = load i16, ptr %1181, align 2, !tbaa !44
  %1183 = zext i16 %1182 to i64
  %1184 = getelementptr inbounds %struct.CompAtom, ptr %42, i64 %1183
  %1185 = load double, ptr %1184, align 8, !tbaa !67
  %1186 = getelementptr inbounds %class.Vector, ptr %1184, i64 0, i32 1
  %1187 = load double, ptr %1186, align 8, !tbaa !66
  %1188 = getelementptr inbounds %class.Vector, ptr %1184, i64 0, i32 2
  %1189 = load double, ptr %1188, align 8, !tbaa !49
  %1190 = fsub double %1171, %1185
  %1191 = fmul double %1190, %1190
  %1192 = fsub double %1172, %1187
  %1193 = tail call double @llvm.fmuladd.f64(double %1192, double %1192, double %1191)
  %1194 = fsub double %695, %1189
  %1195 = tail call double @llvm.fmuladd.f64(double %1194, double %1194, double %1193)
  %1196 = fcmp ugt double %1195, %23
  br i1 %1196, label %1201, label %1197

1197:                                             ; preds = %1178
  %1198 = add nsw i32 %1180, 1
  %1199 = sext i32 %1180 to i64
  %1200 = getelementptr inbounds i16, ptr %284, i64 %1199
  store i16 %1182, ptr %1200, align 2, !tbaa !44
  br label %1201

1201:                                             ; preds = %1197, %1178
  %1202 = phi i32 [ %1198, %1197 ], [ %1180, %1178 ]
  %1203 = add nsw i64 %1179, 1
  %1204 = icmp eq i64 %1203, %1170
  br i1 %1204, label %1173, label %1178

1205:                                             ; preds = %1176, %1222
  %1206 = phi i64 [ 0, %1176 ], [ %1225, %1222 ]
  %1207 = phi ptr [ %1063, %1176 ], [ %1224, %1222 ]
  %1208 = getelementptr inbounds i16, ptr %284, i64 %1206
  %1209 = load i16, ptr %1208, align 2, !tbaa !44
  %1210 = zext i16 %1209 to i64
  %1211 = getelementptr inbounds %struct.CompAtom, ptr %42, i64 %1210, i32 4
  %1212 = load i8, ptr %1211, align 1
  %1213 = and i8 %1212, 7
  store i16 %1209, ptr %1207, align 2, !tbaa !44
  %1214 = getelementptr inbounds i16, ptr %1207, i64 1
  %1215 = insertelement <2 x i16> poison, i16 %1209, i64 0
  %1216 = shufflevector <2 x i16> %1215, <2 x i16> poison, <2 x i32> zeroinitializer
  %1217 = add <2 x i16> %1216, <i16 1, i16 2>
  store <2 x i16> %1217, ptr %1214, align 2, !tbaa !44
  %1218 = icmp ult i8 %1213, 4
  br i1 %1218, label %1222, label %1219

1219:                                             ; preds = %1205
  %1220 = add <2 x i16> %1216, <i16 3, i16 4>
  %1221 = getelementptr inbounds i16, ptr %1207, i64 3
  store <2 x i16> %1220, ptr %1221, align 2, !tbaa !44
  br label %1222

1222:                                             ; preds = %1219, %1205
  %1223 = zext i8 %1213 to i64
  %1224 = getelementptr inbounds i16, ptr %1207, i64 %1223
  %1225 = add nuw nsw i64 %1206, 1
  %1226 = icmp eq i64 %1225, %1177
  br i1 %1226, label %1227, label %1205

1227:                                             ; preds = %1222, %1173, %1060
  %1228 = phi ptr [ %1063, %1060 ], [ %1063, %1173 ], [ %1224, %1222 ]
  %1229 = ptrtoint ptr %1228 to i64
  %1230 = sub i64 %1229, %645
  %1231 = lshr exact i64 %1230, 1
  %1232 = trunc i64 %1231 to i32
  %1233 = icmp eq i32 %1232, 0
  br i1 %1233, label %1245, label %1234

1234:                                             ; preds = %1227
  %1235 = shl i64 %1230, 31
  %1236 = add i64 %1235, -4294967296
  %1237 = ashr i64 %1236, 32
  %1238 = getelementptr inbounds i16, ptr %422, i64 %1237
  %1239 = load i16, ptr %1238, align 2, !tbaa !44
  %1240 = ashr i64 %1235, 32
  %1241 = getelementptr inbounds i16, ptr %422, i64 %1240
  store i16 %1239, ptr %1241, align 2, !tbaa !44
  br label %1245

1242:                                             ; preds = %941
  %1243 = add nsw i32 %672, 1
  %1244 = load i32, ptr @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4, !tbaa !5
  br label %1245

1245:                                             ; preds = %1227, %1234, %1242
  %1246 = phi i32 [ %1244, %1242 ], [ %950, %1234 ], [ %950, %1227 ]
  %1247 = phi i32 [ %1243, %1242 ], [ 0, %1234 ], [ 0, %1227 ]
  %1248 = phi i32 [ %671, %1242 ], [ %1232, %1234 ], [ 0, %1227 ]
  %1249 = phi i32 [ %670, %1242 ], [ %991, %1234 ], [ %991, %1227 ]
  %1250 = phi i32 [ %669, %1242 ], [ %992, %1234 ], [ %992, %1227 ]
  %1251 = icmp eq i32 %1246, 0
  br i1 %1251, label %1256, label %1252

1252:                                             ; preds = %1245
  %1253 = load i32, ptr %676, align 4
  %1254 = and i32 %1253, 1073741824
  %1255 = icmp ne i32 %1254, 0
  br label %1256

1256:                                             ; preds = %1252, %1245
  %1257 = phi i1 [ false, %1245 ], [ %1255, %1252 ]
  %1258 = load i32, ptr %13, align 8, !tbaa !17
  %1259 = add nsw i32 %646, %1258
  %1260 = load i32, ptr %647, align 4, !tbaa !68
  %1261 = icmp sgt i32 %1260, %1259
  br i1 %1261, label %1277, label %1262

1262:                                             ; preds = %1256, %1262
  %1263 = phi i32 [ %1265, %1262 ], [ %1260, %1256 ]
  %1264 = ashr i32 %1263, 1
  %1265 = add nsw i32 %1264, %1263
  %1266 = icmp sgt i32 %1265, %1259
  br i1 %1266, label %1267, label %1262

1267:                                             ; preds = %1262
  %1268 = sext i32 %1265 to i64
  %1269 = icmp slt i32 %1265, 0
  %1270 = shl nsw i64 %1268, 1
  %1271 = select i1 %1269, i64 -1, i64 %1270
  %1272 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %1271) #9
  %1273 = load ptr, ptr %8, align 8, !tbaa !46
  %1274 = sext i32 %1258 to i64
  %1275 = shl nsw i64 %1274, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 2 %1272, ptr align 2 %1273, i64 %1275, i1 false)
  %1276 = icmp eq ptr %1273, null
  br i1 %1276, label %1281, label %1279

1277:                                             ; preds = %1256
  %1278 = load ptr, ptr %8, align 8, !tbaa !46
  br label %1283

1279:                                             ; preds = %1267
  tail call void @_ZdaPv(ptr noundef nonnull %1273) #10
  %1280 = load i32, ptr %13, align 8, !tbaa !17
  br label %1281

1281:                                             ; preds = %1279, %1267
  %1282 = phi i32 [ %1280, %1279 ], [ %1258, %1267 ]
  store ptr %1272, ptr %8, align 8, !tbaa !46
  store i32 %1265, ptr %647, align 4, !tbaa !68
  br label %1283

1283:                                             ; preds = %1277, %1281
  %1284 = phi i32 [ %1258, %1277 ], [ %1282, %1281 ]
  %1285 = phi ptr [ %1278, %1277 ], [ %1272, %1281 ]
  %1286 = ptrtoint ptr %1285 to i64
  %1287 = add nsw i32 %1284, 1
  %1288 = sext i32 %1287 to i64
  %1289 = getelementptr inbounds i16, ptr %1285, i64 %1288
  %1290 = icmp slt i32 %1247, %1248
  br i1 %1257, label %1291, label %1339

1291:                                             ; preds = %1283
  br i1 %1290, label %1292, label %1510

1292:                                             ; preds = %1291
  %1293 = sext i32 %1247 to i64
  %1294 = sext i32 %1248 to i64
  %1295 = extractelement <2 x double> %692, i64 0
  %1296 = extractelement <2 x double> %692, i64 1
  br label %1297

1297:                                             ; preds = %1292, %1334
  %1298 = phi i64 [ %1293, %1292 ], [ %1337, %1334 ]
  %1299 = phi ptr [ %468, %1292 ], [ %1336, %1334 ]
  %1300 = phi ptr [ %1289, %1292 ], [ %1335, %1334 ]
  %1301 = getelementptr inbounds i16, ptr %422, i64 %1298
  %1302 = load i16, ptr %1301, align 2, !tbaa !44
  %1303 = zext i16 %1302 to i64
  %1304 = getelementptr inbounds %struct.CompAtomExt, ptr %46, i64 %1303
  %1305 = load i32, ptr %1304, align 4
  %1306 = and i32 %1305, 1073741824
  %1307 = icmp eq i32 %1306, 0
  br i1 %1307, label %1308, label %1334

1308:                                             ; preds = %1297
  %1309 = getelementptr inbounds %struct.CompAtom, ptr %42, i64 %1303
  %1310 = getelementptr inbounds %class.Vector, ptr %1309, i64 0, i32 2
  %1311 = load double, ptr %1310, align 8, !tbaa !49
  %1312 = fsub double %695, %1311
  %1313 = getelementptr inbounds %class.Vector, ptr %1309, i64 0, i32 1
  %1314 = load double, ptr %1313, align 8, !tbaa !66
  %1315 = fsub double %1296, %1314
  %1316 = load double, ptr %1309, align 8, !tbaa !67
  %1317 = fsub double %1295, %1316
  %1318 = fmul double %1317, %1317
  %1319 = tail call double @llvm.fmuladd.f64(double %1315, double %1315, double %1318)
  %1320 = tail call double @llvm.fmuladd.f64(double %1312, double %1312, double %1319)
  %1321 = fcmp ugt double %1320, %20
  br i1 %1321, label %1334, label %1322

1322:                                             ; preds = %1308
  %1323 = shl i32 %1305, 2
  %1324 = ashr exact i32 %1323, 2
  %1325 = icmp slt i32 %1324, %705
  %1326 = icmp sgt i32 %1324, %707
  %1327 = select i1 %1325, i1 true, i1 %1326
  %1328 = select i1 %1327, ptr %1300, ptr %1299
  %1329 = zext i1 %1327 to i64
  %1330 = getelementptr inbounds i16, ptr %1300, i64 %1329
  %1331 = xor i1 %1327, true
  %1332 = zext i1 %1331 to i64
  %1333 = getelementptr inbounds i16, ptr %1299, i64 %1332
  store i16 %1302, ptr %1328, align 2, !tbaa !44
  br label %1334

1334:                                             ; preds = %1322, %1308, %1297
  %1335 = phi ptr [ %1300, %1297 ], [ %1300, %1308 ], [ %1330, %1322 ]
  %1336 = phi ptr [ %1299, %1297 ], [ %1299, %1308 ], [ %1333, %1322 ]
  %1337 = add nsw i64 %1298, 1
  %1338 = icmp eq i64 %1337, %1294
  br i1 %1338, label %1510, label %1297

1339:                                             ; preds = %1283
  br i1 %1290, label %1340, label %1510

1340:                                             ; preds = %1339
  %1341 = sub nsw i32 %1248, %1247
  %1342 = icmp sgt i32 %1341, 6
  br i1 %1342, label %1343, label %1461

1343:                                             ; preds = %1340
  %1344 = add nsw i32 %1248, -2
  %1345 = add nsw i32 %1247, 2
  %1346 = icmp slt i32 %1345, %1344
  br i1 %1346, label %1347, label %1461

1347:                                             ; preds = %1343
  %1348 = sext i32 %1247 to i64
  %1349 = getelementptr inbounds i16, ptr %422, i64 %1348
  %1350 = load i16, ptr %1349, align 2, !tbaa !44
  %1351 = zext i16 %1350 to i64
  %1352 = getelementptr inbounds %struct.CompAtomExt, ptr %46, i64 %1351
  %1353 = load i32, ptr %1352, align 4
  %1354 = add nsw i32 %1247, 1
  %1355 = sext i32 %1354 to i64
  %1356 = getelementptr inbounds i16, ptr %422, i64 %1355
  %1357 = load i16, ptr %1356, align 2, !tbaa !44
  %1358 = zext i16 %1357 to i64
  %1359 = getelementptr inbounds %struct.CompAtom, ptr %42, i64 %1358
  %1360 = getelementptr inbounds %class.Vector, ptr %1359, i64 0, i32 2
  %1361 = load double, ptr %1360, align 8, !tbaa !49
  %1362 = getelementptr inbounds %struct.CompAtom, ptr %42, i64 %1351
  %1363 = getelementptr inbounds %class.Vector, ptr %1362, i64 0, i32 2
  %1364 = load double, ptr %1363, align 8, !tbaa !49
  %1365 = getelementptr inbounds %class.Vector, ptr %1359, i64 0, i32 1
  %1366 = load double, ptr %1365, align 8, !tbaa !66
  %1367 = getelementptr inbounds %class.Vector, ptr %1362, i64 0, i32 1
  %1368 = load double, ptr %1367, align 8, !tbaa !66
  %1369 = load double, ptr %1359, align 8, !tbaa !67
  %1370 = load double, ptr %1362, align 8, !tbaa !67
  %1371 = sext i32 %1345 to i64
  %1372 = sext i32 %1344 to i64
  %1373 = extractelement <2 x double> %692, i64 0
  %1374 = extractelement <2 x double> %692, i64 1
  br label %1375

1375:                                             ; preds = %1347, %1455
  %1376 = phi i64 [ %1371, %1347 ], [ %1458, %1455 ]
  %1377 = phi i64 [ %1358, %1347 ], [ %1415, %1455 ]
  %1378 = phi i32 [ %1353, %1347 ], [ %1443, %1455 ]
  %1379 = phi ptr [ %468, %1347 ], [ %1457, %1455 ]
  %1380 = phi ptr [ %1289, %1347 ], [ %1456, %1455 ]
  %1381 = phi i32 [ %1247, %1347 ], [ %1460, %1455 ]
  %1382 = phi i16 [ %1350, %1347 ], [ %1407, %1455 ]
  %1383 = phi i16 [ %1357, %1347 ], [ %1411, %1455 ]
  %1384 = phi double [ %1370, %1347 ], [ %1414, %1455 ]
  %1385 = phi double [ %1369, %1347 ], [ %1417, %1455 ]
  %1386 = phi double [ %1368, %1347 ], [ %1419, %1455 ]
  %1387 = phi double [ %1366, %1347 ], [ %1421, %1455 ]
  %1388 = phi double [ %1364, %1347 ], [ %1423, %1455 ]
  %1389 = phi double [ %1361, %1347 ], [ %1425, %1455 ]
  %1390 = getelementptr inbounds %struct.CompAtomExt, ptr %46, i64 %1377
  %1391 = load i32, ptr %1390, align 4
  %1392 = shl i32 %1391, 2
  %1393 = ashr exact i32 %1392, 2
  %1394 = fsub double %1373, %1384
  %1395 = fsub double %1373, %1385
  %1396 = fmul double %1394, %1394
  %1397 = fmul double %1395, %1395
  %1398 = fsub double %1374, %1386
  %1399 = fsub double %1374, %1387
  %1400 = tail call double @llvm.fmuladd.f64(double %1398, double %1398, double %1396)
  %1401 = tail call double @llvm.fmuladd.f64(double %1399, double %1399, double %1397)
  %1402 = fsub double %695, %1388
  %1403 = fsub double %695, %1389
  %1404 = tail call double @llvm.fmuladd.f64(double %1402, double %1402, double %1400)
  %1405 = tail call double @llvm.fmuladd.f64(double %1403, double %1403, double %1401)
  %1406 = getelementptr inbounds i16, ptr %422, i64 %1376
  %1407 = load i16, ptr %1406, align 2, !tbaa !44
  %1408 = add nsw i32 %1381, 3
  %1409 = sext i32 %1408 to i64
  %1410 = getelementptr inbounds i16, ptr %422, i64 %1409
  %1411 = load i16, ptr %1410, align 2, !tbaa !44
  %1412 = zext i16 %1407 to i64
  %1413 = getelementptr inbounds %struct.CompAtom, ptr %42, i64 %1412
  %1414 = load double, ptr %1413, align 8, !tbaa !67
  %1415 = zext i16 %1411 to i64
  %1416 = getelementptr inbounds %struct.CompAtom, ptr %42, i64 %1415
  %1417 = load double, ptr %1416, align 8, !tbaa !67
  %1418 = getelementptr inbounds %class.Vector, ptr %1413, i64 0, i32 1
  %1419 = load double, ptr %1418, align 8, !tbaa !66
  %1420 = getelementptr inbounds %class.Vector, ptr %1416, i64 0, i32 1
  %1421 = load double, ptr %1420, align 8, !tbaa !66
  %1422 = getelementptr inbounds %class.Vector, ptr %1413, i64 0, i32 2
  %1423 = load double, ptr %1422, align 8, !tbaa !49
  %1424 = getelementptr inbounds %class.Vector, ptr %1416, i64 0, i32 2
  %1425 = load double, ptr %1424, align 8, !tbaa !49
  %1426 = fcmp ugt double %1404, %20
  br i1 %1426, label %1439, label %1427

1427:                                             ; preds = %1375
  %1428 = shl i32 %1378, 2
  %1429 = ashr exact i32 %1428, 2
  %1430 = icmp slt i32 %1429, %705
  %1431 = icmp sgt i32 %1429, %707
  %1432 = select i1 %1430, i1 true, i1 %1431
  %1433 = select i1 %1432, ptr %1380, ptr %1379
  %1434 = zext i1 %1432 to i64
  %1435 = getelementptr inbounds i16, ptr %1380, i64 %1434
  %1436 = xor i1 %1432, true
  %1437 = zext i1 %1436 to i64
  %1438 = getelementptr inbounds i16, ptr %1379, i64 %1437
  store i16 %1382, ptr %1433, align 2, !tbaa !44
  br label %1439

1439:                                             ; preds = %1427, %1375
  %1440 = phi ptr [ %1380, %1375 ], [ %1435, %1427 ]
  %1441 = phi ptr [ %1379, %1375 ], [ %1438, %1427 ]
  %1442 = getelementptr inbounds %struct.CompAtomExt, ptr %46, i64 %1412
  %1443 = load i32, ptr %1442, align 4
  %1444 = fcmp ugt double %1405, %20
  br i1 %1444, label %1455, label %1445

1445:                                             ; preds = %1439
  %1446 = icmp slt i32 %1393, %705
  %1447 = icmp sgt i32 %1393, %707
  %1448 = select i1 %1446, i1 true, i1 %1447
  %1449 = select i1 %1448, ptr %1440, ptr %1441
  %1450 = zext i1 %1448 to i64
  %1451 = getelementptr inbounds i16, ptr %1440, i64 %1450
  %1452 = xor i1 %1448, true
  %1453 = zext i1 %1452 to i64
  %1454 = getelementptr inbounds i16, ptr %1441, i64 %1453
  store i16 %1383, ptr %1449, align 2, !tbaa !44
  br label %1455

1455:                                             ; preds = %1445, %1439
  %1456 = phi ptr [ %1440, %1439 ], [ %1451, %1445 ]
  %1457 = phi ptr [ %1441, %1439 ], [ %1454, %1445 ]
  %1458 = add nsw i64 %1376, 2
  %1459 = icmp slt i64 %1458, %1372
  %1460 = trunc i64 %1376 to i32
  br i1 %1459, label %1375, label %1461

1461:                                             ; preds = %1455, %1343, %1340
  %1462 = phi i32 [ %1247, %1340 ], [ %1247, %1343 ], [ %1460, %1455 ]
  %1463 = phi ptr [ %1289, %1340 ], [ %1289, %1343 ], [ %1456, %1455 ]
  %1464 = phi ptr [ %468, %1340 ], [ %468, %1343 ], [ %1457, %1455 ]
  %1465 = icmp slt i32 %1462, %1248
  br i1 %1465, label %1466, label %1510

1466:                                             ; preds = %1461
  %1467 = sext i32 %1462 to i64
  %1468 = sext i32 %1248 to i64
  %1469 = extractelement <2 x double> %692, i64 0
  %1470 = extractelement <2 x double> %692, i64 1
  br label %1471

1471:                                             ; preds = %1466, %1505
  %1472 = phi i64 [ %1467, %1466 ], [ %1508, %1505 ]
  %1473 = phi ptr [ %1464, %1466 ], [ %1507, %1505 ]
  %1474 = phi ptr [ %1463, %1466 ], [ %1506, %1505 ]
  %1475 = getelementptr inbounds i16, ptr %422, i64 %1472
  %1476 = load i16, ptr %1475, align 2, !tbaa !44
  %1477 = zext i16 %1476 to i64
  %1478 = getelementptr inbounds %struct.CompAtom, ptr %42, i64 %1477
  %1479 = load double, ptr %1478, align 8, !tbaa !67
  %1480 = getelementptr inbounds %class.Vector, ptr %1478, i64 0, i32 1
  %1481 = load double, ptr %1480, align 8, !tbaa !66
  %1482 = getelementptr inbounds %class.Vector, ptr %1478, i64 0, i32 2
  %1483 = load double, ptr %1482, align 8, !tbaa !49
  %1484 = fsub double %1469, %1479
  %1485 = fmul double %1484, %1484
  %1486 = fsub double %1470, %1481
  %1487 = tail call double @llvm.fmuladd.f64(double %1486, double %1486, double %1485)
  %1488 = fsub double %695, %1483
  %1489 = tail call double @llvm.fmuladd.f64(double %1488, double %1488, double %1487)
  %1490 = fcmp ugt double %1489, %20
  br i1 %1490, label %1505, label %1491

1491:                                             ; preds = %1471
  %1492 = getelementptr inbounds %struct.CompAtomExt, ptr %46, i64 %1477
  %1493 = load i32, ptr %1492, align 4
  %1494 = shl i32 %1493, 2
  %1495 = ashr exact i32 %1494, 2
  %1496 = icmp slt i32 %1495, %705
  %1497 = icmp sgt i32 %1495, %707
  %1498 = select i1 %1496, i1 true, i1 %1497
  %1499 = select i1 %1498, ptr %1474, ptr %1473
  %1500 = zext i1 %1498 to i64
  %1501 = getelementptr inbounds i16, ptr %1474, i64 %1500
  %1502 = xor i1 %1498, true
  %1503 = zext i1 %1502 to i64
  %1504 = getelementptr inbounds i16, ptr %1473, i64 %1503
  store i16 %1476, ptr %1499, align 2, !tbaa !44
  br label %1505

1505:                                             ; preds = %1491, %1471
  %1506 = phi ptr [ %1474, %1471 ], [ %1501, %1491 ]
  %1507 = phi ptr [ %1473, %1471 ], [ %1504, %1491 ]
  %1508 = add nsw i64 %1472, 1
  %1509 = icmp eq i64 %1508, %1468
  br i1 %1509, label %1510, label %1471

1510:                                             ; preds = %1505, %1334, %1461, %1291, %1339
  %1511 = phi ptr [ %1289, %1339 ], [ %1289, %1291 ], [ %1463, %1461 ], [ %1335, %1334 ], [ %1506, %1505 ]
  %1512 = phi ptr [ %468, %1339 ], [ %468, %1291 ], [ %1464, %1461 ], [ %1336, %1334 ], [ %1507, %1505 ]
  %1513 = ptrtoint ptr %1512 to i64
  %1514 = sub i64 %1513, %648
  %1515 = lshr exact i64 %1514, 1
  %1516 = trunc i64 %1515 to i32
  %1517 = icmp sgt i32 %1516, 0
  br i1 %1517, label %1518, label %1618

1518:                                             ; preds = %1510
  %1519 = and i64 %1515, 4294967295
  %1520 = and i64 %1515, 1
  %1521 = icmp eq i64 %1519, 1
  br i1 %1521, label %1586, label %1522

1522:                                             ; preds = %1518
  %1523 = sub nsw i64 %1519, %1520
  br label %1524

1524:                                             ; preds = %1579, %1522
  %1525 = phi i64 [ 0, %1522 ], [ %1583, %1579 ]
  %1526 = phi ptr [ %1511, %1522 ], [ %1582, %1579 ]
  %1527 = phi ptr [ %330, %1522 ], [ %1581, %1579 ]
  %1528 = phi ptr [ %376, %1522 ], [ %1580, %1579 ]
  %1529 = phi i64 [ 0, %1522 ], [ %1584, %1579 ]
  %1530 = getelementptr inbounds i16, ptr %468, i64 %1525
  %1531 = load i16, ptr %1530, align 2, !tbaa !44
  %1532 = zext i16 %1531 to i64
  %1533 = getelementptr inbounds %struct.CompAtomExt, ptr %46, i64 %1532
  %1534 = load i32, ptr %1533, align 4
  %1535 = shl i32 %1534, 2
  %1536 = ashr exact i32 %1535, 2
  %1537 = sext i32 %1536 to i64
  %1538 = getelementptr inbounds i8, ptr %942, i64 %1537
  %1539 = load i8, ptr %1538, align 1, !tbaa !57
  %1540 = sext i8 %1539 to i32
  switch i32 %1540, label %1552 [
    i32 0, label %1541
    i32 1, label %1543
    i32 2, label %1545
  ]

1541:                                             ; preds = %1524
  %1542 = getelementptr inbounds i16, ptr %1526, i64 1
  br label %1547

1543:                                             ; preds = %1524
  %1544 = getelementptr inbounds i16, ptr %1527, i64 1
  br label %1547

1545:                                             ; preds = %1524
  %1546 = getelementptr inbounds i16, ptr %1528, i64 1
  br label %1547

1547:                                             ; preds = %1541, %1543, %1545
  %1548 = phi ptr [ %1528, %1545 ], [ %1527, %1543 ], [ %1526, %1541 ]
  %1549 = phi ptr [ %1546, %1545 ], [ %1528, %1543 ], [ %1528, %1541 ]
  %1550 = phi ptr [ %1527, %1545 ], [ %1544, %1543 ], [ %1527, %1541 ]
  %1551 = phi ptr [ %1526, %1545 ], [ %1526, %1543 ], [ %1542, %1541 ]
  store i16 %1531, ptr %1548, align 2, !tbaa !44
  br label %1552

1552:                                             ; preds = %1547, %1524
  %1553 = phi ptr [ %1528, %1524 ], [ %1549, %1547 ]
  %1554 = phi ptr [ %1527, %1524 ], [ %1550, %1547 ]
  %1555 = phi ptr [ %1526, %1524 ], [ %1551, %1547 ]
  %1556 = or i64 %1525, 1
  %1557 = getelementptr inbounds i16, ptr %468, i64 %1556
  %1558 = load i16, ptr %1557, align 2, !tbaa !44
  %1559 = zext i16 %1558 to i64
  %1560 = getelementptr inbounds %struct.CompAtomExt, ptr %46, i64 %1559
  %1561 = load i32, ptr %1560, align 4
  %1562 = shl i32 %1561, 2
  %1563 = ashr exact i32 %1562, 2
  %1564 = sext i32 %1563 to i64
  %1565 = getelementptr inbounds i8, ptr %942, i64 %1564
  %1566 = load i8, ptr %1565, align 1, !tbaa !57
  %1567 = sext i8 %1566 to i32
  switch i32 %1567, label %1579 [
    i32 0, label %1572
    i32 1, label %1570
    i32 2, label %1568
  ]

1568:                                             ; preds = %1552
  %1569 = getelementptr inbounds i16, ptr %1553, i64 1
  br label %1574

1570:                                             ; preds = %1552
  %1571 = getelementptr inbounds i16, ptr %1554, i64 1
  br label %1574

1572:                                             ; preds = %1552
  %1573 = getelementptr inbounds i16, ptr %1555, i64 1
  br label %1574

1574:                                             ; preds = %1572, %1570, %1568
  %1575 = phi ptr [ %1553, %1568 ], [ %1554, %1570 ], [ %1555, %1572 ]
  %1576 = phi ptr [ %1569, %1568 ], [ %1553, %1570 ], [ %1553, %1572 ]
  %1577 = phi ptr [ %1554, %1568 ], [ %1571, %1570 ], [ %1554, %1572 ]
  %1578 = phi ptr [ %1555, %1568 ], [ %1555, %1570 ], [ %1573, %1572 ]
  store i16 %1558, ptr %1575, align 2, !tbaa !44
  br label %1579

1579:                                             ; preds = %1574, %1552
  %1580 = phi ptr [ %1553, %1552 ], [ %1576, %1574 ]
  %1581 = phi ptr [ %1554, %1552 ], [ %1577, %1574 ]
  %1582 = phi ptr [ %1555, %1552 ], [ %1578, %1574 ]
  %1583 = add nuw nsw i64 %1525, 2
  %1584 = add i64 %1529, 2
  %1585 = icmp eq i64 %1584, %1523
  br i1 %1585, label %1586, label %1524

1586:                                             ; preds = %1579, %1518
  %1587 = phi ptr [ undef, %1518 ], [ %1580, %1579 ]
  %1588 = phi ptr [ undef, %1518 ], [ %1581, %1579 ]
  %1589 = phi ptr [ undef, %1518 ], [ %1582, %1579 ]
  %1590 = phi i64 [ 0, %1518 ], [ %1583, %1579 ]
  %1591 = phi ptr [ %1511, %1518 ], [ %1582, %1579 ]
  %1592 = phi ptr [ %330, %1518 ], [ %1581, %1579 ]
  %1593 = phi ptr [ %376, %1518 ], [ %1580, %1579 ]
  %1594 = icmp eq i64 %1520, 0
  br i1 %1594, label %1618, label %1595

1595:                                             ; preds = %1586
  %1596 = getelementptr inbounds i16, ptr %468, i64 %1590
  %1597 = load i16, ptr %1596, align 2, !tbaa !44
  %1598 = zext i16 %1597 to i64
  %1599 = getelementptr inbounds %struct.CompAtomExt, ptr %46, i64 %1598
  %1600 = load i32, ptr %1599, align 4
  %1601 = shl i32 %1600, 2
  %1602 = ashr exact i32 %1601, 2
  %1603 = sext i32 %1602 to i64
  %1604 = getelementptr inbounds i8, ptr %942, i64 %1603
  %1605 = load i8, ptr %1604, align 1, !tbaa !57
  %1606 = sext i8 %1605 to i32
  switch i32 %1606, label %1618 [
    i32 0, label %1611
    i32 1, label %1609
    i32 2, label %1607
  ]

1607:                                             ; preds = %1595
  %1608 = getelementptr inbounds i16, ptr %1593, i64 1
  br label %1613

1609:                                             ; preds = %1595
  %1610 = getelementptr inbounds i16, ptr %1592, i64 1
  br label %1613

1611:                                             ; preds = %1595
  %1612 = getelementptr inbounds i16, ptr %1591, i64 1
  br label %1613

1613:                                             ; preds = %1611, %1609, %1607
  %1614 = phi ptr [ %1593, %1607 ], [ %1592, %1609 ], [ %1591, %1611 ]
  %1615 = phi ptr [ %1608, %1607 ], [ %1593, %1609 ], [ %1593, %1611 ]
  %1616 = phi ptr [ %1592, %1607 ], [ %1610, %1609 ], [ %1592, %1611 ]
  %1617 = phi ptr [ %1591, %1607 ], [ %1591, %1609 ], [ %1612, %1611 ]
  store i16 %1597, ptr %1614, align 2, !tbaa !44
  br label %1618

1618:                                             ; preds = %1586, %1613, %1595, %1510
  %1619 = phi ptr [ %376, %1510 ], [ %1587, %1586 ], [ %1593, %1595 ], [ %1615, %1613 ]
  %1620 = phi ptr [ %330, %1510 ], [ %1588, %1586 ], [ %1592, %1595 ], [ %1616, %1613 ]
  %1621 = phi ptr [ %1511, %1510 ], [ %1589, %1586 ], [ %1591, %1595 ], [ %1617, %1613 ]
  %1622 = ptrtoint ptr %1621 to i64
  %1623 = ptrtoint ptr %1289 to i64
  %1624 = sub i64 %1622, %1623
  %1625 = lshr exact i64 %1624, 1
  %1626 = trunc i64 %1625 to i32
  %1627 = icmp eq i32 %1626, 0
  %1628 = shl i64 %1624, 31
  br i1 %1627, label %1634, label %1629

1629:                                             ; preds = %1618
  %1630 = add i64 %1628, -4294967296
  %1631 = ashr i64 %1630, 32
  %1632 = getelementptr inbounds i16, ptr %1289, i64 %1631
  %1633 = load i16, ptr %1632, align 2, !tbaa !44
  br label %1634

1634:                                             ; preds = %1618, %1629
  %1635 = phi i16 [ %1633, %1629 ], [ -1, %1618 ]
  %1636 = ashr i64 %1628, 32
  %1637 = getelementptr inbounds i16, ptr %1289, i64 %1636
  store i16 %1635, ptr %1637, align 2, !tbaa !44
  %1638 = trunc i64 %1625 to i16
  %1639 = add i16 %1638, 1
  %1640 = load i32, ptr %13, align 8, !tbaa !17
  %1641 = sext i32 %1640 to i64
  %1642 = getelementptr inbounds i16, ptr %1285, i64 %1641
  store i16 %1639, ptr %1642, align 2, !tbaa !44
  %1643 = add nsw i32 %1626, 2
  %1644 = add nsw i32 %1643, %1640
  %1645 = ptrtoint ptr %1620 to i64
  %1646 = sub i64 %1645, %649
  %1647 = lshr exact i64 %1646, 1
  %1648 = trunc i64 %1647 to i32
  %1649 = add nsw i32 %1644, 1
  %1650 = sext i32 %1649 to i64
  %1651 = getelementptr i16, ptr %1285, i64 %1650
  %1652 = icmp sgt i32 %1648, 0
  br i1 %1652, label %1653, label %1743

1653:                                             ; preds = %1634
  %1654 = and i64 %1647, 4294967295
  %1655 = icmp ult i64 %1654, 8
  br i1 %1655, label %1699, label %1656

1656:                                             ; preds = %1653
  %1657 = shl nsw i64 %1650, 1
  %1658 = add i64 %1657, %1286
  %1659 = sub i64 %1658, %649
  %1660 = icmp ult i64 %1659, 128
  br i1 %1660, label %1699, label %1661

1661:                                             ; preds = %1656
  %1662 = icmp ult i64 %1654, 64
  br i1 %1662, label %1686, label %1663

1663:                                             ; preds = %1661
  %1664 = and i64 %1647, 63
  %1665 = sub nsw i64 %1654, %1664
  br label %1666

1666:                                             ; preds = %1666, %1663
  %1667 = phi i64 [ 0, %1663 ], [ %1680, %1666 ]
  %1668 = getelementptr inbounds i16, ptr %330, i64 %1667
  %1669 = load <16 x i16>, ptr %1668, align 2, !tbaa !44
  %1670 = getelementptr inbounds i16, ptr %1668, i64 16
  %1671 = load <16 x i16>, ptr %1670, align 2, !tbaa !44
  %1672 = getelementptr inbounds i16, ptr %1668, i64 32
  %1673 = load <16 x i16>, ptr %1672, align 2, !tbaa !44
  %1674 = getelementptr inbounds i16, ptr %1668, i64 48
  %1675 = load <16 x i16>, ptr %1674, align 2, !tbaa !44
  %1676 = getelementptr inbounds i16, ptr %1651, i64 %1667
  store <16 x i16> %1669, ptr %1676, align 2, !tbaa !44
  %1677 = getelementptr inbounds i16, ptr %1676, i64 16
  store <16 x i16> %1671, ptr %1677, align 2, !tbaa !44
  %1678 = getelementptr inbounds i16, ptr %1676, i64 32
  store <16 x i16> %1673, ptr %1678, align 2, !tbaa !44
  %1679 = getelementptr inbounds i16, ptr %1676, i64 48
  store <16 x i16> %1675, ptr %1679, align 2, !tbaa !44
  %1680 = add nuw i64 %1667, 64
  %1681 = icmp eq i64 %1680, %1665
  br i1 %1681, label %1682, label %1666, !llvm.loop !214

1682:                                             ; preds = %1666
  %1683 = icmp eq i64 %1664, 0
  br i1 %1683, label %1737, label %1684

1684:                                             ; preds = %1682
  %1685 = icmp ult i64 %1664, 8
  br i1 %1685, label %1699, label %1686

1686:                                             ; preds = %1661, %1684
  %1687 = phi i64 [ %1665, %1684 ], [ 0, %1661 ]
  %1688 = and i64 %1647, 7
  %1689 = sub nsw i64 %1654, %1688
  br label %1690

1690:                                             ; preds = %1690, %1686
  %1691 = phi i64 [ %1687, %1686 ], [ %1695, %1690 ]
  %1692 = getelementptr inbounds i16, ptr %330, i64 %1691
  %1693 = load <8 x i16>, ptr %1692, align 2, !tbaa !44
  %1694 = getelementptr inbounds i16, ptr %1651, i64 %1691
  store <8 x i16> %1693, ptr %1694, align 2, !tbaa !44
  %1695 = add nuw i64 %1691, 8
  %1696 = icmp eq i64 %1695, %1689
  br i1 %1696, label %1697, label %1690, !llvm.loop !215

1697:                                             ; preds = %1690
  %1698 = icmp eq i64 %1688, 0
  br i1 %1698, label %1737, label %1699

1699:                                             ; preds = %1656, %1653, %1684, %1697
  %1700 = phi i64 [ 0, %1653 ], [ 0, %1656 ], [ %1665, %1684 ], [ %1689, %1697 ]
  %1701 = sub i64 %1647, %1700
  %1702 = xor i64 %1700, -1
  %1703 = add nsw i64 %1654, %1702
  %1704 = and i64 %1701, 3
  %1705 = icmp eq i64 %1704, 0
  br i1 %1705, label %1715, label %1706

1706:                                             ; preds = %1699, %1706
  %1707 = phi i64 [ %1712, %1706 ], [ %1700, %1699 ]
  %1708 = phi i64 [ %1713, %1706 ], [ 0, %1699 ]
  %1709 = getelementptr inbounds i16, ptr %330, i64 %1707
  %1710 = load i16, ptr %1709, align 2, !tbaa !44
  %1711 = getelementptr inbounds i16, ptr %1651, i64 %1707
  store i16 %1710, ptr %1711, align 2, !tbaa !44
  %1712 = add nuw nsw i64 %1707, 1
  %1713 = add i64 %1708, 1
  %1714 = icmp eq i64 %1713, %1704
  br i1 %1714, label %1715, label %1706, !llvm.loop !216

1715:                                             ; preds = %1706, %1699
  %1716 = phi i64 [ %1700, %1699 ], [ %1712, %1706 ]
  %1717 = icmp ult i64 %1703, 3
  br i1 %1717, label %1737, label %1718

1718:                                             ; preds = %1715, %1718
  %1719 = phi i64 [ %1735, %1718 ], [ %1716, %1715 ]
  %1720 = getelementptr inbounds i16, ptr %330, i64 %1719
  %1721 = load i16, ptr %1720, align 2, !tbaa !44
  %1722 = getelementptr inbounds i16, ptr %1651, i64 %1719
  store i16 %1721, ptr %1722, align 2, !tbaa !44
  %1723 = add nuw nsw i64 %1719, 1
  %1724 = getelementptr inbounds i16, ptr %330, i64 %1723
  %1725 = load i16, ptr %1724, align 2, !tbaa !44
  %1726 = getelementptr inbounds i16, ptr %1651, i64 %1723
  store i16 %1725, ptr %1726, align 2, !tbaa !44
  %1727 = add nuw nsw i64 %1719, 2
  %1728 = getelementptr inbounds i16, ptr %330, i64 %1727
  %1729 = load i16, ptr %1728, align 2, !tbaa !44
  %1730 = getelementptr inbounds i16, ptr %1651, i64 %1727
  store i16 %1729, ptr %1730, align 2, !tbaa !44
  %1731 = add nuw nsw i64 %1719, 3
  %1732 = getelementptr inbounds i16, ptr %330, i64 %1731
  %1733 = load i16, ptr %1732, align 2, !tbaa !44
  %1734 = getelementptr inbounds i16, ptr %1651, i64 %1731
  store i16 %1733, ptr %1734, align 2, !tbaa !44
  %1735 = add nuw nsw i64 %1719, 4
  %1736 = icmp eq i64 %1735, %1654
  br i1 %1736, label %1737, label %1718, !llvm.loop !217

1737:                                             ; preds = %1715, %1718, %1682, %1697
  %1738 = shl i64 %1646, 31
  %1739 = add i64 %1738, -4294967296
  %1740 = ashr i64 %1739, 32
  %1741 = getelementptr inbounds i16, ptr %1651, i64 %1740
  %1742 = load i16, ptr %1741, align 2, !tbaa !44
  br label %1743

1743:                                             ; preds = %1634, %1737
  %1744 = phi i64 [ %1647, %1737 ], [ 0, %1634 ]
  %1745 = phi i16 [ %1742, %1737 ], [ -1, %1634 ]
  %1746 = and i64 %1744, 4294967295
  %1747 = getelementptr inbounds i16, ptr %1651, i64 %1746
  store i16 %1745, ptr %1747, align 2, !tbaa !44
  %1748 = trunc i64 %1647 to i16
  %1749 = add i16 %1748, 1
  %1750 = sext i32 %1644 to i64
  %1751 = getelementptr inbounds i16, ptr %1285, i64 %1750
  store i16 %1749, ptr %1751, align 2, !tbaa !44
  %1752 = add nsw i32 %1648, 2
  %1753 = add nsw i32 %1752, %1644
  %1754 = ptrtoint ptr %1619 to i64
  %1755 = sub i64 %1754, %650
  %1756 = lshr exact i64 %1755, 1
  %1757 = trunc i64 %1756 to i32
  %1758 = add nsw i32 %1753, 1
  %1759 = sext i32 %1758 to i64
  %1760 = getelementptr i16, ptr %1285, i64 %1759
  %1761 = icmp sgt i32 %1757, 0
  br i1 %1761, label %1762, label %1852

1762:                                             ; preds = %1743
  %1763 = and i64 %1756, 4294967295
  %1764 = icmp ult i64 %1763, 8
  br i1 %1764, label %1808, label %1765

1765:                                             ; preds = %1762
  %1766 = shl nsw i64 %1759, 1
  %1767 = add i64 %1766, %1286
  %1768 = sub i64 %1767, %650
  %1769 = icmp ult i64 %1768, 128
  br i1 %1769, label %1808, label %1770

1770:                                             ; preds = %1765
  %1771 = icmp ult i64 %1763, 64
  br i1 %1771, label %1795, label %1772

1772:                                             ; preds = %1770
  %1773 = and i64 %1756, 63
  %1774 = sub nsw i64 %1763, %1773
  br label %1775

1775:                                             ; preds = %1775, %1772
  %1776 = phi i64 [ 0, %1772 ], [ %1789, %1775 ]
  %1777 = getelementptr inbounds i16, ptr %376, i64 %1776
  %1778 = load <16 x i16>, ptr %1777, align 2, !tbaa !44
  %1779 = getelementptr inbounds i16, ptr %1777, i64 16
  %1780 = load <16 x i16>, ptr %1779, align 2, !tbaa !44
  %1781 = getelementptr inbounds i16, ptr %1777, i64 32
  %1782 = load <16 x i16>, ptr %1781, align 2, !tbaa !44
  %1783 = getelementptr inbounds i16, ptr %1777, i64 48
  %1784 = load <16 x i16>, ptr %1783, align 2, !tbaa !44
  %1785 = getelementptr inbounds i16, ptr %1760, i64 %1776
  store <16 x i16> %1778, ptr %1785, align 2, !tbaa !44
  %1786 = getelementptr inbounds i16, ptr %1785, i64 16
  store <16 x i16> %1780, ptr %1786, align 2, !tbaa !44
  %1787 = getelementptr inbounds i16, ptr %1785, i64 32
  store <16 x i16> %1782, ptr %1787, align 2, !tbaa !44
  %1788 = getelementptr inbounds i16, ptr %1785, i64 48
  store <16 x i16> %1784, ptr %1788, align 2, !tbaa !44
  %1789 = add nuw i64 %1776, 64
  %1790 = icmp eq i64 %1789, %1774
  br i1 %1790, label %1791, label %1775, !llvm.loop !218

1791:                                             ; preds = %1775
  %1792 = icmp eq i64 %1773, 0
  br i1 %1792, label %1846, label %1793

1793:                                             ; preds = %1791
  %1794 = icmp ult i64 %1773, 8
  br i1 %1794, label %1808, label %1795

1795:                                             ; preds = %1770, %1793
  %1796 = phi i64 [ %1774, %1793 ], [ 0, %1770 ]
  %1797 = and i64 %1756, 7
  %1798 = sub nsw i64 %1763, %1797
  br label %1799

1799:                                             ; preds = %1799, %1795
  %1800 = phi i64 [ %1796, %1795 ], [ %1804, %1799 ]
  %1801 = getelementptr inbounds i16, ptr %376, i64 %1800
  %1802 = load <8 x i16>, ptr %1801, align 2, !tbaa !44
  %1803 = getelementptr inbounds i16, ptr %1760, i64 %1800
  store <8 x i16> %1802, ptr %1803, align 2, !tbaa !44
  %1804 = add nuw i64 %1800, 8
  %1805 = icmp eq i64 %1804, %1798
  br i1 %1805, label %1806, label %1799, !llvm.loop !219

1806:                                             ; preds = %1799
  %1807 = icmp eq i64 %1797, 0
  br i1 %1807, label %1846, label %1808

1808:                                             ; preds = %1765, %1762, %1793, %1806
  %1809 = phi i64 [ 0, %1762 ], [ 0, %1765 ], [ %1774, %1793 ], [ %1798, %1806 ]
  %1810 = sub i64 %1756, %1809
  %1811 = xor i64 %1809, -1
  %1812 = add nsw i64 %1763, %1811
  %1813 = and i64 %1810, 3
  %1814 = icmp eq i64 %1813, 0
  br i1 %1814, label %1824, label %1815

1815:                                             ; preds = %1808, %1815
  %1816 = phi i64 [ %1821, %1815 ], [ %1809, %1808 ]
  %1817 = phi i64 [ %1822, %1815 ], [ 0, %1808 ]
  %1818 = getelementptr inbounds i16, ptr %376, i64 %1816
  %1819 = load i16, ptr %1818, align 2, !tbaa !44
  %1820 = getelementptr inbounds i16, ptr %1760, i64 %1816
  store i16 %1819, ptr %1820, align 2, !tbaa !44
  %1821 = add nuw nsw i64 %1816, 1
  %1822 = add i64 %1817, 1
  %1823 = icmp eq i64 %1822, %1813
  br i1 %1823, label %1824, label %1815, !llvm.loop !220

1824:                                             ; preds = %1815, %1808
  %1825 = phi i64 [ %1809, %1808 ], [ %1821, %1815 ]
  %1826 = icmp ult i64 %1812, 3
  br i1 %1826, label %1846, label %1827

1827:                                             ; preds = %1824, %1827
  %1828 = phi i64 [ %1844, %1827 ], [ %1825, %1824 ]
  %1829 = getelementptr inbounds i16, ptr %376, i64 %1828
  %1830 = load i16, ptr %1829, align 2, !tbaa !44
  %1831 = getelementptr inbounds i16, ptr %1760, i64 %1828
  store i16 %1830, ptr %1831, align 2, !tbaa !44
  %1832 = add nuw nsw i64 %1828, 1
  %1833 = getelementptr inbounds i16, ptr %376, i64 %1832
  %1834 = load i16, ptr %1833, align 2, !tbaa !44
  %1835 = getelementptr inbounds i16, ptr %1760, i64 %1832
  store i16 %1834, ptr %1835, align 2, !tbaa !44
  %1836 = add nuw nsw i64 %1828, 2
  %1837 = getelementptr inbounds i16, ptr %376, i64 %1836
  %1838 = load i16, ptr %1837, align 2, !tbaa !44
  %1839 = getelementptr inbounds i16, ptr %1760, i64 %1836
  store i16 %1838, ptr %1839, align 2, !tbaa !44
  %1840 = add nuw nsw i64 %1828, 3
  %1841 = getelementptr inbounds i16, ptr %376, i64 %1840
  %1842 = load i16, ptr %1841, align 2, !tbaa !44
  %1843 = getelementptr inbounds i16, ptr %1760, i64 %1840
  store i16 %1842, ptr %1843, align 2, !tbaa !44
  %1844 = add nuw nsw i64 %1828, 4
  %1845 = icmp eq i64 %1844, %1763
  br i1 %1845, label %1846, label %1827, !llvm.loop !221

1846:                                             ; preds = %1824, %1827, %1791, %1806
  %1847 = shl i64 %1755, 31
  %1848 = add i64 %1847, -4294967296
  %1849 = ashr i64 %1848, 32
  %1850 = getelementptr inbounds i16, ptr %1760, i64 %1849
  %1851 = load i16, ptr %1850, align 2, !tbaa !44
  br label %1852

1852:                                             ; preds = %1743, %1846
  %1853 = phi i64 [ %1756, %1846 ], [ 0, %1743 ]
  %1854 = phi i16 [ %1851, %1846 ], [ -1, %1743 ]
  %1855 = and i64 %1853, 4294967295
  %1856 = getelementptr inbounds i16, ptr %1760, i64 %1855
  store i16 %1854, ptr %1856, align 2, !tbaa !44
  %1857 = trunc i64 %1756 to i16
  %1858 = add i16 %1857, 1
  %1859 = sext i32 %1753 to i64
  %1860 = getelementptr inbounds i16, ptr %1285, i64 %1859
  store i16 %1858, ptr %1860, align 2, !tbaa !44
  %1861 = add nsw i32 %1757, 2
  %1862 = add nsw i32 %1861, %1753
  %1863 = select i1 %143, i32 0, i32 %1862
  store i32 %1863, ptr %13, align 8
  br label %1894

1864:                                             ; preds = %689
  %1865 = load ptr, ptr %8, align 8, !tbaa !46
  %1866 = load i32, ptr %13, align 8, !tbaa !17
  %1867 = add i32 %1866, 1
  %1868 = sext i32 %1867 to i64
  %1869 = getelementptr inbounds i16, ptr %1865, i64 %1868
  %1870 = sext i32 %1866 to i64
  %1871 = getelementptr inbounds i16, ptr %1865, i64 %1870
  %1872 = load i16, ptr %1871, align 2, !tbaa !44
  %1873 = zext i16 %1872 to i32
  %1874 = add i32 %1867, %1873
  %1875 = add nsw i32 %1873, -1
  %1876 = add i32 %1874, 1
  %1877 = sext i32 %1876 to i64
  %1878 = getelementptr inbounds i16, ptr %1865, i64 %1877
  %1879 = sext i32 %1874 to i64
  %1880 = getelementptr inbounds i16, ptr %1865, i64 %1879
  %1881 = load i16, ptr %1880, align 2, !tbaa !44
  %1882 = zext i16 %1881 to i32
  %1883 = add i32 %1876, %1882
  %1884 = add nsw i32 %1882, -1
  %1885 = add i32 %1883, 1
  %1886 = sext i32 %1885 to i64
  %1887 = getelementptr inbounds i16, ptr %1865, i64 %1886
  %1888 = sext i32 %1883 to i64
  %1889 = getelementptr inbounds i16, ptr %1865, i64 %1888
  %1890 = load i16, ptr %1889, align 2, !tbaa !44
  %1891 = zext i16 %1890 to i32
  %1892 = add i32 %1885, %1891
  store i32 %1892, ptr %13, align 8, !tbaa !17
  %1893 = add nsw i32 %1891, -1
  br label %1894

1894:                                             ; preds = %1852, %1864
  %1895 = phi ptr [ %1869, %1864 ], [ %1289, %1852 ]
  %1896 = phi i32 [ %1875, %1864 ], [ %1626, %1852 ]
  %1897 = phi ptr [ %1878, %1864 ], [ %1651, %1852 ]
  %1898 = phi i32 [ %1884, %1864 ], [ %1648, %1852 ]
  %1899 = phi ptr [ %1887, %1864 ], [ %1760, %1852 ]
  %1900 = phi i32 [ %1893, %1864 ], [ %1757, %1852 ]
  %1901 = phi i32 [ %672, %1864 ], [ %1247, %1852 ]
  %1902 = phi i32 [ %671, %1864 ], [ %1248, %1852 ]
  %1903 = phi i32 [ %670, %1864 ], [ %1249, %1852 ]
  %1904 = phi i32 [ %669, %1864 ], [ %1250, %1852 ]
  %1905 = phi ptr [ %667, %1864 ], [ %943, %1852 ]
  %1906 = phi ptr [ %666, %1864 ], [ %944, %1852 ]
  %1907 = phi ptr [ %665, %1864 ], [ %945, %1852 ]
  %1908 = getelementptr inbounds %struct.CompAtom, ptr %40, i64 %674, i32 1
  %1909 = load float, ptr %1908, align 8, !tbaa !79
  %1910 = fpext float %1909 to double
  %1911 = fmul double %1910, 0x4074C104816F0069
  %1912 = fmul double %29, %1911
  %1913 = fmul double %24, %1912
  %1914 = getelementptr inbounds %struct.CompAtom, ptr %40, i64 %674, i32 2
  %1915 = load i16, ptr %1914, align 4, !tbaa !80
  %1916 = sext i16 %1915 to i32
  %1917 = load ptr, ptr %651, align 8, !tbaa !81
  %1918 = load i32, ptr %652, align 8, !tbaa !83
  %1919 = shl nsw i32 %1916, 1
  %1920 = mul i32 %1919, %1918
  %1921 = zext i32 %1920 to i64
  %1922 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %1917, i64 %1921
  %1923 = load double, ptr @_ZN20ComputeNonbondedUtil7cutoff2E, align 8, !tbaa !19
  %1924 = extractelement <2 x double> %692, i64 0
  %1925 = extractelement <2 x double> %692, i64 1
  %1926 = tail call noundef i32 @_Z22pairlist_from_pairlistddddPK8CompAtomPKtiPtdPd(double noundef %1923, double noundef %1924, double noundef %1925, double noundef %695, ptr noundef %42, ptr noundef nonnull %1895, i32 noundef %1896, ptr noundef %95, double noundef %32, ptr noundef %141)
  %1927 = icmp sgt i32 %1926, 0
  br i1 %1927, label %1928, label %2043

1928:                                             ; preds = %1894
  %1929 = load ptr, ptr @_ZN20ComputeNonbondedUtil8r2_tableE, align 8, !tbaa !23
  %1930 = zext i32 %1926 to i64
  br label %1931

1931:                                             ; preds = %1928, %1931
  %1932 = phi i64 [ 0, %1928 ], [ %2041, %1931 ]
  %1933 = phi double [ 0.000000e+00, %1928 ], [ %2015, %1931 ]
  %1934 = phi double [ 0.000000e+00, %1928 ], [ %2037, %1931 ]
  %1935 = phi <2 x double> [ zeroinitializer, %1928 ], [ %2011, %1931 ]
  %1936 = phi <2 x double> [ zeroinitializer, %1928 ], [ %2033, %1931 ]
  %1937 = shl nuw nsw i64 %1932, 1
  %1938 = getelementptr inbounds i32, ptr %142, i64 %1937
  %1939 = load i32, ptr %1938, align 4, !tbaa !5
  %1940 = ashr i32 %1939, 14
  %1941 = add nsw i32 %1940, %35
  %1942 = getelementptr inbounds i16, ptr %95, i64 %1932
  %1943 = load i16, ptr %1942, align 2, !tbaa !44
  %1944 = zext i16 %1943 to i64
  %1945 = getelementptr inbounds %struct.CompAtom, ptr %42, i64 %1944
  %1946 = getelementptr inbounds double, ptr %141, i64 %1932
  %1947 = load double, ptr %1946, align 8, !tbaa !19
  %1948 = sext i32 %1941 to i64
  %1949 = getelementptr inbounds double, ptr %1929, i64 %1948
  %1950 = load double, ptr %1949, align 8, !tbaa !19
  %1951 = fsub double %1947, %1950
  %1952 = shl nsw i32 %1941, 4
  %1953 = sext i32 %1952 to i64
  %1954 = getelementptr inbounds double, ptr %27, i64 %1953
  %1955 = getelementptr inbounds %struct.CompAtom, ptr %42, i64 %1944, i32 2
  %1956 = load i16, ptr %1955, align 4, !tbaa !80
  %1957 = sext i16 %1956 to i32
  %1958 = shl nsw i32 %1957, 1
  %1959 = sext i32 %1958 to i64
  %1960 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %1922, i64 %1959
  %1961 = getelementptr inbounds %class.Vector, ptr %626, i64 %1944
  %1962 = getelementptr inbounds %class.Vector, ptr %632, i64 %1944
  %1963 = getelementptr inbounds %struct.CompAtom, ptr %42, i64 %1944, i32 1
  %1964 = load float, ptr %1963, align 8, !tbaa !79
  %1965 = fpext float %1964 to double
  %1966 = fmul double %1913, %1965
  %1967 = getelementptr inbounds %class.Vector, ptr %1945, i64 0, i32 2
  %1968 = load double, ptr %1967, align 8, !tbaa !49
  %1969 = fsub double %695, %1968
  %1970 = load double, ptr %1960, align 8, !tbaa !84
  %1971 = fmul double %29, %1970
  %1972 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %1922, i64 %1959, i32 1
  %1973 = load double, ptr %1972, align 8, !tbaa !86
  %1974 = load double, ptr %1954, align 8, !tbaa !19
  %1975 = getelementptr inbounds double, ptr %1954, i64 2
  %1976 = load double, ptr %1975, align 8, !tbaa !19
  %1977 = fmul double %1973, %653
  %1978 = fmul double %1977, %1976
  %1979 = tail call double @llvm.fmuladd.f64(double %1971, double %1974, double %1978)
  %1980 = getelementptr inbounds double, ptr %1954, i64 1
  %1981 = load double, ptr %1980, align 8, !tbaa !19
  %1982 = getelementptr inbounds double, ptr %1954, i64 3
  %1983 = load double, ptr %1982, align 8, !tbaa !19
  %1984 = fmul double %1977, %1983
  %1985 = tail call double @llvm.fmuladd.f64(double %1971, double %1981, double %1984)
  %1986 = getelementptr inbounds double, ptr %1954, i64 4
  %1987 = load double, ptr %1986, align 8, !tbaa !19
  %1988 = getelementptr inbounds double, ptr %1954, i64 6
  %1989 = load double, ptr %1988, align 8, !tbaa !19
  %1990 = fmul double %1977, %1989
  %1991 = tail call double @llvm.fmuladd.f64(double %1971, double %1987, double %1990)
  %1992 = getelementptr inbounds double, ptr %1954, i64 8
  %1993 = load double, ptr %1992, align 8, !tbaa !19
  %1994 = fmul double %1966, %1993
  %1995 = getelementptr inbounds double, ptr %1954, i64 9
  %1996 = load double, ptr %1995, align 8, !tbaa !19
  %1997 = fmul double %1966, %1996
  %1998 = getelementptr inbounds double, ptr %1954, i64 10
  %1999 = load double, ptr %1998, align 8, !tbaa !19
  %2000 = fmul double %1966, %1999
  %2001 = fadd double %1979, %1994
  %2002 = fadd double %1985, %1997
  %2003 = fadd double %1991, %2000
  %2004 = tail call double @llvm.fmuladd.f64(double %1951, double %2001, double %2002)
  %2005 = tail call double @llvm.fmuladd.f64(double %2004, double %1951, double %2003)
  %2006 = load <2 x double>, ptr %1945, align 8, !tbaa !19
  %2007 = fsub <2 x double> %692, %2006
  %2008 = insertelement <2 x double> poison, double %2005, i64 0
  %2009 = shufflevector <2 x double> %2008, <2 x double> poison, <2 x i32> zeroinitializer
  %2010 = fmul <2 x double> %2007, %2009
  %2011 = fadd <2 x double> %1935, %2010
  %2012 = load <2 x double>, ptr %1961, align 8, !tbaa !19
  %2013 = fsub <2 x double> %2012, %2010
  store <2 x double> %2013, ptr %1961, align 8, !tbaa !19
  %2014 = fmul double %1969, %2005
  %2015 = fadd double %1933, %2014
  %2016 = getelementptr inbounds %class.Vector, ptr %626, i64 %1944, i32 2
  %2017 = load double, ptr %2016, align 8, !tbaa !87
  %2018 = fsub double %2017, %2014
  store double %2018, ptr %2016, align 8, !tbaa !87
  %2019 = getelementptr inbounds double, ptr %1954, i64 12
  %2020 = load double, ptr %2019, align 8, !tbaa !19
  %2021 = getelementptr inbounds double, ptr %1954, i64 13
  %2022 = load double, ptr %2021, align 8, !tbaa !19
  %2023 = getelementptr inbounds double, ptr %1954, i64 14
  %2024 = load double, ptr %2023, align 8, !tbaa !19
  %2025 = fmul double %1966, %2020
  %2026 = fmul double %1966, %2022
  %2027 = fmul double %1966, %2024
  %2028 = tail call double @llvm.fmuladd.f64(double %1951, double %2025, double %2026)
  %2029 = tail call double @llvm.fmuladd.f64(double %2028, double %1951, double %2027)
  %2030 = insertelement <2 x double> poison, double %2029, i64 0
  %2031 = shufflevector <2 x double> %2030, <2 x double> poison, <2 x i32> zeroinitializer
  %2032 = fmul <2 x double> %2007, %2031
  %2033 = fadd <2 x double> %1936, %2032
  %2034 = load <2 x double>, ptr %1962, align 8, !tbaa !19
  %2035 = fsub <2 x double> %2034, %2032
  store <2 x double> %2035, ptr %1962, align 8, !tbaa !19
  %2036 = fmul double %1969, %2029
  %2037 = fadd double %1934, %2036
  %2038 = getelementptr inbounds %class.Vector, ptr %632, i64 %1944, i32 2
  %2039 = load double, ptr %2038, align 8, !tbaa !87
  %2040 = fsub double %2039, %2036
  store double %2040, ptr %2038, align 8, !tbaa !87
  %2041 = add nuw nsw i64 %1932, 1
  %2042 = icmp eq i64 %2041, %1930
  br i1 %2042, label %2043, label %1931

2043:                                             ; preds = %1931, %1894
  %2044 = phi double [ 0.000000e+00, %1894 ], [ %2037, %1931 ]
  %2045 = phi double [ 0.000000e+00, %1894 ], [ %2015, %1931 ]
  %2046 = phi <2 x double> [ zeroinitializer, %1894 ], [ %2011, %1931 ]
  %2047 = phi <2 x double> [ zeroinitializer, %1894 ], [ %2033, %1931 ]
  %2048 = load double, ptr @_ZN20ComputeNonbondedUtil7cutoff2E, align 8, !tbaa !19
  %2049 = tail call noundef i32 @_Z22pairlist_from_pairlistddddPK8CompAtomPKtiPtdPd(double noundef %2048, double noundef %1924, double noundef %1925, double noundef %695, ptr noundef %42, ptr noundef %1899, i32 noundef %1900, ptr noundef %95, double noundef %32, ptr noundef %141)
  %2050 = add nsw i32 %2049, %663
  %2051 = icmp sgt i32 %2049, 0
  br i1 %2051, label %2052, label %2181

2052:                                             ; preds = %2043
  %2053 = load ptr, ptr @_ZN20ComputeNonbondedUtil8r2_tableE, align 8, !tbaa !23
  %2054 = zext i32 %2049 to i64
  br label %2055

2055:                                             ; preds = %2052, %2055
  %2056 = phi i64 [ 0, %2052 ], [ %2179, %2055 ]
  %2057 = phi double [ %2045, %2052 ], [ %2141, %2055 ]
  %2058 = phi double [ %2044, %2052 ], [ %2175, %2055 ]
  %2059 = phi <2 x double> [ %2046, %2052 ], [ %2137, %2055 ]
  %2060 = phi <2 x double> [ %2047, %2052 ], [ %2171, %2055 ]
  %2061 = shl nuw nsw i64 %2056, 1
  %2062 = getelementptr inbounds i32, ptr %142, i64 %2061
  %2063 = load i32, ptr %2062, align 4, !tbaa !5
  %2064 = ashr i32 %2063, 14
  %2065 = add nsw i32 %2064, %35
  %2066 = getelementptr inbounds i16, ptr %95, i64 %2056
  %2067 = load i16, ptr %2066, align 2, !tbaa !44
  %2068 = zext i16 %2067 to i64
  %2069 = getelementptr inbounds %struct.CompAtom, ptr %42, i64 %2068
  %2070 = getelementptr inbounds double, ptr %141, i64 %2056
  %2071 = load double, ptr %2070, align 8, !tbaa !19
  %2072 = sext i32 %2065 to i64
  %2073 = getelementptr inbounds double, ptr %2053, i64 %2072
  %2074 = load double, ptr %2073, align 8, !tbaa !19
  %2075 = fsub double %2071, %2074
  %2076 = shl nsw i32 %2065, 4
  %2077 = sext i32 %2076 to i64
  %2078 = getelementptr inbounds double, ptr %27, i64 %2077
  %2079 = getelementptr inbounds %struct.CompAtom, ptr %42, i64 %2068, i32 2
  %2080 = load i16, ptr %2079, align 4, !tbaa !80
  %2081 = sext i16 %2080 to i32
  %2082 = shl nsw i32 %2081, 1
  %2083 = sext i32 %2082 to i64
  %2084 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %1922, i64 %2083
  %2085 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %2084, i64 1
  %2086 = getelementptr inbounds %class.Vector, ptr %626, i64 %2068
  %2087 = getelementptr inbounds %class.Vector, ptr %632, i64 %2068
  %2088 = getelementptr inbounds %struct.CompAtom, ptr %42, i64 %2068, i32 1
  %2089 = load float, ptr %2088, align 8, !tbaa !79
  %2090 = fpext float %2089 to double
  %2091 = fmul double %1913, %2090
  %2092 = getelementptr inbounds %class.Vector, ptr %2069, i64 0, i32 2
  %2093 = load double, ptr %2092, align 8, !tbaa !49
  %2094 = fsub double %695, %2093
  %2095 = load double, ptr %2085, align 8, !tbaa !84
  %2096 = fmul double %29, %2095
  %2097 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %2084, i64 1, i32 1
  %2098 = load double, ptr %2097, align 8, !tbaa !86
  %2099 = load double, ptr %2078, align 8, !tbaa !19
  %2100 = getelementptr inbounds double, ptr %2078, i64 2
  %2101 = load double, ptr %2100, align 8, !tbaa !19
  %2102 = fmul double %2098, %653
  %2103 = fmul double %2102, %2101
  %2104 = tail call double @llvm.fmuladd.f64(double %2096, double %2099, double %2103)
  %2105 = getelementptr inbounds double, ptr %2078, i64 1
  %2106 = load double, ptr %2105, align 8, !tbaa !19
  %2107 = getelementptr inbounds double, ptr %2078, i64 3
  %2108 = load double, ptr %2107, align 8, !tbaa !19
  %2109 = fmul double %2102, %2108
  %2110 = tail call double @llvm.fmuladd.f64(double %2096, double %2106, double %2109)
  %2111 = getelementptr inbounds double, ptr %2078, i64 4
  %2112 = load double, ptr %2111, align 8, !tbaa !19
  %2113 = getelementptr inbounds double, ptr %2078, i64 6
  %2114 = load double, ptr %2113, align 8, !tbaa !19
  %2115 = fmul double %2102, %2114
  %2116 = tail call double @llvm.fmuladd.f64(double %2096, double %2112, double %2115)
  %2117 = fmul double %654, %2091
  %2118 = getelementptr inbounds double, ptr %2078, i64 8
  %2119 = load double, ptr %2118, align 8, !tbaa !19
  %2120 = fmul double %2117, %2119
  %2121 = getelementptr inbounds double, ptr %2078, i64 9
  %2122 = load double, ptr %2121, align 8, !tbaa !19
  %2123 = fmul double %2117, %2122
  %2124 = getelementptr inbounds double, ptr %2078, i64 10
  %2125 = load double, ptr %2124, align 8, !tbaa !19
  %2126 = fmul double %2117, %2125
  %2127 = fadd double %2104, %2120
  %2128 = fadd double %2110, %2123
  %2129 = fadd double %2116, %2126
  %2130 = tail call double @llvm.fmuladd.f64(double %2075, double %2127, double %2128)
  %2131 = tail call double @llvm.fmuladd.f64(double %2130, double %2075, double %2129)
  %2132 = load <2 x double>, ptr %2069, align 8, !tbaa !19
  %2133 = fsub <2 x double> %692, %2132
  %2134 = insertelement <2 x double> poison, double %2131, i64 0
  %2135 = shufflevector <2 x double> %2134, <2 x double> poison, <2 x i32> zeroinitializer
  %2136 = fmul <2 x double> %2133, %2135
  %2137 = fadd <2 x double> %2059, %2136
  %2138 = load <2 x double>, ptr %2086, align 8, !tbaa !19
  %2139 = fsub <2 x double> %2138, %2136
  store <2 x double> %2139, ptr %2086, align 8, !tbaa !19
  %2140 = fmul double %2094, %2131
  %2141 = fadd double %2057, %2140
  %2142 = getelementptr inbounds %class.Vector, ptr %626, i64 %2068, i32 2
  %2143 = load double, ptr %2142, align 8, !tbaa !87
  %2144 = fsub double %2143, %2140
  store double %2144, ptr %2142, align 8, !tbaa !87
  %2145 = shl nsw i32 %2065, 2
  %2146 = sext i32 %2145 to i64
  %2147 = getelementptr inbounds double, ptr %28, i64 %2146
  %2148 = getelementptr inbounds double, ptr %2078, i64 12
  %2149 = load double, ptr %2148, align 8, !tbaa !19
  %2150 = getelementptr inbounds double, ptr %2078, i64 13
  %2151 = load double, ptr %2150, align 8, !tbaa !19
  %2152 = getelementptr inbounds double, ptr %2078, i64 14
  %2153 = load double, ptr %2152, align 8, !tbaa !19
  %2154 = getelementptr inbounds double, ptr %2147, i64 1
  %2155 = load double, ptr %2154, align 8, !tbaa !19
  %2156 = tail call double @llvm.fmuladd.f64(double %655, double %2155, double %2153)
  %2157 = getelementptr inbounds double, ptr %2147, i64 2
  %2158 = load double, ptr %2157, align 8, !tbaa !19
  %2159 = tail call double @llvm.fmuladd.f64(double %656, double %2158, double %2151)
  %2160 = getelementptr inbounds double, ptr %2147, i64 3
  %2161 = load double, ptr %2160, align 8, !tbaa !19
  %2162 = tail call double @llvm.fmuladd.f64(double %657, double %2161, double %2149)
  %2163 = fmul double %2091, %2162
  %2164 = fmul double %2091, %2159
  %2165 = fmul double %2091, %2156
  %2166 = tail call double @llvm.fmuladd.f64(double %2075, double %2163, double %2164)
  %2167 = tail call double @llvm.fmuladd.f64(double %2166, double %2075, double %2165)
  %2168 = insertelement <2 x double> poison, double %2167, i64 0
  %2169 = shufflevector <2 x double> %2168, <2 x double> poison, <2 x i32> zeroinitializer
  %2170 = fmul <2 x double> %2133, %2169
  %2171 = fadd <2 x double> %2060, %2170
  %2172 = load <2 x double>, ptr %2087, align 8, !tbaa !19
  %2173 = fsub <2 x double> %2172, %2170
  store <2 x double> %2173, ptr %2087, align 8, !tbaa !19
  %2174 = fmul double %2094, %2167
  %2175 = fadd double %2058, %2174
  %2176 = getelementptr inbounds %class.Vector, ptr %632, i64 %2068, i32 2
  %2177 = load double, ptr %2176, align 8, !tbaa !87
  %2178 = fsub double %2177, %2174
  store double %2178, ptr %2176, align 8, !tbaa !87
  %2179 = add nuw nsw i64 %2056, 1
  %2180 = icmp eq i64 %2179, %2054
  br i1 %2180, label %2181, label %2055

2181:                                             ; preds = %2055, %2043
  %2182 = phi double [ %2044, %2043 ], [ %2175, %2055 ]
  %2183 = phi double [ %2045, %2043 ], [ %2141, %2055 ]
  %2184 = phi <2 x double> [ %2046, %2043 ], [ %2137, %2055 ]
  %2185 = phi <2 x double> [ %2047, %2043 ], [ %2171, %2055 ]
  %2186 = load double, ptr @_ZN20ComputeNonbondedUtil7cutoff2E, align 8, !tbaa !19
  %2187 = tail call noundef i32 @_Z22pairlist_from_pairlistddddPK8CompAtomPKtiPtdPd(double noundef %2186, double noundef %1924, double noundef %1925, double noundef %695, ptr noundef %42, ptr noundef %1897, i32 noundef %1898, ptr noundef %95, double noundef %32, ptr noundef %141)
  %2188 = add nsw i32 %2050, %2187
  %2189 = icmp sgt i32 %2187, 0
  br i1 %2189, label %2190, label %2261

2190:                                             ; preds = %2181
  %2191 = load ptr, ptr @_ZN20ComputeNonbondedUtil8r2_tableE, align 8, !tbaa !23
  %2192 = zext i32 %2187 to i64
  br label %2193

2193:                                             ; preds = %2190, %2193
  %2194 = phi i64 [ 0, %2190 ], [ %2259, %2193 ]
  %2195 = phi double [ %2182, %2190 ], [ %2255, %2193 ]
  %2196 = phi <2 x double> [ %2185, %2190 ], [ %2251, %2193 ]
  %2197 = shl nuw nsw i64 %2194, 1
  %2198 = getelementptr inbounds i32, ptr %142, i64 %2197
  %2199 = load i32, ptr %2198, align 4, !tbaa !5
  %2200 = ashr i32 %2199, 14
  %2201 = add nsw i32 %2200, %35
  %2202 = getelementptr inbounds i16, ptr %95, i64 %2194
  %2203 = load i16, ptr %2202, align 2, !tbaa !44
  %2204 = zext i16 %2203 to i64
  %2205 = getelementptr inbounds %struct.CompAtom, ptr %42, i64 %2204
  %2206 = getelementptr inbounds double, ptr %141, i64 %2194
  %2207 = load double, ptr %2206, align 8, !tbaa !19
  %2208 = sext i32 %2201 to i64
  %2209 = getelementptr inbounds double, ptr %2191, i64 %2208
  %2210 = load double, ptr %2209, align 8, !tbaa !19
  %2211 = fsub double %2207, %2210
  %2212 = shl nsw i32 %2201, 4
  %2213 = sext i32 %2212 to i64
  %2214 = getelementptr inbounds double, ptr %27, i64 %2213
  %2215 = getelementptr inbounds %class.Vector, ptr %632, i64 %2204
  %2216 = getelementptr inbounds %struct.CompAtom, ptr %42, i64 %2204, i32 1
  %2217 = load float, ptr %2216, align 8, !tbaa !79
  %2218 = fpext float %2217 to double
  %2219 = fmul double %1913, %2218
  %2220 = getelementptr inbounds %class.Vector, ptr %2205, i64 0, i32 2
  %2221 = load double, ptr %2220, align 8, !tbaa !49
  %2222 = fsub double %695, %2221
  %2223 = shl nsw i32 %2201, 2
  %2224 = sext i32 %2223 to i64
  %2225 = getelementptr inbounds double, ptr %28, i64 %2224
  %2226 = getelementptr inbounds double, ptr %2214, i64 12
  %2227 = load double, ptr %2226, align 8, !tbaa !19
  %2228 = getelementptr inbounds double, ptr %2214, i64 13
  %2229 = load double, ptr %2228, align 8, !tbaa !19
  %2230 = getelementptr inbounds double, ptr %2214, i64 14
  %2231 = load double, ptr %2230, align 8, !tbaa !19
  %2232 = getelementptr inbounds double, ptr %2225, i64 1
  %2233 = load double, ptr %2232, align 8, !tbaa !19
  %2234 = tail call double @llvm.fmuladd.f64(double %2233, double 2.000000e+00, double %2231)
  %2235 = getelementptr inbounds double, ptr %2225, i64 2
  %2236 = load double, ptr %2235, align 8, !tbaa !19
  %2237 = tail call double @llvm.fmuladd.f64(double %2236, double 4.000000e+00, double %2229)
  %2238 = getelementptr inbounds double, ptr %2225, i64 3
  %2239 = load double, ptr %2238, align 8, !tbaa !19
  %2240 = tail call double @llvm.fmuladd.f64(double %2239, double 6.000000e+00, double %2227)
  %2241 = fmul double %2219, %2240
  %2242 = fmul double %2219, %2237
  %2243 = fmul double %2219, %2234
  %2244 = tail call double @llvm.fmuladd.f64(double %2211, double %2241, double %2242)
  %2245 = tail call double @llvm.fmuladd.f64(double %2244, double %2211, double %2243)
  %2246 = load <2 x double>, ptr %2205, align 8, !tbaa !19
  %2247 = fsub <2 x double> %692, %2246
  %2248 = insertelement <2 x double> poison, double %2245, i64 0
  %2249 = shufflevector <2 x double> %2248, <2 x double> poison, <2 x i32> zeroinitializer
  %2250 = fmul <2 x double> %2247, %2249
  %2251 = fadd <2 x double> %2196, %2250
  %2252 = load <2 x double>, ptr %2215, align 8, !tbaa !19
  %2253 = fsub <2 x double> %2252, %2250
  store <2 x double> %2253, ptr %2215, align 8, !tbaa !19
  %2254 = fmul double %2222, %2245
  %2255 = fadd double %2195, %2254
  %2256 = getelementptr inbounds %class.Vector, ptr %632, i64 %2204, i32 2
  %2257 = load double, ptr %2256, align 8, !tbaa !87
  %2258 = fsub double %2257, %2254
  store double %2258, ptr %2256, align 8, !tbaa !87
  %2259 = add nuw nsw i64 %2194, 1
  %2260 = icmp eq i64 %2259, %2192
  br i1 %2260, label %2261, label %2193

2261:                                             ; preds = %2193, %2181
  %2262 = phi double [ %2182, %2181 ], [ %2255, %2193 ]
  %2263 = phi <2 x double> [ %2185, %2181 ], [ %2251, %2193 ]
  %2264 = getelementptr inbounds %class.Vector, ptr %626, i64 %674
  %2265 = load <2 x double>, ptr %2264, align 8, !tbaa !19
  %2266 = fadd <2 x double> %2184, %2265
  store <2 x double> %2266, ptr %2264, align 8, !tbaa !19
  %2267 = getelementptr inbounds %class.Vector, ptr %626, i64 %674, i32 2
  %2268 = load double, ptr %2267, align 8, !tbaa !87
  %2269 = fadd double %2183, %2268
  store double %2269, ptr %2267, align 8, !tbaa !87
  %2270 = getelementptr inbounds %class.Vector, ptr %632, i64 %674
  %2271 = load <2 x double>, ptr %2270, align 8, !tbaa !19
  %2272 = fadd <2 x double> %2263, %2271
  store <2 x double> %2272, ptr %2270, align 8, !tbaa !19
  %2273 = getelementptr inbounds %class.Vector, ptr %632, i64 %674, i32 2
  %2274 = load double, ptr %2273, align 8, !tbaa !87
  %2275 = fadd double %2262, %2274
  store double %2275, ptr %2273, align 8, !tbaa !87
  br label %2276

2276:                                             ; preds = %2261, %685
  %2277 = phi i32 [ %686, %685 ], [ %690, %2261 ]
  %2278 = phi i32 [ %672, %685 ], [ %1901, %2261 ]
  %2279 = phi i32 [ %671, %685 ], [ %1902, %2261 ]
  %2280 = phi i32 [ %670, %685 ], [ %1903, %2261 ]
  %2281 = phi i32 [ %669, %685 ], [ %1904, %2261 ]
  %2282 = phi i32 [ %668, %685 ], [ %697, %2261 ]
  %2283 = phi ptr [ %667, %685 ], [ %1905, %2261 ]
  %2284 = phi ptr [ %666, %685 ], [ %1906, %2261 ]
  %2285 = phi ptr [ %665, %685 ], [ %1907, %2261 ]
  %2286 = phi i32 [ %688, %685 ], [ %664, %2261 ]
  %2287 = phi i32 [ %663, %685 ], [ %2188, %2261 ]
  %2288 = add nsw i32 %2286, 1
  %2289 = icmp slt i32 %2288, %636
  br i1 %2289, label %662, label %2290

2290:                                             ; preds = %2276, %620
  %2291 = phi ptr [ null, %620 ], [ %2285, %2276 ]
  %2292 = phi i32 [ 0, %620 ], [ %2287, %2276 ]
  %2293 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 3
  %2294 = load ptr, ptr %2293, align 8, !tbaa !23
  %2295 = icmp sgt i32 %37, 0
  br i1 %2295, label %2296, label %2337

2296:                                             ; preds = %2290
  %2297 = zext i32 %37 to i64
  br label %2305

2298:                                             ; preds = %2305
  %2299 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 4
  %2300 = load ptr, ptr %2299, align 8, !tbaa !23
  %2301 = extractelement <2 x double> %2334, i64 0
  %2302 = extractelement <2 x double> %2334, i64 1
  br i1 %2295, label %2303, label %2337

2303:                                             ; preds = %2298
  %2304 = zext i32 %37 to i64
  br label %2376

2305:                                             ; preds = %2296, %2305
  %2306 = phi i64 [ 0, %2296 ], [ %2335, %2305 ]
  %2307 = phi <4 x double> [ zeroinitializer, %2296 ], [ %2328, %2305 ]
  %2308 = phi <2 x double> [ zeroinitializer, %2296 ], [ %2334, %2305 ]
  %2309 = getelementptr inbounds %class.Vector, ptr %626, i64 %2306
  %2310 = getelementptr inbounds %class.Vector, ptr %2294, i64 %2306
  %2311 = load <2 x double>, ptr %2309, align 8, !tbaa !19
  %2312 = load <2 x double>, ptr %2310, align 8, !tbaa !19
  %2313 = fadd <2 x double> %2311, %2312
  store <2 x double> %2313, ptr %2310, align 8, !tbaa !19
  %2314 = getelementptr inbounds %class.Vector, ptr %626, i64 %2306, i32 2
  %2315 = load double, ptr %2314, align 8, !tbaa !87
  %2316 = getelementptr inbounds %class.Vector, ptr %2294, i64 %2306, i32 2
  %2317 = load double, ptr %2316, align 8, !tbaa !87
  %2318 = fadd double %2315, %2317
  store double %2318, ptr %2316, align 8, !tbaa !87
  %2319 = getelementptr inbounds %struct.CompAtom, ptr %40, i64 %2306
  %2320 = load <2 x double>, ptr %2319, align 8, !tbaa !19
  %2321 = getelementptr inbounds %class.Vector, ptr %2319, i64 0, i32 2
  %2322 = load double, ptr %2321, align 8, !tbaa !49
  %2323 = load <2 x double>, ptr %2309, align 8, !tbaa !19
  %2324 = shufflevector <2 x double> %2323, <2 x double> poison, <4 x i32> <i32 0, i32 0, i32 0, i32 1>
  %2325 = shufflevector <2 x double> %2320, <2 x double> poison, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>
  %2326 = insertelement <4 x double> %2325, double %2322, i64 2
  %2327 = shufflevector <4 x double> %2326, <4 x double> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 1>
  %2328 = tail call <4 x double> @llvm.fmuladd.v4f64(<4 x double> %2324, <4 x double> %2327, <4 x double> %2307)
  %2329 = load double, ptr %2314, align 8, !tbaa !87
  %2330 = shufflevector <2 x double> %2323, <2 x double> poison, <2 x i32> <i32 1, i32 poison>
  %2331 = insertelement <2 x double> %2330, double %2329, i64 1
  %2332 = insertelement <2 x double> poison, double %2322, i64 0
  %2333 = shufflevector <2 x double> %2332, <2 x double> poison, <2 x i32> zeroinitializer
  %2334 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2331, <2 x double> %2333, <2 x double> %2308)
  %2335 = add nuw nsw i64 %2306, 1
  %2336 = icmp eq i64 %2335, %2297
  br i1 %2336, label %2298, label %2305

2337:                                             ; preds = %2376, %2290, %2298
  %2338 = phi double [ %2301, %2298 ], [ 0.000000e+00, %2290 ], [ %2301, %2376 ]
  %2339 = phi double [ %2302, %2298 ], [ 0.000000e+00, %2290 ], [ %2302, %2376 ]
  %2340 = phi <4 x double> [ zeroinitializer, %2298 ], [ zeroinitializer, %2290 ], [ %2406, %2376 ]
  %2341 = phi <4 x double> [ %2328, %2298 ], [ zeroinitializer, %2290 ], [ %2328, %2376 ]
  %2342 = phi <2 x double> [ zeroinitializer, %2298 ], [ zeroinitializer, %2290 ], [ %2401, %2376 ]
  %2343 = sitofp i32 %2292 to double
  %2344 = getelementptr inbounds double, ptr %6, i64 22
  %2345 = load double, ptr %2344, align 8, !tbaa !19
  %2346 = fadd double %2345, %2343
  store double %2346, ptr %2344, align 8, !tbaa !19
  %2347 = getelementptr inbounds double, ptr %6, i64 3
  %2348 = load <4 x double>, ptr %2347, align 8, !tbaa !19
  %2349 = shufflevector <4 x double> %2341, <4 x double> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 1>
  %2350 = fadd <4 x double> %2349, %2348
  store <4 x double> %2350, ptr %2347, align 8, !tbaa !19
  %2351 = getelementptr inbounds double, ptr %6, i64 7
  %2352 = load <4 x double>, ptr %2351, align 8, !tbaa !19
  %2353 = shufflevector <4 x double> %2341, <4 x double> poison, <4 x i32> <i32 3, i32 poison, i32 2, i32 poison>
  %2354 = insertelement <4 x double> %2353, double %2338, i64 1
  %2355 = shufflevector <4 x double> %2354, <4 x double> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 1>
  %2356 = fadd <4 x double> %2355, %2352
  store <4 x double> %2356, ptr %2351, align 8, !tbaa !19
  %2357 = getelementptr inbounds double, ptr %6, i64 11
  %2358 = load double, ptr %2357, align 8, !tbaa !19
  %2359 = fadd double %2339, %2358
  store double %2359, ptr %2357, align 8, !tbaa !19
  %2360 = getelementptr inbounds double, ptr %6, i64 12
  %2361 = load <4 x double>, ptr %2360, align 8, !tbaa !19
  %2362 = shufflevector <2 x double> %2342, <2 x double> poison, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>
  %2363 = shufflevector <4 x double> %2362, <4 x double> %2340, <4 x i32> <i32 0, i32 1, i32 7, i32 poison>
  %2364 = shufflevector <4 x double> %2363, <4 x double> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 1>
  %2365 = fadd <4 x double> %2364, %2361
  store <4 x double> %2365, ptr %2360, align 8, !tbaa !19
  %2366 = getelementptr inbounds double, ptr %6, i64 16
  %2367 = load <4 x double>, ptr %2366, align 8, !tbaa !19
  %2368 = shufflevector <4 x double> %2340, <4 x double> poison, <4 x i32> <i32 2, i32 1, i32 3, i32 poison>
  %2369 = shufflevector <4 x double> %2368, <4 x double> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 1>
  %2370 = fadd <4 x double> %2369, %2367
  store <4 x double> %2370, ptr %2366, align 8, !tbaa !19
  %2371 = getelementptr inbounds double, ptr %6, i64 20
  %2372 = load double, ptr %2371, align 8, !tbaa !19
  %2373 = extractelement <4 x double> %2340, i64 0
  %2374 = fadd double %2373, %2372
  store double %2374, ptr %2371, align 8, !tbaa !19
  %2375 = icmp eq ptr %2291, null
  br i1 %2375, label %2410, label %2409

2376:                                             ; preds = %2303, %2376
  %2377 = phi i64 [ 0, %2303 ], [ %2407, %2376 ]
  %2378 = phi <4 x double> [ zeroinitializer, %2303 ], [ %2406, %2376 ]
  %2379 = phi <2 x double> [ zeroinitializer, %2303 ], [ %2401, %2376 ]
  %2380 = getelementptr inbounds %class.Vector, ptr %632, i64 %2377
  %2381 = getelementptr inbounds %class.Vector, ptr %2300, i64 %2377
  %2382 = getelementptr inbounds %class.Vector, ptr %632, i64 %2377, i32 1
  %2383 = load <2 x double>, ptr %2380, align 8, !tbaa !19
  %2384 = load <2 x double>, ptr %2381, align 8, !tbaa !19
  %2385 = fadd <2 x double> %2383, %2384
  store <2 x double> %2385, ptr %2381, align 8, !tbaa !19
  %2386 = getelementptr inbounds %class.Vector, ptr %632, i64 %2377, i32 2
  %2387 = load double, ptr %2386, align 8, !tbaa !87
  %2388 = getelementptr inbounds %class.Vector, ptr %2300, i64 %2377, i32 2
  %2389 = load double, ptr %2388, align 8, !tbaa !87
  %2390 = fadd double %2387, %2389
  store double %2390, ptr %2388, align 8, !tbaa !87
  %2391 = load double, ptr %2380, align 8, !tbaa !191
  %2392 = getelementptr inbounds %struct.CompAtom, ptr %40, i64 %2377
  %2393 = load double, ptr %2392, align 8, !tbaa !67
  %2394 = getelementptr inbounds %class.Vector, ptr %2392, i64 0, i32 1
  %2395 = load <2 x double>, ptr %2394, align 8, !tbaa !19
  %2396 = shufflevector <2 x double> %2395, <2 x double> poison, <4 x i32> <i32 1, i32 1, i32 0, i32 1>
  %2397 = insertelement <2 x double> poison, double %2391, i64 0
  %2398 = shufflevector <2 x double> %2397, <2 x double> poison, <2 x i32> zeroinitializer
  %2399 = shufflevector <2 x double> %2395, <2 x double> poison, <2 x i32> <i32 poison, i32 0>
  %2400 = insertelement <2 x double> %2399, double %2393, i64 0
  %2401 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2398, <2 x double> %2400, <2 x double> %2379)
  %2402 = load <2 x double>, ptr %2382, align 8, !tbaa !19
  %2403 = shufflevector <2 x double> %2402, <2 x double> poison, <4 x i32> <i32 1, i32 0, i32 poison, i32 poison>
  %2404 = insertelement <4 x double> %2403, double %2391, i64 3
  %2405 = shufflevector <4 x double> %2404, <4 x double> poison, <4 x i32> <i32 0, i32 1, i32 1, i32 3>
  %2406 = tail call <4 x double> @llvm.fmuladd.v4f64(<4 x double> %2405, <4 x double> %2396, <4 x double> %2378)
  %2407 = add nuw nsw i64 %2377, 1
  %2408 = icmp eq i64 %2407, %2304
  br i1 %2408, label %2337, label %2376

2409:                                             ; preds = %2337
  tail call void @_ZdaPv(ptr noundef nonnull %2291) #10
  br label %2410

2410:                                             ; preds = %2337, %2409, %1
  ret void
}

; Function Attrs: sspstrong uwtable
define dso_local void @_ZN20ComputeNonbondedUtil26calc_self_energy_fullelectEP9nonbonded(ptr nocapture noundef readonly %0) local_unnamed_addr #0 align 2 {
  %2 = load i32, ptr @_ZN20ComputeNonbondedUtil8commOnlyE, align 4, !tbaa !5
  %3 = icmp eq i32 %2, 0
  br i1 %3, label %4, label %2520

4:                                                ; preds = %1
  %5 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 7
  %6 = load ptr, ptr %5, align 8, !tbaa !9
  %7 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 10
  %8 = load ptr, ptr %7, align 8, !tbaa !14
  %9 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 11
  %10 = load i32, ptr %9, align 8, !tbaa !15
  %11 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 12
  %12 = load i32, ptr %11, align 4, !tbaa !16
  %13 = getelementptr inbounds %class.Pairlists, ptr %8, i64 0, i32 1
  store i32 0, ptr %13, align 8, !tbaa !17
  %14 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 6
  %15 = load <2 x double>, ptr %14, align 8, !tbaa !19
  %16 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 6, i32 2
  %17 = load double, ptr %16, align 8, !tbaa !20
  %18 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 13
  %19 = load double, ptr %18, align 8, !tbaa !21
  %20 = fmul double %19, %19
  %21 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 14
  %22 = load double, ptr %21, align 8, !tbaa !22
  %23 = fmul double %22, %22
  %24 = load double, ptr @_ZN20ComputeNonbondedUtil12dielectric_1E, align 8, !tbaa !19
  %25 = load ptr, ptr @_ZN20ComputeNonbondedUtil7ljTableE, align 8, !tbaa !23
  %26 = load ptr, ptr @_ZN20ComputeNonbondedUtil3molE, align 8, !tbaa !23
  %27 = load ptr, ptr @_ZN20ComputeNonbondedUtil11table_shortE, align 8, !tbaa !23
  %28 = load ptr, ptr @_ZN20ComputeNonbondedUtil10slow_tableE, align 8, !tbaa !23
  %29 = load double, ptr @_ZN20ComputeNonbondedUtil7scalingE, align 8, !tbaa !19
  %30 = load double, ptr @_ZN20ComputeNonbondedUtil7scale14E, align 8, !tbaa !19
  %31 = fsub double 1.000000e+00, %30
  %32 = load double, ptr @_ZN20ComputeNonbondedUtil8r2_deltaE, align 8, !tbaa !19
  %33 = load i32, ptr @_ZN20ComputeNonbondedUtil12r2_delta_expE, align 4, !tbaa !5
  %34 = shl i32 %33, 6
  %35 = add i32 %34, -65472
  %36 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 5
  %37 = load i32, ptr %36, align 8, !tbaa !5
  %38 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 5, i64 1
  %39 = load i32, ptr %38, align 4, !tbaa !5
  %40 = load ptr, ptr %0, align 8, !tbaa !23
  %41 = getelementptr inbounds [2 x ptr], ptr %0, i64 0, i64 1
  %42 = load ptr, ptr %41, align 8, !tbaa !23
  %43 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 1
  %44 = load ptr, ptr %43, align 8, !tbaa !23
  %45 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 1, i64 1
  %46 = load ptr, ptr %45, align 8, !tbaa !23
  %47 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 9
  %48 = load ptr, ptr %47, align 8, !tbaa !24
  %49 = add nsw i32 %39, 5
  %50 = getelementptr inbounds %class.ResizeArray, ptr %48, i64 0, i32 1
  %51 = load ptr, ptr %50, align 8, !tbaa !25
  %52 = getelementptr inbounds %class.ResizeArrayRaw, ptr %51, i64 0, i32 2
  %53 = load i32, ptr %52, align 8, !tbaa !27
  %54 = icmp slt i32 %53, %49
  br i1 %54, label %55, label %93

55:                                               ; preds = %4
  %56 = getelementptr inbounds %class.ResizeArrayRaw, ptr %51, i64 0, i32 3
  %57 = load i32, ptr %56, align 4, !tbaa !30
  %58 = icmp slt i32 %57, %49
  br i1 %58, label %59, label %93

59:                                               ; preds = %55
  %60 = sitofp i32 %57 to float
  %61 = getelementptr inbounds %class.ResizeArrayRaw, ptr %51, i64 0, i32 5
  %62 = load float, ptr %61, align 4, !tbaa !31
  %63 = fmul float %62, %60
  %64 = fptosi float %63 to i32
  %65 = tail call i32 @llvm.smax.i32(i32 %64, i32 %49)
  %66 = sub nsw i32 %65, %57
  %67 = getelementptr inbounds %class.ResizeArrayRaw, ptr %51, i64 0, i32 6
  %68 = load i32, ptr %67, align 8, !tbaa !32
  %69 = icmp slt i32 %66, %68
  %70 = add nsw i32 %68, %57
  %71 = select i1 %69, i32 %70, i32 %65
  %72 = sext i32 %71 to i64
  %73 = shl nsw i64 %72, 1
  %74 = add nsw i64 %73, 31
  %75 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %74) #9
  %76 = getelementptr inbounds i8, ptr %75, i64 31
  %77 = ptrtoint ptr %76 to i64
  %78 = and i64 %77, 31
  %79 = sub nsw i64 0, %78
  %80 = getelementptr inbounds i8, ptr %76, i64 %79
  %81 = load ptr, ptr %51, align 8, !tbaa !33
  %82 = sext i32 %53 to i64
  %83 = shl nsw i64 %82, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %80, ptr align 1 %81, i64 %83, i1 false)
  %84 = icmp eq i32 %57, 0
  br i1 %84, label %90, label %85

85:                                               ; preds = %59
  %86 = getelementptr inbounds %class.ResizeArrayRaw, ptr %51, i64 0, i32 1
  %87 = load ptr, ptr %86, align 8, !tbaa !34
  %88 = icmp eq ptr %87, null
  br i1 %88, label %90, label %89

89:                                               ; preds = %85
  tail call void @_ZdaPv(ptr noundef nonnull %87) #10
  br label %90

90:                                               ; preds = %89, %85, %59
  %91 = getelementptr inbounds %class.ResizeArrayRaw, ptr %51, i64 0, i32 1
  store ptr %75, ptr %91, align 8, !tbaa !34
  store ptr %80, ptr %51, align 8, !tbaa !33
  store i32 %71, ptr %56, align 4, !tbaa !30
  %92 = load ptr, ptr %50, align 8, !tbaa !25
  br label %93

93:                                               ; preds = %4, %55, %90
  %94 = phi ptr [ %51, %4 ], [ %51, %55 ], [ %92, %90 ]
  store i32 %49, ptr %52, align 8, !tbaa !27
  %95 = load ptr, ptr %94, align 8, !tbaa !33
  %96 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %48, i64 0, i32 1, i32 1
  %97 = load ptr, ptr %96, align 8, !tbaa !35
  %98 = getelementptr inbounds %class.ResizeArrayRaw.23, ptr %97, i64 0, i32 2
  %99 = load i32, ptr %98, align 8, !tbaa !37
  %100 = icmp slt i32 %99, %49
  br i1 %100, label %101, label %139

101:                                              ; preds = %93
  %102 = getelementptr inbounds %class.ResizeArrayRaw.23, ptr %97, i64 0, i32 3
  %103 = load i32, ptr %102, align 4, !tbaa !39
  %104 = icmp slt i32 %103, %49
  br i1 %104, label %105, label %139

105:                                              ; preds = %101
  %106 = sitofp i32 %103 to float
  %107 = getelementptr inbounds %class.ResizeArrayRaw.23, ptr %97, i64 0, i32 5
  %108 = load float, ptr %107, align 4, !tbaa !40
  %109 = fmul float %108, %106
  %110 = fptosi float %109 to i32
  %111 = tail call i32 @llvm.smax.i32(i32 %110, i32 %49)
  %112 = sub nsw i32 %111, %103
  %113 = getelementptr inbounds %class.ResizeArrayRaw.23, ptr %97, i64 0, i32 6
  %114 = load i32, ptr %113, align 8, !tbaa !41
  %115 = icmp slt i32 %112, %114
  %116 = add nsw i32 %114, %103
  %117 = select i1 %115, i32 %116, i32 %111
  %118 = sext i32 %117 to i64
  %119 = shl nsw i64 %118, 3
  %120 = add nsw i64 %119, 31
  %121 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %120) #9
  %122 = getelementptr inbounds i8, ptr %121, i64 31
  %123 = ptrtoint ptr %122 to i64
  %124 = and i64 %123, 31
  %125 = sub nsw i64 0, %124
  %126 = getelementptr inbounds i8, ptr %122, i64 %125
  %127 = load ptr, ptr %97, align 8, !tbaa !42
  %128 = sext i32 %99 to i64
  %129 = shl nsw i64 %128, 3
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %126, ptr align 1 %127, i64 %129, i1 false)
  %130 = icmp eq i32 %103, 0
  br i1 %130, label %136, label %131

131:                                              ; preds = %105
  %132 = getelementptr inbounds %class.ResizeArrayRaw.23, ptr %97, i64 0, i32 1
  %133 = load ptr, ptr %132, align 8, !tbaa !43
  %134 = icmp eq ptr %133, null
  br i1 %134, label %136, label %135

135:                                              ; preds = %131
  tail call void @_ZdaPv(ptr noundef nonnull %133) #10
  br label %136

136:                                              ; preds = %135, %131, %105
  %137 = getelementptr inbounds %class.ResizeArrayRaw.23, ptr %97, i64 0, i32 1
  store ptr %121, ptr %137, align 8, !tbaa !43
  store ptr %126, ptr %97, align 8, !tbaa !42
  store i32 %117, ptr %102, align 4, !tbaa !39
  %138 = load ptr, ptr %96, align 8, !tbaa !35
  br label %139

139:                                              ; preds = %93, %101, %136
  %140 = phi ptr [ %97, %93 ], [ %97, %101 ], [ %138, %136 ]
  store i32 %49, ptr %98, align 8, !tbaa !37
  %141 = load ptr, ptr %140, align 8, !tbaa !42
  %142 = getelementptr inbounds i32, ptr %141, i64 1
  %143 = icmp eq i32 %10, 0
  %144 = icmp ne i32 %12, 0
  %145 = select i1 %143, i1 %144, i1 false
  %146 = select i1 %145, i32 0, i32 %49
  %147 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %48, i64 0, i32 2, i32 1
  %148 = load ptr, ptr %147, align 8, !tbaa !25
  %149 = getelementptr inbounds %class.ResizeArrayRaw, ptr %148, i64 0, i32 2
  %150 = load i32, ptr %149, align 8, !tbaa !27
  %151 = icmp slt i32 %150, %146
  br i1 %151, label %152, label %190

152:                                              ; preds = %139
  %153 = getelementptr inbounds %class.ResizeArrayRaw, ptr %148, i64 0, i32 3
  %154 = load i32, ptr %153, align 4, !tbaa !30
  %155 = icmp slt i32 %154, %146
  br i1 %155, label %156, label %190

156:                                              ; preds = %152
  %157 = sitofp i32 %154 to float
  %158 = getelementptr inbounds %class.ResizeArrayRaw, ptr %148, i64 0, i32 5
  %159 = load float, ptr %158, align 4, !tbaa !31
  %160 = fmul float %159, %157
  %161 = fptosi float %160 to i32
  %162 = tail call i32 @llvm.smax.i32(i32 %161, i32 %146)
  %163 = sub nsw i32 %162, %154
  %164 = getelementptr inbounds %class.ResizeArrayRaw, ptr %148, i64 0, i32 6
  %165 = load i32, ptr %164, align 8, !tbaa !32
  %166 = icmp slt i32 %163, %165
  %167 = add nsw i32 %165, %154
  %168 = select i1 %166, i32 %167, i32 %162
  %169 = sext i32 %168 to i64
  %170 = shl nsw i64 %169, 1
  %171 = add nsw i64 %170, 31
  %172 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %171) #9
  %173 = getelementptr inbounds i8, ptr %172, i64 31
  %174 = ptrtoint ptr %173 to i64
  %175 = and i64 %174, 31
  %176 = sub nsw i64 0, %175
  %177 = getelementptr inbounds i8, ptr %173, i64 %176
  %178 = load ptr, ptr %148, align 8, !tbaa !33
  %179 = sext i32 %150 to i64
  %180 = shl nsw i64 %179, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %177, ptr align 1 %178, i64 %180, i1 false)
  %181 = icmp eq i32 %154, 0
  br i1 %181, label %187, label %182

182:                                              ; preds = %156
  %183 = getelementptr inbounds %class.ResizeArrayRaw, ptr %148, i64 0, i32 1
  %184 = load ptr, ptr %183, align 8, !tbaa !34
  %185 = icmp eq ptr %184, null
  br i1 %185, label %187, label %186

186:                                              ; preds = %182
  tail call void @_ZdaPv(ptr noundef nonnull %184) #10
  br label %187

187:                                              ; preds = %186, %182, %156
  %188 = getelementptr inbounds %class.ResizeArrayRaw, ptr %148, i64 0, i32 1
  store ptr %172, ptr %188, align 8, !tbaa !34
  store ptr %177, ptr %148, align 8, !tbaa !33
  store i32 %168, ptr %153, align 4, !tbaa !30
  %189 = load ptr, ptr %147, align 8, !tbaa !25
  br label %190

190:                                              ; preds = %139, %152, %187
  %191 = phi ptr [ %148, %139 ], [ %148, %152 ], [ %189, %187 ]
  store i32 %146, ptr %149, align 8, !tbaa !27
  %192 = load ptr, ptr %191, align 8, !tbaa !33
  %193 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %48, i64 0, i32 3, i32 1
  %194 = load ptr, ptr %193, align 8, !tbaa !25
  %195 = getelementptr inbounds %class.ResizeArrayRaw, ptr %194, i64 0, i32 2
  %196 = load i32, ptr %195, align 8, !tbaa !27
  %197 = icmp slt i32 %196, %146
  br i1 %197, label %198, label %236

198:                                              ; preds = %190
  %199 = getelementptr inbounds %class.ResizeArrayRaw, ptr %194, i64 0, i32 3
  %200 = load i32, ptr %199, align 4, !tbaa !30
  %201 = icmp slt i32 %200, %146
  br i1 %201, label %202, label %236

202:                                              ; preds = %198
  %203 = sitofp i32 %200 to float
  %204 = getelementptr inbounds %class.ResizeArrayRaw, ptr %194, i64 0, i32 5
  %205 = load float, ptr %204, align 4, !tbaa !31
  %206 = fmul float %205, %203
  %207 = fptosi float %206 to i32
  %208 = tail call i32 @llvm.smax.i32(i32 %207, i32 %146)
  %209 = sub nsw i32 %208, %200
  %210 = getelementptr inbounds %class.ResizeArrayRaw, ptr %194, i64 0, i32 6
  %211 = load i32, ptr %210, align 8, !tbaa !32
  %212 = icmp slt i32 %209, %211
  %213 = add nsw i32 %211, %200
  %214 = select i1 %212, i32 %213, i32 %208
  %215 = sext i32 %214 to i64
  %216 = shl nsw i64 %215, 1
  %217 = add nsw i64 %216, 31
  %218 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %217) #9
  %219 = getelementptr inbounds i8, ptr %218, i64 31
  %220 = ptrtoint ptr %219 to i64
  %221 = and i64 %220, 31
  %222 = sub nsw i64 0, %221
  %223 = getelementptr inbounds i8, ptr %219, i64 %222
  %224 = load ptr, ptr %194, align 8, !tbaa !33
  %225 = sext i32 %196 to i64
  %226 = shl nsw i64 %225, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %223, ptr align 1 %224, i64 %226, i1 false)
  %227 = icmp eq i32 %200, 0
  br i1 %227, label %233, label %228

228:                                              ; preds = %202
  %229 = getelementptr inbounds %class.ResizeArrayRaw, ptr %194, i64 0, i32 1
  %230 = load ptr, ptr %229, align 8, !tbaa !34
  %231 = icmp eq ptr %230, null
  br i1 %231, label %233, label %232

232:                                              ; preds = %228
  tail call void @_ZdaPv(ptr noundef nonnull %230) #10
  br label %233

233:                                              ; preds = %232, %228, %202
  %234 = getelementptr inbounds %class.ResizeArrayRaw, ptr %194, i64 0, i32 1
  store ptr %218, ptr %234, align 8, !tbaa !34
  store ptr %223, ptr %194, align 8, !tbaa !33
  store i32 %214, ptr %199, align 4, !tbaa !30
  %235 = load ptr, ptr %193, align 8, !tbaa !25
  br label %236

236:                                              ; preds = %190, %198, %233
  %237 = phi ptr [ %194, %190 ], [ %194, %198 ], [ %235, %233 ]
  store i32 %146, ptr %195, align 8, !tbaa !27
  %238 = load ptr, ptr %237, align 8, !tbaa !33
  %239 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %48, i64 0, i32 4, i32 1
  %240 = load ptr, ptr %239, align 8, !tbaa !25
  %241 = getelementptr inbounds %class.ResizeArrayRaw, ptr %240, i64 0, i32 2
  %242 = load i32, ptr %241, align 8, !tbaa !27
  %243 = icmp slt i32 %242, %146
  br i1 %243, label %244, label %282

244:                                              ; preds = %236
  %245 = getelementptr inbounds %class.ResizeArrayRaw, ptr %240, i64 0, i32 3
  %246 = load i32, ptr %245, align 4, !tbaa !30
  %247 = icmp slt i32 %246, %146
  br i1 %247, label %248, label %282

248:                                              ; preds = %244
  %249 = sitofp i32 %246 to float
  %250 = getelementptr inbounds %class.ResizeArrayRaw, ptr %240, i64 0, i32 5
  %251 = load float, ptr %250, align 4, !tbaa !31
  %252 = fmul float %251, %249
  %253 = fptosi float %252 to i32
  %254 = tail call i32 @llvm.smax.i32(i32 %253, i32 %146)
  %255 = sub nsw i32 %254, %246
  %256 = getelementptr inbounds %class.ResizeArrayRaw, ptr %240, i64 0, i32 6
  %257 = load i32, ptr %256, align 8, !tbaa !32
  %258 = icmp slt i32 %255, %257
  %259 = add nsw i32 %257, %246
  %260 = select i1 %258, i32 %259, i32 %254
  %261 = sext i32 %260 to i64
  %262 = shl nsw i64 %261, 1
  %263 = add nsw i64 %262, 31
  %264 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %263) #9
  %265 = getelementptr inbounds i8, ptr %264, i64 31
  %266 = ptrtoint ptr %265 to i64
  %267 = and i64 %266, 31
  %268 = sub nsw i64 0, %267
  %269 = getelementptr inbounds i8, ptr %265, i64 %268
  %270 = load ptr, ptr %240, align 8, !tbaa !33
  %271 = sext i32 %242 to i64
  %272 = shl nsw i64 %271, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %269, ptr align 1 %270, i64 %272, i1 false)
  %273 = icmp eq i32 %246, 0
  br i1 %273, label %279, label %274

274:                                              ; preds = %248
  %275 = getelementptr inbounds %class.ResizeArrayRaw, ptr %240, i64 0, i32 1
  %276 = load ptr, ptr %275, align 8, !tbaa !34
  %277 = icmp eq ptr %276, null
  br i1 %277, label %279, label %278

278:                                              ; preds = %274
  tail call void @_ZdaPv(ptr noundef nonnull %276) #10
  br label %279

279:                                              ; preds = %278, %274, %248
  %280 = getelementptr inbounds %class.ResizeArrayRaw, ptr %240, i64 0, i32 1
  store ptr %264, ptr %280, align 8, !tbaa !34
  store ptr %269, ptr %240, align 8, !tbaa !33
  store i32 %260, ptr %245, align 4, !tbaa !30
  %281 = load ptr, ptr %239, align 8, !tbaa !25
  br label %282

282:                                              ; preds = %236, %244, %279
  %283 = phi ptr [ %240, %236 ], [ %240, %244 ], [ %281, %279 ]
  store i32 %146, ptr %241, align 8, !tbaa !27
  %284 = load ptr, ptr %283, align 8, !tbaa !33
  %285 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %48, i64 0, i32 5, i32 1
  %286 = load ptr, ptr %285, align 8, !tbaa !25
  %287 = getelementptr inbounds %class.ResizeArrayRaw, ptr %286, i64 0, i32 2
  %288 = load i32, ptr %287, align 8, !tbaa !27
  %289 = icmp slt i32 %288, %146
  br i1 %289, label %290, label %328

290:                                              ; preds = %282
  %291 = getelementptr inbounds %class.ResizeArrayRaw, ptr %286, i64 0, i32 3
  %292 = load i32, ptr %291, align 4, !tbaa !30
  %293 = icmp slt i32 %292, %146
  br i1 %293, label %294, label %328

294:                                              ; preds = %290
  %295 = sitofp i32 %292 to float
  %296 = getelementptr inbounds %class.ResizeArrayRaw, ptr %286, i64 0, i32 5
  %297 = load float, ptr %296, align 4, !tbaa !31
  %298 = fmul float %297, %295
  %299 = fptosi float %298 to i32
  %300 = tail call i32 @llvm.smax.i32(i32 %299, i32 %146)
  %301 = sub nsw i32 %300, %292
  %302 = getelementptr inbounds %class.ResizeArrayRaw, ptr %286, i64 0, i32 6
  %303 = load i32, ptr %302, align 8, !tbaa !32
  %304 = icmp slt i32 %301, %303
  %305 = add nsw i32 %303, %292
  %306 = select i1 %304, i32 %305, i32 %300
  %307 = sext i32 %306 to i64
  %308 = shl nsw i64 %307, 1
  %309 = add nsw i64 %308, 31
  %310 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %309) #9
  %311 = getelementptr inbounds i8, ptr %310, i64 31
  %312 = ptrtoint ptr %311 to i64
  %313 = and i64 %312, 31
  %314 = sub nsw i64 0, %313
  %315 = getelementptr inbounds i8, ptr %311, i64 %314
  %316 = load ptr, ptr %286, align 8, !tbaa !33
  %317 = sext i32 %288 to i64
  %318 = shl nsw i64 %317, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %315, ptr align 1 %316, i64 %318, i1 false)
  %319 = icmp eq i32 %292, 0
  br i1 %319, label %325, label %320

320:                                              ; preds = %294
  %321 = getelementptr inbounds %class.ResizeArrayRaw, ptr %286, i64 0, i32 1
  %322 = load ptr, ptr %321, align 8, !tbaa !34
  %323 = icmp eq ptr %322, null
  br i1 %323, label %325, label %324

324:                                              ; preds = %320
  tail call void @_ZdaPv(ptr noundef nonnull %322) #10
  br label %325

325:                                              ; preds = %324, %320, %294
  %326 = getelementptr inbounds %class.ResizeArrayRaw, ptr %286, i64 0, i32 1
  store ptr %310, ptr %326, align 8, !tbaa !34
  store ptr %315, ptr %286, align 8, !tbaa !33
  store i32 %306, ptr %291, align 4, !tbaa !30
  %327 = load ptr, ptr %285, align 8, !tbaa !25
  br label %328

328:                                              ; preds = %282, %290, %325
  %329 = phi ptr [ %286, %282 ], [ %286, %290 ], [ %327, %325 ]
  store i32 %146, ptr %287, align 8, !tbaa !27
  %330 = load ptr, ptr %329, align 8, !tbaa !33
  %331 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %48, i64 0, i32 6, i32 1
  %332 = load ptr, ptr %331, align 8, !tbaa !25
  %333 = getelementptr inbounds %class.ResizeArrayRaw, ptr %332, i64 0, i32 2
  %334 = load i32, ptr %333, align 8, !tbaa !27
  %335 = icmp slt i32 %334, %146
  br i1 %335, label %336, label %374

336:                                              ; preds = %328
  %337 = getelementptr inbounds %class.ResizeArrayRaw, ptr %332, i64 0, i32 3
  %338 = load i32, ptr %337, align 4, !tbaa !30
  %339 = icmp slt i32 %338, %146
  br i1 %339, label %340, label %374

340:                                              ; preds = %336
  %341 = sitofp i32 %338 to float
  %342 = getelementptr inbounds %class.ResizeArrayRaw, ptr %332, i64 0, i32 5
  %343 = load float, ptr %342, align 4, !tbaa !31
  %344 = fmul float %343, %341
  %345 = fptosi float %344 to i32
  %346 = tail call i32 @llvm.smax.i32(i32 %345, i32 %146)
  %347 = sub nsw i32 %346, %338
  %348 = getelementptr inbounds %class.ResizeArrayRaw, ptr %332, i64 0, i32 6
  %349 = load i32, ptr %348, align 8, !tbaa !32
  %350 = icmp slt i32 %347, %349
  %351 = add nsw i32 %349, %338
  %352 = select i1 %350, i32 %351, i32 %346
  %353 = sext i32 %352 to i64
  %354 = shl nsw i64 %353, 1
  %355 = add nsw i64 %354, 31
  %356 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %355) #9
  %357 = getelementptr inbounds i8, ptr %356, i64 31
  %358 = ptrtoint ptr %357 to i64
  %359 = and i64 %358, 31
  %360 = sub nsw i64 0, %359
  %361 = getelementptr inbounds i8, ptr %357, i64 %360
  %362 = load ptr, ptr %332, align 8, !tbaa !33
  %363 = sext i32 %334 to i64
  %364 = shl nsw i64 %363, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %361, ptr align 1 %362, i64 %364, i1 false)
  %365 = icmp eq i32 %338, 0
  br i1 %365, label %371, label %366

366:                                              ; preds = %340
  %367 = getelementptr inbounds %class.ResizeArrayRaw, ptr %332, i64 0, i32 1
  %368 = load ptr, ptr %367, align 8, !tbaa !34
  %369 = icmp eq ptr %368, null
  br i1 %369, label %371, label %370

370:                                              ; preds = %366
  tail call void @_ZdaPv(ptr noundef nonnull %368) #10
  br label %371

371:                                              ; preds = %370, %366, %340
  %372 = getelementptr inbounds %class.ResizeArrayRaw, ptr %332, i64 0, i32 1
  store ptr %356, ptr %372, align 8, !tbaa !34
  store ptr %361, ptr %332, align 8, !tbaa !33
  store i32 %352, ptr %337, align 4, !tbaa !30
  %373 = load ptr, ptr %331, align 8, !tbaa !25
  br label %374

374:                                              ; preds = %328, %336, %371
  %375 = phi ptr [ %332, %328 ], [ %332, %336 ], [ %373, %371 ]
  store i32 %146, ptr %333, align 8, !tbaa !27
  %376 = load ptr, ptr %375, align 8, !tbaa !33
  %377 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %48, i64 0, i32 15, i32 1
  %378 = load ptr, ptr %377, align 8, !tbaa !25
  %379 = getelementptr inbounds %class.ResizeArrayRaw, ptr %378, i64 0, i32 2
  %380 = load i32, ptr %379, align 8, !tbaa !27
  %381 = icmp slt i32 %380, %146
  br i1 %381, label %382, label %420

382:                                              ; preds = %374
  %383 = getelementptr inbounds %class.ResizeArrayRaw, ptr %378, i64 0, i32 3
  %384 = load i32, ptr %383, align 4, !tbaa !30
  %385 = icmp slt i32 %384, %146
  br i1 %385, label %386, label %420

386:                                              ; preds = %382
  %387 = sitofp i32 %384 to float
  %388 = getelementptr inbounds %class.ResizeArrayRaw, ptr %378, i64 0, i32 5
  %389 = load float, ptr %388, align 4, !tbaa !31
  %390 = fmul float %389, %387
  %391 = fptosi float %390 to i32
  %392 = tail call i32 @llvm.smax.i32(i32 %391, i32 %146)
  %393 = sub nsw i32 %392, %384
  %394 = getelementptr inbounds %class.ResizeArrayRaw, ptr %378, i64 0, i32 6
  %395 = load i32, ptr %394, align 8, !tbaa !32
  %396 = icmp slt i32 %393, %395
  %397 = add nsw i32 %395, %384
  %398 = select i1 %396, i32 %397, i32 %392
  %399 = sext i32 %398 to i64
  %400 = shl nsw i64 %399, 1
  %401 = add nsw i64 %400, 31
  %402 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %401) #9
  %403 = getelementptr inbounds i8, ptr %402, i64 31
  %404 = ptrtoint ptr %403 to i64
  %405 = and i64 %404, 31
  %406 = sub nsw i64 0, %405
  %407 = getelementptr inbounds i8, ptr %403, i64 %406
  %408 = load ptr, ptr %378, align 8, !tbaa !33
  %409 = sext i32 %380 to i64
  %410 = shl nsw i64 %409, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %407, ptr align 1 %408, i64 %410, i1 false)
  %411 = icmp eq i32 %384, 0
  br i1 %411, label %417, label %412

412:                                              ; preds = %386
  %413 = getelementptr inbounds %class.ResizeArrayRaw, ptr %378, i64 0, i32 1
  %414 = load ptr, ptr %413, align 8, !tbaa !34
  %415 = icmp eq ptr %414, null
  br i1 %415, label %417, label %416

416:                                              ; preds = %412
  tail call void @_ZdaPv(ptr noundef nonnull %414) #10
  br label %417

417:                                              ; preds = %416, %412, %386
  %418 = getelementptr inbounds %class.ResizeArrayRaw, ptr %378, i64 0, i32 1
  store ptr %402, ptr %418, align 8, !tbaa !34
  store ptr %407, ptr %378, align 8, !tbaa !33
  store i32 %398, ptr %383, align 4, !tbaa !30
  %419 = load ptr, ptr %377, align 8, !tbaa !25
  br label %420

420:                                              ; preds = %374, %382, %417
  %421 = phi ptr [ %378, %374 ], [ %378, %382 ], [ %419, %417 ]
  store i32 %146, ptr %379, align 8, !tbaa !27
  %422 = load ptr, ptr %421, align 8, !tbaa !33
  %423 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %48, i64 0, i32 16, i32 1
  %424 = load ptr, ptr %423, align 8, !tbaa !25
  %425 = getelementptr inbounds %class.ResizeArrayRaw, ptr %424, i64 0, i32 2
  %426 = load i32, ptr %425, align 8, !tbaa !27
  %427 = icmp slt i32 %426, %146
  br i1 %427, label %428, label %466

428:                                              ; preds = %420
  %429 = getelementptr inbounds %class.ResizeArrayRaw, ptr %424, i64 0, i32 3
  %430 = load i32, ptr %429, align 4, !tbaa !30
  %431 = icmp slt i32 %430, %146
  br i1 %431, label %432, label %466

432:                                              ; preds = %428
  %433 = sitofp i32 %430 to float
  %434 = getelementptr inbounds %class.ResizeArrayRaw, ptr %424, i64 0, i32 5
  %435 = load float, ptr %434, align 4, !tbaa !31
  %436 = fmul float %435, %433
  %437 = fptosi float %436 to i32
  %438 = tail call i32 @llvm.smax.i32(i32 %437, i32 %146)
  %439 = sub nsw i32 %438, %430
  %440 = getelementptr inbounds %class.ResizeArrayRaw, ptr %424, i64 0, i32 6
  %441 = load i32, ptr %440, align 8, !tbaa !32
  %442 = icmp slt i32 %439, %441
  %443 = add nsw i32 %441, %430
  %444 = select i1 %442, i32 %443, i32 %438
  %445 = sext i32 %444 to i64
  %446 = shl nsw i64 %445, 1
  %447 = add nsw i64 %446, 31
  %448 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %447) #9
  %449 = getelementptr inbounds i8, ptr %448, i64 31
  %450 = ptrtoint ptr %449 to i64
  %451 = and i64 %450, 31
  %452 = sub nsw i64 0, %451
  %453 = getelementptr inbounds i8, ptr %449, i64 %452
  %454 = load ptr, ptr %424, align 8, !tbaa !33
  %455 = sext i32 %426 to i64
  %456 = shl nsw i64 %455, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %453, ptr align 1 %454, i64 %456, i1 false)
  %457 = icmp eq i32 %430, 0
  br i1 %457, label %463, label %458

458:                                              ; preds = %432
  %459 = getelementptr inbounds %class.ResizeArrayRaw, ptr %424, i64 0, i32 1
  %460 = load ptr, ptr %459, align 8, !tbaa !34
  %461 = icmp eq ptr %460, null
  br i1 %461, label %463, label %462

462:                                              ; preds = %458
  tail call void @_ZdaPv(ptr noundef nonnull %460) #10
  br label %463

463:                                              ; preds = %462, %458, %432
  %464 = getelementptr inbounds %class.ResizeArrayRaw, ptr %424, i64 0, i32 1
  store ptr %448, ptr %464, align 8, !tbaa !34
  store ptr %453, ptr %424, align 8, !tbaa !33
  store i32 %444, ptr %429, align 4, !tbaa !30
  %465 = load ptr, ptr %423, align 8, !tbaa !25
  br label %466

466:                                              ; preds = %420, %428, %463
  %467 = phi ptr [ %424, %420 ], [ %424, %428 ], [ %465, %463 ]
  store i32 %146, ptr %425, align 8, !tbaa !27
  %468 = load ptr, ptr %467, align 8, !tbaa !33
  br i1 %145, label %610, label %469

469:                                              ; preds = %466
  %470 = icmp sgt i32 %39, 0
  br i1 %470, label %471, label %601

471:                                              ; preds = %469
  %472 = zext i32 %39 to i64
  %473 = and i64 %472, 1
  %474 = icmp eq i32 %39, 1
  br i1 %474, label %507, label %475

475:                                              ; preds = %471
  %476 = and i64 %472, 4294967294
  br label %477

477:                                              ; preds = %502, %475
  %478 = phi i64 [ 0, %475 ], [ %504, %502 ]
  %479 = phi i32 [ 0, %475 ], [ %503, %502 ]
  %480 = phi i64 [ 0, %475 ], [ %505, %502 ]
  %481 = getelementptr inbounds %struct.CompAtom, ptr %42, i64 %478, i32 4
  %482 = load i8, ptr %481, align 1
  %483 = and i8 %482, 7
  %484 = icmp eq i8 %483, 0
  br i1 %484, label %490, label %485

485:                                              ; preds = %477
  %486 = trunc i64 %478 to i16
  %487 = add nsw i32 %479, 1
  %488 = sext i32 %479 to i64
  %489 = getelementptr inbounds i16, ptr %192, i64 %488
  store i16 %486, ptr %489, align 2, !tbaa !44
  br label %490

490:                                              ; preds = %477, %485
  %491 = phi i32 [ %487, %485 ], [ %479, %477 ]
  %492 = or i64 %478, 1
  %493 = getelementptr inbounds %struct.CompAtom, ptr %42, i64 %492, i32 4
  %494 = load i8, ptr %493, align 1
  %495 = and i8 %494, 7
  %496 = icmp eq i8 %495, 0
  br i1 %496, label %502, label %497

497:                                              ; preds = %490
  %498 = trunc i64 %492 to i16
  %499 = add nsw i32 %491, 1
  %500 = sext i32 %491 to i64
  %501 = getelementptr inbounds i16, ptr %192, i64 %500
  store i16 %498, ptr %501, align 2, !tbaa !44
  br label %502

502:                                              ; preds = %497, %490
  %503 = phi i32 [ %499, %497 ], [ %491, %490 ]
  %504 = add nuw nsw i64 %478, 2
  %505 = add i64 %480, 2
  %506 = icmp eq i64 %505, %476
  br i1 %506, label %507, label %477

507:                                              ; preds = %502, %471
  %508 = phi i32 [ undef, %471 ], [ %503, %502 ]
  %509 = phi i64 [ 0, %471 ], [ %504, %502 ]
  %510 = phi i32 [ 0, %471 ], [ %503, %502 ]
  %511 = icmp eq i64 %473, 0
  br i1 %511, label %522, label %512

512:                                              ; preds = %507
  %513 = getelementptr inbounds %struct.CompAtom, ptr %42, i64 %509, i32 4
  %514 = load i8, ptr %513, align 1
  %515 = and i8 %514, 7
  %516 = icmp eq i8 %515, 0
  br i1 %516, label %522, label %517

517:                                              ; preds = %512
  %518 = trunc i64 %509 to i16
  %519 = add nsw i32 %510, 1
  %520 = sext i32 %510 to i64
  %521 = getelementptr inbounds i16, ptr %192, i64 %520
  store i16 %518, ptr %521, align 2, !tbaa !44
  br label %522

522:                                              ; preds = %512, %517, %507
  %523 = phi i32 [ %508, %507 ], [ %519, %517 ], [ %510, %512 ]
  %524 = icmp eq i32 %523, 0
  br i1 %524, label %532, label %525

525:                                              ; preds = %522
  %526 = add nsw i32 %523, -1
  %527 = sext i32 %526 to i64
  %528 = getelementptr inbounds i16, ptr %192, i64 %527
  %529 = load i16, ptr %528, align 2, !tbaa !44
  %530 = sext i32 %523 to i64
  %531 = getelementptr inbounds i16, ptr %192, i64 %530
  store i16 %529, ptr %531, align 2, !tbaa !44
  br label %532

532:                                              ; preds = %525, %522
  %533 = load i32, ptr @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4, !tbaa !5
  %534 = icmp ne i32 %533, 0
  %535 = icmp sgt i32 %523, 0
  %536 = and i1 %534, %535
  br i1 %536, label %537, label %601

537:                                              ; preds = %532
  %538 = zext i32 %523 to i64
  %539 = and i64 %538, 1
  %540 = icmp eq i32 %523, 1
  br i1 %540, label %575, label %541

541:                                              ; preds = %537
  %542 = and i64 %538, 4294967294
  br label %543

543:                                              ; preds = %570, %541
  %544 = phi i64 [ 0, %541 ], [ %572, %570 ]
  %545 = phi i32 [ 0, %541 ], [ %571, %570 ]
  %546 = phi i64 [ 0, %541 ], [ %573, %570 ]
  %547 = getelementptr inbounds i16, ptr %192, i64 %544
  %548 = load i16, ptr %547, align 2, !tbaa !44
  %549 = zext i16 %548 to i64
  %550 = getelementptr inbounds %struct.CompAtomExt, ptr %46, i64 %549
  %551 = load i32, ptr %550, align 4
  %552 = icmp sgt i32 %551, -1
  br i1 %552, label %553, label %557

553:                                              ; preds = %543
  %554 = add nsw i32 %545, 1
  %555 = sext i32 %545 to i64
  %556 = getelementptr inbounds i16, ptr %238, i64 %555
  store i16 %548, ptr %556, align 2, !tbaa !44
  br label %557

557:                                              ; preds = %543, %553
  %558 = phi i32 [ %545, %543 ], [ %554, %553 ]
  %559 = or i64 %544, 1
  %560 = getelementptr inbounds i16, ptr %192, i64 %559
  %561 = load i16, ptr %560, align 2, !tbaa !44
  %562 = zext i16 %561 to i64
  %563 = getelementptr inbounds %struct.CompAtomExt, ptr %46, i64 %562
  %564 = load i32, ptr %563, align 4
  %565 = icmp sgt i32 %564, -1
  br i1 %565, label %566, label %570

566:                                              ; preds = %557
  %567 = add nsw i32 %558, 1
  %568 = sext i32 %558 to i64
  %569 = getelementptr inbounds i16, ptr %238, i64 %568
  store i16 %561, ptr %569, align 2, !tbaa !44
  br label %570

570:                                              ; preds = %566, %557
  %571 = phi i32 [ %558, %557 ], [ %567, %566 ]
  %572 = add nuw nsw i64 %544, 2
  %573 = add i64 %546, 2
  %574 = icmp eq i64 %573, %542
  br i1 %574, label %575, label %543

575:                                              ; preds = %570, %537
  %576 = phi i32 [ undef, %537 ], [ %571, %570 ]
  %577 = phi i64 [ 0, %537 ], [ %572, %570 ]
  %578 = phi i32 [ 0, %537 ], [ %571, %570 ]
  %579 = icmp eq i64 %539, 0
  br i1 %579, label %591, label %580

580:                                              ; preds = %575
  %581 = getelementptr inbounds i16, ptr %192, i64 %577
  %582 = load i16, ptr %581, align 2, !tbaa !44
  %583 = zext i16 %582 to i64
  %584 = getelementptr inbounds %struct.CompAtomExt, ptr %46, i64 %583
  %585 = load i32, ptr %584, align 4
  %586 = icmp sgt i32 %585, -1
  br i1 %586, label %587, label %591

587:                                              ; preds = %580
  %588 = add nsw i32 %578, 1
  %589 = sext i32 %578 to i64
  %590 = getelementptr inbounds i16, ptr %238, i64 %589
  store i16 %582, ptr %590, align 2, !tbaa !44
  br label %591

591:                                              ; preds = %580, %587, %575
  %592 = phi i32 [ %576, %575 ], [ %578, %580 ], [ %588, %587 ]
  %593 = icmp eq i32 %592, 0
  br i1 %593, label %601, label %594

594:                                              ; preds = %591
  %595 = add nsw i32 %592, -1
  %596 = sext i32 %595 to i64
  %597 = getelementptr inbounds i16, ptr %238, i64 %596
  %598 = load i16, ptr %597, align 2, !tbaa !44
  %599 = sext i32 %592 to i64
  %600 = getelementptr inbounds i16, ptr %238, i64 %599
  store i16 %598, ptr %600, align 2, !tbaa !44
  br label %601

601:                                              ; preds = %469, %532, %594, %591
  %602 = phi i32 [ %523, %594 ], [ %523, %591 ], [ %523, %532 ], [ 0, %469 ]
  %603 = phi i32 [ %592, %594 ], [ 0, %591 ], [ 0, %532 ], [ 0, %469 ]
  %604 = load i32, ptr %13, align 8, !tbaa !17
  %605 = add nsw i32 %604, 1
  store i32 %605, ptr %13, align 8, !tbaa !17
  %606 = trunc i32 %37 to i16
  %607 = load ptr, ptr %8, align 8, !tbaa !46
  %608 = sext i32 %604 to i64
  %609 = getelementptr inbounds i16, ptr %607, i64 %608
  store i16 %606, ptr %609, align 2, !tbaa !44
  br label %620

610:                                              ; preds = %466
  %611 = load ptr, ptr %8, align 8, !tbaa !46
  %612 = load i32, ptr %13, align 8, !tbaa !17
  %613 = add nsw i32 %612, 1
  store i32 %613, ptr %13, align 8, !tbaa !17
  %614 = sext i32 %612 to i64
  %615 = getelementptr inbounds i16, ptr %611, i64 %614
  %616 = load i16, ptr %615, align 2, !tbaa !44
  %617 = zext i16 %616 to i32
  %618 = icmp eq i32 %37, %617
  br i1 %618, label %620, label %619

619:                                              ; preds = %610
  tail call void @_Z8NAMD_bugPKc(ptr noundef nonnull @.str)
  br label %620

620:                                              ; preds = %610, %619, %601
  %621 = phi i32 [ 0, %619 ], [ 0, %610 ], [ %602, %601 ]
  %622 = phi i32 [ 0, %619 ], [ 0, %610 ], [ %603, %601 ]
  %623 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %48, i64 0, i32 17, i32 1
  %624 = load ptr, ptr %623, align 8, !tbaa !172
  tail call void @_ZN14ResizeArrayRawI6VectorE6resizeEi(ptr noundef nonnull align 8 dereferenceable(36) %624, i32 noundef %37)
  %625 = load ptr, ptr %623, align 8, !tbaa !172
  %626 = load ptr, ptr %625, align 8, !tbaa !174
  %627 = sext i32 %37 to i64
  %628 = mul nsw i64 %627, 24
  tail call void @llvm.memset.p0.i64(ptr align 1 %626, i8 0, i64 %628, i1 false)
  %629 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %48, i64 0, i32 18, i32 1
  %630 = load ptr, ptr %629, align 8, !tbaa !172
  tail call void @_ZN14ResizeArrayRawI6VectorE6resizeEi(ptr noundef nonnull align 8 dereferenceable(36) %630, i32 noundef %37)
  %631 = load ptr, ptr %629, align 8, !tbaa !172
  %632 = load ptr, ptr %631, align 8, !tbaa !174
  tail call void @llvm.memset.p0.i64(ptr align 1 %632, i8 0, i64 %628, i1 false)
  %633 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 18
  %634 = load i32, ptr %633, align 4, !tbaa !48
  %635 = add nsw i32 %634, -1
  %636 = add nsw i32 %37, -1
  %637 = icmp sgt i32 %37, 1
  br i1 %637, label %638, label %2394

638:                                              ; preds = %620
  %639 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 16
  %640 = load i32, ptr %639, align 4, !tbaa !47
  %641 = getelementptr inbounds %class.Molecule, ptr %26, i64 0, i32 1
  %642 = getelementptr inbounds %class.Molecule, ptr %26, i64 0, i32 4
  %643 = getelementptr inbounds %class.Molecule, ptr %26, i64 0, i32 2
  %644 = getelementptr inbounds %class.Molecule, ptr %26, i64 0, i32 3
  %645 = ptrtoint ptr %422 to i64
  %646 = add nsw i32 %39, 10
  %647 = getelementptr inbounds %class.Pairlists, ptr %8, i64 0, i32 2
  %648 = ptrtoint ptr %468 to i64
  %649 = ptrtoint ptr %330 to i64
  %650 = ptrtoint ptr %376 to i64
  %651 = getelementptr inbounds %class.LJTable, ptr %25, i64 0, i32 1
  %652 = getelementptr inbounds %class.LJTable, ptr %25, i64 0, i32 2
  %653 = fneg double %29
  %654 = fsub double 1.000000e+00, %31
  %655 = fmul double %31, 2.000000e+00
  %656 = fmul double %31, 4.000000e+00
  %657 = fmul double %31, 6.000000e+00
  %658 = sext i32 %621 to i64
  %659 = sext i32 %622 to i64
  %660 = insertelement <2 x double> poison, double %23, i64 0
  %661 = shufflevector <2 x double> %660, <2 x double> poison, <2 x i32> zeroinitializer
  br label %662

662:                                              ; preds = %638, %2378
  %663 = phi i32 [ 0, %638 ], [ %2390, %2378 ]
  %664 = phi double [ 0.000000e+00, %638 ], [ %2389, %2378 ]
  %665 = phi i32 [ 0, %638 ], [ %2392, %2378 ]
  %666 = phi ptr [ null, %638 ], [ %2387, %2378 ]
  %667 = phi ptr [ null, %638 ], [ %2386, %2378 ]
  %668 = phi ptr [ null, %638 ], [ %2385, %2378 ]
  %669 = phi i32 [ 0, %638 ], [ %2384, %2378 ]
  %670 = phi i32 [ 0, %638 ], [ %2383, %2378 ]
  %671 = phi i32 [ 0, %638 ], [ %2382, %2378 ]
  %672 = phi i32 [ 0, %638 ], [ %2381, %2378 ]
  %673 = phi i32 [ 0, %638 ], [ %2380, %2378 ]
  %674 = phi i32 [ %640, %638 ], [ %2379, %2378 ]
  %675 = phi <2 x double> [ zeroinitializer, %638 ], [ %2391, %2378 ]
  %676 = sext i32 %665 to i64
  %677 = getelementptr inbounds %struct.CompAtom, ptr %40, i64 %676
  %678 = getelementptr inbounds %struct.CompAtomExt, ptr %44, i64 %676
  %679 = getelementptr inbounds %struct.CompAtom, ptr %40, i64 %676, i32 4
  %680 = load i8, ptr %679, align 1
  %681 = lshr i8 %680, 3
  %682 = and i8 %681, 15
  %683 = zext i8 %682 to i32
  %684 = icmp eq i8 %682, 0
  br i1 %684, label %691, label %685

685:                                              ; preds = %662
  %686 = icmp eq i32 %674, 0
  br i1 %686, label %691, label %687

687:                                              ; preds = %685
  %688 = add nsw i32 %674, -1
  %689 = add nsw i32 %665, -1
  %690 = add i32 %689, %683
  br label %2378

691:                                              ; preds = %685, %662
  %692 = phi i32 [ %674, %662 ], [ %635, %685 ]
  %693 = load <2 x double>, ptr %677, align 8, !tbaa !19
  %694 = fadd <2 x double> %15, %693
  %695 = getelementptr inbounds %class.Vector, ptr %677, i64 0, i32 2
  %696 = load double, ptr %695, align 8, !tbaa !49
  %697 = fadd double %17, %696
  %698 = add nsw i32 %665, %683
  %699 = select i1 %684, i32 %669, i32 %698
  br i1 %145, label %1866, label %700

700:                                              ; preds = %691
  %701 = load i32, ptr %678, align 4
  %702 = shl i32 %701, 2
  %703 = ashr exact i32 %702, 2
  %704 = load ptr, ptr %641, align 8, !tbaa !51
  %705 = sext i32 %703 to i64
  %706 = getelementptr inbounds %class.ExclusionCheck, ptr %704, i64 %705
  %707 = load i32, ptr %706, align 8, !tbaa !53
  %708 = getelementptr inbounds %class.ExclusionCheck, ptr %704, i64 %705, i32 1
  %709 = load i32, ptr %708, align 4, !tbaa !55
  %710 = getelementptr inbounds %class.ExclusionCheck, ptr %704, i64 %705, i32 2
  %711 = load ptr, ptr %710, align 8, !tbaa !56
  %712 = icmp eq ptr %711, null
  br i1 %712, label %717, label %713

713:                                              ; preds = %700
  %714 = sext i32 %707 to i64
  %715 = sub nsw i64 0, %714
  %716 = getelementptr inbounds i8, ptr %711, i64 %715
  br label %943

717:                                              ; preds = %700
  %718 = icmp eq ptr %666, null
  br i1 %718, label %806, label %719

719:                                              ; preds = %717
  %720 = load i32, ptr %667, align 4, !tbaa !5
  %721 = icmp slt i32 %720, 1
  br i1 %721, label %769, label %722

722:                                              ; preds = %719
  %723 = add nuw i32 %720, 1
  %724 = zext i32 %723 to i64
  %725 = add nsw i64 %724, -1
  %726 = add nsw i64 %724, -2
  %727 = and i64 %725, 3
  %728 = icmp ult i64 %726, 3
  br i1 %728, label %756, label %729

729:                                              ; preds = %722
  %730 = and i64 %725, -4
  br label %731

731:                                              ; preds = %731, %729
  %732 = phi i64 [ 1, %729 ], [ %753, %731 ]
  %733 = phi i64 [ 0, %729 ], [ %754, %731 ]
  %734 = getelementptr inbounds i32, ptr %667, i64 %732
  %735 = load i32, ptr %734, align 4, !tbaa !5
  %736 = sext i32 %735 to i64
  %737 = getelementptr inbounds i8, ptr %666, i64 %736
  store i8 0, ptr %737, align 1, !tbaa !57
  %738 = add nuw nsw i64 %732, 1
  %739 = getelementptr inbounds i32, ptr %667, i64 %738
  %740 = load i32, ptr %739, align 4, !tbaa !5
  %741 = sext i32 %740 to i64
  %742 = getelementptr inbounds i8, ptr %666, i64 %741
  store i8 0, ptr %742, align 1, !tbaa !57
  %743 = add nuw nsw i64 %732, 2
  %744 = getelementptr inbounds i32, ptr %667, i64 %743
  %745 = load i32, ptr %744, align 4, !tbaa !5
  %746 = sext i32 %745 to i64
  %747 = getelementptr inbounds i8, ptr %666, i64 %746
  store i8 0, ptr %747, align 1, !tbaa !57
  %748 = add nuw nsw i64 %732, 3
  %749 = getelementptr inbounds i32, ptr %667, i64 %748
  %750 = load i32, ptr %749, align 4, !tbaa !5
  %751 = sext i32 %750 to i64
  %752 = getelementptr inbounds i8, ptr %666, i64 %751
  store i8 0, ptr %752, align 1, !tbaa !57
  %753 = add nuw nsw i64 %732, 4
  %754 = add i64 %733, 4
  %755 = icmp eq i64 %754, %730
  br i1 %755, label %756, label %731

756:                                              ; preds = %731, %722
  %757 = phi i64 [ 1, %722 ], [ %753, %731 ]
  %758 = icmp eq i64 %727, 0
  br i1 %758, label %769, label %759

759:                                              ; preds = %756, %759
  %760 = phi i64 [ %766, %759 ], [ %757, %756 ]
  %761 = phi i64 [ %767, %759 ], [ 0, %756 ]
  %762 = getelementptr inbounds i32, ptr %667, i64 %760
  %763 = load i32, ptr %762, align 4, !tbaa !5
  %764 = sext i32 %763 to i64
  %765 = getelementptr inbounds i8, ptr %666, i64 %764
  store i8 0, ptr %765, align 1, !tbaa !57
  %766 = add nuw nsw i64 %760, 1
  %767 = add i64 %761, 1
  %768 = icmp eq i64 %767, %727
  br i1 %768, label %769, label %759, !llvm.loop !222

769:                                              ; preds = %756, %759, %719
  %770 = load i32, ptr %668, align 4, !tbaa !5
  %771 = icmp slt i32 %770, 1
  br i1 %771, label %826, label %772

772:                                              ; preds = %769
  %773 = add nuw i32 %770, 1
  %774 = zext i32 %773 to i64
  %775 = add nsw i64 %774, -1
  %776 = add nsw i64 %774, -2
  %777 = and i64 %775, 3
  %778 = icmp ult i64 %776, 3
  br i1 %778, label %813, label %779

779:                                              ; preds = %772
  %780 = and i64 %775, -4
  br label %781

781:                                              ; preds = %781, %779
  %782 = phi i64 [ 1, %779 ], [ %803, %781 ]
  %783 = phi i64 [ 0, %779 ], [ %804, %781 ]
  %784 = getelementptr inbounds i32, ptr %668, i64 %782
  %785 = load i32, ptr %784, align 4, !tbaa !5
  %786 = sext i32 %785 to i64
  %787 = getelementptr inbounds i8, ptr %666, i64 %786
  store i8 0, ptr %787, align 1, !tbaa !57
  %788 = add nuw nsw i64 %782, 1
  %789 = getelementptr inbounds i32, ptr %668, i64 %788
  %790 = load i32, ptr %789, align 4, !tbaa !5
  %791 = sext i32 %790 to i64
  %792 = getelementptr inbounds i8, ptr %666, i64 %791
  store i8 0, ptr %792, align 1, !tbaa !57
  %793 = add nuw nsw i64 %782, 2
  %794 = getelementptr inbounds i32, ptr %668, i64 %793
  %795 = load i32, ptr %794, align 4, !tbaa !5
  %796 = sext i32 %795 to i64
  %797 = getelementptr inbounds i8, ptr %666, i64 %796
  store i8 0, ptr %797, align 1, !tbaa !57
  %798 = add nuw nsw i64 %782, 3
  %799 = getelementptr inbounds i32, ptr %668, i64 %798
  %800 = load i32, ptr %799, align 4, !tbaa !5
  %801 = sext i32 %800 to i64
  %802 = getelementptr inbounds i8, ptr %666, i64 %801
  store i8 0, ptr %802, align 1, !tbaa !57
  %803 = add nuw nsw i64 %782, 4
  %804 = add i64 %783, 4
  %805 = icmp eq i64 %804, %780
  br i1 %805, label %813, label %781

806:                                              ; preds = %717
  %807 = load i32, ptr %642, align 8, !tbaa !60
  %808 = tail call i32 @llvm.smax.i32(i32 %807, i32 -1)
  %809 = sext i32 %808 to i64
  %810 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %809) #9
  %811 = load i32, ptr %642, align 8, !tbaa !60
  %812 = sext i32 %811 to i64
  tail call void @llvm.memset.p0.i64(ptr nonnull align 1 %810, i8 0, i64 %812, i1 false)
  br label %826

813:                                              ; preds = %781, %772
  %814 = phi i64 [ 1, %772 ], [ %803, %781 ]
  %815 = icmp eq i64 %777, 0
  br i1 %815, label %826, label %816

816:                                              ; preds = %813, %816
  %817 = phi i64 [ %823, %816 ], [ %814, %813 ]
  %818 = phi i64 [ %824, %816 ], [ 0, %813 ]
  %819 = getelementptr inbounds i32, ptr %668, i64 %817
  %820 = load i32, ptr %819, align 4, !tbaa !5
  %821 = sext i32 %820 to i64
  %822 = getelementptr inbounds i8, ptr %666, i64 %821
  store i8 0, ptr %822, align 1, !tbaa !57
  %823 = add nuw nsw i64 %817, 1
  %824 = add i64 %818, 1
  %825 = icmp eq i64 %824, %777
  br i1 %825, label %826, label %816, !llvm.loop !223

826:                                              ; preds = %813, %816, %769, %806
  %827 = phi ptr [ %810, %806 ], [ %666, %769 ], [ %666, %816 ], [ %666, %813 ]
  %828 = load i32, ptr %678, align 4
  %829 = shl i32 %828, 2
  %830 = ashr exact i32 %829, 2
  %831 = load ptr, ptr %643, align 8, !tbaa !62
  %832 = sext i32 %830 to i64
  %833 = getelementptr inbounds ptr, ptr %831, i64 %832
  %834 = load ptr, ptr %833, align 8, !tbaa !23
  %835 = load i32, ptr %834, align 4, !tbaa !5
  %836 = icmp slt i32 %835, 1
  br i1 %836, label %889, label %837

837:                                              ; preds = %826
  %838 = add nuw i32 %835, 1
  %839 = zext i32 %838 to i64
  %840 = add nsw i64 %839, -1
  %841 = add nsw i64 %839, -2
  %842 = and i64 %840, 3
  %843 = icmp ult i64 %841, 3
  br i1 %843, label %871, label %844

844:                                              ; preds = %837
  %845 = and i64 %840, -4
  br label %846

846:                                              ; preds = %846, %844
  %847 = phi i64 [ 1, %844 ], [ %868, %846 ]
  %848 = phi i64 [ 0, %844 ], [ %869, %846 ]
  %849 = getelementptr inbounds i32, ptr %834, i64 %847
  %850 = load i32, ptr %849, align 4, !tbaa !5
  %851 = sext i32 %850 to i64
  %852 = getelementptr inbounds i8, ptr %827, i64 %851
  store i8 1, ptr %852, align 1, !tbaa !57
  %853 = add nuw nsw i64 %847, 1
  %854 = getelementptr inbounds i32, ptr %834, i64 %853
  %855 = load i32, ptr %854, align 4, !tbaa !5
  %856 = sext i32 %855 to i64
  %857 = getelementptr inbounds i8, ptr %827, i64 %856
  store i8 1, ptr %857, align 1, !tbaa !57
  %858 = add nuw nsw i64 %847, 2
  %859 = getelementptr inbounds i32, ptr %834, i64 %858
  %860 = load i32, ptr %859, align 4, !tbaa !5
  %861 = sext i32 %860 to i64
  %862 = getelementptr inbounds i8, ptr %827, i64 %861
  store i8 1, ptr %862, align 1, !tbaa !57
  %863 = add nuw nsw i64 %847, 3
  %864 = getelementptr inbounds i32, ptr %834, i64 %863
  %865 = load i32, ptr %864, align 4, !tbaa !5
  %866 = sext i32 %865 to i64
  %867 = getelementptr inbounds i8, ptr %827, i64 %866
  store i8 1, ptr %867, align 1, !tbaa !57
  %868 = add nuw nsw i64 %847, 4
  %869 = add i64 %848, 4
  %870 = icmp eq i64 %869, %845
  br i1 %870, label %871, label %846

871:                                              ; preds = %846, %837
  %872 = phi i64 [ 1, %837 ], [ %868, %846 ]
  %873 = icmp eq i64 %842, 0
  br i1 %873, label %884, label %874

874:                                              ; preds = %871, %874
  %875 = phi i64 [ %881, %874 ], [ %872, %871 ]
  %876 = phi i64 [ %882, %874 ], [ 0, %871 ]
  %877 = getelementptr inbounds i32, ptr %834, i64 %875
  %878 = load i32, ptr %877, align 4, !tbaa !5
  %879 = sext i32 %878 to i64
  %880 = getelementptr inbounds i8, ptr %827, i64 %879
  store i8 1, ptr %880, align 1, !tbaa !57
  %881 = add nuw nsw i64 %875, 1
  %882 = add i64 %876, 1
  %883 = icmp eq i64 %882, %842
  br i1 %883, label %884, label %874, !llvm.loop !224

884:                                              ; preds = %874, %871
  %885 = load i32, ptr %678, align 4
  %886 = shl i32 %885, 2
  %887 = ashr exact i32 %886, 2
  %888 = sext i32 %887 to i64
  br label %889

889:                                              ; preds = %884, %826
  %890 = phi i64 [ %888, %884 ], [ %832, %826 ]
  %891 = load ptr, ptr %644, align 8, !tbaa !64
  %892 = getelementptr inbounds ptr, ptr %891, i64 %890
  %893 = load ptr, ptr %892, align 8, !tbaa !23
  %894 = load i32, ptr %893, align 4, !tbaa !5
  %895 = icmp slt i32 %894, 1
  br i1 %895, label %943, label %896

896:                                              ; preds = %889
  %897 = add nuw i32 %894, 1
  %898 = zext i32 %897 to i64
  %899 = add nsw i64 %898, -1
  %900 = add nsw i64 %898, -2
  %901 = and i64 %899, 3
  %902 = icmp ult i64 %900, 3
  br i1 %902, label %930, label %903

903:                                              ; preds = %896
  %904 = and i64 %899, -4
  br label %905

905:                                              ; preds = %905, %903
  %906 = phi i64 [ 1, %903 ], [ %927, %905 ]
  %907 = phi i64 [ 0, %903 ], [ %928, %905 ]
  %908 = getelementptr inbounds i32, ptr %893, i64 %906
  %909 = load i32, ptr %908, align 4, !tbaa !5
  %910 = sext i32 %909 to i64
  %911 = getelementptr inbounds i8, ptr %827, i64 %910
  store i8 2, ptr %911, align 1, !tbaa !57
  %912 = add nuw nsw i64 %906, 1
  %913 = getelementptr inbounds i32, ptr %893, i64 %912
  %914 = load i32, ptr %913, align 4, !tbaa !5
  %915 = sext i32 %914 to i64
  %916 = getelementptr inbounds i8, ptr %827, i64 %915
  store i8 2, ptr %916, align 1, !tbaa !57
  %917 = add nuw nsw i64 %906, 2
  %918 = getelementptr inbounds i32, ptr %893, i64 %917
  %919 = load i32, ptr %918, align 4, !tbaa !5
  %920 = sext i32 %919 to i64
  %921 = getelementptr inbounds i8, ptr %827, i64 %920
  store i8 2, ptr %921, align 1, !tbaa !57
  %922 = add nuw nsw i64 %906, 3
  %923 = getelementptr inbounds i32, ptr %893, i64 %922
  %924 = load i32, ptr %923, align 4, !tbaa !5
  %925 = sext i32 %924 to i64
  %926 = getelementptr inbounds i8, ptr %827, i64 %925
  store i8 2, ptr %926, align 1, !tbaa !57
  %927 = add nuw nsw i64 %906, 4
  %928 = add i64 %907, 4
  %929 = icmp eq i64 %928, %904
  br i1 %929, label %930, label %905

930:                                              ; preds = %905, %896
  %931 = phi i64 [ 1, %896 ], [ %927, %905 ]
  %932 = icmp eq i64 %901, 0
  br i1 %932, label %943, label %933

933:                                              ; preds = %930, %933
  %934 = phi i64 [ %940, %933 ], [ %931, %930 ]
  %935 = phi i64 [ %941, %933 ], [ 0, %930 ]
  %936 = getelementptr inbounds i32, ptr %893, i64 %934
  %937 = load i32, ptr %936, align 4, !tbaa !5
  %938 = sext i32 %937 to i64
  %939 = getelementptr inbounds i8, ptr %827, i64 %938
  store i8 2, ptr %939, align 1, !tbaa !57
  %940 = add nuw nsw i64 %934, 1
  %941 = add i64 %935, 1
  %942 = icmp eq i64 %941, %901
  br i1 %942, label %943, label %933, !llvm.loop !225

943:                                              ; preds = %930, %933, %889, %713
  %944 = phi ptr [ %716, %713 ], [ %827, %889 ], [ %827, %933 ], [ %827, %930 ]
  %945 = phi ptr [ %668, %713 ], [ %893, %889 ], [ %893, %933 ], [ %893, %930 ]
  %946 = phi ptr [ %667, %713 ], [ %834, %889 ], [ %834, %933 ], [ %834, %930 ]
  %947 = phi ptr [ %666, %713 ], [ %827, %889 ], [ %827, %933 ], [ %827, %930 ]
  %948 = load i8, ptr %679, align 1
  %949 = and i8 %948, 7
  %950 = icmp eq i8 %949, 0
  br i1 %950, label %1244, label %951

951:                                              ; preds = %943
  %952 = load i32, ptr @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4, !tbaa !5
  %953 = icmp eq i32 %952, 0
  br i1 %953, label %957, label %954

954:                                              ; preds = %951
  %955 = load i32, ptr %678, align 4
  %956 = icmp slt i32 %955, 0
  br label %957

957:                                              ; preds = %954, %951
  %958 = phi i1 [ false, %951 ], [ %956, %954 ]
  %959 = and i8 %948, 120
  %960 = icmp eq i8 %959, 0
  br i1 %960, label %992, label %961

961:                                              ; preds = %957
  %962 = icmp slt i32 %670, %621
  br i1 %962, label %963, label %976

963:                                              ; preds = %961
  %964 = sext i32 %670 to i64
  br label %965

965:                                              ; preds = %963, %971
  %966 = phi i64 [ %964, %963 ], [ %972, %971 ]
  %967 = getelementptr inbounds i16, ptr %192, i64 %966
  %968 = load i16, ptr %967, align 2, !tbaa !44
  %969 = zext i16 %968 to i32
  %970 = icmp sgt i32 %699, %969
  br i1 %970, label %971, label %974

971:                                              ; preds = %965
  %972 = add nsw i64 %966, 1
  %973 = icmp eq i64 %972, %658
  br i1 %973, label %976, label %965

974:                                              ; preds = %965
  %975 = trunc i64 %966 to i32
  br label %976

976:                                              ; preds = %971, %974, %961
  %977 = phi i32 [ %670, %961 ], [ %975, %974 ], [ %621, %971 ]
  %978 = icmp slt i32 %671, %622
  br i1 %978, label %979, label %992

979:                                              ; preds = %976
  %980 = sext i32 %671 to i64
  br label %981

981:                                              ; preds = %979, %987
  %982 = phi i64 [ %980, %979 ], [ %988, %987 ]
  %983 = getelementptr inbounds i16, ptr %238, i64 %982
  %984 = load i16, ptr %983, align 2, !tbaa !44
  %985 = zext i16 %984 to i32
  %986 = icmp sgt i32 %699, %985
  br i1 %986, label %987, label %990

987:                                              ; preds = %981
  %988 = add nsw i64 %982, 1
  %989 = icmp eq i64 %988, %659
  br i1 %989, label %992, label %981

990:                                              ; preds = %981
  %991 = trunc i64 %982 to i32
  br label %992

992:                                              ; preds = %987, %990, %976, %957
  %993 = phi i32 [ %671, %957 ], [ %671, %976 ], [ %991, %990 ], [ %622, %987 ]
  %994 = phi i32 [ %670, %957 ], [ %977, %976 ], [ %977, %990 ], [ %977, %987 ]
  %995 = add nsw i32 %665, 1
  %996 = icmp slt i32 %995, %699
  br i1 %996, label %997, label %1062

997:                                              ; preds = %992
  %998 = xor i32 %665, -1
  %999 = add i32 %699, %998
  %1000 = zext i32 %999 to i64
  %1001 = icmp ult i32 %999, 8
  br i1 %1001, label %1051, label %1002

1002:                                             ; preds = %997
  %1003 = icmp ult i32 %999, 64
  br i1 %1003, label %1032, label %1004

1004:                                             ; preds = %1002
  %1005 = and i64 %1000, 4294967232
  %1006 = trunc i32 %995 to i16
  %1007 = insertelement <16 x i16> poison, i16 %1006, i64 0
  %1008 = shufflevector <16 x i16> %1007, <16 x i16> poison, <16 x i32> zeroinitializer
  %1009 = add <16 x i16> %1008, <i16 0, i16 1, i16 2, i16 3, i16 4, i16 5, i16 6, i16 7, i16 8, i16 9, i16 10, i16 11, i16 12, i16 13, i16 14, i16 15>
  %1010 = trunc i64 %1005 to i32
  %1011 = add i32 %995, %1010
  br label %1012

1012:                                             ; preds = %1012, %1004
  %1013 = phi i64 [ 0, %1004 ], [ %1022, %1012 ]
  %1014 = phi <16 x i16> [ %1009, %1004 ], [ %1023, %1012 ]
  %1015 = add <16 x i16> %1014, <i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16>
  %1016 = add <16 x i16> %1014, <i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32>
  %1017 = add <16 x i16> %1014, <i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48>
  %1018 = getelementptr inbounds i16, ptr %422, i64 %1013
  store <16 x i16> %1014, ptr %1018, align 2, !tbaa !44
  %1019 = getelementptr inbounds i16, ptr %1018, i64 16
  store <16 x i16> %1015, ptr %1019, align 2, !tbaa !44
  %1020 = getelementptr inbounds i16, ptr %1018, i64 32
  store <16 x i16> %1016, ptr %1020, align 2, !tbaa !44
  %1021 = getelementptr inbounds i16, ptr %1018, i64 48
  store <16 x i16> %1017, ptr %1021, align 2, !tbaa !44
  %1022 = add nuw i64 %1013, 64
  %1023 = add <16 x i16> %1014, <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>
  %1024 = icmp eq i64 %1022, %1005
  br i1 %1024, label %1025, label %1012, !llvm.loop !226

1025:                                             ; preds = %1012
  %1026 = icmp eq i64 %1005, %1000
  br i1 %1026, label %1062, label %1027

1027:                                             ; preds = %1025
  %1028 = trunc i64 %1005 to i32
  %1029 = add i32 %995, %1028
  %1030 = and i64 %1000, 56
  %1031 = icmp eq i64 %1030, 0
  br i1 %1031, label %1051, label %1032

1032:                                             ; preds = %1002, %1027
  %1033 = phi i32 [ %1011, %1027 ], [ %995, %1002 ]
  %1034 = phi i64 [ %1005, %1027 ], [ 0, %1002 ]
  %1035 = and i64 %1000, 4294967288
  %1036 = trunc i64 %1035 to i32
  %1037 = add i32 %995, %1036
  %1038 = trunc i32 %1033 to i16
  %1039 = insertelement <8 x i16> poison, i16 %1038, i64 0
  %1040 = shufflevector <8 x i16> %1039, <8 x i16> poison, <8 x i32> zeroinitializer
  %1041 = add <8 x i16> %1040, <i16 0, i16 1, i16 2, i16 3, i16 4, i16 5, i16 6, i16 7>
  br label %1042

1042:                                             ; preds = %1042, %1032
  %1043 = phi i64 [ %1034, %1032 ], [ %1046, %1042 ]
  %1044 = phi <8 x i16> [ %1041, %1032 ], [ %1047, %1042 ]
  %1045 = getelementptr inbounds i16, ptr %422, i64 %1043
  store <8 x i16> %1044, ptr %1045, align 2, !tbaa !44
  %1046 = add nuw i64 %1043, 8
  %1047 = add <8 x i16> %1044, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %1048 = icmp eq i64 %1046, %1035
  br i1 %1048, label %1049, label %1042, !llvm.loop !227

1049:                                             ; preds = %1042
  %1050 = icmp eq i64 %1035, %1000
  br i1 %1050, label %1062, label %1051

1051:                                             ; preds = %997, %1027, %1049
  %1052 = phi i64 [ 0, %997 ], [ %1005, %1027 ], [ %1035, %1049 ]
  %1053 = phi i32 [ %995, %997 ], [ %1029, %1027 ], [ %1037, %1049 ]
  br label %1054

1054:                                             ; preds = %1051, %1054
  %1055 = phi i64 [ %1058, %1054 ], [ %1052, %1051 ]
  %1056 = phi i32 [ %1060, %1054 ], [ %1053, %1051 ]
  %1057 = trunc i32 %1056 to i16
  %1058 = add nuw nsw i64 %1055, 1
  %1059 = getelementptr inbounds i16, ptr %422, i64 %1055
  store i16 %1057, ptr %1059, align 2, !tbaa !44
  %1060 = add nsw i32 %1056, 1
  %1061 = icmp eq i64 %1058, %1000
  br i1 %1061, label %1062, label %1054, !llvm.loop !228

1062:                                             ; preds = %1054, %1025, %1049, %992
  %1063 = phi i32 [ 0, %992 ], [ %999, %1049 ], [ %999, %1025 ], [ %999, %1054 ]
  %1064 = zext i32 %1063 to i64
  %1065 = getelementptr inbounds i16, ptr %422, i64 %1064
  %1066 = select i1 %958, ptr %238, ptr %192
  %1067 = select i1 %958, i32 %993, i32 %994
  %1068 = select i1 %958, i32 %622, i32 %621
  %1069 = icmp slt i32 %1067, %1068
  br i1 %1069, label %1070, label %1229

1070:                                             ; preds = %1062
  %1071 = sub nsw i32 %1068, %1067
  %1072 = icmp sgt i32 %1071, 6
  br i1 %1072, label %1073, label %1166

1073:                                             ; preds = %1070
  %1074 = add nsw i32 %1068, -2
  %1075 = add nsw i32 %1067, 2
  %1076 = icmp slt i32 %1075, %1074
  br i1 %1076, label %1077, label %1166

1077:                                             ; preds = %1073
  %1078 = add nsw i32 %1067, 1
  %1079 = sext i32 %1078 to i64
  %1080 = getelementptr inbounds i16, ptr %1066, i64 %1079
  %1081 = load i16, ptr %1080, align 2, !tbaa !44
  %1082 = zext i16 %1081 to i64
  %1083 = getelementptr inbounds %struct.CompAtom, ptr %42, i64 %1082
  %1084 = getelementptr inbounds %class.Vector, ptr %1083, i64 0, i32 2
  %1085 = load double, ptr %1084, align 8, !tbaa !49
  %1086 = sext i32 %1067 to i64
  %1087 = getelementptr inbounds i16, ptr %1066, i64 %1086
  %1088 = load i16, ptr %1087, align 2, !tbaa !44
  %1089 = zext i16 %1088 to i64
  %1090 = getelementptr inbounds %struct.CompAtom, ptr %42, i64 %1089
  %1091 = getelementptr inbounds %class.Vector, ptr %1090, i64 0, i32 2
  %1092 = load double, ptr %1091, align 8, !tbaa !49
  %1093 = getelementptr inbounds %class.Vector, ptr %1083, i64 0, i32 1
  %1094 = load double, ptr %1093, align 8, !tbaa !66
  %1095 = getelementptr inbounds %class.Vector, ptr %1090, i64 0, i32 1
  %1096 = load double, ptr %1095, align 8, !tbaa !66
  %1097 = load double, ptr %1083, align 8, !tbaa !67
  %1098 = load double, ptr %1090, align 8, !tbaa !67
  %1099 = sext i32 %1075 to i64
  %1100 = sext i32 %1074 to i64
  %1101 = insertelement <2 x double> poison, double %1085, i64 0
  %1102 = insertelement <2 x double> %1101, double %1092, i64 1
  %1103 = insertelement <2 x double> poison, double %1094, i64 0
  %1104 = insertelement <2 x double> %1103, double %1096, i64 1
  %1105 = insertelement <2 x double> poison, double %1097, i64 0
  %1106 = insertelement <2 x double> %1105, double %1098, i64 1
  %1107 = insertelement <2 x double> poison, double %697, i64 0
  %1108 = shufflevector <2 x double> %1107, <2 x double> poison, <2 x i32> zeroinitializer
  %1109 = shufflevector <2 x double> %694, <2 x double> poison, <2 x i32> <i32 1, i32 1>
  %1110 = shufflevector <2 x double> %694, <2 x double> poison, <2 x i32> zeroinitializer
  br label %1111

1111:                                             ; preds = %1077, %1111
  %1112 = phi i64 [ %1099, %1077 ], [ %1157, %1111 ]
  %1113 = phi i32 [ %1067, %1077 ], [ %1159, %1111 ]
  %1114 = phi i32 [ 0, %1077 ], [ %1156, %1111 ]
  %1115 = phi i16 [ %1088, %1077 ], [ %1122, %1111 ]
  %1116 = phi i16 [ %1081, %1077 ], [ %1126, %1111 ]
  %1117 = phi <2 x double> [ %1102, %1077 ], [ %1161, %1111 ]
  %1118 = phi <2 x double> [ %1104, %1077 ], [ %1163, %1111 ]
  %1119 = phi <2 x double> [ %1106, %1077 ], [ %1165, %1111 ]
  %1120 = fsub <2 x double> %1108, %1117
  %1121 = getelementptr inbounds i16, ptr %1066, i64 %1112
  %1122 = load i16, ptr %1121, align 2, !tbaa !44
  %1123 = add nsw i32 %1113, 3
  %1124 = sext i32 %1123 to i64
  %1125 = getelementptr inbounds i16, ptr %1066, i64 %1124
  %1126 = load i16, ptr %1125, align 2, !tbaa !44
  %1127 = zext i16 %1122 to i64
  %1128 = getelementptr inbounds %struct.CompAtom, ptr %42, i64 %1127
  %1129 = load double, ptr %1128, align 8, !tbaa !67
  %1130 = zext i16 %1126 to i64
  %1131 = getelementptr inbounds %struct.CompAtom, ptr %42, i64 %1130
  %1132 = load double, ptr %1131, align 8, !tbaa !67
  %1133 = getelementptr inbounds %class.Vector, ptr %1128, i64 0, i32 1
  %1134 = load double, ptr %1133, align 8, !tbaa !66
  %1135 = getelementptr inbounds %class.Vector, ptr %1131, i64 0, i32 1
  %1136 = load double, ptr %1135, align 8, !tbaa !66
  %1137 = getelementptr inbounds %class.Vector, ptr %1128, i64 0, i32 2
  %1138 = load double, ptr %1137, align 8, !tbaa !49
  %1139 = getelementptr inbounds %class.Vector, ptr %1131, i64 0, i32 2
  %1140 = load double, ptr %1139, align 8, !tbaa !49
  %1141 = fsub <2 x double> %1110, %1119
  %1142 = fmul <2 x double> %1141, %1141
  %1143 = fsub <2 x double> %1109, %1118
  %1144 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %1143, <2 x double> %1143, <2 x double> %1142)
  %1145 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %1120, <2 x double> %1120, <2 x double> %1144)
  %1146 = fcmp olt <2 x double> %1145, %661
  %1147 = zext i32 %1114 to i64
  %1148 = getelementptr inbounds i16, ptr %284, i64 %1147
  store i16 %1115, ptr %1148, align 2, !tbaa !44
  %1149 = extractelement <2 x i1> %1146, i64 1
  %1150 = zext i1 %1149 to i32
  %1151 = add nuw nsw i32 %1114, %1150
  %1152 = zext i32 %1151 to i64
  %1153 = getelementptr inbounds i16, ptr %284, i64 %1152
  store i16 %1116, ptr %1153, align 2, !tbaa !44
  %1154 = extractelement <2 x i1> %1146, i64 0
  %1155 = zext i1 %1154 to i32
  %1156 = add i32 %1151, %1155
  %1157 = add nsw i64 %1112, 2
  %1158 = icmp slt i64 %1157, %1100
  %1159 = trunc i64 %1112 to i32
  %1160 = insertelement <2 x double> poison, double %1140, i64 0
  %1161 = insertelement <2 x double> %1160, double %1138, i64 1
  %1162 = insertelement <2 x double> poison, double %1136, i64 0
  %1163 = insertelement <2 x double> %1162, double %1134, i64 1
  %1164 = insertelement <2 x double> poison, double %1132, i64 0
  %1165 = insertelement <2 x double> %1164, double %1129, i64 1
  br i1 %1158, label %1111, label %1166

1166:                                             ; preds = %1111, %1073, %1070
  %1167 = phi i32 [ 0, %1070 ], [ 0, %1073 ], [ %1156, %1111 ]
  %1168 = phi i32 [ %1067, %1070 ], [ %1067, %1073 ], [ %1159, %1111 ]
  %1169 = icmp slt i32 %1168, %1068
  br i1 %1169, label %1170, label %1175

1170:                                             ; preds = %1166
  %1171 = sext i32 %1168 to i64
  %1172 = sext i32 %1068 to i64
  %1173 = extractelement <2 x double> %694, i64 0
  %1174 = extractelement <2 x double> %694, i64 1
  br label %1180

1175:                                             ; preds = %1203, %1166
  %1176 = phi i32 [ %1167, %1166 ], [ %1204, %1203 ]
  %1177 = icmp sgt i32 %1176, 0
  br i1 %1177, label %1178, label %1229

1178:                                             ; preds = %1175
  %1179 = zext i32 %1176 to i64
  br label %1207

1180:                                             ; preds = %1170, %1203
  %1181 = phi i64 [ %1171, %1170 ], [ %1205, %1203 ]
  %1182 = phi i32 [ %1167, %1170 ], [ %1204, %1203 ]
  %1183 = getelementptr inbounds i16, ptr %1066, i64 %1181
  %1184 = load i16, ptr %1183, align 2, !tbaa !44
  %1185 = zext i16 %1184 to i64
  %1186 = getelementptr inbounds %struct.CompAtom, ptr %42, i64 %1185
  %1187 = load double, ptr %1186, align 8, !tbaa !67
  %1188 = getelementptr inbounds %class.Vector, ptr %1186, i64 0, i32 1
  %1189 = load double, ptr %1188, align 8, !tbaa !66
  %1190 = getelementptr inbounds %class.Vector, ptr %1186, i64 0, i32 2
  %1191 = load double, ptr %1190, align 8, !tbaa !49
  %1192 = fsub double %1173, %1187
  %1193 = fmul double %1192, %1192
  %1194 = fsub double %1174, %1189
  %1195 = tail call double @llvm.fmuladd.f64(double %1194, double %1194, double %1193)
  %1196 = fsub double %697, %1191
  %1197 = tail call double @llvm.fmuladd.f64(double %1196, double %1196, double %1195)
  %1198 = fcmp ugt double %1197, %23
  br i1 %1198, label %1203, label %1199

1199:                                             ; preds = %1180
  %1200 = add nsw i32 %1182, 1
  %1201 = sext i32 %1182 to i64
  %1202 = getelementptr inbounds i16, ptr %284, i64 %1201
  store i16 %1184, ptr %1202, align 2, !tbaa !44
  br label %1203

1203:                                             ; preds = %1199, %1180
  %1204 = phi i32 [ %1200, %1199 ], [ %1182, %1180 ]
  %1205 = add nsw i64 %1181, 1
  %1206 = icmp eq i64 %1205, %1172
  br i1 %1206, label %1175, label %1180

1207:                                             ; preds = %1178, %1224
  %1208 = phi i64 [ 0, %1178 ], [ %1227, %1224 ]
  %1209 = phi ptr [ %1065, %1178 ], [ %1226, %1224 ]
  %1210 = getelementptr inbounds i16, ptr %284, i64 %1208
  %1211 = load i16, ptr %1210, align 2, !tbaa !44
  %1212 = zext i16 %1211 to i64
  %1213 = getelementptr inbounds %struct.CompAtom, ptr %42, i64 %1212, i32 4
  %1214 = load i8, ptr %1213, align 1
  %1215 = and i8 %1214, 7
  store i16 %1211, ptr %1209, align 2, !tbaa !44
  %1216 = getelementptr inbounds i16, ptr %1209, i64 1
  %1217 = insertelement <2 x i16> poison, i16 %1211, i64 0
  %1218 = shufflevector <2 x i16> %1217, <2 x i16> poison, <2 x i32> zeroinitializer
  %1219 = add <2 x i16> %1218, <i16 1, i16 2>
  store <2 x i16> %1219, ptr %1216, align 2, !tbaa !44
  %1220 = icmp ult i8 %1215, 4
  br i1 %1220, label %1224, label %1221

1221:                                             ; preds = %1207
  %1222 = add <2 x i16> %1218, <i16 3, i16 4>
  %1223 = getelementptr inbounds i16, ptr %1209, i64 3
  store <2 x i16> %1222, ptr %1223, align 2, !tbaa !44
  br label %1224

1224:                                             ; preds = %1221, %1207
  %1225 = zext i8 %1215 to i64
  %1226 = getelementptr inbounds i16, ptr %1209, i64 %1225
  %1227 = add nuw nsw i64 %1208, 1
  %1228 = icmp eq i64 %1227, %1179
  br i1 %1228, label %1229, label %1207

1229:                                             ; preds = %1224, %1175, %1062
  %1230 = phi ptr [ %1065, %1062 ], [ %1065, %1175 ], [ %1226, %1224 ]
  %1231 = ptrtoint ptr %1230 to i64
  %1232 = sub i64 %1231, %645
  %1233 = lshr exact i64 %1232, 1
  %1234 = trunc i64 %1233 to i32
  %1235 = icmp eq i32 %1234, 0
  br i1 %1235, label %1247, label %1236

1236:                                             ; preds = %1229
  %1237 = shl i64 %1232, 31
  %1238 = add i64 %1237, -4294967296
  %1239 = ashr i64 %1238, 32
  %1240 = getelementptr inbounds i16, ptr %422, i64 %1239
  %1241 = load i16, ptr %1240, align 2, !tbaa !44
  %1242 = ashr i64 %1237, 32
  %1243 = getelementptr inbounds i16, ptr %422, i64 %1242
  store i16 %1241, ptr %1243, align 2, !tbaa !44
  br label %1247

1244:                                             ; preds = %943
  %1245 = add nsw i32 %673, 1
  %1246 = load i32, ptr @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4, !tbaa !5
  br label %1247

1247:                                             ; preds = %1229, %1236, %1244
  %1248 = phi i32 [ %1246, %1244 ], [ %952, %1236 ], [ %952, %1229 ]
  %1249 = phi i32 [ %1245, %1244 ], [ 0, %1236 ], [ 0, %1229 ]
  %1250 = phi i32 [ %672, %1244 ], [ %1234, %1236 ], [ 0, %1229 ]
  %1251 = phi i32 [ %671, %1244 ], [ %993, %1236 ], [ %993, %1229 ]
  %1252 = phi i32 [ %670, %1244 ], [ %994, %1236 ], [ %994, %1229 ]
  %1253 = icmp eq i32 %1248, 0
  br i1 %1253, label %1258, label %1254

1254:                                             ; preds = %1247
  %1255 = load i32, ptr %678, align 4
  %1256 = and i32 %1255, 1073741824
  %1257 = icmp ne i32 %1256, 0
  br label %1258

1258:                                             ; preds = %1254, %1247
  %1259 = phi i1 [ false, %1247 ], [ %1257, %1254 ]
  %1260 = load i32, ptr %13, align 8, !tbaa !17
  %1261 = add nsw i32 %646, %1260
  %1262 = load i32, ptr %647, align 4, !tbaa !68
  %1263 = icmp sgt i32 %1262, %1261
  br i1 %1263, label %1279, label %1264

1264:                                             ; preds = %1258, %1264
  %1265 = phi i32 [ %1267, %1264 ], [ %1262, %1258 ]
  %1266 = ashr i32 %1265, 1
  %1267 = add nsw i32 %1266, %1265
  %1268 = icmp sgt i32 %1267, %1261
  br i1 %1268, label %1269, label %1264

1269:                                             ; preds = %1264
  %1270 = sext i32 %1267 to i64
  %1271 = icmp slt i32 %1267, 0
  %1272 = shl nsw i64 %1270, 1
  %1273 = select i1 %1271, i64 -1, i64 %1272
  %1274 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %1273) #9
  %1275 = load ptr, ptr %8, align 8, !tbaa !46
  %1276 = sext i32 %1260 to i64
  %1277 = shl nsw i64 %1276, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 2 %1274, ptr align 2 %1275, i64 %1277, i1 false)
  %1278 = icmp eq ptr %1275, null
  br i1 %1278, label %1283, label %1281

1279:                                             ; preds = %1258
  %1280 = load ptr, ptr %8, align 8, !tbaa !46
  br label %1285

1281:                                             ; preds = %1269
  tail call void @_ZdaPv(ptr noundef nonnull %1275) #10
  %1282 = load i32, ptr %13, align 8, !tbaa !17
  br label %1283

1283:                                             ; preds = %1281, %1269
  %1284 = phi i32 [ %1282, %1281 ], [ %1260, %1269 ]
  store ptr %1274, ptr %8, align 8, !tbaa !46
  store i32 %1267, ptr %647, align 4, !tbaa !68
  br label %1285

1285:                                             ; preds = %1279, %1283
  %1286 = phi i32 [ %1260, %1279 ], [ %1284, %1283 ]
  %1287 = phi ptr [ %1280, %1279 ], [ %1274, %1283 ]
  %1288 = ptrtoint ptr %1287 to i64
  %1289 = add nsw i32 %1286, 1
  %1290 = sext i32 %1289 to i64
  %1291 = getelementptr inbounds i16, ptr %1287, i64 %1290
  %1292 = icmp slt i32 %1249, %1250
  br i1 %1259, label %1293, label %1341

1293:                                             ; preds = %1285
  br i1 %1292, label %1294, label %1512

1294:                                             ; preds = %1293
  %1295 = sext i32 %1249 to i64
  %1296 = sext i32 %1250 to i64
  %1297 = extractelement <2 x double> %694, i64 0
  %1298 = extractelement <2 x double> %694, i64 1
  br label %1299

1299:                                             ; preds = %1294, %1336
  %1300 = phi i64 [ %1295, %1294 ], [ %1339, %1336 ]
  %1301 = phi ptr [ %468, %1294 ], [ %1338, %1336 ]
  %1302 = phi ptr [ %1291, %1294 ], [ %1337, %1336 ]
  %1303 = getelementptr inbounds i16, ptr %422, i64 %1300
  %1304 = load i16, ptr %1303, align 2, !tbaa !44
  %1305 = zext i16 %1304 to i64
  %1306 = getelementptr inbounds %struct.CompAtomExt, ptr %46, i64 %1305
  %1307 = load i32, ptr %1306, align 4
  %1308 = and i32 %1307, 1073741824
  %1309 = icmp eq i32 %1308, 0
  br i1 %1309, label %1310, label %1336

1310:                                             ; preds = %1299
  %1311 = getelementptr inbounds %struct.CompAtom, ptr %42, i64 %1305
  %1312 = getelementptr inbounds %class.Vector, ptr %1311, i64 0, i32 2
  %1313 = load double, ptr %1312, align 8, !tbaa !49
  %1314 = fsub double %697, %1313
  %1315 = getelementptr inbounds %class.Vector, ptr %1311, i64 0, i32 1
  %1316 = load double, ptr %1315, align 8, !tbaa !66
  %1317 = fsub double %1298, %1316
  %1318 = load double, ptr %1311, align 8, !tbaa !67
  %1319 = fsub double %1297, %1318
  %1320 = fmul double %1319, %1319
  %1321 = tail call double @llvm.fmuladd.f64(double %1317, double %1317, double %1320)
  %1322 = tail call double @llvm.fmuladd.f64(double %1314, double %1314, double %1321)
  %1323 = fcmp ugt double %1322, %20
  br i1 %1323, label %1336, label %1324

1324:                                             ; preds = %1310
  %1325 = shl i32 %1307, 2
  %1326 = ashr exact i32 %1325, 2
  %1327 = icmp slt i32 %1326, %707
  %1328 = icmp sgt i32 %1326, %709
  %1329 = select i1 %1327, i1 true, i1 %1328
  %1330 = select i1 %1329, ptr %1302, ptr %1301
  %1331 = zext i1 %1329 to i64
  %1332 = getelementptr inbounds i16, ptr %1302, i64 %1331
  %1333 = xor i1 %1329, true
  %1334 = zext i1 %1333 to i64
  %1335 = getelementptr inbounds i16, ptr %1301, i64 %1334
  store i16 %1304, ptr %1330, align 2, !tbaa !44
  br label %1336

1336:                                             ; preds = %1324, %1310, %1299
  %1337 = phi ptr [ %1302, %1299 ], [ %1302, %1310 ], [ %1332, %1324 ]
  %1338 = phi ptr [ %1301, %1299 ], [ %1301, %1310 ], [ %1335, %1324 ]
  %1339 = add nsw i64 %1300, 1
  %1340 = icmp eq i64 %1339, %1296
  br i1 %1340, label %1512, label %1299

1341:                                             ; preds = %1285
  br i1 %1292, label %1342, label %1512

1342:                                             ; preds = %1341
  %1343 = sub nsw i32 %1250, %1249
  %1344 = icmp sgt i32 %1343, 6
  br i1 %1344, label %1345, label %1463

1345:                                             ; preds = %1342
  %1346 = add nsw i32 %1250, -2
  %1347 = add nsw i32 %1249, 2
  %1348 = icmp slt i32 %1347, %1346
  br i1 %1348, label %1349, label %1463

1349:                                             ; preds = %1345
  %1350 = sext i32 %1249 to i64
  %1351 = getelementptr inbounds i16, ptr %422, i64 %1350
  %1352 = load i16, ptr %1351, align 2, !tbaa !44
  %1353 = zext i16 %1352 to i64
  %1354 = getelementptr inbounds %struct.CompAtomExt, ptr %46, i64 %1353
  %1355 = load i32, ptr %1354, align 4
  %1356 = add nsw i32 %1249, 1
  %1357 = sext i32 %1356 to i64
  %1358 = getelementptr inbounds i16, ptr %422, i64 %1357
  %1359 = load i16, ptr %1358, align 2, !tbaa !44
  %1360 = zext i16 %1359 to i64
  %1361 = getelementptr inbounds %struct.CompAtom, ptr %42, i64 %1360
  %1362 = getelementptr inbounds %class.Vector, ptr %1361, i64 0, i32 2
  %1363 = load double, ptr %1362, align 8, !tbaa !49
  %1364 = getelementptr inbounds %struct.CompAtom, ptr %42, i64 %1353
  %1365 = getelementptr inbounds %class.Vector, ptr %1364, i64 0, i32 2
  %1366 = load double, ptr %1365, align 8, !tbaa !49
  %1367 = getelementptr inbounds %class.Vector, ptr %1361, i64 0, i32 1
  %1368 = load double, ptr %1367, align 8, !tbaa !66
  %1369 = getelementptr inbounds %class.Vector, ptr %1364, i64 0, i32 1
  %1370 = load double, ptr %1369, align 8, !tbaa !66
  %1371 = load double, ptr %1361, align 8, !tbaa !67
  %1372 = load double, ptr %1364, align 8, !tbaa !67
  %1373 = sext i32 %1347 to i64
  %1374 = sext i32 %1346 to i64
  %1375 = extractelement <2 x double> %694, i64 0
  %1376 = extractelement <2 x double> %694, i64 1
  br label %1377

1377:                                             ; preds = %1349, %1457
  %1378 = phi i64 [ %1373, %1349 ], [ %1460, %1457 ]
  %1379 = phi i64 [ %1360, %1349 ], [ %1417, %1457 ]
  %1380 = phi i32 [ %1355, %1349 ], [ %1445, %1457 ]
  %1381 = phi ptr [ %468, %1349 ], [ %1459, %1457 ]
  %1382 = phi ptr [ %1291, %1349 ], [ %1458, %1457 ]
  %1383 = phi i32 [ %1249, %1349 ], [ %1462, %1457 ]
  %1384 = phi i16 [ %1352, %1349 ], [ %1409, %1457 ]
  %1385 = phi i16 [ %1359, %1349 ], [ %1413, %1457 ]
  %1386 = phi double [ %1372, %1349 ], [ %1416, %1457 ]
  %1387 = phi double [ %1371, %1349 ], [ %1419, %1457 ]
  %1388 = phi double [ %1370, %1349 ], [ %1421, %1457 ]
  %1389 = phi double [ %1368, %1349 ], [ %1423, %1457 ]
  %1390 = phi double [ %1366, %1349 ], [ %1425, %1457 ]
  %1391 = phi double [ %1363, %1349 ], [ %1427, %1457 ]
  %1392 = getelementptr inbounds %struct.CompAtomExt, ptr %46, i64 %1379
  %1393 = load i32, ptr %1392, align 4
  %1394 = shl i32 %1393, 2
  %1395 = ashr exact i32 %1394, 2
  %1396 = fsub double %1375, %1386
  %1397 = fsub double %1375, %1387
  %1398 = fmul double %1396, %1396
  %1399 = fmul double %1397, %1397
  %1400 = fsub double %1376, %1388
  %1401 = fsub double %1376, %1389
  %1402 = tail call double @llvm.fmuladd.f64(double %1400, double %1400, double %1398)
  %1403 = tail call double @llvm.fmuladd.f64(double %1401, double %1401, double %1399)
  %1404 = fsub double %697, %1390
  %1405 = fsub double %697, %1391
  %1406 = tail call double @llvm.fmuladd.f64(double %1404, double %1404, double %1402)
  %1407 = tail call double @llvm.fmuladd.f64(double %1405, double %1405, double %1403)
  %1408 = getelementptr inbounds i16, ptr %422, i64 %1378
  %1409 = load i16, ptr %1408, align 2, !tbaa !44
  %1410 = add nsw i32 %1383, 3
  %1411 = sext i32 %1410 to i64
  %1412 = getelementptr inbounds i16, ptr %422, i64 %1411
  %1413 = load i16, ptr %1412, align 2, !tbaa !44
  %1414 = zext i16 %1409 to i64
  %1415 = getelementptr inbounds %struct.CompAtom, ptr %42, i64 %1414
  %1416 = load double, ptr %1415, align 8, !tbaa !67
  %1417 = zext i16 %1413 to i64
  %1418 = getelementptr inbounds %struct.CompAtom, ptr %42, i64 %1417
  %1419 = load double, ptr %1418, align 8, !tbaa !67
  %1420 = getelementptr inbounds %class.Vector, ptr %1415, i64 0, i32 1
  %1421 = load double, ptr %1420, align 8, !tbaa !66
  %1422 = getelementptr inbounds %class.Vector, ptr %1418, i64 0, i32 1
  %1423 = load double, ptr %1422, align 8, !tbaa !66
  %1424 = getelementptr inbounds %class.Vector, ptr %1415, i64 0, i32 2
  %1425 = load double, ptr %1424, align 8, !tbaa !49
  %1426 = getelementptr inbounds %class.Vector, ptr %1418, i64 0, i32 2
  %1427 = load double, ptr %1426, align 8, !tbaa !49
  %1428 = fcmp ugt double %1406, %20
  br i1 %1428, label %1441, label %1429

1429:                                             ; preds = %1377
  %1430 = shl i32 %1380, 2
  %1431 = ashr exact i32 %1430, 2
  %1432 = icmp slt i32 %1431, %707
  %1433 = icmp sgt i32 %1431, %709
  %1434 = select i1 %1432, i1 true, i1 %1433
  %1435 = select i1 %1434, ptr %1382, ptr %1381
  %1436 = zext i1 %1434 to i64
  %1437 = getelementptr inbounds i16, ptr %1382, i64 %1436
  %1438 = xor i1 %1434, true
  %1439 = zext i1 %1438 to i64
  %1440 = getelementptr inbounds i16, ptr %1381, i64 %1439
  store i16 %1384, ptr %1435, align 2, !tbaa !44
  br label %1441

1441:                                             ; preds = %1429, %1377
  %1442 = phi ptr [ %1382, %1377 ], [ %1437, %1429 ]
  %1443 = phi ptr [ %1381, %1377 ], [ %1440, %1429 ]
  %1444 = getelementptr inbounds %struct.CompAtomExt, ptr %46, i64 %1414
  %1445 = load i32, ptr %1444, align 4
  %1446 = fcmp ugt double %1407, %20
  br i1 %1446, label %1457, label %1447

1447:                                             ; preds = %1441
  %1448 = icmp slt i32 %1395, %707
  %1449 = icmp sgt i32 %1395, %709
  %1450 = select i1 %1448, i1 true, i1 %1449
  %1451 = select i1 %1450, ptr %1442, ptr %1443
  %1452 = zext i1 %1450 to i64
  %1453 = getelementptr inbounds i16, ptr %1442, i64 %1452
  %1454 = xor i1 %1450, true
  %1455 = zext i1 %1454 to i64
  %1456 = getelementptr inbounds i16, ptr %1443, i64 %1455
  store i16 %1385, ptr %1451, align 2, !tbaa !44
  br label %1457

1457:                                             ; preds = %1447, %1441
  %1458 = phi ptr [ %1442, %1441 ], [ %1453, %1447 ]
  %1459 = phi ptr [ %1443, %1441 ], [ %1456, %1447 ]
  %1460 = add nsw i64 %1378, 2
  %1461 = icmp slt i64 %1460, %1374
  %1462 = trunc i64 %1378 to i32
  br i1 %1461, label %1377, label %1463

1463:                                             ; preds = %1457, %1345, %1342
  %1464 = phi i32 [ %1249, %1342 ], [ %1249, %1345 ], [ %1462, %1457 ]
  %1465 = phi ptr [ %1291, %1342 ], [ %1291, %1345 ], [ %1458, %1457 ]
  %1466 = phi ptr [ %468, %1342 ], [ %468, %1345 ], [ %1459, %1457 ]
  %1467 = icmp slt i32 %1464, %1250
  br i1 %1467, label %1468, label %1512

1468:                                             ; preds = %1463
  %1469 = sext i32 %1464 to i64
  %1470 = sext i32 %1250 to i64
  %1471 = extractelement <2 x double> %694, i64 0
  %1472 = extractelement <2 x double> %694, i64 1
  br label %1473

1473:                                             ; preds = %1468, %1507
  %1474 = phi i64 [ %1469, %1468 ], [ %1510, %1507 ]
  %1475 = phi ptr [ %1466, %1468 ], [ %1509, %1507 ]
  %1476 = phi ptr [ %1465, %1468 ], [ %1508, %1507 ]
  %1477 = getelementptr inbounds i16, ptr %422, i64 %1474
  %1478 = load i16, ptr %1477, align 2, !tbaa !44
  %1479 = zext i16 %1478 to i64
  %1480 = getelementptr inbounds %struct.CompAtom, ptr %42, i64 %1479
  %1481 = load double, ptr %1480, align 8, !tbaa !67
  %1482 = getelementptr inbounds %class.Vector, ptr %1480, i64 0, i32 1
  %1483 = load double, ptr %1482, align 8, !tbaa !66
  %1484 = getelementptr inbounds %class.Vector, ptr %1480, i64 0, i32 2
  %1485 = load double, ptr %1484, align 8, !tbaa !49
  %1486 = fsub double %1471, %1481
  %1487 = fmul double %1486, %1486
  %1488 = fsub double %1472, %1483
  %1489 = tail call double @llvm.fmuladd.f64(double %1488, double %1488, double %1487)
  %1490 = fsub double %697, %1485
  %1491 = tail call double @llvm.fmuladd.f64(double %1490, double %1490, double %1489)
  %1492 = fcmp ugt double %1491, %20
  br i1 %1492, label %1507, label %1493

1493:                                             ; preds = %1473
  %1494 = getelementptr inbounds %struct.CompAtomExt, ptr %46, i64 %1479
  %1495 = load i32, ptr %1494, align 4
  %1496 = shl i32 %1495, 2
  %1497 = ashr exact i32 %1496, 2
  %1498 = icmp slt i32 %1497, %707
  %1499 = icmp sgt i32 %1497, %709
  %1500 = select i1 %1498, i1 true, i1 %1499
  %1501 = select i1 %1500, ptr %1476, ptr %1475
  %1502 = zext i1 %1500 to i64
  %1503 = getelementptr inbounds i16, ptr %1476, i64 %1502
  %1504 = xor i1 %1500, true
  %1505 = zext i1 %1504 to i64
  %1506 = getelementptr inbounds i16, ptr %1475, i64 %1505
  store i16 %1478, ptr %1501, align 2, !tbaa !44
  br label %1507

1507:                                             ; preds = %1493, %1473
  %1508 = phi ptr [ %1476, %1473 ], [ %1503, %1493 ]
  %1509 = phi ptr [ %1475, %1473 ], [ %1506, %1493 ]
  %1510 = add nsw i64 %1474, 1
  %1511 = icmp eq i64 %1510, %1470
  br i1 %1511, label %1512, label %1473

1512:                                             ; preds = %1507, %1336, %1463, %1293, %1341
  %1513 = phi ptr [ %1291, %1341 ], [ %1291, %1293 ], [ %1465, %1463 ], [ %1337, %1336 ], [ %1508, %1507 ]
  %1514 = phi ptr [ %468, %1341 ], [ %468, %1293 ], [ %1466, %1463 ], [ %1338, %1336 ], [ %1509, %1507 ]
  %1515 = ptrtoint ptr %1514 to i64
  %1516 = sub i64 %1515, %648
  %1517 = lshr exact i64 %1516, 1
  %1518 = trunc i64 %1517 to i32
  %1519 = icmp sgt i32 %1518, 0
  br i1 %1519, label %1520, label %1620

1520:                                             ; preds = %1512
  %1521 = and i64 %1517, 4294967295
  %1522 = and i64 %1517, 1
  %1523 = icmp eq i64 %1521, 1
  br i1 %1523, label %1588, label %1524

1524:                                             ; preds = %1520
  %1525 = sub nsw i64 %1521, %1522
  br label %1526

1526:                                             ; preds = %1581, %1524
  %1527 = phi i64 [ 0, %1524 ], [ %1585, %1581 ]
  %1528 = phi ptr [ %1513, %1524 ], [ %1584, %1581 ]
  %1529 = phi ptr [ %330, %1524 ], [ %1583, %1581 ]
  %1530 = phi ptr [ %376, %1524 ], [ %1582, %1581 ]
  %1531 = phi i64 [ 0, %1524 ], [ %1586, %1581 ]
  %1532 = getelementptr inbounds i16, ptr %468, i64 %1527
  %1533 = load i16, ptr %1532, align 2, !tbaa !44
  %1534 = zext i16 %1533 to i64
  %1535 = getelementptr inbounds %struct.CompAtomExt, ptr %46, i64 %1534
  %1536 = load i32, ptr %1535, align 4
  %1537 = shl i32 %1536, 2
  %1538 = ashr exact i32 %1537, 2
  %1539 = sext i32 %1538 to i64
  %1540 = getelementptr inbounds i8, ptr %944, i64 %1539
  %1541 = load i8, ptr %1540, align 1, !tbaa !57
  %1542 = sext i8 %1541 to i32
  switch i32 %1542, label %1554 [
    i32 0, label %1543
    i32 1, label %1545
    i32 2, label %1547
  ]

1543:                                             ; preds = %1526
  %1544 = getelementptr inbounds i16, ptr %1528, i64 1
  br label %1549

1545:                                             ; preds = %1526
  %1546 = getelementptr inbounds i16, ptr %1529, i64 1
  br label %1549

1547:                                             ; preds = %1526
  %1548 = getelementptr inbounds i16, ptr %1530, i64 1
  br label %1549

1549:                                             ; preds = %1543, %1545, %1547
  %1550 = phi ptr [ %1530, %1547 ], [ %1529, %1545 ], [ %1528, %1543 ]
  %1551 = phi ptr [ %1548, %1547 ], [ %1530, %1545 ], [ %1530, %1543 ]
  %1552 = phi ptr [ %1529, %1547 ], [ %1546, %1545 ], [ %1529, %1543 ]
  %1553 = phi ptr [ %1528, %1547 ], [ %1528, %1545 ], [ %1544, %1543 ]
  store i16 %1533, ptr %1550, align 2, !tbaa !44
  br label %1554

1554:                                             ; preds = %1549, %1526
  %1555 = phi ptr [ %1530, %1526 ], [ %1551, %1549 ]
  %1556 = phi ptr [ %1529, %1526 ], [ %1552, %1549 ]
  %1557 = phi ptr [ %1528, %1526 ], [ %1553, %1549 ]
  %1558 = or i64 %1527, 1
  %1559 = getelementptr inbounds i16, ptr %468, i64 %1558
  %1560 = load i16, ptr %1559, align 2, !tbaa !44
  %1561 = zext i16 %1560 to i64
  %1562 = getelementptr inbounds %struct.CompAtomExt, ptr %46, i64 %1561
  %1563 = load i32, ptr %1562, align 4
  %1564 = shl i32 %1563, 2
  %1565 = ashr exact i32 %1564, 2
  %1566 = sext i32 %1565 to i64
  %1567 = getelementptr inbounds i8, ptr %944, i64 %1566
  %1568 = load i8, ptr %1567, align 1, !tbaa !57
  %1569 = sext i8 %1568 to i32
  switch i32 %1569, label %1581 [
    i32 0, label %1574
    i32 1, label %1572
    i32 2, label %1570
  ]

1570:                                             ; preds = %1554
  %1571 = getelementptr inbounds i16, ptr %1555, i64 1
  br label %1576

1572:                                             ; preds = %1554
  %1573 = getelementptr inbounds i16, ptr %1556, i64 1
  br label %1576

1574:                                             ; preds = %1554
  %1575 = getelementptr inbounds i16, ptr %1557, i64 1
  br label %1576

1576:                                             ; preds = %1574, %1572, %1570
  %1577 = phi ptr [ %1555, %1570 ], [ %1556, %1572 ], [ %1557, %1574 ]
  %1578 = phi ptr [ %1571, %1570 ], [ %1555, %1572 ], [ %1555, %1574 ]
  %1579 = phi ptr [ %1556, %1570 ], [ %1573, %1572 ], [ %1556, %1574 ]
  %1580 = phi ptr [ %1557, %1570 ], [ %1557, %1572 ], [ %1575, %1574 ]
  store i16 %1560, ptr %1577, align 2, !tbaa !44
  br label %1581

1581:                                             ; preds = %1576, %1554
  %1582 = phi ptr [ %1555, %1554 ], [ %1578, %1576 ]
  %1583 = phi ptr [ %1556, %1554 ], [ %1579, %1576 ]
  %1584 = phi ptr [ %1557, %1554 ], [ %1580, %1576 ]
  %1585 = add nuw nsw i64 %1527, 2
  %1586 = add i64 %1531, 2
  %1587 = icmp eq i64 %1586, %1525
  br i1 %1587, label %1588, label %1526

1588:                                             ; preds = %1581, %1520
  %1589 = phi ptr [ undef, %1520 ], [ %1582, %1581 ]
  %1590 = phi ptr [ undef, %1520 ], [ %1583, %1581 ]
  %1591 = phi ptr [ undef, %1520 ], [ %1584, %1581 ]
  %1592 = phi i64 [ 0, %1520 ], [ %1585, %1581 ]
  %1593 = phi ptr [ %1513, %1520 ], [ %1584, %1581 ]
  %1594 = phi ptr [ %330, %1520 ], [ %1583, %1581 ]
  %1595 = phi ptr [ %376, %1520 ], [ %1582, %1581 ]
  %1596 = icmp eq i64 %1522, 0
  br i1 %1596, label %1620, label %1597

1597:                                             ; preds = %1588
  %1598 = getelementptr inbounds i16, ptr %468, i64 %1592
  %1599 = load i16, ptr %1598, align 2, !tbaa !44
  %1600 = zext i16 %1599 to i64
  %1601 = getelementptr inbounds %struct.CompAtomExt, ptr %46, i64 %1600
  %1602 = load i32, ptr %1601, align 4
  %1603 = shl i32 %1602, 2
  %1604 = ashr exact i32 %1603, 2
  %1605 = sext i32 %1604 to i64
  %1606 = getelementptr inbounds i8, ptr %944, i64 %1605
  %1607 = load i8, ptr %1606, align 1, !tbaa !57
  %1608 = sext i8 %1607 to i32
  switch i32 %1608, label %1620 [
    i32 0, label %1613
    i32 1, label %1611
    i32 2, label %1609
  ]

1609:                                             ; preds = %1597
  %1610 = getelementptr inbounds i16, ptr %1595, i64 1
  br label %1615

1611:                                             ; preds = %1597
  %1612 = getelementptr inbounds i16, ptr %1594, i64 1
  br label %1615

1613:                                             ; preds = %1597
  %1614 = getelementptr inbounds i16, ptr %1593, i64 1
  br label %1615

1615:                                             ; preds = %1613, %1611, %1609
  %1616 = phi ptr [ %1595, %1609 ], [ %1594, %1611 ], [ %1593, %1613 ]
  %1617 = phi ptr [ %1610, %1609 ], [ %1595, %1611 ], [ %1595, %1613 ]
  %1618 = phi ptr [ %1594, %1609 ], [ %1612, %1611 ], [ %1594, %1613 ]
  %1619 = phi ptr [ %1593, %1609 ], [ %1593, %1611 ], [ %1614, %1613 ]
  store i16 %1599, ptr %1616, align 2, !tbaa !44
  br label %1620

1620:                                             ; preds = %1588, %1615, %1597, %1512
  %1621 = phi ptr [ %376, %1512 ], [ %1589, %1588 ], [ %1595, %1597 ], [ %1617, %1615 ]
  %1622 = phi ptr [ %330, %1512 ], [ %1590, %1588 ], [ %1594, %1597 ], [ %1618, %1615 ]
  %1623 = phi ptr [ %1513, %1512 ], [ %1591, %1588 ], [ %1593, %1597 ], [ %1619, %1615 ]
  %1624 = ptrtoint ptr %1623 to i64
  %1625 = ptrtoint ptr %1291 to i64
  %1626 = sub i64 %1624, %1625
  %1627 = lshr exact i64 %1626, 1
  %1628 = trunc i64 %1627 to i32
  %1629 = icmp eq i32 %1628, 0
  %1630 = shl i64 %1626, 31
  br i1 %1629, label %1636, label %1631

1631:                                             ; preds = %1620
  %1632 = add i64 %1630, -4294967296
  %1633 = ashr i64 %1632, 32
  %1634 = getelementptr inbounds i16, ptr %1291, i64 %1633
  %1635 = load i16, ptr %1634, align 2, !tbaa !44
  br label %1636

1636:                                             ; preds = %1620, %1631
  %1637 = phi i16 [ %1635, %1631 ], [ -1, %1620 ]
  %1638 = ashr i64 %1630, 32
  %1639 = getelementptr inbounds i16, ptr %1291, i64 %1638
  store i16 %1637, ptr %1639, align 2, !tbaa !44
  %1640 = trunc i64 %1627 to i16
  %1641 = add i16 %1640, 1
  %1642 = load i32, ptr %13, align 8, !tbaa !17
  %1643 = sext i32 %1642 to i64
  %1644 = getelementptr inbounds i16, ptr %1287, i64 %1643
  store i16 %1641, ptr %1644, align 2, !tbaa !44
  %1645 = add nsw i32 %1628, 2
  %1646 = add nsw i32 %1645, %1642
  %1647 = ptrtoint ptr %1622 to i64
  %1648 = sub i64 %1647, %649
  %1649 = lshr exact i64 %1648, 1
  %1650 = trunc i64 %1649 to i32
  %1651 = add nsw i32 %1646, 1
  %1652 = sext i32 %1651 to i64
  %1653 = getelementptr i16, ptr %1287, i64 %1652
  %1654 = icmp sgt i32 %1650, 0
  br i1 %1654, label %1655, label %1745

1655:                                             ; preds = %1636
  %1656 = and i64 %1649, 4294967295
  %1657 = icmp ult i64 %1656, 8
  br i1 %1657, label %1701, label %1658

1658:                                             ; preds = %1655
  %1659 = shl nsw i64 %1652, 1
  %1660 = add i64 %1659, %1288
  %1661 = sub i64 %1660, %649
  %1662 = icmp ult i64 %1661, 128
  br i1 %1662, label %1701, label %1663

1663:                                             ; preds = %1658
  %1664 = icmp ult i64 %1656, 64
  br i1 %1664, label %1688, label %1665

1665:                                             ; preds = %1663
  %1666 = and i64 %1649, 63
  %1667 = sub nsw i64 %1656, %1666
  br label %1668

1668:                                             ; preds = %1668, %1665
  %1669 = phi i64 [ 0, %1665 ], [ %1682, %1668 ]
  %1670 = getelementptr inbounds i16, ptr %330, i64 %1669
  %1671 = load <16 x i16>, ptr %1670, align 2, !tbaa !44
  %1672 = getelementptr inbounds i16, ptr %1670, i64 16
  %1673 = load <16 x i16>, ptr %1672, align 2, !tbaa !44
  %1674 = getelementptr inbounds i16, ptr %1670, i64 32
  %1675 = load <16 x i16>, ptr %1674, align 2, !tbaa !44
  %1676 = getelementptr inbounds i16, ptr %1670, i64 48
  %1677 = load <16 x i16>, ptr %1676, align 2, !tbaa !44
  %1678 = getelementptr inbounds i16, ptr %1653, i64 %1669
  store <16 x i16> %1671, ptr %1678, align 2, !tbaa !44
  %1679 = getelementptr inbounds i16, ptr %1678, i64 16
  store <16 x i16> %1673, ptr %1679, align 2, !tbaa !44
  %1680 = getelementptr inbounds i16, ptr %1678, i64 32
  store <16 x i16> %1675, ptr %1680, align 2, !tbaa !44
  %1681 = getelementptr inbounds i16, ptr %1678, i64 48
  store <16 x i16> %1677, ptr %1681, align 2, !tbaa !44
  %1682 = add nuw i64 %1669, 64
  %1683 = icmp eq i64 %1682, %1667
  br i1 %1683, label %1684, label %1668, !llvm.loop !229

1684:                                             ; preds = %1668
  %1685 = icmp eq i64 %1666, 0
  br i1 %1685, label %1739, label %1686

1686:                                             ; preds = %1684
  %1687 = icmp ult i64 %1666, 8
  br i1 %1687, label %1701, label %1688

1688:                                             ; preds = %1663, %1686
  %1689 = phi i64 [ %1667, %1686 ], [ 0, %1663 ]
  %1690 = and i64 %1649, 7
  %1691 = sub nsw i64 %1656, %1690
  br label %1692

1692:                                             ; preds = %1692, %1688
  %1693 = phi i64 [ %1689, %1688 ], [ %1697, %1692 ]
  %1694 = getelementptr inbounds i16, ptr %330, i64 %1693
  %1695 = load <8 x i16>, ptr %1694, align 2, !tbaa !44
  %1696 = getelementptr inbounds i16, ptr %1653, i64 %1693
  store <8 x i16> %1695, ptr %1696, align 2, !tbaa !44
  %1697 = add nuw i64 %1693, 8
  %1698 = icmp eq i64 %1697, %1691
  br i1 %1698, label %1699, label %1692, !llvm.loop !230

1699:                                             ; preds = %1692
  %1700 = icmp eq i64 %1690, 0
  br i1 %1700, label %1739, label %1701

1701:                                             ; preds = %1658, %1655, %1686, %1699
  %1702 = phi i64 [ 0, %1655 ], [ 0, %1658 ], [ %1667, %1686 ], [ %1691, %1699 ]
  %1703 = sub i64 %1649, %1702
  %1704 = xor i64 %1702, -1
  %1705 = add nsw i64 %1656, %1704
  %1706 = and i64 %1703, 3
  %1707 = icmp eq i64 %1706, 0
  br i1 %1707, label %1717, label %1708

1708:                                             ; preds = %1701, %1708
  %1709 = phi i64 [ %1714, %1708 ], [ %1702, %1701 ]
  %1710 = phi i64 [ %1715, %1708 ], [ 0, %1701 ]
  %1711 = getelementptr inbounds i16, ptr %330, i64 %1709
  %1712 = load i16, ptr %1711, align 2, !tbaa !44
  %1713 = getelementptr inbounds i16, ptr %1653, i64 %1709
  store i16 %1712, ptr %1713, align 2, !tbaa !44
  %1714 = add nuw nsw i64 %1709, 1
  %1715 = add i64 %1710, 1
  %1716 = icmp eq i64 %1715, %1706
  br i1 %1716, label %1717, label %1708, !llvm.loop !231

1717:                                             ; preds = %1708, %1701
  %1718 = phi i64 [ %1702, %1701 ], [ %1714, %1708 ]
  %1719 = icmp ult i64 %1705, 3
  br i1 %1719, label %1739, label %1720

1720:                                             ; preds = %1717, %1720
  %1721 = phi i64 [ %1737, %1720 ], [ %1718, %1717 ]
  %1722 = getelementptr inbounds i16, ptr %330, i64 %1721
  %1723 = load i16, ptr %1722, align 2, !tbaa !44
  %1724 = getelementptr inbounds i16, ptr %1653, i64 %1721
  store i16 %1723, ptr %1724, align 2, !tbaa !44
  %1725 = add nuw nsw i64 %1721, 1
  %1726 = getelementptr inbounds i16, ptr %330, i64 %1725
  %1727 = load i16, ptr %1726, align 2, !tbaa !44
  %1728 = getelementptr inbounds i16, ptr %1653, i64 %1725
  store i16 %1727, ptr %1728, align 2, !tbaa !44
  %1729 = add nuw nsw i64 %1721, 2
  %1730 = getelementptr inbounds i16, ptr %330, i64 %1729
  %1731 = load i16, ptr %1730, align 2, !tbaa !44
  %1732 = getelementptr inbounds i16, ptr %1653, i64 %1729
  store i16 %1731, ptr %1732, align 2, !tbaa !44
  %1733 = add nuw nsw i64 %1721, 3
  %1734 = getelementptr inbounds i16, ptr %330, i64 %1733
  %1735 = load i16, ptr %1734, align 2, !tbaa !44
  %1736 = getelementptr inbounds i16, ptr %1653, i64 %1733
  store i16 %1735, ptr %1736, align 2, !tbaa !44
  %1737 = add nuw nsw i64 %1721, 4
  %1738 = icmp eq i64 %1737, %1656
  br i1 %1738, label %1739, label %1720, !llvm.loop !232

1739:                                             ; preds = %1717, %1720, %1684, %1699
  %1740 = shl i64 %1648, 31
  %1741 = add i64 %1740, -4294967296
  %1742 = ashr i64 %1741, 32
  %1743 = getelementptr inbounds i16, ptr %1653, i64 %1742
  %1744 = load i16, ptr %1743, align 2, !tbaa !44
  br label %1745

1745:                                             ; preds = %1636, %1739
  %1746 = phi i64 [ %1649, %1739 ], [ 0, %1636 ]
  %1747 = phi i16 [ %1744, %1739 ], [ -1, %1636 ]
  %1748 = and i64 %1746, 4294967295
  %1749 = getelementptr inbounds i16, ptr %1653, i64 %1748
  store i16 %1747, ptr %1749, align 2, !tbaa !44
  %1750 = trunc i64 %1649 to i16
  %1751 = add i16 %1750, 1
  %1752 = sext i32 %1646 to i64
  %1753 = getelementptr inbounds i16, ptr %1287, i64 %1752
  store i16 %1751, ptr %1753, align 2, !tbaa !44
  %1754 = add nsw i32 %1650, 2
  %1755 = add nsw i32 %1754, %1646
  %1756 = ptrtoint ptr %1621 to i64
  %1757 = sub i64 %1756, %650
  %1758 = lshr exact i64 %1757, 1
  %1759 = trunc i64 %1758 to i32
  %1760 = add nsw i32 %1755, 1
  %1761 = sext i32 %1760 to i64
  %1762 = getelementptr i16, ptr %1287, i64 %1761
  %1763 = icmp sgt i32 %1759, 0
  br i1 %1763, label %1764, label %1854

1764:                                             ; preds = %1745
  %1765 = and i64 %1758, 4294967295
  %1766 = icmp ult i64 %1765, 8
  br i1 %1766, label %1810, label %1767

1767:                                             ; preds = %1764
  %1768 = shl nsw i64 %1761, 1
  %1769 = add i64 %1768, %1288
  %1770 = sub i64 %1769, %650
  %1771 = icmp ult i64 %1770, 128
  br i1 %1771, label %1810, label %1772

1772:                                             ; preds = %1767
  %1773 = icmp ult i64 %1765, 64
  br i1 %1773, label %1797, label %1774

1774:                                             ; preds = %1772
  %1775 = and i64 %1758, 63
  %1776 = sub nsw i64 %1765, %1775
  br label %1777

1777:                                             ; preds = %1777, %1774
  %1778 = phi i64 [ 0, %1774 ], [ %1791, %1777 ]
  %1779 = getelementptr inbounds i16, ptr %376, i64 %1778
  %1780 = load <16 x i16>, ptr %1779, align 2, !tbaa !44
  %1781 = getelementptr inbounds i16, ptr %1779, i64 16
  %1782 = load <16 x i16>, ptr %1781, align 2, !tbaa !44
  %1783 = getelementptr inbounds i16, ptr %1779, i64 32
  %1784 = load <16 x i16>, ptr %1783, align 2, !tbaa !44
  %1785 = getelementptr inbounds i16, ptr %1779, i64 48
  %1786 = load <16 x i16>, ptr %1785, align 2, !tbaa !44
  %1787 = getelementptr inbounds i16, ptr %1762, i64 %1778
  store <16 x i16> %1780, ptr %1787, align 2, !tbaa !44
  %1788 = getelementptr inbounds i16, ptr %1787, i64 16
  store <16 x i16> %1782, ptr %1788, align 2, !tbaa !44
  %1789 = getelementptr inbounds i16, ptr %1787, i64 32
  store <16 x i16> %1784, ptr %1789, align 2, !tbaa !44
  %1790 = getelementptr inbounds i16, ptr %1787, i64 48
  store <16 x i16> %1786, ptr %1790, align 2, !tbaa !44
  %1791 = add nuw i64 %1778, 64
  %1792 = icmp eq i64 %1791, %1776
  br i1 %1792, label %1793, label %1777, !llvm.loop !233

1793:                                             ; preds = %1777
  %1794 = icmp eq i64 %1775, 0
  br i1 %1794, label %1848, label %1795

1795:                                             ; preds = %1793
  %1796 = icmp ult i64 %1775, 8
  br i1 %1796, label %1810, label %1797

1797:                                             ; preds = %1772, %1795
  %1798 = phi i64 [ %1776, %1795 ], [ 0, %1772 ]
  %1799 = and i64 %1758, 7
  %1800 = sub nsw i64 %1765, %1799
  br label %1801

1801:                                             ; preds = %1801, %1797
  %1802 = phi i64 [ %1798, %1797 ], [ %1806, %1801 ]
  %1803 = getelementptr inbounds i16, ptr %376, i64 %1802
  %1804 = load <8 x i16>, ptr %1803, align 2, !tbaa !44
  %1805 = getelementptr inbounds i16, ptr %1762, i64 %1802
  store <8 x i16> %1804, ptr %1805, align 2, !tbaa !44
  %1806 = add nuw i64 %1802, 8
  %1807 = icmp eq i64 %1806, %1800
  br i1 %1807, label %1808, label %1801, !llvm.loop !234

1808:                                             ; preds = %1801
  %1809 = icmp eq i64 %1799, 0
  br i1 %1809, label %1848, label %1810

1810:                                             ; preds = %1767, %1764, %1795, %1808
  %1811 = phi i64 [ 0, %1764 ], [ 0, %1767 ], [ %1776, %1795 ], [ %1800, %1808 ]
  %1812 = sub i64 %1758, %1811
  %1813 = xor i64 %1811, -1
  %1814 = add nsw i64 %1765, %1813
  %1815 = and i64 %1812, 3
  %1816 = icmp eq i64 %1815, 0
  br i1 %1816, label %1826, label %1817

1817:                                             ; preds = %1810, %1817
  %1818 = phi i64 [ %1823, %1817 ], [ %1811, %1810 ]
  %1819 = phi i64 [ %1824, %1817 ], [ 0, %1810 ]
  %1820 = getelementptr inbounds i16, ptr %376, i64 %1818
  %1821 = load i16, ptr %1820, align 2, !tbaa !44
  %1822 = getelementptr inbounds i16, ptr %1762, i64 %1818
  store i16 %1821, ptr %1822, align 2, !tbaa !44
  %1823 = add nuw nsw i64 %1818, 1
  %1824 = add i64 %1819, 1
  %1825 = icmp eq i64 %1824, %1815
  br i1 %1825, label %1826, label %1817, !llvm.loop !235

1826:                                             ; preds = %1817, %1810
  %1827 = phi i64 [ %1811, %1810 ], [ %1823, %1817 ]
  %1828 = icmp ult i64 %1814, 3
  br i1 %1828, label %1848, label %1829

1829:                                             ; preds = %1826, %1829
  %1830 = phi i64 [ %1846, %1829 ], [ %1827, %1826 ]
  %1831 = getelementptr inbounds i16, ptr %376, i64 %1830
  %1832 = load i16, ptr %1831, align 2, !tbaa !44
  %1833 = getelementptr inbounds i16, ptr %1762, i64 %1830
  store i16 %1832, ptr %1833, align 2, !tbaa !44
  %1834 = add nuw nsw i64 %1830, 1
  %1835 = getelementptr inbounds i16, ptr %376, i64 %1834
  %1836 = load i16, ptr %1835, align 2, !tbaa !44
  %1837 = getelementptr inbounds i16, ptr %1762, i64 %1834
  store i16 %1836, ptr %1837, align 2, !tbaa !44
  %1838 = add nuw nsw i64 %1830, 2
  %1839 = getelementptr inbounds i16, ptr %376, i64 %1838
  %1840 = load i16, ptr %1839, align 2, !tbaa !44
  %1841 = getelementptr inbounds i16, ptr %1762, i64 %1838
  store i16 %1840, ptr %1841, align 2, !tbaa !44
  %1842 = add nuw nsw i64 %1830, 3
  %1843 = getelementptr inbounds i16, ptr %376, i64 %1842
  %1844 = load i16, ptr %1843, align 2, !tbaa !44
  %1845 = getelementptr inbounds i16, ptr %1762, i64 %1842
  store i16 %1844, ptr %1845, align 2, !tbaa !44
  %1846 = add nuw nsw i64 %1830, 4
  %1847 = icmp eq i64 %1846, %1765
  br i1 %1847, label %1848, label %1829, !llvm.loop !236

1848:                                             ; preds = %1826, %1829, %1793, %1808
  %1849 = shl i64 %1757, 31
  %1850 = add i64 %1849, -4294967296
  %1851 = ashr i64 %1850, 32
  %1852 = getelementptr inbounds i16, ptr %1762, i64 %1851
  %1853 = load i16, ptr %1852, align 2, !tbaa !44
  br label %1854

1854:                                             ; preds = %1745, %1848
  %1855 = phi i64 [ %1758, %1848 ], [ 0, %1745 ]
  %1856 = phi i16 [ %1853, %1848 ], [ -1, %1745 ]
  %1857 = and i64 %1855, 4294967295
  %1858 = getelementptr inbounds i16, ptr %1762, i64 %1857
  store i16 %1856, ptr %1858, align 2, !tbaa !44
  %1859 = trunc i64 %1758 to i16
  %1860 = add i16 %1859, 1
  %1861 = sext i32 %1755 to i64
  %1862 = getelementptr inbounds i16, ptr %1287, i64 %1861
  store i16 %1860, ptr %1862, align 2, !tbaa !44
  %1863 = add nsw i32 %1759, 2
  %1864 = add nsw i32 %1863, %1755
  %1865 = select i1 %143, i32 0, i32 %1864
  store i32 %1865, ptr %13, align 8
  br label %1896

1866:                                             ; preds = %691
  %1867 = load ptr, ptr %8, align 8, !tbaa !46
  %1868 = load i32, ptr %13, align 8, !tbaa !17
  %1869 = add i32 %1868, 1
  %1870 = sext i32 %1869 to i64
  %1871 = getelementptr inbounds i16, ptr %1867, i64 %1870
  %1872 = sext i32 %1868 to i64
  %1873 = getelementptr inbounds i16, ptr %1867, i64 %1872
  %1874 = load i16, ptr %1873, align 2, !tbaa !44
  %1875 = zext i16 %1874 to i32
  %1876 = add i32 %1869, %1875
  %1877 = add nsw i32 %1875, -1
  %1878 = add i32 %1876, 1
  %1879 = sext i32 %1878 to i64
  %1880 = getelementptr inbounds i16, ptr %1867, i64 %1879
  %1881 = sext i32 %1876 to i64
  %1882 = getelementptr inbounds i16, ptr %1867, i64 %1881
  %1883 = load i16, ptr %1882, align 2, !tbaa !44
  %1884 = zext i16 %1883 to i32
  %1885 = add i32 %1878, %1884
  %1886 = add nsw i32 %1884, -1
  %1887 = add i32 %1885, 1
  %1888 = sext i32 %1887 to i64
  %1889 = getelementptr inbounds i16, ptr %1867, i64 %1888
  %1890 = sext i32 %1885 to i64
  %1891 = getelementptr inbounds i16, ptr %1867, i64 %1890
  %1892 = load i16, ptr %1891, align 2, !tbaa !44
  %1893 = zext i16 %1892 to i32
  %1894 = add i32 %1887, %1893
  store i32 %1894, ptr %13, align 8, !tbaa !17
  %1895 = add nsw i32 %1893, -1
  br label %1896

1896:                                             ; preds = %1854, %1866
  %1897 = phi ptr [ %1871, %1866 ], [ %1291, %1854 ]
  %1898 = phi i32 [ %1877, %1866 ], [ %1628, %1854 ]
  %1899 = phi ptr [ %1880, %1866 ], [ %1653, %1854 ]
  %1900 = phi i32 [ %1886, %1866 ], [ %1650, %1854 ]
  %1901 = phi ptr [ %1889, %1866 ], [ %1762, %1854 ]
  %1902 = phi i32 [ %1895, %1866 ], [ %1759, %1854 ]
  %1903 = phi i32 [ %673, %1866 ], [ %1249, %1854 ]
  %1904 = phi i32 [ %672, %1866 ], [ %1250, %1854 ]
  %1905 = phi i32 [ %671, %1866 ], [ %1251, %1854 ]
  %1906 = phi i32 [ %670, %1866 ], [ %1252, %1854 ]
  %1907 = phi ptr [ %668, %1866 ], [ %945, %1854 ]
  %1908 = phi ptr [ %667, %1866 ], [ %946, %1854 ]
  %1909 = phi ptr [ %666, %1866 ], [ %947, %1854 ]
  %1910 = getelementptr inbounds %struct.CompAtom, ptr %40, i64 %676, i32 1
  %1911 = load float, ptr %1910, align 8, !tbaa !79
  %1912 = fpext float %1911 to double
  %1913 = fmul double %1912, 0x4074C104816F0069
  %1914 = fmul double %29, %1913
  %1915 = fmul double %24, %1914
  %1916 = getelementptr inbounds %struct.CompAtom, ptr %40, i64 %676, i32 2
  %1917 = load i16, ptr %1916, align 4, !tbaa !80
  %1918 = sext i16 %1917 to i32
  %1919 = load ptr, ptr %651, align 8, !tbaa !81
  %1920 = load i32, ptr %652, align 8, !tbaa !83
  %1921 = shl nsw i32 %1918, 1
  %1922 = mul i32 %1921, %1920
  %1923 = zext i32 %1922 to i64
  %1924 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %1919, i64 %1923
  %1925 = load double, ptr @_ZN20ComputeNonbondedUtil7cutoff2E, align 8, !tbaa !19
  %1926 = extractelement <2 x double> %694, i64 0
  %1927 = extractelement <2 x double> %694, i64 1
  %1928 = tail call noundef i32 @_Z22pairlist_from_pairlistddddPK8CompAtomPKtiPtdPd(double noundef %1925, double noundef %1926, double noundef %1927, double noundef %697, ptr noundef %42, ptr noundef nonnull %1897, i32 noundef %1898, ptr noundef %95, double noundef %32, ptr noundef %141)
  %1929 = icmp sgt i32 %1928, 0
  br i1 %1929, label %1930, label %2084

1930:                                             ; preds = %1896
  %1931 = load ptr, ptr @_ZN20ComputeNonbondedUtil8r2_tableE, align 8, !tbaa !23
  %1932 = zext i32 %1928 to i64
  br label %1933

1933:                                             ; preds = %1930, %1933
  %1934 = phi i64 [ 0, %1930 ], [ %2082, %1933 ]
  %1935 = phi double [ %664, %1930 ], [ %2008, %1933 ]
  %1936 = phi double [ 0.000000e+00, %1930 ], [ %2067, %1933 ]
  %1937 = phi double [ 0.000000e+00, %1930 ], [ %2078, %1933 ]
  %1938 = phi <2 x double> [ zeroinitializer, %1930 ], [ %2066, %1933 ]
  %1939 = phi <2 x double> [ zeroinitializer, %1930 ], [ %2074, %1933 ]
  %1940 = phi <2 x double> [ %675, %1930 ], [ %2068, %1933 ]
  %1941 = shl nuw nsw i64 %1934, 1
  %1942 = getelementptr inbounds i32, ptr %142, i64 %1941
  %1943 = load i32, ptr %1942, align 4, !tbaa !5
  %1944 = ashr i32 %1943, 14
  %1945 = add nsw i32 %1944, %35
  %1946 = getelementptr inbounds i16, ptr %95, i64 %1934
  %1947 = load i16, ptr %1946, align 2, !tbaa !44
  %1948 = zext i16 %1947 to i64
  %1949 = getelementptr inbounds %struct.CompAtom, ptr %42, i64 %1948
  %1950 = getelementptr inbounds double, ptr %141, i64 %1934
  %1951 = load double, ptr %1950, align 8, !tbaa !19
  %1952 = sext i32 %1945 to i64
  %1953 = getelementptr inbounds double, ptr %1931, i64 %1952
  %1954 = load double, ptr %1953, align 8, !tbaa !19
  %1955 = fsub double %1951, %1954
  %1956 = shl nsw i32 %1945, 4
  %1957 = sext i32 %1956 to i64
  %1958 = getelementptr inbounds double, ptr %27, i64 %1957
  %1959 = getelementptr inbounds %struct.CompAtom, ptr %42, i64 %1948, i32 2
  %1960 = load i16, ptr %1959, align 4, !tbaa !80
  %1961 = sext i16 %1960 to i32
  %1962 = shl nsw i32 %1961, 1
  %1963 = sext i32 %1962 to i64
  %1964 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %1924, i64 %1963
  %1965 = getelementptr inbounds %class.Vector, ptr %626, i64 %1948
  %1966 = getelementptr inbounds %class.Vector, ptr %632, i64 %1948
  %1967 = getelementptr inbounds %struct.CompAtom, ptr %42, i64 %1948, i32 1
  %1968 = load float, ptr %1967, align 8, !tbaa !79
  %1969 = fpext float %1968 to double
  %1970 = fmul double %1915, %1969
  %1971 = getelementptr inbounds %class.Vector, ptr %1949, i64 0, i32 2
  %1972 = load double, ptr %1971, align 8, !tbaa !49
  %1973 = fsub double %697, %1972
  %1974 = load double, ptr %1964, align 8, !tbaa !84
  %1975 = fmul double %29, %1974
  %1976 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %1924, i64 %1963, i32 1
  %1977 = load double, ptr %1976, align 8, !tbaa !86
  %1978 = load double, ptr %1958, align 8, !tbaa !19
  %1979 = getelementptr inbounds double, ptr %1958, i64 2
  %1980 = load double, ptr %1979, align 8, !tbaa !19
  %1981 = fmul double %1977, %653
  %1982 = fmul double %1981, %1980
  %1983 = tail call double @llvm.fmuladd.f64(double %1975, double %1978, double %1982)
  %1984 = getelementptr inbounds double, ptr %1958, i64 1
  %1985 = load double, ptr %1984, align 8, !tbaa !19
  %1986 = getelementptr inbounds double, ptr %1958, i64 3
  %1987 = load double, ptr %1986, align 8, !tbaa !19
  %1988 = fmul double %1981, %1987
  %1989 = tail call double @llvm.fmuladd.f64(double %1975, double %1985, double %1988)
  %1990 = getelementptr inbounds double, ptr %1958, i64 4
  %1991 = load double, ptr %1990, align 8, !tbaa !19
  %1992 = getelementptr inbounds double, ptr %1958, i64 6
  %1993 = load double, ptr %1992, align 8, !tbaa !19
  %1994 = fmul double %1981, %1993
  %1995 = tail call double @llvm.fmuladd.f64(double %1975, double %1991, double %1994)
  %1996 = getelementptr inbounds double, ptr %1958, i64 5
  %1997 = load double, ptr %1996, align 8, !tbaa !19
  %1998 = getelementptr inbounds double, ptr %1958, i64 7
  %1999 = load double, ptr %1998, align 8, !tbaa !19
  %2000 = fmul double %1981, %1999
  %2001 = tail call double @llvm.fmuladd.f64(double %1975, double %1997, double %2000)
  %2002 = fmul double %1955, %1983
  %2003 = fmul double %1989, 2.500000e-01
  %2004 = tail call double @llvm.fmuladd.f64(double %2002, double 0x3FC5555555555555, double %2003)
  %2005 = fmul double %1995, 5.000000e-01
  %2006 = tail call double @llvm.fmuladd.f64(double %2004, double %1955, double %2005)
  %2007 = tail call double @llvm.fmuladd.f64(double %2006, double %1955, double %2001)
  %2008 = fsub double %1935, %2007
  %2009 = getelementptr inbounds double, ptr %1958, i64 8
  %2010 = load double, ptr %2009, align 8, !tbaa !19
  %2011 = getelementptr inbounds double, ptr %1958, i64 9
  %2012 = load double, ptr %2011, align 8, !tbaa !19
  %2013 = getelementptr inbounds double, ptr %1958, i64 10
  %2014 = load double, ptr %2013, align 8, !tbaa !19
  %2015 = getelementptr inbounds double, ptr %1958, i64 11
  %2016 = load double, ptr %2015, align 8, !tbaa !19
  %2017 = load <2 x double>, ptr %1949, align 8, !tbaa !19
  %2018 = fsub <2 x double> %694, %2017
  %2019 = getelementptr inbounds %class.Vector, ptr %626, i64 %1948, i32 2
  %2020 = load double, ptr %2019, align 8, !tbaa !87
  %2021 = getelementptr inbounds double, ptr %1958, i64 12
  %2022 = getelementptr inbounds double, ptr %1958, i64 13
  %2023 = getelementptr inbounds double, ptr %1958, i64 14
  %2024 = getelementptr inbounds double, ptr %1958, i64 15
  %2025 = fmul double %1970, %2010
  %2026 = fmul double %1970, %2012
  %2027 = fmul double %1970, %2014
  %2028 = fadd double %1983, %2025
  %2029 = fadd double %1989, %2026
  %2030 = fadd double %1995, %2027
  %2031 = tail call double @llvm.fmuladd.f64(double %1955, double %2028, double %2029)
  %2032 = tail call double @llvm.fmuladd.f64(double %2031, double %1955, double %2030)
  %2033 = insertelement <2 x double> poison, double %2032, i64 0
  %2034 = shufflevector <2 x double> %2033, <2 x double> poison, <2 x i32> zeroinitializer
  %2035 = fmul <2 x double> %2018, %2034
  %2036 = load <2 x double>, ptr %1965, align 8, !tbaa !19
  %2037 = fsub <2 x double> %2036, %2035
  store <2 x double> %2037, ptr %1965, align 8, !tbaa !19
  %2038 = fmul double %1973, %2032
  %2039 = fsub double %2020, %2038
  store double %2039, ptr %2019, align 8, !tbaa !87
  %2040 = load double, ptr %2021, align 8, !tbaa !19
  %2041 = load double, ptr %2022, align 8, !tbaa !19
  %2042 = load double, ptr %2023, align 8, !tbaa !19
  %2043 = load double, ptr %2024, align 8, !tbaa !19
  %2044 = fmul double %1970, %2040
  %2045 = fmul double %1970, %2041
  %2046 = fmul double %1970, %2042
  %2047 = insertelement <2 x double> poison, double %1970, i64 0
  %2048 = shufflevector <2 x double> %2047, <2 x double> poison, <2 x i32> zeroinitializer
  %2049 = insertelement <2 x double> poison, double %2016, i64 0
  %2050 = insertelement <2 x double> %2049, double %2043, i64 1
  %2051 = fmul <2 x double> %2048, %2050
  %2052 = insertelement <2 x double> poison, double %1955, i64 0
  %2053 = shufflevector <2 x double> %2052, <2 x double> poison, <2 x i32> zeroinitializer
  %2054 = insertelement <2 x double> poison, double %2025, i64 0
  %2055 = insertelement <2 x double> %2054, double %2044, i64 1
  %2056 = fmul <2 x double> %2053, %2055
  %2057 = insertelement <2 x double> poison, double %2026, i64 0
  %2058 = insertelement <2 x double> %2057, double %2045, i64 1
  %2059 = fmul <2 x double> %2058, <double 2.500000e-01, double 2.500000e-01>
  %2060 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2056, <2 x double> <double 0x3FC5555555555555, double 0x3FC5555555555555>, <2 x double> %2059)
  %2061 = insertelement <2 x double> poison, double %2027, i64 0
  %2062 = insertelement <2 x double> %2061, double %2046, i64 1
  %2063 = fmul <2 x double> %2062, <double 5.000000e-01, double 5.000000e-01>
  %2064 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2060, <2 x double> %2053, <2 x double> %2063)
  %2065 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2064, <2 x double> %2053, <2 x double> %2051)
  %2066 = fadd <2 x double> %1938, %2035
  %2067 = fadd double %1936, %2038
  %2068 = fsub <2 x double> %1940, %2065
  %2069 = tail call double @llvm.fmuladd.f64(double %1955, double %2044, double %2045)
  %2070 = tail call double @llvm.fmuladd.f64(double %2069, double %1955, double %2046)
  %2071 = insertelement <2 x double> poison, double %2070, i64 0
  %2072 = shufflevector <2 x double> %2071, <2 x double> poison, <2 x i32> zeroinitializer
  %2073 = fmul <2 x double> %2018, %2072
  %2074 = fadd <2 x double> %1939, %2073
  %2075 = load <2 x double>, ptr %1966, align 8, !tbaa !19
  %2076 = fsub <2 x double> %2075, %2073
  store <2 x double> %2076, ptr %1966, align 8, !tbaa !19
  %2077 = fmul double %1973, %2070
  %2078 = fadd double %1937, %2077
  %2079 = getelementptr inbounds %class.Vector, ptr %632, i64 %1948, i32 2
  %2080 = load double, ptr %2079, align 8, !tbaa !87
  %2081 = fsub double %2080, %2077
  store double %2081, ptr %2079, align 8, !tbaa !87
  %2082 = add nuw nsw i64 %1934, 1
  %2083 = icmp eq i64 %2082, %1932
  br i1 %2083, label %2084, label %1933

2084:                                             ; preds = %1933, %1896
  %2085 = phi double [ 0.000000e+00, %1896 ], [ %2078, %1933 ]
  %2086 = phi double [ 0.000000e+00, %1896 ], [ %2067, %1933 ]
  %2087 = phi double [ %664, %1896 ], [ %2008, %1933 ]
  %2088 = phi <2 x double> [ zeroinitializer, %1896 ], [ %2066, %1933 ]
  %2089 = phi <2 x double> [ zeroinitializer, %1896 ], [ %2074, %1933 ]
  %2090 = phi <2 x double> [ %675, %1896 ], [ %2068, %1933 ]
  %2091 = load double, ptr @_ZN20ComputeNonbondedUtil7cutoff2E, align 8, !tbaa !19
  %2092 = tail call noundef i32 @_Z22pairlist_from_pairlistddddPK8CompAtomPKtiPtdPd(double noundef %2091, double noundef %1926, double noundef %1927, double noundef %697, ptr noundef %42, ptr noundef %1901, i32 noundef %1902, ptr noundef %95, double noundef %32, ptr noundef %141)
  %2093 = add nsw i32 %2092, %663
  %2094 = icmp sgt i32 %2092, 0
  br i1 %2094, label %2095, label %2265

2095:                                             ; preds = %2084
  %2096 = load ptr, ptr @_ZN20ComputeNonbondedUtil8r2_tableE, align 8, !tbaa !23
  %2097 = zext i32 %2092 to i64
  br label %2098

2098:                                             ; preds = %2095, %2098
  %2099 = phi i64 [ 0, %2095 ], [ %2263, %2098 ]
  %2100 = phi double [ %2087, %2095 ], [ %2173, %2098 ]
  %2101 = phi double [ %2086, %2095 ], [ %2248, %2098 ]
  %2102 = phi double [ %2085, %2095 ], [ %2259, %2098 ]
  %2103 = phi <2 x double> [ %2088, %2095 ], [ %2247, %2098 ]
  %2104 = phi <2 x double> [ %2089, %2095 ], [ %2255, %2098 ]
  %2105 = phi <2 x double> [ %2090, %2095 ], [ %2249, %2098 ]
  %2106 = shl nuw nsw i64 %2099, 1
  %2107 = getelementptr inbounds i32, ptr %142, i64 %2106
  %2108 = load i32, ptr %2107, align 4, !tbaa !5
  %2109 = ashr i32 %2108, 14
  %2110 = add nsw i32 %2109, %35
  %2111 = getelementptr inbounds i16, ptr %95, i64 %2099
  %2112 = load i16, ptr %2111, align 2, !tbaa !44
  %2113 = zext i16 %2112 to i64
  %2114 = getelementptr inbounds %struct.CompAtom, ptr %42, i64 %2113
  %2115 = getelementptr inbounds double, ptr %141, i64 %2099
  %2116 = load double, ptr %2115, align 8, !tbaa !19
  %2117 = sext i32 %2110 to i64
  %2118 = getelementptr inbounds double, ptr %2096, i64 %2117
  %2119 = load double, ptr %2118, align 8, !tbaa !19
  %2120 = fsub double %2116, %2119
  %2121 = shl nsw i32 %2110, 4
  %2122 = sext i32 %2121 to i64
  %2123 = getelementptr inbounds double, ptr %27, i64 %2122
  %2124 = getelementptr inbounds %struct.CompAtom, ptr %42, i64 %2113, i32 2
  %2125 = load i16, ptr %2124, align 4, !tbaa !80
  %2126 = sext i16 %2125 to i32
  %2127 = shl nsw i32 %2126, 1
  %2128 = sext i32 %2127 to i64
  %2129 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %1924, i64 %2128
  %2130 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %2129, i64 1
  %2131 = getelementptr inbounds %class.Vector, ptr %626, i64 %2113
  %2132 = getelementptr inbounds %class.Vector, ptr %632, i64 %2113
  %2133 = getelementptr inbounds %struct.CompAtom, ptr %42, i64 %2113, i32 1
  %2134 = load float, ptr %2133, align 8, !tbaa !79
  %2135 = fpext float %2134 to double
  %2136 = getelementptr inbounds %class.Vector, ptr %2114, i64 0, i32 2
  %2137 = load double, ptr %2136, align 8, !tbaa !49
  %2138 = fsub double %697, %2137
  %2139 = load double, ptr %2130, align 8, !tbaa !84
  %2140 = fmul double %29, %2139
  %2141 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %2129, i64 1, i32 1
  %2142 = load double, ptr %2141, align 8, !tbaa !86
  %2143 = load double, ptr %2123, align 8, !tbaa !19
  %2144 = getelementptr inbounds double, ptr %2123, i64 2
  %2145 = load double, ptr %2144, align 8, !tbaa !19
  %2146 = fmul double %2142, %653
  %2147 = fmul double %2146, %2145
  %2148 = tail call double @llvm.fmuladd.f64(double %2140, double %2143, double %2147)
  %2149 = getelementptr inbounds double, ptr %2123, i64 1
  %2150 = load double, ptr %2149, align 8, !tbaa !19
  %2151 = getelementptr inbounds double, ptr %2123, i64 3
  %2152 = load double, ptr %2151, align 8, !tbaa !19
  %2153 = fmul double %2146, %2152
  %2154 = tail call double @llvm.fmuladd.f64(double %2140, double %2150, double %2153)
  %2155 = getelementptr inbounds double, ptr %2123, i64 4
  %2156 = load double, ptr %2155, align 8, !tbaa !19
  %2157 = getelementptr inbounds double, ptr %2123, i64 6
  %2158 = load double, ptr %2157, align 8, !tbaa !19
  %2159 = fmul double %2146, %2158
  %2160 = tail call double @llvm.fmuladd.f64(double %2140, double %2156, double %2159)
  %2161 = getelementptr inbounds double, ptr %2123, i64 5
  %2162 = load double, ptr %2161, align 8, !tbaa !19
  %2163 = getelementptr inbounds double, ptr %2123, i64 7
  %2164 = load double, ptr %2163, align 8, !tbaa !19
  %2165 = fmul double %2146, %2164
  %2166 = tail call double @llvm.fmuladd.f64(double %2140, double %2162, double %2165)
  %2167 = fmul double %2120, %2148
  %2168 = fmul double %2154, 2.500000e-01
  %2169 = tail call double @llvm.fmuladd.f64(double %2167, double 0x3FC5555555555555, double %2168)
  %2170 = fmul double %2160, 5.000000e-01
  %2171 = tail call double @llvm.fmuladd.f64(double %2169, double %2120, double %2170)
  %2172 = tail call double @llvm.fmuladd.f64(double %2171, double %2120, double %2166)
  %2173 = fsub double %2100, %2172
  %2174 = getelementptr inbounds double, ptr %2123, i64 8
  %2175 = load double, ptr %2174, align 8, !tbaa !19
  %2176 = getelementptr inbounds double, ptr %2123, i64 9
  %2177 = load double, ptr %2176, align 8, !tbaa !19
  %2178 = getelementptr inbounds double, ptr %2123, i64 10
  %2179 = load double, ptr %2178, align 8, !tbaa !19
  %2180 = getelementptr inbounds double, ptr %2123, i64 11
  %2181 = load double, ptr %2180, align 8, !tbaa !19
  %2182 = load <2 x double>, ptr %2114, align 8, !tbaa !19
  %2183 = fsub <2 x double> %694, %2182
  %2184 = getelementptr inbounds %class.Vector, ptr %626, i64 %2113, i32 2
  %2185 = load double, ptr %2184, align 8, !tbaa !87
  %2186 = shl nsw i32 %2110, 2
  %2187 = sext i32 %2186 to i64
  %2188 = getelementptr inbounds double, ptr %28, i64 %2187
  %2189 = getelementptr inbounds double, ptr %2123, i64 12
  %2190 = getelementptr inbounds double, ptr %2123, i64 13
  %2191 = getelementptr inbounds double, ptr %2123, i64 14
  %2192 = getelementptr inbounds double, ptr %2123, i64 15
  %2193 = getelementptr inbounds double, ptr %2188, i64 1
  %2194 = getelementptr inbounds double, ptr %2188, i64 2
  %2195 = getelementptr inbounds double, ptr %2188, i64 3
  %2196 = fmul double %1915, %2135
  %2197 = fmul double %654, %2196
  %2198 = fmul double %2197, %2175
  %2199 = fmul double %2197, %2177
  %2200 = fmul double %2197, %2179
  %2201 = fadd double %2148, %2198
  %2202 = fadd double %2154, %2199
  %2203 = fadd double %2160, %2200
  %2204 = tail call double @llvm.fmuladd.f64(double %2120, double %2201, double %2202)
  %2205 = tail call double @llvm.fmuladd.f64(double %2204, double %2120, double %2203)
  %2206 = insertelement <2 x double> poison, double %2205, i64 0
  %2207 = shufflevector <2 x double> %2206, <2 x double> poison, <2 x i32> zeroinitializer
  %2208 = fmul <2 x double> %2183, %2207
  %2209 = load <2 x double>, ptr %2131, align 8, !tbaa !19
  %2210 = fsub <2 x double> %2209, %2208
  store <2 x double> %2210, ptr %2131, align 8, !tbaa !19
  %2211 = fmul double %2138, %2205
  %2212 = fsub double %2185, %2211
  store double %2212, ptr %2184, align 8, !tbaa !87
  %2213 = load double, ptr %2189, align 8, !tbaa !19
  %2214 = load double, ptr %2190, align 8, !tbaa !19
  %2215 = load double, ptr %2191, align 8, !tbaa !19
  %2216 = load double, ptr %2192, align 8, !tbaa !19
  %2217 = load double, ptr %2188, align 8, !tbaa !19
  %2218 = tail call double @llvm.fmuladd.f64(double %31, double %2217, double %2216)
  %2219 = load double, ptr %2193, align 8, !tbaa !19
  %2220 = tail call double @llvm.fmuladd.f64(double %655, double %2219, double %2215)
  %2221 = load double, ptr %2194, align 8, !tbaa !19
  %2222 = tail call double @llvm.fmuladd.f64(double %656, double %2221, double %2214)
  %2223 = load double, ptr %2195, align 8, !tbaa !19
  %2224 = tail call double @llvm.fmuladd.f64(double %657, double %2223, double %2213)
  %2225 = fmul double %2196, %2224
  %2226 = fmul double %2196, %2222
  %2227 = fmul double %2196, %2220
  %2228 = insertelement <2 x double> poison, double %2197, i64 0
  %2229 = insertelement <2 x double> %2228, double %2196, i64 1
  %2230 = insertelement <2 x double> poison, double %2181, i64 0
  %2231 = insertelement <2 x double> %2230, double %2218, i64 1
  %2232 = fmul <2 x double> %2229, %2231
  %2233 = insertelement <2 x double> poison, double %2120, i64 0
  %2234 = shufflevector <2 x double> %2233, <2 x double> poison, <2 x i32> zeroinitializer
  %2235 = insertelement <2 x double> poison, double %2198, i64 0
  %2236 = insertelement <2 x double> %2235, double %2225, i64 1
  %2237 = fmul <2 x double> %2234, %2236
  %2238 = insertelement <2 x double> poison, double %2199, i64 0
  %2239 = insertelement <2 x double> %2238, double %2226, i64 1
  %2240 = fmul <2 x double> %2239, <double 2.500000e-01, double 2.500000e-01>
  %2241 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2237, <2 x double> <double 0x3FC5555555555555, double 0x3FC5555555555555>, <2 x double> %2240)
  %2242 = insertelement <2 x double> poison, double %2200, i64 0
  %2243 = insertelement <2 x double> %2242, double %2227, i64 1
  %2244 = fmul <2 x double> %2243, <double 5.000000e-01, double 5.000000e-01>
  %2245 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2241, <2 x double> %2234, <2 x double> %2244)
  %2246 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2245, <2 x double> %2234, <2 x double> %2232)
  %2247 = fadd <2 x double> %2103, %2208
  %2248 = fadd double %2101, %2211
  %2249 = fsub <2 x double> %2105, %2246
  %2250 = tail call double @llvm.fmuladd.f64(double %2120, double %2225, double %2226)
  %2251 = tail call double @llvm.fmuladd.f64(double %2250, double %2120, double %2227)
  %2252 = insertelement <2 x double> poison, double %2251, i64 0
  %2253 = shufflevector <2 x double> %2252, <2 x double> poison, <2 x i32> zeroinitializer
  %2254 = fmul <2 x double> %2183, %2253
  %2255 = fadd <2 x double> %2104, %2254
  %2256 = load <2 x double>, ptr %2132, align 8, !tbaa !19
  %2257 = fsub <2 x double> %2256, %2254
  store <2 x double> %2257, ptr %2132, align 8, !tbaa !19
  %2258 = fmul double %2138, %2251
  %2259 = fadd double %2102, %2258
  %2260 = getelementptr inbounds %class.Vector, ptr %632, i64 %2113, i32 2
  %2261 = load double, ptr %2260, align 8, !tbaa !87
  %2262 = fsub double %2261, %2258
  store double %2262, ptr %2260, align 8, !tbaa !87
  %2263 = add nuw nsw i64 %2099, 1
  %2264 = icmp eq i64 %2263, %2097
  br i1 %2264, label %2265, label %2098

2265:                                             ; preds = %2098, %2084
  %2266 = phi double [ %2085, %2084 ], [ %2259, %2098 ]
  %2267 = phi double [ %2086, %2084 ], [ %2248, %2098 ]
  %2268 = phi double [ %2087, %2084 ], [ %2173, %2098 ]
  %2269 = phi <2 x double> [ %2088, %2084 ], [ %2247, %2098 ]
  %2270 = phi <2 x double> [ %2089, %2084 ], [ %2255, %2098 ]
  %2271 = phi <2 x double> [ %2090, %2084 ], [ %2249, %2098 ]
  %2272 = load double, ptr @_ZN20ComputeNonbondedUtil7cutoff2E, align 8, !tbaa !19
  %2273 = tail call noundef i32 @_Z22pairlist_from_pairlistddddPK8CompAtomPKtiPtdPd(double noundef %2272, double noundef %1926, double noundef %1927, double noundef %697, ptr noundef %42, ptr noundef %1899, i32 noundef %1900, ptr noundef %95, double noundef %32, ptr noundef %141)
  %2274 = add nsw i32 %2093, %2273
  %2275 = icmp sgt i32 %2273, 0
  %2276 = extractelement <2 x double> %2271, i64 1
  br i1 %2275, label %2277, label %2361

2277:                                             ; preds = %2265
  %2278 = load ptr, ptr @_ZN20ComputeNonbondedUtil8r2_tableE, align 8, !tbaa !23
  %2279 = zext i32 %2273 to i64
  br label %2280

2280:                                             ; preds = %2277, %2280
  %2281 = phi i64 [ 0, %2277 ], [ %2359, %2280 ]
  %2282 = phi double [ %2276, %2277 ], [ %2343, %2280 ]
  %2283 = phi double [ %2266, %2277 ], [ %2355, %2280 ]
  %2284 = phi <2 x double> [ %2270, %2277 ], [ %2351, %2280 ]
  %2285 = shl nuw nsw i64 %2281, 1
  %2286 = getelementptr inbounds i32, ptr %142, i64 %2285
  %2287 = load i32, ptr %2286, align 4, !tbaa !5
  %2288 = ashr i32 %2287, 14
  %2289 = add nsw i32 %2288, %35
  %2290 = getelementptr inbounds i16, ptr %95, i64 %2281
  %2291 = load i16, ptr %2290, align 2, !tbaa !44
  %2292 = zext i16 %2291 to i64
  %2293 = getelementptr inbounds %struct.CompAtom, ptr %42, i64 %2292
  %2294 = getelementptr inbounds double, ptr %141, i64 %2281
  %2295 = load double, ptr %2294, align 8, !tbaa !19
  %2296 = sext i32 %2289 to i64
  %2297 = getelementptr inbounds double, ptr %2278, i64 %2296
  %2298 = load double, ptr %2297, align 8, !tbaa !19
  %2299 = fsub double %2295, %2298
  %2300 = shl nsw i32 %2289, 4
  %2301 = sext i32 %2300 to i64
  %2302 = getelementptr inbounds double, ptr %27, i64 %2301
  %2303 = getelementptr inbounds %class.Vector, ptr %632, i64 %2292
  %2304 = getelementptr inbounds %struct.CompAtom, ptr %42, i64 %2292, i32 1
  %2305 = load float, ptr %2304, align 8, !tbaa !79
  %2306 = fpext float %2305 to double
  %2307 = fmul double %1915, %2306
  %2308 = getelementptr inbounds %class.Vector, ptr %2293, i64 0, i32 2
  %2309 = load double, ptr %2308, align 8, !tbaa !49
  %2310 = fsub double %697, %2309
  %2311 = shl nsw i32 %2289, 2
  %2312 = sext i32 %2311 to i64
  %2313 = getelementptr inbounds double, ptr %28, i64 %2312
  %2314 = getelementptr inbounds double, ptr %2302, i64 12
  %2315 = load double, ptr %2314, align 8, !tbaa !19
  %2316 = getelementptr inbounds double, ptr %2302, i64 13
  %2317 = load double, ptr %2316, align 8, !tbaa !19
  %2318 = getelementptr inbounds double, ptr %2302, i64 14
  %2319 = load double, ptr %2318, align 8, !tbaa !19
  %2320 = getelementptr inbounds double, ptr %2302, i64 15
  %2321 = load double, ptr %2320, align 8, !tbaa !19
  %2322 = load double, ptr %2313, align 8, !tbaa !19
  %2323 = fadd double %2321, %2322
  %2324 = getelementptr inbounds double, ptr %2313, i64 1
  %2325 = load double, ptr %2324, align 8, !tbaa !19
  %2326 = tail call double @llvm.fmuladd.f64(double %2325, double 2.000000e+00, double %2319)
  %2327 = getelementptr inbounds double, ptr %2313, i64 2
  %2328 = load double, ptr %2327, align 8, !tbaa !19
  %2329 = tail call double @llvm.fmuladd.f64(double %2328, double 4.000000e+00, double %2317)
  %2330 = getelementptr inbounds double, ptr %2313, i64 3
  %2331 = load double, ptr %2330, align 8, !tbaa !19
  %2332 = tail call double @llvm.fmuladd.f64(double %2331, double 6.000000e+00, double %2315)
  %2333 = fmul double %2307, %2332
  %2334 = fmul double %2307, %2329
  %2335 = fmul double %2307, %2326
  %2336 = fmul double %2307, %2323
  %2337 = fmul double %2299, %2333
  %2338 = fmul double %2334, 2.500000e-01
  %2339 = tail call double @llvm.fmuladd.f64(double %2337, double 0x3FC5555555555555, double %2338)
  %2340 = fmul double %2335, 5.000000e-01
  %2341 = tail call double @llvm.fmuladd.f64(double %2339, double %2299, double %2340)
  %2342 = tail call double @llvm.fmuladd.f64(double %2341, double %2299, double %2336)
  %2343 = fsub double %2282, %2342
  %2344 = tail call double @llvm.fmuladd.f64(double %2299, double %2333, double %2334)
  %2345 = tail call double @llvm.fmuladd.f64(double %2344, double %2299, double %2335)
  %2346 = load <2 x double>, ptr %2293, align 8, !tbaa !19
  %2347 = fsub <2 x double> %694, %2346
  %2348 = insertelement <2 x double> poison, double %2345, i64 0
  %2349 = shufflevector <2 x double> %2348, <2 x double> poison, <2 x i32> zeroinitializer
  %2350 = fmul <2 x double> %2347, %2349
  %2351 = fadd <2 x double> %2284, %2350
  %2352 = load <2 x double>, ptr %2303, align 8, !tbaa !19
  %2353 = fsub <2 x double> %2352, %2350
  store <2 x double> %2353, ptr %2303, align 8, !tbaa !19
  %2354 = fmul double %2310, %2345
  %2355 = fadd double %2283, %2354
  %2356 = getelementptr inbounds %class.Vector, ptr %632, i64 %2292, i32 2
  %2357 = load double, ptr %2356, align 8, !tbaa !87
  %2358 = fsub double %2357, %2354
  store double %2358, ptr %2356, align 8, !tbaa !87
  %2359 = add nuw nsw i64 %2281, 1
  %2360 = icmp eq i64 %2359, %2279
  br i1 %2360, label %2361, label %2280

2361:                                             ; preds = %2280, %2265
  %2362 = phi double [ %2266, %2265 ], [ %2355, %2280 ]
  %2363 = phi double [ %2276, %2265 ], [ %2343, %2280 ]
  %2364 = phi <2 x double> [ %2270, %2265 ], [ %2351, %2280 ]
  %2365 = getelementptr inbounds %class.Vector, ptr %626, i64 %676
  %2366 = load <2 x double>, ptr %2365, align 8, !tbaa !19
  %2367 = fadd <2 x double> %2269, %2366
  store <2 x double> %2367, ptr %2365, align 8, !tbaa !19
  %2368 = getelementptr inbounds %class.Vector, ptr %626, i64 %676, i32 2
  %2369 = load double, ptr %2368, align 8, !tbaa !87
  %2370 = fadd double %2267, %2369
  store double %2370, ptr %2368, align 8, !tbaa !87
  %2371 = getelementptr inbounds %class.Vector, ptr %632, i64 %676
  %2372 = load <2 x double>, ptr %2371, align 8, !tbaa !19
  %2373 = fadd <2 x double> %2364, %2372
  store <2 x double> %2373, ptr %2371, align 8, !tbaa !19
  %2374 = getelementptr inbounds %class.Vector, ptr %632, i64 %676, i32 2
  %2375 = load double, ptr %2374, align 8, !tbaa !87
  %2376 = fadd double %2362, %2375
  store double %2376, ptr %2374, align 8, !tbaa !87
  %2377 = insertelement <2 x double> %2271, double %2363, i64 1
  br label %2378

2378:                                             ; preds = %2361, %687
  %2379 = phi i32 [ %688, %687 ], [ %692, %2361 ]
  %2380 = phi i32 [ %673, %687 ], [ %1903, %2361 ]
  %2381 = phi i32 [ %672, %687 ], [ %1904, %2361 ]
  %2382 = phi i32 [ %671, %687 ], [ %1905, %2361 ]
  %2383 = phi i32 [ %670, %687 ], [ %1906, %2361 ]
  %2384 = phi i32 [ %669, %687 ], [ %699, %2361 ]
  %2385 = phi ptr [ %668, %687 ], [ %1907, %2361 ]
  %2386 = phi ptr [ %667, %687 ], [ %1908, %2361 ]
  %2387 = phi ptr [ %666, %687 ], [ %1909, %2361 ]
  %2388 = phi i32 [ %690, %687 ], [ %665, %2361 ]
  %2389 = phi double [ %664, %687 ], [ %2268, %2361 ]
  %2390 = phi i32 [ %663, %687 ], [ %2274, %2361 ]
  %2391 = phi <2 x double> [ %675, %687 ], [ %2377, %2361 ]
  %2392 = add nsw i32 %2388, 1
  %2393 = icmp slt i32 %2392, %636
  br i1 %2393, label %662, label %2394

2394:                                             ; preds = %2378, %620
  %2395 = phi ptr [ null, %620 ], [ %2387, %2378 ]
  %2396 = phi double [ 0.000000e+00, %620 ], [ %2389, %2378 ]
  %2397 = phi i32 [ 0, %620 ], [ %2390, %2378 ]
  %2398 = phi <2 x double> [ zeroinitializer, %620 ], [ %2391, %2378 ]
  %2399 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 3
  %2400 = load ptr, ptr %2399, align 8, !tbaa !23
  %2401 = icmp sgt i32 %37, 0
  br i1 %2401, label %2402, label %2443

2402:                                             ; preds = %2394
  %2403 = zext i32 %37 to i64
  br label %2411

2404:                                             ; preds = %2411
  %2405 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 4
  %2406 = load ptr, ptr %2405, align 8, !tbaa !23
  %2407 = extractelement <2 x double> %2440, i64 0
  %2408 = extractelement <2 x double> %2440, i64 1
  br i1 %2401, label %2409, label %2443

2409:                                             ; preds = %2404
  %2410 = zext i32 %37 to i64
  br label %2486

2411:                                             ; preds = %2402, %2411
  %2412 = phi i64 [ 0, %2402 ], [ %2441, %2411 ]
  %2413 = phi <4 x double> [ zeroinitializer, %2402 ], [ %2434, %2411 ]
  %2414 = phi <2 x double> [ zeroinitializer, %2402 ], [ %2440, %2411 ]
  %2415 = getelementptr inbounds %class.Vector, ptr %626, i64 %2412
  %2416 = getelementptr inbounds %class.Vector, ptr %2400, i64 %2412
  %2417 = load <2 x double>, ptr %2415, align 8, !tbaa !19
  %2418 = load <2 x double>, ptr %2416, align 8, !tbaa !19
  %2419 = fadd <2 x double> %2417, %2418
  store <2 x double> %2419, ptr %2416, align 8, !tbaa !19
  %2420 = getelementptr inbounds %class.Vector, ptr %626, i64 %2412, i32 2
  %2421 = load double, ptr %2420, align 8, !tbaa !87
  %2422 = getelementptr inbounds %class.Vector, ptr %2400, i64 %2412, i32 2
  %2423 = load double, ptr %2422, align 8, !tbaa !87
  %2424 = fadd double %2421, %2423
  store double %2424, ptr %2422, align 8, !tbaa !87
  %2425 = getelementptr inbounds %struct.CompAtom, ptr %40, i64 %2412
  %2426 = load <2 x double>, ptr %2425, align 8, !tbaa !19
  %2427 = getelementptr inbounds %class.Vector, ptr %2425, i64 0, i32 2
  %2428 = load double, ptr %2427, align 8, !tbaa !49
  %2429 = load <2 x double>, ptr %2415, align 8, !tbaa !19
  %2430 = shufflevector <2 x double> %2429, <2 x double> poison, <4 x i32> <i32 0, i32 0, i32 0, i32 1>
  %2431 = shufflevector <2 x double> %2426, <2 x double> poison, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>
  %2432 = insertelement <4 x double> %2431, double %2428, i64 2
  %2433 = shufflevector <4 x double> %2432, <4 x double> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 1>
  %2434 = tail call <4 x double> @llvm.fmuladd.v4f64(<4 x double> %2430, <4 x double> %2433, <4 x double> %2413)
  %2435 = load double, ptr %2420, align 8, !tbaa !87
  %2436 = shufflevector <2 x double> %2429, <2 x double> poison, <2 x i32> <i32 1, i32 poison>
  %2437 = insertelement <2 x double> %2436, double %2435, i64 1
  %2438 = insertelement <2 x double> poison, double %2428, i64 0
  %2439 = shufflevector <2 x double> %2438, <2 x double> poison, <2 x i32> zeroinitializer
  %2440 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2437, <2 x double> %2439, <2 x double> %2414)
  %2441 = add nuw nsw i64 %2412, 1
  %2442 = icmp eq i64 %2441, %2403
  br i1 %2442, label %2404, label %2411

2443:                                             ; preds = %2486, %2394, %2404
  %2444 = phi double [ %2407, %2404 ], [ 0.000000e+00, %2394 ], [ %2407, %2486 ]
  %2445 = phi double [ %2408, %2404 ], [ 0.000000e+00, %2394 ], [ %2408, %2486 ]
  %2446 = phi <4 x double> [ zeroinitializer, %2404 ], [ zeroinitializer, %2394 ], [ %2516, %2486 ]
  %2447 = phi <4 x double> [ %2434, %2404 ], [ zeroinitializer, %2394 ], [ %2434, %2486 ]
  %2448 = phi <2 x double> [ zeroinitializer, %2404 ], [ zeroinitializer, %2394 ], [ %2511, %2486 ]
  %2449 = sitofp i32 %2397 to double
  %2450 = getelementptr inbounds double, ptr %6, i64 22
  %2451 = load double, ptr %2450, align 8, !tbaa !19
  %2452 = fadd double %2451, %2449
  store double %2452, ptr %2450, align 8, !tbaa !19
  %2453 = getelementptr inbounds double, ptr %6, i64 4
  %2454 = load <4 x double>, ptr %2453, align 8, !tbaa !19
  %2455 = shufflevector <4 x double> %2447, <4 x double> poison, <4 x i32> <i32 1, i32 2, i32 poison, i32 3>
  %2456 = shufflevector <4 x double> %2455, <4 x double> poison, <4 x i32> <i32 0, i32 1, i32 0, i32 3>
  %2457 = fadd <4 x double> %2456, %2454
  store <4 x double> %2457, ptr %2453, align 8, !tbaa !19
  %2458 = getelementptr inbounds double, ptr %6, i64 8
  %2459 = load <4 x double>, ptr %2458, align 8, !tbaa !19
  %2460 = insertelement <4 x double> poison, double %2444, i64 0
  %2461 = shufflevector <4 x double> %2460, <4 x double> %2447, <4 x i32> <i32 0, i32 6, i32 poison, i32 poison>
  %2462 = insertelement <4 x double> %2461, double %2445, i64 3
  %2463 = shufflevector <4 x double> %2462, <4 x double> poison, <4 x i32> <i32 0, i32 1, i32 0, i32 3>
  %2464 = fadd <4 x double> %2463, %2459
  store <4 x double> %2464, ptr %2458, align 8, !tbaa !19
  %2465 = load <4 x double>, ptr %6, align 8, !tbaa !19
  %2466 = shufflevector <2 x double> %2398, <2 x double> poison, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>
  %2467 = insertelement <4 x double> %2466, double %2396, i64 2
  %2468 = shufflevector <4 x double> %2467, <4 x double> %2447, <4 x i32> <i32 0, i32 1, i32 2, i32 4>
  %2469 = fadd <4 x double> %2468, %2465
  store <4 x double> %2469, ptr %6, align 8, !tbaa !19
  %2470 = getelementptr inbounds double, ptr %6, i64 12
  %2471 = load <4 x double>, ptr %2470, align 8, !tbaa !19
  %2472 = shufflevector <2 x double> %2448, <2 x double> poison, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>
  %2473 = shufflevector <4 x double> %2472, <4 x double> %2446, <4 x i32> <i32 0, i32 1, i32 7, i32 poison>
  %2474 = shufflevector <4 x double> %2473, <4 x double> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 1>
  %2475 = fadd <4 x double> %2474, %2471
  store <4 x double> %2475, ptr %2470, align 8, !tbaa !19
  %2476 = getelementptr inbounds double, ptr %6, i64 16
  %2477 = load <4 x double>, ptr %2476, align 8, !tbaa !19
  %2478 = shufflevector <4 x double> %2446, <4 x double> poison, <4 x i32> <i32 2, i32 1, i32 3, i32 poison>
  %2479 = shufflevector <4 x double> %2478, <4 x double> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 1>
  %2480 = fadd <4 x double> %2479, %2477
  store <4 x double> %2480, ptr %2476, align 8, !tbaa !19
  %2481 = getelementptr inbounds double, ptr %6, i64 20
  %2482 = load double, ptr %2481, align 8, !tbaa !19
  %2483 = extractelement <4 x double> %2446, i64 0
  %2484 = fadd double %2483, %2482
  store double %2484, ptr %2481, align 8, !tbaa !19
  %2485 = icmp eq ptr %2395, null
  br i1 %2485, label %2520, label %2519

2486:                                             ; preds = %2409, %2486
  %2487 = phi i64 [ 0, %2409 ], [ %2517, %2486 ]
  %2488 = phi <4 x double> [ zeroinitializer, %2409 ], [ %2516, %2486 ]
  %2489 = phi <2 x double> [ zeroinitializer, %2409 ], [ %2511, %2486 ]
  %2490 = getelementptr inbounds %class.Vector, ptr %632, i64 %2487
  %2491 = getelementptr inbounds %class.Vector, ptr %2406, i64 %2487
  %2492 = getelementptr inbounds %class.Vector, ptr %632, i64 %2487, i32 1
  %2493 = load <2 x double>, ptr %2490, align 8, !tbaa !19
  %2494 = load <2 x double>, ptr %2491, align 8, !tbaa !19
  %2495 = fadd <2 x double> %2493, %2494
  store <2 x double> %2495, ptr %2491, align 8, !tbaa !19
  %2496 = getelementptr inbounds %class.Vector, ptr %632, i64 %2487, i32 2
  %2497 = load double, ptr %2496, align 8, !tbaa !87
  %2498 = getelementptr inbounds %class.Vector, ptr %2406, i64 %2487, i32 2
  %2499 = load double, ptr %2498, align 8, !tbaa !87
  %2500 = fadd double %2497, %2499
  store double %2500, ptr %2498, align 8, !tbaa !87
  %2501 = load double, ptr %2490, align 8, !tbaa !191
  %2502 = getelementptr inbounds %struct.CompAtom, ptr %40, i64 %2487
  %2503 = load double, ptr %2502, align 8, !tbaa !67
  %2504 = getelementptr inbounds %class.Vector, ptr %2502, i64 0, i32 1
  %2505 = load <2 x double>, ptr %2504, align 8, !tbaa !19
  %2506 = shufflevector <2 x double> %2505, <2 x double> poison, <4 x i32> <i32 1, i32 1, i32 0, i32 1>
  %2507 = insertelement <2 x double> poison, double %2501, i64 0
  %2508 = shufflevector <2 x double> %2507, <2 x double> poison, <2 x i32> zeroinitializer
  %2509 = shufflevector <2 x double> %2505, <2 x double> poison, <2 x i32> <i32 poison, i32 0>
  %2510 = insertelement <2 x double> %2509, double %2503, i64 0
  %2511 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2508, <2 x double> %2510, <2 x double> %2489)
  %2512 = load <2 x double>, ptr %2492, align 8, !tbaa !19
  %2513 = shufflevector <2 x double> %2512, <2 x double> poison, <4 x i32> <i32 1, i32 0, i32 poison, i32 poison>
  %2514 = insertelement <4 x double> %2513, double %2501, i64 3
  %2515 = shufflevector <4 x double> %2514, <4 x double> poison, <4 x i32> <i32 0, i32 1, i32 1, i32 3>
  %2516 = tail call <4 x double> @llvm.fmuladd.v4f64(<4 x double> %2515, <4 x double> %2506, <4 x double> %2488)
  %2517 = add nuw nsw i64 %2487, 1
  %2518 = icmp eq i64 %2517, %2410
  br i1 %2518, label %2443, label %2486

2519:                                             ; preds = %2443
  tail call void @_ZdaPv(ptr noundef nonnull %2395) #10
  br label %2520

2520:                                             ; preds = %2443, %2519, %1
  ret void
}

; Function Attrs: sspstrong uwtable
define dso_local void @_ZN20ComputeNonbondedUtil25calc_self_merge_fullelectEP9nonbonded(ptr nocapture noundef readonly %0) local_unnamed_addr #0 align 2 {
  %2 = load i32, ptr @_ZN20ComputeNonbondedUtil8commOnlyE, align 4, !tbaa !5
  %3 = icmp eq i32 %2, 0
  br i1 %3, label %4, label %2280

4:                                                ; preds = %1
  %5 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 7
  %6 = load ptr, ptr %5, align 8, !tbaa !9
  %7 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 10
  %8 = load ptr, ptr %7, align 8, !tbaa !14
  %9 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 11
  %10 = load i32, ptr %9, align 8, !tbaa !15
  %11 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 12
  %12 = load i32, ptr %11, align 4, !tbaa !16
  %13 = getelementptr inbounds %class.Pairlists, ptr %8, i64 0, i32 1
  store i32 0, ptr %13, align 8, !tbaa !17
  %14 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 6
  %15 = load <2 x double>, ptr %14, align 8, !tbaa !19
  %16 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 6, i32 2
  %17 = load double, ptr %16, align 8, !tbaa !20
  %18 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 13
  %19 = load double, ptr %18, align 8, !tbaa !21
  %20 = fmul double %19, %19
  %21 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 14
  %22 = load double, ptr %21, align 8, !tbaa !22
  %23 = fmul double %22, %22
  %24 = load double, ptr @_ZN20ComputeNonbondedUtil12dielectric_1E, align 8, !tbaa !19
  %25 = load ptr, ptr @_ZN20ComputeNonbondedUtil7ljTableE, align 8, !tbaa !23
  %26 = load ptr, ptr @_ZN20ComputeNonbondedUtil3molE, align 8, !tbaa !23
  %27 = load ptr, ptr @_ZN20ComputeNonbondedUtil13table_noshortE, align 8, !tbaa !23
  %28 = load double, ptr @_ZN20ComputeNonbondedUtil7scalingE, align 8, !tbaa !19
  %29 = load double, ptr @_ZN20ComputeNonbondedUtil7scale14E, align 8, !tbaa !19
  %30 = fsub double 1.000000e+00, %29
  %31 = load double, ptr @_ZN20ComputeNonbondedUtil8r2_deltaE, align 8, !tbaa !19
  %32 = load i32, ptr @_ZN20ComputeNonbondedUtil12r2_delta_expE, align 4, !tbaa !5
  %33 = shl i32 %32, 6
  %34 = add i32 %33, -65472
  %35 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 5
  %36 = load i32, ptr %35, align 8, !tbaa !5
  %37 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 5, i64 1
  %38 = load i32, ptr %37, align 4, !tbaa !5
  %39 = load ptr, ptr %0, align 8, !tbaa !23
  %40 = getelementptr inbounds [2 x ptr], ptr %0, i64 0, i64 1
  %41 = load ptr, ptr %40, align 8, !tbaa !23
  %42 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 1
  %43 = load ptr, ptr %42, align 8, !tbaa !23
  %44 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 1, i64 1
  %45 = load ptr, ptr %44, align 8, !tbaa !23
  %46 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 9
  %47 = load ptr, ptr %46, align 8, !tbaa !24
  %48 = add nsw i32 %38, 5
  %49 = getelementptr inbounds %class.ResizeArray, ptr %47, i64 0, i32 1
  %50 = load ptr, ptr %49, align 8, !tbaa !25
  %51 = getelementptr inbounds %class.ResizeArrayRaw, ptr %50, i64 0, i32 2
  %52 = load i32, ptr %51, align 8, !tbaa !27
  %53 = icmp slt i32 %52, %48
  br i1 %53, label %54, label %92

54:                                               ; preds = %4
  %55 = getelementptr inbounds %class.ResizeArrayRaw, ptr %50, i64 0, i32 3
  %56 = load i32, ptr %55, align 4, !tbaa !30
  %57 = icmp slt i32 %56, %48
  br i1 %57, label %58, label %92

58:                                               ; preds = %54
  %59 = sitofp i32 %56 to float
  %60 = getelementptr inbounds %class.ResizeArrayRaw, ptr %50, i64 0, i32 5
  %61 = load float, ptr %60, align 4, !tbaa !31
  %62 = fmul float %61, %59
  %63 = fptosi float %62 to i32
  %64 = tail call i32 @llvm.smax.i32(i32 %63, i32 %48)
  %65 = sub nsw i32 %64, %56
  %66 = getelementptr inbounds %class.ResizeArrayRaw, ptr %50, i64 0, i32 6
  %67 = load i32, ptr %66, align 8, !tbaa !32
  %68 = icmp slt i32 %65, %67
  %69 = add nsw i32 %67, %56
  %70 = select i1 %68, i32 %69, i32 %64
  %71 = sext i32 %70 to i64
  %72 = shl nsw i64 %71, 1
  %73 = add nsw i64 %72, 31
  %74 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %73) #9
  %75 = getelementptr inbounds i8, ptr %74, i64 31
  %76 = ptrtoint ptr %75 to i64
  %77 = and i64 %76, 31
  %78 = sub nsw i64 0, %77
  %79 = getelementptr inbounds i8, ptr %75, i64 %78
  %80 = load ptr, ptr %50, align 8, !tbaa !33
  %81 = sext i32 %52 to i64
  %82 = shl nsw i64 %81, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %79, ptr align 1 %80, i64 %82, i1 false)
  %83 = icmp eq i32 %56, 0
  br i1 %83, label %89, label %84

84:                                               ; preds = %58
  %85 = getelementptr inbounds %class.ResizeArrayRaw, ptr %50, i64 0, i32 1
  %86 = load ptr, ptr %85, align 8, !tbaa !34
  %87 = icmp eq ptr %86, null
  br i1 %87, label %89, label %88

88:                                               ; preds = %84
  tail call void @_ZdaPv(ptr noundef nonnull %86) #10
  br label %89

89:                                               ; preds = %88, %84, %58
  %90 = getelementptr inbounds %class.ResizeArrayRaw, ptr %50, i64 0, i32 1
  store ptr %74, ptr %90, align 8, !tbaa !34
  store ptr %79, ptr %50, align 8, !tbaa !33
  store i32 %70, ptr %55, align 4, !tbaa !30
  %91 = load ptr, ptr %49, align 8, !tbaa !25
  br label %92

92:                                               ; preds = %4, %54, %89
  %93 = phi ptr [ %50, %4 ], [ %50, %54 ], [ %91, %89 ]
  store i32 %48, ptr %51, align 8, !tbaa !27
  %94 = load ptr, ptr %93, align 8, !tbaa !33
  %95 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %47, i64 0, i32 1, i32 1
  %96 = load ptr, ptr %95, align 8, !tbaa !35
  %97 = getelementptr inbounds %class.ResizeArrayRaw.23, ptr %96, i64 0, i32 2
  %98 = load i32, ptr %97, align 8, !tbaa !37
  %99 = icmp slt i32 %98, %48
  br i1 %99, label %100, label %138

100:                                              ; preds = %92
  %101 = getelementptr inbounds %class.ResizeArrayRaw.23, ptr %96, i64 0, i32 3
  %102 = load i32, ptr %101, align 4, !tbaa !39
  %103 = icmp slt i32 %102, %48
  br i1 %103, label %104, label %138

104:                                              ; preds = %100
  %105 = sitofp i32 %102 to float
  %106 = getelementptr inbounds %class.ResizeArrayRaw.23, ptr %96, i64 0, i32 5
  %107 = load float, ptr %106, align 4, !tbaa !40
  %108 = fmul float %107, %105
  %109 = fptosi float %108 to i32
  %110 = tail call i32 @llvm.smax.i32(i32 %109, i32 %48)
  %111 = sub nsw i32 %110, %102
  %112 = getelementptr inbounds %class.ResizeArrayRaw.23, ptr %96, i64 0, i32 6
  %113 = load i32, ptr %112, align 8, !tbaa !41
  %114 = icmp slt i32 %111, %113
  %115 = add nsw i32 %113, %102
  %116 = select i1 %114, i32 %115, i32 %110
  %117 = sext i32 %116 to i64
  %118 = shl nsw i64 %117, 3
  %119 = add nsw i64 %118, 31
  %120 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %119) #9
  %121 = getelementptr inbounds i8, ptr %120, i64 31
  %122 = ptrtoint ptr %121 to i64
  %123 = and i64 %122, 31
  %124 = sub nsw i64 0, %123
  %125 = getelementptr inbounds i8, ptr %121, i64 %124
  %126 = load ptr, ptr %96, align 8, !tbaa !42
  %127 = sext i32 %98 to i64
  %128 = shl nsw i64 %127, 3
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %125, ptr align 1 %126, i64 %128, i1 false)
  %129 = icmp eq i32 %102, 0
  br i1 %129, label %135, label %130

130:                                              ; preds = %104
  %131 = getelementptr inbounds %class.ResizeArrayRaw.23, ptr %96, i64 0, i32 1
  %132 = load ptr, ptr %131, align 8, !tbaa !43
  %133 = icmp eq ptr %132, null
  br i1 %133, label %135, label %134

134:                                              ; preds = %130
  tail call void @_ZdaPv(ptr noundef nonnull %132) #10
  br label %135

135:                                              ; preds = %134, %130, %104
  %136 = getelementptr inbounds %class.ResizeArrayRaw.23, ptr %96, i64 0, i32 1
  store ptr %120, ptr %136, align 8, !tbaa !43
  store ptr %125, ptr %96, align 8, !tbaa !42
  store i32 %116, ptr %101, align 4, !tbaa !39
  %137 = load ptr, ptr %95, align 8, !tbaa !35
  br label %138

138:                                              ; preds = %92, %100, %135
  %139 = phi ptr [ %96, %92 ], [ %96, %100 ], [ %137, %135 ]
  store i32 %48, ptr %97, align 8, !tbaa !37
  %140 = load ptr, ptr %139, align 8, !tbaa !42
  %141 = getelementptr inbounds i32, ptr %140, i64 1
  %142 = icmp eq i32 %10, 0
  %143 = icmp ne i32 %12, 0
  %144 = select i1 %142, i1 %143, i1 false
  %145 = select i1 %144, i32 0, i32 %48
  %146 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %47, i64 0, i32 2, i32 1
  %147 = load ptr, ptr %146, align 8, !tbaa !25
  %148 = getelementptr inbounds %class.ResizeArrayRaw, ptr %147, i64 0, i32 2
  %149 = load i32, ptr %148, align 8, !tbaa !27
  %150 = icmp slt i32 %149, %145
  br i1 %150, label %151, label %189

151:                                              ; preds = %138
  %152 = getelementptr inbounds %class.ResizeArrayRaw, ptr %147, i64 0, i32 3
  %153 = load i32, ptr %152, align 4, !tbaa !30
  %154 = icmp slt i32 %153, %145
  br i1 %154, label %155, label %189

155:                                              ; preds = %151
  %156 = sitofp i32 %153 to float
  %157 = getelementptr inbounds %class.ResizeArrayRaw, ptr %147, i64 0, i32 5
  %158 = load float, ptr %157, align 4, !tbaa !31
  %159 = fmul float %158, %156
  %160 = fptosi float %159 to i32
  %161 = tail call i32 @llvm.smax.i32(i32 %160, i32 %145)
  %162 = sub nsw i32 %161, %153
  %163 = getelementptr inbounds %class.ResizeArrayRaw, ptr %147, i64 0, i32 6
  %164 = load i32, ptr %163, align 8, !tbaa !32
  %165 = icmp slt i32 %162, %164
  %166 = add nsw i32 %164, %153
  %167 = select i1 %165, i32 %166, i32 %161
  %168 = sext i32 %167 to i64
  %169 = shl nsw i64 %168, 1
  %170 = add nsw i64 %169, 31
  %171 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %170) #9
  %172 = getelementptr inbounds i8, ptr %171, i64 31
  %173 = ptrtoint ptr %172 to i64
  %174 = and i64 %173, 31
  %175 = sub nsw i64 0, %174
  %176 = getelementptr inbounds i8, ptr %172, i64 %175
  %177 = load ptr, ptr %147, align 8, !tbaa !33
  %178 = sext i32 %149 to i64
  %179 = shl nsw i64 %178, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %176, ptr align 1 %177, i64 %179, i1 false)
  %180 = icmp eq i32 %153, 0
  br i1 %180, label %186, label %181

181:                                              ; preds = %155
  %182 = getelementptr inbounds %class.ResizeArrayRaw, ptr %147, i64 0, i32 1
  %183 = load ptr, ptr %182, align 8, !tbaa !34
  %184 = icmp eq ptr %183, null
  br i1 %184, label %186, label %185

185:                                              ; preds = %181
  tail call void @_ZdaPv(ptr noundef nonnull %183) #10
  br label %186

186:                                              ; preds = %185, %181, %155
  %187 = getelementptr inbounds %class.ResizeArrayRaw, ptr %147, i64 0, i32 1
  store ptr %171, ptr %187, align 8, !tbaa !34
  store ptr %176, ptr %147, align 8, !tbaa !33
  store i32 %167, ptr %152, align 4, !tbaa !30
  %188 = load ptr, ptr %146, align 8, !tbaa !25
  br label %189

189:                                              ; preds = %138, %151, %186
  %190 = phi ptr [ %147, %138 ], [ %147, %151 ], [ %188, %186 ]
  store i32 %145, ptr %148, align 8, !tbaa !27
  %191 = load ptr, ptr %190, align 8, !tbaa !33
  %192 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %47, i64 0, i32 3, i32 1
  %193 = load ptr, ptr %192, align 8, !tbaa !25
  %194 = getelementptr inbounds %class.ResizeArrayRaw, ptr %193, i64 0, i32 2
  %195 = load i32, ptr %194, align 8, !tbaa !27
  %196 = icmp slt i32 %195, %145
  br i1 %196, label %197, label %235

197:                                              ; preds = %189
  %198 = getelementptr inbounds %class.ResizeArrayRaw, ptr %193, i64 0, i32 3
  %199 = load i32, ptr %198, align 4, !tbaa !30
  %200 = icmp slt i32 %199, %145
  br i1 %200, label %201, label %235

201:                                              ; preds = %197
  %202 = sitofp i32 %199 to float
  %203 = getelementptr inbounds %class.ResizeArrayRaw, ptr %193, i64 0, i32 5
  %204 = load float, ptr %203, align 4, !tbaa !31
  %205 = fmul float %204, %202
  %206 = fptosi float %205 to i32
  %207 = tail call i32 @llvm.smax.i32(i32 %206, i32 %145)
  %208 = sub nsw i32 %207, %199
  %209 = getelementptr inbounds %class.ResizeArrayRaw, ptr %193, i64 0, i32 6
  %210 = load i32, ptr %209, align 8, !tbaa !32
  %211 = icmp slt i32 %208, %210
  %212 = add nsw i32 %210, %199
  %213 = select i1 %211, i32 %212, i32 %207
  %214 = sext i32 %213 to i64
  %215 = shl nsw i64 %214, 1
  %216 = add nsw i64 %215, 31
  %217 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %216) #9
  %218 = getelementptr inbounds i8, ptr %217, i64 31
  %219 = ptrtoint ptr %218 to i64
  %220 = and i64 %219, 31
  %221 = sub nsw i64 0, %220
  %222 = getelementptr inbounds i8, ptr %218, i64 %221
  %223 = load ptr, ptr %193, align 8, !tbaa !33
  %224 = sext i32 %195 to i64
  %225 = shl nsw i64 %224, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %222, ptr align 1 %223, i64 %225, i1 false)
  %226 = icmp eq i32 %199, 0
  br i1 %226, label %232, label %227

227:                                              ; preds = %201
  %228 = getelementptr inbounds %class.ResizeArrayRaw, ptr %193, i64 0, i32 1
  %229 = load ptr, ptr %228, align 8, !tbaa !34
  %230 = icmp eq ptr %229, null
  br i1 %230, label %232, label %231

231:                                              ; preds = %227
  tail call void @_ZdaPv(ptr noundef nonnull %229) #10
  br label %232

232:                                              ; preds = %231, %227, %201
  %233 = getelementptr inbounds %class.ResizeArrayRaw, ptr %193, i64 0, i32 1
  store ptr %217, ptr %233, align 8, !tbaa !34
  store ptr %222, ptr %193, align 8, !tbaa !33
  store i32 %213, ptr %198, align 4, !tbaa !30
  %234 = load ptr, ptr %192, align 8, !tbaa !25
  br label %235

235:                                              ; preds = %189, %197, %232
  %236 = phi ptr [ %193, %189 ], [ %193, %197 ], [ %234, %232 ]
  store i32 %145, ptr %194, align 8, !tbaa !27
  %237 = load ptr, ptr %236, align 8, !tbaa !33
  %238 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %47, i64 0, i32 4, i32 1
  %239 = load ptr, ptr %238, align 8, !tbaa !25
  %240 = getelementptr inbounds %class.ResizeArrayRaw, ptr %239, i64 0, i32 2
  %241 = load i32, ptr %240, align 8, !tbaa !27
  %242 = icmp slt i32 %241, %145
  br i1 %242, label %243, label %281

243:                                              ; preds = %235
  %244 = getelementptr inbounds %class.ResizeArrayRaw, ptr %239, i64 0, i32 3
  %245 = load i32, ptr %244, align 4, !tbaa !30
  %246 = icmp slt i32 %245, %145
  br i1 %246, label %247, label %281

247:                                              ; preds = %243
  %248 = sitofp i32 %245 to float
  %249 = getelementptr inbounds %class.ResizeArrayRaw, ptr %239, i64 0, i32 5
  %250 = load float, ptr %249, align 4, !tbaa !31
  %251 = fmul float %250, %248
  %252 = fptosi float %251 to i32
  %253 = tail call i32 @llvm.smax.i32(i32 %252, i32 %145)
  %254 = sub nsw i32 %253, %245
  %255 = getelementptr inbounds %class.ResizeArrayRaw, ptr %239, i64 0, i32 6
  %256 = load i32, ptr %255, align 8, !tbaa !32
  %257 = icmp slt i32 %254, %256
  %258 = add nsw i32 %256, %245
  %259 = select i1 %257, i32 %258, i32 %253
  %260 = sext i32 %259 to i64
  %261 = shl nsw i64 %260, 1
  %262 = add nsw i64 %261, 31
  %263 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %262) #9
  %264 = getelementptr inbounds i8, ptr %263, i64 31
  %265 = ptrtoint ptr %264 to i64
  %266 = and i64 %265, 31
  %267 = sub nsw i64 0, %266
  %268 = getelementptr inbounds i8, ptr %264, i64 %267
  %269 = load ptr, ptr %239, align 8, !tbaa !33
  %270 = sext i32 %241 to i64
  %271 = shl nsw i64 %270, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %268, ptr align 1 %269, i64 %271, i1 false)
  %272 = icmp eq i32 %245, 0
  br i1 %272, label %278, label %273

273:                                              ; preds = %247
  %274 = getelementptr inbounds %class.ResizeArrayRaw, ptr %239, i64 0, i32 1
  %275 = load ptr, ptr %274, align 8, !tbaa !34
  %276 = icmp eq ptr %275, null
  br i1 %276, label %278, label %277

277:                                              ; preds = %273
  tail call void @_ZdaPv(ptr noundef nonnull %275) #10
  br label %278

278:                                              ; preds = %277, %273, %247
  %279 = getelementptr inbounds %class.ResizeArrayRaw, ptr %239, i64 0, i32 1
  store ptr %263, ptr %279, align 8, !tbaa !34
  store ptr %268, ptr %239, align 8, !tbaa !33
  store i32 %259, ptr %244, align 4, !tbaa !30
  %280 = load ptr, ptr %238, align 8, !tbaa !25
  br label %281

281:                                              ; preds = %235, %243, %278
  %282 = phi ptr [ %239, %235 ], [ %239, %243 ], [ %280, %278 ]
  store i32 %145, ptr %240, align 8, !tbaa !27
  %283 = load ptr, ptr %282, align 8, !tbaa !33
  %284 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %47, i64 0, i32 5, i32 1
  %285 = load ptr, ptr %284, align 8, !tbaa !25
  %286 = getelementptr inbounds %class.ResizeArrayRaw, ptr %285, i64 0, i32 2
  %287 = load i32, ptr %286, align 8, !tbaa !27
  %288 = icmp slt i32 %287, %145
  br i1 %288, label %289, label %327

289:                                              ; preds = %281
  %290 = getelementptr inbounds %class.ResizeArrayRaw, ptr %285, i64 0, i32 3
  %291 = load i32, ptr %290, align 4, !tbaa !30
  %292 = icmp slt i32 %291, %145
  br i1 %292, label %293, label %327

293:                                              ; preds = %289
  %294 = sitofp i32 %291 to float
  %295 = getelementptr inbounds %class.ResizeArrayRaw, ptr %285, i64 0, i32 5
  %296 = load float, ptr %295, align 4, !tbaa !31
  %297 = fmul float %296, %294
  %298 = fptosi float %297 to i32
  %299 = tail call i32 @llvm.smax.i32(i32 %298, i32 %145)
  %300 = sub nsw i32 %299, %291
  %301 = getelementptr inbounds %class.ResizeArrayRaw, ptr %285, i64 0, i32 6
  %302 = load i32, ptr %301, align 8, !tbaa !32
  %303 = icmp slt i32 %300, %302
  %304 = add nsw i32 %302, %291
  %305 = select i1 %303, i32 %304, i32 %299
  %306 = sext i32 %305 to i64
  %307 = shl nsw i64 %306, 1
  %308 = add nsw i64 %307, 31
  %309 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %308) #9
  %310 = getelementptr inbounds i8, ptr %309, i64 31
  %311 = ptrtoint ptr %310 to i64
  %312 = and i64 %311, 31
  %313 = sub nsw i64 0, %312
  %314 = getelementptr inbounds i8, ptr %310, i64 %313
  %315 = load ptr, ptr %285, align 8, !tbaa !33
  %316 = sext i32 %287 to i64
  %317 = shl nsw i64 %316, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %314, ptr align 1 %315, i64 %317, i1 false)
  %318 = icmp eq i32 %291, 0
  br i1 %318, label %324, label %319

319:                                              ; preds = %293
  %320 = getelementptr inbounds %class.ResizeArrayRaw, ptr %285, i64 0, i32 1
  %321 = load ptr, ptr %320, align 8, !tbaa !34
  %322 = icmp eq ptr %321, null
  br i1 %322, label %324, label %323

323:                                              ; preds = %319
  tail call void @_ZdaPv(ptr noundef nonnull %321) #10
  br label %324

324:                                              ; preds = %323, %319, %293
  %325 = getelementptr inbounds %class.ResizeArrayRaw, ptr %285, i64 0, i32 1
  store ptr %309, ptr %325, align 8, !tbaa !34
  store ptr %314, ptr %285, align 8, !tbaa !33
  store i32 %305, ptr %290, align 4, !tbaa !30
  %326 = load ptr, ptr %284, align 8, !tbaa !25
  br label %327

327:                                              ; preds = %281, %289, %324
  %328 = phi ptr [ %285, %281 ], [ %285, %289 ], [ %326, %324 ]
  store i32 %145, ptr %286, align 8, !tbaa !27
  %329 = load ptr, ptr %328, align 8, !tbaa !33
  %330 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %47, i64 0, i32 6, i32 1
  %331 = load ptr, ptr %330, align 8, !tbaa !25
  %332 = getelementptr inbounds %class.ResizeArrayRaw, ptr %331, i64 0, i32 2
  %333 = load i32, ptr %332, align 8, !tbaa !27
  %334 = icmp slt i32 %333, %145
  br i1 %334, label %335, label %373

335:                                              ; preds = %327
  %336 = getelementptr inbounds %class.ResizeArrayRaw, ptr %331, i64 0, i32 3
  %337 = load i32, ptr %336, align 4, !tbaa !30
  %338 = icmp slt i32 %337, %145
  br i1 %338, label %339, label %373

339:                                              ; preds = %335
  %340 = sitofp i32 %337 to float
  %341 = getelementptr inbounds %class.ResizeArrayRaw, ptr %331, i64 0, i32 5
  %342 = load float, ptr %341, align 4, !tbaa !31
  %343 = fmul float %342, %340
  %344 = fptosi float %343 to i32
  %345 = tail call i32 @llvm.smax.i32(i32 %344, i32 %145)
  %346 = sub nsw i32 %345, %337
  %347 = getelementptr inbounds %class.ResizeArrayRaw, ptr %331, i64 0, i32 6
  %348 = load i32, ptr %347, align 8, !tbaa !32
  %349 = icmp slt i32 %346, %348
  %350 = add nsw i32 %348, %337
  %351 = select i1 %349, i32 %350, i32 %345
  %352 = sext i32 %351 to i64
  %353 = shl nsw i64 %352, 1
  %354 = add nsw i64 %353, 31
  %355 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %354) #9
  %356 = getelementptr inbounds i8, ptr %355, i64 31
  %357 = ptrtoint ptr %356 to i64
  %358 = and i64 %357, 31
  %359 = sub nsw i64 0, %358
  %360 = getelementptr inbounds i8, ptr %356, i64 %359
  %361 = load ptr, ptr %331, align 8, !tbaa !33
  %362 = sext i32 %333 to i64
  %363 = shl nsw i64 %362, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %360, ptr align 1 %361, i64 %363, i1 false)
  %364 = icmp eq i32 %337, 0
  br i1 %364, label %370, label %365

365:                                              ; preds = %339
  %366 = getelementptr inbounds %class.ResizeArrayRaw, ptr %331, i64 0, i32 1
  %367 = load ptr, ptr %366, align 8, !tbaa !34
  %368 = icmp eq ptr %367, null
  br i1 %368, label %370, label %369

369:                                              ; preds = %365
  tail call void @_ZdaPv(ptr noundef nonnull %367) #10
  br label %370

370:                                              ; preds = %369, %365, %339
  %371 = getelementptr inbounds %class.ResizeArrayRaw, ptr %331, i64 0, i32 1
  store ptr %355, ptr %371, align 8, !tbaa !34
  store ptr %360, ptr %331, align 8, !tbaa !33
  store i32 %351, ptr %336, align 4, !tbaa !30
  %372 = load ptr, ptr %330, align 8, !tbaa !25
  br label %373

373:                                              ; preds = %327, %335, %370
  %374 = phi ptr [ %331, %327 ], [ %331, %335 ], [ %372, %370 ]
  store i32 %145, ptr %332, align 8, !tbaa !27
  %375 = load ptr, ptr %374, align 8, !tbaa !33
  %376 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %47, i64 0, i32 15, i32 1
  %377 = load ptr, ptr %376, align 8, !tbaa !25
  %378 = getelementptr inbounds %class.ResizeArrayRaw, ptr %377, i64 0, i32 2
  %379 = load i32, ptr %378, align 8, !tbaa !27
  %380 = icmp slt i32 %379, %145
  br i1 %380, label %381, label %419

381:                                              ; preds = %373
  %382 = getelementptr inbounds %class.ResizeArrayRaw, ptr %377, i64 0, i32 3
  %383 = load i32, ptr %382, align 4, !tbaa !30
  %384 = icmp slt i32 %383, %145
  br i1 %384, label %385, label %419

385:                                              ; preds = %381
  %386 = sitofp i32 %383 to float
  %387 = getelementptr inbounds %class.ResizeArrayRaw, ptr %377, i64 0, i32 5
  %388 = load float, ptr %387, align 4, !tbaa !31
  %389 = fmul float %388, %386
  %390 = fptosi float %389 to i32
  %391 = tail call i32 @llvm.smax.i32(i32 %390, i32 %145)
  %392 = sub nsw i32 %391, %383
  %393 = getelementptr inbounds %class.ResizeArrayRaw, ptr %377, i64 0, i32 6
  %394 = load i32, ptr %393, align 8, !tbaa !32
  %395 = icmp slt i32 %392, %394
  %396 = add nsw i32 %394, %383
  %397 = select i1 %395, i32 %396, i32 %391
  %398 = sext i32 %397 to i64
  %399 = shl nsw i64 %398, 1
  %400 = add nsw i64 %399, 31
  %401 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %400) #9
  %402 = getelementptr inbounds i8, ptr %401, i64 31
  %403 = ptrtoint ptr %402 to i64
  %404 = and i64 %403, 31
  %405 = sub nsw i64 0, %404
  %406 = getelementptr inbounds i8, ptr %402, i64 %405
  %407 = load ptr, ptr %377, align 8, !tbaa !33
  %408 = sext i32 %379 to i64
  %409 = shl nsw i64 %408, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %406, ptr align 1 %407, i64 %409, i1 false)
  %410 = icmp eq i32 %383, 0
  br i1 %410, label %416, label %411

411:                                              ; preds = %385
  %412 = getelementptr inbounds %class.ResizeArrayRaw, ptr %377, i64 0, i32 1
  %413 = load ptr, ptr %412, align 8, !tbaa !34
  %414 = icmp eq ptr %413, null
  br i1 %414, label %416, label %415

415:                                              ; preds = %411
  tail call void @_ZdaPv(ptr noundef nonnull %413) #10
  br label %416

416:                                              ; preds = %415, %411, %385
  %417 = getelementptr inbounds %class.ResizeArrayRaw, ptr %377, i64 0, i32 1
  store ptr %401, ptr %417, align 8, !tbaa !34
  store ptr %406, ptr %377, align 8, !tbaa !33
  store i32 %397, ptr %382, align 4, !tbaa !30
  %418 = load ptr, ptr %376, align 8, !tbaa !25
  br label %419

419:                                              ; preds = %373, %381, %416
  %420 = phi ptr [ %377, %373 ], [ %377, %381 ], [ %418, %416 ]
  store i32 %145, ptr %378, align 8, !tbaa !27
  %421 = load ptr, ptr %420, align 8, !tbaa !33
  %422 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %47, i64 0, i32 16, i32 1
  %423 = load ptr, ptr %422, align 8, !tbaa !25
  %424 = getelementptr inbounds %class.ResizeArrayRaw, ptr %423, i64 0, i32 2
  %425 = load i32, ptr %424, align 8, !tbaa !27
  %426 = icmp slt i32 %425, %145
  br i1 %426, label %427, label %465

427:                                              ; preds = %419
  %428 = getelementptr inbounds %class.ResizeArrayRaw, ptr %423, i64 0, i32 3
  %429 = load i32, ptr %428, align 4, !tbaa !30
  %430 = icmp slt i32 %429, %145
  br i1 %430, label %431, label %465

431:                                              ; preds = %427
  %432 = sitofp i32 %429 to float
  %433 = getelementptr inbounds %class.ResizeArrayRaw, ptr %423, i64 0, i32 5
  %434 = load float, ptr %433, align 4, !tbaa !31
  %435 = fmul float %434, %432
  %436 = fptosi float %435 to i32
  %437 = tail call i32 @llvm.smax.i32(i32 %436, i32 %145)
  %438 = sub nsw i32 %437, %429
  %439 = getelementptr inbounds %class.ResizeArrayRaw, ptr %423, i64 0, i32 6
  %440 = load i32, ptr %439, align 8, !tbaa !32
  %441 = icmp slt i32 %438, %440
  %442 = add nsw i32 %440, %429
  %443 = select i1 %441, i32 %442, i32 %437
  %444 = sext i32 %443 to i64
  %445 = shl nsw i64 %444, 1
  %446 = add nsw i64 %445, 31
  %447 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %446) #9
  %448 = getelementptr inbounds i8, ptr %447, i64 31
  %449 = ptrtoint ptr %448 to i64
  %450 = and i64 %449, 31
  %451 = sub nsw i64 0, %450
  %452 = getelementptr inbounds i8, ptr %448, i64 %451
  %453 = load ptr, ptr %423, align 8, !tbaa !33
  %454 = sext i32 %425 to i64
  %455 = shl nsw i64 %454, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %452, ptr align 1 %453, i64 %455, i1 false)
  %456 = icmp eq i32 %429, 0
  br i1 %456, label %462, label %457

457:                                              ; preds = %431
  %458 = getelementptr inbounds %class.ResizeArrayRaw, ptr %423, i64 0, i32 1
  %459 = load ptr, ptr %458, align 8, !tbaa !34
  %460 = icmp eq ptr %459, null
  br i1 %460, label %462, label %461

461:                                              ; preds = %457
  tail call void @_ZdaPv(ptr noundef nonnull %459) #10
  br label %462

462:                                              ; preds = %461, %457, %431
  %463 = getelementptr inbounds %class.ResizeArrayRaw, ptr %423, i64 0, i32 1
  store ptr %447, ptr %463, align 8, !tbaa !34
  store ptr %452, ptr %423, align 8, !tbaa !33
  store i32 %443, ptr %428, align 4, !tbaa !30
  %464 = load ptr, ptr %422, align 8, !tbaa !25
  br label %465

465:                                              ; preds = %419, %427, %462
  %466 = phi ptr [ %423, %419 ], [ %423, %427 ], [ %464, %462 ]
  store i32 %145, ptr %424, align 8, !tbaa !27
  %467 = load ptr, ptr %466, align 8, !tbaa !33
  br i1 %144, label %609, label %468

468:                                              ; preds = %465
  %469 = icmp sgt i32 %38, 0
  br i1 %469, label %470, label %600

470:                                              ; preds = %468
  %471 = zext i32 %38 to i64
  %472 = and i64 %471, 1
  %473 = icmp eq i32 %38, 1
  br i1 %473, label %506, label %474

474:                                              ; preds = %470
  %475 = and i64 %471, 4294967294
  br label %476

476:                                              ; preds = %501, %474
  %477 = phi i64 [ 0, %474 ], [ %503, %501 ]
  %478 = phi i32 [ 0, %474 ], [ %502, %501 ]
  %479 = phi i64 [ 0, %474 ], [ %504, %501 ]
  %480 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %477, i32 4
  %481 = load i8, ptr %480, align 1
  %482 = and i8 %481, 7
  %483 = icmp eq i8 %482, 0
  br i1 %483, label %489, label %484

484:                                              ; preds = %476
  %485 = trunc i64 %477 to i16
  %486 = add nsw i32 %478, 1
  %487 = sext i32 %478 to i64
  %488 = getelementptr inbounds i16, ptr %191, i64 %487
  store i16 %485, ptr %488, align 2, !tbaa !44
  br label %489

489:                                              ; preds = %476, %484
  %490 = phi i32 [ %486, %484 ], [ %478, %476 ]
  %491 = or i64 %477, 1
  %492 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %491, i32 4
  %493 = load i8, ptr %492, align 1
  %494 = and i8 %493, 7
  %495 = icmp eq i8 %494, 0
  br i1 %495, label %501, label %496

496:                                              ; preds = %489
  %497 = trunc i64 %491 to i16
  %498 = add nsw i32 %490, 1
  %499 = sext i32 %490 to i64
  %500 = getelementptr inbounds i16, ptr %191, i64 %499
  store i16 %497, ptr %500, align 2, !tbaa !44
  br label %501

501:                                              ; preds = %496, %489
  %502 = phi i32 [ %498, %496 ], [ %490, %489 ]
  %503 = add nuw nsw i64 %477, 2
  %504 = add i64 %479, 2
  %505 = icmp eq i64 %504, %475
  br i1 %505, label %506, label %476

506:                                              ; preds = %501, %470
  %507 = phi i32 [ undef, %470 ], [ %502, %501 ]
  %508 = phi i64 [ 0, %470 ], [ %503, %501 ]
  %509 = phi i32 [ 0, %470 ], [ %502, %501 ]
  %510 = icmp eq i64 %472, 0
  br i1 %510, label %521, label %511

511:                                              ; preds = %506
  %512 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %508, i32 4
  %513 = load i8, ptr %512, align 1
  %514 = and i8 %513, 7
  %515 = icmp eq i8 %514, 0
  br i1 %515, label %521, label %516

516:                                              ; preds = %511
  %517 = trunc i64 %508 to i16
  %518 = add nsw i32 %509, 1
  %519 = sext i32 %509 to i64
  %520 = getelementptr inbounds i16, ptr %191, i64 %519
  store i16 %517, ptr %520, align 2, !tbaa !44
  br label %521

521:                                              ; preds = %511, %516, %506
  %522 = phi i32 [ %507, %506 ], [ %518, %516 ], [ %509, %511 ]
  %523 = icmp eq i32 %522, 0
  br i1 %523, label %531, label %524

524:                                              ; preds = %521
  %525 = add nsw i32 %522, -1
  %526 = sext i32 %525 to i64
  %527 = getelementptr inbounds i16, ptr %191, i64 %526
  %528 = load i16, ptr %527, align 2, !tbaa !44
  %529 = sext i32 %522 to i64
  %530 = getelementptr inbounds i16, ptr %191, i64 %529
  store i16 %528, ptr %530, align 2, !tbaa !44
  br label %531

531:                                              ; preds = %524, %521
  %532 = load i32, ptr @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4, !tbaa !5
  %533 = icmp ne i32 %532, 0
  %534 = icmp sgt i32 %522, 0
  %535 = and i1 %533, %534
  br i1 %535, label %536, label %600

536:                                              ; preds = %531
  %537 = zext i32 %522 to i64
  %538 = and i64 %537, 1
  %539 = icmp eq i32 %522, 1
  br i1 %539, label %574, label %540

540:                                              ; preds = %536
  %541 = and i64 %537, 4294967294
  br label %542

542:                                              ; preds = %569, %540
  %543 = phi i64 [ 0, %540 ], [ %571, %569 ]
  %544 = phi i32 [ 0, %540 ], [ %570, %569 ]
  %545 = phi i64 [ 0, %540 ], [ %572, %569 ]
  %546 = getelementptr inbounds i16, ptr %191, i64 %543
  %547 = load i16, ptr %546, align 2, !tbaa !44
  %548 = zext i16 %547 to i64
  %549 = getelementptr inbounds %struct.CompAtomExt, ptr %45, i64 %548
  %550 = load i32, ptr %549, align 4
  %551 = icmp sgt i32 %550, -1
  br i1 %551, label %552, label %556

552:                                              ; preds = %542
  %553 = add nsw i32 %544, 1
  %554 = sext i32 %544 to i64
  %555 = getelementptr inbounds i16, ptr %237, i64 %554
  store i16 %547, ptr %555, align 2, !tbaa !44
  br label %556

556:                                              ; preds = %542, %552
  %557 = phi i32 [ %544, %542 ], [ %553, %552 ]
  %558 = or i64 %543, 1
  %559 = getelementptr inbounds i16, ptr %191, i64 %558
  %560 = load i16, ptr %559, align 2, !tbaa !44
  %561 = zext i16 %560 to i64
  %562 = getelementptr inbounds %struct.CompAtomExt, ptr %45, i64 %561
  %563 = load i32, ptr %562, align 4
  %564 = icmp sgt i32 %563, -1
  br i1 %564, label %565, label %569

565:                                              ; preds = %556
  %566 = add nsw i32 %557, 1
  %567 = sext i32 %557 to i64
  %568 = getelementptr inbounds i16, ptr %237, i64 %567
  store i16 %560, ptr %568, align 2, !tbaa !44
  br label %569

569:                                              ; preds = %565, %556
  %570 = phi i32 [ %557, %556 ], [ %566, %565 ]
  %571 = add nuw nsw i64 %543, 2
  %572 = add i64 %545, 2
  %573 = icmp eq i64 %572, %541
  br i1 %573, label %574, label %542

574:                                              ; preds = %569, %536
  %575 = phi i32 [ undef, %536 ], [ %570, %569 ]
  %576 = phi i64 [ 0, %536 ], [ %571, %569 ]
  %577 = phi i32 [ 0, %536 ], [ %570, %569 ]
  %578 = icmp eq i64 %538, 0
  br i1 %578, label %590, label %579

579:                                              ; preds = %574
  %580 = getelementptr inbounds i16, ptr %191, i64 %576
  %581 = load i16, ptr %580, align 2, !tbaa !44
  %582 = zext i16 %581 to i64
  %583 = getelementptr inbounds %struct.CompAtomExt, ptr %45, i64 %582
  %584 = load i32, ptr %583, align 4
  %585 = icmp sgt i32 %584, -1
  br i1 %585, label %586, label %590

586:                                              ; preds = %579
  %587 = add nsw i32 %577, 1
  %588 = sext i32 %577 to i64
  %589 = getelementptr inbounds i16, ptr %237, i64 %588
  store i16 %581, ptr %589, align 2, !tbaa !44
  br label %590

590:                                              ; preds = %579, %586, %574
  %591 = phi i32 [ %575, %574 ], [ %577, %579 ], [ %587, %586 ]
  %592 = icmp eq i32 %591, 0
  br i1 %592, label %600, label %593

593:                                              ; preds = %590
  %594 = add nsw i32 %591, -1
  %595 = sext i32 %594 to i64
  %596 = getelementptr inbounds i16, ptr %237, i64 %595
  %597 = load i16, ptr %596, align 2, !tbaa !44
  %598 = sext i32 %591 to i64
  %599 = getelementptr inbounds i16, ptr %237, i64 %598
  store i16 %597, ptr %599, align 2, !tbaa !44
  br label %600

600:                                              ; preds = %468, %531, %593, %590
  %601 = phi i32 [ %522, %593 ], [ %522, %590 ], [ %522, %531 ], [ 0, %468 ]
  %602 = phi i32 [ %591, %593 ], [ 0, %590 ], [ 0, %531 ], [ 0, %468 ]
  %603 = load i32, ptr %13, align 8, !tbaa !17
  %604 = add nsw i32 %603, 1
  store i32 %604, ptr %13, align 8, !tbaa !17
  %605 = trunc i32 %36 to i16
  %606 = load ptr, ptr %8, align 8, !tbaa !46
  %607 = sext i32 %603 to i64
  %608 = getelementptr inbounds i16, ptr %606, i64 %607
  store i16 %605, ptr %608, align 2, !tbaa !44
  br label %619

609:                                              ; preds = %465
  %610 = load ptr, ptr %8, align 8, !tbaa !46
  %611 = load i32, ptr %13, align 8, !tbaa !17
  %612 = add nsw i32 %611, 1
  store i32 %612, ptr %13, align 8, !tbaa !17
  %613 = sext i32 %611 to i64
  %614 = getelementptr inbounds i16, ptr %610, i64 %613
  %615 = load i16, ptr %614, align 2, !tbaa !44
  %616 = zext i16 %615 to i32
  %617 = icmp eq i32 %36, %616
  br i1 %617, label %619, label %618

618:                                              ; preds = %609
  tail call void @_Z8NAMD_bugPKc(ptr noundef nonnull @.str)
  br label %619

619:                                              ; preds = %609, %618, %600
  %620 = phi i32 [ 0, %618 ], [ 0, %609 ], [ %601, %600 ]
  %621 = phi i32 [ 0, %618 ], [ 0, %609 ], [ %602, %600 ]
  %622 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %47, i64 0, i32 18, i32 1
  %623 = load ptr, ptr %622, align 8, !tbaa !172
  tail call void @_ZN14ResizeArrayRawI6VectorE6resizeEi(ptr noundef nonnull align 8 dereferenceable(36) %623, i32 noundef %36)
  %624 = load ptr, ptr %622, align 8, !tbaa !172
  %625 = load ptr, ptr %624, align 8, !tbaa !174
  %626 = sext i32 %36 to i64
  %627 = mul nsw i64 %626, 24
  tail call void @llvm.memset.p0.i64(ptr align 1 %625, i8 0, i64 %627, i1 false)
  %628 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 18
  %629 = load i32, ptr %628, align 4, !tbaa !48
  %630 = add nsw i32 %629, -1
  %631 = add nsw i32 %36, -1
  %632 = icmp sgt i32 %36, 1
  br i1 %632, label %633, label %2215

633:                                              ; preds = %619
  %634 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 16
  %635 = load i32, ptr %634, align 4, !tbaa !47
  %636 = getelementptr inbounds %class.Molecule, ptr %26, i64 0, i32 1
  %637 = getelementptr inbounds %class.Molecule, ptr %26, i64 0, i32 4
  %638 = getelementptr inbounds %class.Molecule, ptr %26, i64 0, i32 2
  %639 = getelementptr inbounds %class.Molecule, ptr %26, i64 0, i32 3
  %640 = ptrtoint ptr %421 to i64
  %641 = add nsw i32 %38, 10
  %642 = getelementptr inbounds %class.Pairlists, ptr %8, i64 0, i32 2
  %643 = ptrtoint ptr %467 to i64
  %644 = ptrtoint ptr %329 to i64
  %645 = ptrtoint ptr %375 to i64
  %646 = getelementptr inbounds %class.LJTable, ptr %25, i64 0, i32 1
  %647 = getelementptr inbounds %class.LJTable, ptr %25, i64 0, i32 2
  %648 = fneg double %28
  %649 = fneg double %30
  %650 = sext i32 %620 to i64
  %651 = sext i32 %621 to i64
  %652 = insertelement <2 x double> poison, double %23, i64 0
  %653 = shufflevector <2 x double> %652, <2 x double> poison, <2 x i32> zeroinitializer
  br label %654

654:                                              ; preds = %633, %2201
  %655 = phi i32 [ 0, %633 ], [ %2212, %2201 ]
  %656 = phi i32 [ 0, %633 ], [ %2213, %2201 ]
  %657 = phi ptr [ null, %633 ], [ %2210, %2201 ]
  %658 = phi ptr [ null, %633 ], [ %2209, %2201 ]
  %659 = phi ptr [ null, %633 ], [ %2208, %2201 ]
  %660 = phi i32 [ 0, %633 ], [ %2207, %2201 ]
  %661 = phi i32 [ 0, %633 ], [ %2206, %2201 ]
  %662 = phi i32 [ 0, %633 ], [ %2205, %2201 ]
  %663 = phi i32 [ 0, %633 ], [ %2204, %2201 ]
  %664 = phi i32 [ 0, %633 ], [ %2203, %2201 ]
  %665 = phi i32 [ %635, %633 ], [ %2202, %2201 ]
  %666 = sext i32 %656 to i64
  %667 = getelementptr inbounds %struct.CompAtom, ptr %39, i64 %666
  %668 = getelementptr inbounds %struct.CompAtomExt, ptr %43, i64 %666
  %669 = getelementptr inbounds %struct.CompAtom, ptr %39, i64 %666, i32 4
  %670 = load i8, ptr %669, align 1
  %671 = lshr i8 %670, 3
  %672 = and i8 %671, 15
  %673 = zext i8 %672 to i32
  %674 = icmp eq i8 %672, 0
  br i1 %674, label %681, label %675

675:                                              ; preds = %654
  %676 = icmp eq i32 %665, 0
  br i1 %676, label %681, label %677

677:                                              ; preds = %675
  %678 = add nsw i32 %665, -1
  %679 = add nsw i32 %656, -1
  %680 = add i32 %679, %673
  br label %2201

681:                                              ; preds = %675, %654
  %682 = phi i32 [ %665, %654 ], [ %630, %675 ]
  %683 = load <2 x double>, ptr %667, align 8, !tbaa !19
  %684 = fadd <2 x double> %15, %683
  %685 = getelementptr inbounds %class.Vector, ptr %667, i64 0, i32 2
  %686 = load double, ptr %685, align 8, !tbaa !49
  %687 = fadd double %17, %686
  %688 = add nsw i32 %656, %673
  %689 = select i1 %674, i32 %660, i32 %688
  br i1 %144, label %1856, label %690

690:                                              ; preds = %681
  %691 = load i32, ptr %668, align 4
  %692 = shl i32 %691, 2
  %693 = ashr exact i32 %692, 2
  %694 = load ptr, ptr %636, align 8, !tbaa !51
  %695 = sext i32 %693 to i64
  %696 = getelementptr inbounds %class.ExclusionCheck, ptr %694, i64 %695
  %697 = load i32, ptr %696, align 8, !tbaa !53
  %698 = getelementptr inbounds %class.ExclusionCheck, ptr %694, i64 %695, i32 1
  %699 = load i32, ptr %698, align 4, !tbaa !55
  %700 = getelementptr inbounds %class.ExclusionCheck, ptr %694, i64 %695, i32 2
  %701 = load ptr, ptr %700, align 8, !tbaa !56
  %702 = icmp eq ptr %701, null
  br i1 %702, label %707, label %703

703:                                              ; preds = %690
  %704 = sext i32 %697 to i64
  %705 = sub nsw i64 0, %704
  %706 = getelementptr inbounds i8, ptr %701, i64 %705
  br label %933

707:                                              ; preds = %690
  %708 = icmp eq ptr %657, null
  br i1 %708, label %796, label %709

709:                                              ; preds = %707
  %710 = load i32, ptr %658, align 4, !tbaa !5
  %711 = icmp slt i32 %710, 1
  br i1 %711, label %759, label %712

712:                                              ; preds = %709
  %713 = add nuw i32 %710, 1
  %714 = zext i32 %713 to i64
  %715 = add nsw i64 %714, -1
  %716 = add nsw i64 %714, -2
  %717 = and i64 %715, 3
  %718 = icmp ult i64 %716, 3
  br i1 %718, label %746, label %719

719:                                              ; preds = %712
  %720 = and i64 %715, -4
  br label %721

721:                                              ; preds = %721, %719
  %722 = phi i64 [ 1, %719 ], [ %743, %721 ]
  %723 = phi i64 [ 0, %719 ], [ %744, %721 ]
  %724 = getelementptr inbounds i32, ptr %658, i64 %722
  %725 = load i32, ptr %724, align 4, !tbaa !5
  %726 = sext i32 %725 to i64
  %727 = getelementptr inbounds i8, ptr %657, i64 %726
  store i8 0, ptr %727, align 1, !tbaa !57
  %728 = add nuw nsw i64 %722, 1
  %729 = getelementptr inbounds i32, ptr %658, i64 %728
  %730 = load i32, ptr %729, align 4, !tbaa !5
  %731 = sext i32 %730 to i64
  %732 = getelementptr inbounds i8, ptr %657, i64 %731
  store i8 0, ptr %732, align 1, !tbaa !57
  %733 = add nuw nsw i64 %722, 2
  %734 = getelementptr inbounds i32, ptr %658, i64 %733
  %735 = load i32, ptr %734, align 4, !tbaa !5
  %736 = sext i32 %735 to i64
  %737 = getelementptr inbounds i8, ptr %657, i64 %736
  store i8 0, ptr %737, align 1, !tbaa !57
  %738 = add nuw nsw i64 %722, 3
  %739 = getelementptr inbounds i32, ptr %658, i64 %738
  %740 = load i32, ptr %739, align 4, !tbaa !5
  %741 = sext i32 %740 to i64
  %742 = getelementptr inbounds i8, ptr %657, i64 %741
  store i8 0, ptr %742, align 1, !tbaa !57
  %743 = add nuw nsw i64 %722, 4
  %744 = add i64 %723, 4
  %745 = icmp eq i64 %744, %720
  br i1 %745, label %746, label %721

746:                                              ; preds = %721, %712
  %747 = phi i64 [ 1, %712 ], [ %743, %721 ]
  %748 = icmp eq i64 %717, 0
  br i1 %748, label %759, label %749

749:                                              ; preds = %746, %749
  %750 = phi i64 [ %756, %749 ], [ %747, %746 ]
  %751 = phi i64 [ %757, %749 ], [ 0, %746 ]
  %752 = getelementptr inbounds i32, ptr %658, i64 %750
  %753 = load i32, ptr %752, align 4, !tbaa !5
  %754 = sext i32 %753 to i64
  %755 = getelementptr inbounds i8, ptr %657, i64 %754
  store i8 0, ptr %755, align 1, !tbaa !57
  %756 = add nuw nsw i64 %750, 1
  %757 = add i64 %751, 1
  %758 = icmp eq i64 %757, %717
  br i1 %758, label %759, label %749, !llvm.loop !237

759:                                              ; preds = %746, %749, %709
  %760 = load i32, ptr %659, align 4, !tbaa !5
  %761 = icmp slt i32 %760, 1
  br i1 %761, label %816, label %762

762:                                              ; preds = %759
  %763 = add nuw i32 %760, 1
  %764 = zext i32 %763 to i64
  %765 = add nsw i64 %764, -1
  %766 = add nsw i64 %764, -2
  %767 = and i64 %765, 3
  %768 = icmp ult i64 %766, 3
  br i1 %768, label %803, label %769

769:                                              ; preds = %762
  %770 = and i64 %765, -4
  br label %771

771:                                              ; preds = %771, %769
  %772 = phi i64 [ 1, %769 ], [ %793, %771 ]
  %773 = phi i64 [ 0, %769 ], [ %794, %771 ]
  %774 = getelementptr inbounds i32, ptr %659, i64 %772
  %775 = load i32, ptr %774, align 4, !tbaa !5
  %776 = sext i32 %775 to i64
  %777 = getelementptr inbounds i8, ptr %657, i64 %776
  store i8 0, ptr %777, align 1, !tbaa !57
  %778 = add nuw nsw i64 %772, 1
  %779 = getelementptr inbounds i32, ptr %659, i64 %778
  %780 = load i32, ptr %779, align 4, !tbaa !5
  %781 = sext i32 %780 to i64
  %782 = getelementptr inbounds i8, ptr %657, i64 %781
  store i8 0, ptr %782, align 1, !tbaa !57
  %783 = add nuw nsw i64 %772, 2
  %784 = getelementptr inbounds i32, ptr %659, i64 %783
  %785 = load i32, ptr %784, align 4, !tbaa !5
  %786 = sext i32 %785 to i64
  %787 = getelementptr inbounds i8, ptr %657, i64 %786
  store i8 0, ptr %787, align 1, !tbaa !57
  %788 = add nuw nsw i64 %772, 3
  %789 = getelementptr inbounds i32, ptr %659, i64 %788
  %790 = load i32, ptr %789, align 4, !tbaa !5
  %791 = sext i32 %790 to i64
  %792 = getelementptr inbounds i8, ptr %657, i64 %791
  store i8 0, ptr %792, align 1, !tbaa !57
  %793 = add nuw nsw i64 %772, 4
  %794 = add i64 %773, 4
  %795 = icmp eq i64 %794, %770
  br i1 %795, label %803, label %771

796:                                              ; preds = %707
  %797 = load i32, ptr %637, align 8, !tbaa !60
  %798 = tail call i32 @llvm.smax.i32(i32 %797, i32 -1)
  %799 = sext i32 %798 to i64
  %800 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %799) #9
  %801 = load i32, ptr %637, align 8, !tbaa !60
  %802 = sext i32 %801 to i64
  tail call void @llvm.memset.p0.i64(ptr nonnull align 1 %800, i8 0, i64 %802, i1 false)
  br label %816

803:                                              ; preds = %771, %762
  %804 = phi i64 [ 1, %762 ], [ %793, %771 ]
  %805 = icmp eq i64 %767, 0
  br i1 %805, label %816, label %806

806:                                              ; preds = %803, %806
  %807 = phi i64 [ %813, %806 ], [ %804, %803 ]
  %808 = phi i64 [ %814, %806 ], [ 0, %803 ]
  %809 = getelementptr inbounds i32, ptr %659, i64 %807
  %810 = load i32, ptr %809, align 4, !tbaa !5
  %811 = sext i32 %810 to i64
  %812 = getelementptr inbounds i8, ptr %657, i64 %811
  store i8 0, ptr %812, align 1, !tbaa !57
  %813 = add nuw nsw i64 %807, 1
  %814 = add i64 %808, 1
  %815 = icmp eq i64 %814, %767
  br i1 %815, label %816, label %806, !llvm.loop !238

816:                                              ; preds = %803, %806, %759, %796
  %817 = phi ptr [ %800, %796 ], [ %657, %759 ], [ %657, %806 ], [ %657, %803 ]
  %818 = load i32, ptr %668, align 4
  %819 = shl i32 %818, 2
  %820 = ashr exact i32 %819, 2
  %821 = load ptr, ptr %638, align 8, !tbaa !62
  %822 = sext i32 %820 to i64
  %823 = getelementptr inbounds ptr, ptr %821, i64 %822
  %824 = load ptr, ptr %823, align 8, !tbaa !23
  %825 = load i32, ptr %824, align 4, !tbaa !5
  %826 = icmp slt i32 %825, 1
  br i1 %826, label %879, label %827

827:                                              ; preds = %816
  %828 = add nuw i32 %825, 1
  %829 = zext i32 %828 to i64
  %830 = add nsw i64 %829, -1
  %831 = add nsw i64 %829, -2
  %832 = and i64 %830, 3
  %833 = icmp ult i64 %831, 3
  br i1 %833, label %861, label %834

834:                                              ; preds = %827
  %835 = and i64 %830, -4
  br label %836

836:                                              ; preds = %836, %834
  %837 = phi i64 [ 1, %834 ], [ %858, %836 ]
  %838 = phi i64 [ 0, %834 ], [ %859, %836 ]
  %839 = getelementptr inbounds i32, ptr %824, i64 %837
  %840 = load i32, ptr %839, align 4, !tbaa !5
  %841 = sext i32 %840 to i64
  %842 = getelementptr inbounds i8, ptr %817, i64 %841
  store i8 1, ptr %842, align 1, !tbaa !57
  %843 = add nuw nsw i64 %837, 1
  %844 = getelementptr inbounds i32, ptr %824, i64 %843
  %845 = load i32, ptr %844, align 4, !tbaa !5
  %846 = sext i32 %845 to i64
  %847 = getelementptr inbounds i8, ptr %817, i64 %846
  store i8 1, ptr %847, align 1, !tbaa !57
  %848 = add nuw nsw i64 %837, 2
  %849 = getelementptr inbounds i32, ptr %824, i64 %848
  %850 = load i32, ptr %849, align 4, !tbaa !5
  %851 = sext i32 %850 to i64
  %852 = getelementptr inbounds i8, ptr %817, i64 %851
  store i8 1, ptr %852, align 1, !tbaa !57
  %853 = add nuw nsw i64 %837, 3
  %854 = getelementptr inbounds i32, ptr %824, i64 %853
  %855 = load i32, ptr %854, align 4, !tbaa !5
  %856 = sext i32 %855 to i64
  %857 = getelementptr inbounds i8, ptr %817, i64 %856
  store i8 1, ptr %857, align 1, !tbaa !57
  %858 = add nuw nsw i64 %837, 4
  %859 = add i64 %838, 4
  %860 = icmp eq i64 %859, %835
  br i1 %860, label %861, label %836

861:                                              ; preds = %836, %827
  %862 = phi i64 [ 1, %827 ], [ %858, %836 ]
  %863 = icmp eq i64 %832, 0
  br i1 %863, label %874, label %864

864:                                              ; preds = %861, %864
  %865 = phi i64 [ %871, %864 ], [ %862, %861 ]
  %866 = phi i64 [ %872, %864 ], [ 0, %861 ]
  %867 = getelementptr inbounds i32, ptr %824, i64 %865
  %868 = load i32, ptr %867, align 4, !tbaa !5
  %869 = sext i32 %868 to i64
  %870 = getelementptr inbounds i8, ptr %817, i64 %869
  store i8 1, ptr %870, align 1, !tbaa !57
  %871 = add nuw nsw i64 %865, 1
  %872 = add i64 %866, 1
  %873 = icmp eq i64 %872, %832
  br i1 %873, label %874, label %864, !llvm.loop !239

874:                                              ; preds = %864, %861
  %875 = load i32, ptr %668, align 4
  %876 = shl i32 %875, 2
  %877 = ashr exact i32 %876, 2
  %878 = sext i32 %877 to i64
  br label %879

879:                                              ; preds = %874, %816
  %880 = phi i64 [ %878, %874 ], [ %822, %816 ]
  %881 = load ptr, ptr %639, align 8, !tbaa !64
  %882 = getelementptr inbounds ptr, ptr %881, i64 %880
  %883 = load ptr, ptr %882, align 8, !tbaa !23
  %884 = load i32, ptr %883, align 4, !tbaa !5
  %885 = icmp slt i32 %884, 1
  br i1 %885, label %933, label %886

886:                                              ; preds = %879
  %887 = add nuw i32 %884, 1
  %888 = zext i32 %887 to i64
  %889 = add nsw i64 %888, -1
  %890 = add nsw i64 %888, -2
  %891 = and i64 %889, 3
  %892 = icmp ult i64 %890, 3
  br i1 %892, label %920, label %893

893:                                              ; preds = %886
  %894 = and i64 %889, -4
  br label %895

895:                                              ; preds = %895, %893
  %896 = phi i64 [ 1, %893 ], [ %917, %895 ]
  %897 = phi i64 [ 0, %893 ], [ %918, %895 ]
  %898 = getelementptr inbounds i32, ptr %883, i64 %896
  %899 = load i32, ptr %898, align 4, !tbaa !5
  %900 = sext i32 %899 to i64
  %901 = getelementptr inbounds i8, ptr %817, i64 %900
  store i8 2, ptr %901, align 1, !tbaa !57
  %902 = add nuw nsw i64 %896, 1
  %903 = getelementptr inbounds i32, ptr %883, i64 %902
  %904 = load i32, ptr %903, align 4, !tbaa !5
  %905 = sext i32 %904 to i64
  %906 = getelementptr inbounds i8, ptr %817, i64 %905
  store i8 2, ptr %906, align 1, !tbaa !57
  %907 = add nuw nsw i64 %896, 2
  %908 = getelementptr inbounds i32, ptr %883, i64 %907
  %909 = load i32, ptr %908, align 4, !tbaa !5
  %910 = sext i32 %909 to i64
  %911 = getelementptr inbounds i8, ptr %817, i64 %910
  store i8 2, ptr %911, align 1, !tbaa !57
  %912 = add nuw nsw i64 %896, 3
  %913 = getelementptr inbounds i32, ptr %883, i64 %912
  %914 = load i32, ptr %913, align 4, !tbaa !5
  %915 = sext i32 %914 to i64
  %916 = getelementptr inbounds i8, ptr %817, i64 %915
  store i8 2, ptr %916, align 1, !tbaa !57
  %917 = add nuw nsw i64 %896, 4
  %918 = add i64 %897, 4
  %919 = icmp eq i64 %918, %894
  br i1 %919, label %920, label %895

920:                                              ; preds = %895, %886
  %921 = phi i64 [ 1, %886 ], [ %917, %895 ]
  %922 = icmp eq i64 %891, 0
  br i1 %922, label %933, label %923

923:                                              ; preds = %920, %923
  %924 = phi i64 [ %930, %923 ], [ %921, %920 ]
  %925 = phi i64 [ %931, %923 ], [ 0, %920 ]
  %926 = getelementptr inbounds i32, ptr %883, i64 %924
  %927 = load i32, ptr %926, align 4, !tbaa !5
  %928 = sext i32 %927 to i64
  %929 = getelementptr inbounds i8, ptr %817, i64 %928
  store i8 2, ptr %929, align 1, !tbaa !57
  %930 = add nuw nsw i64 %924, 1
  %931 = add i64 %925, 1
  %932 = icmp eq i64 %931, %891
  br i1 %932, label %933, label %923, !llvm.loop !240

933:                                              ; preds = %920, %923, %879, %703
  %934 = phi ptr [ %706, %703 ], [ %817, %879 ], [ %817, %923 ], [ %817, %920 ]
  %935 = phi ptr [ %659, %703 ], [ %883, %879 ], [ %883, %923 ], [ %883, %920 ]
  %936 = phi ptr [ %658, %703 ], [ %824, %879 ], [ %824, %923 ], [ %824, %920 ]
  %937 = phi ptr [ %657, %703 ], [ %817, %879 ], [ %817, %923 ], [ %817, %920 ]
  %938 = load i8, ptr %669, align 1
  %939 = and i8 %938, 7
  %940 = icmp eq i8 %939, 0
  br i1 %940, label %1234, label %941

941:                                              ; preds = %933
  %942 = load i32, ptr @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4, !tbaa !5
  %943 = icmp eq i32 %942, 0
  br i1 %943, label %947, label %944

944:                                              ; preds = %941
  %945 = load i32, ptr %668, align 4
  %946 = icmp slt i32 %945, 0
  br label %947

947:                                              ; preds = %944, %941
  %948 = phi i1 [ false, %941 ], [ %946, %944 ]
  %949 = and i8 %938, 120
  %950 = icmp eq i8 %949, 0
  br i1 %950, label %982, label %951

951:                                              ; preds = %947
  %952 = icmp slt i32 %661, %620
  br i1 %952, label %953, label %966

953:                                              ; preds = %951
  %954 = sext i32 %661 to i64
  br label %955

955:                                              ; preds = %953, %961
  %956 = phi i64 [ %954, %953 ], [ %962, %961 ]
  %957 = getelementptr inbounds i16, ptr %191, i64 %956
  %958 = load i16, ptr %957, align 2, !tbaa !44
  %959 = zext i16 %958 to i32
  %960 = icmp sgt i32 %689, %959
  br i1 %960, label %961, label %964

961:                                              ; preds = %955
  %962 = add nsw i64 %956, 1
  %963 = icmp eq i64 %962, %650
  br i1 %963, label %966, label %955

964:                                              ; preds = %955
  %965 = trunc i64 %956 to i32
  br label %966

966:                                              ; preds = %961, %964, %951
  %967 = phi i32 [ %661, %951 ], [ %965, %964 ], [ %620, %961 ]
  %968 = icmp slt i32 %662, %621
  br i1 %968, label %969, label %982

969:                                              ; preds = %966
  %970 = sext i32 %662 to i64
  br label %971

971:                                              ; preds = %969, %977
  %972 = phi i64 [ %970, %969 ], [ %978, %977 ]
  %973 = getelementptr inbounds i16, ptr %237, i64 %972
  %974 = load i16, ptr %973, align 2, !tbaa !44
  %975 = zext i16 %974 to i32
  %976 = icmp sgt i32 %689, %975
  br i1 %976, label %977, label %980

977:                                              ; preds = %971
  %978 = add nsw i64 %972, 1
  %979 = icmp eq i64 %978, %651
  br i1 %979, label %982, label %971

980:                                              ; preds = %971
  %981 = trunc i64 %972 to i32
  br label %982

982:                                              ; preds = %977, %980, %966, %947
  %983 = phi i32 [ %662, %947 ], [ %662, %966 ], [ %981, %980 ], [ %621, %977 ]
  %984 = phi i32 [ %661, %947 ], [ %967, %966 ], [ %967, %980 ], [ %967, %977 ]
  %985 = add nsw i32 %656, 1
  %986 = icmp slt i32 %985, %689
  br i1 %986, label %987, label %1052

987:                                              ; preds = %982
  %988 = xor i32 %656, -1
  %989 = add i32 %689, %988
  %990 = zext i32 %989 to i64
  %991 = icmp ult i32 %989, 8
  br i1 %991, label %1041, label %992

992:                                              ; preds = %987
  %993 = icmp ult i32 %989, 64
  br i1 %993, label %1022, label %994

994:                                              ; preds = %992
  %995 = and i64 %990, 4294967232
  %996 = trunc i32 %985 to i16
  %997 = insertelement <16 x i16> poison, i16 %996, i64 0
  %998 = shufflevector <16 x i16> %997, <16 x i16> poison, <16 x i32> zeroinitializer
  %999 = add <16 x i16> %998, <i16 0, i16 1, i16 2, i16 3, i16 4, i16 5, i16 6, i16 7, i16 8, i16 9, i16 10, i16 11, i16 12, i16 13, i16 14, i16 15>
  %1000 = trunc i64 %995 to i32
  %1001 = add i32 %985, %1000
  br label %1002

1002:                                             ; preds = %1002, %994
  %1003 = phi i64 [ 0, %994 ], [ %1012, %1002 ]
  %1004 = phi <16 x i16> [ %999, %994 ], [ %1013, %1002 ]
  %1005 = add <16 x i16> %1004, <i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16>
  %1006 = add <16 x i16> %1004, <i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32>
  %1007 = add <16 x i16> %1004, <i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48>
  %1008 = getelementptr inbounds i16, ptr %421, i64 %1003
  store <16 x i16> %1004, ptr %1008, align 2, !tbaa !44
  %1009 = getelementptr inbounds i16, ptr %1008, i64 16
  store <16 x i16> %1005, ptr %1009, align 2, !tbaa !44
  %1010 = getelementptr inbounds i16, ptr %1008, i64 32
  store <16 x i16> %1006, ptr %1010, align 2, !tbaa !44
  %1011 = getelementptr inbounds i16, ptr %1008, i64 48
  store <16 x i16> %1007, ptr %1011, align 2, !tbaa !44
  %1012 = add nuw i64 %1003, 64
  %1013 = add <16 x i16> %1004, <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>
  %1014 = icmp eq i64 %1012, %995
  br i1 %1014, label %1015, label %1002, !llvm.loop !241

1015:                                             ; preds = %1002
  %1016 = icmp eq i64 %995, %990
  br i1 %1016, label %1052, label %1017

1017:                                             ; preds = %1015
  %1018 = trunc i64 %995 to i32
  %1019 = add i32 %985, %1018
  %1020 = and i64 %990, 56
  %1021 = icmp eq i64 %1020, 0
  br i1 %1021, label %1041, label %1022

1022:                                             ; preds = %992, %1017
  %1023 = phi i32 [ %1001, %1017 ], [ %985, %992 ]
  %1024 = phi i64 [ %995, %1017 ], [ 0, %992 ]
  %1025 = and i64 %990, 4294967288
  %1026 = trunc i64 %1025 to i32
  %1027 = add i32 %985, %1026
  %1028 = trunc i32 %1023 to i16
  %1029 = insertelement <8 x i16> poison, i16 %1028, i64 0
  %1030 = shufflevector <8 x i16> %1029, <8 x i16> poison, <8 x i32> zeroinitializer
  %1031 = add <8 x i16> %1030, <i16 0, i16 1, i16 2, i16 3, i16 4, i16 5, i16 6, i16 7>
  br label %1032

1032:                                             ; preds = %1032, %1022
  %1033 = phi i64 [ %1024, %1022 ], [ %1036, %1032 ]
  %1034 = phi <8 x i16> [ %1031, %1022 ], [ %1037, %1032 ]
  %1035 = getelementptr inbounds i16, ptr %421, i64 %1033
  store <8 x i16> %1034, ptr %1035, align 2, !tbaa !44
  %1036 = add nuw i64 %1033, 8
  %1037 = add <8 x i16> %1034, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %1038 = icmp eq i64 %1036, %1025
  br i1 %1038, label %1039, label %1032, !llvm.loop !242

1039:                                             ; preds = %1032
  %1040 = icmp eq i64 %1025, %990
  br i1 %1040, label %1052, label %1041

1041:                                             ; preds = %987, %1017, %1039
  %1042 = phi i64 [ 0, %987 ], [ %995, %1017 ], [ %1025, %1039 ]
  %1043 = phi i32 [ %985, %987 ], [ %1019, %1017 ], [ %1027, %1039 ]
  br label %1044

1044:                                             ; preds = %1041, %1044
  %1045 = phi i64 [ %1048, %1044 ], [ %1042, %1041 ]
  %1046 = phi i32 [ %1050, %1044 ], [ %1043, %1041 ]
  %1047 = trunc i32 %1046 to i16
  %1048 = add nuw nsw i64 %1045, 1
  %1049 = getelementptr inbounds i16, ptr %421, i64 %1045
  store i16 %1047, ptr %1049, align 2, !tbaa !44
  %1050 = add nsw i32 %1046, 1
  %1051 = icmp eq i64 %1048, %990
  br i1 %1051, label %1052, label %1044, !llvm.loop !243

1052:                                             ; preds = %1044, %1015, %1039, %982
  %1053 = phi i32 [ 0, %982 ], [ %989, %1039 ], [ %989, %1015 ], [ %989, %1044 ]
  %1054 = zext i32 %1053 to i64
  %1055 = getelementptr inbounds i16, ptr %421, i64 %1054
  %1056 = select i1 %948, ptr %237, ptr %191
  %1057 = select i1 %948, i32 %983, i32 %984
  %1058 = select i1 %948, i32 %621, i32 %620
  %1059 = icmp slt i32 %1057, %1058
  br i1 %1059, label %1060, label %1219

1060:                                             ; preds = %1052
  %1061 = sub nsw i32 %1058, %1057
  %1062 = icmp sgt i32 %1061, 6
  br i1 %1062, label %1063, label %1156

1063:                                             ; preds = %1060
  %1064 = add nsw i32 %1058, -2
  %1065 = add nsw i32 %1057, 2
  %1066 = icmp slt i32 %1065, %1064
  br i1 %1066, label %1067, label %1156

1067:                                             ; preds = %1063
  %1068 = add nsw i32 %1057, 1
  %1069 = sext i32 %1068 to i64
  %1070 = getelementptr inbounds i16, ptr %1056, i64 %1069
  %1071 = load i16, ptr %1070, align 2, !tbaa !44
  %1072 = zext i16 %1071 to i64
  %1073 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %1072
  %1074 = getelementptr inbounds %class.Vector, ptr %1073, i64 0, i32 2
  %1075 = load double, ptr %1074, align 8, !tbaa !49
  %1076 = sext i32 %1057 to i64
  %1077 = getelementptr inbounds i16, ptr %1056, i64 %1076
  %1078 = load i16, ptr %1077, align 2, !tbaa !44
  %1079 = zext i16 %1078 to i64
  %1080 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %1079
  %1081 = getelementptr inbounds %class.Vector, ptr %1080, i64 0, i32 2
  %1082 = load double, ptr %1081, align 8, !tbaa !49
  %1083 = getelementptr inbounds %class.Vector, ptr %1073, i64 0, i32 1
  %1084 = load double, ptr %1083, align 8, !tbaa !66
  %1085 = getelementptr inbounds %class.Vector, ptr %1080, i64 0, i32 1
  %1086 = load double, ptr %1085, align 8, !tbaa !66
  %1087 = load double, ptr %1073, align 8, !tbaa !67
  %1088 = load double, ptr %1080, align 8, !tbaa !67
  %1089 = sext i32 %1065 to i64
  %1090 = sext i32 %1064 to i64
  %1091 = insertelement <2 x double> poison, double %1075, i64 0
  %1092 = insertelement <2 x double> %1091, double %1082, i64 1
  %1093 = insertelement <2 x double> poison, double %1084, i64 0
  %1094 = insertelement <2 x double> %1093, double %1086, i64 1
  %1095 = insertelement <2 x double> poison, double %1087, i64 0
  %1096 = insertelement <2 x double> %1095, double %1088, i64 1
  %1097 = insertelement <2 x double> poison, double %687, i64 0
  %1098 = shufflevector <2 x double> %1097, <2 x double> poison, <2 x i32> zeroinitializer
  %1099 = shufflevector <2 x double> %684, <2 x double> poison, <2 x i32> <i32 1, i32 1>
  %1100 = shufflevector <2 x double> %684, <2 x double> poison, <2 x i32> zeroinitializer
  br label %1101

1101:                                             ; preds = %1067, %1101
  %1102 = phi i64 [ %1089, %1067 ], [ %1147, %1101 ]
  %1103 = phi i32 [ %1057, %1067 ], [ %1149, %1101 ]
  %1104 = phi i32 [ 0, %1067 ], [ %1146, %1101 ]
  %1105 = phi i16 [ %1078, %1067 ], [ %1112, %1101 ]
  %1106 = phi i16 [ %1071, %1067 ], [ %1116, %1101 ]
  %1107 = phi <2 x double> [ %1092, %1067 ], [ %1151, %1101 ]
  %1108 = phi <2 x double> [ %1094, %1067 ], [ %1153, %1101 ]
  %1109 = phi <2 x double> [ %1096, %1067 ], [ %1155, %1101 ]
  %1110 = fsub <2 x double> %1098, %1107
  %1111 = getelementptr inbounds i16, ptr %1056, i64 %1102
  %1112 = load i16, ptr %1111, align 2, !tbaa !44
  %1113 = add nsw i32 %1103, 3
  %1114 = sext i32 %1113 to i64
  %1115 = getelementptr inbounds i16, ptr %1056, i64 %1114
  %1116 = load i16, ptr %1115, align 2, !tbaa !44
  %1117 = zext i16 %1112 to i64
  %1118 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %1117
  %1119 = load double, ptr %1118, align 8, !tbaa !67
  %1120 = zext i16 %1116 to i64
  %1121 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %1120
  %1122 = load double, ptr %1121, align 8, !tbaa !67
  %1123 = getelementptr inbounds %class.Vector, ptr %1118, i64 0, i32 1
  %1124 = load double, ptr %1123, align 8, !tbaa !66
  %1125 = getelementptr inbounds %class.Vector, ptr %1121, i64 0, i32 1
  %1126 = load double, ptr %1125, align 8, !tbaa !66
  %1127 = getelementptr inbounds %class.Vector, ptr %1118, i64 0, i32 2
  %1128 = load double, ptr %1127, align 8, !tbaa !49
  %1129 = getelementptr inbounds %class.Vector, ptr %1121, i64 0, i32 2
  %1130 = load double, ptr %1129, align 8, !tbaa !49
  %1131 = fsub <2 x double> %1100, %1109
  %1132 = fmul <2 x double> %1131, %1131
  %1133 = fsub <2 x double> %1099, %1108
  %1134 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %1133, <2 x double> %1133, <2 x double> %1132)
  %1135 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %1110, <2 x double> %1110, <2 x double> %1134)
  %1136 = fcmp olt <2 x double> %1135, %653
  %1137 = zext i32 %1104 to i64
  %1138 = getelementptr inbounds i16, ptr %283, i64 %1137
  store i16 %1105, ptr %1138, align 2, !tbaa !44
  %1139 = extractelement <2 x i1> %1136, i64 1
  %1140 = zext i1 %1139 to i32
  %1141 = add nuw nsw i32 %1104, %1140
  %1142 = zext i32 %1141 to i64
  %1143 = getelementptr inbounds i16, ptr %283, i64 %1142
  store i16 %1106, ptr %1143, align 2, !tbaa !44
  %1144 = extractelement <2 x i1> %1136, i64 0
  %1145 = zext i1 %1144 to i32
  %1146 = add i32 %1141, %1145
  %1147 = add nsw i64 %1102, 2
  %1148 = icmp slt i64 %1147, %1090
  %1149 = trunc i64 %1102 to i32
  %1150 = insertelement <2 x double> poison, double %1130, i64 0
  %1151 = insertelement <2 x double> %1150, double %1128, i64 1
  %1152 = insertelement <2 x double> poison, double %1126, i64 0
  %1153 = insertelement <2 x double> %1152, double %1124, i64 1
  %1154 = insertelement <2 x double> poison, double %1122, i64 0
  %1155 = insertelement <2 x double> %1154, double %1119, i64 1
  br i1 %1148, label %1101, label %1156

1156:                                             ; preds = %1101, %1063, %1060
  %1157 = phi i32 [ 0, %1060 ], [ 0, %1063 ], [ %1146, %1101 ]
  %1158 = phi i32 [ %1057, %1060 ], [ %1057, %1063 ], [ %1149, %1101 ]
  %1159 = icmp slt i32 %1158, %1058
  br i1 %1159, label %1160, label %1165

1160:                                             ; preds = %1156
  %1161 = sext i32 %1158 to i64
  %1162 = sext i32 %1058 to i64
  %1163 = extractelement <2 x double> %684, i64 0
  %1164 = extractelement <2 x double> %684, i64 1
  br label %1170

1165:                                             ; preds = %1193, %1156
  %1166 = phi i32 [ %1157, %1156 ], [ %1194, %1193 ]
  %1167 = icmp sgt i32 %1166, 0
  br i1 %1167, label %1168, label %1219

1168:                                             ; preds = %1165
  %1169 = zext i32 %1166 to i64
  br label %1197

1170:                                             ; preds = %1160, %1193
  %1171 = phi i64 [ %1161, %1160 ], [ %1195, %1193 ]
  %1172 = phi i32 [ %1157, %1160 ], [ %1194, %1193 ]
  %1173 = getelementptr inbounds i16, ptr %1056, i64 %1171
  %1174 = load i16, ptr %1173, align 2, !tbaa !44
  %1175 = zext i16 %1174 to i64
  %1176 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %1175
  %1177 = load double, ptr %1176, align 8, !tbaa !67
  %1178 = getelementptr inbounds %class.Vector, ptr %1176, i64 0, i32 1
  %1179 = load double, ptr %1178, align 8, !tbaa !66
  %1180 = getelementptr inbounds %class.Vector, ptr %1176, i64 0, i32 2
  %1181 = load double, ptr %1180, align 8, !tbaa !49
  %1182 = fsub double %1163, %1177
  %1183 = fmul double %1182, %1182
  %1184 = fsub double %1164, %1179
  %1185 = tail call double @llvm.fmuladd.f64(double %1184, double %1184, double %1183)
  %1186 = fsub double %687, %1181
  %1187 = tail call double @llvm.fmuladd.f64(double %1186, double %1186, double %1185)
  %1188 = fcmp ugt double %1187, %23
  br i1 %1188, label %1193, label %1189

1189:                                             ; preds = %1170
  %1190 = add nsw i32 %1172, 1
  %1191 = sext i32 %1172 to i64
  %1192 = getelementptr inbounds i16, ptr %283, i64 %1191
  store i16 %1174, ptr %1192, align 2, !tbaa !44
  br label %1193

1193:                                             ; preds = %1189, %1170
  %1194 = phi i32 [ %1190, %1189 ], [ %1172, %1170 ]
  %1195 = add nsw i64 %1171, 1
  %1196 = icmp eq i64 %1195, %1162
  br i1 %1196, label %1165, label %1170

1197:                                             ; preds = %1168, %1214
  %1198 = phi i64 [ 0, %1168 ], [ %1217, %1214 ]
  %1199 = phi ptr [ %1055, %1168 ], [ %1216, %1214 ]
  %1200 = getelementptr inbounds i16, ptr %283, i64 %1198
  %1201 = load i16, ptr %1200, align 2, !tbaa !44
  %1202 = zext i16 %1201 to i64
  %1203 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %1202, i32 4
  %1204 = load i8, ptr %1203, align 1
  %1205 = and i8 %1204, 7
  store i16 %1201, ptr %1199, align 2, !tbaa !44
  %1206 = getelementptr inbounds i16, ptr %1199, i64 1
  %1207 = insertelement <2 x i16> poison, i16 %1201, i64 0
  %1208 = shufflevector <2 x i16> %1207, <2 x i16> poison, <2 x i32> zeroinitializer
  %1209 = add <2 x i16> %1208, <i16 1, i16 2>
  store <2 x i16> %1209, ptr %1206, align 2, !tbaa !44
  %1210 = icmp ult i8 %1205, 4
  br i1 %1210, label %1214, label %1211

1211:                                             ; preds = %1197
  %1212 = add <2 x i16> %1208, <i16 3, i16 4>
  %1213 = getelementptr inbounds i16, ptr %1199, i64 3
  store <2 x i16> %1212, ptr %1213, align 2, !tbaa !44
  br label %1214

1214:                                             ; preds = %1211, %1197
  %1215 = zext i8 %1205 to i64
  %1216 = getelementptr inbounds i16, ptr %1199, i64 %1215
  %1217 = add nuw nsw i64 %1198, 1
  %1218 = icmp eq i64 %1217, %1169
  br i1 %1218, label %1219, label %1197

1219:                                             ; preds = %1214, %1165, %1052
  %1220 = phi ptr [ %1055, %1052 ], [ %1055, %1165 ], [ %1216, %1214 ]
  %1221 = ptrtoint ptr %1220 to i64
  %1222 = sub i64 %1221, %640
  %1223 = lshr exact i64 %1222, 1
  %1224 = trunc i64 %1223 to i32
  %1225 = icmp eq i32 %1224, 0
  br i1 %1225, label %1237, label %1226

1226:                                             ; preds = %1219
  %1227 = shl i64 %1222, 31
  %1228 = add i64 %1227, -4294967296
  %1229 = ashr i64 %1228, 32
  %1230 = getelementptr inbounds i16, ptr %421, i64 %1229
  %1231 = load i16, ptr %1230, align 2, !tbaa !44
  %1232 = ashr i64 %1227, 32
  %1233 = getelementptr inbounds i16, ptr %421, i64 %1232
  store i16 %1231, ptr %1233, align 2, !tbaa !44
  br label %1237

1234:                                             ; preds = %933
  %1235 = add nsw i32 %664, 1
  %1236 = load i32, ptr @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4, !tbaa !5
  br label %1237

1237:                                             ; preds = %1219, %1226, %1234
  %1238 = phi i32 [ %1236, %1234 ], [ %942, %1226 ], [ %942, %1219 ]
  %1239 = phi i32 [ %1235, %1234 ], [ 0, %1226 ], [ 0, %1219 ]
  %1240 = phi i32 [ %663, %1234 ], [ %1224, %1226 ], [ 0, %1219 ]
  %1241 = phi i32 [ %662, %1234 ], [ %983, %1226 ], [ %983, %1219 ]
  %1242 = phi i32 [ %661, %1234 ], [ %984, %1226 ], [ %984, %1219 ]
  %1243 = icmp eq i32 %1238, 0
  br i1 %1243, label %1248, label %1244

1244:                                             ; preds = %1237
  %1245 = load i32, ptr %668, align 4
  %1246 = and i32 %1245, 1073741824
  %1247 = icmp ne i32 %1246, 0
  br label %1248

1248:                                             ; preds = %1244, %1237
  %1249 = phi i1 [ false, %1237 ], [ %1247, %1244 ]
  %1250 = load i32, ptr %13, align 8, !tbaa !17
  %1251 = add nsw i32 %641, %1250
  %1252 = load i32, ptr %642, align 4, !tbaa !68
  %1253 = icmp sgt i32 %1252, %1251
  br i1 %1253, label %1269, label %1254

1254:                                             ; preds = %1248, %1254
  %1255 = phi i32 [ %1257, %1254 ], [ %1252, %1248 ]
  %1256 = ashr i32 %1255, 1
  %1257 = add nsw i32 %1256, %1255
  %1258 = icmp sgt i32 %1257, %1251
  br i1 %1258, label %1259, label %1254

1259:                                             ; preds = %1254
  %1260 = sext i32 %1257 to i64
  %1261 = icmp slt i32 %1257, 0
  %1262 = shl nsw i64 %1260, 1
  %1263 = select i1 %1261, i64 -1, i64 %1262
  %1264 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %1263) #9
  %1265 = load ptr, ptr %8, align 8, !tbaa !46
  %1266 = sext i32 %1250 to i64
  %1267 = shl nsw i64 %1266, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 2 %1264, ptr align 2 %1265, i64 %1267, i1 false)
  %1268 = icmp eq ptr %1265, null
  br i1 %1268, label %1273, label %1271

1269:                                             ; preds = %1248
  %1270 = load ptr, ptr %8, align 8, !tbaa !46
  br label %1275

1271:                                             ; preds = %1259
  tail call void @_ZdaPv(ptr noundef nonnull %1265) #10
  %1272 = load i32, ptr %13, align 8, !tbaa !17
  br label %1273

1273:                                             ; preds = %1271, %1259
  %1274 = phi i32 [ %1272, %1271 ], [ %1250, %1259 ]
  store ptr %1264, ptr %8, align 8, !tbaa !46
  store i32 %1257, ptr %642, align 4, !tbaa !68
  br label %1275

1275:                                             ; preds = %1269, %1273
  %1276 = phi i32 [ %1250, %1269 ], [ %1274, %1273 ]
  %1277 = phi ptr [ %1270, %1269 ], [ %1264, %1273 ]
  %1278 = ptrtoint ptr %1277 to i64
  %1279 = add nsw i32 %1276, 1
  %1280 = sext i32 %1279 to i64
  %1281 = getelementptr inbounds i16, ptr %1277, i64 %1280
  %1282 = icmp slt i32 %1239, %1240
  br i1 %1249, label %1283, label %1331

1283:                                             ; preds = %1275
  br i1 %1282, label %1284, label %1502

1284:                                             ; preds = %1283
  %1285 = sext i32 %1239 to i64
  %1286 = sext i32 %1240 to i64
  %1287 = extractelement <2 x double> %684, i64 0
  %1288 = extractelement <2 x double> %684, i64 1
  br label %1289

1289:                                             ; preds = %1284, %1326
  %1290 = phi i64 [ %1285, %1284 ], [ %1329, %1326 ]
  %1291 = phi ptr [ %467, %1284 ], [ %1328, %1326 ]
  %1292 = phi ptr [ %1281, %1284 ], [ %1327, %1326 ]
  %1293 = getelementptr inbounds i16, ptr %421, i64 %1290
  %1294 = load i16, ptr %1293, align 2, !tbaa !44
  %1295 = zext i16 %1294 to i64
  %1296 = getelementptr inbounds %struct.CompAtomExt, ptr %45, i64 %1295
  %1297 = load i32, ptr %1296, align 4
  %1298 = and i32 %1297, 1073741824
  %1299 = icmp eq i32 %1298, 0
  br i1 %1299, label %1300, label %1326

1300:                                             ; preds = %1289
  %1301 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %1295
  %1302 = getelementptr inbounds %class.Vector, ptr %1301, i64 0, i32 2
  %1303 = load double, ptr %1302, align 8, !tbaa !49
  %1304 = fsub double %687, %1303
  %1305 = getelementptr inbounds %class.Vector, ptr %1301, i64 0, i32 1
  %1306 = load double, ptr %1305, align 8, !tbaa !66
  %1307 = fsub double %1288, %1306
  %1308 = load double, ptr %1301, align 8, !tbaa !67
  %1309 = fsub double %1287, %1308
  %1310 = fmul double %1309, %1309
  %1311 = tail call double @llvm.fmuladd.f64(double %1307, double %1307, double %1310)
  %1312 = tail call double @llvm.fmuladd.f64(double %1304, double %1304, double %1311)
  %1313 = fcmp ugt double %1312, %20
  br i1 %1313, label %1326, label %1314

1314:                                             ; preds = %1300
  %1315 = shl i32 %1297, 2
  %1316 = ashr exact i32 %1315, 2
  %1317 = icmp slt i32 %1316, %697
  %1318 = icmp sgt i32 %1316, %699
  %1319 = select i1 %1317, i1 true, i1 %1318
  %1320 = select i1 %1319, ptr %1292, ptr %1291
  %1321 = zext i1 %1319 to i64
  %1322 = getelementptr inbounds i16, ptr %1292, i64 %1321
  %1323 = xor i1 %1319, true
  %1324 = zext i1 %1323 to i64
  %1325 = getelementptr inbounds i16, ptr %1291, i64 %1324
  store i16 %1294, ptr %1320, align 2, !tbaa !44
  br label %1326

1326:                                             ; preds = %1314, %1300, %1289
  %1327 = phi ptr [ %1292, %1289 ], [ %1292, %1300 ], [ %1322, %1314 ]
  %1328 = phi ptr [ %1291, %1289 ], [ %1291, %1300 ], [ %1325, %1314 ]
  %1329 = add nsw i64 %1290, 1
  %1330 = icmp eq i64 %1329, %1286
  br i1 %1330, label %1502, label %1289

1331:                                             ; preds = %1275
  br i1 %1282, label %1332, label %1502

1332:                                             ; preds = %1331
  %1333 = sub nsw i32 %1240, %1239
  %1334 = icmp sgt i32 %1333, 6
  br i1 %1334, label %1335, label %1453

1335:                                             ; preds = %1332
  %1336 = add nsw i32 %1240, -2
  %1337 = add nsw i32 %1239, 2
  %1338 = icmp slt i32 %1337, %1336
  br i1 %1338, label %1339, label %1453

1339:                                             ; preds = %1335
  %1340 = sext i32 %1239 to i64
  %1341 = getelementptr inbounds i16, ptr %421, i64 %1340
  %1342 = load i16, ptr %1341, align 2, !tbaa !44
  %1343 = zext i16 %1342 to i64
  %1344 = getelementptr inbounds %struct.CompAtomExt, ptr %45, i64 %1343
  %1345 = load i32, ptr %1344, align 4
  %1346 = add nsw i32 %1239, 1
  %1347 = sext i32 %1346 to i64
  %1348 = getelementptr inbounds i16, ptr %421, i64 %1347
  %1349 = load i16, ptr %1348, align 2, !tbaa !44
  %1350 = zext i16 %1349 to i64
  %1351 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %1350
  %1352 = getelementptr inbounds %class.Vector, ptr %1351, i64 0, i32 2
  %1353 = load double, ptr %1352, align 8, !tbaa !49
  %1354 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %1343
  %1355 = getelementptr inbounds %class.Vector, ptr %1354, i64 0, i32 2
  %1356 = load double, ptr %1355, align 8, !tbaa !49
  %1357 = getelementptr inbounds %class.Vector, ptr %1351, i64 0, i32 1
  %1358 = load double, ptr %1357, align 8, !tbaa !66
  %1359 = getelementptr inbounds %class.Vector, ptr %1354, i64 0, i32 1
  %1360 = load double, ptr %1359, align 8, !tbaa !66
  %1361 = load double, ptr %1351, align 8, !tbaa !67
  %1362 = load double, ptr %1354, align 8, !tbaa !67
  %1363 = sext i32 %1337 to i64
  %1364 = sext i32 %1336 to i64
  %1365 = extractelement <2 x double> %684, i64 0
  %1366 = extractelement <2 x double> %684, i64 1
  br label %1367

1367:                                             ; preds = %1339, %1447
  %1368 = phi i64 [ %1363, %1339 ], [ %1450, %1447 ]
  %1369 = phi i64 [ %1350, %1339 ], [ %1407, %1447 ]
  %1370 = phi i32 [ %1345, %1339 ], [ %1435, %1447 ]
  %1371 = phi ptr [ %467, %1339 ], [ %1449, %1447 ]
  %1372 = phi ptr [ %1281, %1339 ], [ %1448, %1447 ]
  %1373 = phi i32 [ %1239, %1339 ], [ %1452, %1447 ]
  %1374 = phi i16 [ %1342, %1339 ], [ %1399, %1447 ]
  %1375 = phi i16 [ %1349, %1339 ], [ %1403, %1447 ]
  %1376 = phi double [ %1362, %1339 ], [ %1406, %1447 ]
  %1377 = phi double [ %1361, %1339 ], [ %1409, %1447 ]
  %1378 = phi double [ %1360, %1339 ], [ %1411, %1447 ]
  %1379 = phi double [ %1358, %1339 ], [ %1413, %1447 ]
  %1380 = phi double [ %1356, %1339 ], [ %1415, %1447 ]
  %1381 = phi double [ %1353, %1339 ], [ %1417, %1447 ]
  %1382 = getelementptr inbounds %struct.CompAtomExt, ptr %45, i64 %1369
  %1383 = load i32, ptr %1382, align 4
  %1384 = shl i32 %1383, 2
  %1385 = ashr exact i32 %1384, 2
  %1386 = fsub double %1365, %1376
  %1387 = fsub double %1365, %1377
  %1388 = fmul double %1386, %1386
  %1389 = fmul double %1387, %1387
  %1390 = fsub double %1366, %1378
  %1391 = fsub double %1366, %1379
  %1392 = tail call double @llvm.fmuladd.f64(double %1390, double %1390, double %1388)
  %1393 = tail call double @llvm.fmuladd.f64(double %1391, double %1391, double %1389)
  %1394 = fsub double %687, %1380
  %1395 = fsub double %687, %1381
  %1396 = tail call double @llvm.fmuladd.f64(double %1394, double %1394, double %1392)
  %1397 = tail call double @llvm.fmuladd.f64(double %1395, double %1395, double %1393)
  %1398 = getelementptr inbounds i16, ptr %421, i64 %1368
  %1399 = load i16, ptr %1398, align 2, !tbaa !44
  %1400 = add nsw i32 %1373, 3
  %1401 = sext i32 %1400 to i64
  %1402 = getelementptr inbounds i16, ptr %421, i64 %1401
  %1403 = load i16, ptr %1402, align 2, !tbaa !44
  %1404 = zext i16 %1399 to i64
  %1405 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %1404
  %1406 = load double, ptr %1405, align 8, !tbaa !67
  %1407 = zext i16 %1403 to i64
  %1408 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %1407
  %1409 = load double, ptr %1408, align 8, !tbaa !67
  %1410 = getelementptr inbounds %class.Vector, ptr %1405, i64 0, i32 1
  %1411 = load double, ptr %1410, align 8, !tbaa !66
  %1412 = getelementptr inbounds %class.Vector, ptr %1408, i64 0, i32 1
  %1413 = load double, ptr %1412, align 8, !tbaa !66
  %1414 = getelementptr inbounds %class.Vector, ptr %1405, i64 0, i32 2
  %1415 = load double, ptr %1414, align 8, !tbaa !49
  %1416 = getelementptr inbounds %class.Vector, ptr %1408, i64 0, i32 2
  %1417 = load double, ptr %1416, align 8, !tbaa !49
  %1418 = fcmp ugt double %1396, %20
  br i1 %1418, label %1431, label %1419

1419:                                             ; preds = %1367
  %1420 = shl i32 %1370, 2
  %1421 = ashr exact i32 %1420, 2
  %1422 = icmp slt i32 %1421, %697
  %1423 = icmp sgt i32 %1421, %699
  %1424 = select i1 %1422, i1 true, i1 %1423
  %1425 = select i1 %1424, ptr %1372, ptr %1371
  %1426 = zext i1 %1424 to i64
  %1427 = getelementptr inbounds i16, ptr %1372, i64 %1426
  %1428 = xor i1 %1424, true
  %1429 = zext i1 %1428 to i64
  %1430 = getelementptr inbounds i16, ptr %1371, i64 %1429
  store i16 %1374, ptr %1425, align 2, !tbaa !44
  br label %1431

1431:                                             ; preds = %1419, %1367
  %1432 = phi ptr [ %1372, %1367 ], [ %1427, %1419 ]
  %1433 = phi ptr [ %1371, %1367 ], [ %1430, %1419 ]
  %1434 = getelementptr inbounds %struct.CompAtomExt, ptr %45, i64 %1404
  %1435 = load i32, ptr %1434, align 4
  %1436 = fcmp ugt double %1397, %20
  br i1 %1436, label %1447, label %1437

1437:                                             ; preds = %1431
  %1438 = icmp slt i32 %1385, %697
  %1439 = icmp sgt i32 %1385, %699
  %1440 = select i1 %1438, i1 true, i1 %1439
  %1441 = select i1 %1440, ptr %1432, ptr %1433
  %1442 = zext i1 %1440 to i64
  %1443 = getelementptr inbounds i16, ptr %1432, i64 %1442
  %1444 = xor i1 %1440, true
  %1445 = zext i1 %1444 to i64
  %1446 = getelementptr inbounds i16, ptr %1433, i64 %1445
  store i16 %1375, ptr %1441, align 2, !tbaa !44
  br label %1447

1447:                                             ; preds = %1437, %1431
  %1448 = phi ptr [ %1432, %1431 ], [ %1443, %1437 ]
  %1449 = phi ptr [ %1433, %1431 ], [ %1446, %1437 ]
  %1450 = add nsw i64 %1368, 2
  %1451 = icmp slt i64 %1450, %1364
  %1452 = trunc i64 %1368 to i32
  br i1 %1451, label %1367, label %1453

1453:                                             ; preds = %1447, %1335, %1332
  %1454 = phi i32 [ %1239, %1332 ], [ %1239, %1335 ], [ %1452, %1447 ]
  %1455 = phi ptr [ %1281, %1332 ], [ %1281, %1335 ], [ %1448, %1447 ]
  %1456 = phi ptr [ %467, %1332 ], [ %467, %1335 ], [ %1449, %1447 ]
  %1457 = icmp slt i32 %1454, %1240
  br i1 %1457, label %1458, label %1502

1458:                                             ; preds = %1453
  %1459 = sext i32 %1454 to i64
  %1460 = sext i32 %1240 to i64
  %1461 = extractelement <2 x double> %684, i64 0
  %1462 = extractelement <2 x double> %684, i64 1
  br label %1463

1463:                                             ; preds = %1458, %1497
  %1464 = phi i64 [ %1459, %1458 ], [ %1500, %1497 ]
  %1465 = phi ptr [ %1456, %1458 ], [ %1499, %1497 ]
  %1466 = phi ptr [ %1455, %1458 ], [ %1498, %1497 ]
  %1467 = getelementptr inbounds i16, ptr %421, i64 %1464
  %1468 = load i16, ptr %1467, align 2, !tbaa !44
  %1469 = zext i16 %1468 to i64
  %1470 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %1469
  %1471 = load double, ptr %1470, align 8, !tbaa !67
  %1472 = getelementptr inbounds %class.Vector, ptr %1470, i64 0, i32 1
  %1473 = load double, ptr %1472, align 8, !tbaa !66
  %1474 = getelementptr inbounds %class.Vector, ptr %1470, i64 0, i32 2
  %1475 = load double, ptr %1474, align 8, !tbaa !49
  %1476 = fsub double %1461, %1471
  %1477 = fmul double %1476, %1476
  %1478 = fsub double %1462, %1473
  %1479 = tail call double @llvm.fmuladd.f64(double %1478, double %1478, double %1477)
  %1480 = fsub double %687, %1475
  %1481 = tail call double @llvm.fmuladd.f64(double %1480, double %1480, double %1479)
  %1482 = fcmp ugt double %1481, %20
  br i1 %1482, label %1497, label %1483

1483:                                             ; preds = %1463
  %1484 = getelementptr inbounds %struct.CompAtomExt, ptr %45, i64 %1469
  %1485 = load i32, ptr %1484, align 4
  %1486 = shl i32 %1485, 2
  %1487 = ashr exact i32 %1486, 2
  %1488 = icmp slt i32 %1487, %697
  %1489 = icmp sgt i32 %1487, %699
  %1490 = select i1 %1488, i1 true, i1 %1489
  %1491 = select i1 %1490, ptr %1466, ptr %1465
  %1492 = zext i1 %1490 to i64
  %1493 = getelementptr inbounds i16, ptr %1466, i64 %1492
  %1494 = xor i1 %1490, true
  %1495 = zext i1 %1494 to i64
  %1496 = getelementptr inbounds i16, ptr %1465, i64 %1495
  store i16 %1468, ptr %1491, align 2, !tbaa !44
  br label %1497

1497:                                             ; preds = %1483, %1463
  %1498 = phi ptr [ %1466, %1463 ], [ %1493, %1483 ]
  %1499 = phi ptr [ %1465, %1463 ], [ %1496, %1483 ]
  %1500 = add nsw i64 %1464, 1
  %1501 = icmp eq i64 %1500, %1460
  br i1 %1501, label %1502, label %1463

1502:                                             ; preds = %1497, %1326, %1453, %1283, %1331
  %1503 = phi ptr [ %1281, %1331 ], [ %1281, %1283 ], [ %1455, %1453 ], [ %1327, %1326 ], [ %1498, %1497 ]
  %1504 = phi ptr [ %467, %1331 ], [ %467, %1283 ], [ %1456, %1453 ], [ %1328, %1326 ], [ %1499, %1497 ]
  %1505 = ptrtoint ptr %1504 to i64
  %1506 = sub i64 %1505, %643
  %1507 = lshr exact i64 %1506, 1
  %1508 = trunc i64 %1507 to i32
  %1509 = icmp sgt i32 %1508, 0
  br i1 %1509, label %1510, label %1610

1510:                                             ; preds = %1502
  %1511 = and i64 %1507, 4294967295
  %1512 = and i64 %1507, 1
  %1513 = icmp eq i64 %1511, 1
  br i1 %1513, label %1578, label %1514

1514:                                             ; preds = %1510
  %1515 = sub nsw i64 %1511, %1512
  br label %1516

1516:                                             ; preds = %1571, %1514
  %1517 = phi i64 [ 0, %1514 ], [ %1575, %1571 ]
  %1518 = phi ptr [ %1503, %1514 ], [ %1574, %1571 ]
  %1519 = phi ptr [ %329, %1514 ], [ %1573, %1571 ]
  %1520 = phi ptr [ %375, %1514 ], [ %1572, %1571 ]
  %1521 = phi i64 [ 0, %1514 ], [ %1576, %1571 ]
  %1522 = getelementptr inbounds i16, ptr %467, i64 %1517
  %1523 = load i16, ptr %1522, align 2, !tbaa !44
  %1524 = zext i16 %1523 to i64
  %1525 = getelementptr inbounds %struct.CompAtomExt, ptr %45, i64 %1524
  %1526 = load i32, ptr %1525, align 4
  %1527 = shl i32 %1526, 2
  %1528 = ashr exact i32 %1527, 2
  %1529 = sext i32 %1528 to i64
  %1530 = getelementptr inbounds i8, ptr %934, i64 %1529
  %1531 = load i8, ptr %1530, align 1, !tbaa !57
  %1532 = sext i8 %1531 to i32
  switch i32 %1532, label %1544 [
    i32 0, label %1533
    i32 1, label %1535
    i32 2, label %1537
  ]

1533:                                             ; preds = %1516
  %1534 = getelementptr inbounds i16, ptr %1518, i64 1
  br label %1539

1535:                                             ; preds = %1516
  %1536 = getelementptr inbounds i16, ptr %1519, i64 1
  br label %1539

1537:                                             ; preds = %1516
  %1538 = getelementptr inbounds i16, ptr %1520, i64 1
  br label %1539

1539:                                             ; preds = %1533, %1535, %1537
  %1540 = phi ptr [ %1520, %1537 ], [ %1519, %1535 ], [ %1518, %1533 ]
  %1541 = phi ptr [ %1538, %1537 ], [ %1520, %1535 ], [ %1520, %1533 ]
  %1542 = phi ptr [ %1519, %1537 ], [ %1536, %1535 ], [ %1519, %1533 ]
  %1543 = phi ptr [ %1518, %1537 ], [ %1518, %1535 ], [ %1534, %1533 ]
  store i16 %1523, ptr %1540, align 2, !tbaa !44
  br label %1544

1544:                                             ; preds = %1539, %1516
  %1545 = phi ptr [ %1520, %1516 ], [ %1541, %1539 ]
  %1546 = phi ptr [ %1519, %1516 ], [ %1542, %1539 ]
  %1547 = phi ptr [ %1518, %1516 ], [ %1543, %1539 ]
  %1548 = or i64 %1517, 1
  %1549 = getelementptr inbounds i16, ptr %467, i64 %1548
  %1550 = load i16, ptr %1549, align 2, !tbaa !44
  %1551 = zext i16 %1550 to i64
  %1552 = getelementptr inbounds %struct.CompAtomExt, ptr %45, i64 %1551
  %1553 = load i32, ptr %1552, align 4
  %1554 = shl i32 %1553, 2
  %1555 = ashr exact i32 %1554, 2
  %1556 = sext i32 %1555 to i64
  %1557 = getelementptr inbounds i8, ptr %934, i64 %1556
  %1558 = load i8, ptr %1557, align 1, !tbaa !57
  %1559 = sext i8 %1558 to i32
  switch i32 %1559, label %1571 [
    i32 0, label %1564
    i32 1, label %1562
    i32 2, label %1560
  ]

1560:                                             ; preds = %1544
  %1561 = getelementptr inbounds i16, ptr %1545, i64 1
  br label %1566

1562:                                             ; preds = %1544
  %1563 = getelementptr inbounds i16, ptr %1546, i64 1
  br label %1566

1564:                                             ; preds = %1544
  %1565 = getelementptr inbounds i16, ptr %1547, i64 1
  br label %1566

1566:                                             ; preds = %1564, %1562, %1560
  %1567 = phi ptr [ %1545, %1560 ], [ %1546, %1562 ], [ %1547, %1564 ]
  %1568 = phi ptr [ %1561, %1560 ], [ %1545, %1562 ], [ %1545, %1564 ]
  %1569 = phi ptr [ %1546, %1560 ], [ %1563, %1562 ], [ %1546, %1564 ]
  %1570 = phi ptr [ %1547, %1560 ], [ %1547, %1562 ], [ %1565, %1564 ]
  store i16 %1550, ptr %1567, align 2, !tbaa !44
  br label %1571

1571:                                             ; preds = %1566, %1544
  %1572 = phi ptr [ %1545, %1544 ], [ %1568, %1566 ]
  %1573 = phi ptr [ %1546, %1544 ], [ %1569, %1566 ]
  %1574 = phi ptr [ %1547, %1544 ], [ %1570, %1566 ]
  %1575 = add nuw nsw i64 %1517, 2
  %1576 = add i64 %1521, 2
  %1577 = icmp eq i64 %1576, %1515
  br i1 %1577, label %1578, label %1516

1578:                                             ; preds = %1571, %1510
  %1579 = phi ptr [ undef, %1510 ], [ %1572, %1571 ]
  %1580 = phi ptr [ undef, %1510 ], [ %1573, %1571 ]
  %1581 = phi ptr [ undef, %1510 ], [ %1574, %1571 ]
  %1582 = phi i64 [ 0, %1510 ], [ %1575, %1571 ]
  %1583 = phi ptr [ %1503, %1510 ], [ %1574, %1571 ]
  %1584 = phi ptr [ %329, %1510 ], [ %1573, %1571 ]
  %1585 = phi ptr [ %375, %1510 ], [ %1572, %1571 ]
  %1586 = icmp eq i64 %1512, 0
  br i1 %1586, label %1610, label %1587

1587:                                             ; preds = %1578
  %1588 = getelementptr inbounds i16, ptr %467, i64 %1582
  %1589 = load i16, ptr %1588, align 2, !tbaa !44
  %1590 = zext i16 %1589 to i64
  %1591 = getelementptr inbounds %struct.CompAtomExt, ptr %45, i64 %1590
  %1592 = load i32, ptr %1591, align 4
  %1593 = shl i32 %1592, 2
  %1594 = ashr exact i32 %1593, 2
  %1595 = sext i32 %1594 to i64
  %1596 = getelementptr inbounds i8, ptr %934, i64 %1595
  %1597 = load i8, ptr %1596, align 1, !tbaa !57
  %1598 = sext i8 %1597 to i32
  switch i32 %1598, label %1610 [
    i32 0, label %1603
    i32 1, label %1601
    i32 2, label %1599
  ]

1599:                                             ; preds = %1587
  %1600 = getelementptr inbounds i16, ptr %1585, i64 1
  br label %1605

1601:                                             ; preds = %1587
  %1602 = getelementptr inbounds i16, ptr %1584, i64 1
  br label %1605

1603:                                             ; preds = %1587
  %1604 = getelementptr inbounds i16, ptr %1583, i64 1
  br label %1605

1605:                                             ; preds = %1603, %1601, %1599
  %1606 = phi ptr [ %1585, %1599 ], [ %1584, %1601 ], [ %1583, %1603 ]
  %1607 = phi ptr [ %1600, %1599 ], [ %1585, %1601 ], [ %1585, %1603 ]
  %1608 = phi ptr [ %1584, %1599 ], [ %1602, %1601 ], [ %1584, %1603 ]
  %1609 = phi ptr [ %1583, %1599 ], [ %1583, %1601 ], [ %1604, %1603 ]
  store i16 %1589, ptr %1606, align 2, !tbaa !44
  br label %1610

1610:                                             ; preds = %1578, %1605, %1587, %1502
  %1611 = phi ptr [ %375, %1502 ], [ %1579, %1578 ], [ %1585, %1587 ], [ %1607, %1605 ]
  %1612 = phi ptr [ %329, %1502 ], [ %1580, %1578 ], [ %1584, %1587 ], [ %1608, %1605 ]
  %1613 = phi ptr [ %1503, %1502 ], [ %1581, %1578 ], [ %1583, %1587 ], [ %1609, %1605 ]
  %1614 = ptrtoint ptr %1613 to i64
  %1615 = ptrtoint ptr %1281 to i64
  %1616 = sub i64 %1614, %1615
  %1617 = lshr exact i64 %1616, 1
  %1618 = trunc i64 %1617 to i32
  %1619 = icmp eq i32 %1618, 0
  %1620 = shl i64 %1616, 31
  br i1 %1619, label %1626, label %1621

1621:                                             ; preds = %1610
  %1622 = add i64 %1620, -4294967296
  %1623 = ashr i64 %1622, 32
  %1624 = getelementptr inbounds i16, ptr %1281, i64 %1623
  %1625 = load i16, ptr %1624, align 2, !tbaa !44
  br label %1626

1626:                                             ; preds = %1610, %1621
  %1627 = phi i16 [ %1625, %1621 ], [ -1, %1610 ]
  %1628 = ashr i64 %1620, 32
  %1629 = getelementptr inbounds i16, ptr %1281, i64 %1628
  store i16 %1627, ptr %1629, align 2, !tbaa !44
  %1630 = trunc i64 %1617 to i16
  %1631 = add i16 %1630, 1
  %1632 = load i32, ptr %13, align 8, !tbaa !17
  %1633 = sext i32 %1632 to i64
  %1634 = getelementptr inbounds i16, ptr %1277, i64 %1633
  store i16 %1631, ptr %1634, align 2, !tbaa !44
  %1635 = add nsw i32 %1618, 2
  %1636 = add nsw i32 %1635, %1632
  %1637 = ptrtoint ptr %1612 to i64
  %1638 = sub i64 %1637, %644
  %1639 = lshr exact i64 %1638, 1
  %1640 = trunc i64 %1639 to i32
  %1641 = add nsw i32 %1636, 1
  %1642 = sext i32 %1641 to i64
  %1643 = getelementptr i16, ptr %1277, i64 %1642
  %1644 = icmp sgt i32 %1640, 0
  br i1 %1644, label %1645, label %1735

1645:                                             ; preds = %1626
  %1646 = and i64 %1639, 4294967295
  %1647 = icmp ult i64 %1646, 8
  br i1 %1647, label %1691, label %1648

1648:                                             ; preds = %1645
  %1649 = shl nsw i64 %1642, 1
  %1650 = add i64 %1649, %1278
  %1651 = sub i64 %1650, %644
  %1652 = icmp ult i64 %1651, 128
  br i1 %1652, label %1691, label %1653

1653:                                             ; preds = %1648
  %1654 = icmp ult i64 %1646, 64
  br i1 %1654, label %1678, label %1655

1655:                                             ; preds = %1653
  %1656 = and i64 %1639, 63
  %1657 = sub nsw i64 %1646, %1656
  br label %1658

1658:                                             ; preds = %1658, %1655
  %1659 = phi i64 [ 0, %1655 ], [ %1672, %1658 ]
  %1660 = getelementptr inbounds i16, ptr %329, i64 %1659
  %1661 = load <16 x i16>, ptr %1660, align 2, !tbaa !44
  %1662 = getelementptr inbounds i16, ptr %1660, i64 16
  %1663 = load <16 x i16>, ptr %1662, align 2, !tbaa !44
  %1664 = getelementptr inbounds i16, ptr %1660, i64 32
  %1665 = load <16 x i16>, ptr %1664, align 2, !tbaa !44
  %1666 = getelementptr inbounds i16, ptr %1660, i64 48
  %1667 = load <16 x i16>, ptr %1666, align 2, !tbaa !44
  %1668 = getelementptr inbounds i16, ptr %1643, i64 %1659
  store <16 x i16> %1661, ptr %1668, align 2, !tbaa !44
  %1669 = getelementptr inbounds i16, ptr %1668, i64 16
  store <16 x i16> %1663, ptr %1669, align 2, !tbaa !44
  %1670 = getelementptr inbounds i16, ptr %1668, i64 32
  store <16 x i16> %1665, ptr %1670, align 2, !tbaa !44
  %1671 = getelementptr inbounds i16, ptr %1668, i64 48
  store <16 x i16> %1667, ptr %1671, align 2, !tbaa !44
  %1672 = add nuw i64 %1659, 64
  %1673 = icmp eq i64 %1672, %1657
  br i1 %1673, label %1674, label %1658, !llvm.loop !244

1674:                                             ; preds = %1658
  %1675 = icmp eq i64 %1656, 0
  br i1 %1675, label %1729, label %1676

1676:                                             ; preds = %1674
  %1677 = icmp ult i64 %1656, 8
  br i1 %1677, label %1691, label %1678

1678:                                             ; preds = %1653, %1676
  %1679 = phi i64 [ %1657, %1676 ], [ 0, %1653 ]
  %1680 = and i64 %1639, 7
  %1681 = sub nsw i64 %1646, %1680
  br label %1682

1682:                                             ; preds = %1682, %1678
  %1683 = phi i64 [ %1679, %1678 ], [ %1687, %1682 ]
  %1684 = getelementptr inbounds i16, ptr %329, i64 %1683
  %1685 = load <8 x i16>, ptr %1684, align 2, !tbaa !44
  %1686 = getelementptr inbounds i16, ptr %1643, i64 %1683
  store <8 x i16> %1685, ptr %1686, align 2, !tbaa !44
  %1687 = add nuw i64 %1683, 8
  %1688 = icmp eq i64 %1687, %1681
  br i1 %1688, label %1689, label %1682, !llvm.loop !245

1689:                                             ; preds = %1682
  %1690 = icmp eq i64 %1680, 0
  br i1 %1690, label %1729, label %1691

1691:                                             ; preds = %1648, %1645, %1676, %1689
  %1692 = phi i64 [ 0, %1645 ], [ 0, %1648 ], [ %1657, %1676 ], [ %1681, %1689 ]
  %1693 = sub i64 %1639, %1692
  %1694 = xor i64 %1692, -1
  %1695 = add nsw i64 %1646, %1694
  %1696 = and i64 %1693, 3
  %1697 = icmp eq i64 %1696, 0
  br i1 %1697, label %1707, label %1698

1698:                                             ; preds = %1691, %1698
  %1699 = phi i64 [ %1704, %1698 ], [ %1692, %1691 ]
  %1700 = phi i64 [ %1705, %1698 ], [ 0, %1691 ]
  %1701 = getelementptr inbounds i16, ptr %329, i64 %1699
  %1702 = load i16, ptr %1701, align 2, !tbaa !44
  %1703 = getelementptr inbounds i16, ptr %1643, i64 %1699
  store i16 %1702, ptr %1703, align 2, !tbaa !44
  %1704 = add nuw nsw i64 %1699, 1
  %1705 = add i64 %1700, 1
  %1706 = icmp eq i64 %1705, %1696
  br i1 %1706, label %1707, label %1698, !llvm.loop !246

1707:                                             ; preds = %1698, %1691
  %1708 = phi i64 [ %1692, %1691 ], [ %1704, %1698 ]
  %1709 = icmp ult i64 %1695, 3
  br i1 %1709, label %1729, label %1710

1710:                                             ; preds = %1707, %1710
  %1711 = phi i64 [ %1727, %1710 ], [ %1708, %1707 ]
  %1712 = getelementptr inbounds i16, ptr %329, i64 %1711
  %1713 = load i16, ptr %1712, align 2, !tbaa !44
  %1714 = getelementptr inbounds i16, ptr %1643, i64 %1711
  store i16 %1713, ptr %1714, align 2, !tbaa !44
  %1715 = add nuw nsw i64 %1711, 1
  %1716 = getelementptr inbounds i16, ptr %329, i64 %1715
  %1717 = load i16, ptr %1716, align 2, !tbaa !44
  %1718 = getelementptr inbounds i16, ptr %1643, i64 %1715
  store i16 %1717, ptr %1718, align 2, !tbaa !44
  %1719 = add nuw nsw i64 %1711, 2
  %1720 = getelementptr inbounds i16, ptr %329, i64 %1719
  %1721 = load i16, ptr %1720, align 2, !tbaa !44
  %1722 = getelementptr inbounds i16, ptr %1643, i64 %1719
  store i16 %1721, ptr %1722, align 2, !tbaa !44
  %1723 = add nuw nsw i64 %1711, 3
  %1724 = getelementptr inbounds i16, ptr %329, i64 %1723
  %1725 = load i16, ptr %1724, align 2, !tbaa !44
  %1726 = getelementptr inbounds i16, ptr %1643, i64 %1723
  store i16 %1725, ptr %1726, align 2, !tbaa !44
  %1727 = add nuw nsw i64 %1711, 4
  %1728 = icmp eq i64 %1727, %1646
  br i1 %1728, label %1729, label %1710, !llvm.loop !247

1729:                                             ; preds = %1707, %1710, %1674, %1689
  %1730 = shl i64 %1638, 31
  %1731 = add i64 %1730, -4294967296
  %1732 = ashr i64 %1731, 32
  %1733 = getelementptr inbounds i16, ptr %1643, i64 %1732
  %1734 = load i16, ptr %1733, align 2, !tbaa !44
  br label %1735

1735:                                             ; preds = %1626, %1729
  %1736 = phi i64 [ %1639, %1729 ], [ 0, %1626 ]
  %1737 = phi i16 [ %1734, %1729 ], [ -1, %1626 ]
  %1738 = and i64 %1736, 4294967295
  %1739 = getelementptr inbounds i16, ptr %1643, i64 %1738
  store i16 %1737, ptr %1739, align 2, !tbaa !44
  %1740 = trunc i64 %1639 to i16
  %1741 = add i16 %1740, 1
  %1742 = sext i32 %1636 to i64
  %1743 = getelementptr inbounds i16, ptr %1277, i64 %1742
  store i16 %1741, ptr %1743, align 2, !tbaa !44
  %1744 = add nsw i32 %1640, 2
  %1745 = add nsw i32 %1744, %1636
  %1746 = ptrtoint ptr %1611 to i64
  %1747 = sub i64 %1746, %645
  %1748 = lshr exact i64 %1747, 1
  %1749 = trunc i64 %1748 to i32
  %1750 = add nsw i32 %1745, 1
  %1751 = sext i32 %1750 to i64
  %1752 = getelementptr i16, ptr %1277, i64 %1751
  %1753 = icmp sgt i32 %1749, 0
  br i1 %1753, label %1754, label %1844

1754:                                             ; preds = %1735
  %1755 = and i64 %1748, 4294967295
  %1756 = icmp ult i64 %1755, 8
  br i1 %1756, label %1800, label %1757

1757:                                             ; preds = %1754
  %1758 = shl nsw i64 %1751, 1
  %1759 = add i64 %1758, %1278
  %1760 = sub i64 %1759, %645
  %1761 = icmp ult i64 %1760, 128
  br i1 %1761, label %1800, label %1762

1762:                                             ; preds = %1757
  %1763 = icmp ult i64 %1755, 64
  br i1 %1763, label %1787, label %1764

1764:                                             ; preds = %1762
  %1765 = and i64 %1748, 63
  %1766 = sub nsw i64 %1755, %1765
  br label %1767

1767:                                             ; preds = %1767, %1764
  %1768 = phi i64 [ 0, %1764 ], [ %1781, %1767 ]
  %1769 = getelementptr inbounds i16, ptr %375, i64 %1768
  %1770 = load <16 x i16>, ptr %1769, align 2, !tbaa !44
  %1771 = getelementptr inbounds i16, ptr %1769, i64 16
  %1772 = load <16 x i16>, ptr %1771, align 2, !tbaa !44
  %1773 = getelementptr inbounds i16, ptr %1769, i64 32
  %1774 = load <16 x i16>, ptr %1773, align 2, !tbaa !44
  %1775 = getelementptr inbounds i16, ptr %1769, i64 48
  %1776 = load <16 x i16>, ptr %1775, align 2, !tbaa !44
  %1777 = getelementptr inbounds i16, ptr %1752, i64 %1768
  store <16 x i16> %1770, ptr %1777, align 2, !tbaa !44
  %1778 = getelementptr inbounds i16, ptr %1777, i64 16
  store <16 x i16> %1772, ptr %1778, align 2, !tbaa !44
  %1779 = getelementptr inbounds i16, ptr %1777, i64 32
  store <16 x i16> %1774, ptr %1779, align 2, !tbaa !44
  %1780 = getelementptr inbounds i16, ptr %1777, i64 48
  store <16 x i16> %1776, ptr %1780, align 2, !tbaa !44
  %1781 = add nuw i64 %1768, 64
  %1782 = icmp eq i64 %1781, %1766
  br i1 %1782, label %1783, label %1767, !llvm.loop !248

1783:                                             ; preds = %1767
  %1784 = icmp eq i64 %1765, 0
  br i1 %1784, label %1838, label %1785

1785:                                             ; preds = %1783
  %1786 = icmp ult i64 %1765, 8
  br i1 %1786, label %1800, label %1787

1787:                                             ; preds = %1762, %1785
  %1788 = phi i64 [ %1766, %1785 ], [ 0, %1762 ]
  %1789 = and i64 %1748, 7
  %1790 = sub nsw i64 %1755, %1789
  br label %1791

1791:                                             ; preds = %1791, %1787
  %1792 = phi i64 [ %1788, %1787 ], [ %1796, %1791 ]
  %1793 = getelementptr inbounds i16, ptr %375, i64 %1792
  %1794 = load <8 x i16>, ptr %1793, align 2, !tbaa !44
  %1795 = getelementptr inbounds i16, ptr %1752, i64 %1792
  store <8 x i16> %1794, ptr %1795, align 2, !tbaa !44
  %1796 = add nuw i64 %1792, 8
  %1797 = icmp eq i64 %1796, %1790
  br i1 %1797, label %1798, label %1791, !llvm.loop !249

1798:                                             ; preds = %1791
  %1799 = icmp eq i64 %1789, 0
  br i1 %1799, label %1838, label %1800

1800:                                             ; preds = %1757, %1754, %1785, %1798
  %1801 = phi i64 [ 0, %1754 ], [ 0, %1757 ], [ %1766, %1785 ], [ %1790, %1798 ]
  %1802 = sub i64 %1748, %1801
  %1803 = xor i64 %1801, -1
  %1804 = add nsw i64 %1755, %1803
  %1805 = and i64 %1802, 3
  %1806 = icmp eq i64 %1805, 0
  br i1 %1806, label %1816, label %1807

1807:                                             ; preds = %1800, %1807
  %1808 = phi i64 [ %1813, %1807 ], [ %1801, %1800 ]
  %1809 = phi i64 [ %1814, %1807 ], [ 0, %1800 ]
  %1810 = getelementptr inbounds i16, ptr %375, i64 %1808
  %1811 = load i16, ptr %1810, align 2, !tbaa !44
  %1812 = getelementptr inbounds i16, ptr %1752, i64 %1808
  store i16 %1811, ptr %1812, align 2, !tbaa !44
  %1813 = add nuw nsw i64 %1808, 1
  %1814 = add i64 %1809, 1
  %1815 = icmp eq i64 %1814, %1805
  br i1 %1815, label %1816, label %1807, !llvm.loop !250

1816:                                             ; preds = %1807, %1800
  %1817 = phi i64 [ %1801, %1800 ], [ %1813, %1807 ]
  %1818 = icmp ult i64 %1804, 3
  br i1 %1818, label %1838, label %1819

1819:                                             ; preds = %1816, %1819
  %1820 = phi i64 [ %1836, %1819 ], [ %1817, %1816 ]
  %1821 = getelementptr inbounds i16, ptr %375, i64 %1820
  %1822 = load i16, ptr %1821, align 2, !tbaa !44
  %1823 = getelementptr inbounds i16, ptr %1752, i64 %1820
  store i16 %1822, ptr %1823, align 2, !tbaa !44
  %1824 = add nuw nsw i64 %1820, 1
  %1825 = getelementptr inbounds i16, ptr %375, i64 %1824
  %1826 = load i16, ptr %1825, align 2, !tbaa !44
  %1827 = getelementptr inbounds i16, ptr %1752, i64 %1824
  store i16 %1826, ptr %1827, align 2, !tbaa !44
  %1828 = add nuw nsw i64 %1820, 2
  %1829 = getelementptr inbounds i16, ptr %375, i64 %1828
  %1830 = load i16, ptr %1829, align 2, !tbaa !44
  %1831 = getelementptr inbounds i16, ptr %1752, i64 %1828
  store i16 %1830, ptr %1831, align 2, !tbaa !44
  %1832 = add nuw nsw i64 %1820, 3
  %1833 = getelementptr inbounds i16, ptr %375, i64 %1832
  %1834 = load i16, ptr %1833, align 2, !tbaa !44
  %1835 = getelementptr inbounds i16, ptr %1752, i64 %1832
  store i16 %1834, ptr %1835, align 2, !tbaa !44
  %1836 = add nuw nsw i64 %1820, 4
  %1837 = icmp eq i64 %1836, %1755
  br i1 %1837, label %1838, label %1819, !llvm.loop !251

1838:                                             ; preds = %1816, %1819, %1783, %1798
  %1839 = shl i64 %1747, 31
  %1840 = add i64 %1839, -4294967296
  %1841 = ashr i64 %1840, 32
  %1842 = getelementptr inbounds i16, ptr %1752, i64 %1841
  %1843 = load i16, ptr %1842, align 2, !tbaa !44
  br label %1844

1844:                                             ; preds = %1735, %1838
  %1845 = phi i64 [ %1748, %1838 ], [ 0, %1735 ]
  %1846 = phi i16 [ %1843, %1838 ], [ -1, %1735 ]
  %1847 = and i64 %1845, 4294967295
  %1848 = getelementptr inbounds i16, ptr %1752, i64 %1847
  store i16 %1846, ptr %1848, align 2, !tbaa !44
  %1849 = trunc i64 %1748 to i16
  %1850 = add i16 %1849, 1
  %1851 = sext i32 %1745 to i64
  %1852 = getelementptr inbounds i16, ptr %1277, i64 %1851
  store i16 %1850, ptr %1852, align 2, !tbaa !44
  %1853 = add nsw i32 %1749, 2
  %1854 = add nsw i32 %1853, %1745
  %1855 = select i1 %142, i32 0, i32 %1854
  store i32 %1855, ptr %13, align 8
  br label %1886

1856:                                             ; preds = %681
  %1857 = load ptr, ptr %8, align 8, !tbaa !46
  %1858 = load i32, ptr %13, align 8, !tbaa !17
  %1859 = add i32 %1858, 1
  %1860 = sext i32 %1859 to i64
  %1861 = getelementptr inbounds i16, ptr %1857, i64 %1860
  %1862 = sext i32 %1858 to i64
  %1863 = getelementptr inbounds i16, ptr %1857, i64 %1862
  %1864 = load i16, ptr %1863, align 2, !tbaa !44
  %1865 = zext i16 %1864 to i32
  %1866 = add i32 %1859, %1865
  %1867 = add nsw i32 %1865, -1
  %1868 = add i32 %1866, 1
  %1869 = sext i32 %1868 to i64
  %1870 = getelementptr inbounds i16, ptr %1857, i64 %1869
  %1871 = sext i32 %1866 to i64
  %1872 = getelementptr inbounds i16, ptr %1857, i64 %1871
  %1873 = load i16, ptr %1872, align 2, !tbaa !44
  %1874 = zext i16 %1873 to i32
  %1875 = add i32 %1868, %1874
  %1876 = add nsw i32 %1874, -1
  %1877 = add i32 %1875, 1
  %1878 = sext i32 %1877 to i64
  %1879 = getelementptr inbounds i16, ptr %1857, i64 %1878
  %1880 = sext i32 %1875 to i64
  %1881 = getelementptr inbounds i16, ptr %1857, i64 %1880
  %1882 = load i16, ptr %1881, align 2, !tbaa !44
  %1883 = zext i16 %1882 to i32
  %1884 = add i32 %1877, %1883
  store i32 %1884, ptr %13, align 8, !tbaa !17
  %1885 = add nsw i32 %1883, -1
  br label %1886

1886:                                             ; preds = %1844, %1856
  %1887 = phi ptr [ %1861, %1856 ], [ %1281, %1844 ]
  %1888 = phi i32 [ %1867, %1856 ], [ %1618, %1844 ]
  %1889 = phi ptr [ %1870, %1856 ], [ %1643, %1844 ]
  %1890 = phi i32 [ %1876, %1856 ], [ %1640, %1844 ]
  %1891 = phi ptr [ %1879, %1856 ], [ %1752, %1844 ]
  %1892 = phi i32 [ %1885, %1856 ], [ %1749, %1844 ]
  %1893 = phi i32 [ %664, %1856 ], [ %1239, %1844 ]
  %1894 = phi i32 [ %663, %1856 ], [ %1240, %1844 ]
  %1895 = phi i32 [ %662, %1856 ], [ %1241, %1844 ]
  %1896 = phi i32 [ %661, %1856 ], [ %1242, %1844 ]
  %1897 = phi ptr [ %659, %1856 ], [ %935, %1844 ]
  %1898 = phi ptr [ %658, %1856 ], [ %936, %1844 ]
  %1899 = phi ptr [ %657, %1856 ], [ %937, %1844 ]
  %1900 = getelementptr inbounds %struct.CompAtom, ptr %39, i64 %666, i32 1
  %1901 = load float, ptr %1900, align 8, !tbaa !79
  %1902 = fpext float %1901 to double
  %1903 = fmul double %1902, 0x4074C104816F0069
  %1904 = fmul double %28, %1903
  %1905 = fmul double %24, %1904
  %1906 = getelementptr inbounds %struct.CompAtom, ptr %39, i64 %666, i32 2
  %1907 = load i16, ptr %1906, align 4, !tbaa !80
  %1908 = sext i16 %1907 to i32
  %1909 = load ptr, ptr %646, align 8, !tbaa !81
  %1910 = load i32, ptr %647, align 8, !tbaa !83
  %1911 = shl nsw i32 %1908, 1
  %1912 = mul i32 %1911, %1910
  %1913 = zext i32 %1912 to i64
  %1914 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %1909, i64 %1913
  %1915 = load double, ptr @_ZN20ComputeNonbondedUtil7cutoff2E, align 8, !tbaa !19
  %1916 = extractelement <2 x double> %684, i64 0
  %1917 = extractelement <2 x double> %684, i64 1
  %1918 = tail call noundef i32 @_Z22pairlist_from_pairlistddddPK8CompAtomPKtiPtdPd(double noundef %1915, double noundef %1916, double noundef %1917, double noundef %687, ptr noundef %41, ptr noundef nonnull %1887, i32 noundef %1888, ptr noundef %94, double noundef %31, ptr noundef %140)
  %1919 = icmp sgt i32 %1918, 0
  br i1 %1919, label %1920, label %2010

1920:                                             ; preds = %1886
  %1921 = load ptr, ptr @_ZN20ComputeNonbondedUtil8r2_tableE, align 8, !tbaa !23
  %1922 = zext i32 %1918 to i64
  br label %1923

1923:                                             ; preds = %1920, %1923
  %1924 = phi i64 [ 0, %1920 ], [ %2008, %1923 ]
  %1925 = phi double [ 0.000000e+00, %1920 ], [ %2004, %1923 ]
  %1926 = phi <2 x double> [ zeroinitializer, %1920 ], [ %2000, %1923 ]
  %1927 = shl nuw nsw i64 %1924, 1
  %1928 = getelementptr inbounds i32, ptr %141, i64 %1927
  %1929 = load i32, ptr %1928, align 4, !tbaa !5
  %1930 = ashr i32 %1929, 14
  %1931 = add nsw i32 %1930, %34
  %1932 = getelementptr inbounds i16, ptr %94, i64 %1924
  %1933 = load i16, ptr %1932, align 2, !tbaa !44
  %1934 = zext i16 %1933 to i64
  %1935 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %1934
  %1936 = getelementptr inbounds double, ptr %140, i64 %1924
  %1937 = load double, ptr %1936, align 8, !tbaa !19
  %1938 = sext i32 %1931 to i64
  %1939 = getelementptr inbounds double, ptr %1921, i64 %1938
  %1940 = load double, ptr %1939, align 8, !tbaa !19
  %1941 = fsub double %1937, %1940
  %1942 = shl nsw i32 %1931, 4
  %1943 = sext i32 %1942 to i64
  %1944 = getelementptr inbounds double, ptr %27, i64 %1943
  %1945 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %1934, i32 2
  %1946 = load i16, ptr %1945, align 4, !tbaa !80
  %1947 = sext i16 %1946 to i32
  %1948 = shl nsw i32 %1947, 1
  %1949 = sext i32 %1948 to i64
  %1950 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %1914, i64 %1949
  %1951 = getelementptr inbounds %class.Vector, ptr %625, i64 %1934
  %1952 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %1934, i32 1
  %1953 = load float, ptr %1952, align 8, !tbaa !79
  %1954 = fpext float %1953 to double
  %1955 = fmul double %1905, %1954
  %1956 = getelementptr inbounds %class.Vector, ptr %1935, i64 0, i32 2
  %1957 = load double, ptr %1956, align 8, !tbaa !49
  %1958 = fsub double %687, %1957
  %1959 = load double, ptr %1950, align 8, !tbaa !84
  %1960 = fmul double %28, %1959
  %1961 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %1914, i64 %1949, i32 1
  %1962 = load double, ptr %1961, align 8, !tbaa !86
  %1963 = load double, ptr %1944, align 8, !tbaa !19
  %1964 = getelementptr inbounds double, ptr %1944, i64 2
  %1965 = load double, ptr %1964, align 8, !tbaa !19
  %1966 = fmul double %1962, %648
  %1967 = fmul double %1966, %1965
  %1968 = tail call double @llvm.fmuladd.f64(double %1960, double %1963, double %1967)
  %1969 = getelementptr inbounds double, ptr %1944, i64 1
  %1970 = load double, ptr %1969, align 8, !tbaa !19
  %1971 = getelementptr inbounds double, ptr %1944, i64 3
  %1972 = load double, ptr %1971, align 8, !tbaa !19
  %1973 = fmul double %1966, %1972
  %1974 = tail call double @llvm.fmuladd.f64(double %1960, double %1970, double %1973)
  %1975 = getelementptr inbounds double, ptr %1944, i64 4
  %1976 = load double, ptr %1975, align 8, !tbaa !19
  %1977 = getelementptr inbounds double, ptr %1944, i64 6
  %1978 = load double, ptr %1977, align 8, !tbaa !19
  %1979 = fmul double %1966, %1978
  %1980 = tail call double @llvm.fmuladd.f64(double %1960, double %1976, double %1979)
  %1981 = getelementptr inbounds double, ptr %1944, i64 8
  %1982 = load double, ptr %1981, align 8, !tbaa !19
  %1983 = getelementptr inbounds double, ptr %1944, i64 9
  %1984 = load double, ptr %1983, align 8, !tbaa !19
  %1985 = getelementptr inbounds double, ptr %1944, i64 10
  %1986 = load double, ptr %1985, align 8, !tbaa !19
  %1987 = fmul double %1955, %1982
  %1988 = fmul double %1955, %1984
  %1989 = fmul double %1955, %1986
  %1990 = fadd double %1968, %1987
  %1991 = fadd double %1974, %1988
  %1992 = fadd double %1980, %1989
  %1993 = tail call double @llvm.fmuladd.f64(double %1941, double %1990, double %1991)
  %1994 = tail call double @llvm.fmuladd.f64(double %1993, double %1941, double %1992)
  %1995 = load <2 x double>, ptr %1935, align 8, !tbaa !19
  %1996 = fsub <2 x double> %684, %1995
  %1997 = insertelement <2 x double> poison, double %1994, i64 0
  %1998 = shufflevector <2 x double> %1997, <2 x double> poison, <2 x i32> zeroinitializer
  %1999 = fmul <2 x double> %1996, %1998
  %2000 = fadd <2 x double> %1926, %1999
  %2001 = load <2 x double>, ptr %1951, align 8, !tbaa !19
  %2002 = fsub <2 x double> %2001, %1999
  store <2 x double> %2002, ptr %1951, align 8, !tbaa !19
  %2003 = fmul double %1958, %1994
  %2004 = fadd double %1925, %2003
  %2005 = getelementptr inbounds %class.Vector, ptr %625, i64 %1934, i32 2
  %2006 = load double, ptr %2005, align 8, !tbaa !87
  %2007 = fsub double %2006, %2003
  store double %2007, ptr %2005, align 8, !tbaa !87
  %2008 = add nuw nsw i64 %1924, 1
  %2009 = icmp eq i64 %2008, %1922
  br i1 %2009, label %2010, label %1923

2010:                                             ; preds = %1923, %1886
  %2011 = phi double [ 0.000000e+00, %1886 ], [ %2004, %1923 ]
  %2012 = phi <2 x double> [ zeroinitializer, %1886 ], [ %2000, %1923 ]
  %2013 = load double, ptr @_ZN20ComputeNonbondedUtil7cutoff2E, align 8, !tbaa !19
  %2014 = tail call noundef i32 @_Z22pairlist_from_pairlistddddPK8CompAtomPKtiPtdPd(double noundef %2013, double noundef %1916, double noundef %1917, double noundef %687, ptr noundef %41, ptr noundef %1891, i32 noundef %1892, ptr noundef %94, double noundef %31, ptr noundef %140)
  %2015 = add nsw i32 %2014, %655
  %2016 = icmp sgt i32 %2014, 0
  br i1 %2016, label %2017, label %2117

2017:                                             ; preds = %2010
  %2018 = load ptr, ptr @_ZN20ComputeNonbondedUtil8r2_tableE, align 8, !tbaa !23
  %2019 = zext i32 %2014 to i64
  br label %2020

2020:                                             ; preds = %2017, %2020
  %2021 = phi i64 [ 0, %2017 ], [ %2115, %2020 ]
  %2022 = phi double [ %2011, %2017 ], [ %2111, %2020 ]
  %2023 = phi <2 x double> [ %2012, %2017 ], [ %2107, %2020 ]
  %2024 = shl nuw nsw i64 %2021, 1
  %2025 = getelementptr inbounds i32, ptr %141, i64 %2024
  %2026 = load i32, ptr %2025, align 4, !tbaa !5
  %2027 = ashr i32 %2026, 14
  %2028 = add nsw i32 %2027, %34
  %2029 = getelementptr inbounds i16, ptr %94, i64 %2021
  %2030 = load i16, ptr %2029, align 2, !tbaa !44
  %2031 = zext i16 %2030 to i64
  %2032 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %2031
  %2033 = getelementptr inbounds double, ptr %140, i64 %2021
  %2034 = load double, ptr %2033, align 8, !tbaa !19
  %2035 = sext i32 %2028 to i64
  %2036 = getelementptr inbounds double, ptr %2018, i64 %2035
  %2037 = load double, ptr %2036, align 8, !tbaa !19
  %2038 = fsub double %2034, %2037
  %2039 = shl nsw i32 %2028, 4
  %2040 = sext i32 %2039 to i64
  %2041 = getelementptr inbounds double, ptr %27, i64 %2040
  %2042 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %2031, i32 2
  %2043 = load i16, ptr %2042, align 4, !tbaa !80
  %2044 = sext i16 %2043 to i32
  %2045 = shl nsw i32 %2044, 1
  %2046 = sext i32 %2045 to i64
  %2047 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %1914, i64 %2046
  %2048 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %2047, i64 1
  %2049 = getelementptr inbounds %class.Vector, ptr %625, i64 %2031
  %2050 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %2031, i32 1
  %2051 = load float, ptr %2050, align 8, !tbaa !79
  %2052 = fpext float %2051 to double
  %2053 = fmul double %1905, %2052
  %2054 = getelementptr inbounds %class.Vector, ptr %2032, i64 0, i32 2
  %2055 = load double, ptr %2054, align 8, !tbaa !49
  %2056 = fsub double %687, %2055
  %2057 = load double, ptr %2048, align 8, !tbaa !84
  %2058 = fmul double %28, %2057
  %2059 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %2047, i64 1, i32 1
  %2060 = load double, ptr %2059, align 8, !tbaa !86
  %2061 = load double, ptr %2041, align 8, !tbaa !19
  %2062 = getelementptr inbounds double, ptr %2041, i64 2
  %2063 = load double, ptr %2062, align 8, !tbaa !19
  %2064 = fmul double %2060, %648
  %2065 = fmul double %2064, %2063
  %2066 = tail call double @llvm.fmuladd.f64(double %2058, double %2061, double %2065)
  %2067 = getelementptr inbounds double, ptr %2041, i64 1
  %2068 = load double, ptr %2067, align 8, !tbaa !19
  %2069 = getelementptr inbounds double, ptr %2041, i64 3
  %2070 = load double, ptr %2069, align 8, !tbaa !19
  %2071 = fmul double %2064, %2070
  %2072 = tail call double @llvm.fmuladd.f64(double %2058, double %2068, double %2071)
  %2073 = getelementptr inbounds double, ptr %2041, i64 4
  %2074 = load double, ptr %2073, align 8, !tbaa !19
  %2075 = getelementptr inbounds double, ptr %2041, i64 6
  %2076 = load double, ptr %2075, align 8, !tbaa !19
  %2077 = fmul double %2064, %2076
  %2078 = tail call double @llvm.fmuladd.f64(double %2058, double %2074, double %2077)
  %2079 = getelementptr inbounds double, ptr %2041, i64 8
  %2080 = load double, ptr %2079, align 8, !tbaa !19
  %2081 = getelementptr inbounds double, ptr %2041, i64 9
  %2082 = load double, ptr %2081, align 8, !tbaa !19
  %2083 = getelementptr inbounds double, ptr %2041, i64 10
  %2084 = load double, ptr %2083, align 8, !tbaa !19
  %2085 = getelementptr inbounds double, ptr %2041, i64 12
  %2086 = load double, ptr %2085, align 8, !tbaa !19
  %2087 = tail call double @llvm.fmuladd.f64(double %649, double %2086, double %2080)
  %2088 = getelementptr inbounds double, ptr %2041, i64 13
  %2089 = load double, ptr %2088, align 8, !tbaa !19
  %2090 = tail call double @llvm.fmuladd.f64(double %649, double %2089, double %2082)
  %2091 = getelementptr inbounds double, ptr %2041, i64 14
  %2092 = load double, ptr %2091, align 8, !tbaa !19
  %2093 = tail call double @llvm.fmuladd.f64(double %649, double %2092, double %2084)
  %2094 = fmul double %2053, %2087
  %2095 = fmul double %2053, %2090
  %2096 = fmul double %2053, %2093
  %2097 = fadd double %2066, %2094
  %2098 = fadd double %2072, %2095
  %2099 = fadd double %2078, %2096
  %2100 = tail call double @llvm.fmuladd.f64(double %2038, double %2097, double %2098)
  %2101 = tail call double @llvm.fmuladd.f64(double %2100, double %2038, double %2099)
  %2102 = load <2 x double>, ptr %2032, align 8, !tbaa !19
  %2103 = fsub <2 x double> %684, %2102
  %2104 = insertelement <2 x double> poison, double %2101, i64 0
  %2105 = shufflevector <2 x double> %2104, <2 x double> poison, <2 x i32> zeroinitializer
  %2106 = fmul <2 x double> %2103, %2105
  %2107 = fadd <2 x double> %2023, %2106
  %2108 = load <2 x double>, ptr %2049, align 8, !tbaa !19
  %2109 = fsub <2 x double> %2108, %2106
  store <2 x double> %2109, ptr %2049, align 8, !tbaa !19
  %2110 = fmul double %2056, %2101
  %2111 = fadd double %2022, %2110
  %2112 = getelementptr inbounds %class.Vector, ptr %625, i64 %2031, i32 2
  %2113 = load double, ptr %2112, align 8, !tbaa !87
  %2114 = fsub double %2113, %2110
  store double %2114, ptr %2112, align 8, !tbaa !87
  %2115 = add nuw nsw i64 %2021, 1
  %2116 = icmp eq i64 %2115, %2019
  br i1 %2116, label %2117, label %2020

2117:                                             ; preds = %2020, %2010
  %2118 = phi double [ %2011, %2010 ], [ %2111, %2020 ]
  %2119 = phi <2 x double> [ %2012, %2010 ], [ %2107, %2020 ]
  %2120 = load double, ptr @_ZN20ComputeNonbondedUtil7cutoff2E, align 8, !tbaa !19
  %2121 = tail call noundef i32 @_Z22pairlist_from_pairlistddddPK8CompAtomPKtiPtdPd(double noundef %2120, double noundef %1916, double noundef %1917, double noundef %687, ptr noundef %41, ptr noundef %1889, i32 noundef %1890, ptr noundef %94, double noundef %31, ptr noundef %140)
  %2122 = add nsw i32 %2015, %2121
  %2123 = icmp sgt i32 %2121, 0
  br i1 %2123, label %2124, label %2192

2124:                                             ; preds = %2117
  %2125 = load ptr, ptr @_ZN20ComputeNonbondedUtil8r2_tableE, align 8, !tbaa !23
  %2126 = zext i32 %2121 to i64
  br label %2127

2127:                                             ; preds = %2124, %2127
  %2128 = phi i64 [ 0, %2124 ], [ %2190, %2127 ]
  %2129 = phi double [ %2118, %2124 ], [ %2186, %2127 ]
  %2130 = phi <2 x double> [ %2119, %2124 ], [ %2182, %2127 ]
  %2131 = shl nuw nsw i64 %2128, 1
  %2132 = getelementptr inbounds i32, ptr %141, i64 %2131
  %2133 = load i32, ptr %2132, align 4, !tbaa !5
  %2134 = ashr i32 %2133, 14
  %2135 = add nsw i32 %2134, %34
  %2136 = getelementptr inbounds i16, ptr %94, i64 %2128
  %2137 = load i16, ptr %2136, align 2, !tbaa !44
  %2138 = zext i16 %2137 to i64
  %2139 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %2138
  %2140 = getelementptr inbounds double, ptr %140, i64 %2128
  %2141 = load double, ptr %2140, align 8, !tbaa !19
  %2142 = sext i32 %2135 to i64
  %2143 = getelementptr inbounds double, ptr %2125, i64 %2142
  %2144 = load double, ptr %2143, align 8, !tbaa !19
  %2145 = fsub double %2141, %2144
  %2146 = shl nsw i32 %2135, 4
  %2147 = sext i32 %2146 to i64
  %2148 = getelementptr inbounds double, ptr %27, i64 %2147
  %2149 = getelementptr inbounds %class.Vector, ptr %625, i64 %2138
  %2150 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %2138, i32 1
  %2151 = load float, ptr %2150, align 8, !tbaa !79
  %2152 = fpext float %2151 to double
  %2153 = fmul double %1905, %2152
  %2154 = getelementptr inbounds %class.Vector, ptr %2139, i64 0, i32 2
  %2155 = load double, ptr %2154, align 8, !tbaa !49
  %2156 = fsub double %687, %2155
  %2157 = getelementptr inbounds double, ptr %2148, i64 8
  %2158 = load double, ptr %2157, align 8, !tbaa !19
  %2159 = getelementptr inbounds double, ptr %2148, i64 9
  %2160 = load double, ptr %2159, align 8, !tbaa !19
  %2161 = getelementptr inbounds double, ptr %2148, i64 10
  %2162 = load double, ptr %2161, align 8, !tbaa !19
  %2163 = getelementptr inbounds double, ptr %2148, i64 12
  %2164 = load double, ptr %2163, align 8, !tbaa !19
  %2165 = fsub double %2158, %2164
  %2166 = getelementptr inbounds double, ptr %2148, i64 13
  %2167 = load double, ptr %2166, align 8, !tbaa !19
  %2168 = fsub double %2160, %2167
  %2169 = getelementptr inbounds double, ptr %2148, i64 14
  %2170 = load double, ptr %2169, align 8, !tbaa !19
  %2171 = fsub double %2162, %2170
  %2172 = fmul double %2153, %2165
  %2173 = fmul double %2153, %2168
  %2174 = fmul double %2153, %2171
  %2175 = tail call double @llvm.fmuladd.f64(double %2145, double %2172, double %2173)
  %2176 = tail call double @llvm.fmuladd.f64(double %2175, double %2145, double %2174)
  %2177 = load <2 x double>, ptr %2139, align 8, !tbaa !19
  %2178 = fsub <2 x double> %684, %2177
  %2179 = insertelement <2 x double> poison, double %2176, i64 0
  %2180 = shufflevector <2 x double> %2179, <2 x double> poison, <2 x i32> zeroinitializer
  %2181 = fmul <2 x double> %2178, %2180
  %2182 = fadd <2 x double> %2130, %2181
  %2183 = load <2 x double>, ptr %2149, align 8, !tbaa !19
  %2184 = fsub <2 x double> %2183, %2181
  store <2 x double> %2184, ptr %2149, align 8, !tbaa !19
  %2185 = fmul double %2156, %2176
  %2186 = fadd double %2129, %2185
  %2187 = getelementptr inbounds %class.Vector, ptr %625, i64 %2138, i32 2
  %2188 = load double, ptr %2187, align 8, !tbaa !87
  %2189 = fsub double %2188, %2185
  store double %2189, ptr %2187, align 8, !tbaa !87
  %2190 = add nuw nsw i64 %2128, 1
  %2191 = icmp eq i64 %2190, %2126
  br i1 %2191, label %2192, label %2127

2192:                                             ; preds = %2127, %2117
  %2193 = phi double [ %2118, %2117 ], [ %2186, %2127 ]
  %2194 = phi <2 x double> [ %2119, %2117 ], [ %2182, %2127 ]
  %2195 = getelementptr inbounds %class.Vector, ptr %625, i64 %666
  %2196 = load <2 x double>, ptr %2195, align 8, !tbaa !19
  %2197 = fadd <2 x double> %2194, %2196
  store <2 x double> %2197, ptr %2195, align 8, !tbaa !19
  %2198 = getelementptr inbounds %class.Vector, ptr %625, i64 %666, i32 2
  %2199 = load double, ptr %2198, align 8, !tbaa !87
  %2200 = fadd double %2193, %2199
  store double %2200, ptr %2198, align 8, !tbaa !87
  br label %2201

2201:                                             ; preds = %2192, %677
  %2202 = phi i32 [ %678, %677 ], [ %682, %2192 ]
  %2203 = phi i32 [ %664, %677 ], [ %1893, %2192 ]
  %2204 = phi i32 [ %663, %677 ], [ %1894, %2192 ]
  %2205 = phi i32 [ %662, %677 ], [ %1895, %2192 ]
  %2206 = phi i32 [ %661, %677 ], [ %1896, %2192 ]
  %2207 = phi i32 [ %660, %677 ], [ %689, %2192 ]
  %2208 = phi ptr [ %659, %677 ], [ %1897, %2192 ]
  %2209 = phi ptr [ %658, %677 ], [ %1898, %2192 ]
  %2210 = phi ptr [ %657, %677 ], [ %1899, %2192 ]
  %2211 = phi i32 [ %680, %677 ], [ %656, %2192 ]
  %2212 = phi i32 [ %655, %677 ], [ %2122, %2192 ]
  %2213 = add nsw i32 %2211, 1
  %2214 = icmp slt i32 %2213, %631
  br i1 %2214, label %654, label %2215

2215:                                             ; preds = %2201, %619
  %2216 = phi ptr [ null, %619 ], [ %2210, %2201 ]
  %2217 = phi i32 [ 0, %619 ], [ %2212, %2201 ]
  %2218 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 4
  %2219 = load ptr, ptr %2218, align 8, !tbaa !23
  %2220 = icmp sgt i32 %36, 0
  br i1 %2220, label %2221, label %2223

2221:                                             ; preds = %2215
  %2222 = zext i32 %36 to i64
  br label %2246

2223:                                             ; preds = %2246, %2215
  %2224 = phi <4 x double> [ zeroinitializer, %2215 ], [ %2276, %2246 ]
  %2225 = phi <2 x double> [ zeroinitializer, %2215 ], [ %2271, %2246 ]
  %2226 = sitofp i32 %2217 to double
  %2227 = getelementptr inbounds double, ptr %6, i64 22
  %2228 = load double, ptr %2227, align 8, !tbaa !19
  %2229 = fadd double %2228, %2226
  store double %2229, ptr %2227, align 8, !tbaa !19
  %2230 = getelementptr inbounds double, ptr %6, i64 12
  %2231 = load <4 x double>, ptr %2230, align 8, !tbaa !19
  %2232 = shufflevector <2 x double> %2225, <2 x double> poison, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>
  %2233 = shufflevector <4 x double> %2232, <4 x double> %2224, <4 x i32> <i32 0, i32 1, i32 7, i32 poison>
  %2234 = shufflevector <4 x double> %2233, <4 x double> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 1>
  %2235 = fadd <4 x double> %2234, %2231
  store <4 x double> %2235, ptr %2230, align 8, !tbaa !19
  %2236 = getelementptr inbounds double, ptr %6, i64 16
  %2237 = load <4 x double>, ptr %2236, align 8, !tbaa !19
  %2238 = shufflevector <4 x double> %2224, <4 x double> poison, <4 x i32> <i32 2, i32 1, i32 3, i32 poison>
  %2239 = shufflevector <4 x double> %2238, <4 x double> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 1>
  %2240 = fadd <4 x double> %2239, %2237
  store <4 x double> %2240, ptr %2236, align 8, !tbaa !19
  %2241 = getelementptr inbounds double, ptr %6, i64 20
  %2242 = load double, ptr %2241, align 8, !tbaa !19
  %2243 = extractelement <4 x double> %2224, i64 0
  %2244 = fadd double %2243, %2242
  store double %2244, ptr %2241, align 8, !tbaa !19
  %2245 = icmp eq ptr %2216, null
  br i1 %2245, label %2280, label %2279

2246:                                             ; preds = %2221, %2246
  %2247 = phi i64 [ 0, %2221 ], [ %2277, %2246 ]
  %2248 = phi <4 x double> [ zeroinitializer, %2221 ], [ %2276, %2246 ]
  %2249 = phi <2 x double> [ zeroinitializer, %2221 ], [ %2271, %2246 ]
  %2250 = getelementptr inbounds %class.Vector, ptr %625, i64 %2247
  %2251 = getelementptr inbounds %class.Vector, ptr %2219, i64 %2247
  %2252 = getelementptr inbounds %class.Vector, ptr %625, i64 %2247, i32 1
  %2253 = load <2 x double>, ptr %2250, align 8, !tbaa !19
  %2254 = load <2 x double>, ptr %2251, align 8, !tbaa !19
  %2255 = fadd <2 x double> %2253, %2254
  store <2 x double> %2255, ptr %2251, align 8, !tbaa !19
  %2256 = getelementptr inbounds %class.Vector, ptr %625, i64 %2247, i32 2
  %2257 = load double, ptr %2256, align 8, !tbaa !87
  %2258 = getelementptr inbounds %class.Vector, ptr %2219, i64 %2247, i32 2
  %2259 = load double, ptr %2258, align 8, !tbaa !87
  %2260 = fadd double %2257, %2259
  store double %2260, ptr %2258, align 8, !tbaa !87
  %2261 = load double, ptr %2250, align 8, !tbaa !191
  %2262 = getelementptr inbounds %struct.CompAtom, ptr %39, i64 %2247
  %2263 = load double, ptr %2262, align 8, !tbaa !67
  %2264 = getelementptr inbounds %class.Vector, ptr %2262, i64 0, i32 1
  %2265 = load <2 x double>, ptr %2264, align 8, !tbaa !19
  %2266 = shufflevector <2 x double> %2265, <2 x double> poison, <4 x i32> <i32 1, i32 1, i32 0, i32 1>
  %2267 = insertelement <2 x double> poison, double %2261, i64 0
  %2268 = shufflevector <2 x double> %2267, <2 x double> poison, <2 x i32> zeroinitializer
  %2269 = shufflevector <2 x double> %2265, <2 x double> poison, <2 x i32> <i32 poison, i32 0>
  %2270 = insertelement <2 x double> %2269, double %2263, i64 0
  %2271 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2268, <2 x double> %2270, <2 x double> %2249)
  %2272 = load <2 x double>, ptr %2252, align 8, !tbaa !19
  %2273 = shufflevector <2 x double> %2272, <2 x double> poison, <4 x i32> <i32 1, i32 0, i32 poison, i32 poison>
  %2274 = insertelement <4 x double> %2273, double %2261, i64 3
  %2275 = shufflevector <4 x double> %2274, <4 x double> poison, <4 x i32> <i32 0, i32 1, i32 1, i32 3>
  %2276 = tail call <4 x double> @llvm.fmuladd.v4f64(<4 x double> %2275, <4 x double> %2266, <4 x double> %2248)
  %2277 = add nuw nsw i64 %2247, 1
  %2278 = icmp eq i64 %2277, %2222
  br i1 %2278, label %2223, label %2246

2279:                                             ; preds = %2223
  tail call void @_ZdaPv(ptr noundef nonnull %2216) #10
  br label %2280

2280:                                             ; preds = %2223, %2279, %1
  ret void
}

; Function Attrs: sspstrong uwtable
define dso_local void @_ZN20ComputeNonbondedUtil32calc_self_energy_merge_fullelectEP9nonbonded(ptr nocapture noundef readonly %0) local_unnamed_addr #0 align 2 {
  %2 = load i32, ptr @_ZN20ComputeNonbondedUtil8commOnlyE, align 4, !tbaa !5
  %3 = icmp eq i32 %2, 0
  br i1 %3, label %4, label %2362

4:                                                ; preds = %1
  %5 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 7
  %6 = load ptr, ptr %5, align 8, !tbaa !9
  %7 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 10
  %8 = load ptr, ptr %7, align 8, !tbaa !14
  %9 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 11
  %10 = load i32, ptr %9, align 8, !tbaa !15
  %11 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 12
  %12 = load i32, ptr %11, align 4, !tbaa !16
  %13 = getelementptr inbounds %class.Pairlists, ptr %8, i64 0, i32 1
  store i32 0, ptr %13, align 8, !tbaa !17
  %14 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 6
  %15 = load <2 x double>, ptr %14, align 8, !tbaa !19
  %16 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 6, i32 2
  %17 = load double, ptr %16, align 8, !tbaa !20
  %18 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 13
  %19 = load double, ptr %18, align 8, !tbaa !21
  %20 = fmul double %19, %19
  %21 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 14
  %22 = load double, ptr %21, align 8, !tbaa !22
  %23 = fmul double %22, %22
  %24 = load double, ptr @_ZN20ComputeNonbondedUtil12dielectric_1E, align 8, !tbaa !19
  %25 = load ptr, ptr @_ZN20ComputeNonbondedUtil7ljTableE, align 8, !tbaa !23
  %26 = load ptr, ptr @_ZN20ComputeNonbondedUtil3molE, align 8, !tbaa !23
  %27 = load ptr, ptr @_ZN20ComputeNonbondedUtil13table_noshortE, align 8, !tbaa !23
  %28 = load double, ptr @_ZN20ComputeNonbondedUtil7scalingE, align 8, !tbaa !19
  %29 = load double, ptr @_ZN20ComputeNonbondedUtil7scale14E, align 8, !tbaa !19
  %30 = fsub double 1.000000e+00, %29
  %31 = load double, ptr @_ZN20ComputeNonbondedUtil8r2_deltaE, align 8, !tbaa !19
  %32 = load i32, ptr @_ZN20ComputeNonbondedUtil12r2_delta_expE, align 4, !tbaa !5
  %33 = shl i32 %32, 6
  %34 = add i32 %33, -65472
  %35 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 5
  %36 = load i32, ptr %35, align 8, !tbaa !5
  %37 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 5, i64 1
  %38 = load i32, ptr %37, align 4, !tbaa !5
  %39 = load ptr, ptr %0, align 8, !tbaa !23
  %40 = getelementptr inbounds [2 x ptr], ptr %0, i64 0, i64 1
  %41 = load ptr, ptr %40, align 8, !tbaa !23
  %42 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 1
  %43 = load ptr, ptr %42, align 8, !tbaa !23
  %44 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 1, i64 1
  %45 = load ptr, ptr %44, align 8, !tbaa !23
  %46 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 9
  %47 = load ptr, ptr %46, align 8, !tbaa !24
  %48 = add nsw i32 %38, 5
  %49 = getelementptr inbounds %class.ResizeArray, ptr %47, i64 0, i32 1
  %50 = load ptr, ptr %49, align 8, !tbaa !25
  %51 = getelementptr inbounds %class.ResizeArrayRaw, ptr %50, i64 0, i32 2
  %52 = load i32, ptr %51, align 8, !tbaa !27
  %53 = icmp slt i32 %52, %48
  br i1 %53, label %54, label %92

54:                                               ; preds = %4
  %55 = getelementptr inbounds %class.ResizeArrayRaw, ptr %50, i64 0, i32 3
  %56 = load i32, ptr %55, align 4, !tbaa !30
  %57 = icmp slt i32 %56, %48
  br i1 %57, label %58, label %92

58:                                               ; preds = %54
  %59 = sitofp i32 %56 to float
  %60 = getelementptr inbounds %class.ResizeArrayRaw, ptr %50, i64 0, i32 5
  %61 = load float, ptr %60, align 4, !tbaa !31
  %62 = fmul float %61, %59
  %63 = fptosi float %62 to i32
  %64 = tail call i32 @llvm.smax.i32(i32 %63, i32 %48)
  %65 = sub nsw i32 %64, %56
  %66 = getelementptr inbounds %class.ResizeArrayRaw, ptr %50, i64 0, i32 6
  %67 = load i32, ptr %66, align 8, !tbaa !32
  %68 = icmp slt i32 %65, %67
  %69 = add nsw i32 %67, %56
  %70 = select i1 %68, i32 %69, i32 %64
  %71 = sext i32 %70 to i64
  %72 = shl nsw i64 %71, 1
  %73 = add nsw i64 %72, 31
  %74 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %73) #9
  %75 = getelementptr inbounds i8, ptr %74, i64 31
  %76 = ptrtoint ptr %75 to i64
  %77 = and i64 %76, 31
  %78 = sub nsw i64 0, %77
  %79 = getelementptr inbounds i8, ptr %75, i64 %78
  %80 = load ptr, ptr %50, align 8, !tbaa !33
  %81 = sext i32 %52 to i64
  %82 = shl nsw i64 %81, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %79, ptr align 1 %80, i64 %82, i1 false)
  %83 = icmp eq i32 %56, 0
  br i1 %83, label %89, label %84

84:                                               ; preds = %58
  %85 = getelementptr inbounds %class.ResizeArrayRaw, ptr %50, i64 0, i32 1
  %86 = load ptr, ptr %85, align 8, !tbaa !34
  %87 = icmp eq ptr %86, null
  br i1 %87, label %89, label %88

88:                                               ; preds = %84
  tail call void @_ZdaPv(ptr noundef nonnull %86) #10
  br label %89

89:                                               ; preds = %88, %84, %58
  %90 = getelementptr inbounds %class.ResizeArrayRaw, ptr %50, i64 0, i32 1
  store ptr %74, ptr %90, align 8, !tbaa !34
  store ptr %79, ptr %50, align 8, !tbaa !33
  store i32 %70, ptr %55, align 4, !tbaa !30
  %91 = load ptr, ptr %49, align 8, !tbaa !25
  br label %92

92:                                               ; preds = %4, %54, %89
  %93 = phi ptr [ %50, %4 ], [ %50, %54 ], [ %91, %89 ]
  store i32 %48, ptr %51, align 8, !tbaa !27
  %94 = load ptr, ptr %93, align 8, !tbaa !33
  %95 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %47, i64 0, i32 1, i32 1
  %96 = load ptr, ptr %95, align 8, !tbaa !35
  %97 = getelementptr inbounds %class.ResizeArrayRaw.23, ptr %96, i64 0, i32 2
  %98 = load i32, ptr %97, align 8, !tbaa !37
  %99 = icmp slt i32 %98, %48
  br i1 %99, label %100, label %138

100:                                              ; preds = %92
  %101 = getelementptr inbounds %class.ResizeArrayRaw.23, ptr %96, i64 0, i32 3
  %102 = load i32, ptr %101, align 4, !tbaa !39
  %103 = icmp slt i32 %102, %48
  br i1 %103, label %104, label %138

104:                                              ; preds = %100
  %105 = sitofp i32 %102 to float
  %106 = getelementptr inbounds %class.ResizeArrayRaw.23, ptr %96, i64 0, i32 5
  %107 = load float, ptr %106, align 4, !tbaa !40
  %108 = fmul float %107, %105
  %109 = fptosi float %108 to i32
  %110 = tail call i32 @llvm.smax.i32(i32 %109, i32 %48)
  %111 = sub nsw i32 %110, %102
  %112 = getelementptr inbounds %class.ResizeArrayRaw.23, ptr %96, i64 0, i32 6
  %113 = load i32, ptr %112, align 8, !tbaa !41
  %114 = icmp slt i32 %111, %113
  %115 = add nsw i32 %113, %102
  %116 = select i1 %114, i32 %115, i32 %110
  %117 = sext i32 %116 to i64
  %118 = shl nsw i64 %117, 3
  %119 = add nsw i64 %118, 31
  %120 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %119) #9
  %121 = getelementptr inbounds i8, ptr %120, i64 31
  %122 = ptrtoint ptr %121 to i64
  %123 = and i64 %122, 31
  %124 = sub nsw i64 0, %123
  %125 = getelementptr inbounds i8, ptr %121, i64 %124
  %126 = load ptr, ptr %96, align 8, !tbaa !42
  %127 = sext i32 %98 to i64
  %128 = shl nsw i64 %127, 3
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %125, ptr align 1 %126, i64 %128, i1 false)
  %129 = icmp eq i32 %102, 0
  br i1 %129, label %135, label %130

130:                                              ; preds = %104
  %131 = getelementptr inbounds %class.ResizeArrayRaw.23, ptr %96, i64 0, i32 1
  %132 = load ptr, ptr %131, align 8, !tbaa !43
  %133 = icmp eq ptr %132, null
  br i1 %133, label %135, label %134

134:                                              ; preds = %130
  tail call void @_ZdaPv(ptr noundef nonnull %132) #10
  br label %135

135:                                              ; preds = %134, %130, %104
  %136 = getelementptr inbounds %class.ResizeArrayRaw.23, ptr %96, i64 0, i32 1
  store ptr %120, ptr %136, align 8, !tbaa !43
  store ptr %125, ptr %96, align 8, !tbaa !42
  store i32 %116, ptr %101, align 4, !tbaa !39
  %137 = load ptr, ptr %95, align 8, !tbaa !35
  br label %138

138:                                              ; preds = %92, %100, %135
  %139 = phi ptr [ %96, %92 ], [ %96, %100 ], [ %137, %135 ]
  store i32 %48, ptr %97, align 8, !tbaa !37
  %140 = load ptr, ptr %139, align 8, !tbaa !42
  %141 = getelementptr inbounds i32, ptr %140, i64 1
  %142 = icmp eq i32 %10, 0
  %143 = icmp ne i32 %12, 0
  %144 = select i1 %142, i1 %143, i1 false
  %145 = select i1 %144, i32 0, i32 %48
  %146 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %47, i64 0, i32 2, i32 1
  %147 = load ptr, ptr %146, align 8, !tbaa !25
  %148 = getelementptr inbounds %class.ResizeArrayRaw, ptr %147, i64 0, i32 2
  %149 = load i32, ptr %148, align 8, !tbaa !27
  %150 = icmp slt i32 %149, %145
  br i1 %150, label %151, label %189

151:                                              ; preds = %138
  %152 = getelementptr inbounds %class.ResizeArrayRaw, ptr %147, i64 0, i32 3
  %153 = load i32, ptr %152, align 4, !tbaa !30
  %154 = icmp slt i32 %153, %145
  br i1 %154, label %155, label %189

155:                                              ; preds = %151
  %156 = sitofp i32 %153 to float
  %157 = getelementptr inbounds %class.ResizeArrayRaw, ptr %147, i64 0, i32 5
  %158 = load float, ptr %157, align 4, !tbaa !31
  %159 = fmul float %158, %156
  %160 = fptosi float %159 to i32
  %161 = tail call i32 @llvm.smax.i32(i32 %160, i32 %145)
  %162 = sub nsw i32 %161, %153
  %163 = getelementptr inbounds %class.ResizeArrayRaw, ptr %147, i64 0, i32 6
  %164 = load i32, ptr %163, align 8, !tbaa !32
  %165 = icmp slt i32 %162, %164
  %166 = add nsw i32 %164, %153
  %167 = select i1 %165, i32 %166, i32 %161
  %168 = sext i32 %167 to i64
  %169 = shl nsw i64 %168, 1
  %170 = add nsw i64 %169, 31
  %171 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %170) #9
  %172 = getelementptr inbounds i8, ptr %171, i64 31
  %173 = ptrtoint ptr %172 to i64
  %174 = and i64 %173, 31
  %175 = sub nsw i64 0, %174
  %176 = getelementptr inbounds i8, ptr %172, i64 %175
  %177 = load ptr, ptr %147, align 8, !tbaa !33
  %178 = sext i32 %149 to i64
  %179 = shl nsw i64 %178, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %176, ptr align 1 %177, i64 %179, i1 false)
  %180 = icmp eq i32 %153, 0
  br i1 %180, label %186, label %181

181:                                              ; preds = %155
  %182 = getelementptr inbounds %class.ResizeArrayRaw, ptr %147, i64 0, i32 1
  %183 = load ptr, ptr %182, align 8, !tbaa !34
  %184 = icmp eq ptr %183, null
  br i1 %184, label %186, label %185

185:                                              ; preds = %181
  tail call void @_ZdaPv(ptr noundef nonnull %183) #10
  br label %186

186:                                              ; preds = %185, %181, %155
  %187 = getelementptr inbounds %class.ResizeArrayRaw, ptr %147, i64 0, i32 1
  store ptr %171, ptr %187, align 8, !tbaa !34
  store ptr %176, ptr %147, align 8, !tbaa !33
  store i32 %167, ptr %152, align 4, !tbaa !30
  %188 = load ptr, ptr %146, align 8, !tbaa !25
  br label %189

189:                                              ; preds = %138, %151, %186
  %190 = phi ptr [ %147, %138 ], [ %147, %151 ], [ %188, %186 ]
  store i32 %145, ptr %148, align 8, !tbaa !27
  %191 = load ptr, ptr %190, align 8, !tbaa !33
  %192 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %47, i64 0, i32 3, i32 1
  %193 = load ptr, ptr %192, align 8, !tbaa !25
  %194 = getelementptr inbounds %class.ResizeArrayRaw, ptr %193, i64 0, i32 2
  %195 = load i32, ptr %194, align 8, !tbaa !27
  %196 = icmp slt i32 %195, %145
  br i1 %196, label %197, label %235

197:                                              ; preds = %189
  %198 = getelementptr inbounds %class.ResizeArrayRaw, ptr %193, i64 0, i32 3
  %199 = load i32, ptr %198, align 4, !tbaa !30
  %200 = icmp slt i32 %199, %145
  br i1 %200, label %201, label %235

201:                                              ; preds = %197
  %202 = sitofp i32 %199 to float
  %203 = getelementptr inbounds %class.ResizeArrayRaw, ptr %193, i64 0, i32 5
  %204 = load float, ptr %203, align 4, !tbaa !31
  %205 = fmul float %204, %202
  %206 = fptosi float %205 to i32
  %207 = tail call i32 @llvm.smax.i32(i32 %206, i32 %145)
  %208 = sub nsw i32 %207, %199
  %209 = getelementptr inbounds %class.ResizeArrayRaw, ptr %193, i64 0, i32 6
  %210 = load i32, ptr %209, align 8, !tbaa !32
  %211 = icmp slt i32 %208, %210
  %212 = add nsw i32 %210, %199
  %213 = select i1 %211, i32 %212, i32 %207
  %214 = sext i32 %213 to i64
  %215 = shl nsw i64 %214, 1
  %216 = add nsw i64 %215, 31
  %217 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %216) #9
  %218 = getelementptr inbounds i8, ptr %217, i64 31
  %219 = ptrtoint ptr %218 to i64
  %220 = and i64 %219, 31
  %221 = sub nsw i64 0, %220
  %222 = getelementptr inbounds i8, ptr %218, i64 %221
  %223 = load ptr, ptr %193, align 8, !tbaa !33
  %224 = sext i32 %195 to i64
  %225 = shl nsw i64 %224, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %222, ptr align 1 %223, i64 %225, i1 false)
  %226 = icmp eq i32 %199, 0
  br i1 %226, label %232, label %227

227:                                              ; preds = %201
  %228 = getelementptr inbounds %class.ResizeArrayRaw, ptr %193, i64 0, i32 1
  %229 = load ptr, ptr %228, align 8, !tbaa !34
  %230 = icmp eq ptr %229, null
  br i1 %230, label %232, label %231

231:                                              ; preds = %227
  tail call void @_ZdaPv(ptr noundef nonnull %229) #10
  br label %232

232:                                              ; preds = %231, %227, %201
  %233 = getelementptr inbounds %class.ResizeArrayRaw, ptr %193, i64 0, i32 1
  store ptr %217, ptr %233, align 8, !tbaa !34
  store ptr %222, ptr %193, align 8, !tbaa !33
  store i32 %213, ptr %198, align 4, !tbaa !30
  %234 = load ptr, ptr %192, align 8, !tbaa !25
  br label %235

235:                                              ; preds = %189, %197, %232
  %236 = phi ptr [ %193, %189 ], [ %193, %197 ], [ %234, %232 ]
  store i32 %145, ptr %194, align 8, !tbaa !27
  %237 = load ptr, ptr %236, align 8, !tbaa !33
  %238 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %47, i64 0, i32 4, i32 1
  %239 = load ptr, ptr %238, align 8, !tbaa !25
  %240 = getelementptr inbounds %class.ResizeArrayRaw, ptr %239, i64 0, i32 2
  %241 = load i32, ptr %240, align 8, !tbaa !27
  %242 = icmp slt i32 %241, %145
  br i1 %242, label %243, label %281

243:                                              ; preds = %235
  %244 = getelementptr inbounds %class.ResizeArrayRaw, ptr %239, i64 0, i32 3
  %245 = load i32, ptr %244, align 4, !tbaa !30
  %246 = icmp slt i32 %245, %145
  br i1 %246, label %247, label %281

247:                                              ; preds = %243
  %248 = sitofp i32 %245 to float
  %249 = getelementptr inbounds %class.ResizeArrayRaw, ptr %239, i64 0, i32 5
  %250 = load float, ptr %249, align 4, !tbaa !31
  %251 = fmul float %250, %248
  %252 = fptosi float %251 to i32
  %253 = tail call i32 @llvm.smax.i32(i32 %252, i32 %145)
  %254 = sub nsw i32 %253, %245
  %255 = getelementptr inbounds %class.ResizeArrayRaw, ptr %239, i64 0, i32 6
  %256 = load i32, ptr %255, align 8, !tbaa !32
  %257 = icmp slt i32 %254, %256
  %258 = add nsw i32 %256, %245
  %259 = select i1 %257, i32 %258, i32 %253
  %260 = sext i32 %259 to i64
  %261 = shl nsw i64 %260, 1
  %262 = add nsw i64 %261, 31
  %263 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %262) #9
  %264 = getelementptr inbounds i8, ptr %263, i64 31
  %265 = ptrtoint ptr %264 to i64
  %266 = and i64 %265, 31
  %267 = sub nsw i64 0, %266
  %268 = getelementptr inbounds i8, ptr %264, i64 %267
  %269 = load ptr, ptr %239, align 8, !tbaa !33
  %270 = sext i32 %241 to i64
  %271 = shl nsw i64 %270, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %268, ptr align 1 %269, i64 %271, i1 false)
  %272 = icmp eq i32 %245, 0
  br i1 %272, label %278, label %273

273:                                              ; preds = %247
  %274 = getelementptr inbounds %class.ResizeArrayRaw, ptr %239, i64 0, i32 1
  %275 = load ptr, ptr %274, align 8, !tbaa !34
  %276 = icmp eq ptr %275, null
  br i1 %276, label %278, label %277

277:                                              ; preds = %273
  tail call void @_ZdaPv(ptr noundef nonnull %275) #10
  br label %278

278:                                              ; preds = %277, %273, %247
  %279 = getelementptr inbounds %class.ResizeArrayRaw, ptr %239, i64 0, i32 1
  store ptr %263, ptr %279, align 8, !tbaa !34
  store ptr %268, ptr %239, align 8, !tbaa !33
  store i32 %259, ptr %244, align 4, !tbaa !30
  %280 = load ptr, ptr %238, align 8, !tbaa !25
  br label %281

281:                                              ; preds = %235, %243, %278
  %282 = phi ptr [ %239, %235 ], [ %239, %243 ], [ %280, %278 ]
  store i32 %145, ptr %240, align 8, !tbaa !27
  %283 = load ptr, ptr %282, align 8, !tbaa !33
  %284 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %47, i64 0, i32 5, i32 1
  %285 = load ptr, ptr %284, align 8, !tbaa !25
  %286 = getelementptr inbounds %class.ResizeArrayRaw, ptr %285, i64 0, i32 2
  %287 = load i32, ptr %286, align 8, !tbaa !27
  %288 = icmp slt i32 %287, %145
  br i1 %288, label %289, label %327

289:                                              ; preds = %281
  %290 = getelementptr inbounds %class.ResizeArrayRaw, ptr %285, i64 0, i32 3
  %291 = load i32, ptr %290, align 4, !tbaa !30
  %292 = icmp slt i32 %291, %145
  br i1 %292, label %293, label %327

293:                                              ; preds = %289
  %294 = sitofp i32 %291 to float
  %295 = getelementptr inbounds %class.ResizeArrayRaw, ptr %285, i64 0, i32 5
  %296 = load float, ptr %295, align 4, !tbaa !31
  %297 = fmul float %296, %294
  %298 = fptosi float %297 to i32
  %299 = tail call i32 @llvm.smax.i32(i32 %298, i32 %145)
  %300 = sub nsw i32 %299, %291
  %301 = getelementptr inbounds %class.ResizeArrayRaw, ptr %285, i64 0, i32 6
  %302 = load i32, ptr %301, align 8, !tbaa !32
  %303 = icmp slt i32 %300, %302
  %304 = add nsw i32 %302, %291
  %305 = select i1 %303, i32 %304, i32 %299
  %306 = sext i32 %305 to i64
  %307 = shl nsw i64 %306, 1
  %308 = add nsw i64 %307, 31
  %309 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %308) #9
  %310 = getelementptr inbounds i8, ptr %309, i64 31
  %311 = ptrtoint ptr %310 to i64
  %312 = and i64 %311, 31
  %313 = sub nsw i64 0, %312
  %314 = getelementptr inbounds i8, ptr %310, i64 %313
  %315 = load ptr, ptr %285, align 8, !tbaa !33
  %316 = sext i32 %287 to i64
  %317 = shl nsw i64 %316, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %314, ptr align 1 %315, i64 %317, i1 false)
  %318 = icmp eq i32 %291, 0
  br i1 %318, label %324, label %319

319:                                              ; preds = %293
  %320 = getelementptr inbounds %class.ResizeArrayRaw, ptr %285, i64 0, i32 1
  %321 = load ptr, ptr %320, align 8, !tbaa !34
  %322 = icmp eq ptr %321, null
  br i1 %322, label %324, label %323

323:                                              ; preds = %319
  tail call void @_ZdaPv(ptr noundef nonnull %321) #10
  br label %324

324:                                              ; preds = %323, %319, %293
  %325 = getelementptr inbounds %class.ResizeArrayRaw, ptr %285, i64 0, i32 1
  store ptr %309, ptr %325, align 8, !tbaa !34
  store ptr %314, ptr %285, align 8, !tbaa !33
  store i32 %305, ptr %290, align 4, !tbaa !30
  %326 = load ptr, ptr %284, align 8, !tbaa !25
  br label %327

327:                                              ; preds = %281, %289, %324
  %328 = phi ptr [ %285, %281 ], [ %285, %289 ], [ %326, %324 ]
  store i32 %145, ptr %286, align 8, !tbaa !27
  %329 = load ptr, ptr %328, align 8, !tbaa !33
  %330 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %47, i64 0, i32 6, i32 1
  %331 = load ptr, ptr %330, align 8, !tbaa !25
  %332 = getelementptr inbounds %class.ResizeArrayRaw, ptr %331, i64 0, i32 2
  %333 = load i32, ptr %332, align 8, !tbaa !27
  %334 = icmp slt i32 %333, %145
  br i1 %334, label %335, label %373

335:                                              ; preds = %327
  %336 = getelementptr inbounds %class.ResizeArrayRaw, ptr %331, i64 0, i32 3
  %337 = load i32, ptr %336, align 4, !tbaa !30
  %338 = icmp slt i32 %337, %145
  br i1 %338, label %339, label %373

339:                                              ; preds = %335
  %340 = sitofp i32 %337 to float
  %341 = getelementptr inbounds %class.ResizeArrayRaw, ptr %331, i64 0, i32 5
  %342 = load float, ptr %341, align 4, !tbaa !31
  %343 = fmul float %342, %340
  %344 = fptosi float %343 to i32
  %345 = tail call i32 @llvm.smax.i32(i32 %344, i32 %145)
  %346 = sub nsw i32 %345, %337
  %347 = getelementptr inbounds %class.ResizeArrayRaw, ptr %331, i64 0, i32 6
  %348 = load i32, ptr %347, align 8, !tbaa !32
  %349 = icmp slt i32 %346, %348
  %350 = add nsw i32 %348, %337
  %351 = select i1 %349, i32 %350, i32 %345
  %352 = sext i32 %351 to i64
  %353 = shl nsw i64 %352, 1
  %354 = add nsw i64 %353, 31
  %355 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %354) #9
  %356 = getelementptr inbounds i8, ptr %355, i64 31
  %357 = ptrtoint ptr %356 to i64
  %358 = and i64 %357, 31
  %359 = sub nsw i64 0, %358
  %360 = getelementptr inbounds i8, ptr %356, i64 %359
  %361 = load ptr, ptr %331, align 8, !tbaa !33
  %362 = sext i32 %333 to i64
  %363 = shl nsw i64 %362, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %360, ptr align 1 %361, i64 %363, i1 false)
  %364 = icmp eq i32 %337, 0
  br i1 %364, label %370, label %365

365:                                              ; preds = %339
  %366 = getelementptr inbounds %class.ResizeArrayRaw, ptr %331, i64 0, i32 1
  %367 = load ptr, ptr %366, align 8, !tbaa !34
  %368 = icmp eq ptr %367, null
  br i1 %368, label %370, label %369

369:                                              ; preds = %365
  tail call void @_ZdaPv(ptr noundef nonnull %367) #10
  br label %370

370:                                              ; preds = %369, %365, %339
  %371 = getelementptr inbounds %class.ResizeArrayRaw, ptr %331, i64 0, i32 1
  store ptr %355, ptr %371, align 8, !tbaa !34
  store ptr %360, ptr %331, align 8, !tbaa !33
  store i32 %351, ptr %336, align 4, !tbaa !30
  %372 = load ptr, ptr %330, align 8, !tbaa !25
  br label %373

373:                                              ; preds = %327, %335, %370
  %374 = phi ptr [ %331, %327 ], [ %331, %335 ], [ %372, %370 ]
  store i32 %145, ptr %332, align 8, !tbaa !27
  %375 = load ptr, ptr %374, align 8, !tbaa !33
  %376 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %47, i64 0, i32 15, i32 1
  %377 = load ptr, ptr %376, align 8, !tbaa !25
  %378 = getelementptr inbounds %class.ResizeArrayRaw, ptr %377, i64 0, i32 2
  %379 = load i32, ptr %378, align 8, !tbaa !27
  %380 = icmp slt i32 %379, %145
  br i1 %380, label %381, label %419

381:                                              ; preds = %373
  %382 = getelementptr inbounds %class.ResizeArrayRaw, ptr %377, i64 0, i32 3
  %383 = load i32, ptr %382, align 4, !tbaa !30
  %384 = icmp slt i32 %383, %145
  br i1 %384, label %385, label %419

385:                                              ; preds = %381
  %386 = sitofp i32 %383 to float
  %387 = getelementptr inbounds %class.ResizeArrayRaw, ptr %377, i64 0, i32 5
  %388 = load float, ptr %387, align 4, !tbaa !31
  %389 = fmul float %388, %386
  %390 = fptosi float %389 to i32
  %391 = tail call i32 @llvm.smax.i32(i32 %390, i32 %145)
  %392 = sub nsw i32 %391, %383
  %393 = getelementptr inbounds %class.ResizeArrayRaw, ptr %377, i64 0, i32 6
  %394 = load i32, ptr %393, align 8, !tbaa !32
  %395 = icmp slt i32 %392, %394
  %396 = add nsw i32 %394, %383
  %397 = select i1 %395, i32 %396, i32 %391
  %398 = sext i32 %397 to i64
  %399 = shl nsw i64 %398, 1
  %400 = add nsw i64 %399, 31
  %401 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %400) #9
  %402 = getelementptr inbounds i8, ptr %401, i64 31
  %403 = ptrtoint ptr %402 to i64
  %404 = and i64 %403, 31
  %405 = sub nsw i64 0, %404
  %406 = getelementptr inbounds i8, ptr %402, i64 %405
  %407 = load ptr, ptr %377, align 8, !tbaa !33
  %408 = sext i32 %379 to i64
  %409 = shl nsw i64 %408, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %406, ptr align 1 %407, i64 %409, i1 false)
  %410 = icmp eq i32 %383, 0
  br i1 %410, label %416, label %411

411:                                              ; preds = %385
  %412 = getelementptr inbounds %class.ResizeArrayRaw, ptr %377, i64 0, i32 1
  %413 = load ptr, ptr %412, align 8, !tbaa !34
  %414 = icmp eq ptr %413, null
  br i1 %414, label %416, label %415

415:                                              ; preds = %411
  tail call void @_ZdaPv(ptr noundef nonnull %413) #10
  br label %416

416:                                              ; preds = %415, %411, %385
  %417 = getelementptr inbounds %class.ResizeArrayRaw, ptr %377, i64 0, i32 1
  store ptr %401, ptr %417, align 8, !tbaa !34
  store ptr %406, ptr %377, align 8, !tbaa !33
  store i32 %397, ptr %382, align 4, !tbaa !30
  %418 = load ptr, ptr %376, align 8, !tbaa !25
  br label %419

419:                                              ; preds = %373, %381, %416
  %420 = phi ptr [ %377, %373 ], [ %377, %381 ], [ %418, %416 ]
  store i32 %145, ptr %378, align 8, !tbaa !27
  %421 = load ptr, ptr %420, align 8, !tbaa !33
  %422 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %47, i64 0, i32 16, i32 1
  %423 = load ptr, ptr %422, align 8, !tbaa !25
  %424 = getelementptr inbounds %class.ResizeArrayRaw, ptr %423, i64 0, i32 2
  %425 = load i32, ptr %424, align 8, !tbaa !27
  %426 = icmp slt i32 %425, %145
  br i1 %426, label %427, label %465

427:                                              ; preds = %419
  %428 = getelementptr inbounds %class.ResizeArrayRaw, ptr %423, i64 0, i32 3
  %429 = load i32, ptr %428, align 4, !tbaa !30
  %430 = icmp slt i32 %429, %145
  br i1 %430, label %431, label %465

431:                                              ; preds = %427
  %432 = sitofp i32 %429 to float
  %433 = getelementptr inbounds %class.ResizeArrayRaw, ptr %423, i64 0, i32 5
  %434 = load float, ptr %433, align 4, !tbaa !31
  %435 = fmul float %434, %432
  %436 = fptosi float %435 to i32
  %437 = tail call i32 @llvm.smax.i32(i32 %436, i32 %145)
  %438 = sub nsw i32 %437, %429
  %439 = getelementptr inbounds %class.ResizeArrayRaw, ptr %423, i64 0, i32 6
  %440 = load i32, ptr %439, align 8, !tbaa !32
  %441 = icmp slt i32 %438, %440
  %442 = add nsw i32 %440, %429
  %443 = select i1 %441, i32 %442, i32 %437
  %444 = sext i32 %443 to i64
  %445 = shl nsw i64 %444, 1
  %446 = add nsw i64 %445, 31
  %447 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %446) #9
  %448 = getelementptr inbounds i8, ptr %447, i64 31
  %449 = ptrtoint ptr %448 to i64
  %450 = and i64 %449, 31
  %451 = sub nsw i64 0, %450
  %452 = getelementptr inbounds i8, ptr %448, i64 %451
  %453 = load ptr, ptr %423, align 8, !tbaa !33
  %454 = sext i32 %425 to i64
  %455 = shl nsw i64 %454, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %452, ptr align 1 %453, i64 %455, i1 false)
  %456 = icmp eq i32 %429, 0
  br i1 %456, label %462, label %457

457:                                              ; preds = %431
  %458 = getelementptr inbounds %class.ResizeArrayRaw, ptr %423, i64 0, i32 1
  %459 = load ptr, ptr %458, align 8, !tbaa !34
  %460 = icmp eq ptr %459, null
  br i1 %460, label %462, label %461

461:                                              ; preds = %457
  tail call void @_ZdaPv(ptr noundef nonnull %459) #10
  br label %462

462:                                              ; preds = %461, %457, %431
  %463 = getelementptr inbounds %class.ResizeArrayRaw, ptr %423, i64 0, i32 1
  store ptr %447, ptr %463, align 8, !tbaa !34
  store ptr %452, ptr %423, align 8, !tbaa !33
  store i32 %443, ptr %428, align 4, !tbaa !30
  %464 = load ptr, ptr %422, align 8, !tbaa !25
  br label %465

465:                                              ; preds = %419, %427, %462
  %466 = phi ptr [ %423, %419 ], [ %423, %427 ], [ %464, %462 ]
  store i32 %145, ptr %424, align 8, !tbaa !27
  %467 = load ptr, ptr %466, align 8, !tbaa !33
  br i1 %144, label %609, label %468

468:                                              ; preds = %465
  %469 = icmp sgt i32 %38, 0
  br i1 %469, label %470, label %600

470:                                              ; preds = %468
  %471 = zext i32 %38 to i64
  %472 = and i64 %471, 1
  %473 = icmp eq i32 %38, 1
  br i1 %473, label %506, label %474

474:                                              ; preds = %470
  %475 = and i64 %471, 4294967294
  br label %476

476:                                              ; preds = %501, %474
  %477 = phi i64 [ 0, %474 ], [ %503, %501 ]
  %478 = phi i32 [ 0, %474 ], [ %502, %501 ]
  %479 = phi i64 [ 0, %474 ], [ %504, %501 ]
  %480 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %477, i32 4
  %481 = load i8, ptr %480, align 1
  %482 = and i8 %481, 7
  %483 = icmp eq i8 %482, 0
  br i1 %483, label %489, label %484

484:                                              ; preds = %476
  %485 = trunc i64 %477 to i16
  %486 = add nsw i32 %478, 1
  %487 = sext i32 %478 to i64
  %488 = getelementptr inbounds i16, ptr %191, i64 %487
  store i16 %485, ptr %488, align 2, !tbaa !44
  br label %489

489:                                              ; preds = %476, %484
  %490 = phi i32 [ %486, %484 ], [ %478, %476 ]
  %491 = or i64 %477, 1
  %492 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %491, i32 4
  %493 = load i8, ptr %492, align 1
  %494 = and i8 %493, 7
  %495 = icmp eq i8 %494, 0
  br i1 %495, label %501, label %496

496:                                              ; preds = %489
  %497 = trunc i64 %491 to i16
  %498 = add nsw i32 %490, 1
  %499 = sext i32 %490 to i64
  %500 = getelementptr inbounds i16, ptr %191, i64 %499
  store i16 %497, ptr %500, align 2, !tbaa !44
  br label %501

501:                                              ; preds = %496, %489
  %502 = phi i32 [ %498, %496 ], [ %490, %489 ]
  %503 = add nuw nsw i64 %477, 2
  %504 = add i64 %479, 2
  %505 = icmp eq i64 %504, %475
  br i1 %505, label %506, label %476

506:                                              ; preds = %501, %470
  %507 = phi i32 [ undef, %470 ], [ %502, %501 ]
  %508 = phi i64 [ 0, %470 ], [ %503, %501 ]
  %509 = phi i32 [ 0, %470 ], [ %502, %501 ]
  %510 = icmp eq i64 %472, 0
  br i1 %510, label %521, label %511

511:                                              ; preds = %506
  %512 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %508, i32 4
  %513 = load i8, ptr %512, align 1
  %514 = and i8 %513, 7
  %515 = icmp eq i8 %514, 0
  br i1 %515, label %521, label %516

516:                                              ; preds = %511
  %517 = trunc i64 %508 to i16
  %518 = add nsw i32 %509, 1
  %519 = sext i32 %509 to i64
  %520 = getelementptr inbounds i16, ptr %191, i64 %519
  store i16 %517, ptr %520, align 2, !tbaa !44
  br label %521

521:                                              ; preds = %511, %516, %506
  %522 = phi i32 [ %507, %506 ], [ %518, %516 ], [ %509, %511 ]
  %523 = icmp eq i32 %522, 0
  br i1 %523, label %531, label %524

524:                                              ; preds = %521
  %525 = add nsw i32 %522, -1
  %526 = sext i32 %525 to i64
  %527 = getelementptr inbounds i16, ptr %191, i64 %526
  %528 = load i16, ptr %527, align 2, !tbaa !44
  %529 = sext i32 %522 to i64
  %530 = getelementptr inbounds i16, ptr %191, i64 %529
  store i16 %528, ptr %530, align 2, !tbaa !44
  br label %531

531:                                              ; preds = %524, %521
  %532 = load i32, ptr @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4, !tbaa !5
  %533 = icmp ne i32 %532, 0
  %534 = icmp sgt i32 %522, 0
  %535 = and i1 %533, %534
  br i1 %535, label %536, label %600

536:                                              ; preds = %531
  %537 = zext i32 %522 to i64
  %538 = and i64 %537, 1
  %539 = icmp eq i32 %522, 1
  br i1 %539, label %574, label %540

540:                                              ; preds = %536
  %541 = and i64 %537, 4294967294
  br label %542

542:                                              ; preds = %569, %540
  %543 = phi i64 [ 0, %540 ], [ %571, %569 ]
  %544 = phi i32 [ 0, %540 ], [ %570, %569 ]
  %545 = phi i64 [ 0, %540 ], [ %572, %569 ]
  %546 = getelementptr inbounds i16, ptr %191, i64 %543
  %547 = load i16, ptr %546, align 2, !tbaa !44
  %548 = zext i16 %547 to i64
  %549 = getelementptr inbounds %struct.CompAtomExt, ptr %45, i64 %548
  %550 = load i32, ptr %549, align 4
  %551 = icmp sgt i32 %550, -1
  br i1 %551, label %552, label %556

552:                                              ; preds = %542
  %553 = add nsw i32 %544, 1
  %554 = sext i32 %544 to i64
  %555 = getelementptr inbounds i16, ptr %237, i64 %554
  store i16 %547, ptr %555, align 2, !tbaa !44
  br label %556

556:                                              ; preds = %542, %552
  %557 = phi i32 [ %544, %542 ], [ %553, %552 ]
  %558 = or i64 %543, 1
  %559 = getelementptr inbounds i16, ptr %191, i64 %558
  %560 = load i16, ptr %559, align 2, !tbaa !44
  %561 = zext i16 %560 to i64
  %562 = getelementptr inbounds %struct.CompAtomExt, ptr %45, i64 %561
  %563 = load i32, ptr %562, align 4
  %564 = icmp sgt i32 %563, -1
  br i1 %564, label %565, label %569

565:                                              ; preds = %556
  %566 = add nsw i32 %557, 1
  %567 = sext i32 %557 to i64
  %568 = getelementptr inbounds i16, ptr %237, i64 %567
  store i16 %560, ptr %568, align 2, !tbaa !44
  br label %569

569:                                              ; preds = %565, %556
  %570 = phi i32 [ %557, %556 ], [ %566, %565 ]
  %571 = add nuw nsw i64 %543, 2
  %572 = add i64 %545, 2
  %573 = icmp eq i64 %572, %541
  br i1 %573, label %574, label %542

574:                                              ; preds = %569, %536
  %575 = phi i32 [ undef, %536 ], [ %570, %569 ]
  %576 = phi i64 [ 0, %536 ], [ %571, %569 ]
  %577 = phi i32 [ 0, %536 ], [ %570, %569 ]
  %578 = icmp eq i64 %538, 0
  br i1 %578, label %590, label %579

579:                                              ; preds = %574
  %580 = getelementptr inbounds i16, ptr %191, i64 %576
  %581 = load i16, ptr %580, align 2, !tbaa !44
  %582 = zext i16 %581 to i64
  %583 = getelementptr inbounds %struct.CompAtomExt, ptr %45, i64 %582
  %584 = load i32, ptr %583, align 4
  %585 = icmp sgt i32 %584, -1
  br i1 %585, label %586, label %590

586:                                              ; preds = %579
  %587 = add nsw i32 %577, 1
  %588 = sext i32 %577 to i64
  %589 = getelementptr inbounds i16, ptr %237, i64 %588
  store i16 %581, ptr %589, align 2, !tbaa !44
  br label %590

590:                                              ; preds = %579, %586, %574
  %591 = phi i32 [ %575, %574 ], [ %577, %579 ], [ %587, %586 ]
  %592 = icmp eq i32 %591, 0
  br i1 %592, label %600, label %593

593:                                              ; preds = %590
  %594 = add nsw i32 %591, -1
  %595 = sext i32 %594 to i64
  %596 = getelementptr inbounds i16, ptr %237, i64 %595
  %597 = load i16, ptr %596, align 2, !tbaa !44
  %598 = sext i32 %591 to i64
  %599 = getelementptr inbounds i16, ptr %237, i64 %598
  store i16 %597, ptr %599, align 2, !tbaa !44
  br label %600

600:                                              ; preds = %468, %531, %593, %590
  %601 = phi i32 [ %522, %593 ], [ %522, %590 ], [ %522, %531 ], [ 0, %468 ]
  %602 = phi i32 [ %591, %593 ], [ 0, %590 ], [ 0, %531 ], [ 0, %468 ]
  %603 = load i32, ptr %13, align 8, !tbaa !17
  %604 = add nsw i32 %603, 1
  store i32 %604, ptr %13, align 8, !tbaa !17
  %605 = trunc i32 %36 to i16
  %606 = load ptr, ptr %8, align 8, !tbaa !46
  %607 = sext i32 %603 to i64
  %608 = getelementptr inbounds i16, ptr %606, i64 %607
  store i16 %605, ptr %608, align 2, !tbaa !44
  br label %619

609:                                              ; preds = %465
  %610 = load ptr, ptr %8, align 8, !tbaa !46
  %611 = load i32, ptr %13, align 8, !tbaa !17
  %612 = add nsw i32 %611, 1
  store i32 %612, ptr %13, align 8, !tbaa !17
  %613 = sext i32 %611 to i64
  %614 = getelementptr inbounds i16, ptr %610, i64 %613
  %615 = load i16, ptr %614, align 2, !tbaa !44
  %616 = zext i16 %615 to i32
  %617 = icmp eq i32 %36, %616
  br i1 %617, label %619, label %618

618:                                              ; preds = %609
  tail call void @_Z8NAMD_bugPKc(ptr noundef nonnull @.str)
  br label %619

619:                                              ; preds = %609, %618, %600
  %620 = phi i32 [ 0, %618 ], [ 0, %609 ], [ %601, %600 ]
  %621 = phi i32 [ 0, %618 ], [ 0, %609 ], [ %602, %600 ]
  %622 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %47, i64 0, i32 18, i32 1
  %623 = load ptr, ptr %622, align 8, !tbaa !172
  tail call void @_ZN14ResizeArrayRawI6VectorE6resizeEi(ptr noundef nonnull align 8 dereferenceable(36) %623, i32 noundef %36)
  %624 = load ptr, ptr %622, align 8, !tbaa !172
  %625 = load ptr, ptr %624, align 8, !tbaa !174
  %626 = sext i32 %36 to i64
  %627 = mul nsw i64 %626, 24
  tail call void @llvm.memset.p0.i64(ptr align 1 %625, i8 0, i64 %627, i1 false)
  %628 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 18
  %629 = load i32, ptr %628, align 4, !tbaa !48
  %630 = add nsw i32 %629, -1
  %631 = add nsw i32 %36, -1
  %632 = icmp sgt i32 %36, 1
  br i1 %632, label %633, label %2293

633:                                              ; preds = %619
  %634 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 16
  %635 = load i32, ptr %634, align 4, !tbaa !47
  %636 = getelementptr inbounds %class.Molecule, ptr %26, i64 0, i32 1
  %637 = getelementptr inbounds %class.Molecule, ptr %26, i64 0, i32 4
  %638 = getelementptr inbounds %class.Molecule, ptr %26, i64 0, i32 2
  %639 = getelementptr inbounds %class.Molecule, ptr %26, i64 0, i32 3
  %640 = ptrtoint ptr %421 to i64
  %641 = add nsw i32 %38, 10
  %642 = getelementptr inbounds %class.Pairlists, ptr %8, i64 0, i32 2
  %643 = ptrtoint ptr %467 to i64
  %644 = ptrtoint ptr %329 to i64
  %645 = ptrtoint ptr %375 to i64
  %646 = getelementptr inbounds %class.LJTable, ptr %25, i64 0, i32 1
  %647 = getelementptr inbounds %class.LJTable, ptr %25, i64 0, i32 2
  %648 = fneg double %28
  %649 = fneg double %30
  %650 = sext i32 %620 to i64
  %651 = sext i32 %621 to i64
  %652 = insertelement <2 x double> poison, double %23, i64 0
  %653 = shufflevector <2 x double> %652, <2 x double> poison, <2 x i32> zeroinitializer
  br label %654

654:                                              ; preds = %633, %2278
  %655 = phi i32 [ 0, %633 ], [ %2289, %2278 ]
  %656 = phi i32 [ 0, %633 ], [ %2291, %2278 ]
  %657 = phi ptr [ null, %633 ], [ %2287, %2278 ]
  %658 = phi ptr [ null, %633 ], [ %2286, %2278 ]
  %659 = phi ptr [ null, %633 ], [ %2285, %2278 ]
  %660 = phi i32 [ 0, %633 ], [ %2284, %2278 ]
  %661 = phi i32 [ 0, %633 ], [ %2283, %2278 ]
  %662 = phi i32 [ 0, %633 ], [ %2282, %2278 ]
  %663 = phi i32 [ 0, %633 ], [ %2281, %2278 ]
  %664 = phi i32 [ 0, %633 ], [ %2280, %2278 ]
  %665 = phi i32 [ %635, %633 ], [ %2279, %2278 ]
  %666 = phi <2 x double> [ zeroinitializer, %633 ], [ %2290, %2278 ]
  %667 = sext i32 %656 to i64
  %668 = getelementptr inbounds %struct.CompAtom, ptr %39, i64 %667
  %669 = getelementptr inbounds %struct.CompAtomExt, ptr %43, i64 %667
  %670 = getelementptr inbounds %struct.CompAtom, ptr %39, i64 %667, i32 4
  %671 = load i8, ptr %670, align 1
  %672 = lshr i8 %671, 3
  %673 = and i8 %672, 15
  %674 = zext i8 %673 to i32
  %675 = icmp eq i8 %673, 0
  br i1 %675, label %682, label %676

676:                                              ; preds = %654
  %677 = icmp eq i32 %665, 0
  br i1 %677, label %682, label %678

678:                                              ; preds = %676
  %679 = add nsw i32 %665, -1
  %680 = add nsw i32 %656, -1
  %681 = add i32 %680, %674
  br label %2278

682:                                              ; preds = %676, %654
  %683 = phi i32 [ %665, %654 ], [ %630, %676 ]
  %684 = load <2 x double>, ptr %668, align 8, !tbaa !19
  %685 = fadd <2 x double> %15, %684
  %686 = getelementptr inbounds %class.Vector, ptr %668, i64 0, i32 2
  %687 = load double, ptr %686, align 8, !tbaa !49
  %688 = fadd double %17, %687
  %689 = add nsw i32 %656, %674
  %690 = select i1 %675, i32 %660, i32 %689
  br i1 %144, label %1857, label %691

691:                                              ; preds = %682
  %692 = load i32, ptr %669, align 4
  %693 = shl i32 %692, 2
  %694 = ashr exact i32 %693, 2
  %695 = load ptr, ptr %636, align 8, !tbaa !51
  %696 = sext i32 %694 to i64
  %697 = getelementptr inbounds %class.ExclusionCheck, ptr %695, i64 %696
  %698 = load i32, ptr %697, align 8, !tbaa !53
  %699 = getelementptr inbounds %class.ExclusionCheck, ptr %695, i64 %696, i32 1
  %700 = load i32, ptr %699, align 4, !tbaa !55
  %701 = getelementptr inbounds %class.ExclusionCheck, ptr %695, i64 %696, i32 2
  %702 = load ptr, ptr %701, align 8, !tbaa !56
  %703 = icmp eq ptr %702, null
  br i1 %703, label %708, label %704

704:                                              ; preds = %691
  %705 = sext i32 %698 to i64
  %706 = sub nsw i64 0, %705
  %707 = getelementptr inbounds i8, ptr %702, i64 %706
  br label %934

708:                                              ; preds = %691
  %709 = icmp eq ptr %657, null
  br i1 %709, label %797, label %710

710:                                              ; preds = %708
  %711 = load i32, ptr %658, align 4, !tbaa !5
  %712 = icmp slt i32 %711, 1
  br i1 %712, label %760, label %713

713:                                              ; preds = %710
  %714 = add nuw i32 %711, 1
  %715 = zext i32 %714 to i64
  %716 = add nsw i64 %715, -1
  %717 = add nsw i64 %715, -2
  %718 = and i64 %716, 3
  %719 = icmp ult i64 %717, 3
  br i1 %719, label %747, label %720

720:                                              ; preds = %713
  %721 = and i64 %716, -4
  br label %722

722:                                              ; preds = %722, %720
  %723 = phi i64 [ 1, %720 ], [ %744, %722 ]
  %724 = phi i64 [ 0, %720 ], [ %745, %722 ]
  %725 = getelementptr inbounds i32, ptr %658, i64 %723
  %726 = load i32, ptr %725, align 4, !tbaa !5
  %727 = sext i32 %726 to i64
  %728 = getelementptr inbounds i8, ptr %657, i64 %727
  store i8 0, ptr %728, align 1, !tbaa !57
  %729 = add nuw nsw i64 %723, 1
  %730 = getelementptr inbounds i32, ptr %658, i64 %729
  %731 = load i32, ptr %730, align 4, !tbaa !5
  %732 = sext i32 %731 to i64
  %733 = getelementptr inbounds i8, ptr %657, i64 %732
  store i8 0, ptr %733, align 1, !tbaa !57
  %734 = add nuw nsw i64 %723, 2
  %735 = getelementptr inbounds i32, ptr %658, i64 %734
  %736 = load i32, ptr %735, align 4, !tbaa !5
  %737 = sext i32 %736 to i64
  %738 = getelementptr inbounds i8, ptr %657, i64 %737
  store i8 0, ptr %738, align 1, !tbaa !57
  %739 = add nuw nsw i64 %723, 3
  %740 = getelementptr inbounds i32, ptr %658, i64 %739
  %741 = load i32, ptr %740, align 4, !tbaa !5
  %742 = sext i32 %741 to i64
  %743 = getelementptr inbounds i8, ptr %657, i64 %742
  store i8 0, ptr %743, align 1, !tbaa !57
  %744 = add nuw nsw i64 %723, 4
  %745 = add i64 %724, 4
  %746 = icmp eq i64 %745, %721
  br i1 %746, label %747, label %722

747:                                              ; preds = %722, %713
  %748 = phi i64 [ 1, %713 ], [ %744, %722 ]
  %749 = icmp eq i64 %718, 0
  br i1 %749, label %760, label %750

750:                                              ; preds = %747, %750
  %751 = phi i64 [ %757, %750 ], [ %748, %747 ]
  %752 = phi i64 [ %758, %750 ], [ 0, %747 ]
  %753 = getelementptr inbounds i32, ptr %658, i64 %751
  %754 = load i32, ptr %753, align 4, !tbaa !5
  %755 = sext i32 %754 to i64
  %756 = getelementptr inbounds i8, ptr %657, i64 %755
  store i8 0, ptr %756, align 1, !tbaa !57
  %757 = add nuw nsw i64 %751, 1
  %758 = add i64 %752, 1
  %759 = icmp eq i64 %758, %718
  br i1 %759, label %760, label %750, !llvm.loop !252

760:                                              ; preds = %747, %750, %710
  %761 = load i32, ptr %659, align 4, !tbaa !5
  %762 = icmp slt i32 %761, 1
  br i1 %762, label %817, label %763

763:                                              ; preds = %760
  %764 = add nuw i32 %761, 1
  %765 = zext i32 %764 to i64
  %766 = add nsw i64 %765, -1
  %767 = add nsw i64 %765, -2
  %768 = and i64 %766, 3
  %769 = icmp ult i64 %767, 3
  br i1 %769, label %804, label %770

770:                                              ; preds = %763
  %771 = and i64 %766, -4
  br label %772

772:                                              ; preds = %772, %770
  %773 = phi i64 [ 1, %770 ], [ %794, %772 ]
  %774 = phi i64 [ 0, %770 ], [ %795, %772 ]
  %775 = getelementptr inbounds i32, ptr %659, i64 %773
  %776 = load i32, ptr %775, align 4, !tbaa !5
  %777 = sext i32 %776 to i64
  %778 = getelementptr inbounds i8, ptr %657, i64 %777
  store i8 0, ptr %778, align 1, !tbaa !57
  %779 = add nuw nsw i64 %773, 1
  %780 = getelementptr inbounds i32, ptr %659, i64 %779
  %781 = load i32, ptr %780, align 4, !tbaa !5
  %782 = sext i32 %781 to i64
  %783 = getelementptr inbounds i8, ptr %657, i64 %782
  store i8 0, ptr %783, align 1, !tbaa !57
  %784 = add nuw nsw i64 %773, 2
  %785 = getelementptr inbounds i32, ptr %659, i64 %784
  %786 = load i32, ptr %785, align 4, !tbaa !5
  %787 = sext i32 %786 to i64
  %788 = getelementptr inbounds i8, ptr %657, i64 %787
  store i8 0, ptr %788, align 1, !tbaa !57
  %789 = add nuw nsw i64 %773, 3
  %790 = getelementptr inbounds i32, ptr %659, i64 %789
  %791 = load i32, ptr %790, align 4, !tbaa !5
  %792 = sext i32 %791 to i64
  %793 = getelementptr inbounds i8, ptr %657, i64 %792
  store i8 0, ptr %793, align 1, !tbaa !57
  %794 = add nuw nsw i64 %773, 4
  %795 = add i64 %774, 4
  %796 = icmp eq i64 %795, %771
  br i1 %796, label %804, label %772

797:                                              ; preds = %708
  %798 = load i32, ptr %637, align 8, !tbaa !60
  %799 = tail call i32 @llvm.smax.i32(i32 %798, i32 -1)
  %800 = sext i32 %799 to i64
  %801 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %800) #9
  %802 = load i32, ptr %637, align 8, !tbaa !60
  %803 = sext i32 %802 to i64
  tail call void @llvm.memset.p0.i64(ptr nonnull align 1 %801, i8 0, i64 %803, i1 false)
  br label %817

804:                                              ; preds = %772, %763
  %805 = phi i64 [ 1, %763 ], [ %794, %772 ]
  %806 = icmp eq i64 %768, 0
  br i1 %806, label %817, label %807

807:                                              ; preds = %804, %807
  %808 = phi i64 [ %814, %807 ], [ %805, %804 ]
  %809 = phi i64 [ %815, %807 ], [ 0, %804 ]
  %810 = getelementptr inbounds i32, ptr %659, i64 %808
  %811 = load i32, ptr %810, align 4, !tbaa !5
  %812 = sext i32 %811 to i64
  %813 = getelementptr inbounds i8, ptr %657, i64 %812
  store i8 0, ptr %813, align 1, !tbaa !57
  %814 = add nuw nsw i64 %808, 1
  %815 = add i64 %809, 1
  %816 = icmp eq i64 %815, %768
  br i1 %816, label %817, label %807, !llvm.loop !253

817:                                              ; preds = %804, %807, %760, %797
  %818 = phi ptr [ %801, %797 ], [ %657, %760 ], [ %657, %807 ], [ %657, %804 ]
  %819 = load i32, ptr %669, align 4
  %820 = shl i32 %819, 2
  %821 = ashr exact i32 %820, 2
  %822 = load ptr, ptr %638, align 8, !tbaa !62
  %823 = sext i32 %821 to i64
  %824 = getelementptr inbounds ptr, ptr %822, i64 %823
  %825 = load ptr, ptr %824, align 8, !tbaa !23
  %826 = load i32, ptr %825, align 4, !tbaa !5
  %827 = icmp slt i32 %826, 1
  br i1 %827, label %880, label %828

828:                                              ; preds = %817
  %829 = add nuw i32 %826, 1
  %830 = zext i32 %829 to i64
  %831 = add nsw i64 %830, -1
  %832 = add nsw i64 %830, -2
  %833 = and i64 %831, 3
  %834 = icmp ult i64 %832, 3
  br i1 %834, label %862, label %835

835:                                              ; preds = %828
  %836 = and i64 %831, -4
  br label %837

837:                                              ; preds = %837, %835
  %838 = phi i64 [ 1, %835 ], [ %859, %837 ]
  %839 = phi i64 [ 0, %835 ], [ %860, %837 ]
  %840 = getelementptr inbounds i32, ptr %825, i64 %838
  %841 = load i32, ptr %840, align 4, !tbaa !5
  %842 = sext i32 %841 to i64
  %843 = getelementptr inbounds i8, ptr %818, i64 %842
  store i8 1, ptr %843, align 1, !tbaa !57
  %844 = add nuw nsw i64 %838, 1
  %845 = getelementptr inbounds i32, ptr %825, i64 %844
  %846 = load i32, ptr %845, align 4, !tbaa !5
  %847 = sext i32 %846 to i64
  %848 = getelementptr inbounds i8, ptr %818, i64 %847
  store i8 1, ptr %848, align 1, !tbaa !57
  %849 = add nuw nsw i64 %838, 2
  %850 = getelementptr inbounds i32, ptr %825, i64 %849
  %851 = load i32, ptr %850, align 4, !tbaa !5
  %852 = sext i32 %851 to i64
  %853 = getelementptr inbounds i8, ptr %818, i64 %852
  store i8 1, ptr %853, align 1, !tbaa !57
  %854 = add nuw nsw i64 %838, 3
  %855 = getelementptr inbounds i32, ptr %825, i64 %854
  %856 = load i32, ptr %855, align 4, !tbaa !5
  %857 = sext i32 %856 to i64
  %858 = getelementptr inbounds i8, ptr %818, i64 %857
  store i8 1, ptr %858, align 1, !tbaa !57
  %859 = add nuw nsw i64 %838, 4
  %860 = add i64 %839, 4
  %861 = icmp eq i64 %860, %836
  br i1 %861, label %862, label %837

862:                                              ; preds = %837, %828
  %863 = phi i64 [ 1, %828 ], [ %859, %837 ]
  %864 = icmp eq i64 %833, 0
  br i1 %864, label %875, label %865

865:                                              ; preds = %862, %865
  %866 = phi i64 [ %872, %865 ], [ %863, %862 ]
  %867 = phi i64 [ %873, %865 ], [ 0, %862 ]
  %868 = getelementptr inbounds i32, ptr %825, i64 %866
  %869 = load i32, ptr %868, align 4, !tbaa !5
  %870 = sext i32 %869 to i64
  %871 = getelementptr inbounds i8, ptr %818, i64 %870
  store i8 1, ptr %871, align 1, !tbaa !57
  %872 = add nuw nsw i64 %866, 1
  %873 = add i64 %867, 1
  %874 = icmp eq i64 %873, %833
  br i1 %874, label %875, label %865, !llvm.loop !254

875:                                              ; preds = %865, %862
  %876 = load i32, ptr %669, align 4
  %877 = shl i32 %876, 2
  %878 = ashr exact i32 %877, 2
  %879 = sext i32 %878 to i64
  br label %880

880:                                              ; preds = %875, %817
  %881 = phi i64 [ %879, %875 ], [ %823, %817 ]
  %882 = load ptr, ptr %639, align 8, !tbaa !64
  %883 = getelementptr inbounds ptr, ptr %882, i64 %881
  %884 = load ptr, ptr %883, align 8, !tbaa !23
  %885 = load i32, ptr %884, align 4, !tbaa !5
  %886 = icmp slt i32 %885, 1
  br i1 %886, label %934, label %887

887:                                              ; preds = %880
  %888 = add nuw i32 %885, 1
  %889 = zext i32 %888 to i64
  %890 = add nsw i64 %889, -1
  %891 = add nsw i64 %889, -2
  %892 = and i64 %890, 3
  %893 = icmp ult i64 %891, 3
  br i1 %893, label %921, label %894

894:                                              ; preds = %887
  %895 = and i64 %890, -4
  br label %896

896:                                              ; preds = %896, %894
  %897 = phi i64 [ 1, %894 ], [ %918, %896 ]
  %898 = phi i64 [ 0, %894 ], [ %919, %896 ]
  %899 = getelementptr inbounds i32, ptr %884, i64 %897
  %900 = load i32, ptr %899, align 4, !tbaa !5
  %901 = sext i32 %900 to i64
  %902 = getelementptr inbounds i8, ptr %818, i64 %901
  store i8 2, ptr %902, align 1, !tbaa !57
  %903 = add nuw nsw i64 %897, 1
  %904 = getelementptr inbounds i32, ptr %884, i64 %903
  %905 = load i32, ptr %904, align 4, !tbaa !5
  %906 = sext i32 %905 to i64
  %907 = getelementptr inbounds i8, ptr %818, i64 %906
  store i8 2, ptr %907, align 1, !tbaa !57
  %908 = add nuw nsw i64 %897, 2
  %909 = getelementptr inbounds i32, ptr %884, i64 %908
  %910 = load i32, ptr %909, align 4, !tbaa !5
  %911 = sext i32 %910 to i64
  %912 = getelementptr inbounds i8, ptr %818, i64 %911
  store i8 2, ptr %912, align 1, !tbaa !57
  %913 = add nuw nsw i64 %897, 3
  %914 = getelementptr inbounds i32, ptr %884, i64 %913
  %915 = load i32, ptr %914, align 4, !tbaa !5
  %916 = sext i32 %915 to i64
  %917 = getelementptr inbounds i8, ptr %818, i64 %916
  store i8 2, ptr %917, align 1, !tbaa !57
  %918 = add nuw nsw i64 %897, 4
  %919 = add i64 %898, 4
  %920 = icmp eq i64 %919, %895
  br i1 %920, label %921, label %896

921:                                              ; preds = %896, %887
  %922 = phi i64 [ 1, %887 ], [ %918, %896 ]
  %923 = icmp eq i64 %892, 0
  br i1 %923, label %934, label %924

924:                                              ; preds = %921, %924
  %925 = phi i64 [ %931, %924 ], [ %922, %921 ]
  %926 = phi i64 [ %932, %924 ], [ 0, %921 ]
  %927 = getelementptr inbounds i32, ptr %884, i64 %925
  %928 = load i32, ptr %927, align 4, !tbaa !5
  %929 = sext i32 %928 to i64
  %930 = getelementptr inbounds i8, ptr %818, i64 %929
  store i8 2, ptr %930, align 1, !tbaa !57
  %931 = add nuw nsw i64 %925, 1
  %932 = add i64 %926, 1
  %933 = icmp eq i64 %932, %892
  br i1 %933, label %934, label %924, !llvm.loop !255

934:                                              ; preds = %921, %924, %880, %704
  %935 = phi ptr [ %707, %704 ], [ %818, %880 ], [ %818, %924 ], [ %818, %921 ]
  %936 = phi ptr [ %659, %704 ], [ %884, %880 ], [ %884, %924 ], [ %884, %921 ]
  %937 = phi ptr [ %658, %704 ], [ %825, %880 ], [ %825, %924 ], [ %825, %921 ]
  %938 = phi ptr [ %657, %704 ], [ %818, %880 ], [ %818, %924 ], [ %818, %921 ]
  %939 = load i8, ptr %670, align 1
  %940 = and i8 %939, 7
  %941 = icmp eq i8 %940, 0
  br i1 %941, label %1235, label %942

942:                                              ; preds = %934
  %943 = load i32, ptr @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4, !tbaa !5
  %944 = icmp eq i32 %943, 0
  br i1 %944, label %948, label %945

945:                                              ; preds = %942
  %946 = load i32, ptr %669, align 4
  %947 = icmp slt i32 %946, 0
  br label %948

948:                                              ; preds = %945, %942
  %949 = phi i1 [ false, %942 ], [ %947, %945 ]
  %950 = and i8 %939, 120
  %951 = icmp eq i8 %950, 0
  br i1 %951, label %983, label %952

952:                                              ; preds = %948
  %953 = icmp slt i32 %661, %620
  br i1 %953, label %954, label %967

954:                                              ; preds = %952
  %955 = sext i32 %661 to i64
  br label %956

956:                                              ; preds = %954, %962
  %957 = phi i64 [ %955, %954 ], [ %963, %962 ]
  %958 = getelementptr inbounds i16, ptr %191, i64 %957
  %959 = load i16, ptr %958, align 2, !tbaa !44
  %960 = zext i16 %959 to i32
  %961 = icmp sgt i32 %690, %960
  br i1 %961, label %962, label %965

962:                                              ; preds = %956
  %963 = add nsw i64 %957, 1
  %964 = icmp eq i64 %963, %650
  br i1 %964, label %967, label %956

965:                                              ; preds = %956
  %966 = trunc i64 %957 to i32
  br label %967

967:                                              ; preds = %962, %965, %952
  %968 = phi i32 [ %661, %952 ], [ %966, %965 ], [ %620, %962 ]
  %969 = icmp slt i32 %662, %621
  br i1 %969, label %970, label %983

970:                                              ; preds = %967
  %971 = sext i32 %662 to i64
  br label %972

972:                                              ; preds = %970, %978
  %973 = phi i64 [ %971, %970 ], [ %979, %978 ]
  %974 = getelementptr inbounds i16, ptr %237, i64 %973
  %975 = load i16, ptr %974, align 2, !tbaa !44
  %976 = zext i16 %975 to i32
  %977 = icmp sgt i32 %690, %976
  br i1 %977, label %978, label %981

978:                                              ; preds = %972
  %979 = add nsw i64 %973, 1
  %980 = icmp eq i64 %979, %651
  br i1 %980, label %983, label %972

981:                                              ; preds = %972
  %982 = trunc i64 %973 to i32
  br label %983

983:                                              ; preds = %978, %981, %967, %948
  %984 = phi i32 [ %662, %948 ], [ %662, %967 ], [ %982, %981 ], [ %621, %978 ]
  %985 = phi i32 [ %661, %948 ], [ %968, %967 ], [ %968, %981 ], [ %968, %978 ]
  %986 = add nsw i32 %656, 1
  %987 = icmp slt i32 %986, %690
  br i1 %987, label %988, label %1053

988:                                              ; preds = %983
  %989 = xor i32 %656, -1
  %990 = add i32 %690, %989
  %991 = zext i32 %990 to i64
  %992 = icmp ult i32 %990, 8
  br i1 %992, label %1042, label %993

993:                                              ; preds = %988
  %994 = icmp ult i32 %990, 64
  br i1 %994, label %1023, label %995

995:                                              ; preds = %993
  %996 = and i64 %991, 4294967232
  %997 = trunc i32 %986 to i16
  %998 = insertelement <16 x i16> poison, i16 %997, i64 0
  %999 = shufflevector <16 x i16> %998, <16 x i16> poison, <16 x i32> zeroinitializer
  %1000 = add <16 x i16> %999, <i16 0, i16 1, i16 2, i16 3, i16 4, i16 5, i16 6, i16 7, i16 8, i16 9, i16 10, i16 11, i16 12, i16 13, i16 14, i16 15>
  %1001 = trunc i64 %996 to i32
  %1002 = add i32 %986, %1001
  br label %1003

1003:                                             ; preds = %1003, %995
  %1004 = phi i64 [ 0, %995 ], [ %1013, %1003 ]
  %1005 = phi <16 x i16> [ %1000, %995 ], [ %1014, %1003 ]
  %1006 = add <16 x i16> %1005, <i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16>
  %1007 = add <16 x i16> %1005, <i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32>
  %1008 = add <16 x i16> %1005, <i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48>
  %1009 = getelementptr inbounds i16, ptr %421, i64 %1004
  store <16 x i16> %1005, ptr %1009, align 2, !tbaa !44
  %1010 = getelementptr inbounds i16, ptr %1009, i64 16
  store <16 x i16> %1006, ptr %1010, align 2, !tbaa !44
  %1011 = getelementptr inbounds i16, ptr %1009, i64 32
  store <16 x i16> %1007, ptr %1011, align 2, !tbaa !44
  %1012 = getelementptr inbounds i16, ptr %1009, i64 48
  store <16 x i16> %1008, ptr %1012, align 2, !tbaa !44
  %1013 = add nuw i64 %1004, 64
  %1014 = add <16 x i16> %1005, <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>
  %1015 = icmp eq i64 %1013, %996
  br i1 %1015, label %1016, label %1003, !llvm.loop !256

1016:                                             ; preds = %1003
  %1017 = icmp eq i64 %996, %991
  br i1 %1017, label %1053, label %1018

1018:                                             ; preds = %1016
  %1019 = trunc i64 %996 to i32
  %1020 = add i32 %986, %1019
  %1021 = and i64 %991, 56
  %1022 = icmp eq i64 %1021, 0
  br i1 %1022, label %1042, label %1023

1023:                                             ; preds = %993, %1018
  %1024 = phi i32 [ %1002, %1018 ], [ %986, %993 ]
  %1025 = phi i64 [ %996, %1018 ], [ 0, %993 ]
  %1026 = and i64 %991, 4294967288
  %1027 = trunc i64 %1026 to i32
  %1028 = add i32 %986, %1027
  %1029 = trunc i32 %1024 to i16
  %1030 = insertelement <8 x i16> poison, i16 %1029, i64 0
  %1031 = shufflevector <8 x i16> %1030, <8 x i16> poison, <8 x i32> zeroinitializer
  %1032 = add <8 x i16> %1031, <i16 0, i16 1, i16 2, i16 3, i16 4, i16 5, i16 6, i16 7>
  br label %1033

1033:                                             ; preds = %1033, %1023
  %1034 = phi i64 [ %1025, %1023 ], [ %1037, %1033 ]
  %1035 = phi <8 x i16> [ %1032, %1023 ], [ %1038, %1033 ]
  %1036 = getelementptr inbounds i16, ptr %421, i64 %1034
  store <8 x i16> %1035, ptr %1036, align 2, !tbaa !44
  %1037 = add nuw i64 %1034, 8
  %1038 = add <8 x i16> %1035, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %1039 = icmp eq i64 %1037, %1026
  br i1 %1039, label %1040, label %1033, !llvm.loop !257

1040:                                             ; preds = %1033
  %1041 = icmp eq i64 %1026, %991
  br i1 %1041, label %1053, label %1042

1042:                                             ; preds = %988, %1018, %1040
  %1043 = phi i64 [ 0, %988 ], [ %996, %1018 ], [ %1026, %1040 ]
  %1044 = phi i32 [ %986, %988 ], [ %1020, %1018 ], [ %1028, %1040 ]
  br label %1045

1045:                                             ; preds = %1042, %1045
  %1046 = phi i64 [ %1049, %1045 ], [ %1043, %1042 ]
  %1047 = phi i32 [ %1051, %1045 ], [ %1044, %1042 ]
  %1048 = trunc i32 %1047 to i16
  %1049 = add nuw nsw i64 %1046, 1
  %1050 = getelementptr inbounds i16, ptr %421, i64 %1046
  store i16 %1048, ptr %1050, align 2, !tbaa !44
  %1051 = add nsw i32 %1047, 1
  %1052 = icmp eq i64 %1049, %991
  br i1 %1052, label %1053, label %1045, !llvm.loop !258

1053:                                             ; preds = %1045, %1016, %1040, %983
  %1054 = phi i32 [ 0, %983 ], [ %990, %1040 ], [ %990, %1016 ], [ %990, %1045 ]
  %1055 = zext i32 %1054 to i64
  %1056 = getelementptr inbounds i16, ptr %421, i64 %1055
  %1057 = select i1 %949, ptr %237, ptr %191
  %1058 = select i1 %949, i32 %984, i32 %985
  %1059 = select i1 %949, i32 %621, i32 %620
  %1060 = icmp slt i32 %1058, %1059
  br i1 %1060, label %1061, label %1220

1061:                                             ; preds = %1053
  %1062 = sub nsw i32 %1059, %1058
  %1063 = icmp sgt i32 %1062, 6
  br i1 %1063, label %1064, label %1157

1064:                                             ; preds = %1061
  %1065 = add nsw i32 %1059, -2
  %1066 = add nsw i32 %1058, 2
  %1067 = icmp slt i32 %1066, %1065
  br i1 %1067, label %1068, label %1157

1068:                                             ; preds = %1064
  %1069 = add nsw i32 %1058, 1
  %1070 = sext i32 %1069 to i64
  %1071 = getelementptr inbounds i16, ptr %1057, i64 %1070
  %1072 = load i16, ptr %1071, align 2, !tbaa !44
  %1073 = zext i16 %1072 to i64
  %1074 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %1073
  %1075 = getelementptr inbounds %class.Vector, ptr %1074, i64 0, i32 2
  %1076 = load double, ptr %1075, align 8, !tbaa !49
  %1077 = sext i32 %1058 to i64
  %1078 = getelementptr inbounds i16, ptr %1057, i64 %1077
  %1079 = load i16, ptr %1078, align 2, !tbaa !44
  %1080 = zext i16 %1079 to i64
  %1081 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %1080
  %1082 = getelementptr inbounds %class.Vector, ptr %1081, i64 0, i32 2
  %1083 = load double, ptr %1082, align 8, !tbaa !49
  %1084 = getelementptr inbounds %class.Vector, ptr %1074, i64 0, i32 1
  %1085 = load double, ptr %1084, align 8, !tbaa !66
  %1086 = getelementptr inbounds %class.Vector, ptr %1081, i64 0, i32 1
  %1087 = load double, ptr %1086, align 8, !tbaa !66
  %1088 = load double, ptr %1074, align 8, !tbaa !67
  %1089 = load double, ptr %1081, align 8, !tbaa !67
  %1090 = sext i32 %1066 to i64
  %1091 = sext i32 %1065 to i64
  %1092 = insertelement <2 x double> poison, double %1076, i64 0
  %1093 = insertelement <2 x double> %1092, double %1083, i64 1
  %1094 = insertelement <2 x double> poison, double %1085, i64 0
  %1095 = insertelement <2 x double> %1094, double %1087, i64 1
  %1096 = insertelement <2 x double> poison, double %1088, i64 0
  %1097 = insertelement <2 x double> %1096, double %1089, i64 1
  %1098 = insertelement <2 x double> poison, double %688, i64 0
  %1099 = shufflevector <2 x double> %1098, <2 x double> poison, <2 x i32> zeroinitializer
  %1100 = shufflevector <2 x double> %685, <2 x double> poison, <2 x i32> <i32 1, i32 1>
  %1101 = shufflevector <2 x double> %685, <2 x double> poison, <2 x i32> zeroinitializer
  br label %1102

1102:                                             ; preds = %1068, %1102
  %1103 = phi i64 [ %1090, %1068 ], [ %1148, %1102 ]
  %1104 = phi i32 [ %1058, %1068 ], [ %1150, %1102 ]
  %1105 = phi i32 [ 0, %1068 ], [ %1147, %1102 ]
  %1106 = phi i16 [ %1079, %1068 ], [ %1113, %1102 ]
  %1107 = phi i16 [ %1072, %1068 ], [ %1117, %1102 ]
  %1108 = phi <2 x double> [ %1093, %1068 ], [ %1152, %1102 ]
  %1109 = phi <2 x double> [ %1095, %1068 ], [ %1154, %1102 ]
  %1110 = phi <2 x double> [ %1097, %1068 ], [ %1156, %1102 ]
  %1111 = fsub <2 x double> %1099, %1108
  %1112 = getelementptr inbounds i16, ptr %1057, i64 %1103
  %1113 = load i16, ptr %1112, align 2, !tbaa !44
  %1114 = add nsw i32 %1104, 3
  %1115 = sext i32 %1114 to i64
  %1116 = getelementptr inbounds i16, ptr %1057, i64 %1115
  %1117 = load i16, ptr %1116, align 2, !tbaa !44
  %1118 = zext i16 %1113 to i64
  %1119 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %1118
  %1120 = load double, ptr %1119, align 8, !tbaa !67
  %1121 = zext i16 %1117 to i64
  %1122 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %1121
  %1123 = load double, ptr %1122, align 8, !tbaa !67
  %1124 = getelementptr inbounds %class.Vector, ptr %1119, i64 0, i32 1
  %1125 = load double, ptr %1124, align 8, !tbaa !66
  %1126 = getelementptr inbounds %class.Vector, ptr %1122, i64 0, i32 1
  %1127 = load double, ptr %1126, align 8, !tbaa !66
  %1128 = getelementptr inbounds %class.Vector, ptr %1119, i64 0, i32 2
  %1129 = load double, ptr %1128, align 8, !tbaa !49
  %1130 = getelementptr inbounds %class.Vector, ptr %1122, i64 0, i32 2
  %1131 = load double, ptr %1130, align 8, !tbaa !49
  %1132 = fsub <2 x double> %1101, %1110
  %1133 = fmul <2 x double> %1132, %1132
  %1134 = fsub <2 x double> %1100, %1109
  %1135 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %1134, <2 x double> %1134, <2 x double> %1133)
  %1136 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %1111, <2 x double> %1111, <2 x double> %1135)
  %1137 = fcmp olt <2 x double> %1136, %653
  %1138 = zext i32 %1105 to i64
  %1139 = getelementptr inbounds i16, ptr %283, i64 %1138
  store i16 %1106, ptr %1139, align 2, !tbaa !44
  %1140 = extractelement <2 x i1> %1137, i64 1
  %1141 = zext i1 %1140 to i32
  %1142 = add nuw nsw i32 %1105, %1141
  %1143 = zext i32 %1142 to i64
  %1144 = getelementptr inbounds i16, ptr %283, i64 %1143
  store i16 %1107, ptr %1144, align 2, !tbaa !44
  %1145 = extractelement <2 x i1> %1137, i64 0
  %1146 = zext i1 %1145 to i32
  %1147 = add i32 %1142, %1146
  %1148 = add nsw i64 %1103, 2
  %1149 = icmp slt i64 %1148, %1091
  %1150 = trunc i64 %1103 to i32
  %1151 = insertelement <2 x double> poison, double %1131, i64 0
  %1152 = insertelement <2 x double> %1151, double %1129, i64 1
  %1153 = insertelement <2 x double> poison, double %1127, i64 0
  %1154 = insertelement <2 x double> %1153, double %1125, i64 1
  %1155 = insertelement <2 x double> poison, double %1123, i64 0
  %1156 = insertelement <2 x double> %1155, double %1120, i64 1
  br i1 %1149, label %1102, label %1157

1157:                                             ; preds = %1102, %1064, %1061
  %1158 = phi i32 [ 0, %1061 ], [ 0, %1064 ], [ %1147, %1102 ]
  %1159 = phi i32 [ %1058, %1061 ], [ %1058, %1064 ], [ %1150, %1102 ]
  %1160 = icmp slt i32 %1159, %1059
  br i1 %1160, label %1161, label %1166

1161:                                             ; preds = %1157
  %1162 = sext i32 %1159 to i64
  %1163 = sext i32 %1059 to i64
  %1164 = extractelement <2 x double> %685, i64 0
  %1165 = extractelement <2 x double> %685, i64 1
  br label %1171

1166:                                             ; preds = %1194, %1157
  %1167 = phi i32 [ %1158, %1157 ], [ %1195, %1194 ]
  %1168 = icmp sgt i32 %1167, 0
  br i1 %1168, label %1169, label %1220

1169:                                             ; preds = %1166
  %1170 = zext i32 %1167 to i64
  br label %1198

1171:                                             ; preds = %1161, %1194
  %1172 = phi i64 [ %1162, %1161 ], [ %1196, %1194 ]
  %1173 = phi i32 [ %1158, %1161 ], [ %1195, %1194 ]
  %1174 = getelementptr inbounds i16, ptr %1057, i64 %1172
  %1175 = load i16, ptr %1174, align 2, !tbaa !44
  %1176 = zext i16 %1175 to i64
  %1177 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %1176
  %1178 = load double, ptr %1177, align 8, !tbaa !67
  %1179 = getelementptr inbounds %class.Vector, ptr %1177, i64 0, i32 1
  %1180 = load double, ptr %1179, align 8, !tbaa !66
  %1181 = getelementptr inbounds %class.Vector, ptr %1177, i64 0, i32 2
  %1182 = load double, ptr %1181, align 8, !tbaa !49
  %1183 = fsub double %1164, %1178
  %1184 = fmul double %1183, %1183
  %1185 = fsub double %1165, %1180
  %1186 = tail call double @llvm.fmuladd.f64(double %1185, double %1185, double %1184)
  %1187 = fsub double %688, %1182
  %1188 = tail call double @llvm.fmuladd.f64(double %1187, double %1187, double %1186)
  %1189 = fcmp ugt double %1188, %23
  br i1 %1189, label %1194, label %1190

1190:                                             ; preds = %1171
  %1191 = add nsw i32 %1173, 1
  %1192 = sext i32 %1173 to i64
  %1193 = getelementptr inbounds i16, ptr %283, i64 %1192
  store i16 %1175, ptr %1193, align 2, !tbaa !44
  br label %1194

1194:                                             ; preds = %1190, %1171
  %1195 = phi i32 [ %1191, %1190 ], [ %1173, %1171 ]
  %1196 = add nsw i64 %1172, 1
  %1197 = icmp eq i64 %1196, %1163
  br i1 %1197, label %1166, label %1171

1198:                                             ; preds = %1169, %1215
  %1199 = phi i64 [ 0, %1169 ], [ %1218, %1215 ]
  %1200 = phi ptr [ %1056, %1169 ], [ %1217, %1215 ]
  %1201 = getelementptr inbounds i16, ptr %283, i64 %1199
  %1202 = load i16, ptr %1201, align 2, !tbaa !44
  %1203 = zext i16 %1202 to i64
  %1204 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %1203, i32 4
  %1205 = load i8, ptr %1204, align 1
  %1206 = and i8 %1205, 7
  store i16 %1202, ptr %1200, align 2, !tbaa !44
  %1207 = getelementptr inbounds i16, ptr %1200, i64 1
  %1208 = insertelement <2 x i16> poison, i16 %1202, i64 0
  %1209 = shufflevector <2 x i16> %1208, <2 x i16> poison, <2 x i32> zeroinitializer
  %1210 = add <2 x i16> %1209, <i16 1, i16 2>
  store <2 x i16> %1210, ptr %1207, align 2, !tbaa !44
  %1211 = icmp ult i8 %1206, 4
  br i1 %1211, label %1215, label %1212

1212:                                             ; preds = %1198
  %1213 = add <2 x i16> %1209, <i16 3, i16 4>
  %1214 = getelementptr inbounds i16, ptr %1200, i64 3
  store <2 x i16> %1213, ptr %1214, align 2, !tbaa !44
  br label %1215

1215:                                             ; preds = %1212, %1198
  %1216 = zext i8 %1206 to i64
  %1217 = getelementptr inbounds i16, ptr %1200, i64 %1216
  %1218 = add nuw nsw i64 %1199, 1
  %1219 = icmp eq i64 %1218, %1170
  br i1 %1219, label %1220, label %1198

1220:                                             ; preds = %1215, %1166, %1053
  %1221 = phi ptr [ %1056, %1053 ], [ %1056, %1166 ], [ %1217, %1215 ]
  %1222 = ptrtoint ptr %1221 to i64
  %1223 = sub i64 %1222, %640
  %1224 = lshr exact i64 %1223, 1
  %1225 = trunc i64 %1224 to i32
  %1226 = icmp eq i32 %1225, 0
  br i1 %1226, label %1238, label %1227

1227:                                             ; preds = %1220
  %1228 = shl i64 %1223, 31
  %1229 = add i64 %1228, -4294967296
  %1230 = ashr i64 %1229, 32
  %1231 = getelementptr inbounds i16, ptr %421, i64 %1230
  %1232 = load i16, ptr %1231, align 2, !tbaa !44
  %1233 = ashr i64 %1228, 32
  %1234 = getelementptr inbounds i16, ptr %421, i64 %1233
  store i16 %1232, ptr %1234, align 2, !tbaa !44
  br label %1238

1235:                                             ; preds = %934
  %1236 = add nsw i32 %664, 1
  %1237 = load i32, ptr @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4, !tbaa !5
  br label %1238

1238:                                             ; preds = %1220, %1227, %1235
  %1239 = phi i32 [ %1237, %1235 ], [ %943, %1227 ], [ %943, %1220 ]
  %1240 = phi i32 [ %1236, %1235 ], [ 0, %1227 ], [ 0, %1220 ]
  %1241 = phi i32 [ %663, %1235 ], [ %1225, %1227 ], [ 0, %1220 ]
  %1242 = phi i32 [ %662, %1235 ], [ %984, %1227 ], [ %984, %1220 ]
  %1243 = phi i32 [ %661, %1235 ], [ %985, %1227 ], [ %985, %1220 ]
  %1244 = icmp eq i32 %1239, 0
  br i1 %1244, label %1249, label %1245

1245:                                             ; preds = %1238
  %1246 = load i32, ptr %669, align 4
  %1247 = and i32 %1246, 1073741824
  %1248 = icmp ne i32 %1247, 0
  br label %1249

1249:                                             ; preds = %1245, %1238
  %1250 = phi i1 [ false, %1238 ], [ %1248, %1245 ]
  %1251 = load i32, ptr %13, align 8, !tbaa !17
  %1252 = add nsw i32 %641, %1251
  %1253 = load i32, ptr %642, align 4, !tbaa !68
  %1254 = icmp sgt i32 %1253, %1252
  br i1 %1254, label %1270, label %1255

1255:                                             ; preds = %1249, %1255
  %1256 = phi i32 [ %1258, %1255 ], [ %1253, %1249 ]
  %1257 = ashr i32 %1256, 1
  %1258 = add nsw i32 %1257, %1256
  %1259 = icmp sgt i32 %1258, %1252
  br i1 %1259, label %1260, label %1255

1260:                                             ; preds = %1255
  %1261 = sext i32 %1258 to i64
  %1262 = icmp slt i32 %1258, 0
  %1263 = shl nsw i64 %1261, 1
  %1264 = select i1 %1262, i64 -1, i64 %1263
  %1265 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %1264) #9
  %1266 = load ptr, ptr %8, align 8, !tbaa !46
  %1267 = sext i32 %1251 to i64
  %1268 = shl nsw i64 %1267, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 2 %1265, ptr align 2 %1266, i64 %1268, i1 false)
  %1269 = icmp eq ptr %1266, null
  br i1 %1269, label %1274, label %1272

1270:                                             ; preds = %1249
  %1271 = load ptr, ptr %8, align 8, !tbaa !46
  br label %1276

1272:                                             ; preds = %1260
  tail call void @_ZdaPv(ptr noundef nonnull %1266) #10
  %1273 = load i32, ptr %13, align 8, !tbaa !17
  br label %1274

1274:                                             ; preds = %1272, %1260
  %1275 = phi i32 [ %1273, %1272 ], [ %1251, %1260 ]
  store ptr %1265, ptr %8, align 8, !tbaa !46
  store i32 %1258, ptr %642, align 4, !tbaa !68
  br label %1276

1276:                                             ; preds = %1270, %1274
  %1277 = phi i32 [ %1251, %1270 ], [ %1275, %1274 ]
  %1278 = phi ptr [ %1271, %1270 ], [ %1265, %1274 ]
  %1279 = ptrtoint ptr %1278 to i64
  %1280 = add nsw i32 %1277, 1
  %1281 = sext i32 %1280 to i64
  %1282 = getelementptr inbounds i16, ptr %1278, i64 %1281
  %1283 = icmp slt i32 %1240, %1241
  br i1 %1250, label %1284, label %1332

1284:                                             ; preds = %1276
  br i1 %1283, label %1285, label %1503

1285:                                             ; preds = %1284
  %1286 = sext i32 %1240 to i64
  %1287 = sext i32 %1241 to i64
  %1288 = extractelement <2 x double> %685, i64 0
  %1289 = extractelement <2 x double> %685, i64 1
  br label %1290

1290:                                             ; preds = %1285, %1327
  %1291 = phi i64 [ %1286, %1285 ], [ %1330, %1327 ]
  %1292 = phi ptr [ %467, %1285 ], [ %1329, %1327 ]
  %1293 = phi ptr [ %1282, %1285 ], [ %1328, %1327 ]
  %1294 = getelementptr inbounds i16, ptr %421, i64 %1291
  %1295 = load i16, ptr %1294, align 2, !tbaa !44
  %1296 = zext i16 %1295 to i64
  %1297 = getelementptr inbounds %struct.CompAtomExt, ptr %45, i64 %1296
  %1298 = load i32, ptr %1297, align 4
  %1299 = and i32 %1298, 1073741824
  %1300 = icmp eq i32 %1299, 0
  br i1 %1300, label %1301, label %1327

1301:                                             ; preds = %1290
  %1302 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %1296
  %1303 = getelementptr inbounds %class.Vector, ptr %1302, i64 0, i32 2
  %1304 = load double, ptr %1303, align 8, !tbaa !49
  %1305 = fsub double %688, %1304
  %1306 = getelementptr inbounds %class.Vector, ptr %1302, i64 0, i32 1
  %1307 = load double, ptr %1306, align 8, !tbaa !66
  %1308 = fsub double %1289, %1307
  %1309 = load double, ptr %1302, align 8, !tbaa !67
  %1310 = fsub double %1288, %1309
  %1311 = fmul double %1310, %1310
  %1312 = tail call double @llvm.fmuladd.f64(double %1308, double %1308, double %1311)
  %1313 = tail call double @llvm.fmuladd.f64(double %1305, double %1305, double %1312)
  %1314 = fcmp ugt double %1313, %20
  br i1 %1314, label %1327, label %1315

1315:                                             ; preds = %1301
  %1316 = shl i32 %1298, 2
  %1317 = ashr exact i32 %1316, 2
  %1318 = icmp slt i32 %1317, %698
  %1319 = icmp sgt i32 %1317, %700
  %1320 = select i1 %1318, i1 true, i1 %1319
  %1321 = select i1 %1320, ptr %1293, ptr %1292
  %1322 = zext i1 %1320 to i64
  %1323 = getelementptr inbounds i16, ptr %1293, i64 %1322
  %1324 = xor i1 %1320, true
  %1325 = zext i1 %1324 to i64
  %1326 = getelementptr inbounds i16, ptr %1292, i64 %1325
  store i16 %1295, ptr %1321, align 2, !tbaa !44
  br label %1327

1327:                                             ; preds = %1315, %1301, %1290
  %1328 = phi ptr [ %1293, %1290 ], [ %1293, %1301 ], [ %1323, %1315 ]
  %1329 = phi ptr [ %1292, %1290 ], [ %1292, %1301 ], [ %1326, %1315 ]
  %1330 = add nsw i64 %1291, 1
  %1331 = icmp eq i64 %1330, %1287
  br i1 %1331, label %1503, label %1290

1332:                                             ; preds = %1276
  br i1 %1283, label %1333, label %1503

1333:                                             ; preds = %1332
  %1334 = sub nsw i32 %1241, %1240
  %1335 = icmp sgt i32 %1334, 6
  br i1 %1335, label %1336, label %1454

1336:                                             ; preds = %1333
  %1337 = add nsw i32 %1241, -2
  %1338 = add nsw i32 %1240, 2
  %1339 = icmp slt i32 %1338, %1337
  br i1 %1339, label %1340, label %1454

1340:                                             ; preds = %1336
  %1341 = sext i32 %1240 to i64
  %1342 = getelementptr inbounds i16, ptr %421, i64 %1341
  %1343 = load i16, ptr %1342, align 2, !tbaa !44
  %1344 = zext i16 %1343 to i64
  %1345 = getelementptr inbounds %struct.CompAtomExt, ptr %45, i64 %1344
  %1346 = load i32, ptr %1345, align 4
  %1347 = add nsw i32 %1240, 1
  %1348 = sext i32 %1347 to i64
  %1349 = getelementptr inbounds i16, ptr %421, i64 %1348
  %1350 = load i16, ptr %1349, align 2, !tbaa !44
  %1351 = zext i16 %1350 to i64
  %1352 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %1351
  %1353 = getelementptr inbounds %class.Vector, ptr %1352, i64 0, i32 2
  %1354 = load double, ptr %1353, align 8, !tbaa !49
  %1355 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %1344
  %1356 = getelementptr inbounds %class.Vector, ptr %1355, i64 0, i32 2
  %1357 = load double, ptr %1356, align 8, !tbaa !49
  %1358 = getelementptr inbounds %class.Vector, ptr %1352, i64 0, i32 1
  %1359 = load double, ptr %1358, align 8, !tbaa !66
  %1360 = getelementptr inbounds %class.Vector, ptr %1355, i64 0, i32 1
  %1361 = load double, ptr %1360, align 8, !tbaa !66
  %1362 = load double, ptr %1352, align 8, !tbaa !67
  %1363 = load double, ptr %1355, align 8, !tbaa !67
  %1364 = sext i32 %1338 to i64
  %1365 = sext i32 %1337 to i64
  %1366 = extractelement <2 x double> %685, i64 0
  %1367 = extractelement <2 x double> %685, i64 1
  br label %1368

1368:                                             ; preds = %1340, %1448
  %1369 = phi i64 [ %1364, %1340 ], [ %1451, %1448 ]
  %1370 = phi i64 [ %1351, %1340 ], [ %1408, %1448 ]
  %1371 = phi i32 [ %1346, %1340 ], [ %1436, %1448 ]
  %1372 = phi ptr [ %467, %1340 ], [ %1450, %1448 ]
  %1373 = phi ptr [ %1282, %1340 ], [ %1449, %1448 ]
  %1374 = phi i32 [ %1240, %1340 ], [ %1453, %1448 ]
  %1375 = phi i16 [ %1343, %1340 ], [ %1400, %1448 ]
  %1376 = phi i16 [ %1350, %1340 ], [ %1404, %1448 ]
  %1377 = phi double [ %1363, %1340 ], [ %1407, %1448 ]
  %1378 = phi double [ %1362, %1340 ], [ %1410, %1448 ]
  %1379 = phi double [ %1361, %1340 ], [ %1412, %1448 ]
  %1380 = phi double [ %1359, %1340 ], [ %1414, %1448 ]
  %1381 = phi double [ %1357, %1340 ], [ %1416, %1448 ]
  %1382 = phi double [ %1354, %1340 ], [ %1418, %1448 ]
  %1383 = getelementptr inbounds %struct.CompAtomExt, ptr %45, i64 %1370
  %1384 = load i32, ptr %1383, align 4
  %1385 = shl i32 %1384, 2
  %1386 = ashr exact i32 %1385, 2
  %1387 = fsub double %1366, %1377
  %1388 = fsub double %1366, %1378
  %1389 = fmul double %1387, %1387
  %1390 = fmul double %1388, %1388
  %1391 = fsub double %1367, %1379
  %1392 = fsub double %1367, %1380
  %1393 = tail call double @llvm.fmuladd.f64(double %1391, double %1391, double %1389)
  %1394 = tail call double @llvm.fmuladd.f64(double %1392, double %1392, double %1390)
  %1395 = fsub double %688, %1381
  %1396 = fsub double %688, %1382
  %1397 = tail call double @llvm.fmuladd.f64(double %1395, double %1395, double %1393)
  %1398 = tail call double @llvm.fmuladd.f64(double %1396, double %1396, double %1394)
  %1399 = getelementptr inbounds i16, ptr %421, i64 %1369
  %1400 = load i16, ptr %1399, align 2, !tbaa !44
  %1401 = add nsw i32 %1374, 3
  %1402 = sext i32 %1401 to i64
  %1403 = getelementptr inbounds i16, ptr %421, i64 %1402
  %1404 = load i16, ptr %1403, align 2, !tbaa !44
  %1405 = zext i16 %1400 to i64
  %1406 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %1405
  %1407 = load double, ptr %1406, align 8, !tbaa !67
  %1408 = zext i16 %1404 to i64
  %1409 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %1408
  %1410 = load double, ptr %1409, align 8, !tbaa !67
  %1411 = getelementptr inbounds %class.Vector, ptr %1406, i64 0, i32 1
  %1412 = load double, ptr %1411, align 8, !tbaa !66
  %1413 = getelementptr inbounds %class.Vector, ptr %1409, i64 0, i32 1
  %1414 = load double, ptr %1413, align 8, !tbaa !66
  %1415 = getelementptr inbounds %class.Vector, ptr %1406, i64 0, i32 2
  %1416 = load double, ptr %1415, align 8, !tbaa !49
  %1417 = getelementptr inbounds %class.Vector, ptr %1409, i64 0, i32 2
  %1418 = load double, ptr %1417, align 8, !tbaa !49
  %1419 = fcmp ugt double %1397, %20
  br i1 %1419, label %1432, label %1420

1420:                                             ; preds = %1368
  %1421 = shl i32 %1371, 2
  %1422 = ashr exact i32 %1421, 2
  %1423 = icmp slt i32 %1422, %698
  %1424 = icmp sgt i32 %1422, %700
  %1425 = select i1 %1423, i1 true, i1 %1424
  %1426 = select i1 %1425, ptr %1373, ptr %1372
  %1427 = zext i1 %1425 to i64
  %1428 = getelementptr inbounds i16, ptr %1373, i64 %1427
  %1429 = xor i1 %1425, true
  %1430 = zext i1 %1429 to i64
  %1431 = getelementptr inbounds i16, ptr %1372, i64 %1430
  store i16 %1375, ptr %1426, align 2, !tbaa !44
  br label %1432

1432:                                             ; preds = %1420, %1368
  %1433 = phi ptr [ %1373, %1368 ], [ %1428, %1420 ]
  %1434 = phi ptr [ %1372, %1368 ], [ %1431, %1420 ]
  %1435 = getelementptr inbounds %struct.CompAtomExt, ptr %45, i64 %1405
  %1436 = load i32, ptr %1435, align 4
  %1437 = fcmp ugt double %1398, %20
  br i1 %1437, label %1448, label %1438

1438:                                             ; preds = %1432
  %1439 = icmp slt i32 %1386, %698
  %1440 = icmp sgt i32 %1386, %700
  %1441 = select i1 %1439, i1 true, i1 %1440
  %1442 = select i1 %1441, ptr %1433, ptr %1434
  %1443 = zext i1 %1441 to i64
  %1444 = getelementptr inbounds i16, ptr %1433, i64 %1443
  %1445 = xor i1 %1441, true
  %1446 = zext i1 %1445 to i64
  %1447 = getelementptr inbounds i16, ptr %1434, i64 %1446
  store i16 %1376, ptr %1442, align 2, !tbaa !44
  br label %1448

1448:                                             ; preds = %1438, %1432
  %1449 = phi ptr [ %1433, %1432 ], [ %1444, %1438 ]
  %1450 = phi ptr [ %1434, %1432 ], [ %1447, %1438 ]
  %1451 = add nsw i64 %1369, 2
  %1452 = icmp slt i64 %1451, %1365
  %1453 = trunc i64 %1369 to i32
  br i1 %1452, label %1368, label %1454

1454:                                             ; preds = %1448, %1336, %1333
  %1455 = phi i32 [ %1240, %1333 ], [ %1240, %1336 ], [ %1453, %1448 ]
  %1456 = phi ptr [ %1282, %1333 ], [ %1282, %1336 ], [ %1449, %1448 ]
  %1457 = phi ptr [ %467, %1333 ], [ %467, %1336 ], [ %1450, %1448 ]
  %1458 = icmp slt i32 %1455, %1241
  br i1 %1458, label %1459, label %1503

1459:                                             ; preds = %1454
  %1460 = sext i32 %1455 to i64
  %1461 = sext i32 %1241 to i64
  %1462 = extractelement <2 x double> %685, i64 0
  %1463 = extractelement <2 x double> %685, i64 1
  br label %1464

1464:                                             ; preds = %1459, %1498
  %1465 = phi i64 [ %1460, %1459 ], [ %1501, %1498 ]
  %1466 = phi ptr [ %1457, %1459 ], [ %1500, %1498 ]
  %1467 = phi ptr [ %1456, %1459 ], [ %1499, %1498 ]
  %1468 = getelementptr inbounds i16, ptr %421, i64 %1465
  %1469 = load i16, ptr %1468, align 2, !tbaa !44
  %1470 = zext i16 %1469 to i64
  %1471 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %1470
  %1472 = load double, ptr %1471, align 8, !tbaa !67
  %1473 = getelementptr inbounds %class.Vector, ptr %1471, i64 0, i32 1
  %1474 = load double, ptr %1473, align 8, !tbaa !66
  %1475 = getelementptr inbounds %class.Vector, ptr %1471, i64 0, i32 2
  %1476 = load double, ptr %1475, align 8, !tbaa !49
  %1477 = fsub double %1462, %1472
  %1478 = fmul double %1477, %1477
  %1479 = fsub double %1463, %1474
  %1480 = tail call double @llvm.fmuladd.f64(double %1479, double %1479, double %1478)
  %1481 = fsub double %688, %1476
  %1482 = tail call double @llvm.fmuladd.f64(double %1481, double %1481, double %1480)
  %1483 = fcmp ugt double %1482, %20
  br i1 %1483, label %1498, label %1484

1484:                                             ; preds = %1464
  %1485 = getelementptr inbounds %struct.CompAtomExt, ptr %45, i64 %1470
  %1486 = load i32, ptr %1485, align 4
  %1487 = shl i32 %1486, 2
  %1488 = ashr exact i32 %1487, 2
  %1489 = icmp slt i32 %1488, %698
  %1490 = icmp sgt i32 %1488, %700
  %1491 = select i1 %1489, i1 true, i1 %1490
  %1492 = select i1 %1491, ptr %1467, ptr %1466
  %1493 = zext i1 %1491 to i64
  %1494 = getelementptr inbounds i16, ptr %1467, i64 %1493
  %1495 = xor i1 %1491, true
  %1496 = zext i1 %1495 to i64
  %1497 = getelementptr inbounds i16, ptr %1466, i64 %1496
  store i16 %1469, ptr %1492, align 2, !tbaa !44
  br label %1498

1498:                                             ; preds = %1484, %1464
  %1499 = phi ptr [ %1467, %1464 ], [ %1494, %1484 ]
  %1500 = phi ptr [ %1466, %1464 ], [ %1497, %1484 ]
  %1501 = add nsw i64 %1465, 1
  %1502 = icmp eq i64 %1501, %1461
  br i1 %1502, label %1503, label %1464

1503:                                             ; preds = %1498, %1327, %1454, %1284, %1332
  %1504 = phi ptr [ %1282, %1332 ], [ %1282, %1284 ], [ %1456, %1454 ], [ %1328, %1327 ], [ %1499, %1498 ]
  %1505 = phi ptr [ %467, %1332 ], [ %467, %1284 ], [ %1457, %1454 ], [ %1329, %1327 ], [ %1500, %1498 ]
  %1506 = ptrtoint ptr %1505 to i64
  %1507 = sub i64 %1506, %643
  %1508 = lshr exact i64 %1507, 1
  %1509 = trunc i64 %1508 to i32
  %1510 = icmp sgt i32 %1509, 0
  br i1 %1510, label %1511, label %1611

1511:                                             ; preds = %1503
  %1512 = and i64 %1508, 4294967295
  %1513 = and i64 %1508, 1
  %1514 = icmp eq i64 %1512, 1
  br i1 %1514, label %1579, label %1515

1515:                                             ; preds = %1511
  %1516 = sub nsw i64 %1512, %1513
  br label %1517

1517:                                             ; preds = %1572, %1515
  %1518 = phi i64 [ 0, %1515 ], [ %1576, %1572 ]
  %1519 = phi ptr [ %1504, %1515 ], [ %1575, %1572 ]
  %1520 = phi ptr [ %329, %1515 ], [ %1574, %1572 ]
  %1521 = phi ptr [ %375, %1515 ], [ %1573, %1572 ]
  %1522 = phi i64 [ 0, %1515 ], [ %1577, %1572 ]
  %1523 = getelementptr inbounds i16, ptr %467, i64 %1518
  %1524 = load i16, ptr %1523, align 2, !tbaa !44
  %1525 = zext i16 %1524 to i64
  %1526 = getelementptr inbounds %struct.CompAtomExt, ptr %45, i64 %1525
  %1527 = load i32, ptr %1526, align 4
  %1528 = shl i32 %1527, 2
  %1529 = ashr exact i32 %1528, 2
  %1530 = sext i32 %1529 to i64
  %1531 = getelementptr inbounds i8, ptr %935, i64 %1530
  %1532 = load i8, ptr %1531, align 1, !tbaa !57
  %1533 = sext i8 %1532 to i32
  switch i32 %1533, label %1545 [
    i32 0, label %1534
    i32 1, label %1536
    i32 2, label %1538
  ]

1534:                                             ; preds = %1517
  %1535 = getelementptr inbounds i16, ptr %1519, i64 1
  br label %1540

1536:                                             ; preds = %1517
  %1537 = getelementptr inbounds i16, ptr %1520, i64 1
  br label %1540

1538:                                             ; preds = %1517
  %1539 = getelementptr inbounds i16, ptr %1521, i64 1
  br label %1540

1540:                                             ; preds = %1534, %1536, %1538
  %1541 = phi ptr [ %1521, %1538 ], [ %1520, %1536 ], [ %1519, %1534 ]
  %1542 = phi ptr [ %1539, %1538 ], [ %1521, %1536 ], [ %1521, %1534 ]
  %1543 = phi ptr [ %1520, %1538 ], [ %1537, %1536 ], [ %1520, %1534 ]
  %1544 = phi ptr [ %1519, %1538 ], [ %1519, %1536 ], [ %1535, %1534 ]
  store i16 %1524, ptr %1541, align 2, !tbaa !44
  br label %1545

1545:                                             ; preds = %1540, %1517
  %1546 = phi ptr [ %1521, %1517 ], [ %1542, %1540 ]
  %1547 = phi ptr [ %1520, %1517 ], [ %1543, %1540 ]
  %1548 = phi ptr [ %1519, %1517 ], [ %1544, %1540 ]
  %1549 = or i64 %1518, 1
  %1550 = getelementptr inbounds i16, ptr %467, i64 %1549
  %1551 = load i16, ptr %1550, align 2, !tbaa !44
  %1552 = zext i16 %1551 to i64
  %1553 = getelementptr inbounds %struct.CompAtomExt, ptr %45, i64 %1552
  %1554 = load i32, ptr %1553, align 4
  %1555 = shl i32 %1554, 2
  %1556 = ashr exact i32 %1555, 2
  %1557 = sext i32 %1556 to i64
  %1558 = getelementptr inbounds i8, ptr %935, i64 %1557
  %1559 = load i8, ptr %1558, align 1, !tbaa !57
  %1560 = sext i8 %1559 to i32
  switch i32 %1560, label %1572 [
    i32 0, label %1565
    i32 1, label %1563
    i32 2, label %1561
  ]

1561:                                             ; preds = %1545
  %1562 = getelementptr inbounds i16, ptr %1546, i64 1
  br label %1567

1563:                                             ; preds = %1545
  %1564 = getelementptr inbounds i16, ptr %1547, i64 1
  br label %1567

1565:                                             ; preds = %1545
  %1566 = getelementptr inbounds i16, ptr %1548, i64 1
  br label %1567

1567:                                             ; preds = %1565, %1563, %1561
  %1568 = phi ptr [ %1546, %1561 ], [ %1547, %1563 ], [ %1548, %1565 ]
  %1569 = phi ptr [ %1562, %1561 ], [ %1546, %1563 ], [ %1546, %1565 ]
  %1570 = phi ptr [ %1547, %1561 ], [ %1564, %1563 ], [ %1547, %1565 ]
  %1571 = phi ptr [ %1548, %1561 ], [ %1548, %1563 ], [ %1566, %1565 ]
  store i16 %1551, ptr %1568, align 2, !tbaa !44
  br label %1572

1572:                                             ; preds = %1567, %1545
  %1573 = phi ptr [ %1546, %1545 ], [ %1569, %1567 ]
  %1574 = phi ptr [ %1547, %1545 ], [ %1570, %1567 ]
  %1575 = phi ptr [ %1548, %1545 ], [ %1571, %1567 ]
  %1576 = add nuw nsw i64 %1518, 2
  %1577 = add i64 %1522, 2
  %1578 = icmp eq i64 %1577, %1516
  br i1 %1578, label %1579, label %1517

1579:                                             ; preds = %1572, %1511
  %1580 = phi ptr [ undef, %1511 ], [ %1573, %1572 ]
  %1581 = phi ptr [ undef, %1511 ], [ %1574, %1572 ]
  %1582 = phi ptr [ undef, %1511 ], [ %1575, %1572 ]
  %1583 = phi i64 [ 0, %1511 ], [ %1576, %1572 ]
  %1584 = phi ptr [ %1504, %1511 ], [ %1575, %1572 ]
  %1585 = phi ptr [ %329, %1511 ], [ %1574, %1572 ]
  %1586 = phi ptr [ %375, %1511 ], [ %1573, %1572 ]
  %1587 = icmp eq i64 %1513, 0
  br i1 %1587, label %1611, label %1588

1588:                                             ; preds = %1579
  %1589 = getelementptr inbounds i16, ptr %467, i64 %1583
  %1590 = load i16, ptr %1589, align 2, !tbaa !44
  %1591 = zext i16 %1590 to i64
  %1592 = getelementptr inbounds %struct.CompAtomExt, ptr %45, i64 %1591
  %1593 = load i32, ptr %1592, align 4
  %1594 = shl i32 %1593, 2
  %1595 = ashr exact i32 %1594, 2
  %1596 = sext i32 %1595 to i64
  %1597 = getelementptr inbounds i8, ptr %935, i64 %1596
  %1598 = load i8, ptr %1597, align 1, !tbaa !57
  %1599 = sext i8 %1598 to i32
  switch i32 %1599, label %1611 [
    i32 0, label %1604
    i32 1, label %1602
    i32 2, label %1600
  ]

1600:                                             ; preds = %1588
  %1601 = getelementptr inbounds i16, ptr %1586, i64 1
  br label %1606

1602:                                             ; preds = %1588
  %1603 = getelementptr inbounds i16, ptr %1585, i64 1
  br label %1606

1604:                                             ; preds = %1588
  %1605 = getelementptr inbounds i16, ptr %1584, i64 1
  br label %1606

1606:                                             ; preds = %1604, %1602, %1600
  %1607 = phi ptr [ %1586, %1600 ], [ %1585, %1602 ], [ %1584, %1604 ]
  %1608 = phi ptr [ %1601, %1600 ], [ %1586, %1602 ], [ %1586, %1604 ]
  %1609 = phi ptr [ %1585, %1600 ], [ %1603, %1602 ], [ %1585, %1604 ]
  %1610 = phi ptr [ %1584, %1600 ], [ %1584, %1602 ], [ %1605, %1604 ]
  store i16 %1590, ptr %1607, align 2, !tbaa !44
  br label %1611

1611:                                             ; preds = %1579, %1606, %1588, %1503
  %1612 = phi ptr [ %375, %1503 ], [ %1580, %1579 ], [ %1586, %1588 ], [ %1608, %1606 ]
  %1613 = phi ptr [ %329, %1503 ], [ %1581, %1579 ], [ %1585, %1588 ], [ %1609, %1606 ]
  %1614 = phi ptr [ %1504, %1503 ], [ %1582, %1579 ], [ %1584, %1588 ], [ %1610, %1606 ]
  %1615 = ptrtoint ptr %1614 to i64
  %1616 = ptrtoint ptr %1282 to i64
  %1617 = sub i64 %1615, %1616
  %1618 = lshr exact i64 %1617, 1
  %1619 = trunc i64 %1618 to i32
  %1620 = icmp eq i32 %1619, 0
  %1621 = shl i64 %1617, 31
  br i1 %1620, label %1627, label %1622

1622:                                             ; preds = %1611
  %1623 = add i64 %1621, -4294967296
  %1624 = ashr i64 %1623, 32
  %1625 = getelementptr inbounds i16, ptr %1282, i64 %1624
  %1626 = load i16, ptr %1625, align 2, !tbaa !44
  br label %1627

1627:                                             ; preds = %1611, %1622
  %1628 = phi i16 [ %1626, %1622 ], [ -1, %1611 ]
  %1629 = ashr i64 %1621, 32
  %1630 = getelementptr inbounds i16, ptr %1282, i64 %1629
  store i16 %1628, ptr %1630, align 2, !tbaa !44
  %1631 = trunc i64 %1618 to i16
  %1632 = add i16 %1631, 1
  %1633 = load i32, ptr %13, align 8, !tbaa !17
  %1634 = sext i32 %1633 to i64
  %1635 = getelementptr inbounds i16, ptr %1278, i64 %1634
  store i16 %1632, ptr %1635, align 2, !tbaa !44
  %1636 = add nsw i32 %1619, 2
  %1637 = add nsw i32 %1636, %1633
  %1638 = ptrtoint ptr %1613 to i64
  %1639 = sub i64 %1638, %644
  %1640 = lshr exact i64 %1639, 1
  %1641 = trunc i64 %1640 to i32
  %1642 = add nsw i32 %1637, 1
  %1643 = sext i32 %1642 to i64
  %1644 = getelementptr i16, ptr %1278, i64 %1643
  %1645 = icmp sgt i32 %1641, 0
  br i1 %1645, label %1646, label %1736

1646:                                             ; preds = %1627
  %1647 = and i64 %1640, 4294967295
  %1648 = icmp ult i64 %1647, 8
  br i1 %1648, label %1692, label %1649

1649:                                             ; preds = %1646
  %1650 = shl nsw i64 %1643, 1
  %1651 = add i64 %1650, %1279
  %1652 = sub i64 %1651, %644
  %1653 = icmp ult i64 %1652, 128
  br i1 %1653, label %1692, label %1654

1654:                                             ; preds = %1649
  %1655 = icmp ult i64 %1647, 64
  br i1 %1655, label %1679, label %1656

1656:                                             ; preds = %1654
  %1657 = and i64 %1640, 63
  %1658 = sub nsw i64 %1647, %1657
  br label %1659

1659:                                             ; preds = %1659, %1656
  %1660 = phi i64 [ 0, %1656 ], [ %1673, %1659 ]
  %1661 = getelementptr inbounds i16, ptr %329, i64 %1660
  %1662 = load <16 x i16>, ptr %1661, align 2, !tbaa !44
  %1663 = getelementptr inbounds i16, ptr %1661, i64 16
  %1664 = load <16 x i16>, ptr %1663, align 2, !tbaa !44
  %1665 = getelementptr inbounds i16, ptr %1661, i64 32
  %1666 = load <16 x i16>, ptr %1665, align 2, !tbaa !44
  %1667 = getelementptr inbounds i16, ptr %1661, i64 48
  %1668 = load <16 x i16>, ptr %1667, align 2, !tbaa !44
  %1669 = getelementptr inbounds i16, ptr %1644, i64 %1660
  store <16 x i16> %1662, ptr %1669, align 2, !tbaa !44
  %1670 = getelementptr inbounds i16, ptr %1669, i64 16
  store <16 x i16> %1664, ptr %1670, align 2, !tbaa !44
  %1671 = getelementptr inbounds i16, ptr %1669, i64 32
  store <16 x i16> %1666, ptr %1671, align 2, !tbaa !44
  %1672 = getelementptr inbounds i16, ptr %1669, i64 48
  store <16 x i16> %1668, ptr %1672, align 2, !tbaa !44
  %1673 = add nuw i64 %1660, 64
  %1674 = icmp eq i64 %1673, %1658
  br i1 %1674, label %1675, label %1659, !llvm.loop !259

1675:                                             ; preds = %1659
  %1676 = icmp eq i64 %1657, 0
  br i1 %1676, label %1730, label %1677

1677:                                             ; preds = %1675
  %1678 = icmp ult i64 %1657, 8
  br i1 %1678, label %1692, label %1679

1679:                                             ; preds = %1654, %1677
  %1680 = phi i64 [ %1658, %1677 ], [ 0, %1654 ]
  %1681 = and i64 %1640, 7
  %1682 = sub nsw i64 %1647, %1681
  br label %1683

1683:                                             ; preds = %1683, %1679
  %1684 = phi i64 [ %1680, %1679 ], [ %1688, %1683 ]
  %1685 = getelementptr inbounds i16, ptr %329, i64 %1684
  %1686 = load <8 x i16>, ptr %1685, align 2, !tbaa !44
  %1687 = getelementptr inbounds i16, ptr %1644, i64 %1684
  store <8 x i16> %1686, ptr %1687, align 2, !tbaa !44
  %1688 = add nuw i64 %1684, 8
  %1689 = icmp eq i64 %1688, %1682
  br i1 %1689, label %1690, label %1683, !llvm.loop !260

1690:                                             ; preds = %1683
  %1691 = icmp eq i64 %1681, 0
  br i1 %1691, label %1730, label %1692

1692:                                             ; preds = %1649, %1646, %1677, %1690
  %1693 = phi i64 [ 0, %1646 ], [ 0, %1649 ], [ %1658, %1677 ], [ %1682, %1690 ]
  %1694 = sub i64 %1640, %1693
  %1695 = xor i64 %1693, -1
  %1696 = add nsw i64 %1647, %1695
  %1697 = and i64 %1694, 3
  %1698 = icmp eq i64 %1697, 0
  br i1 %1698, label %1708, label %1699

1699:                                             ; preds = %1692, %1699
  %1700 = phi i64 [ %1705, %1699 ], [ %1693, %1692 ]
  %1701 = phi i64 [ %1706, %1699 ], [ 0, %1692 ]
  %1702 = getelementptr inbounds i16, ptr %329, i64 %1700
  %1703 = load i16, ptr %1702, align 2, !tbaa !44
  %1704 = getelementptr inbounds i16, ptr %1644, i64 %1700
  store i16 %1703, ptr %1704, align 2, !tbaa !44
  %1705 = add nuw nsw i64 %1700, 1
  %1706 = add i64 %1701, 1
  %1707 = icmp eq i64 %1706, %1697
  br i1 %1707, label %1708, label %1699, !llvm.loop !261

1708:                                             ; preds = %1699, %1692
  %1709 = phi i64 [ %1693, %1692 ], [ %1705, %1699 ]
  %1710 = icmp ult i64 %1696, 3
  br i1 %1710, label %1730, label %1711

1711:                                             ; preds = %1708, %1711
  %1712 = phi i64 [ %1728, %1711 ], [ %1709, %1708 ]
  %1713 = getelementptr inbounds i16, ptr %329, i64 %1712
  %1714 = load i16, ptr %1713, align 2, !tbaa !44
  %1715 = getelementptr inbounds i16, ptr %1644, i64 %1712
  store i16 %1714, ptr %1715, align 2, !tbaa !44
  %1716 = add nuw nsw i64 %1712, 1
  %1717 = getelementptr inbounds i16, ptr %329, i64 %1716
  %1718 = load i16, ptr %1717, align 2, !tbaa !44
  %1719 = getelementptr inbounds i16, ptr %1644, i64 %1716
  store i16 %1718, ptr %1719, align 2, !tbaa !44
  %1720 = add nuw nsw i64 %1712, 2
  %1721 = getelementptr inbounds i16, ptr %329, i64 %1720
  %1722 = load i16, ptr %1721, align 2, !tbaa !44
  %1723 = getelementptr inbounds i16, ptr %1644, i64 %1720
  store i16 %1722, ptr %1723, align 2, !tbaa !44
  %1724 = add nuw nsw i64 %1712, 3
  %1725 = getelementptr inbounds i16, ptr %329, i64 %1724
  %1726 = load i16, ptr %1725, align 2, !tbaa !44
  %1727 = getelementptr inbounds i16, ptr %1644, i64 %1724
  store i16 %1726, ptr %1727, align 2, !tbaa !44
  %1728 = add nuw nsw i64 %1712, 4
  %1729 = icmp eq i64 %1728, %1647
  br i1 %1729, label %1730, label %1711, !llvm.loop !262

1730:                                             ; preds = %1708, %1711, %1675, %1690
  %1731 = shl i64 %1639, 31
  %1732 = add i64 %1731, -4294967296
  %1733 = ashr i64 %1732, 32
  %1734 = getelementptr inbounds i16, ptr %1644, i64 %1733
  %1735 = load i16, ptr %1734, align 2, !tbaa !44
  br label %1736

1736:                                             ; preds = %1627, %1730
  %1737 = phi i64 [ %1640, %1730 ], [ 0, %1627 ]
  %1738 = phi i16 [ %1735, %1730 ], [ -1, %1627 ]
  %1739 = and i64 %1737, 4294967295
  %1740 = getelementptr inbounds i16, ptr %1644, i64 %1739
  store i16 %1738, ptr %1740, align 2, !tbaa !44
  %1741 = trunc i64 %1640 to i16
  %1742 = add i16 %1741, 1
  %1743 = sext i32 %1637 to i64
  %1744 = getelementptr inbounds i16, ptr %1278, i64 %1743
  store i16 %1742, ptr %1744, align 2, !tbaa !44
  %1745 = add nsw i32 %1641, 2
  %1746 = add nsw i32 %1745, %1637
  %1747 = ptrtoint ptr %1612 to i64
  %1748 = sub i64 %1747, %645
  %1749 = lshr exact i64 %1748, 1
  %1750 = trunc i64 %1749 to i32
  %1751 = add nsw i32 %1746, 1
  %1752 = sext i32 %1751 to i64
  %1753 = getelementptr i16, ptr %1278, i64 %1752
  %1754 = icmp sgt i32 %1750, 0
  br i1 %1754, label %1755, label %1845

1755:                                             ; preds = %1736
  %1756 = and i64 %1749, 4294967295
  %1757 = icmp ult i64 %1756, 8
  br i1 %1757, label %1801, label %1758

1758:                                             ; preds = %1755
  %1759 = shl nsw i64 %1752, 1
  %1760 = add i64 %1759, %1279
  %1761 = sub i64 %1760, %645
  %1762 = icmp ult i64 %1761, 128
  br i1 %1762, label %1801, label %1763

1763:                                             ; preds = %1758
  %1764 = icmp ult i64 %1756, 64
  br i1 %1764, label %1788, label %1765

1765:                                             ; preds = %1763
  %1766 = and i64 %1749, 63
  %1767 = sub nsw i64 %1756, %1766
  br label %1768

1768:                                             ; preds = %1768, %1765
  %1769 = phi i64 [ 0, %1765 ], [ %1782, %1768 ]
  %1770 = getelementptr inbounds i16, ptr %375, i64 %1769
  %1771 = load <16 x i16>, ptr %1770, align 2, !tbaa !44
  %1772 = getelementptr inbounds i16, ptr %1770, i64 16
  %1773 = load <16 x i16>, ptr %1772, align 2, !tbaa !44
  %1774 = getelementptr inbounds i16, ptr %1770, i64 32
  %1775 = load <16 x i16>, ptr %1774, align 2, !tbaa !44
  %1776 = getelementptr inbounds i16, ptr %1770, i64 48
  %1777 = load <16 x i16>, ptr %1776, align 2, !tbaa !44
  %1778 = getelementptr inbounds i16, ptr %1753, i64 %1769
  store <16 x i16> %1771, ptr %1778, align 2, !tbaa !44
  %1779 = getelementptr inbounds i16, ptr %1778, i64 16
  store <16 x i16> %1773, ptr %1779, align 2, !tbaa !44
  %1780 = getelementptr inbounds i16, ptr %1778, i64 32
  store <16 x i16> %1775, ptr %1780, align 2, !tbaa !44
  %1781 = getelementptr inbounds i16, ptr %1778, i64 48
  store <16 x i16> %1777, ptr %1781, align 2, !tbaa !44
  %1782 = add nuw i64 %1769, 64
  %1783 = icmp eq i64 %1782, %1767
  br i1 %1783, label %1784, label %1768, !llvm.loop !263

1784:                                             ; preds = %1768
  %1785 = icmp eq i64 %1766, 0
  br i1 %1785, label %1839, label %1786

1786:                                             ; preds = %1784
  %1787 = icmp ult i64 %1766, 8
  br i1 %1787, label %1801, label %1788

1788:                                             ; preds = %1763, %1786
  %1789 = phi i64 [ %1767, %1786 ], [ 0, %1763 ]
  %1790 = and i64 %1749, 7
  %1791 = sub nsw i64 %1756, %1790
  br label %1792

1792:                                             ; preds = %1792, %1788
  %1793 = phi i64 [ %1789, %1788 ], [ %1797, %1792 ]
  %1794 = getelementptr inbounds i16, ptr %375, i64 %1793
  %1795 = load <8 x i16>, ptr %1794, align 2, !tbaa !44
  %1796 = getelementptr inbounds i16, ptr %1753, i64 %1793
  store <8 x i16> %1795, ptr %1796, align 2, !tbaa !44
  %1797 = add nuw i64 %1793, 8
  %1798 = icmp eq i64 %1797, %1791
  br i1 %1798, label %1799, label %1792, !llvm.loop !264

1799:                                             ; preds = %1792
  %1800 = icmp eq i64 %1790, 0
  br i1 %1800, label %1839, label %1801

1801:                                             ; preds = %1758, %1755, %1786, %1799
  %1802 = phi i64 [ 0, %1755 ], [ 0, %1758 ], [ %1767, %1786 ], [ %1791, %1799 ]
  %1803 = sub i64 %1749, %1802
  %1804 = xor i64 %1802, -1
  %1805 = add nsw i64 %1756, %1804
  %1806 = and i64 %1803, 3
  %1807 = icmp eq i64 %1806, 0
  br i1 %1807, label %1817, label %1808

1808:                                             ; preds = %1801, %1808
  %1809 = phi i64 [ %1814, %1808 ], [ %1802, %1801 ]
  %1810 = phi i64 [ %1815, %1808 ], [ 0, %1801 ]
  %1811 = getelementptr inbounds i16, ptr %375, i64 %1809
  %1812 = load i16, ptr %1811, align 2, !tbaa !44
  %1813 = getelementptr inbounds i16, ptr %1753, i64 %1809
  store i16 %1812, ptr %1813, align 2, !tbaa !44
  %1814 = add nuw nsw i64 %1809, 1
  %1815 = add i64 %1810, 1
  %1816 = icmp eq i64 %1815, %1806
  br i1 %1816, label %1817, label %1808, !llvm.loop !265

1817:                                             ; preds = %1808, %1801
  %1818 = phi i64 [ %1802, %1801 ], [ %1814, %1808 ]
  %1819 = icmp ult i64 %1805, 3
  br i1 %1819, label %1839, label %1820

1820:                                             ; preds = %1817, %1820
  %1821 = phi i64 [ %1837, %1820 ], [ %1818, %1817 ]
  %1822 = getelementptr inbounds i16, ptr %375, i64 %1821
  %1823 = load i16, ptr %1822, align 2, !tbaa !44
  %1824 = getelementptr inbounds i16, ptr %1753, i64 %1821
  store i16 %1823, ptr %1824, align 2, !tbaa !44
  %1825 = add nuw nsw i64 %1821, 1
  %1826 = getelementptr inbounds i16, ptr %375, i64 %1825
  %1827 = load i16, ptr %1826, align 2, !tbaa !44
  %1828 = getelementptr inbounds i16, ptr %1753, i64 %1825
  store i16 %1827, ptr %1828, align 2, !tbaa !44
  %1829 = add nuw nsw i64 %1821, 2
  %1830 = getelementptr inbounds i16, ptr %375, i64 %1829
  %1831 = load i16, ptr %1830, align 2, !tbaa !44
  %1832 = getelementptr inbounds i16, ptr %1753, i64 %1829
  store i16 %1831, ptr %1832, align 2, !tbaa !44
  %1833 = add nuw nsw i64 %1821, 3
  %1834 = getelementptr inbounds i16, ptr %375, i64 %1833
  %1835 = load i16, ptr %1834, align 2, !tbaa !44
  %1836 = getelementptr inbounds i16, ptr %1753, i64 %1833
  store i16 %1835, ptr %1836, align 2, !tbaa !44
  %1837 = add nuw nsw i64 %1821, 4
  %1838 = icmp eq i64 %1837, %1756
  br i1 %1838, label %1839, label %1820, !llvm.loop !266

1839:                                             ; preds = %1817, %1820, %1784, %1799
  %1840 = shl i64 %1748, 31
  %1841 = add i64 %1840, -4294967296
  %1842 = ashr i64 %1841, 32
  %1843 = getelementptr inbounds i16, ptr %1753, i64 %1842
  %1844 = load i16, ptr %1843, align 2, !tbaa !44
  br label %1845

1845:                                             ; preds = %1736, %1839
  %1846 = phi i64 [ %1749, %1839 ], [ 0, %1736 ]
  %1847 = phi i16 [ %1844, %1839 ], [ -1, %1736 ]
  %1848 = and i64 %1846, 4294967295
  %1849 = getelementptr inbounds i16, ptr %1753, i64 %1848
  store i16 %1847, ptr %1849, align 2, !tbaa !44
  %1850 = trunc i64 %1749 to i16
  %1851 = add i16 %1850, 1
  %1852 = sext i32 %1746 to i64
  %1853 = getelementptr inbounds i16, ptr %1278, i64 %1852
  store i16 %1851, ptr %1853, align 2, !tbaa !44
  %1854 = add nsw i32 %1750, 2
  %1855 = add nsw i32 %1854, %1746
  %1856 = select i1 %142, i32 0, i32 %1855
  store i32 %1856, ptr %13, align 8
  br label %1887

1857:                                             ; preds = %682
  %1858 = load ptr, ptr %8, align 8, !tbaa !46
  %1859 = load i32, ptr %13, align 8, !tbaa !17
  %1860 = add i32 %1859, 1
  %1861 = sext i32 %1860 to i64
  %1862 = getelementptr inbounds i16, ptr %1858, i64 %1861
  %1863 = sext i32 %1859 to i64
  %1864 = getelementptr inbounds i16, ptr %1858, i64 %1863
  %1865 = load i16, ptr %1864, align 2, !tbaa !44
  %1866 = zext i16 %1865 to i32
  %1867 = add i32 %1860, %1866
  %1868 = add nsw i32 %1866, -1
  %1869 = add i32 %1867, 1
  %1870 = sext i32 %1869 to i64
  %1871 = getelementptr inbounds i16, ptr %1858, i64 %1870
  %1872 = sext i32 %1867 to i64
  %1873 = getelementptr inbounds i16, ptr %1858, i64 %1872
  %1874 = load i16, ptr %1873, align 2, !tbaa !44
  %1875 = zext i16 %1874 to i32
  %1876 = add i32 %1869, %1875
  %1877 = add nsw i32 %1875, -1
  %1878 = add i32 %1876, 1
  %1879 = sext i32 %1878 to i64
  %1880 = getelementptr inbounds i16, ptr %1858, i64 %1879
  %1881 = sext i32 %1876 to i64
  %1882 = getelementptr inbounds i16, ptr %1858, i64 %1881
  %1883 = load i16, ptr %1882, align 2, !tbaa !44
  %1884 = zext i16 %1883 to i32
  %1885 = add i32 %1878, %1884
  store i32 %1885, ptr %13, align 8, !tbaa !17
  %1886 = add nsw i32 %1884, -1
  br label %1887

1887:                                             ; preds = %1845, %1857
  %1888 = phi ptr [ %1862, %1857 ], [ %1282, %1845 ]
  %1889 = phi i32 [ %1868, %1857 ], [ %1619, %1845 ]
  %1890 = phi ptr [ %1871, %1857 ], [ %1644, %1845 ]
  %1891 = phi i32 [ %1877, %1857 ], [ %1641, %1845 ]
  %1892 = phi ptr [ %1880, %1857 ], [ %1753, %1845 ]
  %1893 = phi i32 [ %1886, %1857 ], [ %1750, %1845 ]
  %1894 = phi i32 [ %664, %1857 ], [ %1240, %1845 ]
  %1895 = phi i32 [ %663, %1857 ], [ %1241, %1845 ]
  %1896 = phi i32 [ %662, %1857 ], [ %1242, %1845 ]
  %1897 = phi i32 [ %661, %1857 ], [ %1243, %1845 ]
  %1898 = phi ptr [ %659, %1857 ], [ %936, %1845 ]
  %1899 = phi ptr [ %658, %1857 ], [ %937, %1845 ]
  %1900 = phi ptr [ %657, %1857 ], [ %938, %1845 ]
  %1901 = getelementptr inbounds %struct.CompAtom, ptr %39, i64 %667, i32 1
  %1902 = load float, ptr %1901, align 8, !tbaa !79
  %1903 = fpext float %1902 to double
  %1904 = fmul double %1903, 0x4074C104816F0069
  %1905 = fmul double %28, %1904
  %1906 = fmul double %24, %1905
  %1907 = getelementptr inbounds %struct.CompAtom, ptr %39, i64 %667, i32 2
  %1908 = load i16, ptr %1907, align 4, !tbaa !80
  %1909 = sext i16 %1908 to i32
  %1910 = load ptr, ptr %646, align 8, !tbaa !81
  %1911 = load i32, ptr %647, align 8, !tbaa !83
  %1912 = shl nsw i32 %1909, 1
  %1913 = mul i32 %1912, %1911
  %1914 = zext i32 %1913 to i64
  %1915 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %1910, i64 %1914
  %1916 = load double, ptr @_ZN20ComputeNonbondedUtil7cutoff2E, align 8, !tbaa !19
  %1917 = extractelement <2 x double> %685, i64 0
  %1918 = extractelement <2 x double> %685, i64 1
  %1919 = tail call noundef i32 @_Z22pairlist_from_pairlistddddPK8CompAtomPKtiPtdPd(double noundef %1916, double noundef %1917, double noundef %1918, double noundef %688, ptr noundef %41, ptr noundef nonnull %1888, i32 noundef %1889, ptr noundef %94, double noundef %31, ptr noundef %140)
  %1920 = icmp sgt i32 %1919, 0
  br i1 %1920, label %1921, label %2038

1921:                                             ; preds = %1887
  %1922 = load ptr, ptr @_ZN20ComputeNonbondedUtil8r2_tableE, align 8, !tbaa !23
  %1923 = zext i32 %1919 to i64
  br label %1924

1924:                                             ; preds = %1921, %1924
  %1925 = phi i64 [ 0, %1921 ], [ %2036, %1924 ]
  %1926 = phi double [ 0.000000e+00, %1921 ], [ %2032, %1924 ]
  %1927 = phi <2 x double> [ zeroinitializer, %1921 ], [ %2028, %1924 ]
  %1928 = phi <2 x double> [ %666, %1921 ], [ %2017, %1924 ]
  %1929 = shl nuw nsw i64 %1925, 1
  %1930 = getelementptr inbounds i32, ptr %141, i64 %1929
  %1931 = load i32, ptr %1930, align 4, !tbaa !5
  %1932 = ashr i32 %1931, 14
  %1933 = add nsw i32 %1932, %34
  %1934 = getelementptr inbounds i16, ptr %94, i64 %1925
  %1935 = load i16, ptr %1934, align 2, !tbaa !44
  %1936 = zext i16 %1935 to i64
  %1937 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %1936
  %1938 = getelementptr inbounds double, ptr %140, i64 %1925
  %1939 = load double, ptr %1938, align 8, !tbaa !19
  %1940 = sext i32 %1933 to i64
  %1941 = getelementptr inbounds double, ptr %1922, i64 %1940
  %1942 = load double, ptr %1941, align 8, !tbaa !19
  %1943 = fsub double %1939, %1942
  %1944 = shl nsw i32 %1933, 4
  %1945 = sext i32 %1944 to i64
  %1946 = getelementptr inbounds double, ptr %27, i64 %1945
  %1947 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %1936, i32 2
  %1948 = load i16, ptr %1947, align 4, !tbaa !80
  %1949 = sext i16 %1948 to i32
  %1950 = shl nsw i32 %1949, 1
  %1951 = sext i32 %1950 to i64
  %1952 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %1915, i64 %1951
  %1953 = getelementptr inbounds %class.Vector, ptr %625, i64 %1936
  %1954 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %1936, i32 1
  %1955 = load float, ptr %1954, align 8, !tbaa !79
  %1956 = fpext float %1955 to double
  %1957 = fmul double %1906, %1956
  %1958 = getelementptr inbounds %class.Vector, ptr %1937, i64 0, i32 2
  %1959 = load double, ptr %1958, align 8, !tbaa !49
  %1960 = fsub double %688, %1959
  %1961 = load double, ptr %1952, align 8, !tbaa !84
  %1962 = fmul double %28, %1961
  %1963 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %1915, i64 %1951, i32 1
  %1964 = load double, ptr %1963, align 8, !tbaa !86
  %1965 = load double, ptr %1946, align 8, !tbaa !19
  %1966 = getelementptr inbounds double, ptr %1946, i64 2
  %1967 = load double, ptr %1966, align 8, !tbaa !19
  %1968 = fmul double %1964, %648
  %1969 = fmul double %1968, %1967
  %1970 = tail call double @llvm.fmuladd.f64(double %1962, double %1965, double %1969)
  %1971 = getelementptr inbounds double, ptr %1946, i64 1
  %1972 = load double, ptr %1971, align 8, !tbaa !19
  %1973 = getelementptr inbounds double, ptr %1946, i64 3
  %1974 = load double, ptr %1973, align 8, !tbaa !19
  %1975 = fmul double %1968, %1974
  %1976 = tail call double @llvm.fmuladd.f64(double %1962, double %1972, double %1975)
  %1977 = getelementptr inbounds double, ptr %1946, i64 4
  %1978 = load double, ptr %1977, align 8, !tbaa !19
  %1979 = getelementptr inbounds double, ptr %1946, i64 6
  %1980 = load double, ptr %1979, align 8, !tbaa !19
  %1981 = fmul double %1968, %1980
  %1982 = tail call double @llvm.fmuladd.f64(double %1962, double %1978, double %1981)
  %1983 = getelementptr inbounds double, ptr %1946, i64 5
  %1984 = load double, ptr %1983, align 8, !tbaa !19
  %1985 = getelementptr inbounds double, ptr %1946, i64 7
  %1986 = load double, ptr %1985, align 8, !tbaa !19
  %1987 = fmul double %1968, %1986
  %1988 = tail call double @llvm.fmuladd.f64(double %1962, double %1984, double %1987)
  %1989 = getelementptr inbounds double, ptr %1946, i64 8
  %1990 = load double, ptr %1989, align 8, !tbaa !19
  %1991 = getelementptr inbounds double, ptr %1946, i64 9
  %1992 = load double, ptr %1991, align 8, !tbaa !19
  %1993 = getelementptr inbounds double, ptr %1946, i64 10
  %1994 = load double, ptr %1993, align 8, !tbaa !19
  %1995 = getelementptr inbounds double, ptr %1946, i64 11
  %1996 = load double, ptr %1995, align 8, !tbaa !19
  %1997 = fmul double %1957, %1990
  %1998 = fmul double %1957, %1992
  %1999 = fmul double %1957, %1994
  %2000 = fmul double %1957, %1996
  %2001 = insertelement <2 x double> poison, double %1943, i64 0
  %2002 = shufflevector <2 x double> %2001, <2 x double> poison, <2 x i32> zeroinitializer
  %2003 = insertelement <2 x double> poison, double %1997, i64 0
  %2004 = insertelement <2 x double> %2003, double %1970, i64 1
  %2005 = fmul <2 x double> %2002, %2004
  %2006 = insertelement <2 x double> poison, double %1998, i64 0
  %2007 = insertelement <2 x double> %2006, double %1976, i64 1
  %2008 = fmul <2 x double> %2007, <double 2.500000e-01, double 2.500000e-01>
  %2009 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2005, <2 x double> <double 0x3FC5555555555555, double 0x3FC5555555555555>, <2 x double> %2008)
  %2010 = insertelement <2 x double> poison, double %1999, i64 0
  %2011 = insertelement <2 x double> %2010, double %1982, i64 1
  %2012 = fmul <2 x double> %2011, <double 5.000000e-01, double 5.000000e-01>
  %2013 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2009, <2 x double> %2002, <2 x double> %2012)
  %2014 = insertelement <2 x double> poison, double %2000, i64 0
  %2015 = insertelement <2 x double> %2014, double %1988, i64 1
  %2016 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2013, <2 x double> %2002, <2 x double> %2015)
  %2017 = fsub <2 x double> %1928, %2016
  %2018 = fadd double %1970, %1997
  %2019 = fadd double %1976, %1998
  %2020 = fadd double %1982, %1999
  %2021 = tail call double @llvm.fmuladd.f64(double %1943, double %2018, double %2019)
  %2022 = tail call double @llvm.fmuladd.f64(double %2021, double %1943, double %2020)
  %2023 = load <2 x double>, ptr %1937, align 8, !tbaa !19
  %2024 = fsub <2 x double> %685, %2023
  %2025 = insertelement <2 x double> poison, double %2022, i64 0
  %2026 = shufflevector <2 x double> %2025, <2 x double> poison, <2 x i32> zeroinitializer
  %2027 = fmul <2 x double> %2024, %2026
  %2028 = fadd <2 x double> %1927, %2027
  %2029 = load <2 x double>, ptr %1953, align 8, !tbaa !19
  %2030 = fsub <2 x double> %2029, %2027
  store <2 x double> %2030, ptr %1953, align 8, !tbaa !19
  %2031 = fmul double %1960, %2022
  %2032 = fadd double %1926, %2031
  %2033 = getelementptr inbounds %class.Vector, ptr %625, i64 %1936, i32 2
  %2034 = load double, ptr %2033, align 8, !tbaa !87
  %2035 = fsub double %2034, %2031
  store double %2035, ptr %2033, align 8, !tbaa !87
  %2036 = add nuw nsw i64 %1925, 1
  %2037 = icmp eq i64 %2036, %1923
  br i1 %2037, label %2038, label %1924

2038:                                             ; preds = %1924, %1887
  %2039 = phi double [ 0.000000e+00, %1887 ], [ %2032, %1924 ]
  %2040 = phi <2 x double> [ zeroinitializer, %1887 ], [ %2028, %1924 ]
  %2041 = phi <2 x double> [ %666, %1887 ], [ %2017, %1924 ]
  %2042 = load double, ptr @_ZN20ComputeNonbondedUtil7cutoff2E, align 8, !tbaa !19
  %2043 = tail call noundef i32 @_Z22pairlist_from_pairlistddddPK8CompAtomPKtiPtdPd(double noundef %2042, double noundef %1917, double noundef %1918, double noundef %688, ptr noundef %41, ptr noundef %1892, i32 noundef %1893, ptr noundef %94, double noundef %31, ptr noundef %140)
  %2044 = add nsw i32 %2043, %655
  %2045 = icmp sgt i32 %2043, 0
  br i1 %2045, label %2046, label %2176

2046:                                             ; preds = %2038
  %2047 = load ptr, ptr @_ZN20ComputeNonbondedUtil8r2_tableE, align 8, !tbaa !23
  %2048 = zext i32 %2043 to i64
  br label %2049

2049:                                             ; preds = %2046, %2049
  %2050 = phi i64 [ 0, %2046 ], [ %2174, %2049 ]
  %2051 = phi double [ %2039, %2046 ], [ %2170, %2049 ]
  %2052 = phi <2 x double> [ %2040, %2046 ], [ %2166, %2049 ]
  %2053 = phi <2 x double> [ %2041, %2046 ], [ %2155, %2049 ]
  %2054 = shl nuw nsw i64 %2050, 1
  %2055 = getelementptr inbounds i32, ptr %141, i64 %2054
  %2056 = load i32, ptr %2055, align 4, !tbaa !5
  %2057 = ashr i32 %2056, 14
  %2058 = add nsw i32 %2057, %34
  %2059 = getelementptr inbounds i16, ptr %94, i64 %2050
  %2060 = load i16, ptr %2059, align 2, !tbaa !44
  %2061 = zext i16 %2060 to i64
  %2062 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %2061
  %2063 = getelementptr inbounds double, ptr %140, i64 %2050
  %2064 = load double, ptr %2063, align 8, !tbaa !19
  %2065 = sext i32 %2058 to i64
  %2066 = getelementptr inbounds double, ptr %2047, i64 %2065
  %2067 = load double, ptr %2066, align 8, !tbaa !19
  %2068 = fsub double %2064, %2067
  %2069 = shl nsw i32 %2058, 4
  %2070 = sext i32 %2069 to i64
  %2071 = getelementptr inbounds double, ptr %27, i64 %2070
  %2072 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %2061, i32 2
  %2073 = load i16, ptr %2072, align 4, !tbaa !80
  %2074 = sext i16 %2073 to i32
  %2075 = shl nsw i32 %2074, 1
  %2076 = sext i32 %2075 to i64
  %2077 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %1915, i64 %2076
  %2078 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %2077, i64 1
  %2079 = getelementptr inbounds %class.Vector, ptr %625, i64 %2061
  %2080 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %2061, i32 1
  %2081 = load float, ptr %2080, align 8, !tbaa !79
  %2082 = fpext float %2081 to double
  %2083 = fmul double %1906, %2082
  %2084 = getelementptr inbounds %class.Vector, ptr %2062, i64 0, i32 2
  %2085 = load double, ptr %2084, align 8, !tbaa !49
  %2086 = fsub double %688, %2085
  %2087 = load double, ptr %2078, align 8, !tbaa !84
  %2088 = fmul double %28, %2087
  %2089 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %2077, i64 1, i32 1
  %2090 = load double, ptr %2089, align 8, !tbaa !86
  %2091 = load double, ptr %2071, align 8, !tbaa !19
  %2092 = getelementptr inbounds double, ptr %2071, i64 2
  %2093 = load double, ptr %2092, align 8, !tbaa !19
  %2094 = fmul double %2090, %648
  %2095 = fmul double %2094, %2093
  %2096 = tail call double @llvm.fmuladd.f64(double %2088, double %2091, double %2095)
  %2097 = getelementptr inbounds double, ptr %2071, i64 1
  %2098 = load double, ptr %2097, align 8, !tbaa !19
  %2099 = getelementptr inbounds double, ptr %2071, i64 3
  %2100 = load double, ptr %2099, align 8, !tbaa !19
  %2101 = fmul double %2094, %2100
  %2102 = tail call double @llvm.fmuladd.f64(double %2088, double %2098, double %2101)
  %2103 = getelementptr inbounds double, ptr %2071, i64 4
  %2104 = load double, ptr %2103, align 8, !tbaa !19
  %2105 = getelementptr inbounds double, ptr %2071, i64 6
  %2106 = load double, ptr %2105, align 8, !tbaa !19
  %2107 = fmul double %2094, %2106
  %2108 = tail call double @llvm.fmuladd.f64(double %2088, double %2104, double %2107)
  %2109 = getelementptr inbounds double, ptr %2071, i64 5
  %2110 = load double, ptr %2109, align 8, !tbaa !19
  %2111 = getelementptr inbounds double, ptr %2071, i64 7
  %2112 = load double, ptr %2111, align 8, !tbaa !19
  %2113 = fmul double %2094, %2112
  %2114 = tail call double @llvm.fmuladd.f64(double %2088, double %2110, double %2113)
  %2115 = getelementptr inbounds double, ptr %2071, i64 8
  %2116 = load double, ptr %2115, align 8, !tbaa !19
  %2117 = getelementptr inbounds double, ptr %2071, i64 9
  %2118 = load double, ptr %2117, align 8, !tbaa !19
  %2119 = getelementptr inbounds double, ptr %2071, i64 10
  %2120 = load double, ptr %2119, align 8, !tbaa !19
  %2121 = getelementptr inbounds double, ptr %2071, i64 11
  %2122 = load double, ptr %2121, align 8, !tbaa !19
  %2123 = getelementptr inbounds double, ptr %2071, i64 12
  %2124 = load double, ptr %2123, align 8, !tbaa !19
  %2125 = tail call double @llvm.fmuladd.f64(double %649, double %2124, double %2116)
  %2126 = getelementptr inbounds double, ptr %2071, i64 13
  %2127 = load double, ptr %2126, align 8, !tbaa !19
  %2128 = tail call double @llvm.fmuladd.f64(double %649, double %2127, double %2118)
  %2129 = getelementptr inbounds double, ptr %2071, i64 14
  %2130 = load double, ptr %2129, align 8, !tbaa !19
  %2131 = tail call double @llvm.fmuladd.f64(double %649, double %2130, double %2120)
  %2132 = getelementptr inbounds double, ptr %2071, i64 15
  %2133 = load double, ptr %2132, align 8, !tbaa !19
  %2134 = tail call double @llvm.fmuladd.f64(double %649, double %2133, double %2122)
  %2135 = fmul double %2083, %2125
  %2136 = fmul double %2083, %2128
  %2137 = fmul double %2083, %2131
  %2138 = fmul double %2083, %2134
  %2139 = insertelement <2 x double> poison, double %2068, i64 0
  %2140 = shufflevector <2 x double> %2139, <2 x double> poison, <2 x i32> zeroinitializer
  %2141 = insertelement <2 x double> poison, double %2135, i64 0
  %2142 = insertelement <2 x double> %2141, double %2096, i64 1
  %2143 = fmul <2 x double> %2140, %2142
  %2144 = insertelement <2 x double> poison, double %2136, i64 0
  %2145 = insertelement <2 x double> %2144, double %2102, i64 1
  %2146 = fmul <2 x double> %2145, <double 2.500000e-01, double 2.500000e-01>
  %2147 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2143, <2 x double> <double 0x3FC5555555555555, double 0x3FC5555555555555>, <2 x double> %2146)
  %2148 = insertelement <2 x double> poison, double %2137, i64 0
  %2149 = insertelement <2 x double> %2148, double %2108, i64 1
  %2150 = fmul <2 x double> %2149, <double 5.000000e-01, double 5.000000e-01>
  %2151 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2147, <2 x double> %2140, <2 x double> %2150)
  %2152 = insertelement <2 x double> poison, double %2138, i64 0
  %2153 = insertelement <2 x double> %2152, double %2114, i64 1
  %2154 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2151, <2 x double> %2140, <2 x double> %2153)
  %2155 = fsub <2 x double> %2053, %2154
  %2156 = fadd double %2096, %2135
  %2157 = fadd double %2102, %2136
  %2158 = fadd double %2108, %2137
  %2159 = tail call double @llvm.fmuladd.f64(double %2068, double %2156, double %2157)
  %2160 = tail call double @llvm.fmuladd.f64(double %2159, double %2068, double %2158)
  %2161 = load <2 x double>, ptr %2062, align 8, !tbaa !19
  %2162 = fsub <2 x double> %685, %2161
  %2163 = insertelement <2 x double> poison, double %2160, i64 0
  %2164 = shufflevector <2 x double> %2163, <2 x double> poison, <2 x i32> zeroinitializer
  %2165 = fmul <2 x double> %2162, %2164
  %2166 = fadd <2 x double> %2052, %2165
  %2167 = load <2 x double>, ptr %2079, align 8, !tbaa !19
  %2168 = fsub <2 x double> %2167, %2165
  store <2 x double> %2168, ptr %2079, align 8, !tbaa !19
  %2169 = fmul double %2086, %2160
  %2170 = fadd double %2051, %2169
  %2171 = getelementptr inbounds %class.Vector, ptr %625, i64 %2061, i32 2
  %2172 = load double, ptr %2171, align 8, !tbaa !87
  %2173 = fsub double %2172, %2169
  store double %2173, ptr %2171, align 8, !tbaa !87
  %2174 = add nuw nsw i64 %2050, 1
  %2175 = icmp eq i64 %2174, %2048
  br i1 %2175, label %2176, label %2049

2176:                                             ; preds = %2049, %2038
  %2177 = phi double [ %2039, %2038 ], [ %2170, %2049 ]
  %2178 = phi <2 x double> [ %2040, %2038 ], [ %2166, %2049 ]
  %2179 = phi <2 x double> [ %2041, %2038 ], [ %2155, %2049 ]
  %2180 = load double, ptr @_ZN20ComputeNonbondedUtil7cutoff2E, align 8, !tbaa !19
  %2181 = tail call noundef i32 @_Z22pairlist_from_pairlistddddPK8CompAtomPKtiPtdPd(double noundef %2180, double noundef %1917, double noundef %1918, double noundef %688, ptr noundef %41, ptr noundef %1890, i32 noundef %1891, ptr noundef %94, double noundef %31, ptr noundef %140)
  %2182 = add nsw i32 %2044, %2181
  %2183 = icmp sgt i32 %2181, 0
  %2184 = extractelement <2 x double> %2179, i64 0
  br i1 %2183, label %2185, label %2267

2185:                                             ; preds = %2176
  %2186 = load ptr, ptr @_ZN20ComputeNonbondedUtil8r2_tableE, align 8, !tbaa !23
  %2187 = zext i32 %2181 to i64
  br label %2188

2188:                                             ; preds = %2185, %2188
  %2189 = phi i64 [ 0, %2185 ], [ %2265, %2188 ]
  %2190 = phi double [ %2184, %2185 ], [ %2249, %2188 ]
  %2191 = phi double [ %2177, %2185 ], [ %2261, %2188 ]
  %2192 = phi <2 x double> [ %2178, %2185 ], [ %2257, %2188 ]
  %2193 = shl nuw nsw i64 %2189, 1
  %2194 = getelementptr inbounds i32, ptr %141, i64 %2193
  %2195 = load i32, ptr %2194, align 4, !tbaa !5
  %2196 = ashr i32 %2195, 14
  %2197 = add nsw i32 %2196, %34
  %2198 = getelementptr inbounds i16, ptr %94, i64 %2189
  %2199 = load i16, ptr %2198, align 2, !tbaa !44
  %2200 = zext i16 %2199 to i64
  %2201 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %2200
  %2202 = getelementptr inbounds double, ptr %140, i64 %2189
  %2203 = load double, ptr %2202, align 8, !tbaa !19
  %2204 = sext i32 %2197 to i64
  %2205 = getelementptr inbounds double, ptr %2186, i64 %2204
  %2206 = load double, ptr %2205, align 8, !tbaa !19
  %2207 = fsub double %2203, %2206
  %2208 = shl nsw i32 %2197, 4
  %2209 = sext i32 %2208 to i64
  %2210 = getelementptr inbounds double, ptr %27, i64 %2209
  %2211 = getelementptr inbounds %class.Vector, ptr %625, i64 %2200
  %2212 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %2200, i32 1
  %2213 = load float, ptr %2212, align 8, !tbaa !79
  %2214 = fpext float %2213 to double
  %2215 = fmul double %1906, %2214
  %2216 = getelementptr inbounds %class.Vector, ptr %2201, i64 0, i32 2
  %2217 = load double, ptr %2216, align 8, !tbaa !49
  %2218 = fsub double %688, %2217
  %2219 = getelementptr inbounds double, ptr %2210, i64 8
  %2220 = load double, ptr %2219, align 8, !tbaa !19
  %2221 = getelementptr inbounds double, ptr %2210, i64 9
  %2222 = load double, ptr %2221, align 8, !tbaa !19
  %2223 = getelementptr inbounds double, ptr %2210, i64 10
  %2224 = load double, ptr %2223, align 8, !tbaa !19
  %2225 = getelementptr inbounds double, ptr %2210, i64 11
  %2226 = load double, ptr %2225, align 8, !tbaa !19
  %2227 = getelementptr inbounds double, ptr %2210, i64 12
  %2228 = load double, ptr %2227, align 8, !tbaa !19
  %2229 = fsub double %2220, %2228
  %2230 = getelementptr inbounds double, ptr %2210, i64 13
  %2231 = load double, ptr %2230, align 8, !tbaa !19
  %2232 = fsub double %2222, %2231
  %2233 = getelementptr inbounds double, ptr %2210, i64 14
  %2234 = load double, ptr %2233, align 8, !tbaa !19
  %2235 = fsub double %2224, %2234
  %2236 = getelementptr inbounds double, ptr %2210, i64 15
  %2237 = load double, ptr %2236, align 8, !tbaa !19
  %2238 = fsub double %2226, %2237
  %2239 = fmul double %2215, %2229
  %2240 = fmul double %2215, %2232
  %2241 = fmul double %2215, %2235
  %2242 = fmul double %2215, %2238
  %2243 = fmul double %2207, %2239
  %2244 = fmul double %2240, 2.500000e-01
  %2245 = tail call double @llvm.fmuladd.f64(double %2243, double 0x3FC5555555555555, double %2244)
  %2246 = fmul double %2241, 5.000000e-01
  %2247 = tail call double @llvm.fmuladd.f64(double %2245, double %2207, double %2246)
  %2248 = tail call double @llvm.fmuladd.f64(double %2247, double %2207, double %2242)
  %2249 = fsub double %2190, %2248
  %2250 = tail call double @llvm.fmuladd.f64(double %2207, double %2239, double %2240)
  %2251 = tail call double @llvm.fmuladd.f64(double %2250, double %2207, double %2241)
  %2252 = load <2 x double>, ptr %2201, align 8, !tbaa !19
  %2253 = fsub <2 x double> %685, %2252
  %2254 = insertelement <2 x double> poison, double %2251, i64 0
  %2255 = shufflevector <2 x double> %2254, <2 x double> poison, <2 x i32> zeroinitializer
  %2256 = fmul <2 x double> %2253, %2255
  %2257 = fadd <2 x double> %2192, %2256
  %2258 = load <2 x double>, ptr %2211, align 8, !tbaa !19
  %2259 = fsub <2 x double> %2258, %2256
  store <2 x double> %2259, ptr %2211, align 8, !tbaa !19
  %2260 = fmul double %2218, %2251
  %2261 = fadd double %2191, %2260
  %2262 = getelementptr inbounds %class.Vector, ptr %625, i64 %2200, i32 2
  %2263 = load double, ptr %2262, align 8, !tbaa !87
  %2264 = fsub double %2263, %2260
  store double %2264, ptr %2262, align 8, !tbaa !87
  %2265 = add nuw nsw i64 %2189, 1
  %2266 = icmp eq i64 %2265, %2187
  br i1 %2266, label %2267, label %2188

2267:                                             ; preds = %2188, %2176
  %2268 = phi double [ %2177, %2176 ], [ %2261, %2188 ]
  %2269 = phi double [ %2184, %2176 ], [ %2249, %2188 ]
  %2270 = phi <2 x double> [ %2178, %2176 ], [ %2257, %2188 ]
  %2271 = getelementptr inbounds %class.Vector, ptr %625, i64 %667
  %2272 = load <2 x double>, ptr %2271, align 8, !tbaa !19
  %2273 = fadd <2 x double> %2270, %2272
  store <2 x double> %2273, ptr %2271, align 8, !tbaa !19
  %2274 = getelementptr inbounds %class.Vector, ptr %625, i64 %667, i32 2
  %2275 = load double, ptr %2274, align 8, !tbaa !87
  %2276 = fadd double %2268, %2275
  store double %2276, ptr %2274, align 8, !tbaa !87
  %2277 = insertelement <2 x double> %2179, double %2269, i64 0
  br label %2278

2278:                                             ; preds = %2267, %678
  %2279 = phi i32 [ %679, %678 ], [ %683, %2267 ]
  %2280 = phi i32 [ %664, %678 ], [ %1894, %2267 ]
  %2281 = phi i32 [ %663, %678 ], [ %1895, %2267 ]
  %2282 = phi i32 [ %662, %678 ], [ %1896, %2267 ]
  %2283 = phi i32 [ %661, %678 ], [ %1897, %2267 ]
  %2284 = phi i32 [ %660, %678 ], [ %690, %2267 ]
  %2285 = phi ptr [ %659, %678 ], [ %1898, %2267 ]
  %2286 = phi ptr [ %658, %678 ], [ %1899, %2267 ]
  %2287 = phi ptr [ %657, %678 ], [ %1900, %2267 ]
  %2288 = phi i32 [ %681, %678 ], [ %656, %2267 ]
  %2289 = phi i32 [ %655, %678 ], [ %2182, %2267 ]
  %2290 = phi <2 x double> [ %666, %678 ], [ %2277, %2267 ]
  %2291 = add nsw i32 %2288, 1
  %2292 = icmp slt i32 %2291, %631
  br i1 %2292, label %654, label %2293

2293:                                             ; preds = %2278, %619
  %2294 = phi ptr [ null, %619 ], [ %2287, %2278 ]
  %2295 = phi i32 [ 0, %619 ], [ %2289, %2278 ]
  %2296 = phi <2 x double> [ zeroinitializer, %619 ], [ %2290, %2278 ]
  %2297 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 4
  %2298 = load ptr, ptr %2297, align 8, !tbaa !23
  %2299 = icmp sgt i32 %36, 0
  br i1 %2299, label %2300, label %2302

2300:                                             ; preds = %2293
  %2301 = zext i32 %36 to i64
  br label %2328

2302:                                             ; preds = %2328, %2293
  %2303 = phi <4 x double> [ zeroinitializer, %2293 ], [ %2358, %2328 ]
  %2304 = phi <2 x double> [ zeroinitializer, %2293 ], [ %2353, %2328 ]
  %2305 = sitofp i32 %2295 to double
  %2306 = getelementptr inbounds double, ptr %6, i64 22
  %2307 = load double, ptr %2306, align 8, !tbaa !19
  %2308 = fadd double %2307, %2305
  store double %2308, ptr %2306, align 8, !tbaa !19
  %2309 = getelementptr inbounds double, ptr %6, i64 1
  %2310 = load <2 x double>, ptr %2309, align 8, !tbaa !19
  %2311 = fadd <2 x double> %2296, %2310
  store <2 x double> %2311, ptr %2309, align 8, !tbaa !19
  %2312 = getelementptr inbounds double, ptr %6, i64 12
  %2313 = load <4 x double>, ptr %2312, align 8, !tbaa !19
  %2314 = shufflevector <2 x double> %2304, <2 x double> poison, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>
  %2315 = shufflevector <4 x double> %2314, <4 x double> %2303, <4 x i32> <i32 0, i32 1, i32 7, i32 poison>
  %2316 = shufflevector <4 x double> %2315, <4 x double> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 1>
  %2317 = fadd <4 x double> %2316, %2313
  store <4 x double> %2317, ptr %2312, align 8, !tbaa !19
  %2318 = getelementptr inbounds double, ptr %6, i64 16
  %2319 = load <4 x double>, ptr %2318, align 8, !tbaa !19
  %2320 = shufflevector <4 x double> %2303, <4 x double> poison, <4 x i32> <i32 2, i32 1, i32 3, i32 poison>
  %2321 = shufflevector <4 x double> %2320, <4 x double> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 1>
  %2322 = fadd <4 x double> %2321, %2319
  store <4 x double> %2322, ptr %2318, align 8, !tbaa !19
  %2323 = getelementptr inbounds double, ptr %6, i64 20
  %2324 = load double, ptr %2323, align 8, !tbaa !19
  %2325 = extractelement <4 x double> %2303, i64 0
  %2326 = fadd double %2325, %2324
  store double %2326, ptr %2323, align 8, !tbaa !19
  %2327 = icmp eq ptr %2294, null
  br i1 %2327, label %2362, label %2361

2328:                                             ; preds = %2300, %2328
  %2329 = phi i64 [ 0, %2300 ], [ %2359, %2328 ]
  %2330 = phi <4 x double> [ zeroinitializer, %2300 ], [ %2358, %2328 ]
  %2331 = phi <2 x double> [ zeroinitializer, %2300 ], [ %2353, %2328 ]
  %2332 = getelementptr inbounds %class.Vector, ptr %625, i64 %2329
  %2333 = getelementptr inbounds %class.Vector, ptr %2298, i64 %2329
  %2334 = getelementptr inbounds %class.Vector, ptr %625, i64 %2329, i32 1
  %2335 = load <2 x double>, ptr %2332, align 8, !tbaa !19
  %2336 = load <2 x double>, ptr %2333, align 8, !tbaa !19
  %2337 = fadd <2 x double> %2335, %2336
  store <2 x double> %2337, ptr %2333, align 8, !tbaa !19
  %2338 = getelementptr inbounds %class.Vector, ptr %625, i64 %2329, i32 2
  %2339 = load double, ptr %2338, align 8, !tbaa !87
  %2340 = getelementptr inbounds %class.Vector, ptr %2298, i64 %2329, i32 2
  %2341 = load double, ptr %2340, align 8, !tbaa !87
  %2342 = fadd double %2339, %2341
  store double %2342, ptr %2340, align 8, !tbaa !87
  %2343 = load double, ptr %2332, align 8, !tbaa !191
  %2344 = getelementptr inbounds %struct.CompAtom, ptr %39, i64 %2329
  %2345 = load double, ptr %2344, align 8, !tbaa !67
  %2346 = getelementptr inbounds %class.Vector, ptr %2344, i64 0, i32 1
  %2347 = load <2 x double>, ptr %2346, align 8, !tbaa !19
  %2348 = shufflevector <2 x double> %2347, <2 x double> poison, <4 x i32> <i32 1, i32 1, i32 0, i32 1>
  %2349 = insertelement <2 x double> poison, double %2343, i64 0
  %2350 = shufflevector <2 x double> %2349, <2 x double> poison, <2 x i32> zeroinitializer
  %2351 = shufflevector <2 x double> %2347, <2 x double> poison, <2 x i32> <i32 poison, i32 0>
  %2352 = insertelement <2 x double> %2351, double %2345, i64 0
  %2353 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2350, <2 x double> %2352, <2 x double> %2331)
  %2354 = load <2 x double>, ptr %2334, align 8, !tbaa !19
  %2355 = shufflevector <2 x double> %2354, <2 x double> poison, <4 x i32> <i32 1, i32 0, i32 poison, i32 poison>
  %2356 = insertelement <4 x double> %2355, double %2343, i64 3
  %2357 = shufflevector <4 x double> %2356, <4 x double> poison, <4 x i32> <i32 0, i32 1, i32 1, i32 3>
  %2358 = tail call <4 x double> @llvm.fmuladd.v4f64(<4 x double> %2357, <4 x double> %2348, <4 x double> %2330)
  %2359 = add nuw nsw i64 %2329, 1
  %2360 = icmp eq i64 %2359, %2301
  br i1 %2360, label %2302, label %2328

2361:                                             ; preds = %2302
  tail call void @_ZdaPv(ptr noundef nonnull %2294) #10
  br label %2362

2362:                                             ; preds = %2302, %2361, %1
  ret void
}

; Function Attrs: sspstrong uwtable
define dso_local void @_ZN20ComputeNonbondedUtil24calc_self_slow_fullelectEP9nonbonded(ptr nocapture noundef readonly %0) local_unnamed_addr #0 align 2 {
  %2 = load i32, ptr @_ZN20ComputeNonbondedUtil8commOnlyE, align 4, !tbaa !5
  %3 = icmp eq i32 %2, 0
  br i1 %3, label %4, label %2213

4:                                                ; preds = %1
  %5 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 7
  %6 = load ptr, ptr %5, align 8, !tbaa !9
  %7 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 10
  %8 = load ptr, ptr %7, align 8, !tbaa !14
  %9 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 11
  %10 = load i32, ptr %9, align 8, !tbaa !15
  %11 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 12
  %12 = load i32, ptr %11, align 4, !tbaa !16
  %13 = getelementptr inbounds %class.Pairlists, ptr %8, i64 0, i32 1
  store i32 0, ptr %13, align 8, !tbaa !17
  %14 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 6
  %15 = load <2 x double>, ptr %14, align 8, !tbaa !19
  %16 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 6, i32 2
  %17 = load double, ptr %16, align 8, !tbaa !20
  %18 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 13
  %19 = load double, ptr %18, align 8, !tbaa !21
  %20 = fmul double %19, %19
  %21 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 14
  %22 = load double, ptr %21, align 8, !tbaa !22
  %23 = fmul double %22, %22
  %24 = load double, ptr @_ZN20ComputeNonbondedUtil12dielectric_1E, align 8, !tbaa !19
  %25 = load ptr, ptr @_ZN20ComputeNonbondedUtil3molE, align 8, !tbaa !23
  %26 = load ptr, ptr @_ZN20ComputeNonbondedUtil11table_shortE, align 8, !tbaa !23
  %27 = load ptr, ptr @_ZN20ComputeNonbondedUtil10slow_tableE, align 8, !tbaa !23
  %28 = load double, ptr @_ZN20ComputeNonbondedUtil7scalingE, align 8, !tbaa !19
  %29 = load double, ptr @_ZN20ComputeNonbondedUtil7scale14E, align 8, !tbaa !19
  %30 = fsub double 1.000000e+00, %29
  %31 = load double, ptr @_ZN20ComputeNonbondedUtil8r2_deltaE, align 8, !tbaa !19
  %32 = load i32, ptr @_ZN20ComputeNonbondedUtil12r2_delta_expE, align 4, !tbaa !5
  %33 = shl i32 %32, 6
  %34 = add i32 %33, -65472
  %35 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 5
  %36 = load i32, ptr %35, align 8, !tbaa !5
  %37 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 5, i64 1
  %38 = load i32, ptr %37, align 4, !tbaa !5
  %39 = load ptr, ptr %0, align 8, !tbaa !23
  %40 = getelementptr inbounds [2 x ptr], ptr %0, i64 0, i64 1
  %41 = load ptr, ptr %40, align 8, !tbaa !23
  %42 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 1
  %43 = load ptr, ptr %42, align 8, !tbaa !23
  %44 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 1, i64 1
  %45 = load ptr, ptr %44, align 8, !tbaa !23
  %46 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 9
  %47 = load ptr, ptr %46, align 8, !tbaa !24
  %48 = add nsw i32 %38, 5
  %49 = getelementptr inbounds %class.ResizeArray, ptr %47, i64 0, i32 1
  %50 = load ptr, ptr %49, align 8, !tbaa !25
  %51 = getelementptr inbounds %class.ResizeArrayRaw, ptr %50, i64 0, i32 2
  %52 = load i32, ptr %51, align 8, !tbaa !27
  %53 = icmp slt i32 %52, %48
  br i1 %53, label %54, label %92

54:                                               ; preds = %4
  %55 = getelementptr inbounds %class.ResizeArrayRaw, ptr %50, i64 0, i32 3
  %56 = load i32, ptr %55, align 4, !tbaa !30
  %57 = icmp slt i32 %56, %48
  br i1 %57, label %58, label %92

58:                                               ; preds = %54
  %59 = sitofp i32 %56 to float
  %60 = getelementptr inbounds %class.ResizeArrayRaw, ptr %50, i64 0, i32 5
  %61 = load float, ptr %60, align 4, !tbaa !31
  %62 = fmul float %61, %59
  %63 = fptosi float %62 to i32
  %64 = tail call i32 @llvm.smax.i32(i32 %63, i32 %48)
  %65 = sub nsw i32 %64, %56
  %66 = getelementptr inbounds %class.ResizeArrayRaw, ptr %50, i64 0, i32 6
  %67 = load i32, ptr %66, align 8, !tbaa !32
  %68 = icmp slt i32 %65, %67
  %69 = add nsw i32 %67, %56
  %70 = select i1 %68, i32 %69, i32 %64
  %71 = sext i32 %70 to i64
  %72 = shl nsw i64 %71, 1
  %73 = add nsw i64 %72, 31
  %74 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %73) #9
  %75 = getelementptr inbounds i8, ptr %74, i64 31
  %76 = ptrtoint ptr %75 to i64
  %77 = and i64 %76, 31
  %78 = sub nsw i64 0, %77
  %79 = getelementptr inbounds i8, ptr %75, i64 %78
  %80 = load ptr, ptr %50, align 8, !tbaa !33
  %81 = sext i32 %52 to i64
  %82 = shl nsw i64 %81, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %79, ptr align 1 %80, i64 %82, i1 false)
  %83 = icmp eq i32 %56, 0
  br i1 %83, label %89, label %84

84:                                               ; preds = %58
  %85 = getelementptr inbounds %class.ResizeArrayRaw, ptr %50, i64 0, i32 1
  %86 = load ptr, ptr %85, align 8, !tbaa !34
  %87 = icmp eq ptr %86, null
  br i1 %87, label %89, label %88

88:                                               ; preds = %84
  tail call void @_ZdaPv(ptr noundef nonnull %86) #10
  br label %89

89:                                               ; preds = %88, %84, %58
  %90 = getelementptr inbounds %class.ResizeArrayRaw, ptr %50, i64 0, i32 1
  store ptr %74, ptr %90, align 8, !tbaa !34
  store ptr %79, ptr %50, align 8, !tbaa !33
  store i32 %70, ptr %55, align 4, !tbaa !30
  %91 = load ptr, ptr %49, align 8, !tbaa !25
  br label %92

92:                                               ; preds = %4, %54, %89
  %93 = phi ptr [ %50, %4 ], [ %50, %54 ], [ %91, %89 ]
  store i32 %48, ptr %51, align 8, !tbaa !27
  %94 = load ptr, ptr %93, align 8, !tbaa !33
  %95 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %47, i64 0, i32 1, i32 1
  %96 = load ptr, ptr %95, align 8, !tbaa !35
  %97 = getelementptr inbounds %class.ResizeArrayRaw.23, ptr %96, i64 0, i32 2
  %98 = load i32, ptr %97, align 8, !tbaa !37
  %99 = icmp slt i32 %98, %48
  br i1 %99, label %100, label %138

100:                                              ; preds = %92
  %101 = getelementptr inbounds %class.ResizeArrayRaw.23, ptr %96, i64 0, i32 3
  %102 = load i32, ptr %101, align 4, !tbaa !39
  %103 = icmp slt i32 %102, %48
  br i1 %103, label %104, label %138

104:                                              ; preds = %100
  %105 = sitofp i32 %102 to float
  %106 = getelementptr inbounds %class.ResizeArrayRaw.23, ptr %96, i64 0, i32 5
  %107 = load float, ptr %106, align 4, !tbaa !40
  %108 = fmul float %107, %105
  %109 = fptosi float %108 to i32
  %110 = tail call i32 @llvm.smax.i32(i32 %109, i32 %48)
  %111 = sub nsw i32 %110, %102
  %112 = getelementptr inbounds %class.ResizeArrayRaw.23, ptr %96, i64 0, i32 6
  %113 = load i32, ptr %112, align 8, !tbaa !41
  %114 = icmp slt i32 %111, %113
  %115 = add nsw i32 %113, %102
  %116 = select i1 %114, i32 %115, i32 %110
  %117 = sext i32 %116 to i64
  %118 = shl nsw i64 %117, 3
  %119 = add nsw i64 %118, 31
  %120 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %119) #9
  %121 = getelementptr inbounds i8, ptr %120, i64 31
  %122 = ptrtoint ptr %121 to i64
  %123 = and i64 %122, 31
  %124 = sub nsw i64 0, %123
  %125 = getelementptr inbounds i8, ptr %121, i64 %124
  %126 = load ptr, ptr %96, align 8, !tbaa !42
  %127 = sext i32 %98 to i64
  %128 = shl nsw i64 %127, 3
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %125, ptr align 1 %126, i64 %128, i1 false)
  %129 = icmp eq i32 %102, 0
  br i1 %129, label %135, label %130

130:                                              ; preds = %104
  %131 = getelementptr inbounds %class.ResizeArrayRaw.23, ptr %96, i64 0, i32 1
  %132 = load ptr, ptr %131, align 8, !tbaa !43
  %133 = icmp eq ptr %132, null
  br i1 %133, label %135, label %134

134:                                              ; preds = %130
  tail call void @_ZdaPv(ptr noundef nonnull %132) #10
  br label %135

135:                                              ; preds = %134, %130, %104
  %136 = getelementptr inbounds %class.ResizeArrayRaw.23, ptr %96, i64 0, i32 1
  store ptr %120, ptr %136, align 8, !tbaa !43
  store ptr %125, ptr %96, align 8, !tbaa !42
  store i32 %116, ptr %101, align 4, !tbaa !39
  %137 = load ptr, ptr %95, align 8, !tbaa !35
  br label %138

138:                                              ; preds = %92, %100, %135
  %139 = phi ptr [ %96, %92 ], [ %96, %100 ], [ %137, %135 ]
  store i32 %48, ptr %97, align 8, !tbaa !37
  %140 = load ptr, ptr %139, align 8, !tbaa !42
  %141 = getelementptr inbounds i32, ptr %140, i64 1
  %142 = icmp eq i32 %10, 0
  %143 = icmp ne i32 %12, 0
  %144 = select i1 %142, i1 %143, i1 false
  %145 = select i1 %144, i32 0, i32 %48
  %146 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %47, i64 0, i32 2, i32 1
  %147 = load ptr, ptr %146, align 8, !tbaa !25
  %148 = getelementptr inbounds %class.ResizeArrayRaw, ptr %147, i64 0, i32 2
  %149 = load i32, ptr %148, align 8, !tbaa !27
  %150 = icmp slt i32 %149, %145
  br i1 %150, label %151, label %189

151:                                              ; preds = %138
  %152 = getelementptr inbounds %class.ResizeArrayRaw, ptr %147, i64 0, i32 3
  %153 = load i32, ptr %152, align 4, !tbaa !30
  %154 = icmp slt i32 %153, %145
  br i1 %154, label %155, label %189

155:                                              ; preds = %151
  %156 = sitofp i32 %153 to float
  %157 = getelementptr inbounds %class.ResizeArrayRaw, ptr %147, i64 0, i32 5
  %158 = load float, ptr %157, align 4, !tbaa !31
  %159 = fmul float %158, %156
  %160 = fptosi float %159 to i32
  %161 = tail call i32 @llvm.smax.i32(i32 %160, i32 %145)
  %162 = sub nsw i32 %161, %153
  %163 = getelementptr inbounds %class.ResizeArrayRaw, ptr %147, i64 0, i32 6
  %164 = load i32, ptr %163, align 8, !tbaa !32
  %165 = icmp slt i32 %162, %164
  %166 = add nsw i32 %164, %153
  %167 = select i1 %165, i32 %166, i32 %161
  %168 = sext i32 %167 to i64
  %169 = shl nsw i64 %168, 1
  %170 = add nsw i64 %169, 31
  %171 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %170) #9
  %172 = getelementptr inbounds i8, ptr %171, i64 31
  %173 = ptrtoint ptr %172 to i64
  %174 = and i64 %173, 31
  %175 = sub nsw i64 0, %174
  %176 = getelementptr inbounds i8, ptr %172, i64 %175
  %177 = load ptr, ptr %147, align 8, !tbaa !33
  %178 = sext i32 %149 to i64
  %179 = shl nsw i64 %178, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %176, ptr align 1 %177, i64 %179, i1 false)
  %180 = icmp eq i32 %153, 0
  br i1 %180, label %186, label %181

181:                                              ; preds = %155
  %182 = getelementptr inbounds %class.ResizeArrayRaw, ptr %147, i64 0, i32 1
  %183 = load ptr, ptr %182, align 8, !tbaa !34
  %184 = icmp eq ptr %183, null
  br i1 %184, label %186, label %185

185:                                              ; preds = %181
  tail call void @_ZdaPv(ptr noundef nonnull %183) #10
  br label %186

186:                                              ; preds = %185, %181, %155
  %187 = getelementptr inbounds %class.ResizeArrayRaw, ptr %147, i64 0, i32 1
  store ptr %171, ptr %187, align 8, !tbaa !34
  store ptr %176, ptr %147, align 8, !tbaa !33
  store i32 %167, ptr %152, align 4, !tbaa !30
  %188 = load ptr, ptr %146, align 8, !tbaa !25
  br label %189

189:                                              ; preds = %138, %151, %186
  %190 = phi ptr [ %147, %138 ], [ %147, %151 ], [ %188, %186 ]
  store i32 %145, ptr %148, align 8, !tbaa !27
  %191 = load ptr, ptr %190, align 8, !tbaa !33
  %192 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %47, i64 0, i32 3, i32 1
  %193 = load ptr, ptr %192, align 8, !tbaa !25
  %194 = getelementptr inbounds %class.ResizeArrayRaw, ptr %193, i64 0, i32 2
  %195 = load i32, ptr %194, align 8, !tbaa !27
  %196 = icmp slt i32 %195, %145
  br i1 %196, label %197, label %235

197:                                              ; preds = %189
  %198 = getelementptr inbounds %class.ResizeArrayRaw, ptr %193, i64 0, i32 3
  %199 = load i32, ptr %198, align 4, !tbaa !30
  %200 = icmp slt i32 %199, %145
  br i1 %200, label %201, label %235

201:                                              ; preds = %197
  %202 = sitofp i32 %199 to float
  %203 = getelementptr inbounds %class.ResizeArrayRaw, ptr %193, i64 0, i32 5
  %204 = load float, ptr %203, align 4, !tbaa !31
  %205 = fmul float %204, %202
  %206 = fptosi float %205 to i32
  %207 = tail call i32 @llvm.smax.i32(i32 %206, i32 %145)
  %208 = sub nsw i32 %207, %199
  %209 = getelementptr inbounds %class.ResizeArrayRaw, ptr %193, i64 0, i32 6
  %210 = load i32, ptr %209, align 8, !tbaa !32
  %211 = icmp slt i32 %208, %210
  %212 = add nsw i32 %210, %199
  %213 = select i1 %211, i32 %212, i32 %207
  %214 = sext i32 %213 to i64
  %215 = shl nsw i64 %214, 1
  %216 = add nsw i64 %215, 31
  %217 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %216) #9
  %218 = getelementptr inbounds i8, ptr %217, i64 31
  %219 = ptrtoint ptr %218 to i64
  %220 = and i64 %219, 31
  %221 = sub nsw i64 0, %220
  %222 = getelementptr inbounds i8, ptr %218, i64 %221
  %223 = load ptr, ptr %193, align 8, !tbaa !33
  %224 = sext i32 %195 to i64
  %225 = shl nsw i64 %224, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %222, ptr align 1 %223, i64 %225, i1 false)
  %226 = icmp eq i32 %199, 0
  br i1 %226, label %232, label %227

227:                                              ; preds = %201
  %228 = getelementptr inbounds %class.ResizeArrayRaw, ptr %193, i64 0, i32 1
  %229 = load ptr, ptr %228, align 8, !tbaa !34
  %230 = icmp eq ptr %229, null
  br i1 %230, label %232, label %231

231:                                              ; preds = %227
  tail call void @_ZdaPv(ptr noundef nonnull %229) #10
  br label %232

232:                                              ; preds = %231, %227, %201
  %233 = getelementptr inbounds %class.ResizeArrayRaw, ptr %193, i64 0, i32 1
  store ptr %217, ptr %233, align 8, !tbaa !34
  store ptr %222, ptr %193, align 8, !tbaa !33
  store i32 %213, ptr %198, align 4, !tbaa !30
  %234 = load ptr, ptr %192, align 8, !tbaa !25
  br label %235

235:                                              ; preds = %189, %197, %232
  %236 = phi ptr [ %193, %189 ], [ %193, %197 ], [ %234, %232 ]
  store i32 %145, ptr %194, align 8, !tbaa !27
  %237 = load ptr, ptr %236, align 8, !tbaa !33
  %238 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %47, i64 0, i32 4, i32 1
  %239 = load ptr, ptr %238, align 8, !tbaa !25
  %240 = getelementptr inbounds %class.ResizeArrayRaw, ptr %239, i64 0, i32 2
  %241 = load i32, ptr %240, align 8, !tbaa !27
  %242 = icmp slt i32 %241, %145
  br i1 %242, label %243, label %281

243:                                              ; preds = %235
  %244 = getelementptr inbounds %class.ResizeArrayRaw, ptr %239, i64 0, i32 3
  %245 = load i32, ptr %244, align 4, !tbaa !30
  %246 = icmp slt i32 %245, %145
  br i1 %246, label %247, label %281

247:                                              ; preds = %243
  %248 = sitofp i32 %245 to float
  %249 = getelementptr inbounds %class.ResizeArrayRaw, ptr %239, i64 0, i32 5
  %250 = load float, ptr %249, align 4, !tbaa !31
  %251 = fmul float %250, %248
  %252 = fptosi float %251 to i32
  %253 = tail call i32 @llvm.smax.i32(i32 %252, i32 %145)
  %254 = sub nsw i32 %253, %245
  %255 = getelementptr inbounds %class.ResizeArrayRaw, ptr %239, i64 0, i32 6
  %256 = load i32, ptr %255, align 8, !tbaa !32
  %257 = icmp slt i32 %254, %256
  %258 = add nsw i32 %256, %245
  %259 = select i1 %257, i32 %258, i32 %253
  %260 = sext i32 %259 to i64
  %261 = shl nsw i64 %260, 1
  %262 = add nsw i64 %261, 31
  %263 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %262) #9
  %264 = getelementptr inbounds i8, ptr %263, i64 31
  %265 = ptrtoint ptr %264 to i64
  %266 = and i64 %265, 31
  %267 = sub nsw i64 0, %266
  %268 = getelementptr inbounds i8, ptr %264, i64 %267
  %269 = load ptr, ptr %239, align 8, !tbaa !33
  %270 = sext i32 %241 to i64
  %271 = shl nsw i64 %270, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %268, ptr align 1 %269, i64 %271, i1 false)
  %272 = icmp eq i32 %245, 0
  br i1 %272, label %278, label %273

273:                                              ; preds = %247
  %274 = getelementptr inbounds %class.ResizeArrayRaw, ptr %239, i64 0, i32 1
  %275 = load ptr, ptr %274, align 8, !tbaa !34
  %276 = icmp eq ptr %275, null
  br i1 %276, label %278, label %277

277:                                              ; preds = %273
  tail call void @_ZdaPv(ptr noundef nonnull %275) #10
  br label %278

278:                                              ; preds = %277, %273, %247
  %279 = getelementptr inbounds %class.ResizeArrayRaw, ptr %239, i64 0, i32 1
  store ptr %263, ptr %279, align 8, !tbaa !34
  store ptr %268, ptr %239, align 8, !tbaa !33
  store i32 %259, ptr %244, align 4, !tbaa !30
  %280 = load ptr, ptr %238, align 8, !tbaa !25
  br label %281

281:                                              ; preds = %235, %243, %278
  %282 = phi ptr [ %239, %235 ], [ %239, %243 ], [ %280, %278 ]
  store i32 %145, ptr %240, align 8, !tbaa !27
  %283 = load ptr, ptr %282, align 8, !tbaa !33
  %284 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %47, i64 0, i32 5, i32 1
  %285 = load ptr, ptr %284, align 8, !tbaa !25
  %286 = getelementptr inbounds %class.ResizeArrayRaw, ptr %285, i64 0, i32 2
  %287 = load i32, ptr %286, align 8, !tbaa !27
  %288 = icmp slt i32 %287, %145
  br i1 %288, label %289, label %327

289:                                              ; preds = %281
  %290 = getelementptr inbounds %class.ResizeArrayRaw, ptr %285, i64 0, i32 3
  %291 = load i32, ptr %290, align 4, !tbaa !30
  %292 = icmp slt i32 %291, %145
  br i1 %292, label %293, label %327

293:                                              ; preds = %289
  %294 = sitofp i32 %291 to float
  %295 = getelementptr inbounds %class.ResizeArrayRaw, ptr %285, i64 0, i32 5
  %296 = load float, ptr %295, align 4, !tbaa !31
  %297 = fmul float %296, %294
  %298 = fptosi float %297 to i32
  %299 = tail call i32 @llvm.smax.i32(i32 %298, i32 %145)
  %300 = sub nsw i32 %299, %291
  %301 = getelementptr inbounds %class.ResizeArrayRaw, ptr %285, i64 0, i32 6
  %302 = load i32, ptr %301, align 8, !tbaa !32
  %303 = icmp slt i32 %300, %302
  %304 = add nsw i32 %302, %291
  %305 = select i1 %303, i32 %304, i32 %299
  %306 = sext i32 %305 to i64
  %307 = shl nsw i64 %306, 1
  %308 = add nsw i64 %307, 31
  %309 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %308) #9
  %310 = getelementptr inbounds i8, ptr %309, i64 31
  %311 = ptrtoint ptr %310 to i64
  %312 = and i64 %311, 31
  %313 = sub nsw i64 0, %312
  %314 = getelementptr inbounds i8, ptr %310, i64 %313
  %315 = load ptr, ptr %285, align 8, !tbaa !33
  %316 = sext i32 %287 to i64
  %317 = shl nsw i64 %316, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %314, ptr align 1 %315, i64 %317, i1 false)
  %318 = icmp eq i32 %291, 0
  br i1 %318, label %324, label %319

319:                                              ; preds = %293
  %320 = getelementptr inbounds %class.ResizeArrayRaw, ptr %285, i64 0, i32 1
  %321 = load ptr, ptr %320, align 8, !tbaa !34
  %322 = icmp eq ptr %321, null
  br i1 %322, label %324, label %323

323:                                              ; preds = %319
  tail call void @_ZdaPv(ptr noundef nonnull %321) #10
  br label %324

324:                                              ; preds = %323, %319, %293
  %325 = getelementptr inbounds %class.ResizeArrayRaw, ptr %285, i64 0, i32 1
  store ptr %309, ptr %325, align 8, !tbaa !34
  store ptr %314, ptr %285, align 8, !tbaa !33
  store i32 %305, ptr %290, align 4, !tbaa !30
  %326 = load ptr, ptr %284, align 8, !tbaa !25
  br label %327

327:                                              ; preds = %281, %289, %324
  %328 = phi ptr [ %285, %281 ], [ %285, %289 ], [ %326, %324 ]
  store i32 %145, ptr %286, align 8, !tbaa !27
  %329 = load ptr, ptr %328, align 8, !tbaa !33
  %330 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %47, i64 0, i32 6, i32 1
  %331 = load ptr, ptr %330, align 8, !tbaa !25
  %332 = getelementptr inbounds %class.ResizeArrayRaw, ptr %331, i64 0, i32 2
  %333 = load i32, ptr %332, align 8, !tbaa !27
  %334 = icmp slt i32 %333, %145
  br i1 %334, label %335, label %373

335:                                              ; preds = %327
  %336 = getelementptr inbounds %class.ResizeArrayRaw, ptr %331, i64 0, i32 3
  %337 = load i32, ptr %336, align 4, !tbaa !30
  %338 = icmp slt i32 %337, %145
  br i1 %338, label %339, label %373

339:                                              ; preds = %335
  %340 = sitofp i32 %337 to float
  %341 = getelementptr inbounds %class.ResizeArrayRaw, ptr %331, i64 0, i32 5
  %342 = load float, ptr %341, align 4, !tbaa !31
  %343 = fmul float %342, %340
  %344 = fptosi float %343 to i32
  %345 = tail call i32 @llvm.smax.i32(i32 %344, i32 %145)
  %346 = sub nsw i32 %345, %337
  %347 = getelementptr inbounds %class.ResizeArrayRaw, ptr %331, i64 0, i32 6
  %348 = load i32, ptr %347, align 8, !tbaa !32
  %349 = icmp slt i32 %346, %348
  %350 = add nsw i32 %348, %337
  %351 = select i1 %349, i32 %350, i32 %345
  %352 = sext i32 %351 to i64
  %353 = shl nsw i64 %352, 1
  %354 = add nsw i64 %353, 31
  %355 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %354) #9
  %356 = getelementptr inbounds i8, ptr %355, i64 31
  %357 = ptrtoint ptr %356 to i64
  %358 = and i64 %357, 31
  %359 = sub nsw i64 0, %358
  %360 = getelementptr inbounds i8, ptr %356, i64 %359
  %361 = load ptr, ptr %331, align 8, !tbaa !33
  %362 = sext i32 %333 to i64
  %363 = shl nsw i64 %362, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %360, ptr align 1 %361, i64 %363, i1 false)
  %364 = icmp eq i32 %337, 0
  br i1 %364, label %370, label %365

365:                                              ; preds = %339
  %366 = getelementptr inbounds %class.ResizeArrayRaw, ptr %331, i64 0, i32 1
  %367 = load ptr, ptr %366, align 8, !tbaa !34
  %368 = icmp eq ptr %367, null
  br i1 %368, label %370, label %369

369:                                              ; preds = %365
  tail call void @_ZdaPv(ptr noundef nonnull %367) #10
  br label %370

370:                                              ; preds = %369, %365, %339
  %371 = getelementptr inbounds %class.ResizeArrayRaw, ptr %331, i64 0, i32 1
  store ptr %355, ptr %371, align 8, !tbaa !34
  store ptr %360, ptr %331, align 8, !tbaa !33
  store i32 %351, ptr %336, align 4, !tbaa !30
  %372 = load ptr, ptr %330, align 8, !tbaa !25
  br label %373

373:                                              ; preds = %327, %335, %370
  %374 = phi ptr [ %331, %327 ], [ %331, %335 ], [ %372, %370 ]
  store i32 %145, ptr %332, align 8, !tbaa !27
  %375 = load ptr, ptr %374, align 8, !tbaa !33
  %376 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %47, i64 0, i32 15, i32 1
  %377 = load ptr, ptr %376, align 8, !tbaa !25
  %378 = getelementptr inbounds %class.ResizeArrayRaw, ptr %377, i64 0, i32 2
  %379 = load i32, ptr %378, align 8, !tbaa !27
  %380 = icmp slt i32 %379, %145
  br i1 %380, label %381, label %419

381:                                              ; preds = %373
  %382 = getelementptr inbounds %class.ResizeArrayRaw, ptr %377, i64 0, i32 3
  %383 = load i32, ptr %382, align 4, !tbaa !30
  %384 = icmp slt i32 %383, %145
  br i1 %384, label %385, label %419

385:                                              ; preds = %381
  %386 = sitofp i32 %383 to float
  %387 = getelementptr inbounds %class.ResizeArrayRaw, ptr %377, i64 0, i32 5
  %388 = load float, ptr %387, align 4, !tbaa !31
  %389 = fmul float %388, %386
  %390 = fptosi float %389 to i32
  %391 = tail call i32 @llvm.smax.i32(i32 %390, i32 %145)
  %392 = sub nsw i32 %391, %383
  %393 = getelementptr inbounds %class.ResizeArrayRaw, ptr %377, i64 0, i32 6
  %394 = load i32, ptr %393, align 8, !tbaa !32
  %395 = icmp slt i32 %392, %394
  %396 = add nsw i32 %394, %383
  %397 = select i1 %395, i32 %396, i32 %391
  %398 = sext i32 %397 to i64
  %399 = shl nsw i64 %398, 1
  %400 = add nsw i64 %399, 31
  %401 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %400) #9
  %402 = getelementptr inbounds i8, ptr %401, i64 31
  %403 = ptrtoint ptr %402 to i64
  %404 = and i64 %403, 31
  %405 = sub nsw i64 0, %404
  %406 = getelementptr inbounds i8, ptr %402, i64 %405
  %407 = load ptr, ptr %377, align 8, !tbaa !33
  %408 = sext i32 %379 to i64
  %409 = shl nsw i64 %408, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %406, ptr align 1 %407, i64 %409, i1 false)
  %410 = icmp eq i32 %383, 0
  br i1 %410, label %416, label %411

411:                                              ; preds = %385
  %412 = getelementptr inbounds %class.ResizeArrayRaw, ptr %377, i64 0, i32 1
  %413 = load ptr, ptr %412, align 8, !tbaa !34
  %414 = icmp eq ptr %413, null
  br i1 %414, label %416, label %415

415:                                              ; preds = %411
  tail call void @_ZdaPv(ptr noundef nonnull %413) #10
  br label %416

416:                                              ; preds = %415, %411, %385
  %417 = getelementptr inbounds %class.ResizeArrayRaw, ptr %377, i64 0, i32 1
  store ptr %401, ptr %417, align 8, !tbaa !34
  store ptr %406, ptr %377, align 8, !tbaa !33
  store i32 %397, ptr %382, align 4, !tbaa !30
  %418 = load ptr, ptr %376, align 8, !tbaa !25
  br label %419

419:                                              ; preds = %373, %381, %416
  %420 = phi ptr [ %377, %373 ], [ %377, %381 ], [ %418, %416 ]
  store i32 %145, ptr %378, align 8, !tbaa !27
  %421 = load ptr, ptr %420, align 8, !tbaa !33
  %422 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %47, i64 0, i32 16, i32 1
  %423 = load ptr, ptr %422, align 8, !tbaa !25
  %424 = getelementptr inbounds %class.ResizeArrayRaw, ptr %423, i64 0, i32 2
  %425 = load i32, ptr %424, align 8, !tbaa !27
  %426 = icmp slt i32 %425, %145
  br i1 %426, label %427, label %465

427:                                              ; preds = %419
  %428 = getelementptr inbounds %class.ResizeArrayRaw, ptr %423, i64 0, i32 3
  %429 = load i32, ptr %428, align 4, !tbaa !30
  %430 = icmp slt i32 %429, %145
  br i1 %430, label %431, label %465

431:                                              ; preds = %427
  %432 = sitofp i32 %429 to float
  %433 = getelementptr inbounds %class.ResizeArrayRaw, ptr %423, i64 0, i32 5
  %434 = load float, ptr %433, align 4, !tbaa !31
  %435 = fmul float %434, %432
  %436 = fptosi float %435 to i32
  %437 = tail call i32 @llvm.smax.i32(i32 %436, i32 %145)
  %438 = sub nsw i32 %437, %429
  %439 = getelementptr inbounds %class.ResizeArrayRaw, ptr %423, i64 0, i32 6
  %440 = load i32, ptr %439, align 8, !tbaa !32
  %441 = icmp slt i32 %438, %440
  %442 = add nsw i32 %440, %429
  %443 = select i1 %441, i32 %442, i32 %437
  %444 = sext i32 %443 to i64
  %445 = shl nsw i64 %444, 1
  %446 = add nsw i64 %445, 31
  %447 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %446) #9
  %448 = getelementptr inbounds i8, ptr %447, i64 31
  %449 = ptrtoint ptr %448 to i64
  %450 = and i64 %449, 31
  %451 = sub nsw i64 0, %450
  %452 = getelementptr inbounds i8, ptr %448, i64 %451
  %453 = load ptr, ptr %423, align 8, !tbaa !33
  %454 = sext i32 %425 to i64
  %455 = shl nsw i64 %454, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %452, ptr align 1 %453, i64 %455, i1 false)
  %456 = icmp eq i32 %429, 0
  br i1 %456, label %462, label %457

457:                                              ; preds = %431
  %458 = getelementptr inbounds %class.ResizeArrayRaw, ptr %423, i64 0, i32 1
  %459 = load ptr, ptr %458, align 8, !tbaa !34
  %460 = icmp eq ptr %459, null
  br i1 %460, label %462, label %461

461:                                              ; preds = %457
  tail call void @_ZdaPv(ptr noundef nonnull %459) #10
  br label %462

462:                                              ; preds = %461, %457, %431
  %463 = getelementptr inbounds %class.ResizeArrayRaw, ptr %423, i64 0, i32 1
  store ptr %447, ptr %463, align 8, !tbaa !34
  store ptr %452, ptr %423, align 8, !tbaa !33
  store i32 %443, ptr %428, align 4, !tbaa !30
  %464 = load ptr, ptr %422, align 8, !tbaa !25
  br label %465

465:                                              ; preds = %419, %427, %462
  %466 = phi ptr [ %423, %419 ], [ %423, %427 ], [ %464, %462 ]
  store i32 %145, ptr %424, align 8, !tbaa !27
  %467 = load ptr, ptr %466, align 8, !tbaa !33
  br i1 %144, label %609, label %468

468:                                              ; preds = %465
  %469 = icmp sgt i32 %38, 0
  br i1 %469, label %470, label %600

470:                                              ; preds = %468
  %471 = zext i32 %38 to i64
  %472 = and i64 %471, 1
  %473 = icmp eq i32 %38, 1
  br i1 %473, label %506, label %474

474:                                              ; preds = %470
  %475 = and i64 %471, 4294967294
  br label %476

476:                                              ; preds = %501, %474
  %477 = phi i64 [ 0, %474 ], [ %503, %501 ]
  %478 = phi i32 [ 0, %474 ], [ %502, %501 ]
  %479 = phi i64 [ 0, %474 ], [ %504, %501 ]
  %480 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %477, i32 4
  %481 = load i8, ptr %480, align 1
  %482 = and i8 %481, 7
  %483 = icmp eq i8 %482, 0
  br i1 %483, label %489, label %484

484:                                              ; preds = %476
  %485 = trunc i64 %477 to i16
  %486 = add nsw i32 %478, 1
  %487 = sext i32 %478 to i64
  %488 = getelementptr inbounds i16, ptr %191, i64 %487
  store i16 %485, ptr %488, align 2, !tbaa !44
  br label %489

489:                                              ; preds = %476, %484
  %490 = phi i32 [ %486, %484 ], [ %478, %476 ]
  %491 = or i64 %477, 1
  %492 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %491, i32 4
  %493 = load i8, ptr %492, align 1
  %494 = and i8 %493, 7
  %495 = icmp eq i8 %494, 0
  br i1 %495, label %501, label %496

496:                                              ; preds = %489
  %497 = trunc i64 %491 to i16
  %498 = add nsw i32 %490, 1
  %499 = sext i32 %490 to i64
  %500 = getelementptr inbounds i16, ptr %191, i64 %499
  store i16 %497, ptr %500, align 2, !tbaa !44
  br label %501

501:                                              ; preds = %496, %489
  %502 = phi i32 [ %498, %496 ], [ %490, %489 ]
  %503 = add nuw nsw i64 %477, 2
  %504 = add i64 %479, 2
  %505 = icmp eq i64 %504, %475
  br i1 %505, label %506, label %476

506:                                              ; preds = %501, %470
  %507 = phi i32 [ undef, %470 ], [ %502, %501 ]
  %508 = phi i64 [ 0, %470 ], [ %503, %501 ]
  %509 = phi i32 [ 0, %470 ], [ %502, %501 ]
  %510 = icmp eq i64 %472, 0
  br i1 %510, label %521, label %511

511:                                              ; preds = %506
  %512 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %508, i32 4
  %513 = load i8, ptr %512, align 1
  %514 = and i8 %513, 7
  %515 = icmp eq i8 %514, 0
  br i1 %515, label %521, label %516

516:                                              ; preds = %511
  %517 = trunc i64 %508 to i16
  %518 = add nsw i32 %509, 1
  %519 = sext i32 %509 to i64
  %520 = getelementptr inbounds i16, ptr %191, i64 %519
  store i16 %517, ptr %520, align 2, !tbaa !44
  br label %521

521:                                              ; preds = %511, %516, %506
  %522 = phi i32 [ %507, %506 ], [ %518, %516 ], [ %509, %511 ]
  %523 = icmp eq i32 %522, 0
  br i1 %523, label %531, label %524

524:                                              ; preds = %521
  %525 = add nsw i32 %522, -1
  %526 = sext i32 %525 to i64
  %527 = getelementptr inbounds i16, ptr %191, i64 %526
  %528 = load i16, ptr %527, align 2, !tbaa !44
  %529 = sext i32 %522 to i64
  %530 = getelementptr inbounds i16, ptr %191, i64 %529
  store i16 %528, ptr %530, align 2, !tbaa !44
  br label %531

531:                                              ; preds = %524, %521
  %532 = load i32, ptr @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4, !tbaa !5
  %533 = icmp ne i32 %532, 0
  %534 = icmp sgt i32 %522, 0
  %535 = and i1 %533, %534
  br i1 %535, label %536, label %600

536:                                              ; preds = %531
  %537 = zext i32 %522 to i64
  %538 = and i64 %537, 1
  %539 = icmp eq i32 %522, 1
  br i1 %539, label %574, label %540

540:                                              ; preds = %536
  %541 = and i64 %537, 4294967294
  br label %542

542:                                              ; preds = %569, %540
  %543 = phi i64 [ 0, %540 ], [ %571, %569 ]
  %544 = phi i32 [ 0, %540 ], [ %570, %569 ]
  %545 = phi i64 [ 0, %540 ], [ %572, %569 ]
  %546 = getelementptr inbounds i16, ptr %191, i64 %543
  %547 = load i16, ptr %546, align 2, !tbaa !44
  %548 = zext i16 %547 to i64
  %549 = getelementptr inbounds %struct.CompAtomExt, ptr %45, i64 %548
  %550 = load i32, ptr %549, align 4
  %551 = icmp sgt i32 %550, -1
  br i1 %551, label %552, label %556

552:                                              ; preds = %542
  %553 = add nsw i32 %544, 1
  %554 = sext i32 %544 to i64
  %555 = getelementptr inbounds i16, ptr %237, i64 %554
  store i16 %547, ptr %555, align 2, !tbaa !44
  br label %556

556:                                              ; preds = %542, %552
  %557 = phi i32 [ %544, %542 ], [ %553, %552 ]
  %558 = or i64 %543, 1
  %559 = getelementptr inbounds i16, ptr %191, i64 %558
  %560 = load i16, ptr %559, align 2, !tbaa !44
  %561 = zext i16 %560 to i64
  %562 = getelementptr inbounds %struct.CompAtomExt, ptr %45, i64 %561
  %563 = load i32, ptr %562, align 4
  %564 = icmp sgt i32 %563, -1
  br i1 %564, label %565, label %569

565:                                              ; preds = %556
  %566 = add nsw i32 %557, 1
  %567 = sext i32 %557 to i64
  %568 = getelementptr inbounds i16, ptr %237, i64 %567
  store i16 %560, ptr %568, align 2, !tbaa !44
  br label %569

569:                                              ; preds = %565, %556
  %570 = phi i32 [ %557, %556 ], [ %566, %565 ]
  %571 = add nuw nsw i64 %543, 2
  %572 = add i64 %545, 2
  %573 = icmp eq i64 %572, %541
  br i1 %573, label %574, label %542

574:                                              ; preds = %569, %536
  %575 = phi i32 [ undef, %536 ], [ %570, %569 ]
  %576 = phi i64 [ 0, %536 ], [ %571, %569 ]
  %577 = phi i32 [ 0, %536 ], [ %570, %569 ]
  %578 = icmp eq i64 %538, 0
  br i1 %578, label %590, label %579

579:                                              ; preds = %574
  %580 = getelementptr inbounds i16, ptr %191, i64 %576
  %581 = load i16, ptr %580, align 2, !tbaa !44
  %582 = zext i16 %581 to i64
  %583 = getelementptr inbounds %struct.CompAtomExt, ptr %45, i64 %582
  %584 = load i32, ptr %583, align 4
  %585 = icmp sgt i32 %584, -1
  br i1 %585, label %586, label %590

586:                                              ; preds = %579
  %587 = add nsw i32 %577, 1
  %588 = sext i32 %577 to i64
  %589 = getelementptr inbounds i16, ptr %237, i64 %588
  store i16 %581, ptr %589, align 2, !tbaa !44
  br label %590

590:                                              ; preds = %579, %586, %574
  %591 = phi i32 [ %575, %574 ], [ %577, %579 ], [ %587, %586 ]
  %592 = icmp eq i32 %591, 0
  br i1 %592, label %600, label %593

593:                                              ; preds = %590
  %594 = add nsw i32 %591, -1
  %595 = sext i32 %594 to i64
  %596 = getelementptr inbounds i16, ptr %237, i64 %595
  %597 = load i16, ptr %596, align 2, !tbaa !44
  %598 = sext i32 %591 to i64
  %599 = getelementptr inbounds i16, ptr %237, i64 %598
  store i16 %597, ptr %599, align 2, !tbaa !44
  br label %600

600:                                              ; preds = %468, %531, %593, %590
  %601 = phi i32 [ %522, %593 ], [ %522, %590 ], [ %522, %531 ], [ 0, %468 ]
  %602 = phi i32 [ %591, %593 ], [ 0, %590 ], [ 0, %531 ], [ 0, %468 ]
  %603 = load i32, ptr %13, align 8, !tbaa !17
  %604 = add nsw i32 %603, 1
  store i32 %604, ptr %13, align 8, !tbaa !17
  %605 = trunc i32 %36 to i16
  %606 = load ptr, ptr %8, align 8, !tbaa !46
  %607 = sext i32 %603 to i64
  %608 = getelementptr inbounds i16, ptr %606, i64 %607
  store i16 %605, ptr %608, align 2, !tbaa !44
  br label %619

609:                                              ; preds = %465
  %610 = load ptr, ptr %8, align 8, !tbaa !46
  %611 = load i32, ptr %13, align 8, !tbaa !17
  %612 = add nsw i32 %611, 1
  store i32 %612, ptr %13, align 8, !tbaa !17
  %613 = sext i32 %611 to i64
  %614 = getelementptr inbounds i16, ptr %610, i64 %613
  %615 = load i16, ptr %614, align 2, !tbaa !44
  %616 = zext i16 %615 to i32
  %617 = icmp eq i32 %36, %616
  br i1 %617, label %619, label %618

618:                                              ; preds = %609
  tail call void @_Z8NAMD_bugPKc(ptr noundef nonnull @.str)
  br label %619

619:                                              ; preds = %609, %618, %600
  %620 = phi i32 [ 0, %618 ], [ 0, %609 ], [ %601, %600 ]
  %621 = phi i32 [ 0, %618 ], [ 0, %609 ], [ %602, %600 ]
  %622 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %47, i64 0, i32 18, i32 1
  %623 = load ptr, ptr %622, align 8, !tbaa !172
  tail call void @_ZN14ResizeArrayRawI6VectorE6resizeEi(ptr noundef nonnull align 8 dereferenceable(36) %623, i32 noundef %36)
  %624 = load ptr, ptr %622, align 8, !tbaa !172
  %625 = load ptr, ptr %624, align 8, !tbaa !174
  %626 = sext i32 %36 to i64
  %627 = mul nsw i64 %626, 24
  tail call void @llvm.memset.p0.i64(ptr align 1 %625, i8 0, i64 %627, i1 false)
  %628 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 18
  %629 = load i32, ptr %628, align 4, !tbaa !48
  %630 = add nsw i32 %629, -1
  %631 = add nsw i32 %36, -1
  %632 = icmp sgt i32 %36, 1
  br i1 %632, label %633, label %2148

633:                                              ; preds = %619
  %634 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 16
  %635 = load i32, ptr %634, align 4, !tbaa !47
  %636 = getelementptr inbounds %class.Molecule, ptr %25, i64 0, i32 1
  %637 = getelementptr inbounds %class.Molecule, ptr %25, i64 0, i32 4
  %638 = getelementptr inbounds %class.Molecule, ptr %25, i64 0, i32 2
  %639 = getelementptr inbounds %class.Molecule, ptr %25, i64 0, i32 3
  %640 = ptrtoint ptr %421 to i64
  %641 = add nsw i32 %38, 10
  %642 = getelementptr inbounds %class.Pairlists, ptr %8, i64 0, i32 2
  %643 = ptrtoint ptr %467 to i64
  %644 = ptrtoint ptr %329 to i64
  %645 = ptrtoint ptr %375 to i64
  %646 = fmul double %30, 2.000000e+00
  %647 = fmul double %30, 4.000000e+00
  %648 = fmul double %30, 6.000000e+00
  %649 = sext i32 %620 to i64
  %650 = sext i32 %621 to i64
  %651 = insertelement <2 x double> poison, double %23, i64 0
  %652 = shufflevector <2 x double> %651, <2 x double> poison, <2 x i32> zeroinitializer
  br label %653

653:                                              ; preds = %633, %2134
  %654 = phi i32 [ 0, %633 ], [ %2145, %2134 ]
  %655 = phi i32 [ 0, %633 ], [ %2146, %2134 ]
  %656 = phi ptr [ null, %633 ], [ %2143, %2134 ]
  %657 = phi ptr [ null, %633 ], [ %2142, %2134 ]
  %658 = phi ptr [ null, %633 ], [ %2141, %2134 ]
  %659 = phi i32 [ 0, %633 ], [ %2140, %2134 ]
  %660 = phi i32 [ 0, %633 ], [ %2139, %2134 ]
  %661 = phi i32 [ 0, %633 ], [ %2138, %2134 ]
  %662 = phi i32 [ 0, %633 ], [ %2137, %2134 ]
  %663 = phi i32 [ 0, %633 ], [ %2136, %2134 ]
  %664 = phi i32 [ %635, %633 ], [ %2135, %2134 ]
  %665 = sext i32 %655 to i64
  %666 = getelementptr inbounds %struct.CompAtom, ptr %39, i64 %665
  %667 = getelementptr inbounds %struct.CompAtomExt, ptr %43, i64 %665
  %668 = getelementptr inbounds %struct.CompAtom, ptr %39, i64 %665, i32 4
  %669 = load i8, ptr %668, align 1
  %670 = lshr i8 %669, 3
  %671 = and i8 %670, 15
  %672 = zext i8 %671 to i32
  %673 = icmp eq i8 %671, 0
  br i1 %673, label %680, label %674

674:                                              ; preds = %653
  %675 = icmp eq i32 %664, 0
  br i1 %675, label %680, label %676

676:                                              ; preds = %674
  %677 = add nsw i32 %664, -1
  %678 = add nsw i32 %655, -1
  %679 = add i32 %678, %672
  br label %2134

680:                                              ; preds = %674, %653
  %681 = phi i32 [ %664, %653 ], [ %630, %674 ]
  %682 = load <2 x double>, ptr %666, align 8, !tbaa !19
  %683 = fadd <2 x double> %15, %682
  %684 = getelementptr inbounds %class.Vector, ptr %666, i64 0, i32 2
  %685 = load double, ptr %684, align 8, !tbaa !49
  %686 = fadd double %17, %685
  %687 = add nsw i32 %655, %672
  %688 = select i1 %673, i32 %659, i32 %687
  br i1 %144, label %1855, label %689

689:                                              ; preds = %680
  %690 = load i32, ptr %667, align 4
  %691 = shl i32 %690, 2
  %692 = ashr exact i32 %691, 2
  %693 = load ptr, ptr %636, align 8, !tbaa !51
  %694 = sext i32 %692 to i64
  %695 = getelementptr inbounds %class.ExclusionCheck, ptr %693, i64 %694
  %696 = load i32, ptr %695, align 8, !tbaa !53
  %697 = getelementptr inbounds %class.ExclusionCheck, ptr %693, i64 %694, i32 1
  %698 = load i32, ptr %697, align 4, !tbaa !55
  %699 = getelementptr inbounds %class.ExclusionCheck, ptr %693, i64 %694, i32 2
  %700 = load ptr, ptr %699, align 8, !tbaa !56
  %701 = icmp eq ptr %700, null
  br i1 %701, label %706, label %702

702:                                              ; preds = %689
  %703 = sext i32 %696 to i64
  %704 = sub nsw i64 0, %703
  %705 = getelementptr inbounds i8, ptr %700, i64 %704
  br label %932

706:                                              ; preds = %689
  %707 = icmp eq ptr %656, null
  br i1 %707, label %795, label %708

708:                                              ; preds = %706
  %709 = load i32, ptr %657, align 4, !tbaa !5
  %710 = icmp slt i32 %709, 1
  br i1 %710, label %758, label %711

711:                                              ; preds = %708
  %712 = add nuw i32 %709, 1
  %713 = zext i32 %712 to i64
  %714 = add nsw i64 %713, -1
  %715 = add nsw i64 %713, -2
  %716 = and i64 %714, 3
  %717 = icmp ult i64 %715, 3
  br i1 %717, label %745, label %718

718:                                              ; preds = %711
  %719 = and i64 %714, -4
  br label %720

720:                                              ; preds = %720, %718
  %721 = phi i64 [ 1, %718 ], [ %742, %720 ]
  %722 = phi i64 [ 0, %718 ], [ %743, %720 ]
  %723 = getelementptr inbounds i32, ptr %657, i64 %721
  %724 = load i32, ptr %723, align 4, !tbaa !5
  %725 = sext i32 %724 to i64
  %726 = getelementptr inbounds i8, ptr %656, i64 %725
  store i8 0, ptr %726, align 1, !tbaa !57
  %727 = add nuw nsw i64 %721, 1
  %728 = getelementptr inbounds i32, ptr %657, i64 %727
  %729 = load i32, ptr %728, align 4, !tbaa !5
  %730 = sext i32 %729 to i64
  %731 = getelementptr inbounds i8, ptr %656, i64 %730
  store i8 0, ptr %731, align 1, !tbaa !57
  %732 = add nuw nsw i64 %721, 2
  %733 = getelementptr inbounds i32, ptr %657, i64 %732
  %734 = load i32, ptr %733, align 4, !tbaa !5
  %735 = sext i32 %734 to i64
  %736 = getelementptr inbounds i8, ptr %656, i64 %735
  store i8 0, ptr %736, align 1, !tbaa !57
  %737 = add nuw nsw i64 %721, 3
  %738 = getelementptr inbounds i32, ptr %657, i64 %737
  %739 = load i32, ptr %738, align 4, !tbaa !5
  %740 = sext i32 %739 to i64
  %741 = getelementptr inbounds i8, ptr %656, i64 %740
  store i8 0, ptr %741, align 1, !tbaa !57
  %742 = add nuw nsw i64 %721, 4
  %743 = add i64 %722, 4
  %744 = icmp eq i64 %743, %719
  br i1 %744, label %745, label %720

745:                                              ; preds = %720, %711
  %746 = phi i64 [ 1, %711 ], [ %742, %720 ]
  %747 = icmp eq i64 %716, 0
  br i1 %747, label %758, label %748

748:                                              ; preds = %745, %748
  %749 = phi i64 [ %755, %748 ], [ %746, %745 ]
  %750 = phi i64 [ %756, %748 ], [ 0, %745 ]
  %751 = getelementptr inbounds i32, ptr %657, i64 %749
  %752 = load i32, ptr %751, align 4, !tbaa !5
  %753 = sext i32 %752 to i64
  %754 = getelementptr inbounds i8, ptr %656, i64 %753
  store i8 0, ptr %754, align 1, !tbaa !57
  %755 = add nuw nsw i64 %749, 1
  %756 = add i64 %750, 1
  %757 = icmp eq i64 %756, %716
  br i1 %757, label %758, label %748, !llvm.loop !267

758:                                              ; preds = %745, %748, %708
  %759 = load i32, ptr %658, align 4, !tbaa !5
  %760 = icmp slt i32 %759, 1
  br i1 %760, label %815, label %761

761:                                              ; preds = %758
  %762 = add nuw i32 %759, 1
  %763 = zext i32 %762 to i64
  %764 = add nsw i64 %763, -1
  %765 = add nsw i64 %763, -2
  %766 = and i64 %764, 3
  %767 = icmp ult i64 %765, 3
  br i1 %767, label %802, label %768

768:                                              ; preds = %761
  %769 = and i64 %764, -4
  br label %770

770:                                              ; preds = %770, %768
  %771 = phi i64 [ 1, %768 ], [ %792, %770 ]
  %772 = phi i64 [ 0, %768 ], [ %793, %770 ]
  %773 = getelementptr inbounds i32, ptr %658, i64 %771
  %774 = load i32, ptr %773, align 4, !tbaa !5
  %775 = sext i32 %774 to i64
  %776 = getelementptr inbounds i8, ptr %656, i64 %775
  store i8 0, ptr %776, align 1, !tbaa !57
  %777 = add nuw nsw i64 %771, 1
  %778 = getelementptr inbounds i32, ptr %658, i64 %777
  %779 = load i32, ptr %778, align 4, !tbaa !5
  %780 = sext i32 %779 to i64
  %781 = getelementptr inbounds i8, ptr %656, i64 %780
  store i8 0, ptr %781, align 1, !tbaa !57
  %782 = add nuw nsw i64 %771, 2
  %783 = getelementptr inbounds i32, ptr %658, i64 %782
  %784 = load i32, ptr %783, align 4, !tbaa !5
  %785 = sext i32 %784 to i64
  %786 = getelementptr inbounds i8, ptr %656, i64 %785
  store i8 0, ptr %786, align 1, !tbaa !57
  %787 = add nuw nsw i64 %771, 3
  %788 = getelementptr inbounds i32, ptr %658, i64 %787
  %789 = load i32, ptr %788, align 4, !tbaa !5
  %790 = sext i32 %789 to i64
  %791 = getelementptr inbounds i8, ptr %656, i64 %790
  store i8 0, ptr %791, align 1, !tbaa !57
  %792 = add nuw nsw i64 %771, 4
  %793 = add i64 %772, 4
  %794 = icmp eq i64 %793, %769
  br i1 %794, label %802, label %770

795:                                              ; preds = %706
  %796 = load i32, ptr %637, align 8, !tbaa !60
  %797 = tail call i32 @llvm.smax.i32(i32 %796, i32 -1)
  %798 = sext i32 %797 to i64
  %799 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %798) #9
  %800 = load i32, ptr %637, align 8, !tbaa !60
  %801 = sext i32 %800 to i64
  tail call void @llvm.memset.p0.i64(ptr nonnull align 1 %799, i8 0, i64 %801, i1 false)
  br label %815

802:                                              ; preds = %770, %761
  %803 = phi i64 [ 1, %761 ], [ %792, %770 ]
  %804 = icmp eq i64 %766, 0
  br i1 %804, label %815, label %805

805:                                              ; preds = %802, %805
  %806 = phi i64 [ %812, %805 ], [ %803, %802 ]
  %807 = phi i64 [ %813, %805 ], [ 0, %802 ]
  %808 = getelementptr inbounds i32, ptr %658, i64 %806
  %809 = load i32, ptr %808, align 4, !tbaa !5
  %810 = sext i32 %809 to i64
  %811 = getelementptr inbounds i8, ptr %656, i64 %810
  store i8 0, ptr %811, align 1, !tbaa !57
  %812 = add nuw nsw i64 %806, 1
  %813 = add i64 %807, 1
  %814 = icmp eq i64 %813, %766
  br i1 %814, label %815, label %805, !llvm.loop !268

815:                                              ; preds = %802, %805, %758, %795
  %816 = phi ptr [ %799, %795 ], [ %656, %758 ], [ %656, %805 ], [ %656, %802 ]
  %817 = load i32, ptr %667, align 4
  %818 = shl i32 %817, 2
  %819 = ashr exact i32 %818, 2
  %820 = load ptr, ptr %638, align 8, !tbaa !62
  %821 = sext i32 %819 to i64
  %822 = getelementptr inbounds ptr, ptr %820, i64 %821
  %823 = load ptr, ptr %822, align 8, !tbaa !23
  %824 = load i32, ptr %823, align 4, !tbaa !5
  %825 = icmp slt i32 %824, 1
  br i1 %825, label %878, label %826

826:                                              ; preds = %815
  %827 = add nuw i32 %824, 1
  %828 = zext i32 %827 to i64
  %829 = add nsw i64 %828, -1
  %830 = add nsw i64 %828, -2
  %831 = and i64 %829, 3
  %832 = icmp ult i64 %830, 3
  br i1 %832, label %860, label %833

833:                                              ; preds = %826
  %834 = and i64 %829, -4
  br label %835

835:                                              ; preds = %835, %833
  %836 = phi i64 [ 1, %833 ], [ %857, %835 ]
  %837 = phi i64 [ 0, %833 ], [ %858, %835 ]
  %838 = getelementptr inbounds i32, ptr %823, i64 %836
  %839 = load i32, ptr %838, align 4, !tbaa !5
  %840 = sext i32 %839 to i64
  %841 = getelementptr inbounds i8, ptr %816, i64 %840
  store i8 1, ptr %841, align 1, !tbaa !57
  %842 = add nuw nsw i64 %836, 1
  %843 = getelementptr inbounds i32, ptr %823, i64 %842
  %844 = load i32, ptr %843, align 4, !tbaa !5
  %845 = sext i32 %844 to i64
  %846 = getelementptr inbounds i8, ptr %816, i64 %845
  store i8 1, ptr %846, align 1, !tbaa !57
  %847 = add nuw nsw i64 %836, 2
  %848 = getelementptr inbounds i32, ptr %823, i64 %847
  %849 = load i32, ptr %848, align 4, !tbaa !5
  %850 = sext i32 %849 to i64
  %851 = getelementptr inbounds i8, ptr %816, i64 %850
  store i8 1, ptr %851, align 1, !tbaa !57
  %852 = add nuw nsw i64 %836, 3
  %853 = getelementptr inbounds i32, ptr %823, i64 %852
  %854 = load i32, ptr %853, align 4, !tbaa !5
  %855 = sext i32 %854 to i64
  %856 = getelementptr inbounds i8, ptr %816, i64 %855
  store i8 1, ptr %856, align 1, !tbaa !57
  %857 = add nuw nsw i64 %836, 4
  %858 = add i64 %837, 4
  %859 = icmp eq i64 %858, %834
  br i1 %859, label %860, label %835

860:                                              ; preds = %835, %826
  %861 = phi i64 [ 1, %826 ], [ %857, %835 ]
  %862 = icmp eq i64 %831, 0
  br i1 %862, label %873, label %863

863:                                              ; preds = %860, %863
  %864 = phi i64 [ %870, %863 ], [ %861, %860 ]
  %865 = phi i64 [ %871, %863 ], [ 0, %860 ]
  %866 = getelementptr inbounds i32, ptr %823, i64 %864
  %867 = load i32, ptr %866, align 4, !tbaa !5
  %868 = sext i32 %867 to i64
  %869 = getelementptr inbounds i8, ptr %816, i64 %868
  store i8 1, ptr %869, align 1, !tbaa !57
  %870 = add nuw nsw i64 %864, 1
  %871 = add i64 %865, 1
  %872 = icmp eq i64 %871, %831
  br i1 %872, label %873, label %863, !llvm.loop !269

873:                                              ; preds = %863, %860
  %874 = load i32, ptr %667, align 4
  %875 = shl i32 %874, 2
  %876 = ashr exact i32 %875, 2
  %877 = sext i32 %876 to i64
  br label %878

878:                                              ; preds = %873, %815
  %879 = phi i64 [ %877, %873 ], [ %821, %815 ]
  %880 = load ptr, ptr %639, align 8, !tbaa !64
  %881 = getelementptr inbounds ptr, ptr %880, i64 %879
  %882 = load ptr, ptr %881, align 8, !tbaa !23
  %883 = load i32, ptr %882, align 4, !tbaa !5
  %884 = icmp slt i32 %883, 1
  br i1 %884, label %932, label %885

885:                                              ; preds = %878
  %886 = add nuw i32 %883, 1
  %887 = zext i32 %886 to i64
  %888 = add nsw i64 %887, -1
  %889 = add nsw i64 %887, -2
  %890 = and i64 %888, 3
  %891 = icmp ult i64 %889, 3
  br i1 %891, label %919, label %892

892:                                              ; preds = %885
  %893 = and i64 %888, -4
  br label %894

894:                                              ; preds = %894, %892
  %895 = phi i64 [ 1, %892 ], [ %916, %894 ]
  %896 = phi i64 [ 0, %892 ], [ %917, %894 ]
  %897 = getelementptr inbounds i32, ptr %882, i64 %895
  %898 = load i32, ptr %897, align 4, !tbaa !5
  %899 = sext i32 %898 to i64
  %900 = getelementptr inbounds i8, ptr %816, i64 %899
  store i8 2, ptr %900, align 1, !tbaa !57
  %901 = add nuw nsw i64 %895, 1
  %902 = getelementptr inbounds i32, ptr %882, i64 %901
  %903 = load i32, ptr %902, align 4, !tbaa !5
  %904 = sext i32 %903 to i64
  %905 = getelementptr inbounds i8, ptr %816, i64 %904
  store i8 2, ptr %905, align 1, !tbaa !57
  %906 = add nuw nsw i64 %895, 2
  %907 = getelementptr inbounds i32, ptr %882, i64 %906
  %908 = load i32, ptr %907, align 4, !tbaa !5
  %909 = sext i32 %908 to i64
  %910 = getelementptr inbounds i8, ptr %816, i64 %909
  store i8 2, ptr %910, align 1, !tbaa !57
  %911 = add nuw nsw i64 %895, 3
  %912 = getelementptr inbounds i32, ptr %882, i64 %911
  %913 = load i32, ptr %912, align 4, !tbaa !5
  %914 = sext i32 %913 to i64
  %915 = getelementptr inbounds i8, ptr %816, i64 %914
  store i8 2, ptr %915, align 1, !tbaa !57
  %916 = add nuw nsw i64 %895, 4
  %917 = add i64 %896, 4
  %918 = icmp eq i64 %917, %893
  br i1 %918, label %919, label %894

919:                                              ; preds = %894, %885
  %920 = phi i64 [ 1, %885 ], [ %916, %894 ]
  %921 = icmp eq i64 %890, 0
  br i1 %921, label %932, label %922

922:                                              ; preds = %919, %922
  %923 = phi i64 [ %929, %922 ], [ %920, %919 ]
  %924 = phi i64 [ %930, %922 ], [ 0, %919 ]
  %925 = getelementptr inbounds i32, ptr %882, i64 %923
  %926 = load i32, ptr %925, align 4, !tbaa !5
  %927 = sext i32 %926 to i64
  %928 = getelementptr inbounds i8, ptr %816, i64 %927
  store i8 2, ptr %928, align 1, !tbaa !57
  %929 = add nuw nsw i64 %923, 1
  %930 = add i64 %924, 1
  %931 = icmp eq i64 %930, %890
  br i1 %931, label %932, label %922, !llvm.loop !270

932:                                              ; preds = %919, %922, %878, %702
  %933 = phi ptr [ %705, %702 ], [ %816, %878 ], [ %816, %922 ], [ %816, %919 ]
  %934 = phi ptr [ %658, %702 ], [ %882, %878 ], [ %882, %922 ], [ %882, %919 ]
  %935 = phi ptr [ %657, %702 ], [ %823, %878 ], [ %823, %922 ], [ %823, %919 ]
  %936 = phi ptr [ %656, %702 ], [ %816, %878 ], [ %816, %922 ], [ %816, %919 ]
  %937 = load i8, ptr %668, align 1
  %938 = and i8 %937, 7
  %939 = icmp eq i8 %938, 0
  br i1 %939, label %1233, label %940

940:                                              ; preds = %932
  %941 = load i32, ptr @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4, !tbaa !5
  %942 = icmp eq i32 %941, 0
  br i1 %942, label %946, label %943

943:                                              ; preds = %940
  %944 = load i32, ptr %667, align 4
  %945 = icmp slt i32 %944, 0
  br label %946

946:                                              ; preds = %943, %940
  %947 = phi i1 [ false, %940 ], [ %945, %943 ]
  %948 = and i8 %937, 120
  %949 = icmp eq i8 %948, 0
  br i1 %949, label %981, label %950

950:                                              ; preds = %946
  %951 = icmp slt i32 %660, %620
  br i1 %951, label %952, label %965

952:                                              ; preds = %950
  %953 = sext i32 %660 to i64
  br label %954

954:                                              ; preds = %952, %960
  %955 = phi i64 [ %953, %952 ], [ %961, %960 ]
  %956 = getelementptr inbounds i16, ptr %191, i64 %955
  %957 = load i16, ptr %956, align 2, !tbaa !44
  %958 = zext i16 %957 to i32
  %959 = icmp sgt i32 %688, %958
  br i1 %959, label %960, label %963

960:                                              ; preds = %954
  %961 = add nsw i64 %955, 1
  %962 = icmp eq i64 %961, %649
  br i1 %962, label %965, label %954

963:                                              ; preds = %954
  %964 = trunc i64 %955 to i32
  br label %965

965:                                              ; preds = %960, %963, %950
  %966 = phi i32 [ %660, %950 ], [ %964, %963 ], [ %620, %960 ]
  %967 = icmp slt i32 %661, %621
  br i1 %967, label %968, label %981

968:                                              ; preds = %965
  %969 = sext i32 %661 to i64
  br label %970

970:                                              ; preds = %968, %976
  %971 = phi i64 [ %969, %968 ], [ %977, %976 ]
  %972 = getelementptr inbounds i16, ptr %237, i64 %971
  %973 = load i16, ptr %972, align 2, !tbaa !44
  %974 = zext i16 %973 to i32
  %975 = icmp sgt i32 %688, %974
  br i1 %975, label %976, label %979

976:                                              ; preds = %970
  %977 = add nsw i64 %971, 1
  %978 = icmp eq i64 %977, %650
  br i1 %978, label %981, label %970

979:                                              ; preds = %970
  %980 = trunc i64 %971 to i32
  br label %981

981:                                              ; preds = %976, %979, %965, %946
  %982 = phi i32 [ %661, %946 ], [ %661, %965 ], [ %980, %979 ], [ %621, %976 ]
  %983 = phi i32 [ %660, %946 ], [ %966, %965 ], [ %966, %979 ], [ %966, %976 ]
  %984 = add nsw i32 %655, 1
  %985 = icmp slt i32 %984, %688
  br i1 %985, label %986, label %1051

986:                                              ; preds = %981
  %987 = xor i32 %655, -1
  %988 = add i32 %688, %987
  %989 = zext i32 %988 to i64
  %990 = icmp ult i32 %988, 8
  br i1 %990, label %1040, label %991

991:                                              ; preds = %986
  %992 = icmp ult i32 %988, 64
  br i1 %992, label %1021, label %993

993:                                              ; preds = %991
  %994 = and i64 %989, 4294967232
  %995 = trunc i32 %984 to i16
  %996 = insertelement <16 x i16> poison, i16 %995, i64 0
  %997 = shufflevector <16 x i16> %996, <16 x i16> poison, <16 x i32> zeroinitializer
  %998 = add <16 x i16> %997, <i16 0, i16 1, i16 2, i16 3, i16 4, i16 5, i16 6, i16 7, i16 8, i16 9, i16 10, i16 11, i16 12, i16 13, i16 14, i16 15>
  %999 = trunc i64 %994 to i32
  %1000 = add i32 %984, %999
  br label %1001

1001:                                             ; preds = %1001, %993
  %1002 = phi i64 [ 0, %993 ], [ %1011, %1001 ]
  %1003 = phi <16 x i16> [ %998, %993 ], [ %1012, %1001 ]
  %1004 = add <16 x i16> %1003, <i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16>
  %1005 = add <16 x i16> %1003, <i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32>
  %1006 = add <16 x i16> %1003, <i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48>
  %1007 = getelementptr inbounds i16, ptr %421, i64 %1002
  store <16 x i16> %1003, ptr %1007, align 2, !tbaa !44
  %1008 = getelementptr inbounds i16, ptr %1007, i64 16
  store <16 x i16> %1004, ptr %1008, align 2, !tbaa !44
  %1009 = getelementptr inbounds i16, ptr %1007, i64 32
  store <16 x i16> %1005, ptr %1009, align 2, !tbaa !44
  %1010 = getelementptr inbounds i16, ptr %1007, i64 48
  store <16 x i16> %1006, ptr %1010, align 2, !tbaa !44
  %1011 = add nuw i64 %1002, 64
  %1012 = add <16 x i16> %1003, <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>
  %1013 = icmp eq i64 %1011, %994
  br i1 %1013, label %1014, label %1001, !llvm.loop !271

1014:                                             ; preds = %1001
  %1015 = icmp eq i64 %994, %989
  br i1 %1015, label %1051, label %1016

1016:                                             ; preds = %1014
  %1017 = trunc i64 %994 to i32
  %1018 = add i32 %984, %1017
  %1019 = and i64 %989, 56
  %1020 = icmp eq i64 %1019, 0
  br i1 %1020, label %1040, label %1021

1021:                                             ; preds = %991, %1016
  %1022 = phi i32 [ %1000, %1016 ], [ %984, %991 ]
  %1023 = phi i64 [ %994, %1016 ], [ 0, %991 ]
  %1024 = and i64 %989, 4294967288
  %1025 = trunc i64 %1024 to i32
  %1026 = add i32 %984, %1025
  %1027 = trunc i32 %1022 to i16
  %1028 = insertelement <8 x i16> poison, i16 %1027, i64 0
  %1029 = shufflevector <8 x i16> %1028, <8 x i16> poison, <8 x i32> zeroinitializer
  %1030 = add <8 x i16> %1029, <i16 0, i16 1, i16 2, i16 3, i16 4, i16 5, i16 6, i16 7>
  br label %1031

1031:                                             ; preds = %1031, %1021
  %1032 = phi i64 [ %1023, %1021 ], [ %1035, %1031 ]
  %1033 = phi <8 x i16> [ %1030, %1021 ], [ %1036, %1031 ]
  %1034 = getelementptr inbounds i16, ptr %421, i64 %1032
  store <8 x i16> %1033, ptr %1034, align 2, !tbaa !44
  %1035 = add nuw i64 %1032, 8
  %1036 = add <8 x i16> %1033, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %1037 = icmp eq i64 %1035, %1024
  br i1 %1037, label %1038, label %1031, !llvm.loop !272

1038:                                             ; preds = %1031
  %1039 = icmp eq i64 %1024, %989
  br i1 %1039, label %1051, label %1040

1040:                                             ; preds = %986, %1016, %1038
  %1041 = phi i64 [ 0, %986 ], [ %994, %1016 ], [ %1024, %1038 ]
  %1042 = phi i32 [ %984, %986 ], [ %1018, %1016 ], [ %1026, %1038 ]
  br label %1043

1043:                                             ; preds = %1040, %1043
  %1044 = phi i64 [ %1047, %1043 ], [ %1041, %1040 ]
  %1045 = phi i32 [ %1049, %1043 ], [ %1042, %1040 ]
  %1046 = trunc i32 %1045 to i16
  %1047 = add nuw nsw i64 %1044, 1
  %1048 = getelementptr inbounds i16, ptr %421, i64 %1044
  store i16 %1046, ptr %1048, align 2, !tbaa !44
  %1049 = add nsw i32 %1045, 1
  %1050 = icmp eq i64 %1047, %989
  br i1 %1050, label %1051, label %1043, !llvm.loop !273

1051:                                             ; preds = %1043, %1014, %1038, %981
  %1052 = phi i32 [ 0, %981 ], [ %988, %1038 ], [ %988, %1014 ], [ %988, %1043 ]
  %1053 = zext i32 %1052 to i64
  %1054 = getelementptr inbounds i16, ptr %421, i64 %1053
  %1055 = select i1 %947, ptr %237, ptr %191
  %1056 = select i1 %947, i32 %982, i32 %983
  %1057 = select i1 %947, i32 %621, i32 %620
  %1058 = icmp slt i32 %1056, %1057
  br i1 %1058, label %1059, label %1218

1059:                                             ; preds = %1051
  %1060 = sub nsw i32 %1057, %1056
  %1061 = icmp sgt i32 %1060, 6
  br i1 %1061, label %1062, label %1155

1062:                                             ; preds = %1059
  %1063 = add nsw i32 %1057, -2
  %1064 = add nsw i32 %1056, 2
  %1065 = icmp slt i32 %1064, %1063
  br i1 %1065, label %1066, label %1155

1066:                                             ; preds = %1062
  %1067 = add nsw i32 %1056, 1
  %1068 = sext i32 %1067 to i64
  %1069 = getelementptr inbounds i16, ptr %1055, i64 %1068
  %1070 = load i16, ptr %1069, align 2, !tbaa !44
  %1071 = zext i16 %1070 to i64
  %1072 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %1071
  %1073 = getelementptr inbounds %class.Vector, ptr %1072, i64 0, i32 2
  %1074 = load double, ptr %1073, align 8, !tbaa !49
  %1075 = sext i32 %1056 to i64
  %1076 = getelementptr inbounds i16, ptr %1055, i64 %1075
  %1077 = load i16, ptr %1076, align 2, !tbaa !44
  %1078 = zext i16 %1077 to i64
  %1079 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %1078
  %1080 = getelementptr inbounds %class.Vector, ptr %1079, i64 0, i32 2
  %1081 = load double, ptr %1080, align 8, !tbaa !49
  %1082 = getelementptr inbounds %class.Vector, ptr %1072, i64 0, i32 1
  %1083 = load double, ptr %1082, align 8, !tbaa !66
  %1084 = getelementptr inbounds %class.Vector, ptr %1079, i64 0, i32 1
  %1085 = load double, ptr %1084, align 8, !tbaa !66
  %1086 = load double, ptr %1072, align 8, !tbaa !67
  %1087 = load double, ptr %1079, align 8, !tbaa !67
  %1088 = sext i32 %1064 to i64
  %1089 = sext i32 %1063 to i64
  %1090 = insertelement <2 x double> poison, double %1074, i64 0
  %1091 = insertelement <2 x double> %1090, double %1081, i64 1
  %1092 = insertelement <2 x double> poison, double %1083, i64 0
  %1093 = insertelement <2 x double> %1092, double %1085, i64 1
  %1094 = insertelement <2 x double> poison, double %1086, i64 0
  %1095 = insertelement <2 x double> %1094, double %1087, i64 1
  %1096 = insertelement <2 x double> poison, double %686, i64 0
  %1097 = shufflevector <2 x double> %1096, <2 x double> poison, <2 x i32> zeroinitializer
  %1098 = shufflevector <2 x double> %683, <2 x double> poison, <2 x i32> <i32 1, i32 1>
  %1099 = shufflevector <2 x double> %683, <2 x double> poison, <2 x i32> zeroinitializer
  br label %1100

1100:                                             ; preds = %1066, %1100
  %1101 = phi i64 [ %1088, %1066 ], [ %1146, %1100 ]
  %1102 = phi i32 [ %1056, %1066 ], [ %1148, %1100 ]
  %1103 = phi i32 [ 0, %1066 ], [ %1145, %1100 ]
  %1104 = phi i16 [ %1077, %1066 ], [ %1111, %1100 ]
  %1105 = phi i16 [ %1070, %1066 ], [ %1115, %1100 ]
  %1106 = phi <2 x double> [ %1091, %1066 ], [ %1150, %1100 ]
  %1107 = phi <2 x double> [ %1093, %1066 ], [ %1152, %1100 ]
  %1108 = phi <2 x double> [ %1095, %1066 ], [ %1154, %1100 ]
  %1109 = fsub <2 x double> %1097, %1106
  %1110 = getelementptr inbounds i16, ptr %1055, i64 %1101
  %1111 = load i16, ptr %1110, align 2, !tbaa !44
  %1112 = add nsw i32 %1102, 3
  %1113 = sext i32 %1112 to i64
  %1114 = getelementptr inbounds i16, ptr %1055, i64 %1113
  %1115 = load i16, ptr %1114, align 2, !tbaa !44
  %1116 = zext i16 %1111 to i64
  %1117 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %1116
  %1118 = load double, ptr %1117, align 8, !tbaa !67
  %1119 = zext i16 %1115 to i64
  %1120 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %1119
  %1121 = load double, ptr %1120, align 8, !tbaa !67
  %1122 = getelementptr inbounds %class.Vector, ptr %1117, i64 0, i32 1
  %1123 = load double, ptr %1122, align 8, !tbaa !66
  %1124 = getelementptr inbounds %class.Vector, ptr %1120, i64 0, i32 1
  %1125 = load double, ptr %1124, align 8, !tbaa !66
  %1126 = getelementptr inbounds %class.Vector, ptr %1117, i64 0, i32 2
  %1127 = load double, ptr %1126, align 8, !tbaa !49
  %1128 = getelementptr inbounds %class.Vector, ptr %1120, i64 0, i32 2
  %1129 = load double, ptr %1128, align 8, !tbaa !49
  %1130 = fsub <2 x double> %1099, %1108
  %1131 = fmul <2 x double> %1130, %1130
  %1132 = fsub <2 x double> %1098, %1107
  %1133 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %1132, <2 x double> %1132, <2 x double> %1131)
  %1134 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %1109, <2 x double> %1109, <2 x double> %1133)
  %1135 = fcmp olt <2 x double> %1134, %652
  %1136 = zext i32 %1103 to i64
  %1137 = getelementptr inbounds i16, ptr %283, i64 %1136
  store i16 %1104, ptr %1137, align 2, !tbaa !44
  %1138 = extractelement <2 x i1> %1135, i64 1
  %1139 = zext i1 %1138 to i32
  %1140 = add nuw nsw i32 %1103, %1139
  %1141 = zext i32 %1140 to i64
  %1142 = getelementptr inbounds i16, ptr %283, i64 %1141
  store i16 %1105, ptr %1142, align 2, !tbaa !44
  %1143 = extractelement <2 x i1> %1135, i64 0
  %1144 = zext i1 %1143 to i32
  %1145 = add i32 %1140, %1144
  %1146 = add nsw i64 %1101, 2
  %1147 = icmp slt i64 %1146, %1089
  %1148 = trunc i64 %1101 to i32
  %1149 = insertelement <2 x double> poison, double %1129, i64 0
  %1150 = insertelement <2 x double> %1149, double %1127, i64 1
  %1151 = insertelement <2 x double> poison, double %1125, i64 0
  %1152 = insertelement <2 x double> %1151, double %1123, i64 1
  %1153 = insertelement <2 x double> poison, double %1121, i64 0
  %1154 = insertelement <2 x double> %1153, double %1118, i64 1
  br i1 %1147, label %1100, label %1155

1155:                                             ; preds = %1100, %1062, %1059
  %1156 = phi i32 [ 0, %1059 ], [ 0, %1062 ], [ %1145, %1100 ]
  %1157 = phi i32 [ %1056, %1059 ], [ %1056, %1062 ], [ %1148, %1100 ]
  %1158 = icmp slt i32 %1157, %1057
  br i1 %1158, label %1159, label %1164

1159:                                             ; preds = %1155
  %1160 = sext i32 %1157 to i64
  %1161 = sext i32 %1057 to i64
  %1162 = extractelement <2 x double> %683, i64 0
  %1163 = extractelement <2 x double> %683, i64 1
  br label %1169

1164:                                             ; preds = %1192, %1155
  %1165 = phi i32 [ %1156, %1155 ], [ %1193, %1192 ]
  %1166 = icmp sgt i32 %1165, 0
  br i1 %1166, label %1167, label %1218

1167:                                             ; preds = %1164
  %1168 = zext i32 %1165 to i64
  br label %1196

1169:                                             ; preds = %1159, %1192
  %1170 = phi i64 [ %1160, %1159 ], [ %1194, %1192 ]
  %1171 = phi i32 [ %1156, %1159 ], [ %1193, %1192 ]
  %1172 = getelementptr inbounds i16, ptr %1055, i64 %1170
  %1173 = load i16, ptr %1172, align 2, !tbaa !44
  %1174 = zext i16 %1173 to i64
  %1175 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %1174
  %1176 = load double, ptr %1175, align 8, !tbaa !67
  %1177 = getelementptr inbounds %class.Vector, ptr %1175, i64 0, i32 1
  %1178 = load double, ptr %1177, align 8, !tbaa !66
  %1179 = getelementptr inbounds %class.Vector, ptr %1175, i64 0, i32 2
  %1180 = load double, ptr %1179, align 8, !tbaa !49
  %1181 = fsub double %1162, %1176
  %1182 = fmul double %1181, %1181
  %1183 = fsub double %1163, %1178
  %1184 = tail call double @llvm.fmuladd.f64(double %1183, double %1183, double %1182)
  %1185 = fsub double %686, %1180
  %1186 = tail call double @llvm.fmuladd.f64(double %1185, double %1185, double %1184)
  %1187 = fcmp ugt double %1186, %23
  br i1 %1187, label %1192, label %1188

1188:                                             ; preds = %1169
  %1189 = add nsw i32 %1171, 1
  %1190 = sext i32 %1171 to i64
  %1191 = getelementptr inbounds i16, ptr %283, i64 %1190
  store i16 %1173, ptr %1191, align 2, !tbaa !44
  br label %1192

1192:                                             ; preds = %1188, %1169
  %1193 = phi i32 [ %1189, %1188 ], [ %1171, %1169 ]
  %1194 = add nsw i64 %1170, 1
  %1195 = icmp eq i64 %1194, %1161
  br i1 %1195, label %1164, label %1169

1196:                                             ; preds = %1167, %1213
  %1197 = phi i64 [ 0, %1167 ], [ %1216, %1213 ]
  %1198 = phi ptr [ %1054, %1167 ], [ %1215, %1213 ]
  %1199 = getelementptr inbounds i16, ptr %283, i64 %1197
  %1200 = load i16, ptr %1199, align 2, !tbaa !44
  %1201 = zext i16 %1200 to i64
  %1202 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %1201, i32 4
  %1203 = load i8, ptr %1202, align 1
  %1204 = and i8 %1203, 7
  store i16 %1200, ptr %1198, align 2, !tbaa !44
  %1205 = getelementptr inbounds i16, ptr %1198, i64 1
  %1206 = insertelement <2 x i16> poison, i16 %1200, i64 0
  %1207 = shufflevector <2 x i16> %1206, <2 x i16> poison, <2 x i32> zeroinitializer
  %1208 = add <2 x i16> %1207, <i16 1, i16 2>
  store <2 x i16> %1208, ptr %1205, align 2, !tbaa !44
  %1209 = icmp ult i8 %1204, 4
  br i1 %1209, label %1213, label %1210

1210:                                             ; preds = %1196
  %1211 = add <2 x i16> %1207, <i16 3, i16 4>
  %1212 = getelementptr inbounds i16, ptr %1198, i64 3
  store <2 x i16> %1211, ptr %1212, align 2, !tbaa !44
  br label %1213

1213:                                             ; preds = %1210, %1196
  %1214 = zext i8 %1204 to i64
  %1215 = getelementptr inbounds i16, ptr %1198, i64 %1214
  %1216 = add nuw nsw i64 %1197, 1
  %1217 = icmp eq i64 %1216, %1168
  br i1 %1217, label %1218, label %1196

1218:                                             ; preds = %1213, %1164, %1051
  %1219 = phi ptr [ %1054, %1051 ], [ %1054, %1164 ], [ %1215, %1213 ]
  %1220 = ptrtoint ptr %1219 to i64
  %1221 = sub i64 %1220, %640
  %1222 = lshr exact i64 %1221, 1
  %1223 = trunc i64 %1222 to i32
  %1224 = icmp eq i32 %1223, 0
  br i1 %1224, label %1236, label %1225

1225:                                             ; preds = %1218
  %1226 = shl i64 %1221, 31
  %1227 = add i64 %1226, -4294967296
  %1228 = ashr i64 %1227, 32
  %1229 = getelementptr inbounds i16, ptr %421, i64 %1228
  %1230 = load i16, ptr %1229, align 2, !tbaa !44
  %1231 = ashr i64 %1226, 32
  %1232 = getelementptr inbounds i16, ptr %421, i64 %1231
  store i16 %1230, ptr %1232, align 2, !tbaa !44
  br label %1236

1233:                                             ; preds = %932
  %1234 = add nsw i32 %663, 1
  %1235 = load i32, ptr @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4, !tbaa !5
  br label %1236

1236:                                             ; preds = %1218, %1225, %1233
  %1237 = phi i32 [ %1235, %1233 ], [ %941, %1225 ], [ %941, %1218 ]
  %1238 = phi i32 [ %1234, %1233 ], [ 0, %1225 ], [ 0, %1218 ]
  %1239 = phi i32 [ %662, %1233 ], [ %1223, %1225 ], [ 0, %1218 ]
  %1240 = phi i32 [ %661, %1233 ], [ %982, %1225 ], [ %982, %1218 ]
  %1241 = phi i32 [ %660, %1233 ], [ %983, %1225 ], [ %983, %1218 ]
  %1242 = icmp eq i32 %1237, 0
  br i1 %1242, label %1247, label %1243

1243:                                             ; preds = %1236
  %1244 = load i32, ptr %667, align 4
  %1245 = and i32 %1244, 1073741824
  %1246 = icmp ne i32 %1245, 0
  br label %1247

1247:                                             ; preds = %1243, %1236
  %1248 = phi i1 [ false, %1236 ], [ %1246, %1243 ]
  %1249 = load i32, ptr %13, align 8, !tbaa !17
  %1250 = add nsw i32 %641, %1249
  %1251 = load i32, ptr %642, align 4, !tbaa !68
  %1252 = icmp sgt i32 %1251, %1250
  br i1 %1252, label %1268, label %1253

1253:                                             ; preds = %1247, %1253
  %1254 = phi i32 [ %1256, %1253 ], [ %1251, %1247 ]
  %1255 = ashr i32 %1254, 1
  %1256 = add nsw i32 %1255, %1254
  %1257 = icmp sgt i32 %1256, %1250
  br i1 %1257, label %1258, label %1253

1258:                                             ; preds = %1253
  %1259 = sext i32 %1256 to i64
  %1260 = icmp slt i32 %1256, 0
  %1261 = shl nsw i64 %1259, 1
  %1262 = select i1 %1260, i64 -1, i64 %1261
  %1263 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %1262) #9
  %1264 = load ptr, ptr %8, align 8, !tbaa !46
  %1265 = sext i32 %1249 to i64
  %1266 = shl nsw i64 %1265, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 2 %1263, ptr align 2 %1264, i64 %1266, i1 false)
  %1267 = icmp eq ptr %1264, null
  br i1 %1267, label %1272, label %1270

1268:                                             ; preds = %1247
  %1269 = load ptr, ptr %8, align 8, !tbaa !46
  br label %1274

1270:                                             ; preds = %1258
  tail call void @_ZdaPv(ptr noundef nonnull %1264) #10
  %1271 = load i32, ptr %13, align 8, !tbaa !17
  br label %1272

1272:                                             ; preds = %1270, %1258
  %1273 = phi i32 [ %1271, %1270 ], [ %1249, %1258 ]
  store ptr %1263, ptr %8, align 8, !tbaa !46
  store i32 %1256, ptr %642, align 4, !tbaa !68
  br label %1274

1274:                                             ; preds = %1268, %1272
  %1275 = phi i32 [ %1249, %1268 ], [ %1273, %1272 ]
  %1276 = phi ptr [ %1269, %1268 ], [ %1263, %1272 ]
  %1277 = ptrtoint ptr %1276 to i64
  %1278 = add nsw i32 %1275, 1
  %1279 = sext i32 %1278 to i64
  %1280 = getelementptr inbounds i16, ptr %1276, i64 %1279
  %1281 = icmp slt i32 %1238, %1239
  br i1 %1248, label %1282, label %1330

1282:                                             ; preds = %1274
  br i1 %1281, label %1283, label %1501

1283:                                             ; preds = %1282
  %1284 = sext i32 %1238 to i64
  %1285 = sext i32 %1239 to i64
  %1286 = extractelement <2 x double> %683, i64 0
  %1287 = extractelement <2 x double> %683, i64 1
  br label %1288

1288:                                             ; preds = %1283, %1325
  %1289 = phi i64 [ %1284, %1283 ], [ %1328, %1325 ]
  %1290 = phi ptr [ %467, %1283 ], [ %1327, %1325 ]
  %1291 = phi ptr [ %1280, %1283 ], [ %1326, %1325 ]
  %1292 = getelementptr inbounds i16, ptr %421, i64 %1289
  %1293 = load i16, ptr %1292, align 2, !tbaa !44
  %1294 = zext i16 %1293 to i64
  %1295 = getelementptr inbounds %struct.CompAtomExt, ptr %45, i64 %1294
  %1296 = load i32, ptr %1295, align 4
  %1297 = and i32 %1296, 1073741824
  %1298 = icmp eq i32 %1297, 0
  br i1 %1298, label %1299, label %1325

1299:                                             ; preds = %1288
  %1300 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %1294
  %1301 = getelementptr inbounds %class.Vector, ptr %1300, i64 0, i32 2
  %1302 = load double, ptr %1301, align 8, !tbaa !49
  %1303 = fsub double %686, %1302
  %1304 = getelementptr inbounds %class.Vector, ptr %1300, i64 0, i32 1
  %1305 = load double, ptr %1304, align 8, !tbaa !66
  %1306 = fsub double %1287, %1305
  %1307 = load double, ptr %1300, align 8, !tbaa !67
  %1308 = fsub double %1286, %1307
  %1309 = fmul double %1308, %1308
  %1310 = tail call double @llvm.fmuladd.f64(double %1306, double %1306, double %1309)
  %1311 = tail call double @llvm.fmuladd.f64(double %1303, double %1303, double %1310)
  %1312 = fcmp ugt double %1311, %20
  br i1 %1312, label %1325, label %1313

1313:                                             ; preds = %1299
  %1314 = shl i32 %1296, 2
  %1315 = ashr exact i32 %1314, 2
  %1316 = icmp slt i32 %1315, %696
  %1317 = icmp sgt i32 %1315, %698
  %1318 = select i1 %1316, i1 true, i1 %1317
  %1319 = select i1 %1318, ptr %1291, ptr %1290
  %1320 = zext i1 %1318 to i64
  %1321 = getelementptr inbounds i16, ptr %1291, i64 %1320
  %1322 = xor i1 %1318, true
  %1323 = zext i1 %1322 to i64
  %1324 = getelementptr inbounds i16, ptr %1290, i64 %1323
  store i16 %1293, ptr %1319, align 2, !tbaa !44
  br label %1325

1325:                                             ; preds = %1313, %1299, %1288
  %1326 = phi ptr [ %1291, %1288 ], [ %1291, %1299 ], [ %1321, %1313 ]
  %1327 = phi ptr [ %1290, %1288 ], [ %1290, %1299 ], [ %1324, %1313 ]
  %1328 = add nsw i64 %1289, 1
  %1329 = icmp eq i64 %1328, %1285
  br i1 %1329, label %1501, label %1288

1330:                                             ; preds = %1274
  br i1 %1281, label %1331, label %1501

1331:                                             ; preds = %1330
  %1332 = sub nsw i32 %1239, %1238
  %1333 = icmp sgt i32 %1332, 6
  br i1 %1333, label %1334, label %1452

1334:                                             ; preds = %1331
  %1335 = add nsw i32 %1239, -2
  %1336 = add nsw i32 %1238, 2
  %1337 = icmp slt i32 %1336, %1335
  br i1 %1337, label %1338, label %1452

1338:                                             ; preds = %1334
  %1339 = sext i32 %1238 to i64
  %1340 = getelementptr inbounds i16, ptr %421, i64 %1339
  %1341 = load i16, ptr %1340, align 2, !tbaa !44
  %1342 = zext i16 %1341 to i64
  %1343 = getelementptr inbounds %struct.CompAtomExt, ptr %45, i64 %1342
  %1344 = load i32, ptr %1343, align 4
  %1345 = add nsw i32 %1238, 1
  %1346 = sext i32 %1345 to i64
  %1347 = getelementptr inbounds i16, ptr %421, i64 %1346
  %1348 = load i16, ptr %1347, align 2, !tbaa !44
  %1349 = zext i16 %1348 to i64
  %1350 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %1349
  %1351 = getelementptr inbounds %class.Vector, ptr %1350, i64 0, i32 2
  %1352 = load double, ptr %1351, align 8, !tbaa !49
  %1353 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %1342
  %1354 = getelementptr inbounds %class.Vector, ptr %1353, i64 0, i32 2
  %1355 = load double, ptr %1354, align 8, !tbaa !49
  %1356 = getelementptr inbounds %class.Vector, ptr %1350, i64 0, i32 1
  %1357 = load double, ptr %1356, align 8, !tbaa !66
  %1358 = getelementptr inbounds %class.Vector, ptr %1353, i64 0, i32 1
  %1359 = load double, ptr %1358, align 8, !tbaa !66
  %1360 = load double, ptr %1350, align 8, !tbaa !67
  %1361 = load double, ptr %1353, align 8, !tbaa !67
  %1362 = sext i32 %1336 to i64
  %1363 = sext i32 %1335 to i64
  %1364 = extractelement <2 x double> %683, i64 0
  %1365 = extractelement <2 x double> %683, i64 1
  br label %1366

1366:                                             ; preds = %1338, %1446
  %1367 = phi i64 [ %1362, %1338 ], [ %1449, %1446 ]
  %1368 = phi i64 [ %1349, %1338 ], [ %1406, %1446 ]
  %1369 = phi i32 [ %1344, %1338 ], [ %1434, %1446 ]
  %1370 = phi ptr [ %467, %1338 ], [ %1448, %1446 ]
  %1371 = phi ptr [ %1280, %1338 ], [ %1447, %1446 ]
  %1372 = phi i32 [ %1238, %1338 ], [ %1451, %1446 ]
  %1373 = phi i16 [ %1341, %1338 ], [ %1398, %1446 ]
  %1374 = phi i16 [ %1348, %1338 ], [ %1402, %1446 ]
  %1375 = phi double [ %1361, %1338 ], [ %1405, %1446 ]
  %1376 = phi double [ %1360, %1338 ], [ %1408, %1446 ]
  %1377 = phi double [ %1359, %1338 ], [ %1410, %1446 ]
  %1378 = phi double [ %1357, %1338 ], [ %1412, %1446 ]
  %1379 = phi double [ %1355, %1338 ], [ %1414, %1446 ]
  %1380 = phi double [ %1352, %1338 ], [ %1416, %1446 ]
  %1381 = getelementptr inbounds %struct.CompAtomExt, ptr %45, i64 %1368
  %1382 = load i32, ptr %1381, align 4
  %1383 = shl i32 %1382, 2
  %1384 = ashr exact i32 %1383, 2
  %1385 = fsub double %1364, %1375
  %1386 = fsub double %1364, %1376
  %1387 = fmul double %1385, %1385
  %1388 = fmul double %1386, %1386
  %1389 = fsub double %1365, %1377
  %1390 = fsub double %1365, %1378
  %1391 = tail call double @llvm.fmuladd.f64(double %1389, double %1389, double %1387)
  %1392 = tail call double @llvm.fmuladd.f64(double %1390, double %1390, double %1388)
  %1393 = fsub double %686, %1379
  %1394 = fsub double %686, %1380
  %1395 = tail call double @llvm.fmuladd.f64(double %1393, double %1393, double %1391)
  %1396 = tail call double @llvm.fmuladd.f64(double %1394, double %1394, double %1392)
  %1397 = getelementptr inbounds i16, ptr %421, i64 %1367
  %1398 = load i16, ptr %1397, align 2, !tbaa !44
  %1399 = add nsw i32 %1372, 3
  %1400 = sext i32 %1399 to i64
  %1401 = getelementptr inbounds i16, ptr %421, i64 %1400
  %1402 = load i16, ptr %1401, align 2, !tbaa !44
  %1403 = zext i16 %1398 to i64
  %1404 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %1403
  %1405 = load double, ptr %1404, align 8, !tbaa !67
  %1406 = zext i16 %1402 to i64
  %1407 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %1406
  %1408 = load double, ptr %1407, align 8, !tbaa !67
  %1409 = getelementptr inbounds %class.Vector, ptr %1404, i64 0, i32 1
  %1410 = load double, ptr %1409, align 8, !tbaa !66
  %1411 = getelementptr inbounds %class.Vector, ptr %1407, i64 0, i32 1
  %1412 = load double, ptr %1411, align 8, !tbaa !66
  %1413 = getelementptr inbounds %class.Vector, ptr %1404, i64 0, i32 2
  %1414 = load double, ptr %1413, align 8, !tbaa !49
  %1415 = getelementptr inbounds %class.Vector, ptr %1407, i64 0, i32 2
  %1416 = load double, ptr %1415, align 8, !tbaa !49
  %1417 = fcmp ugt double %1395, %20
  br i1 %1417, label %1430, label %1418

1418:                                             ; preds = %1366
  %1419 = shl i32 %1369, 2
  %1420 = ashr exact i32 %1419, 2
  %1421 = icmp slt i32 %1420, %696
  %1422 = icmp sgt i32 %1420, %698
  %1423 = select i1 %1421, i1 true, i1 %1422
  %1424 = select i1 %1423, ptr %1371, ptr %1370
  %1425 = zext i1 %1423 to i64
  %1426 = getelementptr inbounds i16, ptr %1371, i64 %1425
  %1427 = xor i1 %1423, true
  %1428 = zext i1 %1427 to i64
  %1429 = getelementptr inbounds i16, ptr %1370, i64 %1428
  store i16 %1373, ptr %1424, align 2, !tbaa !44
  br label %1430

1430:                                             ; preds = %1418, %1366
  %1431 = phi ptr [ %1371, %1366 ], [ %1426, %1418 ]
  %1432 = phi ptr [ %1370, %1366 ], [ %1429, %1418 ]
  %1433 = getelementptr inbounds %struct.CompAtomExt, ptr %45, i64 %1403
  %1434 = load i32, ptr %1433, align 4
  %1435 = fcmp ugt double %1396, %20
  br i1 %1435, label %1446, label %1436

1436:                                             ; preds = %1430
  %1437 = icmp slt i32 %1384, %696
  %1438 = icmp sgt i32 %1384, %698
  %1439 = select i1 %1437, i1 true, i1 %1438
  %1440 = select i1 %1439, ptr %1431, ptr %1432
  %1441 = zext i1 %1439 to i64
  %1442 = getelementptr inbounds i16, ptr %1431, i64 %1441
  %1443 = xor i1 %1439, true
  %1444 = zext i1 %1443 to i64
  %1445 = getelementptr inbounds i16, ptr %1432, i64 %1444
  store i16 %1374, ptr %1440, align 2, !tbaa !44
  br label %1446

1446:                                             ; preds = %1436, %1430
  %1447 = phi ptr [ %1431, %1430 ], [ %1442, %1436 ]
  %1448 = phi ptr [ %1432, %1430 ], [ %1445, %1436 ]
  %1449 = add nsw i64 %1367, 2
  %1450 = icmp slt i64 %1449, %1363
  %1451 = trunc i64 %1367 to i32
  br i1 %1450, label %1366, label %1452

1452:                                             ; preds = %1446, %1334, %1331
  %1453 = phi i32 [ %1238, %1331 ], [ %1238, %1334 ], [ %1451, %1446 ]
  %1454 = phi ptr [ %1280, %1331 ], [ %1280, %1334 ], [ %1447, %1446 ]
  %1455 = phi ptr [ %467, %1331 ], [ %467, %1334 ], [ %1448, %1446 ]
  %1456 = icmp slt i32 %1453, %1239
  br i1 %1456, label %1457, label %1501

1457:                                             ; preds = %1452
  %1458 = sext i32 %1453 to i64
  %1459 = sext i32 %1239 to i64
  %1460 = extractelement <2 x double> %683, i64 0
  %1461 = extractelement <2 x double> %683, i64 1
  br label %1462

1462:                                             ; preds = %1457, %1496
  %1463 = phi i64 [ %1458, %1457 ], [ %1499, %1496 ]
  %1464 = phi ptr [ %1455, %1457 ], [ %1498, %1496 ]
  %1465 = phi ptr [ %1454, %1457 ], [ %1497, %1496 ]
  %1466 = getelementptr inbounds i16, ptr %421, i64 %1463
  %1467 = load i16, ptr %1466, align 2, !tbaa !44
  %1468 = zext i16 %1467 to i64
  %1469 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %1468
  %1470 = load double, ptr %1469, align 8, !tbaa !67
  %1471 = getelementptr inbounds %class.Vector, ptr %1469, i64 0, i32 1
  %1472 = load double, ptr %1471, align 8, !tbaa !66
  %1473 = getelementptr inbounds %class.Vector, ptr %1469, i64 0, i32 2
  %1474 = load double, ptr %1473, align 8, !tbaa !49
  %1475 = fsub double %1460, %1470
  %1476 = fmul double %1475, %1475
  %1477 = fsub double %1461, %1472
  %1478 = tail call double @llvm.fmuladd.f64(double %1477, double %1477, double %1476)
  %1479 = fsub double %686, %1474
  %1480 = tail call double @llvm.fmuladd.f64(double %1479, double %1479, double %1478)
  %1481 = fcmp ugt double %1480, %20
  br i1 %1481, label %1496, label %1482

1482:                                             ; preds = %1462
  %1483 = getelementptr inbounds %struct.CompAtomExt, ptr %45, i64 %1468
  %1484 = load i32, ptr %1483, align 4
  %1485 = shl i32 %1484, 2
  %1486 = ashr exact i32 %1485, 2
  %1487 = icmp slt i32 %1486, %696
  %1488 = icmp sgt i32 %1486, %698
  %1489 = select i1 %1487, i1 true, i1 %1488
  %1490 = select i1 %1489, ptr %1465, ptr %1464
  %1491 = zext i1 %1489 to i64
  %1492 = getelementptr inbounds i16, ptr %1465, i64 %1491
  %1493 = xor i1 %1489, true
  %1494 = zext i1 %1493 to i64
  %1495 = getelementptr inbounds i16, ptr %1464, i64 %1494
  store i16 %1467, ptr %1490, align 2, !tbaa !44
  br label %1496

1496:                                             ; preds = %1482, %1462
  %1497 = phi ptr [ %1465, %1462 ], [ %1492, %1482 ]
  %1498 = phi ptr [ %1464, %1462 ], [ %1495, %1482 ]
  %1499 = add nsw i64 %1463, 1
  %1500 = icmp eq i64 %1499, %1459
  br i1 %1500, label %1501, label %1462

1501:                                             ; preds = %1496, %1325, %1452, %1282, %1330
  %1502 = phi ptr [ %1280, %1330 ], [ %1280, %1282 ], [ %1454, %1452 ], [ %1326, %1325 ], [ %1497, %1496 ]
  %1503 = phi ptr [ %467, %1330 ], [ %467, %1282 ], [ %1455, %1452 ], [ %1327, %1325 ], [ %1498, %1496 ]
  %1504 = ptrtoint ptr %1503 to i64
  %1505 = sub i64 %1504, %643
  %1506 = lshr exact i64 %1505, 1
  %1507 = trunc i64 %1506 to i32
  %1508 = icmp sgt i32 %1507, 0
  br i1 %1508, label %1509, label %1609

1509:                                             ; preds = %1501
  %1510 = and i64 %1506, 4294967295
  %1511 = and i64 %1506, 1
  %1512 = icmp eq i64 %1510, 1
  br i1 %1512, label %1577, label %1513

1513:                                             ; preds = %1509
  %1514 = sub nsw i64 %1510, %1511
  br label %1515

1515:                                             ; preds = %1570, %1513
  %1516 = phi i64 [ 0, %1513 ], [ %1574, %1570 ]
  %1517 = phi ptr [ %1502, %1513 ], [ %1573, %1570 ]
  %1518 = phi ptr [ %329, %1513 ], [ %1572, %1570 ]
  %1519 = phi ptr [ %375, %1513 ], [ %1571, %1570 ]
  %1520 = phi i64 [ 0, %1513 ], [ %1575, %1570 ]
  %1521 = getelementptr inbounds i16, ptr %467, i64 %1516
  %1522 = load i16, ptr %1521, align 2, !tbaa !44
  %1523 = zext i16 %1522 to i64
  %1524 = getelementptr inbounds %struct.CompAtomExt, ptr %45, i64 %1523
  %1525 = load i32, ptr %1524, align 4
  %1526 = shl i32 %1525, 2
  %1527 = ashr exact i32 %1526, 2
  %1528 = sext i32 %1527 to i64
  %1529 = getelementptr inbounds i8, ptr %933, i64 %1528
  %1530 = load i8, ptr %1529, align 1, !tbaa !57
  %1531 = sext i8 %1530 to i32
  switch i32 %1531, label %1543 [
    i32 0, label %1532
    i32 1, label %1534
    i32 2, label %1536
  ]

1532:                                             ; preds = %1515
  %1533 = getelementptr inbounds i16, ptr %1517, i64 1
  br label %1538

1534:                                             ; preds = %1515
  %1535 = getelementptr inbounds i16, ptr %1518, i64 1
  br label %1538

1536:                                             ; preds = %1515
  %1537 = getelementptr inbounds i16, ptr %1519, i64 1
  br label %1538

1538:                                             ; preds = %1532, %1534, %1536
  %1539 = phi ptr [ %1519, %1536 ], [ %1518, %1534 ], [ %1517, %1532 ]
  %1540 = phi ptr [ %1537, %1536 ], [ %1519, %1534 ], [ %1519, %1532 ]
  %1541 = phi ptr [ %1518, %1536 ], [ %1535, %1534 ], [ %1518, %1532 ]
  %1542 = phi ptr [ %1517, %1536 ], [ %1517, %1534 ], [ %1533, %1532 ]
  store i16 %1522, ptr %1539, align 2, !tbaa !44
  br label %1543

1543:                                             ; preds = %1538, %1515
  %1544 = phi ptr [ %1519, %1515 ], [ %1540, %1538 ]
  %1545 = phi ptr [ %1518, %1515 ], [ %1541, %1538 ]
  %1546 = phi ptr [ %1517, %1515 ], [ %1542, %1538 ]
  %1547 = or i64 %1516, 1
  %1548 = getelementptr inbounds i16, ptr %467, i64 %1547
  %1549 = load i16, ptr %1548, align 2, !tbaa !44
  %1550 = zext i16 %1549 to i64
  %1551 = getelementptr inbounds %struct.CompAtomExt, ptr %45, i64 %1550
  %1552 = load i32, ptr %1551, align 4
  %1553 = shl i32 %1552, 2
  %1554 = ashr exact i32 %1553, 2
  %1555 = sext i32 %1554 to i64
  %1556 = getelementptr inbounds i8, ptr %933, i64 %1555
  %1557 = load i8, ptr %1556, align 1, !tbaa !57
  %1558 = sext i8 %1557 to i32
  switch i32 %1558, label %1570 [
    i32 0, label %1563
    i32 1, label %1561
    i32 2, label %1559
  ]

1559:                                             ; preds = %1543
  %1560 = getelementptr inbounds i16, ptr %1544, i64 1
  br label %1565

1561:                                             ; preds = %1543
  %1562 = getelementptr inbounds i16, ptr %1545, i64 1
  br label %1565

1563:                                             ; preds = %1543
  %1564 = getelementptr inbounds i16, ptr %1546, i64 1
  br label %1565

1565:                                             ; preds = %1563, %1561, %1559
  %1566 = phi ptr [ %1544, %1559 ], [ %1545, %1561 ], [ %1546, %1563 ]
  %1567 = phi ptr [ %1560, %1559 ], [ %1544, %1561 ], [ %1544, %1563 ]
  %1568 = phi ptr [ %1545, %1559 ], [ %1562, %1561 ], [ %1545, %1563 ]
  %1569 = phi ptr [ %1546, %1559 ], [ %1546, %1561 ], [ %1564, %1563 ]
  store i16 %1549, ptr %1566, align 2, !tbaa !44
  br label %1570

1570:                                             ; preds = %1565, %1543
  %1571 = phi ptr [ %1544, %1543 ], [ %1567, %1565 ]
  %1572 = phi ptr [ %1545, %1543 ], [ %1568, %1565 ]
  %1573 = phi ptr [ %1546, %1543 ], [ %1569, %1565 ]
  %1574 = add nuw nsw i64 %1516, 2
  %1575 = add i64 %1520, 2
  %1576 = icmp eq i64 %1575, %1514
  br i1 %1576, label %1577, label %1515

1577:                                             ; preds = %1570, %1509
  %1578 = phi ptr [ undef, %1509 ], [ %1571, %1570 ]
  %1579 = phi ptr [ undef, %1509 ], [ %1572, %1570 ]
  %1580 = phi ptr [ undef, %1509 ], [ %1573, %1570 ]
  %1581 = phi i64 [ 0, %1509 ], [ %1574, %1570 ]
  %1582 = phi ptr [ %1502, %1509 ], [ %1573, %1570 ]
  %1583 = phi ptr [ %329, %1509 ], [ %1572, %1570 ]
  %1584 = phi ptr [ %375, %1509 ], [ %1571, %1570 ]
  %1585 = icmp eq i64 %1511, 0
  br i1 %1585, label %1609, label %1586

1586:                                             ; preds = %1577
  %1587 = getelementptr inbounds i16, ptr %467, i64 %1581
  %1588 = load i16, ptr %1587, align 2, !tbaa !44
  %1589 = zext i16 %1588 to i64
  %1590 = getelementptr inbounds %struct.CompAtomExt, ptr %45, i64 %1589
  %1591 = load i32, ptr %1590, align 4
  %1592 = shl i32 %1591, 2
  %1593 = ashr exact i32 %1592, 2
  %1594 = sext i32 %1593 to i64
  %1595 = getelementptr inbounds i8, ptr %933, i64 %1594
  %1596 = load i8, ptr %1595, align 1, !tbaa !57
  %1597 = sext i8 %1596 to i32
  switch i32 %1597, label %1609 [
    i32 0, label %1602
    i32 1, label %1600
    i32 2, label %1598
  ]

1598:                                             ; preds = %1586
  %1599 = getelementptr inbounds i16, ptr %1584, i64 1
  br label %1604

1600:                                             ; preds = %1586
  %1601 = getelementptr inbounds i16, ptr %1583, i64 1
  br label %1604

1602:                                             ; preds = %1586
  %1603 = getelementptr inbounds i16, ptr %1582, i64 1
  br label %1604

1604:                                             ; preds = %1602, %1600, %1598
  %1605 = phi ptr [ %1584, %1598 ], [ %1583, %1600 ], [ %1582, %1602 ]
  %1606 = phi ptr [ %1599, %1598 ], [ %1584, %1600 ], [ %1584, %1602 ]
  %1607 = phi ptr [ %1583, %1598 ], [ %1601, %1600 ], [ %1583, %1602 ]
  %1608 = phi ptr [ %1582, %1598 ], [ %1582, %1600 ], [ %1603, %1602 ]
  store i16 %1588, ptr %1605, align 2, !tbaa !44
  br label %1609

1609:                                             ; preds = %1577, %1604, %1586, %1501
  %1610 = phi ptr [ %375, %1501 ], [ %1578, %1577 ], [ %1584, %1586 ], [ %1606, %1604 ]
  %1611 = phi ptr [ %329, %1501 ], [ %1579, %1577 ], [ %1583, %1586 ], [ %1607, %1604 ]
  %1612 = phi ptr [ %1502, %1501 ], [ %1580, %1577 ], [ %1582, %1586 ], [ %1608, %1604 ]
  %1613 = ptrtoint ptr %1612 to i64
  %1614 = ptrtoint ptr %1280 to i64
  %1615 = sub i64 %1613, %1614
  %1616 = lshr exact i64 %1615, 1
  %1617 = trunc i64 %1616 to i32
  %1618 = icmp eq i32 %1617, 0
  %1619 = shl i64 %1615, 31
  br i1 %1618, label %1625, label %1620

1620:                                             ; preds = %1609
  %1621 = add i64 %1619, -4294967296
  %1622 = ashr i64 %1621, 32
  %1623 = getelementptr inbounds i16, ptr %1280, i64 %1622
  %1624 = load i16, ptr %1623, align 2, !tbaa !44
  br label %1625

1625:                                             ; preds = %1609, %1620
  %1626 = phi i16 [ %1624, %1620 ], [ -1, %1609 ]
  %1627 = ashr i64 %1619, 32
  %1628 = getelementptr inbounds i16, ptr %1280, i64 %1627
  store i16 %1626, ptr %1628, align 2, !tbaa !44
  %1629 = trunc i64 %1616 to i16
  %1630 = add i16 %1629, 1
  %1631 = load i32, ptr %13, align 8, !tbaa !17
  %1632 = sext i32 %1631 to i64
  %1633 = getelementptr inbounds i16, ptr %1276, i64 %1632
  store i16 %1630, ptr %1633, align 2, !tbaa !44
  %1634 = add nsw i32 %1617, 2
  %1635 = add nsw i32 %1634, %1631
  %1636 = ptrtoint ptr %1611 to i64
  %1637 = sub i64 %1636, %644
  %1638 = lshr exact i64 %1637, 1
  %1639 = trunc i64 %1638 to i32
  %1640 = add nsw i32 %1635, 1
  %1641 = sext i32 %1640 to i64
  %1642 = getelementptr i16, ptr %1276, i64 %1641
  %1643 = icmp sgt i32 %1639, 0
  br i1 %1643, label %1644, label %1734

1644:                                             ; preds = %1625
  %1645 = and i64 %1638, 4294967295
  %1646 = icmp ult i64 %1645, 8
  br i1 %1646, label %1690, label %1647

1647:                                             ; preds = %1644
  %1648 = shl nsw i64 %1641, 1
  %1649 = add i64 %1648, %1277
  %1650 = sub i64 %1649, %644
  %1651 = icmp ult i64 %1650, 128
  br i1 %1651, label %1690, label %1652

1652:                                             ; preds = %1647
  %1653 = icmp ult i64 %1645, 64
  br i1 %1653, label %1677, label %1654

1654:                                             ; preds = %1652
  %1655 = and i64 %1638, 63
  %1656 = sub nsw i64 %1645, %1655
  br label %1657

1657:                                             ; preds = %1657, %1654
  %1658 = phi i64 [ 0, %1654 ], [ %1671, %1657 ]
  %1659 = getelementptr inbounds i16, ptr %329, i64 %1658
  %1660 = load <16 x i16>, ptr %1659, align 2, !tbaa !44
  %1661 = getelementptr inbounds i16, ptr %1659, i64 16
  %1662 = load <16 x i16>, ptr %1661, align 2, !tbaa !44
  %1663 = getelementptr inbounds i16, ptr %1659, i64 32
  %1664 = load <16 x i16>, ptr %1663, align 2, !tbaa !44
  %1665 = getelementptr inbounds i16, ptr %1659, i64 48
  %1666 = load <16 x i16>, ptr %1665, align 2, !tbaa !44
  %1667 = getelementptr inbounds i16, ptr %1642, i64 %1658
  store <16 x i16> %1660, ptr %1667, align 2, !tbaa !44
  %1668 = getelementptr inbounds i16, ptr %1667, i64 16
  store <16 x i16> %1662, ptr %1668, align 2, !tbaa !44
  %1669 = getelementptr inbounds i16, ptr %1667, i64 32
  store <16 x i16> %1664, ptr %1669, align 2, !tbaa !44
  %1670 = getelementptr inbounds i16, ptr %1667, i64 48
  store <16 x i16> %1666, ptr %1670, align 2, !tbaa !44
  %1671 = add nuw i64 %1658, 64
  %1672 = icmp eq i64 %1671, %1656
  br i1 %1672, label %1673, label %1657, !llvm.loop !274

1673:                                             ; preds = %1657
  %1674 = icmp eq i64 %1655, 0
  br i1 %1674, label %1728, label %1675

1675:                                             ; preds = %1673
  %1676 = icmp ult i64 %1655, 8
  br i1 %1676, label %1690, label %1677

1677:                                             ; preds = %1652, %1675
  %1678 = phi i64 [ %1656, %1675 ], [ 0, %1652 ]
  %1679 = and i64 %1638, 7
  %1680 = sub nsw i64 %1645, %1679
  br label %1681

1681:                                             ; preds = %1681, %1677
  %1682 = phi i64 [ %1678, %1677 ], [ %1686, %1681 ]
  %1683 = getelementptr inbounds i16, ptr %329, i64 %1682
  %1684 = load <8 x i16>, ptr %1683, align 2, !tbaa !44
  %1685 = getelementptr inbounds i16, ptr %1642, i64 %1682
  store <8 x i16> %1684, ptr %1685, align 2, !tbaa !44
  %1686 = add nuw i64 %1682, 8
  %1687 = icmp eq i64 %1686, %1680
  br i1 %1687, label %1688, label %1681, !llvm.loop !275

1688:                                             ; preds = %1681
  %1689 = icmp eq i64 %1679, 0
  br i1 %1689, label %1728, label %1690

1690:                                             ; preds = %1647, %1644, %1675, %1688
  %1691 = phi i64 [ 0, %1644 ], [ 0, %1647 ], [ %1656, %1675 ], [ %1680, %1688 ]
  %1692 = sub i64 %1638, %1691
  %1693 = xor i64 %1691, -1
  %1694 = add nsw i64 %1645, %1693
  %1695 = and i64 %1692, 3
  %1696 = icmp eq i64 %1695, 0
  br i1 %1696, label %1706, label %1697

1697:                                             ; preds = %1690, %1697
  %1698 = phi i64 [ %1703, %1697 ], [ %1691, %1690 ]
  %1699 = phi i64 [ %1704, %1697 ], [ 0, %1690 ]
  %1700 = getelementptr inbounds i16, ptr %329, i64 %1698
  %1701 = load i16, ptr %1700, align 2, !tbaa !44
  %1702 = getelementptr inbounds i16, ptr %1642, i64 %1698
  store i16 %1701, ptr %1702, align 2, !tbaa !44
  %1703 = add nuw nsw i64 %1698, 1
  %1704 = add i64 %1699, 1
  %1705 = icmp eq i64 %1704, %1695
  br i1 %1705, label %1706, label %1697, !llvm.loop !276

1706:                                             ; preds = %1697, %1690
  %1707 = phi i64 [ %1691, %1690 ], [ %1703, %1697 ]
  %1708 = icmp ult i64 %1694, 3
  br i1 %1708, label %1728, label %1709

1709:                                             ; preds = %1706, %1709
  %1710 = phi i64 [ %1726, %1709 ], [ %1707, %1706 ]
  %1711 = getelementptr inbounds i16, ptr %329, i64 %1710
  %1712 = load i16, ptr %1711, align 2, !tbaa !44
  %1713 = getelementptr inbounds i16, ptr %1642, i64 %1710
  store i16 %1712, ptr %1713, align 2, !tbaa !44
  %1714 = add nuw nsw i64 %1710, 1
  %1715 = getelementptr inbounds i16, ptr %329, i64 %1714
  %1716 = load i16, ptr %1715, align 2, !tbaa !44
  %1717 = getelementptr inbounds i16, ptr %1642, i64 %1714
  store i16 %1716, ptr %1717, align 2, !tbaa !44
  %1718 = add nuw nsw i64 %1710, 2
  %1719 = getelementptr inbounds i16, ptr %329, i64 %1718
  %1720 = load i16, ptr %1719, align 2, !tbaa !44
  %1721 = getelementptr inbounds i16, ptr %1642, i64 %1718
  store i16 %1720, ptr %1721, align 2, !tbaa !44
  %1722 = add nuw nsw i64 %1710, 3
  %1723 = getelementptr inbounds i16, ptr %329, i64 %1722
  %1724 = load i16, ptr %1723, align 2, !tbaa !44
  %1725 = getelementptr inbounds i16, ptr %1642, i64 %1722
  store i16 %1724, ptr %1725, align 2, !tbaa !44
  %1726 = add nuw nsw i64 %1710, 4
  %1727 = icmp eq i64 %1726, %1645
  br i1 %1727, label %1728, label %1709, !llvm.loop !277

1728:                                             ; preds = %1706, %1709, %1673, %1688
  %1729 = shl i64 %1637, 31
  %1730 = add i64 %1729, -4294967296
  %1731 = ashr i64 %1730, 32
  %1732 = getelementptr inbounds i16, ptr %1642, i64 %1731
  %1733 = load i16, ptr %1732, align 2, !tbaa !44
  br label %1734

1734:                                             ; preds = %1625, %1728
  %1735 = phi i64 [ %1638, %1728 ], [ 0, %1625 ]
  %1736 = phi i16 [ %1733, %1728 ], [ -1, %1625 ]
  %1737 = and i64 %1735, 4294967295
  %1738 = getelementptr inbounds i16, ptr %1642, i64 %1737
  store i16 %1736, ptr %1738, align 2, !tbaa !44
  %1739 = trunc i64 %1638 to i16
  %1740 = add i16 %1739, 1
  %1741 = sext i32 %1635 to i64
  %1742 = getelementptr inbounds i16, ptr %1276, i64 %1741
  store i16 %1740, ptr %1742, align 2, !tbaa !44
  %1743 = add nsw i32 %1639, 2
  %1744 = add nsw i32 %1743, %1635
  %1745 = ptrtoint ptr %1610 to i64
  %1746 = sub i64 %1745, %645
  %1747 = lshr exact i64 %1746, 1
  %1748 = trunc i64 %1747 to i32
  %1749 = add nsw i32 %1744, 1
  %1750 = sext i32 %1749 to i64
  %1751 = getelementptr i16, ptr %1276, i64 %1750
  %1752 = icmp sgt i32 %1748, 0
  br i1 %1752, label %1753, label %1843

1753:                                             ; preds = %1734
  %1754 = and i64 %1747, 4294967295
  %1755 = icmp ult i64 %1754, 8
  br i1 %1755, label %1799, label %1756

1756:                                             ; preds = %1753
  %1757 = shl nsw i64 %1750, 1
  %1758 = add i64 %1757, %1277
  %1759 = sub i64 %1758, %645
  %1760 = icmp ult i64 %1759, 128
  br i1 %1760, label %1799, label %1761

1761:                                             ; preds = %1756
  %1762 = icmp ult i64 %1754, 64
  br i1 %1762, label %1786, label %1763

1763:                                             ; preds = %1761
  %1764 = and i64 %1747, 63
  %1765 = sub nsw i64 %1754, %1764
  br label %1766

1766:                                             ; preds = %1766, %1763
  %1767 = phi i64 [ 0, %1763 ], [ %1780, %1766 ]
  %1768 = getelementptr inbounds i16, ptr %375, i64 %1767
  %1769 = load <16 x i16>, ptr %1768, align 2, !tbaa !44
  %1770 = getelementptr inbounds i16, ptr %1768, i64 16
  %1771 = load <16 x i16>, ptr %1770, align 2, !tbaa !44
  %1772 = getelementptr inbounds i16, ptr %1768, i64 32
  %1773 = load <16 x i16>, ptr %1772, align 2, !tbaa !44
  %1774 = getelementptr inbounds i16, ptr %1768, i64 48
  %1775 = load <16 x i16>, ptr %1774, align 2, !tbaa !44
  %1776 = getelementptr inbounds i16, ptr %1751, i64 %1767
  store <16 x i16> %1769, ptr %1776, align 2, !tbaa !44
  %1777 = getelementptr inbounds i16, ptr %1776, i64 16
  store <16 x i16> %1771, ptr %1777, align 2, !tbaa !44
  %1778 = getelementptr inbounds i16, ptr %1776, i64 32
  store <16 x i16> %1773, ptr %1778, align 2, !tbaa !44
  %1779 = getelementptr inbounds i16, ptr %1776, i64 48
  store <16 x i16> %1775, ptr %1779, align 2, !tbaa !44
  %1780 = add nuw i64 %1767, 64
  %1781 = icmp eq i64 %1780, %1765
  br i1 %1781, label %1782, label %1766, !llvm.loop !278

1782:                                             ; preds = %1766
  %1783 = icmp eq i64 %1764, 0
  br i1 %1783, label %1837, label %1784

1784:                                             ; preds = %1782
  %1785 = icmp ult i64 %1764, 8
  br i1 %1785, label %1799, label %1786

1786:                                             ; preds = %1761, %1784
  %1787 = phi i64 [ %1765, %1784 ], [ 0, %1761 ]
  %1788 = and i64 %1747, 7
  %1789 = sub nsw i64 %1754, %1788
  br label %1790

1790:                                             ; preds = %1790, %1786
  %1791 = phi i64 [ %1787, %1786 ], [ %1795, %1790 ]
  %1792 = getelementptr inbounds i16, ptr %375, i64 %1791
  %1793 = load <8 x i16>, ptr %1792, align 2, !tbaa !44
  %1794 = getelementptr inbounds i16, ptr %1751, i64 %1791
  store <8 x i16> %1793, ptr %1794, align 2, !tbaa !44
  %1795 = add nuw i64 %1791, 8
  %1796 = icmp eq i64 %1795, %1789
  br i1 %1796, label %1797, label %1790, !llvm.loop !279

1797:                                             ; preds = %1790
  %1798 = icmp eq i64 %1788, 0
  br i1 %1798, label %1837, label %1799

1799:                                             ; preds = %1756, %1753, %1784, %1797
  %1800 = phi i64 [ 0, %1753 ], [ 0, %1756 ], [ %1765, %1784 ], [ %1789, %1797 ]
  %1801 = sub i64 %1747, %1800
  %1802 = xor i64 %1800, -1
  %1803 = add nsw i64 %1754, %1802
  %1804 = and i64 %1801, 3
  %1805 = icmp eq i64 %1804, 0
  br i1 %1805, label %1815, label %1806

1806:                                             ; preds = %1799, %1806
  %1807 = phi i64 [ %1812, %1806 ], [ %1800, %1799 ]
  %1808 = phi i64 [ %1813, %1806 ], [ 0, %1799 ]
  %1809 = getelementptr inbounds i16, ptr %375, i64 %1807
  %1810 = load i16, ptr %1809, align 2, !tbaa !44
  %1811 = getelementptr inbounds i16, ptr %1751, i64 %1807
  store i16 %1810, ptr %1811, align 2, !tbaa !44
  %1812 = add nuw nsw i64 %1807, 1
  %1813 = add i64 %1808, 1
  %1814 = icmp eq i64 %1813, %1804
  br i1 %1814, label %1815, label %1806, !llvm.loop !280

1815:                                             ; preds = %1806, %1799
  %1816 = phi i64 [ %1800, %1799 ], [ %1812, %1806 ]
  %1817 = icmp ult i64 %1803, 3
  br i1 %1817, label %1837, label %1818

1818:                                             ; preds = %1815, %1818
  %1819 = phi i64 [ %1835, %1818 ], [ %1816, %1815 ]
  %1820 = getelementptr inbounds i16, ptr %375, i64 %1819
  %1821 = load i16, ptr %1820, align 2, !tbaa !44
  %1822 = getelementptr inbounds i16, ptr %1751, i64 %1819
  store i16 %1821, ptr %1822, align 2, !tbaa !44
  %1823 = add nuw nsw i64 %1819, 1
  %1824 = getelementptr inbounds i16, ptr %375, i64 %1823
  %1825 = load i16, ptr %1824, align 2, !tbaa !44
  %1826 = getelementptr inbounds i16, ptr %1751, i64 %1823
  store i16 %1825, ptr %1826, align 2, !tbaa !44
  %1827 = add nuw nsw i64 %1819, 2
  %1828 = getelementptr inbounds i16, ptr %375, i64 %1827
  %1829 = load i16, ptr %1828, align 2, !tbaa !44
  %1830 = getelementptr inbounds i16, ptr %1751, i64 %1827
  store i16 %1829, ptr %1830, align 2, !tbaa !44
  %1831 = add nuw nsw i64 %1819, 3
  %1832 = getelementptr inbounds i16, ptr %375, i64 %1831
  %1833 = load i16, ptr %1832, align 2, !tbaa !44
  %1834 = getelementptr inbounds i16, ptr %1751, i64 %1831
  store i16 %1833, ptr %1834, align 2, !tbaa !44
  %1835 = add nuw nsw i64 %1819, 4
  %1836 = icmp eq i64 %1835, %1754
  br i1 %1836, label %1837, label %1818, !llvm.loop !281

1837:                                             ; preds = %1815, %1818, %1782, %1797
  %1838 = shl i64 %1746, 31
  %1839 = add i64 %1838, -4294967296
  %1840 = ashr i64 %1839, 32
  %1841 = getelementptr inbounds i16, ptr %1751, i64 %1840
  %1842 = load i16, ptr %1841, align 2, !tbaa !44
  br label %1843

1843:                                             ; preds = %1734, %1837
  %1844 = phi i64 [ %1747, %1837 ], [ 0, %1734 ]
  %1845 = phi i16 [ %1842, %1837 ], [ -1, %1734 ]
  %1846 = and i64 %1844, 4294967295
  %1847 = getelementptr inbounds i16, ptr %1751, i64 %1846
  store i16 %1845, ptr %1847, align 2, !tbaa !44
  %1848 = trunc i64 %1747 to i16
  %1849 = add i16 %1848, 1
  %1850 = sext i32 %1744 to i64
  %1851 = getelementptr inbounds i16, ptr %1276, i64 %1850
  store i16 %1849, ptr %1851, align 2, !tbaa !44
  %1852 = add nsw i32 %1748, 2
  %1853 = add nsw i32 %1852, %1744
  %1854 = select i1 %142, i32 0, i32 %1853
  store i32 %1854, ptr %13, align 8
  br label %1885

1855:                                             ; preds = %680
  %1856 = load ptr, ptr %8, align 8, !tbaa !46
  %1857 = load i32, ptr %13, align 8, !tbaa !17
  %1858 = add i32 %1857, 1
  %1859 = sext i32 %1858 to i64
  %1860 = getelementptr inbounds i16, ptr %1856, i64 %1859
  %1861 = sext i32 %1857 to i64
  %1862 = getelementptr inbounds i16, ptr %1856, i64 %1861
  %1863 = load i16, ptr %1862, align 2, !tbaa !44
  %1864 = zext i16 %1863 to i32
  %1865 = add i32 %1858, %1864
  %1866 = add nsw i32 %1864, -1
  %1867 = add i32 %1865, 1
  %1868 = sext i32 %1867 to i64
  %1869 = getelementptr inbounds i16, ptr %1856, i64 %1868
  %1870 = sext i32 %1865 to i64
  %1871 = getelementptr inbounds i16, ptr %1856, i64 %1870
  %1872 = load i16, ptr %1871, align 2, !tbaa !44
  %1873 = zext i16 %1872 to i32
  %1874 = add i32 %1867, %1873
  %1875 = add nsw i32 %1873, -1
  %1876 = add i32 %1874, 1
  %1877 = sext i32 %1876 to i64
  %1878 = getelementptr inbounds i16, ptr %1856, i64 %1877
  %1879 = sext i32 %1874 to i64
  %1880 = getelementptr inbounds i16, ptr %1856, i64 %1879
  %1881 = load i16, ptr %1880, align 2, !tbaa !44
  %1882 = zext i16 %1881 to i32
  %1883 = add i32 %1876, %1882
  store i32 %1883, ptr %13, align 8, !tbaa !17
  %1884 = add nsw i32 %1882, -1
  br label %1885

1885:                                             ; preds = %1843, %1855
  %1886 = phi ptr [ %1860, %1855 ], [ %1280, %1843 ]
  %1887 = phi i32 [ %1866, %1855 ], [ %1617, %1843 ]
  %1888 = phi ptr [ %1869, %1855 ], [ %1642, %1843 ]
  %1889 = phi i32 [ %1875, %1855 ], [ %1639, %1843 ]
  %1890 = phi ptr [ %1878, %1855 ], [ %1751, %1843 ]
  %1891 = phi i32 [ %1884, %1855 ], [ %1748, %1843 ]
  %1892 = phi i32 [ %663, %1855 ], [ %1238, %1843 ]
  %1893 = phi i32 [ %662, %1855 ], [ %1239, %1843 ]
  %1894 = phi i32 [ %661, %1855 ], [ %1240, %1843 ]
  %1895 = phi i32 [ %660, %1855 ], [ %1241, %1843 ]
  %1896 = phi ptr [ %658, %1855 ], [ %934, %1843 ]
  %1897 = phi ptr [ %657, %1855 ], [ %935, %1843 ]
  %1898 = phi ptr [ %656, %1855 ], [ %936, %1843 ]
  %1899 = getelementptr inbounds %struct.CompAtom, ptr %39, i64 %665, i32 1
  %1900 = load float, ptr %1899, align 8, !tbaa !79
  %1901 = fpext float %1900 to double
  %1902 = fmul double %1901, 0x4074C104816F0069
  %1903 = fmul double %28, %1902
  %1904 = fmul double %24, %1903
  %1905 = load double, ptr @_ZN20ComputeNonbondedUtil7cutoff2E, align 8, !tbaa !19
  %1906 = extractelement <2 x double> %683, i64 0
  %1907 = extractelement <2 x double> %683, i64 1
  %1908 = tail call noundef i32 @_Z22pairlist_from_pairlistddddPK8CompAtomPKtiPtdPd(double noundef %1905, double noundef %1906, double noundef %1907, double noundef %686, ptr noundef %41, ptr noundef nonnull %1886, i32 noundef %1887, ptr noundef %94, double noundef %31, ptr noundef %140)
  %1909 = icmp sgt i32 %1908, 0
  br i1 %1909, label %1910, label %1969

1910:                                             ; preds = %1885
  %1911 = load ptr, ptr @_ZN20ComputeNonbondedUtil8r2_tableE, align 8, !tbaa !23
  %1912 = zext i32 %1908 to i64
  br label %1913

1913:                                             ; preds = %1910, %1913
  %1914 = phi i64 [ 0, %1910 ], [ %1967, %1913 ]
  %1915 = phi double [ 0.000000e+00, %1910 ], [ %1963, %1913 ]
  %1916 = phi <2 x double> [ zeroinitializer, %1910 ], [ %1959, %1913 ]
  %1917 = shl nuw nsw i64 %1914, 1
  %1918 = getelementptr inbounds i32, ptr %141, i64 %1917
  %1919 = load i32, ptr %1918, align 4, !tbaa !5
  %1920 = ashr i32 %1919, 14
  %1921 = add nsw i32 %1920, %34
  %1922 = getelementptr inbounds i16, ptr %94, i64 %1914
  %1923 = load i16, ptr %1922, align 2, !tbaa !44
  %1924 = zext i16 %1923 to i64
  %1925 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %1924
  %1926 = getelementptr inbounds double, ptr %140, i64 %1914
  %1927 = load double, ptr %1926, align 8, !tbaa !19
  %1928 = sext i32 %1921 to i64
  %1929 = getelementptr inbounds double, ptr %1911, i64 %1928
  %1930 = load double, ptr %1929, align 8, !tbaa !19
  %1931 = fsub double %1927, %1930
  %1932 = shl nsw i32 %1921, 4
  %1933 = sext i32 %1932 to i64
  %1934 = getelementptr inbounds double, ptr %26, i64 %1933
  %1935 = getelementptr inbounds %class.Vector, ptr %625, i64 %1924
  %1936 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %1924, i32 1
  %1937 = load float, ptr %1936, align 8, !tbaa !79
  %1938 = fpext float %1937 to double
  %1939 = fmul double %1904, %1938
  %1940 = getelementptr inbounds %class.Vector, ptr %1925, i64 0, i32 2
  %1941 = load double, ptr %1940, align 8, !tbaa !49
  %1942 = fsub double %686, %1941
  %1943 = getelementptr inbounds double, ptr %1934, i64 12
  %1944 = load double, ptr %1943, align 8, !tbaa !19
  %1945 = getelementptr inbounds double, ptr %1934, i64 13
  %1946 = load double, ptr %1945, align 8, !tbaa !19
  %1947 = getelementptr inbounds double, ptr %1934, i64 14
  %1948 = load double, ptr %1947, align 8, !tbaa !19
  %1949 = fmul double %1939, %1944
  %1950 = fmul double %1939, %1946
  %1951 = fmul double %1939, %1948
  %1952 = tail call double @llvm.fmuladd.f64(double %1931, double %1949, double %1950)
  %1953 = tail call double @llvm.fmuladd.f64(double %1952, double %1931, double %1951)
  %1954 = load <2 x double>, ptr %1925, align 8, !tbaa !19
  %1955 = fsub <2 x double> %683, %1954
  %1956 = insertelement <2 x double> poison, double %1953, i64 0
  %1957 = shufflevector <2 x double> %1956, <2 x double> poison, <2 x i32> zeroinitializer
  %1958 = fmul <2 x double> %1955, %1957
  %1959 = fadd <2 x double> %1916, %1958
  %1960 = load <2 x double>, ptr %1935, align 8, !tbaa !19
  %1961 = fsub <2 x double> %1960, %1958
  store <2 x double> %1961, ptr %1935, align 8, !tbaa !19
  %1962 = fmul double %1942, %1953
  %1963 = fadd double %1915, %1962
  %1964 = getelementptr inbounds %class.Vector, ptr %625, i64 %1924, i32 2
  %1965 = load double, ptr %1964, align 8, !tbaa !87
  %1966 = fsub double %1965, %1962
  store double %1966, ptr %1964, align 8, !tbaa !87
  %1967 = add nuw nsw i64 %1914, 1
  %1968 = icmp eq i64 %1967, %1912
  br i1 %1968, label %1969, label %1913

1969:                                             ; preds = %1913, %1885
  %1970 = phi double [ 0.000000e+00, %1885 ], [ %1963, %1913 ]
  %1971 = phi <2 x double> [ zeroinitializer, %1885 ], [ %1959, %1913 ]
  %1972 = load double, ptr @_ZN20ComputeNonbondedUtil7cutoff2E, align 8, !tbaa !19
  %1973 = tail call noundef i32 @_Z22pairlist_from_pairlistddddPK8CompAtomPKtiPtdPd(double noundef %1972, double noundef %1906, double noundef %1907, double noundef %686, ptr noundef %41, ptr noundef %1890, i32 noundef %1891, ptr noundef %94, double noundef %31, ptr noundef %140)
  %1974 = add nsw i32 %1973, %654
  %1975 = icmp sgt i32 %1973, 0
  br i1 %1975, label %1976, label %2047

1976:                                             ; preds = %1969
  %1977 = load ptr, ptr @_ZN20ComputeNonbondedUtil8r2_tableE, align 8, !tbaa !23
  %1978 = zext i32 %1973 to i64
  br label %1979

1979:                                             ; preds = %1976, %1979
  %1980 = phi i64 [ 0, %1976 ], [ %2045, %1979 ]
  %1981 = phi double [ %1970, %1976 ], [ %2041, %1979 ]
  %1982 = phi <2 x double> [ %1971, %1976 ], [ %2037, %1979 ]
  %1983 = shl nuw nsw i64 %1980, 1
  %1984 = getelementptr inbounds i32, ptr %141, i64 %1983
  %1985 = load i32, ptr %1984, align 4, !tbaa !5
  %1986 = ashr i32 %1985, 14
  %1987 = add nsw i32 %1986, %34
  %1988 = getelementptr inbounds i16, ptr %94, i64 %1980
  %1989 = load i16, ptr %1988, align 2, !tbaa !44
  %1990 = zext i16 %1989 to i64
  %1991 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %1990
  %1992 = getelementptr inbounds double, ptr %140, i64 %1980
  %1993 = load double, ptr %1992, align 8, !tbaa !19
  %1994 = sext i32 %1987 to i64
  %1995 = getelementptr inbounds double, ptr %1977, i64 %1994
  %1996 = load double, ptr %1995, align 8, !tbaa !19
  %1997 = fsub double %1993, %1996
  %1998 = shl nsw i32 %1987, 4
  %1999 = sext i32 %1998 to i64
  %2000 = getelementptr inbounds double, ptr %26, i64 %1999
  %2001 = getelementptr inbounds %class.Vector, ptr %625, i64 %1990
  %2002 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %1990, i32 1
  %2003 = load float, ptr %2002, align 8, !tbaa !79
  %2004 = fpext float %2003 to double
  %2005 = fmul double %1904, %2004
  %2006 = getelementptr inbounds %class.Vector, ptr %1991, i64 0, i32 2
  %2007 = load double, ptr %2006, align 8, !tbaa !49
  %2008 = fsub double %686, %2007
  %2009 = shl nsw i32 %1987, 2
  %2010 = sext i32 %2009 to i64
  %2011 = getelementptr inbounds double, ptr %27, i64 %2010
  %2012 = getelementptr inbounds double, ptr %2000, i64 12
  %2013 = load double, ptr %2012, align 8, !tbaa !19
  %2014 = getelementptr inbounds double, ptr %2000, i64 13
  %2015 = load double, ptr %2014, align 8, !tbaa !19
  %2016 = getelementptr inbounds double, ptr %2000, i64 14
  %2017 = load double, ptr %2016, align 8, !tbaa !19
  %2018 = getelementptr inbounds double, ptr %2011, i64 1
  %2019 = load double, ptr %2018, align 8, !tbaa !19
  %2020 = tail call double @llvm.fmuladd.f64(double %646, double %2019, double %2017)
  %2021 = getelementptr inbounds double, ptr %2011, i64 2
  %2022 = load double, ptr %2021, align 8, !tbaa !19
  %2023 = tail call double @llvm.fmuladd.f64(double %647, double %2022, double %2015)
  %2024 = getelementptr inbounds double, ptr %2011, i64 3
  %2025 = load double, ptr %2024, align 8, !tbaa !19
  %2026 = tail call double @llvm.fmuladd.f64(double %648, double %2025, double %2013)
  %2027 = fmul double %2005, %2026
  %2028 = fmul double %2005, %2023
  %2029 = fmul double %2005, %2020
  %2030 = tail call double @llvm.fmuladd.f64(double %1997, double %2027, double %2028)
  %2031 = tail call double @llvm.fmuladd.f64(double %2030, double %1997, double %2029)
  %2032 = load <2 x double>, ptr %1991, align 8, !tbaa !19
  %2033 = fsub <2 x double> %683, %2032
  %2034 = insertelement <2 x double> poison, double %2031, i64 0
  %2035 = shufflevector <2 x double> %2034, <2 x double> poison, <2 x i32> zeroinitializer
  %2036 = fmul <2 x double> %2033, %2035
  %2037 = fadd <2 x double> %1982, %2036
  %2038 = load <2 x double>, ptr %2001, align 8, !tbaa !19
  %2039 = fsub <2 x double> %2038, %2036
  store <2 x double> %2039, ptr %2001, align 8, !tbaa !19
  %2040 = fmul double %2008, %2031
  %2041 = fadd double %1981, %2040
  %2042 = getelementptr inbounds %class.Vector, ptr %625, i64 %1990, i32 2
  %2043 = load double, ptr %2042, align 8, !tbaa !87
  %2044 = fsub double %2043, %2040
  store double %2044, ptr %2042, align 8, !tbaa !87
  %2045 = add nuw nsw i64 %1980, 1
  %2046 = icmp eq i64 %2045, %1978
  br i1 %2046, label %2047, label %1979

2047:                                             ; preds = %1979, %1969
  %2048 = phi double [ %1970, %1969 ], [ %2041, %1979 ]
  %2049 = phi <2 x double> [ %1971, %1969 ], [ %2037, %1979 ]
  %2050 = load double, ptr @_ZN20ComputeNonbondedUtil7cutoff2E, align 8, !tbaa !19
  %2051 = tail call noundef i32 @_Z22pairlist_from_pairlistddddPK8CompAtomPKtiPtdPd(double noundef %2050, double noundef %1906, double noundef %1907, double noundef %686, ptr noundef %41, ptr noundef %1888, i32 noundef %1889, ptr noundef %94, double noundef %31, ptr noundef %140)
  %2052 = add nsw i32 %1974, %2051
  %2053 = icmp sgt i32 %2051, 0
  br i1 %2053, label %2054, label %2125

2054:                                             ; preds = %2047
  %2055 = load ptr, ptr @_ZN20ComputeNonbondedUtil8r2_tableE, align 8, !tbaa !23
  %2056 = zext i32 %2051 to i64
  br label %2057

2057:                                             ; preds = %2054, %2057
  %2058 = phi i64 [ 0, %2054 ], [ %2123, %2057 ]
  %2059 = phi double [ %2048, %2054 ], [ %2119, %2057 ]
  %2060 = phi <2 x double> [ %2049, %2054 ], [ %2115, %2057 ]
  %2061 = shl nuw nsw i64 %2058, 1
  %2062 = getelementptr inbounds i32, ptr %141, i64 %2061
  %2063 = load i32, ptr %2062, align 4, !tbaa !5
  %2064 = ashr i32 %2063, 14
  %2065 = add nsw i32 %2064, %34
  %2066 = getelementptr inbounds i16, ptr %94, i64 %2058
  %2067 = load i16, ptr %2066, align 2, !tbaa !44
  %2068 = zext i16 %2067 to i64
  %2069 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %2068
  %2070 = getelementptr inbounds double, ptr %140, i64 %2058
  %2071 = load double, ptr %2070, align 8, !tbaa !19
  %2072 = sext i32 %2065 to i64
  %2073 = getelementptr inbounds double, ptr %2055, i64 %2072
  %2074 = load double, ptr %2073, align 8, !tbaa !19
  %2075 = fsub double %2071, %2074
  %2076 = shl nsw i32 %2065, 4
  %2077 = sext i32 %2076 to i64
  %2078 = getelementptr inbounds double, ptr %26, i64 %2077
  %2079 = getelementptr inbounds %class.Vector, ptr %625, i64 %2068
  %2080 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %2068, i32 1
  %2081 = load float, ptr %2080, align 8, !tbaa !79
  %2082 = fpext float %2081 to double
  %2083 = fmul double %1904, %2082
  %2084 = getelementptr inbounds %class.Vector, ptr %2069, i64 0, i32 2
  %2085 = load double, ptr %2084, align 8, !tbaa !49
  %2086 = fsub double %686, %2085
  %2087 = shl nsw i32 %2065, 2
  %2088 = sext i32 %2087 to i64
  %2089 = getelementptr inbounds double, ptr %27, i64 %2088
  %2090 = getelementptr inbounds double, ptr %2078, i64 12
  %2091 = load double, ptr %2090, align 8, !tbaa !19
  %2092 = getelementptr inbounds double, ptr %2078, i64 13
  %2093 = load double, ptr %2092, align 8, !tbaa !19
  %2094 = getelementptr inbounds double, ptr %2078, i64 14
  %2095 = load double, ptr %2094, align 8, !tbaa !19
  %2096 = getelementptr inbounds double, ptr %2089, i64 1
  %2097 = load double, ptr %2096, align 8, !tbaa !19
  %2098 = tail call double @llvm.fmuladd.f64(double %2097, double 2.000000e+00, double %2095)
  %2099 = getelementptr inbounds double, ptr %2089, i64 2
  %2100 = load double, ptr %2099, align 8, !tbaa !19
  %2101 = tail call double @llvm.fmuladd.f64(double %2100, double 4.000000e+00, double %2093)
  %2102 = getelementptr inbounds double, ptr %2089, i64 3
  %2103 = load double, ptr %2102, align 8, !tbaa !19
  %2104 = tail call double @llvm.fmuladd.f64(double %2103, double 6.000000e+00, double %2091)
  %2105 = fmul double %2083, %2104
  %2106 = fmul double %2083, %2101
  %2107 = fmul double %2083, %2098
  %2108 = tail call double @llvm.fmuladd.f64(double %2075, double %2105, double %2106)
  %2109 = tail call double @llvm.fmuladd.f64(double %2108, double %2075, double %2107)
  %2110 = load <2 x double>, ptr %2069, align 8, !tbaa !19
  %2111 = fsub <2 x double> %683, %2110
  %2112 = insertelement <2 x double> poison, double %2109, i64 0
  %2113 = shufflevector <2 x double> %2112, <2 x double> poison, <2 x i32> zeroinitializer
  %2114 = fmul <2 x double> %2111, %2113
  %2115 = fadd <2 x double> %2060, %2114
  %2116 = load <2 x double>, ptr %2079, align 8, !tbaa !19
  %2117 = fsub <2 x double> %2116, %2114
  store <2 x double> %2117, ptr %2079, align 8, !tbaa !19
  %2118 = fmul double %2086, %2109
  %2119 = fadd double %2059, %2118
  %2120 = getelementptr inbounds %class.Vector, ptr %625, i64 %2068, i32 2
  %2121 = load double, ptr %2120, align 8, !tbaa !87
  %2122 = fsub double %2121, %2118
  store double %2122, ptr %2120, align 8, !tbaa !87
  %2123 = add nuw nsw i64 %2058, 1
  %2124 = icmp eq i64 %2123, %2056
  br i1 %2124, label %2125, label %2057

2125:                                             ; preds = %2057, %2047
  %2126 = phi double [ %2048, %2047 ], [ %2119, %2057 ]
  %2127 = phi <2 x double> [ %2049, %2047 ], [ %2115, %2057 ]
  %2128 = getelementptr inbounds %class.Vector, ptr %625, i64 %665
  %2129 = load <2 x double>, ptr %2128, align 8, !tbaa !19
  %2130 = fadd <2 x double> %2127, %2129
  store <2 x double> %2130, ptr %2128, align 8, !tbaa !19
  %2131 = getelementptr inbounds %class.Vector, ptr %625, i64 %665, i32 2
  %2132 = load double, ptr %2131, align 8, !tbaa !87
  %2133 = fadd double %2126, %2132
  store double %2133, ptr %2131, align 8, !tbaa !87
  br label %2134

2134:                                             ; preds = %2125, %676
  %2135 = phi i32 [ %677, %676 ], [ %681, %2125 ]
  %2136 = phi i32 [ %663, %676 ], [ %1892, %2125 ]
  %2137 = phi i32 [ %662, %676 ], [ %1893, %2125 ]
  %2138 = phi i32 [ %661, %676 ], [ %1894, %2125 ]
  %2139 = phi i32 [ %660, %676 ], [ %1895, %2125 ]
  %2140 = phi i32 [ %659, %676 ], [ %688, %2125 ]
  %2141 = phi ptr [ %658, %676 ], [ %1896, %2125 ]
  %2142 = phi ptr [ %657, %676 ], [ %1897, %2125 ]
  %2143 = phi ptr [ %656, %676 ], [ %1898, %2125 ]
  %2144 = phi i32 [ %679, %676 ], [ %655, %2125 ]
  %2145 = phi i32 [ %654, %676 ], [ %2052, %2125 ]
  %2146 = add nsw i32 %2144, 1
  %2147 = icmp slt i32 %2146, %631
  br i1 %2147, label %653, label %2148

2148:                                             ; preds = %2134, %619
  %2149 = phi ptr [ null, %619 ], [ %2143, %2134 ]
  %2150 = phi i32 [ 0, %619 ], [ %2145, %2134 ]
  %2151 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 4
  %2152 = load ptr, ptr %2151, align 8, !tbaa !23
  %2153 = icmp sgt i32 %36, 0
  br i1 %2153, label %2154, label %2156

2154:                                             ; preds = %2148
  %2155 = zext i32 %36 to i64
  br label %2179

2156:                                             ; preds = %2179, %2148
  %2157 = phi <4 x double> [ zeroinitializer, %2148 ], [ %2209, %2179 ]
  %2158 = phi <2 x double> [ zeroinitializer, %2148 ], [ %2204, %2179 ]
  %2159 = sitofp i32 %2150 to double
  %2160 = getelementptr inbounds double, ptr %6, i64 22
  %2161 = load double, ptr %2160, align 8, !tbaa !19
  %2162 = fadd double %2161, %2159
  store double %2162, ptr %2160, align 8, !tbaa !19
  %2163 = getelementptr inbounds double, ptr %6, i64 12
  %2164 = load <4 x double>, ptr %2163, align 8, !tbaa !19
  %2165 = shufflevector <2 x double> %2158, <2 x double> poison, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>
  %2166 = shufflevector <4 x double> %2165, <4 x double> %2157, <4 x i32> <i32 0, i32 1, i32 7, i32 poison>
  %2167 = shufflevector <4 x double> %2166, <4 x double> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 1>
  %2168 = fadd <4 x double> %2167, %2164
  store <4 x double> %2168, ptr %2163, align 8, !tbaa !19
  %2169 = getelementptr inbounds double, ptr %6, i64 16
  %2170 = load <4 x double>, ptr %2169, align 8, !tbaa !19
  %2171 = shufflevector <4 x double> %2157, <4 x double> poison, <4 x i32> <i32 2, i32 1, i32 3, i32 poison>
  %2172 = shufflevector <4 x double> %2171, <4 x double> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 1>
  %2173 = fadd <4 x double> %2172, %2170
  store <4 x double> %2173, ptr %2169, align 8, !tbaa !19
  %2174 = getelementptr inbounds double, ptr %6, i64 20
  %2175 = load double, ptr %2174, align 8, !tbaa !19
  %2176 = extractelement <4 x double> %2157, i64 0
  %2177 = fadd double %2176, %2175
  store double %2177, ptr %2174, align 8, !tbaa !19
  %2178 = icmp eq ptr %2149, null
  br i1 %2178, label %2213, label %2212

2179:                                             ; preds = %2154, %2179
  %2180 = phi i64 [ 0, %2154 ], [ %2210, %2179 ]
  %2181 = phi <4 x double> [ zeroinitializer, %2154 ], [ %2209, %2179 ]
  %2182 = phi <2 x double> [ zeroinitializer, %2154 ], [ %2204, %2179 ]
  %2183 = getelementptr inbounds %class.Vector, ptr %625, i64 %2180
  %2184 = getelementptr inbounds %class.Vector, ptr %2152, i64 %2180
  %2185 = getelementptr inbounds %class.Vector, ptr %625, i64 %2180, i32 1
  %2186 = load <2 x double>, ptr %2183, align 8, !tbaa !19
  %2187 = load <2 x double>, ptr %2184, align 8, !tbaa !19
  %2188 = fadd <2 x double> %2186, %2187
  store <2 x double> %2188, ptr %2184, align 8, !tbaa !19
  %2189 = getelementptr inbounds %class.Vector, ptr %625, i64 %2180, i32 2
  %2190 = load double, ptr %2189, align 8, !tbaa !87
  %2191 = getelementptr inbounds %class.Vector, ptr %2152, i64 %2180, i32 2
  %2192 = load double, ptr %2191, align 8, !tbaa !87
  %2193 = fadd double %2190, %2192
  store double %2193, ptr %2191, align 8, !tbaa !87
  %2194 = load double, ptr %2183, align 8, !tbaa !191
  %2195 = getelementptr inbounds %struct.CompAtom, ptr %39, i64 %2180
  %2196 = load double, ptr %2195, align 8, !tbaa !67
  %2197 = getelementptr inbounds %class.Vector, ptr %2195, i64 0, i32 1
  %2198 = load <2 x double>, ptr %2197, align 8, !tbaa !19
  %2199 = shufflevector <2 x double> %2198, <2 x double> poison, <4 x i32> <i32 1, i32 1, i32 0, i32 1>
  %2200 = insertelement <2 x double> poison, double %2194, i64 0
  %2201 = shufflevector <2 x double> %2200, <2 x double> poison, <2 x i32> zeroinitializer
  %2202 = shufflevector <2 x double> %2198, <2 x double> poison, <2 x i32> <i32 poison, i32 0>
  %2203 = insertelement <2 x double> %2202, double %2196, i64 0
  %2204 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2201, <2 x double> %2203, <2 x double> %2182)
  %2205 = load <2 x double>, ptr %2185, align 8, !tbaa !19
  %2206 = shufflevector <2 x double> %2205, <2 x double> poison, <4 x i32> <i32 1, i32 0, i32 poison, i32 poison>
  %2207 = insertelement <4 x double> %2206, double %2194, i64 3
  %2208 = shufflevector <4 x double> %2207, <4 x double> poison, <4 x i32> <i32 0, i32 1, i32 1, i32 3>
  %2209 = tail call <4 x double> @llvm.fmuladd.v4f64(<4 x double> %2208, <4 x double> %2199, <4 x double> %2181)
  %2210 = add nuw nsw i64 %2180, 1
  %2211 = icmp eq i64 %2210, %2155
  br i1 %2211, label %2156, label %2179

2212:                                             ; preds = %2156
  tail call void @_ZdaPv(ptr noundef nonnull %2149) #10
  br label %2213

2213:                                             ; preds = %2156, %2212, %1
  ret void
}

; Function Attrs: sspstrong uwtable
define dso_local void @_ZN20ComputeNonbondedUtil31calc_self_energy_slow_fullelectEP9nonbonded(ptr nocapture noundef readonly %0) local_unnamed_addr #0 align 2 {
  %2 = load i32, ptr @_ZN20ComputeNonbondedUtil8commOnlyE, align 4, !tbaa !5
  %3 = icmp eq i32 %2, 0
  br i1 %3, label %4, label %2259

4:                                                ; preds = %1
  %5 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 7
  %6 = load ptr, ptr %5, align 8, !tbaa !9
  %7 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 10
  %8 = load ptr, ptr %7, align 8, !tbaa !14
  %9 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 11
  %10 = load i32, ptr %9, align 8, !tbaa !15
  %11 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 12
  %12 = load i32, ptr %11, align 4, !tbaa !16
  %13 = getelementptr inbounds %class.Pairlists, ptr %8, i64 0, i32 1
  store i32 0, ptr %13, align 8, !tbaa !17
  %14 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 6
  %15 = load <2 x double>, ptr %14, align 8, !tbaa !19
  %16 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 6, i32 2
  %17 = load double, ptr %16, align 8, !tbaa !20
  %18 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 13
  %19 = load double, ptr %18, align 8, !tbaa !21
  %20 = fmul double %19, %19
  %21 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 14
  %22 = load double, ptr %21, align 8, !tbaa !22
  %23 = fmul double %22, %22
  %24 = load double, ptr @_ZN20ComputeNonbondedUtil12dielectric_1E, align 8, !tbaa !19
  %25 = load ptr, ptr @_ZN20ComputeNonbondedUtil3molE, align 8, !tbaa !23
  %26 = load ptr, ptr @_ZN20ComputeNonbondedUtil11table_shortE, align 8, !tbaa !23
  %27 = load ptr, ptr @_ZN20ComputeNonbondedUtil10slow_tableE, align 8, !tbaa !23
  %28 = load double, ptr @_ZN20ComputeNonbondedUtil7scalingE, align 8, !tbaa !19
  %29 = load double, ptr @_ZN20ComputeNonbondedUtil7scale14E, align 8, !tbaa !19
  %30 = fsub double 1.000000e+00, %29
  %31 = load double, ptr @_ZN20ComputeNonbondedUtil8r2_deltaE, align 8, !tbaa !19
  %32 = load i32, ptr @_ZN20ComputeNonbondedUtil12r2_delta_expE, align 4, !tbaa !5
  %33 = shl i32 %32, 6
  %34 = add i32 %33, -65472
  %35 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 5
  %36 = load i32, ptr %35, align 8, !tbaa !5
  %37 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 5, i64 1
  %38 = load i32, ptr %37, align 4, !tbaa !5
  %39 = load ptr, ptr %0, align 8, !tbaa !23
  %40 = getelementptr inbounds [2 x ptr], ptr %0, i64 0, i64 1
  %41 = load ptr, ptr %40, align 8, !tbaa !23
  %42 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 1
  %43 = load ptr, ptr %42, align 8, !tbaa !23
  %44 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 1, i64 1
  %45 = load ptr, ptr %44, align 8, !tbaa !23
  %46 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 9
  %47 = load ptr, ptr %46, align 8, !tbaa !24
  %48 = add nsw i32 %38, 5
  %49 = getelementptr inbounds %class.ResizeArray, ptr %47, i64 0, i32 1
  %50 = load ptr, ptr %49, align 8, !tbaa !25
  %51 = getelementptr inbounds %class.ResizeArrayRaw, ptr %50, i64 0, i32 2
  %52 = load i32, ptr %51, align 8, !tbaa !27
  %53 = icmp slt i32 %52, %48
  br i1 %53, label %54, label %92

54:                                               ; preds = %4
  %55 = getelementptr inbounds %class.ResizeArrayRaw, ptr %50, i64 0, i32 3
  %56 = load i32, ptr %55, align 4, !tbaa !30
  %57 = icmp slt i32 %56, %48
  br i1 %57, label %58, label %92

58:                                               ; preds = %54
  %59 = sitofp i32 %56 to float
  %60 = getelementptr inbounds %class.ResizeArrayRaw, ptr %50, i64 0, i32 5
  %61 = load float, ptr %60, align 4, !tbaa !31
  %62 = fmul float %61, %59
  %63 = fptosi float %62 to i32
  %64 = tail call i32 @llvm.smax.i32(i32 %63, i32 %48)
  %65 = sub nsw i32 %64, %56
  %66 = getelementptr inbounds %class.ResizeArrayRaw, ptr %50, i64 0, i32 6
  %67 = load i32, ptr %66, align 8, !tbaa !32
  %68 = icmp slt i32 %65, %67
  %69 = add nsw i32 %67, %56
  %70 = select i1 %68, i32 %69, i32 %64
  %71 = sext i32 %70 to i64
  %72 = shl nsw i64 %71, 1
  %73 = add nsw i64 %72, 31
  %74 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %73) #9
  %75 = getelementptr inbounds i8, ptr %74, i64 31
  %76 = ptrtoint ptr %75 to i64
  %77 = and i64 %76, 31
  %78 = sub nsw i64 0, %77
  %79 = getelementptr inbounds i8, ptr %75, i64 %78
  %80 = load ptr, ptr %50, align 8, !tbaa !33
  %81 = sext i32 %52 to i64
  %82 = shl nsw i64 %81, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %79, ptr align 1 %80, i64 %82, i1 false)
  %83 = icmp eq i32 %56, 0
  br i1 %83, label %89, label %84

84:                                               ; preds = %58
  %85 = getelementptr inbounds %class.ResizeArrayRaw, ptr %50, i64 0, i32 1
  %86 = load ptr, ptr %85, align 8, !tbaa !34
  %87 = icmp eq ptr %86, null
  br i1 %87, label %89, label %88

88:                                               ; preds = %84
  tail call void @_ZdaPv(ptr noundef nonnull %86) #10
  br label %89

89:                                               ; preds = %88, %84, %58
  %90 = getelementptr inbounds %class.ResizeArrayRaw, ptr %50, i64 0, i32 1
  store ptr %74, ptr %90, align 8, !tbaa !34
  store ptr %79, ptr %50, align 8, !tbaa !33
  store i32 %70, ptr %55, align 4, !tbaa !30
  %91 = load ptr, ptr %49, align 8, !tbaa !25
  br label %92

92:                                               ; preds = %4, %54, %89
  %93 = phi ptr [ %50, %4 ], [ %50, %54 ], [ %91, %89 ]
  store i32 %48, ptr %51, align 8, !tbaa !27
  %94 = load ptr, ptr %93, align 8, !tbaa !33
  %95 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %47, i64 0, i32 1, i32 1
  %96 = load ptr, ptr %95, align 8, !tbaa !35
  %97 = getelementptr inbounds %class.ResizeArrayRaw.23, ptr %96, i64 0, i32 2
  %98 = load i32, ptr %97, align 8, !tbaa !37
  %99 = icmp slt i32 %98, %48
  br i1 %99, label %100, label %138

100:                                              ; preds = %92
  %101 = getelementptr inbounds %class.ResizeArrayRaw.23, ptr %96, i64 0, i32 3
  %102 = load i32, ptr %101, align 4, !tbaa !39
  %103 = icmp slt i32 %102, %48
  br i1 %103, label %104, label %138

104:                                              ; preds = %100
  %105 = sitofp i32 %102 to float
  %106 = getelementptr inbounds %class.ResizeArrayRaw.23, ptr %96, i64 0, i32 5
  %107 = load float, ptr %106, align 4, !tbaa !40
  %108 = fmul float %107, %105
  %109 = fptosi float %108 to i32
  %110 = tail call i32 @llvm.smax.i32(i32 %109, i32 %48)
  %111 = sub nsw i32 %110, %102
  %112 = getelementptr inbounds %class.ResizeArrayRaw.23, ptr %96, i64 0, i32 6
  %113 = load i32, ptr %112, align 8, !tbaa !41
  %114 = icmp slt i32 %111, %113
  %115 = add nsw i32 %113, %102
  %116 = select i1 %114, i32 %115, i32 %110
  %117 = sext i32 %116 to i64
  %118 = shl nsw i64 %117, 3
  %119 = add nsw i64 %118, 31
  %120 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %119) #9
  %121 = getelementptr inbounds i8, ptr %120, i64 31
  %122 = ptrtoint ptr %121 to i64
  %123 = and i64 %122, 31
  %124 = sub nsw i64 0, %123
  %125 = getelementptr inbounds i8, ptr %121, i64 %124
  %126 = load ptr, ptr %96, align 8, !tbaa !42
  %127 = sext i32 %98 to i64
  %128 = shl nsw i64 %127, 3
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %125, ptr align 1 %126, i64 %128, i1 false)
  %129 = icmp eq i32 %102, 0
  br i1 %129, label %135, label %130

130:                                              ; preds = %104
  %131 = getelementptr inbounds %class.ResizeArrayRaw.23, ptr %96, i64 0, i32 1
  %132 = load ptr, ptr %131, align 8, !tbaa !43
  %133 = icmp eq ptr %132, null
  br i1 %133, label %135, label %134

134:                                              ; preds = %130
  tail call void @_ZdaPv(ptr noundef nonnull %132) #10
  br label %135

135:                                              ; preds = %134, %130, %104
  %136 = getelementptr inbounds %class.ResizeArrayRaw.23, ptr %96, i64 0, i32 1
  store ptr %120, ptr %136, align 8, !tbaa !43
  store ptr %125, ptr %96, align 8, !tbaa !42
  store i32 %116, ptr %101, align 4, !tbaa !39
  %137 = load ptr, ptr %95, align 8, !tbaa !35
  br label %138

138:                                              ; preds = %92, %100, %135
  %139 = phi ptr [ %96, %92 ], [ %96, %100 ], [ %137, %135 ]
  store i32 %48, ptr %97, align 8, !tbaa !37
  %140 = load ptr, ptr %139, align 8, !tbaa !42
  %141 = getelementptr inbounds i32, ptr %140, i64 1
  %142 = icmp eq i32 %10, 0
  %143 = icmp ne i32 %12, 0
  %144 = select i1 %142, i1 %143, i1 false
  %145 = select i1 %144, i32 0, i32 %48
  %146 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %47, i64 0, i32 2, i32 1
  %147 = load ptr, ptr %146, align 8, !tbaa !25
  %148 = getelementptr inbounds %class.ResizeArrayRaw, ptr %147, i64 0, i32 2
  %149 = load i32, ptr %148, align 8, !tbaa !27
  %150 = icmp slt i32 %149, %145
  br i1 %150, label %151, label %189

151:                                              ; preds = %138
  %152 = getelementptr inbounds %class.ResizeArrayRaw, ptr %147, i64 0, i32 3
  %153 = load i32, ptr %152, align 4, !tbaa !30
  %154 = icmp slt i32 %153, %145
  br i1 %154, label %155, label %189

155:                                              ; preds = %151
  %156 = sitofp i32 %153 to float
  %157 = getelementptr inbounds %class.ResizeArrayRaw, ptr %147, i64 0, i32 5
  %158 = load float, ptr %157, align 4, !tbaa !31
  %159 = fmul float %158, %156
  %160 = fptosi float %159 to i32
  %161 = tail call i32 @llvm.smax.i32(i32 %160, i32 %145)
  %162 = sub nsw i32 %161, %153
  %163 = getelementptr inbounds %class.ResizeArrayRaw, ptr %147, i64 0, i32 6
  %164 = load i32, ptr %163, align 8, !tbaa !32
  %165 = icmp slt i32 %162, %164
  %166 = add nsw i32 %164, %153
  %167 = select i1 %165, i32 %166, i32 %161
  %168 = sext i32 %167 to i64
  %169 = shl nsw i64 %168, 1
  %170 = add nsw i64 %169, 31
  %171 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %170) #9
  %172 = getelementptr inbounds i8, ptr %171, i64 31
  %173 = ptrtoint ptr %172 to i64
  %174 = and i64 %173, 31
  %175 = sub nsw i64 0, %174
  %176 = getelementptr inbounds i8, ptr %172, i64 %175
  %177 = load ptr, ptr %147, align 8, !tbaa !33
  %178 = sext i32 %149 to i64
  %179 = shl nsw i64 %178, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %176, ptr align 1 %177, i64 %179, i1 false)
  %180 = icmp eq i32 %153, 0
  br i1 %180, label %186, label %181

181:                                              ; preds = %155
  %182 = getelementptr inbounds %class.ResizeArrayRaw, ptr %147, i64 0, i32 1
  %183 = load ptr, ptr %182, align 8, !tbaa !34
  %184 = icmp eq ptr %183, null
  br i1 %184, label %186, label %185

185:                                              ; preds = %181
  tail call void @_ZdaPv(ptr noundef nonnull %183) #10
  br label %186

186:                                              ; preds = %185, %181, %155
  %187 = getelementptr inbounds %class.ResizeArrayRaw, ptr %147, i64 0, i32 1
  store ptr %171, ptr %187, align 8, !tbaa !34
  store ptr %176, ptr %147, align 8, !tbaa !33
  store i32 %167, ptr %152, align 4, !tbaa !30
  %188 = load ptr, ptr %146, align 8, !tbaa !25
  br label %189

189:                                              ; preds = %138, %151, %186
  %190 = phi ptr [ %147, %138 ], [ %147, %151 ], [ %188, %186 ]
  store i32 %145, ptr %148, align 8, !tbaa !27
  %191 = load ptr, ptr %190, align 8, !tbaa !33
  %192 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %47, i64 0, i32 3, i32 1
  %193 = load ptr, ptr %192, align 8, !tbaa !25
  %194 = getelementptr inbounds %class.ResizeArrayRaw, ptr %193, i64 0, i32 2
  %195 = load i32, ptr %194, align 8, !tbaa !27
  %196 = icmp slt i32 %195, %145
  br i1 %196, label %197, label %235

197:                                              ; preds = %189
  %198 = getelementptr inbounds %class.ResizeArrayRaw, ptr %193, i64 0, i32 3
  %199 = load i32, ptr %198, align 4, !tbaa !30
  %200 = icmp slt i32 %199, %145
  br i1 %200, label %201, label %235

201:                                              ; preds = %197
  %202 = sitofp i32 %199 to float
  %203 = getelementptr inbounds %class.ResizeArrayRaw, ptr %193, i64 0, i32 5
  %204 = load float, ptr %203, align 4, !tbaa !31
  %205 = fmul float %204, %202
  %206 = fptosi float %205 to i32
  %207 = tail call i32 @llvm.smax.i32(i32 %206, i32 %145)
  %208 = sub nsw i32 %207, %199
  %209 = getelementptr inbounds %class.ResizeArrayRaw, ptr %193, i64 0, i32 6
  %210 = load i32, ptr %209, align 8, !tbaa !32
  %211 = icmp slt i32 %208, %210
  %212 = add nsw i32 %210, %199
  %213 = select i1 %211, i32 %212, i32 %207
  %214 = sext i32 %213 to i64
  %215 = shl nsw i64 %214, 1
  %216 = add nsw i64 %215, 31
  %217 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %216) #9
  %218 = getelementptr inbounds i8, ptr %217, i64 31
  %219 = ptrtoint ptr %218 to i64
  %220 = and i64 %219, 31
  %221 = sub nsw i64 0, %220
  %222 = getelementptr inbounds i8, ptr %218, i64 %221
  %223 = load ptr, ptr %193, align 8, !tbaa !33
  %224 = sext i32 %195 to i64
  %225 = shl nsw i64 %224, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %222, ptr align 1 %223, i64 %225, i1 false)
  %226 = icmp eq i32 %199, 0
  br i1 %226, label %232, label %227

227:                                              ; preds = %201
  %228 = getelementptr inbounds %class.ResizeArrayRaw, ptr %193, i64 0, i32 1
  %229 = load ptr, ptr %228, align 8, !tbaa !34
  %230 = icmp eq ptr %229, null
  br i1 %230, label %232, label %231

231:                                              ; preds = %227
  tail call void @_ZdaPv(ptr noundef nonnull %229) #10
  br label %232

232:                                              ; preds = %231, %227, %201
  %233 = getelementptr inbounds %class.ResizeArrayRaw, ptr %193, i64 0, i32 1
  store ptr %217, ptr %233, align 8, !tbaa !34
  store ptr %222, ptr %193, align 8, !tbaa !33
  store i32 %213, ptr %198, align 4, !tbaa !30
  %234 = load ptr, ptr %192, align 8, !tbaa !25
  br label %235

235:                                              ; preds = %189, %197, %232
  %236 = phi ptr [ %193, %189 ], [ %193, %197 ], [ %234, %232 ]
  store i32 %145, ptr %194, align 8, !tbaa !27
  %237 = load ptr, ptr %236, align 8, !tbaa !33
  %238 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %47, i64 0, i32 4, i32 1
  %239 = load ptr, ptr %238, align 8, !tbaa !25
  %240 = getelementptr inbounds %class.ResizeArrayRaw, ptr %239, i64 0, i32 2
  %241 = load i32, ptr %240, align 8, !tbaa !27
  %242 = icmp slt i32 %241, %145
  br i1 %242, label %243, label %281

243:                                              ; preds = %235
  %244 = getelementptr inbounds %class.ResizeArrayRaw, ptr %239, i64 0, i32 3
  %245 = load i32, ptr %244, align 4, !tbaa !30
  %246 = icmp slt i32 %245, %145
  br i1 %246, label %247, label %281

247:                                              ; preds = %243
  %248 = sitofp i32 %245 to float
  %249 = getelementptr inbounds %class.ResizeArrayRaw, ptr %239, i64 0, i32 5
  %250 = load float, ptr %249, align 4, !tbaa !31
  %251 = fmul float %250, %248
  %252 = fptosi float %251 to i32
  %253 = tail call i32 @llvm.smax.i32(i32 %252, i32 %145)
  %254 = sub nsw i32 %253, %245
  %255 = getelementptr inbounds %class.ResizeArrayRaw, ptr %239, i64 0, i32 6
  %256 = load i32, ptr %255, align 8, !tbaa !32
  %257 = icmp slt i32 %254, %256
  %258 = add nsw i32 %256, %245
  %259 = select i1 %257, i32 %258, i32 %253
  %260 = sext i32 %259 to i64
  %261 = shl nsw i64 %260, 1
  %262 = add nsw i64 %261, 31
  %263 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %262) #9
  %264 = getelementptr inbounds i8, ptr %263, i64 31
  %265 = ptrtoint ptr %264 to i64
  %266 = and i64 %265, 31
  %267 = sub nsw i64 0, %266
  %268 = getelementptr inbounds i8, ptr %264, i64 %267
  %269 = load ptr, ptr %239, align 8, !tbaa !33
  %270 = sext i32 %241 to i64
  %271 = shl nsw i64 %270, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %268, ptr align 1 %269, i64 %271, i1 false)
  %272 = icmp eq i32 %245, 0
  br i1 %272, label %278, label %273

273:                                              ; preds = %247
  %274 = getelementptr inbounds %class.ResizeArrayRaw, ptr %239, i64 0, i32 1
  %275 = load ptr, ptr %274, align 8, !tbaa !34
  %276 = icmp eq ptr %275, null
  br i1 %276, label %278, label %277

277:                                              ; preds = %273
  tail call void @_ZdaPv(ptr noundef nonnull %275) #10
  br label %278

278:                                              ; preds = %277, %273, %247
  %279 = getelementptr inbounds %class.ResizeArrayRaw, ptr %239, i64 0, i32 1
  store ptr %263, ptr %279, align 8, !tbaa !34
  store ptr %268, ptr %239, align 8, !tbaa !33
  store i32 %259, ptr %244, align 4, !tbaa !30
  %280 = load ptr, ptr %238, align 8, !tbaa !25
  br label %281

281:                                              ; preds = %235, %243, %278
  %282 = phi ptr [ %239, %235 ], [ %239, %243 ], [ %280, %278 ]
  store i32 %145, ptr %240, align 8, !tbaa !27
  %283 = load ptr, ptr %282, align 8, !tbaa !33
  %284 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %47, i64 0, i32 5, i32 1
  %285 = load ptr, ptr %284, align 8, !tbaa !25
  %286 = getelementptr inbounds %class.ResizeArrayRaw, ptr %285, i64 0, i32 2
  %287 = load i32, ptr %286, align 8, !tbaa !27
  %288 = icmp slt i32 %287, %145
  br i1 %288, label %289, label %327

289:                                              ; preds = %281
  %290 = getelementptr inbounds %class.ResizeArrayRaw, ptr %285, i64 0, i32 3
  %291 = load i32, ptr %290, align 4, !tbaa !30
  %292 = icmp slt i32 %291, %145
  br i1 %292, label %293, label %327

293:                                              ; preds = %289
  %294 = sitofp i32 %291 to float
  %295 = getelementptr inbounds %class.ResizeArrayRaw, ptr %285, i64 0, i32 5
  %296 = load float, ptr %295, align 4, !tbaa !31
  %297 = fmul float %296, %294
  %298 = fptosi float %297 to i32
  %299 = tail call i32 @llvm.smax.i32(i32 %298, i32 %145)
  %300 = sub nsw i32 %299, %291
  %301 = getelementptr inbounds %class.ResizeArrayRaw, ptr %285, i64 0, i32 6
  %302 = load i32, ptr %301, align 8, !tbaa !32
  %303 = icmp slt i32 %300, %302
  %304 = add nsw i32 %302, %291
  %305 = select i1 %303, i32 %304, i32 %299
  %306 = sext i32 %305 to i64
  %307 = shl nsw i64 %306, 1
  %308 = add nsw i64 %307, 31
  %309 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %308) #9
  %310 = getelementptr inbounds i8, ptr %309, i64 31
  %311 = ptrtoint ptr %310 to i64
  %312 = and i64 %311, 31
  %313 = sub nsw i64 0, %312
  %314 = getelementptr inbounds i8, ptr %310, i64 %313
  %315 = load ptr, ptr %285, align 8, !tbaa !33
  %316 = sext i32 %287 to i64
  %317 = shl nsw i64 %316, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %314, ptr align 1 %315, i64 %317, i1 false)
  %318 = icmp eq i32 %291, 0
  br i1 %318, label %324, label %319

319:                                              ; preds = %293
  %320 = getelementptr inbounds %class.ResizeArrayRaw, ptr %285, i64 0, i32 1
  %321 = load ptr, ptr %320, align 8, !tbaa !34
  %322 = icmp eq ptr %321, null
  br i1 %322, label %324, label %323

323:                                              ; preds = %319
  tail call void @_ZdaPv(ptr noundef nonnull %321) #10
  br label %324

324:                                              ; preds = %323, %319, %293
  %325 = getelementptr inbounds %class.ResizeArrayRaw, ptr %285, i64 0, i32 1
  store ptr %309, ptr %325, align 8, !tbaa !34
  store ptr %314, ptr %285, align 8, !tbaa !33
  store i32 %305, ptr %290, align 4, !tbaa !30
  %326 = load ptr, ptr %284, align 8, !tbaa !25
  br label %327

327:                                              ; preds = %281, %289, %324
  %328 = phi ptr [ %285, %281 ], [ %285, %289 ], [ %326, %324 ]
  store i32 %145, ptr %286, align 8, !tbaa !27
  %329 = load ptr, ptr %328, align 8, !tbaa !33
  %330 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %47, i64 0, i32 6, i32 1
  %331 = load ptr, ptr %330, align 8, !tbaa !25
  %332 = getelementptr inbounds %class.ResizeArrayRaw, ptr %331, i64 0, i32 2
  %333 = load i32, ptr %332, align 8, !tbaa !27
  %334 = icmp slt i32 %333, %145
  br i1 %334, label %335, label %373

335:                                              ; preds = %327
  %336 = getelementptr inbounds %class.ResizeArrayRaw, ptr %331, i64 0, i32 3
  %337 = load i32, ptr %336, align 4, !tbaa !30
  %338 = icmp slt i32 %337, %145
  br i1 %338, label %339, label %373

339:                                              ; preds = %335
  %340 = sitofp i32 %337 to float
  %341 = getelementptr inbounds %class.ResizeArrayRaw, ptr %331, i64 0, i32 5
  %342 = load float, ptr %341, align 4, !tbaa !31
  %343 = fmul float %342, %340
  %344 = fptosi float %343 to i32
  %345 = tail call i32 @llvm.smax.i32(i32 %344, i32 %145)
  %346 = sub nsw i32 %345, %337
  %347 = getelementptr inbounds %class.ResizeArrayRaw, ptr %331, i64 0, i32 6
  %348 = load i32, ptr %347, align 8, !tbaa !32
  %349 = icmp slt i32 %346, %348
  %350 = add nsw i32 %348, %337
  %351 = select i1 %349, i32 %350, i32 %345
  %352 = sext i32 %351 to i64
  %353 = shl nsw i64 %352, 1
  %354 = add nsw i64 %353, 31
  %355 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %354) #9
  %356 = getelementptr inbounds i8, ptr %355, i64 31
  %357 = ptrtoint ptr %356 to i64
  %358 = and i64 %357, 31
  %359 = sub nsw i64 0, %358
  %360 = getelementptr inbounds i8, ptr %356, i64 %359
  %361 = load ptr, ptr %331, align 8, !tbaa !33
  %362 = sext i32 %333 to i64
  %363 = shl nsw i64 %362, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %360, ptr align 1 %361, i64 %363, i1 false)
  %364 = icmp eq i32 %337, 0
  br i1 %364, label %370, label %365

365:                                              ; preds = %339
  %366 = getelementptr inbounds %class.ResizeArrayRaw, ptr %331, i64 0, i32 1
  %367 = load ptr, ptr %366, align 8, !tbaa !34
  %368 = icmp eq ptr %367, null
  br i1 %368, label %370, label %369

369:                                              ; preds = %365
  tail call void @_ZdaPv(ptr noundef nonnull %367) #10
  br label %370

370:                                              ; preds = %369, %365, %339
  %371 = getelementptr inbounds %class.ResizeArrayRaw, ptr %331, i64 0, i32 1
  store ptr %355, ptr %371, align 8, !tbaa !34
  store ptr %360, ptr %331, align 8, !tbaa !33
  store i32 %351, ptr %336, align 4, !tbaa !30
  %372 = load ptr, ptr %330, align 8, !tbaa !25
  br label %373

373:                                              ; preds = %327, %335, %370
  %374 = phi ptr [ %331, %327 ], [ %331, %335 ], [ %372, %370 ]
  store i32 %145, ptr %332, align 8, !tbaa !27
  %375 = load ptr, ptr %374, align 8, !tbaa !33
  %376 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %47, i64 0, i32 15, i32 1
  %377 = load ptr, ptr %376, align 8, !tbaa !25
  %378 = getelementptr inbounds %class.ResizeArrayRaw, ptr %377, i64 0, i32 2
  %379 = load i32, ptr %378, align 8, !tbaa !27
  %380 = icmp slt i32 %379, %145
  br i1 %380, label %381, label %419

381:                                              ; preds = %373
  %382 = getelementptr inbounds %class.ResizeArrayRaw, ptr %377, i64 0, i32 3
  %383 = load i32, ptr %382, align 4, !tbaa !30
  %384 = icmp slt i32 %383, %145
  br i1 %384, label %385, label %419

385:                                              ; preds = %381
  %386 = sitofp i32 %383 to float
  %387 = getelementptr inbounds %class.ResizeArrayRaw, ptr %377, i64 0, i32 5
  %388 = load float, ptr %387, align 4, !tbaa !31
  %389 = fmul float %388, %386
  %390 = fptosi float %389 to i32
  %391 = tail call i32 @llvm.smax.i32(i32 %390, i32 %145)
  %392 = sub nsw i32 %391, %383
  %393 = getelementptr inbounds %class.ResizeArrayRaw, ptr %377, i64 0, i32 6
  %394 = load i32, ptr %393, align 8, !tbaa !32
  %395 = icmp slt i32 %392, %394
  %396 = add nsw i32 %394, %383
  %397 = select i1 %395, i32 %396, i32 %391
  %398 = sext i32 %397 to i64
  %399 = shl nsw i64 %398, 1
  %400 = add nsw i64 %399, 31
  %401 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %400) #9
  %402 = getelementptr inbounds i8, ptr %401, i64 31
  %403 = ptrtoint ptr %402 to i64
  %404 = and i64 %403, 31
  %405 = sub nsw i64 0, %404
  %406 = getelementptr inbounds i8, ptr %402, i64 %405
  %407 = load ptr, ptr %377, align 8, !tbaa !33
  %408 = sext i32 %379 to i64
  %409 = shl nsw i64 %408, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %406, ptr align 1 %407, i64 %409, i1 false)
  %410 = icmp eq i32 %383, 0
  br i1 %410, label %416, label %411

411:                                              ; preds = %385
  %412 = getelementptr inbounds %class.ResizeArrayRaw, ptr %377, i64 0, i32 1
  %413 = load ptr, ptr %412, align 8, !tbaa !34
  %414 = icmp eq ptr %413, null
  br i1 %414, label %416, label %415

415:                                              ; preds = %411
  tail call void @_ZdaPv(ptr noundef nonnull %413) #10
  br label %416

416:                                              ; preds = %415, %411, %385
  %417 = getelementptr inbounds %class.ResizeArrayRaw, ptr %377, i64 0, i32 1
  store ptr %401, ptr %417, align 8, !tbaa !34
  store ptr %406, ptr %377, align 8, !tbaa !33
  store i32 %397, ptr %382, align 4, !tbaa !30
  %418 = load ptr, ptr %376, align 8, !tbaa !25
  br label %419

419:                                              ; preds = %373, %381, %416
  %420 = phi ptr [ %377, %373 ], [ %377, %381 ], [ %418, %416 ]
  store i32 %145, ptr %378, align 8, !tbaa !27
  %421 = load ptr, ptr %420, align 8, !tbaa !33
  %422 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %47, i64 0, i32 16, i32 1
  %423 = load ptr, ptr %422, align 8, !tbaa !25
  %424 = getelementptr inbounds %class.ResizeArrayRaw, ptr %423, i64 0, i32 2
  %425 = load i32, ptr %424, align 8, !tbaa !27
  %426 = icmp slt i32 %425, %145
  br i1 %426, label %427, label %465

427:                                              ; preds = %419
  %428 = getelementptr inbounds %class.ResizeArrayRaw, ptr %423, i64 0, i32 3
  %429 = load i32, ptr %428, align 4, !tbaa !30
  %430 = icmp slt i32 %429, %145
  br i1 %430, label %431, label %465

431:                                              ; preds = %427
  %432 = sitofp i32 %429 to float
  %433 = getelementptr inbounds %class.ResizeArrayRaw, ptr %423, i64 0, i32 5
  %434 = load float, ptr %433, align 4, !tbaa !31
  %435 = fmul float %434, %432
  %436 = fptosi float %435 to i32
  %437 = tail call i32 @llvm.smax.i32(i32 %436, i32 %145)
  %438 = sub nsw i32 %437, %429
  %439 = getelementptr inbounds %class.ResizeArrayRaw, ptr %423, i64 0, i32 6
  %440 = load i32, ptr %439, align 8, !tbaa !32
  %441 = icmp slt i32 %438, %440
  %442 = add nsw i32 %440, %429
  %443 = select i1 %441, i32 %442, i32 %437
  %444 = sext i32 %443 to i64
  %445 = shl nsw i64 %444, 1
  %446 = add nsw i64 %445, 31
  %447 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %446) #9
  %448 = getelementptr inbounds i8, ptr %447, i64 31
  %449 = ptrtoint ptr %448 to i64
  %450 = and i64 %449, 31
  %451 = sub nsw i64 0, %450
  %452 = getelementptr inbounds i8, ptr %448, i64 %451
  %453 = load ptr, ptr %423, align 8, !tbaa !33
  %454 = sext i32 %425 to i64
  %455 = shl nsw i64 %454, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %452, ptr align 1 %453, i64 %455, i1 false)
  %456 = icmp eq i32 %429, 0
  br i1 %456, label %462, label %457

457:                                              ; preds = %431
  %458 = getelementptr inbounds %class.ResizeArrayRaw, ptr %423, i64 0, i32 1
  %459 = load ptr, ptr %458, align 8, !tbaa !34
  %460 = icmp eq ptr %459, null
  br i1 %460, label %462, label %461

461:                                              ; preds = %457
  tail call void @_ZdaPv(ptr noundef nonnull %459) #10
  br label %462

462:                                              ; preds = %461, %457, %431
  %463 = getelementptr inbounds %class.ResizeArrayRaw, ptr %423, i64 0, i32 1
  store ptr %447, ptr %463, align 8, !tbaa !34
  store ptr %452, ptr %423, align 8, !tbaa !33
  store i32 %443, ptr %428, align 4, !tbaa !30
  %464 = load ptr, ptr %422, align 8, !tbaa !25
  br label %465

465:                                              ; preds = %419, %427, %462
  %466 = phi ptr [ %423, %419 ], [ %423, %427 ], [ %464, %462 ]
  store i32 %145, ptr %424, align 8, !tbaa !27
  %467 = load ptr, ptr %466, align 8, !tbaa !33
  br i1 %144, label %609, label %468

468:                                              ; preds = %465
  %469 = icmp sgt i32 %38, 0
  br i1 %469, label %470, label %600

470:                                              ; preds = %468
  %471 = zext i32 %38 to i64
  %472 = and i64 %471, 1
  %473 = icmp eq i32 %38, 1
  br i1 %473, label %506, label %474

474:                                              ; preds = %470
  %475 = and i64 %471, 4294967294
  br label %476

476:                                              ; preds = %501, %474
  %477 = phi i64 [ 0, %474 ], [ %503, %501 ]
  %478 = phi i32 [ 0, %474 ], [ %502, %501 ]
  %479 = phi i64 [ 0, %474 ], [ %504, %501 ]
  %480 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %477, i32 4
  %481 = load i8, ptr %480, align 1
  %482 = and i8 %481, 7
  %483 = icmp eq i8 %482, 0
  br i1 %483, label %489, label %484

484:                                              ; preds = %476
  %485 = trunc i64 %477 to i16
  %486 = add nsw i32 %478, 1
  %487 = sext i32 %478 to i64
  %488 = getelementptr inbounds i16, ptr %191, i64 %487
  store i16 %485, ptr %488, align 2, !tbaa !44
  br label %489

489:                                              ; preds = %476, %484
  %490 = phi i32 [ %486, %484 ], [ %478, %476 ]
  %491 = or i64 %477, 1
  %492 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %491, i32 4
  %493 = load i8, ptr %492, align 1
  %494 = and i8 %493, 7
  %495 = icmp eq i8 %494, 0
  br i1 %495, label %501, label %496

496:                                              ; preds = %489
  %497 = trunc i64 %491 to i16
  %498 = add nsw i32 %490, 1
  %499 = sext i32 %490 to i64
  %500 = getelementptr inbounds i16, ptr %191, i64 %499
  store i16 %497, ptr %500, align 2, !tbaa !44
  br label %501

501:                                              ; preds = %496, %489
  %502 = phi i32 [ %498, %496 ], [ %490, %489 ]
  %503 = add nuw nsw i64 %477, 2
  %504 = add i64 %479, 2
  %505 = icmp eq i64 %504, %475
  br i1 %505, label %506, label %476

506:                                              ; preds = %501, %470
  %507 = phi i32 [ undef, %470 ], [ %502, %501 ]
  %508 = phi i64 [ 0, %470 ], [ %503, %501 ]
  %509 = phi i32 [ 0, %470 ], [ %502, %501 ]
  %510 = icmp eq i64 %472, 0
  br i1 %510, label %521, label %511

511:                                              ; preds = %506
  %512 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %508, i32 4
  %513 = load i8, ptr %512, align 1
  %514 = and i8 %513, 7
  %515 = icmp eq i8 %514, 0
  br i1 %515, label %521, label %516

516:                                              ; preds = %511
  %517 = trunc i64 %508 to i16
  %518 = add nsw i32 %509, 1
  %519 = sext i32 %509 to i64
  %520 = getelementptr inbounds i16, ptr %191, i64 %519
  store i16 %517, ptr %520, align 2, !tbaa !44
  br label %521

521:                                              ; preds = %511, %516, %506
  %522 = phi i32 [ %507, %506 ], [ %518, %516 ], [ %509, %511 ]
  %523 = icmp eq i32 %522, 0
  br i1 %523, label %531, label %524

524:                                              ; preds = %521
  %525 = add nsw i32 %522, -1
  %526 = sext i32 %525 to i64
  %527 = getelementptr inbounds i16, ptr %191, i64 %526
  %528 = load i16, ptr %527, align 2, !tbaa !44
  %529 = sext i32 %522 to i64
  %530 = getelementptr inbounds i16, ptr %191, i64 %529
  store i16 %528, ptr %530, align 2, !tbaa !44
  br label %531

531:                                              ; preds = %524, %521
  %532 = load i32, ptr @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4, !tbaa !5
  %533 = icmp ne i32 %532, 0
  %534 = icmp sgt i32 %522, 0
  %535 = and i1 %533, %534
  br i1 %535, label %536, label %600

536:                                              ; preds = %531
  %537 = zext i32 %522 to i64
  %538 = and i64 %537, 1
  %539 = icmp eq i32 %522, 1
  br i1 %539, label %574, label %540

540:                                              ; preds = %536
  %541 = and i64 %537, 4294967294
  br label %542

542:                                              ; preds = %569, %540
  %543 = phi i64 [ 0, %540 ], [ %571, %569 ]
  %544 = phi i32 [ 0, %540 ], [ %570, %569 ]
  %545 = phi i64 [ 0, %540 ], [ %572, %569 ]
  %546 = getelementptr inbounds i16, ptr %191, i64 %543
  %547 = load i16, ptr %546, align 2, !tbaa !44
  %548 = zext i16 %547 to i64
  %549 = getelementptr inbounds %struct.CompAtomExt, ptr %45, i64 %548
  %550 = load i32, ptr %549, align 4
  %551 = icmp sgt i32 %550, -1
  br i1 %551, label %552, label %556

552:                                              ; preds = %542
  %553 = add nsw i32 %544, 1
  %554 = sext i32 %544 to i64
  %555 = getelementptr inbounds i16, ptr %237, i64 %554
  store i16 %547, ptr %555, align 2, !tbaa !44
  br label %556

556:                                              ; preds = %542, %552
  %557 = phi i32 [ %544, %542 ], [ %553, %552 ]
  %558 = or i64 %543, 1
  %559 = getelementptr inbounds i16, ptr %191, i64 %558
  %560 = load i16, ptr %559, align 2, !tbaa !44
  %561 = zext i16 %560 to i64
  %562 = getelementptr inbounds %struct.CompAtomExt, ptr %45, i64 %561
  %563 = load i32, ptr %562, align 4
  %564 = icmp sgt i32 %563, -1
  br i1 %564, label %565, label %569

565:                                              ; preds = %556
  %566 = add nsw i32 %557, 1
  %567 = sext i32 %557 to i64
  %568 = getelementptr inbounds i16, ptr %237, i64 %567
  store i16 %560, ptr %568, align 2, !tbaa !44
  br label %569

569:                                              ; preds = %565, %556
  %570 = phi i32 [ %557, %556 ], [ %566, %565 ]
  %571 = add nuw nsw i64 %543, 2
  %572 = add i64 %545, 2
  %573 = icmp eq i64 %572, %541
  br i1 %573, label %574, label %542

574:                                              ; preds = %569, %536
  %575 = phi i32 [ undef, %536 ], [ %570, %569 ]
  %576 = phi i64 [ 0, %536 ], [ %571, %569 ]
  %577 = phi i32 [ 0, %536 ], [ %570, %569 ]
  %578 = icmp eq i64 %538, 0
  br i1 %578, label %590, label %579

579:                                              ; preds = %574
  %580 = getelementptr inbounds i16, ptr %191, i64 %576
  %581 = load i16, ptr %580, align 2, !tbaa !44
  %582 = zext i16 %581 to i64
  %583 = getelementptr inbounds %struct.CompAtomExt, ptr %45, i64 %582
  %584 = load i32, ptr %583, align 4
  %585 = icmp sgt i32 %584, -1
  br i1 %585, label %586, label %590

586:                                              ; preds = %579
  %587 = add nsw i32 %577, 1
  %588 = sext i32 %577 to i64
  %589 = getelementptr inbounds i16, ptr %237, i64 %588
  store i16 %581, ptr %589, align 2, !tbaa !44
  br label %590

590:                                              ; preds = %579, %586, %574
  %591 = phi i32 [ %575, %574 ], [ %577, %579 ], [ %587, %586 ]
  %592 = icmp eq i32 %591, 0
  br i1 %592, label %600, label %593

593:                                              ; preds = %590
  %594 = add nsw i32 %591, -1
  %595 = sext i32 %594 to i64
  %596 = getelementptr inbounds i16, ptr %237, i64 %595
  %597 = load i16, ptr %596, align 2, !tbaa !44
  %598 = sext i32 %591 to i64
  %599 = getelementptr inbounds i16, ptr %237, i64 %598
  store i16 %597, ptr %599, align 2, !tbaa !44
  br label %600

600:                                              ; preds = %468, %531, %593, %590
  %601 = phi i32 [ %522, %593 ], [ %522, %590 ], [ %522, %531 ], [ 0, %468 ]
  %602 = phi i32 [ %591, %593 ], [ 0, %590 ], [ 0, %531 ], [ 0, %468 ]
  %603 = load i32, ptr %13, align 8, !tbaa !17
  %604 = add nsw i32 %603, 1
  store i32 %604, ptr %13, align 8, !tbaa !17
  %605 = trunc i32 %36 to i16
  %606 = load ptr, ptr %8, align 8, !tbaa !46
  %607 = sext i32 %603 to i64
  %608 = getelementptr inbounds i16, ptr %606, i64 %607
  store i16 %605, ptr %608, align 2, !tbaa !44
  br label %619

609:                                              ; preds = %465
  %610 = load ptr, ptr %8, align 8, !tbaa !46
  %611 = load i32, ptr %13, align 8, !tbaa !17
  %612 = add nsw i32 %611, 1
  store i32 %612, ptr %13, align 8, !tbaa !17
  %613 = sext i32 %611 to i64
  %614 = getelementptr inbounds i16, ptr %610, i64 %613
  %615 = load i16, ptr %614, align 2, !tbaa !44
  %616 = zext i16 %615 to i32
  %617 = icmp eq i32 %36, %616
  br i1 %617, label %619, label %618

618:                                              ; preds = %609
  tail call void @_Z8NAMD_bugPKc(ptr noundef nonnull @.str)
  br label %619

619:                                              ; preds = %609, %618, %600
  %620 = phi i32 [ 0, %618 ], [ 0, %609 ], [ %601, %600 ]
  %621 = phi i32 [ 0, %618 ], [ 0, %609 ], [ %602, %600 ]
  %622 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %47, i64 0, i32 18, i32 1
  %623 = load ptr, ptr %622, align 8, !tbaa !172
  tail call void @_ZN14ResizeArrayRawI6VectorE6resizeEi(ptr noundef nonnull align 8 dereferenceable(36) %623, i32 noundef %36)
  %624 = load ptr, ptr %622, align 8, !tbaa !172
  %625 = load ptr, ptr %624, align 8, !tbaa !174
  %626 = sext i32 %36 to i64
  %627 = mul nsw i64 %626, 24
  tail call void @llvm.memset.p0.i64(ptr align 1 %625, i8 0, i64 %627, i1 false)
  %628 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 18
  %629 = load i32, ptr %628, align 4, !tbaa !48
  %630 = add nsw i32 %629, -1
  %631 = add nsw i32 %36, -1
  %632 = icmp sgt i32 %36, 1
  br i1 %632, label %633, label %2190

633:                                              ; preds = %619
  %634 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 16
  %635 = load i32, ptr %634, align 4, !tbaa !47
  %636 = getelementptr inbounds %class.Molecule, ptr %25, i64 0, i32 1
  %637 = getelementptr inbounds %class.Molecule, ptr %25, i64 0, i32 4
  %638 = getelementptr inbounds %class.Molecule, ptr %25, i64 0, i32 2
  %639 = getelementptr inbounds %class.Molecule, ptr %25, i64 0, i32 3
  %640 = ptrtoint ptr %421 to i64
  %641 = add nsw i32 %38, 10
  %642 = getelementptr inbounds %class.Pairlists, ptr %8, i64 0, i32 2
  %643 = ptrtoint ptr %467 to i64
  %644 = ptrtoint ptr %329 to i64
  %645 = ptrtoint ptr %375 to i64
  %646 = fmul double %30, 2.000000e+00
  %647 = fmul double %30, 4.000000e+00
  %648 = fmul double %30, 6.000000e+00
  %649 = sext i32 %620 to i64
  %650 = sext i32 %621 to i64
  %651 = insertelement <2 x double> poison, double %23, i64 0
  %652 = shufflevector <2 x double> %651, <2 x double> poison, <2 x i32> zeroinitializer
  br label %653

653:                                              ; preds = %633, %2175
  %654 = phi i32 [ 0, %633 ], [ %2187, %2175 ]
  %655 = phi double [ 0.000000e+00, %633 ], [ %2186, %2175 ]
  %656 = phi i32 [ 0, %633 ], [ %2188, %2175 ]
  %657 = phi ptr [ null, %633 ], [ %2184, %2175 ]
  %658 = phi ptr [ null, %633 ], [ %2183, %2175 ]
  %659 = phi ptr [ null, %633 ], [ %2182, %2175 ]
  %660 = phi i32 [ 0, %633 ], [ %2181, %2175 ]
  %661 = phi i32 [ 0, %633 ], [ %2180, %2175 ]
  %662 = phi i32 [ 0, %633 ], [ %2179, %2175 ]
  %663 = phi i32 [ 0, %633 ], [ %2178, %2175 ]
  %664 = phi i32 [ 0, %633 ], [ %2177, %2175 ]
  %665 = phi i32 [ %635, %633 ], [ %2176, %2175 ]
  %666 = sext i32 %656 to i64
  %667 = getelementptr inbounds %struct.CompAtom, ptr %39, i64 %666
  %668 = getelementptr inbounds %struct.CompAtomExt, ptr %43, i64 %666
  %669 = getelementptr inbounds %struct.CompAtom, ptr %39, i64 %666, i32 4
  %670 = load i8, ptr %669, align 1
  %671 = lshr i8 %670, 3
  %672 = and i8 %671, 15
  %673 = zext i8 %672 to i32
  %674 = icmp eq i8 %672, 0
  br i1 %674, label %681, label %675

675:                                              ; preds = %653
  %676 = icmp eq i32 %665, 0
  br i1 %676, label %681, label %677

677:                                              ; preds = %675
  %678 = add nsw i32 %665, -1
  %679 = add nsw i32 %656, -1
  %680 = add i32 %679, %673
  br label %2175

681:                                              ; preds = %675, %653
  %682 = phi i32 [ %665, %653 ], [ %630, %675 ]
  %683 = load <2 x double>, ptr %667, align 8, !tbaa !19
  %684 = fadd <2 x double> %15, %683
  %685 = getelementptr inbounds %class.Vector, ptr %667, i64 0, i32 2
  %686 = load double, ptr %685, align 8, !tbaa !49
  %687 = fadd double %17, %686
  %688 = add nsw i32 %656, %673
  %689 = select i1 %674, i32 %660, i32 %688
  br i1 %144, label %1856, label %690

690:                                              ; preds = %681
  %691 = load i32, ptr %668, align 4
  %692 = shl i32 %691, 2
  %693 = ashr exact i32 %692, 2
  %694 = load ptr, ptr %636, align 8, !tbaa !51
  %695 = sext i32 %693 to i64
  %696 = getelementptr inbounds %class.ExclusionCheck, ptr %694, i64 %695
  %697 = load i32, ptr %696, align 8, !tbaa !53
  %698 = getelementptr inbounds %class.ExclusionCheck, ptr %694, i64 %695, i32 1
  %699 = load i32, ptr %698, align 4, !tbaa !55
  %700 = getelementptr inbounds %class.ExclusionCheck, ptr %694, i64 %695, i32 2
  %701 = load ptr, ptr %700, align 8, !tbaa !56
  %702 = icmp eq ptr %701, null
  br i1 %702, label %707, label %703

703:                                              ; preds = %690
  %704 = sext i32 %697 to i64
  %705 = sub nsw i64 0, %704
  %706 = getelementptr inbounds i8, ptr %701, i64 %705
  br label %933

707:                                              ; preds = %690
  %708 = icmp eq ptr %657, null
  br i1 %708, label %796, label %709

709:                                              ; preds = %707
  %710 = load i32, ptr %658, align 4, !tbaa !5
  %711 = icmp slt i32 %710, 1
  br i1 %711, label %759, label %712

712:                                              ; preds = %709
  %713 = add nuw i32 %710, 1
  %714 = zext i32 %713 to i64
  %715 = add nsw i64 %714, -1
  %716 = add nsw i64 %714, -2
  %717 = and i64 %715, 3
  %718 = icmp ult i64 %716, 3
  br i1 %718, label %746, label %719

719:                                              ; preds = %712
  %720 = and i64 %715, -4
  br label %721

721:                                              ; preds = %721, %719
  %722 = phi i64 [ 1, %719 ], [ %743, %721 ]
  %723 = phi i64 [ 0, %719 ], [ %744, %721 ]
  %724 = getelementptr inbounds i32, ptr %658, i64 %722
  %725 = load i32, ptr %724, align 4, !tbaa !5
  %726 = sext i32 %725 to i64
  %727 = getelementptr inbounds i8, ptr %657, i64 %726
  store i8 0, ptr %727, align 1, !tbaa !57
  %728 = add nuw nsw i64 %722, 1
  %729 = getelementptr inbounds i32, ptr %658, i64 %728
  %730 = load i32, ptr %729, align 4, !tbaa !5
  %731 = sext i32 %730 to i64
  %732 = getelementptr inbounds i8, ptr %657, i64 %731
  store i8 0, ptr %732, align 1, !tbaa !57
  %733 = add nuw nsw i64 %722, 2
  %734 = getelementptr inbounds i32, ptr %658, i64 %733
  %735 = load i32, ptr %734, align 4, !tbaa !5
  %736 = sext i32 %735 to i64
  %737 = getelementptr inbounds i8, ptr %657, i64 %736
  store i8 0, ptr %737, align 1, !tbaa !57
  %738 = add nuw nsw i64 %722, 3
  %739 = getelementptr inbounds i32, ptr %658, i64 %738
  %740 = load i32, ptr %739, align 4, !tbaa !5
  %741 = sext i32 %740 to i64
  %742 = getelementptr inbounds i8, ptr %657, i64 %741
  store i8 0, ptr %742, align 1, !tbaa !57
  %743 = add nuw nsw i64 %722, 4
  %744 = add i64 %723, 4
  %745 = icmp eq i64 %744, %720
  br i1 %745, label %746, label %721

746:                                              ; preds = %721, %712
  %747 = phi i64 [ 1, %712 ], [ %743, %721 ]
  %748 = icmp eq i64 %717, 0
  br i1 %748, label %759, label %749

749:                                              ; preds = %746, %749
  %750 = phi i64 [ %756, %749 ], [ %747, %746 ]
  %751 = phi i64 [ %757, %749 ], [ 0, %746 ]
  %752 = getelementptr inbounds i32, ptr %658, i64 %750
  %753 = load i32, ptr %752, align 4, !tbaa !5
  %754 = sext i32 %753 to i64
  %755 = getelementptr inbounds i8, ptr %657, i64 %754
  store i8 0, ptr %755, align 1, !tbaa !57
  %756 = add nuw nsw i64 %750, 1
  %757 = add i64 %751, 1
  %758 = icmp eq i64 %757, %717
  br i1 %758, label %759, label %749, !llvm.loop !282

759:                                              ; preds = %746, %749, %709
  %760 = load i32, ptr %659, align 4, !tbaa !5
  %761 = icmp slt i32 %760, 1
  br i1 %761, label %816, label %762

762:                                              ; preds = %759
  %763 = add nuw i32 %760, 1
  %764 = zext i32 %763 to i64
  %765 = add nsw i64 %764, -1
  %766 = add nsw i64 %764, -2
  %767 = and i64 %765, 3
  %768 = icmp ult i64 %766, 3
  br i1 %768, label %803, label %769

769:                                              ; preds = %762
  %770 = and i64 %765, -4
  br label %771

771:                                              ; preds = %771, %769
  %772 = phi i64 [ 1, %769 ], [ %793, %771 ]
  %773 = phi i64 [ 0, %769 ], [ %794, %771 ]
  %774 = getelementptr inbounds i32, ptr %659, i64 %772
  %775 = load i32, ptr %774, align 4, !tbaa !5
  %776 = sext i32 %775 to i64
  %777 = getelementptr inbounds i8, ptr %657, i64 %776
  store i8 0, ptr %777, align 1, !tbaa !57
  %778 = add nuw nsw i64 %772, 1
  %779 = getelementptr inbounds i32, ptr %659, i64 %778
  %780 = load i32, ptr %779, align 4, !tbaa !5
  %781 = sext i32 %780 to i64
  %782 = getelementptr inbounds i8, ptr %657, i64 %781
  store i8 0, ptr %782, align 1, !tbaa !57
  %783 = add nuw nsw i64 %772, 2
  %784 = getelementptr inbounds i32, ptr %659, i64 %783
  %785 = load i32, ptr %784, align 4, !tbaa !5
  %786 = sext i32 %785 to i64
  %787 = getelementptr inbounds i8, ptr %657, i64 %786
  store i8 0, ptr %787, align 1, !tbaa !57
  %788 = add nuw nsw i64 %772, 3
  %789 = getelementptr inbounds i32, ptr %659, i64 %788
  %790 = load i32, ptr %789, align 4, !tbaa !5
  %791 = sext i32 %790 to i64
  %792 = getelementptr inbounds i8, ptr %657, i64 %791
  store i8 0, ptr %792, align 1, !tbaa !57
  %793 = add nuw nsw i64 %772, 4
  %794 = add i64 %773, 4
  %795 = icmp eq i64 %794, %770
  br i1 %795, label %803, label %771

796:                                              ; preds = %707
  %797 = load i32, ptr %637, align 8, !tbaa !60
  %798 = tail call i32 @llvm.smax.i32(i32 %797, i32 -1)
  %799 = sext i32 %798 to i64
  %800 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %799) #9
  %801 = load i32, ptr %637, align 8, !tbaa !60
  %802 = sext i32 %801 to i64
  tail call void @llvm.memset.p0.i64(ptr nonnull align 1 %800, i8 0, i64 %802, i1 false)
  br label %816

803:                                              ; preds = %771, %762
  %804 = phi i64 [ 1, %762 ], [ %793, %771 ]
  %805 = icmp eq i64 %767, 0
  br i1 %805, label %816, label %806

806:                                              ; preds = %803, %806
  %807 = phi i64 [ %813, %806 ], [ %804, %803 ]
  %808 = phi i64 [ %814, %806 ], [ 0, %803 ]
  %809 = getelementptr inbounds i32, ptr %659, i64 %807
  %810 = load i32, ptr %809, align 4, !tbaa !5
  %811 = sext i32 %810 to i64
  %812 = getelementptr inbounds i8, ptr %657, i64 %811
  store i8 0, ptr %812, align 1, !tbaa !57
  %813 = add nuw nsw i64 %807, 1
  %814 = add i64 %808, 1
  %815 = icmp eq i64 %814, %767
  br i1 %815, label %816, label %806, !llvm.loop !283

816:                                              ; preds = %803, %806, %759, %796
  %817 = phi ptr [ %800, %796 ], [ %657, %759 ], [ %657, %806 ], [ %657, %803 ]
  %818 = load i32, ptr %668, align 4
  %819 = shl i32 %818, 2
  %820 = ashr exact i32 %819, 2
  %821 = load ptr, ptr %638, align 8, !tbaa !62
  %822 = sext i32 %820 to i64
  %823 = getelementptr inbounds ptr, ptr %821, i64 %822
  %824 = load ptr, ptr %823, align 8, !tbaa !23
  %825 = load i32, ptr %824, align 4, !tbaa !5
  %826 = icmp slt i32 %825, 1
  br i1 %826, label %879, label %827

827:                                              ; preds = %816
  %828 = add nuw i32 %825, 1
  %829 = zext i32 %828 to i64
  %830 = add nsw i64 %829, -1
  %831 = add nsw i64 %829, -2
  %832 = and i64 %830, 3
  %833 = icmp ult i64 %831, 3
  br i1 %833, label %861, label %834

834:                                              ; preds = %827
  %835 = and i64 %830, -4
  br label %836

836:                                              ; preds = %836, %834
  %837 = phi i64 [ 1, %834 ], [ %858, %836 ]
  %838 = phi i64 [ 0, %834 ], [ %859, %836 ]
  %839 = getelementptr inbounds i32, ptr %824, i64 %837
  %840 = load i32, ptr %839, align 4, !tbaa !5
  %841 = sext i32 %840 to i64
  %842 = getelementptr inbounds i8, ptr %817, i64 %841
  store i8 1, ptr %842, align 1, !tbaa !57
  %843 = add nuw nsw i64 %837, 1
  %844 = getelementptr inbounds i32, ptr %824, i64 %843
  %845 = load i32, ptr %844, align 4, !tbaa !5
  %846 = sext i32 %845 to i64
  %847 = getelementptr inbounds i8, ptr %817, i64 %846
  store i8 1, ptr %847, align 1, !tbaa !57
  %848 = add nuw nsw i64 %837, 2
  %849 = getelementptr inbounds i32, ptr %824, i64 %848
  %850 = load i32, ptr %849, align 4, !tbaa !5
  %851 = sext i32 %850 to i64
  %852 = getelementptr inbounds i8, ptr %817, i64 %851
  store i8 1, ptr %852, align 1, !tbaa !57
  %853 = add nuw nsw i64 %837, 3
  %854 = getelementptr inbounds i32, ptr %824, i64 %853
  %855 = load i32, ptr %854, align 4, !tbaa !5
  %856 = sext i32 %855 to i64
  %857 = getelementptr inbounds i8, ptr %817, i64 %856
  store i8 1, ptr %857, align 1, !tbaa !57
  %858 = add nuw nsw i64 %837, 4
  %859 = add i64 %838, 4
  %860 = icmp eq i64 %859, %835
  br i1 %860, label %861, label %836

861:                                              ; preds = %836, %827
  %862 = phi i64 [ 1, %827 ], [ %858, %836 ]
  %863 = icmp eq i64 %832, 0
  br i1 %863, label %874, label %864

864:                                              ; preds = %861, %864
  %865 = phi i64 [ %871, %864 ], [ %862, %861 ]
  %866 = phi i64 [ %872, %864 ], [ 0, %861 ]
  %867 = getelementptr inbounds i32, ptr %824, i64 %865
  %868 = load i32, ptr %867, align 4, !tbaa !5
  %869 = sext i32 %868 to i64
  %870 = getelementptr inbounds i8, ptr %817, i64 %869
  store i8 1, ptr %870, align 1, !tbaa !57
  %871 = add nuw nsw i64 %865, 1
  %872 = add i64 %866, 1
  %873 = icmp eq i64 %872, %832
  br i1 %873, label %874, label %864, !llvm.loop !284

874:                                              ; preds = %864, %861
  %875 = load i32, ptr %668, align 4
  %876 = shl i32 %875, 2
  %877 = ashr exact i32 %876, 2
  %878 = sext i32 %877 to i64
  br label %879

879:                                              ; preds = %874, %816
  %880 = phi i64 [ %878, %874 ], [ %822, %816 ]
  %881 = load ptr, ptr %639, align 8, !tbaa !64
  %882 = getelementptr inbounds ptr, ptr %881, i64 %880
  %883 = load ptr, ptr %882, align 8, !tbaa !23
  %884 = load i32, ptr %883, align 4, !tbaa !5
  %885 = icmp slt i32 %884, 1
  br i1 %885, label %933, label %886

886:                                              ; preds = %879
  %887 = add nuw i32 %884, 1
  %888 = zext i32 %887 to i64
  %889 = add nsw i64 %888, -1
  %890 = add nsw i64 %888, -2
  %891 = and i64 %889, 3
  %892 = icmp ult i64 %890, 3
  br i1 %892, label %920, label %893

893:                                              ; preds = %886
  %894 = and i64 %889, -4
  br label %895

895:                                              ; preds = %895, %893
  %896 = phi i64 [ 1, %893 ], [ %917, %895 ]
  %897 = phi i64 [ 0, %893 ], [ %918, %895 ]
  %898 = getelementptr inbounds i32, ptr %883, i64 %896
  %899 = load i32, ptr %898, align 4, !tbaa !5
  %900 = sext i32 %899 to i64
  %901 = getelementptr inbounds i8, ptr %817, i64 %900
  store i8 2, ptr %901, align 1, !tbaa !57
  %902 = add nuw nsw i64 %896, 1
  %903 = getelementptr inbounds i32, ptr %883, i64 %902
  %904 = load i32, ptr %903, align 4, !tbaa !5
  %905 = sext i32 %904 to i64
  %906 = getelementptr inbounds i8, ptr %817, i64 %905
  store i8 2, ptr %906, align 1, !tbaa !57
  %907 = add nuw nsw i64 %896, 2
  %908 = getelementptr inbounds i32, ptr %883, i64 %907
  %909 = load i32, ptr %908, align 4, !tbaa !5
  %910 = sext i32 %909 to i64
  %911 = getelementptr inbounds i8, ptr %817, i64 %910
  store i8 2, ptr %911, align 1, !tbaa !57
  %912 = add nuw nsw i64 %896, 3
  %913 = getelementptr inbounds i32, ptr %883, i64 %912
  %914 = load i32, ptr %913, align 4, !tbaa !5
  %915 = sext i32 %914 to i64
  %916 = getelementptr inbounds i8, ptr %817, i64 %915
  store i8 2, ptr %916, align 1, !tbaa !57
  %917 = add nuw nsw i64 %896, 4
  %918 = add i64 %897, 4
  %919 = icmp eq i64 %918, %894
  br i1 %919, label %920, label %895

920:                                              ; preds = %895, %886
  %921 = phi i64 [ 1, %886 ], [ %917, %895 ]
  %922 = icmp eq i64 %891, 0
  br i1 %922, label %933, label %923

923:                                              ; preds = %920, %923
  %924 = phi i64 [ %930, %923 ], [ %921, %920 ]
  %925 = phi i64 [ %931, %923 ], [ 0, %920 ]
  %926 = getelementptr inbounds i32, ptr %883, i64 %924
  %927 = load i32, ptr %926, align 4, !tbaa !5
  %928 = sext i32 %927 to i64
  %929 = getelementptr inbounds i8, ptr %817, i64 %928
  store i8 2, ptr %929, align 1, !tbaa !57
  %930 = add nuw nsw i64 %924, 1
  %931 = add i64 %925, 1
  %932 = icmp eq i64 %931, %891
  br i1 %932, label %933, label %923, !llvm.loop !285

933:                                              ; preds = %920, %923, %879, %703
  %934 = phi ptr [ %706, %703 ], [ %817, %879 ], [ %817, %923 ], [ %817, %920 ]
  %935 = phi ptr [ %659, %703 ], [ %883, %879 ], [ %883, %923 ], [ %883, %920 ]
  %936 = phi ptr [ %658, %703 ], [ %824, %879 ], [ %824, %923 ], [ %824, %920 ]
  %937 = phi ptr [ %657, %703 ], [ %817, %879 ], [ %817, %923 ], [ %817, %920 ]
  %938 = load i8, ptr %669, align 1
  %939 = and i8 %938, 7
  %940 = icmp eq i8 %939, 0
  br i1 %940, label %1234, label %941

941:                                              ; preds = %933
  %942 = load i32, ptr @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4, !tbaa !5
  %943 = icmp eq i32 %942, 0
  br i1 %943, label %947, label %944

944:                                              ; preds = %941
  %945 = load i32, ptr %668, align 4
  %946 = icmp slt i32 %945, 0
  br label %947

947:                                              ; preds = %944, %941
  %948 = phi i1 [ false, %941 ], [ %946, %944 ]
  %949 = and i8 %938, 120
  %950 = icmp eq i8 %949, 0
  br i1 %950, label %982, label %951

951:                                              ; preds = %947
  %952 = icmp slt i32 %661, %620
  br i1 %952, label %953, label %966

953:                                              ; preds = %951
  %954 = sext i32 %661 to i64
  br label %955

955:                                              ; preds = %953, %961
  %956 = phi i64 [ %954, %953 ], [ %962, %961 ]
  %957 = getelementptr inbounds i16, ptr %191, i64 %956
  %958 = load i16, ptr %957, align 2, !tbaa !44
  %959 = zext i16 %958 to i32
  %960 = icmp sgt i32 %689, %959
  br i1 %960, label %961, label %964

961:                                              ; preds = %955
  %962 = add nsw i64 %956, 1
  %963 = icmp eq i64 %962, %649
  br i1 %963, label %966, label %955

964:                                              ; preds = %955
  %965 = trunc i64 %956 to i32
  br label %966

966:                                              ; preds = %961, %964, %951
  %967 = phi i32 [ %661, %951 ], [ %965, %964 ], [ %620, %961 ]
  %968 = icmp slt i32 %662, %621
  br i1 %968, label %969, label %982

969:                                              ; preds = %966
  %970 = sext i32 %662 to i64
  br label %971

971:                                              ; preds = %969, %977
  %972 = phi i64 [ %970, %969 ], [ %978, %977 ]
  %973 = getelementptr inbounds i16, ptr %237, i64 %972
  %974 = load i16, ptr %973, align 2, !tbaa !44
  %975 = zext i16 %974 to i32
  %976 = icmp sgt i32 %689, %975
  br i1 %976, label %977, label %980

977:                                              ; preds = %971
  %978 = add nsw i64 %972, 1
  %979 = icmp eq i64 %978, %650
  br i1 %979, label %982, label %971

980:                                              ; preds = %971
  %981 = trunc i64 %972 to i32
  br label %982

982:                                              ; preds = %977, %980, %966, %947
  %983 = phi i32 [ %662, %947 ], [ %662, %966 ], [ %981, %980 ], [ %621, %977 ]
  %984 = phi i32 [ %661, %947 ], [ %967, %966 ], [ %967, %980 ], [ %967, %977 ]
  %985 = add nsw i32 %656, 1
  %986 = icmp slt i32 %985, %689
  br i1 %986, label %987, label %1052

987:                                              ; preds = %982
  %988 = xor i32 %656, -1
  %989 = add i32 %689, %988
  %990 = zext i32 %989 to i64
  %991 = icmp ult i32 %989, 8
  br i1 %991, label %1041, label %992

992:                                              ; preds = %987
  %993 = icmp ult i32 %989, 64
  br i1 %993, label %1022, label %994

994:                                              ; preds = %992
  %995 = and i64 %990, 4294967232
  %996 = trunc i32 %985 to i16
  %997 = insertelement <16 x i16> poison, i16 %996, i64 0
  %998 = shufflevector <16 x i16> %997, <16 x i16> poison, <16 x i32> zeroinitializer
  %999 = add <16 x i16> %998, <i16 0, i16 1, i16 2, i16 3, i16 4, i16 5, i16 6, i16 7, i16 8, i16 9, i16 10, i16 11, i16 12, i16 13, i16 14, i16 15>
  %1000 = trunc i64 %995 to i32
  %1001 = add i32 %985, %1000
  br label %1002

1002:                                             ; preds = %1002, %994
  %1003 = phi i64 [ 0, %994 ], [ %1012, %1002 ]
  %1004 = phi <16 x i16> [ %999, %994 ], [ %1013, %1002 ]
  %1005 = add <16 x i16> %1004, <i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16>
  %1006 = add <16 x i16> %1004, <i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32>
  %1007 = add <16 x i16> %1004, <i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48>
  %1008 = getelementptr inbounds i16, ptr %421, i64 %1003
  store <16 x i16> %1004, ptr %1008, align 2, !tbaa !44
  %1009 = getelementptr inbounds i16, ptr %1008, i64 16
  store <16 x i16> %1005, ptr %1009, align 2, !tbaa !44
  %1010 = getelementptr inbounds i16, ptr %1008, i64 32
  store <16 x i16> %1006, ptr %1010, align 2, !tbaa !44
  %1011 = getelementptr inbounds i16, ptr %1008, i64 48
  store <16 x i16> %1007, ptr %1011, align 2, !tbaa !44
  %1012 = add nuw i64 %1003, 64
  %1013 = add <16 x i16> %1004, <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>
  %1014 = icmp eq i64 %1012, %995
  br i1 %1014, label %1015, label %1002, !llvm.loop !286

1015:                                             ; preds = %1002
  %1016 = icmp eq i64 %995, %990
  br i1 %1016, label %1052, label %1017

1017:                                             ; preds = %1015
  %1018 = trunc i64 %995 to i32
  %1019 = add i32 %985, %1018
  %1020 = and i64 %990, 56
  %1021 = icmp eq i64 %1020, 0
  br i1 %1021, label %1041, label %1022

1022:                                             ; preds = %992, %1017
  %1023 = phi i32 [ %1001, %1017 ], [ %985, %992 ]
  %1024 = phi i64 [ %995, %1017 ], [ 0, %992 ]
  %1025 = and i64 %990, 4294967288
  %1026 = trunc i64 %1025 to i32
  %1027 = add i32 %985, %1026
  %1028 = trunc i32 %1023 to i16
  %1029 = insertelement <8 x i16> poison, i16 %1028, i64 0
  %1030 = shufflevector <8 x i16> %1029, <8 x i16> poison, <8 x i32> zeroinitializer
  %1031 = add <8 x i16> %1030, <i16 0, i16 1, i16 2, i16 3, i16 4, i16 5, i16 6, i16 7>
  br label %1032

1032:                                             ; preds = %1032, %1022
  %1033 = phi i64 [ %1024, %1022 ], [ %1036, %1032 ]
  %1034 = phi <8 x i16> [ %1031, %1022 ], [ %1037, %1032 ]
  %1035 = getelementptr inbounds i16, ptr %421, i64 %1033
  store <8 x i16> %1034, ptr %1035, align 2, !tbaa !44
  %1036 = add nuw i64 %1033, 8
  %1037 = add <8 x i16> %1034, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %1038 = icmp eq i64 %1036, %1025
  br i1 %1038, label %1039, label %1032, !llvm.loop !287

1039:                                             ; preds = %1032
  %1040 = icmp eq i64 %1025, %990
  br i1 %1040, label %1052, label %1041

1041:                                             ; preds = %987, %1017, %1039
  %1042 = phi i64 [ 0, %987 ], [ %995, %1017 ], [ %1025, %1039 ]
  %1043 = phi i32 [ %985, %987 ], [ %1019, %1017 ], [ %1027, %1039 ]
  br label %1044

1044:                                             ; preds = %1041, %1044
  %1045 = phi i64 [ %1048, %1044 ], [ %1042, %1041 ]
  %1046 = phi i32 [ %1050, %1044 ], [ %1043, %1041 ]
  %1047 = trunc i32 %1046 to i16
  %1048 = add nuw nsw i64 %1045, 1
  %1049 = getelementptr inbounds i16, ptr %421, i64 %1045
  store i16 %1047, ptr %1049, align 2, !tbaa !44
  %1050 = add nsw i32 %1046, 1
  %1051 = icmp eq i64 %1048, %990
  br i1 %1051, label %1052, label %1044, !llvm.loop !288

1052:                                             ; preds = %1044, %1015, %1039, %982
  %1053 = phi i32 [ 0, %982 ], [ %989, %1039 ], [ %989, %1015 ], [ %989, %1044 ]
  %1054 = zext i32 %1053 to i64
  %1055 = getelementptr inbounds i16, ptr %421, i64 %1054
  %1056 = select i1 %948, ptr %237, ptr %191
  %1057 = select i1 %948, i32 %983, i32 %984
  %1058 = select i1 %948, i32 %621, i32 %620
  %1059 = icmp slt i32 %1057, %1058
  br i1 %1059, label %1060, label %1219

1060:                                             ; preds = %1052
  %1061 = sub nsw i32 %1058, %1057
  %1062 = icmp sgt i32 %1061, 6
  br i1 %1062, label %1063, label %1156

1063:                                             ; preds = %1060
  %1064 = add nsw i32 %1058, -2
  %1065 = add nsw i32 %1057, 2
  %1066 = icmp slt i32 %1065, %1064
  br i1 %1066, label %1067, label %1156

1067:                                             ; preds = %1063
  %1068 = add nsw i32 %1057, 1
  %1069 = sext i32 %1068 to i64
  %1070 = getelementptr inbounds i16, ptr %1056, i64 %1069
  %1071 = load i16, ptr %1070, align 2, !tbaa !44
  %1072 = zext i16 %1071 to i64
  %1073 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %1072
  %1074 = getelementptr inbounds %class.Vector, ptr %1073, i64 0, i32 2
  %1075 = load double, ptr %1074, align 8, !tbaa !49
  %1076 = sext i32 %1057 to i64
  %1077 = getelementptr inbounds i16, ptr %1056, i64 %1076
  %1078 = load i16, ptr %1077, align 2, !tbaa !44
  %1079 = zext i16 %1078 to i64
  %1080 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %1079
  %1081 = getelementptr inbounds %class.Vector, ptr %1080, i64 0, i32 2
  %1082 = load double, ptr %1081, align 8, !tbaa !49
  %1083 = getelementptr inbounds %class.Vector, ptr %1073, i64 0, i32 1
  %1084 = load double, ptr %1083, align 8, !tbaa !66
  %1085 = getelementptr inbounds %class.Vector, ptr %1080, i64 0, i32 1
  %1086 = load double, ptr %1085, align 8, !tbaa !66
  %1087 = load double, ptr %1073, align 8, !tbaa !67
  %1088 = load double, ptr %1080, align 8, !tbaa !67
  %1089 = sext i32 %1065 to i64
  %1090 = sext i32 %1064 to i64
  %1091 = insertelement <2 x double> poison, double %1075, i64 0
  %1092 = insertelement <2 x double> %1091, double %1082, i64 1
  %1093 = insertelement <2 x double> poison, double %1084, i64 0
  %1094 = insertelement <2 x double> %1093, double %1086, i64 1
  %1095 = insertelement <2 x double> poison, double %1087, i64 0
  %1096 = insertelement <2 x double> %1095, double %1088, i64 1
  %1097 = insertelement <2 x double> poison, double %687, i64 0
  %1098 = shufflevector <2 x double> %1097, <2 x double> poison, <2 x i32> zeroinitializer
  %1099 = shufflevector <2 x double> %684, <2 x double> poison, <2 x i32> <i32 1, i32 1>
  %1100 = shufflevector <2 x double> %684, <2 x double> poison, <2 x i32> zeroinitializer
  br label %1101

1101:                                             ; preds = %1067, %1101
  %1102 = phi i64 [ %1089, %1067 ], [ %1147, %1101 ]
  %1103 = phi i32 [ %1057, %1067 ], [ %1149, %1101 ]
  %1104 = phi i32 [ 0, %1067 ], [ %1146, %1101 ]
  %1105 = phi i16 [ %1078, %1067 ], [ %1112, %1101 ]
  %1106 = phi i16 [ %1071, %1067 ], [ %1116, %1101 ]
  %1107 = phi <2 x double> [ %1092, %1067 ], [ %1151, %1101 ]
  %1108 = phi <2 x double> [ %1094, %1067 ], [ %1153, %1101 ]
  %1109 = phi <2 x double> [ %1096, %1067 ], [ %1155, %1101 ]
  %1110 = fsub <2 x double> %1098, %1107
  %1111 = getelementptr inbounds i16, ptr %1056, i64 %1102
  %1112 = load i16, ptr %1111, align 2, !tbaa !44
  %1113 = add nsw i32 %1103, 3
  %1114 = sext i32 %1113 to i64
  %1115 = getelementptr inbounds i16, ptr %1056, i64 %1114
  %1116 = load i16, ptr %1115, align 2, !tbaa !44
  %1117 = zext i16 %1112 to i64
  %1118 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %1117
  %1119 = load double, ptr %1118, align 8, !tbaa !67
  %1120 = zext i16 %1116 to i64
  %1121 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %1120
  %1122 = load double, ptr %1121, align 8, !tbaa !67
  %1123 = getelementptr inbounds %class.Vector, ptr %1118, i64 0, i32 1
  %1124 = load double, ptr %1123, align 8, !tbaa !66
  %1125 = getelementptr inbounds %class.Vector, ptr %1121, i64 0, i32 1
  %1126 = load double, ptr %1125, align 8, !tbaa !66
  %1127 = getelementptr inbounds %class.Vector, ptr %1118, i64 0, i32 2
  %1128 = load double, ptr %1127, align 8, !tbaa !49
  %1129 = getelementptr inbounds %class.Vector, ptr %1121, i64 0, i32 2
  %1130 = load double, ptr %1129, align 8, !tbaa !49
  %1131 = fsub <2 x double> %1100, %1109
  %1132 = fmul <2 x double> %1131, %1131
  %1133 = fsub <2 x double> %1099, %1108
  %1134 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %1133, <2 x double> %1133, <2 x double> %1132)
  %1135 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %1110, <2 x double> %1110, <2 x double> %1134)
  %1136 = fcmp olt <2 x double> %1135, %652
  %1137 = zext i32 %1104 to i64
  %1138 = getelementptr inbounds i16, ptr %283, i64 %1137
  store i16 %1105, ptr %1138, align 2, !tbaa !44
  %1139 = extractelement <2 x i1> %1136, i64 1
  %1140 = zext i1 %1139 to i32
  %1141 = add nuw nsw i32 %1104, %1140
  %1142 = zext i32 %1141 to i64
  %1143 = getelementptr inbounds i16, ptr %283, i64 %1142
  store i16 %1106, ptr %1143, align 2, !tbaa !44
  %1144 = extractelement <2 x i1> %1136, i64 0
  %1145 = zext i1 %1144 to i32
  %1146 = add i32 %1141, %1145
  %1147 = add nsw i64 %1102, 2
  %1148 = icmp slt i64 %1147, %1090
  %1149 = trunc i64 %1102 to i32
  %1150 = insertelement <2 x double> poison, double %1130, i64 0
  %1151 = insertelement <2 x double> %1150, double %1128, i64 1
  %1152 = insertelement <2 x double> poison, double %1126, i64 0
  %1153 = insertelement <2 x double> %1152, double %1124, i64 1
  %1154 = insertelement <2 x double> poison, double %1122, i64 0
  %1155 = insertelement <2 x double> %1154, double %1119, i64 1
  br i1 %1148, label %1101, label %1156

1156:                                             ; preds = %1101, %1063, %1060
  %1157 = phi i32 [ 0, %1060 ], [ 0, %1063 ], [ %1146, %1101 ]
  %1158 = phi i32 [ %1057, %1060 ], [ %1057, %1063 ], [ %1149, %1101 ]
  %1159 = icmp slt i32 %1158, %1058
  br i1 %1159, label %1160, label %1165

1160:                                             ; preds = %1156
  %1161 = sext i32 %1158 to i64
  %1162 = sext i32 %1058 to i64
  %1163 = extractelement <2 x double> %684, i64 0
  %1164 = extractelement <2 x double> %684, i64 1
  br label %1170

1165:                                             ; preds = %1193, %1156
  %1166 = phi i32 [ %1157, %1156 ], [ %1194, %1193 ]
  %1167 = icmp sgt i32 %1166, 0
  br i1 %1167, label %1168, label %1219

1168:                                             ; preds = %1165
  %1169 = zext i32 %1166 to i64
  br label %1197

1170:                                             ; preds = %1160, %1193
  %1171 = phi i64 [ %1161, %1160 ], [ %1195, %1193 ]
  %1172 = phi i32 [ %1157, %1160 ], [ %1194, %1193 ]
  %1173 = getelementptr inbounds i16, ptr %1056, i64 %1171
  %1174 = load i16, ptr %1173, align 2, !tbaa !44
  %1175 = zext i16 %1174 to i64
  %1176 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %1175
  %1177 = load double, ptr %1176, align 8, !tbaa !67
  %1178 = getelementptr inbounds %class.Vector, ptr %1176, i64 0, i32 1
  %1179 = load double, ptr %1178, align 8, !tbaa !66
  %1180 = getelementptr inbounds %class.Vector, ptr %1176, i64 0, i32 2
  %1181 = load double, ptr %1180, align 8, !tbaa !49
  %1182 = fsub double %1163, %1177
  %1183 = fmul double %1182, %1182
  %1184 = fsub double %1164, %1179
  %1185 = tail call double @llvm.fmuladd.f64(double %1184, double %1184, double %1183)
  %1186 = fsub double %687, %1181
  %1187 = tail call double @llvm.fmuladd.f64(double %1186, double %1186, double %1185)
  %1188 = fcmp ugt double %1187, %23
  br i1 %1188, label %1193, label %1189

1189:                                             ; preds = %1170
  %1190 = add nsw i32 %1172, 1
  %1191 = sext i32 %1172 to i64
  %1192 = getelementptr inbounds i16, ptr %283, i64 %1191
  store i16 %1174, ptr %1192, align 2, !tbaa !44
  br label %1193

1193:                                             ; preds = %1189, %1170
  %1194 = phi i32 [ %1190, %1189 ], [ %1172, %1170 ]
  %1195 = add nsw i64 %1171, 1
  %1196 = icmp eq i64 %1195, %1162
  br i1 %1196, label %1165, label %1170

1197:                                             ; preds = %1168, %1214
  %1198 = phi i64 [ 0, %1168 ], [ %1217, %1214 ]
  %1199 = phi ptr [ %1055, %1168 ], [ %1216, %1214 ]
  %1200 = getelementptr inbounds i16, ptr %283, i64 %1198
  %1201 = load i16, ptr %1200, align 2, !tbaa !44
  %1202 = zext i16 %1201 to i64
  %1203 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %1202, i32 4
  %1204 = load i8, ptr %1203, align 1
  %1205 = and i8 %1204, 7
  store i16 %1201, ptr %1199, align 2, !tbaa !44
  %1206 = getelementptr inbounds i16, ptr %1199, i64 1
  %1207 = insertelement <2 x i16> poison, i16 %1201, i64 0
  %1208 = shufflevector <2 x i16> %1207, <2 x i16> poison, <2 x i32> zeroinitializer
  %1209 = add <2 x i16> %1208, <i16 1, i16 2>
  store <2 x i16> %1209, ptr %1206, align 2, !tbaa !44
  %1210 = icmp ult i8 %1205, 4
  br i1 %1210, label %1214, label %1211

1211:                                             ; preds = %1197
  %1212 = add <2 x i16> %1208, <i16 3, i16 4>
  %1213 = getelementptr inbounds i16, ptr %1199, i64 3
  store <2 x i16> %1212, ptr %1213, align 2, !tbaa !44
  br label %1214

1214:                                             ; preds = %1211, %1197
  %1215 = zext i8 %1205 to i64
  %1216 = getelementptr inbounds i16, ptr %1199, i64 %1215
  %1217 = add nuw nsw i64 %1198, 1
  %1218 = icmp eq i64 %1217, %1169
  br i1 %1218, label %1219, label %1197

1219:                                             ; preds = %1214, %1165, %1052
  %1220 = phi ptr [ %1055, %1052 ], [ %1055, %1165 ], [ %1216, %1214 ]
  %1221 = ptrtoint ptr %1220 to i64
  %1222 = sub i64 %1221, %640
  %1223 = lshr exact i64 %1222, 1
  %1224 = trunc i64 %1223 to i32
  %1225 = icmp eq i32 %1224, 0
  br i1 %1225, label %1237, label %1226

1226:                                             ; preds = %1219
  %1227 = shl i64 %1222, 31
  %1228 = add i64 %1227, -4294967296
  %1229 = ashr i64 %1228, 32
  %1230 = getelementptr inbounds i16, ptr %421, i64 %1229
  %1231 = load i16, ptr %1230, align 2, !tbaa !44
  %1232 = ashr i64 %1227, 32
  %1233 = getelementptr inbounds i16, ptr %421, i64 %1232
  store i16 %1231, ptr %1233, align 2, !tbaa !44
  br label %1237

1234:                                             ; preds = %933
  %1235 = add nsw i32 %664, 1
  %1236 = load i32, ptr @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4, !tbaa !5
  br label %1237

1237:                                             ; preds = %1219, %1226, %1234
  %1238 = phi i32 [ %1236, %1234 ], [ %942, %1226 ], [ %942, %1219 ]
  %1239 = phi i32 [ %1235, %1234 ], [ 0, %1226 ], [ 0, %1219 ]
  %1240 = phi i32 [ %663, %1234 ], [ %1224, %1226 ], [ 0, %1219 ]
  %1241 = phi i32 [ %662, %1234 ], [ %983, %1226 ], [ %983, %1219 ]
  %1242 = phi i32 [ %661, %1234 ], [ %984, %1226 ], [ %984, %1219 ]
  %1243 = icmp eq i32 %1238, 0
  br i1 %1243, label %1248, label %1244

1244:                                             ; preds = %1237
  %1245 = load i32, ptr %668, align 4
  %1246 = and i32 %1245, 1073741824
  %1247 = icmp ne i32 %1246, 0
  br label %1248

1248:                                             ; preds = %1244, %1237
  %1249 = phi i1 [ false, %1237 ], [ %1247, %1244 ]
  %1250 = load i32, ptr %13, align 8, !tbaa !17
  %1251 = add nsw i32 %641, %1250
  %1252 = load i32, ptr %642, align 4, !tbaa !68
  %1253 = icmp sgt i32 %1252, %1251
  br i1 %1253, label %1269, label %1254

1254:                                             ; preds = %1248, %1254
  %1255 = phi i32 [ %1257, %1254 ], [ %1252, %1248 ]
  %1256 = ashr i32 %1255, 1
  %1257 = add nsw i32 %1256, %1255
  %1258 = icmp sgt i32 %1257, %1251
  br i1 %1258, label %1259, label %1254

1259:                                             ; preds = %1254
  %1260 = sext i32 %1257 to i64
  %1261 = icmp slt i32 %1257, 0
  %1262 = shl nsw i64 %1260, 1
  %1263 = select i1 %1261, i64 -1, i64 %1262
  %1264 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %1263) #9
  %1265 = load ptr, ptr %8, align 8, !tbaa !46
  %1266 = sext i32 %1250 to i64
  %1267 = shl nsw i64 %1266, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 2 %1264, ptr align 2 %1265, i64 %1267, i1 false)
  %1268 = icmp eq ptr %1265, null
  br i1 %1268, label %1273, label %1271

1269:                                             ; preds = %1248
  %1270 = load ptr, ptr %8, align 8, !tbaa !46
  br label %1275

1271:                                             ; preds = %1259
  tail call void @_ZdaPv(ptr noundef nonnull %1265) #10
  %1272 = load i32, ptr %13, align 8, !tbaa !17
  br label %1273

1273:                                             ; preds = %1271, %1259
  %1274 = phi i32 [ %1272, %1271 ], [ %1250, %1259 ]
  store ptr %1264, ptr %8, align 8, !tbaa !46
  store i32 %1257, ptr %642, align 4, !tbaa !68
  br label %1275

1275:                                             ; preds = %1269, %1273
  %1276 = phi i32 [ %1250, %1269 ], [ %1274, %1273 ]
  %1277 = phi ptr [ %1270, %1269 ], [ %1264, %1273 ]
  %1278 = ptrtoint ptr %1277 to i64
  %1279 = add nsw i32 %1276, 1
  %1280 = sext i32 %1279 to i64
  %1281 = getelementptr inbounds i16, ptr %1277, i64 %1280
  %1282 = icmp slt i32 %1239, %1240
  br i1 %1249, label %1283, label %1331

1283:                                             ; preds = %1275
  br i1 %1282, label %1284, label %1502

1284:                                             ; preds = %1283
  %1285 = sext i32 %1239 to i64
  %1286 = sext i32 %1240 to i64
  %1287 = extractelement <2 x double> %684, i64 0
  %1288 = extractelement <2 x double> %684, i64 1
  br label %1289

1289:                                             ; preds = %1284, %1326
  %1290 = phi i64 [ %1285, %1284 ], [ %1329, %1326 ]
  %1291 = phi ptr [ %467, %1284 ], [ %1328, %1326 ]
  %1292 = phi ptr [ %1281, %1284 ], [ %1327, %1326 ]
  %1293 = getelementptr inbounds i16, ptr %421, i64 %1290
  %1294 = load i16, ptr %1293, align 2, !tbaa !44
  %1295 = zext i16 %1294 to i64
  %1296 = getelementptr inbounds %struct.CompAtomExt, ptr %45, i64 %1295
  %1297 = load i32, ptr %1296, align 4
  %1298 = and i32 %1297, 1073741824
  %1299 = icmp eq i32 %1298, 0
  br i1 %1299, label %1300, label %1326

1300:                                             ; preds = %1289
  %1301 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %1295
  %1302 = getelementptr inbounds %class.Vector, ptr %1301, i64 0, i32 2
  %1303 = load double, ptr %1302, align 8, !tbaa !49
  %1304 = fsub double %687, %1303
  %1305 = getelementptr inbounds %class.Vector, ptr %1301, i64 0, i32 1
  %1306 = load double, ptr %1305, align 8, !tbaa !66
  %1307 = fsub double %1288, %1306
  %1308 = load double, ptr %1301, align 8, !tbaa !67
  %1309 = fsub double %1287, %1308
  %1310 = fmul double %1309, %1309
  %1311 = tail call double @llvm.fmuladd.f64(double %1307, double %1307, double %1310)
  %1312 = tail call double @llvm.fmuladd.f64(double %1304, double %1304, double %1311)
  %1313 = fcmp ugt double %1312, %20
  br i1 %1313, label %1326, label %1314

1314:                                             ; preds = %1300
  %1315 = shl i32 %1297, 2
  %1316 = ashr exact i32 %1315, 2
  %1317 = icmp slt i32 %1316, %697
  %1318 = icmp sgt i32 %1316, %699
  %1319 = select i1 %1317, i1 true, i1 %1318
  %1320 = select i1 %1319, ptr %1292, ptr %1291
  %1321 = zext i1 %1319 to i64
  %1322 = getelementptr inbounds i16, ptr %1292, i64 %1321
  %1323 = xor i1 %1319, true
  %1324 = zext i1 %1323 to i64
  %1325 = getelementptr inbounds i16, ptr %1291, i64 %1324
  store i16 %1294, ptr %1320, align 2, !tbaa !44
  br label %1326

1326:                                             ; preds = %1314, %1300, %1289
  %1327 = phi ptr [ %1292, %1289 ], [ %1292, %1300 ], [ %1322, %1314 ]
  %1328 = phi ptr [ %1291, %1289 ], [ %1291, %1300 ], [ %1325, %1314 ]
  %1329 = add nsw i64 %1290, 1
  %1330 = icmp eq i64 %1329, %1286
  br i1 %1330, label %1502, label %1289

1331:                                             ; preds = %1275
  br i1 %1282, label %1332, label %1502

1332:                                             ; preds = %1331
  %1333 = sub nsw i32 %1240, %1239
  %1334 = icmp sgt i32 %1333, 6
  br i1 %1334, label %1335, label %1453

1335:                                             ; preds = %1332
  %1336 = add nsw i32 %1240, -2
  %1337 = add nsw i32 %1239, 2
  %1338 = icmp slt i32 %1337, %1336
  br i1 %1338, label %1339, label %1453

1339:                                             ; preds = %1335
  %1340 = sext i32 %1239 to i64
  %1341 = getelementptr inbounds i16, ptr %421, i64 %1340
  %1342 = load i16, ptr %1341, align 2, !tbaa !44
  %1343 = zext i16 %1342 to i64
  %1344 = getelementptr inbounds %struct.CompAtomExt, ptr %45, i64 %1343
  %1345 = load i32, ptr %1344, align 4
  %1346 = add nsw i32 %1239, 1
  %1347 = sext i32 %1346 to i64
  %1348 = getelementptr inbounds i16, ptr %421, i64 %1347
  %1349 = load i16, ptr %1348, align 2, !tbaa !44
  %1350 = zext i16 %1349 to i64
  %1351 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %1350
  %1352 = getelementptr inbounds %class.Vector, ptr %1351, i64 0, i32 2
  %1353 = load double, ptr %1352, align 8, !tbaa !49
  %1354 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %1343
  %1355 = getelementptr inbounds %class.Vector, ptr %1354, i64 0, i32 2
  %1356 = load double, ptr %1355, align 8, !tbaa !49
  %1357 = getelementptr inbounds %class.Vector, ptr %1351, i64 0, i32 1
  %1358 = load double, ptr %1357, align 8, !tbaa !66
  %1359 = getelementptr inbounds %class.Vector, ptr %1354, i64 0, i32 1
  %1360 = load double, ptr %1359, align 8, !tbaa !66
  %1361 = load double, ptr %1351, align 8, !tbaa !67
  %1362 = load double, ptr %1354, align 8, !tbaa !67
  %1363 = sext i32 %1337 to i64
  %1364 = sext i32 %1336 to i64
  %1365 = extractelement <2 x double> %684, i64 0
  %1366 = extractelement <2 x double> %684, i64 1
  br label %1367

1367:                                             ; preds = %1339, %1447
  %1368 = phi i64 [ %1363, %1339 ], [ %1450, %1447 ]
  %1369 = phi i64 [ %1350, %1339 ], [ %1407, %1447 ]
  %1370 = phi i32 [ %1345, %1339 ], [ %1435, %1447 ]
  %1371 = phi ptr [ %467, %1339 ], [ %1449, %1447 ]
  %1372 = phi ptr [ %1281, %1339 ], [ %1448, %1447 ]
  %1373 = phi i32 [ %1239, %1339 ], [ %1452, %1447 ]
  %1374 = phi i16 [ %1342, %1339 ], [ %1399, %1447 ]
  %1375 = phi i16 [ %1349, %1339 ], [ %1403, %1447 ]
  %1376 = phi double [ %1362, %1339 ], [ %1406, %1447 ]
  %1377 = phi double [ %1361, %1339 ], [ %1409, %1447 ]
  %1378 = phi double [ %1360, %1339 ], [ %1411, %1447 ]
  %1379 = phi double [ %1358, %1339 ], [ %1413, %1447 ]
  %1380 = phi double [ %1356, %1339 ], [ %1415, %1447 ]
  %1381 = phi double [ %1353, %1339 ], [ %1417, %1447 ]
  %1382 = getelementptr inbounds %struct.CompAtomExt, ptr %45, i64 %1369
  %1383 = load i32, ptr %1382, align 4
  %1384 = shl i32 %1383, 2
  %1385 = ashr exact i32 %1384, 2
  %1386 = fsub double %1365, %1376
  %1387 = fsub double %1365, %1377
  %1388 = fmul double %1386, %1386
  %1389 = fmul double %1387, %1387
  %1390 = fsub double %1366, %1378
  %1391 = fsub double %1366, %1379
  %1392 = tail call double @llvm.fmuladd.f64(double %1390, double %1390, double %1388)
  %1393 = tail call double @llvm.fmuladd.f64(double %1391, double %1391, double %1389)
  %1394 = fsub double %687, %1380
  %1395 = fsub double %687, %1381
  %1396 = tail call double @llvm.fmuladd.f64(double %1394, double %1394, double %1392)
  %1397 = tail call double @llvm.fmuladd.f64(double %1395, double %1395, double %1393)
  %1398 = getelementptr inbounds i16, ptr %421, i64 %1368
  %1399 = load i16, ptr %1398, align 2, !tbaa !44
  %1400 = add nsw i32 %1373, 3
  %1401 = sext i32 %1400 to i64
  %1402 = getelementptr inbounds i16, ptr %421, i64 %1401
  %1403 = load i16, ptr %1402, align 2, !tbaa !44
  %1404 = zext i16 %1399 to i64
  %1405 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %1404
  %1406 = load double, ptr %1405, align 8, !tbaa !67
  %1407 = zext i16 %1403 to i64
  %1408 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %1407
  %1409 = load double, ptr %1408, align 8, !tbaa !67
  %1410 = getelementptr inbounds %class.Vector, ptr %1405, i64 0, i32 1
  %1411 = load double, ptr %1410, align 8, !tbaa !66
  %1412 = getelementptr inbounds %class.Vector, ptr %1408, i64 0, i32 1
  %1413 = load double, ptr %1412, align 8, !tbaa !66
  %1414 = getelementptr inbounds %class.Vector, ptr %1405, i64 0, i32 2
  %1415 = load double, ptr %1414, align 8, !tbaa !49
  %1416 = getelementptr inbounds %class.Vector, ptr %1408, i64 0, i32 2
  %1417 = load double, ptr %1416, align 8, !tbaa !49
  %1418 = fcmp ugt double %1396, %20
  br i1 %1418, label %1431, label %1419

1419:                                             ; preds = %1367
  %1420 = shl i32 %1370, 2
  %1421 = ashr exact i32 %1420, 2
  %1422 = icmp slt i32 %1421, %697
  %1423 = icmp sgt i32 %1421, %699
  %1424 = select i1 %1422, i1 true, i1 %1423
  %1425 = select i1 %1424, ptr %1372, ptr %1371
  %1426 = zext i1 %1424 to i64
  %1427 = getelementptr inbounds i16, ptr %1372, i64 %1426
  %1428 = xor i1 %1424, true
  %1429 = zext i1 %1428 to i64
  %1430 = getelementptr inbounds i16, ptr %1371, i64 %1429
  store i16 %1374, ptr %1425, align 2, !tbaa !44
  br label %1431

1431:                                             ; preds = %1419, %1367
  %1432 = phi ptr [ %1372, %1367 ], [ %1427, %1419 ]
  %1433 = phi ptr [ %1371, %1367 ], [ %1430, %1419 ]
  %1434 = getelementptr inbounds %struct.CompAtomExt, ptr %45, i64 %1404
  %1435 = load i32, ptr %1434, align 4
  %1436 = fcmp ugt double %1397, %20
  br i1 %1436, label %1447, label %1437

1437:                                             ; preds = %1431
  %1438 = icmp slt i32 %1385, %697
  %1439 = icmp sgt i32 %1385, %699
  %1440 = select i1 %1438, i1 true, i1 %1439
  %1441 = select i1 %1440, ptr %1432, ptr %1433
  %1442 = zext i1 %1440 to i64
  %1443 = getelementptr inbounds i16, ptr %1432, i64 %1442
  %1444 = xor i1 %1440, true
  %1445 = zext i1 %1444 to i64
  %1446 = getelementptr inbounds i16, ptr %1433, i64 %1445
  store i16 %1375, ptr %1441, align 2, !tbaa !44
  br label %1447

1447:                                             ; preds = %1437, %1431
  %1448 = phi ptr [ %1432, %1431 ], [ %1443, %1437 ]
  %1449 = phi ptr [ %1433, %1431 ], [ %1446, %1437 ]
  %1450 = add nsw i64 %1368, 2
  %1451 = icmp slt i64 %1450, %1364
  %1452 = trunc i64 %1368 to i32
  br i1 %1451, label %1367, label %1453

1453:                                             ; preds = %1447, %1335, %1332
  %1454 = phi i32 [ %1239, %1332 ], [ %1239, %1335 ], [ %1452, %1447 ]
  %1455 = phi ptr [ %1281, %1332 ], [ %1281, %1335 ], [ %1448, %1447 ]
  %1456 = phi ptr [ %467, %1332 ], [ %467, %1335 ], [ %1449, %1447 ]
  %1457 = icmp slt i32 %1454, %1240
  br i1 %1457, label %1458, label %1502

1458:                                             ; preds = %1453
  %1459 = sext i32 %1454 to i64
  %1460 = sext i32 %1240 to i64
  %1461 = extractelement <2 x double> %684, i64 0
  %1462 = extractelement <2 x double> %684, i64 1
  br label %1463

1463:                                             ; preds = %1458, %1497
  %1464 = phi i64 [ %1459, %1458 ], [ %1500, %1497 ]
  %1465 = phi ptr [ %1456, %1458 ], [ %1499, %1497 ]
  %1466 = phi ptr [ %1455, %1458 ], [ %1498, %1497 ]
  %1467 = getelementptr inbounds i16, ptr %421, i64 %1464
  %1468 = load i16, ptr %1467, align 2, !tbaa !44
  %1469 = zext i16 %1468 to i64
  %1470 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %1469
  %1471 = load double, ptr %1470, align 8, !tbaa !67
  %1472 = getelementptr inbounds %class.Vector, ptr %1470, i64 0, i32 1
  %1473 = load double, ptr %1472, align 8, !tbaa !66
  %1474 = getelementptr inbounds %class.Vector, ptr %1470, i64 0, i32 2
  %1475 = load double, ptr %1474, align 8, !tbaa !49
  %1476 = fsub double %1461, %1471
  %1477 = fmul double %1476, %1476
  %1478 = fsub double %1462, %1473
  %1479 = tail call double @llvm.fmuladd.f64(double %1478, double %1478, double %1477)
  %1480 = fsub double %687, %1475
  %1481 = tail call double @llvm.fmuladd.f64(double %1480, double %1480, double %1479)
  %1482 = fcmp ugt double %1481, %20
  br i1 %1482, label %1497, label %1483

1483:                                             ; preds = %1463
  %1484 = getelementptr inbounds %struct.CompAtomExt, ptr %45, i64 %1469
  %1485 = load i32, ptr %1484, align 4
  %1486 = shl i32 %1485, 2
  %1487 = ashr exact i32 %1486, 2
  %1488 = icmp slt i32 %1487, %697
  %1489 = icmp sgt i32 %1487, %699
  %1490 = select i1 %1488, i1 true, i1 %1489
  %1491 = select i1 %1490, ptr %1466, ptr %1465
  %1492 = zext i1 %1490 to i64
  %1493 = getelementptr inbounds i16, ptr %1466, i64 %1492
  %1494 = xor i1 %1490, true
  %1495 = zext i1 %1494 to i64
  %1496 = getelementptr inbounds i16, ptr %1465, i64 %1495
  store i16 %1468, ptr %1491, align 2, !tbaa !44
  br label %1497

1497:                                             ; preds = %1483, %1463
  %1498 = phi ptr [ %1466, %1463 ], [ %1493, %1483 ]
  %1499 = phi ptr [ %1465, %1463 ], [ %1496, %1483 ]
  %1500 = add nsw i64 %1464, 1
  %1501 = icmp eq i64 %1500, %1460
  br i1 %1501, label %1502, label %1463

1502:                                             ; preds = %1497, %1326, %1453, %1283, %1331
  %1503 = phi ptr [ %1281, %1331 ], [ %1281, %1283 ], [ %1455, %1453 ], [ %1327, %1326 ], [ %1498, %1497 ]
  %1504 = phi ptr [ %467, %1331 ], [ %467, %1283 ], [ %1456, %1453 ], [ %1328, %1326 ], [ %1499, %1497 ]
  %1505 = ptrtoint ptr %1504 to i64
  %1506 = sub i64 %1505, %643
  %1507 = lshr exact i64 %1506, 1
  %1508 = trunc i64 %1507 to i32
  %1509 = icmp sgt i32 %1508, 0
  br i1 %1509, label %1510, label %1610

1510:                                             ; preds = %1502
  %1511 = and i64 %1507, 4294967295
  %1512 = and i64 %1507, 1
  %1513 = icmp eq i64 %1511, 1
  br i1 %1513, label %1578, label %1514

1514:                                             ; preds = %1510
  %1515 = sub nsw i64 %1511, %1512
  br label %1516

1516:                                             ; preds = %1571, %1514
  %1517 = phi i64 [ 0, %1514 ], [ %1575, %1571 ]
  %1518 = phi ptr [ %1503, %1514 ], [ %1574, %1571 ]
  %1519 = phi ptr [ %329, %1514 ], [ %1573, %1571 ]
  %1520 = phi ptr [ %375, %1514 ], [ %1572, %1571 ]
  %1521 = phi i64 [ 0, %1514 ], [ %1576, %1571 ]
  %1522 = getelementptr inbounds i16, ptr %467, i64 %1517
  %1523 = load i16, ptr %1522, align 2, !tbaa !44
  %1524 = zext i16 %1523 to i64
  %1525 = getelementptr inbounds %struct.CompAtomExt, ptr %45, i64 %1524
  %1526 = load i32, ptr %1525, align 4
  %1527 = shl i32 %1526, 2
  %1528 = ashr exact i32 %1527, 2
  %1529 = sext i32 %1528 to i64
  %1530 = getelementptr inbounds i8, ptr %934, i64 %1529
  %1531 = load i8, ptr %1530, align 1, !tbaa !57
  %1532 = sext i8 %1531 to i32
  switch i32 %1532, label %1544 [
    i32 0, label %1533
    i32 1, label %1535
    i32 2, label %1537
  ]

1533:                                             ; preds = %1516
  %1534 = getelementptr inbounds i16, ptr %1518, i64 1
  br label %1539

1535:                                             ; preds = %1516
  %1536 = getelementptr inbounds i16, ptr %1519, i64 1
  br label %1539

1537:                                             ; preds = %1516
  %1538 = getelementptr inbounds i16, ptr %1520, i64 1
  br label %1539

1539:                                             ; preds = %1533, %1535, %1537
  %1540 = phi ptr [ %1520, %1537 ], [ %1519, %1535 ], [ %1518, %1533 ]
  %1541 = phi ptr [ %1538, %1537 ], [ %1520, %1535 ], [ %1520, %1533 ]
  %1542 = phi ptr [ %1519, %1537 ], [ %1536, %1535 ], [ %1519, %1533 ]
  %1543 = phi ptr [ %1518, %1537 ], [ %1518, %1535 ], [ %1534, %1533 ]
  store i16 %1523, ptr %1540, align 2, !tbaa !44
  br label %1544

1544:                                             ; preds = %1539, %1516
  %1545 = phi ptr [ %1520, %1516 ], [ %1541, %1539 ]
  %1546 = phi ptr [ %1519, %1516 ], [ %1542, %1539 ]
  %1547 = phi ptr [ %1518, %1516 ], [ %1543, %1539 ]
  %1548 = or i64 %1517, 1
  %1549 = getelementptr inbounds i16, ptr %467, i64 %1548
  %1550 = load i16, ptr %1549, align 2, !tbaa !44
  %1551 = zext i16 %1550 to i64
  %1552 = getelementptr inbounds %struct.CompAtomExt, ptr %45, i64 %1551
  %1553 = load i32, ptr %1552, align 4
  %1554 = shl i32 %1553, 2
  %1555 = ashr exact i32 %1554, 2
  %1556 = sext i32 %1555 to i64
  %1557 = getelementptr inbounds i8, ptr %934, i64 %1556
  %1558 = load i8, ptr %1557, align 1, !tbaa !57
  %1559 = sext i8 %1558 to i32
  switch i32 %1559, label %1571 [
    i32 0, label %1564
    i32 1, label %1562
    i32 2, label %1560
  ]

1560:                                             ; preds = %1544
  %1561 = getelementptr inbounds i16, ptr %1545, i64 1
  br label %1566

1562:                                             ; preds = %1544
  %1563 = getelementptr inbounds i16, ptr %1546, i64 1
  br label %1566

1564:                                             ; preds = %1544
  %1565 = getelementptr inbounds i16, ptr %1547, i64 1
  br label %1566

1566:                                             ; preds = %1564, %1562, %1560
  %1567 = phi ptr [ %1545, %1560 ], [ %1546, %1562 ], [ %1547, %1564 ]
  %1568 = phi ptr [ %1561, %1560 ], [ %1545, %1562 ], [ %1545, %1564 ]
  %1569 = phi ptr [ %1546, %1560 ], [ %1563, %1562 ], [ %1546, %1564 ]
  %1570 = phi ptr [ %1547, %1560 ], [ %1547, %1562 ], [ %1565, %1564 ]
  store i16 %1550, ptr %1567, align 2, !tbaa !44
  br label %1571

1571:                                             ; preds = %1566, %1544
  %1572 = phi ptr [ %1545, %1544 ], [ %1568, %1566 ]
  %1573 = phi ptr [ %1546, %1544 ], [ %1569, %1566 ]
  %1574 = phi ptr [ %1547, %1544 ], [ %1570, %1566 ]
  %1575 = add nuw nsw i64 %1517, 2
  %1576 = add i64 %1521, 2
  %1577 = icmp eq i64 %1576, %1515
  br i1 %1577, label %1578, label %1516

1578:                                             ; preds = %1571, %1510
  %1579 = phi ptr [ undef, %1510 ], [ %1572, %1571 ]
  %1580 = phi ptr [ undef, %1510 ], [ %1573, %1571 ]
  %1581 = phi ptr [ undef, %1510 ], [ %1574, %1571 ]
  %1582 = phi i64 [ 0, %1510 ], [ %1575, %1571 ]
  %1583 = phi ptr [ %1503, %1510 ], [ %1574, %1571 ]
  %1584 = phi ptr [ %329, %1510 ], [ %1573, %1571 ]
  %1585 = phi ptr [ %375, %1510 ], [ %1572, %1571 ]
  %1586 = icmp eq i64 %1512, 0
  br i1 %1586, label %1610, label %1587

1587:                                             ; preds = %1578
  %1588 = getelementptr inbounds i16, ptr %467, i64 %1582
  %1589 = load i16, ptr %1588, align 2, !tbaa !44
  %1590 = zext i16 %1589 to i64
  %1591 = getelementptr inbounds %struct.CompAtomExt, ptr %45, i64 %1590
  %1592 = load i32, ptr %1591, align 4
  %1593 = shl i32 %1592, 2
  %1594 = ashr exact i32 %1593, 2
  %1595 = sext i32 %1594 to i64
  %1596 = getelementptr inbounds i8, ptr %934, i64 %1595
  %1597 = load i8, ptr %1596, align 1, !tbaa !57
  %1598 = sext i8 %1597 to i32
  switch i32 %1598, label %1610 [
    i32 0, label %1603
    i32 1, label %1601
    i32 2, label %1599
  ]

1599:                                             ; preds = %1587
  %1600 = getelementptr inbounds i16, ptr %1585, i64 1
  br label %1605

1601:                                             ; preds = %1587
  %1602 = getelementptr inbounds i16, ptr %1584, i64 1
  br label %1605

1603:                                             ; preds = %1587
  %1604 = getelementptr inbounds i16, ptr %1583, i64 1
  br label %1605

1605:                                             ; preds = %1603, %1601, %1599
  %1606 = phi ptr [ %1585, %1599 ], [ %1584, %1601 ], [ %1583, %1603 ]
  %1607 = phi ptr [ %1600, %1599 ], [ %1585, %1601 ], [ %1585, %1603 ]
  %1608 = phi ptr [ %1584, %1599 ], [ %1602, %1601 ], [ %1584, %1603 ]
  %1609 = phi ptr [ %1583, %1599 ], [ %1583, %1601 ], [ %1604, %1603 ]
  store i16 %1589, ptr %1606, align 2, !tbaa !44
  br label %1610

1610:                                             ; preds = %1578, %1605, %1587, %1502
  %1611 = phi ptr [ %375, %1502 ], [ %1579, %1578 ], [ %1585, %1587 ], [ %1607, %1605 ]
  %1612 = phi ptr [ %329, %1502 ], [ %1580, %1578 ], [ %1584, %1587 ], [ %1608, %1605 ]
  %1613 = phi ptr [ %1503, %1502 ], [ %1581, %1578 ], [ %1583, %1587 ], [ %1609, %1605 ]
  %1614 = ptrtoint ptr %1613 to i64
  %1615 = ptrtoint ptr %1281 to i64
  %1616 = sub i64 %1614, %1615
  %1617 = lshr exact i64 %1616, 1
  %1618 = trunc i64 %1617 to i32
  %1619 = icmp eq i32 %1618, 0
  %1620 = shl i64 %1616, 31
  br i1 %1619, label %1626, label %1621

1621:                                             ; preds = %1610
  %1622 = add i64 %1620, -4294967296
  %1623 = ashr i64 %1622, 32
  %1624 = getelementptr inbounds i16, ptr %1281, i64 %1623
  %1625 = load i16, ptr %1624, align 2, !tbaa !44
  br label %1626

1626:                                             ; preds = %1610, %1621
  %1627 = phi i16 [ %1625, %1621 ], [ -1, %1610 ]
  %1628 = ashr i64 %1620, 32
  %1629 = getelementptr inbounds i16, ptr %1281, i64 %1628
  store i16 %1627, ptr %1629, align 2, !tbaa !44
  %1630 = trunc i64 %1617 to i16
  %1631 = add i16 %1630, 1
  %1632 = load i32, ptr %13, align 8, !tbaa !17
  %1633 = sext i32 %1632 to i64
  %1634 = getelementptr inbounds i16, ptr %1277, i64 %1633
  store i16 %1631, ptr %1634, align 2, !tbaa !44
  %1635 = add nsw i32 %1618, 2
  %1636 = add nsw i32 %1635, %1632
  %1637 = ptrtoint ptr %1612 to i64
  %1638 = sub i64 %1637, %644
  %1639 = lshr exact i64 %1638, 1
  %1640 = trunc i64 %1639 to i32
  %1641 = add nsw i32 %1636, 1
  %1642 = sext i32 %1641 to i64
  %1643 = getelementptr i16, ptr %1277, i64 %1642
  %1644 = icmp sgt i32 %1640, 0
  br i1 %1644, label %1645, label %1735

1645:                                             ; preds = %1626
  %1646 = and i64 %1639, 4294967295
  %1647 = icmp ult i64 %1646, 8
  br i1 %1647, label %1691, label %1648

1648:                                             ; preds = %1645
  %1649 = shl nsw i64 %1642, 1
  %1650 = add i64 %1649, %1278
  %1651 = sub i64 %1650, %644
  %1652 = icmp ult i64 %1651, 128
  br i1 %1652, label %1691, label %1653

1653:                                             ; preds = %1648
  %1654 = icmp ult i64 %1646, 64
  br i1 %1654, label %1678, label %1655

1655:                                             ; preds = %1653
  %1656 = and i64 %1639, 63
  %1657 = sub nsw i64 %1646, %1656
  br label %1658

1658:                                             ; preds = %1658, %1655
  %1659 = phi i64 [ 0, %1655 ], [ %1672, %1658 ]
  %1660 = getelementptr inbounds i16, ptr %329, i64 %1659
  %1661 = load <16 x i16>, ptr %1660, align 2, !tbaa !44
  %1662 = getelementptr inbounds i16, ptr %1660, i64 16
  %1663 = load <16 x i16>, ptr %1662, align 2, !tbaa !44
  %1664 = getelementptr inbounds i16, ptr %1660, i64 32
  %1665 = load <16 x i16>, ptr %1664, align 2, !tbaa !44
  %1666 = getelementptr inbounds i16, ptr %1660, i64 48
  %1667 = load <16 x i16>, ptr %1666, align 2, !tbaa !44
  %1668 = getelementptr inbounds i16, ptr %1643, i64 %1659
  store <16 x i16> %1661, ptr %1668, align 2, !tbaa !44
  %1669 = getelementptr inbounds i16, ptr %1668, i64 16
  store <16 x i16> %1663, ptr %1669, align 2, !tbaa !44
  %1670 = getelementptr inbounds i16, ptr %1668, i64 32
  store <16 x i16> %1665, ptr %1670, align 2, !tbaa !44
  %1671 = getelementptr inbounds i16, ptr %1668, i64 48
  store <16 x i16> %1667, ptr %1671, align 2, !tbaa !44
  %1672 = add nuw i64 %1659, 64
  %1673 = icmp eq i64 %1672, %1657
  br i1 %1673, label %1674, label %1658, !llvm.loop !289

1674:                                             ; preds = %1658
  %1675 = icmp eq i64 %1656, 0
  br i1 %1675, label %1729, label %1676

1676:                                             ; preds = %1674
  %1677 = icmp ult i64 %1656, 8
  br i1 %1677, label %1691, label %1678

1678:                                             ; preds = %1653, %1676
  %1679 = phi i64 [ %1657, %1676 ], [ 0, %1653 ]
  %1680 = and i64 %1639, 7
  %1681 = sub nsw i64 %1646, %1680
  br label %1682

1682:                                             ; preds = %1682, %1678
  %1683 = phi i64 [ %1679, %1678 ], [ %1687, %1682 ]
  %1684 = getelementptr inbounds i16, ptr %329, i64 %1683
  %1685 = load <8 x i16>, ptr %1684, align 2, !tbaa !44
  %1686 = getelementptr inbounds i16, ptr %1643, i64 %1683
  store <8 x i16> %1685, ptr %1686, align 2, !tbaa !44
  %1687 = add nuw i64 %1683, 8
  %1688 = icmp eq i64 %1687, %1681
  br i1 %1688, label %1689, label %1682, !llvm.loop !290

1689:                                             ; preds = %1682
  %1690 = icmp eq i64 %1680, 0
  br i1 %1690, label %1729, label %1691

1691:                                             ; preds = %1648, %1645, %1676, %1689
  %1692 = phi i64 [ 0, %1645 ], [ 0, %1648 ], [ %1657, %1676 ], [ %1681, %1689 ]
  %1693 = sub i64 %1639, %1692
  %1694 = xor i64 %1692, -1
  %1695 = add nsw i64 %1646, %1694
  %1696 = and i64 %1693, 3
  %1697 = icmp eq i64 %1696, 0
  br i1 %1697, label %1707, label %1698

1698:                                             ; preds = %1691, %1698
  %1699 = phi i64 [ %1704, %1698 ], [ %1692, %1691 ]
  %1700 = phi i64 [ %1705, %1698 ], [ 0, %1691 ]
  %1701 = getelementptr inbounds i16, ptr %329, i64 %1699
  %1702 = load i16, ptr %1701, align 2, !tbaa !44
  %1703 = getelementptr inbounds i16, ptr %1643, i64 %1699
  store i16 %1702, ptr %1703, align 2, !tbaa !44
  %1704 = add nuw nsw i64 %1699, 1
  %1705 = add i64 %1700, 1
  %1706 = icmp eq i64 %1705, %1696
  br i1 %1706, label %1707, label %1698, !llvm.loop !291

1707:                                             ; preds = %1698, %1691
  %1708 = phi i64 [ %1692, %1691 ], [ %1704, %1698 ]
  %1709 = icmp ult i64 %1695, 3
  br i1 %1709, label %1729, label %1710

1710:                                             ; preds = %1707, %1710
  %1711 = phi i64 [ %1727, %1710 ], [ %1708, %1707 ]
  %1712 = getelementptr inbounds i16, ptr %329, i64 %1711
  %1713 = load i16, ptr %1712, align 2, !tbaa !44
  %1714 = getelementptr inbounds i16, ptr %1643, i64 %1711
  store i16 %1713, ptr %1714, align 2, !tbaa !44
  %1715 = add nuw nsw i64 %1711, 1
  %1716 = getelementptr inbounds i16, ptr %329, i64 %1715
  %1717 = load i16, ptr %1716, align 2, !tbaa !44
  %1718 = getelementptr inbounds i16, ptr %1643, i64 %1715
  store i16 %1717, ptr %1718, align 2, !tbaa !44
  %1719 = add nuw nsw i64 %1711, 2
  %1720 = getelementptr inbounds i16, ptr %329, i64 %1719
  %1721 = load i16, ptr %1720, align 2, !tbaa !44
  %1722 = getelementptr inbounds i16, ptr %1643, i64 %1719
  store i16 %1721, ptr %1722, align 2, !tbaa !44
  %1723 = add nuw nsw i64 %1711, 3
  %1724 = getelementptr inbounds i16, ptr %329, i64 %1723
  %1725 = load i16, ptr %1724, align 2, !tbaa !44
  %1726 = getelementptr inbounds i16, ptr %1643, i64 %1723
  store i16 %1725, ptr %1726, align 2, !tbaa !44
  %1727 = add nuw nsw i64 %1711, 4
  %1728 = icmp eq i64 %1727, %1646
  br i1 %1728, label %1729, label %1710, !llvm.loop !292

1729:                                             ; preds = %1707, %1710, %1674, %1689
  %1730 = shl i64 %1638, 31
  %1731 = add i64 %1730, -4294967296
  %1732 = ashr i64 %1731, 32
  %1733 = getelementptr inbounds i16, ptr %1643, i64 %1732
  %1734 = load i16, ptr %1733, align 2, !tbaa !44
  br label %1735

1735:                                             ; preds = %1626, %1729
  %1736 = phi i64 [ %1639, %1729 ], [ 0, %1626 ]
  %1737 = phi i16 [ %1734, %1729 ], [ -1, %1626 ]
  %1738 = and i64 %1736, 4294967295
  %1739 = getelementptr inbounds i16, ptr %1643, i64 %1738
  store i16 %1737, ptr %1739, align 2, !tbaa !44
  %1740 = trunc i64 %1639 to i16
  %1741 = add i16 %1740, 1
  %1742 = sext i32 %1636 to i64
  %1743 = getelementptr inbounds i16, ptr %1277, i64 %1742
  store i16 %1741, ptr %1743, align 2, !tbaa !44
  %1744 = add nsw i32 %1640, 2
  %1745 = add nsw i32 %1744, %1636
  %1746 = ptrtoint ptr %1611 to i64
  %1747 = sub i64 %1746, %645
  %1748 = lshr exact i64 %1747, 1
  %1749 = trunc i64 %1748 to i32
  %1750 = add nsw i32 %1745, 1
  %1751 = sext i32 %1750 to i64
  %1752 = getelementptr i16, ptr %1277, i64 %1751
  %1753 = icmp sgt i32 %1749, 0
  br i1 %1753, label %1754, label %1844

1754:                                             ; preds = %1735
  %1755 = and i64 %1748, 4294967295
  %1756 = icmp ult i64 %1755, 8
  br i1 %1756, label %1800, label %1757

1757:                                             ; preds = %1754
  %1758 = shl nsw i64 %1751, 1
  %1759 = add i64 %1758, %1278
  %1760 = sub i64 %1759, %645
  %1761 = icmp ult i64 %1760, 128
  br i1 %1761, label %1800, label %1762

1762:                                             ; preds = %1757
  %1763 = icmp ult i64 %1755, 64
  br i1 %1763, label %1787, label %1764

1764:                                             ; preds = %1762
  %1765 = and i64 %1748, 63
  %1766 = sub nsw i64 %1755, %1765
  br label %1767

1767:                                             ; preds = %1767, %1764
  %1768 = phi i64 [ 0, %1764 ], [ %1781, %1767 ]
  %1769 = getelementptr inbounds i16, ptr %375, i64 %1768
  %1770 = load <16 x i16>, ptr %1769, align 2, !tbaa !44
  %1771 = getelementptr inbounds i16, ptr %1769, i64 16
  %1772 = load <16 x i16>, ptr %1771, align 2, !tbaa !44
  %1773 = getelementptr inbounds i16, ptr %1769, i64 32
  %1774 = load <16 x i16>, ptr %1773, align 2, !tbaa !44
  %1775 = getelementptr inbounds i16, ptr %1769, i64 48
  %1776 = load <16 x i16>, ptr %1775, align 2, !tbaa !44
  %1777 = getelementptr inbounds i16, ptr %1752, i64 %1768
  store <16 x i16> %1770, ptr %1777, align 2, !tbaa !44
  %1778 = getelementptr inbounds i16, ptr %1777, i64 16
  store <16 x i16> %1772, ptr %1778, align 2, !tbaa !44
  %1779 = getelementptr inbounds i16, ptr %1777, i64 32
  store <16 x i16> %1774, ptr %1779, align 2, !tbaa !44
  %1780 = getelementptr inbounds i16, ptr %1777, i64 48
  store <16 x i16> %1776, ptr %1780, align 2, !tbaa !44
  %1781 = add nuw i64 %1768, 64
  %1782 = icmp eq i64 %1781, %1766
  br i1 %1782, label %1783, label %1767, !llvm.loop !293

1783:                                             ; preds = %1767
  %1784 = icmp eq i64 %1765, 0
  br i1 %1784, label %1838, label %1785

1785:                                             ; preds = %1783
  %1786 = icmp ult i64 %1765, 8
  br i1 %1786, label %1800, label %1787

1787:                                             ; preds = %1762, %1785
  %1788 = phi i64 [ %1766, %1785 ], [ 0, %1762 ]
  %1789 = and i64 %1748, 7
  %1790 = sub nsw i64 %1755, %1789
  br label %1791

1791:                                             ; preds = %1791, %1787
  %1792 = phi i64 [ %1788, %1787 ], [ %1796, %1791 ]
  %1793 = getelementptr inbounds i16, ptr %375, i64 %1792
  %1794 = load <8 x i16>, ptr %1793, align 2, !tbaa !44
  %1795 = getelementptr inbounds i16, ptr %1752, i64 %1792
  store <8 x i16> %1794, ptr %1795, align 2, !tbaa !44
  %1796 = add nuw i64 %1792, 8
  %1797 = icmp eq i64 %1796, %1790
  br i1 %1797, label %1798, label %1791, !llvm.loop !294

1798:                                             ; preds = %1791
  %1799 = icmp eq i64 %1789, 0
  br i1 %1799, label %1838, label %1800

1800:                                             ; preds = %1757, %1754, %1785, %1798
  %1801 = phi i64 [ 0, %1754 ], [ 0, %1757 ], [ %1766, %1785 ], [ %1790, %1798 ]
  %1802 = sub i64 %1748, %1801
  %1803 = xor i64 %1801, -1
  %1804 = add nsw i64 %1755, %1803
  %1805 = and i64 %1802, 3
  %1806 = icmp eq i64 %1805, 0
  br i1 %1806, label %1816, label %1807

1807:                                             ; preds = %1800, %1807
  %1808 = phi i64 [ %1813, %1807 ], [ %1801, %1800 ]
  %1809 = phi i64 [ %1814, %1807 ], [ 0, %1800 ]
  %1810 = getelementptr inbounds i16, ptr %375, i64 %1808
  %1811 = load i16, ptr %1810, align 2, !tbaa !44
  %1812 = getelementptr inbounds i16, ptr %1752, i64 %1808
  store i16 %1811, ptr %1812, align 2, !tbaa !44
  %1813 = add nuw nsw i64 %1808, 1
  %1814 = add i64 %1809, 1
  %1815 = icmp eq i64 %1814, %1805
  br i1 %1815, label %1816, label %1807, !llvm.loop !295

1816:                                             ; preds = %1807, %1800
  %1817 = phi i64 [ %1801, %1800 ], [ %1813, %1807 ]
  %1818 = icmp ult i64 %1804, 3
  br i1 %1818, label %1838, label %1819

1819:                                             ; preds = %1816, %1819
  %1820 = phi i64 [ %1836, %1819 ], [ %1817, %1816 ]
  %1821 = getelementptr inbounds i16, ptr %375, i64 %1820
  %1822 = load i16, ptr %1821, align 2, !tbaa !44
  %1823 = getelementptr inbounds i16, ptr %1752, i64 %1820
  store i16 %1822, ptr %1823, align 2, !tbaa !44
  %1824 = add nuw nsw i64 %1820, 1
  %1825 = getelementptr inbounds i16, ptr %375, i64 %1824
  %1826 = load i16, ptr %1825, align 2, !tbaa !44
  %1827 = getelementptr inbounds i16, ptr %1752, i64 %1824
  store i16 %1826, ptr %1827, align 2, !tbaa !44
  %1828 = add nuw nsw i64 %1820, 2
  %1829 = getelementptr inbounds i16, ptr %375, i64 %1828
  %1830 = load i16, ptr %1829, align 2, !tbaa !44
  %1831 = getelementptr inbounds i16, ptr %1752, i64 %1828
  store i16 %1830, ptr %1831, align 2, !tbaa !44
  %1832 = add nuw nsw i64 %1820, 3
  %1833 = getelementptr inbounds i16, ptr %375, i64 %1832
  %1834 = load i16, ptr %1833, align 2, !tbaa !44
  %1835 = getelementptr inbounds i16, ptr %1752, i64 %1832
  store i16 %1834, ptr %1835, align 2, !tbaa !44
  %1836 = add nuw nsw i64 %1820, 4
  %1837 = icmp eq i64 %1836, %1755
  br i1 %1837, label %1838, label %1819, !llvm.loop !296

1838:                                             ; preds = %1816, %1819, %1783, %1798
  %1839 = shl i64 %1747, 31
  %1840 = add i64 %1839, -4294967296
  %1841 = ashr i64 %1840, 32
  %1842 = getelementptr inbounds i16, ptr %1752, i64 %1841
  %1843 = load i16, ptr %1842, align 2, !tbaa !44
  br label %1844

1844:                                             ; preds = %1735, %1838
  %1845 = phi i64 [ %1748, %1838 ], [ 0, %1735 ]
  %1846 = phi i16 [ %1843, %1838 ], [ -1, %1735 ]
  %1847 = and i64 %1845, 4294967295
  %1848 = getelementptr inbounds i16, ptr %1752, i64 %1847
  store i16 %1846, ptr %1848, align 2, !tbaa !44
  %1849 = trunc i64 %1748 to i16
  %1850 = add i16 %1849, 1
  %1851 = sext i32 %1745 to i64
  %1852 = getelementptr inbounds i16, ptr %1277, i64 %1851
  store i16 %1850, ptr %1852, align 2, !tbaa !44
  %1853 = add nsw i32 %1749, 2
  %1854 = add nsw i32 %1853, %1745
  %1855 = select i1 %142, i32 0, i32 %1854
  store i32 %1855, ptr %13, align 8
  br label %1886

1856:                                             ; preds = %681
  %1857 = load ptr, ptr %8, align 8, !tbaa !46
  %1858 = load i32, ptr %13, align 8, !tbaa !17
  %1859 = add i32 %1858, 1
  %1860 = sext i32 %1859 to i64
  %1861 = getelementptr inbounds i16, ptr %1857, i64 %1860
  %1862 = sext i32 %1858 to i64
  %1863 = getelementptr inbounds i16, ptr %1857, i64 %1862
  %1864 = load i16, ptr %1863, align 2, !tbaa !44
  %1865 = zext i16 %1864 to i32
  %1866 = add i32 %1859, %1865
  %1867 = add nsw i32 %1865, -1
  %1868 = add i32 %1866, 1
  %1869 = sext i32 %1868 to i64
  %1870 = getelementptr inbounds i16, ptr %1857, i64 %1869
  %1871 = sext i32 %1866 to i64
  %1872 = getelementptr inbounds i16, ptr %1857, i64 %1871
  %1873 = load i16, ptr %1872, align 2, !tbaa !44
  %1874 = zext i16 %1873 to i32
  %1875 = add i32 %1868, %1874
  %1876 = add nsw i32 %1874, -1
  %1877 = add i32 %1875, 1
  %1878 = sext i32 %1877 to i64
  %1879 = getelementptr inbounds i16, ptr %1857, i64 %1878
  %1880 = sext i32 %1875 to i64
  %1881 = getelementptr inbounds i16, ptr %1857, i64 %1880
  %1882 = load i16, ptr %1881, align 2, !tbaa !44
  %1883 = zext i16 %1882 to i32
  %1884 = add i32 %1877, %1883
  store i32 %1884, ptr %13, align 8, !tbaa !17
  %1885 = add nsw i32 %1883, -1
  br label %1886

1886:                                             ; preds = %1844, %1856
  %1887 = phi ptr [ %1861, %1856 ], [ %1281, %1844 ]
  %1888 = phi i32 [ %1867, %1856 ], [ %1618, %1844 ]
  %1889 = phi ptr [ %1870, %1856 ], [ %1643, %1844 ]
  %1890 = phi i32 [ %1876, %1856 ], [ %1640, %1844 ]
  %1891 = phi ptr [ %1879, %1856 ], [ %1752, %1844 ]
  %1892 = phi i32 [ %1885, %1856 ], [ %1749, %1844 ]
  %1893 = phi i32 [ %664, %1856 ], [ %1239, %1844 ]
  %1894 = phi i32 [ %663, %1856 ], [ %1240, %1844 ]
  %1895 = phi i32 [ %662, %1856 ], [ %1241, %1844 ]
  %1896 = phi i32 [ %661, %1856 ], [ %1242, %1844 ]
  %1897 = phi ptr [ %659, %1856 ], [ %935, %1844 ]
  %1898 = phi ptr [ %658, %1856 ], [ %936, %1844 ]
  %1899 = phi ptr [ %657, %1856 ], [ %937, %1844 ]
  %1900 = getelementptr inbounds %struct.CompAtom, ptr %39, i64 %666, i32 1
  %1901 = load float, ptr %1900, align 8, !tbaa !79
  %1902 = fpext float %1901 to double
  %1903 = fmul double %1902, 0x4074C104816F0069
  %1904 = fmul double %28, %1903
  %1905 = fmul double %24, %1904
  %1906 = load double, ptr @_ZN20ComputeNonbondedUtil7cutoff2E, align 8, !tbaa !19
  %1907 = extractelement <2 x double> %684, i64 0
  %1908 = extractelement <2 x double> %684, i64 1
  %1909 = tail call noundef i32 @_Z22pairlist_from_pairlistddddPK8CompAtomPKtiPtdPd(double noundef %1906, double noundef %1907, double noundef %1908, double noundef %687, ptr noundef %41, ptr noundef nonnull %1887, i32 noundef %1888, ptr noundef %94, double noundef %31, ptr noundef %140)
  %1910 = icmp sgt i32 %1909, 0
  br i1 %1910, label %1911, label %1981

1911:                                             ; preds = %1886
  %1912 = load ptr, ptr @_ZN20ComputeNonbondedUtil8r2_tableE, align 8, !tbaa !23
  %1913 = zext i32 %1909 to i64
  br label %1914

1914:                                             ; preds = %1911, %1914
  %1915 = phi i64 [ 0, %1911 ], [ %1979, %1914 ]
  %1916 = phi double [ %655, %1911 ], [ %1963, %1914 ]
  %1917 = phi double [ 0.000000e+00, %1911 ], [ %1975, %1914 ]
  %1918 = phi <2 x double> [ zeroinitializer, %1911 ], [ %1971, %1914 ]
  %1919 = shl nuw nsw i64 %1915, 1
  %1920 = getelementptr inbounds i32, ptr %141, i64 %1919
  %1921 = load i32, ptr %1920, align 4, !tbaa !5
  %1922 = ashr i32 %1921, 14
  %1923 = add nsw i32 %1922, %34
  %1924 = getelementptr inbounds i16, ptr %94, i64 %1915
  %1925 = load i16, ptr %1924, align 2, !tbaa !44
  %1926 = zext i16 %1925 to i64
  %1927 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %1926
  %1928 = getelementptr inbounds double, ptr %140, i64 %1915
  %1929 = load double, ptr %1928, align 8, !tbaa !19
  %1930 = sext i32 %1923 to i64
  %1931 = getelementptr inbounds double, ptr %1912, i64 %1930
  %1932 = load double, ptr %1931, align 8, !tbaa !19
  %1933 = fsub double %1929, %1932
  %1934 = shl nsw i32 %1923, 4
  %1935 = sext i32 %1934 to i64
  %1936 = getelementptr inbounds double, ptr %26, i64 %1935
  %1937 = getelementptr inbounds %class.Vector, ptr %625, i64 %1926
  %1938 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %1926, i32 1
  %1939 = load float, ptr %1938, align 8, !tbaa !79
  %1940 = fpext float %1939 to double
  %1941 = fmul double %1905, %1940
  %1942 = getelementptr inbounds %class.Vector, ptr %1927, i64 0, i32 2
  %1943 = load double, ptr %1942, align 8, !tbaa !49
  %1944 = fsub double %687, %1943
  %1945 = getelementptr inbounds double, ptr %1936, i64 12
  %1946 = load double, ptr %1945, align 8, !tbaa !19
  %1947 = getelementptr inbounds double, ptr %1936, i64 13
  %1948 = load double, ptr %1947, align 8, !tbaa !19
  %1949 = getelementptr inbounds double, ptr %1936, i64 14
  %1950 = load double, ptr %1949, align 8, !tbaa !19
  %1951 = getelementptr inbounds double, ptr %1936, i64 15
  %1952 = load double, ptr %1951, align 8, !tbaa !19
  %1953 = fmul double %1941, %1946
  %1954 = fmul double %1941, %1948
  %1955 = fmul double %1941, %1950
  %1956 = fmul double %1941, %1952
  %1957 = fmul double %1933, %1953
  %1958 = fmul double %1954, 2.500000e-01
  %1959 = tail call double @llvm.fmuladd.f64(double %1957, double 0x3FC5555555555555, double %1958)
  %1960 = fmul double %1955, 5.000000e-01
  %1961 = tail call double @llvm.fmuladd.f64(double %1959, double %1933, double %1960)
  %1962 = tail call double @llvm.fmuladd.f64(double %1961, double %1933, double %1956)
  %1963 = fsub double %1916, %1962
  %1964 = tail call double @llvm.fmuladd.f64(double %1933, double %1953, double %1954)
  %1965 = tail call double @llvm.fmuladd.f64(double %1964, double %1933, double %1955)
  %1966 = load <2 x double>, ptr %1927, align 8, !tbaa !19
  %1967 = fsub <2 x double> %684, %1966
  %1968 = insertelement <2 x double> poison, double %1965, i64 0
  %1969 = shufflevector <2 x double> %1968, <2 x double> poison, <2 x i32> zeroinitializer
  %1970 = fmul <2 x double> %1967, %1969
  %1971 = fadd <2 x double> %1918, %1970
  %1972 = load <2 x double>, ptr %1937, align 8, !tbaa !19
  %1973 = fsub <2 x double> %1972, %1970
  store <2 x double> %1973, ptr %1937, align 8, !tbaa !19
  %1974 = fmul double %1944, %1965
  %1975 = fadd double %1917, %1974
  %1976 = getelementptr inbounds %class.Vector, ptr %625, i64 %1926, i32 2
  %1977 = load double, ptr %1976, align 8, !tbaa !87
  %1978 = fsub double %1977, %1974
  store double %1978, ptr %1976, align 8, !tbaa !87
  %1979 = add nuw nsw i64 %1915, 1
  %1980 = icmp eq i64 %1979, %1913
  br i1 %1980, label %1981, label %1914

1981:                                             ; preds = %1914, %1886
  %1982 = phi double [ 0.000000e+00, %1886 ], [ %1975, %1914 ]
  %1983 = phi double [ %655, %1886 ], [ %1963, %1914 ]
  %1984 = phi <2 x double> [ zeroinitializer, %1886 ], [ %1971, %1914 ]
  %1985 = load double, ptr @_ZN20ComputeNonbondedUtil7cutoff2E, align 8, !tbaa !19
  %1986 = tail call noundef i32 @_Z22pairlist_from_pairlistddddPK8CompAtomPKtiPtdPd(double noundef %1985, double noundef %1907, double noundef %1908, double noundef %687, ptr noundef %41, ptr noundef %1891, i32 noundef %1892, ptr noundef %94, double noundef %31, ptr noundef %140)
  %1987 = add nsw i32 %1986, %654
  %1988 = icmp sgt i32 %1986, 0
  br i1 %1988, label %1989, label %2073

1989:                                             ; preds = %1981
  %1990 = load ptr, ptr @_ZN20ComputeNonbondedUtil8r2_tableE, align 8, !tbaa !23
  %1991 = zext i32 %1986 to i64
  br label %1992

1992:                                             ; preds = %1989, %1992
  %1993 = phi i64 [ 0, %1989 ], [ %2071, %1992 ]
  %1994 = phi double [ %1983, %1989 ], [ %2055, %1992 ]
  %1995 = phi double [ %1982, %1989 ], [ %2067, %1992 ]
  %1996 = phi <2 x double> [ %1984, %1989 ], [ %2063, %1992 ]
  %1997 = shl nuw nsw i64 %1993, 1
  %1998 = getelementptr inbounds i32, ptr %141, i64 %1997
  %1999 = load i32, ptr %1998, align 4, !tbaa !5
  %2000 = ashr i32 %1999, 14
  %2001 = add nsw i32 %2000, %34
  %2002 = getelementptr inbounds i16, ptr %94, i64 %1993
  %2003 = load i16, ptr %2002, align 2, !tbaa !44
  %2004 = zext i16 %2003 to i64
  %2005 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %2004
  %2006 = getelementptr inbounds double, ptr %140, i64 %1993
  %2007 = load double, ptr %2006, align 8, !tbaa !19
  %2008 = sext i32 %2001 to i64
  %2009 = getelementptr inbounds double, ptr %1990, i64 %2008
  %2010 = load double, ptr %2009, align 8, !tbaa !19
  %2011 = fsub double %2007, %2010
  %2012 = shl nsw i32 %2001, 4
  %2013 = sext i32 %2012 to i64
  %2014 = getelementptr inbounds double, ptr %26, i64 %2013
  %2015 = getelementptr inbounds %class.Vector, ptr %625, i64 %2004
  %2016 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %2004, i32 1
  %2017 = load float, ptr %2016, align 8, !tbaa !79
  %2018 = fpext float %2017 to double
  %2019 = fmul double %1905, %2018
  %2020 = getelementptr inbounds %class.Vector, ptr %2005, i64 0, i32 2
  %2021 = load double, ptr %2020, align 8, !tbaa !49
  %2022 = fsub double %687, %2021
  %2023 = shl nsw i32 %2001, 2
  %2024 = sext i32 %2023 to i64
  %2025 = getelementptr inbounds double, ptr %27, i64 %2024
  %2026 = getelementptr inbounds double, ptr %2014, i64 12
  %2027 = load double, ptr %2026, align 8, !tbaa !19
  %2028 = getelementptr inbounds double, ptr %2014, i64 13
  %2029 = load double, ptr %2028, align 8, !tbaa !19
  %2030 = getelementptr inbounds double, ptr %2014, i64 14
  %2031 = load double, ptr %2030, align 8, !tbaa !19
  %2032 = getelementptr inbounds double, ptr %2014, i64 15
  %2033 = load double, ptr %2032, align 8, !tbaa !19
  %2034 = load double, ptr %2025, align 8, !tbaa !19
  %2035 = tail call double @llvm.fmuladd.f64(double %30, double %2034, double %2033)
  %2036 = getelementptr inbounds double, ptr %2025, i64 1
  %2037 = load double, ptr %2036, align 8, !tbaa !19
  %2038 = tail call double @llvm.fmuladd.f64(double %646, double %2037, double %2031)
  %2039 = getelementptr inbounds double, ptr %2025, i64 2
  %2040 = load double, ptr %2039, align 8, !tbaa !19
  %2041 = tail call double @llvm.fmuladd.f64(double %647, double %2040, double %2029)
  %2042 = getelementptr inbounds double, ptr %2025, i64 3
  %2043 = load double, ptr %2042, align 8, !tbaa !19
  %2044 = tail call double @llvm.fmuladd.f64(double %648, double %2043, double %2027)
  %2045 = fmul double %2019, %2044
  %2046 = fmul double %2019, %2041
  %2047 = fmul double %2019, %2038
  %2048 = fmul double %2019, %2035
  %2049 = fmul double %2011, %2045
  %2050 = fmul double %2046, 2.500000e-01
  %2051 = tail call double @llvm.fmuladd.f64(double %2049, double 0x3FC5555555555555, double %2050)
  %2052 = fmul double %2047, 5.000000e-01
  %2053 = tail call double @llvm.fmuladd.f64(double %2051, double %2011, double %2052)
  %2054 = tail call double @llvm.fmuladd.f64(double %2053, double %2011, double %2048)
  %2055 = fsub double %1994, %2054
  %2056 = tail call double @llvm.fmuladd.f64(double %2011, double %2045, double %2046)
  %2057 = tail call double @llvm.fmuladd.f64(double %2056, double %2011, double %2047)
  %2058 = load <2 x double>, ptr %2005, align 8, !tbaa !19
  %2059 = fsub <2 x double> %684, %2058
  %2060 = insertelement <2 x double> poison, double %2057, i64 0
  %2061 = shufflevector <2 x double> %2060, <2 x double> poison, <2 x i32> zeroinitializer
  %2062 = fmul <2 x double> %2059, %2061
  %2063 = fadd <2 x double> %1996, %2062
  %2064 = load <2 x double>, ptr %2015, align 8, !tbaa !19
  %2065 = fsub <2 x double> %2064, %2062
  store <2 x double> %2065, ptr %2015, align 8, !tbaa !19
  %2066 = fmul double %2022, %2057
  %2067 = fadd double %1995, %2066
  %2068 = getelementptr inbounds %class.Vector, ptr %625, i64 %2004, i32 2
  %2069 = load double, ptr %2068, align 8, !tbaa !87
  %2070 = fsub double %2069, %2066
  store double %2070, ptr %2068, align 8, !tbaa !87
  %2071 = add nuw nsw i64 %1993, 1
  %2072 = icmp eq i64 %2071, %1991
  br i1 %2072, label %2073, label %1992

2073:                                             ; preds = %1992, %1981
  %2074 = phi double [ %1982, %1981 ], [ %2067, %1992 ]
  %2075 = phi double [ %1983, %1981 ], [ %2055, %1992 ]
  %2076 = phi <2 x double> [ %1984, %1981 ], [ %2063, %1992 ]
  %2077 = load double, ptr @_ZN20ComputeNonbondedUtil7cutoff2E, align 8, !tbaa !19
  %2078 = tail call noundef i32 @_Z22pairlist_from_pairlistddddPK8CompAtomPKtiPtdPd(double noundef %2077, double noundef %1907, double noundef %1908, double noundef %687, ptr noundef %41, ptr noundef %1889, i32 noundef %1890, ptr noundef %94, double noundef %31, ptr noundef %140)
  %2079 = add nsw i32 %1987, %2078
  %2080 = icmp sgt i32 %2078, 0
  br i1 %2080, label %2081, label %2165

2081:                                             ; preds = %2073
  %2082 = load ptr, ptr @_ZN20ComputeNonbondedUtil8r2_tableE, align 8, !tbaa !23
  %2083 = zext i32 %2078 to i64
  br label %2084

2084:                                             ; preds = %2081, %2084
  %2085 = phi i64 [ 0, %2081 ], [ %2163, %2084 ]
  %2086 = phi double [ %2075, %2081 ], [ %2147, %2084 ]
  %2087 = phi double [ %2074, %2081 ], [ %2159, %2084 ]
  %2088 = phi <2 x double> [ %2076, %2081 ], [ %2155, %2084 ]
  %2089 = shl nuw nsw i64 %2085, 1
  %2090 = getelementptr inbounds i32, ptr %141, i64 %2089
  %2091 = load i32, ptr %2090, align 4, !tbaa !5
  %2092 = ashr i32 %2091, 14
  %2093 = add nsw i32 %2092, %34
  %2094 = getelementptr inbounds i16, ptr %94, i64 %2085
  %2095 = load i16, ptr %2094, align 2, !tbaa !44
  %2096 = zext i16 %2095 to i64
  %2097 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %2096
  %2098 = getelementptr inbounds double, ptr %140, i64 %2085
  %2099 = load double, ptr %2098, align 8, !tbaa !19
  %2100 = sext i32 %2093 to i64
  %2101 = getelementptr inbounds double, ptr %2082, i64 %2100
  %2102 = load double, ptr %2101, align 8, !tbaa !19
  %2103 = fsub double %2099, %2102
  %2104 = shl nsw i32 %2093, 4
  %2105 = sext i32 %2104 to i64
  %2106 = getelementptr inbounds double, ptr %26, i64 %2105
  %2107 = getelementptr inbounds %class.Vector, ptr %625, i64 %2096
  %2108 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %2096, i32 1
  %2109 = load float, ptr %2108, align 8, !tbaa !79
  %2110 = fpext float %2109 to double
  %2111 = fmul double %1905, %2110
  %2112 = getelementptr inbounds %class.Vector, ptr %2097, i64 0, i32 2
  %2113 = load double, ptr %2112, align 8, !tbaa !49
  %2114 = fsub double %687, %2113
  %2115 = shl nsw i32 %2093, 2
  %2116 = sext i32 %2115 to i64
  %2117 = getelementptr inbounds double, ptr %27, i64 %2116
  %2118 = getelementptr inbounds double, ptr %2106, i64 12
  %2119 = load double, ptr %2118, align 8, !tbaa !19
  %2120 = getelementptr inbounds double, ptr %2106, i64 13
  %2121 = load double, ptr %2120, align 8, !tbaa !19
  %2122 = getelementptr inbounds double, ptr %2106, i64 14
  %2123 = load double, ptr %2122, align 8, !tbaa !19
  %2124 = getelementptr inbounds double, ptr %2106, i64 15
  %2125 = load double, ptr %2124, align 8, !tbaa !19
  %2126 = load double, ptr %2117, align 8, !tbaa !19
  %2127 = fadd double %2125, %2126
  %2128 = getelementptr inbounds double, ptr %2117, i64 1
  %2129 = load double, ptr %2128, align 8, !tbaa !19
  %2130 = tail call double @llvm.fmuladd.f64(double %2129, double 2.000000e+00, double %2123)
  %2131 = getelementptr inbounds double, ptr %2117, i64 2
  %2132 = load double, ptr %2131, align 8, !tbaa !19
  %2133 = tail call double @llvm.fmuladd.f64(double %2132, double 4.000000e+00, double %2121)
  %2134 = getelementptr inbounds double, ptr %2117, i64 3
  %2135 = load double, ptr %2134, align 8, !tbaa !19
  %2136 = tail call double @llvm.fmuladd.f64(double %2135, double 6.000000e+00, double %2119)
  %2137 = fmul double %2111, %2136
  %2138 = fmul double %2111, %2133
  %2139 = fmul double %2111, %2130
  %2140 = fmul double %2111, %2127
  %2141 = fmul double %2103, %2137
  %2142 = fmul double %2138, 2.500000e-01
  %2143 = tail call double @llvm.fmuladd.f64(double %2141, double 0x3FC5555555555555, double %2142)
  %2144 = fmul double %2139, 5.000000e-01
  %2145 = tail call double @llvm.fmuladd.f64(double %2143, double %2103, double %2144)
  %2146 = tail call double @llvm.fmuladd.f64(double %2145, double %2103, double %2140)
  %2147 = fsub double %2086, %2146
  %2148 = tail call double @llvm.fmuladd.f64(double %2103, double %2137, double %2138)
  %2149 = tail call double @llvm.fmuladd.f64(double %2148, double %2103, double %2139)
  %2150 = load <2 x double>, ptr %2097, align 8, !tbaa !19
  %2151 = fsub <2 x double> %684, %2150
  %2152 = insertelement <2 x double> poison, double %2149, i64 0
  %2153 = shufflevector <2 x double> %2152, <2 x double> poison, <2 x i32> zeroinitializer
  %2154 = fmul <2 x double> %2151, %2153
  %2155 = fadd <2 x double> %2088, %2154
  %2156 = load <2 x double>, ptr %2107, align 8, !tbaa !19
  %2157 = fsub <2 x double> %2156, %2154
  store <2 x double> %2157, ptr %2107, align 8, !tbaa !19
  %2158 = fmul double %2114, %2149
  %2159 = fadd double %2087, %2158
  %2160 = getelementptr inbounds %class.Vector, ptr %625, i64 %2096, i32 2
  %2161 = load double, ptr %2160, align 8, !tbaa !87
  %2162 = fsub double %2161, %2158
  store double %2162, ptr %2160, align 8, !tbaa !87
  %2163 = add nuw nsw i64 %2085, 1
  %2164 = icmp eq i64 %2163, %2083
  br i1 %2164, label %2165, label %2084

2165:                                             ; preds = %2084, %2073
  %2166 = phi double [ %2074, %2073 ], [ %2159, %2084 ]
  %2167 = phi double [ %2075, %2073 ], [ %2147, %2084 ]
  %2168 = phi <2 x double> [ %2076, %2073 ], [ %2155, %2084 ]
  %2169 = getelementptr inbounds %class.Vector, ptr %625, i64 %666
  %2170 = load <2 x double>, ptr %2169, align 8, !tbaa !19
  %2171 = fadd <2 x double> %2168, %2170
  store <2 x double> %2171, ptr %2169, align 8, !tbaa !19
  %2172 = getelementptr inbounds %class.Vector, ptr %625, i64 %666, i32 2
  %2173 = load double, ptr %2172, align 8, !tbaa !87
  %2174 = fadd double %2166, %2173
  store double %2174, ptr %2172, align 8, !tbaa !87
  br label %2175

2175:                                             ; preds = %2165, %677
  %2176 = phi i32 [ %678, %677 ], [ %682, %2165 ]
  %2177 = phi i32 [ %664, %677 ], [ %1893, %2165 ]
  %2178 = phi i32 [ %663, %677 ], [ %1894, %2165 ]
  %2179 = phi i32 [ %662, %677 ], [ %1895, %2165 ]
  %2180 = phi i32 [ %661, %677 ], [ %1896, %2165 ]
  %2181 = phi i32 [ %660, %677 ], [ %689, %2165 ]
  %2182 = phi ptr [ %659, %677 ], [ %1897, %2165 ]
  %2183 = phi ptr [ %658, %677 ], [ %1898, %2165 ]
  %2184 = phi ptr [ %657, %677 ], [ %1899, %2165 ]
  %2185 = phi i32 [ %680, %677 ], [ %656, %2165 ]
  %2186 = phi double [ %655, %677 ], [ %2167, %2165 ]
  %2187 = phi i32 [ %654, %677 ], [ %2079, %2165 ]
  %2188 = add nsw i32 %2185, 1
  %2189 = icmp slt i32 %2188, %631
  br i1 %2189, label %653, label %2190

2190:                                             ; preds = %2175, %619
  %2191 = phi ptr [ null, %619 ], [ %2184, %2175 ]
  %2192 = phi double [ 0.000000e+00, %619 ], [ %2186, %2175 ]
  %2193 = phi i32 [ 0, %619 ], [ %2187, %2175 ]
  %2194 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 4
  %2195 = load ptr, ptr %2194, align 8, !tbaa !23
  %2196 = icmp sgt i32 %36, 0
  br i1 %2196, label %2197, label %2199

2197:                                             ; preds = %2190
  %2198 = zext i32 %36 to i64
  br label %2225

2199:                                             ; preds = %2225, %2190
  %2200 = phi <4 x double> [ zeroinitializer, %2190 ], [ %2255, %2225 ]
  %2201 = phi <2 x double> [ zeroinitializer, %2190 ], [ %2250, %2225 ]
  %2202 = sitofp i32 %2193 to double
  %2203 = getelementptr inbounds double, ptr %6, i64 22
  %2204 = load double, ptr %2203, align 8, !tbaa !19
  %2205 = fadd double %2204, %2202
  store double %2205, ptr %2203, align 8, !tbaa !19
  %2206 = getelementptr inbounds double, ptr %6, i64 1
  %2207 = load double, ptr %2206, align 8, !tbaa !19
  %2208 = fadd double %2192, %2207
  store double %2208, ptr %2206, align 8, !tbaa !19
  %2209 = getelementptr inbounds double, ptr %6, i64 12
  %2210 = load <4 x double>, ptr %2209, align 8, !tbaa !19
  %2211 = shufflevector <2 x double> %2201, <2 x double> poison, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>
  %2212 = shufflevector <4 x double> %2211, <4 x double> %2200, <4 x i32> <i32 0, i32 1, i32 7, i32 poison>
  %2213 = shufflevector <4 x double> %2212, <4 x double> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 1>
  %2214 = fadd <4 x double> %2213, %2210
  store <4 x double> %2214, ptr %2209, align 8, !tbaa !19
  %2215 = getelementptr inbounds double, ptr %6, i64 16
  %2216 = load <4 x double>, ptr %2215, align 8, !tbaa !19
  %2217 = shufflevector <4 x double> %2200, <4 x double> poison, <4 x i32> <i32 2, i32 1, i32 3, i32 poison>
  %2218 = shufflevector <4 x double> %2217, <4 x double> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 1>
  %2219 = fadd <4 x double> %2218, %2216
  store <4 x double> %2219, ptr %2215, align 8, !tbaa !19
  %2220 = getelementptr inbounds double, ptr %6, i64 20
  %2221 = load double, ptr %2220, align 8, !tbaa !19
  %2222 = extractelement <4 x double> %2200, i64 0
  %2223 = fadd double %2222, %2221
  store double %2223, ptr %2220, align 8, !tbaa !19
  %2224 = icmp eq ptr %2191, null
  br i1 %2224, label %2259, label %2258

2225:                                             ; preds = %2197, %2225
  %2226 = phi i64 [ 0, %2197 ], [ %2256, %2225 ]
  %2227 = phi <4 x double> [ zeroinitializer, %2197 ], [ %2255, %2225 ]
  %2228 = phi <2 x double> [ zeroinitializer, %2197 ], [ %2250, %2225 ]
  %2229 = getelementptr inbounds %class.Vector, ptr %625, i64 %2226
  %2230 = getelementptr inbounds %class.Vector, ptr %2195, i64 %2226
  %2231 = getelementptr inbounds %class.Vector, ptr %625, i64 %2226, i32 1
  %2232 = load <2 x double>, ptr %2229, align 8, !tbaa !19
  %2233 = load <2 x double>, ptr %2230, align 8, !tbaa !19
  %2234 = fadd <2 x double> %2232, %2233
  store <2 x double> %2234, ptr %2230, align 8, !tbaa !19
  %2235 = getelementptr inbounds %class.Vector, ptr %625, i64 %2226, i32 2
  %2236 = load double, ptr %2235, align 8, !tbaa !87
  %2237 = getelementptr inbounds %class.Vector, ptr %2195, i64 %2226, i32 2
  %2238 = load double, ptr %2237, align 8, !tbaa !87
  %2239 = fadd double %2236, %2238
  store double %2239, ptr %2237, align 8, !tbaa !87
  %2240 = load double, ptr %2229, align 8, !tbaa !191
  %2241 = getelementptr inbounds %struct.CompAtom, ptr %39, i64 %2226
  %2242 = load double, ptr %2241, align 8, !tbaa !67
  %2243 = getelementptr inbounds %class.Vector, ptr %2241, i64 0, i32 1
  %2244 = load <2 x double>, ptr %2243, align 8, !tbaa !19
  %2245 = shufflevector <2 x double> %2244, <2 x double> poison, <4 x i32> <i32 1, i32 1, i32 0, i32 1>
  %2246 = insertelement <2 x double> poison, double %2240, i64 0
  %2247 = shufflevector <2 x double> %2246, <2 x double> poison, <2 x i32> zeroinitializer
  %2248 = shufflevector <2 x double> %2244, <2 x double> poison, <2 x i32> <i32 poison, i32 0>
  %2249 = insertelement <2 x double> %2248, double %2242, i64 0
  %2250 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2247, <2 x double> %2249, <2 x double> %2228)
  %2251 = load <2 x double>, ptr %2231, align 8, !tbaa !19
  %2252 = shufflevector <2 x double> %2251, <2 x double> poison, <4 x i32> <i32 1, i32 0, i32 poison, i32 poison>
  %2253 = insertelement <4 x double> %2252, double %2240, i64 3
  %2254 = shufflevector <4 x double> %2253, <4 x double> poison, <4 x i32> <i32 0, i32 1, i32 1, i32 3>
  %2255 = tail call <4 x double> @llvm.fmuladd.v4f64(<4 x double> %2254, <4 x double> %2245, <4 x double> %2227)
  %2256 = add nuw nsw i64 %2226, 1
  %2257 = icmp eq i64 %2256, %2198
  br i1 %2257, label %2199, label %2225

2258:                                             ; preds = %2199
  tail call void @_ZdaPv(ptr noundef nonnull %2191) #10
  br label %2259

2259:                                             ; preds = %2199, %2258, %1
  ret void
}

; Function Attrs: sspstrong uwtable
define dso_local void @_ZN20ComputeNonbondedUtil20calc_pair_energy_intEP9nonbonded(ptr nocapture noundef readonly %0) local_unnamed_addr #0 align 2 {
  %2 = load i32, ptr @_ZN20ComputeNonbondedUtil8commOnlyE, align 4, !tbaa !5
  %3 = icmp eq i32 %2, 0
  br i1 %3, label %4, label %2416

4:                                                ; preds = %1
  %5 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 7
  %6 = load ptr, ptr %5, align 8, !tbaa !9
  %7 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 10
  %8 = load ptr, ptr %7, align 8, !tbaa !14
  %9 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 11
  %10 = load i32, ptr %9, align 8, !tbaa !15
  %11 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 12
  %12 = load i32, ptr %11, align 4, !tbaa !16
  %13 = getelementptr inbounds %class.Pairlists, ptr %8, i64 0, i32 1
  store i32 0, ptr %13, align 8, !tbaa !17
  %14 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 6
  %15 = load <2 x double>, ptr %14, align 8, !tbaa !19
  %16 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 6, i32 2
  %17 = load double, ptr %16, align 8, !tbaa !20
  %18 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 13
  %19 = load double, ptr %18, align 8, !tbaa !21
  %20 = fmul double %19, %19
  %21 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 14
  %22 = load double, ptr %21, align 8, !tbaa !22
  %23 = fmul double %22, %22
  %24 = load double, ptr @_ZN20ComputeNonbondedUtil12dielectric_1E, align 8, !tbaa !19
  %25 = load ptr, ptr @_ZN20ComputeNonbondedUtil7ljTableE, align 8, !tbaa !23
  %26 = load ptr, ptr @_ZN20ComputeNonbondedUtil3molE, align 8, !tbaa !23
  %27 = load ptr, ptr @_ZN20ComputeNonbondedUtil11table_shortE, align 8, !tbaa !23
  %28 = load double, ptr @_ZN20ComputeNonbondedUtil7scalingE, align 8, !tbaa !19
  %29 = load double, ptr @_ZN20ComputeNonbondedUtil7scale14E, align 8, !tbaa !19
  %30 = load double, ptr @_ZN20ComputeNonbondedUtil8r2_deltaE, align 8, !tbaa !19
  %31 = load i32, ptr @_ZN20ComputeNonbondedUtil12r2_delta_expE, align 4, !tbaa !5
  %32 = shl i32 %31, 6
  %33 = add i32 %32, -65472
  %34 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 5
  %35 = load i32, ptr %34, align 8, !tbaa !5
  %36 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 5, i64 1
  %37 = load i32, ptr %36, align 4, !tbaa !5
  %38 = load ptr, ptr %0, align 8, !tbaa !23
  %39 = getelementptr inbounds [2 x ptr], ptr %0, i64 0, i64 1
  %40 = load ptr, ptr %39, align 8, !tbaa !23
  %41 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 1
  %42 = load ptr, ptr %41, align 8, !tbaa !23
  %43 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 1, i64 1
  %44 = load ptr, ptr %43, align 8, !tbaa !23
  %45 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 9
  %46 = load ptr, ptr %45, align 8, !tbaa !24
  %47 = add nsw i32 %37, 5
  %48 = getelementptr inbounds %class.ResizeArray, ptr %46, i64 0, i32 1
  %49 = load ptr, ptr %48, align 8, !tbaa !25
  %50 = getelementptr inbounds %class.ResizeArrayRaw, ptr %49, i64 0, i32 2
  %51 = load i32, ptr %50, align 8, !tbaa !27
  %52 = icmp slt i32 %51, %47
  br i1 %52, label %53, label %91

53:                                               ; preds = %4
  %54 = getelementptr inbounds %class.ResizeArrayRaw, ptr %49, i64 0, i32 3
  %55 = load i32, ptr %54, align 4, !tbaa !30
  %56 = icmp slt i32 %55, %47
  br i1 %56, label %57, label %91

57:                                               ; preds = %53
  %58 = sitofp i32 %55 to float
  %59 = getelementptr inbounds %class.ResizeArrayRaw, ptr %49, i64 0, i32 5
  %60 = load float, ptr %59, align 4, !tbaa !31
  %61 = fmul float %60, %58
  %62 = fptosi float %61 to i32
  %63 = tail call i32 @llvm.smax.i32(i32 %62, i32 %47)
  %64 = sub nsw i32 %63, %55
  %65 = getelementptr inbounds %class.ResizeArrayRaw, ptr %49, i64 0, i32 6
  %66 = load i32, ptr %65, align 8, !tbaa !32
  %67 = icmp slt i32 %64, %66
  %68 = add nsw i32 %66, %55
  %69 = select i1 %67, i32 %68, i32 %63
  %70 = sext i32 %69 to i64
  %71 = shl nsw i64 %70, 1
  %72 = add nsw i64 %71, 31
  %73 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %72) #9
  %74 = getelementptr inbounds i8, ptr %73, i64 31
  %75 = ptrtoint ptr %74 to i64
  %76 = and i64 %75, 31
  %77 = sub nsw i64 0, %76
  %78 = getelementptr inbounds i8, ptr %74, i64 %77
  %79 = load ptr, ptr %49, align 8, !tbaa !33
  %80 = sext i32 %51 to i64
  %81 = shl nsw i64 %80, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %78, ptr align 1 %79, i64 %81, i1 false)
  %82 = icmp eq i32 %55, 0
  br i1 %82, label %88, label %83

83:                                               ; preds = %57
  %84 = getelementptr inbounds %class.ResizeArrayRaw, ptr %49, i64 0, i32 1
  %85 = load ptr, ptr %84, align 8, !tbaa !34
  %86 = icmp eq ptr %85, null
  br i1 %86, label %88, label %87

87:                                               ; preds = %83
  tail call void @_ZdaPv(ptr noundef nonnull %85) #10
  br label %88

88:                                               ; preds = %87, %83, %57
  %89 = getelementptr inbounds %class.ResizeArrayRaw, ptr %49, i64 0, i32 1
  store ptr %73, ptr %89, align 8, !tbaa !34
  store ptr %78, ptr %49, align 8, !tbaa !33
  store i32 %69, ptr %54, align 4, !tbaa !30
  %90 = load ptr, ptr %48, align 8, !tbaa !25
  br label %91

91:                                               ; preds = %4, %53, %88
  %92 = phi ptr [ %49, %4 ], [ %49, %53 ], [ %90, %88 ]
  store i32 %47, ptr %50, align 8, !tbaa !27
  %93 = load ptr, ptr %92, align 8, !tbaa !33
  %94 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %46, i64 0, i32 1, i32 1
  %95 = load ptr, ptr %94, align 8, !tbaa !35
  %96 = getelementptr inbounds %class.ResizeArrayRaw.23, ptr %95, i64 0, i32 2
  %97 = load i32, ptr %96, align 8, !tbaa !37
  %98 = icmp slt i32 %97, %47
  br i1 %98, label %99, label %137

99:                                               ; preds = %91
  %100 = getelementptr inbounds %class.ResizeArrayRaw.23, ptr %95, i64 0, i32 3
  %101 = load i32, ptr %100, align 4, !tbaa !39
  %102 = icmp slt i32 %101, %47
  br i1 %102, label %103, label %137

103:                                              ; preds = %99
  %104 = sitofp i32 %101 to float
  %105 = getelementptr inbounds %class.ResizeArrayRaw.23, ptr %95, i64 0, i32 5
  %106 = load float, ptr %105, align 4, !tbaa !40
  %107 = fmul float %106, %104
  %108 = fptosi float %107 to i32
  %109 = tail call i32 @llvm.smax.i32(i32 %108, i32 %47)
  %110 = sub nsw i32 %109, %101
  %111 = getelementptr inbounds %class.ResizeArrayRaw.23, ptr %95, i64 0, i32 6
  %112 = load i32, ptr %111, align 8, !tbaa !41
  %113 = icmp slt i32 %110, %112
  %114 = add nsw i32 %112, %101
  %115 = select i1 %113, i32 %114, i32 %109
  %116 = sext i32 %115 to i64
  %117 = shl nsw i64 %116, 3
  %118 = add nsw i64 %117, 31
  %119 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %118) #9
  %120 = getelementptr inbounds i8, ptr %119, i64 31
  %121 = ptrtoint ptr %120 to i64
  %122 = and i64 %121, 31
  %123 = sub nsw i64 0, %122
  %124 = getelementptr inbounds i8, ptr %120, i64 %123
  %125 = load ptr, ptr %95, align 8, !tbaa !42
  %126 = sext i32 %97 to i64
  %127 = shl nsw i64 %126, 3
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %124, ptr align 1 %125, i64 %127, i1 false)
  %128 = icmp eq i32 %101, 0
  br i1 %128, label %134, label %129

129:                                              ; preds = %103
  %130 = getelementptr inbounds %class.ResizeArrayRaw.23, ptr %95, i64 0, i32 1
  %131 = load ptr, ptr %130, align 8, !tbaa !43
  %132 = icmp eq ptr %131, null
  br i1 %132, label %134, label %133

133:                                              ; preds = %129
  tail call void @_ZdaPv(ptr noundef nonnull %131) #10
  br label %134

134:                                              ; preds = %133, %129, %103
  %135 = getelementptr inbounds %class.ResizeArrayRaw.23, ptr %95, i64 0, i32 1
  store ptr %119, ptr %135, align 8, !tbaa !43
  store ptr %124, ptr %95, align 8, !tbaa !42
  store i32 %115, ptr %100, align 4, !tbaa !39
  %136 = load ptr, ptr %94, align 8, !tbaa !35
  br label %137

137:                                              ; preds = %91, %99, %134
  %138 = phi ptr [ %95, %91 ], [ %95, %99 ], [ %136, %134 ]
  store i32 %47, ptr %96, align 8, !tbaa !37
  %139 = load ptr, ptr %138, align 8, !tbaa !42
  %140 = getelementptr inbounds i32, ptr %139, i64 1
  %141 = icmp eq i32 %10, 0
  %142 = icmp ne i32 %12, 0
  %143 = select i1 %141, i1 %142, i1 false
  %144 = select i1 %143, i32 0, i32 %47
  %145 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %46, i64 0, i32 2, i32 1
  %146 = load ptr, ptr %145, align 8, !tbaa !25
  %147 = getelementptr inbounds %class.ResizeArrayRaw, ptr %146, i64 0, i32 2
  %148 = load i32, ptr %147, align 8, !tbaa !27
  %149 = icmp slt i32 %148, %144
  br i1 %149, label %150, label %188

150:                                              ; preds = %137
  %151 = getelementptr inbounds %class.ResizeArrayRaw, ptr %146, i64 0, i32 3
  %152 = load i32, ptr %151, align 4, !tbaa !30
  %153 = icmp slt i32 %152, %144
  br i1 %153, label %154, label %188

154:                                              ; preds = %150
  %155 = sitofp i32 %152 to float
  %156 = getelementptr inbounds %class.ResizeArrayRaw, ptr %146, i64 0, i32 5
  %157 = load float, ptr %156, align 4, !tbaa !31
  %158 = fmul float %157, %155
  %159 = fptosi float %158 to i32
  %160 = tail call i32 @llvm.smax.i32(i32 %159, i32 %144)
  %161 = sub nsw i32 %160, %152
  %162 = getelementptr inbounds %class.ResizeArrayRaw, ptr %146, i64 0, i32 6
  %163 = load i32, ptr %162, align 8, !tbaa !32
  %164 = icmp slt i32 %161, %163
  %165 = add nsw i32 %163, %152
  %166 = select i1 %164, i32 %165, i32 %160
  %167 = sext i32 %166 to i64
  %168 = shl nsw i64 %167, 1
  %169 = add nsw i64 %168, 31
  %170 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %169) #9
  %171 = getelementptr inbounds i8, ptr %170, i64 31
  %172 = ptrtoint ptr %171 to i64
  %173 = and i64 %172, 31
  %174 = sub nsw i64 0, %173
  %175 = getelementptr inbounds i8, ptr %171, i64 %174
  %176 = load ptr, ptr %146, align 8, !tbaa !33
  %177 = sext i32 %148 to i64
  %178 = shl nsw i64 %177, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %175, ptr align 1 %176, i64 %178, i1 false)
  %179 = icmp eq i32 %152, 0
  br i1 %179, label %185, label %180

180:                                              ; preds = %154
  %181 = getelementptr inbounds %class.ResizeArrayRaw, ptr %146, i64 0, i32 1
  %182 = load ptr, ptr %181, align 8, !tbaa !34
  %183 = icmp eq ptr %182, null
  br i1 %183, label %185, label %184

184:                                              ; preds = %180
  tail call void @_ZdaPv(ptr noundef nonnull %182) #10
  br label %185

185:                                              ; preds = %184, %180, %154
  %186 = getelementptr inbounds %class.ResizeArrayRaw, ptr %146, i64 0, i32 1
  store ptr %170, ptr %186, align 8, !tbaa !34
  store ptr %175, ptr %146, align 8, !tbaa !33
  store i32 %166, ptr %151, align 4, !tbaa !30
  %187 = load ptr, ptr %145, align 8, !tbaa !25
  br label %188

188:                                              ; preds = %137, %150, %185
  %189 = phi ptr [ %146, %137 ], [ %146, %150 ], [ %187, %185 ]
  store i32 %144, ptr %147, align 8, !tbaa !27
  %190 = load ptr, ptr %189, align 8, !tbaa !33
  %191 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %46, i64 0, i32 3, i32 1
  %192 = load ptr, ptr %191, align 8, !tbaa !25
  %193 = getelementptr inbounds %class.ResizeArrayRaw, ptr %192, i64 0, i32 2
  %194 = load i32, ptr %193, align 8, !tbaa !27
  %195 = icmp slt i32 %194, %144
  br i1 %195, label %196, label %234

196:                                              ; preds = %188
  %197 = getelementptr inbounds %class.ResizeArrayRaw, ptr %192, i64 0, i32 3
  %198 = load i32, ptr %197, align 4, !tbaa !30
  %199 = icmp slt i32 %198, %144
  br i1 %199, label %200, label %234

200:                                              ; preds = %196
  %201 = sitofp i32 %198 to float
  %202 = getelementptr inbounds %class.ResizeArrayRaw, ptr %192, i64 0, i32 5
  %203 = load float, ptr %202, align 4, !tbaa !31
  %204 = fmul float %203, %201
  %205 = fptosi float %204 to i32
  %206 = tail call i32 @llvm.smax.i32(i32 %205, i32 %144)
  %207 = sub nsw i32 %206, %198
  %208 = getelementptr inbounds %class.ResizeArrayRaw, ptr %192, i64 0, i32 6
  %209 = load i32, ptr %208, align 8, !tbaa !32
  %210 = icmp slt i32 %207, %209
  %211 = add nsw i32 %209, %198
  %212 = select i1 %210, i32 %211, i32 %206
  %213 = sext i32 %212 to i64
  %214 = shl nsw i64 %213, 1
  %215 = add nsw i64 %214, 31
  %216 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %215) #9
  %217 = getelementptr inbounds i8, ptr %216, i64 31
  %218 = ptrtoint ptr %217 to i64
  %219 = and i64 %218, 31
  %220 = sub nsw i64 0, %219
  %221 = getelementptr inbounds i8, ptr %217, i64 %220
  %222 = load ptr, ptr %192, align 8, !tbaa !33
  %223 = sext i32 %194 to i64
  %224 = shl nsw i64 %223, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %221, ptr align 1 %222, i64 %224, i1 false)
  %225 = icmp eq i32 %198, 0
  br i1 %225, label %231, label %226

226:                                              ; preds = %200
  %227 = getelementptr inbounds %class.ResizeArrayRaw, ptr %192, i64 0, i32 1
  %228 = load ptr, ptr %227, align 8, !tbaa !34
  %229 = icmp eq ptr %228, null
  br i1 %229, label %231, label %230

230:                                              ; preds = %226
  tail call void @_ZdaPv(ptr noundef nonnull %228) #10
  br label %231

231:                                              ; preds = %230, %226, %200
  %232 = getelementptr inbounds %class.ResizeArrayRaw, ptr %192, i64 0, i32 1
  store ptr %216, ptr %232, align 8, !tbaa !34
  store ptr %221, ptr %192, align 8, !tbaa !33
  store i32 %212, ptr %197, align 4, !tbaa !30
  %233 = load ptr, ptr %191, align 8, !tbaa !25
  br label %234

234:                                              ; preds = %188, %196, %231
  %235 = phi ptr [ %192, %188 ], [ %192, %196 ], [ %233, %231 ]
  store i32 %144, ptr %193, align 8, !tbaa !27
  %236 = load ptr, ptr %235, align 8, !tbaa !33
  %237 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %46, i64 0, i32 4, i32 1
  %238 = load ptr, ptr %237, align 8, !tbaa !25
  %239 = getelementptr inbounds %class.ResizeArrayRaw, ptr %238, i64 0, i32 2
  %240 = load i32, ptr %239, align 8, !tbaa !27
  %241 = icmp slt i32 %240, %144
  br i1 %241, label %242, label %280

242:                                              ; preds = %234
  %243 = getelementptr inbounds %class.ResizeArrayRaw, ptr %238, i64 0, i32 3
  %244 = load i32, ptr %243, align 4, !tbaa !30
  %245 = icmp slt i32 %244, %144
  br i1 %245, label %246, label %280

246:                                              ; preds = %242
  %247 = sitofp i32 %244 to float
  %248 = getelementptr inbounds %class.ResizeArrayRaw, ptr %238, i64 0, i32 5
  %249 = load float, ptr %248, align 4, !tbaa !31
  %250 = fmul float %249, %247
  %251 = fptosi float %250 to i32
  %252 = tail call i32 @llvm.smax.i32(i32 %251, i32 %144)
  %253 = sub nsw i32 %252, %244
  %254 = getelementptr inbounds %class.ResizeArrayRaw, ptr %238, i64 0, i32 6
  %255 = load i32, ptr %254, align 8, !tbaa !32
  %256 = icmp slt i32 %253, %255
  %257 = add nsw i32 %255, %244
  %258 = select i1 %256, i32 %257, i32 %252
  %259 = sext i32 %258 to i64
  %260 = shl nsw i64 %259, 1
  %261 = add nsw i64 %260, 31
  %262 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %261) #9
  %263 = getelementptr inbounds i8, ptr %262, i64 31
  %264 = ptrtoint ptr %263 to i64
  %265 = and i64 %264, 31
  %266 = sub nsw i64 0, %265
  %267 = getelementptr inbounds i8, ptr %263, i64 %266
  %268 = load ptr, ptr %238, align 8, !tbaa !33
  %269 = sext i32 %240 to i64
  %270 = shl nsw i64 %269, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %267, ptr align 1 %268, i64 %270, i1 false)
  %271 = icmp eq i32 %244, 0
  br i1 %271, label %277, label %272

272:                                              ; preds = %246
  %273 = getelementptr inbounds %class.ResizeArrayRaw, ptr %238, i64 0, i32 1
  %274 = load ptr, ptr %273, align 8, !tbaa !34
  %275 = icmp eq ptr %274, null
  br i1 %275, label %277, label %276

276:                                              ; preds = %272
  tail call void @_ZdaPv(ptr noundef nonnull %274) #10
  br label %277

277:                                              ; preds = %276, %272, %246
  %278 = getelementptr inbounds %class.ResizeArrayRaw, ptr %238, i64 0, i32 1
  store ptr %262, ptr %278, align 8, !tbaa !34
  store ptr %267, ptr %238, align 8, !tbaa !33
  store i32 %258, ptr %243, align 4, !tbaa !30
  %279 = load ptr, ptr %237, align 8, !tbaa !25
  br label %280

280:                                              ; preds = %234, %242, %277
  %281 = phi ptr [ %238, %234 ], [ %238, %242 ], [ %279, %277 ]
  store i32 %144, ptr %239, align 8, !tbaa !27
  %282 = load ptr, ptr %281, align 8, !tbaa !33
  %283 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %46, i64 0, i32 5, i32 1
  %284 = load ptr, ptr %283, align 8, !tbaa !25
  %285 = getelementptr inbounds %class.ResizeArrayRaw, ptr %284, i64 0, i32 2
  %286 = load i32, ptr %285, align 8, !tbaa !27
  %287 = icmp slt i32 %286, %144
  br i1 %287, label %288, label %326

288:                                              ; preds = %280
  %289 = getelementptr inbounds %class.ResizeArrayRaw, ptr %284, i64 0, i32 3
  %290 = load i32, ptr %289, align 4, !tbaa !30
  %291 = icmp slt i32 %290, %144
  br i1 %291, label %292, label %326

292:                                              ; preds = %288
  %293 = sitofp i32 %290 to float
  %294 = getelementptr inbounds %class.ResizeArrayRaw, ptr %284, i64 0, i32 5
  %295 = load float, ptr %294, align 4, !tbaa !31
  %296 = fmul float %295, %293
  %297 = fptosi float %296 to i32
  %298 = tail call i32 @llvm.smax.i32(i32 %297, i32 %144)
  %299 = sub nsw i32 %298, %290
  %300 = getelementptr inbounds %class.ResizeArrayRaw, ptr %284, i64 0, i32 6
  %301 = load i32, ptr %300, align 8, !tbaa !32
  %302 = icmp slt i32 %299, %301
  %303 = add nsw i32 %301, %290
  %304 = select i1 %302, i32 %303, i32 %298
  %305 = sext i32 %304 to i64
  %306 = shl nsw i64 %305, 1
  %307 = add nsw i64 %306, 31
  %308 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %307) #9
  %309 = getelementptr inbounds i8, ptr %308, i64 31
  %310 = ptrtoint ptr %309 to i64
  %311 = and i64 %310, 31
  %312 = sub nsw i64 0, %311
  %313 = getelementptr inbounds i8, ptr %309, i64 %312
  %314 = load ptr, ptr %284, align 8, !tbaa !33
  %315 = sext i32 %286 to i64
  %316 = shl nsw i64 %315, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %313, ptr align 1 %314, i64 %316, i1 false)
  %317 = icmp eq i32 %290, 0
  br i1 %317, label %323, label %318

318:                                              ; preds = %292
  %319 = getelementptr inbounds %class.ResizeArrayRaw, ptr %284, i64 0, i32 1
  %320 = load ptr, ptr %319, align 8, !tbaa !34
  %321 = icmp eq ptr %320, null
  br i1 %321, label %323, label %322

322:                                              ; preds = %318
  tail call void @_ZdaPv(ptr noundef nonnull %320) #10
  br label %323

323:                                              ; preds = %322, %318, %292
  %324 = getelementptr inbounds %class.ResizeArrayRaw, ptr %284, i64 0, i32 1
  store ptr %308, ptr %324, align 8, !tbaa !34
  store ptr %313, ptr %284, align 8, !tbaa !33
  store i32 %304, ptr %289, align 4, !tbaa !30
  %325 = load ptr, ptr %283, align 8, !tbaa !25
  br label %326

326:                                              ; preds = %280, %288, %323
  %327 = phi ptr [ %284, %280 ], [ %284, %288 ], [ %325, %323 ]
  store i32 %144, ptr %285, align 8, !tbaa !27
  %328 = load ptr, ptr %327, align 8, !tbaa !33
  %329 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %46, i64 0, i32 6, i32 1
  %330 = load ptr, ptr %329, align 8, !tbaa !25
  %331 = getelementptr inbounds %class.ResizeArrayRaw, ptr %330, i64 0, i32 2
  %332 = load i32, ptr %331, align 8, !tbaa !27
  %333 = icmp slt i32 %332, %144
  br i1 %333, label %334, label %372

334:                                              ; preds = %326
  %335 = getelementptr inbounds %class.ResizeArrayRaw, ptr %330, i64 0, i32 3
  %336 = load i32, ptr %335, align 4, !tbaa !30
  %337 = icmp slt i32 %336, %144
  br i1 %337, label %338, label %372

338:                                              ; preds = %334
  %339 = sitofp i32 %336 to float
  %340 = getelementptr inbounds %class.ResizeArrayRaw, ptr %330, i64 0, i32 5
  %341 = load float, ptr %340, align 4, !tbaa !31
  %342 = fmul float %341, %339
  %343 = fptosi float %342 to i32
  %344 = tail call i32 @llvm.smax.i32(i32 %343, i32 %144)
  %345 = sub nsw i32 %344, %336
  %346 = getelementptr inbounds %class.ResizeArrayRaw, ptr %330, i64 0, i32 6
  %347 = load i32, ptr %346, align 8, !tbaa !32
  %348 = icmp slt i32 %345, %347
  %349 = add nsw i32 %347, %336
  %350 = select i1 %348, i32 %349, i32 %344
  %351 = sext i32 %350 to i64
  %352 = shl nsw i64 %351, 1
  %353 = add nsw i64 %352, 31
  %354 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %353) #9
  %355 = getelementptr inbounds i8, ptr %354, i64 31
  %356 = ptrtoint ptr %355 to i64
  %357 = and i64 %356, 31
  %358 = sub nsw i64 0, %357
  %359 = getelementptr inbounds i8, ptr %355, i64 %358
  %360 = load ptr, ptr %330, align 8, !tbaa !33
  %361 = sext i32 %332 to i64
  %362 = shl nsw i64 %361, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %359, ptr align 1 %360, i64 %362, i1 false)
  %363 = icmp eq i32 %336, 0
  br i1 %363, label %369, label %364

364:                                              ; preds = %338
  %365 = getelementptr inbounds %class.ResizeArrayRaw, ptr %330, i64 0, i32 1
  %366 = load ptr, ptr %365, align 8, !tbaa !34
  %367 = icmp eq ptr %366, null
  br i1 %367, label %369, label %368

368:                                              ; preds = %364
  tail call void @_ZdaPv(ptr noundef nonnull %366) #10
  br label %369

369:                                              ; preds = %368, %364, %338
  %370 = getelementptr inbounds %class.ResizeArrayRaw, ptr %330, i64 0, i32 1
  store ptr %354, ptr %370, align 8, !tbaa !34
  store ptr %359, ptr %330, align 8, !tbaa !33
  store i32 %350, ptr %335, align 4, !tbaa !30
  %371 = load ptr, ptr %329, align 8, !tbaa !25
  br label %372

372:                                              ; preds = %326, %334, %369
  %373 = phi ptr [ %330, %326 ], [ %330, %334 ], [ %371, %369 ]
  store i32 %144, ptr %331, align 8, !tbaa !27
  %374 = load ptr, ptr %373, align 8, !tbaa !33
  %375 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %46, i64 0, i32 15, i32 1
  %376 = load ptr, ptr %375, align 8, !tbaa !25
  %377 = getelementptr inbounds %class.ResizeArrayRaw, ptr %376, i64 0, i32 2
  %378 = load i32, ptr %377, align 8, !tbaa !27
  %379 = icmp slt i32 %378, %144
  br i1 %379, label %380, label %418

380:                                              ; preds = %372
  %381 = getelementptr inbounds %class.ResizeArrayRaw, ptr %376, i64 0, i32 3
  %382 = load i32, ptr %381, align 4, !tbaa !30
  %383 = icmp slt i32 %382, %144
  br i1 %383, label %384, label %418

384:                                              ; preds = %380
  %385 = sitofp i32 %382 to float
  %386 = getelementptr inbounds %class.ResizeArrayRaw, ptr %376, i64 0, i32 5
  %387 = load float, ptr %386, align 4, !tbaa !31
  %388 = fmul float %387, %385
  %389 = fptosi float %388 to i32
  %390 = tail call i32 @llvm.smax.i32(i32 %389, i32 %144)
  %391 = sub nsw i32 %390, %382
  %392 = getelementptr inbounds %class.ResizeArrayRaw, ptr %376, i64 0, i32 6
  %393 = load i32, ptr %392, align 8, !tbaa !32
  %394 = icmp slt i32 %391, %393
  %395 = add nsw i32 %393, %382
  %396 = select i1 %394, i32 %395, i32 %390
  %397 = sext i32 %396 to i64
  %398 = shl nsw i64 %397, 1
  %399 = add nsw i64 %398, 31
  %400 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %399) #9
  %401 = getelementptr inbounds i8, ptr %400, i64 31
  %402 = ptrtoint ptr %401 to i64
  %403 = and i64 %402, 31
  %404 = sub nsw i64 0, %403
  %405 = getelementptr inbounds i8, ptr %401, i64 %404
  %406 = load ptr, ptr %376, align 8, !tbaa !33
  %407 = sext i32 %378 to i64
  %408 = shl nsw i64 %407, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %405, ptr align 1 %406, i64 %408, i1 false)
  %409 = icmp eq i32 %382, 0
  br i1 %409, label %415, label %410

410:                                              ; preds = %384
  %411 = getelementptr inbounds %class.ResizeArrayRaw, ptr %376, i64 0, i32 1
  %412 = load ptr, ptr %411, align 8, !tbaa !34
  %413 = icmp eq ptr %412, null
  br i1 %413, label %415, label %414

414:                                              ; preds = %410
  tail call void @_ZdaPv(ptr noundef nonnull %412) #10
  br label %415

415:                                              ; preds = %414, %410, %384
  %416 = getelementptr inbounds %class.ResizeArrayRaw, ptr %376, i64 0, i32 1
  store ptr %400, ptr %416, align 8, !tbaa !34
  store ptr %405, ptr %376, align 8, !tbaa !33
  store i32 %396, ptr %381, align 4, !tbaa !30
  %417 = load ptr, ptr %375, align 8, !tbaa !25
  br label %418

418:                                              ; preds = %372, %380, %415
  %419 = phi ptr [ %376, %372 ], [ %376, %380 ], [ %417, %415 ]
  store i32 %144, ptr %377, align 8, !tbaa !27
  %420 = load ptr, ptr %419, align 8, !tbaa !33
  %421 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %46, i64 0, i32 16, i32 1
  %422 = load ptr, ptr %421, align 8, !tbaa !25
  %423 = getelementptr inbounds %class.ResizeArrayRaw, ptr %422, i64 0, i32 2
  %424 = load i32, ptr %423, align 8, !tbaa !27
  %425 = icmp slt i32 %424, %144
  br i1 %425, label %426, label %464

426:                                              ; preds = %418
  %427 = getelementptr inbounds %class.ResizeArrayRaw, ptr %422, i64 0, i32 3
  %428 = load i32, ptr %427, align 4, !tbaa !30
  %429 = icmp slt i32 %428, %144
  br i1 %429, label %430, label %464

430:                                              ; preds = %426
  %431 = sitofp i32 %428 to float
  %432 = getelementptr inbounds %class.ResizeArrayRaw, ptr %422, i64 0, i32 5
  %433 = load float, ptr %432, align 4, !tbaa !31
  %434 = fmul float %433, %431
  %435 = fptosi float %434 to i32
  %436 = tail call i32 @llvm.smax.i32(i32 %435, i32 %144)
  %437 = sub nsw i32 %436, %428
  %438 = getelementptr inbounds %class.ResizeArrayRaw, ptr %422, i64 0, i32 6
  %439 = load i32, ptr %438, align 8, !tbaa !32
  %440 = icmp slt i32 %437, %439
  %441 = add nsw i32 %439, %428
  %442 = select i1 %440, i32 %441, i32 %436
  %443 = sext i32 %442 to i64
  %444 = shl nsw i64 %443, 1
  %445 = add nsw i64 %444, 31
  %446 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %445) #9
  %447 = getelementptr inbounds i8, ptr %446, i64 31
  %448 = ptrtoint ptr %447 to i64
  %449 = and i64 %448, 31
  %450 = sub nsw i64 0, %449
  %451 = getelementptr inbounds i8, ptr %447, i64 %450
  %452 = load ptr, ptr %422, align 8, !tbaa !33
  %453 = sext i32 %424 to i64
  %454 = shl nsw i64 %453, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %451, ptr align 1 %452, i64 %454, i1 false)
  %455 = icmp eq i32 %428, 0
  br i1 %455, label %461, label %456

456:                                              ; preds = %430
  %457 = getelementptr inbounds %class.ResizeArrayRaw, ptr %422, i64 0, i32 1
  %458 = load ptr, ptr %457, align 8, !tbaa !34
  %459 = icmp eq ptr %458, null
  br i1 %459, label %461, label %460

460:                                              ; preds = %456
  tail call void @_ZdaPv(ptr noundef nonnull %458) #10
  br label %461

461:                                              ; preds = %460, %456, %430
  %462 = getelementptr inbounds %class.ResizeArrayRaw, ptr %422, i64 0, i32 1
  store ptr %446, ptr %462, align 8, !tbaa !34
  store ptr %451, ptr %422, align 8, !tbaa !33
  store i32 %442, ptr %427, align 4, !tbaa !30
  %463 = load ptr, ptr %421, align 8, !tbaa !25
  br label %464

464:                                              ; preds = %418, %426, %461
  %465 = phi ptr [ %422, %418 ], [ %422, %426 ], [ %463, %461 ]
  store i32 %144, ptr %423, align 8, !tbaa !27
  %466 = load ptr, ptr %465, align 8, !tbaa !33
  br i1 %143, label %599, label %467

467:                                              ; preds = %464
  %468 = icmp sgt i32 %37, 0
  br i1 %468, label %469, label %611

469:                                              ; preds = %467
  %470 = zext i32 %37 to i64
  %471 = and i64 %470, 1
  %472 = icmp eq i32 %37, 1
  br i1 %472, label %505, label %473

473:                                              ; preds = %469
  %474 = and i64 %470, 4294967294
  br label %475

475:                                              ; preds = %500, %473
  %476 = phi i64 [ 0, %473 ], [ %502, %500 ]
  %477 = phi i32 [ 0, %473 ], [ %501, %500 ]
  %478 = phi i64 [ 0, %473 ], [ %503, %500 ]
  %479 = getelementptr inbounds %struct.CompAtom, ptr %40, i64 %476, i32 4
  %480 = load i8, ptr %479, align 1
  %481 = and i8 %480, 7
  %482 = icmp eq i8 %481, 0
  br i1 %482, label %488, label %483

483:                                              ; preds = %475
  %484 = trunc i64 %476 to i16
  %485 = add nsw i32 %477, 1
  %486 = sext i32 %477 to i64
  %487 = getelementptr inbounds i16, ptr %190, i64 %486
  store i16 %484, ptr %487, align 2, !tbaa !44
  br label %488

488:                                              ; preds = %475, %483
  %489 = phi i32 [ %485, %483 ], [ %477, %475 ]
  %490 = or i64 %476, 1
  %491 = getelementptr inbounds %struct.CompAtom, ptr %40, i64 %490, i32 4
  %492 = load i8, ptr %491, align 1
  %493 = and i8 %492, 7
  %494 = icmp eq i8 %493, 0
  br i1 %494, label %500, label %495

495:                                              ; preds = %488
  %496 = trunc i64 %490 to i16
  %497 = add nsw i32 %489, 1
  %498 = sext i32 %489 to i64
  %499 = getelementptr inbounds i16, ptr %190, i64 %498
  store i16 %496, ptr %499, align 2, !tbaa !44
  br label %500

500:                                              ; preds = %495, %488
  %501 = phi i32 [ %497, %495 ], [ %489, %488 ]
  %502 = add nuw nsw i64 %476, 2
  %503 = add i64 %478, 2
  %504 = icmp eq i64 %503, %474
  br i1 %504, label %505, label %475

505:                                              ; preds = %500, %469
  %506 = phi i32 [ undef, %469 ], [ %501, %500 ]
  %507 = phi i64 [ 0, %469 ], [ %502, %500 ]
  %508 = phi i32 [ 0, %469 ], [ %501, %500 ]
  %509 = icmp eq i64 %471, 0
  br i1 %509, label %520, label %510

510:                                              ; preds = %505
  %511 = getelementptr inbounds %struct.CompAtom, ptr %40, i64 %507, i32 4
  %512 = load i8, ptr %511, align 1
  %513 = and i8 %512, 7
  %514 = icmp eq i8 %513, 0
  br i1 %514, label %520, label %515

515:                                              ; preds = %510
  %516 = trunc i64 %507 to i16
  %517 = add nsw i32 %508, 1
  %518 = sext i32 %508 to i64
  %519 = getelementptr inbounds i16, ptr %190, i64 %518
  store i16 %516, ptr %519, align 2, !tbaa !44
  br label %520

520:                                              ; preds = %510, %515, %505
  %521 = phi i32 [ %506, %505 ], [ %517, %515 ], [ %508, %510 ]
  %522 = icmp eq i32 %521, 0
  br i1 %522, label %530, label %523

523:                                              ; preds = %520
  %524 = add nsw i32 %521, -1
  %525 = sext i32 %524 to i64
  %526 = getelementptr inbounds i16, ptr %190, i64 %525
  %527 = load i16, ptr %526, align 2, !tbaa !44
  %528 = sext i32 %521 to i64
  %529 = getelementptr inbounds i16, ptr %190, i64 %528
  store i16 %527, ptr %529, align 2, !tbaa !44
  br label %530

530:                                              ; preds = %523, %520
  %531 = load i32, ptr @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4, !tbaa !5
  %532 = icmp ne i32 %531, 0
  %533 = icmp sgt i32 %521, 0
  %534 = and i1 %532, %533
  br i1 %534, label %535, label %611

535:                                              ; preds = %530
  %536 = zext i32 %521 to i64
  %537 = and i64 %536, 1
  %538 = icmp eq i32 %521, 1
  br i1 %538, label %573, label %539

539:                                              ; preds = %535
  %540 = and i64 %536, 4294967294
  br label %541

541:                                              ; preds = %568, %539
  %542 = phi i64 [ 0, %539 ], [ %570, %568 ]
  %543 = phi i32 [ 0, %539 ], [ %569, %568 ]
  %544 = phi i64 [ 0, %539 ], [ %571, %568 ]
  %545 = getelementptr inbounds i16, ptr %190, i64 %542
  %546 = load i16, ptr %545, align 2, !tbaa !44
  %547 = zext i16 %546 to i64
  %548 = getelementptr inbounds %struct.CompAtomExt, ptr %44, i64 %547
  %549 = load i32, ptr %548, align 4
  %550 = icmp sgt i32 %549, -1
  br i1 %550, label %551, label %555

551:                                              ; preds = %541
  %552 = add nsw i32 %543, 1
  %553 = sext i32 %543 to i64
  %554 = getelementptr inbounds i16, ptr %236, i64 %553
  store i16 %546, ptr %554, align 2, !tbaa !44
  br label %555

555:                                              ; preds = %541, %551
  %556 = phi i32 [ %543, %541 ], [ %552, %551 ]
  %557 = or i64 %542, 1
  %558 = getelementptr inbounds i16, ptr %190, i64 %557
  %559 = load i16, ptr %558, align 2, !tbaa !44
  %560 = zext i16 %559 to i64
  %561 = getelementptr inbounds %struct.CompAtomExt, ptr %44, i64 %560
  %562 = load i32, ptr %561, align 4
  %563 = icmp sgt i32 %562, -1
  br i1 %563, label %564, label %568

564:                                              ; preds = %555
  %565 = add nsw i32 %556, 1
  %566 = sext i32 %556 to i64
  %567 = getelementptr inbounds i16, ptr %236, i64 %566
  store i16 %559, ptr %567, align 2, !tbaa !44
  br label %568

568:                                              ; preds = %564, %555
  %569 = phi i32 [ %556, %555 ], [ %565, %564 ]
  %570 = add nuw nsw i64 %542, 2
  %571 = add i64 %544, 2
  %572 = icmp eq i64 %571, %540
  br i1 %572, label %573, label %541

573:                                              ; preds = %568, %535
  %574 = phi i32 [ undef, %535 ], [ %569, %568 ]
  %575 = phi i64 [ 0, %535 ], [ %570, %568 ]
  %576 = phi i32 [ 0, %535 ], [ %569, %568 ]
  %577 = icmp eq i64 %537, 0
  br i1 %577, label %589, label %578

578:                                              ; preds = %573
  %579 = getelementptr inbounds i16, ptr %190, i64 %575
  %580 = load i16, ptr %579, align 2, !tbaa !44
  %581 = zext i16 %580 to i64
  %582 = getelementptr inbounds %struct.CompAtomExt, ptr %44, i64 %581
  %583 = load i32, ptr %582, align 4
  %584 = icmp sgt i32 %583, -1
  br i1 %584, label %585, label %589

585:                                              ; preds = %578
  %586 = add nsw i32 %576, 1
  %587 = sext i32 %576 to i64
  %588 = getelementptr inbounds i16, ptr %236, i64 %587
  store i16 %580, ptr %588, align 2, !tbaa !44
  br label %589

589:                                              ; preds = %578, %585, %573
  %590 = phi i32 [ %574, %573 ], [ %576, %578 ], [ %586, %585 ]
  %591 = icmp eq i32 %590, 0
  br i1 %591, label %611, label %592

592:                                              ; preds = %589
  %593 = add nsw i32 %590, -1
  %594 = sext i32 %593 to i64
  %595 = getelementptr inbounds i16, ptr %236, i64 %594
  %596 = load i16, ptr %595, align 2, !tbaa !44
  %597 = sext i32 %590 to i64
  %598 = getelementptr inbounds i16, ptr %236, i64 %597
  store i16 %596, ptr %598, align 2, !tbaa !44
  br label %611

599:                                              ; preds = %464
  %600 = load ptr, ptr %8, align 8, !tbaa !46
  %601 = load i32, ptr %13, align 8, !tbaa !17
  %602 = add nsw i32 %601, 1
  store i32 %602, ptr %13, align 8, !tbaa !17
  %603 = sext i32 %601 to i64
  %604 = getelementptr inbounds i16, ptr %600, i64 %603
  %605 = load i16, ptr %604, align 2, !tbaa !44
  %606 = zext i16 %605 to i32
  %607 = icmp eq i32 %35, %606
  br i1 %607, label %628, label %608

608:                                              ; preds = %599
  tail call void @_Z8NAMD_bugPKc(ptr noundef nonnull @.str)
  %609 = load ptr, ptr %8, align 8, !tbaa !46
  %610 = load i32, ptr %13, align 8, !tbaa !17
  br label %628

611:                                              ; preds = %467, %592, %589, %530
  %612 = phi i32 [ %521, %592 ], [ %521, %589 ], [ %521, %530 ], [ 0, %467 ]
  %613 = phi i32 [ %590, %592 ], [ 0, %589 ], [ 0, %530 ], [ 0, %467 ]
  %614 = load i32, ptr %13, align 8, !tbaa !17
  %615 = trunc i32 %35 to i16
  %616 = load ptr, ptr %8, align 8, !tbaa !46
  %617 = sext i32 %614 to i64
  %618 = getelementptr inbounds i16, ptr %616, i64 %617
  store i16 %615, ptr %618, align 2, !tbaa !44
  %619 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 16
  %620 = load i32, ptr %619, align 4, !tbaa !47
  %621 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 18
  %622 = load i32, ptr %621, align 4, !tbaa !48
  %623 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 3, i64 1
  %624 = load ptr, ptr %623, align 8, !tbaa !23
  %625 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 3
  %626 = load ptr, ptr %625, align 8, !tbaa !23
  %627 = add nsw i32 %614, 2
  store i32 %627, ptr %13, align 8, !tbaa !17
  br label %644

628:                                              ; preds = %608, %599
  %629 = phi i32 [ %602, %599 ], [ %610, %608 ]
  %630 = phi ptr [ %600, %599 ], [ %609, %608 ]
  %631 = sext i32 %629 to i64
  %632 = getelementptr inbounds i16, ptr %630, i64 %631
  %633 = load i16, ptr %632, align 2, !tbaa !44
  %634 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 16
  %635 = load i32, ptr %634, align 4, !tbaa !47
  %636 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 18
  %637 = load i32, ptr %636, align 4, !tbaa !48
  %638 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 3, i64 1
  %639 = load ptr, ptr %638, align 8, !tbaa !23
  %640 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 3
  %641 = load ptr, ptr %640, align 8, !tbaa !23
  %642 = add nsw i32 %629, 1
  store i32 %642, ptr %13, align 8, !tbaa !17
  %643 = zext i16 %633 to i32
  br label %644

644:                                              ; preds = %628, %611
  %645 = phi i32 [ %635, %628 ], [ %620, %611 ]
  %646 = phi i32 [ %637, %628 ], [ %622, %611 ]
  %647 = phi ptr [ %639, %628 ], [ %624, %611 ]
  %648 = phi ptr [ %641, %628 ], [ %626, %611 ]
  %649 = phi i32 [ 0, %628 ], [ %613, %611 ]
  %650 = phi i32 [ 0, %628 ], [ %612, %611 ]
  %651 = phi i32 [ %643, %628 ], [ 0, %611 ]
  %652 = add nsw i32 %646, -1
  %653 = icmp slt i32 %651, %35
  br i1 %653, label %654, label %2373

654:                                              ; preds = %644
  %655 = getelementptr inbounds %class.Molecule, ptr %26, i64 0, i32 1
  %656 = getelementptr inbounds %class.Molecule, ptr %26, i64 0, i32 4
  %657 = getelementptr inbounds %class.Molecule, ptr %26, i64 0, i32 2
  %658 = getelementptr inbounds %class.Molecule, ptr %26, i64 0, i32 3
  %659 = ptrtoint ptr %420 to i64
  %660 = add nsw i32 %37, 10
  %661 = getelementptr inbounds %class.Pairlists, ptr %8, i64 0, i32 2
  %662 = ptrtoint ptr %466 to i64
  %663 = getelementptr inbounds i16, ptr %420, i64 1
  %664 = ptrtoint ptr %328 to i64
  %665 = ptrtoint ptr %374 to i64
  %666 = getelementptr inbounds %class.LJTable, ptr %25, i64 0, i32 1
  %667 = getelementptr inbounds %class.LJTable, ptr %25, i64 0, i32 2
  %668 = fneg double %28
  %669 = getelementptr inbounds double, ptr %6, i64 26
  %670 = getelementptr inbounds double, ptr %6, i64 28
  %671 = getelementptr inbounds double, ptr %6, i64 29
  %672 = getelementptr inbounds double, ptr %6, i64 31
  %673 = fadd double %29, -1.000000e+00
  %674 = fadd double %673, 1.000000e+00
  %675 = insertelement <2 x double> poison, double %23, i64 0
  %676 = shufflevector <2 x double> %675, <2 x double> poison, <2 x i32> zeroinitializer
  br label %677

677:                                              ; preds = %654, %2360
  %678 = phi i32 [ 0, %654 ], [ %2367, %2360 ]
  %679 = phi i32 [ %651, %654 ], [ %2366, %2360 ]
  %680 = phi ptr [ null, %654 ], [ %2365, %2360 ]
  %681 = phi ptr [ null, %654 ], [ %2364, %2360 ]
  %682 = phi ptr [ null, %654 ], [ %2363, %2360 ]
  %683 = phi i32 [ 0, %654 ], [ %2362, %2360 ]
  %684 = phi i32 [ %645, %654 ], [ %2361, %2360 ]
  %685 = phi <2 x double> [ zeroinitializer, %654 ], [ %2368, %2360 ]
  %686 = phi <2 x double> [ zeroinitializer, %654 ], [ %2369, %2360 ]
  %687 = phi <2 x double> [ zeroinitializer, %654 ], [ %2370, %2360 ]
  %688 = phi <2 x double> [ zeroinitializer, %654 ], [ %2371, %2360 ]
  %689 = sext i32 %679 to i64
  %690 = getelementptr inbounds %struct.CompAtom, ptr %38, i64 %689
  %691 = getelementptr inbounds %struct.CompAtomExt, ptr %42, i64 %689
  br i1 %143, label %1941, label %692

692:                                              ; preds = %677
  %693 = getelementptr inbounds %struct.CompAtom, ptr %38, i64 %689, i32 4
  %694 = load i8, ptr %693, align 1
  %695 = lshr i8 %694, 3
  %696 = and i8 %695, 15
  %697 = zext i8 %696 to i32
  %698 = icmp eq i8 %696, 0
  br i1 %698, label %704, label %699

699:                                              ; preds = %692
  %700 = icmp eq i32 %684, 0
  br i1 %700, label %704, label %701

701:                                              ; preds = %699
  %702 = add nsw i32 %684, -1
  %703 = add nsw i32 %679, %697
  br label %2360

704:                                              ; preds = %699, %692
  %705 = phi i32 [ %652, %699 ], [ %684, %692 ]
  %706 = load <2 x double>, ptr %690, align 8, !tbaa !19
  %707 = fadd <2 x double> %15, %706
  %708 = getelementptr inbounds %class.Vector, ptr %690, i64 0, i32 2
  %709 = load double, ptr %708, align 8, !tbaa !49
  %710 = fadd double %17, %709
  %711 = load i32, ptr %691, align 4
  %712 = shl i32 %711, 2
  %713 = ashr exact i32 %712, 2
  %714 = load ptr, ptr %655, align 8, !tbaa !51
  %715 = sext i32 %713 to i64
  %716 = getelementptr inbounds %class.ExclusionCheck, ptr %714, i64 %715
  %717 = load i32, ptr %716, align 8, !tbaa !53
  %718 = getelementptr inbounds %class.ExclusionCheck, ptr %714, i64 %715, i32 1
  %719 = load i32, ptr %718, align 4, !tbaa !55
  %720 = getelementptr inbounds %class.ExclusionCheck, ptr %714, i64 %715, i32 2
  %721 = load ptr, ptr %720, align 8, !tbaa !56
  %722 = icmp eq ptr %721, null
  br i1 %722, label %727, label %723

723:                                              ; preds = %704
  %724 = sext i32 %717 to i64
  %725 = sub nsw i64 0, %724
  %726 = getelementptr inbounds i8, ptr %721, i64 %725
  br label %953

727:                                              ; preds = %704
  %728 = icmp eq ptr %680, null
  br i1 %728, label %816, label %729

729:                                              ; preds = %727
  %730 = load i32, ptr %681, align 4, !tbaa !5
  %731 = icmp slt i32 %730, 1
  br i1 %731, label %779, label %732

732:                                              ; preds = %729
  %733 = add nuw i32 %730, 1
  %734 = zext i32 %733 to i64
  %735 = add nsw i64 %734, -1
  %736 = add nsw i64 %734, -2
  %737 = and i64 %735, 3
  %738 = icmp ult i64 %736, 3
  br i1 %738, label %766, label %739

739:                                              ; preds = %732
  %740 = and i64 %735, -4
  br label %741

741:                                              ; preds = %741, %739
  %742 = phi i64 [ 1, %739 ], [ %763, %741 ]
  %743 = phi i64 [ 0, %739 ], [ %764, %741 ]
  %744 = getelementptr inbounds i32, ptr %681, i64 %742
  %745 = load i32, ptr %744, align 4, !tbaa !5
  %746 = sext i32 %745 to i64
  %747 = getelementptr inbounds i8, ptr %680, i64 %746
  store i8 0, ptr %747, align 1, !tbaa !57
  %748 = add nuw nsw i64 %742, 1
  %749 = getelementptr inbounds i32, ptr %681, i64 %748
  %750 = load i32, ptr %749, align 4, !tbaa !5
  %751 = sext i32 %750 to i64
  %752 = getelementptr inbounds i8, ptr %680, i64 %751
  store i8 0, ptr %752, align 1, !tbaa !57
  %753 = add nuw nsw i64 %742, 2
  %754 = getelementptr inbounds i32, ptr %681, i64 %753
  %755 = load i32, ptr %754, align 4, !tbaa !5
  %756 = sext i32 %755 to i64
  %757 = getelementptr inbounds i8, ptr %680, i64 %756
  store i8 0, ptr %757, align 1, !tbaa !57
  %758 = add nuw nsw i64 %742, 3
  %759 = getelementptr inbounds i32, ptr %681, i64 %758
  %760 = load i32, ptr %759, align 4, !tbaa !5
  %761 = sext i32 %760 to i64
  %762 = getelementptr inbounds i8, ptr %680, i64 %761
  store i8 0, ptr %762, align 1, !tbaa !57
  %763 = add nuw nsw i64 %742, 4
  %764 = add i64 %743, 4
  %765 = icmp eq i64 %764, %740
  br i1 %765, label %766, label %741

766:                                              ; preds = %741, %732
  %767 = phi i64 [ 1, %732 ], [ %763, %741 ]
  %768 = icmp eq i64 %737, 0
  br i1 %768, label %779, label %769

769:                                              ; preds = %766, %769
  %770 = phi i64 [ %776, %769 ], [ %767, %766 ]
  %771 = phi i64 [ %777, %769 ], [ 0, %766 ]
  %772 = getelementptr inbounds i32, ptr %681, i64 %770
  %773 = load i32, ptr %772, align 4, !tbaa !5
  %774 = sext i32 %773 to i64
  %775 = getelementptr inbounds i8, ptr %680, i64 %774
  store i8 0, ptr %775, align 1, !tbaa !57
  %776 = add nuw nsw i64 %770, 1
  %777 = add i64 %771, 1
  %778 = icmp eq i64 %777, %737
  br i1 %778, label %779, label %769, !llvm.loop !297

779:                                              ; preds = %766, %769, %729
  %780 = load i32, ptr %682, align 4, !tbaa !5
  %781 = icmp slt i32 %780, 1
  br i1 %781, label %836, label %782

782:                                              ; preds = %779
  %783 = add nuw i32 %780, 1
  %784 = zext i32 %783 to i64
  %785 = add nsw i64 %784, -1
  %786 = add nsw i64 %784, -2
  %787 = and i64 %785, 3
  %788 = icmp ult i64 %786, 3
  br i1 %788, label %823, label %789

789:                                              ; preds = %782
  %790 = and i64 %785, -4
  br label %791

791:                                              ; preds = %791, %789
  %792 = phi i64 [ 1, %789 ], [ %813, %791 ]
  %793 = phi i64 [ 0, %789 ], [ %814, %791 ]
  %794 = getelementptr inbounds i32, ptr %682, i64 %792
  %795 = load i32, ptr %794, align 4, !tbaa !5
  %796 = sext i32 %795 to i64
  %797 = getelementptr inbounds i8, ptr %680, i64 %796
  store i8 0, ptr %797, align 1, !tbaa !57
  %798 = add nuw nsw i64 %792, 1
  %799 = getelementptr inbounds i32, ptr %682, i64 %798
  %800 = load i32, ptr %799, align 4, !tbaa !5
  %801 = sext i32 %800 to i64
  %802 = getelementptr inbounds i8, ptr %680, i64 %801
  store i8 0, ptr %802, align 1, !tbaa !57
  %803 = add nuw nsw i64 %792, 2
  %804 = getelementptr inbounds i32, ptr %682, i64 %803
  %805 = load i32, ptr %804, align 4, !tbaa !5
  %806 = sext i32 %805 to i64
  %807 = getelementptr inbounds i8, ptr %680, i64 %806
  store i8 0, ptr %807, align 1, !tbaa !57
  %808 = add nuw nsw i64 %792, 3
  %809 = getelementptr inbounds i32, ptr %682, i64 %808
  %810 = load i32, ptr %809, align 4, !tbaa !5
  %811 = sext i32 %810 to i64
  %812 = getelementptr inbounds i8, ptr %680, i64 %811
  store i8 0, ptr %812, align 1, !tbaa !57
  %813 = add nuw nsw i64 %792, 4
  %814 = add i64 %793, 4
  %815 = icmp eq i64 %814, %790
  br i1 %815, label %823, label %791

816:                                              ; preds = %727
  %817 = load i32, ptr %656, align 8, !tbaa !60
  %818 = tail call i32 @llvm.smax.i32(i32 %817, i32 -1)
  %819 = sext i32 %818 to i64
  %820 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %819) #9
  %821 = load i32, ptr %656, align 8, !tbaa !60
  %822 = sext i32 %821 to i64
  tail call void @llvm.memset.p0.i64(ptr nonnull align 1 %820, i8 0, i64 %822, i1 false)
  br label %836

823:                                              ; preds = %791, %782
  %824 = phi i64 [ 1, %782 ], [ %813, %791 ]
  %825 = icmp eq i64 %787, 0
  br i1 %825, label %836, label %826

826:                                              ; preds = %823, %826
  %827 = phi i64 [ %833, %826 ], [ %824, %823 ]
  %828 = phi i64 [ %834, %826 ], [ 0, %823 ]
  %829 = getelementptr inbounds i32, ptr %682, i64 %827
  %830 = load i32, ptr %829, align 4, !tbaa !5
  %831 = sext i32 %830 to i64
  %832 = getelementptr inbounds i8, ptr %680, i64 %831
  store i8 0, ptr %832, align 1, !tbaa !57
  %833 = add nuw nsw i64 %827, 1
  %834 = add i64 %828, 1
  %835 = icmp eq i64 %834, %787
  br i1 %835, label %836, label %826, !llvm.loop !298

836:                                              ; preds = %823, %826, %779, %816
  %837 = phi ptr [ %820, %816 ], [ %680, %779 ], [ %680, %826 ], [ %680, %823 ]
  %838 = load i32, ptr %691, align 4
  %839 = shl i32 %838, 2
  %840 = ashr exact i32 %839, 2
  %841 = load ptr, ptr %657, align 8, !tbaa !62
  %842 = sext i32 %840 to i64
  %843 = getelementptr inbounds ptr, ptr %841, i64 %842
  %844 = load ptr, ptr %843, align 8, !tbaa !23
  %845 = load i32, ptr %844, align 4, !tbaa !5
  %846 = icmp slt i32 %845, 1
  br i1 %846, label %899, label %847

847:                                              ; preds = %836
  %848 = add nuw i32 %845, 1
  %849 = zext i32 %848 to i64
  %850 = add nsw i64 %849, -1
  %851 = add nsw i64 %849, -2
  %852 = and i64 %850, 3
  %853 = icmp ult i64 %851, 3
  br i1 %853, label %881, label %854

854:                                              ; preds = %847
  %855 = and i64 %850, -4
  br label %856

856:                                              ; preds = %856, %854
  %857 = phi i64 [ 1, %854 ], [ %878, %856 ]
  %858 = phi i64 [ 0, %854 ], [ %879, %856 ]
  %859 = getelementptr inbounds i32, ptr %844, i64 %857
  %860 = load i32, ptr %859, align 4, !tbaa !5
  %861 = sext i32 %860 to i64
  %862 = getelementptr inbounds i8, ptr %837, i64 %861
  store i8 1, ptr %862, align 1, !tbaa !57
  %863 = add nuw nsw i64 %857, 1
  %864 = getelementptr inbounds i32, ptr %844, i64 %863
  %865 = load i32, ptr %864, align 4, !tbaa !5
  %866 = sext i32 %865 to i64
  %867 = getelementptr inbounds i8, ptr %837, i64 %866
  store i8 1, ptr %867, align 1, !tbaa !57
  %868 = add nuw nsw i64 %857, 2
  %869 = getelementptr inbounds i32, ptr %844, i64 %868
  %870 = load i32, ptr %869, align 4, !tbaa !5
  %871 = sext i32 %870 to i64
  %872 = getelementptr inbounds i8, ptr %837, i64 %871
  store i8 1, ptr %872, align 1, !tbaa !57
  %873 = add nuw nsw i64 %857, 3
  %874 = getelementptr inbounds i32, ptr %844, i64 %873
  %875 = load i32, ptr %874, align 4, !tbaa !5
  %876 = sext i32 %875 to i64
  %877 = getelementptr inbounds i8, ptr %837, i64 %876
  store i8 1, ptr %877, align 1, !tbaa !57
  %878 = add nuw nsw i64 %857, 4
  %879 = add i64 %858, 4
  %880 = icmp eq i64 %879, %855
  br i1 %880, label %881, label %856

881:                                              ; preds = %856, %847
  %882 = phi i64 [ 1, %847 ], [ %878, %856 ]
  %883 = icmp eq i64 %852, 0
  br i1 %883, label %894, label %884

884:                                              ; preds = %881, %884
  %885 = phi i64 [ %891, %884 ], [ %882, %881 ]
  %886 = phi i64 [ %892, %884 ], [ 0, %881 ]
  %887 = getelementptr inbounds i32, ptr %844, i64 %885
  %888 = load i32, ptr %887, align 4, !tbaa !5
  %889 = sext i32 %888 to i64
  %890 = getelementptr inbounds i8, ptr %837, i64 %889
  store i8 1, ptr %890, align 1, !tbaa !57
  %891 = add nuw nsw i64 %885, 1
  %892 = add i64 %886, 1
  %893 = icmp eq i64 %892, %852
  br i1 %893, label %894, label %884, !llvm.loop !299

894:                                              ; preds = %884, %881
  %895 = load i32, ptr %691, align 4
  %896 = shl i32 %895, 2
  %897 = ashr exact i32 %896, 2
  %898 = sext i32 %897 to i64
  br label %899

899:                                              ; preds = %894, %836
  %900 = phi i64 [ %898, %894 ], [ %842, %836 ]
  %901 = load ptr, ptr %658, align 8, !tbaa !64
  %902 = getelementptr inbounds ptr, ptr %901, i64 %900
  %903 = load ptr, ptr %902, align 8, !tbaa !23
  %904 = load i32, ptr %903, align 4, !tbaa !5
  %905 = icmp slt i32 %904, 1
  br i1 %905, label %953, label %906

906:                                              ; preds = %899
  %907 = add nuw i32 %904, 1
  %908 = zext i32 %907 to i64
  %909 = add nsw i64 %908, -1
  %910 = add nsw i64 %908, -2
  %911 = and i64 %909, 3
  %912 = icmp ult i64 %910, 3
  br i1 %912, label %940, label %913

913:                                              ; preds = %906
  %914 = and i64 %909, -4
  br label %915

915:                                              ; preds = %915, %913
  %916 = phi i64 [ 1, %913 ], [ %937, %915 ]
  %917 = phi i64 [ 0, %913 ], [ %938, %915 ]
  %918 = getelementptr inbounds i32, ptr %903, i64 %916
  %919 = load i32, ptr %918, align 4, !tbaa !5
  %920 = sext i32 %919 to i64
  %921 = getelementptr inbounds i8, ptr %837, i64 %920
  store i8 2, ptr %921, align 1, !tbaa !57
  %922 = add nuw nsw i64 %916, 1
  %923 = getelementptr inbounds i32, ptr %903, i64 %922
  %924 = load i32, ptr %923, align 4, !tbaa !5
  %925 = sext i32 %924 to i64
  %926 = getelementptr inbounds i8, ptr %837, i64 %925
  store i8 2, ptr %926, align 1, !tbaa !57
  %927 = add nuw nsw i64 %916, 2
  %928 = getelementptr inbounds i32, ptr %903, i64 %927
  %929 = load i32, ptr %928, align 4, !tbaa !5
  %930 = sext i32 %929 to i64
  %931 = getelementptr inbounds i8, ptr %837, i64 %930
  store i8 2, ptr %931, align 1, !tbaa !57
  %932 = add nuw nsw i64 %916, 3
  %933 = getelementptr inbounds i32, ptr %903, i64 %932
  %934 = load i32, ptr %933, align 4, !tbaa !5
  %935 = sext i32 %934 to i64
  %936 = getelementptr inbounds i8, ptr %837, i64 %935
  store i8 2, ptr %936, align 1, !tbaa !57
  %937 = add nuw nsw i64 %916, 4
  %938 = add i64 %917, 4
  %939 = icmp eq i64 %938, %914
  br i1 %939, label %940, label %915

940:                                              ; preds = %915, %906
  %941 = phi i64 [ 1, %906 ], [ %937, %915 ]
  %942 = icmp eq i64 %911, 0
  br i1 %942, label %953, label %943

943:                                              ; preds = %940, %943
  %944 = phi i64 [ %950, %943 ], [ %941, %940 ]
  %945 = phi i64 [ %951, %943 ], [ 0, %940 ]
  %946 = getelementptr inbounds i32, ptr %903, i64 %944
  %947 = load i32, ptr %946, align 4, !tbaa !5
  %948 = sext i32 %947 to i64
  %949 = getelementptr inbounds i8, ptr %837, i64 %948
  store i8 2, ptr %949, align 1, !tbaa !57
  %950 = add nuw nsw i64 %944, 1
  %951 = add i64 %945, 1
  %952 = icmp eq i64 %951, %911
  br i1 %952, label %953, label %943, !llvm.loop !300

953:                                              ; preds = %940, %943, %899, %723
  %954 = phi ptr [ %726, %723 ], [ %837, %899 ], [ %837, %943 ], [ %837, %940 ]
  %955 = phi ptr [ %682, %723 ], [ %903, %899 ], [ %903, %943 ], [ %903, %940 ]
  %956 = phi ptr [ %681, %723 ], [ %844, %899 ], [ %844, %943 ], [ %844, %940 ]
  %957 = phi ptr [ %680, %723 ], [ %837, %899 ], [ %837, %943 ], [ %837, %940 ]
  %958 = load i8, ptr %693, align 1
  %959 = and i8 %958, 7
  %960 = icmp eq i8 %959, 0
  %961 = load i32, ptr @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4, !tbaa !5
  br i1 %960, label %1144, label %962

962:                                              ; preds = %953
  %963 = icmp eq i32 %961, 0
  br i1 %963, label %970, label %964

964:                                              ; preds = %962
  %965 = load i32, ptr %691, align 4
  %966 = freeze i32 %965
  %967 = icmp slt i32 %966, 0
  %968 = select i1 %967, ptr %236, ptr %190
  %969 = select i1 %967, i32 %649, i32 %650
  br label %970

970:                                              ; preds = %964, %962
  %971 = phi ptr [ %190, %962 ], [ %968, %964 ]
  %972 = phi i32 [ %650, %962 ], [ %969, %964 ]
  %973 = icmp sgt i32 %972, 0
  br i1 %973, label %974, label %1125

974:                                              ; preds = %970
  %975 = icmp ugt i32 %972, 6
  br i1 %975, label %976, label %1060

976:                                              ; preds = %974
  %977 = add nsw i32 %972, -2
  %978 = getelementptr inbounds i16, ptr %971, i64 1
  %979 = load i16, ptr %978, align 2, !tbaa !44
  %980 = zext i16 %979 to i64
  %981 = getelementptr inbounds %struct.CompAtom, ptr %40, i64 %980
  %982 = getelementptr inbounds %class.Vector, ptr %981, i64 0, i32 2
  %983 = load double, ptr %982, align 8, !tbaa !49
  %984 = load i16, ptr %971, align 2, !tbaa !44
  %985 = zext i16 %984 to i64
  %986 = getelementptr inbounds %struct.CompAtom, ptr %40, i64 %985
  %987 = getelementptr inbounds %class.Vector, ptr %986, i64 0, i32 2
  %988 = load double, ptr %987, align 8, !tbaa !49
  %989 = getelementptr inbounds %class.Vector, ptr %981, i64 0, i32 1
  %990 = load double, ptr %989, align 8, !tbaa !66
  %991 = getelementptr inbounds %class.Vector, ptr %986, i64 0, i32 1
  %992 = load double, ptr %991, align 8, !tbaa !66
  %993 = load double, ptr %981, align 8, !tbaa !67
  %994 = load double, ptr %986, align 8, !tbaa !67
  %995 = zext i32 %977 to i64
  %996 = insertelement <2 x double> poison, double %983, i64 0
  %997 = insertelement <2 x double> %996, double %988, i64 1
  %998 = insertelement <2 x double> poison, double %990, i64 0
  %999 = insertelement <2 x double> %998, double %992, i64 1
  %1000 = insertelement <2 x double> poison, double %993, i64 0
  %1001 = insertelement <2 x double> %1000, double %994, i64 1
  %1002 = insertelement <2 x double> poison, double %710, i64 0
  %1003 = shufflevector <2 x double> %1002, <2 x double> poison, <2 x i32> zeroinitializer
  %1004 = shufflevector <2 x double> %707, <2 x double> poison, <2 x i32> <i32 1, i32 1>
  %1005 = shufflevector <2 x double> %707, <2 x double> poison, <2 x i32> zeroinitializer
  br label %1006

1006:                                             ; preds = %976, %1006
  %1007 = phi i64 [ 2, %976 ], [ %1050, %1006 ]
  %1008 = phi i32 [ 0, %976 ], [ %1049, %1006 ]
  %1009 = phi i16 [ %984, %976 ], [ %1016, %1006 ]
  %1010 = phi i16 [ %979, %976 ], [ %1019, %1006 ]
  %1011 = phi <2 x double> [ %997, %976 ], [ %1053, %1006 ]
  %1012 = phi <2 x double> [ %999, %976 ], [ %1055, %1006 ]
  %1013 = phi <2 x double> [ %1001, %976 ], [ %1057, %1006 ]
  %1014 = fsub <2 x double> %1003, %1011
  %1015 = getelementptr inbounds i16, ptr %971, i64 %1007
  %1016 = load i16, ptr %1015, align 2, !tbaa !44
  %1017 = or i64 %1007, 1
  %1018 = getelementptr inbounds i16, ptr %971, i64 %1017
  %1019 = load i16, ptr %1018, align 2, !tbaa !44
  %1020 = zext i16 %1016 to i64
  %1021 = getelementptr inbounds %struct.CompAtom, ptr %40, i64 %1020
  %1022 = load double, ptr %1021, align 8, !tbaa !67
  %1023 = zext i16 %1019 to i64
  %1024 = getelementptr inbounds %struct.CompAtom, ptr %40, i64 %1023
  %1025 = load double, ptr %1024, align 8, !tbaa !67
  %1026 = getelementptr inbounds %class.Vector, ptr %1021, i64 0, i32 1
  %1027 = load double, ptr %1026, align 8, !tbaa !66
  %1028 = getelementptr inbounds %class.Vector, ptr %1024, i64 0, i32 1
  %1029 = load double, ptr %1028, align 8, !tbaa !66
  %1030 = getelementptr inbounds %class.Vector, ptr %1021, i64 0, i32 2
  %1031 = load double, ptr %1030, align 8, !tbaa !49
  %1032 = getelementptr inbounds %class.Vector, ptr %1024, i64 0, i32 2
  %1033 = load double, ptr %1032, align 8, !tbaa !49
  %1034 = fsub <2 x double> %1005, %1013
  %1035 = fmul <2 x double> %1034, %1034
  %1036 = fsub <2 x double> %1004, %1012
  %1037 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %1036, <2 x double> %1036, <2 x double> %1035)
  %1038 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %1014, <2 x double> %1014, <2 x double> %1037)
  %1039 = fcmp olt <2 x double> %1038, %676
  %1040 = zext i32 %1008 to i64
  %1041 = getelementptr inbounds i16, ptr %282, i64 %1040
  store i16 %1009, ptr %1041, align 2, !tbaa !44
  %1042 = extractelement <2 x i1> %1039, i64 1
  %1043 = zext i1 %1042 to i32
  %1044 = add nuw nsw i32 %1008, %1043
  %1045 = zext i32 %1044 to i64
  %1046 = getelementptr inbounds i16, ptr %282, i64 %1045
  store i16 %1010, ptr %1046, align 2, !tbaa !44
  %1047 = extractelement <2 x i1> %1039, i64 0
  %1048 = zext i1 %1047 to i32
  %1049 = add i32 %1044, %1048
  %1050 = add nuw nsw i64 %1007, 2
  %1051 = icmp ult i64 %1050, %995
  %1052 = insertelement <2 x double> poison, double %1033, i64 0
  %1053 = insertelement <2 x double> %1052, double %1031, i64 1
  %1054 = insertelement <2 x double> poison, double %1029, i64 0
  %1055 = insertelement <2 x double> %1054, double %1027, i64 1
  %1056 = insertelement <2 x double> poison, double %1025, i64 0
  %1057 = insertelement <2 x double> %1056, double %1022, i64 1
  br i1 %1051, label %1006, label %1058

1058:                                             ; preds = %1006
  %1059 = trunc i64 %1007 to i32
  br label %1060

1060:                                             ; preds = %1058, %974
  %1061 = phi i32 [ %1049, %1058 ], [ 0, %974 ]
  %1062 = phi i32 [ %1059, %1058 ], [ 0, %974 ]
  %1063 = icmp slt i32 %1062, %972
  br i1 %1063, label %1064, label %1069

1064:                                             ; preds = %1060
  %1065 = zext i32 %1062 to i64
  %1066 = zext i32 %972 to i64
  %1067 = extractelement <2 x double> %707, i64 0
  %1068 = extractelement <2 x double> %707, i64 1
  br label %1074

1069:                                             ; preds = %1097, %1060
  %1070 = phi i32 [ %1061, %1060 ], [ %1098, %1097 ]
  %1071 = icmp sgt i32 %1070, 0
  br i1 %1071, label %1072, label %1125

1072:                                             ; preds = %1069
  %1073 = zext i32 %1070 to i64
  br label %1101

1074:                                             ; preds = %1064, %1097
  %1075 = phi i64 [ %1065, %1064 ], [ %1099, %1097 ]
  %1076 = phi i32 [ %1061, %1064 ], [ %1098, %1097 ]
  %1077 = getelementptr inbounds i16, ptr %971, i64 %1075
  %1078 = load i16, ptr %1077, align 2, !tbaa !44
  %1079 = zext i16 %1078 to i64
  %1080 = getelementptr inbounds %struct.CompAtom, ptr %40, i64 %1079
  %1081 = load double, ptr %1080, align 8, !tbaa !67
  %1082 = getelementptr inbounds %class.Vector, ptr %1080, i64 0, i32 1
  %1083 = load double, ptr %1082, align 8, !tbaa !66
  %1084 = getelementptr inbounds %class.Vector, ptr %1080, i64 0, i32 2
  %1085 = load double, ptr %1084, align 8, !tbaa !49
  %1086 = fsub double %1067, %1081
  %1087 = fmul double %1086, %1086
  %1088 = fsub double %1068, %1083
  %1089 = tail call double @llvm.fmuladd.f64(double %1088, double %1088, double %1087)
  %1090 = fsub double %710, %1085
  %1091 = tail call double @llvm.fmuladd.f64(double %1090, double %1090, double %1089)
  %1092 = fcmp ugt double %1091, %23
  br i1 %1092, label %1097, label %1093

1093:                                             ; preds = %1074
  %1094 = add nsw i32 %1076, 1
  %1095 = sext i32 %1076 to i64
  %1096 = getelementptr inbounds i16, ptr %282, i64 %1095
  store i16 %1078, ptr %1096, align 2, !tbaa !44
  br label %1097

1097:                                             ; preds = %1093, %1074
  %1098 = phi i32 [ %1094, %1093 ], [ %1076, %1074 ]
  %1099 = add nuw nsw i64 %1075, 1
  %1100 = icmp eq i64 %1099, %1066
  br i1 %1100, label %1069, label %1074

1101:                                             ; preds = %1072, %1118
  %1102 = phi i64 [ 0, %1072 ], [ %1121, %1118 ]
  %1103 = phi ptr [ %420, %1072 ], [ %1120, %1118 ]
  %1104 = getelementptr inbounds i16, ptr %282, i64 %1102
  %1105 = load i16, ptr %1104, align 2, !tbaa !44
  %1106 = zext i16 %1105 to i64
  %1107 = getelementptr inbounds %struct.CompAtom, ptr %40, i64 %1106, i32 4
  %1108 = load i8, ptr %1107, align 1
  %1109 = and i8 %1108, 7
  store i16 %1105, ptr %1103, align 2, !tbaa !44
  %1110 = getelementptr inbounds i16, ptr %1103, i64 1
  %1111 = insertelement <2 x i16> poison, i16 %1105, i64 0
  %1112 = shufflevector <2 x i16> %1111, <2 x i16> poison, <2 x i32> zeroinitializer
  %1113 = add <2 x i16> %1112, <i16 1, i16 2>
  store <2 x i16> %1113, ptr %1110, align 2, !tbaa !44
  %1114 = icmp ult i8 %1109, 4
  br i1 %1114, label %1118, label %1115

1115:                                             ; preds = %1101
  %1116 = add <2 x i16> %1112, <i16 3, i16 4>
  %1117 = getelementptr inbounds i16, ptr %1103, i64 3
  store <2 x i16> %1116, ptr %1117, align 2, !tbaa !44
  br label %1118

1118:                                             ; preds = %1115, %1101
  %1119 = zext i8 %1109 to i64
  %1120 = getelementptr inbounds i16, ptr %1103, i64 %1119
  %1121 = add nuw nsw i64 %1102, 1
  %1122 = icmp eq i64 %1121, %1073
  br i1 %1122, label %1123, label %1101

1123:                                             ; preds = %1118
  %1124 = ptrtoint ptr %1120 to i64
  br label %1125

1125:                                             ; preds = %1123, %1069, %970
  %1126 = phi i64 [ %1124, %1123 ], [ %659, %1069 ], [ %659, %970 ]
  %1127 = sub i64 %1126, %659
  %1128 = lshr exact i64 %1127, 1
  %1129 = trunc i64 %1128 to i32
  %1130 = icmp eq i32 %1129, 0
  br i1 %1130, label %1131, label %1136

1131:                                             ; preds = %1125
  %1132 = load i8, ptr %693, align 1
  %1133 = and i8 %1132, 7
  %1134 = zext i8 %1133 to i32
  %1135 = add nsw i32 %679, %1134
  br label %2360

1136:                                             ; preds = %1125
  %1137 = shl i64 %1127, 31
  %1138 = add i64 %1137, -4294967296
  %1139 = ashr i64 %1138, 32
  %1140 = getelementptr inbounds i16, ptr %420, i64 %1139
  %1141 = load i16, ptr %1140, align 2, !tbaa !44
  %1142 = ashr i64 %1137, 32
  %1143 = getelementptr inbounds i16, ptr %420, i64 %1142
  store i16 %1141, ptr %1143, align 2, !tbaa !44
  br label %1144

1144:                                             ; preds = %1136, %953
  %1145 = phi i32 [ %1129, %1136 ], [ %683, %953 ]
  %1146 = icmp eq i32 %961, 0
  br i1 %1146, label %1151, label %1147

1147:                                             ; preds = %1144
  %1148 = load i32, ptr %691, align 4
  %1149 = and i32 %1148, 1073741824
  %1150 = icmp ne i32 %1149, 0
  br label %1151

1151:                                             ; preds = %1147, %1144
  %1152 = phi i1 [ false, %1144 ], [ %1150, %1147 ]
  %1153 = load i32, ptr %13, align 8, !tbaa !17
  %1154 = add nsw i32 %660, %1153
  %1155 = load i32, ptr %661, align 4, !tbaa !68
  %1156 = icmp sgt i32 %1155, %1154
  br i1 %1156, label %1172, label %1157

1157:                                             ; preds = %1151, %1157
  %1158 = phi i32 [ %1160, %1157 ], [ %1155, %1151 ]
  %1159 = ashr i32 %1158, 1
  %1160 = add nsw i32 %1159, %1158
  %1161 = icmp sgt i32 %1160, %1154
  br i1 %1161, label %1162, label %1157

1162:                                             ; preds = %1157
  %1163 = sext i32 %1160 to i64
  %1164 = icmp slt i32 %1160, 0
  %1165 = shl nsw i64 %1163, 1
  %1166 = select i1 %1164, i64 -1, i64 %1165
  %1167 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %1166) #9
  %1168 = load ptr, ptr %8, align 8, !tbaa !46
  %1169 = sext i32 %1153 to i64
  %1170 = shl nsw i64 %1169, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 2 %1167, ptr align 2 %1168, i64 %1170, i1 false)
  %1171 = icmp eq ptr %1168, null
  br i1 %1171, label %1176, label %1174

1172:                                             ; preds = %1151
  %1173 = load ptr, ptr %8, align 8, !tbaa !46
  br label %1178

1174:                                             ; preds = %1162
  tail call void @_ZdaPv(ptr noundef nonnull %1168) #10
  %1175 = load i32, ptr %13, align 8, !tbaa !17
  br label %1176

1176:                                             ; preds = %1174, %1162
  %1177 = phi i32 [ %1175, %1174 ], [ %1153, %1162 ]
  store ptr %1167, ptr %8, align 8, !tbaa !46
  store i32 %1160, ptr %661, align 4, !tbaa !68
  br label %1178

1178:                                             ; preds = %1172, %1176
  %1179 = phi i32 [ %1153, %1172 ], [ %1177, %1176 ]
  %1180 = phi ptr [ %1173, %1172 ], [ %1167, %1176 ]
  %1181 = ptrtoint ptr %1180 to i64
  %1182 = add nsw i32 %1179, 1
  %1183 = sext i32 %1182 to i64
  %1184 = getelementptr inbounds i16, ptr %1180, i64 %1183
  %1185 = load i32, ptr @_ZN20ComputeNonbondedUtil17pairInteractionOnE, align 4, !tbaa !5
  %1186 = icmp eq i32 %1185, 0
  br i1 %1186, label %1368, label %1187

1187:                                             ; preds = %1178
  %1188 = getelementptr inbounds %struct.CompAtom, ptr %38, i64 %689, i32 3
  %1189 = load i8, ptr %1188, align 2, !tbaa !301
  %1190 = zext i8 %1189 to i32
  %1191 = load i32, ptr @_ZN20ComputeNonbondedUtil19pairInteractionSelfE, align 4, !tbaa !5
  %1192 = icmp eq i32 %1191, 0
  br i1 %1192, label %1233, label %1193

1193:                                             ; preds = %1187
  %1194 = icmp eq i8 %1189, 1
  br i1 %1194, label %1195, label %1203

1195:                                             ; preds = %1193
  %1196 = icmp sgt i32 %1145, 0
  br i1 %1196, label %1197, label %1308

1197:                                             ; preds = %1195
  %1198 = zext i32 %1145 to i64
  %1199 = and i64 %1198, 1
  %1200 = icmp eq i32 %1145, 1
  br i1 %1200, label %1294, label %1201

1201:                                             ; preds = %1197
  %1202 = and i64 %1198, 4294967294
  br label %1205

1203:                                             ; preds = %1193
  %1204 = add nsw i32 %679, 1
  br label %2360

1205:                                             ; preds = %1228, %1201
  %1206 = phi i64 [ 0, %1201 ], [ %1230, %1228 ]
  %1207 = phi ptr [ %466, %1201 ], [ %1229, %1228 ]
  %1208 = phi i64 [ 0, %1201 ], [ %1231, %1228 ]
  %1209 = getelementptr inbounds i16, ptr %420, i64 %1206
  %1210 = load i16, ptr %1209, align 2, !tbaa !44
  %1211 = zext i16 %1210 to i64
  %1212 = getelementptr inbounds %struct.CompAtom, ptr %40, i64 %1211, i32 3
  %1213 = load i8, ptr %1212, align 2, !tbaa !301
  %1214 = icmp eq i8 %1213, 1
  br i1 %1214, label %1215, label %1217

1215:                                             ; preds = %1205
  %1216 = getelementptr inbounds i16, ptr %1207, i64 1
  store i16 %1210, ptr %1207, align 2, !tbaa !44
  br label %1217

1217:                                             ; preds = %1215, %1205
  %1218 = phi ptr [ %1216, %1215 ], [ %1207, %1205 ]
  %1219 = or i64 %1206, 1
  %1220 = getelementptr inbounds i16, ptr %420, i64 %1219
  %1221 = load i16, ptr %1220, align 2, !tbaa !44
  %1222 = zext i16 %1221 to i64
  %1223 = getelementptr inbounds %struct.CompAtom, ptr %40, i64 %1222, i32 3
  %1224 = load i8, ptr %1223, align 2, !tbaa !301
  %1225 = icmp eq i8 %1224, 1
  br i1 %1225, label %1226, label %1228

1226:                                             ; preds = %1217
  %1227 = getelementptr inbounds i16, ptr %1218, i64 1
  store i16 %1221, ptr %1218, align 2, !tbaa !44
  br label %1228

1228:                                             ; preds = %1226, %1217
  %1229 = phi ptr [ %1227, %1226 ], [ %1218, %1217 ]
  %1230 = add nuw nsw i64 %1206, 2
  %1231 = add i64 %1208, 2
  %1232 = icmp eq i64 %1231, %1202
  br i1 %1232, label %1294, label %1205

1233:                                             ; preds = %1187
  %1234 = add i8 %1189, -3
  %1235 = icmp ult i8 %1234, -2
  br i1 %1235, label %1244, label %1236

1236:                                             ; preds = %1233
  %1237 = icmp sgt i32 %1145, 0
  br i1 %1237, label %1238, label %1308

1238:                                             ; preds = %1236
  %1239 = zext i32 %1145 to i64
  %1240 = and i64 %1239, 1
  %1241 = icmp eq i32 %1145, 1
  br i1 %1241, label %1278, label %1242

1242:                                             ; preds = %1238
  %1243 = and i64 %1239, 4294967294
  br label %1246

1244:                                             ; preds = %1233
  %1245 = add nsw i32 %679, 1
  br label %2360

1246:                                             ; preds = %1273, %1242
  %1247 = phi i64 [ 0, %1242 ], [ %1275, %1273 ]
  %1248 = phi ptr [ %466, %1242 ], [ %1274, %1273 ]
  %1249 = phi i64 [ 0, %1242 ], [ %1276, %1273 ]
  %1250 = getelementptr inbounds i16, ptr %420, i64 %1247
  %1251 = load i16, ptr %1250, align 2, !tbaa !44
  %1252 = zext i16 %1251 to i64
  %1253 = getelementptr inbounds %struct.CompAtom, ptr %40, i64 %1252, i32 3
  %1254 = load i8, ptr %1253, align 2, !tbaa !301
  %1255 = zext i8 %1254 to i32
  %1256 = add nuw nsw i32 %1255, %1190
  %1257 = icmp eq i32 %1256, 3
  br i1 %1257, label %1258, label %1260

1258:                                             ; preds = %1246
  %1259 = getelementptr inbounds i16, ptr %1248, i64 1
  store i16 %1251, ptr %1248, align 2, !tbaa !44
  br label %1260

1260:                                             ; preds = %1258, %1246
  %1261 = phi ptr [ %1259, %1258 ], [ %1248, %1246 ]
  %1262 = or i64 %1247, 1
  %1263 = getelementptr inbounds i16, ptr %420, i64 %1262
  %1264 = load i16, ptr %1263, align 2, !tbaa !44
  %1265 = zext i16 %1264 to i64
  %1266 = getelementptr inbounds %struct.CompAtom, ptr %40, i64 %1265, i32 3
  %1267 = load i8, ptr %1266, align 2, !tbaa !301
  %1268 = zext i8 %1267 to i32
  %1269 = add nuw nsw i32 %1268, %1190
  %1270 = icmp eq i32 %1269, 3
  br i1 %1270, label %1271, label %1273

1271:                                             ; preds = %1260
  %1272 = getelementptr inbounds i16, ptr %1261, i64 1
  store i16 %1264, ptr %1261, align 2, !tbaa !44
  br label %1273

1273:                                             ; preds = %1271, %1260
  %1274 = phi ptr [ %1272, %1271 ], [ %1261, %1260 ]
  %1275 = add nuw nsw i64 %1247, 2
  %1276 = add i64 %1249, 2
  %1277 = icmp eq i64 %1276, %1243
  br i1 %1277, label %1278, label %1246

1278:                                             ; preds = %1273, %1238
  %1279 = phi ptr [ undef, %1238 ], [ %1274, %1273 ]
  %1280 = phi i64 [ 0, %1238 ], [ %1275, %1273 ]
  %1281 = phi ptr [ %466, %1238 ], [ %1274, %1273 ]
  %1282 = icmp eq i64 %1240, 0
  br i1 %1282, label %1308, label %1283

1283:                                             ; preds = %1278
  %1284 = getelementptr inbounds i16, ptr %420, i64 %1280
  %1285 = load i16, ptr %1284, align 2, !tbaa !44
  %1286 = zext i16 %1285 to i64
  %1287 = getelementptr inbounds %struct.CompAtom, ptr %40, i64 %1286, i32 3
  %1288 = load i8, ptr %1287, align 2, !tbaa !301
  %1289 = zext i8 %1288 to i32
  %1290 = add nuw nsw i32 %1289, %1190
  %1291 = icmp eq i32 %1290, 3
  br i1 %1291, label %1292, label %1308

1292:                                             ; preds = %1283
  %1293 = getelementptr inbounds i16, ptr %1281, i64 1
  store i16 %1285, ptr %1281, align 2, !tbaa !44
  br label %1308

1294:                                             ; preds = %1228, %1197
  %1295 = phi ptr [ undef, %1197 ], [ %1229, %1228 ]
  %1296 = phi i64 [ 0, %1197 ], [ %1230, %1228 ]
  %1297 = phi ptr [ %466, %1197 ], [ %1229, %1228 ]
  %1298 = icmp eq i64 %1199, 0
  br i1 %1298, label %1308, label %1299

1299:                                             ; preds = %1294
  %1300 = getelementptr inbounds i16, ptr %420, i64 %1296
  %1301 = load i16, ptr %1300, align 2, !tbaa !44
  %1302 = zext i16 %1301 to i64
  %1303 = getelementptr inbounds %struct.CompAtom, ptr %40, i64 %1302, i32 3
  %1304 = load i8, ptr %1303, align 2, !tbaa !301
  %1305 = icmp eq i8 %1304, 1
  br i1 %1305, label %1306, label %1308

1306:                                             ; preds = %1299
  %1307 = getelementptr inbounds i16, ptr %1297, i64 1
  store i16 %1301, ptr %1297, align 2, !tbaa !44
  br label %1308

1308:                                             ; preds = %1294, %1306, %1299, %1278, %1292, %1283, %1195, %1236
  %1309 = phi ptr [ %466, %1236 ], [ %466, %1195 ], [ %1279, %1278 ], [ %1293, %1292 ], [ %1281, %1283 ], [ %1295, %1294 ], [ %1307, %1306 ], [ %1297, %1299 ]
  %1310 = ptrtoint ptr %1309 to i64
  %1311 = sub i64 %1310, %662
  %1312 = lshr exact i64 %1311, 1
  %1313 = trunc i64 %1312 to i32
  %1314 = icmp sgt i32 %1313, 0
  br i1 %1314, label %1315, label %1577

1315:                                             ; preds = %1308
  %1316 = and i64 %1312, 4294967295
  %1317 = extractelement <2 x double> %707, i64 0
  %1318 = extractelement <2 x double> %707, i64 1
  br label %1319

1319:                                             ; preds = %1315, %1363
  %1320 = phi i64 [ 0, %1315 ], [ %1366, %1363 ]
  %1321 = phi ptr [ %466, %1315 ], [ %1365, %1363 ]
  %1322 = phi ptr [ %1184, %1315 ], [ %1364, %1363 ]
  %1323 = getelementptr inbounds i16, ptr %466, i64 %1320
  %1324 = load i16, ptr %1323, align 2, !tbaa !44
  %1325 = zext i16 %1324 to i64
  %1326 = getelementptr inbounds %struct.CompAtom, ptr %40, i64 %1325
  %1327 = load double, ptr %1326, align 8, !tbaa !67
  %1328 = fsub double %1317, %1327
  %1329 = fmul double %1328, %1328
  %1330 = getelementptr inbounds %class.Vector, ptr %1326, i64 0, i32 1
  %1331 = load double, ptr %1330, align 8, !tbaa !66
  %1332 = fsub double %1318, %1331
  %1333 = tail call double @llvm.fmuladd.f64(double %1332, double %1332, double %1329)
  %1334 = getelementptr inbounds %class.Vector, ptr %1326, i64 0, i32 2
  %1335 = load double, ptr %1334, align 8, !tbaa !49
  %1336 = fsub double %710, %1335
  %1337 = tail call double @llvm.fmuladd.f64(double %1336, double %1336, double %1333)
  br i1 %1152, label %1338, label %1345

1338:                                             ; preds = %1319
  %1339 = getelementptr inbounds %struct.CompAtomExt, ptr %44, i64 %1325
  %1340 = load i32, ptr %1339, align 4
  %1341 = and i32 %1340, 1073741824
  %1342 = icmp ne i32 %1341, 0
  %1343 = fcmp ugt double %1337, %20
  %1344 = select i1 %1342, i1 true, i1 %1343
  br i1 %1344, label %1363, label %1350

1345:                                             ; preds = %1319
  %1346 = fcmp ugt double %1337, %20
  br i1 %1346, label %1363, label %1347

1347:                                             ; preds = %1345
  %1348 = getelementptr inbounds %struct.CompAtomExt, ptr %44, i64 %1325
  %1349 = load i32, ptr %1348, align 4
  br label %1350

1350:                                             ; preds = %1347, %1338
  %1351 = phi i32 [ %1349, %1347 ], [ %1340, %1338 ]
  %1352 = shl i32 %1351, 2
  %1353 = ashr exact i32 %1352, 2
  %1354 = icmp slt i32 %1353, %717
  %1355 = icmp sgt i32 %1353, %719
  %1356 = select i1 %1354, i1 true, i1 %1355
  %1357 = select i1 %1356, ptr %1322, ptr %1321
  %1358 = zext i1 %1356 to i64
  %1359 = getelementptr inbounds i16, ptr %1322, i64 %1358
  %1360 = xor i1 %1356, true
  %1361 = zext i1 %1360 to i64
  %1362 = getelementptr inbounds i16, ptr %1321, i64 %1361
  store i16 %1324, ptr %1357, align 2, !tbaa !44
  br label %1363

1363:                                             ; preds = %1350, %1345, %1338
  %1364 = phi ptr [ %1322, %1338 ], [ %1322, %1345 ], [ %1359, %1350 ]
  %1365 = phi ptr [ %1321, %1338 ], [ %1321, %1345 ], [ %1362, %1350 ]
  %1366 = add nuw nsw i64 %1320, 1
  %1367 = icmp eq i64 %1366, %1316
  br i1 %1367, label %1577, label %1319

1368:                                             ; preds = %1178
  %1369 = icmp sgt i32 %1145, 0
  br i1 %1152, label %1370, label %1417

1370:                                             ; preds = %1368
  br i1 %1369, label %1371, label %1577

1371:                                             ; preds = %1370
  %1372 = zext i32 %1145 to i64
  %1373 = extractelement <2 x double> %707, i64 0
  %1374 = extractelement <2 x double> %707, i64 1
  br label %1375

1375:                                             ; preds = %1371, %1412
  %1376 = phi i64 [ 0, %1371 ], [ %1415, %1412 ]
  %1377 = phi ptr [ %466, %1371 ], [ %1414, %1412 ]
  %1378 = phi ptr [ %1184, %1371 ], [ %1413, %1412 ]
  %1379 = getelementptr inbounds i16, ptr %420, i64 %1376
  %1380 = load i16, ptr %1379, align 2, !tbaa !44
  %1381 = zext i16 %1380 to i64
  %1382 = getelementptr inbounds %struct.CompAtomExt, ptr %44, i64 %1381
  %1383 = load i32, ptr %1382, align 4
  %1384 = and i32 %1383, 1073741824
  %1385 = icmp eq i32 %1384, 0
  br i1 %1385, label %1386, label %1412

1386:                                             ; preds = %1375
  %1387 = getelementptr inbounds %struct.CompAtom, ptr %40, i64 %1381
  %1388 = getelementptr inbounds %class.Vector, ptr %1387, i64 0, i32 2
  %1389 = load double, ptr %1388, align 8, !tbaa !49
  %1390 = fsub double %710, %1389
  %1391 = getelementptr inbounds %class.Vector, ptr %1387, i64 0, i32 1
  %1392 = load double, ptr %1391, align 8, !tbaa !66
  %1393 = fsub double %1374, %1392
  %1394 = load double, ptr %1387, align 8, !tbaa !67
  %1395 = fsub double %1373, %1394
  %1396 = fmul double %1395, %1395
  %1397 = tail call double @llvm.fmuladd.f64(double %1393, double %1393, double %1396)
  %1398 = tail call double @llvm.fmuladd.f64(double %1390, double %1390, double %1397)
  %1399 = fcmp ugt double %1398, %20
  br i1 %1399, label %1412, label %1400

1400:                                             ; preds = %1386
  %1401 = shl i32 %1383, 2
  %1402 = ashr exact i32 %1401, 2
  %1403 = icmp slt i32 %1402, %717
  %1404 = icmp sgt i32 %1402, %719
  %1405 = select i1 %1403, i1 true, i1 %1404
  %1406 = select i1 %1405, ptr %1378, ptr %1377
  %1407 = zext i1 %1405 to i64
  %1408 = getelementptr inbounds i16, ptr %1378, i64 %1407
  %1409 = xor i1 %1405, true
  %1410 = zext i1 %1409 to i64
  %1411 = getelementptr inbounds i16, ptr %1377, i64 %1410
  store i16 %1380, ptr %1406, align 2, !tbaa !44
  br label %1412

1412:                                             ; preds = %1400, %1386, %1375
  %1413 = phi ptr [ %1378, %1375 ], [ %1378, %1386 ], [ %1408, %1400 ]
  %1414 = phi ptr [ %1377, %1375 ], [ %1377, %1386 ], [ %1411, %1400 ]
  %1415 = add nuw nsw i64 %1376, 1
  %1416 = icmp eq i64 %1415, %1372
  br i1 %1416, label %1577, label %1375

1417:                                             ; preds = %1368
  br i1 %1369, label %1418, label %1577

1418:                                             ; preds = %1417
  %1419 = icmp ugt i32 %1145, 6
  br i1 %1419, label %1420, label %1528

1420:                                             ; preds = %1418
  %1421 = add nsw i32 %1145, -2
  %1422 = load i16, ptr %420, align 2, !tbaa !44
  %1423 = zext i16 %1422 to i64
  %1424 = getelementptr inbounds %struct.CompAtomExt, ptr %44, i64 %1423
  %1425 = load i32, ptr %1424, align 4
  %1426 = load i16, ptr %663, align 2, !tbaa !44
  %1427 = zext i16 %1426 to i64
  %1428 = getelementptr inbounds %struct.CompAtom, ptr %40, i64 %1427
  %1429 = getelementptr inbounds %class.Vector, ptr %1428, i64 0, i32 2
  %1430 = load double, ptr %1429, align 8, !tbaa !49
  %1431 = getelementptr inbounds %struct.CompAtom, ptr %40, i64 %1423
  %1432 = getelementptr inbounds %class.Vector, ptr %1431, i64 0, i32 2
  %1433 = load double, ptr %1432, align 8, !tbaa !49
  %1434 = getelementptr inbounds %class.Vector, ptr %1428, i64 0, i32 1
  %1435 = load double, ptr %1434, align 8, !tbaa !66
  %1436 = getelementptr inbounds %class.Vector, ptr %1431, i64 0, i32 1
  %1437 = load double, ptr %1436, align 8, !tbaa !66
  %1438 = load double, ptr %1428, align 8, !tbaa !67
  %1439 = load double, ptr %1431, align 8, !tbaa !67
  %1440 = zext i32 %1421 to i64
  %1441 = extractelement <2 x double> %707, i64 0
  %1442 = extractelement <2 x double> %707, i64 1
  br label %1443

1443:                                             ; preds = %1420, %1521
  %1444 = phi i64 [ 2, %1420 ], [ %1524, %1521 ]
  %1445 = phi i64 [ %1427, %1420 ], [ %1481, %1521 ]
  %1446 = phi i32 [ %1425, %1420 ], [ %1509, %1521 ]
  %1447 = phi ptr [ %466, %1420 ], [ %1523, %1521 ]
  %1448 = phi ptr [ %1184, %1420 ], [ %1522, %1521 ]
  %1449 = phi i16 [ %1422, %1420 ], [ %1474, %1521 ]
  %1450 = phi i16 [ %1426, %1420 ], [ %1477, %1521 ]
  %1451 = phi double [ %1439, %1420 ], [ %1480, %1521 ]
  %1452 = phi double [ %1438, %1420 ], [ %1483, %1521 ]
  %1453 = phi double [ %1437, %1420 ], [ %1485, %1521 ]
  %1454 = phi double [ %1435, %1420 ], [ %1487, %1521 ]
  %1455 = phi double [ %1433, %1420 ], [ %1489, %1521 ]
  %1456 = phi double [ %1430, %1420 ], [ %1491, %1521 ]
  %1457 = getelementptr inbounds %struct.CompAtomExt, ptr %44, i64 %1445
  %1458 = load i32, ptr %1457, align 4
  %1459 = shl i32 %1458, 2
  %1460 = ashr exact i32 %1459, 2
  %1461 = fsub double %1441, %1451
  %1462 = fsub double %1441, %1452
  %1463 = fmul double %1461, %1461
  %1464 = fmul double %1462, %1462
  %1465 = fsub double %1442, %1453
  %1466 = fsub double %1442, %1454
  %1467 = tail call double @llvm.fmuladd.f64(double %1465, double %1465, double %1463)
  %1468 = tail call double @llvm.fmuladd.f64(double %1466, double %1466, double %1464)
  %1469 = fsub double %710, %1455
  %1470 = fsub double %710, %1456
  %1471 = tail call double @llvm.fmuladd.f64(double %1469, double %1469, double %1467)
  %1472 = tail call double @llvm.fmuladd.f64(double %1470, double %1470, double %1468)
  %1473 = getelementptr inbounds i16, ptr %420, i64 %1444
  %1474 = load i16, ptr %1473, align 2, !tbaa !44
  %1475 = or i64 %1444, 1
  %1476 = getelementptr inbounds i16, ptr %420, i64 %1475
  %1477 = load i16, ptr %1476, align 2, !tbaa !44
  %1478 = zext i16 %1474 to i64
  %1479 = getelementptr inbounds %struct.CompAtom, ptr %40, i64 %1478
  %1480 = load double, ptr %1479, align 8, !tbaa !67
  %1481 = zext i16 %1477 to i64
  %1482 = getelementptr inbounds %struct.CompAtom, ptr %40, i64 %1481
  %1483 = load double, ptr %1482, align 8, !tbaa !67
  %1484 = getelementptr inbounds %class.Vector, ptr %1479, i64 0, i32 1
  %1485 = load double, ptr %1484, align 8, !tbaa !66
  %1486 = getelementptr inbounds %class.Vector, ptr %1482, i64 0, i32 1
  %1487 = load double, ptr %1486, align 8, !tbaa !66
  %1488 = getelementptr inbounds %class.Vector, ptr %1479, i64 0, i32 2
  %1489 = load double, ptr %1488, align 8, !tbaa !49
  %1490 = getelementptr inbounds %class.Vector, ptr %1482, i64 0, i32 2
  %1491 = load double, ptr %1490, align 8, !tbaa !49
  %1492 = fcmp ugt double %1471, %20
  br i1 %1492, label %1505, label %1493

1493:                                             ; preds = %1443
  %1494 = shl i32 %1446, 2
  %1495 = ashr exact i32 %1494, 2
  %1496 = icmp slt i32 %1495, %717
  %1497 = icmp sgt i32 %1495, %719
  %1498 = select i1 %1496, i1 true, i1 %1497
  %1499 = select i1 %1498, ptr %1448, ptr %1447
  %1500 = zext i1 %1498 to i64
  %1501 = getelementptr inbounds i16, ptr %1448, i64 %1500
  %1502 = xor i1 %1498, true
  %1503 = zext i1 %1502 to i64
  %1504 = getelementptr inbounds i16, ptr %1447, i64 %1503
  store i16 %1449, ptr %1499, align 2, !tbaa !44
  br label %1505

1505:                                             ; preds = %1493, %1443
  %1506 = phi ptr [ %1448, %1443 ], [ %1501, %1493 ]
  %1507 = phi ptr [ %1447, %1443 ], [ %1504, %1493 ]
  %1508 = getelementptr inbounds %struct.CompAtomExt, ptr %44, i64 %1478
  %1509 = load i32, ptr %1508, align 4
  %1510 = fcmp ugt double %1472, %20
  br i1 %1510, label %1521, label %1511

1511:                                             ; preds = %1505
  %1512 = icmp slt i32 %1460, %717
  %1513 = icmp sgt i32 %1460, %719
  %1514 = select i1 %1512, i1 true, i1 %1513
  %1515 = select i1 %1514, ptr %1506, ptr %1507
  %1516 = zext i1 %1514 to i64
  %1517 = getelementptr inbounds i16, ptr %1506, i64 %1516
  %1518 = xor i1 %1514, true
  %1519 = zext i1 %1518 to i64
  %1520 = getelementptr inbounds i16, ptr %1507, i64 %1519
  store i16 %1450, ptr %1515, align 2, !tbaa !44
  br label %1521

1521:                                             ; preds = %1511, %1505
  %1522 = phi ptr [ %1506, %1505 ], [ %1517, %1511 ]
  %1523 = phi ptr [ %1507, %1505 ], [ %1520, %1511 ]
  %1524 = add nuw nsw i64 %1444, 2
  %1525 = icmp ult i64 %1524, %1440
  br i1 %1525, label %1443, label %1526

1526:                                             ; preds = %1521
  %1527 = trunc i64 %1444 to i32
  br label %1528

1528:                                             ; preds = %1526, %1418
  %1529 = phi i32 [ %1527, %1526 ], [ 0, %1418 ]
  %1530 = phi ptr [ %1522, %1526 ], [ %1184, %1418 ]
  %1531 = phi ptr [ %1523, %1526 ], [ %466, %1418 ]
  %1532 = icmp slt i32 %1529, %1145
  br i1 %1532, label %1533, label %1577

1533:                                             ; preds = %1528
  %1534 = zext i32 %1529 to i64
  %1535 = zext i32 %1145 to i64
  %1536 = extractelement <2 x double> %707, i64 0
  %1537 = extractelement <2 x double> %707, i64 1
  br label %1538

1538:                                             ; preds = %1533, %1572
  %1539 = phi i64 [ %1534, %1533 ], [ %1575, %1572 ]
  %1540 = phi ptr [ %1531, %1533 ], [ %1574, %1572 ]
  %1541 = phi ptr [ %1530, %1533 ], [ %1573, %1572 ]
  %1542 = getelementptr inbounds i16, ptr %420, i64 %1539
  %1543 = load i16, ptr %1542, align 2, !tbaa !44
  %1544 = zext i16 %1543 to i64
  %1545 = getelementptr inbounds %struct.CompAtom, ptr %40, i64 %1544
  %1546 = load double, ptr %1545, align 8, !tbaa !67
  %1547 = getelementptr inbounds %class.Vector, ptr %1545, i64 0, i32 1
  %1548 = load double, ptr %1547, align 8, !tbaa !66
  %1549 = getelementptr inbounds %class.Vector, ptr %1545, i64 0, i32 2
  %1550 = load double, ptr %1549, align 8, !tbaa !49
  %1551 = fsub double %1536, %1546
  %1552 = fmul double %1551, %1551
  %1553 = fsub double %1537, %1548
  %1554 = tail call double @llvm.fmuladd.f64(double %1553, double %1553, double %1552)
  %1555 = fsub double %710, %1550
  %1556 = tail call double @llvm.fmuladd.f64(double %1555, double %1555, double %1554)
  %1557 = fcmp ugt double %1556, %20
  br i1 %1557, label %1572, label %1558

1558:                                             ; preds = %1538
  %1559 = getelementptr inbounds %struct.CompAtomExt, ptr %44, i64 %1544
  %1560 = load i32, ptr %1559, align 4
  %1561 = shl i32 %1560, 2
  %1562 = ashr exact i32 %1561, 2
  %1563 = icmp slt i32 %1562, %717
  %1564 = icmp sgt i32 %1562, %719
  %1565 = select i1 %1563, i1 true, i1 %1564
  %1566 = select i1 %1565, ptr %1541, ptr %1540
  %1567 = zext i1 %1565 to i64
  %1568 = getelementptr inbounds i16, ptr %1541, i64 %1567
  %1569 = xor i1 %1565, true
  %1570 = zext i1 %1569 to i64
  %1571 = getelementptr inbounds i16, ptr %1540, i64 %1570
  store i16 %1543, ptr %1566, align 2, !tbaa !44
  br label %1572

1572:                                             ; preds = %1558, %1538
  %1573 = phi ptr [ %1541, %1538 ], [ %1568, %1558 ]
  %1574 = phi ptr [ %1540, %1538 ], [ %1571, %1558 ]
  %1575 = add nuw nsw i64 %1539, 1
  %1576 = icmp eq i64 %1575, %1535
  br i1 %1576, label %1577, label %1538

1577:                                             ; preds = %1363, %1572, %1412, %1308, %1528, %1370, %1417
  %1578 = phi ptr [ %1184, %1417 ], [ %1184, %1370 ], [ %1530, %1528 ], [ %1184, %1308 ], [ %1413, %1412 ], [ %1573, %1572 ], [ %1364, %1363 ]
  %1579 = phi ptr [ %466, %1417 ], [ %466, %1370 ], [ %1531, %1528 ], [ %466, %1308 ], [ %1414, %1412 ], [ %1574, %1572 ], [ %1365, %1363 ]
  %1580 = icmp eq ptr %1578, %1184
  %1581 = icmp eq ptr %1579, %466
  %1582 = select i1 %1580, i1 %1581, i1 false
  br i1 %1582, label %1583, label %1585

1583:                                             ; preds = %1577
  %1584 = add nsw i32 %679, 1
  br label %2360

1585:                                             ; preds = %1577
  %1586 = trunc i32 %679 to i16
  %1587 = load i32, ptr %13, align 8, !tbaa !17
  %1588 = add nsw i32 %1587, -1
  %1589 = sext i32 %1588 to i64
  %1590 = getelementptr inbounds i16, ptr %1180, i64 %1589
  store i16 %1586, ptr %1590, align 2, !tbaa !44
  %1591 = ptrtoint ptr %1579 to i64
  %1592 = sub i64 %1591, %662
  %1593 = lshr exact i64 %1592, 1
  %1594 = trunc i64 %1593 to i32
  %1595 = icmp sgt i32 %1594, 0
  br i1 %1595, label %1596, label %1696

1596:                                             ; preds = %1585
  %1597 = and i64 %1593, 4294967295
  %1598 = and i64 %1593, 1
  %1599 = icmp eq i64 %1597, 1
  br i1 %1599, label %1664, label %1600

1600:                                             ; preds = %1596
  %1601 = sub nsw i64 %1597, %1598
  br label %1602

1602:                                             ; preds = %1657, %1600
  %1603 = phi i64 [ 0, %1600 ], [ %1661, %1657 ]
  %1604 = phi ptr [ %1578, %1600 ], [ %1660, %1657 ]
  %1605 = phi ptr [ %328, %1600 ], [ %1659, %1657 ]
  %1606 = phi ptr [ %374, %1600 ], [ %1658, %1657 ]
  %1607 = phi i64 [ 0, %1600 ], [ %1662, %1657 ]
  %1608 = getelementptr inbounds i16, ptr %466, i64 %1603
  %1609 = load i16, ptr %1608, align 2, !tbaa !44
  %1610 = zext i16 %1609 to i64
  %1611 = getelementptr inbounds %struct.CompAtomExt, ptr %44, i64 %1610
  %1612 = load i32, ptr %1611, align 4
  %1613 = shl i32 %1612, 2
  %1614 = ashr exact i32 %1613, 2
  %1615 = sext i32 %1614 to i64
  %1616 = getelementptr inbounds i8, ptr %954, i64 %1615
  %1617 = load i8, ptr %1616, align 1, !tbaa !57
  %1618 = sext i8 %1617 to i32
  switch i32 %1618, label %1630 [
    i32 0, label %1619
    i32 1, label %1621
    i32 2, label %1623
  ]

1619:                                             ; preds = %1602
  %1620 = getelementptr inbounds i16, ptr %1604, i64 1
  br label %1625

1621:                                             ; preds = %1602
  %1622 = getelementptr inbounds i16, ptr %1605, i64 1
  br label %1625

1623:                                             ; preds = %1602
  %1624 = getelementptr inbounds i16, ptr %1606, i64 1
  br label %1625

1625:                                             ; preds = %1619, %1621, %1623
  %1626 = phi ptr [ %1606, %1623 ], [ %1605, %1621 ], [ %1604, %1619 ]
  %1627 = phi ptr [ %1624, %1623 ], [ %1606, %1621 ], [ %1606, %1619 ]
  %1628 = phi ptr [ %1605, %1623 ], [ %1622, %1621 ], [ %1605, %1619 ]
  %1629 = phi ptr [ %1604, %1623 ], [ %1604, %1621 ], [ %1620, %1619 ]
  store i16 %1609, ptr %1626, align 2, !tbaa !44
  br label %1630

1630:                                             ; preds = %1625, %1602
  %1631 = phi ptr [ %1606, %1602 ], [ %1627, %1625 ]
  %1632 = phi ptr [ %1605, %1602 ], [ %1628, %1625 ]
  %1633 = phi ptr [ %1604, %1602 ], [ %1629, %1625 ]
  %1634 = or i64 %1603, 1
  %1635 = getelementptr inbounds i16, ptr %466, i64 %1634
  %1636 = load i16, ptr %1635, align 2, !tbaa !44
  %1637 = zext i16 %1636 to i64
  %1638 = getelementptr inbounds %struct.CompAtomExt, ptr %44, i64 %1637
  %1639 = load i32, ptr %1638, align 4
  %1640 = shl i32 %1639, 2
  %1641 = ashr exact i32 %1640, 2
  %1642 = sext i32 %1641 to i64
  %1643 = getelementptr inbounds i8, ptr %954, i64 %1642
  %1644 = load i8, ptr %1643, align 1, !tbaa !57
  %1645 = sext i8 %1644 to i32
  switch i32 %1645, label %1657 [
    i32 0, label %1650
    i32 1, label %1648
    i32 2, label %1646
  ]

1646:                                             ; preds = %1630
  %1647 = getelementptr inbounds i16, ptr %1631, i64 1
  br label %1652

1648:                                             ; preds = %1630
  %1649 = getelementptr inbounds i16, ptr %1632, i64 1
  br label %1652

1650:                                             ; preds = %1630
  %1651 = getelementptr inbounds i16, ptr %1633, i64 1
  br label %1652

1652:                                             ; preds = %1650, %1648, %1646
  %1653 = phi ptr [ %1631, %1646 ], [ %1632, %1648 ], [ %1633, %1650 ]
  %1654 = phi ptr [ %1647, %1646 ], [ %1631, %1648 ], [ %1631, %1650 ]
  %1655 = phi ptr [ %1632, %1646 ], [ %1649, %1648 ], [ %1632, %1650 ]
  %1656 = phi ptr [ %1633, %1646 ], [ %1633, %1648 ], [ %1651, %1650 ]
  store i16 %1636, ptr %1653, align 2, !tbaa !44
  br label %1657

1657:                                             ; preds = %1652, %1630
  %1658 = phi ptr [ %1631, %1630 ], [ %1654, %1652 ]
  %1659 = phi ptr [ %1632, %1630 ], [ %1655, %1652 ]
  %1660 = phi ptr [ %1633, %1630 ], [ %1656, %1652 ]
  %1661 = add nuw nsw i64 %1603, 2
  %1662 = add i64 %1607, 2
  %1663 = icmp eq i64 %1662, %1601
  br i1 %1663, label %1664, label %1602

1664:                                             ; preds = %1657, %1596
  %1665 = phi ptr [ undef, %1596 ], [ %1658, %1657 ]
  %1666 = phi ptr [ undef, %1596 ], [ %1659, %1657 ]
  %1667 = phi ptr [ undef, %1596 ], [ %1660, %1657 ]
  %1668 = phi i64 [ 0, %1596 ], [ %1661, %1657 ]
  %1669 = phi ptr [ %1578, %1596 ], [ %1660, %1657 ]
  %1670 = phi ptr [ %328, %1596 ], [ %1659, %1657 ]
  %1671 = phi ptr [ %374, %1596 ], [ %1658, %1657 ]
  %1672 = icmp eq i64 %1598, 0
  br i1 %1672, label %1696, label %1673

1673:                                             ; preds = %1664
  %1674 = getelementptr inbounds i16, ptr %466, i64 %1668
  %1675 = load i16, ptr %1674, align 2, !tbaa !44
  %1676 = zext i16 %1675 to i64
  %1677 = getelementptr inbounds %struct.CompAtomExt, ptr %44, i64 %1676
  %1678 = load i32, ptr %1677, align 4
  %1679 = shl i32 %1678, 2
  %1680 = ashr exact i32 %1679, 2
  %1681 = sext i32 %1680 to i64
  %1682 = getelementptr inbounds i8, ptr %954, i64 %1681
  %1683 = load i8, ptr %1682, align 1, !tbaa !57
  %1684 = sext i8 %1683 to i32
  switch i32 %1684, label %1696 [
    i32 0, label %1689
    i32 1, label %1687
    i32 2, label %1685
  ]

1685:                                             ; preds = %1673
  %1686 = getelementptr inbounds i16, ptr %1671, i64 1
  br label %1691

1687:                                             ; preds = %1673
  %1688 = getelementptr inbounds i16, ptr %1670, i64 1
  br label %1691

1689:                                             ; preds = %1673
  %1690 = getelementptr inbounds i16, ptr %1669, i64 1
  br label %1691

1691:                                             ; preds = %1689, %1687, %1685
  %1692 = phi ptr [ %1671, %1685 ], [ %1670, %1687 ], [ %1669, %1689 ]
  %1693 = phi ptr [ %1686, %1685 ], [ %1671, %1687 ], [ %1671, %1689 ]
  %1694 = phi ptr [ %1670, %1685 ], [ %1688, %1687 ], [ %1670, %1689 ]
  %1695 = phi ptr [ %1669, %1685 ], [ %1669, %1687 ], [ %1690, %1689 ]
  store i16 %1675, ptr %1692, align 2, !tbaa !44
  br label %1696

1696:                                             ; preds = %1664, %1691, %1673, %1585
  %1697 = phi ptr [ %374, %1585 ], [ %1665, %1664 ], [ %1671, %1673 ], [ %1693, %1691 ]
  %1698 = phi ptr [ %328, %1585 ], [ %1666, %1664 ], [ %1670, %1673 ], [ %1694, %1691 ]
  %1699 = phi ptr [ %1578, %1585 ], [ %1667, %1664 ], [ %1669, %1673 ], [ %1695, %1691 ]
  %1700 = ptrtoint ptr %1699 to i64
  %1701 = ptrtoint ptr %1184 to i64
  %1702 = sub i64 %1700, %1701
  %1703 = lshr exact i64 %1702, 1
  %1704 = trunc i64 %1703 to i32
  %1705 = icmp eq i32 %1704, 0
  %1706 = shl i64 %1702, 31
  br i1 %1705, label %1712, label %1707

1707:                                             ; preds = %1696
  %1708 = add i64 %1706, -4294967296
  %1709 = ashr i64 %1708, 32
  %1710 = getelementptr inbounds i16, ptr %1184, i64 %1709
  %1711 = load i16, ptr %1710, align 2, !tbaa !44
  br label %1712

1712:                                             ; preds = %1696, %1707
  %1713 = phi i16 [ %1711, %1707 ], [ -1, %1696 ]
  %1714 = ashr i64 %1706, 32
  %1715 = getelementptr inbounds i16, ptr %1184, i64 %1714
  store i16 %1713, ptr %1715, align 2, !tbaa !44
  %1716 = trunc i64 %1703 to i16
  %1717 = add i16 %1716, 1
  %1718 = sext i32 %1587 to i64
  %1719 = getelementptr inbounds i16, ptr %1180, i64 %1718
  store i16 %1717, ptr %1719, align 2, !tbaa !44
  %1720 = add i32 %1587, 2
  %1721 = add i32 %1720, %1704
  %1722 = ptrtoint ptr %1698 to i64
  %1723 = sub i64 %1722, %664
  %1724 = lshr exact i64 %1723, 1
  %1725 = trunc i64 %1724 to i32
  %1726 = add nsw i32 %1721, 1
  %1727 = sext i32 %1726 to i64
  %1728 = getelementptr i16, ptr %1180, i64 %1727
  %1729 = icmp sgt i32 %1725, 0
  br i1 %1729, label %1730, label %1820

1730:                                             ; preds = %1712
  %1731 = and i64 %1724, 4294967295
  %1732 = icmp ult i64 %1731, 8
  br i1 %1732, label %1776, label %1733

1733:                                             ; preds = %1730
  %1734 = shl nsw i64 %1727, 1
  %1735 = add i64 %1734, %1181
  %1736 = sub i64 %1735, %664
  %1737 = icmp ult i64 %1736, 128
  br i1 %1737, label %1776, label %1738

1738:                                             ; preds = %1733
  %1739 = icmp ult i64 %1731, 64
  br i1 %1739, label %1763, label %1740

1740:                                             ; preds = %1738
  %1741 = and i64 %1724, 63
  %1742 = sub nsw i64 %1731, %1741
  br label %1743

1743:                                             ; preds = %1743, %1740
  %1744 = phi i64 [ 0, %1740 ], [ %1757, %1743 ]
  %1745 = getelementptr inbounds i16, ptr %328, i64 %1744
  %1746 = load <16 x i16>, ptr %1745, align 2, !tbaa !44
  %1747 = getelementptr inbounds i16, ptr %1745, i64 16
  %1748 = load <16 x i16>, ptr %1747, align 2, !tbaa !44
  %1749 = getelementptr inbounds i16, ptr %1745, i64 32
  %1750 = load <16 x i16>, ptr %1749, align 2, !tbaa !44
  %1751 = getelementptr inbounds i16, ptr %1745, i64 48
  %1752 = load <16 x i16>, ptr %1751, align 2, !tbaa !44
  %1753 = getelementptr inbounds i16, ptr %1728, i64 %1744
  store <16 x i16> %1746, ptr %1753, align 2, !tbaa !44
  %1754 = getelementptr inbounds i16, ptr %1753, i64 16
  store <16 x i16> %1748, ptr %1754, align 2, !tbaa !44
  %1755 = getelementptr inbounds i16, ptr %1753, i64 32
  store <16 x i16> %1750, ptr %1755, align 2, !tbaa !44
  %1756 = getelementptr inbounds i16, ptr %1753, i64 48
  store <16 x i16> %1752, ptr %1756, align 2, !tbaa !44
  %1757 = add nuw i64 %1744, 64
  %1758 = icmp eq i64 %1757, %1742
  br i1 %1758, label %1759, label %1743, !llvm.loop !302

1759:                                             ; preds = %1743
  %1760 = icmp eq i64 %1741, 0
  br i1 %1760, label %1814, label %1761

1761:                                             ; preds = %1759
  %1762 = icmp ult i64 %1741, 8
  br i1 %1762, label %1776, label %1763

1763:                                             ; preds = %1738, %1761
  %1764 = phi i64 [ %1742, %1761 ], [ 0, %1738 ]
  %1765 = and i64 %1724, 7
  %1766 = sub nsw i64 %1731, %1765
  br label %1767

1767:                                             ; preds = %1767, %1763
  %1768 = phi i64 [ %1764, %1763 ], [ %1772, %1767 ]
  %1769 = getelementptr inbounds i16, ptr %328, i64 %1768
  %1770 = load <8 x i16>, ptr %1769, align 2, !tbaa !44
  %1771 = getelementptr inbounds i16, ptr %1728, i64 %1768
  store <8 x i16> %1770, ptr %1771, align 2, !tbaa !44
  %1772 = add nuw i64 %1768, 8
  %1773 = icmp eq i64 %1772, %1766
  br i1 %1773, label %1774, label %1767, !llvm.loop !303

1774:                                             ; preds = %1767
  %1775 = icmp eq i64 %1765, 0
  br i1 %1775, label %1814, label %1776

1776:                                             ; preds = %1733, %1730, %1761, %1774
  %1777 = phi i64 [ 0, %1730 ], [ 0, %1733 ], [ %1742, %1761 ], [ %1766, %1774 ]
  %1778 = sub i64 %1724, %1777
  %1779 = xor i64 %1777, -1
  %1780 = add nsw i64 %1731, %1779
  %1781 = and i64 %1778, 3
  %1782 = icmp eq i64 %1781, 0
  br i1 %1782, label %1792, label %1783

1783:                                             ; preds = %1776, %1783
  %1784 = phi i64 [ %1789, %1783 ], [ %1777, %1776 ]
  %1785 = phi i64 [ %1790, %1783 ], [ 0, %1776 ]
  %1786 = getelementptr inbounds i16, ptr %328, i64 %1784
  %1787 = load i16, ptr %1786, align 2, !tbaa !44
  %1788 = getelementptr inbounds i16, ptr %1728, i64 %1784
  store i16 %1787, ptr %1788, align 2, !tbaa !44
  %1789 = add nuw nsw i64 %1784, 1
  %1790 = add i64 %1785, 1
  %1791 = icmp eq i64 %1790, %1781
  br i1 %1791, label %1792, label %1783, !llvm.loop !304

1792:                                             ; preds = %1783, %1776
  %1793 = phi i64 [ %1777, %1776 ], [ %1789, %1783 ]
  %1794 = icmp ult i64 %1780, 3
  br i1 %1794, label %1814, label %1795

1795:                                             ; preds = %1792, %1795
  %1796 = phi i64 [ %1812, %1795 ], [ %1793, %1792 ]
  %1797 = getelementptr inbounds i16, ptr %328, i64 %1796
  %1798 = load i16, ptr %1797, align 2, !tbaa !44
  %1799 = getelementptr inbounds i16, ptr %1728, i64 %1796
  store i16 %1798, ptr %1799, align 2, !tbaa !44
  %1800 = add nuw nsw i64 %1796, 1
  %1801 = getelementptr inbounds i16, ptr %328, i64 %1800
  %1802 = load i16, ptr %1801, align 2, !tbaa !44
  %1803 = getelementptr inbounds i16, ptr %1728, i64 %1800
  store i16 %1802, ptr %1803, align 2, !tbaa !44
  %1804 = add nuw nsw i64 %1796, 2
  %1805 = getelementptr inbounds i16, ptr %328, i64 %1804
  %1806 = load i16, ptr %1805, align 2, !tbaa !44
  %1807 = getelementptr inbounds i16, ptr %1728, i64 %1804
  store i16 %1806, ptr %1807, align 2, !tbaa !44
  %1808 = add nuw nsw i64 %1796, 3
  %1809 = getelementptr inbounds i16, ptr %328, i64 %1808
  %1810 = load i16, ptr %1809, align 2, !tbaa !44
  %1811 = getelementptr inbounds i16, ptr %1728, i64 %1808
  store i16 %1810, ptr %1811, align 2, !tbaa !44
  %1812 = add nuw nsw i64 %1796, 4
  %1813 = icmp eq i64 %1812, %1731
  br i1 %1813, label %1814, label %1795, !llvm.loop !305

1814:                                             ; preds = %1792, %1795, %1759, %1774
  %1815 = shl i64 %1723, 31
  %1816 = add i64 %1815, -4294967296
  %1817 = ashr i64 %1816, 32
  %1818 = getelementptr inbounds i16, ptr %1728, i64 %1817
  %1819 = load i16, ptr %1818, align 2, !tbaa !44
  br label %1820

1820:                                             ; preds = %1712, %1814
  %1821 = phi i64 [ %1724, %1814 ], [ 0, %1712 ]
  %1822 = phi i16 [ %1819, %1814 ], [ -1, %1712 ]
  %1823 = and i64 %1821, 4294967295
  %1824 = getelementptr inbounds i16, ptr %1728, i64 %1823
  store i16 %1822, ptr %1824, align 2, !tbaa !44
  %1825 = trunc i64 %1724 to i16
  %1826 = add i16 %1825, 1
  %1827 = sext i32 %1721 to i64
  %1828 = getelementptr inbounds i16, ptr %1180, i64 %1827
  store i16 %1826, ptr %1828, align 2, !tbaa !44
  %1829 = add nsw i32 %1725, 2
  %1830 = add nsw i32 %1829, %1721
  %1831 = ptrtoint ptr %1697 to i64
  %1832 = sub i64 %1831, %665
  %1833 = lshr exact i64 %1832, 1
  %1834 = trunc i64 %1833 to i32
  %1835 = add nsw i32 %1830, 1
  %1836 = sext i32 %1835 to i64
  %1837 = getelementptr i16, ptr %1180, i64 %1836
  %1838 = icmp sgt i32 %1834, 0
  br i1 %1838, label %1839, label %1929

1839:                                             ; preds = %1820
  %1840 = and i64 %1833, 4294967295
  %1841 = icmp ult i64 %1840, 8
  br i1 %1841, label %1885, label %1842

1842:                                             ; preds = %1839
  %1843 = shl nsw i64 %1836, 1
  %1844 = add i64 %1843, %1181
  %1845 = sub i64 %1844, %665
  %1846 = icmp ult i64 %1845, 128
  br i1 %1846, label %1885, label %1847

1847:                                             ; preds = %1842
  %1848 = icmp ult i64 %1840, 64
  br i1 %1848, label %1872, label %1849

1849:                                             ; preds = %1847
  %1850 = and i64 %1833, 63
  %1851 = sub nsw i64 %1840, %1850
  br label %1852

1852:                                             ; preds = %1852, %1849
  %1853 = phi i64 [ 0, %1849 ], [ %1866, %1852 ]
  %1854 = getelementptr inbounds i16, ptr %374, i64 %1853
  %1855 = load <16 x i16>, ptr %1854, align 2, !tbaa !44
  %1856 = getelementptr inbounds i16, ptr %1854, i64 16
  %1857 = load <16 x i16>, ptr %1856, align 2, !tbaa !44
  %1858 = getelementptr inbounds i16, ptr %1854, i64 32
  %1859 = load <16 x i16>, ptr %1858, align 2, !tbaa !44
  %1860 = getelementptr inbounds i16, ptr %1854, i64 48
  %1861 = load <16 x i16>, ptr %1860, align 2, !tbaa !44
  %1862 = getelementptr inbounds i16, ptr %1837, i64 %1853
  store <16 x i16> %1855, ptr %1862, align 2, !tbaa !44
  %1863 = getelementptr inbounds i16, ptr %1862, i64 16
  store <16 x i16> %1857, ptr %1863, align 2, !tbaa !44
  %1864 = getelementptr inbounds i16, ptr %1862, i64 32
  store <16 x i16> %1859, ptr %1864, align 2, !tbaa !44
  %1865 = getelementptr inbounds i16, ptr %1862, i64 48
  store <16 x i16> %1861, ptr %1865, align 2, !tbaa !44
  %1866 = add nuw i64 %1853, 64
  %1867 = icmp eq i64 %1866, %1851
  br i1 %1867, label %1868, label %1852, !llvm.loop !306

1868:                                             ; preds = %1852
  %1869 = icmp eq i64 %1850, 0
  br i1 %1869, label %1923, label %1870

1870:                                             ; preds = %1868
  %1871 = icmp ult i64 %1850, 8
  br i1 %1871, label %1885, label %1872

1872:                                             ; preds = %1847, %1870
  %1873 = phi i64 [ %1851, %1870 ], [ 0, %1847 ]
  %1874 = and i64 %1833, 7
  %1875 = sub nsw i64 %1840, %1874
  br label %1876

1876:                                             ; preds = %1876, %1872
  %1877 = phi i64 [ %1873, %1872 ], [ %1881, %1876 ]
  %1878 = getelementptr inbounds i16, ptr %374, i64 %1877
  %1879 = load <8 x i16>, ptr %1878, align 2, !tbaa !44
  %1880 = getelementptr inbounds i16, ptr %1837, i64 %1877
  store <8 x i16> %1879, ptr %1880, align 2, !tbaa !44
  %1881 = add nuw i64 %1877, 8
  %1882 = icmp eq i64 %1881, %1875
  br i1 %1882, label %1883, label %1876, !llvm.loop !307

1883:                                             ; preds = %1876
  %1884 = icmp eq i64 %1874, 0
  br i1 %1884, label %1923, label %1885

1885:                                             ; preds = %1842, %1839, %1870, %1883
  %1886 = phi i64 [ 0, %1839 ], [ 0, %1842 ], [ %1851, %1870 ], [ %1875, %1883 ]
  %1887 = sub i64 %1833, %1886
  %1888 = xor i64 %1886, -1
  %1889 = add nsw i64 %1840, %1888
  %1890 = and i64 %1887, 3
  %1891 = icmp eq i64 %1890, 0
  br i1 %1891, label %1901, label %1892

1892:                                             ; preds = %1885, %1892
  %1893 = phi i64 [ %1898, %1892 ], [ %1886, %1885 ]
  %1894 = phi i64 [ %1899, %1892 ], [ 0, %1885 ]
  %1895 = getelementptr inbounds i16, ptr %374, i64 %1893
  %1896 = load i16, ptr %1895, align 2, !tbaa !44
  %1897 = getelementptr inbounds i16, ptr %1837, i64 %1893
  store i16 %1896, ptr %1897, align 2, !tbaa !44
  %1898 = add nuw nsw i64 %1893, 1
  %1899 = add i64 %1894, 1
  %1900 = icmp eq i64 %1899, %1890
  br i1 %1900, label %1901, label %1892, !llvm.loop !308

1901:                                             ; preds = %1892, %1885
  %1902 = phi i64 [ %1886, %1885 ], [ %1898, %1892 ]
  %1903 = icmp ult i64 %1889, 3
  br i1 %1903, label %1923, label %1904

1904:                                             ; preds = %1901, %1904
  %1905 = phi i64 [ %1921, %1904 ], [ %1902, %1901 ]
  %1906 = getelementptr inbounds i16, ptr %374, i64 %1905
  %1907 = load i16, ptr %1906, align 2, !tbaa !44
  %1908 = getelementptr inbounds i16, ptr %1837, i64 %1905
  store i16 %1907, ptr %1908, align 2, !tbaa !44
  %1909 = add nuw nsw i64 %1905, 1
  %1910 = getelementptr inbounds i16, ptr %374, i64 %1909
  %1911 = load i16, ptr %1910, align 2, !tbaa !44
  %1912 = getelementptr inbounds i16, ptr %1837, i64 %1909
  store i16 %1911, ptr %1912, align 2, !tbaa !44
  %1913 = add nuw nsw i64 %1905, 2
  %1914 = getelementptr inbounds i16, ptr %374, i64 %1913
  %1915 = load i16, ptr %1914, align 2, !tbaa !44
  %1916 = getelementptr inbounds i16, ptr %1837, i64 %1913
  store i16 %1915, ptr %1916, align 2, !tbaa !44
  %1917 = add nuw nsw i64 %1905, 3
  %1918 = getelementptr inbounds i16, ptr %374, i64 %1917
  %1919 = load i16, ptr %1918, align 2, !tbaa !44
  %1920 = getelementptr inbounds i16, ptr %1837, i64 %1917
  store i16 %1919, ptr %1920, align 2, !tbaa !44
  %1921 = add nuw nsw i64 %1905, 4
  %1922 = icmp eq i64 %1921, %1840
  br i1 %1922, label %1923, label %1904, !llvm.loop !309

1923:                                             ; preds = %1901, %1904, %1868, %1883
  %1924 = shl i64 %1832, 31
  %1925 = add i64 %1924, -4294967296
  %1926 = ashr i64 %1925, 32
  %1927 = getelementptr inbounds i16, ptr %1837, i64 %1926
  %1928 = load i16, ptr %1927, align 2, !tbaa !44
  br label %1929

1929:                                             ; preds = %1820, %1923
  %1930 = phi i64 [ %1833, %1923 ], [ 0, %1820 ]
  %1931 = phi i16 [ %1928, %1923 ], [ -1, %1820 ]
  %1932 = and i64 %1930, 4294967295
  %1933 = getelementptr inbounds i16, ptr %1837, i64 %1932
  store i16 %1931, ptr %1933, align 2, !tbaa !44
  %1934 = trunc i64 %1833 to i16
  %1935 = add i16 %1934, 1
  %1936 = sext i32 %1830 to i64
  %1937 = getelementptr inbounds i16, ptr %1180, i64 %1936
  store i16 %1935, ptr %1937, align 2, !tbaa !44
  %1938 = add i32 %1834, 3
  %1939 = add i32 %1938, %1830
  %1940 = select i1 %141, i32 1, i32 %1939
  store i32 %1940, ptr %13, align 8, !tbaa !17
  br label %1974

1941:                                             ; preds = %677
  %1942 = load <2 x double>, ptr %690, align 8, !tbaa !19
  %1943 = fadd <2 x double> %15, %1942
  %1944 = getelementptr inbounds %class.Vector, ptr %690, i64 0, i32 2
  %1945 = load double, ptr %1944, align 8, !tbaa !49
  %1946 = fadd double %17, %1945
  %1947 = load ptr, ptr %8, align 8, !tbaa !46
  %1948 = load i32, ptr %13, align 8, !tbaa !17
  %1949 = add i32 %1948, 1
  %1950 = sext i32 %1949 to i64
  %1951 = getelementptr inbounds i16, ptr %1947, i64 %1950
  %1952 = sext i32 %1948 to i64
  %1953 = getelementptr inbounds i16, ptr %1947, i64 %1952
  %1954 = load i16, ptr %1953, align 2, !tbaa !44
  %1955 = zext i16 %1954 to i32
  %1956 = add i32 %1949, %1955
  %1957 = add nsw i32 %1955, -1
  %1958 = sext i32 %1956 to i64
  %1959 = getelementptr inbounds i16, ptr %1947, i64 %1958
  %1960 = load i16, ptr %1959, align 2, !tbaa !44
  %1961 = zext i16 %1960 to i32
  %1962 = add nuw nsw i32 %1961, 1
  %1963 = add nsw i32 %1962, %1956
  %1964 = add nsw i32 %1961, -1
  %1965 = add i32 %1963, 1
  %1966 = sext i32 %1965 to i64
  %1967 = getelementptr inbounds i16, ptr %1947, i64 %1966
  %1968 = sext i32 %1963 to i64
  %1969 = getelementptr inbounds i16, ptr %1947, i64 %1968
  %1970 = load i16, ptr %1969, align 2, !tbaa !44
  %1971 = zext i16 %1970 to i32
  %1972 = add i32 %1965, %1971
  store i32 %1972, ptr %13, align 8, !tbaa !17
  %1973 = add nsw i32 %1971, -1
  br label %1974

1974:                                             ; preds = %1929, %1941
  %1975 = phi double [ %1946, %1941 ], [ %710, %1929 ]
  %1976 = phi i32 [ %684, %1941 ], [ %705, %1929 ]
  %1977 = phi ptr [ %1951, %1941 ], [ %1184, %1929 ]
  %1978 = phi i32 [ %1957, %1941 ], [ %1704, %1929 ]
  %1979 = phi i32 [ %1964, %1941 ], [ %1725, %1929 ]
  %1980 = phi ptr [ %1967, %1941 ], [ %1837, %1929 ]
  %1981 = phi i32 [ %1973, %1941 ], [ %1834, %1929 ]
  %1982 = phi i32 [ %683, %1941 ], [ %1145, %1929 ]
  %1983 = phi ptr [ %682, %1941 ], [ %955, %1929 ]
  %1984 = phi ptr [ %681, %1941 ], [ %956, %1929 ]
  %1985 = phi ptr [ %680, %1941 ], [ %957, %1929 ]
  %1986 = phi <2 x double> [ %1943, %1941 ], [ %707, %1929 ]
  %1987 = load i32, ptr @_ZN20ComputeNonbondedUtil17pairInteractionOnE, align 4, !tbaa !5
  %1988 = icmp eq i32 %1987, 0
  %1989 = load i32, ptr @_ZN20ComputeNonbondedUtil19pairInteractionSelfE, align 4
  %1990 = icmp ne i32 %1989, 0
  %1991 = select i1 %1988, i1 true, i1 %1990
  br i1 %1991, label %1997, label %1992

1992:                                             ; preds = %1974
  %1993 = getelementptr inbounds %struct.CompAtom, ptr %38, i64 %689, i32 3
  %1994 = load i8, ptr %1993, align 2, !tbaa !301
  %1995 = icmp eq i8 %1994, 1
  %1996 = select i1 %1995, double 1.000000e+00, double -1.000000e+00
  br label %1997

1997:                                             ; preds = %1974, %1992
  %1998 = phi double [ %1996, %1992 ], [ 0.000000e+00, %1974 ]
  %1999 = getelementptr inbounds %struct.CompAtom, ptr %38, i64 %689, i32 1
  %2000 = load float, ptr %1999, align 8, !tbaa !79
  %2001 = fpext float %2000 to double
  %2002 = fmul double %2001, 0x4074C104816F0069
  %2003 = fmul double %28, %2002
  %2004 = fmul double %24, %2003
  %2005 = getelementptr inbounds %struct.CompAtom, ptr %38, i64 %689, i32 2
  %2006 = load i16, ptr %2005, align 4, !tbaa !80
  %2007 = sext i16 %2006 to i32
  %2008 = load ptr, ptr %666, align 8, !tbaa !81
  %2009 = load i32, ptr %667, align 8, !tbaa !83
  %2010 = shl nsw i32 %2007, 1
  %2011 = mul i32 %2010, %2009
  %2012 = zext i32 %2011 to i64
  %2013 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %2008, i64 %2012
  %2014 = load double, ptr @_ZN20ComputeNonbondedUtil7cutoff2E, align 8, !tbaa !19
  %2015 = extractelement <2 x double> %1986, i64 0
  %2016 = extractelement <2 x double> %1986, i64 1
  %2017 = tail call noundef i32 @_Z22pairlist_from_pairlistddddPK8CompAtomPKtiPtdPd(double noundef %2014, double noundef %2015, double noundef %2016, double noundef %1975, ptr noundef %40, ptr noundef nonnull %1977, i32 noundef %1978, ptr noundef %93, double noundef %30, ptr noundef %139)
  %2018 = icmp sgt i32 %2017, 0
  br i1 %2018, label %2019, label %2171

2019:                                             ; preds = %1997
  %2020 = load ptr, ptr @_ZN20ComputeNonbondedUtil8r2_tableE, align 8, !tbaa !23
  %2021 = zext i32 %2017 to i64
  br label %2022

2022:                                             ; preds = %2019, %2022
  %2023 = phi i64 [ 0, %2019 ], [ %2169, %2022 ]
  %2024 = phi double [ 0.000000e+00, %2019 ], [ %2165, %2022 ]
  %2025 = phi <2 x double> [ %685, %2019 ], [ %2157, %2022 ]
  %2026 = phi <2 x double> [ %686, %2019 ], [ %2150, %2022 ]
  %2027 = phi <2 x double> [ %687, %2019 ], [ %2129, %2022 ]
  %2028 = phi <2 x double> [ %688, %2019 ], [ %2163, %2022 ]
  %2029 = phi <2 x double> [ zeroinitializer, %2019 ], [ %2159, %2022 ]
  %2030 = shl nuw nsw i64 %2023, 1
  %2031 = getelementptr inbounds i32, ptr %140, i64 %2030
  %2032 = load i32, ptr %2031, align 4, !tbaa !5
  %2033 = ashr i32 %2032, 14
  %2034 = add nsw i32 %2033, %33
  %2035 = getelementptr inbounds i16, ptr %93, i64 %2023
  %2036 = load i16, ptr %2035, align 2, !tbaa !44
  %2037 = zext i16 %2036 to i64
  %2038 = getelementptr inbounds %struct.CompAtom, ptr %40, i64 %2037
  %2039 = getelementptr inbounds double, ptr %139, i64 %2023
  %2040 = load double, ptr %2039, align 8, !tbaa !19
  %2041 = sext i32 %2034 to i64
  %2042 = getelementptr inbounds double, ptr %2020, i64 %2041
  %2043 = load double, ptr %2042, align 8, !tbaa !19
  %2044 = fsub double %2040, %2043
  %2045 = shl nsw i32 %2034, 4
  %2046 = sext i32 %2045 to i64
  %2047 = getelementptr inbounds double, ptr %27, i64 %2046
  %2048 = getelementptr inbounds %struct.CompAtom, ptr %40, i64 %2037, i32 2
  %2049 = load i16, ptr %2048, align 4, !tbaa !80
  %2050 = sext i16 %2049 to i32
  %2051 = shl nsw i32 %2050, 1
  %2052 = sext i32 %2051 to i64
  %2053 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %2013, i64 %2052
  %2054 = getelementptr inbounds %class.Vector, ptr %647, i64 %2037
  %2055 = getelementptr inbounds %struct.CompAtom, ptr %40, i64 %2037, i32 1
  %2056 = load float, ptr %2055, align 8, !tbaa !79
  %2057 = fpext float %2056 to double
  %2058 = fmul double %2004, %2057
  %2059 = load <2 x double>, ptr %2038, align 8, !tbaa !19
  %2060 = fsub <2 x double> %1986, %2059
  %2061 = getelementptr inbounds %class.Vector, ptr %2038, i64 0, i32 2
  %2062 = load double, ptr %2061, align 8, !tbaa !49
  %2063 = fsub double %1975, %2062
  %2064 = load double, ptr %2053, align 8, !tbaa !84
  %2065 = fmul double %28, %2064
  %2066 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %2013, i64 %2052, i32 1
  %2067 = load double, ptr %2066, align 8, !tbaa !86
  %2068 = load double, ptr %2047, align 8, !tbaa !19
  %2069 = getelementptr inbounds double, ptr %2047, i64 2
  %2070 = load double, ptr %2069, align 8, !tbaa !19
  %2071 = fmul double %2067, %668
  %2072 = fmul double %2071, %2070
  %2073 = tail call double @llvm.fmuladd.f64(double %2065, double %2068, double %2072)
  %2074 = getelementptr inbounds double, ptr %2047, i64 1
  %2075 = load double, ptr %2074, align 8, !tbaa !19
  %2076 = getelementptr inbounds double, ptr %2047, i64 3
  %2077 = load double, ptr %2076, align 8, !tbaa !19
  %2078 = fmul double %2071, %2077
  %2079 = tail call double @llvm.fmuladd.f64(double %2065, double %2075, double %2078)
  %2080 = getelementptr inbounds double, ptr %2047, i64 4
  %2081 = load double, ptr %2080, align 8, !tbaa !19
  %2082 = getelementptr inbounds double, ptr %2047, i64 6
  %2083 = load double, ptr %2082, align 8, !tbaa !19
  %2084 = fmul double %2071, %2083
  %2085 = tail call double @llvm.fmuladd.f64(double %2065, double %2081, double %2084)
  %2086 = getelementptr inbounds double, ptr %2047, i64 5
  %2087 = load double, ptr %2086, align 8, !tbaa !19
  %2088 = getelementptr inbounds double, ptr %2047, i64 7
  %2089 = load double, ptr %2088, align 8, !tbaa !19
  %2090 = fmul double %2071, %2089
  %2091 = tail call double @llvm.fmuladd.f64(double %2065, double %2087, double %2090)
  %2092 = tail call double @llvm.fmuladd.f64(double %2044, double %2073, double %2079)
  %2093 = tail call double @llvm.fmuladd.f64(double %2092, double %2044, double %2085)
  %2094 = fmul double %1998, %2093
  %2095 = load <2 x double>, ptr %669, align 8, !tbaa !19
  %2096 = insertelement <2 x double> poison, double %2094, i64 0
  %2097 = shufflevector <2 x double> %2096, <2 x double> poison, <2 x i32> zeroinitializer
  %2098 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2097, <2 x double> %2060, <2 x double> %2095)
  store <2 x double> %2098, ptr %669, align 8, !tbaa !19
  %2099 = load double, ptr %670, align 8, !tbaa !19
  %2100 = tail call double @llvm.fmuladd.f64(double %2094, double %2063, double %2099)
  store double %2100, ptr %670, align 8, !tbaa !19
  %2101 = getelementptr inbounds double, ptr %2047, i64 8
  %2102 = load double, ptr %2101, align 8, !tbaa !19
  %2103 = fmul double %2058, %2102
  %2104 = getelementptr inbounds double, ptr %2047, i64 9
  %2105 = load double, ptr %2104, align 8, !tbaa !19
  %2106 = fmul double %2058, %2105
  %2107 = getelementptr inbounds double, ptr %2047, i64 10
  %2108 = load double, ptr %2107, align 8, !tbaa !19
  %2109 = fmul double %2058, %2108
  %2110 = getelementptr inbounds double, ptr %2047, i64 11
  %2111 = load double, ptr %2110, align 8, !tbaa !19
  %2112 = fmul double %2058, %2111
  %2113 = insertelement <2 x double> poison, double %2044, i64 0
  %2114 = shufflevector <2 x double> %2113, <2 x double> poison, <2 x i32> zeroinitializer
  %2115 = insertelement <2 x double> poison, double %2103, i64 0
  %2116 = insertelement <2 x double> %2115, double %2073, i64 1
  %2117 = fmul <2 x double> %2114, %2116
  %2118 = insertelement <2 x double> poison, double %2106, i64 0
  %2119 = insertelement <2 x double> %2118, double %2079, i64 1
  %2120 = fmul <2 x double> %2119, <double 2.500000e-01, double 2.500000e-01>
  %2121 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2117, <2 x double> <double 0x3FC5555555555555, double 0x3FC5555555555555>, <2 x double> %2120)
  %2122 = insertelement <2 x double> poison, double %2109, i64 0
  %2123 = insertelement <2 x double> %2122, double %2085, i64 1
  %2124 = fmul <2 x double> %2123, <double 5.000000e-01, double 5.000000e-01>
  %2125 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2121, <2 x double> %2114, <2 x double> %2124)
  %2126 = insertelement <2 x double> poison, double %2112, i64 0
  %2127 = insertelement <2 x double> %2126, double %2091, i64 1
  %2128 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2125, <2 x double> %2114, <2 x double> %2127)
  %2129 = fsub <2 x double> %2027, %2128
  %2130 = tail call double @llvm.fmuladd.f64(double %2044, double %2103, double %2106)
  %2131 = tail call double @llvm.fmuladd.f64(double %2130, double %2044, double %2109)
  %2132 = fmul double %1998, %2131
  %2133 = load <2 x double>, ptr %671, align 8, !tbaa !19
  %2134 = insertelement <2 x double> poison, double %2132, i64 0
  %2135 = shufflevector <2 x double> %2134, <2 x double> poison, <2 x i32> zeroinitializer
  %2136 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2135, <2 x double> %2060, <2 x double> %2133)
  store <2 x double> %2136, ptr %671, align 8, !tbaa !19
  %2137 = load double, ptr %672, align 8, !tbaa !19
  %2138 = tail call double @llvm.fmuladd.f64(double %2132, double %2063, double %2137)
  store double %2138, ptr %672, align 8, !tbaa !19
  %2139 = fadd double %2073, %2103
  %2140 = fadd double %2079, %2106
  %2141 = fadd double %2085, %2109
  %2142 = tail call double @llvm.fmuladd.f64(double %2044, double %2139, double %2140)
  %2143 = tail call double @llvm.fmuladd.f64(double %2142, double %2044, double %2141)
  %2144 = extractelement <2 x double> %2060, i64 1
  %2145 = fmul double %2144, %2143
  %2146 = insertelement <2 x double> poison, double %2145, i64 0
  %2147 = shufflevector <2 x double> %2146, <2 x double> poison, <2 x i32> zeroinitializer
  %2148 = shufflevector <2 x double> %2060, <2 x double> poison, <2 x i32> <i32 1, i32 0>
  %2149 = insertelement <2 x double> %2148, double %2063, i64 1
  %2150 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2147, <2 x double> %2149, <2 x double> %2026)
  %2151 = insertelement <2 x double> %2148, double %2063, i64 0
  %2152 = insertelement <2 x double> poison, double %2143, i64 0
  %2153 = shufflevector <2 x double> %2152, <2 x double> poison, <2 x i32> zeroinitializer
  %2154 = fmul <2 x double> %2151, %2153
  %2155 = shufflevector <2 x double> %2154, <2 x double> poison, <2 x i32> <i32 1, i32 poison>
  %2156 = shufflevector <2 x double> %2154, <2 x double> poison, <2 x i32> <i32 1, i32 1>
  %2157 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2156, <2 x double> %2060, <2 x double> %2025)
  %2158 = insertelement <2 x double> %2155, double %2145, i64 1
  %2159 = fadd <2 x double> %2029, %2158
  %2160 = load <2 x double>, ptr %2054, align 8, !tbaa !19
  %2161 = fsub <2 x double> %2160, %2158
  store <2 x double> %2161, ptr %2054, align 8, !tbaa !19
  %2162 = shufflevector <2 x double> %2151, <2 x double> poison, <2 x i32> zeroinitializer
  %2163 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2154, <2 x double> %2162, <2 x double> %2028)
  %2164 = extractelement <2 x double> %2154, i64 0
  %2165 = fadd double %2024, %2164
  %2166 = getelementptr inbounds %class.Vector, ptr %647, i64 %2037, i32 2
  %2167 = load double, ptr %2166, align 8, !tbaa !87
  %2168 = fsub double %2167, %2164
  store double %2168, ptr %2166, align 8, !tbaa !87
  %2169 = add nuw nsw i64 %2023, 1
  %2170 = icmp eq i64 %2169, %2021
  br i1 %2170, label %2171, label %2022

2171:                                             ; preds = %2022, %1997
  %2172 = phi double [ 0.000000e+00, %1997 ], [ %2165, %2022 ]
  %2173 = phi <2 x double> [ %685, %1997 ], [ %2157, %2022 ]
  %2174 = phi <2 x double> [ %686, %1997 ], [ %2150, %2022 ]
  %2175 = phi <2 x double> [ %687, %1997 ], [ %2129, %2022 ]
  %2176 = phi <2 x double> [ %688, %1997 ], [ %2163, %2022 ]
  %2177 = phi <2 x double> [ zeroinitializer, %1997 ], [ %2159, %2022 ]
  %2178 = load double, ptr @_ZN20ComputeNonbondedUtil7cutoff2E, align 8, !tbaa !19
  %2179 = tail call noundef i32 @_Z22pairlist_from_pairlistddddPK8CompAtomPKtiPtdPd(double noundef %2178, double noundef %2015, double noundef %2016, double noundef %1975, ptr noundef %40, ptr noundef %1980, i32 noundef %1981, ptr noundef %93, double noundef %30, ptr noundef %139)
  %2180 = icmp sgt i32 %2179, 0
  br i1 %2180, label %2181, label %2335

2181:                                             ; preds = %2171
  %2182 = load ptr, ptr @_ZN20ComputeNonbondedUtil8r2_tableE, align 8, !tbaa !23
  %2183 = zext i32 %2179 to i64
  br label %2184

2184:                                             ; preds = %2181, %2184
  %2185 = phi i64 [ 0, %2181 ], [ %2333, %2184 ]
  %2186 = phi double [ %2172, %2181 ], [ %2329, %2184 ]
  %2187 = phi <2 x double> [ %2173, %2181 ], [ %2321, %2184 ]
  %2188 = phi <2 x double> [ %2174, %2181 ], [ %2314, %2184 ]
  %2189 = phi <2 x double> [ %2175, %2181 ], [ %2293, %2184 ]
  %2190 = phi <2 x double> [ %2176, %2181 ], [ %2327, %2184 ]
  %2191 = phi <2 x double> [ %2177, %2181 ], [ %2323, %2184 ]
  %2192 = shl nuw nsw i64 %2185, 1
  %2193 = getelementptr inbounds i32, ptr %140, i64 %2192
  %2194 = load i32, ptr %2193, align 4, !tbaa !5
  %2195 = ashr i32 %2194, 14
  %2196 = add nsw i32 %2195, %33
  %2197 = getelementptr inbounds i16, ptr %93, i64 %2185
  %2198 = load i16, ptr %2197, align 2, !tbaa !44
  %2199 = zext i16 %2198 to i64
  %2200 = getelementptr inbounds %struct.CompAtom, ptr %40, i64 %2199
  %2201 = getelementptr inbounds double, ptr %139, i64 %2185
  %2202 = load double, ptr %2201, align 8, !tbaa !19
  %2203 = sext i32 %2196 to i64
  %2204 = getelementptr inbounds double, ptr %2182, i64 %2203
  %2205 = load double, ptr %2204, align 8, !tbaa !19
  %2206 = fsub double %2202, %2205
  %2207 = shl nsw i32 %2196, 4
  %2208 = sext i32 %2207 to i64
  %2209 = getelementptr inbounds double, ptr %27, i64 %2208
  %2210 = getelementptr inbounds %struct.CompAtom, ptr %40, i64 %2199, i32 2
  %2211 = load i16, ptr %2210, align 4, !tbaa !80
  %2212 = sext i16 %2211 to i32
  %2213 = shl nsw i32 %2212, 1
  %2214 = sext i32 %2213 to i64
  %2215 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %2013, i64 %2214
  %2216 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %2215, i64 1
  %2217 = getelementptr inbounds %class.Vector, ptr %647, i64 %2199
  %2218 = getelementptr inbounds %struct.CompAtom, ptr %40, i64 %2199, i32 1
  %2219 = load float, ptr %2218, align 8, !tbaa !79
  %2220 = fpext float %2219 to double
  %2221 = fmul double %2004, %2220
  %2222 = load <2 x double>, ptr %2200, align 8, !tbaa !19
  %2223 = fsub <2 x double> %1986, %2222
  %2224 = getelementptr inbounds %class.Vector, ptr %2200, i64 0, i32 2
  %2225 = load double, ptr %2224, align 8, !tbaa !49
  %2226 = fsub double %1975, %2225
  %2227 = load double, ptr %2216, align 8, !tbaa !84
  %2228 = fmul double %28, %2227
  %2229 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %2215, i64 1, i32 1
  %2230 = load double, ptr %2229, align 8, !tbaa !86
  %2231 = load double, ptr %2209, align 8, !tbaa !19
  %2232 = getelementptr inbounds double, ptr %2209, i64 2
  %2233 = load double, ptr %2232, align 8, !tbaa !19
  %2234 = fmul double %2230, %668
  %2235 = fmul double %2234, %2233
  %2236 = tail call double @llvm.fmuladd.f64(double %2228, double %2231, double %2235)
  %2237 = getelementptr inbounds double, ptr %2209, i64 1
  %2238 = load double, ptr %2237, align 8, !tbaa !19
  %2239 = getelementptr inbounds double, ptr %2209, i64 3
  %2240 = load double, ptr %2239, align 8, !tbaa !19
  %2241 = fmul double %2234, %2240
  %2242 = tail call double @llvm.fmuladd.f64(double %2228, double %2238, double %2241)
  %2243 = getelementptr inbounds double, ptr %2209, i64 4
  %2244 = load double, ptr %2243, align 8, !tbaa !19
  %2245 = getelementptr inbounds double, ptr %2209, i64 6
  %2246 = load double, ptr %2245, align 8, !tbaa !19
  %2247 = fmul double %2234, %2246
  %2248 = tail call double @llvm.fmuladd.f64(double %2228, double %2244, double %2247)
  %2249 = getelementptr inbounds double, ptr %2209, i64 5
  %2250 = load double, ptr %2249, align 8, !tbaa !19
  %2251 = getelementptr inbounds double, ptr %2209, i64 7
  %2252 = load double, ptr %2251, align 8, !tbaa !19
  %2253 = fmul double %2234, %2252
  %2254 = tail call double @llvm.fmuladd.f64(double %2228, double %2250, double %2253)
  %2255 = tail call double @llvm.fmuladd.f64(double %2206, double %2236, double %2242)
  %2256 = tail call double @llvm.fmuladd.f64(double %2255, double %2206, double %2248)
  %2257 = fmul double %1998, %2256
  %2258 = load <2 x double>, ptr %669, align 8, !tbaa !19
  %2259 = insertelement <2 x double> poison, double %2257, i64 0
  %2260 = shufflevector <2 x double> %2259, <2 x double> poison, <2 x i32> zeroinitializer
  %2261 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2260, <2 x double> %2223, <2 x double> %2258)
  store <2 x double> %2261, ptr %669, align 8, !tbaa !19
  %2262 = load double, ptr %670, align 8, !tbaa !19
  %2263 = tail call double @llvm.fmuladd.f64(double %2257, double %2226, double %2262)
  store double %2263, ptr %670, align 8, !tbaa !19
  %2264 = fmul double %674, %2221
  %2265 = getelementptr inbounds double, ptr %2209, i64 8
  %2266 = load double, ptr %2265, align 8, !tbaa !19
  %2267 = fmul double %2264, %2266
  %2268 = getelementptr inbounds double, ptr %2209, i64 9
  %2269 = load double, ptr %2268, align 8, !tbaa !19
  %2270 = fmul double %2264, %2269
  %2271 = getelementptr inbounds double, ptr %2209, i64 10
  %2272 = load double, ptr %2271, align 8, !tbaa !19
  %2273 = fmul double %2264, %2272
  %2274 = getelementptr inbounds double, ptr %2209, i64 11
  %2275 = load double, ptr %2274, align 8, !tbaa !19
  %2276 = fmul double %2264, %2275
  %2277 = insertelement <2 x double> poison, double %2206, i64 0
  %2278 = shufflevector <2 x double> %2277, <2 x double> poison, <2 x i32> zeroinitializer
  %2279 = insertelement <2 x double> poison, double %2267, i64 0
  %2280 = insertelement <2 x double> %2279, double %2236, i64 1
  %2281 = fmul <2 x double> %2278, %2280
  %2282 = insertelement <2 x double> poison, double %2270, i64 0
  %2283 = insertelement <2 x double> %2282, double %2242, i64 1
  %2284 = fmul <2 x double> %2283, <double 2.500000e-01, double 2.500000e-01>
  %2285 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2281, <2 x double> <double 0x3FC5555555555555, double 0x3FC5555555555555>, <2 x double> %2284)
  %2286 = insertelement <2 x double> poison, double %2273, i64 0
  %2287 = insertelement <2 x double> %2286, double %2248, i64 1
  %2288 = fmul <2 x double> %2287, <double 5.000000e-01, double 5.000000e-01>
  %2289 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2285, <2 x double> %2278, <2 x double> %2288)
  %2290 = insertelement <2 x double> poison, double %2276, i64 0
  %2291 = insertelement <2 x double> %2290, double %2254, i64 1
  %2292 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2289, <2 x double> %2278, <2 x double> %2291)
  %2293 = fsub <2 x double> %2189, %2292
  %2294 = tail call double @llvm.fmuladd.f64(double %2206, double %2267, double %2270)
  %2295 = tail call double @llvm.fmuladd.f64(double %2294, double %2206, double %2273)
  %2296 = fmul double %1998, %2295
  %2297 = load <2 x double>, ptr %671, align 8, !tbaa !19
  %2298 = insertelement <2 x double> poison, double %2296, i64 0
  %2299 = shufflevector <2 x double> %2298, <2 x double> poison, <2 x i32> zeroinitializer
  %2300 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2299, <2 x double> %2223, <2 x double> %2297)
  store <2 x double> %2300, ptr %671, align 8, !tbaa !19
  %2301 = load double, ptr %672, align 8, !tbaa !19
  %2302 = tail call double @llvm.fmuladd.f64(double %2296, double %2226, double %2301)
  store double %2302, ptr %672, align 8, !tbaa !19
  %2303 = fadd double %2236, %2267
  %2304 = fadd double %2242, %2270
  %2305 = fadd double %2248, %2273
  %2306 = tail call double @llvm.fmuladd.f64(double %2206, double %2303, double %2304)
  %2307 = tail call double @llvm.fmuladd.f64(double %2306, double %2206, double %2305)
  %2308 = extractelement <2 x double> %2223, i64 1
  %2309 = fmul double %2308, %2307
  %2310 = insertelement <2 x double> poison, double %2309, i64 0
  %2311 = shufflevector <2 x double> %2310, <2 x double> poison, <2 x i32> zeroinitializer
  %2312 = shufflevector <2 x double> %2223, <2 x double> poison, <2 x i32> <i32 1, i32 0>
  %2313 = insertelement <2 x double> %2312, double %2226, i64 1
  %2314 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2311, <2 x double> %2313, <2 x double> %2188)
  %2315 = insertelement <2 x double> %2312, double %2226, i64 0
  %2316 = insertelement <2 x double> poison, double %2307, i64 0
  %2317 = shufflevector <2 x double> %2316, <2 x double> poison, <2 x i32> zeroinitializer
  %2318 = fmul <2 x double> %2315, %2317
  %2319 = shufflevector <2 x double> %2318, <2 x double> poison, <2 x i32> <i32 1, i32 poison>
  %2320 = shufflevector <2 x double> %2318, <2 x double> poison, <2 x i32> <i32 1, i32 1>
  %2321 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2320, <2 x double> %2223, <2 x double> %2187)
  %2322 = insertelement <2 x double> %2319, double %2309, i64 1
  %2323 = fadd <2 x double> %2191, %2322
  %2324 = load <2 x double>, ptr %2217, align 8, !tbaa !19
  %2325 = fsub <2 x double> %2324, %2322
  store <2 x double> %2325, ptr %2217, align 8, !tbaa !19
  %2326 = shufflevector <2 x double> %2315, <2 x double> poison, <2 x i32> zeroinitializer
  %2327 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2318, <2 x double> %2326, <2 x double> %2190)
  %2328 = extractelement <2 x double> %2318, i64 0
  %2329 = fadd double %2186, %2328
  %2330 = getelementptr inbounds %class.Vector, ptr %647, i64 %2199, i32 2
  %2331 = load double, ptr %2330, align 8, !tbaa !87
  %2332 = fsub double %2331, %2328
  store double %2332, ptr %2330, align 8, !tbaa !87
  %2333 = add nuw nsw i64 %2185, 1
  %2334 = icmp eq i64 %2333, %2183
  br i1 %2334, label %2335, label %2184

2335:                                             ; preds = %2184, %2171
  %2336 = phi double [ %2172, %2171 ], [ %2329, %2184 ]
  %2337 = phi <2 x double> [ %2173, %2171 ], [ %2321, %2184 ]
  %2338 = phi <2 x double> [ %2174, %2171 ], [ %2314, %2184 ]
  %2339 = phi <2 x double> [ %2175, %2171 ], [ %2293, %2184 ]
  %2340 = phi <2 x double> [ %2176, %2171 ], [ %2327, %2184 ]
  %2341 = phi <2 x double> [ %2177, %2171 ], [ %2323, %2184 ]
  %2342 = add i32 %1979, %678
  %2343 = add i32 %2342, %2179
  %2344 = getelementptr inbounds %class.Vector, ptr %648, i64 %689
  %2345 = load <2 x double>, ptr %2344, align 8, !tbaa !19
  %2346 = fadd <2 x double> %2341, %2345
  store <2 x double> %2346, ptr %2344, align 8, !tbaa !19
  %2347 = getelementptr inbounds %class.Vector, ptr %648, i64 %689, i32 2
  %2348 = load double, ptr %2347, align 8, !tbaa !87
  %2349 = fadd double %2336, %2348
  store double %2349, ptr %2347, align 8, !tbaa !87
  br i1 %143, label %2352, label %2350

2350:                                             ; preds = %2335
  %2351 = add nsw i32 %679, 1
  br label %2360

2352:                                             ; preds = %2335
  %2353 = load ptr, ptr %8, align 8, !tbaa !46
  %2354 = load i32, ptr %13, align 8, !tbaa !17
  %2355 = add nsw i32 %2354, 1
  store i32 %2355, ptr %13, align 8, !tbaa !17
  %2356 = sext i32 %2354 to i64
  %2357 = getelementptr inbounds i16, ptr %2353, i64 %2356
  %2358 = load i16, ptr %2357, align 2, !tbaa !44
  %2359 = zext i16 %2358 to i32
  br label %2360

2360:                                             ; preds = %1244, %1203, %1131, %1583, %2352, %2350, %701
  %2361 = phi i32 [ %1976, %2352 ], [ %1976, %2350 ], [ %702, %701 ], [ %705, %1583 ], [ %705, %1131 ], [ %705, %1203 ], [ %705, %1244 ]
  %2362 = phi i32 [ %1982, %2352 ], [ %1982, %2350 ], [ %683, %701 ], [ %1145, %1583 ], [ 0, %1131 ], [ %1145, %1203 ], [ %1145, %1244 ]
  %2363 = phi ptr [ %1983, %2352 ], [ %1983, %2350 ], [ %682, %701 ], [ %955, %1583 ], [ %955, %1131 ], [ %955, %1203 ], [ %955, %1244 ]
  %2364 = phi ptr [ %1984, %2352 ], [ %1984, %2350 ], [ %681, %701 ], [ %956, %1583 ], [ %956, %1131 ], [ %956, %1203 ], [ %956, %1244 ]
  %2365 = phi ptr [ %1985, %2352 ], [ %1985, %2350 ], [ %680, %701 ], [ %957, %1583 ], [ %957, %1131 ], [ %957, %1203 ], [ %957, %1244 ]
  %2366 = phi i32 [ %2359, %2352 ], [ %2351, %2350 ], [ %703, %701 ], [ %1584, %1583 ], [ %1135, %1131 ], [ %1204, %1203 ], [ %1245, %1244 ]
  %2367 = phi i32 [ %2343, %2352 ], [ %2343, %2350 ], [ %678, %701 ], [ %678, %1583 ], [ %678, %1131 ], [ %678, %1203 ], [ %678, %1244 ]
  %2368 = phi <2 x double> [ %2337, %2352 ], [ %2337, %2350 ], [ %685, %701 ], [ %685, %1583 ], [ %685, %1131 ], [ %685, %1203 ], [ %685, %1244 ]
  %2369 = phi <2 x double> [ %2338, %2352 ], [ %2338, %2350 ], [ %686, %701 ], [ %686, %1583 ], [ %686, %1131 ], [ %686, %1203 ], [ %686, %1244 ]
  %2370 = phi <2 x double> [ %2339, %2352 ], [ %2339, %2350 ], [ %687, %701 ], [ %687, %1583 ], [ %687, %1131 ], [ %687, %1203 ], [ %687, %1244 ]
  %2371 = phi <2 x double> [ %2340, %2352 ], [ %2340, %2350 ], [ %688, %701 ], [ %688, %1583 ], [ %688, %1131 ], [ %688, %1203 ], [ %688, %1244 ]
  %2372 = icmp slt i32 %2366, %35
  br i1 %2372, label %677, label %2373

2373:                                             ; preds = %2360, %644
  %2374 = phi ptr [ null, %644 ], [ %2365, %2360 ]
  %2375 = phi i32 [ %651, %644 ], [ %2366, %2360 ]
  %2376 = phi i32 [ 0, %644 ], [ %2367, %2360 ]
  %2377 = phi <2 x double> [ zeroinitializer, %644 ], [ %2368, %2360 ]
  %2378 = phi <2 x double> [ zeroinitializer, %644 ], [ %2369, %2360 ]
  %2379 = phi <2 x double> [ zeroinitializer, %644 ], [ %2370, %2360 ]
  %2380 = phi <2 x double> [ zeroinitializer, %644 ], [ %2371, %2360 ]
  br i1 %141, label %2388, label %2381

2381:                                             ; preds = %2373
  %2382 = trunc i32 %2375 to i16
  %2383 = load ptr, ptr %8, align 8, !tbaa !46
  %2384 = load i32, ptr %13, align 8, !tbaa !17
  %2385 = add nsw i32 %2384, -1
  %2386 = sext i32 %2385 to i64
  %2387 = getelementptr inbounds i16, ptr %2383, i64 %2386
  store i16 %2382, ptr %2387, align 2, !tbaa !44
  br label %2388

2388:                                             ; preds = %2381, %2373
  %2389 = sitofp i32 %2376 to double
  %2390 = getelementptr inbounds double, ptr %6, i64 22
  %2391 = load double, ptr %2390, align 8, !tbaa !19
  %2392 = fadd double %2391, %2389
  store double %2392, ptr %2390, align 8, !tbaa !19
  %2393 = getelementptr inbounds double, ptr %6, i64 2
  %2394 = load double, ptr %2393, align 8, !tbaa !19
  %2395 = extractelement <2 x double> %2379, i64 1
  %2396 = fadd double %2395, %2394
  store double %2396, ptr %2393, align 8, !tbaa !19
  %2397 = load double, ptr %6, align 8, !tbaa !19
  %2398 = extractelement <2 x double> %2379, i64 0
  %2399 = fadd double %2398, %2397
  store double %2399, ptr %6, align 8, !tbaa !19
  %2400 = getelementptr inbounds double, ptr %6, i64 3
  %2401 = load <4 x double>, ptr %2400, align 8, !tbaa !19
  %2402 = shufflevector <2 x double> %2377, <2 x double> %2380, <4 x i32> <i32 0, i32 1, i32 3, i32 poison>
  %2403 = shufflevector <4 x double> %2402, <4 x double> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 1>
  %2404 = fadd <4 x double> %2403, %2401
  store <4 x double> %2404, ptr %2400, align 8, !tbaa !19
  %2405 = getelementptr inbounds double, ptr %6, i64 7
  %2406 = load <4 x double>, ptr %2405, align 8, !tbaa !19
  %2407 = shufflevector <2 x double> %2378, <2 x double> %2380, <4 x i32> <i32 0, i32 1, i32 3, i32 poison>
  %2408 = shufflevector <4 x double> %2407, <4 x double> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 1>
  %2409 = fadd <4 x double> %2408, %2406
  store <4 x double> %2409, ptr %2405, align 8, !tbaa !19
  %2410 = getelementptr inbounds double, ptr %6, i64 11
  %2411 = load double, ptr %2410, align 8, !tbaa !19
  %2412 = extractelement <2 x double> %2380, i64 0
  %2413 = fadd double %2412, %2411
  store double %2413, ptr %2410, align 8, !tbaa !19
  %2414 = icmp eq ptr %2374, null
  br i1 %2414, label %2416, label %2415

2415:                                             ; preds = %2388
  tail call void @_ZdaPv(ptr noundef nonnull %2374) #10
  br label %2416

2416:                                             ; preds = %2388, %2415, %1
  ret void
}

; Function Attrs: sspstrong uwtable
define dso_local void @_ZN20ComputeNonbondedUtil30calc_pair_energy_fullelect_intEP9nonbonded(ptr nocapture noundef readonly %0) local_unnamed_addr #0 align 2 {
  %2 = load i32, ptr @_ZN20ComputeNonbondedUtil8commOnlyE, align 4, !tbaa !5
  %3 = icmp eq i32 %2, 0
  br i1 %3, label %4, label %2709

4:                                                ; preds = %1
  %5 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 7
  %6 = load ptr, ptr %5, align 8, !tbaa !9
  %7 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 10
  %8 = load ptr, ptr %7, align 8, !tbaa !14
  %9 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 11
  %10 = load i32, ptr %9, align 8, !tbaa !15
  %11 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 12
  %12 = load i32, ptr %11, align 4, !tbaa !16
  %13 = getelementptr inbounds %class.Pairlists, ptr %8, i64 0, i32 1
  store i32 0, ptr %13, align 8, !tbaa !17
  %14 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 6
  %15 = load <2 x double>, ptr %14, align 8, !tbaa !19
  %16 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 6, i32 2
  %17 = load double, ptr %16, align 8, !tbaa !20
  %18 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 13
  %19 = load double, ptr %18, align 8, !tbaa !21
  %20 = fmul double %19, %19
  %21 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 14
  %22 = load double, ptr %21, align 8, !tbaa !22
  %23 = fmul double %22, %22
  %24 = load double, ptr @_ZN20ComputeNonbondedUtil12dielectric_1E, align 8, !tbaa !19
  %25 = load ptr, ptr @_ZN20ComputeNonbondedUtil7ljTableE, align 8, !tbaa !23
  %26 = load ptr, ptr @_ZN20ComputeNonbondedUtil3molE, align 8, !tbaa !23
  %27 = load ptr, ptr @_ZN20ComputeNonbondedUtil11table_shortE, align 8, !tbaa !23
  %28 = load ptr, ptr @_ZN20ComputeNonbondedUtil10slow_tableE, align 8, !tbaa !23
  %29 = load double, ptr @_ZN20ComputeNonbondedUtil7scalingE, align 8, !tbaa !19
  %30 = load double, ptr @_ZN20ComputeNonbondedUtil7scale14E, align 8, !tbaa !19
  %31 = fsub double 1.000000e+00, %30
  %32 = load double, ptr @_ZN20ComputeNonbondedUtil8r2_deltaE, align 8, !tbaa !19
  %33 = load i32, ptr @_ZN20ComputeNonbondedUtil12r2_delta_expE, align 4, !tbaa !5
  %34 = shl i32 %33, 6
  %35 = add i32 %34, -65472
  %36 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 5
  %37 = load i32, ptr %36, align 8, !tbaa !5
  %38 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 5, i64 1
  %39 = load i32, ptr %38, align 4, !tbaa !5
  %40 = load ptr, ptr %0, align 8, !tbaa !23
  %41 = getelementptr inbounds [2 x ptr], ptr %0, i64 0, i64 1
  %42 = load ptr, ptr %41, align 8, !tbaa !23
  %43 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 1
  %44 = load ptr, ptr %43, align 8, !tbaa !23
  %45 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 1, i64 1
  %46 = load ptr, ptr %45, align 8, !tbaa !23
  %47 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 9
  %48 = load ptr, ptr %47, align 8, !tbaa !24
  %49 = add nsw i32 %39, 5
  %50 = getelementptr inbounds %class.ResizeArray, ptr %48, i64 0, i32 1
  %51 = load ptr, ptr %50, align 8, !tbaa !25
  %52 = getelementptr inbounds %class.ResizeArrayRaw, ptr %51, i64 0, i32 2
  %53 = load i32, ptr %52, align 8, !tbaa !27
  %54 = icmp slt i32 %53, %49
  br i1 %54, label %55, label %93

55:                                               ; preds = %4
  %56 = getelementptr inbounds %class.ResizeArrayRaw, ptr %51, i64 0, i32 3
  %57 = load i32, ptr %56, align 4, !tbaa !30
  %58 = icmp slt i32 %57, %49
  br i1 %58, label %59, label %93

59:                                               ; preds = %55
  %60 = sitofp i32 %57 to float
  %61 = getelementptr inbounds %class.ResizeArrayRaw, ptr %51, i64 0, i32 5
  %62 = load float, ptr %61, align 4, !tbaa !31
  %63 = fmul float %62, %60
  %64 = fptosi float %63 to i32
  %65 = tail call i32 @llvm.smax.i32(i32 %64, i32 %49)
  %66 = sub nsw i32 %65, %57
  %67 = getelementptr inbounds %class.ResizeArrayRaw, ptr %51, i64 0, i32 6
  %68 = load i32, ptr %67, align 8, !tbaa !32
  %69 = icmp slt i32 %66, %68
  %70 = add nsw i32 %68, %57
  %71 = select i1 %69, i32 %70, i32 %65
  %72 = sext i32 %71 to i64
  %73 = shl nsw i64 %72, 1
  %74 = add nsw i64 %73, 31
  %75 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %74) #9
  %76 = getelementptr inbounds i8, ptr %75, i64 31
  %77 = ptrtoint ptr %76 to i64
  %78 = and i64 %77, 31
  %79 = sub nsw i64 0, %78
  %80 = getelementptr inbounds i8, ptr %76, i64 %79
  %81 = load ptr, ptr %51, align 8, !tbaa !33
  %82 = sext i32 %53 to i64
  %83 = shl nsw i64 %82, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %80, ptr align 1 %81, i64 %83, i1 false)
  %84 = icmp eq i32 %57, 0
  br i1 %84, label %90, label %85

85:                                               ; preds = %59
  %86 = getelementptr inbounds %class.ResizeArrayRaw, ptr %51, i64 0, i32 1
  %87 = load ptr, ptr %86, align 8, !tbaa !34
  %88 = icmp eq ptr %87, null
  br i1 %88, label %90, label %89

89:                                               ; preds = %85
  tail call void @_ZdaPv(ptr noundef nonnull %87) #10
  br label %90

90:                                               ; preds = %89, %85, %59
  %91 = getelementptr inbounds %class.ResizeArrayRaw, ptr %51, i64 0, i32 1
  store ptr %75, ptr %91, align 8, !tbaa !34
  store ptr %80, ptr %51, align 8, !tbaa !33
  store i32 %71, ptr %56, align 4, !tbaa !30
  %92 = load ptr, ptr %50, align 8, !tbaa !25
  br label %93

93:                                               ; preds = %4, %55, %90
  %94 = phi ptr [ %51, %4 ], [ %51, %55 ], [ %92, %90 ]
  store i32 %49, ptr %52, align 8, !tbaa !27
  %95 = load ptr, ptr %94, align 8, !tbaa !33
  %96 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %48, i64 0, i32 1, i32 1
  %97 = load ptr, ptr %96, align 8, !tbaa !35
  %98 = getelementptr inbounds %class.ResizeArrayRaw.23, ptr %97, i64 0, i32 2
  %99 = load i32, ptr %98, align 8, !tbaa !37
  %100 = icmp slt i32 %99, %49
  br i1 %100, label %101, label %139

101:                                              ; preds = %93
  %102 = getelementptr inbounds %class.ResizeArrayRaw.23, ptr %97, i64 0, i32 3
  %103 = load i32, ptr %102, align 4, !tbaa !39
  %104 = icmp slt i32 %103, %49
  br i1 %104, label %105, label %139

105:                                              ; preds = %101
  %106 = sitofp i32 %103 to float
  %107 = getelementptr inbounds %class.ResizeArrayRaw.23, ptr %97, i64 0, i32 5
  %108 = load float, ptr %107, align 4, !tbaa !40
  %109 = fmul float %108, %106
  %110 = fptosi float %109 to i32
  %111 = tail call i32 @llvm.smax.i32(i32 %110, i32 %49)
  %112 = sub nsw i32 %111, %103
  %113 = getelementptr inbounds %class.ResizeArrayRaw.23, ptr %97, i64 0, i32 6
  %114 = load i32, ptr %113, align 8, !tbaa !41
  %115 = icmp slt i32 %112, %114
  %116 = add nsw i32 %114, %103
  %117 = select i1 %115, i32 %116, i32 %111
  %118 = sext i32 %117 to i64
  %119 = shl nsw i64 %118, 3
  %120 = add nsw i64 %119, 31
  %121 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %120) #9
  %122 = getelementptr inbounds i8, ptr %121, i64 31
  %123 = ptrtoint ptr %122 to i64
  %124 = and i64 %123, 31
  %125 = sub nsw i64 0, %124
  %126 = getelementptr inbounds i8, ptr %122, i64 %125
  %127 = load ptr, ptr %97, align 8, !tbaa !42
  %128 = sext i32 %99 to i64
  %129 = shl nsw i64 %128, 3
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %126, ptr align 1 %127, i64 %129, i1 false)
  %130 = icmp eq i32 %103, 0
  br i1 %130, label %136, label %131

131:                                              ; preds = %105
  %132 = getelementptr inbounds %class.ResizeArrayRaw.23, ptr %97, i64 0, i32 1
  %133 = load ptr, ptr %132, align 8, !tbaa !43
  %134 = icmp eq ptr %133, null
  br i1 %134, label %136, label %135

135:                                              ; preds = %131
  tail call void @_ZdaPv(ptr noundef nonnull %133) #10
  br label %136

136:                                              ; preds = %135, %131, %105
  %137 = getelementptr inbounds %class.ResizeArrayRaw.23, ptr %97, i64 0, i32 1
  store ptr %121, ptr %137, align 8, !tbaa !43
  store ptr %126, ptr %97, align 8, !tbaa !42
  store i32 %117, ptr %102, align 4, !tbaa !39
  %138 = load ptr, ptr %96, align 8, !tbaa !35
  br label %139

139:                                              ; preds = %93, %101, %136
  %140 = phi ptr [ %97, %93 ], [ %97, %101 ], [ %138, %136 ]
  store i32 %49, ptr %98, align 8, !tbaa !37
  %141 = load ptr, ptr %140, align 8, !tbaa !42
  %142 = getelementptr inbounds i32, ptr %141, i64 1
  %143 = icmp eq i32 %10, 0
  %144 = icmp ne i32 %12, 0
  %145 = select i1 %143, i1 %144, i1 false
  %146 = select i1 %145, i32 0, i32 %49
  %147 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %48, i64 0, i32 2, i32 1
  %148 = load ptr, ptr %147, align 8, !tbaa !25
  %149 = getelementptr inbounds %class.ResizeArrayRaw, ptr %148, i64 0, i32 2
  %150 = load i32, ptr %149, align 8, !tbaa !27
  %151 = icmp slt i32 %150, %146
  br i1 %151, label %152, label %190

152:                                              ; preds = %139
  %153 = getelementptr inbounds %class.ResizeArrayRaw, ptr %148, i64 0, i32 3
  %154 = load i32, ptr %153, align 4, !tbaa !30
  %155 = icmp slt i32 %154, %146
  br i1 %155, label %156, label %190

156:                                              ; preds = %152
  %157 = sitofp i32 %154 to float
  %158 = getelementptr inbounds %class.ResizeArrayRaw, ptr %148, i64 0, i32 5
  %159 = load float, ptr %158, align 4, !tbaa !31
  %160 = fmul float %159, %157
  %161 = fptosi float %160 to i32
  %162 = tail call i32 @llvm.smax.i32(i32 %161, i32 %146)
  %163 = sub nsw i32 %162, %154
  %164 = getelementptr inbounds %class.ResizeArrayRaw, ptr %148, i64 0, i32 6
  %165 = load i32, ptr %164, align 8, !tbaa !32
  %166 = icmp slt i32 %163, %165
  %167 = add nsw i32 %165, %154
  %168 = select i1 %166, i32 %167, i32 %162
  %169 = sext i32 %168 to i64
  %170 = shl nsw i64 %169, 1
  %171 = add nsw i64 %170, 31
  %172 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %171) #9
  %173 = getelementptr inbounds i8, ptr %172, i64 31
  %174 = ptrtoint ptr %173 to i64
  %175 = and i64 %174, 31
  %176 = sub nsw i64 0, %175
  %177 = getelementptr inbounds i8, ptr %173, i64 %176
  %178 = load ptr, ptr %148, align 8, !tbaa !33
  %179 = sext i32 %150 to i64
  %180 = shl nsw i64 %179, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %177, ptr align 1 %178, i64 %180, i1 false)
  %181 = icmp eq i32 %154, 0
  br i1 %181, label %187, label %182

182:                                              ; preds = %156
  %183 = getelementptr inbounds %class.ResizeArrayRaw, ptr %148, i64 0, i32 1
  %184 = load ptr, ptr %183, align 8, !tbaa !34
  %185 = icmp eq ptr %184, null
  br i1 %185, label %187, label %186

186:                                              ; preds = %182
  tail call void @_ZdaPv(ptr noundef nonnull %184) #10
  br label %187

187:                                              ; preds = %186, %182, %156
  %188 = getelementptr inbounds %class.ResizeArrayRaw, ptr %148, i64 0, i32 1
  store ptr %172, ptr %188, align 8, !tbaa !34
  store ptr %177, ptr %148, align 8, !tbaa !33
  store i32 %168, ptr %153, align 4, !tbaa !30
  %189 = load ptr, ptr %147, align 8, !tbaa !25
  br label %190

190:                                              ; preds = %139, %152, %187
  %191 = phi ptr [ %148, %139 ], [ %148, %152 ], [ %189, %187 ]
  store i32 %146, ptr %149, align 8, !tbaa !27
  %192 = load ptr, ptr %191, align 8, !tbaa !33
  %193 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %48, i64 0, i32 3, i32 1
  %194 = load ptr, ptr %193, align 8, !tbaa !25
  %195 = getelementptr inbounds %class.ResizeArrayRaw, ptr %194, i64 0, i32 2
  %196 = load i32, ptr %195, align 8, !tbaa !27
  %197 = icmp slt i32 %196, %146
  br i1 %197, label %198, label %236

198:                                              ; preds = %190
  %199 = getelementptr inbounds %class.ResizeArrayRaw, ptr %194, i64 0, i32 3
  %200 = load i32, ptr %199, align 4, !tbaa !30
  %201 = icmp slt i32 %200, %146
  br i1 %201, label %202, label %236

202:                                              ; preds = %198
  %203 = sitofp i32 %200 to float
  %204 = getelementptr inbounds %class.ResizeArrayRaw, ptr %194, i64 0, i32 5
  %205 = load float, ptr %204, align 4, !tbaa !31
  %206 = fmul float %205, %203
  %207 = fptosi float %206 to i32
  %208 = tail call i32 @llvm.smax.i32(i32 %207, i32 %146)
  %209 = sub nsw i32 %208, %200
  %210 = getelementptr inbounds %class.ResizeArrayRaw, ptr %194, i64 0, i32 6
  %211 = load i32, ptr %210, align 8, !tbaa !32
  %212 = icmp slt i32 %209, %211
  %213 = add nsw i32 %211, %200
  %214 = select i1 %212, i32 %213, i32 %208
  %215 = sext i32 %214 to i64
  %216 = shl nsw i64 %215, 1
  %217 = add nsw i64 %216, 31
  %218 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %217) #9
  %219 = getelementptr inbounds i8, ptr %218, i64 31
  %220 = ptrtoint ptr %219 to i64
  %221 = and i64 %220, 31
  %222 = sub nsw i64 0, %221
  %223 = getelementptr inbounds i8, ptr %219, i64 %222
  %224 = load ptr, ptr %194, align 8, !tbaa !33
  %225 = sext i32 %196 to i64
  %226 = shl nsw i64 %225, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %223, ptr align 1 %224, i64 %226, i1 false)
  %227 = icmp eq i32 %200, 0
  br i1 %227, label %233, label %228

228:                                              ; preds = %202
  %229 = getelementptr inbounds %class.ResizeArrayRaw, ptr %194, i64 0, i32 1
  %230 = load ptr, ptr %229, align 8, !tbaa !34
  %231 = icmp eq ptr %230, null
  br i1 %231, label %233, label %232

232:                                              ; preds = %228
  tail call void @_ZdaPv(ptr noundef nonnull %230) #10
  br label %233

233:                                              ; preds = %232, %228, %202
  %234 = getelementptr inbounds %class.ResizeArrayRaw, ptr %194, i64 0, i32 1
  store ptr %218, ptr %234, align 8, !tbaa !34
  store ptr %223, ptr %194, align 8, !tbaa !33
  store i32 %214, ptr %199, align 4, !tbaa !30
  %235 = load ptr, ptr %193, align 8, !tbaa !25
  br label %236

236:                                              ; preds = %190, %198, %233
  %237 = phi ptr [ %194, %190 ], [ %194, %198 ], [ %235, %233 ]
  store i32 %146, ptr %195, align 8, !tbaa !27
  %238 = load ptr, ptr %237, align 8, !tbaa !33
  %239 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %48, i64 0, i32 4, i32 1
  %240 = load ptr, ptr %239, align 8, !tbaa !25
  %241 = getelementptr inbounds %class.ResizeArrayRaw, ptr %240, i64 0, i32 2
  %242 = load i32, ptr %241, align 8, !tbaa !27
  %243 = icmp slt i32 %242, %146
  br i1 %243, label %244, label %282

244:                                              ; preds = %236
  %245 = getelementptr inbounds %class.ResizeArrayRaw, ptr %240, i64 0, i32 3
  %246 = load i32, ptr %245, align 4, !tbaa !30
  %247 = icmp slt i32 %246, %146
  br i1 %247, label %248, label %282

248:                                              ; preds = %244
  %249 = sitofp i32 %246 to float
  %250 = getelementptr inbounds %class.ResizeArrayRaw, ptr %240, i64 0, i32 5
  %251 = load float, ptr %250, align 4, !tbaa !31
  %252 = fmul float %251, %249
  %253 = fptosi float %252 to i32
  %254 = tail call i32 @llvm.smax.i32(i32 %253, i32 %146)
  %255 = sub nsw i32 %254, %246
  %256 = getelementptr inbounds %class.ResizeArrayRaw, ptr %240, i64 0, i32 6
  %257 = load i32, ptr %256, align 8, !tbaa !32
  %258 = icmp slt i32 %255, %257
  %259 = add nsw i32 %257, %246
  %260 = select i1 %258, i32 %259, i32 %254
  %261 = sext i32 %260 to i64
  %262 = shl nsw i64 %261, 1
  %263 = add nsw i64 %262, 31
  %264 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %263) #9
  %265 = getelementptr inbounds i8, ptr %264, i64 31
  %266 = ptrtoint ptr %265 to i64
  %267 = and i64 %266, 31
  %268 = sub nsw i64 0, %267
  %269 = getelementptr inbounds i8, ptr %265, i64 %268
  %270 = load ptr, ptr %240, align 8, !tbaa !33
  %271 = sext i32 %242 to i64
  %272 = shl nsw i64 %271, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %269, ptr align 1 %270, i64 %272, i1 false)
  %273 = icmp eq i32 %246, 0
  br i1 %273, label %279, label %274

274:                                              ; preds = %248
  %275 = getelementptr inbounds %class.ResizeArrayRaw, ptr %240, i64 0, i32 1
  %276 = load ptr, ptr %275, align 8, !tbaa !34
  %277 = icmp eq ptr %276, null
  br i1 %277, label %279, label %278

278:                                              ; preds = %274
  tail call void @_ZdaPv(ptr noundef nonnull %276) #10
  br label %279

279:                                              ; preds = %278, %274, %248
  %280 = getelementptr inbounds %class.ResizeArrayRaw, ptr %240, i64 0, i32 1
  store ptr %264, ptr %280, align 8, !tbaa !34
  store ptr %269, ptr %240, align 8, !tbaa !33
  store i32 %260, ptr %245, align 4, !tbaa !30
  %281 = load ptr, ptr %239, align 8, !tbaa !25
  br label %282

282:                                              ; preds = %236, %244, %279
  %283 = phi ptr [ %240, %236 ], [ %240, %244 ], [ %281, %279 ]
  store i32 %146, ptr %241, align 8, !tbaa !27
  %284 = load ptr, ptr %283, align 8, !tbaa !33
  %285 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %48, i64 0, i32 5, i32 1
  %286 = load ptr, ptr %285, align 8, !tbaa !25
  %287 = getelementptr inbounds %class.ResizeArrayRaw, ptr %286, i64 0, i32 2
  %288 = load i32, ptr %287, align 8, !tbaa !27
  %289 = icmp slt i32 %288, %146
  br i1 %289, label %290, label %328

290:                                              ; preds = %282
  %291 = getelementptr inbounds %class.ResizeArrayRaw, ptr %286, i64 0, i32 3
  %292 = load i32, ptr %291, align 4, !tbaa !30
  %293 = icmp slt i32 %292, %146
  br i1 %293, label %294, label %328

294:                                              ; preds = %290
  %295 = sitofp i32 %292 to float
  %296 = getelementptr inbounds %class.ResizeArrayRaw, ptr %286, i64 0, i32 5
  %297 = load float, ptr %296, align 4, !tbaa !31
  %298 = fmul float %297, %295
  %299 = fptosi float %298 to i32
  %300 = tail call i32 @llvm.smax.i32(i32 %299, i32 %146)
  %301 = sub nsw i32 %300, %292
  %302 = getelementptr inbounds %class.ResizeArrayRaw, ptr %286, i64 0, i32 6
  %303 = load i32, ptr %302, align 8, !tbaa !32
  %304 = icmp slt i32 %301, %303
  %305 = add nsw i32 %303, %292
  %306 = select i1 %304, i32 %305, i32 %300
  %307 = sext i32 %306 to i64
  %308 = shl nsw i64 %307, 1
  %309 = add nsw i64 %308, 31
  %310 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %309) #9
  %311 = getelementptr inbounds i8, ptr %310, i64 31
  %312 = ptrtoint ptr %311 to i64
  %313 = and i64 %312, 31
  %314 = sub nsw i64 0, %313
  %315 = getelementptr inbounds i8, ptr %311, i64 %314
  %316 = load ptr, ptr %286, align 8, !tbaa !33
  %317 = sext i32 %288 to i64
  %318 = shl nsw i64 %317, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %315, ptr align 1 %316, i64 %318, i1 false)
  %319 = icmp eq i32 %292, 0
  br i1 %319, label %325, label %320

320:                                              ; preds = %294
  %321 = getelementptr inbounds %class.ResizeArrayRaw, ptr %286, i64 0, i32 1
  %322 = load ptr, ptr %321, align 8, !tbaa !34
  %323 = icmp eq ptr %322, null
  br i1 %323, label %325, label %324

324:                                              ; preds = %320
  tail call void @_ZdaPv(ptr noundef nonnull %322) #10
  br label %325

325:                                              ; preds = %324, %320, %294
  %326 = getelementptr inbounds %class.ResizeArrayRaw, ptr %286, i64 0, i32 1
  store ptr %310, ptr %326, align 8, !tbaa !34
  store ptr %315, ptr %286, align 8, !tbaa !33
  store i32 %306, ptr %291, align 4, !tbaa !30
  %327 = load ptr, ptr %285, align 8, !tbaa !25
  br label %328

328:                                              ; preds = %282, %290, %325
  %329 = phi ptr [ %286, %282 ], [ %286, %290 ], [ %327, %325 ]
  store i32 %146, ptr %287, align 8, !tbaa !27
  %330 = load ptr, ptr %329, align 8, !tbaa !33
  %331 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %48, i64 0, i32 6, i32 1
  %332 = load ptr, ptr %331, align 8, !tbaa !25
  %333 = getelementptr inbounds %class.ResizeArrayRaw, ptr %332, i64 0, i32 2
  %334 = load i32, ptr %333, align 8, !tbaa !27
  %335 = icmp slt i32 %334, %146
  br i1 %335, label %336, label %374

336:                                              ; preds = %328
  %337 = getelementptr inbounds %class.ResizeArrayRaw, ptr %332, i64 0, i32 3
  %338 = load i32, ptr %337, align 4, !tbaa !30
  %339 = icmp slt i32 %338, %146
  br i1 %339, label %340, label %374

340:                                              ; preds = %336
  %341 = sitofp i32 %338 to float
  %342 = getelementptr inbounds %class.ResizeArrayRaw, ptr %332, i64 0, i32 5
  %343 = load float, ptr %342, align 4, !tbaa !31
  %344 = fmul float %343, %341
  %345 = fptosi float %344 to i32
  %346 = tail call i32 @llvm.smax.i32(i32 %345, i32 %146)
  %347 = sub nsw i32 %346, %338
  %348 = getelementptr inbounds %class.ResizeArrayRaw, ptr %332, i64 0, i32 6
  %349 = load i32, ptr %348, align 8, !tbaa !32
  %350 = icmp slt i32 %347, %349
  %351 = add nsw i32 %349, %338
  %352 = select i1 %350, i32 %351, i32 %346
  %353 = sext i32 %352 to i64
  %354 = shl nsw i64 %353, 1
  %355 = add nsw i64 %354, 31
  %356 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %355) #9
  %357 = getelementptr inbounds i8, ptr %356, i64 31
  %358 = ptrtoint ptr %357 to i64
  %359 = and i64 %358, 31
  %360 = sub nsw i64 0, %359
  %361 = getelementptr inbounds i8, ptr %357, i64 %360
  %362 = load ptr, ptr %332, align 8, !tbaa !33
  %363 = sext i32 %334 to i64
  %364 = shl nsw i64 %363, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %361, ptr align 1 %362, i64 %364, i1 false)
  %365 = icmp eq i32 %338, 0
  br i1 %365, label %371, label %366

366:                                              ; preds = %340
  %367 = getelementptr inbounds %class.ResizeArrayRaw, ptr %332, i64 0, i32 1
  %368 = load ptr, ptr %367, align 8, !tbaa !34
  %369 = icmp eq ptr %368, null
  br i1 %369, label %371, label %370

370:                                              ; preds = %366
  tail call void @_ZdaPv(ptr noundef nonnull %368) #10
  br label %371

371:                                              ; preds = %370, %366, %340
  %372 = getelementptr inbounds %class.ResizeArrayRaw, ptr %332, i64 0, i32 1
  store ptr %356, ptr %372, align 8, !tbaa !34
  store ptr %361, ptr %332, align 8, !tbaa !33
  store i32 %352, ptr %337, align 4, !tbaa !30
  %373 = load ptr, ptr %331, align 8, !tbaa !25
  br label %374

374:                                              ; preds = %328, %336, %371
  %375 = phi ptr [ %332, %328 ], [ %332, %336 ], [ %373, %371 ]
  store i32 %146, ptr %333, align 8, !tbaa !27
  %376 = load ptr, ptr %375, align 8, !tbaa !33
  %377 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %48, i64 0, i32 15, i32 1
  %378 = load ptr, ptr %377, align 8, !tbaa !25
  %379 = getelementptr inbounds %class.ResizeArrayRaw, ptr %378, i64 0, i32 2
  %380 = load i32, ptr %379, align 8, !tbaa !27
  %381 = icmp slt i32 %380, %146
  br i1 %381, label %382, label %420

382:                                              ; preds = %374
  %383 = getelementptr inbounds %class.ResizeArrayRaw, ptr %378, i64 0, i32 3
  %384 = load i32, ptr %383, align 4, !tbaa !30
  %385 = icmp slt i32 %384, %146
  br i1 %385, label %386, label %420

386:                                              ; preds = %382
  %387 = sitofp i32 %384 to float
  %388 = getelementptr inbounds %class.ResizeArrayRaw, ptr %378, i64 0, i32 5
  %389 = load float, ptr %388, align 4, !tbaa !31
  %390 = fmul float %389, %387
  %391 = fptosi float %390 to i32
  %392 = tail call i32 @llvm.smax.i32(i32 %391, i32 %146)
  %393 = sub nsw i32 %392, %384
  %394 = getelementptr inbounds %class.ResizeArrayRaw, ptr %378, i64 0, i32 6
  %395 = load i32, ptr %394, align 8, !tbaa !32
  %396 = icmp slt i32 %393, %395
  %397 = add nsw i32 %395, %384
  %398 = select i1 %396, i32 %397, i32 %392
  %399 = sext i32 %398 to i64
  %400 = shl nsw i64 %399, 1
  %401 = add nsw i64 %400, 31
  %402 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %401) #9
  %403 = getelementptr inbounds i8, ptr %402, i64 31
  %404 = ptrtoint ptr %403 to i64
  %405 = and i64 %404, 31
  %406 = sub nsw i64 0, %405
  %407 = getelementptr inbounds i8, ptr %403, i64 %406
  %408 = load ptr, ptr %378, align 8, !tbaa !33
  %409 = sext i32 %380 to i64
  %410 = shl nsw i64 %409, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %407, ptr align 1 %408, i64 %410, i1 false)
  %411 = icmp eq i32 %384, 0
  br i1 %411, label %417, label %412

412:                                              ; preds = %386
  %413 = getelementptr inbounds %class.ResizeArrayRaw, ptr %378, i64 0, i32 1
  %414 = load ptr, ptr %413, align 8, !tbaa !34
  %415 = icmp eq ptr %414, null
  br i1 %415, label %417, label %416

416:                                              ; preds = %412
  tail call void @_ZdaPv(ptr noundef nonnull %414) #10
  br label %417

417:                                              ; preds = %416, %412, %386
  %418 = getelementptr inbounds %class.ResizeArrayRaw, ptr %378, i64 0, i32 1
  store ptr %402, ptr %418, align 8, !tbaa !34
  store ptr %407, ptr %378, align 8, !tbaa !33
  store i32 %398, ptr %383, align 4, !tbaa !30
  %419 = load ptr, ptr %377, align 8, !tbaa !25
  br label %420

420:                                              ; preds = %374, %382, %417
  %421 = phi ptr [ %378, %374 ], [ %378, %382 ], [ %419, %417 ]
  store i32 %146, ptr %379, align 8, !tbaa !27
  %422 = load ptr, ptr %421, align 8, !tbaa !33
  %423 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %48, i64 0, i32 16, i32 1
  %424 = load ptr, ptr %423, align 8, !tbaa !25
  %425 = getelementptr inbounds %class.ResizeArrayRaw, ptr %424, i64 0, i32 2
  %426 = load i32, ptr %425, align 8, !tbaa !27
  %427 = icmp slt i32 %426, %146
  br i1 %427, label %428, label %466

428:                                              ; preds = %420
  %429 = getelementptr inbounds %class.ResizeArrayRaw, ptr %424, i64 0, i32 3
  %430 = load i32, ptr %429, align 4, !tbaa !30
  %431 = icmp slt i32 %430, %146
  br i1 %431, label %432, label %466

432:                                              ; preds = %428
  %433 = sitofp i32 %430 to float
  %434 = getelementptr inbounds %class.ResizeArrayRaw, ptr %424, i64 0, i32 5
  %435 = load float, ptr %434, align 4, !tbaa !31
  %436 = fmul float %435, %433
  %437 = fptosi float %436 to i32
  %438 = tail call i32 @llvm.smax.i32(i32 %437, i32 %146)
  %439 = sub nsw i32 %438, %430
  %440 = getelementptr inbounds %class.ResizeArrayRaw, ptr %424, i64 0, i32 6
  %441 = load i32, ptr %440, align 8, !tbaa !32
  %442 = icmp slt i32 %439, %441
  %443 = add nsw i32 %441, %430
  %444 = select i1 %442, i32 %443, i32 %438
  %445 = sext i32 %444 to i64
  %446 = shl nsw i64 %445, 1
  %447 = add nsw i64 %446, 31
  %448 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %447) #9
  %449 = getelementptr inbounds i8, ptr %448, i64 31
  %450 = ptrtoint ptr %449 to i64
  %451 = and i64 %450, 31
  %452 = sub nsw i64 0, %451
  %453 = getelementptr inbounds i8, ptr %449, i64 %452
  %454 = load ptr, ptr %424, align 8, !tbaa !33
  %455 = sext i32 %426 to i64
  %456 = shl nsw i64 %455, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %453, ptr align 1 %454, i64 %456, i1 false)
  %457 = icmp eq i32 %430, 0
  br i1 %457, label %463, label %458

458:                                              ; preds = %432
  %459 = getelementptr inbounds %class.ResizeArrayRaw, ptr %424, i64 0, i32 1
  %460 = load ptr, ptr %459, align 8, !tbaa !34
  %461 = icmp eq ptr %460, null
  br i1 %461, label %463, label %462

462:                                              ; preds = %458
  tail call void @_ZdaPv(ptr noundef nonnull %460) #10
  br label %463

463:                                              ; preds = %462, %458, %432
  %464 = getelementptr inbounds %class.ResizeArrayRaw, ptr %424, i64 0, i32 1
  store ptr %448, ptr %464, align 8, !tbaa !34
  store ptr %453, ptr %424, align 8, !tbaa !33
  store i32 %444, ptr %429, align 4, !tbaa !30
  %465 = load ptr, ptr %423, align 8, !tbaa !25
  br label %466

466:                                              ; preds = %420, %428, %463
  %467 = phi ptr [ %424, %420 ], [ %424, %428 ], [ %465, %463 ]
  store i32 %146, ptr %425, align 8, !tbaa !27
  %468 = load ptr, ptr %467, align 8, !tbaa !33
  br i1 %145, label %610, label %469

469:                                              ; preds = %466
  %470 = icmp sgt i32 %39, 0
  br i1 %470, label %471, label %601

471:                                              ; preds = %469
  %472 = zext i32 %39 to i64
  %473 = and i64 %472, 1
  %474 = icmp eq i32 %39, 1
  br i1 %474, label %507, label %475

475:                                              ; preds = %471
  %476 = and i64 %472, 4294967294
  br label %477

477:                                              ; preds = %502, %475
  %478 = phi i64 [ 0, %475 ], [ %504, %502 ]
  %479 = phi i32 [ 0, %475 ], [ %503, %502 ]
  %480 = phi i64 [ 0, %475 ], [ %505, %502 ]
  %481 = getelementptr inbounds %struct.CompAtom, ptr %42, i64 %478, i32 4
  %482 = load i8, ptr %481, align 1
  %483 = and i8 %482, 7
  %484 = icmp eq i8 %483, 0
  br i1 %484, label %490, label %485

485:                                              ; preds = %477
  %486 = trunc i64 %478 to i16
  %487 = add nsw i32 %479, 1
  %488 = sext i32 %479 to i64
  %489 = getelementptr inbounds i16, ptr %192, i64 %488
  store i16 %486, ptr %489, align 2, !tbaa !44
  br label %490

490:                                              ; preds = %477, %485
  %491 = phi i32 [ %487, %485 ], [ %479, %477 ]
  %492 = or i64 %478, 1
  %493 = getelementptr inbounds %struct.CompAtom, ptr %42, i64 %492, i32 4
  %494 = load i8, ptr %493, align 1
  %495 = and i8 %494, 7
  %496 = icmp eq i8 %495, 0
  br i1 %496, label %502, label %497

497:                                              ; preds = %490
  %498 = trunc i64 %492 to i16
  %499 = add nsw i32 %491, 1
  %500 = sext i32 %491 to i64
  %501 = getelementptr inbounds i16, ptr %192, i64 %500
  store i16 %498, ptr %501, align 2, !tbaa !44
  br label %502

502:                                              ; preds = %497, %490
  %503 = phi i32 [ %499, %497 ], [ %491, %490 ]
  %504 = add nuw nsw i64 %478, 2
  %505 = add i64 %480, 2
  %506 = icmp eq i64 %505, %476
  br i1 %506, label %507, label %477

507:                                              ; preds = %502, %471
  %508 = phi i32 [ undef, %471 ], [ %503, %502 ]
  %509 = phi i64 [ 0, %471 ], [ %504, %502 ]
  %510 = phi i32 [ 0, %471 ], [ %503, %502 ]
  %511 = icmp eq i64 %473, 0
  br i1 %511, label %522, label %512

512:                                              ; preds = %507
  %513 = getelementptr inbounds %struct.CompAtom, ptr %42, i64 %509, i32 4
  %514 = load i8, ptr %513, align 1
  %515 = and i8 %514, 7
  %516 = icmp eq i8 %515, 0
  br i1 %516, label %522, label %517

517:                                              ; preds = %512
  %518 = trunc i64 %509 to i16
  %519 = add nsw i32 %510, 1
  %520 = sext i32 %510 to i64
  %521 = getelementptr inbounds i16, ptr %192, i64 %520
  store i16 %518, ptr %521, align 2, !tbaa !44
  br label %522

522:                                              ; preds = %512, %517, %507
  %523 = phi i32 [ %508, %507 ], [ %519, %517 ], [ %510, %512 ]
  %524 = icmp eq i32 %523, 0
  br i1 %524, label %532, label %525

525:                                              ; preds = %522
  %526 = add nsw i32 %523, -1
  %527 = sext i32 %526 to i64
  %528 = getelementptr inbounds i16, ptr %192, i64 %527
  %529 = load i16, ptr %528, align 2, !tbaa !44
  %530 = sext i32 %523 to i64
  %531 = getelementptr inbounds i16, ptr %192, i64 %530
  store i16 %529, ptr %531, align 2, !tbaa !44
  br label %532

532:                                              ; preds = %525, %522
  %533 = load i32, ptr @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4, !tbaa !5
  %534 = icmp ne i32 %533, 0
  %535 = icmp sgt i32 %523, 0
  %536 = and i1 %534, %535
  br i1 %536, label %537, label %601

537:                                              ; preds = %532
  %538 = zext i32 %523 to i64
  %539 = and i64 %538, 1
  %540 = icmp eq i32 %523, 1
  br i1 %540, label %575, label %541

541:                                              ; preds = %537
  %542 = and i64 %538, 4294967294
  br label %543

543:                                              ; preds = %570, %541
  %544 = phi i64 [ 0, %541 ], [ %572, %570 ]
  %545 = phi i32 [ 0, %541 ], [ %571, %570 ]
  %546 = phi i64 [ 0, %541 ], [ %573, %570 ]
  %547 = getelementptr inbounds i16, ptr %192, i64 %544
  %548 = load i16, ptr %547, align 2, !tbaa !44
  %549 = zext i16 %548 to i64
  %550 = getelementptr inbounds %struct.CompAtomExt, ptr %46, i64 %549
  %551 = load i32, ptr %550, align 4
  %552 = icmp sgt i32 %551, -1
  br i1 %552, label %553, label %557

553:                                              ; preds = %543
  %554 = add nsw i32 %545, 1
  %555 = sext i32 %545 to i64
  %556 = getelementptr inbounds i16, ptr %238, i64 %555
  store i16 %548, ptr %556, align 2, !tbaa !44
  br label %557

557:                                              ; preds = %543, %553
  %558 = phi i32 [ %545, %543 ], [ %554, %553 ]
  %559 = or i64 %544, 1
  %560 = getelementptr inbounds i16, ptr %192, i64 %559
  %561 = load i16, ptr %560, align 2, !tbaa !44
  %562 = zext i16 %561 to i64
  %563 = getelementptr inbounds %struct.CompAtomExt, ptr %46, i64 %562
  %564 = load i32, ptr %563, align 4
  %565 = icmp sgt i32 %564, -1
  br i1 %565, label %566, label %570

566:                                              ; preds = %557
  %567 = add nsw i32 %558, 1
  %568 = sext i32 %558 to i64
  %569 = getelementptr inbounds i16, ptr %238, i64 %568
  store i16 %561, ptr %569, align 2, !tbaa !44
  br label %570

570:                                              ; preds = %566, %557
  %571 = phi i32 [ %558, %557 ], [ %567, %566 ]
  %572 = add nuw nsw i64 %544, 2
  %573 = add i64 %546, 2
  %574 = icmp eq i64 %573, %542
  br i1 %574, label %575, label %543

575:                                              ; preds = %570, %537
  %576 = phi i32 [ undef, %537 ], [ %571, %570 ]
  %577 = phi i64 [ 0, %537 ], [ %572, %570 ]
  %578 = phi i32 [ 0, %537 ], [ %571, %570 ]
  %579 = icmp eq i64 %539, 0
  br i1 %579, label %591, label %580

580:                                              ; preds = %575
  %581 = getelementptr inbounds i16, ptr %192, i64 %577
  %582 = load i16, ptr %581, align 2, !tbaa !44
  %583 = zext i16 %582 to i64
  %584 = getelementptr inbounds %struct.CompAtomExt, ptr %46, i64 %583
  %585 = load i32, ptr %584, align 4
  %586 = icmp sgt i32 %585, -1
  br i1 %586, label %587, label %591

587:                                              ; preds = %580
  %588 = add nsw i32 %578, 1
  %589 = sext i32 %578 to i64
  %590 = getelementptr inbounds i16, ptr %238, i64 %589
  store i16 %582, ptr %590, align 2, !tbaa !44
  br label %591

591:                                              ; preds = %580, %587, %575
  %592 = phi i32 [ %576, %575 ], [ %578, %580 ], [ %588, %587 ]
  %593 = icmp eq i32 %592, 0
  br i1 %593, label %601, label %594

594:                                              ; preds = %591
  %595 = add nsw i32 %592, -1
  %596 = sext i32 %595 to i64
  %597 = getelementptr inbounds i16, ptr %238, i64 %596
  %598 = load i16, ptr %597, align 2, !tbaa !44
  %599 = sext i32 %592 to i64
  %600 = getelementptr inbounds i16, ptr %238, i64 %599
  store i16 %598, ptr %600, align 2, !tbaa !44
  br label %601

601:                                              ; preds = %469, %532, %594, %591
  %602 = phi i32 [ %523, %594 ], [ %523, %591 ], [ %523, %532 ], [ 0, %469 ]
  %603 = phi i32 [ %592, %594 ], [ 0, %591 ], [ 0, %532 ], [ 0, %469 ]
  %604 = load i32, ptr %13, align 8, !tbaa !17
  %605 = add nsw i32 %604, 1
  store i32 %605, ptr %13, align 8, !tbaa !17
  %606 = trunc i32 %37 to i16
  %607 = load ptr, ptr %8, align 8, !tbaa !46
  %608 = sext i32 %604 to i64
  %609 = getelementptr inbounds i16, ptr %607, i64 %608
  store i16 %606, ptr %609, align 2, !tbaa !44
  br label %620

610:                                              ; preds = %466
  %611 = load ptr, ptr %8, align 8, !tbaa !46
  %612 = load i32, ptr %13, align 8, !tbaa !17
  %613 = add nsw i32 %612, 1
  store i32 %613, ptr %13, align 8, !tbaa !17
  %614 = sext i32 %612 to i64
  %615 = getelementptr inbounds i16, ptr %611, i64 %614
  %616 = load i16, ptr %615, align 2, !tbaa !44
  %617 = zext i16 %616 to i32
  %618 = icmp eq i32 %37, %617
  br i1 %618, label %620, label %619

619:                                              ; preds = %610
  tail call void @_Z8NAMD_bugPKc(ptr noundef nonnull @.str)
  br label %620

620:                                              ; preds = %610, %619, %601
  %621 = phi i32 [ 0, %619 ], [ 0, %610 ], [ %602, %601 ]
  %622 = phi i32 [ 0, %619 ], [ 0, %610 ], [ %603, %601 ]
  %623 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 3
  %624 = load ptr, ptr %623, align 8, !tbaa !23
  %625 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 3, i64 1
  %626 = load ptr, ptr %625, align 8, !tbaa !23
  %627 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 4
  %628 = load ptr, ptr %627, align 8, !tbaa !23
  %629 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 4, i64 1
  %630 = load ptr, ptr %629, align 8, !tbaa !23
  %631 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 18
  %632 = load i32, ptr %631, align 4, !tbaa !48
  %633 = add nsw i32 %632, -1
  %634 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 16
  %635 = load i32, ptr %634, align 4, !tbaa !47
  br i1 %145, label %638, label %636

636:                                              ; preds = %620
  %637 = load i32, ptr %13, align 8, !tbaa !17
  br label %645

638:                                              ; preds = %620
  %639 = load ptr, ptr %8, align 8, !tbaa !46
  %640 = load i32, ptr %13, align 8, !tbaa !17
  %641 = sext i32 %640 to i64
  %642 = getelementptr inbounds i16, ptr %639, i64 %641
  %643 = load i16, ptr %642, align 2, !tbaa !44
  %644 = zext i16 %643 to i32
  br label %645

645:                                              ; preds = %638, %636
  %646 = phi i32 [ %640, %638 ], [ %637, %636 ]
  %647 = phi i32 [ %644, %638 ], [ 0, %636 ]
  %648 = add nsw i32 %646, 1
  store i32 %648, ptr %13, align 8
  %649 = icmp slt i32 %647, %37
  br i1 %649, label %650, label %2645

650:                                              ; preds = %645
  %651 = getelementptr inbounds %class.Molecule, ptr %26, i64 0, i32 1
  %652 = getelementptr inbounds %class.Molecule, ptr %26, i64 0, i32 4
  %653 = getelementptr inbounds %class.Molecule, ptr %26, i64 0, i32 2
  %654 = getelementptr inbounds %class.Molecule, ptr %26, i64 0, i32 3
  %655 = ptrtoint ptr %422 to i64
  %656 = add nsw i32 %39, 10
  %657 = getelementptr inbounds %class.Pairlists, ptr %8, i64 0, i32 2
  %658 = ptrtoint ptr %468 to i64
  %659 = getelementptr inbounds i16, ptr %422, i64 1
  %660 = ptrtoint ptr %330 to i64
  %661 = ptrtoint ptr %376 to i64
  %662 = getelementptr inbounds %class.LJTable, ptr %25, i64 0, i32 1
  %663 = getelementptr inbounds %class.LJTable, ptr %25, i64 0, i32 2
  %664 = fneg double %29
  %665 = getelementptr inbounds double, ptr %6, i64 26
  %666 = getelementptr inbounds double, ptr %6, i64 28
  %667 = getelementptr inbounds double, ptr %6, i64 29
  %668 = getelementptr inbounds double, ptr %6, i64 30
  %669 = getelementptr inbounds double, ptr %6, i64 31
  %670 = fsub double 1.000000e+00, %31
  %671 = fmul double %31, 2.000000e+00
  %672 = fmul double %31, 4.000000e+00
  %673 = fmul double %31, 6.000000e+00
  %674 = insertelement <2 x double> poison, double %23, i64 0
  %675 = shufflevector <2 x double> %674, <2 x double> poison, <2 x i32> zeroinitializer
  br label %676

676:                                              ; preds = %650, %2628
  %677 = phi i32 [ 0, %650 ], [ %2636, %2628 ]
  %678 = phi double [ 0.000000e+00, %650 ], [ %2635, %2628 ]
  %679 = phi i32 [ %647, %650 ], [ %2634, %2628 ]
  %680 = phi ptr [ null, %650 ], [ %2633, %2628 ]
  %681 = phi ptr [ null, %650 ], [ %2632, %2628 ]
  %682 = phi ptr [ null, %650 ], [ %2631, %2628 ]
  %683 = phi i32 [ 0, %650 ], [ %2630, %2628 ]
  %684 = phi i32 [ %635, %650 ], [ %2629, %2628 ]
  %685 = phi <2 x double> [ zeroinitializer, %650 ], [ %2637, %2628 ]
  %686 = phi <2 x double> [ zeroinitializer, %650 ], [ %2638, %2628 ]
  %687 = phi <2 x double> [ zeroinitializer, %650 ], [ %2639, %2628 ]
  %688 = phi <2 x double> [ zeroinitializer, %650 ], [ %2640, %2628 ]
  %689 = phi <2 x double> [ zeroinitializer, %650 ], [ %2641, %2628 ]
  %690 = phi <2 x double> [ zeroinitializer, %650 ], [ %2642, %2628 ]
  %691 = phi <2 x double> [ zeroinitializer, %650 ], [ %2643, %2628 ]
  %692 = sext i32 %679 to i64
  %693 = getelementptr inbounds %struct.CompAtom, ptr %40, i64 %692
  %694 = getelementptr inbounds %struct.CompAtomExt, ptr %44, i64 %692
  br i1 %145, label %1944, label %695

695:                                              ; preds = %676
  %696 = getelementptr inbounds %struct.CompAtom, ptr %40, i64 %692, i32 4
  %697 = load i8, ptr %696, align 1
  %698 = lshr i8 %697, 3
  %699 = and i8 %698, 15
  %700 = zext i8 %699 to i32
  %701 = icmp eq i8 %699, 0
  br i1 %701, label %707, label %702

702:                                              ; preds = %695
  %703 = icmp eq i32 %684, 0
  br i1 %703, label %707, label %704

704:                                              ; preds = %702
  %705 = add nsw i32 %684, -1
  %706 = add nsw i32 %679, %700
  br label %2628

707:                                              ; preds = %702, %695
  %708 = phi i32 [ %633, %702 ], [ %684, %695 ]
  %709 = load <2 x double>, ptr %693, align 8, !tbaa !19
  %710 = fadd <2 x double> %15, %709
  %711 = getelementptr inbounds %class.Vector, ptr %693, i64 0, i32 2
  %712 = load double, ptr %711, align 8, !tbaa !49
  %713 = fadd double %17, %712
  %714 = load i32, ptr %694, align 4
  %715 = shl i32 %714, 2
  %716 = ashr exact i32 %715, 2
  %717 = load ptr, ptr %651, align 8, !tbaa !51
  %718 = sext i32 %716 to i64
  %719 = getelementptr inbounds %class.ExclusionCheck, ptr %717, i64 %718
  %720 = load i32, ptr %719, align 8, !tbaa !53
  %721 = getelementptr inbounds %class.ExclusionCheck, ptr %717, i64 %718, i32 1
  %722 = load i32, ptr %721, align 4, !tbaa !55
  %723 = getelementptr inbounds %class.ExclusionCheck, ptr %717, i64 %718, i32 2
  %724 = load ptr, ptr %723, align 8, !tbaa !56
  %725 = icmp eq ptr %724, null
  br i1 %725, label %730, label %726

726:                                              ; preds = %707
  %727 = sext i32 %720 to i64
  %728 = sub nsw i64 0, %727
  %729 = getelementptr inbounds i8, ptr %724, i64 %728
  br label %956

730:                                              ; preds = %707
  %731 = icmp eq ptr %680, null
  br i1 %731, label %819, label %732

732:                                              ; preds = %730
  %733 = load i32, ptr %681, align 4, !tbaa !5
  %734 = icmp slt i32 %733, 1
  br i1 %734, label %782, label %735

735:                                              ; preds = %732
  %736 = add nuw i32 %733, 1
  %737 = zext i32 %736 to i64
  %738 = add nsw i64 %737, -1
  %739 = add nsw i64 %737, -2
  %740 = and i64 %738, 3
  %741 = icmp ult i64 %739, 3
  br i1 %741, label %769, label %742

742:                                              ; preds = %735
  %743 = and i64 %738, -4
  br label %744

744:                                              ; preds = %744, %742
  %745 = phi i64 [ 1, %742 ], [ %766, %744 ]
  %746 = phi i64 [ 0, %742 ], [ %767, %744 ]
  %747 = getelementptr inbounds i32, ptr %681, i64 %745
  %748 = load i32, ptr %747, align 4, !tbaa !5
  %749 = sext i32 %748 to i64
  %750 = getelementptr inbounds i8, ptr %680, i64 %749
  store i8 0, ptr %750, align 1, !tbaa !57
  %751 = add nuw nsw i64 %745, 1
  %752 = getelementptr inbounds i32, ptr %681, i64 %751
  %753 = load i32, ptr %752, align 4, !tbaa !5
  %754 = sext i32 %753 to i64
  %755 = getelementptr inbounds i8, ptr %680, i64 %754
  store i8 0, ptr %755, align 1, !tbaa !57
  %756 = add nuw nsw i64 %745, 2
  %757 = getelementptr inbounds i32, ptr %681, i64 %756
  %758 = load i32, ptr %757, align 4, !tbaa !5
  %759 = sext i32 %758 to i64
  %760 = getelementptr inbounds i8, ptr %680, i64 %759
  store i8 0, ptr %760, align 1, !tbaa !57
  %761 = add nuw nsw i64 %745, 3
  %762 = getelementptr inbounds i32, ptr %681, i64 %761
  %763 = load i32, ptr %762, align 4, !tbaa !5
  %764 = sext i32 %763 to i64
  %765 = getelementptr inbounds i8, ptr %680, i64 %764
  store i8 0, ptr %765, align 1, !tbaa !57
  %766 = add nuw nsw i64 %745, 4
  %767 = add i64 %746, 4
  %768 = icmp eq i64 %767, %743
  br i1 %768, label %769, label %744

769:                                              ; preds = %744, %735
  %770 = phi i64 [ 1, %735 ], [ %766, %744 ]
  %771 = icmp eq i64 %740, 0
  br i1 %771, label %782, label %772

772:                                              ; preds = %769, %772
  %773 = phi i64 [ %779, %772 ], [ %770, %769 ]
  %774 = phi i64 [ %780, %772 ], [ 0, %769 ]
  %775 = getelementptr inbounds i32, ptr %681, i64 %773
  %776 = load i32, ptr %775, align 4, !tbaa !5
  %777 = sext i32 %776 to i64
  %778 = getelementptr inbounds i8, ptr %680, i64 %777
  store i8 0, ptr %778, align 1, !tbaa !57
  %779 = add nuw nsw i64 %773, 1
  %780 = add i64 %774, 1
  %781 = icmp eq i64 %780, %740
  br i1 %781, label %782, label %772, !llvm.loop !310

782:                                              ; preds = %769, %772, %732
  %783 = load i32, ptr %682, align 4, !tbaa !5
  %784 = icmp slt i32 %783, 1
  br i1 %784, label %839, label %785

785:                                              ; preds = %782
  %786 = add nuw i32 %783, 1
  %787 = zext i32 %786 to i64
  %788 = add nsw i64 %787, -1
  %789 = add nsw i64 %787, -2
  %790 = and i64 %788, 3
  %791 = icmp ult i64 %789, 3
  br i1 %791, label %826, label %792

792:                                              ; preds = %785
  %793 = and i64 %788, -4
  br label %794

794:                                              ; preds = %794, %792
  %795 = phi i64 [ 1, %792 ], [ %816, %794 ]
  %796 = phi i64 [ 0, %792 ], [ %817, %794 ]
  %797 = getelementptr inbounds i32, ptr %682, i64 %795
  %798 = load i32, ptr %797, align 4, !tbaa !5
  %799 = sext i32 %798 to i64
  %800 = getelementptr inbounds i8, ptr %680, i64 %799
  store i8 0, ptr %800, align 1, !tbaa !57
  %801 = add nuw nsw i64 %795, 1
  %802 = getelementptr inbounds i32, ptr %682, i64 %801
  %803 = load i32, ptr %802, align 4, !tbaa !5
  %804 = sext i32 %803 to i64
  %805 = getelementptr inbounds i8, ptr %680, i64 %804
  store i8 0, ptr %805, align 1, !tbaa !57
  %806 = add nuw nsw i64 %795, 2
  %807 = getelementptr inbounds i32, ptr %682, i64 %806
  %808 = load i32, ptr %807, align 4, !tbaa !5
  %809 = sext i32 %808 to i64
  %810 = getelementptr inbounds i8, ptr %680, i64 %809
  store i8 0, ptr %810, align 1, !tbaa !57
  %811 = add nuw nsw i64 %795, 3
  %812 = getelementptr inbounds i32, ptr %682, i64 %811
  %813 = load i32, ptr %812, align 4, !tbaa !5
  %814 = sext i32 %813 to i64
  %815 = getelementptr inbounds i8, ptr %680, i64 %814
  store i8 0, ptr %815, align 1, !tbaa !57
  %816 = add nuw nsw i64 %795, 4
  %817 = add i64 %796, 4
  %818 = icmp eq i64 %817, %793
  br i1 %818, label %826, label %794

819:                                              ; preds = %730
  %820 = load i32, ptr %652, align 8, !tbaa !60
  %821 = tail call i32 @llvm.smax.i32(i32 %820, i32 -1)
  %822 = sext i32 %821 to i64
  %823 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %822) #9
  %824 = load i32, ptr %652, align 8, !tbaa !60
  %825 = sext i32 %824 to i64
  tail call void @llvm.memset.p0.i64(ptr nonnull align 1 %823, i8 0, i64 %825, i1 false)
  br label %839

826:                                              ; preds = %794, %785
  %827 = phi i64 [ 1, %785 ], [ %816, %794 ]
  %828 = icmp eq i64 %790, 0
  br i1 %828, label %839, label %829

829:                                              ; preds = %826, %829
  %830 = phi i64 [ %836, %829 ], [ %827, %826 ]
  %831 = phi i64 [ %837, %829 ], [ 0, %826 ]
  %832 = getelementptr inbounds i32, ptr %682, i64 %830
  %833 = load i32, ptr %832, align 4, !tbaa !5
  %834 = sext i32 %833 to i64
  %835 = getelementptr inbounds i8, ptr %680, i64 %834
  store i8 0, ptr %835, align 1, !tbaa !57
  %836 = add nuw nsw i64 %830, 1
  %837 = add i64 %831, 1
  %838 = icmp eq i64 %837, %790
  br i1 %838, label %839, label %829, !llvm.loop !311

839:                                              ; preds = %826, %829, %782, %819
  %840 = phi ptr [ %823, %819 ], [ %680, %782 ], [ %680, %829 ], [ %680, %826 ]
  %841 = load i32, ptr %694, align 4
  %842 = shl i32 %841, 2
  %843 = ashr exact i32 %842, 2
  %844 = load ptr, ptr %653, align 8, !tbaa !62
  %845 = sext i32 %843 to i64
  %846 = getelementptr inbounds ptr, ptr %844, i64 %845
  %847 = load ptr, ptr %846, align 8, !tbaa !23
  %848 = load i32, ptr %847, align 4, !tbaa !5
  %849 = icmp slt i32 %848, 1
  br i1 %849, label %902, label %850

850:                                              ; preds = %839
  %851 = add nuw i32 %848, 1
  %852 = zext i32 %851 to i64
  %853 = add nsw i64 %852, -1
  %854 = add nsw i64 %852, -2
  %855 = and i64 %853, 3
  %856 = icmp ult i64 %854, 3
  br i1 %856, label %884, label %857

857:                                              ; preds = %850
  %858 = and i64 %853, -4
  br label %859

859:                                              ; preds = %859, %857
  %860 = phi i64 [ 1, %857 ], [ %881, %859 ]
  %861 = phi i64 [ 0, %857 ], [ %882, %859 ]
  %862 = getelementptr inbounds i32, ptr %847, i64 %860
  %863 = load i32, ptr %862, align 4, !tbaa !5
  %864 = sext i32 %863 to i64
  %865 = getelementptr inbounds i8, ptr %840, i64 %864
  store i8 1, ptr %865, align 1, !tbaa !57
  %866 = add nuw nsw i64 %860, 1
  %867 = getelementptr inbounds i32, ptr %847, i64 %866
  %868 = load i32, ptr %867, align 4, !tbaa !5
  %869 = sext i32 %868 to i64
  %870 = getelementptr inbounds i8, ptr %840, i64 %869
  store i8 1, ptr %870, align 1, !tbaa !57
  %871 = add nuw nsw i64 %860, 2
  %872 = getelementptr inbounds i32, ptr %847, i64 %871
  %873 = load i32, ptr %872, align 4, !tbaa !5
  %874 = sext i32 %873 to i64
  %875 = getelementptr inbounds i8, ptr %840, i64 %874
  store i8 1, ptr %875, align 1, !tbaa !57
  %876 = add nuw nsw i64 %860, 3
  %877 = getelementptr inbounds i32, ptr %847, i64 %876
  %878 = load i32, ptr %877, align 4, !tbaa !5
  %879 = sext i32 %878 to i64
  %880 = getelementptr inbounds i8, ptr %840, i64 %879
  store i8 1, ptr %880, align 1, !tbaa !57
  %881 = add nuw nsw i64 %860, 4
  %882 = add i64 %861, 4
  %883 = icmp eq i64 %882, %858
  br i1 %883, label %884, label %859

884:                                              ; preds = %859, %850
  %885 = phi i64 [ 1, %850 ], [ %881, %859 ]
  %886 = icmp eq i64 %855, 0
  br i1 %886, label %897, label %887

887:                                              ; preds = %884, %887
  %888 = phi i64 [ %894, %887 ], [ %885, %884 ]
  %889 = phi i64 [ %895, %887 ], [ 0, %884 ]
  %890 = getelementptr inbounds i32, ptr %847, i64 %888
  %891 = load i32, ptr %890, align 4, !tbaa !5
  %892 = sext i32 %891 to i64
  %893 = getelementptr inbounds i8, ptr %840, i64 %892
  store i8 1, ptr %893, align 1, !tbaa !57
  %894 = add nuw nsw i64 %888, 1
  %895 = add i64 %889, 1
  %896 = icmp eq i64 %895, %855
  br i1 %896, label %897, label %887, !llvm.loop !312

897:                                              ; preds = %887, %884
  %898 = load i32, ptr %694, align 4
  %899 = shl i32 %898, 2
  %900 = ashr exact i32 %899, 2
  %901 = sext i32 %900 to i64
  br label %902

902:                                              ; preds = %897, %839
  %903 = phi i64 [ %901, %897 ], [ %845, %839 ]
  %904 = load ptr, ptr %654, align 8, !tbaa !64
  %905 = getelementptr inbounds ptr, ptr %904, i64 %903
  %906 = load ptr, ptr %905, align 8, !tbaa !23
  %907 = load i32, ptr %906, align 4, !tbaa !5
  %908 = icmp slt i32 %907, 1
  br i1 %908, label %956, label %909

909:                                              ; preds = %902
  %910 = add nuw i32 %907, 1
  %911 = zext i32 %910 to i64
  %912 = add nsw i64 %911, -1
  %913 = add nsw i64 %911, -2
  %914 = and i64 %912, 3
  %915 = icmp ult i64 %913, 3
  br i1 %915, label %943, label %916

916:                                              ; preds = %909
  %917 = and i64 %912, -4
  br label %918

918:                                              ; preds = %918, %916
  %919 = phi i64 [ 1, %916 ], [ %940, %918 ]
  %920 = phi i64 [ 0, %916 ], [ %941, %918 ]
  %921 = getelementptr inbounds i32, ptr %906, i64 %919
  %922 = load i32, ptr %921, align 4, !tbaa !5
  %923 = sext i32 %922 to i64
  %924 = getelementptr inbounds i8, ptr %840, i64 %923
  store i8 2, ptr %924, align 1, !tbaa !57
  %925 = add nuw nsw i64 %919, 1
  %926 = getelementptr inbounds i32, ptr %906, i64 %925
  %927 = load i32, ptr %926, align 4, !tbaa !5
  %928 = sext i32 %927 to i64
  %929 = getelementptr inbounds i8, ptr %840, i64 %928
  store i8 2, ptr %929, align 1, !tbaa !57
  %930 = add nuw nsw i64 %919, 2
  %931 = getelementptr inbounds i32, ptr %906, i64 %930
  %932 = load i32, ptr %931, align 4, !tbaa !5
  %933 = sext i32 %932 to i64
  %934 = getelementptr inbounds i8, ptr %840, i64 %933
  store i8 2, ptr %934, align 1, !tbaa !57
  %935 = add nuw nsw i64 %919, 3
  %936 = getelementptr inbounds i32, ptr %906, i64 %935
  %937 = load i32, ptr %936, align 4, !tbaa !5
  %938 = sext i32 %937 to i64
  %939 = getelementptr inbounds i8, ptr %840, i64 %938
  store i8 2, ptr %939, align 1, !tbaa !57
  %940 = add nuw nsw i64 %919, 4
  %941 = add i64 %920, 4
  %942 = icmp eq i64 %941, %917
  br i1 %942, label %943, label %918

943:                                              ; preds = %918, %909
  %944 = phi i64 [ 1, %909 ], [ %940, %918 ]
  %945 = icmp eq i64 %914, 0
  br i1 %945, label %956, label %946

946:                                              ; preds = %943, %946
  %947 = phi i64 [ %953, %946 ], [ %944, %943 ]
  %948 = phi i64 [ %954, %946 ], [ 0, %943 ]
  %949 = getelementptr inbounds i32, ptr %906, i64 %947
  %950 = load i32, ptr %949, align 4, !tbaa !5
  %951 = sext i32 %950 to i64
  %952 = getelementptr inbounds i8, ptr %840, i64 %951
  store i8 2, ptr %952, align 1, !tbaa !57
  %953 = add nuw nsw i64 %947, 1
  %954 = add i64 %948, 1
  %955 = icmp eq i64 %954, %914
  br i1 %955, label %956, label %946, !llvm.loop !313

956:                                              ; preds = %943, %946, %902, %726
  %957 = phi ptr [ %729, %726 ], [ %840, %902 ], [ %840, %946 ], [ %840, %943 ]
  %958 = phi ptr [ %682, %726 ], [ %906, %902 ], [ %906, %946 ], [ %906, %943 ]
  %959 = phi ptr [ %681, %726 ], [ %847, %902 ], [ %847, %946 ], [ %847, %943 ]
  %960 = phi ptr [ %680, %726 ], [ %840, %902 ], [ %840, %946 ], [ %840, %943 ]
  %961 = load i8, ptr %696, align 1
  %962 = and i8 %961, 7
  %963 = icmp eq i8 %962, 0
  %964 = load i32, ptr @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4, !tbaa !5
  br i1 %963, label %1147, label %965

965:                                              ; preds = %956
  %966 = icmp eq i32 %964, 0
  br i1 %966, label %973, label %967

967:                                              ; preds = %965
  %968 = load i32, ptr %694, align 4
  %969 = freeze i32 %968
  %970 = icmp slt i32 %969, 0
  %971 = select i1 %970, ptr %238, ptr %192
  %972 = select i1 %970, i32 %622, i32 %621
  br label %973

973:                                              ; preds = %967, %965
  %974 = phi ptr [ %192, %965 ], [ %971, %967 ]
  %975 = phi i32 [ %621, %965 ], [ %972, %967 ]
  %976 = icmp sgt i32 %975, 0
  br i1 %976, label %977, label %1128

977:                                              ; preds = %973
  %978 = icmp ugt i32 %975, 6
  br i1 %978, label %979, label %1063

979:                                              ; preds = %977
  %980 = add nsw i32 %975, -2
  %981 = getelementptr inbounds i16, ptr %974, i64 1
  %982 = load i16, ptr %981, align 2, !tbaa !44
  %983 = zext i16 %982 to i64
  %984 = getelementptr inbounds %struct.CompAtom, ptr %42, i64 %983
  %985 = getelementptr inbounds %class.Vector, ptr %984, i64 0, i32 2
  %986 = load double, ptr %985, align 8, !tbaa !49
  %987 = load i16, ptr %974, align 2, !tbaa !44
  %988 = zext i16 %987 to i64
  %989 = getelementptr inbounds %struct.CompAtom, ptr %42, i64 %988
  %990 = getelementptr inbounds %class.Vector, ptr %989, i64 0, i32 2
  %991 = load double, ptr %990, align 8, !tbaa !49
  %992 = getelementptr inbounds %class.Vector, ptr %984, i64 0, i32 1
  %993 = load double, ptr %992, align 8, !tbaa !66
  %994 = getelementptr inbounds %class.Vector, ptr %989, i64 0, i32 1
  %995 = load double, ptr %994, align 8, !tbaa !66
  %996 = load double, ptr %984, align 8, !tbaa !67
  %997 = load double, ptr %989, align 8, !tbaa !67
  %998 = zext i32 %980 to i64
  %999 = insertelement <2 x double> poison, double %986, i64 0
  %1000 = insertelement <2 x double> %999, double %991, i64 1
  %1001 = insertelement <2 x double> poison, double %993, i64 0
  %1002 = insertelement <2 x double> %1001, double %995, i64 1
  %1003 = insertelement <2 x double> poison, double %996, i64 0
  %1004 = insertelement <2 x double> %1003, double %997, i64 1
  %1005 = insertelement <2 x double> poison, double %713, i64 0
  %1006 = shufflevector <2 x double> %1005, <2 x double> poison, <2 x i32> zeroinitializer
  %1007 = shufflevector <2 x double> %710, <2 x double> poison, <2 x i32> <i32 1, i32 1>
  %1008 = shufflevector <2 x double> %710, <2 x double> poison, <2 x i32> zeroinitializer
  br label %1009

1009:                                             ; preds = %979, %1009
  %1010 = phi i64 [ 2, %979 ], [ %1053, %1009 ]
  %1011 = phi i32 [ 0, %979 ], [ %1052, %1009 ]
  %1012 = phi i16 [ %987, %979 ], [ %1019, %1009 ]
  %1013 = phi i16 [ %982, %979 ], [ %1022, %1009 ]
  %1014 = phi <2 x double> [ %1000, %979 ], [ %1056, %1009 ]
  %1015 = phi <2 x double> [ %1002, %979 ], [ %1058, %1009 ]
  %1016 = phi <2 x double> [ %1004, %979 ], [ %1060, %1009 ]
  %1017 = fsub <2 x double> %1006, %1014
  %1018 = getelementptr inbounds i16, ptr %974, i64 %1010
  %1019 = load i16, ptr %1018, align 2, !tbaa !44
  %1020 = or i64 %1010, 1
  %1021 = getelementptr inbounds i16, ptr %974, i64 %1020
  %1022 = load i16, ptr %1021, align 2, !tbaa !44
  %1023 = zext i16 %1019 to i64
  %1024 = getelementptr inbounds %struct.CompAtom, ptr %42, i64 %1023
  %1025 = load double, ptr %1024, align 8, !tbaa !67
  %1026 = zext i16 %1022 to i64
  %1027 = getelementptr inbounds %struct.CompAtom, ptr %42, i64 %1026
  %1028 = load double, ptr %1027, align 8, !tbaa !67
  %1029 = getelementptr inbounds %class.Vector, ptr %1024, i64 0, i32 1
  %1030 = load double, ptr %1029, align 8, !tbaa !66
  %1031 = getelementptr inbounds %class.Vector, ptr %1027, i64 0, i32 1
  %1032 = load double, ptr %1031, align 8, !tbaa !66
  %1033 = getelementptr inbounds %class.Vector, ptr %1024, i64 0, i32 2
  %1034 = load double, ptr %1033, align 8, !tbaa !49
  %1035 = getelementptr inbounds %class.Vector, ptr %1027, i64 0, i32 2
  %1036 = load double, ptr %1035, align 8, !tbaa !49
  %1037 = fsub <2 x double> %1008, %1016
  %1038 = fmul <2 x double> %1037, %1037
  %1039 = fsub <2 x double> %1007, %1015
  %1040 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %1039, <2 x double> %1039, <2 x double> %1038)
  %1041 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %1017, <2 x double> %1017, <2 x double> %1040)
  %1042 = fcmp olt <2 x double> %1041, %675
  %1043 = zext i32 %1011 to i64
  %1044 = getelementptr inbounds i16, ptr %284, i64 %1043
  store i16 %1012, ptr %1044, align 2, !tbaa !44
  %1045 = extractelement <2 x i1> %1042, i64 1
  %1046 = zext i1 %1045 to i32
  %1047 = add nuw nsw i32 %1011, %1046
  %1048 = zext i32 %1047 to i64
  %1049 = getelementptr inbounds i16, ptr %284, i64 %1048
  store i16 %1013, ptr %1049, align 2, !tbaa !44
  %1050 = extractelement <2 x i1> %1042, i64 0
  %1051 = zext i1 %1050 to i32
  %1052 = add i32 %1047, %1051
  %1053 = add nuw nsw i64 %1010, 2
  %1054 = icmp ult i64 %1053, %998
  %1055 = insertelement <2 x double> poison, double %1036, i64 0
  %1056 = insertelement <2 x double> %1055, double %1034, i64 1
  %1057 = insertelement <2 x double> poison, double %1032, i64 0
  %1058 = insertelement <2 x double> %1057, double %1030, i64 1
  %1059 = insertelement <2 x double> poison, double %1028, i64 0
  %1060 = insertelement <2 x double> %1059, double %1025, i64 1
  br i1 %1054, label %1009, label %1061

1061:                                             ; preds = %1009
  %1062 = trunc i64 %1010 to i32
  br label %1063

1063:                                             ; preds = %1061, %977
  %1064 = phi i32 [ %1052, %1061 ], [ 0, %977 ]
  %1065 = phi i32 [ %1062, %1061 ], [ 0, %977 ]
  %1066 = icmp slt i32 %1065, %975
  br i1 %1066, label %1067, label %1072

1067:                                             ; preds = %1063
  %1068 = zext i32 %1065 to i64
  %1069 = zext i32 %975 to i64
  %1070 = extractelement <2 x double> %710, i64 0
  %1071 = extractelement <2 x double> %710, i64 1
  br label %1077

1072:                                             ; preds = %1100, %1063
  %1073 = phi i32 [ %1064, %1063 ], [ %1101, %1100 ]
  %1074 = icmp sgt i32 %1073, 0
  br i1 %1074, label %1075, label %1128

1075:                                             ; preds = %1072
  %1076 = zext i32 %1073 to i64
  br label %1104

1077:                                             ; preds = %1067, %1100
  %1078 = phi i64 [ %1068, %1067 ], [ %1102, %1100 ]
  %1079 = phi i32 [ %1064, %1067 ], [ %1101, %1100 ]
  %1080 = getelementptr inbounds i16, ptr %974, i64 %1078
  %1081 = load i16, ptr %1080, align 2, !tbaa !44
  %1082 = zext i16 %1081 to i64
  %1083 = getelementptr inbounds %struct.CompAtom, ptr %42, i64 %1082
  %1084 = load double, ptr %1083, align 8, !tbaa !67
  %1085 = getelementptr inbounds %class.Vector, ptr %1083, i64 0, i32 1
  %1086 = load double, ptr %1085, align 8, !tbaa !66
  %1087 = getelementptr inbounds %class.Vector, ptr %1083, i64 0, i32 2
  %1088 = load double, ptr %1087, align 8, !tbaa !49
  %1089 = fsub double %1070, %1084
  %1090 = fmul double %1089, %1089
  %1091 = fsub double %1071, %1086
  %1092 = tail call double @llvm.fmuladd.f64(double %1091, double %1091, double %1090)
  %1093 = fsub double %713, %1088
  %1094 = tail call double @llvm.fmuladd.f64(double %1093, double %1093, double %1092)
  %1095 = fcmp ugt double %1094, %23
  br i1 %1095, label %1100, label %1096

1096:                                             ; preds = %1077
  %1097 = add nsw i32 %1079, 1
  %1098 = sext i32 %1079 to i64
  %1099 = getelementptr inbounds i16, ptr %284, i64 %1098
  store i16 %1081, ptr %1099, align 2, !tbaa !44
  br label %1100

1100:                                             ; preds = %1096, %1077
  %1101 = phi i32 [ %1097, %1096 ], [ %1079, %1077 ]
  %1102 = add nuw nsw i64 %1078, 1
  %1103 = icmp eq i64 %1102, %1069
  br i1 %1103, label %1072, label %1077

1104:                                             ; preds = %1075, %1121
  %1105 = phi i64 [ 0, %1075 ], [ %1124, %1121 ]
  %1106 = phi ptr [ %422, %1075 ], [ %1123, %1121 ]
  %1107 = getelementptr inbounds i16, ptr %284, i64 %1105
  %1108 = load i16, ptr %1107, align 2, !tbaa !44
  %1109 = zext i16 %1108 to i64
  %1110 = getelementptr inbounds %struct.CompAtom, ptr %42, i64 %1109, i32 4
  %1111 = load i8, ptr %1110, align 1
  %1112 = and i8 %1111, 7
  store i16 %1108, ptr %1106, align 2, !tbaa !44
  %1113 = getelementptr inbounds i16, ptr %1106, i64 1
  %1114 = insertelement <2 x i16> poison, i16 %1108, i64 0
  %1115 = shufflevector <2 x i16> %1114, <2 x i16> poison, <2 x i32> zeroinitializer
  %1116 = add <2 x i16> %1115, <i16 1, i16 2>
  store <2 x i16> %1116, ptr %1113, align 2, !tbaa !44
  %1117 = icmp ult i8 %1112, 4
  br i1 %1117, label %1121, label %1118

1118:                                             ; preds = %1104
  %1119 = add <2 x i16> %1115, <i16 3, i16 4>
  %1120 = getelementptr inbounds i16, ptr %1106, i64 3
  store <2 x i16> %1119, ptr %1120, align 2, !tbaa !44
  br label %1121

1121:                                             ; preds = %1118, %1104
  %1122 = zext i8 %1112 to i64
  %1123 = getelementptr inbounds i16, ptr %1106, i64 %1122
  %1124 = add nuw nsw i64 %1105, 1
  %1125 = icmp eq i64 %1124, %1076
  br i1 %1125, label %1126, label %1104

1126:                                             ; preds = %1121
  %1127 = ptrtoint ptr %1123 to i64
  br label %1128

1128:                                             ; preds = %1126, %1072, %973
  %1129 = phi i64 [ %1127, %1126 ], [ %655, %1072 ], [ %655, %973 ]
  %1130 = sub i64 %1129, %655
  %1131 = lshr exact i64 %1130, 1
  %1132 = trunc i64 %1131 to i32
  %1133 = icmp eq i32 %1132, 0
  br i1 %1133, label %1134, label %1139

1134:                                             ; preds = %1128
  %1135 = load i8, ptr %696, align 1
  %1136 = and i8 %1135, 7
  %1137 = zext i8 %1136 to i32
  %1138 = add nsw i32 %679, %1137
  br label %2628

1139:                                             ; preds = %1128
  %1140 = shl i64 %1130, 31
  %1141 = add i64 %1140, -4294967296
  %1142 = ashr i64 %1141, 32
  %1143 = getelementptr inbounds i16, ptr %422, i64 %1142
  %1144 = load i16, ptr %1143, align 2, !tbaa !44
  %1145 = ashr i64 %1140, 32
  %1146 = getelementptr inbounds i16, ptr %422, i64 %1145
  store i16 %1144, ptr %1146, align 2, !tbaa !44
  br label %1147

1147:                                             ; preds = %1139, %956
  %1148 = phi i32 [ %1132, %1139 ], [ %683, %956 ]
  %1149 = icmp eq i32 %964, 0
  br i1 %1149, label %1154, label %1150

1150:                                             ; preds = %1147
  %1151 = load i32, ptr %694, align 4
  %1152 = and i32 %1151, 1073741824
  %1153 = icmp ne i32 %1152, 0
  br label %1154

1154:                                             ; preds = %1150, %1147
  %1155 = phi i1 [ false, %1147 ], [ %1153, %1150 ]
  %1156 = load i32, ptr %13, align 8, !tbaa !17
  %1157 = add nsw i32 %656, %1156
  %1158 = load i32, ptr %657, align 4, !tbaa !68
  %1159 = icmp sgt i32 %1158, %1157
  br i1 %1159, label %1175, label %1160

1160:                                             ; preds = %1154, %1160
  %1161 = phi i32 [ %1163, %1160 ], [ %1158, %1154 ]
  %1162 = ashr i32 %1161, 1
  %1163 = add nsw i32 %1162, %1161
  %1164 = icmp sgt i32 %1163, %1157
  br i1 %1164, label %1165, label %1160

1165:                                             ; preds = %1160
  %1166 = sext i32 %1163 to i64
  %1167 = icmp slt i32 %1163, 0
  %1168 = shl nsw i64 %1166, 1
  %1169 = select i1 %1167, i64 -1, i64 %1168
  %1170 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %1169) #9
  %1171 = load ptr, ptr %8, align 8, !tbaa !46
  %1172 = sext i32 %1156 to i64
  %1173 = shl nsw i64 %1172, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 2 %1170, ptr align 2 %1171, i64 %1173, i1 false)
  %1174 = icmp eq ptr %1171, null
  br i1 %1174, label %1179, label %1177

1175:                                             ; preds = %1154
  %1176 = load ptr, ptr %8, align 8, !tbaa !46
  br label %1181

1177:                                             ; preds = %1165
  tail call void @_ZdaPv(ptr noundef nonnull %1171) #10
  %1178 = load i32, ptr %13, align 8, !tbaa !17
  br label %1179

1179:                                             ; preds = %1177, %1165
  %1180 = phi i32 [ %1178, %1177 ], [ %1156, %1165 ]
  store ptr %1170, ptr %8, align 8, !tbaa !46
  store i32 %1163, ptr %657, align 4, !tbaa !68
  br label %1181

1181:                                             ; preds = %1175, %1179
  %1182 = phi i32 [ %1156, %1175 ], [ %1180, %1179 ]
  %1183 = phi ptr [ %1176, %1175 ], [ %1170, %1179 ]
  %1184 = ptrtoint ptr %1183 to i64
  %1185 = add nsw i32 %1182, 1
  %1186 = sext i32 %1185 to i64
  %1187 = getelementptr inbounds i16, ptr %1183, i64 %1186
  %1188 = load i32, ptr @_ZN20ComputeNonbondedUtil17pairInteractionOnE, align 4, !tbaa !5
  %1189 = icmp eq i32 %1188, 0
  br i1 %1189, label %1371, label %1190

1190:                                             ; preds = %1181
  %1191 = getelementptr inbounds %struct.CompAtom, ptr %40, i64 %692, i32 3
  %1192 = load i8, ptr %1191, align 2, !tbaa !301
  %1193 = zext i8 %1192 to i32
  %1194 = load i32, ptr @_ZN20ComputeNonbondedUtil19pairInteractionSelfE, align 4, !tbaa !5
  %1195 = icmp eq i32 %1194, 0
  br i1 %1195, label %1236, label %1196

1196:                                             ; preds = %1190
  %1197 = icmp eq i8 %1192, 1
  br i1 %1197, label %1198, label %1206

1198:                                             ; preds = %1196
  %1199 = icmp sgt i32 %1148, 0
  br i1 %1199, label %1200, label %1311

1200:                                             ; preds = %1198
  %1201 = zext i32 %1148 to i64
  %1202 = and i64 %1201, 1
  %1203 = icmp eq i32 %1148, 1
  br i1 %1203, label %1297, label %1204

1204:                                             ; preds = %1200
  %1205 = and i64 %1201, 4294967294
  br label %1208

1206:                                             ; preds = %1196
  %1207 = add nsw i32 %679, 1
  br label %2628

1208:                                             ; preds = %1231, %1204
  %1209 = phi i64 [ 0, %1204 ], [ %1233, %1231 ]
  %1210 = phi ptr [ %468, %1204 ], [ %1232, %1231 ]
  %1211 = phi i64 [ 0, %1204 ], [ %1234, %1231 ]
  %1212 = getelementptr inbounds i16, ptr %422, i64 %1209
  %1213 = load i16, ptr %1212, align 2, !tbaa !44
  %1214 = zext i16 %1213 to i64
  %1215 = getelementptr inbounds %struct.CompAtom, ptr %42, i64 %1214, i32 3
  %1216 = load i8, ptr %1215, align 2, !tbaa !301
  %1217 = icmp eq i8 %1216, 1
  br i1 %1217, label %1218, label %1220

1218:                                             ; preds = %1208
  %1219 = getelementptr inbounds i16, ptr %1210, i64 1
  store i16 %1213, ptr %1210, align 2, !tbaa !44
  br label %1220

1220:                                             ; preds = %1218, %1208
  %1221 = phi ptr [ %1219, %1218 ], [ %1210, %1208 ]
  %1222 = or i64 %1209, 1
  %1223 = getelementptr inbounds i16, ptr %422, i64 %1222
  %1224 = load i16, ptr %1223, align 2, !tbaa !44
  %1225 = zext i16 %1224 to i64
  %1226 = getelementptr inbounds %struct.CompAtom, ptr %42, i64 %1225, i32 3
  %1227 = load i8, ptr %1226, align 2, !tbaa !301
  %1228 = icmp eq i8 %1227, 1
  br i1 %1228, label %1229, label %1231

1229:                                             ; preds = %1220
  %1230 = getelementptr inbounds i16, ptr %1221, i64 1
  store i16 %1224, ptr %1221, align 2, !tbaa !44
  br label %1231

1231:                                             ; preds = %1229, %1220
  %1232 = phi ptr [ %1230, %1229 ], [ %1221, %1220 ]
  %1233 = add nuw nsw i64 %1209, 2
  %1234 = add i64 %1211, 2
  %1235 = icmp eq i64 %1234, %1205
  br i1 %1235, label %1297, label %1208

1236:                                             ; preds = %1190
  %1237 = add i8 %1192, -3
  %1238 = icmp ult i8 %1237, -2
  br i1 %1238, label %1247, label %1239

1239:                                             ; preds = %1236
  %1240 = icmp sgt i32 %1148, 0
  br i1 %1240, label %1241, label %1311

1241:                                             ; preds = %1239
  %1242 = zext i32 %1148 to i64
  %1243 = and i64 %1242, 1
  %1244 = icmp eq i32 %1148, 1
  br i1 %1244, label %1281, label %1245

1245:                                             ; preds = %1241
  %1246 = and i64 %1242, 4294967294
  br label %1249

1247:                                             ; preds = %1236
  %1248 = add nsw i32 %679, 1
  br label %2628

1249:                                             ; preds = %1276, %1245
  %1250 = phi i64 [ 0, %1245 ], [ %1278, %1276 ]
  %1251 = phi ptr [ %468, %1245 ], [ %1277, %1276 ]
  %1252 = phi i64 [ 0, %1245 ], [ %1279, %1276 ]
  %1253 = getelementptr inbounds i16, ptr %422, i64 %1250
  %1254 = load i16, ptr %1253, align 2, !tbaa !44
  %1255 = zext i16 %1254 to i64
  %1256 = getelementptr inbounds %struct.CompAtom, ptr %42, i64 %1255, i32 3
  %1257 = load i8, ptr %1256, align 2, !tbaa !301
  %1258 = zext i8 %1257 to i32
  %1259 = add nuw nsw i32 %1258, %1193
  %1260 = icmp eq i32 %1259, 3
  br i1 %1260, label %1261, label %1263

1261:                                             ; preds = %1249
  %1262 = getelementptr inbounds i16, ptr %1251, i64 1
  store i16 %1254, ptr %1251, align 2, !tbaa !44
  br label %1263

1263:                                             ; preds = %1261, %1249
  %1264 = phi ptr [ %1262, %1261 ], [ %1251, %1249 ]
  %1265 = or i64 %1250, 1
  %1266 = getelementptr inbounds i16, ptr %422, i64 %1265
  %1267 = load i16, ptr %1266, align 2, !tbaa !44
  %1268 = zext i16 %1267 to i64
  %1269 = getelementptr inbounds %struct.CompAtom, ptr %42, i64 %1268, i32 3
  %1270 = load i8, ptr %1269, align 2, !tbaa !301
  %1271 = zext i8 %1270 to i32
  %1272 = add nuw nsw i32 %1271, %1193
  %1273 = icmp eq i32 %1272, 3
  br i1 %1273, label %1274, label %1276

1274:                                             ; preds = %1263
  %1275 = getelementptr inbounds i16, ptr %1264, i64 1
  store i16 %1267, ptr %1264, align 2, !tbaa !44
  br label %1276

1276:                                             ; preds = %1274, %1263
  %1277 = phi ptr [ %1275, %1274 ], [ %1264, %1263 ]
  %1278 = add nuw nsw i64 %1250, 2
  %1279 = add i64 %1252, 2
  %1280 = icmp eq i64 %1279, %1246
  br i1 %1280, label %1281, label %1249

1281:                                             ; preds = %1276, %1241
  %1282 = phi ptr [ undef, %1241 ], [ %1277, %1276 ]
  %1283 = phi i64 [ 0, %1241 ], [ %1278, %1276 ]
  %1284 = phi ptr [ %468, %1241 ], [ %1277, %1276 ]
  %1285 = icmp eq i64 %1243, 0
  br i1 %1285, label %1311, label %1286

1286:                                             ; preds = %1281
  %1287 = getelementptr inbounds i16, ptr %422, i64 %1283
  %1288 = load i16, ptr %1287, align 2, !tbaa !44
  %1289 = zext i16 %1288 to i64
  %1290 = getelementptr inbounds %struct.CompAtom, ptr %42, i64 %1289, i32 3
  %1291 = load i8, ptr %1290, align 2, !tbaa !301
  %1292 = zext i8 %1291 to i32
  %1293 = add nuw nsw i32 %1292, %1193
  %1294 = icmp eq i32 %1293, 3
  br i1 %1294, label %1295, label %1311

1295:                                             ; preds = %1286
  %1296 = getelementptr inbounds i16, ptr %1284, i64 1
  store i16 %1288, ptr %1284, align 2, !tbaa !44
  br label %1311

1297:                                             ; preds = %1231, %1200
  %1298 = phi ptr [ undef, %1200 ], [ %1232, %1231 ]
  %1299 = phi i64 [ 0, %1200 ], [ %1233, %1231 ]
  %1300 = phi ptr [ %468, %1200 ], [ %1232, %1231 ]
  %1301 = icmp eq i64 %1202, 0
  br i1 %1301, label %1311, label %1302

1302:                                             ; preds = %1297
  %1303 = getelementptr inbounds i16, ptr %422, i64 %1299
  %1304 = load i16, ptr %1303, align 2, !tbaa !44
  %1305 = zext i16 %1304 to i64
  %1306 = getelementptr inbounds %struct.CompAtom, ptr %42, i64 %1305, i32 3
  %1307 = load i8, ptr %1306, align 2, !tbaa !301
  %1308 = icmp eq i8 %1307, 1
  br i1 %1308, label %1309, label %1311

1309:                                             ; preds = %1302
  %1310 = getelementptr inbounds i16, ptr %1300, i64 1
  store i16 %1304, ptr %1300, align 2, !tbaa !44
  br label %1311

1311:                                             ; preds = %1297, %1309, %1302, %1281, %1295, %1286, %1198, %1239
  %1312 = phi ptr [ %468, %1239 ], [ %468, %1198 ], [ %1282, %1281 ], [ %1296, %1295 ], [ %1284, %1286 ], [ %1298, %1297 ], [ %1310, %1309 ], [ %1300, %1302 ]
  %1313 = ptrtoint ptr %1312 to i64
  %1314 = sub i64 %1313, %658
  %1315 = lshr exact i64 %1314, 1
  %1316 = trunc i64 %1315 to i32
  %1317 = icmp sgt i32 %1316, 0
  br i1 %1317, label %1318, label %1580

1318:                                             ; preds = %1311
  %1319 = and i64 %1315, 4294967295
  %1320 = extractelement <2 x double> %710, i64 0
  %1321 = extractelement <2 x double> %710, i64 1
  br label %1322

1322:                                             ; preds = %1318, %1366
  %1323 = phi i64 [ 0, %1318 ], [ %1369, %1366 ]
  %1324 = phi ptr [ %468, %1318 ], [ %1368, %1366 ]
  %1325 = phi ptr [ %1187, %1318 ], [ %1367, %1366 ]
  %1326 = getelementptr inbounds i16, ptr %468, i64 %1323
  %1327 = load i16, ptr %1326, align 2, !tbaa !44
  %1328 = zext i16 %1327 to i64
  %1329 = getelementptr inbounds %struct.CompAtom, ptr %42, i64 %1328
  %1330 = load double, ptr %1329, align 8, !tbaa !67
  %1331 = fsub double %1320, %1330
  %1332 = fmul double %1331, %1331
  %1333 = getelementptr inbounds %class.Vector, ptr %1329, i64 0, i32 1
  %1334 = load double, ptr %1333, align 8, !tbaa !66
  %1335 = fsub double %1321, %1334
  %1336 = tail call double @llvm.fmuladd.f64(double %1335, double %1335, double %1332)
  %1337 = getelementptr inbounds %class.Vector, ptr %1329, i64 0, i32 2
  %1338 = load double, ptr %1337, align 8, !tbaa !49
  %1339 = fsub double %713, %1338
  %1340 = tail call double @llvm.fmuladd.f64(double %1339, double %1339, double %1336)
  br i1 %1155, label %1341, label %1348

1341:                                             ; preds = %1322
  %1342 = getelementptr inbounds %struct.CompAtomExt, ptr %46, i64 %1328
  %1343 = load i32, ptr %1342, align 4
  %1344 = and i32 %1343, 1073741824
  %1345 = icmp ne i32 %1344, 0
  %1346 = fcmp ugt double %1340, %20
  %1347 = select i1 %1345, i1 true, i1 %1346
  br i1 %1347, label %1366, label %1353

1348:                                             ; preds = %1322
  %1349 = fcmp ugt double %1340, %20
  br i1 %1349, label %1366, label %1350

1350:                                             ; preds = %1348
  %1351 = getelementptr inbounds %struct.CompAtomExt, ptr %46, i64 %1328
  %1352 = load i32, ptr %1351, align 4
  br label %1353

1353:                                             ; preds = %1350, %1341
  %1354 = phi i32 [ %1352, %1350 ], [ %1343, %1341 ]
  %1355 = shl i32 %1354, 2
  %1356 = ashr exact i32 %1355, 2
  %1357 = icmp slt i32 %1356, %720
  %1358 = icmp sgt i32 %1356, %722
  %1359 = select i1 %1357, i1 true, i1 %1358
  %1360 = select i1 %1359, ptr %1325, ptr %1324
  %1361 = zext i1 %1359 to i64
  %1362 = getelementptr inbounds i16, ptr %1325, i64 %1361
  %1363 = xor i1 %1359, true
  %1364 = zext i1 %1363 to i64
  %1365 = getelementptr inbounds i16, ptr %1324, i64 %1364
  store i16 %1327, ptr %1360, align 2, !tbaa !44
  br label %1366

1366:                                             ; preds = %1353, %1348, %1341
  %1367 = phi ptr [ %1325, %1341 ], [ %1325, %1348 ], [ %1362, %1353 ]
  %1368 = phi ptr [ %1324, %1341 ], [ %1324, %1348 ], [ %1365, %1353 ]
  %1369 = add nuw nsw i64 %1323, 1
  %1370 = icmp eq i64 %1369, %1319
  br i1 %1370, label %1580, label %1322

1371:                                             ; preds = %1181
  %1372 = icmp sgt i32 %1148, 0
  br i1 %1155, label %1373, label %1420

1373:                                             ; preds = %1371
  br i1 %1372, label %1374, label %1580

1374:                                             ; preds = %1373
  %1375 = zext i32 %1148 to i64
  %1376 = extractelement <2 x double> %710, i64 0
  %1377 = extractelement <2 x double> %710, i64 1
  br label %1378

1378:                                             ; preds = %1374, %1415
  %1379 = phi i64 [ 0, %1374 ], [ %1418, %1415 ]
  %1380 = phi ptr [ %468, %1374 ], [ %1417, %1415 ]
  %1381 = phi ptr [ %1187, %1374 ], [ %1416, %1415 ]
  %1382 = getelementptr inbounds i16, ptr %422, i64 %1379
  %1383 = load i16, ptr %1382, align 2, !tbaa !44
  %1384 = zext i16 %1383 to i64
  %1385 = getelementptr inbounds %struct.CompAtomExt, ptr %46, i64 %1384
  %1386 = load i32, ptr %1385, align 4
  %1387 = and i32 %1386, 1073741824
  %1388 = icmp eq i32 %1387, 0
  br i1 %1388, label %1389, label %1415

1389:                                             ; preds = %1378
  %1390 = getelementptr inbounds %struct.CompAtom, ptr %42, i64 %1384
  %1391 = getelementptr inbounds %class.Vector, ptr %1390, i64 0, i32 2
  %1392 = load double, ptr %1391, align 8, !tbaa !49
  %1393 = fsub double %713, %1392
  %1394 = getelementptr inbounds %class.Vector, ptr %1390, i64 0, i32 1
  %1395 = load double, ptr %1394, align 8, !tbaa !66
  %1396 = fsub double %1377, %1395
  %1397 = load double, ptr %1390, align 8, !tbaa !67
  %1398 = fsub double %1376, %1397
  %1399 = fmul double %1398, %1398
  %1400 = tail call double @llvm.fmuladd.f64(double %1396, double %1396, double %1399)
  %1401 = tail call double @llvm.fmuladd.f64(double %1393, double %1393, double %1400)
  %1402 = fcmp ugt double %1401, %20
  br i1 %1402, label %1415, label %1403

1403:                                             ; preds = %1389
  %1404 = shl i32 %1386, 2
  %1405 = ashr exact i32 %1404, 2
  %1406 = icmp slt i32 %1405, %720
  %1407 = icmp sgt i32 %1405, %722
  %1408 = select i1 %1406, i1 true, i1 %1407
  %1409 = select i1 %1408, ptr %1381, ptr %1380
  %1410 = zext i1 %1408 to i64
  %1411 = getelementptr inbounds i16, ptr %1381, i64 %1410
  %1412 = xor i1 %1408, true
  %1413 = zext i1 %1412 to i64
  %1414 = getelementptr inbounds i16, ptr %1380, i64 %1413
  store i16 %1383, ptr %1409, align 2, !tbaa !44
  br label %1415

1415:                                             ; preds = %1403, %1389, %1378
  %1416 = phi ptr [ %1381, %1378 ], [ %1381, %1389 ], [ %1411, %1403 ]
  %1417 = phi ptr [ %1380, %1378 ], [ %1380, %1389 ], [ %1414, %1403 ]
  %1418 = add nuw nsw i64 %1379, 1
  %1419 = icmp eq i64 %1418, %1375
  br i1 %1419, label %1580, label %1378

1420:                                             ; preds = %1371
  br i1 %1372, label %1421, label %1580

1421:                                             ; preds = %1420
  %1422 = icmp ugt i32 %1148, 6
  br i1 %1422, label %1423, label %1531

1423:                                             ; preds = %1421
  %1424 = add nsw i32 %1148, -2
  %1425 = load i16, ptr %422, align 2, !tbaa !44
  %1426 = zext i16 %1425 to i64
  %1427 = getelementptr inbounds %struct.CompAtomExt, ptr %46, i64 %1426
  %1428 = load i32, ptr %1427, align 4
  %1429 = load i16, ptr %659, align 2, !tbaa !44
  %1430 = zext i16 %1429 to i64
  %1431 = getelementptr inbounds %struct.CompAtom, ptr %42, i64 %1430
  %1432 = getelementptr inbounds %class.Vector, ptr %1431, i64 0, i32 2
  %1433 = load double, ptr %1432, align 8, !tbaa !49
  %1434 = getelementptr inbounds %struct.CompAtom, ptr %42, i64 %1426
  %1435 = getelementptr inbounds %class.Vector, ptr %1434, i64 0, i32 2
  %1436 = load double, ptr %1435, align 8, !tbaa !49
  %1437 = getelementptr inbounds %class.Vector, ptr %1431, i64 0, i32 1
  %1438 = load double, ptr %1437, align 8, !tbaa !66
  %1439 = getelementptr inbounds %class.Vector, ptr %1434, i64 0, i32 1
  %1440 = load double, ptr %1439, align 8, !tbaa !66
  %1441 = load double, ptr %1431, align 8, !tbaa !67
  %1442 = load double, ptr %1434, align 8, !tbaa !67
  %1443 = zext i32 %1424 to i64
  %1444 = extractelement <2 x double> %710, i64 0
  %1445 = extractelement <2 x double> %710, i64 1
  br label %1446

1446:                                             ; preds = %1423, %1524
  %1447 = phi i64 [ 2, %1423 ], [ %1527, %1524 ]
  %1448 = phi i64 [ %1430, %1423 ], [ %1484, %1524 ]
  %1449 = phi i32 [ %1428, %1423 ], [ %1512, %1524 ]
  %1450 = phi ptr [ %468, %1423 ], [ %1526, %1524 ]
  %1451 = phi ptr [ %1187, %1423 ], [ %1525, %1524 ]
  %1452 = phi i16 [ %1425, %1423 ], [ %1477, %1524 ]
  %1453 = phi i16 [ %1429, %1423 ], [ %1480, %1524 ]
  %1454 = phi double [ %1442, %1423 ], [ %1483, %1524 ]
  %1455 = phi double [ %1441, %1423 ], [ %1486, %1524 ]
  %1456 = phi double [ %1440, %1423 ], [ %1488, %1524 ]
  %1457 = phi double [ %1438, %1423 ], [ %1490, %1524 ]
  %1458 = phi double [ %1436, %1423 ], [ %1492, %1524 ]
  %1459 = phi double [ %1433, %1423 ], [ %1494, %1524 ]
  %1460 = getelementptr inbounds %struct.CompAtomExt, ptr %46, i64 %1448
  %1461 = load i32, ptr %1460, align 4
  %1462 = shl i32 %1461, 2
  %1463 = ashr exact i32 %1462, 2
  %1464 = fsub double %1444, %1454
  %1465 = fsub double %1444, %1455
  %1466 = fmul double %1464, %1464
  %1467 = fmul double %1465, %1465
  %1468 = fsub double %1445, %1456
  %1469 = fsub double %1445, %1457
  %1470 = tail call double @llvm.fmuladd.f64(double %1468, double %1468, double %1466)
  %1471 = tail call double @llvm.fmuladd.f64(double %1469, double %1469, double %1467)
  %1472 = fsub double %713, %1458
  %1473 = fsub double %713, %1459
  %1474 = tail call double @llvm.fmuladd.f64(double %1472, double %1472, double %1470)
  %1475 = tail call double @llvm.fmuladd.f64(double %1473, double %1473, double %1471)
  %1476 = getelementptr inbounds i16, ptr %422, i64 %1447
  %1477 = load i16, ptr %1476, align 2, !tbaa !44
  %1478 = or i64 %1447, 1
  %1479 = getelementptr inbounds i16, ptr %422, i64 %1478
  %1480 = load i16, ptr %1479, align 2, !tbaa !44
  %1481 = zext i16 %1477 to i64
  %1482 = getelementptr inbounds %struct.CompAtom, ptr %42, i64 %1481
  %1483 = load double, ptr %1482, align 8, !tbaa !67
  %1484 = zext i16 %1480 to i64
  %1485 = getelementptr inbounds %struct.CompAtom, ptr %42, i64 %1484
  %1486 = load double, ptr %1485, align 8, !tbaa !67
  %1487 = getelementptr inbounds %class.Vector, ptr %1482, i64 0, i32 1
  %1488 = load double, ptr %1487, align 8, !tbaa !66
  %1489 = getelementptr inbounds %class.Vector, ptr %1485, i64 0, i32 1
  %1490 = load double, ptr %1489, align 8, !tbaa !66
  %1491 = getelementptr inbounds %class.Vector, ptr %1482, i64 0, i32 2
  %1492 = load double, ptr %1491, align 8, !tbaa !49
  %1493 = getelementptr inbounds %class.Vector, ptr %1485, i64 0, i32 2
  %1494 = load double, ptr %1493, align 8, !tbaa !49
  %1495 = fcmp ugt double %1474, %20
  br i1 %1495, label %1508, label %1496

1496:                                             ; preds = %1446
  %1497 = shl i32 %1449, 2
  %1498 = ashr exact i32 %1497, 2
  %1499 = icmp slt i32 %1498, %720
  %1500 = icmp sgt i32 %1498, %722
  %1501 = select i1 %1499, i1 true, i1 %1500
  %1502 = select i1 %1501, ptr %1451, ptr %1450
  %1503 = zext i1 %1501 to i64
  %1504 = getelementptr inbounds i16, ptr %1451, i64 %1503
  %1505 = xor i1 %1501, true
  %1506 = zext i1 %1505 to i64
  %1507 = getelementptr inbounds i16, ptr %1450, i64 %1506
  store i16 %1452, ptr %1502, align 2, !tbaa !44
  br label %1508

1508:                                             ; preds = %1496, %1446
  %1509 = phi ptr [ %1451, %1446 ], [ %1504, %1496 ]
  %1510 = phi ptr [ %1450, %1446 ], [ %1507, %1496 ]
  %1511 = getelementptr inbounds %struct.CompAtomExt, ptr %46, i64 %1481
  %1512 = load i32, ptr %1511, align 4
  %1513 = fcmp ugt double %1475, %20
  br i1 %1513, label %1524, label %1514

1514:                                             ; preds = %1508
  %1515 = icmp slt i32 %1463, %720
  %1516 = icmp sgt i32 %1463, %722
  %1517 = select i1 %1515, i1 true, i1 %1516
  %1518 = select i1 %1517, ptr %1509, ptr %1510
  %1519 = zext i1 %1517 to i64
  %1520 = getelementptr inbounds i16, ptr %1509, i64 %1519
  %1521 = xor i1 %1517, true
  %1522 = zext i1 %1521 to i64
  %1523 = getelementptr inbounds i16, ptr %1510, i64 %1522
  store i16 %1453, ptr %1518, align 2, !tbaa !44
  br label %1524

1524:                                             ; preds = %1514, %1508
  %1525 = phi ptr [ %1509, %1508 ], [ %1520, %1514 ]
  %1526 = phi ptr [ %1510, %1508 ], [ %1523, %1514 ]
  %1527 = add nuw nsw i64 %1447, 2
  %1528 = icmp ult i64 %1527, %1443
  br i1 %1528, label %1446, label %1529

1529:                                             ; preds = %1524
  %1530 = trunc i64 %1447 to i32
  br label %1531

1531:                                             ; preds = %1529, %1421
  %1532 = phi i32 [ %1530, %1529 ], [ 0, %1421 ]
  %1533 = phi ptr [ %1525, %1529 ], [ %1187, %1421 ]
  %1534 = phi ptr [ %1526, %1529 ], [ %468, %1421 ]
  %1535 = icmp slt i32 %1532, %1148
  br i1 %1535, label %1536, label %1580

1536:                                             ; preds = %1531
  %1537 = zext i32 %1532 to i64
  %1538 = zext i32 %1148 to i64
  %1539 = extractelement <2 x double> %710, i64 0
  %1540 = extractelement <2 x double> %710, i64 1
  br label %1541

1541:                                             ; preds = %1536, %1575
  %1542 = phi i64 [ %1537, %1536 ], [ %1578, %1575 ]
  %1543 = phi ptr [ %1534, %1536 ], [ %1577, %1575 ]
  %1544 = phi ptr [ %1533, %1536 ], [ %1576, %1575 ]
  %1545 = getelementptr inbounds i16, ptr %422, i64 %1542
  %1546 = load i16, ptr %1545, align 2, !tbaa !44
  %1547 = zext i16 %1546 to i64
  %1548 = getelementptr inbounds %struct.CompAtom, ptr %42, i64 %1547
  %1549 = load double, ptr %1548, align 8, !tbaa !67
  %1550 = getelementptr inbounds %class.Vector, ptr %1548, i64 0, i32 1
  %1551 = load double, ptr %1550, align 8, !tbaa !66
  %1552 = getelementptr inbounds %class.Vector, ptr %1548, i64 0, i32 2
  %1553 = load double, ptr %1552, align 8, !tbaa !49
  %1554 = fsub double %1539, %1549
  %1555 = fmul double %1554, %1554
  %1556 = fsub double %1540, %1551
  %1557 = tail call double @llvm.fmuladd.f64(double %1556, double %1556, double %1555)
  %1558 = fsub double %713, %1553
  %1559 = tail call double @llvm.fmuladd.f64(double %1558, double %1558, double %1557)
  %1560 = fcmp ugt double %1559, %20
  br i1 %1560, label %1575, label %1561

1561:                                             ; preds = %1541
  %1562 = getelementptr inbounds %struct.CompAtomExt, ptr %46, i64 %1547
  %1563 = load i32, ptr %1562, align 4
  %1564 = shl i32 %1563, 2
  %1565 = ashr exact i32 %1564, 2
  %1566 = icmp slt i32 %1565, %720
  %1567 = icmp sgt i32 %1565, %722
  %1568 = select i1 %1566, i1 true, i1 %1567
  %1569 = select i1 %1568, ptr %1544, ptr %1543
  %1570 = zext i1 %1568 to i64
  %1571 = getelementptr inbounds i16, ptr %1544, i64 %1570
  %1572 = xor i1 %1568, true
  %1573 = zext i1 %1572 to i64
  %1574 = getelementptr inbounds i16, ptr %1543, i64 %1573
  store i16 %1546, ptr %1569, align 2, !tbaa !44
  br label %1575

1575:                                             ; preds = %1561, %1541
  %1576 = phi ptr [ %1544, %1541 ], [ %1571, %1561 ]
  %1577 = phi ptr [ %1543, %1541 ], [ %1574, %1561 ]
  %1578 = add nuw nsw i64 %1542, 1
  %1579 = icmp eq i64 %1578, %1538
  br i1 %1579, label %1580, label %1541

1580:                                             ; preds = %1366, %1575, %1415, %1311, %1531, %1373, %1420
  %1581 = phi ptr [ %1187, %1420 ], [ %1187, %1373 ], [ %1533, %1531 ], [ %1187, %1311 ], [ %1416, %1415 ], [ %1576, %1575 ], [ %1367, %1366 ]
  %1582 = phi ptr [ %468, %1420 ], [ %468, %1373 ], [ %1534, %1531 ], [ %468, %1311 ], [ %1417, %1415 ], [ %1577, %1575 ], [ %1368, %1366 ]
  %1583 = icmp eq ptr %1581, %1187
  %1584 = icmp eq ptr %1582, %468
  %1585 = select i1 %1583, i1 %1584, i1 false
  br i1 %1585, label %1586, label %1588

1586:                                             ; preds = %1580
  %1587 = add nsw i32 %679, 1
  br label %2628

1588:                                             ; preds = %1580
  %1589 = trunc i32 %679 to i16
  %1590 = load i32, ptr %13, align 8, !tbaa !17
  %1591 = add nsw i32 %1590, -1
  %1592 = sext i32 %1591 to i64
  %1593 = getelementptr inbounds i16, ptr %1183, i64 %1592
  store i16 %1589, ptr %1593, align 2, !tbaa !44
  %1594 = ptrtoint ptr %1582 to i64
  %1595 = sub i64 %1594, %658
  %1596 = lshr exact i64 %1595, 1
  %1597 = trunc i64 %1596 to i32
  %1598 = icmp sgt i32 %1597, 0
  br i1 %1598, label %1599, label %1699

1599:                                             ; preds = %1588
  %1600 = and i64 %1596, 4294967295
  %1601 = and i64 %1596, 1
  %1602 = icmp eq i64 %1600, 1
  br i1 %1602, label %1667, label %1603

1603:                                             ; preds = %1599
  %1604 = sub nsw i64 %1600, %1601
  br label %1605

1605:                                             ; preds = %1660, %1603
  %1606 = phi i64 [ 0, %1603 ], [ %1664, %1660 ]
  %1607 = phi ptr [ %1581, %1603 ], [ %1663, %1660 ]
  %1608 = phi ptr [ %330, %1603 ], [ %1662, %1660 ]
  %1609 = phi ptr [ %376, %1603 ], [ %1661, %1660 ]
  %1610 = phi i64 [ 0, %1603 ], [ %1665, %1660 ]
  %1611 = getelementptr inbounds i16, ptr %468, i64 %1606
  %1612 = load i16, ptr %1611, align 2, !tbaa !44
  %1613 = zext i16 %1612 to i64
  %1614 = getelementptr inbounds %struct.CompAtomExt, ptr %46, i64 %1613
  %1615 = load i32, ptr %1614, align 4
  %1616 = shl i32 %1615, 2
  %1617 = ashr exact i32 %1616, 2
  %1618 = sext i32 %1617 to i64
  %1619 = getelementptr inbounds i8, ptr %957, i64 %1618
  %1620 = load i8, ptr %1619, align 1, !tbaa !57
  %1621 = sext i8 %1620 to i32
  switch i32 %1621, label %1633 [
    i32 0, label %1622
    i32 1, label %1624
    i32 2, label %1626
  ]

1622:                                             ; preds = %1605
  %1623 = getelementptr inbounds i16, ptr %1607, i64 1
  br label %1628

1624:                                             ; preds = %1605
  %1625 = getelementptr inbounds i16, ptr %1608, i64 1
  br label %1628

1626:                                             ; preds = %1605
  %1627 = getelementptr inbounds i16, ptr %1609, i64 1
  br label %1628

1628:                                             ; preds = %1622, %1624, %1626
  %1629 = phi ptr [ %1609, %1626 ], [ %1608, %1624 ], [ %1607, %1622 ]
  %1630 = phi ptr [ %1627, %1626 ], [ %1609, %1624 ], [ %1609, %1622 ]
  %1631 = phi ptr [ %1608, %1626 ], [ %1625, %1624 ], [ %1608, %1622 ]
  %1632 = phi ptr [ %1607, %1626 ], [ %1607, %1624 ], [ %1623, %1622 ]
  store i16 %1612, ptr %1629, align 2, !tbaa !44
  br label %1633

1633:                                             ; preds = %1628, %1605
  %1634 = phi ptr [ %1609, %1605 ], [ %1630, %1628 ]
  %1635 = phi ptr [ %1608, %1605 ], [ %1631, %1628 ]
  %1636 = phi ptr [ %1607, %1605 ], [ %1632, %1628 ]
  %1637 = or i64 %1606, 1
  %1638 = getelementptr inbounds i16, ptr %468, i64 %1637
  %1639 = load i16, ptr %1638, align 2, !tbaa !44
  %1640 = zext i16 %1639 to i64
  %1641 = getelementptr inbounds %struct.CompAtomExt, ptr %46, i64 %1640
  %1642 = load i32, ptr %1641, align 4
  %1643 = shl i32 %1642, 2
  %1644 = ashr exact i32 %1643, 2
  %1645 = sext i32 %1644 to i64
  %1646 = getelementptr inbounds i8, ptr %957, i64 %1645
  %1647 = load i8, ptr %1646, align 1, !tbaa !57
  %1648 = sext i8 %1647 to i32
  switch i32 %1648, label %1660 [
    i32 0, label %1653
    i32 1, label %1651
    i32 2, label %1649
  ]

1649:                                             ; preds = %1633
  %1650 = getelementptr inbounds i16, ptr %1634, i64 1
  br label %1655

1651:                                             ; preds = %1633
  %1652 = getelementptr inbounds i16, ptr %1635, i64 1
  br label %1655

1653:                                             ; preds = %1633
  %1654 = getelementptr inbounds i16, ptr %1636, i64 1
  br label %1655

1655:                                             ; preds = %1653, %1651, %1649
  %1656 = phi ptr [ %1634, %1649 ], [ %1635, %1651 ], [ %1636, %1653 ]
  %1657 = phi ptr [ %1650, %1649 ], [ %1634, %1651 ], [ %1634, %1653 ]
  %1658 = phi ptr [ %1635, %1649 ], [ %1652, %1651 ], [ %1635, %1653 ]
  %1659 = phi ptr [ %1636, %1649 ], [ %1636, %1651 ], [ %1654, %1653 ]
  store i16 %1639, ptr %1656, align 2, !tbaa !44
  br label %1660

1660:                                             ; preds = %1655, %1633
  %1661 = phi ptr [ %1634, %1633 ], [ %1657, %1655 ]
  %1662 = phi ptr [ %1635, %1633 ], [ %1658, %1655 ]
  %1663 = phi ptr [ %1636, %1633 ], [ %1659, %1655 ]
  %1664 = add nuw nsw i64 %1606, 2
  %1665 = add i64 %1610, 2
  %1666 = icmp eq i64 %1665, %1604
  br i1 %1666, label %1667, label %1605

1667:                                             ; preds = %1660, %1599
  %1668 = phi ptr [ undef, %1599 ], [ %1661, %1660 ]
  %1669 = phi ptr [ undef, %1599 ], [ %1662, %1660 ]
  %1670 = phi ptr [ undef, %1599 ], [ %1663, %1660 ]
  %1671 = phi i64 [ 0, %1599 ], [ %1664, %1660 ]
  %1672 = phi ptr [ %1581, %1599 ], [ %1663, %1660 ]
  %1673 = phi ptr [ %330, %1599 ], [ %1662, %1660 ]
  %1674 = phi ptr [ %376, %1599 ], [ %1661, %1660 ]
  %1675 = icmp eq i64 %1601, 0
  br i1 %1675, label %1699, label %1676

1676:                                             ; preds = %1667
  %1677 = getelementptr inbounds i16, ptr %468, i64 %1671
  %1678 = load i16, ptr %1677, align 2, !tbaa !44
  %1679 = zext i16 %1678 to i64
  %1680 = getelementptr inbounds %struct.CompAtomExt, ptr %46, i64 %1679
  %1681 = load i32, ptr %1680, align 4
  %1682 = shl i32 %1681, 2
  %1683 = ashr exact i32 %1682, 2
  %1684 = sext i32 %1683 to i64
  %1685 = getelementptr inbounds i8, ptr %957, i64 %1684
  %1686 = load i8, ptr %1685, align 1, !tbaa !57
  %1687 = sext i8 %1686 to i32
  switch i32 %1687, label %1699 [
    i32 0, label %1692
    i32 1, label %1690
    i32 2, label %1688
  ]

1688:                                             ; preds = %1676
  %1689 = getelementptr inbounds i16, ptr %1674, i64 1
  br label %1694

1690:                                             ; preds = %1676
  %1691 = getelementptr inbounds i16, ptr %1673, i64 1
  br label %1694

1692:                                             ; preds = %1676
  %1693 = getelementptr inbounds i16, ptr %1672, i64 1
  br label %1694

1694:                                             ; preds = %1692, %1690, %1688
  %1695 = phi ptr [ %1674, %1688 ], [ %1673, %1690 ], [ %1672, %1692 ]
  %1696 = phi ptr [ %1689, %1688 ], [ %1674, %1690 ], [ %1674, %1692 ]
  %1697 = phi ptr [ %1673, %1688 ], [ %1691, %1690 ], [ %1673, %1692 ]
  %1698 = phi ptr [ %1672, %1688 ], [ %1672, %1690 ], [ %1693, %1692 ]
  store i16 %1678, ptr %1695, align 2, !tbaa !44
  br label %1699

1699:                                             ; preds = %1667, %1694, %1676, %1588
  %1700 = phi ptr [ %376, %1588 ], [ %1668, %1667 ], [ %1674, %1676 ], [ %1696, %1694 ]
  %1701 = phi ptr [ %330, %1588 ], [ %1669, %1667 ], [ %1673, %1676 ], [ %1697, %1694 ]
  %1702 = phi ptr [ %1581, %1588 ], [ %1670, %1667 ], [ %1672, %1676 ], [ %1698, %1694 ]
  %1703 = ptrtoint ptr %1702 to i64
  %1704 = ptrtoint ptr %1187 to i64
  %1705 = sub i64 %1703, %1704
  %1706 = lshr exact i64 %1705, 1
  %1707 = trunc i64 %1706 to i32
  %1708 = icmp eq i32 %1707, 0
  %1709 = shl i64 %1705, 31
  br i1 %1708, label %1715, label %1710

1710:                                             ; preds = %1699
  %1711 = add i64 %1709, -4294967296
  %1712 = ashr i64 %1711, 32
  %1713 = getelementptr inbounds i16, ptr %1187, i64 %1712
  %1714 = load i16, ptr %1713, align 2, !tbaa !44
  br label %1715

1715:                                             ; preds = %1699, %1710
  %1716 = phi i16 [ %1714, %1710 ], [ -1, %1699 ]
  %1717 = ashr i64 %1709, 32
  %1718 = getelementptr inbounds i16, ptr %1187, i64 %1717
  store i16 %1716, ptr %1718, align 2, !tbaa !44
  %1719 = trunc i64 %1706 to i16
  %1720 = add i16 %1719, 1
  %1721 = sext i32 %1590 to i64
  %1722 = getelementptr inbounds i16, ptr %1183, i64 %1721
  store i16 %1720, ptr %1722, align 2, !tbaa !44
  %1723 = add i32 %1590, 2
  %1724 = add i32 %1723, %1707
  %1725 = ptrtoint ptr %1701 to i64
  %1726 = sub i64 %1725, %660
  %1727 = lshr exact i64 %1726, 1
  %1728 = trunc i64 %1727 to i32
  %1729 = add nsw i32 %1724, 1
  %1730 = sext i32 %1729 to i64
  %1731 = getelementptr i16, ptr %1183, i64 %1730
  %1732 = icmp sgt i32 %1728, 0
  br i1 %1732, label %1733, label %1823

1733:                                             ; preds = %1715
  %1734 = and i64 %1727, 4294967295
  %1735 = icmp ult i64 %1734, 8
  br i1 %1735, label %1779, label %1736

1736:                                             ; preds = %1733
  %1737 = shl nsw i64 %1730, 1
  %1738 = add i64 %1737, %1184
  %1739 = sub i64 %1738, %660
  %1740 = icmp ult i64 %1739, 128
  br i1 %1740, label %1779, label %1741

1741:                                             ; preds = %1736
  %1742 = icmp ult i64 %1734, 64
  br i1 %1742, label %1766, label %1743

1743:                                             ; preds = %1741
  %1744 = and i64 %1727, 63
  %1745 = sub nsw i64 %1734, %1744
  br label %1746

1746:                                             ; preds = %1746, %1743
  %1747 = phi i64 [ 0, %1743 ], [ %1760, %1746 ]
  %1748 = getelementptr inbounds i16, ptr %330, i64 %1747
  %1749 = load <16 x i16>, ptr %1748, align 2, !tbaa !44
  %1750 = getelementptr inbounds i16, ptr %1748, i64 16
  %1751 = load <16 x i16>, ptr %1750, align 2, !tbaa !44
  %1752 = getelementptr inbounds i16, ptr %1748, i64 32
  %1753 = load <16 x i16>, ptr %1752, align 2, !tbaa !44
  %1754 = getelementptr inbounds i16, ptr %1748, i64 48
  %1755 = load <16 x i16>, ptr %1754, align 2, !tbaa !44
  %1756 = getelementptr inbounds i16, ptr %1731, i64 %1747
  store <16 x i16> %1749, ptr %1756, align 2, !tbaa !44
  %1757 = getelementptr inbounds i16, ptr %1756, i64 16
  store <16 x i16> %1751, ptr %1757, align 2, !tbaa !44
  %1758 = getelementptr inbounds i16, ptr %1756, i64 32
  store <16 x i16> %1753, ptr %1758, align 2, !tbaa !44
  %1759 = getelementptr inbounds i16, ptr %1756, i64 48
  store <16 x i16> %1755, ptr %1759, align 2, !tbaa !44
  %1760 = add nuw i64 %1747, 64
  %1761 = icmp eq i64 %1760, %1745
  br i1 %1761, label %1762, label %1746, !llvm.loop !314

1762:                                             ; preds = %1746
  %1763 = icmp eq i64 %1744, 0
  br i1 %1763, label %1817, label %1764

1764:                                             ; preds = %1762
  %1765 = icmp ult i64 %1744, 8
  br i1 %1765, label %1779, label %1766

1766:                                             ; preds = %1741, %1764
  %1767 = phi i64 [ %1745, %1764 ], [ 0, %1741 ]
  %1768 = and i64 %1727, 7
  %1769 = sub nsw i64 %1734, %1768
  br label %1770

1770:                                             ; preds = %1770, %1766
  %1771 = phi i64 [ %1767, %1766 ], [ %1775, %1770 ]
  %1772 = getelementptr inbounds i16, ptr %330, i64 %1771
  %1773 = load <8 x i16>, ptr %1772, align 2, !tbaa !44
  %1774 = getelementptr inbounds i16, ptr %1731, i64 %1771
  store <8 x i16> %1773, ptr %1774, align 2, !tbaa !44
  %1775 = add nuw i64 %1771, 8
  %1776 = icmp eq i64 %1775, %1769
  br i1 %1776, label %1777, label %1770, !llvm.loop !315

1777:                                             ; preds = %1770
  %1778 = icmp eq i64 %1768, 0
  br i1 %1778, label %1817, label %1779

1779:                                             ; preds = %1736, %1733, %1764, %1777
  %1780 = phi i64 [ 0, %1733 ], [ 0, %1736 ], [ %1745, %1764 ], [ %1769, %1777 ]
  %1781 = sub i64 %1727, %1780
  %1782 = xor i64 %1780, -1
  %1783 = add nsw i64 %1734, %1782
  %1784 = and i64 %1781, 3
  %1785 = icmp eq i64 %1784, 0
  br i1 %1785, label %1795, label %1786

1786:                                             ; preds = %1779, %1786
  %1787 = phi i64 [ %1792, %1786 ], [ %1780, %1779 ]
  %1788 = phi i64 [ %1793, %1786 ], [ 0, %1779 ]
  %1789 = getelementptr inbounds i16, ptr %330, i64 %1787
  %1790 = load i16, ptr %1789, align 2, !tbaa !44
  %1791 = getelementptr inbounds i16, ptr %1731, i64 %1787
  store i16 %1790, ptr %1791, align 2, !tbaa !44
  %1792 = add nuw nsw i64 %1787, 1
  %1793 = add i64 %1788, 1
  %1794 = icmp eq i64 %1793, %1784
  br i1 %1794, label %1795, label %1786, !llvm.loop !316

1795:                                             ; preds = %1786, %1779
  %1796 = phi i64 [ %1780, %1779 ], [ %1792, %1786 ]
  %1797 = icmp ult i64 %1783, 3
  br i1 %1797, label %1817, label %1798

1798:                                             ; preds = %1795, %1798
  %1799 = phi i64 [ %1815, %1798 ], [ %1796, %1795 ]
  %1800 = getelementptr inbounds i16, ptr %330, i64 %1799
  %1801 = load i16, ptr %1800, align 2, !tbaa !44
  %1802 = getelementptr inbounds i16, ptr %1731, i64 %1799
  store i16 %1801, ptr %1802, align 2, !tbaa !44
  %1803 = add nuw nsw i64 %1799, 1
  %1804 = getelementptr inbounds i16, ptr %330, i64 %1803
  %1805 = load i16, ptr %1804, align 2, !tbaa !44
  %1806 = getelementptr inbounds i16, ptr %1731, i64 %1803
  store i16 %1805, ptr %1806, align 2, !tbaa !44
  %1807 = add nuw nsw i64 %1799, 2
  %1808 = getelementptr inbounds i16, ptr %330, i64 %1807
  %1809 = load i16, ptr %1808, align 2, !tbaa !44
  %1810 = getelementptr inbounds i16, ptr %1731, i64 %1807
  store i16 %1809, ptr %1810, align 2, !tbaa !44
  %1811 = add nuw nsw i64 %1799, 3
  %1812 = getelementptr inbounds i16, ptr %330, i64 %1811
  %1813 = load i16, ptr %1812, align 2, !tbaa !44
  %1814 = getelementptr inbounds i16, ptr %1731, i64 %1811
  store i16 %1813, ptr %1814, align 2, !tbaa !44
  %1815 = add nuw nsw i64 %1799, 4
  %1816 = icmp eq i64 %1815, %1734
  br i1 %1816, label %1817, label %1798, !llvm.loop !317

1817:                                             ; preds = %1795, %1798, %1762, %1777
  %1818 = shl i64 %1726, 31
  %1819 = add i64 %1818, -4294967296
  %1820 = ashr i64 %1819, 32
  %1821 = getelementptr inbounds i16, ptr %1731, i64 %1820
  %1822 = load i16, ptr %1821, align 2, !tbaa !44
  br label %1823

1823:                                             ; preds = %1715, %1817
  %1824 = phi i64 [ %1727, %1817 ], [ 0, %1715 ]
  %1825 = phi i16 [ %1822, %1817 ], [ -1, %1715 ]
  %1826 = and i64 %1824, 4294967295
  %1827 = getelementptr inbounds i16, ptr %1731, i64 %1826
  store i16 %1825, ptr %1827, align 2, !tbaa !44
  %1828 = trunc i64 %1727 to i16
  %1829 = add i16 %1828, 1
  %1830 = sext i32 %1724 to i64
  %1831 = getelementptr inbounds i16, ptr %1183, i64 %1830
  store i16 %1829, ptr %1831, align 2, !tbaa !44
  %1832 = add nsw i32 %1728, 2
  %1833 = add nsw i32 %1832, %1724
  %1834 = ptrtoint ptr %1700 to i64
  %1835 = sub i64 %1834, %661
  %1836 = lshr exact i64 %1835, 1
  %1837 = trunc i64 %1836 to i32
  %1838 = add nsw i32 %1833, 1
  %1839 = sext i32 %1838 to i64
  %1840 = getelementptr i16, ptr %1183, i64 %1839
  %1841 = icmp sgt i32 %1837, 0
  br i1 %1841, label %1842, label %1932

1842:                                             ; preds = %1823
  %1843 = and i64 %1836, 4294967295
  %1844 = icmp ult i64 %1843, 8
  br i1 %1844, label %1888, label %1845

1845:                                             ; preds = %1842
  %1846 = shl nsw i64 %1839, 1
  %1847 = add i64 %1846, %1184
  %1848 = sub i64 %1847, %661
  %1849 = icmp ult i64 %1848, 128
  br i1 %1849, label %1888, label %1850

1850:                                             ; preds = %1845
  %1851 = icmp ult i64 %1843, 64
  br i1 %1851, label %1875, label %1852

1852:                                             ; preds = %1850
  %1853 = and i64 %1836, 63
  %1854 = sub nsw i64 %1843, %1853
  br label %1855

1855:                                             ; preds = %1855, %1852
  %1856 = phi i64 [ 0, %1852 ], [ %1869, %1855 ]
  %1857 = getelementptr inbounds i16, ptr %376, i64 %1856
  %1858 = load <16 x i16>, ptr %1857, align 2, !tbaa !44
  %1859 = getelementptr inbounds i16, ptr %1857, i64 16
  %1860 = load <16 x i16>, ptr %1859, align 2, !tbaa !44
  %1861 = getelementptr inbounds i16, ptr %1857, i64 32
  %1862 = load <16 x i16>, ptr %1861, align 2, !tbaa !44
  %1863 = getelementptr inbounds i16, ptr %1857, i64 48
  %1864 = load <16 x i16>, ptr %1863, align 2, !tbaa !44
  %1865 = getelementptr inbounds i16, ptr %1840, i64 %1856
  store <16 x i16> %1858, ptr %1865, align 2, !tbaa !44
  %1866 = getelementptr inbounds i16, ptr %1865, i64 16
  store <16 x i16> %1860, ptr %1866, align 2, !tbaa !44
  %1867 = getelementptr inbounds i16, ptr %1865, i64 32
  store <16 x i16> %1862, ptr %1867, align 2, !tbaa !44
  %1868 = getelementptr inbounds i16, ptr %1865, i64 48
  store <16 x i16> %1864, ptr %1868, align 2, !tbaa !44
  %1869 = add nuw i64 %1856, 64
  %1870 = icmp eq i64 %1869, %1854
  br i1 %1870, label %1871, label %1855, !llvm.loop !318

1871:                                             ; preds = %1855
  %1872 = icmp eq i64 %1853, 0
  br i1 %1872, label %1926, label %1873

1873:                                             ; preds = %1871
  %1874 = icmp ult i64 %1853, 8
  br i1 %1874, label %1888, label %1875

1875:                                             ; preds = %1850, %1873
  %1876 = phi i64 [ %1854, %1873 ], [ 0, %1850 ]
  %1877 = and i64 %1836, 7
  %1878 = sub nsw i64 %1843, %1877
  br label %1879

1879:                                             ; preds = %1879, %1875
  %1880 = phi i64 [ %1876, %1875 ], [ %1884, %1879 ]
  %1881 = getelementptr inbounds i16, ptr %376, i64 %1880
  %1882 = load <8 x i16>, ptr %1881, align 2, !tbaa !44
  %1883 = getelementptr inbounds i16, ptr %1840, i64 %1880
  store <8 x i16> %1882, ptr %1883, align 2, !tbaa !44
  %1884 = add nuw i64 %1880, 8
  %1885 = icmp eq i64 %1884, %1878
  br i1 %1885, label %1886, label %1879, !llvm.loop !319

1886:                                             ; preds = %1879
  %1887 = icmp eq i64 %1877, 0
  br i1 %1887, label %1926, label %1888

1888:                                             ; preds = %1845, %1842, %1873, %1886
  %1889 = phi i64 [ 0, %1842 ], [ 0, %1845 ], [ %1854, %1873 ], [ %1878, %1886 ]
  %1890 = sub i64 %1836, %1889
  %1891 = xor i64 %1889, -1
  %1892 = add nsw i64 %1843, %1891
  %1893 = and i64 %1890, 3
  %1894 = icmp eq i64 %1893, 0
  br i1 %1894, label %1904, label %1895

1895:                                             ; preds = %1888, %1895
  %1896 = phi i64 [ %1901, %1895 ], [ %1889, %1888 ]
  %1897 = phi i64 [ %1902, %1895 ], [ 0, %1888 ]
  %1898 = getelementptr inbounds i16, ptr %376, i64 %1896
  %1899 = load i16, ptr %1898, align 2, !tbaa !44
  %1900 = getelementptr inbounds i16, ptr %1840, i64 %1896
  store i16 %1899, ptr %1900, align 2, !tbaa !44
  %1901 = add nuw nsw i64 %1896, 1
  %1902 = add i64 %1897, 1
  %1903 = icmp eq i64 %1902, %1893
  br i1 %1903, label %1904, label %1895, !llvm.loop !320

1904:                                             ; preds = %1895, %1888
  %1905 = phi i64 [ %1889, %1888 ], [ %1901, %1895 ]
  %1906 = icmp ult i64 %1892, 3
  br i1 %1906, label %1926, label %1907

1907:                                             ; preds = %1904, %1907
  %1908 = phi i64 [ %1924, %1907 ], [ %1905, %1904 ]
  %1909 = getelementptr inbounds i16, ptr %376, i64 %1908
  %1910 = load i16, ptr %1909, align 2, !tbaa !44
  %1911 = getelementptr inbounds i16, ptr %1840, i64 %1908
  store i16 %1910, ptr %1911, align 2, !tbaa !44
  %1912 = add nuw nsw i64 %1908, 1
  %1913 = getelementptr inbounds i16, ptr %376, i64 %1912
  %1914 = load i16, ptr %1913, align 2, !tbaa !44
  %1915 = getelementptr inbounds i16, ptr %1840, i64 %1912
  store i16 %1914, ptr %1915, align 2, !tbaa !44
  %1916 = add nuw nsw i64 %1908, 2
  %1917 = getelementptr inbounds i16, ptr %376, i64 %1916
  %1918 = load i16, ptr %1917, align 2, !tbaa !44
  %1919 = getelementptr inbounds i16, ptr %1840, i64 %1916
  store i16 %1918, ptr %1919, align 2, !tbaa !44
  %1920 = add nuw nsw i64 %1908, 3
  %1921 = getelementptr inbounds i16, ptr %376, i64 %1920
  %1922 = load i16, ptr %1921, align 2, !tbaa !44
  %1923 = getelementptr inbounds i16, ptr %1840, i64 %1920
  store i16 %1922, ptr %1923, align 2, !tbaa !44
  %1924 = add nuw nsw i64 %1908, 4
  %1925 = icmp eq i64 %1924, %1843
  br i1 %1925, label %1926, label %1907, !llvm.loop !321

1926:                                             ; preds = %1904, %1907, %1871, %1886
  %1927 = shl i64 %1835, 31
  %1928 = add i64 %1927, -4294967296
  %1929 = ashr i64 %1928, 32
  %1930 = getelementptr inbounds i16, ptr %1840, i64 %1929
  %1931 = load i16, ptr %1930, align 2, !tbaa !44
  br label %1932

1932:                                             ; preds = %1823, %1926
  %1933 = phi i64 [ %1836, %1926 ], [ 0, %1823 ]
  %1934 = phi i16 [ %1931, %1926 ], [ -1, %1823 ]
  %1935 = and i64 %1933, 4294967295
  %1936 = getelementptr inbounds i16, ptr %1840, i64 %1935
  store i16 %1934, ptr %1936, align 2, !tbaa !44
  %1937 = trunc i64 %1836 to i16
  %1938 = add i16 %1937, 1
  %1939 = sext i32 %1833 to i64
  %1940 = getelementptr inbounds i16, ptr %1183, i64 %1939
  store i16 %1938, ptr %1940, align 2, !tbaa !44
  %1941 = add i32 %1837, 3
  %1942 = add i32 %1941, %1833
  %1943 = select i1 %143, i32 1, i32 %1942
  store i32 %1943, ptr %13, align 8, !tbaa !17
  br label %1979

1944:                                             ; preds = %676
  %1945 = load <2 x double>, ptr %693, align 8, !tbaa !19
  %1946 = fadd <2 x double> %15, %1945
  %1947 = getelementptr inbounds %class.Vector, ptr %693, i64 0, i32 2
  %1948 = load double, ptr %1947, align 8, !tbaa !49
  %1949 = fadd double %17, %1948
  %1950 = load ptr, ptr %8, align 8, !tbaa !46
  %1951 = load i32, ptr %13, align 8, !tbaa !17
  %1952 = add i32 %1951, 1
  %1953 = sext i32 %1952 to i64
  %1954 = getelementptr inbounds i16, ptr %1950, i64 %1953
  %1955 = sext i32 %1951 to i64
  %1956 = getelementptr inbounds i16, ptr %1950, i64 %1955
  %1957 = load i16, ptr %1956, align 2, !tbaa !44
  %1958 = zext i16 %1957 to i32
  %1959 = add i32 %1952, %1958
  %1960 = add nsw i32 %1958, -1
  %1961 = add i32 %1959, 1
  %1962 = sext i32 %1961 to i64
  %1963 = getelementptr inbounds i16, ptr %1950, i64 %1962
  %1964 = sext i32 %1959 to i64
  %1965 = getelementptr inbounds i16, ptr %1950, i64 %1964
  %1966 = load i16, ptr %1965, align 2, !tbaa !44
  %1967 = zext i16 %1966 to i32
  %1968 = add i32 %1961, %1967
  %1969 = add nsw i32 %1967, -1
  %1970 = add i32 %1968, 1
  %1971 = sext i32 %1970 to i64
  %1972 = getelementptr inbounds i16, ptr %1950, i64 %1971
  %1973 = sext i32 %1968 to i64
  %1974 = getelementptr inbounds i16, ptr %1950, i64 %1973
  %1975 = load i16, ptr %1974, align 2, !tbaa !44
  %1976 = zext i16 %1975 to i32
  %1977 = add i32 %1970, %1976
  store i32 %1977, ptr %13, align 8, !tbaa !17
  %1978 = add nsw i32 %1976, -1
  br label %1979

1979:                                             ; preds = %1932, %1944
  %1980 = phi double [ %1949, %1944 ], [ %713, %1932 ]
  %1981 = phi i32 [ %684, %1944 ], [ %708, %1932 ]
  %1982 = phi ptr [ %1954, %1944 ], [ %1187, %1932 ]
  %1983 = phi i32 [ %1960, %1944 ], [ %1707, %1932 ]
  %1984 = phi ptr [ %1963, %1944 ], [ %1731, %1932 ]
  %1985 = phi i32 [ %1969, %1944 ], [ %1728, %1932 ]
  %1986 = phi ptr [ %1972, %1944 ], [ %1840, %1932 ]
  %1987 = phi i32 [ %1978, %1944 ], [ %1837, %1932 ]
  %1988 = phi i32 [ %683, %1944 ], [ %1148, %1932 ]
  %1989 = phi ptr [ %682, %1944 ], [ %958, %1932 ]
  %1990 = phi ptr [ %681, %1944 ], [ %959, %1932 ]
  %1991 = phi ptr [ %680, %1944 ], [ %960, %1932 ]
  %1992 = phi <2 x double> [ %1946, %1944 ], [ %710, %1932 ]
  %1993 = load i32, ptr @_ZN20ComputeNonbondedUtil17pairInteractionOnE, align 4, !tbaa !5
  %1994 = icmp eq i32 %1993, 0
  %1995 = load i32, ptr @_ZN20ComputeNonbondedUtil19pairInteractionSelfE, align 4
  %1996 = icmp ne i32 %1995, 0
  %1997 = select i1 %1994, i1 true, i1 %1996
  br i1 %1997, label %2003, label %1998

1998:                                             ; preds = %1979
  %1999 = getelementptr inbounds %struct.CompAtom, ptr %40, i64 %692, i32 3
  %2000 = load i8, ptr %1999, align 2, !tbaa !301
  %2001 = icmp eq i8 %2000, 1
  %2002 = select i1 %2001, double 1.000000e+00, double -1.000000e+00
  br label %2003

2003:                                             ; preds = %1979, %1998
  %2004 = phi double [ %2002, %1998 ], [ 0.000000e+00, %1979 ]
  %2005 = getelementptr inbounds %struct.CompAtom, ptr %40, i64 %692, i32 1
  %2006 = load float, ptr %2005, align 8, !tbaa !79
  %2007 = fpext float %2006 to double
  %2008 = fmul double %2007, 0x4074C104816F0069
  %2009 = fmul double %29, %2008
  %2010 = fmul double %24, %2009
  %2011 = getelementptr inbounds %struct.CompAtom, ptr %40, i64 %692, i32 2
  %2012 = load i16, ptr %2011, align 4, !tbaa !80
  %2013 = sext i16 %2012 to i32
  %2014 = load ptr, ptr %662, align 8, !tbaa !81
  %2015 = load i32, ptr %663, align 8, !tbaa !83
  %2016 = shl nsw i32 %2013, 1
  %2017 = mul i32 %2016, %2015
  %2018 = zext i32 %2017 to i64
  %2019 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %2014, i64 %2018
  %2020 = load double, ptr @_ZN20ComputeNonbondedUtil7cutoff2E, align 8, !tbaa !19
  %2021 = extractelement <2 x double> %1992, i64 0
  %2022 = extractelement <2 x double> %1992, i64 1
  %2023 = tail call noundef i32 @_Z22pairlist_from_pairlistddddPK8CompAtomPKtiPtdPd(double noundef %2020, double noundef %2021, double noundef %2022, double noundef %1980, ptr noundef %42, ptr noundef nonnull %1982, i32 noundef %1983, ptr noundef %95, double noundef %32, ptr noundef %141)
  %2024 = icmp sgt i32 %2023, 0
  br i1 %2024, label %2025, label %2233

2025:                                             ; preds = %2003
  %2026 = load ptr, ptr @_ZN20ComputeNonbondedUtil8r2_tableE, align 8, !tbaa !23
  %2027 = zext i32 %2023 to i64
  br label %2028

2028:                                             ; preds = %2025, %2028
  %2029 = phi i64 [ 0, %2025 ], [ %2231, %2028 ]
  %2030 = phi double [ %678, %2025 ], [ %2201, %2028 ]
  %2031 = phi double [ 0.000000e+00, %2025 ], [ %2179, %2028 ]
  %2032 = phi double [ 0.000000e+00, %2025 ], [ %2227, %2028 ]
  %2033 = phi <2 x double> [ %685, %2025 ], [ %2171, %2028 ]
  %2034 = phi <2 x double> [ %686, %2025 ], [ %2164, %2028 ]
  %2035 = phi <2 x double> [ %687, %2025 ], [ %2220, %2028 ]
  %2036 = phi <2 x double> [ %688, %2025 ], [ %2214, %2028 ]
  %2037 = phi <2 x double> [ %689, %2025 ], [ %2142, %2028 ]
  %2038 = phi <2 x double> [ %690, %2025 ], [ %2177, %2028 ]
  %2039 = phi <2 x double> [ %691, %2025 ], [ %2225, %2028 ]
  %2040 = phi <2 x double> [ zeroinitializer, %2025 ], [ %2173, %2028 ]
  %2041 = phi <2 x double> [ zeroinitializer, %2025 ], [ %2222, %2028 ]
  %2042 = shl nuw nsw i64 %2029, 1
  %2043 = getelementptr inbounds i32, ptr %142, i64 %2042
  %2044 = load i32, ptr %2043, align 4, !tbaa !5
  %2045 = ashr i32 %2044, 14
  %2046 = add nsw i32 %2045, %35
  %2047 = getelementptr inbounds i16, ptr %95, i64 %2029
  %2048 = load i16, ptr %2047, align 2, !tbaa !44
  %2049 = zext i16 %2048 to i64
  %2050 = getelementptr inbounds %struct.CompAtom, ptr %42, i64 %2049
  %2051 = getelementptr inbounds double, ptr %141, i64 %2029
  %2052 = load double, ptr %2051, align 8, !tbaa !19
  %2053 = sext i32 %2046 to i64
  %2054 = getelementptr inbounds double, ptr %2026, i64 %2053
  %2055 = load double, ptr %2054, align 8, !tbaa !19
  %2056 = fsub double %2052, %2055
  %2057 = shl nsw i32 %2046, 4
  %2058 = sext i32 %2057 to i64
  %2059 = getelementptr inbounds double, ptr %27, i64 %2058
  %2060 = getelementptr inbounds %struct.CompAtom, ptr %42, i64 %2049, i32 2
  %2061 = load i16, ptr %2060, align 4, !tbaa !80
  %2062 = sext i16 %2061 to i32
  %2063 = shl nsw i32 %2062, 1
  %2064 = sext i32 %2063 to i64
  %2065 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %2019, i64 %2064
  %2066 = getelementptr inbounds %class.Vector, ptr %626, i64 %2049
  %2067 = getelementptr inbounds %class.Vector, ptr %630, i64 %2049
  %2068 = getelementptr inbounds %struct.CompAtom, ptr %42, i64 %2049, i32 1
  %2069 = load float, ptr %2068, align 8, !tbaa !79
  %2070 = fpext float %2069 to double
  %2071 = fmul double %2010, %2070
  %2072 = load <2 x double>, ptr %2050, align 8, !tbaa !19
  %2073 = fsub <2 x double> %1992, %2072
  %2074 = getelementptr inbounds %class.Vector, ptr %2050, i64 0, i32 2
  %2075 = load double, ptr %2074, align 8, !tbaa !49
  %2076 = fsub double %1980, %2075
  %2077 = load double, ptr %2065, align 8, !tbaa !84
  %2078 = fmul double %29, %2077
  %2079 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %2019, i64 %2064, i32 1
  %2080 = load double, ptr %2079, align 8, !tbaa !86
  %2081 = load double, ptr %2059, align 8, !tbaa !19
  %2082 = getelementptr inbounds double, ptr %2059, i64 2
  %2083 = load double, ptr %2082, align 8, !tbaa !19
  %2084 = fmul double %2080, %664
  %2085 = fmul double %2084, %2083
  %2086 = tail call double @llvm.fmuladd.f64(double %2078, double %2081, double %2085)
  %2087 = getelementptr inbounds double, ptr %2059, i64 1
  %2088 = load double, ptr %2087, align 8, !tbaa !19
  %2089 = getelementptr inbounds double, ptr %2059, i64 3
  %2090 = load double, ptr %2089, align 8, !tbaa !19
  %2091 = fmul double %2084, %2090
  %2092 = tail call double @llvm.fmuladd.f64(double %2078, double %2088, double %2091)
  %2093 = getelementptr inbounds double, ptr %2059, i64 4
  %2094 = load double, ptr %2093, align 8, !tbaa !19
  %2095 = getelementptr inbounds double, ptr %2059, i64 6
  %2096 = load double, ptr %2095, align 8, !tbaa !19
  %2097 = fmul double %2084, %2096
  %2098 = tail call double @llvm.fmuladd.f64(double %2078, double %2094, double %2097)
  %2099 = getelementptr inbounds double, ptr %2059, i64 5
  %2100 = load double, ptr %2099, align 8, !tbaa !19
  %2101 = getelementptr inbounds double, ptr %2059, i64 7
  %2102 = load double, ptr %2101, align 8, !tbaa !19
  %2103 = fmul double %2084, %2102
  %2104 = tail call double @llvm.fmuladd.f64(double %2078, double %2100, double %2103)
  %2105 = tail call double @llvm.fmuladd.f64(double %2056, double %2086, double %2092)
  %2106 = tail call double @llvm.fmuladd.f64(double %2105, double %2056, double %2098)
  %2107 = fmul double %2004, %2106
  %2108 = load <2 x double>, ptr %665, align 8, !tbaa !19
  %2109 = insertelement <2 x double> poison, double %2107, i64 0
  %2110 = shufflevector <2 x double> %2109, <2 x double> poison, <2 x i32> zeroinitializer
  %2111 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2110, <2 x double> %2073, <2 x double> %2108)
  store <2 x double> %2111, ptr %665, align 8, !tbaa !19
  %2112 = load double, ptr %666, align 8, !tbaa !19
  %2113 = tail call double @llvm.fmuladd.f64(double %2107, double %2076, double %2112)
  store double %2113, ptr %666, align 8, !tbaa !19
  %2114 = getelementptr inbounds double, ptr %2059, i64 8
  %2115 = load double, ptr %2114, align 8, !tbaa !19
  %2116 = fmul double %2071, %2115
  %2117 = getelementptr inbounds double, ptr %2059, i64 9
  %2118 = load double, ptr %2117, align 8, !tbaa !19
  %2119 = fmul double %2071, %2118
  %2120 = getelementptr inbounds double, ptr %2059, i64 10
  %2121 = load double, ptr %2120, align 8, !tbaa !19
  %2122 = fmul double %2071, %2121
  %2123 = getelementptr inbounds double, ptr %2059, i64 11
  %2124 = load double, ptr %2123, align 8, !tbaa !19
  %2125 = fmul double %2071, %2124
  %2126 = insertelement <2 x double> poison, double %2056, i64 0
  %2127 = shufflevector <2 x double> %2126, <2 x double> poison, <2 x i32> zeroinitializer
  %2128 = insertelement <2 x double> poison, double %2116, i64 0
  %2129 = insertelement <2 x double> %2128, double %2086, i64 1
  %2130 = fmul <2 x double> %2127, %2129
  %2131 = insertelement <2 x double> poison, double %2119, i64 0
  %2132 = insertelement <2 x double> %2131, double %2092, i64 1
  %2133 = fmul <2 x double> %2132, <double 2.500000e-01, double 2.500000e-01>
  %2134 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2130, <2 x double> <double 0x3FC5555555555555, double 0x3FC5555555555555>, <2 x double> %2133)
  %2135 = insertelement <2 x double> poison, double %2122, i64 0
  %2136 = insertelement <2 x double> %2135, double %2098, i64 1
  %2137 = fmul <2 x double> %2136, <double 5.000000e-01, double 5.000000e-01>
  %2138 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2134, <2 x double> %2127, <2 x double> %2137)
  %2139 = insertelement <2 x double> poison, double %2125, i64 0
  %2140 = insertelement <2 x double> %2139, double %2104, i64 1
  %2141 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2138, <2 x double> %2127, <2 x double> %2140)
  %2142 = fsub <2 x double> %2037, %2141
  %2143 = tail call double @llvm.fmuladd.f64(double %2056, double %2116, double %2119)
  %2144 = tail call double @llvm.fmuladd.f64(double %2143, double %2056, double %2122)
  %2145 = fmul double %2004, %2144
  %2146 = load double, ptr %667, align 8, !tbaa !19
  %2147 = extractelement <2 x double> %2073, i64 0
  %2148 = tail call double @llvm.fmuladd.f64(double %2145, double %2147, double %2146)
  store double %2148, ptr %667, align 8, !tbaa !19
  %2149 = load double, ptr %668, align 8, !tbaa !19
  %2150 = extractelement <2 x double> %2073, i64 1
  %2151 = tail call double @llvm.fmuladd.f64(double %2145, double %2150, double %2149)
  store double %2151, ptr %668, align 8, !tbaa !19
  %2152 = load double, ptr %669, align 8, !tbaa !19
  %2153 = tail call double @llvm.fmuladd.f64(double %2145, double %2076, double %2152)
  store double %2153, ptr %669, align 8, !tbaa !19
  %2154 = fadd double %2086, %2116
  %2155 = fadd double %2092, %2119
  %2156 = fadd double %2098, %2122
  %2157 = tail call double @llvm.fmuladd.f64(double %2056, double %2154, double %2155)
  %2158 = tail call double @llvm.fmuladd.f64(double %2157, double %2056, double %2156)
  %2159 = fmul double %2150, %2158
  %2160 = insertelement <2 x double> poison, double %2159, i64 0
  %2161 = shufflevector <2 x double> %2160, <2 x double> poison, <2 x i32> zeroinitializer
  %2162 = shufflevector <2 x double> %2073, <2 x double> poison, <2 x i32> <i32 1, i32 0>
  %2163 = insertelement <2 x double> %2162, double %2076, i64 1
  %2164 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2161, <2 x double> %2163, <2 x double> %2034)
  %2165 = insertelement <2 x double> %2162, double %2076, i64 0
  %2166 = insertelement <2 x double> poison, double %2158, i64 0
  %2167 = shufflevector <2 x double> %2166, <2 x double> poison, <2 x i32> zeroinitializer
  %2168 = fmul <2 x double> %2165, %2167
  %2169 = shufflevector <2 x double> %2168, <2 x double> poison, <2 x i32> <i32 1, i32 poison>
  %2170 = shufflevector <2 x double> %2168, <2 x double> poison, <2 x i32> <i32 1, i32 1>
  %2171 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2170, <2 x double> %2073, <2 x double> %2033)
  %2172 = insertelement <2 x double> %2169, double %2159, i64 1
  %2173 = fadd <2 x double> %2040, %2172
  %2174 = load <2 x double>, ptr %2066, align 8, !tbaa !19
  %2175 = fsub <2 x double> %2174, %2172
  store <2 x double> %2175, ptr %2066, align 8, !tbaa !19
  %2176 = shufflevector <2 x double> %2165, <2 x double> poison, <2 x i32> zeroinitializer
  %2177 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2168, <2 x double> %2176, <2 x double> %2038)
  %2178 = extractelement <2 x double> %2168, i64 0
  %2179 = fadd double %2031, %2178
  %2180 = getelementptr inbounds %class.Vector, ptr %626, i64 %2049, i32 2
  %2181 = load double, ptr %2180, align 8, !tbaa !87
  %2182 = fsub double %2181, %2178
  store double %2182, ptr %2180, align 8, !tbaa !87
  %2183 = getelementptr inbounds double, ptr %2059, i64 12
  %2184 = load double, ptr %2183, align 8, !tbaa !19
  %2185 = getelementptr inbounds double, ptr %2059, i64 13
  %2186 = load double, ptr %2185, align 8, !tbaa !19
  %2187 = getelementptr inbounds double, ptr %2059, i64 14
  %2188 = load double, ptr %2187, align 8, !tbaa !19
  %2189 = getelementptr inbounds double, ptr %2059, i64 15
  %2190 = load double, ptr %2189, align 8, !tbaa !19
  %2191 = fmul double %2071, %2184
  %2192 = fmul double %2071, %2186
  %2193 = fmul double %2071, %2188
  %2194 = fmul double %2071, %2190
  %2195 = fmul double %2056, %2191
  %2196 = fmul double %2192, 2.500000e-01
  %2197 = tail call double @llvm.fmuladd.f64(double %2195, double 0x3FC5555555555555, double %2196)
  %2198 = fmul double %2193, 5.000000e-01
  %2199 = tail call double @llvm.fmuladd.f64(double %2197, double %2056, double %2198)
  %2200 = tail call double @llvm.fmuladd.f64(double %2199, double %2056, double %2194)
  %2201 = fsub double %2030, %2200
  %2202 = tail call double @llvm.fmuladd.f64(double %2056, double %2191, double %2192)
  %2203 = tail call double @llvm.fmuladd.f64(double %2202, double %2056, double %2193)
  %2204 = fmul double %2004, %2203
  %2205 = load <2 x double>, ptr %667, align 8, !tbaa !19
  %2206 = insertelement <2 x double> poison, double %2204, i64 0
  %2207 = shufflevector <2 x double> %2206, <2 x double> poison, <2 x i32> zeroinitializer
  %2208 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2207, <2 x double> %2073, <2 x double> %2205)
  store <2 x double> %2208, ptr %667, align 8, !tbaa !19
  %2209 = load double, ptr %669, align 8, !tbaa !19
  %2210 = tail call double @llvm.fmuladd.f64(double %2204, double %2076, double %2209)
  store double %2210, ptr %669, align 8, !tbaa !19
  %2211 = fmul double %2150, %2203
  %2212 = insertelement <2 x double> poison, double %2211, i64 0
  %2213 = shufflevector <2 x double> %2212, <2 x double> poison, <2 x i32> zeroinitializer
  %2214 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2213, <2 x double> %2163, <2 x double> %2036)
  %2215 = insertelement <2 x double> poison, double %2203, i64 0
  %2216 = shufflevector <2 x double> %2215, <2 x double> poison, <2 x i32> zeroinitializer
  %2217 = fmul <2 x double> %2165, %2216
  %2218 = shufflevector <2 x double> %2217, <2 x double> poison, <2 x i32> <i32 1, i32 poison>
  %2219 = shufflevector <2 x double> %2217, <2 x double> poison, <2 x i32> <i32 1, i32 1>
  %2220 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2219, <2 x double> %2073, <2 x double> %2035)
  %2221 = insertelement <2 x double> %2218, double %2211, i64 1
  %2222 = fadd <2 x double> %2041, %2221
  %2223 = load <2 x double>, ptr %2067, align 8, !tbaa !19
  %2224 = fsub <2 x double> %2223, %2221
  store <2 x double> %2224, ptr %2067, align 8, !tbaa !19
  %2225 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2217, <2 x double> %2176, <2 x double> %2039)
  %2226 = extractelement <2 x double> %2217, i64 0
  %2227 = fadd double %2032, %2226
  %2228 = getelementptr inbounds %class.Vector, ptr %630, i64 %2049, i32 2
  %2229 = load double, ptr %2228, align 8, !tbaa !87
  %2230 = fsub double %2229, %2226
  store double %2230, ptr %2228, align 8, !tbaa !87
  %2231 = add nuw nsw i64 %2029, 1
  %2232 = icmp eq i64 %2231, %2027
  br i1 %2232, label %2233, label %2028

2233:                                             ; preds = %2028, %2003
  %2234 = phi double [ 0.000000e+00, %2003 ], [ %2227, %2028 ]
  %2235 = phi double [ 0.000000e+00, %2003 ], [ %2179, %2028 ]
  %2236 = phi double [ %678, %2003 ], [ %2201, %2028 ]
  %2237 = phi <2 x double> [ %685, %2003 ], [ %2171, %2028 ]
  %2238 = phi <2 x double> [ %686, %2003 ], [ %2164, %2028 ]
  %2239 = phi <2 x double> [ %687, %2003 ], [ %2220, %2028 ]
  %2240 = phi <2 x double> [ %688, %2003 ], [ %2214, %2028 ]
  %2241 = phi <2 x double> [ %689, %2003 ], [ %2142, %2028 ]
  %2242 = phi <2 x double> [ %690, %2003 ], [ %2177, %2028 ]
  %2243 = phi <2 x double> [ %691, %2003 ], [ %2225, %2028 ]
  %2244 = phi <2 x double> [ zeroinitializer, %2003 ], [ %2173, %2028 ]
  %2245 = phi <2 x double> [ zeroinitializer, %2003 ], [ %2222, %2028 ]
  %2246 = load double, ptr @_ZN20ComputeNonbondedUtil7cutoff2E, align 8, !tbaa !19
  %2247 = tail call noundef i32 @_Z22pairlist_from_pairlistddddPK8CompAtomPKtiPtdPd(double noundef %2246, double noundef %2021, double noundef %2022, double noundef %1980, ptr noundef %42, ptr noundef %1986, i32 noundef %1987, ptr noundef %95, double noundef %32, ptr noundef %141)
  %2248 = add nsw i32 %2247, %677
  %2249 = icmp sgt i32 %2247, 0
  br i1 %2249, label %2250, label %2474

2250:                                             ; preds = %2233
  %2251 = load ptr, ptr @_ZN20ComputeNonbondedUtil8r2_tableE, align 8, !tbaa !23
  %2252 = zext i32 %2247 to i64
  br label %2253

2253:                                             ; preds = %2250, %2253
  %2254 = phi i64 [ 0, %2250 ], [ %2472, %2253 ]
  %2255 = phi double [ %2236, %2250 ], [ %2442, %2253 ]
  %2256 = phi double [ %2235, %2250 ], [ %2406, %2253 ]
  %2257 = phi double [ %2234, %2250 ], [ %2468, %2253 ]
  %2258 = phi <2 x double> [ %2237, %2250 ], [ %2398, %2253 ]
  %2259 = phi <2 x double> [ %2238, %2250 ], [ %2391, %2253 ]
  %2260 = phi <2 x double> [ %2239, %2250 ], [ %2461, %2253 ]
  %2261 = phi <2 x double> [ %2240, %2250 ], [ %2455, %2253 ]
  %2262 = phi <2 x double> [ %2241, %2250 ], [ %2369, %2253 ]
  %2263 = phi <2 x double> [ %2242, %2250 ], [ %2404, %2253 ]
  %2264 = phi <2 x double> [ %2243, %2250 ], [ %2466, %2253 ]
  %2265 = phi <2 x double> [ %2244, %2250 ], [ %2400, %2253 ]
  %2266 = phi <2 x double> [ %2245, %2250 ], [ %2463, %2253 ]
  %2267 = shl nuw nsw i64 %2254, 1
  %2268 = getelementptr inbounds i32, ptr %142, i64 %2267
  %2269 = load i32, ptr %2268, align 4, !tbaa !5
  %2270 = ashr i32 %2269, 14
  %2271 = add nsw i32 %2270, %35
  %2272 = getelementptr inbounds i16, ptr %95, i64 %2254
  %2273 = load i16, ptr %2272, align 2, !tbaa !44
  %2274 = zext i16 %2273 to i64
  %2275 = getelementptr inbounds %struct.CompAtom, ptr %42, i64 %2274
  %2276 = getelementptr inbounds double, ptr %141, i64 %2254
  %2277 = load double, ptr %2276, align 8, !tbaa !19
  %2278 = sext i32 %2271 to i64
  %2279 = getelementptr inbounds double, ptr %2251, i64 %2278
  %2280 = load double, ptr %2279, align 8, !tbaa !19
  %2281 = fsub double %2277, %2280
  %2282 = shl nsw i32 %2271, 4
  %2283 = sext i32 %2282 to i64
  %2284 = getelementptr inbounds double, ptr %27, i64 %2283
  %2285 = getelementptr inbounds %struct.CompAtom, ptr %42, i64 %2274, i32 2
  %2286 = load i16, ptr %2285, align 4, !tbaa !80
  %2287 = sext i16 %2286 to i32
  %2288 = shl nsw i32 %2287, 1
  %2289 = sext i32 %2288 to i64
  %2290 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %2019, i64 %2289
  %2291 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %2290, i64 1
  %2292 = getelementptr inbounds %class.Vector, ptr %626, i64 %2274
  %2293 = getelementptr inbounds %class.Vector, ptr %630, i64 %2274
  %2294 = getelementptr inbounds %struct.CompAtom, ptr %42, i64 %2274, i32 1
  %2295 = load float, ptr %2294, align 8, !tbaa !79
  %2296 = fpext float %2295 to double
  %2297 = fmul double %2010, %2296
  %2298 = load <2 x double>, ptr %2275, align 8, !tbaa !19
  %2299 = fsub <2 x double> %1992, %2298
  %2300 = getelementptr inbounds %class.Vector, ptr %2275, i64 0, i32 2
  %2301 = load double, ptr %2300, align 8, !tbaa !49
  %2302 = fsub double %1980, %2301
  %2303 = load double, ptr %2291, align 8, !tbaa !84
  %2304 = fmul double %29, %2303
  %2305 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %2290, i64 1, i32 1
  %2306 = load double, ptr %2305, align 8, !tbaa !86
  %2307 = load double, ptr %2284, align 8, !tbaa !19
  %2308 = getelementptr inbounds double, ptr %2284, i64 2
  %2309 = load double, ptr %2308, align 8, !tbaa !19
  %2310 = fmul double %2306, %664
  %2311 = fmul double %2310, %2309
  %2312 = tail call double @llvm.fmuladd.f64(double %2304, double %2307, double %2311)
  %2313 = getelementptr inbounds double, ptr %2284, i64 1
  %2314 = load double, ptr %2313, align 8, !tbaa !19
  %2315 = getelementptr inbounds double, ptr %2284, i64 3
  %2316 = load double, ptr %2315, align 8, !tbaa !19
  %2317 = fmul double %2310, %2316
  %2318 = tail call double @llvm.fmuladd.f64(double %2304, double %2314, double %2317)
  %2319 = getelementptr inbounds double, ptr %2284, i64 4
  %2320 = load double, ptr %2319, align 8, !tbaa !19
  %2321 = getelementptr inbounds double, ptr %2284, i64 6
  %2322 = load double, ptr %2321, align 8, !tbaa !19
  %2323 = fmul double %2310, %2322
  %2324 = tail call double @llvm.fmuladd.f64(double %2304, double %2320, double %2323)
  %2325 = getelementptr inbounds double, ptr %2284, i64 5
  %2326 = load double, ptr %2325, align 8, !tbaa !19
  %2327 = getelementptr inbounds double, ptr %2284, i64 7
  %2328 = load double, ptr %2327, align 8, !tbaa !19
  %2329 = fmul double %2310, %2328
  %2330 = tail call double @llvm.fmuladd.f64(double %2304, double %2326, double %2329)
  %2331 = tail call double @llvm.fmuladd.f64(double %2281, double %2312, double %2318)
  %2332 = tail call double @llvm.fmuladd.f64(double %2331, double %2281, double %2324)
  %2333 = fmul double %2004, %2332
  %2334 = load <2 x double>, ptr %665, align 8, !tbaa !19
  %2335 = insertelement <2 x double> poison, double %2333, i64 0
  %2336 = shufflevector <2 x double> %2335, <2 x double> poison, <2 x i32> zeroinitializer
  %2337 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2336, <2 x double> %2299, <2 x double> %2334)
  store <2 x double> %2337, ptr %665, align 8, !tbaa !19
  %2338 = load double, ptr %666, align 8, !tbaa !19
  %2339 = tail call double @llvm.fmuladd.f64(double %2333, double %2302, double %2338)
  store double %2339, ptr %666, align 8, !tbaa !19
  %2340 = fmul double %670, %2297
  %2341 = getelementptr inbounds double, ptr %2284, i64 8
  %2342 = load double, ptr %2341, align 8, !tbaa !19
  %2343 = fmul double %2340, %2342
  %2344 = getelementptr inbounds double, ptr %2284, i64 9
  %2345 = load double, ptr %2344, align 8, !tbaa !19
  %2346 = fmul double %2340, %2345
  %2347 = getelementptr inbounds double, ptr %2284, i64 10
  %2348 = load double, ptr %2347, align 8, !tbaa !19
  %2349 = fmul double %2340, %2348
  %2350 = getelementptr inbounds double, ptr %2284, i64 11
  %2351 = load double, ptr %2350, align 8, !tbaa !19
  %2352 = fmul double %2340, %2351
  %2353 = insertelement <2 x double> poison, double %2281, i64 0
  %2354 = shufflevector <2 x double> %2353, <2 x double> poison, <2 x i32> zeroinitializer
  %2355 = insertelement <2 x double> poison, double %2343, i64 0
  %2356 = insertelement <2 x double> %2355, double %2312, i64 1
  %2357 = fmul <2 x double> %2354, %2356
  %2358 = insertelement <2 x double> poison, double %2346, i64 0
  %2359 = insertelement <2 x double> %2358, double %2318, i64 1
  %2360 = fmul <2 x double> %2359, <double 2.500000e-01, double 2.500000e-01>
  %2361 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2357, <2 x double> <double 0x3FC5555555555555, double 0x3FC5555555555555>, <2 x double> %2360)
  %2362 = insertelement <2 x double> poison, double %2349, i64 0
  %2363 = insertelement <2 x double> %2362, double %2324, i64 1
  %2364 = fmul <2 x double> %2363, <double 5.000000e-01, double 5.000000e-01>
  %2365 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2361, <2 x double> %2354, <2 x double> %2364)
  %2366 = insertelement <2 x double> poison, double %2352, i64 0
  %2367 = insertelement <2 x double> %2366, double %2330, i64 1
  %2368 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2365, <2 x double> %2354, <2 x double> %2367)
  %2369 = fsub <2 x double> %2262, %2368
  %2370 = tail call double @llvm.fmuladd.f64(double %2281, double %2343, double %2346)
  %2371 = tail call double @llvm.fmuladd.f64(double %2370, double %2281, double %2349)
  %2372 = fmul double %2004, %2371
  %2373 = load double, ptr %667, align 8, !tbaa !19
  %2374 = extractelement <2 x double> %2299, i64 0
  %2375 = tail call double @llvm.fmuladd.f64(double %2372, double %2374, double %2373)
  store double %2375, ptr %667, align 8, !tbaa !19
  %2376 = load double, ptr %668, align 8, !tbaa !19
  %2377 = extractelement <2 x double> %2299, i64 1
  %2378 = tail call double @llvm.fmuladd.f64(double %2372, double %2377, double %2376)
  store double %2378, ptr %668, align 8, !tbaa !19
  %2379 = load double, ptr %669, align 8, !tbaa !19
  %2380 = tail call double @llvm.fmuladd.f64(double %2372, double %2302, double %2379)
  store double %2380, ptr %669, align 8, !tbaa !19
  %2381 = fadd double %2312, %2343
  %2382 = fadd double %2318, %2346
  %2383 = fadd double %2324, %2349
  %2384 = tail call double @llvm.fmuladd.f64(double %2281, double %2381, double %2382)
  %2385 = tail call double @llvm.fmuladd.f64(double %2384, double %2281, double %2383)
  %2386 = fmul double %2377, %2385
  %2387 = insertelement <2 x double> poison, double %2386, i64 0
  %2388 = shufflevector <2 x double> %2387, <2 x double> poison, <2 x i32> zeroinitializer
  %2389 = shufflevector <2 x double> %2299, <2 x double> poison, <2 x i32> <i32 1, i32 0>
  %2390 = insertelement <2 x double> %2389, double %2302, i64 1
  %2391 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2388, <2 x double> %2390, <2 x double> %2259)
  %2392 = insertelement <2 x double> %2389, double %2302, i64 0
  %2393 = insertelement <2 x double> poison, double %2385, i64 0
  %2394 = shufflevector <2 x double> %2393, <2 x double> poison, <2 x i32> zeroinitializer
  %2395 = fmul <2 x double> %2392, %2394
  %2396 = shufflevector <2 x double> %2395, <2 x double> poison, <2 x i32> <i32 1, i32 poison>
  %2397 = shufflevector <2 x double> %2395, <2 x double> poison, <2 x i32> <i32 1, i32 1>
  %2398 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2397, <2 x double> %2299, <2 x double> %2258)
  %2399 = insertelement <2 x double> %2396, double %2386, i64 1
  %2400 = fadd <2 x double> %2265, %2399
  %2401 = load <2 x double>, ptr %2292, align 8, !tbaa !19
  %2402 = fsub <2 x double> %2401, %2399
  store <2 x double> %2402, ptr %2292, align 8, !tbaa !19
  %2403 = shufflevector <2 x double> %2392, <2 x double> poison, <2 x i32> zeroinitializer
  %2404 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2395, <2 x double> %2403, <2 x double> %2263)
  %2405 = extractelement <2 x double> %2395, i64 0
  %2406 = fadd double %2256, %2405
  %2407 = getelementptr inbounds %class.Vector, ptr %626, i64 %2274, i32 2
  %2408 = load double, ptr %2407, align 8, !tbaa !87
  %2409 = fsub double %2408, %2405
  store double %2409, ptr %2407, align 8, !tbaa !87
  %2410 = shl nsw i32 %2271, 2
  %2411 = sext i32 %2410 to i64
  %2412 = getelementptr inbounds double, ptr %28, i64 %2411
  %2413 = getelementptr inbounds double, ptr %2284, i64 12
  %2414 = load double, ptr %2413, align 8, !tbaa !19
  %2415 = getelementptr inbounds double, ptr %2284, i64 13
  %2416 = load double, ptr %2415, align 8, !tbaa !19
  %2417 = getelementptr inbounds double, ptr %2284, i64 14
  %2418 = load double, ptr %2417, align 8, !tbaa !19
  %2419 = getelementptr inbounds double, ptr %2284, i64 15
  %2420 = load double, ptr %2419, align 8, !tbaa !19
  %2421 = load double, ptr %2412, align 8, !tbaa !19
  %2422 = tail call double @llvm.fmuladd.f64(double %31, double %2421, double %2420)
  %2423 = getelementptr inbounds double, ptr %2412, i64 1
  %2424 = load double, ptr %2423, align 8, !tbaa !19
  %2425 = tail call double @llvm.fmuladd.f64(double %671, double %2424, double %2418)
  %2426 = getelementptr inbounds double, ptr %2412, i64 2
  %2427 = load double, ptr %2426, align 8, !tbaa !19
  %2428 = tail call double @llvm.fmuladd.f64(double %672, double %2427, double %2416)
  %2429 = getelementptr inbounds double, ptr %2412, i64 3
  %2430 = load double, ptr %2429, align 8, !tbaa !19
  %2431 = tail call double @llvm.fmuladd.f64(double %673, double %2430, double %2414)
  %2432 = fmul double %2297, %2431
  %2433 = fmul double %2297, %2428
  %2434 = fmul double %2297, %2425
  %2435 = fmul double %2297, %2422
  %2436 = fmul double %2281, %2432
  %2437 = fmul double %2433, 2.500000e-01
  %2438 = tail call double @llvm.fmuladd.f64(double %2436, double 0x3FC5555555555555, double %2437)
  %2439 = fmul double %2434, 5.000000e-01
  %2440 = tail call double @llvm.fmuladd.f64(double %2438, double %2281, double %2439)
  %2441 = tail call double @llvm.fmuladd.f64(double %2440, double %2281, double %2435)
  %2442 = fsub double %2255, %2441
  %2443 = tail call double @llvm.fmuladd.f64(double %2281, double %2432, double %2433)
  %2444 = tail call double @llvm.fmuladd.f64(double %2443, double %2281, double %2434)
  %2445 = fmul double %2004, %2444
  %2446 = load <2 x double>, ptr %667, align 8, !tbaa !19
  %2447 = insertelement <2 x double> poison, double %2445, i64 0
  %2448 = shufflevector <2 x double> %2447, <2 x double> poison, <2 x i32> zeroinitializer
  %2449 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2448, <2 x double> %2299, <2 x double> %2446)
  store <2 x double> %2449, ptr %667, align 8, !tbaa !19
  %2450 = load double, ptr %669, align 8, !tbaa !19
  %2451 = tail call double @llvm.fmuladd.f64(double %2445, double %2302, double %2450)
  store double %2451, ptr %669, align 8, !tbaa !19
  %2452 = fmul double %2377, %2444
  %2453 = insertelement <2 x double> poison, double %2452, i64 0
  %2454 = shufflevector <2 x double> %2453, <2 x double> poison, <2 x i32> zeroinitializer
  %2455 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2454, <2 x double> %2390, <2 x double> %2261)
  %2456 = insertelement <2 x double> poison, double %2444, i64 0
  %2457 = shufflevector <2 x double> %2456, <2 x double> poison, <2 x i32> zeroinitializer
  %2458 = fmul <2 x double> %2392, %2457
  %2459 = shufflevector <2 x double> %2458, <2 x double> poison, <2 x i32> <i32 1, i32 poison>
  %2460 = shufflevector <2 x double> %2458, <2 x double> poison, <2 x i32> <i32 1, i32 1>
  %2461 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2460, <2 x double> %2299, <2 x double> %2260)
  %2462 = insertelement <2 x double> %2459, double %2452, i64 1
  %2463 = fadd <2 x double> %2266, %2462
  %2464 = load <2 x double>, ptr %2293, align 8, !tbaa !19
  %2465 = fsub <2 x double> %2464, %2462
  store <2 x double> %2465, ptr %2293, align 8, !tbaa !19
  %2466 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2458, <2 x double> %2403, <2 x double> %2264)
  %2467 = extractelement <2 x double> %2458, i64 0
  %2468 = fadd double %2257, %2467
  %2469 = getelementptr inbounds %class.Vector, ptr %630, i64 %2274, i32 2
  %2470 = load double, ptr %2469, align 8, !tbaa !87
  %2471 = fsub double %2470, %2467
  store double %2471, ptr %2469, align 8, !tbaa !87
  %2472 = add nuw nsw i64 %2254, 1
  %2473 = icmp eq i64 %2472, %2252
  br i1 %2473, label %2474, label %2253

2474:                                             ; preds = %2253, %2233
  %2475 = phi double [ %2234, %2233 ], [ %2468, %2253 ]
  %2476 = phi double [ %2235, %2233 ], [ %2406, %2253 ]
  %2477 = phi double [ %2236, %2233 ], [ %2442, %2253 ]
  %2478 = phi <2 x double> [ %2237, %2233 ], [ %2398, %2253 ]
  %2479 = phi <2 x double> [ %2238, %2233 ], [ %2391, %2253 ]
  %2480 = phi <2 x double> [ %2239, %2233 ], [ %2461, %2253 ]
  %2481 = phi <2 x double> [ %2240, %2233 ], [ %2455, %2253 ]
  %2482 = phi <2 x double> [ %2241, %2233 ], [ %2369, %2253 ]
  %2483 = phi <2 x double> [ %2242, %2233 ], [ %2404, %2253 ]
  %2484 = phi <2 x double> [ %2243, %2233 ], [ %2466, %2253 ]
  %2485 = phi <2 x double> [ %2244, %2233 ], [ %2400, %2253 ]
  %2486 = phi <2 x double> [ %2245, %2233 ], [ %2463, %2253 ]
  %2487 = load double, ptr @_ZN20ComputeNonbondedUtil7cutoff2E, align 8, !tbaa !19
  %2488 = tail call noundef i32 @_Z22pairlist_from_pairlistddddPK8CompAtomPKtiPtdPd(double noundef %2487, double noundef %2021, double noundef %2022, double noundef %1980, ptr noundef %42, ptr noundef %1984, i32 noundef %1985, ptr noundef %95, double noundef %32, ptr noundef %141)
  %2489 = add nsw i32 %2248, %2488
  %2490 = icmp sgt i32 %2488, 0
  br i1 %2490, label %2491, label %2599

2491:                                             ; preds = %2474
  %2492 = load ptr, ptr @_ZN20ComputeNonbondedUtil8r2_tableE, align 8, !tbaa !23
  %2493 = zext i32 %2488 to i64
  br label %2494

2494:                                             ; preds = %2491, %2494
  %2495 = phi i64 [ 0, %2491 ], [ %2597, %2494 ]
  %2496 = phi double [ %2477, %2491 ], [ %2562, %2494 ]
  %2497 = phi double [ %2475, %2491 ], [ %2593, %2494 ]
  %2498 = phi <2 x double> [ %2480, %2491 ], [ %2585, %2494 ]
  %2499 = phi <2 x double> [ %2481, %2491 ], [ %2578, %2494 ]
  %2500 = phi <2 x double> [ %2484, %2491 ], [ %2591, %2494 ]
  %2501 = phi <2 x double> [ %2486, %2491 ], [ %2587, %2494 ]
  %2502 = shl nuw nsw i64 %2495, 1
  %2503 = getelementptr inbounds i32, ptr %142, i64 %2502
  %2504 = load i32, ptr %2503, align 4, !tbaa !5
  %2505 = ashr i32 %2504, 14
  %2506 = add nsw i32 %2505, %35
  %2507 = getelementptr inbounds i16, ptr %95, i64 %2495
  %2508 = load i16, ptr %2507, align 2, !tbaa !44
  %2509 = zext i16 %2508 to i64
  %2510 = getelementptr inbounds %struct.CompAtom, ptr %42, i64 %2509
  %2511 = getelementptr inbounds double, ptr %141, i64 %2495
  %2512 = load double, ptr %2511, align 8, !tbaa !19
  %2513 = sext i32 %2506 to i64
  %2514 = getelementptr inbounds double, ptr %2492, i64 %2513
  %2515 = load double, ptr %2514, align 8, !tbaa !19
  %2516 = fsub double %2512, %2515
  %2517 = shl nsw i32 %2506, 4
  %2518 = sext i32 %2517 to i64
  %2519 = getelementptr inbounds double, ptr %27, i64 %2518
  %2520 = getelementptr inbounds %class.Vector, ptr %630, i64 %2509
  %2521 = getelementptr inbounds %struct.CompAtom, ptr %42, i64 %2509, i32 1
  %2522 = load float, ptr %2521, align 8, !tbaa !79
  %2523 = fpext float %2522 to double
  %2524 = fmul double %2010, %2523
  %2525 = load <2 x double>, ptr %2510, align 8, !tbaa !19
  %2526 = fsub <2 x double> %1992, %2525
  %2527 = getelementptr inbounds %class.Vector, ptr %2510, i64 0, i32 2
  %2528 = load double, ptr %2527, align 8, !tbaa !49
  %2529 = fsub double %1980, %2528
  %2530 = shl nsw i32 %2506, 2
  %2531 = sext i32 %2530 to i64
  %2532 = getelementptr inbounds double, ptr %28, i64 %2531
  %2533 = getelementptr inbounds double, ptr %2519, i64 12
  %2534 = load double, ptr %2533, align 8, !tbaa !19
  %2535 = getelementptr inbounds double, ptr %2519, i64 13
  %2536 = load double, ptr %2535, align 8, !tbaa !19
  %2537 = getelementptr inbounds double, ptr %2519, i64 14
  %2538 = load double, ptr %2537, align 8, !tbaa !19
  %2539 = getelementptr inbounds double, ptr %2519, i64 15
  %2540 = load double, ptr %2539, align 8, !tbaa !19
  %2541 = load double, ptr %2532, align 8, !tbaa !19
  %2542 = fadd double %2540, %2541
  %2543 = getelementptr inbounds double, ptr %2532, i64 1
  %2544 = load double, ptr %2543, align 8, !tbaa !19
  %2545 = tail call double @llvm.fmuladd.f64(double %2544, double 2.000000e+00, double %2538)
  %2546 = getelementptr inbounds double, ptr %2532, i64 2
  %2547 = load double, ptr %2546, align 8, !tbaa !19
  %2548 = tail call double @llvm.fmuladd.f64(double %2547, double 4.000000e+00, double %2536)
  %2549 = getelementptr inbounds double, ptr %2532, i64 3
  %2550 = load double, ptr %2549, align 8, !tbaa !19
  %2551 = tail call double @llvm.fmuladd.f64(double %2550, double 6.000000e+00, double %2534)
  %2552 = fmul double %2524, %2551
  %2553 = fmul double %2524, %2548
  %2554 = fmul double %2524, %2545
  %2555 = fmul double %2524, %2542
  %2556 = fmul double %2516, %2552
  %2557 = fmul double %2553, 2.500000e-01
  %2558 = tail call double @llvm.fmuladd.f64(double %2556, double 0x3FC5555555555555, double %2557)
  %2559 = fmul double %2554, 5.000000e-01
  %2560 = tail call double @llvm.fmuladd.f64(double %2558, double %2516, double %2559)
  %2561 = tail call double @llvm.fmuladd.f64(double %2560, double %2516, double %2555)
  %2562 = fsub double %2496, %2561
  %2563 = tail call double @llvm.fmuladd.f64(double %2516, double %2552, double %2553)
  %2564 = tail call double @llvm.fmuladd.f64(double %2563, double %2516, double %2554)
  %2565 = fmul double %2004, %2564
  %2566 = load <2 x double>, ptr %667, align 8, !tbaa !19
  %2567 = insertelement <2 x double> poison, double %2565, i64 0
  %2568 = shufflevector <2 x double> %2567, <2 x double> poison, <2 x i32> zeroinitializer
  %2569 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2568, <2 x double> %2526, <2 x double> %2566)
  store <2 x double> %2569, ptr %667, align 8, !tbaa !19
  %2570 = load double, ptr %669, align 8, !tbaa !19
  %2571 = tail call double @llvm.fmuladd.f64(double %2565, double %2529, double %2570)
  store double %2571, ptr %669, align 8, !tbaa !19
  %2572 = extractelement <2 x double> %2526, i64 1
  %2573 = fmul double %2572, %2564
  %2574 = insertelement <2 x double> poison, double %2573, i64 0
  %2575 = shufflevector <2 x double> %2574, <2 x double> poison, <2 x i32> zeroinitializer
  %2576 = shufflevector <2 x double> %2526, <2 x double> poison, <2 x i32> <i32 1, i32 0>
  %2577 = insertelement <2 x double> %2576, double %2529, i64 1
  %2578 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2575, <2 x double> %2577, <2 x double> %2499)
  %2579 = insertelement <2 x double> %2576, double %2529, i64 0
  %2580 = insertelement <2 x double> poison, double %2564, i64 0
  %2581 = shufflevector <2 x double> %2580, <2 x double> poison, <2 x i32> zeroinitializer
  %2582 = fmul <2 x double> %2579, %2581
  %2583 = shufflevector <2 x double> %2582, <2 x double> poison, <2 x i32> <i32 1, i32 poison>
  %2584 = shufflevector <2 x double> %2582, <2 x double> poison, <2 x i32> <i32 1, i32 1>
  %2585 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2584, <2 x double> %2526, <2 x double> %2498)
  %2586 = insertelement <2 x double> %2583, double %2573, i64 1
  %2587 = fadd <2 x double> %2501, %2586
  %2588 = load <2 x double>, ptr %2520, align 8, !tbaa !19
  %2589 = fsub <2 x double> %2588, %2586
  store <2 x double> %2589, ptr %2520, align 8, !tbaa !19
  %2590 = shufflevector <2 x double> %2579, <2 x double> poison, <2 x i32> zeroinitializer
  %2591 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2582, <2 x double> %2590, <2 x double> %2500)
  %2592 = extractelement <2 x double> %2582, i64 0
  %2593 = fadd double %2497, %2592
  %2594 = getelementptr inbounds %class.Vector, ptr %630, i64 %2509, i32 2
  %2595 = load double, ptr %2594, align 8, !tbaa !87
  %2596 = fsub double %2595, %2592
  store double %2596, ptr %2594, align 8, !tbaa !87
  %2597 = add nuw nsw i64 %2495, 1
  %2598 = icmp eq i64 %2597, %2493
  br i1 %2598, label %2599, label %2494

2599:                                             ; preds = %2494, %2474
  %2600 = phi double [ %2475, %2474 ], [ %2593, %2494 ]
  %2601 = phi double [ %2477, %2474 ], [ %2562, %2494 ]
  %2602 = phi <2 x double> [ %2480, %2474 ], [ %2585, %2494 ]
  %2603 = phi <2 x double> [ %2481, %2474 ], [ %2578, %2494 ]
  %2604 = phi <2 x double> [ %2484, %2474 ], [ %2591, %2494 ]
  %2605 = phi <2 x double> [ %2486, %2474 ], [ %2587, %2494 ]
  %2606 = getelementptr inbounds %class.Vector, ptr %624, i64 %692
  %2607 = load <2 x double>, ptr %2606, align 8, !tbaa !19
  %2608 = fadd <2 x double> %2485, %2607
  store <2 x double> %2608, ptr %2606, align 8, !tbaa !19
  %2609 = getelementptr inbounds %class.Vector, ptr %624, i64 %692, i32 2
  %2610 = load double, ptr %2609, align 8, !tbaa !87
  %2611 = fadd double %2476, %2610
  store double %2611, ptr %2609, align 8, !tbaa !87
  %2612 = getelementptr inbounds %class.Vector, ptr %628, i64 %692
  %2613 = load <2 x double>, ptr %2612, align 8, !tbaa !19
  %2614 = fadd <2 x double> %2605, %2613
  store <2 x double> %2614, ptr %2612, align 8, !tbaa !19
  %2615 = getelementptr inbounds %class.Vector, ptr %628, i64 %692, i32 2
  %2616 = load double, ptr %2615, align 8, !tbaa !87
  %2617 = fadd double %2600, %2616
  store double %2617, ptr %2615, align 8, !tbaa !87
  br i1 %145, label %2620, label %2618

2618:                                             ; preds = %2599
  %2619 = add nsw i32 %679, 1
  br label %2628

2620:                                             ; preds = %2599
  %2621 = load ptr, ptr %8, align 8, !tbaa !46
  %2622 = load i32, ptr %13, align 8, !tbaa !17
  %2623 = add nsw i32 %2622, 1
  store i32 %2623, ptr %13, align 8, !tbaa !17
  %2624 = sext i32 %2622 to i64
  %2625 = getelementptr inbounds i16, ptr %2621, i64 %2624
  %2626 = load i16, ptr %2625, align 2, !tbaa !44
  %2627 = zext i16 %2626 to i32
  br label %2628

2628:                                             ; preds = %1247, %1206, %1134, %1586, %2620, %2618, %704
  %2629 = phi i32 [ %1981, %2620 ], [ %1981, %2618 ], [ %705, %704 ], [ %708, %1586 ], [ %708, %1134 ], [ %708, %1206 ], [ %708, %1247 ]
  %2630 = phi i32 [ %1988, %2620 ], [ %1988, %2618 ], [ %683, %704 ], [ %1148, %1586 ], [ 0, %1134 ], [ %1148, %1206 ], [ %1148, %1247 ]
  %2631 = phi ptr [ %1989, %2620 ], [ %1989, %2618 ], [ %682, %704 ], [ %958, %1586 ], [ %958, %1134 ], [ %958, %1206 ], [ %958, %1247 ]
  %2632 = phi ptr [ %1990, %2620 ], [ %1990, %2618 ], [ %681, %704 ], [ %959, %1586 ], [ %959, %1134 ], [ %959, %1206 ], [ %959, %1247 ]
  %2633 = phi ptr [ %1991, %2620 ], [ %1991, %2618 ], [ %680, %704 ], [ %960, %1586 ], [ %960, %1134 ], [ %960, %1206 ], [ %960, %1247 ]
  %2634 = phi i32 [ %2627, %2620 ], [ %2619, %2618 ], [ %706, %704 ], [ %1587, %1586 ], [ %1138, %1134 ], [ %1207, %1206 ], [ %1248, %1247 ]
  %2635 = phi double [ %2601, %2620 ], [ %2601, %2618 ], [ %678, %704 ], [ %678, %1586 ], [ %678, %1134 ], [ %678, %1206 ], [ %678, %1247 ]
  %2636 = phi i32 [ %2489, %2620 ], [ %2489, %2618 ], [ %677, %704 ], [ %677, %1586 ], [ %677, %1134 ], [ %677, %1206 ], [ %677, %1247 ]
  %2637 = phi <2 x double> [ %2478, %2620 ], [ %2478, %2618 ], [ %685, %704 ], [ %685, %1586 ], [ %685, %1134 ], [ %685, %1206 ], [ %685, %1247 ]
  %2638 = phi <2 x double> [ %2479, %2620 ], [ %2479, %2618 ], [ %686, %704 ], [ %686, %1586 ], [ %686, %1134 ], [ %686, %1206 ], [ %686, %1247 ]
  %2639 = phi <2 x double> [ %2602, %2620 ], [ %2602, %2618 ], [ %687, %704 ], [ %687, %1586 ], [ %687, %1134 ], [ %687, %1206 ], [ %687, %1247 ]
  %2640 = phi <2 x double> [ %2603, %2620 ], [ %2603, %2618 ], [ %688, %704 ], [ %688, %1586 ], [ %688, %1134 ], [ %688, %1206 ], [ %688, %1247 ]
  %2641 = phi <2 x double> [ %2482, %2620 ], [ %2482, %2618 ], [ %689, %704 ], [ %689, %1586 ], [ %689, %1134 ], [ %689, %1206 ], [ %689, %1247 ]
  %2642 = phi <2 x double> [ %2483, %2620 ], [ %2483, %2618 ], [ %690, %704 ], [ %690, %1586 ], [ %690, %1134 ], [ %690, %1206 ], [ %690, %1247 ]
  %2643 = phi <2 x double> [ %2604, %2620 ], [ %2604, %2618 ], [ %691, %704 ], [ %691, %1586 ], [ %691, %1134 ], [ %691, %1206 ], [ %691, %1247 ]
  %2644 = icmp slt i32 %2634, %37
  br i1 %2644, label %676, label %2645

2645:                                             ; preds = %2628, %645
  %2646 = phi ptr [ null, %645 ], [ %2633, %2628 ]
  %2647 = phi i32 [ %647, %645 ], [ %2634, %2628 ]
  %2648 = phi double [ 0.000000e+00, %645 ], [ %2635, %2628 ]
  %2649 = phi i32 [ 0, %645 ], [ %2636, %2628 ]
  %2650 = phi <2 x double> [ zeroinitializer, %645 ], [ %2637, %2628 ]
  %2651 = phi <2 x double> [ zeroinitializer, %645 ], [ %2638, %2628 ]
  %2652 = phi <2 x double> [ zeroinitializer, %645 ], [ %2639, %2628 ]
  %2653 = phi <2 x double> [ zeroinitializer, %645 ], [ %2640, %2628 ]
  %2654 = phi <2 x double> [ zeroinitializer, %645 ], [ %2641, %2628 ]
  %2655 = phi <2 x double> [ zeroinitializer, %645 ], [ %2642, %2628 ]
  %2656 = phi <2 x double> [ zeroinitializer, %645 ], [ %2643, %2628 ]
  br i1 %143, label %2664, label %2657

2657:                                             ; preds = %2645
  %2658 = trunc i32 %2647 to i16
  %2659 = load ptr, ptr %8, align 8, !tbaa !46
  %2660 = load i32, ptr %13, align 8, !tbaa !17
  %2661 = add nsw i32 %2660, -1
  %2662 = sext i32 %2661 to i64
  %2663 = getelementptr inbounds i16, ptr %2659, i64 %2662
  store i16 %2658, ptr %2663, align 2, !tbaa !44
  br label %2664

2664:                                             ; preds = %2657, %2645
  %2665 = sitofp i32 %2649 to double
  %2666 = getelementptr inbounds double, ptr %6, i64 22
  %2667 = load double, ptr %2666, align 8, !tbaa !19
  %2668 = fadd double %2667, %2665
  store double %2668, ptr %2666, align 8, !tbaa !19
  %2669 = getelementptr inbounds double, ptr %6, i64 2
  %2670 = load double, ptr %2669, align 8, !tbaa !19
  %2671 = extractelement <2 x double> %2654, i64 1
  %2672 = fadd double %2671, %2670
  store double %2672, ptr %2669, align 8, !tbaa !19
  %2673 = load double, ptr %6, align 8, !tbaa !19
  %2674 = extractelement <2 x double> %2654, i64 0
  %2675 = fadd double %2674, %2673
  store double %2675, ptr %6, align 8, !tbaa !19
  %2676 = getelementptr inbounds double, ptr %6, i64 3
  %2677 = load <4 x double>, ptr %2676, align 8, !tbaa !19
  %2678 = shufflevector <2 x double> %2650, <2 x double> %2655, <4 x i32> <i32 0, i32 1, i32 3, i32 poison>
  %2679 = shufflevector <4 x double> %2678, <4 x double> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 1>
  %2680 = fadd <4 x double> %2679, %2677
  store <4 x double> %2680, ptr %2676, align 8, !tbaa !19
  %2681 = getelementptr inbounds double, ptr %6, i64 7
  %2682 = load <4 x double>, ptr %2681, align 8, !tbaa !19
  %2683 = shufflevector <2 x double> %2651, <2 x double> %2655, <4 x i32> <i32 0, i32 1, i32 3, i32 poison>
  %2684 = shufflevector <4 x double> %2683, <4 x double> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 1>
  %2685 = fadd <4 x double> %2684, %2682
  store <4 x double> %2685, ptr %2681, align 8, !tbaa !19
  %2686 = getelementptr inbounds double, ptr %6, i64 11
  %2687 = load double, ptr %2686, align 8, !tbaa !19
  %2688 = extractelement <2 x double> %2655, i64 0
  %2689 = fadd double %2688, %2687
  store double %2689, ptr %2686, align 8, !tbaa !19
  %2690 = getelementptr inbounds double, ptr %6, i64 1
  %2691 = load double, ptr %2690, align 8, !tbaa !19
  %2692 = fadd double %2648, %2691
  store double %2692, ptr %2690, align 8, !tbaa !19
  %2693 = getelementptr inbounds double, ptr %6, i64 12
  %2694 = load <4 x double>, ptr %2693, align 8, !tbaa !19
  %2695 = shufflevector <2 x double> %2652, <2 x double> %2656, <4 x i32> <i32 0, i32 1, i32 3, i32 poison>
  %2696 = shufflevector <4 x double> %2695, <4 x double> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 1>
  %2697 = fadd <4 x double> %2696, %2694
  store <4 x double> %2697, ptr %2693, align 8, !tbaa !19
  %2698 = getelementptr inbounds double, ptr %6, i64 16
  %2699 = load <4 x double>, ptr %2698, align 8, !tbaa !19
  %2700 = shufflevector <2 x double> %2653, <2 x double> %2656, <4 x i32> <i32 0, i32 1, i32 3, i32 poison>
  %2701 = shufflevector <4 x double> %2700, <4 x double> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 1>
  %2702 = fadd <4 x double> %2701, %2699
  store <4 x double> %2702, ptr %2698, align 8, !tbaa !19
  %2703 = getelementptr inbounds double, ptr %6, i64 20
  %2704 = load double, ptr %2703, align 8, !tbaa !19
  %2705 = extractelement <2 x double> %2656, i64 0
  %2706 = fadd double %2705, %2704
  store double %2706, ptr %2703, align 8, !tbaa !19
  %2707 = icmp eq ptr %2646, null
  br i1 %2707, label %2709, label %2708

2708:                                             ; preds = %2664
  tail call void @_ZdaPv(ptr noundef nonnull %2646) #10
  br label %2709

2709:                                             ; preds = %2664, %2708, %1
  ret void
}

; Function Attrs: sspstrong uwtable
define dso_local void @_ZN20ComputeNonbondedUtil36calc_pair_energy_merge_fullelect_intEP9nonbonded(ptr nocapture noundef readonly %0) local_unnamed_addr #0 align 2 {
  %2 = load i32, ptr @_ZN20ComputeNonbondedUtil8commOnlyE, align 4, !tbaa !5
  %3 = icmp eq i32 %2, 0
  br i1 %3, label %4, label %2552

4:                                                ; preds = %1
  %5 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 7
  %6 = load ptr, ptr %5, align 8, !tbaa !9
  %7 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 10
  %8 = load ptr, ptr %7, align 8, !tbaa !14
  %9 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 11
  %10 = load i32, ptr %9, align 8, !tbaa !15
  %11 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 12
  %12 = load i32, ptr %11, align 4, !tbaa !16
  %13 = getelementptr inbounds %class.Pairlists, ptr %8, i64 0, i32 1
  store i32 0, ptr %13, align 8, !tbaa !17
  %14 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 6
  %15 = load <2 x double>, ptr %14, align 8, !tbaa !19
  %16 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 6, i32 2
  %17 = load double, ptr %16, align 8, !tbaa !20
  %18 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 13
  %19 = load double, ptr %18, align 8, !tbaa !21
  %20 = fmul double %19, %19
  %21 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 14
  %22 = load double, ptr %21, align 8, !tbaa !22
  %23 = fmul double %22, %22
  %24 = load double, ptr @_ZN20ComputeNonbondedUtil12dielectric_1E, align 8, !tbaa !19
  %25 = load ptr, ptr @_ZN20ComputeNonbondedUtil7ljTableE, align 8, !tbaa !23
  %26 = load ptr, ptr @_ZN20ComputeNonbondedUtil3molE, align 8, !tbaa !23
  %27 = load ptr, ptr @_ZN20ComputeNonbondedUtil13table_noshortE, align 8, !tbaa !23
  %28 = load double, ptr @_ZN20ComputeNonbondedUtil7scalingE, align 8, !tbaa !19
  %29 = load double, ptr @_ZN20ComputeNonbondedUtil7scale14E, align 8, !tbaa !19
  %30 = fsub double 1.000000e+00, %29
  %31 = load double, ptr @_ZN20ComputeNonbondedUtil8r2_deltaE, align 8, !tbaa !19
  %32 = load i32, ptr @_ZN20ComputeNonbondedUtil12r2_delta_expE, align 4, !tbaa !5
  %33 = shl i32 %32, 6
  %34 = add i32 %33, -65472
  %35 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 5
  %36 = load i32, ptr %35, align 8, !tbaa !5
  %37 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 5, i64 1
  %38 = load i32, ptr %37, align 4, !tbaa !5
  %39 = load ptr, ptr %0, align 8, !tbaa !23
  %40 = getelementptr inbounds [2 x ptr], ptr %0, i64 0, i64 1
  %41 = load ptr, ptr %40, align 8, !tbaa !23
  %42 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 1
  %43 = load ptr, ptr %42, align 8, !tbaa !23
  %44 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 1, i64 1
  %45 = load ptr, ptr %44, align 8, !tbaa !23
  %46 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 9
  %47 = load ptr, ptr %46, align 8, !tbaa !24
  %48 = add nsw i32 %38, 5
  %49 = getelementptr inbounds %class.ResizeArray, ptr %47, i64 0, i32 1
  %50 = load ptr, ptr %49, align 8, !tbaa !25
  %51 = getelementptr inbounds %class.ResizeArrayRaw, ptr %50, i64 0, i32 2
  %52 = load i32, ptr %51, align 8, !tbaa !27
  %53 = icmp slt i32 %52, %48
  br i1 %53, label %54, label %92

54:                                               ; preds = %4
  %55 = getelementptr inbounds %class.ResizeArrayRaw, ptr %50, i64 0, i32 3
  %56 = load i32, ptr %55, align 4, !tbaa !30
  %57 = icmp slt i32 %56, %48
  br i1 %57, label %58, label %92

58:                                               ; preds = %54
  %59 = sitofp i32 %56 to float
  %60 = getelementptr inbounds %class.ResizeArrayRaw, ptr %50, i64 0, i32 5
  %61 = load float, ptr %60, align 4, !tbaa !31
  %62 = fmul float %61, %59
  %63 = fptosi float %62 to i32
  %64 = tail call i32 @llvm.smax.i32(i32 %63, i32 %48)
  %65 = sub nsw i32 %64, %56
  %66 = getelementptr inbounds %class.ResizeArrayRaw, ptr %50, i64 0, i32 6
  %67 = load i32, ptr %66, align 8, !tbaa !32
  %68 = icmp slt i32 %65, %67
  %69 = add nsw i32 %67, %56
  %70 = select i1 %68, i32 %69, i32 %64
  %71 = sext i32 %70 to i64
  %72 = shl nsw i64 %71, 1
  %73 = add nsw i64 %72, 31
  %74 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %73) #9
  %75 = getelementptr inbounds i8, ptr %74, i64 31
  %76 = ptrtoint ptr %75 to i64
  %77 = and i64 %76, 31
  %78 = sub nsw i64 0, %77
  %79 = getelementptr inbounds i8, ptr %75, i64 %78
  %80 = load ptr, ptr %50, align 8, !tbaa !33
  %81 = sext i32 %52 to i64
  %82 = shl nsw i64 %81, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %79, ptr align 1 %80, i64 %82, i1 false)
  %83 = icmp eq i32 %56, 0
  br i1 %83, label %89, label %84

84:                                               ; preds = %58
  %85 = getelementptr inbounds %class.ResizeArrayRaw, ptr %50, i64 0, i32 1
  %86 = load ptr, ptr %85, align 8, !tbaa !34
  %87 = icmp eq ptr %86, null
  br i1 %87, label %89, label %88

88:                                               ; preds = %84
  tail call void @_ZdaPv(ptr noundef nonnull %86) #10
  br label %89

89:                                               ; preds = %88, %84, %58
  %90 = getelementptr inbounds %class.ResizeArrayRaw, ptr %50, i64 0, i32 1
  store ptr %74, ptr %90, align 8, !tbaa !34
  store ptr %79, ptr %50, align 8, !tbaa !33
  store i32 %70, ptr %55, align 4, !tbaa !30
  %91 = load ptr, ptr %49, align 8, !tbaa !25
  br label %92

92:                                               ; preds = %4, %54, %89
  %93 = phi ptr [ %50, %4 ], [ %50, %54 ], [ %91, %89 ]
  store i32 %48, ptr %51, align 8, !tbaa !27
  %94 = load ptr, ptr %93, align 8, !tbaa !33
  %95 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %47, i64 0, i32 1, i32 1
  %96 = load ptr, ptr %95, align 8, !tbaa !35
  %97 = getelementptr inbounds %class.ResizeArrayRaw.23, ptr %96, i64 0, i32 2
  %98 = load i32, ptr %97, align 8, !tbaa !37
  %99 = icmp slt i32 %98, %48
  br i1 %99, label %100, label %138

100:                                              ; preds = %92
  %101 = getelementptr inbounds %class.ResizeArrayRaw.23, ptr %96, i64 0, i32 3
  %102 = load i32, ptr %101, align 4, !tbaa !39
  %103 = icmp slt i32 %102, %48
  br i1 %103, label %104, label %138

104:                                              ; preds = %100
  %105 = sitofp i32 %102 to float
  %106 = getelementptr inbounds %class.ResizeArrayRaw.23, ptr %96, i64 0, i32 5
  %107 = load float, ptr %106, align 4, !tbaa !40
  %108 = fmul float %107, %105
  %109 = fptosi float %108 to i32
  %110 = tail call i32 @llvm.smax.i32(i32 %109, i32 %48)
  %111 = sub nsw i32 %110, %102
  %112 = getelementptr inbounds %class.ResizeArrayRaw.23, ptr %96, i64 0, i32 6
  %113 = load i32, ptr %112, align 8, !tbaa !41
  %114 = icmp slt i32 %111, %113
  %115 = add nsw i32 %113, %102
  %116 = select i1 %114, i32 %115, i32 %110
  %117 = sext i32 %116 to i64
  %118 = shl nsw i64 %117, 3
  %119 = add nsw i64 %118, 31
  %120 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %119) #9
  %121 = getelementptr inbounds i8, ptr %120, i64 31
  %122 = ptrtoint ptr %121 to i64
  %123 = and i64 %122, 31
  %124 = sub nsw i64 0, %123
  %125 = getelementptr inbounds i8, ptr %121, i64 %124
  %126 = load ptr, ptr %96, align 8, !tbaa !42
  %127 = sext i32 %98 to i64
  %128 = shl nsw i64 %127, 3
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %125, ptr align 1 %126, i64 %128, i1 false)
  %129 = icmp eq i32 %102, 0
  br i1 %129, label %135, label %130

130:                                              ; preds = %104
  %131 = getelementptr inbounds %class.ResizeArrayRaw.23, ptr %96, i64 0, i32 1
  %132 = load ptr, ptr %131, align 8, !tbaa !43
  %133 = icmp eq ptr %132, null
  br i1 %133, label %135, label %134

134:                                              ; preds = %130
  tail call void @_ZdaPv(ptr noundef nonnull %132) #10
  br label %135

135:                                              ; preds = %134, %130, %104
  %136 = getelementptr inbounds %class.ResizeArrayRaw.23, ptr %96, i64 0, i32 1
  store ptr %120, ptr %136, align 8, !tbaa !43
  store ptr %125, ptr %96, align 8, !tbaa !42
  store i32 %116, ptr %101, align 4, !tbaa !39
  %137 = load ptr, ptr %95, align 8, !tbaa !35
  br label %138

138:                                              ; preds = %92, %100, %135
  %139 = phi ptr [ %96, %92 ], [ %96, %100 ], [ %137, %135 ]
  store i32 %48, ptr %97, align 8, !tbaa !37
  %140 = load ptr, ptr %139, align 8, !tbaa !42
  %141 = getelementptr inbounds i32, ptr %140, i64 1
  %142 = icmp eq i32 %10, 0
  %143 = icmp ne i32 %12, 0
  %144 = select i1 %142, i1 %143, i1 false
  %145 = select i1 %144, i32 0, i32 %48
  %146 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %47, i64 0, i32 2, i32 1
  %147 = load ptr, ptr %146, align 8, !tbaa !25
  %148 = getelementptr inbounds %class.ResizeArrayRaw, ptr %147, i64 0, i32 2
  %149 = load i32, ptr %148, align 8, !tbaa !27
  %150 = icmp slt i32 %149, %145
  br i1 %150, label %151, label %189

151:                                              ; preds = %138
  %152 = getelementptr inbounds %class.ResizeArrayRaw, ptr %147, i64 0, i32 3
  %153 = load i32, ptr %152, align 4, !tbaa !30
  %154 = icmp slt i32 %153, %145
  br i1 %154, label %155, label %189

155:                                              ; preds = %151
  %156 = sitofp i32 %153 to float
  %157 = getelementptr inbounds %class.ResizeArrayRaw, ptr %147, i64 0, i32 5
  %158 = load float, ptr %157, align 4, !tbaa !31
  %159 = fmul float %158, %156
  %160 = fptosi float %159 to i32
  %161 = tail call i32 @llvm.smax.i32(i32 %160, i32 %145)
  %162 = sub nsw i32 %161, %153
  %163 = getelementptr inbounds %class.ResizeArrayRaw, ptr %147, i64 0, i32 6
  %164 = load i32, ptr %163, align 8, !tbaa !32
  %165 = icmp slt i32 %162, %164
  %166 = add nsw i32 %164, %153
  %167 = select i1 %165, i32 %166, i32 %161
  %168 = sext i32 %167 to i64
  %169 = shl nsw i64 %168, 1
  %170 = add nsw i64 %169, 31
  %171 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %170) #9
  %172 = getelementptr inbounds i8, ptr %171, i64 31
  %173 = ptrtoint ptr %172 to i64
  %174 = and i64 %173, 31
  %175 = sub nsw i64 0, %174
  %176 = getelementptr inbounds i8, ptr %172, i64 %175
  %177 = load ptr, ptr %147, align 8, !tbaa !33
  %178 = sext i32 %149 to i64
  %179 = shl nsw i64 %178, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %176, ptr align 1 %177, i64 %179, i1 false)
  %180 = icmp eq i32 %153, 0
  br i1 %180, label %186, label %181

181:                                              ; preds = %155
  %182 = getelementptr inbounds %class.ResizeArrayRaw, ptr %147, i64 0, i32 1
  %183 = load ptr, ptr %182, align 8, !tbaa !34
  %184 = icmp eq ptr %183, null
  br i1 %184, label %186, label %185

185:                                              ; preds = %181
  tail call void @_ZdaPv(ptr noundef nonnull %183) #10
  br label %186

186:                                              ; preds = %185, %181, %155
  %187 = getelementptr inbounds %class.ResizeArrayRaw, ptr %147, i64 0, i32 1
  store ptr %171, ptr %187, align 8, !tbaa !34
  store ptr %176, ptr %147, align 8, !tbaa !33
  store i32 %167, ptr %152, align 4, !tbaa !30
  %188 = load ptr, ptr %146, align 8, !tbaa !25
  br label %189

189:                                              ; preds = %138, %151, %186
  %190 = phi ptr [ %147, %138 ], [ %147, %151 ], [ %188, %186 ]
  store i32 %145, ptr %148, align 8, !tbaa !27
  %191 = load ptr, ptr %190, align 8, !tbaa !33
  %192 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %47, i64 0, i32 3, i32 1
  %193 = load ptr, ptr %192, align 8, !tbaa !25
  %194 = getelementptr inbounds %class.ResizeArrayRaw, ptr %193, i64 0, i32 2
  %195 = load i32, ptr %194, align 8, !tbaa !27
  %196 = icmp slt i32 %195, %145
  br i1 %196, label %197, label %235

197:                                              ; preds = %189
  %198 = getelementptr inbounds %class.ResizeArrayRaw, ptr %193, i64 0, i32 3
  %199 = load i32, ptr %198, align 4, !tbaa !30
  %200 = icmp slt i32 %199, %145
  br i1 %200, label %201, label %235

201:                                              ; preds = %197
  %202 = sitofp i32 %199 to float
  %203 = getelementptr inbounds %class.ResizeArrayRaw, ptr %193, i64 0, i32 5
  %204 = load float, ptr %203, align 4, !tbaa !31
  %205 = fmul float %204, %202
  %206 = fptosi float %205 to i32
  %207 = tail call i32 @llvm.smax.i32(i32 %206, i32 %145)
  %208 = sub nsw i32 %207, %199
  %209 = getelementptr inbounds %class.ResizeArrayRaw, ptr %193, i64 0, i32 6
  %210 = load i32, ptr %209, align 8, !tbaa !32
  %211 = icmp slt i32 %208, %210
  %212 = add nsw i32 %210, %199
  %213 = select i1 %211, i32 %212, i32 %207
  %214 = sext i32 %213 to i64
  %215 = shl nsw i64 %214, 1
  %216 = add nsw i64 %215, 31
  %217 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %216) #9
  %218 = getelementptr inbounds i8, ptr %217, i64 31
  %219 = ptrtoint ptr %218 to i64
  %220 = and i64 %219, 31
  %221 = sub nsw i64 0, %220
  %222 = getelementptr inbounds i8, ptr %218, i64 %221
  %223 = load ptr, ptr %193, align 8, !tbaa !33
  %224 = sext i32 %195 to i64
  %225 = shl nsw i64 %224, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %222, ptr align 1 %223, i64 %225, i1 false)
  %226 = icmp eq i32 %199, 0
  br i1 %226, label %232, label %227

227:                                              ; preds = %201
  %228 = getelementptr inbounds %class.ResizeArrayRaw, ptr %193, i64 0, i32 1
  %229 = load ptr, ptr %228, align 8, !tbaa !34
  %230 = icmp eq ptr %229, null
  br i1 %230, label %232, label %231

231:                                              ; preds = %227
  tail call void @_ZdaPv(ptr noundef nonnull %229) #10
  br label %232

232:                                              ; preds = %231, %227, %201
  %233 = getelementptr inbounds %class.ResizeArrayRaw, ptr %193, i64 0, i32 1
  store ptr %217, ptr %233, align 8, !tbaa !34
  store ptr %222, ptr %193, align 8, !tbaa !33
  store i32 %213, ptr %198, align 4, !tbaa !30
  %234 = load ptr, ptr %192, align 8, !tbaa !25
  br label %235

235:                                              ; preds = %189, %197, %232
  %236 = phi ptr [ %193, %189 ], [ %193, %197 ], [ %234, %232 ]
  store i32 %145, ptr %194, align 8, !tbaa !27
  %237 = load ptr, ptr %236, align 8, !tbaa !33
  %238 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %47, i64 0, i32 4, i32 1
  %239 = load ptr, ptr %238, align 8, !tbaa !25
  %240 = getelementptr inbounds %class.ResizeArrayRaw, ptr %239, i64 0, i32 2
  %241 = load i32, ptr %240, align 8, !tbaa !27
  %242 = icmp slt i32 %241, %145
  br i1 %242, label %243, label %281

243:                                              ; preds = %235
  %244 = getelementptr inbounds %class.ResizeArrayRaw, ptr %239, i64 0, i32 3
  %245 = load i32, ptr %244, align 4, !tbaa !30
  %246 = icmp slt i32 %245, %145
  br i1 %246, label %247, label %281

247:                                              ; preds = %243
  %248 = sitofp i32 %245 to float
  %249 = getelementptr inbounds %class.ResizeArrayRaw, ptr %239, i64 0, i32 5
  %250 = load float, ptr %249, align 4, !tbaa !31
  %251 = fmul float %250, %248
  %252 = fptosi float %251 to i32
  %253 = tail call i32 @llvm.smax.i32(i32 %252, i32 %145)
  %254 = sub nsw i32 %253, %245
  %255 = getelementptr inbounds %class.ResizeArrayRaw, ptr %239, i64 0, i32 6
  %256 = load i32, ptr %255, align 8, !tbaa !32
  %257 = icmp slt i32 %254, %256
  %258 = add nsw i32 %256, %245
  %259 = select i1 %257, i32 %258, i32 %253
  %260 = sext i32 %259 to i64
  %261 = shl nsw i64 %260, 1
  %262 = add nsw i64 %261, 31
  %263 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %262) #9
  %264 = getelementptr inbounds i8, ptr %263, i64 31
  %265 = ptrtoint ptr %264 to i64
  %266 = and i64 %265, 31
  %267 = sub nsw i64 0, %266
  %268 = getelementptr inbounds i8, ptr %264, i64 %267
  %269 = load ptr, ptr %239, align 8, !tbaa !33
  %270 = sext i32 %241 to i64
  %271 = shl nsw i64 %270, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %268, ptr align 1 %269, i64 %271, i1 false)
  %272 = icmp eq i32 %245, 0
  br i1 %272, label %278, label %273

273:                                              ; preds = %247
  %274 = getelementptr inbounds %class.ResizeArrayRaw, ptr %239, i64 0, i32 1
  %275 = load ptr, ptr %274, align 8, !tbaa !34
  %276 = icmp eq ptr %275, null
  br i1 %276, label %278, label %277

277:                                              ; preds = %273
  tail call void @_ZdaPv(ptr noundef nonnull %275) #10
  br label %278

278:                                              ; preds = %277, %273, %247
  %279 = getelementptr inbounds %class.ResizeArrayRaw, ptr %239, i64 0, i32 1
  store ptr %263, ptr %279, align 8, !tbaa !34
  store ptr %268, ptr %239, align 8, !tbaa !33
  store i32 %259, ptr %244, align 4, !tbaa !30
  %280 = load ptr, ptr %238, align 8, !tbaa !25
  br label %281

281:                                              ; preds = %235, %243, %278
  %282 = phi ptr [ %239, %235 ], [ %239, %243 ], [ %280, %278 ]
  store i32 %145, ptr %240, align 8, !tbaa !27
  %283 = load ptr, ptr %282, align 8, !tbaa !33
  %284 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %47, i64 0, i32 5, i32 1
  %285 = load ptr, ptr %284, align 8, !tbaa !25
  %286 = getelementptr inbounds %class.ResizeArrayRaw, ptr %285, i64 0, i32 2
  %287 = load i32, ptr %286, align 8, !tbaa !27
  %288 = icmp slt i32 %287, %145
  br i1 %288, label %289, label %327

289:                                              ; preds = %281
  %290 = getelementptr inbounds %class.ResizeArrayRaw, ptr %285, i64 0, i32 3
  %291 = load i32, ptr %290, align 4, !tbaa !30
  %292 = icmp slt i32 %291, %145
  br i1 %292, label %293, label %327

293:                                              ; preds = %289
  %294 = sitofp i32 %291 to float
  %295 = getelementptr inbounds %class.ResizeArrayRaw, ptr %285, i64 0, i32 5
  %296 = load float, ptr %295, align 4, !tbaa !31
  %297 = fmul float %296, %294
  %298 = fptosi float %297 to i32
  %299 = tail call i32 @llvm.smax.i32(i32 %298, i32 %145)
  %300 = sub nsw i32 %299, %291
  %301 = getelementptr inbounds %class.ResizeArrayRaw, ptr %285, i64 0, i32 6
  %302 = load i32, ptr %301, align 8, !tbaa !32
  %303 = icmp slt i32 %300, %302
  %304 = add nsw i32 %302, %291
  %305 = select i1 %303, i32 %304, i32 %299
  %306 = sext i32 %305 to i64
  %307 = shl nsw i64 %306, 1
  %308 = add nsw i64 %307, 31
  %309 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %308) #9
  %310 = getelementptr inbounds i8, ptr %309, i64 31
  %311 = ptrtoint ptr %310 to i64
  %312 = and i64 %311, 31
  %313 = sub nsw i64 0, %312
  %314 = getelementptr inbounds i8, ptr %310, i64 %313
  %315 = load ptr, ptr %285, align 8, !tbaa !33
  %316 = sext i32 %287 to i64
  %317 = shl nsw i64 %316, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %314, ptr align 1 %315, i64 %317, i1 false)
  %318 = icmp eq i32 %291, 0
  br i1 %318, label %324, label %319

319:                                              ; preds = %293
  %320 = getelementptr inbounds %class.ResizeArrayRaw, ptr %285, i64 0, i32 1
  %321 = load ptr, ptr %320, align 8, !tbaa !34
  %322 = icmp eq ptr %321, null
  br i1 %322, label %324, label %323

323:                                              ; preds = %319
  tail call void @_ZdaPv(ptr noundef nonnull %321) #10
  br label %324

324:                                              ; preds = %323, %319, %293
  %325 = getelementptr inbounds %class.ResizeArrayRaw, ptr %285, i64 0, i32 1
  store ptr %309, ptr %325, align 8, !tbaa !34
  store ptr %314, ptr %285, align 8, !tbaa !33
  store i32 %305, ptr %290, align 4, !tbaa !30
  %326 = load ptr, ptr %284, align 8, !tbaa !25
  br label %327

327:                                              ; preds = %281, %289, %324
  %328 = phi ptr [ %285, %281 ], [ %285, %289 ], [ %326, %324 ]
  store i32 %145, ptr %286, align 8, !tbaa !27
  %329 = load ptr, ptr %328, align 8, !tbaa !33
  %330 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %47, i64 0, i32 6, i32 1
  %331 = load ptr, ptr %330, align 8, !tbaa !25
  %332 = getelementptr inbounds %class.ResizeArrayRaw, ptr %331, i64 0, i32 2
  %333 = load i32, ptr %332, align 8, !tbaa !27
  %334 = icmp slt i32 %333, %145
  br i1 %334, label %335, label %373

335:                                              ; preds = %327
  %336 = getelementptr inbounds %class.ResizeArrayRaw, ptr %331, i64 0, i32 3
  %337 = load i32, ptr %336, align 4, !tbaa !30
  %338 = icmp slt i32 %337, %145
  br i1 %338, label %339, label %373

339:                                              ; preds = %335
  %340 = sitofp i32 %337 to float
  %341 = getelementptr inbounds %class.ResizeArrayRaw, ptr %331, i64 0, i32 5
  %342 = load float, ptr %341, align 4, !tbaa !31
  %343 = fmul float %342, %340
  %344 = fptosi float %343 to i32
  %345 = tail call i32 @llvm.smax.i32(i32 %344, i32 %145)
  %346 = sub nsw i32 %345, %337
  %347 = getelementptr inbounds %class.ResizeArrayRaw, ptr %331, i64 0, i32 6
  %348 = load i32, ptr %347, align 8, !tbaa !32
  %349 = icmp slt i32 %346, %348
  %350 = add nsw i32 %348, %337
  %351 = select i1 %349, i32 %350, i32 %345
  %352 = sext i32 %351 to i64
  %353 = shl nsw i64 %352, 1
  %354 = add nsw i64 %353, 31
  %355 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %354) #9
  %356 = getelementptr inbounds i8, ptr %355, i64 31
  %357 = ptrtoint ptr %356 to i64
  %358 = and i64 %357, 31
  %359 = sub nsw i64 0, %358
  %360 = getelementptr inbounds i8, ptr %356, i64 %359
  %361 = load ptr, ptr %331, align 8, !tbaa !33
  %362 = sext i32 %333 to i64
  %363 = shl nsw i64 %362, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %360, ptr align 1 %361, i64 %363, i1 false)
  %364 = icmp eq i32 %337, 0
  br i1 %364, label %370, label %365

365:                                              ; preds = %339
  %366 = getelementptr inbounds %class.ResizeArrayRaw, ptr %331, i64 0, i32 1
  %367 = load ptr, ptr %366, align 8, !tbaa !34
  %368 = icmp eq ptr %367, null
  br i1 %368, label %370, label %369

369:                                              ; preds = %365
  tail call void @_ZdaPv(ptr noundef nonnull %367) #10
  br label %370

370:                                              ; preds = %369, %365, %339
  %371 = getelementptr inbounds %class.ResizeArrayRaw, ptr %331, i64 0, i32 1
  store ptr %355, ptr %371, align 8, !tbaa !34
  store ptr %360, ptr %331, align 8, !tbaa !33
  store i32 %351, ptr %336, align 4, !tbaa !30
  %372 = load ptr, ptr %330, align 8, !tbaa !25
  br label %373

373:                                              ; preds = %327, %335, %370
  %374 = phi ptr [ %331, %327 ], [ %331, %335 ], [ %372, %370 ]
  store i32 %145, ptr %332, align 8, !tbaa !27
  %375 = load ptr, ptr %374, align 8, !tbaa !33
  %376 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %47, i64 0, i32 15, i32 1
  %377 = load ptr, ptr %376, align 8, !tbaa !25
  %378 = getelementptr inbounds %class.ResizeArrayRaw, ptr %377, i64 0, i32 2
  %379 = load i32, ptr %378, align 8, !tbaa !27
  %380 = icmp slt i32 %379, %145
  br i1 %380, label %381, label %419

381:                                              ; preds = %373
  %382 = getelementptr inbounds %class.ResizeArrayRaw, ptr %377, i64 0, i32 3
  %383 = load i32, ptr %382, align 4, !tbaa !30
  %384 = icmp slt i32 %383, %145
  br i1 %384, label %385, label %419

385:                                              ; preds = %381
  %386 = sitofp i32 %383 to float
  %387 = getelementptr inbounds %class.ResizeArrayRaw, ptr %377, i64 0, i32 5
  %388 = load float, ptr %387, align 4, !tbaa !31
  %389 = fmul float %388, %386
  %390 = fptosi float %389 to i32
  %391 = tail call i32 @llvm.smax.i32(i32 %390, i32 %145)
  %392 = sub nsw i32 %391, %383
  %393 = getelementptr inbounds %class.ResizeArrayRaw, ptr %377, i64 0, i32 6
  %394 = load i32, ptr %393, align 8, !tbaa !32
  %395 = icmp slt i32 %392, %394
  %396 = add nsw i32 %394, %383
  %397 = select i1 %395, i32 %396, i32 %391
  %398 = sext i32 %397 to i64
  %399 = shl nsw i64 %398, 1
  %400 = add nsw i64 %399, 31
  %401 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %400) #9
  %402 = getelementptr inbounds i8, ptr %401, i64 31
  %403 = ptrtoint ptr %402 to i64
  %404 = and i64 %403, 31
  %405 = sub nsw i64 0, %404
  %406 = getelementptr inbounds i8, ptr %402, i64 %405
  %407 = load ptr, ptr %377, align 8, !tbaa !33
  %408 = sext i32 %379 to i64
  %409 = shl nsw i64 %408, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %406, ptr align 1 %407, i64 %409, i1 false)
  %410 = icmp eq i32 %383, 0
  br i1 %410, label %416, label %411

411:                                              ; preds = %385
  %412 = getelementptr inbounds %class.ResizeArrayRaw, ptr %377, i64 0, i32 1
  %413 = load ptr, ptr %412, align 8, !tbaa !34
  %414 = icmp eq ptr %413, null
  br i1 %414, label %416, label %415

415:                                              ; preds = %411
  tail call void @_ZdaPv(ptr noundef nonnull %413) #10
  br label %416

416:                                              ; preds = %415, %411, %385
  %417 = getelementptr inbounds %class.ResizeArrayRaw, ptr %377, i64 0, i32 1
  store ptr %401, ptr %417, align 8, !tbaa !34
  store ptr %406, ptr %377, align 8, !tbaa !33
  store i32 %397, ptr %382, align 4, !tbaa !30
  %418 = load ptr, ptr %376, align 8, !tbaa !25
  br label %419

419:                                              ; preds = %373, %381, %416
  %420 = phi ptr [ %377, %373 ], [ %377, %381 ], [ %418, %416 ]
  store i32 %145, ptr %378, align 8, !tbaa !27
  %421 = load ptr, ptr %420, align 8, !tbaa !33
  %422 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %47, i64 0, i32 16, i32 1
  %423 = load ptr, ptr %422, align 8, !tbaa !25
  %424 = getelementptr inbounds %class.ResizeArrayRaw, ptr %423, i64 0, i32 2
  %425 = load i32, ptr %424, align 8, !tbaa !27
  %426 = icmp slt i32 %425, %145
  br i1 %426, label %427, label %465

427:                                              ; preds = %419
  %428 = getelementptr inbounds %class.ResizeArrayRaw, ptr %423, i64 0, i32 3
  %429 = load i32, ptr %428, align 4, !tbaa !30
  %430 = icmp slt i32 %429, %145
  br i1 %430, label %431, label %465

431:                                              ; preds = %427
  %432 = sitofp i32 %429 to float
  %433 = getelementptr inbounds %class.ResizeArrayRaw, ptr %423, i64 0, i32 5
  %434 = load float, ptr %433, align 4, !tbaa !31
  %435 = fmul float %434, %432
  %436 = fptosi float %435 to i32
  %437 = tail call i32 @llvm.smax.i32(i32 %436, i32 %145)
  %438 = sub nsw i32 %437, %429
  %439 = getelementptr inbounds %class.ResizeArrayRaw, ptr %423, i64 0, i32 6
  %440 = load i32, ptr %439, align 8, !tbaa !32
  %441 = icmp slt i32 %438, %440
  %442 = add nsw i32 %440, %429
  %443 = select i1 %441, i32 %442, i32 %437
  %444 = sext i32 %443 to i64
  %445 = shl nsw i64 %444, 1
  %446 = add nsw i64 %445, 31
  %447 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %446) #9
  %448 = getelementptr inbounds i8, ptr %447, i64 31
  %449 = ptrtoint ptr %448 to i64
  %450 = and i64 %449, 31
  %451 = sub nsw i64 0, %450
  %452 = getelementptr inbounds i8, ptr %448, i64 %451
  %453 = load ptr, ptr %423, align 8, !tbaa !33
  %454 = sext i32 %425 to i64
  %455 = shl nsw i64 %454, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %452, ptr align 1 %453, i64 %455, i1 false)
  %456 = icmp eq i32 %429, 0
  br i1 %456, label %462, label %457

457:                                              ; preds = %431
  %458 = getelementptr inbounds %class.ResizeArrayRaw, ptr %423, i64 0, i32 1
  %459 = load ptr, ptr %458, align 8, !tbaa !34
  %460 = icmp eq ptr %459, null
  br i1 %460, label %462, label %461

461:                                              ; preds = %457
  tail call void @_ZdaPv(ptr noundef nonnull %459) #10
  br label %462

462:                                              ; preds = %461, %457, %431
  %463 = getelementptr inbounds %class.ResizeArrayRaw, ptr %423, i64 0, i32 1
  store ptr %447, ptr %463, align 8, !tbaa !34
  store ptr %452, ptr %423, align 8, !tbaa !33
  store i32 %443, ptr %428, align 4, !tbaa !30
  %464 = load ptr, ptr %422, align 8, !tbaa !25
  br label %465

465:                                              ; preds = %419, %427, %462
  %466 = phi ptr [ %423, %419 ], [ %423, %427 ], [ %464, %462 ]
  store i32 %145, ptr %424, align 8, !tbaa !27
  %467 = load ptr, ptr %466, align 8, !tbaa !33
  br i1 %144, label %600, label %468

468:                                              ; preds = %465
  %469 = icmp sgt i32 %38, 0
  br i1 %469, label %470, label %612

470:                                              ; preds = %468
  %471 = zext i32 %38 to i64
  %472 = and i64 %471, 1
  %473 = icmp eq i32 %38, 1
  br i1 %473, label %506, label %474

474:                                              ; preds = %470
  %475 = and i64 %471, 4294967294
  br label %476

476:                                              ; preds = %501, %474
  %477 = phi i64 [ 0, %474 ], [ %503, %501 ]
  %478 = phi i32 [ 0, %474 ], [ %502, %501 ]
  %479 = phi i64 [ 0, %474 ], [ %504, %501 ]
  %480 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %477, i32 4
  %481 = load i8, ptr %480, align 1
  %482 = and i8 %481, 7
  %483 = icmp eq i8 %482, 0
  br i1 %483, label %489, label %484

484:                                              ; preds = %476
  %485 = trunc i64 %477 to i16
  %486 = add nsw i32 %478, 1
  %487 = sext i32 %478 to i64
  %488 = getelementptr inbounds i16, ptr %191, i64 %487
  store i16 %485, ptr %488, align 2, !tbaa !44
  br label %489

489:                                              ; preds = %476, %484
  %490 = phi i32 [ %486, %484 ], [ %478, %476 ]
  %491 = or i64 %477, 1
  %492 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %491, i32 4
  %493 = load i8, ptr %492, align 1
  %494 = and i8 %493, 7
  %495 = icmp eq i8 %494, 0
  br i1 %495, label %501, label %496

496:                                              ; preds = %489
  %497 = trunc i64 %491 to i16
  %498 = add nsw i32 %490, 1
  %499 = sext i32 %490 to i64
  %500 = getelementptr inbounds i16, ptr %191, i64 %499
  store i16 %497, ptr %500, align 2, !tbaa !44
  br label %501

501:                                              ; preds = %496, %489
  %502 = phi i32 [ %498, %496 ], [ %490, %489 ]
  %503 = add nuw nsw i64 %477, 2
  %504 = add i64 %479, 2
  %505 = icmp eq i64 %504, %475
  br i1 %505, label %506, label %476

506:                                              ; preds = %501, %470
  %507 = phi i32 [ undef, %470 ], [ %502, %501 ]
  %508 = phi i64 [ 0, %470 ], [ %503, %501 ]
  %509 = phi i32 [ 0, %470 ], [ %502, %501 ]
  %510 = icmp eq i64 %472, 0
  br i1 %510, label %521, label %511

511:                                              ; preds = %506
  %512 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %508, i32 4
  %513 = load i8, ptr %512, align 1
  %514 = and i8 %513, 7
  %515 = icmp eq i8 %514, 0
  br i1 %515, label %521, label %516

516:                                              ; preds = %511
  %517 = trunc i64 %508 to i16
  %518 = add nsw i32 %509, 1
  %519 = sext i32 %509 to i64
  %520 = getelementptr inbounds i16, ptr %191, i64 %519
  store i16 %517, ptr %520, align 2, !tbaa !44
  br label %521

521:                                              ; preds = %511, %516, %506
  %522 = phi i32 [ %507, %506 ], [ %518, %516 ], [ %509, %511 ]
  %523 = icmp eq i32 %522, 0
  br i1 %523, label %531, label %524

524:                                              ; preds = %521
  %525 = add nsw i32 %522, -1
  %526 = sext i32 %525 to i64
  %527 = getelementptr inbounds i16, ptr %191, i64 %526
  %528 = load i16, ptr %527, align 2, !tbaa !44
  %529 = sext i32 %522 to i64
  %530 = getelementptr inbounds i16, ptr %191, i64 %529
  store i16 %528, ptr %530, align 2, !tbaa !44
  br label %531

531:                                              ; preds = %524, %521
  %532 = load i32, ptr @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4, !tbaa !5
  %533 = icmp ne i32 %532, 0
  %534 = icmp sgt i32 %522, 0
  %535 = and i1 %533, %534
  br i1 %535, label %536, label %612

536:                                              ; preds = %531
  %537 = zext i32 %522 to i64
  %538 = and i64 %537, 1
  %539 = icmp eq i32 %522, 1
  br i1 %539, label %574, label %540

540:                                              ; preds = %536
  %541 = and i64 %537, 4294967294
  br label %542

542:                                              ; preds = %569, %540
  %543 = phi i64 [ 0, %540 ], [ %571, %569 ]
  %544 = phi i32 [ 0, %540 ], [ %570, %569 ]
  %545 = phi i64 [ 0, %540 ], [ %572, %569 ]
  %546 = getelementptr inbounds i16, ptr %191, i64 %543
  %547 = load i16, ptr %546, align 2, !tbaa !44
  %548 = zext i16 %547 to i64
  %549 = getelementptr inbounds %struct.CompAtomExt, ptr %45, i64 %548
  %550 = load i32, ptr %549, align 4
  %551 = icmp sgt i32 %550, -1
  br i1 %551, label %552, label %556

552:                                              ; preds = %542
  %553 = add nsw i32 %544, 1
  %554 = sext i32 %544 to i64
  %555 = getelementptr inbounds i16, ptr %237, i64 %554
  store i16 %547, ptr %555, align 2, !tbaa !44
  br label %556

556:                                              ; preds = %542, %552
  %557 = phi i32 [ %544, %542 ], [ %553, %552 ]
  %558 = or i64 %543, 1
  %559 = getelementptr inbounds i16, ptr %191, i64 %558
  %560 = load i16, ptr %559, align 2, !tbaa !44
  %561 = zext i16 %560 to i64
  %562 = getelementptr inbounds %struct.CompAtomExt, ptr %45, i64 %561
  %563 = load i32, ptr %562, align 4
  %564 = icmp sgt i32 %563, -1
  br i1 %564, label %565, label %569

565:                                              ; preds = %556
  %566 = add nsw i32 %557, 1
  %567 = sext i32 %557 to i64
  %568 = getelementptr inbounds i16, ptr %237, i64 %567
  store i16 %560, ptr %568, align 2, !tbaa !44
  br label %569

569:                                              ; preds = %565, %556
  %570 = phi i32 [ %557, %556 ], [ %566, %565 ]
  %571 = add nuw nsw i64 %543, 2
  %572 = add i64 %545, 2
  %573 = icmp eq i64 %572, %541
  br i1 %573, label %574, label %542

574:                                              ; preds = %569, %536
  %575 = phi i32 [ undef, %536 ], [ %570, %569 ]
  %576 = phi i64 [ 0, %536 ], [ %571, %569 ]
  %577 = phi i32 [ 0, %536 ], [ %570, %569 ]
  %578 = icmp eq i64 %538, 0
  br i1 %578, label %590, label %579

579:                                              ; preds = %574
  %580 = getelementptr inbounds i16, ptr %191, i64 %576
  %581 = load i16, ptr %580, align 2, !tbaa !44
  %582 = zext i16 %581 to i64
  %583 = getelementptr inbounds %struct.CompAtomExt, ptr %45, i64 %582
  %584 = load i32, ptr %583, align 4
  %585 = icmp sgt i32 %584, -1
  br i1 %585, label %586, label %590

586:                                              ; preds = %579
  %587 = add nsw i32 %577, 1
  %588 = sext i32 %577 to i64
  %589 = getelementptr inbounds i16, ptr %237, i64 %588
  store i16 %581, ptr %589, align 2, !tbaa !44
  br label %590

590:                                              ; preds = %579, %586, %574
  %591 = phi i32 [ %575, %574 ], [ %577, %579 ], [ %587, %586 ]
  %592 = icmp eq i32 %591, 0
  br i1 %592, label %612, label %593

593:                                              ; preds = %590
  %594 = add nsw i32 %591, -1
  %595 = sext i32 %594 to i64
  %596 = getelementptr inbounds i16, ptr %237, i64 %595
  %597 = load i16, ptr %596, align 2, !tbaa !44
  %598 = sext i32 %591 to i64
  %599 = getelementptr inbounds i16, ptr %237, i64 %598
  store i16 %597, ptr %599, align 2, !tbaa !44
  br label %612

600:                                              ; preds = %465
  %601 = load ptr, ptr %8, align 8, !tbaa !46
  %602 = load i32, ptr %13, align 8, !tbaa !17
  %603 = add nsw i32 %602, 1
  store i32 %603, ptr %13, align 8, !tbaa !17
  %604 = sext i32 %602 to i64
  %605 = getelementptr inbounds i16, ptr %601, i64 %604
  %606 = load i16, ptr %605, align 2, !tbaa !44
  %607 = zext i16 %606 to i32
  %608 = icmp eq i32 %36, %607
  br i1 %608, label %629, label %609

609:                                              ; preds = %600
  tail call void @_Z8NAMD_bugPKc(ptr noundef nonnull @.str)
  %610 = load ptr, ptr %8, align 8, !tbaa !46
  %611 = load i32, ptr %13, align 8, !tbaa !17
  br label %629

612:                                              ; preds = %468, %593, %590, %531
  %613 = phi i32 [ %522, %593 ], [ %522, %590 ], [ %522, %531 ], [ 0, %468 ]
  %614 = phi i32 [ %591, %593 ], [ 0, %590 ], [ 0, %531 ], [ 0, %468 ]
  %615 = load i32, ptr %13, align 8, !tbaa !17
  %616 = trunc i32 %36 to i16
  %617 = load ptr, ptr %8, align 8, !tbaa !46
  %618 = sext i32 %615 to i64
  %619 = getelementptr inbounds i16, ptr %617, i64 %618
  store i16 %616, ptr %619, align 2, !tbaa !44
  %620 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 16
  %621 = load i32, ptr %620, align 4, !tbaa !47
  %622 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 18
  %623 = load i32, ptr %622, align 4, !tbaa !48
  %624 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 4, i64 1
  %625 = load ptr, ptr %624, align 8, !tbaa !23
  %626 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 4
  %627 = load ptr, ptr %626, align 8, !tbaa !23
  %628 = add nsw i32 %615, 2
  store i32 %628, ptr %13, align 8, !tbaa !17
  br label %645

629:                                              ; preds = %609, %600
  %630 = phi i32 [ %603, %600 ], [ %611, %609 ]
  %631 = phi ptr [ %601, %600 ], [ %610, %609 ]
  %632 = sext i32 %630 to i64
  %633 = getelementptr inbounds i16, ptr %631, i64 %632
  %634 = load i16, ptr %633, align 2, !tbaa !44
  %635 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 16
  %636 = load i32, ptr %635, align 4, !tbaa !47
  %637 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 18
  %638 = load i32, ptr %637, align 4, !tbaa !48
  %639 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 4, i64 1
  %640 = load ptr, ptr %639, align 8, !tbaa !23
  %641 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 4
  %642 = load ptr, ptr %641, align 8, !tbaa !23
  %643 = add nsw i32 %630, 1
  store i32 %643, ptr %13, align 8, !tbaa !17
  %644 = zext i16 %634 to i32
  br label %645

645:                                              ; preds = %629, %612
  %646 = phi i32 [ %636, %629 ], [ %621, %612 ]
  %647 = phi i32 [ %638, %629 ], [ %623, %612 ]
  %648 = phi ptr [ %640, %629 ], [ %625, %612 ]
  %649 = phi ptr [ %642, %629 ], [ %627, %612 ]
  %650 = phi i32 [ 0, %629 ], [ %614, %612 ]
  %651 = phi i32 [ 0, %629 ], [ %613, %612 ]
  %652 = phi i32 [ %644, %629 ], [ 0, %612 ]
  %653 = add nsw i32 %647, -1
  %654 = icmp slt i32 %652, %36
  br i1 %654, label %655, label %2509

655:                                              ; preds = %645
  %656 = getelementptr inbounds %class.Molecule, ptr %26, i64 0, i32 1
  %657 = getelementptr inbounds %class.Molecule, ptr %26, i64 0, i32 4
  %658 = getelementptr inbounds %class.Molecule, ptr %26, i64 0, i32 2
  %659 = getelementptr inbounds %class.Molecule, ptr %26, i64 0, i32 3
  %660 = ptrtoint ptr %421 to i64
  %661 = add nsw i32 %38, 10
  %662 = getelementptr inbounds %class.Pairlists, ptr %8, i64 0, i32 2
  %663 = ptrtoint ptr %467 to i64
  %664 = getelementptr inbounds i16, ptr %421, i64 1
  %665 = ptrtoint ptr %329 to i64
  %666 = ptrtoint ptr %375 to i64
  %667 = getelementptr inbounds %class.LJTable, ptr %25, i64 0, i32 1
  %668 = getelementptr inbounds %class.LJTable, ptr %25, i64 0, i32 2
  %669 = fneg double %28
  %670 = getelementptr inbounds double, ptr %6, i64 26
  %671 = getelementptr inbounds double, ptr %6, i64 28
  %672 = getelementptr inbounds double, ptr %6, i64 29
  %673 = getelementptr inbounds double, ptr %6, i64 31
  %674 = fneg double %30
  %675 = insertelement <2 x double> poison, double %23, i64 0
  %676 = shufflevector <2 x double> %675, <2 x double> poison, <2 x i32> zeroinitializer
  br label %677

677:                                              ; preds = %655, %2493
  %678 = phi i32 [ 0, %655 ], [ %2500, %2493 ]
  %679 = phi i32 [ %652, %655 ], [ %2499, %2493 ]
  %680 = phi ptr [ null, %655 ], [ %2498, %2493 ]
  %681 = phi ptr [ null, %655 ], [ %2497, %2493 ]
  %682 = phi ptr [ null, %655 ], [ %2496, %2493 ]
  %683 = phi i32 [ 0, %655 ], [ %2495, %2493 ]
  %684 = phi i32 [ %646, %655 ], [ %2494, %2493 ]
  %685 = phi <2 x double> [ zeroinitializer, %655 ], [ %2501, %2493 ]
  %686 = phi <2 x double> [ zeroinitializer, %655 ], [ %2502, %2493 ]
  %687 = phi <2 x double> [ zeroinitializer, %655 ], [ %2503, %2493 ]
  %688 = phi <2 x double> [ zeroinitializer, %655 ], [ %2504, %2493 ]
  %689 = sext i32 %679 to i64
  %690 = getelementptr inbounds %struct.CompAtom, ptr %39, i64 %689
  %691 = getelementptr inbounds %struct.CompAtomExt, ptr %43, i64 %689
  br i1 %144, label %1941, label %692

692:                                              ; preds = %677
  %693 = getelementptr inbounds %struct.CompAtom, ptr %39, i64 %689, i32 4
  %694 = load i8, ptr %693, align 1
  %695 = lshr i8 %694, 3
  %696 = and i8 %695, 15
  %697 = zext i8 %696 to i32
  %698 = icmp eq i8 %696, 0
  br i1 %698, label %704, label %699

699:                                              ; preds = %692
  %700 = icmp eq i32 %684, 0
  br i1 %700, label %704, label %701

701:                                              ; preds = %699
  %702 = add nsw i32 %684, -1
  %703 = add nsw i32 %679, %697
  br label %2493

704:                                              ; preds = %699, %692
  %705 = phi i32 [ %653, %699 ], [ %684, %692 ]
  %706 = load <2 x double>, ptr %690, align 8, !tbaa !19
  %707 = fadd <2 x double> %15, %706
  %708 = getelementptr inbounds %class.Vector, ptr %690, i64 0, i32 2
  %709 = load double, ptr %708, align 8, !tbaa !49
  %710 = fadd double %17, %709
  %711 = load i32, ptr %691, align 4
  %712 = shl i32 %711, 2
  %713 = ashr exact i32 %712, 2
  %714 = load ptr, ptr %656, align 8, !tbaa !51
  %715 = sext i32 %713 to i64
  %716 = getelementptr inbounds %class.ExclusionCheck, ptr %714, i64 %715
  %717 = load i32, ptr %716, align 8, !tbaa !53
  %718 = getelementptr inbounds %class.ExclusionCheck, ptr %714, i64 %715, i32 1
  %719 = load i32, ptr %718, align 4, !tbaa !55
  %720 = getelementptr inbounds %class.ExclusionCheck, ptr %714, i64 %715, i32 2
  %721 = load ptr, ptr %720, align 8, !tbaa !56
  %722 = icmp eq ptr %721, null
  br i1 %722, label %727, label %723

723:                                              ; preds = %704
  %724 = sext i32 %717 to i64
  %725 = sub nsw i64 0, %724
  %726 = getelementptr inbounds i8, ptr %721, i64 %725
  br label %953

727:                                              ; preds = %704
  %728 = icmp eq ptr %680, null
  br i1 %728, label %816, label %729

729:                                              ; preds = %727
  %730 = load i32, ptr %681, align 4, !tbaa !5
  %731 = icmp slt i32 %730, 1
  br i1 %731, label %779, label %732

732:                                              ; preds = %729
  %733 = add nuw i32 %730, 1
  %734 = zext i32 %733 to i64
  %735 = add nsw i64 %734, -1
  %736 = add nsw i64 %734, -2
  %737 = and i64 %735, 3
  %738 = icmp ult i64 %736, 3
  br i1 %738, label %766, label %739

739:                                              ; preds = %732
  %740 = and i64 %735, -4
  br label %741

741:                                              ; preds = %741, %739
  %742 = phi i64 [ 1, %739 ], [ %763, %741 ]
  %743 = phi i64 [ 0, %739 ], [ %764, %741 ]
  %744 = getelementptr inbounds i32, ptr %681, i64 %742
  %745 = load i32, ptr %744, align 4, !tbaa !5
  %746 = sext i32 %745 to i64
  %747 = getelementptr inbounds i8, ptr %680, i64 %746
  store i8 0, ptr %747, align 1, !tbaa !57
  %748 = add nuw nsw i64 %742, 1
  %749 = getelementptr inbounds i32, ptr %681, i64 %748
  %750 = load i32, ptr %749, align 4, !tbaa !5
  %751 = sext i32 %750 to i64
  %752 = getelementptr inbounds i8, ptr %680, i64 %751
  store i8 0, ptr %752, align 1, !tbaa !57
  %753 = add nuw nsw i64 %742, 2
  %754 = getelementptr inbounds i32, ptr %681, i64 %753
  %755 = load i32, ptr %754, align 4, !tbaa !5
  %756 = sext i32 %755 to i64
  %757 = getelementptr inbounds i8, ptr %680, i64 %756
  store i8 0, ptr %757, align 1, !tbaa !57
  %758 = add nuw nsw i64 %742, 3
  %759 = getelementptr inbounds i32, ptr %681, i64 %758
  %760 = load i32, ptr %759, align 4, !tbaa !5
  %761 = sext i32 %760 to i64
  %762 = getelementptr inbounds i8, ptr %680, i64 %761
  store i8 0, ptr %762, align 1, !tbaa !57
  %763 = add nuw nsw i64 %742, 4
  %764 = add i64 %743, 4
  %765 = icmp eq i64 %764, %740
  br i1 %765, label %766, label %741

766:                                              ; preds = %741, %732
  %767 = phi i64 [ 1, %732 ], [ %763, %741 ]
  %768 = icmp eq i64 %737, 0
  br i1 %768, label %779, label %769

769:                                              ; preds = %766, %769
  %770 = phi i64 [ %776, %769 ], [ %767, %766 ]
  %771 = phi i64 [ %777, %769 ], [ 0, %766 ]
  %772 = getelementptr inbounds i32, ptr %681, i64 %770
  %773 = load i32, ptr %772, align 4, !tbaa !5
  %774 = sext i32 %773 to i64
  %775 = getelementptr inbounds i8, ptr %680, i64 %774
  store i8 0, ptr %775, align 1, !tbaa !57
  %776 = add nuw nsw i64 %770, 1
  %777 = add i64 %771, 1
  %778 = icmp eq i64 %777, %737
  br i1 %778, label %779, label %769, !llvm.loop !322

779:                                              ; preds = %766, %769, %729
  %780 = load i32, ptr %682, align 4, !tbaa !5
  %781 = icmp slt i32 %780, 1
  br i1 %781, label %836, label %782

782:                                              ; preds = %779
  %783 = add nuw i32 %780, 1
  %784 = zext i32 %783 to i64
  %785 = add nsw i64 %784, -1
  %786 = add nsw i64 %784, -2
  %787 = and i64 %785, 3
  %788 = icmp ult i64 %786, 3
  br i1 %788, label %823, label %789

789:                                              ; preds = %782
  %790 = and i64 %785, -4
  br label %791

791:                                              ; preds = %791, %789
  %792 = phi i64 [ 1, %789 ], [ %813, %791 ]
  %793 = phi i64 [ 0, %789 ], [ %814, %791 ]
  %794 = getelementptr inbounds i32, ptr %682, i64 %792
  %795 = load i32, ptr %794, align 4, !tbaa !5
  %796 = sext i32 %795 to i64
  %797 = getelementptr inbounds i8, ptr %680, i64 %796
  store i8 0, ptr %797, align 1, !tbaa !57
  %798 = add nuw nsw i64 %792, 1
  %799 = getelementptr inbounds i32, ptr %682, i64 %798
  %800 = load i32, ptr %799, align 4, !tbaa !5
  %801 = sext i32 %800 to i64
  %802 = getelementptr inbounds i8, ptr %680, i64 %801
  store i8 0, ptr %802, align 1, !tbaa !57
  %803 = add nuw nsw i64 %792, 2
  %804 = getelementptr inbounds i32, ptr %682, i64 %803
  %805 = load i32, ptr %804, align 4, !tbaa !5
  %806 = sext i32 %805 to i64
  %807 = getelementptr inbounds i8, ptr %680, i64 %806
  store i8 0, ptr %807, align 1, !tbaa !57
  %808 = add nuw nsw i64 %792, 3
  %809 = getelementptr inbounds i32, ptr %682, i64 %808
  %810 = load i32, ptr %809, align 4, !tbaa !5
  %811 = sext i32 %810 to i64
  %812 = getelementptr inbounds i8, ptr %680, i64 %811
  store i8 0, ptr %812, align 1, !tbaa !57
  %813 = add nuw nsw i64 %792, 4
  %814 = add i64 %793, 4
  %815 = icmp eq i64 %814, %790
  br i1 %815, label %823, label %791

816:                                              ; preds = %727
  %817 = load i32, ptr %657, align 8, !tbaa !60
  %818 = tail call i32 @llvm.smax.i32(i32 %817, i32 -1)
  %819 = sext i32 %818 to i64
  %820 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %819) #9
  %821 = load i32, ptr %657, align 8, !tbaa !60
  %822 = sext i32 %821 to i64
  tail call void @llvm.memset.p0.i64(ptr nonnull align 1 %820, i8 0, i64 %822, i1 false)
  br label %836

823:                                              ; preds = %791, %782
  %824 = phi i64 [ 1, %782 ], [ %813, %791 ]
  %825 = icmp eq i64 %787, 0
  br i1 %825, label %836, label %826

826:                                              ; preds = %823, %826
  %827 = phi i64 [ %833, %826 ], [ %824, %823 ]
  %828 = phi i64 [ %834, %826 ], [ 0, %823 ]
  %829 = getelementptr inbounds i32, ptr %682, i64 %827
  %830 = load i32, ptr %829, align 4, !tbaa !5
  %831 = sext i32 %830 to i64
  %832 = getelementptr inbounds i8, ptr %680, i64 %831
  store i8 0, ptr %832, align 1, !tbaa !57
  %833 = add nuw nsw i64 %827, 1
  %834 = add i64 %828, 1
  %835 = icmp eq i64 %834, %787
  br i1 %835, label %836, label %826, !llvm.loop !323

836:                                              ; preds = %823, %826, %779, %816
  %837 = phi ptr [ %820, %816 ], [ %680, %779 ], [ %680, %826 ], [ %680, %823 ]
  %838 = load i32, ptr %691, align 4
  %839 = shl i32 %838, 2
  %840 = ashr exact i32 %839, 2
  %841 = load ptr, ptr %658, align 8, !tbaa !62
  %842 = sext i32 %840 to i64
  %843 = getelementptr inbounds ptr, ptr %841, i64 %842
  %844 = load ptr, ptr %843, align 8, !tbaa !23
  %845 = load i32, ptr %844, align 4, !tbaa !5
  %846 = icmp slt i32 %845, 1
  br i1 %846, label %899, label %847

847:                                              ; preds = %836
  %848 = add nuw i32 %845, 1
  %849 = zext i32 %848 to i64
  %850 = add nsw i64 %849, -1
  %851 = add nsw i64 %849, -2
  %852 = and i64 %850, 3
  %853 = icmp ult i64 %851, 3
  br i1 %853, label %881, label %854

854:                                              ; preds = %847
  %855 = and i64 %850, -4
  br label %856

856:                                              ; preds = %856, %854
  %857 = phi i64 [ 1, %854 ], [ %878, %856 ]
  %858 = phi i64 [ 0, %854 ], [ %879, %856 ]
  %859 = getelementptr inbounds i32, ptr %844, i64 %857
  %860 = load i32, ptr %859, align 4, !tbaa !5
  %861 = sext i32 %860 to i64
  %862 = getelementptr inbounds i8, ptr %837, i64 %861
  store i8 1, ptr %862, align 1, !tbaa !57
  %863 = add nuw nsw i64 %857, 1
  %864 = getelementptr inbounds i32, ptr %844, i64 %863
  %865 = load i32, ptr %864, align 4, !tbaa !5
  %866 = sext i32 %865 to i64
  %867 = getelementptr inbounds i8, ptr %837, i64 %866
  store i8 1, ptr %867, align 1, !tbaa !57
  %868 = add nuw nsw i64 %857, 2
  %869 = getelementptr inbounds i32, ptr %844, i64 %868
  %870 = load i32, ptr %869, align 4, !tbaa !5
  %871 = sext i32 %870 to i64
  %872 = getelementptr inbounds i8, ptr %837, i64 %871
  store i8 1, ptr %872, align 1, !tbaa !57
  %873 = add nuw nsw i64 %857, 3
  %874 = getelementptr inbounds i32, ptr %844, i64 %873
  %875 = load i32, ptr %874, align 4, !tbaa !5
  %876 = sext i32 %875 to i64
  %877 = getelementptr inbounds i8, ptr %837, i64 %876
  store i8 1, ptr %877, align 1, !tbaa !57
  %878 = add nuw nsw i64 %857, 4
  %879 = add i64 %858, 4
  %880 = icmp eq i64 %879, %855
  br i1 %880, label %881, label %856

881:                                              ; preds = %856, %847
  %882 = phi i64 [ 1, %847 ], [ %878, %856 ]
  %883 = icmp eq i64 %852, 0
  br i1 %883, label %894, label %884

884:                                              ; preds = %881, %884
  %885 = phi i64 [ %891, %884 ], [ %882, %881 ]
  %886 = phi i64 [ %892, %884 ], [ 0, %881 ]
  %887 = getelementptr inbounds i32, ptr %844, i64 %885
  %888 = load i32, ptr %887, align 4, !tbaa !5
  %889 = sext i32 %888 to i64
  %890 = getelementptr inbounds i8, ptr %837, i64 %889
  store i8 1, ptr %890, align 1, !tbaa !57
  %891 = add nuw nsw i64 %885, 1
  %892 = add i64 %886, 1
  %893 = icmp eq i64 %892, %852
  br i1 %893, label %894, label %884, !llvm.loop !324

894:                                              ; preds = %884, %881
  %895 = load i32, ptr %691, align 4
  %896 = shl i32 %895, 2
  %897 = ashr exact i32 %896, 2
  %898 = sext i32 %897 to i64
  br label %899

899:                                              ; preds = %894, %836
  %900 = phi i64 [ %898, %894 ], [ %842, %836 ]
  %901 = load ptr, ptr %659, align 8, !tbaa !64
  %902 = getelementptr inbounds ptr, ptr %901, i64 %900
  %903 = load ptr, ptr %902, align 8, !tbaa !23
  %904 = load i32, ptr %903, align 4, !tbaa !5
  %905 = icmp slt i32 %904, 1
  br i1 %905, label %953, label %906

906:                                              ; preds = %899
  %907 = add nuw i32 %904, 1
  %908 = zext i32 %907 to i64
  %909 = add nsw i64 %908, -1
  %910 = add nsw i64 %908, -2
  %911 = and i64 %909, 3
  %912 = icmp ult i64 %910, 3
  br i1 %912, label %940, label %913

913:                                              ; preds = %906
  %914 = and i64 %909, -4
  br label %915

915:                                              ; preds = %915, %913
  %916 = phi i64 [ 1, %913 ], [ %937, %915 ]
  %917 = phi i64 [ 0, %913 ], [ %938, %915 ]
  %918 = getelementptr inbounds i32, ptr %903, i64 %916
  %919 = load i32, ptr %918, align 4, !tbaa !5
  %920 = sext i32 %919 to i64
  %921 = getelementptr inbounds i8, ptr %837, i64 %920
  store i8 2, ptr %921, align 1, !tbaa !57
  %922 = add nuw nsw i64 %916, 1
  %923 = getelementptr inbounds i32, ptr %903, i64 %922
  %924 = load i32, ptr %923, align 4, !tbaa !5
  %925 = sext i32 %924 to i64
  %926 = getelementptr inbounds i8, ptr %837, i64 %925
  store i8 2, ptr %926, align 1, !tbaa !57
  %927 = add nuw nsw i64 %916, 2
  %928 = getelementptr inbounds i32, ptr %903, i64 %927
  %929 = load i32, ptr %928, align 4, !tbaa !5
  %930 = sext i32 %929 to i64
  %931 = getelementptr inbounds i8, ptr %837, i64 %930
  store i8 2, ptr %931, align 1, !tbaa !57
  %932 = add nuw nsw i64 %916, 3
  %933 = getelementptr inbounds i32, ptr %903, i64 %932
  %934 = load i32, ptr %933, align 4, !tbaa !5
  %935 = sext i32 %934 to i64
  %936 = getelementptr inbounds i8, ptr %837, i64 %935
  store i8 2, ptr %936, align 1, !tbaa !57
  %937 = add nuw nsw i64 %916, 4
  %938 = add i64 %917, 4
  %939 = icmp eq i64 %938, %914
  br i1 %939, label %940, label %915

940:                                              ; preds = %915, %906
  %941 = phi i64 [ 1, %906 ], [ %937, %915 ]
  %942 = icmp eq i64 %911, 0
  br i1 %942, label %953, label %943

943:                                              ; preds = %940, %943
  %944 = phi i64 [ %950, %943 ], [ %941, %940 ]
  %945 = phi i64 [ %951, %943 ], [ 0, %940 ]
  %946 = getelementptr inbounds i32, ptr %903, i64 %944
  %947 = load i32, ptr %946, align 4, !tbaa !5
  %948 = sext i32 %947 to i64
  %949 = getelementptr inbounds i8, ptr %837, i64 %948
  store i8 2, ptr %949, align 1, !tbaa !57
  %950 = add nuw nsw i64 %944, 1
  %951 = add i64 %945, 1
  %952 = icmp eq i64 %951, %911
  br i1 %952, label %953, label %943, !llvm.loop !325

953:                                              ; preds = %940, %943, %899, %723
  %954 = phi ptr [ %726, %723 ], [ %837, %899 ], [ %837, %943 ], [ %837, %940 ]
  %955 = phi ptr [ %682, %723 ], [ %903, %899 ], [ %903, %943 ], [ %903, %940 ]
  %956 = phi ptr [ %681, %723 ], [ %844, %899 ], [ %844, %943 ], [ %844, %940 ]
  %957 = phi ptr [ %680, %723 ], [ %837, %899 ], [ %837, %943 ], [ %837, %940 ]
  %958 = load i8, ptr %693, align 1
  %959 = and i8 %958, 7
  %960 = icmp eq i8 %959, 0
  %961 = load i32, ptr @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4, !tbaa !5
  br i1 %960, label %1144, label %962

962:                                              ; preds = %953
  %963 = icmp eq i32 %961, 0
  br i1 %963, label %970, label %964

964:                                              ; preds = %962
  %965 = load i32, ptr %691, align 4
  %966 = freeze i32 %965
  %967 = icmp slt i32 %966, 0
  %968 = select i1 %967, ptr %237, ptr %191
  %969 = select i1 %967, i32 %650, i32 %651
  br label %970

970:                                              ; preds = %964, %962
  %971 = phi ptr [ %191, %962 ], [ %968, %964 ]
  %972 = phi i32 [ %651, %962 ], [ %969, %964 ]
  %973 = icmp sgt i32 %972, 0
  br i1 %973, label %974, label %1125

974:                                              ; preds = %970
  %975 = icmp ugt i32 %972, 6
  br i1 %975, label %976, label %1060

976:                                              ; preds = %974
  %977 = add nsw i32 %972, -2
  %978 = getelementptr inbounds i16, ptr %971, i64 1
  %979 = load i16, ptr %978, align 2, !tbaa !44
  %980 = zext i16 %979 to i64
  %981 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %980
  %982 = getelementptr inbounds %class.Vector, ptr %981, i64 0, i32 2
  %983 = load double, ptr %982, align 8, !tbaa !49
  %984 = load i16, ptr %971, align 2, !tbaa !44
  %985 = zext i16 %984 to i64
  %986 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %985
  %987 = getelementptr inbounds %class.Vector, ptr %986, i64 0, i32 2
  %988 = load double, ptr %987, align 8, !tbaa !49
  %989 = getelementptr inbounds %class.Vector, ptr %981, i64 0, i32 1
  %990 = load double, ptr %989, align 8, !tbaa !66
  %991 = getelementptr inbounds %class.Vector, ptr %986, i64 0, i32 1
  %992 = load double, ptr %991, align 8, !tbaa !66
  %993 = load double, ptr %981, align 8, !tbaa !67
  %994 = load double, ptr %986, align 8, !tbaa !67
  %995 = zext i32 %977 to i64
  %996 = insertelement <2 x double> poison, double %983, i64 0
  %997 = insertelement <2 x double> %996, double %988, i64 1
  %998 = insertelement <2 x double> poison, double %990, i64 0
  %999 = insertelement <2 x double> %998, double %992, i64 1
  %1000 = insertelement <2 x double> poison, double %993, i64 0
  %1001 = insertelement <2 x double> %1000, double %994, i64 1
  %1002 = insertelement <2 x double> poison, double %710, i64 0
  %1003 = shufflevector <2 x double> %1002, <2 x double> poison, <2 x i32> zeroinitializer
  %1004 = shufflevector <2 x double> %707, <2 x double> poison, <2 x i32> <i32 1, i32 1>
  %1005 = shufflevector <2 x double> %707, <2 x double> poison, <2 x i32> zeroinitializer
  br label %1006

1006:                                             ; preds = %976, %1006
  %1007 = phi i64 [ 2, %976 ], [ %1050, %1006 ]
  %1008 = phi i32 [ 0, %976 ], [ %1049, %1006 ]
  %1009 = phi i16 [ %984, %976 ], [ %1016, %1006 ]
  %1010 = phi i16 [ %979, %976 ], [ %1019, %1006 ]
  %1011 = phi <2 x double> [ %997, %976 ], [ %1053, %1006 ]
  %1012 = phi <2 x double> [ %999, %976 ], [ %1055, %1006 ]
  %1013 = phi <2 x double> [ %1001, %976 ], [ %1057, %1006 ]
  %1014 = fsub <2 x double> %1003, %1011
  %1015 = getelementptr inbounds i16, ptr %971, i64 %1007
  %1016 = load i16, ptr %1015, align 2, !tbaa !44
  %1017 = or i64 %1007, 1
  %1018 = getelementptr inbounds i16, ptr %971, i64 %1017
  %1019 = load i16, ptr %1018, align 2, !tbaa !44
  %1020 = zext i16 %1016 to i64
  %1021 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %1020
  %1022 = load double, ptr %1021, align 8, !tbaa !67
  %1023 = zext i16 %1019 to i64
  %1024 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %1023
  %1025 = load double, ptr %1024, align 8, !tbaa !67
  %1026 = getelementptr inbounds %class.Vector, ptr %1021, i64 0, i32 1
  %1027 = load double, ptr %1026, align 8, !tbaa !66
  %1028 = getelementptr inbounds %class.Vector, ptr %1024, i64 0, i32 1
  %1029 = load double, ptr %1028, align 8, !tbaa !66
  %1030 = getelementptr inbounds %class.Vector, ptr %1021, i64 0, i32 2
  %1031 = load double, ptr %1030, align 8, !tbaa !49
  %1032 = getelementptr inbounds %class.Vector, ptr %1024, i64 0, i32 2
  %1033 = load double, ptr %1032, align 8, !tbaa !49
  %1034 = fsub <2 x double> %1005, %1013
  %1035 = fmul <2 x double> %1034, %1034
  %1036 = fsub <2 x double> %1004, %1012
  %1037 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %1036, <2 x double> %1036, <2 x double> %1035)
  %1038 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %1014, <2 x double> %1014, <2 x double> %1037)
  %1039 = fcmp olt <2 x double> %1038, %676
  %1040 = zext i32 %1008 to i64
  %1041 = getelementptr inbounds i16, ptr %283, i64 %1040
  store i16 %1009, ptr %1041, align 2, !tbaa !44
  %1042 = extractelement <2 x i1> %1039, i64 1
  %1043 = zext i1 %1042 to i32
  %1044 = add nuw nsw i32 %1008, %1043
  %1045 = zext i32 %1044 to i64
  %1046 = getelementptr inbounds i16, ptr %283, i64 %1045
  store i16 %1010, ptr %1046, align 2, !tbaa !44
  %1047 = extractelement <2 x i1> %1039, i64 0
  %1048 = zext i1 %1047 to i32
  %1049 = add i32 %1044, %1048
  %1050 = add nuw nsw i64 %1007, 2
  %1051 = icmp ult i64 %1050, %995
  %1052 = insertelement <2 x double> poison, double %1033, i64 0
  %1053 = insertelement <2 x double> %1052, double %1031, i64 1
  %1054 = insertelement <2 x double> poison, double %1029, i64 0
  %1055 = insertelement <2 x double> %1054, double %1027, i64 1
  %1056 = insertelement <2 x double> poison, double %1025, i64 0
  %1057 = insertelement <2 x double> %1056, double %1022, i64 1
  br i1 %1051, label %1006, label %1058

1058:                                             ; preds = %1006
  %1059 = trunc i64 %1007 to i32
  br label %1060

1060:                                             ; preds = %1058, %974
  %1061 = phi i32 [ %1049, %1058 ], [ 0, %974 ]
  %1062 = phi i32 [ %1059, %1058 ], [ 0, %974 ]
  %1063 = icmp slt i32 %1062, %972
  br i1 %1063, label %1064, label %1069

1064:                                             ; preds = %1060
  %1065 = zext i32 %1062 to i64
  %1066 = zext i32 %972 to i64
  %1067 = extractelement <2 x double> %707, i64 0
  %1068 = extractelement <2 x double> %707, i64 1
  br label %1074

1069:                                             ; preds = %1097, %1060
  %1070 = phi i32 [ %1061, %1060 ], [ %1098, %1097 ]
  %1071 = icmp sgt i32 %1070, 0
  br i1 %1071, label %1072, label %1125

1072:                                             ; preds = %1069
  %1073 = zext i32 %1070 to i64
  br label %1101

1074:                                             ; preds = %1064, %1097
  %1075 = phi i64 [ %1065, %1064 ], [ %1099, %1097 ]
  %1076 = phi i32 [ %1061, %1064 ], [ %1098, %1097 ]
  %1077 = getelementptr inbounds i16, ptr %971, i64 %1075
  %1078 = load i16, ptr %1077, align 2, !tbaa !44
  %1079 = zext i16 %1078 to i64
  %1080 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %1079
  %1081 = load double, ptr %1080, align 8, !tbaa !67
  %1082 = getelementptr inbounds %class.Vector, ptr %1080, i64 0, i32 1
  %1083 = load double, ptr %1082, align 8, !tbaa !66
  %1084 = getelementptr inbounds %class.Vector, ptr %1080, i64 0, i32 2
  %1085 = load double, ptr %1084, align 8, !tbaa !49
  %1086 = fsub double %1067, %1081
  %1087 = fmul double %1086, %1086
  %1088 = fsub double %1068, %1083
  %1089 = tail call double @llvm.fmuladd.f64(double %1088, double %1088, double %1087)
  %1090 = fsub double %710, %1085
  %1091 = tail call double @llvm.fmuladd.f64(double %1090, double %1090, double %1089)
  %1092 = fcmp ugt double %1091, %23
  br i1 %1092, label %1097, label %1093

1093:                                             ; preds = %1074
  %1094 = add nsw i32 %1076, 1
  %1095 = sext i32 %1076 to i64
  %1096 = getelementptr inbounds i16, ptr %283, i64 %1095
  store i16 %1078, ptr %1096, align 2, !tbaa !44
  br label %1097

1097:                                             ; preds = %1093, %1074
  %1098 = phi i32 [ %1094, %1093 ], [ %1076, %1074 ]
  %1099 = add nuw nsw i64 %1075, 1
  %1100 = icmp eq i64 %1099, %1066
  br i1 %1100, label %1069, label %1074

1101:                                             ; preds = %1072, %1118
  %1102 = phi i64 [ 0, %1072 ], [ %1121, %1118 ]
  %1103 = phi ptr [ %421, %1072 ], [ %1120, %1118 ]
  %1104 = getelementptr inbounds i16, ptr %283, i64 %1102
  %1105 = load i16, ptr %1104, align 2, !tbaa !44
  %1106 = zext i16 %1105 to i64
  %1107 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %1106, i32 4
  %1108 = load i8, ptr %1107, align 1
  %1109 = and i8 %1108, 7
  store i16 %1105, ptr %1103, align 2, !tbaa !44
  %1110 = getelementptr inbounds i16, ptr %1103, i64 1
  %1111 = insertelement <2 x i16> poison, i16 %1105, i64 0
  %1112 = shufflevector <2 x i16> %1111, <2 x i16> poison, <2 x i32> zeroinitializer
  %1113 = add <2 x i16> %1112, <i16 1, i16 2>
  store <2 x i16> %1113, ptr %1110, align 2, !tbaa !44
  %1114 = icmp ult i8 %1109, 4
  br i1 %1114, label %1118, label %1115

1115:                                             ; preds = %1101
  %1116 = add <2 x i16> %1112, <i16 3, i16 4>
  %1117 = getelementptr inbounds i16, ptr %1103, i64 3
  store <2 x i16> %1116, ptr %1117, align 2, !tbaa !44
  br label %1118

1118:                                             ; preds = %1115, %1101
  %1119 = zext i8 %1109 to i64
  %1120 = getelementptr inbounds i16, ptr %1103, i64 %1119
  %1121 = add nuw nsw i64 %1102, 1
  %1122 = icmp eq i64 %1121, %1073
  br i1 %1122, label %1123, label %1101

1123:                                             ; preds = %1118
  %1124 = ptrtoint ptr %1120 to i64
  br label %1125

1125:                                             ; preds = %1123, %1069, %970
  %1126 = phi i64 [ %1124, %1123 ], [ %660, %1069 ], [ %660, %970 ]
  %1127 = sub i64 %1126, %660
  %1128 = lshr exact i64 %1127, 1
  %1129 = trunc i64 %1128 to i32
  %1130 = icmp eq i32 %1129, 0
  br i1 %1130, label %1131, label %1136

1131:                                             ; preds = %1125
  %1132 = load i8, ptr %693, align 1
  %1133 = and i8 %1132, 7
  %1134 = zext i8 %1133 to i32
  %1135 = add nsw i32 %679, %1134
  br label %2493

1136:                                             ; preds = %1125
  %1137 = shl i64 %1127, 31
  %1138 = add i64 %1137, -4294967296
  %1139 = ashr i64 %1138, 32
  %1140 = getelementptr inbounds i16, ptr %421, i64 %1139
  %1141 = load i16, ptr %1140, align 2, !tbaa !44
  %1142 = ashr i64 %1137, 32
  %1143 = getelementptr inbounds i16, ptr %421, i64 %1142
  store i16 %1141, ptr %1143, align 2, !tbaa !44
  br label %1144

1144:                                             ; preds = %1136, %953
  %1145 = phi i32 [ %1129, %1136 ], [ %683, %953 ]
  %1146 = icmp eq i32 %961, 0
  br i1 %1146, label %1151, label %1147

1147:                                             ; preds = %1144
  %1148 = load i32, ptr %691, align 4
  %1149 = and i32 %1148, 1073741824
  %1150 = icmp ne i32 %1149, 0
  br label %1151

1151:                                             ; preds = %1147, %1144
  %1152 = phi i1 [ false, %1144 ], [ %1150, %1147 ]
  %1153 = load i32, ptr %13, align 8, !tbaa !17
  %1154 = add nsw i32 %661, %1153
  %1155 = load i32, ptr %662, align 4, !tbaa !68
  %1156 = icmp sgt i32 %1155, %1154
  br i1 %1156, label %1172, label %1157

1157:                                             ; preds = %1151, %1157
  %1158 = phi i32 [ %1160, %1157 ], [ %1155, %1151 ]
  %1159 = ashr i32 %1158, 1
  %1160 = add nsw i32 %1159, %1158
  %1161 = icmp sgt i32 %1160, %1154
  br i1 %1161, label %1162, label %1157

1162:                                             ; preds = %1157
  %1163 = sext i32 %1160 to i64
  %1164 = icmp slt i32 %1160, 0
  %1165 = shl nsw i64 %1163, 1
  %1166 = select i1 %1164, i64 -1, i64 %1165
  %1167 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %1166) #9
  %1168 = load ptr, ptr %8, align 8, !tbaa !46
  %1169 = sext i32 %1153 to i64
  %1170 = shl nsw i64 %1169, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 2 %1167, ptr align 2 %1168, i64 %1170, i1 false)
  %1171 = icmp eq ptr %1168, null
  br i1 %1171, label %1176, label %1174

1172:                                             ; preds = %1151
  %1173 = load ptr, ptr %8, align 8, !tbaa !46
  br label %1178

1174:                                             ; preds = %1162
  tail call void @_ZdaPv(ptr noundef nonnull %1168) #10
  %1175 = load i32, ptr %13, align 8, !tbaa !17
  br label %1176

1176:                                             ; preds = %1174, %1162
  %1177 = phi i32 [ %1175, %1174 ], [ %1153, %1162 ]
  store ptr %1167, ptr %8, align 8, !tbaa !46
  store i32 %1160, ptr %662, align 4, !tbaa !68
  br label %1178

1178:                                             ; preds = %1172, %1176
  %1179 = phi i32 [ %1153, %1172 ], [ %1177, %1176 ]
  %1180 = phi ptr [ %1173, %1172 ], [ %1167, %1176 ]
  %1181 = ptrtoint ptr %1180 to i64
  %1182 = add nsw i32 %1179, 1
  %1183 = sext i32 %1182 to i64
  %1184 = getelementptr inbounds i16, ptr %1180, i64 %1183
  %1185 = load i32, ptr @_ZN20ComputeNonbondedUtil17pairInteractionOnE, align 4, !tbaa !5
  %1186 = icmp eq i32 %1185, 0
  br i1 %1186, label %1368, label %1187

1187:                                             ; preds = %1178
  %1188 = getelementptr inbounds %struct.CompAtom, ptr %39, i64 %689, i32 3
  %1189 = load i8, ptr %1188, align 2, !tbaa !301
  %1190 = zext i8 %1189 to i32
  %1191 = load i32, ptr @_ZN20ComputeNonbondedUtil19pairInteractionSelfE, align 4, !tbaa !5
  %1192 = icmp eq i32 %1191, 0
  br i1 %1192, label %1233, label %1193

1193:                                             ; preds = %1187
  %1194 = icmp eq i8 %1189, 1
  br i1 %1194, label %1195, label %1203

1195:                                             ; preds = %1193
  %1196 = icmp sgt i32 %1145, 0
  br i1 %1196, label %1197, label %1308

1197:                                             ; preds = %1195
  %1198 = zext i32 %1145 to i64
  %1199 = and i64 %1198, 1
  %1200 = icmp eq i32 %1145, 1
  br i1 %1200, label %1294, label %1201

1201:                                             ; preds = %1197
  %1202 = and i64 %1198, 4294967294
  br label %1205

1203:                                             ; preds = %1193
  %1204 = add nsw i32 %679, 1
  br label %2493

1205:                                             ; preds = %1228, %1201
  %1206 = phi i64 [ 0, %1201 ], [ %1230, %1228 ]
  %1207 = phi ptr [ %467, %1201 ], [ %1229, %1228 ]
  %1208 = phi i64 [ 0, %1201 ], [ %1231, %1228 ]
  %1209 = getelementptr inbounds i16, ptr %421, i64 %1206
  %1210 = load i16, ptr %1209, align 2, !tbaa !44
  %1211 = zext i16 %1210 to i64
  %1212 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %1211, i32 3
  %1213 = load i8, ptr %1212, align 2, !tbaa !301
  %1214 = icmp eq i8 %1213, 1
  br i1 %1214, label %1215, label %1217

1215:                                             ; preds = %1205
  %1216 = getelementptr inbounds i16, ptr %1207, i64 1
  store i16 %1210, ptr %1207, align 2, !tbaa !44
  br label %1217

1217:                                             ; preds = %1215, %1205
  %1218 = phi ptr [ %1216, %1215 ], [ %1207, %1205 ]
  %1219 = or i64 %1206, 1
  %1220 = getelementptr inbounds i16, ptr %421, i64 %1219
  %1221 = load i16, ptr %1220, align 2, !tbaa !44
  %1222 = zext i16 %1221 to i64
  %1223 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %1222, i32 3
  %1224 = load i8, ptr %1223, align 2, !tbaa !301
  %1225 = icmp eq i8 %1224, 1
  br i1 %1225, label %1226, label %1228

1226:                                             ; preds = %1217
  %1227 = getelementptr inbounds i16, ptr %1218, i64 1
  store i16 %1221, ptr %1218, align 2, !tbaa !44
  br label %1228

1228:                                             ; preds = %1226, %1217
  %1229 = phi ptr [ %1227, %1226 ], [ %1218, %1217 ]
  %1230 = add nuw nsw i64 %1206, 2
  %1231 = add i64 %1208, 2
  %1232 = icmp eq i64 %1231, %1202
  br i1 %1232, label %1294, label %1205

1233:                                             ; preds = %1187
  %1234 = add i8 %1189, -3
  %1235 = icmp ult i8 %1234, -2
  br i1 %1235, label %1244, label %1236

1236:                                             ; preds = %1233
  %1237 = icmp sgt i32 %1145, 0
  br i1 %1237, label %1238, label %1308

1238:                                             ; preds = %1236
  %1239 = zext i32 %1145 to i64
  %1240 = and i64 %1239, 1
  %1241 = icmp eq i32 %1145, 1
  br i1 %1241, label %1278, label %1242

1242:                                             ; preds = %1238
  %1243 = and i64 %1239, 4294967294
  br label %1246

1244:                                             ; preds = %1233
  %1245 = add nsw i32 %679, 1
  br label %2493

1246:                                             ; preds = %1273, %1242
  %1247 = phi i64 [ 0, %1242 ], [ %1275, %1273 ]
  %1248 = phi ptr [ %467, %1242 ], [ %1274, %1273 ]
  %1249 = phi i64 [ 0, %1242 ], [ %1276, %1273 ]
  %1250 = getelementptr inbounds i16, ptr %421, i64 %1247
  %1251 = load i16, ptr %1250, align 2, !tbaa !44
  %1252 = zext i16 %1251 to i64
  %1253 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %1252, i32 3
  %1254 = load i8, ptr %1253, align 2, !tbaa !301
  %1255 = zext i8 %1254 to i32
  %1256 = add nuw nsw i32 %1255, %1190
  %1257 = icmp eq i32 %1256, 3
  br i1 %1257, label %1258, label %1260

1258:                                             ; preds = %1246
  %1259 = getelementptr inbounds i16, ptr %1248, i64 1
  store i16 %1251, ptr %1248, align 2, !tbaa !44
  br label %1260

1260:                                             ; preds = %1258, %1246
  %1261 = phi ptr [ %1259, %1258 ], [ %1248, %1246 ]
  %1262 = or i64 %1247, 1
  %1263 = getelementptr inbounds i16, ptr %421, i64 %1262
  %1264 = load i16, ptr %1263, align 2, !tbaa !44
  %1265 = zext i16 %1264 to i64
  %1266 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %1265, i32 3
  %1267 = load i8, ptr %1266, align 2, !tbaa !301
  %1268 = zext i8 %1267 to i32
  %1269 = add nuw nsw i32 %1268, %1190
  %1270 = icmp eq i32 %1269, 3
  br i1 %1270, label %1271, label %1273

1271:                                             ; preds = %1260
  %1272 = getelementptr inbounds i16, ptr %1261, i64 1
  store i16 %1264, ptr %1261, align 2, !tbaa !44
  br label %1273

1273:                                             ; preds = %1271, %1260
  %1274 = phi ptr [ %1272, %1271 ], [ %1261, %1260 ]
  %1275 = add nuw nsw i64 %1247, 2
  %1276 = add i64 %1249, 2
  %1277 = icmp eq i64 %1276, %1243
  br i1 %1277, label %1278, label %1246

1278:                                             ; preds = %1273, %1238
  %1279 = phi ptr [ undef, %1238 ], [ %1274, %1273 ]
  %1280 = phi i64 [ 0, %1238 ], [ %1275, %1273 ]
  %1281 = phi ptr [ %467, %1238 ], [ %1274, %1273 ]
  %1282 = icmp eq i64 %1240, 0
  br i1 %1282, label %1308, label %1283

1283:                                             ; preds = %1278
  %1284 = getelementptr inbounds i16, ptr %421, i64 %1280
  %1285 = load i16, ptr %1284, align 2, !tbaa !44
  %1286 = zext i16 %1285 to i64
  %1287 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %1286, i32 3
  %1288 = load i8, ptr %1287, align 2, !tbaa !301
  %1289 = zext i8 %1288 to i32
  %1290 = add nuw nsw i32 %1289, %1190
  %1291 = icmp eq i32 %1290, 3
  br i1 %1291, label %1292, label %1308

1292:                                             ; preds = %1283
  %1293 = getelementptr inbounds i16, ptr %1281, i64 1
  store i16 %1285, ptr %1281, align 2, !tbaa !44
  br label %1308

1294:                                             ; preds = %1228, %1197
  %1295 = phi ptr [ undef, %1197 ], [ %1229, %1228 ]
  %1296 = phi i64 [ 0, %1197 ], [ %1230, %1228 ]
  %1297 = phi ptr [ %467, %1197 ], [ %1229, %1228 ]
  %1298 = icmp eq i64 %1199, 0
  br i1 %1298, label %1308, label %1299

1299:                                             ; preds = %1294
  %1300 = getelementptr inbounds i16, ptr %421, i64 %1296
  %1301 = load i16, ptr %1300, align 2, !tbaa !44
  %1302 = zext i16 %1301 to i64
  %1303 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %1302, i32 3
  %1304 = load i8, ptr %1303, align 2, !tbaa !301
  %1305 = icmp eq i8 %1304, 1
  br i1 %1305, label %1306, label %1308

1306:                                             ; preds = %1299
  %1307 = getelementptr inbounds i16, ptr %1297, i64 1
  store i16 %1301, ptr %1297, align 2, !tbaa !44
  br label %1308

1308:                                             ; preds = %1294, %1306, %1299, %1278, %1292, %1283, %1195, %1236
  %1309 = phi ptr [ %467, %1236 ], [ %467, %1195 ], [ %1279, %1278 ], [ %1293, %1292 ], [ %1281, %1283 ], [ %1295, %1294 ], [ %1307, %1306 ], [ %1297, %1299 ]
  %1310 = ptrtoint ptr %1309 to i64
  %1311 = sub i64 %1310, %663
  %1312 = lshr exact i64 %1311, 1
  %1313 = trunc i64 %1312 to i32
  %1314 = icmp sgt i32 %1313, 0
  br i1 %1314, label %1315, label %1577

1315:                                             ; preds = %1308
  %1316 = and i64 %1312, 4294967295
  %1317 = extractelement <2 x double> %707, i64 0
  %1318 = extractelement <2 x double> %707, i64 1
  br label %1319

1319:                                             ; preds = %1315, %1363
  %1320 = phi i64 [ 0, %1315 ], [ %1366, %1363 ]
  %1321 = phi ptr [ %467, %1315 ], [ %1365, %1363 ]
  %1322 = phi ptr [ %1184, %1315 ], [ %1364, %1363 ]
  %1323 = getelementptr inbounds i16, ptr %467, i64 %1320
  %1324 = load i16, ptr %1323, align 2, !tbaa !44
  %1325 = zext i16 %1324 to i64
  %1326 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %1325
  %1327 = load double, ptr %1326, align 8, !tbaa !67
  %1328 = fsub double %1317, %1327
  %1329 = fmul double %1328, %1328
  %1330 = getelementptr inbounds %class.Vector, ptr %1326, i64 0, i32 1
  %1331 = load double, ptr %1330, align 8, !tbaa !66
  %1332 = fsub double %1318, %1331
  %1333 = tail call double @llvm.fmuladd.f64(double %1332, double %1332, double %1329)
  %1334 = getelementptr inbounds %class.Vector, ptr %1326, i64 0, i32 2
  %1335 = load double, ptr %1334, align 8, !tbaa !49
  %1336 = fsub double %710, %1335
  %1337 = tail call double @llvm.fmuladd.f64(double %1336, double %1336, double %1333)
  br i1 %1152, label %1338, label %1345

1338:                                             ; preds = %1319
  %1339 = getelementptr inbounds %struct.CompAtomExt, ptr %45, i64 %1325
  %1340 = load i32, ptr %1339, align 4
  %1341 = and i32 %1340, 1073741824
  %1342 = icmp ne i32 %1341, 0
  %1343 = fcmp ugt double %1337, %20
  %1344 = select i1 %1342, i1 true, i1 %1343
  br i1 %1344, label %1363, label %1350

1345:                                             ; preds = %1319
  %1346 = fcmp ugt double %1337, %20
  br i1 %1346, label %1363, label %1347

1347:                                             ; preds = %1345
  %1348 = getelementptr inbounds %struct.CompAtomExt, ptr %45, i64 %1325
  %1349 = load i32, ptr %1348, align 4
  br label %1350

1350:                                             ; preds = %1347, %1338
  %1351 = phi i32 [ %1349, %1347 ], [ %1340, %1338 ]
  %1352 = shl i32 %1351, 2
  %1353 = ashr exact i32 %1352, 2
  %1354 = icmp slt i32 %1353, %717
  %1355 = icmp sgt i32 %1353, %719
  %1356 = select i1 %1354, i1 true, i1 %1355
  %1357 = select i1 %1356, ptr %1322, ptr %1321
  %1358 = zext i1 %1356 to i64
  %1359 = getelementptr inbounds i16, ptr %1322, i64 %1358
  %1360 = xor i1 %1356, true
  %1361 = zext i1 %1360 to i64
  %1362 = getelementptr inbounds i16, ptr %1321, i64 %1361
  store i16 %1324, ptr %1357, align 2, !tbaa !44
  br label %1363

1363:                                             ; preds = %1350, %1345, %1338
  %1364 = phi ptr [ %1322, %1338 ], [ %1322, %1345 ], [ %1359, %1350 ]
  %1365 = phi ptr [ %1321, %1338 ], [ %1321, %1345 ], [ %1362, %1350 ]
  %1366 = add nuw nsw i64 %1320, 1
  %1367 = icmp eq i64 %1366, %1316
  br i1 %1367, label %1577, label %1319

1368:                                             ; preds = %1178
  %1369 = icmp sgt i32 %1145, 0
  br i1 %1152, label %1370, label %1417

1370:                                             ; preds = %1368
  br i1 %1369, label %1371, label %1577

1371:                                             ; preds = %1370
  %1372 = zext i32 %1145 to i64
  %1373 = extractelement <2 x double> %707, i64 0
  %1374 = extractelement <2 x double> %707, i64 1
  br label %1375

1375:                                             ; preds = %1371, %1412
  %1376 = phi i64 [ 0, %1371 ], [ %1415, %1412 ]
  %1377 = phi ptr [ %467, %1371 ], [ %1414, %1412 ]
  %1378 = phi ptr [ %1184, %1371 ], [ %1413, %1412 ]
  %1379 = getelementptr inbounds i16, ptr %421, i64 %1376
  %1380 = load i16, ptr %1379, align 2, !tbaa !44
  %1381 = zext i16 %1380 to i64
  %1382 = getelementptr inbounds %struct.CompAtomExt, ptr %45, i64 %1381
  %1383 = load i32, ptr %1382, align 4
  %1384 = and i32 %1383, 1073741824
  %1385 = icmp eq i32 %1384, 0
  br i1 %1385, label %1386, label %1412

1386:                                             ; preds = %1375
  %1387 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %1381
  %1388 = getelementptr inbounds %class.Vector, ptr %1387, i64 0, i32 2
  %1389 = load double, ptr %1388, align 8, !tbaa !49
  %1390 = fsub double %710, %1389
  %1391 = getelementptr inbounds %class.Vector, ptr %1387, i64 0, i32 1
  %1392 = load double, ptr %1391, align 8, !tbaa !66
  %1393 = fsub double %1374, %1392
  %1394 = load double, ptr %1387, align 8, !tbaa !67
  %1395 = fsub double %1373, %1394
  %1396 = fmul double %1395, %1395
  %1397 = tail call double @llvm.fmuladd.f64(double %1393, double %1393, double %1396)
  %1398 = tail call double @llvm.fmuladd.f64(double %1390, double %1390, double %1397)
  %1399 = fcmp ugt double %1398, %20
  br i1 %1399, label %1412, label %1400

1400:                                             ; preds = %1386
  %1401 = shl i32 %1383, 2
  %1402 = ashr exact i32 %1401, 2
  %1403 = icmp slt i32 %1402, %717
  %1404 = icmp sgt i32 %1402, %719
  %1405 = select i1 %1403, i1 true, i1 %1404
  %1406 = select i1 %1405, ptr %1378, ptr %1377
  %1407 = zext i1 %1405 to i64
  %1408 = getelementptr inbounds i16, ptr %1378, i64 %1407
  %1409 = xor i1 %1405, true
  %1410 = zext i1 %1409 to i64
  %1411 = getelementptr inbounds i16, ptr %1377, i64 %1410
  store i16 %1380, ptr %1406, align 2, !tbaa !44
  br label %1412

1412:                                             ; preds = %1400, %1386, %1375
  %1413 = phi ptr [ %1378, %1375 ], [ %1378, %1386 ], [ %1408, %1400 ]
  %1414 = phi ptr [ %1377, %1375 ], [ %1377, %1386 ], [ %1411, %1400 ]
  %1415 = add nuw nsw i64 %1376, 1
  %1416 = icmp eq i64 %1415, %1372
  br i1 %1416, label %1577, label %1375

1417:                                             ; preds = %1368
  br i1 %1369, label %1418, label %1577

1418:                                             ; preds = %1417
  %1419 = icmp ugt i32 %1145, 6
  br i1 %1419, label %1420, label %1528

1420:                                             ; preds = %1418
  %1421 = add nsw i32 %1145, -2
  %1422 = load i16, ptr %421, align 2, !tbaa !44
  %1423 = zext i16 %1422 to i64
  %1424 = getelementptr inbounds %struct.CompAtomExt, ptr %45, i64 %1423
  %1425 = load i32, ptr %1424, align 4
  %1426 = load i16, ptr %664, align 2, !tbaa !44
  %1427 = zext i16 %1426 to i64
  %1428 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %1427
  %1429 = getelementptr inbounds %class.Vector, ptr %1428, i64 0, i32 2
  %1430 = load double, ptr %1429, align 8, !tbaa !49
  %1431 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %1423
  %1432 = getelementptr inbounds %class.Vector, ptr %1431, i64 0, i32 2
  %1433 = load double, ptr %1432, align 8, !tbaa !49
  %1434 = getelementptr inbounds %class.Vector, ptr %1428, i64 0, i32 1
  %1435 = load double, ptr %1434, align 8, !tbaa !66
  %1436 = getelementptr inbounds %class.Vector, ptr %1431, i64 0, i32 1
  %1437 = load double, ptr %1436, align 8, !tbaa !66
  %1438 = load double, ptr %1428, align 8, !tbaa !67
  %1439 = load double, ptr %1431, align 8, !tbaa !67
  %1440 = zext i32 %1421 to i64
  %1441 = extractelement <2 x double> %707, i64 0
  %1442 = extractelement <2 x double> %707, i64 1
  br label %1443

1443:                                             ; preds = %1420, %1521
  %1444 = phi i64 [ 2, %1420 ], [ %1524, %1521 ]
  %1445 = phi i64 [ %1427, %1420 ], [ %1481, %1521 ]
  %1446 = phi i32 [ %1425, %1420 ], [ %1509, %1521 ]
  %1447 = phi ptr [ %467, %1420 ], [ %1523, %1521 ]
  %1448 = phi ptr [ %1184, %1420 ], [ %1522, %1521 ]
  %1449 = phi i16 [ %1422, %1420 ], [ %1474, %1521 ]
  %1450 = phi i16 [ %1426, %1420 ], [ %1477, %1521 ]
  %1451 = phi double [ %1439, %1420 ], [ %1480, %1521 ]
  %1452 = phi double [ %1438, %1420 ], [ %1483, %1521 ]
  %1453 = phi double [ %1437, %1420 ], [ %1485, %1521 ]
  %1454 = phi double [ %1435, %1420 ], [ %1487, %1521 ]
  %1455 = phi double [ %1433, %1420 ], [ %1489, %1521 ]
  %1456 = phi double [ %1430, %1420 ], [ %1491, %1521 ]
  %1457 = getelementptr inbounds %struct.CompAtomExt, ptr %45, i64 %1445
  %1458 = load i32, ptr %1457, align 4
  %1459 = shl i32 %1458, 2
  %1460 = ashr exact i32 %1459, 2
  %1461 = fsub double %1441, %1451
  %1462 = fsub double %1441, %1452
  %1463 = fmul double %1461, %1461
  %1464 = fmul double %1462, %1462
  %1465 = fsub double %1442, %1453
  %1466 = fsub double %1442, %1454
  %1467 = tail call double @llvm.fmuladd.f64(double %1465, double %1465, double %1463)
  %1468 = tail call double @llvm.fmuladd.f64(double %1466, double %1466, double %1464)
  %1469 = fsub double %710, %1455
  %1470 = fsub double %710, %1456
  %1471 = tail call double @llvm.fmuladd.f64(double %1469, double %1469, double %1467)
  %1472 = tail call double @llvm.fmuladd.f64(double %1470, double %1470, double %1468)
  %1473 = getelementptr inbounds i16, ptr %421, i64 %1444
  %1474 = load i16, ptr %1473, align 2, !tbaa !44
  %1475 = or i64 %1444, 1
  %1476 = getelementptr inbounds i16, ptr %421, i64 %1475
  %1477 = load i16, ptr %1476, align 2, !tbaa !44
  %1478 = zext i16 %1474 to i64
  %1479 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %1478
  %1480 = load double, ptr %1479, align 8, !tbaa !67
  %1481 = zext i16 %1477 to i64
  %1482 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %1481
  %1483 = load double, ptr %1482, align 8, !tbaa !67
  %1484 = getelementptr inbounds %class.Vector, ptr %1479, i64 0, i32 1
  %1485 = load double, ptr %1484, align 8, !tbaa !66
  %1486 = getelementptr inbounds %class.Vector, ptr %1482, i64 0, i32 1
  %1487 = load double, ptr %1486, align 8, !tbaa !66
  %1488 = getelementptr inbounds %class.Vector, ptr %1479, i64 0, i32 2
  %1489 = load double, ptr %1488, align 8, !tbaa !49
  %1490 = getelementptr inbounds %class.Vector, ptr %1482, i64 0, i32 2
  %1491 = load double, ptr %1490, align 8, !tbaa !49
  %1492 = fcmp ugt double %1471, %20
  br i1 %1492, label %1505, label %1493

1493:                                             ; preds = %1443
  %1494 = shl i32 %1446, 2
  %1495 = ashr exact i32 %1494, 2
  %1496 = icmp slt i32 %1495, %717
  %1497 = icmp sgt i32 %1495, %719
  %1498 = select i1 %1496, i1 true, i1 %1497
  %1499 = select i1 %1498, ptr %1448, ptr %1447
  %1500 = zext i1 %1498 to i64
  %1501 = getelementptr inbounds i16, ptr %1448, i64 %1500
  %1502 = xor i1 %1498, true
  %1503 = zext i1 %1502 to i64
  %1504 = getelementptr inbounds i16, ptr %1447, i64 %1503
  store i16 %1449, ptr %1499, align 2, !tbaa !44
  br label %1505

1505:                                             ; preds = %1493, %1443
  %1506 = phi ptr [ %1448, %1443 ], [ %1501, %1493 ]
  %1507 = phi ptr [ %1447, %1443 ], [ %1504, %1493 ]
  %1508 = getelementptr inbounds %struct.CompAtomExt, ptr %45, i64 %1478
  %1509 = load i32, ptr %1508, align 4
  %1510 = fcmp ugt double %1472, %20
  br i1 %1510, label %1521, label %1511

1511:                                             ; preds = %1505
  %1512 = icmp slt i32 %1460, %717
  %1513 = icmp sgt i32 %1460, %719
  %1514 = select i1 %1512, i1 true, i1 %1513
  %1515 = select i1 %1514, ptr %1506, ptr %1507
  %1516 = zext i1 %1514 to i64
  %1517 = getelementptr inbounds i16, ptr %1506, i64 %1516
  %1518 = xor i1 %1514, true
  %1519 = zext i1 %1518 to i64
  %1520 = getelementptr inbounds i16, ptr %1507, i64 %1519
  store i16 %1450, ptr %1515, align 2, !tbaa !44
  br label %1521

1521:                                             ; preds = %1511, %1505
  %1522 = phi ptr [ %1506, %1505 ], [ %1517, %1511 ]
  %1523 = phi ptr [ %1507, %1505 ], [ %1520, %1511 ]
  %1524 = add nuw nsw i64 %1444, 2
  %1525 = icmp ult i64 %1524, %1440
  br i1 %1525, label %1443, label %1526

1526:                                             ; preds = %1521
  %1527 = trunc i64 %1444 to i32
  br label %1528

1528:                                             ; preds = %1526, %1418
  %1529 = phi i32 [ %1527, %1526 ], [ 0, %1418 ]
  %1530 = phi ptr [ %1522, %1526 ], [ %1184, %1418 ]
  %1531 = phi ptr [ %1523, %1526 ], [ %467, %1418 ]
  %1532 = icmp slt i32 %1529, %1145
  br i1 %1532, label %1533, label %1577

1533:                                             ; preds = %1528
  %1534 = zext i32 %1529 to i64
  %1535 = zext i32 %1145 to i64
  %1536 = extractelement <2 x double> %707, i64 0
  %1537 = extractelement <2 x double> %707, i64 1
  br label %1538

1538:                                             ; preds = %1533, %1572
  %1539 = phi i64 [ %1534, %1533 ], [ %1575, %1572 ]
  %1540 = phi ptr [ %1531, %1533 ], [ %1574, %1572 ]
  %1541 = phi ptr [ %1530, %1533 ], [ %1573, %1572 ]
  %1542 = getelementptr inbounds i16, ptr %421, i64 %1539
  %1543 = load i16, ptr %1542, align 2, !tbaa !44
  %1544 = zext i16 %1543 to i64
  %1545 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %1544
  %1546 = load double, ptr %1545, align 8, !tbaa !67
  %1547 = getelementptr inbounds %class.Vector, ptr %1545, i64 0, i32 1
  %1548 = load double, ptr %1547, align 8, !tbaa !66
  %1549 = getelementptr inbounds %class.Vector, ptr %1545, i64 0, i32 2
  %1550 = load double, ptr %1549, align 8, !tbaa !49
  %1551 = fsub double %1536, %1546
  %1552 = fmul double %1551, %1551
  %1553 = fsub double %1537, %1548
  %1554 = tail call double @llvm.fmuladd.f64(double %1553, double %1553, double %1552)
  %1555 = fsub double %710, %1550
  %1556 = tail call double @llvm.fmuladd.f64(double %1555, double %1555, double %1554)
  %1557 = fcmp ugt double %1556, %20
  br i1 %1557, label %1572, label %1558

1558:                                             ; preds = %1538
  %1559 = getelementptr inbounds %struct.CompAtomExt, ptr %45, i64 %1544
  %1560 = load i32, ptr %1559, align 4
  %1561 = shl i32 %1560, 2
  %1562 = ashr exact i32 %1561, 2
  %1563 = icmp slt i32 %1562, %717
  %1564 = icmp sgt i32 %1562, %719
  %1565 = select i1 %1563, i1 true, i1 %1564
  %1566 = select i1 %1565, ptr %1541, ptr %1540
  %1567 = zext i1 %1565 to i64
  %1568 = getelementptr inbounds i16, ptr %1541, i64 %1567
  %1569 = xor i1 %1565, true
  %1570 = zext i1 %1569 to i64
  %1571 = getelementptr inbounds i16, ptr %1540, i64 %1570
  store i16 %1543, ptr %1566, align 2, !tbaa !44
  br label %1572

1572:                                             ; preds = %1558, %1538
  %1573 = phi ptr [ %1541, %1538 ], [ %1568, %1558 ]
  %1574 = phi ptr [ %1540, %1538 ], [ %1571, %1558 ]
  %1575 = add nuw nsw i64 %1539, 1
  %1576 = icmp eq i64 %1575, %1535
  br i1 %1576, label %1577, label %1538

1577:                                             ; preds = %1363, %1572, %1412, %1308, %1528, %1370, %1417
  %1578 = phi ptr [ %1184, %1417 ], [ %1184, %1370 ], [ %1530, %1528 ], [ %1184, %1308 ], [ %1413, %1412 ], [ %1573, %1572 ], [ %1364, %1363 ]
  %1579 = phi ptr [ %467, %1417 ], [ %467, %1370 ], [ %1531, %1528 ], [ %467, %1308 ], [ %1414, %1412 ], [ %1574, %1572 ], [ %1365, %1363 ]
  %1580 = icmp eq ptr %1578, %1184
  %1581 = icmp eq ptr %1579, %467
  %1582 = select i1 %1580, i1 %1581, i1 false
  br i1 %1582, label %1583, label %1585

1583:                                             ; preds = %1577
  %1584 = add nsw i32 %679, 1
  br label %2493

1585:                                             ; preds = %1577
  %1586 = trunc i32 %679 to i16
  %1587 = load i32, ptr %13, align 8, !tbaa !17
  %1588 = add nsw i32 %1587, -1
  %1589 = sext i32 %1588 to i64
  %1590 = getelementptr inbounds i16, ptr %1180, i64 %1589
  store i16 %1586, ptr %1590, align 2, !tbaa !44
  %1591 = ptrtoint ptr %1579 to i64
  %1592 = sub i64 %1591, %663
  %1593 = lshr exact i64 %1592, 1
  %1594 = trunc i64 %1593 to i32
  %1595 = icmp sgt i32 %1594, 0
  br i1 %1595, label %1596, label %1696

1596:                                             ; preds = %1585
  %1597 = and i64 %1593, 4294967295
  %1598 = and i64 %1593, 1
  %1599 = icmp eq i64 %1597, 1
  br i1 %1599, label %1664, label %1600

1600:                                             ; preds = %1596
  %1601 = sub nsw i64 %1597, %1598
  br label %1602

1602:                                             ; preds = %1657, %1600
  %1603 = phi i64 [ 0, %1600 ], [ %1661, %1657 ]
  %1604 = phi ptr [ %1578, %1600 ], [ %1660, %1657 ]
  %1605 = phi ptr [ %329, %1600 ], [ %1659, %1657 ]
  %1606 = phi ptr [ %375, %1600 ], [ %1658, %1657 ]
  %1607 = phi i64 [ 0, %1600 ], [ %1662, %1657 ]
  %1608 = getelementptr inbounds i16, ptr %467, i64 %1603
  %1609 = load i16, ptr %1608, align 2, !tbaa !44
  %1610 = zext i16 %1609 to i64
  %1611 = getelementptr inbounds %struct.CompAtomExt, ptr %45, i64 %1610
  %1612 = load i32, ptr %1611, align 4
  %1613 = shl i32 %1612, 2
  %1614 = ashr exact i32 %1613, 2
  %1615 = sext i32 %1614 to i64
  %1616 = getelementptr inbounds i8, ptr %954, i64 %1615
  %1617 = load i8, ptr %1616, align 1, !tbaa !57
  %1618 = sext i8 %1617 to i32
  switch i32 %1618, label %1630 [
    i32 0, label %1619
    i32 1, label %1621
    i32 2, label %1623
  ]

1619:                                             ; preds = %1602
  %1620 = getelementptr inbounds i16, ptr %1604, i64 1
  br label %1625

1621:                                             ; preds = %1602
  %1622 = getelementptr inbounds i16, ptr %1605, i64 1
  br label %1625

1623:                                             ; preds = %1602
  %1624 = getelementptr inbounds i16, ptr %1606, i64 1
  br label %1625

1625:                                             ; preds = %1619, %1621, %1623
  %1626 = phi ptr [ %1606, %1623 ], [ %1605, %1621 ], [ %1604, %1619 ]
  %1627 = phi ptr [ %1624, %1623 ], [ %1606, %1621 ], [ %1606, %1619 ]
  %1628 = phi ptr [ %1605, %1623 ], [ %1622, %1621 ], [ %1605, %1619 ]
  %1629 = phi ptr [ %1604, %1623 ], [ %1604, %1621 ], [ %1620, %1619 ]
  store i16 %1609, ptr %1626, align 2, !tbaa !44
  br label %1630

1630:                                             ; preds = %1625, %1602
  %1631 = phi ptr [ %1606, %1602 ], [ %1627, %1625 ]
  %1632 = phi ptr [ %1605, %1602 ], [ %1628, %1625 ]
  %1633 = phi ptr [ %1604, %1602 ], [ %1629, %1625 ]
  %1634 = or i64 %1603, 1
  %1635 = getelementptr inbounds i16, ptr %467, i64 %1634
  %1636 = load i16, ptr %1635, align 2, !tbaa !44
  %1637 = zext i16 %1636 to i64
  %1638 = getelementptr inbounds %struct.CompAtomExt, ptr %45, i64 %1637
  %1639 = load i32, ptr %1638, align 4
  %1640 = shl i32 %1639, 2
  %1641 = ashr exact i32 %1640, 2
  %1642 = sext i32 %1641 to i64
  %1643 = getelementptr inbounds i8, ptr %954, i64 %1642
  %1644 = load i8, ptr %1643, align 1, !tbaa !57
  %1645 = sext i8 %1644 to i32
  switch i32 %1645, label %1657 [
    i32 0, label %1650
    i32 1, label %1648
    i32 2, label %1646
  ]

1646:                                             ; preds = %1630
  %1647 = getelementptr inbounds i16, ptr %1631, i64 1
  br label %1652

1648:                                             ; preds = %1630
  %1649 = getelementptr inbounds i16, ptr %1632, i64 1
  br label %1652

1650:                                             ; preds = %1630
  %1651 = getelementptr inbounds i16, ptr %1633, i64 1
  br label %1652

1652:                                             ; preds = %1650, %1648, %1646
  %1653 = phi ptr [ %1631, %1646 ], [ %1632, %1648 ], [ %1633, %1650 ]
  %1654 = phi ptr [ %1647, %1646 ], [ %1631, %1648 ], [ %1631, %1650 ]
  %1655 = phi ptr [ %1632, %1646 ], [ %1649, %1648 ], [ %1632, %1650 ]
  %1656 = phi ptr [ %1633, %1646 ], [ %1633, %1648 ], [ %1651, %1650 ]
  store i16 %1636, ptr %1653, align 2, !tbaa !44
  br label %1657

1657:                                             ; preds = %1652, %1630
  %1658 = phi ptr [ %1631, %1630 ], [ %1654, %1652 ]
  %1659 = phi ptr [ %1632, %1630 ], [ %1655, %1652 ]
  %1660 = phi ptr [ %1633, %1630 ], [ %1656, %1652 ]
  %1661 = add nuw nsw i64 %1603, 2
  %1662 = add i64 %1607, 2
  %1663 = icmp eq i64 %1662, %1601
  br i1 %1663, label %1664, label %1602

1664:                                             ; preds = %1657, %1596
  %1665 = phi ptr [ undef, %1596 ], [ %1658, %1657 ]
  %1666 = phi ptr [ undef, %1596 ], [ %1659, %1657 ]
  %1667 = phi ptr [ undef, %1596 ], [ %1660, %1657 ]
  %1668 = phi i64 [ 0, %1596 ], [ %1661, %1657 ]
  %1669 = phi ptr [ %1578, %1596 ], [ %1660, %1657 ]
  %1670 = phi ptr [ %329, %1596 ], [ %1659, %1657 ]
  %1671 = phi ptr [ %375, %1596 ], [ %1658, %1657 ]
  %1672 = icmp eq i64 %1598, 0
  br i1 %1672, label %1696, label %1673

1673:                                             ; preds = %1664
  %1674 = getelementptr inbounds i16, ptr %467, i64 %1668
  %1675 = load i16, ptr %1674, align 2, !tbaa !44
  %1676 = zext i16 %1675 to i64
  %1677 = getelementptr inbounds %struct.CompAtomExt, ptr %45, i64 %1676
  %1678 = load i32, ptr %1677, align 4
  %1679 = shl i32 %1678, 2
  %1680 = ashr exact i32 %1679, 2
  %1681 = sext i32 %1680 to i64
  %1682 = getelementptr inbounds i8, ptr %954, i64 %1681
  %1683 = load i8, ptr %1682, align 1, !tbaa !57
  %1684 = sext i8 %1683 to i32
  switch i32 %1684, label %1696 [
    i32 0, label %1689
    i32 1, label %1687
    i32 2, label %1685
  ]

1685:                                             ; preds = %1673
  %1686 = getelementptr inbounds i16, ptr %1671, i64 1
  br label %1691

1687:                                             ; preds = %1673
  %1688 = getelementptr inbounds i16, ptr %1670, i64 1
  br label %1691

1689:                                             ; preds = %1673
  %1690 = getelementptr inbounds i16, ptr %1669, i64 1
  br label %1691

1691:                                             ; preds = %1689, %1687, %1685
  %1692 = phi ptr [ %1671, %1685 ], [ %1670, %1687 ], [ %1669, %1689 ]
  %1693 = phi ptr [ %1686, %1685 ], [ %1671, %1687 ], [ %1671, %1689 ]
  %1694 = phi ptr [ %1670, %1685 ], [ %1688, %1687 ], [ %1670, %1689 ]
  %1695 = phi ptr [ %1669, %1685 ], [ %1669, %1687 ], [ %1690, %1689 ]
  store i16 %1675, ptr %1692, align 2, !tbaa !44
  br label %1696

1696:                                             ; preds = %1664, %1691, %1673, %1585
  %1697 = phi ptr [ %375, %1585 ], [ %1665, %1664 ], [ %1671, %1673 ], [ %1693, %1691 ]
  %1698 = phi ptr [ %329, %1585 ], [ %1666, %1664 ], [ %1670, %1673 ], [ %1694, %1691 ]
  %1699 = phi ptr [ %1578, %1585 ], [ %1667, %1664 ], [ %1669, %1673 ], [ %1695, %1691 ]
  %1700 = ptrtoint ptr %1699 to i64
  %1701 = ptrtoint ptr %1184 to i64
  %1702 = sub i64 %1700, %1701
  %1703 = lshr exact i64 %1702, 1
  %1704 = trunc i64 %1703 to i32
  %1705 = icmp eq i32 %1704, 0
  %1706 = shl i64 %1702, 31
  br i1 %1705, label %1712, label %1707

1707:                                             ; preds = %1696
  %1708 = add i64 %1706, -4294967296
  %1709 = ashr i64 %1708, 32
  %1710 = getelementptr inbounds i16, ptr %1184, i64 %1709
  %1711 = load i16, ptr %1710, align 2, !tbaa !44
  br label %1712

1712:                                             ; preds = %1696, %1707
  %1713 = phi i16 [ %1711, %1707 ], [ -1, %1696 ]
  %1714 = ashr i64 %1706, 32
  %1715 = getelementptr inbounds i16, ptr %1184, i64 %1714
  store i16 %1713, ptr %1715, align 2, !tbaa !44
  %1716 = trunc i64 %1703 to i16
  %1717 = add i16 %1716, 1
  %1718 = sext i32 %1587 to i64
  %1719 = getelementptr inbounds i16, ptr %1180, i64 %1718
  store i16 %1717, ptr %1719, align 2, !tbaa !44
  %1720 = add i32 %1587, 2
  %1721 = add i32 %1720, %1704
  %1722 = ptrtoint ptr %1698 to i64
  %1723 = sub i64 %1722, %665
  %1724 = lshr exact i64 %1723, 1
  %1725 = trunc i64 %1724 to i32
  %1726 = add nsw i32 %1721, 1
  %1727 = sext i32 %1726 to i64
  %1728 = getelementptr i16, ptr %1180, i64 %1727
  %1729 = icmp sgt i32 %1725, 0
  br i1 %1729, label %1730, label %1820

1730:                                             ; preds = %1712
  %1731 = and i64 %1724, 4294967295
  %1732 = icmp ult i64 %1731, 8
  br i1 %1732, label %1776, label %1733

1733:                                             ; preds = %1730
  %1734 = shl nsw i64 %1727, 1
  %1735 = add i64 %1734, %1181
  %1736 = sub i64 %1735, %665
  %1737 = icmp ult i64 %1736, 128
  br i1 %1737, label %1776, label %1738

1738:                                             ; preds = %1733
  %1739 = icmp ult i64 %1731, 64
  br i1 %1739, label %1763, label %1740

1740:                                             ; preds = %1738
  %1741 = and i64 %1724, 63
  %1742 = sub nsw i64 %1731, %1741
  br label %1743

1743:                                             ; preds = %1743, %1740
  %1744 = phi i64 [ 0, %1740 ], [ %1757, %1743 ]
  %1745 = getelementptr inbounds i16, ptr %329, i64 %1744
  %1746 = load <16 x i16>, ptr %1745, align 2, !tbaa !44
  %1747 = getelementptr inbounds i16, ptr %1745, i64 16
  %1748 = load <16 x i16>, ptr %1747, align 2, !tbaa !44
  %1749 = getelementptr inbounds i16, ptr %1745, i64 32
  %1750 = load <16 x i16>, ptr %1749, align 2, !tbaa !44
  %1751 = getelementptr inbounds i16, ptr %1745, i64 48
  %1752 = load <16 x i16>, ptr %1751, align 2, !tbaa !44
  %1753 = getelementptr inbounds i16, ptr %1728, i64 %1744
  store <16 x i16> %1746, ptr %1753, align 2, !tbaa !44
  %1754 = getelementptr inbounds i16, ptr %1753, i64 16
  store <16 x i16> %1748, ptr %1754, align 2, !tbaa !44
  %1755 = getelementptr inbounds i16, ptr %1753, i64 32
  store <16 x i16> %1750, ptr %1755, align 2, !tbaa !44
  %1756 = getelementptr inbounds i16, ptr %1753, i64 48
  store <16 x i16> %1752, ptr %1756, align 2, !tbaa !44
  %1757 = add nuw i64 %1744, 64
  %1758 = icmp eq i64 %1757, %1742
  br i1 %1758, label %1759, label %1743, !llvm.loop !326

1759:                                             ; preds = %1743
  %1760 = icmp eq i64 %1741, 0
  br i1 %1760, label %1814, label %1761

1761:                                             ; preds = %1759
  %1762 = icmp ult i64 %1741, 8
  br i1 %1762, label %1776, label %1763

1763:                                             ; preds = %1738, %1761
  %1764 = phi i64 [ %1742, %1761 ], [ 0, %1738 ]
  %1765 = and i64 %1724, 7
  %1766 = sub nsw i64 %1731, %1765
  br label %1767

1767:                                             ; preds = %1767, %1763
  %1768 = phi i64 [ %1764, %1763 ], [ %1772, %1767 ]
  %1769 = getelementptr inbounds i16, ptr %329, i64 %1768
  %1770 = load <8 x i16>, ptr %1769, align 2, !tbaa !44
  %1771 = getelementptr inbounds i16, ptr %1728, i64 %1768
  store <8 x i16> %1770, ptr %1771, align 2, !tbaa !44
  %1772 = add nuw i64 %1768, 8
  %1773 = icmp eq i64 %1772, %1766
  br i1 %1773, label %1774, label %1767, !llvm.loop !327

1774:                                             ; preds = %1767
  %1775 = icmp eq i64 %1765, 0
  br i1 %1775, label %1814, label %1776

1776:                                             ; preds = %1733, %1730, %1761, %1774
  %1777 = phi i64 [ 0, %1730 ], [ 0, %1733 ], [ %1742, %1761 ], [ %1766, %1774 ]
  %1778 = sub i64 %1724, %1777
  %1779 = xor i64 %1777, -1
  %1780 = add nsw i64 %1731, %1779
  %1781 = and i64 %1778, 3
  %1782 = icmp eq i64 %1781, 0
  br i1 %1782, label %1792, label %1783

1783:                                             ; preds = %1776, %1783
  %1784 = phi i64 [ %1789, %1783 ], [ %1777, %1776 ]
  %1785 = phi i64 [ %1790, %1783 ], [ 0, %1776 ]
  %1786 = getelementptr inbounds i16, ptr %329, i64 %1784
  %1787 = load i16, ptr %1786, align 2, !tbaa !44
  %1788 = getelementptr inbounds i16, ptr %1728, i64 %1784
  store i16 %1787, ptr %1788, align 2, !tbaa !44
  %1789 = add nuw nsw i64 %1784, 1
  %1790 = add i64 %1785, 1
  %1791 = icmp eq i64 %1790, %1781
  br i1 %1791, label %1792, label %1783, !llvm.loop !328

1792:                                             ; preds = %1783, %1776
  %1793 = phi i64 [ %1777, %1776 ], [ %1789, %1783 ]
  %1794 = icmp ult i64 %1780, 3
  br i1 %1794, label %1814, label %1795

1795:                                             ; preds = %1792, %1795
  %1796 = phi i64 [ %1812, %1795 ], [ %1793, %1792 ]
  %1797 = getelementptr inbounds i16, ptr %329, i64 %1796
  %1798 = load i16, ptr %1797, align 2, !tbaa !44
  %1799 = getelementptr inbounds i16, ptr %1728, i64 %1796
  store i16 %1798, ptr %1799, align 2, !tbaa !44
  %1800 = add nuw nsw i64 %1796, 1
  %1801 = getelementptr inbounds i16, ptr %329, i64 %1800
  %1802 = load i16, ptr %1801, align 2, !tbaa !44
  %1803 = getelementptr inbounds i16, ptr %1728, i64 %1800
  store i16 %1802, ptr %1803, align 2, !tbaa !44
  %1804 = add nuw nsw i64 %1796, 2
  %1805 = getelementptr inbounds i16, ptr %329, i64 %1804
  %1806 = load i16, ptr %1805, align 2, !tbaa !44
  %1807 = getelementptr inbounds i16, ptr %1728, i64 %1804
  store i16 %1806, ptr %1807, align 2, !tbaa !44
  %1808 = add nuw nsw i64 %1796, 3
  %1809 = getelementptr inbounds i16, ptr %329, i64 %1808
  %1810 = load i16, ptr %1809, align 2, !tbaa !44
  %1811 = getelementptr inbounds i16, ptr %1728, i64 %1808
  store i16 %1810, ptr %1811, align 2, !tbaa !44
  %1812 = add nuw nsw i64 %1796, 4
  %1813 = icmp eq i64 %1812, %1731
  br i1 %1813, label %1814, label %1795, !llvm.loop !329

1814:                                             ; preds = %1792, %1795, %1759, %1774
  %1815 = shl i64 %1723, 31
  %1816 = add i64 %1815, -4294967296
  %1817 = ashr i64 %1816, 32
  %1818 = getelementptr inbounds i16, ptr %1728, i64 %1817
  %1819 = load i16, ptr %1818, align 2, !tbaa !44
  br label %1820

1820:                                             ; preds = %1712, %1814
  %1821 = phi i64 [ %1724, %1814 ], [ 0, %1712 ]
  %1822 = phi i16 [ %1819, %1814 ], [ -1, %1712 ]
  %1823 = and i64 %1821, 4294967295
  %1824 = getelementptr inbounds i16, ptr %1728, i64 %1823
  store i16 %1822, ptr %1824, align 2, !tbaa !44
  %1825 = trunc i64 %1724 to i16
  %1826 = add i16 %1825, 1
  %1827 = sext i32 %1721 to i64
  %1828 = getelementptr inbounds i16, ptr %1180, i64 %1827
  store i16 %1826, ptr %1828, align 2, !tbaa !44
  %1829 = add nsw i32 %1725, 2
  %1830 = add nsw i32 %1829, %1721
  %1831 = ptrtoint ptr %1697 to i64
  %1832 = sub i64 %1831, %666
  %1833 = lshr exact i64 %1832, 1
  %1834 = trunc i64 %1833 to i32
  %1835 = add nsw i32 %1830, 1
  %1836 = sext i32 %1835 to i64
  %1837 = getelementptr i16, ptr %1180, i64 %1836
  %1838 = icmp sgt i32 %1834, 0
  br i1 %1838, label %1839, label %1929

1839:                                             ; preds = %1820
  %1840 = and i64 %1833, 4294967295
  %1841 = icmp ult i64 %1840, 8
  br i1 %1841, label %1885, label %1842

1842:                                             ; preds = %1839
  %1843 = shl nsw i64 %1836, 1
  %1844 = add i64 %1843, %1181
  %1845 = sub i64 %1844, %666
  %1846 = icmp ult i64 %1845, 128
  br i1 %1846, label %1885, label %1847

1847:                                             ; preds = %1842
  %1848 = icmp ult i64 %1840, 64
  br i1 %1848, label %1872, label %1849

1849:                                             ; preds = %1847
  %1850 = and i64 %1833, 63
  %1851 = sub nsw i64 %1840, %1850
  br label %1852

1852:                                             ; preds = %1852, %1849
  %1853 = phi i64 [ 0, %1849 ], [ %1866, %1852 ]
  %1854 = getelementptr inbounds i16, ptr %375, i64 %1853
  %1855 = load <16 x i16>, ptr %1854, align 2, !tbaa !44
  %1856 = getelementptr inbounds i16, ptr %1854, i64 16
  %1857 = load <16 x i16>, ptr %1856, align 2, !tbaa !44
  %1858 = getelementptr inbounds i16, ptr %1854, i64 32
  %1859 = load <16 x i16>, ptr %1858, align 2, !tbaa !44
  %1860 = getelementptr inbounds i16, ptr %1854, i64 48
  %1861 = load <16 x i16>, ptr %1860, align 2, !tbaa !44
  %1862 = getelementptr inbounds i16, ptr %1837, i64 %1853
  store <16 x i16> %1855, ptr %1862, align 2, !tbaa !44
  %1863 = getelementptr inbounds i16, ptr %1862, i64 16
  store <16 x i16> %1857, ptr %1863, align 2, !tbaa !44
  %1864 = getelementptr inbounds i16, ptr %1862, i64 32
  store <16 x i16> %1859, ptr %1864, align 2, !tbaa !44
  %1865 = getelementptr inbounds i16, ptr %1862, i64 48
  store <16 x i16> %1861, ptr %1865, align 2, !tbaa !44
  %1866 = add nuw i64 %1853, 64
  %1867 = icmp eq i64 %1866, %1851
  br i1 %1867, label %1868, label %1852, !llvm.loop !330

1868:                                             ; preds = %1852
  %1869 = icmp eq i64 %1850, 0
  br i1 %1869, label %1923, label %1870

1870:                                             ; preds = %1868
  %1871 = icmp ult i64 %1850, 8
  br i1 %1871, label %1885, label %1872

1872:                                             ; preds = %1847, %1870
  %1873 = phi i64 [ %1851, %1870 ], [ 0, %1847 ]
  %1874 = and i64 %1833, 7
  %1875 = sub nsw i64 %1840, %1874
  br label %1876

1876:                                             ; preds = %1876, %1872
  %1877 = phi i64 [ %1873, %1872 ], [ %1881, %1876 ]
  %1878 = getelementptr inbounds i16, ptr %375, i64 %1877
  %1879 = load <8 x i16>, ptr %1878, align 2, !tbaa !44
  %1880 = getelementptr inbounds i16, ptr %1837, i64 %1877
  store <8 x i16> %1879, ptr %1880, align 2, !tbaa !44
  %1881 = add nuw i64 %1877, 8
  %1882 = icmp eq i64 %1881, %1875
  br i1 %1882, label %1883, label %1876, !llvm.loop !331

1883:                                             ; preds = %1876
  %1884 = icmp eq i64 %1874, 0
  br i1 %1884, label %1923, label %1885

1885:                                             ; preds = %1842, %1839, %1870, %1883
  %1886 = phi i64 [ 0, %1839 ], [ 0, %1842 ], [ %1851, %1870 ], [ %1875, %1883 ]
  %1887 = sub i64 %1833, %1886
  %1888 = xor i64 %1886, -1
  %1889 = add nsw i64 %1840, %1888
  %1890 = and i64 %1887, 3
  %1891 = icmp eq i64 %1890, 0
  br i1 %1891, label %1901, label %1892

1892:                                             ; preds = %1885, %1892
  %1893 = phi i64 [ %1898, %1892 ], [ %1886, %1885 ]
  %1894 = phi i64 [ %1899, %1892 ], [ 0, %1885 ]
  %1895 = getelementptr inbounds i16, ptr %375, i64 %1893
  %1896 = load i16, ptr %1895, align 2, !tbaa !44
  %1897 = getelementptr inbounds i16, ptr %1837, i64 %1893
  store i16 %1896, ptr %1897, align 2, !tbaa !44
  %1898 = add nuw nsw i64 %1893, 1
  %1899 = add i64 %1894, 1
  %1900 = icmp eq i64 %1899, %1890
  br i1 %1900, label %1901, label %1892, !llvm.loop !332

1901:                                             ; preds = %1892, %1885
  %1902 = phi i64 [ %1886, %1885 ], [ %1898, %1892 ]
  %1903 = icmp ult i64 %1889, 3
  br i1 %1903, label %1923, label %1904

1904:                                             ; preds = %1901, %1904
  %1905 = phi i64 [ %1921, %1904 ], [ %1902, %1901 ]
  %1906 = getelementptr inbounds i16, ptr %375, i64 %1905
  %1907 = load i16, ptr %1906, align 2, !tbaa !44
  %1908 = getelementptr inbounds i16, ptr %1837, i64 %1905
  store i16 %1907, ptr %1908, align 2, !tbaa !44
  %1909 = add nuw nsw i64 %1905, 1
  %1910 = getelementptr inbounds i16, ptr %375, i64 %1909
  %1911 = load i16, ptr %1910, align 2, !tbaa !44
  %1912 = getelementptr inbounds i16, ptr %1837, i64 %1909
  store i16 %1911, ptr %1912, align 2, !tbaa !44
  %1913 = add nuw nsw i64 %1905, 2
  %1914 = getelementptr inbounds i16, ptr %375, i64 %1913
  %1915 = load i16, ptr %1914, align 2, !tbaa !44
  %1916 = getelementptr inbounds i16, ptr %1837, i64 %1913
  store i16 %1915, ptr %1916, align 2, !tbaa !44
  %1917 = add nuw nsw i64 %1905, 3
  %1918 = getelementptr inbounds i16, ptr %375, i64 %1917
  %1919 = load i16, ptr %1918, align 2, !tbaa !44
  %1920 = getelementptr inbounds i16, ptr %1837, i64 %1917
  store i16 %1919, ptr %1920, align 2, !tbaa !44
  %1921 = add nuw nsw i64 %1905, 4
  %1922 = icmp eq i64 %1921, %1840
  br i1 %1922, label %1923, label %1904, !llvm.loop !333

1923:                                             ; preds = %1901, %1904, %1868, %1883
  %1924 = shl i64 %1832, 31
  %1925 = add i64 %1924, -4294967296
  %1926 = ashr i64 %1925, 32
  %1927 = getelementptr inbounds i16, ptr %1837, i64 %1926
  %1928 = load i16, ptr %1927, align 2, !tbaa !44
  br label %1929

1929:                                             ; preds = %1820, %1923
  %1930 = phi i64 [ %1833, %1923 ], [ 0, %1820 ]
  %1931 = phi i16 [ %1928, %1923 ], [ -1, %1820 ]
  %1932 = and i64 %1930, 4294967295
  %1933 = getelementptr inbounds i16, ptr %1837, i64 %1932
  store i16 %1931, ptr %1933, align 2, !tbaa !44
  %1934 = trunc i64 %1833 to i16
  %1935 = add i16 %1934, 1
  %1936 = sext i32 %1830 to i64
  %1937 = getelementptr inbounds i16, ptr %1180, i64 %1936
  store i16 %1935, ptr %1937, align 2, !tbaa !44
  %1938 = add i32 %1834, 3
  %1939 = add i32 %1938, %1830
  %1940 = select i1 %142, i32 1, i32 %1939
  store i32 %1940, ptr %13, align 8, !tbaa !17
  br label %1976

1941:                                             ; preds = %677
  %1942 = load <2 x double>, ptr %690, align 8, !tbaa !19
  %1943 = fadd <2 x double> %15, %1942
  %1944 = getelementptr inbounds %class.Vector, ptr %690, i64 0, i32 2
  %1945 = load double, ptr %1944, align 8, !tbaa !49
  %1946 = fadd double %17, %1945
  %1947 = load ptr, ptr %8, align 8, !tbaa !46
  %1948 = load i32, ptr %13, align 8, !tbaa !17
  %1949 = add i32 %1948, 1
  %1950 = sext i32 %1949 to i64
  %1951 = getelementptr inbounds i16, ptr %1947, i64 %1950
  %1952 = sext i32 %1948 to i64
  %1953 = getelementptr inbounds i16, ptr %1947, i64 %1952
  %1954 = load i16, ptr %1953, align 2, !tbaa !44
  %1955 = zext i16 %1954 to i32
  %1956 = add i32 %1949, %1955
  %1957 = add nsw i32 %1955, -1
  %1958 = add i32 %1956, 1
  %1959 = sext i32 %1958 to i64
  %1960 = getelementptr inbounds i16, ptr %1947, i64 %1959
  %1961 = sext i32 %1956 to i64
  %1962 = getelementptr inbounds i16, ptr %1947, i64 %1961
  %1963 = load i16, ptr %1962, align 2, !tbaa !44
  %1964 = zext i16 %1963 to i32
  %1965 = add i32 %1958, %1964
  %1966 = add nsw i32 %1964, -1
  %1967 = add i32 %1965, 1
  %1968 = sext i32 %1967 to i64
  %1969 = getelementptr inbounds i16, ptr %1947, i64 %1968
  %1970 = sext i32 %1965 to i64
  %1971 = getelementptr inbounds i16, ptr %1947, i64 %1970
  %1972 = load i16, ptr %1971, align 2, !tbaa !44
  %1973 = zext i16 %1972 to i32
  %1974 = add i32 %1967, %1973
  store i32 %1974, ptr %13, align 8, !tbaa !17
  %1975 = add nsw i32 %1973, -1
  br label %1976

1976:                                             ; preds = %1929, %1941
  %1977 = phi double [ %1946, %1941 ], [ %710, %1929 ]
  %1978 = phi i32 [ %684, %1941 ], [ %705, %1929 ]
  %1979 = phi ptr [ %1951, %1941 ], [ %1184, %1929 ]
  %1980 = phi i32 [ %1957, %1941 ], [ %1704, %1929 ]
  %1981 = phi ptr [ %1960, %1941 ], [ %1728, %1929 ]
  %1982 = phi i32 [ %1966, %1941 ], [ %1725, %1929 ]
  %1983 = phi ptr [ %1969, %1941 ], [ %1837, %1929 ]
  %1984 = phi i32 [ %1975, %1941 ], [ %1834, %1929 ]
  %1985 = phi i32 [ %683, %1941 ], [ %1145, %1929 ]
  %1986 = phi ptr [ %682, %1941 ], [ %955, %1929 ]
  %1987 = phi ptr [ %681, %1941 ], [ %956, %1929 ]
  %1988 = phi ptr [ %680, %1941 ], [ %957, %1929 ]
  %1989 = phi <2 x double> [ %1943, %1941 ], [ %707, %1929 ]
  %1990 = load i32, ptr @_ZN20ComputeNonbondedUtil17pairInteractionOnE, align 4, !tbaa !5
  %1991 = icmp eq i32 %1990, 0
  %1992 = load i32, ptr @_ZN20ComputeNonbondedUtil19pairInteractionSelfE, align 4
  %1993 = icmp ne i32 %1992, 0
  %1994 = select i1 %1991, i1 true, i1 %1993
  br i1 %1994, label %2000, label %1995

1995:                                             ; preds = %1976
  %1996 = getelementptr inbounds %struct.CompAtom, ptr %39, i64 %689, i32 3
  %1997 = load i8, ptr %1996, align 2, !tbaa !301
  %1998 = icmp eq i8 %1997, 1
  %1999 = select i1 %1998, double 1.000000e+00, double -1.000000e+00
  br label %2000

2000:                                             ; preds = %1976, %1995
  %2001 = phi double [ %1999, %1995 ], [ 0.000000e+00, %1976 ]
  %2002 = getelementptr inbounds %struct.CompAtom, ptr %39, i64 %689, i32 1
  %2003 = load float, ptr %2002, align 8, !tbaa !79
  %2004 = fpext float %2003 to double
  %2005 = fmul double %2004, 0x4074C104816F0069
  %2006 = fmul double %28, %2005
  %2007 = fmul double %24, %2006
  %2008 = getelementptr inbounds %struct.CompAtom, ptr %39, i64 %689, i32 2
  %2009 = load i16, ptr %2008, align 4, !tbaa !80
  %2010 = sext i16 %2009 to i32
  %2011 = load ptr, ptr %667, align 8, !tbaa !81
  %2012 = load i32, ptr %668, align 8, !tbaa !83
  %2013 = shl nsw i32 %2010, 1
  %2014 = mul i32 %2013, %2012
  %2015 = zext i32 %2014 to i64
  %2016 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %2011, i64 %2015
  %2017 = load double, ptr @_ZN20ComputeNonbondedUtil7cutoff2E, align 8, !tbaa !19
  %2018 = extractelement <2 x double> %1989, i64 0
  %2019 = extractelement <2 x double> %1989, i64 1
  %2020 = tail call noundef i32 @_Z22pairlist_from_pairlistddddPK8CompAtomPKtiPtdPd(double noundef %2017, double noundef %2018, double noundef %2019, double noundef %1977, ptr noundef %41, ptr noundef nonnull %1979, i32 noundef %1980, ptr noundef %94, double noundef %31, ptr noundef %140)
  %2021 = icmp sgt i32 %2020, 0
  br i1 %2021, label %2022, label %2174

2022:                                             ; preds = %2000
  %2023 = load ptr, ptr @_ZN20ComputeNonbondedUtil8r2_tableE, align 8, !tbaa !23
  %2024 = zext i32 %2020 to i64
  br label %2025

2025:                                             ; preds = %2022, %2025
  %2026 = phi i64 [ 0, %2022 ], [ %2172, %2025 ]
  %2027 = phi double [ 0.000000e+00, %2022 ], [ %2168, %2025 ]
  %2028 = phi <2 x double> [ %685, %2022 ], [ %2160, %2025 ]
  %2029 = phi <2 x double> [ %686, %2022 ], [ %2153, %2025 ]
  %2030 = phi <2 x double> [ %687, %2022 ], [ %2166, %2025 ]
  %2031 = phi <2 x double> [ zeroinitializer, %2022 ], [ %2162, %2025 ]
  %2032 = phi <2 x double> [ %688, %2022 ], [ %2132, %2025 ]
  %2033 = shl nuw nsw i64 %2026, 1
  %2034 = getelementptr inbounds i32, ptr %141, i64 %2033
  %2035 = load i32, ptr %2034, align 4, !tbaa !5
  %2036 = ashr i32 %2035, 14
  %2037 = add nsw i32 %2036, %34
  %2038 = getelementptr inbounds i16, ptr %94, i64 %2026
  %2039 = load i16, ptr %2038, align 2, !tbaa !44
  %2040 = zext i16 %2039 to i64
  %2041 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %2040
  %2042 = getelementptr inbounds double, ptr %140, i64 %2026
  %2043 = load double, ptr %2042, align 8, !tbaa !19
  %2044 = sext i32 %2037 to i64
  %2045 = getelementptr inbounds double, ptr %2023, i64 %2044
  %2046 = load double, ptr %2045, align 8, !tbaa !19
  %2047 = fsub double %2043, %2046
  %2048 = shl nsw i32 %2037, 4
  %2049 = sext i32 %2048 to i64
  %2050 = getelementptr inbounds double, ptr %27, i64 %2049
  %2051 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %2040, i32 2
  %2052 = load i16, ptr %2051, align 4, !tbaa !80
  %2053 = sext i16 %2052 to i32
  %2054 = shl nsw i32 %2053, 1
  %2055 = sext i32 %2054 to i64
  %2056 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %2016, i64 %2055
  %2057 = getelementptr inbounds %class.Vector, ptr %648, i64 %2040
  %2058 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %2040, i32 1
  %2059 = load float, ptr %2058, align 8, !tbaa !79
  %2060 = fpext float %2059 to double
  %2061 = fmul double %2007, %2060
  %2062 = load <2 x double>, ptr %2041, align 8, !tbaa !19
  %2063 = fsub <2 x double> %1989, %2062
  %2064 = getelementptr inbounds %class.Vector, ptr %2041, i64 0, i32 2
  %2065 = load double, ptr %2064, align 8, !tbaa !49
  %2066 = fsub double %1977, %2065
  %2067 = load double, ptr %2056, align 8, !tbaa !84
  %2068 = fmul double %28, %2067
  %2069 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %2016, i64 %2055, i32 1
  %2070 = load double, ptr %2069, align 8, !tbaa !86
  %2071 = load double, ptr %2050, align 8, !tbaa !19
  %2072 = getelementptr inbounds double, ptr %2050, i64 2
  %2073 = load double, ptr %2072, align 8, !tbaa !19
  %2074 = fmul double %2070, %669
  %2075 = fmul double %2074, %2073
  %2076 = tail call double @llvm.fmuladd.f64(double %2068, double %2071, double %2075)
  %2077 = getelementptr inbounds double, ptr %2050, i64 1
  %2078 = load double, ptr %2077, align 8, !tbaa !19
  %2079 = getelementptr inbounds double, ptr %2050, i64 3
  %2080 = load double, ptr %2079, align 8, !tbaa !19
  %2081 = fmul double %2074, %2080
  %2082 = tail call double @llvm.fmuladd.f64(double %2068, double %2078, double %2081)
  %2083 = getelementptr inbounds double, ptr %2050, i64 4
  %2084 = load double, ptr %2083, align 8, !tbaa !19
  %2085 = getelementptr inbounds double, ptr %2050, i64 6
  %2086 = load double, ptr %2085, align 8, !tbaa !19
  %2087 = fmul double %2074, %2086
  %2088 = tail call double @llvm.fmuladd.f64(double %2068, double %2084, double %2087)
  %2089 = getelementptr inbounds double, ptr %2050, i64 5
  %2090 = load double, ptr %2089, align 8, !tbaa !19
  %2091 = getelementptr inbounds double, ptr %2050, i64 7
  %2092 = load double, ptr %2091, align 8, !tbaa !19
  %2093 = fmul double %2074, %2092
  %2094 = tail call double @llvm.fmuladd.f64(double %2068, double %2090, double %2093)
  %2095 = tail call double @llvm.fmuladd.f64(double %2047, double %2076, double %2082)
  %2096 = tail call double @llvm.fmuladd.f64(double %2095, double %2047, double %2088)
  %2097 = fmul double %2001, %2096
  %2098 = load <2 x double>, ptr %670, align 8, !tbaa !19
  %2099 = insertelement <2 x double> poison, double %2097, i64 0
  %2100 = shufflevector <2 x double> %2099, <2 x double> poison, <2 x i32> zeroinitializer
  %2101 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2100, <2 x double> %2063, <2 x double> %2098)
  store <2 x double> %2101, ptr %670, align 8, !tbaa !19
  %2102 = load double, ptr %671, align 8, !tbaa !19
  %2103 = tail call double @llvm.fmuladd.f64(double %2097, double %2066, double %2102)
  store double %2103, ptr %671, align 8, !tbaa !19
  %2104 = getelementptr inbounds double, ptr %2050, i64 8
  %2105 = load double, ptr %2104, align 8, !tbaa !19
  %2106 = getelementptr inbounds double, ptr %2050, i64 9
  %2107 = load double, ptr %2106, align 8, !tbaa !19
  %2108 = getelementptr inbounds double, ptr %2050, i64 10
  %2109 = load double, ptr %2108, align 8, !tbaa !19
  %2110 = getelementptr inbounds double, ptr %2050, i64 11
  %2111 = load double, ptr %2110, align 8, !tbaa !19
  %2112 = fmul double %2061, %2105
  %2113 = fmul double %2061, %2107
  %2114 = fmul double %2061, %2109
  %2115 = fmul double %2061, %2111
  %2116 = insertelement <2 x double> poison, double %2047, i64 0
  %2117 = shufflevector <2 x double> %2116, <2 x double> poison, <2 x i32> zeroinitializer
  %2118 = insertelement <2 x double> poison, double %2076, i64 0
  %2119 = insertelement <2 x double> %2118, double %2112, i64 1
  %2120 = fmul <2 x double> %2117, %2119
  %2121 = insertelement <2 x double> poison, double %2082, i64 0
  %2122 = insertelement <2 x double> %2121, double %2113, i64 1
  %2123 = fmul <2 x double> %2122, <double 2.500000e-01, double 2.500000e-01>
  %2124 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2120, <2 x double> <double 0x3FC5555555555555, double 0x3FC5555555555555>, <2 x double> %2123)
  %2125 = insertelement <2 x double> poison, double %2088, i64 0
  %2126 = insertelement <2 x double> %2125, double %2114, i64 1
  %2127 = fmul <2 x double> %2126, <double 5.000000e-01, double 5.000000e-01>
  %2128 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2124, <2 x double> %2117, <2 x double> %2127)
  %2129 = insertelement <2 x double> poison, double %2094, i64 0
  %2130 = insertelement <2 x double> %2129, double %2115, i64 1
  %2131 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2128, <2 x double> %2117, <2 x double> %2130)
  %2132 = fsub <2 x double> %2032, %2131
  %2133 = tail call double @llvm.fmuladd.f64(double %2047, double %2112, double %2113)
  %2134 = tail call double @llvm.fmuladd.f64(double %2133, double %2047, double %2114)
  %2135 = fmul double %2001, %2134
  %2136 = load <2 x double>, ptr %672, align 8, !tbaa !19
  %2137 = insertelement <2 x double> poison, double %2135, i64 0
  %2138 = shufflevector <2 x double> %2137, <2 x double> poison, <2 x i32> zeroinitializer
  %2139 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2138, <2 x double> %2063, <2 x double> %2136)
  store <2 x double> %2139, ptr %672, align 8, !tbaa !19
  %2140 = load double, ptr %673, align 8, !tbaa !19
  %2141 = tail call double @llvm.fmuladd.f64(double %2135, double %2066, double %2140)
  store double %2141, ptr %673, align 8, !tbaa !19
  %2142 = fadd double %2076, %2112
  %2143 = fadd double %2082, %2113
  %2144 = fadd double %2088, %2114
  %2145 = tail call double @llvm.fmuladd.f64(double %2047, double %2142, double %2143)
  %2146 = tail call double @llvm.fmuladd.f64(double %2145, double %2047, double %2144)
  %2147 = extractelement <2 x double> %2063, i64 1
  %2148 = fmul double %2147, %2146
  %2149 = insertelement <2 x double> poison, double %2148, i64 0
  %2150 = shufflevector <2 x double> %2149, <2 x double> poison, <2 x i32> zeroinitializer
  %2151 = shufflevector <2 x double> %2063, <2 x double> poison, <2 x i32> <i32 1, i32 0>
  %2152 = insertelement <2 x double> %2151, double %2066, i64 1
  %2153 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2150, <2 x double> %2152, <2 x double> %2029)
  %2154 = insertelement <2 x double> %2151, double %2066, i64 0
  %2155 = insertelement <2 x double> poison, double %2146, i64 0
  %2156 = shufflevector <2 x double> %2155, <2 x double> poison, <2 x i32> zeroinitializer
  %2157 = fmul <2 x double> %2154, %2156
  %2158 = shufflevector <2 x double> %2157, <2 x double> poison, <2 x i32> <i32 1, i32 poison>
  %2159 = shufflevector <2 x double> %2157, <2 x double> poison, <2 x i32> <i32 1, i32 1>
  %2160 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2159, <2 x double> %2063, <2 x double> %2028)
  %2161 = insertelement <2 x double> %2158, double %2148, i64 1
  %2162 = fadd <2 x double> %2031, %2161
  %2163 = load <2 x double>, ptr %2057, align 8, !tbaa !19
  %2164 = fsub <2 x double> %2163, %2161
  store <2 x double> %2164, ptr %2057, align 8, !tbaa !19
  %2165 = shufflevector <2 x double> %2154, <2 x double> poison, <2 x i32> zeroinitializer
  %2166 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2157, <2 x double> %2165, <2 x double> %2030)
  %2167 = extractelement <2 x double> %2157, i64 0
  %2168 = fadd double %2027, %2167
  %2169 = getelementptr inbounds %class.Vector, ptr %648, i64 %2040, i32 2
  %2170 = load double, ptr %2169, align 8, !tbaa !87
  %2171 = fsub double %2170, %2167
  store double %2171, ptr %2169, align 8, !tbaa !87
  %2172 = add nuw nsw i64 %2026, 1
  %2173 = icmp eq i64 %2172, %2024
  br i1 %2173, label %2174, label %2025

2174:                                             ; preds = %2025, %2000
  %2175 = phi double [ 0.000000e+00, %2000 ], [ %2168, %2025 ]
  %2176 = phi <2 x double> [ %685, %2000 ], [ %2160, %2025 ]
  %2177 = phi <2 x double> [ %686, %2000 ], [ %2153, %2025 ]
  %2178 = phi <2 x double> [ %687, %2000 ], [ %2166, %2025 ]
  %2179 = phi <2 x double> [ zeroinitializer, %2000 ], [ %2162, %2025 ]
  %2180 = phi <2 x double> [ %688, %2000 ], [ %2132, %2025 ]
  %2181 = load double, ptr @_ZN20ComputeNonbondedUtil7cutoff2E, align 8, !tbaa !19
  %2182 = tail call noundef i32 @_Z22pairlist_from_pairlistddddPK8CompAtomPKtiPtdPd(double noundef %2181, double noundef %2018, double noundef %2019, double noundef %1977, ptr noundef %41, ptr noundef %1983, i32 noundef %1984, ptr noundef %94, double noundef %31, ptr noundef %140)
  %2183 = add nsw i32 %2182, %678
  %2184 = icmp sgt i32 %2182, 0
  br i1 %2184, label %2185, label %2350

2185:                                             ; preds = %2174
  %2186 = load ptr, ptr @_ZN20ComputeNonbondedUtil8r2_tableE, align 8, !tbaa !23
  %2187 = zext i32 %2182 to i64
  br label %2188

2188:                                             ; preds = %2185, %2188
  %2189 = phi i64 [ 0, %2185 ], [ %2348, %2188 ]
  %2190 = phi double [ %2175, %2185 ], [ %2344, %2188 ]
  %2191 = phi <2 x double> [ %2176, %2185 ], [ %2336, %2188 ]
  %2192 = phi <2 x double> [ %2177, %2185 ], [ %2329, %2188 ]
  %2193 = phi <2 x double> [ %2178, %2185 ], [ %2342, %2188 ]
  %2194 = phi <2 x double> [ %2179, %2185 ], [ %2338, %2188 ]
  %2195 = phi <2 x double> [ %2180, %2185 ], [ %2308, %2188 ]
  %2196 = shl nuw nsw i64 %2189, 1
  %2197 = getelementptr inbounds i32, ptr %141, i64 %2196
  %2198 = load i32, ptr %2197, align 4, !tbaa !5
  %2199 = ashr i32 %2198, 14
  %2200 = add nsw i32 %2199, %34
  %2201 = getelementptr inbounds i16, ptr %94, i64 %2189
  %2202 = load i16, ptr %2201, align 2, !tbaa !44
  %2203 = zext i16 %2202 to i64
  %2204 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %2203
  %2205 = getelementptr inbounds double, ptr %140, i64 %2189
  %2206 = load double, ptr %2205, align 8, !tbaa !19
  %2207 = sext i32 %2200 to i64
  %2208 = getelementptr inbounds double, ptr %2186, i64 %2207
  %2209 = load double, ptr %2208, align 8, !tbaa !19
  %2210 = fsub double %2206, %2209
  %2211 = shl nsw i32 %2200, 4
  %2212 = sext i32 %2211 to i64
  %2213 = getelementptr inbounds double, ptr %27, i64 %2212
  %2214 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %2203, i32 2
  %2215 = load i16, ptr %2214, align 4, !tbaa !80
  %2216 = sext i16 %2215 to i32
  %2217 = shl nsw i32 %2216, 1
  %2218 = sext i32 %2217 to i64
  %2219 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %2016, i64 %2218
  %2220 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %2219, i64 1
  %2221 = getelementptr inbounds %class.Vector, ptr %648, i64 %2203
  %2222 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %2203, i32 1
  %2223 = load float, ptr %2222, align 8, !tbaa !79
  %2224 = fpext float %2223 to double
  %2225 = fmul double %2007, %2224
  %2226 = load <2 x double>, ptr %2204, align 8, !tbaa !19
  %2227 = fsub <2 x double> %1989, %2226
  %2228 = getelementptr inbounds %class.Vector, ptr %2204, i64 0, i32 2
  %2229 = load double, ptr %2228, align 8, !tbaa !49
  %2230 = fsub double %1977, %2229
  %2231 = load double, ptr %2220, align 8, !tbaa !84
  %2232 = fmul double %28, %2231
  %2233 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %2219, i64 1, i32 1
  %2234 = load double, ptr %2233, align 8, !tbaa !86
  %2235 = load double, ptr %2213, align 8, !tbaa !19
  %2236 = getelementptr inbounds double, ptr %2213, i64 2
  %2237 = load double, ptr %2236, align 8, !tbaa !19
  %2238 = fmul double %2234, %669
  %2239 = fmul double %2238, %2237
  %2240 = tail call double @llvm.fmuladd.f64(double %2232, double %2235, double %2239)
  %2241 = getelementptr inbounds double, ptr %2213, i64 1
  %2242 = load double, ptr %2241, align 8, !tbaa !19
  %2243 = getelementptr inbounds double, ptr %2213, i64 3
  %2244 = load double, ptr %2243, align 8, !tbaa !19
  %2245 = fmul double %2238, %2244
  %2246 = tail call double @llvm.fmuladd.f64(double %2232, double %2242, double %2245)
  %2247 = getelementptr inbounds double, ptr %2213, i64 4
  %2248 = load double, ptr %2247, align 8, !tbaa !19
  %2249 = getelementptr inbounds double, ptr %2213, i64 6
  %2250 = load double, ptr %2249, align 8, !tbaa !19
  %2251 = fmul double %2238, %2250
  %2252 = tail call double @llvm.fmuladd.f64(double %2232, double %2248, double %2251)
  %2253 = getelementptr inbounds double, ptr %2213, i64 5
  %2254 = load double, ptr %2253, align 8, !tbaa !19
  %2255 = getelementptr inbounds double, ptr %2213, i64 7
  %2256 = load double, ptr %2255, align 8, !tbaa !19
  %2257 = fmul double %2238, %2256
  %2258 = tail call double @llvm.fmuladd.f64(double %2232, double %2254, double %2257)
  %2259 = tail call double @llvm.fmuladd.f64(double %2210, double %2240, double %2246)
  %2260 = tail call double @llvm.fmuladd.f64(double %2259, double %2210, double %2252)
  %2261 = fmul double %2001, %2260
  %2262 = load <2 x double>, ptr %670, align 8, !tbaa !19
  %2263 = insertelement <2 x double> poison, double %2261, i64 0
  %2264 = shufflevector <2 x double> %2263, <2 x double> poison, <2 x i32> zeroinitializer
  %2265 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2264, <2 x double> %2227, <2 x double> %2262)
  store <2 x double> %2265, ptr %670, align 8, !tbaa !19
  %2266 = load double, ptr %671, align 8, !tbaa !19
  %2267 = tail call double @llvm.fmuladd.f64(double %2261, double %2230, double %2266)
  store double %2267, ptr %671, align 8, !tbaa !19
  %2268 = getelementptr inbounds double, ptr %2213, i64 8
  %2269 = load double, ptr %2268, align 8, !tbaa !19
  %2270 = getelementptr inbounds double, ptr %2213, i64 9
  %2271 = load double, ptr %2270, align 8, !tbaa !19
  %2272 = getelementptr inbounds double, ptr %2213, i64 10
  %2273 = load double, ptr %2272, align 8, !tbaa !19
  %2274 = getelementptr inbounds double, ptr %2213, i64 11
  %2275 = load double, ptr %2274, align 8, !tbaa !19
  %2276 = getelementptr inbounds double, ptr %2213, i64 12
  %2277 = load double, ptr %2276, align 8, !tbaa !19
  %2278 = tail call double @llvm.fmuladd.f64(double %674, double %2277, double %2269)
  %2279 = getelementptr inbounds double, ptr %2213, i64 13
  %2280 = load double, ptr %2279, align 8, !tbaa !19
  %2281 = tail call double @llvm.fmuladd.f64(double %674, double %2280, double %2271)
  %2282 = getelementptr inbounds double, ptr %2213, i64 14
  %2283 = load double, ptr %2282, align 8, !tbaa !19
  %2284 = tail call double @llvm.fmuladd.f64(double %674, double %2283, double %2273)
  %2285 = getelementptr inbounds double, ptr %2213, i64 15
  %2286 = load double, ptr %2285, align 8, !tbaa !19
  %2287 = tail call double @llvm.fmuladd.f64(double %674, double %2286, double %2275)
  %2288 = fmul double %2225, %2278
  %2289 = fmul double %2225, %2281
  %2290 = fmul double %2225, %2284
  %2291 = fmul double %2225, %2287
  %2292 = insertelement <2 x double> poison, double %2210, i64 0
  %2293 = shufflevector <2 x double> %2292, <2 x double> poison, <2 x i32> zeroinitializer
  %2294 = insertelement <2 x double> poison, double %2240, i64 0
  %2295 = insertelement <2 x double> %2294, double %2288, i64 1
  %2296 = fmul <2 x double> %2293, %2295
  %2297 = insertelement <2 x double> poison, double %2246, i64 0
  %2298 = insertelement <2 x double> %2297, double %2289, i64 1
  %2299 = fmul <2 x double> %2298, <double 2.500000e-01, double 2.500000e-01>
  %2300 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2296, <2 x double> <double 0x3FC5555555555555, double 0x3FC5555555555555>, <2 x double> %2299)
  %2301 = insertelement <2 x double> poison, double %2252, i64 0
  %2302 = insertelement <2 x double> %2301, double %2290, i64 1
  %2303 = fmul <2 x double> %2302, <double 5.000000e-01, double 5.000000e-01>
  %2304 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2300, <2 x double> %2293, <2 x double> %2303)
  %2305 = insertelement <2 x double> poison, double %2258, i64 0
  %2306 = insertelement <2 x double> %2305, double %2291, i64 1
  %2307 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2304, <2 x double> %2293, <2 x double> %2306)
  %2308 = fsub <2 x double> %2195, %2307
  %2309 = tail call double @llvm.fmuladd.f64(double %2210, double %2288, double %2289)
  %2310 = tail call double @llvm.fmuladd.f64(double %2309, double %2210, double %2290)
  %2311 = fmul double %2001, %2310
  %2312 = load <2 x double>, ptr %672, align 8, !tbaa !19
  %2313 = insertelement <2 x double> poison, double %2311, i64 0
  %2314 = shufflevector <2 x double> %2313, <2 x double> poison, <2 x i32> zeroinitializer
  %2315 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2314, <2 x double> %2227, <2 x double> %2312)
  store <2 x double> %2315, ptr %672, align 8, !tbaa !19
  %2316 = load double, ptr %673, align 8, !tbaa !19
  %2317 = tail call double @llvm.fmuladd.f64(double %2311, double %2230, double %2316)
  store double %2317, ptr %673, align 8, !tbaa !19
  %2318 = fadd double %2240, %2288
  %2319 = fadd double %2246, %2289
  %2320 = fadd double %2252, %2290
  %2321 = tail call double @llvm.fmuladd.f64(double %2210, double %2318, double %2319)
  %2322 = tail call double @llvm.fmuladd.f64(double %2321, double %2210, double %2320)
  %2323 = extractelement <2 x double> %2227, i64 1
  %2324 = fmul double %2323, %2322
  %2325 = insertelement <2 x double> poison, double %2324, i64 0
  %2326 = shufflevector <2 x double> %2325, <2 x double> poison, <2 x i32> zeroinitializer
  %2327 = shufflevector <2 x double> %2227, <2 x double> poison, <2 x i32> <i32 1, i32 0>
  %2328 = insertelement <2 x double> %2327, double %2230, i64 1
  %2329 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2326, <2 x double> %2328, <2 x double> %2192)
  %2330 = insertelement <2 x double> %2327, double %2230, i64 0
  %2331 = insertelement <2 x double> poison, double %2322, i64 0
  %2332 = shufflevector <2 x double> %2331, <2 x double> poison, <2 x i32> zeroinitializer
  %2333 = fmul <2 x double> %2330, %2332
  %2334 = shufflevector <2 x double> %2333, <2 x double> poison, <2 x i32> <i32 1, i32 poison>
  %2335 = shufflevector <2 x double> %2333, <2 x double> poison, <2 x i32> <i32 1, i32 1>
  %2336 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2335, <2 x double> %2227, <2 x double> %2191)
  %2337 = insertelement <2 x double> %2334, double %2324, i64 1
  %2338 = fadd <2 x double> %2194, %2337
  %2339 = load <2 x double>, ptr %2221, align 8, !tbaa !19
  %2340 = fsub <2 x double> %2339, %2337
  store <2 x double> %2340, ptr %2221, align 8, !tbaa !19
  %2341 = shufflevector <2 x double> %2330, <2 x double> poison, <2 x i32> zeroinitializer
  %2342 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2333, <2 x double> %2341, <2 x double> %2193)
  %2343 = extractelement <2 x double> %2333, i64 0
  %2344 = fadd double %2190, %2343
  %2345 = getelementptr inbounds %class.Vector, ptr %648, i64 %2203, i32 2
  %2346 = load double, ptr %2345, align 8, !tbaa !87
  %2347 = fsub double %2346, %2343
  store double %2347, ptr %2345, align 8, !tbaa !87
  %2348 = add nuw nsw i64 %2189, 1
  %2349 = icmp eq i64 %2348, %2187
  br i1 %2349, label %2350, label %2188

2350:                                             ; preds = %2188, %2174
  %2351 = phi double [ %2175, %2174 ], [ %2344, %2188 ]
  %2352 = phi <2 x double> [ %2176, %2174 ], [ %2336, %2188 ]
  %2353 = phi <2 x double> [ %2177, %2174 ], [ %2329, %2188 ]
  %2354 = phi <2 x double> [ %2178, %2174 ], [ %2342, %2188 ]
  %2355 = phi <2 x double> [ %2179, %2174 ], [ %2338, %2188 ]
  %2356 = phi <2 x double> [ %2180, %2174 ], [ %2308, %2188 ]
  %2357 = load double, ptr @_ZN20ComputeNonbondedUtil7cutoff2E, align 8, !tbaa !19
  %2358 = tail call noundef i32 @_Z22pairlist_from_pairlistddddPK8CompAtomPKtiPtdPd(double noundef %2357, double noundef %2018, double noundef %2019, double noundef %1977, ptr noundef %41, ptr noundef %1981, i32 noundef %1982, ptr noundef %94, double noundef %31, ptr noundef %140)
  %2359 = add nsw i32 %2183, %2358
  %2360 = icmp sgt i32 %2358, 0
  %2361 = extractelement <2 x double> %2356, i64 1
  br i1 %2360, label %2362, label %2468

2362:                                             ; preds = %2350
  %2363 = load ptr, ptr @_ZN20ComputeNonbondedUtil8r2_tableE, align 8, !tbaa !23
  %2364 = zext i32 %2358 to i64
  br label %2365

2365:                                             ; preds = %2362, %2365
  %2366 = phi i64 [ 0, %2362 ], [ %2466, %2365 ]
  %2367 = phi double [ %2361, %2362 ], [ %2431, %2365 ]
  %2368 = phi double [ %2351, %2362 ], [ %2462, %2365 ]
  %2369 = phi <2 x double> [ %2352, %2362 ], [ %2454, %2365 ]
  %2370 = phi <2 x double> [ %2353, %2362 ], [ %2447, %2365 ]
  %2371 = phi <2 x double> [ %2354, %2362 ], [ %2460, %2365 ]
  %2372 = phi <2 x double> [ %2355, %2362 ], [ %2456, %2365 ]
  %2373 = shl nuw nsw i64 %2366, 1
  %2374 = getelementptr inbounds i32, ptr %141, i64 %2373
  %2375 = load i32, ptr %2374, align 4, !tbaa !5
  %2376 = ashr i32 %2375, 14
  %2377 = add nsw i32 %2376, %34
  %2378 = getelementptr inbounds i16, ptr %94, i64 %2366
  %2379 = load i16, ptr %2378, align 2, !tbaa !44
  %2380 = zext i16 %2379 to i64
  %2381 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %2380
  %2382 = getelementptr inbounds double, ptr %140, i64 %2366
  %2383 = load double, ptr %2382, align 8, !tbaa !19
  %2384 = sext i32 %2377 to i64
  %2385 = getelementptr inbounds double, ptr %2363, i64 %2384
  %2386 = load double, ptr %2385, align 8, !tbaa !19
  %2387 = fsub double %2383, %2386
  %2388 = shl nsw i32 %2377, 4
  %2389 = sext i32 %2388 to i64
  %2390 = getelementptr inbounds double, ptr %27, i64 %2389
  %2391 = getelementptr inbounds %class.Vector, ptr %648, i64 %2380
  %2392 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %2380, i32 1
  %2393 = load float, ptr %2392, align 8, !tbaa !79
  %2394 = fpext float %2393 to double
  %2395 = fmul double %2007, %2394
  %2396 = load <2 x double>, ptr %2381, align 8, !tbaa !19
  %2397 = fsub <2 x double> %1989, %2396
  %2398 = getelementptr inbounds %class.Vector, ptr %2381, i64 0, i32 2
  %2399 = load double, ptr %2398, align 8, !tbaa !49
  %2400 = fsub double %1977, %2399
  %2401 = getelementptr inbounds double, ptr %2390, i64 8
  %2402 = load double, ptr %2401, align 8, !tbaa !19
  %2403 = getelementptr inbounds double, ptr %2390, i64 9
  %2404 = load double, ptr %2403, align 8, !tbaa !19
  %2405 = getelementptr inbounds double, ptr %2390, i64 10
  %2406 = load double, ptr %2405, align 8, !tbaa !19
  %2407 = getelementptr inbounds double, ptr %2390, i64 11
  %2408 = load double, ptr %2407, align 8, !tbaa !19
  %2409 = getelementptr inbounds double, ptr %2390, i64 12
  %2410 = load double, ptr %2409, align 8, !tbaa !19
  %2411 = fsub double %2402, %2410
  %2412 = getelementptr inbounds double, ptr %2390, i64 13
  %2413 = load double, ptr %2412, align 8, !tbaa !19
  %2414 = fsub double %2404, %2413
  %2415 = getelementptr inbounds double, ptr %2390, i64 14
  %2416 = load double, ptr %2415, align 8, !tbaa !19
  %2417 = fsub double %2406, %2416
  %2418 = getelementptr inbounds double, ptr %2390, i64 15
  %2419 = load double, ptr %2418, align 8, !tbaa !19
  %2420 = fsub double %2408, %2419
  %2421 = fmul double %2395, %2411
  %2422 = fmul double %2395, %2414
  %2423 = fmul double %2395, %2417
  %2424 = fmul double %2395, %2420
  %2425 = fmul double %2387, %2421
  %2426 = fmul double %2422, 2.500000e-01
  %2427 = tail call double @llvm.fmuladd.f64(double %2425, double 0x3FC5555555555555, double %2426)
  %2428 = fmul double %2423, 5.000000e-01
  %2429 = tail call double @llvm.fmuladd.f64(double %2427, double %2387, double %2428)
  %2430 = tail call double @llvm.fmuladd.f64(double %2429, double %2387, double %2424)
  %2431 = fsub double %2367, %2430
  %2432 = tail call double @llvm.fmuladd.f64(double %2387, double %2421, double %2422)
  %2433 = tail call double @llvm.fmuladd.f64(double %2432, double %2387, double %2423)
  %2434 = fmul double %2001, %2433
  %2435 = load <2 x double>, ptr %672, align 8, !tbaa !19
  %2436 = insertelement <2 x double> poison, double %2434, i64 0
  %2437 = shufflevector <2 x double> %2436, <2 x double> poison, <2 x i32> zeroinitializer
  %2438 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2437, <2 x double> %2397, <2 x double> %2435)
  store <2 x double> %2438, ptr %672, align 8, !tbaa !19
  %2439 = load double, ptr %673, align 8, !tbaa !19
  %2440 = tail call double @llvm.fmuladd.f64(double %2434, double %2400, double %2439)
  store double %2440, ptr %673, align 8, !tbaa !19
  %2441 = extractelement <2 x double> %2397, i64 1
  %2442 = fmul double %2441, %2433
  %2443 = insertelement <2 x double> poison, double %2442, i64 0
  %2444 = shufflevector <2 x double> %2443, <2 x double> poison, <2 x i32> zeroinitializer
  %2445 = shufflevector <2 x double> %2397, <2 x double> poison, <2 x i32> <i32 1, i32 0>
  %2446 = insertelement <2 x double> %2445, double %2400, i64 1
  %2447 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2444, <2 x double> %2446, <2 x double> %2370)
  %2448 = insertelement <2 x double> %2445, double %2400, i64 0
  %2449 = insertelement <2 x double> poison, double %2433, i64 0
  %2450 = shufflevector <2 x double> %2449, <2 x double> poison, <2 x i32> zeroinitializer
  %2451 = fmul <2 x double> %2448, %2450
  %2452 = shufflevector <2 x double> %2451, <2 x double> poison, <2 x i32> <i32 1, i32 poison>
  %2453 = shufflevector <2 x double> %2451, <2 x double> poison, <2 x i32> <i32 1, i32 1>
  %2454 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2453, <2 x double> %2397, <2 x double> %2369)
  %2455 = insertelement <2 x double> %2452, double %2442, i64 1
  %2456 = fadd <2 x double> %2372, %2455
  %2457 = load <2 x double>, ptr %2391, align 8, !tbaa !19
  %2458 = fsub <2 x double> %2457, %2455
  store <2 x double> %2458, ptr %2391, align 8, !tbaa !19
  %2459 = shufflevector <2 x double> %2448, <2 x double> poison, <2 x i32> zeroinitializer
  %2460 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2451, <2 x double> %2459, <2 x double> %2371)
  %2461 = extractelement <2 x double> %2451, i64 0
  %2462 = fadd double %2368, %2461
  %2463 = getelementptr inbounds %class.Vector, ptr %648, i64 %2380, i32 2
  %2464 = load double, ptr %2463, align 8, !tbaa !87
  %2465 = fsub double %2464, %2461
  store double %2465, ptr %2463, align 8, !tbaa !87
  %2466 = add nuw nsw i64 %2366, 1
  %2467 = icmp eq i64 %2466, %2364
  br i1 %2467, label %2468, label %2365

2468:                                             ; preds = %2365, %2350
  %2469 = phi double [ %2351, %2350 ], [ %2462, %2365 ]
  %2470 = phi double [ %2361, %2350 ], [ %2431, %2365 ]
  %2471 = phi <2 x double> [ %2352, %2350 ], [ %2454, %2365 ]
  %2472 = phi <2 x double> [ %2353, %2350 ], [ %2447, %2365 ]
  %2473 = phi <2 x double> [ %2354, %2350 ], [ %2460, %2365 ]
  %2474 = phi <2 x double> [ %2355, %2350 ], [ %2456, %2365 ]
  %2475 = getelementptr inbounds %class.Vector, ptr %649, i64 %689
  %2476 = load <2 x double>, ptr %2475, align 8, !tbaa !19
  %2477 = fadd <2 x double> %2474, %2476
  store <2 x double> %2477, ptr %2475, align 8, !tbaa !19
  %2478 = getelementptr inbounds %class.Vector, ptr %649, i64 %689, i32 2
  %2479 = load double, ptr %2478, align 8, !tbaa !87
  %2480 = fadd double %2469, %2479
  store double %2480, ptr %2478, align 8, !tbaa !87
  br i1 %144, label %2484, label %2481

2481:                                             ; preds = %2468
  %2482 = add nsw i32 %679, 1
  %2483 = insertelement <2 x double> %2356, double %2470, i64 1
  br label %2493

2484:                                             ; preds = %2468
  %2485 = load ptr, ptr %8, align 8, !tbaa !46
  %2486 = load i32, ptr %13, align 8, !tbaa !17
  %2487 = add nsw i32 %2486, 1
  store i32 %2487, ptr %13, align 8, !tbaa !17
  %2488 = sext i32 %2486 to i64
  %2489 = getelementptr inbounds i16, ptr %2485, i64 %2488
  %2490 = load i16, ptr %2489, align 2, !tbaa !44
  %2491 = zext i16 %2490 to i32
  %2492 = insertelement <2 x double> %2356, double %2470, i64 1
  br label %2493

2493:                                             ; preds = %1244, %1203, %1131, %1583, %2484, %2481, %701
  %2494 = phi i32 [ %1978, %2484 ], [ %1978, %2481 ], [ %702, %701 ], [ %705, %1583 ], [ %705, %1131 ], [ %705, %1203 ], [ %705, %1244 ]
  %2495 = phi i32 [ %1985, %2484 ], [ %1985, %2481 ], [ %683, %701 ], [ %1145, %1583 ], [ 0, %1131 ], [ %1145, %1203 ], [ %1145, %1244 ]
  %2496 = phi ptr [ %1986, %2484 ], [ %1986, %2481 ], [ %682, %701 ], [ %955, %1583 ], [ %955, %1131 ], [ %955, %1203 ], [ %955, %1244 ]
  %2497 = phi ptr [ %1987, %2484 ], [ %1987, %2481 ], [ %681, %701 ], [ %956, %1583 ], [ %956, %1131 ], [ %956, %1203 ], [ %956, %1244 ]
  %2498 = phi ptr [ %1988, %2484 ], [ %1988, %2481 ], [ %680, %701 ], [ %957, %1583 ], [ %957, %1131 ], [ %957, %1203 ], [ %957, %1244 ]
  %2499 = phi i32 [ %2491, %2484 ], [ %2482, %2481 ], [ %703, %701 ], [ %1584, %1583 ], [ %1135, %1131 ], [ %1204, %1203 ], [ %1245, %1244 ]
  %2500 = phi i32 [ %2359, %2484 ], [ %2359, %2481 ], [ %678, %701 ], [ %678, %1583 ], [ %678, %1131 ], [ %678, %1203 ], [ %678, %1244 ]
  %2501 = phi <2 x double> [ %2471, %2484 ], [ %2471, %2481 ], [ %685, %701 ], [ %685, %1583 ], [ %685, %1131 ], [ %685, %1203 ], [ %685, %1244 ]
  %2502 = phi <2 x double> [ %2472, %2484 ], [ %2472, %2481 ], [ %686, %701 ], [ %686, %1583 ], [ %686, %1131 ], [ %686, %1203 ], [ %686, %1244 ]
  %2503 = phi <2 x double> [ %2473, %2484 ], [ %2473, %2481 ], [ %687, %701 ], [ %687, %1583 ], [ %687, %1131 ], [ %687, %1203 ], [ %687, %1244 ]
  %2504 = phi <2 x double> [ %2492, %2484 ], [ %2483, %2481 ], [ %688, %701 ], [ %688, %1583 ], [ %688, %1131 ], [ %688, %1203 ], [ %688, %1244 ]
  %2505 = icmp slt i32 %2499, %36
  br i1 %2505, label %677, label %2506

2506:                                             ; preds = %2493
  %2507 = extractelement <2 x double> %2504, i64 1
  %2508 = extractelement <2 x double> %2504, i64 0
  br label %2509

2509:                                             ; preds = %2506, %645
  %2510 = phi ptr [ null, %645 ], [ %2498, %2506 ]
  %2511 = phi i32 [ %652, %645 ], [ %2499, %2506 ]
  %2512 = phi double [ 0.000000e+00, %645 ], [ %2507, %2506 ]
  %2513 = phi double [ 0.000000e+00, %645 ], [ %2508, %2506 ]
  %2514 = phi i32 [ 0, %645 ], [ %2500, %2506 ]
  %2515 = phi <2 x double> [ zeroinitializer, %645 ], [ %2501, %2506 ]
  %2516 = phi <2 x double> [ zeroinitializer, %645 ], [ %2502, %2506 ]
  %2517 = phi <2 x double> [ zeroinitializer, %645 ], [ %2503, %2506 ]
  br i1 %142, label %2525, label %2518

2518:                                             ; preds = %2509
  %2519 = trunc i32 %2511 to i16
  %2520 = load ptr, ptr %8, align 8, !tbaa !46
  %2521 = load i32, ptr %13, align 8, !tbaa !17
  %2522 = add nsw i32 %2521, -1
  %2523 = sext i32 %2522 to i64
  %2524 = getelementptr inbounds i16, ptr %2520, i64 %2523
  store i16 %2519, ptr %2524, align 2, !tbaa !44
  br label %2525

2525:                                             ; preds = %2518, %2509
  %2526 = sitofp i32 %2514 to double
  %2527 = getelementptr inbounds double, ptr %6, i64 22
  %2528 = load double, ptr %2527, align 8, !tbaa !19
  %2529 = fadd double %2528, %2526
  store double %2529, ptr %2527, align 8, !tbaa !19
  %2530 = getelementptr inbounds double, ptr %6, i64 2
  %2531 = load double, ptr %2530, align 8, !tbaa !19
  %2532 = fadd double %2513, %2531
  store double %2532, ptr %2530, align 8, !tbaa !19
  %2533 = getelementptr inbounds double, ptr %6, i64 1
  %2534 = load double, ptr %2533, align 8, !tbaa !19
  %2535 = fadd double %2512, %2534
  store double %2535, ptr %2533, align 8, !tbaa !19
  %2536 = getelementptr inbounds double, ptr %6, i64 12
  %2537 = load <4 x double>, ptr %2536, align 8, !tbaa !19
  %2538 = shufflevector <2 x double> %2515, <2 x double> %2517, <4 x i32> <i32 0, i32 1, i32 3, i32 poison>
  %2539 = shufflevector <4 x double> %2538, <4 x double> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 1>
  %2540 = fadd <4 x double> %2539, %2537
  store <4 x double> %2540, ptr %2536, align 8, !tbaa !19
  %2541 = getelementptr inbounds double, ptr %6, i64 16
  %2542 = load <4 x double>, ptr %2541, align 8, !tbaa !19
  %2543 = shufflevector <2 x double> %2516, <2 x double> %2517, <4 x i32> <i32 0, i32 1, i32 3, i32 poison>
  %2544 = shufflevector <4 x double> %2543, <4 x double> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 1>
  %2545 = fadd <4 x double> %2544, %2542
  store <4 x double> %2545, ptr %2541, align 8, !tbaa !19
  %2546 = getelementptr inbounds double, ptr %6, i64 20
  %2547 = load double, ptr %2546, align 8, !tbaa !19
  %2548 = extractelement <2 x double> %2517, i64 0
  %2549 = fadd double %2548, %2547
  store double %2549, ptr %2546, align 8, !tbaa !19
  %2550 = icmp eq ptr %2510, null
  br i1 %2550, label %2552, label %2551

2551:                                             ; preds = %2525
  tail call void @_ZdaPv(ptr noundef nonnull %2510) #10
  br label %2552

2552:                                             ; preds = %2525, %2551, %1
  ret void
}

; Function Attrs: sspstrong uwtable
define dso_local void @_ZN20ComputeNonbondedUtil20calc_self_energy_intEP9nonbonded(ptr nocapture noundef readonly %0) local_unnamed_addr #0 align 2 {
  %2 = load i32, ptr @_ZN20ComputeNonbondedUtil8commOnlyE, align 4, !tbaa !5
  %3 = icmp eq i32 %2, 0
  br i1 %3, label %4, label %2493

4:                                                ; preds = %1
  %5 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 7
  %6 = load ptr, ptr %5, align 8, !tbaa !9
  %7 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 10
  %8 = load ptr, ptr %7, align 8, !tbaa !14
  %9 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 11
  %10 = load i32, ptr %9, align 8, !tbaa !15
  %11 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 12
  %12 = load i32, ptr %11, align 4, !tbaa !16
  %13 = getelementptr inbounds %class.Pairlists, ptr %8, i64 0, i32 1
  store i32 0, ptr %13, align 8, !tbaa !17
  %14 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 6
  %15 = load <2 x double>, ptr %14, align 8, !tbaa !19
  %16 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 6, i32 2
  %17 = load double, ptr %16, align 8, !tbaa !20
  %18 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 13
  %19 = load double, ptr %18, align 8, !tbaa !21
  %20 = fmul double %19, %19
  %21 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 14
  %22 = load double, ptr %21, align 8, !tbaa !22
  %23 = fmul double %22, %22
  %24 = load double, ptr @_ZN20ComputeNonbondedUtil12dielectric_1E, align 8, !tbaa !19
  %25 = load ptr, ptr @_ZN20ComputeNonbondedUtil7ljTableE, align 8, !tbaa !23
  %26 = load ptr, ptr @_ZN20ComputeNonbondedUtil3molE, align 8, !tbaa !23
  %27 = load ptr, ptr @_ZN20ComputeNonbondedUtil11table_shortE, align 8, !tbaa !23
  %28 = load double, ptr @_ZN20ComputeNonbondedUtil7scalingE, align 8, !tbaa !19
  %29 = load double, ptr @_ZN20ComputeNonbondedUtil7scale14E, align 8, !tbaa !19
  %30 = load double, ptr @_ZN20ComputeNonbondedUtil8r2_deltaE, align 8, !tbaa !19
  %31 = load i32, ptr @_ZN20ComputeNonbondedUtil12r2_delta_expE, align 4, !tbaa !5
  %32 = shl i32 %31, 6
  %33 = add i32 %32, -65472
  %34 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 5
  %35 = load i32, ptr %34, align 8, !tbaa !5
  %36 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 5, i64 1
  %37 = load i32, ptr %36, align 4, !tbaa !5
  %38 = load ptr, ptr %0, align 8, !tbaa !23
  %39 = getelementptr inbounds [2 x ptr], ptr %0, i64 0, i64 1
  %40 = load ptr, ptr %39, align 8, !tbaa !23
  %41 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 1
  %42 = load ptr, ptr %41, align 8, !tbaa !23
  %43 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 1, i64 1
  %44 = load ptr, ptr %43, align 8, !tbaa !23
  %45 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 9
  %46 = load ptr, ptr %45, align 8, !tbaa !24
  %47 = add nsw i32 %37, 5
  %48 = getelementptr inbounds %class.ResizeArray, ptr %46, i64 0, i32 1
  %49 = load ptr, ptr %48, align 8, !tbaa !25
  %50 = getelementptr inbounds %class.ResizeArrayRaw, ptr %49, i64 0, i32 2
  %51 = load i32, ptr %50, align 8, !tbaa !27
  %52 = icmp slt i32 %51, %47
  br i1 %52, label %53, label %91

53:                                               ; preds = %4
  %54 = getelementptr inbounds %class.ResizeArrayRaw, ptr %49, i64 0, i32 3
  %55 = load i32, ptr %54, align 4, !tbaa !30
  %56 = icmp slt i32 %55, %47
  br i1 %56, label %57, label %91

57:                                               ; preds = %53
  %58 = sitofp i32 %55 to float
  %59 = getelementptr inbounds %class.ResizeArrayRaw, ptr %49, i64 0, i32 5
  %60 = load float, ptr %59, align 4, !tbaa !31
  %61 = fmul float %60, %58
  %62 = fptosi float %61 to i32
  %63 = tail call i32 @llvm.smax.i32(i32 %62, i32 %47)
  %64 = sub nsw i32 %63, %55
  %65 = getelementptr inbounds %class.ResizeArrayRaw, ptr %49, i64 0, i32 6
  %66 = load i32, ptr %65, align 8, !tbaa !32
  %67 = icmp slt i32 %64, %66
  %68 = add nsw i32 %66, %55
  %69 = select i1 %67, i32 %68, i32 %63
  %70 = sext i32 %69 to i64
  %71 = shl nsw i64 %70, 1
  %72 = add nsw i64 %71, 31
  %73 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %72) #9
  %74 = getelementptr inbounds i8, ptr %73, i64 31
  %75 = ptrtoint ptr %74 to i64
  %76 = and i64 %75, 31
  %77 = sub nsw i64 0, %76
  %78 = getelementptr inbounds i8, ptr %74, i64 %77
  %79 = load ptr, ptr %49, align 8, !tbaa !33
  %80 = sext i32 %51 to i64
  %81 = shl nsw i64 %80, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %78, ptr align 1 %79, i64 %81, i1 false)
  %82 = icmp eq i32 %55, 0
  br i1 %82, label %88, label %83

83:                                               ; preds = %57
  %84 = getelementptr inbounds %class.ResizeArrayRaw, ptr %49, i64 0, i32 1
  %85 = load ptr, ptr %84, align 8, !tbaa !34
  %86 = icmp eq ptr %85, null
  br i1 %86, label %88, label %87

87:                                               ; preds = %83
  tail call void @_ZdaPv(ptr noundef nonnull %85) #10
  br label %88

88:                                               ; preds = %87, %83, %57
  %89 = getelementptr inbounds %class.ResizeArrayRaw, ptr %49, i64 0, i32 1
  store ptr %73, ptr %89, align 8, !tbaa !34
  store ptr %78, ptr %49, align 8, !tbaa !33
  store i32 %69, ptr %54, align 4, !tbaa !30
  %90 = load ptr, ptr %48, align 8, !tbaa !25
  br label %91

91:                                               ; preds = %4, %53, %88
  %92 = phi ptr [ %49, %4 ], [ %49, %53 ], [ %90, %88 ]
  store i32 %47, ptr %50, align 8, !tbaa !27
  %93 = load ptr, ptr %92, align 8, !tbaa !33
  %94 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %46, i64 0, i32 1, i32 1
  %95 = load ptr, ptr %94, align 8, !tbaa !35
  %96 = getelementptr inbounds %class.ResizeArrayRaw.23, ptr %95, i64 0, i32 2
  %97 = load i32, ptr %96, align 8, !tbaa !37
  %98 = icmp slt i32 %97, %47
  br i1 %98, label %99, label %137

99:                                               ; preds = %91
  %100 = getelementptr inbounds %class.ResizeArrayRaw.23, ptr %95, i64 0, i32 3
  %101 = load i32, ptr %100, align 4, !tbaa !39
  %102 = icmp slt i32 %101, %47
  br i1 %102, label %103, label %137

103:                                              ; preds = %99
  %104 = sitofp i32 %101 to float
  %105 = getelementptr inbounds %class.ResizeArrayRaw.23, ptr %95, i64 0, i32 5
  %106 = load float, ptr %105, align 4, !tbaa !40
  %107 = fmul float %106, %104
  %108 = fptosi float %107 to i32
  %109 = tail call i32 @llvm.smax.i32(i32 %108, i32 %47)
  %110 = sub nsw i32 %109, %101
  %111 = getelementptr inbounds %class.ResizeArrayRaw.23, ptr %95, i64 0, i32 6
  %112 = load i32, ptr %111, align 8, !tbaa !41
  %113 = icmp slt i32 %110, %112
  %114 = add nsw i32 %112, %101
  %115 = select i1 %113, i32 %114, i32 %109
  %116 = sext i32 %115 to i64
  %117 = shl nsw i64 %116, 3
  %118 = add nsw i64 %117, 31
  %119 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %118) #9
  %120 = getelementptr inbounds i8, ptr %119, i64 31
  %121 = ptrtoint ptr %120 to i64
  %122 = and i64 %121, 31
  %123 = sub nsw i64 0, %122
  %124 = getelementptr inbounds i8, ptr %120, i64 %123
  %125 = load ptr, ptr %95, align 8, !tbaa !42
  %126 = sext i32 %97 to i64
  %127 = shl nsw i64 %126, 3
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %124, ptr align 1 %125, i64 %127, i1 false)
  %128 = icmp eq i32 %101, 0
  br i1 %128, label %134, label %129

129:                                              ; preds = %103
  %130 = getelementptr inbounds %class.ResizeArrayRaw.23, ptr %95, i64 0, i32 1
  %131 = load ptr, ptr %130, align 8, !tbaa !43
  %132 = icmp eq ptr %131, null
  br i1 %132, label %134, label %133

133:                                              ; preds = %129
  tail call void @_ZdaPv(ptr noundef nonnull %131) #10
  br label %134

134:                                              ; preds = %133, %129, %103
  %135 = getelementptr inbounds %class.ResizeArrayRaw.23, ptr %95, i64 0, i32 1
  store ptr %119, ptr %135, align 8, !tbaa !43
  store ptr %124, ptr %95, align 8, !tbaa !42
  store i32 %115, ptr %100, align 4, !tbaa !39
  %136 = load ptr, ptr %94, align 8, !tbaa !35
  br label %137

137:                                              ; preds = %91, %99, %134
  %138 = phi ptr [ %95, %91 ], [ %95, %99 ], [ %136, %134 ]
  store i32 %47, ptr %96, align 8, !tbaa !37
  %139 = load ptr, ptr %138, align 8, !tbaa !42
  %140 = getelementptr inbounds i32, ptr %139, i64 1
  %141 = icmp eq i32 %10, 0
  %142 = icmp ne i32 %12, 0
  %143 = select i1 %141, i1 %142, i1 false
  %144 = select i1 %143, i32 0, i32 %47
  %145 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %46, i64 0, i32 2, i32 1
  %146 = load ptr, ptr %145, align 8, !tbaa !25
  %147 = getelementptr inbounds %class.ResizeArrayRaw, ptr %146, i64 0, i32 2
  %148 = load i32, ptr %147, align 8, !tbaa !27
  %149 = icmp slt i32 %148, %144
  br i1 %149, label %150, label %188

150:                                              ; preds = %137
  %151 = getelementptr inbounds %class.ResizeArrayRaw, ptr %146, i64 0, i32 3
  %152 = load i32, ptr %151, align 4, !tbaa !30
  %153 = icmp slt i32 %152, %144
  br i1 %153, label %154, label %188

154:                                              ; preds = %150
  %155 = sitofp i32 %152 to float
  %156 = getelementptr inbounds %class.ResizeArrayRaw, ptr %146, i64 0, i32 5
  %157 = load float, ptr %156, align 4, !tbaa !31
  %158 = fmul float %157, %155
  %159 = fptosi float %158 to i32
  %160 = tail call i32 @llvm.smax.i32(i32 %159, i32 %144)
  %161 = sub nsw i32 %160, %152
  %162 = getelementptr inbounds %class.ResizeArrayRaw, ptr %146, i64 0, i32 6
  %163 = load i32, ptr %162, align 8, !tbaa !32
  %164 = icmp slt i32 %161, %163
  %165 = add nsw i32 %163, %152
  %166 = select i1 %164, i32 %165, i32 %160
  %167 = sext i32 %166 to i64
  %168 = shl nsw i64 %167, 1
  %169 = add nsw i64 %168, 31
  %170 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %169) #9
  %171 = getelementptr inbounds i8, ptr %170, i64 31
  %172 = ptrtoint ptr %171 to i64
  %173 = and i64 %172, 31
  %174 = sub nsw i64 0, %173
  %175 = getelementptr inbounds i8, ptr %171, i64 %174
  %176 = load ptr, ptr %146, align 8, !tbaa !33
  %177 = sext i32 %148 to i64
  %178 = shl nsw i64 %177, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %175, ptr align 1 %176, i64 %178, i1 false)
  %179 = icmp eq i32 %152, 0
  br i1 %179, label %185, label %180

180:                                              ; preds = %154
  %181 = getelementptr inbounds %class.ResizeArrayRaw, ptr %146, i64 0, i32 1
  %182 = load ptr, ptr %181, align 8, !tbaa !34
  %183 = icmp eq ptr %182, null
  br i1 %183, label %185, label %184

184:                                              ; preds = %180
  tail call void @_ZdaPv(ptr noundef nonnull %182) #10
  br label %185

185:                                              ; preds = %184, %180, %154
  %186 = getelementptr inbounds %class.ResizeArrayRaw, ptr %146, i64 0, i32 1
  store ptr %170, ptr %186, align 8, !tbaa !34
  store ptr %175, ptr %146, align 8, !tbaa !33
  store i32 %166, ptr %151, align 4, !tbaa !30
  %187 = load ptr, ptr %145, align 8, !tbaa !25
  br label %188

188:                                              ; preds = %137, %150, %185
  %189 = phi ptr [ %146, %137 ], [ %146, %150 ], [ %187, %185 ]
  store i32 %144, ptr %147, align 8, !tbaa !27
  %190 = load ptr, ptr %189, align 8, !tbaa !33
  %191 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %46, i64 0, i32 3, i32 1
  %192 = load ptr, ptr %191, align 8, !tbaa !25
  %193 = getelementptr inbounds %class.ResizeArrayRaw, ptr %192, i64 0, i32 2
  %194 = load i32, ptr %193, align 8, !tbaa !27
  %195 = icmp slt i32 %194, %144
  br i1 %195, label %196, label %234

196:                                              ; preds = %188
  %197 = getelementptr inbounds %class.ResizeArrayRaw, ptr %192, i64 0, i32 3
  %198 = load i32, ptr %197, align 4, !tbaa !30
  %199 = icmp slt i32 %198, %144
  br i1 %199, label %200, label %234

200:                                              ; preds = %196
  %201 = sitofp i32 %198 to float
  %202 = getelementptr inbounds %class.ResizeArrayRaw, ptr %192, i64 0, i32 5
  %203 = load float, ptr %202, align 4, !tbaa !31
  %204 = fmul float %203, %201
  %205 = fptosi float %204 to i32
  %206 = tail call i32 @llvm.smax.i32(i32 %205, i32 %144)
  %207 = sub nsw i32 %206, %198
  %208 = getelementptr inbounds %class.ResizeArrayRaw, ptr %192, i64 0, i32 6
  %209 = load i32, ptr %208, align 8, !tbaa !32
  %210 = icmp slt i32 %207, %209
  %211 = add nsw i32 %209, %198
  %212 = select i1 %210, i32 %211, i32 %206
  %213 = sext i32 %212 to i64
  %214 = shl nsw i64 %213, 1
  %215 = add nsw i64 %214, 31
  %216 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %215) #9
  %217 = getelementptr inbounds i8, ptr %216, i64 31
  %218 = ptrtoint ptr %217 to i64
  %219 = and i64 %218, 31
  %220 = sub nsw i64 0, %219
  %221 = getelementptr inbounds i8, ptr %217, i64 %220
  %222 = load ptr, ptr %192, align 8, !tbaa !33
  %223 = sext i32 %194 to i64
  %224 = shl nsw i64 %223, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %221, ptr align 1 %222, i64 %224, i1 false)
  %225 = icmp eq i32 %198, 0
  br i1 %225, label %231, label %226

226:                                              ; preds = %200
  %227 = getelementptr inbounds %class.ResizeArrayRaw, ptr %192, i64 0, i32 1
  %228 = load ptr, ptr %227, align 8, !tbaa !34
  %229 = icmp eq ptr %228, null
  br i1 %229, label %231, label %230

230:                                              ; preds = %226
  tail call void @_ZdaPv(ptr noundef nonnull %228) #10
  br label %231

231:                                              ; preds = %230, %226, %200
  %232 = getelementptr inbounds %class.ResizeArrayRaw, ptr %192, i64 0, i32 1
  store ptr %216, ptr %232, align 8, !tbaa !34
  store ptr %221, ptr %192, align 8, !tbaa !33
  store i32 %212, ptr %197, align 4, !tbaa !30
  %233 = load ptr, ptr %191, align 8, !tbaa !25
  br label %234

234:                                              ; preds = %188, %196, %231
  %235 = phi ptr [ %192, %188 ], [ %192, %196 ], [ %233, %231 ]
  store i32 %144, ptr %193, align 8, !tbaa !27
  %236 = load ptr, ptr %235, align 8, !tbaa !33
  %237 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %46, i64 0, i32 4, i32 1
  %238 = load ptr, ptr %237, align 8, !tbaa !25
  %239 = getelementptr inbounds %class.ResizeArrayRaw, ptr %238, i64 0, i32 2
  %240 = load i32, ptr %239, align 8, !tbaa !27
  %241 = icmp slt i32 %240, %144
  br i1 %241, label %242, label %280

242:                                              ; preds = %234
  %243 = getelementptr inbounds %class.ResizeArrayRaw, ptr %238, i64 0, i32 3
  %244 = load i32, ptr %243, align 4, !tbaa !30
  %245 = icmp slt i32 %244, %144
  br i1 %245, label %246, label %280

246:                                              ; preds = %242
  %247 = sitofp i32 %244 to float
  %248 = getelementptr inbounds %class.ResizeArrayRaw, ptr %238, i64 0, i32 5
  %249 = load float, ptr %248, align 4, !tbaa !31
  %250 = fmul float %249, %247
  %251 = fptosi float %250 to i32
  %252 = tail call i32 @llvm.smax.i32(i32 %251, i32 %144)
  %253 = sub nsw i32 %252, %244
  %254 = getelementptr inbounds %class.ResizeArrayRaw, ptr %238, i64 0, i32 6
  %255 = load i32, ptr %254, align 8, !tbaa !32
  %256 = icmp slt i32 %253, %255
  %257 = add nsw i32 %255, %244
  %258 = select i1 %256, i32 %257, i32 %252
  %259 = sext i32 %258 to i64
  %260 = shl nsw i64 %259, 1
  %261 = add nsw i64 %260, 31
  %262 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %261) #9
  %263 = getelementptr inbounds i8, ptr %262, i64 31
  %264 = ptrtoint ptr %263 to i64
  %265 = and i64 %264, 31
  %266 = sub nsw i64 0, %265
  %267 = getelementptr inbounds i8, ptr %263, i64 %266
  %268 = load ptr, ptr %238, align 8, !tbaa !33
  %269 = sext i32 %240 to i64
  %270 = shl nsw i64 %269, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %267, ptr align 1 %268, i64 %270, i1 false)
  %271 = icmp eq i32 %244, 0
  br i1 %271, label %277, label %272

272:                                              ; preds = %246
  %273 = getelementptr inbounds %class.ResizeArrayRaw, ptr %238, i64 0, i32 1
  %274 = load ptr, ptr %273, align 8, !tbaa !34
  %275 = icmp eq ptr %274, null
  br i1 %275, label %277, label %276

276:                                              ; preds = %272
  tail call void @_ZdaPv(ptr noundef nonnull %274) #10
  br label %277

277:                                              ; preds = %276, %272, %246
  %278 = getelementptr inbounds %class.ResizeArrayRaw, ptr %238, i64 0, i32 1
  store ptr %262, ptr %278, align 8, !tbaa !34
  store ptr %267, ptr %238, align 8, !tbaa !33
  store i32 %258, ptr %243, align 4, !tbaa !30
  %279 = load ptr, ptr %237, align 8, !tbaa !25
  br label %280

280:                                              ; preds = %234, %242, %277
  %281 = phi ptr [ %238, %234 ], [ %238, %242 ], [ %279, %277 ]
  store i32 %144, ptr %239, align 8, !tbaa !27
  %282 = load ptr, ptr %281, align 8, !tbaa !33
  %283 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %46, i64 0, i32 5, i32 1
  %284 = load ptr, ptr %283, align 8, !tbaa !25
  %285 = getelementptr inbounds %class.ResizeArrayRaw, ptr %284, i64 0, i32 2
  %286 = load i32, ptr %285, align 8, !tbaa !27
  %287 = icmp slt i32 %286, %144
  br i1 %287, label %288, label %326

288:                                              ; preds = %280
  %289 = getelementptr inbounds %class.ResizeArrayRaw, ptr %284, i64 0, i32 3
  %290 = load i32, ptr %289, align 4, !tbaa !30
  %291 = icmp slt i32 %290, %144
  br i1 %291, label %292, label %326

292:                                              ; preds = %288
  %293 = sitofp i32 %290 to float
  %294 = getelementptr inbounds %class.ResizeArrayRaw, ptr %284, i64 0, i32 5
  %295 = load float, ptr %294, align 4, !tbaa !31
  %296 = fmul float %295, %293
  %297 = fptosi float %296 to i32
  %298 = tail call i32 @llvm.smax.i32(i32 %297, i32 %144)
  %299 = sub nsw i32 %298, %290
  %300 = getelementptr inbounds %class.ResizeArrayRaw, ptr %284, i64 0, i32 6
  %301 = load i32, ptr %300, align 8, !tbaa !32
  %302 = icmp slt i32 %299, %301
  %303 = add nsw i32 %301, %290
  %304 = select i1 %302, i32 %303, i32 %298
  %305 = sext i32 %304 to i64
  %306 = shl nsw i64 %305, 1
  %307 = add nsw i64 %306, 31
  %308 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %307) #9
  %309 = getelementptr inbounds i8, ptr %308, i64 31
  %310 = ptrtoint ptr %309 to i64
  %311 = and i64 %310, 31
  %312 = sub nsw i64 0, %311
  %313 = getelementptr inbounds i8, ptr %309, i64 %312
  %314 = load ptr, ptr %284, align 8, !tbaa !33
  %315 = sext i32 %286 to i64
  %316 = shl nsw i64 %315, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %313, ptr align 1 %314, i64 %316, i1 false)
  %317 = icmp eq i32 %290, 0
  br i1 %317, label %323, label %318

318:                                              ; preds = %292
  %319 = getelementptr inbounds %class.ResizeArrayRaw, ptr %284, i64 0, i32 1
  %320 = load ptr, ptr %319, align 8, !tbaa !34
  %321 = icmp eq ptr %320, null
  br i1 %321, label %323, label %322

322:                                              ; preds = %318
  tail call void @_ZdaPv(ptr noundef nonnull %320) #10
  br label %323

323:                                              ; preds = %322, %318, %292
  %324 = getelementptr inbounds %class.ResizeArrayRaw, ptr %284, i64 0, i32 1
  store ptr %308, ptr %324, align 8, !tbaa !34
  store ptr %313, ptr %284, align 8, !tbaa !33
  store i32 %304, ptr %289, align 4, !tbaa !30
  %325 = load ptr, ptr %283, align 8, !tbaa !25
  br label %326

326:                                              ; preds = %280, %288, %323
  %327 = phi ptr [ %284, %280 ], [ %284, %288 ], [ %325, %323 ]
  store i32 %144, ptr %285, align 8, !tbaa !27
  %328 = load ptr, ptr %327, align 8, !tbaa !33
  %329 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %46, i64 0, i32 6, i32 1
  %330 = load ptr, ptr %329, align 8, !tbaa !25
  %331 = getelementptr inbounds %class.ResizeArrayRaw, ptr %330, i64 0, i32 2
  %332 = load i32, ptr %331, align 8, !tbaa !27
  %333 = icmp slt i32 %332, %144
  br i1 %333, label %334, label %372

334:                                              ; preds = %326
  %335 = getelementptr inbounds %class.ResizeArrayRaw, ptr %330, i64 0, i32 3
  %336 = load i32, ptr %335, align 4, !tbaa !30
  %337 = icmp slt i32 %336, %144
  br i1 %337, label %338, label %372

338:                                              ; preds = %334
  %339 = sitofp i32 %336 to float
  %340 = getelementptr inbounds %class.ResizeArrayRaw, ptr %330, i64 0, i32 5
  %341 = load float, ptr %340, align 4, !tbaa !31
  %342 = fmul float %341, %339
  %343 = fptosi float %342 to i32
  %344 = tail call i32 @llvm.smax.i32(i32 %343, i32 %144)
  %345 = sub nsw i32 %344, %336
  %346 = getelementptr inbounds %class.ResizeArrayRaw, ptr %330, i64 0, i32 6
  %347 = load i32, ptr %346, align 8, !tbaa !32
  %348 = icmp slt i32 %345, %347
  %349 = add nsw i32 %347, %336
  %350 = select i1 %348, i32 %349, i32 %344
  %351 = sext i32 %350 to i64
  %352 = shl nsw i64 %351, 1
  %353 = add nsw i64 %352, 31
  %354 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %353) #9
  %355 = getelementptr inbounds i8, ptr %354, i64 31
  %356 = ptrtoint ptr %355 to i64
  %357 = and i64 %356, 31
  %358 = sub nsw i64 0, %357
  %359 = getelementptr inbounds i8, ptr %355, i64 %358
  %360 = load ptr, ptr %330, align 8, !tbaa !33
  %361 = sext i32 %332 to i64
  %362 = shl nsw i64 %361, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %359, ptr align 1 %360, i64 %362, i1 false)
  %363 = icmp eq i32 %336, 0
  br i1 %363, label %369, label %364

364:                                              ; preds = %338
  %365 = getelementptr inbounds %class.ResizeArrayRaw, ptr %330, i64 0, i32 1
  %366 = load ptr, ptr %365, align 8, !tbaa !34
  %367 = icmp eq ptr %366, null
  br i1 %367, label %369, label %368

368:                                              ; preds = %364
  tail call void @_ZdaPv(ptr noundef nonnull %366) #10
  br label %369

369:                                              ; preds = %368, %364, %338
  %370 = getelementptr inbounds %class.ResizeArrayRaw, ptr %330, i64 0, i32 1
  store ptr %354, ptr %370, align 8, !tbaa !34
  store ptr %359, ptr %330, align 8, !tbaa !33
  store i32 %350, ptr %335, align 4, !tbaa !30
  %371 = load ptr, ptr %329, align 8, !tbaa !25
  br label %372

372:                                              ; preds = %326, %334, %369
  %373 = phi ptr [ %330, %326 ], [ %330, %334 ], [ %371, %369 ]
  store i32 %144, ptr %331, align 8, !tbaa !27
  %374 = load ptr, ptr %373, align 8, !tbaa !33
  %375 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %46, i64 0, i32 15, i32 1
  %376 = load ptr, ptr %375, align 8, !tbaa !25
  %377 = getelementptr inbounds %class.ResizeArrayRaw, ptr %376, i64 0, i32 2
  %378 = load i32, ptr %377, align 8, !tbaa !27
  %379 = icmp slt i32 %378, %144
  br i1 %379, label %380, label %418

380:                                              ; preds = %372
  %381 = getelementptr inbounds %class.ResizeArrayRaw, ptr %376, i64 0, i32 3
  %382 = load i32, ptr %381, align 4, !tbaa !30
  %383 = icmp slt i32 %382, %144
  br i1 %383, label %384, label %418

384:                                              ; preds = %380
  %385 = sitofp i32 %382 to float
  %386 = getelementptr inbounds %class.ResizeArrayRaw, ptr %376, i64 0, i32 5
  %387 = load float, ptr %386, align 4, !tbaa !31
  %388 = fmul float %387, %385
  %389 = fptosi float %388 to i32
  %390 = tail call i32 @llvm.smax.i32(i32 %389, i32 %144)
  %391 = sub nsw i32 %390, %382
  %392 = getelementptr inbounds %class.ResizeArrayRaw, ptr %376, i64 0, i32 6
  %393 = load i32, ptr %392, align 8, !tbaa !32
  %394 = icmp slt i32 %391, %393
  %395 = add nsw i32 %393, %382
  %396 = select i1 %394, i32 %395, i32 %390
  %397 = sext i32 %396 to i64
  %398 = shl nsw i64 %397, 1
  %399 = add nsw i64 %398, 31
  %400 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %399) #9
  %401 = getelementptr inbounds i8, ptr %400, i64 31
  %402 = ptrtoint ptr %401 to i64
  %403 = and i64 %402, 31
  %404 = sub nsw i64 0, %403
  %405 = getelementptr inbounds i8, ptr %401, i64 %404
  %406 = load ptr, ptr %376, align 8, !tbaa !33
  %407 = sext i32 %378 to i64
  %408 = shl nsw i64 %407, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %405, ptr align 1 %406, i64 %408, i1 false)
  %409 = icmp eq i32 %382, 0
  br i1 %409, label %415, label %410

410:                                              ; preds = %384
  %411 = getelementptr inbounds %class.ResizeArrayRaw, ptr %376, i64 0, i32 1
  %412 = load ptr, ptr %411, align 8, !tbaa !34
  %413 = icmp eq ptr %412, null
  br i1 %413, label %415, label %414

414:                                              ; preds = %410
  tail call void @_ZdaPv(ptr noundef nonnull %412) #10
  br label %415

415:                                              ; preds = %414, %410, %384
  %416 = getelementptr inbounds %class.ResizeArrayRaw, ptr %376, i64 0, i32 1
  store ptr %400, ptr %416, align 8, !tbaa !34
  store ptr %405, ptr %376, align 8, !tbaa !33
  store i32 %396, ptr %381, align 4, !tbaa !30
  %417 = load ptr, ptr %375, align 8, !tbaa !25
  br label %418

418:                                              ; preds = %372, %380, %415
  %419 = phi ptr [ %376, %372 ], [ %376, %380 ], [ %417, %415 ]
  store i32 %144, ptr %377, align 8, !tbaa !27
  %420 = load ptr, ptr %419, align 8, !tbaa !33
  %421 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %46, i64 0, i32 16, i32 1
  %422 = load ptr, ptr %421, align 8, !tbaa !25
  %423 = getelementptr inbounds %class.ResizeArrayRaw, ptr %422, i64 0, i32 2
  %424 = load i32, ptr %423, align 8, !tbaa !27
  %425 = icmp slt i32 %424, %144
  br i1 %425, label %426, label %464

426:                                              ; preds = %418
  %427 = getelementptr inbounds %class.ResizeArrayRaw, ptr %422, i64 0, i32 3
  %428 = load i32, ptr %427, align 4, !tbaa !30
  %429 = icmp slt i32 %428, %144
  br i1 %429, label %430, label %464

430:                                              ; preds = %426
  %431 = sitofp i32 %428 to float
  %432 = getelementptr inbounds %class.ResizeArrayRaw, ptr %422, i64 0, i32 5
  %433 = load float, ptr %432, align 4, !tbaa !31
  %434 = fmul float %433, %431
  %435 = fptosi float %434 to i32
  %436 = tail call i32 @llvm.smax.i32(i32 %435, i32 %144)
  %437 = sub nsw i32 %436, %428
  %438 = getelementptr inbounds %class.ResizeArrayRaw, ptr %422, i64 0, i32 6
  %439 = load i32, ptr %438, align 8, !tbaa !32
  %440 = icmp slt i32 %437, %439
  %441 = add nsw i32 %439, %428
  %442 = select i1 %440, i32 %441, i32 %436
  %443 = sext i32 %442 to i64
  %444 = shl nsw i64 %443, 1
  %445 = add nsw i64 %444, 31
  %446 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %445) #9
  %447 = getelementptr inbounds i8, ptr %446, i64 31
  %448 = ptrtoint ptr %447 to i64
  %449 = and i64 %448, 31
  %450 = sub nsw i64 0, %449
  %451 = getelementptr inbounds i8, ptr %447, i64 %450
  %452 = load ptr, ptr %422, align 8, !tbaa !33
  %453 = sext i32 %424 to i64
  %454 = shl nsw i64 %453, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %451, ptr align 1 %452, i64 %454, i1 false)
  %455 = icmp eq i32 %428, 0
  br i1 %455, label %461, label %456

456:                                              ; preds = %430
  %457 = getelementptr inbounds %class.ResizeArrayRaw, ptr %422, i64 0, i32 1
  %458 = load ptr, ptr %457, align 8, !tbaa !34
  %459 = icmp eq ptr %458, null
  br i1 %459, label %461, label %460

460:                                              ; preds = %456
  tail call void @_ZdaPv(ptr noundef nonnull %458) #10
  br label %461

461:                                              ; preds = %460, %456, %430
  %462 = getelementptr inbounds %class.ResizeArrayRaw, ptr %422, i64 0, i32 1
  store ptr %446, ptr %462, align 8, !tbaa !34
  store ptr %451, ptr %422, align 8, !tbaa !33
  store i32 %442, ptr %427, align 4, !tbaa !30
  %463 = load ptr, ptr %421, align 8, !tbaa !25
  br label %464

464:                                              ; preds = %418, %426, %461
  %465 = phi ptr [ %422, %418 ], [ %422, %426 ], [ %463, %461 ]
  store i32 %144, ptr %423, align 8, !tbaa !27
  %466 = load ptr, ptr %465, align 8, !tbaa !33
  br i1 %143, label %608, label %467

467:                                              ; preds = %464
  %468 = icmp sgt i32 %37, 0
  br i1 %468, label %469, label %599

469:                                              ; preds = %467
  %470 = zext i32 %37 to i64
  %471 = and i64 %470, 1
  %472 = icmp eq i32 %37, 1
  br i1 %472, label %505, label %473

473:                                              ; preds = %469
  %474 = and i64 %470, 4294967294
  br label %475

475:                                              ; preds = %500, %473
  %476 = phi i64 [ 0, %473 ], [ %502, %500 ]
  %477 = phi i32 [ 0, %473 ], [ %501, %500 ]
  %478 = phi i64 [ 0, %473 ], [ %503, %500 ]
  %479 = getelementptr inbounds %struct.CompAtom, ptr %40, i64 %476, i32 4
  %480 = load i8, ptr %479, align 1
  %481 = and i8 %480, 7
  %482 = icmp eq i8 %481, 0
  br i1 %482, label %488, label %483

483:                                              ; preds = %475
  %484 = trunc i64 %476 to i16
  %485 = add nsw i32 %477, 1
  %486 = sext i32 %477 to i64
  %487 = getelementptr inbounds i16, ptr %190, i64 %486
  store i16 %484, ptr %487, align 2, !tbaa !44
  br label %488

488:                                              ; preds = %475, %483
  %489 = phi i32 [ %485, %483 ], [ %477, %475 ]
  %490 = or i64 %476, 1
  %491 = getelementptr inbounds %struct.CompAtom, ptr %40, i64 %490, i32 4
  %492 = load i8, ptr %491, align 1
  %493 = and i8 %492, 7
  %494 = icmp eq i8 %493, 0
  br i1 %494, label %500, label %495

495:                                              ; preds = %488
  %496 = trunc i64 %490 to i16
  %497 = add nsw i32 %489, 1
  %498 = sext i32 %489 to i64
  %499 = getelementptr inbounds i16, ptr %190, i64 %498
  store i16 %496, ptr %499, align 2, !tbaa !44
  br label %500

500:                                              ; preds = %495, %488
  %501 = phi i32 [ %497, %495 ], [ %489, %488 ]
  %502 = add nuw nsw i64 %476, 2
  %503 = add i64 %478, 2
  %504 = icmp eq i64 %503, %474
  br i1 %504, label %505, label %475

505:                                              ; preds = %500, %469
  %506 = phi i32 [ undef, %469 ], [ %501, %500 ]
  %507 = phi i64 [ 0, %469 ], [ %502, %500 ]
  %508 = phi i32 [ 0, %469 ], [ %501, %500 ]
  %509 = icmp eq i64 %471, 0
  br i1 %509, label %520, label %510

510:                                              ; preds = %505
  %511 = getelementptr inbounds %struct.CompAtom, ptr %40, i64 %507, i32 4
  %512 = load i8, ptr %511, align 1
  %513 = and i8 %512, 7
  %514 = icmp eq i8 %513, 0
  br i1 %514, label %520, label %515

515:                                              ; preds = %510
  %516 = trunc i64 %507 to i16
  %517 = add nsw i32 %508, 1
  %518 = sext i32 %508 to i64
  %519 = getelementptr inbounds i16, ptr %190, i64 %518
  store i16 %516, ptr %519, align 2, !tbaa !44
  br label %520

520:                                              ; preds = %510, %515, %505
  %521 = phi i32 [ %506, %505 ], [ %517, %515 ], [ %508, %510 ]
  %522 = icmp eq i32 %521, 0
  br i1 %522, label %530, label %523

523:                                              ; preds = %520
  %524 = add nsw i32 %521, -1
  %525 = sext i32 %524 to i64
  %526 = getelementptr inbounds i16, ptr %190, i64 %525
  %527 = load i16, ptr %526, align 2, !tbaa !44
  %528 = sext i32 %521 to i64
  %529 = getelementptr inbounds i16, ptr %190, i64 %528
  store i16 %527, ptr %529, align 2, !tbaa !44
  br label %530

530:                                              ; preds = %523, %520
  %531 = load i32, ptr @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4, !tbaa !5
  %532 = icmp ne i32 %531, 0
  %533 = icmp sgt i32 %521, 0
  %534 = and i1 %532, %533
  br i1 %534, label %535, label %599

535:                                              ; preds = %530
  %536 = zext i32 %521 to i64
  %537 = and i64 %536, 1
  %538 = icmp eq i32 %521, 1
  br i1 %538, label %573, label %539

539:                                              ; preds = %535
  %540 = and i64 %536, 4294967294
  br label %541

541:                                              ; preds = %568, %539
  %542 = phi i64 [ 0, %539 ], [ %570, %568 ]
  %543 = phi i32 [ 0, %539 ], [ %569, %568 ]
  %544 = phi i64 [ 0, %539 ], [ %571, %568 ]
  %545 = getelementptr inbounds i16, ptr %190, i64 %542
  %546 = load i16, ptr %545, align 2, !tbaa !44
  %547 = zext i16 %546 to i64
  %548 = getelementptr inbounds %struct.CompAtomExt, ptr %44, i64 %547
  %549 = load i32, ptr %548, align 4
  %550 = icmp sgt i32 %549, -1
  br i1 %550, label %551, label %555

551:                                              ; preds = %541
  %552 = add nsw i32 %543, 1
  %553 = sext i32 %543 to i64
  %554 = getelementptr inbounds i16, ptr %236, i64 %553
  store i16 %546, ptr %554, align 2, !tbaa !44
  br label %555

555:                                              ; preds = %541, %551
  %556 = phi i32 [ %543, %541 ], [ %552, %551 ]
  %557 = or i64 %542, 1
  %558 = getelementptr inbounds i16, ptr %190, i64 %557
  %559 = load i16, ptr %558, align 2, !tbaa !44
  %560 = zext i16 %559 to i64
  %561 = getelementptr inbounds %struct.CompAtomExt, ptr %44, i64 %560
  %562 = load i32, ptr %561, align 4
  %563 = icmp sgt i32 %562, -1
  br i1 %563, label %564, label %568

564:                                              ; preds = %555
  %565 = add nsw i32 %556, 1
  %566 = sext i32 %556 to i64
  %567 = getelementptr inbounds i16, ptr %236, i64 %566
  store i16 %559, ptr %567, align 2, !tbaa !44
  br label %568

568:                                              ; preds = %564, %555
  %569 = phi i32 [ %556, %555 ], [ %565, %564 ]
  %570 = add nuw nsw i64 %542, 2
  %571 = add i64 %544, 2
  %572 = icmp eq i64 %571, %540
  br i1 %572, label %573, label %541

573:                                              ; preds = %568, %535
  %574 = phi i32 [ undef, %535 ], [ %569, %568 ]
  %575 = phi i64 [ 0, %535 ], [ %570, %568 ]
  %576 = phi i32 [ 0, %535 ], [ %569, %568 ]
  %577 = icmp eq i64 %537, 0
  br i1 %577, label %589, label %578

578:                                              ; preds = %573
  %579 = getelementptr inbounds i16, ptr %190, i64 %575
  %580 = load i16, ptr %579, align 2, !tbaa !44
  %581 = zext i16 %580 to i64
  %582 = getelementptr inbounds %struct.CompAtomExt, ptr %44, i64 %581
  %583 = load i32, ptr %582, align 4
  %584 = icmp sgt i32 %583, -1
  br i1 %584, label %585, label %589

585:                                              ; preds = %578
  %586 = add nsw i32 %576, 1
  %587 = sext i32 %576 to i64
  %588 = getelementptr inbounds i16, ptr %236, i64 %587
  store i16 %580, ptr %588, align 2, !tbaa !44
  br label %589

589:                                              ; preds = %578, %585, %573
  %590 = phi i32 [ %574, %573 ], [ %576, %578 ], [ %586, %585 ]
  %591 = icmp eq i32 %590, 0
  br i1 %591, label %599, label %592

592:                                              ; preds = %589
  %593 = add nsw i32 %590, -1
  %594 = sext i32 %593 to i64
  %595 = getelementptr inbounds i16, ptr %236, i64 %594
  %596 = load i16, ptr %595, align 2, !tbaa !44
  %597 = sext i32 %590 to i64
  %598 = getelementptr inbounds i16, ptr %236, i64 %597
  store i16 %596, ptr %598, align 2, !tbaa !44
  br label %599

599:                                              ; preds = %467, %530, %592, %589
  %600 = phi i32 [ %521, %592 ], [ %521, %589 ], [ %521, %530 ], [ 0, %467 ]
  %601 = phi i32 [ %590, %592 ], [ 0, %589 ], [ 0, %530 ], [ 0, %467 ]
  %602 = load i32, ptr %13, align 8, !tbaa !17
  %603 = add nsw i32 %602, 1
  store i32 %603, ptr %13, align 8, !tbaa !17
  %604 = trunc i32 %35 to i16
  %605 = load ptr, ptr %8, align 8, !tbaa !46
  %606 = sext i32 %602 to i64
  %607 = getelementptr inbounds i16, ptr %605, i64 %606
  store i16 %604, ptr %607, align 2, !tbaa !44
  br label %618

608:                                              ; preds = %464
  %609 = load ptr, ptr %8, align 8, !tbaa !46
  %610 = load i32, ptr %13, align 8, !tbaa !17
  %611 = add nsw i32 %610, 1
  store i32 %611, ptr %13, align 8, !tbaa !17
  %612 = sext i32 %610 to i64
  %613 = getelementptr inbounds i16, ptr %609, i64 %612
  %614 = load i16, ptr %613, align 2, !tbaa !44
  %615 = zext i16 %614 to i32
  %616 = icmp eq i32 %35, %615
  br i1 %616, label %618, label %617

617:                                              ; preds = %608
  tail call void @_Z8NAMD_bugPKc(ptr noundef nonnull @.str)
  br label %618

618:                                              ; preds = %608, %617, %599
  %619 = phi i32 [ 0, %617 ], [ 0, %608 ], [ %600, %599 ]
  %620 = phi i32 [ 0, %617 ], [ 0, %608 ], [ %601, %599 ]
  %621 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %46, i64 0, i32 17, i32 1
  %622 = load ptr, ptr %621, align 8, !tbaa !172
  tail call void @_ZN14ResizeArrayRawI6VectorE6resizeEi(ptr noundef nonnull align 8 dereferenceable(36) %622, i32 noundef %35)
  %623 = load ptr, ptr %621, align 8, !tbaa !172
  %624 = load ptr, ptr %623, align 8, !tbaa !174
  %625 = sext i32 %35 to i64
  %626 = mul nsw i64 %625, 24
  tail call void @llvm.memset.p0.i64(ptr align 1 %624, i8 0, i64 %626, i1 false)
  %627 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 18
  %628 = load i32, ptr %627, align 4, !tbaa !48
  %629 = add nsw i32 %628, -1
  %630 = add nsw i32 %35, -1
  %631 = icmp sgt i32 %35, 1
  br i1 %631, label %632, label %2427

632:                                              ; preds = %618
  %633 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 16
  %634 = load i32, ptr %633, align 4, !tbaa !47
  %635 = getelementptr inbounds %class.Molecule, ptr %26, i64 0, i32 1
  %636 = getelementptr inbounds %class.Molecule, ptr %26, i64 0, i32 4
  %637 = getelementptr inbounds %class.Molecule, ptr %26, i64 0, i32 2
  %638 = getelementptr inbounds %class.Molecule, ptr %26, i64 0, i32 3
  %639 = ptrtoint ptr %420 to i64
  %640 = add nsw i32 %37, 10
  %641 = getelementptr inbounds %class.Pairlists, ptr %8, i64 0, i32 2
  %642 = ptrtoint ptr %466 to i64
  %643 = ptrtoint ptr %328 to i64
  %644 = ptrtoint ptr %374 to i64
  %645 = getelementptr inbounds %class.LJTable, ptr %25, i64 0, i32 1
  %646 = getelementptr inbounds %class.LJTable, ptr %25, i64 0, i32 2
  %647 = fneg double %28
  %648 = getelementptr inbounds double, ptr %6, i64 26
  %649 = getelementptr inbounds double, ptr %6, i64 28
  %650 = getelementptr inbounds double, ptr %6, i64 29
  %651 = getelementptr inbounds double, ptr %6, i64 31
  %652 = fadd double %29, -1.000000e+00
  %653 = fadd double %652, 1.000000e+00
  %654 = sext i32 %619 to i64
  %655 = sext i32 %620 to i64
  %656 = insertelement <2 x double> poison, double %23, i64 0
  %657 = shufflevector <2 x double> %656, <2 x double> poison, <2 x i32> zeroinitializer
  %658 = getelementptr inbounds i16, ptr %466, i64 1
  %659 = getelementptr inbounds i16, ptr %466, i64 1
  br label %660

660:                                              ; preds = %632, %2412
  %661 = phi i32 [ 0, %632 ], [ %2423, %2412 ]
  %662 = phi i32 [ 0, %632 ], [ %2425, %2412 ]
  %663 = phi ptr [ null, %632 ], [ %2421, %2412 ]
  %664 = phi ptr [ null, %632 ], [ %2420, %2412 ]
  %665 = phi ptr [ null, %632 ], [ %2419, %2412 ]
  %666 = phi i32 [ 0, %632 ], [ %2418, %2412 ]
  %667 = phi i32 [ 0, %632 ], [ %2417, %2412 ]
  %668 = phi i32 [ 0, %632 ], [ %2416, %2412 ]
  %669 = phi i32 [ 0, %632 ], [ %2415, %2412 ]
  %670 = phi i32 [ 0, %632 ], [ %2414, %2412 ]
  %671 = phi i32 [ %634, %632 ], [ %2413, %2412 ]
  %672 = phi <2 x double> [ zeroinitializer, %632 ], [ %2424, %2412 ]
  %673 = sext i32 %662 to i64
  %674 = getelementptr inbounds %struct.CompAtom, ptr %38, i64 %673
  %675 = getelementptr inbounds %struct.CompAtomExt, ptr %42, i64 %673
  %676 = getelementptr inbounds %struct.CompAtom, ptr %38, i64 %673, i32 4
  %677 = load i8, ptr %676, align 1
  %678 = lshr i8 %677, 3
  %679 = and i8 %678, 15
  %680 = zext i8 %679 to i32
  %681 = icmp eq i8 %679, 0
  br i1 %681, label %688, label %682

682:                                              ; preds = %660
  %683 = icmp eq i32 %671, 0
  br i1 %683, label %688, label %684

684:                                              ; preds = %682
  %685 = add nsw i32 %671, -1
  %686 = add nsw i32 %662, -1
  %687 = add i32 %686, %680
  br label %2412

688:                                              ; preds = %682, %660
  %689 = phi i32 [ %671, %660 ], [ %629, %682 ]
  %690 = load <2 x double>, ptr %674, align 8, !tbaa !19
  %691 = fadd <2 x double> %15, %690
  %692 = getelementptr inbounds %class.Vector, ptr %674, i64 0, i32 2
  %693 = load double, ptr %692, align 8, !tbaa !49
  %694 = fadd double %17, %693
  %695 = add nsw i32 %662, %680
  %696 = select i1 %681, i32 %666, i32 %695
  br i1 %143, label %2047, label %697

697:                                              ; preds = %688
  %698 = load i32, ptr %675, align 4
  %699 = shl i32 %698, 2
  %700 = ashr exact i32 %699, 2
  %701 = load ptr, ptr %635, align 8, !tbaa !51
  %702 = sext i32 %700 to i64
  %703 = getelementptr inbounds %class.ExclusionCheck, ptr %701, i64 %702
  %704 = load i32, ptr %703, align 8, !tbaa !53
  %705 = getelementptr inbounds %class.ExclusionCheck, ptr %701, i64 %702, i32 1
  %706 = load i32, ptr %705, align 4, !tbaa !55
  %707 = getelementptr inbounds %class.ExclusionCheck, ptr %701, i64 %702, i32 2
  %708 = load ptr, ptr %707, align 8, !tbaa !56
  %709 = icmp eq ptr %708, null
  br i1 %709, label %714, label %710

710:                                              ; preds = %697
  %711 = sext i32 %704 to i64
  %712 = sub nsw i64 0, %711
  %713 = getelementptr inbounds i8, ptr %708, i64 %712
  br label %940

714:                                              ; preds = %697
  %715 = icmp eq ptr %663, null
  br i1 %715, label %803, label %716

716:                                              ; preds = %714
  %717 = load i32, ptr %664, align 4, !tbaa !5
  %718 = icmp slt i32 %717, 1
  br i1 %718, label %766, label %719

719:                                              ; preds = %716
  %720 = add nuw i32 %717, 1
  %721 = zext i32 %720 to i64
  %722 = add nsw i64 %721, -1
  %723 = add nsw i64 %721, -2
  %724 = and i64 %722, 3
  %725 = icmp ult i64 %723, 3
  br i1 %725, label %753, label %726

726:                                              ; preds = %719
  %727 = and i64 %722, -4
  br label %728

728:                                              ; preds = %728, %726
  %729 = phi i64 [ 1, %726 ], [ %750, %728 ]
  %730 = phi i64 [ 0, %726 ], [ %751, %728 ]
  %731 = getelementptr inbounds i32, ptr %664, i64 %729
  %732 = load i32, ptr %731, align 4, !tbaa !5
  %733 = sext i32 %732 to i64
  %734 = getelementptr inbounds i8, ptr %663, i64 %733
  store i8 0, ptr %734, align 1, !tbaa !57
  %735 = add nuw nsw i64 %729, 1
  %736 = getelementptr inbounds i32, ptr %664, i64 %735
  %737 = load i32, ptr %736, align 4, !tbaa !5
  %738 = sext i32 %737 to i64
  %739 = getelementptr inbounds i8, ptr %663, i64 %738
  store i8 0, ptr %739, align 1, !tbaa !57
  %740 = add nuw nsw i64 %729, 2
  %741 = getelementptr inbounds i32, ptr %664, i64 %740
  %742 = load i32, ptr %741, align 4, !tbaa !5
  %743 = sext i32 %742 to i64
  %744 = getelementptr inbounds i8, ptr %663, i64 %743
  store i8 0, ptr %744, align 1, !tbaa !57
  %745 = add nuw nsw i64 %729, 3
  %746 = getelementptr inbounds i32, ptr %664, i64 %745
  %747 = load i32, ptr %746, align 4, !tbaa !5
  %748 = sext i32 %747 to i64
  %749 = getelementptr inbounds i8, ptr %663, i64 %748
  store i8 0, ptr %749, align 1, !tbaa !57
  %750 = add nuw nsw i64 %729, 4
  %751 = add i64 %730, 4
  %752 = icmp eq i64 %751, %727
  br i1 %752, label %753, label %728

753:                                              ; preds = %728, %719
  %754 = phi i64 [ 1, %719 ], [ %750, %728 ]
  %755 = icmp eq i64 %724, 0
  br i1 %755, label %766, label %756

756:                                              ; preds = %753, %756
  %757 = phi i64 [ %763, %756 ], [ %754, %753 ]
  %758 = phi i64 [ %764, %756 ], [ 0, %753 ]
  %759 = getelementptr inbounds i32, ptr %664, i64 %757
  %760 = load i32, ptr %759, align 4, !tbaa !5
  %761 = sext i32 %760 to i64
  %762 = getelementptr inbounds i8, ptr %663, i64 %761
  store i8 0, ptr %762, align 1, !tbaa !57
  %763 = add nuw nsw i64 %757, 1
  %764 = add i64 %758, 1
  %765 = icmp eq i64 %764, %724
  br i1 %765, label %766, label %756, !llvm.loop !334

766:                                              ; preds = %753, %756, %716
  %767 = load i32, ptr %665, align 4, !tbaa !5
  %768 = icmp slt i32 %767, 1
  br i1 %768, label %823, label %769

769:                                              ; preds = %766
  %770 = add nuw i32 %767, 1
  %771 = zext i32 %770 to i64
  %772 = add nsw i64 %771, -1
  %773 = add nsw i64 %771, -2
  %774 = and i64 %772, 3
  %775 = icmp ult i64 %773, 3
  br i1 %775, label %810, label %776

776:                                              ; preds = %769
  %777 = and i64 %772, -4
  br label %778

778:                                              ; preds = %778, %776
  %779 = phi i64 [ 1, %776 ], [ %800, %778 ]
  %780 = phi i64 [ 0, %776 ], [ %801, %778 ]
  %781 = getelementptr inbounds i32, ptr %665, i64 %779
  %782 = load i32, ptr %781, align 4, !tbaa !5
  %783 = sext i32 %782 to i64
  %784 = getelementptr inbounds i8, ptr %663, i64 %783
  store i8 0, ptr %784, align 1, !tbaa !57
  %785 = add nuw nsw i64 %779, 1
  %786 = getelementptr inbounds i32, ptr %665, i64 %785
  %787 = load i32, ptr %786, align 4, !tbaa !5
  %788 = sext i32 %787 to i64
  %789 = getelementptr inbounds i8, ptr %663, i64 %788
  store i8 0, ptr %789, align 1, !tbaa !57
  %790 = add nuw nsw i64 %779, 2
  %791 = getelementptr inbounds i32, ptr %665, i64 %790
  %792 = load i32, ptr %791, align 4, !tbaa !5
  %793 = sext i32 %792 to i64
  %794 = getelementptr inbounds i8, ptr %663, i64 %793
  store i8 0, ptr %794, align 1, !tbaa !57
  %795 = add nuw nsw i64 %779, 3
  %796 = getelementptr inbounds i32, ptr %665, i64 %795
  %797 = load i32, ptr %796, align 4, !tbaa !5
  %798 = sext i32 %797 to i64
  %799 = getelementptr inbounds i8, ptr %663, i64 %798
  store i8 0, ptr %799, align 1, !tbaa !57
  %800 = add nuw nsw i64 %779, 4
  %801 = add i64 %780, 4
  %802 = icmp eq i64 %801, %777
  br i1 %802, label %810, label %778

803:                                              ; preds = %714
  %804 = load i32, ptr %636, align 8, !tbaa !60
  %805 = tail call i32 @llvm.smax.i32(i32 %804, i32 -1)
  %806 = sext i32 %805 to i64
  %807 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %806) #9
  %808 = load i32, ptr %636, align 8, !tbaa !60
  %809 = sext i32 %808 to i64
  tail call void @llvm.memset.p0.i64(ptr nonnull align 1 %807, i8 0, i64 %809, i1 false)
  br label %823

810:                                              ; preds = %778, %769
  %811 = phi i64 [ 1, %769 ], [ %800, %778 ]
  %812 = icmp eq i64 %774, 0
  br i1 %812, label %823, label %813

813:                                              ; preds = %810, %813
  %814 = phi i64 [ %820, %813 ], [ %811, %810 ]
  %815 = phi i64 [ %821, %813 ], [ 0, %810 ]
  %816 = getelementptr inbounds i32, ptr %665, i64 %814
  %817 = load i32, ptr %816, align 4, !tbaa !5
  %818 = sext i32 %817 to i64
  %819 = getelementptr inbounds i8, ptr %663, i64 %818
  store i8 0, ptr %819, align 1, !tbaa !57
  %820 = add nuw nsw i64 %814, 1
  %821 = add i64 %815, 1
  %822 = icmp eq i64 %821, %774
  br i1 %822, label %823, label %813, !llvm.loop !335

823:                                              ; preds = %810, %813, %766, %803
  %824 = phi ptr [ %807, %803 ], [ %663, %766 ], [ %663, %813 ], [ %663, %810 ]
  %825 = load i32, ptr %675, align 4
  %826 = shl i32 %825, 2
  %827 = ashr exact i32 %826, 2
  %828 = load ptr, ptr %637, align 8, !tbaa !62
  %829 = sext i32 %827 to i64
  %830 = getelementptr inbounds ptr, ptr %828, i64 %829
  %831 = load ptr, ptr %830, align 8, !tbaa !23
  %832 = load i32, ptr %831, align 4, !tbaa !5
  %833 = icmp slt i32 %832, 1
  br i1 %833, label %886, label %834

834:                                              ; preds = %823
  %835 = add nuw i32 %832, 1
  %836 = zext i32 %835 to i64
  %837 = add nsw i64 %836, -1
  %838 = add nsw i64 %836, -2
  %839 = and i64 %837, 3
  %840 = icmp ult i64 %838, 3
  br i1 %840, label %868, label %841

841:                                              ; preds = %834
  %842 = and i64 %837, -4
  br label %843

843:                                              ; preds = %843, %841
  %844 = phi i64 [ 1, %841 ], [ %865, %843 ]
  %845 = phi i64 [ 0, %841 ], [ %866, %843 ]
  %846 = getelementptr inbounds i32, ptr %831, i64 %844
  %847 = load i32, ptr %846, align 4, !tbaa !5
  %848 = sext i32 %847 to i64
  %849 = getelementptr inbounds i8, ptr %824, i64 %848
  store i8 1, ptr %849, align 1, !tbaa !57
  %850 = add nuw nsw i64 %844, 1
  %851 = getelementptr inbounds i32, ptr %831, i64 %850
  %852 = load i32, ptr %851, align 4, !tbaa !5
  %853 = sext i32 %852 to i64
  %854 = getelementptr inbounds i8, ptr %824, i64 %853
  store i8 1, ptr %854, align 1, !tbaa !57
  %855 = add nuw nsw i64 %844, 2
  %856 = getelementptr inbounds i32, ptr %831, i64 %855
  %857 = load i32, ptr %856, align 4, !tbaa !5
  %858 = sext i32 %857 to i64
  %859 = getelementptr inbounds i8, ptr %824, i64 %858
  store i8 1, ptr %859, align 1, !tbaa !57
  %860 = add nuw nsw i64 %844, 3
  %861 = getelementptr inbounds i32, ptr %831, i64 %860
  %862 = load i32, ptr %861, align 4, !tbaa !5
  %863 = sext i32 %862 to i64
  %864 = getelementptr inbounds i8, ptr %824, i64 %863
  store i8 1, ptr %864, align 1, !tbaa !57
  %865 = add nuw nsw i64 %844, 4
  %866 = add i64 %845, 4
  %867 = icmp eq i64 %866, %842
  br i1 %867, label %868, label %843

868:                                              ; preds = %843, %834
  %869 = phi i64 [ 1, %834 ], [ %865, %843 ]
  %870 = icmp eq i64 %839, 0
  br i1 %870, label %881, label %871

871:                                              ; preds = %868, %871
  %872 = phi i64 [ %878, %871 ], [ %869, %868 ]
  %873 = phi i64 [ %879, %871 ], [ 0, %868 ]
  %874 = getelementptr inbounds i32, ptr %831, i64 %872
  %875 = load i32, ptr %874, align 4, !tbaa !5
  %876 = sext i32 %875 to i64
  %877 = getelementptr inbounds i8, ptr %824, i64 %876
  store i8 1, ptr %877, align 1, !tbaa !57
  %878 = add nuw nsw i64 %872, 1
  %879 = add i64 %873, 1
  %880 = icmp eq i64 %879, %839
  br i1 %880, label %881, label %871, !llvm.loop !336

881:                                              ; preds = %871, %868
  %882 = load i32, ptr %675, align 4
  %883 = shl i32 %882, 2
  %884 = ashr exact i32 %883, 2
  %885 = sext i32 %884 to i64
  br label %886

886:                                              ; preds = %881, %823
  %887 = phi i64 [ %885, %881 ], [ %829, %823 ]
  %888 = load ptr, ptr %638, align 8, !tbaa !64
  %889 = getelementptr inbounds ptr, ptr %888, i64 %887
  %890 = load ptr, ptr %889, align 8, !tbaa !23
  %891 = load i32, ptr %890, align 4, !tbaa !5
  %892 = icmp slt i32 %891, 1
  br i1 %892, label %940, label %893

893:                                              ; preds = %886
  %894 = add nuw i32 %891, 1
  %895 = zext i32 %894 to i64
  %896 = add nsw i64 %895, -1
  %897 = add nsw i64 %895, -2
  %898 = and i64 %896, 3
  %899 = icmp ult i64 %897, 3
  br i1 %899, label %927, label %900

900:                                              ; preds = %893
  %901 = and i64 %896, -4
  br label %902

902:                                              ; preds = %902, %900
  %903 = phi i64 [ 1, %900 ], [ %924, %902 ]
  %904 = phi i64 [ 0, %900 ], [ %925, %902 ]
  %905 = getelementptr inbounds i32, ptr %890, i64 %903
  %906 = load i32, ptr %905, align 4, !tbaa !5
  %907 = sext i32 %906 to i64
  %908 = getelementptr inbounds i8, ptr %824, i64 %907
  store i8 2, ptr %908, align 1, !tbaa !57
  %909 = add nuw nsw i64 %903, 1
  %910 = getelementptr inbounds i32, ptr %890, i64 %909
  %911 = load i32, ptr %910, align 4, !tbaa !5
  %912 = sext i32 %911 to i64
  %913 = getelementptr inbounds i8, ptr %824, i64 %912
  store i8 2, ptr %913, align 1, !tbaa !57
  %914 = add nuw nsw i64 %903, 2
  %915 = getelementptr inbounds i32, ptr %890, i64 %914
  %916 = load i32, ptr %915, align 4, !tbaa !5
  %917 = sext i32 %916 to i64
  %918 = getelementptr inbounds i8, ptr %824, i64 %917
  store i8 2, ptr %918, align 1, !tbaa !57
  %919 = add nuw nsw i64 %903, 3
  %920 = getelementptr inbounds i32, ptr %890, i64 %919
  %921 = load i32, ptr %920, align 4, !tbaa !5
  %922 = sext i32 %921 to i64
  %923 = getelementptr inbounds i8, ptr %824, i64 %922
  store i8 2, ptr %923, align 1, !tbaa !57
  %924 = add nuw nsw i64 %903, 4
  %925 = add i64 %904, 4
  %926 = icmp eq i64 %925, %901
  br i1 %926, label %927, label %902

927:                                              ; preds = %902, %893
  %928 = phi i64 [ 1, %893 ], [ %924, %902 ]
  %929 = icmp eq i64 %898, 0
  br i1 %929, label %940, label %930

930:                                              ; preds = %927, %930
  %931 = phi i64 [ %937, %930 ], [ %928, %927 ]
  %932 = phi i64 [ %938, %930 ], [ 0, %927 ]
  %933 = getelementptr inbounds i32, ptr %890, i64 %931
  %934 = load i32, ptr %933, align 4, !tbaa !5
  %935 = sext i32 %934 to i64
  %936 = getelementptr inbounds i8, ptr %824, i64 %935
  store i8 2, ptr %936, align 1, !tbaa !57
  %937 = add nuw nsw i64 %931, 1
  %938 = add i64 %932, 1
  %939 = icmp eq i64 %938, %898
  br i1 %939, label %940, label %930, !llvm.loop !337

940:                                              ; preds = %927, %930, %886, %710
  %941 = phi ptr [ %713, %710 ], [ %824, %886 ], [ %824, %930 ], [ %824, %927 ]
  %942 = phi ptr [ %665, %710 ], [ %890, %886 ], [ %890, %930 ], [ %890, %927 ]
  %943 = phi ptr [ %664, %710 ], [ %831, %886 ], [ %831, %930 ], [ %831, %927 ]
  %944 = phi ptr [ %663, %710 ], [ %824, %886 ], [ %824, %930 ], [ %824, %927 ]
  %945 = load i8, ptr %676, align 1
  %946 = and i8 %945, 7
  %947 = icmp eq i8 %946, 0
  br i1 %947, label %1241, label %948

948:                                              ; preds = %940
  %949 = load i32, ptr @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4, !tbaa !5
  %950 = icmp eq i32 %949, 0
  br i1 %950, label %954, label %951

951:                                              ; preds = %948
  %952 = load i32, ptr %675, align 4
  %953 = icmp slt i32 %952, 0
  br label %954

954:                                              ; preds = %951, %948
  %955 = phi i1 [ false, %948 ], [ %953, %951 ]
  %956 = and i8 %945, 120
  %957 = icmp eq i8 %956, 0
  br i1 %957, label %989, label %958

958:                                              ; preds = %954
  %959 = icmp slt i32 %667, %619
  br i1 %959, label %960, label %973

960:                                              ; preds = %958
  %961 = sext i32 %667 to i64
  br label %962

962:                                              ; preds = %960, %968
  %963 = phi i64 [ %961, %960 ], [ %969, %968 ]
  %964 = getelementptr inbounds i16, ptr %190, i64 %963
  %965 = load i16, ptr %964, align 2, !tbaa !44
  %966 = zext i16 %965 to i32
  %967 = icmp sgt i32 %696, %966
  br i1 %967, label %968, label %971

968:                                              ; preds = %962
  %969 = add nsw i64 %963, 1
  %970 = icmp eq i64 %969, %654
  br i1 %970, label %973, label %962

971:                                              ; preds = %962
  %972 = trunc i64 %963 to i32
  br label %973

973:                                              ; preds = %968, %971, %958
  %974 = phi i32 [ %667, %958 ], [ %972, %971 ], [ %619, %968 ]
  %975 = icmp slt i32 %668, %620
  br i1 %975, label %976, label %989

976:                                              ; preds = %973
  %977 = sext i32 %668 to i64
  br label %978

978:                                              ; preds = %976, %984
  %979 = phi i64 [ %977, %976 ], [ %985, %984 ]
  %980 = getelementptr inbounds i16, ptr %236, i64 %979
  %981 = load i16, ptr %980, align 2, !tbaa !44
  %982 = zext i16 %981 to i32
  %983 = icmp sgt i32 %696, %982
  br i1 %983, label %984, label %987

984:                                              ; preds = %978
  %985 = add nsw i64 %979, 1
  %986 = icmp eq i64 %985, %655
  br i1 %986, label %989, label %978

987:                                              ; preds = %978
  %988 = trunc i64 %979 to i32
  br label %989

989:                                              ; preds = %984, %987, %973, %954
  %990 = phi i32 [ %668, %954 ], [ %668, %973 ], [ %988, %987 ], [ %620, %984 ]
  %991 = phi i32 [ %667, %954 ], [ %974, %973 ], [ %974, %987 ], [ %974, %984 ]
  %992 = add nsw i32 %662, 1
  %993 = icmp slt i32 %992, %696
  br i1 %993, label %994, label %1059

994:                                              ; preds = %989
  %995 = xor i32 %662, -1
  %996 = add i32 %696, %995
  %997 = zext i32 %996 to i64
  %998 = icmp ult i32 %996, 8
  br i1 %998, label %1048, label %999

999:                                              ; preds = %994
  %1000 = icmp ult i32 %996, 64
  br i1 %1000, label %1029, label %1001

1001:                                             ; preds = %999
  %1002 = and i64 %997, 4294967232
  %1003 = trunc i32 %992 to i16
  %1004 = insertelement <16 x i16> poison, i16 %1003, i64 0
  %1005 = shufflevector <16 x i16> %1004, <16 x i16> poison, <16 x i32> zeroinitializer
  %1006 = add <16 x i16> %1005, <i16 0, i16 1, i16 2, i16 3, i16 4, i16 5, i16 6, i16 7, i16 8, i16 9, i16 10, i16 11, i16 12, i16 13, i16 14, i16 15>
  %1007 = trunc i64 %1002 to i32
  %1008 = add i32 %992, %1007
  br label %1009

1009:                                             ; preds = %1009, %1001
  %1010 = phi i64 [ 0, %1001 ], [ %1019, %1009 ]
  %1011 = phi <16 x i16> [ %1006, %1001 ], [ %1020, %1009 ]
  %1012 = add <16 x i16> %1011, <i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16>
  %1013 = add <16 x i16> %1011, <i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32>
  %1014 = add <16 x i16> %1011, <i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48>
  %1015 = getelementptr inbounds i16, ptr %420, i64 %1010
  store <16 x i16> %1011, ptr %1015, align 2, !tbaa !44
  %1016 = getelementptr inbounds i16, ptr %1015, i64 16
  store <16 x i16> %1012, ptr %1016, align 2, !tbaa !44
  %1017 = getelementptr inbounds i16, ptr %1015, i64 32
  store <16 x i16> %1013, ptr %1017, align 2, !tbaa !44
  %1018 = getelementptr inbounds i16, ptr %1015, i64 48
  store <16 x i16> %1014, ptr %1018, align 2, !tbaa !44
  %1019 = add nuw i64 %1010, 64
  %1020 = add <16 x i16> %1011, <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>
  %1021 = icmp eq i64 %1019, %1002
  br i1 %1021, label %1022, label %1009, !llvm.loop !338

1022:                                             ; preds = %1009
  %1023 = icmp eq i64 %1002, %997
  br i1 %1023, label %1059, label %1024

1024:                                             ; preds = %1022
  %1025 = trunc i64 %1002 to i32
  %1026 = add i32 %992, %1025
  %1027 = and i64 %997, 56
  %1028 = icmp eq i64 %1027, 0
  br i1 %1028, label %1048, label %1029

1029:                                             ; preds = %999, %1024
  %1030 = phi i32 [ %1008, %1024 ], [ %992, %999 ]
  %1031 = phi i64 [ %1002, %1024 ], [ 0, %999 ]
  %1032 = and i64 %997, 4294967288
  %1033 = trunc i64 %1032 to i32
  %1034 = add i32 %992, %1033
  %1035 = trunc i32 %1030 to i16
  %1036 = insertelement <8 x i16> poison, i16 %1035, i64 0
  %1037 = shufflevector <8 x i16> %1036, <8 x i16> poison, <8 x i32> zeroinitializer
  %1038 = add <8 x i16> %1037, <i16 0, i16 1, i16 2, i16 3, i16 4, i16 5, i16 6, i16 7>
  br label %1039

1039:                                             ; preds = %1039, %1029
  %1040 = phi i64 [ %1031, %1029 ], [ %1043, %1039 ]
  %1041 = phi <8 x i16> [ %1038, %1029 ], [ %1044, %1039 ]
  %1042 = getelementptr inbounds i16, ptr %420, i64 %1040
  store <8 x i16> %1041, ptr %1042, align 2, !tbaa !44
  %1043 = add nuw i64 %1040, 8
  %1044 = add <8 x i16> %1041, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %1045 = icmp eq i64 %1043, %1032
  br i1 %1045, label %1046, label %1039, !llvm.loop !339

1046:                                             ; preds = %1039
  %1047 = icmp eq i64 %1032, %997
  br i1 %1047, label %1059, label %1048

1048:                                             ; preds = %994, %1024, %1046
  %1049 = phi i64 [ 0, %994 ], [ %1002, %1024 ], [ %1032, %1046 ]
  %1050 = phi i32 [ %992, %994 ], [ %1026, %1024 ], [ %1034, %1046 ]
  br label %1051

1051:                                             ; preds = %1048, %1051
  %1052 = phi i64 [ %1055, %1051 ], [ %1049, %1048 ]
  %1053 = phi i32 [ %1057, %1051 ], [ %1050, %1048 ]
  %1054 = trunc i32 %1053 to i16
  %1055 = add nuw nsw i64 %1052, 1
  %1056 = getelementptr inbounds i16, ptr %420, i64 %1052
  store i16 %1054, ptr %1056, align 2, !tbaa !44
  %1057 = add nsw i32 %1053, 1
  %1058 = icmp eq i64 %1055, %997
  br i1 %1058, label %1059, label %1051, !llvm.loop !340

1059:                                             ; preds = %1051, %1022, %1046, %989
  %1060 = phi i32 [ 0, %989 ], [ %996, %1046 ], [ %996, %1022 ], [ %996, %1051 ]
  %1061 = zext i32 %1060 to i64
  %1062 = getelementptr inbounds i16, ptr %420, i64 %1061
  %1063 = select i1 %955, ptr %236, ptr %190
  %1064 = select i1 %955, i32 %990, i32 %991
  %1065 = select i1 %955, i32 %620, i32 %619
  %1066 = icmp slt i32 %1064, %1065
  br i1 %1066, label %1067, label %1226

1067:                                             ; preds = %1059
  %1068 = sub nsw i32 %1065, %1064
  %1069 = icmp sgt i32 %1068, 6
  br i1 %1069, label %1070, label %1163

1070:                                             ; preds = %1067
  %1071 = add nsw i32 %1065, -2
  %1072 = add nsw i32 %1064, 2
  %1073 = icmp slt i32 %1072, %1071
  br i1 %1073, label %1074, label %1163

1074:                                             ; preds = %1070
  %1075 = add nsw i32 %1064, 1
  %1076 = sext i32 %1075 to i64
  %1077 = getelementptr inbounds i16, ptr %1063, i64 %1076
  %1078 = load i16, ptr %1077, align 2, !tbaa !44
  %1079 = zext i16 %1078 to i64
  %1080 = getelementptr inbounds %struct.CompAtom, ptr %40, i64 %1079
  %1081 = getelementptr inbounds %class.Vector, ptr %1080, i64 0, i32 2
  %1082 = load double, ptr %1081, align 8, !tbaa !49
  %1083 = sext i32 %1064 to i64
  %1084 = getelementptr inbounds i16, ptr %1063, i64 %1083
  %1085 = load i16, ptr %1084, align 2, !tbaa !44
  %1086 = zext i16 %1085 to i64
  %1087 = getelementptr inbounds %struct.CompAtom, ptr %40, i64 %1086
  %1088 = getelementptr inbounds %class.Vector, ptr %1087, i64 0, i32 2
  %1089 = load double, ptr %1088, align 8, !tbaa !49
  %1090 = getelementptr inbounds %class.Vector, ptr %1080, i64 0, i32 1
  %1091 = load double, ptr %1090, align 8, !tbaa !66
  %1092 = getelementptr inbounds %class.Vector, ptr %1087, i64 0, i32 1
  %1093 = load double, ptr %1092, align 8, !tbaa !66
  %1094 = load double, ptr %1080, align 8, !tbaa !67
  %1095 = load double, ptr %1087, align 8, !tbaa !67
  %1096 = sext i32 %1072 to i64
  %1097 = sext i32 %1071 to i64
  %1098 = insertelement <2 x double> poison, double %1082, i64 0
  %1099 = insertelement <2 x double> %1098, double %1089, i64 1
  %1100 = insertelement <2 x double> poison, double %1091, i64 0
  %1101 = insertelement <2 x double> %1100, double %1093, i64 1
  %1102 = insertelement <2 x double> poison, double %1094, i64 0
  %1103 = insertelement <2 x double> %1102, double %1095, i64 1
  %1104 = insertelement <2 x double> poison, double %694, i64 0
  %1105 = shufflevector <2 x double> %1104, <2 x double> poison, <2 x i32> zeroinitializer
  %1106 = shufflevector <2 x double> %691, <2 x double> poison, <2 x i32> <i32 1, i32 1>
  %1107 = shufflevector <2 x double> %691, <2 x double> poison, <2 x i32> zeroinitializer
  br label %1108

1108:                                             ; preds = %1074, %1108
  %1109 = phi i64 [ %1096, %1074 ], [ %1154, %1108 ]
  %1110 = phi i32 [ %1064, %1074 ], [ %1156, %1108 ]
  %1111 = phi i32 [ 0, %1074 ], [ %1153, %1108 ]
  %1112 = phi i16 [ %1085, %1074 ], [ %1119, %1108 ]
  %1113 = phi i16 [ %1078, %1074 ], [ %1123, %1108 ]
  %1114 = phi <2 x double> [ %1099, %1074 ], [ %1158, %1108 ]
  %1115 = phi <2 x double> [ %1101, %1074 ], [ %1160, %1108 ]
  %1116 = phi <2 x double> [ %1103, %1074 ], [ %1162, %1108 ]
  %1117 = fsub <2 x double> %1105, %1114
  %1118 = getelementptr inbounds i16, ptr %1063, i64 %1109
  %1119 = load i16, ptr %1118, align 2, !tbaa !44
  %1120 = add nsw i32 %1110, 3
  %1121 = sext i32 %1120 to i64
  %1122 = getelementptr inbounds i16, ptr %1063, i64 %1121
  %1123 = load i16, ptr %1122, align 2, !tbaa !44
  %1124 = zext i16 %1119 to i64
  %1125 = getelementptr inbounds %struct.CompAtom, ptr %40, i64 %1124
  %1126 = load double, ptr %1125, align 8, !tbaa !67
  %1127 = zext i16 %1123 to i64
  %1128 = getelementptr inbounds %struct.CompAtom, ptr %40, i64 %1127
  %1129 = load double, ptr %1128, align 8, !tbaa !67
  %1130 = getelementptr inbounds %class.Vector, ptr %1125, i64 0, i32 1
  %1131 = load double, ptr %1130, align 8, !tbaa !66
  %1132 = getelementptr inbounds %class.Vector, ptr %1128, i64 0, i32 1
  %1133 = load double, ptr %1132, align 8, !tbaa !66
  %1134 = getelementptr inbounds %class.Vector, ptr %1125, i64 0, i32 2
  %1135 = load double, ptr %1134, align 8, !tbaa !49
  %1136 = getelementptr inbounds %class.Vector, ptr %1128, i64 0, i32 2
  %1137 = load double, ptr %1136, align 8, !tbaa !49
  %1138 = fsub <2 x double> %1107, %1116
  %1139 = fmul <2 x double> %1138, %1138
  %1140 = fsub <2 x double> %1106, %1115
  %1141 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %1140, <2 x double> %1140, <2 x double> %1139)
  %1142 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %1117, <2 x double> %1117, <2 x double> %1141)
  %1143 = fcmp olt <2 x double> %1142, %657
  %1144 = zext i32 %1111 to i64
  %1145 = getelementptr inbounds i16, ptr %282, i64 %1144
  store i16 %1112, ptr %1145, align 2, !tbaa !44
  %1146 = extractelement <2 x i1> %1143, i64 1
  %1147 = zext i1 %1146 to i32
  %1148 = add nuw nsw i32 %1111, %1147
  %1149 = zext i32 %1148 to i64
  %1150 = getelementptr inbounds i16, ptr %282, i64 %1149
  store i16 %1113, ptr %1150, align 2, !tbaa !44
  %1151 = extractelement <2 x i1> %1143, i64 0
  %1152 = zext i1 %1151 to i32
  %1153 = add i32 %1148, %1152
  %1154 = add nsw i64 %1109, 2
  %1155 = icmp slt i64 %1154, %1097
  %1156 = trunc i64 %1109 to i32
  %1157 = insertelement <2 x double> poison, double %1137, i64 0
  %1158 = insertelement <2 x double> %1157, double %1135, i64 1
  %1159 = insertelement <2 x double> poison, double %1133, i64 0
  %1160 = insertelement <2 x double> %1159, double %1131, i64 1
  %1161 = insertelement <2 x double> poison, double %1129, i64 0
  %1162 = insertelement <2 x double> %1161, double %1126, i64 1
  br i1 %1155, label %1108, label %1163

1163:                                             ; preds = %1108, %1070, %1067
  %1164 = phi i32 [ 0, %1067 ], [ 0, %1070 ], [ %1153, %1108 ]
  %1165 = phi i32 [ %1064, %1067 ], [ %1064, %1070 ], [ %1156, %1108 ]
  %1166 = icmp slt i32 %1165, %1065
  br i1 %1166, label %1167, label %1172

1167:                                             ; preds = %1163
  %1168 = sext i32 %1165 to i64
  %1169 = sext i32 %1065 to i64
  %1170 = extractelement <2 x double> %691, i64 0
  %1171 = extractelement <2 x double> %691, i64 1
  br label %1177

1172:                                             ; preds = %1200, %1163
  %1173 = phi i32 [ %1164, %1163 ], [ %1201, %1200 ]
  %1174 = icmp sgt i32 %1173, 0
  br i1 %1174, label %1175, label %1226

1175:                                             ; preds = %1172
  %1176 = zext i32 %1173 to i64
  br label %1204

1177:                                             ; preds = %1167, %1200
  %1178 = phi i64 [ %1168, %1167 ], [ %1202, %1200 ]
  %1179 = phi i32 [ %1164, %1167 ], [ %1201, %1200 ]
  %1180 = getelementptr inbounds i16, ptr %1063, i64 %1178
  %1181 = load i16, ptr %1180, align 2, !tbaa !44
  %1182 = zext i16 %1181 to i64
  %1183 = getelementptr inbounds %struct.CompAtom, ptr %40, i64 %1182
  %1184 = load double, ptr %1183, align 8, !tbaa !67
  %1185 = getelementptr inbounds %class.Vector, ptr %1183, i64 0, i32 1
  %1186 = load double, ptr %1185, align 8, !tbaa !66
  %1187 = getelementptr inbounds %class.Vector, ptr %1183, i64 0, i32 2
  %1188 = load double, ptr %1187, align 8, !tbaa !49
  %1189 = fsub double %1170, %1184
  %1190 = fmul double %1189, %1189
  %1191 = fsub double %1171, %1186
  %1192 = tail call double @llvm.fmuladd.f64(double %1191, double %1191, double %1190)
  %1193 = fsub double %694, %1188
  %1194 = tail call double @llvm.fmuladd.f64(double %1193, double %1193, double %1192)
  %1195 = fcmp ugt double %1194, %23
  br i1 %1195, label %1200, label %1196

1196:                                             ; preds = %1177
  %1197 = add nsw i32 %1179, 1
  %1198 = sext i32 %1179 to i64
  %1199 = getelementptr inbounds i16, ptr %282, i64 %1198
  store i16 %1181, ptr %1199, align 2, !tbaa !44
  br label %1200

1200:                                             ; preds = %1196, %1177
  %1201 = phi i32 [ %1197, %1196 ], [ %1179, %1177 ]
  %1202 = add nsw i64 %1178, 1
  %1203 = icmp eq i64 %1202, %1169
  br i1 %1203, label %1172, label %1177

1204:                                             ; preds = %1175, %1221
  %1205 = phi i64 [ 0, %1175 ], [ %1224, %1221 ]
  %1206 = phi ptr [ %1062, %1175 ], [ %1223, %1221 ]
  %1207 = getelementptr inbounds i16, ptr %282, i64 %1205
  %1208 = load i16, ptr %1207, align 2, !tbaa !44
  %1209 = zext i16 %1208 to i64
  %1210 = getelementptr inbounds %struct.CompAtom, ptr %40, i64 %1209, i32 4
  %1211 = load i8, ptr %1210, align 1
  %1212 = and i8 %1211, 7
  store i16 %1208, ptr %1206, align 2, !tbaa !44
  %1213 = getelementptr inbounds i16, ptr %1206, i64 1
  %1214 = insertelement <2 x i16> poison, i16 %1208, i64 0
  %1215 = shufflevector <2 x i16> %1214, <2 x i16> poison, <2 x i32> zeroinitializer
  %1216 = add <2 x i16> %1215, <i16 1, i16 2>
  store <2 x i16> %1216, ptr %1213, align 2, !tbaa !44
  %1217 = icmp ult i8 %1212, 4
  br i1 %1217, label %1221, label %1218

1218:                                             ; preds = %1204
  %1219 = add <2 x i16> %1215, <i16 3, i16 4>
  %1220 = getelementptr inbounds i16, ptr %1206, i64 3
  store <2 x i16> %1219, ptr %1220, align 2, !tbaa !44
  br label %1221

1221:                                             ; preds = %1218, %1204
  %1222 = zext i8 %1212 to i64
  %1223 = getelementptr inbounds i16, ptr %1206, i64 %1222
  %1224 = add nuw nsw i64 %1205, 1
  %1225 = icmp eq i64 %1224, %1176
  br i1 %1225, label %1226, label %1204

1226:                                             ; preds = %1221, %1172, %1059
  %1227 = phi ptr [ %1062, %1059 ], [ %1062, %1172 ], [ %1223, %1221 ]
  %1228 = ptrtoint ptr %1227 to i64
  %1229 = sub i64 %1228, %639
  %1230 = lshr exact i64 %1229, 1
  %1231 = trunc i64 %1230 to i32
  %1232 = icmp eq i32 %1231, 0
  br i1 %1232, label %1244, label %1233

1233:                                             ; preds = %1226
  %1234 = shl i64 %1229, 31
  %1235 = add i64 %1234, -4294967296
  %1236 = ashr i64 %1235, 32
  %1237 = getelementptr inbounds i16, ptr %420, i64 %1236
  %1238 = load i16, ptr %1237, align 2, !tbaa !44
  %1239 = ashr i64 %1234, 32
  %1240 = getelementptr inbounds i16, ptr %420, i64 %1239
  store i16 %1238, ptr %1240, align 2, !tbaa !44
  br label %1244

1241:                                             ; preds = %940
  %1242 = add nsw i32 %670, 1
  %1243 = load i32, ptr @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4, !tbaa !5
  br label %1244

1244:                                             ; preds = %1226, %1233, %1241
  %1245 = phi i32 [ %1243, %1241 ], [ %949, %1233 ], [ %949, %1226 ]
  %1246 = phi i32 [ %1242, %1241 ], [ 0, %1233 ], [ 0, %1226 ]
  %1247 = phi i32 [ %669, %1241 ], [ %1231, %1233 ], [ 0, %1226 ]
  %1248 = phi i32 [ %668, %1241 ], [ %990, %1233 ], [ %990, %1226 ]
  %1249 = phi i32 [ %667, %1241 ], [ %991, %1233 ], [ %991, %1226 ]
  %1250 = icmp eq i32 %1245, 0
  br i1 %1250, label %1255, label %1251

1251:                                             ; preds = %1244
  %1252 = load i32, ptr %675, align 4
  %1253 = and i32 %1252, 1073741824
  %1254 = icmp ne i32 %1253, 0
  br label %1255

1255:                                             ; preds = %1251, %1244
  %1256 = phi i1 [ false, %1244 ], [ %1254, %1251 ]
  %1257 = load i32, ptr %13, align 8, !tbaa !17
  %1258 = add nsw i32 %640, %1257
  %1259 = load i32, ptr %641, align 4, !tbaa !68
  %1260 = icmp sgt i32 %1259, %1258
  br i1 %1260, label %1276, label %1261

1261:                                             ; preds = %1255, %1261
  %1262 = phi i32 [ %1264, %1261 ], [ %1259, %1255 ]
  %1263 = ashr i32 %1262, 1
  %1264 = add nsw i32 %1263, %1262
  %1265 = icmp sgt i32 %1264, %1258
  br i1 %1265, label %1266, label %1261

1266:                                             ; preds = %1261
  %1267 = sext i32 %1264 to i64
  %1268 = icmp slt i32 %1264, 0
  %1269 = shl nsw i64 %1267, 1
  %1270 = select i1 %1268, i64 -1, i64 %1269
  %1271 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %1270) #9
  %1272 = load ptr, ptr %8, align 8, !tbaa !46
  %1273 = sext i32 %1257 to i64
  %1274 = shl nsw i64 %1273, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 2 %1271, ptr align 2 %1272, i64 %1274, i1 false)
  %1275 = icmp eq ptr %1272, null
  br i1 %1275, label %1280, label %1278

1276:                                             ; preds = %1255
  %1277 = load ptr, ptr %8, align 8, !tbaa !46
  br label %1282

1278:                                             ; preds = %1266
  tail call void @_ZdaPv(ptr noundef nonnull %1272) #10
  %1279 = load i32, ptr %13, align 8, !tbaa !17
  br label %1280

1280:                                             ; preds = %1278, %1266
  %1281 = phi i32 [ %1279, %1278 ], [ %1257, %1266 ]
  store ptr %1271, ptr %8, align 8, !tbaa !46
  store i32 %1264, ptr %641, align 4, !tbaa !68
  br label %1282

1282:                                             ; preds = %1276, %1280
  %1283 = phi i32 [ %1257, %1276 ], [ %1281, %1280 ]
  %1284 = phi ptr [ %1277, %1276 ], [ %1271, %1280 ]
  %1285 = ptrtoint ptr %1284 to i64
  %1286 = add nsw i32 %1283, 1
  %1287 = sext i32 %1286 to i64
  %1288 = getelementptr inbounds i16, ptr %1284, i64 %1287
  %1289 = load i32, ptr @_ZN20ComputeNonbondedUtil17pairInteractionOnE, align 4, !tbaa !5
  %1290 = icmp eq i32 %1289, 0
  br i1 %1290, label %1472, label %1291

1291:                                             ; preds = %1282
  %1292 = getelementptr inbounds %struct.CompAtom, ptr %38, i64 %673, i32 3
  %1293 = load i8, ptr %1292, align 2, !tbaa !301
  %1294 = zext i8 %1293 to i32
  %1295 = load i32, ptr @_ZN20ComputeNonbondedUtil19pairInteractionSelfE, align 4, !tbaa !5
  %1296 = icmp eq i32 %1295, 0
  br i1 %1296, label %1351, label %1297

1297:                                             ; preds = %1291
  %1298 = icmp eq i8 %1293, 1
  br i1 %1298, label %1299, label %2412

1299:                                             ; preds = %1297
  %1300 = icmp slt i32 %1246, %1247
  br i1 %1300, label %1301, label %1412

1301:                                             ; preds = %1299
  %1302 = sext i32 %1246 to i64
  %1303 = sext i32 %1247 to i64
  %1304 = sub nsw i64 %1303, %1302
  %1305 = xor i64 %1302, -1
  %1306 = and i64 %1304, 1
  %1307 = icmp eq i64 %1306, 0
  br i1 %1307, label %1319, label %1308

1308:                                             ; preds = %1301
  %1309 = getelementptr inbounds i16, ptr %420, i64 %1302
  %1310 = load i16, ptr %1309, align 2, !tbaa !44
  %1311 = zext i16 %1310 to i64
  %1312 = getelementptr inbounds %struct.CompAtom, ptr %40, i64 %1311, i32 3
  %1313 = load i8, ptr %1312, align 2, !tbaa !301
  %1314 = icmp eq i8 %1313, 1
  br i1 %1314, label %1315, label %1316

1315:                                             ; preds = %1308
  store i16 %1310, ptr %466, align 2, !tbaa !44
  br label %1316

1316:                                             ; preds = %1315, %1308
  %1317 = phi ptr [ %658, %1315 ], [ %466, %1308 ]
  %1318 = add nsw i64 %1302, 1
  br label %1319

1319:                                             ; preds = %1316, %1301
  %1320 = phi ptr [ undef, %1301 ], [ %1317, %1316 ]
  %1321 = phi i64 [ %1302, %1301 ], [ %1318, %1316 ]
  %1322 = phi ptr [ %466, %1301 ], [ %1317, %1316 ]
  %1323 = sub nsw i64 0, %1303
  %1324 = icmp eq i64 %1305, %1323
  br i1 %1324, label %1412, label %1325

1325:                                             ; preds = %1319, %1347
  %1326 = phi i64 [ %1349, %1347 ], [ %1321, %1319 ]
  %1327 = phi ptr [ %1348, %1347 ], [ %1322, %1319 ]
  %1328 = getelementptr inbounds i16, ptr %420, i64 %1326
  %1329 = load i16, ptr %1328, align 2, !tbaa !44
  %1330 = zext i16 %1329 to i64
  %1331 = getelementptr inbounds %struct.CompAtom, ptr %40, i64 %1330, i32 3
  %1332 = load i8, ptr %1331, align 2, !tbaa !301
  %1333 = icmp eq i8 %1332, 1
  br i1 %1333, label %1334, label %1336

1334:                                             ; preds = %1325
  %1335 = getelementptr inbounds i16, ptr %1327, i64 1
  store i16 %1329, ptr %1327, align 2, !tbaa !44
  br label %1336

1336:                                             ; preds = %1334, %1325
  %1337 = phi ptr [ %1335, %1334 ], [ %1327, %1325 ]
  %1338 = add nsw i64 %1326, 1
  %1339 = getelementptr inbounds i16, ptr %420, i64 %1338
  %1340 = load i16, ptr %1339, align 2, !tbaa !44
  %1341 = zext i16 %1340 to i64
  %1342 = getelementptr inbounds %struct.CompAtom, ptr %40, i64 %1341, i32 3
  %1343 = load i8, ptr %1342, align 2, !tbaa !301
  %1344 = icmp eq i8 %1343, 1
  br i1 %1344, label %1345, label %1347

1345:                                             ; preds = %1336
  %1346 = getelementptr inbounds i16, ptr %1337, i64 1
  store i16 %1340, ptr %1337, align 2, !tbaa !44
  br label %1347

1347:                                             ; preds = %1345, %1336
  %1348 = phi ptr [ %1346, %1345 ], [ %1337, %1336 ]
  %1349 = add nsw i64 %1326, 2
  %1350 = icmp eq i64 %1349, %1303
  br i1 %1350, label %1412, label %1325

1351:                                             ; preds = %1291
  %1352 = add i8 %1293, -3
  %1353 = icmp ult i8 %1352, -2
  br i1 %1353, label %2412, label %1354

1354:                                             ; preds = %1351
  %1355 = icmp slt i32 %1246, %1247
  br i1 %1355, label %1356, label %1412

1356:                                             ; preds = %1354
  %1357 = sext i32 %1246 to i64
  %1358 = sext i32 %1247 to i64
  %1359 = sub nsw i64 %1358, %1357
  %1360 = xor i64 %1357, -1
  %1361 = and i64 %1359, 1
  %1362 = icmp eq i64 %1361, 0
  br i1 %1362, label %1376, label %1363

1363:                                             ; preds = %1356
  %1364 = getelementptr inbounds i16, ptr %420, i64 %1357
  %1365 = load i16, ptr %1364, align 2, !tbaa !44
  %1366 = zext i16 %1365 to i64
  %1367 = getelementptr inbounds %struct.CompAtom, ptr %40, i64 %1366, i32 3
  %1368 = load i8, ptr %1367, align 2, !tbaa !301
  %1369 = zext i8 %1368 to i32
  %1370 = add nuw nsw i32 %1369, %1294
  %1371 = icmp eq i32 %1370, 3
  br i1 %1371, label %1372, label %1373

1372:                                             ; preds = %1363
  store i16 %1365, ptr %466, align 2, !tbaa !44
  br label %1373

1373:                                             ; preds = %1372, %1363
  %1374 = phi ptr [ %659, %1372 ], [ %466, %1363 ]
  %1375 = add nsw i64 %1357, 1
  br label %1376

1376:                                             ; preds = %1373, %1356
  %1377 = phi ptr [ undef, %1356 ], [ %1374, %1373 ]
  %1378 = phi i64 [ %1357, %1356 ], [ %1375, %1373 ]
  %1379 = phi ptr [ %466, %1356 ], [ %1374, %1373 ]
  %1380 = sub nsw i64 0, %1358
  %1381 = icmp eq i64 %1360, %1380
  br i1 %1381, label %1412, label %1382

1382:                                             ; preds = %1376, %1408
  %1383 = phi i64 [ %1410, %1408 ], [ %1378, %1376 ]
  %1384 = phi ptr [ %1409, %1408 ], [ %1379, %1376 ]
  %1385 = getelementptr inbounds i16, ptr %420, i64 %1383
  %1386 = load i16, ptr %1385, align 2, !tbaa !44
  %1387 = zext i16 %1386 to i64
  %1388 = getelementptr inbounds %struct.CompAtom, ptr %40, i64 %1387, i32 3
  %1389 = load i8, ptr %1388, align 2, !tbaa !301
  %1390 = zext i8 %1389 to i32
  %1391 = add nuw nsw i32 %1390, %1294
  %1392 = icmp eq i32 %1391, 3
  br i1 %1392, label %1393, label %1395

1393:                                             ; preds = %1382
  %1394 = getelementptr inbounds i16, ptr %1384, i64 1
  store i16 %1386, ptr %1384, align 2, !tbaa !44
  br label %1395

1395:                                             ; preds = %1393, %1382
  %1396 = phi ptr [ %1394, %1393 ], [ %1384, %1382 ]
  %1397 = add nsw i64 %1383, 1
  %1398 = getelementptr inbounds i16, ptr %420, i64 %1397
  %1399 = load i16, ptr %1398, align 2, !tbaa !44
  %1400 = zext i16 %1399 to i64
  %1401 = getelementptr inbounds %struct.CompAtom, ptr %40, i64 %1400, i32 3
  %1402 = load i8, ptr %1401, align 2, !tbaa !301
  %1403 = zext i8 %1402 to i32
  %1404 = add nuw nsw i32 %1403, %1294
  %1405 = icmp eq i32 %1404, 3
  br i1 %1405, label %1406, label %1408

1406:                                             ; preds = %1395
  %1407 = getelementptr inbounds i16, ptr %1396, i64 1
  store i16 %1399, ptr %1396, align 2, !tbaa !44
  br label %1408

1408:                                             ; preds = %1406, %1395
  %1409 = phi ptr [ %1407, %1406 ], [ %1396, %1395 ]
  %1410 = add nsw i64 %1383, 2
  %1411 = icmp eq i64 %1410, %1358
  br i1 %1411, label %1412, label %1382

1412:                                             ; preds = %1319, %1347, %1376, %1408, %1299, %1354
  %1413 = phi ptr [ %466, %1354 ], [ %466, %1299 ], [ %1377, %1376 ], [ %1409, %1408 ], [ %1320, %1319 ], [ %1348, %1347 ]
  %1414 = ptrtoint ptr %1413 to i64
  %1415 = sub i64 %1414, %642
  %1416 = lshr exact i64 %1415, 1
  %1417 = trunc i64 %1416 to i32
  %1418 = icmp sgt i32 %1417, 0
  br i1 %1418, label %1419, label %1693

1419:                                             ; preds = %1412
  %1420 = and i64 %1416, 4294967295
  %1421 = extractelement <2 x double> %691, i64 0
  %1422 = extractelement <2 x double> %691, i64 1
  br label %1423

1423:                                             ; preds = %1419, %1467
  %1424 = phi i64 [ 0, %1419 ], [ %1470, %1467 ]
  %1425 = phi ptr [ %466, %1419 ], [ %1469, %1467 ]
  %1426 = phi ptr [ %1288, %1419 ], [ %1468, %1467 ]
  %1427 = getelementptr inbounds i16, ptr %466, i64 %1424
  %1428 = load i16, ptr %1427, align 2, !tbaa !44
  %1429 = zext i16 %1428 to i64
  %1430 = getelementptr inbounds %struct.CompAtom, ptr %40, i64 %1429
  %1431 = load double, ptr %1430, align 8, !tbaa !67
  %1432 = fsub double %1421, %1431
  %1433 = fmul double %1432, %1432
  %1434 = getelementptr inbounds %class.Vector, ptr %1430, i64 0, i32 1
  %1435 = load double, ptr %1434, align 8, !tbaa !66
  %1436 = fsub double %1422, %1435
  %1437 = tail call double @llvm.fmuladd.f64(double %1436, double %1436, double %1433)
  %1438 = getelementptr inbounds %class.Vector, ptr %1430, i64 0, i32 2
  %1439 = load double, ptr %1438, align 8, !tbaa !49
  %1440 = fsub double %694, %1439
  %1441 = tail call double @llvm.fmuladd.f64(double %1440, double %1440, double %1437)
  br i1 %1256, label %1442, label %1449

1442:                                             ; preds = %1423
  %1443 = getelementptr inbounds %struct.CompAtomExt, ptr %44, i64 %1429
  %1444 = load i32, ptr %1443, align 4
  %1445 = and i32 %1444, 1073741824
  %1446 = icmp ne i32 %1445, 0
  %1447 = fcmp ugt double %1441, %20
  %1448 = select i1 %1446, i1 true, i1 %1447
  br i1 %1448, label %1467, label %1454

1449:                                             ; preds = %1423
  %1450 = fcmp ugt double %1441, %20
  br i1 %1450, label %1467, label %1451

1451:                                             ; preds = %1449
  %1452 = getelementptr inbounds %struct.CompAtomExt, ptr %44, i64 %1429
  %1453 = load i32, ptr %1452, align 4
  br label %1454

1454:                                             ; preds = %1451, %1442
  %1455 = phi i32 [ %1453, %1451 ], [ %1444, %1442 ]
  %1456 = shl i32 %1455, 2
  %1457 = ashr exact i32 %1456, 2
  %1458 = icmp slt i32 %1457, %704
  %1459 = icmp sgt i32 %1457, %706
  %1460 = select i1 %1458, i1 true, i1 %1459
  %1461 = select i1 %1460, ptr %1426, ptr %1425
  %1462 = zext i1 %1460 to i64
  %1463 = getelementptr inbounds i16, ptr %1426, i64 %1462
  %1464 = xor i1 %1460, true
  %1465 = zext i1 %1464 to i64
  %1466 = getelementptr inbounds i16, ptr %1425, i64 %1465
  store i16 %1428, ptr %1461, align 2, !tbaa !44
  br label %1467

1467:                                             ; preds = %1454, %1449, %1442
  %1468 = phi ptr [ %1426, %1442 ], [ %1426, %1449 ], [ %1463, %1454 ]
  %1469 = phi ptr [ %1425, %1442 ], [ %1425, %1449 ], [ %1466, %1454 ]
  %1470 = add nuw nsw i64 %1424, 1
  %1471 = icmp eq i64 %1470, %1420
  br i1 %1471, label %1693, label %1423

1472:                                             ; preds = %1282
  %1473 = icmp slt i32 %1246, %1247
  br i1 %1256, label %1474, label %1522

1474:                                             ; preds = %1472
  br i1 %1473, label %1475, label %1693

1475:                                             ; preds = %1474
  %1476 = sext i32 %1246 to i64
  %1477 = sext i32 %1247 to i64
  %1478 = extractelement <2 x double> %691, i64 0
  %1479 = extractelement <2 x double> %691, i64 1
  br label %1480

1480:                                             ; preds = %1475, %1517
  %1481 = phi i64 [ %1476, %1475 ], [ %1520, %1517 ]
  %1482 = phi ptr [ %466, %1475 ], [ %1519, %1517 ]
  %1483 = phi ptr [ %1288, %1475 ], [ %1518, %1517 ]
  %1484 = getelementptr inbounds i16, ptr %420, i64 %1481
  %1485 = load i16, ptr %1484, align 2, !tbaa !44
  %1486 = zext i16 %1485 to i64
  %1487 = getelementptr inbounds %struct.CompAtomExt, ptr %44, i64 %1486
  %1488 = load i32, ptr %1487, align 4
  %1489 = and i32 %1488, 1073741824
  %1490 = icmp eq i32 %1489, 0
  br i1 %1490, label %1491, label %1517

1491:                                             ; preds = %1480
  %1492 = getelementptr inbounds %struct.CompAtom, ptr %40, i64 %1486
  %1493 = getelementptr inbounds %class.Vector, ptr %1492, i64 0, i32 2
  %1494 = load double, ptr %1493, align 8, !tbaa !49
  %1495 = fsub double %694, %1494
  %1496 = getelementptr inbounds %class.Vector, ptr %1492, i64 0, i32 1
  %1497 = load double, ptr %1496, align 8, !tbaa !66
  %1498 = fsub double %1479, %1497
  %1499 = load double, ptr %1492, align 8, !tbaa !67
  %1500 = fsub double %1478, %1499
  %1501 = fmul double %1500, %1500
  %1502 = tail call double @llvm.fmuladd.f64(double %1498, double %1498, double %1501)
  %1503 = tail call double @llvm.fmuladd.f64(double %1495, double %1495, double %1502)
  %1504 = fcmp ugt double %1503, %20
  br i1 %1504, label %1517, label %1505

1505:                                             ; preds = %1491
  %1506 = shl i32 %1488, 2
  %1507 = ashr exact i32 %1506, 2
  %1508 = icmp slt i32 %1507, %704
  %1509 = icmp sgt i32 %1507, %706
  %1510 = select i1 %1508, i1 true, i1 %1509
  %1511 = select i1 %1510, ptr %1483, ptr %1482
  %1512 = zext i1 %1510 to i64
  %1513 = getelementptr inbounds i16, ptr %1483, i64 %1512
  %1514 = xor i1 %1510, true
  %1515 = zext i1 %1514 to i64
  %1516 = getelementptr inbounds i16, ptr %1482, i64 %1515
  store i16 %1485, ptr %1511, align 2, !tbaa !44
  br label %1517

1517:                                             ; preds = %1505, %1491, %1480
  %1518 = phi ptr [ %1483, %1480 ], [ %1483, %1491 ], [ %1513, %1505 ]
  %1519 = phi ptr [ %1482, %1480 ], [ %1482, %1491 ], [ %1516, %1505 ]
  %1520 = add nsw i64 %1481, 1
  %1521 = icmp eq i64 %1520, %1477
  br i1 %1521, label %1693, label %1480

1522:                                             ; preds = %1472
  br i1 %1473, label %1523, label %1693

1523:                                             ; preds = %1522
  %1524 = sub nsw i32 %1247, %1246
  %1525 = icmp sgt i32 %1524, 6
  br i1 %1525, label %1526, label %1644

1526:                                             ; preds = %1523
  %1527 = add nsw i32 %1247, -2
  %1528 = add nsw i32 %1246, 2
  %1529 = icmp slt i32 %1528, %1527
  br i1 %1529, label %1530, label %1644

1530:                                             ; preds = %1526
  %1531 = sext i32 %1246 to i64
  %1532 = getelementptr inbounds i16, ptr %420, i64 %1531
  %1533 = load i16, ptr %1532, align 2, !tbaa !44
  %1534 = zext i16 %1533 to i64
  %1535 = getelementptr inbounds %struct.CompAtomExt, ptr %44, i64 %1534
  %1536 = load i32, ptr %1535, align 4
  %1537 = add nsw i32 %1246, 1
  %1538 = sext i32 %1537 to i64
  %1539 = getelementptr inbounds i16, ptr %420, i64 %1538
  %1540 = load i16, ptr %1539, align 2, !tbaa !44
  %1541 = zext i16 %1540 to i64
  %1542 = getelementptr inbounds %struct.CompAtom, ptr %40, i64 %1541
  %1543 = getelementptr inbounds %class.Vector, ptr %1542, i64 0, i32 2
  %1544 = load double, ptr %1543, align 8, !tbaa !49
  %1545 = getelementptr inbounds %struct.CompAtom, ptr %40, i64 %1534
  %1546 = getelementptr inbounds %class.Vector, ptr %1545, i64 0, i32 2
  %1547 = load double, ptr %1546, align 8, !tbaa !49
  %1548 = getelementptr inbounds %class.Vector, ptr %1542, i64 0, i32 1
  %1549 = load double, ptr %1548, align 8, !tbaa !66
  %1550 = getelementptr inbounds %class.Vector, ptr %1545, i64 0, i32 1
  %1551 = load double, ptr %1550, align 8, !tbaa !66
  %1552 = load double, ptr %1542, align 8, !tbaa !67
  %1553 = load double, ptr %1545, align 8, !tbaa !67
  %1554 = sext i32 %1528 to i64
  %1555 = sext i32 %1527 to i64
  %1556 = extractelement <2 x double> %691, i64 0
  %1557 = extractelement <2 x double> %691, i64 1
  br label %1558

1558:                                             ; preds = %1530, %1638
  %1559 = phi i64 [ %1554, %1530 ], [ %1641, %1638 ]
  %1560 = phi i64 [ %1541, %1530 ], [ %1598, %1638 ]
  %1561 = phi i32 [ %1536, %1530 ], [ %1626, %1638 ]
  %1562 = phi ptr [ %466, %1530 ], [ %1640, %1638 ]
  %1563 = phi ptr [ %1288, %1530 ], [ %1639, %1638 ]
  %1564 = phi i32 [ %1246, %1530 ], [ %1643, %1638 ]
  %1565 = phi i16 [ %1533, %1530 ], [ %1590, %1638 ]
  %1566 = phi i16 [ %1540, %1530 ], [ %1594, %1638 ]
  %1567 = phi double [ %1553, %1530 ], [ %1597, %1638 ]
  %1568 = phi double [ %1552, %1530 ], [ %1600, %1638 ]
  %1569 = phi double [ %1551, %1530 ], [ %1602, %1638 ]
  %1570 = phi double [ %1549, %1530 ], [ %1604, %1638 ]
  %1571 = phi double [ %1547, %1530 ], [ %1606, %1638 ]
  %1572 = phi double [ %1544, %1530 ], [ %1608, %1638 ]
  %1573 = getelementptr inbounds %struct.CompAtomExt, ptr %44, i64 %1560
  %1574 = load i32, ptr %1573, align 4
  %1575 = shl i32 %1574, 2
  %1576 = ashr exact i32 %1575, 2
  %1577 = fsub double %1556, %1567
  %1578 = fsub double %1556, %1568
  %1579 = fmul double %1577, %1577
  %1580 = fmul double %1578, %1578
  %1581 = fsub double %1557, %1569
  %1582 = fsub double %1557, %1570
  %1583 = tail call double @llvm.fmuladd.f64(double %1581, double %1581, double %1579)
  %1584 = tail call double @llvm.fmuladd.f64(double %1582, double %1582, double %1580)
  %1585 = fsub double %694, %1571
  %1586 = fsub double %694, %1572
  %1587 = tail call double @llvm.fmuladd.f64(double %1585, double %1585, double %1583)
  %1588 = tail call double @llvm.fmuladd.f64(double %1586, double %1586, double %1584)
  %1589 = getelementptr inbounds i16, ptr %420, i64 %1559
  %1590 = load i16, ptr %1589, align 2, !tbaa !44
  %1591 = add nsw i32 %1564, 3
  %1592 = sext i32 %1591 to i64
  %1593 = getelementptr inbounds i16, ptr %420, i64 %1592
  %1594 = load i16, ptr %1593, align 2, !tbaa !44
  %1595 = zext i16 %1590 to i64
  %1596 = getelementptr inbounds %struct.CompAtom, ptr %40, i64 %1595
  %1597 = load double, ptr %1596, align 8, !tbaa !67
  %1598 = zext i16 %1594 to i64
  %1599 = getelementptr inbounds %struct.CompAtom, ptr %40, i64 %1598
  %1600 = load double, ptr %1599, align 8, !tbaa !67
  %1601 = getelementptr inbounds %class.Vector, ptr %1596, i64 0, i32 1
  %1602 = load double, ptr %1601, align 8, !tbaa !66
  %1603 = getelementptr inbounds %class.Vector, ptr %1599, i64 0, i32 1
  %1604 = load double, ptr %1603, align 8, !tbaa !66
  %1605 = getelementptr inbounds %class.Vector, ptr %1596, i64 0, i32 2
  %1606 = load double, ptr %1605, align 8, !tbaa !49
  %1607 = getelementptr inbounds %class.Vector, ptr %1599, i64 0, i32 2
  %1608 = load double, ptr %1607, align 8, !tbaa !49
  %1609 = fcmp ugt double %1587, %20
  br i1 %1609, label %1622, label %1610

1610:                                             ; preds = %1558
  %1611 = shl i32 %1561, 2
  %1612 = ashr exact i32 %1611, 2
  %1613 = icmp slt i32 %1612, %704
  %1614 = icmp sgt i32 %1612, %706
  %1615 = select i1 %1613, i1 true, i1 %1614
  %1616 = select i1 %1615, ptr %1563, ptr %1562
  %1617 = zext i1 %1615 to i64
  %1618 = getelementptr inbounds i16, ptr %1563, i64 %1617
  %1619 = xor i1 %1615, true
  %1620 = zext i1 %1619 to i64
  %1621 = getelementptr inbounds i16, ptr %1562, i64 %1620
  store i16 %1565, ptr %1616, align 2, !tbaa !44
  br label %1622

1622:                                             ; preds = %1610, %1558
  %1623 = phi ptr [ %1563, %1558 ], [ %1618, %1610 ]
  %1624 = phi ptr [ %1562, %1558 ], [ %1621, %1610 ]
  %1625 = getelementptr inbounds %struct.CompAtomExt, ptr %44, i64 %1595
  %1626 = load i32, ptr %1625, align 4
  %1627 = fcmp ugt double %1588, %20
  br i1 %1627, label %1638, label %1628

1628:                                             ; preds = %1622
  %1629 = icmp slt i32 %1576, %704
  %1630 = icmp sgt i32 %1576, %706
  %1631 = select i1 %1629, i1 true, i1 %1630
  %1632 = select i1 %1631, ptr %1623, ptr %1624
  %1633 = zext i1 %1631 to i64
  %1634 = getelementptr inbounds i16, ptr %1623, i64 %1633
  %1635 = xor i1 %1631, true
  %1636 = zext i1 %1635 to i64
  %1637 = getelementptr inbounds i16, ptr %1624, i64 %1636
  store i16 %1566, ptr %1632, align 2, !tbaa !44
  br label %1638

1638:                                             ; preds = %1628, %1622
  %1639 = phi ptr [ %1623, %1622 ], [ %1634, %1628 ]
  %1640 = phi ptr [ %1624, %1622 ], [ %1637, %1628 ]
  %1641 = add nsw i64 %1559, 2
  %1642 = icmp slt i64 %1641, %1555
  %1643 = trunc i64 %1559 to i32
  br i1 %1642, label %1558, label %1644

1644:                                             ; preds = %1638, %1526, %1523
  %1645 = phi i32 [ %1246, %1523 ], [ %1246, %1526 ], [ %1643, %1638 ]
  %1646 = phi ptr [ %1288, %1523 ], [ %1288, %1526 ], [ %1639, %1638 ]
  %1647 = phi ptr [ %466, %1523 ], [ %466, %1526 ], [ %1640, %1638 ]
  %1648 = icmp slt i32 %1645, %1247
  br i1 %1648, label %1649, label %1693

1649:                                             ; preds = %1644
  %1650 = sext i32 %1645 to i64
  %1651 = sext i32 %1247 to i64
  %1652 = extractelement <2 x double> %691, i64 0
  %1653 = extractelement <2 x double> %691, i64 1
  br label %1654

1654:                                             ; preds = %1649, %1688
  %1655 = phi i64 [ %1650, %1649 ], [ %1691, %1688 ]
  %1656 = phi ptr [ %1647, %1649 ], [ %1690, %1688 ]
  %1657 = phi ptr [ %1646, %1649 ], [ %1689, %1688 ]
  %1658 = getelementptr inbounds i16, ptr %420, i64 %1655
  %1659 = load i16, ptr %1658, align 2, !tbaa !44
  %1660 = zext i16 %1659 to i64
  %1661 = getelementptr inbounds %struct.CompAtom, ptr %40, i64 %1660
  %1662 = load double, ptr %1661, align 8, !tbaa !67
  %1663 = getelementptr inbounds %class.Vector, ptr %1661, i64 0, i32 1
  %1664 = load double, ptr %1663, align 8, !tbaa !66
  %1665 = getelementptr inbounds %class.Vector, ptr %1661, i64 0, i32 2
  %1666 = load double, ptr %1665, align 8, !tbaa !49
  %1667 = fsub double %1652, %1662
  %1668 = fmul double %1667, %1667
  %1669 = fsub double %1653, %1664
  %1670 = tail call double @llvm.fmuladd.f64(double %1669, double %1669, double %1668)
  %1671 = fsub double %694, %1666
  %1672 = tail call double @llvm.fmuladd.f64(double %1671, double %1671, double %1670)
  %1673 = fcmp ugt double %1672, %20
  br i1 %1673, label %1688, label %1674

1674:                                             ; preds = %1654
  %1675 = getelementptr inbounds %struct.CompAtomExt, ptr %44, i64 %1660
  %1676 = load i32, ptr %1675, align 4
  %1677 = shl i32 %1676, 2
  %1678 = ashr exact i32 %1677, 2
  %1679 = icmp slt i32 %1678, %704
  %1680 = icmp sgt i32 %1678, %706
  %1681 = select i1 %1679, i1 true, i1 %1680
  %1682 = select i1 %1681, ptr %1657, ptr %1656
  %1683 = zext i1 %1681 to i64
  %1684 = getelementptr inbounds i16, ptr %1657, i64 %1683
  %1685 = xor i1 %1681, true
  %1686 = zext i1 %1685 to i64
  %1687 = getelementptr inbounds i16, ptr %1656, i64 %1686
  store i16 %1659, ptr %1682, align 2, !tbaa !44
  br label %1688

1688:                                             ; preds = %1674, %1654
  %1689 = phi ptr [ %1657, %1654 ], [ %1684, %1674 ]
  %1690 = phi ptr [ %1656, %1654 ], [ %1687, %1674 ]
  %1691 = add nsw i64 %1655, 1
  %1692 = icmp eq i64 %1691, %1651
  br i1 %1692, label %1693, label %1654

1693:                                             ; preds = %1467, %1688, %1517, %1412, %1644, %1474, %1522
  %1694 = phi ptr [ %1288, %1522 ], [ %1288, %1474 ], [ %1646, %1644 ], [ %1288, %1412 ], [ %1518, %1517 ], [ %1689, %1688 ], [ %1468, %1467 ]
  %1695 = phi ptr [ %466, %1522 ], [ %466, %1474 ], [ %1647, %1644 ], [ %466, %1412 ], [ %1519, %1517 ], [ %1690, %1688 ], [ %1469, %1467 ]
  %1696 = ptrtoint ptr %1695 to i64
  %1697 = sub i64 %1696, %642
  %1698 = lshr exact i64 %1697, 1
  %1699 = trunc i64 %1698 to i32
  %1700 = icmp sgt i32 %1699, 0
  br i1 %1700, label %1701, label %1801

1701:                                             ; preds = %1693
  %1702 = and i64 %1698, 4294967295
  %1703 = and i64 %1698, 1
  %1704 = icmp eq i64 %1702, 1
  br i1 %1704, label %1769, label %1705

1705:                                             ; preds = %1701
  %1706 = sub nsw i64 %1702, %1703
  br label %1707

1707:                                             ; preds = %1762, %1705
  %1708 = phi i64 [ 0, %1705 ], [ %1766, %1762 ]
  %1709 = phi ptr [ %1694, %1705 ], [ %1765, %1762 ]
  %1710 = phi ptr [ %328, %1705 ], [ %1764, %1762 ]
  %1711 = phi ptr [ %374, %1705 ], [ %1763, %1762 ]
  %1712 = phi i64 [ 0, %1705 ], [ %1767, %1762 ]
  %1713 = getelementptr inbounds i16, ptr %466, i64 %1708
  %1714 = load i16, ptr %1713, align 2, !tbaa !44
  %1715 = zext i16 %1714 to i64
  %1716 = getelementptr inbounds %struct.CompAtomExt, ptr %44, i64 %1715
  %1717 = load i32, ptr %1716, align 4
  %1718 = shl i32 %1717, 2
  %1719 = ashr exact i32 %1718, 2
  %1720 = sext i32 %1719 to i64
  %1721 = getelementptr inbounds i8, ptr %941, i64 %1720
  %1722 = load i8, ptr %1721, align 1, !tbaa !57
  %1723 = sext i8 %1722 to i32
  switch i32 %1723, label %1735 [
    i32 0, label %1724
    i32 1, label %1726
    i32 2, label %1728
  ]

1724:                                             ; preds = %1707
  %1725 = getelementptr inbounds i16, ptr %1709, i64 1
  br label %1730

1726:                                             ; preds = %1707
  %1727 = getelementptr inbounds i16, ptr %1710, i64 1
  br label %1730

1728:                                             ; preds = %1707
  %1729 = getelementptr inbounds i16, ptr %1711, i64 1
  br label %1730

1730:                                             ; preds = %1724, %1726, %1728
  %1731 = phi ptr [ %1711, %1728 ], [ %1710, %1726 ], [ %1709, %1724 ]
  %1732 = phi ptr [ %1729, %1728 ], [ %1711, %1726 ], [ %1711, %1724 ]
  %1733 = phi ptr [ %1710, %1728 ], [ %1727, %1726 ], [ %1710, %1724 ]
  %1734 = phi ptr [ %1709, %1728 ], [ %1709, %1726 ], [ %1725, %1724 ]
  store i16 %1714, ptr %1731, align 2, !tbaa !44
  br label %1735

1735:                                             ; preds = %1730, %1707
  %1736 = phi ptr [ %1711, %1707 ], [ %1732, %1730 ]
  %1737 = phi ptr [ %1710, %1707 ], [ %1733, %1730 ]
  %1738 = phi ptr [ %1709, %1707 ], [ %1734, %1730 ]
  %1739 = or i64 %1708, 1
  %1740 = getelementptr inbounds i16, ptr %466, i64 %1739
  %1741 = load i16, ptr %1740, align 2, !tbaa !44
  %1742 = zext i16 %1741 to i64
  %1743 = getelementptr inbounds %struct.CompAtomExt, ptr %44, i64 %1742
  %1744 = load i32, ptr %1743, align 4
  %1745 = shl i32 %1744, 2
  %1746 = ashr exact i32 %1745, 2
  %1747 = sext i32 %1746 to i64
  %1748 = getelementptr inbounds i8, ptr %941, i64 %1747
  %1749 = load i8, ptr %1748, align 1, !tbaa !57
  %1750 = sext i8 %1749 to i32
  switch i32 %1750, label %1762 [
    i32 0, label %1755
    i32 1, label %1753
    i32 2, label %1751
  ]

1751:                                             ; preds = %1735
  %1752 = getelementptr inbounds i16, ptr %1736, i64 1
  br label %1757

1753:                                             ; preds = %1735
  %1754 = getelementptr inbounds i16, ptr %1737, i64 1
  br label %1757

1755:                                             ; preds = %1735
  %1756 = getelementptr inbounds i16, ptr %1738, i64 1
  br label %1757

1757:                                             ; preds = %1755, %1753, %1751
  %1758 = phi ptr [ %1736, %1751 ], [ %1737, %1753 ], [ %1738, %1755 ]
  %1759 = phi ptr [ %1752, %1751 ], [ %1736, %1753 ], [ %1736, %1755 ]
  %1760 = phi ptr [ %1737, %1751 ], [ %1754, %1753 ], [ %1737, %1755 ]
  %1761 = phi ptr [ %1738, %1751 ], [ %1738, %1753 ], [ %1756, %1755 ]
  store i16 %1741, ptr %1758, align 2, !tbaa !44
  br label %1762

1762:                                             ; preds = %1757, %1735
  %1763 = phi ptr [ %1736, %1735 ], [ %1759, %1757 ]
  %1764 = phi ptr [ %1737, %1735 ], [ %1760, %1757 ]
  %1765 = phi ptr [ %1738, %1735 ], [ %1761, %1757 ]
  %1766 = add nuw nsw i64 %1708, 2
  %1767 = add i64 %1712, 2
  %1768 = icmp eq i64 %1767, %1706
  br i1 %1768, label %1769, label %1707

1769:                                             ; preds = %1762, %1701
  %1770 = phi ptr [ undef, %1701 ], [ %1763, %1762 ]
  %1771 = phi ptr [ undef, %1701 ], [ %1764, %1762 ]
  %1772 = phi ptr [ undef, %1701 ], [ %1765, %1762 ]
  %1773 = phi i64 [ 0, %1701 ], [ %1766, %1762 ]
  %1774 = phi ptr [ %1694, %1701 ], [ %1765, %1762 ]
  %1775 = phi ptr [ %328, %1701 ], [ %1764, %1762 ]
  %1776 = phi ptr [ %374, %1701 ], [ %1763, %1762 ]
  %1777 = icmp eq i64 %1703, 0
  br i1 %1777, label %1801, label %1778

1778:                                             ; preds = %1769
  %1779 = getelementptr inbounds i16, ptr %466, i64 %1773
  %1780 = load i16, ptr %1779, align 2, !tbaa !44
  %1781 = zext i16 %1780 to i64
  %1782 = getelementptr inbounds %struct.CompAtomExt, ptr %44, i64 %1781
  %1783 = load i32, ptr %1782, align 4
  %1784 = shl i32 %1783, 2
  %1785 = ashr exact i32 %1784, 2
  %1786 = sext i32 %1785 to i64
  %1787 = getelementptr inbounds i8, ptr %941, i64 %1786
  %1788 = load i8, ptr %1787, align 1, !tbaa !57
  %1789 = sext i8 %1788 to i32
  switch i32 %1789, label %1801 [
    i32 0, label %1794
    i32 1, label %1792
    i32 2, label %1790
  ]

1790:                                             ; preds = %1778
  %1791 = getelementptr inbounds i16, ptr %1776, i64 1
  br label %1796

1792:                                             ; preds = %1778
  %1793 = getelementptr inbounds i16, ptr %1775, i64 1
  br label %1796

1794:                                             ; preds = %1778
  %1795 = getelementptr inbounds i16, ptr %1774, i64 1
  br label %1796

1796:                                             ; preds = %1794, %1792, %1790
  %1797 = phi ptr [ %1776, %1790 ], [ %1775, %1792 ], [ %1774, %1794 ]
  %1798 = phi ptr [ %1791, %1790 ], [ %1776, %1792 ], [ %1776, %1794 ]
  %1799 = phi ptr [ %1775, %1790 ], [ %1793, %1792 ], [ %1775, %1794 ]
  %1800 = phi ptr [ %1774, %1790 ], [ %1774, %1792 ], [ %1795, %1794 ]
  store i16 %1780, ptr %1797, align 2, !tbaa !44
  br label %1801

1801:                                             ; preds = %1769, %1796, %1778, %1693
  %1802 = phi ptr [ %374, %1693 ], [ %1770, %1769 ], [ %1776, %1778 ], [ %1798, %1796 ]
  %1803 = phi ptr [ %328, %1693 ], [ %1771, %1769 ], [ %1775, %1778 ], [ %1799, %1796 ]
  %1804 = phi ptr [ %1694, %1693 ], [ %1772, %1769 ], [ %1774, %1778 ], [ %1800, %1796 ]
  %1805 = ptrtoint ptr %1804 to i64
  %1806 = ptrtoint ptr %1288 to i64
  %1807 = sub i64 %1805, %1806
  %1808 = lshr exact i64 %1807, 1
  %1809 = trunc i64 %1808 to i32
  %1810 = icmp eq i32 %1809, 0
  %1811 = shl i64 %1807, 31
  br i1 %1810, label %1817, label %1812

1812:                                             ; preds = %1801
  %1813 = add i64 %1811, -4294967296
  %1814 = ashr i64 %1813, 32
  %1815 = getelementptr inbounds i16, ptr %1288, i64 %1814
  %1816 = load i16, ptr %1815, align 2, !tbaa !44
  br label %1817

1817:                                             ; preds = %1801, %1812
  %1818 = phi i16 [ %1816, %1812 ], [ -1, %1801 ]
  %1819 = ashr i64 %1811, 32
  %1820 = getelementptr inbounds i16, ptr %1288, i64 %1819
  store i16 %1818, ptr %1820, align 2, !tbaa !44
  %1821 = trunc i64 %1808 to i16
  %1822 = add i16 %1821, 1
  %1823 = load i32, ptr %13, align 8, !tbaa !17
  %1824 = sext i32 %1823 to i64
  %1825 = getelementptr inbounds i16, ptr %1284, i64 %1824
  store i16 %1822, ptr %1825, align 2, !tbaa !44
  %1826 = add nsw i32 %1809, 2
  %1827 = add nsw i32 %1826, %1823
  %1828 = ptrtoint ptr %1803 to i64
  %1829 = sub i64 %1828, %643
  %1830 = lshr exact i64 %1829, 1
  %1831 = trunc i64 %1830 to i32
  %1832 = add nsw i32 %1827, 1
  %1833 = sext i32 %1832 to i64
  %1834 = getelementptr i16, ptr %1284, i64 %1833
  %1835 = icmp sgt i32 %1831, 0
  br i1 %1835, label %1836, label %1926

1836:                                             ; preds = %1817
  %1837 = and i64 %1830, 4294967295
  %1838 = icmp ult i64 %1837, 8
  br i1 %1838, label %1882, label %1839

1839:                                             ; preds = %1836
  %1840 = shl nsw i64 %1833, 1
  %1841 = add i64 %1840, %1285
  %1842 = sub i64 %1841, %643
  %1843 = icmp ult i64 %1842, 128
  br i1 %1843, label %1882, label %1844

1844:                                             ; preds = %1839
  %1845 = icmp ult i64 %1837, 64
  br i1 %1845, label %1869, label %1846

1846:                                             ; preds = %1844
  %1847 = and i64 %1830, 63
  %1848 = sub nsw i64 %1837, %1847
  br label %1849

1849:                                             ; preds = %1849, %1846
  %1850 = phi i64 [ 0, %1846 ], [ %1863, %1849 ]
  %1851 = getelementptr inbounds i16, ptr %328, i64 %1850
  %1852 = load <16 x i16>, ptr %1851, align 2, !tbaa !44
  %1853 = getelementptr inbounds i16, ptr %1851, i64 16
  %1854 = load <16 x i16>, ptr %1853, align 2, !tbaa !44
  %1855 = getelementptr inbounds i16, ptr %1851, i64 32
  %1856 = load <16 x i16>, ptr %1855, align 2, !tbaa !44
  %1857 = getelementptr inbounds i16, ptr %1851, i64 48
  %1858 = load <16 x i16>, ptr %1857, align 2, !tbaa !44
  %1859 = getelementptr inbounds i16, ptr %1834, i64 %1850
  store <16 x i16> %1852, ptr %1859, align 2, !tbaa !44
  %1860 = getelementptr inbounds i16, ptr %1859, i64 16
  store <16 x i16> %1854, ptr %1860, align 2, !tbaa !44
  %1861 = getelementptr inbounds i16, ptr %1859, i64 32
  store <16 x i16> %1856, ptr %1861, align 2, !tbaa !44
  %1862 = getelementptr inbounds i16, ptr %1859, i64 48
  store <16 x i16> %1858, ptr %1862, align 2, !tbaa !44
  %1863 = add nuw i64 %1850, 64
  %1864 = icmp eq i64 %1863, %1848
  br i1 %1864, label %1865, label %1849, !llvm.loop !341

1865:                                             ; preds = %1849
  %1866 = icmp eq i64 %1847, 0
  br i1 %1866, label %1920, label %1867

1867:                                             ; preds = %1865
  %1868 = icmp ult i64 %1847, 8
  br i1 %1868, label %1882, label %1869

1869:                                             ; preds = %1844, %1867
  %1870 = phi i64 [ %1848, %1867 ], [ 0, %1844 ]
  %1871 = and i64 %1830, 7
  %1872 = sub nsw i64 %1837, %1871
  br label %1873

1873:                                             ; preds = %1873, %1869
  %1874 = phi i64 [ %1870, %1869 ], [ %1878, %1873 ]
  %1875 = getelementptr inbounds i16, ptr %328, i64 %1874
  %1876 = load <8 x i16>, ptr %1875, align 2, !tbaa !44
  %1877 = getelementptr inbounds i16, ptr %1834, i64 %1874
  store <8 x i16> %1876, ptr %1877, align 2, !tbaa !44
  %1878 = add nuw i64 %1874, 8
  %1879 = icmp eq i64 %1878, %1872
  br i1 %1879, label %1880, label %1873, !llvm.loop !342

1880:                                             ; preds = %1873
  %1881 = icmp eq i64 %1871, 0
  br i1 %1881, label %1920, label %1882

1882:                                             ; preds = %1839, %1836, %1867, %1880
  %1883 = phi i64 [ 0, %1836 ], [ 0, %1839 ], [ %1848, %1867 ], [ %1872, %1880 ]
  %1884 = sub i64 %1830, %1883
  %1885 = xor i64 %1883, -1
  %1886 = add nsw i64 %1837, %1885
  %1887 = and i64 %1884, 3
  %1888 = icmp eq i64 %1887, 0
  br i1 %1888, label %1898, label %1889

1889:                                             ; preds = %1882, %1889
  %1890 = phi i64 [ %1895, %1889 ], [ %1883, %1882 ]
  %1891 = phi i64 [ %1896, %1889 ], [ 0, %1882 ]
  %1892 = getelementptr inbounds i16, ptr %328, i64 %1890
  %1893 = load i16, ptr %1892, align 2, !tbaa !44
  %1894 = getelementptr inbounds i16, ptr %1834, i64 %1890
  store i16 %1893, ptr %1894, align 2, !tbaa !44
  %1895 = add nuw nsw i64 %1890, 1
  %1896 = add i64 %1891, 1
  %1897 = icmp eq i64 %1896, %1887
  br i1 %1897, label %1898, label %1889, !llvm.loop !343

1898:                                             ; preds = %1889, %1882
  %1899 = phi i64 [ %1883, %1882 ], [ %1895, %1889 ]
  %1900 = icmp ult i64 %1886, 3
  br i1 %1900, label %1920, label %1901

1901:                                             ; preds = %1898, %1901
  %1902 = phi i64 [ %1918, %1901 ], [ %1899, %1898 ]
  %1903 = getelementptr inbounds i16, ptr %328, i64 %1902
  %1904 = load i16, ptr %1903, align 2, !tbaa !44
  %1905 = getelementptr inbounds i16, ptr %1834, i64 %1902
  store i16 %1904, ptr %1905, align 2, !tbaa !44
  %1906 = add nuw nsw i64 %1902, 1
  %1907 = getelementptr inbounds i16, ptr %328, i64 %1906
  %1908 = load i16, ptr %1907, align 2, !tbaa !44
  %1909 = getelementptr inbounds i16, ptr %1834, i64 %1906
  store i16 %1908, ptr %1909, align 2, !tbaa !44
  %1910 = add nuw nsw i64 %1902, 2
  %1911 = getelementptr inbounds i16, ptr %328, i64 %1910
  %1912 = load i16, ptr %1911, align 2, !tbaa !44
  %1913 = getelementptr inbounds i16, ptr %1834, i64 %1910
  store i16 %1912, ptr %1913, align 2, !tbaa !44
  %1914 = add nuw nsw i64 %1902, 3
  %1915 = getelementptr inbounds i16, ptr %328, i64 %1914
  %1916 = load i16, ptr %1915, align 2, !tbaa !44
  %1917 = getelementptr inbounds i16, ptr %1834, i64 %1914
  store i16 %1916, ptr %1917, align 2, !tbaa !44
  %1918 = add nuw nsw i64 %1902, 4
  %1919 = icmp eq i64 %1918, %1837
  br i1 %1919, label %1920, label %1901, !llvm.loop !344

1920:                                             ; preds = %1898, %1901, %1865, %1880
  %1921 = shl i64 %1829, 31
  %1922 = add i64 %1921, -4294967296
  %1923 = ashr i64 %1922, 32
  %1924 = getelementptr inbounds i16, ptr %1834, i64 %1923
  %1925 = load i16, ptr %1924, align 2, !tbaa !44
  br label %1926

1926:                                             ; preds = %1817, %1920
  %1927 = phi i64 [ %1830, %1920 ], [ 0, %1817 ]
  %1928 = phi i16 [ %1925, %1920 ], [ -1, %1817 ]
  %1929 = and i64 %1927, 4294967295
  %1930 = getelementptr inbounds i16, ptr %1834, i64 %1929
  store i16 %1928, ptr %1930, align 2, !tbaa !44
  %1931 = trunc i64 %1830 to i16
  %1932 = add i16 %1931, 1
  %1933 = sext i32 %1827 to i64
  %1934 = getelementptr inbounds i16, ptr %1284, i64 %1933
  store i16 %1932, ptr %1934, align 2, !tbaa !44
  %1935 = add nsw i32 %1831, 2
  %1936 = add nsw i32 %1935, %1827
  %1937 = ptrtoint ptr %1802 to i64
  %1938 = sub i64 %1937, %644
  %1939 = lshr exact i64 %1938, 1
  %1940 = trunc i64 %1939 to i32
  %1941 = add nsw i32 %1936, 1
  %1942 = sext i32 %1941 to i64
  %1943 = getelementptr i16, ptr %1284, i64 %1942
  %1944 = icmp sgt i32 %1940, 0
  br i1 %1944, label %1945, label %2035

1945:                                             ; preds = %1926
  %1946 = and i64 %1939, 4294967295
  %1947 = icmp ult i64 %1946, 8
  br i1 %1947, label %1991, label %1948

1948:                                             ; preds = %1945
  %1949 = shl nsw i64 %1942, 1
  %1950 = add i64 %1949, %1285
  %1951 = sub i64 %1950, %644
  %1952 = icmp ult i64 %1951, 128
  br i1 %1952, label %1991, label %1953

1953:                                             ; preds = %1948
  %1954 = icmp ult i64 %1946, 64
  br i1 %1954, label %1978, label %1955

1955:                                             ; preds = %1953
  %1956 = and i64 %1939, 63
  %1957 = sub nsw i64 %1946, %1956
  br label %1958

1958:                                             ; preds = %1958, %1955
  %1959 = phi i64 [ 0, %1955 ], [ %1972, %1958 ]
  %1960 = getelementptr inbounds i16, ptr %374, i64 %1959
  %1961 = load <16 x i16>, ptr %1960, align 2, !tbaa !44
  %1962 = getelementptr inbounds i16, ptr %1960, i64 16
  %1963 = load <16 x i16>, ptr %1962, align 2, !tbaa !44
  %1964 = getelementptr inbounds i16, ptr %1960, i64 32
  %1965 = load <16 x i16>, ptr %1964, align 2, !tbaa !44
  %1966 = getelementptr inbounds i16, ptr %1960, i64 48
  %1967 = load <16 x i16>, ptr %1966, align 2, !tbaa !44
  %1968 = getelementptr inbounds i16, ptr %1943, i64 %1959
  store <16 x i16> %1961, ptr %1968, align 2, !tbaa !44
  %1969 = getelementptr inbounds i16, ptr %1968, i64 16
  store <16 x i16> %1963, ptr %1969, align 2, !tbaa !44
  %1970 = getelementptr inbounds i16, ptr %1968, i64 32
  store <16 x i16> %1965, ptr %1970, align 2, !tbaa !44
  %1971 = getelementptr inbounds i16, ptr %1968, i64 48
  store <16 x i16> %1967, ptr %1971, align 2, !tbaa !44
  %1972 = add nuw i64 %1959, 64
  %1973 = icmp eq i64 %1972, %1957
  br i1 %1973, label %1974, label %1958, !llvm.loop !345

1974:                                             ; preds = %1958
  %1975 = icmp eq i64 %1956, 0
  br i1 %1975, label %2029, label %1976

1976:                                             ; preds = %1974
  %1977 = icmp ult i64 %1956, 8
  br i1 %1977, label %1991, label %1978

1978:                                             ; preds = %1953, %1976
  %1979 = phi i64 [ %1957, %1976 ], [ 0, %1953 ]
  %1980 = and i64 %1939, 7
  %1981 = sub nsw i64 %1946, %1980
  br label %1982

1982:                                             ; preds = %1982, %1978
  %1983 = phi i64 [ %1979, %1978 ], [ %1987, %1982 ]
  %1984 = getelementptr inbounds i16, ptr %374, i64 %1983
  %1985 = load <8 x i16>, ptr %1984, align 2, !tbaa !44
  %1986 = getelementptr inbounds i16, ptr %1943, i64 %1983
  store <8 x i16> %1985, ptr %1986, align 2, !tbaa !44
  %1987 = add nuw i64 %1983, 8
  %1988 = icmp eq i64 %1987, %1981
  br i1 %1988, label %1989, label %1982, !llvm.loop !346

1989:                                             ; preds = %1982
  %1990 = icmp eq i64 %1980, 0
  br i1 %1990, label %2029, label %1991

1991:                                             ; preds = %1948, %1945, %1976, %1989
  %1992 = phi i64 [ 0, %1945 ], [ 0, %1948 ], [ %1957, %1976 ], [ %1981, %1989 ]
  %1993 = sub i64 %1939, %1992
  %1994 = xor i64 %1992, -1
  %1995 = add nsw i64 %1946, %1994
  %1996 = and i64 %1993, 3
  %1997 = icmp eq i64 %1996, 0
  br i1 %1997, label %2007, label %1998

1998:                                             ; preds = %1991, %1998
  %1999 = phi i64 [ %2004, %1998 ], [ %1992, %1991 ]
  %2000 = phi i64 [ %2005, %1998 ], [ 0, %1991 ]
  %2001 = getelementptr inbounds i16, ptr %374, i64 %1999
  %2002 = load i16, ptr %2001, align 2, !tbaa !44
  %2003 = getelementptr inbounds i16, ptr %1943, i64 %1999
  store i16 %2002, ptr %2003, align 2, !tbaa !44
  %2004 = add nuw nsw i64 %1999, 1
  %2005 = add i64 %2000, 1
  %2006 = icmp eq i64 %2005, %1996
  br i1 %2006, label %2007, label %1998, !llvm.loop !347

2007:                                             ; preds = %1998, %1991
  %2008 = phi i64 [ %1992, %1991 ], [ %2004, %1998 ]
  %2009 = icmp ult i64 %1995, 3
  br i1 %2009, label %2029, label %2010

2010:                                             ; preds = %2007, %2010
  %2011 = phi i64 [ %2027, %2010 ], [ %2008, %2007 ]
  %2012 = getelementptr inbounds i16, ptr %374, i64 %2011
  %2013 = load i16, ptr %2012, align 2, !tbaa !44
  %2014 = getelementptr inbounds i16, ptr %1943, i64 %2011
  store i16 %2013, ptr %2014, align 2, !tbaa !44
  %2015 = add nuw nsw i64 %2011, 1
  %2016 = getelementptr inbounds i16, ptr %374, i64 %2015
  %2017 = load i16, ptr %2016, align 2, !tbaa !44
  %2018 = getelementptr inbounds i16, ptr %1943, i64 %2015
  store i16 %2017, ptr %2018, align 2, !tbaa !44
  %2019 = add nuw nsw i64 %2011, 2
  %2020 = getelementptr inbounds i16, ptr %374, i64 %2019
  %2021 = load i16, ptr %2020, align 2, !tbaa !44
  %2022 = getelementptr inbounds i16, ptr %1943, i64 %2019
  store i16 %2021, ptr %2022, align 2, !tbaa !44
  %2023 = add nuw nsw i64 %2011, 3
  %2024 = getelementptr inbounds i16, ptr %374, i64 %2023
  %2025 = load i16, ptr %2024, align 2, !tbaa !44
  %2026 = getelementptr inbounds i16, ptr %1943, i64 %2023
  store i16 %2025, ptr %2026, align 2, !tbaa !44
  %2027 = add nuw nsw i64 %2011, 4
  %2028 = icmp eq i64 %2027, %1946
  br i1 %2028, label %2029, label %2010, !llvm.loop !348

2029:                                             ; preds = %2007, %2010, %1974, %1989
  %2030 = shl i64 %1938, 31
  %2031 = add i64 %2030, -4294967296
  %2032 = ashr i64 %2031, 32
  %2033 = getelementptr inbounds i16, ptr %1943, i64 %2032
  %2034 = load i16, ptr %2033, align 2, !tbaa !44
  br label %2035

2035:                                             ; preds = %1926, %2029
  %2036 = phi i64 [ %1939, %2029 ], [ 0, %1926 ]
  %2037 = phi i16 [ %2034, %2029 ], [ -1, %1926 ]
  %2038 = and i64 %2036, 4294967295
  %2039 = getelementptr inbounds i16, ptr %1943, i64 %2038
  store i16 %2037, ptr %2039, align 2, !tbaa !44
  %2040 = trunc i64 %1939 to i16
  %2041 = add i16 %2040, 1
  %2042 = sext i32 %1936 to i64
  %2043 = getelementptr inbounds i16, ptr %1284, i64 %2042
  store i16 %2041, ptr %2043, align 2, !tbaa !44
  %2044 = add nsw i32 %1940, 2
  %2045 = add nsw i32 %2044, %1936
  %2046 = select i1 %141, i32 0, i32 %2045
  store i32 %2046, ptr %13, align 8
  br label %2076

2047:                                             ; preds = %688
  %2048 = load ptr, ptr %8, align 8, !tbaa !46
  %2049 = load i32, ptr %13, align 8, !tbaa !17
  %2050 = add i32 %2049, 1
  %2051 = sext i32 %2050 to i64
  %2052 = getelementptr inbounds i16, ptr %2048, i64 %2051
  %2053 = sext i32 %2049 to i64
  %2054 = getelementptr inbounds i16, ptr %2048, i64 %2053
  %2055 = load i16, ptr %2054, align 2, !tbaa !44
  %2056 = zext i16 %2055 to i32
  %2057 = add i32 %2050, %2056
  %2058 = add nsw i32 %2056, -1
  %2059 = sext i32 %2057 to i64
  %2060 = getelementptr inbounds i16, ptr %2048, i64 %2059
  %2061 = load i16, ptr %2060, align 2, !tbaa !44
  %2062 = zext i16 %2061 to i32
  %2063 = add nuw nsw i32 %2062, 1
  %2064 = add nsw i32 %2063, %2057
  %2065 = add nsw i32 %2062, -1
  %2066 = add i32 %2064, 1
  %2067 = sext i32 %2066 to i64
  %2068 = getelementptr inbounds i16, ptr %2048, i64 %2067
  %2069 = sext i32 %2064 to i64
  %2070 = getelementptr inbounds i16, ptr %2048, i64 %2069
  %2071 = load i16, ptr %2070, align 2, !tbaa !44
  %2072 = zext i16 %2071 to i32
  %2073 = add i32 %2066, %2072
  store i32 %2073, ptr %13, align 8, !tbaa !17
  %2074 = add nsw i32 %2072, -1
  %2075 = load i32, ptr @_ZN20ComputeNonbondedUtil17pairInteractionOnE, align 4, !tbaa !5
  br label %2076

2076:                                             ; preds = %2035, %2047
  %2077 = phi i32 [ %2075, %2047 ], [ %1289, %2035 ]
  %2078 = phi ptr [ %2052, %2047 ], [ %1288, %2035 ]
  %2079 = phi i32 [ %2058, %2047 ], [ %1809, %2035 ]
  %2080 = phi i32 [ %2065, %2047 ], [ %1831, %2035 ]
  %2081 = phi ptr [ %2068, %2047 ], [ %1943, %2035 ]
  %2082 = phi i32 [ %2074, %2047 ], [ %1940, %2035 ]
  %2083 = phi i32 [ %670, %2047 ], [ %1246, %2035 ]
  %2084 = phi i32 [ %669, %2047 ], [ %1247, %2035 ]
  %2085 = phi i32 [ %668, %2047 ], [ %1248, %2035 ]
  %2086 = phi i32 [ %667, %2047 ], [ %1249, %2035 ]
  %2087 = phi ptr [ %665, %2047 ], [ %942, %2035 ]
  %2088 = phi ptr [ %664, %2047 ], [ %943, %2035 ]
  %2089 = phi ptr [ %663, %2047 ], [ %944, %2035 ]
  %2090 = icmp eq i32 %2077, 0
  %2091 = load i32, ptr @_ZN20ComputeNonbondedUtil19pairInteractionSelfE, align 4
  %2092 = icmp ne i32 %2091, 0
  %2093 = select i1 %2090, i1 true, i1 %2092
  br i1 %2093, label %2099, label %2094

2094:                                             ; preds = %2076
  %2095 = getelementptr inbounds %struct.CompAtom, ptr %38, i64 %673, i32 3
  %2096 = load i8, ptr %2095, align 2, !tbaa !301
  %2097 = icmp eq i8 %2096, 1
  %2098 = select i1 %2097, double 1.000000e+00, double -1.000000e+00
  br label %2099

2099:                                             ; preds = %2076, %2094
  %2100 = phi double [ %2098, %2094 ], [ 0.000000e+00, %2076 ]
  %2101 = getelementptr inbounds %struct.CompAtom, ptr %38, i64 %673, i32 1
  %2102 = load float, ptr %2101, align 8, !tbaa !79
  %2103 = fpext float %2102 to double
  %2104 = fmul double %2103, 0x4074C104816F0069
  %2105 = fmul double %28, %2104
  %2106 = fmul double %24, %2105
  %2107 = getelementptr inbounds %struct.CompAtom, ptr %38, i64 %673, i32 2
  %2108 = load i16, ptr %2107, align 4, !tbaa !80
  %2109 = sext i16 %2108 to i32
  %2110 = load ptr, ptr %645, align 8, !tbaa !81
  %2111 = load i32, ptr %646, align 8, !tbaa !83
  %2112 = shl nsw i32 %2109, 1
  %2113 = mul i32 %2112, %2111
  %2114 = zext i32 %2113 to i64
  %2115 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %2110, i64 %2114
  %2116 = load double, ptr @_ZN20ComputeNonbondedUtil7cutoff2E, align 8, !tbaa !19
  %2117 = extractelement <2 x double> %691, i64 0
  %2118 = extractelement <2 x double> %691, i64 1
  %2119 = tail call noundef i32 @_Z22pairlist_from_pairlistddddPK8CompAtomPKtiPtdPd(double noundef %2116, double noundef %2117, double noundef %2118, double noundef %694, ptr noundef %40, ptr noundef nonnull %2078, i32 noundef %2079, ptr noundef %93, double noundef %30, ptr noundef %139)
  %2120 = icmp sgt i32 %2119, 0
  br i1 %2120, label %2121, label %2256

2121:                                             ; preds = %2099
  %2122 = load ptr, ptr @_ZN20ComputeNonbondedUtil8r2_tableE, align 8, !tbaa !23
  %2123 = zext i32 %2119 to i64
  br label %2124

2124:                                             ; preds = %2121, %2124
  %2125 = phi i64 [ 0, %2121 ], [ %2254, %2124 ]
  %2126 = phi double [ 0.000000e+00, %2121 ], [ %2250, %2124 ]
  %2127 = phi <2 x double> [ %672, %2121 ], [ %2229, %2124 ]
  %2128 = phi <2 x double> [ zeroinitializer, %2121 ], [ %2246, %2124 ]
  %2129 = shl nuw nsw i64 %2125, 1
  %2130 = getelementptr inbounds i32, ptr %140, i64 %2129
  %2131 = load i32, ptr %2130, align 4, !tbaa !5
  %2132 = ashr i32 %2131, 14
  %2133 = add nsw i32 %2132, %33
  %2134 = getelementptr inbounds i16, ptr %93, i64 %2125
  %2135 = load i16, ptr %2134, align 2, !tbaa !44
  %2136 = zext i16 %2135 to i64
  %2137 = getelementptr inbounds %struct.CompAtom, ptr %40, i64 %2136
  %2138 = getelementptr inbounds double, ptr %139, i64 %2125
  %2139 = load double, ptr %2138, align 8, !tbaa !19
  %2140 = sext i32 %2133 to i64
  %2141 = getelementptr inbounds double, ptr %2122, i64 %2140
  %2142 = load double, ptr %2141, align 8, !tbaa !19
  %2143 = fsub double %2139, %2142
  %2144 = shl nsw i32 %2133, 4
  %2145 = sext i32 %2144 to i64
  %2146 = getelementptr inbounds double, ptr %27, i64 %2145
  %2147 = getelementptr inbounds %struct.CompAtom, ptr %40, i64 %2136, i32 2
  %2148 = load i16, ptr %2147, align 4, !tbaa !80
  %2149 = sext i16 %2148 to i32
  %2150 = shl nsw i32 %2149, 1
  %2151 = sext i32 %2150 to i64
  %2152 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %2115, i64 %2151
  %2153 = getelementptr inbounds %class.Vector, ptr %624, i64 %2136
  %2154 = getelementptr inbounds %struct.CompAtom, ptr %40, i64 %2136, i32 1
  %2155 = load float, ptr %2154, align 8, !tbaa !79
  %2156 = fpext float %2155 to double
  %2157 = fmul double %2106, %2156
  %2158 = getelementptr inbounds %class.Vector, ptr %2137, i64 0, i32 2
  %2159 = load double, ptr %2158, align 8, !tbaa !49
  %2160 = fsub double %694, %2159
  %2161 = load double, ptr %2152, align 8, !tbaa !84
  %2162 = fmul double %28, %2161
  %2163 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %2115, i64 %2151, i32 1
  %2164 = load double, ptr %2163, align 8, !tbaa !86
  %2165 = load double, ptr %2146, align 8, !tbaa !19
  %2166 = getelementptr inbounds double, ptr %2146, i64 2
  %2167 = load double, ptr %2166, align 8, !tbaa !19
  %2168 = fmul double %2164, %647
  %2169 = fmul double %2168, %2167
  %2170 = tail call double @llvm.fmuladd.f64(double %2162, double %2165, double %2169)
  %2171 = getelementptr inbounds double, ptr %2146, i64 1
  %2172 = load double, ptr %2171, align 8, !tbaa !19
  %2173 = getelementptr inbounds double, ptr %2146, i64 3
  %2174 = load double, ptr %2173, align 8, !tbaa !19
  %2175 = fmul double %2168, %2174
  %2176 = tail call double @llvm.fmuladd.f64(double %2162, double %2172, double %2175)
  %2177 = getelementptr inbounds double, ptr %2146, i64 4
  %2178 = load double, ptr %2177, align 8, !tbaa !19
  %2179 = getelementptr inbounds double, ptr %2146, i64 6
  %2180 = load double, ptr %2179, align 8, !tbaa !19
  %2181 = fmul double %2168, %2180
  %2182 = tail call double @llvm.fmuladd.f64(double %2162, double %2178, double %2181)
  %2183 = getelementptr inbounds double, ptr %2146, i64 5
  %2184 = load double, ptr %2183, align 8, !tbaa !19
  %2185 = getelementptr inbounds double, ptr %2146, i64 7
  %2186 = load double, ptr %2185, align 8, !tbaa !19
  %2187 = fmul double %2168, %2186
  %2188 = tail call double @llvm.fmuladd.f64(double %2162, double %2184, double %2187)
  %2189 = tail call double @llvm.fmuladd.f64(double %2143, double %2170, double %2176)
  %2190 = tail call double @llvm.fmuladd.f64(double %2189, double %2143, double %2182)
  %2191 = fmul double %2100, %2190
  %2192 = load double, ptr %649, align 8, !tbaa !19
  %2193 = tail call double @llvm.fmuladd.f64(double %2191, double %2160, double %2192)
  %2194 = getelementptr inbounds double, ptr %2146, i64 8
  %2195 = getelementptr inbounds double, ptr %2146, i64 9
  %2196 = getelementptr inbounds double, ptr %2146, i64 10
  %2197 = getelementptr inbounds double, ptr %2146, i64 11
  %2198 = insertelement <2 x double> poison, double %2143, i64 0
  %2199 = shufflevector <2 x double> %2198, <2 x double> poison, <2 x i32> zeroinitializer
  %2200 = load double, ptr %651, align 8, !tbaa !19
  %2201 = load <2 x double>, ptr %2137, align 8, !tbaa !19
  %2202 = fsub <2 x double> %691, %2201
  %2203 = load <2 x double>, ptr %648, align 8, !tbaa !19
  %2204 = insertelement <2 x double> poison, double %2191, i64 0
  %2205 = shufflevector <2 x double> %2204, <2 x double> poison, <2 x i32> zeroinitializer
  %2206 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2205, <2 x double> %2202, <2 x double> %2203)
  store <2 x double> %2206, ptr %648, align 8, !tbaa !19
  store double %2193, ptr %649, align 8, !tbaa !19
  %2207 = load double, ptr %2194, align 8, !tbaa !19
  %2208 = fmul double %2157, %2207
  %2209 = load double, ptr %2195, align 8, !tbaa !19
  %2210 = fmul double %2157, %2209
  %2211 = load double, ptr %2196, align 8, !tbaa !19
  %2212 = fmul double %2157, %2211
  %2213 = load double, ptr %2197, align 8, !tbaa !19
  %2214 = fmul double %2157, %2213
  %2215 = insertelement <2 x double> poison, double %2208, i64 0
  %2216 = insertelement <2 x double> %2215, double %2170, i64 1
  %2217 = fmul <2 x double> %2199, %2216
  %2218 = insertelement <2 x double> poison, double %2210, i64 0
  %2219 = insertelement <2 x double> %2218, double %2176, i64 1
  %2220 = fmul <2 x double> %2219, <double 2.500000e-01, double 2.500000e-01>
  %2221 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2217, <2 x double> <double 0x3FC5555555555555, double 0x3FC5555555555555>, <2 x double> %2220)
  %2222 = insertelement <2 x double> poison, double %2212, i64 0
  %2223 = insertelement <2 x double> %2222, double %2182, i64 1
  %2224 = fmul <2 x double> %2223, <double 5.000000e-01, double 5.000000e-01>
  %2225 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2221, <2 x double> %2199, <2 x double> %2224)
  %2226 = insertelement <2 x double> poison, double %2214, i64 0
  %2227 = insertelement <2 x double> %2226, double %2188, i64 1
  %2228 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2225, <2 x double> %2199, <2 x double> %2227)
  %2229 = fsub <2 x double> %2127, %2228
  %2230 = tail call double @llvm.fmuladd.f64(double %2143, double %2208, double %2210)
  %2231 = tail call double @llvm.fmuladd.f64(double %2230, double %2143, double %2212)
  %2232 = fmul double %2100, %2231
  %2233 = load <2 x double>, ptr %650, align 8, !tbaa !19
  %2234 = insertelement <2 x double> poison, double %2232, i64 0
  %2235 = shufflevector <2 x double> %2234, <2 x double> poison, <2 x i32> zeroinitializer
  %2236 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2235, <2 x double> %2202, <2 x double> %2233)
  store <2 x double> %2236, ptr %650, align 8, !tbaa !19
  %2237 = tail call double @llvm.fmuladd.f64(double %2232, double %2160, double %2200)
  store double %2237, ptr %651, align 8, !tbaa !19
  %2238 = fadd double %2170, %2208
  %2239 = fadd double %2176, %2210
  %2240 = fadd double %2182, %2212
  %2241 = tail call double @llvm.fmuladd.f64(double %2143, double %2238, double %2239)
  %2242 = tail call double @llvm.fmuladd.f64(double %2241, double %2143, double %2240)
  %2243 = insertelement <2 x double> poison, double %2242, i64 0
  %2244 = shufflevector <2 x double> %2243, <2 x double> poison, <2 x i32> zeroinitializer
  %2245 = fmul <2 x double> %2202, %2244
  %2246 = fadd <2 x double> %2128, %2245
  %2247 = load <2 x double>, ptr %2153, align 8, !tbaa !19
  %2248 = fsub <2 x double> %2247, %2245
  store <2 x double> %2248, ptr %2153, align 8, !tbaa !19
  %2249 = fmul double %2160, %2242
  %2250 = fadd double %2126, %2249
  %2251 = getelementptr inbounds %class.Vector, ptr %624, i64 %2136, i32 2
  %2252 = load double, ptr %2251, align 8, !tbaa !87
  %2253 = fsub double %2252, %2249
  store double %2253, ptr %2251, align 8, !tbaa !87
  %2254 = add nuw nsw i64 %2125, 1
  %2255 = icmp eq i64 %2254, %2123
  br i1 %2255, label %2256, label %2124

2256:                                             ; preds = %2124, %2099
  %2257 = phi double [ 0.000000e+00, %2099 ], [ %2250, %2124 ]
  %2258 = phi <2 x double> [ %672, %2099 ], [ %2229, %2124 ]
  %2259 = phi <2 x double> [ zeroinitializer, %2099 ], [ %2246, %2124 ]
  %2260 = load double, ptr @_ZN20ComputeNonbondedUtil7cutoff2E, align 8, !tbaa !19
  %2261 = tail call noundef i32 @_Z22pairlist_from_pairlistddddPK8CompAtomPKtiPtdPd(double noundef %2260, double noundef %2117, double noundef %2118, double noundef %694, ptr noundef %40, ptr noundef %2081, i32 noundef %2082, ptr noundef %93, double noundef %30, ptr noundef %139)
  %2262 = icmp sgt i32 %2261, 0
  br i1 %2262, label %2263, label %2400

2263:                                             ; preds = %2256
  %2264 = load ptr, ptr @_ZN20ComputeNonbondedUtil8r2_tableE, align 8, !tbaa !23
  %2265 = zext i32 %2261 to i64
  br label %2266

2266:                                             ; preds = %2263, %2266
  %2267 = phi i64 [ 0, %2263 ], [ %2398, %2266 ]
  %2268 = phi double [ %2257, %2263 ], [ %2394, %2266 ]
  %2269 = phi <2 x double> [ %2258, %2263 ], [ %2373, %2266 ]
  %2270 = phi <2 x double> [ %2259, %2263 ], [ %2390, %2266 ]
  %2271 = shl nuw nsw i64 %2267, 1
  %2272 = getelementptr inbounds i32, ptr %140, i64 %2271
  %2273 = load i32, ptr %2272, align 4, !tbaa !5
  %2274 = ashr i32 %2273, 14
  %2275 = add nsw i32 %2274, %33
  %2276 = getelementptr inbounds i16, ptr %93, i64 %2267
  %2277 = load i16, ptr %2276, align 2, !tbaa !44
  %2278 = zext i16 %2277 to i64
  %2279 = getelementptr inbounds %struct.CompAtom, ptr %40, i64 %2278
  %2280 = getelementptr inbounds double, ptr %139, i64 %2267
  %2281 = load double, ptr %2280, align 8, !tbaa !19
  %2282 = sext i32 %2275 to i64
  %2283 = getelementptr inbounds double, ptr %2264, i64 %2282
  %2284 = load double, ptr %2283, align 8, !tbaa !19
  %2285 = fsub double %2281, %2284
  %2286 = shl nsw i32 %2275, 4
  %2287 = sext i32 %2286 to i64
  %2288 = getelementptr inbounds double, ptr %27, i64 %2287
  %2289 = getelementptr inbounds %struct.CompAtom, ptr %40, i64 %2278, i32 2
  %2290 = load i16, ptr %2289, align 4, !tbaa !80
  %2291 = sext i16 %2290 to i32
  %2292 = shl nsw i32 %2291, 1
  %2293 = sext i32 %2292 to i64
  %2294 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %2115, i64 %2293
  %2295 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %2294, i64 1
  %2296 = getelementptr inbounds %class.Vector, ptr %624, i64 %2278
  %2297 = getelementptr inbounds %struct.CompAtom, ptr %40, i64 %2278, i32 1
  %2298 = load float, ptr %2297, align 8, !tbaa !79
  %2299 = fpext float %2298 to double
  %2300 = fmul double %2106, %2299
  %2301 = getelementptr inbounds %class.Vector, ptr %2279, i64 0, i32 2
  %2302 = load double, ptr %2301, align 8, !tbaa !49
  %2303 = fsub double %694, %2302
  %2304 = load double, ptr %2295, align 8, !tbaa !84
  %2305 = fmul double %28, %2304
  %2306 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %2294, i64 1, i32 1
  %2307 = load double, ptr %2306, align 8, !tbaa !86
  %2308 = load double, ptr %2288, align 8, !tbaa !19
  %2309 = getelementptr inbounds double, ptr %2288, i64 2
  %2310 = load double, ptr %2309, align 8, !tbaa !19
  %2311 = fmul double %2307, %647
  %2312 = fmul double %2311, %2310
  %2313 = tail call double @llvm.fmuladd.f64(double %2305, double %2308, double %2312)
  %2314 = getelementptr inbounds double, ptr %2288, i64 1
  %2315 = load double, ptr %2314, align 8, !tbaa !19
  %2316 = getelementptr inbounds double, ptr %2288, i64 3
  %2317 = load double, ptr %2316, align 8, !tbaa !19
  %2318 = fmul double %2311, %2317
  %2319 = tail call double @llvm.fmuladd.f64(double %2305, double %2315, double %2318)
  %2320 = getelementptr inbounds double, ptr %2288, i64 4
  %2321 = load double, ptr %2320, align 8, !tbaa !19
  %2322 = getelementptr inbounds double, ptr %2288, i64 6
  %2323 = load double, ptr %2322, align 8, !tbaa !19
  %2324 = fmul double %2311, %2323
  %2325 = tail call double @llvm.fmuladd.f64(double %2305, double %2321, double %2324)
  %2326 = getelementptr inbounds double, ptr %2288, i64 5
  %2327 = load double, ptr %2326, align 8, !tbaa !19
  %2328 = getelementptr inbounds double, ptr %2288, i64 7
  %2329 = load double, ptr %2328, align 8, !tbaa !19
  %2330 = fmul double %2311, %2329
  %2331 = tail call double @llvm.fmuladd.f64(double %2305, double %2327, double %2330)
  %2332 = tail call double @llvm.fmuladd.f64(double %2285, double %2313, double %2319)
  %2333 = tail call double @llvm.fmuladd.f64(double %2332, double %2285, double %2325)
  %2334 = fmul double %2100, %2333
  %2335 = load double, ptr %649, align 8, !tbaa !19
  %2336 = tail call double @llvm.fmuladd.f64(double %2334, double %2303, double %2335)
  %2337 = fmul double %653, %2300
  %2338 = getelementptr inbounds double, ptr %2288, i64 8
  %2339 = getelementptr inbounds double, ptr %2288, i64 9
  %2340 = getelementptr inbounds double, ptr %2288, i64 10
  %2341 = getelementptr inbounds double, ptr %2288, i64 11
  %2342 = insertelement <2 x double> poison, double %2285, i64 0
  %2343 = shufflevector <2 x double> %2342, <2 x double> poison, <2 x i32> zeroinitializer
  %2344 = load double, ptr %651, align 8, !tbaa !19
  %2345 = load <2 x double>, ptr %2279, align 8, !tbaa !19
  %2346 = fsub <2 x double> %691, %2345
  %2347 = load <2 x double>, ptr %648, align 8, !tbaa !19
  %2348 = insertelement <2 x double> poison, double %2334, i64 0
  %2349 = shufflevector <2 x double> %2348, <2 x double> poison, <2 x i32> zeroinitializer
  %2350 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2349, <2 x double> %2346, <2 x double> %2347)
  store <2 x double> %2350, ptr %648, align 8, !tbaa !19
  store double %2336, ptr %649, align 8, !tbaa !19
  %2351 = load double, ptr %2338, align 8, !tbaa !19
  %2352 = fmul double %2337, %2351
  %2353 = load double, ptr %2339, align 8, !tbaa !19
  %2354 = fmul double %2337, %2353
  %2355 = load double, ptr %2340, align 8, !tbaa !19
  %2356 = fmul double %2337, %2355
  %2357 = load double, ptr %2341, align 8, !tbaa !19
  %2358 = fmul double %2337, %2357
  %2359 = insertelement <2 x double> poison, double %2352, i64 0
  %2360 = insertelement <2 x double> %2359, double %2313, i64 1
  %2361 = fmul <2 x double> %2343, %2360
  %2362 = insertelement <2 x double> poison, double %2354, i64 0
  %2363 = insertelement <2 x double> %2362, double %2319, i64 1
  %2364 = fmul <2 x double> %2363, <double 2.500000e-01, double 2.500000e-01>
  %2365 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2361, <2 x double> <double 0x3FC5555555555555, double 0x3FC5555555555555>, <2 x double> %2364)
  %2366 = insertelement <2 x double> poison, double %2356, i64 0
  %2367 = insertelement <2 x double> %2366, double %2325, i64 1
  %2368 = fmul <2 x double> %2367, <double 5.000000e-01, double 5.000000e-01>
  %2369 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2365, <2 x double> %2343, <2 x double> %2368)
  %2370 = insertelement <2 x double> poison, double %2358, i64 0
  %2371 = insertelement <2 x double> %2370, double %2331, i64 1
  %2372 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2369, <2 x double> %2343, <2 x double> %2371)
  %2373 = fsub <2 x double> %2269, %2372
  %2374 = tail call double @llvm.fmuladd.f64(double %2285, double %2352, double %2354)
  %2375 = tail call double @llvm.fmuladd.f64(double %2374, double %2285, double %2356)
  %2376 = fmul double %2100, %2375
  %2377 = load <2 x double>, ptr %650, align 8, !tbaa !19
  %2378 = insertelement <2 x double> poison, double %2376, i64 0
  %2379 = shufflevector <2 x double> %2378, <2 x double> poison, <2 x i32> zeroinitializer
  %2380 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2379, <2 x double> %2346, <2 x double> %2377)
  store <2 x double> %2380, ptr %650, align 8, !tbaa !19
  %2381 = tail call double @llvm.fmuladd.f64(double %2376, double %2303, double %2344)
  store double %2381, ptr %651, align 8, !tbaa !19
  %2382 = fadd double %2313, %2352
  %2383 = fadd double %2319, %2354
  %2384 = fadd double %2325, %2356
  %2385 = tail call double @llvm.fmuladd.f64(double %2285, double %2382, double %2383)
  %2386 = tail call double @llvm.fmuladd.f64(double %2385, double %2285, double %2384)
  %2387 = insertelement <2 x double> poison, double %2386, i64 0
  %2388 = shufflevector <2 x double> %2387, <2 x double> poison, <2 x i32> zeroinitializer
  %2389 = fmul <2 x double> %2346, %2388
  %2390 = fadd <2 x double> %2270, %2389
  %2391 = load <2 x double>, ptr %2296, align 8, !tbaa !19
  %2392 = fsub <2 x double> %2391, %2389
  store <2 x double> %2392, ptr %2296, align 8, !tbaa !19
  %2393 = fmul double %2303, %2386
  %2394 = fadd double %2268, %2393
  %2395 = getelementptr inbounds %class.Vector, ptr %624, i64 %2278, i32 2
  %2396 = load double, ptr %2395, align 8, !tbaa !87
  %2397 = fsub double %2396, %2393
  store double %2397, ptr %2395, align 8, !tbaa !87
  %2398 = add nuw nsw i64 %2267, 1
  %2399 = icmp eq i64 %2398, %2265
  br i1 %2399, label %2400, label %2266

2400:                                             ; preds = %2266, %2256
  %2401 = phi double [ %2257, %2256 ], [ %2394, %2266 ]
  %2402 = phi <2 x double> [ %2258, %2256 ], [ %2373, %2266 ]
  %2403 = phi <2 x double> [ %2259, %2256 ], [ %2390, %2266 ]
  %2404 = add i32 %2080, %661
  %2405 = add i32 %2404, %2261
  %2406 = getelementptr inbounds %class.Vector, ptr %624, i64 %673
  %2407 = load <2 x double>, ptr %2406, align 8, !tbaa !19
  %2408 = fadd <2 x double> %2403, %2407
  store <2 x double> %2408, ptr %2406, align 8, !tbaa !19
  %2409 = getelementptr inbounds %class.Vector, ptr %624, i64 %673, i32 2
  %2410 = load double, ptr %2409, align 8, !tbaa !87
  %2411 = fadd double %2401, %2410
  store double %2411, ptr %2409, align 8, !tbaa !87
  br label %2412

2412:                                             ; preds = %1351, %1297, %2400, %684
  %2413 = phi i32 [ %689, %2400 ], [ %685, %684 ], [ %689, %1297 ], [ %689, %1351 ]
  %2414 = phi i32 [ %2083, %2400 ], [ %670, %684 ], [ %1246, %1297 ], [ %1246, %1351 ]
  %2415 = phi i32 [ %2084, %2400 ], [ %669, %684 ], [ %1247, %1297 ], [ %1247, %1351 ]
  %2416 = phi i32 [ %2085, %2400 ], [ %668, %684 ], [ %1248, %1297 ], [ %1248, %1351 ]
  %2417 = phi i32 [ %2086, %2400 ], [ %667, %684 ], [ %1249, %1297 ], [ %1249, %1351 ]
  %2418 = phi i32 [ %696, %2400 ], [ %666, %684 ], [ %696, %1297 ], [ %696, %1351 ]
  %2419 = phi ptr [ %2087, %2400 ], [ %665, %684 ], [ %942, %1297 ], [ %942, %1351 ]
  %2420 = phi ptr [ %2088, %2400 ], [ %664, %684 ], [ %943, %1297 ], [ %943, %1351 ]
  %2421 = phi ptr [ %2089, %2400 ], [ %663, %684 ], [ %944, %1297 ], [ %944, %1351 ]
  %2422 = phi i32 [ %662, %2400 ], [ %687, %684 ], [ %662, %1297 ], [ %662, %1351 ]
  %2423 = phi i32 [ %2405, %2400 ], [ %661, %684 ], [ %661, %1297 ], [ %661, %1351 ]
  %2424 = phi <2 x double> [ %2402, %2400 ], [ %672, %684 ], [ %672, %1297 ], [ %672, %1351 ]
  %2425 = add nsw i32 %2422, 1
  %2426 = icmp slt i32 %2425, %630
  br i1 %2426, label %660, label %2427

2427:                                             ; preds = %2412, %618
  %2428 = phi ptr [ null, %618 ], [ %2421, %2412 ]
  %2429 = phi i32 [ 0, %618 ], [ %2423, %2412 ]
  %2430 = phi <2 x double> [ zeroinitializer, %618 ], [ %2424, %2412 ]
  %2431 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 3
  %2432 = load ptr, ptr %2431, align 8, !tbaa !23
  %2433 = icmp sgt i32 %35, 0
  br i1 %2433, label %2434, label %2436

2434:                                             ; preds = %2427
  %2435 = zext i32 %35 to i64
  br label %2462

2436:                                             ; preds = %2462, %2427
  %2437 = phi <4 x double> [ zeroinitializer, %2427 ], [ %2483, %2462 ]
  %2438 = phi <2 x double> [ zeroinitializer, %2427 ], [ %2489, %2462 ]
  %2439 = sitofp i32 %2429 to double
  %2440 = getelementptr inbounds double, ptr %6, i64 22
  %2441 = load double, ptr %2440, align 8, !tbaa !19
  %2442 = fadd double %2441, %2439
  store double %2442, ptr %2440, align 8, !tbaa !19
  %2443 = getelementptr inbounds double, ptr %6, i64 2
  %2444 = load double, ptr %6, align 8, !tbaa !19
  %2445 = extractelement <2 x double> %2430, i64 0
  %2446 = fadd double %2445, %2444
  store double %2446, ptr %6, align 8, !tbaa !19
  %2447 = load <4 x double>, ptr %2443, align 8, !tbaa !19
  %2448 = shufflevector <2 x double> %2430, <2 x double> poison, <4 x i32> <i32 1, i32 poison, i32 poison, i32 poison>
  %2449 = shufflevector <2 x double> %2438, <2 x double> poison, <4 x i32> <i32 poison, i32 1, i32 poison, i32 poison>
  %2450 = shufflevector <4 x double> %2448, <4 x double> %2449, <4 x i32> <i32 0, i32 5, i32 poison, i32 poison>
  %2451 = shufflevector <4 x double> %2450, <4 x double> %2437, <4 x i32> <i32 0, i32 1, i32 4, i32 7>
  %2452 = fadd <4 x double> %2451, %2447
  store <4 x double> %2452, ptr %2443, align 8, !tbaa !19
  %2453 = getelementptr inbounds double, ptr %6, i64 6
  %2454 = load <4 x double>, ptr %2453, align 8, !tbaa !19
  %2455 = fadd <4 x double> %2437, %2454
  store <4 x double> %2455, ptr %2453, align 8, !tbaa !19
  %2456 = getelementptr inbounds double, ptr %6, i64 10
  %2457 = load <2 x double>, ptr %2456, align 8, !tbaa !19
  %2458 = shufflevector <4 x double> %2437, <4 x double> poison, <2 x i32> <i32 2, i32 poison>
  %2459 = shufflevector <2 x double> %2458, <2 x double> %2438, <2 x i32> <i32 0, i32 2>
  %2460 = fadd <2 x double> %2459, %2457
  store <2 x double> %2460, ptr %2456, align 8, !tbaa !19
  %2461 = icmp eq ptr %2428, null
  br i1 %2461, label %2493, label %2492

2462:                                             ; preds = %2434, %2462
  %2463 = phi i64 [ 0, %2434 ], [ %2490, %2462 ]
  %2464 = phi <4 x double> [ zeroinitializer, %2434 ], [ %2483, %2462 ]
  %2465 = phi <2 x double> [ zeroinitializer, %2434 ], [ %2489, %2462 ]
  %2466 = getelementptr inbounds %class.Vector, ptr %624, i64 %2463
  %2467 = getelementptr inbounds %class.Vector, ptr %2432, i64 %2463
  %2468 = load <2 x double>, ptr %2466, align 8, !tbaa !19
  %2469 = load <2 x double>, ptr %2467, align 8, !tbaa !19
  %2470 = fadd <2 x double> %2468, %2469
  store <2 x double> %2470, ptr %2467, align 8, !tbaa !19
  %2471 = getelementptr inbounds %class.Vector, ptr %624, i64 %2463, i32 2
  %2472 = load double, ptr %2471, align 8, !tbaa !87
  %2473 = getelementptr inbounds %class.Vector, ptr %2432, i64 %2463, i32 2
  %2474 = load double, ptr %2473, align 8, !tbaa !87
  %2475 = fadd double %2472, %2474
  store double %2475, ptr %2473, align 8, !tbaa !87
  %2476 = getelementptr inbounds %struct.CompAtom, ptr %38, i64 %2463
  %2477 = load double, ptr %2476, align 8, !tbaa !67
  %2478 = getelementptr inbounds %class.Vector, ptr %2476, i64 0, i32 1
  %2479 = load <2 x double>, ptr %2466, align 8, !tbaa !19
  %2480 = shufflevector <2 x double> %2479, <2 x double> poison, <4 x i32> <i32 0, i32 1, i32 1, i32 0>
  %2481 = load <2 x double>, ptr %2478, align 8, !tbaa !19
  %2482 = shufflevector <2 x double> %2481, <2 x double> poison, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %2483 = tail call <4 x double> @llvm.fmuladd.v4f64(<4 x double> %2480, <4 x double> %2482, <4 x double> %2464)
  %2484 = load double, ptr %2471, align 8, !tbaa !87
  %2485 = shufflevector <2 x double> %2479, <2 x double> poison, <2 x i32> <i32 poison, i32 0>
  %2486 = insertelement <2 x double> %2485, double %2484, i64 0
  %2487 = shufflevector <2 x double> %2481, <2 x double> poison, <2 x i32> <i32 1, i32 poison>
  %2488 = insertelement <2 x double> %2487, double %2477, i64 1
  %2489 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2486, <2 x double> %2488, <2 x double> %2465)
  %2490 = add nuw nsw i64 %2463, 1
  %2491 = icmp eq i64 %2490, %2435
  br i1 %2491, label %2436, label %2462

2492:                                             ; preds = %2436
  tail call void @_ZdaPv(ptr noundef nonnull %2428) #10
  br label %2493

2493:                                             ; preds = %2436, %2492, %1
  ret void
}

; Function Attrs: sspstrong uwtable
define dso_local void @_ZN20ComputeNonbondedUtil30calc_self_energy_fullelect_intEP9nonbonded(ptr nocapture noundef readonly %0) local_unnamed_addr #0 align 2 {
  %2 = load i32, ptr @_ZN20ComputeNonbondedUtil8commOnlyE, align 4, !tbaa !5
  %3 = icmp eq i32 %2, 0
  br i1 %3, label %4, label %2785

4:                                                ; preds = %1
  %5 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 7
  %6 = load ptr, ptr %5, align 8, !tbaa !9
  %7 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 10
  %8 = load ptr, ptr %7, align 8, !tbaa !14
  %9 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 11
  %10 = load i32, ptr %9, align 8, !tbaa !15
  %11 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 12
  %12 = load i32, ptr %11, align 4, !tbaa !16
  %13 = getelementptr inbounds %class.Pairlists, ptr %8, i64 0, i32 1
  store i32 0, ptr %13, align 8, !tbaa !17
  %14 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 6
  %15 = load <2 x double>, ptr %14, align 8, !tbaa !19
  %16 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 6, i32 2
  %17 = load double, ptr %16, align 8, !tbaa !20
  %18 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 13
  %19 = load double, ptr %18, align 8, !tbaa !21
  %20 = fmul double %19, %19
  %21 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 14
  %22 = load double, ptr %21, align 8, !tbaa !22
  %23 = fmul double %22, %22
  %24 = load double, ptr @_ZN20ComputeNonbondedUtil12dielectric_1E, align 8, !tbaa !19
  %25 = load ptr, ptr @_ZN20ComputeNonbondedUtil7ljTableE, align 8, !tbaa !23
  %26 = load ptr, ptr @_ZN20ComputeNonbondedUtil3molE, align 8, !tbaa !23
  %27 = load ptr, ptr @_ZN20ComputeNonbondedUtil11table_shortE, align 8, !tbaa !23
  %28 = load ptr, ptr @_ZN20ComputeNonbondedUtil10slow_tableE, align 8, !tbaa !23
  %29 = load double, ptr @_ZN20ComputeNonbondedUtil7scalingE, align 8, !tbaa !19
  %30 = load double, ptr @_ZN20ComputeNonbondedUtil7scale14E, align 8, !tbaa !19
  %31 = fsub double 1.000000e+00, %30
  %32 = load double, ptr @_ZN20ComputeNonbondedUtil8r2_deltaE, align 8, !tbaa !19
  %33 = load i32, ptr @_ZN20ComputeNonbondedUtil12r2_delta_expE, align 4, !tbaa !5
  %34 = shl i32 %33, 6
  %35 = add i32 %34, -65472
  %36 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 5
  %37 = load i32, ptr %36, align 8, !tbaa !5
  %38 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 5, i64 1
  %39 = load i32, ptr %38, align 4, !tbaa !5
  %40 = load ptr, ptr %0, align 8, !tbaa !23
  %41 = getelementptr inbounds [2 x ptr], ptr %0, i64 0, i64 1
  %42 = load ptr, ptr %41, align 8, !tbaa !23
  %43 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 1
  %44 = load ptr, ptr %43, align 8, !tbaa !23
  %45 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 1, i64 1
  %46 = load ptr, ptr %45, align 8, !tbaa !23
  %47 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 9
  %48 = load ptr, ptr %47, align 8, !tbaa !24
  %49 = add nsw i32 %39, 5
  %50 = getelementptr inbounds %class.ResizeArray, ptr %48, i64 0, i32 1
  %51 = load ptr, ptr %50, align 8, !tbaa !25
  %52 = getelementptr inbounds %class.ResizeArrayRaw, ptr %51, i64 0, i32 2
  %53 = load i32, ptr %52, align 8, !tbaa !27
  %54 = icmp slt i32 %53, %49
  br i1 %54, label %55, label %93

55:                                               ; preds = %4
  %56 = getelementptr inbounds %class.ResizeArrayRaw, ptr %51, i64 0, i32 3
  %57 = load i32, ptr %56, align 4, !tbaa !30
  %58 = icmp slt i32 %57, %49
  br i1 %58, label %59, label %93

59:                                               ; preds = %55
  %60 = sitofp i32 %57 to float
  %61 = getelementptr inbounds %class.ResizeArrayRaw, ptr %51, i64 0, i32 5
  %62 = load float, ptr %61, align 4, !tbaa !31
  %63 = fmul float %62, %60
  %64 = fptosi float %63 to i32
  %65 = tail call i32 @llvm.smax.i32(i32 %64, i32 %49)
  %66 = sub nsw i32 %65, %57
  %67 = getelementptr inbounds %class.ResizeArrayRaw, ptr %51, i64 0, i32 6
  %68 = load i32, ptr %67, align 8, !tbaa !32
  %69 = icmp slt i32 %66, %68
  %70 = add nsw i32 %68, %57
  %71 = select i1 %69, i32 %70, i32 %65
  %72 = sext i32 %71 to i64
  %73 = shl nsw i64 %72, 1
  %74 = add nsw i64 %73, 31
  %75 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %74) #9
  %76 = getelementptr inbounds i8, ptr %75, i64 31
  %77 = ptrtoint ptr %76 to i64
  %78 = and i64 %77, 31
  %79 = sub nsw i64 0, %78
  %80 = getelementptr inbounds i8, ptr %76, i64 %79
  %81 = load ptr, ptr %51, align 8, !tbaa !33
  %82 = sext i32 %53 to i64
  %83 = shl nsw i64 %82, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %80, ptr align 1 %81, i64 %83, i1 false)
  %84 = icmp eq i32 %57, 0
  br i1 %84, label %90, label %85

85:                                               ; preds = %59
  %86 = getelementptr inbounds %class.ResizeArrayRaw, ptr %51, i64 0, i32 1
  %87 = load ptr, ptr %86, align 8, !tbaa !34
  %88 = icmp eq ptr %87, null
  br i1 %88, label %90, label %89

89:                                               ; preds = %85
  tail call void @_ZdaPv(ptr noundef nonnull %87) #10
  br label %90

90:                                               ; preds = %89, %85, %59
  %91 = getelementptr inbounds %class.ResizeArrayRaw, ptr %51, i64 0, i32 1
  store ptr %75, ptr %91, align 8, !tbaa !34
  store ptr %80, ptr %51, align 8, !tbaa !33
  store i32 %71, ptr %56, align 4, !tbaa !30
  %92 = load ptr, ptr %50, align 8, !tbaa !25
  br label %93

93:                                               ; preds = %4, %55, %90
  %94 = phi ptr [ %51, %4 ], [ %51, %55 ], [ %92, %90 ]
  store i32 %49, ptr %52, align 8, !tbaa !27
  %95 = load ptr, ptr %94, align 8, !tbaa !33
  %96 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %48, i64 0, i32 1, i32 1
  %97 = load ptr, ptr %96, align 8, !tbaa !35
  %98 = getelementptr inbounds %class.ResizeArrayRaw.23, ptr %97, i64 0, i32 2
  %99 = load i32, ptr %98, align 8, !tbaa !37
  %100 = icmp slt i32 %99, %49
  br i1 %100, label %101, label %139

101:                                              ; preds = %93
  %102 = getelementptr inbounds %class.ResizeArrayRaw.23, ptr %97, i64 0, i32 3
  %103 = load i32, ptr %102, align 4, !tbaa !39
  %104 = icmp slt i32 %103, %49
  br i1 %104, label %105, label %139

105:                                              ; preds = %101
  %106 = sitofp i32 %103 to float
  %107 = getelementptr inbounds %class.ResizeArrayRaw.23, ptr %97, i64 0, i32 5
  %108 = load float, ptr %107, align 4, !tbaa !40
  %109 = fmul float %108, %106
  %110 = fptosi float %109 to i32
  %111 = tail call i32 @llvm.smax.i32(i32 %110, i32 %49)
  %112 = sub nsw i32 %111, %103
  %113 = getelementptr inbounds %class.ResizeArrayRaw.23, ptr %97, i64 0, i32 6
  %114 = load i32, ptr %113, align 8, !tbaa !41
  %115 = icmp slt i32 %112, %114
  %116 = add nsw i32 %114, %103
  %117 = select i1 %115, i32 %116, i32 %111
  %118 = sext i32 %117 to i64
  %119 = shl nsw i64 %118, 3
  %120 = add nsw i64 %119, 31
  %121 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %120) #9
  %122 = getelementptr inbounds i8, ptr %121, i64 31
  %123 = ptrtoint ptr %122 to i64
  %124 = and i64 %123, 31
  %125 = sub nsw i64 0, %124
  %126 = getelementptr inbounds i8, ptr %122, i64 %125
  %127 = load ptr, ptr %97, align 8, !tbaa !42
  %128 = sext i32 %99 to i64
  %129 = shl nsw i64 %128, 3
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %126, ptr align 1 %127, i64 %129, i1 false)
  %130 = icmp eq i32 %103, 0
  br i1 %130, label %136, label %131

131:                                              ; preds = %105
  %132 = getelementptr inbounds %class.ResizeArrayRaw.23, ptr %97, i64 0, i32 1
  %133 = load ptr, ptr %132, align 8, !tbaa !43
  %134 = icmp eq ptr %133, null
  br i1 %134, label %136, label %135

135:                                              ; preds = %131
  tail call void @_ZdaPv(ptr noundef nonnull %133) #10
  br label %136

136:                                              ; preds = %135, %131, %105
  %137 = getelementptr inbounds %class.ResizeArrayRaw.23, ptr %97, i64 0, i32 1
  store ptr %121, ptr %137, align 8, !tbaa !43
  store ptr %126, ptr %97, align 8, !tbaa !42
  store i32 %117, ptr %102, align 4, !tbaa !39
  %138 = load ptr, ptr %96, align 8, !tbaa !35
  br label %139

139:                                              ; preds = %93, %101, %136
  %140 = phi ptr [ %97, %93 ], [ %97, %101 ], [ %138, %136 ]
  store i32 %49, ptr %98, align 8, !tbaa !37
  %141 = load ptr, ptr %140, align 8, !tbaa !42
  %142 = getelementptr inbounds i32, ptr %141, i64 1
  %143 = icmp eq i32 %10, 0
  %144 = icmp ne i32 %12, 0
  %145 = select i1 %143, i1 %144, i1 false
  %146 = select i1 %145, i32 0, i32 %49
  %147 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %48, i64 0, i32 2, i32 1
  %148 = load ptr, ptr %147, align 8, !tbaa !25
  %149 = getelementptr inbounds %class.ResizeArrayRaw, ptr %148, i64 0, i32 2
  %150 = load i32, ptr %149, align 8, !tbaa !27
  %151 = icmp slt i32 %150, %146
  br i1 %151, label %152, label %190

152:                                              ; preds = %139
  %153 = getelementptr inbounds %class.ResizeArrayRaw, ptr %148, i64 0, i32 3
  %154 = load i32, ptr %153, align 4, !tbaa !30
  %155 = icmp slt i32 %154, %146
  br i1 %155, label %156, label %190

156:                                              ; preds = %152
  %157 = sitofp i32 %154 to float
  %158 = getelementptr inbounds %class.ResizeArrayRaw, ptr %148, i64 0, i32 5
  %159 = load float, ptr %158, align 4, !tbaa !31
  %160 = fmul float %159, %157
  %161 = fptosi float %160 to i32
  %162 = tail call i32 @llvm.smax.i32(i32 %161, i32 %146)
  %163 = sub nsw i32 %162, %154
  %164 = getelementptr inbounds %class.ResizeArrayRaw, ptr %148, i64 0, i32 6
  %165 = load i32, ptr %164, align 8, !tbaa !32
  %166 = icmp slt i32 %163, %165
  %167 = add nsw i32 %165, %154
  %168 = select i1 %166, i32 %167, i32 %162
  %169 = sext i32 %168 to i64
  %170 = shl nsw i64 %169, 1
  %171 = add nsw i64 %170, 31
  %172 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %171) #9
  %173 = getelementptr inbounds i8, ptr %172, i64 31
  %174 = ptrtoint ptr %173 to i64
  %175 = and i64 %174, 31
  %176 = sub nsw i64 0, %175
  %177 = getelementptr inbounds i8, ptr %173, i64 %176
  %178 = load ptr, ptr %148, align 8, !tbaa !33
  %179 = sext i32 %150 to i64
  %180 = shl nsw i64 %179, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %177, ptr align 1 %178, i64 %180, i1 false)
  %181 = icmp eq i32 %154, 0
  br i1 %181, label %187, label %182

182:                                              ; preds = %156
  %183 = getelementptr inbounds %class.ResizeArrayRaw, ptr %148, i64 0, i32 1
  %184 = load ptr, ptr %183, align 8, !tbaa !34
  %185 = icmp eq ptr %184, null
  br i1 %185, label %187, label %186

186:                                              ; preds = %182
  tail call void @_ZdaPv(ptr noundef nonnull %184) #10
  br label %187

187:                                              ; preds = %186, %182, %156
  %188 = getelementptr inbounds %class.ResizeArrayRaw, ptr %148, i64 0, i32 1
  store ptr %172, ptr %188, align 8, !tbaa !34
  store ptr %177, ptr %148, align 8, !tbaa !33
  store i32 %168, ptr %153, align 4, !tbaa !30
  %189 = load ptr, ptr %147, align 8, !tbaa !25
  br label %190

190:                                              ; preds = %139, %152, %187
  %191 = phi ptr [ %148, %139 ], [ %148, %152 ], [ %189, %187 ]
  store i32 %146, ptr %149, align 8, !tbaa !27
  %192 = load ptr, ptr %191, align 8, !tbaa !33
  %193 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %48, i64 0, i32 3, i32 1
  %194 = load ptr, ptr %193, align 8, !tbaa !25
  %195 = getelementptr inbounds %class.ResizeArrayRaw, ptr %194, i64 0, i32 2
  %196 = load i32, ptr %195, align 8, !tbaa !27
  %197 = icmp slt i32 %196, %146
  br i1 %197, label %198, label %236

198:                                              ; preds = %190
  %199 = getelementptr inbounds %class.ResizeArrayRaw, ptr %194, i64 0, i32 3
  %200 = load i32, ptr %199, align 4, !tbaa !30
  %201 = icmp slt i32 %200, %146
  br i1 %201, label %202, label %236

202:                                              ; preds = %198
  %203 = sitofp i32 %200 to float
  %204 = getelementptr inbounds %class.ResizeArrayRaw, ptr %194, i64 0, i32 5
  %205 = load float, ptr %204, align 4, !tbaa !31
  %206 = fmul float %205, %203
  %207 = fptosi float %206 to i32
  %208 = tail call i32 @llvm.smax.i32(i32 %207, i32 %146)
  %209 = sub nsw i32 %208, %200
  %210 = getelementptr inbounds %class.ResizeArrayRaw, ptr %194, i64 0, i32 6
  %211 = load i32, ptr %210, align 8, !tbaa !32
  %212 = icmp slt i32 %209, %211
  %213 = add nsw i32 %211, %200
  %214 = select i1 %212, i32 %213, i32 %208
  %215 = sext i32 %214 to i64
  %216 = shl nsw i64 %215, 1
  %217 = add nsw i64 %216, 31
  %218 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %217) #9
  %219 = getelementptr inbounds i8, ptr %218, i64 31
  %220 = ptrtoint ptr %219 to i64
  %221 = and i64 %220, 31
  %222 = sub nsw i64 0, %221
  %223 = getelementptr inbounds i8, ptr %219, i64 %222
  %224 = load ptr, ptr %194, align 8, !tbaa !33
  %225 = sext i32 %196 to i64
  %226 = shl nsw i64 %225, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %223, ptr align 1 %224, i64 %226, i1 false)
  %227 = icmp eq i32 %200, 0
  br i1 %227, label %233, label %228

228:                                              ; preds = %202
  %229 = getelementptr inbounds %class.ResizeArrayRaw, ptr %194, i64 0, i32 1
  %230 = load ptr, ptr %229, align 8, !tbaa !34
  %231 = icmp eq ptr %230, null
  br i1 %231, label %233, label %232

232:                                              ; preds = %228
  tail call void @_ZdaPv(ptr noundef nonnull %230) #10
  br label %233

233:                                              ; preds = %232, %228, %202
  %234 = getelementptr inbounds %class.ResizeArrayRaw, ptr %194, i64 0, i32 1
  store ptr %218, ptr %234, align 8, !tbaa !34
  store ptr %223, ptr %194, align 8, !tbaa !33
  store i32 %214, ptr %199, align 4, !tbaa !30
  %235 = load ptr, ptr %193, align 8, !tbaa !25
  br label %236

236:                                              ; preds = %190, %198, %233
  %237 = phi ptr [ %194, %190 ], [ %194, %198 ], [ %235, %233 ]
  store i32 %146, ptr %195, align 8, !tbaa !27
  %238 = load ptr, ptr %237, align 8, !tbaa !33
  %239 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %48, i64 0, i32 4, i32 1
  %240 = load ptr, ptr %239, align 8, !tbaa !25
  %241 = getelementptr inbounds %class.ResizeArrayRaw, ptr %240, i64 0, i32 2
  %242 = load i32, ptr %241, align 8, !tbaa !27
  %243 = icmp slt i32 %242, %146
  br i1 %243, label %244, label %282

244:                                              ; preds = %236
  %245 = getelementptr inbounds %class.ResizeArrayRaw, ptr %240, i64 0, i32 3
  %246 = load i32, ptr %245, align 4, !tbaa !30
  %247 = icmp slt i32 %246, %146
  br i1 %247, label %248, label %282

248:                                              ; preds = %244
  %249 = sitofp i32 %246 to float
  %250 = getelementptr inbounds %class.ResizeArrayRaw, ptr %240, i64 0, i32 5
  %251 = load float, ptr %250, align 4, !tbaa !31
  %252 = fmul float %251, %249
  %253 = fptosi float %252 to i32
  %254 = tail call i32 @llvm.smax.i32(i32 %253, i32 %146)
  %255 = sub nsw i32 %254, %246
  %256 = getelementptr inbounds %class.ResizeArrayRaw, ptr %240, i64 0, i32 6
  %257 = load i32, ptr %256, align 8, !tbaa !32
  %258 = icmp slt i32 %255, %257
  %259 = add nsw i32 %257, %246
  %260 = select i1 %258, i32 %259, i32 %254
  %261 = sext i32 %260 to i64
  %262 = shl nsw i64 %261, 1
  %263 = add nsw i64 %262, 31
  %264 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %263) #9
  %265 = getelementptr inbounds i8, ptr %264, i64 31
  %266 = ptrtoint ptr %265 to i64
  %267 = and i64 %266, 31
  %268 = sub nsw i64 0, %267
  %269 = getelementptr inbounds i8, ptr %265, i64 %268
  %270 = load ptr, ptr %240, align 8, !tbaa !33
  %271 = sext i32 %242 to i64
  %272 = shl nsw i64 %271, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %269, ptr align 1 %270, i64 %272, i1 false)
  %273 = icmp eq i32 %246, 0
  br i1 %273, label %279, label %274

274:                                              ; preds = %248
  %275 = getelementptr inbounds %class.ResizeArrayRaw, ptr %240, i64 0, i32 1
  %276 = load ptr, ptr %275, align 8, !tbaa !34
  %277 = icmp eq ptr %276, null
  br i1 %277, label %279, label %278

278:                                              ; preds = %274
  tail call void @_ZdaPv(ptr noundef nonnull %276) #10
  br label %279

279:                                              ; preds = %278, %274, %248
  %280 = getelementptr inbounds %class.ResizeArrayRaw, ptr %240, i64 0, i32 1
  store ptr %264, ptr %280, align 8, !tbaa !34
  store ptr %269, ptr %240, align 8, !tbaa !33
  store i32 %260, ptr %245, align 4, !tbaa !30
  %281 = load ptr, ptr %239, align 8, !tbaa !25
  br label %282

282:                                              ; preds = %236, %244, %279
  %283 = phi ptr [ %240, %236 ], [ %240, %244 ], [ %281, %279 ]
  store i32 %146, ptr %241, align 8, !tbaa !27
  %284 = load ptr, ptr %283, align 8, !tbaa !33
  %285 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %48, i64 0, i32 5, i32 1
  %286 = load ptr, ptr %285, align 8, !tbaa !25
  %287 = getelementptr inbounds %class.ResizeArrayRaw, ptr %286, i64 0, i32 2
  %288 = load i32, ptr %287, align 8, !tbaa !27
  %289 = icmp slt i32 %288, %146
  br i1 %289, label %290, label %328

290:                                              ; preds = %282
  %291 = getelementptr inbounds %class.ResizeArrayRaw, ptr %286, i64 0, i32 3
  %292 = load i32, ptr %291, align 4, !tbaa !30
  %293 = icmp slt i32 %292, %146
  br i1 %293, label %294, label %328

294:                                              ; preds = %290
  %295 = sitofp i32 %292 to float
  %296 = getelementptr inbounds %class.ResizeArrayRaw, ptr %286, i64 0, i32 5
  %297 = load float, ptr %296, align 4, !tbaa !31
  %298 = fmul float %297, %295
  %299 = fptosi float %298 to i32
  %300 = tail call i32 @llvm.smax.i32(i32 %299, i32 %146)
  %301 = sub nsw i32 %300, %292
  %302 = getelementptr inbounds %class.ResizeArrayRaw, ptr %286, i64 0, i32 6
  %303 = load i32, ptr %302, align 8, !tbaa !32
  %304 = icmp slt i32 %301, %303
  %305 = add nsw i32 %303, %292
  %306 = select i1 %304, i32 %305, i32 %300
  %307 = sext i32 %306 to i64
  %308 = shl nsw i64 %307, 1
  %309 = add nsw i64 %308, 31
  %310 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %309) #9
  %311 = getelementptr inbounds i8, ptr %310, i64 31
  %312 = ptrtoint ptr %311 to i64
  %313 = and i64 %312, 31
  %314 = sub nsw i64 0, %313
  %315 = getelementptr inbounds i8, ptr %311, i64 %314
  %316 = load ptr, ptr %286, align 8, !tbaa !33
  %317 = sext i32 %288 to i64
  %318 = shl nsw i64 %317, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %315, ptr align 1 %316, i64 %318, i1 false)
  %319 = icmp eq i32 %292, 0
  br i1 %319, label %325, label %320

320:                                              ; preds = %294
  %321 = getelementptr inbounds %class.ResizeArrayRaw, ptr %286, i64 0, i32 1
  %322 = load ptr, ptr %321, align 8, !tbaa !34
  %323 = icmp eq ptr %322, null
  br i1 %323, label %325, label %324

324:                                              ; preds = %320
  tail call void @_ZdaPv(ptr noundef nonnull %322) #10
  br label %325

325:                                              ; preds = %324, %320, %294
  %326 = getelementptr inbounds %class.ResizeArrayRaw, ptr %286, i64 0, i32 1
  store ptr %310, ptr %326, align 8, !tbaa !34
  store ptr %315, ptr %286, align 8, !tbaa !33
  store i32 %306, ptr %291, align 4, !tbaa !30
  %327 = load ptr, ptr %285, align 8, !tbaa !25
  br label %328

328:                                              ; preds = %282, %290, %325
  %329 = phi ptr [ %286, %282 ], [ %286, %290 ], [ %327, %325 ]
  store i32 %146, ptr %287, align 8, !tbaa !27
  %330 = load ptr, ptr %329, align 8, !tbaa !33
  %331 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %48, i64 0, i32 6, i32 1
  %332 = load ptr, ptr %331, align 8, !tbaa !25
  %333 = getelementptr inbounds %class.ResizeArrayRaw, ptr %332, i64 0, i32 2
  %334 = load i32, ptr %333, align 8, !tbaa !27
  %335 = icmp slt i32 %334, %146
  br i1 %335, label %336, label %374

336:                                              ; preds = %328
  %337 = getelementptr inbounds %class.ResizeArrayRaw, ptr %332, i64 0, i32 3
  %338 = load i32, ptr %337, align 4, !tbaa !30
  %339 = icmp slt i32 %338, %146
  br i1 %339, label %340, label %374

340:                                              ; preds = %336
  %341 = sitofp i32 %338 to float
  %342 = getelementptr inbounds %class.ResizeArrayRaw, ptr %332, i64 0, i32 5
  %343 = load float, ptr %342, align 4, !tbaa !31
  %344 = fmul float %343, %341
  %345 = fptosi float %344 to i32
  %346 = tail call i32 @llvm.smax.i32(i32 %345, i32 %146)
  %347 = sub nsw i32 %346, %338
  %348 = getelementptr inbounds %class.ResizeArrayRaw, ptr %332, i64 0, i32 6
  %349 = load i32, ptr %348, align 8, !tbaa !32
  %350 = icmp slt i32 %347, %349
  %351 = add nsw i32 %349, %338
  %352 = select i1 %350, i32 %351, i32 %346
  %353 = sext i32 %352 to i64
  %354 = shl nsw i64 %353, 1
  %355 = add nsw i64 %354, 31
  %356 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %355) #9
  %357 = getelementptr inbounds i8, ptr %356, i64 31
  %358 = ptrtoint ptr %357 to i64
  %359 = and i64 %358, 31
  %360 = sub nsw i64 0, %359
  %361 = getelementptr inbounds i8, ptr %357, i64 %360
  %362 = load ptr, ptr %332, align 8, !tbaa !33
  %363 = sext i32 %334 to i64
  %364 = shl nsw i64 %363, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %361, ptr align 1 %362, i64 %364, i1 false)
  %365 = icmp eq i32 %338, 0
  br i1 %365, label %371, label %366

366:                                              ; preds = %340
  %367 = getelementptr inbounds %class.ResizeArrayRaw, ptr %332, i64 0, i32 1
  %368 = load ptr, ptr %367, align 8, !tbaa !34
  %369 = icmp eq ptr %368, null
  br i1 %369, label %371, label %370

370:                                              ; preds = %366
  tail call void @_ZdaPv(ptr noundef nonnull %368) #10
  br label %371

371:                                              ; preds = %370, %366, %340
  %372 = getelementptr inbounds %class.ResizeArrayRaw, ptr %332, i64 0, i32 1
  store ptr %356, ptr %372, align 8, !tbaa !34
  store ptr %361, ptr %332, align 8, !tbaa !33
  store i32 %352, ptr %337, align 4, !tbaa !30
  %373 = load ptr, ptr %331, align 8, !tbaa !25
  br label %374

374:                                              ; preds = %328, %336, %371
  %375 = phi ptr [ %332, %328 ], [ %332, %336 ], [ %373, %371 ]
  store i32 %146, ptr %333, align 8, !tbaa !27
  %376 = load ptr, ptr %375, align 8, !tbaa !33
  %377 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %48, i64 0, i32 15, i32 1
  %378 = load ptr, ptr %377, align 8, !tbaa !25
  %379 = getelementptr inbounds %class.ResizeArrayRaw, ptr %378, i64 0, i32 2
  %380 = load i32, ptr %379, align 8, !tbaa !27
  %381 = icmp slt i32 %380, %146
  br i1 %381, label %382, label %420

382:                                              ; preds = %374
  %383 = getelementptr inbounds %class.ResizeArrayRaw, ptr %378, i64 0, i32 3
  %384 = load i32, ptr %383, align 4, !tbaa !30
  %385 = icmp slt i32 %384, %146
  br i1 %385, label %386, label %420

386:                                              ; preds = %382
  %387 = sitofp i32 %384 to float
  %388 = getelementptr inbounds %class.ResizeArrayRaw, ptr %378, i64 0, i32 5
  %389 = load float, ptr %388, align 4, !tbaa !31
  %390 = fmul float %389, %387
  %391 = fptosi float %390 to i32
  %392 = tail call i32 @llvm.smax.i32(i32 %391, i32 %146)
  %393 = sub nsw i32 %392, %384
  %394 = getelementptr inbounds %class.ResizeArrayRaw, ptr %378, i64 0, i32 6
  %395 = load i32, ptr %394, align 8, !tbaa !32
  %396 = icmp slt i32 %393, %395
  %397 = add nsw i32 %395, %384
  %398 = select i1 %396, i32 %397, i32 %392
  %399 = sext i32 %398 to i64
  %400 = shl nsw i64 %399, 1
  %401 = add nsw i64 %400, 31
  %402 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %401) #9
  %403 = getelementptr inbounds i8, ptr %402, i64 31
  %404 = ptrtoint ptr %403 to i64
  %405 = and i64 %404, 31
  %406 = sub nsw i64 0, %405
  %407 = getelementptr inbounds i8, ptr %403, i64 %406
  %408 = load ptr, ptr %378, align 8, !tbaa !33
  %409 = sext i32 %380 to i64
  %410 = shl nsw i64 %409, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %407, ptr align 1 %408, i64 %410, i1 false)
  %411 = icmp eq i32 %384, 0
  br i1 %411, label %417, label %412

412:                                              ; preds = %386
  %413 = getelementptr inbounds %class.ResizeArrayRaw, ptr %378, i64 0, i32 1
  %414 = load ptr, ptr %413, align 8, !tbaa !34
  %415 = icmp eq ptr %414, null
  br i1 %415, label %417, label %416

416:                                              ; preds = %412
  tail call void @_ZdaPv(ptr noundef nonnull %414) #10
  br label %417

417:                                              ; preds = %416, %412, %386
  %418 = getelementptr inbounds %class.ResizeArrayRaw, ptr %378, i64 0, i32 1
  store ptr %402, ptr %418, align 8, !tbaa !34
  store ptr %407, ptr %378, align 8, !tbaa !33
  store i32 %398, ptr %383, align 4, !tbaa !30
  %419 = load ptr, ptr %377, align 8, !tbaa !25
  br label %420

420:                                              ; preds = %374, %382, %417
  %421 = phi ptr [ %378, %374 ], [ %378, %382 ], [ %419, %417 ]
  store i32 %146, ptr %379, align 8, !tbaa !27
  %422 = load ptr, ptr %421, align 8, !tbaa !33
  %423 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %48, i64 0, i32 16, i32 1
  %424 = load ptr, ptr %423, align 8, !tbaa !25
  %425 = getelementptr inbounds %class.ResizeArrayRaw, ptr %424, i64 0, i32 2
  %426 = load i32, ptr %425, align 8, !tbaa !27
  %427 = icmp slt i32 %426, %146
  br i1 %427, label %428, label %466

428:                                              ; preds = %420
  %429 = getelementptr inbounds %class.ResizeArrayRaw, ptr %424, i64 0, i32 3
  %430 = load i32, ptr %429, align 4, !tbaa !30
  %431 = icmp slt i32 %430, %146
  br i1 %431, label %432, label %466

432:                                              ; preds = %428
  %433 = sitofp i32 %430 to float
  %434 = getelementptr inbounds %class.ResizeArrayRaw, ptr %424, i64 0, i32 5
  %435 = load float, ptr %434, align 4, !tbaa !31
  %436 = fmul float %435, %433
  %437 = fptosi float %436 to i32
  %438 = tail call i32 @llvm.smax.i32(i32 %437, i32 %146)
  %439 = sub nsw i32 %438, %430
  %440 = getelementptr inbounds %class.ResizeArrayRaw, ptr %424, i64 0, i32 6
  %441 = load i32, ptr %440, align 8, !tbaa !32
  %442 = icmp slt i32 %439, %441
  %443 = add nsw i32 %441, %430
  %444 = select i1 %442, i32 %443, i32 %438
  %445 = sext i32 %444 to i64
  %446 = shl nsw i64 %445, 1
  %447 = add nsw i64 %446, 31
  %448 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %447) #9
  %449 = getelementptr inbounds i8, ptr %448, i64 31
  %450 = ptrtoint ptr %449 to i64
  %451 = and i64 %450, 31
  %452 = sub nsw i64 0, %451
  %453 = getelementptr inbounds i8, ptr %449, i64 %452
  %454 = load ptr, ptr %424, align 8, !tbaa !33
  %455 = sext i32 %426 to i64
  %456 = shl nsw i64 %455, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %453, ptr align 1 %454, i64 %456, i1 false)
  %457 = icmp eq i32 %430, 0
  br i1 %457, label %463, label %458

458:                                              ; preds = %432
  %459 = getelementptr inbounds %class.ResizeArrayRaw, ptr %424, i64 0, i32 1
  %460 = load ptr, ptr %459, align 8, !tbaa !34
  %461 = icmp eq ptr %460, null
  br i1 %461, label %463, label %462

462:                                              ; preds = %458
  tail call void @_ZdaPv(ptr noundef nonnull %460) #10
  br label %463

463:                                              ; preds = %462, %458, %432
  %464 = getelementptr inbounds %class.ResizeArrayRaw, ptr %424, i64 0, i32 1
  store ptr %448, ptr %464, align 8, !tbaa !34
  store ptr %453, ptr %424, align 8, !tbaa !33
  store i32 %444, ptr %429, align 4, !tbaa !30
  %465 = load ptr, ptr %423, align 8, !tbaa !25
  br label %466

466:                                              ; preds = %420, %428, %463
  %467 = phi ptr [ %424, %420 ], [ %424, %428 ], [ %465, %463 ]
  store i32 %146, ptr %425, align 8, !tbaa !27
  %468 = load ptr, ptr %467, align 8, !tbaa !33
  br i1 %145, label %610, label %469

469:                                              ; preds = %466
  %470 = icmp sgt i32 %39, 0
  br i1 %470, label %471, label %601

471:                                              ; preds = %469
  %472 = zext i32 %39 to i64
  %473 = and i64 %472, 1
  %474 = icmp eq i32 %39, 1
  br i1 %474, label %507, label %475

475:                                              ; preds = %471
  %476 = and i64 %472, 4294967294
  br label %477

477:                                              ; preds = %502, %475
  %478 = phi i64 [ 0, %475 ], [ %504, %502 ]
  %479 = phi i32 [ 0, %475 ], [ %503, %502 ]
  %480 = phi i64 [ 0, %475 ], [ %505, %502 ]
  %481 = getelementptr inbounds %struct.CompAtom, ptr %42, i64 %478, i32 4
  %482 = load i8, ptr %481, align 1
  %483 = and i8 %482, 7
  %484 = icmp eq i8 %483, 0
  br i1 %484, label %490, label %485

485:                                              ; preds = %477
  %486 = trunc i64 %478 to i16
  %487 = add nsw i32 %479, 1
  %488 = sext i32 %479 to i64
  %489 = getelementptr inbounds i16, ptr %192, i64 %488
  store i16 %486, ptr %489, align 2, !tbaa !44
  br label %490

490:                                              ; preds = %477, %485
  %491 = phi i32 [ %487, %485 ], [ %479, %477 ]
  %492 = or i64 %478, 1
  %493 = getelementptr inbounds %struct.CompAtom, ptr %42, i64 %492, i32 4
  %494 = load i8, ptr %493, align 1
  %495 = and i8 %494, 7
  %496 = icmp eq i8 %495, 0
  br i1 %496, label %502, label %497

497:                                              ; preds = %490
  %498 = trunc i64 %492 to i16
  %499 = add nsw i32 %491, 1
  %500 = sext i32 %491 to i64
  %501 = getelementptr inbounds i16, ptr %192, i64 %500
  store i16 %498, ptr %501, align 2, !tbaa !44
  br label %502

502:                                              ; preds = %497, %490
  %503 = phi i32 [ %499, %497 ], [ %491, %490 ]
  %504 = add nuw nsw i64 %478, 2
  %505 = add i64 %480, 2
  %506 = icmp eq i64 %505, %476
  br i1 %506, label %507, label %477

507:                                              ; preds = %502, %471
  %508 = phi i32 [ undef, %471 ], [ %503, %502 ]
  %509 = phi i64 [ 0, %471 ], [ %504, %502 ]
  %510 = phi i32 [ 0, %471 ], [ %503, %502 ]
  %511 = icmp eq i64 %473, 0
  br i1 %511, label %522, label %512

512:                                              ; preds = %507
  %513 = getelementptr inbounds %struct.CompAtom, ptr %42, i64 %509, i32 4
  %514 = load i8, ptr %513, align 1
  %515 = and i8 %514, 7
  %516 = icmp eq i8 %515, 0
  br i1 %516, label %522, label %517

517:                                              ; preds = %512
  %518 = trunc i64 %509 to i16
  %519 = add nsw i32 %510, 1
  %520 = sext i32 %510 to i64
  %521 = getelementptr inbounds i16, ptr %192, i64 %520
  store i16 %518, ptr %521, align 2, !tbaa !44
  br label %522

522:                                              ; preds = %512, %517, %507
  %523 = phi i32 [ %508, %507 ], [ %519, %517 ], [ %510, %512 ]
  %524 = icmp eq i32 %523, 0
  br i1 %524, label %532, label %525

525:                                              ; preds = %522
  %526 = add nsw i32 %523, -1
  %527 = sext i32 %526 to i64
  %528 = getelementptr inbounds i16, ptr %192, i64 %527
  %529 = load i16, ptr %528, align 2, !tbaa !44
  %530 = sext i32 %523 to i64
  %531 = getelementptr inbounds i16, ptr %192, i64 %530
  store i16 %529, ptr %531, align 2, !tbaa !44
  br label %532

532:                                              ; preds = %525, %522
  %533 = load i32, ptr @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4, !tbaa !5
  %534 = icmp ne i32 %533, 0
  %535 = icmp sgt i32 %523, 0
  %536 = and i1 %534, %535
  br i1 %536, label %537, label %601

537:                                              ; preds = %532
  %538 = zext i32 %523 to i64
  %539 = and i64 %538, 1
  %540 = icmp eq i32 %523, 1
  br i1 %540, label %575, label %541

541:                                              ; preds = %537
  %542 = and i64 %538, 4294967294
  br label %543

543:                                              ; preds = %570, %541
  %544 = phi i64 [ 0, %541 ], [ %572, %570 ]
  %545 = phi i32 [ 0, %541 ], [ %571, %570 ]
  %546 = phi i64 [ 0, %541 ], [ %573, %570 ]
  %547 = getelementptr inbounds i16, ptr %192, i64 %544
  %548 = load i16, ptr %547, align 2, !tbaa !44
  %549 = zext i16 %548 to i64
  %550 = getelementptr inbounds %struct.CompAtomExt, ptr %46, i64 %549
  %551 = load i32, ptr %550, align 4
  %552 = icmp sgt i32 %551, -1
  br i1 %552, label %553, label %557

553:                                              ; preds = %543
  %554 = add nsw i32 %545, 1
  %555 = sext i32 %545 to i64
  %556 = getelementptr inbounds i16, ptr %238, i64 %555
  store i16 %548, ptr %556, align 2, !tbaa !44
  br label %557

557:                                              ; preds = %543, %553
  %558 = phi i32 [ %545, %543 ], [ %554, %553 ]
  %559 = or i64 %544, 1
  %560 = getelementptr inbounds i16, ptr %192, i64 %559
  %561 = load i16, ptr %560, align 2, !tbaa !44
  %562 = zext i16 %561 to i64
  %563 = getelementptr inbounds %struct.CompAtomExt, ptr %46, i64 %562
  %564 = load i32, ptr %563, align 4
  %565 = icmp sgt i32 %564, -1
  br i1 %565, label %566, label %570

566:                                              ; preds = %557
  %567 = add nsw i32 %558, 1
  %568 = sext i32 %558 to i64
  %569 = getelementptr inbounds i16, ptr %238, i64 %568
  store i16 %561, ptr %569, align 2, !tbaa !44
  br label %570

570:                                              ; preds = %566, %557
  %571 = phi i32 [ %558, %557 ], [ %567, %566 ]
  %572 = add nuw nsw i64 %544, 2
  %573 = add i64 %546, 2
  %574 = icmp eq i64 %573, %542
  br i1 %574, label %575, label %543

575:                                              ; preds = %570, %537
  %576 = phi i32 [ undef, %537 ], [ %571, %570 ]
  %577 = phi i64 [ 0, %537 ], [ %572, %570 ]
  %578 = phi i32 [ 0, %537 ], [ %571, %570 ]
  %579 = icmp eq i64 %539, 0
  br i1 %579, label %591, label %580

580:                                              ; preds = %575
  %581 = getelementptr inbounds i16, ptr %192, i64 %577
  %582 = load i16, ptr %581, align 2, !tbaa !44
  %583 = zext i16 %582 to i64
  %584 = getelementptr inbounds %struct.CompAtomExt, ptr %46, i64 %583
  %585 = load i32, ptr %584, align 4
  %586 = icmp sgt i32 %585, -1
  br i1 %586, label %587, label %591

587:                                              ; preds = %580
  %588 = add nsw i32 %578, 1
  %589 = sext i32 %578 to i64
  %590 = getelementptr inbounds i16, ptr %238, i64 %589
  store i16 %582, ptr %590, align 2, !tbaa !44
  br label %591

591:                                              ; preds = %580, %587, %575
  %592 = phi i32 [ %576, %575 ], [ %578, %580 ], [ %588, %587 ]
  %593 = icmp eq i32 %592, 0
  br i1 %593, label %601, label %594

594:                                              ; preds = %591
  %595 = add nsw i32 %592, -1
  %596 = sext i32 %595 to i64
  %597 = getelementptr inbounds i16, ptr %238, i64 %596
  %598 = load i16, ptr %597, align 2, !tbaa !44
  %599 = sext i32 %592 to i64
  %600 = getelementptr inbounds i16, ptr %238, i64 %599
  store i16 %598, ptr %600, align 2, !tbaa !44
  br label %601

601:                                              ; preds = %469, %532, %594, %591
  %602 = phi i32 [ %523, %594 ], [ %523, %591 ], [ %523, %532 ], [ 0, %469 ]
  %603 = phi i32 [ %592, %594 ], [ 0, %591 ], [ 0, %532 ], [ 0, %469 ]
  %604 = load i32, ptr %13, align 8, !tbaa !17
  %605 = add nsw i32 %604, 1
  store i32 %605, ptr %13, align 8, !tbaa !17
  %606 = trunc i32 %37 to i16
  %607 = load ptr, ptr %8, align 8, !tbaa !46
  %608 = sext i32 %604 to i64
  %609 = getelementptr inbounds i16, ptr %607, i64 %608
  store i16 %606, ptr %609, align 2, !tbaa !44
  br label %620

610:                                              ; preds = %466
  %611 = load ptr, ptr %8, align 8, !tbaa !46
  %612 = load i32, ptr %13, align 8, !tbaa !17
  %613 = add nsw i32 %612, 1
  store i32 %613, ptr %13, align 8, !tbaa !17
  %614 = sext i32 %612 to i64
  %615 = getelementptr inbounds i16, ptr %611, i64 %614
  %616 = load i16, ptr %615, align 2, !tbaa !44
  %617 = zext i16 %616 to i32
  %618 = icmp eq i32 %37, %617
  br i1 %618, label %620, label %619

619:                                              ; preds = %610
  tail call void @_Z8NAMD_bugPKc(ptr noundef nonnull @.str)
  br label %620

620:                                              ; preds = %610, %619, %601
  %621 = phi i32 [ 0, %619 ], [ 0, %610 ], [ %602, %601 ]
  %622 = phi i32 [ 0, %619 ], [ 0, %610 ], [ %603, %601 ]
  %623 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %48, i64 0, i32 17, i32 1
  %624 = load ptr, ptr %623, align 8, !tbaa !172
  tail call void @_ZN14ResizeArrayRawI6VectorE6resizeEi(ptr noundef nonnull align 8 dereferenceable(36) %624, i32 noundef %37)
  %625 = load ptr, ptr %623, align 8, !tbaa !172
  %626 = load ptr, ptr %625, align 8, !tbaa !174
  %627 = sext i32 %37 to i64
  %628 = mul nsw i64 %627, 24
  tail call void @llvm.memset.p0.i64(ptr align 1 %626, i8 0, i64 %628, i1 false)
  %629 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %48, i64 0, i32 18, i32 1
  %630 = load ptr, ptr %629, align 8, !tbaa !172
  tail call void @_ZN14ResizeArrayRawI6VectorE6resizeEi(ptr noundef nonnull align 8 dereferenceable(36) %630, i32 noundef %37)
  %631 = load ptr, ptr %629, align 8, !tbaa !172
  %632 = load ptr, ptr %631, align 8, !tbaa !174
  tail call void @llvm.memset.p0.i64(ptr align 1 %632, i8 0, i64 %628, i1 false)
  %633 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 18
  %634 = load i32, ptr %633, align 4, !tbaa !48
  %635 = add nsw i32 %634, -1
  %636 = add nsw i32 %37, -1
  %637 = icmp sgt i32 %37, 1
  br i1 %637, label %638, label %2659

638:                                              ; preds = %620
  %639 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 16
  %640 = load i32, ptr %639, align 4, !tbaa !47
  %641 = getelementptr inbounds %class.Molecule, ptr %26, i64 0, i32 1
  %642 = getelementptr inbounds %class.Molecule, ptr %26, i64 0, i32 4
  %643 = getelementptr inbounds %class.Molecule, ptr %26, i64 0, i32 2
  %644 = getelementptr inbounds %class.Molecule, ptr %26, i64 0, i32 3
  %645 = ptrtoint ptr %422 to i64
  %646 = add nsw i32 %39, 10
  %647 = getelementptr inbounds %class.Pairlists, ptr %8, i64 0, i32 2
  %648 = ptrtoint ptr %468 to i64
  %649 = ptrtoint ptr %330 to i64
  %650 = ptrtoint ptr %376 to i64
  %651 = getelementptr inbounds %class.LJTable, ptr %25, i64 0, i32 1
  %652 = getelementptr inbounds %class.LJTable, ptr %25, i64 0, i32 2
  %653 = fneg double %29
  %654 = getelementptr inbounds double, ptr %6, i64 26
  %655 = getelementptr inbounds double, ptr %6, i64 28
  %656 = getelementptr inbounds double, ptr %6, i64 29
  %657 = getelementptr inbounds double, ptr %6, i64 30
  %658 = getelementptr inbounds double, ptr %6, i64 31
  %659 = fsub double 1.000000e+00, %31
  %660 = fmul double %31, 2.000000e+00
  %661 = fmul double %31, 4.000000e+00
  %662 = fmul double %31, 6.000000e+00
  %663 = sext i32 %621 to i64
  %664 = sext i32 %622 to i64
  %665 = insertelement <2 x double> poison, double %23, i64 0
  %666 = shufflevector <2 x double> %665, <2 x double> poison, <2 x i32> zeroinitializer
  %667 = getelementptr inbounds i16, ptr %468, i64 1
  %668 = getelementptr inbounds i16, ptr %468, i64 1
  br label %669

669:                                              ; preds = %638, %2643
  %670 = phi i32 [ 0, %638 ], [ %2655, %2643 ]
  %671 = phi double [ 0.000000e+00, %638 ], [ %2654, %2643 ]
  %672 = phi i32 [ 0, %638 ], [ %2657, %2643 ]
  %673 = phi ptr [ null, %638 ], [ %2652, %2643 ]
  %674 = phi ptr [ null, %638 ], [ %2651, %2643 ]
  %675 = phi ptr [ null, %638 ], [ %2650, %2643 ]
  %676 = phi i32 [ 0, %638 ], [ %2649, %2643 ]
  %677 = phi i32 [ 0, %638 ], [ %2648, %2643 ]
  %678 = phi i32 [ 0, %638 ], [ %2647, %2643 ]
  %679 = phi i32 [ 0, %638 ], [ %2646, %2643 ]
  %680 = phi i32 [ 0, %638 ], [ %2645, %2643 ]
  %681 = phi i32 [ %640, %638 ], [ %2644, %2643 ]
  %682 = phi <2 x double> [ zeroinitializer, %638 ], [ %2656, %2643 ]
  %683 = sext i32 %672 to i64
  %684 = getelementptr inbounds %struct.CompAtom, ptr %40, i64 %683
  %685 = getelementptr inbounds %struct.CompAtomExt, ptr %44, i64 %683
  %686 = getelementptr inbounds %struct.CompAtom, ptr %40, i64 %683, i32 4
  %687 = load i8, ptr %686, align 1
  %688 = lshr i8 %687, 3
  %689 = and i8 %688, 15
  %690 = zext i8 %689 to i32
  %691 = icmp eq i8 %689, 0
  br i1 %691, label %698, label %692

692:                                              ; preds = %669
  %693 = icmp eq i32 %681, 0
  br i1 %693, label %698, label %694

694:                                              ; preds = %692
  %695 = add nsw i32 %681, -1
  %696 = add nsw i32 %672, -1
  %697 = add i32 %696, %690
  br label %2643

698:                                              ; preds = %692, %669
  %699 = phi i32 [ %681, %669 ], [ %635, %692 ]
  %700 = load <2 x double>, ptr %684, align 8, !tbaa !19
  %701 = fadd <2 x double> %15, %700
  %702 = getelementptr inbounds %class.Vector, ptr %684, i64 0, i32 2
  %703 = load double, ptr %702, align 8, !tbaa !49
  %704 = fadd double %17, %703
  %705 = add nsw i32 %672, %690
  %706 = select i1 %691, i32 %676, i32 %705
  br i1 %145, label %2057, label %707

707:                                              ; preds = %698
  %708 = load i32, ptr %685, align 4
  %709 = shl i32 %708, 2
  %710 = ashr exact i32 %709, 2
  %711 = load ptr, ptr %641, align 8, !tbaa !51
  %712 = sext i32 %710 to i64
  %713 = getelementptr inbounds %class.ExclusionCheck, ptr %711, i64 %712
  %714 = load i32, ptr %713, align 8, !tbaa !53
  %715 = getelementptr inbounds %class.ExclusionCheck, ptr %711, i64 %712, i32 1
  %716 = load i32, ptr %715, align 4, !tbaa !55
  %717 = getelementptr inbounds %class.ExclusionCheck, ptr %711, i64 %712, i32 2
  %718 = load ptr, ptr %717, align 8, !tbaa !56
  %719 = icmp eq ptr %718, null
  br i1 %719, label %724, label %720

720:                                              ; preds = %707
  %721 = sext i32 %714 to i64
  %722 = sub nsw i64 0, %721
  %723 = getelementptr inbounds i8, ptr %718, i64 %722
  br label %950

724:                                              ; preds = %707
  %725 = icmp eq ptr %673, null
  br i1 %725, label %813, label %726

726:                                              ; preds = %724
  %727 = load i32, ptr %674, align 4, !tbaa !5
  %728 = icmp slt i32 %727, 1
  br i1 %728, label %776, label %729

729:                                              ; preds = %726
  %730 = add nuw i32 %727, 1
  %731 = zext i32 %730 to i64
  %732 = add nsw i64 %731, -1
  %733 = add nsw i64 %731, -2
  %734 = and i64 %732, 3
  %735 = icmp ult i64 %733, 3
  br i1 %735, label %763, label %736

736:                                              ; preds = %729
  %737 = and i64 %732, -4
  br label %738

738:                                              ; preds = %738, %736
  %739 = phi i64 [ 1, %736 ], [ %760, %738 ]
  %740 = phi i64 [ 0, %736 ], [ %761, %738 ]
  %741 = getelementptr inbounds i32, ptr %674, i64 %739
  %742 = load i32, ptr %741, align 4, !tbaa !5
  %743 = sext i32 %742 to i64
  %744 = getelementptr inbounds i8, ptr %673, i64 %743
  store i8 0, ptr %744, align 1, !tbaa !57
  %745 = add nuw nsw i64 %739, 1
  %746 = getelementptr inbounds i32, ptr %674, i64 %745
  %747 = load i32, ptr %746, align 4, !tbaa !5
  %748 = sext i32 %747 to i64
  %749 = getelementptr inbounds i8, ptr %673, i64 %748
  store i8 0, ptr %749, align 1, !tbaa !57
  %750 = add nuw nsw i64 %739, 2
  %751 = getelementptr inbounds i32, ptr %674, i64 %750
  %752 = load i32, ptr %751, align 4, !tbaa !5
  %753 = sext i32 %752 to i64
  %754 = getelementptr inbounds i8, ptr %673, i64 %753
  store i8 0, ptr %754, align 1, !tbaa !57
  %755 = add nuw nsw i64 %739, 3
  %756 = getelementptr inbounds i32, ptr %674, i64 %755
  %757 = load i32, ptr %756, align 4, !tbaa !5
  %758 = sext i32 %757 to i64
  %759 = getelementptr inbounds i8, ptr %673, i64 %758
  store i8 0, ptr %759, align 1, !tbaa !57
  %760 = add nuw nsw i64 %739, 4
  %761 = add i64 %740, 4
  %762 = icmp eq i64 %761, %737
  br i1 %762, label %763, label %738

763:                                              ; preds = %738, %729
  %764 = phi i64 [ 1, %729 ], [ %760, %738 ]
  %765 = icmp eq i64 %734, 0
  br i1 %765, label %776, label %766

766:                                              ; preds = %763, %766
  %767 = phi i64 [ %773, %766 ], [ %764, %763 ]
  %768 = phi i64 [ %774, %766 ], [ 0, %763 ]
  %769 = getelementptr inbounds i32, ptr %674, i64 %767
  %770 = load i32, ptr %769, align 4, !tbaa !5
  %771 = sext i32 %770 to i64
  %772 = getelementptr inbounds i8, ptr %673, i64 %771
  store i8 0, ptr %772, align 1, !tbaa !57
  %773 = add nuw nsw i64 %767, 1
  %774 = add i64 %768, 1
  %775 = icmp eq i64 %774, %734
  br i1 %775, label %776, label %766, !llvm.loop !349

776:                                              ; preds = %763, %766, %726
  %777 = load i32, ptr %675, align 4, !tbaa !5
  %778 = icmp slt i32 %777, 1
  br i1 %778, label %833, label %779

779:                                              ; preds = %776
  %780 = add nuw i32 %777, 1
  %781 = zext i32 %780 to i64
  %782 = add nsw i64 %781, -1
  %783 = add nsw i64 %781, -2
  %784 = and i64 %782, 3
  %785 = icmp ult i64 %783, 3
  br i1 %785, label %820, label %786

786:                                              ; preds = %779
  %787 = and i64 %782, -4
  br label %788

788:                                              ; preds = %788, %786
  %789 = phi i64 [ 1, %786 ], [ %810, %788 ]
  %790 = phi i64 [ 0, %786 ], [ %811, %788 ]
  %791 = getelementptr inbounds i32, ptr %675, i64 %789
  %792 = load i32, ptr %791, align 4, !tbaa !5
  %793 = sext i32 %792 to i64
  %794 = getelementptr inbounds i8, ptr %673, i64 %793
  store i8 0, ptr %794, align 1, !tbaa !57
  %795 = add nuw nsw i64 %789, 1
  %796 = getelementptr inbounds i32, ptr %675, i64 %795
  %797 = load i32, ptr %796, align 4, !tbaa !5
  %798 = sext i32 %797 to i64
  %799 = getelementptr inbounds i8, ptr %673, i64 %798
  store i8 0, ptr %799, align 1, !tbaa !57
  %800 = add nuw nsw i64 %789, 2
  %801 = getelementptr inbounds i32, ptr %675, i64 %800
  %802 = load i32, ptr %801, align 4, !tbaa !5
  %803 = sext i32 %802 to i64
  %804 = getelementptr inbounds i8, ptr %673, i64 %803
  store i8 0, ptr %804, align 1, !tbaa !57
  %805 = add nuw nsw i64 %789, 3
  %806 = getelementptr inbounds i32, ptr %675, i64 %805
  %807 = load i32, ptr %806, align 4, !tbaa !5
  %808 = sext i32 %807 to i64
  %809 = getelementptr inbounds i8, ptr %673, i64 %808
  store i8 0, ptr %809, align 1, !tbaa !57
  %810 = add nuw nsw i64 %789, 4
  %811 = add i64 %790, 4
  %812 = icmp eq i64 %811, %787
  br i1 %812, label %820, label %788

813:                                              ; preds = %724
  %814 = load i32, ptr %642, align 8, !tbaa !60
  %815 = tail call i32 @llvm.smax.i32(i32 %814, i32 -1)
  %816 = sext i32 %815 to i64
  %817 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %816) #9
  %818 = load i32, ptr %642, align 8, !tbaa !60
  %819 = sext i32 %818 to i64
  tail call void @llvm.memset.p0.i64(ptr nonnull align 1 %817, i8 0, i64 %819, i1 false)
  br label %833

820:                                              ; preds = %788, %779
  %821 = phi i64 [ 1, %779 ], [ %810, %788 ]
  %822 = icmp eq i64 %784, 0
  br i1 %822, label %833, label %823

823:                                              ; preds = %820, %823
  %824 = phi i64 [ %830, %823 ], [ %821, %820 ]
  %825 = phi i64 [ %831, %823 ], [ 0, %820 ]
  %826 = getelementptr inbounds i32, ptr %675, i64 %824
  %827 = load i32, ptr %826, align 4, !tbaa !5
  %828 = sext i32 %827 to i64
  %829 = getelementptr inbounds i8, ptr %673, i64 %828
  store i8 0, ptr %829, align 1, !tbaa !57
  %830 = add nuw nsw i64 %824, 1
  %831 = add i64 %825, 1
  %832 = icmp eq i64 %831, %784
  br i1 %832, label %833, label %823, !llvm.loop !350

833:                                              ; preds = %820, %823, %776, %813
  %834 = phi ptr [ %817, %813 ], [ %673, %776 ], [ %673, %823 ], [ %673, %820 ]
  %835 = load i32, ptr %685, align 4
  %836 = shl i32 %835, 2
  %837 = ashr exact i32 %836, 2
  %838 = load ptr, ptr %643, align 8, !tbaa !62
  %839 = sext i32 %837 to i64
  %840 = getelementptr inbounds ptr, ptr %838, i64 %839
  %841 = load ptr, ptr %840, align 8, !tbaa !23
  %842 = load i32, ptr %841, align 4, !tbaa !5
  %843 = icmp slt i32 %842, 1
  br i1 %843, label %896, label %844

844:                                              ; preds = %833
  %845 = add nuw i32 %842, 1
  %846 = zext i32 %845 to i64
  %847 = add nsw i64 %846, -1
  %848 = add nsw i64 %846, -2
  %849 = and i64 %847, 3
  %850 = icmp ult i64 %848, 3
  br i1 %850, label %878, label %851

851:                                              ; preds = %844
  %852 = and i64 %847, -4
  br label %853

853:                                              ; preds = %853, %851
  %854 = phi i64 [ 1, %851 ], [ %875, %853 ]
  %855 = phi i64 [ 0, %851 ], [ %876, %853 ]
  %856 = getelementptr inbounds i32, ptr %841, i64 %854
  %857 = load i32, ptr %856, align 4, !tbaa !5
  %858 = sext i32 %857 to i64
  %859 = getelementptr inbounds i8, ptr %834, i64 %858
  store i8 1, ptr %859, align 1, !tbaa !57
  %860 = add nuw nsw i64 %854, 1
  %861 = getelementptr inbounds i32, ptr %841, i64 %860
  %862 = load i32, ptr %861, align 4, !tbaa !5
  %863 = sext i32 %862 to i64
  %864 = getelementptr inbounds i8, ptr %834, i64 %863
  store i8 1, ptr %864, align 1, !tbaa !57
  %865 = add nuw nsw i64 %854, 2
  %866 = getelementptr inbounds i32, ptr %841, i64 %865
  %867 = load i32, ptr %866, align 4, !tbaa !5
  %868 = sext i32 %867 to i64
  %869 = getelementptr inbounds i8, ptr %834, i64 %868
  store i8 1, ptr %869, align 1, !tbaa !57
  %870 = add nuw nsw i64 %854, 3
  %871 = getelementptr inbounds i32, ptr %841, i64 %870
  %872 = load i32, ptr %871, align 4, !tbaa !5
  %873 = sext i32 %872 to i64
  %874 = getelementptr inbounds i8, ptr %834, i64 %873
  store i8 1, ptr %874, align 1, !tbaa !57
  %875 = add nuw nsw i64 %854, 4
  %876 = add i64 %855, 4
  %877 = icmp eq i64 %876, %852
  br i1 %877, label %878, label %853

878:                                              ; preds = %853, %844
  %879 = phi i64 [ 1, %844 ], [ %875, %853 ]
  %880 = icmp eq i64 %849, 0
  br i1 %880, label %891, label %881

881:                                              ; preds = %878, %881
  %882 = phi i64 [ %888, %881 ], [ %879, %878 ]
  %883 = phi i64 [ %889, %881 ], [ 0, %878 ]
  %884 = getelementptr inbounds i32, ptr %841, i64 %882
  %885 = load i32, ptr %884, align 4, !tbaa !5
  %886 = sext i32 %885 to i64
  %887 = getelementptr inbounds i8, ptr %834, i64 %886
  store i8 1, ptr %887, align 1, !tbaa !57
  %888 = add nuw nsw i64 %882, 1
  %889 = add i64 %883, 1
  %890 = icmp eq i64 %889, %849
  br i1 %890, label %891, label %881, !llvm.loop !351

891:                                              ; preds = %881, %878
  %892 = load i32, ptr %685, align 4
  %893 = shl i32 %892, 2
  %894 = ashr exact i32 %893, 2
  %895 = sext i32 %894 to i64
  br label %896

896:                                              ; preds = %891, %833
  %897 = phi i64 [ %895, %891 ], [ %839, %833 ]
  %898 = load ptr, ptr %644, align 8, !tbaa !64
  %899 = getelementptr inbounds ptr, ptr %898, i64 %897
  %900 = load ptr, ptr %899, align 8, !tbaa !23
  %901 = load i32, ptr %900, align 4, !tbaa !5
  %902 = icmp slt i32 %901, 1
  br i1 %902, label %950, label %903

903:                                              ; preds = %896
  %904 = add nuw i32 %901, 1
  %905 = zext i32 %904 to i64
  %906 = add nsw i64 %905, -1
  %907 = add nsw i64 %905, -2
  %908 = and i64 %906, 3
  %909 = icmp ult i64 %907, 3
  br i1 %909, label %937, label %910

910:                                              ; preds = %903
  %911 = and i64 %906, -4
  br label %912

912:                                              ; preds = %912, %910
  %913 = phi i64 [ 1, %910 ], [ %934, %912 ]
  %914 = phi i64 [ 0, %910 ], [ %935, %912 ]
  %915 = getelementptr inbounds i32, ptr %900, i64 %913
  %916 = load i32, ptr %915, align 4, !tbaa !5
  %917 = sext i32 %916 to i64
  %918 = getelementptr inbounds i8, ptr %834, i64 %917
  store i8 2, ptr %918, align 1, !tbaa !57
  %919 = add nuw nsw i64 %913, 1
  %920 = getelementptr inbounds i32, ptr %900, i64 %919
  %921 = load i32, ptr %920, align 4, !tbaa !5
  %922 = sext i32 %921 to i64
  %923 = getelementptr inbounds i8, ptr %834, i64 %922
  store i8 2, ptr %923, align 1, !tbaa !57
  %924 = add nuw nsw i64 %913, 2
  %925 = getelementptr inbounds i32, ptr %900, i64 %924
  %926 = load i32, ptr %925, align 4, !tbaa !5
  %927 = sext i32 %926 to i64
  %928 = getelementptr inbounds i8, ptr %834, i64 %927
  store i8 2, ptr %928, align 1, !tbaa !57
  %929 = add nuw nsw i64 %913, 3
  %930 = getelementptr inbounds i32, ptr %900, i64 %929
  %931 = load i32, ptr %930, align 4, !tbaa !5
  %932 = sext i32 %931 to i64
  %933 = getelementptr inbounds i8, ptr %834, i64 %932
  store i8 2, ptr %933, align 1, !tbaa !57
  %934 = add nuw nsw i64 %913, 4
  %935 = add i64 %914, 4
  %936 = icmp eq i64 %935, %911
  br i1 %936, label %937, label %912

937:                                              ; preds = %912, %903
  %938 = phi i64 [ 1, %903 ], [ %934, %912 ]
  %939 = icmp eq i64 %908, 0
  br i1 %939, label %950, label %940

940:                                              ; preds = %937, %940
  %941 = phi i64 [ %947, %940 ], [ %938, %937 ]
  %942 = phi i64 [ %948, %940 ], [ 0, %937 ]
  %943 = getelementptr inbounds i32, ptr %900, i64 %941
  %944 = load i32, ptr %943, align 4, !tbaa !5
  %945 = sext i32 %944 to i64
  %946 = getelementptr inbounds i8, ptr %834, i64 %945
  store i8 2, ptr %946, align 1, !tbaa !57
  %947 = add nuw nsw i64 %941, 1
  %948 = add i64 %942, 1
  %949 = icmp eq i64 %948, %908
  br i1 %949, label %950, label %940, !llvm.loop !352

950:                                              ; preds = %937, %940, %896, %720
  %951 = phi ptr [ %723, %720 ], [ %834, %896 ], [ %834, %940 ], [ %834, %937 ]
  %952 = phi ptr [ %675, %720 ], [ %900, %896 ], [ %900, %940 ], [ %900, %937 ]
  %953 = phi ptr [ %674, %720 ], [ %841, %896 ], [ %841, %940 ], [ %841, %937 ]
  %954 = phi ptr [ %673, %720 ], [ %834, %896 ], [ %834, %940 ], [ %834, %937 ]
  %955 = load i8, ptr %686, align 1
  %956 = and i8 %955, 7
  %957 = icmp eq i8 %956, 0
  br i1 %957, label %1251, label %958

958:                                              ; preds = %950
  %959 = load i32, ptr @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4, !tbaa !5
  %960 = icmp eq i32 %959, 0
  br i1 %960, label %964, label %961

961:                                              ; preds = %958
  %962 = load i32, ptr %685, align 4
  %963 = icmp slt i32 %962, 0
  br label %964

964:                                              ; preds = %961, %958
  %965 = phi i1 [ false, %958 ], [ %963, %961 ]
  %966 = and i8 %955, 120
  %967 = icmp eq i8 %966, 0
  br i1 %967, label %999, label %968

968:                                              ; preds = %964
  %969 = icmp slt i32 %677, %621
  br i1 %969, label %970, label %983

970:                                              ; preds = %968
  %971 = sext i32 %677 to i64
  br label %972

972:                                              ; preds = %970, %978
  %973 = phi i64 [ %971, %970 ], [ %979, %978 ]
  %974 = getelementptr inbounds i16, ptr %192, i64 %973
  %975 = load i16, ptr %974, align 2, !tbaa !44
  %976 = zext i16 %975 to i32
  %977 = icmp sgt i32 %706, %976
  br i1 %977, label %978, label %981

978:                                              ; preds = %972
  %979 = add nsw i64 %973, 1
  %980 = icmp eq i64 %979, %663
  br i1 %980, label %983, label %972

981:                                              ; preds = %972
  %982 = trunc i64 %973 to i32
  br label %983

983:                                              ; preds = %978, %981, %968
  %984 = phi i32 [ %677, %968 ], [ %982, %981 ], [ %621, %978 ]
  %985 = icmp slt i32 %678, %622
  br i1 %985, label %986, label %999

986:                                              ; preds = %983
  %987 = sext i32 %678 to i64
  br label %988

988:                                              ; preds = %986, %994
  %989 = phi i64 [ %987, %986 ], [ %995, %994 ]
  %990 = getelementptr inbounds i16, ptr %238, i64 %989
  %991 = load i16, ptr %990, align 2, !tbaa !44
  %992 = zext i16 %991 to i32
  %993 = icmp sgt i32 %706, %992
  br i1 %993, label %994, label %997

994:                                              ; preds = %988
  %995 = add nsw i64 %989, 1
  %996 = icmp eq i64 %995, %664
  br i1 %996, label %999, label %988

997:                                              ; preds = %988
  %998 = trunc i64 %989 to i32
  br label %999

999:                                              ; preds = %994, %997, %983, %964
  %1000 = phi i32 [ %678, %964 ], [ %678, %983 ], [ %998, %997 ], [ %622, %994 ]
  %1001 = phi i32 [ %677, %964 ], [ %984, %983 ], [ %984, %997 ], [ %984, %994 ]
  %1002 = add nsw i32 %672, 1
  %1003 = icmp slt i32 %1002, %706
  br i1 %1003, label %1004, label %1069

1004:                                             ; preds = %999
  %1005 = xor i32 %672, -1
  %1006 = add i32 %706, %1005
  %1007 = zext i32 %1006 to i64
  %1008 = icmp ult i32 %1006, 8
  br i1 %1008, label %1058, label %1009

1009:                                             ; preds = %1004
  %1010 = icmp ult i32 %1006, 64
  br i1 %1010, label %1039, label %1011

1011:                                             ; preds = %1009
  %1012 = and i64 %1007, 4294967232
  %1013 = trunc i32 %1002 to i16
  %1014 = insertelement <16 x i16> poison, i16 %1013, i64 0
  %1015 = shufflevector <16 x i16> %1014, <16 x i16> poison, <16 x i32> zeroinitializer
  %1016 = add <16 x i16> %1015, <i16 0, i16 1, i16 2, i16 3, i16 4, i16 5, i16 6, i16 7, i16 8, i16 9, i16 10, i16 11, i16 12, i16 13, i16 14, i16 15>
  %1017 = trunc i64 %1012 to i32
  %1018 = add i32 %1002, %1017
  br label %1019

1019:                                             ; preds = %1019, %1011
  %1020 = phi i64 [ 0, %1011 ], [ %1029, %1019 ]
  %1021 = phi <16 x i16> [ %1016, %1011 ], [ %1030, %1019 ]
  %1022 = add <16 x i16> %1021, <i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16>
  %1023 = add <16 x i16> %1021, <i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32>
  %1024 = add <16 x i16> %1021, <i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48>
  %1025 = getelementptr inbounds i16, ptr %422, i64 %1020
  store <16 x i16> %1021, ptr %1025, align 2, !tbaa !44
  %1026 = getelementptr inbounds i16, ptr %1025, i64 16
  store <16 x i16> %1022, ptr %1026, align 2, !tbaa !44
  %1027 = getelementptr inbounds i16, ptr %1025, i64 32
  store <16 x i16> %1023, ptr %1027, align 2, !tbaa !44
  %1028 = getelementptr inbounds i16, ptr %1025, i64 48
  store <16 x i16> %1024, ptr %1028, align 2, !tbaa !44
  %1029 = add nuw i64 %1020, 64
  %1030 = add <16 x i16> %1021, <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>
  %1031 = icmp eq i64 %1029, %1012
  br i1 %1031, label %1032, label %1019, !llvm.loop !353

1032:                                             ; preds = %1019
  %1033 = icmp eq i64 %1012, %1007
  br i1 %1033, label %1069, label %1034

1034:                                             ; preds = %1032
  %1035 = trunc i64 %1012 to i32
  %1036 = add i32 %1002, %1035
  %1037 = and i64 %1007, 56
  %1038 = icmp eq i64 %1037, 0
  br i1 %1038, label %1058, label %1039

1039:                                             ; preds = %1009, %1034
  %1040 = phi i32 [ %1018, %1034 ], [ %1002, %1009 ]
  %1041 = phi i64 [ %1012, %1034 ], [ 0, %1009 ]
  %1042 = and i64 %1007, 4294967288
  %1043 = trunc i64 %1042 to i32
  %1044 = add i32 %1002, %1043
  %1045 = trunc i32 %1040 to i16
  %1046 = insertelement <8 x i16> poison, i16 %1045, i64 0
  %1047 = shufflevector <8 x i16> %1046, <8 x i16> poison, <8 x i32> zeroinitializer
  %1048 = add <8 x i16> %1047, <i16 0, i16 1, i16 2, i16 3, i16 4, i16 5, i16 6, i16 7>
  br label %1049

1049:                                             ; preds = %1049, %1039
  %1050 = phi i64 [ %1041, %1039 ], [ %1053, %1049 ]
  %1051 = phi <8 x i16> [ %1048, %1039 ], [ %1054, %1049 ]
  %1052 = getelementptr inbounds i16, ptr %422, i64 %1050
  store <8 x i16> %1051, ptr %1052, align 2, !tbaa !44
  %1053 = add nuw i64 %1050, 8
  %1054 = add <8 x i16> %1051, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %1055 = icmp eq i64 %1053, %1042
  br i1 %1055, label %1056, label %1049, !llvm.loop !354

1056:                                             ; preds = %1049
  %1057 = icmp eq i64 %1042, %1007
  br i1 %1057, label %1069, label %1058

1058:                                             ; preds = %1004, %1034, %1056
  %1059 = phi i64 [ 0, %1004 ], [ %1012, %1034 ], [ %1042, %1056 ]
  %1060 = phi i32 [ %1002, %1004 ], [ %1036, %1034 ], [ %1044, %1056 ]
  br label %1061

1061:                                             ; preds = %1058, %1061
  %1062 = phi i64 [ %1065, %1061 ], [ %1059, %1058 ]
  %1063 = phi i32 [ %1067, %1061 ], [ %1060, %1058 ]
  %1064 = trunc i32 %1063 to i16
  %1065 = add nuw nsw i64 %1062, 1
  %1066 = getelementptr inbounds i16, ptr %422, i64 %1062
  store i16 %1064, ptr %1066, align 2, !tbaa !44
  %1067 = add nsw i32 %1063, 1
  %1068 = icmp eq i64 %1065, %1007
  br i1 %1068, label %1069, label %1061, !llvm.loop !355

1069:                                             ; preds = %1061, %1032, %1056, %999
  %1070 = phi i32 [ 0, %999 ], [ %1006, %1056 ], [ %1006, %1032 ], [ %1006, %1061 ]
  %1071 = zext i32 %1070 to i64
  %1072 = getelementptr inbounds i16, ptr %422, i64 %1071
  %1073 = select i1 %965, ptr %238, ptr %192
  %1074 = select i1 %965, i32 %1000, i32 %1001
  %1075 = select i1 %965, i32 %622, i32 %621
  %1076 = icmp slt i32 %1074, %1075
  br i1 %1076, label %1077, label %1236

1077:                                             ; preds = %1069
  %1078 = sub nsw i32 %1075, %1074
  %1079 = icmp sgt i32 %1078, 6
  br i1 %1079, label %1080, label %1173

1080:                                             ; preds = %1077
  %1081 = add nsw i32 %1075, -2
  %1082 = add nsw i32 %1074, 2
  %1083 = icmp slt i32 %1082, %1081
  br i1 %1083, label %1084, label %1173

1084:                                             ; preds = %1080
  %1085 = add nsw i32 %1074, 1
  %1086 = sext i32 %1085 to i64
  %1087 = getelementptr inbounds i16, ptr %1073, i64 %1086
  %1088 = load i16, ptr %1087, align 2, !tbaa !44
  %1089 = zext i16 %1088 to i64
  %1090 = getelementptr inbounds %struct.CompAtom, ptr %42, i64 %1089
  %1091 = getelementptr inbounds %class.Vector, ptr %1090, i64 0, i32 2
  %1092 = load double, ptr %1091, align 8, !tbaa !49
  %1093 = sext i32 %1074 to i64
  %1094 = getelementptr inbounds i16, ptr %1073, i64 %1093
  %1095 = load i16, ptr %1094, align 2, !tbaa !44
  %1096 = zext i16 %1095 to i64
  %1097 = getelementptr inbounds %struct.CompAtom, ptr %42, i64 %1096
  %1098 = getelementptr inbounds %class.Vector, ptr %1097, i64 0, i32 2
  %1099 = load double, ptr %1098, align 8, !tbaa !49
  %1100 = getelementptr inbounds %class.Vector, ptr %1090, i64 0, i32 1
  %1101 = load double, ptr %1100, align 8, !tbaa !66
  %1102 = getelementptr inbounds %class.Vector, ptr %1097, i64 0, i32 1
  %1103 = load double, ptr %1102, align 8, !tbaa !66
  %1104 = load double, ptr %1090, align 8, !tbaa !67
  %1105 = load double, ptr %1097, align 8, !tbaa !67
  %1106 = sext i32 %1082 to i64
  %1107 = sext i32 %1081 to i64
  %1108 = insertelement <2 x double> poison, double %1092, i64 0
  %1109 = insertelement <2 x double> %1108, double %1099, i64 1
  %1110 = insertelement <2 x double> poison, double %1101, i64 0
  %1111 = insertelement <2 x double> %1110, double %1103, i64 1
  %1112 = insertelement <2 x double> poison, double %1104, i64 0
  %1113 = insertelement <2 x double> %1112, double %1105, i64 1
  %1114 = insertelement <2 x double> poison, double %704, i64 0
  %1115 = shufflevector <2 x double> %1114, <2 x double> poison, <2 x i32> zeroinitializer
  %1116 = shufflevector <2 x double> %701, <2 x double> poison, <2 x i32> <i32 1, i32 1>
  %1117 = shufflevector <2 x double> %701, <2 x double> poison, <2 x i32> zeroinitializer
  br label %1118

1118:                                             ; preds = %1084, %1118
  %1119 = phi i64 [ %1106, %1084 ], [ %1164, %1118 ]
  %1120 = phi i32 [ %1074, %1084 ], [ %1166, %1118 ]
  %1121 = phi i32 [ 0, %1084 ], [ %1163, %1118 ]
  %1122 = phi i16 [ %1095, %1084 ], [ %1129, %1118 ]
  %1123 = phi i16 [ %1088, %1084 ], [ %1133, %1118 ]
  %1124 = phi <2 x double> [ %1109, %1084 ], [ %1168, %1118 ]
  %1125 = phi <2 x double> [ %1111, %1084 ], [ %1170, %1118 ]
  %1126 = phi <2 x double> [ %1113, %1084 ], [ %1172, %1118 ]
  %1127 = fsub <2 x double> %1115, %1124
  %1128 = getelementptr inbounds i16, ptr %1073, i64 %1119
  %1129 = load i16, ptr %1128, align 2, !tbaa !44
  %1130 = add nsw i32 %1120, 3
  %1131 = sext i32 %1130 to i64
  %1132 = getelementptr inbounds i16, ptr %1073, i64 %1131
  %1133 = load i16, ptr %1132, align 2, !tbaa !44
  %1134 = zext i16 %1129 to i64
  %1135 = getelementptr inbounds %struct.CompAtom, ptr %42, i64 %1134
  %1136 = load double, ptr %1135, align 8, !tbaa !67
  %1137 = zext i16 %1133 to i64
  %1138 = getelementptr inbounds %struct.CompAtom, ptr %42, i64 %1137
  %1139 = load double, ptr %1138, align 8, !tbaa !67
  %1140 = getelementptr inbounds %class.Vector, ptr %1135, i64 0, i32 1
  %1141 = load double, ptr %1140, align 8, !tbaa !66
  %1142 = getelementptr inbounds %class.Vector, ptr %1138, i64 0, i32 1
  %1143 = load double, ptr %1142, align 8, !tbaa !66
  %1144 = getelementptr inbounds %class.Vector, ptr %1135, i64 0, i32 2
  %1145 = load double, ptr %1144, align 8, !tbaa !49
  %1146 = getelementptr inbounds %class.Vector, ptr %1138, i64 0, i32 2
  %1147 = load double, ptr %1146, align 8, !tbaa !49
  %1148 = fsub <2 x double> %1117, %1126
  %1149 = fmul <2 x double> %1148, %1148
  %1150 = fsub <2 x double> %1116, %1125
  %1151 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %1150, <2 x double> %1150, <2 x double> %1149)
  %1152 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %1127, <2 x double> %1127, <2 x double> %1151)
  %1153 = fcmp olt <2 x double> %1152, %666
  %1154 = zext i32 %1121 to i64
  %1155 = getelementptr inbounds i16, ptr %284, i64 %1154
  store i16 %1122, ptr %1155, align 2, !tbaa !44
  %1156 = extractelement <2 x i1> %1153, i64 1
  %1157 = zext i1 %1156 to i32
  %1158 = add nuw nsw i32 %1121, %1157
  %1159 = zext i32 %1158 to i64
  %1160 = getelementptr inbounds i16, ptr %284, i64 %1159
  store i16 %1123, ptr %1160, align 2, !tbaa !44
  %1161 = extractelement <2 x i1> %1153, i64 0
  %1162 = zext i1 %1161 to i32
  %1163 = add i32 %1158, %1162
  %1164 = add nsw i64 %1119, 2
  %1165 = icmp slt i64 %1164, %1107
  %1166 = trunc i64 %1119 to i32
  %1167 = insertelement <2 x double> poison, double %1147, i64 0
  %1168 = insertelement <2 x double> %1167, double %1145, i64 1
  %1169 = insertelement <2 x double> poison, double %1143, i64 0
  %1170 = insertelement <2 x double> %1169, double %1141, i64 1
  %1171 = insertelement <2 x double> poison, double %1139, i64 0
  %1172 = insertelement <2 x double> %1171, double %1136, i64 1
  br i1 %1165, label %1118, label %1173

1173:                                             ; preds = %1118, %1080, %1077
  %1174 = phi i32 [ 0, %1077 ], [ 0, %1080 ], [ %1163, %1118 ]
  %1175 = phi i32 [ %1074, %1077 ], [ %1074, %1080 ], [ %1166, %1118 ]
  %1176 = icmp slt i32 %1175, %1075
  br i1 %1176, label %1177, label %1182

1177:                                             ; preds = %1173
  %1178 = sext i32 %1175 to i64
  %1179 = sext i32 %1075 to i64
  %1180 = extractelement <2 x double> %701, i64 0
  %1181 = extractelement <2 x double> %701, i64 1
  br label %1187

1182:                                             ; preds = %1210, %1173
  %1183 = phi i32 [ %1174, %1173 ], [ %1211, %1210 ]
  %1184 = icmp sgt i32 %1183, 0
  br i1 %1184, label %1185, label %1236

1185:                                             ; preds = %1182
  %1186 = zext i32 %1183 to i64
  br label %1214

1187:                                             ; preds = %1177, %1210
  %1188 = phi i64 [ %1178, %1177 ], [ %1212, %1210 ]
  %1189 = phi i32 [ %1174, %1177 ], [ %1211, %1210 ]
  %1190 = getelementptr inbounds i16, ptr %1073, i64 %1188
  %1191 = load i16, ptr %1190, align 2, !tbaa !44
  %1192 = zext i16 %1191 to i64
  %1193 = getelementptr inbounds %struct.CompAtom, ptr %42, i64 %1192
  %1194 = load double, ptr %1193, align 8, !tbaa !67
  %1195 = getelementptr inbounds %class.Vector, ptr %1193, i64 0, i32 1
  %1196 = load double, ptr %1195, align 8, !tbaa !66
  %1197 = getelementptr inbounds %class.Vector, ptr %1193, i64 0, i32 2
  %1198 = load double, ptr %1197, align 8, !tbaa !49
  %1199 = fsub double %1180, %1194
  %1200 = fmul double %1199, %1199
  %1201 = fsub double %1181, %1196
  %1202 = tail call double @llvm.fmuladd.f64(double %1201, double %1201, double %1200)
  %1203 = fsub double %704, %1198
  %1204 = tail call double @llvm.fmuladd.f64(double %1203, double %1203, double %1202)
  %1205 = fcmp ugt double %1204, %23
  br i1 %1205, label %1210, label %1206

1206:                                             ; preds = %1187
  %1207 = add nsw i32 %1189, 1
  %1208 = sext i32 %1189 to i64
  %1209 = getelementptr inbounds i16, ptr %284, i64 %1208
  store i16 %1191, ptr %1209, align 2, !tbaa !44
  br label %1210

1210:                                             ; preds = %1206, %1187
  %1211 = phi i32 [ %1207, %1206 ], [ %1189, %1187 ]
  %1212 = add nsw i64 %1188, 1
  %1213 = icmp eq i64 %1212, %1179
  br i1 %1213, label %1182, label %1187

1214:                                             ; preds = %1185, %1231
  %1215 = phi i64 [ 0, %1185 ], [ %1234, %1231 ]
  %1216 = phi ptr [ %1072, %1185 ], [ %1233, %1231 ]
  %1217 = getelementptr inbounds i16, ptr %284, i64 %1215
  %1218 = load i16, ptr %1217, align 2, !tbaa !44
  %1219 = zext i16 %1218 to i64
  %1220 = getelementptr inbounds %struct.CompAtom, ptr %42, i64 %1219, i32 4
  %1221 = load i8, ptr %1220, align 1
  %1222 = and i8 %1221, 7
  store i16 %1218, ptr %1216, align 2, !tbaa !44
  %1223 = getelementptr inbounds i16, ptr %1216, i64 1
  %1224 = insertelement <2 x i16> poison, i16 %1218, i64 0
  %1225 = shufflevector <2 x i16> %1224, <2 x i16> poison, <2 x i32> zeroinitializer
  %1226 = add <2 x i16> %1225, <i16 1, i16 2>
  store <2 x i16> %1226, ptr %1223, align 2, !tbaa !44
  %1227 = icmp ult i8 %1222, 4
  br i1 %1227, label %1231, label %1228

1228:                                             ; preds = %1214
  %1229 = add <2 x i16> %1225, <i16 3, i16 4>
  %1230 = getelementptr inbounds i16, ptr %1216, i64 3
  store <2 x i16> %1229, ptr %1230, align 2, !tbaa !44
  br label %1231

1231:                                             ; preds = %1228, %1214
  %1232 = zext i8 %1222 to i64
  %1233 = getelementptr inbounds i16, ptr %1216, i64 %1232
  %1234 = add nuw nsw i64 %1215, 1
  %1235 = icmp eq i64 %1234, %1186
  br i1 %1235, label %1236, label %1214

1236:                                             ; preds = %1231, %1182, %1069
  %1237 = phi ptr [ %1072, %1069 ], [ %1072, %1182 ], [ %1233, %1231 ]
  %1238 = ptrtoint ptr %1237 to i64
  %1239 = sub i64 %1238, %645
  %1240 = lshr exact i64 %1239, 1
  %1241 = trunc i64 %1240 to i32
  %1242 = icmp eq i32 %1241, 0
  br i1 %1242, label %1254, label %1243

1243:                                             ; preds = %1236
  %1244 = shl i64 %1239, 31
  %1245 = add i64 %1244, -4294967296
  %1246 = ashr i64 %1245, 32
  %1247 = getelementptr inbounds i16, ptr %422, i64 %1246
  %1248 = load i16, ptr %1247, align 2, !tbaa !44
  %1249 = ashr i64 %1244, 32
  %1250 = getelementptr inbounds i16, ptr %422, i64 %1249
  store i16 %1248, ptr %1250, align 2, !tbaa !44
  br label %1254

1251:                                             ; preds = %950
  %1252 = add nsw i32 %680, 1
  %1253 = load i32, ptr @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4, !tbaa !5
  br label %1254

1254:                                             ; preds = %1236, %1243, %1251
  %1255 = phi i32 [ %1253, %1251 ], [ %959, %1243 ], [ %959, %1236 ]
  %1256 = phi i32 [ %1252, %1251 ], [ 0, %1243 ], [ 0, %1236 ]
  %1257 = phi i32 [ %679, %1251 ], [ %1241, %1243 ], [ 0, %1236 ]
  %1258 = phi i32 [ %678, %1251 ], [ %1000, %1243 ], [ %1000, %1236 ]
  %1259 = phi i32 [ %677, %1251 ], [ %1001, %1243 ], [ %1001, %1236 ]
  %1260 = icmp eq i32 %1255, 0
  br i1 %1260, label %1265, label %1261

1261:                                             ; preds = %1254
  %1262 = load i32, ptr %685, align 4
  %1263 = and i32 %1262, 1073741824
  %1264 = icmp ne i32 %1263, 0
  br label %1265

1265:                                             ; preds = %1261, %1254
  %1266 = phi i1 [ false, %1254 ], [ %1264, %1261 ]
  %1267 = load i32, ptr %13, align 8, !tbaa !17
  %1268 = add nsw i32 %646, %1267
  %1269 = load i32, ptr %647, align 4, !tbaa !68
  %1270 = icmp sgt i32 %1269, %1268
  br i1 %1270, label %1286, label %1271

1271:                                             ; preds = %1265, %1271
  %1272 = phi i32 [ %1274, %1271 ], [ %1269, %1265 ]
  %1273 = ashr i32 %1272, 1
  %1274 = add nsw i32 %1273, %1272
  %1275 = icmp sgt i32 %1274, %1268
  br i1 %1275, label %1276, label %1271

1276:                                             ; preds = %1271
  %1277 = sext i32 %1274 to i64
  %1278 = icmp slt i32 %1274, 0
  %1279 = shl nsw i64 %1277, 1
  %1280 = select i1 %1278, i64 -1, i64 %1279
  %1281 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %1280) #9
  %1282 = load ptr, ptr %8, align 8, !tbaa !46
  %1283 = sext i32 %1267 to i64
  %1284 = shl nsw i64 %1283, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 2 %1281, ptr align 2 %1282, i64 %1284, i1 false)
  %1285 = icmp eq ptr %1282, null
  br i1 %1285, label %1290, label %1288

1286:                                             ; preds = %1265
  %1287 = load ptr, ptr %8, align 8, !tbaa !46
  br label %1292

1288:                                             ; preds = %1276
  tail call void @_ZdaPv(ptr noundef nonnull %1282) #10
  %1289 = load i32, ptr %13, align 8, !tbaa !17
  br label %1290

1290:                                             ; preds = %1288, %1276
  %1291 = phi i32 [ %1289, %1288 ], [ %1267, %1276 ]
  store ptr %1281, ptr %8, align 8, !tbaa !46
  store i32 %1274, ptr %647, align 4, !tbaa !68
  br label %1292

1292:                                             ; preds = %1286, %1290
  %1293 = phi i32 [ %1267, %1286 ], [ %1291, %1290 ]
  %1294 = phi ptr [ %1287, %1286 ], [ %1281, %1290 ]
  %1295 = ptrtoint ptr %1294 to i64
  %1296 = add nsw i32 %1293, 1
  %1297 = sext i32 %1296 to i64
  %1298 = getelementptr inbounds i16, ptr %1294, i64 %1297
  %1299 = load i32, ptr @_ZN20ComputeNonbondedUtil17pairInteractionOnE, align 4, !tbaa !5
  %1300 = icmp eq i32 %1299, 0
  br i1 %1300, label %1482, label %1301

1301:                                             ; preds = %1292
  %1302 = getelementptr inbounds %struct.CompAtom, ptr %40, i64 %683, i32 3
  %1303 = load i8, ptr %1302, align 2, !tbaa !301
  %1304 = zext i8 %1303 to i32
  %1305 = load i32, ptr @_ZN20ComputeNonbondedUtil19pairInteractionSelfE, align 4, !tbaa !5
  %1306 = icmp eq i32 %1305, 0
  br i1 %1306, label %1361, label %1307

1307:                                             ; preds = %1301
  %1308 = icmp eq i8 %1303, 1
  br i1 %1308, label %1309, label %2643

1309:                                             ; preds = %1307
  %1310 = icmp slt i32 %1256, %1257
  br i1 %1310, label %1311, label %1422

1311:                                             ; preds = %1309
  %1312 = sext i32 %1256 to i64
  %1313 = sext i32 %1257 to i64
  %1314 = sub nsw i64 %1313, %1312
  %1315 = xor i64 %1312, -1
  %1316 = and i64 %1314, 1
  %1317 = icmp eq i64 %1316, 0
  br i1 %1317, label %1329, label %1318

1318:                                             ; preds = %1311
  %1319 = getelementptr inbounds i16, ptr %422, i64 %1312
  %1320 = load i16, ptr %1319, align 2, !tbaa !44
  %1321 = zext i16 %1320 to i64
  %1322 = getelementptr inbounds %struct.CompAtom, ptr %42, i64 %1321, i32 3
  %1323 = load i8, ptr %1322, align 2, !tbaa !301
  %1324 = icmp eq i8 %1323, 1
  br i1 %1324, label %1325, label %1326

1325:                                             ; preds = %1318
  store i16 %1320, ptr %468, align 2, !tbaa !44
  br label %1326

1326:                                             ; preds = %1325, %1318
  %1327 = phi ptr [ %667, %1325 ], [ %468, %1318 ]
  %1328 = add nsw i64 %1312, 1
  br label %1329

1329:                                             ; preds = %1326, %1311
  %1330 = phi ptr [ undef, %1311 ], [ %1327, %1326 ]
  %1331 = phi i64 [ %1312, %1311 ], [ %1328, %1326 ]
  %1332 = phi ptr [ %468, %1311 ], [ %1327, %1326 ]
  %1333 = sub nsw i64 0, %1313
  %1334 = icmp eq i64 %1315, %1333
  br i1 %1334, label %1422, label %1335

1335:                                             ; preds = %1329, %1357
  %1336 = phi i64 [ %1359, %1357 ], [ %1331, %1329 ]
  %1337 = phi ptr [ %1358, %1357 ], [ %1332, %1329 ]
  %1338 = getelementptr inbounds i16, ptr %422, i64 %1336
  %1339 = load i16, ptr %1338, align 2, !tbaa !44
  %1340 = zext i16 %1339 to i64
  %1341 = getelementptr inbounds %struct.CompAtom, ptr %42, i64 %1340, i32 3
  %1342 = load i8, ptr %1341, align 2, !tbaa !301
  %1343 = icmp eq i8 %1342, 1
  br i1 %1343, label %1344, label %1346

1344:                                             ; preds = %1335
  %1345 = getelementptr inbounds i16, ptr %1337, i64 1
  store i16 %1339, ptr %1337, align 2, !tbaa !44
  br label %1346

1346:                                             ; preds = %1344, %1335
  %1347 = phi ptr [ %1345, %1344 ], [ %1337, %1335 ]
  %1348 = add nsw i64 %1336, 1
  %1349 = getelementptr inbounds i16, ptr %422, i64 %1348
  %1350 = load i16, ptr %1349, align 2, !tbaa !44
  %1351 = zext i16 %1350 to i64
  %1352 = getelementptr inbounds %struct.CompAtom, ptr %42, i64 %1351, i32 3
  %1353 = load i8, ptr %1352, align 2, !tbaa !301
  %1354 = icmp eq i8 %1353, 1
  br i1 %1354, label %1355, label %1357

1355:                                             ; preds = %1346
  %1356 = getelementptr inbounds i16, ptr %1347, i64 1
  store i16 %1350, ptr %1347, align 2, !tbaa !44
  br label %1357

1357:                                             ; preds = %1355, %1346
  %1358 = phi ptr [ %1356, %1355 ], [ %1347, %1346 ]
  %1359 = add nsw i64 %1336, 2
  %1360 = icmp eq i64 %1359, %1313
  br i1 %1360, label %1422, label %1335

1361:                                             ; preds = %1301
  %1362 = add i8 %1303, -3
  %1363 = icmp ult i8 %1362, -2
  br i1 %1363, label %2643, label %1364

1364:                                             ; preds = %1361
  %1365 = icmp slt i32 %1256, %1257
  br i1 %1365, label %1366, label %1422

1366:                                             ; preds = %1364
  %1367 = sext i32 %1256 to i64
  %1368 = sext i32 %1257 to i64
  %1369 = sub nsw i64 %1368, %1367
  %1370 = xor i64 %1367, -1
  %1371 = and i64 %1369, 1
  %1372 = icmp eq i64 %1371, 0
  br i1 %1372, label %1386, label %1373

1373:                                             ; preds = %1366
  %1374 = getelementptr inbounds i16, ptr %422, i64 %1367
  %1375 = load i16, ptr %1374, align 2, !tbaa !44
  %1376 = zext i16 %1375 to i64
  %1377 = getelementptr inbounds %struct.CompAtom, ptr %42, i64 %1376, i32 3
  %1378 = load i8, ptr %1377, align 2, !tbaa !301
  %1379 = zext i8 %1378 to i32
  %1380 = add nuw nsw i32 %1379, %1304
  %1381 = icmp eq i32 %1380, 3
  br i1 %1381, label %1382, label %1383

1382:                                             ; preds = %1373
  store i16 %1375, ptr %468, align 2, !tbaa !44
  br label %1383

1383:                                             ; preds = %1382, %1373
  %1384 = phi ptr [ %668, %1382 ], [ %468, %1373 ]
  %1385 = add nsw i64 %1367, 1
  br label %1386

1386:                                             ; preds = %1383, %1366
  %1387 = phi ptr [ undef, %1366 ], [ %1384, %1383 ]
  %1388 = phi i64 [ %1367, %1366 ], [ %1385, %1383 ]
  %1389 = phi ptr [ %468, %1366 ], [ %1384, %1383 ]
  %1390 = sub nsw i64 0, %1368
  %1391 = icmp eq i64 %1370, %1390
  br i1 %1391, label %1422, label %1392

1392:                                             ; preds = %1386, %1418
  %1393 = phi i64 [ %1420, %1418 ], [ %1388, %1386 ]
  %1394 = phi ptr [ %1419, %1418 ], [ %1389, %1386 ]
  %1395 = getelementptr inbounds i16, ptr %422, i64 %1393
  %1396 = load i16, ptr %1395, align 2, !tbaa !44
  %1397 = zext i16 %1396 to i64
  %1398 = getelementptr inbounds %struct.CompAtom, ptr %42, i64 %1397, i32 3
  %1399 = load i8, ptr %1398, align 2, !tbaa !301
  %1400 = zext i8 %1399 to i32
  %1401 = add nuw nsw i32 %1400, %1304
  %1402 = icmp eq i32 %1401, 3
  br i1 %1402, label %1403, label %1405

1403:                                             ; preds = %1392
  %1404 = getelementptr inbounds i16, ptr %1394, i64 1
  store i16 %1396, ptr %1394, align 2, !tbaa !44
  br label %1405

1405:                                             ; preds = %1403, %1392
  %1406 = phi ptr [ %1404, %1403 ], [ %1394, %1392 ]
  %1407 = add nsw i64 %1393, 1
  %1408 = getelementptr inbounds i16, ptr %422, i64 %1407
  %1409 = load i16, ptr %1408, align 2, !tbaa !44
  %1410 = zext i16 %1409 to i64
  %1411 = getelementptr inbounds %struct.CompAtom, ptr %42, i64 %1410, i32 3
  %1412 = load i8, ptr %1411, align 2, !tbaa !301
  %1413 = zext i8 %1412 to i32
  %1414 = add nuw nsw i32 %1413, %1304
  %1415 = icmp eq i32 %1414, 3
  br i1 %1415, label %1416, label %1418

1416:                                             ; preds = %1405
  %1417 = getelementptr inbounds i16, ptr %1406, i64 1
  store i16 %1409, ptr %1406, align 2, !tbaa !44
  br label %1418

1418:                                             ; preds = %1416, %1405
  %1419 = phi ptr [ %1417, %1416 ], [ %1406, %1405 ]
  %1420 = add nsw i64 %1393, 2
  %1421 = icmp eq i64 %1420, %1368
  br i1 %1421, label %1422, label %1392

1422:                                             ; preds = %1329, %1357, %1386, %1418, %1309, %1364
  %1423 = phi ptr [ %468, %1364 ], [ %468, %1309 ], [ %1387, %1386 ], [ %1419, %1418 ], [ %1330, %1329 ], [ %1358, %1357 ]
  %1424 = ptrtoint ptr %1423 to i64
  %1425 = sub i64 %1424, %648
  %1426 = lshr exact i64 %1425, 1
  %1427 = trunc i64 %1426 to i32
  %1428 = icmp sgt i32 %1427, 0
  br i1 %1428, label %1429, label %1703

1429:                                             ; preds = %1422
  %1430 = and i64 %1426, 4294967295
  %1431 = extractelement <2 x double> %701, i64 0
  %1432 = extractelement <2 x double> %701, i64 1
  br label %1433

1433:                                             ; preds = %1429, %1477
  %1434 = phi i64 [ 0, %1429 ], [ %1480, %1477 ]
  %1435 = phi ptr [ %468, %1429 ], [ %1479, %1477 ]
  %1436 = phi ptr [ %1298, %1429 ], [ %1478, %1477 ]
  %1437 = getelementptr inbounds i16, ptr %468, i64 %1434
  %1438 = load i16, ptr %1437, align 2, !tbaa !44
  %1439 = zext i16 %1438 to i64
  %1440 = getelementptr inbounds %struct.CompAtom, ptr %42, i64 %1439
  %1441 = load double, ptr %1440, align 8, !tbaa !67
  %1442 = fsub double %1431, %1441
  %1443 = fmul double %1442, %1442
  %1444 = getelementptr inbounds %class.Vector, ptr %1440, i64 0, i32 1
  %1445 = load double, ptr %1444, align 8, !tbaa !66
  %1446 = fsub double %1432, %1445
  %1447 = tail call double @llvm.fmuladd.f64(double %1446, double %1446, double %1443)
  %1448 = getelementptr inbounds %class.Vector, ptr %1440, i64 0, i32 2
  %1449 = load double, ptr %1448, align 8, !tbaa !49
  %1450 = fsub double %704, %1449
  %1451 = tail call double @llvm.fmuladd.f64(double %1450, double %1450, double %1447)
  br i1 %1266, label %1452, label %1459

1452:                                             ; preds = %1433
  %1453 = getelementptr inbounds %struct.CompAtomExt, ptr %46, i64 %1439
  %1454 = load i32, ptr %1453, align 4
  %1455 = and i32 %1454, 1073741824
  %1456 = icmp ne i32 %1455, 0
  %1457 = fcmp ugt double %1451, %20
  %1458 = select i1 %1456, i1 true, i1 %1457
  br i1 %1458, label %1477, label %1464

1459:                                             ; preds = %1433
  %1460 = fcmp ugt double %1451, %20
  br i1 %1460, label %1477, label %1461

1461:                                             ; preds = %1459
  %1462 = getelementptr inbounds %struct.CompAtomExt, ptr %46, i64 %1439
  %1463 = load i32, ptr %1462, align 4
  br label %1464

1464:                                             ; preds = %1461, %1452
  %1465 = phi i32 [ %1463, %1461 ], [ %1454, %1452 ]
  %1466 = shl i32 %1465, 2
  %1467 = ashr exact i32 %1466, 2
  %1468 = icmp slt i32 %1467, %714
  %1469 = icmp sgt i32 %1467, %716
  %1470 = select i1 %1468, i1 true, i1 %1469
  %1471 = select i1 %1470, ptr %1436, ptr %1435
  %1472 = zext i1 %1470 to i64
  %1473 = getelementptr inbounds i16, ptr %1436, i64 %1472
  %1474 = xor i1 %1470, true
  %1475 = zext i1 %1474 to i64
  %1476 = getelementptr inbounds i16, ptr %1435, i64 %1475
  store i16 %1438, ptr %1471, align 2, !tbaa !44
  br label %1477

1477:                                             ; preds = %1464, %1459, %1452
  %1478 = phi ptr [ %1436, %1452 ], [ %1436, %1459 ], [ %1473, %1464 ]
  %1479 = phi ptr [ %1435, %1452 ], [ %1435, %1459 ], [ %1476, %1464 ]
  %1480 = add nuw nsw i64 %1434, 1
  %1481 = icmp eq i64 %1480, %1430
  br i1 %1481, label %1703, label %1433

1482:                                             ; preds = %1292
  %1483 = icmp slt i32 %1256, %1257
  br i1 %1266, label %1484, label %1532

1484:                                             ; preds = %1482
  br i1 %1483, label %1485, label %1703

1485:                                             ; preds = %1484
  %1486 = sext i32 %1256 to i64
  %1487 = sext i32 %1257 to i64
  %1488 = extractelement <2 x double> %701, i64 0
  %1489 = extractelement <2 x double> %701, i64 1
  br label %1490

1490:                                             ; preds = %1485, %1527
  %1491 = phi i64 [ %1486, %1485 ], [ %1530, %1527 ]
  %1492 = phi ptr [ %468, %1485 ], [ %1529, %1527 ]
  %1493 = phi ptr [ %1298, %1485 ], [ %1528, %1527 ]
  %1494 = getelementptr inbounds i16, ptr %422, i64 %1491
  %1495 = load i16, ptr %1494, align 2, !tbaa !44
  %1496 = zext i16 %1495 to i64
  %1497 = getelementptr inbounds %struct.CompAtomExt, ptr %46, i64 %1496
  %1498 = load i32, ptr %1497, align 4
  %1499 = and i32 %1498, 1073741824
  %1500 = icmp eq i32 %1499, 0
  br i1 %1500, label %1501, label %1527

1501:                                             ; preds = %1490
  %1502 = getelementptr inbounds %struct.CompAtom, ptr %42, i64 %1496
  %1503 = getelementptr inbounds %class.Vector, ptr %1502, i64 0, i32 2
  %1504 = load double, ptr %1503, align 8, !tbaa !49
  %1505 = fsub double %704, %1504
  %1506 = getelementptr inbounds %class.Vector, ptr %1502, i64 0, i32 1
  %1507 = load double, ptr %1506, align 8, !tbaa !66
  %1508 = fsub double %1489, %1507
  %1509 = load double, ptr %1502, align 8, !tbaa !67
  %1510 = fsub double %1488, %1509
  %1511 = fmul double %1510, %1510
  %1512 = tail call double @llvm.fmuladd.f64(double %1508, double %1508, double %1511)
  %1513 = tail call double @llvm.fmuladd.f64(double %1505, double %1505, double %1512)
  %1514 = fcmp ugt double %1513, %20
  br i1 %1514, label %1527, label %1515

1515:                                             ; preds = %1501
  %1516 = shl i32 %1498, 2
  %1517 = ashr exact i32 %1516, 2
  %1518 = icmp slt i32 %1517, %714
  %1519 = icmp sgt i32 %1517, %716
  %1520 = select i1 %1518, i1 true, i1 %1519
  %1521 = select i1 %1520, ptr %1493, ptr %1492
  %1522 = zext i1 %1520 to i64
  %1523 = getelementptr inbounds i16, ptr %1493, i64 %1522
  %1524 = xor i1 %1520, true
  %1525 = zext i1 %1524 to i64
  %1526 = getelementptr inbounds i16, ptr %1492, i64 %1525
  store i16 %1495, ptr %1521, align 2, !tbaa !44
  br label %1527

1527:                                             ; preds = %1515, %1501, %1490
  %1528 = phi ptr [ %1493, %1490 ], [ %1493, %1501 ], [ %1523, %1515 ]
  %1529 = phi ptr [ %1492, %1490 ], [ %1492, %1501 ], [ %1526, %1515 ]
  %1530 = add nsw i64 %1491, 1
  %1531 = icmp eq i64 %1530, %1487
  br i1 %1531, label %1703, label %1490

1532:                                             ; preds = %1482
  br i1 %1483, label %1533, label %1703

1533:                                             ; preds = %1532
  %1534 = sub nsw i32 %1257, %1256
  %1535 = icmp sgt i32 %1534, 6
  br i1 %1535, label %1536, label %1654

1536:                                             ; preds = %1533
  %1537 = add nsw i32 %1257, -2
  %1538 = add nsw i32 %1256, 2
  %1539 = icmp slt i32 %1538, %1537
  br i1 %1539, label %1540, label %1654

1540:                                             ; preds = %1536
  %1541 = sext i32 %1256 to i64
  %1542 = getelementptr inbounds i16, ptr %422, i64 %1541
  %1543 = load i16, ptr %1542, align 2, !tbaa !44
  %1544 = zext i16 %1543 to i64
  %1545 = getelementptr inbounds %struct.CompAtomExt, ptr %46, i64 %1544
  %1546 = load i32, ptr %1545, align 4
  %1547 = add nsw i32 %1256, 1
  %1548 = sext i32 %1547 to i64
  %1549 = getelementptr inbounds i16, ptr %422, i64 %1548
  %1550 = load i16, ptr %1549, align 2, !tbaa !44
  %1551 = zext i16 %1550 to i64
  %1552 = getelementptr inbounds %struct.CompAtom, ptr %42, i64 %1551
  %1553 = getelementptr inbounds %class.Vector, ptr %1552, i64 0, i32 2
  %1554 = load double, ptr %1553, align 8, !tbaa !49
  %1555 = getelementptr inbounds %struct.CompAtom, ptr %42, i64 %1544
  %1556 = getelementptr inbounds %class.Vector, ptr %1555, i64 0, i32 2
  %1557 = load double, ptr %1556, align 8, !tbaa !49
  %1558 = getelementptr inbounds %class.Vector, ptr %1552, i64 0, i32 1
  %1559 = load double, ptr %1558, align 8, !tbaa !66
  %1560 = getelementptr inbounds %class.Vector, ptr %1555, i64 0, i32 1
  %1561 = load double, ptr %1560, align 8, !tbaa !66
  %1562 = load double, ptr %1552, align 8, !tbaa !67
  %1563 = load double, ptr %1555, align 8, !tbaa !67
  %1564 = sext i32 %1538 to i64
  %1565 = sext i32 %1537 to i64
  %1566 = extractelement <2 x double> %701, i64 0
  %1567 = extractelement <2 x double> %701, i64 1
  br label %1568

1568:                                             ; preds = %1540, %1648
  %1569 = phi i64 [ %1564, %1540 ], [ %1651, %1648 ]
  %1570 = phi i64 [ %1551, %1540 ], [ %1608, %1648 ]
  %1571 = phi i32 [ %1546, %1540 ], [ %1636, %1648 ]
  %1572 = phi ptr [ %468, %1540 ], [ %1650, %1648 ]
  %1573 = phi ptr [ %1298, %1540 ], [ %1649, %1648 ]
  %1574 = phi i32 [ %1256, %1540 ], [ %1653, %1648 ]
  %1575 = phi i16 [ %1543, %1540 ], [ %1600, %1648 ]
  %1576 = phi i16 [ %1550, %1540 ], [ %1604, %1648 ]
  %1577 = phi double [ %1563, %1540 ], [ %1607, %1648 ]
  %1578 = phi double [ %1562, %1540 ], [ %1610, %1648 ]
  %1579 = phi double [ %1561, %1540 ], [ %1612, %1648 ]
  %1580 = phi double [ %1559, %1540 ], [ %1614, %1648 ]
  %1581 = phi double [ %1557, %1540 ], [ %1616, %1648 ]
  %1582 = phi double [ %1554, %1540 ], [ %1618, %1648 ]
  %1583 = getelementptr inbounds %struct.CompAtomExt, ptr %46, i64 %1570
  %1584 = load i32, ptr %1583, align 4
  %1585 = shl i32 %1584, 2
  %1586 = ashr exact i32 %1585, 2
  %1587 = fsub double %1566, %1577
  %1588 = fsub double %1566, %1578
  %1589 = fmul double %1587, %1587
  %1590 = fmul double %1588, %1588
  %1591 = fsub double %1567, %1579
  %1592 = fsub double %1567, %1580
  %1593 = tail call double @llvm.fmuladd.f64(double %1591, double %1591, double %1589)
  %1594 = tail call double @llvm.fmuladd.f64(double %1592, double %1592, double %1590)
  %1595 = fsub double %704, %1581
  %1596 = fsub double %704, %1582
  %1597 = tail call double @llvm.fmuladd.f64(double %1595, double %1595, double %1593)
  %1598 = tail call double @llvm.fmuladd.f64(double %1596, double %1596, double %1594)
  %1599 = getelementptr inbounds i16, ptr %422, i64 %1569
  %1600 = load i16, ptr %1599, align 2, !tbaa !44
  %1601 = add nsw i32 %1574, 3
  %1602 = sext i32 %1601 to i64
  %1603 = getelementptr inbounds i16, ptr %422, i64 %1602
  %1604 = load i16, ptr %1603, align 2, !tbaa !44
  %1605 = zext i16 %1600 to i64
  %1606 = getelementptr inbounds %struct.CompAtom, ptr %42, i64 %1605
  %1607 = load double, ptr %1606, align 8, !tbaa !67
  %1608 = zext i16 %1604 to i64
  %1609 = getelementptr inbounds %struct.CompAtom, ptr %42, i64 %1608
  %1610 = load double, ptr %1609, align 8, !tbaa !67
  %1611 = getelementptr inbounds %class.Vector, ptr %1606, i64 0, i32 1
  %1612 = load double, ptr %1611, align 8, !tbaa !66
  %1613 = getelementptr inbounds %class.Vector, ptr %1609, i64 0, i32 1
  %1614 = load double, ptr %1613, align 8, !tbaa !66
  %1615 = getelementptr inbounds %class.Vector, ptr %1606, i64 0, i32 2
  %1616 = load double, ptr %1615, align 8, !tbaa !49
  %1617 = getelementptr inbounds %class.Vector, ptr %1609, i64 0, i32 2
  %1618 = load double, ptr %1617, align 8, !tbaa !49
  %1619 = fcmp ugt double %1597, %20
  br i1 %1619, label %1632, label %1620

1620:                                             ; preds = %1568
  %1621 = shl i32 %1571, 2
  %1622 = ashr exact i32 %1621, 2
  %1623 = icmp slt i32 %1622, %714
  %1624 = icmp sgt i32 %1622, %716
  %1625 = select i1 %1623, i1 true, i1 %1624
  %1626 = select i1 %1625, ptr %1573, ptr %1572
  %1627 = zext i1 %1625 to i64
  %1628 = getelementptr inbounds i16, ptr %1573, i64 %1627
  %1629 = xor i1 %1625, true
  %1630 = zext i1 %1629 to i64
  %1631 = getelementptr inbounds i16, ptr %1572, i64 %1630
  store i16 %1575, ptr %1626, align 2, !tbaa !44
  br label %1632

1632:                                             ; preds = %1620, %1568
  %1633 = phi ptr [ %1573, %1568 ], [ %1628, %1620 ]
  %1634 = phi ptr [ %1572, %1568 ], [ %1631, %1620 ]
  %1635 = getelementptr inbounds %struct.CompAtomExt, ptr %46, i64 %1605
  %1636 = load i32, ptr %1635, align 4
  %1637 = fcmp ugt double %1598, %20
  br i1 %1637, label %1648, label %1638

1638:                                             ; preds = %1632
  %1639 = icmp slt i32 %1586, %714
  %1640 = icmp sgt i32 %1586, %716
  %1641 = select i1 %1639, i1 true, i1 %1640
  %1642 = select i1 %1641, ptr %1633, ptr %1634
  %1643 = zext i1 %1641 to i64
  %1644 = getelementptr inbounds i16, ptr %1633, i64 %1643
  %1645 = xor i1 %1641, true
  %1646 = zext i1 %1645 to i64
  %1647 = getelementptr inbounds i16, ptr %1634, i64 %1646
  store i16 %1576, ptr %1642, align 2, !tbaa !44
  br label %1648

1648:                                             ; preds = %1638, %1632
  %1649 = phi ptr [ %1633, %1632 ], [ %1644, %1638 ]
  %1650 = phi ptr [ %1634, %1632 ], [ %1647, %1638 ]
  %1651 = add nsw i64 %1569, 2
  %1652 = icmp slt i64 %1651, %1565
  %1653 = trunc i64 %1569 to i32
  br i1 %1652, label %1568, label %1654

1654:                                             ; preds = %1648, %1536, %1533
  %1655 = phi i32 [ %1256, %1533 ], [ %1256, %1536 ], [ %1653, %1648 ]
  %1656 = phi ptr [ %1298, %1533 ], [ %1298, %1536 ], [ %1649, %1648 ]
  %1657 = phi ptr [ %468, %1533 ], [ %468, %1536 ], [ %1650, %1648 ]
  %1658 = icmp slt i32 %1655, %1257
  br i1 %1658, label %1659, label %1703

1659:                                             ; preds = %1654
  %1660 = sext i32 %1655 to i64
  %1661 = sext i32 %1257 to i64
  %1662 = extractelement <2 x double> %701, i64 0
  %1663 = extractelement <2 x double> %701, i64 1
  br label %1664

1664:                                             ; preds = %1659, %1698
  %1665 = phi i64 [ %1660, %1659 ], [ %1701, %1698 ]
  %1666 = phi ptr [ %1657, %1659 ], [ %1700, %1698 ]
  %1667 = phi ptr [ %1656, %1659 ], [ %1699, %1698 ]
  %1668 = getelementptr inbounds i16, ptr %422, i64 %1665
  %1669 = load i16, ptr %1668, align 2, !tbaa !44
  %1670 = zext i16 %1669 to i64
  %1671 = getelementptr inbounds %struct.CompAtom, ptr %42, i64 %1670
  %1672 = load double, ptr %1671, align 8, !tbaa !67
  %1673 = getelementptr inbounds %class.Vector, ptr %1671, i64 0, i32 1
  %1674 = load double, ptr %1673, align 8, !tbaa !66
  %1675 = getelementptr inbounds %class.Vector, ptr %1671, i64 0, i32 2
  %1676 = load double, ptr %1675, align 8, !tbaa !49
  %1677 = fsub double %1662, %1672
  %1678 = fmul double %1677, %1677
  %1679 = fsub double %1663, %1674
  %1680 = tail call double @llvm.fmuladd.f64(double %1679, double %1679, double %1678)
  %1681 = fsub double %704, %1676
  %1682 = tail call double @llvm.fmuladd.f64(double %1681, double %1681, double %1680)
  %1683 = fcmp ugt double %1682, %20
  br i1 %1683, label %1698, label %1684

1684:                                             ; preds = %1664
  %1685 = getelementptr inbounds %struct.CompAtomExt, ptr %46, i64 %1670
  %1686 = load i32, ptr %1685, align 4
  %1687 = shl i32 %1686, 2
  %1688 = ashr exact i32 %1687, 2
  %1689 = icmp slt i32 %1688, %714
  %1690 = icmp sgt i32 %1688, %716
  %1691 = select i1 %1689, i1 true, i1 %1690
  %1692 = select i1 %1691, ptr %1667, ptr %1666
  %1693 = zext i1 %1691 to i64
  %1694 = getelementptr inbounds i16, ptr %1667, i64 %1693
  %1695 = xor i1 %1691, true
  %1696 = zext i1 %1695 to i64
  %1697 = getelementptr inbounds i16, ptr %1666, i64 %1696
  store i16 %1669, ptr %1692, align 2, !tbaa !44
  br label %1698

1698:                                             ; preds = %1684, %1664
  %1699 = phi ptr [ %1667, %1664 ], [ %1694, %1684 ]
  %1700 = phi ptr [ %1666, %1664 ], [ %1697, %1684 ]
  %1701 = add nsw i64 %1665, 1
  %1702 = icmp eq i64 %1701, %1661
  br i1 %1702, label %1703, label %1664

1703:                                             ; preds = %1477, %1698, %1527, %1422, %1654, %1484, %1532
  %1704 = phi ptr [ %1298, %1532 ], [ %1298, %1484 ], [ %1656, %1654 ], [ %1298, %1422 ], [ %1528, %1527 ], [ %1699, %1698 ], [ %1478, %1477 ]
  %1705 = phi ptr [ %468, %1532 ], [ %468, %1484 ], [ %1657, %1654 ], [ %468, %1422 ], [ %1529, %1527 ], [ %1700, %1698 ], [ %1479, %1477 ]
  %1706 = ptrtoint ptr %1705 to i64
  %1707 = sub i64 %1706, %648
  %1708 = lshr exact i64 %1707, 1
  %1709 = trunc i64 %1708 to i32
  %1710 = icmp sgt i32 %1709, 0
  br i1 %1710, label %1711, label %1811

1711:                                             ; preds = %1703
  %1712 = and i64 %1708, 4294967295
  %1713 = and i64 %1708, 1
  %1714 = icmp eq i64 %1712, 1
  br i1 %1714, label %1779, label %1715

1715:                                             ; preds = %1711
  %1716 = sub nsw i64 %1712, %1713
  br label %1717

1717:                                             ; preds = %1772, %1715
  %1718 = phi i64 [ 0, %1715 ], [ %1776, %1772 ]
  %1719 = phi ptr [ %1704, %1715 ], [ %1775, %1772 ]
  %1720 = phi ptr [ %330, %1715 ], [ %1774, %1772 ]
  %1721 = phi ptr [ %376, %1715 ], [ %1773, %1772 ]
  %1722 = phi i64 [ 0, %1715 ], [ %1777, %1772 ]
  %1723 = getelementptr inbounds i16, ptr %468, i64 %1718
  %1724 = load i16, ptr %1723, align 2, !tbaa !44
  %1725 = zext i16 %1724 to i64
  %1726 = getelementptr inbounds %struct.CompAtomExt, ptr %46, i64 %1725
  %1727 = load i32, ptr %1726, align 4
  %1728 = shl i32 %1727, 2
  %1729 = ashr exact i32 %1728, 2
  %1730 = sext i32 %1729 to i64
  %1731 = getelementptr inbounds i8, ptr %951, i64 %1730
  %1732 = load i8, ptr %1731, align 1, !tbaa !57
  %1733 = sext i8 %1732 to i32
  switch i32 %1733, label %1745 [
    i32 0, label %1734
    i32 1, label %1736
    i32 2, label %1738
  ]

1734:                                             ; preds = %1717
  %1735 = getelementptr inbounds i16, ptr %1719, i64 1
  br label %1740

1736:                                             ; preds = %1717
  %1737 = getelementptr inbounds i16, ptr %1720, i64 1
  br label %1740

1738:                                             ; preds = %1717
  %1739 = getelementptr inbounds i16, ptr %1721, i64 1
  br label %1740

1740:                                             ; preds = %1734, %1736, %1738
  %1741 = phi ptr [ %1721, %1738 ], [ %1720, %1736 ], [ %1719, %1734 ]
  %1742 = phi ptr [ %1739, %1738 ], [ %1721, %1736 ], [ %1721, %1734 ]
  %1743 = phi ptr [ %1720, %1738 ], [ %1737, %1736 ], [ %1720, %1734 ]
  %1744 = phi ptr [ %1719, %1738 ], [ %1719, %1736 ], [ %1735, %1734 ]
  store i16 %1724, ptr %1741, align 2, !tbaa !44
  br label %1745

1745:                                             ; preds = %1740, %1717
  %1746 = phi ptr [ %1721, %1717 ], [ %1742, %1740 ]
  %1747 = phi ptr [ %1720, %1717 ], [ %1743, %1740 ]
  %1748 = phi ptr [ %1719, %1717 ], [ %1744, %1740 ]
  %1749 = or i64 %1718, 1
  %1750 = getelementptr inbounds i16, ptr %468, i64 %1749
  %1751 = load i16, ptr %1750, align 2, !tbaa !44
  %1752 = zext i16 %1751 to i64
  %1753 = getelementptr inbounds %struct.CompAtomExt, ptr %46, i64 %1752
  %1754 = load i32, ptr %1753, align 4
  %1755 = shl i32 %1754, 2
  %1756 = ashr exact i32 %1755, 2
  %1757 = sext i32 %1756 to i64
  %1758 = getelementptr inbounds i8, ptr %951, i64 %1757
  %1759 = load i8, ptr %1758, align 1, !tbaa !57
  %1760 = sext i8 %1759 to i32
  switch i32 %1760, label %1772 [
    i32 0, label %1765
    i32 1, label %1763
    i32 2, label %1761
  ]

1761:                                             ; preds = %1745
  %1762 = getelementptr inbounds i16, ptr %1746, i64 1
  br label %1767

1763:                                             ; preds = %1745
  %1764 = getelementptr inbounds i16, ptr %1747, i64 1
  br label %1767

1765:                                             ; preds = %1745
  %1766 = getelementptr inbounds i16, ptr %1748, i64 1
  br label %1767

1767:                                             ; preds = %1765, %1763, %1761
  %1768 = phi ptr [ %1746, %1761 ], [ %1747, %1763 ], [ %1748, %1765 ]
  %1769 = phi ptr [ %1762, %1761 ], [ %1746, %1763 ], [ %1746, %1765 ]
  %1770 = phi ptr [ %1747, %1761 ], [ %1764, %1763 ], [ %1747, %1765 ]
  %1771 = phi ptr [ %1748, %1761 ], [ %1748, %1763 ], [ %1766, %1765 ]
  store i16 %1751, ptr %1768, align 2, !tbaa !44
  br label %1772

1772:                                             ; preds = %1767, %1745
  %1773 = phi ptr [ %1746, %1745 ], [ %1769, %1767 ]
  %1774 = phi ptr [ %1747, %1745 ], [ %1770, %1767 ]
  %1775 = phi ptr [ %1748, %1745 ], [ %1771, %1767 ]
  %1776 = add nuw nsw i64 %1718, 2
  %1777 = add i64 %1722, 2
  %1778 = icmp eq i64 %1777, %1716
  br i1 %1778, label %1779, label %1717

1779:                                             ; preds = %1772, %1711
  %1780 = phi ptr [ undef, %1711 ], [ %1773, %1772 ]
  %1781 = phi ptr [ undef, %1711 ], [ %1774, %1772 ]
  %1782 = phi ptr [ undef, %1711 ], [ %1775, %1772 ]
  %1783 = phi i64 [ 0, %1711 ], [ %1776, %1772 ]
  %1784 = phi ptr [ %1704, %1711 ], [ %1775, %1772 ]
  %1785 = phi ptr [ %330, %1711 ], [ %1774, %1772 ]
  %1786 = phi ptr [ %376, %1711 ], [ %1773, %1772 ]
  %1787 = icmp eq i64 %1713, 0
  br i1 %1787, label %1811, label %1788

1788:                                             ; preds = %1779
  %1789 = getelementptr inbounds i16, ptr %468, i64 %1783
  %1790 = load i16, ptr %1789, align 2, !tbaa !44
  %1791 = zext i16 %1790 to i64
  %1792 = getelementptr inbounds %struct.CompAtomExt, ptr %46, i64 %1791
  %1793 = load i32, ptr %1792, align 4
  %1794 = shl i32 %1793, 2
  %1795 = ashr exact i32 %1794, 2
  %1796 = sext i32 %1795 to i64
  %1797 = getelementptr inbounds i8, ptr %951, i64 %1796
  %1798 = load i8, ptr %1797, align 1, !tbaa !57
  %1799 = sext i8 %1798 to i32
  switch i32 %1799, label %1811 [
    i32 0, label %1804
    i32 1, label %1802
    i32 2, label %1800
  ]

1800:                                             ; preds = %1788
  %1801 = getelementptr inbounds i16, ptr %1786, i64 1
  br label %1806

1802:                                             ; preds = %1788
  %1803 = getelementptr inbounds i16, ptr %1785, i64 1
  br label %1806

1804:                                             ; preds = %1788
  %1805 = getelementptr inbounds i16, ptr %1784, i64 1
  br label %1806

1806:                                             ; preds = %1804, %1802, %1800
  %1807 = phi ptr [ %1786, %1800 ], [ %1785, %1802 ], [ %1784, %1804 ]
  %1808 = phi ptr [ %1801, %1800 ], [ %1786, %1802 ], [ %1786, %1804 ]
  %1809 = phi ptr [ %1785, %1800 ], [ %1803, %1802 ], [ %1785, %1804 ]
  %1810 = phi ptr [ %1784, %1800 ], [ %1784, %1802 ], [ %1805, %1804 ]
  store i16 %1790, ptr %1807, align 2, !tbaa !44
  br label %1811

1811:                                             ; preds = %1779, %1806, %1788, %1703
  %1812 = phi ptr [ %376, %1703 ], [ %1780, %1779 ], [ %1786, %1788 ], [ %1808, %1806 ]
  %1813 = phi ptr [ %330, %1703 ], [ %1781, %1779 ], [ %1785, %1788 ], [ %1809, %1806 ]
  %1814 = phi ptr [ %1704, %1703 ], [ %1782, %1779 ], [ %1784, %1788 ], [ %1810, %1806 ]
  %1815 = ptrtoint ptr %1814 to i64
  %1816 = ptrtoint ptr %1298 to i64
  %1817 = sub i64 %1815, %1816
  %1818 = lshr exact i64 %1817, 1
  %1819 = trunc i64 %1818 to i32
  %1820 = icmp eq i32 %1819, 0
  %1821 = shl i64 %1817, 31
  br i1 %1820, label %1827, label %1822

1822:                                             ; preds = %1811
  %1823 = add i64 %1821, -4294967296
  %1824 = ashr i64 %1823, 32
  %1825 = getelementptr inbounds i16, ptr %1298, i64 %1824
  %1826 = load i16, ptr %1825, align 2, !tbaa !44
  br label %1827

1827:                                             ; preds = %1811, %1822
  %1828 = phi i16 [ %1826, %1822 ], [ -1, %1811 ]
  %1829 = ashr i64 %1821, 32
  %1830 = getelementptr inbounds i16, ptr %1298, i64 %1829
  store i16 %1828, ptr %1830, align 2, !tbaa !44
  %1831 = trunc i64 %1818 to i16
  %1832 = add i16 %1831, 1
  %1833 = load i32, ptr %13, align 8, !tbaa !17
  %1834 = sext i32 %1833 to i64
  %1835 = getelementptr inbounds i16, ptr %1294, i64 %1834
  store i16 %1832, ptr %1835, align 2, !tbaa !44
  %1836 = add nsw i32 %1819, 2
  %1837 = add nsw i32 %1836, %1833
  %1838 = ptrtoint ptr %1813 to i64
  %1839 = sub i64 %1838, %649
  %1840 = lshr exact i64 %1839, 1
  %1841 = trunc i64 %1840 to i32
  %1842 = add nsw i32 %1837, 1
  %1843 = sext i32 %1842 to i64
  %1844 = getelementptr i16, ptr %1294, i64 %1843
  %1845 = icmp sgt i32 %1841, 0
  br i1 %1845, label %1846, label %1936

1846:                                             ; preds = %1827
  %1847 = and i64 %1840, 4294967295
  %1848 = icmp ult i64 %1847, 8
  br i1 %1848, label %1892, label %1849

1849:                                             ; preds = %1846
  %1850 = shl nsw i64 %1843, 1
  %1851 = add i64 %1850, %1295
  %1852 = sub i64 %1851, %649
  %1853 = icmp ult i64 %1852, 128
  br i1 %1853, label %1892, label %1854

1854:                                             ; preds = %1849
  %1855 = icmp ult i64 %1847, 64
  br i1 %1855, label %1879, label %1856

1856:                                             ; preds = %1854
  %1857 = and i64 %1840, 63
  %1858 = sub nsw i64 %1847, %1857
  br label %1859

1859:                                             ; preds = %1859, %1856
  %1860 = phi i64 [ 0, %1856 ], [ %1873, %1859 ]
  %1861 = getelementptr inbounds i16, ptr %330, i64 %1860
  %1862 = load <16 x i16>, ptr %1861, align 2, !tbaa !44
  %1863 = getelementptr inbounds i16, ptr %1861, i64 16
  %1864 = load <16 x i16>, ptr %1863, align 2, !tbaa !44
  %1865 = getelementptr inbounds i16, ptr %1861, i64 32
  %1866 = load <16 x i16>, ptr %1865, align 2, !tbaa !44
  %1867 = getelementptr inbounds i16, ptr %1861, i64 48
  %1868 = load <16 x i16>, ptr %1867, align 2, !tbaa !44
  %1869 = getelementptr inbounds i16, ptr %1844, i64 %1860
  store <16 x i16> %1862, ptr %1869, align 2, !tbaa !44
  %1870 = getelementptr inbounds i16, ptr %1869, i64 16
  store <16 x i16> %1864, ptr %1870, align 2, !tbaa !44
  %1871 = getelementptr inbounds i16, ptr %1869, i64 32
  store <16 x i16> %1866, ptr %1871, align 2, !tbaa !44
  %1872 = getelementptr inbounds i16, ptr %1869, i64 48
  store <16 x i16> %1868, ptr %1872, align 2, !tbaa !44
  %1873 = add nuw i64 %1860, 64
  %1874 = icmp eq i64 %1873, %1858
  br i1 %1874, label %1875, label %1859, !llvm.loop !356

1875:                                             ; preds = %1859
  %1876 = icmp eq i64 %1857, 0
  br i1 %1876, label %1930, label %1877

1877:                                             ; preds = %1875
  %1878 = icmp ult i64 %1857, 8
  br i1 %1878, label %1892, label %1879

1879:                                             ; preds = %1854, %1877
  %1880 = phi i64 [ %1858, %1877 ], [ 0, %1854 ]
  %1881 = and i64 %1840, 7
  %1882 = sub nsw i64 %1847, %1881
  br label %1883

1883:                                             ; preds = %1883, %1879
  %1884 = phi i64 [ %1880, %1879 ], [ %1888, %1883 ]
  %1885 = getelementptr inbounds i16, ptr %330, i64 %1884
  %1886 = load <8 x i16>, ptr %1885, align 2, !tbaa !44
  %1887 = getelementptr inbounds i16, ptr %1844, i64 %1884
  store <8 x i16> %1886, ptr %1887, align 2, !tbaa !44
  %1888 = add nuw i64 %1884, 8
  %1889 = icmp eq i64 %1888, %1882
  br i1 %1889, label %1890, label %1883, !llvm.loop !357

1890:                                             ; preds = %1883
  %1891 = icmp eq i64 %1881, 0
  br i1 %1891, label %1930, label %1892

1892:                                             ; preds = %1849, %1846, %1877, %1890
  %1893 = phi i64 [ 0, %1846 ], [ 0, %1849 ], [ %1858, %1877 ], [ %1882, %1890 ]
  %1894 = sub i64 %1840, %1893
  %1895 = xor i64 %1893, -1
  %1896 = add nsw i64 %1847, %1895
  %1897 = and i64 %1894, 3
  %1898 = icmp eq i64 %1897, 0
  br i1 %1898, label %1908, label %1899

1899:                                             ; preds = %1892, %1899
  %1900 = phi i64 [ %1905, %1899 ], [ %1893, %1892 ]
  %1901 = phi i64 [ %1906, %1899 ], [ 0, %1892 ]
  %1902 = getelementptr inbounds i16, ptr %330, i64 %1900
  %1903 = load i16, ptr %1902, align 2, !tbaa !44
  %1904 = getelementptr inbounds i16, ptr %1844, i64 %1900
  store i16 %1903, ptr %1904, align 2, !tbaa !44
  %1905 = add nuw nsw i64 %1900, 1
  %1906 = add i64 %1901, 1
  %1907 = icmp eq i64 %1906, %1897
  br i1 %1907, label %1908, label %1899, !llvm.loop !358

1908:                                             ; preds = %1899, %1892
  %1909 = phi i64 [ %1893, %1892 ], [ %1905, %1899 ]
  %1910 = icmp ult i64 %1896, 3
  br i1 %1910, label %1930, label %1911

1911:                                             ; preds = %1908, %1911
  %1912 = phi i64 [ %1928, %1911 ], [ %1909, %1908 ]
  %1913 = getelementptr inbounds i16, ptr %330, i64 %1912
  %1914 = load i16, ptr %1913, align 2, !tbaa !44
  %1915 = getelementptr inbounds i16, ptr %1844, i64 %1912
  store i16 %1914, ptr %1915, align 2, !tbaa !44
  %1916 = add nuw nsw i64 %1912, 1
  %1917 = getelementptr inbounds i16, ptr %330, i64 %1916
  %1918 = load i16, ptr %1917, align 2, !tbaa !44
  %1919 = getelementptr inbounds i16, ptr %1844, i64 %1916
  store i16 %1918, ptr %1919, align 2, !tbaa !44
  %1920 = add nuw nsw i64 %1912, 2
  %1921 = getelementptr inbounds i16, ptr %330, i64 %1920
  %1922 = load i16, ptr %1921, align 2, !tbaa !44
  %1923 = getelementptr inbounds i16, ptr %1844, i64 %1920
  store i16 %1922, ptr %1923, align 2, !tbaa !44
  %1924 = add nuw nsw i64 %1912, 3
  %1925 = getelementptr inbounds i16, ptr %330, i64 %1924
  %1926 = load i16, ptr %1925, align 2, !tbaa !44
  %1927 = getelementptr inbounds i16, ptr %1844, i64 %1924
  store i16 %1926, ptr %1927, align 2, !tbaa !44
  %1928 = add nuw nsw i64 %1912, 4
  %1929 = icmp eq i64 %1928, %1847
  br i1 %1929, label %1930, label %1911, !llvm.loop !359

1930:                                             ; preds = %1908, %1911, %1875, %1890
  %1931 = shl i64 %1839, 31
  %1932 = add i64 %1931, -4294967296
  %1933 = ashr i64 %1932, 32
  %1934 = getelementptr inbounds i16, ptr %1844, i64 %1933
  %1935 = load i16, ptr %1934, align 2, !tbaa !44
  br label %1936

1936:                                             ; preds = %1827, %1930
  %1937 = phi i64 [ %1840, %1930 ], [ 0, %1827 ]
  %1938 = phi i16 [ %1935, %1930 ], [ -1, %1827 ]
  %1939 = and i64 %1937, 4294967295
  %1940 = getelementptr inbounds i16, ptr %1844, i64 %1939
  store i16 %1938, ptr %1940, align 2, !tbaa !44
  %1941 = trunc i64 %1840 to i16
  %1942 = add i16 %1941, 1
  %1943 = sext i32 %1837 to i64
  %1944 = getelementptr inbounds i16, ptr %1294, i64 %1943
  store i16 %1942, ptr %1944, align 2, !tbaa !44
  %1945 = add nsw i32 %1841, 2
  %1946 = add nsw i32 %1945, %1837
  %1947 = ptrtoint ptr %1812 to i64
  %1948 = sub i64 %1947, %650
  %1949 = lshr exact i64 %1948, 1
  %1950 = trunc i64 %1949 to i32
  %1951 = add nsw i32 %1946, 1
  %1952 = sext i32 %1951 to i64
  %1953 = getelementptr i16, ptr %1294, i64 %1952
  %1954 = icmp sgt i32 %1950, 0
  br i1 %1954, label %1955, label %2045

1955:                                             ; preds = %1936
  %1956 = and i64 %1949, 4294967295
  %1957 = icmp ult i64 %1956, 8
  br i1 %1957, label %2001, label %1958

1958:                                             ; preds = %1955
  %1959 = shl nsw i64 %1952, 1
  %1960 = add i64 %1959, %1295
  %1961 = sub i64 %1960, %650
  %1962 = icmp ult i64 %1961, 128
  br i1 %1962, label %2001, label %1963

1963:                                             ; preds = %1958
  %1964 = icmp ult i64 %1956, 64
  br i1 %1964, label %1988, label %1965

1965:                                             ; preds = %1963
  %1966 = and i64 %1949, 63
  %1967 = sub nsw i64 %1956, %1966
  br label %1968

1968:                                             ; preds = %1968, %1965
  %1969 = phi i64 [ 0, %1965 ], [ %1982, %1968 ]
  %1970 = getelementptr inbounds i16, ptr %376, i64 %1969
  %1971 = load <16 x i16>, ptr %1970, align 2, !tbaa !44
  %1972 = getelementptr inbounds i16, ptr %1970, i64 16
  %1973 = load <16 x i16>, ptr %1972, align 2, !tbaa !44
  %1974 = getelementptr inbounds i16, ptr %1970, i64 32
  %1975 = load <16 x i16>, ptr %1974, align 2, !tbaa !44
  %1976 = getelementptr inbounds i16, ptr %1970, i64 48
  %1977 = load <16 x i16>, ptr %1976, align 2, !tbaa !44
  %1978 = getelementptr inbounds i16, ptr %1953, i64 %1969
  store <16 x i16> %1971, ptr %1978, align 2, !tbaa !44
  %1979 = getelementptr inbounds i16, ptr %1978, i64 16
  store <16 x i16> %1973, ptr %1979, align 2, !tbaa !44
  %1980 = getelementptr inbounds i16, ptr %1978, i64 32
  store <16 x i16> %1975, ptr %1980, align 2, !tbaa !44
  %1981 = getelementptr inbounds i16, ptr %1978, i64 48
  store <16 x i16> %1977, ptr %1981, align 2, !tbaa !44
  %1982 = add nuw i64 %1969, 64
  %1983 = icmp eq i64 %1982, %1967
  br i1 %1983, label %1984, label %1968, !llvm.loop !360

1984:                                             ; preds = %1968
  %1985 = icmp eq i64 %1966, 0
  br i1 %1985, label %2039, label %1986

1986:                                             ; preds = %1984
  %1987 = icmp ult i64 %1966, 8
  br i1 %1987, label %2001, label %1988

1988:                                             ; preds = %1963, %1986
  %1989 = phi i64 [ %1967, %1986 ], [ 0, %1963 ]
  %1990 = and i64 %1949, 7
  %1991 = sub nsw i64 %1956, %1990
  br label %1992

1992:                                             ; preds = %1992, %1988
  %1993 = phi i64 [ %1989, %1988 ], [ %1997, %1992 ]
  %1994 = getelementptr inbounds i16, ptr %376, i64 %1993
  %1995 = load <8 x i16>, ptr %1994, align 2, !tbaa !44
  %1996 = getelementptr inbounds i16, ptr %1953, i64 %1993
  store <8 x i16> %1995, ptr %1996, align 2, !tbaa !44
  %1997 = add nuw i64 %1993, 8
  %1998 = icmp eq i64 %1997, %1991
  br i1 %1998, label %1999, label %1992, !llvm.loop !361

1999:                                             ; preds = %1992
  %2000 = icmp eq i64 %1990, 0
  br i1 %2000, label %2039, label %2001

2001:                                             ; preds = %1958, %1955, %1986, %1999
  %2002 = phi i64 [ 0, %1955 ], [ 0, %1958 ], [ %1967, %1986 ], [ %1991, %1999 ]
  %2003 = sub i64 %1949, %2002
  %2004 = xor i64 %2002, -1
  %2005 = add nsw i64 %1956, %2004
  %2006 = and i64 %2003, 3
  %2007 = icmp eq i64 %2006, 0
  br i1 %2007, label %2017, label %2008

2008:                                             ; preds = %2001, %2008
  %2009 = phi i64 [ %2014, %2008 ], [ %2002, %2001 ]
  %2010 = phi i64 [ %2015, %2008 ], [ 0, %2001 ]
  %2011 = getelementptr inbounds i16, ptr %376, i64 %2009
  %2012 = load i16, ptr %2011, align 2, !tbaa !44
  %2013 = getelementptr inbounds i16, ptr %1953, i64 %2009
  store i16 %2012, ptr %2013, align 2, !tbaa !44
  %2014 = add nuw nsw i64 %2009, 1
  %2015 = add i64 %2010, 1
  %2016 = icmp eq i64 %2015, %2006
  br i1 %2016, label %2017, label %2008, !llvm.loop !362

2017:                                             ; preds = %2008, %2001
  %2018 = phi i64 [ %2002, %2001 ], [ %2014, %2008 ]
  %2019 = icmp ult i64 %2005, 3
  br i1 %2019, label %2039, label %2020

2020:                                             ; preds = %2017, %2020
  %2021 = phi i64 [ %2037, %2020 ], [ %2018, %2017 ]
  %2022 = getelementptr inbounds i16, ptr %376, i64 %2021
  %2023 = load i16, ptr %2022, align 2, !tbaa !44
  %2024 = getelementptr inbounds i16, ptr %1953, i64 %2021
  store i16 %2023, ptr %2024, align 2, !tbaa !44
  %2025 = add nuw nsw i64 %2021, 1
  %2026 = getelementptr inbounds i16, ptr %376, i64 %2025
  %2027 = load i16, ptr %2026, align 2, !tbaa !44
  %2028 = getelementptr inbounds i16, ptr %1953, i64 %2025
  store i16 %2027, ptr %2028, align 2, !tbaa !44
  %2029 = add nuw nsw i64 %2021, 2
  %2030 = getelementptr inbounds i16, ptr %376, i64 %2029
  %2031 = load i16, ptr %2030, align 2, !tbaa !44
  %2032 = getelementptr inbounds i16, ptr %1953, i64 %2029
  store i16 %2031, ptr %2032, align 2, !tbaa !44
  %2033 = add nuw nsw i64 %2021, 3
  %2034 = getelementptr inbounds i16, ptr %376, i64 %2033
  %2035 = load i16, ptr %2034, align 2, !tbaa !44
  %2036 = getelementptr inbounds i16, ptr %1953, i64 %2033
  store i16 %2035, ptr %2036, align 2, !tbaa !44
  %2037 = add nuw nsw i64 %2021, 4
  %2038 = icmp eq i64 %2037, %1956
  br i1 %2038, label %2039, label %2020, !llvm.loop !363

2039:                                             ; preds = %2017, %2020, %1984, %1999
  %2040 = shl i64 %1948, 31
  %2041 = add i64 %2040, -4294967296
  %2042 = ashr i64 %2041, 32
  %2043 = getelementptr inbounds i16, ptr %1953, i64 %2042
  %2044 = load i16, ptr %2043, align 2, !tbaa !44
  br label %2045

2045:                                             ; preds = %1936, %2039
  %2046 = phi i64 [ %1949, %2039 ], [ 0, %1936 ]
  %2047 = phi i16 [ %2044, %2039 ], [ -1, %1936 ]
  %2048 = and i64 %2046, 4294967295
  %2049 = getelementptr inbounds i16, ptr %1953, i64 %2048
  store i16 %2047, ptr %2049, align 2, !tbaa !44
  %2050 = trunc i64 %1949 to i16
  %2051 = add i16 %2050, 1
  %2052 = sext i32 %1946 to i64
  %2053 = getelementptr inbounds i16, ptr %1294, i64 %2052
  store i16 %2051, ptr %2053, align 2, !tbaa !44
  %2054 = add nsw i32 %1950, 2
  %2055 = add nsw i32 %2054, %1946
  %2056 = select i1 %143, i32 0, i32 %2055
  store i32 %2056, ptr %13, align 8
  br label %2088

2057:                                             ; preds = %698
  %2058 = load ptr, ptr %8, align 8, !tbaa !46
  %2059 = load i32, ptr %13, align 8, !tbaa !17
  %2060 = add i32 %2059, 1
  %2061 = sext i32 %2060 to i64
  %2062 = getelementptr inbounds i16, ptr %2058, i64 %2061
  %2063 = sext i32 %2059 to i64
  %2064 = getelementptr inbounds i16, ptr %2058, i64 %2063
  %2065 = load i16, ptr %2064, align 2, !tbaa !44
  %2066 = zext i16 %2065 to i32
  %2067 = add i32 %2060, %2066
  %2068 = add nsw i32 %2066, -1
  %2069 = add i32 %2067, 1
  %2070 = sext i32 %2069 to i64
  %2071 = getelementptr inbounds i16, ptr %2058, i64 %2070
  %2072 = sext i32 %2067 to i64
  %2073 = getelementptr inbounds i16, ptr %2058, i64 %2072
  %2074 = load i16, ptr %2073, align 2, !tbaa !44
  %2075 = zext i16 %2074 to i32
  %2076 = add i32 %2069, %2075
  %2077 = add nsw i32 %2075, -1
  %2078 = add i32 %2076, 1
  %2079 = sext i32 %2078 to i64
  %2080 = getelementptr inbounds i16, ptr %2058, i64 %2079
  %2081 = sext i32 %2076 to i64
  %2082 = getelementptr inbounds i16, ptr %2058, i64 %2081
  %2083 = load i16, ptr %2082, align 2, !tbaa !44
  %2084 = zext i16 %2083 to i32
  %2085 = add i32 %2078, %2084
  store i32 %2085, ptr %13, align 8, !tbaa !17
  %2086 = add nsw i32 %2084, -1
  %2087 = load i32, ptr @_ZN20ComputeNonbondedUtil17pairInteractionOnE, align 4, !tbaa !5
  br label %2088

2088:                                             ; preds = %2045, %2057
  %2089 = phi i32 [ %2087, %2057 ], [ %1299, %2045 ]
  %2090 = phi ptr [ %2062, %2057 ], [ %1298, %2045 ]
  %2091 = phi i32 [ %2068, %2057 ], [ %1819, %2045 ]
  %2092 = phi ptr [ %2071, %2057 ], [ %1844, %2045 ]
  %2093 = phi i32 [ %2077, %2057 ], [ %1841, %2045 ]
  %2094 = phi ptr [ %2080, %2057 ], [ %1953, %2045 ]
  %2095 = phi i32 [ %2086, %2057 ], [ %1950, %2045 ]
  %2096 = phi i32 [ %680, %2057 ], [ %1256, %2045 ]
  %2097 = phi i32 [ %679, %2057 ], [ %1257, %2045 ]
  %2098 = phi i32 [ %678, %2057 ], [ %1258, %2045 ]
  %2099 = phi i32 [ %677, %2057 ], [ %1259, %2045 ]
  %2100 = phi ptr [ %675, %2057 ], [ %952, %2045 ]
  %2101 = phi ptr [ %674, %2057 ], [ %953, %2045 ]
  %2102 = phi ptr [ %673, %2057 ], [ %954, %2045 ]
  %2103 = icmp eq i32 %2089, 0
  %2104 = load i32, ptr @_ZN20ComputeNonbondedUtil19pairInteractionSelfE, align 4
  %2105 = icmp ne i32 %2104, 0
  %2106 = select i1 %2103, i1 true, i1 %2105
  br i1 %2106, label %2112, label %2107

2107:                                             ; preds = %2088
  %2108 = getelementptr inbounds %struct.CompAtom, ptr %40, i64 %683, i32 3
  %2109 = load i8, ptr %2108, align 2, !tbaa !301
  %2110 = icmp eq i8 %2109, 1
  %2111 = select i1 %2110, double 1.000000e+00, double -1.000000e+00
  br label %2112

2112:                                             ; preds = %2088, %2107
  %2113 = phi double [ %2111, %2107 ], [ 0.000000e+00, %2088 ]
  %2114 = getelementptr inbounds %struct.CompAtom, ptr %40, i64 %683, i32 1
  %2115 = load float, ptr %2114, align 8, !tbaa !79
  %2116 = fpext float %2115 to double
  %2117 = fmul double %2116, 0x4074C104816F0069
  %2118 = fmul double %29, %2117
  %2119 = fmul double %24, %2118
  %2120 = getelementptr inbounds %struct.CompAtom, ptr %40, i64 %683, i32 2
  %2121 = load i16, ptr %2120, align 4, !tbaa !80
  %2122 = sext i16 %2121 to i32
  %2123 = load ptr, ptr %651, align 8, !tbaa !81
  %2124 = load i32, ptr %652, align 8, !tbaa !83
  %2125 = shl nsw i32 %2122, 1
  %2126 = mul i32 %2125, %2124
  %2127 = zext i32 %2126 to i64
  %2128 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %2123, i64 %2127
  %2129 = load double, ptr @_ZN20ComputeNonbondedUtil7cutoff2E, align 8, !tbaa !19
  %2130 = extractelement <2 x double> %701, i64 0
  %2131 = extractelement <2 x double> %701, i64 1
  %2132 = tail call noundef i32 @_Z22pairlist_from_pairlistddddPK8CompAtomPKtiPtdPd(double noundef %2129, double noundef %2130, double noundef %2131, double noundef %704, ptr noundef %42, ptr noundef nonnull %2090, i32 noundef %2091, ptr noundef %95, double noundef %32, ptr noundef %141)
  %2133 = icmp sgt i32 %2132, 0
  br i1 %2133, label %2134, label %2315

2134:                                             ; preds = %2112
  %2135 = load ptr, ptr @_ZN20ComputeNonbondedUtil8r2_tableE, align 8, !tbaa !23
  %2136 = zext i32 %2132 to i64
  br label %2137

2137:                                             ; preds = %2134, %2137
  %2138 = phi i64 [ 0, %2134 ], [ %2313, %2137 ]
  %2139 = phi double [ %671, %2134 ], [ %2212, %2137 ]
  %2140 = phi double [ 0.000000e+00, %2134 ], [ %2291, %2137 ]
  %2141 = phi double [ 0.000000e+00, %2134 ], [ %2309, %2137 ]
  %2142 = phi <2 x double> [ zeroinitializer, %2134 ], [ %2290, %2137 ]
  %2143 = phi <2 x double> [ zeroinitializer, %2134 ], [ %2305, %2137 ]
  %2144 = phi <2 x double> [ %682, %2134 ], [ %2292, %2137 ]
  %2145 = shl nuw nsw i64 %2138, 1
  %2146 = getelementptr inbounds i32, ptr %142, i64 %2145
  %2147 = load i32, ptr %2146, align 4, !tbaa !5
  %2148 = ashr i32 %2147, 14
  %2149 = add nsw i32 %2148, %35
  %2150 = getelementptr inbounds i16, ptr %95, i64 %2138
  %2151 = load i16, ptr %2150, align 2, !tbaa !44
  %2152 = zext i16 %2151 to i64
  %2153 = getelementptr inbounds %struct.CompAtom, ptr %42, i64 %2152
  %2154 = getelementptr inbounds double, ptr %141, i64 %2138
  %2155 = load double, ptr %2154, align 8, !tbaa !19
  %2156 = sext i32 %2149 to i64
  %2157 = getelementptr inbounds double, ptr %2135, i64 %2156
  %2158 = load double, ptr %2157, align 8, !tbaa !19
  %2159 = fsub double %2155, %2158
  %2160 = shl nsw i32 %2149, 4
  %2161 = sext i32 %2160 to i64
  %2162 = getelementptr inbounds double, ptr %27, i64 %2161
  %2163 = getelementptr inbounds %struct.CompAtom, ptr %42, i64 %2152, i32 2
  %2164 = load i16, ptr %2163, align 4, !tbaa !80
  %2165 = sext i16 %2164 to i32
  %2166 = shl nsw i32 %2165, 1
  %2167 = sext i32 %2166 to i64
  %2168 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %2128, i64 %2167
  %2169 = getelementptr inbounds %class.Vector, ptr %626, i64 %2152
  %2170 = getelementptr inbounds %class.Vector, ptr %632, i64 %2152
  %2171 = getelementptr inbounds %struct.CompAtom, ptr %42, i64 %2152, i32 1
  %2172 = load float, ptr %2171, align 8, !tbaa !79
  %2173 = fpext float %2172 to double
  %2174 = fmul double %2119, %2173
  %2175 = getelementptr inbounds %class.Vector, ptr %2153, i64 0, i32 2
  %2176 = load double, ptr %2175, align 8, !tbaa !49
  %2177 = fsub double %704, %2176
  %2178 = load double, ptr %2168, align 8, !tbaa !84
  %2179 = fmul double %29, %2178
  %2180 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %2128, i64 %2167, i32 1
  %2181 = load double, ptr %2180, align 8, !tbaa !86
  %2182 = load double, ptr %2162, align 8, !tbaa !19
  %2183 = getelementptr inbounds double, ptr %2162, i64 2
  %2184 = load double, ptr %2183, align 8, !tbaa !19
  %2185 = fmul double %2181, %653
  %2186 = fmul double %2185, %2184
  %2187 = tail call double @llvm.fmuladd.f64(double %2179, double %2182, double %2186)
  %2188 = getelementptr inbounds double, ptr %2162, i64 1
  %2189 = load double, ptr %2188, align 8, !tbaa !19
  %2190 = getelementptr inbounds double, ptr %2162, i64 3
  %2191 = load double, ptr %2190, align 8, !tbaa !19
  %2192 = fmul double %2185, %2191
  %2193 = tail call double @llvm.fmuladd.f64(double %2179, double %2189, double %2192)
  %2194 = getelementptr inbounds double, ptr %2162, i64 4
  %2195 = load double, ptr %2194, align 8, !tbaa !19
  %2196 = getelementptr inbounds double, ptr %2162, i64 6
  %2197 = load double, ptr %2196, align 8, !tbaa !19
  %2198 = fmul double %2185, %2197
  %2199 = tail call double @llvm.fmuladd.f64(double %2179, double %2195, double %2198)
  %2200 = getelementptr inbounds double, ptr %2162, i64 5
  %2201 = load double, ptr %2200, align 8, !tbaa !19
  %2202 = getelementptr inbounds double, ptr %2162, i64 7
  %2203 = load double, ptr %2202, align 8, !tbaa !19
  %2204 = fmul double %2185, %2203
  %2205 = tail call double @llvm.fmuladd.f64(double %2179, double %2201, double %2204)
  %2206 = fmul double %2159, %2187
  %2207 = fmul double %2193, 2.500000e-01
  %2208 = tail call double @llvm.fmuladd.f64(double %2206, double 0x3FC5555555555555, double %2207)
  %2209 = fmul double %2199, 5.000000e-01
  %2210 = tail call double @llvm.fmuladd.f64(double %2208, double %2159, double %2209)
  %2211 = tail call double @llvm.fmuladd.f64(double %2210, double %2159, double %2205)
  %2212 = fsub double %2139, %2211
  %2213 = tail call double @llvm.fmuladd.f64(double %2159, double %2187, double %2193)
  %2214 = tail call double @llvm.fmuladd.f64(double %2213, double %2159, double %2199)
  %2215 = fmul double %2113, %2214
  %2216 = load double, ptr %655, align 8, !tbaa !19
  %2217 = tail call double @llvm.fmuladd.f64(double %2215, double %2177, double %2216)
  %2218 = getelementptr inbounds double, ptr %2162, i64 8
  %2219 = getelementptr inbounds double, ptr %2162, i64 9
  %2220 = getelementptr inbounds double, ptr %2162, i64 10
  %2221 = getelementptr inbounds double, ptr %2162, i64 11
  %2222 = load double, ptr %656, align 8, !tbaa !19
  %2223 = load double, ptr %657, align 8, !tbaa !19
  %2224 = load double, ptr %658, align 8, !tbaa !19
  %2225 = load <2 x double>, ptr %2153, align 8, !tbaa !19
  %2226 = fsub <2 x double> %701, %2225
  %2227 = load <2 x double>, ptr %654, align 8, !tbaa !19
  %2228 = insertelement <2 x double> poison, double %2215, i64 0
  %2229 = shufflevector <2 x double> %2228, <2 x double> poison, <2 x i32> zeroinitializer
  %2230 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2229, <2 x double> %2226, <2 x double> %2227)
  store <2 x double> %2230, ptr %654, align 8, !tbaa !19
  store double %2217, ptr %655, align 8, !tbaa !19
  %2231 = load double, ptr %2218, align 8, !tbaa !19
  %2232 = load double, ptr %2219, align 8, !tbaa !19
  %2233 = load double, ptr %2220, align 8, !tbaa !19
  %2234 = load double, ptr %2221, align 8, !tbaa !19
  %2235 = getelementptr inbounds %class.Vector, ptr %626, i64 %2152, i32 2
  %2236 = getelementptr inbounds double, ptr %2162, i64 12
  %2237 = getelementptr inbounds double, ptr %2162, i64 13
  %2238 = getelementptr inbounds double, ptr %2162, i64 14
  %2239 = getelementptr inbounds double, ptr %2162, i64 15
  %2240 = fmul double %2174, %2231
  %2241 = fmul double %2174, %2232
  %2242 = fmul double %2174, %2233
  %2243 = tail call double @llvm.fmuladd.f64(double %2159, double %2240, double %2241)
  %2244 = tail call double @llvm.fmuladd.f64(double %2243, double %2159, double %2242)
  %2245 = fmul double %2113, %2244
  %2246 = extractelement <2 x double> %2226, i64 0
  %2247 = tail call double @llvm.fmuladd.f64(double %2245, double %2246, double %2222)
  store double %2247, ptr %656, align 8, !tbaa !19
  %2248 = extractelement <2 x double> %2226, i64 1
  %2249 = tail call double @llvm.fmuladd.f64(double %2245, double %2248, double %2223)
  store double %2249, ptr %657, align 8, !tbaa !19
  %2250 = tail call double @llvm.fmuladd.f64(double %2245, double %2177, double %2224)
  store double %2250, ptr %658, align 8, !tbaa !19
  %2251 = fadd double %2187, %2240
  %2252 = fadd double %2193, %2241
  %2253 = fadd double %2199, %2242
  %2254 = tail call double @llvm.fmuladd.f64(double %2159, double %2251, double %2252)
  %2255 = tail call double @llvm.fmuladd.f64(double %2254, double %2159, double %2253)
  %2256 = insertelement <2 x double> poison, double %2255, i64 0
  %2257 = shufflevector <2 x double> %2256, <2 x double> poison, <2 x i32> zeroinitializer
  %2258 = fmul <2 x double> %2226, %2257
  %2259 = load <2 x double>, ptr %2169, align 8, !tbaa !19
  %2260 = fsub <2 x double> %2259, %2258
  store <2 x double> %2260, ptr %2169, align 8, !tbaa !19
  %2261 = fmul double %2177, %2255
  %2262 = load double, ptr %2235, align 8, !tbaa !87
  %2263 = fsub double %2262, %2261
  store double %2263, ptr %2235, align 8, !tbaa !87
  %2264 = load double, ptr %2236, align 8, !tbaa !19
  %2265 = load double, ptr %2237, align 8, !tbaa !19
  %2266 = load double, ptr %2238, align 8, !tbaa !19
  %2267 = load double, ptr %2239, align 8, !tbaa !19
  %2268 = fmul double %2174, %2264
  %2269 = fmul double %2174, %2265
  %2270 = fmul double %2174, %2266
  %2271 = insertelement <2 x double> poison, double %2174, i64 0
  %2272 = shufflevector <2 x double> %2271, <2 x double> poison, <2 x i32> zeroinitializer
  %2273 = insertelement <2 x double> poison, double %2234, i64 0
  %2274 = insertelement <2 x double> %2273, double %2267, i64 1
  %2275 = fmul <2 x double> %2272, %2274
  %2276 = insertelement <2 x double> poison, double %2159, i64 0
  %2277 = shufflevector <2 x double> %2276, <2 x double> poison, <2 x i32> zeroinitializer
  %2278 = insertelement <2 x double> poison, double %2240, i64 0
  %2279 = insertelement <2 x double> %2278, double %2268, i64 1
  %2280 = fmul <2 x double> %2277, %2279
  %2281 = insertelement <2 x double> poison, double %2241, i64 0
  %2282 = insertelement <2 x double> %2281, double %2269, i64 1
  %2283 = fmul <2 x double> %2282, <double 2.500000e-01, double 2.500000e-01>
  %2284 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2280, <2 x double> <double 0x3FC5555555555555, double 0x3FC5555555555555>, <2 x double> %2283)
  %2285 = insertelement <2 x double> poison, double %2242, i64 0
  %2286 = insertelement <2 x double> %2285, double %2270, i64 1
  %2287 = fmul <2 x double> %2286, <double 5.000000e-01, double 5.000000e-01>
  %2288 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2284, <2 x double> %2277, <2 x double> %2287)
  %2289 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2288, <2 x double> %2277, <2 x double> %2275)
  %2290 = fadd <2 x double> %2142, %2258
  %2291 = fadd double %2140, %2261
  %2292 = fsub <2 x double> %2144, %2289
  %2293 = tail call double @llvm.fmuladd.f64(double %2159, double %2268, double %2269)
  %2294 = tail call double @llvm.fmuladd.f64(double %2293, double %2159, double %2270)
  %2295 = fmul double %2113, %2294
  %2296 = load <2 x double>, ptr %656, align 8, !tbaa !19
  %2297 = insertelement <2 x double> poison, double %2295, i64 0
  %2298 = shufflevector <2 x double> %2297, <2 x double> poison, <2 x i32> zeroinitializer
  %2299 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2298, <2 x double> %2226, <2 x double> %2296)
  store <2 x double> %2299, ptr %656, align 8, !tbaa !19
  %2300 = load double, ptr %658, align 8, !tbaa !19
  %2301 = tail call double @llvm.fmuladd.f64(double %2295, double %2177, double %2300)
  store double %2301, ptr %658, align 8, !tbaa !19
  %2302 = insertelement <2 x double> poison, double %2294, i64 0
  %2303 = shufflevector <2 x double> %2302, <2 x double> poison, <2 x i32> zeroinitializer
  %2304 = fmul <2 x double> %2226, %2303
  %2305 = fadd <2 x double> %2143, %2304
  %2306 = load <2 x double>, ptr %2170, align 8, !tbaa !19
  %2307 = fsub <2 x double> %2306, %2304
  store <2 x double> %2307, ptr %2170, align 8, !tbaa !19
  %2308 = fmul double %2177, %2294
  %2309 = fadd double %2141, %2308
  %2310 = getelementptr inbounds %class.Vector, ptr %632, i64 %2152, i32 2
  %2311 = load double, ptr %2310, align 8, !tbaa !87
  %2312 = fsub double %2311, %2308
  store double %2312, ptr %2310, align 8, !tbaa !87
  %2313 = add nuw nsw i64 %2138, 1
  %2314 = icmp eq i64 %2313, %2136
  br i1 %2314, label %2315, label %2137

2315:                                             ; preds = %2137, %2112
  %2316 = phi double [ 0.000000e+00, %2112 ], [ %2309, %2137 ]
  %2317 = phi double [ 0.000000e+00, %2112 ], [ %2291, %2137 ]
  %2318 = phi double [ %671, %2112 ], [ %2212, %2137 ]
  %2319 = phi <2 x double> [ zeroinitializer, %2112 ], [ %2290, %2137 ]
  %2320 = phi <2 x double> [ zeroinitializer, %2112 ], [ %2305, %2137 ]
  %2321 = phi <2 x double> [ %682, %2112 ], [ %2292, %2137 ]
  %2322 = load double, ptr @_ZN20ComputeNonbondedUtil7cutoff2E, align 8, !tbaa !19
  %2323 = tail call noundef i32 @_Z22pairlist_from_pairlistddddPK8CompAtomPKtiPtdPd(double noundef %2322, double noundef %2130, double noundef %2131, double noundef %704, ptr noundef %42, ptr noundef %2094, i32 noundef %2095, ptr noundef %95, double noundef %32, ptr noundef %141)
  %2324 = add nsw i32 %2323, %670
  %2325 = icmp sgt i32 %2323, 0
  br i1 %2325, label %2326, label %2523

2326:                                             ; preds = %2315
  %2327 = load ptr, ptr @_ZN20ComputeNonbondedUtil8r2_tableE, align 8, !tbaa !23
  %2328 = zext i32 %2323 to i64
  br label %2329

2329:                                             ; preds = %2326, %2329
  %2330 = phi i64 [ 0, %2326 ], [ %2521, %2329 ]
  %2331 = phi double [ %2318, %2326 ], [ %2404, %2329 ]
  %2332 = phi double [ %2317, %2326 ], [ %2499, %2329 ]
  %2333 = phi double [ %2316, %2326 ], [ %2517, %2329 ]
  %2334 = phi <2 x double> [ %2319, %2326 ], [ %2498, %2329 ]
  %2335 = phi <2 x double> [ %2320, %2326 ], [ %2513, %2329 ]
  %2336 = phi <2 x double> [ %2321, %2326 ], [ %2500, %2329 ]
  %2337 = shl nuw nsw i64 %2330, 1
  %2338 = getelementptr inbounds i32, ptr %142, i64 %2337
  %2339 = load i32, ptr %2338, align 4, !tbaa !5
  %2340 = ashr i32 %2339, 14
  %2341 = add nsw i32 %2340, %35
  %2342 = getelementptr inbounds i16, ptr %95, i64 %2330
  %2343 = load i16, ptr %2342, align 2, !tbaa !44
  %2344 = zext i16 %2343 to i64
  %2345 = getelementptr inbounds %struct.CompAtom, ptr %42, i64 %2344
  %2346 = getelementptr inbounds double, ptr %141, i64 %2330
  %2347 = load double, ptr %2346, align 8, !tbaa !19
  %2348 = sext i32 %2341 to i64
  %2349 = getelementptr inbounds double, ptr %2327, i64 %2348
  %2350 = load double, ptr %2349, align 8, !tbaa !19
  %2351 = fsub double %2347, %2350
  %2352 = shl nsw i32 %2341, 4
  %2353 = sext i32 %2352 to i64
  %2354 = getelementptr inbounds double, ptr %27, i64 %2353
  %2355 = getelementptr inbounds %struct.CompAtom, ptr %42, i64 %2344, i32 2
  %2356 = load i16, ptr %2355, align 4, !tbaa !80
  %2357 = sext i16 %2356 to i32
  %2358 = shl nsw i32 %2357, 1
  %2359 = sext i32 %2358 to i64
  %2360 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %2128, i64 %2359
  %2361 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %2360, i64 1
  %2362 = getelementptr inbounds %class.Vector, ptr %626, i64 %2344
  %2363 = getelementptr inbounds %class.Vector, ptr %632, i64 %2344
  %2364 = getelementptr inbounds %struct.CompAtom, ptr %42, i64 %2344, i32 1
  %2365 = load float, ptr %2364, align 8, !tbaa !79
  %2366 = fpext float %2365 to double
  %2367 = getelementptr inbounds %class.Vector, ptr %2345, i64 0, i32 2
  %2368 = load double, ptr %2367, align 8, !tbaa !49
  %2369 = fsub double %704, %2368
  %2370 = load double, ptr %2361, align 8, !tbaa !84
  %2371 = fmul double %29, %2370
  %2372 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %2360, i64 1, i32 1
  %2373 = load double, ptr %2372, align 8, !tbaa !86
  %2374 = load double, ptr %2354, align 8, !tbaa !19
  %2375 = getelementptr inbounds double, ptr %2354, i64 2
  %2376 = load double, ptr %2375, align 8, !tbaa !19
  %2377 = fmul double %2373, %653
  %2378 = fmul double %2377, %2376
  %2379 = tail call double @llvm.fmuladd.f64(double %2371, double %2374, double %2378)
  %2380 = getelementptr inbounds double, ptr %2354, i64 1
  %2381 = load double, ptr %2380, align 8, !tbaa !19
  %2382 = getelementptr inbounds double, ptr %2354, i64 3
  %2383 = load double, ptr %2382, align 8, !tbaa !19
  %2384 = fmul double %2377, %2383
  %2385 = tail call double @llvm.fmuladd.f64(double %2371, double %2381, double %2384)
  %2386 = getelementptr inbounds double, ptr %2354, i64 4
  %2387 = load double, ptr %2386, align 8, !tbaa !19
  %2388 = getelementptr inbounds double, ptr %2354, i64 6
  %2389 = load double, ptr %2388, align 8, !tbaa !19
  %2390 = fmul double %2377, %2389
  %2391 = tail call double @llvm.fmuladd.f64(double %2371, double %2387, double %2390)
  %2392 = getelementptr inbounds double, ptr %2354, i64 5
  %2393 = load double, ptr %2392, align 8, !tbaa !19
  %2394 = getelementptr inbounds double, ptr %2354, i64 7
  %2395 = load double, ptr %2394, align 8, !tbaa !19
  %2396 = fmul double %2377, %2395
  %2397 = tail call double @llvm.fmuladd.f64(double %2371, double %2393, double %2396)
  %2398 = fmul double %2351, %2379
  %2399 = fmul double %2385, 2.500000e-01
  %2400 = tail call double @llvm.fmuladd.f64(double %2398, double 0x3FC5555555555555, double %2399)
  %2401 = fmul double %2391, 5.000000e-01
  %2402 = tail call double @llvm.fmuladd.f64(double %2400, double %2351, double %2401)
  %2403 = tail call double @llvm.fmuladd.f64(double %2402, double %2351, double %2397)
  %2404 = fsub double %2331, %2403
  %2405 = tail call double @llvm.fmuladd.f64(double %2351, double %2379, double %2385)
  %2406 = tail call double @llvm.fmuladd.f64(double %2405, double %2351, double %2391)
  %2407 = fmul double %2113, %2406
  %2408 = load double, ptr %655, align 8, !tbaa !19
  %2409 = tail call double @llvm.fmuladd.f64(double %2407, double %2369, double %2408)
  %2410 = getelementptr inbounds double, ptr %2354, i64 8
  %2411 = getelementptr inbounds double, ptr %2354, i64 9
  %2412 = getelementptr inbounds double, ptr %2354, i64 10
  %2413 = getelementptr inbounds double, ptr %2354, i64 11
  %2414 = load double, ptr %656, align 8, !tbaa !19
  %2415 = load double, ptr %657, align 8, !tbaa !19
  %2416 = load double, ptr %658, align 8, !tbaa !19
  %2417 = load <2 x double>, ptr %2345, align 8, !tbaa !19
  %2418 = fsub <2 x double> %701, %2417
  %2419 = load <2 x double>, ptr %654, align 8, !tbaa !19
  %2420 = insertelement <2 x double> poison, double %2407, i64 0
  %2421 = shufflevector <2 x double> %2420, <2 x double> poison, <2 x i32> zeroinitializer
  %2422 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2421, <2 x double> %2418, <2 x double> %2419)
  store <2 x double> %2422, ptr %654, align 8, !tbaa !19
  store double %2409, ptr %655, align 8, !tbaa !19
  %2423 = load double, ptr %2410, align 8, !tbaa !19
  %2424 = load double, ptr %2411, align 8, !tbaa !19
  %2425 = load double, ptr %2412, align 8, !tbaa !19
  %2426 = load double, ptr %2413, align 8, !tbaa !19
  %2427 = getelementptr inbounds %class.Vector, ptr %626, i64 %2344, i32 2
  %2428 = shl nsw i32 %2341, 2
  %2429 = sext i32 %2428 to i64
  %2430 = getelementptr inbounds double, ptr %28, i64 %2429
  %2431 = getelementptr inbounds double, ptr %2354, i64 12
  %2432 = getelementptr inbounds double, ptr %2354, i64 13
  %2433 = getelementptr inbounds double, ptr %2354, i64 14
  %2434 = getelementptr inbounds double, ptr %2354, i64 15
  %2435 = getelementptr inbounds double, ptr %2430, i64 1
  %2436 = getelementptr inbounds double, ptr %2430, i64 2
  %2437 = getelementptr inbounds double, ptr %2430, i64 3
  %2438 = fmul double %2119, %2366
  %2439 = fmul double %659, %2438
  %2440 = fmul double %2439, %2423
  %2441 = fmul double %2439, %2424
  %2442 = fmul double %2439, %2425
  %2443 = tail call double @llvm.fmuladd.f64(double %2351, double %2440, double %2441)
  %2444 = tail call double @llvm.fmuladd.f64(double %2443, double %2351, double %2442)
  %2445 = fmul double %2113, %2444
  %2446 = extractelement <2 x double> %2418, i64 0
  %2447 = tail call double @llvm.fmuladd.f64(double %2445, double %2446, double %2414)
  store double %2447, ptr %656, align 8, !tbaa !19
  %2448 = extractelement <2 x double> %2418, i64 1
  %2449 = tail call double @llvm.fmuladd.f64(double %2445, double %2448, double %2415)
  store double %2449, ptr %657, align 8, !tbaa !19
  %2450 = tail call double @llvm.fmuladd.f64(double %2445, double %2369, double %2416)
  store double %2450, ptr %658, align 8, !tbaa !19
  %2451 = fadd double %2379, %2440
  %2452 = fadd double %2385, %2441
  %2453 = fadd double %2391, %2442
  %2454 = tail call double @llvm.fmuladd.f64(double %2351, double %2451, double %2452)
  %2455 = tail call double @llvm.fmuladd.f64(double %2454, double %2351, double %2453)
  %2456 = insertelement <2 x double> poison, double %2455, i64 0
  %2457 = shufflevector <2 x double> %2456, <2 x double> poison, <2 x i32> zeroinitializer
  %2458 = fmul <2 x double> %2418, %2457
  %2459 = load <2 x double>, ptr %2362, align 8, !tbaa !19
  %2460 = fsub <2 x double> %2459, %2458
  store <2 x double> %2460, ptr %2362, align 8, !tbaa !19
  %2461 = fmul double %2369, %2455
  %2462 = load double, ptr %2427, align 8, !tbaa !87
  %2463 = fsub double %2462, %2461
  store double %2463, ptr %2427, align 8, !tbaa !87
  %2464 = load double, ptr %2431, align 8, !tbaa !19
  %2465 = load double, ptr %2432, align 8, !tbaa !19
  %2466 = load double, ptr %2433, align 8, !tbaa !19
  %2467 = load double, ptr %2434, align 8, !tbaa !19
  %2468 = load double, ptr %2430, align 8, !tbaa !19
  %2469 = tail call double @llvm.fmuladd.f64(double %31, double %2468, double %2467)
  %2470 = load double, ptr %2435, align 8, !tbaa !19
  %2471 = tail call double @llvm.fmuladd.f64(double %660, double %2470, double %2466)
  %2472 = load double, ptr %2436, align 8, !tbaa !19
  %2473 = tail call double @llvm.fmuladd.f64(double %661, double %2472, double %2465)
  %2474 = load double, ptr %2437, align 8, !tbaa !19
  %2475 = tail call double @llvm.fmuladd.f64(double %662, double %2474, double %2464)
  %2476 = fmul double %2438, %2475
  %2477 = fmul double %2438, %2473
  %2478 = fmul double %2438, %2471
  %2479 = insertelement <2 x double> poison, double %2439, i64 0
  %2480 = insertelement <2 x double> %2479, double %2438, i64 1
  %2481 = insertelement <2 x double> poison, double %2426, i64 0
  %2482 = insertelement <2 x double> %2481, double %2469, i64 1
  %2483 = fmul <2 x double> %2480, %2482
  %2484 = insertelement <2 x double> poison, double %2351, i64 0
  %2485 = shufflevector <2 x double> %2484, <2 x double> poison, <2 x i32> zeroinitializer
  %2486 = insertelement <2 x double> poison, double %2440, i64 0
  %2487 = insertelement <2 x double> %2486, double %2476, i64 1
  %2488 = fmul <2 x double> %2485, %2487
  %2489 = insertelement <2 x double> poison, double %2441, i64 0
  %2490 = insertelement <2 x double> %2489, double %2477, i64 1
  %2491 = fmul <2 x double> %2490, <double 2.500000e-01, double 2.500000e-01>
  %2492 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2488, <2 x double> <double 0x3FC5555555555555, double 0x3FC5555555555555>, <2 x double> %2491)
  %2493 = insertelement <2 x double> poison, double %2442, i64 0
  %2494 = insertelement <2 x double> %2493, double %2478, i64 1
  %2495 = fmul <2 x double> %2494, <double 5.000000e-01, double 5.000000e-01>
  %2496 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2492, <2 x double> %2485, <2 x double> %2495)
  %2497 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2496, <2 x double> %2485, <2 x double> %2483)
  %2498 = fadd <2 x double> %2334, %2458
  %2499 = fadd double %2332, %2461
  %2500 = fsub <2 x double> %2336, %2497
  %2501 = tail call double @llvm.fmuladd.f64(double %2351, double %2476, double %2477)
  %2502 = tail call double @llvm.fmuladd.f64(double %2501, double %2351, double %2478)
  %2503 = fmul double %2113, %2502
  %2504 = load <2 x double>, ptr %656, align 8, !tbaa !19
  %2505 = insertelement <2 x double> poison, double %2503, i64 0
  %2506 = shufflevector <2 x double> %2505, <2 x double> poison, <2 x i32> zeroinitializer
  %2507 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2506, <2 x double> %2418, <2 x double> %2504)
  store <2 x double> %2507, ptr %656, align 8, !tbaa !19
  %2508 = load double, ptr %658, align 8, !tbaa !19
  %2509 = tail call double @llvm.fmuladd.f64(double %2503, double %2369, double %2508)
  store double %2509, ptr %658, align 8, !tbaa !19
  %2510 = insertelement <2 x double> poison, double %2502, i64 0
  %2511 = shufflevector <2 x double> %2510, <2 x double> poison, <2 x i32> zeroinitializer
  %2512 = fmul <2 x double> %2418, %2511
  %2513 = fadd <2 x double> %2335, %2512
  %2514 = load <2 x double>, ptr %2363, align 8, !tbaa !19
  %2515 = fsub <2 x double> %2514, %2512
  store <2 x double> %2515, ptr %2363, align 8, !tbaa !19
  %2516 = fmul double %2369, %2502
  %2517 = fadd double %2333, %2516
  %2518 = getelementptr inbounds %class.Vector, ptr %632, i64 %2344, i32 2
  %2519 = load double, ptr %2518, align 8, !tbaa !87
  %2520 = fsub double %2519, %2516
  store double %2520, ptr %2518, align 8, !tbaa !87
  %2521 = add nuw nsw i64 %2330, 1
  %2522 = icmp eq i64 %2521, %2328
  br i1 %2522, label %2523, label %2329

2523:                                             ; preds = %2329, %2315
  %2524 = phi double [ %2316, %2315 ], [ %2517, %2329 ]
  %2525 = phi double [ %2317, %2315 ], [ %2499, %2329 ]
  %2526 = phi double [ %2318, %2315 ], [ %2404, %2329 ]
  %2527 = phi <2 x double> [ %2319, %2315 ], [ %2498, %2329 ]
  %2528 = phi <2 x double> [ %2320, %2315 ], [ %2513, %2329 ]
  %2529 = phi <2 x double> [ %2321, %2315 ], [ %2500, %2329 ]
  %2530 = load double, ptr @_ZN20ComputeNonbondedUtil7cutoff2E, align 8, !tbaa !19
  %2531 = tail call noundef i32 @_Z22pairlist_from_pairlistddddPK8CompAtomPKtiPtdPd(double noundef %2530, double noundef %2130, double noundef %2131, double noundef %704, ptr noundef %42, ptr noundef %2092, i32 noundef %2093, ptr noundef %95, double noundef %32, ptr noundef %141)
  %2532 = add nsw i32 %2324, %2531
  %2533 = icmp sgt i32 %2531, 0
  %2534 = extractelement <2 x double> %2529, i64 1
  br i1 %2533, label %2535, label %2626

2535:                                             ; preds = %2523
  %2536 = load ptr, ptr @_ZN20ComputeNonbondedUtil8r2_tableE, align 8, !tbaa !23
  %2537 = zext i32 %2531 to i64
  br label %2538

2538:                                             ; preds = %2535, %2538
  %2539 = phi i64 [ 0, %2535 ], [ %2624, %2538 ]
  %2540 = phi double [ %2534, %2535 ], [ %2601, %2538 ]
  %2541 = phi double [ %2524, %2535 ], [ %2620, %2538 ]
  %2542 = phi <2 x double> [ %2528, %2535 ], [ %2616, %2538 ]
  %2543 = shl nuw nsw i64 %2539, 1
  %2544 = getelementptr inbounds i32, ptr %142, i64 %2543
  %2545 = load i32, ptr %2544, align 4, !tbaa !5
  %2546 = ashr i32 %2545, 14
  %2547 = add nsw i32 %2546, %35
  %2548 = getelementptr inbounds i16, ptr %95, i64 %2539
  %2549 = load i16, ptr %2548, align 2, !tbaa !44
  %2550 = zext i16 %2549 to i64
  %2551 = getelementptr inbounds %struct.CompAtom, ptr %42, i64 %2550
  %2552 = getelementptr inbounds double, ptr %141, i64 %2539
  %2553 = load double, ptr %2552, align 8, !tbaa !19
  %2554 = sext i32 %2547 to i64
  %2555 = getelementptr inbounds double, ptr %2536, i64 %2554
  %2556 = load double, ptr %2555, align 8, !tbaa !19
  %2557 = fsub double %2553, %2556
  %2558 = shl nsw i32 %2547, 4
  %2559 = sext i32 %2558 to i64
  %2560 = getelementptr inbounds double, ptr %27, i64 %2559
  %2561 = getelementptr inbounds %class.Vector, ptr %632, i64 %2550
  %2562 = getelementptr inbounds %struct.CompAtom, ptr %42, i64 %2550, i32 1
  %2563 = load float, ptr %2562, align 8, !tbaa !79
  %2564 = fpext float %2563 to double
  %2565 = fmul double %2119, %2564
  %2566 = getelementptr inbounds %class.Vector, ptr %2551, i64 0, i32 2
  %2567 = load double, ptr %2566, align 8, !tbaa !49
  %2568 = fsub double %704, %2567
  %2569 = shl nsw i32 %2547, 2
  %2570 = sext i32 %2569 to i64
  %2571 = getelementptr inbounds double, ptr %28, i64 %2570
  %2572 = getelementptr inbounds double, ptr %2560, i64 12
  %2573 = load double, ptr %2572, align 8, !tbaa !19
  %2574 = getelementptr inbounds double, ptr %2560, i64 13
  %2575 = load double, ptr %2574, align 8, !tbaa !19
  %2576 = getelementptr inbounds double, ptr %2560, i64 14
  %2577 = load double, ptr %2576, align 8, !tbaa !19
  %2578 = getelementptr inbounds double, ptr %2560, i64 15
  %2579 = load double, ptr %2578, align 8, !tbaa !19
  %2580 = load double, ptr %2571, align 8, !tbaa !19
  %2581 = fadd double %2579, %2580
  %2582 = getelementptr inbounds double, ptr %2571, i64 1
  %2583 = load double, ptr %2582, align 8, !tbaa !19
  %2584 = tail call double @llvm.fmuladd.f64(double %2583, double 2.000000e+00, double %2577)
  %2585 = getelementptr inbounds double, ptr %2571, i64 2
  %2586 = load double, ptr %2585, align 8, !tbaa !19
  %2587 = tail call double @llvm.fmuladd.f64(double %2586, double 4.000000e+00, double %2575)
  %2588 = getelementptr inbounds double, ptr %2571, i64 3
  %2589 = load double, ptr %2588, align 8, !tbaa !19
  %2590 = tail call double @llvm.fmuladd.f64(double %2589, double 6.000000e+00, double %2573)
  %2591 = fmul double %2565, %2590
  %2592 = fmul double %2565, %2587
  %2593 = fmul double %2565, %2584
  %2594 = fmul double %2565, %2581
  %2595 = fmul double %2557, %2591
  %2596 = fmul double %2592, 2.500000e-01
  %2597 = tail call double @llvm.fmuladd.f64(double %2595, double 0x3FC5555555555555, double %2596)
  %2598 = fmul double %2593, 5.000000e-01
  %2599 = tail call double @llvm.fmuladd.f64(double %2597, double %2557, double %2598)
  %2600 = tail call double @llvm.fmuladd.f64(double %2599, double %2557, double %2594)
  %2601 = fsub double %2540, %2600
  %2602 = tail call double @llvm.fmuladd.f64(double %2557, double %2591, double %2592)
  %2603 = tail call double @llvm.fmuladd.f64(double %2602, double %2557, double %2593)
  %2604 = fmul double %2113, %2603
  %2605 = load double, ptr %658, align 8, !tbaa !19
  %2606 = tail call double @llvm.fmuladd.f64(double %2604, double %2568, double %2605)
  %2607 = load <2 x double>, ptr %2551, align 8, !tbaa !19
  %2608 = fsub <2 x double> %701, %2607
  %2609 = load <2 x double>, ptr %656, align 8, !tbaa !19
  %2610 = insertelement <2 x double> poison, double %2604, i64 0
  %2611 = shufflevector <2 x double> %2610, <2 x double> poison, <2 x i32> zeroinitializer
  %2612 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2611, <2 x double> %2608, <2 x double> %2609)
  store <2 x double> %2612, ptr %656, align 8, !tbaa !19
  store double %2606, ptr %658, align 8, !tbaa !19
  %2613 = insertelement <2 x double> poison, double %2603, i64 0
  %2614 = shufflevector <2 x double> %2613, <2 x double> poison, <2 x i32> zeroinitializer
  %2615 = fmul <2 x double> %2608, %2614
  %2616 = fadd <2 x double> %2542, %2615
  %2617 = load <2 x double>, ptr %2561, align 8, !tbaa !19
  %2618 = fsub <2 x double> %2617, %2615
  store <2 x double> %2618, ptr %2561, align 8, !tbaa !19
  %2619 = fmul double %2568, %2603
  %2620 = fadd double %2541, %2619
  %2621 = getelementptr inbounds %class.Vector, ptr %632, i64 %2550, i32 2
  %2622 = load double, ptr %2621, align 8, !tbaa !87
  %2623 = fsub double %2622, %2619
  store double %2623, ptr %2621, align 8, !tbaa !87
  %2624 = add nuw nsw i64 %2539, 1
  %2625 = icmp eq i64 %2624, %2537
  br i1 %2625, label %2626, label %2538

2626:                                             ; preds = %2538, %2523
  %2627 = phi double [ %2524, %2523 ], [ %2620, %2538 ]
  %2628 = phi double [ %2534, %2523 ], [ %2601, %2538 ]
  %2629 = phi <2 x double> [ %2528, %2523 ], [ %2616, %2538 ]
  %2630 = getelementptr inbounds %class.Vector, ptr %626, i64 %683
  %2631 = load <2 x double>, ptr %2630, align 8, !tbaa !19
  %2632 = fadd <2 x double> %2527, %2631
  store <2 x double> %2632, ptr %2630, align 8, !tbaa !19
  %2633 = getelementptr inbounds %class.Vector, ptr %626, i64 %683, i32 2
  %2634 = load double, ptr %2633, align 8, !tbaa !87
  %2635 = fadd double %2525, %2634
  store double %2635, ptr %2633, align 8, !tbaa !87
  %2636 = getelementptr inbounds %class.Vector, ptr %632, i64 %683
  %2637 = load <2 x double>, ptr %2636, align 8, !tbaa !19
  %2638 = fadd <2 x double> %2629, %2637
  store <2 x double> %2638, ptr %2636, align 8, !tbaa !19
  %2639 = getelementptr inbounds %class.Vector, ptr %632, i64 %683, i32 2
  %2640 = load double, ptr %2639, align 8, !tbaa !87
  %2641 = fadd double %2627, %2640
  store double %2641, ptr %2639, align 8, !tbaa !87
  %2642 = insertelement <2 x double> %2529, double %2628, i64 1
  br label %2643

2643:                                             ; preds = %1361, %1307, %2626, %694
  %2644 = phi i32 [ %699, %2626 ], [ %695, %694 ], [ %699, %1307 ], [ %699, %1361 ]
  %2645 = phi i32 [ %2096, %2626 ], [ %680, %694 ], [ %1256, %1307 ], [ %1256, %1361 ]
  %2646 = phi i32 [ %2097, %2626 ], [ %679, %694 ], [ %1257, %1307 ], [ %1257, %1361 ]
  %2647 = phi i32 [ %2098, %2626 ], [ %678, %694 ], [ %1258, %1307 ], [ %1258, %1361 ]
  %2648 = phi i32 [ %2099, %2626 ], [ %677, %694 ], [ %1259, %1307 ], [ %1259, %1361 ]
  %2649 = phi i32 [ %706, %2626 ], [ %676, %694 ], [ %706, %1307 ], [ %706, %1361 ]
  %2650 = phi ptr [ %2100, %2626 ], [ %675, %694 ], [ %952, %1307 ], [ %952, %1361 ]
  %2651 = phi ptr [ %2101, %2626 ], [ %674, %694 ], [ %953, %1307 ], [ %953, %1361 ]
  %2652 = phi ptr [ %2102, %2626 ], [ %673, %694 ], [ %954, %1307 ], [ %954, %1361 ]
  %2653 = phi i32 [ %672, %2626 ], [ %697, %694 ], [ %672, %1307 ], [ %672, %1361 ]
  %2654 = phi double [ %2526, %2626 ], [ %671, %694 ], [ %671, %1307 ], [ %671, %1361 ]
  %2655 = phi i32 [ %2532, %2626 ], [ %670, %694 ], [ %670, %1307 ], [ %670, %1361 ]
  %2656 = phi <2 x double> [ %2642, %2626 ], [ %682, %694 ], [ %682, %1307 ], [ %682, %1361 ]
  %2657 = add nsw i32 %2653, 1
  %2658 = icmp slt i32 %2657, %636
  br i1 %2658, label %669, label %2659

2659:                                             ; preds = %2643, %620
  %2660 = phi ptr [ null, %620 ], [ %2652, %2643 ]
  %2661 = phi double [ 0.000000e+00, %620 ], [ %2654, %2643 ]
  %2662 = phi i32 [ 0, %620 ], [ %2655, %2643 ]
  %2663 = phi <2 x double> [ zeroinitializer, %620 ], [ %2656, %2643 ]
  %2664 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 3
  %2665 = load ptr, ptr %2664, align 8, !tbaa !23
  %2666 = icmp sgt i32 %37, 0
  br i1 %2666, label %2667, label %2708

2667:                                             ; preds = %2659
  %2668 = zext i32 %37 to i64
  br label %2676

2669:                                             ; preds = %2676
  %2670 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 4
  %2671 = load ptr, ptr %2670, align 8, !tbaa !23
  %2672 = extractelement <2 x double> %2705, i64 0
  %2673 = extractelement <2 x double> %2705, i64 1
  br i1 %2666, label %2674, label %2708

2674:                                             ; preds = %2669
  %2675 = zext i32 %37 to i64
  br label %2751

2676:                                             ; preds = %2667, %2676
  %2677 = phi i64 [ 0, %2667 ], [ %2706, %2676 ]
  %2678 = phi <4 x double> [ zeroinitializer, %2667 ], [ %2699, %2676 ]
  %2679 = phi <2 x double> [ zeroinitializer, %2667 ], [ %2705, %2676 ]
  %2680 = getelementptr inbounds %class.Vector, ptr %626, i64 %2677
  %2681 = getelementptr inbounds %class.Vector, ptr %2665, i64 %2677
  %2682 = load <2 x double>, ptr %2680, align 8, !tbaa !19
  %2683 = load <2 x double>, ptr %2681, align 8, !tbaa !19
  %2684 = fadd <2 x double> %2682, %2683
  store <2 x double> %2684, ptr %2681, align 8, !tbaa !19
  %2685 = getelementptr inbounds %class.Vector, ptr %626, i64 %2677, i32 2
  %2686 = load double, ptr %2685, align 8, !tbaa !87
  %2687 = getelementptr inbounds %class.Vector, ptr %2665, i64 %2677, i32 2
  %2688 = load double, ptr %2687, align 8, !tbaa !87
  %2689 = fadd double %2686, %2688
  store double %2689, ptr %2687, align 8, !tbaa !87
  %2690 = getelementptr inbounds %struct.CompAtom, ptr %40, i64 %2677
  %2691 = load <2 x double>, ptr %2690, align 8, !tbaa !19
  %2692 = getelementptr inbounds %class.Vector, ptr %2690, i64 0, i32 2
  %2693 = load double, ptr %2692, align 8, !tbaa !49
  %2694 = load <2 x double>, ptr %2680, align 8, !tbaa !19
  %2695 = shufflevector <2 x double> %2694, <2 x double> poison, <4 x i32> <i32 0, i32 0, i32 0, i32 1>
  %2696 = shufflevector <2 x double> %2691, <2 x double> poison, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>
  %2697 = insertelement <4 x double> %2696, double %2693, i64 2
  %2698 = shufflevector <4 x double> %2697, <4 x double> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 1>
  %2699 = tail call <4 x double> @llvm.fmuladd.v4f64(<4 x double> %2695, <4 x double> %2698, <4 x double> %2678)
  %2700 = load double, ptr %2685, align 8, !tbaa !87
  %2701 = shufflevector <2 x double> %2694, <2 x double> poison, <2 x i32> <i32 1, i32 poison>
  %2702 = insertelement <2 x double> %2701, double %2700, i64 1
  %2703 = insertelement <2 x double> poison, double %2693, i64 0
  %2704 = shufflevector <2 x double> %2703, <2 x double> poison, <2 x i32> zeroinitializer
  %2705 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2702, <2 x double> %2704, <2 x double> %2679)
  %2706 = add nuw nsw i64 %2677, 1
  %2707 = icmp eq i64 %2706, %2668
  br i1 %2707, label %2669, label %2676

2708:                                             ; preds = %2751, %2659, %2669
  %2709 = phi double [ %2672, %2669 ], [ 0.000000e+00, %2659 ], [ %2672, %2751 ]
  %2710 = phi double [ %2673, %2669 ], [ 0.000000e+00, %2659 ], [ %2673, %2751 ]
  %2711 = phi <4 x double> [ zeroinitializer, %2669 ], [ zeroinitializer, %2659 ], [ %2781, %2751 ]
  %2712 = phi <4 x double> [ %2699, %2669 ], [ zeroinitializer, %2659 ], [ %2699, %2751 ]
  %2713 = phi <2 x double> [ zeroinitializer, %2669 ], [ zeroinitializer, %2659 ], [ %2776, %2751 ]
  %2714 = sitofp i32 %2662 to double
  %2715 = getelementptr inbounds double, ptr %6, i64 22
  %2716 = load double, ptr %2715, align 8, !tbaa !19
  %2717 = fadd double %2716, %2714
  store double %2717, ptr %2715, align 8, !tbaa !19
  %2718 = getelementptr inbounds double, ptr %6, i64 4
  %2719 = load <4 x double>, ptr %2718, align 8, !tbaa !19
  %2720 = shufflevector <4 x double> %2712, <4 x double> poison, <4 x i32> <i32 1, i32 2, i32 poison, i32 3>
  %2721 = shufflevector <4 x double> %2720, <4 x double> poison, <4 x i32> <i32 0, i32 1, i32 0, i32 3>
  %2722 = fadd <4 x double> %2721, %2719
  store <4 x double> %2722, ptr %2718, align 8, !tbaa !19
  %2723 = getelementptr inbounds double, ptr %6, i64 8
  %2724 = load <4 x double>, ptr %2723, align 8, !tbaa !19
  %2725 = insertelement <4 x double> poison, double %2709, i64 0
  %2726 = shufflevector <4 x double> %2725, <4 x double> %2712, <4 x i32> <i32 0, i32 6, i32 poison, i32 poison>
  %2727 = insertelement <4 x double> %2726, double %2710, i64 3
  %2728 = shufflevector <4 x double> %2727, <4 x double> poison, <4 x i32> <i32 0, i32 1, i32 0, i32 3>
  %2729 = fadd <4 x double> %2728, %2724
  store <4 x double> %2729, ptr %2723, align 8, !tbaa !19
  %2730 = load <4 x double>, ptr %6, align 8, !tbaa !19
  %2731 = shufflevector <2 x double> %2663, <2 x double> poison, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>
  %2732 = insertelement <4 x double> %2731, double %2661, i64 2
  %2733 = shufflevector <4 x double> %2732, <4 x double> %2712, <4 x i32> <i32 0, i32 1, i32 2, i32 4>
  %2734 = fadd <4 x double> %2733, %2730
  store <4 x double> %2734, ptr %6, align 8, !tbaa !19
  %2735 = getelementptr inbounds double, ptr %6, i64 12
  %2736 = load <4 x double>, ptr %2735, align 8, !tbaa !19
  %2737 = shufflevector <2 x double> %2713, <2 x double> poison, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>
  %2738 = shufflevector <4 x double> %2737, <4 x double> %2711, <4 x i32> <i32 0, i32 1, i32 7, i32 poison>
  %2739 = shufflevector <4 x double> %2738, <4 x double> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 1>
  %2740 = fadd <4 x double> %2739, %2736
  store <4 x double> %2740, ptr %2735, align 8, !tbaa !19
  %2741 = getelementptr inbounds double, ptr %6, i64 16
  %2742 = load <4 x double>, ptr %2741, align 8, !tbaa !19
  %2743 = shufflevector <4 x double> %2711, <4 x double> poison, <4 x i32> <i32 2, i32 1, i32 3, i32 poison>
  %2744 = shufflevector <4 x double> %2743, <4 x double> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 1>
  %2745 = fadd <4 x double> %2744, %2742
  store <4 x double> %2745, ptr %2741, align 8, !tbaa !19
  %2746 = getelementptr inbounds double, ptr %6, i64 20
  %2747 = load double, ptr %2746, align 8, !tbaa !19
  %2748 = extractelement <4 x double> %2711, i64 0
  %2749 = fadd double %2748, %2747
  store double %2749, ptr %2746, align 8, !tbaa !19
  %2750 = icmp eq ptr %2660, null
  br i1 %2750, label %2785, label %2784

2751:                                             ; preds = %2674, %2751
  %2752 = phi i64 [ 0, %2674 ], [ %2782, %2751 ]
  %2753 = phi <4 x double> [ zeroinitializer, %2674 ], [ %2781, %2751 ]
  %2754 = phi <2 x double> [ zeroinitializer, %2674 ], [ %2776, %2751 ]
  %2755 = getelementptr inbounds %class.Vector, ptr %632, i64 %2752
  %2756 = getelementptr inbounds %class.Vector, ptr %2671, i64 %2752
  %2757 = getelementptr inbounds %class.Vector, ptr %632, i64 %2752, i32 1
  %2758 = load <2 x double>, ptr %2755, align 8, !tbaa !19
  %2759 = load <2 x double>, ptr %2756, align 8, !tbaa !19
  %2760 = fadd <2 x double> %2758, %2759
  store <2 x double> %2760, ptr %2756, align 8, !tbaa !19
  %2761 = getelementptr inbounds %class.Vector, ptr %632, i64 %2752, i32 2
  %2762 = load double, ptr %2761, align 8, !tbaa !87
  %2763 = getelementptr inbounds %class.Vector, ptr %2671, i64 %2752, i32 2
  %2764 = load double, ptr %2763, align 8, !tbaa !87
  %2765 = fadd double %2762, %2764
  store double %2765, ptr %2763, align 8, !tbaa !87
  %2766 = load double, ptr %2755, align 8, !tbaa !191
  %2767 = getelementptr inbounds %struct.CompAtom, ptr %40, i64 %2752
  %2768 = load double, ptr %2767, align 8, !tbaa !67
  %2769 = getelementptr inbounds %class.Vector, ptr %2767, i64 0, i32 1
  %2770 = load <2 x double>, ptr %2769, align 8, !tbaa !19
  %2771 = shufflevector <2 x double> %2770, <2 x double> poison, <4 x i32> <i32 1, i32 1, i32 0, i32 1>
  %2772 = insertelement <2 x double> poison, double %2766, i64 0
  %2773 = shufflevector <2 x double> %2772, <2 x double> poison, <2 x i32> zeroinitializer
  %2774 = shufflevector <2 x double> %2770, <2 x double> poison, <2 x i32> <i32 poison, i32 0>
  %2775 = insertelement <2 x double> %2774, double %2768, i64 0
  %2776 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2773, <2 x double> %2775, <2 x double> %2754)
  %2777 = load <2 x double>, ptr %2757, align 8, !tbaa !19
  %2778 = shufflevector <2 x double> %2777, <2 x double> poison, <4 x i32> <i32 1, i32 0, i32 poison, i32 poison>
  %2779 = insertelement <4 x double> %2778, double %2766, i64 3
  %2780 = shufflevector <4 x double> %2779, <4 x double> poison, <4 x i32> <i32 0, i32 1, i32 1, i32 3>
  %2781 = tail call <4 x double> @llvm.fmuladd.v4f64(<4 x double> %2780, <4 x double> %2771, <4 x double> %2753)
  %2782 = add nuw nsw i64 %2752, 1
  %2783 = icmp eq i64 %2782, %2675
  br i1 %2783, label %2708, label %2751

2784:                                             ; preds = %2708
  tail call void @_ZdaPv(ptr noundef nonnull %2660) #10
  br label %2785

2785:                                             ; preds = %2708, %2784, %1
  ret void
}

; Function Attrs: sspstrong uwtable
define dso_local void @_ZN20ComputeNonbondedUtil36calc_self_energy_merge_fullelect_intEP9nonbonded(ptr nocapture noundef readonly %0) local_unnamed_addr #0 align 2 {
  %2 = load i32, ptr @_ZN20ComputeNonbondedUtil8commOnlyE, align 4, !tbaa !5
  %3 = icmp eq i32 %2, 0
  br i1 %3, label %4, label %2608

4:                                                ; preds = %1
  %5 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 7
  %6 = load ptr, ptr %5, align 8, !tbaa !9
  %7 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 10
  %8 = load ptr, ptr %7, align 8, !tbaa !14
  %9 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 11
  %10 = load i32, ptr %9, align 8, !tbaa !15
  %11 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 12
  %12 = load i32, ptr %11, align 4, !tbaa !16
  %13 = getelementptr inbounds %class.Pairlists, ptr %8, i64 0, i32 1
  store i32 0, ptr %13, align 8, !tbaa !17
  %14 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 6
  %15 = load <2 x double>, ptr %14, align 8, !tbaa !19
  %16 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 6, i32 2
  %17 = load double, ptr %16, align 8, !tbaa !20
  %18 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 13
  %19 = load double, ptr %18, align 8, !tbaa !21
  %20 = fmul double %19, %19
  %21 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 14
  %22 = load double, ptr %21, align 8, !tbaa !22
  %23 = fmul double %22, %22
  %24 = load double, ptr @_ZN20ComputeNonbondedUtil12dielectric_1E, align 8, !tbaa !19
  %25 = load ptr, ptr @_ZN20ComputeNonbondedUtil7ljTableE, align 8, !tbaa !23
  %26 = load ptr, ptr @_ZN20ComputeNonbondedUtil3molE, align 8, !tbaa !23
  %27 = load ptr, ptr @_ZN20ComputeNonbondedUtil13table_noshortE, align 8, !tbaa !23
  %28 = load double, ptr @_ZN20ComputeNonbondedUtil7scalingE, align 8, !tbaa !19
  %29 = load double, ptr @_ZN20ComputeNonbondedUtil7scale14E, align 8, !tbaa !19
  %30 = fsub double 1.000000e+00, %29
  %31 = load double, ptr @_ZN20ComputeNonbondedUtil8r2_deltaE, align 8, !tbaa !19
  %32 = load i32, ptr @_ZN20ComputeNonbondedUtil12r2_delta_expE, align 4, !tbaa !5
  %33 = shl i32 %32, 6
  %34 = add i32 %33, -65472
  %35 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 5
  %36 = load i32, ptr %35, align 8, !tbaa !5
  %37 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 5, i64 1
  %38 = load i32, ptr %37, align 4, !tbaa !5
  %39 = load ptr, ptr %0, align 8, !tbaa !23
  %40 = getelementptr inbounds [2 x ptr], ptr %0, i64 0, i64 1
  %41 = load ptr, ptr %40, align 8, !tbaa !23
  %42 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 1
  %43 = load ptr, ptr %42, align 8, !tbaa !23
  %44 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 1, i64 1
  %45 = load ptr, ptr %44, align 8, !tbaa !23
  %46 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 9
  %47 = load ptr, ptr %46, align 8, !tbaa !24
  %48 = add nsw i32 %38, 5
  %49 = getelementptr inbounds %class.ResizeArray, ptr %47, i64 0, i32 1
  %50 = load ptr, ptr %49, align 8, !tbaa !25
  %51 = getelementptr inbounds %class.ResizeArrayRaw, ptr %50, i64 0, i32 2
  %52 = load i32, ptr %51, align 8, !tbaa !27
  %53 = icmp slt i32 %52, %48
  br i1 %53, label %54, label %92

54:                                               ; preds = %4
  %55 = getelementptr inbounds %class.ResizeArrayRaw, ptr %50, i64 0, i32 3
  %56 = load i32, ptr %55, align 4, !tbaa !30
  %57 = icmp slt i32 %56, %48
  br i1 %57, label %58, label %92

58:                                               ; preds = %54
  %59 = sitofp i32 %56 to float
  %60 = getelementptr inbounds %class.ResizeArrayRaw, ptr %50, i64 0, i32 5
  %61 = load float, ptr %60, align 4, !tbaa !31
  %62 = fmul float %61, %59
  %63 = fptosi float %62 to i32
  %64 = tail call i32 @llvm.smax.i32(i32 %63, i32 %48)
  %65 = sub nsw i32 %64, %56
  %66 = getelementptr inbounds %class.ResizeArrayRaw, ptr %50, i64 0, i32 6
  %67 = load i32, ptr %66, align 8, !tbaa !32
  %68 = icmp slt i32 %65, %67
  %69 = add nsw i32 %67, %56
  %70 = select i1 %68, i32 %69, i32 %64
  %71 = sext i32 %70 to i64
  %72 = shl nsw i64 %71, 1
  %73 = add nsw i64 %72, 31
  %74 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %73) #9
  %75 = getelementptr inbounds i8, ptr %74, i64 31
  %76 = ptrtoint ptr %75 to i64
  %77 = and i64 %76, 31
  %78 = sub nsw i64 0, %77
  %79 = getelementptr inbounds i8, ptr %75, i64 %78
  %80 = load ptr, ptr %50, align 8, !tbaa !33
  %81 = sext i32 %52 to i64
  %82 = shl nsw i64 %81, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %79, ptr align 1 %80, i64 %82, i1 false)
  %83 = icmp eq i32 %56, 0
  br i1 %83, label %89, label %84

84:                                               ; preds = %58
  %85 = getelementptr inbounds %class.ResizeArrayRaw, ptr %50, i64 0, i32 1
  %86 = load ptr, ptr %85, align 8, !tbaa !34
  %87 = icmp eq ptr %86, null
  br i1 %87, label %89, label %88

88:                                               ; preds = %84
  tail call void @_ZdaPv(ptr noundef nonnull %86) #10
  br label %89

89:                                               ; preds = %88, %84, %58
  %90 = getelementptr inbounds %class.ResizeArrayRaw, ptr %50, i64 0, i32 1
  store ptr %74, ptr %90, align 8, !tbaa !34
  store ptr %79, ptr %50, align 8, !tbaa !33
  store i32 %70, ptr %55, align 4, !tbaa !30
  %91 = load ptr, ptr %49, align 8, !tbaa !25
  br label %92

92:                                               ; preds = %4, %54, %89
  %93 = phi ptr [ %50, %4 ], [ %50, %54 ], [ %91, %89 ]
  store i32 %48, ptr %51, align 8, !tbaa !27
  %94 = load ptr, ptr %93, align 8, !tbaa !33
  %95 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %47, i64 0, i32 1, i32 1
  %96 = load ptr, ptr %95, align 8, !tbaa !35
  %97 = getelementptr inbounds %class.ResizeArrayRaw.23, ptr %96, i64 0, i32 2
  %98 = load i32, ptr %97, align 8, !tbaa !37
  %99 = icmp slt i32 %98, %48
  br i1 %99, label %100, label %138

100:                                              ; preds = %92
  %101 = getelementptr inbounds %class.ResizeArrayRaw.23, ptr %96, i64 0, i32 3
  %102 = load i32, ptr %101, align 4, !tbaa !39
  %103 = icmp slt i32 %102, %48
  br i1 %103, label %104, label %138

104:                                              ; preds = %100
  %105 = sitofp i32 %102 to float
  %106 = getelementptr inbounds %class.ResizeArrayRaw.23, ptr %96, i64 0, i32 5
  %107 = load float, ptr %106, align 4, !tbaa !40
  %108 = fmul float %107, %105
  %109 = fptosi float %108 to i32
  %110 = tail call i32 @llvm.smax.i32(i32 %109, i32 %48)
  %111 = sub nsw i32 %110, %102
  %112 = getelementptr inbounds %class.ResizeArrayRaw.23, ptr %96, i64 0, i32 6
  %113 = load i32, ptr %112, align 8, !tbaa !41
  %114 = icmp slt i32 %111, %113
  %115 = add nsw i32 %113, %102
  %116 = select i1 %114, i32 %115, i32 %110
  %117 = sext i32 %116 to i64
  %118 = shl nsw i64 %117, 3
  %119 = add nsw i64 %118, 31
  %120 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %119) #9
  %121 = getelementptr inbounds i8, ptr %120, i64 31
  %122 = ptrtoint ptr %121 to i64
  %123 = and i64 %122, 31
  %124 = sub nsw i64 0, %123
  %125 = getelementptr inbounds i8, ptr %121, i64 %124
  %126 = load ptr, ptr %96, align 8, !tbaa !42
  %127 = sext i32 %98 to i64
  %128 = shl nsw i64 %127, 3
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %125, ptr align 1 %126, i64 %128, i1 false)
  %129 = icmp eq i32 %102, 0
  br i1 %129, label %135, label %130

130:                                              ; preds = %104
  %131 = getelementptr inbounds %class.ResizeArrayRaw.23, ptr %96, i64 0, i32 1
  %132 = load ptr, ptr %131, align 8, !tbaa !43
  %133 = icmp eq ptr %132, null
  br i1 %133, label %135, label %134

134:                                              ; preds = %130
  tail call void @_ZdaPv(ptr noundef nonnull %132) #10
  br label %135

135:                                              ; preds = %134, %130, %104
  %136 = getelementptr inbounds %class.ResizeArrayRaw.23, ptr %96, i64 0, i32 1
  store ptr %120, ptr %136, align 8, !tbaa !43
  store ptr %125, ptr %96, align 8, !tbaa !42
  store i32 %116, ptr %101, align 4, !tbaa !39
  %137 = load ptr, ptr %95, align 8, !tbaa !35
  br label %138

138:                                              ; preds = %92, %100, %135
  %139 = phi ptr [ %96, %92 ], [ %96, %100 ], [ %137, %135 ]
  store i32 %48, ptr %97, align 8, !tbaa !37
  %140 = load ptr, ptr %139, align 8, !tbaa !42
  %141 = getelementptr inbounds i32, ptr %140, i64 1
  %142 = icmp eq i32 %10, 0
  %143 = icmp ne i32 %12, 0
  %144 = select i1 %142, i1 %143, i1 false
  %145 = select i1 %144, i32 0, i32 %48
  %146 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %47, i64 0, i32 2, i32 1
  %147 = load ptr, ptr %146, align 8, !tbaa !25
  %148 = getelementptr inbounds %class.ResizeArrayRaw, ptr %147, i64 0, i32 2
  %149 = load i32, ptr %148, align 8, !tbaa !27
  %150 = icmp slt i32 %149, %145
  br i1 %150, label %151, label %189

151:                                              ; preds = %138
  %152 = getelementptr inbounds %class.ResizeArrayRaw, ptr %147, i64 0, i32 3
  %153 = load i32, ptr %152, align 4, !tbaa !30
  %154 = icmp slt i32 %153, %145
  br i1 %154, label %155, label %189

155:                                              ; preds = %151
  %156 = sitofp i32 %153 to float
  %157 = getelementptr inbounds %class.ResizeArrayRaw, ptr %147, i64 0, i32 5
  %158 = load float, ptr %157, align 4, !tbaa !31
  %159 = fmul float %158, %156
  %160 = fptosi float %159 to i32
  %161 = tail call i32 @llvm.smax.i32(i32 %160, i32 %145)
  %162 = sub nsw i32 %161, %153
  %163 = getelementptr inbounds %class.ResizeArrayRaw, ptr %147, i64 0, i32 6
  %164 = load i32, ptr %163, align 8, !tbaa !32
  %165 = icmp slt i32 %162, %164
  %166 = add nsw i32 %164, %153
  %167 = select i1 %165, i32 %166, i32 %161
  %168 = sext i32 %167 to i64
  %169 = shl nsw i64 %168, 1
  %170 = add nsw i64 %169, 31
  %171 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %170) #9
  %172 = getelementptr inbounds i8, ptr %171, i64 31
  %173 = ptrtoint ptr %172 to i64
  %174 = and i64 %173, 31
  %175 = sub nsw i64 0, %174
  %176 = getelementptr inbounds i8, ptr %172, i64 %175
  %177 = load ptr, ptr %147, align 8, !tbaa !33
  %178 = sext i32 %149 to i64
  %179 = shl nsw i64 %178, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %176, ptr align 1 %177, i64 %179, i1 false)
  %180 = icmp eq i32 %153, 0
  br i1 %180, label %186, label %181

181:                                              ; preds = %155
  %182 = getelementptr inbounds %class.ResizeArrayRaw, ptr %147, i64 0, i32 1
  %183 = load ptr, ptr %182, align 8, !tbaa !34
  %184 = icmp eq ptr %183, null
  br i1 %184, label %186, label %185

185:                                              ; preds = %181
  tail call void @_ZdaPv(ptr noundef nonnull %183) #10
  br label %186

186:                                              ; preds = %185, %181, %155
  %187 = getelementptr inbounds %class.ResizeArrayRaw, ptr %147, i64 0, i32 1
  store ptr %171, ptr %187, align 8, !tbaa !34
  store ptr %176, ptr %147, align 8, !tbaa !33
  store i32 %167, ptr %152, align 4, !tbaa !30
  %188 = load ptr, ptr %146, align 8, !tbaa !25
  br label %189

189:                                              ; preds = %138, %151, %186
  %190 = phi ptr [ %147, %138 ], [ %147, %151 ], [ %188, %186 ]
  store i32 %145, ptr %148, align 8, !tbaa !27
  %191 = load ptr, ptr %190, align 8, !tbaa !33
  %192 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %47, i64 0, i32 3, i32 1
  %193 = load ptr, ptr %192, align 8, !tbaa !25
  %194 = getelementptr inbounds %class.ResizeArrayRaw, ptr %193, i64 0, i32 2
  %195 = load i32, ptr %194, align 8, !tbaa !27
  %196 = icmp slt i32 %195, %145
  br i1 %196, label %197, label %235

197:                                              ; preds = %189
  %198 = getelementptr inbounds %class.ResizeArrayRaw, ptr %193, i64 0, i32 3
  %199 = load i32, ptr %198, align 4, !tbaa !30
  %200 = icmp slt i32 %199, %145
  br i1 %200, label %201, label %235

201:                                              ; preds = %197
  %202 = sitofp i32 %199 to float
  %203 = getelementptr inbounds %class.ResizeArrayRaw, ptr %193, i64 0, i32 5
  %204 = load float, ptr %203, align 4, !tbaa !31
  %205 = fmul float %204, %202
  %206 = fptosi float %205 to i32
  %207 = tail call i32 @llvm.smax.i32(i32 %206, i32 %145)
  %208 = sub nsw i32 %207, %199
  %209 = getelementptr inbounds %class.ResizeArrayRaw, ptr %193, i64 0, i32 6
  %210 = load i32, ptr %209, align 8, !tbaa !32
  %211 = icmp slt i32 %208, %210
  %212 = add nsw i32 %210, %199
  %213 = select i1 %211, i32 %212, i32 %207
  %214 = sext i32 %213 to i64
  %215 = shl nsw i64 %214, 1
  %216 = add nsw i64 %215, 31
  %217 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %216) #9
  %218 = getelementptr inbounds i8, ptr %217, i64 31
  %219 = ptrtoint ptr %218 to i64
  %220 = and i64 %219, 31
  %221 = sub nsw i64 0, %220
  %222 = getelementptr inbounds i8, ptr %218, i64 %221
  %223 = load ptr, ptr %193, align 8, !tbaa !33
  %224 = sext i32 %195 to i64
  %225 = shl nsw i64 %224, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %222, ptr align 1 %223, i64 %225, i1 false)
  %226 = icmp eq i32 %199, 0
  br i1 %226, label %232, label %227

227:                                              ; preds = %201
  %228 = getelementptr inbounds %class.ResizeArrayRaw, ptr %193, i64 0, i32 1
  %229 = load ptr, ptr %228, align 8, !tbaa !34
  %230 = icmp eq ptr %229, null
  br i1 %230, label %232, label %231

231:                                              ; preds = %227
  tail call void @_ZdaPv(ptr noundef nonnull %229) #10
  br label %232

232:                                              ; preds = %231, %227, %201
  %233 = getelementptr inbounds %class.ResizeArrayRaw, ptr %193, i64 0, i32 1
  store ptr %217, ptr %233, align 8, !tbaa !34
  store ptr %222, ptr %193, align 8, !tbaa !33
  store i32 %213, ptr %198, align 4, !tbaa !30
  %234 = load ptr, ptr %192, align 8, !tbaa !25
  br label %235

235:                                              ; preds = %189, %197, %232
  %236 = phi ptr [ %193, %189 ], [ %193, %197 ], [ %234, %232 ]
  store i32 %145, ptr %194, align 8, !tbaa !27
  %237 = load ptr, ptr %236, align 8, !tbaa !33
  %238 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %47, i64 0, i32 4, i32 1
  %239 = load ptr, ptr %238, align 8, !tbaa !25
  %240 = getelementptr inbounds %class.ResizeArrayRaw, ptr %239, i64 0, i32 2
  %241 = load i32, ptr %240, align 8, !tbaa !27
  %242 = icmp slt i32 %241, %145
  br i1 %242, label %243, label %281

243:                                              ; preds = %235
  %244 = getelementptr inbounds %class.ResizeArrayRaw, ptr %239, i64 0, i32 3
  %245 = load i32, ptr %244, align 4, !tbaa !30
  %246 = icmp slt i32 %245, %145
  br i1 %246, label %247, label %281

247:                                              ; preds = %243
  %248 = sitofp i32 %245 to float
  %249 = getelementptr inbounds %class.ResizeArrayRaw, ptr %239, i64 0, i32 5
  %250 = load float, ptr %249, align 4, !tbaa !31
  %251 = fmul float %250, %248
  %252 = fptosi float %251 to i32
  %253 = tail call i32 @llvm.smax.i32(i32 %252, i32 %145)
  %254 = sub nsw i32 %253, %245
  %255 = getelementptr inbounds %class.ResizeArrayRaw, ptr %239, i64 0, i32 6
  %256 = load i32, ptr %255, align 8, !tbaa !32
  %257 = icmp slt i32 %254, %256
  %258 = add nsw i32 %256, %245
  %259 = select i1 %257, i32 %258, i32 %253
  %260 = sext i32 %259 to i64
  %261 = shl nsw i64 %260, 1
  %262 = add nsw i64 %261, 31
  %263 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %262) #9
  %264 = getelementptr inbounds i8, ptr %263, i64 31
  %265 = ptrtoint ptr %264 to i64
  %266 = and i64 %265, 31
  %267 = sub nsw i64 0, %266
  %268 = getelementptr inbounds i8, ptr %264, i64 %267
  %269 = load ptr, ptr %239, align 8, !tbaa !33
  %270 = sext i32 %241 to i64
  %271 = shl nsw i64 %270, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %268, ptr align 1 %269, i64 %271, i1 false)
  %272 = icmp eq i32 %245, 0
  br i1 %272, label %278, label %273

273:                                              ; preds = %247
  %274 = getelementptr inbounds %class.ResizeArrayRaw, ptr %239, i64 0, i32 1
  %275 = load ptr, ptr %274, align 8, !tbaa !34
  %276 = icmp eq ptr %275, null
  br i1 %276, label %278, label %277

277:                                              ; preds = %273
  tail call void @_ZdaPv(ptr noundef nonnull %275) #10
  br label %278

278:                                              ; preds = %277, %273, %247
  %279 = getelementptr inbounds %class.ResizeArrayRaw, ptr %239, i64 0, i32 1
  store ptr %263, ptr %279, align 8, !tbaa !34
  store ptr %268, ptr %239, align 8, !tbaa !33
  store i32 %259, ptr %244, align 4, !tbaa !30
  %280 = load ptr, ptr %238, align 8, !tbaa !25
  br label %281

281:                                              ; preds = %235, %243, %278
  %282 = phi ptr [ %239, %235 ], [ %239, %243 ], [ %280, %278 ]
  store i32 %145, ptr %240, align 8, !tbaa !27
  %283 = load ptr, ptr %282, align 8, !tbaa !33
  %284 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %47, i64 0, i32 5, i32 1
  %285 = load ptr, ptr %284, align 8, !tbaa !25
  %286 = getelementptr inbounds %class.ResizeArrayRaw, ptr %285, i64 0, i32 2
  %287 = load i32, ptr %286, align 8, !tbaa !27
  %288 = icmp slt i32 %287, %145
  br i1 %288, label %289, label %327

289:                                              ; preds = %281
  %290 = getelementptr inbounds %class.ResizeArrayRaw, ptr %285, i64 0, i32 3
  %291 = load i32, ptr %290, align 4, !tbaa !30
  %292 = icmp slt i32 %291, %145
  br i1 %292, label %293, label %327

293:                                              ; preds = %289
  %294 = sitofp i32 %291 to float
  %295 = getelementptr inbounds %class.ResizeArrayRaw, ptr %285, i64 0, i32 5
  %296 = load float, ptr %295, align 4, !tbaa !31
  %297 = fmul float %296, %294
  %298 = fptosi float %297 to i32
  %299 = tail call i32 @llvm.smax.i32(i32 %298, i32 %145)
  %300 = sub nsw i32 %299, %291
  %301 = getelementptr inbounds %class.ResizeArrayRaw, ptr %285, i64 0, i32 6
  %302 = load i32, ptr %301, align 8, !tbaa !32
  %303 = icmp slt i32 %300, %302
  %304 = add nsw i32 %302, %291
  %305 = select i1 %303, i32 %304, i32 %299
  %306 = sext i32 %305 to i64
  %307 = shl nsw i64 %306, 1
  %308 = add nsw i64 %307, 31
  %309 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %308) #9
  %310 = getelementptr inbounds i8, ptr %309, i64 31
  %311 = ptrtoint ptr %310 to i64
  %312 = and i64 %311, 31
  %313 = sub nsw i64 0, %312
  %314 = getelementptr inbounds i8, ptr %310, i64 %313
  %315 = load ptr, ptr %285, align 8, !tbaa !33
  %316 = sext i32 %287 to i64
  %317 = shl nsw i64 %316, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %314, ptr align 1 %315, i64 %317, i1 false)
  %318 = icmp eq i32 %291, 0
  br i1 %318, label %324, label %319

319:                                              ; preds = %293
  %320 = getelementptr inbounds %class.ResizeArrayRaw, ptr %285, i64 0, i32 1
  %321 = load ptr, ptr %320, align 8, !tbaa !34
  %322 = icmp eq ptr %321, null
  br i1 %322, label %324, label %323

323:                                              ; preds = %319
  tail call void @_ZdaPv(ptr noundef nonnull %321) #10
  br label %324

324:                                              ; preds = %323, %319, %293
  %325 = getelementptr inbounds %class.ResizeArrayRaw, ptr %285, i64 0, i32 1
  store ptr %309, ptr %325, align 8, !tbaa !34
  store ptr %314, ptr %285, align 8, !tbaa !33
  store i32 %305, ptr %290, align 4, !tbaa !30
  %326 = load ptr, ptr %284, align 8, !tbaa !25
  br label %327

327:                                              ; preds = %281, %289, %324
  %328 = phi ptr [ %285, %281 ], [ %285, %289 ], [ %326, %324 ]
  store i32 %145, ptr %286, align 8, !tbaa !27
  %329 = load ptr, ptr %328, align 8, !tbaa !33
  %330 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %47, i64 0, i32 6, i32 1
  %331 = load ptr, ptr %330, align 8, !tbaa !25
  %332 = getelementptr inbounds %class.ResizeArrayRaw, ptr %331, i64 0, i32 2
  %333 = load i32, ptr %332, align 8, !tbaa !27
  %334 = icmp slt i32 %333, %145
  br i1 %334, label %335, label %373

335:                                              ; preds = %327
  %336 = getelementptr inbounds %class.ResizeArrayRaw, ptr %331, i64 0, i32 3
  %337 = load i32, ptr %336, align 4, !tbaa !30
  %338 = icmp slt i32 %337, %145
  br i1 %338, label %339, label %373

339:                                              ; preds = %335
  %340 = sitofp i32 %337 to float
  %341 = getelementptr inbounds %class.ResizeArrayRaw, ptr %331, i64 0, i32 5
  %342 = load float, ptr %341, align 4, !tbaa !31
  %343 = fmul float %342, %340
  %344 = fptosi float %343 to i32
  %345 = tail call i32 @llvm.smax.i32(i32 %344, i32 %145)
  %346 = sub nsw i32 %345, %337
  %347 = getelementptr inbounds %class.ResizeArrayRaw, ptr %331, i64 0, i32 6
  %348 = load i32, ptr %347, align 8, !tbaa !32
  %349 = icmp slt i32 %346, %348
  %350 = add nsw i32 %348, %337
  %351 = select i1 %349, i32 %350, i32 %345
  %352 = sext i32 %351 to i64
  %353 = shl nsw i64 %352, 1
  %354 = add nsw i64 %353, 31
  %355 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %354) #9
  %356 = getelementptr inbounds i8, ptr %355, i64 31
  %357 = ptrtoint ptr %356 to i64
  %358 = and i64 %357, 31
  %359 = sub nsw i64 0, %358
  %360 = getelementptr inbounds i8, ptr %356, i64 %359
  %361 = load ptr, ptr %331, align 8, !tbaa !33
  %362 = sext i32 %333 to i64
  %363 = shl nsw i64 %362, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %360, ptr align 1 %361, i64 %363, i1 false)
  %364 = icmp eq i32 %337, 0
  br i1 %364, label %370, label %365

365:                                              ; preds = %339
  %366 = getelementptr inbounds %class.ResizeArrayRaw, ptr %331, i64 0, i32 1
  %367 = load ptr, ptr %366, align 8, !tbaa !34
  %368 = icmp eq ptr %367, null
  br i1 %368, label %370, label %369

369:                                              ; preds = %365
  tail call void @_ZdaPv(ptr noundef nonnull %367) #10
  br label %370

370:                                              ; preds = %369, %365, %339
  %371 = getelementptr inbounds %class.ResizeArrayRaw, ptr %331, i64 0, i32 1
  store ptr %355, ptr %371, align 8, !tbaa !34
  store ptr %360, ptr %331, align 8, !tbaa !33
  store i32 %351, ptr %336, align 4, !tbaa !30
  %372 = load ptr, ptr %330, align 8, !tbaa !25
  br label %373

373:                                              ; preds = %327, %335, %370
  %374 = phi ptr [ %331, %327 ], [ %331, %335 ], [ %372, %370 ]
  store i32 %145, ptr %332, align 8, !tbaa !27
  %375 = load ptr, ptr %374, align 8, !tbaa !33
  %376 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %47, i64 0, i32 15, i32 1
  %377 = load ptr, ptr %376, align 8, !tbaa !25
  %378 = getelementptr inbounds %class.ResizeArrayRaw, ptr %377, i64 0, i32 2
  %379 = load i32, ptr %378, align 8, !tbaa !27
  %380 = icmp slt i32 %379, %145
  br i1 %380, label %381, label %419

381:                                              ; preds = %373
  %382 = getelementptr inbounds %class.ResizeArrayRaw, ptr %377, i64 0, i32 3
  %383 = load i32, ptr %382, align 4, !tbaa !30
  %384 = icmp slt i32 %383, %145
  br i1 %384, label %385, label %419

385:                                              ; preds = %381
  %386 = sitofp i32 %383 to float
  %387 = getelementptr inbounds %class.ResizeArrayRaw, ptr %377, i64 0, i32 5
  %388 = load float, ptr %387, align 4, !tbaa !31
  %389 = fmul float %388, %386
  %390 = fptosi float %389 to i32
  %391 = tail call i32 @llvm.smax.i32(i32 %390, i32 %145)
  %392 = sub nsw i32 %391, %383
  %393 = getelementptr inbounds %class.ResizeArrayRaw, ptr %377, i64 0, i32 6
  %394 = load i32, ptr %393, align 8, !tbaa !32
  %395 = icmp slt i32 %392, %394
  %396 = add nsw i32 %394, %383
  %397 = select i1 %395, i32 %396, i32 %391
  %398 = sext i32 %397 to i64
  %399 = shl nsw i64 %398, 1
  %400 = add nsw i64 %399, 31
  %401 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %400) #9
  %402 = getelementptr inbounds i8, ptr %401, i64 31
  %403 = ptrtoint ptr %402 to i64
  %404 = and i64 %403, 31
  %405 = sub nsw i64 0, %404
  %406 = getelementptr inbounds i8, ptr %402, i64 %405
  %407 = load ptr, ptr %377, align 8, !tbaa !33
  %408 = sext i32 %379 to i64
  %409 = shl nsw i64 %408, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %406, ptr align 1 %407, i64 %409, i1 false)
  %410 = icmp eq i32 %383, 0
  br i1 %410, label %416, label %411

411:                                              ; preds = %385
  %412 = getelementptr inbounds %class.ResizeArrayRaw, ptr %377, i64 0, i32 1
  %413 = load ptr, ptr %412, align 8, !tbaa !34
  %414 = icmp eq ptr %413, null
  br i1 %414, label %416, label %415

415:                                              ; preds = %411
  tail call void @_ZdaPv(ptr noundef nonnull %413) #10
  br label %416

416:                                              ; preds = %415, %411, %385
  %417 = getelementptr inbounds %class.ResizeArrayRaw, ptr %377, i64 0, i32 1
  store ptr %401, ptr %417, align 8, !tbaa !34
  store ptr %406, ptr %377, align 8, !tbaa !33
  store i32 %397, ptr %382, align 4, !tbaa !30
  %418 = load ptr, ptr %376, align 8, !tbaa !25
  br label %419

419:                                              ; preds = %373, %381, %416
  %420 = phi ptr [ %377, %373 ], [ %377, %381 ], [ %418, %416 ]
  store i32 %145, ptr %378, align 8, !tbaa !27
  %421 = load ptr, ptr %420, align 8, !tbaa !33
  %422 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %47, i64 0, i32 16, i32 1
  %423 = load ptr, ptr %422, align 8, !tbaa !25
  %424 = getelementptr inbounds %class.ResizeArrayRaw, ptr %423, i64 0, i32 2
  %425 = load i32, ptr %424, align 8, !tbaa !27
  %426 = icmp slt i32 %425, %145
  br i1 %426, label %427, label %465

427:                                              ; preds = %419
  %428 = getelementptr inbounds %class.ResizeArrayRaw, ptr %423, i64 0, i32 3
  %429 = load i32, ptr %428, align 4, !tbaa !30
  %430 = icmp slt i32 %429, %145
  br i1 %430, label %431, label %465

431:                                              ; preds = %427
  %432 = sitofp i32 %429 to float
  %433 = getelementptr inbounds %class.ResizeArrayRaw, ptr %423, i64 0, i32 5
  %434 = load float, ptr %433, align 4, !tbaa !31
  %435 = fmul float %434, %432
  %436 = fptosi float %435 to i32
  %437 = tail call i32 @llvm.smax.i32(i32 %436, i32 %145)
  %438 = sub nsw i32 %437, %429
  %439 = getelementptr inbounds %class.ResizeArrayRaw, ptr %423, i64 0, i32 6
  %440 = load i32, ptr %439, align 8, !tbaa !32
  %441 = icmp slt i32 %438, %440
  %442 = add nsw i32 %440, %429
  %443 = select i1 %441, i32 %442, i32 %437
  %444 = sext i32 %443 to i64
  %445 = shl nsw i64 %444, 1
  %446 = add nsw i64 %445, 31
  %447 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %446) #9
  %448 = getelementptr inbounds i8, ptr %447, i64 31
  %449 = ptrtoint ptr %448 to i64
  %450 = and i64 %449, 31
  %451 = sub nsw i64 0, %450
  %452 = getelementptr inbounds i8, ptr %448, i64 %451
  %453 = load ptr, ptr %423, align 8, !tbaa !33
  %454 = sext i32 %425 to i64
  %455 = shl nsw i64 %454, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %452, ptr align 1 %453, i64 %455, i1 false)
  %456 = icmp eq i32 %429, 0
  br i1 %456, label %462, label %457

457:                                              ; preds = %431
  %458 = getelementptr inbounds %class.ResizeArrayRaw, ptr %423, i64 0, i32 1
  %459 = load ptr, ptr %458, align 8, !tbaa !34
  %460 = icmp eq ptr %459, null
  br i1 %460, label %462, label %461

461:                                              ; preds = %457
  tail call void @_ZdaPv(ptr noundef nonnull %459) #10
  br label %462

462:                                              ; preds = %461, %457, %431
  %463 = getelementptr inbounds %class.ResizeArrayRaw, ptr %423, i64 0, i32 1
  store ptr %447, ptr %463, align 8, !tbaa !34
  store ptr %452, ptr %423, align 8, !tbaa !33
  store i32 %443, ptr %428, align 4, !tbaa !30
  %464 = load ptr, ptr %422, align 8, !tbaa !25
  br label %465

465:                                              ; preds = %419, %427, %462
  %466 = phi ptr [ %423, %419 ], [ %423, %427 ], [ %464, %462 ]
  store i32 %145, ptr %424, align 8, !tbaa !27
  %467 = load ptr, ptr %466, align 8, !tbaa !33
  br i1 %144, label %609, label %468

468:                                              ; preds = %465
  %469 = icmp sgt i32 %38, 0
  br i1 %469, label %470, label %600

470:                                              ; preds = %468
  %471 = zext i32 %38 to i64
  %472 = and i64 %471, 1
  %473 = icmp eq i32 %38, 1
  br i1 %473, label %506, label %474

474:                                              ; preds = %470
  %475 = and i64 %471, 4294967294
  br label %476

476:                                              ; preds = %501, %474
  %477 = phi i64 [ 0, %474 ], [ %503, %501 ]
  %478 = phi i32 [ 0, %474 ], [ %502, %501 ]
  %479 = phi i64 [ 0, %474 ], [ %504, %501 ]
  %480 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %477, i32 4
  %481 = load i8, ptr %480, align 1
  %482 = and i8 %481, 7
  %483 = icmp eq i8 %482, 0
  br i1 %483, label %489, label %484

484:                                              ; preds = %476
  %485 = trunc i64 %477 to i16
  %486 = add nsw i32 %478, 1
  %487 = sext i32 %478 to i64
  %488 = getelementptr inbounds i16, ptr %191, i64 %487
  store i16 %485, ptr %488, align 2, !tbaa !44
  br label %489

489:                                              ; preds = %476, %484
  %490 = phi i32 [ %486, %484 ], [ %478, %476 ]
  %491 = or i64 %477, 1
  %492 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %491, i32 4
  %493 = load i8, ptr %492, align 1
  %494 = and i8 %493, 7
  %495 = icmp eq i8 %494, 0
  br i1 %495, label %501, label %496

496:                                              ; preds = %489
  %497 = trunc i64 %491 to i16
  %498 = add nsw i32 %490, 1
  %499 = sext i32 %490 to i64
  %500 = getelementptr inbounds i16, ptr %191, i64 %499
  store i16 %497, ptr %500, align 2, !tbaa !44
  br label %501

501:                                              ; preds = %496, %489
  %502 = phi i32 [ %498, %496 ], [ %490, %489 ]
  %503 = add nuw nsw i64 %477, 2
  %504 = add i64 %479, 2
  %505 = icmp eq i64 %504, %475
  br i1 %505, label %506, label %476

506:                                              ; preds = %501, %470
  %507 = phi i32 [ undef, %470 ], [ %502, %501 ]
  %508 = phi i64 [ 0, %470 ], [ %503, %501 ]
  %509 = phi i32 [ 0, %470 ], [ %502, %501 ]
  %510 = icmp eq i64 %472, 0
  br i1 %510, label %521, label %511

511:                                              ; preds = %506
  %512 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %508, i32 4
  %513 = load i8, ptr %512, align 1
  %514 = and i8 %513, 7
  %515 = icmp eq i8 %514, 0
  br i1 %515, label %521, label %516

516:                                              ; preds = %511
  %517 = trunc i64 %508 to i16
  %518 = add nsw i32 %509, 1
  %519 = sext i32 %509 to i64
  %520 = getelementptr inbounds i16, ptr %191, i64 %519
  store i16 %517, ptr %520, align 2, !tbaa !44
  br label %521

521:                                              ; preds = %511, %516, %506
  %522 = phi i32 [ %507, %506 ], [ %518, %516 ], [ %509, %511 ]
  %523 = icmp eq i32 %522, 0
  br i1 %523, label %531, label %524

524:                                              ; preds = %521
  %525 = add nsw i32 %522, -1
  %526 = sext i32 %525 to i64
  %527 = getelementptr inbounds i16, ptr %191, i64 %526
  %528 = load i16, ptr %527, align 2, !tbaa !44
  %529 = sext i32 %522 to i64
  %530 = getelementptr inbounds i16, ptr %191, i64 %529
  store i16 %528, ptr %530, align 2, !tbaa !44
  br label %531

531:                                              ; preds = %524, %521
  %532 = load i32, ptr @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4, !tbaa !5
  %533 = icmp ne i32 %532, 0
  %534 = icmp sgt i32 %522, 0
  %535 = and i1 %533, %534
  br i1 %535, label %536, label %600

536:                                              ; preds = %531
  %537 = zext i32 %522 to i64
  %538 = and i64 %537, 1
  %539 = icmp eq i32 %522, 1
  br i1 %539, label %574, label %540

540:                                              ; preds = %536
  %541 = and i64 %537, 4294967294
  br label %542

542:                                              ; preds = %569, %540
  %543 = phi i64 [ 0, %540 ], [ %571, %569 ]
  %544 = phi i32 [ 0, %540 ], [ %570, %569 ]
  %545 = phi i64 [ 0, %540 ], [ %572, %569 ]
  %546 = getelementptr inbounds i16, ptr %191, i64 %543
  %547 = load i16, ptr %546, align 2, !tbaa !44
  %548 = zext i16 %547 to i64
  %549 = getelementptr inbounds %struct.CompAtomExt, ptr %45, i64 %548
  %550 = load i32, ptr %549, align 4
  %551 = icmp sgt i32 %550, -1
  br i1 %551, label %552, label %556

552:                                              ; preds = %542
  %553 = add nsw i32 %544, 1
  %554 = sext i32 %544 to i64
  %555 = getelementptr inbounds i16, ptr %237, i64 %554
  store i16 %547, ptr %555, align 2, !tbaa !44
  br label %556

556:                                              ; preds = %542, %552
  %557 = phi i32 [ %544, %542 ], [ %553, %552 ]
  %558 = or i64 %543, 1
  %559 = getelementptr inbounds i16, ptr %191, i64 %558
  %560 = load i16, ptr %559, align 2, !tbaa !44
  %561 = zext i16 %560 to i64
  %562 = getelementptr inbounds %struct.CompAtomExt, ptr %45, i64 %561
  %563 = load i32, ptr %562, align 4
  %564 = icmp sgt i32 %563, -1
  br i1 %564, label %565, label %569

565:                                              ; preds = %556
  %566 = add nsw i32 %557, 1
  %567 = sext i32 %557 to i64
  %568 = getelementptr inbounds i16, ptr %237, i64 %567
  store i16 %560, ptr %568, align 2, !tbaa !44
  br label %569

569:                                              ; preds = %565, %556
  %570 = phi i32 [ %557, %556 ], [ %566, %565 ]
  %571 = add nuw nsw i64 %543, 2
  %572 = add i64 %545, 2
  %573 = icmp eq i64 %572, %541
  br i1 %573, label %574, label %542

574:                                              ; preds = %569, %536
  %575 = phi i32 [ undef, %536 ], [ %570, %569 ]
  %576 = phi i64 [ 0, %536 ], [ %571, %569 ]
  %577 = phi i32 [ 0, %536 ], [ %570, %569 ]
  %578 = icmp eq i64 %538, 0
  br i1 %578, label %590, label %579

579:                                              ; preds = %574
  %580 = getelementptr inbounds i16, ptr %191, i64 %576
  %581 = load i16, ptr %580, align 2, !tbaa !44
  %582 = zext i16 %581 to i64
  %583 = getelementptr inbounds %struct.CompAtomExt, ptr %45, i64 %582
  %584 = load i32, ptr %583, align 4
  %585 = icmp sgt i32 %584, -1
  br i1 %585, label %586, label %590

586:                                              ; preds = %579
  %587 = add nsw i32 %577, 1
  %588 = sext i32 %577 to i64
  %589 = getelementptr inbounds i16, ptr %237, i64 %588
  store i16 %581, ptr %589, align 2, !tbaa !44
  br label %590

590:                                              ; preds = %579, %586, %574
  %591 = phi i32 [ %575, %574 ], [ %577, %579 ], [ %587, %586 ]
  %592 = icmp eq i32 %591, 0
  br i1 %592, label %600, label %593

593:                                              ; preds = %590
  %594 = add nsw i32 %591, -1
  %595 = sext i32 %594 to i64
  %596 = getelementptr inbounds i16, ptr %237, i64 %595
  %597 = load i16, ptr %596, align 2, !tbaa !44
  %598 = sext i32 %591 to i64
  %599 = getelementptr inbounds i16, ptr %237, i64 %598
  store i16 %597, ptr %599, align 2, !tbaa !44
  br label %600

600:                                              ; preds = %468, %531, %593, %590
  %601 = phi i32 [ %522, %593 ], [ %522, %590 ], [ %522, %531 ], [ 0, %468 ]
  %602 = phi i32 [ %591, %593 ], [ 0, %590 ], [ 0, %531 ], [ 0, %468 ]
  %603 = load i32, ptr %13, align 8, !tbaa !17
  %604 = add nsw i32 %603, 1
  store i32 %604, ptr %13, align 8, !tbaa !17
  %605 = trunc i32 %36 to i16
  %606 = load ptr, ptr %8, align 8, !tbaa !46
  %607 = sext i32 %603 to i64
  %608 = getelementptr inbounds i16, ptr %606, i64 %607
  store i16 %605, ptr %608, align 2, !tbaa !44
  br label %619

609:                                              ; preds = %465
  %610 = load ptr, ptr %8, align 8, !tbaa !46
  %611 = load i32, ptr %13, align 8, !tbaa !17
  %612 = add nsw i32 %611, 1
  store i32 %612, ptr %13, align 8, !tbaa !17
  %613 = sext i32 %611 to i64
  %614 = getelementptr inbounds i16, ptr %610, i64 %613
  %615 = load i16, ptr %614, align 2, !tbaa !44
  %616 = zext i16 %615 to i32
  %617 = icmp eq i32 %36, %616
  br i1 %617, label %619, label %618

618:                                              ; preds = %609
  tail call void @_Z8NAMD_bugPKc(ptr noundef nonnull @.str)
  br label %619

619:                                              ; preds = %609, %618, %600
  %620 = phi i32 [ 0, %618 ], [ 0, %609 ], [ %601, %600 ]
  %621 = phi i32 [ 0, %618 ], [ 0, %609 ], [ %602, %600 ]
  %622 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %47, i64 0, i32 18, i32 1
  %623 = load ptr, ptr %622, align 8, !tbaa !172
  tail call void @_ZN14ResizeArrayRawI6VectorE6resizeEi(ptr noundef nonnull align 8 dereferenceable(36) %623, i32 noundef %36)
  %624 = load ptr, ptr %622, align 8, !tbaa !172
  %625 = load ptr, ptr %624, align 8, !tbaa !174
  %626 = sext i32 %36 to i64
  %627 = mul nsw i64 %626, 24
  tail call void @llvm.memset.p0.i64(ptr align 1 %625, i8 0, i64 %627, i1 false)
  %628 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 18
  %629 = load i32, ptr %628, align 4, !tbaa !48
  %630 = add nsw i32 %629, -1
  %631 = add nsw i32 %36, -1
  %632 = icmp sgt i32 %36, 1
  br i1 %632, label %633, label %2539

633:                                              ; preds = %619
  %634 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 16
  %635 = load i32, ptr %634, align 4, !tbaa !47
  %636 = getelementptr inbounds %class.Molecule, ptr %26, i64 0, i32 1
  %637 = getelementptr inbounds %class.Molecule, ptr %26, i64 0, i32 4
  %638 = getelementptr inbounds %class.Molecule, ptr %26, i64 0, i32 2
  %639 = getelementptr inbounds %class.Molecule, ptr %26, i64 0, i32 3
  %640 = ptrtoint ptr %421 to i64
  %641 = add nsw i32 %38, 10
  %642 = getelementptr inbounds %class.Pairlists, ptr %8, i64 0, i32 2
  %643 = ptrtoint ptr %467 to i64
  %644 = ptrtoint ptr %329 to i64
  %645 = ptrtoint ptr %375 to i64
  %646 = getelementptr inbounds %class.LJTable, ptr %25, i64 0, i32 1
  %647 = getelementptr inbounds %class.LJTable, ptr %25, i64 0, i32 2
  %648 = fneg double %28
  %649 = getelementptr inbounds double, ptr %6, i64 26
  %650 = getelementptr inbounds double, ptr %6, i64 28
  %651 = getelementptr inbounds double, ptr %6, i64 29
  %652 = getelementptr inbounds double, ptr %6, i64 31
  %653 = fneg double %30
  %654 = sext i32 %620 to i64
  %655 = sext i32 %621 to i64
  %656 = insertelement <2 x double> poison, double %23, i64 0
  %657 = shufflevector <2 x double> %656, <2 x double> poison, <2 x i32> zeroinitializer
  %658 = getelementptr inbounds i16, ptr %467, i64 1
  %659 = getelementptr inbounds i16, ptr %467, i64 1
  br label %660

660:                                              ; preds = %633, %2524
  %661 = phi i32 [ 0, %633 ], [ %2535, %2524 ]
  %662 = phi i32 [ 0, %633 ], [ %2537, %2524 ]
  %663 = phi ptr [ null, %633 ], [ %2533, %2524 ]
  %664 = phi ptr [ null, %633 ], [ %2532, %2524 ]
  %665 = phi ptr [ null, %633 ], [ %2531, %2524 ]
  %666 = phi i32 [ 0, %633 ], [ %2530, %2524 ]
  %667 = phi i32 [ 0, %633 ], [ %2529, %2524 ]
  %668 = phi i32 [ 0, %633 ], [ %2528, %2524 ]
  %669 = phi i32 [ 0, %633 ], [ %2527, %2524 ]
  %670 = phi i32 [ 0, %633 ], [ %2526, %2524 ]
  %671 = phi i32 [ %635, %633 ], [ %2525, %2524 ]
  %672 = phi <2 x double> [ zeroinitializer, %633 ], [ %2536, %2524 ]
  %673 = sext i32 %662 to i64
  %674 = getelementptr inbounds %struct.CompAtom, ptr %39, i64 %673
  %675 = getelementptr inbounds %struct.CompAtomExt, ptr %43, i64 %673
  %676 = getelementptr inbounds %struct.CompAtom, ptr %39, i64 %673, i32 4
  %677 = load i8, ptr %676, align 1
  %678 = lshr i8 %677, 3
  %679 = and i8 %678, 15
  %680 = zext i8 %679 to i32
  %681 = icmp eq i8 %679, 0
  br i1 %681, label %688, label %682

682:                                              ; preds = %660
  %683 = icmp eq i32 %671, 0
  br i1 %683, label %688, label %684

684:                                              ; preds = %682
  %685 = add nsw i32 %671, -1
  %686 = add nsw i32 %662, -1
  %687 = add i32 %686, %680
  br label %2524

688:                                              ; preds = %682, %660
  %689 = phi i32 [ %671, %660 ], [ %630, %682 ]
  %690 = load <2 x double>, ptr %674, align 8, !tbaa !19
  %691 = fadd <2 x double> %15, %690
  %692 = getelementptr inbounds %class.Vector, ptr %674, i64 0, i32 2
  %693 = load double, ptr %692, align 8, !tbaa !49
  %694 = fadd double %17, %693
  %695 = add nsw i32 %662, %680
  %696 = select i1 %681, i32 %666, i32 %695
  br i1 %144, label %2047, label %697

697:                                              ; preds = %688
  %698 = load i32, ptr %675, align 4
  %699 = shl i32 %698, 2
  %700 = ashr exact i32 %699, 2
  %701 = load ptr, ptr %636, align 8, !tbaa !51
  %702 = sext i32 %700 to i64
  %703 = getelementptr inbounds %class.ExclusionCheck, ptr %701, i64 %702
  %704 = load i32, ptr %703, align 8, !tbaa !53
  %705 = getelementptr inbounds %class.ExclusionCheck, ptr %701, i64 %702, i32 1
  %706 = load i32, ptr %705, align 4, !tbaa !55
  %707 = getelementptr inbounds %class.ExclusionCheck, ptr %701, i64 %702, i32 2
  %708 = load ptr, ptr %707, align 8, !tbaa !56
  %709 = icmp eq ptr %708, null
  br i1 %709, label %714, label %710

710:                                              ; preds = %697
  %711 = sext i32 %704 to i64
  %712 = sub nsw i64 0, %711
  %713 = getelementptr inbounds i8, ptr %708, i64 %712
  br label %940

714:                                              ; preds = %697
  %715 = icmp eq ptr %663, null
  br i1 %715, label %803, label %716

716:                                              ; preds = %714
  %717 = load i32, ptr %664, align 4, !tbaa !5
  %718 = icmp slt i32 %717, 1
  br i1 %718, label %766, label %719

719:                                              ; preds = %716
  %720 = add nuw i32 %717, 1
  %721 = zext i32 %720 to i64
  %722 = add nsw i64 %721, -1
  %723 = add nsw i64 %721, -2
  %724 = and i64 %722, 3
  %725 = icmp ult i64 %723, 3
  br i1 %725, label %753, label %726

726:                                              ; preds = %719
  %727 = and i64 %722, -4
  br label %728

728:                                              ; preds = %728, %726
  %729 = phi i64 [ 1, %726 ], [ %750, %728 ]
  %730 = phi i64 [ 0, %726 ], [ %751, %728 ]
  %731 = getelementptr inbounds i32, ptr %664, i64 %729
  %732 = load i32, ptr %731, align 4, !tbaa !5
  %733 = sext i32 %732 to i64
  %734 = getelementptr inbounds i8, ptr %663, i64 %733
  store i8 0, ptr %734, align 1, !tbaa !57
  %735 = add nuw nsw i64 %729, 1
  %736 = getelementptr inbounds i32, ptr %664, i64 %735
  %737 = load i32, ptr %736, align 4, !tbaa !5
  %738 = sext i32 %737 to i64
  %739 = getelementptr inbounds i8, ptr %663, i64 %738
  store i8 0, ptr %739, align 1, !tbaa !57
  %740 = add nuw nsw i64 %729, 2
  %741 = getelementptr inbounds i32, ptr %664, i64 %740
  %742 = load i32, ptr %741, align 4, !tbaa !5
  %743 = sext i32 %742 to i64
  %744 = getelementptr inbounds i8, ptr %663, i64 %743
  store i8 0, ptr %744, align 1, !tbaa !57
  %745 = add nuw nsw i64 %729, 3
  %746 = getelementptr inbounds i32, ptr %664, i64 %745
  %747 = load i32, ptr %746, align 4, !tbaa !5
  %748 = sext i32 %747 to i64
  %749 = getelementptr inbounds i8, ptr %663, i64 %748
  store i8 0, ptr %749, align 1, !tbaa !57
  %750 = add nuw nsw i64 %729, 4
  %751 = add i64 %730, 4
  %752 = icmp eq i64 %751, %727
  br i1 %752, label %753, label %728

753:                                              ; preds = %728, %719
  %754 = phi i64 [ 1, %719 ], [ %750, %728 ]
  %755 = icmp eq i64 %724, 0
  br i1 %755, label %766, label %756

756:                                              ; preds = %753, %756
  %757 = phi i64 [ %763, %756 ], [ %754, %753 ]
  %758 = phi i64 [ %764, %756 ], [ 0, %753 ]
  %759 = getelementptr inbounds i32, ptr %664, i64 %757
  %760 = load i32, ptr %759, align 4, !tbaa !5
  %761 = sext i32 %760 to i64
  %762 = getelementptr inbounds i8, ptr %663, i64 %761
  store i8 0, ptr %762, align 1, !tbaa !57
  %763 = add nuw nsw i64 %757, 1
  %764 = add i64 %758, 1
  %765 = icmp eq i64 %764, %724
  br i1 %765, label %766, label %756, !llvm.loop !364

766:                                              ; preds = %753, %756, %716
  %767 = load i32, ptr %665, align 4, !tbaa !5
  %768 = icmp slt i32 %767, 1
  br i1 %768, label %823, label %769

769:                                              ; preds = %766
  %770 = add nuw i32 %767, 1
  %771 = zext i32 %770 to i64
  %772 = add nsw i64 %771, -1
  %773 = add nsw i64 %771, -2
  %774 = and i64 %772, 3
  %775 = icmp ult i64 %773, 3
  br i1 %775, label %810, label %776

776:                                              ; preds = %769
  %777 = and i64 %772, -4
  br label %778

778:                                              ; preds = %778, %776
  %779 = phi i64 [ 1, %776 ], [ %800, %778 ]
  %780 = phi i64 [ 0, %776 ], [ %801, %778 ]
  %781 = getelementptr inbounds i32, ptr %665, i64 %779
  %782 = load i32, ptr %781, align 4, !tbaa !5
  %783 = sext i32 %782 to i64
  %784 = getelementptr inbounds i8, ptr %663, i64 %783
  store i8 0, ptr %784, align 1, !tbaa !57
  %785 = add nuw nsw i64 %779, 1
  %786 = getelementptr inbounds i32, ptr %665, i64 %785
  %787 = load i32, ptr %786, align 4, !tbaa !5
  %788 = sext i32 %787 to i64
  %789 = getelementptr inbounds i8, ptr %663, i64 %788
  store i8 0, ptr %789, align 1, !tbaa !57
  %790 = add nuw nsw i64 %779, 2
  %791 = getelementptr inbounds i32, ptr %665, i64 %790
  %792 = load i32, ptr %791, align 4, !tbaa !5
  %793 = sext i32 %792 to i64
  %794 = getelementptr inbounds i8, ptr %663, i64 %793
  store i8 0, ptr %794, align 1, !tbaa !57
  %795 = add nuw nsw i64 %779, 3
  %796 = getelementptr inbounds i32, ptr %665, i64 %795
  %797 = load i32, ptr %796, align 4, !tbaa !5
  %798 = sext i32 %797 to i64
  %799 = getelementptr inbounds i8, ptr %663, i64 %798
  store i8 0, ptr %799, align 1, !tbaa !57
  %800 = add nuw nsw i64 %779, 4
  %801 = add i64 %780, 4
  %802 = icmp eq i64 %801, %777
  br i1 %802, label %810, label %778

803:                                              ; preds = %714
  %804 = load i32, ptr %637, align 8, !tbaa !60
  %805 = tail call i32 @llvm.smax.i32(i32 %804, i32 -1)
  %806 = sext i32 %805 to i64
  %807 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %806) #9
  %808 = load i32, ptr %637, align 8, !tbaa !60
  %809 = sext i32 %808 to i64
  tail call void @llvm.memset.p0.i64(ptr nonnull align 1 %807, i8 0, i64 %809, i1 false)
  br label %823

810:                                              ; preds = %778, %769
  %811 = phi i64 [ 1, %769 ], [ %800, %778 ]
  %812 = icmp eq i64 %774, 0
  br i1 %812, label %823, label %813

813:                                              ; preds = %810, %813
  %814 = phi i64 [ %820, %813 ], [ %811, %810 ]
  %815 = phi i64 [ %821, %813 ], [ 0, %810 ]
  %816 = getelementptr inbounds i32, ptr %665, i64 %814
  %817 = load i32, ptr %816, align 4, !tbaa !5
  %818 = sext i32 %817 to i64
  %819 = getelementptr inbounds i8, ptr %663, i64 %818
  store i8 0, ptr %819, align 1, !tbaa !57
  %820 = add nuw nsw i64 %814, 1
  %821 = add i64 %815, 1
  %822 = icmp eq i64 %821, %774
  br i1 %822, label %823, label %813, !llvm.loop !365

823:                                              ; preds = %810, %813, %766, %803
  %824 = phi ptr [ %807, %803 ], [ %663, %766 ], [ %663, %813 ], [ %663, %810 ]
  %825 = load i32, ptr %675, align 4
  %826 = shl i32 %825, 2
  %827 = ashr exact i32 %826, 2
  %828 = load ptr, ptr %638, align 8, !tbaa !62
  %829 = sext i32 %827 to i64
  %830 = getelementptr inbounds ptr, ptr %828, i64 %829
  %831 = load ptr, ptr %830, align 8, !tbaa !23
  %832 = load i32, ptr %831, align 4, !tbaa !5
  %833 = icmp slt i32 %832, 1
  br i1 %833, label %886, label %834

834:                                              ; preds = %823
  %835 = add nuw i32 %832, 1
  %836 = zext i32 %835 to i64
  %837 = add nsw i64 %836, -1
  %838 = add nsw i64 %836, -2
  %839 = and i64 %837, 3
  %840 = icmp ult i64 %838, 3
  br i1 %840, label %868, label %841

841:                                              ; preds = %834
  %842 = and i64 %837, -4
  br label %843

843:                                              ; preds = %843, %841
  %844 = phi i64 [ 1, %841 ], [ %865, %843 ]
  %845 = phi i64 [ 0, %841 ], [ %866, %843 ]
  %846 = getelementptr inbounds i32, ptr %831, i64 %844
  %847 = load i32, ptr %846, align 4, !tbaa !5
  %848 = sext i32 %847 to i64
  %849 = getelementptr inbounds i8, ptr %824, i64 %848
  store i8 1, ptr %849, align 1, !tbaa !57
  %850 = add nuw nsw i64 %844, 1
  %851 = getelementptr inbounds i32, ptr %831, i64 %850
  %852 = load i32, ptr %851, align 4, !tbaa !5
  %853 = sext i32 %852 to i64
  %854 = getelementptr inbounds i8, ptr %824, i64 %853
  store i8 1, ptr %854, align 1, !tbaa !57
  %855 = add nuw nsw i64 %844, 2
  %856 = getelementptr inbounds i32, ptr %831, i64 %855
  %857 = load i32, ptr %856, align 4, !tbaa !5
  %858 = sext i32 %857 to i64
  %859 = getelementptr inbounds i8, ptr %824, i64 %858
  store i8 1, ptr %859, align 1, !tbaa !57
  %860 = add nuw nsw i64 %844, 3
  %861 = getelementptr inbounds i32, ptr %831, i64 %860
  %862 = load i32, ptr %861, align 4, !tbaa !5
  %863 = sext i32 %862 to i64
  %864 = getelementptr inbounds i8, ptr %824, i64 %863
  store i8 1, ptr %864, align 1, !tbaa !57
  %865 = add nuw nsw i64 %844, 4
  %866 = add i64 %845, 4
  %867 = icmp eq i64 %866, %842
  br i1 %867, label %868, label %843

868:                                              ; preds = %843, %834
  %869 = phi i64 [ 1, %834 ], [ %865, %843 ]
  %870 = icmp eq i64 %839, 0
  br i1 %870, label %881, label %871

871:                                              ; preds = %868, %871
  %872 = phi i64 [ %878, %871 ], [ %869, %868 ]
  %873 = phi i64 [ %879, %871 ], [ 0, %868 ]
  %874 = getelementptr inbounds i32, ptr %831, i64 %872
  %875 = load i32, ptr %874, align 4, !tbaa !5
  %876 = sext i32 %875 to i64
  %877 = getelementptr inbounds i8, ptr %824, i64 %876
  store i8 1, ptr %877, align 1, !tbaa !57
  %878 = add nuw nsw i64 %872, 1
  %879 = add i64 %873, 1
  %880 = icmp eq i64 %879, %839
  br i1 %880, label %881, label %871, !llvm.loop !366

881:                                              ; preds = %871, %868
  %882 = load i32, ptr %675, align 4
  %883 = shl i32 %882, 2
  %884 = ashr exact i32 %883, 2
  %885 = sext i32 %884 to i64
  br label %886

886:                                              ; preds = %881, %823
  %887 = phi i64 [ %885, %881 ], [ %829, %823 ]
  %888 = load ptr, ptr %639, align 8, !tbaa !64
  %889 = getelementptr inbounds ptr, ptr %888, i64 %887
  %890 = load ptr, ptr %889, align 8, !tbaa !23
  %891 = load i32, ptr %890, align 4, !tbaa !5
  %892 = icmp slt i32 %891, 1
  br i1 %892, label %940, label %893

893:                                              ; preds = %886
  %894 = add nuw i32 %891, 1
  %895 = zext i32 %894 to i64
  %896 = add nsw i64 %895, -1
  %897 = add nsw i64 %895, -2
  %898 = and i64 %896, 3
  %899 = icmp ult i64 %897, 3
  br i1 %899, label %927, label %900

900:                                              ; preds = %893
  %901 = and i64 %896, -4
  br label %902

902:                                              ; preds = %902, %900
  %903 = phi i64 [ 1, %900 ], [ %924, %902 ]
  %904 = phi i64 [ 0, %900 ], [ %925, %902 ]
  %905 = getelementptr inbounds i32, ptr %890, i64 %903
  %906 = load i32, ptr %905, align 4, !tbaa !5
  %907 = sext i32 %906 to i64
  %908 = getelementptr inbounds i8, ptr %824, i64 %907
  store i8 2, ptr %908, align 1, !tbaa !57
  %909 = add nuw nsw i64 %903, 1
  %910 = getelementptr inbounds i32, ptr %890, i64 %909
  %911 = load i32, ptr %910, align 4, !tbaa !5
  %912 = sext i32 %911 to i64
  %913 = getelementptr inbounds i8, ptr %824, i64 %912
  store i8 2, ptr %913, align 1, !tbaa !57
  %914 = add nuw nsw i64 %903, 2
  %915 = getelementptr inbounds i32, ptr %890, i64 %914
  %916 = load i32, ptr %915, align 4, !tbaa !5
  %917 = sext i32 %916 to i64
  %918 = getelementptr inbounds i8, ptr %824, i64 %917
  store i8 2, ptr %918, align 1, !tbaa !57
  %919 = add nuw nsw i64 %903, 3
  %920 = getelementptr inbounds i32, ptr %890, i64 %919
  %921 = load i32, ptr %920, align 4, !tbaa !5
  %922 = sext i32 %921 to i64
  %923 = getelementptr inbounds i8, ptr %824, i64 %922
  store i8 2, ptr %923, align 1, !tbaa !57
  %924 = add nuw nsw i64 %903, 4
  %925 = add i64 %904, 4
  %926 = icmp eq i64 %925, %901
  br i1 %926, label %927, label %902

927:                                              ; preds = %902, %893
  %928 = phi i64 [ 1, %893 ], [ %924, %902 ]
  %929 = icmp eq i64 %898, 0
  br i1 %929, label %940, label %930

930:                                              ; preds = %927, %930
  %931 = phi i64 [ %937, %930 ], [ %928, %927 ]
  %932 = phi i64 [ %938, %930 ], [ 0, %927 ]
  %933 = getelementptr inbounds i32, ptr %890, i64 %931
  %934 = load i32, ptr %933, align 4, !tbaa !5
  %935 = sext i32 %934 to i64
  %936 = getelementptr inbounds i8, ptr %824, i64 %935
  store i8 2, ptr %936, align 1, !tbaa !57
  %937 = add nuw nsw i64 %931, 1
  %938 = add i64 %932, 1
  %939 = icmp eq i64 %938, %898
  br i1 %939, label %940, label %930, !llvm.loop !367

940:                                              ; preds = %927, %930, %886, %710
  %941 = phi ptr [ %713, %710 ], [ %824, %886 ], [ %824, %930 ], [ %824, %927 ]
  %942 = phi ptr [ %665, %710 ], [ %890, %886 ], [ %890, %930 ], [ %890, %927 ]
  %943 = phi ptr [ %664, %710 ], [ %831, %886 ], [ %831, %930 ], [ %831, %927 ]
  %944 = phi ptr [ %663, %710 ], [ %824, %886 ], [ %824, %930 ], [ %824, %927 ]
  %945 = load i8, ptr %676, align 1
  %946 = and i8 %945, 7
  %947 = icmp eq i8 %946, 0
  br i1 %947, label %1241, label %948

948:                                              ; preds = %940
  %949 = load i32, ptr @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4, !tbaa !5
  %950 = icmp eq i32 %949, 0
  br i1 %950, label %954, label %951

951:                                              ; preds = %948
  %952 = load i32, ptr %675, align 4
  %953 = icmp slt i32 %952, 0
  br label %954

954:                                              ; preds = %951, %948
  %955 = phi i1 [ false, %948 ], [ %953, %951 ]
  %956 = and i8 %945, 120
  %957 = icmp eq i8 %956, 0
  br i1 %957, label %989, label %958

958:                                              ; preds = %954
  %959 = icmp slt i32 %667, %620
  br i1 %959, label %960, label %973

960:                                              ; preds = %958
  %961 = sext i32 %667 to i64
  br label %962

962:                                              ; preds = %960, %968
  %963 = phi i64 [ %961, %960 ], [ %969, %968 ]
  %964 = getelementptr inbounds i16, ptr %191, i64 %963
  %965 = load i16, ptr %964, align 2, !tbaa !44
  %966 = zext i16 %965 to i32
  %967 = icmp sgt i32 %696, %966
  br i1 %967, label %968, label %971

968:                                              ; preds = %962
  %969 = add nsw i64 %963, 1
  %970 = icmp eq i64 %969, %654
  br i1 %970, label %973, label %962

971:                                              ; preds = %962
  %972 = trunc i64 %963 to i32
  br label %973

973:                                              ; preds = %968, %971, %958
  %974 = phi i32 [ %667, %958 ], [ %972, %971 ], [ %620, %968 ]
  %975 = icmp slt i32 %668, %621
  br i1 %975, label %976, label %989

976:                                              ; preds = %973
  %977 = sext i32 %668 to i64
  br label %978

978:                                              ; preds = %976, %984
  %979 = phi i64 [ %977, %976 ], [ %985, %984 ]
  %980 = getelementptr inbounds i16, ptr %237, i64 %979
  %981 = load i16, ptr %980, align 2, !tbaa !44
  %982 = zext i16 %981 to i32
  %983 = icmp sgt i32 %696, %982
  br i1 %983, label %984, label %987

984:                                              ; preds = %978
  %985 = add nsw i64 %979, 1
  %986 = icmp eq i64 %985, %655
  br i1 %986, label %989, label %978

987:                                              ; preds = %978
  %988 = trunc i64 %979 to i32
  br label %989

989:                                              ; preds = %984, %987, %973, %954
  %990 = phi i32 [ %668, %954 ], [ %668, %973 ], [ %988, %987 ], [ %621, %984 ]
  %991 = phi i32 [ %667, %954 ], [ %974, %973 ], [ %974, %987 ], [ %974, %984 ]
  %992 = add nsw i32 %662, 1
  %993 = icmp slt i32 %992, %696
  br i1 %993, label %994, label %1059

994:                                              ; preds = %989
  %995 = xor i32 %662, -1
  %996 = add i32 %696, %995
  %997 = zext i32 %996 to i64
  %998 = icmp ult i32 %996, 8
  br i1 %998, label %1048, label %999

999:                                              ; preds = %994
  %1000 = icmp ult i32 %996, 64
  br i1 %1000, label %1029, label %1001

1001:                                             ; preds = %999
  %1002 = and i64 %997, 4294967232
  %1003 = trunc i32 %992 to i16
  %1004 = insertelement <16 x i16> poison, i16 %1003, i64 0
  %1005 = shufflevector <16 x i16> %1004, <16 x i16> poison, <16 x i32> zeroinitializer
  %1006 = add <16 x i16> %1005, <i16 0, i16 1, i16 2, i16 3, i16 4, i16 5, i16 6, i16 7, i16 8, i16 9, i16 10, i16 11, i16 12, i16 13, i16 14, i16 15>
  %1007 = trunc i64 %1002 to i32
  %1008 = add i32 %992, %1007
  br label %1009

1009:                                             ; preds = %1009, %1001
  %1010 = phi i64 [ 0, %1001 ], [ %1019, %1009 ]
  %1011 = phi <16 x i16> [ %1006, %1001 ], [ %1020, %1009 ]
  %1012 = add <16 x i16> %1011, <i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16>
  %1013 = add <16 x i16> %1011, <i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32>
  %1014 = add <16 x i16> %1011, <i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48>
  %1015 = getelementptr inbounds i16, ptr %421, i64 %1010
  store <16 x i16> %1011, ptr %1015, align 2, !tbaa !44
  %1016 = getelementptr inbounds i16, ptr %1015, i64 16
  store <16 x i16> %1012, ptr %1016, align 2, !tbaa !44
  %1017 = getelementptr inbounds i16, ptr %1015, i64 32
  store <16 x i16> %1013, ptr %1017, align 2, !tbaa !44
  %1018 = getelementptr inbounds i16, ptr %1015, i64 48
  store <16 x i16> %1014, ptr %1018, align 2, !tbaa !44
  %1019 = add nuw i64 %1010, 64
  %1020 = add <16 x i16> %1011, <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>
  %1021 = icmp eq i64 %1019, %1002
  br i1 %1021, label %1022, label %1009, !llvm.loop !368

1022:                                             ; preds = %1009
  %1023 = icmp eq i64 %1002, %997
  br i1 %1023, label %1059, label %1024

1024:                                             ; preds = %1022
  %1025 = trunc i64 %1002 to i32
  %1026 = add i32 %992, %1025
  %1027 = and i64 %997, 56
  %1028 = icmp eq i64 %1027, 0
  br i1 %1028, label %1048, label %1029

1029:                                             ; preds = %999, %1024
  %1030 = phi i32 [ %1008, %1024 ], [ %992, %999 ]
  %1031 = phi i64 [ %1002, %1024 ], [ 0, %999 ]
  %1032 = and i64 %997, 4294967288
  %1033 = trunc i64 %1032 to i32
  %1034 = add i32 %992, %1033
  %1035 = trunc i32 %1030 to i16
  %1036 = insertelement <8 x i16> poison, i16 %1035, i64 0
  %1037 = shufflevector <8 x i16> %1036, <8 x i16> poison, <8 x i32> zeroinitializer
  %1038 = add <8 x i16> %1037, <i16 0, i16 1, i16 2, i16 3, i16 4, i16 5, i16 6, i16 7>
  br label %1039

1039:                                             ; preds = %1039, %1029
  %1040 = phi i64 [ %1031, %1029 ], [ %1043, %1039 ]
  %1041 = phi <8 x i16> [ %1038, %1029 ], [ %1044, %1039 ]
  %1042 = getelementptr inbounds i16, ptr %421, i64 %1040
  store <8 x i16> %1041, ptr %1042, align 2, !tbaa !44
  %1043 = add nuw i64 %1040, 8
  %1044 = add <8 x i16> %1041, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %1045 = icmp eq i64 %1043, %1032
  br i1 %1045, label %1046, label %1039, !llvm.loop !369

1046:                                             ; preds = %1039
  %1047 = icmp eq i64 %1032, %997
  br i1 %1047, label %1059, label %1048

1048:                                             ; preds = %994, %1024, %1046
  %1049 = phi i64 [ 0, %994 ], [ %1002, %1024 ], [ %1032, %1046 ]
  %1050 = phi i32 [ %992, %994 ], [ %1026, %1024 ], [ %1034, %1046 ]
  br label %1051

1051:                                             ; preds = %1048, %1051
  %1052 = phi i64 [ %1055, %1051 ], [ %1049, %1048 ]
  %1053 = phi i32 [ %1057, %1051 ], [ %1050, %1048 ]
  %1054 = trunc i32 %1053 to i16
  %1055 = add nuw nsw i64 %1052, 1
  %1056 = getelementptr inbounds i16, ptr %421, i64 %1052
  store i16 %1054, ptr %1056, align 2, !tbaa !44
  %1057 = add nsw i32 %1053, 1
  %1058 = icmp eq i64 %1055, %997
  br i1 %1058, label %1059, label %1051, !llvm.loop !370

1059:                                             ; preds = %1051, %1022, %1046, %989
  %1060 = phi i32 [ 0, %989 ], [ %996, %1046 ], [ %996, %1022 ], [ %996, %1051 ]
  %1061 = zext i32 %1060 to i64
  %1062 = getelementptr inbounds i16, ptr %421, i64 %1061
  %1063 = select i1 %955, ptr %237, ptr %191
  %1064 = select i1 %955, i32 %990, i32 %991
  %1065 = select i1 %955, i32 %621, i32 %620
  %1066 = icmp slt i32 %1064, %1065
  br i1 %1066, label %1067, label %1226

1067:                                             ; preds = %1059
  %1068 = sub nsw i32 %1065, %1064
  %1069 = icmp sgt i32 %1068, 6
  br i1 %1069, label %1070, label %1163

1070:                                             ; preds = %1067
  %1071 = add nsw i32 %1065, -2
  %1072 = add nsw i32 %1064, 2
  %1073 = icmp slt i32 %1072, %1071
  br i1 %1073, label %1074, label %1163

1074:                                             ; preds = %1070
  %1075 = add nsw i32 %1064, 1
  %1076 = sext i32 %1075 to i64
  %1077 = getelementptr inbounds i16, ptr %1063, i64 %1076
  %1078 = load i16, ptr %1077, align 2, !tbaa !44
  %1079 = zext i16 %1078 to i64
  %1080 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %1079
  %1081 = getelementptr inbounds %class.Vector, ptr %1080, i64 0, i32 2
  %1082 = load double, ptr %1081, align 8, !tbaa !49
  %1083 = sext i32 %1064 to i64
  %1084 = getelementptr inbounds i16, ptr %1063, i64 %1083
  %1085 = load i16, ptr %1084, align 2, !tbaa !44
  %1086 = zext i16 %1085 to i64
  %1087 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %1086
  %1088 = getelementptr inbounds %class.Vector, ptr %1087, i64 0, i32 2
  %1089 = load double, ptr %1088, align 8, !tbaa !49
  %1090 = getelementptr inbounds %class.Vector, ptr %1080, i64 0, i32 1
  %1091 = load double, ptr %1090, align 8, !tbaa !66
  %1092 = getelementptr inbounds %class.Vector, ptr %1087, i64 0, i32 1
  %1093 = load double, ptr %1092, align 8, !tbaa !66
  %1094 = load double, ptr %1080, align 8, !tbaa !67
  %1095 = load double, ptr %1087, align 8, !tbaa !67
  %1096 = sext i32 %1072 to i64
  %1097 = sext i32 %1071 to i64
  %1098 = insertelement <2 x double> poison, double %1082, i64 0
  %1099 = insertelement <2 x double> %1098, double %1089, i64 1
  %1100 = insertelement <2 x double> poison, double %1091, i64 0
  %1101 = insertelement <2 x double> %1100, double %1093, i64 1
  %1102 = insertelement <2 x double> poison, double %1094, i64 0
  %1103 = insertelement <2 x double> %1102, double %1095, i64 1
  %1104 = insertelement <2 x double> poison, double %694, i64 0
  %1105 = shufflevector <2 x double> %1104, <2 x double> poison, <2 x i32> zeroinitializer
  %1106 = shufflevector <2 x double> %691, <2 x double> poison, <2 x i32> <i32 1, i32 1>
  %1107 = shufflevector <2 x double> %691, <2 x double> poison, <2 x i32> zeroinitializer
  br label %1108

1108:                                             ; preds = %1074, %1108
  %1109 = phi i64 [ %1096, %1074 ], [ %1154, %1108 ]
  %1110 = phi i32 [ %1064, %1074 ], [ %1156, %1108 ]
  %1111 = phi i32 [ 0, %1074 ], [ %1153, %1108 ]
  %1112 = phi i16 [ %1085, %1074 ], [ %1119, %1108 ]
  %1113 = phi i16 [ %1078, %1074 ], [ %1123, %1108 ]
  %1114 = phi <2 x double> [ %1099, %1074 ], [ %1158, %1108 ]
  %1115 = phi <2 x double> [ %1101, %1074 ], [ %1160, %1108 ]
  %1116 = phi <2 x double> [ %1103, %1074 ], [ %1162, %1108 ]
  %1117 = fsub <2 x double> %1105, %1114
  %1118 = getelementptr inbounds i16, ptr %1063, i64 %1109
  %1119 = load i16, ptr %1118, align 2, !tbaa !44
  %1120 = add nsw i32 %1110, 3
  %1121 = sext i32 %1120 to i64
  %1122 = getelementptr inbounds i16, ptr %1063, i64 %1121
  %1123 = load i16, ptr %1122, align 2, !tbaa !44
  %1124 = zext i16 %1119 to i64
  %1125 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %1124
  %1126 = load double, ptr %1125, align 8, !tbaa !67
  %1127 = zext i16 %1123 to i64
  %1128 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %1127
  %1129 = load double, ptr %1128, align 8, !tbaa !67
  %1130 = getelementptr inbounds %class.Vector, ptr %1125, i64 0, i32 1
  %1131 = load double, ptr %1130, align 8, !tbaa !66
  %1132 = getelementptr inbounds %class.Vector, ptr %1128, i64 0, i32 1
  %1133 = load double, ptr %1132, align 8, !tbaa !66
  %1134 = getelementptr inbounds %class.Vector, ptr %1125, i64 0, i32 2
  %1135 = load double, ptr %1134, align 8, !tbaa !49
  %1136 = getelementptr inbounds %class.Vector, ptr %1128, i64 0, i32 2
  %1137 = load double, ptr %1136, align 8, !tbaa !49
  %1138 = fsub <2 x double> %1107, %1116
  %1139 = fmul <2 x double> %1138, %1138
  %1140 = fsub <2 x double> %1106, %1115
  %1141 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %1140, <2 x double> %1140, <2 x double> %1139)
  %1142 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %1117, <2 x double> %1117, <2 x double> %1141)
  %1143 = fcmp olt <2 x double> %1142, %657
  %1144 = zext i32 %1111 to i64
  %1145 = getelementptr inbounds i16, ptr %283, i64 %1144
  store i16 %1112, ptr %1145, align 2, !tbaa !44
  %1146 = extractelement <2 x i1> %1143, i64 1
  %1147 = zext i1 %1146 to i32
  %1148 = add nuw nsw i32 %1111, %1147
  %1149 = zext i32 %1148 to i64
  %1150 = getelementptr inbounds i16, ptr %283, i64 %1149
  store i16 %1113, ptr %1150, align 2, !tbaa !44
  %1151 = extractelement <2 x i1> %1143, i64 0
  %1152 = zext i1 %1151 to i32
  %1153 = add i32 %1148, %1152
  %1154 = add nsw i64 %1109, 2
  %1155 = icmp slt i64 %1154, %1097
  %1156 = trunc i64 %1109 to i32
  %1157 = insertelement <2 x double> poison, double %1137, i64 0
  %1158 = insertelement <2 x double> %1157, double %1135, i64 1
  %1159 = insertelement <2 x double> poison, double %1133, i64 0
  %1160 = insertelement <2 x double> %1159, double %1131, i64 1
  %1161 = insertelement <2 x double> poison, double %1129, i64 0
  %1162 = insertelement <2 x double> %1161, double %1126, i64 1
  br i1 %1155, label %1108, label %1163

1163:                                             ; preds = %1108, %1070, %1067
  %1164 = phi i32 [ 0, %1067 ], [ 0, %1070 ], [ %1153, %1108 ]
  %1165 = phi i32 [ %1064, %1067 ], [ %1064, %1070 ], [ %1156, %1108 ]
  %1166 = icmp slt i32 %1165, %1065
  br i1 %1166, label %1167, label %1172

1167:                                             ; preds = %1163
  %1168 = sext i32 %1165 to i64
  %1169 = sext i32 %1065 to i64
  %1170 = extractelement <2 x double> %691, i64 0
  %1171 = extractelement <2 x double> %691, i64 1
  br label %1177

1172:                                             ; preds = %1200, %1163
  %1173 = phi i32 [ %1164, %1163 ], [ %1201, %1200 ]
  %1174 = icmp sgt i32 %1173, 0
  br i1 %1174, label %1175, label %1226

1175:                                             ; preds = %1172
  %1176 = zext i32 %1173 to i64
  br label %1204

1177:                                             ; preds = %1167, %1200
  %1178 = phi i64 [ %1168, %1167 ], [ %1202, %1200 ]
  %1179 = phi i32 [ %1164, %1167 ], [ %1201, %1200 ]
  %1180 = getelementptr inbounds i16, ptr %1063, i64 %1178
  %1181 = load i16, ptr %1180, align 2, !tbaa !44
  %1182 = zext i16 %1181 to i64
  %1183 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %1182
  %1184 = load double, ptr %1183, align 8, !tbaa !67
  %1185 = getelementptr inbounds %class.Vector, ptr %1183, i64 0, i32 1
  %1186 = load double, ptr %1185, align 8, !tbaa !66
  %1187 = getelementptr inbounds %class.Vector, ptr %1183, i64 0, i32 2
  %1188 = load double, ptr %1187, align 8, !tbaa !49
  %1189 = fsub double %1170, %1184
  %1190 = fmul double %1189, %1189
  %1191 = fsub double %1171, %1186
  %1192 = tail call double @llvm.fmuladd.f64(double %1191, double %1191, double %1190)
  %1193 = fsub double %694, %1188
  %1194 = tail call double @llvm.fmuladd.f64(double %1193, double %1193, double %1192)
  %1195 = fcmp ugt double %1194, %23
  br i1 %1195, label %1200, label %1196

1196:                                             ; preds = %1177
  %1197 = add nsw i32 %1179, 1
  %1198 = sext i32 %1179 to i64
  %1199 = getelementptr inbounds i16, ptr %283, i64 %1198
  store i16 %1181, ptr %1199, align 2, !tbaa !44
  br label %1200

1200:                                             ; preds = %1196, %1177
  %1201 = phi i32 [ %1197, %1196 ], [ %1179, %1177 ]
  %1202 = add nsw i64 %1178, 1
  %1203 = icmp eq i64 %1202, %1169
  br i1 %1203, label %1172, label %1177

1204:                                             ; preds = %1175, %1221
  %1205 = phi i64 [ 0, %1175 ], [ %1224, %1221 ]
  %1206 = phi ptr [ %1062, %1175 ], [ %1223, %1221 ]
  %1207 = getelementptr inbounds i16, ptr %283, i64 %1205
  %1208 = load i16, ptr %1207, align 2, !tbaa !44
  %1209 = zext i16 %1208 to i64
  %1210 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %1209, i32 4
  %1211 = load i8, ptr %1210, align 1
  %1212 = and i8 %1211, 7
  store i16 %1208, ptr %1206, align 2, !tbaa !44
  %1213 = getelementptr inbounds i16, ptr %1206, i64 1
  %1214 = insertelement <2 x i16> poison, i16 %1208, i64 0
  %1215 = shufflevector <2 x i16> %1214, <2 x i16> poison, <2 x i32> zeroinitializer
  %1216 = add <2 x i16> %1215, <i16 1, i16 2>
  store <2 x i16> %1216, ptr %1213, align 2, !tbaa !44
  %1217 = icmp ult i8 %1212, 4
  br i1 %1217, label %1221, label %1218

1218:                                             ; preds = %1204
  %1219 = add <2 x i16> %1215, <i16 3, i16 4>
  %1220 = getelementptr inbounds i16, ptr %1206, i64 3
  store <2 x i16> %1219, ptr %1220, align 2, !tbaa !44
  br label %1221

1221:                                             ; preds = %1218, %1204
  %1222 = zext i8 %1212 to i64
  %1223 = getelementptr inbounds i16, ptr %1206, i64 %1222
  %1224 = add nuw nsw i64 %1205, 1
  %1225 = icmp eq i64 %1224, %1176
  br i1 %1225, label %1226, label %1204

1226:                                             ; preds = %1221, %1172, %1059
  %1227 = phi ptr [ %1062, %1059 ], [ %1062, %1172 ], [ %1223, %1221 ]
  %1228 = ptrtoint ptr %1227 to i64
  %1229 = sub i64 %1228, %640
  %1230 = lshr exact i64 %1229, 1
  %1231 = trunc i64 %1230 to i32
  %1232 = icmp eq i32 %1231, 0
  br i1 %1232, label %1244, label %1233

1233:                                             ; preds = %1226
  %1234 = shl i64 %1229, 31
  %1235 = add i64 %1234, -4294967296
  %1236 = ashr i64 %1235, 32
  %1237 = getelementptr inbounds i16, ptr %421, i64 %1236
  %1238 = load i16, ptr %1237, align 2, !tbaa !44
  %1239 = ashr i64 %1234, 32
  %1240 = getelementptr inbounds i16, ptr %421, i64 %1239
  store i16 %1238, ptr %1240, align 2, !tbaa !44
  br label %1244

1241:                                             ; preds = %940
  %1242 = add nsw i32 %670, 1
  %1243 = load i32, ptr @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4, !tbaa !5
  br label %1244

1244:                                             ; preds = %1226, %1233, %1241
  %1245 = phi i32 [ %1243, %1241 ], [ %949, %1233 ], [ %949, %1226 ]
  %1246 = phi i32 [ %1242, %1241 ], [ 0, %1233 ], [ 0, %1226 ]
  %1247 = phi i32 [ %669, %1241 ], [ %1231, %1233 ], [ 0, %1226 ]
  %1248 = phi i32 [ %668, %1241 ], [ %990, %1233 ], [ %990, %1226 ]
  %1249 = phi i32 [ %667, %1241 ], [ %991, %1233 ], [ %991, %1226 ]
  %1250 = icmp eq i32 %1245, 0
  br i1 %1250, label %1255, label %1251

1251:                                             ; preds = %1244
  %1252 = load i32, ptr %675, align 4
  %1253 = and i32 %1252, 1073741824
  %1254 = icmp ne i32 %1253, 0
  br label %1255

1255:                                             ; preds = %1251, %1244
  %1256 = phi i1 [ false, %1244 ], [ %1254, %1251 ]
  %1257 = load i32, ptr %13, align 8, !tbaa !17
  %1258 = add nsw i32 %641, %1257
  %1259 = load i32, ptr %642, align 4, !tbaa !68
  %1260 = icmp sgt i32 %1259, %1258
  br i1 %1260, label %1276, label %1261

1261:                                             ; preds = %1255, %1261
  %1262 = phi i32 [ %1264, %1261 ], [ %1259, %1255 ]
  %1263 = ashr i32 %1262, 1
  %1264 = add nsw i32 %1263, %1262
  %1265 = icmp sgt i32 %1264, %1258
  br i1 %1265, label %1266, label %1261

1266:                                             ; preds = %1261
  %1267 = sext i32 %1264 to i64
  %1268 = icmp slt i32 %1264, 0
  %1269 = shl nsw i64 %1267, 1
  %1270 = select i1 %1268, i64 -1, i64 %1269
  %1271 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %1270) #9
  %1272 = load ptr, ptr %8, align 8, !tbaa !46
  %1273 = sext i32 %1257 to i64
  %1274 = shl nsw i64 %1273, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 2 %1271, ptr align 2 %1272, i64 %1274, i1 false)
  %1275 = icmp eq ptr %1272, null
  br i1 %1275, label %1280, label %1278

1276:                                             ; preds = %1255
  %1277 = load ptr, ptr %8, align 8, !tbaa !46
  br label %1282

1278:                                             ; preds = %1266
  tail call void @_ZdaPv(ptr noundef nonnull %1272) #10
  %1279 = load i32, ptr %13, align 8, !tbaa !17
  br label %1280

1280:                                             ; preds = %1278, %1266
  %1281 = phi i32 [ %1279, %1278 ], [ %1257, %1266 ]
  store ptr %1271, ptr %8, align 8, !tbaa !46
  store i32 %1264, ptr %642, align 4, !tbaa !68
  br label %1282

1282:                                             ; preds = %1276, %1280
  %1283 = phi i32 [ %1257, %1276 ], [ %1281, %1280 ]
  %1284 = phi ptr [ %1277, %1276 ], [ %1271, %1280 ]
  %1285 = ptrtoint ptr %1284 to i64
  %1286 = add nsw i32 %1283, 1
  %1287 = sext i32 %1286 to i64
  %1288 = getelementptr inbounds i16, ptr %1284, i64 %1287
  %1289 = load i32, ptr @_ZN20ComputeNonbondedUtil17pairInteractionOnE, align 4, !tbaa !5
  %1290 = icmp eq i32 %1289, 0
  br i1 %1290, label %1472, label %1291

1291:                                             ; preds = %1282
  %1292 = getelementptr inbounds %struct.CompAtom, ptr %39, i64 %673, i32 3
  %1293 = load i8, ptr %1292, align 2, !tbaa !301
  %1294 = zext i8 %1293 to i32
  %1295 = load i32, ptr @_ZN20ComputeNonbondedUtil19pairInteractionSelfE, align 4, !tbaa !5
  %1296 = icmp eq i32 %1295, 0
  br i1 %1296, label %1351, label %1297

1297:                                             ; preds = %1291
  %1298 = icmp eq i8 %1293, 1
  br i1 %1298, label %1299, label %2524

1299:                                             ; preds = %1297
  %1300 = icmp slt i32 %1246, %1247
  br i1 %1300, label %1301, label %1412

1301:                                             ; preds = %1299
  %1302 = sext i32 %1246 to i64
  %1303 = sext i32 %1247 to i64
  %1304 = sub nsw i64 %1303, %1302
  %1305 = xor i64 %1302, -1
  %1306 = and i64 %1304, 1
  %1307 = icmp eq i64 %1306, 0
  br i1 %1307, label %1319, label %1308

1308:                                             ; preds = %1301
  %1309 = getelementptr inbounds i16, ptr %421, i64 %1302
  %1310 = load i16, ptr %1309, align 2, !tbaa !44
  %1311 = zext i16 %1310 to i64
  %1312 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %1311, i32 3
  %1313 = load i8, ptr %1312, align 2, !tbaa !301
  %1314 = icmp eq i8 %1313, 1
  br i1 %1314, label %1315, label %1316

1315:                                             ; preds = %1308
  store i16 %1310, ptr %467, align 2, !tbaa !44
  br label %1316

1316:                                             ; preds = %1315, %1308
  %1317 = phi ptr [ %658, %1315 ], [ %467, %1308 ]
  %1318 = add nsw i64 %1302, 1
  br label %1319

1319:                                             ; preds = %1316, %1301
  %1320 = phi ptr [ undef, %1301 ], [ %1317, %1316 ]
  %1321 = phi i64 [ %1302, %1301 ], [ %1318, %1316 ]
  %1322 = phi ptr [ %467, %1301 ], [ %1317, %1316 ]
  %1323 = sub nsw i64 0, %1303
  %1324 = icmp eq i64 %1305, %1323
  br i1 %1324, label %1412, label %1325

1325:                                             ; preds = %1319, %1347
  %1326 = phi i64 [ %1349, %1347 ], [ %1321, %1319 ]
  %1327 = phi ptr [ %1348, %1347 ], [ %1322, %1319 ]
  %1328 = getelementptr inbounds i16, ptr %421, i64 %1326
  %1329 = load i16, ptr %1328, align 2, !tbaa !44
  %1330 = zext i16 %1329 to i64
  %1331 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %1330, i32 3
  %1332 = load i8, ptr %1331, align 2, !tbaa !301
  %1333 = icmp eq i8 %1332, 1
  br i1 %1333, label %1334, label %1336

1334:                                             ; preds = %1325
  %1335 = getelementptr inbounds i16, ptr %1327, i64 1
  store i16 %1329, ptr %1327, align 2, !tbaa !44
  br label %1336

1336:                                             ; preds = %1334, %1325
  %1337 = phi ptr [ %1335, %1334 ], [ %1327, %1325 ]
  %1338 = add nsw i64 %1326, 1
  %1339 = getelementptr inbounds i16, ptr %421, i64 %1338
  %1340 = load i16, ptr %1339, align 2, !tbaa !44
  %1341 = zext i16 %1340 to i64
  %1342 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %1341, i32 3
  %1343 = load i8, ptr %1342, align 2, !tbaa !301
  %1344 = icmp eq i8 %1343, 1
  br i1 %1344, label %1345, label %1347

1345:                                             ; preds = %1336
  %1346 = getelementptr inbounds i16, ptr %1337, i64 1
  store i16 %1340, ptr %1337, align 2, !tbaa !44
  br label %1347

1347:                                             ; preds = %1345, %1336
  %1348 = phi ptr [ %1346, %1345 ], [ %1337, %1336 ]
  %1349 = add nsw i64 %1326, 2
  %1350 = icmp eq i64 %1349, %1303
  br i1 %1350, label %1412, label %1325

1351:                                             ; preds = %1291
  %1352 = add i8 %1293, -3
  %1353 = icmp ult i8 %1352, -2
  br i1 %1353, label %2524, label %1354

1354:                                             ; preds = %1351
  %1355 = icmp slt i32 %1246, %1247
  br i1 %1355, label %1356, label %1412

1356:                                             ; preds = %1354
  %1357 = sext i32 %1246 to i64
  %1358 = sext i32 %1247 to i64
  %1359 = sub nsw i64 %1358, %1357
  %1360 = xor i64 %1357, -1
  %1361 = and i64 %1359, 1
  %1362 = icmp eq i64 %1361, 0
  br i1 %1362, label %1376, label %1363

1363:                                             ; preds = %1356
  %1364 = getelementptr inbounds i16, ptr %421, i64 %1357
  %1365 = load i16, ptr %1364, align 2, !tbaa !44
  %1366 = zext i16 %1365 to i64
  %1367 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %1366, i32 3
  %1368 = load i8, ptr %1367, align 2, !tbaa !301
  %1369 = zext i8 %1368 to i32
  %1370 = add nuw nsw i32 %1369, %1294
  %1371 = icmp eq i32 %1370, 3
  br i1 %1371, label %1372, label %1373

1372:                                             ; preds = %1363
  store i16 %1365, ptr %467, align 2, !tbaa !44
  br label %1373

1373:                                             ; preds = %1372, %1363
  %1374 = phi ptr [ %659, %1372 ], [ %467, %1363 ]
  %1375 = add nsw i64 %1357, 1
  br label %1376

1376:                                             ; preds = %1373, %1356
  %1377 = phi ptr [ undef, %1356 ], [ %1374, %1373 ]
  %1378 = phi i64 [ %1357, %1356 ], [ %1375, %1373 ]
  %1379 = phi ptr [ %467, %1356 ], [ %1374, %1373 ]
  %1380 = sub nsw i64 0, %1358
  %1381 = icmp eq i64 %1360, %1380
  br i1 %1381, label %1412, label %1382

1382:                                             ; preds = %1376, %1408
  %1383 = phi i64 [ %1410, %1408 ], [ %1378, %1376 ]
  %1384 = phi ptr [ %1409, %1408 ], [ %1379, %1376 ]
  %1385 = getelementptr inbounds i16, ptr %421, i64 %1383
  %1386 = load i16, ptr %1385, align 2, !tbaa !44
  %1387 = zext i16 %1386 to i64
  %1388 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %1387, i32 3
  %1389 = load i8, ptr %1388, align 2, !tbaa !301
  %1390 = zext i8 %1389 to i32
  %1391 = add nuw nsw i32 %1390, %1294
  %1392 = icmp eq i32 %1391, 3
  br i1 %1392, label %1393, label %1395

1393:                                             ; preds = %1382
  %1394 = getelementptr inbounds i16, ptr %1384, i64 1
  store i16 %1386, ptr %1384, align 2, !tbaa !44
  br label %1395

1395:                                             ; preds = %1393, %1382
  %1396 = phi ptr [ %1394, %1393 ], [ %1384, %1382 ]
  %1397 = add nsw i64 %1383, 1
  %1398 = getelementptr inbounds i16, ptr %421, i64 %1397
  %1399 = load i16, ptr %1398, align 2, !tbaa !44
  %1400 = zext i16 %1399 to i64
  %1401 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %1400, i32 3
  %1402 = load i8, ptr %1401, align 2, !tbaa !301
  %1403 = zext i8 %1402 to i32
  %1404 = add nuw nsw i32 %1403, %1294
  %1405 = icmp eq i32 %1404, 3
  br i1 %1405, label %1406, label %1408

1406:                                             ; preds = %1395
  %1407 = getelementptr inbounds i16, ptr %1396, i64 1
  store i16 %1399, ptr %1396, align 2, !tbaa !44
  br label %1408

1408:                                             ; preds = %1406, %1395
  %1409 = phi ptr [ %1407, %1406 ], [ %1396, %1395 ]
  %1410 = add nsw i64 %1383, 2
  %1411 = icmp eq i64 %1410, %1358
  br i1 %1411, label %1412, label %1382

1412:                                             ; preds = %1319, %1347, %1376, %1408, %1299, %1354
  %1413 = phi ptr [ %467, %1354 ], [ %467, %1299 ], [ %1377, %1376 ], [ %1409, %1408 ], [ %1320, %1319 ], [ %1348, %1347 ]
  %1414 = ptrtoint ptr %1413 to i64
  %1415 = sub i64 %1414, %643
  %1416 = lshr exact i64 %1415, 1
  %1417 = trunc i64 %1416 to i32
  %1418 = icmp sgt i32 %1417, 0
  br i1 %1418, label %1419, label %1693

1419:                                             ; preds = %1412
  %1420 = and i64 %1416, 4294967295
  %1421 = extractelement <2 x double> %691, i64 0
  %1422 = extractelement <2 x double> %691, i64 1
  br label %1423

1423:                                             ; preds = %1419, %1467
  %1424 = phi i64 [ 0, %1419 ], [ %1470, %1467 ]
  %1425 = phi ptr [ %467, %1419 ], [ %1469, %1467 ]
  %1426 = phi ptr [ %1288, %1419 ], [ %1468, %1467 ]
  %1427 = getelementptr inbounds i16, ptr %467, i64 %1424
  %1428 = load i16, ptr %1427, align 2, !tbaa !44
  %1429 = zext i16 %1428 to i64
  %1430 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %1429
  %1431 = load double, ptr %1430, align 8, !tbaa !67
  %1432 = fsub double %1421, %1431
  %1433 = fmul double %1432, %1432
  %1434 = getelementptr inbounds %class.Vector, ptr %1430, i64 0, i32 1
  %1435 = load double, ptr %1434, align 8, !tbaa !66
  %1436 = fsub double %1422, %1435
  %1437 = tail call double @llvm.fmuladd.f64(double %1436, double %1436, double %1433)
  %1438 = getelementptr inbounds %class.Vector, ptr %1430, i64 0, i32 2
  %1439 = load double, ptr %1438, align 8, !tbaa !49
  %1440 = fsub double %694, %1439
  %1441 = tail call double @llvm.fmuladd.f64(double %1440, double %1440, double %1437)
  br i1 %1256, label %1442, label %1449

1442:                                             ; preds = %1423
  %1443 = getelementptr inbounds %struct.CompAtomExt, ptr %45, i64 %1429
  %1444 = load i32, ptr %1443, align 4
  %1445 = and i32 %1444, 1073741824
  %1446 = icmp ne i32 %1445, 0
  %1447 = fcmp ugt double %1441, %20
  %1448 = select i1 %1446, i1 true, i1 %1447
  br i1 %1448, label %1467, label %1454

1449:                                             ; preds = %1423
  %1450 = fcmp ugt double %1441, %20
  br i1 %1450, label %1467, label %1451

1451:                                             ; preds = %1449
  %1452 = getelementptr inbounds %struct.CompAtomExt, ptr %45, i64 %1429
  %1453 = load i32, ptr %1452, align 4
  br label %1454

1454:                                             ; preds = %1451, %1442
  %1455 = phi i32 [ %1453, %1451 ], [ %1444, %1442 ]
  %1456 = shl i32 %1455, 2
  %1457 = ashr exact i32 %1456, 2
  %1458 = icmp slt i32 %1457, %704
  %1459 = icmp sgt i32 %1457, %706
  %1460 = select i1 %1458, i1 true, i1 %1459
  %1461 = select i1 %1460, ptr %1426, ptr %1425
  %1462 = zext i1 %1460 to i64
  %1463 = getelementptr inbounds i16, ptr %1426, i64 %1462
  %1464 = xor i1 %1460, true
  %1465 = zext i1 %1464 to i64
  %1466 = getelementptr inbounds i16, ptr %1425, i64 %1465
  store i16 %1428, ptr %1461, align 2, !tbaa !44
  br label %1467

1467:                                             ; preds = %1454, %1449, %1442
  %1468 = phi ptr [ %1426, %1442 ], [ %1426, %1449 ], [ %1463, %1454 ]
  %1469 = phi ptr [ %1425, %1442 ], [ %1425, %1449 ], [ %1466, %1454 ]
  %1470 = add nuw nsw i64 %1424, 1
  %1471 = icmp eq i64 %1470, %1420
  br i1 %1471, label %1693, label %1423

1472:                                             ; preds = %1282
  %1473 = icmp slt i32 %1246, %1247
  br i1 %1256, label %1474, label %1522

1474:                                             ; preds = %1472
  br i1 %1473, label %1475, label %1693

1475:                                             ; preds = %1474
  %1476 = sext i32 %1246 to i64
  %1477 = sext i32 %1247 to i64
  %1478 = extractelement <2 x double> %691, i64 0
  %1479 = extractelement <2 x double> %691, i64 1
  br label %1480

1480:                                             ; preds = %1475, %1517
  %1481 = phi i64 [ %1476, %1475 ], [ %1520, %1517 ]
  %1482 = phi ptr [ %467, %1475 ], [ %1519, %1517 ]
  %1483 = phi ptr [ %1288, %1475 ], [ %1518, %1517 ]
  %1484 = getelementptr inbounds i16, ptr %421, i64 %1481
  %1485 = load i16, ptr %1484, align 2, !tbaa !44
  %1486 = zext i16 %1485 to i64
  %1487 = getelementptr inbounds %struct.CompAtomExt, ptr %45, i64 %1486
  %1488 = load i32, ptr %1487, align 4
  %1489 = and i32 %1488, 1073741824
  %1490 = icmp eq i32 %1489, 0
  br i1 %1490, label %1491, label %1517

1491:                                             ; preds = %1480
  %1492 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %1486
  %1493 = getelementptr inbounds %class.Vector, ptr %1492, i64 0, i32 2
  %1494 = load double, ptr %1493, align 8, !tbaa !49
  %1495 = fsub double %694, %1494
  %1496 = getelementptr inbounds %class.Vector, ptr %1492, i64 0, i32 1
  %1497 = load double, ptr %1496, align 8, !tbaa !66
  %1498 = fsub double %1479, %1497
  %1499 = load double, ptr %1492, align 8, !tbaa !67
  %1500 = fsub double %1478, %1499
  %1501 = fmul double %1500, %1500
  %1502 = tail call double @llvm.fmuladd.f64(double %1498, double %1498, double %1501)
  %1503 = tail call double @llvm.fmuladd.f64(double %1495, double %1495, double %1502)
  %1504 = fcmp ugt double %1503, %20
  br i1 %1504, label %1517, label %1505

1505:                                             ; preds = %1491
  %1506 = shl i32 %1488, 2
  %1507 = ashr exact i32 %1506, 2
  %1508 = icmp slt i32 %1507, %704
  %1509 = icmp sgt i32 %1507, %706
  %1510 = select i1 %1508, i1 true, i1 %1509
  %1511 = select i1 %1510, ptr %1483, ptr %1482
  %1512 = zext i1 %1510 to i64
  %1513 = getelementptr inbounds i16, ptr %1483, i64 %1512
  %1514 = xor i1 %1510, true
  %1515 = zext i1 %1514 to i64
  %1516 = getelementptr inbounds i16, ptr %1482, i64 %1515
  store i16 %1485, ptr %1511, align 2, !tbaa !44
  br label %1517

1517:                                             ; preds = %1505, %1491, %1480
  %1518 = phi ptr [ %1483, %1480 ], [ %1483, %1491 ], [ %1513, %1505 ]
  %1519 = phi ptr [ %1482, %1480 ], [ %1482, %1491 ], [ %1516, %1505 ]
  %1520 = add nsw i64 %1481, 1
  %1521 = icmp eq i64 %1520, %1477
  br i1 %1521, label %1693, label %1480

1522:                                             ; preds = %1472
  br i1 %1473, label %1523, label %1693

1523:                                             ; preds = %1522
  %1524 = sub nsw i32 %1247, %1246
  %1525 = icmp sgt i32 %1524, 6
  br i1 %1525, label %1526, label %1644

1526:                                             ; preds = %1523
  %1527 = add nsw i32 %1247, -2
  %1528 = add nsw i32 %1246, 2
  %1529 = icmp slt i32 %1528, %1527
  br i1 %1529, label %1530, label %1644

1530:                                             ; preds = %1526
  %1531 = sext i32 %1246 to i64
  %1532 = getelementptr inbounds i16, ptr %421, i64 %1531
  %1533 = load i16, ptr %1532, align 2, !tbaa !44
  %1534 = zext i16 %1533 to i64
  %1535 = getelementptr inbounds %struct.CompAtomExt, ptr %45, i64 %1534
  %1536 = load i32, ptr %1535, align 4
  %1537 = add nsw i32 %1246, 1
  %1538 = sext i32 %1537 to i64
  %1539 = getelementptr inbounds i16, ptr %421, i64 %1538
  %1540 = load i16, ptr %1539, align 2, !tbaa !44
  %1541 = zext i16 %1540 to i64
  %1542 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %1541
  %1543 = getelementptr inbounds %class.Vector, ptr %1542, i64 0, i32 2
  %1544 = load double, ptr %1543, align 8, !tbaa !49
  %1545 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %1534
  %1546 = getelementptr inbounds %class.Vector, ptr %1545, i64 0, i32 2
  %1547 = load double, ptr %1546, align 8, !tbaa !49
  %1548 = getelementptr inbounds %class.Vector, ptr %1542, i64 0, i32 1
  %1549 = load double, ptr %1548, align 8, !tbaa !66
  %1550 = getelementptr inbounds %class.Vector, ptr %1545, i64 0, i32 1
  %1551 = load double, ptr %1550, align 8, !tbaa !66
  %1552 = load double, ptr %1542, align 8, !tbaa !67
  %1553 = load double, ptr %1545, align 8, !tbaa !67
  %1554 = sext i32 %1528 to i64
  %1555 = sext i32 %1527 to i64
  %1556 = extractelement <2 x double> %691, i64 0
  %1557 = extractelement <2 x double> %691, i64 1
  br label %1558

1558:                                             ; preds = %1530, %1638
  %1559 = phi i64 [ %1554, %1530 ], [ %1641, %1638 ]
  %1560 = phi i64 [ %1541, %1530 ], [ %1598, %1638 ]
  %1561 = phi i32 [ %1536, %1530 ], [ %1626, %1638 ]
  %1562 = phi ptr [ %467, %1530 ], [ %1640, %1638 ]
  %1563 = phi ptr [ %1288, %1530 ], [ %1639, %1638 ]
  %1564 = phi i32 [ %1246, %1530 ], [ %1643, %1638 ]
  %1565 = phi i16 [ %1533, %1530 ], [ %1590, %1638 ]
  %1566 = phi i16 [ %1540, %1530 ], [ %1594, %1638 ]
  %1567 = phi double [ %1553, %1530 ], [ %1597, %1638 ]
  %1568 = phi double [ %1552, %1530 ], [ %1600, %1638 ]
  %1569 = phi double [ %1551, %1530 ], [ %1602, %1638 ]
  %1570 = phi double [ %1549, %1530 ], [ %1604, %1638 ]
  %1571 = phi double [ %1547, %1530 ], [ %1606, %1638 ]
  %1572 = phi double [ %1544, %1530 ], [ %1608, %1638 ]
  %1573 = getelementptr inbounds %struct.CompAtomExt, ptr %45, i64 %1560
  %1574 = load i32, ptr %1573, align 4
  %1575 = shl i32 %1574, 2
  %1576 = ashr exact i32 %1575, 2
  %1577 = fsub double %1556, %1567
  %1578 = fsub double %1556, %1568
  %1579 = fmul double %1577, %1577
  %1580 = fmul double %1578, %1578
  %1581 = fsub double %1557, %1569
  %1582 = fsub double %1557, %1570
  %1583 = tail call double @llvm.fmuladd.f64(double %1581, double %1581, double %1579)
  %1584 = tail call double @llvm.fmuladd.f64(double %1582, double %1582, double %1580)
  %1585 = fsub double %694, %1571
  %1586 = fsub double %694, %1572
  %1587 = tail call double @llvm.fmuladd.f64(double %1585, double %1585, double %1583)
  %1588 = tail call double @llvm.fmuladd.f64(double %1586, double %1586, double %1584)
  %1589 = getelementptr inbounds i16, ptr %421, i64 %1559
  %1590 = load i16, ptr %1589, align 2, !tbaa !44
  %1591 = add nsw i32 %1564, 3
  %1592 = sext i32 %1591 to i64
  %1593 = getelementptr inbounds i16, ptr %421, i64 %1592
  %1594 = load i16, ptr %1593, align 2, !tbaa !44
  %1595 = zext i16 %1590 to i64
  %1596 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %1595
  %1597 = load double, ptr %1596, align 8, !tbaa !67
  %1598 = zext i16 %1594 to i64
  %1599 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %1598
  %1600 = load double, ptr %1599, align 8, !tbaa !67
  %1601 = getelementptr inbounds %class.Vector, ptr %1596, i64 0, i32 1
  %1602 = load double, ptr %1601, align 8, !tbaa !66
  %1603 = getelementptr inbounds %class.Vector, ptr %1599, i64 0, i32 1
  %1604 = load double, ptr %1603, align 8, !tbaa !66
  %1605 = getelementptr inbounds %class.Vector, ptr %1596, i64 0, i32 2
  %1606 = load double, ptr %1605, align 8, !tbaa !49
  %1607 = getelementptr inbounds %class.Vector, ptr %1599, i64 0, i32 2
  %1608 = load double, ptr %1607, align 8, !tbaa !49
  %1609 = fcmp ugt double %1587, %20
  br i1 %1609, label %1622, label %1610

1610:                                             ; preds = %1558
  %1611 = shl i32 %1561, 2
  %1612 = ashr exact i32 %1611, 2
  %1613 = icmp slt i32 %1612, %704
  %1614 = icmp sgt i32 %1612, %706
  %1615 = select i1 %1613, i1 true, i1 %1614
  %1616 = select i1 %1615, ptr %1563, ptr %1562
  %1617 = zext i1 %1615 to i64
  %1618 = getelementptr inbounds i16, ptr %1563, i64 %1617
  %1619 = xor i1 %1615, true
  %1620 = zext i1 %1619 to i64
  %1621 = getelementptr inbounds i16, ptr %1562, i64 %1620
  store i16 %1565, ptr %1616, align 2, !tbaa !44
  br label %1622

1622:                                             ; preds = %1610, %1558
  %1623 = phi ptr [ %1563, %1558 ], [ %1618, %1610 ]
  %1624 = phi ptr [ %1562, %1558 ], [ %1621, %1610 ]
  %1625 = getelementptr inbounds %struct.CompAtomExt, ptr %45, i64 %1595
  %1626 = load i32, ptr %1625, align 4
  %1627 = fcmp ugt double %1588, %20
  br i1 %1627, label %1638, label %1628

1628:                                             ; preds = %1622
  %1629 = icmp slt i32 %1576, %704
  %1630 = icmp sgt i32 %1576, %706
  %1631 = select i1 %1629, i1 true, i1 %1630
  %1632 = select i1 %1631, ptr %1623, ptr %1624
  %1633 = zext i1 %1631 to i64
  %1634 = getelementptr inbounds i16, ptr %1623, i64 %1633
  %1635 = xor i1 %1631, true
  %1636 = zext i1 %1635 to i64
  %1637 = getelementptr inbounds i16, ptr %1624, i64 %1636
  store i16 %1566, ptr %1632, align 2, !tbaa !44
  br label %1638

1638:                                             ; preds = %1628, %1622
  %1639 = phi ptr [ %1623, %1622 ], [ %1634, %1628 ]
  %1640 = phi ptr [ %1624, %1622 ], [ %1637, %1628 ]
  %1641 = add nsw i64 %1559, 2
  %1642 = icmp slt i64 %1641, %1555
  %1643 = trunc i64 %1559 to i32
  br i1 %1642, label %1558, label %1644

1644:                                             ; preds = %1638, %1526, %1523
  %1645 = phi i32 [ %1246, %1523 ], [ %1246, %1526 ], [ %1643, %1638 ]
  %1646 = phi ptr [ %1288, %1523 ], [ %1288, %1526 ], [ %1639, %1638 ]
  %1647 = phi ptr [ %467, %1523 ], [ %467, %1526 ], [ %1640, %1638 ]
  %1648 = icmp slt i32 %1645, %1247
  br i1 %1648, label %1649, label %1693

1649:                                             ; preds = %1644
  %1650 = sext i32 %1645 to i64
  %1651 = sext i32 %1247 to i64
  %1652 = extractelement <2 x double> %691, i64 0
  %1653 = extractelement <2 x double> %691, i64 1
  br label %1654

1654:                                             ; preds = %1649, %1688
  %1655 = phi i64 [ %1650, %1649 ], [ %1691, %1688 ]
  %1656 = phi ptr [ %1647, %1649 ], [ %1690, %1688 ]
  %1657 = phi ptr [ %1646, %1649 ], [ %1689, %1688 ]
  %1658 = getelementptr inbounds i16, ptr %421, i64 %1655
  %1659 = load i16, ptr %1658, align 2, !tbaa !44
  %1660 = zext i16 %1659 to i64
  %1661 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %1660
  %1662 = load double, ptr %1661, align 8, !tbaa !67
  %1663 = getelementptr inbounds %class.Vector, ptr %1661, i64 0, i32 1
  %1664 = load double, ptr %1663, align 8, !tbaa !66
  %1665 = getelementptr inbounds %class.Vector, ptr %1661, i64 0, i32 2
  %1666 = load double, ptr %1665, align 8, !tbaa !49
  %1667 = fsub double %1652, %1662
  %1668 = fmul double %1667, %1667
  %1669 = fsub double %1653, %1664
  %1670 = tail call double @llvm.fmuladd.f64(double %1669, double %1669, double %1668)
  %1671 = fsub double %694, %1666
  %1672 = tail call double @llvm.fmuladd.f64(double %1671, double %1671, double %1670)
  %1673 = fcmp ugt double %1672, %20
  br i1 %1673, label %1688, label %1674

1674:                                             ; preds = %1654
  %1675 = getelementptr inbounds %struct.CompAtomExt, ptr %45, i64 %1660
  %1676 = load i32, ptr %1675, align 4
  %1677 = shl i32 %1676, 2
  %1678 = ashr exact i32 %1677, 2
  %1679 = icmp slt i32 %1678, %704
  %1680 = icmp sgt i32 %1678, %706
  %1681 = select i1 %1679, i1 true, i1 %1680
  %1682 = select i1 %1681, ptr %1657, ptr %1656
  %1683 = zext i1 %1681 to i64
  %1684 = getelementptr inbounds i16, ptr %1657, i64 %1683
  %1685 = xor i1 %1681, true
  %1686 = zext i1 %1685 to i64
  %1687 = getelementptr inbounds i16, ptr %1656, i64 %1686
  store i16 %1659, ptr %1682, align 2, !tbaa !44
  br label %1688

1688:                                             ; preds = %1674, %1654
  %1689 = phi ptr [ %1657, %1654 ], [ %1684, %1674 ]
  %1690 = phi ptr [ %1656, %1654 ], [ %1687, %1674 ]
  %1691 = add nsw i64 %1655, 1
  %1692 = icmp eq i64 %1691, %1651
  br i1 %1692, label %1693, label %1654

1693:                                             ; preds = %1467, %1688, %1517, %1412, %1644, %1474, %1522
  %1694 = phi ptr [ %1288, %1522 ], [ %1288, %1474 ], [ %1646, %1644 ], [ %1288, %1412 ], [ %1518, %1517 ], [ %1689, %1688 ], [ %1468, %1467 ]
  %1695 = phi ptr [ %467, %1522 ], [ %467, %1474 ], [ %1647, %1644 ], [ %467, %1412 ], [ %1519, %1517 ], [ %1690, %1688 ], [ %1469, %1467 ]
  %1696 = ptrtoint ptr %1695 to i64
  %1697 = sub i64 %1696, %643
  %1698 = lshr exact i64 %1697, 1
  %1699 = trunc i64 %1698 to i32
  %1700 = icmp sgt i32 %1699, 0
  br i1 %1700, label %1701, label %1801

1701:                                             ; preds = %1693
  %1702 = and i64 %1698, 4294967295
  %1703 = and i64 %1698, 1
  %1704 = icmp eq i64 %1702, 1
  br i1 %1704, label %1769, label %1705

1705:                                             ; preds = %1701
  %1706 = sub nsw i64 %1702, %1703
  br label %1707

1707:                                             ; preds = %1762, %1705
  %1708 = phi i64 [ 0, %1705 ], [ %1766, %1762 ]
  %1709 = phi ptr [ %1694, %1705 ], [ %1765, %1762 ]
  %1710 = phi ptr [ %329, %1705 ], [ %1764, %1762 ]
  %1711 = phi ptr [ %375, %1705 ], [ %1763, %1762 ]
  %1712 = phi i64 [ 0, %1705 ], [ %1767, %1762 ]
  %1713 = getelementptr inbounds i16, ptr %467, i64 %1708
  %1714 = load i16, ptr %1713, align 2, !tbaa !44
  %1715 = zext i16 %1714 to i64
  %1716 = getelementptr inbounds %struct.CompAtomExt, ptr %45, i64 %1715
  %1717 = load i32, ptr %1716, align 4
  %1718 = shl i32 %1717, 2
  %1719 = ashr exact i32 %1718, 2
  %1720 = sext i32 %1719 to i64
  %1721 = getelementptr inbounds i8, ptr %941, i64 %1720
  %1722 = load i8, ptr %1721, align 1, !tbaa !57
  %1723 = sext i8 %1722 to i32
  switch i32 %1723, label %1735 [
    i32 0, label %1724
    i32 1, label %1726
    i32 2, label %1728
  ]

1724:                                             ; preds = %1707
  %1725 = getelementptr inbounds i16, ptr %1709, i64 1
  br label %1730

1726:                                             ; preds = %1707
  %1727 = getelementptr inbounds i16, ptr %1710, i64 1
  br label %1730

1728:                                             ; preds = %1707
  %1729 = getelementptr inbounds i16, ptr %1711, i64 1
  br label %1730

1730:                                             ; preds = %1724, %1726, %1728
  %1731 = phi ptr [ %1711, %1728 ], [ %1710, %1726 ], [ %1709, %1724 ]
  %1732 = phi ptr [ %1729, %1728 ], [ %1711, %1726 ], [ %1711, %1724 ]
  %1733 = phi ptr [ %1710, %1728 ], [ %1727, %1726 ], [ %1710, %1724 ]
  %1734 = phi ptr [ %1709, %1728 ], [ %1709, %1726 ], [ %1725, %1724 ]
  store i16 %1714, ptr %1731, align 2, !tbaa !44
  br label %1735

1735:                                             ; preds = %1730, %1707
  %1736 = phi ptr [ %1711, %1707 ], [ %1732, %1730 ]
  %1737 = phi ptr [ %1710, %1707 ], [ %1733, %1730 ]
  %1738 = phi ptr [ %1709, %1707 ], [ %1734, %1730 ]
  %1739 = or i64 %1708, 1
  %1740 = getelementptr inbounds i16, ptr %467, i64 %1739
  %1741 = load i16, ptr %1740, align 2, !tbaa !44
  %1742 = zext i16 %1741 to i64
  %1743 = getelementptr inbounds %struct.CompAtomExt, ptr %45, i64 %1742
  %1744 = load i32, ptr %1743, align 4
  %1745 = shl i32 %1744, 2
  %1746 = ashr exact i32 %1745, 2
  %1747 = sext i32 %1746 to i64
  %1748 = getelementptr inbounds i8, ptr %941, i64 %1747
  %1749 = load i8, ptr %1748, align 1, !tbaa !57
  %1750 = sext i8 %1749 to i32
  switch i32 %1750, label %1762 [
    i32 0, label %1755
    i32 1, label %1753
    i32 2, label %1751
  ]

1751:                                             ; preds = %1735
  %1752 = getelementptr inbounds i16, ptr %1736, i64 1
  br label %1757

1753:                                             ; preds = %1735
  %1754 = getelementptr inbounds i16, ptr %1737, i64 1
  br label %1757

1755:                                             ; preds = %1735
  %1756 = getelementptr inbounds i16, ptr %1738, i64 1
  br label %1757

1757:                                             ; preds = %1755, %1753, %1751
  %1758 = phi ptr [ %1736, %1751 ], [ %1737, %1753 ], [ %1738, %1755 ]
  %1759 = phi ptr [ %1752, %1751 ], [ %1736, %1753 ], [ %1736, %1755 ]
  %1760 = phi ptr [ %1737, %1751 ], [ %1754, %1753 ], [ %1737, %1755 ]
  %1761 = phi ptr [ %1738, %1751 ], [ %1738, %1753 ], [ %1756, %1755 ]
  store i16 %1741, ptr %1758, align 2, !tbaa !44
  br label %1762

1762:                                             ; preds = %1757, %1735
  %1763 = phi ptr [ %1736, %1735 ], [ %1759, %1757 ]
  %1764 = phi ptr [ %1737, %1735 ], [ %1760, %1757 ]
  %1765 = phi ptr [ %1738, %1735 ], [ %1761, %1757 ]
  %1766 = add nuw nsw i64 %1708, 2
  %1767 = add i64 %1712, 2
  %1768 = icmp eq i64 %1767, %1706
  br i1 %1768, label %1769, label %1707

1769:                                             ; preds = %1762, %1701
  %1770 = phi ptr [ undef, %1701 ], [ %1763, %1762 ]
  %1771 = phi ptr [ undef, %1701 ], [ %1764, %1762 ]
  %1772 = phi ptr [ undef, %1701 ], [ %1765, %1762 ]
  %1773 = phi i64 [ 0, %1701 ], [ %1766, %1762 ]
  %1774 = phi ptr [ %1694, %1701 ], [ %1765, %1762 ]
  %1775 = phi ptr [ %329, %1701 ], [ %1764, %1762 ]
  %1776 = phi ptr [ %375, %1701 ], [ %1763, %1762 ]
  %1777 = icmp eq i64 %1703, 0
  br i1 %1777, label %1801, label %1778

1778:                                             ; preds = %1769
  %1779 = getelementptr inbounds i16, ptr %467, i64 %1773
  %1780 = load i16, ptr %1779, align 2, !tbaa !44
  %1781 = zext i16 %1780 to i64
  %1782 = getelementptr inbounds %struct.CompAtomExt, ptr %45, i64 %1781
  %1783 = load i32, ptr %1782, align 4
  %1784 = shl i32 %1783, 2
  %1785 = ashr exact i32 %1784, 2
  %1786 = sext i32 %1785 to i64
  %1787 = getelementptr inbounds i8, ptr %941, i64 %1786
  %1788 = load i8, ptr %1787, align 1, !tbaa !57
  %1789 = sext i8 %1788 to i32
  switch i32 %1789, label %1801 [
    i32 0, label %1794
    i32 1, label %1792
    i32 2, label %1790
  ]

1790:                                             ; preds = %1778
  %1791 = getelementptr inbounds i16, ptr %1776, i64 1
  br label %1796

1792:                                             ; preds = %1778
  %1793 = getelementptr inbounds i16, ptr %1775, i64 1
  br label %1796

1794:                                             ; preds = %1778
  %1795 = getelementptr inbounds i16, ptr %1774, i64 1
  br label %1796

1796:                                             ; preds = %1794, %1792, %1790
  %1797 = phi ptr [ %1776, %1790 ], [ %1775, %1792 ], [ %1774, %1794 ]
  %1798 = phi ptr [ %1791, %1790 ], [ %1776, %1792 ], [ %1776, %1794 ]
  %1799 = phi ptr [ %1775, %1790 ], [ %1793, %1792 ], [ %1775, %1794 ]
  %1800 = phi ptr [ %1774, %1790 ], [ %1774, %1792 ], [ %1795, %1794 ]
  store i16 %1780, ptr %1797, align 2, !tbaa !44
  br label %1801

1801:                                             ; preds = %1769, %1796, %1778, %1693
  %1802 = phi ptr [ %375, %1693 ], [ %1770, %1769 ], [ %1776, %1778 ], [ %1798, %1796 ]
  %1803 = phi ptr [ %329, %1693 ], [ %1771, %1769 ], [ %1775, %1778 ], [ %1799, %1796 ]
  %1804 = phi ptr [ %1694, %1693 ], [ %1772, %1769 ], [ %1774, %1778 ], [ %1800, %1796 ]
  %1805 = ptrtoint ptr %1804 to i64
  %1806 = ptrtoint ptr %1288 to i64
  %1807 = sub i64 %1805, %1806
  %1808 = lshr exact i64 %1807, 1
  %1809 = trunc i64 %1808 to i32
  %1810 = icmp eq i32 %1809, 0
  %1811 = shl i64 %1807, 31
  br i1 %1810, label %1817, label %1812

1812:                                             ; preds = %1801
  %1813 = add i64 %1811, -4294967296
  %1814 = ashr i64 %1813, 32
  %1815 = getelementptr inbounds i16, ptr %1288, i64 %1814
  %1816 = load i16, ptr %1815, align 2, !tbaa !44
  br label %1817

1817:                                             ; preds = %1801, %1812
  %1818 = phi i16 [ %1816, %1812 ], [ -1, %1801 ]
  %1819 = ashr i64 %1811, 32
  %1820 = getelementptr inbounds i16, ptr %1288, i64 %1819
  store i16 %1818, ptr %1820, align 2, !tbaa !44
  %1821 = trunc i64 %1808 to i16
  %1822 = add i16 %1821, 1
  %1823 = load i32, ptr %13, align 8, !tbaa !17
  %1824 = sext i32 %1823 to i64
  %1825 = getelementptr inbounds i16, ptr %1284, i64 %1824
  store i16 %1822, ptr %1825, align 2, !tbaa !44
  %1826 = add nsw i32 %1809, 2
  %1827 = add nsw i32 %1826, %1823
  %1828 = ptrtoint ptr %1803 to i64
  %1829 = sub i64 %1828, %644
  %1830 = lshr exact i64 %1829, 1
  %1831 = trunc i64 %1830 to i32
  %1832 = add nsw i32 %1827, 1
  %1833 = sext i32 %1832 to i64
  %1834 = getelementptr i16, ptr %1284, i64 %1833
  %1835 = icmp sgt i32 %1831, 0
  br i1 %1835, label %1836, label %1926

1836:                                             ; preds = %1817
  %1837 = and i64 %1830, 4294967295
  %1838 = icmp ult i64 %1837, 8
  br i1 %1838, label %1882, label %1839

1839:                                             ; preds = %1836
  %1840 = shl nsw i64 %1833, 1
  %1841 = add i64 %1840, %1285
  %1842 = sub i64 %1841, %644
  %1843 = icmp ult i64 %1842, 128
  br i1 %1843, label %1882, label %1844

1844:                                             ; preds = %1839
  %1845 = icmp ult i64 %1837, 64
  br i1 %1845, label %1869, label %1846

1846:                                             ; preds = %1844
  %1847 = and i64 %1830, 63
  %1848 = sub nsw i64 %1837, %1847
  br label %1849

1849:                                             ; preds = %1849, %1846
  %1850 = phi i64 [ 0, %1846 ], [ %1863, %1849 ]
  %1851 = getelementptr inbounds i16, ptr %329, i64 %1850
  %1852 = load <16 x i16>, ptr %1851, align 2, !tbaa !44
  %1853 = getelementptr inbounds i16, ptr %1851, i64 16
  %1854 = load <16 x i16>, ptr %1853, align 2, !tbaa !44
  %1855 = getelementptr inbounds i16, ptr %1851, i64 32
  %1856 = load <16 x i16>, ptr %1855, align 2, !tbaa !44
  %1857 = getelementptr inbounds i16, ptr %1851, i64 48
  %1858 = load <16 x i16>, ptr %1857, align 2, !tbaa !44
  %1859 = getelementptr inbounds i16, ptr %1834, i64 %1850
  store <16 x i16> %1852, ptr %1859, align 2, !tbaa !44
  %1860 = getelementptr inbounds i16, ptr %1859, i64 16
  store <16 x i16> %1854, ptr %1860, align 2, !tbaa !44
  %1861 = getelementptr inbounds i16, ptr %1859, i64 32
  store <16 x i16> %1856, ptr %1861, align 2, !tbaa !44
  %1862 = getelementptr inbounds i16, ptr %1859, i64 48
  store <16 x i16> %1858, ptr %1862, align 2, !tbaa !44
  %1863 = add nuw i64 %1850, 64
  %1864 = icmp eq i64 %1863, %1848
  br i1 %1864, label %1865, label %1849, !llvm.loop !371

1865:                                             ; preds = %1849
  %1866 = icmp eq i64 %1847, 0
  br i1 %1866, label %1920, label %1867

1867:                                             ; preds = %1865
  %1868 = icmp ult i64 %1847, 8
  br i1 %1868, label %1882, label %1869

1869:                                             ; preds = %1844, %1867
  %1870 = phi i64 [ %1848, %1867 ], [ 0, %1844 ]
  %1871 = and i64 %1830, 7
  %1872 = sub nsw i64 %1837, %1871
  br label %1873

1873:                                             ; preds = %1873, %1869
  %1874 = phi i64 [ %1870, %1869 ], [ %1878, %1873 ]
  %1875 = getelementptr inbounds i16, ptr %329, i64 %1874
  %1876 = load <8 x i16>, ptr %1875, align 2, !tbaa !44
  %1877 = getelementptr inbounds i16, ptr %1834, i64 %1874
  store <8 x i16> %1876, ptr %1877, align 2, !tbaa !44
  %1878 = add nuw i64 %1874, 8
  %1879 = icmp eq i64 %1878, %1872
  br i1 %1879, label %1880, label %1873, !llvm.loop !372

1880:                                             ; preds = %1873
  %1881 = icmp eq i64 %1871, 0
  br i1 %1881, label %1920, label %1882

1882:                                             ; preds = %1839, %1836, %1867, %1880
  %1883 = phi i64 [ 0, %1836 ], [ 0, %1839 ], [ %1848, %1867 ], [ %1872, %1880 ]
  %1884 = sub i64 %1830, %1883
  %1885 = xor i64 %1883, -1
  %1886 = add nsw i64 %1837, %1885
  %1887 = and i64 %1884, 3
  %1888 = icmp eq i64 %1887, 0
  br i1 %1888, label %1898, label %1889

1889:                                             ; preds = %1882, %1889
  %1890 = phi i64 [ %1895, %1889 ], [ %1883, %1882 ]
  %1891 = phi i64 [ %1896, %1889 ], [ 0, %1882 ]
  %1892 = getelementptr inbounds i16, ptr %329, i64 %1890
  %1893 = load i16, ptr %1892, align 2, !tbaa !44
  %1894 = getelementptr inbounds i16, ptr %1834, i64 %1890
  store i16 %1893, ptr %1894, align 2, !tbaa !44
  %1895 = add nuw nsw i64 %1890, 1
  %1896 = add i64 %1891, 1
  %1897 = icmp eq i64 %1896, %1887
  br i1 %1897, label %1898, label %1889, !llvm.loop !373

1898:                                             ; preds = %1889, %1882
  %1899 = phi i64 [ %1883, %1882 ], [ %1895, %1889 ]
  %1900 = icmp ult i64 %1886, 3
  br i1 %1900, label %1920, label %1901

1901:                                             ; preds = %1898, %1901
  %1902 = phi i64 [ %1918, %1901 ], [ %1899, %1898 ]
  %1903 = getelementptr inbounds i16, ptr %329, i64 %1902
  %1904 = load i16, ptr %1903, align 2, !tbaa !44
  %1905 = getelementptr inbounds i16, ptr %1834, i64 %1902
  store i16 %1904, ptr %1905, align 2, !tbaa !44
  %1906 = add nuw nsw i64 %1902, 1
  %1907 = getelementptr inbounds i16, ptr %329, i64 %1906
  %1908 = load i16, ptr %1907, align 2, !tbaa !44
  %1909 = getelementptr inbounds i16, ptr %1834, i64 %1906
  store i16 %1908, ptr %1909, align 2, !tbaa !44
  %1910 = add nuw nsw i64 %1902, 2
  %1911 = getelementptr inbounds i16, ptr %329, i64 %1910
  %1912 = load i16, ptr %1911, align 2, !tbaa !44
  %1913 = getelementptr inbounds i16, ptr %1834, i64 %1910
  store i16 %1912, ptr %1913, align 2, !tbaa !44
  %1914 = add nuw nsw i64 %1902, 3
  %1915 = getelementptr inbounds i16, ptr %329, i64 %1914
  %1916 = load i16, ptr %1915, align 2, !tbaa !44
  %1917 = getelementptr inbounds i16, ptr %1834, i64 %1914
  store i16 %1916, ptr %1917, align 2, !tbaa !44
  %1918 = add nuw nsw i64 %1902, 4
  %1919 = icmp eq i64 %1918, %1837
  br i1 %1919, label %1920, label %1901, !llvm.loop !374

1920:                                             ; preds = %1898, %1901, %1865, %1880
  %1921 = shl i64 %1829, 31
  %1922 = add i64 %1921, -4294967296
  %1923 = ashr i64 %1922, 32
  %1924 = getelementptr inbounds i16, ptr %1834, i64 %1923
  %1925 = load i16, ptr %1924, align 2, !tbaa !44
  br label %1926

1926:                                             ; preds = %1817, %1920
  %1927 = phi i64 [ %1830, %1920 ], [ 0, %1817 ]
  %1928 = phi i16 [ %1925, %1920 ], [ -1, %1817 ]
  %1929 = and i64 %1927, 4294967295
  %1930 = getelementptr inbounds i16, ptr %1834, i64 %1929
  store i16 %1928, ptr %1930, align 2, !tbaa !44
  %1931 = trunc i64 %1830 to i16
  %1932 = add i16 %1931, 1
  %1933 = sext i32 %1827 to i64
  %1934 = getelementptr inbounds i16, ptr %1284, i64 %1933
  store i16 %1932, ptr %1934, align 2, !tbaa !44
  %1935 = add nsw i32 %1831, 2
  %1936 = add nsw i32 %1935, %1827
  %1937 = ptrtoint ptr %1802 to i64
  %1938 = sub i64 %1937, %645
  %1939 = lshr exact i64 %1938, 1
  %1940 = trunc i64 %1939 to i32
  %1941 = add nsw i32 %1936, 1
  %1942 = sext i32 %1941 to i64
  %1943 = getelementptr i16, ptr %1284, i64 %1942
  %1944 = icmp sgt i32 %1940, 0
  br i1 %1944, label %1945, label %2035

1945:                                             ; preds = %1926
  %1946 = and i64 %1939, 4294967295
  %1947 = icmp ult i64 %1946, 8
  br i1 %1947, label %1991, label %1948

1948:                                             ; preds = %1945
  %1949 = shl nsw i64 %1942, 1
  %1950 = add i64 %1949, %1285
  %1951 = sub i64 %1950, %645
  %1952 = icmp ult i64 %1951, 128
  br i1 %1952, label %1991, label %1953

1953:                                             ; preds = %1948
  %1954 = icmp ult i64 %1946, 64
  br i1 %1954, label %1978, label %1955

1955:                                             ; preds = %1953
  %1956 = and i64 %1939, 63
  %1957 = sub nsw i64 %1946, %1956
  br label %1958

1958:                                             ; preds = %1958, %1955
  %1959 = phi i64 [ 0, %1955 ], [ %1972, %1958 ]
  %1960 = getelementptr inbounds i16, ptr %375, i64 %1959
  %1961 = load <16 x i16>, ptr %1960, align 2, !tbaa !44
  %1962 = getelementptr inbounds i16, ptr %1960, i64 16
  %1963 = load <16 x i16>, ptr %1962, align 2, !tbaa !44
  %1964 = getelementptr inbounds i16, ptr %1960, i64 32
  %1965 = load <16 x i16>, ptr %1964, align 2, !tbaa !44
  %1966 = getelementptr inbounds i16, ptr %1960, i64 48
  %1967 = load <16 x i16>, ptr %1966, align 2, !tbaa !44
  %1968 = getelementptr inbounds i16, ptr %1943, i64 %1959
  store <16 x i16> %1961, ptr %1968, align 2, !tbaa !44
  %1969 = getelementptr inbounds i16, ptr %1968, i64 16
  store <16 x i16> %1963, ptr %1969, align 2, !tbaa !44
  %1970 = getelementptr inbounds i16, ptr %1968, i64 32
  store <16 x i16> %1965, ptr %1970, align 2, !tbaa !44
  %1971 = getelementptr inbounds i16, ptr %1968, i64 48
  store <16 x i16> %1967, ptr %1971, align 2, !tbaa !44
  %1972 = add nuw i64 %1959, 64
  %1973 = icmp eq i64 %1972, %1957
  br i1 %1973, label %1974, label %1958, !llvm.loop !375

1974:                                             ; preds = %1958
  %1975 = icmp eq i64 %1956, 0
  br i1 %1975, label %2029, label %1976

1976:                                             ; preds = %1974
  %1977 = icmp ult i64 %1956, 8
  br i1 %1977, label %1991, label %1978

1978:                                             ; preds = %1953, %1976
  %1979 = phi i64 [ %1957, %1976 ], [ 0, %1953 ]
  %1980 = and i64 %1939, 7
  %1981 = sub nsw i64 %1946, %1980
  br label %1982

1982:                                             ; preds = %1982, %1978
  %1983 = phi i64 [ %1979, %1978 ], [ %1987, %1982 ]
  %1984 = getelementptr inbounds i16, ptr %375, i64 %1983
  %1985 = load <8 x i16>, ptr %1984, align 2, !tbaa !44
  %1986 = getelementptr inbounds i16, ptr %1943, i64 %1983
  store <8 x i16> %1985, ptr %1986, align 2, !tbaa !44
  %1987 = add nuw i64 %1983, 8
  %1988 = icmp eq i64 %1987, %1981
  br i1 %1988, label %1989, label %1982, !llvm.loop !376

1989:                                             ; preds = %1982
  %1990 = icmp eq i64 %1980, 0
  br i1 %1990, label %2029, label %1991

1991:                                             ; preds = %1948, %1945, %1976, %1989
  %1992 = phi i64 [ 0, %1945 ], [ 0, %1948 ], [ %1957, %1976 ], [ %1981, %1989 ]
  %1993 = sub i64 %1939, %1992
  %1994 = xor i64 %1992, -1
  %1995 = add nsw i64 %1946, %1994
  %1996 = and i64 %1993, 3
  %1997 = icmp eq i64 %1996, 0
  br i1 %1997, label %2007, label %1998

1998:                                             ; preds = %1991, %1998
  %1999 = phi i64 [ %2004, %1998 ], [ %1992, %1991 ]
  %2000 = phi i64 [ %2005, %1998 ], [ 0, %1991 ]
  %2001 = getelementptr inbounds i16, ptr %375, i64 %1999
  %2002 = load i16, ptr %2001, align 2, !tbaa !44
  %2003 = getelementptr inbounds i16, ptr %1943, i64 %1999
  store i16 %2002, ptr %2003, align 2, !tbaa !44
  %2004 = add nuw nsw i64 %1999, 1
  %2005 = add i64 %2000, 1
  %2006 = icmp eq i64 %2005, %1996
  br i1 %2006, label %2007, label %1998, !llvm.loop !377

2007:                                             ; preds = %1998, %1991
  %2008 = phi i64 [ %1992, %1991 ], [ %2004, %1998 ]
  %2009 = icmp ult i64 %1995, 3
  br i1 %2009, label %2029, label %2010

2010:                                             ; preds = %2007, %2010
  %2011 = phi i64 [ %2027, %2010 ], [ %2008, %2007 ]
  %2012 = getelementptr inbounds i16, ptr %375, i64 %2011
  %2013 = load i16, ptr %2012, align 2, !tbaa !44
  %2014 = getelementptr inbounds i16, ptr %1943, i64 %2011
  store i16 %2013, ptr %2014, align 2, !tbaa !44
  %2015 = add nuw nsw i64 %2011, 1
  %2016 = getelementptr inbounds i16, ptr %375, i64 %2015
  %2017 = load i16, ptr %2016, align 2, !tbaa !44
  %2018 = getelementptr inbounds i16, ptr %1943, i64 %2015
  store i16 %2017, ptr %2018, align 2, !tbaa !44
  %2019 = add nuw nsw i64 %2011, 2
  %2020 = getelementptr inbounds i16, ptr %375, i64 %2019
  %2021 = load i16, ptr %2020, align 2, !tbaa !44
  %2022 = getelementptr inbounds i16, ptr %1943, i64 %2019
  store i16 %2021, ptr %2022, align 2, !tbaa !44
  %2023 = add nuw nsw i64 %2011, 3
  %2024 = getelementptr inbounds i16, ptr %375, i64 %2023
  %2025 = load i16, ptr %2024, align 2, !tbaa !44
  %2026 = getelementptr inbounds i16, ptr %1943, i64 %2023
  store i16 %2025, ptr %2026, align 2, !tbaa !44
  %2027 = add nuw nsw i64 %2011, 4
  %2028 = icmp eq i64 %2027, %1946
  br i1 %2028, label %2029, label %2010, !llvm.loop !378

2029:                                             ; preds = %2007, %2010, %1974, %1989
  %2030 = shl i64 %1938, 31
  %2031 = add i64 %2030, -4294967296
  %2032 = ashr i64 %2031, 32
  %2033 = getelementptr inbounds i16, ptr %1943, i64 %2032
  %2034 = load i16, ptr %2033, align 2, !tbaa !44
  br label %2035

2035:                                             ; preds = %1926, %2029
  %2036 = phi i64 [ %1939, %2029 ], [ 0, %1926 ]
  %2037 = phi i16 [ %2034, %2029 ], [ -1, %1926 ]
  %2038 = and i64 %2036, 4294967295
  %2039 = getelementptr inbounds i16, ptr %1943, i64 %2038
  store i16 %2037, ptr %2039, align 2, !tbaa !44
  %2040 = trunc i64 %1939 to i16
  %2041 = add i16 %2040, 1
  %2042 = sext i32 %1936 to i64
  %2043 = getelementptr inbounds i16, ptr %1284, i64 %2042
  store i16 %2041, ptr %2043, align 2, !tbaa !44
  %2044 = add nsw i32 %1940, 2
  %2045 = add nsw i32 %2044, %1936
  %2046 = select i1 %142, i32 0, i32 %2045
  store i32 %2046, ptr %13, align 8
  br label %2078

2047:                                             ; preds = %688
  %2048 = load ptr, ptr %8, align 8, !tbaa !46
  %2049 = load i32, ptr %13, align 8, !tbaa !17
  %2050 = add i32 %2049, 1
  %2051 = sext i32 %2050 to i64
  %2052 = getelementptr inbounds i16, ptr %2048, i64 %2051
  %2053 = sext i32 %2049 to i64
  %2054 = getelementptr inbounds i16, ptr %2048, i64 %2053
  %2055 = load i16, ptr %2054, align 2, !tbaa !44
  %2056 = zext i16 %2055 to i32
  %2057 = add i32 %2050, %2056
  %2058 = add nsw i32 %2056, -1
  %2059 = add i32 %2057, 1
  %2060 = sext i32 %2059 to i64
  %2061 = getelementptr inbounds i16, ptr %2048, i64 %2060
  %2062 = sext i32 %2057 to i64
  %2063 = getelementptr inbounds i16, ptr %2048, i64 %2062
  %2064 = load i16, ptr %2063, align 2, !tbaa !44
  %2065 = zext i16 %2064 to i32
  %2066 = add i32 %2059, %2065
  %2067 = add nsw i32 %2065, -1
  %2068 = add i32 %2066, 1
  %2069 = sext i32 %2068 to i64
  %2070 = getelementptr inbounds i16, ptr %2048, i64 %2069
  %2071 = sext i32 %2066 to i64
  %2072 = getelementptr inbounds i16, ptr %2048, i64 %2071
  %2073 = load i16, ptr %2072, align 2, !tbaa !44
  %2074 = zext i16 %2073 to i32
  %2075 = add i32 %2068, %2074
  store i32 %2075, ptr %13, align 8, !tbaa !17
  %2076 = add nsw i32 %2074, -1
  %2077 = load i32, ptr @_ZN20ComputeNonbondedUtil17pairInteractionOnE, align 4, !tbaa !5
  br label %2078

2078:                                             ; preds = %2035, %2047
  %2079 = phi i32 [ %2077, %2047 ], [ %1289, %2035 ]
  %2080 = phi ptr [ %2052, %2047 ], [ %1288, %2035 ]
  %2081 = phi i32 [ %2058, %2047 ], [ %1809, %2035 ]
  %2082 = phi ptr [ %2061, %2047 ], [ %1834, %2035 ]
  %2083 = phi i32 [ %2067, %2047 ], [ %1831, %2035 ]
  %2084 = phi ptr [ %2070, %2047 ], [ %1943, %2035 ]
  %2085 = phi i32 [ %2076, %2047 ], [ %1940, %2035 ]
  %2086 = phi i32 [ %670, %2047 ], [ %1246, %2035 ]
  %2087 = phi i32 [ %669, %2047 ], [ %1247, %2035 ]
  %2088 = phi i32 [ %668, %2047 ], [ %1248, %2035 ]
  %2089 = phi i32 [ %667, %2047 ], [ %1249, %2035 ]
  %2090 = phi ptr [ %665, %2047 ], [ %942, %2035 ]
  %2091 = phi ptr [ %664, %2047 ], [ %943, %2035 ]
  %2092 = phi ptr [ %663, %2047 ], [ %944, %2035 ]
  %2093 = icmp eq i32 %2079, 0
  %2094 = load i32, ptr @_ZN20ComputeNonbondedUtil19pairInteractionSelfE, align 4
  %2095 = icmp ne i32 %2094, 0
  %2096 = select i1 %2093, i1 true, i1 %2095
  br i1 %2096, label %2102, label %2097

2097:                                             ; preds = %2078
  %2098 = getelementptr inbounds %struct.CompAtom, ptr %39, i64 %673, i32 3
  %2099 = load i8, ptr %2098, align 2, !tbaa !301
  %2100 = icmp eq i8 %2099, 1
  %2101 = select i1 %2100, double 1.000000e+00, double -1.000000e+00
  br label %2102

2102:                                             ; preds = %2078, %2097
  %2103 = phi double [ %2101, %2097 ], [ 0.000000e+00, %2078 ]
  %2104 = getelementptr inbounds %struct.CompAtom, ptr %39, i64 %673, i32 1
  %2105 = load float, ptr %2104, align 8, !tbaa !79
  %2106 = fpext float %2105 to double
  %2107 = fmul double %2106, 0x4074C104816F0069
  %2108 = fmul double %28, %2107
  %2109 = fmul double %24, %2108
  %2110 = getelementptr inbounds %struct.CompAtom, ptr %39, i64 %673, i32 2
  %2111 = load i16, ptr %2110, align 4, !tbaa !80
  %2112 = sext i16 %2111 to i32
  %2113 = load ptr, ptr %646, align 8, !tbaa !81
  %2114 = load i32, ptr %647, align 8, !tbaa !83
  %2115 = shl nsw i32 %2112, 1
  %2116 = mul i32 %2115, %2114
  %2117 = zext i32 %2116 to i64
  %2118 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %2113, i64 %2117
  %2119 = load double, ptr @_ZN20ComputeNonbondedUtil7cutoff2E, align 8, !tbaa !19
  %2120 = extractelement <2 x double> %691, i64 0
  %2121 = extractelement <2 x double> %691, i64 1
  %2122 = tail call noundef i32 @_Z22pairlist_from_pairlistddddPK8CompAtomPKtiPtdPd(double noundef %2119, double noundef %2120, double noundef %2121, double noundef %694, ptr noundef %41, ptr noundef nonnull %2080, i32 noundef %2081, ptr noundef %94, double noundef %31, ptr noundef %140)
  %2123 = icmp sgt i32 %2122, 0
  br i1 %2123, label %2124, label %2259

2124:                                             ; preds = %2102
  %2125 = load ptr, ptr @_ZN20ComputeNonbondedUtil8r2_tableE, align 8, !tbaa !23
  %2126 = zext i32 %2122 to i64
  br label %2127

2127:                                             ; preds = %2124, %2127
  %2128 = phi i64 [ 0, %2124 ], [ %2257, %2127 ]
  %2129 = phi double [ 0.000000e+00, %2124 ], [ %2253, %2127 ]
  %2130 = phi <2 x double> [ zeroinitializer, %2124 ], [ %2249, %2127 ]
  %2131 = phi <2 x double> [ %672, %2124 ], [ %2232, %2127 ]
  %2132 = shl nuw nsw i64 %2128, 1
  %2133 = getelementptr inbounds i32, ptr %141, i64 %2132
  %2134 = load i32, ptr %2133, align 4, !tbaa !5
  %2135 = ashr i32 %2134, 14
  %2136 = add nsw i32 %2135, %34
  %2137 = getelementptr inbounds i16, ptr %94, i64 %2128
  %2138 = load i16, ptr %2137, align 2, !tbaa !44
  %2139 = zext i16 %2138 to i64
  %2140 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %2139
  %2141 = getelementptr inbounds double, ptr %140, i64 %2128
  %2142 = load double, ptr %2141, align 8, !tbaa !19
  %2143 = sext i32 %2136 to i64
  %2144 = getelementptr inbounds double, ptr %2125, i64 %2143
  %2145 = load double, ptr %2144, align 8, !tbaa !19
  %2146 = fsub double %2142, %2145
  %2147 = shl nsw i32 %2136, 4
  %2148 = sext i32 %2147 to i64
  %2149 = getelementptr inbounds double, ptr %27, i64 %2148
  %2150 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %2139, i32 2
  %2151 = load i16, ptr %2150, align 4, !tbaa !80
  %2152 = sext i16 %2151 to i32
  %2153 = shl nsw i32 %2152, 1
  %2154 = sext i32 %2153 to i64
  %2155 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %2118, i64 %2154
  %2156 = getelementptr inbounds %class.Vector, ptr %625, i64 %2139
  %2157 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %2139, i32 1
  %2158 = load float, ptr %2157, align 8, !tbaa !79
  %2159 = fpext float %2158 to double
  %2160 = fmul double %2109, %2159
  %2161 = getelementptr inbounds %class.Vector, ptr %2140, i64 0, i32 2
  %2162 = load double, ptr %2161, align 8, !tbaa !49
  %2163 = fsub double %694, %2162
  %2164 = load double, ptr %2155, align 8, !tbaa !84
  %2165 = fmul double %28, %2164
  %2166 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %2118, i64 %2154, i32 1
  %2167 = load double, ptr %2166, align 8, !tbaa !86
  %2168 = load double, ptr %2149, align 8, !tbaa !19
  %2169 = getelementptr inbounds double, ptr %2149, i64 2
  %2170 = load double, ptr %2169, align 8, !tbaa !19
  %2171 = fmul double %2167, %648
  %2172 = fmul double %2171, %2170
  %2173 = tail call double @llvm.fmuladd.f64(double %2165, double %2168, double %2172)
  %2174 = getelementptr inbounds double, ptr %2149, i64 1
  %2175 = load double, ptr %2174, align 8, !tbaa !19
  %2176 = getelementptr inbounds double, ptr %2149, i64 3
  %2177 = load double, ptr %2176, align 8, !tbaa !19
  %2178 = fmul double %2171, %2177
  %2179 = tail call double @llvm.fmuladd.f64(double %2165, double %2175, double %2178)
  %2180 = getelementptr inbounds double, ptr %2149, i64 4
  %2181 = load double, ptr %2180, align 8, !tbaa !19
  %2182 = getelementptr inbounds double, ptr %2149, i64 6
  %2183 = load double, ptr %2182, align 8, !tbaa !19
  %2184 = fmul double %2171, %2183
  %2185 = tail call double @llvm.fmuladd.f64(double %2165, double %2181, double %2184)
  %2186 = getelementptr inbounds double, ptr %2149, i64 5
  %2187 = load double, ptr %2186, align 8, !tbaa !19
  %2188 = getelementptr inbounds double, ptr %2149, i64 7
  %2189 = load double, ptr %2188, align 8, !tbaa !19
  %2190 = fmul double %2171, %2189
  %2191 = tail call double @llvm.fmuladd.f64(double %2165, double %2187, double %2190)
  %2192 = tail call double @llvm.fmuladd.f64(double %2146, double %2173, double %2179)
  %2193 = tail call double @llvm.fmuladd.f64(double %2192, double %2146, double %2185)
  %2194 = fmul double %2103, %2193
  %2195 = load double, ptr %650, align 8, !tbaa !19
  %2196 = tail call double @llvm.fmuladd.f64(double %2194, double %2163, double %2195)
  %2197 = getelementptr inbounds double, ptr %2149, i64 8
  %2198 = getelementptr inbounds double, ptr %2149, i64 9
  %2199 = getelementptr inbounds double, ptr %2149, i64 10
  %2200 = getelementptr inbounds double, ptr %2149, i64 11
  %2201 = load double, ptr %652, align 8, !tbaa !19
  %2202 = load <2 x double>, ptr %2140, align 8, !tbaa !19
  %2203 = fsub <2 x double> %691, %2202
  %2204 = load <2 x double>, ptr %649, align 8, !tbaa !19
  %2205 = insertelement <2 x double> poison, double %2194, i64 0
  %2206 = shufflevector <2 x double> %2205, <2 x double> poison, <2 x i32> zeroinitializer
  %2207 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2206, <2 x double> %2203, <2 x double> %2204)
  store <2 x double> %2207, ptr %649, align 8, !tbaa !19
  store double %2196, ptr %650, align 8, !tbaa !19
  %2208 = load double, ptr %2197, align 8, !tbaa !19
  %2209 = load double, ptr %2198, align 8, !tbaa !19
  %2210 = load double, ptr %2199, align 8, !tbaa !19
  %2211 = load double, ptr %2200, align 8, !tbaa !19
  %2212 = fmul double %2160, %2208
  %2213 = fmul double %2160, %2209
  %2214 = fmul double %2160, %2210
  %2215 = fmul double %2160, %2211
  %2216 = insertelement <2 x double> poison, double %2146, i64 0
  %2217 = shufflevector <2 x double> %2216, <2 x double> poison, <2 x i32> zeroinitializer
  %2218 = insertelement <2 x double> poison, double %2212, i64 0
  %2219 = insertelement <2 x double> %2218, double %2173, i64 1
  %2220 = fmul <2 x double> %2217, %2219
  %2221 = insertelement <2 x double> poison, double %2213, i64 0
  %2222 = insertelement <2 x double> %2221, double %2179, i64 1
  %2223 = fmul <2 x double> %2222, <double 2.500000e-01, double 2.500000e-01>
  %2224 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2220, <2 x double> <double 0x3FC5555555555555, double 0x3FC5555555555555>, <2 x double> %2223)
  %2225 = insertelement <2 x double> poison, double %2214, i64 0
  %2226 = insertelement <2 x double> %2225, double %2185, i64 1
  %2227 = fmul <2 x double> %2226, <double 5.000000e-01, double 5.000000e-01>
  %2228 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2224, <2 x double> %2217, <2 x double> %2227)
  %2229 = insertelement <2 x double> poison, double %2215, i64 0
  %2230 = insertelement <2 x double> %2229, double %2191, i64 1
  %2231 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2228, <2 x double> %2217, <2 x double> %2230)
  %2232 = fsub <2 x double> %2131, %2231
  %2233 = tail call double @llvm.fmuladd.f64(double %2146, double %2212, double %2213)
  %2234 = tail call double @llvm.fmuladd.f64(double %2233, double %2146, double %2214)
  %2235 = fmul double %2103, %2234
  %2236 = load <2 x double>, ptr %651, align 8, !tbaa !19
  %2237 = insertelement <2 x double> poison, double %2235, i64 0
  %2238 = shufflevector <2 x double> %2237, <2 x double> poison, <2 x i32> zeroinitializer
  %2239 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2238, <2 x double> %2203, <2 x double> %2236)
  store <2 x double> %2239, ptr %651, align 8, !tbaa !19
  %2240 = tail call double @llvm.fmuladd.f64(double %2235, double %2163, double %2201)
  store double %2240, ptr %652, align 8, !tbaa !19
  %2241 = fadd double %2173, %2212
  %2242 = fadd double %2179, %2213
  %2243 = fadd double %2185, %2214
  %2244 = tail call double @llvm.fmuladd.f64(double %2146, double %2241, double %2242)
  %2245 = tail call double @llvm.fmuladd.f64(double %2244, double %2146, double %2243)
  %2246 = insertelement <2 x double> poison, double %2245, i64 0
  %2247 = shufflevector <2 x double> %2246, <2 x double> poison, <2 x i32> zeroinitializer
  %2248 = fmul <2 x double> %2203, %2247
  %2249 = fadd <2 x double> %2130, %2248
  %2250 = load <2 x double>, ptr %2156, align 8, !tbaa !19
  %2251 = fsub <2 x double> %2250, %2248
  store <2 x double> %2251, ptr %2156, align 8, !tbaa !19
  %2252 = fmul double %2163, %2245
  %2253 = fadd double %2129, %2252
  %2254 = getelementptr inbounds %class.Vector, ptr %625, i64 %2139, i32 2
  %2255 = load double, ptr %2254, align 8, !tbaa !87
  %2256 = fsub double %2255, %2252
  store double %2256, ptr %2254, align 8, !tbaa !87
  %2257 = add nuw nsw i64 %2128, 1
  %2258 = icmp eq i64 %2257, %2126
  br i1 %2258, label %2259, label %2127

2259:                                             ; preds = %2127, %2102
  %2260 = phi double [ 0.000000e+00, %2102 ], [ %2253, %2127 ]
  %2261 = phi <2 x double> [ zeroinitializer, %2102 ], [ %2249, %2127 ]
  %2262 = phi <2 x double> [ %672, %2102 ], [ %2232, %2127 ]
  %2263 = load double, ptr @_ZN20ComputeNonbondedUtil7cutoff2E, align 8, !tbaa !19
  %2264 = tail call noundef i32 @_Z22pairlist_from_pairlistddddPK8CompAtomPKtiPtdPd(double noundef %2263, double noundef %2120, double noundef %2121, double noundef %694, ptr noundef %41, ptr noundef %2084, i32 noundef %2085, ptr noundef %94, double noundef %31, ptr noundef %140)
  %2265 = add nsw i32 %2264, %661
  %2266 = icmp sgt i32 %2264, 0
  br i1 %2266, label %2267, label %2415

2267:                                             ; preds = %2259
  %2268 = load ptr, ptr @_ZN20ComputeNonbondedUtil8r2_tableE, align 8, !tbaa !23
  %2269 = zext i32 %2264 to i64
  br label %2270

2270:                                             ; preds = %2267, %2270
  %2271 = phi i64 [ 0, %2267 ], [ %2413, %2270 ]
  %2272 = phi double [ %2260, %2267 ], [ %2409, %2270 ]
  %2273 = phi <2 x double> [ %2261, %2267 ], [ %2405, %2270 ]
  %2274 = phi <2 x double> [ %2262, %2267 ], [ %2388, %2270 ]
  %2275 = shl nuw nsw i64 %2271, 1
  %2276 = getelementptr inbounds i32, ptr %141, i64 %2275
  %2277 = load i32, ptr %2276, align 4, !tbaa !5
  %2278 = ashr i32 %2277, 14
  %2279 = add nsw i32 %2278, %34
  %2280 = getelementptr inbounds i16, ptr %94, i64 %2271
  %2281 = load i16, ptr %2280, align 2, !tbaa !44
  %2282 = zext i16 %2281 to i64
  %2283 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %2282
  %2284 = getelementptr inbounds double, ptr %140, i64 %2271
  %2285 = load double, ptr %2284, align 8, !tbaa !19
  %2286 = sext i32 %2279 to i64
  %2287 = getelementptr inbounds double, ptr %2268, i64 %2286
  %2288 = load double, ptr %2287, align 8, !tbaa !19
  %2289 = fsub double %2285, %2288
  %2290 = shl nsw i32 %2279, 4
  %2291 = sext i32 %2290 to i64
  %2292 = getelementptr inbounds double, ptr %27, i64 %2291
  %2293 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %2282, i32 2
  %2294 = load i16, ptr %2293, align 4, !tbaa !80
  %2295 = sext i16 %2294 to i32
  %2296 = shl nsw i32 %2295, 1
  %2297 = sext i32 %2296 to i64
  %2298 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %2118, i64 %2297
  %2299 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %2298, i64 1
  %2300 = getelementptr inbounds %class.Vector, ptr %625, i64 %2282
  %2301 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %2282, i32 1
  %2302 = load float, ptr %2301, align 8, !tbaa !79
  %2303 = fpext float %2302 to double
  %2304 = fmul double %2109, %2303
  %2305 = getelementptr inbounds %class.Vector, ptr %2283, i64 0, i32 2
  %2306 = load double, ptr %2305, align 8, !tbaa !49
  %2307 = fsub double %694, %2306
  %2308 = load double, ptr %2299, align 8, !tbaa !84
  %2309 = fmul double %28, %2308
  %2310 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %2298, i64 1, i32 1
  %2311 = load double, ptr %2310, align 8, !tbaa !86
  %2312 = load double, ptr %2292, align 8, !tbaa !19
  %2313 = getelementptr inbounds double, ptr %2292, i64 2
  %2314 = load double, ptr %2313, align 8, !tbaa !19
  %2315 = fmul double %2311, %648
  %2316 = fmul double %2315, %2314
  %2317 = tail call double @llvm.fmuladd.f64(double %2309, double %2312, double %2316)
  %2318 = getelementptr inbounds double, ptr %2292, i64 1
  %2319 = load double, ptr %2318, align 8, !tbaa !19
  %2320 = getelementptr inbounds double, ptr %2292, i64 3
  %2321 = load double, ptr %2320, align 8, !tbaa !19
  %2322 = fmul double %2315, %2321
  %2323 = tail call double @llvm.fmuladd.f64(double %2309, double %2319, double %2322)
  %2324 = getelementptr inbounds double, ptr %2292, i64 4
  %2325 = load double, ptr %2324, align 8, !tbaa !19
  %2326 = getelementptr inbounds double, ptr %2292, i64 6
  %2327 = load double, ptr %2326, align 8, !tbaa !19
  %2328 = fmul double %2315, %2327
  %2329 = tail call double @llvm.fmuladd.f64(double %2309, double %2325, double %2328)
  %2330 = getelementptr inbounds double, ptr %2292, i64 5
  %2331 = load double, ptr %2330, align 8, !tbaa !19
  %2332 = getelementptr inbounds double, ptr %2292, i64 7
  %2333 = load double, ptr %2332, align 8, !tbaa !19
  %2334 = fmul double %2315, %2333
  %2335 = tail call double @llvm.fmuladd.f64(double %2309, double %2331, double %2334)
  %2336 = tail call double @llvm.fmuladd.f64(double %2289, double %2317, double %2323)
  %2337 = tail call double @llvm.fmuladd.f64(double %2336, double %2289, double %2329)
  %2338 = fmul double %2103, %2337
  %2339 = load double, ptr %650, align 8, !tbaa !19
  %2340 = tail call double @llvm.fmuladd.f64(double %2338, double %2307, double %2339)
  %2341 = getelementptr inbounds double, ptr %2292, i64 8
  %2342 = getelementptr inbounds double, ptr %2292, i64 9
  %2343 = getelementptr inbounds double, ptr %2292, i64 10
  %2344 = getelementptr inbounds double, ptr %2292, i64 11
  %2345 = getelementptr inbounds double, ptr %2292, i64 12
  %2346 = getelementptr inbounds double, ptr %2292, i64 13
  %2347 = getelementptr inbounds double, ptr %2292, i64 14
  %2348 = getelementptr inbounds double, ptr %2292, i64 15
  %2349 = load double, ptr %652, align 8, !tbaa !19
  %2350 = load <2 x double>, ptr %2283, align 8, !tbaa !19
  %2351 = fsub <2 x double> %691, %2350
  %2352 = load <2 x double>, ptr %649, align 8, !tbaa !19
  %2353 = insertelement <2 x double> poison, double %2338, i64 0
  %2354 = shufflevector <2 x double> %2353, <2 x double> poison, <2 x i32> zeroinitializer
  %2355 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2354, <2 x double> %2351, <2 x double> %2352)
  store <2 x double> %2355, ptr %649, align 8, !tbaa !19
  store double %2340, ptr %650, align 8, !tbaa !19
  %2356 = load double, ptr %2341, align 8, !tbaa !19
  %2357 = load double, ptr %2342, align 8, !tbaa !19
  %2358 = load double, ptr %2343, align 8, !tbaa !19
  %2359 = load double, ptr %2344, align 8, !tbaa !19
  %2360 = load double, ptr %2345, align 8, !tbaa !19
  %2361 = tail call double @llvm.fmuladd.f64(double %653, double %2360, double %2356)
  %2362 = load double, ptr %2346, align 8, !tbaa !19
  %2363 = tail call double @llvm.fmuladd.f64(double %653, double %2362, double %2357)
  %2364 = load double, ptr %2347, align 8, !tbaa !19
  %2365 = tail call double @llvm.fmuladd.f64(double %653, double %2364, double %2358)
  %2366 = load double, ptr %2348, align 8, !tbaa !19
  %2367 = tail call double @llvm.fmuladd.f64(double %653, double %2366, double %2359)
  %2368 = fmul double %2304, %2361
  %2369 = fmul double %2304, %2363
  %2370 = fmul double %2304, %2365
  %2371 = fmul double %2304, %2367
  %2372 = insertelement <2 x double> poison, double %2289, i64 0
  %2373 = shufflevector <2 x double> %2372, <2 x double> poison, <2 x i32> zeroinitializer
  %2374 = insertelement <2 x double> poison, double %2368, i64 0
  %2375 = insertelement <2 x double> %2374, double %2317, i64 1
  %2376 = fmul <2 x double> %2373, %2375
  %2377 = insertelement <2 x double> poison, double %2369, i64 0
  %2378 = insertelement <2 x double> %2377, double %2323, i64 1
  %2379 = fmul <2 x double> %2378, <double 2.500000e-01, double 2.500000e-01>
  %2380 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2376, <2 x double> <double 0x3FC5555555555555, double 0x3FC5555555555555>, <2 x double> %2379)
  %2381 = insertelement <2 x double> poison, double %2370, i64 0
  %2382 = insertelement <2 x double> %2381, double %2329, i64 1
  %2383 = fmul <2 x double> %2382, <double 5.000000e-01, double 5.000000e-01>
  %2384 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2380, <2 x double> %2373, <2 x double> %2383)
  %2385 = insertelement <2 x double> poison, double %2371, i64 0
  %2386 = insertelement <2 x double> %2385, double %2335, i64 1
  %2387 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2384, <2 x double> %2373, <2 x double> %2386)
  %2388 = fsub <2 x double> %2274, %2387
  %2389 = tail call double @llvm.fmuladd.f64(double %2289, double %2368, double %2369)
  %2390 = tail call double @llvm.fmuladd.f64(double %2389, double %2289, double %2370)
  %2391 = fmul double %2103, %2390
  %2392 = load <2 x double>, ptr %651, align 8, !tbaa !19
  %2393 = insertelement <2 x double> poison, double %2391, i64 0
  %2394 = shufflevector <2 x double> %2393, <2 x double> poison, <2 x i32> zeroinitializer
  %2395 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2394, <2 x double> %2351, <2 x double> %2392)
  store <2 x double> %2395, ptr %651, align 8, !tbaa !19
  %2396 = tail call double @llvm.fmuladd.f64(double %2391, double %2307, double %2349)
  store double %2396, ptr %652, align 8, !tbaa !19
  %2397 = fadd double %2317, %2368
  %2398 = fadd double %2323, %2369
  %2399 = fadd double %2329, %2370
  %2400 = tail call double @llvm.fmuladd.f64(double %2289, double %2397, double %2398)
  %2401 = tail call double @llvm.fmuladd.f64(double %2400, double %2289, double %2399)
  %2402 = insertelement <2 x double> poison, double %2401, i64 0
  %2403 = shufflevector <2 x double> %2402, <2 x double> poison, <2 x i32> zeroinitializer
  %2404 = fmul <2 x double> %2351, %2403
  %2405 = fadd <2 x double> %2273, %2404
  %2406 = load <2 x double>, ptr %2300, align 8, !tbaa !19
  %2407 = fsub <2 x double> %2406, %2404
  store <2 x double> %2407, ptr %2300, align 8, !tbaa !19
  %2408 = fmul double %2307, %2401
  %2409 = fadd double %2272, %2408
  %2410 = getelementptr inbounds %class.Vector, ptr %625, i64 %2282, i32 2
  %2411 = load double, ptr %2410, align 8, !tbaa !87
  %2412 = fsub double %2411, %2408
  store double %2412, ptr %2410, align 8, !tbaa !87
  %2413 = add nuw nsw i64 %2271, 1
  %2414 = icmp eq i64 %2413, %2269
  br i1 %2414, label %2415, label %2270

2415:                                             ; preds = %2270, %2259
  %2416 = phi double [ %2260, %2259 ], [ %2409, %2270 ]
  %2417 = phi <2 x double> [ %2261, %2259 ], [ %2405, %2270 ]
  %2418 = phi <2 x double> [ %2262, %2259 ], [ %2388, %2270 ]
  %2419 = load double, ptr @_ZN20ComputeNonbondedUtil7cutoff2E, align 8, !tbaa !19
  %2420 = tail call noundef i32 @_Z22pairlist_from_pairlistddddPK8CompAtomPKtiPtdPd(double noundef %2419, double noundef %2120, double noundef %2121, double noundef %694, ptr noundef %41, ptr noundef %2082, i32 noundef %2083, ptr noundef %94, double noundef %31, ptr noundef %140)
  %2421 = add nsw i32 %2265, %2420
  %2422 = icmp sgt i32 %2420, 0
  %2423 = extractelement <2 x double> %2418, i64 0
  br i1 %2422, label %2424, label %2513

2424:                                             ; preds = %2415
  %2425 = load ptr, ptr @_ZN20ComputeNonbondedUtil8r2_tableE, align 8, !tbaa !23
  %2426 = zext i32 %2420 to i64
  br label %2427

2427:                                             ; preds = %2424, %2427
  %2428 = phi i64 [ 0, %2424 ], [ %2511, %2427 ]
  %2429 = phi double [ %2423, %2424 ], [ %2488, %2427 ]
  %2430 = phi double [ %2416, %2424 ], [ %2507, %2427 ]
  %2431 = phi <2 x double> [ %2417, %2424 ], [ %2503, %2427 ]
  %2432 = shl nuw nsw i64 %2428, 1
  %2433 = getelementptr inbounds i32, ptr %141, i64 %2432
  %2434 = load i32, ptr %2433, align 4, !tbaa !5
  %2435 = ashr i32 %2434, 14
  %2436 = add nsw i32 %2435, %34
  %2437 = getelementptr inbounds i16, ptr %94, i64 %2428
  %2438 = load i16, ptr %2437, align 2, !tbaa !44
  %2439 = zext i16 %2438 to i64
  %2440 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %2439
  %2441 = getelementptr inbounds double, ptr %140, i64 %2428
  %2442 = load double, ptr %2441, align 8, !tbaa !19
  %2443 = sext i32 %2436 to i64
  %2444 = getelementptr inbounds double, ptr %2425, i64 %2443
  %2445 = load double, ptr %2444, align 8, !tbaa !19
  %2446 = fsub double %2442, %2445
  %2447 = shl nsw i32 %2436, 4
  %2448 = sext i32 %2447 to i64
  %2449 = getelementptr inbounds double, ptr %27, i64 %2448
  %2450 = getelementptr inbounds %class.Vector, ptr %625, i64 %2439
  %2451 = getelementptr inbounds %struct.CompAtom, ptr %41, i64 %2439, i32 1
  %2452 = load float, ptr %2451, align 8, !tbaa !79
  %2453 = fpext float %2452 to double
  %2454 = fmul double %2109, %2453
  %2455 = getelementptr inbounds %class.Vector, ptr %2440, i64 0, i32 2
  %2456 = load double, ptr %2455, align 8, !tbaa !49
  %2457 = fsub double %694, %2456
  %2458 = getelementptr inbounds double, ptr %2449, i64 8
  %2459 = load double, ptr %2458, align 8, !tbaa !19
  %2460 = getelementptr inbounds double, ptr %2449, i64 9
  %2461 = load double, ptr %2460, align 8, !tbaa !19
  %2462 = getelementptr inbounds double, ptr %2449, i64 10
  %2463 = load double, ptr %2462, align 8, !tbaa !19
  %2464 = getelementptr inbounds double, ptr %2449, i64 11
  %2465 = load double, ptr %2464, align 8, !tbaa !19
  %2466 = getelementptr inbounds double, ptr %2449, i64 12
  %2467 = load double, ptr %2466, align 8, !tbaa !19
  %2468 = fsub double %2459, %2467
  %2469 = getelementptr inbounds double, ptr %2449, i64 13
  %2470 = load double, ptr %2469, align 8, !tbaa !19
  %2471 = fsub double %2461, %2470
  %2472 = getelementptr inbounds double, ptr %2449, i64 14
  %2473 = load double, ptr %2472, align 8, !tbaa !19
  %2474 = fsub double %2463, %2473
  %2475 = getelementptr inbounds double, ptr %2449, i64 15
  %2476 = load double, ptr %2475, align 8, !tbaa !19
  %2477 = fsub double %2465, %2476
  %2478 = fmul double %2454, %2468
  %2479 = fmul double %2454, %2471
  %2480 = fmul double %2454, %2474
  %2481 = fmul double %2454, %2477
  %2482 = fmul double %2446, %2478
  %2483 = fmul double %2479, 2.500000e-01
  %2484 = tail call double @llvm.fmuladd.f64(double %2482, double 0x3FC5555555555555, double %2483)
  %2485 = fmul double %2480, 5.000000e-01
  %2486 = tail call double @llvm.fmuladd.f64(double %2484, double %2446, double %2485)
  %2487 = tail call double @llvm.fmuladd.f64(double %2486, double %2446, double %2481)
  %2488 = fsub double %2429, %2487
  %2489 = tail call double @llvm.fmuladd.f64(double %2446, double %2478, double %2479)
  %2490 = tail call double @llvm.fmuladd.f64(double %2489, double %2446, double %2480)
  %2491 = fmul double %2103, %2490
  %2492 = load double, ptr %652, align 8, !tbaa !19
  %2493 = tail call double @llvm.fmuladd.f64(double %2491, double %2457, double %2492)
  %2494 = load <2 x double>, ptr %2440, align 8, !tbaa !19
  %2495 = fsub <2 x double> %691, %2494
  %2496 = load <2 x double>, ptr %651, align 8, !tbaa !19
  %2497 = insertelement <2 x double> poison, double %2491, i64 0
  %2498 = shufflevector <2 x double> %2497, <2 x double> poison, <2 x i32> zeroinitializer
  %2499 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2498, <2 x double> %2495, <2 x double> %2496)
  store <2 x double> %2499, ptr %651, align 8, !tbaa !19
  store double %2493, ptr %652, align 8, !tbaa !19
  %2500 = insertelement <2 x double> poison, double %2490, i64 0
  %2501 = shufflevector <2 x double> %2500, <2 x double> poison, <2 x i32> zeroinitializer
  %2502 = fmul <2 x double> %2495, %2501
  %2503 = fadd <2 x double> %2431, %2502
  %2504 = load <2 x double>, ptr %2450, align 8, !tbaa !19
  %2505 = fsub <2 x double> %2504, %2502
  store <2 x double> %2505, ptr %2450, align 8, !tbaa !19
  %2506 = fmul double %2457, %2490
  %2507 = fadd double %2430, %2506
  %2508 = getelementptr inbounds %class.Vector, ptr %625, i64 %2439, i32 2
  %2509 = load double, ptr %2508, align 8, !tbaa !87
  %2510 = fsub double %2509, %2506
  store double %2510, ptr %2508, align 8, !tbaa !87
  %2511 = add nuw nsw i64 %2428, 1
  %2512 = icmp eq i64 %2511, %2426
  br i1 %2512, label %2513, label %2427

2513:                                             ; preds = %2427, %2415
  %2514 = phi double [ %2416, %2415 ], [ %2507, %2427 ]
  %2515 = phi double [ %2423, %2415 ], [ %2488, %2427 ]
  %2516 = phi <2 x double> [ %2417, %2415 ], [ %2503, %2427 ]
  %2517 = getelementptr inbounds %class.Vector, ptr %625, i64 %673
  %2518 = load <2 x double>, ptr %2517, align 8, !tbaa !19
  %2519 = fadd <2 x double> %2516, %2518
  store <2 x double> %2519, ptr %2517, align 8, !tbaa !19
  %2520 = getelementptr inbounds %class.Vector, ptr %625, i64 %673, i32 2
  %2521 = load double, ptr %2520, align 8, !tbaa !87
  %2522 = fadd double %2514, %2521
  store double %2522, ptr %2520, align 8, !tbaa !87
  %2523 = insertelement <2 x double> %2418, double %2515, i64 0
  br label %2524

2524:                                             ; preds = %1351, %1297, %2513, %684
  %2525 = phi i32 [ %689, %2513 ], [ %685, %684 ], [ %689, %1297 ], [ %689, %1351 ]
  %2526 = phi i32 [ %2086, %2513 ], [ %670, %684 ], [ %1246, %1297 ], [ %1246, %1351 ]
  %2527 = phi i32 [ %2087, %2513 ], [ %669, %684 ], [ %1247, %1297 ], [ %1247, %1351 ]
  %2528 = phi i32 [ %2088, %2513 ], [ %668, %684 ], [ %1248, %1297 ], [ %1248, %1351 ]
  %2529 = phi i32 [ %2089, %2513 ], [ %667, %684 ], [ %1249, %1297 ], [ %1249, %1351 ]
  %2530 = phi i32 [ %696, %2513 ], [ %666, %684 ], [ %696, %1297 ], [ %696, %1351 ]
  %2531 = phi ptr [ %2090, %2513 ], [ %665, %684 ], [ %942, %1297 ], [ %942, %1351 ]
  %2532 = phi ptr [ %2091, %2513 ], [ %664, %684 ], [ %943, %1297 ], [ %943, %1351 ]
  %2533 = phi ptr [ %2092, %2513 ], [ %663, %684 ], [ %944, %1297 ], [ %944, %1351 ]
  %2534 = phi i32 [ %662, %2513 ], [ %687, %684 ], [ %662, %1297 ], [ %662, %1351 ]
  %2535 = phi i32 [ %2421, %2513 ], [ %661, %684 ], [ %661, %1297 ], [ %661, %1351 ]
  %2536 = phi <2 x double> [ %2523, %2513 ], [ %672, %684 ], [ %672, %1297 ], [ %672, %1351 ]
  %2537 = add nsw i32 %2534, 1
  %2538 = icmp slt i32 %2537, %631
  br i1 %2538, label %660, label %2539

2539:                                             ; preds = %2524, %619
  %2540 = phi ptr [ null, %619 ], [ %2533, %2524 ]
  %2541 = phi i32 [ 0, %619 ], [ %2535, %2524 ]
  %2542 = phi <2 x double> [ zeroinitializer, %619 ], [ %2536, %2524 ]
  %2543 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 4
  %2544 = load ptr, ptr %2543, align 8, !tbaa !23
  %2545 = icmp sgt i32 %36, 0
  br i1 %2545, label %2546, label %2548

2546:                                             ; preds = %2539
  %2547 = zext i32 %36 to i64
  br label %2574

2548:                                             ; preds = %2574, %2539
  %2549 = phi <4 x double> [ zeroinitializer, %2539 ], [ %2604, %2574 ]
  %2550 = phi <2 x double> [ zeroinitializer, %2539 ], [ %2599, %2574 ]
  %2551 = sitofp i32 %2541 to double
  %2552 = getelementptr inbounds double, ptr %6, i64 22
  %2553 = load double, ptr %2552, align 8, !tbaa !19
  %2554 = fadd double %2553, %2551
  store double %2554, ptr %2552, align 8, !tbaa !19
  %2555 = getelementptr inbounds double, ptr %6, i64 1
  %2556 = load <2 x double>, ptr %2555, align 8, !tbaa !19
  %2557 = fadd <2 x double> %2542, %2556
  store <2 x double> %2557, ptr %2555, align 8, !tbaa !19
  %2558 = getelementptr inbounds double, ptr %6, i64 12
  %2559 = load <4 x double>, ptr %2558, align 8, !tbaa !19
  %2560 = shufflevector <2 x double> %2550, <2 x double> poison, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>
  %2561 = shufflevector <4 x double> %2560, <4 x double> %2549, <4 x i32> <i32 0, i32 1, i32 7, i32 poison>
  %2562 = shufflevector <4 x double> %2561, <4 x double> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 1>
  %2563 = fadd <4 x double> %2562, %2559
  store <4 x double> %2563, ptr %2558, align 8, !tbaa !19
  %2564 = getelementptr inbounds double, ptr %6, i64 16
  %2565 = load <4 x double>, ptr %2564, align 8, !tbaa !19
  %2566 = shufflevector <4 x double> %2549, <4 x double> poison, <4 x i32> <i32 2, i32 1, i32 3, i32 poison>
  %2567 = shufflevector <4 x double> %2566, <4 x double> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 1>
  %2568 = fadd <4 x double> %2567, %2565
  store <4 x double> %2568, ptr %2564, align 8, !tbaa !19
  %2569 = getelementptr inbounds double, ptr %6, i64 20
  %2570 = load double, ptr %2569, align 8, !tbaa !19
  %2571 = extractelement <4 x double> %2549, i64 0
  %2572 = fadd double %2571, %2570
  store double %2572, ptr %2569, align 8, !tbaa !19
  %2573 = icmp eq ptr %2540, null
  br i1 %2573, label %2608, label %2607

2574:                                             ; preds = %2546, %2574
  %2575 = phi i64 [ 0, %2546 ], [ %2605, %2574 ]
  %2576 = phi <4 x double> [ zeroinitializer, %2546 ], [ %2604, %2574 ]
  %2577 = phi <2 x double> [ zeroinitializer, %2546 ], [ %2599, %2574 ]
  %2578 = getelementptr inbounds %class.Vector, ptr %625, i64 %2575
  %2579 = getelementptr inbounds %class.Vector, ptr %2544, i64 %2575
  %2580 = getelementptr inbounds %class.Vector, ptr %625, i64 %2575, i32 1
  %2581 = load <2 x double>, ptr %2578, align 8, !tbaa !19
  %2582 = load <2 x double>, ptr %2579, align 8, !tbaa !19
  %2583 = fadd <2 x double> %2581, %2582
  store <2 x double> %2583, ptr %2579, align 8, !tbaa !19
  %2584 = getelementptr inbounds %class.Vector, ptr %625, i64 %2575, i32 2
  %2585 = load double, ptr %2584, align 8, !tbaa !87
  %2586 = getelementptr inbounds %class.Vector, ptr %2544, i64 %2575, i32 2
  %2587 = load double, ptr %2586, align 8, !tbaa !87
  %2588 = fadd double %2585, %2587
  store double %2588, ptr %2586, align 8, !tbaa !87
  %2589 = load double, ptr %2578, align 8, !tbaa !191
  %2590 = getelementptr inbounds %struct.CompAtom, ptr %39, i64 %2575
  %2591 = load double, ptr %2590, align 8, !tbaa !67
  %2592 = getelementptr inbounds %class.Vector, ptr %2590, i64 0, i32 1
  %2593 = load <2 x double>, ptr %2592, align 8, !tbaa !19
  %2594 = shufflevector <2 x double> %2593, <2 x double> poison, <4 x i32> <i32 1, i32 1, i32 0, i32 1>
  %2595 = insertelement <2 x double> poison, double %2589, i64 0
  %2596 = shufflevector <2 x double> %2595, <2 x double> poison, <2 x i32> zeroinitializer
  %2597 = shufflevector <2 x double> %2593, <2 x double> poison, <2 x i32> <i32 poison, i32 0>
  %2598 = insertelement <2 x double> %2597, double %2591, i64 0
  %2599 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2596, <2 x double> %2598, <2 x double> %2577)
  %2600 = load <2 x double>, ptr %2580, align 8, !tbaa !19
  %2601 = shufflevector <2 x double> %2600, <2 x double> poison, <4 x i32> <i32 1, i32 0, i32 poison, i32 poison>
  %2602 = insertelement <4 x double> %2601, double %2589, i64 3
  %2603 = shufflevector <4 x double> %2602, <4 x double> poison, <4 x i32> <i32 0, i32 1, i32 1, i32 3>
  %2604 = tail call <4 x double> @llvm.fmuladd.v4f64(<4 x double> %2603, <4 x double> %2594, <4 x double> %2576)
  %2605 = add nuw nsw i64 %2575, 1
  %2606 = icmp eq i64 %2605, %2547
  br i1 %2606, label %2548, label %2574

2607:                                             ; preds = %2548
  tail call void @_ZdaPv(ptr noundef nonnull %2540) #10
  br label %2608

2608:                                             ; preds = %2548, %2607, %1
  ret void
}

; Function Attrs: mustprogress nocallback nofree nounwind willreturn memory(argmem: readwrite)
declare void @llvm.memcpy.p0.p0.i64(ptr noalias nocapture writeonly, ptr noalias nocapture readonly, i64, i1 immarg) #7

; Function Attrs: sspstrong uwtable
define linkonce_odr dso_local void @_ZN14ResizeArrayRawI6VectorE6resizeEi(ptr noundef nonnull align 8 dereferenceable(36) %0, i32 noundef %1) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %class.ResizeArrayRaw.25, ptr %0, i64 0, i32 2
  %4 = load i32, ptr %3, align 8, !tbaa !379
  %5 = icmp slt i32 %4, %1
  br i1 %5, label %6, label %79

6:                                                ; preds = %2
  %7 = getelementptr inbounds %class.ResizeArrayRaw.25, ptr %0, i64 0, i32 3
  %8 = load i32, ptr %7, align 4, !tbaa !380
  %9 = icmp slt i32 %8, %1
  br i1 %9, label %10, label %45

10:                                               ; preds = %6
  %11 = sitofp i32 %8 to float
  %12 = getelementptr inbounds %class.ResizeArrayRaw.25, ptr %0, i64 0, i32 5
  %13 = load float, ptr %12, align 4, !tbaa !381
  %14 = fmul float %13, %11
  %15 = fptosi float %14 to i32
  %16 = tail call i32 @llvm.smax.i32(i32 %15, i32 %1)
  %17 = sub nsw i32 %16, %8
  %18 = getelementptr inbounds %class.ResizeArrayRaw.25, ptr %0, i64 0, i32 6
  %19 = load i32, ptr %18, align 8, !tbaa !382
  %20 = icmp slt i32 %17, %19
  %21 = add nsw i32 %19, %8
  %22 = select i1 %20, i32 %21, i32 %16
  %23 = sext i32 %22 to i64
  %24 = mul nsw i64 %23, 24
  %25 = add nsw i64 %24, 31
  %26 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %25) #9
  %27 = getelementptr inbounds i8, ptr %26, i64 31
  %28 = ptrtoint ptr %27 to i64
  %29 = and i64 %28, 31
  %30 = sub nsw i64 0, %29
  %31 = getelementptr inbounds i8, ptr %27, i64 %30
  %32 = load ptr, ptr %0, align 8, !tbaa !174
  %33 = sext i32 %4 to i64
  %34 = mul nsw i64 %33, 24
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %31, ptr align 1 %32, i64 %34, i1 false)
  %35 = icmp eq i32 %8, 0
  br i1 %35, label %42, label %36

36:                                               ; preds = %10
  %37 = getelementptr inbounds %class.ResizeArrayRaw.25, ptr %0, i64 0, i32 1
  %38 = load ptr, ptr %37, align 8, !tbaa !383
  %39 = icmp eq ptr %38, null
  br i1 %39, label %42, label %40

40:                                               ; preds = %36
  tail call void @_ZdaPv(ptr noundef nonnull %38) #10
  %41 = load i32, ptr %3, align 8, !tbaa !379
  br label %42

42:                                               ; preds = %40, %36, %10
  %43 = phi i32 [ %41, %40 ], [ %4, %36 ], [ %4, %10 ]
  %44 = getelementptr inbounds %class.ResizeArrayRaw.25, ptr %0, i64 0, i32 1
  store ptr %26, ptr %44, align 8, !tbaa !383
  store ptr %31, ptr %0, align 8, !tbaa !174
  store i32 %22, ptr %7, align 4, !tbaa !380
  br label %45

45:                                               ; preds = %6, %42
  %46 = phi i32 [ %4, %6 ], [ %43, %42 ]
  %47 = icmp slt i32 %46, %1
  br i1 %47, label %48, label %79

48:                                               ; preds = %45
  %49 = load ptr, ptr %0, align 8, !tbaa !174
  %50 = sext i32 %46 to i64
  %51 = sext i32 %1 to i64
  %52 = sub nsw i64 %51, %50
  %53 = icmp ult i64 %52, 8
  br i1 %53, label %71, label %54

54:                                               ; preds = %48
  %55 = and i64 %52, -8
  %56 = add nsw i64 %55, %50
  br label %57

57:                                               ; preds = %57, %54
  %58 = phi i64 [ 0, %54 ], [ %67, %57 ]
  %59 = add i64 %58, %50
  %60 = add i64 %59, 2
  %61 = add i64 %59, 4
  %62 = add i64 %59, 6
  %63 = getelementptr inbounds %class.Vector, ptr %49, i64 %59
  %64 = getelementptr inbounds %class.Vector, ptr %49, i64 %60
  %65 = getelementptr inbounds %class.Vector, ptr %49, i64 %61
  %66 = getelementptr inbounds %class.Vector, ptr %49, i64 %62
  store <6 x double> <double -9.999900e+04, double -9.999900e+04, double -9.999900e+04, double -9.999900e+04, double -9.999900e+04, double -9.999900e+04>, ptr %63, align 8, !tbaa !19
  store <6 x double> <double -9.999900e+04, double -9.999900e+04, double -9.999900e+04, double -9.999900e+04, double -9.999900e+04, double -9.999900e+04>, ptr %64, align 8, !tbaa !19
  store <6 x double> <double -9.999900e+04, double -9.999900e+04, double -9.999900e+04, double -9.999900e+04, double -9.999900e+04, double -9.999900e+04>, ptr %65, align 8, !tbaa !19
  store <6 x double> <double -9.999900e+04, double -9.999900e+04, double -9.999900e+04, double -9.999900e+04, double -9.999900e+04, double -9.999900e+04>, ptr %66, align 8, !tbaa !19
  %67 = add nuw i64 %58, 8
  %68 = icmp eq i64 %67, %55
  br i1 %68, label %69, label %57, !llvm.loop !384

69:                                               ; preds = %57
  %70 = icmp eq i64 %52, %55
  br i1 %70, label %79, label %71

71:                                               ; preds = %48, %69
  %72 = phi i64 [ %50, %48 ], [ %56, %69 ]
  br label %73

73:                                               ; preds = %71, %73
  %74 = phi i64 [ %77, %73 ], [ %72, %71 ]
  %75 = getelementptr inbounds %class.Vector, ptr %49, i64 %74
  store <2 x double> <double -9.999900e+04, double -9.999900e+04>, ptr %75, align 8, !tbaa !19
  %76 = getelementptr inbounds %class.Vector, ptr %49, i64 %74, i32 2
  store double -9.999900e+04, ptr %76, align 8, !tbaa !87
  %77 = add nsw i64 %74, 1
  %78 = icmp eq i64 %77, %51
  br i1 %78, label %79, label %73, !llvm.loop !385

79:                                               ; preds = %73, %69, %2, %45
  store i32 %1, ptr %3, align 8, !tbaa !379
  ret void
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smax.i32(i32, i32) #8

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare <2 x double> @llvm.fmuladd.v2f64(<2 x double>, <2 x double>, <2 x double>) #8

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare <4 x double> @llvm.fmuladd.v4f64(<4 x double>, <4 x double>, <4 x double>) #8

attributes #0 = { sspstrong uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cmov,+crc32,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" }
attributes #1 = { "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cmov,+crc32,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" }
attributes #2 = { nobuiltin allocsize(0) "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cmov,+crc32,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" }
attributes #3 = { mustprogress nocallback nofree nounwind willreturn memory(argmem: write) }
attributes #4 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #5 = { inlinehint nounwind sspstrong uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cmov,+crc32,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" }
attributes #6 = { nobuiltin nounwind "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cmov,+crc32,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" }
attributes #7 = { mustprogress nocallback nofree nounwind willreturn memory(argmem: readwrite) }
attributes #8 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #9 = { builtin allocsize(0) }
attributes #10 = { builtin nounwind }

!llvm.module.flags = !{!0, !1, !2, !3}
!llvm.ident = !{!4}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 8, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{i32 7, !"uwtable", i32 2}
!4 = !{!"clang version 17.0.6"}
!5 = !{!6, !6, i64 0}
!6 = !{!"int", !7, i64 0}
!7 = !{!"omnipotent char", !8, i64 0}
!8 = !{!"Simple C++ TBAA"}
!9 = !{!10, !13, i64 112}
!10 = !{!"_ZTS9nonbonded", !7, i64 0, !7, i64 16, !7, i64 32, !7, i64 48, !7, i64 64, !7, i64 80, !11, i64 88, !13, i64 112, !13, i64 120, !13, i64 128, !13, i64 136, !6, i64 144, !6, i64 148, !12, i64 152, !12, i64 160, !6, i64 168, !6, i64 172, !6, i64 176, !6, i64 180}
!11 = !{!"_ZTS6Vector", !12, i64 0, !12, i64 8, !12, i64 16}
!12 = !{!"double", !7, i64 0}
!13 = !{!"any pointer", !7, i64 0}
!14 = !{!10, !13, i64 136}
!15 = !{!10, !6, i64 144}
!16 = !{!10, !6, i64 148}
!17 = !{!18, !6, i64 8}
!18 = !{!"_ZTS9Pairlists", !13, i64 0, !6, i64 8, !6, i64 12}
!19 = !{!12, !12, i64 0}
!20 = !{!10, !12, i64 104}
!21 = !{!10, !12, i64 152}
!22 = !{!10, !12, i64 160}
!23 = !{!13, !13, i64 0}
!24 = !{!10, !13, i64 128}
!25 = !{!26, !13, i64 8}
!26 = !{!"_ZTS11ResizeArrayItE", !13, i64 8}
!27 = !{!28, !6, i64 16}
!28 = !{!"_ZTS14ResizeArrayRawItE", !13, i64 0, !13, i64 8, !6, i64 16, !6, i64 20, !6, i64 24, !29, i64 28, !6, i64 32}
!29 = !{!"float", !7, i64 0}
!30 = !{!28, !6, i64 20}
!31 = !{!28, !29, i64 28}
!32 = !{!28, !6, i64 32}
!33 = !{!28, !13, i64 0}
!34 = !{!28, !13, i64 8}
!35 = !{!36, !13, i64 8}
!36 = !{!"_ZTS11ResizeArrayIdE", !13, i64 8}
!37 = !{!38, !6, i64 16}
!38 = !{!"_ZTS14ResizeArrayRawIdE", !13, i64 0, !13, i64 8, !6, i64 16, !6, i64 20, !6, i64 24, !29, i64 28, !6, i64 32}
!39 = !{!38, !6, i64 20}
!40 = !{!38, !29, i64 28}
!41 = !{!38, !6, i64 32}
!42 = !{!38, !13, i64 0}
!43 = !{!38, !13, i64 8}
!44 = !{!45, !45, i64 0}
!45 = !{!"short", !7, i64 0}
!46 = !{!18, !13, i64 0}
!47 = !{!10, !6, i64 172}
!48 = !{!10, !6, i64 180}
!49 = !{!50, !12, i64 16}
!50 = !{!"_ZTS8CompAtom", !11, i64 0, !29, i64 24, !45, i64 28, !7, i64 30, !6, i64 31, !6, i64 31, !6, i64 31}
!51 = !{!52, !13, i64 8}
!52 = !{!"_ZTS8Molecule", !13, i64 0, !13, i64 8, !13, i64 16, !13, i64 24, !6, i64 32, !6, i64 36, !13, i64 40}
!53 = !{!54, !6, i64 0}
!54 = !{!"_ZTS14ExclusionCheck", !6, i64 0, !6, i64 4, !13, i64 8}
!55 = !{!54, !6, i64 4}
!56 = !{!54, !13, i64 8}
!57 = !{!7, !7, i64 0}
!58 = distinct !{!58, !59}
!59 = !{!"llvm.loop.unroll.disable"}
!60 = !{!52, !6, i64 32}
!61 = distinct !{!61, !59}
!62 = !{!52, !13, i64 16}
!63 = distinct !{!63, !59}
!64 = !{!52, !13, i64 24}
!65 = distinct !{!65, !59}
!66 = !{!50, !12, i64 8}
!67 = !{!50, !12, i64 0}
!68 = !{!18, !6, i64 12}
!69 = distinct !{!69, !70, !71}
!70 = !{!"llvm.loop.isvectorized", i32 1}
!71 = !{!"llvm.loop.unroll.runtime.disable"}
!72 = distinct !{!72, !70, !71}
!73 = distinct !{!73, !59}
!74 = distinct !{!74, !70}
!75 = distinct !{!75, !70, !71}
!76 = distinct !{!76, !70, !71}
!77 = distinct !{!77, !59}
!78 = distinct !{!78, !70}
!79 = !{!50, !29, i64 24}
!80 = !{!50, !45, i64 28}
!81 = !{!82, !13, i64 8}
!82 = !{!"_ZTS7LJTable", !13, i64 0, !13, i64 8, !6, i64 16}
!83 = !{!82, !6, i64 16}
!84 = !{!85, !12, i64 0}
!85 = !{!"_ZTSN7LJTable10TableEntryE", !12, i64 0, !12, i64 8}
!86 = !{!85, !12, i64 8}
!87 = !{!11, !12, i64 16}
!88 = distinct !{!88, !59}
!89 = distinct !{!89, !59}
!90 = distinct !{!90, !59}
!91 = distinct !{!91, !59}
!92 = distinct !{!92, !70, !71}
!93 = distinct !{!93, !70, !71}
!94 = distinct !{!94, !59}
!95 = distinct !{!95, !70}
!96 = distinct !{!96, !70, !71}
!97 = distinct !{!97, !70, !71}
!98 = distinct !{!98, !59}
!99 = distinct !{!99, !70}
!100 = distinct !{!100, !59}
!101 = distinct !{!101, !59}
!102 = distinct !{!102, !59}
!103 = distinct !{!103, !59}
!104 = distinct !{!104, !70, !71}
!105 = distinct !{!105, !70, !71}
!106 = distinct !{!106, !59}
!107 = distinct !{!107, !70}
!108 = distinct !{!108, !70, !71}
!109 = distinct !{!109, !70, !71}
!110 = distinct !{!110, !59}
!111 = distinct !{!111, !70}
!112 = distinct !{!112, !59}
!113 = distinct !{!113, !59}
!114 = distinct !{!114, !59}
!115 = distinct !{!115, !59}
!116 = distinct !{!116, !70, !71}
!117 = distinct !{!117, !70, !71}
!118 = distinct !{!118, !59}
!119 = distinct !{!119, !70}
!120 = distinct !{!120, !70, !71}
!121 = distinct !{!121, !70, !71}
!122 = distinct !{!122, !59}
!123 = distinct !{!123, !70}
!124 = distinct !{!124, !59}
!125 = distinct !{!125, !59}
!126 = distinct !{!126, !59}
!127 = distinct !{!127, !59}
!128 = distinct !{!128, !70, !71}
!129 = distinct !{!129, !70, !71}
!130 = distinct !{!130, !59}
!131 = distinct !{!131, !70}
!132 = distinct !{!132, !70, !71}
!133 = distinct !{!133, !70, !71}
!134 = distinct !{!134, !59}
!135 = distinct !{!135, !70}
!136 = distinct !{!136, !59}
!137 = distinct !{!137, !59}
!138 = distinct !{!138, !59}
!139 = distinct !{!139, !59}
!140 = distinct !{!140, !70, !71}
!141 = distinct !{!141, !70, !71}
!142 = distinct !{!142, !59}
!143 = distinct !{!143, !70}
!144 = distinct !{!144, !70, !71}
!145 = distinct !{!145, !70, !71}
!146 = distinct !{!146, !59}
!147 = distinct !{!147, !70}
!148 = distinct !{!148, !59}
!149 = distinct !{!149, !59}
!150 = distinct !{!150, !59}
!151 = distinct !{!151, !59}
!152 = distinct !{!152, !70, !71}
!153 = distinct !{!153, !70, !71}
!154 = distinct !{!154, !59}
!155 = distinct !{!155, !70}
!156 = distinct !{!156, !70, !71}
!157 = distinct !{!157, !70, !71}
!158 = distinct !{!158, !59}
!159 = distinct !{!159, !70}
!160 = distinct !{!160, !59}
!161 = distinct !{!161, !59}
!162 = distinct !{!162, !59}
!163 = distinct !{!163, !59}
!164 = distinct !{!164, !70, !71}
!165 = distinct !{!165, !70, !71}
!166 = distinct !{!166, !59}
!167 = distinct !{!167, !70}
!168 = distinct !{!168, !70, !71}
!169 = distinct !{!169, !70, !71}
!170 = distinct !{!170, !59}
!171 = distinct !{!171, !70}
!172 = !{!173, !13, i64 8}
!173 = !{!"_ZTS11ResizeArrayI6VectorE", !13, i64 8}
!174 = !{!175, !13, i64 0}
!175 = !{!"_ZTS14ResizeArrayRawI6VectorE", !13, i64 0, !13, i64 8, !6, i64 16, !6, i64 20, !6, i64 24, !29, i64 28, !6, i64 32}
!176 = distinct !{!176, !59}
!177 = distinct !{!177, !59}
!178 = distinct !{!178, !59}
!179 = distinct !{!179, !59}
!180 = distinct !{!180, !70, !71}
!181 = distinct !{!181, !70, !71}
!182 = distinct !{!182, !71, !70}
!183 = distinct !{!183, !70, !71}
!184 = distinct !{!184, !70, !71}
!185 = distinct !{!185, !59}
!186 = distinct !{!186, !70}
!187 = distinct !{!187, !70, !71}
!188 = distinct !{!188, !70, !71}
!189 = distinct !{!189, !59}
!190 = distinct !{!190, !70}
!191 = !{!11, !12, i64 0}
!192 = distinct !{!192, !59}
!193 = distinct !{!193, !59}
!194 = distinct !{!194, !59}
!195 = distinct !{!195, !59}
!196 = distinct !{!196, !70, !71}
!197 = distinct !{!197, !70, !71}
!198 = distinct !{!198, !71, !70}
!199 = distinct !{!199, !70, !71}
!200 = distinct !{!200, !70, !71}
!201 = distinct !{!201, !59}
!202 = distinct !{!202, !70}
!203 = distinct !{!203, !70, !71}
!204 = distinct !{!204, !70, !71}
!205 = distinct !{!205, !59}
!206 = distinct !{!206, !70}
!207 = distinct !{!207, !59}
!208 = distinct !{!208, !59}
!209 = distinct !{!209, !59}
!210 = distinct !{!210, !59}
!211 = distinct !{!211, !70, !71}
!212 = distinct !{!212, !70, !71}
!213 = distinct !{!213, !71, !70}
!214 = distinct !{!214, !70, !71}
!215 = distinct !{!215, !70, !71}
!216 = distinct !{!216, !59}
!217 = distinct !{!217, !70}
!218 = distinct !{!218, !70, !71}
!219 = distinct !{!219, !70, !71}
!220 = distinct !{!220, !59}
!221 = distinct !{!221, !70}
!222 = distinct !{!222, !59}
!223 = distinct !{!223, !59}
!224 = distinct !{!224, !59}
!225 = distinct !{!225, !59}
!226 = distinct !{!226, !70, !71}
!227 = distinct !{!227, !70, !71}
!228 = distinct !{!228, !71, !70}
!229 = distinct !{!229, !70, !71}
!230 = distinct !{!230, !70, !71}
!231 = distinct !{!231, !59}
!232 = distinct !{!232, !70}
!233 = distinct !{!233, !70, !71}
!234 = distinct !{!234, !70, !71}
!235 = distinct !{!235, !59}
!236 = distinct !{!236, !70}
!237 = distinct !{!237, !59}
!238 = distinct !{!238, !59}
!239 = distinct !{!239, !59}
!240 = distinct !{!240, !59}
!241 = distinct !{!241, !70, !71}
!242 = distinct !{!242, !70, !71}
!243 = distinct !{!243, !71, !70}
!244 = distinct !{!244, !70, !71}
!245 = distinct !{!245, !70, !71}
!246 = distinct !{!246, !59}
!247 = distinct !{!247, !70}
!248 = distinct !{!248, !70, !71}
!249 = distinct !{!249, !70, !71}
!250 = distinct !{!250, !59}
!251 = distinct !{!251, !70}
!252 = distinct !{!252, !59}
!253 = distinct !{!253, !59}
!254 = distinct !{!254, !59}
!255 = distinct !{!255, !59}
!256 = distinct !{!256, !70, !71}
!257 = distinct !{!257, !70, !71}
!258 = distinct !{!258, !71, !70}
!259 = distinct !{!259, !70, !71}
!260 = distinct !{!260, !70, !71}
!261 = distinct !{!261, !59}
!262 = distinct !{!262, !70}
!263 = distinct !{!263, !70, !71}
!264 = distinct !{!264, !70, !71}
!265 = distinct !{!265, !59}
!266 = distinct !{!266, !70}
!267 = distinct !{!267, !59}
!268 = distinct !{!268, !59}
!269 = distinct !{!269, !59}
!270 = distinct !{!270, !59}
!271 = distinct !{!271, !70, !71}
!272 = distinct !{!272, !70, !71}
!273 = distinct !{!273, !71, !70}
!274 = distinct !{!274, !70, !71}
!275 = distinct !{!275, !70, !71}
!276 = distinct !{!276, !59}
!277 = distinct !{!277, !70}
!278 = distinct !{!278, !70, !71}
!279 = distinct !{!279, !70, !71}
!280 = distinct !{!280, !59}
!281 = distinct !{!281, !70}
!282 = distinct !{!282, !59}
!283 = distinct !{!283, !59}
!284 = distinct !{!284, !59}
!285 = distinct !{!285, !59}
!286 = distinct !{!286, !70, !71}
!287 = distinct !{!287, !70, !71}
!288 = distinct !{!288, !71, !70}
!289 = distinct !{!289, !70, !71}
!290 = distinct !{!290, !70, !71}
!291 = distinct !{!291, !59}
!292 = distinct !{!292, !70}
!293 = distinct !{!293, !70, !71}
!294 = distinct !{!294, !70, !71}
!295 = distinct !{!295, !59}
!296 = distinct !{!296, !70}
!297 = distinct !{!297, !59}
!298 = distinct !{!298, !59}
!299 = distinct !{!299, !59}
!300 = distinct !{!300, !59}
!301 = !{!50, !7, i64 30}
!302 = distinct !{!302, !70, !71}
!303 = distinct !{!303, !70, !71}
!304 = distinct !{!304, !59}
!305 = distinct !{!305, !70}
!306 = distinct !{!306, !70, !71}
!307 = distinct !{!307, !70, !71}
!308 = distinct !{!308, !59}
!309 = distinct !{!309, !70}
!310 = distinct !{!310, !59}
!311 = distinct !{!311, !59}
!312 = distinct !{!312, !59}
!313 = distinct !{!313, !59}
!314 = distinct !{!314, !70, !71}
!315 = distinct !{!315, !70, !71}
!316 = distinct !{!316, !59}
!317 = distinct !{!317, !70}
!318 = distinct !{!318, !70, !71}
!319 = distinct !{!319, !70, !71}
!320 = distinct !{!320, !59}
!321 = distinct !{!321, !70}
!322 = distinct !{!322, !59}
!323 = distinct !{!323, !59}
!324 = distinct !{!324, !59}
!325 = distinct !{!325, !59}
!326 = distinct !{!326, !70, !71}
!327 = distinct !{!327, !70, !71}
!328 = distinct !{!328, !59}
!329 = distinct !{!329, !70}
!330 = distinct !{!330, !70, !71}
!331 = distinct !{!331, !70, !71}
!332 = distinct !{!332, !59}
!333 = distinct !{!333, !70}
!334 = distinct !{!334, !59}
!335 = distinct !{!335, !59}
!336 = distinct !{!336, !59}
!337 = distinct !{!337, !59}
!338 = distinct !{!338, !70, !71}
!339 = distinct !{!339, !70, !71}
!340 = distinct !{!340, !71, !70}
!341 = distinct !{!341, !70, !71}
!342 = distinct !{!342, !70, !71}
!343 = distinct !{!343, !59}
!344 = distinct !{!344, !70}
!345 = distinct !{!345, !70, !71}
!346 = distinct !{!346, !70, !71}
!347 = distinct !{!347, !59}
!348 = distinct !{!348, !70}
!349 = distinct !{!349, !59}
!350 = distinct !{!350, !59}
!351 = distinct !{!351, !59}
!352 = distinct !{!352, !59}
!353 = distinct !{!353, !70, !71}
!354 = distinct !{!354, !70, !71}
!355 = distinct !{!355, !71, !70}
!356 = distinct !{!356, !70, !71}
!357 = distinct !{!357, !70, !71}
!358 = distinct !{!358, !59}
!359 = distinct !{!359, !70}
!360 = distinct !{!360, !70, !71}
!361 = distinct !{!361, !70, !71}
!362 = distinct !{!362, !59}
!363 = distinct !{!363, !70}
!364 = distinct !{!364, !59}
!365 = distinct !{!365, !59}
!366 = distinct !{!366, !59}
!367 = distinct !{!367, !59}
!368 = distinct !{!368, !70, !71}
!369 = distinct !{!369, !70, !71}
!370 = distinct !{!370, !71, !70}
!371 = distinct !{!371, !70, !71}
!372 = distinct !{!372, !70, !71}
!373 = distinct !{!373, !59}
!374 = distinct !{!374, !70}
!375 = distinct !{!375, !70, !71}
!376 = distinct !{!376, !70, !71}
!377 = distinct !{!377, !59}
!378 = distinct !{!378, !70}
!379 = !{!175, !6, i64 16}
!380 = !{!175, !6, i64 20}
!381 = !{!175, !29, i64 28}
!382 = !{!175, !6, i64 32}
!383 = !{!175, !13, i64 8}
!384 = distinct !{!384, !70, !71}
!385 = distinct !{!385, !71, !70}
