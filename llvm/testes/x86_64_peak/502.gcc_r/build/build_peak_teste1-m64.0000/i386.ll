; ModuleID = 'i386.c'
source_filename = "i386.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%struct.processor_costs = type { i32, i32, i32, i32, [5 x i32], i32, [5 x i32], i32, i32, i32, i32, i32, [3 x i32], [3 x i32], i32, [3 x i32], [3 x i32], i32, [2 x i32], [2 x i32], i32, [3 x i32], [3 x i32], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [2 x %struct.stringop_algs], [2 x %struct.stringop_algs], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.stringop_algs = type { i32, [4 x %struct.stringop_strategy] }
%struct.stringop_strategy = type { i32, i32 }
%struct.pta = type { ptr, i32, i32, i32 }
%struct.ptt = type { ptr, i32, i32, i32, i32, i32 }
%struct.gcc_target = type { %struct.asm_out, %struct.sched, %struct.vectorize, i32, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, i64, i64, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, %struct.addr_space, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, i64, %struct.calls, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, %struct.c, %struct.cxx, %struct.emutls, %struct.target_option_hooks, ptr, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%struct.asm_out = type { ptr, ptr, ptr, %struct.asm_int_op, %struct.asm_int_op, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }
%struct.asm_int_op = type { ptr, ptr, ptr, ptr }
%struct.sched = type { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }
%struct.vectorize = type { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }
%struct.addr_space = type { ptr, ptr, ptr, ptr, ptr, ptr, ptr }
%struct.calls = type { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }
%struct.c = type { ptr }
%struct.cxx = type { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }
%struct.emutls = type { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, i8, i8 }
%struct.target_option_hooks = type { ptr, ptr, ptr, ptr, ptr, ptr }
%struct.real_value = type { i32, [3 x i64] }
%struct.rtl_data = type { %struct.expr_status, %struct.emit_status, %struct.varasm_status, %struct.incoming_args, %struct.function_subsections, %struct.rtl_eh, i32, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, i64, ptr, ptr, ptr, i32, i32, i32, i32, i32, i32, ptr, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%struct.expr_status = type { i32, i32, i32, ptr, ptr, ptr }
%struct.emit_status = type { i32, i32, ptr, ptr, ptr, i32, i32, i32, i32, ptr }
%struct.varasm_status = type { ptr, i32 }
%struct.incoming_args = type { i32, i32, i32, ptr, %struct.ix86_args, ptr }
%struct.ix86_args = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.function_subsections = type { ptr, ptr, ptr, ptr, ptr }
%struct.rtl_eh = type { ptr, ptr, ptr, ptr, ptr, ptr, [2 x ptr] }
%struct.rtl_hooks = type { ptr, ptr, ptr, ptr, ptr }
%struct.optab_d = type { i32, ptr, i8, ptr, [87 x %struct.optab_handlers] }
%struct.optab_handlers = type { i32 }
%struct.recog_data = type { [30 x ptr], [30 x ptr], [30 x ptr], [30 x i32], [30 x i32], [14 x ptr], [14 x i8], i8, i8, i8, [30 x i8], ptr }
%struct.attribute_spec = type { ptr, i32, i32, i8, i8, i8, ptr }
%struct.ggc_root_tab = type { ptr, i64, i64, ptr, ptr }
%struct.ggc_cache_tab = type { ptr, i64, i64, ptr, ptr, ptr }
%struct.anon = type { ptr, i64, i32, i32, i32 }
%struct.builtin_isa = type { ptr, i32, i32, i8, i8 }
%struct.lang_hooks = type { ptr, i64, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, %struct.lang_hooks_for_tree_inlining, %struct.lang_hooks_for_callgraph, %struct.lang_hooks_for_tree_dump, %struct.lang_hooks_for_decls, %struct.lang_hooks_for_types, %struct.lang_hooks_for_lto, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, i8 }
%struct.lang_hooks_for_tree_inlining = type { ptr }
%struct.lang_hooks_for_callgraph = type { ptr }
%struct.lang_hooks_for_tree_dump = type { ptr, ptr }
%struct.lang_hooks_for_decls = type { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }
%struct.lang_hooks_for_types = type { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, i8 }
%struct.lang_hooks_for_lto = type { ptr, ptr, ptr }
%struct.builtin_description = type { i32, i32, ptr, i32, i32, i32 }
%struct.insn_data = type { ptr, %union.anon.0, ptr, ptr, i8, i8, i8, i8 }
%union.anon.0 = type { ptr }
%struct.ix86_target_opts = type { ptr, i32 }
%struct._IO_FILE = type { i32, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, i32, i32, i64, i16, i8, [1 x i8], ptr, i64, ptr, ptr, ptr, ptr, i64, i32, [20 x i8] }
%struct.param_info = type { ptr, i32, i8, i32, i32, ptr }
%struct.machine_function = type { ptr, ptr, i32, i32, [4 x i32], i32, %struct.machine_cfa_state, i32, i8 }
%struct.machine_cfa_state = type { ptr, i64 }
%struct.tree_common = type { %struct.tree_base, ptr, ptr }
%struct.tree_base = type { i64 }
%struct.tree_type = type { %struct.tree_common, ptr, ptr, ptr, ptr, i32, i32, i32, i32, ptr, ptr, %union.tree_type_symtab, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }
%union.tree_type_symtab = type { ptr }
%struct.tree_decl_minimal = type { %struct.tree_common, i32, i32, ptr, ptr }
%struct.tree_identifier = type { %struct.tree_common, %struct.ht_identifier }
%struct.ht_identifier = type { ptr, i32, i32 }
%struct.tree_decl_non_common = type { %struct.tree_decl_with_vis, ptr, ptr, ptr, ptr }
%struct.tree_decl_with_vis = type { %struct.tree_decl_with_rtl, ptr, ptr, ptr, i24 }
%struct.tree_decl_with_rtl = type { %struct.tree_decl_common, ptr }
%struct.tree_decl_common = type { %struct.tree_decl_minimal, ptr, i40, i32, ptr, ptr, ptr, ptr, ptr }
%struct.tree_function_decl = type { %struct.tree_decl_non_common, ptr, ptr, ptr, ptr, i32 }
%struct.tree_target_option = type { %struct.tree_common, %struct.cl_target_option }
%struct.cl_target_option = type { i32, i32, i32, i32, i8, i8, i8, i8, i8, i8, i8 }
%struct.tree_list = type { %struct.tree_common, ptr, ptr }
%struct.tree_string = type { %struct.tree_common, i32, [1 x i8] }
%struct.tree_int_cst = type { %struct.tree_common, %struct.double_int }
%struct.double_int = type { i64, i64 }
%struct.cgraph_local_info = type { ptr, %struct.inline_summary, i8 }
%struct.inline_summary = type { i64, i32, i32, i32, i32 }
%struct.function = type { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, i32, i32, i32, i32, i32, i32, ptr, i32 }
%struct.rtx_def = type { i32, %union.u }
%union.u = type { %struct.block_symbol }
%struct.block_symbol = type { [3 x %union.rtunion_def], ptr, i64 }
%union.rtunion_def = type { ptr }
%struct.rtvec_def = type { i32, [1 x ptr] }
%struct.ix86_frame = type { i32, i32, i32, i32, i32, i64, i32, i32, i32, i64, i64, i64, i64, i8 }
%struct.ix86_address = type { ptr, ptr, ptr, i64, i32 }
%struct.stack_local_entry = type { i16, i16, ptr, ptr }
%struct.mem_attrs = type { ptr, ptr, ptr, i32, i32, i8 }
%struct.basic_block_def = type { ptr, ptr, ptr, ptr, [2 x ptr], ptr, ptr, %union.basic_block_il_dependent, i64, i32, i32, i32, i32, i32 }
%union.basic_block_il_dependent = type { ptr }
%struct.df = type { [8 x ptr], [8 x ptr], ptr, %struct.df_ref_info, %struct.df_ref_info, ptr, ptr, ptr, i32, i32, ptr, i32, i32, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, i32, i32, ptr, i32, i8, i8, i8 }
%struct.df_ref_info = type { ptr, ptr, ptr, i32, i32, i32, i32 }
%struct.df_insn_info = type { ptr, ptr, ptr, ptr, ptr, i32 }
%struct.df_base_ref = type { i32, ptr, ptr, ptr, ptr, ptr, i32, i32, i32 }
%struct.VEC_edge_base = type { i32, i32, [1 x ptr] }
%struct.rtl_bb_info = type { ptr, ptr, ptr, ptr, i32 }
%struct.edge_def = type { ptr, ptr, %union.edge_def_insns, ptr, ptr, i32, i32, i32, i32, i64 }
%union.edge_def_insns = type { ptr }
%struct.expand_vec_perm_d = type { ptr, ptr, ptr, [16 x i8], i32, i8, i8 }
%struct.real_format = type { ptr, ptr, i32, i32, i32, i32, i32, i32, i32, i8, i8, i8, i8, i8, i8, i8, i8 }
%struct.tree_vector = type { %struct.tree_common, ptr }
%struct.tree_exp = type { %struct.tree_common, i32, ptr, [1 x ptr] }
%struct.insn_operand_data = type { ptr, ptr, i16, i8, i8 }
%struct.control_flow_graph = type { ptr, ptr, ptr, i32, i32, i32, ptr, i32, [2 x i32], [2 x i32], i32, i32 }
%struct.tree_optimization_option = type { %struct.tree_common, %struct.cl_optimization }
%struct.cl_optimization = type { i32, i32, i32, i32, i32, i32, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%struct.anon.1 = type { ptr, i32 }
%struct.anon.2 = type { ptr, i32 }
%struct.anon.3 = type { ptr, i32 }

@stdout = external local_unnamed_addr global ptr, align 8
@stdin = external local_unnamed_addr global ptr, align 8
@ix86_size_cost = dso_local constant %struct.processor_costs { i32 4, i32 6, i32 4, i32 6, [5 x i32] [i32 6, i32 6, i32 6, i32 6, i32 10], i32 0, [5 x i32] [i32 6, i32 6, i32 6, i32 6, i32 10], i32 6, i32 6, i32 0, i32 2, i32 2, [3 x i32] [i32 2, i32 2, i32 2], [3 x i32] [i32 2, i32 2, i32 2], i32 2, [3 x i32] [i32 2, i32 2, i32 2], [3 x i32] [i32 2, i32 2, i32 2], i32 3, [2 x i32] [i32 3, i32 3], [2 x i32] [i32 3, i32 3], i32 3, [3 x i32] [i32 3, i32 3, i32 3], [3 x i32] [i32 3, i32 3, i32 3], i32 3, i32 0, i32 0, i32 0, i32 0, i32 2, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, [2 x %struct.stringop_algs] [%struct.stringop_algs { i32 2, [4 x %struct.stringop_strategy] [%struct.stringop_strategy { i32 -1, i32 2 }, %struct.stringop_strategy zeroinitializer, %struct.stringop_strategy zeroinitializer, %struct.stringop_strategy zeroinitializer] }, %struct.stringop_algs { i32 2, [4 x %struct.stringop_strategy] [%struct.stringop_strategy { i32 -1, i32 2 }, %struct.stringop_strategy zeroinitializer, %struct.stringop_strategy zeroinitializer, %struct.stringop_strategy zeroinitializer] }], [2 x %struct.stringop_algs] [%struct.stringop_algs { i32 2, [4 x %struct.stringop_strategy] [%struct.stringop_strategy { i32 -1, i32 2 }, %struct.stringop_strategy zeroinitializer, %struct.stringop_strategy zeroinitializer, %struct.stringop_strategy zeroinitializer] }, %struct.stringop_algs { i32 2, [4 x %struct.stringop_strategy] [%struct.stringop_strategy { i32 -1, i32 2 }, %struct.stringop_strategy zeroinitializer, %struct.stringop_strategy zeroinitializer, %struct.stringop_strategy zeroinitializer] }], i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1 }, align 4
@amdfam10_cost = dso_local global %struct.processor_costs { i32 4, i32 8, i32 4, i32 4, [5 x i32] [i32 12, i32 16, i32 12, i32 16, i32 20], i32 0, [5 x i32] [i32 76, i32 140, i32 204, i32 332, i32 332], i32 4, i32 4, i32 8, i32 9, i32 4, [3 x i32] [i32 3, i32 4, i32 3], [3 x i32] [i32 3, i32 4, i32 3], i32 4, [3 x i32] [i32 4, i32 4, i32 12], [3 x i32] [i32 6, i32 6, i32 8], i32 2, [2 x i32] [i32 3, i32 3], [2 x i32] [i32 4, i32 4], i32 2, [3 x i32] [i32 4, i32 4, i32 3], [3 x i32] [i32 4, i32 4, i32 5], i32 3, i32 64, i32 512, i32 64, i32 100, i32 2, i32 16, i32 16, i32 76, i32 8, i32 8, i32 140, [2 x %struct.stringop_algs] [%struct.stringop_algs { i32 1, [4 x %struct.stringop_strategy] [%struct.stringop_strategy { i32 6, i32 6 }, %struct.stringop_strategy { i32 14, i32 7 }, %struct.stringop_strategy { i32 -1, i32 3 }, %struct.stringop_strategy zeroinitializer] }, %struct.stringop_algs { i32 1, [4 x %struct.stringop_strategy] [%struct.stringop_strategy { i32 16, i32 6 }, %struct.stringop_strategy { i32 8192, i32 4 }, %struct.stringop_strategy { i32 -1, i32 1 }, %struct.stringop_strategy zeroinitializer] }], [2 x %struct.stringop_algs] [%struct.stringop_algs { i32 1, [4 x %struct.stringop_strategy] [%struct.stringop_strategy { i32 8, i32 6 }, %struct.stringop_strategy { i32 24, i32 7 }, %struct.stringop_strategy { i32 2048, i32 3 }, %struct.stringop_strategy { i32 -1, i32 1 }] }, %struct.stringop_algs { i32 1, [4 x %struct.stringop_strategy] [%struct.stringop_strategy { i32 48, i32 7 }, %struct.stringop_strategy { i32 8192, i32 4 }, %struct.stringop_strategy { i32 -1, i32 1 }, %struct.stringop_strategy zeroinitializer] }], i32 4, i32 2, i32 2, i32 6, i32 0, i32 2, i32 2, i32 2, i32 2, i32 2, i32 1 }, align 4
@pentium_cost = internal constant %struct.processor_costs { i32 4, i32 4, i32 16, i32 4, [5 x i32] [i32 44, i32 44, i32 44, i32 44, i32 44], i32 0, [5 x i32] [i32 100, i32 100, i32 100, i32 100, i32 100], i32 12, i32 8, i32 8, i32 6, i32 6, [3 x i32] [i32 2, i32 4, i32 2], [3 x i32] [i32 2, i32 4, i32 2], i32 2, [3 x i32] [i32 2, i32 2, i32 6], [3 x i32] [i32 4, i32 4, i32 6], i32 8, [2 x i32] [i32 8, i32 8], [2 x i32] [i32 8, i32 8], i32 2, [3 x i32] [i32 4, i32 8, i32 16], [3 x i32] [i32 4, i32 8, i32 16], i32 3, i32 8, i32 8, i32 0, i32 0, i32 2, i32 12, i32 12, i32 156, i32 4, i32 4, i32 280, [2 x %struct.stringop_algs] [%struct.stringop_algs { i32 1, [4 x %struct.stringop_strategy] [%struct.stringop_strategy { i32 256, i32 3 }, %struct.stringop_strategy { i32 -1, i32 1 }, %struct.stringop_strategy zeroinitializer, %struct.stringop_strategy zeroinitializer] }, %struct.stringop_algs { i32 1, [4 x %struct.stringop_strategy] [%struct.stringop_strategy { i32 -1, i32 1 }, %struct.stringop_strategy zeroinitializer, %struct.stringop_strategy zeroinitializer, %struct.stringop_strategy zeroinitializer] }], [2 x %struct.stringop_algs] [%struct.stringop_algs { i32 1, [4 x %struct.stringop_strategy] [%struct.stringop_strategy { i32 -1, i32 3 }, %struct.stringop_strategy zeroinitializer, %struct.stringop_strategy zeroinitializer, %struct.stringop_strategy zeroinitializer] }, %struct.stringop_algs { i32 1, [4 x %struct.stringop_strategy] [%struct.stringop_strategy { i32 -1, i32 1 }, %struct.stringop_strategy zeroinitializer, %struct.stringop_strategy zeroinitializer, %struct.stringop_strategy zeroinitializer] }], i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 2, i32 1, i32 3, i32 1 }, align 4
@ix86_cost = dso_local local_unnamed_addr global ptr @pentium_cost, align 8
@regclass_map = dso_local local_unnamed_addr constant [53 x i32] [i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 10, i32 10, i32 14, i32 15, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 10, i32 0, i32 0, i32 0, i32 10, i32 17, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 19, i32 19, i32 19, i32 19, i32 19, i32 19, i32 19, i32 19, i32 10, i32 10, i32 10, i32 10, i32 10, i32 10, i32 10, i32 10, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18], align 16
@dbx_register_map = dso_local local_unnamed_addr constant [53 x i32] [i32 0, i32 2, i32 1, i32 3, i32 6, i32 7, i32 4, i32 5, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1], align 16
@dbx64_register_map = dso_local local_unnamed_addr constant [53 x i32] [i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32], align 16
@svr4_dbx_register_map = dso_local local_unnamed_addr constant [53 x i32] [i32 0, i32 2, i32 1, i32 3, i32 6, i32 7, i32 5, i32 4, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 -1, i32 9, i32 -1, i32 -1, i32 -1, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1], align 16
@ix86_compare_op0 = dso_local global ptr null, align 8
@ix86_compare_op1 = dso_local global ptr null, align 8
@ix86_asm_dialect = dso_local local_unnamed_addr global i32 0, align 4
@ix86_tls_dialect = dso_local local_unnamed_addr global i32 0, align 4
@ix86_section_threshold = dso_local local_unnamed_addr global i32 65536, align 4
@ix86_isa_flags = dso_local local_unnamed_addr global i32 0, align 4
@ix86_veclib_handler = dso_local local_unnamed_addr global ptr null, align 8
@ix86_tune_string = external local_unnamed_addr global ptr, align 8
@override_options.processor_alias_table = internal unnamed_addr constant [42 x %struct.pta] [%struct.pta { ptr @.str, i32 0, i32 0, i32 0 }, %struct.pta { ptr @.str.1, i32 1, i32 0, i32 0 }, %struct.pta { ptr @.str.2, i32 2, i32 1, i32 0 }, %struct.pta { ptr @.str.3, i32 2, i32 1, i32 0 }, %struct.pta { ptr @.str.4, i32 2, i32 1, i32 8 }, %struct.pta { ptr @.str.5, i32 1, i32 0, i32 8 }, %struct.pta { ptr @.str.6, i32 1, i32 0, i32 40 }, %struct.pta { ptr @.str.7, i32 1, i32 0, i32 40 }, %struct.pta { ptr @.str.8, i32 3, i32 2, i32 9 }, %struct.pta { ptr @.str.9, i32 3, i32 2, i32 0 }, %struct.pta { ptr @.str.10, i32 3, i32 2, i32 0 }, %struct.pta { ptr @.str.11, i32 3, i32 2, i32 8 }, %struct.pta { ptr @.str.12, i32 3, i32 2, i32 9 }, %struct.pta { ptr @.str.13, i32 3, i32 2, i32 9 }, %struct.pta { ptr @.str.14, i32 3, i32 2, i32 11 }, %struct.pta { ptr @.str.15, i32 7, i32 0, i32 11 }, %struct.pta { ptr @.str.16, i32 7, i32 0, i32 11 }, %struct.pta { ptr @.str.17, i32 9, i32 0, i32 15 }, %struct.pta { ptr @.str.18, i32 9, i32 0, i32 8847 }, %struct.pta { ptr @.str.19, i32 10, i32 7, i32 911 }, %struct.pta { ptr @.str.20, i32 14, i32 8, i32 1049487 }, %struct.pta { ptr @.str.21, i32 4, i32 3, i32 120 }, %struct.pta { ptr @.str.22, i32 5, i32 4, i32 8 }, %struct.pta { ptr @.str.23, i32 5, i32 4, i32 40 }, %struct.pta { ptr @.str.24, i32 5, i32 4, i32 40 }, %struct.pta { ptr @.str.25, i32 6, i32 5, i32 120 }, %struct.pta { ptr @.str.26, i32 6, i32 5, i32 120 }, %struct.pta { ptr @.str.27, i32 6, i32 5, i32 105 }, %struct.pta { ptr @.str.28, i32 6, i32 5, i32 105 }, %struct.pta { ptr @.str.29, i32 6, i32 5, i32 105 }, %struct.pta { ptr @.str.30, i32 8, i32 6, i32 8331 }, %struct.pta { ptr @.str.31, i32 8, i32 6, i32 8427 }, %struct.pta { ptr @.str.32, i32 8, i32 6, i32 8431 }, %struct.pta { ptr @.str.33, i32 8, i32 6, i32 8427 }, %struct.pta { ptr @.str.34, i32 8, i32 6, i32 8431 }, %struct.pta { ptr @.str.35, i32 8, i32 6, i32 8427 }, %struct.pta { ptr @.str.36, i32 8, i32 6, i32 8431 }, %struct.pta { ptr @.str.37, i32 8, i32 6, i32 8427 }, %struct.pta { ptr @.str.38, i32 13, i32 10, i32 6895 }, %struct.pta { ptr @.str.39, i32 13, i32 10, i32 6895 }, %struct.pta { ptr @.str.40, i32 11, i32 2, i32 0 }, %struct.pta { ptr @.str.41, i32 12, i32 9, i32 128 }], align 16
@.str = private unnamed_addr constant [5 x i8] c"i386\00", align 1
@.str.1 = private unnamed_addr constant [5 x i8] c"i486\00", align 1
@.str.2 = private unnamed_addr constant [5 x i8] c"i586\00", align 1
@.str.3 = private unnamed_addr constant [8 x i8] c"pentium\00", align 1
@.str.4 = private unnamed_addr constant [12 x i8] c"pentium-mmx\00", align 1
@.str.5 = private unnamed_addr constant [11 x i8] c"winchip-c6\00", align 1
@.str.6 = private unnamed_addr constant [9 x i8] c"winchip2\00", align 1
@.str.7 = private unnamed_addr constant [3 x i8] c"c3\00", align 1
@.str.8 = private unnamed_addr constant [5 x i8] c"c3-2\00", align 1
@.str.9 = private unnamed_addr constant [5 x i8] c"i686\00", align 1
@.str.10 = private unnamed_addr constant [11 x i8] c"pentiumpro\00", align 1
@.str.11 = private unnamed_addr constant [9 x i8] c"pentium2\00", align 1
@.str.12 = private unnamed_addr constant [9 x i8] c"pentium3\00", align 1
@.str.13 = private unnamed_addr constant [10 x i8] c"pentium3m\00", align 1
@.str.14 = private unnamed_addr constant [10 x i8] c"pentium-m\00", align 1
@.str.15 = private unnamed_addr constant [9 x i8] c"pentium4\00", align 1
@.str.16 = private unnamed_addr constant [10 x i8] c"pentium4m\00", align 1
@.str.17 = private unnamed_addr constant [9 x i8] c"prescott\00", align 1
@.str.18 = private unnamed_addr constant [7 x i8] c"nocona\00", align 1
@.str.19 = private unnamed_addr constant [6 x i8] c"core2\00", align 1
@.str.20 = private unnamed_addr constant [5 x i8] c"atom\00", align 1
@.str.21 = private unnamed_addr constant [6 x i8] c"geode\00", align 1
@.str.22 = private unnamed_addr constant [3 x i8] c"k6\00", align 1
@.str.23 = private unnamed_addr constant [5 x i8] c"k6-2\00", align 1
@.str.24 = private unnamed_addr constant [5 x i8] c"k6-3\00", align 1
@.str.25 = private unnamed_addr constant [7 x i8] c"athlon\00", align 1
@.str.26 = private unnamed_addr constant [13 x i8] c"athlon-tbird\00", align 1
@.str.27 = private unnamed_addr constant [9 x i8] c"athlon-4\00", align 1
@.str.28 = private unnamed_addr constant [10 x i8] c"athlon-xp\00", align 1
@.str.29 = private unnamed_addr constant [10 x i8] c"athlon-mp\00", align 1
@.str.30 = private unnamed_addr constant [7 x i8] c"x86-64\00", align 1
@.str.31 = private unnamed_addr constant [3 x i8] c"k8\00", align 1
@.str.32 = private unnamed_addr constant [8 x i8] c"k8-sse3\00", align 1
@.str.33 = private unnamed_addr constant [8 x i8] c"opteron\00", align 1
@.str.34 = private unnamed_addr constant [13 x i8] c"opteron-sse3\00", align 1
@.str.35 = private unnamed_addr constant [9 x i8] c"athlon64\00", align 1
@.str.36 = private unnamed_addr constant [14 x i8] c"athlon64-sse3\00", align 1
@.str.37 = private unnamed_addr constant [10 x i8] c"athlon-fx\00", align 1
@.str.38 = private unnamed_addr constant [9 x i8] c"amdfam10\00", align 1
@.str.39 = private unnamed_addr constant [10 x i8] c"barcelona\00", align 1
@.str.40 = private unnamed_addr constant [10 x i8] c"generic32\00", align 1
@.str.41 = private unnamed_addr constant [10 x i8] c"generic64\00", align 1
@.str.42 = private unnamed_addr constant [3 x i8] c"-m\00", align 1
@.str.43 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.44 = private unnamed_addr constant [7 x i8] c"switch\00", align 1
@.str.45 = private unnamed_addr constant [9 x i8] c"option(\22\00", align 1
@.str.46 = private unnamed_addr constant [3 x i8] c"\22)\00", align 1
@.str.47 = private unnamed_addr constant [10 x i8] c"attribute\00", align 1
@flag_omit_frame_pointer = external local_unnamed_addr global i32, align 4
@flag_asynchronous_unwind_tables = external local_unnamed_addr global i32, align 4
@flag_pcc_struct_return = external local_unnamed_addr global i32, align 4
@.str.48 = private unnamed_addr constant [8 x i8] c"generic\00", align 1
@.str.49 = private unnamed_addr constant [7 x i8] c"native\00", align 1
@.str.50 = private unnamed_addr constant [32 x i8] c"bad value (%s) for %stune=%s %s\00", align 1
@.str.51 = private unnamed_addr constant [92 x i8] c"%stune=x86-64%s is deprecated.  Use %stune=k8%s or %stune=generic%s instead as appropriate.\00", align 1
@ix86_arch_string = external local_unnamed_addr global ptr, align 8
@cpu_names = internal unnamed_addr constant [22 x ptr] [ptr @.str.48, ptr @.str, ptr @.str.1, ptr @.str.3, ptr @.str.4, ptr @.str.10, ptr @.str.11, ptr @.str.12, ptr @.str.15, ptr @.str.14, ptr @.str.17, ptr @.str.18, ptr @.str.19, ptr @.str.20, ptr @.str.21, ptr @.str.22, ptr @.str.23, ptr @.str.24, ptr @.str.25, ptr @.str.27, ptr @.str.31, ptr @.str.38], align 16
@ix86_tune_defaulted = internal unnamed_addr global i32 0, align 4
@ix86_stringop_string = external local_unnamed_addr global ptr, align 8
@.str.52 = private unnamed_addr constant [9 x i8] c"rep_byte\00", align 1
@stringop_alg = internal unnamed_addr global i32 0, align 4
@.str.53 = private unnamed_addr constant [8 x i8] c"libcall\00", align 1
@.str.54 = private unnamed_addr constant [10 x i8] c"rep_4byte\00", align 1
@.str.56 = private unnamed_addr constant [10 x i8] c"byte_loop\00", align 1
@.str.57 = private unnamed_addr constant [5 x i8] c"loop\00", align 1
@.str.58 = private unnamed_addr constant [14 x i8] c"unrolled_loop\00", align 1
@.str.59 = private unnamed_addr constant [45 x i8] c"bad value (%s) for %sstringop-strategy=%s %s\00", align 1
@ix86_arch_specified = internal unnamed_addr global i32 0, align 4
@ix86_abi_string = external local_unnamed_addr global ptr, align 8
@.str.60 = private unnamed_addr constant [5 x i8] c"sysv\00", align 1
@ix86_abi = dso_local local_unnamed_addr global i32 0, align 4
@.str.61 = private unnamed_addr constant [3 x i8] c"ms\00", align 1
@.str.62 = private unnamed_addr constant [33 x i8] c"unknown ABI (%s) for %sabi=%s %s\00", align 1
@ix86_cmodel_string = external local_unnamed_addr global ptr, align 8
@.str.63 = private unnamed_addr constant [6 x i8] c"small\00", align 1
@flag_pic = external local_unnamed_addr global i32, align 4
@ix86_cmodel = dso_local local_unnamed_addr global i32 0, align 4
@.str.64 = private unnamed_addr constant [7 x i8] c"medium\00", align 1
@.str.65 = private unnamed_addr constant [6 x i8] c"large\00", align 1
@.str.66 = private unnamed_addr constant [40 x i8] c"code model %s does not support PIC mode\00", align 1
@.str.67 = private unnamed_addr constant [3 x i8] c"32\00", align 1
@.str.68 = private unnamed_addr constant [7 x i8] c"kernel\00", align 1
@.str.69 = private unnamed_addr constant [34 x i8] c"bad value (%s) for %scmodel=%s %s\00", align 1
@ix86_asm_string = external local_unnamed_addr global ptr, align 8
@.str.70 = private unnamed_addr constant [6 x i8] c"intel\00", align 1
@.str.71 = private unnamed_addr constant [4 x i8] c"att\00", align 1
@.str.72 = private unnamed_addr constant [31 x i8] c"bad value (%s) for %sasm=%s %s\00", align 1
@.str.73 = private unnamed_addr constant [48 x i8] c"code model %qs not supported in the %s bit mode\00", align 1
@.str.74 = private unnamed_addr constant [28 x i8] c"%i-bit mode not compiled in\00", align 1
@ix86_schedule = dso_local local_unnamed_addr global i32 0, align 4
@ix86_arch = dso_local local_unnamed_addr global i32 0, align 4
@ix86_tune = dso_local local_unnamed_addr global i32 0, align 4
@ix86_isa_flags_explicit = internal unnamed_addr global i32 0, align 4
@x86_prefetch_sse = dso_local local_unnamed_addr global i32 0, align 4
@.str.75 = private unnamed_addr constant [46 x i8] c"generic CPU can be used only for %stune=%s %s\00", align 1
@.str.76 = private unnamed_addr constant [32 x i8] c"bad value (%s) for %sarch=%s %s\00", align 1
@ix86_arch_features = dso_local local_unnamed_addr global [5 x i8] zeroinitializer, align 1
@ix86_tune_features = dso_local local_unnamed_addr global [62 x i8] zeroinitializer, align 16
@optimize_size = external local_unnamed_addr global i32, align 4
@processor_target_table = internal unnamed_addr constant [15 x %struct.ptt] [%struct.ptt { ptr @i386_cost, i32 4, i32 3, i32 4, i32 3, i32 4 }, %struct.ptt { ptr @i486_cost, i32 16, i32 15, i32 16, i32 15, i32 16 }, %struct.ptt { ptr @pentium_cost, i32 16, i32 7, i32 16, i32 7, i32 16 }, %struct.ptt { ptr @pentiumpro_cost, i32 16, i32 15, i32 16, i32 10, i32 16 }, %struct.ptt { ptr @geode_cost, i32 0, i32 0, i32 0, i32 0, i32 0 }, %struct.ptt { ptr @k6_cost, i32 32, i32 7, i32 32, i32 7, i32 32 }, %struct.ptt { ptr @athlon_cost, i32 16, i32 7, i32 16, i32 7, i32 16 }, %struct.ptt { ptr @pentium4_cost, i32 0, i32 0, i32 0, i32 0, i32 0 }, %struct.ptt { ptr @k8_cost, i32 16, i32 7, i32 16, i32 7, i32 16 }, %struct.ptt { ptr @nocona_cost, i32 0, i32 0, i32 0, i32 0, i32 0 }, %struct.ptt { ptr @core2_cost, i32 16, i32 10, i32 16, i32 10, i32 16 }, %struct.ptt { ptr @generic32_cost, i32 16, i32 7, i32 16, i32 7, i32 16 }, %struct.ptt { ptr @generic64_cost, i32 16, i32 10, i32 16, i32 10, i32 16 }, %struct.ptt { ptr @amdfam10_cost, i32 32, i32 24, i32 32, i32 7, i32 32 }, %struct.ptt { ptr @atom_cost, i32 16, i32 7, i32 16, i32 7, i32 16 }], align 16
@init_machine_status = external local_unnamed_addr global ptr, align 8
@ix86_regparm_string = external local_unnamed_addr global ptr, align 8
@.str.77 = private unnamed_addr constant [39 x i8] c"%sregparm=%d%s is not between 0 and %d\00", align 1
@ix86_regparm = internal unnamed_addr global i32 0, align 4
@ix86_align_loops_string = external local_unnamed_addr global ptr, align 8
@.str.78 = private unnamed_addr constant [49 x i8] c"%salign-loops%s is obsolete, use -falign-loops%s\00", align 1
@align_loops = external local_unnamed_addr global i32, align 4
@.str.79 = private unnamed_addr constant [43 x i8] c"%salign-loops=%d%s is not between 0 and %d\00", align 1
@ix86_align_jumps_string = external local_unnamed_addr global ptr, align 8
@.str.80 = private unnamed_addr constant [49 x i8] c"%salign-jumps%s is obsolete, use -falign-jumps%s\00", align 1
@align_jumps = external local_unnamed_addr global i32, align 4
@ix86_align_funcs_string = external local_unnamed_addr global ptr, align 8
@.str.81 = private unnamed_addr constant [57 x i8] c"%salign-functions%s is obsolete, use -falign-functions%s\00", align 1
@align_functions = external local_unnamed_addr global i32, align 4
@align_loops_max_skip = external local_unnamed_addr global i32, align 4
@align_jumps_max_skip = external local_unnamed_addr global i32, align 4
@ix86_branch_cost = dso_local local_unnamed_addr global i32 0, align 4
@ix86_branch_cost_string = external local_unnamed_addr global ptr, align 8
@.str.82 = private unnamed_addr constant [42 x i8] c"%sbranch-cost=%d%s is not between 0 and 5\00", align 1
@ix86_section_threshold_string = external local_unnamed_addr global ptr, align 8
@.str.83 = private unnamed_addr constant [40 x i8] c"%slarge-data-threshold=%d%s is negative\00", align 1
@ix86_tls_dialect_string = external local_unnamed_addr global ptr, align 8
@.str.84 = private unnamed_addr constant [4 x i8] c"gnu\00", align 1
@.str.85 = private unnamed_addr constant [5 x i8] c"gnu2\00", align 1
@.str.86 = private unnamed_addr constant [39 x i8] c"bad value (%s) for %stls-dialect=%s %s\00", align 1
@ix87_precision_string = external local_unnamed_addr global ptr, align 8
@.str.87 = private unnamed_addr constant [51 x i8] c"pc%d is not valid precision setting (32, 64 or 80)\00", align 1
@target_flags_explicit = external local_unnamed_addr global i32, align 4
@target_flags = external local_unnamed_addr global i32, align 4
@flag_finite_math_only = external local_unnamed_addr global i32, align 4
@ix86_preferred_stack_boundary = dso_local local_unnamed_addr global i32 0, align 4
@ix86_preferred_stack_boundary_string = external local_unnamed_addr global ptr, align 8
@.str.88 = private unnamed_addr constant [57 x i8] c"%spreferred-stack-boundary=%d%s is not between %d and 12\00", align 1
@ix86_force_align_arg_pointer = external local_unnamed_addr global i32, align 4
@ix86_default_incoming_stack_boundary = internal unnamed_addr global i32 0, align 4
@ix86_incoming_stack_boundary = dso_local local_unnamed_addr global i32 0, align 4
@ix86_incoming_stack_boundary_string = external local_unnamed_addr global ptr, align 8
@.str.89 = private unnamed_addr constant [54 x i8] c"-mincoming-stack-boundary=%d is not between %d and 12\00", align 1
@ix86_user_incoming_stack_boundary = internal unnamed_addr global i32 0, align 4
@.str.90 = private unnamed_addr constant [40 x i8] c"%ssseregparm%s used without SSE enabled\00", align 1
@ix86_fpmath = dso_local local_unnamed_addr global i32 0, align 4
@ix86_fpmath_string = external local_unnamed_addr global ptr, align 8
@.str.91 = private unnamed_addr constant [4 x i8] c"387\00", align 1
@.str.92 = private unnamed_addr constant [4 x i8] c"sse\00", align 1
@.str.93 = private unnamed_addr constant [52 x i8] c"SSE instruction set disabled, using 387 arithmetics\00", align 1
@.str.94 = private unnamed_addr constant [8 x i8] c"387,sse\00", align 1
@.str.95 = private unnamed_addr constant [8 x i8] c"387+sse\00", align 1
@.str.96 = private unnamed_addr constant [8 x i8] c"sse,387\00", align 1
@.str.97 = private unnamed_addr constant [8 x i8] c"sse+387\00", align 1
@.str.98 = private unnamed_addr constant [5 x i8] c"both\00", align 1
@.str.99 = private unnamed_addr constant [52 x i8] c"387 instruction set disabled, using SSE arithmetics\00", align 1
@.str.100 = private unnamed_addr constant [34 x i8] c"bad value (%s) for %sfpmath=%s %s\00", align 1
@ix86_veclibabi_string = external local_unnamed_addr global ptr, align 8
@.str.101 = private unnamed_addr constant [5 x i8] c"svml\00", align 1
@.str.102 = private unnamed_addr constant [5 x i8] c"acml\00", align 1
@.str.103 = private unnamed_addr constant [66 x i8] c"unknown vectorization library ABI type (%s) for %sveclibabi=%s %s\00", align 1
@flag_unwind_tables = external local_unnamed_addr global i32, align 4
@flag_exceptions = external local_unnamed_addr global i32, align 4
@flag_non_call_exceptions = external local_unnamed_addr global i32, align 4
@.str.104 = private unnamed_addr constant [103 x i8] c"unwind tables currently require either a frame pointer or %saccumulate-outgoing-args%s for correctness\00", align 1
@.str.105 = private unnamed_addr constant [68 x i8] c"stack probing requires %saccumulate-outgoing-args%s for correctness\00", align 1
@internal_label_prefix = dso_local global [16 x i8] zeroinitializer, align 16
@.str.106 = private unnamed_addr constant [7 x i8] c"*.%s%u\00", align 1
@.str.107 = private unnamed_addr constant [3 x i8] c"LX\00", align 1
@internal_label_prefix_len = dso_local local_unnamed_addr global i32 0, align 4
@flag_schedule_insns = external local_unnamed_addr global i32, align 4
@flag_schedule_insns_after_reload = external local_unnamed_addr global i32, align 4
@compiler_params = external local_unnamed_addr global ptr, align 8
@.str.108 = private unnamed_addr constant [24 x i8] c"simultaneous-prefetches\00", align 1
@.str.109 = private unnamed_addr constant [19 x i8] c"l1-cache-line-size\00", align 1
@.str.110 = private unnamed_addr constant [14 x i8] c"l1-cache-size\00", align 1
@.str.111 = private unnamed_addr constant [14 x i8] c"l2-cache-size\00", align 1
@targetm = dso_local local_unnamed_addr global %struct.gcc_target { %struct.asm_out { ptr @.str.43, ptr @.str.43, ptr @.str.289, %struct.asm_int_op { ptr @.str.290, ptr @.str.273, ptr @.str.291, ptr null }, %struct.asm_int_op { ptr @.str.290, ptr @.str.273, ptr @.str.291, ptr null }, ptr @default_assemble_integer, ptr @default_globalize_label, ptr @default_globalize_decl_name, ptr @default_emit_unwind_label, ptr @default_emit_except_table_label, ptr @default_unwind_emit, ptr @default_internal_label, ptr @hook_bool_rtx_false, ptr @default_assemble_visibility, ptr @default_function_pro_epilogue, ptr @no_asm_to_stream, ptr @no_asm_to_stream, ptr @ix86_output_function_epilogue, ptr @hook_void_void, ptr @default_elf_asm_named_section, ptr @default_reloc_rw_mask, ptr @default_elf_select_section, ptr @default_elf_select_rtx_section, ptr @default_unique_section, ptr @default_function_rodata_section, ptr @default_named_section_asm_out_constructor, ptr @default_named_section_asm_out_destructor, ptr @x86_output_mi_thunk, ptr @x86_can_output_mi_thunk, ptr @x86_file_start, ptr @file_end_indicate_exec_stack, ptr @ix86_code_end, ptr @default_external_libcall, ptr @hook_void_constcharptr, ptr @elf_record_gcc_switches, ptr @.str.292, ptr @default_asm_output_anchor, ptr @i386_output_dwarf_dtprel, ptr null, ptr null }, %struct.sched { ptr @ix86_adjust_cost, ptr null, ptr @ix86_issue_rate, ptr null, ptr null, ptr null, ptr null, ptr null, ptr null, ptr null, ptr null, ptr null, ptr null, ptr null, ptr null, ptr null, ptr null, ptr @ia32_multipass_dfa_lookahead, ptr null, ptr null, ptr null, ptr null, ptr null, ptr null, ptr null, ptr null, ptr null, ptr null, ptr null, ptr null, ptr null, ptr null, ptr null, ptr null, ptr null, ptr null, ptr null }, %struct.vectorize { ptr null, ptr @ix86_builtin_vectorized_function, ptr @ix86_vectorize_builtin_conversion, ptr null, ptr null, ptr @ix86_builtin_vectorization_cost, ptr @default_builtin_vector_alignment_reachable, ptr @ix86_vectorize_builtin_vec_perm, ptr @ix86_vectorize_builtin_vec_perm_ok, ptr @default_builtin_support_vector_misalignment }, i32 1048802, ptr @hook_void_void, ptr @ix86_handle_option, ptr null, ptr @default_eh_return_filter_mode, ptr @default_libgcc_cmp_return_mode, ptr @default_libgcc_shift_count_mode, ptr @default_unwind_word_mode, ptr @merge_decl_attributes, ptr @merge_type_attributes, ptr @ix86_attribute_table, ptr @ix86_comp_type_attributes, ptr @hook_void_tree, ptr @hook_void_tree_treeptr, ptr @hook_bool_const_tree_false, ptr @ix86_ms_bitfield_layout_p, ptr @default_decimal_float_supported_p, ptr @default_fixed_point_supported_p, ptr @hook_bool_void_false, ptr @hook_bool_void_false, ptr @ix86_init_builtins, ptr @ix86_builtin_decl, ptr @ix86_expand_builtin, ptr null, ptr @hook_tree_tree_tree_bool_null, ptr @ix86_builtin_reciprocal, ptr @ix86_mangle_type, ptr @hook_void_void, ptr @default_section_type_flags, ptr @hook_bool_void_false, ptr @default_branch_target_register_class, ptr @hook_bool_bool_false, ptr @default_have_conditional_execution, ptr @ix86_cannot_force_const_mem, ptr null, ptr @hook_bool_const_rtx_commutative_p, ptr @ix86_legitimize_address, ptr @ix86_delegitimize_address, ptr @ix86_legitimate_address_p, ptr @hook_bool_mode_const_rtx_true, i64 0, i64 0, ptr @default_use_anchors_for_symbol_p, ptr @ix86_function_ok_for_sibcall, ptr @ix86_set_current_function, ptr @hook_bool_const_tree_false, ptr @default_binds_local_p, ptr @default_mangle_decl_assembler_name, ptr @ix86_encode_section_info, ptr @default_strip_name_encoding, ptr @default_shift_truncation_mask, ptr @default_min_divisions_for_recip_mul, ptr @default_mode_rep_extended, ptr @default_valid_pointer_mode, %struct.addr_space { ptr @default_addr_space_pointer_mode, ptr @default_addr_space_address_mode, ptr @default_addr_space_valid_pointer_mode, ptr @default_addr_space_legitimate_address_p, ptr @default_addr_space_legitimize_address, ptr @default_addr_space_subset_p, ptr @default_addr_space_convert }, ptr @ix86_scalar_mode_supported_p, ptr @ix86_vector_mode_supported_p, ptr @ix86_rtx_costs, ptr @ix86_address_cost, ptr null, ptr @default_unspec_may_trap_p, ptr @hook_rtx_rtx_null, ptr @hook_void_tree, ptr @ix86_fixed_condition_code_regs, ptr @ix86_cc_modes_compatible, ptr @ix86_reorg, ptr @ix86_build_builtin_va_list, ptr @ix86_fn_abi_va_list, ptr @ix86_canonical_va_list_type, ptr @ix86_va_start, ptr @ix86_gimplify_va_arg, ptr @default_get_pch_validity, ptr @default_pch_valid_p, ptr null, ptr @hook_bool_void_false, ptr @ix86_builtin_setjmp_frame_value, ptr @ix86_md_asm_clobbers, ptr @hook_int_const_tree_0, ptr null, ptr null, ptr @default_stack_protect_guard, ptr @ix86_stack_protect_fail, ptr @default_invalid_within_doloop, ptr @hook_bool_const_tree_true, i64 0, %struct.calls { ptr @default_promote_function_mode, ptr @hook_bool_const_tree_true, ptr @ix86_struct_value_rtx, ptr @ix86_return_in_memory, ptr @hook_bool_const_tree_false, ptr @ix86_pass_by_reference, ptr @default_expand_builtin_saveregs, ptr @ix86_setup_incoming_varargs, ptr @hook_bool_CUMULATIVE_ARGS_true, ptr @default_pretend_outgoing_varargs_named, ptr null, ptr @ix86_must_pass_in_stack, ptr @hook_bool_CUMULATIVE_ARGS_mode_tree_bool_false, ptr @hook_int_CUMULATIVE_ARGS_mode_tree_bool_0, ptr @hook_invalid_arg_for_unprototyped_fn, ptr @ix86_function_value, ptr @default_libcall_value, ptr @ix86_internal_arg_pointer, ptr @ix86_update_stack_boundary, ptr @ix86_get_drap_rtx, ptr @hook_bool_void_true, ptr @ix86_static_chain, ptr @ix86_trampoline_init, ptr null }, ptr @hook_constcharptr_const_tree_const_tree_null, ptr @hook_constcharptr_int_const_tree_null, ptr @hook_constcharptr_int_const_tree_const_tree_null, ptr @hook_constcharptr_const_tree_null, ptr @hook_constcharptr_const_tree_null, ptr @hook_tree_const_tree_null, ptr @hook_tree_tree_tree_null, ptr @i386_ira_cover_classes, ptr @ix86_secondary_reload, ptr @ix86_maybe_switch_abi, ptr @hook_void_void, ptr @default_hard_regno_scratch_ok, ptr @default_case_values_threshold, ptr @ix86_frame_pointer_required, ptr @ix86_can_eliminate, %struct.c { ptr @ix86_c_mode_for_suffix }, %struct.cxx { ptr @default_cxx_guard_type, ptr @hook_bool_void_false, ptr @default_cxx_get_cookie_size, ptr @hook_bool_void_false, ptr null, ptr @hook_bool_void_false, ptr @hook_bool_void_true, ptr @hook_void_tree, ptr @hook_bool_void_true, ptr @hook_bool_void_true, ptr @hook_bool_void_false, ptr @hook_bool_void_false, ptr @hook_void_tree }, %struct.emutls { ptr @.str.293, ptr @.str.294, ptr null, ptr null, ptr null, ptr null, ptr @default_emutls_var_fields, ptr @default_emutls_var_init, i8 0, i8 0 }, %struct.target_option_hooks { ptr @ix86_valid_target_attribute_p, ptr @ix86_function_specific_save, ptr @ix86_function_specific_restore, ptr @ix86_function_specific_print, ptr @default_target_option_pragma_parse, ptr @ix86_can_inline_p }, ptr @hook_void_bitmap, i8 0, i8 1, i8 1, i8 1, i8 1, i8 0, i8 0, i8 0, i8 1, i8 0, i8 0, i8 0 }, align 8
@global_trees = external local_unnamed_addr global [131 x ptr], align 16
@fixed_regs = external local_unnamed_addr global [53 x i8], align 16
@call_used_regs = external local_unnamed_addr global [53 x i8], align 16
@reload_completed = external local_unnamed_addr global i32, align 4
@pic_offset_table_rtx = external local_unnamed_addr global ptr, align 8
@reg_class_contents = external local_unnamed_addr global [27 x i64], align 16
@reg_names = external local_unnamed_addr global [53 x ptr], align 16
@.str.112 = private unnamed_addr constant [12 x i8] c".largecomm\09\00", align 1
@.str.113 = private unnamed_addr constant [8 x i8] c"\09.comm\09\00", align 1
@.str.114 = private unnamed_addr constant [9 x i8] c",%lu,%u\0A\00", align 1
@.str.115 = private unnamed_addr constant [6 x i8] c".lbss\00", align 1
@bss_section = external local_unnamed_addr global ptr, align 8
@.str.116 = private unnamed_addr constant [12 x i8] c"\09.align %d\0A\00", align 1
@last_assemble_variable_decl = external local_unnamed_addr global ptr, align 8
@.str.117 = private unnamed_addr constant [8 x i8] c"\09.type\09\00", align 1
@.str.118 = private unnamed_addr constant [3 x i8] c", \00", align 1
@.str.119 = private unnamed_addr constant [4 x i8] c"@%s\00", align 1
@.str.120 = private unnamed_addr constant [7 x i8] c"object\00", align 1
@size_directive_output = external local_unnamed_addr global i32, align 4
@flag_inhibit_size_directive = external local_unnamed_addr global i32, align 4
@.str.121 = private unnamed_addr constant [8 x i8] c"\09.size\09\00", align 1
@.str.122 = private unnamed_addr constant [7 x i8] c", %ld\0A\00", align 1
@.str.123 = private unnamed_addr constant [3 x i8] c":\0A\00", align 1
@.str.124 = private unnamed_addr constant [7 x i8] c"%s%lu\0A\00", align 1
@.str.125 = private unnamed_addr constant [8 x i8] c"\09.zero\09\00", align 1
@optimize = external local_unnamed_addr global i32, align 4
@flag_vect_cost_model = external local_unnamed_addr global i32, align 4
@.str.126 = private unnamed_addr constant [6 x i8] c"cdecl\00", align 1
@.str.127 = private unnamed_addr constant [8 x i8] c"stdcall\00", align 1
@.str.128 = private unnamed_addr constant [9 x i8] c"fastcall\00", align 1
@mode_size = external local_unnamed_addr global [87 x i8], align 16
@cfun = external local_unnamed_addr global ptr, align 8
@mode_class = external local_unnamed_addr constant [87 x i8], align 16
@.str.130 = private unnamed_addr constant [7 x i8] c"i386.c\00", align 1
@.str.131 = private unnamed_addr constant [2 x i8] c"?\00", align 1
@volatile_ok = external local_unnamed_addr global i32, align 4
@const_tiny_rtx = external local_unnamed_addr global [3 x [87 x ptr]], align 16
@ext_80387_constants_init = internal unnamed_addr global i1 false, align 1
@ext_80387_constants_table = internal global [5 x %struct.real_value] zeroinitializer, align 16
@dconstm1 = external global %struct.real_value, align 8
@.str.132 = private unnamed_addr constant [5 x i8] c"fldz\00", align 1
@.str.133 = private unnamed_addr constant [5 x i8] c"fld1\00", align 1
@.str.134 = private unnamed_addr constant [7 x i8] c"fldlg2\00", align 1
@.str.135 = private unnamed_addr constant [7 x i8] c"fldln2\00", align 1
@.str.136 = private unnamed_addr constant [7 x i8] c"fldl2e\00", align 1
@.str.137 = private unnamed_addr constant [7 x i8] c"fldl2t\00", align 1
@.str.138 = private unnamed_addr constant [6 x i8] c"fldpi\00", align 1
@.str.139 = private unnamed_addr constant [2 x i8] c"#\00", align 1
@const_int_rtx = external local_unnamed_addr global [129 x ptr], align 16
@.str.140 = private unnamed_addr constant [18 x i8] c"vxorps\09%0, %0, %0\00", align 1
@.str.141 = private unnamed_addr constant [13 x i8] c"xorps\09%0, %0\00", align 1
@.str.142 = private unnamed_addr constant [18 x i8] c"vxorpd\09%0, %0, %0\00", align 1
@.str.143 = private unnamed_addr constant [13 x i8] c"xorpd\09%0, %0\00", align 1
@.str.144 = private unnamed_addr constant [17 x i8] c"vpxor\09%0, %0, %0\00", align 1
@.str.145 = private unnamed_addr constant [12 x i8] c"pxor\09%0, %0\00", align 1
@.str.146 = private unnamed_addr constant [21 x i8] c"vxorps\09%x0, %x0, %x0\00", align 1
@.str.147 = private unnamed_addr constant [21 x i8] c"vxorpd\09%x0, %x0, %x0\00", align 1
@.str.148 = private unnamed_addr constant [20 x i8] c"vpxor\09%x0, %x0, %x0\00", align 1
@.str.149 = private unnamed_addr constant [20 x i8] c"vpcmpeqd\09%0, %0, %0\00", align 1
@.str.150 = private unnamed_addr constant [15 x i8] c"pcmpeqd\09%0, %0\00", align 1
@rtx_format = external local_unnamed_addr constant [139 x ptr], align 16
@rtx_length = external local_unnamed_addr constant [139 x i8], align 16
@x_rtl = external local_unnamed_addr global %struct.rtl_data, align 8
@.str.151 = private unnamed_addr constant [22 x i8] c"_GLOBAL_OFFSET_TABLE_\00", align 1
@.str.152 = private unnamed_addr constant [23 x i8] c"mov%z0\09{%2, %0|%0, %2}\00", align 1
@.str.153 = private unnamed_addr constant [9 x i8] c"call\09%a2\00", align 1
@global_rtl = external local_unnamed_addr global [11 x ptr], align 16
@asm_out_file = external local_unnamed_addr global ptr, align 8
@.str.154 = private unnamed_addr constant [2 x i8] c"L\00", align 1
@.str.155 = private unnamed_addr constant [10 x i8] c"pop%z0\09%0\00", align 1
@pic_labels_used = internal unnamed_addr global i32 0, align 4
@.str.156 = private unnamed_addr constant [9 x i8] c"call\09%X2\00", align 1
@.str.157 = private unnamed_addr constant [23 x i8] c"add%z0\09{%1, %0|%0, %1}\00", align 1
@.str.158 = private unnamed_addr constant [39 x i8] c"add%z0\09{%1+[.-%a2], %0|%0, %1+(.-%a2)}\00", align 1
@current_function_decl = external local_unnamed_addr global ptr, align 8
@current_function_sp_is_unchanging = external local_unnamed_addr global i32, align 4
@rtx_class = external local_unnamed_addr constant [139 x i32], align 16
@.str.159 = private unnamed_addr constant [4 x i8] c"rip\00", align 1
@.str.160 = private unnamed_addr constant [39 x i8] c"extended registers have no high halves\00", align 1
@.str.161 = private unnamed_addr constant [5 x i8] c"r%ib\00", align 1
@.str.162 = private unnamed_addr constant [5 x i8] c"r%iw\00", align 1
@.str.163 = private unnamed_addr constant [5 x i8] c"r%id\00", align 1
@.str.164 = private unnamed_addr constant [4 x i8] c"r%i\00", align 1
@.str.165 = private unnamed_addr constant [47 x i8] c"unsupported operand size for extended register\00", align 1
@.str.166 = private unnamed_addr constant [6 x i8] c"st(0)\00", align 1
@hi_reg_name = internal unnamed_addr constant [53 x ptr] [ptr @.str.339, ptr @.str.340, ptr @.str.341, ptr @.str.342, ptr @.str.343, ptr @.str.344, ptr @.str.345, ptr @.str.346, ptr @.str.347, ptr @.str.348, ptr @.str.349, ptr @.str.350, ptr @.str.351, ptr @.str.352, ptr @.str.353, ptr @.str.354, ptr @.str.355, ptr @.str.356, ptr @.str.357, ptr @.str.358, ptr @.str.359, ptr @.str.360, ptr @.str.361, ptr @.str.362, ptr @.str.363, ptr @.str.364, ptr @.str.365, ptr @.str.366, ptr @.str.367, ptr @.str.368, ptr @.str.369, ptr @.str.370, ptr @.str.371, ptr @.str.372, ptr @.str.373, ptr @.str.374, ptr @.str.375, ptr @.str.376, ptr @.str.377, ptr @.str.378, ptr @.str.379, ptr @.str.380, ptr @.str.381, ptr @.str.382, ptr @.str.383, ptr @.str.384, ptr @.str.385, ptr @.str.386, ptr @.str.387, ptr @.str.388, ptr @.str.389, ptr @.str.390, ptr @.str.391], align 16
@reltable.print_reg = internal unnamed_addr constant [8 x i32] [i32 trunc (i64 sub (i64 ptrtoint (ptr @.str.392 to i64), i64 ptrtoint (ptr @reltable.print_reg to i64)) to i32), i32 trunc (i64 sub (i64 ptrtoint (ptr @.str.393 to i64), i64 ptrtoint (ptr @reltable.print_reg to i64)) to i32), i32 trunc (i64 sub (i64 ptrtoint (ptr @.str.394 to i64), i64 ptrtoint (ptr @reltable.print_reg to i64)) to i32), i32 trunc (i64 sub (i64 ptrtoint (ptr @.str.395 to i64), i64 ptrtoint (ptr @reltable.print_reg to i64)) to i32), i32 trunc (i64 sub (i64 ptrtoint (ptr @.str.396 to i64), i64 ptrtoint (ptr @reltable.print_reg to i64)) to i32), i32 trunc (i64 sub (i64 ptrtoint (ptr @.str.397 to i64), i64 ptrtoint (ptr @reltable.print_reg to i64)) to i32), i32 trunc (i64 sub (i64 ptrtoint (ptr @.str.398 to i64), i64 ptrtoint (ptr @reltable.print_reg to i64)) to i32), i32 trunc (i64 sub (i64 ptrtoint (ptr @.str.399 to i64), i64 ptrtoint (ptr @reltable.print_reg to i64)) to i32)], align 4
@reltable.print_reg.1391 = internal unnamed_addr constant [4 x i32] [i32 trunc (i64 sub (i64 ptrtoint (ptr @.str.400 to i64), i64 ptrtoint (ptr @reltable.print_reg.1391 to i64)) to i32), i32 trunc (i64 sub (i64 ptrtoint (ptr @.str.401 to i64), i64 ptrtoint (ptr @reltable.print_reg.1391 to i64)) to i32), i32 trunc (i64 sub (i64 ptrtoint (ptr @.str.402 to i64), i64 ptrtoint (ptr @reltable.print_reg.1391 to i64)) to i32), i32 trunc (i64 sub (i64 ptrtoint (ptr @.str.403 to i64), i64 ptrtoint (ptr @reltable.print_reg.1391 to i64)) to i32)], align 4
@.str.167 = private unnamed_addr constant [7 x i8] c", %%%s\00", align 1
@.str.168 = private unnamed_addr constant [5 x i8] c", %s\00", align 1
@.str.169 = private unnamed_addr constant [52 x i8] c"'%%&' used without any local dynamic TLS references\00", align 1
@.str.170 = private unnamed_addr constant [43 x i8] c"invalid operand size for operand code '%c'\00", align 1
@.str.171 = private unnamed_addr constant [48 x i8] c"non-integer operand used with operand code '%c'\00", align 1
@.str.172 = private unnamed_addr constant [49 x i8] c"invalid operand type used with operand code '%c'\00", align 1
@.str.173 = private unnamed_addr constant [3 x i8] c"eq\00", align 1
@.str.174 = private unnamed_addr constant [6 x i8] c"eq_us\00", align 1
@.str.175 = private unnamed_addr constant [3 x i8] c"lt\00", align 1
@.str.176 = private unnamed_addr constant [4 x i8] c"nge\00", align 1
@.str.177 = private unnamed_addr constant [3 x i8] c"le\00", align 1
@.str.178 = private unnamed_addr constant [4 x i8] c"ngt\00", align 1
@.str.179 = private unnamed_addr constant [6 x i8] c"unord\00", align 1
@.str.180 = private unnamed_addr constant [4 x i8] c"neq\00", align 1
@.str.181 = private unnamed_addr constant [7 x i8] c"neq_oq\00", align 1
@.str.182 = private unnamed_addr constant [3 x i8] c"ge\00", align 1
@.str.183 = private unnamed_addr constant [4 x i8] c"nlt\00", align 1
@.str.184 = private unnamed_addr constant [3 x i8] c"gt\00", align 1
@.str.185 = private unnamed_addr constant [4 x i8] c"nle\00", align 1
@.str.186 = private unnamed_addr constant [4 x i8] c"ord\00", align 1
@.str.187 = private unnamed_addr constant [58 x i8] c"operand is not a condition code, invalid operand code 'D'\00", align 1
@.str.188 = private unnamed_addr constant [77 x i8] c"operand is neither a constant nor a condition code, invalid operand code 'C'\00", align 1
@.str.189 = private unnamed_addr constant [77 x i8] c"operand is neither a constant nor a condition code, invalid operand code 'F'\00", align 1
@.str.190 = private unnamed_addr constant [77 x i8] c"operand is neither a constant nor a condition code, invalid operand code 'c'\00", align 1
@.str.191 = private unnamed_addr constant [77 x i8] c"operand is neither a constant nor a condition code, invalid operand code 'f'\00", align 1
@current_output_insn = external local_unnamed_addr global ptr, align 8
@.str.192 = private unnamed_addr constant [6 x i8] c"ds ; \00", align 1
@.str.193 = private unnamed_addr constant [6 x i8] c"cs ; \00", align 1
@.str.194 = private unnamed_addr constant [5 x i8] c"unlt\00", align 1
@.str.195 = private unnamed_addr constant [5 x i8] c"unle\00", align 1
@.str.196 = private unnamed_addr constant [4 x i8] c"ueq\00", align 1
@.str.197 = private unnamed_addr constant [4 x i8] c"ule\00", align 1
@.str.198 = private unnamed_addr constant [4 x i8] c"ult\00", align 1
@.str.199 = private unnamed_addr constant [4 x i8] c"une\00", align 1
@.str.200 = private unnamed_addr constant [58 x i8] c"operand is not a condition code, invalid operand code 'Y'\00", align 1
@.str.201 = private unnamed_addr constant [26 x i8] c"invalid operand code '%c'\00", align 1
@.str.202 = private unnamed_addr constant [5 x i8] c"BYTE\00", align 1
@.str.203 = private unnamed_addr constant [5 x i8] c"WORD\00", align 1
@.str.204 = private unnamed_addr constant [6 x i8] c"DWORD\00", align 1
@.str.205 = private unnamed_addr constant [6 x i8] c"QWORD\00", align 1
@.str.206 = private unnamed_addr constant [6 x i8] c"TBYTE\00", align 1
@.str.207 = private unnamed_addr constant [8 x i8] c"XMMWORD\00", align 1
@.str.208 = private unnamed_addr constant [8 x i8] c"YMMWORD\00", align 1
@.str.209 = private unnamed_addr constant [6 x i8] c" PTR \00", align 1
@this_is_asm_operands = external local_unnamed_addr global ptr, align 8
@.str.210 = private unnamed_addr constant [32 x i8] c"invalid constraints for operand\00", align 1
@.str.211 = private unnamed_addr constant [8 x i8] c"0x%08lx\00", align 1
@.str.212 = private unnamed_addr constant [13 x i8] c"OFFSET FLAT:\00", align 1
@.str.213 = private unnamed_addr constant [4 x i8] c"%ld\00", align 1
@.str.214 = private unnamed_addr constant [4 x i8] c"fs:\00", align 1
@.str.215 = private unnamed_addr constant [4 x i8] c"gs:\00", align 1
@.str.216 = private unnamed_addr constant [4 x i8] c"ds:\00", align 1
@.str.217 = private unnamed_addr constant [4 x i8] c",%d\00", align 1
@.str.218 = private unnamed_addr constant [4 x i8] c"*%d\00", align 1
@.str.219 = private unnamed_addr constant [10 x i8] c"@gottpoff\00", align 1
@.str.220 = private unnamed_addr constant [7 x i8] c"@tpoff\00", align 1
@.str.221 = private unnamed_addr constant [8 x i8] c"@ntpoff\00", align 1
@.str.222 = private unnamed_addr constant [8 x i8] c"@dtpoff\00", align 1
@.str.223 = private unnamed_addr constant [11 x i8] c"@gotntpoff\00", align 1
@.str.224 = private unnamed_addr constant [11 x i8] c"@indntpoff\00", align 1
@output_387_binary_op.buf = internal global [40 x i8] zeroinitializer, align 16
@.str.225 = private unnamed_addr constant [6 x i8] c"fiadd\00", align 1
@.str.226 = private unnamed_addr constant [5 x i8] c"fadd\00", align 1
@.str.227 = private unnamed_addr constant [5 x i8] c"vadd\00", align 1
@.str.228 = private unnamed_addr constant [6 x i8] c"fisub\00", align 1
@.str.229 = private unnamed_addr constant [5 x i8] c"fsub\00", align 1
@.str.230 = private unnamed_addr constant [5 x i8] c"vsub\00", align 1
@.str.231 = private unnamed_addr constant [6 x i8] c"fimul\00", align 1
@.str.232 = private unnamed_addr constant [5 x i8] c"fmul\00", align 1
@.str.233 = private unnamed_addr constant [5 x i8] c"vmul\00", align 1
@.str.234 = private unnamed_addr constant [6 x i8] c"fidiv\00", align 1
@.str.235 = private unnamed_addr constant [5 x i8] c"fdiv\00", align 1
@.str.236 = private unnamed_addr constant [5 x i8] c"vdiv\00", align 1
@.str.237 = private unnamed_addr constant [27 x i8] c"ss\09{%2, %1, %0|%0, %1, %2}\00", align 1
@.str.238 = private unnamed_addr constant [27 x i8] c"sd\09{%2, %1, %0|%0, %1, %2}\00", align 1
@.str.239 = private unnamed_addr constant [19 x i8] c"ss\09{%2, %0|%0, %2}\00", align 1
@.str.240 = private unnamed_addr constant [19 x i8] c"sd\09{%2, %0|%0, %2}\00", align 1
@.str.241 = private unnamed_addr constant [7 x i8] c"%Z2\09%2\00", align 1
@.str.242 = private unnamed_addr constant [18 x i8] c"p\09{%0, %2|%2, %0}\00", align 1
@.str.243 = private unnamed_addr constant [18 x i8] c"p\09{%2, %0|%0, %2}\00", align 1
@.str.244 = private unnamed_addr constant [19 x i8] c"\09{%y2, %0|%0, %y2}\00", align 1
@.str.245 = private unnamed_addr constant [17 x i8] c"\09{%2, %0|%0, %2}\00", align 1
@.str.246 = private unnamed_addr constant [8 x i8] c"r%Z1\09%1\00", align 1
@.str.247 = private unnamed_addr constant [21 x i8] c"{p\09%0, %2|rp\09%2, %0}\00", align 1
@.str.248 = private unnamed_addr constant [21 x i8] c"{rp\09%2, %0|p\09%0, %2}\00", align 1
@.str.249 = private unnamed_addr constant [21 x i8] c"{rp\09%0, %1|p\09%1, %0}\00", align 1
@.str.250 = private unnamed_addr constant [21 x i8] c"{p\09%1, %0|rp\09%0, %1}\00", align 1
@.str.251 = private unnamed_addr constant [20 x i8] c"r\09{%y1, %0|%0, %y1}\00", align 1
@.str.252 = private unnamed_addr constant [19 x i8] c"{\09%1, %0|r\09%0, %1}\00", align 1
@.str.253 = private unnamed_addr constant [19 x i8] c"{r\09%2, %0|\09%0, %2}\00", align 1
@.str.254 = private unnamed_addr constant [8 x i8] c"fld\09%y1\00", align 1
@.str.255 = private unnamed_addr constant [13 x i8] c"fisttp%Z0\09%0\00", align 1
@.str.256 = private unnamed_addr constant [9 x i8] c"fldcw\09%3\00", align 1
@.str.257 = private unnamed_addr constant [12 x i8] c"fistp%Z0\09%0\00", align 1
@.str.258 = private unnamed_addr constant [11 x i8] c"fist%Z0\09%0\00", align 1
@.str.259 = private unnamed_addr constant [9 x i8] c"fldcw\09%2\00", align 1
@output_fp_compare.ucomiss = internal constant [25 x i8] c"vucomiss\09{%1, %0|%0, %1}\00", align 16
@output_fp_compare.ucomisd = internal constant [25 x i8] c"vucomisd\09{%1, %0|%0, %1}\00", align 16
@output_fp_compare.comiss = internal constant [24 x i8] c"vcomiss\09{%1, %0|%0, %1}\00", align 16
@output_fp_compare.comisd = internal constant [24 x i8] c"vcomisd\09{%1, %0|%0, %1}\00", align 16
@.str.260 = private unnamed_addr constant [16 x i8] c"ftst\0A\09fnstsw\09%0\00", align 1
@.str.261 = private unnamed_addr constant [26 x i8] c"fucomip\09{%y1, %0|%0, %y1}\00", align 1
@.str.262 = private unnamed_addr constant [25 x i8] c"fcomip\09{%y1, %0|%0, %y1}\00", align 1
@.str.263 = private unnamed_addr constant [19 x i8] c"fucompp\0A\09fnstsw\09%0\00", align 1
@.str.264 = private unnamed_addr constant [18 x i8] c"fcompp\0A\09fnstsw\09%0\00", align 1
@output_fp_compare.alt = internal unnamed_addr constant [16 x ptr] [ptr @.str.265, ptr @.str.266, ptr @.str.267, ptr @.str.268, ptr @.str.269, ptr @.str.270, ptr null, ptr null, ptr @.str.271, ptr @.str.262, ptr @.str.272, ptr @.str.261, ptr null, ptr null, ptr null, ptr null], align 16
@.str.265 = private unnamed_addr constant [23 x i8] c"fcom%Z2\09%y2\0A\09fnstsw\09%0\00", align 1
@.str.266 = private unnamed_addr constant [24 x i8] c"fcomp%Z2\09%y2\0A\09fnstsw\09%0\00", align 1
@.str.267 = private unnamed_addr constant [24 x i8] c"fucom%Z2\09%y2\0A\09fnstsw\09%0\00", align 1
@.str.268 = private unnamed_addr constant [25 x i8] c"fucomp%Z2\09%y2\0A\09fnstsw\09%0\00", align 1
@.str.269 = private unnamed_addr constant [24 x i8] c"ficom%Z2\09%y2\0A\09fnstsw\09%0\00", align 1
@.str.270 = private unnamed_addr constant [25 x i8] c"ficomp%Z2\09%y2\0A\09fnstsw\09%0\00", align 1
@.str.271 = private unnamed_addr constant [24 x i8] c"fcomi\09{%y1, %0|%0, %y1}\00", align 1
@.str.272 = private unnamed_addr constant [25 x i8] c"fucomi\09{%y1, %0|%0, %y1}\00", align 1
@.str.273 = private unnamed_addr constant [8 x i8] c"\09.long\09\00", align 1
@.str.274 = private unnamed_addr constant [8 x i8] c"%s.L%d\0A\00", align 1
@.str.275 = private unnamed_addr constant [20 x i8] c"\09.long\09.L%d@GOTOFF\0A\00", align 1
@reload_in_progress = external local_unnamed_addr global i32, align 4
@rtl_hooks = external local_unnamed_addr global %struct.rtl_hooks, align 8
@dconst1 = external global %struct.real_value, align 8
@mode_inner = external local_unnamed_addr constant [87 x i8], align 16
@optab_table = external global [159 x %struct.optab_d], align 16
@split_branch_probability = external local_unnamed_addr global i32, align 4
@virtuals_instantiated = external local_unnamed_addr global i32, align 4
@ix86_tls_symbol = internal global ptr null, align 8
@.str.276 = private unnamed_addr constant [16 x i8] c"___tls_get_addr\00", align 1
@.str.277 = private unnamed_addr constant [15 x i8] c"__tls_get_addr\00", align 1
@ix86_tls_module_base_symbol = internal global ptr null, align 8
@.str.278 = private unnamed_addr constant [18 x i8] c"_TLS_MODULE_BASE_\00", align 1
@recog_data = external local_unnamed_addr global %struct.recog_data, align 8
@.str.279 = private unnamed_addr constant [18 x i8] c"unknown insn mode\00", align 1
@which_alternative = external local_unnamed_addr global i32, align 4
@tree_code_type = external local_unnamed_addr constant [0 x i32], align 4
@mode_nunits = external local_unnamed_addr constant [87 x i8], align 16
@reg_alloc_order = external local_unnamed_addr global [53 x i32], align 16
@.str.280 = private unnamed_addr constant [25 x i8] c"\09call\09*mcount@GOT(%ebx)\0A\00", align 1
@.str.281 = private unnamed_addr constant [14 x i8] c"\09call\09mcount\0A\00", align 1
@ix86_expand_vector_set.gen_extract = internal unnamed_addr constant [6 x [2 x ptr]] [[2 x ptr] [ptr @gen_vec_extract_lo_v32qi, ptr @gen_vec_extract_hi_v32qi], [2 x ptr] [ptr @gen_vec_extract_lo_v16hi, ptr @gen_vec_extract_hi_v16hi], [2 x ptr] [ptr @gen_vec_extract_lo_v8si, ptr @gen_vec_extract_hi_v8si], [2 x ptr] [ptr @gen_vec_extract_lo_v4di, ptr @gen_vec_extract_hi_v4di], [2 x ptr] [ptr @gen_vec_extract_lo_v8sf, ptr @gen_vec_extract_hi_v8sf], [2 x ptr] [ptr @gen_vec_extract_lo_v4df, ptr @gen_vec_extract_hi_v4df]], align 16
@ix86_expand_vector_set.gen_insert = internal unnamed_addr constant [6 x [2 x ptr]] [[2 x ptr] [ptr @gen_vec_set_lo_v32qi, ptr @gen_vec_set_hi_v32qi], [2 x ptr] [ptr @gen_vec_set_lo_v16hi, ptr @gen_vec_set_hi_v16hi], [2 x ptr] [ptr @gen_vec_set_lo_v8si, ptr @gen_vec_set_hi_v8si], [2 x ptr] [ptr @gen_vec_set_lo_v4di, ptr @gen_vec_set_hi_v4di], [2 x ptr] [ptr @gen_vec_set_lo_v8sf, ptr @gen_vec_set_hi_v8sf], [2 x ptr] [ptr @gen_vec_set_lo_v4df, ptr @gen_vec_set_hi_v4df]], align 16
@.str.282 = private unnamed_addr constant [9 x i8] c"fstp\09%y0\00", align 1
@.str.283 = private unnamed_addr constant [11 x i8] c"fld%Z1\09%y1\00", align 1
@.str.284 = private unnamed_addr constant [8 x i8] c"fst\09%y0\00", align 1
@.str.285 = private unnamed_addr constant [12 x i8] c"fstp%Z0\09%y0\00", align 1
@.str.286 = private unnamed_addr constant [24 x i8] c"fstp%Z0\09%y0\0A\09fld%Z0\09%y0\00", align 1
@.str.287 = private unnamed_addr constant [11 x i8] c"fst%Z0\09%y0\00", align 1
@.str.288 = private unnamed_addr constant [38 x i8] c"0.29289321881345247561810596348408353\00", align 1
@dconst2 = external global %struct.real_value, align 8
@dconsthalf = external global %struct.real_value, align 8
@real_format_for_mode = external local_unnamed_addr global [7 x ptr], align 16
@flag_signed_zeros = external local_unnamed_addr global i32, align 4
@.str.289 = private unnamed_addr constant [8 x i8] c"\09.byte\09\00", align 1
@.str.290 = private unnamed_addr constant [9 x i8] c"\09.value\09\00", align 1
@.str.291 = private unnamed_addr constant [8 x i8] c"\09.quad\09\00", align 1
@.str.292 = private unnamed_addr constant [18 x i8] c".GCC.command.line\00", align 1
@ix86_attribute_table = internal constant [12 x %struct.attribute_spec] [%struct.attribute_spec { ptr @.str.127, i32 0, i32 0, i8 0, i8 1, i8 1, ptr @ix86_handle_cconv_attribute }, %struct.attribute_spec { ptr @.str.128, i32 0, i32 0, i8 0, i8 1, i8 1, ptr @ix86_handle_cconv_attribute }, %struct.attribute_spec { ptr @.str.126, i32 0, i32 0, i8 0, i8 1, i8 1, ptr @ix86_handle_cconv_attribute }, %struct.attribute_spec { ptr @.str.324, i32 1, i32 1, i8 0, i8 1, i8 1, ptr @ix86_handle_cconv_attribute }, %struct.attribute_spec { ptr @.str.325, i32 0, i32 0, i8 0, i8 1, i8 1, ptr @ix86_handle_cconv_attribute }, %struct.attribute_spec { ptr @ix86_force_align_arg_pointer_string, i32 0, i32 0, i8 0, i8 1, i8 1, ptr @ix86_handle_cconv_attribute }, %struct.attribute_spec { ptr @.str.456, i32 0, i32 0, i8 0, i8 0, i8 0, ptr @ix86_handle_struct_attribute }, %struct.attribute_spec { ptr @.str.457, i32 0, i32 0, i8 0, i8 0, i8 0, ptr @ix86_handle_struct_attribute }, %struct.attribute_spec { ptr @.str.458, i32 0, i32 0, i8 0, i8 1, i8 1, ptr @ix86_handle_abi_attribute }, %struct.attribute_spec { ptr @.str.459, i32 0, i32 0, i8 0, i8 1, i8 1, ptr @ix86_handle_abi_attribute }, %struct.attribute_spec { ptr @.str.337, i32 0, i32 0, i8 1, i8 0, i8 0, ptr @ix86_handle_fndecl_attribute }, %struct.attribute_spec zeroinitializer], align 16
@.str.293 = private unnamed_addr constant [31 x i8] c"__builtin___emutls_get_address\00", align 1
@.str.294 = private unnamed_addr constant [35 x i8] c"__builtin___emutls_register_common\00", align 1
@ix86_builtins = internal global [801 x ptr] zeroinitializer, align 16
@ix86_builtin_func_type_tab = internal global [271 x ptr] zeroinitializer, align 16
@ix86_builtin_type_tab = internal global [69 x ptr] zeroinitializer, align 16
@queued_cfa_restores = internal global ptr null, align 8
@ix86_previous_fndecl = internal global ptr null, align 8
@ms_va_list_type_node = internal global ptr null, align 8
@sysv_va_list_type_node = internal global ptr null, align 8
@gt_ggc_r_gt_i386_h = dso_local local_unnamed_addr constant [10 x %struct.ggc_root_tab] [%struct.ggc_root_tab { ptr @ix86_builtins, i64 801, i64 8, ptr @gt_ggc_mx_lang_tree_node, ptr @gt_pch_nx_lang_tree_node }, %struct.ggc_root_tab { ptr @ix86_builtin_func_type_tab, i64 271, i64 8, ptr @gt_ggc_mx_lang_tree_node, ptr @gt_pch_nx_lang_tree_node }, %struct.ggc_root_tab { ptr @ix86_builtin_type_tab, i64 69, i64 8, ptr @gt_ggc_mx_lang_tree_node, ptr @gt_pch_nx_lang_tree_node }, %struct.ggc_root_tab { ptr @ix86_tls_module_base_symbol, i64 1, i64 8, ptr @gt_ggc_mx_rtx_def, ptr @gt_pch_nx_rtx_def }, %struct.ggc_root_tab { ptr @ix86_tls_symbol, i64 1, i64 8, ptr @gt_ggc_mx_rtx_def, ptr @gt_pch_nx_rtx_def }, %struct.ggc_root_tab { ptr @queued_cfa_restores, i64 1, i64 8, ptr @gt_ggc_mx_rtx_def, ptr @gt_pch_nx_rtx_def }, %struct.ggc_root_tab { ptr @ix86_previous_fndecl, i64 1, i64 8, ptr @gt_ggc_mx_lang_tree_node, ptr @gt_pch_nx_lang_tree_node }, %struct.ggc_root_tab { ptr @ms_va_list_type_node, i64 1, i64 8, ptr @gt_ggc_mx_lang_tree_node, ptr @gt_pch_nx_lang_tree_node }, %struct.ggc_root_tab { ptr @sysv_va_list_type_node, i64 1, i64 8, ptr @gt_ggc_mx_lang_tree_node, ptr @gt_pch_nx_lang_tree_node }, %struct.ggc_root_tab zeroinitializer], align 16
@dllimport_map = internal global ptr null, align 8
@gt_ggc_rc_gt_i386_h = dso_local local_unnamed_addr constant [2 x %struct.ggc_cache_tab] [%struct.ggc_cache_tab { ptr @dllimport_map, i64 1, i64 8, ptr @gt_ggc_mx_tree_map, ptr @gt_pch_nx_tree_map, ptr @tree_map_base_marked_p }, %struct.ggc_cache_tab zeroinitializer], align 16
@gt_pch_rc_gt_i386_h = dso_local local_unnamed_addr constant [2 x %struct.ggc_root_tab] [%struct.ggc_root_tab { ptr @dllimport_map, i64 1, i64 8, ptr @gt_ggc_m_P8tree_map4htab, ptr @gt_pch_n_P8tree_map4htab }, %struct.ggc_root_tab zeroinitializer], align 16
@x86_mfence = dso_local local_unnamed_addr global ptr null, align 8
@i386_cost = internal constant %struct.processor_costs { i32 4, i32 4, i32 12, i32 8, [5 x i32] [i32 24, i32 24, i32 24, i32 24, i32 24], i32 4, [5 x i32] [i32 92, i32 92, i32 92, i32 92, i32 92], i32 12, i32 8, i32 15, i32 3, i32 4, [3 x i32] [i32 2, i32 4, i32 2], [3 x i32] [i32 2, i32 4, i32 2], i32 2, [3 x i32] [i32 8, i32 8, i32 8], [3 x i32] [i32 8, i32 8, i32 8], i32 2, [2 x i32] [i32 4, i32 8], [2 x i32] [i32 4, i32 8], i32 2, [3 x i32] [i32 4, i32 8, i32 16], [3 x i32] [i32 4, i32 8, i32 16], i32 3, i32 0, i32 0, i32 0, i32 0, i32 1, i32 92, i32 108, i32 352, i32 88, i32 96, i32 488, [2 x %struct.stringop_algs] [%struct.stringop_algs { i32 2, [4 x %struct.stringop_strategy] [%struct.stringop_strategy { i32 -1, i32 2 }, %struct.stringop_strategy zeroinitializer, %struct.stringop_strategy zeroinitializer, %struct.stringop_strategy zeroinitializer] }, %struct.stringop_algs { i32 1, [4 x %struct.stringop_strategy] [%struct.stringop_strategy { i32 -1, i32 1 }, %struct.stringop_strategy zeroinitializer, %struct.stringop_strategy zeroinitializer, %struct.stringop_strategy zeroinitializer] }], [2 x %struct.stringop_algs] [%struct.stringop_algs { i32 2, [4 x %struct.stringop_strategy] [%struct.stringop_strategy { i32 -1, i32 2 }, %struct.stringop_strategy zeroinitializer, %struct.stringop_strategy zeroinitializer, %struct.stringop_strategy zeroinitializer] }, %struct.stringop_algs { i32 1, [4 x %struct.stringop_strategy] [%struct.stringop_strategy { i32 -1, i32 1 }, %struct.stringop_strategy zeroinitializer, %struct.stringop_strategy zeroinitializer, %struct.stringop_strategy zeroinitializer] }], i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 2, i32 1, i32 3, i32 1 }, align 4
@i486_cost = internal constant %struct.processor_costs { i32 4, i32 4, i32 12, i32 8, [5 x i32] [i32 48, i32 48, i32 48, i32 48, i32 48], i32 1, [5 x i32] [i32 160, i32 160, i32 160, i32 160, i32 160], i32 12, i32 8, i32 15, i32 3, i32 4, [3 x i32] [i32 2, i32 4, i32 2], [3 x i32] [i32 2, i32 4, i32 2], i32 2, [3 x i32] [i32 8, i32 8, i32 8], [3 x i32] [i32 8, i32 8, i32 8], i32 2, [2 x i32] [i32 4, i32 8], [2 x i32] [i32 4, i32 8], i32 2, [3 x i32] [i32 4, i32 8, i32 16], [3 x i32] [i32 4, i32 8, i32 16], i32 3, i32 4, i32 4, i32 0, i32 0, i32 1, i32 32, i32 64, i32 292, i32 12, i32 12, i32 332, [2 x %struct.stringop_algs] [%struct.stringop_algs { i32 3, [4 x %struct.stringop_strategy] [%struct.stringop_strategy { i32 -1, i32 3 }, %struct.stringop_strategy zeroinitializer, %struct.stringop_strategy zeroinitializer, %struct.stringop_strategy zeroinitializer] }, %struct.stringop_algs { i32 1, [4 x %struct.stringop_strategy] [%struct.stringop_strategy { i32 -1, i32 1 }, %struct.stringop_strategy zeroinitializer, %struct.stringop_strategy zeroinitializer, %struct.stringop_strategy zeroinitializer] }], [2 x %struct.stringop_algs] [%struct.stringop_algs { i32 3, [4 x %struct.stringop_strategy] [%struct.stringop_strategy { i32 -1, i32 3 }, %struct.stringop_strategy zeroinitializer, %struct.stringop_strategy zeroinitializer, %struct.stringop_strategy zeroinitializer] }, %struct.stringop_algs { i32 1, [4 x %struct.stringop_strategy] [%struct.stringop_strategy { i32 -1, i32 1 }, %struct.stringop_strategy zeroinitializer, %struct.stringop_strategy zeroinitializer, %struct.stringop_strategy zeroinitializer] }], i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 2, i32 1, i32 3, i32 1 }, align 4
@pentiumpro_cost = internal constant %struct.processor_costs { i32 4, i32 4, i32 4, i32 4, [5 x i32] [i32 16, i32 16, i32 16, i32 16, i32 16], i32 0, [5 x i32] [i32 68, i32 68, i32 68, i32 68, i32 68], i32 4, i32 4, i32 8, i32 6, i32 2, [3 x i32] [i32 4, i32 4, i32 4], [3 x i32] [i32 2, i32 2, i32 2], i32 2, [3 x i32] [i32 2, i32 2, i32 6], [3 x i32] [i32 4, i32 4, i32 6], i32 2, [2 x i32] [i32 2, i32 2], [2 x i32] [i32 2, i32 2], i32 2, [3 x i32] [i32 2, i32 2, i32 8], [3 x i32] [i32 2, i32 2, i32 8], i32 3, i32 8, i32 256, i32 32, i32 6, i32 2, i32 12, i32 20, i32 224, i32 8, i32 8, i32 224, [2 x %struct.stringop_algs] [%struct.stringop_algs { i32 3, [4 x %struct.stringop_strategy] [%struct.stringop_strategy { i32 128, i32 6 }, %struct.stringop_strategy { i32 1024, i32 7 }, %struct.stringop_strategy { i32 8192, i32 3 }, %struct.stringop_strategy { i32 -1, i32 2 }] }, %struct.stringop_algs { i32 1, [4 x %struct.stringop_strategy] [%struct.stringop_strategy { i32 -1, i32 1 }, %struct.stringop_strategy zeroinitializer, %struct.stringop_strategy zeroinitializer, %struct.stringop_strategy zeroinitializer] }], [2 x %struct.stringop_algs] [%struct.stringop_algs { i32 3, [4 x %struct.stringop_strategy] [%struct.stringop_strategy { i32 1024, i32 7 }, %struct.stringop_strategy { i32 8192, i32 3 }, %struct.stringop_strategy { i32 -1, i32 1 }, %struct.stringop_strategy zeroinitializer] }, %struct.stringop_algs { i32 1, [4 x %struct.stringop_strategy] [%struct.stringop_strategy { i32 -1, i32 1 }, %struct.stringop_strategy zeroinitializer, %struct.stringop_strategy zeroinitializer, %struct.stringop_strategy zeroinitializer] }], i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 2, i32 1, i32 3, i32 1 }, align 4
@geode_cost = internal constant %struct.processor_costs { i32 4, i32 4, i32 8, i32 4, [5 x i32] [i32 12, i32 16, i32 28, i32 28, i32 28], i32 0, [5 x i32] [i32 60, i32 92, i32 156, i32 156, i32 156], i32 4, i32 4, i32 8, i32 4, i32 1, [3 x i32] [i32 1, i32 1, i32 1], [3 x i32] [i32 1, i32 1, i32 1], i32 1, [3 x i32] [i32 1, i32 1, i32 1], [3 x i32] [i32 4, i32 6, i32 6], i32 1, [2 x i32] [i32 1, i32 1], [2 x i32] [i32 1, i32 1], i32 1, [3 x i32] [i32 1, i32 1, i32 1], [3 x i32] [i32 1, i32 1, i32 1], i32 1, i32 64, i32 128, i32 32, i32 1, i32 1, i32 24, i32 44, i32 188, i32 4, i32 4, i32 216, [2 x %struct.stringop_algs] [%struct.stringop_algs { i32 1, [4 x %struct.stringop_strategy] [%struct.stringop_strategy { i32 256, i32 3 }, %struct.stringop_strategy { i32 -1, i32 1 }, %struct.stringop_strategy zeroinitializer, %struct.stringop_strategy zeroinitializer] }, %struct.stringop_algs { i32 1, [4 x %struct.stringop_strategy] [%struct.stringop_strategy { i32 -1, i32 1 }, %struct.stringop_strategy zeroinitializer, %struct.stringop_strategy zeroinitializer, %struct.stringop_strategy zeroinitializer] }], [2 x %struct.stringop_algs] [%struct.stringop_algs { i32 1, [4 x %struct.stringop_strategy] [%struct.stringop_strategy { i32 256, i32 3 }, %struct.stringop_strategy { i32 -1, i32 1 }, %struct.stringop_strategy zeroinitializer, %struct.stringop_strategy zeroinitializer] }, %struct.stringop_algs { i32 1, [4 x %struct.stringop_strategy] [%struct.stringop_strategy { i32 -1, i32 1 }, %struct.stringop_strategy zeroinitializer, %struct.stringop_strategy zeroinitializer, %struct.stringop_strategy zeroinitializer] }], i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 2, i32 1, i32 3, i32 1 }, align 4
@k6_cost = internal constant %struct.processor_costs { i32 4, i32 8, i32 4, i32 4, [5 x i32] [i32 12, i32 12, i32 12, i32 12, i32 12], i32 0, [5 x i32] [i32 72, i32 72, i32 72, i32 72, i32 72], i32 8, i32 8, i32 8, i32 4, i32 3, [3 x i32] [i32 4, i32 5, i32 4], [3 x i32] [i32 2, i32 3, i32 2], i32 4, [3 x i32] [i32 6, i32 6, i32 6], [3 x i32] [i32 4, i32 4, i32 4], i32 2, [2 x i32] [i32 2, i32 2], [2 x i32] [i32 2, i32 2], i32 2, [3 x i32] [i32 2, i32 2, i32 8], [3 x i32] [i32 2, i32 2, i32 8], i32 6, i32 32, i32 32, i32 32, i32 1, i32 1, i32 8, i32 8, i32 224, i32 8, i32 8, i32 224, [2 x %struct.stringop_algs] [%struct.stringop_algs { i32 1, [4 x %struct.stringop_strategy] [%struct.stringop_strategy { i32 256, i32 3 }, %struct.stringop_strategy { i32 -1, i32 1 }, %struct.stringop_strategy zeroinitializer, %struct.stringop_strategy zeroinitializer] }, %struct.stringop_algs { i32 1, [4 x %struct.stringop_strategy] [%struct.stringop_strategy { i32 -1, i32 1 }, %struct.stringop_strategy zeroinitializer, %struct.stringop_strategy zeroinitializer, %struct.stringop_strategy zeroinitializer] }], [2 x %struct.stringop_algs] [%struct.stringop_algs { i32 1, [4 x %struct.stringop_strategy] [%struct.stringop_strategy { i32 256, i32 3 }, %struct.stringop_strategy { i32 -1, i32 1 }, %struct.stringop_strategy zeroinitializer, %struct.stringop_strategy zeroinitializer] }, %struct.stringop_algs { i32 1, [4 x %struct.stringop_strategy] [%struct.stringop_strategy { i32 -1, i32 1 }, %struct.stringop_strategy zeroinitializer, %struct.stringop_strategy zeroinitializer, %struct.stringop_strategy zeroinitializer] }], i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 2, i32 1, i32 3, i32 1 }, align 4
@athlon_cost = internal constant %struct.processor_costs { i32 4, i32 8, i32 4, i32 4, [5 x i32] [i32 20, i32 20, i32 20, i32 20, i32 20], i32 0, [5 x i32] [i32 72, i32 104, i32 168, i32 296, i32 296], i32 4, i32 4, i32 8, i32 9, i32 4, [3 x i32] [i32 3, i32 4, i32 3], [3 x i32] [i32 3, i32 4, i32 3], i32 4, [3 x i32] [i32 4, i32 4, i32 12], [3 x i32] [i32 6, i32 6, i32 8], i32 2, [2 x i32] [i32 4, i32 4], [2 x i32] [i32 4, i32 4], i32 2, [3 x i32] [i32 4, i32 4, i32 6], [3 x i32] [i32 4, i32 4, i32 5], i32 5, i32 64, i32 256, i32 64, i32 6, i32 5, i32 16, i32 16, i32 96, i32 8, i32 8, i32 140, [2 x %struct.stringop_algs] [%struct.stringop_algs { i32 1, [4 x %struct.stringop_strategy] [%struct.stringop_strategy { i32 2048, i32 3 }, %struct.stringop_strategy { i32 -1, i32 1 }, %struct.stringop_strategy zeroinitializer, %struct.stringop_strategy zeroinitializer] }, %struct.stringop_algs { i32 1, [4 x %struct.stringop_strategy] [%struct.stringop_strategy { i32 -1, i32 1 }, %struct.stringop_strategy zeroinitializer, %struct.stringop_strategy zeroinitializer, %struct.stringop_strategy zeroinitializer] }], [2 x %struct.stringop_algs] [%struct.stringop_algs { i32 1, [4 x %struct.stringop_strategy] [%struct.stringop_strategy { i32 2048, i32 3 }, %struct.stringop_strategy { i32 -1, i32 1 }, %struct.stringop_strategy zeroinitializer, %struct.stringop_strategy zeroinitializer] }, %struct.stringop_algs { i32 1, [4 x %struct.stringop_strategy] [%struct.stringop_strategy { i32 -1, i32 1 }, %struct.stringop_strategy zeroinitializer, %struct.stringop_strategy zeroinitializer, %struct.stringop_strategy zeroinitializer] }], i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 2, i32 1, i32 3, i32 1 }, align 4
@pentium4_cost = internal constant %struct.processor_costs { i32 4, i32 12, i32 16, i32 16, [5 x i32] [i32 60, i32 60, i32 60, i32 60, i32 60], i32 0, [5 x i32] [i32 224, i32 224, i32 224, i32 224, i32 224], i32 4, i32 4, i32 16, i32 6, i32 2, [3 x i32] [i32 4, i32 5, i32 4], [3 x i32] [i32 2, i32 3, i32 2], i32 2, [3 x i32] [i32 2, i32 2, i32 6], [3 x i32] [i32 4, i32 4, i32 6], i32 2, [2 x i32] [i32 2, i32 2], [2 x i32] [i32 2, i32 2], i32 12, [3 x i32] [i32 12, i32 12, i32 12], [3 x i32] [i32 2, i32 2, i32 8], i32 10, i32 8, i32 256, i32 64, i32 6, i32 2, i32 20, i32 28, i32 172, i32 8, i32 8, i32 172, [2 x %struct.stringop_algs] [%struct.stringop_algs { i32 1, [4 x %struct.stringop_strategy] [%struct.stringop_strategy { i32 12, i32 5 }, %struct.stringop_strategy { i32 -1, i32 3 }, %struct.stringop_strategy zeroinitializer, %struct.stringop_strategy zeroinitializer] }, %struct.stringop_algs { i32 1, [4 x %struct.stringop_strategy] [%struct.stringop_strategy { i32 -1, i32 1 }, %struct.stringop_strategy zeroinitializer, %struct.stringop_strategy zeroinitializer, %struct.stringop_strategy zeroinitializer] }], [2 x %struct.stringop_algs] [%struct.stringop_algs { i32 1, [4 x %struct.stringop_strategy] [%struct.stringop_strategy { i32 6, i32 5 }, %struct.stringop_strategy { i32 48, i32 6 }, %struct.stringop_strategy { i32 20480, i32 3 }, %struct.stringop_strategy { i32 -1, i32 1 }] }, %struct.stringop_algs { i32 1, [4 x %struct.stringop_strategy] [%struct.stringop_strategy { i32 -1, i32 1 }, %struct.stringop_strategy zeroinitializer, %struct.stringop_strategy zeroinitializer, %struct.stringop_strategy zeroinitializer] }], i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 2, i32 1, i32 3, i32 1 }, align 4
@k8_cost = internal constant %struct.processor_costs { i32 4, i32 8, i32 4, i32 4, [5 x i32] [i32 12, i32 16, i32 12, i32 16, i32 20], i32 0, [5 x i32] [i32 72, i32 104, i32 168, i32 296, i32 296], i32 4, i32 4, i32 8, i32 9, i32 4, [3 x i32] [i32 3, i32 4, i32 3], [3 x i32] [i32 3, i32 4, i32 3], i32 4, [3 x i32] [i32 4, i32 4, i32 12], [3 x i32] [i32 6, i32 6, i32 8], i32 2, [2 x i32] [i32 3, i32 3], [2 x i32] [i32 4, i32 4], i32 2, [3 x i32] [i32 4, i32 3, i32 6], [3 x i32] [i32 4, i32 4, i32 5], i32 5, i32 64, i32 512, i32 64, i32 100, i32 3, i32 16, i32 16, i32 76, i32 8, i32 8, i32 140, [2 x %struct.stringop_algs] [%struct.stringop_algs { i32 1, [4 x %struct.stringop_strategy] [%struct.stringop_strategy { i32 6, i32 6 }, %struct.stringop_strategy { i32 14, i32 7 }, %struct.stringop_strategy { i32 -1, i32 3 }, %struct.stringop_strategy zeroinitializer] }, %struct.stringop_algs { i32 1, [4 x %struct.stringop_strategy] [%struct.stringop_strategy { i32 16, i32 6 }, %struct.stringop_strategy { i32 8192, i32 4 }, %struct.stringop_strategy { i32 -1, i32 1 }, %struct.stringop_strategy zeroinitializer] }], [2 x %struct.stringop_algs] [%struct.stringop_algs { i32 1, [4 x %struct.stringop_strategy] [%struct.stringop_strategy { i32 8, i32 6 }, %struct.stringop_strategy { i32 24, i32 7 }, %struct.stringop_strategy { i32 2048, i32 3 }, %struct.stringop_strategy { i32 -1, i32 1 }] }, %struct.stringop_algs { i32 1, [4 x %struct.stringop_strategy] [%struct.stringop_strategy { i32 48, i32 7 }, %struct.stringop_strategy { i32 8192, i32 4 }, %struct.stringop_strategy { i32 -1, i32 1 }, %struct.stringop_strategy zeroinitializer] }], i32 4, i32 2, i32 2, i32 5, i32 0, i32 2, i32 2, i32 3, i32 3, i32 3, i32 2 }, align 4
@nocona_cost = internal constant %struct.processor_costs { i32 4, i32 4, i32 4, i32 4, [5 x i32] [i32 40, i32 40, i32 40, i32 40, i32 40], i32 0, [5 x i32] [i32 264, i32 264, i32 264, i32 264, i32 264], i32 4, i32 4, i32 16, i32 17, i32 4, [3 x i32] [i32 4, i32 4, i32 4], [3 x i32] [i32 4, i32 4, i32 4], i32 3, [3 x i32] [i32 12, i32 12, i32 12], [3 x i32] [i32 4, i32 4, i32 4], i32 6, [2 x i32] [i32 12, i32 12], [2 x i32] [i32 12, i32 12], i32 6, [3 x i32] [i32 12, i32 12, i32 12], [3 x i32] [i32 12, i32 12, i32 12], i32 8, i32 8, i32 1024, i32 128, i32 8, i32 1, i32 24, i32 32, i32 160, i32 12, i32 12, i32 176, [2 x %struct.stringop_algs] [%struct.stringop_algs { i32 1, [4 x %struct.stringop_strategy] [%struct.stringop_strategy { i32 12, i32 5 }, %struct.stringop_strategy { i32 -1, i32 3 }, %struct.stringop_strategy zeroinitializer, %struct.stringop_strategy zeroinitializer] }, %struct.stringop_algs { i32 1, [4 x %struct.stringop_strategy] [%struct.stringop_strategy { i32 32, i32 6 }, %struct.stringop_strategy { i32 20000, i32 4 }, %struct.stringop_strategy { i32 100000, i32 7 }, %struct.stringop_strategy { i32 -1, i32 1 }] }], [2 x %struct.stringop_algs] [%struct.stringop_algs { i32 1, [4 x %struct.stringop_strategy] [%struct.stringop_strategy { i32 6, i32 5 }, %struct.stringop_strategy { i32 48, i32 6 }, %struct.stringop_strategy { i32 20480, i32 3 }, %struct.stringop_strategy { i32 -1, i32 1 }] }, %struct.stringop_algs { i32 1, [4 x %struct.stringop_strategy] [%struct.stringop_strategy { i32 24, i32 6 }, %struct.stringop_strategy { i32 64, i32 7 }, %struct.stringop_strategy { i32 8192, i32 4 }, %struct.stringop_strategy { i32 -1, i32 1 }] }], i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 2, i32 1, i32 3, i32 1 }, align 4
@core2_cost = internal constant %struct.processor_costs { i32 4, i32 5, i32 4, i32 4, [5 x i32] [i32 12, i32 12, i32 12, i32 12, i32 12], i32 0, [5 x i32] [i32 88, i32 88, i32 88, i32 88, i32 88], i32 4, i32 4, i32 8, i32 16, i32 2, [3 x i32] [i32 6, i32 6, i32 6], [3 x i32] [i32 4, i32 4, i32 4], i32 2, [3 x i32] [i32 6, i32 6, i32 6], [3 x i32] [i32 4, i32 4, i32 4], i32 2, [2 x i32] [i32 6, i32 6], [2 x i32] [i32 4, i32 4], i32 2, [3 x i32] [i32 6, i32 6, i32 6], [3 x i32] [i32 4, i32 4, i32 4], i32 2, i32 32, i32 2048, i32 128, i32 8, i32 3, i32 12, i32 20, i32 128, i32 4, i32 4, i32 232, [2 x %struct.stringop_algs] [%struct.stringop_algs { i32 1, [4 x %struct.stringop_strategy] [%struct.stringop_strategy { i32 11, i32 6 }, %struct.stringop_strategy { i32 -1, i32 3 }, %struct.stringop_strategy zeroinitializer, %struct.stringop_strategy zeroinitializer] }, %struct.stringop_algs { i32 1, [4 x %struct.stringop_strategy] [%struct.stringop_strategy { i32 32, i32 6 }, %struct.stringop_strategy { i32 64, i32 3 }, %struct.stringop_strategy { i32 8192, i32 4 }, %struct.stringop_strategy { i32 -1, i32 1 }] }], [2 x %struct.stringop_algs] [%struct.stringop_algs { i32 1, [4 x %struct.stringop_strategy] [%struct.stringop_strategy { i32 8, i32 6 }, %struct.stringop_strategy { i32 15, i32 7 }, %struct.stringop_strategy { i32 2048, i32 3 }, %struct.stringop_strategy { i32 -1, i32 1 }] }, %struct.stringop_algs { i32 1, [4 x %struct.stringop_strategy] [%struct.stringop_strategy { i32 24, i32 6 }, %struct.stringop_strategy { i32 32, i32 7 }, %struct.stringop_strategy { i32 8192, i32 4 }, %struct.stringop_strategy { i32 -1, i32 1 }] }], i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 2, i32 1, i32 3, i32 1 }, align 4
@generic32_cost = internal constant %struct.processor_costs { i32 4, i32 5, i32 4, i32 4, [5 x i32] [i32 12, i32 16, i32 12, i32 16, i32 8], i32 0, [5 x i32] [i32 72, i32 104, i32 168, i32 296, i32 296], i32 4, i32 4, i32 8, i32 17, i32 4, [3 x i32] [i32 4, i32 4, i32 4], [3 x i32] [i32 4, i32 4, i32 4], i32 4, [3 x i32] [i32 12, i32 12, i32 12], [3 x i32] [i32 6, i32 6, i32 8], i32 2, [2 x i32] [i32 8, i32 8], [2 x i32] [i32 8, i32 8], i32 2, [3 x i32] [i32 8, i32 8, i32 8], [3 x i32] [i32 8, i32 8, i32 8], i32 5, i32 32, i32 256, i32 64, i32 6, i32 3, i32 32, i32 32, i32 80, i32 32, i32 32, i32 160, [2 x %struct.stringop_algs] [%struct.stringop_algs { i32 1, [4 x %struct.stringop_strategy] [%struct.stringop_strategy { i32 32, i32 6 }, %struct.stringop_strategy { i32 8192, i32 3 }, %struct.stringop_strategy { i32 -1, i32 1 }, %struct.stringop_strategy zeroinitializer] }, %struct.stringop_algs { i32 1, [4 x %struct.stringop_strategy] [%struct.stringop_strategy { i32 -1, i32 1 }, %struct.stringop_strategy zeroinitializer, %struct.stringop_strategy zeroinitializer, %struct.stringop_strategy zeroinitializer] }], [2 x %struct.stringop_algs] [%struct.stringop_algs { i32 1, [4 x %struct.stringop_strategy] [%struct.stringop_strategy { i32 32, i32 6 }, %struct.stringop_strategy { i32 8192, i32 3 }, %struct.stringop_strategy { i32 -1, i32 1 }, %struct.stringop_strategy zeroinitializer] }, %struct.stringop_algs { i32 1, [4 x %struct.stringop_strategy] [%struct.stringop_strategy { i32 -1, i32 1 }, %struct.stringop_strategy zeroinitializer, %struct.stringop_strategy zeroinitializer, %struct.stringop_strategy zeroinitializer] }], i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 2, i32 1, i32 3, i32 1 }, align 4
@generic64_cost = internal constant %struct.processor_costs { i32 4, i32 5, i32 4, i32 4, [5 x i32] [i32 12, i32 16, i32 12, i32 16, i32 8], i32 0, [5 x i32] [i32 72, i32 104, i32 168, i32 296, i32 296], i32 4, i32 4, i32 8, i32 17, i32 4, [3 x i32] [i32 4, i32 4, i32 4], [3 x i32] [i32 4, i32 4, i32 4], i32 4, [3 x i32] [i32 12, i32 12, i32 12], [3 x i32] [i32 6, i32 6, i32 8], i32 2, [2 x i32] [i32 8, i32 8], [2 x i32] [i32 8, i32 8], i32 2, [3 x i32] [i32 8, i32 8, i32 8], [3 x i32] [i32 8, i32 8, i32 8], i32 5, i32 32, i32 512, i32 64, i32 6, i32 3, i32 32, i32 32, i32 80, i32 32, i32 32, i32 160, [2 x %struct.stringop_algs] [%struct.stringop_algs { i32 1, [4 x %struct.stringop_strategy] [%struct.stringop_strategy { i32 -1, i32 1 }, %struct.stringop_strategy zeroinitializer, %struct.stringop_strategy zeroinitializer, %struct.stringop_strategy zeroinitializer] }, %struct.stringop_algs { i32 1, [4 x %struct.stringop_strategy] [%struct.stringop_strategy { i32 32, i32 6 }, %struct.stringop_strategy { i32 8192, i32 4 }, %struct.stringop_strategy { i32 -1, i32 1 }, %struct.stringop_strategy zeroinitializer] }], [2 x %struct.stringop_algs] [%struct.stringop_algs { i32 1, [4 x %struct.stringop_strategy] [%struct.stringop_strategy { i32 -1, i32 1 }, %struct.stringop_strategy zeroinitializer, %struct.stringop_strategy zeroinitializer, %struct.stringop_strategy zeroinitializer] }, %struct.stringop_algs { i32 1, [4 x %struct.stringop_strategy] [%struct.stringop_strategy { i32 32, i32 6 }, %struct.stringop_strategy { i32 8192, i32 4 }, %struct.stringop_strategy { i32 -1, i32 1 }, %struct.stringop_strategy zeroinitializer] }], i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 2, i32 1, i32 3, i32 1 }, align 4
@atom_cost = internal constant %struct.processor_costs { i32 4, i32 5, i32 4, i32 4, [5 x i32] [i32 12, i32 16, i32 12, i32 16, i32 8], i32 0, [5 x i32] [i32 72, i32 104, i32 168, i32 296, i32 296], i32 4, i32 4, i32 8, i32 17, i32 2, [3 x i32] [i32 4, i32 4, i32 4], [3 x i32] [i32 4, i32 4, i32 4], i32 4, [3 x i32] [i32 12, i32 12, i32 12], [3 x i32] [i32 6, i32 6, i32 8], i32 2, [2 x i32] [i32 8, i32 8], [2 x i32] [i32 8, i32 8], i32 2, [3 x i32] [i32 8, i32 8, i32 8], [3 x i32] [i32 8, i32 8, i32 8], i32 5, i32 32, i32 256, i32 64, i32 6, i32 3, i32 32, i32 32, i32 80, i32 32, i32 32, i32 160, [2 x %struct.stringop_algs] [%struct.stringop_algs { i32 1, [4 x %struct.stringop_strategy] [%struct.stringop_strategy { i32 11, i32 6 }, %struct.stringop_strategy { i32 -1, i32 3 }, %struct.stringop_strategy zeroinitializer, %struct.stringop_strategy zeroinitializer] }, %struct.stringop_algs { i32 1, [4 x %struct.stringop_strategy] [%struct.stringop_strategy { i32 32, i32 6 }, %struct.stringop_strategy { i32 64, i32 3 }, %struct.stringop_strategy { i32 8192, i32 4 }, %struct.stringop_strategy { i32 -1, i32 1 }] }], [2 x %struct.stringop_algs] [%struct.stringop_algs { i32 1, [4 x %struct.stringop_strategy] [%struct.stringop_strategy { i32 8, i32 6 }, %struct.stringop_strategy { i32 15, i32 7 }, %struct.stringop_strategy { i32 2048, i32 3 }, %struct.stringop_strategy { i32 -1, i32 1 }] }, %struct.stringop_algs { i32 1, [4 x %struct.stringop_strategy] [%struct.stringop_strategy { i32 24, i32 6 }, %struct.stringop_strategy { i32 32, i32 7 }, %struct.stringop_strategy { i32 8192, i32 4 }, %struct.stringop_strategy { i32 -1, i32 1 }] }], i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 2, i32 1, i32 3, i32 1 }, align 4
@ix86_valid_target_attribute_inner_p.attrs = internal unnamed_addr constant [28 x %struct.anon] [%struct.anon { ptr @.str.295, i64 5, i32 4, i32 751, i32 0 }, %struct.anon { ptr @.str.296, i64 3, i32 4, i32 757, i32 0 }, %struct.anon { ptr @.str.297, i64 3, i32 4, i32 759, i32 0 }, %struct.anon { ptr @.str.298, i64 3, i32 4, i32 767, i32 0 }, %struct.anon { ptr @.str.299, i64 3, i32 4, i32 789, i32 0 }, %struct.anon { ptr @.str.300, i64 6, i32 4, i32 799, i32 0 }, %struct.anon { ptr @.str.301, i64 6, i32 4, i32 800, i32 0 }, %struct.anon { ptr @.str.92, i64 3, i32 4, i32 809, i32 0 }, %struct.anon { ptr @.str.302, i64 4, i32 4, i32 810, i32 0 }, %struct.anon { ptr @.str.303, i64 4, i32 4, i32 812, i32 0 }, %struct.anon { ptr @.str.304, i64 4, i32 4, i32 813, i32 0 }, %struct.anon { ptr @.str.305, i64 6, i32 4, i32 814, i32 0 }, %struct.anon { ptr @.str.306, i64 6, i32 4, i32 815, i32 0 }, %struct.anon { ptr @.str.307, i64 5, i32 4, i32 816, i32 0 }, %struct.anon { ptr @.str.308, i64 5, i32 4, i32 818, i32 0 }, %struct.anon { ptr @.str.309, i64 4, i32 4, i32 775, i32 0 }, %struct.anon { ptr @.str.310, i64 3, i32 4, i32 827, i32 0 }, %struct.anon { ptr @.str.311, i64 3, i32 4, i32 788, i32 0 }, %struct.anon { ptr @.str.312, i64 5, i32 3, i32 0, i32 0 }, %struct.anon { ptr @.str.313, i64 7, i32 3, i32 2, i32 0 }, %struct.anon { ptr @.str.314, i64 5, i32 3, i32 1, i32 0 }, %struct.anon { ptr @.str.315, i64 3, i32 1, i32 769, i32 16 }, %struct.anon { ptr @.str.316, i64 14, i32 2, i32 773, i32 4096 }, %struct.anon { ptr @.str.317, i64 7, i32 1, i32 782, i32 128 }, %struct.anon { ptr @.str.318, i64 20, i32 1, i32 784, i32 256 }, %struct.anon { ptr @.str.319, i64 28, i32 1, i32 785, i32 512 }, %struct.anon { ptr @.str.320, i64 15, i32 2, i32 792, i32 2048 }, %struct.anon { ptr @.str.321, i64 5, i32 1, i32 803, i32 65536 }], align 16
@.str.295 = private unnamed_addr constant [6 x i8] c"3dnow\00", align 1
@.str.296 = private unnamed_addr constant [4 x i8] c"abm\00", align 1
@.str.297 = private unnamed_addr constant [4 x i8] c"aes\00", align 1
@.str.298 = private unnamed_addr constant [4 x i8] c"avx\00", align 1
@.str.299 = private unnamed_addr constant [4 x i8] c"mmx\00", align 1
@.str.300 = private unnamed_addr constant [7 x i8] c"pclmul\00", align 1
@.str.301 = private unnamed_addr constant [7 x i8] c"popcnt\00", align 1
@.str.302 = private unnamed_addr constant [5 x i8] c"sse2\00", align 1
@.str.303 = private unnamed_addr constant [5 x i8] c"sse3\00", align 1
@.str.304 = private unnamed_addr constant [5 x i8] c"sse4\00", align 1
@.str.305 = private unnamed_addr constant [7 x i8] c"sse4.1\00", align 1
@.str.306 = private unnamed_addr constant [7 x i8] c"sse4.2\00", align 1
@.str.307 = private unnamed_addr constant [6 x i8] c"sse4a\00", align 1
@.str.308 = private unnamed_addr constant [6 x i8] c"ssse3\00", align 1
@.str.309 = private unnamed_addr constant [5 x i8] c"fma4\00", align 1
@.str.310 = private unnamed_addr constant [4 x i8] c"xop\00", align 1
@.str.311 = private unnamed_addr constant [4 x i8] c"lwp\00", align 1
@.str.312 = private unnamed_addr constant [6 x i8] c"arch=\00", align 1
@.str.313 = private unnamed_addr constant [8 x i8] c"fpmath=\00", align 1
@.str.314 = private unnamed_addr constant [6 x i8] c"tune=\00", align 1
@.str.315 = private unnamed_addr constant [4 x i8] c"cld\00", align 1
@.str.316 = private unnamed_addr constant [15 x i8] c"fancy-math-387\00", align 1
@.str.317 = private unnamed_addr constant [8 x i8] c"ieee-fp\00", align 1
@.str.318 = private unnamed_addr constant [21 x i8] c"inline-all-stringops\00", align 1
@.str.319 = private unnamed_addr constant [29 x i8] c"inline-stringops-dynamically\00", align 1
@.str.320 = private unnamed_addr constant [16 x i8] c"align-stringops\00", align 1
@.str.321 = private unnamed_addr constant [6 x i8] c"recip\00", align 1
@libiberty_optr = external local_unnamed_addr global ptr, align 8
@libiberty_len = external local_unnamed_addr global i64, align 8
@libiberty_nptr = external local_unnamed_addr global ptr, align 8
@.str.322 = private unnamed_addr constant [35 x i8] c"attribute(target(\22%s\22)) is unknown\00", align 1
@.str.323 = private unnamed_addr constant [35 x i8] c"option(\22%s\22) was already specified\00", align 1
@.str.324 = private unnamed_addr constant [8 x i8] c"regparm\00", align 1
@profile_flag = external local_unnamed_addr global i32, align 4
@.str.325 = private unnamed_addr constant [11 x i8] c"sseregparm\00", align 1
@.str.326 = private unnamed_addr constant [63 x i8] c"Calling %qD with attribute sseregparm without SSE/SSE2 enabled\00", align 1
@.str.327 = private unnamed_addr constant [63 x i8] c"Calling %qT with attribute sseregparm without SSE/SSE2 enabled\00", align 1
@type_natural_mode.warnedavx = internal unnamed_addr global i1 false, align 1
@.str.328 = private unnamed_addr constant [56 x i8] c"AVX vector argument without AVX enabled changes the ABI\00", align 1
@mode_wider = external local_unnamed_addr constant [87 x i8], align 16
@function_arg_32.warnedsse = internal unnamed_addr global i1 false, align 1
@function_arg_32.warnedmmx = internal unnamed_addr global i1 false, align 1
@.str.329 = private unnamed_addr constant [56 x i8] c"SSE vector argument without SSE enabled changes the ABI\00", align 1
@.str.330 = private unnamed_addr constant [56 x i8] c"MMX vector argument without MMX enabled changes the ABI\00", align 1
@.str.331 = private unnamed_addr constant [40 x i8] c"0.3010299956639811952256464283594894482\00", align 1
@.str.332 = private unnamed_addr constant [40 x i8] c"0.6931471805599453094286904741849753009\00", align 1
@.str.333 = private unnamed_addr constant [40 x i8] c"1.4426950408889634073876517827983434472\00", align 1
@.str.334 = private unnamed_addr constant [40 x i8] c"3.3219280948873623478083405569094566090\00", align 1
@.str.335 = private unnamed_addr constant [40 x i8] c"3.1415926535897932385128089594061862044\00", align 1
@.str.336 = private unnamed_addr constant [23 x i8] c"__i686.get_pc_thunk.%s\00", align 1
@flag_branch_probabilities = external local_unnamed_addr global i32, align 4
@current_function_is_leaf = external local_unnamed_addr global i32, align 4
@.str.337 = private unnamed_addr constant [17 x i8] c"ms_hook_prologue\00", align 1
@.str.338 = private unnamed_addr constant [56 x i8] c"ms_hook_prologue is not compatible with nested function\00", align 1
@reg_renumber = external local_unnamed_addr global ptr, align 8
@.str.339 = private unnamed_addr constant [3 x i8] c"ax\00", align 1
@.str.340 = private unnamed_addr constant [3 x i8] c"dx\00", align 1
@.str.341 = private unnamed_addr constant [3 x i8] c"cx\00", align 1
@.str.342 = private unnamed_addr constant [3 x i8] c"bx\00", align 1
@.str.343 = private unnamed_addr constant [3 x i8] c"si\00", align 1
@.str.344 = private unnamed_addr constant [3 x i8] c"di\00", align 1
@.str.345 = private unnamed_addr constant [3 x i8] c"bp\00", align 1
@.str.346 = private unnamed_addr constant [3 x i8] c"sp\00", align 1
@.str.347 = private unnamed_addr constant [3 x i8] c"st\00", align 1
@.str.348 = private unnamed_addr constant [6 x i8] c"st(1)\00", align 1
@.str.349 = private unnamed_addr constant [6 x i8] c"st(2)\00", align 1
@.str.350 = private unnamed_addr constant [6 x i8] c"st(3)\00", align 1
@.str.351 = private unnamed_addr constant [6 x i8] c"st(4)\00", align 1
@.str.352 = private unnamed_addr constant [6 x i8] c"st(5)\00", align 1
@.str.353 = private unnamed_addr constant [6 x i8] c"st(6)\00", align 1
@.str.354 = private unnamed_addr constant [6 x i8] c"st(7)\00", align 1
@.str.355 = private unnamed_addr constant [5 x i8] c"argp\00", align 1
@.str.356 = private unnamed_addr constant [6 x i8] c"flags\00", align 1
@.str.357 = private unnamed_addr constant [5 x i8] c"fpsr\00", align 1
@.str.358 = private unnamed_addr constant [5 x i8] c"fpcr\00", align 1
@.str.359 = private unnamed_addr constant [6 x i8] c"frame\00", align 1
@.str.360 = private unnamed_addr constant [5 x i8] c"xmm0\00", align 1
@.str.361 = private unnamed_addr constant [5 x i8] c"xmm1\00", align 1
@.str.362 = private unnamed_addr constant [5 x i8] c"xmm2\00", align 1
@.str.363 = private unnamed_addr constant [5 x i8] c"xmm3\00", align 1
@.str.364 = private unnamed_addr constant [5 x i8] c"xmm4\00", align 1
@.str.365 = private unnamed_addr constant [5 x i8] c"xmm5\00", align 1
@.str.366 = private unnamed_addr constant [5 x i8] c"xmm6\00", align 1
@.str.367 = private unnamed_addr constant [5 x i8] c"xmm7\00", align 1
@.str.368 = private unnamed_addr constant [4 x i8] c"mm0\00", align 1
@.str.369 = private unnamed_addr constant [4 x i8] c"mm1\00", align 1
@.str.370 = private unnamed_addr constant [4 x i8] c"mm2\00", align 1
@.str.371 = private unnamed_addr constant [4 x i8] c"mm3\00", align 1
@.str.372 = private unnamed_addr constant [4 x i8] c"mm4\00", align 1
@.str.373 = private unnamed_addr constant [4 x i8] c"mm5\00", align 1
@.str.374 = private unnamed_addr constant [4 x i8] c"mm6\00", align 1
@.str.375 = private unnamed_addr constant [4 x i8] c"mm7\00", align 1
@.str.376 = private unnamed_addr constant [3 x i8] c"r8\00", align 1
@.str.377 = private unnamed_addr constant [3 x i8] c"r9\00", align 1
@.str.378 = private unnamed_addr constant [4 x i8] c"r10\00", align 1
@.str.379 = private unnamed_addr constant [4 x i8] c"r11\00", align 1
@.str.380 = private unnamed_addr constant [4 x i8] c"r12\00", align 1
@.str.381 = private unnamed_addr constant [4 x i8] c"r13\00", align 1
@.str.382 = private unnamed_addr constant [4 x i8] c"r14\00", align 1
@.str.383 = private unnamed_addr constant [4 x i8] c"r15\00", align 1
@.str.384 = private unnamed_addr constant [5 x i8] c"xmm8\00", align 1
@.str.385 = private unnamed_addr constant [5 x i8] c"xmm9\00", align 1
@.str.386 = private unnamed_addr constant [6 x i8] c"xmm10\00", align 1
@.str.387 = private unnamed_addr constant [6 x i8] c"xmm11\00", align 1
@.str.388 = private unnamed_addr constant [6 x i8] c"xmm12\00", align 1
@.str.389 = private unnamed_addr constant [6 x i8] c"xmm13\00", align 1
@.str.390 = private unnamed_addr constant [6 x i8] c"xmm14\00", align 1
@.str.391 = private unnamed_addr constant [6 x i8] c"xmm15\00", align 1
@.str.392 = private unnamed_addr constant [3 x i8] c"al\00", align 1
@.str.393 = private unnamed_addr constant [3 x i8] c"dl\00", align 1
@.str.394 = private unnamed_addr constant [3 x i8] c"cl\00", align 1
@.str.395 = private unnamed_addr constant [3 x i8] c"bl\00", align 1
@.str.396 = private unnamed_addr constant [4 x i8] c"sil\00", align 1
@.str.397 = private unnamed_addr constant [4 x i8] c"dil\00", align 1
@.str.398 = private unnamed_addr constant [4 x i8] c"bpl\00", align 1
@.str.399 = private unnamed_addr constant [4 x i8] c"spl\00", align 1
@.str.400 = private unnamed_addr constant [3 x i8] c"ah\00", align 1
@.str.401 = private unnamed_addr constant [3 x i8] c"dh\00", align 1
@.str.402 = private unnamed_addr constant [3 x i8] c"ch\00", align 1
@.str.403 = private unnamed_addr constant [3 x i8] c"bh\00", align 1
@.str.404 = private unnamed_addr constant [2 x i8] c"a\00", align 1
@.str.405 = private unnamed_addr constant [2 x i8] c"c\00", align 1
@.str.406 = private unnamed_addr constant [2 x i8] c"o\00", align 1
@.str.407 = private unnamed_addr constant [2 x i8] c"s\00", align 1
@.str.408 = private unnamed_addr constant [2 x i8] c"e\00", align 1
@.str.409 = private unnamed_addr constant [3 x i8] c"na\00", align 1
@.str.410 = private unnamed_addr constant [3 x i8] c"nc\00", align 1
@.str.411 = private unnamed_addr constant [3 x i8] c"no\00", align 1
@.str.412 = private unnamed_addr constant [3 x i8] c"ns\00", align 1
@.str.413 = private unnamed_addr constant [3 x i8] c"ne\00", align 1
@.str.414 = private unnamed_addr constant [2 x i8] c"g\00", align 1
@.str.415 = private unnamed_addr constant [4 x i8] c"nbe\00", align 1
@.str.416 = private unnamed_addr constant [2 x i8] c"b\00", align 1
@.str.417 = private unnamed_addr constant [2 x i8] c"l\00", align 1
@.str.418 = private unnamed_addr constant [3 x i8] c"nb\00", align 1
@.str.419 = private unnamed_addr constant [3 x i8] c"ae\00", align 1
@.str.420 = private unnamed_addr constant [3 x i8] c"be\00", align 1
@.str.421 = private unnamed_addr constant [2 x i8] c"u\00", align 1
@.str.422 = private unnamed_addr constant [2 x i8] c"p\00", align 1
@.str.423 = private unnamed_addr constant [3 x i8] c"nu\00", align 1
@.str.424 = private unnamed_addr constant [3 x i8] c"np\00", align 1
@.str.425 = private unnamed_addr constant [5 x i8] c"@PLT\00", align 1
@.str.426 = private unnamed_addr constant [11 x i8] c"0x%lx%08lx\00", align 1
@.str.427 = private unnamed_addr constant [26 x i8] c"floating constant misused\00", align 1
@.str.428 = private unnamed_addr constant [5 x i8] c"@GOT\00", align 1
@.str.429 = private unnamed_addr constant [8 x i8] c"@GOTOFF\00", align 1
@.str.430 = private unnamed_addr constant [8 x i8] c"@PLTOFF\00", align 1
@.str.431 = private unnamed_addr constant [16 x i8] c"@GOTPCREL(%rip)\00", align 1
@.str.432 = private unnamed_addr constant [15 x i8] c"@GOTPCREL[rip]\00", align 1
@.str.433 = private unnamed_addr constant [26 x i8] c"invalid UNSPEC as operand\00", align 1
@.str.434 = private unnamed_addr constant [30 x i8] c"invalid expression as operand\00", align 1
@.str.435 = private unnamed_addr constant [11 x i8] c"ffreep\09%y1\00", align 1
@.str.436 = private unnamed_addr constant [11 x i8] c"ffreep\09%y0\00", align 1
@.str.437 = private unnamed_addr constant [9 x i8] c"fstp\09%y1\00", align 1
@ix86_GOT_alias_set.set = internal unnamed_addr global i32 -1, align 4
@df = external local_unnamed_addr global ptr, align 8
@.str.438 = private unnamed_addr constant [16 x i8] c"./basic-block.h\00", align 1
@flag_unsafe_math_optimizations = external local_unnamed_addr global i32, align 4
@ix86_builtins_isa = internal unnamed_addr global [801 x %struct.builtin_isa] zeroinitializer, align 16
@ix86_builtin_func_start = internal unnamed_addr constant [237 x i16] [i16 0, i16 1, i16 2, i16 3, i16 4, i16 5, i16 7, i16 9, i16 11, i16 13, i16 15, i16 17, i16 19, i16 21, i16 23, i16 25, i16 27, i16 29, i16 31, i16 33, i16 35, i16 37, i16 39, i16 41, i16 43, i16 45, i16 47, i16 49, i16 51, i16 53, i16 55, i16 57, i16 59, i16 61, i16 63, i16 65, i16 67, i16 69, i16 71, i16 73, i16 75, i16 77, i16 79, i16 81, i16 83, i16 85, i16 87, i16 89, i16 91, i16 93, i16 95, i16 97, i16 99, i16 101, i16 103, i16 105, i16 107, i16 109, i16 111, i16 113, i16 115, i16 117, i16 119, i16 121, i16 123, i16 125, i16 127, i16 129, i16 131, i16 133, i16 135, i16 137, i16 139, i16 141, i16 144, i16 147, i16 150, i16 153, i16 156, i16 159, i16 162, i16 165, i16 168, i16 171, i16 174, i16 177, i16 180, i16 183, i16 186, i16 189, i16 192, i16 195, i16 198, i16 201, i16 204, i16 207, i16 210, i16 213, i16 216, i16 219, i16 222, i16 225, i16 228, i16 231, i16 234, i16 237, i16 240, i16 243, i16 246, i16 249, i16 252, i16 255, i16 258, i16 261, i16 264, i16 267, i16 270, i16 273, i16 276, i16 279, i16 282, i16 285, i16 288, i16 291, i16 294, i16 297, i16 300, i16 303, i16 306, i16 309, i16 312, i16 315, i16 318, i16 321, i16 324, i16 327, i16 330, i16 333, i16 336, i16 339, i16 342, i16 345, i16 348, i16 351, i16 354, i16 357, i16 360, i16 363, i16 366, i16 369, i16 372, i16 375, i16 378, i16 381, i16 384, i16 387, i16 390, i16 393, i16 396, i16 399, i16 402, i16 405, i16 408, i16 411, i16 414, i16 417, i16 420, i16 423, i16 426, i16 429, i16 432, i16 435, i16 438, i16 441, i16 445, i16 449, i16 453, i16 457, i16 461, i16 465, i16 469, i16 473, i16 477, i16 481, i16 486, i16 490, i16 494, i16 498, i16 502, i16 506, i16 510, i16 514, i16 518, i16 523, i16 527, i16 531, i16 535, i16 539, i16 543, i16 548, i16 552, i16 556, i16 560, i16 564, i16 568, i16 572, i16 576, i16 580, i16 584, i16 588, i16 592, i16 597, i16 601, i16 605, i16 609, i16 613, i16 617, i16 621, i16 625, i16 629, i16 633, i16 637, i16 641, i16 645, i16 649, i16 653, i16 657, i16 661, i16 665, i16 669, i16 673, i16 677, i16 682, i16 687, i16 693, i16 699, i16 708], align 16
@ix86_builtin_func_args = internal unnamed_addr constant [708 x i32] [i32 24, i32 20, i32 14, i32 0, i32 47, i32 21, i32 21, i32 24, i32 24, i32 12, i32 12, i32 12, i32 35, i32 12, i32 30, i32 12, i32 40, i32 12, i32 31, i32 12, i32 29, i32 12, i32 41, i32 19, i32 19, i32 19, i32 30, i32 19, i32 31, i32 20, i32 12, i32 18, i32 18, i32 20, i32 52, i32 35, i32 60, i32 35, i32 35, i32 30, i32 61, i32 30, i32 30, i32 30, i32 27, i32 30, i32 40, i32 30, i32 31, i32 30, i32 33, i32 32, i32 54, i32 32, i32 35, i32 32, i32 32, i32 32, i32 33, i32 32, i32 34, i32 25, i32 25, i32 25, i32 27, i32 27, i32 30, i32 27, i32 25, i32 27, i32 27, i32 27, i32 31, i32 45, i32 60, i32 40, i32 61, i32 40, i32 64, i32 40, i32 30, i32 40, i32 40, i32 40, i32 31, i32 40, i32 33, i32 28, i32 28, i32 31, i32 62, i32 31, i32 30, i32 31, i32 40, i32 31, i32 31, i32 31, i32 33, i32 31, i32 41, i32 33, i32 35, i32 33, i32 30, i32 33, i32 40, i32 33, i32 31, i32 33, i32 33, i32 33, i32 34, i32 33, i32 43, i32 34, i32 35, i32 34, i32 34, i32 29, i32 29, i32 41, i32 62, i32 41, i32 67, i32 41, i32 31, i32 41, i32 41, i32 41, i32 43, i32 43, i32 33, i32 43, i32 41, i32 0, i32 63, i32 0, i32 47, i32 0, i32 14, i32 6, i32 32, i32 12, i32 22, i32 30, i32 12, i32 21, i32 31, i32 12, i32 24, i32 24, i32 24, i32 4, i32 28, i32 12, i32 4, i32 34, i32 12, i32 12, i32 30, i32 30, i32 12, i32 32, i32 32, i32 12, i32 40, i32 40, i32 12, i32 42, i32 42, i32 12, i32 31, i32 31, i32 12, i32 41, i32 41, i32 3, i32 35, i32 12, i32 3, i32 29, i32 12, i32 5, i32 27, i32 12, i32 5, i32 33, i32 12, i32 13, i32 13, i32 2, i32 13, i32 13, i32 13, i32 13, i32 13, i32 11, i32 18, i32 18, i32 12, i32 20, i32 20, i32 20, i32 17, i32 17, i32 12, i32 35, i32 35, i32 5, i32 35, i32 35, i32 35, i32 35, i32 34, i32 34, i32 26, i32 26, i32 5, i32 26, i32 26, i32 26, i32 26, i32 27, i32 27, i32 26, i32 29, i32 29, i32 30, i32 64, i32 30, i32 30, i32 30, i32 6, i32 30, i32 30, i32 12, i32 30, i32 30, i32 61, i32 30, i32 30, i32 5, i32 30, i32 30, i32 30, i32 30, i32 30, i32 32, i32 30, i32 30, i32 31, i32 30, i32 40, i32 12, i32 32, i32 35, i32 35, i32 32, i32 30, i32 30, i32 32, i32 32, i32 12, i32 32, i32 32, i32 5, i32 32, i32 32, i32 35, i32 32, i32 32, i32 32, i32 32, i32 33, i32 33, i32 25, i32 25, i32 25, i32 27, i32 12, i32 12, i32 27, i32 25, i32 25, i32 27, i32 27, i32 5, i32 27, i32 27, i32 27, i32 27, i32 28, i32 28, i32 40, i32 66, i32 40, i32 40, i32 40, i32 12, i32 40, i32 40, i32 40, i32 40, i32 40, i32 42, i32 28, i32 27, i32 27, i32 28, i32 28, i32 12, i32 28, i32 28, i32 5, i32 28, i32 28, i32 28, i32 28, i32 29, i32 29, i32 31, i32 67, i32 31, i32 31, i32 31, i32 6, i32 31, i32 31, i32 12, i32 31, i32 31, i32 65, i32 31, i32 31, i32 5, i32 31, i32 31, i32 30, i32 31, i32 31, i32 27, i32 31, i32 31, i32 31, i32 31, i32 31, i32 33, i32 31, i32 41, i32 12, i32 33, i32 30, i32 30, i32 33, i32 31, i32 31, i32 33, i32 33, i32 12, i32 33, i32 33, i32 5, i32 33, i32 33, i32 33, i32 33, i32 34, i32 34, i32 33, i32 43, i32 12, i32 34, i32 35, i32 35, i32 34, i32 33, i32 33, i32 34, i32 34, i32 12, i32 34, i32 34, i32 5, i32 34, i32 34, i32 34, i32 29, i32 28, i32 28, i32 29, i32 29, i32 29, i32 41, i32 68, i32 41, i32 41, i32 41, i32 12, i32 41, i32 41, i32 41, i32 41, i32 41, i32 43, i32 0, i32 46, i32 35, i32 0, i32 46, i32 45, i32 0, i32 48, i32 30, i32 0, i32 48, i32 40, i32 0, i32 49, i32 31, i32 0, i32 49, i32 41, i32 0, i32 50, i32 12, i32 0, i32 51, i32 16, i32 0, i32 54, i32 32, i32 0, i32 55, i32 31, i32 0, i32 57, i32 42, i32 0, i32 14, i32 14, i32 12, i32 35, i32 35, i32 12, i32 2, i32 13, i32 13, i32 13, i32 2, i32 20, i32 13, i32 13, i32 44, i32 44, i32 44, i32 44, i32 35, i32 35, i32 3, i32 12, i32 35, i32 35, i32 35, i32 12, i32 35, i32 35, i32 35, i32 35, i32 26, i32 26, i32 26, i32 12, i32 30, i32 30, i32 30, i32 12, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 32, i32 12, i32 32, i32 32, i32 6, i32 12, i32 32, i32 32, i32 13, i32 13, i32 32, i32 32, i32 32, i32 12, i32 32, i32 32, i32 32, i32 32, i32 45, i32 45, i32 45, i32 45, i32 40, i32 40, i32 30, i32 12, i32 40, i32 40, i32 40, i32 12, i32 40, i32 40, i32 40, i32 40, i32 40, i32 40, i32 40, i32 42, i32 12, i32 42, i32 42, i32 42, i32 42, i32 28, i32 28, i32 4, i32 12, i32 31, i32 31, i32 21, i32 12, i32 31, i32 31, i32 31, i32 12, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 33, i32 12, i32 33, i32 33, i32 5, i32 12, i32 33, i32 33, i32 33, i32 12, i32 33, i32 33, i32 33, i32 32, i32 33, i32 33, i32 33, i32 33, i32 34, i32 34, i32 4, i32 12, i32 34, i32 34, i32 34, i32 12, i32 34, i32 34, i32 34, i32 33, i32 34, i32 34, i32 34, i32 34, i32 41, i32 41, i32 31, i32 12, i32 41, i32 41, i32 41, i32 12, i32 41, i32 41, i32 41, i32 41, i32 41, i32 41, i32 41, i32 43, i32 12, i32 43, i32 43, i32 33, i32 12, i32 43, i32 43, i32 43, i32 12, i32 43, i32 43, i32 43, i32 43, i32 0, i32 63, i32 14, i32 14, i32 0, i32 53, i32 30, i32 30, i32 0, i32 56, i32 40, i32 40, i32 0, i32 58, i32 31, i32 31, i32 0, i32 59, i32 41, i32 41, i32 0, i32 13, i32 13, i32 13, i32 0, i32 20, i32 13, i32 13, i32 0, i32 35, i32 35, i32 46, i32 0, i32 29, i32 29, i32 46, i32 30, i32 30, i32 30, i32 32, i32 31, i32 31, i32 31, i32 33, i32 36, i32 36, i32 36, i32 36, i32 37, i32 37, i32 37, i32 37, i32 38, i32 38, i32 38, i32 38, i32 39, i32 39, i32 39, i32 39, i32 40, i32 40, i32 40, i32 42, i32 41, i32 41, i32 41, i32 43, i32 32, i32 32, i32 32, i32 13, i32 13, i32 28, i32 4, i32 4, i32 4, i32 4, i32 12, i32 35, i32 12, i32 35, i32 12, i32 12, i32 35, i32 35, i32 12, i32 35, i32 12, i32 12, i32 29, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3], align 16
@ix86_builtin_func_alias_base = internal unnamed_addr constant [35 x i32] [i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 23, i32 50, i32 98, i32 114, i32 121, i32 130, i32 146, i32 153, i32 99, i32 116, i32 122, i32 131, i32 147, i32 154, i32 107, i32 140, i32 113, i32 186, i32 180, i32 96, i32 116, i32 147, i32 154, i32 96, i32 107, i32 116, i32 140, i32 147, i32 154], align 16
@ix86_builtin_type_vect_base = internal unnamed_addr constant [21 x i32] [i32 21, i32 6, i32 5, i32 4, i32 3, i32 22, i32 21, i32 6, i32 5, i32 4, i32 3, i32 10, i32 9, i32 8, i32 7, i32 22, i32 21, i32 6, i32 5, i32 4, i32 3], align 16
@ix86_builtin_type_vect_mode = internal unnamed_addr constant [21 x i32] [i32 78, i32 62, i32 61, i32 60, i32 59, i32 80, i32 79, i32 66, i32 65, i32 64, i32 63, i32 66, i32 65, i32 64, i32 63, i32 82, i32 81, i32 71, i32 70, i32 69, i32 68], align 16
@ix86_builtin_type_ptr_base = internal unnamed_addr constant [23 x i32] [i32 1, i32 0, i32 22, i32 21, i32 12, i32 16, i32 14, i32 30, i32 32, i32 25, i32 40, i32 42, i32 31, i32 41, i32 1, i32 22, i32 21, i32 0, i32 30, i32 25, i32 40, i32 31, i32 41], align 16
@implicit_built_in_decls = external local_unnamed_addr global [721 x ptr], align 16
@.str.441 = private unnamed_addr constant [7 x i8] c"vmls%s\00", align 1
@.str.442 = private unnamed_addr constant [8 x i8] c"vmld%s2\00", align 1
@word_mode = external local_unnamed_addr global i32, align 4
@expand_vec_perm_even_odd_1.perm1 = internal constant [8 x i8] c"\00\02\01\03\05\06\05\07", align 1
@.str.443 = private unnamed_addr constant [23 x i8] c"mov%z1\09{%0, %1|%1, %0}\00", align 1
@.str.444 = private unnamed_addr constant [23 x i8] c"sub{l}\09{%0, %1|%1, %0}\00", align 1
@.str.445 = private unnamed_addr constant [23 x i8] c"add{l}\09{%0, %1|%1, %0}\00", align 1
@.str.446 = private unnamed_addr constant [23 x i8] c"add%z1\09{%0, %1|%1, %0}\00", align 1
@.str.447 = private unnamed_addr constant [8 x i8] c"jmp\09%P0\00", align 1
@.str.448 = private unnamed_addr constant [39 x i8] c"mov{l}\09{%0@GOT(%1), %1|%1, %0@GOT[%1]}\00", align 1
@.str.449 = private unnamed_addr constant [10 x i8] c"jmp\09{*}%1\00", align 1
@.str.450 = private unnamed_addr constant [25 x i8] c"\09.intel_syntax noprefix\0A\00", align 1
@.str.451 = private unnamed_addr constant [10 x i8] c"\09.hidden\09\00", align 1
@.str.452 = private unnamed_addr constant [9 x i8] c"function\00", align 1
@first_function_block_is_cold = external local_unnamed_addr global i8, align 1
@.str.453 = private unnamed_addr constant [23 x i8] c"mov%z0\09{%1, %0|%0, %1}\00", align 1
@.str.454 = private unnamed_addr constant [4 x i8] c"ret\00", align 1
@.str.455 = private unnamed_addr constant [4 x i8] c", 0\00", align 1
@ix86_force_align_arg_pointer_string = internal constant [24 x i8] c"force_align_arg_pointer\00", align 16
@.str.456 = private unnamed_addr constant [10 x i8] c"ms_struct\00", align 1
@.str.457 = private unnamed_addr constant [11 x i8] c"gcc_struct\00", align 1
@.str.458 = private unnamed_addr constant [7 x i8] c"ms_abi\00", align 1
@.str.459 = private unnamed_addr constant [9 x i8] c"sysv_abi\00", align 1
@.str.460 = private unnamed_addr constant [40 x i8] c"%qE attribute only applies to functions\00", align 1
@.str.461 = private unnamed_addr constant [51 x i8] c"fastcall and regparm attributes are not compatible\00", align 1
@.str.462 = private unnamed_addr constant [52 x i8] c"%qE attribute requires an integer constant argument\00", align 1
@.str.463 = private unnamed_addr constant [41 x i8] c"argument to %qE attribute larger than %d\00", align 1
@.str.464 = private unnamed_addr constant [49 x i8] c"fastcall and cdecl attributes are not compatible\00", align 1
@.str.465 = private unnamed_addr constant [51 x i8] c"fastcall and stdcall attributes are not compatible\00", align 1
@.str.466 = private unnamed_addr constant [48 x i8] c"stdcall and cdecl attributes are not compatible\00", align 1
@.str.467 = private unnamed_addr constant [51 x i8] c"stdcall and fastcall attributes are not compatible\00", align 1
@.str.468 = private unnamed_addr constant [22 x i8] c"%qE attribute ignored\00", align 1
@.str.469 = private unnamed_addr constant [35 x i8] c"%qE incompatible attribute ignored\00", align 1
@.str.470 = private unnamed_addr constant [40 x i8] c"%qE attribute only available for 64-bit\00", align 1
@.str.471 = private unnamed_addr constant [63 x i8] c"ms_hook_prologue attribute needs assembler swap suffix support\00", align 1
@.str.472 = private unnamed_addr constant [15 x i8] c"__builtin_infq\00", align 1
@.str.473 = private unnamed_addr constant [20 x i8] c"__builtin_huge_valq\00", align 1
@.str.474 = private unnamed_addr constant [16 x i8] c"__builtin_fabsq\00", align 1
@.str.475 = private unnamed_addr constant [10 x i8] c"__fabstf2\00", align 1
@.str.476 = private unnamed_addr constant [20 x i8] c"__builtin_copysignq\00", align 1
@.str.477 = private unnamed_addr constant [14 x i8] c"__copysigntf3\00", align 1
@lang_hooks = external local_unnamed_addr global %struct.lang_hooks, align 8
@.str.478 = private unnamed_addr constant [10 x i8] c"__float80\00", align 1
@.str.479 = private unnamed_addr constant [11 x i8] c"__float128\00", align 1
@integer_types = external local_unnamed_addr global [11 x ptr], align 16
@bdesc_special_args = internal unnamed_addr constant [59 x %struct.builtin_description] [%struct.builtin_description { i32 -5, i32 2490, ptr @.str.512, i32 342, i32 0, i32 1 }, %struct.builtin_description { i32 -5, i32 2491, ptr @.str.513, i32 343, i32 0, i32 19 }, %struct.builtin_description { i32 2048, i32 2582, ptr @.str.514, i32 150, i32 0, i32 3 }, %struct.builtin_description { i32 1, i32 2583, ptr @.str.515, i32 154, i32 0, i32 3 }, %struct.builtin_description { i32 65536, i32 859, ptr @.str.516, i32 56, i32 0, i32 165 }, %struct.builtin_description { i32 65536, i32 868, ptr @.str.517, i32 67, i32 0, i32 165 }, %struct.builtin_description { i32 65536, i32 859, ptr @.str.518, i32 55, i32 0, i32 47 }, %struct.builtin_description { i32 65536, i32 2705, ptr @.str.519, i32 60, i32 0, i32 136 }, %struct.builtin_description { i32 65536, i32 2706, ptr @.str.520, i32 61, i32 0, i32 136 }, %struct.builtin_description { i32 65536, i32 1187, ptr @.str.521, i32 62, i32 0, i32 170 }, %struct.builtin_description { i32 65536, i32 1191, ptr @.str.522, i32 63, i32 0, i32 170 }, %struct.builtin_description { i32 65538, i32 2886, ptr @.str.523, i32 153, i32 0, i32 3 }, %struct.builtin_description { i32 65538, i32 728, ptr @.str.524, i32 68, i32 0, i32 168 }, %struct.builtin_description { i32 131072, i32 2888, ptr @.str.525, i32 338, i32 0, i32 3 }, %struct.builtin_description { i32 131072, i32 2887, ptr null, i32 337, i32 0, i32 3 }, %struct.builtin_description { i32 131072, i32 860, ptr @.str.526, i32 234, i32 0, i32 163 }, %struct.builtin_description { i32 131072, i32 863, ptr @.str.527, i32 70, i32 0, i32 161 }, %struct.builtin_description { i32 131072, i32 869, ptr @.str.528, i32 258, i32 0, i32 163 }, %struct.builtin_description { i32 131072, i32 872, ptr @.str.529, i32 259, i32 0, i32 169 }, %struct.builtin_description { i32 131072, i32 873, ptr @.str.530, i32 257, i32 0, i32 167 }, %struct.builtin_description { i32 131072, i32 860, ptr @.str.531, i32 233, i32 0, i32 22 }, %struct.builtin_description { i32 131072, i32 863, ptr @.str.532, i32 69, i32 0, i32 20 }, %struct.builtin_description { i32 131072, i32 2761, ptr @.str.533, i32 236, i32 0, i32 105 }, %struct.builtin_description { i32 131072, i32 2763, ptr @.str.534, i32 237, i32 0, i32 105 }, %struct.builtin_description { i32 262144, i32 876, ptr @.str.535, i32 356, i32 0, i32 20 }, %struct.builtin_description { i32 524288, i32 1584, ptr @.str.536, i32 406, i32 0, i32 28 }, %struct.builtin_description { i32 2097152, i32 1561, ptr @.str.537, i32 391, i32 0, i32 163 }, %struct.builtin_description { i32 2097152, i32 1560, ptr @.str.538, i32 392, i32 0, i32 165 }, %struct.builtin_description { i32 32, i32 2924, ptr @.str.539, i32 534, i32 0, i32 3 }, %struct.builtin_description { i32 32, i32 2925, ptr @.str.540, i32 535, i32 0, i32 3 }, %struct.builtin_description { i32 32, i32 2707, ptr @.str.541, i32 551, i32 0, i32 47 }, %struct.builtin_description { i32 32, i32 1748, ptr @.str.542, i32 552, i32 0, i32 40 }, %struct.builtin_description { i32 32, i32 1746, ptr @.str.543, i32 553, i32 0, i32 63 }, %struct.builtin_description { i32 32, i32 1754, ptr @.str.544, i32 554, i32 0, i32 41 }, %struct.builtin_description { i32 32, i32 1753, ptr @.str.545, i32 555, i32 0, i32 64 }, %struct.builtin_description { i32 32, i32 857, ptr @.str.546, i32 559, i32 0, i32 40 }, %struct.builtin_description { i32 32, i32 856, ptr @.str.547, i32 560, i32 0, i32 63 }, %struct.builtin_description { i32 32, i32 857, ptr @.str.548, i32 561, i32 0, i32 164 }, %struct.builtin_description { i32 32, i32 856, ptr @.str.549, i32 562, i32 0, i32 166 }, %struct.builtin_description { i32 32, i32 861, ptr @.str.550, i32 567, i32 0, i32 39 }, %struct.builtin_description { i32 32, i32 861, ptr @.str.551, i32 568, i32 0, i32 162 }, %struct.builtin_description { i32 32, i32 874, ptr @.str.552, i32 563, i32 0, i32 39 }, %struct.builtin_description { i32 32, i32 870, ptr @.str.553, i32 564, i32 0, i32 171 }, %struct.builtin_description { i32 32, i32 867, ptr @.str.554, i32 565, i32 0, i32 164 }, %struct.builtin_description { i32 32, i32 866, ptr @.str.555, i32 566, i32 0, i32 166 }, %struct.builtin_description { i32 32, i32 1785, ptr @.str.556, i32 569, i32 0, i32 102 }, %struct.builtin_description { i32 32, i32 1784, ptr @.str.557, i32 570, i32 0, i32 133 }, %struct.builtin_description { i32 32, i32 1787, ptr @.str.558, i32 573, i32 0, i32 124 }, %struct.builtin_description { i32 32, i32 1786, ptr @.str.559, i32 574, i32 0, i32 157 }, %struct.builtin_description { i32 32, i32 1789, ptr @.str.560, i32 571, i32 0, i32 215 }, %struct.builtin_description { i32 32, i32 1788, ptr @.str.561, i32 572, i32 0, i32 217 }, %struct.builtin_description { i32 32, i32 1791, ptr @.str.562, i32 575, i32 0, i32 216 }, %struct.builtin_description { i32 32, i32 1790, ptr @.str.563, i32 576, i32 0, i32 218 }, %struct.builtin_description { i32 1024, i32 2492, ptr @.str.564, i32 794, i32 0, i32 71 }, %struct.builtin_description { i32 1024, i32 2493, ptr @.str.565, i32 795, i32 0, i32 4 }, %struct.builtin_description { i32 1024, i32 2494, ptr @.str.566, i32 796, i32 0, i32 219 }, %struct.builtin_description { i32 1024, i32 2956, ptr @.str.567, i32 797, i32 0, i32 220 }, %struct.builtin_description { i32 1024, i32 2495, ptr @.str.568, i32 798, i32 0, i32 174 }, %struct.builtin_description { i32 1024, i32 2956, ptr @.str.569, i32 799, i32 0, i32 175 }], align 16
@bdesc_args = internal constant [513 x %struct.builtin_description] [%struct.builtin_description { i32 -5, i32 505, ptr @.str.570, i32 339, i32 0, i32 7 }, %struct.builtin_description { i32 4, i32 2956, ptr @.str.571, i32 340, i32 0, i32 14 }, %struct.builtin_description { i32 -5, i32 2489, ptr @.str.572, i32 341, i32 0, i32 17 }, %struct.builtin_description { i32 -5, i32 2172, ptr @.str.573, i32 344, i32 0, i32 94 }, %struct.builtin_description { i32 -5, i32 2170, ptr @.str.574, i32 345, i32 0, i32 92 }, %struct.builtin_description { i32 -5, i32 2178, ptr @.str.575, i32 346, i32 0, i32 94 }, %struct.builtin_description { i32 -5, i32 2176, ptr @.str.576, i32 347, i32 0, i32 92 }, %struct.builtin_description { i32 2048, i32 2528, ptr @.str.577, i32 74, i32 0, i32 156 }, %struct.builtin_description { i32 2048, i32 2530, ptr @.str.578, i32 75, i32 0, i32 131 }, %struct.builtin_description { i32 2048, i32 2532, ptr @.str.579, i32 76, i32 0, i32 122 }, %struct.builtin_description { i32 2048, i32 2529, ptr @.str.580, i32 82, i32 0, i32 156 }, %struct.builtin_description { i32 2048, i32 2531, ptr @.str.581, i32 83, i32 0, i32 131 }, %struct.builtin_description { i32 2048, i32 2533, ptr @.str.582, i32 84, i32 0, i32 122 }, %struct.builtin_description { i32 2048, i32 2536, ptr @.str.583, i32 78, i32 0, i32 156 }, %struct.builtin_description { i32 2048, i32 2540, ptr @.str.584, i32 79, i32 0, i32 131 }, %struct.builtin_description { i32 2048, i32 2538, ptr @.str.585, i32 86, i32 0, i32 156 }, %struct.builtin_description { i32 2048, i32 2542, ptr @.str.586, i32 87, i32 0, i32 131 }, %struct.builtin_description { i32 2048, i32 2537, ptr @.str.587, i32 80, i32 0, i32 156 }, %struct.builtin_description { i32 2048, i32 2541, ptr @.str.588, i32 81, i32 0, i32 131 }, %struct.builtin_description { i32 2048, i32 2539, ptr @.str.589, i32 88, i32 0, i32 156 }, %struct.builtin_description { i32 2048, i32 2543, ptr @.str.590, i32 89, i32 0, i32 131 }, %struct.builtin_description { i32 2048, i32 2544, ptr @.str.591, i32 109, i32 0, i32 131 }, %struct.builtin_description { i32 2048, i32 2545, ptr @.str.592, i32 108, i32 0, i32 131 }, %struct.builtin_description { i32 2048, i32 2563, ptr @.str.593, i32 90, i32 0, i32 122 }, %struct.builtin_description { i32 2048, i32 798, ptr @.str.594, i32 91, i32 0, i32 122 }, %struct.builtin_description { i32 2048, i32 2564, ptr @.str.595, i32 92, i32 0, i32 122 }, %struct.builtin_description { i32 2048, i32 2565, ptr @.str.596, i32 93, i32 0, i32 122 }, %struct.builtin_description { i32 2048, i32 2554, ptr @.str.597, i32 96, i32 0, i32 156 }, %struct.builtin_description { i32 2048, i32 2555, ptr @.str.598, i32 97, i32 0, i32 131 }, %struct.builtin_description { i32 2048, i32 2556, ptr @.str.599, i32 98, i32 0, i32 122 }, %struct.builtin_description { i32 2048, i32 793, ptr @.str.600, i32 99, i32 0, i32 156 }, %struct.builtin_description { i32 2048, i32 794, ptr @.str.601, i32 100, i32 0, i32 131 }, %struct.builtin_description { i32 2048, i32 795, ptr @.str.602, i32 101, i32 0, i32 122 }, %struct.builtin_description { i32 2048, i32 811, ptr @.str.603, i32 128, i32 0, i32 156 }, %struct.builtin_description { i32 2048, i32 813, ptr @.str.604, i32 129, i32 0, i32 131 }, %struct.builtin_description { i32 2048, i32 815, ptr @.str.605, i32 130, i32 0, i32 122 }, %struct.builtin_description { i32 2048, i32 812, ptr @.str.606, i32 131, i32 0, i32 156 }, %struct.builtin_description { i32 2048, i32 814, ptr @.str.607, i32 132, i32 0, i32 131 }, %struct.builtin_description { i32 2048, i32 816, ptr @.str.608, i32 133, i32 0, i32 122 }, %struct.builtin_description { i32 2048, i32 808, ptr @.str.609, i32 71, i32 0, i32 155 }, %struct.builtin_description { i32 2048, i32 809, ptr @.str.610, i32 72, i32 0, i32 128 }, %struct.builtin_description { i32 2048, i32 810, ptr @.str.611, i32 73, i32 0, i32 155 }, %struct.builtin_description { i32 2048, i32 2547, ptr @.str.612, i32 102, i32 0, i32 123 }, %struct.builtin_description { i32 2048, i32 787, ptr @.str.613, i32 120, i32 0, i32 247 }, %struct.builtin_description { i32 2048, i32 788, ptr @.str.614, i32 121, i32 0, i32 246 }, %struct.builtin_description { i32 2048, i32 789, ptr @.str.615, i32 122, i32 0, i32 244 }, %struct.builtin_description { i32 2048, i32 787, ptr @.str.616, i32 112, i32 0, i32 253 }, %struct.builtin_description { i32 2048, i32 788, ptr @.str.617, i32 113, i32 0, i32 252 }, %struct.builtin_description { i32 2048, i32 789, ptr @.str.618, i32 114, i32 0, i32 250 }, %struct.builtin_description { i32 2048, i32 784, ptr @.str.619, i32 125, i32 0, i32 247 }, %struct.builtin_description { i32 2048, i32 785, ptr @.str.620, i32 126, i32 0, i32 246 }, %struct.builtin_description { i32 2048, i32 786, ptr @.str.621, i32 127, i32 0, i32 244 }, %struct.builtin_description { i32 2048, i32 784, ptr @.str.622, i32 117, i32 0, i32 253 }, %struct.builtin_description { i32 2048, i32 785, ptr @.str.623, i32 118, i32 0, i32 252 }, %struct.builtin_description { i32 2048, i32 786, ptr @.str.624, i32 119, i32 0, i32 250 }, %struct.builtin_description { i32 2048, i32 782, ptr @.str.625, i32 123, i32 0, i32 247 }, %struct.builtin_description { i32 2048, i32 783, ptr @.str.626, i32 124, i32 0, i32 246 }, %struct.builtin_description { i32 2048, i32 782, ptr @.str.627, i32 115, i32 0, i32 253 }, %struct.builtin_description { i32 2048, i32 783, ptr @.str.628, i32 116, i32 0, i32 252 }, %struct.builtin_description { i32 1, i32 747, ptr @.str.629, i32 156, i32 0, i32 36 }, %struct.builtin_description { i32 1, i32 750, ptr @.str.630, i32 172, i32 0, i32 34 }, %struct.builtin_description { i32 1, i32 736, ptr @.str.631, i32 165, i32 0, i32 33 }, %struct.builtin_description { i32 1, i32 739, ptr @.str.632, i32 169, i32 0, i32 33 }, %struct.builtin_description { i32 1, i32 2579, ptr @.str.633, i32 155, i32 0, i32 156 }, %struct.builtin_description { i32 1, i32 741, ptr @.str.634, i32 157, i32 0, i32 118 }, %struct.builtin_description { i32 1, i32 2516, ptr @.str.635, i32 158, i32 0, i32 118 }, %struct.builtin_description { i32 1, i32 2522, ptr @.str.636, i32 159, i32 0, i32 120 }, %struct.builtin_description { i32 1, i32 746, ptr @.str.637, i32 160, i32 0, i32 120 }, %struct.builtin_description { i32 1, i32 745, ptr @.str.638, i32 161, i32 0, i32 120 }, %struct.builtin_description { i32 1, i32 2520, ptr @.str.639, i32 162, i32 0, i32 118 }, %struct.builtin_description { i32 1, i32 2521, ptr @.str.640, i32 163, i32 0, i32 118 }, %struct.builtin_description { i32 1, i32 2519, ptr @.str.641, i32 164, i32 0, i32 118 }, %struct.builtin_description { i32 1, i32 737, ptr @.str.642, i32 166, i32 0, i32 118 }, %struct.builtin_description { i32 1, i32 738, ptr @.str.643, i32 167, i32 0, i32 118 }, %struct.builtin_description { i32 1, i32 740, ptr @.str.644, i32 168, i32 0, i32 118 }, %struct.builtin_description { i32 1, i32 2517, ptr @.str.645, i32 170, i32 0, i32 118 }, %struct.builtin_description { i32 1, i32 2518, ptr @.str.646, i32 171, i32 0, i32 118 }, %struct.builtin_description { i32 1, i32 2548, ptr @.str.647, i32 173, i32 0, i32 131 }, %struct.builtin_description { i32 2, i32 748, ptr @.str.648, i32 174, i32 0, i32 36 }, %struct.builtin_description { i32 2, i32 749, ptr @.str.649, i32 177, i32 0, i32 34 }, %struct.builtin_description { i32 2, i32 820, ptr @.str.650, i32 178, i32 0, i32 37 }, %struct.builtin_description { i32 2, i32 751, ptr @.str.651, i32 179, i32 0, i32 33 }, %struct.builtin_description { i32 2, i32 742, ptr @.str.652, i32 175, i32 0, i32 118 }, %struct.builtin_description { i32 2, i32 743, ptr @.str.653, i32 176, i32 0, i32 118 }, %struct.builtin_description { i32 65536, i32 1501, ptr @.str.654, i32 65, i32 0, i32 11 }, %struct.builtin_description { i32 65536, i32 924, ptr @.str.655, i32 141, i32 0, i32 50 }, %struct.builtin_description { i32 65536, i32 2653, ptr @.str.656, i32 142, i32 0, i32 50 }, %struct.builtin_description { i32 65536, i32 932, ptr @.str.657, i32 137, i32 0, i32 50 }, %struct.builtin_description { i32 65536, i32 2655, ptr @.str.658, i32 138, i32 0, i32 50 }, %struct.builtin_description { i32 65536, i32 920, ptr @.str.659, i32 135, i32 0, i32 50 }, %struct.builtin_description { i32 65536, i32 1130, ptr @.str.660, i32 43, i32 0, i32 38 }, %struct.builtin_description { i32 65536, i32 1134, ptr @.str.661, i32 46, i32 0, i32 11 }, %struct.builtin_description { i32 65540, i32 2956, ptr @.str.662, i32 47, i32 0, i32 16 }, %struct.builtin_description { i32 65536, i32 1131, ptr @.str.663, i32 48, i32 0, i32 38 }, %struct.builtin_description { i32 65536, i32 1136, ptr @.str.664, i32 49, i32 0, i32 11 }, %struct.builtin_description { i32 65540, i32 2956, ptr @.str.665, i32 50, i32 0, i32 16 }, %struct.builtin_description { i32 65536, i32 2704, ptr @.str.666, i32 134, i32 0, i32 196 }, %struct.builtin_description { i32 65536, i32 2640, ptr @.str.667, i32 0, i32 0, i32 140 }, %struct.builtin_description { i32 65536, i32 2641, ptr @.str.668, i32 6, i32 0, i32 140 }, %struct.builtin_description { i32 65536, i32 2646, ptr @.str.669, i32 4, i32 0, i32 140 }, %struct.builtin_description { i32 65536, i32 913, ptr @.str.670, i32 2, i32 0, i32 140 }, %struct.builtin_description { i32 65536, i32 893, ptr @.str.671, i32 1, i32 0, i32 140 }, %struct.builtin_description { i32 65536, i32 894, ptr @.str.672, i32 7, i32 0, i32 140 }, %struct.builtin_description { i32 65536, i32 905, ptr @.str.673, i32 5, i32 0, i32 140 }, %struct.builtin_description { i32 65536, i32 917, ptr @.str.674, i32 3, i32 0, i32 140 }, %struct.builtin_description { i32 65536, i32 1009, ptr @.str.675, i32 8, i32 81, i32 140 }, %struct.builtin_description { i32 65536, i32 1009, ptr @.str.676, i32 9, i32 85, i32 140 }, %struct.builtin_description { i32 65536, i32 1009, ptr @.str.677, i32 10, i32 84, i32 140 }, %struct.builtin_description { i32 65536, i32 1009, ptr @.str.678, i32 11, i32 85, i32 257 }, %struct.builtin_description { i32 65536, i32 1009, ptr @.str.679, i32 12, i32 84, i32 257 }, %struct.builtin_description { i32 65536, i32 1009, ptr @.str.680, i32 19, i32 90, i32 140 }, %struct.builtin_description { i32 65536, i32 1009, ptr @.str.681, i32 13, i32 80, i32 140 }, %struct.builtin_description { i32 65536, i32 1009, ptr @.str.682, i32 14, i32 93, i32 140 }, %struct.builtin_description { i32 65536, i32 1009, ptr @.str.683, i32 15, i32 94, i32 140 }, %struct.builtin_description { i32 65536, i32 1009, ptr @.str.684, i32 16, i32 93, i32 257 }, %struct.builtin_description { i32 65536, i32 1009, ptr @.str.685, i32 17, i32 94, i32 257 }, %struct.builtin_description { i32 65536, i32 1009, ptr @.str.686, i32 18, i32 91, i32 140 }, %struct.builtin_description { i32 65536, i32 1011, ptr @.str.687, i32 20, i32 81, i32 140 }, %struct.builtin_description { i32 65536, i32 1011, ptr @.str.688, i32 21, i32 85, i32 140 }, %struct.builtin_description { i32 65536, i32 1011, ptr @.str.689, i32 22, i32 84, i32 140 }, %struct.builtin_description { i32 65536, i32 1011, ptr @.str.690, i32 29, i32 90, i32 140 }, %struct.builtin_description { i32 65536, i32 1011, ptr @.str.691, i32 23, i32 80, i32 140 }, %struct.builtin_description { i32 65536, i32 1011, ptr @.str.692, i32 24, i32 93, i32 140 }, %struct.builtin_description { i32 65536, i32 1011, ptr @.str.693, i32 25, i32 94, i32 140 }, %struct.builtin_description { i32 65536, i32 1011, ptr @.str.694, i32 26, i32 93, i32 257 }, %struct.builtin_description { i32 65536, i32 1011, ptr @.str.695, i32 27, i32 94, i32 257 }, %struct.builtin_description { i32 65536, i32 1011, ptr @.str.696, i32 28, i32 91, i32 140 }, %struct.builtin_description { i32 65536, i32 2661, ptr @.str.697, i32 53, i32 0, i32 140 }, %struct.builtin_description { i32 65536, i32 2660, ptr @.str.698, i32 51, i32 0, i32 140 }, %struct.builtin_description { i32 65536, i32 964, ptr @.str.699, i32 54, i32 0, i32 140 }, %struct.builtin_description { i32 65536, i32 963, ptr @.str.700, i32 52, i32 0, i32 140 }, %struct.builtin_description { i32 65536, i32 2676, ptr @.str.701, i32 146, i32 0, i32 140 }, %struct.builtin_description { i32 65536, i32 1021, ptr @.str.702, i32 147, i32 0, i32 140 }, %struct.builtin_description { i32 65536, i32 2677, ptr @.str.703, i32 148, i32 0, i32 140 }, %struct.builtin_description { i32 65536, i32 2678, ptr @.str.704, i32 149, i32 0, i32 140 }, %struct.builtin_description { i32 65536, i32 2682, ptr @.str.705, i32 619, i32 0, i32 140 }, %struct.builtin_description { i32 65536, i32 1195, ptr @.str.706, i32 57, i32 0, i32 140 }, %struct.builtin_description { i32 65536, i32 2701, ptr @.str.707, i32 58, i32 0, i32 140 }, %struct.builtin_description { i32 65536, i32 2702, ptr @.str.708, i32 59, i32 0, i32 140 }, %struct.builtin_description { i32 65536, i32 1174, ptr @.str.709, i32 144, i32 0, i32 140 }, %struct.builtin_description { i32 65536, i32 1177, ptr @.str.710, i32 145, i32 0, i32 140 }, %struct.builtin_description { i32 65536, i32 1129, ptr @.str.711, i32 42, i32 0, i32 139 }, %struct.builtin_description { i32 65536, i32 1133, ptr @.str.712, i32 44, i32 0, i32 137 }, %struct.builtin_description { i32 65540, i32 2956, ptr @.str.713, i32 45, i32 0, i32 134 }, %struct.builtin_description { i32 65536, i32 2240, ptr @.str.714, i32 140, i32 0, i32 5 }, %struct.builtin_description { i32 65536, i32 929, ptr @.str.715, i32 143, i32 0, i32 243 }, %struct.builtin_description { i32 65536, i32 934, ptr @.str.716, i32 139, i32 0, i32 243 }, %struct.builtin_description { i32 65536, i32 922, ptr @.str.717, i32 136, i32 0, i32 243 }, %struct.builtin_description { i32 65538, i32 2579, ptr @.str.718, i32 94, i32 0, i32 156 }, %struct.builtin_description { i32 65538, i32 2580, ptr @.str.719, i32 95, i32 0, i32 131 }, %struct.builtin_description { i32 65538, i32 2546, ptr @.str.720, i32 107, i32 0, i32 131 }, %struct.builtin_description { i32 65538, i32 2552, ptr @.str.721, i32 104, i32 0, i32 156 }, %struct.builtin_description { i32 65538, i32 2550, ptr @.str.722, i32 103, i32 0, i32 131 }, %struct.builtin_description { i32 65538, i32 2553, ptr @.str.723, i32 106, i32 0, i32 156 }, %struct.builtin_description { i32 65538, i32 2551, ptr @.str.724, i32 105, i32 0, i32 131 }, %struct.builtin_description { i32 65538, i32 828, ptr @.str.725, i32 110, i32 0, i32 101 }, %struct.builtin_description { i32 65538, i32 829, ptr @.str.726, i32 66, i32 0, i32 12 }, %struct.builtin_description { i32 65538, i32 2567, ptr @.str.727, i32 111, i32 0, i32 129 }, %struct.builtin_description { i32 131072, i32 2742, ptr @.str.728, i32 232, i32 0, i32 181 }, %struct.builtin_description { i32 131072, i32 2956, ptr @.str.729, i32 622, i32 0, i32 223 }, %struct.builtin_description { i32 65536, i32 2956, ptr @.str.730, i32 623, i32 0, i32 224 }, %struct.builtin_description { i32 131072, i32 2956, ptr @.str.731, i32 624, i32 0, i32 187 }, %struct.builtin_description { i32 131072, i32 2956, ptr @.str.732, i32 625, i32 0, i32 202 }, %struct.builtin_description { i32 131072, i32 2956, ptr @.str.733, i32 626, i32 0, i32 206 }, %struct.builtin_description { i32 131072, i32 2956, ptr @.str.734, i32 627, i32 0, i32 179 }, %struct.builtin_description { i32 131072, i32 2956, ptr @.str.735, i32 628, i32 0, i32 225 }, %struct.builtin_description { i32 131072, i32 2956, ptr @.str.736, i32 629, i32 0, i32 226 }, %struct.builtin_description { i32 131072, i32 2956, ptr @.str.737, i32 630, i32 0, i32 227 }, %struct.builtin_description { i32 131072, i32 2956, ptr @.str.738, i32 631, i32 0, i32 228 }, %struct.builtin_description { i32 32, i32 2956, ptr @.str.739, i32 632, i32 0, i32 229 }, %struct.builtin_description { i32 32, i32 2956, ptr @.str.740, i32 633, i32 0, i32 230 }, %struct.builtin_description { i32 131072, i32 1502, ptr @.str.741, i32 262, i32 0, i32 9 }, %struct.builtin_description { i32 131072, i32 1503, ptr @.str.742, i32 263, i32 0, i32 8 }, %struct.builtin_description { i32 131072, i32 926, ptr @.str.743, i32 228, i32 0, i32 23 }, %struct.builtin_description { i32 131072, i32 1155, ptr @.str.744, i32 238, i32 0, i32 27 }, %struct.builtin_description { i32 131072, i32 1139, ptr @.str.745, i32 239, i32 0, i32 51 }, %struct.builtin_description { i32 131072, i32 2684, ptr @.str.746, i32 621, i32 0, i32 51 }, %struct.builtin_description { i32 131072, i32 2685, ptr @.str.747, i32 240, i32 0, i32 54 }, %struct.builtin_description { i32 131072, i32 1147, ptr @.str.748, i32 241, i32 0, i32 35 }, %struct.builtin_description { i32 131072, i32 2687, ptr @.str.749, i32 242, i32 0, i32 48 }, %struct.builtin_description { i32 131072, i32 2686, ptr @.str.750, i32 243, i32 0, i32 54 }, %struct.builtin_description { i32 131072, i32 1148, ptr @.str.751, i32 244, i32 0, i32 35 }, %struct.builtin_description { i32 131072, i32 1146, ptr @.str.752, i32 245, i32 0, i32 24 }, %struct.builtin_description { i32 131072, i32 1151, ptr @.str.753, i32 248, i32 0, i32 9 }, %struct.builtin_description { i32 131072, i32 1153, ptr @.str.754, i32 252, i32 0, i32 9 }, %struct.builtin_description { i32 131076, i32 2956, ptr @.str.755, i32 249, i32 0, i32 15 }, %struct.builtin_description { i32 131076, i32 2956, ptr @.str.756, i32 253, i32 0, i32 15 }, %struct.builtin_description { i32 131072, i32 1142, ptr @.str.757, i32 254, i32 0, i32 56 }, %struct.builtin_description { i32 131072, i32 1167, ptr @.str.758, i32 255, i32 0, i32 26 }, %struct.builtin_description { i32 131072, i32 1145, ptr @.str.759, i32 256, i32 0, i32 56 }, %struct.builtin_description { i32 131072, i32 2642, ptr @.str.760, i32 180, i32 0, i32 107 }, %struct.builtin_description { i32 131072, i32 2643, ptr @.str.761, i32 186, i32 0, i32 107 }, %struct.builtin_description { i32 131072, i32 2647, ptr @.str.762, i32 184, i32 0, i32 107 }, %struct.builtin_description { i32 131072, i32 2651, ptr @.str.763, i32 182, i32 0, i32 107 }, %struct.builtin_description { i32 131072, i32 895, ptr @.str.764, i32 181, i32 0, i32 107 }, %struct.builtin_description { i32 131072, i32 896, ptr @.str.765, i32 187, i32 0, i32 107 }, %struct.builtin_description { i32 131072, i32 906, ptr @.str.766, i32 185, i32 0, i32 107 }, %struct.builtin_description { i32 131072, i32 918, ptr @.str.767, i32 183, i32 0, i32 107 }, %struct.builtin_description { i32 131072, i32 1010, ptr @.str.768, i32 188, i32 81, i32 107 }, %struct.builtin_description { i32 131072, i32 1010, ptr @.str.769, i32 189, i32 85, i32 107 }, %struct.builtin_description { i32 131072, i32 1010, ptr @.str.770, i32 190, i32 84, i32 107 }, %struct.builtin_description { i32 131072, i32 1010, ptr @.str.771, i32 191, i32 85, i32 256 }, %struct.builtin_description { i32 131072, i32 1010, ptr @.str.772, i32 192, i32 84, i32 256 }, %struct.builtin_description { i32 131072, i32 1010, ptr @.str.773, i32 199, i32 90, i32 107 }, %struct.builtin_description { i32 131072, i32 1010, ptr @.str.774, i32 193, i32 80, i32 107 }, %struct.builtin_description { i32 131072, i32 1010, ptr @.str.775, i32 194, i32 93, i32 107 }, %struct.builtin_description { i32 131072, i32 1010, ptr @.str.776, i32 195, i32 94, i32 107 }, %struct.builtin_description { i32 131072, i32 1010, ptr @.str.777, i32 196, i32 93, i32 256 }, %struct.builtin_description { i32 131072, i32 1010, ptr @.str.778, i32 197, i32 94, i32 256 }, %struct.builtin_description { i32 131072, i32 1010, ptr @.str.779, i32 198, i32 91, i32 107 }, %struct.builtin_description { i32 131072, i32 1012, ptr @.str.780, i32 200, i32 81, i32 107 }, %struct.builtin_description { i32 131072, i32 1012, ptr @.str.781, i32 201, i32 85, i32 107 }, %struct.builtin_description { i32 131072, i32 1012, ptr @.str.782, i32 202, i32 84, i32 107 }, %struct.builtin_description { i32 131072, i32 1012, ptr @.str.783, i32 207, i32 90, i32 107 }, %struct.builtin_description { i32 131072, i32 1012, ptr @.str.784, i32 203, i32 80, i32 107 }, %struct.builtin_description { i32 131072, i32 1012, ptr @.str.785, i32 204, i32 93, i32 107 }, %struct.builtin_description { i32 131072, i32 1012, ptr @.str.786, i32 205, i32 94, i32 107 }, %struct.builtin_description { i32 131072, i32 1012, ptr @.str.787, i32 206, i32 91, i32 107 }, %struct.builtin_description { i32 131072, i32 2663, ptr @.str.788, i32 222, i32 0, i32 107 }, %struct.builtin_description { i32 131072, i32 2662, ptr @.str.789, i32 220, i32 0, i32 107 }, %struct.builtin_description { i32 131072, i32 966, ptr @.str.790, i32 223, i32 0, i32 107 }, %struct.builtin_description { i32 131072, i32 965, ptr @.str.791, i32 221, i32 0, i32 107 }, %struct.builtin_description { i32 131072, i32 2679, ptr @.str.792, i32 224, i32 0, i32 107 }, %struct.builtin_description { i32 131072, i32 1022, ptr @.str.793, i32 225, i32 0, i32 107 }, %struct.builtin_description { i32 131072, i32 2680, ptr @.str.794, i32 226, i32 0, i32 107 }, %struct.builtin_description { i32 131072, i32 2681, ptr @.str.795, i32 227, i32 0, i32 107 }, %struct.builtin_description { i32 131072, i32 2683, ptr @.str.796, i32 620, i32 0, i32 107 }, %struct.builtin_description { i32 131072, i32 1257, ptr @.str.797, i32 235, i32 0, i32 107 }, %struct.builtin_description { i32 131072, i32 2735, ptr @.str.798, i32 230, i32 0, i32 107 }, %struct.builtin_description { i32 131072, i32 2738, ptr @.str.799, i32 231, i32 0, i32 107 }, %struct.builtin_description { i32 131072, i32 2700, ptr @.str.800, i32 457, i32 0, i32 143 }, %struct.builtin_description { i32 131072, i32 2769, ptr @.str.801, i32 267, i32 0, i32 96 }, %struct.builtin_description { i32 131072, i32 2771, ptr @.str.802, i32 268, i32 0, i32 154 }, %struct.builtin_description { i32 131072, i32 2773, ptr @.str.803, i32 269, i32 0, i32 147 }, %struct.builtin_description { i32 131072, i32 2775, ptr @.str.804, i32 270, i32 0, i32 116 }, %struct.builtin_description { i32 131072, i32 2770, ptr @.str.805, i32 275, i32 0, i32 96 }, %struct.builtin_description { i32 131072, i32 2772, ptr @.str.806, i32 276, i32 0, i32 154 }, %struct.builtin_description { i32 131072, i32 2774, ptr @.str.807, i32 277, i32 0, i32 147 }, %struct.builtin_description { i32 131072, i32 2776, ptr @.str.808, i32 278, i32 0, i32 116 }, %struct.builtin_description { i32 131072, i32 2777, ptr @.str.809, i32 271, i32 0, i32 96 }, %struct.builtin_description { i32 131072, i32 2781, ptr @.str.810, i32 272, i32 0, i32 154 }, %struct.builtin_description { i32 131072, i32 2779, ptr @.str.811, i32 279, i32 0, i32 96 }, %struct.builtin_description { i32 131072, i32 2783, ptr @.str.812, i32 280, i32 0, i32 154 }, %struct.builtin_description { i32 131072, i32 2778, ptr @.str.813, i32 273, i32 0, i32 96 }, %struct.builtin_description { i32 131072, i32 2782, ptr @.str.814, i32 274, i32 0, i32 154 }, %struct.builtin_description { i32 131072, i32 2780, ptr @.str.815, i32 281, i32 0, i32 96 }, %struct.builtin_description { i32 131072, i32 2784, ptr @.str.816, i32 282, i32 0, i32 154 }, %struct.builtin_description { i32 131072, i32 2786, ptr @.str.817, i32 304, i32 0, i32 154 }, %struct.builtin_description { i32 131072, i32 2787, ptr @.str.818, i32 303, i32 0, i32 154 }, %struct.builtin_description { i32 131072, i32 2854, ptr @.str.819, i32 283, i32 0, i32 116 }, %struct.builtin_description { i32 131072, i32 1387, ptr @.str.820, i32 284, i32 0, i32 116 }, %struct.builtin_description { i32 131072, i32 2855, ptr @.str.821, i32 285, i32 0, i32 116 }, %struct.builtin_description { i32 131072, i32 2856, ptr @.str.822, i32 286, i32 0, i32 116 }, %struct.builtin_description { i32 131072, i32 2883, ptr @.str.823, i32 287, i32 0, i32 96 }, %struct.builtin_description { i32 131072, i32 2884, ptr @.str.824, i32 288, i32 0, i32 154 }, %struct.builtin_description { i32 131072, i32 2829, ptr @.str.825, i32 289, i32 0, i32 96 }, %struct.builtin_description { i32 131072, i32 2830, ptr @.str.826, i32 290, i32 0, i32 154 }, %struct.builtin_description { i32 131072, i32 2831, ptr @.str.827, i32 291, i32 0, i32 147 }, %struct.builtin_description { i32 131072, i32 1368, ptr @.str.828, i32 292, i32 0, i32 96 }, %struct.builtin_description { i32 131072, i32 1369, ptr @.str.829, i32 293, i32 0, i32 154 }, %struct.builtin_description { i32 131072, i32 1370, ptr @.str.830, i32 294, i32 0, i32 147 }, %struct.builtin_description { i32 131072, i32 2813, ptr @.str.831, i32 297, i32 0, i32 96 }, %struct.builtin_description { i32 131072, i32 2815, ptr @.str.832, i32 296, i32 0, i32 154 }, %struct.builtin_description { i32 131072, i32 2814, ptr @.str.833, i32 299, i32 0, i32 96 }, %struct.builtin_description { i32 131072, i32 2816, ptr @.str.834, i32 298, i32 0, i32 154 }, %struct.builtin_description { i32 131072, i32 1447, ptr @.str.835, i32 328, i32 0, i32 96 }, %struct.builtin_description { i32 131072, i32 1451, ptr @.str.836, i32 329, i32 0, i32 154 }, %struct.builtin_description { i32 131072, i32 1455, ptr @.str.837, i32 330, i32 0, i32 147 }, %struct.builtin_description { i32 131072, i32 1240, ptr @.str.838, i32 331, i32 0, i32 116 }, %struct.builtin_description { i32 131072, i32 1449, ptr @.str.839, i32 332, i32 0, i32 96 }, %struct.builtin_description { i32 131072, i32 1453, ptr @.str.840, i32 333, i32 0, i32 154 }, %struct.builtin_description { i32 131072, i32 1457, ptr @.str.841, i32 334, i32 0, i32 147 }, %struct.builtin_description { i32 131072, i32 1242, ptr @.str.842, i32 335, i32 0, i32 116 }, %struct.builtin_description { i32 131072, i32 1441, ptr @.str.843, i32 264, i32 0, i32 97 }, %struct.builtin_description { i32 131072, i32 1443, ptr @.str.844, i32 265, i32 0, i32 151 }, %struct.builtin_description { i32 131072, i32 1445, ptr @.str.845, i32 266, i32 0, i32 97 }, %struct.builtin_description { i32 131072, i32 2788, ptr @.str.846, i32 302, i32 0, i32 154 }, %struct.builtin_description { i32 131072, i32 1498, ptr @.str.847, i32 305, i32 0, i32 111 }, %struct.builtin_description { i32 131072, i32 2549, ptr @.str.848, i32 300, i32 0, i32 100 }, %struct.builtin_description { i32 131072, i32 2789, ptr @.str.849, i32 301, i32 0, i32 117 }, %struct.builtin_description { i32 131072, i32 2791, ptr @.str.850, i32 295, i32 0, i32 148 }, %struct.builtin_description { i32 131072, i32 1150, ptr @.str.851, i32 246, i32 0, i32 106 }, %struct.builtin_description { i32 131076, i32 2956, ptr @.str.852, i32 247, i32 0, i32 103 }, %struct.builtin_description { i32 131072, i32 1161, ptr @.str.853, i32 250, i32 0, i32 138 }, %struct.builtin_description { i32 131072, i32 1163, ptr @.str.854, i32 251, i32 0, i32 109 }, %struct.builtin_description { i32 131072, i32 1328, ptr @.str.855, i32 309, i32 0, i32 258 }, %struct.builtin_description { i32 131072, i32 1329, ptr @.str.856, i32 310, i32 0, i32 249 }, %struct.builtin_description { i32 131072, i32 1330, ptr @.str.857, i32 311, i32 0, i32 248 }, %struct.builtin_description { i32 131072, i32 1331, ptr @.str.858, i32 312, i32 0, i32 245 }, %struct.builtin_description { i32 131072, i32 1329, ptr @.str.859, i32 320, i32 0, i32 255 }, %struct.builtin_description { i32 131072, i32 1330, ptr @.str.860, i32 321, i32 0, i32 254 }, %struct.builtin_description { i32 131072, i32 1331, ptr @.str.861, i32 322, i32 0, i32 251 }, %struct.builtin_description { i32 131072, i32 1320, ptr @.str.862, i32 315, i32 0, i32 258 }, %struct.builtin_description { i32 131072, i32 1321, ptr @.str.863, i32 316, i32 0, i32 249 }, %struct.builtin_description { i32 131072, i32 1322, ptr @.str.864, i32 317, i32 0, i32 248 }, %struct.builtin_description { i32 131072, i32 1323, ptr @.str.865, i32 318, i32 0, i32 245 }, %struct.builtin_description { i32 131072, i32 1321, ptr @.str.866, i32 325, i32 0, i32 255 }, %struct.builtin_description { i32 131072, i32 1322, ptr @.str.867, i32 326, i32 0, i32 254 }, %struct.builtin_description { i32 131072, i32 1323, ptr @.str.868, i32 327, i32 0, i32 251 }, %struct.builtin_description { i32 131072, i32 1314, ptr @.str.869, i32 313, i32 0, i32 249 }, %struct.builtin_description { i32 131072, i32 1315, ptr @.str.870, i32 314, i32 0, i32 248 }, %struct.builtin_description { i32 131072, i32 1314, ptr @.str.871, i32 323, i32 0, i32 255 }, %struct.builtin_description { i32 131072, i32 1315, ptr @.str.872, i32 324, i32 0, i32 254 }, %struct.builtin_description { i32 131072, i32 2863, ptr @.str.873, i32 308, i32 0, i32 145 }, %struct.builtin_description { i32 131072, i32 2864, ptr @.str.874, i32 307, i32 0, i32 152 }, %struct.builtin_description { i32 131072, i32 2865, ptr @.str.875, i32 306, i32 0, i32 152 }, %struct.builtin_description { i32 131072, i32 930, ptr @.str.876, i32 229, i32 0, i32 242 }, %struct.builtin_description { i32 131072, i32 2118, ptr null, i32 617, i32 0, i32 6 }, %struct.builtin_description { i32 131072, i32 2127, ptr null, i32 618, i32 0, i32 76 }, %struct.builtin_description { i32 65536, i32 858, ptr @.str.877, i32 260, i32 0, i32 30 }, %struct.builtin_description { i32 131072, i32 2534, ptr @.str.878, i32 77, i32 0, i32 99 }, %struct.builtin_description { i32 131072, i32 2535, ptr @.str.879, i32 85, i32 0, i32 99 }, %struct.builtin_description { i32 262144, i32 1179, ptr @.str.880, i32 351, i32 0, i32 50 }, %struct.builtin_description { i32 262144, i32 1181, ptr @.str.881, i32 352, i32 0, i32 50 }, %struct.builtin_description { i32 262144, i32 982, ptr @.str.882, i32 348, i32 0, i32 140 }, %struct.builtin_description { i32 262144, i32 984, ptr @.str.883, i32 353, i32 0, i32 107 }, %struct.builtin_description { i32 262144, i32 991, ptr @.str.884, i32 349, i32 0, i32 140 }, %struct.builtin_description { i32 262144, i32 995, ptr @.str.885, i32 354, i32 0, i32 107 }, %struct.builtin_description { i32 262144, i32 992, ptr @.str.886, i32 350, i32 0, i32 140 }, %struct.builtin_description { i32 262144, i32 996, ptr @.str.887, i32 355, i32 0, i32 107 }, %struct.builtin_description { i32 4194304, i32 1552, ptr @.str.888, i32 388, i32 0, i32 21 }, %struct.builtin_description { i32 4194304, i32 1555, ptr @.str.889, i32 372, i32 0, i32 62 }, %struct.builtin_description { i32 4194304, i32 1553, ptr @.str.890, i32 389, i32 0, i32 61 }, %struct.builtin_description { i32 4194304, i32 1556, ptr @.str.891, i32 373, i32 0, i32 46 }, %struct.builtin_description { i32 4194304, i32 1554, ptr @.str.892, i32 390, i32 0, i32 57 }, %struct.builtin_description { i32 4194304, i32 1557, ptr @.str.893, i32 374, i32 0, i32 37 }, %struct.builtin_description { i32 4194304, i32 1514, ptr @.str.894, i32 375, i32 0, i32 154 }, %struct.builtin_description { i32 4194304, i32 1515, ptr @.str.895, i32 359, i32 0, i32 131 }, %struct.builtin_description { i32 4194304, i32 1517, ptr @.str.896, i32 376, i32 0, i32 147 }, %struct.builtin_description { i32 4194304, i32 1518, ptr @.str.897, i32 360, i32 0, i32 122 }, %struct.builtin_description { i32 4194304, i32 1520, ptr @.str.898, i32 377, i32 0, i32 154 }, %struct.builtin_description { i32 4194304, i32 1521, ptr @.str.899, i32 361, i32 0, i32 131 }, %struct.builtin_description { i32 4194304, i32 1523, ptr @.str.900, i32 378, i32 0, i32 154 }, %struct.builtin_description { i32 4194304, i32 1524, ptr @.str.901, i32 362, i32 0, i32 131 }, %struct.builtin_description { i32 4194304, i32 1526, ptr @.str.902, i32 379, i32 0, i32 147 }, %struct.builtin_description { i32 4194304, i32 1527, ptr @.str.903, i32 363, i32 0, i32 122 }, %struct.builtin_description { i32 4194304, i32 1529, ptr @.str.904, i32 380, i32 0, i32 154 }, %struct.builtin_description { i32 4194304, i32 1530, ptr @.str.905, i32 364, i32 0, i32 131 }, %struct.builtin_description { i32 4194304, i32 1532, ptr @.str.906, i32 381, i32 0, i32 150 }, %struct.builtin_description { i32 4194304, i32 1533, ptr @.str.907, i32 365, i32 0, i32 132 }, %struct.builtin_description { i32 4194304, i32 2889, ptr @.str.908, i32 382, i32 0, i32 154 }, %struct.builtin_description { i32 4194304, i32 2890, ptr @.str.909, i32 366, i32 0, i32 131 }, %struct.builtin_description { i32 4194304, i32 1538, ptr @.str.910, i32 383, i32 0, i32 96 }, %struct.builtin_description { i32 4194304, i32 1539, ptr @.str.911, i32 367, i32 0, i32 156 }, %struct.builtin_description { i32 4194304, i32 1543, ptr @.str.912, i32 384, i32 0, i32 96 }, %struct.builtin_description { i32 4194304, i32 1546, ptr @.str.913, i32 368, i32 0, i32 156 }, %struct.builtin_description { i32 4194304, i32 1544, ptr @.str.914, i32 385, i32 0, i32 154 }, %struct.builtin_description { i32 4194304, i32 1547, ptr @.str.915, i32 369, i32 0, i32 131 }, %struct.builtin_description { i32 4194304, i32 1545, ptr @.str.916, i32 386, i32 0, i32 147 }, %struct.builtin_description { i32 4194304, i32 1548, ptr @.str.917, i32 370, i32 0, i32 122 }, %struct.builtin_description { i32 4194304, i32 1550, ptr @.str.918, i32 387, i32 0, i32 259 }, %struct.builtin_description { i32 4194304, i32 1551, ptr @.str.919, i32 371, i32 0, i32 260 }, %struct.builtin_description { i32 524288, i32 1575, ptr @.str.920, i32 397, i32 0, i32 181 }, %struct.builtin_description { i32 524288, i32 1574, ptr @.str.921, i32 398, i32 0, i32 196 }, %struct.builtin_description { i32 524288, i32 1577, ptr @.str.922, i32 399, i32 0, i32 182 }, %struct.builtin_description { i32 524288, i32 1576, ptr @.str.923, i32 400, i32 0, i32 197 }, %struct.builtin_description { i32 524288, i32 1583, ptr @.str.924, i32 403, i32 0, i32 181 }, %struct.builtin_description { i32 524288, i32 1582, ptr @.str.925, i32 404, i32 0, i32 196 }, %struct.builtin_description { i32 524288, i32 1214, ptr @.str.926, i32 405, i32 0, i32 196 }, %struct.builtin_description { i32 524288, i32 1586, ptr @.str.927, i32 407, i32 0, i32 178 }, %struct.builtin_description { i32 524288, i32 1590, ptr @.str.928, i32 401, i32 0, i32 179 }, %struct.builtin_description { i32 524288, i32 1592, ptr @.str.929, i32 402, i32 0, i32 204 }, %struct.builtin_description { i32 524288, i32 1594, ptr @.str.930, i32 419, i32 0, i32 60 }, %struct.builtin_description { i32 524288, i32 1596, ptr @.str.931, i32 420, i32 0, i32 53 }, %struct.builtin_description { i32 524288, i32 1598, ptr @.str.932, i32 421, i32 0, i32 29 }, %struct.builtin_description { i32 524288, i32 1600, ptr @.str.933, i32 422, i32 0, i32 58 }, %struct.builtin_description { i32 524288, i32 1602, ptr @.str.934, i32 423, i32 0, i32 32 }, %struct.builtin_description { i32 524288, i32 1604, ptr @.str.935, i32 424, i32 0, i32 31 }, %struct.builtin_description { i32 524288, i32 1606, ptr @.str.936, i32 425, i32 0, i32 60 }, %struct.builtin_description { i32 524288, i32 1608, ptr @.str.937, i32 426, i32 0, i32 53 }, %struct.builtin_description { i32 524288, i32 1610, ptr @.str.938, i32 427, i32 0, i32 29 }, %struct.builtin_description { i32 524288, i32 1612, ptr @.str.939, i32 428, i32 0, i32 58 }, %struct.builtin_description { i32 524288, i32 1614, ptr @.str.940, i32 429, i32 0, i32 32 }, %struct.builtin_description { i32 524288, i32 1616, ptr @.str.941, i32 430, i32 0, i32 31 }, %struct.builtin_description { i32 524288, i32 1593, ptr @.str.942, i32 410, i32 0, i32 61 }, %struct.builtin_description { i32 524288, i32 1588, ptr @.str.943, i32 408, i32 0, i32 151 }, %struct.builtin_description { i32 524288, i32 2832, ptr @.str.944, i32 409, i32 0, i32 116 }, %struct.builtin_description { i32 524288, i32 2818, ptr @.str.945, i32 411, i32 0, i32 96 }, %struct.builtin_description { i32 524288, i32 2819, ptr @.str.946, i32 412, i32 0, i32 147 }, %struct.builtin_description { i32 524288, i32 2821, ptr @.str.947, i32 413, i32 0, i32 147 }, %struct.builtin_description { i32 524288, i32 2817, ptr @.str.948, i32 414, i32 0, i32 154 }, %struct.builtin_description { i32 524288, i32 2823, ptr @.str.949, i32 415, i32 0, i32 96 }, %struct.builtin_description { i32 524288, i32 2824, ptr @.str.950, i32 416, i32 0, i32 147 }, %struct.builtin_description { i32 524288, i32 2827, ptr @.str.951, i32 417, i32 0, i32 147 }, %struct.builtin_description { i32 524288, i32 2826, ptr @.str.952, i32 418, i32 0, i32 154 }, %struct.builtin_description { i32 524288, i32 2790, ptr @.str.953, i32 431, i32 0, i32 117 }, %struct.builtin_description { i32 524288, i32 2792, ptr @.str.954, i32 432, i32 0, i32 147 }, %struct.builtin_description { i32 524288, i32 1627, ptr @.str.955, i32 433, i32 0, i32 104 }, %struct.builtin_description { i32 524288, i32 1626, ptr @.str.956, i32 434, i32 0, i32 135 }, %struct.builtin_description { i32 524288, i32 1631, ptr @.str.957, i32 435, i32 0, i32 181 }, %struct.builtin_description { i32 524288, i32 1630, ptr @.str.958, i32 436, i32 0, i32 196 }, %struct.builtin_description { i32 524288, i32 1623, ptr @.str.959, i32 437, i32 81, i32 237 }, %struct.builtin_description { i32 524288, i32 1623, ptr @.str.960, i32 438, i32 89, i32 237 }, %struct.builtin_description { i32 524288, i32 1623, ptr @.str.961, i32 439, i32 87, i32 237 }, %struct.builtin_description { i32 1048576, i32 1371, ptr @.str.962, i32 476, i32 0, i32 116 }, %struct.builtin_description { i32 1048640, i32 708, ptr @.str.963, i32 458, i32 0, i32 89 }, %struct.builtin_description { i32 1048640, i32 709, ptr @.str.964, i32 459, i32 0, i32 91 }, %struct.builtin_description { i32 1048640, i32 710, ptr @.str.965, i32 460, i32 0, i32 90 }, %struct.builtin_description { i32 1048644, i32 2956, ptr @.str.966, i32 461, i32 0, i32 93 }, %struct.builtin_description { i32 2097152, i32 1562, ptr @.str.967, i32 393, i32 0, i32 185 }, %struct.builtin_description { i32 2097152, i32 1563, ptr @.str.968, i32 394, i32 0, i32 115 }, %struct.builtin_description { i32 2097152, i32 1564, ptr @.str.969, i32 395, i32 0, i32 231 }, %struct.builtin_description { i32 2097152, i32 1565, ptr @.str.970, i32 396, i32 0, i32 116 }, %struct.builtin_description { i32 131072, i32 1740, ptr null, i32 482, i32 0, i32 113 }, %struct.builtin_description { i32 131072, i32 1739, ptr null, i32 481, i32 0, i32 30 }, %struct.builtin_description { i32 131072, i32 1732, ptr null, i32 477, i32 0, i32 116 }, %struct.builtin_description { i32 131072, i32 1734, ptr null, i32 478, i32 0, i32 116 }, %struct.builtin_description { i32 131072, i32 1736, ptr null, i32 479, i32 0, i32 116 }, %struct.builtin_description { i32 131072, i32 1738, ptr null, i32 480, i32 0, i32 116 }, %struct.builtin_description { i32 131072, i32 1742, ptr null, i32 483, i32 0, i32 186 }, %struct.builtin_description { i32 32, i32 2638, ptr @.str.971, i32 484, i32 0, i32 126 }, %struct.builtin_description { i32 32, i32 2636, ptr @.str.972, i32 485, i32 0, i32 159 }, %struct.builtin_description { i32 32, i32 980, ptr @.str.973, i32 486, i32 0, i32 126 }, %struct.builtin_description { i32 32, i32 979, ptr @.str.974, i32 487, i32 0, i32 159 }, %struct.builtin_description { i32 32, i32 2673, ptr @.str.975, i32 488, i32 0, i32 126 }, %struct.builtin_description { i32 32, i32 2670, ptr @.str.976, i32 489, i32 0, i32 159 }, %struct.builtin_description { i32 32, i32 1020, ptr @.str.977, i32 490, i32 0, i32 126 }, %struct.builtin_description { i32 32, i32 1019, ptr @.str.978, i32 491, i32 0, i32 159 }, %struct.builtin_description { i32 32, i32 2649, ptr @.str.979, i32 496, i32 0, i32 126 }, %struct.builtin_description { i32 32, i32 909, ptr @.str.980, i32 497, i32 0, i32 159 }, %struct.builtin_description { i32 32, i32 985, ptr @.str.981, i32 499, i32 0, i32 126 }, %struct.builtin_description { i32 32, i32 988, ptr @.str.982, i32 502, i32 0, i32 159 }, %struct.builtin_description { i32 32, i32 986, ptr @.str.983, i32 501, i32 0, i32 126 }, %struct.builtin_description { i32 32, i32 987, ptr @.str.984, i32 500, i32 0, i32 159 }, %struct.builtin_description { i32 32, i32 2658, ptr @.str.985, i32 503, i32 0, i32 126 }, %struct.builtin_description { i32 32, i32 2656, ptr @.str.986, i32 504, i32 0, i32 159 }, %struct.builtin_description { i32 32, i32 2659, ptr @.str.987, i32 505, i32 0, i32 126 }, %struct.builtin_description { i32 32, i32 2657, ptr @.str.988, i32 506, i32 0, i32 159 }, %struct.builtin_description { i32 32, i32 2645, ptr @.str.989, i32 507, i32 0, i32 126 }, %struct.builtin_description { i32 32, i32 2644, ptr @.str.990, i32 508, i32 0, i32 159 }, %struct.builtin_description { i32 32, i32 2674, ptr @.str.991, i32 509, i32 0, i32 126 }, %struct.builtin_description { i32 32, i32 2671, ptr @.str.992, i32 510, i32 0, i32 159 }, %struct.builtin_description { i32 32, i32 2639, ptr @.str.993, i32 513, i32 0, i32 126 }, %struct.builtin_description { i32 32, i32 2637, ptr @.str.994, i32 514, i32 0, i32 159 }, %struct.builtin_description { i32 32, i32 2675, ptr @.str.995, i32 515, i32 0, i32 126 }, %struct.builtin_description { i32 32, i32 2672, ptr @.str.996, i32 516, i32 0, i32 159 }, %struct.builtin_description { i32 32, i32 1763, ptr @.str.997, i32 536, i32 0, i32 108 }, %struct.builtin_description { i32 32, i32 1762, ptr @.str.998, i32 537, i32 0, i32 141 }, %struct.builtin_description { i32 32, i32 1765, ptr @.str.999, i32 538, i32 0, i32 127 }, %struct.builtin_description { i32 32, i32 1764, ptr @.str.1000, i32 539, i32 0, i32 160 }, %struct.builtin_description { i32 32, i32 1569, ptr @.str.1001, i32 492, i32 0, i32 190 }, %struct.builtin_description { i32 32, i32 1568, ptr @.str.1002, i32 493, i32 0, i32 208 }, %struct.builtin_description { i32 32, i32 1573, ptr @.str.1003, i32 494, i32 0, i32 191 }, %struct.builtin_description { i32 32, i32 1572, ptr @.str.1004, i32 495, i32 0, i32 209 }, %struct.builtin_description { i32 32, i32 1580, ptr @.str.1005, i32 498, i32 0, i32 208 }, %struct.builtin_description { i32 32, i32 2741, ptr @.str.1006, i32 511, i32 0, i32 190 }, %struct.builtin_description { i32 32, i32 2703, ptr @.str.1007, i32 512, i32 0, i32 208 }, %struct.builtin_description { i32 32, i32 1002, ptr @.str.1008, i32 517, i32 0, i32 181 }, %struct.builtin_description { i32 32, i32 1001, ptr @.str.1009, i32 518, i32 0, i32 196 }, %struct.builtin_description { i32 32, i32 998, ptr @.str.1010, i32 519, i32 0, i32 181 }, %struct.builtin_description { i32 32, i32 997, ptr @.str.1011, i32 520, i32 0, i32 196 }, %struct.builtin_description { i32 32, i32 1000, ptr @.str.1012, i32 521, i32 0, i32 190 }, %struct.builtin_description { i32 32, i32 999, ptr @.str.1013, i32 522, i32 0, i32 208 }, %struct.builtin_description { i32 32, i32 2727, ptr @.str.1014, i32 531, i32 0, i32 110 }, %struct.builtin_description { i32 32, i32 2726, ptr @.str.1015, i32 532, i32 0, i32 142 }, %struct.builtin_description { i32 32, i32 2724, ptr @.str.1016, i32 533, i32 0, i32 149 }, %struct.builtin_description { i32 32, i32 1154, ptr @.str.1017, i32 523, i32 0, i32 45 }, %struct.builtin_description { i32 32, i32 1138, ptr @.str.1018, i32 524, i32 0, i32 67 }, %struct.builtin_description { i32 32, i32 1164, ptr @.str.1019, i32 525, i32 0, i32 49 }, %struct.builtin_description { i32 32, i32 1141, ptr @.str.1020, i32 526, i32 0, i32 69 }, %struct.builtin_description { i32 32, i32 1166, ptr @.str.1021, i32 527, i32 0, i32 44 }, %struct.builtin_description { i32 32, i32 1158, ptr @.str.1022, i32 528, i32 0, i32 55 }, %struct.builtin_description { i32 32, i32 1156, ptr @.str.1023, i32 529, i32 0, i32 55 }, %struct.builtin_description { i32 32, i32 1144, ptr @.str.1024, i32 530, i32 0, i32 69 }, %struct.builtin_description { i32 32, i32 2938, ptr @.str.1025, i32 548, i32 0, i32 190 }, %struct.builtin_description { i32 32, i32 2937, ptr @.str.1026, i32 549, i32 0, i32 208 }, %struct.builtin_description { i32 32, i32 2936, ptr @.str.1027, i32 550, i32 0, i32 212 }, %struct.builtin_description { i32 32, i32 2932, ptr @.str.1028, i32 540, i32 0, i32 104 }, %struct.builtin_description { i32 32, i32 2934, ptr @.str.1029, i32 541, i32 0, i32 135 }, %struct.builtin_description { i32 32, i32 2933, ptr @.str.1030, i32 542, i32 0, i32 125 }, %struct.builtin_description { i32 32, i32 2935, ptr @.str.1031, i32 543, i32 0, i32 158 }, %struct.builtin_description { i32 32, i32 2944, ptr @.str.1032, i32 556, i32 0, i32 189 }, %struct.builtin_description { i32 32, i32 2943, ptr @.str.1033, i32 557, i32 0, i32 207 }, %struct.builtin_description { i32 32, i32 2941, ptr @.str.1034, i32 558, i32 0, i32 211 }, %struct.builtin_description { i32 32, i32 1178, ptr @.str.1035, i32 577, i32 0, i32 66 }, %struct.builtin_description { i32 32, i32 1180, ptr @.str.1036, i32 578, i32 0, i32 66 }, %struct.builtin_description { i32 32, i32 2736, ptr @.str.1037, i32 579, i32 0, i32 43 }, %struct.builtin_description { i32 32, i32 925, ptr @.str.1038, i32 580, i32 0, i32 43 }, %struct.builtin_description { i32 32, i32 923, ptr @.str.1039, i32 581, i32 0, i32 66 }, %struct.builtin_description { i32 32, i32 2652, ptr @.str.1040, i32 582, i32 0, i32 66 }, %struct.builtin_description { i32 32, i32 931, ptr @.str.1041, i32 583, i32 0, i32 66 }, %struct.builtin_description { i32 32, i32 2654, ptr @.str.1042, i32 584, i32 0, i32 66 }, %struct.builtin_description { i32 32, i32 919, ptr @.str.1043, i32 585, i32 0, i32 66 }, %struct.builtin_description { i32 32, i32 1625, ptr @.str.1044, i32 586, i32 0, i32 125 }, %struct.builtin_description { i32 32, i32 1624, ptr @.str.1045, i32 587, i32 0, i32 158 }, %struct.builtin_description { i32 32, i32 1230, ptr @.str.1046, i32 588, i32 0, i32 126 }, %struct.builtin_description { i32 32, i32 2737, ptr @.str.1047, i32 589, i32 0, i32 126 }, %struct.builtin_description { i32 32, i32 1172, ptr @.str.1048, i32 590, i32 0, i32 159 }, %struct.builtin_description { i32 32, i32 1175, ptr @.str.1049, i32 591, i32 0, i32 159 }, %struct.builtin_description { i32 32, i32 1792, ptr @.str.1050, i32 592, i32 0, i32 68 }, %struct.builtin_description { i32 32, i32 1793, ptr @.str.1051, i32 593, i32 0, i32 65 }, %struct.builtin_description { i32 32, i32 1794, ptr @.str.1052, i32 594, i32 0, i32 42 }, %struct.builtin_description { i32 32, i32 1795, ptr @.str.1053, i32 595, i32 0, i32 59 }, %struct.builtin_description { i32 32, i32 1796, ptr @.str.1054, i32 596, i32 0, i32 52 }, %struct.builtin_description { i32 32, i32 1797, ptr @.str.1055, i32 597, i32 0, i32 25 }, %struct.builtin_description { i32 32, i32 1619, ptr @.str.1056, i32 598, i32 81, i32 236 }, %struct.builtin_description { i32 32, i32 1619, ptr @.str.1057, i32 599, i32 89, i32 236 }, %struct.builtin_description { i32 32, i32 1619, ptr @.str.1058, i32 600, i32 87, i32 236 }, %struct.builtin_description { i32 32, i32 1618, ptr @.str.1059, i32 601, i32 81, i32 240 }, %struct.builtin_description { i32 32, i32 1618, ptr @.str.1060, i32 602, i32 89, i32 240 }, %struct.builtin_description { i32 32, i32 1618, ptr @.str.1061, i32 603, i32 87, i32 240 }, %struct.builtin_description { i32 32, i32 1621, ptr @.str.1062, i32 604, i32 81, i32 238 }, %struct.builtin_description { i32 32, i32 1621, ptr @.str.1063, i32 605, i32 89, i32 238 }, %struct.builtin_description { i32 32, i32 1621, ptr @.str.1064, i32 606, i32 87, i32 238 }, %struct.builtin_description { i32 32, i32 1620, ptr @.str.1065, i32 607, i32 81, i32 241 }, %struct.builtin_description { i32 32, i32 1620, ptr @.str.1066, i32 608, i32 89, i32 241 }, %struct.builtin_description { i32 32, i32 1620, ptr @.str.1067, i32 609, i32 87, i32 241 }, %struct.builtin_description { i32 32, i32 1622, ptr @.str.1068, i32 610, i32 81, i32 239 }, %struct.builtin_description { i32 32, i32 1622, ptr @.str.1069, i32 611, i32 89, i32 239 }, %struct.builtin_description { i32 32, i32 1622, ptr @.str.1070, i32 612, i32 87, i32 239 }, %struct.builtin_description { i32 32, i32 1500, ptr @.str.1071, i32 613, i32 0, i32 10 }, %struct.builtin_description { i32 32, i32 1499, ptr @.str.1072, i32 614, i32 0, i32 13 }, %struct.builtin_description { i32 8, i32 515, ptr @.str.1073, i32 800, i32 0, i32 18 }], align 16
@bdesc_pcmpestr = internal constant [7 x %struct.builtin_description] [%struct.builtin_description { i32 1048576, i32 1632, ptr @.str.1074, i32 462, i32 0, i32 0 }, %struct.builtin_description { i32 1048576, i32 1632, ptr @.str.1075, i32 463, i32 0, i32 0 }, %struct.builtin_description { i32 1048576, i32 1632, ptr @.str.1076, i32 464, i32 0, i32 6 }, %struct.builtin_description { i32 1048576, i32 1632, ptr @.str.1077, i32 465, i32 0, i32 7 }, %struct.builtin_description { i32 1048576, i32 1632, ptr @.str.1078, i32 466, i32 0, i32 8 }, %struct.builtin_description { i32 1048576, i32 1632, ptr @.str.1079, i32 467, i32 0, i32 9 }, %struct.builtin_description { i32 1048576, i32 1632, ptr @.str.1080, i32 468, i32 0, i32 10 }], align 16
@bdesc_pcmpistr = internal constant [7 x %struct.builtin_description] [%struct.builtin_description { i32 1048576, i32 1636, ptr @.str.1081, i32 469, i32 0, i32 0 }, %struct.builtin_description { i32 1048576, i32 1636, ptr @.str.1082, i32 470, i32 0, i32 0 }, %struct.builtin_description { i32 1048576, i32 1636, ptr @.str.1083, i32 471, i32 0, i32 6 }, %struct.builtin_description { i32 1048576, i32 1636, ptr @.str.1084, i32 472, i32 0, i32 7 }, %struct.builtin_description { i32 1048576, i32 1636, ptr @.str.1085, i32 473, i32 0, i32 8 }, %struct.builtin_description { i32 1048576, i32 1636, ptr @.str.1086, i32 474, i32 0, i32 9 }, %struct.builtin_description { i32 1048576, i32 1636, ptr @.str.1087, i32 475, i32 0, i32 10 }], align 16
@bdesc_comi = internal constant [24 x %struct.builtin_description] [%struct.builtin_description { i32 65536, i32 1013, ptr @.str.1088, i32 30, i32 92, i32 0 }, %struct.builtin_description { i32 65536, i32 1013, ptr @.str.1089, i32 31, i32 96, i32 0 }, %struct.builtin_description { i32 65536, i32 1013, ptr @.str.1090, i32 32, i32 95, i32 0 }, %struct.builtin_description { i32 65536, i32 1013, ptr @.str.1091, i32 33, i32 83, i32 0 }, %struct.builtin_description { i32 65536, i32 1013, ptr @.str.1092, i32 34, i32 82, i32 0 }, %struct.builtin_description { i32 65536, i32 1013, ptr @.str.1093, i32 35, i32 97, i32 0 }, %struct.builtin_description { i32 65536, i32 1015, ptr @.str.1094, i32 36, i32 92, i32 0 }, %struct.builtin_description { i32 65536, i32 1015, ptr @.str.1095, i32 37, i32 96, i32 0 }, %struct.builtin_description { i32 65536, i32 1015, ptr @.str.1096, i32 38, i32 95, i32 0 }, %struct.builtin_description { i32 65536, i32 1015, ptr @.str.1097, i32 39, i32 83, i32 0 }, %struct.builtin_description { i32 65536, i32 1015, ptr @.str.1098, i32 40, i32 82, i32 0 }, %struct.builtin_description { i32 65536, i32 1015, ptr @.str.1099, i32 41, i32 97, i32 0 }, %struct.builtin_description { i32 131072, i32 1014, ptr @.str.1100, i32 208, i32 92, i32 0 }, %struct.builtin_description { i32 131072, i32 1014, ptr @.str.1101, i32 209, i32 96, i32 0 }, %struct.builtin_description { i32 131072, i32 1014, ptr @.str.1102, i32 210, i32 95, i32 0 }, %struct.builtin_description { i32 131072, i32 1014, ptr @.str.1103, i32 211, i32 83, i32 0 }, %struct.builtin_description { i32 131072, i32 1014, ptr @.str.1104, i32 212, i32 82, i32 0 }, %struct.builtin_description { i32 131072, i32 1014, ptr @.str.1105, i32 213, i32 97, i32 0 }, %struct.builtin_description { i32 131072, i32 1016, ptr @.str.1106, i32 214, i32 92, i32 0 }, %struct.builtin_description { i32 131072, i32 1016, ptr @.str.1107, i32 215, i32 96, i32 0 }, %struct.builtin_description { i32 131072, i32 1016, ptr @.str.1108, i32 216, i32 95, i32 0 }, %struct.builtin_description { i32 131072, i32 1016, ptr @.str.1109, i32 217, i32 83, i32 0 }, %struct.builtin_description { i32 131072, i32 1016, ptr @.str.1110, i32 218, i32 82, i32 0 }, %struct.builtin_description { i32 131072, i32 1016, ptr @.str.1111, i32 219, i32 97, i32 0 }], align 16
@.str.480 = private unnamed_addr constant [23 x i8] c"__builtin_ia32_ldmxcsr\00", align 1
@.str.481 = private unnamed_addr constant [23 x i8] c"__builtin_ia32_stmxcsr\00", align 1
@.str.482 = private unnamed_addr constant [24 x i8] c"__builtin_ia32_maskmovq\00", align 1
@.str.483 = private unnamed_addr constant [26 x i8] c"__builtin_ia32_maskmovdqu\00", align 1
@.str.484 = private unnamed_addr constant [23 x i8] c"__builtin_ia32_clflush\00", align 1
@.str.485 = private unnamed_addr constant [22 x i8] c"__builtin_ia32_mfence\00", align 1
@.str.486 = private unnamed_addr constant [23 x i8] c"__builtin_ia32_monitor\00", align 1
@.str.487 = private unnamed_addr constant [21 x i8] c"__builtin_ia32_mwait\00", align 1
@.str.488 = private unnamed_addr constant [25 x i8] c"__builtin_ia32_aesenc128\00", align 1
@.str.489 = private unnamed_addr constant [29 x i8] c"__builtin_ia32_aesenclast128\00", align 1
@.str.490 = private unnamed_addr constant [25 x i8] c"__builtin_ia32_aesdec128\00", align 1
@.str.491 = private unnamed_addr constant [29 x i8] c"__builtin_ia32_aesdeclast128\00", align 1
@.str.492 = private unnamed_addr constant [25 x i8] c"__builtin_ia32_aesimc128\00", align 1
@.str.493 = private unnamed_addr constant [34 x i8] c"__builtin_ia32_aeskeygenassist128\00", align 1
@.str.494 = private unnamed_addr constant [28 x i8] c"__builtin_ia32_pclmulqdq128\00", align 1
@.str.495 = private unnamed_addr constant [29 x i8] c"__builtin_ia32_vec_init_v2si\00", align 1
@.str.496 = private unnamed_addr constant [29 x i8] c"__builtin_ia32_vec_init_v4hi\00", align 1
@.str.497 = private unnamed_addr constant [29 x i8] c"__builtin_ia32_vec_init_v8qi\00", align 1
@.str.498 = private unnamed_addr constant [28 x i8] c"__builtin_ia32_vec_ext_v2df\00", align 1
@.str.499 = private unnamed_addr constant [28 x i8] c"__builtin_ia32_vec_ext_v2di\00", align 1
@.str.500 = private unnamed_addr constant [28 x i8] c"__builtin_ia32_vec_ext_v4sf\00", align 1
@.str.501 = private unnamed_addr constant [28 x i8] c"__builtin_ia32_vec_ext_v4si\00", align 1
@.str.502 = private unnamed_addr constant [28 x i8] c"__builtin_ia32_vec_ext_v8hi\00", align 1
@.str.503 = private unnamed_addr constant [28 x i8] c"__builtin_ia32_vec_ext_v4hi\00", align 1
@.str.504 = private unnamed_addr constant [28 x i8] c"__builtin_ia32_vec_ext_v2si\00", align 1
@.str.505 = private unnamed_addr constant [29 x i8] c"__builtin_ia32_vec_ext_v16qi\00", align 1
@.str.507 = private unnamed_addr constant [28 x i8] c"__builtin_ia32_vec_set_v4sf\00", align 1
@.str.508 = private unnamed_addr constant [28 x i8] c"__builtin_ia32_vec_set_v4si\00", align 1
@.str.509 = private unnamed_addr constant [28 x i8] c"__builtin_ia32_vec_set_v8hi\00", align 1
@.str.510 = private unnamed_addr constant [28 x i8] c"__builtin_ia32_vec_set_v4hi\00", align 1
@.str.511 = private unnamed_addr constant [29 x i8] c"__builtin_ia32_vec_set_v16qi\00", align 1
@bdesc_multi_arg = internal unnamed_addr constant [172 x %struct.builtin_description] [%struct.builtin_description { i32 512, i32 1105, ptr @.str.1112, i32 634, i32 0, i32 197 }, %struct.builtin_description { i32 512, i32 1106, ptr @.str.1113, i32 635, i32 0, i32 182 }, %struct.builtin_description { i32 512, i32 1097, ptr @.str.1114, i32 636, i32 0, i32 197 }, %struct.builtin_description { i32 512, i32 1098, ptr @.str.1115, i32 637, i32 0, i32 182 }, %struct.builtin_description { i32 512, i32 1107, ptr @.str.1116, i32 638, i32 0, i32 197 }, %struct.builtin_description { i32 512, i32 1108, ptr @.str.1117, i32 639, i32 0, i32 182 }, %struct.builtin_description { i32 512, i32 1099, ptr @.str.1118, i32 640, i32 0, i32 197 }, %struct.builtin_description { i32 512, i32 1100, ptr @.str.1119, i32 641, i32 0, i32 182 }, %struct.builtin_description { i32 512, i32 1109, ptr @.str.1120, i32 646, i32 0, i32 197 }, %struct.builtin_description { i32 512, i32 1110, ptr @.str.1121, i32 647, i32 0, i32 182 }, %struct.builtin_description { i32 512, i32 1101, ptr @.str.1122, i32 648, i32 0, i32 197 }, %struct.builtin_description { i32 512, i32 1102, ptr @.str.1123, i32 649, i32 0, i32 182 }, %struct.builtin_description { i32 512, i32 1111, ptr @.str.1124, i32 650, i32 0, i32 197 }, %struct.builtin_description { i32 512, i32 1112, ptr @.str.1125, i32 651, i32 0, i32 182 }, %struct.builtin_description { i32 512, i32 1103, ptr @.str.1126, i32 652, i32 0, i32 197 }, %struct.builtin_description { i32 512, i32 1104, ptr @.str.1127, i32 653, i32 0, i32 182 }, %struct.builtin_description { i32 512, i32 1123, ptr @.str.1128, i32 642, i32 0, i32 197 }, %struct.builtin_description { i32 512, i32 1124, ptr @.str.1129, i32 643, i32 0, i32 182 }, %struct.builtin_description { i32 512, i32 1127, ptr @.str.1130, i32 644, i32 0, i32 197 }, %struct.builtin_description { i32 512, i32 1128, ptr @.str.1131, i32 645, i32 0, i32 182 }, %struct.builtin_description { i32 512, i32 1089, ptr @.str.1132, i32 654, i32 0, i32 209 }, %struct.builtin_description { i32 512, i32 1090, ptr @.str.1133, i32 655, i32 0, i32 191 }, %struct.builtin_description { i32 512, i32 1091, ptr @.str.1134, i32 656, i32 0, i32 209 }, %struct.builtin_description { i32 512, i32 1092, ptr @.str.1135, i32 657, i32 0, i32 191 }, %struct.builtin_description { i32 512, i32 1093, ptr @.str.1136, i32 662, i32 0, i32 209 }, %struct.builtin_description { i32 512, i32 1094, ptr @.str.1137, i32 663, i32 0, i32 191 }, %struct.builtin_description { i32 512, i32 1095, ptr @.str.1138, i32 664, i32 0, i32 209 }, %struct.builtin_description { i32 512, i32 1096, ptr @.str.1139, i32 665, i32 0, i32 191 }, %struct.builtin_description { i32 512, i32 1121, ptr @.str.1140, i32 658, i32 0, i32 209 }, %struct.builtin_description { i32 512, i32 1122, ptr @.str.1141, i32 659, i32 0, i32 191 }, %struct.builtin_description { i32 512, i32 1125, ptr @.str.1142, i32 660, i32 0, i32 209 }, %struct.builtin_description { i32 512, i32 1126, ptr @.str.1143, i32 661, i32 0, i32 191 }, %struct.builtin_description { i32 8388608, i32 1657, ptr @.str.1144, i32 666, i32 0, i32 187 }, %struct.builtin_description { i32 8388608, i32 1657, ptr @.str.1145, i32 667, i32 0, i32 187 }, %struct.builtin_description { i32 8388608, i32 1656, ptr @.str.1146, i32 668, i32 0, i32 202 }, %struct.builtin_description { i32 8388608, i32 1655, ptr @.str.1147, i32 669, i32 0, i32 206 }, %struct.builtin_description { i32 8388608, i32 1654, ptr @.str.1148, i32 670, i32 0, i32 179 }, %struct.builtin_description { i32 8388608, i32 1659, ptr @.str.1149, i32 672, i32 0, i32 182 }, %struct.builtin_description { i32 8388608, i32 1658, ptr @.str.1150, i32 671, i32 0, i32 197 }, %struct.builtin_description { i32 8388608, i32 1663, ptr @.str.1151, i32 673, i32 0, i32 193 }, %struct.builtin_description { i32 8388608, i32 1663, ptr @.str.1152, i32 674, i32 0, i32 193 }, %struct.builtin_description { i32 8388608, i32 1662, ptr @.str.1153, i32 675, i32 0, i32 213 }, %struct.builtin_description { i32 8388608, i32 1661, ptr @.str.1154, i32 676, i32 0, i32 176 }, %struct.builtin_description { i32 8388608, i32 1660, ptr @.str.1155, i32 677, i32 0, i32 188 }, %struct.builtin_description { i32 8388608, i32 1665, ptr @.str.1156, i32 679, i32 0, i32 191 }, %struct.builtin_description { i32 8388608, i32 1664, ptr @.str.1157, i32 678, i32 0, i32 209 }, %struct.builtin_description { i32 8388608, i32 1681, ptr @.str.1158, i32 680, i32 0, i32 179 }, %struct.builtin_description { i32 8388608, i32 1641, ptr @.str.1159, i32 681, i32 0, i32 206 }, %struct.builtin_description { i32 8388608, i32 1640, ptr @.str.1160, i32 682, i32 0, i32 206 }, %struct.builtin_description { i32 8388608, i32 1650, ptr @.str.1161, i32 683, i32 0, i32 205 }, %struct.builtin_description { i32 8388608, i32 1651, ptr @.str.1162, i32 684, i32 0, i32 205 }, %struct.builtin_description { i32 8388608, i32 1643, ptr @.str.1163, i32 685, i32 0, i32 202 }, %struct.builtin_description { i32 8388608, i32 1642, ptr @.str.1164, i32 686, i32 0, i32 202 }, %struct.builtin_description { i32 8388608, i32 1644, ptr @.str.1165, i32 687, i32 0, i32 201 }, %struct.builtin_description { i32 8388608, i32 1645, ptr @.str.1166, i32 688, i32 0, i32 201 }, %struct.builtin_description { i32 8388608, i32 1646, ptr @.str.1167, i32 689, i32 0, i32 201 }, %struct.builtin_description { i32 8388608, i32 1648, ptr @.str.1168, i32 690, i32 0, i32 201 }, %struct.builtin_description { i32 8388608, i32 1652, ptr @.str.1169, i32 691, i32 0, i32 205 }, %struct.builtin_description { i32 8388608, i32 1653, ptr @.str.1170, i32 692, i32 0, i32 205 }, %struct.builtin_description { i32 8388608, i32 1696, ptr @.str.1171, i32 711, i32 0, i32 116 }, %struct.builtin_description { i32 8388608, i32 1695, ptr @.str.1172, i32 710, i32 0, i32 147 }, %struct.builtin_description { i32 8388608, i32 1694, ptr @.str.1173, i32 709, i32 0, i32 154 }, %struct.builtin_description { i32 8388608, i32 1693, ptr @.str.1174, i32 708, i32 0, i32 96 }, %struct.builtin_description { i32 8388608, i32 1688, ptr @.str.1175, i32 715, i32 0, i32 114 }, %struct.builtin_description { i32 8388608, i32 1687, ptr @.str.1176, i32 714, i32 0, i32 146 }, %struct.builtin_description { i32 8388608, i32 1686, ptr @.str.1177, i32 713, i32 0, i32 153 }, %struct.builtin_description { i32 8388608, i32 1685, ptr @.str.1178, i32 712, i32 0, i32 95 }, %struct.builtin_description { i32 8388608, i32 1700, ptr @.str.1179, i32 723, i32 0, i32 116 }, %struct.builtin_description { i32 8388608, i32 1699, ptr @.str.1180, i32 722, i32 0, i32 147 }, %struct.builtin_description { i32 8388608, i32 1698, ptr @.str.1181, i32 721, i32 0, i32 154 }, %struct.builtin_description { i32 8388608, i32 1697, ptr @.str.1182, i32 720, i32 0, i32 96 }, %struct.builtin_description { i32 8388608, i32 1704, ptr @.str.1183, i32 719, i32 0, i32 116 }, %struct.builtin_description { i32 8388608, i32 1703, ptr @.str.1184, i32 718, i32 0, i32 147 }, %struct.builtin_description { i32 8388608, i32 1702, ptr @.str.1185, i32 717, i32 0, i32 154 }, %struct.builtin_description { i32 8388608, i32 1701, ptr @.str.1186, i32 716, i32 0, i32 96 }, %struct.builtin_description { i32 8388608, i32 1707, ptr @.str.1187, i32 724, i32 0, i32 140 }, %struct.builtin_description { i32 8388608, i32 1708, ptr @.str.1188, i32 725, i32 0, i32 107 }, %struct.builtin_description { i32 8388608, i32 1705, ptr @.str.1189, i32 726, i32 0, i32 50 }, %struct.builtin_description { i32 8388608, i32 1706, ptr @.str.1190, i32 727, i32 0, i32 23 }, %struct.builtin_description { i32 8388608, i32 1709, ptr @.str.1191, i32 728, i32 0, i32 66 }, %struct.builtin_description { i32 8388608, i32 1710, ptr @.str.1192, i32 729, i32 0, i32 43 }, %struct.builtin_description { i32 8388608, i32 1666, ptr @.str.1193, i32 693, i32 0, i32 60 }, %struct.builtin_description { i32 8388608, i32 1667, ptr @.str.1194, i32 694, i32 0, i32 53 }, %struct.builtin_description { i32 8388608, i32 1668, ptr @.str.1195, i32 695, i32 0, i32 29 }, %struct.builtin_description { i32 8388608, i32 1669, ptr @.str.1196, i32 696, i32 0, i32 58 }, %struct.builtin_description { i32 8388608, i32 1670, ptr @.str.1197, i32 697, i32 0, i32 32 }, %struct.builtin_description { i32 8388608, i32 1671, ptr @.str.1198, i32 698, i32 0, i32 31 }, %struct.builtin_description { i32 8388608, i32 1672, ptr @.str.1199, i32 699, i32 0, i32 60 }, %struct.builtin_description { i32 8388608, i32 1673, ptr @.str.1200, i32 700, i32 0, i32 53 }, %struct.builtin_description { i32 8388608, i32 1674, ptr @.str.1201, i32 701, i32 0, i32 29 }, %struct.builtin_description { i32 8388608, i32 1675, ptr @.str.1202, i32 702, i32 0, i32 58 }, %struct.builtin_description { i32 8388608, i32 1676, ptr @.str.1203, i32 703, i32 0, i32 32 }, %struct.builtin_description { i32 8388608, i32 1677, ptr @.str.1204, i32 704, i32 0, i32 31 }, %struct.builtin_description { i32 8388608, i32 1678, ptr @.str.1205, i32 705, i32 0, i32 60 }, %struct.builtin_description { i32 8388608, i32 1679, ptr @.str.1206, i32 706, i32 0, i32 58 }, %struct.builtin_description { i32 8388608, i32 1680, ptr @.str.1207, i32 707, i32 0, i32 31 }, %struct.builtin_description { i32 8388608, i32 1711, ptr @.str.1208, i32 762, i32 81, i32 261 }, %struct.builtin_description { i32 8388608, i32 1711, ptr @.str.1209, i32 763, i32 80, i32 261 }, %struct.builtin_description { i32 8388608, i32 1711, ptr @.str.1210, i32 763, i32 80, i32 261 }, %struct.builtin_description { i32 8388608, i32 1711, ptr @.str.1211, i32 764, i32 85, i32 261 }, %struct.builtin_description { i32 8388608, i32 1711, ptr @.str.1212, i32 765, i32 84, i32 261 }, %struct.builtin_description { i32 8388608, i32 1711, ptr @.str.1213, i32 766, i32 83, i32 261 }, %struct.builtin_description { i32 8388608, i32 1711, ptr @.str.1214, i32 767, i32 82, i32 261 }, %struct.builtin_description { i32 8388608, i32 1712, ptr @.str.1215, i32 770, i32 81, i32 264 }, %struct.builtin_description { i32 8388608, i32 1712, ptr @.str.1216, i32 771, i32 80, i32 264 }, %struct.builtin_description { i32 8388608, i32 1712, ptr @.str.1217, i32 771, i32 80, i32 264 }, %struct.builtin_description { i32 8388608, i32 1712, ptr @.str.1218, i32 772, i32 85, i32 264 }, %struct.builtin_description { i32 8388608, i32 1712, ptr @.str.1219, i32 773, i32 84, i32 264 }, %struct.builtin_description { i32 8388608, i32 1712, ptr @.str.1220, i32 774, i32 83, i32 264 }, %struct.builtin_description { i32 8388608, i32 1712, ptr @.str.1221, i32 775, i32 82, i32 264 }, %struct.builtin_description { i32 8388608, i32 1713, ptr @.str.1222, i32 778, i32 81, i32 263 }, %struct.builtin_description { i32 8388608, i32 1713, ptr @.str.1223, i32 779, i32 80, i32 263 }, %struct.builtin_description { i32 8388608, i32 1713, ptr @.str.1224, i32 779, i32 80, i32 263 }, %struct.builtin_description { i32 8388608, i32 1713, ptr @.str.1225, i32 780, i32 85, i32 263 }, %struct.builtin_description { i32 8388608, i32 1713, ptr @.str.1226, i32 781, i32 84, i32 263 }, %struct.builtin_description { i32 8388608, i32 1713, ptr @.str.1227, i32 782, i32 83, i32 263 }, %struct.builtin_description { i32 8388608, i32 1713, ptr @.str.1228, i32 783, i32 82, i32 263 }, %struct.builtin_description { i32 8388608, i32 1714, ptr @.str.1229, i32 786, i32 81, i32 262 }, %struct.builtin_description { i32 8388608, i32 1714, ptr @.str.1230, i32 787, i32 80, i32 262 }, %struct.builtin_description { i32 8388608, i32 1714, ptr @.str.1231, i32 787, i32 80, i32 262 }, %struct.builtin_description { i32 8388608, i32 1714, ptr @.str.1232, i32 788, i32 85, i32 262 }, %struct.builtin_description { i32 8388608, i32 1714, ptr @.str.1233, i32 789, i32 84, i32 262 }, %struct.builtin_description { i32 8388608, i32 1714, ptr @.str.1234, i32 790, i32 83, i32 262 }, %struct.builtin_description { i32 8388608, i32 1714, ptr @.str.1235, i32 791, i32 82, i32 262 }, %struct.builtin_description { i32 8388608, i32 1719, ptr @.str.1236, i32 730, i32 81, i32 261 }, %struct.builtin_description { i32 8388608, i32 1719, ptr @.str.1237, i32 731, i32 80, i32 261 }, %struct.builtin_description { i32 8388608, i32 1719, ptr @.str.1238, i32 731, i32 80, i32 261 }, %struct.builtin_description { i32 8388608, i32 1715, ptr @.str.1239, i32 732, i32 89, i32 261 }, %struct.builtin_description { i32 8388608, i32 1715, ptr @.str.1240, i32 733, i32 88, i32 261 }, %struct.builtin_description { i32 8388608, i32 1715, ptr @.str.1241, i32 734, i32 87, i32 261 }, %struct.builtin_description { i32 8388608, i32 1715, ptr @.str.1242, i32 735, i32 86, i32 261 }, %struct.builtin_description { i32 8388608, i32 1720, ptr @.str.1243, i32 738, i32 81, i32 264 }, %struct.builtin_description { i32 8388608, i32 1720, ptr @.str.1244, i32 739, i32 80, i32 264 }, %struct.builtin_description { i32 8388608, i32 1720, ptr @.str.1245, i32 739, i32 80, i32 264 }, %struct.builtin_description { i32 8388608, i32 1716, ptr @.str.1246, i32 740, i32 89, i32 264 }, %struct.builtin_description { i32 8388608, i32 1716, ptr @.str.1247, i32 741, i32 88, i32 264 }, %struct.builtin_description { i32 8388608, i32 1716, ptr @.str.1248, i32 742, i32 87, i32 264 }, %struct.builtin_description { i32 8388608, i32 1716, ptr @.str.1249, i32 743, i32 86, i32 264 }, %struct.builtin_description { i32 8388608, i32 1721, ptr @.str.1250, i32 746, i32 81, i32 263 }, %struct.builtin_description { i32 8388608, i32 1721, ptr @.str.1251, i32 747, i32 80, i32 263 }, %struct.builtin_description { i32 8388608, i32 1721, ptr @.str.1252, i32 747, i32 80, i32 263 }, %struct.builtin_description { i32 8388608, i32 1717, ptr @.str.1253, i32 748, i32 89, i32 263 }, %struct.builtin_description { i32 8388608, i32 1717, ptr @.str.1254, i32 749, i32 88, i32 263 }, %struct.builtin_description { i32 8388608, i32 1717, ptr @.str.1255, i32 750, i32 87, i32 263 }, %struct.builtin_description { i32 8388608, i32 1717, ptr @.str.1256, i32 751, i32 86, i32 263 }, %struct.builtin_description { i32 8388608, i32 1722, ptr @.str.1257, i32 754, i32 81, i32 262 }, %struct.builtin_description { i32 8388608, i32 1722, ptr @.str.1258, i32 755, i32 80, i32 262 }, %struct.builtin_description { i32 8388608, i32 1722, ptr @.str.1259, i32 755, i32 80, i32 262 }, %struct.builtin_description { i32 8388608, i32 1718, ptr @.str.1260, i32 756, i32 89, i32 262 }, %struct.builtin_description { i32 8388608, i32 1718, ptr @.str.1261, i32 757, i32 88, i32 262 }, %struct.builtin_description { i32 8388608, i32 1718, ptr @.str.1262, i32 758, i32 87, i32 262 }, %struct.builtin_description { i32 8388608, i32 1718, ptr @.str.1263, i32 759, i32 86, i32 262 }, %struct.builtin_description { i32 8388608, i32 1723, ptr @.str.1264, i32 768, i32 0, i32 265 }, %struct.builtin_description { i32 8388608, i32 1724, ptr @.str.1265, i32 776, i32 0, i32 270 }, %struct.builtin_description { i32 8388608, i32 1725, ptr @.str.1266, i32 784, i32 0, i32 269 }, %struct.builtin_description { i32 8388608, i32 1726, ptr @.str.1267, i32 792, i32 0, i32 267 }, %struct.builtin_description { i32 8388608, i32 1723, ptr @.str.1268, i32 736, i32 0, i32 265 }, %struct.builtin_description { i32 8388608, i32 1724, ptr @.str.1269, i32 744, i32 0, i32 270 }, %struct.builtin_description { i32 8388608, i32 1725, ptr @.str.1270, i32 752, i32 0, i32 269 }, %struct.builtin_description { i32 8388608, i32 1726, ptr @.str.1271, i32 760, i32 0, i32 267 }, %struct.builtin_description { i32 8388608, i32 1723, ptr @.str.1272, i32 769, i32 1, i32 265 }, %struct.builtin_description { i32 8388608, i32 1724, ptr @.str.1273, i32 777, i32 1, i32 270 }, %struct.builtin_description { i32 8388608, i32 1725, ptr @.str.1274, i32 785, i32 1, i32 269 }, %struct.builtin_description { i32 8388608, i32 1726, ptr @.str.1275, i32 793, i32 1, i32 267 }, %struct.builtin_description { i32 8388608, i32 1723, ptr @.str.1276, i32 737, i32 1, i32 265 }, %struct.builtin_description { i32 8388608, i32 1724, ptr @.str.1277, i32 745, i32 1, i32 270 }, %struct.builtin_description { i32 8388608, i32 1725, ptr @.str.1278, i32 753, i32 1, i32 269 }, %struct.builtin_description { i32 8388608, i32 1726, ptr @.str.1279, i32 761, i32 1, i32 267 }, %struct.builtin_description { i32 8388608, i32 1728, ptr @.str.1280, i32 544, i32 0, i32 183 }, %struct.builtin_description { i32 8388608, i32 1727, ptr @.str.1281, i32 545, i32 0, i32 198 }, %struct.builtin_description { i32 8388608, i32 1730, ptr @.str.1282, i32 546, i32 0, i32 192 }, %struct.builtin_description { i32 8388608, i32 1729, ptr @.str.1283, i32 547, i32 0, i32 210 }], align 16
@.str.512 = private unnamed_addr constant [21 x i8] c"__builtin_ia32_rdtsc\00", align 1
@.str.513 = private unnamed_addr constant [22 x i8] c"__builtin_ia32_rdtscp\00", align 1
@.str.514 = private unnamed_addr constant [20 x i8] c"__builtin_ia32_emms\00", align 1
@.str.515 = private unnamed_addr constant [21 x i8] c"__builtin_ia32_femms\00", align 1
@.str.516 = private unnamed_addr constant [24 x i8] c"__builtin_ia32_storeups\00", align 1
@.str.517 = private unnamed_addr constant [23 x i8] c"__builtin_ia32_movntps\00", align 1
@.str.518 = private unnamed_addr constant [23 x i8] c"__builtin_ia32_loadups\00", align 1
@.str.519 = private unnamed_addr constant [23 x i8] c"__builtin_ia32_loadhps\00", align 1
@.str.520 = private unnamed_addr constant [23 x i8] c"__builtin_ia32_loadlps\00", align 1
@.str.521 = private unnamed_addr constant [24 x i8] c"__builtin_ia32_storehps\00", align 1
@.str.522 = private unnamed_addr constant [24 x i8] c"__builtin_ia32_storelps\00", align 1
@.str.523 = private unnamed_addr constant [22 x i8] c"__builtin_ia32_sfence\00", align 1
@.str.524 = private unnamed_addr constant [22 x i8] c"__builtin_ia32_movntq\00", align 1
@.str.525 = private unnamed_addr constant [22 x i8] c"__builtin_ia32_lfence\00", align 1
@.str.526 = private unnamed_addr constant [24 x i8] c"__builtin_ia32_storeupd\00", align 1
@.str.527 = private unnamed_addr constant [24 x i8] c"__builtin_ia32_storedqu\00", align 1
@.str.528 = private unnamed_addr constant [23 x i8] c"__builtin_ia32_movntpd\00", align 1
@.str.529 = private unnamed_addr constant [23 x i8] c"__builtin_ia32_movntdq\00", align 1
@.str.530 = private unnamed_addr constant [22 x i8] c"__builtin_ia32_movnti\00", align 1
@.str.531 = private unnamed_addr constant [23 x i8] c"__builtin_ia32_loadupd\00", align 1
@.str.532 = private unnamed_addr constant [23 x i8] c"__builtin_ia32_loaddqu\00", align 1
@.str.533 = private unnamed_addr constant [23 x i8] c"__builtin_ia32_loadhpd\00", align 1
@.str.534 = private unnamed_addr constant [23 x i8] c"__builtin_ia32_loadlpd\00", align 1
@.str.535 = private unnamed_addr constant [21 x i8] c"__builtin_ia32_lddqu\00", align 1
@.str.536 = private unnamed_addr constant [24 x i8] c"__builtin_ia32_movntdqa\00", align 1
@.str.537 = private unnamed_addr constant [23 x i8] c"__builtin_ia32_movntsd\00", align 1
@.str.538 = private unnamed_addr constant [23 x i8] c"__builtin_ia32_movntss\00", align 1
@.str.539 = private unnamed_addr constant [24 x i8] c"__builtin_ia32_vzeroall\00", align 1
@.str.540 = private unnamed_addr constant [26 x i8] c"__builtin_ia32_vzeroupper\00", align 1
@.str.541 = private unnamed_addr constant [28 x i8] c"__builtin_ia32_vbroadcastss\00", align 1
@.str.542 = private unnamed_addr constant [31 x i8] c"__builtin_ia32_vbroadcastsd256\00", align 1
@.str.543 = private unnamed_addr constant [31 x i8] c"__builtin_ia32_vbroadcastss256\00", align 1
@.str.544 = private unnamed_addr constant [36 x i8] c"__builtin_ia32_vbroadcastf128_pd256\00", align 1
@.str.545 = private unnamed_addr constant [36 x i8] c"__builtin_ia32_vbroadcastf128_ps256\00", align 1
@.str.546 = private unnamed_addr constant [26 x i8] c"__builtin_ia32_loadupd256\00", align 1
@.str.547 = private unnamed_addr constant [26 x i8] c"__builtin_ia32_loadups256\00", align 1
@.str.548 = private unnamed_addr constant [27 x i8] c"__builtin_ia32_storeupd256\00", align 1
@.str.549 = private unnamed_addr constant [27 x i8] c"__builtin_ia32_storeups256\00", align 1
@.str.550 = private unnamed_addr constant [26 x i8] c"__builtin_ia32_loaddqu256\00", align 1
@.str.551 = private unnamed_addr constant [27 x i8] c"__builtin_ia32_storedqu256\00", align 1
@.str.552 = private unnamed_addr constant [24 x i8] c"__builtin_ia32_lddqu256\00", align 1
@.str.553 = private unnamed_addr constant [26 x i8] c"__builtin_ia32_movntdq256\00", align 1
@.str.554 = private unnamed_addr constant [26 x i8] c"__builtin_ia32_movntpd256\00", align 1
@.str.555 = private unnamed_addr constant [26 x i8] c"__builtin_ia32_movntps256\00", align 1
@.str.556 = private unnamed_addr constant [26 x i8] c"__builtin_ia32_maskloadpd\00", align 1
@.str.557 = private unnamed_addr constant [26 x i8] c"__builtin_ia32_maskloadps\00", align 1
@.str.558 = private unnamed_addr constant [29 x i8] c"__builtin_ia32_maskloadpd256\00", align 1
@.str.559 = private unnamed_addr constant [29 x i8] c"__builtin_ia32_maskloadps256\00", align 1
@.str.560 = private unnamed_addr constant [27 x i8] c"__builtin_ia32_maskstorepd\00", align 1
@.str.561 = private unnamed_addr constant [27 x i8] c"__builtin_ia32_maskstoreps\00", align 1
@.str.562 = private unnamed_addr constant [30 x i8] c"__builtin_ia32_maskstorepd256\00", align 1
@.str.563 = private unnamed_addr constant [30 x i8] c"__builtin_ia32_maskstoreps256\00", align 1
@.str.564 = private unnamed_addr constant [22 x i8] c"__builtin_ia32_llwpcb\00", align 1
@.str.565 = private unnamed_addr constant [22 x i8] c"__builtin_ia32_slwpcb\00", align 1
@.str.566 = private unnamed_addr constant [24 x i8] c"__builtin_ia32_lwpval32\00", align 1
@.str.567 = private unnamed_addr constant [24 x i8] c"__builtin_ia32_lwpval64\00", align 1
@.str.568 = private unnamed_addr constant [24 x i8] c"__builtin_ia32_lwpins32\00", align 1
@.str.569 = private unnamed_addr constant [24 x i8] c"__builtin_ia32_lwpins64\00", align 1
@.str.570 = private unnamed_addr constant [21 x i8] c"__builtin_ia32_bsrsi\00", align 1
@.str.571 = private unnamed_addr constant [21 x i8] c"__builtin_ia32_bsrdi\00", align 1
@.str.572 = private unnamed_addr constant [21 x i8] c"__builtin_ia32_rdpmc\00", align 1
@.str.573 = private unnamed_addr constant [21 x i8] c"__builtin_ia32_rolqi\00", align 1
@.str.574 = private unnamed_addr constant [21 x i8] c"__builtin_ia32_rolhi\00", align 1
@.str.575 = private unnamed_addr constant [21 x i8] c"__builtin_ia32_rorqi\00", align 1
@.str.576 = private unnamed_addr constant [21 x i8] c"__builtin_ia32_rorhi\00", align 1
@.str.577 = private unnamed_addr constant [21 x i8] c"__builtin_ia32_paddb\00", align 1
@.str.578 = private unnamed_addr constant [21 x i8] c"__builtin_ia32_paddw\00", align 1
@.str.579 = private unnamed_addr constant [21 x i8] c"__builtin_ia32_paddd\00", align 1
@.str.580 = private unnamed_addr constant [21 x i8] c"__builtin_ia32_psubb\00", align 1
@.str.581 = private unnamed_addr constant [21 x i8] c"__builtin_ia32_psubw\00", align 1
@.str.582 = private unnamed_addr constant [21 x i8] c"__builtin_ia32_psubd\00", align 1
@.str.583 = private unnamed_addr constant [22 x i8] c"__builtin_ia32_paddsb\00", align 1
@.str.584 = private unnamed_addr constant [22 x i8] c"__builtin_ia32_paddsw\00", align 1
@.str.585 = private unnamed_addr constant [22 x i8] c"__builtin_ia32_psubsb\00", align 1
@.str.586 = private unnamed_addr constant [22 x i8] c"__builtin_ia32_psubsw\00", align 1
@.str.587 = private unnamed_addr constant [23 x i8] c"__builtin_ia32_paddusb\00", align 1
@.str.588 = private unnamed_addr constant [23 x i8] c"__builtin_ia32_paddusw\00", align 1
@.str.589 = private unnamed_addr constant [23 x i8] c"__builtin_ia32_psubusb\00", align 1
@.str.590 = private unnamed_addr constant [23 x i8] c"__builtin_ia32_psubusw\00", align 1
@.str.591 = private unnamed_addr constant [22 x i8] c"__builtin_ia32_pmullw\00", align 1
@.str.592 = private unnamed_addr constant [22 x i8] c"__builtin_ia32_pmulhw\00", align 1
@.str.593 = private unnamed_addr constant [20 x i8] c"__builtin_ia32_pand\00", align 1
@.str.594 = private unnamed_addr constant [21 x i8] c"__builtin_ia32_pandn\00", align 1
@.str.595 = private unnamed_addr constant [19 x i8] c"__builtin_ia32_por\00", align 1
@.str.596 = private unnamed_addr constant [20 x i8] c"__builtin_ia32_pxor\00", align 1
@.str.597 = private unnamed_addr constant [23 x i8] c"__builtin_ia32_pcmpeqb\00", align 1
@.str.598 = private unnamed_addr constant [23 x i8] c"__builtin_ia32_pcmpeqw\00", align 1
@.str.599 = private unnamed_addr constant [23 x i8] c"__builtin_ia32_pcmpeqd\00", align 1
@.str.600 = private unnamed_addr constant [23 x i8] c"__builtin_ia32_pcmpgtb\00", align 1
@.str.601 = private unnamed_addr constant [23 x i8] c"__builtin_ia32_pcmpgtw\00", align 1
@.str.602 = private unnamed_addr constant [23 x i8] c"__builtin_ia32_pcmpgtd\00", align 1
@.str.603 = private unnamed_addr constant [25 x i8] c"__builtin_ia32_punpckhbw\00", align 1
@.str.604 = private unnamed_addr constant [25 x i8] c"__builtin_ia32_punpckhwd\00", align 1
@.str.605 = private unnamed_addr constant [25 x i8] c"__builtin_ia32_punpckhdq\00", align 1
@.str.606 = private unnamed_addr constant [25 x i8] c"__builtin_ia32_punpcklbw\00", align 1
@.str.607 = private unnamed_addr constant [25 x i8] c"__builtin_ia32_punpcklwd\00", align 1
@.str.608 = private unnamed_addr constant [25 x i8] c"__builtin_ia32_punpckldq\00", align 1
@.str.609 = private unnamed_addr constant [24 x i8] c"__builtin_ia32_packsswb\00", align 1
@.str.610 = private unnamed_addr constant [24 x i8] c"__builtin_ia32_packssdw\00", align 1
@.str.611 = private unnamed_addr constant [24 x i8] c"__builtin_ia32_packuswb\00", align 1
@.str.612 = private unnamed_addr constant [23 x i8] c"__builtin_ia32_pmaddwd\00", align 1
@.str.613 = private unnamed_addr constant [22 x i8] c"__builtin_ia32_psllwi\00", align 1
@.str.614 = private unnamed_addr constant [22 x i8] c"__builtin_ia32_pslldi\00", align 1
@.str.615 = private unnamed_addr constant [22 x i8] c"__builtin_ia32_psllqi\00", align 1
@.str.616 = private unnamed_addr constant [21 x i8] c"__builtin_ia32_psllw\00", align 1
@.str.617 = private unnamed_addr constant [21 x i8] c"__builtin_ia32_pslld\00", align 1
@.str.618 = private unnamed_addr constant [21 x i8] c"__builtin_ia32_psllq\00", align 1
@.str.619 = private unnamed_addr constant [22 x i8] c"__builtin_ia32_psrlwi\00", align 1
@.str.620 = private unnamed_addr constant [22 x i8] c"__builtin_ia32_psrldi\00", align 1
@.str.621 = private unnamed_addr constant [22 x i8] c"__builtin_ia32_psrlqi\00", align 1
@.str.622 = private unnamed_addr constant [21 x i8] c"__builtin_ia32_psrlw\00", align 1
@.str.623 = private unnamed_addr constant [21 x i8] c"__builtin_ia32_psrld\00", align 1
@.str.624 = private unnamed_addr constant [21 x i8] c"__builtin_ia32_psrlq\00", align 1
@.str.625 = private unnamed_addr constant [22 x i8] c"__builtin_ia32_psrawi\00", align 1
@.str.626 = private unnamed_addr constant [22 x i8] c"__builtin_ia32_psradi\00", align 1
@.str.627 = private unnamed_addr constant [21 x i8] c"__builtin_ia32_psraw\00", align 1
@.str.628 = private unnamed_addr constant [21 x i8] c"__builtin_ia32_psrad\00", align 1
@.str.629 = private unnamed_addr constant [21 x i8] c"__builtin_ia32_pf2id\00", align 1
@.str.630 = private unnamed_addr constant [21 x i8] c"__builtin_ia32_pi2fd\00", align 1
@.str.631 = private unnamed_addr constant [21 x i8] c"__builtin_ia32_pfrcp\00", align 1
@.str.632 = private unnamed_addr constant [23 x i8] c"__builtin_ia32_pfrsqrt\00", align 1
@.str.633 = private unnamed_addr constant [23 x i8] c"__builtin_ia32_pavgusb\00", align 1
@.str.634 = private unnamed_addr constant [21 x i8] c"__builtin_ia32_pfacc\00", align 1
@.str.635 = private unnamed_addr constant [21 x i8] c"__builtin_ia32_pfadd\00", align 1
@.str.636 = private unnamed_addr constant [23 x i8] c"__builtin_ia32_pfcmpeq\00", align 1
@.str.637 = private unnamed_addr constant [23 x i8] c"__builtin_ia32_pfcmpge\00", align 1
@.str.638 = private unnamed_addr constant [23 x i8] c"__builtin_ia32_pfcmpgt\00", align 1
@.str.639 = private unnamed_addr constant [21 x i8] c"__builtin_ia32_pfmax\00", align 1
@.str.640 = private unnamed_addr constant [21 x i8] c"__builtin_ia32_pfmin\00", align 1
@.str.641 = private unnamed_addr constant [21 x i8] c"__builtin_ia32_pfmul\00", align 1
@.str.642 = private unnamed_addr constant [24 x i8] c"__builtin_ia32_pfrcpit1\00", align 1
@.str.643 = private unnamed_addr constant [24 x i8] c"__builtin_ia32_pfrcpit2\00", align 1
@.str.644 = private unnamed_addr constant [24 x i8] c"__builtin_ia32_pfrsqit1\00", align 1
@.str.645 = private unnamed_addr constant [21 x i8] c"__builtin_ia32_pfsub\00", align 1
@.str.646 = private unnamed_addr constant [22 x i8] c"__builtin_ia32_pfsubr\00", align 1
@.str.647 = private unnamed_addr constant [23 x i8] c"__builtin_ia32_pmulhrw\00", align 1
@.str.648 = private unnamed_addr constant [21 x i8] c"__builtin_ia32_pf2iw\00", align 1
@.str.649 = private unnamed_addr constant [21 x i8] c"__builtin_ia32_pi2fw\00", align 1
@.str.650 = private unnamed_addr constant [24 x i8] c"__builtin_ia32_pswapdsi\00", align 1
@.str.651 = private unnamed_addr constant [24 x i8] c"__builtin_ia32_pswapdsf\00", align 1
@.str.652 = private unnamed_addr constant [22 x i8] c"__builtin_ia32_pfnacc\00", align 1
@.str.653 = private unnamed_addr constant [23 x i8] c"__builtin_ia32_pfpnacc\00", align 1
@.str.654 = private unnamed_addr constant [24 x i8] c"__builtin_ia32_movmskps\00", align 1
@.str.655 = private unnamed_addr constant [22 x i8] c"__builtin_ia32_sqrtps\00", align 1
@.str.656 = private unnamed_addr constant [25 x i8] c"__builtin_ia32_sqrtps_nr\00", align 1
@.str.657 = private unnamed_addr constant [23 x i8] c"__builtin_ia32_rsqrtps\00", align 1
@.str.658 = private unnamed_addr constant [26 x i8] c"__builtin_ia32_rsqrtps_nr\00", align 1
@.str.659 = private unnamed_addr constant [21 x i8] c"__builtin_ia32_rcpps\00", align 1
@.str.660 = private unnamed_addr constant [24 x i8] c"__builtin_ia32_cvtps2pi\00", align 1
@.str.661 = private unnamed_addr constant [24 x i8] c"__builtin_ia32_cvtss2si\00", align 1
@.str.662 = private unnamed_addr constant [26 x i8] c"__builtin_ia32_cvtss2si64\00", align 1
@.str.663 = private unnamed_addr constant [25 x i8] c"__builtin_ia32_cvttps2pi\00", align 1
@.str.664 = private unnamed_addr constant [25 x i8] c"__builtin_ia32_cvttss2si\00", align 1
@.str.665 = private unnamed_addr constant [27 x i8] c"__builtin_ia32_cvttss2si64\00", align 1
@.str.666 = private unnamed_addr constant [22 x i8] c"__builtin_ia32_shufps\00", align 1
@.str.667 = private unnamed_addr constant [21 x i8] c"__builtin_ia32_addps\00", align 1
@.str.668 = private unnamed_addr constant [21 x i8] c"__builtin_ia32_subps\00", align 1
@.str.669 = private unnamed_addr constant [21 x i8] c"__builtin_ia32_mulps\00", align 1
@.str.670 = private unnamed_addr constant [21 x i8] c"__builtin_ia32_divps\00", align 1
@.str.671 = private unnamed_addr constant [21 x i8] c"__builtin_ia32_addss\00", align 1
@.str.672 = private unnamed_addr constant [21 x i8] c"__builtin_ia32_subss\00", align 1
@.str.673 = private unnamed_addr constant [21 x i8] c"__builtin_ia32_mulss\00", align 1
@.str.674 = private unnamed_addr constant [21 x i8] c"__builtin_ia32_divss\00", align 1
@.str.675 = private unnamed_addr constant [23 x i8] c"__builtin_ia32_cmpeqps\00", align 1
@.str.676 = private unnamed_addr constant [23 x i8] c"__builtin_ia32_cmpltps\00", align 1
@.str.677 = private unnamed_addr constant [23 x i8] c"__builtin_ia32_cmpleps\00", align 1
@.str.678 = private unnamed_addr constant [23 x i8] c"__builtin_ia32_cmpgtps\00", align 1
@.str.679 = private unnamed_addr constant [23 x i8] c"__builtin_ia32_cmpgeps\00", align 1
@.str.680 = private unnamed_addr constant [26 x i8] c"__builtin_ia32_cmpunordps\00", align 1
@.str.681 = private unnamed_addr constant [24 x i8] c"__builtin_ia32_cmpneqps\00", align 1
@.str.682 = private unnamed_addr constant [24 x i8] c"__builtin_ia32_cmpnltps\00", align 1
@.str.683 = private unnamed_addr constant [24 x i8] c"__builtin_ia32_cmpnleps\00", align 1
@.str.684 = private unnamed_addr constant [24 x i8] c"__builtin_ia32_cmpngtps\00", align 1
@.str.685 = private unnamed_addr constant [24 x i8] c"__builtin_ia32_cmpngeps\00", align 1
@.str.686 = private unnamed_addr constant [24 x i8] c"__builtin_ia32_cmpordps\00", align 1
@.str.687 = private unnamed_addr constant [23 x i8] c"__builtin_ia32_cmpeqss\00", align 1
@.str.688 = private unnamed_addr constant [23 x i8] c"__builtin_ia32_cmpltss\00", align 1
@.str.689 = private unnamed_addr constant [23 x i8] c"__builtin_ia32_cmpless\00", align 1
@.str.690 = private unnamed_addr constant [26 x i8] c"__builtin_ia32_cmpunordss\00", align 1
@.str.691 = private unnamed_addr constant [24 x i8] c"__builtin_ia32_cmpneqss\00", align 1
@.str.692 = private unnamed_addr constant [24 x i8] c"__builtin_ia32_cmpnltss\00", align 1
@.str.693 = private unnamed_addr constant [24 x i8] c"__builtin_ia32_cmpnless\00", align 1
@.str.694 = private unnamed_addr constant [24 x i8] c"__builtin_ia32_cmpngtss\00", align 1
@.str.695 = private unnamed_addr constant [24 x i8] c"__builtin_ia32_cmpngess\00", align 1
@.str.696 = private unnamed_addr constant [24 x i8] c"__builtin_ia32_cmpordss\00", align 1
@.str.697 = private unnamed_addr constant [21 x i8] c"__builtin_ia32_minps\00", align 1
@.str.698 = private unnamed_addr constant [21 x i8] c"__builtin_ia32_maxps\00", align 1
@.str.699 = private unnamed_addr constant [21 x i8] c"__builtin_ia32_minss\00", align 1
@.str.700 = private unnamed_addr constant [21 x i8] c"__builtin_ia32_maxss\00", align 1
@.str.701 = private unnamed_addr constant [21 x i8] c"__builtin_ia32_andps\00", align 1
@.str.702 = private unnamed_addr constant [22 x i8] c"__builtin_ia32_andnps\00", align 1
@.str.703 = private unnamed_addr constant [20 x i8] c"__builtin_ia32_orps\00", align 1
@.str.704 = private unnamed_addr constant [21 x i8] c"__builtin_ia32_xorps\00", align 1
@.str.705 = private unnamed_addr constant [26 x i8] c"__builtin_ia32_copysignps\00", align 1
@.str.706 = private unnamed_addr constant [21 x i8] c"__builtin_ia32_movss\00", align 1
@.str.707 = private unnamed_addr constant [23 x i8] c"__builtin_ia32_movhlps\00", align 1
@.str.708 = private unnamed_addr constant [23 x i8] c"__builtin_ia32_movlhps\00", align 1
@.str.709 = private unnamed_addr constant [24 x i8] c"__builtin_ia32_unpckhps\00", align 1
@.str.710 = private unnamed_addr constant [24 x i8] c"__builtin_ia32_unpcklps\00", align 1
@.str.711 = private unnamed_addr constant [24 x i8] c"__builtin_ia32_cvtpi2ps\00", align 1
@.str.712 = private unnamed_addr constant [24 x i8] c"__builtin_ia32_cvtsi2ss\00", align 1
@.str.713 = private unnamed_addr constant [26 x i8] c"__builtin_ia32_cvtsi642ss\00", align 1
@.str.714 = private unnamed_addr constant [22 x i8] c"__builtin_ia32_rsqrtf\00", align 1
@.str.715 = private unnamed_addr constant [22 x i8] c"__builtin_ia32_sqrtss\00", align 1
@.str.716 = private unnamed_addr constant [23 x i8] c"__builtin_ia32_rsqrtss\00", align 1
@.str.717 = private unnamed_addr constant [21 x i8] c"__builtin_ia32_rcpss\00", align 1
@.str.718 = private unnamed_addr constant [21 x i8] c"__builtin_ia32_pavgb\00", align 1
@.str.719 = private unnamed_addr constant [21 x i8] c"__builtin_ia32_pavgw\00", align 1
@.str.720 = private unnamed_addr constant [23 x i8] c"__builtin_ia32_pmulhuw\00", align 1
@.str.721 = private unnamed_addr constant [22 x i8] c"__builtin_ia32_pmaxub\00", align 1
@.str.722 = private unnamed_addr constant [22 x i8] c"__builtin_ia32_pmaxsw\00", align 1
@.str.723 = private unnamed_addr constant [22 x i8] c"__builtin_ia32_pminub\00", align 1
@.str.724 = private unnamed_addr constant [22 x i8] c"__builtin_ia32_pminsw\00", align 1
@.str.725 = private unnamed_addr constant [22 x i8] c"__builtin_ia32_psadbw\00", align 1
@.str.726 = private unnamed_addr constant [24 x i8] c"__builtin_ia32_pmovmskb\00", align 1
@.str.727 = private unnamed_addr constant [22 x i8] c"__builtin_ia32_pshufw\00", align 1
@.str.728 = private unnamed_addr constant [22 x i8] c"__builtin_ia32_shufpd\00", align 1
@.str.729 = private unnamed_addr constant [29 x i8] c"__builtin_ia32_vec_perm_v2df\00", align 1
@.str.730 = private unnamed_addr constant [29 x i8] c"__builtin_ia32_vec_perm_v4sf\00", align 1
@.str.731 = private unnamed_addr constant [29 x i8] c"__builtin_ia32_vec_perm_v2di\00", align 1
@.str.732 = private unnamed_addr constant [29 x i8] c"__builtin_ia32_vec_perm_v4si\00", align 1
@.str.733 = private unnamed_addr constant [29 x i8] c"__builtin_ia32_vec_perm_v8hi\00", align 1
@.str.734 = private unnamed_addr constant [30 x i8] c"__builtin_ia32_vec_perm_v16qi\00", align 1
@.str.735 = private unnamed_addr constant [31 x i8] c"__builtin_ia32_vec_perm_v2di_u\00", align 1
@.str.736 = private unnamed_addr constant [31 x i8] c"__builtin_ia32_vec_perm_v4si_u\00", align 1
@.str.737 = private unnamed_addr constant [31 x i8] c"__builtin_ia32_vec_perm_v8hi_u\00", align 1
@.str.738 = private unnamed_addr constant [32 x i8] c"__builtin_ia32_vec_perm_v16qi_u\00", align 1
@.str.739 = private unnamed_addr constant [29 x i8] c"__builtin_ia32_vec_perm_v4df\00", align 1
@.str.740 = private unnamed_addr constant [29 x i8] c"__builtin_ia32_vec_perm_v8sf\00", align 1
@.str.741 = private unnamed_addr constant [24 x i8] c"__builtin_ia32_movmskpd\00", align 1
@.str.742 = private unnamed_addr constant [27 x i8] c"__builtin_ia32_pmovmskb128\00", align 1
@.str.743 = private unnamed_addr constant [22 x i8] c"__builtin_ia32_sqrtpd\00", align 1
@.str.744 = private unnamed_addr constant [24 x i8] c"__builtin_ia32_cvtdq2pd\00", align 1
@.str.745 = private unnamed_addr constant [24 x i8] c"__builtin_ia32_cvtdq2ps\00", align 1
@.str.746 = private unnamed_addr constant [25 x i8] c"__builtin_ia32_cvtudq2ps\00", align 1
@.str.747 = private unnamed_addr constant [24 x i8] c"__builtin_ia32_cvtpd2dq\00", align 1
@.str.748 = private unnamed_addr constant [24 x i8] c"__builtin_ia32_cvtpd2pi\00", align 1
@.str.749 = private unnamed_addr constant [24 x i8] c"__builtin_ia32_cvtpd2ps\00", align 1
@.str.750 = private unnamed_addr constant [25 x i8] c"__builtin_ia32_cvttpd2dq\00", align 1
@.str.751 = private unnamed_addr constant [25 x i8] c"__builtin_ia32_cvttpd2pi\00", align 1
@.str.752 = private unnamed_addr constant [24 x i8] c"__builtin_ia32_cvtpi2pd\00", align 1
@.str.753 = private unnamed_addr constant [24 x i8] c"__builtin_ia32_cvtsd2si\00", align 1
@.str.754 = private unnamed_addr constant [25 x i8] c"__builtin_ia32_cvttsd2si\00", align 1
@.str.755 = private unnamed_addr constant [26 x i8] c"__builtin_ia32_cvtsd2si64\00", align 1
@.str.756 = private unnamed_addr constant [27 x i8] c"__builtin_ia32_cvttsd2si64\00", align 1
@.str.757 = private unnamed_addr constant [24 x i8] c"__builtin_ia32_cvtps2dq\00", align 1
@.str.758 = private unnamed_addr constant [24 x i8] c"__builtin_ia32_cvtps2pd\00", align 1
@.str.759 = private unnamed_addr constant [25 x i8] c"__builtin_ia32_cvttps2dq\00", align 1
@.str.760 = private unnamed_addr constant [21 x i8] c"__builtin_ia32_addpd\00", align 1
@.str.761 = private unnamed_addr constant [21 x i8] c"__builtin_ia32_subpd\00", align 1
@.str.762 = private unnamed_addr constant [21 x i8] c"__builtin_ia32_mulpd\00", align 1
@.str.763 = private unnamed_addr constant [21 x i8] c"__builtin_ia32_divpd\00", align 1
@.str.764 = private unnamed_addr constant [21 x i8] c"__builtin_ia32_addsd\00", align 1
@.str.765 = private unnamed_addr constant [21 x i8] c"__builtin_ia32_subsd\00", align 1
@.str.766 = private unnamed_addr constant [21 x i8] c"__builtin_ia32_mulsd\00", align 1
@.str.767 = private unnamed_addr constant [21 x i8] c"__builtin_ia32_divsd\00", align 1
@.str.768 = private unnamed_addr constant [23 x i8] c"__builtin_ia32_cmpeqpd\00", align 1
@.str.769 = private unnamed_addr constant [23 x i8] c"__builtin_ia32_cmpltpd\00", align 1
@.str.770 = private unnamed_addr constant [23 x i8] c"__builtin_ia32_cmplepd\00", align 1
@.str.771 = private unnamed_addr constant [23 x i8] c"__builtin_ia32_cmpgtpd\00", align 1
@.str.772 = private unnamed_addr constant [23 x i8] c"__builtin_ia32_cmpgepd\00", align 1
@.str.773 = private unnamed_addr constant [26 x i8] c"__builtin_ia32_cmpunordpd\00", align 1
@.str.774 = private unnamed_addr constant [24 x i8] c"__builtin_ia32_cmpneqpd\00", align 1
@.str.775 = private unnamed_addr constant [24 x i8] c"__builtin_ia32_cmpnltpd\00", align 1
@.str.776 = private unnamed_addr constant [24 x i8] c"__builtin_ia32_cmpnlepd\00", align 1
@.str.777 = private unnamed_addr constant [24 x i8] c"__builtin_ia32_cmpngtpd\00", align 1
@.str.778 = private unnamed_addr constant [24 x i8] c"__builtin_ia32_cmpngepd\00", align 1
@.str.779 = private unnamed_addr constant [24 x i8] c"__builtin_ia32_cmpordpd\00", align 1
@.str.780 = private unnamed_addr constant [23 x i8] c"__builtin_ia32_cmpeqsd\00", align 1
@.str.781 = private unnamed_addr constant [23 x i8] c"__builtin_ia32_cmpltsd\00", align 1
@.str.782 = private unnamed_addr constant [23 x i8] c"__builtin_ia32_cmplesd\00", align 1
@.str.783 = private unnamed_addr constant [26 x i8] c"__builtin_ia32_cmpunordsd\00", align 1
@.str.784 = private unnamed_addr constant [24 x i8] c"__builtin_ia32_cmpneqsd\00", align 1
@.str.785 = private unnamed_addr constant [24 x i8] c"__builtin_ia32_cmpnltsd\00", align 1
@.str.786 = private unnamed_addr constant [24 x i8] c"__builtin_ia32_cmpnlesd\00", align 1
@.str.787 = private unnamed_addr constant [24 x i8] c"__builtin_ia32_cmpordsd\00", align 1
@.str.788 = private unnamed_addr constant [21 x i8] c"__builtin_ia32_minpd\00", align 1
@.str.789 = private unnamed_addr constant [21 x i8] c"__builtin_ia32_maxpd\00", align 1
@.str.790 = private unnamed_addr constant [21 x i8] c"__builtin_ia32_minsd\00", align 1
@.str.791 = private unnamed_addr constant [21 x i8] c"__builtin_ia32_maxsd\00", align 1
@.str.792 = private unnamed_addr constant [21 x i8] c"__builtin_ia32_andpd\00", align 1
@.str.793 = private unnamed_addr constant [22 x i8] c"__builtin_ia32_andnpd\00", align 1
@.str.794 = private unnamed_addr constant [20 x i8] c"__builtin_ia32_orpd\00", align 1
@.str.795 = private unnamed_addr constant [21 x i8] c"__builtin_ia32_xorpd\00", align 1
@.str.796 = private unnamed_addr constant [26 x i8] c"__builtin_ia32_copysignpd\00", align 1
@.str.797 = private unnamed_addr constant [21 x i8] c"__builtin_ia32_movsd\00", align 1
@.str.798 = private unnamed_addr constant [24 x i8] c"__builtin_ia32_unpckhpd\00", align 1
@.str.799 = private unnamed_addr constant [24 x i8] c"__builtin_ia32_unpcklpd\00", align 1
@.str.800 = private unnamed_addr constant [29 x i8] c"__builtin_ia32_vec_pack_sfix\00", align 1
@.str.801 = private unnamed_addr constant [24 x i8] c"__builtin_ia32_paddb128\00", align 1
@.str.802 = private unnamed_addr constant [24 x i8] c"__builtin_ia32_paddw128\00", align 1
@.str.803 = private unnamed_addr constant [24 x i8] c"__builtin_ia32_paddd128\00", align 1
@.str.804 = private unnamed_addr constant [24 x i8] c"__builtin_ia32_paddq128\00", align 1
@.str.805 = private unnamed_addr constant [24 x i8] c"__builtin_ia32_psubb128\00", align 1
@.str.806 = private unnamed_addr constant [24 x i8] c"__builtin_ia32_psubw128\00", align 1
@.str.807 = private unnamed_addr constant [24 x i8] c"__builtin_ia32_psubd128\00", align 1
@.str.808 = private unnamed_addr constant [24 x i8] c"__builtin_ia32_psubq128\00", align 1
@.str.809 = private unnamed_addr constant [25 x i8] c"__builtin_ia32_paddsb128\00", align 1
@.str.810 = private unnamed_addr constant [25 x i8] c"__builtin_ia32_paddsw128\00", align 1
@.str.811 = private unnamed_addr constant [25 x i8] c"__builtin_ia32_psubsb128\00", align 1
@.str.812 = private unnamed_addr constant [25 x i8] c"__builtin_ia32_psubsw128\00", align 1
@.str.813 = private unnamed_addr constant [26 x i8] c"__builtin_ia32_paddusb128\00", align 1
@.str.814 = private unnamed_addr constant [26 x i8] c"__builtin_ia32_paddusw128\00", align 1
@.str.815 = private unnamed_addr constant [26 x i8] c"__builtin_ia32_psubusb128\00", align 1
@.str.816 = private unnamed_addr constant [26 x i8] c"__builtin_ia32_psubusw128\00", align 1
@.str.817 = private unnamed_addr constant [25 x i8] c"__builtin_ia32_pmullw128\00", align 1
@.str.818 = private unnamed_addr constant [25 x i8] c"__builtin_ia32_pmulhw128\00", align 1
@.str.819 = private unnamed_addr constant [23 x i8] c"__builtin_ia32_pand128\00", align 1
@.str.820 = private unnamed_addr constant [24 x i8] c"__builtin_ia32_pandn128\00", align 1
@.str.821 = private unnamed_addr constant [22 x i8] c"__builtin_ia32_por128\00", align 1
@.str.822 = private unnamed_addr constant [23 x i8] c"__builtin_ia32_pxor128\00", align 1
@.str.823 = private unnamed_addr constant [24 x i8] c"__builtin_ia32_pavgb128\00", align 1
@.str.824 = private unnamed_addr constant [24 x i8] c"__builtin_ia32_pavgw128\00", align 1
@.str.825 = private unnamed_addr constant [26 x i8] c"__builtin_ia32_pcmpeqb128\00", align 1
@.str.826 = private unnamed_addr constant [26 x i8] c"__builtin_ia32_pcmpeqw128\00", align 1
@.str.827 = private unnamed_addr constant [26 x i8] c"__builtin_ia32_pcmpeqd128\00", align 1
@.str.828 = private unnamed_addr constant [26 x i8] c"__builtin_ia32_pcmpgtb128\00", align 1
@.str.829 = private unnamed_addr constant [26 x i8] c"__builtin_ia32_pcmpgtw128\00", align 1
@.str.830 = private unnamed_addr constant [26 x i8] c"__builtin_ia32_pcmpgtd128\00", align 1
@.str.831 = private unnamed_addr constant [25 x i8] c"__builtin_ia32_pmaxub128\00", align 1
@.str.832 = private unnamed_addr constant [25 x i8] c"__builtin_ia32_pmaxsw128\00", align 1
@.str.833 = private unnamed_addr constant [25 x i8] c"__builtin_ia32_pminub128\00", align 1
@.str.834 = private unnamed_addr constant [25 x i8] c"__builtin_ia32_pminsw128\00", align 1
@.str.835 = private unnamed_addr constant [28 x i8] c"__builtin_ia32_punpckhbw128\00", align 1
@.str.836 = private unnamed_addr constant [28 x i8] c"__builtin_ia32_punpckhwd128\00", align 1
@.str.837 = private unnamed_addr constant [28 x i8] c"__builtin_ia32_punpckhdq128\00", align 1
@.str.838 = private unnamed_addr constant [29 x i8] c"__builtin_ia32_punpckhqdq128\00", align 1
@.str.839 = private unnamed_addr constant [28 x i8] c"__builtin_ia32_punpcklbw128\00", align 1
@.str.840 = private unnamed_addr constant [28 x i8] c"__builtin_ia32_punpcklwd128\00", align 1
@.str.841 = private unnamed_addr constant [28 x i8] c"__builtin_ia32_punpckldq128\00", align 1
@.str.842 = private unnamed_addr constant [29 x i8] c"__builtin_ia32_punpcklqdq128\00", align 1
@.str.843 = private unnamed_addr constant [27 x i8] c"__builtin_ia32_packsswb128\00", align 1
@.str.844 = private unnamed_addr constant [27 x i8] c"__builtin_ia32_packssdw128\00", align 1
@.str.845 = private unnamed_addr constant [27 x i8] c"__builtin_ia32_packuswb128\00", align 1
@.str.846 = private unnamed_addr constant [26 x i8] c"__builtin_ia32_pmulhuw128\00", align 1
@.str.847 = private unnamed_addr constant [25 x i8] c"__builtin_ia32_psadbw128\00", align 1
@.str.848 = private unnamed_addr constant [23 x i8] c"__builtin_ia32_pmuludq\00", align 1
@.str.849 = private unnamed_addr constant [26 x i8] c"__builtin_ia32_pmuludq128\00", align 1
@.str.850 = private unnamed_addr constant [26 x i8] c"__builtin_ia32_pmaddwd128\00", align 1
@.str.851 = private unnamed_addr constant [24 x i8] c"__builtin_ia32_cvtsi2sd\00", align 1
@.str.852 = private unnamed_addr constant [26 x i8] c"__builtin_ia32_cvtsi642sd\00", align 1
@.str.853 = private unnamed_addr constant [24 x i8] c"__builtin_ia32_cvtsd2ss\00", align 1
@.str.854 = private unnamed_addr constant [24 x i8] c"__builtin_ia32_cvtss2sd\00", align 1
@.str.855 = private unnamed_addr constant [26 x i8] c"__builtin_ia32_pslldqi128\00", align 1
@.str.856 = private unnamed_addr constant [25 x i8] c"__builtin_ia32_psllwi128\00", align 1
@.str.857 = private unnamed_addr constant [25 x i8] c"__builtin_ia32_pslldi128\00", align 1
@.str.858 = private unnamed_addr constant [25 x i8] c"__builtin_ia32_psllqi128\00", align 1
@.str.859 = private unnamed_addr constant [24 x i8] c"__builtin_ia32_psllw128\00", align 1
@.str.860 = private unnamed_addr constant [24 x i8] c"__builtin_ia32_pslld128\00", align 1
@.str.861 = private unnamed_addr constant [24 x i8] c"__builtin_ia32_psllq128\00", align 1
@.str.862 = private unnamed_addr constant [26 x i8] c"__builtin_ia32_psrldqi128\00", align 1
@.str.863 = private unnamed_addr constant [25 x i8] c"__builtin_ia32_psrlwi128\00", align 1
@.str.864 = private unnamed_addr constant [25 x i8] c"__builtin_ia32_psrldi128\00", align 1
@.str.865 = private unnamed_addr constant [25 x i8] c"__builtin_ia32_psrlqi128\00", align 1
@.str.866 = private unnamed_addr constant [24 x i8] c"__builtin_ia32_psrlw128\00", align 1
@.str.867 = private unnamed_addr constant [24 x i8] c"__builtin_ia32_psrld128\00", align 1
@.str.868 = private unnamed_addr constant [24 x i8] c"__builtin_ia32_psrlq128\00", align 1
@.str.869 = private unnamed_addr constant [25 x i8] c"__builtin_ia32_psrawi128\00", align 1
@.str.870 = private unnamed_addr constant [25 x i8] c"__builtin_ia32_psradi128\00", align 1
@.str.871 = private unnamed_addr constant [24 x i8] c"__builtin_ia32_psraw128\00", align 1
@.str.872 = private unnamed_addr constant [24 x i8] c"__builtin_ia32_psrad128\00", align 1
@.str.873 = private unnamed_addr constant [22 x i8] c"__builtin_ia32_pshufd\00", align 1
@.str.874 = private unnamed_addr constant [23 x i8] c"__builtin_ia32_pshuflw\00", align 1
@.str.875 = private unnamed_addr constant [23 x i8] c"__builtin_ia32_pshufhw\00", align 1
@.str.876 = private unnamed_addr constant [22 x i8] c"__builtin_ia32_sqrtsd\00", align 1
@.str.877 = private unnamed_addr constant [23 x i8] c"__builtin_ia32_movq128\00", align 1
@.str.878 = private unnamed_addr constant [21 x i8] c"__builtin_ia32_paddq\00", align 1
@.str.879 = private unnamed_addr constant [21 x i8] c"__builtin_ia32_psubq\00", align 1
@.str.880 = private unnamed_addr constant [24 x i8] c"__builtin_ia32_movshdup\00", align 1
@.str.881 = private unnamed_addr constant [24 x i8] c"__builtin_ia32_movsldup\00", align 1
@.str.882 = private unnamed_addr constant [24 x i8] c"__builtin_ia32_addsubps\00", align 1
@.str.883 = private unnamed_addr constant [24 x i8] c"__builtin_ia32_addsubpd\00", align 1
@.str.884 = private unnamed_addr constant [22 x i8] c"__builtin_ia32_haddps\00", align 1
@.str.885 = private unnamed_addr constant [22 x i8] c"__builtin_ia32_haddpd\00", align 1
@.str.886 = private unnamed_addr constant [22 x i8] c"__builtin_ia32_hsubps\00", align 1
@.str.887 = private unnamed_addr constant [22 x i8] c"__builtin_ia32_hsubpd\00", align 1
@.str.888 = private unnamed_addr constant [24 x i8] c"__builtin_ia32_pabsb128\00", align 1
@.str.889 = private unnamed_addr constant [21 x i8] c"__builtin_ia32_pabsb\00", align 1
@.str.890 = private unnamed_addr constant [24 x i8] c"__builtin_ia32_pabsw128\00", align 1
@.str.891 = private unnamed_addr constant [21 x i8] c"__builtin_ia32_pabsw\00", align 1
@.str.892 = private unnamed_addr constant [24 x i8] c"__builtin_ia32_pabsd128\00", align 1
@.str.893 = private unnamed_addr constant [21 x i8] c"__builtin_ia32_pabsd\00", align 1
@.str.894 = private unnamed_addr constant [25 x i8] c"__builtin_ia32_phaddw128\00", align 1
@.str.895 = private unnamed_addr constant [22 x i8] c"__builtin_ia32_phaddw\00", align 1
@.str.896 = private unnamed_addr constant [25 x i8] c"__builtin_ia32_phaddd128\00", align 1
@.str.897 = private unnamed_addr constant [22 x i8] c"__builtin_ia32_phaddd\00", align 1
@.str.898 = private unnamed_addr constant [26 x i8] c"__builtin_ia32_phaddsw128\00", align 1
@.str.899 = private unnamed_addr constant [23 x i8] c"__builtin_ia32_phaddsw\00", align 1
@.str.900 = private unnamed_addr constant [25 x i8] c"__builtin_ia32_phsubw128\00", align 1
@.str.901 = private unnamed_addr constant [22 x i8] c"__builtin_ia32_phsubw\00", align 1
@.str.902 = private unnamed_addr constant [25 x i8] c"__builtin_ia32_phsubd128\00", align 1
@.str.903 = private unnamed_addr constant [22 x i8] c"__builtin_ia32_phsubd\00", align 1
@.str.904 = private unnamed_addr constant [26 x i8] c"__builtin_ia32_phsubsw128\00", align 1
@.str.905 = private unnamed_addr constant [23 x i8] c"__builtin_ia32_phsubsw\00", align 1
@.str.906 = private unnamed_addr constant [28 x i8] c"__builtin_ia32_pmaddubsw128\00", align 1
@.str.907 = private unnamed_addr constant [25 x i8] c"__builtin_ia32_pmaddubsw\00", align 1
@.str.908 = private unnamed_addr constant [27 x i8] c"__builtin_ia32_pmulhrsw128\00", align 1
@.str.909 = private unnamed_addr constant [24 x i8] c"__builtin_ia32_pmulhrsw\00", align 1
@.str.910 = private unnamed_addr constant [25 x i8] c"__builtin_ia32_pshufb128\00", align 1
@.str.911 = private unnamed_addr constant [22 x i8] c"__builtin_ia32_pshufb\00", align 1
@.str.912 = private unnamed_addr constant [25 x i8] c"__builtin_ia32_psignb128\00", align 1
@.str.913 = private unnamed_addr constant [22 x i8] c"__builtin_ia32_psignb\00", align 1
@.str.914 = private unnamed_addr constant [25 x i8] c"__builtin_ia32_psignw128\00", align 1
@.str.915 = private unnamed_addr constant [22 x i8] c"__builtin_ia32_psignw\00", align 1
@.str.916 = private unnamed_addr constant [25 x i8] c"__builtin_ia32_psignd128\00", align 1
@.str.917 = private unnamed_addr constant [22 x i8] c"__builtin_ia32_psignd\00", align 1
@.str.918 = private unnamed_addr constant [26 x i8] c"__builtin_ia32_palignr128\00", align 1
@.str.919 = private unnamed_addr constant [23 x i8] c"__builtin_ia32_palignr\00", align 1
@.str.920 = private unnamed_addr constant [23 x i8] c"__builtin_ia32_blendpd\00", align 1
@.str.921 = private unnamed_addr constant [23 x i8] c"__builtin_ia32_blendps\00", align 1
@.str.922 = private unnamed_addr constant [24 x i8] c"__builtin_ia32_blendvpd\00", align 1
@.str.923 = private unnamed_addr constant [24 x i8] c"__builtin_ia32_blendvps\00", align 1
@.str.924 = private unnamed_addr constant [20 x i8] c"__builtin_ia32_dppd\00", align 1
@.str.925 = private unnamed_addr constant [20 x i8] c"__builtin_ia32_dpps\00", align 1
@.str.926 = private unnamed_addr constant [27 x i8] c"__builtin_ia32_insertps128\00", align 1
@.str.927 = private unnamed_addr constant [26 x i8] c"__builtin_ia32_mpsadbw128\00", align 1
@.str.928 = private unnamed_addr constant [27 x i8] c"__builtin_ia32_pblendvb128\00", align 1
@.str.929 = private unnamed_addr constant [26 x i8] c"__builtin_ia32_pblendw128\00", align 1
@.str.930 = private unnamed_addr constant [27 x i8] c"__builtin_ia32_pmovsxbw128\00", align 1
@.str.931 = private unnamed_addr constant [27 x i8] c"__builtin_ia32_pmovsxbd128\00", align 1
@.str.932 = private unnamed_addr constant [27 x i8] c"__builtin_ia32_pmovsxbq128\00", align 1
@.str.933 = private unnamed_addr constant [27 x i8] c"__builtin_ia32_pmovsxwd128\00", align 1
@.str.934 = private unnamed_addr constant [27 x i8] c"__builtin_ia32_pmovsxwq128\00", align 1
@.str.935 = private unnamed_addr constant [27 x i8] c"__builtin_ia32_pmovsxdq128\00", align 1
@.str.936 = private unnamed_addr constant [27 x i8] c"__builtin_ia32_pmovzxbw128\00", align 1
@.str.937 = private unnamed_addr constant [27 x i8] c"__builtin_ia32_pmovzxbd128\00", align 1
@.str.938 = private unnamed_addr constant [27 x i8] c"__builtin_ia32_pmovzxbq128\00", align 1
@.str.939 = private unnamed_addr constant [27 x i8] c"__builtin_ia32_pmovzxwd128\00", align 1
@.str.940 = private unnamed_addr constant [27 x i8] c"__builtin_ia32_pmovzxwq128\00", align 1
@.str.941 = private unnamed_addr constant [27 x i8] c"__builtin_ia32_pmovzxdq128\00", align 1
@.str.942 = private unnamed_addr constant [29 x i8] c"__builtin_ia32_phminposuw128\00", align 1
@.str.943 = private unnamed_addr constant [27 x i8] c"__builtin_ia32_packusdw128\00", align 1
@.str.944 = private unnamed_addr constant [23 x i8] c"__builtin_ia32_pcmpeqq\00", align 1
@.str.945 = private unnamed_addr constant [25 x i8] c"__builtin_ia32_pmaxsb128\00", align 1
@.str.946 = private unnamed_addr constant [25 x i8] c"__builtin_ia32_pmaxsd128\00", align 1
@.str.947 = private unnamed_addr constant [25 x i8] c"__builtin_ia32_pmaxud128\00", align 1
@.str.948 = private unnamed_addr constant [25 x i8] c"__builtin_ia32_pmaxuw128\00", align 1
@.str.949 = private unnamed_addr constant [25 x i8] c"__builtin_ia32_pminsb128\00", align 1
@.str.950 = private unnamed_addr constant [25 x i8] c"__builtin_ia32_pminsd128\00", align 1
@.str.951 = private unnamed_addr constant [25 x i8] c"__builtin_ia32_pminud128\00", align 1
@.str.952 = private unnamed_addr constant [25 x i8] c"__builtin_ia32_pminuw128\00", align 1
@.str.953 = private unnamed_addr constant [25 x i8] c"__builtin_ia32_pmuldq128\00", align 1
@.str.954 = private unnamed_addr constant [25 x i8] c"__builtin_ia32_pmulld128\00", align 1
@.str.955 = private unnamed_addr constant [23 x i8] c"__builtin_ia32_roundpd\00", align 1
@.str.956 = private unnamed_addr constant [23 x i8] c"__builtin_ia32_roundps\00", align 1
@.str.957 = private unnamed_addr constant [23 x i8] c"__builtin_ia32_roundsd\00", align 1
@.str.958 = private unnamed_addr constant [23 x i8] c"__builtin_ia32_roundss\00", align 1
@.str.959 = private unnamed_addr constant [25 x i8] c"__builtin_ia32_ptestz128\00", align 1
@.str.960 = private unnamed_addr constant [25 x i8] c"__builtin_ia32_ptestc128\00", align 1
@.str.961 = private unnamed_addr constant [27 x i8] c"__builtin_ia32_ptestnzc128\00", align 1
@.str.962 = private unnamed_addr constant [23 x i8] c"__builtin_ia32_pcmpgtq\00", align 1
@.str.963 = private unnamed_addr constant [23 x i8] c"__builtin_ia32_crc32qi\00", align 1
@.str.964 = private unnamed_addr constant [23 x i8] c"__builtin_ia32_crc32hi\00", align 1
@.str.965 = private unnamed_addr constant [23 x i8] c"__builtin_ia32_crc32si\00", align 1
@.str.966 = private unnamed_addr constant [23 x i8] c"__builtin_ia32_crc32di\00", align 1
@.str.967 = private unnamed_addr constant [22 x i8] c"__builtin_ia32_extrqi\00", align 1
@.str.968 = private unnamed_addr constant [21 x i8] c"__builtin_ia32_extrq\00", align 1
@.str.969 = private unnamed_addr constant [24 x i8] c"__builtin_ia32_insertqi\00", align 1
@.str.970 = private unnamed_addr constant [23 x i8] c"__builtin_ia32_insertq\00", align 1
@.str.971 = private unnamed_addr constant [24 x i8] c"__builtin_ia32_addpd256\00", align 1
@.str.972 = private unnamed_addr constant [24 x i8] c"__builtin_ia32_addps256\00", align 1
@.str.973 = private unnamed_addr constant [27 x i8] c"__builtin_ia32_addsubpd256\00", align 1
@.str.974 = private unnamed_addr constant [27 x i8] c"__builtin_ia32_addsubps256\00", align 1
@.str.975 = private unnamed_addr constant [24 x i8] c"__builtin_ia32_andpd256\00", align 1
@.str.976 = private unnamed_addr constant [24 x i8] c"__builtin_ia32_andps256\00", align 1
@.str.977 = private unnamed_addr constant [25 x i8] c"__builtin_ia32_andnpd256\00", align 1
@.str.978 = private unnamed_addr constant [25 x i8] c"__builtin_ia32_andnps256\00", align 1
@.str.979 = private unnamed_addr constant [24 x i8] c"__builtin_ia32_divpd256\00", align 1
@.str.980 = private unnamed_addr constant [24 x i8] c"__builtin_ia32_divps256\00", align 1
@.str.981 = private unnamed_addr constant [25 x i8] c"__builtin_ia32_haddpd256\00", align 1
@.str.982 = private unnamed_addr constant [25 x i8] c"__builtin_ia32_hsubps256\00", align 1
@.str.983 = private unnamed_addr constant [25 x i8] c"__builtin_ia32_hsubpd256\00", align 1
@.str.984 = private unnamed_addr constant [25 x i8] c"__builtin_ia32_haddps256\00", align 1
@.str.985 = private unnamed_addr constant [24 x i8] c"__builtin_ia32_maxpd256\00", align 1
@.str.986 = private unnamed_addr constant [24 x i8] c"__builtin_ia32_maxps256\00", align 1
@.str.987 = private unnamed_addr constant [24 x i8] c"__builtin_ia32_minpd256\00", align 1
@.str.988 = private unnamed_addr constant [24 x i8] c"__builtin_ia32_minps256\00", align 1
@.str.989 = private unnamed_addr constant [24 x i8] c"__builtin_ia32_mulpd256\00", align 1
@.str.990 = private unnamed_addr constant [24 x i8] c"__builtin_ia32_mulps256\00", align 1
@.str.991 = private unnamed_addr constant [23 x i8] c"__builtin_ia32_orpd256\00", align 1
@.str.992 = private unnamed_addr constant [23 x i8] c"__builtin_ia32_orps256\00", align 1
@.str.993 = private unnamed_addr constant [24 x i8] c"__builtin_ia32_subpd256\00", align 1
@.str.994 = private unnamed_addr constant [24 x i8] c"__builtin_ia32_subps256\00", align 1
@.str.995 = private unnamed_addr constant [24 x i8] c"__builtin_ia32_xorpd256\00", align 1
@.str.996 = private unnamed_addr constant [24 x i8] c"__builtin_ia32_xorps256\00", align 1
@.str.997 = private unnamed_addr constant [28 x i8] c"__builtin_ia32_vpermilvarpd\00", align 1
@.str.998 = private unnamed_addr constant [28 x i8] c"__builtin_ia32_vpermilvarps\00", align 1
@.str.999 = private unnamed_addr constant [31 x i8] c"__builtin_ia32_vpermilvarpd256\00", align 1
@.str.1000 = private unnamed_addr constant [31 x i8] c"__builtin_ia32_vpermilvarps256\00", align 1
@.str.1001 = private unnamed_addr constant [26 x i8] c"__builtin_ia32_blendpd256\00", align 1
@.str.1002 = private unnamed_addr constant [26 x i8] c"__builtin_ia32_blendps256\00", align 1
@.str.1003 = private unnamed_addr constant [27 x i8] c"__builtin_ia32_blendvpd256\00", align 1
@.str.1004 = private unnamed_addr constant [27 x i8] c"__builtin_ia32_blendvps256\00", align 1
@.str.1005 = private unnamed_addr constant [23 x i8] c"__builtin_ia32_dpps256\00", align 1
@.str.1006 = private unnamed_addr constant [25 x i8] c"__builtin_ia32_shufpd256\00", align 1
@.str.1007 = private unnamed_addr constant [25 x i8] c"__builtin_ia32_shufps256\00", align 1
@.str.1008 = private unnamed_addr constant [21 x i8] c"__builtin_ia32_cmpsd\00", align 1
@.str.1009 = private unnamed_addr constant [21 x i8] c"__builtin_ia32_cmpss\00", align 1
@.str.1010 = private unnamed_addr constant [21 x i8] c"__builtin_ia32_cmppd\00", align 1
@.str.1011 = private unnamed_addr constant [21 x i8] c"__builtin_ia32_cmpps\00", align 1
@.str.1012 = private unnamed_addr constant [24 x i8] c"__builtin_ia32_cmppd256\00", align 1
@.str.1013 = private unnamed_addr constant [24 x i8] c"__builtin_ia32_cmpps256\00", align 1
@.str.1014 = private unnamed_addr constant [34 x i8] c"__builtin_ia32_vextractf128_pd256\00", align 1
@.str.1015 = private unnamed_addr constant [34 x i8] c"__builtin_ia32_vextractf128_ps256\00", align 1
@.str.1016 = private unnamed_addr constant [34 x i8] c"__builtin_ia32_vextractf128_si256\00", align 1
@.str.1017 = private unnamed_addr constant [27 x i8] c"__builtin_ia32_cvtdq2pd256\00", align 1
@.str.1018 = private unnamed_addr constant [27 x i8] c"__builtin_ia32_cvtdq2ps256\00", align 1
@.str.1019 = private unnamed_addr constant [27 x i8] c"__builtin_ia32_cvtpd2ps256\00", align 1
@.str.1020 = private unnamed_addr constant [27 x i8] c"__builtin_ia32_cvtps2dq256\00", align 1
@.str.1021 = private unnamed_addr constant [27 x i8] c"__builtin_ia32_cvtps2pd256\00", align 1
@.str.1022 = private unnamed_addr constant [28 x i8] c"__builtin_ia32_cvttpd2dq256\00", align 1
@.str.1023 = private unnamed_addr constant [27 x i8] c"__builtin_ia32_cvtpd2dq256\00", align 1
@.str.1024 = private unnamed_addr constant [28 x i8] c"__builtin_ia32_cvttps2dq256\00", align 1
@.str.1025 = private unnamed_addr constant [32 x i8] c"__builtin_ia32_vperm2f128_pd256\00", align 1
@.str.1026 = private unnamed_addr constant [32 x i8] c"__builtin_ia32_vperm2f128_ps256\00", align 1
@.str.1027 = private unnamed_addr constant [32 x i8] c"__builtin_ia32_vperm2f128_si256\00", align 1
@.str.1028 = private unnamed_addr constant [25 x i8] c"__builtin_ia32_vpermilpd\00", align 1
@.str.1029 = private unnamed_addr constant [25 x i8] c"__builtin_ia32_vpermilps\00", align 1
@.str.1030 = private unnamed_addr constant [28 x i8] c"__builtin_ia32_vpermilpd256\00", align 1
@.str.1031 = private unnamed_addr constant [28 x i8] c"__builtin_ia32_vpermilps256\00", align 1
@.str.1032 = private unnamed_addr constant [33 x i8] c"__builtin_ia32_vinsertf128_pd256\00", align 1
@.str.1033 = private unnamed_addr constant [33 x i8] c"__builtin_ia32_vinsertf128_ps256\00", align 1
@.str.1034 = private unnamed_addr constant [33 x i8] c"__builtin_ia32_vinsertf128_si256\00", align 1
@.str.1035 = private unnamed_addr constant [27 x i8] c"__builtin_ia32_movshdup256\00", align 1
@.str.1036 = private unnamed_addr constant [27 x i8] c"__builtin_ia32_movsldup256\00", align 1
@.str.1037 = private unnamed_addr constant [26 x i8] c"__builtin_ia32_movddup256\00", align 1
@.str.1038 = private unnamed_addr constant [25 x i8] c"__builtin_ia32_sqrtpd256\00", align 1
@.str.1039 = private unnamed_addr constant [25 x i8] c"__builtin_ia32_sqrtps256\00", align 1
@.str.1040 = private unnamed_addr constant [28 x i8] c"__builtin_ia32_sqrtps_nr256\00", align 1
@.str.1041 = private unnamed_addr constant [26 x i8] c"__builtin_ia32_rsqrtps256\00", align 1
@.str.1042 = private unnamed_addr constant [29 x i8] c"__builtin_ia32_rsqrtps_nr256\00", align 1
@.str.1043 = private unnamed_addr constant [24 x i8] c"__builtin_ia32_rcpps256\00", align 1
@.str.1044 = private unnamed_addr constant [26 x i8] c"__builtin_ia32_roundpd256\00", align 1
@.str.1045 = private unnamed_addr constant [26 x i8] c"__builtin_ia32_roundps256\00", align 1
@.str.1046 = private unnamed_addr constant [27 x i8] c"__builtin_ia32_unpckhpd256\00", align 1
@.str.1047 = private unnamed_addr constant [27 x i8] c"__builtin_ia32_unpcklpd256\00", align 1
@.str.1048 = private unnamed_addr constant [27 x i8] c"__builtin_ia32_unpckhps256\00", align 1
@.str.1049 = private unnamed_addr constant [27 x i8] c"__builtin_ia32_unpcklps256\00", align 1
@.str.1050 = private unnamed_addr constant [24 x i8] c"__builtin_ia32_si256_si\00", align 1
@.str.1051 = private unnamed_addr constant [24 x i8] c"__builtin_ia32_ps256_ps\00", align 1
@.str.1052 = private unnamed_addr constant [24 x i8] c"__builtin_ia32_pd256_pd\00", align 1
@.str.1053 = private unnamed_addr constant [24 x i8] c"__builtin_ia32_si_si256\00", align 1
@.str.1054 = private unnamed_addr constant [24 x i8] c"__builtin_ia32_ps_ps256\00", align 1
@.str.1055 = private unnamed_addr constant [24 x i8] c"__builtin_ia32_pd_pd256\00", align 1
@.str.1056 = private unnamed_addr constant [24 x i8] c"__builtin_ia32_vtestzpd\00", align 1
@.str.1057 = private unnamed_addr constant [24 x i8] c"__builtin_ia32_vtestcpd\00", align 1
@.str.1058 = private unnamed_addr constant [26 x i8] c"__builtin_ia32_vtestnzcpd\00", align 1
@.str.1059 = private unnamed_addr constant [24 x i8] c"__builtin_ia32_vtestzps\00", align 1
@.str.1060 = private unnamed_addr constant [24 x i8] c"__builtin_ia32_vtestcps\00", align 1
@.str.1061 = private unnamed_addr constant [26 x i8] c"__builtin_ia32_vtestnzcps\00", align 1
@.str.1062 = private unnamed_addr constant [27 x i8] c"__builtin_ia32_vtestzpd256\00", align 1
@.str.1063 = private unnamed_addr constant [27 x i8] c"__builtin_ia32_vtestcpd256\00", align 1
@.str.1064 = private unnamed_addr constant [29 x i8] c"__builtin_ia32_vtestnzcpd256\00", align 1
@.str.1065 = private unnamed_addr constant [27 x i8] c"__builtin_ia32_vtestzps256\00", align 1
@.str.1066 = private unnamed_addr constant [27 x i8] c"__builtin_ia32_vtestcps256\00", align 1
@.str.1067 = private unnamed_addr constant [29 x i8] c"__builtin_ia32_vtestnzcps256\00", align 1
@.str.1068 = private unnamed_addr constant [25 x i8] c"__builtin_ia32_ptestz256\00", align 1
@.str.1069 = private unnamed_addr constant [25 x i8] c"__builtin_ia32_ptestc256\00", align 1
@.str.1070 = private unnamed_addr constant [27 x i8] c"__builtin_ia32_ptestnzc256\00", align 1
@.str.1071 = private unnamed_addr constant [27 x i8] c"__builtin_ia32_movmskpd256\00", align 1
@.str.1072 = private unnamed_addr constant [27 x i8] c"__builtin_ia32_movmskps256\00", align 1
@.str.1073 = private unnamed_addr constant [15 x i8] c"__builtin_clzs\00", align 1
@.str.1074 = private unnamed_addr constant [28 x i8] c"__builtin_ia32_pcmpestri128\00", align 1
@.str.1075 = private unnamed_addr constant [28 x i8] c"__builtin_ia32_pcmpestrm128\00", align 1
@.str.1076 = private unnamed_addr constant [29 x i8] c"__builtin_ia32_pcmpestria128\00", align 1
@.str.1077 = private unnamed_addr constant [29 x i8] c"__builtin_ia32_pcmpestric128\00", align 1
@.str.1078 = private unnamed_addr constant [29 x i8] c"__builtin_ia32_pcmpestrio128\00", align 1
@.str.1079 = private unnamed_addr constant [29 x i8] c"__builtin_ia32_pcmpestris128\00", align 1
@.str.1080 = private unnamed_addr constant [29 x i8] c"__builtin_ia32_pcmpestriz128\00", align 1
@.str.1081 = private unnamed_addr constant [28 x i8] c"__builtin_ia32_pcmpistri128\00", align 1
@.str.1082 = private unnamed_addr constant [28 x i8] c"__builtin_ia32_pcmpistrm128\00", align 1
@.str.1083 = private unnamed_addr constant [29 x i8] c"__builtin_ia32_pcmpistria128\00", align 1
@.str.1084 = private unnamed_addr constant [29 x i8] c"__builtin_ia32_pcmpistric128\00", align 1
@.str.1085 = private unnamed_addr constant [29 x i8] c"__builtin_ia32_pcmpistrio128\00", align 1
@.str.1086 = private unnamed_addr constant [29 x i8] c"__builtin_ia32_pcmpistris128\00", align 1
@.str.1087 = private unnamed_addr constant [29 x i8] c"__builtin_ia32_pcmpistriz128\00", align 1
@.str.1088 = private unnamed_addr constant [22 x i8] c"__builtin_ia32_comieq\00", align 1
@.str.1089 = private unnamed_addr constant [22 x i8] c"__builtin_ia32_comilt\00", align 1
@.str.1090 = private unnamed_addr constant [22 x i8] c"__builtin_ia32_comile\00", align 1
@.str.1091 = private unnamed_addr constant [22 x i8] c"__builtin_ia32_comigt\00", align 1
@.str.1092 = private unnamed_addr constant [22 x i8] c"__builtin_ia32_comige\00", align 1
@.str.1093 = private unnamed_addr constant [23 x i8] c"__builtin_ia32_comineq\00", align 1
@.str.1094 = private unnamed_addr constant [23 x i8] c"__builtin_ia32_ucomieq\00", align 1
@.str.1095 = private unnamed_addr constant [23 x i8] c"__builtin_ia32_ucomilt\00", align 1
@.str.1096 = private unnamed_addr constant [23 x i8] c"__builtin_ia32_ucomile\00", align 1
@.str.1097 = private unnamed_addr constant [23 x i8] c"__builtin_ia32_ucomigt\00", align 1
@.str.1098 = private unnamed_addr constant [23 x i8] c"__builtin_ia32_ucomige\00", align 1
@.str.1099 = private unnamed_addr constant [24 x i8] c"__builtin_ia32_ucomineq\00", align 1
@.str.1100 = private unnamed_addr constant [24 x i8] c"__builtin_ia32_comisdeq\00", align 1
@.str.1101 = private unnamed_addr constant [24 x i8] c"__builtin_ia32_comisdlt\00", align 1
@.str.1102 = private unnamed_addr constant [24 x i8] c"__builtin_ia32_comisdle\00", align 1
@.str.1103 = private unnamed_addr constant [24 x i8] c"__builtin_ia32_comisdgt\00", align 1
@.str.1104 = private unnamed_addr constant [24 x i8] c"__builtin_ia32_comisdge\00", align 1
@.str.1105 = private unnamed_addr constant [25 x i8] c"__builtin_ia32_comisdneq\00", align 1
@.str.1106 = private unnamed_addr constant [25 x i8] c"__builtin_ia32_ucomisdeq\00", align 1
@.str.1107 = private unnamed_addr constant [25 x i8] c"__builtin_ia32_ucomisdlt\00", align 1
@.str.1108 = private unnamed_addr constant [25 x i8] c"__builtin_ia32_ucomisdle\00", align 1
@.str.1109 = private unnamed_addr constant [25 x i8] c"__builtin_ia32_ucomisdgt\00", align 1
@.str.1110 = private unnamed_addr constant [25 x i8] c"__builtin_ia32_ucomisdge\00", align 1
@.str.1111 = private unnamed_addr constant [26 x i8] c"__builtin_ia32_ucomisdneq\00", align 1
@.str.1112 = private unnamed_addr constant [24 x i8] c"__builtin_ia32_vfmaddss\00", align 1
@.str.1113 = private unnamed_addr constant [24 x i8] c"__builtin_ia32_vfmaddsd\00", align 1
@.str.1114 = private unnamed_addr constant [24 x i8] c"__builtin_ia32_vfmaddps\00", align 1
@.str.1115 = private unnamed_addr constant [24 x i8] c"__builtin_ia32_vfmaddpd\00", align 1
@.str.1116 = private unnamed_addr constant [24 x i8] c"__builtin_ia32_vfmsubss\00", align 1
@.str.1117 = private unnamed_addr constant [24 x i8] c"__builtin_ia32_vfmsubsd\00", align 1
@.str.1118 = private unnamed_addr constant [24 x i8] c"__builtin_ia32_vfmsubps\00", align 1
@.str.1119 = private unnamed_addr constant [24 x i8] c"__builtin_ia32_vfmsubpd\00", align 1
@.str.1120 = private unnamed_addr constant [25 x i8] c"__builtin_ia32_vfnmaddss\00", align 1
@.str.1121 = private unnamed_addr constant [25 x i8] c"__builtin_ia32_vfnmaddsd\00", align 1
@.str.1122 = private unnamed_addr constant [25 x i8] c"__builtin_ia32_vfnmaddps\00", align 1
@.str.1123 = private unnamed_addr constant [25 x i8] c"__builtin_ia32_vfnmaddpd\00", align 1
@.str.1124 = private unnamed_addr constant [25 x i8] c"__builtin_ia32_vfnmsubss\00", align 1
@.str.1125 = private unnamed_addr constant [25 x i8] c"__builtin_ia32_vfnmsubsd\00", align 1
@.str.1126 = private unnamed_addr constant [25 x i8] c"__builtin_ia32_vfnmsubps\00", align 1
@.str.1127 = private unnamed_addr constant [25 x i8] c"__builtin_ia32_vfnmsubpd\00", align 1
@.str.1128 = private unnamed_addr constant [27 x i8] c"__builtin_ia32_vfmaddsubps\00", align 1
@.str.1129 = private unnamed_addr constant [27 x i8] c"__builtin_ia32_vfmaddsubpd\00", align 1
@.str.1130 = private unnamed_addr constant [27 x i8] c"__builtin_ia32_vfmsubaddps\00", align 1
@.str.1131 = private unnamed_addr constant [27 x i8] c"__builtin_ia32_vfmsubaddpd\00", align 1
@.str.1132 = private unnamed_addr constant [27 x i8] c"__builtin_ia32_vfmaddps256\00", align 1
@.str.1133 = private unnamed_addr constant [27 x i8] c"__builtin_ia32_vfmaddpd256\00", align 1
@.str.1134 = private unnamed_addr constant [27 x i8] c"__builtin_ia32_vfmsubps256\00", align 1
@.str.1135 = private unnamed_addr constant [27 x i8] c"__builtin_ia32_vfmsubpd256\00", align 1
@.str.1136 = private unnamed_addr constant [28 x i8] c"__builtin_ia32_vfnmaddps256\00", align 1
@.str.1137 = private unnamed_addr constant [28 x i8] c"__builtin_ia32_vfnmaddpd256\00", align 1
@.str.1138 = private unnamed_addr constant [28 x i8] c"__builtin_ia32_vfnmsubps256\00", align 1
@.str.1139 = private unnamed_addr constant [28 x i8] c"__builtin_ia32_vfnmsubpd256\00", align 1
@.str.1140 = private unnamed_addr constant [30 x i8] c"__builtin_ia32_vfmaddsubps256\00", align 1
@.str.1141 = private unnamed_addr constant [30 x i8] c"__builtin_ia32_vfmaddsubpd256\00", align 1
@.str.1142 = private unnamed_addr constant [30 x i8] c"__builtin_ia32_vfmsubaddps256\00", align 1
@.str.1143 = private unnamed_addr constant [30 x i8] c"__builtin_ia32_vfmsubaddpd256\00", align 1
@.str.1144 = private unnamed_addr constant [22 x i8] c"__builtin_ia32_vpcmov\00", align 1
@.str.1145 = private unnamed_addr constant [27 x i8] c"__builtin_ia32_vpcmov_v2di\00", align 1
@.str.1146 = private unnamed_addr constant [27 x i8] c"__builtin_ia32_vpcmov_v4si\00", align 1
@.str.1147 = private unnamed_addr constant [27 x i8] c"__builtin_ia32_vpcmov_v8hi\00", align 1
@.str.1148 = private unnamed_addr constant [28 x i8] c"__builtin_ia32_vpcmov_v16qi\00", align 1
@.str.1149 = private unnamed_addr constant [27 x i8] c"__builtin_ia32_vpcmov_v2df\00", align 1
@.str.1150 = private unnamed_addr constant [27 x i8] c"__builtin_ia32_vpcmov_v4sf\00", align 1
@.str.1151 = private unnamed_addr constant [25 x i8] c"__builtin_ia32_vpcmov256\00", align 1
@.str.1152 = private unnamed_addr constant [30 x i8] c"__builtin_ia32_vpcmov_v4di256\00", align 1
@.str.1153 = private unnamed_addr constant [30 x i8] c"__builtin_ia32_vpcmov_v8si256\00", align 1
@.str.1154 = private unnamed_addr constant [31 x i8] c"__builtin_ia32_vpcmov_v16hi256\00", align 1
@.str.1155 = private unnamed_addr constant [31 x i8] c"__builtin_ia32_vpcmov_v32qi256\00", align 1
@.str.1156 = private unnamed_addr constant [30 x i8] c"__builtin_ia32_vpcmov_v4df256\00", align 1
@.str.1157 = private unnamed_addr constant [30 x i8] c"__builtin_ia32_vpcmov_v8sf256\00", align 1
@.str.1158 = private unnamed_addr constant [22 x i8] c"__builtin_ia32_vpperm\00", align 1
@.str.1159 = private unnamed_addr constant [25 x i8] c"__builtin_ia32_vpmacssww\00", align 1
@.str.1160 = private unnamed_addr constant [24 x i8] c"__builtin_ia32_vpmacsww\00", align 1
@.str.1161 = private unnamed_addr constant [25 x i8] c"__builtin_ia32_vpmacsswd\00", align 1
@.str.1162 = private unnamed_addr constant [24 x i8] c"__builtin_ia32_vpmacswd\00", align 1
@.str.1163 = private unnamed_addr constant [25 x i8] c"__builtin_ia32_vpmacssdd\00", align 1
@.str.1164 = private unnamed_addr constant [24 x i8] c"__builtin_ia32_vpmacsdd\00", align 1
@.str.1165 = private unnamed_addr constant [26 x i8] c"__builtin_ia32_vpmacssdql\00", align 1
@.str.1166 = private unnamed_addr constant [26 x i8] c"__builtin_ia32_vpmacssdqh\00", align 1
@.str.1167 = private unnamed_addr constant [25 x i8] c"__builtin_ia32_vpmacsdql\00", align 1
@.str.1168 = private unnamed_addr constant [25 x i8] c"__builtin_ia32_vpmacsdqh\00", align 1
@.str.1169 = private unnamed_addr constant [26 x i8] c"__builtin_ia32_vpmadcsswd\00", align 1
@.str.1170 = private unnamed_addr constant [25 x i8] c"__builtin_ia32_vpmadcswd\00", align 1
@.str.1171 = private unnamed_addr constant [22 x i8] c"__builtin_ia32_vprotq\00", align 1
@.str.1172 = private unnamed_addr constant [22 x i8] c"__builtin_ia32_vprotd\00", align 1
@.str.1173 = private unnamed_addr constant [22 x i8] c"__builtin_ia32_vprotw\00", align 1
@.str.1174 = private unnamed_addr constant [22 x i8] c"__builtin_ia32_vprotb\00", align 1
@.str.1175 = private unnamed_addr constant [23 x i8] c"__builtin_ia32_vprotqi\00", align 1
@.str.1176 = private unnamed_addr constant [23 x i8] c"__builtin_ia32_vprotdi\00", align 1
@.str.1177 = private unnamed_addr constant [23 x i8] c"__builtin_ia32_vprotwi\00", align 1
@.str.1178 = private unnamed_addr constant [23 x i8] c"__builtin_ia32_vprotbi\00", align 1
@.str.1179 = private unnamed_addr constant [22 x i8] c"__builtin_ia32_vpshaq\00", align 1
@.str.1180 = private unnamed_addr constant [22 x i8] c"__builtin_ia32_vpshad\00", align 1
@.str.1181 = private unnamed_addr constant [22 x i8] c"__builtin_ia32_vpshaw\00", align 1
@.str.1182 = private unnamed_addr constant [22 x i8] c"__builtin_ia32_vpshab\00", align 1
@.str.1183 = private unnamed_addr constant [22 x i8] c"__builtin_ia32_vpshlq\00", align 1
@.str.1184 = private unnamed_addr constant [22 x i8] c"__builtin_ia32_vpshld\00", align 1
@.str.1185 = private unnamed_addr constant [22 x i8] c"__builtin_ia32_vpshlw\00", align 1
@.str.1186 = private unnamed_addr constant [22 x i8] c"__builtin_ia32_vpshlb\00", align 1
@.str.1187 = private unnamed_addr constant [23 x i8] c"__builtin_ia32_vfrczss\00", align 1
@.str.1188 = private unnamed_addr constant [23 x i8] c"__builtin_ia32_vfrczsd\00", align 1
@.str.1189 = private unnamed_addr constant [23 x i8] c"__builtin_ia32_vfrczps\00", align 1
@.str.1190 = private unnamed_addr constant [23 x i8] c"__builtin_ia32_vfrczpd\00", align 1
@.str.1191 = private unnamed_addr constant [26 x i8] c"__builtin_ia32_vfrczps256\00", align 1
@.str.1192 = private unnamed_addr constant [26 x i8] c"__builtin_ia32_vfrczpd256\00", align 1
@.str.1193 = private unnamed_addr constant [24 x i8] c"__builtin_ia32_vphaddbw\00", align 1
@.str.1194 = private unnamed_addr constant [24 x i8] c"__builtin_ia32_vphaddbd\00", align 1
@.str.1195 = private unnamed_addr constant [24 x i8] c"__builtin_ia32_vphaddbq\00", align 1
@.str.1196 = private unnamed_addr constant [24 x i8] c"__builtin_ia32_vphaddwd\00", align 1
@.str.1197 = private unnamed_addr constant [24 x i8] c"__builtin_ia32_vphaddwq\00", align 1
@.str.1198 = private unnamed_addr constant [24 x i8] c"__builtin_ia32_vphadddq\00", align 1
@.str.1199 = private unnamed_addr constant [25 x i8] c"__builtin_ia32_vphaddubw\00", align 1
@.str.1200 = private unnamed_addr constant [25 x i8] c"__builtin_ia32_vphaddubd\00", align 1
@.str.1201 = private unnamed_addr constant [25 x i8] c"__builtin_ia32_vphaddubq\00", align 1
@.str.1202 = private unnamed_addr constant [25 x i8] c"__builtin_ia32_vphadduwd\00", align 1
@.str.1203 = private unnamed_addr constant [25 x i8] c"__builtin_ia32_vphadduwq\00", align 1
@.str.1204 = private unnamed_addr constant [25 x i8] c"__builtin_ia32_vphaddudq\00", align 1
@.str.1205 = private unnamed_addr constant [24 x i8] c"__builtin_ia32_vphsubbw\00", align 1
@.str.1206 = private unnamed_addr constant [24 x i8] c"__builtin_ia32_vphsubwd\00", align 1
@.str.1207 = private unnamed_addr constant [24 x i8] c"__builtin_ia32_vphsubdq\00", align 1
@.str.1208 = private unnamed_addr constant [24 x i8] c"__builtin_ia32_vpcomeqb\00", align 1
@.str.1209 = private unnamed_addr constant [24 x i8] c"__builtin_ia32_vpcomneb\00", align 1
@.str.1210 = private unnamed_addr constant [25 x i8] c"__builtin_ia32_vpcomneqb\00", align 1
@.str.1211 = private unnamed_addr constant [24 x i8] c"__builtin_ia32_vpcomltb\00", align 1
@.str.1212 = private unnamed_addr constant [24 x i8] c"__builtin_ia32_vpcomleb\00", align 1
@.str.1213 = private unnamed_addr constant [24 x i8] c"__builtin_ia32_vpcomgtb\00", align 1
@.str.1214 = private unnamed_addr constant [24 x i8] c"__builtin_ia32_vpcomgeb\00", align 1
@.str.1215 = private unnamed_addr constant [24 x i8] c"__builtin_ia32_vpcomeqw\00", align 1
@.str.1216 = private unnamed_addr constant [24 x i8] c"__builtin_ia32_vpcomnew\00", align 1
@.str.1217 = private unnamed_addr constant [25 x i8] c"__builtin_ia32_vpcomneqw\00", align 1
@.str.1218 = private unnamed_addr constant [24 x i8] c"__builtin_ia32_vpcomltw\00", align 1
@.str.1219 = private unnamed_addr constant [24 x i8] c"__builtin_ia32_vpcomlew\00", align 1
@.str.1220 = private unnamed_addr constant [24 x i8] c"__builtin_ia32_vpcomgtw\00", align 1
@.str.1221 = private unnamed_addr constant [24 x i8] c"__builtin_ia32_vpcomgew\00", align 1
@.str.1222 = private unnamed_addr constant [24 x i8] c"__builtin_ia32_vpcomeqd\00", align 1
@.str.1223 = private unnamed_addr constant [24 x i8] c"__builtin_ia32_vpcomned\00", align 1
@.str.1224 = private unnamed_addr constant [25 x i8] c"__builtin_ia32_vpcomneqd\00", align 1
@.str.1225 = private unnamed_addr constant [24 x i8] c"__builtin_ia32_vpcomltd\00", align 1
@.str.1226 = private unnamed_addr constant [24 x i8] c"__builtin_ia32_vpcomled\00", align 1
@.str.1227 = private unnamed_addr constant [24 x i8] c"__builtin_ia32_vpcomgtd\00", align 1
@.str.1228 = private unnamed_addr constant [24 x i8] c"__builtin_ia32_vpcomged\00", align 1
@.str.1229 = private unnamed_addr constant [24 x i8] c"__builtin_ia32_vpcomeqq\00", align 1
@.str.1230 = private unnamed_addr constant [24 x i8] c"__builtin_ia32_vpcomneq\00", align 1
@.str.1231 = private unnamed_addr constant [25 x i8] c"__builtin_ia32_vpcomneqq\00", align 1
@.str.1232 = private unnamed_addr constant [24 x i8] c"__builtin_ia32_vpcomltq\00", align 1
@.str.1233 = private unnamed_addr constant [24 x i8] c"__builtin_ia32_vpcomleq\00", align 1
@.str.1234 = private unnamed_addr constant [24 x i8] c"__builtin_ia32_vpcomgtq\00", align 1
@.str.1235 = private unnamed_addr constant [24 x i8] c"__builtin_ia32_vpcomgeq\00", align 1
@.str.1236 = private unnamed_addr constant [25 x i8] c"__builtin_ia32_vpcomequb\00", align 1
@.str.1237 = private unnamed_addr constant [25 x i8] c"__builtin_ia32_vpcomneub\00", align 1
@.str.1238 = private unnamed_addr constant [26 x i8] c"__builtin_ia32_vpcomnequb\00", align 1
@.str.1239 = private unnamed_addr constant [25 x i8] c"__builtin_ia32_vpcomltub\00", align 1
@.str.1240 = private unnamed_addr constant [25 x i8] c"__builtin_ia32_vpcomleub\00", align 1
@.str.1241 = private unnamed_addr constant [25 x i8] c"__builtin_ia32_vpcomgtub\00", align 1
@.str.1242 = private unnamed_addr constant [25 x i8] c"__builtin_ia32_vpcomgeub\00", align 1
@.str.1243 = private unnamed_addr constant [25 x i8] c"__builtin_ia32_vpcomequw\00", align 1
@.str.1244 = private unnamed_addr constant [25 x i8] c"__builtin_ia32_vpcomneuw\00", align 1
@.str.1245 = private unnamed_addr constant [26 x i8] c"__builtin_ia32_vpcomnequw\00", align 1
@.str.1246 = private unnamed_addr constant [25 x i8] c"__builtin_ia32_vpcomltuw\00", align 1
@.str.1247 = private unnamed_addr constant [25 x i8] c"__builtin_ia32_vpcomleuw\00", align 1
@.str.1248 = private unnamed_addr constant [25 x i8] c"__builtin_ia32_vpcomgtuw\00", align 1
@.str.1249 = private unnamed_addr constant [25 x i8] c"__builtin_ia32_vpcomgeuw\00", align 1
@.str.1250 = private unnamed_addr constant [25 x i8] c"__builtin_ia32_vpcomequd\00", align 1
@.str.1251 = private unnamed_addr constant [25 x i8] c"__builtin_ia32_vpcomneud\00", align 1
@.str.1252 = private unnamed_addr constant [26 x i8] c"__builtin_ia32_vpcomnequd\00", align 1
@.str.1253 = private unnamed_addr constant [25 x i8] c"__builtin_ia32_vpcomltud\00", align 1
@.str.1254 = private unnamed_addr constant [25 x i8] c"__builtin_ia32_vpcomleud\00", align 1
@.str.1255 = private unnamed_addr constant [25 x i8] c"__builtin_ia32_vpcomgtud\00", align 1
@.str.1256 = private unnamed_addr constant [25 x i8] c"__builtin_ia32_vpcomgeud\00", align 1
@.str.1257 = private unnamed_addr constant [25 x i8] c"__builtin_ia32_vpcomequq\00", align 1
@.str.1258 = private unnamed_addr constant [25 x i8] c"__builtin_ia32_vpcomneuq\00", align 1
@.str.1259 = private unnamed_addr constant [26 x i8] c"__builtin_ia32_vpcomnequq\00", align 1
@.str.1260 = private unnamed_addr constant [25 x i8] c"__builtin_ia32_vpcomltuq\00", align 1
@.str.1261 = private unnamed_addr constant [25 x i8] c"__builtin_ia32_vpcomleuq\00", align 1
@.str.1262 = private unnamed_addr constant [25 x i8] c"__builtin_ia32_vpcomgtuq\00", align 1
@.str.1263 = private unnamed_addr constant [25 x i8] c"__builtin_ia32_vpcomgeuq\00", align 1
@.str.1264 = private unnamed_addr constant [27 x i8] c"__builtin_ia32_vpcomfalseb\00", align 1
@.str.1265 = private unnamed_addr constant [27 x i8] c"__builtin_ia32_vpcomfalsew\00", align 1
@.str.1266 = private unnamed_addr constant [27 x i8] c"__builtin_ia32_vpcomfalsed\00", align 1
@.str.1267 = private unnamed_addr constant [27 x i8] c"__builtin_ia32_vpcomfalseq\00", align 1
@.str.1268 = private unnamed_addr constant [28 x i8] c"__builtin_ia32_vpcomfalseub\00", align 1
@.str.1269 = private unnamed_addr constant [28 x i8] c"__builtin_ia32_vpcomfalseuw\00", align 1
@.str.1270 = private unnamed_addr constant [28 x i8] c"__builtin_ia32_vpcomfalseud\00", align 1
@.str.1271 = private unnamed_addr constant [28 x i8] c"__builtin_ia32_vpcomfalseuq\00", align 1
@.str.1272 = private unnamed_addr constant [26 x i8] c"__builtin_ia32_vpcomtrueb\00", align 1
@.str.1273 = private unnamed_addr constant [26 x i8] c"__builtin_ia32_vpcomtruew\00", align 1
@.str.1274 = private unnamed_addr constant [26 x i8] c"__builtin_ia32_vpcomtrued\00", align 1
@.str.1275 = private unnamed_addr constant [26 x i8] c"__builtin_ia32_vpcomtrueq\00", align 1
@.str.1276 = private unnamed_addr constant [27 x i8] c"__builtin_ia32_vpcomtrueub\00", align 1
@.str.1277 = private unnamed_addr constant [27 x i8] c"__builtin_ia32_vpcomtrueuw\00", align 1
@.str.1278 = private unnamed_addr constant [27 x i8] c"__builtin_ia32_vpcomtrueud\00", align 1
@.str.1279 = private unnamed_addr constant [27 x i8] c"__builtin_ia32_vpcomtrueuq\00", align 1
@.str.1280 = private unnamed_addr constant [26 x i8] c"__builtin_ia32_vpermil2pd\00", align 1
@.str.1281 = private unnamed_addr constant [26 x i8] c"__builtin_ia32_vpermil2ps\00", align 1
@.str.1282 = private unnamed_addr constant [29 x i8] c"__builtin_ia32_vpermil2pd256\00", align 1
@.str.1283 = private unnamed_addr constant [29 x i8] c"__builtin_ia32_vpermil2ps256\00", align 1
@.str.1284 = private unnamed_addr constant [29 x i8] c"%qE needs unknown isa option\00", align 1
@.str.1285 = private unnamed_addr constant [24 x i8] c"%qE needs isa option %s\00", align 1
@insn_data = external local_unnamed_addr constant [0 x %struct.insn_data], align 8
@ix86_target_string.isa_opts = internal unnamed_addr constant [21 x %struct.ix86_target_opts] [%struct.ix86_target_opts { ptr @.str.1286, i32 4 }, %struct.ix86_target_opts { ptr @.str.1287, i32 512 }, %struct.ix86_target_opts { ptr @.str.1288, i32 256 }, %struct.ix86_target_opts { ptr @.str.1289, i32 8388608 }, %struct.ix86_target_opts { ptr @.str.1290, i32 1024 }, %struct.ix86_target_opts { ptr @.str.1291, i32 2097152 }, %struct.ix86_target_opts { ptr @.str.1292, i32 1048576 }, %struct.ix86_target_opts { ptr @.str.1293, i32 524288 }, %struct.ix86_target_opts { ptr @.str.1294, i32 4194304 }, %struct.ix86_target_opts { ptr @.str.1295, i32 262144 }, %struct.ix86_target_opts { ptr @.str.1296, i32 131072 }, %struct.ix86_target_opts { ptr @.str.1297, i32 65536 }, %struct.ix86_target_opts { ptr @.str.1298, i32 1 }, %struct.ix86_target_opts { ptr @.str.1299, i32 2 }, %struct.ix86_target_opts { ptr @.str.1300, i32 2048 }, %struct.ix86_target_opts { ptr @.str.1301, i32 8 }, %struct.ix86_target_opts { ptr @.str.1302, i32 16384 }, %struct.ix86_target_opts { ptr @.str.1303, i32 4096 }, %struct.ix86_target_opts { ptr @.str.1304, i32 64 }, %struct.ix86_target_opts { ptr @.str.1305, i32 16 }, %struct.ix86_target_opts { ptr @.str.1306, i32 8192 }], align 16
@.str.1286 = private unnamed_addr constant [5 x i8] c"-m64\00", align 1
@.str.1287 = private unnamed_addr constant [7 x i8] c"-mfma4\00", align 1
@.str.1288 = private unnamed_addr constant [6 x i8] c"-mfma\00", align 1
@.str.1289 = private unnamed_addr constant [6 x i8] c"-mxop\00", align 1
@.str.1290 = private unnamed_addr constant [6 x i8] c"-mlwp\00", align 1
@.str.1291 = private unnamed_addr constant [8 x i8] c"-msse4a\00", align 1
@.str.1292 = private unnamed_addr constant [9 x i8] c"-msse4.2\00", align 1
@.str.1293 = private unnamed_addr constant [9 x i8] c"-msse4.1\00", align 1
@.str.1294 = private unnamed_addr constant [8 x i8] c"-mssse3\00", align 1
@.str.1295 = private unnamed_addr constant [7 x i8] c"-msse3\00", align 1
@.str.1296 = private unnamed_addr constant [7 x i8] c"-msse2\00", align 1
@.str.1297 = private unnamed_addr constant [6 x i8] c"-msse\00", align 1
@.str.1298 = private unnamed_addr constant [8 x i8] c"-m3dnow\00", align 1
@.str.1299 = private unnamed_addr constant [9 x i8] c"-m3dnowa\00", align 1
@.str.1300 = private unnamed_addr constant [6 x i8] c"-mmmx\00", align 1
@.str.1301 = private unnamed_addr constant [6 x i8] c"-mabm\00", align 1
@.str.1302 = private unnamed_addr constant [9 x i8] c"-mpopcnt\00", align 1
@.str.1303 = private unnamed_addr constant [8 x i8] c"-mmovbe\00", align 1
@.str.1304 = private unnamed_addr constant [8 x i8] c"-mcrc32\00", align 1
@.str.1305 = private unnamed_addr constant [6 x i8] c"-maes\00", align 1
@.str.1306 = private unnamed_addr constant [9 x i8] c"-mpclmul\00", align 1
@ix86_target_string.flag_opts = internal unnamed_addr constant [20 x %struct.ix86_target_opts] [%struct.ix86_target_opts { ptr @.str.1307, i32 1 }, %struct.ix86_target_opts { ptr @.str.1308, i32 2 }, %struct.ix86_target_opts { ptr @.str.1309, i32 4 }, %struct.ix86_target_opts { ptr @.str.1310, i32 8 }, %struct.ix86_target_opts { ptr @.str.1311, i32 16 }, %struct.ix86_target_opts { ptr @.str.1312, i32 32 }, %struct.ix86_target_opts { ptr @.str.1313, i32 128 }, %struct.ix86_target_opts { ptr @.str.1314, i32 256 }, %struct.ix86_target_opts { ptr @.str.1315, i32 512 }, %struct.ix86_target_opts { ptr @.str.1316, i32 1024 }, %struct.ix86_target_opts { ptr @.str.1317, i32 2048 }, %struct.ix86_target_opts { ptr @.str.1318, i32 4096 }, %struct.ix86_target_opts { ptr @.str.1319, i32 8192 }, %struct.ix86_target_opts { ptr @.str.1320, i32 16384 }, %struct.ix86_target_opts { ptr @.str.1321, i32 32768 }, %struct.ix86_target_opts { ptr @.str.1322, i32 65536 }, %struct.ix86_target_opts { ptr @.str.1323, i32 131072 }, %struct.ix86_target_opts { ptr @.str.1324, i32 262144 }, %struct.ix86_target_opts { ptr @.str.1325, i32 524288 }, %struct.ix86_target_opts { ptr @.str.1326, i32 1048576 }], align 16
@.str.1307 = private unnamed_addr constant [21 x i8] c"-m128bit-long-double\00", align 1
@.str.1308 = private unnamed_addr constant [8 x i8] c"-m80387\00", align 1
@.str.1309 = private unnamed_addr constant [27 x i8] c"-maccumulate-outgoing-args\00", align 1
@.str.1310 = private unnamed_addr constant [15 x i8] c"-malign-double\00", align 1
@.str.1311 = private unnamed_addr constant [6 x i8] c"-mcld\00", align 1
@.str.1312 = private unnamed_addr constant [16 x i8] c"-mfp-ret-in-387\00", align 1
@.str.1313 = private unnamed_addr constant [10 x i8] c"-mieee-fp\00", align 1
@.str.1314 = private unnamed_addr constant [23 x i8] c"-minline-all-stringops\00", align 1
@.str.1315 = private unnamed_addr constant [31 x i8] c"-minline-stringops-dynamically\00", align 1
@.str.1316 = private unnamed_addr constant [15 x i8] c"-mms-bitfields\00", align 1
@.str.1317 = private unnamed_addr constant [21 x i8] c"-mno-align-stringops\00", align 1
@.str.1318 = private unnamed_addr constant [20 x i8] c"-mno-fancy-math-387\00", align 1
@.str.1319 = private unnamed_addr constant [15 x i8] c"-mno-push-args\00", align 1
@.str.1320 = private unnamed_addr constant [14 x i8] c"-mno-red-zone\00", align 1
@.str.1321 = private unnamed_addr constant [26 x i8] c"-momit-leaf-frame-pointer\00", align 1
@.str.1322 = private unnamed_addr constant [8 x i8] c"-mrecip\00", align 1
@.str.1323 = private unnamed_addr constant [6 x i8] c"-mrtd\00", align 1
@.str.1324 = private unnamed_addr constant [13 x i8] c"-msseregparm\00", align 1
@.str.1325 = private unnamed_addr constant [18 x i8] c"-mstack-arg-probe\00", align 1
@.str.1326 = private unnamed_addr constant [22 x i8] c"-mtls-direct-seg-refs\00", align 1
@.str.1332 = private unnamed_addr constant [57 x i8] c"selector must be an integer constant in the range 0..%wi\00", align 1
@.str.1333 = private unnamed_addr constant [44 x i8] c"vector permutation requires vector constant\00", align 1
@.str.1334 = private unnamed_addr constant [36 x i8] c"invalid vector permutation constant\00", align 1
@.str.1335 = private unnamed_addr constant [27 x i8] c"vector permutation (%d %d)\00", align 1
@.str.1336 = private unnamed_addr constant [33 x i8] c"vector permutation (%d %d %d %d)\00", align 1
@.str.1337 = private unnamed_addr constant [45 x i8] c"vector permutation (%d %d %d %d %d %d %d %d)\00", align 1
@.str.1338 = private unnamed_addr constant [69 x i8] c"vector permutation (%d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d)\00", align 1
@.str.1339 = private unnamed_addr constant [45 x i8] c"the last argument must be a 32-bit immediate\00", align 1
@.str.1340 = private unnamed_addr constant [45 x i8] c"the last argument must be an 8-bit immediate\00", align 1
@.str.1341 = private unnamed_addr constant [44 x i8] c"the last argument must be a 4-bit immediate\00", align 1
@.str.1342 = private unnamed_addr constant [44 x i8] c"the last argument must be a 2-bit immediate\00", align 1
@.str.1343 = private unnamed_addr constant [44 x i8] c"the last argument must be a 1-bit immediate\00", align 1
@.str.1344 = private unnamed_addr constant [44 x i8] c"the last argument must be a 5-bit immediate\00", align 1
@.str.1345 = private unnamed_addr constant [53 x i8] c"the next to last argument must be an 8-bit immediate\00", align 1
@.str.1346 = private unnamed_addr constant [45 x i8] c"the fifth argument must be a 8-bit immediate\00", align 1
@.str.1347 = private unnamed_addr constant [45 x i8] c"the third argument must be a 8-bit immediate\00", align 1
@.str.1348 = private unnamed_addr constant [35 x i8] c"last argument must be an immediate\00", align 1
@flag_trapping_math = external local_unnamed_addr global i32, align 4
@.str.1349 = private unnamed_addr constant [7 x i8] c".ldata\00", align 1
@mode_mask_array = external local_unnamed_addr constant [87 x i64], align 16
@dump_file = external local_unnamed_addr global ptr, align 8
@.str.1350 = private unnamed_addr constant [27 x i8] c"Label %i with max_skip %i\0A\00", align 1
@.str.1351 = private unnamed_addr constant [31 x i8] c"Insn %i estimated to %i bytes\0A\00", align 1
@.str.1352 = private unnamed_addr constant [32 x i8] c"Interval %i to %i has %i bytes\0A\00", align 1
@.str.1353 = private unnamed_addr constant [30 x i8] c"Padding insn %i by %i bytes!\0A\00", align 1
@ix86_struct_value_rtx.warnedsse = internal unnamed_addr global i1 false, align 1
@ix86_struct_value_rtx.warnedmmx = internal unnamed_addr global i1 false, align 1
@.str.1354 = private unnamed_addr constant [54 x i8] c"SSE vector return without SSE enabled changes the ABI\00", align 1
@.str.1355 = private unnamed_addr constant [54 x i8] c"MMX vector return without MMX enabled changes the ABI\00", align 1
@ix86_force_drap = external local_unnamed_addr global i32, align 4
@i386_ira_cover_classes.sse_fpmath_classes = internal constant [5 x i32] [i32 13, i32 18, i32 19, i32 16, i32 27], align 16
@i386_ira_cover_classes.no_sse_fpmath_classes = internal constant [5 x i32] [i32 13, i32 16, i32 19, i32 18, i32 27], align 16
@.str.1356 = private unnamed_addr constant [19 x i8] c"%*sarch = %d (%s)\0A\00", align 1
@.str.1357 = private unnamed_addr constant [10 x i8] c"<unknown>\00", align 1
@.str.1358 = private unnamed_addr constant [19 x i8] c"%*stune = %d (%s)\0A\00", align 1
@.str.1359 = private unnamed_addr constant [20 x i8] c"%*sfpmath = %d%s%s\0A\00", align 1
@.str.1360 = private unnamed_addr constant [6 x i8] c", 387\00", align 1
@.str.1361 = private unnamed_addr constant [6 x i8] c", sse\00", align 1
@.str.1362 = private unnamed_addr constant [21 x i8] c"%*sbranch_cost = %d\0A\00", align 1
@.str.1363 = private unnamed_addr constant [7 x i8] c"%*s%s\0A\00", align 1
@switch.table.ix86_function_arg_regno_p = private unnamed_addr constant [32 x i8] c"\01\01\01\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00", align 1
@reltable.standard_80387_constant_opcode = private unnamed_addr constant [9 x i32] [i32 trunc (i64 sub (i64 ptrtoint (ptr @.str.132 to i64), i64 ptrtoint (ptr @reltable.standard_80387_constant_opcode to i64)) to i32), i32 trunc (i64 sub (i64 ptrtoint (ptr @.str.133 to i64), i64 ptrtoint (ptr @reltable.standard_80387_constant_opcode to i64)) to i32), i32 trunc (i64 sub (i64 ptrtoint (ptr @.str.134 to i64), i64 ptrtoint (ptr @reltable.standard_80387_constant_opcode to i64)) to i32), i32 trunc (i64 sub (i64 ptrtoint (ptr @.str.135 to i64), i64 ptrtoint (ptr @reltable.standard_80387_constant_opcode to i64)) to i32), i32 trunc (i64 sub (i64 ptrtoint (ptr @.str.136 to i64), i64 ptrtoint (ptr @reltable.standard_80387_constant_opcode to i64)) to i32), i32 trunc (i64 sub (i64 ptrtoint (ptr @.str.137 to i64), i64 ptrtoint (ptr @reltable.standard_80387_constant_opcode to i64)) to i32), i32 trunc (i64 sub (i64 ptrtoint (ptr @.str.138 to i64), i64 ptrtoint (ptr @reltable.standard_80387_constant_opcode to i64)) to i32), i32 trunc (i64 sub (i64 ptrtoint (ptr @.str.139 to i64), i64 ptrtoint (ptr @reltable.standard_80387_constant_opcode to i64)) to i32), i32 trunc (i64 sub (i64 ptrtoint (ptr @.str.139 to i64), i64 ptrtoint (ptr @reltable.standard_80387_constant_opcode to i64)) to i32)], align 4
@reltable.put_condition_code = private unnamed_addr constant [4 x i32] [i32 trunc (i64 sub (i64 ptrtoint (ptr @.str.404 to i64), i64 ptrtoint (ptr @reltable.put_condition_code to i64)) to i32), i32 trunc (i64 sub (i64 ptrtoint (ptr @.str.405 to i64), i64 ptrtoint (ptr @reltable.put_condition_code to i64)) to i32), i32 trunc (i64 sub (i64 ptrtoint (ptr @.str.406 to i64), i64 ptrtoint (ptr @reltable.put_condition_code to i64)) to i32), i32 trunc (i64 sub (i64 ptrtoint (ptr @.str.407 to i64), i64 ptrtoint (ptr @reltable.put_condition_code to i64)) to i32)], align 4
@reltable.put_condition_code.1392 = private unnamed_addr constant [4 x i32] [i32 trunc (i64 sub (i64 ptrtoint (ptr @.str.409 to i64), i64 ptrtoint (ptr @reltable.put_condition_code.1392 to i64)) to i32), i32 trunc (i64 sub (i64 ptrtoint (ptr @.str.410 to i64), i64 ptrtoint (ptr @reltable.put_condition_code.1392 to i64)) to i32), i32 trunc (i64 sub (i64 ptrtoint (ptr @.str.411 to i64), i64 ptrtoint (ptr @reltable.put_condition_code.1392 to i64)) to i32), i32 trunc (i64 sub (i64 ptrtoint (ptr @.str.412 to i64), i64 ptrtoint (ptr @reltable.put_condition_code.1392 to i64)) to i32)], align 4
@reltable.put_condition_code.1393 = private unnamed_addr constant [4 x i32] [i32 trunc (i64 sub (i64 ptrtoint (ptr @.str.417 to i64), i64 ptrtoint (ptr @reltable.put_condition_code.1393 to i64)) to i32), i32 trunc (i64 sub (i64 ptrtoint (ptr @.str.417 to i64), i64 ptrtoint (ptr @reltable.put_condition_code.1393 to i64)) to i32), i32 trunc (i64 sub (i64 ptrtoint (ptr @.str.407 to i64), i64 ptrtoint (ptr @reltable.put_condition_code.1393 to i64)) to i32), i32 trunc (i64 sub (i64 ptrtoint (ptr @.str.407 to i64), i64 ptrtoint (ptr @reltable.put_condition_code.1393 to i64)) to i32)], align 4
@reltable.put_condition_code.1394 = private unnamed_addr constant [4 x i32] [i32 trunc (i64 sub (i64 ptrtoint (ptr @.str.182 to i64), i64 ptrtoint (ptr @reltable.put_condition_code.1394 to i64)) to i32), i32 trunc (i64 sub (i64 ptrtoint (ptr @.str.182 to i64), i64 ptrtoint (ptr @reltable.put_condition_code.1394 to i64)) to i32), i32 trunc (i64 sub (i64 ptrtoint (ptr @.str.412 to i64), i64 ptrtoint (ptr @reltable.put_condition_code.1394 to i64)) to i32), i32 trunc (i64 sub (i64 ptrtoint (ptr @.str.412 to i64), i64 ptrtoint (ptr @reltable.put_condition_code.1394 to i64)) to i32)], align 4
@switch.table.ix86_fp_compare_code_to_integer = private unnamed_addr constant [16 x i32] [i32 86, i32 87, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 90, i32 91, i32 81, i32 0, i32 0, i32 88, i32 89, i32 80], align 4
@switch.table.ix86_expand_int_addcc = private unnamed_addr constant [4 x ptr] [ptr @gen_subqi3_carry, ptr @gen_subhi3_carry, ptr @gen_subsi3_carry, ptr @gen_subdi3_carry], align 8
@switch.table.ix86_expand_int_addcc.1386 = private unnamed_addr constant [4 x ptr] [ptr @gen_addqi3_carry, ptr @gen_addhi3_carry, ptr @gen_addsi3_carry, ptr @gen_adddi3_carry], align 8
@switch.table.ix86_attr_length_immediate_default.1387 = private unnamed_addr constant [4 x i32] [i32 1, i32 2, i32 4, i32 4], align 4
@switch.table.ix86_preferred_reload_class = private unnamed_addr constant [8 x i32] [i32 16, i32 0, i32 0, i32 0, i32 14, i32 15, i32 16, i32 23], align 4
@switch.table.expand_vec_perm_1.1390 = private unnamed_addr constant [24 x i32] [i32 63, i32 64, i32 65, i32 66, i32 68, i32 69, i32 70, i32 71, i32 79, i32 73, i32 74, i32 75, i32 76, i32 79, i32 79, i32 79, i32 79, i32 79, i32 79, i32 79, i32 81, i32 82, i32 84, i32 85], align 4
@switch.table.ix86_issue_rate = private unnamed_addr constant [13 x i32] [i32 2, i32 3, i32 1, i32 2, i32 3, i32 3, i32 3, i32 3, i32 4, i32 3, i32 3, i32 3, i32 2], align 4
@switch.table.ia32_multipass_dfa_lookahead = private unnamed_addr constant [4 x i32] [i32 2, i32 1, i32 0, i32 1], align 4
@switch.table.ix86_expand_vector_init_concat = private unnamed_addr constant [22 x i32] [i32 16, i32 65, i32 65, i32 65, i32 61, i32 17, i32 65, i32 65, i32 65, i32 65, i32 66, i32 65, i32 65, i32 65, i32 65, i32 65, i32 65, i32 38, i32 78, i32 39, i32 79, i32 80], align 4

; Function Attrs: inlinehint nofree nounwind sspstrong uwtable
define dso_local i32 @vprintf(ptr noalias nocapture noundef readonly %0, ptr noundef %1) local_unnamed_addr #0 {
  %3 = load ptr, ptr @stdout, align 8, !tbaa !5
  %4 = tail call i32 @vfprintf(ptr noundef %3, ptr noundef %0, ptr noundef %1)
  ret i32 %4
}

; Function Attrs: nofree nounwind
declare noundef i32 @vfprintf(ptr nocapture noundef, ptr nocapture noundef readonly, ptr noundef) local_unnamed_addr #1

; Function Attrs: inlinehint nofree nounwind sspstrong uwtable
define dso_local i32 @getchar() local_unnamed_addr #0 {
  %1 = load ptr, ptr @stdin, align 8, !tbaa !5
  %2 = tail call i32 @getc(ptr noundef %1)
  ret i32 %2
}

; Function Attrs: nofree nounwind
declare noundef i32 @getc(ptr nocapture noundef) local_unnamed_addr #1

; Function Attrs: inlinehint nounwind sspstrong uwtable
define dso_local i32 @fgetc_unlocked(ptr noundef %0) local_unnamed_addr #2 {
  %2 = getelementptr inbounds %struct._IO_FILE, ptr %0, i64 0, i32 1
  %3 = load ptr, ptr %2, align 8, !tbaa !9
  %4 = getelementptr inbounds %struct._IO_FILE, ptr %0, i64 0, i32 2
  %5 = load ptr, ptr %4, align 8, !tbaa !14
  %6 = icmp ult ptr %3, %5
  br i1 %6, label %9, label %7, !prof !15

7:                                                ; preds = %1
  %8 = tail call i32 @__uflow(ptr noundef nonnull %0) #30
  br label %13

9:                                                ; preds = %1
  %10 = getelementptr inbounds i8, ptr %3, i64 1
  store ptr %10, ptr %2, align 8, !tbaa !9
  %11 = load i8, ptr %3, align 1, !tbaa !16
  %12 = zext i8 %11 to i32
  br label %13

13:                                               ; preds = %9, %7
  %14 = phi i32 [ %8, %7 ], [ %12, %9 ]
  ret i32 %14
}

declare i32 @__uflow(ptr noundef) local_unnamed_addr #3

; Function Attrs: inlinehint nounwind sspstrong uwtable
define dso_local i32 @getc_unlocked(ptr noundef %0) local_unnamed_addr #2 {
  %2 = getelementptr inbounds %struct._IO_FILE, ptr %0, i64 0, i32 1
  %3 = load ptr, ptr %2, align 8, !tbaa !9
  %4 = getelementptr inbounds %struct._IO_FILE, ptr %0, i64 0, i32 2
  %5 = load ptr, ptr %4, align 8, !tbaa !14
  %6 = icmp ult ptr %3, %5
  br i1 %6, label %9, label %7, !prof !15

7:                                                ; preds = %1
  %8 = tail call i32 @__uflow(ptr noundef nonnull %0) #30
  br label %13

9:                                                ; preds = %1
  %10 = getelementptr inbounds i8, ptr %3, i64 1
  store ptr %10, ptr %2, align 8, !tbaa !9
  %11 = load i8, ptr %3, align 1, !tbaa !16
  %12 = zext i8 %11 to i32
  br label %13

13:                                               ; preds = %9, %7
  %14 = phi i32 [ %8, %7 ], [ %12, %9 ]
  ret i32 %14
}

; Function Attrs: inlinehint nounwind sspstrong uwtable
define dso_local i32 @getchar_unlocked() local_unnamed_addr #2 {
  %1 = load ptr, ptr @stdin, align 8, !tbaa !5
  %2 = getelementptr inbounds %struct._IO_FILE, ptr %1, i64 0, i32 1
  %3 = load ptr, ptr %2, align 8, !tbaa !9
  %4 = getelementptr inbounds %struct._IO_FILE, ptr %1, i64 0, i32 2
  %5 = load ptr, ptr %4, align 8, !tbaa !14
  %6 = icmp ult ptr %3, %5
  br i1 %6, label %9, label %7, !prof !15

7:                                                ; preds = %0
  %8 = tail call i32 @__uflow(ptr noundef nonnull %1) #30
  br label %13

9:                                                ; preds = %0
  %10 = getelementptr inbounds i8, ptr %3, i64 1
  store ptr %10, ptr %2, align 8, !tbaa !9
  %11 = load i8, ptr %3, align 1, !tbaa !16
  %12 = zext i8 %11 to i32
  br label %13

13:                                               ; preds = %9, %7
  %14 = phi i32 [ %8, %7 ], [ %12, %9 ]
  ret i32 %14
}

; Function Attrs: inlinehint nofree nounwind sspstrong uwtable
define dso_local i32 @putchar(i32 noundef %0) local_unnamed_addr #0 {
  %2 = load ptr, ptr @stdout, align 8, !tbaa !5
  %3 = tail call i32 @putc(i32 noundef %0, ptr noundef %2)
  ret i32 %3
}

; Function Attrs: nofree nounwind
declare noundef i32 @putc(i32 noundef, ptr nocapture noundef) local_unnamed_addr #1

; Function Attrs: inlinehint nounwind sspstrong uwtable
define dso_local i32 @fputc_unlocked(i32 noundef %0, ptr noundef %1) local_unnamed_addr #2 {
  %3 = getelementptr inbounds %struct._IO_FILE, ptr %1, i64 0, i32 5
  %4 = load ptr, ptr %3, align 8, !tbaa !17
  %5 = getelementptr inbounds %struct._IO_FILE, ptr %1, i64 0, i32 6
  %6 = load ptr, ptr %5, align 8, !tbaa !18
  %7 = icmp ult ptr %4, %6
  br i1 %7, label %11, label %8, !prof !15

8:                                                ; preds = %2
  %9 = and i32 %0, 255
  %10 = tail call i32 @__overflow(ptr noundef nonnull %1, i32 noundef %9) #30
  br label %15

11:                                               ; preds = %2
  %12 = trunc i32 %0 to i8
  %13 = getelementptr inbounds i8, ptr %4, i64 1
  store ptr %13, ptr %3, align 8, !tbaa !17
  store i8 %12, ptr %4, align 1, !tbaa !16
  %14 = and i32 %0, 255
  br label %15

15:                                               ; preds = %11, %8
  %16 = phi i32 [ %10, %8 ], [ %14, %11 ]
  ret i32 %16
}

declare i32 @__overflow(ptr noundef, i32 noundef) local_unnamed_addr #3

; Function Attrs: inlinehint nounwind sspstrong uwtable
define dso_local i32 @putc_unlocked(i32 noundef %0, ptr noundef %1) local_unnamed_addr #2 {
  %3 = getelementptr inbounds %struct._IO_FILE, ptr %1, i64 0, i32 5
  %4 = load ptr, ptr %3, align 8, !tbaa !17
  %5 = getelementptr inbounds %struct._IO_FILE, ptr %1, i64 0, i32 6
  %6 = load ptr, ptr %5, align 8, !tbaa !18
  %7 = icmp ult ptr %4, %6
  br i1 %7, label %11, label %8, !prof !15

8:                                                ; preds = %2
  %9 = and i32 %0, 255
  %10 = tail call i32 @__overflow(ptr noundef nonnull %1, i32 noundef %9) #30
  br label %15

11:                                               ; preds = %2
  %12 = trunc i32 %0 to i8
  %13 = getelementptr inbounds i8, ptr %4, i64 1
  store ptr %13, ptr %3, align 8, !tbaa !17
  store i8 %12, ptr %4, align 1, !tbaa !16
  %14 = and i32 %0, 255
  br label %15

15:                                               ; preds = %11, %8
  %16 = phi i32 [ %10, %8 ], [ %14, %11 ]
  ret i32 %16
}

; Function Attrs: inlinehint nounwind sspstrong uwtable
define dso_local i32 @putchar_unlocked(i32 noundef %0) local_unnamed_addr #2 {
  %2 = load ptr, ptr @stdout, align 8, !tbaa !5
  %3 = getelementptr inbounds %struct._IO_FILE, ptr %2, i64 0, i32 5
  %4 = load ptr, ptr %3, align 8, !tbaa !17
  %5 = getelementptr inbounds %struct._IO_FILE, ptr %2, i64 0, i32 6
  %6 = load ptr, ptr %5, align 8, !tbaa !18
  %7 = icmp ult ptr %4, %6
  br i1 %7, label %11, label %8, !prof !15

8:                                                ; preds = %1
  %9 = and i32 %0, 255
  %10 = tail call i32 @__overflow(ptr noundef nonnull %2, i32 noundef %9) #30
  br label %15

11:                                               ; preds = %1
  %12 = trunc i32 %0 to i8
  %13 = getelementptr inbounds i8, ptr %4, i64 1
  store ptr %13, ptr %3, align 8, !tbaa !17
  store i8 %12, ptr %4, align 1, !tbaa !16
  %14 = and i32 %0, 255
  br label %15

15:                                               ; preds = %11, %8
  %16 = phi i32 [ %10, %8 ], [ %14, %11 ]
  ret i32 %16
}

; Function Attrs: inlinehint nounwind sspstrong uwtable
define dso_local i64 @getline(ptr noundef %0, ptr noundef %1, ptr noundef %2) local_unnamed_addr #2 {
  %4 = tail call i64 @__getdelim(ptr noundef %0, ptr noundef %1, i32 noundef 10, ptr noundef %2) #30
  ret i64 %4
}

declare i64 @__getdelim(ptr noundef, ptr noundef, i32 noundef, ptr noundef) local_unnamed_addr #3

; Function Attrs: inlinehint mustprogress nofree norecurse nosync nounwind sspstrong willreturn memory(argmem: read) uwtable
define dso_local i32 @feof_unlocked(ptr nocapture noundef readonly %0) local_unnamed_addr #4 {
  %2 = load i32, ptr %0, align 8, !tbaa !19
  %3 = lshr i32 %2, 4
  %4 = and i32 %3, 1
  ret i32 %4
}

; Function Attrs: inlinehint mustprogress nofree norecurse nosync nounwind sspstrong willreturn memory(argmem: read) uwtable
define dso_local i32 @ferror_unlocked(ptr nocapture noundef readonly %0) local_unnamed_addr #4 {
  %2 = load i32, ptr %0, align 8, !tbaa !19
  %3 = lshr i32 %2, 5
  %4 = and i32 %3, 1
  ret i32 %4
}

; Function Attrs: inlinehint mustprogress nofree nounwind sspstrong willreturn memory(read) uwtable
define dso_local i32 @tolower(i32 noundef %0) local_unnamed_addr #5 {
  %2 = add i32 %0, 128
  %3 = icmp ult i32 %2, 384
  br i1 %3, label %4, label %10

4:                                                ; preds = %1
  %5 = tail call ptr @__ctype_tolower_loc() #30
  %6 = load ptr, ptr %5, align 8, !tbaa !5
  %7 = sext i32 %0 to i64
  %8 = getelementptr inbounds i32, ptr %6, i64 %7
  %9 = load i32, ptr %8, align 4, !tbaa !20
  br label %10

10:                                               ; preds = %1, %4
  %11 = phi i32 [ %9, %4 ], [ %0, %1 ]
  ret i32 %11
}

declare ptr @__ctype_tolower_loc() local_unnamed_addr #3

; Function Attrs: inlinehint mustprogress nofree nounwind sspstrong willreturn memory(read) uwtable
define dso_local i32 @toupper(i32 noundef %0) local_unnamed_addr #5 {
  %2 = add i32 %0, 128
  %3 = icmp ult i32 %2, 384
  br i1 %3, label %4, label %10

4:                                                ; preds = %1
  %5 = tail call ptr @__ctype_toupper_loc() #30
  %6 = load ptr, ptr %5, align 8, !tbaa !5
  %7 = sext i32 %0 to i64
  %8 = getelementptr inbounds i32, ptr %6, i64 %7
  %9 = load i32, ptr %8, align 4, !tbaa !20
  br label %10

10:                                               ; preds = %1, %4
  %11 = phi i32 [ %9, %4 ], [ %0, %1 ]
  ret i32 %11
}

declare ptr @__ctype_toupper_loc() local_unnamed_addr #3

; Function Attrs: inlinehint nounwind sspstrong uwtable
define dso_local i32 @atoi(ptr noundef %0) local_unnamed_addr #2 {
  %2 = tail call i64 @__isoc23_strtol(ptr noundef %0, ptr noundef null, i32 noundef 10) #30
  %3 = trunc i64 %2 to i32
  ret i32 %3
}

declare i64 @__isoc23_strtol(ptr noundef, ptr noundef, i32 noundef) local_unnamed_addr #3

; Function Attrs: inlinehint nounwind sspstrong uwtable
define dso_local i64 @atol(ptr noundef %0) local_unnamed_addr #2 {
  %2 = tail call i64 @__isoc23_strtol(ptr noundef %0, ptr noundef null, i32 noundef 10) #30
  ret i64 %2
}

; Function Attrs: inlinehint nounwind sspstrong uwtable
define dso_local i64 @atoll(ptr noundef %0) local_unnamed_addr #2 {
  %2 = tail call i64 @__isoc23_strtoll(ptr noundef %0, ptr noundef null, i32 noundef 10) #30
  ret i64 %2
}

declare i64 @__isoc23_strtoll(ptr noundef, ptr noundef, i32 noundef) local_unnamed_addr #3

; Function Attrs: inlinehint nounwind sspstrong uwtable
define dso_local ptr @bsearch(ptr noundef %0, ptr noundef %1, i64 noundef %2, i64 noundef %3, ptr nocapture noundef readonly %4) local_unnamed_addr #2 {
  %6 = icmp eq i64 %2, 0
  br i1 %6, label %24, label %7

7:                                                ; preds = %5, %20
  %8 = phi i64 [ %22, %20 ], [ 0, %5 ]
  %9 = phi i64 [ %21, %20 ], [ %2, %5 ]
  %10 = add i64 %8, %9
  %11 = lshr i64 %10, 1
  %12 = mul i64 %11, %3
  %13 = getelementptr inbounds i8, ptr %1, i64 %12
  %14 = tail call i32 %4(ptr noundef %0, ptr noundef %13) #30
  %15 = icmp slt i32 %14, 0
  br i1 %15, label %20, label %16

16:                                               ; preds = %7
  %17 = icmp eq i32 %14, 0
  br i1 %17, label %24, label %18

18:                                               ; preds = %16
  %19 = add nuw i64 %11, 1
  br label %20

20:                                               ; preds = %7, %18
  %21 = phi i64 [ %9, %18 ], [ %11, %7 ]
  %22 = phi i64 [ %19, %18 ], [ %8, %7 ]
  %23 = icmp ult i64 %22, %21
  br i1 %23, label %7, label %24, !llvm.loop !21

24:                                               ; preds = %16, %20, %5
  %25 = phi ptr [ null, %5 ], [ null, %20 ], [ %13, %16 ]
  ret ptr %25
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare void @llvm.lifetime.start.p0(i64 immarg, ptr nocapture) #6

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare void @llvm.lifetime.end.p0(i64 immarg, ptr nocapture) #6

; Function Attrs: inlinehint mustprogress nofree nounwind sspstrong willreturn uwtable
define dso_local nofpclass(nan inf) double @atof(ptr nocapture noundef readonly %0) local_unnamed_addr #7 {
  %2 = tail call fast nofpclass(nan inf) double @strtod(ptr nocapture noundef %0, ptr noundef null)
  ret double %2
}

; Function Attrs: mustprogress nofree nounwind willreturn
declare nofpclass(nan inf) double @strtod(ptr noundef readonly, ptr nocapture noundef) local_unnamed_addr #8

; Function Attrs: nounwind sspstrong uwtable
define dso_local void @override_options(i8 noundef zeroext %0) local_unnamed_addr #9 {
  %2 = load ptr, ptr @ix86_tune_string, align 8, !tbaa !5
  %3 = icmp eq ptr %2, null
  %4 = icmp eq i8 %0, 0
  %5 = select i1 %4, ptr @.str.46, ptr @.str.43
  %6 = select i1 %4, ptr @.str.47, ptr @.str.44
  %7 = select i1 %4, ptr @.str.45, ptr @.str.42
  %8 = load i32, ptr @flag_omit_frame_pointer, align 4, !tbaa !20
  %9 = icmp eq i32 %8, 2
  br i1 %9, label %10, label %11

10:                                               ; preds = %1
  store i32 0, ptr @flag_omit_frame_pointer, align 4, !tbaa !20
  br label %11

11:                                               ; preds = %10, %1
  %12 = load i32, ptr @flag_asynchronous_unwind_tables, align 4, !tbaa !20
  %13 = icmp eq i32 %12, 2
  br i1 %13, label %14, label %15

14:                                               ; preds = %11
  store i32 0, ptr @flag_asynchronous_unwind_tables, align 4, !tbaa !20
  br label %15

15:                                               ; preds = %14, %11
  %16 = load i32, ptr @flag_pcc_struct_return, align 4, !tbaa !20
  %17 = icmp eq i32 %16, 2
  br i1 %17, label %18, label %19

18:                                               ; preds = %15
  store i32 1, ptr @flag_pcc_struct_return, align 4, !tbaa !20
  br label %19

19:                                               ; preds = %18, %15
  %20 = icmp eq ptr %2, null
  br i1 %20, label %47, label %21

21:                                               ; preds = %19
  %22 = tail call i32 @strcmp(ptr noundef nonnull dereferenceable(1) %2, ptr noundef nonnull dereferenceable(8) @.str.48)
  %23 = icmp eq i32 %22, 0
  br i1 %23, label %30, label %24

24:                                               ; preds = %21
  %25 = tail call i32 @strcmp(ptr noundef nonnull dereferenceable(1) %2, ptr noundef nonnull dereferenceable(5) @.str.9)
  %26 = icmp eq i32 %25, 0
  br i1 %26, label %30, label %27

27:                                               ; preds = %24
  %28 = tail call i32 @strcmp(ptr noundef nonnull dereferenceable(1) %2, ptr noundef nonnull dereferenceable(7) @.str.49)
  %29 = icmp eq i32 %28, 0
  br i1 %29, label %30, label %31

30:                                               ; preds = %27, %24, %21
  store ptr @.str.40, ptr @ix86_tune_string, align 8, !tbaa !5
  br label %63

31:                                               ; preds = %27
  br i1 %4, label %32, label %38

32:                                               ; preds = %31
  %33 = tail call i32 @strcmp(ptr noundef nonnull dereferenceable(1) %2, ptr noundef nonnull dereferenceable(10) @.str.40)
  %34 = icmp eq i32 %33, 0
  br i1 %34, label %63, label %35

35:                                               ; preds = %32
  %36 = tail call i32 @strcmp(ptr noundef nonnull dereferenceable(1) %2, ptr noundef nonnull dereferenceable(10) @.str.41)
  %37 = icmp eq i32 %36, 0
  br i1 %37, label %63, label %38

38:                                               ; preds = %35, %31
  %39 = tail call i32 @strncmp(ptr noundef nonnull dereferenceable(1) %2, ptr noundef nonnull dereferenceable(8) @.str.48, i64 noundef 7)
  %40 = icmp eq i32 %39, 0
  br i1 %40, label %41, label %42

41:                                               ; preds = %38
  tail call void (ptr, ...) @error(ptr noundef nonnull @.str.50, ptr noundef nonnull %2, ptr noundef nonnull %7, ptr noundef nonnull %5, ptr noundef nonnull %6) #30
  br label %63

42:                                               ; preds = %38
  %43 = tail call i32 @strcmp(ptr noundef nonnull dereferenceable(1) %2, ptr noundef nonnull dereferenceable(7) @.str.30)
  %44 = icmp eq i32 %43, 0
  br i1 %44, label %45, label %63

45:                                               ; preds = %42
  %46 = tail call zeroext i8 (i32, ptr, ...) @warning(i32 noundef 67, ptr noundef nonnull @.str.51, ptr noundef nonnull %7, ptr noundef nonnull %5, ptr noundef nonnull %7, ptr noundef nonnull %5, ptr noundef nonnull %7, ptr noundef nonnull %5) #30
  br label %63

47:                                               ; preds = %19
  %48 = load ptr, ptr @ix86_arch_string, align 8, !tbaa !5
  %49 = icmp eq ptr %48, null
  br i1 %49, label %51, label %50

50:                                               ; preds = %47
  store ptr %48, ptr @ix86_tune_string, align 8, !tbaa !5
  br label %52

51:                                               ; preds = %47
  store ptr @.str.48, ptr @ix86_tune_string, align 8, !tbaa !5
  store i32 1, ptr @ix86_tune_defaulted, align 4, !tbaa !20
  br label %52

52:                                               ; preds = %50, %51
  %53 = phi ptr [ %48, %50 ], [ @.str.48, %51 ]
  %54 = tail call i32 @strcmp(ptr noundef nonnull dereferenceable(1) %53, ptr noundef nonnull dereferenceable(8) @.str.48)
  %55 = icmp eq i32 %54, 0
  br i1 %55, label %62, label %56

56:                                               ; preds = %52
  %57 = tail call i32 @strcmp(ptr noundef nonnull dereferenceable(1) %53, ptr noundef nonnull dereferenceable(7) @.str.30)
  %58 = icmp eq i32 %57, 0
  br i1 %58, label %62, label %59

59:                                               ; preds = %56
  %60 = tail call i32 @strcmp(ptr noundef nonnull dereferenceable(1) %53, ptr noundef nonnull dereferenceable(5) @.str.9)
  %61 = icmp eq i32 %60, 0
  br i1 %61, label %62, label %63

62:                                               ; preds = %59, %56, %52
  store ptr @.str.40, ptr @ix86_tune_string, align 8, !tbaa !5
  br label %63

63:                                               ; preds = %59, %62, %30, %41, %45, %42, %32, %35
  %64 = load ptr, ptr @ix86_stringop_string, align 8, !tbaa !5
  %65 = icmp eq ptr %64, null
  br i1 %65, label %91, label %66

66:                                               ; preds = %63
  %67 = tail call i32 @strcmp(ptr noundef nonnull dereferenceable(1) %64, ptr noundef nonnull dereferenceable(9) @.str.52)
  %68 = icmp eq i32 %67, 0
  br i1 %68, label %69, label %70

69:                                               ; preds = %66
  store i32 2, ptr @stringop_alg, align 4, !tbaa !16
  br label %91

70:                                               ; preds = %66
  %71 = tail call i32 @strcmp(ptr noundef nonnull dereferenceable(1) %64, ptr noundef nonnull dereferenceable(8) @.str.53)
  %72 = icmp eq i32 %71, 0
  br i1 %72, label %73, label %74

73:                                               ; preds = %70
  store i32 1, ptr @stringop_alg, align 4, !tbaa !16
  br label %91

74:                                               ; preds = %70
  %75 = tail call i32 @strcmp(ptr noundef nonnull dereferenceable(1) %64, ptr noundef nonnull dereferenceable(10) @.str.54)
  %76 = icmp eq i32 %75, 0
  br i1 %76, label %77, label %78

77:                                               ; preds = %74
  store i32 3, ptr @stringop_alg, align 4, !tbaa !16
  br label %91

78:                                               ; preds = %74
  %79 = tail call i32 @strcmp(ptr noundef nonnull dereferenceable(1) %64, ptr noundef nonnull dereferenceable(10) @.str.56)
  %80 = icmp eq i32 %79, 0
  br i1 %80, label %81, label %82

81:                                               ; preds = %78
  store i32 5, ptr @stringop_alg, align 4, !tbaa !16
  br label %91

82:                                               ; preds = %78
  %83 = tail call i32 @strcmp(ptr noundef nonnull dereferenceable(1) %64, ptr noundef nonnull dereferenceable(5) @.str.57)
  %84 = icmp eq i32 %83, 0
  br i1 %84, label %85, label %86

85:                                               ; preds = %82
  store i32 6, ptr @stringop_alg, align 4, !tbaa !16
  br label %91

86:                                               ; preds = %82
  %87 = tail call i32 @strcmp(ptr noundef nonnull dereferenceable(1) %64, ptr noundef nonnull dereferenceable(14) @.str.58)
  %88 = icmp eq i32 %87, 0
  br i1 %88, label %89, label %90

89:                                               ; preds = %86
  store i32 7, ptr @stringop_alg, align 4, !tbaa !16
  br label %91

90:                                               ; preds = %86
  tail call void (ptr, ...) @error(ptr noundef nonnull @.str.59, ptr noundef nonnull %64, ptr noundef nonnull %7, ptr noundef nonnull %5, ptr noundef nonnull %6) #30
  br label %91

91:                                               ; preds = %69, %77, %81, %89, %90, %85, %73, %63
  %92 = load ptr, ptr @ix86_arch_string, align 8, !tbaa !5
  %93 = icmp eq ptr %92, null
  br i1 %93, label %94, label %95

94:                                               ; preds = %91
  store ptr @.str, ptr @ix86_arch_string, align 8, !tbaa !5
  br label %96

95:                                               ; preds = %91
  store i32 1, ptr @ix86_arch_specified, align 4, !tbaa !20
  br label %96

96:                                               ; preds = %95, %94
  %97 = load ptr, ptr @ix86_abi_string, align 8, !tbaa !5
  %98 = icmp eq ptr %97, null
  br i1 %98, label %108, label %99

99:                                               ; preds = %96
  %100 = tail call i32 @strcmp(ptr noundef nonnull dereferenceable(1) %97, ptr noundef nonnull dereferenceable(5) @.str.60)
  %101 = icmp eq i32 %100, 0
  br i1 %101, label %102, label %103

102:                                              ; preds = %99
  store i32 0, ptr @ix86_abi, align 4, !tbaa !16
  br label %109

103:                                              ; preds = %99
  %104 = tail call i32 @strcmp(ptr noundef nonnull dereferenceable(1) %97, ptr noundef nonnull dereferenceable(3) @.str.61)
  %105 = icmp eq i32 %104, 0
  br i1 %105, label %106, label %107

106:                                              ; preds = %103
  store i32 1, ptr @ix86_abi, align 4, !tbaa !16
  br label %109

107:                                              ; preds = %103
  tail call void (ptr, ...) @error(ptr noundef nonnull @.str.62, ptr noundef nonnull %97, ptr noundef nonnull %7, ptr noundef nonnull %5, ptr noundef nonnull %6) #30
  br label %109

108:                                              ; preds = %96
  store i32 0, ptr @ix86_abi, align 4, !tbaa !16
  br label %109

109:                                              ; preds = %102, %107, %106, %108
  %110 = load ptr, ptr @ix86_cmodel_string, align 8, !tbaa !5
  %111 = icmp eq ptr %110, null
  br i1 %111, label %144, label %112

112:                                              ; preds = %109
  %113 = tail call i32 @strcmp(ptr noundef nonnull dereferenceable(1) %110, ptr noundef nonnull dereferenceable(6) @.str.63)
  %114 = icmp eq i32 %113, 0
  br i1 %114, label %115, label %119

115:                                              ; preds = %112
  %116 = load i32, ptr @flag_pic, align 4, !tbaa !20
  %117 = icmp eq i32 %116, 0
  %118 = select i1 %117, i32 1, i32 5
  store i32 %118, ptr @ix86_cmodel, align 4, !tbaa !16
  br label %145

119:                                              ; preds = %112
  %120 = tail call i32 @strcmp(ptr noundef nonnull dereferenceable(1) %110, ptr noundef nonnull dereferenceable(7) @.str.64)
  %121 = icmp eq i32 %120, 0
  br i1 %121, label %122, label %126

122:                                              ; preds = %119
  %123 = load i32, ptr @flag_pic, align 4, !tbaa !20
  %124 = icmp eq i32 %123, 0
  %125 = select i1 %124, i32 3, i32 6
  store i32 %125, ptr @ix86_cmodel, align 4, !tbaa !16
  br label %145

126:                                              ; preds = %119
  %127 = tail call i32 @strcmp(ptr noundef nonnull dereferenceable(1) %110, ptr noundef nonnull dereferenceable(6) @.str.65)
  %128 = icmp eq i32 %127, 0
  %129 = load i32, ptr @flag_pic, align 4
  %130 = icmp eq i32 %129, 0
  br i1 %128, label %131, label %133

131:                                              ; preds = %126
  %132 = select i1 %130, i32 4, i32 7
  store i32 %132, ptr @ix86_cmodel, align 4, !tbaa !16
  br label %145

133:                                              ; preds = %126
  br i1 %130, label %135, label %134

134:                                              ; preds = %133
  tail call void (ptr, ...) @error(ptr noundef nonnull @.str.66, ptr noundef nonnull %110) #30
  br label %145

135:                                              ; preds = %133
  %136 = tail call i32 @strcmp(ptr noundef nonnull dereferenceable(1) %110, ptr noundef nonnull dereferenceable(3) @.str.67)
  %137 = icmp eq i32 %136, 0
  br i1 %137, label %138, label %139

138:                                              ; preds = %135
  store i32 0, ptr @ix86_cmodel, align 4, !tbaa !16
  br label %145

139:                                              ; preds = %135
  %140 = tail call i32 @strcmp(ptr noundef nonnull dereferenceable(1) %110, ptr noundef nonnull dereferenceable(7) @.str.68)
  %141 = icmp eq i32 %140, 0
  br i1 %141, label %142, label %143

142:                                              ; preds = %139
  store i32 2, ptr @ix86_cmodel, align 4, !tbaa !16
  br label %145

143:                                              ; preds = %139
  tail call void (ptr, ...) @error(ptr noundef nonnull @.str.69, ptr noundef nonnull %110, ptr noundef nonnull %7, ptr noundef nonnull %5, ptr noundef nonnull %6) #30
  br label %145

144:                                              ; preds = %109
  store i32 0, ptr @ix86_cmodel, align 4, !tbaa !16
  br label %145

145:                                              ; preds = %115, %131, %138, %143, %142, %134, %122, %144
  %146 = load ptr, ptr @ix86_asm_string, align 8, !tbaa !5
  %147 = icmp eq ptr %146, null
  br i1 %147, label %157, label %148

148:                                              ; preds = %145
  %149 = tail call i32 @strcmp(ptr noundef nonnull dereferenceable(1) %146, ptr noundef nonnull dereferenceable(6) @.str.70)
  %150 = icmp eq i32 %149, 0
  br i1 %150, label %151, label %152

151:                                              ; preds = %148
  store i32 1, ptr @ix86_asm_dialect, align 4, !tbaa !16
  br label %157

152:                                              ; preds = %148
  %153 = tail call i32 @strcmp(ptr noundef nonnull dereferenceable(1) %146, ptr noundef nonnull dereferenceable(4) @.str.71)
  %154 = icmp eq i32 %153, 0
  br i1 %154, label %155, label %156

155:                                              ; preds = %152
  store i32 0, ptr @ix86_asm_dialect, align 4, !tbaa !16
  br label %157

156:                                              ; preds = %152
  tail call void (ptr, ...) @error(ptr noundef nonnull @.str.72, ptr noundef nonnull %146, ptr noundef nonnull %7, ptr noundef nonnull %5, ptr noundef nonnull %6) #30
  br label %157

157:                                              ; preds = %151, %156, %155, %145
  %158 = load i32, ptr @ix86_cmodel, align 4, !tbaa !16
  %159 = icmp eq i32 %158, 0
  br i1 %159, label %162, label %160

160:                                              ; preds = %157
  %161 = load ptr, ptr @ix86_cmodel_string, align 8, !tbaa !5
  tail call void (ptr, ...) @error(ptr noundef nonnull @.str.73, ptr noundef %161, ptr noundef nonnull @.str.67) #30
  br label %162

162:                                              ; preds = %160, %157
  %163 = load i32, ptr @ix86_isa_flags, align 4, !tbaa !20
  %164 = and i32 %163, 4
  %165 = icmp eq i32 %164, 0
  br i1 %165, label %167, label %166

166:                                              ; preds = %162
  tail call void (ptr, ...) @sorry(ptr noundef nonnull @.str.74, i32 noundef 64) #30
  br label %167

167:                                              ; preds = %166, %162
  %168 = load ptr, ptr @ix86_arch_string, align 8, !tbaa !5
  br label %169

169:                                              ; preds = %167, %309
  %170 = phi i64 [ 0, %167 ], [ %310, %309 ]
  %171 = getelementptr inbounds [42 x %struct.pta], ptr @override_options.processor_alias_table, i64 0, i64 %170
  %172 = load ptr, ptr %171, align 8, !tbaa !23
  %173 = tail call i32 @strcmp(ptr noundef nonnull dereferenceable(1) %168, ptr noundef nonnull dereferenceable(1) %172)
  %174 = icmp eq i32 %173, 0
  br i1 %174, label %175, label %309

175:                                              ; preds = %169
  %176 = trunc i64 %170 to i32
  %177 = getelementptr inbounds [42 x %struct.pta], ptr @override_options.processor_alias_table, i64 0, i64 %170, i32 2
  %178 = load i32, ptr %177, align 4, !tbaa !25
  store i32 %178, ptr @ix86_schedule, align 4, !tbaa !16
  %179 = getelementptr inbounds [42 x %struct.pta], ptr @override_options.processor_alias_table, i64 0, i64 %170, i32 1
  %180 = load i32, ptr %179, align 8, !tbaa !26
  store i32 %180, ptr @ix86_arch, align 4, !tbaa !16
  store i32 %180, ptr @ix86_tune, align 4, !tbaa !16
  %181 = lshr i64 3298534884879, %170
  %182 = and i64 %181, 1
  %183 = icmp eq i64 %182, 0
  br i1 %183, label %184, label %191

184:                                              ; preds = %175
  %185 = load i32, ptr @ix86_isa_flags_explicit, align 4, !tbaa !20
  %186 = and i32 %185, 2048
  %187 = icmp eq i32 %186, 0
  br i1 %187, label %188, label %191

188:                                              ; preds = %184
  %189 = load i32, ptr @ix86_isa_flags, align 4, !tbaa !20
  %190 = or i32 %189, 2048
  store i32 %190, ptr @ix86_isa_flags, align 4, !tbaa !20
  br label %191

191:                                              ; preds = %188, %184, %175
  %192 = lshr i64 3299614916415, %170
  %193 = and i64 %192, 1
  %194 = icmp eq i64 %193, 0
  br i1 %194, label %195, label %202

195:                                              ; preds = %191
  %196 = load i32, ptr @ix86_isa_flags_explicit, align 4, !tbaa !20
  %197 = and i32 %196, 1
  %198 = icmp eq i32 %197, 0
  br i1 %198, label %199, label %202

199:                                              ; preds = %195
  %200 = load i32, ptr @ix86_isa_flags, align 4, !tbaa !20
  %201 = or i32 %200, 1
  store i32 %201, ptr @ix86_isa_flags, align 4, !tbaa !20
  br label %202

202:                                              ; preds = %199, %195, %191
  %203 = lshr i64 3299640082431, %170
  %204 = and i64 %203, 1
  %205 = icmp eq i64 %204, 0
  br i1 %205, label %206, label %213

206:                                              ; preds = %202
  %207 = load i32, ptr @ix86_isa_flags_explicit, align 4, !tbaa !20
  %208 = and i32 %207, 2
  %209 = icmp eq i32 %208, 0
  br i1 %209, label %210, label %213

210:                                              ; preds = %206
  %211 = load i32, ptr @ix86_isa_flags, align 4, !tbaa !20
  %212 = or i32 %211, 2
  store i32 %212, ptr @ix86_isa_flags, align 4, !tbaa !20
  br label %213

213:                                              ; preds = %210, %206, %202
  %214 = lshr i64 3298667007743, %170
  %215 = and i64 %214, 1
  %216 = icmp eq i64 %215, 0
  br i1 %216, label %217, label %224

217:                                              ; preds = %213
  %218 = load i32, ptr @ix86_isa_flags_explicit, align 4, !tbaa !20
  %219 = and i32 %218, 65536
  %220 = icmp eq i32 %219, 0
  br i1 %220, label %221, label %224

221:                                              ; preds = %217
  %222 = load i32, ptr @ix86_isa_flags, align 4, !tbaa !20
  %223 = or i32 %222, 65536
  store i32 %223, ptr @ix86_isa_flags, align 4, !tbaa !20
  br label %224

224:                                              ; preds = %221, %217, %213
  %225 = lshr i64 3299606544383, %170
  %226 = and i64 %225, 1
  %227 = icmp eq i64 %226, 0
  br i1 %227, label %228, label %235

228:                                              ; preds = %224
  %229 = load i32, ptr @ix86_isa_flags_explicit, align 4, !tbaa !20
  %230 = and i32 %229, 131072
  %231 = icmp eq i32 %230, 0
  br i1 %231, label %232, label %235

232:                                              ; preds = %228
  %233 = load i32, ptr @ix86_isa_flags, align 4, !tbaa !20
  %234 = or i32 %233, 131072
  store i32 %234, ptr @ix86_isa_flags, align 4, !tbaa !20
  br label %235

235:                                              ; preds = %232, %228, %224
  %236 = lshr i64 3483216510975, %170
  %237 = and i64 %236, 1
  %238 = icmp eq i64 %237, 0
  br i1 %238, label %239, label %246

239:                                              ; preds = %235
  %240 = load i32, ptr @ix86_isa_flags_explicit, align 4, !tbaa !20
  %241 = and i32 %240, 262144
  %242 = icmp eq i32 %241, 0
  br i1 %242, label %243, label %246

243:                                              ; preds = %239
  %244 = load i32, ptr @ix86_isa_flags, align 4, !tbaa !20
  %245 = or i32 %244, 262144
  store i32 %245, ptr @ix86_isa_flags, align 4, !tbaa !20
  br label %246

246:                                              ; preds = %243, %239, %235
  %247 = add i32 %176, -19
  %248 = icmp ult i32 %247, 2
  br i1 %248, label %249, label %253

249:                                              ; preds = %246
  %250 = load i32, ptr @ix86_isa_flags_explicit, align 4, !tbaa !20
  %251 = and i32 %250, 4194304
  %252 = icmp eq i32 %251, 0
  br i1 %252, label %266, label %271

253:                                              ; preds = %246
  %254 = add nsw i32 %176, -40
  %255 = icmp ult i32 %254, -2
  %256 = load i32, ptr @ix86_isa_flags_explicit, align 4, !tbaa !20
  br i1 %255, label %271, label %257

257:                                              ; preds = %253
  %258 = and i32 %256, 2097152
  %259 = icmp eq i32 %258, 0
  br i1 %259, label %260, label %263

260:                                              ; preds = %257
  %261 = load i32, ptr @ix86_isa_flags, align 4, !tbaa !20
  %262 = or i32 %261, 2097152
  store i32 %262, ptr @ix86_isa_flags, align 4, !tbaa !20
  br label %263

263:                                              ; preds = %257, %260
  %264 = and i32 %256, 8
  %265 = icmp eq i32 %264, 0
  br i1 %265, label %266, label %271

266:                                              ; preds = %263, %249
  %267 = phi i32 [ 4194304, %249 ], [ 8, %263 ]
  %268 = phi i32 [ %250, %249 ], [ %256, %263 ]
  %269 = load i32, ptr @ix86_isa_flags, align 4, !tbaa !20
  %270 = or i32 %269, %267
  store i32 %270, ptr @ix86_isa_flags, align 4, !tbaa !20
  br label %271

271:                                              ; preds = %266, %249, %253, %263
  %272 = phi i32 [ %256, %263 ], [ %256, %253 ], [ %250, %249 ], [ %268, %266 ]
  %273 = phi i1 [ false, %263 ], [ true, %253 ], [ true, %249 ], [ %248, %266 ]
  %274 = lshr i64 3573410955263, %170
  %275 = and i64 %274, 1
  %276 = icmp eq i64 %275, 0
  %277 = and i32 %272, 128
  %278 = icmp eq i32 %277, 0
  %279 = select i1 %276, i1 %278, i1 false
  br i1 %279, label %280, label %283

280:                                              ; preds = %271
  %281 = load i32, ptr @ix86_isa_flags, align 4, !tbaa !20
  %282 = or i32 %281, 128
  store i32 %282, ptr @ix86_isa_flags, align 4, !tbaa !20
  br label %283

283:                                              ; preds = %280, %271
  %284 = and i32 %272, 16384
  %285 = icmp ne i32 %284, 0
  %286 = select i1 %273, i1 true, i1 %285
  br i1 %286, label %290, label %287

287:                                              ; preds = %283
  %288 = load i32, ptr @ix86_isa_flags, align 4, !tbaa !20
  %289 = or i32 %288, 16384
  store i32 %289, ptr @ix86_isa_flags, align 4, !tbaa !20
  br label %290

290:                                              ; preds = %287, %283
  %291 = and i32 %272, 32768
  %292 = icmp eq i32 %291, 0
  br i1 %292, label %293, label %296

293:                                              ; preds = %290
  %294 = load i32, ptr @ix86_isa_flags, align 4, !tbaa !20
  %295 = or i32 %294, 32768
  store i32 %295, ptr @ix86_isa_flags, align 4, !tbaa !20
  br label %296

296:                                              ; preds = %293, %290
  %297 = icmp eq i32 %176, 20
  %298 = and i32 %272, 4096
  %299 = icmp eq i32 %298, 0
  %300 = and i1 %297, %299
  br i1 %300, label %301, label %304

301:                                              ; preds = %296
  %302 = load i32, ptr @ix86_isa_flags, align 4, !tbaa !20
  %303 = or i32 %302, 4096
  store i32 %303, ptr @ix86_isa_flags, align 4, !tbaa !20
  br label %304

304:                                              ; preds = %301, %296
  %305 = lshr i64 3298564247295, %170
  %306 = and i64 %305, 1
  %307 = icmp eq i64 %306, 0
  br i1 %307, label %308, label %312

308:                                              ; preds = %304
  store i32 1, ptr @x86_prefetch_sse, align 4, !tbaa !20
  br label %312

309:                                              ; preds = %169
  %310 = add nuw nsw i64 %170, 1
  %311 = icmp eq i64 %310, 42
  br i1 %311, label %312, label %169, !llvm.loop !27

312:                                              ; preds = %309, %304, %308
  %313 = phi i32 [ %176, %304 ], [ %176, %308 ], [ 42, %309 ]
  %314 = tail call i32 @strcmp(ptr noundef nonnull dereferenceable(1) %168, ptr noundef nonnull dereferenceable(8) @.str.48)
  %315 = icmp eq i32 %314, 0
  br i1 %315, label %316, label %317

316:                                              ; preds = %312
  tail call void (ptr, ...) @error(ptr noundef nonnull @.str.75, ptr noundef nonnull %7, ptr noundef nonnull %5, ptr noundef nonnull %6) #30
  br label %323

317:                                              ; preds = %312
  %318 = tail call i32 @strncmp(ptr noundef nonnull dereferenceable(1) %168, ptr noundef nonnull dereferenceable(8) @.str.48, i64 noundef 7)
  %319 = icmp eq i32 %318, 0
  %320 = icmp eq i32 %313, 42
  %321 = or i1 %320, %319
  br i1 %321, label %322, label %323

322:                                              ; preds = %317
  tail call void (ptr, ...) @error(ptr noundef nonnull @.str.76, ptr noundef %168, ptr noundef nonnull %7, ptr noundef nonnull %5, ptr noundef nonnull %6) #30
  br label %323

323:                                              ; preds = %322, %317, %316
  %324 = load i32, ptr @ix86_arch, align 4, !tbaa !16
  %325 = shl nuw i32 1, %324
  %326 = and i32 %325, -40
  %327 = icmp ne i32 %326, 0
  %328 = zext i1 %327 to i8
  store i8 %328, ptr @ix86_arch_features, align 1, !tbaa !16
  %329 = icmp ne i32 %324, 0
  %330 = zext i1 %329 to i8
  store i8 %330, ptr getelementptr inbounds ([5 x i8], ptr @ix86_arch_features, i64 0, i64 1), align 1, !tbaa !16
  %331 = icmp ugt i32 %324, 1
  %332 = zext i1 %331 to i8
  store i8 %332, ptr getelementptr inbounds ([5 x i8], ptr @ix86_arch_features, i64 0, i64 2), align 1, !tbaa !16
  store i8 %330, ptr getelementptr inbounds ([5 x i8], ptr @ix86_arch_features, i64 0, i64 3), align 1, !tbaa !16
  store i8 %330, ptr getelementptr inbounds ([5 x i8], ptr @ix86_arch_features, i64 0, i64 4), align 1, !tbaa !16
  %333 = load ptr, ptr @ix86_tune_string, align 8, !tbaa !5
  br label %334

334:                                              ; preds = %323, %350
  %335 = phi i64 [ 0, %323 ], [ %351, %350 ]
  %336 = getelementptr inbounds [42 x %struct.pta], ptr @override_options.processor_alias_table, i64 0, i64 %335
  %337 = load ptr, ptr %336, align 8, !tbaa !23
  %338 = tail call i32 @strcmp(ptr noundef nonnull dereferenceable(1) %333, ptr noundef nonnull dereferenceable(1) %337)
  %339 = icmp eq i32 %338, 0
  br i1 %339, label %340, label %350

340:                                              ; preds = %334
  %341 = getelementptr inbounds [42 x %struct.pta], ptr @override_options.processor_alias_table, i64 0, i64 %335, i32 2
  %342 = load i32, ptr %341, align 4, !tbaa !25
  store i32 %342, ptr @ix86_schedule, align 4, !tbaa !16
  %343 = getelementptr inbounds [42 x %struct.pta], ptr @override_options.processor_alias_table, i64 0, i64 %335, i32 1
  %344 = load i32, ptr %343, align 8, !tbaa !26
  store i32 %344, ptr @ix86_tune, align 4, !tbaa !16
  br i1 %327, label %345, label %355

345:                                              ; preds = %340
  %346 = lshr i64 3298564247295, %335
  %347 = and i64 %346, 1
  %348 = icmp eq i64 %347, 0
  br i1 %348, label %349, label %355

349:                                              ; preds = %345
  store i32 1, ptr @x86_prefetch_sse, align 4, !tbaa !20
  br label %355

350:                                              ; preds = %334
  %351 = add nuw nsw i64 %335, 1
  %352 = icmp eq i64 %351, 42
  br i1 %352, label %353, label %334, !llvm.loop !28

353:                                              ; preds = %350
  br i1 %3, label %355, label %354

354:                                              ; preds = %353
  tail call void (ptr, ...) @error(ptr noundef nonnull @.str.50, ptr noundef %333, ptr noundef nonnull %7, ptr noundef nonnull %5, ptr noundef nonnull %6) #30
  br label %355

355:                                              ; preds = %349, %345, %340, %354, %353
  %356 = load i32, ptr @ix86_tune, align 4, !tbaa !16
  %357 = shl nuw i32 1, %356
  %358 = insertelement <8 x i32> poison, i32 %357, i64 0
  %359 = shufflevector <8 x i32> %358, <8 x i32> poison, <8 x i32> zeroinitializer
  %360 = and <8 x i32> %359, <i32 13681, i32 16369, i32 6, i32 32110, i32 31224, i32 0, i32 -2, i32 32696>
  %361 = icmp ne <8 x i32> %360, zeroinitializer
  %362 = zext <8 x i1> %361 to <8 x i8>
  store <8 x i8> %362, ptr @ix86_tune_features, align 16, !tbaa !16
  %363 = and <8 x i32> %359, <i32 32728, i32 8, i32 7168, i32 51, i32 -32077, i32 32, i32 -23589, i32 128>
  %364 = icmp ne <8 x i32> %363, zeroinitializer
  %365 = zext <8 x i1> %364 to <8 x i8>
  store <8 x i8> %365, ptr getelementptr inbounds ([62 x i8], ptr @ix86_tune_features, i64 0, i64 8), align 8, !tbaa !16
  %366 = and <8 x i32> %359, <i32 8, i32 -5, i32 -13, i32 32119, i32 -8, i32 641, i32 -1, i32 -9>
  %367 = icmp ne <8 x i32> %366, zeroinitializer
  %368 = zext <8 x i1> %367 to <8 x i8>
  store <8 x i8> %368, ptr getelementptr inbounds ([62 x i8], ptr @ix86_tune_features, i64 0, i64 16), align 16, !tbaa !16
  %369 = and <8 x i32> %359, <i32 0, i32 8, i32 32752, i32 32763, i32 32712, i32 32715, i32 -32729, i32 32704>
  %370 = icmp ne <8 x i32> %369, zeroinitializer
  %371 = zext <8 x i1> %370 to <8 x i8>
  store <8 x i8> %371, ptr getelementptr inbounds ([62 x i8], ptr @ix86_tune_features, i64 0, i64 24), align 8, !tbaa !16
  %372 = and <8 x i32> %359, <i32 32392, i32 8192, i32 320, i32 8512, i32 648, i32 32704, i32 23880, i32 23880>
  %373 = icmp ne <8 x i32> %372, zeroinitializer
  %374 = zext <8 x i1> %373 to <8 x i8>
  store <8 x i8> %374, ptr getelementptr inbounds ([62 x i8], ptr @ix86_tune_features, i64 0, i64 32), align 16, !tbaa !16
  %375 = and <8 x i32> %359, <i32 -3, i32 8512, i32 -14657, i32 -8193, i32 32712, i32 32124, i32 32064, i32 -23169>
  %376 = icmp ne <8 x i32> %375, zeroinitializer
  %377 = zext <8 x i1> %376 to <8 x i8>
  store <8 x i8> %377, ptr getelementptr inbounds ([62 x i8], ptr @ix86_tune_features, i64 0, i64 40), align 8, !tbaa !16
  %378 = and <8 x i32> %359, <i32 15680, i32 24568, i32 -257, i32 4352, i32 -4, i32 12544, i32 12544, i32 4>
  %379 = icmp ne <8 x i32> %378, zeroinitializer
  %380 = zext <8 x i1> %379 to <8 x i8>
  store <8 x i8> %380, ptr getelementptr inbounds ([62 x i8], ptr @ix86_tune_features, i64 0, i64 48), align 16, !tbaa !16
  %381 = icmp eq i32 %356, 2
  %382 = zext i1 %381 to i8
  store i8 %382, ptr getelementptr inbounds ([62 x i8], ptr @ix86_tune_features, i64 0, i64 56), align 8, !tbaa !16
  %383 = icmp eq i32 %356, 5
  %384 = zext i1 %383 to i8
  store i8 %384, ptr getelementptr inbounds ([62 x i8], ptr @ix86_tune_features, i64 0, i64 57), align 1, !tbaa !16
  %385 = and i32 %357, 14336
  %386 = icmp ne i32 %385, 0
  %387 = zext i1 %386 to i8
  store i8 %387, ptr getelementptr inbounds ([62 x i8], ptr @ix86_tune_features, i64 0, i64 58), align 2, !tbaa !16
  %388 = icmp eq i32 %356, 13
  %389 = zext i1 %388 to i8
  store i8 %389, ptr getelementptr inbounds ([62 x i8], ptr @ix86_tune_features, i64 0, i64 59), align 1, !tbaa !16
  %390 = icmp eq i32 %356, 10
  %391 = zext i1 %390 to i8
  store i8 %391, ptr getelementptr inbounds ([62 x i8], ptr @ix86_tune_features, i64 0, i64 60), align 4, !tbaa !16
  %392 = icmp eq i32 %356, 14
  %393 = zext i1 %392 to i8
  store i8 %393, ptr getelementptr inbounds ([62 x i8], ptr @ix86_tune_features, i64 0, i64 61), align 1, !tbaa !16
  %394 = load i32, ptr @optimize_size, align 4, !tbaa !20
  %395 = icmp eq i32 %394, 0
  br i1 %395, label %396, label %400

396:                                              ; preds = %355
  %397 = zext i32 %356 to i64
  %398 = getelementptr inbounds [15 x %struct.ptt], ptr @processor_target_table, i64 0, i64 %397
  %399 = load ptr, ptr %398, align 16, !tbaa !29
  br label %400

400:                                              ; preds = %355, %396
  %401 = phi ptr [ %399, %396 ], [ @ix86_size_cost, %355 ]
  store ptr %401, ptr @ix86_cost, align 8, !tbaa !5
  store ptr @ix86_init_machine_status, ptr @init_machine_status, align 8, !tbaa !5
  %402 = load ptr, ptr @ix86_regparm_string, align 8, !tbaa !5
  %403 = icmp eq ptr %402, null
  br i1 %403, label %410, label %404

404:                                              ; preds = %400
  %405 = tail call i64 @__isoc23_strtol(ptr noundef nonnull %402, ptr noundef null, i32 noundef 10) #30
  %406 = trunc i64 %405 to i32
  %407 = icmp ugt i32 %406, 3
  br i1 %407, label %408, label %409

408:                                              ; preds = %404
  tail call void (ptr, ...) @error(ptr noundef nonnull @.str.77, ptr noundef nonnull %7, i32 noundef %406, ptr noundef nonnull %5, i32 noundef 3) #30
  br label %410

409:                                              ; preds = %404
  store i32 %406, ptr @ix86_regparm, align 4, !tbaa !20
  br label %410

410:                                              ; preds = %408, %409, %400
  %411 = load ptr, ptr @ix86_align_loops_string, align 8, !tbaa !5
  %412 = icmp eq ptr %411, null
  br i1 %412, label %425, label %413

413:                                              ; preds = %410
  %414 = tail call zeroext i8 (i32, ptr, ...) @warning(i32 noundef 0, ptr noundef nonnull @.str.78, ptr noundef nonnull %7, ptr noundef nonnull %5, ptr noundef nonnull %5) #30
  %415 = load i32, ptr @align_loops, align 4, !tbaa !20
  %416 = icmp eq i32 %415, 0
  br i1 %416, label %417, label %425

417:                                              ; preds = %413
  %418 = load ptr, ptr @ix86_align_loops_string, align 8, !tbaa !5
  %419 = tail call i64 @__isoc23_strtol(ptr noundef %418, ptr noundef null, i32 noundef 10) #30
  %420 = trunc i64 %419 to i32
  %421 = icmp ugt i32 %420, 16
  br i1 %421, label %422, label %423

422:                                              ; preds = %417
  tail call void (ptr, ...) @error(ptr noundef nonnull @.str.79, ptr noundef nonnull %7, i32 noundef %420, ptr noundef nonnull %5, i32 noundef 16) #30
  br label %425

423:                                              ; preds = %417
  %424 = shl nuw nsw i32 1, %420
  store i32 %424, ptr @align_loops, align 4, !tbaa !20
  br label %425

425:                                              ; preds = %413, %423, %422, %410
  %426 = load ptr, ptr @ix86_align_jumps_string, align 8, !tbaa !5
  %427 = icmp eq ptr %426, null
  br i1 %427, label %440, label %428

428:                                              ; preds = %425
  %429 = tail call zeroext i8 (i32, ptr, ...) @warning(i32 noundef 0, ptr noundef nonnull @.str.80, ptr noundef nonnull %7, ptr noundef nonnull %5, ptr noundef nonnull %5) #30
  %430 = load i32, ptr @align_jumps, align 4, !tbaa !20
  %431 = icmp eq i32 %430, 0
  br i1 %431, label %432, label %440

432:                                              ; preds = %428
  %433 = load ptr, ptr @ix86_align_jumps_string, align 8, !tbaa !5
  %434 = tail call i64 @__isoc23_strtol(ptr noundef %433, ptr noundef null, i32 noundef 10) #30
  %435 = trunc i64 %434 to i32
  %436 = icmp ugt i32 %435, 16
  br i1 %436, label %437, label %438

437:                                              ; preds = %432
  tail call void (ptr, ...) @error(ptr noundef nonnull @.str.79, ptr noundef nonnull %7, i32 noundef %435, ptr noundef nonnull %5, i32 noundef 16) #30
  br label %440

438:                                              ; preds = %432
  %439 = shl nuw nsw i32 1, %435
  store i32 %439, ptr @align_jumps, align 4, !tbaa !20
  br label %440

440:                                              ; preds = %428, %438, %437, %425
  %441 = load ptr, ptr @ix86_align_funcs_string, align 8, !tbaa !5
  %442 = icmp eq ptr %441, null
  br i1 %442, label %455, label %443

443:                                              ; preds = %440
  %444 = tail call zeroext i8 (i32, ptr, ...) @warning(i32 noundef 0, ptr noundef nonnull @.str.81, ptr noundef nonnull %7, ptr noundef nonnull %5, ptr noundef nonnull %5) #30
  %445 = load i32, ptr @align_functions, align 4, !tbaa !20
  %446 = icmp eq i32 %445, 0
  br i1 %446, label %447, label %455

447:                                              ; preds = %443
  %448 = load ptr, ptr @ix86_align_funcs_string, align 8, !tbaa !5
  %449 = tail call i64 @__isoc23_strtol(ptr noundef %448, ptr noundef null, i32 noundef 10) #30
  %450 = trunc i64 %449 to i32
  %451 = icmp ugt i32 %450, 16
  br i1 %451, label %452, label %453

452:                                              ; preds = %447
  tail call void (ptr, ...) @error(ptr noundef nonnull @.str.79, ptr noundef nonnull %7, i32 noundef %450, ptr noundef nonnull %5, i32 noundef 16) #30
  br label %455

453:                                              ; preds = %447
  %454 = shl nuw nsw i32 1, %450
  store i32 %454, ptr @align_functions, align 4, !tbaa !20
  br label %455

455:                                              ; preds = %443, %453, %452, %440
  %456 = load i32, ptr @align_loops, align 4, !tbaa !20
  %457 = icmp eq i32 %456, 0
  br i1 %457, label %458, label %465

458:                                              ; preds = %455
  %459 = load i32, ptr @ix86_tune, align 4, !tbaa !16
  %460 = zext i32 %459 to i64
  %461 = getelementptr inbounds [15 x %struct.ptt], ptr @processor_target_table, i64 0, i64 %460, i32 1
  %462 = load i32, ptr %461, align 8, !tbaa !31
  store i32 %462, ptr @align_loops, align 4, !tbaa !20
  %463 = getelementptr inbounds [15 x %struct.ptt], ptr @processor_target_table, i64 0, i64 %460, i32 2
  %464 = load i32, ptr %463, align 4, !tbaa !32
  store i32 %464, ptr @align_loops_max_skip, align 4, !tbaa !20
  br label %465

465:                                              ; preds = %458, %455
  %466 = load i32, ptr @align_jumps, align 4, !tbaa !20
  %467 = icmp eq i32 %466, 0
  br i1 %467, label %468, label %475

468:                                              ; preds = %465
  %469 = load i32, ptr @ix86_tune, align 4, !tbaa !16
  %470 = zext i32 %469 to i64
  %471 = getelementptr inbounds [15 x %struct.ptt], ptr @processor_target_table, i64 0, i64 %470, i32 3
  %472 = load i32, ptr %471, align 16, !tbaa !33
  store i32 %472, ptr @align_jumps, align 4, !tbaa !20
  %473 = getelementptr inbounds [15 x %struct.ptt], ptr @processor_target_table, i64 0, i64 %470, i32 4
  %474 = load i32, ptr %473, align 4, !tbaa !34
  store i32 %474, ptr @align_jumps_max_skip, align 4, !tbaa !20
  br label %475

475:                                              ; preds = %468, %465
  %476 = load i32, ptr @align_functions, align 4, !tbaa !20
  %477 = icmp eq i32 %476, 0
  br i1 %477, label %478, label %483

478:                                              ; preds = %475
  %479 = load i32, ptr @ix86_tune, align 4, !tbaa !16
  %480 = zext i32 %479 to i64
  %481 = getelementptr inbounds [15 x %struct.ptt], ptr @processor_target_table, i64 0, i64 %480, i32 5
  %482 = load i32, ptr %481, align 8, !tbaa !35
  store i32 %482, ptr @align_functions, align 4, !tbaa !20
  br label %483

483:                                              ; preds = %478, %475
  %484 = load ptr, ptr @ix86_cost, align 8, !tbaa !5
  %485 = getelementptr inbounds %struct.processor_costs, ptr %484, i64 0, i32 28
  %486 = load i32, ptr %485, align 4, !tbaa !36
  store i32 %486, ptr @ix86_branch_cost, align 4, !tbaa !20
  %487 = load ptr, ptr @ix86_branch_cost_string, align 8, !tbaa !5
  %488 = icmp eq ptr %487, null
  br i1 %488, label %495, label %489

489:                                              ; preds = %483
  %490 = tail call i64 @__isoc23_strtol(ptr noundef nonnull %487, ptr noundef null, i32 noundef 10) #30
  %491 = trunc i64 %490 to i32
  %492 = icmp ugt i32 %491, 5
  br i1 %492, label %493, label %494

493:                                              ; preds = %489
  tail call void (ptr, ...) @error(ptr noundef nonnull @.str.82, ptr noundef nonnull %7, i32 noundef %491, ptr noundef nonnull %5) #30
  br label %495

494:                                              ; preds = %489
  store i32 %491, ptr @ix86_branch_cost, align 4, !tbaa !20
  br label %495

495:                                              ; preds = %493, %494, %483
  %496 = load ptr, ptr @ix86_section_threshold_string, align 8, !tbaa !5
  %497 = icmp eq ptr %496, null
  br i1 %497, label %504, label %498

498:                                              ; preds = %495
  %499 = tail call i64 @__isoc23_strtol(ptr noundef nonnull %496, ptr noundef null, i32 noundef 10) #30
  %500 = trunc i64 %499 to i32
  %501 = icmp slt i32 %500, 0
  br i1 %501, label %502, label %503

502:                                              ; preds = %498
  tail call void (ptr, ...) @error(ptr noundef nonnull @.str.83, ptr noundef nonnull %7, i32 noundef %500, ptr noundef nonnull %5) #30
  br label %504

503:                                              ; preds = %498
  store i32 %500, ptr @ix86_section_threshold, align 4, !tbaa !20
  br label %504

504:                                              ; preds = %502, %503, %495
  %505 = load ptr, ptr @ix86_tls_dialect_string, align 8, !tbaa !5
  %506 = icmp eq ptr %505, null
  br i1 %506, label %516, label %507

507:                                              ; preds = %504
  %508 = tail call i32 @strcmp(ptr noundef nonnull dereferenceable(1) %505, ptr noundef nonnull dereferenceable(4) @.str.84)
  %509 = icmp eq i32 %508, 0
  br i1 %509, label %510, label %511

510:                                              ; preds = %507
  store i32 0, ptr @ix86_tls_dialect, align 4, !tbaa !16
  br label %516

511:                                              ; preds = %507
  %512 = tail call i32 @strcmp(ptr noundef nonnull dereferenceable(1) %505, ptr noundef nonnull dereferenceable(5) @.str.85)
  %513 = icmp eq i32 %512, 0
  br i1 %513, label %514, label %515

514:                                              ; preds = %511
  store i32 1, ptr @ix86_tls_dialect, align 4, !tbaa !16
  br label %516

515:                                              ; preds = %511
  tail call void (ptr, ...) @error(ptr noundef nonnull @.str.86, ptr noundef nonnull %505, ptr noundef nonnull %7, ptr noundef nonnull %5, ptr noundef nonnull %6) #30
  br label %516

516:                                              ; preds = %510, %515, %514, %504
  %517 = load ptr, ptr @ix87_precision_string, align 8, !tbaa !5
  %518 = icmp eq ptr %517, null
  br i1 %518, label %523, label %519

519:                                              ; preds = %516
  %520 = tail call i64 @__isoc23_strtol(ptr noundef nonnull %517, ptr noundef null, i32 noundef 10) #30
  %521 = trunc i64 %520 to i32
  switch i32 %521, label %522 [
    i32 80, label %523
    i32 64, label %523
    i32 32, label %523
  ]

522:                                              ; preds = %519
  tail call void (ptr, ...) @error(ptr noundef nonnull @.str.87, i32 noundef %521) #30
  br label %523

523:                                              ; preds = %519, %519, %519, %522, %516
  %524 = load i32, ptr @target_flags_explicit, align 4, !tbaa !20
  %525 = and i32 %524, 16384
  %526 = icmp eq i32 %525, 0
  br i1 %526, label %527, label %530

527:                                              ; preds = %523
  %528 = load i32, ptr @target_flags, align 4, !tbaa !20
  %529 = or i32 %528, 16384
  store i32 %529, ptr @target_flags, align 4, !tbaa !20
  br label %530

530:                                              ; preds = %527, %523
  %531 = load i32, ptr @flag_omit_frame_pointer, align 4, !tbaa !20
  %532 = icmp eq i32 %531, 0
  %533 = load i32, ptr @target_flags, align 4, !tbaa !20
  br i1 %532, label %536, label %534

534:                                              ; preds = %530
  %535 = and i32 %533, -32769
  store i32 %535, ptr @target_flags, align 4, !tbaa !20
  br label %540

536:                                              ; preds = %530
  %537 = and i32 %533, 32768
  %538 = icmp eq i32 %537, 0
  br i1 %538, label %540, label %539

539:                                              ; preds = %536
  store i32 1, ptr @flag_omit_frame_pointer, align 4, !tbaa !20
  br label %540

540:                                              ; preds = %536, %539, %534
  %541 = phi i32 [ %533, %536 ], [ %533, %539 ], [ %535, %534 ]
  %542 = load i32, ptr @flag_finite_math_only, align 4, !tbaa !20
  %543 = icmp eq i32 %542, 0
  %544 = and i32 %541, -129
  %545 = select i1 %543, i32 %541, i32 %544
  %546 = and i32 %325, 32716
  %547 = icmp eq i32 %546, 0
  %548 = and i32 %545, -4097
  %549 = select i1 %547, i32 %545, i32 %548
  %550 = or i32 %542, %546
  %551 = icmp ne i32 %550, 0
  %552 = and i32 %549, 2
  %553 = icmp eq i32 %552, 0
  %554 = or i1 %551, %553
  br i1 %554, label %555, label %558

555:                                              ; preds = %540
  %556 = or i32 %549, 4096
  %557 = select i1 %553, i32 %556, i32 %549
  store i32 %557, ptr @target_flags, align 4, !tbaa !20
  br label %558

558:                                              ; preds = %540, %555
  %559 = load i32, ptr @ix86_isa_flags, align 4, !tbaa !20
  %560 = and i32 %559, 65536
  %561 = icmp eq i32 %560, 0
  br i1 %561, label %567, label %562

562:                                              ; preds = %558
  %563 = load i32, ptr @ix86_isa_flags_explicit, align 4, !tbaa !20
  %564 = and i32 %563, 2048
  %565 = xor i32 %564, 2048
  %566 = or i32 %565, %559
  store i32 %566, ptr @ix86_isa_flags, align 4, !tbaa !20
  store i32 1, ptr @x86_prefetch_sse, align 4, !tbaa !20
  br label %567

567:                                              ; preds = %562, %558
  %568 = phi i32 [ %566, %562 ], [ %559, %558 ]
  %569 = and i32 %568, 1048584
  %570 = icmp eq i32 %569, 0
  br i1 %570, label %576, label %571

571:                                              ; preds = %567
  %572 = load i32, ptr @ix86_isa_flags_explicit, align 4, !tbaa !20
  %573 = and i32 %572, 16384
  %574 = xor i32 %573, 16384
  %575 = or i32 %574, %568
  store i32 %575, ptr @ix86_isa_flags, align 4, !tbaa !20
  br label %576

576:                                              ; preds = %567, %571
  store i32 128, ptr @ix86_preferred_stack_boundary, align 4, !tbaa !20
  %577 = load ptr, ptr @ix86_preferred_stack_boundary_string, align 8, !tbaa !5
  %578 = icmp eq ptr %577, null
  br i1 %578, label %587, label %579

579:                                              ; preds = %576
  %580 = tail call i64 @__isoc23_strtol(ptr noundef nonnull %577, ptr noundef null, i32 noundef 10) #30
  %581 = trunc i64 %580 to i32
  %582 = add i32 %581, -13
  %583 = icmp ult i32 %582, -11
  br i1 %583, label %584, label %585

584:                                              ; preds = %579
  tail call void (ptr, ...) @error(ptr noundef nonnull @.str.88, ptr noundef nonnull %7, i32 noundef %581, ptr noundef nonnull %5, i32 noundef 2) #30
  br label %587

585:                                              ; preds = %579
  %586 = shl nuw nsw i32 8, %581
  store i32 %586, ptr @ix86_preferred_stack_boundary, align 4, !tbaa !20
  br label %587

587:                                              ; preds = %584, %585, %576
  %588 = load i32, ptr @ix86_force_align_arg_pointer, align 4, !tbaa !20
  %589 = icmp eq i32 %588, -1
  br i1 %589, label %590, label %591

590:                                              ; preds = %587
  store i32 0, ptr @ix86_force_align_arg_pointer, align 4, !tbaa !20
  br label %591

591:                                              ; preds = %590, %587
  %592 = load i32, ptr @ix86_preferred_stack_boundary, align 4, !tbaa !20
  store i32 %592, ptr @ix86_default_incoming_stack_boundary, align 4, !tbaa !20
  store i32 %592, ptr @ix86_incoming_stack_boundary, align 4, !tbaa !20
  %593 = load ptr, ptr @ix86_incoming_stack_boundary_string, align 8, !tbaa !5
  %594 = icmp eq ptr %593, null
  br i1 %594, label %603, label %595

595:                                              ; preds = %591
  %596 = tail call i64 @__isoc23_strtol(ptr noundef nonnull %593, ptr noundef null, i32 noundef 10) #30
  %597 = trunc i64 %596 to i32
  %598 = add i32 %597, -13
  %599 = icmp ult i32 %598, -11
  br i1 %599, label %600, label %601

600:                                              ; preds = %595
  tail call void (ptr, ...) @error(ptr noundef nonnull @.str.89, i32 noundef %597, i32 noundef 2) #30
  br label %603

601:                                              ; preds = %595
  %602 = shl nuw nsw i32 8, %597
  store i32 %602, ptr @ix86_user_incoming_stack_boundary, align 4, !tbaa !20
  store i32 %602, ptr @ix86_incoming_stack_boundary, align 4, !tbaa !20
  br label %603

603:                                              ; preds = %600, %601, %591
  %604 = load i32, ptr @target_flags, align 4, !tbaa !20
  %605 = and i32 %604, 262144
  %606 = icmp eq i32 %605, 0
  br i1 %606, label %612, label %607

607:                                              ; preds = %603
  %608 = load i32, ptr @ix86_isa_flags, align 4, !tbaa !20
  %609 = and i32 %608, 65536
  %610 = icmp eq i32 %609, 0
  br i1 %610, label %611, label %612

611:                                              ; preds = %607
  tail call void (ptr, ...) @error(ptr noundef nonnull @.str.90, ptr noundef nonnull %7, ptr noundef nonnull %5) #30
  br label %612

612:                                              ; preds = %611, %607, %603
  store i32 1, ptr @ix86_fpmath, align 4, !tbaa !16
  %613 = load ptr, ptr @ix86_fpmath_string, align 8, !tbaa !5
  %614 = icmp eq ptr %613, null
  br i1 %614, label %657, label %615

615:                                              ; preds = %612
  %616 = tail call i32 @strcmp(ptr noundef nonnull dereferenceable(1) %613, ptr noundef nonnull dereferenceable(4) @.str.91)
  %617 = icmp eq i32 %616, 0
  br i1 %617, label %657, label %618

618:                                              ; preds = %615
  %619 = tail call i32 @strcmp(ptr noundef nonnull dereferenceable(1) %613, ptr noundef nonnull dereferenceable(4) @.str.92)
  %620 = icmp eq i32 %619, 0
  br i1 %620, label %621, label %628

621:                                              ; preds = %618
  %622 = load i32, ptr @ix86_isa_flags, align 4, !tbaa !20
  %623 = and i32 %622, 65536
  %624 = icmp eq i32 %623, 0
  br i1 %624, label %625, label %627

625:                                              ; preds = %621
  %626 = tail call zeroext i8 (i32, ptr, ...) @warning(i32 noundef 0, ptr noundef nonnull @.str.93) #30
  store i32 1, ptr @ix86_fpmath, align 4, !tbaa !16
  br label %657

627:                                              ; preds = %621
  store i32 2, ptr @ix86_fpmath, align 4, !tbaa !16
  br label %657

628:                                              ; preds = %618
  %629 = tail call i32 @strcmp(ptr noundef nonnull dereferenceable(1) %613, ptr noundef nonnull dereferenceable(8) @.str.94)
  %630 = icmp eq i32 %629, 0
  br i1 %630, label %643, label %631

631:                                              ; preds = %628
  %632 = tail call i32 @strcmp(ptr noundef nonnull dereferenceable(1) %613, ptr noundef nonnull dereferenceable(8) @.str.95)
  %633 = icmp eq i32 %632, 0
  br i1 %633, label %643, label %634

634:                                              ; preds = %631
  %635 = tail call i32 @strcmp(ptr noundef nonnull dereferenceable(1) %613, ptr noundef nonnull dereferenceable(8) @.str.96)
  %636 = icmp eq i32 %635, 0
  br i1 %636, label %643, label %637

637:                                              ; preds = %634
  %638 = tail call i32 @strcmp(ptr noundef nonnull dereferenceable(1) %613, ptr noundef nonnull dereferenceable(8) @.str.97)
  %639 = icmp eq i32 %638, 0
  br i1 %639, label %643, label %640

640:                                              ; preds = %637
  %641 = tail call i32 @strcmp(ptr noundef nonnull dereferenceable(1) %613, ptr noundef nonnull dereferenceable(5) @.str.98)
  %642 = icmp eq i32 %641, 0
  br i1 %642, label %643, label %656

643:                                              ; preds = %640, %637, %634, %631, %628
  %644 = load i32, ptr @ix86_isa_flags, align 4, !tbaa !20
  %645 = and i32 %644, 65536
  %646 = icmp eq i32 %645, 0
  br i1 %646, label %647, label %649

647:                                              ; preds = %643
  %648 = tail call zeroext i8 (i32, ptr, ...) @warning(i32 noundef 0, ptr noundef nonnull @.str.93) #30
  store i32 1, ptr @ix86_fpmath, align 4, !tbaa !16
  br label %657

649:                                              ; preds = %643
  %650 = load i32, ptr @target_flags, align 4, !tbaa !20
  %651 = and i32 %650, 2
  %652 = icmp eq i32 %651, 0
  br i1 %652, label %653, label %655

653:                                              ; preds = %649
  %654 = tail call zeroext i8 (i32, ptr, ...) @warning(i32 noundef 0, ptr noundef nonnull @.str.99) #30
  store i32 2, ptr @ix86_fpmath, align 4, !tbaa !16
  br label %657

655:                                              ; preds = %649
  store i32 3, ptr @ix86_fpmath, align 4, !tbaa !16
  br label %657

656:                                              ; preds = %640
  tail call void (ptr, ...) @error(ptr noundef nonnull @.str.100, ptr noundef nonnull %613, ptr noundef nonnull %7, ptr noundef nonnull %5, ptr noundef nonnull %6) #30
  br label %657

657:                                              ; preds = %615, %656, %653, %655, %647, %625, %627, %612
  %658 = load i32, ptr @target_flags, align 4, !tbaa !20
  %659 = and i32 %658, 2
  %660 = icmp eq i32 %659, 0
  br i1 %660, label %661, label %663

661:                                              ; preds = %657
  %662 = and i32 %658, -33
  store i32 %662, ptr @target_flags, align 4, !tbaa !20
  br label %663

663:                                              ; preds = %661, %657
  %664 = load ptr, ptr @ix86_veclibabi_string, align 8, !tbaa !5
  %665 = icmp eq ptr %664, null
  br i1 %665, label %675, label %666

666:                                              ; preds = %663
  %667 = tail call i32 @strcmp(ptr noundef nonnull dereferenceable(1) %664, ptr noundef nonnull dereferenceable(5) @.str.101)
  %668 = icmp eq i32 %667, 0
  br i1 %668, label %669, label %670

669:                                              ; preds = %666
  store ptr @ix86_veclibabi_svml, ptr @ix86_veclib_handler, align 8, !tbaa !5
  br label %675

670:                                              ; preds = %666
  %671 = tail call i32 @strcmp(ptr noundef nonnull dereferenceable(1) %664, ptr noundef nonnull dereferenceable(5) @.str.102)
  %672 = icmp eq i32 %671, 0
  br i1 %672, label %673, label %674

673:                                              ; preds = %670
  store ptr @ix86_veclibabi_acml, ptr @ix86_veclib_handler, align 8, !tbaa !5
  br label %675

674:                                              ; preds = %670
  tail call void (ptr, ...) @error(ptr noundef nonnull @.str.103, ptr noundef nonnull %664, ptr noundef nonnull %7, ptr noundef nonnull %5, ptr noundef nonnull %6) #30
  br label %675

675:                                              ; preds = %669, %674, %673, %663
  %676 = and i32 %357, 32712
  %677 = icmp eq i32 %676, 0
  br i1 %677, label %678, label %680

678:                                              ; preds = %675
  %679 = load i32, ptr @target_flags, align 4, !tbaa !20
  br label %690

680:                                              ; preds = %675
  %681 = load i32, ptr @target_flags_explicit, align 4, !tbaa !20
  %682 = and i32 %681, 4
  %683 = icmp ne i32 %682, 0
  %684 = load i32, ptr @optimize_size, align 4
  %685 = icmp ne i32 %684, 0
  %686 = select i1 %683, i1 true, i1 %685
  %687 = load i32, ptr @target_flags, align 4, !tbaa !20
  br i1 %686, label %690, label %688

688:                                              ; preds = %680
  %689 = or i32 %687, 4
  store i32 %689, ptr @target_flags, align 4, !tbaa !20
  br label %690

690:                                              ; preds = %678, %688, %680
  %691 = phi i32 [ %679, %678 ], [ %689, %688 ], [ %687, %680 ]
  %692 = load i32, ptr @flag_unwind_tables, align 4, !tbaa !20
  %693 = icmp ne i32 %692, 0
  %694 = load i32, ptr @flag_asynchronous_unwind_tables, align 4
  %695 = icmp ne i32 %694, 0
  %696 = select i1 %693, i1 true, i1 %695
  %697 = load i32, ptr @flag_exceptions, align 4
  %698 = icmp ne i32 %697, 0
  %699 = select i1 %696, i1 true, i1 %698
  %700 = load i32, ptr @flag_non_call_exceptions, align 4
  %701 = icmp ne i32 %700, 0
  %702 = select i1 %699, i1 true, i1 %701
  %703 = load i32, ptr @flag_omit_frame_pointer, align 4
  %704 = icmp ne i32 %703, 0
  %705 = select i1 %702, i1 %704, i1 false
  %706 = and i32 %691, 4
  %707 = icmp eq i32 %706, 0
  %708 = select i1 %705, i1 %707, i1 false
  br i1 %708, label %709, label %719

709:                                              ; preds = %690
  %710 = load i32, ptr @target_flags_explicit, align 4, !tbaa !20
  %711 = and i32 %710, 4
  %712 = icmp eq i32 %711, 0
  br i1 %712, label %716, label %713

713:                                              ; preds = %709
  %714 = tail call zeroext i8 (i32, ptr, ...) @warning(i32 noundef 0, ptr noundef nonnull @.str.104, ptr noundef nonnull %7, ptr noundef nonnull %5) #30
  %715 = load i32, ptr @target_flags, align 4, !tbaa !20
  br label %716

716:                                              ; preds = %713, %709
  %717 = phi i32 [ %715, %713 ], [ %691, %709 ]
  %718 = or i32 %717, 4
  store i32 %718, ptr @target_flags, align 4, !tbaa !20
  br label %719

719:                                              ; preds = %690, %716
  %720 = phi i32 [ %691, %690 ], [ %718, %716 ]
  %721 = and i32 %720, 524292
  %722 = icmp eq i32 %721, 524288
  br i1 %722, label %723, label %733

723:                                              ; preds = %719
  %724 = load i32, ptr @target_flags_explicit, align 4, !tbaa !20
  %725 = and i32 %724, 4
  %726 = icmp eq i32 %725, 0
  br i1 %726, label %730, label %727

727:                                              ; preds = %723
  %728 = tail call zeroext i8 (i32, ptr, ...) @warning(i32 noundef 0, ptr noundef nonnull @.str.105, ptr noundef nonnull %7, ptr noundef nonnull %5) #30
  %729 = load i32, ptr @target_flags, align 4, !tbaa !20
  br label %730

730:                                              ; preds = %727, %723
  %731 = phi i32 [ %729, %727 ], [ %720, %723 ]
  %732 = or i32 %731, 4
  store i32 %732, ptr @target_flags, align 4, !tbaa !20
  br label %733

733:                                              ; preds = %730, %719
  %734 = load i32, ptr @ix86_isa_flags, align 4, !tbaa !20
  %735 = and i32 %734, 65536
  %736 = icmp eq i32 %735, 0
  br i1 %736, label %738, label %737

737:                                              ; preds = %733
  store i8 1, ptr @ix86_arch_features, align 1, !tbaa !16
  br label %738

738:                                              ; preds = %737, %733
  %739 = tail call i32 (ptr, ptr, ...) @sprintf(ptr noundef nonnull dereferenceable(1) @internal_label_prefix, ptr noundef nonnull dereferenceable(1) @.str.106, ptr noundef nonnull @.str.107, i32 noundef 0)
  %740 = tail call ptr @strchr(ptr noundef nonnull dereferenceable(1) @internal_label_prefix, i32 noundef 88)
  %741 = ptrtoint ptr %740 to i64
  %742 = trunc i64 %741 to i32
  %743 = sub i32 %742, ptrtoint (ptr @internal_label_prefix to i32)
  store i32 %743, ptr @internal_label_prefix_len, align 4, !tbaa !20
  store i8 0, ptr %740, align 1, !tbaa !16
  %744 = load i8, ptr getelementptr inbounds ([62 x i8], ptr @ix86_tune_features, i64 0, i64 45), align 1, !tbaa !16
  %745 = icmp eq i8 %744, 0
  br i1 %745, label %746, label %747

746:                                              ; preds = %738
  store i32 0, ptr @flag_schedule_insns, align 4, !tbaa !20
  store i32 0, ptr @flag_schedule_insns_after_reload, align 4, !tbaa !20
  br label %747

747:                                              ; preds = %746, %738
  %748 = load ptr, ptr @compiler_params, align 8, !tbaa !5
  %749 = getelementptr inbounds %struct.param_info, ptr %748, i64 98, i32 2
  %750 = load i8, ptr %749, align 4, !tbaa !38
  %751 = icmp eq i8 %750, 0
  br i1 %751, label %752, label %757

752:                                              ; preds = %747
  %753 = load ptr, ptr @ix86_cost, align 8, !tbaa !5
  %754 = getelementptr inbounds %struct.processor_costs, ptr %753, i64 0, i32 27
  %755 = load i32, ptr %754, align 4, !tbaa !40
  tail call void @set_param_value(ptr noundef nonnull @.str.108, i32 noundef %755) #30
  %756 = load ptr, ptr @compiler_params, align 8, !tbaa !5
  br label %757

757:                                              ; preds = %752, %747
  %758 = phi ptr [ %756, %752 ], [ %748, %747 ]
  %759 = getelementptr inbounds %struct.param_info, ptr %758, i64 100, i32 2
  %760 = load i8, ptr %759, align 4, !tbaa !38
  %761 = icmp eq i8 %760, 0
  br i1 %761, label %762, label %767

762:                                              ; preds = %757
  %763 = load ptr, ptr @ix86_cost, align 8, !tbaa !5
  %764 = getelementptr inbounds %struct.processor_costs, ptr %763, i64 0, i32 26
  %765 = load i32, ptr %764, align 4, !tbaa !41
  tail call void @set_param_value(ptr noundef nonnull @.str.109, i32 noundef %765) #30
  %766 = load ptr, ptr @compiler_params, align 8, !tbaa !5
  br label %767

767:                                              ; preds = %762, %757
  %768 = phi ptr [ %766, %762 ], [ %758, %757 ]
  %769 = getelementptr inbounds %struct.param_info, ptr %768, i64 99, i32 2
  %770 = load i8, ptr %769, align 4, !tbaa !38
  %771 = icmp eq i8 %770, 0
  br i1 %771, label %772, label %777

772:                                              ; preds = %767
  %773 = load ptr, ptr @ix86_cost, align 8, !tbaa !5
  %774 = getelementptr inbounds %struct.processor_costs, ptr %773, i64 0, i32 24
  %775 = load i32, ptr %774, align 4, !tbaa !42
  tail call void @set_param_value(ptr noundef nonnull @.str.110, i32 noundef %775) #30
  %776 = load ptr, ptr @compiler_params, align 8, !tbaa !5
  br label %777

777:                                              ; preds = %772, %767
  %778 = phi ptr [ %776, %772 ], [ %768, %767 ]
  %779 = getelementptr inbounds %struct.param_info, ptr %778, i64 101, i32 2
  %780 = load i8, ptr %779, align 4, !tbaa !38
  %781 = icmp eq i8 %780, 0
  br i1 %781, label %782, label %786

782:                                              ; preds = %777
  %783 = load ptr, ptr @ix86_cost, align 8, !tbaa !5
  %784 = getelementptr inbounds %struct.processor_costs, ptr %783, i64 0, i32 25
  %785 = load i32, ptr %784, align 4, !tbaa !43
  tail call void @set_param_value(ptr noundef nonnull @.str.111, i32 noundef %785) #30
  br label %786

786:                                              ; preds = %782, %777
  store ptr null, ptr getelementptr inbounds (%struct.gcc_target, ptr @targetm, i64 0, i32 72), align 8, !tbaa !44
  br i1 %4, label %789, label %787

787:                                              ; preds = %786
  %788 = tail call ptr @build_target_option_node() #30
  store ptr %788, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 128), align 16, !tbaa !5
  store ptr %788, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 127), align 8, !tbaa !5
  br label %789

789:                                              ; preds = %787, %786
  ret void
}

; Function Attrs: mustprogress nofree nounwind willreturn memory(argmem: read)
declare i32 @strcmp(ptr nocapture noundef, ptr nocapture noundef) local_unnamed_addr #10

; Function Attrs: mustprogress nofree nounwind willreturn memory(argmem: read)
declare i32 @strncmp(ptr nocapture noundef, ptr nocapture noundef, i64 noundef) local_unnamed_addr #10

declare void @error(ptr noundef, ...) local_unnamed_addr #3

declare zeroext i8 @warning(i32 noundef, ptr noundef, ...) local_unnamed_addr #3

declare void @sorry(ptr noundef, ...) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define internal ptr @ix86_init_machine_status() #9 {
  %1 = tail call ptr @ggc_alloc_cleared_stat(i64 noundef 72) #30
  %2 = getelementptr inbounds %struct.machine_function, ptr %1, i64 0, i32 5
  store i32 -1, ptr %2, align 8, !tbaa !56
  %3 = getelementptr inbounds %struct.machine_function, ptr %1, i64 0, i32 8
  %4 = load i8, ptr %3, align 4
  %5 = and i8 %4, -9
  store i8 %5, ptr %3, align 4
  %6 = load i32, ptr @ix86_abi, align 4, !tbaa !16
  %7 = getelementptr inbounds %struct.machine_function, ptr %1, i64 0, i32 7
  store i32 %6, ptr %7, align 8, !tbaa !59
  ret ptr %1
}

; Function Attrs: nounwind sspstrong uwtable
define internal ptr @ix86_veclibabi_svml(i32 noundef %0, ptr noundef %1, ptr noundef %2) #9 {
  %4 = alloca [20 x i8], align 16
  call void @llvm.lifetime.start.p0(i64 20, ptr nonnull %4) #30
  %5 = load i32, ptr @flag_unsafe_math_optimizations, align 4, !tbaa !20
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %113, label %7

7:                                                ; preds = %3
  %8 = getelementptr inbounds %struct.tree_common, ptr %1, i64 0, i32 2
  %9 = load ptr, ptr %8, align 8, !tbaa !16
  %10 = load i64, ptr %9, align 8
  %11 = and i64 %10, 65535
  %12 = icmp eq i64 %11, 14
  br i1 %12, label %13, label %15

13:                                               ; preds = %7
  %14 = tail call i32 @vector_type_mode(ptr noundef nonnull %9) #30
  br label %20

15:                                               ; preds = %7
  %16 = getelementptr inbounds %struct.tree_type, ptr %9, i64 0, i32 6
  %17 = load i32, ptr %16, align 4
  %18 = lshr i32 %17, 16
  %19 = and i32 %18, 255
  br label %20

20:                                               ; preds = %15, %13
  %21 = phi i32 [ %14, %13 ], [ %19, %15 ]
  %22 = getelementptr inbounds %struct.tree_type, ptr %1, i64 0, i32 6
  %23 = load i32, ptr %22, align 4
  %24 = and i32 %23, 1023
  %25 = zext i32 %24 to i64
  %26 = shl nuw i64 1, %25
  %27 = trunc i64 %26 to i32
  %28 = getelementptr inbounds %struct.tree_common, ptr %2, i64 0, i32 2
  %29 = load ptr, ptr %28, align 8, !tbaa !16
  %30 = load i64, ptr %29, align 8
  %31 = and i64 %30, 65535
  %32 = icmp eq i64 %31, 14
  br i1 %32, label %33, label %35

33:                                               ; preds = %20
  %34 = tail call i32 @vector_type_mode(ptr noundef nonnull %29) #30
  br label %40

35:                                               ; preds = %20
  %36 = getelementptr inbounds %struct.tree_type, ptr %29, i64 0, i32 6
  %37 = load i32, ptr %36, align 4
  %38 = lshr i32 %37, 16
  %39 = and i32 %38, 255
  br label %40

40:                                               ; preds = %35, %33
  %41 = phi i32 [ %34, %33 ], [ %39, %35 ]
  %42 = icmp eq i32 %21, %41
  br i1 %42, label %43, label %113

43:                                               ; preds = %40
  %44 = getelementptr inbounds %struct.tree_type, ptr %2, i64 0, i32 6
  %45 = load i32, ptr %44, align 4
  %46 = and i32 %45, 1023
  %47 = zext i32 %46 to i64
  %48 = shl nuw i64 1, %47
  %49 = trunc i64 %48 to i32
  %50 = icmp eq i32 %27, %49
  br i1 %50, label %51, label %113

51:                                               ; preds = %43
  switch i32 %0, label %113 [
    i32 45, label %52
    i32 138, label %52
    i32 139, label %52
    i32 180, label %52
    i32 233, label %52
    i32 231, label %52
    i32 12, label %52
    i32 13, label %52
    i32 17, label %52
    i32 21, label %52
    i32 224, label %52
    i32 219, label %52
    i32 8, label %52
    i32 6, label %52
    i32 32, label %52
    i32 30, label %52
    i32 2, label %52
    i32 0, label %52
    i32 52, label %56
    i32 151, label %56
    i32 140, label %56
    i32 184, label %56
    i32 234, label %56
    i32 232, label %56
    i32 16, label %56
    i32 14, label %56
    i32 18, label %56
    i32 22, label %56
    i32 225, label %56
    i32 223, label %56
    i32 9, label %56
    i32 7, label %56
    i32 33, label %56
    i32 31, label %56
    i32 3, label %56
    i32 1, label %56
  ]

52:                                               ; preds = %51, %51, %51, %51, %51, %51, %51, %51, %51, %51, %51, %51, %51, %51, %51, %51, %51, %51
  %53 = icmp ne i32 %21, 39
  %54 = icmp ne i32 %24, 1
  %55 = select i1 %53, i1 true, i1 %54
  br i1 %55, label %113, label %60

56:                                               ; preds = %51, %51, %51, %51, %51, %51, %51, %51, %51, %51, %51, %51, %51, %51, %51, %51, %51, %51
  %57 = icmp ne i32 %21, 38
  %58 = icmp ne i32 %24, 2
  %59 = select i1 %57, i1 true, i1 %58
  br i1 %59, label %113, label %60

60:                                               ; preds = %56, %52
  %61 = zext i32 %0 to i64
  %62 = getelementptr inbounds [721 x ptr], ptr @implicit_built_in_decls, i64 0, i64 %61
  switch i32 %0, label %65 [
    i32 151, label %63
    i32 138, label %64
  ]

63:                                               ; preds = %60
  store i64 14757973422009718, ptr %4, align 16
  br label %80

64:                                               ; preds = %60
  store i64 14195023216930166, ptr %4, align 16
  br label %80

65:                                               ; preds = %60
  %66 = load ptr, ptr %62, align 8, !tbaa !5
  %67 = getelementptr inbounds %struct.tree_decl_minimal, ptr %66, i64 0, i32 3
  %68 = load ptr, ptr %67, align 8, !tbaa !16
  %69 = getelementptr inbounds %struct.tree_identifier, ptr %68, i64 0, i32 1
  %70 = load ptr, ptr %69, align 8, !tbaa !16
  %71 = icmp eq i32 %24, 2
  %72 = getelementptr inbounds i8, ptr %70, i64 10
  br i1 %71, label %73, label %78

73:                                               ; preds = %65
  %74 = call i32 (ptr, ptr, ...) @sprintf(ptr noundef nonnull dereferenceable(1) %4, ptr noundef nonnull dereferenceable(1) @.str.441, ptr noundef nonnull %72)
  %75 = call i64 @strlen(ptr noundef nonnull dereferenceable(1) %4)
  %76 = add i64 %75, -1
  %77 = getelementptr inbounds [20 x i8], ptr %4, i64 0, i64 %76
  store i8 52, ptr %77, align 1, !tbaa !16
  br label %80

78:                                               ; preds = %65
  %79 = call i32 (ptr, ptr, ...) @sprintf(ptr noundef nonnull dereferenceable(1) %4, ptr noundef nonnull dereferenceable(1) @.str.442, ptr noundef nonnull %72)
  br label %80

80:                                               ; preds = %64, %78, %73, %63
  %81 = getelementptr inbounds [20 x i8], ptr %4, i64 0, i64 4
  %82 = load i8, ptr %81, align 4, !tbaa !16
  %83 = and i8 %82, -33
  store i8 %83, ptr %81, align 4, !tbaa !16
  %84 = load ptr, ptr %62, align 8, !tbaa !5
  %85 = getelementptr inbounds %struct.tree_decl_non_common, ptr %84, i64 0, i32 2
  %86 = load ptr, ptr %85, align 8, !tbaa !16
  %87 = icmp eq ptr %86, null
  br i1 %87, label %99, label %88

88:                                               ; preds = %80, %88
  %89 = phi ptr [ %93, %88 ], [ %86, %80 ]
  %90 = phi i32 [ %91, %88 ], [ 0, %80 ]
  %91 = add i32 %90, 1
  %92 = getelementptr inbounds %struct.tree_common, ptr %89, i64 0, i32 1
  %93 = load ptr, ptr %92, align 8, !tbaa !16
  %94 = icmp eq ptr %93, null
  br i1 %94, label %95, label %88, !llvm.loop !60

95:                                               ; preds = %88
  %96 = icmp eq i32 %90, 0
  br i1 %96, label %97, label %99

97:                                               ; preds = %95
  %98 = tail call ptr (ptr, ...) @build_function_type_list(ptr noundef %1, ptr noundef %2, ptr noundef null) #30
  br label %101

99:                                               ; preds = %80, %95
  %100 = tail call ptr (ptr, ...) @build_function_type_list(ptr noundef %1, ptr noundef %2, ptr noundef %2, ptr noundef null) #30
  br label %101

101:                                              ; preds = %99, %97
  %102 = phi ptr [ %98, %97 ], [ %100, %99 ]
  %103 = call ptr @get_identifier(ptr noundef nonnull %4) #30
  %104 = call ptr @build_decl_stat(i32 noundef 1, i32 noundef 29, ptr noundef %103, ptr noundef %102) #30
  %105 = load i64, ptr %104, align 8
  %106 = getelementptr inbounds %struct.tree_decl_common, ptr %104, i64 0, i32 2
  %107 = load i64, ptr %106, align 8
  %108 = or i64 %107, 33554432
  store i64 %108, ptr %106, align 8
  %109 = getelementptr inbounds %struct.tree_function_decl, ptr %104, i64 0, i32 5
  %110 = load i32, ptr %109, align 8
  %111 = or i32 %110, 131072
  store i32 %111, ptr %109, align 8
  %112 = or i64 %105, 135266304
  store i64 %112, ptr %104, align 8
  br label %113

113:                                              ; preds = %51, %56, %52, %40, %43, %3, %101
  %114 = phi ptr [ %104, %101 ], [ null, %3 ], [ null, %43 ], [ null, %40 ], [ null, %52 ], [ null, %56 ], [ null, %51 ]
  call void @llvm.lifetime.end.p0(i64 20, ptr nonnull %4) #30
  ret ptr %114
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind sspstrong willreturn memory(none) uwtable
define internal noalias ptr @ix86_veclibabi_acml(i32 %0, ptr nocapture readnone %1, ptr nocapture readnone %2) #11 {
  ret ptr null
}

; Function Attrs: nofree nounwind
declare noundef i32 @sprintf(ptr noalias nocapture noundef writeonly, ptr nocapture noundef readonly, ...) local_unnamed_addr #1

; Function Attrs: mustprogress nofree nounwind willreturn memory(argmem: read)
declare ptr @strchr(ptr noundef, i32 noundef) local_unnamed_addr #10

declare void @set_param_value(ptr noundef, i32 noundef) local_unnamed_addr #3

declare ptr @gen_leave() local_unnamed_addr #3

declare ptr @gen_popsi1(ptr noundef) local_unnamed_addr #3

declare ptr @gen_addsi3(ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

declare ptr @gen_subsi3(ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

declare ptr @gen_subsi3_carry(ptr noundef, ptr noundef, ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

declare ptr @gen_one_cmplsi2(ptr noundef, ptr noundef) local_unnamed_addr #3

declare ptr @gen_sse3_monitor(ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

declare ptr @gen_andsi3(ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

declare ptr @build_target_option_node() local_unnamed_addr #3

; Function Attrs: nofree norecurse nosync nounwind sspstrong memory(readwrite, argmem: read, inaccessiblemem: none) uwtable
define dso_local void @ix86_conditional_register_usage() local_unnamed_addr #12 {
  br label %1

1:                                                ; preds = %0, %16
  %2 = phi i64 [ 0, %0 ], [ %17, %16 ]
  %3 = getelementptr inbounds [53 x i8], ptr @fixed_regs, i64 0, i64 %2
  %4 = load i8, ptr %3, align 1, !tbaa !16
  %5 = icmp sgt i8 %4, 1
  br i1 %5, label %6, label %9

6:                                                ; preds = %1
  %7 = icmp eq i8 %4, 2
  %8 = zext i1 %7 to i8
  store i8 %8, ptr %3, align 1, !tbaa !16
  br label %9

9:                                                ; preds = %6, %1
  %10 = getelementptr inbounds [53 x i8], ptr @call_used_regs, i64 0, i64 %2
  %11 = load i8, ptr %10, align 1, !tbaa !16
  %12 = icmp sgt i8 %11, 1
  br i1 %12, label %13, label %16

13:                                               ; preds = %9
  %14 = icmp eq i8 %11, 2
  %15 = zext i1 %14 to i8
  store i8 %15, ptr %10, align 1, !tbaa !16
  br label %16

16:                                               ; preds = %9, %13
  %17 = add nuw nsw i64 %2, 1
  %18 = icmp eq i64 %17, 53
  br i1 %18, label %19, label %1, !llvm.loop !61

19:                                               ; preds = %16
  %20 = load i32, ptr @flag_pic, align 4, !tbaa !20
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %35, label %22

22:                                               ; preds = %19
  %23 = load i32, ptr @reload_completed, align 4, !tbaa !20
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %30, label %25

25:                                               ; preds = %22
  %26 = load ptr, ptr @pic_offset_table_rtx, align 8, !tbaa !5
  %27 = getelementptr i8, ptr %26, i64 8
  %28 = load i32, ptr %27, align 8, !tbaa !16
  %29 = icmp eq i32 %28, -1
  br i1 %29, label %35, label %30

30:                                               ; preds = %22, %25
  %31 = phi i32 [ %28, %25 ], [ 3, %22 ]
  %32 = zext i32 %31 to i64
  %33 = getelementptr inbounds [53 x i8], ptr @call_used_regs, i64 0, i64 %32
  store i8 1, ptr %33, align 1, !tbaa !16
  %34 = getelementptr inbounds [53 x i8], ptr @fixed_regs, i64 0, i64 %32
  store i8 1, ptr %34, align 1, !tbaa !16
  br label %35

35:                                               ; preds = %19, %30, %25
  %36 = load i32, ptr @ix86_isa_flags, align 4, !tbaa !20
  %37 = and i32 %36, 2048
  %38 = icmp eq i32 %37, 0
  br i1 %38, label %39, label %53

39:                                               ; preds = %35
  %40 = load i64, ptr getelementptr inbounds ([27 x i64], ptr @reg_class_contents, i64 0, i64 19), align 8, !tbaa !62
  br label %41

41:                                               ; preds = %39, %50
  %42 = phi i64 [ 0, %39 ], [ %51, %50 ]
  %43 = shl nuw nsw i64 1, %42
  %44 = and i64 %40, %43
  %45 = icmp eq i64 %44, 0
  br i1 %45, label %50, label %46

46:                                               ; preds = %41
  %47 = getelementptr inbounds [53 x i8], ptr @call_used_regs, i64 0, i64 %42
  store i8 1, ptr %47, align 1, !tbaa !16
  %48 = getelementptr inbounds [53 x i8], ptr @fixed_regs, i64 0, i64 %42
  store i8 1, ptr %48, align 1, !tbaa !16
  %49 = getelementptr inbounds [53 x ptr], ptr @reg_names, i64 0, i64 %42
  store ptr @.str.43, ptr %49, align 8, !tbaa !5
  br label %50

50:                                               ; preds = %41, %46
  %51 = add nuw nsw i64 %42, 1
  %52 = icmp eq i64 %51, 53
  br i1 %52, label %53, label %41, !llvm.loop !63

53:                                               ; preds = %50, %35
  %54 = and i32 %36, 65536
  %55 = icmp eq i32 %54, 0
  br i1 %55, label %56, label %70

56:                                               ; preds = %53
  %57 = load i64, ptr getelementptr inbounds ([27 x i64], ptr @reg_class_contents, i64 0, i64 18), align 16, !tbaa !62
  br label %58

58:                                               ; preds = %56, %67
  %59 = phi i64 [ 0, %56 ], [ %68, %67 ]
  %60 = shl nuw nsw i64 1, %59
  %61 = and i64 %57, %60
  %62 = icmp eq i64 %61, 0
  br i1 %62, label %67, label %63

63:                                               ; preds = %58
  %64 = getelementptr inbounds [53 x i8], ptr @call_used_regs, i64 0, i64 %59
  store i8 1, ptr %64, align 1, !tbaa !16
  %65 = getelementptr inbounds [53 x i8], ptr @fixed_regs, i64 0, i64 %59
  store i8 1, ptr %65, align 1, !tbaa !16
  %66 = getelementptr inbounds [53 x ptr], ptr @reg_names, i64 0, i64 %59
  store ptr @.str.43, ptr %66, align 8, !tbaa !5
  br label %67

67:                                               ; preds = %58, %63
  %68 = add nuw nsw i64 %59, 1
  %69 = icmp eq i64 %68, 53
  br i1 %69, label %70, label %58, !llvm.loop !64

70:                                               ; preds = %67, %53
  %71 = load i32, ptr @target_flags, align 4, !tbaa !20
  %72 = and i32 %71, 34
  %73 = icmp eq i32 %72, 0
  br i1 %73, label %74, label %88

74:                                               ; preds = %70
  %75 = load i64, ptr getelementptr inbounds ([27 x i64], ptr @reg_class_contents, i64 0, i64 16), align 16, !tbaa !62
  br label %76

76:                                               ; preds = %74, %85
  %77 = phi i64 [ 0, %74 ], [ %86, %85 ]
  %78 = shl nuw nsw i64 1, %77
  %79 = and i64 %75, %78
  %80 = icmp eq i64 %79, 0
  br i1 %80, label %85, label %81

81:                                               ; preds = %76
  %82 = getelementptr inbounds [53 x i8], ptr @call_used_regs, i64 0, i64 %77
  store i8 1, ptr %82, align 1, !tbaa !16
  %83 = getelementptr inbounds [53 x i8], ptr @fixed_regs, i64 0, i64 %77
  store i8 1, ptr %83, align 1, !tbaa !16
  %84 = getelementptr inbounds [53 x ptr], ptr @reg_names, i64 0, i64 %77
  store ptr @.str.43, ptr %84, align 8, !tbaa !5
  br label %85

85:                                               ; preds = %76, %81
  %86 = add nuw nsw i64 %77, 1
  %87 = icmp eq i64 %86, 53
  br i1 %87, label %88, label %76, !llvm.loop !65

88:                                               ; preds = %85, %70
  store ptr @.str.43, ptr getelementptr inbounds ([53 x ptr], ptr @reg_names, i64 0, i64 37), align 8, !tbaa !5
  store ptr @.str.43, ptr getelementptr inbounds ([53 x ptr], ptr @reg_names, i64 0, i64 38), align 16, !tbaa !5
  store ptr @.str.43, ptr getelementptr inbounds ([53 x ptr], ptr @reg_names, i64 0, i64 39), align 8, !tbaa !5
  store ptr @.str.43, ptr getelementptr inbounds ([53 x ptr], ptr @reg_names, i64 0, i64 40), align 16, !tbaa !5
  store ptr @.str.43, ptr getelementptr inbounds ([53 x ptr], ptr @reg_names, i64 0, i64 41), align 8, !tbaa !5
  store ptr @.str.43, ptr getelementptr inbounds ([53 x ptr], ptr @reg_names, i64 0, i64 42), align 16, !tbaa !5
  store ptr @.str.43, ptr getelementptr inbounds ([53 x ptr], ptr @reg_names, i64 0, i64 43), align 8, !tbaa !5
  store ptr @.str.43, ptr getelementptr inbounds ([53 x ptr], ptr @reg_names, i64 0, i64 44), align 16, !tbaa !5
  store ptr @.str.43, ptr getelementptr inbounds ([53 x ptr], ptr @reg_names, i64 0, i64 45), align 8, !tbaa !5
  store ptr @.str.43, ptr getelementptr inbounds ([53 x ptr], ptr @reg_names, i64 0, i64 46), align 16, !tbaa !5
  store ptr @.str.43, ptr getelementptr inbounds ([53 x ptr], ptr @reg_names, i64 0, i64 47), align 8, !tbaa !5
  store ptr @.str.43, ptr getelementptr inbounds ([53 x ptr], ptr @reg_names, i64 0, i64 48), align 16, !tbaa !5
  store ptr @.str.43, ptr getelementptr inbounds ([53 x ptr], ptr @reg_names, i64 0, i64 49), align 8, !tbaa !5
  store ptr @.str.43, ptr getelementptr inbounds ([53 x ptr], ptr @reg_names, i64 0, i64 50), align 16, !tbaa !5
  store ptr @.str.43, ptr getelementptr inbounds ([53 x ptr], ptr @reg_names, i64 0, i64 51), align 8, !tbaa !5
  store ptr @.str.43, ptr getelementptr inbounds ([53 x ptr], ptr @reg_names, i64 0, i64 52), align 16, !tbaa !5
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define dso_local ptr @ix86_valid_target_attribute_tree(ptr noundef %0) local_unnamed_addr #9 {
  %2 = alloca [3 x ptr], align 16
  %3 = load ptr, ptr @ix86_arch_string, align 8, !tbaa !5
  %4 = load ptr, ptr @ix86_tune_string, align 8, !tbaa !5
  %5 = load ptr, ptr @ix86_fpmath_string, align 8, !tbaa !5
  %6 = load i32, ptr @ix86_tune_defaulted, align 4, !tbaa !20
  %7 = load i32, ptr @ix86_arch_specified, align 4, !tbaa !20
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %2) #30
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 16 dereferenceable(24) %2, i8 0, i64 24, i1 false)
  %8 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 127), align 8, !tbaa !5
  %9 = call fastcc zeroext i8 @ix86_valid_target_attribute_inner_p(ptr noundef %0, ptr noundef nonnull %2), !range !66
  %10 = icmp eq i8 %9, 0
  br i1 %10, label %92, label %11

11:                                               ; preds = %1
  %12 = load i32, ptr @ix86_isa_flags, align 4, !tbaa !20
  %13 = getelementptr inbounds %struct.tree_target_option, ptr %8, i64 0, i32 1, i32 3
  %14 = load i32, ptr %13, align 4, !tbaa !67
  %15 = icmp eq i32 %12, %14
  %16 = load ptr, ptr %2, align 16
  br i1 %15, label %17, label %32

17:                                               ; preds = %11
  %18 = load i32, ptr @target_flags, align 4, !tbaa !20
  %19 = getelementptr inbounds %struct.tree_target_option, ptr %8, i64 0, i32 1, i32 2
  %20 = load i32, ptr %19, align 4, !tbaa !69
  %21 = icmp ne i32 %18, %20
  %22 = icmp ne ptr %16, null
  %23 = select i1 %21, i1 true, i1 %22
  %24 = getelementptr inbounds [3 x ptr], ptr %2, i64 0, i64 1
  %25 = load ptr, ptr %24, align 8
  %26 = icmp ne ptr %25, null
  %27 = select i1 %23, i1 true, i1 %26
  %28 = getelementptr inbounds [3 x ptr], ptr %2, i64 0, i64 2
  %29 = load ptr, ptr %28, align 16
  %30 = icmp ne ptr %29, null
  %31 = select i1 %27, i1 true, i1 %30
  br i1 %31, label %32, label %92

32:                                               ; preds = %17, %11
  %33 = icmp eq ptr %16, null
  br i1 %33, label %34, label %36

34:                                               ; preds = %32
  %35 = icmp eq i32 %7, 0
  br i1 %35, label %36, label %38

36:                                               ; preds = %34, %32
  %37 = phi ptr [ %16, %32 ], [ null, %34 ]
  store ptr %37, ptr @ix86_arch_string, align 8, !tbaa !5
  br label %38

38:                                               ; preds = %36, %34
  %39 = getelementptr inbounds [3 x ptr], ptr %2, i64 0, i64 1
  %40 = load ptr, ptr %39, align 8, !tbaa !5
  %41 = icmp eq ptr %40, null
  br i1 %41, label %42, label %44

42:                                               ; preds = %38
  %43 = icmp eq i32 %6, 0
  br i1 %43, label %46, label %44

44:                                               ; preds = %42, %38
  %45 = phi ptr [ %40, %38 ], [ null, %42 ]
  store ptr %45, ptr @ix86_tune_string, align 8, !tbaa !5
  br label %46

46:                                               ; preds = %44, %42
  %47 = getelementptr inbounds [3 x ptr], ptr %2, i64 0, i64 2
  %48 = load ptr, ptr %47, align 16, !tbaa !5
  %49 = icmp eq ptr %48, null
  br i1 %49, label %50, label %53

50:                                               ; preds = %46
  %51 = and i32 %12, 65536
  %52 = icmp eq i32 %51, 0
  br i1 %52, label %55, label %53

53:                                               ; preds = %50, %46
  %54 = phi ptr [ %48, %46 ], [ @.str.96, %50 ]
  store ptr %54, ptr @ix86_fpmath_string, align 8, !tbaa !5
  br label %55

55:                                               ; preds = %53, %50
  tail call void @override_options(i8 noundef zeroext 0)
  %56 = load i32, ptr @ix86_isa_flags, align 4, !tbaa !20
  br label %57

57:                                               ; preds = %82, %55
  %58 = phi i64 [ 0, %55 ], [ %83, %82 ]
  %59 = getelementptr inbounds [801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 %58
  %60 = getelementptr inbounds [801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 %58, i32 2
  %61 = load i32, ptr %60, align 4, !tbaa !70
  %62 = and i32 %61, %56
  %63 = icmp eq i32 %62, 0
  br i1 %63, label %82, label %64

64:                                               ; preds = %57
  %65 = getelementptr inbounds [801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 %58, i32 4
  %66 = load i8, ptr %65, align 1, !tbaa !72
  %67 = icmp eq i8 %66, 0
  br i1 %67, label %82, label %68

68:                                               ; preds = %64
  store i8 0, ptr %65, align 1, !tbaa !72
  %69 = getelementptr inbounds [801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 %58, i32 1
  %70 = load i32, ptr %69, align 8, !tbaa !73
  %71 = tail call fastcc ptr @ix86_get_builtin_func_type(i32 noundef %70)
  %72 = load ptr, ptr %59, align 8, !tbaa !74
  %73 = trunc i64 %58 to i32
  %74 = tail call ptr @add_builtin_function_ext_scope(ptr noundef %72, ptr noundef %71, i32 noundef %73, i32 noundef 2, ptr noundef null, ptr noundef null) #30
  %75 = getelementptr inbounds [801 x ptr], ptr @ix86_builtins, i64 0, i64 %58
  store ptr %74, ptr %75, align 8, !tbaa !5
  %76 = getelementptr inbounds [801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 %58, i32 3
  %77 = load i8, ptr %76, align 8, !tbaa !75
  %78 = icmp eq i8 %77, 0
  br i1 %78, label %82, label %79

79:                                               ; preds = %68
  %80 = load i64, ptr %74, align 8
  %81 = or i64 %80, 1048576
  store i64 %81, ptr %74, align 8
  br label %82

82:                                               ; preds = %79, %68, %64, %57
  %83 = add nuw nsw i64 %58, 1
  %84 = icmp eq i64 %83, 801
  br i1 %84, label %85, label %57, !llvm.loop !76

85:                                               ; preds = %82
  %86 = tail call ptr @build_target_option_node() #30
  store ptr %3, ptr @ix86_arch_string, align 8, !tbaa !5
  store ptr %4, ptr @ix86_tune_string, align 8, !tbaa !5
  store ptr %5, ptr @ix86_fpmath_string, align 8, !tbaa !5
  br i1 %33, label %88, label %87

87:                                               ; preds = %85
  tail call void @free(ptr noundef nonnull %16)
  br label %88

88:                                               ; preds = %85, %87
  br i1 %41, label %90, label %89

89:                                               ; preds = %88
  tail call void @free(ptr noundef nonnull %40)
  br label %90

90:                                               ; preds = %89, %88
  br i1 %49, label %92, label %91

91:                                               ; preds = %90
  tail call void @free(ptr noundef nonnull %48)
  br label %92

92:                                               ; preds = %90, %91, %17, %1
  %93 = phi ptr [ null, %1 ], [ null, %17 ], [ %86, %91 ], [ %86, %90 ]
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %2) #30
  ret ptr %93
}

; Function Attrs: mustprogress nocallback nofree nounwind willreturn memory(argmem: write)
declare void @llvm.memset.p0.i64(ptr nocapture writeonly, i8, i64, i1 immarg) #13

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc zeroext i8 @ix86_valid_target_attribute_inner_p(ptr noundef %0, ptr nocapture noundef %1) unnamed_addr #9 {
  %3 = load i64, ptr %0, align 8
  %4 = trunc i64 %3 to i16
  switch i16 %4, label %20 [
    i16 2, label %5
    i16 28, label %21
  ]

5:                                                ; preds = %2, %15
  %6 = phi ptr [ %18, %15 ], [ %0, %2 ]
  %7 = phi i8 [ %16, %15 ], [ 1, %2 ]
  %8 = getelementptr inbounds %struct.tree_list, ptr %6, i64 0, i32 2
  %9 = load ptr, ptr %8, align 8, !tbaa !16
  %10 = icmp eq ptr %9, null
  br i1 %10, label %15, label %11

11:                                               ; preds = %5
  %12 = tail call fastcc zeroext i8 @ix86_valid_target_attribute_inner_p(ptr noundef nonnull %9, ptr noundef %1), !range !66
  %13 = icmp eq i8 %12, 0
  %14 = select i1 %13, i8 0, i8 %7
  br label %15

15:                                               ; preds = %11, %5
  %16 = phi i8 [ %7, %5 ], [ %14, %11 ]
  %17 = getelementptr inbounds %struct.tree_common, ptr %6, i64 0, i32 1
  %18 = load ptr, ptr %17, align 8, !tbaa !16
  %19 = icmp eq ptr %18, null
  br i1 %19, label %130, label %5, !llvm.loop !77

20:                                               ; preds = %2
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 3747, ptr noundef nonnull @.str.131) #30
  br label %21

21:                                               ; preds = %2, %20
  %22 = getelementptr inbounds %struct.tree_string, ptr %0, i64 0, i32 2
  store ptr %22, ptr @libiberty_optr, align 8, !tbaa !5
  %23 = tail call i64 @strlen(ptr noundef nonnull dereferenceable(1) %22)
  %24 = add i64 %23, 1
  store i64 %24, ptr @libiberty_len, align 8, !tbaa !62
  %25 = alloca i8, i64 %24, align 16
  store ptr %25, ptr @libiberty_nptr, align 8, !tbaa !5
  call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 16 %25, ptr nonnull align 1 %22, i64 %24, i1 false)
  br label %26

26:                                               ; preds = %21, %127
  %27 = phi ptr [ %25, %21 ], [ %42, %127 ]
  %28 = phi i8 [ 1, %21 ], [ %128, %127 ]
  %29 = load i8, ptr %27, align 1, !tbaa !16
  %30 = icmp eq i8 %29, 0
  br i1 %30, label %130, label %31

31:                                               ; preds = %26
  %32 = call ptr @strchr(ptr noundef nonnull dereferenceable(1) %27, i32 noundef 44)
  %33 = icmp eq ptr %32, null
  br i1 %33, label %39, label %34

34:                                               ; preds = %31
  store i8 0, ptr %32, align 1, !tbaa !16
  %35 = ptrtoint ptr %32 to i64
  %36 = ptrtoint ptr %27 to i64
  %37 = sub i64 %35, %36
  %38 = getelementptr inbounds i8, ptr %32, i64 1
  br label %41

39:                                               ; preds = %31
  %40 = call i64 @strlen(ptr noundef nonnull dereferenceable(1) %27)
  br label %41

41:                                               ; preds = %39, %34
  %42 = phi ptr [ %38, %34 ], [ null, %39 ]
  %43 = phi i64 [ %37, %34 ], [ %40, %39 ]
  %44 = icmp ugt i64 %43, 3
  br i1 %44, label %45, label %59

45:                                               ; preds = %41
  %46 = load i8, ptr %27, align 1, !tbaa !16
  %47 = icmp eq i8 %46, 110
  br i1 %47, label %48, label %59

48:                                               ; preds = %45
  %49 = getelementptr inbounds i8, ptr %27, i64 1
  %50 = load i8, ptr %49, align 1, !tbaa !16
  %51 = icmp eq i8 %50, 111
  br i1 %51, label %52, label %59

52:                                               ; preds = %48
  %53 = getelementptr inbounds i8, ptr %27, i64 2
  %54 = load i8, ptr %53, align 1, !tbaa !16
  %55 = icmp eq i8 %54, 45
  br i1 %55, label %56, label %59

56:                                               ; preds = %52
  %57 = getelementptr inbounds i8, ptr %27, i64 3
  %58 = add i64 %43, -3
  br label %59

59:                                               ; preds = %41, %45, %48, %52, %56
  %60 = phi ptr [ %57, %56 ], [ %27, %52 ], [ %27, %48 ], [ %27, %45 ], [ %27, %41 ]
  %61 = phi i64 [ %58, %56 ], [ %43, %52 ], [ %43, %48 ], [ %43, %45 ], [ %43, %41 ]
  %62 = phi i8 [ 1, %56 ], [ 0, %52 ], [ 0, %48 ], [ 0, %45 ], [ 0, %41 ]
  %63 = phi i8 [ 0, %56 ], [ 1, %52 ], [ 1, %48 ], [ 1, %45 ], [ 1, %41 ]
  %64 = load i8, ptr %60, align 1, !tbaa !16
  br label %65

65:                                               ; preds = %59, %83
  %66 = phi i64 [ 0, %59 ], [ %84, %83 ]
  %67 = getelementptr inbounds [28 x %struct.anon], ptr @ix86_valid_target_attribute_inner_p.attrs, i64 0, i64 %66
  %68 = getelementptr inbounds [28 x %struct.anon], ptr @ix86_valid_target_attribute_inner_p.attrs, i64 0, i64 %66, i32 1
  %69 = load i64, ptr %68, align 8, !tbaa !78
  %70 = load ptr, ptr %67, align 16, !tbaa !80
  %71 = load i8, ptr %70, align 1, !tbaa !16
  %72 = icmp eq i8 %64, %71
  br i1 %72, label %73, label %83

73:                                               ; preds = %65
  %74 = add nsw i64 %66, -18
  %75 = icmp ult i64 %74, 3
  br i1 %75, label %78, label %76

76:                                               ; preds = %73
  %77 = icmp eq i64 %61, %69
  br i1 %77, label %80, label %83

78:                                               ; preds = %73
  %79 = icmp ugt i64 %61, %69
  br i1 %79, label %80, label %83

80:                                               ; preds = %78, %76
  %81 = call i32 @bcmp(ptr nonnull %60, ptr nonnull %70, i64 %69)
  %82 = icmp eq i32 %81, 0
  br i1 %82, label %86, label %83

83:                                               ; preds = %65, %76, %78, %80
  %84 = add nuw nsw i64 %66, 1
  %85 = icmp eq i64 %84, 28
  br i1 %85, label %93, label %65, !llvm.loop !81

86:                                               ; preds = %80
  %87 = trunc i64 %66 to i32
  %88 = getelementptr inbounds [28 x %struct.anon], ptr @ix86_valid_target_attribute_inner_p.attrs, i64 0, i64 %66, i32 3
  %89 = load i32, ptr %88, align 4, !tbaa !82
  %90 = getelementptr inbounds [28 x %struct.anon], ptr @ix86_valid_target_attribute_inner_p.attrs, i64 0, i64 %66, i32 4
  %91 = load i32, ptr %90, align 8, !tbaa !83
  %92 = icmp ult i32 %87, 18
  br i1 %92, label %94, label %98

93:                                               ; preds = %83
  call void (ptr, ...) @error(ptr noundef nonnull @.str.322, ptr noundef nonnull %27) #30
  br label %127

94:                                               ; preds = %86
  %95 = sext i32 %89 to i64
  %96 = zext i8 %63 to i32
  %97 = call zeroext i8 @ix86_handle_option(i64 noundef %95, ptr nonnull poison, i32 noundef %96), !range !66
  br label %127

98:                                               ; preds = %86
  %99 = getelementptr inbounds [28 x %struct.anon], ptr @ix86_valid_target_attribute_inner_p.attrs, i64 0, i64 %66, i32 2
  %100 = load i32, ptr %99, align 16, !tbaa !84
  %101 = add i32 %100, -1
  %102 = icmp ult i32 %101, 2
  br i1 %102, label %103, label %116

103:                                              ; preds = %98
  %104 = icmp eq i32 %87, 22
  %105 = icmp eq i32 %87, 26
  %106 = or i1 %104, %105
  %107 = select i1 %106, i8 %62, i8 %63
  %108 = icmp eq i8 %107, 0
  br i1 %108, label %112, label %109

109:                                              ; preds = %103
  %110 = load i32, ptr @target_flags, align 4, !tbaa !20
  %111 = or i32 %110, %91
  store i32 %111, ptr @target_flags, align 4, !tbaa !20
  br label %127

112:                                              ; preds = %103
  %113 = xor i32 %91, -1
  %114 = load i32, ptr @target_flags, align 4, !tbaa !20
  %115 = and i32 %114, %113
  store i32 %115, ptr @target_flags, align 4, !tbaa !20
  br label %127

116:                                              ; preds = %98
  br i1 %75, label %117, label %126

117:                                              ; preds = %116
  %118 = sext i32 %89 to i64
  %119 = getelementptr inbounds ptr, ptr %1, i64 %118
  %120 = load ptr, ptr %119, align 8, !tbaa !5
  %121 = icmp eq ptr %120, null
  br i1 %121, label %123, label %122

122:                                              ; preds = %117
  call void (ptr, ...) @error(ptr noundef nonnull @.str.323, ptr noundef nonnull %70) #30
  br label %127

123:                                              ; preds = %117
  %124 = getelementptr inbounds i8, ptr %60, i64 %69
  %125 = call ptr @xstrdup(ptr noundef nonnull %124) #30
  store ptr %125, ptr %119, align 8, !tbaa !5
  br label %127

126:                                              ; preds = %116
  call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 3839, ptr noundef nonnull @.str.131) #30
  br label %127

127:                                              ; preds = %94, %126, %123, %122, %109, %112, %93
  %128 = phi i8 [ 0, %93 ], [ %28, %94 ], [ %28, %109 ], [ %28, %112 ], [ 0, %122 ], [ %28, %123 ], [ %28, %126 ]
  %129 = icmp eq ptr %42, null
  br i1 %129, label %130, label %26, !llvm.loop !85

130:                                              ; preds = %15, %26, %127
  %131 = phi i8 [ %128, %127 ], [ %28, %26 ], [ %16, %15 ]
  ret i8 %131
}

; Function Attrs: mustprogress nounwind willreturn allockind("free") memory(argmem: readwrite, inaccessiblemem: readwrite)
declare void @free(ptr allocptr nocapture noundef) local_unnamed_addr #14

; Function Attrs: nounwind sspstrong uwtable
define dso_local void @x86_elf_aligned_common(ptr noundef %0, ptr noundef %1, i64 noundef %2, i32 noundef %3) local_unnamed_addr #9 {
  %5 = load i32, ptr @ix86_cmodel, align 4
  switch i32 %5, label %12 [
    i32 6, label %6
    i32 3, label %6
  ]

6:                                                ; preds = %4, %4
  %7 = load i32, ptr @ix86_section_threshold, align 4, !tbaa !20
  %8 = zext i32 %7 to i64
  %9 = icmp ult i64 %8, %2
  br i1 %9, label %10, label %12

10:                                               ; preds = %6
  %11 = tail call i64 @fwrite(ptr nonnull @.str.112, i64 11, i64 1, ptr %0)
  br label %14

12:                                               ; preds = %4, %6
  %13 = tail call i64 @fwrite(ptr nonnull @.str.113, i64 7, i64 1, ptr %0)
  br label %14

14:                                               ; preds = %12, %10
  tail call void @assemble_name(ptr noundef %0, ptr noundef %1) #30
  %15 = sdiv i32 %3, 8
  %16 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %0, ptr noundef nonnull @.str.114, i64 noundef %2, i32 noundef %15)
  ret void
}

; Function Attrs: nofree nounwind
declare noundef i32 @fputs(ptr nocapture noundef readonly, ptr nocapture noundef) local_unnamed_addr #1

declare void @assemble_name(ptr noundef, ptr noundef) local_unnamed_addr #3

; Function Attrs: nofree nounwind
declare noundef i32 @fprintf(ptr nocapture noundef, ptr nocapture noundef readonly, ...) local_unnamed_addr #1

; Function Attrs: nounwind sspstrong uwtable
define dso_local void @x86_output_aligned_bss(ptr noundef %0, ptr noundef %1, ptr noundef %2, i64 noundef %3, i32 noundef %4) local_unnamed_addr #9 {
  %6 = load i32, ptr @ix86_cmodel, align 4
  switch i32 %6, label %13 [
    i32 6, label %7
    i32 3, label %7
  ]

7:                                                ; preds = %5, %5
  %8 = load i32, ptr @ix86_section_threshold, align 4, !tbaa !20
  %9 = zext i32 %8 to i64
  %10 = icmp ult i64 %9, %3
  br i1 %10, label %11, label %13

11:                                               ; preds = %7
  %12 = tail call ptr @get_named_section(ptr noundef %1, ptr noundef nonnull @.str.115, i32 noundef 0) #30
  br label %15

13:                                               ; preds = %5, %7
  %14 = load ptr, ptr @bss_section, align 8, !tbaa !5
  br label %15

15:                                               ; preds = %13, %11
  %16 = phi ptr [ %14, %13 ], [ %12, %11 ]
  tail call void @switch_to_section(ptr noundef %16) #30
  %17 = sdiv i32 %4, 8
  %18 = sext i32 %17 to i64
  %19 = tail call i32 @floor_log2(i64 noundef %18) #30
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %25, label %21

21:                                               ; preds = %15
  %22 = tail call i32 @floor_log2(i64 noundef %18) #30
  %23 = shl nuw i32 1, %22
  %24 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %0, ptr noundef nonnull @.str.116, i32 noundef %23)
  br label %25

25:                                               ; preds = %21, %15
  store ptr %1, ptr @last_assemble_variable_decl, align 8, !tbaa !5
  %26 = tail call i64 @fwrite(ptr nonnull @.str.117, i64 7, i64 1, ptr %0)
  tail call void @assemble_name(ptr noundef %0, ptr noundef %2) #30
  %27 = tail call i64 @fwrite(ptr nonnull @.str.118, i64 2, i64 1, ptr %0)
  %28 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %0, ptr noundef nonnull @.str.119, ptr noundef nonnull @.str.120)
  %29 = tail call i32 @putc(i32 noundef 10, ptr noundef %0)
  store i32 0, ptr @size_directive_output, align 4, !tbaa !20
  %30 = load i32, ptr @flag_inhibit_size_directive, align 4, !tbaa !20
  %31 = icmp eq i32 %30, 0
  %32 = icmp ne ptr %1, null
  %33 = and i1 %32, %31
  br i1 %33, label %34, label %44

34:                                               ; preds = %25
  %35 = getelementptr inbounds %struct.tree_decl_common, ptr %1, i64 0, i32 1
  %36 = load ptr, ptr %35, align 8, !tbaa !16
  %37 = icmp eq ptr %36, null
  br i1 %37, label %44, label %38

38:                                               ; preds = %34
  store i32 1, ptr @size_directive_output, align 4, !tbaa !20
  %39 = getelementptr inbounds %struct.tree_common, ptr %1, i64 0, i32 2
  %40 = load ptr, ptr %39, align 8, !tbaa !16
  %41 = tail call i64 @int_size_in_bytes(ptr noundef %40) #30
  %42 = tail call i64 @fwrite(ptr nonnull @.str.121, i64 7, i64 1, ptr %0)
  tail call void @assemble_name(ptr noundef %0, ptr noundef %2) #30
  %43 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %0, ptr noundef nonnull @.str.122, i64 noundef %41)
  br label %44

44:                                               ; preds = %25, %34, %38
  tail call void @assemble_name(ptr noundef %0, ptr noundef %2) #30
  %45 = tail call i64 @fwrite(ptr nonnull @.str.123, i64 2, i64 1, ptr %0)
  %46 = tail call i64 @llvm.umax.i64(i64 %3, i64 1)
  %47 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %0, ptr noundef nonnull @.str.124, ptr noundef nonnull @.str.125, i64 noundef %46)
  ret void
}

declare void @switch_to_section(ptr noundef) local_unnamed_addr #3

declare ptr @get_named_section(ptr noundef, ptr noundef, i32 noundef) local_unnamed_addr #3

declare i32 @floor_log2(i64 noundef) local_unnamed_addr #3

declare i64 @int_size_in_bytes(ptr noundef) local_unnamed_addr #3

; Function Attrs: mustprogress nofree norecurse nosync nounwind sspstrong willreturn memory(readwrite, argmem: none, inaccessiblemem: none) uwtable
define dso_local void @optimization_options(i32 noundef %0, i32 noundef %1) local_unnamed_addr #15 {
  %3 = icmp sgt i32 %0, 1
  br i1 %3, label %4, label %5

4:                                                ; preds = %2
  store i32 0, ptr @flag_schedule_insns, align 4, !tbaa !20
  br label %5

5:                                                ; preds = %4, %2
  %6 = load i32, ptr @optimize, align 4, !tbaa !20
  %7 = icmp sgt i32 %6, 0
  br i1 %7, label %8, label %9

8:                                                ; preds = %5
  store i32 2, ptr @flag_omit_frame_pointer, align 4, !tbaa !20
  br label %9

9:                                                ; preds = %8, %5
  store i32 2, ptr @flag_pcc_struct_return, align 4, !tbaa !20
  store i32 2, ptr @flag_asynchronous_unwind_tables, align 4, !tbaa !20
  store i32 1, ptr @flag_vect_cost_model, align 4, !tbaa !20
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define dso_local i32 @ix86_return_pops_args(ptr noundef %0, ptr noundef %1, i32 noundef %2) local_unnamed_addr #9 {
  %4 = load i32, ptr @target_flags, align 4, !tbaa !20
  %5 = and i32 %4, 131072
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %14, label %7

7:                                                ; preds = %3
  %8 = icmp eq ptr %0, null
  br i1 %8, label %14, label %9

9:                                                ; preds = %7
  %10 = load i64, ptr %0, align 8
  %11 = and i64 %10, 65535
  %12 = icmp ne i64 %11, 1
  %13 = zext i1 %12 to i32
  br label %14

14:                                               ; preds = %7, %9, %3
  %15 = phi i32 [ 0, %3 ], [ 1, %7 ], [ %13, %9 ]
  %16 = getelementptr inbounds %struct.tree_type, ptr %1, i64 0, i32 4
  %17 = load ptr, ptr %16, align 8, !tbaa !16
  %18 = tail call ptr @lookup_attribute(ptr noundef nonnull @.str.126, ptr noundef %17) #30
  %19 = icmp eq ptr %18, null
  br i1 %19, label %20, label %33

20:                                               ; preds = %14
  %21 = load ptr, ptr %16, align 8, !tbaa !16
  %22 = tail call ptr @lookup_attribute(ptr noundef nonnull @.str.127, ptr noundef %21) #30
  %23 = icmp eq ptr %22, null
  br i1 %23, label %24, label %30

24:                                               ; preds = %20
  %25 = load ptr, ptr %16, align 8, !tbaa !16
  %26 = tail call ptr @lookup_attribute(ptr noundef nonnull @.str.128, ptr noundef %25) #30
  %27 = icmp eq ptr %26, null
  %28 = icmp eq i32 %15, 0
  %29 = select i1 %27, i1 %28, i1 false
  br i1 %29, label %33, label %30

30:                                               ; preds = %24, %20
  %31 = tail call zeroext i8 @stdarg_p(ptr noundef nonnull %1) #30
  %32 = icmp eq i8 %31, 0
  br i1 %32, label %44, label %33

33:                                               ; preds = %24, %30, %14
  %34 = getelementptr inbounds %struct.tree_common, ptr %1, i64 0, i32 2
  %35 = load ptr, ptr %34, align 8, !tbaa !16
  %36 = tail call i32 @aggregate_value_p(ptr noundef %35, ptr noundef %0) #30
  %37 = icmp eq i32 %36, 0
  br i1 %37, label %43, label %38

38:                                               ; preds = %33
  %39 = tail call fastcc i32 @ix86_function_regparm(ptr noundef nonnull %1, ptr noundef %0)
  %40 = icmp eq i32 %39, 0
  %41 = load i8, ptr getelementptr inbounds ([87 x i8], ptr @mode_size, i64 0, i64 16), align 16
  %42 = zext i8 %41 to i32
  br i1 %40, label %44, label %43

43:                                               ; preds = %38, %33
  br label %44

44:                                               ; preds = %30, %38, %43
  %45 = phi i32 [ 0, %43 ], [ %42, %38 ], [ %2, %30 ]
  ret i32 %45
}

declare ptr @lookup_attribute(ptr noundef, ptr noundef) local_unnamed_addr #3

declare zeroext i8 @stdarg_p(ptr noundef) local_unnamed_addr #3

declare i32 @aggregate_value_p(ptr noundef, ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc i32 @ix86_function_regparm(ptr nocapture noundef readonly %0, ptr noundef %1) unnamed_addr #9 {
  %3 = load i32, ptr @ix86_regparm, align 4, !tbaa !20
  %4 = getelementptr inbounds %struct.tree_type, ptr %0, i64 0, i32 4
  %5 = load ptr, ptr %4, align 8, !tbaa !16
  %6 = tail call ptr @lookup_attribute(ptr noundef nonnull @.str.324, ptr noundef %5) #30
  %7 = icmp eq ptr %6, null
  br i1 %7, label %16, label %8

8:                                                ; preds = %2
  %9 = getelementptr inbounds %struct.tree_list, ptr %6, i64 0, i32 2
  %10 = load ptr, ptr %9, align 8, !tbaa !16
  %11 = getelementptr inbounds %struct.tree_list, ptr %10, i64 0, i32 2
  %12 = load ptr, ptr %11, align 8, !tbaa !16
  %13 = getelementptr inbounds %struct.tree_int_cst, ptr %12, i64 0, i32 1
  %14 = load i64, ptr %13, align 8, !tbaa !16
  %15 = trunc i64 %14 to i32
  br label %83

16:                                               ; preds = %2
  %17 = load ptr, ptr %4, align 8, !tbaa !16
  %18 = tail call ptr @lookup_attribute(ptr noundef nonnull @.str.128, ptr noundef %17) #30
  %19 = icmp eq ptr %18, null
  br i1 %19, label %20, label %83

20:                                               ; preds = %16
  %21 = icmp eq ptr %1, null
  br i1 %21, label %83, label %22

22:                                               ; preds = %20
  %23 = load i64, ptr %1, align 8
  %24 = and i64 %23, 65535
  %25 = icmp ne i64 %24, 29
  %26 = load i32, ptr @optimize, align 4
  %27 = icmp eq i32 %26, 0
  %28 = select i1 %25, i1 true, i1 %27
  %29 = load i32, ptr @profile_flag, align 4
  %30 = icmp ne i32 %29, 0
  %31 = select i1 %28, i1 true, i1 %30
  br i1 %31, label %83, label %32

32:                                               ; preds = %22
  %33 = tail call ptr @cgraph_local_info(ptr noundef nonnull %1) #30
  %34 = icmp eq ptr %33, null
  br i1 %34, label %83, label %35

35:                                               ; preds = %32
  %36 = getelementptr inbounds %struct.cgraph_local_info, ptr %33, i64 0, i32 2
  %37 = load i8, ptr %36, align 8
  %38 = and i8 %37, 1
  %39 = icmp eq i8 %38, 0
  br i1 %39, label %83, label %40

40:                                               ; preds = %35
  %41 = load i8, ptr @fixed_regs, align 16, !tbaa !16
  %42 = icmp eq i8 %41, 0
  %43 = load i8, ptr getelementptr inbounds ([53 x i8], ptr @fixed_regs, i64 0, i64 1), align 1, !tbaa !16
  br i1 %42, label %46, label %44

44:                                               ; preds = %40
  %45 = load i8, ptr getelementptr inbounds ([53 x i8], ptr @fixed_regs, i64 0, i64 2), align 2, !tbaa !16
  br label %57

46:                                               ; preds = %40
  %47 = icmp eq i8 %43, 0
  %48 = load i8, ptr getelementptr inbounds ([53 x i8], ptr @fixed_regs, i64 0, i64 2), align 2, !tbaa !16
  br i1 %47, label %49, label %57

49:                                               ; preds = %46
  %50 = icmp eq i8 %48, 0
  br i1 %50, label %51, label %57

51:                                               ; preds = %49
  %52 = getelementptr inbounds %struct.tree_function_decl, ptr %1, i64 0, i32 5
  %53 = load i32, ptr %52, align 8
  %54 = and i32 %53, 4194304
  %55 = icmp eq i32 %54, 0
  %56 = select i1 %55, i32 3, i32 2
  br label %62

57:                                               ; preds = %44, %49, %46
  %58 = phi i8 [ %45, %44 ], [ %48, %46 ], [ %48, %49 ]
  %59 = phi i32 [ 0, %44 ], [ 1, %46 ], [ 2, %49 ]
  %60 = icmp ne i8 %43, 0
  %61 = zext i1 %60 to i32
  br label %62

62:                                               ; preds = %57, %51
  %63 = phi i8 [ 0, %51 ], [ %58, %57 ]
  %64 = phi i32 [ 0, %51 ], [ %61, %57 ]
  %65 = phi i32 [ %56, %51 ], [ %59, %57 ]
  %66 = load i8, ptr getelementptr inbounds ([53 x i8], ptr @fixed_regs, i64 0, i64 3), align 1, !tbaa !16
  %67 = load i8, ptr getelementptr inbounds ([53 x i8], ptr @fixed_regs, i64 0, i64 4), align 4, !tbaa !16
  %68 = insertelement <4 x i8> poison, i8 %41, i64 0
  %69 = insertelement <4 x i8> %68, i8 %63, i64 1
  %70 = insertelement <4 x i8> %69, i8 %66, i64 2
  %71 = insertelement <4 x i8> %70, i8 %67, i64 3
  %72 = icmp ne <4 x i8> %71, zeroinitializer
  %73 = load i8, ptr getelementptr inbounds ([53 x i8], ptr @fixed_regs, i64 0, i64 5), align 1, !tbaa !16
  %74 = icmp ne i8 %73, 0
  %75 = zext i1 %74 to i32
  %76 = bitcast <4 x i1> %72 to i4
  %77 = tail call i4 @llvm.ctpop.i4(i4 %76), !range !86
  %78 = zext i4 %77 to i32
  %79 = add nuw nsw i32 %78, %75
  %80 = add nuw nsw i32 %79, %64
  %81 = tail call i32 @llvm.usub.sat.i32(i32 %65, i32 %80)
  %82 = tail call i32 @llvm.smax.i32(i32 %81, i32 %3)
  br label %83

83:                                               ; preds = %20, %22, %62, %35, %32, %16, %8
  %84 = phi i32 [ %15, %8 ], [ 2, %16 ], [ %3, %22 ], [ %3, %20 ], [ %82, %62 ], [ %3, %35 ], [ %3, %32 ]
  ret i32 %84
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind sspstrong willreturn memory(read, argmem: none, inaccessiblemem: none) uwtable
define dso_local zeroext i8 @ix86_function_arg_regno_p(i32 noundef %0) local_unnamed_addr #16 {
  %2 = icmp slt i32 %0, 3
  br i1 %2, label %23, label %3

3:                                                ; preds = %1
  %4 = load i32, ptr @ix86_isa_flags, align 4, !tbaa !20
  %5 = and i32 %4, 2048
  %6 = icmp ne i32 %5, 0
  %7 = zext i32 %0 to i64
  %8 = add nsw i64 %7, -29
  %9 = icmp ult i64 %8, 8
  %10 = select i1 %6, i1 %9, i1 false
  %11 = icmp ult i32 %0, 32
  %12 = and i1 %11, %10
  br i1 %12, label %23, label %13

13:                                               ; preds = %3
  %14 = and i32 %4, 65536
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %23, label %16

16:                                               ; preds = %13
  %17 = add i32 %0, -21
  %18 = icmp ult i32 %17, 32
  br i1 %18, label %19, label %23

19:                                               ; preds = %16
  %20 = sext i32 %17 to i64
  %21 = getelementptr inbounds [32 x i8], ptr @switch.table.ix86_function_arg_regno_p, i64 0, i64 %20
  %22 = load i8, ptr %21, align 1
  br label %23

23:                                               ; preds = %19, %16, %3, %13, %1
  %24 = phi i8 [ 1, %1 ], [ 0, %13 ], [ 1, %3 ], [ 0, %16 ], [ %22, %19 ]
  ret i8 %24
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind sspstrong willreturn memory(read, argmem: none, inaccessiblemem: none) uwtable
define dso_local i32 @ix86_reg_parm_stack_space(ptr nocapture noundef readnone %0) local_unnamed_addr #16 {
  %2 = load i32, ptr @ix86_abi, align 4, !tbaa !16
  %3 = icmp eq i32 %2, 1
  %4 = select i1 %3, i32 32, i32 0
  ret i32 %4
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind sspstrong willreturn memory(read, argmem: none, inaccessiblemem: none) uwtable
define dso_local i32 @ix86_function_type_abi(ptr nocapture noundef readnone %0) local_unnamed_addr #16 {
  %2 = load i32, ptr @ix86_abi, align 4, !tbaa !16
  ret i32 %2
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind sspstrong willreturn memory(read, argmem: none, inaccessiblemem: none) uwtable
define dso_local i32 @ix86_cfun_abi() local_unnamed_addr #16 {
  %1 = load i32, ptr @ix86_abi, align 4, !tbaa !16
  ret i32 %1
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind sspstrong willreturn memory(readwrite, inaccessiblemem: none) uwtable
define dso_local void @ix86_call_abi_override(ptr nocapture noundef readnone %0) local_unnamed_addr #17 {
  %2 = load i32, ptr @ix86_abi, align 4, !tbaa !16
  %3 = load ptr, ptr @cfun, align 8, !tbaa !5
  %4 = getelementptr inbounds %struct.function, ptr %3, i64 0, i32 10
  %5 = load ptr, ptr %4, align 8, !tbaa !87
  %6 = getelementptr inbounds %struct.machine_function, ptr %5, i64 0, i32 7
  store i32 %2, ptr %6, align 8, !tbaa !59
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define dso_local void @init_cumulative_args(ptr nocapture noundef writeonly %0, ptr noundef %1, ptr noundef readnone %2, ptr noundef %3) local_unnamed_addr #9 {
  %5 = icmp eq ptr %3, null
  br i1 %5, label %8, label %6

6:                                                ; preds = %4
  %7 = tail call ptr @cgraph_local_info(ptr noundef nonnull %3) #30
  br label %8

8:                                                ; preds = %4, %6
  %9 = phi ptr [ %7, %6 ], [ null, %4 ]
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(64) %0, i8 0, i64 60, i1 false)
  %10 = load i32, ptr @ix86_abi, align 4
  %11 = getelementptr inbounds %struct.ix86_args, ptr %0, i64 0, i32 15
  store i32 %10, ptr %11, align 4
  %12 = load i32, ptr @ix86_regparm, align 4, !tbaa !20
  %13 = getelementptr inbounds %struct.ix86_args, ptr %0, i64 0, i32 1
  store i32 %12, ptr %13, align 4, !tbaa !89
  %14 = load i32, ptr @ix86_isa_flags, align 4, !tbaa !20
  %15 = and i32 %14, 65536
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %19, label %17

17:                                               ; preds = %8
  %18 = getelementptr inbounds %struct.ix86_args, ptr %0, i64 0, i32 5
  store i32 3, ptr %18, align 4, !tbaa !91
  br label %19

19:                                               ; preds = %17, %8
  %20 = and i32 %14, 2048
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %24, label %22

22:                                               ; preds = %19
  %23 = getelementptr inbounds %struct.ix86_args, ptr %0, i64 0, i32 11
  store i32 3, ptr %23, align 4, !tbaa !92
  br label %24

24:                                               ; preds = %22, %19
  %25 = getelementptr inbounds %struct.ix86_args, ptr %0, i64 0, i32 6
  store i32 1, ptr %25, align 4, !tbaa !93
  %26 = getelementptr inbounds %struct.ix86_args, ptr %0, i64 0, i32 7
  store i32 1, ptr %26, align 4, !tbaa !94
  %27 = getelementptr inbounds %struct.ix86_args, ptr %0, i64 0, i32 8
  store i32 1, ptr %27, align 4, !tbaa !95
  %28 = icmp eq ptr %9, null
  br i1 %28, label %37, label %29

29:                                               ; preds = %24
  %30 = getelementptr inbounds %struct.cgraph_local_info, ptr %9, i64 0, i32 2
  %31 = load i8, ptr %30, align 8
  %32 = and i8 %31, 1
  %33 = icmp eq i8 %32, 0
  br i1 %33, label %37, label %34

34:                                               ; preds = %29
  %35 = getelementptr inbounds %struct.tree_common, ptr %3, i64 0, i32 2
  %36 = load ptr, ptr %35, align 8, !tbaa !16
  br label %37

37:                                               ; preds = %34, %29, %24
  %38 = phi ptr [ %36, %34 ], [ %1, %29 ], [ %1, %24 ]
  %39 = icmp eq ptr %38, null
  br i1 %39, label %46, label %40

40:                                               ; preds = %37
  %41 = tail call zeroext i8 @prototype_p(ptr noundef nonnull %38) #30
  %42 = icmp eq i8 %41, 0
  br i1 %42, label %48, label %43

43:                                               ; preds = %40
  %44 = tail call zeroext i8 @stdarg_p(ptr noundef nonnull %38) #30
  %45 = icmp ne i8 %44, 0
  br label %48

46:                                               ; preds = %37
  %47 = icmp eq ptr %2, null
  br label %48

48:                                               ; preds = %40, %43, %46
  %49 = phi i1 [ %47, %46 ], [ true, %40 ], [ %45, %43 ]
  %50 = zext i1 %49 to i32
  %51 = getelementptr inbounds %struct.ix86_args, ptr %0, i64 0, i32 13
  store i32 %50, ptr %51, align 4, !tbaa !96
  %52 = tail call zeroext i8 @stdarg_p(ptr noundef %38) #30
  %53 = icmp eq i8 %52, 0
  br i1 %53, label %57, label %54

54:                                               ; preds = %48
  store i32 0, ptr %13, align 4, !tbaa !89
  %55 = getelementptr inbounds %struct.ix86_args, ptr %0, i64 0, i32 5
  %56 = getelementptr inbounds %struct.ix86_args, ptr %0, i64 0, i32 11
  store i32 0, ptr %56, align 4, !tbaa !92
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) %55, i8 0, i64 16, i1 false)
  br label %114

57:                                               ; preds = %48
  br i1 %39, label %72, label %58

58:                                               ; preds = %57
  %59 = getelementptr inbounds %struct.tree_type, ptr %38, i64 0, i32 4
  %60 = load ptr, ptr %59, align 8, !tbaa !16
  %61 = tail call ptr @lookup_attribute(ptr noundef nonnull @.str.128, ptr noundef %60) #30
  %62 = icmp eq ptr %61, null
  br i1 %62, label %65, label %63

63:                                               ; preds = %58
  %64 = getelementptr inbounds %struct.ix86_args, ptr %0, i64 0, i32 3
  store i32 1, ptr %64, align 4, !tbaa !97
  br label %67

65:                                               ; preds = %58
  %66 = tail call fastcc i32 @ix86_function_regparm(ptr noundef nonnull %38, ptr noundef %3)
  br label %67

67:                                               ; preds = %63, %65
  %68 = phi i32 [ %66, %65 ], [ 2, %63 ]
  store i32 %68, ptr %13, align 4
  %69 = load i32, ptr @target_flags, align 4, !tbaa !20
  %70 = and i32 %69, 262144
  %71 = icmp eq i32 %70, 0
  br i1 %71, label %76, label %80

72:                                               ; preds = %57
  %73 = load i32, ptr @target_flags, align 4, !tbaa !20
  %74 = and i32 %73, 262144
  %75 = icmp eq i32 %74, 0
  br i1 %75, label %87, label %80

76:                                               ; preds = %67
  %77 = load ptr, ptr %59, align 8, !tbaa !16
  %78 = tail call ptr @lookup_attribute(ptr noundef nonnull @.str.325, ptr noundef %77) #30
  %79 = icmp eq ptr %78, null
  br i1 %79, label %87, label %80

80:                                               ; preds = %72, %76, %67
  %81 = load i32, ptr @ix86_isa_flags, align 4, !tbaa !20
  %82 = and i32 %81, 65536
  %83 = icmp eq i32 %82, 0
  br i1 %83, label %84, label %111

84:                                               ; preds = %80
  br i1 %5, label %86, label %85

85:                                               ; preds = %84
  tail call void (ptr, ...) @error(ptr noundef nonnull @.str.326, ptr noundef nonnull %3) #30
  br label %111

86:                                               ; preds = %84
  tail call void (ptr, ...) @error(ptr noundef nonnull @.str.327, ptr noundef %38) #30
  br label %111

87:                                               ; preds = %72, %76
  br i1 %5, label %111, label %88

88:                                               ; preds = %87
  %89 = load i32, ptr @ix86_fpmath, align 4, !tbaa !16
  %90 = and i32 %89, 2
  %91 = icmp eq i32 %90, 0
  %92 = load i32, ptr @optimize, align 4
  %93 = icmp eq i32 %92, 0
  %94 = select i1 %91, i1 true, i1 %93
  %95 = load i32, ptr @profile_flag, align 4
  %96 = icmp ne i32 %95, 0
  %97 = select i1 %94, i1 true, i1 %96
  br i1 %97, label %111, label %98

98:                                               ; preds = %88
  %99 = tail call ptr @cgraph_local_info(ptr noundef nonnull %3) #30
  %100 = icmp eq ptr %99, null
  br i1 %100, label %111, label %101

101:                                              ; preds = %98
  %102 = getelementptr inbounds %struct.cgraph_local_info, ptr %99, i64 0, i32 2
  %103 = load i8, ptr %102, align 8
  %104 = and i8 %103, 1
  %105 = icmp eq i8 %104, 0
  br i1 %105, label %111, label %106

106:                                              ; preds = %101
  %107 = load i32, ptr @ix86_isa_flags, align 4, !tbaa !20
  %108 = and i32 %107, 131072
  %109 = icmp eq i32 %108, 0
  %110 = select i1 %109, i32 1, i32 2
  br label %111

111:                                              ; preds = %80, %85, %86, %87, %88, %98, %101, %106
  %112 = phi i32 [ %110, %106 ], [ 0, %85 ], [ 0, %86 ], [ 2, %80 ], [ 0, %88 ], [ 0, %87 ], [ 0, %101 ], [ 0, %98 ]
  %113 = getelementptr inbounds %struct.ix86_args, ptr %0, i64 0, i32 14
  store i32 %112, ptr %113, align 4, !tbaa !98
  br label %114

114:                                              ; preds = %111, %54
  ret void
}

declare ptr @cgraph_local_info(ptr noundef) local_unnamed_addr #3

declare zeroext i8 @prototype_p(ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define dso_local void @function_arg_advance(ptr nocapture noundef %0, i32 noundef %1, ptr noundef %2, i32 noundef %3) local_unnamed_addr #9 {
  %5 = icmp eq i32 %1, 1
  br i1 %5, label %6, label %8

6:                                                ; preds = %4
  %7 = tail call i64 @int_size_in_bytes(ptr noundef %2) #30
  br label %13

8:                                                ; preds = %4
  %9 = zext i32 %1 to i64
  %10 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %9
  %11 = load i8, ptr %10, align 1, !tbaa !16
  %12 = zext i8 %11 to i64
  br label %13

13:                                               ; preds = %8, %6
  %14 = phi i64 [ %7, %6 ], [ %12, %8 ]
  %15 = add nsw i64 %14, 3
  %16 = sdiv i64 %15, 4
  %17 = icmp eq ptr %2, null
  br i1 %17, label %18, label %19

18:                                               ; preds = %13
  tail call fastcc void @function_arg_advance_32(ptr noundef %0, i32 noundef %1, ptr noundef null, i64 noundef %14, i64 noundef %16)
  br label %21

19:                                               ; preds = %13
  %20 = tail call fastcc i32 @type_natural_mode(ptr noundef nonnull %2, ptr noundef null)
  tail call fastcc void @function_arg_advance_32(ptr noundef %0, i32 noundef %20, ptr noundef nonnull %2, i64 noundef %14, i64 noundef %16)
  br label %21

21:                                               ; preds = %18, %19
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc i32 @type_natural_mode(ptr noundef %0, ptr noundef readonly %1) unnamed_addr #9 {
  %3 = load i64, ptr %0, align 8
  %4 = and i64 %3, 65535
  %5 = icmp eq i64 %4, 14
  br i1 %5, label %6, label %9

6:                                                ; preds = %2
  %7 = tail call i32 @vector_type_mode(ptr noundef nonnull %0) #30
  %8 = load i64, ptr %0, align 8
  br label %14

9:                                                ; preds = %2
  %10 = getelementptr inbounds %struct.tree_type, ptr %0, i64 0, i32 6
  %11 = load i32, ptr %10, align 4
  %12 = lshr i32 %11, 16
  %13 = and i32 %12, 255
  br label %14

14:                                               ; preds = %9, %6
  %15 = phi i64 [ %8, %6 ], [ %3, %9 ]
  %16 = phi i32 [ %7, %6 ], [ %13, %9 ]
  %17 = and i64 %15, 65535
  %18 = icmp eq i64 %17, 14
  br i1 %18, label %19, label %102

19:                                               ; preds = %14
  %20 = zext i32 %16 to i64
  %21 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %20
  %22 = load i8, ptr %21, align 1, !tbaa !16
  %23 = add i8 %22, -12
  %24 = icmp ult i8 %23, 6
  br i1 %24, label %102, label %25

25:                                               ; preds = %19
  %26 = tail call i64 @int_size_in_bytes(ptr noundef nonnull %0) #30
  %27 = icmp eq i64 %26, 32
  switch i64 %26, label %102 [
    i64 32, label %28
    i64 16, label %28
    i64 8, label %28
  ]

28:                                               ; preds = %25, %25, %25
  %29 = getelementptr inbounds %struct.tree_type, ptr %0, i64 0, i32 6
  %30 = load i32, ptr %29, align 4
  %31 = and i32 %30, 1023
  %32 = icmp eq i32 %31, 0
  br i1 %32, label %102, label %33

33:                                               ; preds = %28
  %34 = getelementptr inbounds %struct.tree_common, ptr %0, i64 0, i32 2
  %35 = load ptr, ptr %34, align 8, !tbaa !16
  %36 = load i64, ptr %35, align 8
  %37 = and i64 %36, 65535
  %38 = icmp eq i64 %37, 14
  br i1 %38, label %39, label %46

39:                                               ; preds = %33
  %40 = tail call i32 @vector_type_mode(ptr noundef nonnull %35) #30
  %41 = load ptr, ptr %34, align 8, !tbaa !16
  %42 = load i64, ptr %41, align 8
  %43 = load i32, ptr %29, align 4
  %44 = and i64 %42, 65535
  %45 = and i32 %43, 1023
  br label %51

46:                                               ; preds = %33
  %47 = getelementptr inbounds %struct.tree_type, ptr %35, i64 0, i32 6
  %48 = load i32, ptr %47, align 4
  %49 = lshr i32 %48, 16
  %50 = and i32 %49, 255
  br label %51

51:                                               ; preds = %46, %39
  %52 = phi i32 [ %31, %46 ], [ %45, %39 ]
  %53 = phi i64 [ %37, %46 ], [ %44, %39 ]
  %54 = phi i32 [ %50, %46 ], [ %40, %39 ]
  %55 = icmp eq i64 %53, 9
  %56 = select i1 %55, i32 78, i32 55
  %57 = zext i32 %52 to i64
  %58 = shl nuw i64 1, %57
  br label %59

59:                                               ; preds = %51, %96
  %60 = phi i32 [ %56, %51 ], [ %99, %96 ]
  %61 = zext i32 %60 to i64
  %62 = getelementptr inbounds [87 x i8], ptr @mode_nunits, i64 0, i64 %61
  %63 = load i8, ptr %62, align 1, !tbaa !16
  %64 = zext i8 %63 to i64
  %65 = icmp eq i64 %58, %64
  br i1 %65, label %66, label %96

66:                                               ; preds = %59
  %67 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %61
  %68 = load i8, ptr %67, align 1, !tbaa !16
  %69 = zext i8 %68 to i32
  %70 = icmp eq i32 %54, %69
  br i1 %70, label %71, label %96

71:                                               ; preds = %66
  br i1 %27, label %72, label %102

72:                                               ; preds = %71
  %73 = load i32, ptr @ix86_isa_flags, align 4, !tbaa !20
  %74 = and i32 %73, 32
  %75 = icmp eq i32 %74, 0
  br i1 %75, label %76, label %102

76:                                               ; preds = %72
  %77 = icmp eq ptr %1, null
  %78 = load i1, ptr @type_natural_mode.warnedavx, align 1
  %79 = select i1 %77, i1 true, i1 %78
  br i1 %79, label %86, label %80

80:                                               ; preds = %76
  %81 = getelementptr inbounds %struct.ix86_args, ptr %1, i64 0, i32 6
  %82 = load i32, ptr %81, align 4, !tbaa !93
  %83 = icmp eq i32 %82, 0
  br i1 %83, label %86, label %84

84:                                               ; preds = %80
  store i1 true, ptr @type_natural_mode.warnedavx, align 1
  %85 = tail call zeroext i8 (i32, ptr, ...) @warning(i32 noundef 0, ptr noundef nonnull @.str.328) #30
  br label %86

86:                                               ; preds = %84, %80, %76
  %87 = load i64, ptr %0, align 8
  %88 = and i64 %87, 65535
  %89 = icmp eq i64 %88, 14
  br i1 %89, label %90, label %92

90:                                               ; preds = %86
  %91 = tail call i32 @vector_type_mode(ptr noundef nonnull %0) #30
  br label %102

92:                                               ; preds = %86
  %93 = load i32, ptr %29, align 4
  %94 = lshr i32 %93, 16
  %95 = and i32 %94, 255
  br label %102

96:                                               ; preds = %59, %66
  %97 = getelementptr inbounds [87 x i8], ptr @mode_wider, i64 0, i64 %61
  %98 = load i8, ptr %97, align 1, !tbaa !16
  %99 = zext i8 %98 to i32
  %100 = icmp eq i8 %98, 0
  br i1 %100, label %101, label %59, !llvm.loop !99

101:                                              ; preds = %96
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 5037, ptr noundef nonnull @.str.131) #30
  br label %102

102:                                              ; preds = %28, %25, %101, %14, %19, %92, %90, %72, %71
  %103 = phi i32 [ %60, %71 ], [ %60, %72 ], [ %95, %92 ], [ %91, %90 ], [ %16, %14 ], [ %16, %19 ], [ %16, %25 ], [ %16, %28 ], [ 0, %101 ]
  ret i32 %103
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc void @function_arg_advance_32(ptr nocapture noundef %0, i32 noundef %1, ptr noundef readonly %2, i64 noundef %3, i64 noundef %4) unnamed_addr #9 {
  switch i32 %1, label %71 [
    i32 1, label %6
    i32 17, label %8
    i32 16, label %8
    i32 15, label %8
    i32 14, label %8
    i32 19, label %19
    i32 39, label %20
    i32 38, label %24
    i32 81, label %28
    i32 70, label %28
    i32 68, label %28
    i32 69, label %28
    i32 82, label %28
    i32 71, label %28
    i32 18, label %28
    i32 63, label %28
    i32 64, label %28
    i32 65, label %28
    i32 66, label %28
    i32 79, label %28
    i32 80, label %28
    i32 59, label %48
    i32 60, label %48
    i32 61, label %48
    i32 78, label %48
    i32 67, label %48
    i32 62, label %48
  ]

6:                                                ; preds = %5
  %7 = icmp slt i64 %3, 0
  br i1 %7, label %71, label %8

8:                                                ; preds = %6, %5, %5, %5, %5
  %9 = load i32, ptr %0, align 4, !tbaa !100
  %10 = trunc i64 %4 to i32
  %11 = add i32 %9, %10
  store i32 %11, ptr %0, align 4, !tbaa !100
  %12 = getelementptr inbounds %struct.ix86_args, ptr %0, i64 0, i32 1
  %13 = load i32, ptr %12, align 4, !tbaa !89
  %14 = sub i32 %13, %10
  store i32 %14, ptr %12, align 4, !tbaa !89
  %15 = getelementptr inbounds %struct.ix86_args, ptr %0, i64 0, i32 2
  %16 = load i32, ptr %15, align 4, !tbaa !101
  %17 = add i32 %16, %10
  store i32 %17, ptr %15, align 4, !tbaa !101
  %18 = icmp slt i32 %14, 1
  br i1 %18, label %68, label %71

19:                                               ; preds = %5
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 5782, ptr noundef nonnull @.str.131) #30
  br label %20

20:                                               ; preds = %5, %19
  %21 = getelementptr inbounds %struct.ix86_args, ptr %0, i64 0, i32 14
  %22 = load i32, ptr %21, align 4, !tbaa !98
  %23 = icmp slt i32 %22, 2
  br i1 %23, label %71, label %28

24:                                               ; preds = %5
  %25 = getelementptr inbounds %struct.ix86_args, ptr %0, i64 0, i32 14
  %26 = load i32, ptr %25, align 4, !tbaa !98
  %27 = icmp slt i32 %26, 1
  br i1 %27, label %71, label %28

28:                                               ; preds = %20, %24, %5, %5, %5, %5, %5, %5, %5, %5, %5, %5, %5, %5, %5
  %29 = icmp eq ptr %2, null
  br i1 %29, label %36, label %30

30:                                               ; preds = %28
  %31 = load i64, ptr %2, align 8
  %32 = trunc i64 %31 to i32
  %33 = and i32 %32, 65535
  %34 = add nsw i32 %33, -15
  %35 = icmp ult i32 %34, 4
  br i1 %35, label %71, label %36

36:                                               ; preds = %30, %28
  %37 = getelementptr inbounds %struct.ix86_args, ptr %0, i64 0, i32 4
  %38 = trunc i64 %4 to i32
  %39 = getelementptr inbounds %struct.ix86_args, ptr %0, i64 0, i32 5
  %40 = load <2 x i32>, ptr %37, align 4, !tbaa !20
  %41 = insertelement <2 x i32> <i32 poison, i32 -1>, i32 %38, i64 0
  %42 = add <2 x i32> %40, %41
  store <2 x i32> %42, ptr %37, align 4, !tbaa !20
  %43 = getelementptr inbounds %struct.ix86_args, ptr %0, i64 0, i32 9
  %44 = load i32, ptr %43, align 4, !tbaa !102
  %45 = add nsw i32 %44, 1
  store i32 %45, ptr %43, align 4, !tbaa !102
  %46 = extractelement <2 x i32> %40, i64 1
  %47 = icmp slt i32 %46, 2
  br i1 %47, label %68, label %71

48:                                               ; preds = %5, %5, %5, %5, %5, %5
  %49 = icmp eq ptr %2, null
  br i1 %49, label %56, label %50

50:                                               ; preds = %48
  %51 = load i64, ptr %2, align 8
  %52 = trunc i64 %51 to i32
  %53 = and i32 %52, 65535
  %54 = add nsw i32 %53, -15
  %55 = icmp ult i32 %54, 4
  br i1 %55, label %71, label %56

56:                                               ; preds = %50, %48
  %57 = getelementptr inbounds %struct.ix86_args, ptr %0, i64 0, i32 10
  %58 = trunc i64 %4 to i32
  %59 = getelementptr inbounds %struct.ix86_args, ptr %0, i64 0, i32 11
  %60 = load <2 x i32>, ptr %57, align 4, !tbaa !20
  %61 = insertelement <2 x i32> <i32 poison, i32 -1>, i32 %58, i64 0
  %62 = add <2 x i32> %60, %61
  store <2 x i32> %62, ptr %57, align 4, !tbaa !20
  %63 = getelementptr inbounds %struct.ix86_args, ptr %0, i64 0, i32 12
  %64 = load i32, ptr %63, align 4, !tbaa !103
  %65 = add nsw i32 %64, 1
  store i32 %65, ptr %63, align 4, !tbaa !103
  %66 = extractelement <2 x i32> %60, i64 1
  %67 = icmp slt i32 %66, 2
  br i1 %67, label %68, label %71

68:                                               ; preds = %56, %36, %8
  %69 = phi ptr [ %12, %8 ], [ %39, %36 ], [ %59, %56 ]
  %70 = phi ptr [ %15, %8 ], [ %43, %36 ], [ %63, %56 ]
  store i32 0, ptr %69, align 4, !tbaa !20
  store i32 0, ptr %70, align 4, !tbaa !20
  br label %71

71:                                               ; preds = %68, %50, %30, %56, %36, %24, %20, %8, %6, %5
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define dso_local ptr @function_arg(ptr noundef %0, i32 noundef %1, ptr noundef %2, i32 noundef %3) local_unnamed_addr #9 {
  %5 = icmp eq i32 %1, 1
  br i1 %5, label %6, label %8

6:                                                ; preds = %4
  %7 = tail call i64 @int_size_in_bytes(ptr noundef %2) #30
  br label %13

8:                                                ; preds = %4
  %9 = zext i32 %1 to i64
  %10 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %9
  %11 = load i8, ptr %10, align 1, !tbaa !16
  %12 = zext i8 %11 to i64
  br label %13

13:                                               ; preds = %8, %6
  %14 = phi i64 [ %7, %6 ], [ %12, %8 ]
  %15 = icmp eq ptr %2, null
  br i1 %15, label %22, label %16

16:                                               ; preds = %13
  %17 = load i64, ptr %2, align 8
  %18 = and i64 %17, 65535
  %19 = icmp eq i64 %18, 14
  br i1 %19, label %20, label %22

20:                                               ; preds = %16
  %21 = tail call fastcc i32 @type_natural_mode(ptr noundef nonnull %2, ptr noundef %0)
  br label %22

22:                                               ; preds = %20, %16, %13
  %23 = phi i32 [ %21, %20 ], [ %1, %16 ], [ %1, %13 ]
  %24 = add nsw i64 %14, 3
  %25 = sdiv i64 %24, 4
  switch i32 %23, label %159 [
    i32 0, label %26
    i32 1, label %28
    i32 17, label %30
    i32 16, label %30
    i32 15, label %30
    i32 14, label %30
    i32 39, label %57
    i32 38, label %61
    i32 18, label %65
    i32 63, label %65
    i32 64, label %65
    i32 65, label %65
    i32 66, label %65
    i32 79, label %65
    i32 80, label %65
    i32 19, label %100
    i32 81, label %101
    i32 70, label %101
    i32 68, label %101
    i32 69, label %101
    i32 82, label %101
    i32 71, label %101
    i32 59, label %124
    i32 60, label %124
    i32 61, label %124
    i32 78, label %124
    i32 67, label %124
    i32 62, label %124
  ]

26:                                               ; preds = %22
  %27 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 63), align 8, !tbaa !5
  br label %159

28:                                               ; preds = %22
  %29 = icmp slt i64 %14, 0
  br i1 %29, label %159, label %30

30:                                               ; preds = %28, %22, %22, %22, %22
  %31 = getelementptr inbounds %struct.ix86_args, ptr %0, i64 0, i32 1
  %32 = load i32, ptr %31, align 4, !tbaa !89
  %33 = sext i32 %32 to i64
  %34 = icmp sgt i64 %25, %33
  br i1 %34, label %159, label %35

35:                                               ; preds = %30
  %36 = getelementptr inbounds %struct.ix86_args, ptr %0, i64 0, i32 2
  %37 = load i32, ptr %36, align 4, !tbaa !101
  %38 = getelementptr inbounds %struct.ix86_args, ptr %0, i64 0, i32 3
  %39 = load i32, ptr %38, align 4, !tbaa !97
  %40 = icmp eq i32 %39, 0
  br i1 %40, label %54, label %41

41:                                               ; preds = %35
  %42 = and i32 %23, -17
  %43 = icmp eq i32 %42, 1
  br i1 %43, label %159, label %44

44:                                               ; preds = %41
  br i1 %15, label %51, label %45

45:                                               ; preds = %44
  %46 = load i64, ptr %2, align 8
  %47 = trunc i64 %46 to i32
  %48 = and i32 %47, 65535
  %49 = add nsw i32 %48, -15
  %50 = icmp ult i32 %49, 4
  br i1 %50, label %159, label %51

51:                                               ; preds = %45, %44
  %52 = icmp eq i32 %37, 0
  %53 = select i1 %52, i32 2, i32 %37
  br label %54

54:                                               ; preds = %51, %35
  %55 = phi i32 [ %53, %51 ], [ %37, %35 ]
  %56 = tail call ptr @gen_rtx_REG(i32 noundef %23, i32 noundef %55) #30
  br label %159

57:                                               ; preds = %22
  %58 = getelementptr inbounds %struct.ix86_args, ptr %0, i64 0, i32 14
  %59 = load i32, ptr %58, align 4, !tbaa !98
  %60 = icmp slt i32 %59, 2
  br i1 %60, label %159, label %65

61:                                               ; preds = %22
  %62 = getelementptr inbounds %struct.ix86_args, ptr %0, i64 0, i32 14
  %63 = load i32, ptr %62, align 4, !tbaa !98
  %64 = icmp slt i32 %63, 1
  br i1 %64, label %159, label %65

65:                                               ; preds = %61, %57, %22, %22, %22, %22, %22, %22, %22
  br i1 %15, label %72, label %66

66:                                               ; preds = %65
  %67 = load i64, ptr %2, align 8
  %68 = trunc i64 %67 to i32
  %69 = and i32 %68, 65535
  %70 = add nsw i32 %69, -15
  %71 = icmp ult i32 %70, 4
  br i1 %71, label %159, label %72

72:                                               ; preds = %66, %65
  %73 = load i32, ptr @ix86_isa_flags, align 4, !tbaa !20
  %74 = and i32 %73, 65536
  %75 = icmp ne i32 %74, 0
  %76 = load i1, ptr @function_arg_32.warnedsse, align 1
  %77 = select i1 %75, i1 true, i1 %76
  br i1 %77, label %84, label %78

78:                                               ; preds = %72
  %79 = getelementptr inbounds %struct.ix86_args, ptr %0, i64 0, i32 7
  %80 = load i32, ptr %79, align 4, !tbaa !94
  %81 = icmp eq i32 %80, 0
  br i1 %81, label %84, label %82

82:                                               ; preds = %78
  store i1 true, ptr @function_arg_32.warnedsse, align 1
  %83 = tail call zeroext i8 (i32, ptr, ...) @warning(i32 noundef 0, ptr noundef nonnull @.str.329) #30
  br label %84

84:                                               ; preds = %82, %78, %72
  %85 = getelementptr inbounds %struct.ix86_args, ptr %0, i64 0, i32 5
  %86 = load i32, ptr %85, align 4, !tbaa !91
  %87 = icmp eq i32 %86, 0
  br i1 %87, label %159, label %88

88:                                               ; preds = %84
  %89 = getelementptr inbounds %struct.ix86_args, ptr %0, i64 0, i32 9
  %90 = load i32, ptr %89, align 4, !tbaa !102
  %91 = add nsw i32 %90, 21
  br i1 %5, label %94, label %92

92:                                               ; preds = %88
  %93 = tail call ptr @gen_rtx_REG(i32 noundef %1, i32 noundef %91) #30
  br label %159

94:                                               ; preds = %88
  %95 = tail call ptr @gen_rtx_REG(i32 noundef %23, i32 noundef %91) #30
  %96 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 64), align 16, !tbaa !5
  %97 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 3, i32 noundef 0, ptr noundef %95, ptr noundef %96) #30
  %98 = tail call ptr (i32, ...) @gen_rtvec(i32 noundef 1, ptr noundef %97) #30
  %99 = tail call ptr @gen_rtx_fmt_E_stat(i32 noundef 15, i32 noundef 1, ptr noundef %98) #30
  br label %159

100:                                              ; preds = %22
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 5990, ptr noundef nonnull @.str.131) #30
  br label %101

101:                                              ; preds = %100, %22, %22, %22, %22, %22, %22
  br i1 %15, label %108, label %102

102:                                              ; preds = %101
  %103 = load i64, ptr %2, align 8
  %104 = trunc i64 %103 to i32
  %105 = and i32 %104, 65535
  %106 = add nsw i32 %105, -15
  %107 = icmp ult i32 %106, 4
  br i1 %107, label %159, label %108

108:                                              ; preds = %102, %101
  %109 = getelementptr inbounds %struct.ix86_args, ptr %0, i64 0, i32 5
  %110 = load i32, ptr %109, align 4, !tbaa !91
  %111 = icmp eq i32 %110, 0
  br i1 %111, label %159, label %112

112:                                              ; preds = %108
  %113 = getelementptr inbounds %struct.ix86_args, ptr %0, i64 0, i32 9
  %114 = load i32, ptr %113, align 4, !tbaa !102
  %115 = add nsw i32 %114, 21
  br i1 %5, label %118, label %116

116:                                              ; preds = %112
  %117 = tail call ptr @gen_rtx_REG(i32 noundef %1, i32 noundef %115) #30
  br label %159

118:                                              ; preds = %112
  %119 = tail call ptr @gen_rtx_REG(i32 noundef %23, i32 noundef %115) #30
  %120 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 64), align 16, !tbaa !5
  %121 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 3, i32 noundef 0, ptr noundef %119, ptr noundef %120) #30
  %122 = tail call ptr (i32, ...) @gen_rtvec(i32 noundef 1, ptr noundef %121) #30
  %123 = tail call ptr @gen_rtx_fmt_E_stat(i32 noundef 15, i32 noundef 1, ptr noundef %122) #30
  br label %159

124:                                              ; preds = %22, %22, %22, %22, %22, %22
  br i1 %15, label %131, label %125

125:                                              ; preds = %124
  %126 = load i64, ptr %2, align 8
  %127 = trunc i64 %126 to i32
  %128 = and i32 %127, 65535
  %129 = add nsw i32 %128, -15
  %130 = icmp ult i32 %129, 4
  br i1 %130, label %159, label %131

131:                                              ; preds = %125, %124
  %132 = load i32, ptr @ix86_isa_flags, align 4, !tbaa !20
  %133 = and i32 %132, 2048
  %134 = icmp ne i32 %133, 0
  %135 = load i1, ptr @function_arg_32.warnedmmx, align 1
  %136 = select i1 %134, i1 true, i1 %135
  br i1 %136, label %143, label %137

137:                                              ; preds = %131
  %138 = getelementptr inbounds %struct.ix86_args, ptr %0, i64 0, i32 8
  %139 = load i32, ptr %138, align 4, !tbaa !95
  %140 = icmp eq i32 %139, 0
  br i1 %140, label %143, label %141

141:                                              ; preds = %137
  store i1 true, ptr @function_arg_32.warnedmmx, align 1
  %142 = tail call zeroext i8 (i32, ptr, ...) @warning(i32 noundef 0, ptr noundef nonnull @.str.330) #30
  br label %143

143:                                              ; preds = %141, %137, %131
  %144 = getelementptr inbounds %struct.ix86_args, ptr %0, i64 0, i32 11
  %145 = load i32, ptr %144, align 4, !tbaa !92
  %146 = icmp eq i32 %145, 0
  br i1 %146, label %159, label %147

147:                                              ; preds = %143
  %148 = getelementptr inbounds %struct.ix86_args, ptr %0, i64 0, i32 12
  %149 = load i32, ptr %148, align 4, !tbaa !103
  %150 = add nsw i32 %149, 29
  br i1 %5, label %153, label %151

151:                                              ; preds = %147
  %152 = tail call ptr @gen_rtx_REG(i32 noundef %1, i32 noundef %150) #30
  br label %159

153:                                              ; preds = %147
  %154 = tail call ptr @gen_rtx_REG(i32 noundef %23, i32 noundef %150) #30
  %155 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 64), align 16, !tbaa !5
  %156 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 3, i32 noundef 0, ptr noundef %154, ptr noundef %155) #30
  %157 = tail call ptr (i32, ...) @gen_rtvec(i32 noundef 1, ptr noundef %156) #30
  %158 = tail call ptr @gen_rtx_fmt_E_stat(i32 noundef 15, i32 noundef 1, ptr noundef %157) #30
  br label %159

159:                                              ; preds = %22, %26, %28, %30, %41, %45, %54, %57, %61, %66, %84, %92, %94, %102, %108, %116, %118, %125, %143, %151, %153
  %160 = phi ptr [ %27, %26 ], [ %56, %54 ], [ %93, %92 ], [ %99, %94 ], [ %117, %116 ], [ %123, %118 ], [ %152, %151 ], [ %158, %153 ], [ null, %125 ], [ null, %102 ], [ null, %66 ], [ null, %22 ], [ null, %143 ], [ null, %108 ], [ null, %84 ], [ null, %61 ], [ null, %57 ], [ null, %30 ], [ null, %28 ], [ null, %45 ], [ null, %41 ]
  ret ptr %160
}

; Function Attrs: nounwind sspstrong uwtable
define dso_local i32 @ix86_function_arg_boundary(i32 noundef %0, ptr noundef %1) local_unnamed_addr #9 {
  %3 = icmp eq ptr %1, null
  br i1 %3, label %11, label %4

4:                                                ; preds = %2
  %5 = getelementptr inbounds %struct.tree_type, ptr %1, i64 0, i32 19
  %6 = load ptr, ptr %5, align 8, !tbaa !16
  %7 = icmp eq ptr %6, null
  %8 = select i1 %7, ptr %1, ptr %6
  %9 = getelementptr inbounds %struct.tree_type, ptr %8, i64 0, i32 7
  %10 = load i32, ptr %9, align 8, !tbaa !16
  br label %13

11:                                               ; preds = %2
  %12 = tail call i32 @get_mode_alignment(i32 noundef %0) #30
  br label %13

13:                                               ; preds = %11, %4
  %14 = phi ptr [ %8, %4 ], [ null, %11 ]
  %15 = phi i32 [ %10, %4 ], [ %12, %11 ]
  %16 = tail call i32 @llvm.smax.i32(i32 %15, i32 32)
  switch i32 %0, label %17 [
    i32 44, label %29
    i32 41, label %29
  ]

17:                                               ; preds = %13
  %18 = icmp eq ptr %14, null
  br i1 %18, label %19, label %25

19:                                               ; preds = %17
  %20 = load i32, ptr @ix86_isa_flags, align 4, !tbaa !20
  %21 = and i32 %20, 65536
  %22 = icmp eq i32 %21, 0
  br i1 %22, label %24, label %23

23:                                               ; preds = %19
  switch i32 %0, label %24 [
    i32 82, label %29
    i32 81, label %29
    i32 80, label %29
    i32 79, label %29
    i32 71, label %29
    i32 70, label %29
    i32 69, label %29
    i32 68, label %29
    i32 67, label %29
    i32 66, label %29
    i32 65, label %29
    i32 64, label %29
    i32 63, label %29
    i32 18, label %29
  ]

24:                                               ; preds = %23, %19
  br label %29

25:                                               ; preds = %17
  %26 = tail call fastcc zeroext i8 @contains_aligned_value_p(ptr noundef nonnull %14), !range !66
  %27 = icmp eq i8 %26, 0
  %28 = select i1 %27, i32 32, i32 %16
  br label %29

29:                                               ; preds = %23, %25, %23, %23, %23, %23, %23, %23, %23, %23, %23, %23, %23, %23, %23, %13, %13, %24
  %30 = phi i32 [ 32, %24 ], [ %16, %13 ], [ %16, %13 ], [ %16, %23 ], [ %16, %23 ], [ %16, %23 ], [ %16, %23 ], [ %16, %23 ], [ %16, %23 ], [ %16, %23 ], [ %16, %23 ], [ %16, %23 ], [ %16, %23 ], [ %16, %23 ], [ %16, %23 ], [ %16, %23 ], [ %16, %23 ], [ %28, %25 ]
  %31 = load i32, ptr @ix86_isa_flags, align 4, !tbaa !20
  %32 = and i32 %31, 32
  %33 = icmp eq i32 %32, 0
  %34 = select i1 %33, i32 128, i32 256
  %35 = tail call i32 @llvm.umin.i32(i32 %30, i32 %34)
  ret i32 %35
}

declare i32 @get_mode_alignment(i32 noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc zeroext i8 @contains_aligned_value_p(ptr noundef %0) unnamed_addr #9 {
  %2 = load i64, ptr %0, align 8
  %3 = and i64 %2, 65535
  %4 = icmp eq i64 %3, 14
  br i1 %4, label %5, label %7

5:                                                ; preds = %1
  %6 = tail call i32 @vector_type_mode(ptr noundef nonnull %0) #30
  br label %12

7:                                                ; preds = %1
  %8 = getelementptr inbounds %struct.tree_type, ptr %0, i64 0, i32 6
  %9 = load i32, ptr %8, align 4
  %10 = lshr i32 %9, 16
  %11 = and i32 %10, 255
  br label %12

12:                                               ; preds = %7, %5
  %13 = phi i32 [ %6, %5 ], [ %11, %7 ]
  %14 = load i32, ptr @ix86_isa_flags, align 4, !tbaa !20
  %15 = and i32 %14, 65536
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %18, label %17

17:                                               ; preds = %12
  switch i32 %13, label %27 [
    i32 82, label %19
    i32 81, label %19
    i32 80, label %19
    i32 79, label %19
    i32 71, label %19
    i32 70, label %19
    i32 69, label %19
    i32 68, label %19
    i32 67, label %19
    i32 66, label %19
    i32 65, label %19
    i32 64, label %19
    i32 63, label %19
    i32 44, label %19
    i32 41, label %19
    i32 18, label %19
    i32 54, label %19
  ]

18:                                               ; preds = %12
  switch i32 %13, label %27 [
    i32 44, label %19
    i32 54, label %19
    i32 41, label %19
  ]

19:                                               ; preds = %17, %17, %17, %17, %17, %17, %17, %17, %17, %17, %17, %17, %17, %17, %17, %17, %17, %18, %18, %18
  %20 = load i64, ptr %0, align 8
  %21 = and i64 %20, 4398046511104
  %22 = icmp eq i64 %21, 0
  br i1 %22, label %64, label %23

23:                                               ; preds = %19
  %24 = getelementptr inbounds %struct.tree_type, ptr %0, i64 0, i32 7
  %25 = load i32, ptr %24, align 8, !tbaa !16
  %26 = icmp ugt i32 %25, 128
  br i1 %26, label %64, label %27

27:                                               ; preds = %17, %18, %23
  %28 = getelementptr inbounds %struct.tree_type, ptr %0, i64 0, i32 7
  %29 = load i32, ptr %28, align 8, !tbaa !16
  %30 = icmp ult i32 %29, 128
  br i1 %30, label %64, label %31

31:                                               ; preds = %27
  %32 = load i64, ptr %0, align 8
  %33 = trunc i64 %32 to i32
  %34 = and i32 %33, 65535
  %35 = add nsw i32 %34, -15
  %36 = icmp ult i32 %35, 4
  br i1 %36, label %37, label %63

37:                                               ; preds = %31
  %38 = trunc i64 %32 to i16
  switch i16 %38, label %62 [
    i16 16, label %39
    i16 17, label %39
    i16 18, label %39
    i16 15, label %57
  ]

39:                                               ; preds = %37, %37, %37
  %40 = getelementptr inbounds %struct.tree_type, ptr %0, i64 0, i32 1
  %41 = load ptr, ptr %40, align 8, !tbaa !16
  %42 = icmp eq ptr %41, null
  br i1 %42, label %63, label %43

43:                                               ; preds = %39, %53
  %44 = phi ptr [ %55, %53 ], [ %41, %39 ]
  %45 = load i64, ptr %44, align 8
  %46 = and i64 %45, 65535
  %47 = icmp eq i64 %46, 31
  br i1 %47, label %48, label %53

48:                                               ; preds = %43
  %49 = getelementptr inbounds %struct.tree_common, ptr %44, i64 0, i32 2
  %50 = load ptr, ptr %49, align 8, !tbaa !16
  %51 = tail call fastcc zeroext i8 @contains_aligned_value_p(ptr noundef %50), !range !66
  %52 = icmp eq i8 %51, 0
  br i1 %52, label %53, label %64

53:                                               ; preds = %43, %48
  %54 = getelementptr inbounds %struct.tree_common, ptr %44, i64 0, i32 1
  %55 = load ptr, ptr %54, align 8, !tbaa !16
  %56 = icmp eq ptr %55, null
  br i1 %56, label %63, label %43, !llvm.loop !104

57:                                               ; preds = %37
  %58 = getelementptr inbounds %struct.tree_common, ptr %0, i64 0, i32 2
  %59 = load ptr, ptr %58, align 8, !tbaa !16
  %60 = tail call fastcc zeroext i8 @contains_aligned_value_p(ptr noundef %59), !range !66
  %61 = icmp eq i8 %60, 0
  br i1 %61, label %63, label %64

62:                                               ; preds = %37
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 6230, ptr noundef nonnull @.str.131) #30
  br label %63

63:                                               ; preds = %53, %39, %31, %62, %57
  br label %64

64:                                               ; preds = %48, %57, %27, %19, %23, %63
  %65 = phi i8 [ 0, %63 ], [ 1, %23 ], [ 1, %19 ], [ 0, %27 ], [ 1, %57 ], [ 1, %48 ]
  ret i8 %65
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind sspstrong willreturn memory(read, argmem: none, inaccessiblemem: none) uwtable
define dso_local zeroext i8 @ix86_function_value_regno_p(i32 noundef %0) local_unnamed_addr #16 {
  switch i32 %0, label %17 [
    i32 0, label %18
    i32 8, label %2
    i32 21, label %7
    i32 29, label %12
  ]

2:                                                ; preds = %1
  %3 = load i32, ptr @target_flags, align 4, !tbaa !20
  %4 = trunc i32 %3 to i8
  %5 = lshr i8 %4, 5
  %6 = and i8 %5, 1
  br label %18

7:                                                ; preds = %1
  %8 = load i32, ptr @ix86_isa_flags, align 4, !tbaa !20
  %9 = lshr i32 %8, 16
  %10 = trunc i32 %9 to i8
  %11 = and i8 %10, 1
  br label %18

12:                                               ; preds = %1
  %13 = load i32, ptr @ix86_isa_flags, align 4, !tbaa !20
  %14 = lshr i32 %13, 11
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  br label %18

17:                                               ; preds = %1
  br label %18

18:                                               ; preds = %1, %17, %12, %7, %2
  %19 = phi i8 [ 0, %17 ], [ %16, %12 ], [ %11, %7 ], [ %6, %2 ], [ 1, %1 ]
  ret i8 %19
}

; Function Attrs: nounwind sspstrong uwtable
define dso_local ptr @ix86_libcall_value(i32 noundef %0) local_unnamed_addr #9 {
  %2 = zext i32 %0 to i64
  %3 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %2
  %4 = load i8, ptr %3, align 1, !tbaa !16
  %5 = add i8 %4, -12
  %6 = icmp ult i8 %5, 6
  br i1 %6, label %7, label %20

7:                                                ; preds = %1
  %8 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %2
  %9 = load i8, ptr %8, align 1, !tbaa !16
  %10 = icmp eq i8 %9, 8
  br i1 %10, label %11, label %16

11:                                               ; preds = %7
  %12 = load i32, ptr @ix86_isa_flags, align 4, !tbaa !20
  %13 = and i32 %12, 2048
  %14 = icmp eq i32 %13, 0
  %15 = select i1 %14, i32 0, i32 29
  br label %42

16:                                               ; preds = %7
  %17 = icmp eq i32 %0, 18
  %18 = icmp eq i8 %9, 16
  %19 = or i1 %17, %18
  br i1 %19, label %22, label %27

20:                                               ; preds = %1
  %21 = icmp eq i32 %0, 18
  br i1 %21, label %22, label %34

22:                                               ; preds = %20, %16
  %23 = load i32, ptr @ix86_isa_flags, align 4, !tbaa !20
  %24 = and i32 %23, 65536
  %25 = icmp eq i32 %24, 0
  %26 = select i1 %25, i32 0, i32 21
  br label %42

27:                                               ; preds = %16
  %28 = icmp eq i8 %9, 32
  br i1 %28, label %29, label %34

29:                                               ; preds = %27
  %30 = load i32, ptr @ix86_isa_flags, align 4, !tbaa !20
  %31 = and i32 %30, 32
  %32 = icmp eq i32 %31, 0
  %33 = select i1 %32, i32 0, i32 21
  br label %42

34:                                               ; preds = %27, %20
  %35 = load i32, ptr @target_flags, align 4, !tbaa !20
  %36 = add i32 %0, -41
  %37 = icmp ult i32 %36, -3
  %38 = and i32 %35, 34
  %39 = icmp ne i32 %38, 34
  %40 = or i1 %37, %39
  %41 = select i1 %40, i32 0, i32 8
  br label %42

42:                                               ; preds = %34, %29, %22, %11
  %43 = phi i32 [ %15, %11 ], [ %26, %22 ], [ %33, %29 ], [ %41, %34 ]
  %44 = icmp eq i32 %0, 19
  br i1 %44, label %45, label %46

45:                                               ; preds = %42
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 6358, ptr noundef nonnull @.str.131) #30
  br label %46

46:                                               ; preds = %42, %45
  %47 = tail call ptr @gen_rtx_REG(i32 noundef %0, i32 noundef %43) #30
  ret ptr %47
}

; Function Attrs: nounwind sspstrong uwtable
define dso_local zeroext i8 @ix86_sol10_return_in_memory(ptr noundef %0, ptr nocapture noundef readnone %1) local_unnamed_addr #9 {
  %3 = tail call fastcc i32 @type_natural_mode(ptr noundef %0, ptr noundef null)
  %4 = icmp eq i32 %3, 1
  br i1 %4, label %33, label %5

5:                                                ; preds = %2
  %6 = tail call i64 @int_size_in_bytes(ptr noundef %0) #30
  %7 = trunc i64 %6 to i32
  %8 = zext i32 %3 to i64
  %9 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %8
  %10 = load i8, ptr %9, align 1, !tbaa !16
  %11 = add i8 %10, -12
  %12 = icmp ult i8 %11, 6
  br i1 %12, label %13, label %24

13:                                               ; preds = %5
  switch i32 %7, label %30 [
    i32 8, label %14
    i32 16, label %19
  ]

14:                                               ; preds = %13
  %15 = load i32, ptr @ix86_isa_flags, align 4, !tbaa !20
  %16 = lshr i32 %15, 11
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  br label %33

19:                                               ; preds = %13
  %20 = load i32, ptr @ix86_isa_flags, align 4, !tbaa !20
  %21 = and i32 %20, 65536
  %22 = icmp eq i32 %21, 0
  %23 = zext i1 %22 to i8
  br label %33

24:                                               ; preds = %5
  switch i32 %3, label %30 [
    i32 18, label %25
    i32 40, label %33
  ]

25:                                               ; preds = %24
  %26 = load i32, ptr @ix86_isa_flags, align 4, !tbaa !20
  %27 = and i32 %26, 65536
  %28 = icmp eq i32 %27, 0
  %29 = zext i1 %28 to i8
  br label %33

30:                                               ; preds = %24, %13
  %31 = icmp sgt i32 %7, 12
  %32 = zext i1 %31 to i8
  br label %33

33:                                               ; preds = %24, %2, %30, %25, %19, %14
  %34 = phi i8 [ %18, %14 ], [ %23, %19 ], [ %32, %30 ], [ %29, %25 ], [ 1, %2 ], [ 0, %24 ]
  ret i8 %34
}

; Function Attrs: nounwind sspstrong uwtable
define dso_local i32 @ix86_check_movabs(ptr nocapture noundef readonly %0, i32 noundef %1) local_unnamed_addr #9 {
  %3 = getelementptr inbounds %struct.rtx_def, ptr %0, i64 1
  %4 = load ptr, ptr %3, align 8, !tbaa !16
  %5 = load i32, ptr %4, align 8
  %6 = and i32 %5, 65535
  %7 = icmp eq i32 %6, 15
  br i1 %7, label %8, label %15

8:                                                ; preds = %2
  %9 = getelementptr inbounds %struct.rtx_def, ptr %4, i64 0, i32 1
  %10 = load ptr, ptr %9, align 8, !tbaa !16
  %11 = getelementptr inbounds %struct.rtvec_def, ptr %10, i64 0, i32 1
  %12 = load ptr, ptr %11, align 8, !tbaa !5
  %13 = load i32, ptr %12, align 8
  %14 = and i32 %13, 65535
  br label %15

15:                                               ; preds = %8, %2
  %16 = phi i32 [ %14, %8 ], [ %6, %2 ]
  %17 = phi ptr [ %12, %8 ], [ %4, %2 ]
  %18 = icmp eq i32 %16, 23
  br i1 %18, label %20, label %19

19:                                               ; preds = %15
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 7266, ptr noundef nonnull @.str.131) #30
  br label %20

20:                                               ; preds = %15, %19
  %21 = getelementptr inbounds %struct.rtx_def, ptr %17, i64 0, i32 1
  %22 = sext i32 %1 to i64
  %23 = getelementptr inbounds [1 x %union.rtunion_def], ptr %21, i64 0, i64 %22
  br label %24

24:                                               ; preds = %29, %20
  %25 = phi ptr [ %23, %20 ], [ %30, %29 ]
  %26 = load ptr, ptr %25, align 8, !tbaa !16
  %27 = load i32, ptr %26, align 8
  %28 = trunc i32 %27 to i16
  switch i16 %28, label %31 [
    i16 39, label %29
    i16 43, label %32
  ]

29:                                               ; preds = %24
  %30 = getelementptr inbounds %struct.rtx_def, ptr %26, i64 0, i32 1
  br label %24, !llvm.loop !105

31:                                               ; preds = %24
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 7270, ptr noundef nonnull @.str.131) #30
  br label %32

32:                                               ; preds = %24, %31
  %33 = load i32, ptr @volatile_ok, align 4, !tbaa !20
  %34 = icmp eq i32 %33, 0
  br i1 %34, label %35, label %40

35:                                               ; preds = %32
  %36 = load i32, ptr %26, align 8
  %37 = lshr i32 %36, 27
  %38 = and i32 %37, 1
  %39 = xor i32 %38, 1
  br label %40

40:                                               ; preds = %35, %32
  %41 = phi i32 [ 1, %32 ], [ %39, %35 ]
  ret i32 %41
}

declare void @fancy_abort(ptr noundef, i32 noundef, ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define dso_local i32 @standard_80387_constant_p(ptr noundef readonly %0) local_unnamed_addr #9 {
  %2 = alloca %struct.real_value, align 8
  %3 = load i32, ptr %0, align 8
  %4 = lshr i32 %3, 16
  %5 = and i32 %4, 255
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %2) #30
  %6 = load i32, ptr @target_flags, align 4, !tbaa !20
  %7 = and i32 %6, 2
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %60, label %9

9:                                                ; preds = %1
  %10 = and i32 %3, 16646144
  %11 = icmp eq i32 %10, 2490368
  %12 = icmp eq i32 %5, 40
  %13 = select i1 %11, i1 true, i1 %12
  %14 = and i32 %3, 65535
  %15 = icmp eq i32 %14, 32
  %16 = select i1 %13, i1 %15, i1 false
  br i1 %16, label %17, label %60

17:                                               ; preds = %9
  %18 = zext i32 %5 to i64
  %19 = getelementptr inbounds [87 x ptr], ptr @const_tiny_rtx, i64 0, i64 %18
  %20 = load ptr, ptr %19, align 8, !tbaa !5
  %21 = icmp eq ptr %20, %0
  br i1 %21, label %60, label %22

22:                                               ; preds = %17
  %23 = getelementptr inbounds [3 x [87 x ptr]], ptr @const_tiny_rtx, i64 0, i64 1, i64 %18
  %24 = load ptr, ptr %23, align 8, !tbaa !5
  %25 = icmp eq ptr %24, %0
  br i1 %25, label %60, label %26

26:                                               ; preds = %22
  %27 = getelementptr inbounds %struct.rtx_def, ptr %0, i64 0, i32 1
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(32) %2, ptr noundef nonnull align 8 dereferenceable(32) %27, i64 32, i1 false), !tbaa.struct !106
  br i1 %12, label %28, label %53

28:                                               ; preds = %26
  %29 = load ptr, ptr @cfun, align 8, !tbaa !5
  %30 = tail call zeroext i8 @optimize_function_for_size_p(ptr noundef %29) #30
  %31 = icmp ne i8 %30, 0
  %32 = load i8, ptr getelementptr inbounds ([62 x i8], ptr @ix86_tune_features, i64 0, i64 49), align 1
  %33 = icmp ne i8 %32, 0
  %34 = select i1 %31, i1 true, i1 %33
  br i1 %34, label %35, label %53

35:                                               ; preds = %28
  %36 = load i1, ptr @ext_80387_constants_init, align 1
  br i1 %36, label %38, label %37

37:                                               ; preds = %35
  tail call fastcc void @init_ext_80387_constants()
  br label %38

38:                                               ; preds = %37, %35
  %39 = call zeroext i8 @real_identical(ptr noundef nonnull %2, ptr noundef nonnull @ext_80387_constants_table) #30
  %40 = icmp eq i8 %39, 0
  br i1 %40, label %41, label %60

41:                                               ; preds = %38
  %42 = call zeroext i8 @real_identical(ptr noundef nonnull %2, ptr noundef nonnull getelementptr inbounds ([5 x %struct.real_value], ptr @ext_80387_constants_table, i64 0, i64 1)) #30
  %43 = icmp eq i8 %42, 0
  br i1 %43, label %44, label %60

44:                                               ; preds = %41
  %45 = call zeroext i8 @real_identical(ptr noundef nonnull %2, ptr noundef nonnull getelementptr inbounds ([5 x %struct.real_value], ptr @ext_80387_constants_table, i64 0, i64 2)) #30
  %46 = icmp eq i8 %45, 0
  br i1 %46, label %47, label %60

47:                                               ; preds = %44
  %48 = call zeroext i8 @real_identical(ptr noundef nonnull %2, ptr noundef nonnull getelementptr inbounds ([5 x %struct.real_value], ptr @ext_80387_constants_table, i64 0, i64 3)) #30
  %49 = icmp eq i8 %48, 0
  br i1 %49, label %50, label %60

50:                                               ; preds = %47
  %51 = call zeroext i8 @real_identical(ptr noundef nonnull %2, ptr noundef nonnull getelementptr inbounds ([5 x %struct.real_value], ptr @ext_80387_constants_table, i64 0, i64 4)) #30
  %52 = icmp eq i8 %51, 0
  br i1 %52, label %53, label %60

53:                                               ; preds = %50, %28, %26
  %54 = call zeroext i8 @real_isnegzero(ptr noundef nonnull %2) #30
  %55 = icmp eq i8 %54, 0
  br i1 %55, label %56, label %60

56:                                               ; preds = %53
  %57 = call zeroext i8 @real_identical(ptr noundef nonnull %2, ptr noundef nonnull @dconstm1) #30
  %58 = icmp eq i8 %57, 0
  %59 = select i1 %58, i32 0, i32 9
  br label %60

60:                                               ; preds = %38, %41, %44, %47, %50, %56, %53, %22, %17, %1, %9
  %61 = phi i32 [ -1, %9 ], [ -1, %1 ], [ 1, %17 ], [ 2, %22 ], [ 8, %53 ], [ %59, %56 ], [ 3, %38 ], [ 4, %41 ], [ 5, %44 ], [ 6, %47 ], [ 7, %50 ]
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %2) #30
  ret i32 %61
}

; Function Attrs: mustprogress nocallback nofree nounwind willreturn memory(argmem: readwrite)
declare void @llvm.memcpy.p0.p0.i64(ptr noalias nocapture writeonly, ptr noalias nocapture readonly, i64, i1 immarg) #18

declare zeroext i8 @optimize_function_for_size_p(ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc void @init_ext_80387_constants() unnamed_addr #9 {
  %1 = tail call i32 @real_from_string(ptr noundef nonnull @ext_80387_constants_table, ptr noundef nonnull @.str.331) #30
  tail call void @real_convert(ptr noundef nonnull @ext_80387_constants_table, i32 noundef 40, ptr noundef nonnull @ext_80387_constants_table) #30
  %2 = tail call i32 @real_from_string(ptr noundef nonnull getelementptr inbounds ([5 x %struct.real_value], ptr @ext_80387_constants_table, i64 0, i64 1), ptr noundef nonnull @.str.332) #30
  tail call void @real_convert(ptr noundef nonnull getelementptr inbounds ([5 x %struct.real_value], ptr @ext_80387_constants_table, i64 0, i64 1), i32 noundef 40, ptr noundef nonnull getelementptr inbounds ([5 x %struct.real_value], ptr @ext_80387_constants_table, i64 0, i64 1)) #30
  %3 = tail call i32 @real_from_string(ptr noundef nonnull getelementptr inbounds ([5 x %struct.real_value], ptr @ext_80387_constants_table, i64 0, i64 2), ptr noundef nonnull @.str.333) #30
  tail call void @real_convert(ptr noundef nonnull getelementptr inbounds ([5 x %struct.real_value], ptr @ext_80387_constants_table, i64 0, i64 2), i32 noundef 40, ptr noundef nonnull getelementptr inbounds ([5 x %struct.real_value], ptr @ext_80387_constants_table, i64 0, i64 2)) #30
  %4 = tail call i32 @real_from_string(ptr noundef nonnull getelementptr inbounds ([5 x %struct.real_value], ptr @ext_80387_constants_table, i64 0, i64 3), ptr noundef nonnull @.str.334) #30
  tail call void @real_convert(ptr noundef nonnull getelementptr inbounds ([5 x %struct.real_value], ptr @ext_80387_constants_table, i64 0, i64 3), i32 noundef 40, ptr noundef nonnull getelementptr inbounds ([5 x %struct.real_value], ptr @ext_80387_constants_table, i64 0, i64 3)) #30
  %5 = tail call i32 @real_from_string(ptr noundef nonnull getelementptr inbounds ([5 x %struct.real_value], ptr @ext_80387_constants_table, i64 0, i64 4), ptr noundef nonnull @.str.335) #30
  tail call void @real_convert(ptr noundef nonnull getelementptr inbounds ([5 x %struct.real_value], ptr @ext_80387_constants_table, i64 0, i64 4), i32 noundef 40, ptr noundef nonnull getelementptr inbounds ([5 x %struct.real_value], ptr @ext_80387_constants_table, i64 0, i64 4)) #30
  store i1 true, ptr @ext_80387_constants_init, align 1
  ret void
}

declare zeroext i8 @real_identical(ptr noundef, ptr noundef) local_unnamed_addr #3

declare zeroext i8 @real_isnegzero(ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define dso_local nonnull ptr @standard_80387_constant_opcode(ptr noundef %0) local_unnamed_addr #9 {
  %2 = tail call i32 @standard_80387_constant_p(ptr noundef %0)
  %3 = add i32 %2, -1
  %4 = icmp ult i32 %3, 9
  br i1 %4, label %6, label %5

5:                                                ; preds = %1
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 7371, ptr noundef nonnull @.str.131) #30
  br label %10

6:                                                ; preds = %1
  %7 = sext i32 %3 to i64
  %8 = shl i64 %7, 2
  %9 = call ptr @llvm.load.relative.i64(ptr @reltable.standard_80387_constant_opcode, i64 %8)
  br label %10

10:                                               ; preds = %6, %5
  %11 = phi ptr [ @.str.43, %5 ], [ %9, %6 ]
  ret ptr %11
}

; Function Attrs: nounwind sspstrong uwtable
define dso_local ptr @standard_80387_constant_rtx(i32 noundef %0) local_unnamed_addr #9 {
  %2 = load i1, ptr @ext_80387_constants_init, align 1
  br i1 %2, label %4, label %3

3:                                                ; preds = %1
  tail call fastcc void @init_ext_80387_constants()
  br label %4

4:                                                ; preds = %3, %1
  %5 = add i32 %0, -3
  %6 = icmp ult i32 %5, 5
  br i1 %6, label %7, label %9

7:                                                ; preds = %4
  %8 = zext i32 %5 to i64
  br label %10

9:                                                ; preds = %4
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 7401, ptr noundef nonnull @.str.131) #30
  br label %10

10:                                               ; preds = %9, %7
  %11 = phi i64 [ 0, %9 ], [ %8, %7 ]
  %12 = getelementptr inbounds [5 x %struct.real_value], ptr @ext_80387_constants_table, i64 0, i64 %11
  %13 = tail call ptr @const_double_from_real_value(ptr noundef nonnull byval(%struct.real_value) align 8 %12, i32 noundef 40) #30
  ret ptr %13
}

declare ptr @const_double_from_real_value(ptr noundef byval(%struct.real_value) align 8, i32 noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define dso_local i32 @standard_sse_constant_p(ptr noundef %0) local_unnamed_addr #9 {
  %2 = load i32, ptr %0, align 8
  %3 = lshr i32 %2, 16
  %4 = and i32 %3, 255
  %5 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 64), align 16, !tbaa !5
  %6 = icmp eq ptr %5, %0
  br i1 %6, label %24, label %7

7:                                                ; preds = %1
  %8 = zext i32 %4 to i64
  %9 = getelementptr inbounds [87 x ptr], ptr @const_tiny_rtx, i64 0, i64 %8
  %10 = load ptr, ptr %9, align 8, !tbaa !5
  %11 = icmp eq ptr %10, %0
  br i1 %11, label %24, label %12

12:                                               ; preds = %7
  %13 = tail call i32 @vector_all_ones_operand(ptr noundef nonnull %0, i32 noundef %4) #30
  %14 = icmp ne i32 %13, 0
  %15 = trunc i32 %3 to i8
  %16 = add i8 %15, -63
  %17 = icmp ult i8 %16, 4
  %18 = select i1 %14, i1 %17, i1 false
  br i1 %18, label %19, label %23

19:                                               ; preds = %12
  %20 = load i32, ptr @ix86_isa_flags, align 4, !tbaa !20
  %21 = and i32 %20, 131072
  %22 = icmp eq i32 %21, 0
  br i1 %22, label %23, label %24

23:                                               ; preds = %19, %12
  br label %24

24:                                               ; preds = %19, %1, %7, %23
  %25 = phi i32 [ 0, %23 ], [ 1, %7 ], [ 1, %1 ], [ 2, %19 ]
  ret i32 %25
}

declare i32 @vector_all_ones_operand(ptr noundef, i32 noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define dso_local nonnull ptr @standard_sse_constant_opcode(ptr noundef %0, ptr noundef %1) local_unnamed_addr #9 {
  %3 = load i32, ptr %1, align 8
  %4 = lshr i32 %3, 16
  %5 = and i32 %4, 255
  %6 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 64), align 16, !tbaa !5
  %7 = icmp eq ptr %6, %1
  br i1 %7, label %24, label %8

8:                                                ; preds = %2
  %9 = zext i32 %5 to i64
  %10 = getelementptr inbounds [87 x ptr], ptr @const_tiny_rtx, i64 0, i64 %9
  %11 = load ptr, ptr %10, align 8, !tbaa !5
  %12 = icmp eq ptr %11, %1
  br i1 %12, label %24, label %13

13:                                               ; preds = %8
  %14 = tail call i32 @vector_all_ones_operand(ptr noundef nonnull %1, i32 noundef %5) #30
  %15 = icmp ne i32 %14, 0
  %16 = trunc i32 %4 to i8
  %17 = add i8 %16, -63
  %18 = icmp ult i8 %17, 4
  %19 = select i1 %15, i1 %18, i1 false
  br i1 %19, label %20, label %50

20:                                               ; preds = %13
  %21 = load i32, ptr @ix86_isa_flags, align 4, !tbaa !20
  %22 = and i32 %21, 131072
  %23 = icmp eq i32 %22, 0
  br i1 %23, label %50, label %45

24:                                               ; preds = %8, %2
  %25 = tail call i32 @get_attr_mode(ptr noundef %0) #30
  switch i32 %25, label %26 [
    i32 14, label %28
    i32 15, label %33
    i32 6, label %38
    i32 12, label %51
    i32 13, label %43
    i32 7, label %44
  ]

26:                                               ; preds = %24
  %27 = load i32, ptr @ix86_isa_flags, align 4, !tbaa !20
  br label %45

28:                                               ; preds = %24
  %29 = load i32, ptr @ix86_isa_flags, align 4, !tbaa !20
  %30 = and i32 %29, 32
  %31 = icmp eq i32 %30, 0
  %32 = select i1 %31, ptr @.str.141, ptr @.str.140
  br label %51

33:                                               ; preds = %24
  %34 = load i32, ptr @ix86_isa_flags, align 4, !tbaa !20
  %35 = and i32 %34, 32
  %36 = icmp eq i32 %35, 0
  %37 = select i1 %36, ptr @.str.143, ptr @.str.142
  br label %51

38:                                               ; preds = %24
  %39 = load i32, ptr @ix86_isa_flags, align 4, !tbaa !20
  %40 = and i32 %39, 32
  %41 = icmp eq i32 %40, 0
  %42 = select i1 %41, ptr @.str.145, ptr @.str.144
  br label %51

43:                                               ; preds = %24
  br label %51

44:                                               ; preds = %24
  br label %51

45:                                               ; preds = %26, %20
  %46 = phi i32 [ %27, %26 ], [ %21, %20 ]
  %47 = and i32 %46, 32
  %48 = icmp eq i32 %47, 0
  %49 = select i1 %48, ptr @.str.150, ptr @.str.149
  br label %51

50:                                               ; preds = %13, %20
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 7465, ptr noundef nonnull @.str.131) #30
  br label %51

51:                                               ; preds = %24, %50, %45, %44, %43, %38, %33, %28
  %52 = phi ptr [ @.str.43, %50 ], [ %49, %45 ], [ @.str.148, %44 ], [ @.str.147, %43 ], [ %42, %38 ], [ %37, %33 ], [ %32, %28 ], [ @.str.146, %24 ]
  ret ptr %52
}

declare i32 @get_attr_mode(ptr noundef) local_unnamed_addr #3

; Function Attrs: nofree nosync nounwind sspstrong memory(read, inaccessiblemem: none) uwtable
define dso_local i32 @symbolic_reference_mentioned_p(ptr nocapture noundef readonly %0) local_unnamed_addr #19 {
  %2 = load i32, ptr %0, align 8
  %3 = and i32 %2, 65534
  %4 = icmp eq i32 %3, 44
  br i1 %4, label %43, label %5

5:                                                ; preds = %1
  %6 = and i32 %2, 65535
  %7 = zext i32 %6 to i64
  %8 = getelementptr inbounds [139 x ptr], ptr @rtx_format, i64 0, i64 %7
  %9 = load ptr, ptr %8, align 8, !tbaa !5
  %10 = getelementptr inbounds [139 x i8], ptr @rtx_length, i64 0, i64 %7
  %11 = load i8, ptr %10, align 1, !tbaa !16
  %12 = icmp eq i8 %11, 0
  br i1 %12, label %43, label %13

13:                                               ; preds = %5
  %14 = getelementptr inbounds %struct.rtx_def, ptr %0, i64 0, i32 1
  %15 = zext i8 %11 to i64
  br label %16

16:                                               ; preds = %13, %41
  %17 = phi i64 [ %15, %13 ], [ %18, %41 ]
  %18 = add nsw i64 %17, -1
  %19 = getelementptr inbounds i8, ptr %9, i64 %18
  %20 = load i8, ptr %19, align 1, !tbaa !16
  switch i8 %20, label %41 [
    i8 69, label %21
    i8 101, label %36
  ]

21:                                               ; preds = %16
  %22 = getelementptr inbounds [1 x %union.rtunion_def], ptr %14, i64 0, i64 %18
  %23 = load ptr, ptr %22, align 8, !tbaa !16
  %24 = load i32, ptr %23, align 8, !tbaa !107
  %25 = zext i32 %24 to i64
  br label %26

26:                                               ; preds = %30, %21
  %27 = phi i64 [ %31, %30 ], [ %25, %21 ]
  %28 = trunc i64 %27 to i32
  %29 = icmp slt i32 %28, 1
  br i1 %29, label %41, label %30

30:                                               ; preds = %26
  %31 = add nsw i64 %27, -1
  %32 = getelementptr inbounds %struct.rtvec_def, ptr %23, i64 0, i32 1, i64 %31
  %33 = load ptr, ptr %32, align 8, !tbaa !5
  %34 = tail call i32 @symbolic_reference_mentioned_p(ptr noundef %33)
  %35 = icmp eq i32 %34, 0
  br i1 %35, label %26, label %43, !llvm.loop !109

36:                                               ; preds = %16
  %37 = getelementptr inbounds [1 x %union.rtunion_def], ptr %14, i64 0, i64 %18
  %38 = load ptr, ptr %37, align 8, !tbaa !16
  %39 = tail call i32 @symbolic_reference_mentioned_p(ptr noundef %38)
  %40 = icmp eq i32 %39, 0
  br i1 %40, label %41, label %43

41:                                               ; preds = %26, %16, %36
  %42 = icmp sgt i64 %17, 1
  br i1 %42, label %16, label %43, !llvm.loop !110

43:                                               ; preds = %36, %41, %30, %5, %1
  %44 = phi i32 [ 1, %1 ], [ 0, %5 ], [ 1, %30 ], [ 1, %36 ], [ 0, %41 ]
  ret i32 %44
}

; Function Attrs: nounwind sspstrong uwtable
define dso_local i32 @ix86_can_use_return_insn_p() local_unnamed_addr #9 {
  %1 = alloca %struct.ix86_frame, align 8
  call void @llvm.lifetime.start.p0(i64 88, ptr nonnull %1) #30
  %2 = load i32, ptr @reload_completed, align 4, !tbaa !20
  %3 = icmp eq i32 %2, 0
  %4 = load i8, ptr getelementptr inbounds (%struct.rtl_data, ptr @x_rtl, i64 0, i32 41), align 1
  %5 = icmp ne i8 %4, 0
  %6 = select i1 %3, i1 true, i1 %5
  br i1 %6, label %28, label %7

7:                                                ; preds = %0
  %8 = load i32, ptr getelementptr inbounds (%struct.rtl_data, ptr @x_rtl, i64 0, i32 3), align 8, !tbaa !111
  %9 = icmp ne i32 %8, 0
  %10 = load i32, ptr getelementptr inbounds (%struct.rtl_data, ptr @x_rtl, i64 0, i32 3, i32 1), align 4
  %11 = icmp sgt i32 %10, 32767
  %12 = select i1 %9, i1 %11, i1 false
  br i1 %12, label %28, label %13

13:                                               ; preds = %7
  call fastcc void @ix86_compute_frame_layout(ptr noundef nonnull %1)
  %14 = getelementptr inbounds %struct.ix86_frame, ptr %1, i64 0, i32 9
  %15 = load i64, ptr %14, align 8, !tbaa !119
  %16 = icmp eq i64 %15, 0
  %17 = load i32, ptr %1, align 8
  %18 = icmp eq i32 %17, 0
  %19 = select i1 %16, i1 %18, i1 false
  br i1 %19, label %20, label %28

20:                                               ; preds = %13
  %21 = getelementptr inbounds %struct.ix86_frame, ptr %1, i64 0, i32 2
  %22 = load i32, ptr %21, align 8, !tbaa !121
  %23 = getelementptr inbounds %struct.ix86_frame, ptr %1, i64 0, i32 1
  %24 = load i32, ptr %23, align 4, !tbaa !122
  %25 = sub i32 0, %24
  %26 = icmp eq i32 %22, %25
  %27 = zext i1 %26 to i32
  br label %28

28:                                               ; preds = %13, %20, %7, %0
  %29 = phi i32 [ 0, %0 ], [ 0, %7 ], [ 0, %13 ], [ %27, %20 ]
  call void @llvm.lifetime.end.p0(i64 88, ptr nonnull %1) #30
  ret i32 %29
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc void @ix86_compute_frame_layout(ptr nocapture noundef %0) unnamed_addr #9 {
  %2 = tail call i64 @get_frame_size() #30
  br label %3

3:                                                ; preds = %12, %1
  %4 = phi i64 [ 0, %1 ], [ %14, %12 ]
  %5 = phi i32 [ 0, %1 ], [ %13, %12 ]
  switch i64 %4, label %6 [
    i64 52, label %12
    i64 51, label %12
    i64 50, label %12
    i64 49, label %12
    i64 48, label %12
    i64 47, label %12
    i64 46, label %12
    i64 45, label %12
    i64 28, label %12
    i64 27, label %12
    i64 26, label %12
    i64 25, label %12
    i64 24, label %12
    i64 23, label %12
    i64 22, label %12
    i64 21, label %12
  ]

6:                                                ; preds = %3
  %7 = trunc i64 %4 to i32
  %8 = tail call fastcc i32 @ix86_save_reg(i32 noundef %7, i32 noundef 1)
  %9 = icmp ne i32 %8, 0
  %10 = zext i1 %9 to i32
  %11 = add nsw i32 %5, %10
  br label %12

12:                                               ; preds = %6, %3, %3, %3, %3, %3, %3, %3, %3, %3, %3, %3, %3, %3, %3, %3, %3
  %13 = phi i32 [ %5, %3 ], [ %11, %6 ], [ %5, %3 ], [ %5, %3 ], [ %5, %3 ], [ %5, %3 ], [ %5, %3 ], [ %5, %3 ], [ %5, %3 ], [ %5, %3 ], [ %5, %3 ], [ %5, %3 ], [ %5, %3 ], [ %5, %3 ], [ %5, %3 ], [ %5, %3 ], [ %5, %3 ]
  %14 = add nuw nsw i64 %4, 1
  %15 = icmp eq i64 %14, 53
  br i1 %15, label %16, label %3, !llvm.loop !123

16:                                               ; preds = %12
  %17 = getelementptr inbounds %struct.ix86_frame, ptr %0, i64 0, i32 2
  store i32 %13, ptr %17, align 8, !tbaa !121
  %18 = load i32, ptr @ix86_abi, align 4, !tbaa !16
  %19 = icmp eq i32 %18, 1
  br i1 %19, label %23, label %20

20:                                               ; preds = %16
  %21 = getelementptr inbounds %struct.ix86_frame, ptr %0, i64 0, i32 1
  store i32 0, ptr %21, align 4, !tbaa !122
  %22 = load i32, ptr getelementptr inbounds (%struct.rtl_data, ptr @x_rtl, i64 0, i32 23), align 8, !tbaa !124
  br label %44

23:                                               ; preds = %16, %32
  %24 = phi i64 [ %34, %32 ], [ 0, %16 ]
  %25 = phi i32 [ %33, %32 ], [ 0, %16 ]
  switch i64 %24, label %32 [
    i64 52, label %26
    i64 51, label %26
    i64 50, label %26
    i64 49, label %26
    i64 48, label %26
    i64 47, label %26
    i64 46, label %26
    i64 45, label %26
    i64 28, label %26
    i64 27, label %26
    i64 26, label %26
    i64 25, label %26
    i64 24, label %26
    i64 23, label %26
    i64 22, label %26
    i64 21, label %26
  ]

26:                                               ; preds = %23, %23, %23, %23, %23, %23, %23, %23, %23, %23, %23, %23, %23, %23, %23, %23
  %27 = trunc i64 %24 to i32
  %28 = tail call fastcc i32 @ix86_save_reg(i32 noundef %27, i32 noundef 1)
  %29 = icmp ne i32 %28, 0
  %30 = zext i1 %29 to i32
  %31 = add nsw i32 %25, %30
  br label %32

32:                                               ; preds = %26, %23
  %33 = phi i32 [ %25, %23 ], [ %31, %26 ]
  %34 = add nuw nsw i64 %24, 1
  %35 = icmp eq i64 %34, 53
  br i1 %35, label %36, label %23, !llvm.loop !125

36:                                               ; preds = %32
  %37 = load i32, ptr @ix86_abi, align 4, !tbaa !16
  %38 = getelementptr inbounds %struct.ix86_frame, ptr %0, i64 0, i32 1
  store i32 %33, ptr %38, align 4, !tbaa !122
  %39 = load i32, ptr getelementptr inbounds (%struct.rtl_data, ptr @x_rtl, i64 0, i32 23), align 8, !tbaa !124
  %40 = icmp eq i32 %37, 1
  %41 = icmp ult i32 %39, 128
  %42 = select i1 %40, i1 %41, i1 false
  br i1 %42, label %43, label %44

43:                                               ; preds = %36
  store i32 128, ptr getelementptr inbounds (%struct.rtl_data, ptr @x_rtl, i64 0, i32 23), align 8, !tbaa !124
  store i32 128, ptr getelementptr inbounds (%struct.rtl_data, ptr @x_rtl, i64 0, i32 22), align 4, !tbaa !126
  br label %61

44:                                               ; preds = %20, %36
  %45 = phi i32 [ %22, %20 ], [ %39, %36 ]
  %46 = phi ptr [ %21, %20 ], [ %38, %36 ]
  %47 = lshr i32 %45, 3
  %48 = load i32, ptr getelementptr inbounds (%struct.rtl_data, ptr @x_rtl, i64 0, i32 22), align 4, !tbaa !126
  %49 = lshr i32 %48, 3
  %50 = icmp eq i64 %2, 0
  %51 = icmp ugt i32 %48, 7
  %52 = select i1 %50, i1 true, i1 %51
  br i1 %52, label %54, label %53

53:                                               ; preds = %44
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 7985, ptr noundef nonnull @.str.131) #30
  br label %54

54:                                               ; preds = %44, %53
  %55 = phi i32 [ %49, %44 ], [ 0, %53 ]
  %56 = icmp ugt i32 %45, 31
  br i1 %56, label %58, label %57

57:                                               ; preds = %54
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 7986, ptr noundef nonnull @.str.131) #30
  br label %58

58:                                               ; preds = %54, %57
  %59 = icmp ugt i32 %47, %55
  br i1 %59, label %60, label %61

60:                                               ; preds = %58
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 7987, ptr noundef nonnull @.str.131) #30
  br label %61

61:                                               ; preds = %43, %58, %60
  %62 = phi ptr [ %38, %43 ], [ %46, %58 ], [ %46, %60 ]
  %63 = phi i32 [ 16, %43 ], [ %55, %58 ], [ %55, %60 ]
  %64 = phi i32 [ 16, %43 ], [ %47, %58 ], [ %47, %60 ]
  %65 = load ptr, ptr @cfun, align 8, !tbaa !5
  %66 = tail call zeroext i8 @optimize_function_for_size_p(ptr noundef %65) #30
  %67 = icmp eq i8 %66, 0
  %68 = load ptr, ptr @cfun, align 8, !tbaa !5
  br i1 %67, label %69, label %106

69:                                               ; preds = %61
  %70 = getelementptr inbounds %struct.function, ptr %68, i64 0, i32 10
  %71 = load ptr, ptr %70, align 8, !tbaa !87
  %72 = getelementptr inbounds %struct.machine_function, ptr %71, i64 0, i32 5
  %73 = load i32, ptr %72, align 8, !tbaa !56
  %74 = load i32, ptr %17, align 8, !tbaa !121
  %75 = icmp eq i32 %73, %74
  br i1 %75, label %106, label %76

76:                                               ; preds = %69
  store i32 %74, ptr %72, align 8, !tbaa !56
  %77 = icmp eq i32 %74, 0
  %78 = mul i32 %74, 20
  %79 = add i32 %78, -20
  %80 = select i1 %77, i32 0, i32 %79
  %81 = getelementptr inbounds %struct.function, ptr %68, i64 0, i32 20
  %82 = load i32, ptr %81, align 8
  %83 = lshr i32 %82, 16
  %84 = and i32 %83, 3
  %85 = icmp eq i32 %84, 0
  br i1 %85, label %91, label %86

86:                                               ; preds = %76
  %87 = load i32, ptr @flag_branch_probabilities, align 4, !tbaa !20
  %88 = icmp ne i32 %87, 0
  %89 = icmp eq i32 %84, 1
  %90 = and i1 %89, %88
  br i1 %90, label %91, label %95

91:                                               ; preds = %86, %76
  %92 = getelementptr inbounds %struct.machine_function, ptr %71, i64 0, i32 8
  %93 = load i8, ptr %92, align 4
  %94 = and i8 %93, -5
  store i8 %94, ptr %92, align 4
  br label %106

95:                                               ; preds = %86
  %96 = tail call zeroext i8 @expensive_function_p(i32 noundef %80) #30
  %97 = icmp eq i8 %96, 0
  %98 = load ptr, ptr @cfun, align 8, !tbaa !5
  %99 = getelementptr inbounds %struct.function, ptr %98, i64 0, i32 10
  %100 = load ptr, ptr %99, align 8, !tbaa !87
  %101 = getelementptr inbounds %struct.machine_function, ptr %100, i64 0, i32 8
  %102 = load i8, ptr %101, align 4
  %103 = select i1 %97, i8 4, i8 0
  %104 = and i8 %102, -5
  %105 = or i8 %104, %103
  store i8 %105, ptr %101, align 4
  br label %106

106:                                              ; preds = %91, %95, %69, %61
  %107 = phi ptr [ %68, %91 ], [ %98, %95 ], [ %68, %69 ], [ %68, %61 ]
  %108 = load i8, ptr getelementptr inbounds ([62 x i8], ptr @ix86_tune_features, i64 0, i64 38), align 2, !tbaa !16
  %109 = icmp eq i8 %108, 0
  %110 = getelementptr inbounds %struct.function, ptr %107, i64 0, i32 10
  %111 = load ptr, ptr %110, align 8, !tbaa !87
  br i1 %109, label %117, label %112

112:                                              ; preds = %106
  %113 = getelementptr inbounds %struct.machine_function, ptr %111, i64 0, i32 8
  %114 = load i8, ptr %113, align 4
  %115 = and i8 %114, 4
  %116 = icmp eq i8 %115, 0
  br i1 %116, label %117, label %118

117:                                              ; preds = %106, %112
  br label %118

118:                                              ; preds = %112, %117
  %119 = phi i8 [ 0, %117 ], [ 1, %112 ]
  %120 = getelementptr inbounds %struct.ix86_frame, ptr %0, i64 0, i32 13
  store i8 %119, ptr %120, align 8, !tbaa !127
  %121 = getelementptr inbounds %struct.machine_function, ptr %111, i64 0, i32 8
  %122 = load i8, ptr %121, align 4
  %123 = and i8 %122, 16
  %124 = icmp eq i8 %123, 0
  %125 = select i1 %124, i64 4, i64 8
  %126 = load i8, ptr getelementptr inbounds (%struct.rtl_data, ptr @x_rtl, i64 0, i32 41), align 1, !tbaa !128
  %127 = icmp eq i8 %126, 0
  %128 = add nuw nsw i64 %125, 4
  %129 = select i1 %127, i64 %125, i64 %128
  %130 = getelementptr inbounds %struct.ix86_frame, ptr %0, i64 0, i32 11
  store i64 %129, ptr %130, align 8, !tbaa !129
  %131 = load i8, ptr getelementptr inbounds (%struct.rtl_data, ptr @x_rtl, i64 0, i32 43), align 1, !tbaa !130
  %132 = icmp eq i8 %131, 0
  %133 = load i8, ptr getelementptr inbounds (%struct.rtl_data, ptr @x_rtl, i64 0, i32 45), align 1
  %134 = icmp ne i8 %133, 0
  %135 = select i1 %132, i1 true, i1 %134
  %136 = zext i32 %63 to i64
  %137 = add nuw nsw i64 %136, 4294967295
  %138 = add nuw nsw i64 %137, %129
  %139 = sub nsw i32 0, %63
  %140 = zext i32 %139 to i64
  %141 = and i64 %138, %140
  %142 = select i1 %135, i64 %129, i64 %141
  %143 = load i32, ptr %17, align 8, !tbaa !121
  %144 = shl nsw i32 %143, 2
  %145 = sext i32 %144 to i64
  %146 = add nsw i64 %142, %145
  %147 = load i32, ptr %62, align 4, !tbaa !122
  %148 = icmp eq i32 %147, 0
  %149 = add nsw i64 %146, 15
  %150 = and i64 %149, 4294967280
  %151 = sub nsw i64 %150, %146
  %152 = trunc i64 %151 to i32
  %153 = select i1 %148, i32 0, i32 %152
  store i32 %153, ptr %0, align 8, !tbaa !131
  %154 = shl nsw i32 %147, 4
  %155 = add nsw i32 %153, %154
  %156 = sext i32 %155 to i64
  %157 = getelementptr inbounds %struct.machine_function, ptr %111, i64 0, i32 2
  %158 = load i32, ptr %157, align 8, !tbaa !132
  %159 = getelementptr inbounds %struct.machine_function, ptr %111, i64 0, i32 3
  %160 = load i32, ptr %159, align 4, !tbaa !133
  %161 = add nsw i32 %160, %158
  %162 = getelementptr inbounds %struct.ix86_frame, ptr %0, i64 0, i32 4
  store i32 %161, ptr %162, align 8, !tbaa !134
  %163 = sext i32 %161 to i64
  %164 = add nsw i64 %146, %163
  %165 = add nsw i64 %164, %156
  %166 = add nsw i64 %137, %165
  %167 = and i64 %166, %140
  %168 = sub nsw i64 %167, %165
  %169 = trunc i64 %168 to i32
  %170 = getelementptr inbounds %struct.ix86_frame, ptr %0, i64 0, i32 3
  store i32 %169, ptr %170, align 4, !tbaa !135
  %171 = shl i64 %168, 32
  %172 = ashr exact i64 %171, 32
  %173 = add nsw i64 %172, %165
  %174 = getelementptr inbounds %struct.ix86_frame, ptr %0, i64 0, i32 10
  store i64 %173, ptr %174, align 8, !tbaa !136
  %175 = add nsw i64 %173, %2
  %176 = load i32, ptr @target_flags, align 4, !tbaa !20
  %177 = and i32 %176, 4
  %178 = icmp ne i32 %177, 0
  %179 = load i32, ptr @ix86_abi, align 4
  %180 = icmp eq i32 %179, 1
  %181 = select i1 %178, i1 true, i1 %180
  br i1 %181, label %182, label %201

182:                                              ; preds = %118
  %183 = load i32, ptr @current_function_is_leaf, align 4, !tbaa !20
  %184 = icmp eq i32 %183, 0
  br i1 %184, label %197, label %185

185:                                              ; preds = %182
  %186 = getelementptr inbounds %struct.function, ptr %107, i64 0, i32 20
  %187 = load i32, ptr %186, align 8
  %188 = and i32 %187, 524288
  %189 = icmp eq i32 %188, 0
  br i1 %189, label %190, label %197

190:                                              ; preds = %185
  %191 = load i8, ptr %121, align 4
  %192 = and i8 %191, 8
  %193 = icmp eq i8 %192, 0
  br i1 %193, label %201, label %194

194:                                              ; preds = %190
  %195 = tail call zeroext i8 @df_regs_ever_live_p(i32 noundef 7) #30
  %196 = icmp eq i8 %195, 0
  br i1 %196, label %201, label %197

197:                                              ; preds = %194, %185, %182
  %198 = load i32, ptr getelementptr inbounds (%struct.rtl_data, ptr @x_rtl, i64 0, i32 6), align 8, !tbaa !137
  %199 = sext i32 %198 to i64
  %200 = add nsw i64 %175, %199
  br label %201

201:                                              ; preds = %190, %194, %118, %197
  %202 = phi i32 [ %198, %197 ], [ 0, %118 ], [ 0, %194 ], [ 0, %190 ]
  %203 = phi i64 [ %200, %197 ], [ %175, %118 ], [ %175, %194 ], [ %175, %190 ]
  %204 = getelementptr inbounds %struct.ix86_frame, ptr %0, i64 0, i32 7
  store i32 %202, ptr %204, align 4, !tbaa !138
  %205 = load i32, ptr @current_function_is_leaf, align 4, !tbaa !20
  %206 = icmp eq i32 %205, 0
  br i1 %206, label %223, label %207

207:                                              ; preds = %201
  %208 = load ptr, ptr @cfun, align 8, !tbaa !5
  %209 = getelementptr inbounds %struct.function, ptr %208, i64 0, i32 20
  %210 = load i32, ptr %209, align 8
  %211 = and i32 %210, 524288
  %212 = icmp eq i32 %211, 0
  br i1 %212, label %213, label %223

213:                                              ; preds = %207
  %214 = getelementptr inbounds %struct.function, ptr %208, i64 0, i32 10
  %215 = load ptr, ptr %214, align 8, !tbaa !87
  %216 = getelementptr inbounds %struct.machine_function, ptr %215, i64 0, i32 8
  %217 = load i8, ptr %216, align 4
  %218 = and i8 %217, 8
  %219 = icmp eq i8 %218, 0
  br i1 %219, label %235, label %220

220:                                              ; preds = %213
  %221 = tail call zeroext i8 @df_regs_ever_live_p(i32 noundef 7) #30
  %222 = icmp eq i8 %221, 0
  br i1 %222, label %235, label %223

223:                                              ; preds = %220, %207, %201
  %224 = zext i32 %64 to i64
  %225 = add nuw nsw i64 %224, 4294967295
  %226 = add i64 %225, %203
  %227 = sub nsw i32 0, %64
  %228 = zext i32 %227 to i64
  %229 = and i64 %226, %228
  %230 = sub nsw i64 %229, %203
  %231 = trunc i64 %230 to i32
  %232 = getelementptr inbounds %struct.ix86_frame, ptr %0, i64 0, i32 6
  store i32 %231, ptr %232, align 8, !tbaa !139
  %233 = shl i64 %230, 32
  %234 = ashr exact i64 %233, 32
  br label %237

235:                                              ; preds = %220, %213
  %236 = getelementptr inbounds %struct.ix86_frame, ptr %0, i64 0, i32 6
  store i32 0, ptr %236, align 8, !tbaa !139
  br label %237

237:                                              ; preds = %235, %223
  %238 = phi i64 [ 0, %235 ], [ %234, %223 ]
  %239 = add nsw i64 %203, %238
  %240 = getelementptr inbounds %struct.ix86_frame, ptr %0, i64 0, i32 12
  store i64 %239, ptr %240, align 8, !tbaa !140
  %241 = load i32, ptr %170, align 4, !tbaa !135
  %242 = sext i32 %241 to i64
  %243 = getelementptr inbounds %struct.ix86_frame, ptr %0, i64 0, i32 7
  %244 = load i32, ptr %243, align 4, !tbaa !138
  %245 = sext i32 %244 to i64
  %246 = load i32, ptr %162, align 8, !tbaa !134
  %247 = sext i32 %246 to i64
  %248 = add i64 %2, %238
  %249 = add i64 %248, %242
  %250 = add nsw i64 %249, %245
  %251 = add nsw i64 %250, %247
  %252 = getelementptr inbounds %struct.ix86_frame, ptr %0, i64 0, i32 9
  store i64 %251, ptr %252, align 8, !tbaa !119
  %253 = icmp eq i64 %251, 0
  br i1 %253, label %254, label %259

254:                                              ; preds = %237
  %255 = load i32, ptr %17, align 8, !tbaa !121
  %256 = icmp slt i32 %255, 2
  br i1 %256, label %257, label %259

257:                                              ; preds = %254
  %258 = getelementptr inbounds %struct.ix86_frame, ptr %0, i64 0, i32 13
  store i8 0, ptr %258, align 8, !tbaa !127
  br label %259

259:                                              ; preds = %257, %254, %237
  %260 = load i32, ptr @target_flags, align 4, !tbaa !20
  %261 = and i32 %260, 16384
  %262 = icmp eq i32 %261, 0
  %263 = load i32, ptr @current_function_sp_is_unchanging, align 4
  %264 = icmp ne i32 %263, 0
  %265 = select i1 %262, i1 %264, i1 false
  %266 = load i32, ptr @current_function_is_leaf, align 4
  %267 = icmp ne i32 %266, 0
  %268 = select i1 %265, i1 %267, i1 false
  br i1 %268, label %269, label %296

269:                                              ; preds = %259
  %270 = load ptr, ptr @cfun, align 8, !tbaa !5
  %271 = getelementptr inbounds %struct.function, ptr %270, i64 0, i32 10
  %272 = load ptr, ptr %271, align 8, !tbaa !87
  %273 = getelementptr inbounds %struct.machine_function, ptr %272, i64 0, i32 8
  %274 = load i8, ptr %273, align 4
  %275 = and i8 %274, 8
  %276 = icmp eq i8 %275, 0
  br i1 %276, label %281, label %277

277:                                              ; preds = %269
  %278 = tail call zeroext i8 @df_regs_ever_live_p(i32 noundef 7) #30
  %279 = icmp eq i8 %278, 0
  %280 = load i64, ptr %252, align 8, !tbaa !119
  br i1 %279, label %281, label %296

281:                                              ; preds = %277, %269
  %282 = phi i64 [ %251, %269 ], [ %280, %277 ]
  %283 = trunc i64 %282 to i32
  %284 = getelementptr inbounds %struct.ix86_frame, ptr %0, i64 0, i32 8
  store i32 %283, ptr %284, align 8, !tbaa !141
  %285 = getelementptr inbounds %struct.ix86_frame, ptr %0, i64 0, i32 13
  %286 = load i8, ptr %285, align 8, !tbaa !127
  %287 = icmp eq i8 %286, 0
  br i1 %287, label %292, label %288

288:                                              ; preds = %281
  %289 = load i32, ptr %17, align 8, !tbaa !121
  %290 = shl nsw i32 %289, 2
  %291 = add nsw i32 %290, %283
  store i32 %291, ptr %284, align 8, !tbaa !141
  br label %292

292:                                              ; preds = %288, %281
  %293 = phi i32 [ %291, %288 ], [ %283, %281 ]
  %294 = icmp sgt i32 %293, 120
  br i1 %294, label %295, label %299

295:                                              ; preds = %292
  store i32 120, ptr %284, align 8, !tbaa !141
  br label %299

296:                                              ; preds = %277, %259
  %297 = phi i64 [ %280, %277 ], [ %251, %259 ]
  %298 = getelementptr inbounds %struct.ix86_frame, ptr %0, i64 0, i32 8
  store i32 0, ptr %298, align 8, !tbaa !141
  br label %299

299:                                              ; preds = %292, %295, %296
  %300 = phi i64 [ %282, %292 ], [ %282, %295 ], [ %297, %296 ]
  %301 = phi i32 [ %293, %292 ], [ 120, %295 ], [ 0, %296 ]
  %302 = sext i32 %301 to i64
  %303 = sub nsw i64 %300, %302
  store i64 %303, ptr %252, align 8, !tbaa !119
  %304 = load i64, ptr %240, align 8, !tbaa !140
  %305 = sub nsw i64 %304, %302
  store i64 %305, ptr %240, align 8, !tbaa !140
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind sspstrong willreturn memory(readwrite, inaccessiblemem: none) uwtable
define dso_local void @ix86_setup_frame_addresses() local_unnamed_addr #17 {
  %1 = load ptr, ptr @cfun, align 8, !tbaa !5
  %2 = getelementptr inbounds %struct.function, ptr %1, i64 0, i32 10
  %3 = load ptr, ptr %2, align 8, !tbaa !87
  %4 = getelementptr inbounds %struct.machine_function, ptr %3, i64 0, i32 8
  %5 = load i8, ptr %4, align 4
  %6 = or i8 %5, 1
  store i8 %6, ptr %4, align 4
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define dso_local ptr @output_set_got(ptr noundef %0, ptr noundef %1) local_unnamed_addr #9 {
  %3 = alloca [3 x ptr], align 16
  %4 = alloca [32 x i8], align 16
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %3) #30
  store ptr %0, ptr %3, align 16, !tbaa !5
  %5 = tail call ptr @gen_rtx_fmt_s00_stat(i32 noundef 45, i32 noundef 16, ptr noundef nonnull @.str.151) #30
  %6 = getelementptr inbounds [3 x ptr], ptr %3, i64 0, i64 1
  store ptr %5, ptr %6, align 8, !tbaa !5
  %7 = load i8, ptr getelementptr inbounds ([62 x i8], ptr @ix86_tune_features, i64 0, i64 4), align 4, !tbaa !16
  %8 = icmp ne i8 %7, 0
  %9 = load i32, ptr @flag_pic, align 4
  %10 = icmp ne i32 %9, 0
  %11 = select i1 %8, i1 %10, i1 false
  br i1 %11, label %59, label %12

12:                                               ; preds = %2
  %13 = icmp eq ptr %1, null
  br i1 %13, label %14, label %16

14:                                               ; preds = %12
  %15 = tail call ptr @gen_label_rtx() #30
  br label %16

16:                                               ; preds = %12, %14
  %17 = phi ptr [ %15, %14 ], [ %1, %12 ]
  %18 = tail call ptr @gen_rtx_fmt_u_stat(i32 noundef 44, i32 noundef 16, ptr noundef %17) #30
  %19 = getelementptr inbounds [3 x ptr], ptr %3, i64 0, i64 2
  store ptr %18, ptr %19, align 16, !tbaa !5
  %20 = load i32, ptr @flag_pic, align 4, !tbaa !20
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %22, label %23

22:                                               ; preds = %16
  call void @output_asm_insn(ptr noundef nonnull @.str.152, ptr noundef nonnull %3) #30
  br label %34

23:                                               ; preds = %16
  call void @output_asm_insn(ptr noundef nonnull @.str.153, ptr noundef nonnull %3) #30
  %24 = call i32 @dwarf2out_do_frame() #30
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %34, label %26

26:                                               ; preds = %23
  call void @start_sequence() #30
  %27 = load ptr, ptr getelementptr inbounds ([11 x ptr], ptr @global_rtl, i64 0, i64 2), align 16, !tbaa !5
  %28 = call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef -4) #30
  %29 = call ptr @gen_rtx_fmt_ee_stat(i32 noundef 49, i32 noundef 16, ptr noundef %27, ptr noundef %28) #30
  %30 = call ptr @gen_rtx_fmt_ee_stat(i32 noundef 23, i32 noundef 0, ptr noundef %27, ptr noundef %29) #30
  %31 = call ptr @emit_insn(ptr noundef %30) #30
  %32 = load i32, ptr %31, align 8
  %33 = or i32 %32, 1073741824
  store i32 %33, ptr %31, align 8
  call void @dwarf2out_frame_debug(ptr noundef nonnull %31, i8 noundef zeroext 1) #30
  call void @end_sequence() #30
  br label %34

34:                                               ; preds = %23, %26, %22
  %35 = load ptr, ptr getelementptr inbounds (%struct.gcc_target, ptr @targetm, i64 0, i32 0, i32 11), align 8, !tbaa !142
  %36 = load ptr, ptr @asm_out_file, align 8, !tbaa !5
  %37 = load ptr, ptr %19, align 16, !tbaa !5
  %38 = getelementptr inbounds %struct.rtx_def, ptr %37, i64 0, i32 1
  %39 = load ptr, ptr %38, align 8, !tbaa !16
  %40 = getelementptr inbounds %struct.rtx_def, ptr %39, i64 1, i32 1
  %41 = load i32, ptr %40, align 8, !tbaa !16
  %42 = sext i32 %41 to i64
  call void %35(ptr noundef %36, ptr noundef nonnull @.str.154, i64 noundef %42) #30
  %43 = load i32, ptr @flag_pic, align 4, !tbaa !20
  %44 = icmp eq i32 %43, 0
  br i1 %44, label %79, label %45

45:                                               ; preds = %34
  call void @output_asm_insn(ptr noundef nonnull @.str.155, ptr noundef nonnull %3) #30
  %46 = call i32 @dwarf2out_do_frame() #30
  %47 = icmp eq i32 %46, 0
  br i1 %47, label %79, label %48

48:                                               ; preds = %45
  call void @start_sequence() #30
  %49 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 64), align 16, !tbaa !5
  %50 = call ptr @gen_rtx_fmt_ee_stat(i32 noundef 23, i32 noundef 0, ptr noundef %0, ptr noundef %49) #30
  %51 = call ptr @emit_insn(ptr noundef %50) #30
  call void @dwarf2out_frame_debug(ptr noundef %51, i8 noundef zeroext 1) #30
  %52 = load ptr, ptr getelementptr inbounds ([11 x ptr], ptr @global_rtl, i64 0, i64 2), align 16, !tbaa !5
  %53 = call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef 4) #30
  %54 = call ptr @gen_rtx_fmt_ee_stat(i32 noundef 49, i32 noundef 16, ptr noundef %52, ptr noundef %53) #30
  %55 = call ptr @gen_rtx_fmt_ee_stat(i32 noundef 23, i32 noundef 0, ptr noundef %52, ptr noundef %54) #30
  %56 = call ptr @emit_insn(ptr noundef %55) #30
  %57 = load i32, ptr %56, align 8
  %58 = or i32 %57, 1073741824
  store i32 %58, ptr %56, align 8
  call void @dwarf2out_frame_debug(ptr noundef nonnull %56, i8 noundef zeroext 1) #30
  call void @end_sequence() #30
  br label %79

59:                                               ; preds = %2
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %4) #30
  %60 = getelementptr i8, ptr %0, i64 8
  %61 = load i32, ptr %60, align 8, !tbaa !16
  %62 = zext i32 %61 to i64
  %63 = getelementptr inbounds [53 x ptr], ptr @reg_names, i64 0, i64 %62
  %64 = load ptr, ptr %63, align 8, !tbaa !5
  %65 = call i32 (ptr, ptr, ...) @sprintf(ptr noundef nonnull dereferenceable(1) %4, ptr noundef nonnull dereferenceable(1) @.str.336, ptr noundef %64)
  %66 = load i32, ptr %60, align 8, !tbaa !16
  %67 = shl nuw i32 1, %66
  %68 = load i32, ptr @pic_labels_used, align 4, !tbaa !20
  %69 = or i32 %68, %67
  store i32 %69, ptr @pic_labels_used, align 4, !tbaa !20
  %70 = tail call i32 @dwarf2out_do_frame() #30
  %71 = icmp eq i32 %70, 0
  br i1 %71, label %74, label %72

72:                                               ; preds = %59
  tail call void @start_sequence() #30
  %73 = tail call ptr @emit_barrier() #30
  tail call void @end_sequence() #30
  tail call void @dwarf2out_frame_debug(ptr noundef %73, i8 noundef zeroext 0) #30
  br label %74

74:                                               ; preds = %72, %59
  %75 = call ptr @ggc_alloc_string(ptr noundef nonnull %4, i32 noundef -1) #30
  %76 = call ptr @gen_rtx_fmt_s00_stat(i32 noundef 45, i32 noundef 16, ptr noundef %75) #30
  %77 = getelementptr inbounds [3 x ptr], ptr %3, i64 0, i64 2
  store ptr %76, ptr %77, align 16, !tbaa !5
  %78 = call ptr @gen_rtx_MEM(i32 noundef 14, ptr noundef %76) #30
  store ptr %78, ptr %77, align 16, !tbaa !5
  call void @output_asm_insn(ptr noundef nonnull @.str.156, ptr noundef nonnull %3) #30
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %4) #30
  br label %79

79:                                               ; preds = %34, %48, %45, %74
  %80 = load i32, ptr @flag_pic, align 4, !tbaa !20
  %81 = icmp eq i32 %80, 0
  %82 = load i8, ptr getelementptr inbounds ([62 x i8], ptr @ix86_tune_features, i64 0, i64 4), align 4
  %83 = icmp ne i8 %82, 0
  %84 = select i1 %81, i1 true, i1 %83
  %85 = select i1 %84, ptr @.str.157, ptr @.str.158
  call void @output_asm_insn(ptr noundef nonnull %85, ptr noundef nonnull %3) #30
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %3) #30
  ret ptr @.str.43
}

declare ptr @gen_rtx_fmt_s00_stat(i32 noundef, i32 noundef, ptr noundef) local_unnamed_addr #3

declare ptr @gen_rtx_fmt_u_stat(i32 noundef, i32 noundef, ptr noundef) local_unnamed_addr #3

declare ptr @gen_label_rtx() local_unnamed_addr #3

declare void @output_asm_insn(ptr noundef, ptr noundef) local_unnamed_addr #3

declare i32 @dwarf2out_do_frame() local_unnamed_addr #3

declare void @start_sequence() local_unnamed_addr #3

declare ptr @emit_insn(ptr noundef) local_unnamed_addr #3

declare ptr @gen_rtx_fmt_ee_stat(i32 noundef, i32 noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

declare ptr @gen_rtx_CONST_INT(i32 noundef, i64 noundef) local_unnamed_addr #3

declare void @dwarf2out_frame_debug(ptr noundef, i8 noundef zeroext) local_unnamed_addr #3

declare void @end_sequence() local_unnamed_addr #3

declare ptr @emit_barrier() local_unnamed_addr #3

declare ptr @ggc_alloc_string(ptr noundef, i32 noundef) local_unnamed_addr #3

declare ptr @gen_rtx_MEM(i32 noundef, ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define dso_local i64 @ix86_initial_elimination_offset(i32 noundef %0, i32 noundef %1) local_unnamed_addr #9 {
  %3 = alloca %struct.ix86_frame, align 8
  call void @llvm.lifetime.start.p0(i64 88, ptr nonnull %3) #30
  call fastcc void @ix86_compute_frame_layout(ptr noundef nonnull %3)
  %4 = icmp eq i32 %0, 16
  %5 = icmp eq i32 %1, 6
  %6 = and i1 %4, %5
  br i1 %6, label %7, label %10

7:                                                ; preds = %2
  %8 = getelementptr inbounds %struct.ix86_frame, ptr %3, i64 0, i32 11
  %9 = load i64, ptr %8, align 8, !tbaa !129
  br label %34

10:                                               ; preds = %2
  %11 = icmp eq i32 %0, 20
  %12 = and i1 %11, %5
  br i1 %12, label %13, label %19

13:                                               ; preds = %10
  %14 = getelementptr inbounds %struct.ix86_frame, ptr %3, i64 0, i32 11
  %15 = load i64, ptr %14, align 8, !tbaa !129
  %16 = getelementptr inbounds %struct.ix86_frame, ptr %3, i64 0, i32 10
  %17 = load i64, ptr %16, align 8, !tbaa !136
  %18 = sub nsw i64 %15, %17
  br label %34

19:                                               ; preds = %10
  %20 = icmp eq i32 %1, 7
  br i1 %20, label %22, label %21

21:                                               ; preds = %19
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 7938, ptr noundef nonnull @.str.131) #30
  br label %22

22:                                               ; preds = %19, %21
  br i1 %4, label %23, label %26

23:                                               ; preds = %22
  %24 = getelementptr inbounds %struct.ix86_frame, ptr %3, i64 0, i32 12
  %25 = load i64, ptr %24, align 8, !tbaa !140
  br label %34

26:                                               ; preds = %22
  br i1 %11, label %28, label %27

27:                                               ; preds = %26
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 7943, ptr noundef nonnull @.str.131) #30
  br label %28

28:                                               ; preds = %26, %27
  %29 = getelementptr inbounds %struct.ix86_frame, ptr %3, i64 0, i32 12
  %30 = load i64, ptr %29, align 8, !tbaa !140
  %31 = getelementptr inbounds %struct.ix86_frame, ptr %3, i64 0, i32 10
  %32 = load i64, ptr %31, align 8, !tbaa !136
  %33 = sub nsw i64 %30, %32
  br label %34

34:                                               ; preds = %28, %23, %13, %7
  %35 = phi i64 [ %9, %7 ], [ %18, %13 ], [ %25, %23 ], [ %33, %28 ]
  call void @llvm.lifetime.end.p0(i64 88, ptr nonnull %3) #30
  ret i64 %35
}

; Function Attrs: nounwind sspstrong uwtable
define dso_local void @ix86_expand_prologue() local_unnamed_addr #9 {
  %1 = alloca %struct.ix86_frame, align 8
  call void @llvm.lifetime.start.p0(i64 88, ptr nonnull %1) #30
  %2 = load i8, ptr getelementptr inbounds (%struct.rtl_data, ptr @x_rtl, i64 0, i32 41), align 1, !tbaa !128
  %3 = load i32, ptr getelementptr inbounds (%struct.rtl_data, ptr @x_rtl, i64 0, i32 24), align 4
  %4 = load i32, ptr @ix86_incoming_stack_boundary, align 4
  %5 = tail call i32 @llvm.umax.i32(i32 %3, i32 %4)
  %6 = load i32, ptr @current_function_is_leaf, align 4, !tbaa !20
  %7 = icmp eq i32 %6, 0
  %8 = load i32, ptr getelementptr inbounds (%struct.rtl_data, ptr @x_rtl, i64 0, i32 25), align 8
  %9 = load i32, ptr getelementptr inbounds (%struct.rtl_data, ptr @x_rtl, i64 0, i32 22), align 4
  %10 = select i1 %7, i32 %9, i32 %8
  %11 = icmp ult i32 %5, %10
  %12 = load i8, ptr getelementptr inbounds (%struct.rtl_data, ptr @x_rtl, i64 0, i32 47), align 1, !tbaa !143
  %13 = icmp eq i8 %12, 0
  br i1 %13, label %20, label %14

14:                                               ; preds = %0
  %15 = load i8, ptr getelementptr inbounds (%struct.rtl_data, ptr @x_rtl, i64 0, i32 43), align 1
  %16 = zext i1 %11 to i8
  %17 = icmp eq i8 %15, %16
  br i1 %17, label %22, label %18

18:                                               ; preds = %14
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 8447, ptr noundef nonnull @.str.131) #30
  %19 = load i8, ptr getelementptr inbounds (%struct.rtl_data, ptr @x_rtl, i64 0, i32 43), align 1
  br label %22

20:                                               ; preds = %0
  %21 = zext i1 %11 to i8
  store i8 %21, ptr getelementptr inbounds (%struct.rtl_data, ptr @x_rtl, i64 0, i32 43), align 1, !tbaa !130
  store i8 1, ptr getelementptr inbounds (%struct.rtl_data, ptr @x_rtl, i64 0, i32 47), align 1, !tbaa !143
  br label %22

22:                                               ; preds = %14, %18, %20
  %23 = phi i8 [ %15, %14 ], [ %19, %18 ], [ %21, %20 ]
  %24 = load ptr, ptr getelementptr inbounds (%struct.rtl_data, ptr @x_rtl, i64 0, i32 16), align 8, !tbaa !144
  %25 = icmp eq ptr %24, null
  %26 = icmp eq i8 %23, 0
  %27 = select i1 %25, i1 true, i1 %26
  %28 = load i8, ptr getelementptr inbounds (%struct.rtl_data, ptr @x_rtl, i64 0, i32 45), align 1
  %29 = icmp ne i8 %28, 0
  %30 = select i1 %27, i1 true, i1 %29
  br i1 %30, label %32, label %31

31:                                               ; preds = %22
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 8470, ptr noundef nonnull @.str.131) #30
  br label %32

32:                                               ; preds = %22, %31
  %33 = load ptr, ptr getelementptr inbounds ([11 x ptr], ptr @global_rtl, i64 0, i64 2), align 16, !tbaa !5
  %34 = load ptr, ptr @cfun, align 8, !tbaa !5
  %35 = getelementptr inbounds %struct.function, ptr %34, i64 0, i32 10
  %36 = load ptr, ptr %35, align 8, !tbaa !87
  %37 = getelementptr inbounds %struct.machine_function, ptr %36, i64 0, i32 6
  store ptr %33, ptr %37, align 8, !tbaa !145
  %38 = getelementptr inbounds %struct.machine_function, ptr %36, i64 0, i32 6, i32 1
  store i64 4, ptr %38, align 8, !tbaa !146
  call fastcc void @ix86_compute_frame_layout(ptr noundef nonnull %1)
  %39 = load ptr, ptr @current_function_decl, align 8, !tbaa !5
  %40 = getelementptr inbounds %struct.tree_decl_common, ptr %39, i64 0, i32 6
  %41 = load ptr, ptr %40, align 8, !tbaa !16
  %42 = tail call ptr @lookup_attribute(ptr noundef nonnull @.str.337, ptr noundef %41) #30
  %43 = icmp eq ptr %42, null
  br i1 %43, label %102, label %44

44:                                               ; preds = %32
  %45 = tail call ptr @decl_function_context(ptr noundef nonnull %39) #30
  %46 = icmp eq ptr %45, null
  br i1 %46, label %50, label %47

47:                                               ; preds = %44
  %48 = getelementptr inbounds %struct.tree_decl_minimal, ptr %39, i64 0, i32 1
  %49 = load i32, ptr %48, align 8, !tbaa !16
  tail call void (i32, ptr, ...) @error_at(i32 noundef %49, ptr noundef nonnull @.str.338) #30
  br label %50

50:                                               ; preds = %47, %44
  %51 = tail call ptr @gen_rtx_REG(i32 noundef 16, i32 noundef 5) #30
  %52 = tail call ptr @gen_rtx_REG(i32 noundef 16, i32 noundef 5) #30
  %53 = tail call ptr @gen_vswapmov(ptr noundef %51, ptr noundef %52) #30
  %54 = tail call ptr @emit_insn(ptr noundef %53) #30
  %55 = load ptr, ptr getelementptr inbounds ([11 x ptr], ptr @global_rtl, i64 0, i64 4), align 16, !tbaa !5
  %56 = load ptr, ptr @cfun, align 8, !tbaa !5
  %57 = getelementptr inbounds %struct.function, ptr %56, i64 0, i32 10
  %58 = load ptr, ptr %57, align 8, !tbaa !87
  %59 = getelementptr inbounds %struct.machine_function, ptr %58, i64 0, i32 6
  %60 = load ptr, ptr %59, align 8, !tbaa !145
  %61 = load ptr, ptr getelementptr inbounds ([11 x ptr], ptr @global_rtl, i64 0, i64 2), align 16, !tbaa !5
  %62 = icmp eq ptr %60, %61
  br i1 %62, label %63, label %67

63:                                               ; preds = %50
  %64 = getelementptr inbounds %struct.machine_function, ptr %58, i64 0, i32 6, i32 1
  %65 = load i64, ptr %64, align 8, !tbaa !146
  %66 = add nsw i64 %65, 4
  store i64 %66, ptr %64, align 8, !tbaa !146
  br label %67

67:                                               ; preds = %50, %63
  %68 = tail call ptr @gen_rtx_fmt_e_stat(i32 noundef 74, i32 noundef 16, ptr noundef %61) #30
  %69 = tail call ptr @gen_rtx_MEM(i32 noundef 16, ptr noundef %68) #30
  %70 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 23, i32 noundef 0, ptr noundef %69, ptr noundef %55) #30
  %71 = tail call ptr @emit_insn(ptr noundef %70) #30
  %72 = load ptr, ptr getelementptr inbounds ([11 x ptr], ptr @global_rtl, i64 0, i64 4), align 16, !tbaa !5
  %73 = load ptr, ptr getelementptr inbounds ([11 x ptr], ptr @global_rtl, i64 0, i64 2), align 16, !tbaa !5
  %74 = tail call ptr @gen_vswapmov(ptr noundef %72, ptr noundef %73) #30
  %75 = tail call ptr @emit_insn(ptr noundef %74) #30
  %76 = load i8, ptr getelementptr inbounds (%struct.rtl_data, ptr @x_rtl, i64 0, i32 41), align 1, !tbaa !128
  %77 = icmp eq i8 %76, 0
  br i1 %77, label %98, label %78

78:                                               ; preds = %67
  %79 = load ptr, ptr getelementptr inbounds (%struct.rtl_data, ptr @x_rtl, i64 0, i32 16), align 8, !tbaa !144
  %80 = icmp ne ptr %79, null
  %81 = load i8, ptr getelementptr inbounds (%struct.rtl_data, ptr @x_rtl, i64 0, i32 43), align 1
  %82 = icmp ne i8 %81, 0
  %83 = select i1 %80, i1 %82, i1 false
  br i1 %83, label %98, label %84

84:                                               ; preds = %78
  %85 = load i32, ptr %71, align 8
  %86 = or i32 %85, 1073741824
  store i32 %86, ptr %71, align 8
  %87 = load i32, ptr %75, align 8
  %88 = or i32 %87, 1073741824
  store i32 %88, ptr %75, align 8
  %89 = load ptr, ptr @cfun, align 8, !tbaa !5
  %90 = getelementptr inbounds %struct.function, ptr %89, i64 0, i32 10
  %91 = load ptr, ptr %90, align 8, !tbaa !87
  %92 = getelementptr inbounds %struct.machine_function, ptr %91, i64 0, i32 6
  %93 = load ptr, ptr %92, align 8, !tbaa !145
  %94 = load ptr, ptr getelementptr inbounds ([11 x ptr], ptr @global_rtl, i64 0, i64 2), align 16, !tbaa !5
  %95 = icmp eq ptr %93, %94
  br i1 %95, label %96, label %102

96:                                               ; preds = %84
  %97 = load ptr, ptr getelementptr inbounds ([11 x ptr], ptr @global_rtl, i64 0, i64 4), align 16, !tbaa !5
  store ptr %97, ptr %92, align 8, !tbaa !145
  br label %102

98:                                               ; preds = %78, %67
  %99 = load ptr, ptr getelementptr inbounds ([11 x ptr], ptr @global_rtl, i64 0, i64 4), align 16, !tbaa !5
  %100 = tail call ptr @gen_popsi1(ptr noundef %99) #30, !callees !147
  %101 = tail call ptr @emit_insn(ptr noundef %100) #30
  br label %102

102:                                              ; preds = %32, %98, %96, %84
  %103 = phi i8 [ %2, %98 ], [ 0, %96 ], [ 0, %84 ], [ %2, %32 ]
  %104 = load ptr, ptr @cfun, align 8, !tbaa !5
  %105 = getelementptr inbounds %struct.function, ptr %104, i64 0, i32 10
  %106 = load ptr, ptr %105, align 8, !tbaa !87
  %107 = getelementptr inbounds %struct.machine_function, ptr %106, i64 0, i32 8
  %108 = load i8, ptr %107, align 4
  %109 = and i8 %108, 16
  %110 = icmp eq i8 %109, 0
  br i1 %110, label %159, label %111

111:                                              ; preds = %102
  %112 = getelementptr inbounds %struct.function, ptr %104, i64 0, i32 6
  %113 = load ptr, ptr %112, align 8, !tbaa !148
  %114 = getelementptr inbounds %struct.tree_function_decl, ptr %113, i64 0, i32 5
  %115 = load i32, ptr %114, align 8
  %116 = and i32 %115, 4194304
  %117 = icmp eq i32 %116, 0
  br i1 %117, label %135, label %118

118:                                              ; preds = %111
  %119 = getelementptr inbounds %struct.tree_common, ptr %113, i64 0, i32 2
  %120 = load ptr, ptr %119, align 8, !tbaa !16
  %121 = getelementptr inbounds %struct.tree_type, ptr %120, i64 0, i32 4
  %122 = load ptr, ptr %121, align 8, !tbaa !16
  %123 = tail call ptr @lookup_attribute(ptr noundef nonnull @.str.128, ptr noundef %122) #30
  %124 = icmp eq ptr %123, null
  br i1 %124, label %125, label %129

125:                                              ; preds = %118
  %126 = tail call fastcc i32 @ix86_function_regparm(ptr noundef nonnull %120, ptr noundef nonnull %113)
  %127 = icmp eq i32 %126, 3
  %128 = select i1 %127, i32 4, i32 2
  br label %129

129:                                              ; preds = %125, %118
  %130 = phi i32 [ 0, %118 ], [ %128, %125 ]
  %131 = tail call ptr @gen_rtx_REG(i32 noundef 16, i32 noundef %130) #30
  %132 = load ptr, ptr @cfun, align 8, !tbaa !5
  %133 = getelementptr inbounds %struct.function, ptr %132, i64 0, i32 10
  %134 = load ptr, ptr %133, align 8, !tbaa !87
  br label %135

135:                                              ; preds = %111, %129
  %136 = phi ptr [ %134, %129 ], [ %106, %111 ]
  %137 = phi ptr [ %131, %129 ], [ null, %111 ]
  %138 = getelementptr inbounds %struct.machine_function, ptr %136, i64 0, i32 6
  %139 = load ptr, ptr %138, align 8, !tbaa !145
  %140 = load ptr, ptr getelementptr inbounds ([11 x ptr], ptr @global_rtl, i64 0, i64 2), align 16, !tbaa !5
  %141 = icmp eq ptr %139, %140
  br i1 %141, label %142, label %146

142:                                              ; preds = %135
  %143 = getelementptr inbounds %struct.machine_function, ptr %136, i64 0, i32 6, i32 1
  %144 = load i64, ptr %143, align 8, !tbaa !146
  %145 = add nsw i64 %144, 4
  store i64 %145, ptr %143, align 8, !tbaa !146
  br label %146

146:                                              ; preds = %135, %142
  %147 = tail call ptr @gen_rtx_fmt_e_stat(i32 noundef 74, i32 noundef 16, ptr noundef %140) #30
  %148 = tail call ptr @gen_rtx_MEM(i32 noundef 16, ptr noundef %147) #30
  %149 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 23, i32 noundef 0, ptr noundef %148, ptr noundef %137) #30
  %150 = tail call ptr @emit_insn(ptr noundef %149) #30
  %151 = tail call ptr @gen_blockage() #30
  %152 = tail call ptr @emit_insn(ptr noundef %151) #30
  %153 = load ptr, ptr getelementptr inbounds ([11 x ptr], ptr @global_rtl, i64 0, i64 2), align 16, !tbaa !5
  %154 = tail call ptr @plus_constant(ptr noundef %153, i64 noundef -4) #30
  %155 = load ptr, ptr getelementptr inbounds ([11 x ptr], ptr @global_rtl, i64 0, i64 2), align 16, !tbaa !5
  %156 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 23, i32 noundef 0, ptr noundef %155, ptr noundef %154) #30
  tail call void @add_reg_note(ptr noundef %150, i32 noundef 19, ptr noundef %156) #30
  %157 = load i32, ptr %150, align 8
  %158 = or i32 %157, 1073741824
  store i32 %158, ptr %150, align 8
  br label %159

159:                                              ; preds = %146, %102
  %160 = load ptr, ptr getelementptr inbounds (%struct.rtl_data, ptr @x_rtl, i64 0, i32 16), align 8, !tbaa !144
  %161 = icmp ne ptr %160, null
  %162 = load i8, ptr getelementptr inbounds (%struct.rtl_data, ptr @x_rtl, i64 0, i32 43), align 1
  %163 = icmp ne i8 %162, 0
  %164 = select i1 %161, i1 %163, i1 false
  br i1 %164, label %165, label %256

165:                                              ; preds = %159
  %166 = load i32, ptr getelementptr inbounds (%struct.rtl_data, ptr @x_rtl, i64 0, i32 22), align 4, !tbaa !126
  %167 = lshr i32 %166, 3
  %168 = load ptr, ptr @cfun, align 8, !tbaa !5
  %169 = getelementptr inbounds %struct.function, ptr %168, i64 0, i32 10
  %170 = load ptr, ptr %169, align 8, !tbaa !87
  %171 = getelementptr inbounds %struct.machine_function, ptr %170, i64 0, i32 8
  %172 = load i8, ptr %171, align 4
  %173 = and i8 %172, 16
  %174 = icmp eq i8 %173, 0
  %175 = select i1 %174, i32 4, i32 8
  %176 = getelementptr i8, ptr %160, i64 8
  %177 = load i32, ptr %176, align 8, !tbaa !16
  %178 = zext i32 %177 to i64
  %179 = getelementptr inbounds [53 x i8], ptr @call_used_regs, i64 0, i64 %178
  %180 = load i8, ptr %179, align 1, !tbaa !16
  %181 = icmp eq i8 %180, 0
  %182 = add nuw nsw i32 %175, 4
  %183 = select i1 %181, i32 %182, i32 %175
  %184 = load i8, ptr getelementptr inbounds (%struct.rtl_data, ptr @x_rtl, i64 0, i32 45), align 1
  %185 = icmp eq i8 %184, 0
  br i1 %185, label %186, label %187

186:                                              ; preds = %165
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 8550, ptr noundef nonnull @.str.131) #30
  br label %187

187:                                              ; preds = %165, %186
  %188 = load ptr, ptr getelementptr inbounds ([11 x ptr], ptr @global_rtl, i64 0, i64 2), align 16, !tbaa !5
  %189 = zext i32 %183 to i64
  %190 = tail call ptr @plus_constant(ptr noundef %188, i64 noundef %189) #30
  %191 = load ptr, ptr getelementptr inbounds (%struct.rtl_data, ptr @x_rtl, i64 0, i32 16), align 8, !tbaa !144
  %192 = getelementptr i8, ptr %191, i64 8
  %193 = load i32, ptr %192, align 8, !tbaa !16
  %194 = zext i32 %193 to i64
  %195 = getelementptr inbounds [53 x i8], ptr @call_used_regs, i64 0, i64 %194
  %196 = load i8, ptr %195, align 1, !tbaa !16
  %197 = icmp eq i8 %196, 0
  br i1 %197, label %198, label %217

198:                                              ; preds = %187
  %199 = load ptr, ptr @cfun, align 8, !tbaa !5
  %200 = getelementptr inbounds %struct.function, ptr %199, i64 0, i32 10
  %201 = load ptr, ptr %200, align 8, !tbaa !87
  %202 = getelementptr inbounds %struct.machine_function, ptr %201, i64 0, i32 6
  %203 = load ptr, ptr %202, align 8, !tbaa !145
  %204 = load ptr, ptr getelementptr inbounds ([11 x ptr], ptr @global_rtl, i64 0, i64 2), align 16, !tbaa !5
  %205 = icmp eq ptr %203, %204
  br i1 %205, label %206, label %210

206:                                              ; preds = %198
  %207 = getelementptr inbounds %struct.machine_function, ptr %201, i64 0, i32 6, i32 1
  %208 = load i64, ptr %207, align 8, !tbaa !146
  %209 = add nsw i64 %208, 4
  store i64 %209, ptr %207, align 8, !tbaa !146
  br label %210

210:                                              ; preds = %198, %206
  %211 = tail call ptr @gen_rtx_fmt_e_stat(i32 noundef 74, i32 noundef 16, ptr noundef %204) #30
  %212 = tail call ptr @gen_rtx_MEM(i32 noundef 16, ptr noundef %211) #30
  %213 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 23, i32 noundef 0, ptr noundef %212, ptr noundef nonnull %191) #30
  %214 = tail call ptr @emit_insn(ptr noundef %213) #30
  %215 = load i32, ptr %214, align 8
  %216 = or i32 %215, 1073741824
  store i32 %216, ptr %214, align 8
  br label %217

217:                                              ; preds = %210, %187
  %218 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 23, i32 noundef 0, ptr noundef nonnull %191, ptr noundef %190) #30
  %219 = tail call ptr @emit_insn(ptr noundef %218) #30
  %220 = load i32, ptr %219, align 8
  %221 = or i32 %220, 1073741824
  store i32 %221, ptr %219, align 8
  %222 = load ptr, ptr getelementptr inbounds (%struct.rtl_data, ptr @x_rtl, i64 0, i32 16), align 8, !tbaa !144
  %223 = load ptr, ptr @cfun, align 8, !tbaa !5
  %224 = getelementptr inbounds %struct.function, ptr %223, i64 0, i32 10
  %225 = load ptr, ptr %224, align 8, !tbaa !87
  %226 = getelementptr inbounds %struct.machine_function, ptr %225, i64 0, i32 6
  store ptr %222, ptr %226, align 8, !tbaa !145
  %227 = load ptr, ptr getelementptr inbounds ([11 x ptr], ptr @global_rtl, i64 0, i64 2), align 16, !tbaa !5
  %228 = sub nsw i32 0, %167
  %229 = sext i32 %228 to i64
  %230 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef %229) #30
  %231 = tail call ptr @gen_andsi3(ptr noundef %227, ptr noundef %227, ptr noundef %230) #30, !callees !149
  %232 = tail call ptr @emit_insn(ptr noundef %231) #30
  %233 = load i32, ptr %232, align 8
  %234 = or i32 %233, 1073741824
  store i32 %234, ptr %232, align 8
  %235 = load ptr, ptr getelementptr inbounds (%struct.rtl_data, ptr @x_rtl, i64 0, i32 16), align 8, !tbaa !144
  %236 = tail call ptr @plus_constant(ptr noundef %235, i64 noundef -4) #30
  %237 = tail call ptr @gen_frame_mem(i32 noundef 16, ptr noundef %236) #30
  %238 = load ptr, ptr @cfun, align 8, !tbaa !5
  %239 = getelementptr inbounds %struct.function, ptr %238, i64 0, i32 10
  %240 = load ptr, ptr %239, align 8, !tbaa !87
  %241 = getelementptr inbounds %struct.machine_function, ptr %240, i64 0, i32 6
  %242 = load ptr, ptr %241, align 8, !tbaa !145
  %243 = load ptr, ptr getelementptr inbounds ([11 x ptr], ptr @global_rtl, i64 0, i64 2), align 16, !tbaa !5
  %244 = icmp eq ptr %242, %243
  br i1 %244, label %245, label %249

245:                                              ; preds = %217
  %246 = getelementptr inbounds %struct.machine_function, ptr %240, i64 0, i32 6, i32 1
  %247 = load i64, ptr %246, align 8, !tbaa !146
  %248 = add nsw i64 %247, 4
  store i64 %248, ptr %246, align 8, !tbaa !146
  br label %249

249:                                              ; preds = %217, %245
  %250 = tail call ptr @gen_rtx_fmt_e_stat(i32 noundef 74, i32 noundef 16, ptr noundef %243) #30
  %251 = tail call ptr @gen_rtx_MEM(i32 noundef 16, ptr noundef %250) #30
  %252 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 23, i32 noundef 0, ptr noundef %251, ptr noundef %237) #30
  %253 = tail call ptr @emit_insn(ptr noundef %252) #30
  %254 = load i32, ptr %253, align 8
  %255 = or i32 %254, 1073741824
  store i32 %255, ptr %253, align 8
  br label %256

256:                                              ; preds = %249, %159
  %257 = icmp eq i8 %103, 0
  br i1 %257, label %292, label %258

258:                                              ; preds = %256
  %259 = load ptr, ptr getelementptr inbounds ([11 x ptr], ptr @global_rtl, i64 0, i64 4), align 16, !tbaa !5
  %260 = load ptr, ptr @cfun, align 8, !tbaa !5
  %261 = getelementptr inbounds %struct.function, ptr %260, i64 0, i32 10
  %262 = load ptr, ptr %261, align 8, !tbaa !87
  %263 = getelementptr inbounds %struct.machine_function, ptr %262, i64 0, i32 6
  %264 = load ptr, ptr %263, align 8, !tbaa !145
  %265 = load ptr, ptr getelementptr inbounds ([11 x ptr], ptr @global_rtl, i64 0, i64 2), align 16, !tbaa !5
  %266 = icmp eq ptr %264, %265
  br i1 %266, label %267, label %271

267:                                              ; preds = %258
  %268 = getelementptr inbounds %struct.machine_function, ptr %262, i64 0, i32 6, i32 1
  %269 = load i64, ptr %268, align 8, !tbaa !146
  %270 = add nsw i64 %269, 4
  store i64 %270, ptr %268, align 8, !tbaa !146
  br label %271

271:                                              ; preds = %258, %267
  %272 = tail call ptr @gen_rtx_fmt_e_stat(i32 noundef 74, i32 noundef 16, ptr noundef %265) #30
  %273 = tail call ptr @gen_rtx_MEM(i32 noundef 16, ptr noundef %272) #30
  %274 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 23, i32 noundef 0, ptr noundef %273, ptr noundef %259) #30
  %275 = tail call ptr @emit_insn(ptr noundef %274) #30
  %276 = load i32, ptr %275, align 8
  %277 = or i32 %276, 1073741824
  store i32 %277, ptr %275, align 8
  %278 = load ptr, ptr getelementptr inbounds ([11 x ptr], ptr @global_rtl, i64 0, i64 4), align 16, !tbaa !5
  %279 = load ptr, ptr getelementptr inbounds ([11 x ptr], ptr @global_rtl, i64 0, i64 2), align 16, !tbaa !5
  %280 = tail call ptr @emit_move_insn(ptr noundef %278, ptr noundef %279) #30
  %281 = load i32, ptr %280, align 8
  %282 = or i32 %281, 1073741824
  store i32 %282, ptr %280, align 8
  %283 = load ptr, ptr @cfun, align 8, !tbaa !5
  %284 = getelementptr inbounds %struct.function, ptr %283, i64 0, i32 10
  %285 = load ptr, ptr %284, align 8, !tbaa !87
  %286 = getelementptr inbounds %struct.machine_function, ptr %285, i64 0, i32 6
  %287 = load ptr, ptr %286, align 8, !tbaa !145
  %288 = load ptr, ptr getelementptr inbounds ([11 x ptr], ptr @global_rtl, i64 0, i64 2), align 16, !tbaa !5
  %289 = icmp eq ptr %287, %288
  br i1 %289, label %290, label %292

290:                                              ; preds = %271
  %291 = load ptr, ptr getelementptr inbounds ([11 x ptr], ptr @global_rtl, i64 0, i64 4), align 16, !tbaa !5
  store ptr %291, ptr %286, align 8, !tbaa !145
  br label %292

292:                                              ; preds = %271, %290, %256
  %293 = load i8, ptr getelementptr inbounds (%struct.rtl_data, ptr @x_rtl, i64 0, i32 43), align 1, !tbaa !130
  %294 = icmp eq i8 %293, 0
  %295 = load i8, ptr getelementptr inbounds (%struct.rtl_data, ptr @x_rtl, i64 0, i32 45), align 1
  %296 = icmp ne i8 %295, 0
  %297 = select i1 %294, i1 true, i1 %296
  br i1 %297, label %312, label %298

298:                                              ; preds = %292
  %299 = load i32, ptr getelementptr inbounds (%struct.rtl_data, ptr @x_rtl, i64 0, i32 22), align 4, !tbaa !126
  %300 = lshr i32 %299, 3
  %301 = icmp ugt i32 %299, 39
  br i1 %301, label %303, label %302

302:                                              ; preds = %298
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 8604, ptr noundef nonnull @.str.131) #30
  br label %303

303:                                              ; preds = %298, %302
  %304 = load ptr, ptr getelementptr inbounds ([11 x ptr], ptr @global_rtl, i64 0, i64 2), align 16, !tbaa !5
  %305 = sub nsw i32 0, %300
  %306 = sext i32 %305 to i64
  %307 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef %306) #30
  %308 = tail call ptr @gen_andsi3(ptr noundef %304, ptr noundef %304, ptr noundef %307) #30, !callees !149
  %309 = tail call ptr @emit_insn(ptr noundef %308) #30
  %310 = load i32, ptr %309, align 8
  %311 = or i32 %310, 1073741824
  store i32 %311, ptr %309, align 8
  br label %312

312:                                              ; preds = %303, %292
  %313 = getelementptr inbounds %struct.ix86_frame, ptr %1, i64 0, i32 9
  %314 = load i64, ptr %313, align 8, !tbaa !119
  %315 = getelementptr inbounds %struct.ix86_frame, ptr %1, i64 0, i32 1
  %316 = load i32, ptr %315, align 4, !tbaa !122
  %317 = shl nsw i32 %316, 4
  %318 = sext i32 %317 to i64
  %319 = add nsw i64 %314, %318
  %320 = load i32, ptr %1, align 8, !tbaa !131
  %321 = sext i32 %320 to i64
  %322 = add nsw i64 %319, %321
  %323 = getelementptr inbounds %struct.ix86_frame, ptr %1, i64 0, i32 13
  %324 = load i8, ptr %323, align 8
  %325 = icmp eq i8 %324, 0
  br i1 %325, label %326, label %353

326:                                              ; preds = %312, %352
  %327 = phi i32 [ %328, %352 ], [ 52, %312 ]
  %328 = add nsw i32 %327, -1
  switch i32 %327, label %329 [
    i32 0, label %359
    i32 53, label %352
    i32 52, label %352
    i32 51, label %352
    i32 50, label %352
    i32 49, label %352
    i32 48, label %352
    i32 47, label %352
    i32 46, label %352
    i32 29, label %352
    i32 28, label %352
    i32 27, label %352
    i32 26, label %352
    i32 25, label %352
    i32 24, label %352
    i32 23, label %352
    i32 22, label %352
  ]

329:                                              ; preds = %326
  %330 = tail call fastcc i32 @ix86_save_reg(i32 noundef %328, i32 noundef 1)
  %331 = icmp eq i32 %330, 0
  br i1 %331, label %352, label %332

332:                                              ; preds = %329
  %333 = tail call ptr @gen_rtx_REG(i32 noundef 16, i32 noundef %328) #30
  %334 = load ptr, ptr @cfun, align 8, !tbaa !5
  %335 = getelementptr inbounds %struct.function, ptr %334, i64 0, i32 10
  %336 = load ptr, ptr %335, align 8, !tbaa !87
  %337 = getelementptr inbounds %struct.machine_function, ptr %336, i64 0, i32 6
  %338 = load ptr, ptr %337, align 8, !tbaa !145
  %339 = load ptr, ptr getelementptr inbounds ([11 x ptr], ptr @global_rtl, i64 0, i64 2), align 16, !tbaa !5
  %340 = icmp eq ptr %338, %339
  br i1 %340, label %341, label %345

341:                                              ; preds = %332
  %342 = getelementptr inbounds %struct.machine_function, ptr %336, i64 0, i32 6, i32 1
  %343 = load i64, ptr %342, align 8, !tbaa !146
  %344 = add nsw i64 %343, 4
  store i64 %344, ptr %342, align 8, !tbaa !146
  br label %345

345:                                              ; preds = %341, %332
  %346 = tail call ptr @gen_rtx_fmt_e_stat(i32 noundef 74, i32 noundef 16, ptr noundef %339) #30
  %347 = tail call ptr @gen_rtx_MEM(i32 noundef 16, ptr noundef %346) #30
  %348 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 23, i32 noundef 0, ptr noundef %347, ptr noundef %333) #30
  %349 = tail call ptr @emit_insn(ptr noundef %348) #30
  %350 = load i32, ptr %349, align 8
  %351 = or i32 %350, 1073741824
  store i32 %351, ptr %349, align 8
  br label %352

352:                                              ; preds = %345, %329, %326, %326, %326, %326, %326, %326, %326, %326, %326, %326, %326, %326, %326, %326, %326, %326
  br label %326, !llvm.loop !150

353:                                              ; preds = %312
  %354 = getelementptr inbounds %struct.ix86_frame, ptr %1, i64 0, i32 2
  %355 = load i32, ptr %354, align 8, !tbaa !121
  %356 = shl nsw i32 %355, 2
  %357 = sext i32 %356 to i64
  %358 = add nsw i64 %322, %357
  br label %359

359:                                              ; preds = %326, %353
  %360 = phi i64 [ %358, %353 ], [ %322, %326 ]
  %361 = load i32, ptr @target_flags, align 4, !tbaa !20
  %362 = and i32 %361, 16384
  %363 = icmp eq i32 %362, 0
  %364 = icmp ne i8 %324, 0
  %365 = and i1 %364, %363
  br i1 %365, label %366, label %403

366:                                              ; preds = %359
  %367 = and i32 %361, 524288
  %368 = icmp eq i32 %367, 0
  %369 = icmp slt i64 %360, -1
  %370 = select i1 %368, i1 true, i1 %369
  br i1 %370, label %371, label %403

371:                                              ; preds = %366
  %372 = load i8, ptr getelementptr inbounds (%struct.rtl_data, ptr @x_rtl, i64 0, i32 41), align 1, !tbaa !128
  %373 = icmp eq i8 %372, 0
  %374 = load i8, ptr getelementptr inbounds (%struct.rtl_data, ptr @x_rtl, i64 0, i32 43), align 1
  %375 = icmp ne i8 %374, 0
  %376 = select i1 %373, i1 true, i1 %375
  %377 = load ptr, ptr getelementptr inbounds ([11 x ptr], ptr @global_rtl, i64 0, i64 4), align 16
  %378 = load ptr, ptr getelementptr inbounds ([11 x ptr], ptr @global_rtl, i64 0, i64 2), align 16
  %379 = select i1 %376, ptr %378, ptr %377
  %380 = getelementptr inbounds %struct.ix86_frame, ptr %1, i64 0, i32 2
  %381 = load i32, ptr %380, align 8, !tbaa !121
  %382 = mul i32 %381, -4
  %383 = sext i32 %382 to i64
  br label %384

384:                                              ; preds = %399, %371
  %385 = phi i64 [ 0, %371 ], [ %401, %399 ]
  %386 = phi i64 [ %383, %371 ], [ %400, %399 ]
  switch i64 %385, label %387 [
    i64 52, label %399
    i64 51, label %399
    i64 50, label %399
    i64 49, label %399
    i64 48, label %399
    i64 47, label %399
    i64 46, label %399
    i64 45, label %399
    i64 28, label %399
    i64 27, label %399
    i64 26, label %399
    i64 25, label %399
    i64 24, label %399
    i64 23, label %399
    i64 22, label %399
    i64 21, label %399
  ]

387:                                              ; preds = %384
  %388 = trunc i64 %385 to i32
  %389 = tail call fastcc i32 @ix86_save_reg(i32 noundef %388, i32 noundef 1)
  %390 = icmp eq i32 %389, 0
  br i1 %390, label %399, label %391

391:                                              ; preds = %387
  %392 = tail call ptr @gen_rtx_MEM(i32 noundef 16, ptr noundef %379) #30
  %393 = tail call ptr @adjust_address_1(ptr noundef %392, i32 noundef 16, i64 noundef %386, i32 noundef 1, i32 noundef 1) #30
  %394 = tail call ptr @gen_rtx_REG(i32 noundef 16, i32 noundef %388) #30
  %395 = tail call ptr @emit_move_insn(ptr noundef %393, ptr noundef %394) #30
  %396 = load i32, ptr %395, align 8
  %397 = or i32 %396, 1073741824
  store i32 %397, ptr %395, align 8
  %398 = add nsw i64 %386, 4
  br label %399

399:                                              ; preds = %391, %387, %384, %384, %384, %384, %384, %384, %384, %384, %384, %384, %384, %384, %384, %384, %384, %384
  %400 = phi i64 [ %386, %384 ], [ %398, %391 ], [ %386, %387 ], [ %386, %384 ], [ %386, %384 ], [ %386, %384 ], [ %386, %384 ], [ %386, %384 ], [ %386, %384 ], [ %386, %384 ], [ %386, %384 ], [ %386, %384 ], [ %386, %384 ], [ %386, %384 ], [ %386, %384 ], [ %386, %384 ], [ %386, %384 ], [ %386, %384 ]
  %401 = add nuw nsw i64 %385, 1
  %402 = icmp eq i64 %401, 53
  br i1 %402, label %403, label %384, !llvm.loop !151

403:                                              ; preds = %399, %366, %359
  %404 = icmp eq i64 %360, 0
  br i1 %404, label %502, label %405

405:                                              ; preds = %403
  %406 = load i32, ptr @target_flags, align 4, !tbaa !20
  %407 = and i32 %406, 524288
  %408 = icmp eq i32 %407, 0
  %409 = icmp slt i64 %360, -1
  %410 = select i1 %408, i1 true, i1 %409
  br i1 %410, label %411, label %423

411:                                              ; preds = %405
  %412 = load ptr, ptr getelementptr inbounds ([11 x ptr], ptr @global_rtl, i64 0, i64 2), align 16, !tbaa !5
  %413 = sub nsw i64 0, %360
  %414 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef %413) #30
  %415 = load ptr, ptr @cfun, align 8, !tbaa !5
  %416 = getelementptr inbounds %struct.function, ptr %415, i64 0, i32 10
  %417 = load ptr, ptr %416, align 8, !tbaa !87
  %418 = getelementptr inbounds %struct.machine_function, ptr %417, i64 0, i32 6
  %419 = load ptr, ptr %418, align 8, !tbaa !145
  %420 = load ptr, ptr getelementptr inbounds ([11 x ptr], ptr @global_rtl, i64 0, i64 2), align 16, !tbaa !5
  %421 = icmp eq ptr %419, %420
  %422 = zext i1 %421 to i8
  tail call fastcc void @pro_epilogue_adjust_stack(ptr noundef %412, ptr noundef %412, ptr noundef %414, i32 noundef -1, i8 noundef zeroext %422)
  br label %502

423:                                              ; preds = %405
  %424 = tail call ptr @gen_rtx_REG(i32 noundef 16, i32 noundef 0) #30
  %425 = load ptr, ptr @cfun, align 8, !tbaa !5
  %426 = getelementptr inbounds %struct.function, ptr %425, i64 0, i32 10
  %427 = load ptr, ptr %426, align 8, !tbaa !87
  %428 = getelementptr inbounds %struct.machine_function, ptr %427, i64 0, i32 7
  %429 = load i32, ptr %428, align 8, !tbaa !59
  %430 = icmp eq i32 %429, 1
  br i1 %430, label %457, label %431

431:                                              ; preds = %423
  %432 = getelementptr inbounds %struct.function, ptr %425, i64 0, i32 1
  %433 = load ptr, ptr %432, align 8, !tbaa !152
  %434 = load ptr, ptr %433, align 8, !tbaa !153
  %435 = tail call ptr @df_get_live_out(ptr noundef %434) #30
  %436 = tail call i32 @bitmap_bit_p(ptr noundef %435, i32 noundef 0) #30
  %437 = and i32 %436, 255
  %438 = icmp eq i32 %437, 0
  br i1 %438, label %457, label %439

439:                                              ; preds = %431
  %440 = load ptr, ptr @cfun, align 8, !tbaa !5
  %441 = getelementptr inbounds %struct.function, ptr %440, i64 0, i32 10
  %442 = load ptr, ptr %441, align 8, !tbaa !87
  %443 = getelementptr inbounds %struct.machine_function, ptr %442, i64 0, i32 6
  %444 = load ptr, ptr %443, align 8, !tbaa !145
  %445 = load ptr, ptr getelementptr inbounds ([11 x ptr], ptr @global_rtl, i64 0, i64 2), align 16, !tbaa !5
  %446 = icmp eq ptr %444, %445
  br i1 %446, label %447, label %451

447:                                              ; preds = %439
  %448 = getelementptr inbounds %struct.machine_function, ptr %442, i64 0, i32 6, i32 1
  %449 = load i64, ptr %448, align 8, !tbaa !146
  %450 = add nsw i64 %449, 4
  store i64 %450, ptr %448, align 8, !tbaa !146
  br label %451

451:                                              ; preds = %439, %447
  %452 = tail call ptr @gen_rtx_fmt_e_stat(i32 noundef 74, i32 noundef 16, ptr noundef %445) #30
  %453 = tail call ptr @gen_rtx_MEM(i32 noundef 16, ptr noundef %452) #30
  %454 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 23, i32 noundef 0, ptr noundef %453, ptr noundef %424) #30
  %455 = tail call ptr @emit_insn(ptr noundef %454) #30
  %456 = add nsw i64 %360, -4
  br label %457

457:                                              ; preds = %423, %451, %431
  %458 = phi i1 [ false, %451 ], [ true, %431 ], [ true, %423 ]
  %459 = phi i64 [ %456, %451 ], [ %360, %431 ], [ %360, %423 ]
  %460 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef %459) #30
  %461 = tail call ptr @emit_move_insn(ptr noundef %424, ptr noundef %460) #30
  %462 = tail call ptr @gen_allocate_stack_worker_32(ptr noundef %424, ptr noundef %424) #30
  %463 = tail call ptr @emit_insn(ptr noundef %462) #30
  %464 = load ptr, ptr @cfun, align 8, !tbaa !5
  %465 = getelementptr inbounds %struct.function, ptr %464, i64 0, i32 10
  %466 = load ptr, ptr %465, align 8, !tbaa !87
  %467 = getelementptr inbounds %struct.machine_function, ptr %466, i64 0, i32 6
  %468 = load ptr, ptr %467, align 8, !tbaa !145
  %469 = load ptr, ptr getelementptr inbounds ([11 x ptr], ptr @global_rtl, i64 0, i64 2), align 16, !tbaa !5
  %470 = icmp eq ptr %468, %469
  br i1 %470, label %471, label %482

471:                                              ; preds = %457
  %472 = getelementptr inbounds %struct.machine_function, ptr %466, i64 0, i32 6, i32 1
  %473 = load i64, ptr %472, align 8, !tbaa !146
  %474 = add nsw i64 %473, %459
  store i64 %474, ptr %472, align 8, !tbaa !146
  %475 = sub nsw i64 0, %459
  %476 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef %475) #30
  %477 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 49, i32 noundef 16, ptr noundef %468, ptr noundef %476) #30
  %478 = load ptr, ptr getelementptr inbounds ([11 x ptr], ptr @global_rtl, i64 0, i64 2), align 16, !tbaa !5
  %479 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 23, i32 noundef 0, ptr noundef %478, ptr noundef %477) #30
  tail call void @add_reg_note(ptr noundef %463, i32 noundef 19, ptr noundef %479) #30
  %480 = load i32, ptr %463, align 8
  %481 = or i32 %480, 1073741824
  store i32 %481, ptr %463, align 8
  br label %482

482:                                              ; preds = %471, %457
  br i1 %458, label %502, label %483

483:                                              ; preds = %482
  %484 = load i8, ptr getelementptr inbounds (%struct.rtl_data, ptr @x_rtl, i64 0, i32 41), align 1, !tbaa !128
  %485 = icmp eq i8 %484, 0
  br i1 %485, label %495, label %486

486:                                              ; preds = %483
  %487 = load ptr, ptr getelementptr inbounds ([11 x ptr], ptr @global_rtl, i64 0, i64 4), align 16, !tbaa !5
  %488 = getelementptr inbounds %struct.ix86_frame, ptr %1, i64 0, i32 2
  %489 = load i32, ptr %488, align 8, !tbaa !121
  %490 = shl nsw i32 %489, 2
  %491 = sext i32 %490 to i64
  %492 = add i64 %314, %491
  %493 = sub i64 %459, %492
  %494 = tail call ptr @plus_constant(ptr noundef %487, i64 noundef %493) #30
  br label %498

495:                                              ; preds = %483
  %496 = load ptr, ptr getelementptr inbounds ([11 x ptr], ptr @global_rtl, i64 0, i64 2), align 16, !tbaa !5
  %497 = tail call ptr @plus_constant(ptr noundef %496, i64 noundef %459) #30
  br label %498

498:                                              ; preds = %495, %486
  %499 = phi ptr [ %494, %486 ], [ %497, %495 ]
  %500 = tail call ptr @gen_rtx_MEM(i32 noundef 16, ptr noundef %499) #30
  %501 = tail call ptr @emit_move_insn(ptr noundef %424, ptr noundef %500) #30
  br label %502

502:                                              ; preds = %482, %498, %411, %403
  %503 = phi i64 [ 0, %403 ], [ %360, %411 ], [ %459, %498 ], [ %459, %482 ]
  br i1 %325, label %568, label %504

504:                                              ; preds = %502
  %505 = load i32, ptr @target_flags, align 4, !tbaa !20
  %506 = and i32 %505, 16384
  %507 = icmp eq i32 %506, 0
  br i1 %507, label %508, label %513

508:                                              ; preds = %504
  %509 = and i32 %505, 524288
  %510 = icmp eq i32 %509, 0
  %511 = icmp slt i64 %503, -1
  %512 = select i1 %510, i1 true, i1 %511
  br i1 %512, label %568, label %513

513:                                              ; preds = %508, %504
  %514 = load i8, ptr getelementptr inbounds (%struct.rtl_data, ptr @x_rtl, i64 0, i32 41), align 1, !tbaa !128
  %515 = icmp eq i8 %514, 0
  br i1 %515, label %522, label %516

516:                                              ; preds = %513
  %517 = sub nsw i64 0, %321
  %518 = icmp eq i64 %314, %517
  %519 = load i8, ptr getelementptr inbounds (%struct.rtl_data, ptr @x_rtl, i64 0, i32 43), align 1
  %520 = icmp ne i8 %519, 0
  %521 = select i1 %518, i1 true, i1 %520
  br i1 %521, label %522, label %543

522:                                              ; preds = %516, %513
  %523 = load ptr, ptr getelementptr inbounds ([11 x ptr], ptr @global_rtl, i64 0, i64 2), align 16, !tbaa !5
  br label %524

524:                                              ; preds = %539, %522
  %525 = phi i64 [ 0, %522 ], [ %541, %539 ]
  %526 = phi i64 [ %322, %522 ], [ %540, %539 ]
  switch i64 %525, label %527 [
    i64 52, label %539
    i64 51, label %539
    i64 50, label %539
    i64 49, label %539
    i64 48, label %539
    i64 47, label %539
    i64 46, label %539
    i64 45, label %539
    i64 28, label %539
    i64 27, label %539
    i64 26, label %539
    i64 25, label %539
    i64 24, label %539
    i64 23, label %539
    i64 22, label %539
    i64 21, label %539
  ]

527:                                              ; preds = %524
  %528 = trunc i64 %525 to i32
  %529 = tail call fastcc i32 @ix86_save_reg(i32 noundef %528, i32 noundef 1)
  %530 = icmp eq i32 %529, 0
  br i1 %530, label %539, label %531

531:                                              ; preds = %527
  %532 = tail call ptr @gen_rtx_MEM(i32 noundef 16, ptr noundef %523) #30
  %533 = tail call ptr @adjust_address_1(ptr noundef %532, i32 noundef 16, i64 noundef %526, i32 noundef 1, i32 noundef 1) #30
  %534 = tail call ptr @gen_rtx_REG(i32 noundef 16, i32 noundef %528) #30
  %535 = tail call ptr @emit_move_insn(ptr noundef %533, ptr noundef %534) #30
  %536 = load i32, ptr %535, align 8
  %537 = or i32 %536, 1073741824
  store i32 %537, ptr %535, align 8
  %538 = add nsw i64 %526, 4
  br label %539

539:                                              ; preds = %531, %527, %524, %524, %524, %524, %524, %524, %524, %524, %524, %524, %524, %524, %524, %524, %524, %524
  %540 = phi i64 [ %526, %524 ], [ %538, %531 ], [ %526, %527 ], [ %526, %524 ], [ %526, %524 ], [ %526, %524 ], [ %526, %524 ], [ %526, %524 ], [ %526, %524 ], [ %526, %524 ], [ %526, %524 ], [ %526, %524 ], [ %526, %524 ], [ %526, %524 ], [ %526, %524 ], [ %526, %524 ], [ %526, %524 ], [ %526, %524 ]
  %541 = add nuw nsw i64 %525, 1
  %542 = icmp eq i64 %541, 53
  br i1 %542, label %568, label %524, !llvm.loop !151

543:                                              ; preds = %516
  %544 = load ptr, ptr getelementptr inbounds ([11 x ptr], ptr @global_rtl, i64 0, i64 4), align 16, !tbaa !5
  %545 = getelementptr inbounds %struct.ix86_frame, ptr %1, i64 0, i32 2
  %546 = load i32, ptr %545, align 8, !tbaa !121
  %547 = mul i32 %546, -4
  %548 = sext i32 %547 to i64
  br label %549

549:                                              ; preds = %564, %543
  %550 = phi i64 [ 0, %543 ], [ %566, %564 ]
  %551 = phi i64 [ %548, %543 ], [ %565, %564 ]
  switch i64 %550, label %552 [
    i64 52, label %564
    i64 51, label %564
    i64 50, label %564
    i64 49, label %564
    i64 48, label %564
    i64 47, label %564
    i64 46, label %564
    i64 45, label %564
    i64 28, label %564
    i64 27, label %564
    i64 26, label %564
    i64 25, label %564
    i64 24, label %564
    i64 23, label %564
    i64 22, label %564
    i64 21, label %564
  ]

552:                                              ; preds = %549
  %553 = trunc i64 %550 to i32
  %554 = tail call fastcc i32 @ix86_save_reg(i32 noundef %553, i32 noundef 1)
  %555 = icmp eq i32 %554, 0
  br i1 %555, label %564, label %556

556:                                              ; preds = %552
  %557 = tail call ptr @gen_rtx_MEM(i32 noundef 16, ptr noundef %544) #30
  %558 = tail call ptr @adjust_address_1(ptr noundef %557, i32 noundef 16, i64 noundef %551, i32 noundef 1, i32 noundef 1) #30
  %559 = tail call ptr @gen_rtx_REG(i32 noundef 16, i32 noundef %553) #30
  %560 = tail call ptr @emit_move_insn(ptr noundef %558, ptr noundef %559) #30
  %561 = load i32, ptr %560, align 8
  %562 = or i32 %561, 1073741824
  store i32 %562, ptr %560, align 8
  %563 = add nsw i64 %551, 4
  br label %564

564:                                              ; preds = %556, %552, %549, %549, %549, %549, %549, %549, %549, %549, %549, %549, %549, %549, %549, %549, %549, %549
  %565 = phi i64 [ %551, %549 ], [ %563, %556 ], [ %551, %552 ], [ %551, %549 ], [ %551, %549 ], [ %551, %549 ], [ %551, %549 ], [ %551, %549 ], [ %551, %549 ], [ %551, %549 ], [ %551, %549 ], [ %551, %549 ], [ %551, %549 ], [ %551, %549 ], [ %551, %549 ], [ %551, %549 ], [ %551, %549 ], [ %551, %549 ]
  %566 = add nuw nsw i64 %550, 1
  %567 = icmp eq i64 %566, 53
  br i1 %567, label %568, label %549, !llvm.loop !151

568:                                              ; preds = %564, %539, %508, %502
  %569 = load i8, ptr getelementptr inbounds (%struct.rtl_data, ptr @x_rtl, i64 0, i32 41), align 1, !tbaa !128
  %570 = icmp eq i8 %569, 0
  br i1 %570, label %577, label %571

571:                                              ; preds = %568
  %572 = sub nsw i64 0, %321
  %573 = icmp eq i64 %314, %572
  %574 = load i8, ptr getelementptr inbounds (%struct.rtl_data, ptr @x_rtl, i64 0, i32 43), align 1
  %575 = icmp ne i8 %574, 0
  %576 = select i1 %573, i1 true, i1 %575
  br i1 %576, label %577, label %579

577:                                              ; preds = %571, %568
  %578 = load ptr, ptr getelementptr inbounds ([11 x ptr], ptr @global_rtl, i64 0, i64 2), align 16, !tbaa !5
  tail call fastcc void @ix86_emit_save_sse_regs_using_mov(ptr noundef %578, i64 noundef %314)
  br label %587

579:                                              ; preds = %571
  %580 = load ptr, ptr getelementptr inbounds ([11 x ptr], ptr @global_rtl, i64 0, i64 4), align 16, !tbaa !5
  %581 = getelementptr inbounds %struct.ix86_frame, ptr %1, i64 0, i32 2
  %582 = load i32, ptr %581, align 8, !tbaa !121
  %583 = mul i32 %582, -4
  %584 = add i32 %317, %320
  %585 = sub i32 %583, %584
  %586 = sext i32 %585 to i64
  tail call fastcc void @ix86_emit_save_sse_regs_using_mov(ptr noundef %580, i64 noundef %586)
  br label %587

587:                                              ; preds = %579, %577
  %588 = load ptr, ptr @pic_offset_table_rtx, align 8, !tbaa !5
  %589 = icmp eq ptr %588, null
  br i1 %589, label %615, label %590

590:                                              ; preds = %587
  %591 = tail call zeroext i8 @df_regs_ever_live_p(i32 noundef 3) #30
  %592 = icmp ne i8 %591, 0
  %593 = load i8, ptr getelementptr inbounds (%struct.rtl_data, ptr @x_rtl, i64 0, i32 35), align 1
  %594 = icmp ne i8 %593, 0
  %595 = select i1 %592, i1 true, i1 %594
  br i1 %595, label %596, label %615

596:                                              ; preds = %590
  %597 = tail call fastcc i32 @ix86_select_alt_pic_regnum()
  %598 = icmp eq i32 %597, -1
  %599 = load ptr, ptr @pic_offset_table_rtx, align 8, !tbaa !5
  br i1 %598, label %605, label %600

600:                                              ; preds = %596
  %601 = getelementptr i8, ptr %599, i64 8
  %602 = load i32, ptr %601, align 8, !tbaa !16
  tail call void @df_ref_change_reg_with_loc(i32 noundef %602, i32 noundef %597, ptr noundef %599) #30
  %603 = load ptr, ptr @pic_offset_table_rtx, align 8, !tbaa !5
  %604 = getelementptr inbounds %struct.rtx_def, ptr %603, i64 0, i32 1
  store i32 %597, ptr %604, align 8, !tbaa !16
  br label %605

605:                                              ; preds = %596, %600
  %606 = phi ptr [ %599, %596 ], [ %603, %600 ]
  %607 = tail call ptr @gen_set_got(ptr noundef %606) #30
  %608 = tail call ptr @emit_insn(ptr noundef %607) #30
  %609 = load i8, ptr getelementptr inbounds (%struct.rtl_data, ptr @x_rtl, i64 0, i32 35), align 1, !tbaa !155
  %610 = icmp eq i8 %609, 0
  br i1 %610, label %615, label %611

611:                                              ; preds = %605
  %612 = load ptr, ptr @pic_offset_table_rtx, align 8, !tbaa !5
  %613 = tail call ptr @gen_prologue_use(ptr noundef %612) #30
  %614 = tail call ptr @emit_insn(ptr noundef %613) #30
  br label %615

615:                                              ; preds = %590, %587, %611, %605
  %616 = load ptr, ptr getelementptr inbounds (%struct.rtl_data, ptr @x_rtl, i64 0, i32 16), align 8, !tbaa !144
  %617 = icmp eq ptr %616, null
  %618 = load i8, ptr getelementptr inbounds (%struct.rtl_data, ptr @x_rtl, i64 0, i32 43), align 1
  %619 = icmp ne i8 %618, 0
  %620 = select i1 %617, i1 true, i1 %619
  br i1 %620, label %635, label %621

621:                                              ; preds = %615
  %622 = load ptr, ptr @cfun, align 8, !tbaa !5
  %623 = getelementptr inbounds %struct.function, ptr %622, i64 0, i32 10
  %624 = load ptr, ptr %623, align 8, !tbaa !87
  %625 = getelementptr inbounds %struct.machine_function, ptr %624, i64 0, i32 8
  %626 = load i8, ptr %625, align 4
  %627 = and i8 %626, 16
  %628 = icmp eq i8 %627, 0
  %629 = select i1 %628, i64 8, i64 12
  %630 = load ptr, ptr getelementptr inbounds ([11 x ptr], ptr @global_rtl, i64 0, i64 4), align 16, !tbaa !5
  %631 = tail call ptr @plus_constant(ptr noundef %630, i64 noundef %629) #30
  %632 = load ptr, ptr getelementptr inbounds (%struct.rtl_data, ptr @x_rtl, i64 0, i32 16), align 8, !tbaa !144
  %633 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 23, i32 noundef 0, ptr noundef %632, ptr noundef %631) #30
  %634 = tail call ptr @emit_insn(ptr noundef %633) #30
  br label %635

635:                                              ; preds = %621, %615
  %636 = load i8, ptr getelementptr inbounds (%struct.rtl_data, ptr @x_rtl, i64 0, i32 41), align 1, !tbaa !128
  %637 = icmp ne i8 %636, 0
  %638 = getelementptr inbounds %struct.ix86_frame, ptr %1, i64 0, i32 8
  %639 = load i32, ptr %638, align 8
  %640 = icmp ne i32 %639, 0
  %641 = select i1 %637, i1 %640, i1 false
  br i1 %641, label %642, label %645

642:                                              ; preds = %635
  %643 = tail call ptr @gen_memory_blockage() #30
  %644 = tail call ptr @emit_insn(ptr noundef %643) #30
  br label %645

645:                                              ; preds = %642, %635
  %646 = load i32, ptr @target_flags, align 4, !tbaa !20
  %647 = and i32 %646, 16
  %648 = icmp eq i32 %647, 0
  br i1 %648, label %660, label %649

649:                                              ; preds = %645
  %650 = load ptr, ptr @cfun, align 8, !tbaa !5
  %651 = getelementptr inbounds %struct.function, ptr %650, i64 0, i32 10
  %652 = load ptr, ptr %651, align 8, !tbaa !87
  %653 = getelementptr inbounds %struct.machine_function, ptr %652, i64 0, i32 8
  %654 = load i8, ptr %653, align 4
  %655 = and i8 %654, 2
  %656 = icmp eq i8 %655, 0
  br i1 %656, label %660, label %657

657:                                              ; preds = %649
  %658 = tail call ptr @gen_cld() #30
  %659 = tail call ptr @emit_insn(ptr noundef %658) #30
  br label %660

660:                                              ; preds = %657, %649, %645
  call void @llvm.lifetime.end.p0(i64 88, ptr nonnull %1) #30
  ret void
}

declare ptr @gen_vswapmov(ptr noundef, ptr noundef) local_unnamed_addr #3

declare ptr @gen_rtx_REG(i32 noundef, i32 noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define internal ptr @ix86_static_chain(ptr noundef %0, i8 noundef zeroext %1) #9 {
  %3 = getelementptr inbounds %struct.tree_function_decl, ptr %0, i64 0, i32 5
  %4 = load i32, ptr %3, align 8
  %5 = and i32 %4, 4194304
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %36, label %7

7:                                                ; preds = %2
  %8 = getelementptr inbounds %struct.tree_common, ptr %0, i64 0, i32 2
  %9 = load ptr, ptr %8, align 8, !tbaa !16
  %10 = getelementptr inbounds %struct.tree_type, ptr %9, i64 0, i32 4
  %11 = load ptr, ptr %10, align 8, !tbaa !16
  %12 = tail call ptr @lookup_attribute(ptr noundef nonnull @.str.128, ptr noundef %11) #30
  %13 = icmp eq ptr %12, null
  br i1 %13, label %14, label %33

14:                                               ; preds = %7
  %15 = tail call fastcc i32 @ix86_function_regparm(ptr noundef nonnull %9, ptr noundef nonnull %0)
  %16 = icmp eq i32 %15, 3
  br i1 %16, label %17, label %33

17:                                               ; preds = %14
  %18 = icmp eq i8 %1, 0
  br i1 %18, label %33, label %19

19:                                               ; preds = %17
  %20 = load ptr, ptr @current_function_decl, align 8, !tbaa !5
  %21 = icmp eq ptr %20, %0
  br i1 %21, label %22, label %29

22:                                               ; preds = %19
  %23 = load ptr, ptr @cfun, align 8, !tbaa !5
  %24 = getelementptr inbounds %struct.function, ptr %23, i64 0, i32 10
  %25 = load ptr, ptr %24, align 8, !tbaa !87
  %26 = getelementptr inbounds %struct.machine_function, ptr %25, i64 0, i32 8
  %27 = load i8, ptr %26, align 4
  %28 = or i8 %27, 16
  store i8 %28, ptr %26, align 4
  br label %29

29:                                               ; preds = %19, %22
  %30 = load ptr, ptr getelementptr inbounds ([11 x ptr], ptr @global_rtl, i64 0, i64 5), align 8, !tbaa !5
  %31 = tail call ptr @plus_constant(ptr noundef %30, i64 noundef -8) #30
  %32 = tail call ptr @gen_frame_mem(i32 noundef 16, ptr noundef %31) #30
  br label %36

33:                                               ; preds = %17, %7, %14
  %34 = phi i32 [ 4, %17 ], [ 0, %7 ], [ 2, %14 ]
  %35 = tail call ptr @gen_rtx_REG(i32 noundef 16, i32 noundef %34) #30
  br label %36

36:                                               ; preds = %29, %2, %33
  %37 = phi ptr [ %35, %33 ], [ %32, %29 ], [ null, %2 ]
  ret ptr %37
}

declare ptr @gen_blockage() local_unnamed_addr #3

declare ptr @plus_constant(ptr noundef, i64 noundef) local_unnamed_addr #3

declare void @add_reg_note(ptr noundef, i32 noundef, ptr noundef) local_unnamed_addr #3

declare ptr @gen_frame_mem(i32 noundef, ptr noundef) local_unnamed_addr #3

declare ptr @emit_move_insn(ptr noundef, ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc void @pro_epilogue_adjust_stack(ptr noundef %0, ptr noundef %1, ptr noundef %2, i32 noundef %3, i8 noundef zeroext %4) unnamed_addr #9 {
  %6 = tail call ptr @gen_pro_epilogue_adjust_stack_1(ptr noundef %0, ptr noundef %1, ptr noundef %2) #30
  %7 = tail call ptr @emit_insn(ptr noundef %6) #30
  %8 = icmp sgt i32 %3, -1
  br i1 %8, label %9, label %23

9:                                                ; preds = %5
  %10 = load ptr, ptr @queued_cfa_restores, align 8, !tbaa !5
  %11 = icmp eq ptr %10, null
  br i1 %11, label %23, label %12

12:                                               ; preds = %9, %12
  %13 = phi ptr [ %15, %12 ], [ %10, %9 ]
  %14 = getelementptr inbounds %struct.rtx_def, ptr %13, i64 0, i32 1, i32 0, i32 0, i64 1
  %15 = load ptr, ptr %14, align 8, !tbaa !16
  %16 = icmp eq ptr %15, null
  br i1 %16, label %17, label %12, !llvm.loop !156

17:                                               ; preds = %12
  %18 = getelementptr inbounds %struct.rtx_def, ptr %13, i64 0, i32 1, i32 0, i32 0, i64 1
  %19 = getelementptr inbounds %struct.rtx_def, ptr %7, i64 1, i32 1, i32 0, i32 0, i64 1
  %20 = load ptr, ptr %19, align 8, !tbaa !16
  store ptr %20, ptr %18, align 8, !tbaa !16
  store ptr %10, ptr %19, align 8, !tbaa !16
  store ptr null, ptr @queued_cfa_restores, align 8, !tbaa !5
  %21 = load i32, ptr %7, align 8
  %22 = or i32 %21, 1073741824
  store i32 %22, ptr %7, align 8
  br label %23

23:                                               ; preds = %17, %9, %5
  %24 = icmp eq i8 %4, 0
  br i1 %24, label %46, label %25

25:                                               ; preds = %23
  %26 = load ptr, ptr @cfun, align 8, !tbaa !5
  %27 = getelementptr inbounds %struct.function, ptr %26, i64 0, i32 10
  %28 = load ptr, ptr %27, align 8, !tbaa !87
  %29 = getelementptr inbounds %struct.machine_function, ptr %28, i64 0, i32 6
  %30 = load ptr, ptr %29, align 8, !tbaa !145
  %31 = icmp eq ptr %30, %1
  br i1 %31, label %36, label %32

32:                                               ; preds = %25
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 8262, ptr noundef nonnull @.str.131) #30
  %33 = load ptr, ptr @cfun, align 8, !tbaa !5
  %34 = getelementptr inbounds %struct.function, ptr %33, i64 0, i32 10
  %35 = load ptr, ptr %34, align 8, !tbaa !87
  br label %36

36:                                               ; preds = %25, %32
  %37 = phi ptr [ %28, %25 ], [ %35, %32 ]
  %38 = getelementptr inbounds %struct.rtx_def, ptr %2, i64 0, i32 1
  %39 = load i64, ptr %38, align 8, !tbaa !16
  %40 = getelementptr inbounds %struct.machine_function, ptr %37, i64 0, i32 6, i32 1
  %41 = load i64, ptr %40, align 8, !tbaa !146
  %42 = add nsw i64 %41, %39
  store i64 %42, ptr %40, align 8, !tbaa !146
  %43 = getelementptr inbounds %struct.machine_function, ptr %37, i64 0, i32 6
  store ptr %0, ptr %43, align 8, !tbaa !145
  %44 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 49, i32 noundef 16, ptr noundef %1, ptr noundef %2) #30
  %45 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 23, i32 noundef 0, ptr noundef %0, ptr noundef %44) #30
  tail call void @add_reg_note(ptr noundef %7, i32 noundef 19, ptr noundef %45) #30
  br label %48

46:                                               ; preds = %23
  %47 = icmp slt i32 %3, 0
  br i1 %47, label %48, label %51

48:                                               ; preds = %46, %36
  %49 = load i32, ptr %7, align 8
  %50 = or i32 %49, 1073741824
  store i32 %50, ptr %7, align 8
  br label %51

51:                                               ; preds = %48, %46
  ret void
}

declare ptr @gen_allocate_stack_worker_32(ptr noundef, ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc void @ix86_emit_save_sse_regs_using_mov(ptr noundef %0, i64 noundef %1) unnamed_addr #9 {
  br label %3

3:                                                ; preds = %2, %18
  %4 = phi i64 [ 0, %2 ], [ %20, %18 ]
  %5 = phi i64 [ %1, %2 ], [ %19, %18 ]
  switch i64 %4, label %18 [
    i64 52, label %6
    i64 51, label %6
    i64 50, label %6
    i64 49, label %6
    i64 48, label %6
    i64 47, label %6
    i64 46, label %6
    i64 45, label %6
    i64 28, label %6
    i64 27, label %6
    i64 26, label %6
    i64 25, label %6
    i64 24, label %6
    i64 23, label %6
    i64 22, label %6
    i64 21, label %6
  ]

6:                                                ; preds = %3, %3, %3, %3, %3, %3, %3, %3, %3, %3, %3, %3, %3, %3, %3, %3
  %7 = trunc i64 %4 to i32
  %8 = tail call fastcc i32 @ix86_save_reg(i32 noundef %7, i32 noundef 1)
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %18, label %10

10:                                               ; preds = %6
  %11 = tail call ptr @gen_rtx_MEM(i32 noundef 18, ptr noundef %0) #30
  %12 = tail call ptr @adjust_address_1(ptr noundef %11, i32 noundef 18, i64 noundef %5, i32 noundef 1, i32 noundef 1) #30
  tail call void @set_mem_align(ptr noundef %12, i32 noundef 128) #30
  %13 = tail call ptr @gen_rtx_REG(i32 noundef 18, i32 noundef %7) #30
  %14 = tail call ptr @emit_move_insn(ptr noundef %12, ptr noundef %13) #30
  %15 = load i32, ptr %14, align 8
  %16 = or i32 %15, 1073741824
  store i32 %16, ptr %14, align 8
  %17 = add nsw i64 %5, 16
  br label %18

18:                                               ; preds = %3, %6, %10
  %19 = phi i64 [ %17, %10 ], [ %5, %6 ], [ %5, %3 ]
  %20 = add nuw nsw i64 %4, 1
  %21 = icmp eq i64 %20, 53
  br i1 %21, label %22, label %3, !llvm.loop !157

22:                                               ; preds = %18
  ret void
}

declare zeroext i8 @df_regs_ever_live_p(i32 noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc i32 @ix86_select_alt_pic_regnum() unnamed_addr #9 {
  %1 = load i32, ptr @current_function_is_leaf, align 4, !tbaa !20
  %2 = icmp eq i32 %1, 0
  %3 = load i8, ptr getelementptr inbounds (%struct.rtl_data, ptr @x_rtl, i64 0, i32 35), align 1
  %4 = icmp ne i8 %3, 0
  %5 = select i1 %2, i1 true, i1 %4
  br i1 %5, label %40, label %6

6:                                                ; preds = %0
  %7 = load ptr, ptr @cfun, align 8, !tbaa !5
  %8 = getelementptr inbounds %struct.function, ptr %7, i64 0, i32 10
  %9 = load ptr, ptr %8, align 8, !tbaa !87
  %10 = getelementptr inbounds %struct.machine_function, ptr %9, i64 0, i32 8
  %11 = load i8, ptr %10, align 4
  %12 = and i8 %11, 8
  %13 = icmp eq i8 %12, 0
  br i1 %13, label %17, label %14

14:                                               ; preds = %6
  %15 = tail call zeroext i8 @df_regs_ever_live_p(i32 noundef 7) #30
  %16 = icmp eq i8 %15, 0
  br i1 %16, label %17, label %40

17:                                               ; preds = %14, %6
  %18 = load ptr, ptr getelementptr inbounds (%struct.rtl_data, ptr @x_rtl, i64 0, i32 16), align 8, !tbaa !144
  %19 = icmp eq ptr %18, null
  br i1 %19, label %24, label %20

20:                                               ; preds = %17
  %21 = getelementptr i8, ptr %18, i64 8
  %22 = load i32, ptr %21, align 8, !tbaa !16
  %23 = icmp eq i32 %22, 2
  br i1 %23, label %30, label %24

24:                                               ; preds = %17, %20
  %25 = phi i32 [ %22, %20 ], [ -1, %17 ]
  %26 = tail call zeroext i8 @df_regs_ever_live_p(i32 noundef 2) #30
  %27 = icmp eq i8 %26, 0
  br i1 %27, label %40, label %28

28:                                               ; preds = %24
  %29 = icmp eq i32 %25, 1
  br i1 %29, label %36, label %30

30:                                               ; preds = %20, %28
  %31 = phi i32 [ %25, %28 ], [ 2, %20 ]
  %32 = tail call zeroext i8 @df_regs_ever_live_p(i32 noundef 1) #30
  %33 = icmp eq i8 %32, 0
  br i1 %33, label %40, label %34

34:                                               ; preds = %30
  %35 = icmp eq i32 %31, 0
  br i1 %35, label %39, label %36

36:                                               ; preds = %28, %34
  %37 = tail call zeroext i8 @df_regs_ever_live_p(i32 noundef 0) #30
  %38 = icmp eq i8 %37, 0
  br i1 %38, label %40, label %39

39:                                               ; preds = %36, %34
  br label %40

40:                                               ; preds = %24, %30, %36, %39, %0, %14
  %41 = phi i32 [ -1, %14 ], [ -1, %0 ], [ 2, %24 ], [ 1, %30 ], [ 0, %36 ], [ -1, %39 ]
  ret i32 %41
}

declare void @df_ref_change_reg_with_loc(i32 noundef, i32 noundef, ptr noundef) local_unnamed_addr #3

declare ptr @gen_set_got(ptr noundef) local_unnamed_addr #3

declare ptr @gen_prologue_use(ptr noundef) local_unnamed_addr #3

declare ptr @gen_memory_blockage() local_unnamed_addr #3

declare ptr @gen_cld() local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define dso_local void @ix86_expand_epilogue(i32 noundef %0) local_unnamed_addr #9 {
  %2 = alloca %struct.ix86_frame, align 8
  %3 = alloca %struct.machine_cfa_state, align 8
  call void @llvm.lifetime.start.p0(i64 88, ptr nonnull %2) #30
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %3)
  %4 = load ptr, ptr @cfun, align 8, !tbaa !5
  %5 = getelementptr inbounds %struct.function, ptr %4, i64 0, i32 10
  %6 = load ptr, ptr %5, align 8, !tbaa !87
  %7 = getelementptr inbounds %struct.machine_function, ptr %6, i64 0, i32 6
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %3, ptr noundef nonnull align 8 dereferenceable(16) %7, i64 16, i1 false), !tbaa.struct !158
  %8 = load i32, ptr getelementptr inbounds (%struct.rtl_data, ptr @x_rtl, i64 0, i32 24), align 4
  %9 = load i32, ptr @ix86_incoming_stack_boundary, align 4
  %10 = tail call i32 @llvm.umax.i32(i32 %8, i32 %9)
  %11 = load i32, ptr @current_function_is_leaf, align 4, !tbaa !20
  %12 = icmp eq i32 %11, 0
  %13 = load i32, ptr getelementptr inbounds (%struct.rtl_data, ptr @x_rtl, i64 0, i32 25), align 8
  %14 = load i32, ptr getelementptr inbounds (%struct.rtl_data, ptr @x_rtl, i64 0, i32 22), align 4
  %15 = select i1 %12, i32 %14, i32 %13
  %16 = icmp ult i32 %10, %15
  %17 = load i8, ptr getelementptr inbounds (%struct.rtl_data, ptr @x_rtl, i64 0, i32 47), align 1, !tbaa !143
  %18 = icmp eq i8 %17, 0
  br i1 %18, label %24, label %19

19:                                               ; preds = %1
  %20 = load i8, ptr getelementptr inbounds (%struct.rtl_data, ptr @x_rtl, i64 0, i32 43), align 1, !tbaa !130
  %21 = zext i1 %16 to i8
  %22 = icmp eq i8 %20, %21
  br i1 %22, label %26, label %23

23:                                               ; preds = %19
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 8447, ptr noundef nonnull @.str.131) #30
  br label %26

24:                                               ; preds = %1
  %25 = zext i1 %16 to i8
  store i8 %25, ptr getelementptr inbounds (%struct.rtl_data, ptr @x_rtl, i64 0, i32 43), align 1, !tbaa !130
  store i8 1, ptr getelementptr inbounds (%struct.rtl_data, ptr @x_rtl, i64 0, i32 47), align 1, !tbaa !143
  br label %26

26:                                               ; preds = %19, %23, %24
  %27 = load i8, ptr getelementptr inbounds (%struct.rtl_data, ptr @x_rtl, i64 0, i32 41), align 1, !tbaa !128
  %28 = icmp eq i8 %27, 0
  %29 = load i32, ptr @current_function_sp_is_unchanging, align 4
  %30 = icmp ne i32 %29, 0
  %31 = select i1 %28, i1 true, i1 %30
  br i1 %31, label %38, label %32

32:                                               ; preds = %26
  %33 = load i8, ptr getelementptr inbounds (%struct.rtl_data, ptr @x_rtl, i64 0, i32 43), align 1, !tbaa !130
  %34 = icmp ne i8 %33, 0
  %35 = load i8, ptr getelementptr inbounds (%struct.rtl_data, ptr @x_rtl, i64 0, i32 45), align 1
  %36 = icmp eq i8 %35, 0
  %37 = select i1 %34, i1 %36, i1 false
  br label %38

38:                                               ; preds = %32, %26
  %39 = phi i1 [ true, %26 ], [ %37, %32 ]
  call fastcc void @ix86_compute_frame_layout(ptr noundef nonnull %2)
  %40 = load i8, ptr getelementptr inbounds (%struct.rtl_data, ptr @x_rtl, i64 0, i32 41), align 1, !tbaa !128
  %41 = icmp ne i8 %40, 0
  %42 = getelementptr inbounds %struct.ix86_frame, ptr %2, i64 0, i32 8
  %43 = load i32, ptr %42, align 8
  %44 = icmp ne i32 %43, 0
  %45 = select i1 %41, i1 %44, i1 false
  br i1 %45, label %46, label %49

46:                                               ; preds = %38
  %47 = tail call ptr @gen_memory_blockage() #30
  %48 = tail call ptr @emit_insn(ptr noundef %47) #30
  br label %49

49:                                               ; preds = %46, %38
  %50 = load ptr, ptr getelementptr inbounds (%struct.rtl_data, ptr @x_rtl, i64 0, i32 16), align 8, !tbaa !144
  %51 = icmp eq ptr %50, null
  %52 = load i8, ptr getelementptr inbounds (%struct.rtl_data, ptr @x_rtl, i64 0, i32 43), align 1
  %53 = icmp eq i8 %52, 0
  %54 = select i1 %51, i1 true, i1 %53
  br i1 %54, label %63, label %55

55:                                               ; preds = %49
  %56 = load ptr, ptr @cfun, align 8, !tbaa !5
  %57 = getelementptr inbounds %struct.function, ptr %56, i64 0, i32 10
  %58 = load ptr, ptr %57, align 8, !tbaa !87
  %59 = getelementptr inbounds %struct.machine_function, ptr %58, i64 0, i32 6
  %60 = load ptr, ptr %59, align 8, !tbaa !145
  %61 = icmp eq ptr %60, %50
  br i1 %61, label %63, label %62

62:                                               ; preds = %55
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 8982, ptr noundef nonnull @.str.131) #30
  br label %63

63:                                               ; preds = %49, %55, %62
  %64 = getelementptr inbounds %struct.ix86_frame, ptr %2, i64 0, i32 2
  %65 = load i32, ptr %64, align 8, !tbaa !121
  %66 = sext i32 %65 to i64
  %67 = load i8, ptr getelementptr inbounds (%struct.rtl_data, ptr @x_rtl, i64 0, i32 29), align 1
  %68 = icmp ne i8 %67, 0
  %69 = icmp ne i32 %0, 2
  %70 = and i1 %69, %68
  %71 = add nsw i64 %66, -2
  %72 = select i1 %70, i64 %71, i64 %66
  %73 = mul nsw i64 %72, -4
  %74 = getelementptr inbounds %struct.ix86_frame, ptr %2, i64 0, i32 1
  %75 = load i32, ptr %74, align 4
  %76 = shl nsw i32 %75, 4
  %77 = load i32, ptr %2, align 8
  %78 = add nsw i32 %76, %77
  %79 = sext i32 %78 to i64
  %80 = sub nsw i64 %73, %79
  br i1 %54, label %87, label %81

81:                                               ; preds = %63
  %82 = load i32, ptr getelementptr inbounds (%struct.rtl_data, ptr @x_rtl, i64 0, i32 22), align 4, !tbaa !126
  %83 = lshr i32 %82, 3
  %84 = add nuw nsw i32 %83, 4
  %85 = zext i32 %84 to i64
  %86 = sub nsw i64 %80, %85
  br label %99

87:                                               ; preds = %63
  %88 = load i8, ptr getelementptr inbounds (%struct.rtl_data, ptr @x_rtl, i64 0, i32 43), align 1, !tbaa !130
  %89 = icmp eq i8 %88, 0
  %90 = load i8, ptr getelementptr inbounds (%struct.rtl_data, ptr @x_rtl, i64 0, i32 45), align 1
  %91 = icmp ne i8 %90, 0
  %92 = select i1 %89, i1 true, i1 %91
  br i1 %92, label %99, label %93

93:                                               ; preds = %87
  %94 = load i32, ptr getelementptr inbounds (%struct.rtl_data, ptr @x_rtl, i64 0, i32 22), align 4, !tbaa !126
  %95 = lshr i32 %94, 3
  %96 = add nsw i32 %95, -4
  %97 = zext i32 %96 to i64
  %98 = sub nsw i64 %80, %97
  br label %99

99:                                               ; preds = %87, %93, %81
  %100 = phi i64 [ %86, %81 ], [ %80, %87 ], [ %98, %93 ]
  %101 = load ptr, ptr @cfun, align 8, !tbaa !5
  %102 = getelementptr inbounds %struct.function, ptr %101, i64 0, i32 10
  %103 = load ptr, ptr %102, align 8, !tbaa !87
  %104 = getelementptr inbounds %struct.machine_function, ptr %103, i64 0, i32 8
  %105 = load i8, ptr %104, align 4
  %106 = and i8 %105, 16
  %107 = icmp eq i8 %106, 0
  %108 = add nsw i64 %100, -4
  %109 = select i1 %107, i64 %100, i64 %108
  %110 = load i8, ptr getelementptr inbounds (%struct.rtl_data, ptr @x_rtl, i64 0, i32 41), align 1, !tbaa !128
  %111 = icmp eq i8 %110, 0
  %112 = add nsw i64 %109, -4
  %113 = select i1 %111, i64 %109, i64 %112
  %114 = add nsw i32 %75, %65
  %115 = icmp sgt i32 %114, 1
  %116 = select i1 %39, i1 true, i1 %115
  br i1 %116, label %117, label %149

117:                                              ; preds = %99
  %118 = load i8, ptr getelementptr inbounds ([62 x i8], ptr @ix86_tune_features, i64 0, i64 39), align 1, !tbaa !16
  %119 = icmp eq i8 %118, 0
  %120 = and i8 %105, 4
  %121 = icmp eq i8 %120, 0
  %122 = select i1 %119, i1 true, i1 %121
  br i1 %122, label %130, label %123

123:                                              ; preds = %117
  br i1 %115, label %149, label %124

124:                                              ; preds = %123
  %125 = getelementptr inbounds %struct.ix86_frame, ptr %2, i64 0, i32 9
  %126 = load i64, ptr %125, align 8, !tbaa !119
  %127 = sext i32 %77 to i64
  %128 = sub nsw i64 0, %127
  %129 = icmp eq i64 %126, %128
  br i1 %129, label %130, label %149

130:                                              ; preds = %124, %117
  br i1 %111, label %147, label %131

131:                                              ; preds = %130
  %132 = sub i32 0, %75
  %133 = icmp eq i32 %65, %132
  br i1 %133, label %134, label %140

134:                                              ; preds = %131
  %135 = getelementptr inbounds %struct.ix86_frame, ptr %2, i64 0, i32 9
  %136 = load i64, ptr %135, align 8, !tbaa !119
  %137 = sext i32 %77 to i64
  %138 = sub nsw i64 0, %137
  %139 = icmp eq i64 %136, %138
  br i1 %139, label %140, label %150

140:                                              ; preds = %134, %131
  %141 = load i8, ptr @ix86_tune_features, align 16
  %142 = icmp eq i8 %141, 0
  %143 = select i1 %142, i1 true, i1 %121
  br i1 %143, label %147, label %144

144:                                              ; preds = %140
  %145 = icmp eq i32 %114, 1
  %146 = select i1 %145, i1 true, i1 %68
  br i1 %146, label %150, label %345

147:                                              ; preds = %130, %140
  %148 = icmp eq i8 %67, 0
  br i1 %148, label %344, label %149

149:                                              ; preds = %99, %147, %124, %123
  br i1 %111, label %163, label %150

150:                                              ; preds = %134, %144, %149
  br i1 %39, label %151, label %157

151:                                              ; preds = %150
  %152 = getelementptr inbounds %struct.ix86_frame, ptr %2, i64 0, i32 9
  %153 = load i64, ptr %152, align 8, !tbaa !119
  %154 = sext i32 %77 to i64
  %155 = sub nsw i64 0, %154
  %156 = icmp eq i64 %153, %155
  br i1 %156, label %163, label %157

157:                                              ; preds = %151, %150
  %158 = load i8, ptr getelementptr inbounds (%struct.rtl_data, ptr @x_rtl, i64 0, i32 43), align 1, !tbaa !130
  %159 = icmp eq i8 %158, 0
  %160 = load i8, ptr getelementptr inbounds (%struct.rtl_data, ptr @x_rtl, i64 0, i32 45), align 1
  %161 = icmp ne i8 %160, 0
  %162 = select i1 %159, i1 true, i1 %161
  br i1 %162, label %175, label %163

163:                                              ; preds = %157, %151, %149
  %164 = load ptr, ptr getelementptr inbounds ([11 x ptr], ptr @global_rtl, i64 0, i64 2), align 16, !tbaa !5
  %165 = getelementptr inbounds %struct.ix86_frame, ptr %2, i64 0, i32 9
  %166 = load i64, ptr %165, align 8, !tbaa !119
  %167 = icmp eq i32 %0, 2
  %168 = zext i1 %167 to i32
  tail call fastcc void @ix86_emit_restore_sse_regs_using_mov(ptr noundef %164, i64 noundef %166, i64 noundef %113, i32 noundef %168)
  %169 = load ptr, ptr getelementptr inbounds ([11 x ptr], ptr @global_rtl, i64 0, i64 2), align 16, !tbaa !5
  %170 = sext i32 %76 to i64
  %171 = sext i32 %77 to i64
  %172 = add nsw i64 %171, %170
  %173 = add i64 %172, %166
  %174 = add nsw i64 %172, %113
  tail call fastcc void @ix86_emit_restore_regs_using_mov(ptr noundef %169, i64 noundef %173, i64 noundef %174, i32 noundef %168)
  br label %185

175:                                              ; preds = %157
  %176 = load ptr, ptr getelementptr inbounds ([11 x ptr], ptr @global_rtl, i64 0, i64 4), align 16, !tbaa !5
  %177 = icmp eq i32 %0, 2
  %178 = zext i1 %177 to i32
  tail call fastcc void @ix86_emit_restore_sse_regs_using_mov(ptr noundef %176, i64 noundef %80, i64 noundef %112, i32 noundef %178)
  %179 = load ptr, ptr getelementptr inbounds ([11 x ptr], ptr @global_rtl, i64 0, i64 4), align 16, !tbaa !5
  %180 = sext i32 %76 to i64
  %181 = sext i32 %77 to i64
  %182 = add nsw i64 %181, %180
  %183 = add nsw i64 %182, %80
  %184 = add nsw i64 %182, %112
  tail call fastcc void @ix86_emit_restore_regs_using_mov(ptr noundef %179, i64 noundef %183, i64 noundef %184, i32 noundef %178)
  br label %185

185:                                              ; preds = %175, %163
  %186 = sub nsw i64 %113, %80
  %187 = icmp eq i32 %0, 2
  br i1 %187, label %188, label %306

188:                                              ; preds = %185
  %189 = tail call ptr @gen_rtx_REG(i32 noundef 16, i32 noundef 2) #30
  %190 = load i8, ptr getelementptr inbounds (%struct.rtl_data, ptr @x_rtl, i64 0, i32 43), align 1, !tbaa !130
  %191 = icmp eq i8 %190, 0
  br i1 %191, label %193, label %192

192:                                              ; preds = %188
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 9077, ptr noundef nonnull @.str.131) #30
  br label %193

193:                                              ; preds = %188, %192
  %194 = load ptr, ptr @cfun, align 8, !tbaa !5
  %195 = getelementptr inbounds %struct.function, ptr %194, i64 0, i32 10
  %196 = load ptr, ptr %195, align 8, !tbaa !87
  %197 = getelementptr inbounds %struct.machine_function, ptr %196, i64 0, i32 8
  %198 = load i8, ptr %197, align 4
  %199 = and i8 %198, 16
  %200 = icmp eq i8 %199, 0
  br i1 %200, label %202, label %201

201:                                              ; preds = %193
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 9079, ptr noundef nonnull @.str.131) #30
  br label %202

202:                                              ; preds = %193, %201
  %203 = load i8, ptr getelementptr inbounds (%struct.rtl_data, ptr @x_rtl, i64 0, i32 41), align 1, !tbaa !128
  %204 = icmp eq i8 %203, 0
  br i1 %204, label %255, label %205

205:                                              ; preds = %202
  %206 = load ptr, ptr getelementptr inbounds ([11 x ptr], ptr @global_rtl, i64 0, i64 4), align 16, !tbaa !5
  %207 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 49, i32 noundef 16, ptr noundef %206, ptr noundef %189) #30
  %208 = tail call ptr @plus_constant(ptr noundef %207, i64 noundef 4) #30
  %209 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 23, i32 noundef 0, ptr noundef %189, ptr noundef %208) #30
  %210 = tail call ptr @emit_insn(ptr noundef %209) #30
  %211 = load ptr, ptr getelementptr inbounds ([11 x ptr], ptr @global_rtl, i64 0, i64 4), align 16, !tbaa !5
  %212 = tail call ptr @gen_rtx_MEM(i32 noundef 16, ptr noundef %211) #30
  %213 = load ptr, ptr getelementptr inbounds ([11 x ptr], ptr @global_rtl, i64 0, i64 4), align 16, !tbaa !5
  %214 = tail call ptr @emit_move_insn(ptr noundef %213, ptr noundef %212) #30
  %215 = tail call ptr @plus_constant(ptr noundef %189, i64 noundef 4) #30
  tail call void @add_reg_note(ptr noundef %214, i32 noundef 18, ptr noundef %215) #30
  %216 = load ptr, ptr @queued_cfa_restores, align 8, !tbaa !5
  %217 = icmp eq ptr %216, null
  br i1 %217, label %229, label %218

218:                                              ; preds = %205, %218
  %219 = phi ptr [ %221, %218 ], [ %216, %205 ]
  %220 = getelementptr inbounds %struct.rtx_def, ptr %219, i64 0, i32 1, i32 0, i32 0, i64 1
  %221 = load ptr, ptr %220, align 8, !tbaa !16
  %222 = icmp eq ptr %221, null
  br i1 %222, label %223, label %218, !llvm.loop !156

223:                                              ; preds = %218
  %224 = getelementptr inbounds %struct.rtx_def, ptr %219, i64 0, i32 1, i32 0, i32 0, i64 1
  %225 = getelementptr inbounds %struct.rtx_def, ptr %214, i64 1, i32 1, i32 0, i32 0, i64 1
  %226 = load ptr, ptr %225, align 8, !tbaa !16
  store ptr %226, ptr %224, align 8, !tbaa !16
  store ptr %216, ptr %225, align 8, !tbaa !16
  store ptr null, ptr @queued_cfa_restores, align 8, !tbaa !5
  %227 = load i32, ptr %214, align 8
  %228 = or i32 %227, 1073741824
  store i32 %228, ptr %214, align 8
  br label %229

229:                                              ; preds = %205, %223
  %230 = load ptr, ptr getelementptr inbounds ([11 x ptr], ptr @global_rtl, i64 0, i64 4), align 16, !tbaa !5
  tail call void @add_reg_note(ptr noundef %214, i32 noundef 22, ptr noundef %230) #30
  %231 = load i32, ptr %214, align 8
  %232 = or i32 %231, 1073741824
  store i32 %232, ptr %214, align 8
  %233 = load ptr, ptr @cfun, align 8, !tbaa !5
  %234 = getelementptr inbounds %struct.function, ptr %233, i64 0, i32 10
  %235 = load ptr, ptr %234, align 8, !tbaa !87
  %236 = getelementptr inbounds %struct.machine_function, ptr %235, i64 0, i32 6
  store ptr %189, ptr %236, align 8, !tbaa !145
  %237 = getelementptr inbounds %struct.machine_function, ptr %235, i64 0, i32 6, i32 1
  store i64 4, ptr %237, align 8, !tbaa !146
  %238 = load ptr, ptr getelementptr inbounds ([11 x ptr], ptr @global_rtl, i64 0, i64 2), align 16, !tbaa !5
  %239 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 64), align 16, !tbaa !5
  %240 = tail call ptr @gen_pro_epilogue_adjust_stack_1(ptr noundef %238, ptr noundef %189, ptr noundef %239) #30
  %241 = tail call ptr @emit_insn(ptr noundef %240) #30
  %242 = load ptr, ptr @queued_cfa_restores, align 8, !tbaa !5
  %243 = icmp eq ptr %242, null
  br i1 %243, label %464, label %244

244:                                              ; preds = %229, %244
  %245 = phi ptr [ %247, %244 ], [ %242, %229 ]
  %246 = getelementptr inbounds %struct.rtx_def, ptr %245, i64 0, i32 1, i32 0, i32 0, i64 1
  %247 = load ptr, ptr %246, align 8, !tbaa !16
  %248 = icmp eq ptr %247, null
  br i1 %248, label %249, label %244, !llvm.loop !156

249:                                              ; preds = %244
  %250 = getelementptr inbounds %struct.rtx_def, ptr %245, i64 0, i32 1, i32 0, i32 0, i64 1
  %251 = getelementptr inbounds %struct.rtx_def, ptr %241, i64 1, i32 1, i32 0, i32 0, i64 1
  %252 = load ptr, ptr %251, align 8, !tbaa !16
  store ptr %252, ptr %250, align 8, !tbaa !16
  store ptr %242, ptr %251, align 8, !tbaa !16
  store ptr null, ptr @queued_cfa_restores, align 8, !tbaa !5
  %253 = load i32, ptr %241, align 8
  %254 = or i32 %253, 1073741824
  store i32 %254, ptr %241, align 8
  br label %464

255:                                              ; preds = %202
  %256 = load ptr, ptr getelementptr inbounds ([11 x ptr], ptr @global_rtl, i64 0, i64 2), align 16, !tbaa !5
  %257 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 49, i32 noundef 16, ptr noundef %256, ptr noundef %189) #30
  %258 = getelementptr inbounds %struct.ix86_frame, ptr %2, i64 0, i32 9
  %259 = load i64, ptr %258, align 8, !tbaa !119
  %260 = shl nsw i32 %65, 2
  %261 = sext i32 %260 to i64
  %262 = sext i32 %76 to i64
  %263 = sext i32 %77 to i64
  %264 = add nsw i64 %262, %261
  %265 = add nsw i64 %264, %263
  %266 = add i64 %265, %259
  %267 = tail call ptr @plus_constant(ptr noundef %257, i64 noundef %266) #30
  %268 = load ptr, ptr getelementptr inbounds ([11 x ptr], ptr @global_rtl, i64 0, i64 2), align 16, !tbaa !5
  %269 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 23, i32 noundef 0, ptr noundef %268, ptr noundef %267) #30
  %270 = tail call ptr @emit_insn(ptr noundef %269) #30
  %271 = load ptr, ptr @queued_cfa_restores, align 8, !tbaa !5
  %272 = icmp eq ptr %271, null
  br i1 %272, label %284, label %273

273:                                              ; preds = %255, %273
  %274 = phi ptr [ %276, %273 ], [ %271, %255 ]
  %275 = getelementptr inbounds %struct.rtx_def, ptr %274, i64 0, i32 1, i32 0, i32 0, i64 1
  %276 = load ptr, ptr %275, align 8, !tbaa !16
  %277 = icmp eq ptr %276, null
  br i1 %277, label %278, label %273, !llvm.loop !156

278:                                              ; preds = %273
  %279 = getelementptr inbounds %struct.rtx_def, ptr %274, i64 0, i32 1, i32 0, i32 0, i64 1
  %280 = getelementptr inbounds %struct.rtx_def, ptr %270, i64 1, i32 1, i32 0, i32 0, i64 1
  %281 = load ptr, ptr %280, align 8, !tbaa !16
  store ptr %281, ptr %279, align 8, !tbaa !16
  store ptr %271, ptr %280, align 8, !tbaa !16
  store ptr null, ptr @queued_cfa_restores, align 8, !tbaa !5
  %282 = load i32, ptr %270, align 8
  %283 = or i32 %282, 1073741824
  store i32 %283, ptr %270, align 8
  br label %284

284:                                              ; preds = %255, %278
  %285 = load ptr, ptr @cfun, align 8, !tbaa !5
  %286 = getelementptr inbounds %struct.function, ptr %285, i64 0, i32 10
  %287 = load ptr, ptr %286, align 8, !tbaa !87
  %288 = getelementptr inbounds %struct.machine_function, ptr %287, i64 0, i32 6
  %289 = load ptr, ptr %288, align 8, !tbaa !145
  %290 = load ptr, ptr getelementptr inbounds ([11 x ptr], ptr @global_rtl, i64 0, i64 2), align 16, !tbaa !5
  %291 = icmp eq ptr %289, %290
  br i1 %291, label %296, label %292

292:                                              ; preds = %284
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 9119, ptr noundef nonnull @.str.131) #30
  %293 = load ptr, ptr @cfun, align 8, !tbaa !5
  %294 = getelementptr inbounds %struct.function, ptr %293, i64 0, i32 10
  %295 = load ptr, ptr %294, align 8, !tbaa !87
  br label %296

296:                                              ; preds = %284, %292
  %297 = phi ptr [ %287, %284 ], [ %295, %292 ]
  %298 = getelementptr inbounds %struct.machine_function, ptr %297, i64 0, i32 6, i32 1
  %299 = load i64, ptr %298, align 8, !tbaa !146
  %300 = icmp eq i64 %299, 4
  br i1 %300, label %464, label %301

301:                                              ; preds = %296
  store i64 4, ptr %298, align 8, !tbaa !146
  %302 = load ptr, ptr getelementptr inbounds ([11 x ptr], ptr @global_rtl, i64 0, i64 2), align 16, !tbaa !5
  %303 = tail call ptr @plus_constant(ptr noundef %302, i64 noundef 4) #30
  tail call void @add_reg_note(ptr noundef %270, i32 noundef 18, ptr noundef %303) #30
  %304 = load i32, ptr %270, align 8
  %305 = or i32 %304, 1073741824
  store i32 %305, ptr %270, align 8
  br label %464

306:                                              ; preds = %185
  %307 = load i8, ptr getelementptr inbounds (%struct.rtl_data, ptr @x_rtl, i64 0, i32 41), align 1, !tbaa !128
  %308 = icmp eq i8 %307, 0
  br i1 %308, label %309, label %322

309:                                              ; preds = %306
  %310 = load ptr, ptr getelementptr inbounds ([11 x ptr], ptr @global_rtl, i64 0, i64 2), align 16, !tbaa !5
  %311 = getelementptr inbounds %struct.ix86_frame, ptr %2, i64 0, i32 9
  %312 = load i64, ptr %311, align 8, !tbaa !119
  %313 = shl nsw i32 %65, 2
  %314 = sext i32 %313 to i64
  %315 = sext i32 %76 to i64
  %316 = sext i32 %77 to i64
  %317 = add nsw i64 %315, %314
  %318 = add nsw i64 %317, %316
  %319 = add i64 %318, %312
  %320 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef %319) #30
  %321 = zext i1 %54 to i8
  tail call fastcc void @pro_epilogue_adjust_stack(ptr noundef %310, ptr noundef %310, ptr noundef %320, i32 noundef %0, i8 noundef zeroext %321)
  br label %464

322:                                              ; preds = %306
  %323 = load i8, ptr @ix86_tune_features, align 16, !tbaa !16
  %324 = icmp eq i8 %323, 0
  br i1 %324, label %325, label %337

325:                                              ; preds = %322
  %326 = load ptr, ptr @cfun, align 8, !tbaa !5
  %327 = tail call zeroext i8 @optimize_function_for_size_p(ptr noundef %326) #30
  %328 = icmp eq i8 %327, 0
  br i1 %328, label %329, label %337

329:                                              ; preds = %325
  %330 = load ptr, ptr @cfun, align 8, !tbaa !5
  %331 = getelementptr inbounds %struct.function, ptr %330, i64 0, i32 10
  %332 = load ptr, ptr %331, align 8, !tbaa !87
  %333 = getelementptr inbounds %struct.machine_function, ptr %332, i64 0, i32 8
  %334 = load i8, ptr %333, align 4
  %335 = and i8 %334, 4
  %336 = icmp eq i8 %335, 0
  br i1 %336, label %337, label %338

337:                                              ; preds = %329, %325, %322
  tail call fastcc void @ix86_emit_leave(i64 noundef %186)
  br label %464

338:                                              ; preds = %329
  %339 = load ptr, ptr getelementptr inbounds ([11 x ptr], ptr @global_rtl, i64 0, i64 2), align 16, !tbaa !5
  %340 = load ptr, ptr getelementptr inbounds ([11 x ptr], ptr @global_rtl, i64 0, i64 4), align 16, !tbaa !5
  %341 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 64), align 16, !tbaa !5
  %342 = zext i1 %54 to i8
  tail call fastcc void @pro_epilogue_adjust_stack(ptr noundef %339, ptr noundef %340, ptr noundef %341, i32 noundef %0, i8 noundef zeroext %342)
  %343 = load ptr, ptr getelementptr inbounds ([11 x ptr], ptr @global_rtl, i64 0, i64 4), align 16, !tbaa !5
  tail call fastcc void @ix86_emit_restore_reg_using_pop(ptr noundef %343, i64 noundef %186)
  br label %464

344:                                              ; preds = %147
  br i1 %39, label %402, label %346

345:                                              ; preds = %144
  br i1 %39, label %402, label %348

346:                                              ; preds = %344
  br i1 %111, label %347, label %348

347:                                              ; preds = %346
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 9161, ptr noundef nonnull @.str.131) #30
  br label %348

348:                                              ; preds = %345, %346, %347
  %349 = load i8, ptr getelementptr inbounds (%struct.rtl_data, ptr @x_rtl, i64 0, i32 43), align 1, !tbaa !130
  %350 = icmp eq i8 %349, 0
  %351 = load i8, ptr getelementptr inbounds (%struct.rtl_data, ptr @x_rtl, i64 0, i32 45), align 1
  %352 = icmp ne i8 %351, 0
  %353 = select i1 %350, i1 true, i1 %352
  br i1 %353, label %355, label %354

354:                                              ; preds = %348
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 9162, ptr noundef nonnull @.str.131) #30
  br label %355

355:                                              ; preds = %348, %354
  %356 = load ptr, ptr getelementptr inbounds ([11 x ptr], ptr @global_rtl, i64 0, i64 2), align 16, !tbaa !5
  %357 = load ptr, ptr getelementptr inbounds ([11 x ptr], ptr @global_rtl, i64 0, i64 4), align 16, !tbaa !5
  %358 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef %80) #30
  %359 = tail call ptr @gen_pro_epilogue_adjust_stack_1(ptr noundef %356, ptr noundef %357, ptr noundef %358) #30
  %360 = tail call ptr @emit_insn(ptr noundef %359) #30
  %361 = icmp slt i32 %0, 0
  br i1 %361, label %374, label %362

362:                                              ; preds = %355
  %363 = load ptr, ptr @queued_cfa_restores, align 8, !tbaa !5
  %364 = icmp eq ptr %363, null
  br i1 %364, label %377, label %365

365:                                              ; preds = %362, %365
  %366 = phi ptr [ %368, %365 ], [ %363, %362 ]
  %367 = getelementptr inbounds %struct.rtx_def, ptr %366, i64 0, i32 1, i32 0, i32 0, i64 1
  %368 = load ptr, ptr %367, align 8, !tbaa !16
  %369 = icmp eq ptr %368, null
  br i1 %369, label %370, label %365, !llvm.loop !156

370:                                              ; preds = %365
  %371 = getelementptr inbounds %struct.rtx_def, ptr %366, i64 0, i32 1, i32 0, i32 0, i64 1
  %372 = getelementptr inbounds %struct.rtx_def, ptr %360, i64 1, i32 1, i32 0, i32 0, i64 1
  %373 = load ptr, ptr %372, align 8, !tbaa !16
  store ptr %373, ptr %371, align 8, !tbaa !16
  store ptr %363, ptr %372, align 8, !tbaa !16
  store ptr null, ptr @queued_cfa_restores, align 8, !tbaa !5
  br label %374

374:                                              ; preds = %355, %370
  %375 = load i32, ptr %360, align 8
  %376 = or i32 %375, 1073741824
  store i32 %376, ptr %360, align 8
  br label %377

377:                                              ; preds = %374, %362
  %378 = load ptr, ptr getelementptr inbounds ([11 x ptr], ptr @global_rtl, i64 0, i64 2), align 16, !tbaa !5
  %379 = icmp eq i32 %0, 2
  %380 = zext i1 %379 to i32
  tail call fastcc void @ix86_emit_restore_sse_regs_using_mov(ptr noundef %378, i64 noundef 0, i64 noundef %113, i32 noundef %380)
  %381 = load ptr, ptr getelementptr inbounds ([11 x ptr], ptr @global_rtl, i64 0, i64 2), align 16, !tbaa !5
  %382 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef %79) #30
  %383 = tail call ptr @gen_pro_epilogue_adjust_stack_1(ptr noundef %381, ptr noundef %381, ptr noundef %382) #30
  %384 = tail call ptr @emit_insn(ptr noundef %383) #30
  br i1 %361, label %399, label %385

385:                                              ; preds = %377
  %386 = load ptr, ptr @queued_cfa_restores, align 8, !tbaa !5
  %387 = icmp eq ptr %386, null
  br i1 %387, label %424, label %388

388:                                              ; preds = %385, %388
  %389 = phi ptr [ %391, %388 ], [ %386, %385 ]
  %390 = getelementptr inbounds %struct.rtx_def, ptr %389, i64 0, i32 1, i32 0, i32 0, i64 1
  %391 = load ptr, ptr %390, align 8, !tbaa !16
  %392 = icmp eq ptr %391, null
  br i1 %392, label %393, label %388, !llvm.loop !156

393:                                              ; preds = %388
  %394 = getelementptr inbounds %struct.rtx_def, ptr %389, i64 0, i32 1, i32 0, i32 0, i64 1
  %395 = getelementptr inbounds %struct.rtx_def, ptr %384, i64 1, i32 1, i32 0, i32 0, i64 1
  %396 = load ptr, ptr %395, align 8, !tbaa !16
  store ptr %396, ptr %394, align 8, !tbaa !16
  store ptr %386, ptr %395, align 8, !tbaa !16
  store ptr null, ptr @queued_cfa_restores, align 8, !tbaa !5
  %397 = load i32, ptr %384, align 8
  %398 = or i32 %397, 1073741824
  store i32 %398, ptr %384, align 8
  br i1 %361, label %399, label %424

399:                                              ; preds = %377, %393
  %400 = load i32, ptr %384, align 8
  %401 = or i32 %400, 1073741824
  store i32 %401, ptr %384, align 8
  br label %424

402:                                              ; preds = %345, %344
  %403 = getelementptr inbounds %struct.ix86_frame, ptr %2, i64 0, i32 9
  %404 = load i64, ptr %403, align 8, !tbaa !119
  %405 = icmp ne i64 %404, 0
  %406 = icmp ne i32 %77, 0
  %407 = select i1 %405, i1 true, i1 %406
  %408 = icmp ne i32 %75, 0
  %409 = select i1 %407, i1 true, i1 %408
  br i1 %409, label %410, label %424

410:                                              ; preds = %402
  %411 = load ptr, ptr getelementptr inbounds ([11 x ptr], ptr @global_rtl, i64 0, i64 2), align 16, !tbaa !5
  %412 = icmp eq i32 %0, 2
  %413 = zext i1 %412 to i32
  tail call fastcc void @ix86_emit_restore_sse_regs_using_mov(ptr noundef %411, i64 noundef %404, i64 noundef %113, i32 noundef %413)
  %414 = load ptr, ptr getelementptr inbounds ([11 x ptr], ptr @global_rtl, i64 0, i64 2), align 16, !tbaa !5
  %415 = sext i32 %76 to i64
  %416 = sext i32 %77 to i64
  %417 = add nsw i64 %416, %415
  %418 = add i64 %417, %404
  %419 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef %418) #30
  %420 = load i8, ptr getelementptr inbounds (%struct.rtl_data, ptr @x_rtl, i64 0, i32 41), align 1
  %421 = icmp eq i8 %420, 0
  %422 = select i1 %54, i1 %421, i1 false
  %423 = zext i1 %422 to i8
  tail call fastcc void @pro_epilogue_adjust_stack(ptr noundef %414, ptr noundef %414, ptr noundef %419, i32 noundef %0, i8 noundef zeroext %423)
  br label %424

424:                                              ; preds = %385, %399, %393, %410, %402
  %425 = sext i32 %76 to i64
  %426 = sext i32 %77 to i64
  %427 = add nsw i64 %426, %425
  %428 = add nsw i64 %427, %113
  br label %429

429:                                              ; preds = %439, %424
  %430 = phi i64 [ 0, %424 ], [ %441, %439 ]
  %431 = phi i64 [ %428, %424 ], [ %440, %439 ]
  switch i64 %430, label %432 [
    i64 52, label %439
    i64 51, label %439
    i64 50, label %439
    i64 49, label %439
    i64 48, label %439
    i64 47, label %439
    i64 46, label %439
    i64 45, label %439
    i64 28, label %439
    i64 27, label %439
    i64 26, label %439
    i64 25, label %439
    i64 24, label %439
    i64 23, label %439
    i64 22, label %439
    i64 21, label %439
  ]

432:                                              ; preds = %429
  %433 = trunc i64 %430 to i32
  %434 = tail call fastcc i32 @ix86_save_reg(i32 noundef %433, i32 noundef 0)
  %435 = icmp eq i32 %434, 0
  br i1 %435, label %439, label %436

436:                                              ; preds = %432
  %437 = tail call ptr @gen_rtx_REG(i32 noundef 16, i32 noundef %433) #30
  tail call fastcc void @ix86_emit_restore_reg_using_pop(ptr noundef %437, i64 noundef %431)
  %438 = add nsw i64 %431, 4
  br label %439

439:                                              ; preds = %436, %432, %429, %429, %429, %429, %429, %429, %429, %429, %429, %429, %429, %429, %429, %429, %429, %429
  %440 = phi i64 [ %431, %429 ], [ %438, %436 ], [ %431, %432 ], [ %431, %429 ], [ %431, %429 ], [ %431, %429 ], [ %431, %429 ], [ %431, %429 ], [ %431, %429 ], [ %431, %429 ], [ %431, %429 ], [ %431, %429 ], [ %431, %429 ], [ %431, %429 ], [ %431, %429 ], [ %431, %429 ], [ %431, %429 ], [ %431, %429 ]
  %441 = add nuw nsw i64 %430, 1
  %442 = icmp eq i64 %441, 53
  br i1 %442, label %443, label %429, !llvm.loop !159

443:                                              ; preds = %439
  %444 = sub nsw i64 %113, %80
  %445 = load i8, ptr getelementptr inbounds (%struct.rtl_data, ptr @x_rtl, i64 0, i32 41), align 1, !tbaa !128
  %446 = icmp eq i8 %445, 0
  br i1 %446, label %464, label %447

447:                                              ; preds = %443
  %448 = load i8, ptr @ix86_tune_features, align 16, !tbaa !16
  %449 = icmp eq i8 %448, 0
  br i1 %449, label %451, label %450

450:                                              ; preds = %447
  tail call fastcc void @ix86_emit_leave(i64 noundef %444)
  br label %464

451:                                              ; preds = %447
  %452 = load i8, ptr getelementptr inbounds (%struct.rtl_data, ptr @x_rtl, i64 0, i32 43), align 1, !tbaa !130
  %453 = icmp eq i8 %452, 0
  %454 = load i8, ptr getelementptr inbounds (%struct.rtl_data, ptr @x_rtl, i64 0, i32 45), align 1
  %455 = icmp ne i8 %454, 0
  %456 = select i1 %453, i1 true, i1 %455
  br i1 %456, label %462, label %457

457:                                              ; preds = %451
  %458 = load ptr, ptr getelementptr inbounds ([11 x ptr], ptr @global_rtl, i64 0, i64 2), align 16, !tbaa !5
  %459 = load ptr, ptr getelementptr inbounds ([11 x ptr], ptr @global_rtl, i64 0, i64 4), align 16, !tbaa !5
  %460 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 64), align 16, !tbaa !5
  %461 = zext i1 %54 to i8
  tail call fastcc void @pro_epilogue_adjust_stack(ptr noundef %458, ptr noundef %459, ptr noundef %460, i32 noundef %0, i8 noundef zeroext %461)
  br label %462

462:                                              ; preds = %457, %451
  %463 = load ptr, ptr getelementptr inbounds ([11 x ptr], ptr @global_rtl, i64 0, i64 4), align 16, !tbaa !5
  tail call fastcc void @ix86_emit_restore_reg_using_pop(ptr noundef %463, i64 noundef %444)
  br label %464

464:                                              ; preds = %249, %229, %301, %296, %443, %462, %450, %337, %338, %309
  br i1 %54, label %515, label %465

465:                                              ; preds = %464
  %466 = load i8, ptr getelementptr inbounds (%struct.rtl_data, ptr @x_rtl, i64 0, i32 43), align 1, !tbaa !130
  %467 = icmp ne i8 %466, 0
  %468 = load i8, ptr getelementptr inbounds (%struct.rtl_data, ptr @x_rtl, i64 0, i32 45), align 1
  %469 = icmp ne i8 %468, 0
  %470 = select i1 %467, i1 %469, i1 false
  br i1 %470, label %472, label %471

471:                                              ; preds = %465
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 9216, ptr noundef nonnull @.str.131) #30
  br label %472

472:                                              ; preds = %465, %471
  %473 = load ptr, ptr @cfun, align 8, !tbaa !5
  %474 = getelementptr inbounds %struct.function, ptr %473, i64 0, i32 10
  %475 = load ptr, ptr %474, align 8, !tbaa !87
  %476 = getelementptr inbounds %struct.machine_function, ptr %475, i64 0, i32 8
  %477 = load i8, ptr %476, align 4
  %478 = and i8 %477, 16
  %479 = icmp eq i8 %478, 0
  %480 = select i1 %479, i32 4, i32 8
  %481 = load ptr, ptr getelementptr inbounds (%struct.rtl_data, ptr @x_rtl, i64 0, i32 16), align 8, !tbaa !144
  %482 = getelementptr i8, ptr %481, i64 8
  %483 = load i32, ptr %482, align 8, !tbaa !16
  %484 = zext i32 %483 to i64
  %485 = getelementptr inbounds [53 x i8], ptr @call_used_regs, i64 0, i64 %484
  %486 = load i8, ptr %485, align 1, !tbaa !16
  %487 = icmp eq i8 %486, 0
  %488 = add nuw nsw i32 %480, 4
  %489 = select i1 %487, i32 %488, i32 %480
  %490 = load ptr, ptr getelementptr inbounds ([11 x ptr], ptr @global_rtl, i64 0, i64 2), align 16, !tbaa !5
  %491 = sub nsw i32 0, %489
  %492 = sext i32 %491 to i64
  %493 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef %492) #30
  %494 = tail call ptr @gen_addsi3(ptr noundef %490, ptr noundef %481, ptr noundef %493) #30, !callees !160
  %495 = tail call ptr @emit_insn(ptr noundef %494) #30
  %496 = load ptr, ptr getelementptr inbounds ([11 x ptr], ptr @global_rtl, i64 0, i64 2), align 16, !tbaa !5
  %497 = load ptr, ptr @cfun, align 8, !tbaa !5
  %498 = getelementptr inbounds %struct.function, ptr %497, i64 0, i32 10
  %499 = load ptr, ptr %498, align 8, !tbaa !87
  %500 = getelementptr inbounds %struct.machine_function, ptr %499, i64 0, i32 6
  store ptr %496, ptr %500, align 8, !tbaa !145
  %501 = zext i32 %489 to i64
  %502 = getelementptr inbounds %struct.machine_function, ptr %499, i64 0, i32 6, i32 1
  store i64 %501, ptr %502, align 8, !tbaa !146
  %503 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef %501) #30
  %504 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 49, i32 noundef 16, ptr noundef %496, ptr noundef %503) #30
  tail call void @add_reg_note(ptr noundef %495, i32 noundef 18, ptr noundef %504) #30
  %505 = load i32, ptr %495, align 8
  %506 = or i32 %505, 1073741824
  store i32 %506, ptr %495, align 8
  %507 = load ptr, ptr getelementptr inbounds (%struct.rtl_data, ptr @x_rtl, i64 0, i32 16), align 8, !tbaa !144
  %508 = getelementptr i8, ptr %507, i64 8
  %509 = load i32, ptr %508, align 8, !tbaa !16
  %510 = zext i32 %509 to i64
  %511 = getelementptr inbounds [53 x i8], ptr @call_used_regs, i64 0, i64 %510
  %512 = load i8, ptr %511, align 1, !tbaa !16
  %513 = icmp eq i8 %512, 0
  br i1 %513, label %514, label %515

514:                                              ; preds = %472
  tail call fastcc void @ix86_emit_restore_reg_using_pop(ptr noundef nonnull %507, i64 noundef -4)
  br label %515

515:                                              ; preds = %472, %514, %464
  %516 = load ptr, ptr @cfun, align 8, !tbaa !5
  %517 = getelementptr inbounds %struct.function, ptr %516, i64 0, i32 10
  %518 = load ptr, ptr %517, align 8, !tbaa !87
  %519 = getelementptr inbounds %struct.machine_function, ptr %518, i64 0, i32 8
  %520 = load i8, ptr %519, align 4
  %521 = and i8 %520, 16
  %522 = icmp eq i8 %521, 0
  br i1 %522, label %546, label %523

523:                                              ; preds = %515
  %524 = getelementptr inbounds %struct.machine_function, ptr %518, i64 0, i32 6
  %525 = load ptr, ptr %524, align 8, !tbaa !145
  %526 = load ptr, ptr getelementptr inbounds ([11 x ptr], ptr @global_rtl, i64 0, i64 2), align 16, !tbaa !5
  %527 = icmp eq ptr %525, %526
  br i1 %527, label %532, label %528

528:                                              ; preds = %523
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 9245, ptr noundef nonnull @.str.131) #30
  %529 = load ptr, ptr @cfun, align 8, !tbaa !5
  %530 = getelementptr inbounds %struct.function, ptr %529, i64 0, i32 10
  %531 = load ptr, ptr %530, align 8, !tbaa !87
  br label %532

532:                                              ; preds = %523, %528
  %533 = phi ptr [ %518, %523 ], [ %531, %528 ]
  %534 = getelementptr inbounds %struct.machine_function, ptr %533, i64 0, i32 6, i32 1
  %535 = load i64, ptr %534, align 8, !tbaa !146
  %536 = add nsw i64 %535, 4
  store i64 %536, ptr %534, align 8, !tbaa !146
  %537 = tail call ptr @gen_rtx_REG(i32 noundef 16, i32 noundef 2) #30
  %538 = tail call ptr @gen_popsi1(ptr noundef %537) #30, !callees !147
  %539 = tail call ptr @emit_insn(ptr noundef %538) #30
  %540 = load ptr, ptr getelementptr inbounds ([11 x ptr], ptr @global_rtl, i64 0, i64 2), align 16, !tbaa !5
  %541 = tail call ptr @plus_constant(ptr noundef %540, i64 noundef 4) #30
  %542 = load ptr, ptr getelementptr inbounds ([11 x ptr], ptr @global_rtl, i64 0, i64 2), align 16, !tbaa !5
  %543 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 23, i32 noundef 0, ptr noundef %542, ptr noundef %541) #30
  tail call void @add_reg_note(ptr noundef %539, i32 noundef 19, ptr noundef %543) #30
  %544 = load i32, ptr %539, align 8
  %545 = or i32 %544, 1073741824
  store i32 %545, ptr %539, align 8
  br label %546

546:                                              ; preds = %532, %515
  %547 = icmp eq i32 %0, 0
  br i1 %547, label %589, label %548

548:                                              ; preds = %546
  %549 = load i32, ptr getelementptr inbounds (%struct.rtl_data, ptr @x_rtl, i64 0, i32 3), align 8, !tbaa !111
  %550 = icmp ne i32 %549, 0
  %551 = load i32, ptr getelementptr inbounds (%struct.rtl_data, ptr @x_rtl, i64 0, i32 3, i32 1), align 4
  %552 = icmp ne i32 %551, 0
  %553 = select i1 %550, i1 %552, i1 false
  br i1 %553, label %554, label %584

554:                                              ; preds = %548
  %555 = sext i32 %549 to i64
  %556 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef %555) #30
  %557 = load i32, ptr getelementptr inbounds (%struct.rtl_data, ptr @x_rtl, i64 0, i32 3), align 8, !tbaa !111
  %558 = icmp sgt i32 %557, 65535
  br i1 %558, label %559, label %582

559:                                              ; preds = %554
  %560 = tail call ptr @gen_rtx_REG(i32 noundef 16, i32 noundef 2) #30
  %561 = tail call ptr @gen_popsi1(ptr noundef %560) #30
  %562 = tail call ptr @emit_insn(ptr noundef %561) #30
  %563 = load ptr, ptr @cfun, align 8, !tbaa !5
  %564 = getelementptr inbounds %struct.function, ptr %563, i64 0, i32 10
  %565 = load ptr, ptr %564, align 8, !tbaa !87
  %566 = getelementptr inbounds %struct.machine_function, ptr %565, i64 0, i32 6, i32 1
  %567 = load i64, ptr %566, align 8, !tbaa !146
  %568 = add nsw i64 %567, -4
  store i64 %568, ptr %566, align 8, !tbaa !146
  %569 = getelementptr inbounds %struct.rtx_def, ptr %562, i64 1
  %570 = load ptr, ptr %569, align 8, !tbaa !16
  %571 = getelementptr inbounds %struct.rtx_def, ptr %570, i64 0, i32 1
  %572 = load ptr, ptr %571, align 8, !tbaa !16
  %573 = getelementptr inbounds %struct.rtvec_def, ptr %572, i64 1
  %574 = load ptr, ptr %573, align 8, !tbaa !5
  %575 = tail call ptr @copy_rtx(ptr noundef %574) #30
  tail call void @add_reg_note(ptr noundef %562, i32 noundef 19, ptr noundef %575) #30
  %576 = load ptr, ptr @global_rtl, align 16, !tbaa !5
  %577 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 23, i32 noundef 0, ptr noundef %560, ptr noundef %576) #30
  tail call void @add_reg_note(ptr noundef %562, i32 noundef 21, ptr noundef %577) #30
  %578 = load i32, ptr %562, align 8
  %579 = or i32 %578, 1073741824
  store i32 %579, ptr %562, align 8
  %580 = load ptr, ptr getelementptr inbounds ([11 x ptr], ptr @global_rtl, i64 0, i64 2), align 16, !tbaa !5
  tail call fastcc void @pro_epilogue_adjust_stack(ptr noundef %580, ptr noundef %580, ptr noundef %556, i32 noundef -1, i8 noundef zeroext 1)
  %581 = tail call ptr @gen_return_indirect_internal(ptr noundef %560) #30
  br label %586

582:                                              ; preds = %554
  %583 = tail call ptr @gen_return_pop_internal(ptr noundef %556) #30
  br label %586

584:                                              ; preds = %548
  %585 = tail call ptr @gen_return_internal() #30
  br label %586

586:                                              ; preds = %559, %582, %584
  %587 = phi ptr [ %581, %559 ], [ %583, %582 ], [ %585, %584 ]
  %588 = tail call ptr @emit_jump_insn(ptr noundef %587) #30
  br label %589

589:                                              ; preds = %546, %586
  %590 = load ptr, ptr @cfun, align 8, !tbaa !5
  %591 = getelementptr inbounds %struct.function, ptr %590, i64 0, i32 10
  %592 = load ptr, ptr %591, align 8, !tbaa !87
  %593 = getelementptr inbounds %struct.machine_function, ptr %592, i64 0, i32 6
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %593, ptr noundef nonnull align 8 dereferenceable(16) %3, i64 16, i1 false)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %3)
  call void @llvm.lifetime.end.p0(i64 88, ptr nonnull %2) #30
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc void @ix86_emit_restore_sse_regs_using_mov(ptr noundef %0, i64 noundef %1, i64 noundef %2, i32 noundef %3) unnamed_addr #9 {
  %5 = tail call ptr @gen_rtx_MEM(i32 noundef 18, ptr noundef %0) #30
  br label %6

6:                                                ; preds = %4, %32
  %7 = phi i64 [ 0, %4 ], [ %35, %32 ]
  %8 = phi i64 [ %1, %4 ], [ %34, %32 ]
  %9 = phi i64 [ %2, %4 ], [ %33, %32 ]
  switch i64 %7, label %32 [
    i64 52, label %10
    i64 51, label %10
    i64 50, label %10
    i64 49, label %10
    i64 48, label %10
    i64 47, label %10
    i64 46, label %10
    i64 45, label %10
    i64 28, label %10
    i64 27, label %10
    i64 26, label %10
    i64 25, label %10
    i64 24, label %10
    i64 23, label %10
    i64 22, label %10
    i64 21, label %10
  ]

10:                                               ; preds = %6, %6, %6, %6, %6, %6, %6, %6, %6, %6, %6, %6, %6, %6, %6, %6
  %11 = trunc i64 %7 to i32
  %12 = tail call fastcc i32 @ix86_save_reg(i32 noundef %11, i32 noundef %3)
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %32, label %14

14:                                               ; preds = %10
  %15 = tail call ptr @gen_rtx_REG(i32 noundef 18, i32 noundef %11) #30
  %16 = tail call ptr @adjust_address_1(ptr noundef %5, i32 noundef 18, i64 noundef %8, i32 noundef 1, i32 noundef 1) #30
  tail call void @set_mem_align(ptr noundef %16, i32 noundef 128) #30
  %17 = tail call ptr @emit_move_insn(ptr noundef %15, ptr noundef %16) #30
  %18 = add nsw i64 %8, 16
  %19 = load i32, ptr @target_flags, align 4, !tbaa !20
  %20 = and i32 %19, 16384
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %22, label %27

22:                                               ; preds = %14
  %23 = icmp sgt i64 %9, -129
  %24 = load i32, ptr getelementptr inbounds (%struct.rtl_data, ptr @x_rtl, i64 0, i32 3), align 8
  %25 = icmp slt i32 %24, 65536
  %26 = select i1 %23, i1 %25, i1 false
  br i1 %26, label %30, label %27

27:                                               ; preds = %22, %14
  %28 = load ptr, ptr @queued_cfa_restores, align 8, !tbaa !5
  %29 = tail call ptr @alloc_reg_note(i32 noundef 22, ptr noundef %15, ptr noundef %28) #30
  store ptr %29, ptr @queued_cfa_restores, align 8, !tbaa !5
  br label %30

30:                                               ; preds = %22, %27
  %31 = add nsw i64 %9, 16
  br label %32

32:                                               ; preds = %6, %10, %30
  %33 = phi i64 [ %31, %30 ], [ %9, %10 ], [ %9, %6 ]
  %34 = phi i64 [ %18, %30 ], [ %8, %10 ], [ %8, %6 ]
  %35 = add nuw nsw i64 %7, 1
  %36 = icmp eq i64 %35, 53
  br i1 %36, label %37, label %6, !llvm.loop !161

37:                                               ; preds = %32
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc void @ix86_emit_restore_regs_using_mov(ptr noundef %0, i64 noundef %1, i64 noundef %2, i32 noundef %3) unnamed_addr #9 {
  %5 = tail call ptr @gen_rtx_MEM(i32 noundef 16, ptr noundef %0) #30
  br label %6

6:                                                ; preds = %4, %48
  %7 = phi i64 [ 0, %4 ], [ %51, %48 ]
  %8 = phi i64 [ %1, %4 ], [ %50, %48 ]
  %9 = phi i64 [ %2, %4 ], [ %49, %48 ]
  switch i64 %7, label %10 [
    i64 52, label %48
    i64 51, label %48
    i64 50, label %48
    i64 49, label %48
    i64 48, label %48
    i64 47, label %48
    i64 46, label %48
    i64 45, label %48
    i64 28, label %48
    i64 27, label %48
    i64 26, label %48
    i64 25, label %48
    i64 24, label %48
    i64 23, label %48
    i64 22, label %48
    i64 21, label %48
  ]

10:                                               ; preds = %6
  %11 = trunc i64 %7 to i32
  %12 = tail call fastcc i32 @ix86_save_reg(i32 noundef %11, i32 noundef %3)
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %48, label %14

14:                                               ; preds = %10
  %15 = tail call ptr @gen_rtx_REG(i32 noundef 16, i32 noundef %11) #30
  %16 = tail call ptr @adjust_address_1(ptr noundef %5, i32 noundef 16, i64 noundef %8, i32 noundef 1, i32 noundef 1) #30
  %17 = tail call ptr @emit_move_insn(ptr noundef %15, ptr noundef %16) #30
  %18 = add nsw i64 %8, 4
  %19 = load ptr, ptr @cfun, align 8, !tbaa !5
  %20 = getelementptr inbounds %struct.function, ptr %19, i64 0, i32 10
  %21 = load ptr, ptr %20, align 8, !tbaa !87
  %22 = getelementptr inbounds %struct.machine_function, ptr %21, i64 0, i32 6
  %23 = load ptr, ptr %22, align 8, !tbaa !145
  %24 = load ptr, ptr getelementptr inbounds (%struct.rtl_data, ptr @x_rtl, i64 0, i32 16), align 8, !tbaa !144
  %25 = icmp eq ptr %23, %24
  br i1 %25, label %26, label %34

26:                                               ; preds = %14
  %27 = getelementptr i8, ptr %23, i64 8
  %28 = load i32, ptr %27, align 8, !tbaa !16
  %29 = zext i32 %28 to i64
  %30 = icmp eq i64 %7, %29
  br i1 %30, label %31, label %34

31:                                               ; preds = %26
  tail call void @add_reg_note(ptr noundef %17, i32 noundef 18, ptr noundef %15) #30
  %32 = load i32, ptr %17, align 8
  %33 = or i32 %32, 1073741824
  store i32 %33, ptr %17, align 8
  br label %46

34:                                               ; preds = %26, %14
  %35 = load i32, ptr @target_flags, align 4, !tbaa !20
  %36 = and i32 %35, 16384
  %37 = icmp eq i32 %36, 0
  br i1 %37, label %38, label %43

38:                                               ; preds = %34
  %39 = icmp sgt i64 %9, -129
  %40 = load i32, ptr getelementptr inbounds (%struct.rtl_data, ptr @x_rtl, i64 0, i32 3), align 8
  %41 = icmp slt i32 %40, 65536
  %42 = select i1 %39, i1 %41, i1 false
  br i1 %42, label %46, label %43

43:                                               ; preds = %38, %34
  %44 = load ptr, ptr @queued_cfa_restores, align 8, !tbaa !5
  %45 = tail call ptr @alloc_reg_note(i32 noundef 22, ptr noundef %15, ptr noundef %44) #30
  store ptr %45, ptr @queued_cfa_restores, align 8, !tbaa !5
  br label %46

46:                                               ; preds = %43, %38, %31
  %47 = add nsw i64 %9, 4
  br label %48

48:                                               ; preds = %6, %6, %6, %6, %6, %6, %6, %6, %6, %6, %6, %6, %6, %6, %6, %6, %10, %46
  %49 = phi i64 [ %9, %6 ], [ %47, %46 ], [ %9, %10 ], [ %9, %6 ], [ %9, %6 ], [ %9, %6 ], [ %9, %6 ], [ %9, %6 ], [ %9, %6 ], [ %9, %6 ], [ %9, %6 ], [ %9, %6 ], [ %9, %6 ], [ %9, %6 ], [ %9, %6 ], [ %9, %6 ], [ %9, %6 ], [ %9, %6 ]
  %50 = phi i64 [ %8, %6 ], [ %18, %46 ], [ %8, %10 ], [ %8, %6 ], [ %8, %6 ], [ %8, %6 ], [ %8, %6 ], [ %8, %6 ], [ %8, %6 ], [ %8, %6 ], [ %8, %6 ], [ %8, %6 ], [ %8, %6 ], [ %8, %6 ], [ %8, %6 ], [ %8, %6 ], [ %8, %6 ], [ %8, %6 ]
  %51 = add nuw nsw i64 %7, 1
  %52 = icmp eq i64 %51, 53
  br i1 %52, label %53, label %6, !llvm.loop !162

53:                                               ; preds = %48
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc void @ix86_emit_leave(i64 noundef %0) unnamed_addr #9 {
  %2 = tail call ptr @gen_leave() #30, !callees !163
  %3 = tail call ptr @emit_insn(ptr noundef %2) #30
  %4 = load ptr, ptr @queued_cfa_restores, align 8, !tbaa !5
  %5 = icmp eq ptr %4, null
  br i1 %5, label %17, label %6

6:                                                ; preds = %1, %6
  %7 = phi ptr [ %9, %6 ], [ %4, %1 ]
  %8 = getelementptr inbounds %struct.rtx_def, ptr %7, i64 0, i32 1, i32 0, i32 0, i64 1
  %9 = load ptr, ptr %8, align 8, !tbaa !16
  %10 = icmp eq ptr %9, null
  br i1 %10, label %11, label %6, !llvm.loop !156

11:                                               ; preds = %6
  %12 = getelementptr inbounds %struct.rtx_def, ptr %7, i64 0, i32 1, i32 0, i32 0, i64 1
  %13 = getelementptr inbounds %struct.rtx_def, ptr %3, i64 1, i32 1, i32 0, i32 0, i64 1
  %14 = load ptr, ptr %13, align 8, !tbaa !16
  store ptr %14, ptr %12, align 8, !tbaa !16
  store ptr %4, ptr %13, align 8, !tbaa !16
  store ptr null, ptr @queued_cfa_restores, align 8, !tbaa !5
  %15 = load i32, ptr %3, align 8
  %16 = or i32 %15, 1073741824
  store i32 %16, ptr %3, align 8
  br label %17

17:                                               ; preds = %1, %11
  %18 = load ptr, ptr @cfun, align 8, !tbaa !5
  %19 = getelementptr inbounds %struct.function, ptr %18, i64 0, i32 10
  %20 = load ptr, ptr %19, align 8, !tbaa !87
  %21 = getelementptr inbounds %struct.machine_function, ptr %20, i64 0, i32 6
  %22 = load ptr, ptr %21, align 8, !tbaa !145
  %23 = load ptr, ptr getelementptr inbounds ([11 x ptr], ptr @global_rtl, i64 0, i64 4), align 16, !tbaa !5
  %24 = icmp eq ptr %22, %23
  br i1 %24, label %25, label %51

25:                                               ; preds = %17
  %26 = load ptr, ptr getelementptr inbounds ([11 x ptr], ptr @global_rtl, i64 0, i64 2), align 16, !tbaa !5
  store ptr %26, ptr %21, align 8, !tbaa !145
  %27 = getelementptr inbounds %struct.machine_function, ptr %20, i64 0, i32 6, i32 1
  %28 = load i64, ptr %27, align 8, !tbaa !146
  %29 = add nsw i64 %28, -4
  store i64 %29, ptr %27, align 8, !tbaa !146
  %30 = getelementptr inbounds %struct.rtx_def, ptr %3, i64 1
  %31 = load ptr, ptr %30, align 8, !tbaa !16
  %32 = getelementptr inbounds %struct.rtx_def, ptr %31, i64 0, i32 1
  %33 = load ptr, ptr %32, align 8, !tbaa !16
  %34 = getelementptr inbounds %struct.rtvec_def, ptr %33, i64 0, i32 1
  %35 = load ptr, ptr %34, align 8, !tbaa !5
  %36 = tail call ptr @copy_rtx(ptr noundef %35) #30
  tail call void @add_reg_note(ptr noundef %3, i32 noundef 19, ptr noundef %36) #30
  %37 = load i32, ptr %3, align 8
  %38 = or i32 %37, 1073741824
  store i32 %38, ptr %3, align 8
  %39 = load ptr, ptr getelementptr inbounds ([11 x ptr], ptr @global_rtl, i64 0, i64 4), align 16, !tbaa !5
  %40 = load i32, ptr @target_flags, align 4, !tbaa !20
  %41 = and i32 %40, 16384
  %42 = icmp eq i32 %41, 0
  br i1 %42, label %43, label %48

43:                                               ; preds = %25
  %44 = icmp sgt i64 %0, -129
  %45 = load i32, ptr getelementptr inbounds (%struct.rtl_data, ptr @x_rtl, i64 0, i32 3), align 8
  %46 = icmp slt i32 %45, 65536
  %47 = select i1 %44, i1 %46, i1 false
  br i1 %47, label %51, label %48

48:                                               ; preds = %25, %43
  tail call void @add_reg_note(ptr noundef nonnull %3, i32 noundef 22, ptr noundef %39) #30
  %49 = load i32, ptr %3, align 8
  %50 = or i32 %49, 1073741824
  store i32 %50, ptr %3, align 8
  br label %51

51:                                               ; preds = %48, %43, %17
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc void @ix86_emit_restore_reg_using_pop(ptr noundef %0, i64 noundef %1) unnamed_addr #9 {
  %3 = tail call ptr @gen_popsi1(ptr noundef %0) #30, !callees !147
  %4 = tail call ptr @emit_insn(ptr noundef %3) #30
  %5 = load ptr, ptr @cfun, align 8, !tbaa !5
  %6 = getelementptr inbounds %struct.function, ptr %5, i64 0, i32 10
  %7 = load ptr, ptr %6, align 8, !tbaa !87
  %8 = getelementptr inbounds %struct.machine_function, ptr %7, i64 0, i32 6
  %9 = load ptr, ptr %8, align 8, !tbaa !145
  %10 = load ptr, ptr getelementptr inbounds (%struct.rtl_data, ptr @x_rtl, i64 0, i32 16), align 8, !tbaa !144
  %11 = icmp eq ptr %9, %10
  br i1 %11, label %12, label %21

12:                                               ; preds = %2
  %13 = getelementptr i8, ptr %0, i64 8
  %14 = load i32, ptr %13, align 8, !tbaa !16
  %15 = getelementptr i8, ptr %9, i64 8
  %16 = load i32, ptr %15, align 8, !tbaa !16
  %17 = icmp eq i32 %14, %16
  br i1 %17, label %18, label %21

18:                                               ; preds = %12
  tail call void @add_reg_note(ptr noundef %4, i32 noundef 18, ptr noundef nonnull %0) #30
  %19 = load i32, ptr %4, align 8
  %20 = or i32 %19, 1073741824
  store i32 %20, ptr %4, align 8
  br label %66

21:                                               ; preds = %12, %2
  %22 = load ptr, ptr getelementptr inbounds ([11 x ptr], ptr @global_rtl, i64 0, i64 2), align 16, !tbaa !5
  %23 = icmp eq ptr %9, %22
  br i1 %23, label %24, label %35

24:                                               ; preds = %21
  %25 = getelementptr inbounds %struct.machine_function, ptr %7, i64 0, i32 6, i32 1
  %26 = load i64, ptr %25, align 8, !tbaa !146
  %27 = add nsw i64 %26, -4
  store i64 %27, ptr %25, align 8, !tbaa !146
  %28 = getelementptr inbounds %struct.rtx_def, ptr %4, i64 1
  %29 = load ptr, ptr %28, align 8, !tbaa !16
  %30 = getelementptr inbounds %struct.rtx_def, ptr %29, i64 0, i32 1
  %31 = load ptr, ptr %30, align 8, !tbaa !16
  %32 = getelementptr inbounds %struct.rtvec_def, ptr %31, i64 1
  %33 = load ptr, ptr %32, align 8, !tbaa !5
  %34 = tail call ptr @copy_rtx(ptr noundef %33) #30
  tail call void @add_reg_note(ptr noundef %4, i32 noundef 19, ptr noundef %34) #30
  br label %46

35:                                               ; preds = %21
  %36 = load ptr, ptr getelementptr inbounds ([11 x ptr], ptr @global_rtl, i64 0, i64 4), align 16, !tbaa !5
  %37 = icmp eq ptr %9, %36
  %38 = icmp eq ptr %36, %0
  %39 = and i1 %37, %38
  br i1 %39, label %40, label %49

40:                                               ; preds = %35
  store ptr %22, ptr %8, align 8, !tbaa !145
  %41 = getelementptr inbounds %struct.machine_function, ptr %7, i64 0, i32 6, i32 1
  %42 = load i64, ptr %41, align 8, !tbaa !146
  %43 = add nsw i64 %42, -4
  store i64 %43, ptr %41, align 8, !tbaa !146
  %44 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef %43) #30
  %45 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 49, i32 noundef 16, ptr noundef %22, ptr noundef %44) #30
  tail call void @add_reg_note(ptr noundef %4, i32 noundef 18, ptr noundef %45) #30
  br label %46

46:                                               ; preds = %24, %40
  %47 = load i32, ptr %4, align 8
  %48 = or i32 %47, 1073741824
  store i32 %48, ptr %4, align 8
  br label %49

49:                                               ; preds = %46, %35
  %50 = load i32, ptr @target_flags, align 4, !tbaa !20
  %51 = and i32 %50, 16384
  %52 = icmp eq i32 %51, 0
  br i1 %52, label %53, label %58

53:                                               ; preds = %49
  %54 = icmp sgt i64 %1, -129
  %55 = load i32, ptr getelementptr inbounds (%struct.rtl_data, ptr @x_rtl, i64 0, i32 3), align 8
  %56 = icmp slt i32 %55, 65536
  %57 = select i1 %54, i1 %56, i1 false
  br i1 %57, label %66, label %58

58:                                               ; preds = %53, %49
  %59 = icmp eq ptr %4, null
  br i1 %59, label %63, label %60

60:                                               ; preds = %58
  tail call void @add_reg_note(ptr noundef nonnull %4, i32 noundef 22, ptr noundef %0) #30
  %61 = load i32, ptr %4, align 8
  %62 = or i32 %61, 1073741824
  store i32 %62, ptr %4, align 8
  br label %66

63:                                               ; preds = %58
  %64 = load ptr, ptr @queued_cfa_restores, align 8, !tbaa !5
  %65 = tail call ptr @alloc_reg_note(i32 noundef 22, ptr noundef %0, ptr noundef %64) #30
  store ptr %65, ptr @queued_cfa_restores, align 8, !tbaa !5
  br label %66

66:                                               ; preds = %63, %60, %53, %18
  ret void
}

declare ptr @copy_rtx(ptr noundef) local_unnamed_addr #3

declare ptr @emit_jump_insn(ptr noundef) local_unnamed_addr #3

declare ptr @gen_return_indirect_internal(ptr noundef) local_unnamed_addr #3

declare ptr @gen_return_pop_internal(ptr noundef) local_unnamed_addr #3

declare ptr @gen_return_internal() local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define dso_local i32 @ix86_decompose_address(ptr noundef %0, ptr nocapture noundef writeonly %1) local_unnamed_addr #9 {
  %3 = alloca [4 x ptr], align 16
  %4 = load i32, ptr %0, align 8
  %5 = trunc i32 %4 to i16
  switch i16 %5, label %306 [
    i16 37, label %277
    i16 39, label %277
    i16 49, label %6
    i16 52, label %237
    i16 65, label %242
  ]

6:                                                ; preds = %2
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %3) #30
  %7 = getelementptr inbounds %struct.rtx_def, ptr %0, i64 0, i32 1
  %8 = getelementptr inbounds %struct.rtx_def, ptr %0, i64 0, i32 1, i32 0, i32 0, i64 1
  %9 = load ptr, ptr %8, align 8, !tbaa !16
  store ptr %9, ptr %3, align 16, !tbaa !5
  %10 = load ptr, ptr %7, align 8, !tbaa !16
  %11 = load i32, ptr %10, align 8
  %12 = and i32 %11, 65535
  %13 = icmp eq i32 %12, 49
  br i1 %13, label %14, label %32, !llvm.loop !164

14:                                               ; preds = %6
  %15 = getelementptr inbounds %struct.rtx_def, ptr %10, i64 0, i32 1
  %16 = getelementptr inbounds %struct.rtx_def, ptr %10, i64 0, i32 1, i32 0, i32 0, i64 1
  %17 = load ptr, ptr %16, align 8, !tbaa !16
  %18 = getelementptr inbounds [4 x ptr], ptr %3, i64 0, i64 1
  store ptr %17, ptr %18, align 8, !tbaa !5
  %19 = load ptr, ptr %15, align 8, !tbaa !16
  %20 = load i32, ptr %19, align 8
  %21 = and i32 %20, 65535
  %22 = icmp eq i32 %21, 49
  br i1 %22, label %23, label %32, !llvm.loop !164

23:                                               ; preds = %14
  %24 = getelementptr inbounds %struct.rtx_def, ptr %19, i64 0, i32 1
  %25 = getelementptr inbounds %struct.rtx_def, ptr %19, i64 0, i32 1, i32 0, i32 0, i64 1
  %26 = load ptr, ptr %25, align 8, !tbaa !16
  %27 = getelementptr inbounds [4 x ptr], ptr %3, i64 0, i64 2
  store ptr %26, ptr %27, align 16, !tbaa !5
  %28 = load ptr, ptr %24, align 8, !tbaa !16
  %29 = load i32, ptr %28, align 8
  %30 = and i32 %29, 65535
  %31 = icmp eq i32 %30, 49
  br i1 %31, label %230, label %32, !llvm.loop !164

32:                                               ; preds = %23, %14, %6
  %33 = phi i1 [ true, %23 ], [ false, %14 ], [ false, %6 ]
  %34 = phi i64 [ 3, %23 ], [ 2, %14 ], [ 1, %6 ]
  %35 = phi ptr [ %28, %23 ], [ %19, %14 ], [ %10, %6 ]
  %36 = getelementptr inbounds [4 x ptr], ptr %3, i64 0, i64 %34
  store ptr %35, ptr %36, align 8, !tbaa !5
  %37 = load i32, ptr @target_flags, align 4
  %38 = freeze i32 %37
  %39 = and i32 %38, 1048576
  %40 = icmp eq i32 %39, 0
  br i1 %40, label %41, label %123

41:                                               ; preds = %32
  %42 = getelementptr inbounds [4 x ptr], ptr %3, i64 0, i64 %34
  %43 = load ptr, ptr %42, align 8, !tbaa !5
  %44 = load i32, ptr %43, align 8
  %45 = trunc i32 %44 to i16
  switch i16 %45, label %230 [
    i16 52, label %47
    i16 44, label %52
    i16 37, label %46
    i16 39, label %46
    i16 35, label %52
    i16 30, label %52
    i16 45, label %52
  ]

46:                                               ; preds = %41, %41
  br label %52

47:                                               ; preds = %41
  %48 = getelementptr inbounds %struct.rtx_def, ptr %43, i64 0, i32 1
  %49 = load ptr, ptr %48, align 8, !tbaa !16
  %50 = getelementptr inbounds %struct.rtx_def, ptr %43, i64 0, i32 1, i32 0, i32 0, i64 1
  %51 = load ptr, ptr %50, align 8, !tbaa !16
  br label %52

52:                                               ; preds = %47, %46, %41, %41, %41, %41
  %53 = phi ptr [ %49, %47 ], [ null, %46 ], [ null, %41 ], [ null, %41 ], [ null, %41 ], [ null, %41 ]
  %54 = phi ptr [ null, %47 ], [ null, %46 ], [ %43, %41 ], [ %43, %41 ], [ %43, %41 ], [ %43, %41 ]
  %55 = phi ptr [ %51, %47 ], [ null, %46 ], [ null, %41 ], [ null, %41 ], [ null, %41 ], [ null, %41 ]
  %56 = phi ptr [ null, %47 ], [ %43, %46 ], [ null, %41 ], [ null, %41 ], [ null, %41 ], [ null, %41 ]
  %57 = add nsw i64 %34, -1
  %58 = getelementptr inbounds [4 x ptr], ptr %3, i64 0, i64 %57
  %59 = load ptr, ptr %58, align 8, !tbaa !5
  %60 = load i32, ptr %59, align 8
  %61 = trunc i32 %60 to i16
  switch i16 %61, label %230 [
    i16 52, label %68
    i16 44, label %66
    i16 37, label %62
    i16 39, label %62
    i16 35, label %66
    i16 30, label %66
    i16 45, label %66
  ]

62:                                               ; preds = %52, %52
  %63 = icmp eq ptr %56, null
  br i1 %63, label %75, label %64

64:                                               ; preds = %62
  %65 = icmp eq ptr %53, null
  br i1 %65, label %75, label %230

66:                                               ; preds = %52, %52, %52, %52
  %67 = icmp eq ptr %54, null
  br i1 %67, label %75, label %230

68:                                               ; preds = %52
  %69 = icmp eq ptr %53, null
  br i1 %69, label %70, label %230

70:                                               ; preds = %68
  %71 = getelementptr inbounds %struct.rtx_def, ptr %59, i64 0, i32 1
  %72 = load ptr, ptr %71, align 8, !tbaa !16
  %73 = getelementptr inbounds %struct.rtx_def, ptr %59, i64 0, i32 1, i32 0, i32 0, i64 1
  %74 = load ptr, ptr %73, align 8, !tbaa !16
  br label %75

75:                                               ; preds = %70, %66, %64, %62
  %76 = phi ptr [ %72, %70 ], [ %53, %62 ], [ %59, %64 ], [ %53, %66 ]
  %77 = phi ptr [ %54, %70 ], [ %54, %62 ], [ %54, %64 ], [ %59, %66 ]
  %78 = phi ptr [ %74, %70 ], [ %55, %62 ], [ %55, %64 ], [ %55, %66 ]
  %79 = phi ptr [ %56, %70 ], [ %59, %62 ], [ %56, %64 ], [ %56, %66 ]
  br i1 %13, label %80, label %231, !llvm.loop !165

80:                                               ; preds = %75
  %81 = add nsw i64 %34, -2
  %82 = getelementptr inbounds [4 x ptr], ptr %3, i64 0, i64 %81
  %83 = load ptr, ptr %82, align 8, !tbaa !5
  %84 = load i32, ptr %83, align 8
  %85 = trunc i32 %84 to i16
  switch i16 %85, label %230 [
    i16 52, label %92
    i16 44, label %90
    i16 37, label %86
    i16 39, label %86
    i16 35, label %90
    i16 30, label %90
    i16 45, label %90
  ]

86:                                               ; preds = %80, %80
  %87 = icmp eq ptr %79, null
  br i1 %87, label %99, label %88

88:                                               ; preds = %86
  %89 = icmp eq ptr %76, null
  br i1 %89, label %99, label %230

90:                                               ; preds = %80, %80, %80, %80
  %91 = icmp eq ptr %77, null
  br i1 %91, label %99, label %230

92:                                               ; preds = %80
  %93 = icmp eq ptr %76, null
  br i1 %93, label %94, label %230

94:                                               ; preds = %92
  %95 = getelementptr inbounds %struct.rtx_def, ptr %83, i64 0, i32 1
  %96 = load ptr, ptr %95, align 8, !tbaa !16
  %97 = getelementptr inbounds %struct.rtx_def, ptr %83, i64 0, i32 1, i32 0, i32 0, i64 1
  %98 = load ptr, ptr %97, align 8, !tbaa !16
  br label %99

99:                                               ; preds = %94, %90, %88, %86
  %100 = phi ptr [ %96, %94 ], [ %76, %86 ], [ %83, %88 ], [ %76, %90 ]
  %101 = phi ptr [ %77, %94 ], [ %77, %86 ], [ %77, %88 ], [ %83, %90 ]
  %102 = phi ptr [ %98, %94 ], [ %78, %86 ], [ %78, %88 ], [ %78, %90 ]
  %103 = phi ptr [ %79, %94 ], [ %83, %86 ], [ %79, %88 ], [ %79, %90 ]
  br i1 %33, label %104, label %231, !llvm.loop !165

104:                                              ; preds = %99
  %105 = add nsw i64 %34, -3
  %106 = getelementptr inbounds [4 x ptr], ptr %3, i64 0, i64 %105
  %107 = load ptr, ptr %106, align 8, !tbaa !5
  %108 = load i32, ptr %107, align 8
  %109 = trunc i32 %108 to i16
  switch i16 %109, label %230 [
    i16 52, label %116
    i16 44, label %114
    i16 37, label %110
    i16 39, label %110
    i16 35, label %114
    i16 30, label %114
    i16 45, label %114
  ]

110:                                              ; preds = %104, %104
  %111 = icmp eq ptr %103, null
  br i1 %111, label %231, label %112

112:                                              ; preds = %110
  %113 = icmp eq ptr %100, null
  br i1 %113, label %231, label %230

114:                                              ; preds = %104, %104, %104, %104
  %115 = icmp eq ptr %101, null
  br i1 %115, label %231, label %230

116:                                              ; preds = %104
  %117 = icmp eq ptr %100, null
  br i1 %117, label %118, label %230

118:                                              ; preds = %116
  %119 = getelementptr inbounds %struct.rtx_def, ptr %107, i64 0, i32 1
  %120 = load ptr, ptr %119, align 8, !tbaa !16
  %121 = getelementptr inbounds %struct.rtx_def, ptr %107, i64 0, i32 1, i32 0, i32 0, i64 1
  %122 = load ptr, ptr %121, align 8, !tbaa !16
  br label %231

123:                                              ; preds = %32
  %124 = getelementptr inbounds [4 x ptr], ptr %3, i64 0, i64 %34
  %125 = load ptr, ptr %124, align 8, !tbaa !5
  %126 = load i32, ptr %125, align 8
  %127 = trunc i32 %126 to i16
  switch i16 %127, label %230 [
    i16 52, label %128
    i16 18, label %133
    i16 37, label %138
    i16 39, label %138
    i16 35, label %137
    i16 30, label %137
    i16 45, label %137
    i16 44, label %137
  ]

128:                                              ; preds = %123
  %129 = getelementptr inbounds %struct.rtx_def, ptr %125, i64 0, i32 1
  %130 = load ptr, ptr %129, align 8, !tbaa !16
  %131 = getelementptr inbounds %struct.rtx_def, ptr %125, i64 0, i32 1, i32 0, i32 0, i64 1
  %132 = load ptr, ptr %131, align 8, !tbaa !16
  br label %138

133:                                              ; preds = %123
  %134 = getelementptr inbounds %struct.rtx_def, ptr %125, i64 0, i32 1, i32 0, i32 0, i64 1
  %135 = load i32, ptr %134, align 8, !tbaa !16
  %136 = icmp eq i32 %135, 20
  br i1 %136, label %138, label %230

137:                                              ; preds = %123, %123, %123, %123
  br label %138

138:                                              ; preds = %128, %133, %137, %123, %123
  %139 = phi ptr [ %130, %128 ], [ null, %137 ], [ null, %133 ], [ null, %123 ], [ null, %123 ]
  %140 = phi ptr [ null, %128 ], [ %125, %137 ], [ null, %133 ], [ null, %123 ], [ null, %123 ]
  %141 = phi ptr [ %132, %128 ], [ null, %137 ], [ null, %133 ], [ null, %123 ], [ null, %123 ]
  %142 = phi i1 [ true, %128 ], [ true, %137 ], [ false, %133 ], [ true, %123 ], [ true, %123 ]
  %143 = phi i32 [ 0, %128 ], [ 0, %137 ], [ 2, %133 ], [ 0, %123 ], [ 0, %123 ]
  %144 = phi ptr [ null, %128 ], [ null, %137 ], [ null, %133 ], [ %125, %123 ], [ %125, %123 ]
  %145 = add nsw i64 %34, -1
  %146 = getelementptr inbounds [4 x ptr], ptr %3, i64 0, i64 %145
  %147 = load ptr, ptr %146, align 8, !tbaa !5
  %148 = load i32, ptr %147, align 8
  %149 = trunc i32 %148 to i16
  switch i16 %149, label %230 [
    i16 52, label %161
    i16 18, label %156
    i16 37, label %152
    i16 39, label %152
    i16 35, label %150
    i16 30, label %150
    i16 45, label %150
    i16 44, label %150
  ]

150:                                              ; preds = %138, %138, %138, %138
  %151 = icmp eq ptr %140, null
  br i1 %151, label %168, label %230

152:                                              ; preds = %138, %138
  %153 = icmp eq ptr %144, null
  br i1 %153, label %168, label %154

154:                                              ; preds = %152
  %155 = icmp eq ptr %139, null
  br i1 %155, label %168, label %230

156:                                              ; preds = %138
  %157 = getelementptr inbounds %struct.rtx_def, ptr %147, i64 0, i32 1, i32 0, i32 0, i64 1
  %158 = load i32, ptr %157, align 8, !tbaa !16
  %159 = icmp eq i32 %158, 20
  %160 = and i1 %159, %142
  br i1 %160, label %168, label %230

161:                                              ; preds = %138
  %162 = icmp eq ptr %139, null
  br i1 %162, label %163, label %230

163:                                              ; preds = %161
  %164 = getelementptr inbounds %struct.rtx_def, ptr %147, i64 0, i32 1
  %165 = load ptr, ptr %164, align 8, !tbaa !16
  %166 = getelementptr inbounds %struct.rtx_def, ptr %147, i64 0, i32 1, i32 0, i32 0, i64 1
  %167 = load ptr, ptr %166, align 8, !tbaa !16
  br label %168

168:                                              ; preds = %163, %156, %154, %152, %150
  %169 = phi ptr [ %165, %163 ], [ %139, %152 ], [ %147, %154 ], [ %139, %150 ], [ %139, %156 ]
  %170 = phi ptr [ %140, %163 ], [ %140, %152 ], [ %140, %154 ], [ %147, %150 ], [ %140, %156 ]
  %171 = phi ptr [ %167, %163 ], [ %141, %152 ], [ %141, %154 ], [ %141, %150 ], [ %141, %156 ]
  %172 = phi i32 [ %143, %163 ], [ %143, %152 ], [ %143, %154 ], [ %143, %150 ], [ 2, %156 ]
  %173 = phi ptr [ %144, %163 ], [ %147, %152 ], [ %144, %154 ], [ %144, %150 ], [ %144, %156 ]
  br i1 %13, label %174, label %231, !llvm.loop !165

174:                                              ; preds = %168
  %175 = add nsw i64 %34, -2
  %176 = getelementptr inbounds [4 x ptr], ptr %3, i64 0, i64 %175
  %177 = load ptr, ptr %176, align 8, !tbaa !5
  %178 = load i32, ptr %177, align 8
  %179 = trunc i32 %178 to i16
  switch i16 %179, label %230 [
    i16 52, label %192
    i16 18, label %186
    i16 37, label %182
    i16 39, label %182
    i16 35, label %180
    i16 30, label %180
    i16 45, label %180
    i16 44, label %180
  ]

180:                                              ; preds = %174, %174, %174, %174
  %181 = icmp eq ptr %170, null
  br i1 %181, label %199, label %230

182:                                              ; preds = %174, %174
  %183 = icmp eq ptr %173, null
  br i1 %183, label %199, label %184

184:                                              ; preds = %182
  %185 = icmp eq ptr %169, null
  br i1 %185, label %199, label %230

186:                                              ; preds = %174
  %187 = getelementptr inbounds %struct.rtx_def, ptr %177, i64 0, i32 1, i32 0, i32 0, i64 1
  %188 = load i32, ptr %187, align 8, !tbaa !16
  %189 = icmp eq i32 %188, 20
  %190 = icmp eq i32 %172, 0
  %191 = and i1 %189, %190
  br i1 %191, label %199, label %230

192:                                              ; preds = %174
  %193 = icmp eq ptr %169, null
  br i1 %193, label %194, label %230

194:                                              ; preds = %192
  %195 = getelementptr inbounds %struct.rtx_def, ptr %177, i64 0, i32 1
  %196 = load ptr, ptr %195, align 8, !tbaa !16
  %197 = getelementptr inbounds %struct.rtx_def, ptr %177, i64 0, i32 1, i32 0, i32 0, i64 1
  %198 = load ptr, ptr %197, align 8, !tbaa !16
  br label %199

199:                                              ; preds = %194, %186, %184, %182, %180
  %200 = phi ptr [ %196, %194 ], [ %169, %182 ], [ %177, %184 ], [ %169, %180 ], [ %169, %186 ]
  %201 = phi ptr [ %170, %194 ], [ %170, %182 ], [ %170, %184 ], [ %177, %180 ], [ %170, %186 ]
  %202 = phi ptr [ %198, %194 ], [ %171, %182 ], [ %171, %184 ], [ %171, %180 ], [ %171, %186 ]
  %203 = phi i32 [ %172, %194 ], [ %172, %182 ], [ %172, %184 ], [ %172, %180 ], [ 2, %186 ]
  %204 = phi ptr [ %173, %194 ], [ %177, %182 ], [ %173, %184 ], [ %173, %180 ], [ %173, %186 ]
  br i1 %33, label %205, label %231, !llvm.loop !165

205:                                              ; preds = %199
  %206 = add nsw i64 %34, -3
  %207 = getelementptr inbounds [4 x ptr], ptr %3, i64 0, i64 %206
  %208 = load ptr, ptr %207, align 8, !tbaa !5
  %209 = load i32, ptr %208, align 8
  %210 = trunc i32 %209 to i16
  switch i16 %210, label %230 [
    i16 52, label %223
    i16 18, label %217
    i16 37, label %213
    i16 39, label %213
    i16 35, label %211
    i16 30, label %211
    i16 45, label %211
    i16 44, label %211
  ]

211:                                              ; preds = %205, %205, %205, %205
  %212 = icmp eq ptr %201, null
  br i1 %212, label %231, label %230

213:                                              ; preds = %205, %205
  %214 = icmp eq ptr %204, null
  br i1 %214, label %231, label %215

215:                                              ; preds = %213
  %216 = icmp eq ptr %200, null
  br i1 %216, label %231, label %230

217:                                              ; preds = %205
  %218 = getelementptr inbounds %struct.rtx_def, ptr %208, i64 0, i32 1, i32 0, i32 0, i64 1
  %219 = load i32, ptr %218, align 8, !tbaa !16
  %220 = icmp eq i32 %219, 20
  %221 = icmp eq i32 %203, 0
  %222 = and i1 %220, %221
  br i1 %222, label %231, label %230

223:                                              ; preds = %205
  %224 = icmp eq ptr %200, null
  br i1 %224, label %225, label %230

225:                                              ; preds = %223
  %226 = getelementptr inbounds %struct.rtx_def, ptr %208, i64 0, i32 1
  %227 = load ptr, ptr %226, align 8, !tbaa !16
  %228 = getelementptr inbounds %struct.rtx_def, ptr %208, i64 0, i32 1, i32 0, i32 0, i64 1
  %229 = load ptr, ptr %228, align 8, !tbaa !16
  br label %231

230:                                              ; preds = %123, %133, %138, %150, %154, %156, %161, %174, %180, %184, %186, %192, %205, %211, %215, %217, %223, %41, %52, %64, %66, %68, %80, %88, %90, %92, %104, %112, %114, %116, %23
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %3) #30
  br label %416

231:                                              ; preds = %168, %199, %225, %217, %215, %213, %211, %75, %99, %118, %114, %112, %110
  %232 = phi ptr [ %76, %75 ], [ %100, %99 ], [ %120, %118 ], [ %100, %110 ], [ %107, %112 ], [ %100, %114 ], [ %169, %168 ], [ %200, %199 ], [ %227, %225 ], [ %200, %213 ], [ %208, %215 ], [ %200, %211 ], [ %200, %217 ]
  %233 = phi ptr [ %77, %75 ], [ %101, %99 ], [ %101, %118 ], [ %101, %110 ], [ %101, %112 ], [ %107, %114 ], [ %170, %168 ], [ %201, %199 ], [ %201, %225 ], [ %201, %213 ], [ %201, %215 ], [ %208, %211 ], [ %201, %217 ]
  %234 = phi ptr [ %78, %75 ], [ %102, %99 ], [ %122, %118 ], [ %102, %110 ], [ %102, %112 ], [ %102, %114 ], [ %171, %168 ], [ %202, %199 ], [ %229, %225 ], [ %202, %213 ], [ %202, %215 ], [ %202, %211 ], [ %202, %217 ]
  %235 = phi i32 [ 0, %110 ], [ 0, %112 ], [ 0, %114 ], [ 0, %118 ], [ 0, %99 ], [ 0, %75 ], [ %172, %168 ], [ %203, %199 ], [ %203, %225 ], [ %203, %213 ], [ %203, %215 ], [ %203, %211 ], [ 2, %217 ]
  %236 = phi ptr [ %79, %75 ], [ %103, %99 ], [ %103, %118 ], [ %107, %110 ], [ %103, %112 ], [ %103, %114 ], [ %173, %168 ], [ %204, %199 ], [ %204, %225 ], [ %208, %213 ], [ %204, %215 ], [ %204, %211 ], [ %204, %217 ]
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %3) #30
  br label %258

237:                                              ; preds = %2
  %238 = getelementptr inbounds %struct.rtx_def, ptr %0, i64 0, i32 1
  %239 = load ptr, ptr %238, align 8, !tbaa !16
  %240 = getelementptr inbounds %struct.rtx_def, ptr %0, i64 0, i32 1, i32 0, i32 0, i64 1
  %241 = load ptr, ptr %240, align 8, !tbaa !16
  br label %258

242:                                              ; preds = %2
  %243 = getelementptr inbounds %struct.rtx_def, ptr %0, i64 0, i32 1
  %244 = load ptr, ptr %243, align 8, !tbaa !16
  %245 = getelementptr inbounds %struct.rtx_def, ptr %0, i64 0, i32 1, i32 0, i32 0, i64 1
  %246 = load ptr, ptr %245, align 8, !tbaa !16
  %247 = load i32, ptr %246, align 8
  %248 = and i32 %247, 65535
  %249 = icmp eq i32 %248, 30
  br i1 %249, label %250, label %416

250:                                              ; preds = %242
  %251 = getelementptr inbounds %struct.rtx_def, ptr %246, i64 0, i32 1
  %252 = load i64, ptr %251, align 8, !tbaa !16
  %253 = icmp ugt i64 %252, 3
  br i1 %253, label %416, label %254

254:                                              ; preds = %250
  %255 = trunc i64 %252 to i32
  %256 = shl nuw nsw i32 1, %255
  %257 = zext i32 %256 to i64
  br label %289

258:                                              ; preds = %231, %237
  %259 = phi ptr [ %232, %231 ], [ %239, %237 ]
  %260 = phi ptr [ %233, %231 ], [ null, %237 ]
  %261 = phi ptr [ %234, %231 ], [ %241, %237 ]
  %262 = phi i32 [ %235, %231 ], [ 0, %237 ]
  %263 = phi ptr [ %236, %231 ], [ null, %237 ]
  %264 = icmp eq ptr %261, null
  br i1 %264, label %272, label %265

265:                                              ; preds = %258
  %266 = load i32, ptr %261, align 8
  %267 = and i32 %266, 65535
  %268 = icmp eq i32 %267, 30
  br i1 %268, label %269, label %416

269:                                              ; preds = %265
  %270 = getelementptr inbounds %struct.rtx_def, ptr %261, i64 0, i32 1
  %271 = load i64, ptr %270, align 8, !tbaa !16
  br label %272

272:                                              ; preds = %269, %258
  %273 = phi i64 [ %271, %269 ], [ 1, %258 ]
  %274 = icmp eq ptr %263, null
  br i1 %274, label %289, label %275

275:                                              ; preds = %272
  %276 = load i32, ptr %263, align 8
  br label %277

277:                                              ; preds = %275, %2, %2
  %278 = phi i32 [ %276, %275 ], [ %4, %2 ], [ %4, %2 ]
  %279 = phi i64 [ %273, %275 ], [ 1, %2 ], [ 1, %2 ]
  %280 = phi ptr [ %259, %275 ], [ null, %2 ], [ null, %2 ]
  %281 = phi ptr [ %260, %275 ], [ null, %2 ], [ null, %2 ]
  %282 = phi i32 [ %262, %275 ], [ 0, %2 ], [ 0, %2 ]
  %283 = phi ptr [ %263, %275 ], [ %0, %2 ], [ %0, %2 ]
  %284 = and i32 %278, 65535
  %285 = icmp eq i32 %284, 39
  br i1 %285, label %286, label %289

286:                                              ; preds = %277
  %287 = getelementptr inbounds %struct.rtx_def, ptr %283, i64 0, i32 1
  %288 = load ptr, ptr %287, align 8, !tbaa !16
  br label %289

289:                                              ; preds = %254, %272, %277, %286
  %290 = phi i1 [ true, %286 ], [ true, %277 ], [ false, %272 ], [ false, %254 ]
  %291 = phi i64 [ %279, %286 ], [ %279, %277 ], [ %273, %272 ], [ %257, %254 ]
  %292 = phi ptr [ %280, %286 ], [ %280, %277 ], [ %259, %272 ], [ %244, %254 ]
  %293 = phi ptr [ %281, %286 ], [ %281, %277 ], [ %260, %272 ], [ null, %254 ]
  %294 = phi i32 [ 1, %286 ], [ 1, %277 ], [ 1, %272 ], [ -1, %254 ]
  %295 = phi i32 [ %282, %286 ], [ %282, %277 ], [ %262, %272 ], [ 0, %254 ]
  %296 = phi ptr [ %283, %286 ], [ %283, %277 ], [ null, %272 ], [ null, %254 ]
  %297 = phi ptr [ %288, %286 ], [ %283, %277 ], [ null, %272 ], [ null, %254 ]
  %298 = icmp eq ptr %292, null
  br i1 %298, label %306, label %299

299:                                              ; preds = %289
  %300 = load i32, ptr %292, align 8
  %301 = and i32 %300, 65535
  %302 = icmp eq i32 %301, 39
  br i1 %302, label %303, label %306

303:                                              ; preds = %299
  %304 = getelementptr inbounds %struct.rtx_def, ptr %292, i64 0, i32 1
  %305 = load ptr, ptr %304, align 8, !tbaa !16
  br label %306

306:                                              ; preds = %2, %289, %299, %303
  %307 = phi i1 [ true, %303 ], [ true, %299 ], [ false, %289 ], [ false, %2 ]
  %308 = phi ptr [ %297, %303 ], [ %297, %299 ], [ %297, %289 ], [ null, %2 ]
  %309 = phi ptr [ %296, %303 ], [ %296, %299 ], [ %296, %289 ], [ null, %2 ]
  %310 = phi i32 [ %295, %303 ], [ %295, %299 ], [ %295, %289 ], [ 0, %2 ]
  %311 = phi i32 [ %294, %303 ], [ %294, %299 ], [ %294, %289 ], [ 1, %2 ]
  %312 = phi ptr [ %293, %303 ], [ %293, %299 ], [ %293, %289 ], [ %0, %2 ]
  %313 = phi ptr [ %292, %303 ], [ %292, %299 ], [ null, %289 ], [ null, %2 ]
  %314 = phi i64 [ %291, %303 ], [ %291, %299 ], [ %291, %289 ], [ 1, %2 ]
  %315 = phi i1 [ %290, %303 ], [ %290, %299 ], [ %290, %289 ], [ false, %2 ]
  %316 = phi ptr [ %305, %303 ], [ %292, %299 ], [ null, %289 ], [ null, %2 ]
  %317 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 64), align 16
  %318 = icmp eq ptr %312, %317
  %319 = or i1 %307, %315
  %320 = and i1 %319, %318
  %321 = select i1 %320, ptr null, ptr %312
  %322 = icmp ne ptr %308, null
  %323 = icmp ne ptr %316, null
  %324 = select i1 %322, i1 %323, i1 false
  %325 = icmp eq i64 %314, 1
  %326 = select i1 %324, i1 %325, i1 false
  br i1 %326, label %327, label %342

327:                                              ; preds = %306
  %328 = load ptr, ptr getelementptr inbounds ([11 x ptr], ptr @global_rtl, i64 0, i64 5), align 8, !tbaa !5
  %329 = icmp eq ptr %316, %328
  %330 = load ptr, ptr getelementptr inbounds ([11 x ptr], ptr @global_rtl, i64 0, i64 3), align 8
  %331 = icmp eq ptr %316, %330
  %332 = select i1 %329, i1 true, i1 %331
  br i1 %332, label %341, label %333

333:                                              ; preds = %327
  %334 = load i32, ptr %316, align 8
  %335 = and i32 %334, 65535
  %336 = icmp eq i32 %335, 37
  br i1 %336, label %337, label %342

337:                                              ; preds = %333
  %338 = getelementptr i8, ptr %316, i64 8
  %339 = load i32, ptr %338, align 8, !tbaa !16
  %340 = icmp eq i32 %339, 7
  br i1 %340, label %341, label %342

341:                                              ; preds = %337, %327
  br label %342

342:                                              ; preds = %341, %337, %333, %306
  %343 = phi ptr [ %309, %341 ], [ %313, %337 ], [ %313, %333 ], [ %313, %306 ]
  %344 = phi ptr [ %316, %341 ], [ %308, %337 ], [ %308, %333 ], [ %308, %306 ]
  %345 = phi ptr [ %308, %341 ], [ %316, %337 ], [ %316, %333 ], [ %316, %306 ]
  %346 = phi ptr [ %313, %341 ], [ %309, %337 ], [ %309, %333 ], [ %309, %306 ]
  %347 = icmp eq ptr %321, null
  %348 = icmp ne ptr %344, null
  %349 = select i1 %347, i1 %348, i1 false
  br i1 %349, label %350, label %367

350:                                              ; preds = %342
  %351 = load ptr, ptr getelementptr inbounds ([11 x ptr], ptr @global_rtl, i64 0, i64 4), align 16, !tbaa !5
  %352 = icmp eq ptr %344, %351
  %353 = load ptr, ptr getelementptr inbounds ([11 x ptr], ptr @global_rtl, i64 0, i64 3), align 8
  %354 = icmp eq ptr %344, %353
  %355 = select i1 %352, i1 true, i1 %354
  %356 = load ptr, ptr getelementptr inbounds ([11 x ptr], ptr @global_rtl, i64 0, i64 5), align 8
  %357 = icmp eq ptr %344, %356
  %358 = select i1 %355, i1 true, i1 %357
  br i1 %358, label %366, label %359

359:                                              ; preds = %350
  %360 = load i32, ptr %344, align 8
  %361 = and i32 %360, 65535
  %362 = icmp eq i32 %361, 37
  br i1 %362, label %363, label %367

363:                                              ; preds = %359
  %364 = getelementptr i8, ptr %344, i64 8
  %365 = load i32, ptr %364, align 8, !tbaa !16
  switch i32 %365, label %367 [
    i32 6, label %366
    i32 42, label %366
  ]

366:                                              ; preds = %363, %363, %350
  br label %367

367:                                              ; preds = %363, %366, %359, %342
  %368 = phi ptr [ %317, %366 ], [ null, %359 ], [ %321, %342 ], [ null, %363 ]
  %369 = load i32, ptr @ix86_tune, align 4, !tbaa !16
  %370 = icmp eq i32 %369, 5
  %371 = load ptr, ptr @cfun, align 8
  %372 = icmp ne ptr %371, null
  %373 = select i1 %370, i1 %372, i1 false
  br i1 %373, label %374, label %395

374:                                              ; preds = %367
  %375 = tail call zeroext i8 @optimize_function_for_speed_p(ptr noundef nonnull %371) #30
  %376 = icmp ne i8 %375, 0
  %377 = select i1 %376, i1 %348, i1 false
  %378 = xor i1 %377, true
  %379 = icmp ne ptr %345, null
  %380 = select i1 %378, i1 true, i1 %379
  %381 = icmp ne ptr %368, null
  %382 = select i1 %380, i1 true, i1 %381
  br i1 %382, label %383, label %385

383:                                              ; preds = %374
  %384 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 64), align 16
  br label %395

385:                                              ; preds = %374
  %386 = load i32, ptr %344, align 8
  %387 = and i32 %386, 65535
  %388 = icmp eq i32 %387, 37
  %389 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 64), align 16
  br i1 %388, label %390, label %395

390:                                              ; preds = %385
  %391 = getelementptr i8, ptr %344, i64 8
  %392 = load i32, ptr %391, align 8, !tbaa !16
  %393 = icmp eq i32 %392, 4
  %394 = select i1 %393, ptr %389, ptr null
  br label %395

395:                                              ; preds = %383, %390, %385, %367
  %396 = phi ptr [ %384, %383 ], [ %389, %385 ], [ %317, %367 ], [ %389, %390 ]
  %397 = phi ptr [ %368, %383 ], [ null, %385 ], [ %368, %367 ], [ %394, %390 ]
  %398 = icmp eq ptr %346, null
  %399 = icmp ne ptr %343, null
  %400 = and i1 %399, %398
  %401 = icmp eq i64 %314, 2
  %402 = select i1 %400, i1 %401, i1 false
  %403 = select i1 %402, i64 1, i64 %314
  %404 = select i1 %402, ptr %343, ptr %346
  %405 = icmp eq ptr %404, null
  %406 = icmp eq ptr %397, null
  %407 = select i1 %405, i1 %406, i1 false
  %408 = and i1 %399, %407
  %409 = icmp ne i64 %403, 1
  %410 = select i1 %408, i1 %409, i1 false
  %411 = select i1 %410, ptr %396, ptr %397
  store ptr %404, ptr %1, align 8, !tbaa !166
  %412 = getelementptr inbounds %struct.ix86_address, ptr %1, i64 0, i32 1
  store ptr %343, ptr %412, align 8, !tbaa !168
  %413 = getelementptr inbounds %struct.ix86_address, ptr %1, i64 0, i32 2
  store ptr %411, ptr %413, align 8, !tbaa !169
  %414 = getelementptr inbounds %struct.ix86_address, ptr %1, i64 0, i32 3
  store i64 %403, ptr %414, align 8, !tbaa !170
  %415 = getelementptr inbounds %struct.ix86_address, ptr %1, i64 0, i32 4
  store i32 %310, ptr %415, align 8, !tbaa !171
  br label %416

416:                                              ; preds = %250, %242, %230, %265, %395
  %417 = phi i32 [ %311, %395 ], [ 0, %265 ], [ 0, %230 ], [ 0, %242 ], [ 0, %250 ]
  ret i32 %417
}

declare zeroext i8 @optimize_function_for_speed_p(ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define dso_local zeroext i8 @legitimate_constant_p(ptr noundef %0) local_unnamed_addr #9 {
  %2 = load i32, ptr %0, align 8
  %3 = trunc i32 %2 to i16
  switch i16 %3, label %86 [
    i16 35, label %4
    i16 45, label %53
    i16 32, label %59
    i16 33, label %65
  ]

4:                                                ; preds = %1
  %5 = getelementptr inbounds %struct.rtx_def, ptr %0, i64 0, i32 1
  %6 = load ptr, ptr %5, align 8, !tbaa !16
  %7 = load i32, ptr %6, align 8
  %8 = and i32 %7, 65535
  %9 = icmp eq i32 %8, 49
  br i1 %9, label %10, label %20

10:                                               ; preds = %4
  %11 = getelementptr inbounds %struct.rtx_def, ptr %6, i64 0, i32 1, i32 0, i32 0, i64 1
  %12 = load ptr, ptr %11, align 8, !tbaa !16
  %13 = load i32, ptr %12, align 8
  %14 = and i32 %13, 65535
  %15 = icmp eq i32 %14, 30
  br i1 %15, label %16, label %87

16:                                               ; preds = %10
  %17 = getelementptr inbounds %struct.rtx_def, ptr %6, i64 0, i32 1
  %18 = load ptr, ptr %17, align 8, !tbaa !16
  %19 = load i32, ptr %18, align 8
  br label %20

20:                                               ; preds = %16, %4
  %21 = phi i32 [ %19, %16 ], [ %7, %4 ]
  %22 = phi ptr [ %18, %16 ], [ %6, %4 ]
  %23 = trunc i32 %21 to i16
  switch i16 %23, label %52 [
    i16 18, label %24
    i16 44, label %87
    i16 45, label %53
  ]

24:                                               ; preds = %20
  %25 = getelementptr inbounds %struct.rtx_def, ptr %22, i64 0, i32 1
  %26 = getelementptr inbounds %struct.rtx_def, ptr %22, i64 0, i32 1, i32 0, i32 0, i64 1
  %27 = load i32, ptr %26, align 8, !tbaa !16
  switch i32 %27, label %87 [
    i32 6, label %40
    i32 5, label %28
    i32 4, label %28
  ]

28:                                               ; preds = %24, %24
  %29 = load ptr, ptr %25, align 8, !tbaa !16
  %30 = getelementptr inbounds %struct.rtvec_def, ptr %29, i64 0, i32 1
  %31 = load ptr, ptr %30, align 8, !tbaa !5
  %32 = load i32, ptr %31, align 8
  %33 = and i32 %32, 65535
  %34 = icmp eq i32 %33, 45
  br i1 %34, label %35, label %87

35:                                               ; preds = %28
  %36 = getelementptr inbounds %struct.rtx_def, ptr %31, i64 0, i32 1, i32 0, i32 0, i64 1
  %37 = load i32, ptr %36, align 8, !tbaa !16
  %38 = and i32 %37, 56
  %39 = icmp eq i32 %38, 40
  br label %87

40:                                               ; preds = %24
  %41 = load ptr, ptr %25, align 8, !tbaa !16
  %42 = getelementptr inbounds %struct.rtvec_def, ptr %41, i64 0, i32 1
  %43 = load ptr, ptr %42, align 8, !tbaa !5
  %44 = load i32, ptr %43, align 8
  %45 = and i32 %44, 65535
  %46 = icmp eq i32 %45, 45
  br i1 %46, label %47, label %87

47:                                               ; preds = %40
  %48 = getelementptr inbounds %struct.rtx_def, ptr %43, i64 0, i32 1, i32 0, i32 0, i64 1
  %49 = load i32, ptr %48, align 8, !tbaa !16
  %50 = and i32 %49, 56
  %51 = icmp eq i32 %50, 24
  br label %87

52:                                               ; preds = %20
  br label %87

53:                                               ; preds = %20, %1
  %54 = phi ptr [ %0, %1 ], [ %22, %20 ]
  %55 = getelementptr inbounds %struct.rtx_def, ptr %54, i64 0, i32 1, i32 0, i32 0, i64 1
  %56 = load i32, ptr %55, align 8, !tbaa !16
  %57 = and i32 %56, 56
  %58 = icmp eq i32 %57, 0
  br i1 %58, label %86, label %87

59:                                               ; preds = %1
  %60 = and i32 %2, 16711680
  %61 = icmp ne i32 %60, 1179648
  %62 = load ptr, ptr getelementptr inbounds ([3 x [87 x ptr]], ptr @const_tiny_rtx, i64 0, i64 0, i64 18), align 16
  %63 = icmp eq ptr %62, %0
  %64 = select i1 %61, i1 true, i1 %63
  br i1 %64, label %86, label %87

65:                                               ; preds = %1
  %66 = lshr i32 %2, 16
  %67 = and i32 %66, 255
  %68 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 64), align 16, !tbaa !5
  %69 = icmp eq ptr %68, %0
  br i1 %69, label %86, label %70

70:                                               ; preds = %65
  %71 = zext i32 %67 to i64
  %72 = getelementptr inbounds [87 x ptr], ptr @const_tiny_rtx, i64 0, i64 %71
  %73 = load ptr, ptr %72, align 8, !tbaa !5
  %74 = icmp eq ptr %73, %0
  br i1 %74, label %86, label %75

75:                                               ; preds = %70
  %76 = tail call i32 @vector_all_ones_operand(ptr noundef nonnull %0, i32 noundef %67) #30
  %77 = icmp ne i32 %76, 0
  %78 = trunc i32 %66 to i8
  %79 = add i8 %78, -63
  %80 = icmp ult i8 %79, 4
  %81 = and i1 %80, %77
  br i1 %81, label %82, label %87

82:                                               ; preds = %75
  %83 = load i32, ptr @ix86_isa_flags, align 4, !tbaa !20
  %84 = and i32 %83, 131072
  %85 = icmp eq i32 %84, 0
  br i1 %85, label %87, label %86

86:                                               ; preds = %82, %65, %70, %1, %59, %53
  br label %87

87:                                               ; preds = %82, %75, %59, %53, %20, %24, %40, %47, %28, %35, %10, %86, %52
  %88 = phi i1 [ true, %86 ], [ false, %52 ], [ false, %10 ], [ false, %28 ], [ %39, %35 ], [ false, %40 ], [ %51, %47 ], [ false, %24 ], [ true, %20 ], [ false, %53 ], [ false, %59 ], [ false, %75 ], [ false, %82 ]
  %89 = zext i1 %88 to i8
  ret i8 %89
}

; Function Attrs: nounwind sspstrong uwtable
define dso_local zeroext i8 @legitimate_pic_operand_p(ptr nocapture noundef readonly %0) local_unnamed_addr #9 {
  %2 = load i32, ptr %0, align 8
  %3 = trunc i32 %2 to i16
  switch i16 %3, label %48 [
    i16 35, label %4
    i16 45, label %45
    i16 44, label %45
  ]

4:                                                ; preds = %1
  %5 = getelementptr inbounds %struct.rtx_def, ptr %0, i64 0, i32 1
  %6 = load ptr, ptr %5, align 8, !tbaa !16
  %7 = load i32, ptr %6, align 8
  %8 = and i32 %7, 65535
  %9 = icmp eq i32 %8, 49
  br i1 %9, label %10, label %20

10:                                               ; preds = %4
  %11 = getelementptr inbounds %struct.rtx_def, ptr %6, i64 0, i32 1, i32 0, i32 0, i64 1
  %12 = load ptr, ptr %11, align 8, !tbaa !16
  %13 = load i32, ptr %12, align 8
  %14 = and i32 %13, 65535
  %15 = icmp eq i32 %14, 30
  br i1 %15, label %16, label %20

16:                                               ; preds = %10
  %17 = getelementptr inbounds %struct.rtx_def, ptr %6, i64 0, i32 1
  %18 = load ptr, ptr %17, align 8, !tbaa !16
  %19 = load i32, ptr %18, align 8
  br label %20

20:                                               ; preds = %16, %10, %4
  %21 = phi i32 [ %19, %16 ], [ %7, %10 ], [ %7, %4 ]
  %22 = phi ptr [ %18, %16 ], [ %6, %10 ], [ %6, %4 ]
  %23 = and i32 %21, 65535
  %24 = icmp eq i32 %23, 18
  br i1 %24, label %25, label %45

25:                                               ; preds = %20
  %26 = getelementptr inbounds %struct.rtx_def, ptr %22, i64 0, i32 1, i32 0, i32 0, i64 1
  %27 = load i32, ptr %26, align 8, !tbaa !16
  switch i32 %27, label %48 [
    i32 10, label %42
    i32 4, label %28
  ]

28:                                               ; preds = %25
  %29 = getelementptr inbounds %struct.rtx_def, ptr %22, i64 0, i32 1
  %30 = load ptr, ptr %29, align 8, !tbaa !16
  %31 = getelementptr inbounds %struct.rtvec_def, ptr %30, i64 0, i32 1
  %32 = load ptr, ptr %31, align 8, !tbaa !5
  %33 = load i32, ptr %32, align 8
  %34 = and i32 %33, 65535
  %35 = icmp eq i32 %34, 45
  br i1 %35, label %36, label %48

36:                                               ; preds = %28
  %37 = getelementptr inbounds %struct.rtx_def, ptr %32, i64 0, i32 1, i32 0, i32 0, i64 1
  %38 = load i32, ptr %37, align 8, !tbaa !16
  %39 = and i32 %38, 56
  %40 = icmp eq i32 %39, 40
  %41 = zext i1 %40 to i8
  br label %48

42:                                               ; preds = %25
  %43 = tail call i32 @legitimate_pic_address_disp_p(ptr noundef nonnull %0)
  %44 = trunc i32 %43 to i8
  br label %48

45:                                               ; preds = %20, %1, %1
  %46 = tail call i32 @legitimate_pic_address_disp_p(ptr noundef nonnull %0)
  %47 = trunc i32 %46 to i8
  br label %48

48:                                               ; preds = %1, %25, %28, %36, %45, %42
  %49 = phi i8 [ %47, %45 ], [ %44, %42 ], [ 0, %28 ], [ %41, %36 ], [ 0, %25 ], [ 1, %1 ]
  ret i8 %49
}

; Function Attrs: nounwind sspstrong uwtable
define dso_local i32 @legitimate_pic_address_disp_p(ptr nocapture noundef readonly %0) local_unnamed_addr #9 {
  %2 = load i32, ptr %0, align 8
  %3 = and i32 %2, 65535
  %4 = icmp eq i32 %3, 35
  br i1 %4, label %5, label %88

5:                                                ; preds = %1
  %6 = getelementptr inbounds %struct.rtx_def, ptr %0, i64 0, i32 1
  %7 = load ptr, ptr %6, align 8, !tbaa !16
  %8 = load i32, ptr %7, align 8
  %9 = and i32 %8, 65535
  %10 = icmp eq i32 %9, 49
  br i1 %10, label %11, label %21

11:                                               ; preds = %5
  %12 = getelementptr inbounds %struct.rtx_def, ptr %7, i64 0, i32 1, i32 0, i32 0, i64 1
  %13 = load ptr, ptr %12, align 8, !tbaa !16
  %14 = load i32, ptr %13, align 8
  %15 = and i32 %14, 65535
  %16 = icmp eq i32 %15, 30
  br i1 %16, label %17, label %88

17:                                               ; preds = %11
  %18 = getelementptr inbounds %struct.rtx_def, ptr %7, i64 0, i32 1
  %19 = load ptr, ptr %18, align 8, !tbaa !16
  %20 = load i32, ptr %19, align 8
  br label %21

21:                                               ; preds = %17, %5
  %22 = phi i32 [ %20, %17 ], [ %8, %5 ]
  %23 = phi ptr [ %19, %17 ], [ %7, %5 ]
  %24 = and i32 %22, 65535
  %25 = icmp eq i32 %24, 18
  br i1 %25, label %26, label %88

26:                                               ; preds = %21
  %27 = getelementptr inbounds %struct.rtx_def, ptr %23, i64 0, i32 1
  %28 = getelementptr inbounds %struct.rtx_def, ptr %23, i64 0, i32 1, i32 0, i32 0, i64 1
  %29 = load i32, ptr %28, align 8, !tbaa !16
  switch i32 %29, label %88 [
    i32 0, label %30
    i32 1, label %39
    i32 3, label %48
    i32 7, label %48
    i32 8, label %48
    i32 5, label %62
    i32 6, label %75
  ]

30:                                               ; preds = %26
  br i1 %10, label %88, label %31

31:                                               ; preds = %30
  %32 = load ptr, ptr %27, align 8, !tbaa !16
  %33 = getelementptr inbounds %struct.rtvec_def, ptr %32, i64 0, i32 1
  %34 = load ptr, ptr %33, align 8, !tbaa !5
  %35 = load i32, ptr %34, align 8
  %36 = and i32 %35, 65534
  %37 = icmp eq i32 %36, 44
  %38 = zext i1 %37 to i32
  br label %88

39:                                               ; preds = %26
  %40 = load ptr, ptr %27, align 8, !tbaa !16
  %41 = getelementptr inbounds %struct.rtvec_def, ptr %40, i64 0, i32 1
  %42 = load ptr, ptr %41, align 8, !tbaa !5
  %43 = load i32, ptr %42, align 8
  %44 = and i32 %43, 65534
  %45 = icmp eq i32 %44, 44
  br i1 %45, label %46, label %88

46:                                               ; preds = %39
  %47 = tail call i32 @gotoff_operand(ptr noundef nonnull %42, i32 noundef 16) #30
  br label %88

48:                                               ; preds = %26, %26, %26
  br i1 %10, label %88, label %49

49:                                               ; preds = %48
  %50 = load ptr, ptr %27, align 8, !tbaa !16
  %51 = getelementptr inbounds %struct.rtvec_def, ptr %50, i64 0, i32 1
  %52 = load ptr, ptr %51, align 8, !tbaa !5
  %53 = load i32, ptr %52, align 8
  %54 = and i32 %53, 65535
  %55 = icmp eq i32 %54, 45
  br i1 %55, label %56, label %88

56:                                               ; preds = %49
  %57 = getelementptr inbounds %struct.rtx_def, ptr %52, i64 0, i32 1, i32 0, i32 0, i64 1
  %58 = load i32, ptr %57, align 8, !tbaa !16
  %59 = and i32 %58, 56
  %60 = icmp eq i32 %59, 32
  %61 = zext i1 %60 to i32
  br label %88

62:                                               ; preds = %26
  %63 = load ptr, ptr %27, align 8, !tbaa !16
  %64 = getelementptr inbounds %struct.rtvec_def, ptr %63, i64 0, i32 1
  %65 = load ptr, ptr %64, align 8, !tbaa !5
  %66 = load i32, ptr %65, align 8
  %67 = and i32 %66, 65535
  %68 = icmp eq i32 %67, 45
  br i1 %68, label %69, label %88

69:                                               ; preds = %62
  %70 = getelementptr inbounds %struct.rtx_def, ptr %65, i64 0, i32 1, i32 0, i32 0, i64 1
  %71 = load i32, ptr %70, align 8, !tbaa !16
  %72 = and i32 %71, 56
  %73 = icmp eq i32 %72, 40
  %74 = zext i1 %73 to i32
  br label %88

75:                                               ; preds = %26
  %76 = load ptr, ptr %27, align 8, !tbaa !16
  %77 = getelementptr inbounds %struct.rtvec_def, ptr %76, i64 0, i32 1
  %78 = load ptr, ptr %77, align 8, !tbaa !5
  %79 = load i32, ptr %78, align 8
  %80 = and i32 %79, 65535
  %81 = icmp eq i32 %80, 45
  br i1 %81, label %82, label %88

82:                                               ; preds = %75
  %83 = getelementptr inbounds %struct.rtx_def, ptr %78, i64 0, i32 1, i32 0, i32 0, i64 1
  %84 = load i32, ptr %83, align 8, !tbaa !16
  %85 = and i32 %84, 56
  %86 = icmp eq i32 %85, 24
  %87 = zext i1 %86 to i32
  br label %88

88:                                               ; preds = %39, %26, %75, %82, %62, %69, %49, %56, %48, %30, %21, %11, %1, %46, %31
  %89 = phi i32 [ %47, %46 ], [ %38, %31 ], [ 0, %1 ], [ 0, %11 ], [ 0, %21 ], [ 0, %30 ], [ 0, %39 ], [ 0, %48 ], [ 0, %49 ], [ %61, %56 ], [ 0, %62 ], [ %74, %69 ], [ 0, %75 ], [ %87, %82 ], [ 0, %26 ]
  ret i32 %89
}

declare i32 @gotoff_operand(ptr noundef, i32 noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define dso_local zeroext i8 @constant_address_p(ptr noundef %0) local_unnamed_addr #9 {
  %2 = load i32, ptr %0, align 8
  %3 = and i32 %2, 65535
  %4 = zext i32 %3 to i64
  %5 = getelementptr inbounds [139 x i32], ptr @rtx_class, i64 0, i64 %4
  %6 = load i32, ptr %5, align 4, !tbaa !16
  %7 = icmp eq i32 %6, 9
  br i1 %7, label %8, label %10

8:                                                ; preds = %1
  %9 = tail call zeroext i8 @ix86_legitimate_address_p(i32 poison, ptr noundef nonnull %0, i8 noundef zeroext 1), !range !66
  br label %10

10:                                               ; preds = %8, %1
  %11 = phi i8 [ 0, %1 ], [ %9, %8 ]
  ret i8 %11
}

; Function Attrs: nounwind sspstrong uwtable
define internal zeroext i8 @ix86_legitimate_address_p(i32 %0, ptr noundef %1, i8 noundef zeroext %2) #9 {
  %4 = alloca %struct.ix86_address, align 8
  call void @llvm.lifetime.start.p0(i64 40, ptr nonnull %4) #30
  %5 = call i32 @ix86_decompose_address(ptr noundef %1, ptr noundef nonnull %4), !range !172
  %6 = icmp slt i32 %5, 1
  br i1 %6, label %170, label %7

7:                                                ; preds = %3
  %8 = load ptr, ptr %4, align 8, !tbaa !166
  %9 = getelementptr inbounds %struct.ix86_address, ptr %4, i64 0, i32 1
  %10 = load ptr, ptr %9, align 8, !tbaa !168
  %11 = getelementptr inbounds %struct.ix86_address, ptr %4, i64 0, i32 2
  %12 = load ptr, ptr %11, align 8, !tbaa !169
  %13 = getelementptr inbounds %struct.ix86_address, ptr %4, i64 0, i32 3
  %14 = load i64, ptr %13, align 8, !tbaa !170
  %15 = icmp eq ptr %8, null
  br i1 %15, label %69, label %16

16:                                               ; preds = %7
  %17 = load i32, ptr %8, align 8
  %18 = trunc i32 %17 to i16
  switch i16 %18, label %170 [
    i16 37, label %32
    i16 39, label %19
  ]

19:                                               ; preds = %16
  %20 = getelementptr inbounds %struct.rtx_def, ptr %8, i64 0, i32 1
  %21 = load ptr, ptr %20, align 8, !tbaa !16
  %22 = load i32, ptr %21, align 8
  %23 = and i32 %22, 65535
  %24 = icmp eq i32 %23, 37
  br i1 %24, label %25, label %170

25:                                               ; preds = %19
  %26 = lshr i32 %22, 16
  %27 = and i32 %26, 255
  %28 = zext i32 %27 to i64
  %29 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %28
  %30 = load i8, ptr %29, align 1, !tbaa !16
  %31 = icmp ult i8 %30, 5
  br i1 %31, label %32, label %170

32:                                               ; preds = %25, %16
  %33 = phi ptr [ %8, %16 ], [ %21, %25 ]
  %34 = and i32 %17, 16711680
  %35 = icmp eq i32 %34, 1048576
  br i1 %35, label %36, label %170

36:                                               ; preds = %32
  %37 = icmp eq i8 %2, 0
  %38 = getelementptr i8, ptr %33, i64 8
  %39 = load i32, ptr %38, align 8, !tbaa !16
  %40 = icmp ult i32 %39, 8
  br i1 %37, label %59, label %41

41:                                               ; preds = %36
  br i1 %40, label %69, label %42

42:                                               ; preds = %41
  %43 = zext i32 %39 to i64
  %44 = add nsw i64 %43, -37
  %45 = icmp ult i64 %44, 8
  %46 = and i32 %39, -5
  %47 = icmp eq i32 %46, 16
  %48 = or i1 %47, %45
  br i1 %48, label %69, label %49

49:                                               ; preds = %42
  %50 = load ptr, ptr @reg_renumber, align 8, !tbaa !5
  %51 = getelementptr inbounds i16, ptr %50, i64 %43
  %52 = load i16, ptr %51, align 2, !tbaa !173
  %53 = icmp ult i16 %52, 8
  br i1 %53, label %69, label %54

54:                                               ; preds = %49
  %55 = sext i16 %52 to i64
  %56 = and i64 %55, 4294967295
  %57 = add nsw i64 %56, -37
  %58 = icmp ult i64 %57, 8
  br i1 %58, label %69, label %170

59:                                               ; preds = %36
  %60 = zext i32 %39 to i64
  %61 = add nsw i64 %60, -37
  %62 = icmp ult i64 %61, 8
  %63 = select i1 %40, i1 true, i1 %62
  %64 = and i32 %39, -5
  %65 = icmp eq i32 %64, 16
  %66 = or i1 %65, %63
  %67 = icmp ugt i32 %39, 52
  %68 = or i1 %67, %66
  br i1 %68, label %69, label %170

69:                                               ; preds = %41, %42, %49, %54, %59, %7
  %70 = icmp eq ptr %10, null
  br i1 %70, label %119, label %71

71:                                               ; preds = %69
  %72 = load i32, ptr %10, align 8
  %73 = trunc i32 %72 to i16
  switch i16 %73, label %170 [
    i16 37, label %87
    i16 39, label %74
  ]

74:                                               ; preds = %71
  %75 = getelementptr inbounds %struct.rtx_def, ptr %10, i64 0, i32 1
  %76 = load ptr, ptr %75, align 8, !tbaa !16
  %77 = load i32, ptr %76, align 8
  %78 = and i32 %77, 65535
  %79 = icmp eq i32 %78, 37
  br i1 %79, label %80, label %170

80:                                               ; preds = %74
  %81 = lshr i32 %77, 16
  %82 = and i32 %81, 255
  %83 = zext i32 %82 to i64
  %84 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %83
  %85 = load i8, ptr %84, align 1, !tbaa !16
  %86 = icmp ult i8 %85, 5
  br i1 %86, label %87, label %170

87:                                               ; preds = %80, %71
  %88 = phi ptr [ %10, %71 ], [ %76, %80 ]
  %89 = and i32 %72, 16711680
  %90 = icmp eq i32 %89, 1048576
  br i1 %90, label %91, label %170

91:                                               ; preds = %87
  %92 = icmp eq i8 %2, 0
  %93 = getelementptr i8, ptr %88, i64 8
  %94 = load i32, ptr %93, align 8, !tbaa !16
  br i1 %92, label %111, label %95

95:                                               ; preds = %91
  %96 = icmp ult i32 %94, 7
  br i1 %96, label %118, label %97

97:                                               ; preds = %95
  %98 = zext i32 %94 to i64
  %99 = add nsw i64 %98, -37
  %100 = icmp ult i64 %99, 8
  br i1 %100, label %118, label %101

101:                                              ; preds = %97
  %102 = load ptr, ptr @reg_renumber, align 8, !tbaa !5
  %103 = getelementptr inbounds i16, ptr %102, i64 %98
  %104 = load i16, ptr %103, align 2, !tbaa !173
  %105 = icmp ult i16 %104, 7
  br i1 %105, label %118, label %106

106:                                              ; preds = %101
  %107 = sext i16 %104 to i64
  %108 = and i64 %107, 4294967295
  %109 = add nsw i64 %108, -37
  %110 = icmp ult i64 %109, 8
  br i1 %110, label %118, label %170

111:                                              ; preds = %91
  %112 = zext i32 %94 to i64
  %113 = add nsw i64 %112, -37
  %114 = icmp ult i64 %113, 8
  %115 = add i32 %94, -53
  %116 = icmp ult i32 %115, -46
  %117 = select i1 %116, i1 true, i1 %114
  br i1 %117, label %118, label %170

118:                                              ; preds = %95, %97, %101, %106, %111
  switch i64 %14, label %170 [
    i64 1, label %121
    i64 8, label %121
    i64 4, label %121
    i64 2, label %121
  ]

119:                                              ; preds = %69
  %120 = icmp eq i64 %14, 1
  br i1 %120, label %121, label %170

121:                                              ; preds = %118, %118, %118, %118, %119
  %122 = icmp eq ptr %12, null
  br i1 %122, label %169, label %123

123:                                              ; preds = %121
  %124 = load i32, ptr %12, align 8
  %125 = trunc i32 %124 to i16
  switch i16 %125, label %162 [
    i16 35, label %126
    i16 45, label %147
    i16 44, label %147
    i16 30, label %169
  ]

126:                                              ; preds = %123
  %127 = getelementptr inbounds %struct.rtx_def, ptr %12, i64 0, i32 1
  %128 = load ptr, ptr %127, align 8, !tbaa !16
  %129 = load i32, ptr %128, align 8
  %130 = and i32 %129, 65535
  %131 = icmp eq i32 %130, 18
  br i1 %131, label %132, label %141

132:                                              ; preds = %126
  %133 = getelementptr inbounds %struct.rtx_def, ptr %128, i64 0, i32 1, i32 0, i32 0, i64 1
  %134 = load i32, ptr %133, align 8, !tbaa !16
  switch i32 %134, label %170 [
    i32 10, label %141
    i32 0, label %135
    i32 1, label %135
    i32 2, label %138
    i32 3, label %169
    i32 7, label %169
    i32 8, label %169
    i32 5, label %169
    i32 6, label %169
  ]

135:                                              ; preds = %132, %132
  %136 = load i32, ptr @flag_pic, align 4, !tbaa !20
  %137 = icmp eq i32 %136, 0
  br i1 %137, label %150, label %152

138:                                              ; preds = %132
  %139 = load i32, ptr @flag_pic, align 4, !tbaa !20
  %140 = icmp eq i32 %139, 0
  br i1 %140, label %150, label %152

141:                                              ; preds = %126, %132
  %142 = tail call i32 @symbolic_reference_mentioned_p(ptr noundef nonnull %12)
  %143 = icmp ne i32 %142, 0
  %144 = load i32, ptr @flag_pic, align 4
  %145 = icmp ne i32 %144, 0
  %146 = select i1 %143, i1 %145, i1 false
  br i1 %146, label %152, label %157

147:                                              ; preds = %123, %123
  %148 = load i32, ptr @flag_pic, align 4, !tbaa !20
  %149 = icmp eq i32 %148, 0
  br i1 %149, label %155, label %152

150:                                              ; preds = %138, %135
  %151 = phi i32 [ 9945, %135 ], [ 9953, %138 ]
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef %151, ptr noundef nonnull @.str.131) #30
  br label %152

152:                                              ; preds = %150, %138, %135, %147, %141
  %153 = tail call i32 @legitimate_pic_address_disp_p(ptr noundef nonnull %12)
  %154 = icmp eq i32 %153, 0
  br i1 %154, label %170, label %169

155:                                              ; preds = %147
  %156 = icmp eq i16 %125, 44
  br i1 %156, label %169, label %162

157:                                              ; preds = %141
  %158 = tail call zeroext i8 @legitimate_constant_p(ptr noundef nonnull %12), !range !66
  %159 = icmp eq i8 %158, 0
  br i1 %159, label %160, label %169

160:                                              ; preds = %157
  %161 = load i32, ptr %12, align 8
  br label %162

162:                                              ; preds = %155, %160, %123
  %163 = phi i32 [ %161, %160 ], [ %124, %123 ], [ %124, %155 ]
  %164 = and i32 %163, 65535
  %165 = icmp eq i32 %164, 45
  br i1 %165, label %166, label %170

166:                                              ; preds = %162
  %167 = tail call zeroext i8 @legitimate_constant_p(ptr noundef nonnull %12), !range !66
  %168 = icmp eq i8 %167, 0
  br i1 %168, label %170, label %169

169:                                              ; preds = %155, %123, %132, %132, %132, %132, %132, %166, %157, %152, %121
  br label %170

170:                                              ; preds = %118, %111, %59, %119, %162, %166, %152, %132, %71, %80, %74, %87, %106, %16, %25, %19, %32, %54, %3, %169
  %171 = phi i8 [ 1, %169 ], [ 0, %3 ], [ 0, %54 ], [ 0, %32 ], [ 0, %19 ], [ 0, %25 ], [ 0, %16 ], [ 0, %106 ], [ 0, %87 ], [ 0, %74 ], [ 0, %80 ], [ 0, %71 ], [ 0, %132 ], [ 0, %152 ], [ 0, %166 ], [ 0, %162 ], [ 0, %119 ], [ 0, %59 ], [ 0, %111 ], [ 0, %118 ]
  call void @llvm.lifetime.end.p0(i64 40, ptr nonnull %4) #30
  ret i8 %171
}

; Function Attrs: nounwind sspstrong uwtable
define dso_local ptr @ix86_find_base_term(ptr noundef %0) local_unnamed_addr #9 {
  %2 = tail call ptr @ix86_delegitimize_address(ptr noundef %0)
  ret ptr %2
}

; Function Attrs: nounwind sspstrong uwtable
define internal ptr @ix86_delegitimize_address(ptr noundef %0) #9 {
  %2 = tail call ptr @delegitimize_mem_from_attrs(ptr noundef %0) #30
  %3 = load i32, ptr %2, align 8
  %4 = and i32 %3, 65535
  %5 = icmp eq i32 %4, 43
  br i1 %5, label %6, label %10

6:                                                ; preds = %1
  %7 = getelementptr inbounds %struct.rtx_def, ptr %2, i64 0, i32 1
  %8 = load ptr, ptr %7, align 8, !tbaa !16
  %9 = load i32, ptr %8, align 8
  br label %10

10:                                               ; preds = %6, %1
  %11 = phi i32 [ %9, %6 ], [ %3, %1 ]
  %12 = phi ptr [ %8, %6 ], [ %2, %1 ]
  %13 = and i32 %11, 65535
  %14 = icmp eq i32 %13, 49
  br i1 %14, label %15, label %166

15:                                               ; preds = %10
  %16 = getelementptr inbounds %struct.rtx_def, ptr %12, i64 0, i32 1
  %17 = getelementptr inbounds %struct.rtx_def, ptr %12, i64 0, i32 1, i32 0, i32 0, i64 1
  %18 = load ptr, ptr %17, align 8, !tbaa !16
  %19 = load i32, ptr %18, align 8
  %20 = and i32 %19, 65535
  %21 = icmp eq i32 %20, 35
  br i1 %21, label %22, label %166

22:                                               ; preds = %15
  %23 = load ptr, ptr %16, align 8, !tbaa !16
  %24 = load i32, ptr %23, align 8
  %25 = trunc i32 %24 to i16
  switch i16 %25, label %54 [
    i16 1, label %26
    i16 37, label %36
  ]

26:                                               ; preds = %22
  %27 = getelementptr inbounds %struct.rtx_def, ptr %23, i64 0, i32 1
  %28 = load ptr, ptr %27, align 8, !tbaa !16
  %29 = icmp eq ptr %28, null
  br i1 %29, label %54, label %30

30:                                               ; preds = %26
  %31 = load ptr, ptr @pic_offset_table_rtx, align 8, !tbaa !5
  %32 = icmp eq ptr %31, null
  br i1 %32, label %54, label %33

33:                                               ; preds = %30
  %34 = tail call i32 @rtx_equal_for_cselib_p(ptr noundef nonnull %23, ptr noundef nonnull %31) #30
  %35 = icmp eq i32 %34, 0
  br i1 %35, label %51, label %101

36:                                               ; preds = %22
  %37 = getelementptr i8, ptr %23, i64 8
  %38 = load i32, ptr %37, align 8, !tbaa !16
  %39 = load i32, ptr @flag_pic, align 4, !tbaa !20
  %40 = icmp eq i32 %39, 0
  br i1 %40, label %48, label %41

41:                                               ; preds = %36
  %42 = load i32, ptr @reload_completed, align 4, !tbaa !20
  %43 = icmp eq i32 %42, 0
  br i1 %43, label %48, label %44

44:                                               ; preds = %41
  %45 = load ptr, ptr @pic_offset_table_rtx, align 8, !tbaa !5
  %46 = getelementptr i8, ptr %45, i64 8
  %47 = load i32, ptr %46, align 8, !tbaa !16
  br label %48

48:                                               ; preds = %36, %41, %44
  %49 = phi i32 [ -1, %36 ], [ %47, %44 ], [ 3, %41 ]
  %50 = icmp eq i32 %38, %49
  br i1 %50, label %101, label %51

51:                                               ; preds = %33, %48
  %52 = load ptr, ptr %16, align 8, !tbaa !16
  %53 = load i32, ptr %52, align 8
  br label %54

54:                                               ; preds = %51, %22, %26, %30
  %55 = phi i32 [ %53, %51 ], [ %24, %22 ], [ %24, %26 ], [ %24, %30 ]
  %56 = phi ptr [ %52, %51 ], [ %23, %22 ], [ %23, %26 ], [ %23, %30 ]
  %57 = and i32 %55, 65535
  %58 = icmp eq i32 %57, 49
  br i1 %58, label %59, label %101

59:                                               ; preds = %54
  %60 = getelementptr inbounds %struct.rtx_def, ptr %56, i64 0, i32 1
  %61 = load ptr, ptr %60, align 8, !tbaa !16
  %62 = load i32, ptr %61, align 8
  %63 = trunc i32 %62 to i16
  switch i16 %63, label %92 [
    i16 1, label %64
    i16 37, label %74
  ]

64:                                               ; preds = %59
  %65 = getelementptr inbounds %struct.rtx_def, ptr %61, i64 0, i32 1
  %66 = load ptr, ptr %65, align 8, !tbaa !16
  %67 = icmp eq ptr %66, null
  br i1 %67, label %92, label %68

68:                                               ; preds = %64
  %69 = load ptr, ptr @pic_offset_table_rtx, align 8, !tbaa !5
  %70 = icmp eq ptr %69, null
  br i1 %70, label %92, label %71

71:                                               ; preds = %68
  %72 = tail call i32 @rtx_equal_for_cselib_p(ptr noundef nonnull %61, ptr noundef nonnull %69) #30
  %73 = icmp eq i32 %72, 0
  br i1 %73, label %92, label %89

74:                                               ; preds = %59
  %75 = getelementptr i8, ptr %61, i64 8
  %76 = load i32, ptr %75, align 8, !tbaa !16
  %77 = load i32, ptr @flag_pic, align 4, !tbaa !20
  %78 = icmp eq i32 %77, 0
  br i1 %78, label %86, label %79

79:                                               ; preds = %74
  %80 = load i32, ptr @reload_completed, align 4, !tbaa !20
  %81 = icmp eq i32 %80, 0
  br i1 %81, label %86, label %82

82:                                               ; preds = %79
  %83 = load ptr, ptr @pic_offset_table_rtx, align 8, !tbaa !5
  %84 = getelementptr i8, ptr %83, i64 8
  %85 = load i32, ptr %84, align 8, !tbaa !16
  br label %86

86:                                               ; preds = %74, %79, %82
  %87 = phi i32 [ -1, %74 ], [ %85, %82 ], [ 3, %79 ]
  %88 = icmp eq i32 %76, %87
  br i1 %88, label %89, label %92

89:                                               ; preds = %71, %86
  %90 = getelementptr inbounds %struct.rtx_def, ptr %56, i64 0, i32 1, i32 0, i32 0, i64 1
  %91 = load ptr, ptr %90, align 8, !tbaa !16
  br label %101

92:                                               ; preds = %71, %59, %64, %68, %86
  %93 = getelementptr inbounds %struct.rtx_def, ptr %56, i64 0, i32 1, i32 0, i32 0, i64 1
  %94 = load ptr, ptr %93, align 8, !tbaa !16
  %95 = tail call fastcc zeroext i8 @ix86_pic_register_p(ptr noundef %94), !range !66
  %96 = icmp eq i8 %95, 0
  br i1 %96, label %99, label %97

97:                                               ; preds = %92
  %98 = load ptr, ptr %60, align 8, !tbaa !16
  br label %101

99:                                               ; preds = %92
  %100 = load ptr, ptr %16, align 8, !tbaa !16
  br label %101

101:                                              ; preds = %33, %54, %97, %99, %89, %48
  %102 = phi ptr [ null, %48 ], [ null, %89 ], [ null, %97 ], [ %100, %99 ], [ %56, %54 ], [ null, %33 ]
  %103 = phi ptr [ null, %48 ], [ %91, %89 ], [ %98, %97 ], [ null, %99 ], [ null, %54 ], [ null, %33 ]
  %104 = load ptr, ptr %17, align 8, !tbaa !16
  %105 = getelementptr inbounds %struct.rtx_def, ptr %104, i64 0, i32 1
  %106 = load ptr, ptr %105, align 8, !tbaa !16
  %107 = load i32, ptr %106, align 8
  %108 = and i32 %107, 65535
  %109 = icmp eq i32 %108, 49
  br i1 %109, label %110, label %120

110:                                              ; preds = %101
  %111 = getelementptr inbounds %struct.rtx_def, ptr %106, i64 0, i32 1, i32 0, i32 0, i64 1
  %112 = load ptr, ptr %111, align 8, !tbaa !16
  %113 = load i32, ptr %112, align 8
  %114 = and i32 %113, 65535
  %115 = icmp eq i32 %114, 30
  br i1 %115, label %116, label %120

116:                                              ; preds = %110
  %117 = getelementptr inbounds %struct.rtx_def, ptr %106, i64 0, i32 1
  %118 = load ptr, ptr %117, align 8, !tbaa !16
  %119 = load i32, ptr %118, align 8
  br label %120

120:                                              ; preds = %116, %110, %101
  %121 = phi i32 [ %119, %116 ], [ %107, %110 ], [ %107, %101 ]
  %122 = phi ptr [ %118, %116 ], [ %106, %110 ], [ %106, %101 ]
  %123 = phi ptr [ %112, %116 ], [ null, %110 ], [ null, %101 ]
  %124 = and i32 %121, 65535
  %125 = icmp eq i32 %124, 18
  br i1 %125, label %126, label %166

126:                                              ; preds = %120
  %127 = getelementptr inbounds %struct.rtx_def, ptr %122, i64 0, i32 1
  %128 = getelementptr inbounds %struct.rtx_def, ptr %122, i64 0, i32 1, i32 0, i32 0, i64 1
  %129 = load i32, ptr %128, align 8, !tbaa !16
  switch i32 %129, label %166 [
    i32 0, label %130
    i32 1, label %136
  ]

130:                                              ; preds = %126
  %131 = load i32, ptr %2, align 8
  %132 = and i32 %131, 65535
  %133 = icmp ne i32 %132, 43
  %134 = icmp ne ptr %102, null
  %135 = select i1 %133, i1 true, i1 %134
  br i1 %135, label %166, label %140

136:                                              ; preds = %126
  %137 = load i32, ptr %2, align 8
  %138 = and i32 %137, 65535
  %139 = icmp eq i32 %138, 43
  br i1 %139, label %166, label %140

140:                                              ; preds = %136, %130
  %141 = load ptr, ptr %127, align 8, !tbaa !16
  %142 = getelementptr inbounds %struct.rtvec_def, ptr %141, i64 0, i32 1
  %143 = load ptr, ptr %142, align 8, !tbaa !5
  %144 = icmp eq ptr %143, null
  br i1 %144, label %166, label %145

145:                                              ; preds = %140
  %146 = icmp eq ptr %123, null
  br i1 %146, label %150, label %147

147:                                              ; preds = %145
  %148 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 49, i32 noundef 16, ptr noundef nonnull %143, ptr noundef nonnull %123) #30
  %149 = tail call ptr @gen_rtx_fmt_e_stat(i32 noundef 35, i32 noundef 16, ptr noundef %148) #30
  br label %150

150:                                              ; preds = %147, %145
  %151 = phi ptr [ %149, %147 ], [ %143, %145 ]
  %152 = icmp eq ptr %103, null
  br i1 %152, label %155, label %153

153:                                              ; preds = %150
  %154 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 49, i32 noundef 16, ptr noundef nonnull %103, ptr noundef %151) #30
  br label %155

155:                                              ; preds = %153, %150
  %156 = phi ptr [ %154, %153 ], [ %151, %150 ]
  %157 = icmp eq ptr %102, null
  br i1 %157, label %166, label %158

158:                                              ; preds = %155
  %159 = load ptr, ptr @pic_offset_table_rtx, align 8, !tbaa !5
  %160 = icmp eq ptr %159, null
  br i1 %160, label %166, label %161

161:                                              ; preds = %158
  %162 = tail call ptr @copy_rtx(ptr noundef nonnull %102) #30
  %163 = load ptr, ptr @pic_offset_table_rtx, align 8, !tbaa !5
  %164 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 50, i32 noundef 16, ptr noundef %162, ptr noundef %163) #30
  %165 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 49, i32 noundef 16, ptr noundef %164, ptr noundef %156) #30
  br label %166

166:                                              ; preds = %126, %130, %120, %136, %155, %161, %158, %140, %10, %15
  %167 = phi ptr [ %2, %15 ], [ %2, %10 ], [ %2, %140 ], [ %2, %158 ], [ %165, %161 ], [ %156, %155 ], [ %2, %136 ], [ %2, %120 ], [ %2, %130 ], [ %2, %126 ]
  ret ptr %167
}

; Function Attrs: nounwind sspstrong uwtable
define dso_local void @print_reg(ptr noundef readonly %0, i32 noundef %1, ptr nocapture noundef %2) local_unnamed_addr #9 {
  %4 = icmp eq i32 %1, 100
  %5 = load i32, ptr @ix86_isa_flags, align 4
  %6 = and i32 %5, 32
  %7 = icmp ne i32 %6, 0
  %8 = select i1 %4, i1 %7, i1 false
  %9 = load ptr, ptr @global_rtl, align 16, !tbaa !5
  %10 = icmp eq ptr %9, %0
  br i1 %10, label %17, label %11

11:                                               ; preds = %3
  %12 = getelementptr i8, ptr %0, i64 8
  %13 = load i32, ptr %12, align 8, !tbaa !16
  %14 = add i32 %13, -16
  %15 = icmp ult i32 %14, 5
  br i1 %15, label %16, label %17

16:                                               ; preds = %11
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 11250, ptr noundef nonnull @.str.131) #30
  br label %17

17:                                               ; preds = %11, %3, %16
  %18 = load i32, ptr @ix86_asm_dialect, align 4, !tbaa !16
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %20, label %22

20:                                               ; preds = %17
  %21 = tail call i32 @putc(i32 noundef 37, ptr noundef %2)
  br label %22

22:                                               ; preds = %20, %17
  %23 = load ptr, ptr @global_rtl, align 16, !tbaa !5
  %24 = icmp eq ptr %23, %0
  br i1 %24, label %25, label %27

25:                                               ; preds = %22
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 11257, ptr noundef nonnull @.str.131) #30
  %26 = tail call i64 @fwrite(ptr nonnull @.str.159, i64 3, i64 1, ptr %2)
  br label %147

27:                                               ; preds = %22
  %28 = icmp eq i32 %1, 119
  %29 = load i32, ptr %0, align 8
  %30 = and i32 %29, 65535
  br i1 %28, label %52, label %31

31:                                               ; preds = %27
  %32 = icmp eq i32 %30, 37
  br i1 %32, label %33, label %39

33:                                               ; preds = %31
  %34 = getelementptr i8, ptr %0, i64 8
  %35 = load i32, ptr %34, align 8, !tbaa !16
  %36 = zext i32 %35 to i64
  %37 = add nsw i64 %36, -29
  %38 = icmp ult i64 %37, 8
  br i1 %38, label %55, label %39

39:                                               ; preds = %33, %31
  switch i32 %1, label %46 [
    i32 98, label %52
    i32 107, label %40
    i32 113, label %41
    i32 121, label %42
    i32 104, label %43
    i32 120, label %44
    i32 116, label %45
  ]

40:                                               ; preds = %39
  br label %52

41:                                               ; preds = %39
  br label %52

42:                                               ; preds = %39
  br label %52

43:                                               ; preds = %39
  br label %52

44:                                               ; preds = %39
  br label %52

45:                                               ; preds = %39
  br label %52

46:                                               ; preds = %39
  %47 = lshr i32 %29, 16
  %48 = and i32 %47, 255
  %49 = zext i32 %48 to i64
  %50 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %49
  %51 = load i8, ptr %50, align 1, !tbaa !16
  br label %52

52:                                               ; preds = %27, %39, %41, %43, %45, %46, %44, %42, %40
  %53 = phi i8 [ 1, %39 ], [ 8, %41 ], [ 0, %43 ], [ 32, %45 ], [ %51, %46 ], [ 16, %44 ], [ 3, %42 ], [ 4, %40 ], [ 2, %27 ]
  %54 = icmp eq i32 %30, 37
  br i1 %54, label %55, label %81

55:                                               ; preds = %33, %52
  %56 = phi i8 [ %53, %52 ], [ 2, %33 ]
  %57 = getelementptr i8, ptr %0, i64 8
  %58 = load i32, ptr %57, align 8, !tbaa !16
  %59 = zext i32 %58 to i64
  %60 = add nsw i64 %59, -37
  %61 = icmp ult i64 %60, 8
  br i1 %61, label %62, label %81

62:                                               ; preds = %55
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 11285, ptr noundef nonnull @.str.131) #30
  switch i8 %56, label %80 [
    i8 0, label %63
    i8 1, label %64
    i8 2, label %68
    i8 4, label %72
    i8 8, label %76
  ]

63:                                               ; preds = %62
  tail call void (ptr, ...) @error(ptr noundef nonnull @.str.160) #30
  br label %147

64:                                               ; preds = %62
  %65 = load i32, ptr %57, align 8, !tbaa !16
  %66 = add i32 %65, -29
  %67 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %2, ptr noundef nonnull @.str.161, i32 noundef %66)
  br label %147

68:                                               ; preds = %62
  %69 = load i32, ptr %57, align 8, !tbaa !16
  %70 = add i32 %69, -29
  %71 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %2, ptr noundef nonnull @.str.162, i32 noundef %70)
  br label %147

72:                                               ; preds = %62
  %73 = load i32, ptr %57, align 8, !tbaa !16
  %74 = add i32 %73, -29
  %75 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %2, ptr noundef nonnull @.str.163, i32 noundef %74)
  br label %147

76:                                               ; preds = %62
  %77 = load i32, ptr %57, align 8, !tbaa !16
  %78 = add i32 %77, -29
  %79 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %2, ptr noundef nonnull @.str.164, i32 noundef %78)
  br label %147

80:                                               ; preds = %62
  tail call void (ptr, ...) @error(ptr noundef nonnull @.str.165) #30
  br label %147

81:                                               ; preds = %55, %52
  %82 = phi i1 [ true, %55 ], [ false, %52 ]
  %83 = phi i8 [ %56, %55 ], [ %53, %52 ]
  switch i8 %83, label %136 [
    i8 3, label %84
    i8 8, label %89
    i8 4, label %89
    i8 12, label %89
    i8 16, label %100
    i8 2, label %100
    i8 1, label %106
    i8 0, label %114
    i8 32, label %122
  ]

84:                                               ; preds = %81
  br i1 %82, label %85, label %98

85:                                               ; preds = %84
  %86 = getelementptr i8, ptr %0, i64 8
  %87 = load i32, ptr %86, align 8, !tbaa !16
  %88 = icmp eq i32 %87, 8
  br i1 %88, label %137, label %93

89:                                               ; preds = %81, %81, %81
  br i1 %82, label %90, label %98

90:                                               ; preds = %89
  %91 = getelementptr i8, ptr %0, i64 8
  %92 = load i32, ptr %91, align 8, !tbaa !16
  br label %93

93:                                               ; preds = %90, %85
  %94 = phi i32 [ %92, %90 ], [ %87, %85 ]
  %95 = and i32 %94, -8
  %96 = icmp eq i32 %95, 8
  br i1 %96, label %100, label %97

97:                                               ; preds = %93
  switch i32 %94, label %98 [
    i32 52, label %100
    i32 51, label %100
    i32 50, label %100
    i32 49, label %100
    i32 48, label %100
    i32 47, label %100
    i32 46, label %100
    i32 45, label %100
    i32 28, label %100
    i32 27, label %100
    i32 26, label %100
    i32 25, label %100
    i32 24, label %100
    i32 23, label %100
    i32 22, label %100
    i32 21, label %100
  ]

98:                                               ; preds = %97, %84, %89
  %99 = tail call i32 @putc(i32 noundef 101, ptr noundef %2)
  br label %100

100:                                              ; preds = %97, %97, %97, %97, %97, %97, %97, %97, %97, %97, %97, %97, %97, %97, %97, %97, %114, %106, %81, %81, %98, %93
  %101 = getelementptr i8, ptr %0, i64 8
  %102 = load i32, ptr %101, align 8, !tbaa !16
  %103 = zext i32 %102 to i64
  %104 = getelementptr inbounds [53 x ptr], ptr @hi_reg_name, i64 0, i64 %103
  %105 = load ptr, ptr %104, align 8, !tbaa !5
  br label %137

106:                                              ; preds = %81
  %107 = getelementptr i8, ptr %0, i64 8
  %108 = load i32, ptr %107, align 8, !tbaa !16
  %109 = icmp ugt i32 %108, 7
  br i1 %109, label %100, label %110

110:                                              ; preds = %106
  %111 = zext i32 %108 to i64
  %112 = shl i64 %111, 2
  %113 = call ptr @llvm.load.relative.i64(ptr @reltable.print_reg, i64 %112)
  br label %137

114:                                              ; preds = %81
  %115 = getelementptr i8, ptr %0, i64 8
  %116 = load i32, ptr %115, align 8, !tbaa !16
  %117 = icmp ugt i32 %116, 3
  br i1 %117, label %100, label %118

118:                                              ; preds = %114
  %119 = zext i32 %116 to i64
  %120 = shl i64 %119, 2
  %121 = call ptr @llvm.load.relative.i64(ptr @reltable.print_reg.1391, i64 %120)
  br label %137

122:                                              ; preds = %81
  br i1 %82, label %123, label %137

123:                                              ; preds = %122
  %124 = getelementptr i8, ptr %0, i64 8
  %125 = load i32, ptr %124, align 8, !tbaa !16
  switch i32 %125, label %137 [
    i32 52, label %126
    i32 51, label %126
    i32 50, label %126
    i32 49, label %126
    i32 48, label %126
    i32 47, label %126
    i32 46, label %126
    i32 45, label %126
    i32 28, label %126
    i32 27, label %126
    i32 26, label %126
    i32 25, label %126
    i32 24, label %126
    i32 23, label %126
    i32 22, label %126
    i32 21, label %126
  ]

126:                                              ; preds = %123, %123, %123, %123, %123, %123, %123, %123, %123, %123, %123, %123, %123, %123, %123, %123
  br i1 %8, label %127, label %128

127:                                              ; preds = %126
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 11344, ptr noundef nonnull @.str.131) #30
  br label %128

128:                                              ; preds = %126, %127
  %129 = tail call i32 @putc(i32 noundef 121, ptr noundef %2)
  %130 = load i32, ptr %124, align 8, !tbaa !16
  %131 = zext i32 %130 to i64
  %132 = getelementptr inbounds [53 x ptr], ptr @hi_reg_name, i64 0, i64 %131
  %133 = load ptr, ptr %132, align 8, !tbaa !5
  %134 = getelementptr inbounds i8, ptr %133, i64 1
  %135 = tail call i32 @fputs(ptr noundef nonnull %134, ptr noundef %2)
  br label %147

136:                                              ; preds = %81
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 11351, ptr noundef nonnull @.str.131) #30
  br label %137

137:                                              ; preds = %123, %85, %122, %136, %118, %110, %100
  %138 = phi ptr [ null, %136 ], [ null, %122 ], [ %105, %100 ], [ %121, %118 ], [ %113, %110 ], [ @.str.166, %85 ], [ null, %123 ]
  %139 = tail call i32 @fputs(ptr noundef %138, ptr noundef %2)
  br i1 %8, label %140, label %147

140:                                              ; preds = %137
  %141 = load i32, ptr @ix86_asm_dialect, align 4, !tbaa !16
  %142 = icmp eq i32 %141, 0
  br i1 %142, label %143, label %145

143:                                              ; preds = %140
  %144 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %2, ptr noundef nonnull @.str.167, ptr noundef %138)
  br label %147

145:                                              ; preds = %140
  %146 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %2, ptr noundef nonnull @.str.168, ptr noundef %138)
  br label %147

147:                                              ; preds = %137, %145, %143, %63, %64, %68, %72, %76, %80, %128, %25
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define dso_local void @print_operand(ptr noundef %0, ptr noundef %1, i32 noundef %2) local_unnamed_addr #9 {
  %4 = alloca %struct.real_value, align 8
  %5 = alloca [30 x i8], align 16
  %6 = alloca [30 x i8], align 16
  switch i32 %2, label %359 [
    i32 0, label %360
    i32 42, label %16
    i32 38, label %21
    i32 65, label %7
    i32 76, label %59
    i32 87, label %64
    i32 66, label %69
    i32 81, label %74
    i32 83, label %79
    i32 84, label %84
    i32 122, label %89
    i32 90, label %113
    i32 100, label %360
    i32 98, label %360
    i32 119, label %360
    i32 107, label %360
    i32 113, label %360
    i32 104, label %360
    i32 116, label %360
    i32 121, label %360
    i32 120, label %360
    i32 88, label %360
    i32 80, label %360
    i32 115, label %154
    i32 68, label %160
    i32 79, label %55
    i32 67, label %214
    i32 70, label %228
    i32 99, label %242
    i32 102, label %256
    i32 72, label %270
    i32 43, label %272
    i32 89, label %305
    i32 59, label %357
  ]

7:                                                ; preds = %3
  %8 = load i32, ptr @ix86_asm_dialect, align 4, !tbaa !16
  switch i32 %8, label %15 [
    i32 0, label %13
    i32 1, label %9
  ]

9:                                                ; preds = %7
  %10 = load i32, ptr %1, align 8
  %11 = and i32 %10, 65535
  %12 = icmp eq i32 %11, 37
  br i1 %12, label %360, label %56

13:                                               ; preds = %7
  %14 = tail call i32 @putc(i32 noundef 42, ptr noundef %0)
  br label %360

15:                                               ; preds = %7
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 11477, ptr noundef nonnull @.str.131) #30
  br label %360

16:                                               ; preds = %3
  %17 = load i32, ptr @ix86_asm_dialect, align 4, !tbaa !16
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %19, label %55

19:                                               ; preds = %16
  %20 = tail call i32 @putc(i32 noundef 42, ptr noundef %0)
  br label %55

21:                                               ; preds = %3
  %22 = load ptr, ptr @cfun, align 8, !tbaa !5
  %23 = getelementptr inbounds %struct.function, ptr %22, i64 0, i32 10
  %24 = load ptr, ptr %23, align 8, !tbaa !87
  %25 = getelementptr inbounds %struct.machine_function, ptr %24, i64 0, i32 1
  %26 = load ptr, ptr %25, align 8, !tbaa !174
  %27 = icmp eq ptr %26, null
  br i1 %27, label %28, label %53

28:                                               ; preds = %21
  %29 = tail call ptr @get_insns() #30
  %30 = icmp eq ptr %29, null
  br i1 %30, label %52, label %31

31:                                               ; preds = %28, %41
  %32 = phi ptr [ %43, %41 ], [ %29, %28 ]
  %33 = load i32, ptr %32, align 8
  %34 = and i32 %33, 65535
  %35 = add nsw i32 %34, -7
  %36 = icmp ult i32 %35, 4
  br i1 %36, label %37, label %41

37:                                               ; preds = %31
  %38 = getelementptr inbounds %struct.rtx_def, ptr %32, i64 1
  %39 = tail call i32 @for_each_rtx(ptr noundef nonnull %38, ptr noundef nonnull @get_some_local_dynamic_name_1, ptr noundef null) #30
  %40 = icmp eq i32 %39, 0
  br i1 %40, label %41, label %45

41:                                               ; preds = %37, %31
  %42 = getelementptr inbounds %struct.rtx_def, ptr %32, i64 0, i32 1, i32 0, i32 0, i64 2
  %43 = load ptr, ptr %42, align 8, !tbaa !16
  %44 = icmp eq ptr %43, null
  br i1 %44, label %52, label %31, !llvm.loop !175

45:                                               ; preds = %37
  %46 = load ptr, ptr @cfun, align 8, !tbaa !5
  %47 = getelementptr inbounds %struct.function, ptr %46, i64 0, i32 10
  %48 = load ptr, ptr %47, align 8, !tbaa !87
  %49 = getelementptr inbounds %struct.machine_function, ptr %48, i64 0, i32 1
  %50 = load ptr, ptr %49, align 8, !tbaa !174
  %51 = icmp eq ptr %50, null
  br i1 %51, label %52, label %53

52:                                               ; preds = %41, %28, %45
  tail call void (ptr, ...) @output_operand_lossage(ptr noundef nonnull @.str.169) #30
  br label %55

53:                                               ; preds = %21, %45
  %54 = phi ptr [ %50, %45 ], [ %26, %21 ]
  tail call void @assemble_name(ptr noundef %0, ptr noundef nonnull %54) #30
  br label %55

55:                                               ; preds = %275, %272, %286, %301, %303, %294, %282, %52, %53, %424, %425, %417, %441, %481, %489, %488, %444, %437, %308, %310, %321, %333, %336, %338, %340, %342, %344, %346, %348, %350, %352, %354, %193, %191, %189, %187, %185, %183, %181, %179, %177, %175, %173, %171, %169, %167, %211, %209, %207, %205, %203, %201, %199, %197, %154, %135, %113, %96, %84, %87, %79, %82, %74, %77, %69, %72, %64, %67, %59, %62, %16, %19, %102, %104, %106, %108, %110, %126, %128, %130, %146, %148, %150, %152, %153, %195, %213, %221, %222, %235, %236, %249, %250, %263, %264, %356, %357, %366, %3, %158, %56
  ret void

56:                                               ; preds = %9
  %57 = tail call i32 @putc(i32 noundef 91, ptr noundef %0)
  tail call void @print_operand(ptr noundef %0, ptr noundef nonnull %1, i32 noundef 0)
  %58 = tail call i32 @putc(i32 noundef 93, ptr noundef %0)
  br label %55

59:                                               ; preds = %3
  %60 = load i32, ptr @ix86_asm_dialect, align 4, !tbaa !16
  %61 = icmp eq i32 %60, 0
  br i1 %61, label %62, label %55

62:                                               ; preds = %59
  %63 = tail call i32 @putc(i32 noundef 108, ptr noundef %0)
  br label %55

64:                                               ; preds = %3
  %65 = load i32, ptr @ix86_asm_dialect, align 4, !tbaa !16
  %66 = icmp eq i32 %65, 0
  br i1 %66, label %67, label %55

67:                                               ; preds = %64
  %68 = tail call i32 @putc(i32 noundef 119, ptr noundef %0)
  br label %55

69:                                               ; preds = %3
  %70 = load i32, ptr @ix86_asm_dialect, align 4, !tbaa !16
  %71 = icmp eq i32 %70, 0
  br i1 %71, label %72, label %55

72:                                               ; preds = %69
  %73 = tail call i32 @putc(i32 noundef 98, ptr noundef %0)
  br label %55

74:                                               ; preds = %3
  %75 = load i32, ptr @ix86_asm_dialect, align 4, !tbaa !16
  %76 = icmp eq i32 %75, 0
  br i1 %76, label %77, label %55

77:                                               ; preds = %74
  %78 = tail call i32 @putc(i32 noundef 108, ptr noundef %0)
  br label %55

79:                                               ; preds = %3
  %80 = load i32, ptr @ix86_asm_dialect, align 4, !tbaa !16
  %81 = icmp eq i32 %80, 0
  br i1 %81, label %82, label %55

82:                                               ; preds = %79
  %83 = tail call i32 @putc(i32 noundef 115, ptr noundef %0)
  br label %55

84:                                               ; preds = %3
  %85 = load i32, ptr @ix86_asm_dialect, align 4, !tbaa !16
  %86 = icmp eq i32 %85, 0
  br i1 %86, label %87, label %55

87:                                               ; preds = %84
  %88 = tail call i32 @putc(i32 noundef 116, ptr noundef %0)
  br label %55

89:                                               ; preds = %3
  %90 = load i32, ptr %1, align 8
  %91 = lshr i32 %90, 16
  %92 = and i32 %91, 255
  %93 = zext i32 %92 to i64
  %94 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %93
  %95 = load i8, ptr %94, align 1, !tbaa !16
  switch i8 %95, label %113 [
    i8 2, label %96
    i8 8, label %111
  ]

96:                                               ; preds = %89
  %97 = load i32, ptr @ix86_asm_dialect, align 4, !tbaa !16
  %98 = icmp eq i32 %97, 1
  br i1 %98, label %55, label %99

99:                                               ; preds = %96
  %100 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %93
  %101 = load i8, ptr %100, align 1, !tbaa !16
  switch i8 %101, label %110 [
    i8 1, label %102
    i8 2, label %104
    i8 4, label %106
    i8 8, label %108
  ]

102:                                              ; preds = %99
  %103 = tail call i32 @putc(i32 noundef 98, ptr noundef %0)
  br label %55

104:                                              ; preds = %99
  %105 = tail call i32 @putc(i32 noundef 119, ptr noundef %0)
  br label %55

106:                                              ; preds = %99
  %107 = tail call i32 @putc(i32 noundef 108, ptr noundef %0)
  br label %55

108:                                              ; preds = %99
  %109 = tail call i32 @putc(i32 noundef 113, ptr noundef %0)
  br label %55

110:                                              ; preds = %99
  tail call void (ptr, ...) @output_operand_lossage(ptr noundef nonnull @.str.170, i32 noundef 122) #30
  br label %55

111:                                              ; preds = %89
  %112 = tail call zeroext i8 (i32, ptr, ...) @warning(i32 noundef 0, ptr noundef nonnull @.str.171, i32 noundef 122) #30
  br label %113

113:                                              ; preds = %3, %89, %111
  %114 = load i32, ptr @ix86_asm_dialect, align 4, !tbaa !16
  %115 = icmp eq i32 %114, 1
  br i1 %115, label %55, label %116

116:                                              ; preds = %113
  %117 = load i32, ptr %1, align 8
  %118 = lshr i32 %117, 16
  %119 = and i32 %118, 255
  %120 = zext i32 %119 to i64
  %121 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %120
  %122 = load i8, ptr %121, align 1, !tbaa !16
  switch i8 %122, label %152 [
    i8 2, label %123
    i8 8, label %132
  ]

123:                                              ; preds = %116
  %124 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %120
  %125 = load i8, ptr %124, align 1, !tbaa !16
  switch i8 %125, label %153 [
    i8 2, label %126
    i8 4, label %128
    i8 8, label %130
  ]

126:                                              ; preds = %123
  %127 = tail call i32 @putc(i32 noundef 115, ptr noundef %0)
  br label %55

128:                                              ; preds = %123
  %129 = tail call i32 @putc(i32 noundef 108, ptr noundef %0)
  br label %55

130:                                              ; preds = %123
  %131 = tail call i32 @putc(i32 noundef 113, ptr noundef %0)
  br label %55

132:                                              ; preds = %116
  %133 = and i32 %117, 65535
  %134 = icmp eq i32 %133, 37
  br i1 %134, label %135, label %140

135:                                              ; preds = %132
  %136 = getelementptr i8, ptr %1, i64 8
  %137 = load i32, ptr %136, align 8, !tbaa !16
  %138 = and i32 %137, -8
  %139 = icmp eq i32 %138, 8
  br i1 %139, label %55, label %140

140:                                              ; preds = %135, %132
  %141 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %120
  %142 = load i8, ptr %141, align 1, !tbaa !16
  %143 = zext i8 %142 to i32
  %144 = add nsw i32 %143, -4
  %145 = tail call i32 @llvm.fshl.i32(i32 %143, i32 %144, i32 30)
  switch i32 %145, label %153 [
    i32 0, label %146
    i32 1, label %148
    i32 2, label %150
    i32 3, label %150
  ]

146:                                              ; preds = %140
  %147 = tail call i32 @putc(i32 noundef 115, ptr noundef %0)
  br label %55

148:                                              ; preds = %140
  %149 = tail call i32 @putc(i32 noundef 108, ptr noundef %0)
  br label %55

150:                                              ; preds = %140, %140
  %151 = tail call i32 @putc(i32 noundef 116, ptr noundef %0)
  br label %55

152:                                              ; preds = %116
  tail call void (ptr, ...) @output_operand_lossage(ptr noundef nonnull @.str.172, i32 noundef %2) #30
  br label %55

153:                                              ; preds = %140, %123
  tail call void (ptr, ...) @output_operand_lossage(ptr noundef nonnull @.str.170, i32 noundef %2) #30
  br label %55

154:                                              ; preds = %3
  %155 = load i32, ptr %1, align 8
  %156 = and i32 %155, 65535
  %157 = icmp eq i32 %156, 30
  br i1 %157, label %158, label %55

158:                                              ; preds = %154
  tail call void @print_operand(ptr noundef %0, ptr noundef nonnull %1, i32 noundef 0)
  %159 = tail call i64 @fwrite(ptr nonnull @.str.118, i64 2, i64 1, ptr %0)
  br label %55

160:                                              ; preds = %3
  %161 = load i32, ptr @ix86_isa_flags, align 4, !tbaa !20
  %162 = and i32 %161, 32
  %163 = icmp eq i32 %162, 0
  %164 = load i32, ptr %1, align 8
  %165 = trunc i32 %164 to i16
  br i1 %163, label %196, label %166

166:                                              ; preds = %160
  switch i16 %165, label %195 [
    i16 81, label %167
    i16 92, label %169
    i16 85, label %171
    i16 96, label %173
    i16 84, label %175
    i16 95, label %177
    i16 90, label %179
    i16 80, label %181
    i16 97, label %183
    i16 82, label %185
    i16 93, label %187
    i16 83, label %189
    i16 94, label %191
    i16 91, label %193
  ]

167:                                              ; preds = %166
  %168 = tail call i64 @fwrite(ptr nonnull @.str.173, i64 2, i64 1, ptr %0)
  br label %55

169:                                              ; preds = %166
  %170 = tail call i64 @fwrite(ptr nonnull @.str.174, i64 5, i64 1, ptr %0)
  br label %55

171:                                              ; preds = %166
  %172 = tail call i64 @fwrite(ptr nonnull @.str.175, i64 2, i64 1, ptr %0)
  br label %55

173:                                              ; preds = %166
  %174 = tail call i64 @fwrite(ptr nonnull @.str.176, i64 3, i64 1, ptr %0)
  br label %55

175:                                              ; preds = %166
  %176 = tail call i64 @fwrite(ptr nonnull @.str.177, i64 2, i64 1, ptr %0)
  br label %55

177:                                              ; preds = %166
  %178 = tail call i64 @fwrite(ptr nonnull @.str.178, i64 3, i64 1, ptr %0)
  br label %55

179:                                              ; preds = %166
  %180 = tail call i64 @fwrite(ptr nonnull @.str.179, i64 5, i64 1, ptr %0)
  br label %55

181:                                              ; preds = %166
  %182 = tail call i64 @fwrite(ptr nonnull @.str.180, i64 3, i64 1, ptr %0)
  br label %55

183:                                              ; preds = %166
  %184 = tail call i64 @fwrite(ptr nonnull @.str.181, i64 6, i64 1, ptr %0)
  br label %55

185:                                              ; preds = %166
  %186 = tail call i64 @fwrite(ptr nonnull @.str.182, i64 2, i64 1, ptr %0)
  br label %55

187:                                              ; preds = %166
  %188 = tail call i64 @fwrite(ptr nonnull @.str.183, i64 3, i64 1, ptr %0)
  br label %55

189:                                              ; preds = %166
  %190 = tail call i64 @fwrite(ptr nonnull @.str.184, i64 2, i64 1, ptr %0)
  br label %55

191:                                              ; preds = %166
  %192 = tail call i64 @fwrite(ptr nonnull @.str.185, i64 3, i64 1, ptr %0)
  br label %55

193:                                              ; preds = %166
  %194 = tail call i64 @fwrite(ptr nonnull @.str.186, i64 3, i64 1, ptr %0)
  br label %55

195:                                              ; preds = %166
  tail call void (ptr, ...) @output_operand_lossage(ptr noundef nonnull @.str.187) #30
  br label %55

196:                                              ; preds = %160
  switch i16 %165, label %213 [
    i16 81, label %197
    i16 92, label %197
    i16 85, label %199
    i16 96, label %199
    i16 84, label %201
    i16 95, label %201
    i16 90, label %203
    i16 80, label %205
    i16 97, label %205
    i16 93, label %207
    i16 82, label %207
    i16 94, label %209
    i16 83, label %209
    i16 91, label %211
  ]

197:                                              ; preds = %196, %196
  %198 = tail call i64 @fwrite(ptr nonnull @.str.173, i64 2, i64 1, ptr %0)
  br label %55

199:                                              ; preds = %196, %196
  %200 = tail call i64 @fwrite(ptr nonnull @.str.175, i64 2, i64 1, ptr %0)
  br label %55

201:                                              ; preds = %196, %196
  %202 = tail call i64 @fwrite(ptr nonnull @.str.177, i64 2, i64 1, ptr %0)
  br label %55

203:                                              ; preds = %196
  %204 = tail call i64 @fwrite(ptr nonnull @.str.179, i64 5, i64 1, ptr %0)
  br label %55

205:                                              ; preds = %196, %196
  %206 = tail call i64 @fwrite(ptr nonnull @.str.180, i64 3, i64 1, ptr %0)
  br label %55

207:                                              ; preds = %196, %196
  %208 = tail call i64 @fwrite(ptr nonnull @.str.183, i64 3, i64 1, ptr %0)
  br label %55

209:                                              ; preds = %196, %196
  %210 = tail call i64 @fwrite(ptr nonnull @.str.185, i64 3, i64 1, ptr %0)
  br label %55

211:                                              ; preds = %196
  %212 = tail call i64 @fwrite(ptr nonnull @.str.186, i64 3, i64 1, ptr %0)
  br label %55

213:                                              ; preds = %196
  tail call void (ptr, ...) @output_operand_lossage(ptr noundef nonnull @.str.187) #30
  br label %55

214:                                              ; preds = %3
  %215 = load i32, ptr %1, align 8
  %216 = and i32 %215, 65535
  %217 = zext i32 %216 to i64
  %218 = getelementptr inbounds [139 x i32], ptr @rtx_class, i64 0, i64 %217
  %219 = load i32, ptr %218, align 4, !tbaa !16
  %220 = icmp ult i32 %219, 2
  br i1 %220, label %222, label %221

221:                                              ; preds = %214
  tail call void (ptr, ...) @output_operand_lossage(ptr noundef nonnull @.str.188) #30
  br label %55

222:                                              ; preds = %214
  %223 = getelementptr inbounds %struct.rtx_def, ptr %1, i64 0, i32 1
  %224 = load ptr, ptr %223, align 8, !tbaa !16
  %225 = load i32, ptr %224, align 8
  %226 = lshr i32 %225, 16
  %227 = and i32 %226, 255
  tail call fastcc void @put_condition_code(i32 noundef %216, i32 noundef %227, i32 noundef 0, i32 noundef 0, ptr noundef %0)
  br label %55

228:                                              ; preds = %3
  %229 = load i32, ptr %1, align 8
  %230 = and i32 %229, 65535
  %231 = zext i32 %230 to i64
  %232 = getelementptr inbounds [139 x i32], ptr @rtx_class, i64 0, i64 %231
  %233 = load i32, ptr %232, align 4, !tbaa !16
  %234 = icmp ult i32 %233, 2
  br i1 %234, label %236, label %235

235:                                              ; preds = %228
  tail call void (ptr, ...) @output_operand_lossage(ptr noundef nonnull @.str.189) #30
  br label %55

236:                                              ; preds = %228
  %237 = getelementptr inbounds %struct.rtx_def, ptr %1, i64 0, i32 1
  %238 = load ptr, ptr %237, align 8, !tbaa !16
  %239 = load i32, ptr %238, align 8
  %240 = lshr i32 %239, 16
  %241 = and i32 %240, 255
  tail call fastcc void @put_condition_code(i32 noundef %230, i32 noundef %241, i32 noundef 0, i32 noundef 1, ptr noundef %0)
  br label %55

242:                                              ; preds = %3
  %243 = load i32, ptr %1, align 8
  %244 = and i32 %243, 65535
  %245 = zext i32 %244 to i64
  %246 = getelementptr inbounds [139 x i32], ptr @rtx_class, i64 0, i64 %245
  %247 = load i32, ptr %246, align 4, !tbaa !16
  %248 = icmp ult i32 %247, 2
  br i1 %248, label %250, label %249

249:                                              ; preds = %242
  tail call void (ptr, ...) @output_operand_lossage(ptr noundef nonnull @.str.190) #30
  br label %55

250:                                              ; preds = %242
  %251 = getelementptr inbounds %struct.rtx_def, ptr %1, i64 0, i32 1
  %252 = load ptr, ptr %251, align 8, !tbaa !16
  %253 = load i32, ptr %252, align 8
  %254 = lshr i32 %253, 16
  %255 = and i32 %254, 255
  tail call fastcc void @put_condition_code(i32 noundef %244, i32 noundef %255, i32 noundef 1, i32 noundef 0, ptr noundef %0)
  br label %55

256:                                              ; preds = %3
  %257 = load i32, ptr %1, align 8
  %258 = and i32 %257, 65535
  %259 = zext i32 %258 to i64
  %260 = getelementptr inbounds [139 x i32], ptr @rtx_class, i64 0, i64 %259
  %261 = load i32, ptr %260, align 4, !tbaa !16
  %262 = icmp ult i32 %261, 2
  br i1 %262, label %264, label %263

263:                                              ; preds = %256
  tail call void (ptr, ...) @output_operand_lossage(ptr noundef nonnull @.str.191) #30
  br label %55

264:                                              ; preds = %256
  %265 = getelementptr inbounds %struct.rtx_def, ptr %1, i64 0, i32 1
  %266 = load ptr, ptr %265, align 8, !tbaa !16
  %267 = load i32, ptr %266, align 8
  %268 = lshr i32 %267, 16
  %269 = and i32 %268, 255
  tail call fastcc void @put_condition_code(i32 noundef %258, i32 noundef %269, i32 noundef 1, i32 noundef 1, ptr noundef %0)
  br label %55

270:                                              ; preds = %3
  %271 = tail call ptr @adjust_address_1(ptr noundef %1, i32 noundef 17, i64 noundef 8, i32 noundef 0, i32 noundef 1) #30
  br label %360

272:                                              ; preds = %3
  %273 = load i32, ptr @optimize, align 4, !tbaa !20
  %274 = icmp eq i32 %273, 0
  br i1 %274, label %55, label %275

275:                                              ; preds = %272
  %276 = load ptr, ptr @cfun, align 8, !tbaa !5
  %277 = tail call zeroext i8 @optimize_function_for_size_p(ptr noundef %276) #30
  %278 = icmp eq i8 %277, 0
  %279 = load i8, ptr getelementptr inbounds ([62 x i8], ptr @ix86_tune_features, i64 0, i64 5), align 1
  %280 = icmp ne i8 %279, 0
  %281 = select i1 %278, i1 %280, i1 false
  br i1 %281, label %282, label %55

282:                                              ; preds = %275
  %283 = load ptr, ptr @current_output_insn, align 8, !tbaa !5
  %284 = tail call ptr @find_reg_note(ptr noundef %283, i32 noundef 13, ptr noundef null) #30
  %285 = icmp eq ptr %284, null
  br i1 %285, label %55, label %286

286:                                              ; preds = %282
  %287 = getelementptr inbounds %struct.rtx_def, ptr %284, i64 0, i32 1
  %288 = load ptr, ptr %287, align 8, !tbaa !16
  %289 = getelementptr inbounds %struct.rtx_def, ptr %288, i64 0, i32 1
  %290 = load i64, ptr %289, align 8, !tbaa !16
  %291 = trunc i64 %290 to i32
  %292 = add i32 %291, -5501
  %293 = icmp ult i32 %292, -1001
  br i1 %293, label %294, label %55

294:                                              ; preds = %286
  %295 = icmp sgt i32 %291, 5000
  %296 = load ptr, ptr @current_output_insn, align 8, !tbaa !5
  %297 = tail call i32 @final_forward_branch_p(ptr noundef %296) #30
  %298 = icmp ne i32 %297, 0
  %299 = xor i1 %295, %298
  br i1 %299, label %55, label %300

300:                                              ; preds = %294
  br i1 %295, label %301, label %303

301:                                              ; preds = %300
  %302 = tail call i64 @fwrite(ptr nonnull @.str.192, i64 5, i64 1, ptr %0)
  br label %55

303:                                              ; preds = %300
  %304 = tail call i64 @fwrite(ptr nonnull @.str.193, i64 5, i64 1, ptr %0)
  br label %55

305:                                              ; preds = %3
  %306 = load i32, ptr %1, align 8
  %307 = trunc i32 %306 to i16
  switch i16 %307, label %356 [
    i16 80, label %308
    i16 81, label %310
    i16 82, label %312
    i16 86, label %312
    i16 83, label %324
    i16 87, label %324
    i16 84, label %336
    i16 88, label %336
    i16 85, label %338
    i16 89, label %338
    i16 90, label %340
    i16 91, label %342
    i16 92, label %344
    i16 93, label %346
    i16 94, label %348
    i16 95, label %350
    i16 96, label %352
    i16 97, label %354
  ]

308:                                              ; preds = %305
  %309 = tail call i64 @fwrite(ptr nonnull @.str.180, i64 3, i64 1, ptr %0)
  br label %55

310:                                              ; preds = %305
  %311 = tail call i64 @fwrite(ptr nonnull @.str.173, i64 2, i64 1, ptr %0)
  br label %55

312:                                              ; preds = %305, %305
  %313 = lshr i32 %306, 16
  %314 = and i32 %313, 255
  %315 = zext i32 %314 to i64
  %316 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %315
  %317 = load i8, ptr %316, align 1, !tbaa !16
  switch i8 %317, label %318 [
    i8 2, label %321
    i8 3, label %321
    i8 10, label %321
  ]

318:                                              ; preds = %312
  %319 = icmp eq i8 %317, 12
  %320 = select i1 %319, ptr @.str.182, ptr @.str.194
  br label %321

321:                                              ; preds = %312, %312, %312, %318
  %322 = phi ptr [ @.str.182, %312 ], [ %320, %318 ], [ @.str.182, %312 ], [ @.str.182, %312 ]
  %323 = tail call i32 @fputs(ptr noundef nonnull %322, ptr noundef %0)
  br label %55

324:                                              ; preds = %305, %305
  %325 = lshr i32 %306, 16
  %326 = and i32 %325, 255
  %327 = zext i32 %326 to i64
  %328 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %327
  %329 = load i8, ptr %328, align 1, !tbaa !16
  switch i8 %329, label %330 [
    i8 2, label %333
    i8 3, label %333
    i8 10, label %333
  ]

330:                                              ; preds = %324
  %331 = icmp eq i8 %329, 12
  %332 = select i1 %331, ptr @.str.184, ptr @.str.195
  br label %333

333:                                              ; preds = %324, %324, %324, %330
  %334 = phi ptr [ @.str.184, %324 ], [ %332, %330 ], [ @.str.184, %324 ], [ @.str.184, %324 ]
  %335 = tail call i32 @fputs(ptr noundef nonnull %334, ptr noundef %0)
  br label %55

336:                                              ; preds = %305, %305
  %337 = tail call i64 @fwrite(ptr nonnull @.str.177, i64 2, i64 1, ptr %0)
  br label %55

338:                                              ; preds = %305, %305
  %339 = tail call i64 @fwrite(ptr nonnull @.str.175, i64 2, i64 1, ptr %0)
  br label %55

340:                                              ; preds = %305
  %341 = tail call i64 @fwrite(ptr nonnull @.str.179, i64 5, i64 1, ptr %0)
  br label %55

342:                                              ; preds = %305
  %343 = tail call i64 @fwrite(ptr nonnull @.str.186, i64 3, i64 1, ptr %0)
  br label %55

344:                                              ; preds = %305
  %345 = tail call i64 @fwrite(ptr nonnull @.str.196, i64 3, i64 1, ptr %0)
  br label %55

346:                                              ; preds = %305
  %347 = tail call i64 @fwrite(ptr nonnull @.str.183, i64 3, i64 1, ptr %0)
  br label %55

348:                                              ; preds = %305
  %349 = tail call i64 @fwrite(ptr nonnull @.str.185, i64 3, i64 1, ptr %0)
  br label %55

350:                                              ; preds = %305
  %351 = tail call i64 @fwrite(ptr nonnull @.str.197, i64 3, i64 1, ptr %0)
  br label %55

352:                                              ; preds = %305
  %353 = tail call i64 @fwrite(ptr nonnull @.str.198, i64 3, i64 1, ptr %0)
  br label %55

354:                                              ; preds = %305
  %355 = tail call i64 @fwrite(ptr nonnull @.str.199, i64 3, i64 1, ptr %0)
  br label %55

356:                                              ; preds = %305
  tail call void (ptr, ...) @output_operand_lossage(ptr noundef nonnull @.str.200) #30
  br label %55

357:                                              ; preds = %3
  %358 = tail call i32 @putc(i32 noundef 32, ptr noundef %0)
  br label %55

359:                                              ; preds = %3
  tail call void (ptr, ...) @output_operand_lossage(ptr noundef nonnull @.str.201, i32 noundef %2) #30
  br label %360

360:                                              ; preds = %3, %3, %3, %3, %3, %3, %3, %3, %3, %3, %3, %3, %15, %13, %9, %270, %359
  %361 = phi i32 [ %2, %359 ], [ 72, %270 ], [ %2, %3 ], [ %2, %3 ], [ %2, %3 ], [ %2, %3 ], [ %2, %3 ], [ %2, %3 ], [ %2, %3 ], [ %2, %3 ], [ %2, %3 ], [ %2, %3 ], [ %2, %3 ], [ %2, %3 ], [ 0, %15 ], [ 0, %13 ], [ 0, %9 ]
  %362 = phi ptr [ %1, %359 ], [ %271, %270 ], [ %1, %3 ], [ %1, %3 ], [ %1, %3 ], [ %1, %3 ], [ %1, %3 ], [ %1, %3 ], [ %1, %3 ], [ %1, %3 ], [ %1, %3 ], [ %1, %3 ], [ %1, %3 ], [ %1, %3 ], [ %1, %15 ], [ %1, %13 ], [ %1, %9 ]
  %363 = load i32, ptr %362, align 8
  %364 = and i32 %363, 65535
  %365 = trunc i32 %363 to i16
  switch i16 %365, label %439 [
    i16 37, label %366
    i16 43, label %367
    i16 32, label %426
  ]

366:                                              ; preds = %360
  tail call void @print_reg(ptr noundef nonnull %362, i32 noundef %361, ptr noundef %0)
  br label %55

367:                                              ; preds = %360
  %368 = load i32, ptr @ix86_asm_dialect, align 4, !tbaa !16
  %369 = icmp eq i32 %368, 1
  %370 = and i32 %361, -9
  %371 = icmp ne i32 %370, 80
  %372 = and i1 %371, %369
  br i1 %372, label %373, label %399

373:                                              ; preds = %367
  %374 = lshr i32 %363, 16
  %375 = and i32 %374, 255
  %376 = icmp eq i32 %375, 1
  br i1 %376, label %399, label %377

377:                                              ; preds = %373
  %378 = zext i32 %375 to i64
  %379 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %378
  %380 = load i8, ptr %379, align 1, !tbaa !16
  switch i8 %380, label %389 [
    i8 1, label %390
    i8 2, label %381
    i8 4, label %382
    i8 8, label %383
    i8 12, label %384
    i8 16, label %385
    i8 32, label %388
  ]

381:                                              ; preds = %377
  br label %390

382:                                              ; preds = %377
  br label %390

383:                                              ; preds = %377
  br label %390

384:                                              ; preds = %377
  br label %390

385:                                              ; preds = %377
  %386 = icmp eq i32 %375, 40
  %387 = select i1 %386, ptr @.str.206, ptr @.str.207
  br label %390

388:                                              ; preds = %377
  br label %390

389:                                              ; preds = %377
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 11942, ptr noundef nonnull @.str.131) #30
  br label %390

390:                                              ; preds = %385, %377, %389, %388, %384, %383, %382, %381
  %391 = phi ptr [ undef, %389 ], [ @.str.208, %388 ], [ @.str.206, %384 ], [ @.str.205, %383 ], [ @.str.204, %382 ], [ @.str.203, %381 ], [ @.str.202, %377 ], [ %387, %385 ]
  switch i32 %361, label %394 [
    i32 98, label %395
    i32 119, label %392
    i32 107, label %393
  ]

392:                                              ; preds = %390
  br label %395

393:                                              ; preds = %390
  br label %395

394:                                              ; preds = %390
  br label %395

395:                                              ; preds = %390, %394, %392, %393
  %396 = phi ptr [ @.str.203, %392 ], [ @.str.204, %393 ], [ @.str.202, %390 ], [ %391, %394 ]
  %397 = tail call i32 @fputs(ptr noundef %396, ptr noundef %0)
  %398 = tail call i64 @fwrite(ptr nonnull @.str.209, i64 5, i64 1, ptr %0)
  br label %399

399:                                              ; preds = %395, %373, %367
  %400 = getelementptr inbounds %struct.rtx_def, ptr %362, i64 0, i32 1
  %401 = load ptr, ptr %400, align 8, !tbaa !16
  %402 = load i32, ptr %401, align 8
  %403 = and i32 %402, 65535
  %404 = zext i32 %403 to i64
  %405 = getelementptr inbounds [139 x i32], ptr @rtx_class, i64 0, i64 %404
  %406 = load i32, ptr %405, align 4, !tbaa !16
  %407 = icmp eq i32 %406, 9
  br i1 %407, label %408, label %418

408:                                              ; preds = %399
  %409 = tail call zeroext i8 @ix86_legitimate_address_p(i32 poison, ptr noundef nonnull %401, i8 noundef zeroext 1), !range !66
  %410 = icmp ne i8 %409, 0
  %411 = icmp eq i32 %361, 80
  %412 = and i1 %411, %410
  br i1 %412, label %413, label %418

413:                                              ; preds = %408
  %414 = load i32, ptr %401, align 8
  %415 = and i32 %414, 65535
  %416 = icmp eq i32 %415, 30
  br i1 %416, label %418, label %417

417:                                              ; preds = %413
  tail call void @output_addr_const(ptr noundef %0, ptr noundef nonnull %401) #30
  br label %55

418:                                              ; preds = %399, %413, %408
  %419 = load ptr, ptr @this_is_asm_operands, align 8, !tbaa !5
  %420 = icmp eq ptr %419, null
  br i1 %420, label %425, label %421

421:                                              ; preds = %418
  %422 = tail call i32 @address_operand(ptr noundef nonnull %401, i32 noundef 0) #30
  %423 = icmp eq i32 %422, 0
  br i1 %423, label %424, label %425

424:                                              ; preds = %421
  tail call void (ptr, ...) @output_operand_lossage(ptr noundef nonnull @.str.210) #30
  br label %55

425:                                              ; preds = %421, %418
  tail call void @output_address(ptr noundef nonnull %401) #30
  br label %55

426:                                              ; preds = %360
  %427 = and i32 %363, 16711680
  %428 = icmp eq i32 %427, 2490368
  br i1 %428, label %429, label %439

429:                                              ; preds = %426
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %4) #30
  %430 = getelementptr inbounds %struct.rtx_def, ptr %362, i64 0, i32 1
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(32) %4, ptr noundef nonnull align 8 dereferenceable(32) %430, i64 32, i1 false), !tbaa.struct !106
  %431 = tail call i32 @mode_for_size(i32 noundef 32, i32 noundef 8, i32 noundef 0) #30
  %432 = call i64 @real_to_target(ptr noundef null, ptr noundef nonnull %4, i32 noundef %431) #30
  %433 = load i32, ptr @ix86_asm_dialect, align 4, !tbaa !16
  %434 = icmp eq i32 %433, 0
  br i1 %434, label %435, label %437

435:                                              ; preds = %429
  %436 = call i32 @putc(i32 noundef 36, ptr noundef %0)
  br label %437

437:                                              ; preds = %435, %429
  %438 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %0, ptr noundef nonnull @.str.211, i64 noundef %432)
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %4) #30
  br label %55

439:                                              ; preds = %360, %426
  %440 = and i32 %363, 16777215
  switch i32 %440, label %447 [
    i32 2555936, label %441
    i32 2621472, label %444
  ]

441:                                              ; preds = %439
  call void @llvm.lifetime.start.p0(i64 30, ptr nonnull %5) #30
  %442 = getelementptr inbounds %struct.rtx_def, ptr %362, i64 0, i32 1
  call void @real_to_decimal(ptr noundef nonnull %5, ptr noundef nonnull %442, i64 noundef 30, i64 noundef 0, i32 noundef 1) #30
  %443 = call i32 @fputs(ptr noundef nonnull %5, ptr noundef %0)
  call void @llvm.lifetime.end.p0(i64 30, ptr nonnull %5) #30
  br label %55

444:                                              ; preds = %439
  call void @llvm.lifetime.start.p0(i64 30, ptr nonnull %6) #30
  %445 = getelementptr inbounds %struct.rtx_def, ptr %362, i64 0, i32 1
  call void @real_to_decimal(ptr noundef nonnull %6, ptr noundef nonnull %445, i64 noundef 30, i64 noundef 0, i32 noundef 1) #30
  %446 = call i32 @fputs(ptr noundef nonnull %6, ptr noundef %0)
  call void @llvm.lifetime.end.p0(i64 30, ptr nonnull %6) #30
  br label %55

447:                                              ; preds = %439
  %448 = icmp eq i32 %364, 33
  br i1 %448, label %449, label %459

449:                                              ; preds = %447
  %450 = lshr i32 %363, 16
  %451 = and i32 %450, 255
  %452 = zext i32 %451 to i64
  %453 = getelementptr inbounds [87 x ptr], ptr @const_tiny_rtx, i64 0, i64 %452
  %454 = load ptr, ptr %453, align 8, !tbaa !5
  %455 = icmp eq ptr %362, %454
  br i1 %455, label %457, label %456

456:                                              ; preds = %449
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 12006, ptr noundef nonnull @.str.131) #30
  br label %457

457:                                              ; preds = %449, %456
  %458 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 64), align 16, !tbaa !5
  br label %459

459:                                              ; preds = %457, %447
  %460 = phi ptr [ %458, %457 ], [ %362, %447 ]
  %461 = icmp eq i32 %361, 80
  br i1 %461, label %477, label %462

462:                                              ; preds = %459
  %463 = load i32, ptr %460, align 8
  %464 = trunc i32 %463 to i16
  switch i16 %464, label %477 [
    i16 30, label %465
    i16 32, label %465
    i16 35, label %470
    i16 45, label %470
    i16 44, label %470
  ]

465:                                              ; preds = %462, %462
  %466 = load i32, ptr @ix86_asm_dialect, align 4, !tbaa !16
  %467 = icmp eq i32 %466, 0
  br i1 %467, label %468, label %477

468:                                              ; preds = %465
  %469 = tail call i32 @putc(i32 noundef 36, ptr noundef %0)
  br label %477

470:                                              ; preds = %462, %462, %462
  %471 = load i32, ptr @ix86_asm_dialect, align 4, !tbaa !16
  %472 = icmp eq i32 %471, 0
  br i1 %472, label %473, label %475

473:                                              ; preds = %470
  %474 = tail call i32 @putc(i32 noundef 36, ptr noundef %0)
  br label %477

475:                                              ; preds = %470
  %476 = tail call i64 @fwrite(ptr nonnull @.str.212, i64 12, i64 1, ptr %0)
  br label %477

477:                                              ; preds = %462, %468, %465, %473, %475, %459
  %478 = load i32, ptr %460, align 8
  %479 = and i32 %478, 65535
  %480 = icmp eq i32 %479, 30
  br i1 %480, label %481, label %485

481:                                              ; preds = %477
  %482 = getelementptr inbounds %struct.rtx_def, ptr %460, i64 0, i32 1
  %483 = load i64, ptr %482, align 8, !tbaa !16
  %484 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %0, ptr noundef nonnull @.str.213, i64 noundef %483)
  br label %55

485:                                              ; preds = %477
  %486 = load i32, ptr @flag_pic, align 4, !tbaa !20
  %487 = icmp eq i32 %486, 0
  br i1 %487, label %489, label %488

488:                                              ; preds = %485
  tail call fastcc void @output_pic_addr_const(ptr noundef %0, ptr noundef nonnull %460, i32 noundef %361)
  br label %55

489:                                              ; preds = %485
  tail call void @output_addr_const(ptr noundef %0, ptr noundef nonnull %460) #30
  br label %55
}

declare void @output_operand_lossage(ptr noundef, ...) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc void @put_condition_code(i32 noundef %0, i32 noundef %1, i32 noundef %2, i32 noundef %3, ptr nocapture noundef %4) unnamed_addr #9 {
  %6 = add i32 %1, -11
  %7 = icmp ult i32 %6, 2
  br i1 %7, label %8, label %15

8:                                                ; preds = %5
  %9 = add i32 %0, -82
  %10 = icmp ult i32 %9, 16
  br i1 %10, label %11, label %15

11:                                               ; preds = %8
  %12 = sext i32 %9 to i64
  %13 = getelementptr inbounds [16 x i32], ptr @switch.table.ix86_fp_compare_code_to_integer, i64 0, i64 %12
  %14 = load i32, ptr %13, align 4
  br label %15

15:                                               ; preds = %8, %11, %5
  %16 = phi i32 [ %1, %5 ], [ 2, %11 ], [ 2, %8 ]
  %17 = phi i32 [ %0, %5 ], [ %14, %11 ], [ 0, %8 ]
  %18 = icmp eq i32 %2, 0
  br i1 %18, label %21, label %19

19:                                               ; preds = %15
  %20 = tail call i32 @reverse_condition(i32 noundef %17) #30
  br label %21

21:                                               ; preds = %19, %15
  %22 = phi i32 [ %20, %19 ], [ %17, %15 ]
  switch i32 %22, label %64 [
    i32 81, label %23
    i32 80, label %26
    i32 83, label %29
    i32 87, label %31
    i32 85, label %36
    i32 89, label %40
    i32 82, label %42
    i32 86, label %46
    i32 84, label %51
    i32 88, label %53
    i32 90, label %58
    i32 91, label %61
  ]

23:                                               ; preds = %21
  %24 = add i32 %16, -6
  %25 = icmp ult i32 %24, 4
  br i1 %25, label %65, label %81

26:                                               ; preds = %21
  %27 = add i32 %16, -6
  %28 = icmp ult i32 %27, 4
  br i1 %28, label %69, label %81

29:                                               ; preds = %21
  switch i32 %16, label %30 [
    i32 5, label %81
    i32 3, label %81
    i32 2, label %81
  ]

30:                                               ; preds = %29
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 11146, ptr noundef nonnull @.str.131) #30
  br label %81

31:                                               ; preds = %21
  switch i32 %16, label %35 [
    i32 2, label %32
    i32 7, label %81
  ]

32:                                               ; preds = %31
  %33 = icmp eq i32 %3, 0
  %34 = select i1 %33, ptr @.str.404, ptr @.str.415
  br label %81

35:                                               ; preds = %31
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 11157, ptr noundef nonnull @.str.131) #30
  unreachable

36:                                               ; preds = %21
  %37 = add i32 %16, -2
  %38 = icmp ult i32 %37, 4
  br i1 %38, label %73, label %39

39:                                               ; preds = %36
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 11173, ptr noundef nonnull @.str.131) #30
  unreachable

40:                                               ; preds = %21
  switch i32 %16, label %41 [
    i32 7, label %81
    i32 2, label %81
  ]

41:                                               ; preds = %40
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 11177, ptr noundef nonnull @.str.131) #30
  br label %81

42:                                               ; preds = %21
  %43 = add i32 %16, -2
  %44 = icmp ult i32 %43, 4
  br i1 %44, label %77, label %45

45:                                               ; preds = %42
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 11194, ptr noundef nonnull @.str.131) #30
  unreachable

46:                                               ; preds = %21
  switch i32 %16, label %47 [
    i32 7, label %48
    i32 2, label %48
  ]

47:                                               ; preds = %46
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 11199, ptr noundef nonnull @.str.131) #30
  br label %48

48:                                               ; preds = %46, %46, %47
  %49 = icmp eq i32 %3, 0
  %50 = select i1 %49, ptr @.str.419, ptr @.str.418
  br label %81

51:                                               ; preds = %21
  switch i32 %16, label %52 [
    i32 5, label %81
    i32 3, label %81
    i32 2, label %81
  ]

52:                                               ; preds = %51
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 11203, ptr noundef nonnull @.str.131) #30
  br label %81

53:                                               ; preds = %21
  switch i32 %16, label %57 [
    i32 2, label %81
    i32 7, label %54
  ]

54:                                               ; preds = %53
  %55 = icmp eq i32 %3, 0
  %56 = select i1 %55, ptr @.str.419, ptr @.str.418
  br label %81

57:                                               ; preds = %53
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 11213, ptr noundef nonnull @.str.131) #30
  unreachable

58:                                               ; preds = %21
  %59 = icmp eq i32 %3, 0
  %60 = select i1 %59, ptr @.str.422, ptr @.str.421
  br label %81

61:                                               ; preds = %21
  %62 = icmp eq i32 %3, 0
  %63 = select i1 %62, ptr @.str.424, ptr @.str.423
  br label %81

64:                                               ; preds = %21
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 11222, ptr noundef nonnull @.str.131) #30
  unreachable

65:                                               ; preds = %23
  %66 = sext i32 %24 to i64
  %67 = shl i64 %66, 2
  %68 = call ptr @llvm.load.relative.i64(ptr @reltable.put_condition_code, i64 %67)
  br label %81

69:                                               ; preds = %26
  %70 = sext i32 %27 to i64
  %71 = shl i64 %70, 2
  %72 = call ptr @llvm.load.relative.i64(ptr @reltable.put_condition_code.1392, i64 %71)
  br label %81

73:                                               ; preds = %36
  %74 = sext i32 %37 to i64
  %75 = shl i64 %74, 2
  %76 = call ptr @llvm.load.relative.i64(ptr @reltable.put_condition_code.1393, i64 %75)
  br label %81

77:                                               ; preds = %42
  %78 = sext i32 %43 to i64
  %79 = shl i64 %78, 2
  %80 = call ptr @llvm.load.relative.i64(ptr @reltable.put_condition_code.1394, i64 %79)
  br label %81

81:                                               ; preds = %77, %73, %26, %69, %23, %65, %53, %52, %51, %51, %51, %41, %40, %40, %31, %30, %29, %29, %29, %54, %32, %61, %58, %48
  %82 = phi ptr [ %63, %61 ], [ %60, %58 ], [ %56, %54 ], [ %50, %48 ], [ %34, %32 ], [ @.str.414, %29 ], [ @.str.414, %29 ], [ @.str.414, %29 ], [ @.str.414, %30 ], [ @.str.416, %31 ], [ @.str.416, %40 ], [ @.str.416, %40 ], [ @.str.416, %41 ], [ @.str.177, %51 ], [ @.str.177, %51 ], [ @.str.177, %51 ], [ @.str.177, %52 ], [ @.str.420, %53 ], [ %68, %65 ], [ @.str.408, %23 ], [ %72, %69 ], [ @.str.413, %26 ], [ %76, %73 ], [ %80, %77 ]
  %83 = tail call i32 @fputs(ptr noundef nonnull %82, ptr noundef %4)
  ret void
}

declare ptr @adjust_address_1(ptr noundef, i32 noundef, i64 noundef, i32 noundef, i32 noundef) local_unnamed_addr #3

declare ptr @find_reg_note(ptr noundef, i32 noundef, ptr noundef) local_unnamed_addr #3

declare i32 @final_forward_branch_p(ptr noundef) local_unnamed_addr #3

declare void @output_addr_const(ptr noundef, ptr noundef) local_unnamed_addr #3

declare i32 @address_operand(ptr noundef, i32 noundef) local_unnamed_addr #3

declare void @output_address(ptr noundef) local_unnamed_addr #3

declare i64 @real_to_target(ptr noundef, ptr noundef, i32 noundef) local_unnamed_addr #3

declare i32 @mode_for_size(i32 noundef, i32 noundef, i32 noundef) local_unnamed_addr #3

declare void @real_to_decimal(ptr noundef, ptr noundef, i64 noundef, i64 noundef, i32 noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc void @output_pic_addr_const(ptr noundef %0, ptr noundef %1, i32 noundef %2) unnamed_addr #9 {
  %4 = alloca [256 x i8], align 16
  call void @llvm.lifetime.start.p0(i64 256, ptr nonnull %4) #30
  %5 = load i32, ptr %1, align 8
  %6 = trunc i32 %5 to i16
  switch i16 %6, label %127 [
    i16 36, label %7
    i16 45, label %13
    i16 44, label %22
    i16 12, label %25
    i16 30, label %31
    i16 35, label %35
    i16 32, label %38
    i16 49, label %54
    i16 50, label %76
    i16 18, label %90
  ]

7:                                                ; preds = %3
  %8 = load i32, ptr @flag_pic, align 4, !tbaa !20
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %10, label %11

10:                                               ; preds = %7
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 10763, ptr noundef nonnull @.str.131) #30
  br label %11

11:                                               ; preds = %7, %10
  %12 = tail call i32 @putc(i32 noundef 46, ptr noundef %0)
  br label %128

13:                                               ; preds = %3
  tail call void @output_addr_const(ptr noundef %0, ptr noundef nonnull %1) #30
  %14 = icmp eq i32 %2, 80
  br i1 %14, label %15, label %128

15:                                               ; preds = %13
  %16 = getelementptr inbounds %struct.rtx_def, ptr %1, i64 0, i32 1, i32 0, i32 0, i64 1
  %17 = load i32, ptr %16, align 8, !tbaa !16
  %18 = and i32 %17, 2
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %20, label %128

20:                                               ; preds = %15
  %21 = tail call i64 @fwrite(ptr nonnull @.str.425, i64 4, i64 1, ptr %0)
  br label %128

22:                                               ; preds = %3
  %23 = getelementptr inbounds %struct.rtx_def, ptr %1, i64 0, i32 1
  %24 = load ptr, ptr %23, align 8, !tbaa !16
  br label %25

25:                                               ; preds = %22, %3
  %26 = phi ptr [ %1, %3 ], [ %24, %22 ]
  %27 = getelementptr inbounds %struct.rtx_def, ptr %26, i64 1, i32 1
  %28 = load i32, ptr %27, align 8, !tbaa !16
  %29 = call i32 (ptr, ptr, ...) @sprintf(ptr noundef nonnull dereferenceable(1) %4, ptr noundef nonnull dereferenceable(1) @.str.106, ptr noundef nonnull @.str.154, i32 noundef %28)
  %30 = load ptr, ptr @asm_out_file, align 8, !tbaa !5
  call void @assemble_name(ptr noundef %30, ptr noundef nonnull %4) #30
  br label %128

31:                                               ; preds = %3
  %32 = getelementptr inbounds %struct.rtx_def, ptr %1, i64 0, i32 1
  %33 = load i64, ptr %32, align 8, !tbaa !16
  %34 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %0, ptr noundef nonnull @.str.213, i64 noundef %33)
  br label %128

35:                                               ; preds = %3
  %36 = getelementptr inbounds %struct.rtx_def, ptr %1, i64 0, i32 1
  %37 = load ptr, ptr %36, align 8, !tbaa !16
  tail call fastcc void @output_pic_addr_const(ptr noundef %0, ptr noundef %37, i32 noundef %2)
  br label %128

38:                                               ; preds = %3
  %39 = and i32 %5, 16711680
  %40 = icmp eq i32 %39, 0
  br i1 %40, label %41, label %53

41:                                               ; preds = %38
  %42 = getelementptr inbounds %struct.rtx_def, ptr %1, i64 0, i32 1
  %43 = getelementptr inbounds %struct.rtx_def, ptr %1, i64 0, i32 1, i32 0, i32 0, i64 1
  %44 = load i64, ptr %43, align 8, !tbaa !16
  %45 = icmp ne i64 %44, 0
  %46 = load i64, ptr %42, align 8, !tbaa !16
  %47 = icmp slt i64 %46, 0
  %48 = select i1 %45, i1 true, i1 %47
  br i1 %48, label %49, label %51

49:                                               ; preds = %41
  %50 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %0, ptr noundef nonnull @.str.426, i64 noundef %44, i64 noundef %46)
  br label %128

51:                                               ; preds = %41
  %52 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %0, ptr noundef nonnull @.str.213, i64 noundef %46)
  br label %128

53:                                               ; preds = %38
  tail call void (ptr, ...) @output_operand_lossage(ptr noundef nonnull @.str.427) #30
  br label %128

54:                                               ; preds = %3
  %55 = getelementptr inbounds %struct.rtx_def, ptr %1, i64 0, i32 1
  %56 = load ptr, ptr %55, align 8, !tbaa !16
  %57 = load i32, ptr %56, align 8
  %58 = and i32 %57, 65535
  %59 = icmp eq i32 %58, 30
  br i1 %59, label %60, label %64

60:                                               ; preds = %54
  tail call fastcc void @output_pic_addr_const(ptr noundef %0, ptr noundef nonnull %56, i32 noundef %2)
  %61 = tail call i32 @putc(i32 noundef 43, ptr noundef %0)
  %62 = getelementptr inbounds %struct.rtx_def, ptr %1, i64 0, i32 1, i32 0, i32 0, i64 1
  %63 = load ptr, ptr %62, align 8, !tbaa !16
  tail call fastcc void @output_pic_addr_const(ptr noundef %0, ptr noundef %63, i32 noundef %2)
  br label %128

64:                                               ; preds = %54
  %65 = getelementptr inbounds %struct.rtx_def, ptr %1, i64 0, i32 1, i32 0, i32 0, i64 1
  %66 = load ptr, ptr %65, align 8, !tbaa !16
  %67 = load i32, ptr %66, align 8
  %68 = and i32 %67, 65535
  %69 = icmp eq i32 %68, 30
  br i1 %69, label %72, label %70

70:                                               ; preds = %64
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 10836, ptr noundef nonnull @.str.131) #30
  %71 = load ptr, ptr %65, align 8, !tbaa !16
  br label %72

72:                                               ; preds = %64, %70
  %73 = phi ptr [ %66, %64 ], [ %71, %70 ]
  tail call fastcc void @output_pic_addr_const(ptr noundef %0, ptr noundef %73, i32 noundef %2)
  %74 = tail call i32 @putc(i32 noundef 43, ptr noundef %0)
  %75 = load ptr, ptr %55, align 8, !tbaa !16
  tail call fastcc void @output_pic_addr_const(ptr noundef %0, ptr noundef %75, i32 noundef %2)
  br label %128

76:                                               ; preds = %3
  %77 = load i32, ptr @ix86_asm_dialect, align 4, !tbaa !16
  %78 = icmp eq i32 %77, 1
  %79 = select i1 %78, i32 40, i32 91
  %80 = tail call i32 @putc(i32 noundef %79, ptr noundef %0)
  %81 = getelementptr inbounds %struct.rtx_def, ptr %1, i64 0, i32 1
  %82 = load ptr, ptr %81, align 8, !tbaa !16
  tail call fastcc void @output_pic_addr_const(ptr noundef %0, ptr noundef %82, i32 noundef %2)
  %83 = tail call i32 @putc(i32 noundef 45, ptr noundef %0)
  %84 = getelementptr inbounds %struct.rtx_def, ptr %1, i64 0, i32 1, i32 0, i32 0, i64 1
  %85 = load ptr, ptr %84, align 8, !tbaa !16
  tail call fastcc void @output_pic_addr_const(ptr noundef %0, ptr noundef %85, i32 noundef %2)
  %86 = load i32, ptr @ix86_asm_dialect, align 4, !tbaa !16
  %87 = icmp eq i32 %86, 1
  %88 = select i1 %87, i32 41, i32 93
  %89 = tail call i32 @putc(i32 noundef %88, ptr noundef %0)
  br label %128

90:                                               ; preds = %3
  %91 = getelementptr inbounds %struct.rtx_def, ptr %1, i64 0, i32 1
  %92 = load ptr, ptr %91, align 8, !tbaa !16
  %93 = load i32, ptr %92, align 8, !tbaa !107
  %94 = icmp eq i32 %93, 1
  br i1 %94, label %97, label %95

95:                                               ; preds = %90
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 10854, ptr noundef nonnull @.str.131) #30
  %96 = load ptr, ptr %91, align 8, !tbaa !16
  br label %97

97:                                               ; preds = %90, %95
  %98 = phi ptr [ %92, %90 ], [ %96, %95 ]
  %99 = getelementptr inbounds %struct.rtvec_def, ptr %98, i64 0, i32 1
  %100 = load ptr, ptr %99, align 8, !tbaa !5
  tail call fastcc void @output_pic_addr_const(ptr noundef %0, ptr noundef %100, i32 noundef %2)
  %101 = getelementptr inbounds %struct.rtx_def, ptr %1, i64 0, i32 1, i32 0, i32 0, i64 1
  %102 = load i32, ptr %101, align 8, !tbaa !16
  switch i32 %102, label %126 [
    i32 0, label %103
    i32 1, label %105
    i32 9, label %107
    i32 2, label %109
    i32 3, label %114
    i32 4, label %116
    i32 5, label %118
    i32 6, label %120
    i32 7, label %122
    i32 8, label %124
  ]

103:                                              ; preds = %97
  %104 = tail call i64 @fwrite(ptr nonnull @.str.428, i64 4, i64 1, ptr %0)
  br label %128

105:                                              ; preds = %97
  %106 = tail call i64 @fwrite(ptr nonnull @.str.429, i64 7, i64 1, ptr %0)
  br label %128

107:                                              ; preds = %97
  %108 = tail call i64 @fwrite(ptr nonnull @.str.430, i64 7, i64 1, ptr %0)
  br label %128

109:                                              ; preds = %97
  %110 = load i32, ptr @ix86_asm_dialect, align 4, !tbaa !16
  %111 = icmp eq i32 %110, 0
  %112 = select i1 %111, ptr @.str.431, ptr @.str.432
  %113 = tail call i32 @fputs(ptr noundef nonnull %112, ptr noundef %0)
  br label %128

114:                                              ; preds = %97
  %115 = tail call i64 @fwrite(ptr nonnull @.str.219, i64 9, i64 1, ptr %0)
  br label %128

116:                                              ; preds = %97
  %117 = tail call i64 @fwrite(ptr nonnull @.str.220, i64 6, i64 1, ptr %0)
  br label %128

118:                                              ; preds = %97
  %119 = tail call i64 @fwrite(ptr nonnull @.str.221, i64 7, i64 1, ptr %0)
  br label %128

120:                                              ; preds = %97
  %121 = tail call i64 @fwrite(ptr nonnull @.str.222, i64 7, i64 1, ptr %0)
  br label %128

122:                                              ; preds = %97
  %123 = tail call i64 @fwrite(ptr nonnull @.str.223, i64 10, i64 1, ptr %0)
  br label %128

124:                                              ; preds = %97
  %125 = tail call i64 @fwrite(ptr nonnull @.str.224, i64 10, i64 1, ptr %0)
  br label %128

126:                                              ; preds = %97
  tail call void (ptr, ...) @output_operand_lossage(ptr noundef nonnull @.str.433) #30
  br label %128

127:                                              ; preds = %3
  tail call void (ptr, ...) @output_operand_lossage(ptr noundef nonnull @.str.434) #30
  br label %128

128:                                              ; preds = %103, %105, %107, %109, %114, %116, %118, %120, %122, %124, %126, %60, %72, %53, %51, %49, %13, %15, %20, %127, %76, %35, %31, %25, %11
  call void @llvm.lifetime.end.p0(i64 256, ptr nonnull %4) #30
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define dso_local void @print_operand_address(ptr noundef %0, ptr noundef %1) local_unnamed_addr #9 {
  %3 = alloca %struct.ix86_address, align 8
  call void @llvm.lifetime.start.p0(i64 40, ptr nonnull %3) #30
  %4 = call i32 @ix86_decompose_address(ptr noundef %1, ptr noundef nonnull %3), !range !172
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %6, label %7

6:                                                ; preds = %2
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 12045, ptr noundef nonnull @.str.131) #30
  br label %7

7:                                                ; preds = %2, %6
  %8 = load ptr, ptr %3, align 8, !tbaa !166
  %9 = getelementptr inbounds %struct.ix86_address, ptr %3, i64 0, i32 1
  %10 = load ptr, ptr %9, align 8, !tbaa !168
  %11 = getelementptr inbounds %struct.ix86_address, ptr %3, i64 0, i32 2
  %12 = load ptr, ptr %11, align 8, !tbaa !169
  %13 = getelementptr inbounds %struct.ix86_address, ptr %3, i64 0, i32 3
  %14 = load i64, ptr %13, align 8, !tbaa !170
  %15 = trunc i64 %14 to i32
  %16 = getelementptr inbounds %struct.ix86_address, ptr %3, i64 0, i32 4
  %17 = load i32, ptr %16, align 8
  switch i32 %17, label %27 [
    i32 0, label %28
    i32 1, label %18
    i32 2, label %18
  ]

18:                                               ; preds = %7, %7
  %19 = load i32, ptr @ix86_asm_dialect, align 4, !tbaa !16
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %21, label %23

21:                                               ; preds = %18
  %22 = tail call i32 @putc(i32 noundef 37, ptr noundef %0)
  br label %23

23:                                               ; preds = %21, %18
  %24 = icmp eq i32 %17, 1
  %25 = select i1 %24, ptr @.str.214, ptr @.str.215
  %26 = tail call i64 @fwrite(ptr nonnull %25, i64 3, i64 1, ptr %0)
  br label %28

27:                                               ; preds = %7
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 12063, ptr noundef nonnull @.str.131) #30
  br label %28

28:                                               ; preds = %27, %23, %7
  %29 = icmp ne ptr %8, null
  %30 = icmp ne ptr %10, null
  %31 = select i1 %29, i1 true, i1 %30
  br i1 %31, label %52, label %32

32:                                               ; preds = %28
  %33 = load i32, ptr %12, align 8
  %34 = and i32 %33, 65535
  %35 = icmp eq i32 %34, 30
  br i1 %35, label %36, label %47

36:                                               ; preds = %32
  %37 = load i32, ptr @ix86_asm_dialect, align 4, !tbaa !16
  %38 = icmp eq i32 %37, 1
  %39 = icmp eq i32 %17, 0
  %40 = and i1 %39, %38
  br i1 %40, label %41, label %43

41:                                               ; preds = %36
  %42 = tail call i64 @fwrite(ptr nonnull @.str.216, i64 3, i64 1, ptr %0)
  br label %43

43:                                               ; preds = %41, %36
  %44 = getelementptr inbounds %struct.rtx_def, ptr %12, i64 0, i32 1
  %45 = load i64, ptr %44, align 8, !tbaa !16
  %46 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %0, ptr noundef nonnull @.str.213, i64 noundef %45)
  br label %144

47:                                               ; preds = %32
  %48 = load i32, ptr @flag_pic, align 4, !tbaa !20
  %49 = icmp eq i32 %48, 0
  br i1 %49, label %51, label %50

50:                                               ; preds = %47
  tail call fastcc void @output_pic_addr_const(ptr noundef %0, ptr noundef nonnull %12, i32 noundef 0)
  br label %144

51:                                               ; preds = %47
  tail call void @output_addr_const(ptr noundef %0, ptr noundef nonnull %12) #30
  br label %144

52:                                               ; preds = %28
  %53 = load i32, ptr @ix86_asm_dialect, align 4, !tbaa !16
  %54 = icmp eq i32 %53, 0
  %55 = icmp eq ptr %12, null
  br i1 %54, label %56, label %78

56:                                               ; preds = %52
  br i1 %55, label %67, label %57

57:                                               ; preds = %56
  %58 = load i32, ptr @flag_pic, align 4, !tbaa !20
  %59 = icmp eq i32 %58, 0
  br i1 %59, label %61, label %60

60:                                               ; preds = %57
  tail call fastcc void @output_pic_addr_const(ptr noundef %0, ptr noundef nonnull %12, i32 noundef 0)
  br label %67

61:                                               ; preds = %57
  %62 = load i32, ptr %12, align 8
  %63 = and i32 %62, 65535
  %64 = icmp eq i32 %63, 44
  br i1 %64, label %65, label %66

65:                                               ; preds = %61
  tail call void @output_asm_label(ptr noundef nonnull %12) #30
  br label %67

66:                                               ; preds = %61
  tail call void @output_addr_const(ptr noundef %0, ptr noundef nonnull %12) #30
  br label %67

67:                                               ; preds = %60, %66, %65, %56
  %68 = tail call i32 @putc(i32 noundef 40, ptr noundef %0)
  br i1 %29, label %69, label %70

69:                                               ; preds = %67
  tail call void @print_reg(ptr noundef nonnull %8, i32 noundef 0, ptr noundef %0)
  br label %70

70:                                               ; preds = %69, %67
  br i1 %30, label %71, label %76

71:                                               ; preds = %70
  %72 = tail call i32 @putc(i32 noundef 44, ptr noundef %0)
  tail call void @print_reg(ptr noundef nonnull %10, i32 noundef 0, ptr noundef %0)
  %73 = icmp eq i32 %15, 1
  br i1 %73, label %76, label %74

74:                                               ; preds = %71
  %75 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %0, ptr noundef nonnull @.str.217, i32 noundef %15)
  br label %76

76:                                               ; preds = %71, %74, %70
  %77 = tail call i32 @putc(i32 noundef 41, ptr noundef %0)
  br label %144

78:                                               ; preds = %52
  br i1 %55, label %113, label %79

79:                                               ; preds = %78
  %80 = load i32, ptr %12, align 8
  %81 = and i32 %80, 65535
  %82 = icmp eq i32 %81, 35
  br i1 %82, label %83, label %99

83:                                               ; preds = %79
  %84 = getelementptr inbounds %struct.rtx_def, ptr %12, i64 0, i32 1
  %85 = load ptr, ptr %84, align 8, !tbaa !16
  %86 = load i32, ptr %85, align 8
  %87 = and i32 %86, 65535
  %88 = icmp eq i32 %87, 49
  br i1 %88, label %89, label %99

89:                                               ; preds = %83
  %90 = getelementptr inbounds %struct.rtx_def, ptr %85, i64 0, i32 1, i32 0, i32 0, i64 1
  %91 = load ptr, ptr %90, align 8, !tbaa !16
  %92 = load i32, ptr %91, align 8
  %93 = and i32 %92, 65535
  %94 = icmp eq i32 %93, 30
  br i1 %94, label %95, label %99

95:                                               ; preds = %89
  %96 = getelementptr inbounds %struct.rtx_def, ptr %85, i64 0, i32 1
  %97 = load ptr, ptr %96, align 8, !tbaa !16
  %98 = tail call ptr @gen_rtx_fmt_e_stat(i32 noundef 35, i32 noundef 0, ptr noundef %97) #30
  br label %99

99:                                               ; preds = %95, %89, %83, %79
  %100 = phi ptr [ %98, %95 ], [ %12, %89 ], [ %12, %83 ], [ %12, %79 ]
  %101 = phi ptr [ %91, %95 ], [ null, %89 ], [ null, %83 ], [ null, %79 ]
  %102 = load i32, ptr @flag_pic, align 4, !tbaa !20
  %103 = icmp eq i32 %102, 0
  br i1 %103, label %105, label %104

104:                                              ; preds = %99
  tail call fastcc void @output_pic_addr_const(ptr noundef %0, ptr noundef %100, i32 noundef 0)
  br label %110

105:                                              ; preds = %99
  %106 = load i32, ptr %100, align 8
  %107 = trunc i32 %106 to i16
  switch i16 %107, label %109 [
    i16 44, label %108
    i16 30, label %110
  ]

108:                                              ; preds = %105
  tail call void @output_asm_label(ptr noundef nonnull %100) #30
  br label %110

109:                                              ; preds = %105
  tail call void @output_addr_const(ptr noundef %0, ptr noundef nonnull %100) #30
  br label %110

110:                                              ; preds = %105, %104, %109, %108
  %111 = phi ptr [ %101, %104 ], [ %101, %108 ], [ %101, %109 ], [ %100, %105 ]
  %112 = tail call i32 @putc(i32 noundef 91, ptr noundef %0)
  br i1 %29, label %116, label %128

113:                                              ; preds = %78
  %114 = tail call i32 @putc(i32 noundef 91, ptr noundef %0)
  br i1 %29, label %115, label %134

115:                                              ; preds = %113
  tail call void @print_reg(ptr noundef nonnull %8, i32 noundef 0, ptr noundef %0)
  br label %136

116:                                              ; preds = %110
  tail call void @print_reg(ptr noundef nonnull %8, i32 noundef 0, ptr noundef %0)
  %117 = icmp eq ptr %111, null
  br i1 %117, label %136, label %118

118:                                              ; preds = %116
  %119 = getelementptr inbounds %struct.rtx_def, ptr %111, i64 0, i32 1
  %120 = load i64, ptr %119, align 8, !tbaa !16
  %121 = icmp sgt i64 %120, -1
  br i1 %121, label %122, label %125

122:                                              ; preds = %118
  %123 = tail call i32 @putc(i32 noundef 43, ptr noundef %0)
  %124 = load i64, ptr %119, align 8, !tbaa !16
  br label %125

125:                                              ; preds = %122, %118
  %126 = phi i64 [ %124, %122 ], [ %120, %118 ]
  %127 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %0, ptr noundef nonnull @.str.213, i64 noundef %126)
  br label %136

128:                                              ; preds = %110
  %129 = icmp eq ptr %111, null
  br i1 %129, label %134, label %130

130:                                              ; preds = %128
  %131 = getelementptr inbounds %struct.rtx_def, ptr %111, i64 0, i32 1
  %132 = load i64, ptr %131, align 8, !tbaa !16
  %133 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %0, ptr noundef nonnull @.str.213, i64 noundef %132)
  br label %136

134:                                              ; preds = %113, %128
  %135 = tail call i32 @putc(i32 noundef 48, ptr noundef %0)
  br label %136

136:                                              ; preds = %115, %130, %134, %116, %125
  br i1 %30, label %137, label %142

137:                                              ; preds = %136
  %138 = tail call i32 @putc(i32 noundef 43, ptr noundef %0)
  tail call void @print_reg(ptr noundef nonnull %10, i32 noundef 0, ptr noundef %0)
  %139 = icmp eq i32 %15, 1
  br i1 %139, label %142, label %140

140:                                              ; preds = %137
  %141 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %0, ptr noundef nonnull @.str.218, i32 noundef %15)
  br label %142

142:                                              ; preds = %137, %140, %136
  %143 = tail call i32 @putc(i32 noundef 93, ptr noundef %0)
  br label %144

144:                                              ; preds = %76, %142, %43, %51, %50
  call void @llvm.lifetime.end.p0(i64 40, ptr nonnull %3) #30
  ret void
}

declare void @output_asm_label(ptr noundef) local_unnamed_addr #3

declare ptr @gen_rtx_fmt_e_stat(i32 noundef, i32 noundef, ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define dso_local zeroext i8 @output_addr_const_extra(ptr noundef %0, ptr nocapture noundef readonly %1) local_unnamed_addr #9 {
  %3 = load i32, ptr %1, align 8
  %4 = and i32 %3, 65535
  %5 = icmp eq i32 %4, 18
  br i1 %5, label %6, label %25

6:                                                ; preds = %2
  %7 = getelementptr inbounds %struct.rtx_def, ptr %1, i64 0, i32 1
  %8 = load ptr, ptr %7, align 8, !tbaa !16
  %9 = getelementptr inbounds %struct.rtvec_def, ptr %8, i64 0, i32 1
  %10 = load ptr, ptr %9, align 8, !tbaa !5
  %11 = getelementptr inbounds %struct.rtx_def, ptr %1, i64 0, i32 1, i32 0, i32 0, i64 1
  %12 = load i32, ptr %11, align 8, !tbaa !16
  switch i32 %12, label %25 [
    i32 3, label %13
    i32 4, label %15
    i32 5, label %17
    i32 6, label %19
    i32 7, label %21
    i32 8, label %23
  ]

13:                                               ; preds = %6
  tail call void @output_addr_const(ptr noundef %0, ptr noundef %10) #30
  %14 = tail call i64 @fwrite(ptr nonnull @.str.219, i64 9, i64 1, ptr %0)
  br label %25

15:                                               ; preds = %6
  tail call void @output_addr_const(ptr noundef %0, ptr noundef %10) #30
  %16 = tail call i64 @fwrite(ptr nonnull @.str.220, i64 6, i64 1, ptr %0)
  br label %25

17:                                               ; preds = %6
  tail call void @output_addr_const(ptr noundef %0, ptr noundef %10) #30
  %18 = tail call i64 @fwrite(ptr nonnull @.str.221, i64 7, i64 1, ptr %0)
  br label %25

19:                                               ; preds = %6
  tail call void @output_addr_const(ptr noundef %0, ptr noundef %10) #30
  %20 = tail call i64 @fwrite(ptr nonnull @.str.222, i64 7, i64 1, ptr %0)
  br label %25

21:                                               ; preds = %6
  tail call void @output_addr_const(ptr noundef %0, ptr noundef %10) #30
  %22 = tail call i64 @fwrite(ptr nonnull @.str.223, i64 10, i64 1, ptr %0)
  br label %25

23:                                               ; preds = %6
  tail call void @output_addr_const(ptr noundef %0, ptr noundef %10) #30
  %24 = tail call i64 @fwrite(ptr nonnull @.str.224, i64 10, i64 1, ptr %0)
  br label %25

25:                                               ; preds = %13, %15, %17, %19, %21, %23, %6, %2
  %26 = phi i8 [ 0, %2 ], [ 0, %6 ], [ 1, %23 ], [ 1, %21 ], [ 1, %19 ], [ 1, %17 ], [ 1, %15 ], [ 1, %13 ]
  ret i8 %26
}

; Function Attrs: nounwind sspstrong uwtable
define dso_local void @split_di(ptr nocapture noundef readonly %0, i32 noundef %1, ptr nocapture noundef writeonly %2, ptr nocapture noundef writeonly %3) local_unnamed_addr #9 {
  %5 = icmp eq i32 %1, 0
  br i1 %5, label %38, label %6

6:                                                ; preds = %4
  %7 = sext i32 %1 to i64
  br label %8

8:                                                ; preds = %6, %33
  %9 = phi i64 [ %7, %6 ], [ %10, %33 ]
  %10 = add nsw i64 %9, -1
  %11 = getelementptr inbounds ptr, ptr %0, i64 %10
  %12 = load ptr, ptr %11, align 8, !tbaa !5
  %13 = load i32, ptr %12, align 8
  %14 = and i32 %13, 65535
  %15 = icmp eq i32 %14, 43
  br i1 %15, label %16, label %20

16:                                               ; preds = %8
  %17 = tail call ptr @adjust_address_1(ptr noundef nonnull %12, i32 noundef 16, i64 noundef 0, i32 noundef 1, i32 noundef 1) #30
  %18 = getelementptr inbounds ptr, ptr %2, i64 %10
  store ptr %17, ptr %18, align 8, !tbaa !5
  %19 = tail call ptr @adjust_address_1(ptr noundef nonnull %12, i32 noundef 16, i64 noundef 4, i32 noundef 1, i32 noundef 1) #30
  br label %33

20:                                               ; preds = %8
  %21 = lshr i32 %13, 16
  %22 = and i32 %21, 255
  %23 = icmp eq i32 %22, 0
  %24 = select i1 %23, i32 17, i32 %22
  %25 = tail call ptr @simplify_gen_subreg(i32 noundef 16, ptr noundef nonnull %12, i32 noundef %24, i32 noundef 0) #30
  %26 = getelementptr inbounds ptr, ptr %2, i64 %10
  store ptr %25, ptr %26, align 8, !tbaa !5
  %27 = load i32, ptr %12, align 8
  %28 = lshr i32 %27, 16
  %29 = and i32 %28, 255
  %30 = icmp eq i32 %29, 0
  %31 = select i1 %30, i32 17, i32 %29
  %32 = tail call ptr @simplify_gen_subreg(i32 noundef 16, ptr noundef nonnull %12, i32 noundef %31, i32 noundef 4) #30
  br label %33

33:                                               ; preds = %20, %16
  %34 = phi ptr [ %19, %16 ], [ %32, %20 ]
  %35 = getelementptr inbounds ptr, ptr %3, i64 %10
  store ptr %34, ptr %35, align 8
  %36 = and i64 %10, 4294967295
  %37 = icmp eq i64 %36, 0
  br i1 %37, label %38, label %8, !llvm.loop !176

38:                                               ; preds = %33, %4
  ret void
}

declare ptr @simplify_gen_subreg(i32 noundef, ptr noundef, i32 noundef, i32 noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define dso_local void @split_ti(ptr nocapture noundef readonly %0, i32 noundef %1, ptr nocapture noundef writeonly %2, ptr nocapture noundef writeonly %3) local_unnamed_addr #9 {
  %5 = icmp eq i32 %1, 0
  br i1 %5, label %28, label %6

6:                                                ; preds = %4
  %7 = sext i32 %1 to i64
  br label %8

8:                                                ; preds = %6, %23
  %9 = phi i64 [ %7, %6 ], [ %10, %23 ]
  %10 = add nsw i64 %9, -1
  %11 = getelementptr inbounds ptr, ptr %0, i64 %10
  %12 = load ptr, ptr %11, align 8, !tbaa !5
  %13 = load i32, ptr %12, align 8
  %14 = and i32 %13, 65535
  %15 = icmp eq i32 %14, 43
  %16 = getelementptr inbounds ptr, ptr %2, i64 %10
  br i1 %15, label %17, label %20

17:                                               ; preds = %8
  %18 = tail call ptr @adjust_address_1(ptr noundef nonnull %12, i32 noundef 17, i64 noundef 0, i32 noundef 1, i32 noundef 1) #30
  store ptr %18, ptr %16, align 8, !tbaa !5
  %19 = tail call ptr @adjust_address_1(ptr noundef nonnull %12, i32 noundef 17, i64 noundef 8, i32 noundef 1, i32 noundef 1) #30
  br label %23

20:                                               ; preds = %8
  %21 = tail call ptr @simplify_gen_subreg(i32 noundef 17, ptr noundef nonnull %12, i32 noundef 18, i32 noundef 0) #30
  store ptr %21, ptr %16, align 8, !tbaa !5
  %22 = tail call ptr @simplify_gen_subreg(i32 noundef 17, ptr noundef nonnull %12, i32 noundef 18, i32 noundef 8) #30
  br label %23

23:                                               ; preds = %20, %17
  %24 = phi ptr [ %19, %17 ], [ %22, %20 ]
  %25 = getelementptr inbounds ptr, ptr %3, i64 %10
  store ptr %24, ptr %25, align 8
  %26 = and i64 %10, 4294967295
  %27 = icmp eq i64 %26, 0
  br i1 %27, label %28, label %8, !llvm.loop !177

28:                                               ; preds = %23, %4
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define dso_local nonnull ptr @output_387_binary_op(ptr noundef %0, ptr nocapture noundef %1) local_unnamed_addr #9 {
  %3 = load ptr, ptr %1, align 8, !tbaa !5
  %4 = load i32, ptr %3, align 8
  %5 = and i32 %4, 65535
  %6 = icmp eq i32 %5, 37
  br i1 %6, label %7, label %12

7:                                                ; preds = %2
  %8 = getelementptr i8, ptr %3, i64 8
  %9 = load i32, ptr %8, align 8, !tbaa !16
  %10 = add i32 %9, -21
  %11 = icmp ult i32 %10, 32
  br i1 %11, label %38, label %12

12:                                               ; preds = %38, %7, %2
  %13 = getelementptr inbounds ptr, ptr %1, i64 1
  %14 = load ptr, ptr %13, align 8, !tbaa !5
  %15 = load i32, ptr %14, align 8
  %16 = and i32 %15, 65535
  %17 = icmp eq i32 %16, 37
  br i1 %17, label %18, label %23

18:                                               ; preds = %12
  %19 = getelementptr i8, ptr %14, i64 8
  %20 = load i32, ptr %19, align 8, !tbaa !16
  %21 = add i32 %20, -21
  %22 = icmp ult i32 %21, 32
  br i1 %22, label %42, label %23

23:                                               ; preds = %42, %18, %12
  %24 = getelementptr inbounds ptr, ptr %1, i64 2
  %25 = load ptr, ptr %24, align 8, !tbaa !5
  %26 = load i32, ptr %25, align 8
  %27 = and i32 %26, 65535
  %28 = icmp eq i32 %27, 37
  br i1 %28, label %29, label %46

29:                                               ; preds = %23
  %30 = getelementptr i8, ptr %25, i64 8
  %31 = load i32, ptr %30, align 8, !tbaa !16
  %32 = zext i32 %31 to i64
  %33 = add nsw i64 %32, -21
  %34 = icmp ult i64 %33, 8
  br i1 %34, label %46, label %35

35:                                               ; preds = %29
  %36 = add nsw i64 %32, -45
  %37 = icmp ult i64 %36, 8
  br label %46

38:                                               ; preds = %7
  %39 = lshr i32 -16776961, %10
  %40 = and i32 %39, 1
  %41 = icmp eq i32 %40, 0
  br i1 %41, label %12, label %46

42:                                               ; preds = %18
  %43 = lshr i32 -16776961, %21
  %44 = and i32 %43, 1
  %45 = icmp eq i32 %44, 0
  br i1 %45, label %23, label %46

46:                                               ; preds = %42, %38, %23, %35, %29
  %47 = phi i1 [ false, %23 ], [ true, %29 ], [ %37, %35 ], [ true, %38 ], [ true, %42 ]
  %48 = getelementptr inbounds ptr, ptr %1, i64 3
  %49 = load ptr, ptr %48, align 8, !tbaa !5
  %50 = load i32, ptr %49, align 8
  %51 = trunc i32 %50 to i16
  switch i16 %51, label %136 [
    i16 49, label %52
    i16 50, label %73
    i16 52, label %94
    i16 55, label %115
  ]

52:                                               ; preds = %46
  %53 = getelementptr inbounds ptr, ptr %1, i64 1
  %54 = load ptr, ptr %53, align 8, !tbaa !5
  %55 = load i32, ptr %54, align 8
  %56 = lshr i32 %55, 16
  %57 = and i32 %56, 255
  %58 = zext i32 %57 to i64
  %59 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %58
  %60 = load i8, ptr %59, align 1, !tbaa !16
  %61 = icmp eq i8 %60, 2
  br i1 %61, label %137, label %62

62:                                               ; preds = %52
  %63 = getelementptr inbounds ptr, ptr %1, i64 2
  %64 = load ptr, ptr %63, align 8, !tbaa !5
  %65 = load i32, ptr %64, align 8
  %66 = lshr i32 %65, 16
  %67 = and i32 %66, 255
  %68 = zext i32 %67 to i64
  %69 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %68
  %70 = load i8, ptr %69, align 1, !tbaa !16
  %71 = icmp eq i8 %70, 2
  %72 = select i1 %71, ptr @.str.225, ptr @.str.226
  br label %137

73:                                               ; preds = %46
  %74 = getelementptr inbounds ptr, ptr %1, i64 1
  %75 = load ptr, ptr %74, align 8, !tbaa !5
  %76 = load i32, ptr %75, align 8
  %77 = lshr i32 %76, 16
  %78 = and i32 %77, 255
  %79 = zext i32 %78 to i64
  %80 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %79
  %81 = load i8, ptr %80, align 1, !tbaa !16
  %82 = icmp eq i8 %81, 2
  br i1 %82, label %137, label %83

83:                                               ; preds = %73
  %84 = getelementptr inbounds ptr, ptr %1, i64 2
  %85 = load ptr, ptr %84, align 8, !tbaa !5
  %86 = load i32, ptr %85, align 8
  %87 = lshr i32 %86, 16
  %88 = and i32 %87, 255
  %89 = zext i32 %88 to i64
  %90 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %89
  %91 = load i8, ptr %90, align 1, !tbaa !16
  %92 = icmp eq i8 %91, 2
  %93 = select i1 %92, ptr @.str.228, ptr @.str.229
  br label %137

94:                                               ; preds = %46
  %95 = getelementptr inbounds ptr, ptr %1, i64 1
  %96 = load ptr, ptr %95, align 8, !tbaa !5
  %97 = load i32, ptr %96, align 8
  %98 = lshr i32 %97, 16
  %99 = and i32 %98, 255
  %100 = zext i32 %99 to i64
  %101 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %100
  %102 = load i8, ptr %101, align 1, !tbaa !16
  %103 = icmp eq i8 %102, 2
  br i1 %103, label %137, label %104

104:                                              ; preds = %94
  %105 = getelementptr inbounds ptr, ptr %1, i64 2
  %106 = load ptr, ptr %105, align 8, !tbaa !5
  %107 = load i32, ptr %106, align 8
  %108 = lshr i32 %107, 16
  %109 = and i32 %108, 255
  %110 = zext i32 %109 to i64
  %111 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %110
  %112 = load i8, ptr %111, align 1, !tbaa !16
  %113 = icmp eq i8 %112, 2
  %114 = select i1 %113, ptr @.str.231, ptr @.str.232
  br label %137

115:                                              ; preds = %46
  %116 = getelementptr inbounds ptr, ptr %1, i64 1
  %117 = load ptr, ptr %116, align 8, !tbaa !5
  %118 = load i32, ptr %117, align 8
  %119 = lshr i32 %118, 16
  %120 = and i32 %119, 255
  %121 = zext i32 %120 to i64
  %122 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %121
  %123 = load i8, ptr %122, align 1, !tbaa !16
  %124 = icmp eq i8 %123, 2
  br i1 %124, label %137, label %125

125:                                              ; preds = %115
  %126 = getelementptr inbounds ptr, ptr %1, i64 2
  %127 = load ptr, ptr %126, align 8, !tbaa !5
  %128 = load i32, ptr %127, align 8
  %129 = lshr i32 %128, 16
  %130 = and i32 %129, 255
  %131 = zext i32 %130 to i64
  %132 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %131
  %133 = load i8, ptr %132, align 1, !tbaa !16
  %134 = icmp eq i8 %133, 2
  %135 = select i1 %134, ptr @.str.234, ptr @.str.235
  br label %137

136:                                              ; preds = %46
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 12373, ptr noundef nonnull @.str.131) #30
  br label %137

137:                                              ; preds = %125, %104, %83, %62, %115, %94, %73, %52, %136
  %138 = phi ptr [ undef, %136 ], [ @.str.227, %52 ], [ @.str.230, %73 ], [ @.str.233, %94 ], [ @.str.236, %115 ], [ @.str.227, %62 ], [ @.str.230, %83 ], [ @.str.233, %104 ], [ @.str.236, %125 ]
  %139 = phi ptr [ undef, %136 ], [ @.str.225, %52 ], [ @.str.228, %73 ], [ @.str.231, %94 ], [ @.str.234, %115 ], [ %72, %62 ], [ %93, %83 ], [ %114, %104 ], [ %135, %125 ]
  br i1 %47, label %140, label %165

140:                                              ; preds = %137
  %141 = load i32, ptr @ix86_isa_flags, align 4, !tbaa !20
  %142 = and i32 %141, 32
  %143 = icmp eq i32 %142, 0
  br i1 %143, label %154, label %144

144:                                              ; preds = %140
  %145 = tail call ptr @strcpy(ptr noundef nonnull dereferenceable(1) @output_387_binary_op.buf, ptr noundef nonnull dereferenceable(1) %138)
  %146 = load ptr, ptr %1, align 8, !tbaa !5
  %147 = load i32, ptr %146, align 8
  %148 = and i32 %147, 16711680
  %149 = icmp eq i32 %148, 2490368
  %150 = tail call i64 @strlen(ptr nonnull dereferenceable(1) @output_387_binary_op.buf)
  %151 = getelementptr inbounds i8, ptr @output_387_binary_op.buf, i64 %150
  br i1 %149, label %152, label %153

152:                                              ; preds = %144
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 1 dereferenceable(27) %151, ptr noundef nonnull align 1 dereferenceable(27) @.str.237, i64 27, i1 false)
  br label %286

153:                                              ; preds = %144
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 1 dereferenceable(27) %151, ptr noundef nonnull align 1 dereferenceable(27) @.str.238, i64 27, i1 false)
  br label %286

154:                                              ; preds = %140
  %155 = getelementptr inbounds i8, ptr %138, i64 1
  %156 = tail call ptr @strcpy(ptr noundef nonnull dereferenceable(1) @output_387_binary_op.buf, ptr noundef nonnull dereferenceable(1) %155)
  %157 = load ptr, ptr %1, align 8, !tbaa !5
  %158 = load i32, ptr %157, align 8
  %159 = and i32 %158, 16711680
  %160 = icmp eq i32 %159, 2490368
  %161 = tail call i64 @strlen(ptr nonnull dereferenceable(1) @output_387_binary_op.buf)
  %162 = getelementptr inbounds i8, ptr @output_387_binary_op.buf, i64 %161
  br i1 %160, label %163, label %164

163:                                              ; preds = %154
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 1 dereferenceable(19) %162, ptr noundef nonnull align 1 dereferenceable(19) @.str.239, i64 19, i1 false)
  br label %286

164:                                              ; preds = %154
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 1 dereferenceable(19) %162, ptr noundef nonnull align 1 dereferenceable(19) @.str.240, i64 19, i1 false)
  br label %286

165:                                              ; preds = %137
  %166 = tail call ptr @strcpy(ptr noundef nonnull dereferenceable(1) @output_387_binary_op.buf, ptr noundef nonnull dereferenceable(1) %139)
  %167 = load ptr, ptr %48, align 8, !tbaa !5
  %168 = load i32, ptr %167, align 8
  %169 = trunc i32 %168 to i16
  switch i16 %169, label %282 [
    i16 52, label %170
    i16 49, label %170
    i16 50, label %214
    i16 55, label %214
  ]

170:                                              ; preds = %165, %165
  %171 = getelementptr inbounds ptr, ptr %1, i64 2
  %172 = load ptr, ptr %171, align 8, !tbaa !5
  %173 = load i32, ptr %172, align 8
  %174 = and i32 %173, 65535
  %175 = icmp eq i32 %174, 37
  br i1 %175, label %176, label %188

176:                                              ; preds = %170
  %177 = load ptr, ptr %1, align 8, !tbaa !5
  %178 = getelementptr i8, ptr %177, i64 8
  %179 = load i32, ptr %178, align 8, !tbaa !16
  %180 = getelementptr i8, ptr %172, i64 8
  %181 = load i32, ptr %180, align 8, !tbaa !16
  %182 = icmp eq i32 %179, %181
  br i1 %182, label %183, label %192

183:                                              ; preds = %176
  %184 = getelementptr inbounds ptr, ptr %1, i64 1
  %185 = load ptr, ptr %184, align 8, !tbaa !5
  store ptr %185, ptr %171, align 8, !tbaa !5
  store ptr %172, ptr %184, align 8, !tbaa !5
  %186 = load i32, ptr %185, align 8
  %187 = and i32 %186, 65535
  br label %188

188:                                              ; preds = %183, %170
  %189 = phi i32 [ %187, %183 ], [ %174, %170 ]
  %190 = phi ptr [ %185, %183 ], [ %172, %170 ]
  %191 = icmp eq i32 %189, 43
  br i1 %191, label %283, label %192

192:                                              ; preds = %176, %188
  %193 = phi ptr [ %190, %188 ], [ %172, %176 ]
  %194 = getelementptr i8, ptr %193, i64 8
  %195 = load i32, ptr %194, align 8, !tbaa !16
  %196 = tail call ptr @find_regno_note(ptr noundef %0, i32 noundef 1, i32 noundef %195) #30
  %197 = icmp eq ptr %196, null
  %198 = load ptr, ptr %1, align 8, !tbaa !5
  %199 = load i32, ptr %198, align 8
  %200 = and i32 %199, 65535
  %201 = icmp eq i32 %200, 37
  br i1 %197, label %208, label %202

202:                                              ; preds = %192
  br i1 %201, label %203, label %207

203:                                              ; preds = %202
  %204 = getelementptr i8, ptr %198, i64 8
  %205 = load i32, ptr %204, align 8, !tbaa !16
  %206 = icmp eq i32 %205, 8
  br i1 %206, label %283, label %207

207:                                              ; preds = %203, %202
  br label %283

208:                                              ; preds = %192
  br i1 %201, label %209, label %213

209:                                              ; preds = %208
  %210 = getelementptr i8, ptr %198, i64 8
  %211 = load i32, ptr %210, align 8, !tbaa !16
  %212 = icmp eq i32 %211, 8
  br i1 %212, label %283, label %213

213:                                              ; preds = %209, %208
  br label %283

214:                                              ; preds = %165, %165
  %215 = getelementptr inbounds ptr, ptr %1, i64 1
  %216 = load ptr, ptr %215, align 8, !tbaa !5
  %217 = load i32, ptr %216, align 8
  %218 = and i32 %217, 65535
  %219 = icmp eq i32 %218, 43
  br i1 %219, label %283, label %220

220:                                              ; preds = %214
  %221 = getelementptr inbounds ptr, ptr %1, i64 2
  %222 = load ptr, ptr %221, align 8, !tbaa !5
  %223 = load i32, ptr %222, align 8
  %224 = and i32 %223, 65535
  %225 = icmp eq i32 %224, 43
  br i1 %225, label %283, label %226

226:                                              ; preds = %220
  %227 = getelementptr i8, ptr %222, i64 8
  %228 = load i32, ptr %227, align 8, !tbaa !16
  %229 = tail call ptr @find_regno_note(ptr noundef %0, i32 noundef 1, i32 noundef %228) #30
  %230 = icmp eq ptr %229, null
  br i1 %230, label %241, label %231

231:                                              ; preds = %226
  %232 = load ptr, ptr %1, align 8, !tbaa !5
  %233 = load i32, ptr %232, align 8
  %234 = and i32 %233, 65535
  %235 = icmp eq i32 %234, 37
  br i1 %235, label %236, label %240

236:                                              ; preds = %231
  %237 = getelementptr i8, ptr %232, i64 8
  %238 = load i32, ptr %237, align 8, !tbaa !16
  %239 = icmp eq i32 %238, 8
  br i1 %239, label %283, label %240

240:                                              ; preds = %236, %231
  br label %283

241:                                              ; preds = %226
  %242 = load ptr, ptr %215, align 8, !tbaa !5
  %243 = getelementptr i8, ptr %242, i64 8
  %244 = load i32, ptr %243, align 8, !tbaa !16
  %245 = tail call ptr @find_regno_note(ptr noundef %0, i32 noundef 1, i32 noundef %244) #30
  %246 = icmp eq ptr %245, null
  %247 = load ptr, ptr %1, align 8, !tbaa !5
  %248 = load i32, ptr %247, align 8
  %249 = and i32 %248, 65535
  %250 = icmp eq i32 %249, 37
  br i1 %246, label %257, label %251

251:                                              ; preds = %241
  br i1 %250, label %252, label %256

252:                                              ; preds = %251
  %253 = getelementptr i8, ptr %247, i64 8
  %254 = load i32, ptr %253, align 8, !tbaa !16
  %255 = icmp eq i32 %254, 8
  br i1 %255, label %283, label %256

256:                                              ; preds = %252, %251
  br label %283

257:                                              ; preds = %241
  br i1 %250, label %258, label %272

258:                                              ; preds = %257
  %259 = getelementptr i8, ptr %247, i64 8
  %260 = load i32, ptr %259, align 8, !tbaa !16
  %261 = icmp eq i32 %260, 8
  br i1 %261, label %262, label %272

262:                                              ; preds = %258
  %263 = load ptr, ptr %215, align 8, !tbaa !5
  %264 = load i32, ptr %263, align 8
  %265 = and i32 %264, 65535
  %266 = icmp eq i32 %265, 37
  br i1 %266, label %267, label %271

267:                                              ; preds = %262
  %268 = getelementptr i8, ptr %263, i64 8
  %269 = load i32, ptr %268, align 8, !tbaa !16
  %270 = icmp eq i32 %269, 8
  br i1 %270, label %283, label %271

271:                                              ; preds = %267, %262
  br label %283

272:                                              ; preds = %258, %257
  %273 = load ptr, ptr %215, align 8, !tbaa !5
  %274 = load i32, ptr %273, align 8
  %275 = and i32 %274, 65535
  %276 = icmp eq i32 %275, 37
  br i1 %276, label %277, label %281

277:                                              ; preds = %272
  %278 = getelementptr i8, ptr %273, i64 8
  %279 = load i32, ptr %278, align 8, !tbaa !16
  %280 = icmp eq i32 %279, 8
  br i1 %280, label %283, label %281

281:                                              ; preds = %277, %272
  br label %283

282:                                              ; preds = %165
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 12519, ptr noundef nonnull @.str.131) #30
  br label %283

283:                                              ; preds = %277, %267, %252, %236, %220, %214, %209, %203, %188, %281, %271, %256, %240, %213, %207, %282
  %284 = phi ptr [ %139, %282 ], [ @.str.248, %240 ], [ @.str.250, %256 ], [ @.str.251, %271 ], [ @.str.253, %281 ], [ @.str.243, %207 ], [ @.str.245, %213 ], [ @.str.241, %188 ], [ @.str.242, %203 ], [ @.str.244, %209 ], [ @.str.246, %214 ], [ @.str.241, %220 ], [ @.str.247, %236 ], [ @.str.249, %252 ], [ @.str.244, %267 ], [ @.str.252, %277 ]
  %285 = tail call ptr @strcat(ptr noundef nonnull dereferenceable(1) @output_387_binary_op.buf, ptr noundef nonnull dereferenceable(1) %284)
  br label %286

286:                                              ; preds = %153, %152, %164, %163, %283
  ret ptr @output_387_binary_op.buf
}

; Function Attrs: mustprogress nofree nounwind willreturn memory(argmem: readwrite)
declare ptr @strcpy(ptr noalias noundef returned writeonly, ptr noalias nocapture noundef readonly) local_unnamed_addr #20

; Function Attrs: mustprogress nofree nounwind willreturn memory(argmem: readwrite)
declare ptr @strcat(ptr noalias noundef returned, ptr noalias nocapture noundef readonly) local_unnamed_addr #20

declare ptr @find_regno_note(ptr noundef, i32 noundef, i32 noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define dso_local i32 @ix86_mode_needed(i32 noundef %0, ptr noundef %1) local_unnamed_addr #9 {
  %3 = load i32, ptr %1, align 8
  %4 = trunc i32 %3 to i16
  switch i16 %4, label %15 [
    i16 10, label %36
    i16 8, label %5
  ]

5:                                                ; preds = %2
  %6 = getelementptr inbounds %struct.rtx_def, ptr %1, i64 1
  %7 = load ptr, ptr %6, align 8, !tbaa !16
  %8 = tail call i32 @asm_noperands(ptr noundef %7) #30
  %9 = icmp sgt i32 %8, -1
  br i1 %9, label %36, label %10

10:                                               ; preds = %5
  %11 = load ptr, ptr %6, align 8, !tbaa !16
  %12 = load i32, ptr %11, align 8
  %13 = and i32 %12, 65535
  %14 = icmp eq i32 %13, 16
  br i1 %14, label %36, label %15

15:                                               ; preds = %2, %10
  %16 = getelementptr inbounds %struct.rtx_def, ptr %1, i64 1, i32 1
  %17 = load i32, ptr %16, align 8, !tbaa !16
  %18 = icmp slt i32 %17, 0
  br i1 %18, label %19, label %24

19:                                               ; preds = %15
  %20 = getelementptr inbounds %struct.rtx_def, ptr %1, i64 1
  %21 = load ptr, ptr %20, align 8, !tbaa !16
  %22 = tail call i32 @recog(ptr noundef %21, ptr noundef nonnull %1, ptr noundef null) #30
  store i32 %22, ptr %16, align 8, !tbaa !16
  %23 = icmp slt i32 %22, 0
  br i1 %23, label %36, label %24

24:                                               ; preds = %15, %19
  %25 = tail call i32 @get_attr_i387_cw(ptr noundef nonnull %1) #30
  switch i32 %0, label %34 [
    i32 0, label %26
    i32 1, label %28
    i32 2, label %30
    i32 3, label %32
  ]

26:                                               ; preds = %24
  %27 = icmp eq i32 %25, 0
  br i1 %27, label %36, label %35

28:                                               ; preds = %24
  %29 = icmp eq i32 %25, 1
  br i1 %29, label %36, label %35

30:                                               ; preds = %24
  %31 = icmp eq i32 %25, 2
  br i1 %31, label %36, label %35

32:                                               ; preds = %24
  %33 = icmp eq i32 %25, 3
  br i1 %33, label %36, label %35

34:                                               ; preds = %24
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 12572, ptr noundef nonnull @.str.131) #30
  br label %35

35:                                               ; preds = %32, %30, %28, %26, %34
  br label %36

36:                                               ; preds = %32, %30, %28, %26, %19, %5, %10, %2, %35
  %37 = phi i32 [ 5, %35 ], [ 4, %2 ], [ 4, %10 ], [ 4, %5 ], [ 5, %19 ], [ 0, %26 ], [ 1, %28 ], [ 2, %30 ], [ 3, %32 ]
  ret i32 %37
}

declare i32 @asm_noperands(ptr noundef) local_unnamed_addr #3

declare i32 @get_attr_i387_cw(ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define dso_local void @emit_i387_cw_initialization(i32 noundef %0) local_unnamed_addr #9 {
  %2 = tail call ptr @assign_386_stack_local(i32 noundef 15, i32 noundef 2)
  %3 = tail call ptr @gen_reg_rtx(i32 noundef 15) #30
  %4 = tail call ptr @gen_x86_fnstcw_1(ptr noundef %2) #30
  %5 = tail call ptr @emit_insn(ptr noundef %4) #30
  %6 = tail call ptr @copy_rtx(ptr noundef %2) #30
  %7 = tail call ptr @emit_move_insn(ptr noundef %3, ptr noundef %6) #30
  %8 = load i8, ptr getelementptr inbounds ([62 x i8], ptr @ix86_tune_features, i64 0, i64 9), align 1, !tbaa !16
  %9 = icmp eq i8 %8, 0
  br i1 %9, label %10, label %14

10:                                               ; preds = %1
  %11 = load ptr, ptr @cfun, align 8, !tbaa !5
  %12 = tail call zeroext i8 @optimize_function_for_size_p(ptr noundef %11) #30
  %13 = icmp eq i8 %12, 0
  br i1 %13, label %34, label %14

14:                                               ; preds = %10, %1
  switch i32 %0, label %33 [
    i32 0, label %15
    i32 1, label %18
    i32 2, label %24
    i32 3, label %30
  ]

15:                                               ; preds = %14
  %16 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef 3072) #30
  %17 = tail call ptr @gen_iorhi3(ptr noundef %3, ptr noundef %3, ptr noundef %16) #30
  br label %48

18:                                               ; preds = %14
  %19 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef -3073) #30
  %20 = tail call ptr @gen_andhi3(ptr noundef %3, ptr noundef %3, ptr noundef %19) #30
  %21 = tail call ptr @emit_insn(ptr noundef %20) #30
  %22 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef 1024) #30
  %23 = tail call ptr @gen_iorhi3(ptr noundef %3, ptr noundef %3, ptr noundef %22) #30
  br label %48

24:                                               ; preds = %14
  %25 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef -3073) #30
  %26 = tail call ptr @gen_andhi3(ptr noundef %3, ptr noundef %3, ptr noundef %25) #30
  %27 = tail call ptr @emit_insn(ptr noundef %26) #30
  %28 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef 2048) #30
  %29 = tail call ptr @gen_iorhi3(ptr noundef %3, ptr noundef %3, ptr noundef %28) #30
  br label %48

30:                                               ; preds = %14
  %31 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef 32) #30
  %32 = tail call ptr @gen_iorhi3(ptr noundef %3, ptr noundef %3, ptr noundef %31) #30
  br label %48

33:                                               ; preds = %14
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 12627, ptr noundef nonnull @.str.131) #30
  unreachable

34:                                               ; preds = %10
  switch i32 %0, label %47 [
    i32 0, label %35
    i32 1, label %38
    i32 2, label %41
    i32 3, label %44
  ]

35:                                               ; preds = %34
  %36 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef 12) #30
  %37 = tail call ptr @gen_movsi_insv_1(ptr noundef %3, ptr noundef %36) #30
  br label %48

38:                                               ; preds = %34
  %39 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef 4) #30
  %40 = tail call ptr @gen_movsi_insv_1(ptr noundef %3, ptr noundef %39) #30
  br label %48

41:                                               ; preds = %34
  %42 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef 8) #30
  %43 = tail call ptr @gen_movsi_insv_1(ptr noundef %3, ptr noundef %42) #30
  br label %48

44:                                               ; preds = %34
  %45 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef 32) #30
  %46 = tail call ptr @gen_iorhi3(ptr noundef %3, ptr noundef %3, ptr noundef %45) #30
  br label %48

47:                                               ; preds = %34
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 12659, ptr noundef nonnull @.str.131) #30
  unreachable

48:                                               ; preds = %30, %24, %18, %15, %44, %41, %38, %35
  %49 = phi ptr [ %32, %30 ], [ %29, %24 ], [ %23, %18 ], [ %17, %15 ], [ %46, %44 ], [ %43, %41 ], [ %40, %38 ], [ %37, %35 ]
  %50 = phi i32 [ 6, %30 ], [ 5, %24 ], [ 4, %18 ], [ 3, %15 ], [ 6, %44 ], [ 5, %41 ], [ 4, %38 ], [ 3, %35 ]
  %51 = tail call ptr @emit_insn(ptr noundef %49) #30
  %52 = tail call ptr @assign_386_stack_local(i32 noundef 15, i32 noundef %50)
  %53 = tail call ptr @emit_move_insn(ptr noundef %52, ptr noundef %3) #30
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define dso_local ptr @assign_386_stack_local(i32 noundef %0, i32 noundef %1) local_unnamed_addr #9 {
  %3 = icmp ult i32 %1, 7
  br i1 %3, label %5, label %4

4:                                                ; preds = %2
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 19337, ptr noundef nonnull @.str.131) #30
  br label %5

5:                                                ; preds = %2, %4
  %6 = icmp ne i32 %1, 0
  %7 = load i32, ptr @virtuals_instantiated, align 4, !tbaa !20
  %8 = icmp eq i32 %7, 0
  %9 = xor i1 %6, %8
  br i1 %9, label %11, label %10

10:                                               ; preds = %5
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 19340, ptr noundef nonnull @.str.131) #30
  br label %11

11:                                               ; preds = %5, %10
  %12 = load ptr, ptr @cfun, align 8, !tbaa !5
  %13 = getelementptr inbounds %struct.function, ptr %12, i64 0, i32 10
  %14 = load ptr, ptr %13, align 8, !tbaa !87
  %15 = load ptr, ptr %14, align 8, !tbaa !5
  %16 = icmp eq ptr %15, null
  br i1 %16, label %35, label %17

17:                                               ; preds = %11, %31
  %18 = phi ptr [ %33, %31 ], [ %15, %11 ]
  %19 = load i16, ptr %18, align 8, !tbaa !178
  %20 = zext i16 %19 to i32
  %21 = icmp eq i32 %20, %0
  br i1 %21, label %22, label %31

22:                                               ; preds = %17
  %23 = getelementptr inbounds %struct.stack_local_entry, ptr %18, i64 0, i32 1
  %24 = load i16, ptr %23, align 2, !tbaa !180
  %25 = zext i16 %24 to i32
  %26 = icmp eq i32 %25, %1
  br i1 %26, label %27, label %31

27:                                               ; preds = %22
  %28 = getelementptr inbounds %struct.stack_local_entry, ptr %18, i64 0, i32 2
  %29 = load ptr, ptr %28, align 8, !tbaa !181
  %30 = tail call ptr @copy_rtx(ptr noundef %29) #30
  br label %51

31:                                               ; preds = %17, %22
  %32 = getelementptr inbounds %struct.stack_local_entry, ptr %18, i64 0, i32 3
  %33 = load ptr, ptr %32, align 8, !tbaa !5
  %34 = icmp eq ptr %33, null
  br i1 %34, label %35, label %17, !llvm.loop !182

35:                                               ; preds = %31, %11
  %36 = tail call ptr @ggc_alloc_stat(i64 noundef 24) #30
  %37 = trunc i32 %1 to i16
  %38 = getelementptr inbounds %struct.stack_local_entry, ptr %36, i64 0, i32 1
  store i16 %37, ptr %38, align 2, !tbaa !180
  %39 = trunc i32 %0 to i16
  store i16 %39, ptr %36, align 8, !tbaa !178
  %40 = zext i32 %0 to i64
  %41 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %40
  %42 = load i8, ptr %41, align 1, !tbaa !16
  %43 = zext i8 %42 to i64
  %44 = tail call ptr @assign_stack_local(i32 noundef %0, i64 noundef %43, i32 noundef 0) #30
  %45 = getelementptr inbounds %struct.stack_local_entry, ptr %36, i64 0, i32 2
  store ptr %44, ptr %45, align 8, !tbaa !181
  %46 = load ptr, ptr @cfun, align 8, !tbaa !5
  %47 = getelementptr inbounds %struct.function, ptr %46, i64 0, i32 10
  %48 = load ptr, ptr %47, align 8, !tbaa !87
  %49 = load ptr, ptr %48, align 8, !tbaa !183
  %50 = getelementptr inbounds %struct.stack_local_entry, ptr %36, i64 0, i32 3
  store ptr %49, ptr %50, align 8, !tbaa !184
  store ptr %36, ptr %48, align 8, !tbaa !183
  br label %51

51:                                               ; preds = %35, %27
  %52 = phi ptr [ %30, %27 ], [ %44, %35 ]
  ret ptr %52
}

declare ptr @gen_reg_rtx(i32 noundef) local_unnamed_addr #3

declare ptr @gen_x86_fnstcw_1(ptr noundef) local_unnamed_addr #3

declare ptr @gen_iorhi3(ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

declare ptr @gen_andhi3(ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

declare ptr @gen_movsi_insv_1(ptr noundef, ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define dso_local nonnull ptr @output_fix_trunc(ptr noundef %0, ptr noundef %1, i32 noundef %2) local_unnamed_addr #9 {
  %4 = tail call ptr @find_regno_note(ptr noundef %0, i32 noundef 1, i32 noundef 8) #30
  %5 = icmp ne ptr %4, null
  %6 = load ptr, ptr %1, align 8, !tbaa !5
  %7 = load i32, ptr %6, align 8
  %8 = and i32 %7, 16711680
  %9 = icmp eq i32 %8, 1114112
  %10 = tail call i32 @get_attr_i387_cw(ptr noundef %0) #30
  %11 = icmp ne i32 %2, 0
  %12 = or i1 %11, %9
  %13 = xor i1 %12, true
  %14 = select i1 %13, i1 true, i1 %5
  br i1 %14, label %16, label %15

15:                                               ; preds = %3
  tail call void @output_asm_insn(ptr noundef nonnull @.str.254, ptr noundef nonnull %1) #30
  br label %16

16:                                               ; preds = %3, %15
  %17 = getelementptr inbounds ptr, ptr %1, i64 1
  %18 = load ptr, ptr %17, align 8, !tbaa !5
  %19 = load i32, ptr %18, align 8
  %20 = and i32 %19, 65535
  %21 = icmp eq i32 %20, 37
  br i1 %21, label %22, label %26

22:                                               ; preds = %16
  %23 = getelementptr i8, ptr %18, i64 8
  %24 = load i32, ptr %23, align 8, !tbaa !16
  %25 = icmp eq i32 %24, 8
  br i1 %25, label %27, label %26

26:                                               ; preds = %22, %16
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 12686, ptr noundef nonnull @.str.131) #30
  br label %27

27:                                               ; preds = %22, %26
  %28 = load ptr, ptr %1, align 8, !tbaa !5
  %29 = load i32, ptr %28, align 8
  %30 = and i32 %29, 65535
  %31 = icmp eq i32 %30, 43
  br i1 %31, label %33, label %32

32:                                               ; preds = %27
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 12687, ptr noundef nonnull @.str.131) #30
  br label %33

33:                                               ; preds = %27, %32
  %34 = load ptr, ptr %17, align 8, !tbaa !5
  %35 = load i32, ptr %34, align 8
  %36 = and i32 %35, 16711680
  %37 = icmp eq i32 %36, 2686976
  br i1 %37, label %38, label %39

38:                                               ; preds = %33
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 12688, ptr noundef nonnull @.str.131) #30
  br label %39

39:                                               ; preds = %33, %38
  br i1 %11, label %48, label %40

40:                                               ; preds = %39
  %41 = icmp eq i32 %10, 5
  br i1 %41, label %45, label %42

42:                                               ; preds = %40
  tail call void @output_asm_insn(ptr noundef nonnull @.str.256, ptr noundef nonnull %1) #30
  %43 = select i1 %5, i1 true, i1 %9
  %44 = select i1 %43, ptr @.str.257, ptr @.str.258
  tail call void @output_asm_insn(ptr noundef nonnull %44, ptr noundef nonnull %1) #30
  br label %48

45:                                               ; preds = %40
  %46 = select i1 %5, i1 true, i1 %9
  %47 = select i1 %46, ptr @.str.257, ptr @.str.258
  br label %48

48:                                               ; preds = %39, %42, %45
  %49 = phi ptr [ %47, %45 ], [ @.str.255, %39 ], [ @.str.259, %42 ]
  tail call void @output_asm_insn(ptr noundef nonnull %49, ptr noundef nonnull %1) #30
  ret ptr @.str.43
}

; Function Attrs: nounwind sspstrong uwtable
define dso_local ptr @output_fp_compare(ptr noundef %0, ptr noundef %1, i32 noundef %2, i32 noundef %3) local_unnamed_addr #9 {
  %5 = load ptr, ptr %1, align 8, !tbaa !5
  %6 = load i32, ptr %5, align 8
  %7 = and i32 %6, 65535
  %8 = icmp eq i32 %7, 37
  br i1 %8, label %9, label %12

9:                                                ; preds = %4
  %10 = getelementptr i8, ptr %5, i64 8
  %11 = load i32, ptr %10, align 8, !tbaa !16
  switch i32 %11, label %12 [
    i32 52, label %36
    i32 51, label %36
    i32 50, label %36
    i32 49, label %36
    i32 48, label %36
    i32 47, label %36
    i32 46, label %36
    i32 45, label %36
    i32 28, label %36
    i32 27, label %36
    i32 26, label %36
    i32 25, label %36
    i32 24, label %36
    i32 23, label %36
    i32 22, label %36
    i32 21, label %36
  ]

12:                                               ; preds = %9, %4
  %13 = getelementptr inbounds ptr, ptr %1, i64 1
  %14 = load ptr, ptr %13, align 8, !tbaa !5
  %15 = load i32, ptr %14, align 8
  %16 = and i32 %15, 65535
  %17 = icmp eq i32 %16, 37
  br i1 %17, label %23, label %18

18:                                               ; preds = %12
  %19 = icmp eq i32 %2, 0
  %20 = getelementptr inbounds ptr, ptr %1, i64 2
  %21 = select i1 %19, ptr %20, ptr %13
  %22 = select i1 %19, ptr %13, ptr %1
  br label %55

23:                                               ; preds = %12
  %24 = getelementptr i8, ptr %14, i64 8
  %25 = load i32, ptr %24, align 8, !tbaa !16
  %26 = zext i32 %25 to i64
  %27 = add nsw i64 %26, -21
  %28 = icmp ult i64 %27, 8
  br i1 %28, label %36, label %29

29:                                               ; preds = %23
  %30 = add nsw i64 %26, -45
  %31 = icmp ult i64 %30, 8
  %32 = icmp eq i32 %2, 0
  %33 = getelementptr inbounds ptr, ptr %1, i64 2
  %34 = select i1 %32, ptr %33, ptr %13
  %35 = select i1 %32, ptr %13, ptr %1
  br i1 %31, label %36, label %55

36:                                               ; preds = %9, %9, %9, %9, %9, %9, %9, %9, %9, %9, %9, %9, %9, %9, %9, %9, %23, %29
  %37 = and i32 %6, 16711680
  %38 = icmp eq i32 %37, 2490368
  %39 = icmp eq i32 %3, 0
  %40 = load i32, ptr @ix86_isa_flags, align 4, !tbaa !20
  %41 = lshr i32 %40, 5
  %42 = and i32 %41, 1
  %43 = xor i32 %42, 1
  %44 = zext i32 %43 to i64
  br i1 %38, label %45, label %50

45:                                               ; preds = %36
  br i1 %39, label %48, label %46

46:                                               ; preds = %45
  %47 = getelementptr inbounds [25 x i8], ptr @output_fp_compare.ucomiss, i64 0, i64 %44
  br label %133

48:                                               ; preds = %45
  %49 = getelementptr inbounds [24 x i8], ptr @output_fp_compare.comiss, i64 0, i64 %44
  br label %133

50:                                               ; preds = %36
  br i1 %39, label %53, label %51

51:                                               ; preds = %50
  %52 = getelementptr inbounds [25 x i8], ptr @output_fp_compare.ucomisd, i64 0, i64 %44
  br label %133

53:                                               ; preds = %50
  %54 = getelementptr inbounds [24 x i8], ptr @output_fp_compare.comisd, i64 0, i64 %44
  br label %133

55:                                               ; preds = %18, %29
  %56 = phi ptr [ %21, %18 ], [ %34, %29 ]
  %57 = phi ptr [ %22, %18 ], [ %35, %29 ]
  %58 = phi i1 [ %19, %18 ], [ %32, %29 ]
  %59 = load ptr, ptr %57, align 8, !tbaa !5
  %60 = load ptr, ptr %56, align 8, !tbaa !5
  %61 = load i32, ptr %59, align 8
  %62 = and i32 %61, 65535
  %63 = icmp eq i32 %62, 37
  br i1 %63, label %64, label %68

64:                                               ; preds = %55
  %65 = getelementptr i8, ptr %59, i64 8
  %66 = load i32, ptr %65, align 8, !tbaa !16
  %67 = icmp eq i32 %66, 8
  br i1 %67, label %69, label %68

68:                                               ; preds = %64, %55
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 12775, ptr noundef nonnull @.str.131) #30
  br label %69

69:                                               ; preds = %64, %68
  %70 = tail call ptr @find_regno_note(ptr noundef %0, i32 noundef 1, i32 noundef 8) #30
  %71 = icmp ne ptr %70, null
  %72 = zext i1 %71 to i32
  %73 = load i32, ptr %60, align 8
  %74 = lshr i32 %73, 16
  %75 = and i32 %74, 255
  %76 = zext i32 %75 to i64
  %77 = getelementptr inbounds [87 x ptr], ptr @const_tiny_rtx, i64 0, i64 %76
  %78 = load ptr, ptr %77, align 8, !tbaa !5
  %79 = icmp eq ptr %60, %78
  br i1 %79, label %80, label %85

80:                                               ; preds = %69
  br i1 %71, label %81, label %133

81:                                               ; preds = %80
  tail call void @output_asm_insn(ptr noundef nonnull @.str.260, ptr noundef nonnull %1) #30
  %82 = load i8, ptr getelementptr inbounds ([62 x i8], ptr @ix86_tune_features, i64 0, i64 41), align 1, !tbaa !16
  %83 = icmp eq i8 %82, 0
  %84 = select i1 %83, ptr @.str.437, ptr @.str.435
  br label %133

85:                                               ; preds = %69
  %86 = and i32 %73, 65535
  %87 = icmp eq i32 %86, 37
  br i1 %87, label %88, label %109

88:                                               ; preds = %85
  %89 = getelementptr i8, ptr %60, i64 8
  %90 = load i32, ptr %89, align 8, !tbaa !16
  %91 = and i32 %90, -8
  %92 = icmp eq i32 %91, 8
  %93 = select i1 %92, i1 %71, i1 false
  br i1 %93, label %94, label %109

94:                                               ; preds = %88
  %95 = tail call ptr @find_regno_note(ptr noundef %0, i32 noundef 1, i32 noundef %90) #30
  %96 = icmp eq ptr %95, null
  br i1 %96, label %109, label %97

97:                                               ; preds = %94
  %98 = load i32, ptr %89, align 8, !tbaa !16
  %99 = icmp eq i32 %98, 8
  br i1 %99, label %109, label %100

100:                                              ; preds = %97
  %101 = icmp eq i32 %3, 0
  br i1 %58, label %107, label %102

102:                                              ; preds = %100
  %103 = select i1 %101, ptr @.str.262, ptr @.str.261
  tail call void @output_asm_insn(ptr noundef nonnull %103, ptr noundef nonnull %1) #30
  %104 = load i8, ptr getelementptr inbounds ([62 x i8], ptr @ix86_tune_features, i64 0, i64 41), align 1, !tbaa !16
  %105 = icmp eq i8 %104, 0
  %106 = select i1 %105, ptr @.str.282, ptr @.str.436
  br label %133

107:                                              ; preds = %100
  %108 = select i1 %101, ptr @.str.264, ptr @.str.263
  br label %133

109:                                              ; preds = %97, %94, %88, %85
  %110 = shl i32 %2, 3
  %111 = load i32, ptr %60, align 8
  %112 = lshr i32 %111, 16
  %113 = and i32 %112, 255
  %114 = zext i32 %113 to i64
  %115 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %114
  %116 = load i8, ptr %115, align 1, !tbaa !16
  %117 = icmp eq i8 %116, 2
  %118 = select i1 %117, i32 4, i32 0
  %119 = or i32 %118, %110
  %120 = shl i32 %3, 1
  %121 = or i32 %120, %72
  %122 = or i32 %121, %119
  %123 = icmp slt i32 %122, 16
  br i1 %123, label %125, label %124

124:                                              ; preds = %109
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 12852, ptr noundef nonnull @.str.131) #30
  br label %125

125:                                              ; preds = %109, %124
  %126 = sext i32 %122 to i64
  %127 = getelementptr inbounds [16 x ptr], ptr @output_fp_compare.alt, i64 0, i64 %126
  %128 = load ptr, ptr %127, align 8, !tbaa !5
  %129 = lshr i64 61632, %126
  %130 = and i64 %129, 1
  %131 = icmp eq i64 %130, 0
  br i1 %131, label %133, label %132

132:                                              ; preds = %125
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 12854, ptr noundef nonnull @.str.131) #30
  br label %133

133:                                              ; preds = %132, %125, %107, %80, %102, %81, %53, %51, %48, %46
  %134 = phi ptr [ %47, %46 ], [ %49, %48 ], [ %52, %51 ], [ %54, %53 ], [ %84, %81 ], [ %106, %102 ], [ @.str.260, %80 ], [ %108, %107 ], [ %128, %125 ], [ %128, %132 ]
  ret ptr %134
}

; Function Attrs: nofree nounwind sspstrong uwtable
define dso_local void @ix86_output_addr_vec_elt(ptr nocapture noundef %0, i32 noundef %1) local_unnamed_addr #21 {
  %3 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %0, ptr noundef nonnull @.str.274, ptr noundef nonnull @.str.273, i32 noundef %1)
  ret void
}

; Function Attrs: nofree nounwind sspstrong uwtable
define dso_local void @ix86_output_addr_diff_elt(ptr nocapture noundef %0, i32 noundef %1, i32 noundef %2) local_unnamed_addr #21 {
  %4 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %0, ptr noundef nonnull @.str.275, i32 noundef %1)
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define dso_local void @ix86_expand_clear(ptr noundef %0) local_unnamed_addr #9 {
  %2 = load i32, ptr @reload_completed, align 4, !tbaa !20
  %3 = icmp eq i32 %2, 0
  br i1 %3, label %4, label %5

4:                                                ; preds = %1
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 12914, ptr noundef nonnull @.str.131) #30
  br label %5

5:                                                ; preds = %1, %4
  %6 = load i32, ptr %0, align 8
  %7 = lshr i32 %6, 16
  %8 = and i32 %7, 255
  %9 = zext i32 %8 to i64
  %10 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %9
  %11 = load i8, ptr %10, align 1, !tbaa !16
  %12 = icmp ult i8 %11, 4
  br i1 %12, label %13, label %17

13:                                               ; preds = %5
  %14 = getelementptr i8, ptr %0, i64 8
  %15 = load i32, ptr %14, align 8, !tbaa !16
  %16 = tail call ptr @gen_rtx_REG(i32 noundef 16, i32 noundef %15) #30
  br label %17

17:                                               ; preds = %13, %5
  %18 = phi ptr [ %16, %13 ], [ %0, %5 ]
  %19 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 64), align 16, !tbaa !5
  %20 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 23, i32 noundef 0, ptr noundef %18, ptr noundef %19) #30
  %21 = load i8, ptr getelementptr inbounds ([62 x i8], ptr @ix86_tune_features, i64 0, i64 13), align 1, !tbaa !16
  %22 = icmp eq i8 %21, 0
  br i1 %22, label %26, label %23

23:                                               ; preds = %17
  %24 = tail call zeroext i8 @optimize_insn_for_speed_p() #30
  %25 = icmp eq i8 %24, 0
  br i1 %25, label %31, label %26

26:                                               ; preds = %23, %17
  %27 = tail call ptr @gen_rtx_REG(i32 noundef 2, i32 noundef 17) #30
  %28 = tail call ptr @gen_rtx_fmt_e_stat(i32 noundef 25, i32 noundef 0, ptr noundef %27) #30
  %29 = tail call ptr (i32, ...) @gen_rtvec(i32 noundef 2, ptr noundef %20, ptr noundef %28) #30
  %30 = tail call ptr @gen_rtx_fmt_E_stat(i32 noundef 15, i32 noundef 0, ptr noundef %29) #30
  br label %31

31:                                               ; preds = %26, %23
  %32 = phi ptr [ %30, %26 ], [ %20, %23 ]
  %33 = tail call ptr @emit_insn(ptr noundef %32) #30
  ret void
}

declare zeroext i8 @optimize_insn_for_speed_p() local_unnamed_addr #3

declare ptr @gen_rtx_fmt_E_stat(i32 noundef, i32 noundef, ptr noundef) local_unnamed_addr #3

declare ptr @gen_rtvec(i32 noundef, ...) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define dso_local ptr @maybe_get_pool_constant(ptr nocapture noundef readonly %0) local_unnamed_addr #9 {
  %2 = getelementptr inbounds %struct.rtx_def, ptr %0, i64 0, i32 1
  %3 = load ptr, ptr %2, align 8, !tbaa !16
  %4 = tail call ptr @ix86_delegitimize_address(ptr noundef %3)
  %5 = load i32, ptr %4, align 8
  %6 = and i32 %5, 67174399
  %7 = icmp eq i32 %6, 67108909
  br i1 %7, label %8, label %10

8:                                                ; preds = %1
  %9 = tail call ptr @get_pool_constant(ptr noundef nonnull %4) #30
  br label %10

10:                                               ; preds = %1, %8
  %11 = phi ptr [ %9, %8 ], [ null, %1 ]
  ret ptr %11
}

declare ptr @get_pool_constant(ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define dso_local void @ix86_expand_move(i32 noundef %0, ptr nocapture noundef readonly %1) local_unnamed_addr #9 {
  %3 = load ptr, ptr %1, align 8, !tbaa !5
  %4 = getelementptr inbounds ptr, ptr %1, i64 1
  %5 = load ptr, ptr %4, align 8, !tbaa !5
  %6 = load i32, ptr %5, align 8
  %7 = trunc i32 %6 to i16
  switch i16 %7, label %45 [
    i16 45, label %8
    i16 35, label %18
  ]

8:                                                ; preds = %2
  %9 = getelementptr inbounds %struct.rtx_def, ptr %5, i64 0, i32 1, i32 0, i32 0, i64 1
  %10 = load i32, ptr %9, align 8, !tbaa !16
  %11 = lshr i32 %10, 3
  %12 = and i32 %11, 7
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %45, label %14

14:                                               ; preds = %8
  %15 = tail call fastcc ptr @legitimize_tls_address(ptr noundef nonnull %5, i32 noundef %12, i32 noundef 1)
  %16 = tail call ptr @force_operand(ptr noundef %15, ptr noundef %3) #30
  %17 = icmp eq ptr %16, %3
  br i1 %17, label %128, label %45

18:                                               ; preds = %2
  %19 = getelementptr inbounds %struct.rtx_def, ptr %5, i64 0, i32 1
  %20 = load ptr, ptr %19, align 8, !tbaa !16
  %21 = load i32, ptr %20, align 8
  %22 = and i32 %21, 65535
  %23 = icmp eq i32 %22, 49
  br i1 %23, label %24, label %45

24:                                               ; preds = %18
  %25 = getelementptr inbounds %struct.rtx_def, ptr %20, i64 0, i32 1
  %26 = load ptr, ptr %25, align 8, !tbaa !16
  %27 = load i32, ptr %26, align 8
  %28 = and i32 %27, 65535
  %29 = icmp eq i32 %28, 45
  br i1 %29, label %30, label %45

30:                                               ; preds = %24
  %31 = getelementptr inbounds %struct.rtx_def, ptr %20, i64 0, i32 1, i32 0, i32 0, i64 1
  %32 = load ptr, ptr %31, align 8, !tbaa !16
  %33 = getelementptr inbounds %struct.rtx_def, ptr %26, i64 0, i32 1, i32 0, i32 0, i64 1
  %34 = load i32, ptr %33, align 8, !tbaa !16
  %35 = lshr i32 %34, 3
  %36 = and i32 %35, 7
  %37 = icmp eq i32 %36, 0
  br i1 %37, label %45, label %38

38:                                               ; preds = %30
  %39 = tail call fastcc ptr @legitimize_tls_address(ptr noundef nonnull %26, i32 noundef %36, i32 noundef 1)
  %40 = icmp eq ptr %39, null
  br i1 %40, label %45, label %41

41:                                               ; preds = %38
  %42 = tail call ptr @force_operand(ptr noundef nonnull %39, ptr noundef null) #30
  %43 = tail call ptr @expand_simple_binop(i32 noundef 16, i32 noundef 49, ptr noundef %42, ptr noundef %32, ptr noundef %3, i32 noundef 1, i32 noundef 0) #30
  %44 = icmp eq ptr %43, %3
  br i1 %44, label %128, label %45

45:                                               ; preds = %30, %38, %41, %2, %18, %24, %14, %8
  %46 = phi ptr [ %16, %14 ], [ %5, %8 ], [ %5, %24 ], [ %5, %18 ], [ %5, %2 ], [ %5, %41 ], [ %5, %38 ], [ %5, %30 ]
  %47 = load i32, ptr @flag_pic, align 4, !tbaa !20
  %48 = icmp ne i32 %47, 0
  %49 = icmp eq i32 %0, 16
  %50 = and i1 %49, %48
  br i1 %50, label %51, label %69

51:                                               ; preds = %45
  %52 = tail call i32 @symbolic_operand(ptr noundef %46, i32 noundef 16) #30
  %53 = icmp eq i32 %52, 0
  br i1 %53, label %69, label %54

54:                                               ; preds = %51
  %55 = load i32, ptr %3, align 8
  %56 = and i32 %55, 65535
  %57 = icmp eq i32 %56, 43
  br i1 %57, label %58, label %60

58:                                               ; preds = %54
  %59 = tail call ptr @force_reg(i32 noundef 16, ptr noundef %46) #30
  br label %124

60:                                               ; preds = %54
  %61 = load i32, ptr @reload_in_progress, align 4, !tbaa !20
  %62 = icmp ne i32 %61, 0
  %63 = load i32, ptr @reload_completed, align 4
  %64 = icmp ne i32 %63, 0
  %65 = select i1 %62, i1 true, i1 %64
  %66 = select i1 %65, ptr %3, ptr null
  %67 = tail call fastcc ptr @legitimize_pic_address(ptr noundef %46, ptr noundef %66)
  %68 = icmp eq ptr %3, %67
  br i1 %68, label %128, label %124

69:                                               ; preds = %51, %45
  %70 = load i32, ptr %3, align 8
  %71 = and i32 %70, 65535
  %72 = icmp eq i32 %71, 43
  br i1 %72, label %73, label %90

73:                                               ; preds = %69
  %74 = zext i32 %0 to i64
  %75 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %74
  %76 = load i8, ptr %75, align 1, !tbaa !16
  %77 = zext i8 %76 to i32
  %78 = add nuw nsw i32 %77, 3
  %79 = and i32 %78, 508
  %80 = icmp eq i32 %79, %77
  br i1 %80, label %81, label %84

81:                                               ; preds = %73
  %82 = tail call i32 @push_operand(ptr noundef nonnull %3, i32 noundef %0) #30
  %83 = icmp eq i32 %82, 0
  br i1 %83, label %84, label %90

84:                                               ; preds = %81, %73
  %85 = load i32, ptr %46, align 8
  %86 = and i32 %85, 65535
  %87 = icmp eq i32 %86, 43
  br i1 %87, label %88, label %90

88:                                               ; preds = %84
  %89 = tail call ptr @force_reg(i32 noundef %0, ptr noundef nonnull %46) #30
  br label %90

90:                                               ; preds = %88, %84, %81, %69
  %91 = phi ptr [ %89, %88 ], [ %46, %84 ], [ %46, %81 ], [ %46, %69 ]
  %92 = tail call i32 @push_operand(ptr noundef nonnull %3, i32 noundef %0) #30
  %93 = icmp eq i32 %92, 0
  br i1 %93, label %99, label %94

94:                                               ; preds = %90
  %95 = tail call i32 @general_no_elim_operand(ptr noundef %91, i32 noundef %0) #30
  %96 = icmp eq i32 %95, 0
  br i1 %96, label %97, label %99

97:                                               ; preds = %94
  %98 = tail call ptr @copy_to_mode_reg(i32 noundef %0, ptr noundef %91) #30
  br label %99

99:                                               ; preds = %97, %94, %90
  %100 = phi ptr [ %91, %94 ], [ %98, %97 ], [ %91, %90 ]
  %101 = load i32, ptr @reload_in_progress, align 4, !tbaa !20
  %102 = icmp ne i32 %101, 0
  %103 = load i32, ptr @reload_completed, align 4
  %104 = icmp ne i32 %103, 0
  %105 = select i1 %102, i1 true, i1 %104
  br i1 %105, label %124, label %106

106:                                              ; preds = %99
  %107 = zext i32 %0 to i64
  %108 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %107
  %109 = load i8, ptr %108, align 1, !tbaa !16
  switch i8 %109, label %124 [
    i8 8, label %110
    i8 9, label %110
    i8 11, label %110
    i8 17, label %110
  ]

110:                                              ; preds = %106, %106, %106, %106
  %111 = load i32, ptr %100, align 8
  %112 = and i32 %111, 65535
  %113 = icmp eq i32 %112, 32
  br i1 %113, label %114, label %124

114:                                              ; preds = %110
  %115 = tail call ptr @force_const_mem(i32 noundef %0, ptr noundef nonnull %100) #30
  %116 = tail call ptr @validize_mem(ptr noundef %115) #30
  %117 = tail call i32 @register_operand(ptr noundef nonnull %3, i32 noundef %0) #30
  %118 = icmp eq i32 %117, 0
  br i1 %118, label %119, label %124

119:                                              ; preds = %114
  %120 = tail call ptr @gen_reg_rtx(i32 noundef %0) #30
  %121 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 23, i32 noundef 0, ptr noundef %120, ptr noundef %116) #30
  %122 = tail call ptr @emit_insn(ptr noundef %121) #30
  %123 = tail call ptr @emit_move_insn(ptr noundef nonnull %3, ptr noundef %120) #30
  br label %128

124:                                              ; preds = %106, %99, %110, %114, %58, %60
  %125 = phi ptr [ %59, %58 ], [ %67, %60 ], [ %100, %99 ], [ %116, %114 ], [ %100, %110 ], [ %100, %106 ]
  %126 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 23, i32 noundef 0, ptr noundef nonnull %3, ptr noundef %125) #30
  %127 = tail call ptr @emit_insn(ptr noundef %126) #30
  br label %128

128:                                              ; preds = %41, %14, %60, %124, %119
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc ptr @legitimize_tls_address(ptr noundef %0, i32 noundef %1, i32 noundef %2) unnamed_addr #9 {
  switch i32 %1, label %178 [
    i32 2, label %4
    i32 3, label %26
    i32 4, label %69
    i32 5, label %143
  ]

4:                                                ; preds = %3
  %5 = tail call ptr @gen_reg_rtx(i32 noundef 16) #30
  %6 = load i32, ptr @ix86_tls_dialect, align 4, !tbaa !16
  %7 = icmp eq i32 %6, 1
  br i1 %7, label %8, label %15

8:                                                ; preds = %4
  %9 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 64), align 16, !tbaa !5
  %10 = tail call ptr (i32, ...) @gen_rtvec(i32 noundef 1, ptr noundef %9) #30
  %11 = tail call ptr @gen_rtx_fmt_Ei_stat(i32 noundef 18, i32 noundef 16, ptr noundef %10, i32 noundef 20) #30
  %12 = tail call ptr @gen_reg_rtx(i32 noundef 16) #30
  %13 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 23, i32 noundef 0, ptr noundef %12, ptr noundef %11) #30
  %14 = tail call ptr @emit_insn(ptr noundef %13) #30
  br label %15

15:                                               ; preds = %4, %8
  %16 = phi ptr [ %12, %8 ], [ null, %4 ]
  %17 = tail call ptr @gen_tls_global_dynamic_32(ptr noundef %5, ptr noundef %0) #30
  %18 = tail call ptr @emit_insn(ptr noundef %17) #30
  %19 = load i32, ptr @ix86_tls_dialect, align 4, !tbaa !16
  %20 = icmp eq i32 %19, 1
  br i1 %20, label %21, label %179

21:                                               ; preds = %15
  %22 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 49, i32 noundef 16, ptr noundef %16, ptr noundef %5) #30
  %23 = tail call ptr @force_reg(i32 noundef 16, ptr noundef %22) #30
  %24 = tail call ptr @get_last_insn() #30
  %25 = tail call ptr @set_unique_reg_note(ptr noundef %24, i32 noundef 3, ptr noundef %0) #30
  br label %179

26:                                               ; preds = %3
  %27 = tail call ptr @gen_reg_rtx(i32 noundef 16) #30
  %28 = load i32, ptr @ix86_tls_dialect, align 4, !tbaa !16
  %29 = icmp eq i32 %28, 1
  br i1 %29, label %30, label %37

30:                                               ; preds = %26
  %31 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 64), align 16, !tbaa !5
  %32 = tail call ptr (i32, ...) @gen_rtvec(i32 noundef 1, ptr noundef %31) #30
  %33 = tail call ptr @gen_rtx_fmt_Ei_stat(i32 noundef 18, i32 noundef 16, ptr noundef %32, i32 noundef 20) #30
  %34 = tail call ptr @gen_reg_rtx(i32 noundef 16) #30
  %35 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 23, i32 noundef 0, ptr noundef %34, ptr noundef %33) #30
  %36 = tail call ptr @emit_insn(ptr noundef %35) #30
  br label %37

37:                                               ; preds = %26, %30
  %38 = phi ptr [ %34, %30 ], [ null, %26 ]
  %39 = tail call ptr @gen_tls_local_dynamic_base_32(ptr noundef %27) #30
  %40 = tail call ptr @emit_insn(ptr noundef %39) #30
  %41 = load i32, ptr @ix86_tls_dialect, align 4, !tbaa !16
  %42 = icmp eq i32 %41, 1
  br i1 %42, label %43, label %56

43:                                               ; preds = %37
  %44 = load ptr, ptr @ix86_tls_module_base_symbol, align 8, !tbaa !5
  %45 = icmp eq ptr %44, null
  br i1 %45, label %46, label %51

46:                                               ; preds = %43
  %47 = tail call ptr @gen_rtx_fmt_s00_stat(i32 noundef 45, i32 noundef 16, ptr noundef nonnull @.str.278) #30
  store ptr %47, ptr @ix86_tls_module_base_symbol, align 8, !tbaa !5
  %48 = getelementptr inbounds %struct.rtx_def, ptr %47, i64 0, i32 1, i32 0, i32 0, i64 1
  %49 = load i32, ptr %48, align 8, !tbaa !16
  %50 = or i32 %49, 16
  store i32 %50, ptr %48, align 8, !tbaa !16
  br label %51

51:                                               ; preds = %43, %46
  %52 = phi ptr [ %47, %46 ], [ %44, %43 ]
  %53 = tail call ptr @get_last_insn() #30
  %54 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 50, i32 noundef 16, ptr noundef nonnull %52, ptr noundef %38) #30
  %55 = tail call ptr @set_unique_reg_note(ptr noundef %53, i32 noundef 3, ptr noundef %54) #30
  br label %56

56:                                               ; preds = %51, %37
  %57 = tail call ptr (i32, ...) @gen_rtvec(i32 noundef 1, ptr noundef %0) #30
  %58 = tail call ptr @gen_rtx_fmt_Ei_stat(i32 noundef 18, i32 noundef 16, ptr noundef %57, i32 noundef 6) #30
  %59 = tail call ptr @gen_rtx_fmt_e_stat(i32 noundef 35, i32 noundef 16, ptr noundef %58) #30
  %60 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 49, i32 noundef 16, ptr noundef %27, ptr noundef %59) #30
  %61 = tail call ptr @force_reg(i32 noundef 16, ptr noundef %60) #30
  %62 = load i32, ptr @ix86_tls_dialect, align 4, !tbaa !16
  %63 = icmp eq i32 %62, 1
  br i1 %63, label %64, label %179

64:                                               ; preds = %56
  %65 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 49, i32 noundef 16, ptr noundef %61, ptr noundef %38) #30
  %66 = tail call ptr @force_reg(i32 noundef 16, ptr noundef %65) #30
  %67 = tail call ptr @get_last_insn() #30
  %68 = tail call ptr @set_unique_reg_note(ptr noundef %67, i32 noundef 3, ptr noundef %0) #30
  br label %179

69:                                               ; preds = %3
  %70 = load i32, ptr @flag_pic, align 4, !tbaa !20
  %71 = icmp eq i32 %70, 0
  br i1 %71, label %89, label %72

72:                                               ; preds = %69
  %73 = load i32, ptr @reload_in_progress, align 4, !tbaa !20
  %74 = icmp eq i32 %73, 0
  br i1 %74, label %84, label %75

75:                                               ; preds = %72
  %76 = load i32, ptr @reload_completed, align 4, !tbaa !20
  %77 = icmp eq i32 %76, 0
  br i1 %77, label %82, label %78

78:                                               ; preds = %75
  %79 = load ptr, ptr @pic_offset_table_rtx, align 8, !tbaa !5
  %80 = getelementptr i8, ptr %79, i64 8
  %81 = load i32, ptr %80, align 8, !tbaa !16
  br label %82

82:                                               ; preds = %78, %75
  %83 = phi i32 [ %81, %78 ], [ 3, %75 ]
  tail call void @df_set_regs_ever_live(i32 noundef %83, i8 noundef zeroext 1) #30
  br label %84

84:                                               ; preds = %82, %72
  %85 = load ptr, ptr @pic_offset_table_rtx, align 8, !tbaa !5
  %86 = load i32, ptr @ix86_tls_dialect, align 4
  %87 = icmp ult i32 %86, 2
  %88 = select i1 %87, i32 7, i32 3
  br label %96

89:                                               ; preds = %69
  %90 = load i32, ptr @ix86_tls_dialect, align 4
  %91 = icmp ult i32 %90, 2
  br i1 %91, label %96, label %92

92:                                               ; preds = %89
  %93 = tail call ptr @gen_reg_rtx(i32 noundef 16) #30
  %94 = tail call ptr @gen_set_got(ptr noundef %93) #30
  %95 = tail call ptr @emit_insn(ptr noundef %94) #30
  br label %96

96:                                               ; preds = %89, %92, %84
  %97 = phi ptr [ %85, %84 ], [ %93, %92 ], [ null, %89 ]
  %98 = phi i32 [ %88, %84 ], [ 3, %92 ], [ 8, %89 ]
  %99 = tail call ptr (i32, ...) @gen_rtvec(i32 noundef 1, ptr noundef %0) #30
  %100 = tail call ptr @gen_rtx_fmt_Ei_stat(i32 noundef 18, i32 noundef 16, ptr noundef %99, i32 noundef %98) #30
  %101 = tail call ptr @gen_rtx_fmt_e_stat(i32 noundef 35, i32 noundef 16, ptr noundef %100) #30
  %102 = icmp eq ptr %97, null
  br i1 %102, label %105, label %103

103:                                              ; preds = %96
  %104 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 49, i32 noundef 16, ptr noundef nonnull %97, ptr noundef %101) #30
  br label %105

105:                                              ; preds = %103, %96
  %106 = phi ptr [ %104, %103 ], [ %101, %96 ]
  %107 = tail call ptr @gen_const_mem(i32 noundef 16, ptr noundef %106) #30
  %108 = load i32, ptr @ix86_GOT_alias_set.set, align 4, !tbaa !20
  %109 = icmp eq i32 %108, -1
  br i1 %109, label %110, label %112

110:                                              ; preds = %105
  %111 = tail call i32 @new_alias_set() #30
  store i32 %111, ptr @ix86_GOT_alias_set.set, align 4, !tbaa !20
  br label %112

112:                                              ; preds = %105, %110
  %113 = phi i32 [ %111, %110 ], [ %108, %105 ]
  tail call void @set_mem_alias_set(ptr noundef %107, i32 noundef %113) #30
  %114 = load i32, ptr @ix86_tls_dialect, align 4
  %115 = icmp ult i32 %114, 2
  br i1 %115, label %116, label %133

116:                                              ; preds = %112
  %117 = icmp eq i32 %2, 0
  %118 = load i32, ptr @target_flags, align 4
  %119 = and i32 %118, 1048576
  %120 = icmp ne i32 %119, 0
  %121 = select i1 %117, i1 %120, i1 false
  %122 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 64), align 16, !tbaa !5
  %123 = tail call ptr (i32, ...) @gen_rtvec(i32 noundef 1, ptr noundef %122) #30
  %124 = tail call ptr @gen_rtx_fmt_Ei_stat(i32 noundef 18, i32 noundef 16, ptr noundef %123, i32 noundef 20) #30
  br i1 %121, label %129, label %125

125:                                              ; preds = %116
  %126 = tail call ptr @gen_reg_rtx(i32 noundef 16) #30
  %127 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 23, i32 noundef 0, ptr noundef %126, ptr noundef %124) #30
  %128 = tail call ptr @emit_insn(ptr noundef %127) #30
  br label %129

129:                                              ; preds = %116, %125
  %130 = phi ptr [ %126, %125 ], [ %124, %116 ]
  %131 = tail call ptr @force_reg(i32 noundef 16, ptr noundef %107) #30
  %132 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 49, i32 noundef 16, ptr noundef %130, ptr noundef %131) #30
  br label %179

133:                                              ; preds = %112
  %134 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 64), align 16, !tbaa !5
  %135 = tail call ptr (i32, ...) @gen_rtvec(i32 noundef 1, ptr noundef %134) #30
  %136 = tail call ptr @gen_rtx_fmt_Ei_stat(i32 noundef 18, i32 noundef 16, ptr noundef %135, i32 noundef 20) #30
  %137 = tail call ptr @gen_reg_rtx(i32 noundef 16) #30
  %138 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 23, i32 noundef 0, ptr noundef %137, ptr noundef %136) #30
  %139 = tail call ptr @emit_insn(ptr noundef %138) #30
  %140 = tail call ptr @gen_reg_rtx(i32 noundef 16) #30
  %141 = tail call ptr @gen_subsi3(ptr noundef %140, ptr noundef %137, ptr noundef %107) #30
  %142 = tail call ptr @emit_insn(ptr noundef %141) #30
  br label %179

143:                                              ; preds = %3
  %144 = tail call ptr (i32, ...) @gen_rtvec(i32 noundef 1, ptr noundef %0) #30
  %145 = load i32, ptr @ix86_tls_dialect, align 4
  %146 = icmp ult i32 %145, 2
  %147 = select i1 %146, i32 5, i32 4
  %148 = tail call ptr @gen_rtx_fmt_Ei_stat(i32 noundef 18, i32 noundef 16, ptr noundef %144, i32 noundef %147) #30
  %149 = tail call ptr @gen_rtx_fmt_e_stat(i32 noundef 35, i32 noundef 16, ptr noundef %148) #30
  %150 = load i32, ptr @ix86_tls_dialect, align 4
  %151 = icmp ult i32 %150, 2
  br i1 %151, label %152, label %168

152:                                              ; preds = %143
  %153 = icmp eq i32 %2, 0
  %154 = load i32, ptr @target_flags, align 4
  %155 = and i32 %154, 1048576
  %156 = icmp ne i32 %155, 0
  %157 = select i1 %153, i1 %156, i1 false
  %158 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 64), align 16, !tbaa !5
  %159 = tail call ptr (i32, ...) @gen_rtvec(i32 noundef 1, ptr noundef %158) #30
  %160 = tail call ptr @gen_rtx_fmt_Ei_stat(i32 noundef 18, i32 noundef 16, ptr noundef %159, i32 noundef 20) #30
  br i1 %157, label %165, label %161

161:                                              ; preds = %152
  %162 = tail call ptr @gen_reg_rtx(i32 noundef 16) #30
  %163 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 23, i32 noundef 0, ptr noundef %162, ptr noundef %160) #30
  %164 = tail call ptr @emit_insn(ptr noundef %163) #30
  br label %165

165:                                              ; preds = %152, %161
  %166 = phi ptr [ %162, %161 ], [ %160, %152 ]
  %167 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 49, i32 noundef 16, ptr noundef %166, ptr noundef %149) #30
  br label %179

168:                                              ; preds = %143
  %169 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 64), align 16, !tbaa !5
  %170 = tail call ptr (i32, ...) @gen_rtvec(i32 noundef 1, ptr noundef %169) #30
  %171 = tail call ptr @gen_rtx_fmt_Ei_stat(i32 noundef 18, i32 noundef 16, ptr noundef %170, i32 noundef 20) #30
  %172 = tail call ptr @gen_reg_rtx(i32 noundef 16) #30
  %173 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 23, i32 noundef 0, ptr noundef %172, ptr noundef %171) #30
  %174 = tail call ptr @emit_insn(ptr noundef %173) #30
  %175 = tail call ptr @gen_reg_rtx(i32 noundef 16) #30
  %176 = tail call ptr @gen_subsi3(ptr noundef %175, ptr noundef %172, ptr noundef %149) #30
  %177 = tail call ptr @emit_insn(ptr noundef %176) #30
  br label %179

178:                                              ; preds = %3
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 10461, ptr noundef nonnull @.str.131) #30
  br label %179

179:                                              ; preds = %133, %168, %178, %21, %15, %64, %56, %165, %129
  %180 = phi ptr [ %167, %165 ], [ %132, %129 ], [ undef, %178 ], [ %175, %168 ], [ %140, %133 ], [ %66, %64 ], [ %61, %56 ], [ %23, %21 ], [ %5, %15 ]
  ret ptr %180
}

declare ptr @force_operand(ptr noundef, ptr noundef) local_unnamed_addr #3

declare ptr @expand_simple_binop(i32 noundef, i32 noundef, ptr noundef, ptr noundef, ptr noundef, i32 noundef, i32 noundef) local_unnamed_addr #3

declare i32 @symbolic_operand(ptr noundef, i32 noundef) local_unnamed_addr #3

declare ptr @force_reg(i32 noundef, ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc ptr @legitimize_pic_address(ptr noundef %0, ptr noundef %1) unnamed_addr #9 {
  %3 = tail call i32 @gotoff_operand(ptr noundef %0, i32 noundef 16) #30
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %52, label %5

5:                                                ; preds = %2
  %6 = load i32, ptr @reload_in_progress, align 4, !tbaa !20
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %20, label %8

8:                                                ; preds = %5
  %9 = load i32, ptr @flag_pic, align 4, !tbaa !20
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %18, label %11

11:                                               ; preds = %8
  %12 = load i32, ptr @reload_completed, align 4, !tbaa !20
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %18, label %14

14:                                               ; preds = %11
  %15 = load ptr, ptr @pic_offset_table_rtx, align 8, !tbaa !5
  %16 = getelementptr i8, ptr %15, i64 8
  %17 = load i32, ptr %16, align 8, !tbaa !16
  br label %18

18:                                               ; preds = %14, %11, %8
  %19 = phi i32 [ -1, %8 ], [ %17, %14 ], [ 3, %11 ]
  tail call void @df_set_regs_ever_live(i32 noundef %19, i8 noundef zeroext 1) #30
  br label %20

20:                                               ; preds = %18, %5
  %21 = load i32, ptr %0, align 8
  %22 = and i32 %21, 65535
  %23 = icmp eq i32 %22, 35
  br i1 %23, label %24, label %28

24:                                               ; preds = %20
  %25 = getelementptr inbounds %struct.rtx_def, ptr %0, i64 0, i32 1
  %26 = load ptr, ptr %25, align 8, !tbaa !16
  %27 = load i32, ptr %26, align 8
  br label %28

28:                                               ; preds = %24, %20
  %29 = phi i32 [ %27, %24 ], [ %21, %20 ]
  %30 = phi ptr [ %26, %24 ], [ %0, %20 ]
  %31 = and i32 %29, 65535
  %32 = icmp eq i32 %31, 49
  br i1 %32, label %33, label %41

33:                                               ; preds = %28
  %34 = getelementptr inbounds %struct.rtx_def, ptr %30, i64 0, i32 1
  %35 = load ptr, ptr %34, align 8, !tbaa !16
  %36 = tail call ptr (i32, ...) @gen_rtvec(i32 noundef 1, ptr noundef %35) #30
  %37 = tail call ptr @gen_rtx_fmt_Ei_stat(i32 noundef 18, i32 noundef 16, ptr noundef %36, i32 noundef 1) #30
  %38 = getelementptr inbounds %struct.rtx_def, ptr %30, i64 0, i32 1, i32 0, i32 0, i64 1
  %39 = load ptr, ptr %38, align 8, !tbaa !16
  %40 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 49, i32 noundef 16, ptr noundef %37, ptr noundef %39) #30
  br label %44

41:                                               ; preds = %28
  %42 = tail call ptr (i32, ...) @gen_rtvec(i32 noundef 1, ptr noundef nonnull %30) #30
  %43 = tail call ptr @gen_rtx_fmt_Ei_stat(i32 noundef 18, i32 noundef 16, ptr noundef %42, i32 noundef 1) #30
  br label %44

44:                                               ; preds = %41, %33
  %45 = phi ptr [ %40, %33 ], [ %43, %41 ]
  %46 = tail call ptr @gen_rtx_fmt_e_stat(i32 noundef 35, i32 noundef 16, ptr noundef %45) #30
  %47 = load ptr, ptr @pic_offset_table_rtx, align 8, !tbaa !5
  %48 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 49, i32 noundef 16, ptr noundef %47, ptr noundef %46) #30
  %49 = icmp eq ptr %1, null
  br i1 %49, label %194, label %50

50:                                               ; preds = %44
  %51 = tail call ptr @emit_move_insn(ptr noundef nonnull %1, ptr noundef %48) #30
  br label %194

52:                                               ; preds = %2
  %53 = load i32, ptr %0, align 8
  %54 = trunc i32 %53 to i16
  switch i16 %54, label %105 [
    i16 45, label %55
    i16 30, label %94
  ]

55:                                               ; preds = %52
  %56 = getelementptr inbounds %struct.rtx_def, ptr %0, i64 0, i32 1, i32 0, i32 0, i64 1
  %57 = load i32, ptr %56, align 8, !tbaa !16
  %58 = and i32 %57, 56
  %59 = icmp eq i32 %58, 0
  br i1 %59, label %60, label %105

60:                                               ; preds = %55
  %61 = load i32, ptr @reload_in_progress, align 4, !tbaa !20
  %62 = icmp eq i32 %61, 0
  br i1 %62, label %75, label %63

63:                                               ; preds = %60
  %64 = load i32, ptr @flag_pic, align 4, !tbaa !20
  %65 = icmp eq i32 %64, 0
  br i1 %65, label %73, label %66

66:                                               ; preds = %63
  %67 = load i32, ptr @reload_completed, align 4, !tbaa !20
  %68 = icmp eq i32 %67, 0
  br i1 %68, label %73, label %69

69:                                               ; preds = %66
  %70 = load ptr, ptr @pic_offset_table_rtx, align 8, !tbaa !5
  %71 = getelementptr i8, ptr %70, i64 8
  %72 = load i32, ptr %71, align 8, !tbaa !16
  br label %73

73:                                               ; preds = %69, %66, %63
  %74 = phi i32 [ -1, %63 ], [ %72, %69 ], [ 3, %66 ]
  tail call void @df_set_regs_ever_live(i32 noundef %74, i8 noundef zeroext 1) #30
  br label %75

75:                                               ; preds = %73, %60
  %76 = tail call ptr (i32, ...) @gen_rtvec(i32 noundef 1, ptr noundef nonnull %0) #30
  %77 = tail call ptr @gen_rtx_fmt_Ei_stat(i32 noundef 18, i32 noundef 16, ptr noundef %76, i32 noundef 0) #30
  %78 = tail call ptr @gen_rtx_fmt_e_stat(i32 noundef 35, i32 noundef 16, ptr noundef %77) #30
  %79 = load ptr, ptr @pic_offset_table_rtx, align 8, !tbaa !5
  %80 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 49, i32 noundef 16, ptr noundef %79, ptr noundef %78) #30
  %81 = tail call ptr @gen_const_mem(i32 noundef 16, ptr noundef %80) #30
  %82 = load i32, ptr @ix86_GOT_alias_set.set, align 4, !tbaa !20
  %83 = icmp eq i32 %82, -1
  br i1 %83, label %84, label %86

84:                                               ; preds = %75
  %85 = tail call i32 @new_alias_set() #30
  store i32 %85, ptr @ix86_GOT_alias_set.set, align 4, !tbaa !20
  br label %86

86:                                               ; preds = %75, %84
  %87 = phi i32 [ %85, %84 ], [ %82, %75 ]
  tail call void @set_mem_alias_set(ptr noundef %81, i32 noundef %87) #30
  %88 = icmp eq ptr %1, null
  br i1 %88, label %89, label %91

89:                                               ; preds = %86
  %90 = tail call ptr @gen_reg_rtx(i32 noundef 16) #30
  br label %91

91:                                               ; preds = %89, %86
  %92 = phi ptr [ %90, %89 ], [ %1, %86 ]
  %93 = tail call ptr @emit_move_insn(ptr noundef %92, ptr noundef %81) #30
  br label %194

94:                                               ; preds = %52
  %95 = tail call i32 @x86_64_immediate_operand(ptr noundef nonnull %0, i32 noundef 0) #30
  %96 = icmp eq i32 %95, 0
  br i1 %96, label %99, label %97

97:                                               ; preds = %94
  %98 = load i32, ptr %0, align 8
  br label %105

99:                                               ; preds = %94
  %100 = icmp eq ptr %1, null
  br i1 %100, label %103, label %101

101:                                              ; preds = %99
  %102 = tail call ptr @emit_move_insn(ptr noundef nonnull %1, ptr noundef nonnull %0) #30
  br label %121

103:                                              ; preds = %99
  %104 = tail call ptr @force_reg(i32 noundef 16, ptr noundef nonnull %0) #30
  br label %121

105:                                              ; preds = %97, %52, %55
  %106 = phi i32 [ %98, %97 ], [ %53, %52 ], [ %53, %55 ]
  %107 = and i32 %106, 65535
  %108 = icmp eq i32 %107, 35
  br i1 %108, label %109, label %121

109:                                              ; preds = %105
  %110 = getelementptr inbounds %struct.rtx_def, ptr %0, i64 0, i32 1
  %111 = load ptr, ptr %110, align 8, !tbaa !16
  %112 = load i32, ptr %111, align 8
  %113 = trunc i32 %112 to i16
  switch i16 %113, label %120 [
    i16 18, label %194
    i16 49, label %114
  ]

114:                                              ; preds = %109
  %115 = getelementptr inbounds %struct.rtx_def, ptr %111, i64 0, i32 1
  %116 = load ptr, ptr %115, align 8, !tbaa !16
  %117 = load i32, ptr %116, align 8
  %118 = and i32 %117, 65535
  %119 = icmp eq i32 %118, 18
  br i1 %119, label %194, label %121

120:                                              ; preds = %109
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 10230, ptr noundef nonnull @.str.131) #30
  br label %121

121:                                              ; preds = %114, %120, %105, %101, %103
  %122 = phi ptr [ %111, %120 ], [ %0, %105 ], [ %0, %101 ], [ %0, %103 ], [ %111, %114 ]
  %123 = phi ptr [ %0, %120 ], [ %0, %105 ], [ %1, %101 ], [ %104, %103 ], [ %0, %114 ]
  %124 = load i32, ptr %122, align 8
  %125 = and i32 %124, 65535
  %126 = icmp eq i32 %125, 49
  br i1 %126, label %127, label %194

127:                                              ; preds = %121
  %128 = getelementptr inbounds %struct.rtx_def, ptr %122, i64 0, i32 1
  %129 = load ptr, ptr %128, align 8, !tbaa !16
  %130 = getelementptr inbounds %struct.rtx_def, ptr %122, i64 0, i32 1, i32 0, i32 0, i64 1
  %131 = load ptr, ptr %130, align 8, !tbaa !16
  %132 = tail call i32 @gotoff_operand(ptr noundef %129, i32 noundef 16) #30
  %133 = icmp eq i32 %132, 0
  br i1 %133, label %163, label %134

134:                                              ; preds = %127
  %135 = load i32, ptr %131, align 8
  %136 = and i32 %135, 65535
  %137 = icmp eq i32 %136, 30
  br i1 %137, label %138, label %163

138:                                              ; preds = %134
  %139 = load i32, ptr @reload_in_progress, align 4, !tbaa !20
  %140 = icmp eq i32 %139, 0
  br i1 %140, label %153, label %141

141:                                              ; preds = %138
  %142 = load i32, ptr @flag_pic, align 4, !tbaa !20
  %143 = icmp eq i32 %142, 0
  br i1 %143, label %151, label %144

144:                                              ; preds = %141
  %145 = load i32, ptr @reload_completed, align 4, !tbaa !20
  %146 = icmp eq i32 %145, 0
  br i1 %146, label %151, label %147

147:                                              ; preds = %144
  %148 = load ptr, ptr @pic_offset_table_rtx, align 8, !tbaa !5
  %149 = getelementptr i8, ptr %148, i64 8
  %150 = load i32, ptr %149, align 8, !tbaa !16
  br label %151

151:                                              ; preds = %147, %144, %141
  %152 = phi i32 [ -1, %141 ], [ %150, %147 ], [ 3, %144 ]
  tail call void @df_set_regs_ever_live(i32 noundef %152, i8 noundef zeroext 1) #30
  br label %153

153:                                              ; preds = %151, %138
  %154 = tail call ptr (i32, ...) @gen_rtvec(i32 noundef 1, ptr noundef %129) #30
  %155 = tail call ptr @gen_rtx_fmt_Ei_stat(i32 noundef 18, i32 noundef 16, ptr noundef %154, i32 noundef 1) #30
  %156 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 49, i32 noundef 16, ptr noundef %155, ptr noundef nonnull %131) #30
  %157 = tail call ptr @gen_rtx_fmt_e_stat(i32 noundef 35, i32 noundef 16, ptr noundef %156) #30
  %158 = load ptr, ptr @pic_offset_table_rtx, align 8, !tbaa !5
  %159 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 49, i32 noundef 16, ptr noundef %158, ptr noundef %157) #30
  %160 = icmp eq ptr %1, null
  br i1 %160, label %194, label %161

161:                                              ; preds = %153
  %162 = tail call ptr @emit_move_insn(ptr noundef nonnull %1, ptr noundef %159) #30
  br label %194

163:                                              ; preds = %134, %127
  %164 = load ptr, ptr %128, align 8, !tbaa !16
  %165 = tail call fastcc ptr @legitimize_pic_address(ptr noundef %164, ptr noundef %1)
  %166 = load ptr, ptr %130, align 8, !tbaa !16
  %167 = icmp eq ptr %165, %1
  %168 = select i1 %167, ptr null, ptr %1
  %169 = tail call fastcc ptr @legitimize_pic_address(ptr noundef %166, ptr noundef %168)
  %170 = load i32, ptr %169, align 8
  %171 = trunc i32 %170 to i16
  switch i16 %171, label %190 [
    i16 30, label %172
    i16 49, label %176
  ]

172:                                              ; preds = %163
  %173 = getelementptr inbounds %struct.rtx_def, ptr %169, i64 0, i32 1
  %174 = load i64, ptr %173, align 8, !tbaa !16
  %175 = tail call ptr @plus_constant(ptr noundef %165, i64 noundef %174) #30
  br label %194

176:                                              ; preds = %163
  %177 = getelementptr inbounds %struct.rtx_def, ptr %169, i64 0, i32 1, i32 0, i32 0, i64 1
  %178 = load ptr, ptr %177, align 8, !tbaa !16
  %179 = load i32, ptr %178, align 8
  %180 = and i32 %179, 65535
  %181 = zext i32 %180 to i64
  %182 = getelementptr inbounds [139 x i32], ptr @rtx_class, i64 0, i64 %181
  %183 = load i32, ptr %182, align 4, !tbaa !16
  %184 = icmp eq i32 %183, 9
  br i1 %184, label %185, label %190

185:                                              ; preds = %176
  %186 = getelementptr inbounds %struct.rtx_def, ptr %169, i64 0, i32 1
  %187 = load ptr, ptr %186, align 8, !tbaa !16
  %188 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 49, i32 noundef 16, ptr noundef %165, ptr noundef %187) #30
  %189 = load ptr, ptr %177, align 8, !tbaa !16
  br label %190

190:                                              ; preds = %163, %185, %176
  %191 = phi ptr [ %189, %185 ], [ %169, %176 ], [ %169, %163 ]
  %192 = phi ptr [ %188, %185 ], [ %165, %176 ], [ %165, %163 ]
  %193 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 49, i32 noundef 16, ptr noundef %192, ptr noundef %191) #30
  br label %194

194:                                              ; preds = %50, %44, %121, %91, %172, %190, %153, %161, %114, %109
  %195 = phi ptr [ %0, %109 ], [ %0, %114 ], [ %1, %50 ], [ %48, %44 ], [ %92, %91 ], [ %123, %121 ], [ %1, %161 ], [ %159, %153 ], [ %175, %172 ], [ %193, %190 ]
  ret ptr %195
}

declare i32 @push_operand(ptr noundef, i32 noundef) local_unnamed_addr #3

declare i32 @general_no_elim_operand(ptr noundef, i32 noundef) local_unnamed_addr #3

declare ptr @copy_to_mode_reg(i32 noundef, ptr noundef) local_unnamed_addr #3

declare i32 @immediate_operand(ptr noundef, i32 noundef) local_unnamed_addr #3

declare i32 @register_operand(ptr noundef, i32 noundef) local_unnamed_addr #3

declare ptr @validize_mem(ptr noundef) local_unnamed_addr #3

declare ptr @force_const_mem(i32 noundef, ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define dso_local void @ix86_expand_vector_move(i32 noundef %0, ptr nocapture noundef readonly %1) local_unnamed_addr #9 {
  %3 = alloca [2 x ptr], align 16
  %4 = load ptr, ptr %1, align 8, !tbaa !5
  %5 = getelementptr inbounds ptr, ptr %1, i64 1
  %6 = load ptr, ptr %5, align 8, !tbaa !5
  %7 = tail call i32 @get_mode_alignment(i32 noundef %0) #30
  %8 = load i32, ptr @reload_in_progress, align 4, !tbaa !20
  %9 = icmp ne i32 %8, 0
  %10 = load i32, ptr @reload_completed, align 4
  %11 = icmp ne i32 %10, 0
  %12 = select i1 %9, i1 true, i1 %11
  br i1 %12, label %58, label %13

13:                                               ; preds = %2
  %14 = tail call i32 @register_operand(ptr noundef %4, i32 noundef %0) #30
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %58, label %16

16:                                               ; preds = %13
  %17 = load i32, ptr %6, align 8
  %18 = and i32 %17, 65535
  %19 = zext i32 %18 to i64
  %20 = getelementptr inbounds [139 x i32], ptr @rtx_class, i64 0, i64 %19
  %21 = load i32, ptr %20, align 4, !tbaa !16
  %22 = icmp eq i32 %21, 9
  br i1 %22, label %34, label %23

23:                                               ; preds = %16
  %24 = icmp eq i32 %18, 39
  br i1 %24, label %25, label %58

25:                                               ; preds = %23
  %26 = getelementptr inbounds %struct.rtx_def, ptr %6, i64 0, i32 1
  %27 = load ptr, ptr %26, align 8, !tbaa !16
  %28 = load i32, ptr %27, align 8
  %29 = and i32 %28, 65535
  %30 = zext i32 %29 to i64
  %31 = getelementptr inbounds [139 x i32], ptr @rtx_class, i64 0, i64 %30
  %32 = load i32, ptr %31, align 4, !tbaa !16
  %33 = icmp eq i32 %32, 9
  br i1 %33, label %34, label %58

34:                                               ; preds = %25, %16
  %35 = lshr i32 %17, 16
  %36 = and i32 %35, 255
  %37 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 64), align 16, !tbaa !5
  %38 = icmp eq ptr %37, %6
  br i1 %38, label %58, label %39

39:                                               ; preds = %34
  %40 = zext i32 %36 to i64
  %41 = getelementptr inbounds [87 x ptr], ptr @const_tiny_rtx, i64 0, i64 %40
  %42 = load ptr, ptr %41, align 8, !tbaa !5
  %43 = icmp eq ptr %42, %6
  br i1 %43, label %58, label %44

44:                                               ; preds = %39
  %45 = tail call i32 @vector_all_ones_operand(ptr noundef nonnull %6, i32 noundef %36) #30
  %46 = icmp ne i32 %45, 0
  %47 = trunc i32 %35 to i8
  %48 = add i8 %47, -63
  %49 = icmp ult i8 %48, 4
  %50 = and i1 %49, %46
  br i1 %50, label %51, label %55

51:                                               ; preds = %44
  %52 = load i32, ptr @ix86_isa_flags, align 4, !tbaa !20
  %53 = and i32 %52, 131072
  %54 = icmp eq i32 %53, 0
  br i1 %54, label %55, label %58

55:                                               ; preds = %51, %44
  %56 = tail call ptr @force_const_mem(i32 noundef %0, ptr noundef nonnull %6) #30
  %57 = tail call ptr @validize_mem(ptr noundef %56) #30
  br label %58

58:                                               ; preds = %51, %34, %39, %55, %25, %23, %13, %2
  %59 = phi ptr [ %6, %2 ], [ %57, %55 ], [ %6, %25 ], [ %6, %23 ], [ %6, %13 ], [ %6, %39 ], [ %6, %34 ], [ %6, %51 ]
  %60 = load i32, ptr @reload_in_progress, align 4, !tbaa !20
  %61 = icmp ne i32 %60, 0
  %62 = load i32, ptr @reload_completed, align 4
  %63 = icmp ne i32 %62, 0
  %64 = select i1 %61, i1 true, i1 %63
  br i1 %64, label %144, label %65

65:                                               ; preds = %58
  switch i32 %0, label %132 [
    i32 82, label %66
    i32 81, label %66
    i32 80, label %66
    i32 79, label %66
    i32 71, label %66
    i32 70, label %66
    i32 69, label %66
    i32 68, label %66
    i32 67, label %66
    i32 66, label %66
    i32 65, label %66
    i32 64, label %66
    i32 63, label %66
    i32 41, label %66
    i32 18, label %66
  ]

66:                                               ; preds = %65, %65, %65, %65, %65, %65, %65, %65, %65, %65, %65, %65, %65, %65, %65
  %67 = load i32, ptr %4, align 8
  %68 = and i32 %67, 65535
  %69 = icmp eq i32 %68, 43
  br i1 %69, label %72, label %70

70:                                               ; preds = %66
  %71 = load i32, ptr %59, align 8
  br label %83

72:                                               ; preds = %66
  %73 = getelementptr inbounds %struct.rtx_def, ptr %4, i64 0, i32 1, i32 0, i32 0, i64 1
  %74 = load ptr, ptr %73, align 8, !tbaa !16
  %75 = icmp eq ptr %74, null
  br i1 %75, label %79, label %76

76:                                               ; preds = %72
  %77 = getelementptr inbounds %struct.mem_attrs, ptr %74, i64 0, i32 4
  %78 = load i32, ptr %77, align 4, !tbaa !185
  br label %79

79:                                               ; preds = %72, %76
  %80 = phi i32 [ %78, %76 ], [ 8, %72 ]
  %81 = icmp ult i32 %80, %7
  %82 = load i32, ptr %59, align 8
  br i1 %81, label %97, label %83

83:                                               ; preds = %70, %79
  %84 = phi i32 [ %71, %70 ], [ %82, %79 ]
  %85 = and i32 %84, 65535
  %86 = icmp eq i32 %85, 43
  br i1 %86, label %87, label %132

87:                                               ; preds = %83
  %88 = getelementptr inbounds %struct.rtx_def, ptr %59, i64 0, i32 1, i32 0, i32 0, i64 1
  %89 = load ptr, ptr %88, align 8, !tbaa !16
  %90 = icmp eq ptr %89, null
  br i1 %90, label %94, label %91

91:                                               ; preds = %87
  %92 = getelementptr inbounds %struct.mem_attrs, ptr %89, i64 0, i32 4
  %93 = load i32, ptr %92, align 4, !tbaa !185
  br label %94

94:                                               ; preds = %87, %91
  %95 = phi i32 [ %93, %91 ], [ 8, %87 ]
  %96 = icmp ult i32 %95, %7
  br i1 %96, label %103, label %132

97:                                               ; preds = %79
  %98 = and i32 %82, 65535
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %3) #30
  %99 = zext i32 %98 to i64
  %100 = getelementptr inbounds [139 x i32], ptr @rtx_class, i64 0, i64 %99
  %101 = load i32, ptr %100, align 4, !tbaa !16
  %102 = icmp eq i32 %101, 9
  br i1 %102, label %117, label %106

103:                                              ; preds = %94
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %3) #30
  %104 = load i32, ptr getelementptr inbounds ([139 x i32], ptr @rtx_class, i64 0, i64 43), align 4, !tbaa !16
  %105 = icmp eq i32 %104, 9
  br i1 %105, label %117, label %120

106:                                              ; preds = %97
  %107 = icmp eq i32 %98, 39
  br i1 %107, label %108, label %120

108:                                              ; preds = %106
  %109 = getelementptr inbounds %struct.rtx_def, ptr %59, i64 0, i32 1
  %110 = load ptr, ptr %109, align 8, !tbaa !16
  %111 = load i32, ptr %110, align 8
  %112 = and i32 %111, 65535
  %113 = zext i32 %112 to i64
  %114 = getelementptr inbounds [139 x i32], ptr @rtx_class, i64 0, i64 %113
  %115 = load i32, ptr %114, align 4, !tbaa !16
  %116 = icmp eq i32 %115, 9
  br i1 %116, label %117, label %120

117:                                              ; preds = %103, %108, %97
  %118 = tail call ptr @force_const_mem(i32 noundef %0, ptr noundef nonnull %59) #30
  %119 = tail call ptr @validize_mem(ptr noundef %118) #30
  br label %120

120:                                              ; preds = %103, %117, %108, %106
  %121 = phi ptr [ %119, %117 ], [ %59, %108 ], [ %59, %106 ], [ %59, %103 ]
  %122 = tail call i32 @register_operand(ptr noundef nonnull %4, i32 noundef %0) #30
  %123 = icmp eq i32 %122, 0
  br i1 %123, label %124, label %129

124:                                              ; preds = %120
  %125 = tail call i32 @register_operand(ptr noundef %121, i32 noundef %0) #30
  %126 = icmp eq i32 %125, 0
  br i1 %126, label %127, label %129

127:                                              ; preds = %124
  %128 = tail call ptr @force_reg(i32 noundef %0, ptr noundef %121) #30
  br label %129

129:                                              ; preds = %127, %124, %120
  %130 = phi ptr [ %121, %120 ], [ %121, %124 ], [ %128, %127 ]
  store ptr %4, ptr %3, align 16, !tbaa !5
  %131 = getelementptr inbounds [2 x ptr], ptr %3, i64 0, i64 1
  store ptr %130, ptr %131, align 8, !tbaa !5
  call void @ix86_expand_vector_move_misalign(i32 noundef %0, ptr noundef nonnull %3)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %3) #30
  br label %147

132:                                              ; preds = %65, %94, %83
  %133 = tail call i32 @register_operand(ptr noundef %4, i32 noundef %0) #30
  %134 = icmp eq i32 %133, 0
  br i1 %134, label %135, label %144

135:                                              ; preds = %132
  %136 = tail call i32 @register_operand(ptr noundef %59, i32 noundef %0) #30
  %137 = icmp eq i32 %136, 0
  br i1 %137, label %138, label %144

138:                                              ; preds = %135
  %139 = load i32, ptr %4, align 8
  %140 = lshr i32 %139, 16
  %141 = and i32 %140, 255
  %142 = tail call ptr @force_reg(i32 noundef %141, ptr noundef %59) #30
  %143 = tail call ptr @emit_move_insn(ptr noundef nonnull %4, ptr noundef %142) #30
  br label %147

144:                                              ; preds = %58, %135, %132
  %145 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 23, i32 noundef 0, ptr noundef %4, ptr noundef %59) #30
  %146 = tail call ptr @emit_insn(ptr noundef %145) #30
  br label %147

147:                                              ; preds = %144, %138, %129
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define dso_local void @ix86_expand_vector_move_misalign(i32 noundef %0, ptr nocapture noundef readonly %1) local_unnamed_addr #9 {
  %3 = load ptr, ptr %1, align 8, !tbaa !5
  %4 = getelementptr inbounds ptr, ptr %1, i64 1
  %5 = load ptr, ptr %4, align 8, !tbaa !5
  %6 = load i32, ptr @ix86_isa_flags, align 4, !tbaa !20
  %7 = and i32 %6, 32
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %50, label %9

9:                                                ; preds = %2
  %10 = zext i32 %0 to i64
  %11 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %10
  %12 = load i8, ptr %11, align 1, !tbaa !16
  switch i8 %12, label %49 [
    i8 12, label %13
    i8 2, label %13
    i8 17, label %31
  ]

13:                                               ; preds = %9, %9
  %14 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %10
  %15 = load i8, ptr %14, align 1, !tbaa !16
  switch i8 %15, label %30 [
    i8 16, label %16
    i8 32, label %23
  ]

16:                                               ; preds = %13
  %17 = load ptr, ptr @rtl_hooks, align 8, !tbaa !187
  %18 = tail call ptr %17(i32 noundef 63, ptr noundef %3) #30
  %19 = load ptr, ptr @rtl_hooks, align 8, !tbaa !187
  %20 = tail call ptr %19(i32 noundef 63, ptr noundef %5) #30
  %21 = tail call ptr @gen_avx_movdqu(ptr noundef %18, ptr noundef %20) #30
  %22 = tail call ptr @emit_insn(ptr noundef %21) #30
  br label %198

23:                                               ; preds = %13
  %24 = load ptr, ptr @rtl_hooks, align 8, !tbaa !187
  %25 = tail call ptr %24(i32 noundef 68, ptr noundef %3) #30
  %26 = load ptr, ptr @rtl_hooks, align 8, !tbaa !187
  %27 = tail call ptr %26(i32 noundef 68, ptr noundef %5) #30
  %28 = tail call ptr @gen_avx_movdqu256(ptr noundef %25, ptr noundef %27) #30
  %29 = tail call ptr @emit_insn(ptr noundef %28) #30
  br label %198

30:                                               ; preds = %13
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 13205, ptr noundef nonnull @.str.131) #30
  br label %198

31:                                               ; preds = %9
  %32 = load ptr, ptr @rtl_hooks, align 8, !tbaa !187
  %33 = tail call ptr %32(i32 noundef %0, ptr noundef %3) #30
  %34 = load ptr, ptr @rtl_hooks, align 8, !tbaa !187
  %35 = tail call ptr %34(i32 noundef %0, ptr noundef %5) #30
  switch i32 %0, label %48 [
    i32 79, label %36
    i32 81, label %39
    i32 80, label %42
    i32 82, label %45
  ]

36:                                               ; preds = %31
  %37 = tail call ptr @gen_avx_movups(ptr noundef %33, ptr noundef %35) #30
  %38 = tail call ptr @emit_insn(ptr noundef %37) #30
  br label %198

39:                                               ; preds = %31
  %40 = tail call ptr @gen_avx_movups256(ptr noundef %33, ptr noundef %35) #30
  %41 = tail call ptr @emit_insn(ptr noundef %40) #30
  br label %198

42:                                               ; preds = %31
  %43 = tail call ptr @gen_avx_movupd(ptr noundef %33, ptr noundef %35) #30
  %44 = tail call ptr @emit_insn(ptr noundef %43) #30
  br label %198

45:                                               ; preds = %31
  %46 = tail call ptr @gen_avx_movupd256(ptr noundef %33, ptr noundef %35) #30
  %47 = tail call ptr @emit_insn(ptr noundef %46) #30
  br label %198

48:                                               ; preds = %31
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 13227, ptr noundef nonnull @.str.131) #30
  br label %198

49:                                               ; preds = %9
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 13232, ptr noundef nonnull @.str.131) #30
  br label %198

50:                                               ; preds = %2
  %51 = load i32, ptr %5, align 8
  %52 = and i32 %51, 65535
  %53 = icmp eq i32 %52, 43
  br i1 %53, label %54, label %140

54:                                               ; preds = %50
  %55 = tail call zeroext i8 @optimize_insn_for_size_p() #30
  %56 = icmp eq i8 %55, 0
  br i1 %56, label %64, label %57

57:                                               ; preds = %54
  %58 = load ptr, ptr @rtl_hooks, align 8, !tbaa !187
  %59 = tail call ptr %58(i32 noundef 79, ptr noundef %3) #30
  %60 = load ptr, ptr @rtl_hooks, align 8, !tbaa !187
  %61 = tail call ptr %60(i32 noundef 79, ptr noundef nonnull %5) #30
  %62 = tail call ptr @gen_sse_movups(ptr noundef %59, ptr noundef %61) #30
  %63 = tail call ptr @emit_insn(ptr noundef %62) #30
  br label %198

64:                                               ; preds = %54
  %65 = load i32, ptr @ix86_isa_flags, align 4, !tbaa !20
  %66 = and i32 %65, 131072
  %67 = icmp eq i32 %66, 0
  br i1 %67, label %107, label %68

68:                                               ; preds = %64
  %69 = zext i32 %0 to i64
  %70 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %69
  %71 = load i8, ptr %70, align 1, !tbaa !16
  %72 = icmp eq i8 %71, 12
  br i1 %72, label %73, label %80

73:                                               ; preds = %68
  %74 = load ptr, ptr @rtl_hooks, align 8, !tbaa !187
  %75 = tail call ptr %74(i32 noundef 63, ptr noundef %3) #30
  %76 = load ptr, ptr @rtl_hooks, align 8, !tbaa !187
  %77 = tail call ptr %76(i32 noundef 63, ptr noundef nonnull %5) #30
  %78 = tail call ptr @gen_sse2_movdqu(ptr noundef %75, ptr noundef %77) #30
  %79 = tail call ptr @emit_insn(ptr noundef %78) #30
  br label %198

80:                                               ; preds = %68
  %81 = icmp eq i32 %0, 80
  br i1 %81, label %82, label %107

82:                                               ; preds = %80
  %83 = load i8, ptr getelementptr inbounds ([62 x i8], ptr @ix86_tune_features, i64 0, i64 33), align 1, !tbaa !16
  %84 = icmp eq i8 %83, 0
  br i1 %84, label %92, label %85

85:                                               ; preds = %82
  %86 = load ptr, ptr @rtl_hooks, align 8, !tbaa !187
  %87 = tail call ptr %86(i32 noundef 80, ptr noundef %3) #30
  %88 = load ptr, ptr @rtl_hooks, align 8, !tbaa !187
  %89 = tail call ptr %88(i32 noundef 80, ptr noundef nonnull %5) #30
  %90 = tail call ptr @gen_sse2_movupd(ptr noundef %87, ptr noundef %89) #30
  %91 = tail call ptr @emit_insn(ptr noundef %90) #30
  br label %198

92:                                               ; preds = %82
  %93 = load i8, ptr getelementptr inbounds ([62 x i8], ptr @ix86_tune_features, i64 0, i64 34), align 2, !tbaa !16
  %94 = icmp eq i8 %93, 0
  br i1 %94, label %97, label %95

95:                                               ; preds = %92
  %96 = tail call ptr @emit_clobber(ptr noundef %3) #30
  br label %99

97:                                               ; preds = %92
  %98 = load ptr, ptr getelementptr inbounds ([3 x [87 x ptr]], ptr @const_tiny_rtx, i64 0, i64 0, i64 80), align 16, !tbaa !5
  br label %99

99:                                               ; preds = %97, %95
  %100 = phi ptr [ %3, %95 ], [ %98, %97 ]
  %101 = tail call ptr @adjust_address_1(ptr noundef nonnull %5, i32 noundef 39, i64 noundef 0, i32 noundef 1, i32 noundef 1) #30
  %102 = tail call ptr @gen_sse2_loadlpd(ptr noundef %3, ptr noundef %100, ptr noundef %101) #30
  %103 = tail call ptr @emit_insn(ptr noundef %102) #30
  %104 = tail call ptr @adjust_address_1(ptr noundef nonnull %5, i32 noundef 39, i64 noundef 8, i32 noundef 1, i32 noundef 1) #30
  %105 = tail call ptr @gen_sse2_loadhpd(ptr noundef %3, ptr noundef %3, ptr noundef %104) #30
  %106 = tail call ptr @emit_insn(ptr noundef %105) #30
  br label %198

107:                                              ; preds = %64, %80
  %108 = load i8, ptr getelementptr inbounds ([62 x i8], ptr @ix86_tune_features, i64 0, i64 33), align 1, !tbaa !16
  %109 = icmp eq i8 %108, 0
  br i1 %109, label %117, label %110

110:                                              ; preds = %107
  %111 = load ptr, ptr @rtl_hooks, align 8, !tbaa !187
  %112 = tail call ptr %111(i32 noundef 79, ptr noundef %3) #30
  %113 = load ptr, ptr @rtl_hooks, align 8, !tbaa !187
  %114 = tail call ptr %113(i32 noundef 79, ptr noundef nonnull %5) #30
  %115 = tail call ptr @gen_sse_movups(ptr noundef %112, ptr noundef %114) #30
  %116 = tail call ptr @emit_insn(ptr noundef %115) #30
  br label %198

117:                                              ; preds = %107
  %118 = load i8, ptr getelementptr inbounds ([62 x i8], ptr @ix86_tune_features, i64 0, i64 32), align 16, !tbaa !16
  %119 = icmp eq i8 %118, 0
  br i1 %119, label %125, label %120

120:                                              ; preds = %117
  %121 = sext i32 %0 to i64
  %122 = getelementptr inbounds [87 x ptr], ptr @const_tiny_rtx, i64 0, i64 %121
  %123 = load ptr, ptr %122, align 8, !tbaa !5
  %124 = tail call ptr @emit_move_insn(ptr noundef %3, ptr noundef %123) #30
  br label %127

125:                                              ; preds = %117
  %126 = tail call ptr @emit_clobber(ptr noundef %3) #30
  br label %127

127:                                              ; preds = %125, %120
  %128 = icmp eq i32 %0, 79
  br i1 %128, label %132, label %129

129:                                              ; preds = %127
  %130 = load ptr, ptr @rtl_hooks, align 8, !tbaa !187
  %131 = tail call ptr %130(i32 noundef 79, ptr noundef %3) #30
  br label %132

132:                                              ; preds = %129, %127
  %133 = phi ptr [ %131, %129 ], [ %3, %127 ]
  %134 = tail call ptr @adjust_address_1(ptr noundef nonnull %5, i32 noundef 78, i64 noundef 0, i32 noundef 1, i32 noundef 1) #30
  %135 = tail call ptr @gen_sse_loadlps(ptr noundef %133, ptr noundef %133, ptr noundef %134) #30
  %136 = tail call ptr @emit_insn(ptr noundef %135) #30
  %137 = tail call ptr @adjust_address_1(ptr noundef nonnull %5, i32 noundef 78, i64 noundef 8, i32 noundef 1, i32 noundef 1) #30
  %138 = tail call ptr @gen_sse_loadhps(ptr noundef %133, ptr noundef %133, ptr noundef %137) #30
  %139 = tail call ptr @emit_insn(ptr noundef %138) #30
  br label %198

140:                                              ; preds = %50
  %141 = load i32, ptr %3, align 8
  %142 = and i32 %141, 65535
  %143 = icmp eq i32 %142, 43
  br i1 %143, label %144, label %197

144:                                              ; preds = %140
  %145 = tail call zeroext i8 @optimize_insn_for_size_p() #30
  %146 = icmp eq i8 %145, 0
  br i1 %146, label %154, label %147

147:                                              ; preds = %144
  %148 = load ptr, ptr @rtl_hooks, align 8, !tbaa !187
  %149 = tail call ptr %148(i32 noundef 79, ptr noundef nonnull %3) #30
  %150 = load ptr, ptr @rtl_hooks, align 8, !tbaa !187
  %151 = tail call ptr %150(i32 noundef 79, ptr noundef nonnull %5) #30
  %152 = tail call ptr @gen_sse_movups(ptr noundef %149, ptr noundef %151) #30
  %153 = tail call ptr @emit_insn(ptr noundef %152) #30
  br label %198

154:                                              ; preds = %144
  %155 = load i32, ptr @ix86_isa_flags, align 4, !tbaa !20
  %156 = and i32 %155, 131072
  %157 = icmp eq i32 %156, 0
  %158 = load i8, ptr getelementptr inbounds ([62 x i8], ptr @ix86_tune_features, i64 0, i64 35), align 1
  %159 = icmp ne i8 %158, 0
  %160 = select i1 %157, i1 true, i1 %159
  br i1 %160, label %173, label %161

161:                                              ; preds = %154
  %162 = zext i32 %0 to i64
  %163 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %162
  %164 = load i8, ptr %163, align 1, !tbaa !16
  %165 = icmp eq i8 %164, 12
  br i1 %165, label %166, label %173

166:                                              ; preds = %161
  %167 = load ptr, ptr @rtl_hooks, align 8, !tbaa !187
  %168 = tail call ptr %167(i32 noundef 63, ptr noundef nonnull %3) #30
  %169 = load ptr, ptr @rtl_hooks, align 8, !tbaa !187
  %170 = tail call ptr %169(i32 noundef 63, ptr noundef nonnull %5) #30
  %171 = tail call ptr @gen_sse2_movdqu(ptr noundef %168, ptr noundef %170) #30
  %172 = tail call ptr @emit_insn(ptr noundef %171) #30
  br label %198

173:                                              ; preds = %161, %154
  %174 = icmp ne i32 %156, 0
  %175 = icmp eq i32 %0, 80
  %176 = and i1 %175, %174
  br i1 %176, label %177, label %184

177:                                              ; preds = %173
  %178 = tail call ptr @adjust_address_1(ptr noundef nonnull %3, i32 noundef 39, i64 noundef 0, i32 noundef 1, i32 noundef 1) #30
  %179 = tail call ptr @gen_sse2_storelpd(ptr noundef %178, ptr noundef nonnull %5) #30
  %180 = tail call ptr @emit_insn(ptr noundef %179) #30
  %181 = tail call ptr @adjust_address_1(ptr noundef nonnull %3, i32 noundef 39, i64 noundef 8, i32 noundef 1, i32 noundef 1) #30
  %182 = tail call ptr @gen_sse2_storehpd(ptr noundef %181, ptr noundef nonnull %5) #30
  %183 = tail call ptr @emit_insn(ptr noundef %182) #30
  br label %198

184:                                              ; preds = %173
  %185 = icmp eq i32 %0, 79
  br i1 %185, label %189, label %186

186:                                              ; preds = %184
  %187 = load ptr, ptr @rtl_hooks, align 8, !tbaa !187
  %188 = tail call ptr %187(i32 noundef 79, ptr noundef nonnull %5) #30
  br label %189

189:                                              ; preds = %186, %184
  %190 = phi ptr [ %188, %186 ], [ %5, %184 ]
  %191 = tail call ptr @adjust_address_1(ptr noundef nonnull %3, i32 noundef 78, i64 noundef 0, i32 noundef 1, i32 noundef 1) #30
  %192 = tail call ptr @gen_sse_storelps(ptr noundef %191, ptr noundef %190) #30
  %193 = tail call ptr @emit_insn(ptr noundef %192) #30
  %194 = tail call ptr @adjust_address_1(ptr noundef nonnull %3, i32 noundef 78, i64 noundef 8, i32 noundef 1, i32 noundef 1) #30
  %195 = tail call ptr @gen_sse_storehps(ptr noundef %194, ptr noundef %190) #30
  %196 = tail call ptr @emit_insn(ptr noundef %195) #30
  br label %198

197:                                              ; preds = %140
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 13360, ptr noundef nonnull @.str.131) #30
  br label %198

198:                                              ; preds = %85, %99, %132, %177, %189, %197, %49, %30, %23, %16, %48, %45, %42, %39, %36, %166, %147, %110, %73, %57
  ret void
}

declare ptr @gen_avx_movdqu(ptr noundef, ptr noundef) local_unnamed_addr #3

declare ptr @gen_avx_movdqu256(ptr noundef, ptr noundef) local_unnamed_addr #3

declare ptr @gen_avx_movups(ptr noundef, ptr noundef) local_unnamed_addr #3

declare ptr @gen_avx_movups256(ptr noundef, ptr noundef) local_unnamed_addr #3

declare ptr @gen_avx_movupd(ptr noundef, ptr noundef) local_unnamed_addr #3

declare ptr @gen_avx_movupd256(ptr noundef, ptr noundef) local_unnamed_addr #3

declare zeroext i8 @optimize_insn_for_size_p() local_unnamed_addr #3

declare ptr @gen_sse_movups(ptr noundef, ptr noundef) local_unnamed_addr #3

declare ptr @gen_sse2_movdqu(ptr noundef, ptr noundef) local_unnamed_addr #3

declare ptr @gen_sse2_movupd(ptr noundef, ptr noundef) local_unnamed_addr #3

declare ptr @emit_clobber(ptr noundef) local_unnamed_addr #3

declare ptr @gen_sse2_loadlpd(ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

declare ptr @gen_sse2_loadhpd(ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

declare ptr @gen_sse_loadlps(ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

declare ptr @gen_sse_loadhps(ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

declare ptr @gen_sse2_storelpd(ptr noundef, ptr noundef) local_unnamed_addr #3

declare ptr @gen_sse2_storehpd(ptr noundef, ptr noundef) local_unnamed_addr #3

declare ptr @gen_sse_storelps(ptr noundef, ptr noundef) local_unnamed_addr #3

declare ptr @gen_sse_storehps(ptr noundef, ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define dso_local void @ix86_expand_push(i32 noundef %0, ptr noundef %1) local_unnamed_addr #9 {
  %3 = load ptr, ptr getelementptr inbounds ([11 x ptr], ptr @global_rtl, i64 0, i64 2), align 16, !tbaa !5
  %4 = zext i32 %0 to i64
  %5 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %4
  %6 = load i8, ptr %5, align 1, !tbaa !16
  %7 = zext i8 %6 to i64
  %8 = sub nsw i64 0, %7
  %9 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef %8) #30
  %10 = load ptr, ptr getelementptr inbounds ([11 x ptr], ptr @global_rtl, i64 0, i64 2), align 16, !tbaa !5
  %11 = tail call ptr @expand_simple_binop(i32 noundef 16, i32 noundef 49, ptr noundef %3, ptr noundef %9, ptr noundef %10, i32 noundef 1, i32 noundef 0) #30
  %12 = load ptr, ptr getelementptr inbounds ([11 x ptr], ptr @global_rtl, i64 0, i64 2), align 16, !tbaa !5
  %13 = icmp eq ptr %11, %12
  br i1 %13, label %17, label %14

14:                                               ; preds = %2
  %15 = tail call ptr @emit_move_insn(ptr noundef %12, ptr noundef %11) #30
  %16 = load ptr, ptr getelementptr inbounds ([11 x ptr], ptr @global_rtl, i64 0, i64 2), align 16, !tbaa !5
  br label %17

17:                                               ; preds = %14, %2
  %18 = phi ptr [ %16, %14 ], [ %11, %2 ]
  %19 = tail call ptr @gen_rtx_MEM(i32 noundef %0, ptr noundef %18) #30
  %20 = tail call ptr @emit_move_insn(ptr noundef %19, ptr noundef %1) #30
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define dso_local ptr @ix86_fixup_binary_operands(i32 noundef %0, i32 noundef %1, ptr nocapture noundef %2) local_unnamed_addr #9 {
  %4 = load ptr, ptr %2, align 8, !tbaa !5
  %5 = getelementptr inbounds ptr, ptr %2, i64 1
  %6 = load ptr, ptr %5, align 8, !tbaa !5
  %7 = getelementptr inbounds ptr, ptr %2, i64 2
  %8 = load ptr, ptr %7, align 8, !tbaa !5
  %9 = sext i32 %0 to i64
  %10 = getelementptr inbounds [139 x i32], ptr @rtx_class, i64 0, i64 %9
  %11 = load i32, ptr %10, align 4, !tbaa !16
  %12 = icmp eq i32 %11, 3
  br i1 %12, label %13, label %42

13:                                               ; preds = %3
  %14 = tail call i32 @rtx_equal_p(ptr noundef %4, ptr noundef %6) #30
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %16, label %42

16:                                               ; preds = %13
  %17 = tail call i32 @rtx_equal_p(ptr noundef %4, ptr noundef %8) #30
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %21, label %19

19:                                               ; preds = %16
  %20 = load i32, ptr %8, align 8
  br label %35

21:                                               ; preds = %16
  %22 = tail call i32 @immediate_operand(ptr noundef %8, i32 noundef %1) #30
  %23 = icmp eq i32 %22, 0
  br i1 %23, label %24, label %42

24:                                               ; preds = %21
  %25 = tail call i32 @immediate_operand(ptr noundef %6, i32 noundef %1) #30
  %26 = icmp eq i32 %25, 0
  %27 = load i32, ptr %8, align 8
  br i1 %26, label %28, label %35

28:                                               ; preds = %24
  %29 = and i32 %27, 65535
  %30 = icmp eq i32 %29, 43
  br i1 %30, label %42, label %31

31:                                               ; preds = %28
  %32 = load i32, ptr %6, align 8
  %33 = and i32 %32, 65535
  %34 = icmp eq i32 %33, 43
  br i1 %34, label %35, label %42

35:                                               ; preds = %19, %24, %31
  %36 = phi i32 [ %20, %19 ], [ %27, %24 ], [ %27, %31 ]
  %37 = load i32, ptr %6, align 8
  %38 = xor i32 %36, %37
  %39 = and i32 %38, 16711680
  %40 = icmp eq i32 %39, 0
  br i1 %40, label %42, label %41

41:                                               ; preds = %35
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 13442, ptr noundef nonnull @.str.131) #30
  br label %42

42:                                               ; preds = %28, %21, %13, %3, %41, %35, %31
  %43 = phi ptr [ %6, %31 ], [ %8, %35 ], [ %8, %41 ], [ %6, %3 ], [ %6, %13 ], [ %6, %21 ], [ %6, %28 ]
  %44 = phi ptr [ %8, %31 ], [ %6, %35 ], [ %6, %41 ], [ %8, %3 ], [ %8, %13 ], [ %8, %21 ], [ %8, %28 ]
  %45 = load i32, ptr %43, align 8
  %46 = and i32 %45, 65535
  %47 = icmp eq i32 %46, 43
  br i1 %47, label %48, label %57

48:                                               ; preds = %42
  %49 = load i32, ptr %44, align 8
  %50 = and i32 %49, 65535
  %51 = icmp eq i32 %50, 43
  br i1 %51, label %52, label %57

52:                                               ; preds = %48
  %53 = tail call i32 @rtx_equal_p(ptr noundef nonnull %43, ptr noundef nonnull %44) #30
  %54 = icmp eq i32 %53, 0
  %55 = tail call ptr @force_reg(i32 noundef %1, ptr noundef nonnull %44) #30
  %56 = select i1 %54, ptr %43, ptr %55
  br label %57

57:                                               ; preds = %52, %48, %42
  %58 = phi ptr [ %43, %48 ], [ %43, %42 ], [ %56, %52 ]
  %59 = phi ptr [ %44, %48 ], [ %44, %42 ], [ %55, %52 ]
  %60 = load i32, ptr %4, align 8
  %61 = and i32 %60, 65535
  %62 = icmp eq i32 %61, 43
  br i1 %62, label %63, label %68

63:                                               ; preds = %57
  %64 = tail call i32 @rtx_equal_p(ptr noundef nonnull %4, ptr noundef %58) #30
  %65 = icmp eq i32 %64, 0
  br i1 %65, label %66, label %68

66:                                               ; preds = %63
  %67 = tail call ptr @gen_reg_rtx(i32 noundef %1) #30
  br label %68

68:                                               ; preds = %66, %63, %57
  %69 = phi ptr [ %4, %63 ], [ %67, %66 ], [ %4, %57 ]
  %70 = load i32, ptr %58, align 8
  %71 = and i32 %70, 65535
  %72 = zext i32 %71 to i64
  %73 = getelementptr inbounds [139 x i32], ptr @rtx_class, i64 0, i64 %72
  %74 = load i32, ptr %73, align 4, !tbaa !16
  %75 = icmp eq i32 %74, 9
  br i1 %75, label %76, label %79

76:                                               ; preds = %68
  %77 = tail call ptr @force_reg(i32 noundef %1, ptr noundef nonnull %58) #30
  %78 = load i32, ptr %77, align 8
  br label %79

79:                                               ; preds = %76, %68
  %80 = phi i32 [ %78, %76 ], [ %70, %68 ]
  %81 = phi ptr [ %77, %76 ], [ %58, %68 ]
  %82 = and i32 %80, 65535
  %83 = icmp eq i32 %82, 43
  br i1 %83, label %84, label %89

84:                                               ; preds = %79
  %85 = tail call i32 @rtx_equal_p(ptr noundef %69, ptr noundef nonnull %81) #30
  %86 = icmp eq i32 %85, 0
  br i1 %86, label %87, label %89

87:                                               ; preds = %84
  %88 = tail call ptr @force_reg(i32 noundef %1, ptr noundef nonnull %81) #30
  br label %89

89:                                               ; preds = %87, %84, %79
  %90 = phi ptr [ %81, %84 ], [ %88, %87 ], [ %81, %79 ]
  store ptr %90, ptr %5, align 8, !tbaa !5
  store ptr %59, ptr %7, align 8, !tbaa !5
  ret ptr %69
}

declare i32 @rtx_equal_p(ptr noundef, ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define dso_local void @ix86_fixup_binary_operands_no_copy(i32 noundef %0, i32 noundef %1, ptr nocapture noundef %2) local_unnamed_addr #9 {
  %4 = tail call ptr @ix86_fixup_binary_operands(i32 noundef %0, i32 noundef %1, ptr noundef %2)
  %5 = load ptr, ptr %2, align 8, !tbaa !5
  %6 = icmp eq ptr %4, %5
  br i1 %6, label %8, label %7

7:                                                ; preds = %3
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 13488, ptr noundef nonnull @.str.131) #30
  br label %8

8:                                                ; preds = %3, %7
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define dso_local void @ix86_expand_binary_operator(i32 noundef %0, i32 noundef %1, ptr nocapture noundef %2) local_unnamed_addr #9 {
  %4 = tail call ptr @ix86_fixup_binary_operands(i32 noundef %0, i32 noundef %1, ptr noundef %2)
  %5 = getelementptr inbounds ptr, ptr %2, i64 1
  %6 = load ptr, ptr %5, align 8, !tbaa !5
  %7 = getelementptr inbounds ptr, ptr %2, i64 2
  %8 = load ptr, ptr %7, align 8, !tbaa !5
  %9 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef %0, i32 noundef %1, ptr noundef %6, ptr noundef %8) #30
  %10 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 23, i32 noundef 0, ptr noundef %4, ptr noundef %9) #30
  %11 = load i32, ptr @reload_in_progress, align 4, !tbaa !20
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %16, label %13

13:                                               ; preds = %3
  %14 = icmp eq i32 %0, 49
  br i1 %14, label %21, label %15

15:                                               ; preds = %13
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 13512, ptr noundef nonnull @.str.131) #30
  br label %21

16:                                               ; preds = %3
  %17 = tail call ptr @gen_rtx_REG(i32 noundef 2, i32 noundef 17) #30
  %18 = tail call ptr @gen_rtx_fmt_e_stat(i32 noundef 25, i32 noundef 0, ptr noundef %17) #30
  %19 = tail call ptr (i32, ...) @gen_rtvec(i32 noundef 2, ptr noundef %10, ptr noundef %18) #30
  %20 = tail call ptr @gen_rtx_fmt_E_stat(i32 noundef 15, i32 noundef 0, ptr noundef %19) #30
  br label %21

21:                                               ; preds = %15, %13, %16
  %22 = phi ptr [ %20, %16 ], [ %10, %13 ], [ %10, %15 ]
  %23 = tail call ptr @emit_insn(ptr noundef %22) #30
  %24 = load ptr, ptr %2, align 8, !tbaa !5
  %25 = icmp eq ptr %4, %24
  br i1 %25, label %28, label %26

26:                                               ; preds = %21
  %27 = tail call ptr @emit_move_insn(ptr noundef %24, ptr noundef %4) #30
  br label %28

28:                                               ; preds = %26, %21
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define dso_local i32 @ix86_binary_operator_ok(i32 noundef %0, i32 noundef %1, ptr nocapture noundef readonly %2) local_unnamed_addr #9 {
  %4 = load ptr, ptr %2, align 8, !tbaa !5
  %5 = getelementptr inbounds ptr, ptr %2, i64 1
  %6 = load ptr, ptr %5, align 8, !tbaa !5
  %7 = getelementptr inbounds ptr, ptr %2, i64 2
  %8 = load ptr, ptr %7, align 8, !tbaa !5
  %9 = load i32, ptr %6, align 8
  %10 = and i32 %9, 65535
  %11 = icmp eq i32 %10, 43
  br i1 %11, label %12, label %16

12:                                               ; preds = %3
  %13 = load i32, ptr %8, align 8
  %14 = and i32 %13, 65535
  %15 = icmp eq i32 %14, 43
  br i1 %15, label %64, label %16

16:                                               ; preds = %12, %3
  %17 = sext i32 %0 to i64
  %18 = getelementptr inbounds [139 x i32], ptr @rtx_class, i64 0, i64 %17
  %19 = load i32, ptr %18, align 4, !tbaa !16
  %20 = icmp eq i32 %19, 3
  br i1 %20, label %21, label %42

21:                                               ; preds = %16
  %22 = tail call i32 @rtx_equal_p(ptr noundef %4, ptr noundef nonnull %6) #30
  %23 = icmp eq i32 %22, 0
  br i1 %23, label %24, label %42

24:                                               ; preds = %21
  %25 = tail call i32 @rtx_equal_p(ptr noundef %4, ptr noundef %8) #30
  %26 = icmp eq i32 %25, 0
  br i1 %26, label %27, label %43

27:                                               ; preds = %24
  %28 = tail call i32 @immediate_operand(ptr noundef %8, i32 noundef %1) #30
  %29 = icmp eq i32 %28, 0
  br i1 %29, label %30, label %42

30:                                               ; preds = %27
  %31 = tail call i32 @immediate_operand(ptr noundef nonnull %6, i32 noundef %1) #30
  %32 = icmp eq i32 %31, 0
  br i1 %32, label %33, label %43

33:                                               ; preds = %30
  %34 = load i32, ptr %8, align 8
  %35 = and i32 %34, 65535
  %36 = icmp eq i32 %35, 43
  br i1 %36, label %42, label %37

37:                                               ; preds = %33
  %38 = load i32, ptr %6, align 8
  %39 = freeze i32 %38
  %40 = and i32 %39, 65535
  %41 = icmp eq i32 %40, 43
  br i1 %41, label %43, label %42

42:                                               ; preds = %33, %27, %21, %16, %37
  br label %43

43:                                               ; preds = %30, %24, %37, %42
  %44 = phi ptr [ %6, %42 ], [ %8, %37 ], [ %8, %24 ], [ %8, %30 ]
  %45 = load i32, ptr %4, align 8
  %46 = and i32 %45, 65535
  %47 = icmp eq i32 %46, 43
  br i1 %47, label %48, label %51

48:                                               ; preds = %43
  %49 = tail call i32 @rtx_equal_p(ptr noundef nonnull %4, ptr noundef %44) #30
  %50 = icmp eq i32 %49, 0
  br i1 %50, label %64, label %51

51:                                               ; preds = %48, %43
  %52 = load i32, ptr %44, align 8
  %53 = and i32 %52, 65535
  %54 = zext i32 %53 to i64
  %55 = getelementptr inbounds [139 x i32], ptr @rtx_class, i64 0, i64 %54
  %56 = load i32, ptr %55, align 4, !tbaa !16
  %57 = icmp eq i32 %56, 9
  br i1 %57, label %64, label %58

58:                                               ; preds = %51
  %59 = icmp eq i32 %53, 43
  br i1 %59, label %60, label %63

60:                                               ; preds = %58
  %61 = tail call i32 @rtx_equal_p(ptr noundef nonnull %4, ptr noundef nonnull %44) #30
  %62 = icmp eq i32 %61, 0
  br i1 %62, label %64, label %63

63:                                               ; preds = %60, %58
  br label %64

64:                                               ; preds = %60, %51, %48, %12, %63
  %65 = phi i32 [ 1, %63 ], [ 0, %12 ], [ 0, %48 ], [ 0, %51 ], [ 0, %60 ]
  ret i32 %65
}

; Function Attrs: nounwind sspstrong uwtable
define dso_local void @ix86_expand_unary_operator(i32 noundef %0, i32 noundef %1, ptr nocapture noundef readonly %2) local_unnamed_addr #9 {
  %4 = load ptr, ptr %2, align 8, !tbaa !5
  %5 = getelementptr inbounds ptr, ptr %2, i64 1
  %6 = load ptr, ptr %5, align 8, !tbaa !5
  %7 = load i32, ptr %4, align 8
  %8 = and i32 %7, 65535
  %9 = icmp eq i32 %8, 43
  br i1 %9, label %10, label %15

10:                                               ; preds = %3
  %11 = tail call i32 @rtx_equal_p(ptr noundef nonnull %4, ptr noundef %6) #30
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %13, label %22

13:                                               ; preds = %10
  %14 = tail call ptr @gen_reg_rtx(i32 noundef %1) #30
  br label %15

15:                                               ; preds = %13, %3
  %16 = phi ptr [ %14, %13 ], [ %4, %3 ]
  %17 = load i32, ptr %6, align 8
  %18 = and i32 %17, 65535
  %19 = icmp eq i32 %18, 43
  br i1 %19, label %20, label %22

20:                                               ; preds = %15
  %21 = tail call ptr @force_reg(i32 noundef %1, ptr noundef nonnull %6) #30
  br label %22

22:                                               ; preds = %10, %20, %15
  %23 = phi ptr [ %16, %15 ], [ %16, %20 ], [ %4, %10 ]
  %24 = phi ptr [ %6, %15 ], [ %21, %20 ], [ %6, %10 ]
  %25 = tail call ptr @gen_rtx_fmt_e_stat(i32 noundef %0, i32 noundef %1, ptr noundef %24) #30
  %26 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 23, i32 noundef 0, ptr noundef %23, ptr noundef %25) #30
  %27 = load i32, ptr @reload_in_progress, align 4, !tbaa !20
  %28 = icmp ne i32 %27, 0
  %29 = icmp eq i32 %0, 64
  %30 = or i1 %29, %28
  br i1 %30, label %31, label %33

31:                                               ; preds = %22
  br i1 %29, label %38, label %32

32:                                               ; preds = %31
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 13600, ptr noundef nonnull @.str.131) #30
  br label %38

33:                                               ; preds = %22
  %34 = tail call ptr @gen_rtx_REG(i32 noundef 2, i32 noundef 17) #30
  %35 = tail call ptr @gen_rtx_fmt_e_stat(i32 noundef 25, i32 noundef 0, ptr noundef %34) #30
  %36 = tail call ptr (i32, ...) @gen_rtvec(i32 noundef 2, ptr noundef %26, ptr noundef %35) #30
  %37 = tail call ptr @gen_rtx_fmt_E_stat(i32 noundef 15, i32 noundef 0, ptr noundef %36) #30
  br label %38

38:                                               ; preds = %32, %31, %33
  %39 = phi ptr [ %37, %33 ], [ %26, %31 ], [ %26, %32 ]
  %40 = tail call ptr @emit_insn(ptr noundef %39) #30
  %41 = load ptr, ptr %2, align 8, !tbaa !5
  %42 = icmp eq ptr %23, %41
  br i1 %42, label %45, label %43

43:                                               ; preds = %38
  %44 = tail call ptr @emit_move_insn(ptr noundef %41, ptr noundef %23) #30
  br label %45

45:                                               ; preds = %43, %38
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define dso_local zeroext i8 @ix86_lea_for_add_ok(i32 noundef %0, ptr noundef %1, ptr nocapture noundef readonly %2) local_unnamed_addr #9 {
  %4 = load ptr, ptr %2, align 8, !tbaa !5
  %5 = tail call i32 @true_regnum(ptr noundef %4) #30
  %6 = getelementptr inbounds ptr, ptr %2, i64 1
  %7 = load ptr, ptr %6, align 8, !tbaa !5
  %8 = tail call i32 @true_regnum(ptr noundef %7) #30
  %9 = load i8, ptr getelementptr inbounds ([62 x i8], ptr @ix86_tune_features, i64 0, i64 61), align 1, !tbaa !16
  %10 = icmp eq i8 %9, 0
  br i1 %10, label %15, label %11

11:                                               ; preds = %3
  %12 = load ptr, ptr @cfun, align 8, !tbaa !5
  %13 = tail call zeroext i8 @optimize_function_for_size_p(ptr noundef %12) #30
  %14 = icmp eq i8 %13, 0
  br i1 %14, label %17, label %15

15:                                               ; preds = %11, %3
  %16 = icmp ne i32 %5, %8
  br label %357

17:                                               ; preds = %11
  %18 = getelementptr inbounds ptr, ptr %2, i64 2
  %19 = load ptr, ptr %18, align 8, !tbaa !5
  %20 = tail call i32 @true_regnum(ptr noundef %19) #30
  %21 = icmp eq i32 %5, %8
  %22 = icmp eq i32 %5, %20
  %23 = select i1 %21, i1 true, i1 %22
  br i1 %23, label %24, label %357

24:                                               ; preds = %17
  %25 = getelementptr inbounds %struct.rtx_def, ptr %1, i64 0, i32 1, i32 0, i32 1
  %26 = load ptr, ptr %25, align 8, !tbaa !16
  %27 = getelementptr inbounds %struct.basic_block_def, ptr %26, i64 0, i32 7
  %28 = load ptr, ptr %27, align 8, !tbaa !16
  %29 = load ptr, ptr %28, align 8, !tbaa !189
  %30 = icmp eq ptr %29, %1
  br i1 %30, label %93, label %31

31:                                               ; preds = %24, %84
  %32 = phi ptr [ %85, %84 ], [ %29, %24 ]
  %33 = phi ptr [ %36, %84 ], [ %1, %24 ]
  %34 = phi i32 [ %86, %84 ], [ 0, %24 ]
  %35 = getelementptr inbounds %struct.rtx_def, ptr %33, i64 0, i32 1, i32 0, i32 0, i64 1
  %36 = load ptr, ptr %35, align 8, !tbaa !16
  %37 = icmp ne ptr %36, null
  %38 = icmp slt i32 %34, 12
  %39 = select i1 %37, i1 %38, i1 false
  br i1 %39, label %40, label %88

40:                                               ; preds = %31
  %41 = load i32, ptr %36, align 8
  %42 = and i32 %41, 65535
  %43 = add nsw i32 %42, -7
  %44 = icmp ult i32 %43, 4
  br i1 %44, label %45, label %84

45:                                               ; preds = %40
  %46 = add nsw i32 %34, 1
  %47 = load ptr, ptr @df, align 8, !tbaa !5
  %48 = getelementptr inbounds %struct.df, ptr %47, i64 0, i32 10
  %49 = load ptr, ptr %48, align 8, !tbaa !191
  %50 = getelementptr inbounds %struct.rtx_def, ptr %36, i64 0, i32 1
  %51 = load i32, ptr %50, align 8, !tbaa !16
  %52 = sext i32 %51 to i64
  %53 = getelementptr inbounds ptr, ptr %49, i64 %52
  %54 = load ptr, ptr %53, align 8, !tbaa !5
  %55 = getelementptr inbounds %struct.df_insn_info, ptr %54, i64 0, i32 1
  %56 = load ptr, ptr %55, align 8, !tbaa !194
  %57 = load ptr, ptr %56, align 8, !tbaa !5
  %58 = icmp eq ptr %57, null
  br i1 %58, label %84, label %59

59:                                               ; preds = %45, %77
  %60 = phi ptr [ %79, %77 ], [ %57, %45 ]
  %61 = phi ptr [ %78, %77 ], [ %56, %45 ]
  %62 = load i32, ptr %60, align 8
  %63 = and i32 %62, 65280
  %64 = icmp ne i32 %63, 0
  %65 = and i32 %62, 255
  %66 = icmp eq i32 %65, 1
  %67 = or i1 %64, %66
  br i1 %67, label %77, label %68

68:                                               ; preds = %59
  %69 = getelementptr inbounds %struct.df_base_ref, ptr %60, i64 0, i32 6
  %70 = load i32, ptr %69, align 8, !tbaa !16
  %71 = icmp eq i32 %70, %8
  %72 = icmp eq i32 %70, %20
  %73 = or i1 %71, %72
  br i1 %73, label %74, label %77

74:                                               ; preds = %68
  %75 = tail call i32 @get_attr_type(ptr noundef nonnull %36) #30
  %76 = icmp eq i32 %75, 7
  br i1 %76, label %77, label %175

77:                                               ; preds = %74, %68, %59
  %78 = getelementptr inbounds ptr, ptr %61, i64 1
  %79 = load ptr, ptr %78, align 8, !tbaa !5
  %80 = icmp eq ptr %79, null
  br i1 %80, label %81, label %59, !llvm.loop !196

81:                                               ; preds = %77
  %82 = load ptr, ptr %27, align 8, !tbaa !16
  %83 = load ptr, ptr %82, align 8, !tbaa !189
  br label %84

84:                                               ; preds = %81, %45, %40
  %85 = phi ptr [ %32, %40 ], [ %32, %45 ], [ %83, %81 ]
  %86 = phi i32 [ %34, %40 ], [ %46, %45 ], [ %46, %81 ]
  %87 = icmp eq ptr %36, %85
  br i1 %87, label %88, label %31, !llvm.loop !197

88:                                               ; preds = %84, %31
  %89 = phi i32 [ %34, %31 ], [ %86, %84 ]
  %90 = icmp slt i32 %89, 12
  br i1 %90, label %91, label %174

91:                                               ; preds = %88
  %92 = icmp eq ptr %26, null
  br i1 %92, label %173, label %93

93:                                               ; preds = %91, %24
  %94 = phi i32 [ %89, %91 ], [ 0, %24 ]
  br label %95

95:                                               ; preds = %114, %93
  %96 = phi i32 [ %115, %114 ], [ 0, %93 ]
  %97 = load ptr, ptr %26, align 8, !tbaa !5
  %98 = icmp eq ptr %97, null
  br i1 %98, label %101, label %99

99:                                               ; preds = %95
  %100 = load i32, ptr %97, align 8, !tbaa !198
  br label %101

101:                                              ; preds = %99, %95
  %102 = phi i32 [ %100, %99 ], [ 0, %95 ]
  %103 = icmp eq i32 %102, %96
  br i1 %103, label %174, label %104

104:                                              ; preds = %101
  %105 = zext i32 %96 to i64
  %106 = getelementptr inbounds %struct.VEC_edge_base, ptr %97, i64 0, i32 2, i64 %105
  %107 = load ptr, ptr %106, align 8, !tbaa !5
  %108 = load ptr, ptr %107, align 8, !tbaa !200
  %109 = icmp eq ptr %108, %26
  br i1 %109, label %116, label %110

110:                                              ; preds = %104
  %111 = load i32, ptr %97, align 8, !tbaa !198
  %112 = icmp ult i32 %96, %111
  br i1 %112, label %114, label %113

113:                                              ; preds = %110
  tail call void @fancy_abort(ptr noundef nonnull @.str.438, i32 noundef 738, ptr noundef nonnull @.str.131) #30
  br label %114

114:                                              ; preds = %113, %110
  %115 = add i32 %96, 1
  br label %95, !llvm.loop !202

116:                                              ; preds = %104
  %117 = load ptr, ptr %27, align 8, !tbaa !16
  %118 = getelementptr inbounds %struct.rtl_bb_info, ptr %117, i64 0, i32 1
  %119 = load ptr, ptr %118, align 8, !tbaa !16
  %120 = icmp eq ptr %119, null
  br i1 %120, label %174, label %121

121:                                              ; preds = %116, %168
  %122 = phi ptr [ %171, %168 ], [ %119, %116 ]
  %123 = phi i32 [ %169, %168 ], [ %94, %116 ]
  %124 = icmp ne ptr %122, %1
  %125 = icmp slt i32 %123, 12
  %126 = select i1 %124, i1 %125, i1 false
  br i1 %126, label %127, label %174

127:                                              ; preds = %121
  %128 = load i32, ptr %122, align 8
  %129 = and i32 %128, 65535
  %130 = add nsw i32 %129, -7
  %131 = icmp ult i32 %130, 4
  br i1 %131, label %132, label %168

132:                                              ; preds = %127
  %133 = add nsw i32 %123, 1
  %134 = load ptr, ptr @df, align 8, !tbaa !5
  %135 = getelementptr inbounds %struct.df, ptr %134, i64 0, i32 10
  %136 = load ptr, ptr %135, align 8, !tbaa !191
  %137 = getelementptr inbounds %struct.rtx_def, ptr %122, i64 0, i32 1
  %138 = load i32, ptr %137, align 8, !tbaa !16
  %139 = sext i32 %138 to i64
  %140 = getelementptr inbounds ptr, ptr %136, i64 %139
  %141 = load ptr, ptr %140, align 8, !tbaa !5
  %142 = getelementptr inbounds %struct.df_insn_info, ptr %141, i64 0, i32 1
  %143 = load ptr, ptr %142, align 8, !tbaa !194
  %144 = load ptr, ptr %143, align 8, !tbaa !5
  %145 = icmp eq ptr %144, null
  br i1 %145, label %168, label %146

146:                                              ; preds = %132, %164
  %147 = phi ptr [ %166, %164 ], [ %144, %132 ]
  %148 = phi ptr [ %165, %164 ], [ %143, %132 ]
  %149 = load i32, ptr %147, align 8
  %150 = and i32 %149, 65280
  %151 = icmp ne i32 %150, 0
  %152 = and i32 %149, 255
  %153 = icmp eq i32 %152, 1
  %154 = or i1 %151, %153
  br i1 %154, label %164, label %155

155:                                              ; preds = %146
  %156 = getelementptr inbounds %struct.df_base_ref, ptr %147, i64 0, i32 6
  %157 = load i32, ptr %156, align 8, !tbaa !16
  %158 = icmp eq i32 %157, %8
  %159 = icmp eq i32 %157, %20
  %160 = or i1 %158, %159
  br i1 %160, label %161, label %164

161:                                              ; preds = %155
  %162 = tail call i32 @get_attr_type(ptr noundef nonnull %122) #30
  %163 = icmp eq i32 %162, 7
  br i1 %163, label %164, label %175

164:                                              ; preds = %161, %155, %146
  %165 = getelementptr inbounds ptr, ptr %148, i64 1
  %166 = load ptr, ptr %165, align 8, !tbaa !5
  %167 = icmp eq ptr %166, null
  br i1 %167, label %168, label %146, !llvm.loop !203

168:                                              ; preds = %164, %132, %127
  %169 = phi i32 [ %123, %127 ], [ %133, %132 ], [ %133, %164 ]
  %170 = getelementptr inbounds %struct.rtx_def, ptr %122, i64 0, i32 1, i32 0, i32 0, i64 1
  %171 = load ptr, ptr %170, align 8, !tbaa !16
  %172 = icmp eq ptr %171, null
  br i1 %172, label %174, label %121, !llvm.loop !204

173:                                              ; preds = %91
  tail call void @fancy_abort(ptr noundef nonnull @.str.438, i32 noundef 687, ptr noundef nonnull @.str.131) #30
  br label %174

174:                                              ; preds = %101, %168, %121, %88, %116, %173
  tail call void @extract_insn_cached(ptr noundef %1) #30
  br label %357

175:                                              ; preds = %74, %161
  %176 = phi i32 [ %133, %161 ], [ %46, %74 ]
  tail call void @extract_insn_cached(ptr noundef %1) #30
  %177 = icmp slt i32 %176, 1
  br i1 %177, label %357, label %178

178:                                              ; preds = %175
  %179 = load ptr, ptr %25, align 8, !tbaa !16
  %180 = getelementptr inbounds %struct.basic_block_def, ptr %179, i64 0, i32 7
  %181 = load ptr, ptr %180, align 8, !tbaa !16
  %182 = getelementptr inbounds %struct.rtl_bb_info, ptr %181, i64 0, i32 1
  %183 = load ptr, ptr %182, align 8, !tbaa !205
  %184 = icmp eq ptr %183, %1
  br i1 %184, label %255, label %185

185:                                              ; preds = %178
  %186 = load ptr, ptr @df, align 8
  %187 = getelementptr inbounds %struct.df, ptr %186, i64 0, i32 10
  br label %188

188:                                              ; preds = %249, %185
  %189 = phi ptr [ %192, %249 ], [ %1, %185 ]
  %190 = phi i32 [ %250, %249 ], [ 0, %185 ]
  %191 = getelementptr inbounds %struct.rtx_def, ptr %189, i64 0, i32 1, i32 0, i32 0, i64 2
  %192 = load ptr, ptr %191, align 8, !tbaa !16
  %193 = icmp ne ptr %192, null
  %194 = icmp slt i32 %190, 12
  %195 = select i1 %193, i1 %194, i1 false
  br i1 %195, label %196, label %252

196:                                              ; preds = %188
  %197 = load i32, ptr %192, align 8
  %198 = and i32 %197, 65535
  %199 = add nsw i32 %198, -7
  %200 = icmp ult i32 %199, 4
  br i1 %200, label %201, label %249

201:                                              ; preds = %196
  %202 = add nsw i32 %190, 1
  %203 = load ptr, ptr %187, align 8, !tbaa !191
  %204 = getelementptr inbounds %struct.rtx_def, ptr %192, i64 0, i32 1
  %205 = load i32, ptr %204, align 8, !tbaa !16
  %206 = sext i32 %205 to i64
  %207 = getelementptr inbounds ptr, ptr %203, i64 %206
  %208 = load ptr, ptr %207, align 8, !tbaa !5
  %209 = getelementptr inbounds %struct.df_insn_info, ptr %208, i64 0, i32 2
  %210 = load ptr, ptr %209, align 8, !tbaa !206
  %211 = load ptr, ptr %210, align 8, !tbaa !5
  %212 = icmp eq ptr %211, null
  br i1 %212, label %227, label %213

213:                                              ; preds = %201, %223
  %214 = phi ptr [ %225, %223 ], [ %211, %201 ]
  %215 = phi ptr [ %224, %223 ], [ %210, %201 ]
  %216 = load i32, ptr %214, align 8
  %217 = and i32 %216, 65024
  %218 = icmp eq i32 %217, 512
  br i1 %218, label %219, label %223

219:                                              ; preds = %213
  %220 = getelementptr inbounds %struct.df_base_ref, ptr %214, i64 0, i32 6
  %221 = load i32, ptr %220, align 8, !tbaa !16
  %222 = icmp eq i32 %221, %5
  br i1 %222, label %351, label %223

223:                                              ; preds = %219, %213
  %224 = getelementptr inbounds ptr, ptr %215, i64 1
  %225 = load ptr, ptr %224, align 8, !tbaa !5
  %226 = icmp eq ptr %225, null
  br i1 %226, label %227, label %213, !llvm.loop !207

227:                                              ; preds = %223, %201
  %228 = getelementptr inbounds %struct.df_insn_info, ptr %208, i64 0, i32 1
  %229 = load ptr, ptr %228, align 8, !tbaa !194
  %230 = load ptr, ptr %229, align 8, !tbaa !5
  %231 = icmp eq ptr %230, null
  br i1 %231, label %249, label %232

232:                                              ; preds = %227, %245
  %233 = phi ptr [ %247, %245 ], [ %230, %227 ]
  %234 = phi ptr [ %246, %245 ], [ %229, %227 ]
  %235 = load i32, ptr %233, align 8
  %236 = and i32 %235, 65280
  %237 = icmp ne i32 %236, 0
  %238 = and i32 %235, 255
  %239 = icmp eq i32 %238, 1
  %240 = or i1 %237, %239
  br i1 %240, label %245, label %241

241:                                              ; preds = %232
  %242 = getelementptr inbounds %struct.df_base_ref, ptr %233, i64 0, i32 6
  %243 = load i32, ptr %242, align 8, !tbaa !16
  %244 = icmp eq i32 %243, %5
  br i1 %244, label %351, label %245

245:                                              ; preds = %241, %232
  %246 = getelementptr inbounds ptr, ptr %234, i64 1
  %247 = load ptr, ptr %246, align 8, !tbaa !5
  %248 = icmp eq ptr %247, null
  br i1 %248, label %249, label %232, !llvm.loop !208

249:                                              ; preds = %245, %227, %196
  %250 = phi i32 [ %190, %196 ], [ %202, %227 ], [ %202, %245 ]
  %251 = icmp eq ptr %192, %183
  br i1 %251, label %252, label %188, !llvm.loop !209

252:                                              ; preds = %249, %188
  %253 = phi i32 [ %190, %188 ], [ %250, %249 ]
  %254 = icmp slt i32 %253, 12
  br i1 %254, label %255, label %351

255:                                              ; preds = %252, %178
  %256 = phi i32 [ %253, %252 ], [ 0, %178 ]
  %257 = getelementptr inbounds %struct.basic_block_def, ptr %179, i64 0, i32 1
  br label %258

258:                                              ; preds = %278, %255
  %259 = phi i32 [ 0, %255 ], [ %279, %278 ]
  %260 = load ptr, ptr %257, align 8, !tbaa !5
  %261 = icmp eq ptr %260, null
  br i1 %261, label %264, label %262

262:                                              ; preds = %258
  %263 = load i32, ptr %260, align 8, !tbaa !198
  br label %264

264:                                              ; preds = %262, %258
  %265 = phi i32 [ %263, %262 ], [ 0, %258 ]
  %266 = icmp eq i32 %265, %259
  br i1 %266, label %351, label %267

267:                                              ; preds = %264
  %268 = zext i32 %259 to i64
  %269 = getelementptr inbounds %struct.VEC_edge_base, ptr %260, i64 0, i32 2, i64 %268
  %270 = load ptr, ptr %269, align 8, !tbaa !5
  %271 = getelementptr inbounds %struct.edge_def, ptr %270, i64 0, i32 1
  %272 = load ptr, ptr %271, align 8, !tbaa !210
  %273 = icmp eq ptr %272, %179
  br i1 %273, label %280, label %274

274:                                              ; preds = %267
  %275 = load i32, ptr %260, align 8, !tbaa !198
  %276 = icmp ult i32 %259, %275
  br i1 %276, label %278, label %277

277:                                              ; preds = %274
  tail call void @fancy_abort(ptr noundef nonnull @.str.438, i32 noundef 738, ptr noundef nonnull @.str.131) #30
  br label %278

278:                                              ; preds = %277, %274
  %279 = add i32 %259, 1
  br label %258, !llvm.loop !211

280:                                              ; preds = %267
  %281 = load ptr, ptr %180, align 8, !tbaa !16
  %282 = load ptr, ptr %281, align 8, !tbaa !16
  %283 = icmp eq ptr %282, null
  br i1 %283, label %351, label %284

284:                                              ; preds = %280
  %285 = load ptr, ptr @df, align 8
  %286 = getelementptr inbounds %struct.df, ptr %285, i64 0, i32 10
  br label %287

287:                                              ; preds = %346, %284
  %288 = phi ptr [ %282, %284 ], [ %349, %346 ]
  %289 = phi i32 [ %256, %284 ], [ %347, %346 ]
  %290 = icmp ne ptr %288, %1
  %291 = icmp slt i32 %289, 12
  %292 = select i1 %290, i1 %291, i1 false
  br i1 %292, label %293, label %351

293:                                              ; preds = %287
  %294 = load i32, ptr %288, align 8
  %295 = and i32 %294, 65535
  %296 = add nsw i32 %295, -7
  %297 = icmp ult i32 %296, 4
  br i1 %297, label %298, label %346

298:                                              ; preds = %293
  %299 = add nsw i32 %289, 1
  %300 = load ptr, ptr %286, align 8, !tbaa !191
  %301 = getelementptr inbounds %struct.rtx_def, ptr %288, i64 0, i32 1
  %302 = load i32, ptr %301, align 8, !tbaa !16
  %303 = sext i32 %302 to i64
  %304 = getelementptr inbounds ptr, ptr %300, i64 %303
  %305 = load ptr, ptr %304, align 8, !tbaa !5
  %306 = getelementptr inbounds %struct.df_insn_info, ptr %305, i64 0, i32 2
  %307 = load ptr, ptr %306, align 8, !tbaa !206
  %308 = load ptr, ptr %307, align 8, !tbaa !5
  %309 = icmp eq ptr %308, null
  br i1 %309, label %324, label %310

310:                                              ; preds = %298, %320
  %311 = phi ptr [ %322, %320 ], [ %308, %298 ]
  %312 = phi ptr [ %321, %320 ], [ %307, %298 ]
  %313 = load i32, ptr %311, align 8
  %314 = and i32 %313, 65024
  %315 = icmp eq i32 %314, 512
  br i1 %315, label %316, label %320

316:                                              ; preds = %310
  %317 = getelementptr inbounds %struct.df_base_ref, ptr %311, i64 0, i32 6
  %318 = load i32, ptr %317, align 8, !tbaa !16
  %319 = icmp eq i32 %318, %5
  br i1 %319, label %351, label %320

320:                                              ; preds = %316, %310
  %321 = getelementptr inbounds ptr, ptr %312, i64 1
  %322 = load ptr, ptr %321, align 8, !tbaa !5
  %323 = icmp eq ptr %322, null
  br i1 %323, label %324, label %310, !llvm.loop !212

324:                                              ; preds = %320, %298
  %325 = getelementptr inbounds %struct.df_insn_info, ptr %305, i64 0, i32 1
  %326 = load ptr, ptr %325, align 8, !tbaa !194
  %327 = load ptr, ptr %326, align 8, !tbaa !5
  %328 = icmp eq ptr %327, null
  br i1 %328, label %346, label %329

329:                                              ; preds = %324, %342
  %330 = phi ptr [ %344, %342 ], [ %327, %324 ]
  %331 = phi ptr [ %343, %342 ], [ %326, %324 ]
  %332 = load i32, ptr %330, align 8
  %333 = and i32 %332, 65280
  %334 = icmp ne i32 %333, 0
  %335 = and i32 %332, 255
  %336 = icmp eq i32 %335, 1
  %337 = or i1 %334, %336
  br i1 %337, label %342, label %338

338:                                              ; preds = %329
  %339 = getelementptr inbounds %struct.df_base_ref, ptr %330, i64 0, i32 6
  %340 = load i32, ptr %339, align 8, !tbaa !16
  %341 = icmp eq i32 %340, %5
  br i1 %341, label %351, label %342

342:                                              ; preds = %338, %329
  %343 = getelementptr inbounds ptr, ptr %331, i64 1
  %344 = load ptr, ptr %343, align 8, !tbaa !5
  %345 = icmp eq ptr %344, null
  br i1 %345, label %346, label %329, !llvm.loop !213

346:                                              ; preds = %342, %324, %293
  %347 = phi i32 [ %289, %293 ], [ %299, %324 ], [ %299, %342 ]
  %348 = getelementptr inbounds %struct.rtx_def, ptr %288, i64 0, i32 1, i32 0, i32 0, i64 2
  %349 = load ptr, ptr %348, align 8, !tbaa !16
  %350 = icmp eq ptr %349, null
  br i1 %350, label %351, label %287, !llvm.loop !214

351:                                              ; preds = %219, %241, %264, %287, %346, %316, %338, %252, %280
  %352 = phi i32 [ -1, %252 ], [ -1, %280 ], [ -1, %338 ], [ %299, %316 ], [ -1, %346 ], [ -1, %287 ], [ -1, %264 ], [ -1, %241 ], [ %202, %219 ]
  %353 = icmp sgt i32 %352, 0
  %354 = add nuw nsw i32 %176, 2
  %355 = icmp sge i32 %354, %352
  %356 = select i1 %353, i1 %355, i1 false
  br label %357

357:                                              ; preds = %174, %351, %175, %17, %15
  %358 = phi i1 [ %16, %15 ], [ true, %17 ], [ true, %175 ], [ %356, %351 ], [ true, %174 ]
  %359 = zext i1 %358 to i8
  ret i8 %359
}

declare i32 @true_regnum(ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define dso_local zeroext i8 @ix86_dep_by_shift_count(ptr nocapture noundef readonly %0, ptr nocapture noundef readonly %1) local_unnamed_addr #9 {
  %3 = getelementptr inbounds %struct.rtx_def, ptr %0, i64 1
  %4 = load ptr, ptr %3, align 8, !tbaa !16
  %5 = getelementptr inbounds %struct.rtx_def, ptr %1, i64 1
  %6 = load ptr, ptr %5, align 8, !tbaa !16
  %7 = tail call fastcc zeroext i8 @ix86_dep_by_shift_count_body(ptr noundef %4, ptr noundef %6), !range !66
  ret i8 %7
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc zeroext i8 @ix86_dep_by_shift_count_body(ptr nocapture noundef readonly %0, ptr nocapture noundef readonly %1) unnamed_addr #9 {
  %3 = load i32, ptr %0, align 8
  %4 = trunc i32 %3 to i16
  switch i16 %4, label %68 [
    i16 23, label %5
    i16 15, label %13
  ]

5:                                                ; preds = %2
  %6 = getelementptr inbounds %struct.rtx_def, ptr %0, i64 0, i32 1
  %7 = load ptr, ptr %6, align 8, !tbaa !16
  %8 = icmp eq ptr %7, null
  br i1 %8, label %68, label %9

9:                                                ; preds = %5
  %10 = load i32, ptr %7, align 8
  %11 = and i32 %10, 65535
  %12 = icmp eq i32 %11, 37
  br i1 %12, label %29, label %68

13:                                               ; preds = %2
  %14 = getelementptr inbounds %struct.rtx_def, ptr %0, i64 0, i32 1
  %15 = load ptr, ptr %14, align 8, !tbaa !16
  %16 = load i32, ptr %15, align 8, !tbaa !107
  %17 = zext i32 %16 to i64
  br label %18

18:                                               ; preds = %22, %13
  %19 = phi i64 [ %23, %22 ], [ %17, %13 ]
  %20 = trunc i64 %19 to i32
  %21 = icmp sgt i32 %20, 0
  br i1 %21, label %22, label %68

22:                                               ; preds = %18
  %23 = add nsw i64 %19, -1
  %24 = load ptr, ptr %14, align 8, !tbaa !16
  %25 = getelementptr inbounds %struct.rtvec_def, ptr %24, i64 0, i32 1, i64 %23
  %26 = load ptr, ptr %25, align 8, !tbaa !5
  %27 = tail call fastcc zeroext i8 @ix86_dep_by_shift_count_body(ptr noundef %26, ptr noundef %1), !range !66
  %28 = icmp eq i8 %27, 0
  br i1 %28, label %18, label %68, !llvm.loop !215

29:                                               ; preds = %9
  %30 = load i32, ptr %1, align 8
  %31 = trunc i32 %30 to i16
  switch i16 %31, label %68 [
    i16 23, label %32
    i16 15, label %36
  ]

32:                                               ; preds = %29
  %33 = getelementptr inbounds %struct.rtx_def, ptr %1, i64 0, i32 1, i32 0, i32 0, i64 1
  %34 = load ptr, ptr %33, align 8, !tbaa !16
  %35 = icmp eq ptr %34, null
  br i1 %35, label %68, label %52

36:                                               ; preds = %29
  %37 = getelementptr inbounds %struct.rtx_def, ptr %1, i64 0, i32 1
  %38 = load ptr, ptr %37, align 8, !tbaa !16
  %39 = load i32, ptr %38, align 8, !tbaa !107
  %40 = zext i32 %39 to i64
  br label %41

41:                                               ; preds = %45, %36
  %42 = phi i64 [ %46, %45 ], [ %40, %36 ]
  %43 = trunc i64 %42 to i32
  %44 = icmp sgt i32 %43, 0
  br i1 %44, label %45, label %68

45:                                               ; preds = %41
  %46 = add nsw i64 %42, -1
  %47 = load ptr, ptr %37, align 8, !tbaa !16
  %48 = getelementptr inbounds %struct.rtvec_def, ptr %47, i64 0, i32 1, i64 %46
  %49 = load ptr, ptr %48, align 8, !tbaa !5
  %50 = tail call fastcc zeroext i8 @ix86_dep_by_shift_count_body(ptr noundef nonnull %0, ptr noundef %49), !range !66
  %51 = icmp eq i8 %50, 0
  br i1 %51, label %41, label %68, !llvm.loop !216

52:                                               ; preds = %32
  %53 = load i32, ptr %34, align 8
  %54 = and i32 %53, 65535
  %55 = add nsw i32 %54, -65
  %56 = icmp ult i32 %55, 5
  br i1 %56, label %57, label %68

57:                                               ; preds = %52
  %58 = getelementptr inbounds %struct.rtx_def, ptr %34, i64 0, i32 1, i32 0, i32 0, i64 1
  %59 = load ptr, ptr %58, align 8, !tbaa !16
  %60 = load i32, ptr %59, align 8
  %61 = and i32 %60, 65535
  %62 = icmp eq i32 %61, 37
  br i1 %62, label %63, label %67

63:                                               ; preds = %57
  %64 = tail call i32 @true_regnum(ptr noundef nonnull %7) #30
  %65 = tail call i32 @true_regnum(ptr noundef nonnull %59) #30
  %66 = icmp eq i32 %64, %65
  br i1 %66, label %68, label %67

67:                                               ; preds = %63, %57
  br label %68

68:                                               ; preds = %18, %22, %41, %45, %52, %32, %67, %63, %29, %2, %5, %9
  %69 = phi i8 [ 0, %9 ], [ 0, %5 ], [ 0, %2 ], [ 0, %29 ], [ 1, %63 ], [ 0, %67 ], [ 0, %52 ], [ 0, %32 ], [ 0, %41 ], [ 1, %45 ], [ 0, %18 ], [ 1, %22 ]
  ret i8 %69
}

; Function Attrs: nounwind sspstrong uwtable
define dso_local i32 @ix86_unary_operator_ok(i32 noundef %0, i32 noundef %1, ptr nocapture noundef readonly %2) local_unnamed_addr #9 {
  %4 = load ptr, ptr %2, align 8, !tbaa !5
  %5 = load i32, ptr %4, align 8
  %6 = and i32 %5, 65535
  %7 = icmp eq i32 %6, 43
  %8 = getelementptr inbounds ptr, ptr %2, i64 1
  %9 = load ptr, ptr %8, align 8, !tbaa !5
  br i1 %7, label %14, label %10

10:                                               ; preds = %3
  %11 = load i32, ptr %9, align 8
  %12 = and i32 %11, 65535
  %13 = icmp eq i32 %12, 43
  br i1 %13, label %14, label %17

14:                                               ; preds = %3, %10
  %15 = tail call i32 @rtx_equal_p(ptr noundef nonnull %4, ptr noundef %9) #30
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %18, label %17

17:                                               ; preds = %14, %10
  br label %18

18:                                               ; preds = %14, %17
  %19 = phi i32 [ 1, %17 ], [ 0, %14 ]
  ret i32 %19
}

; Function Attrs: nounwind sspstrong uwtable
define dso_local zeroext i8 @ix86_vec_interleave_v2df_operator_ok(ptr nocapture noundef readonly %0, i8 noundef zeroext %1) local_unnamed_addr #9 {
  %3 = load ptr, ptr %0, align 8, !tbaa !5
  %4 = load i32, ptr %3, align 8
  %5 = and i32 %4, 65535
  %6 = icmp eq i32 %5, 43
  br i1 %6, label %7, label %14

7:                                                ; preds = %2
  %8 = zext i8 %1 to i64
  %9 = add nuw nsw i64 %8, 1
  %10 = getelementptr inbounds ptr, ptr %0, i64 %9
  %11 = load ptr, ptr %10, align 8, !tbaa !5
  %12 = tail call i32 @rtx_equal_p(ptr noundef nonnull %3, ptr noundef %11) #30
  %13 = trunc i32 %12 to i8
  br label %34

14:                                               ; preds = %2
  %15 = getelementptr inbounds ptr, ptr %0, i64 1
  %16 = load ptr, ptr %15, align 8, !tbaa !5
  %17 = load i32, ptr %16, align 8
  %18 = and i32 %17, 65535
  %19 = icmp eq i32 %18, 43
  br i1 %19, label %20, label %34

20:                                               ; preds = %14
  %21 = getelementptr inbounds ptr, ptr %0, i64 2
  %22 = load ptr, ptr %21, align 8, !tbaa !5
  %23 = load i32, ptr %22, align 8
  %24 = and i32 %23, 65535
  %25 = icmp eq i32 %24, 43
  br i1 %25, label %26, label %34

26:                                               ; preds = %20
  %27 = load i32, ptr @ix86_isa_flags, align 4, !tbaa !20
  %28 = and i32 %27, 262144
  %29 = icmp eq i32 %28, 0
  br i1 %29, label %34, label %30

30:                                               ; preds = %26
  %31 = tail call i32 @rtx_equal_p(ptr noundef nonnull %16, ptr noundef nonnull %22) #30
  %32 = icmp ne i32 %31, 0
  %33 = zext i1 %32 to i8
  br label %34

34:                                               ; preds = %14, %20, %26, %30, %7
  %35 = phi i8 [ %13, %7 ], [ 0, %26 ], [ %33, %30 ], [ 1, %20 ], [ 1, %14 ]
  ret i8 %35
}

; Function Attrs: nounwind sspstrong uwtable
define dso_local void @ix86_split_convert_uns_si_sse(ptr nocapture noundef readonly %0) local_unnamed_addr #9 {
  %2 = getelementptr inbounds ptr, ptr %0, i64 1
  %3 = load ptr, ptr %2, align 8, !tbaa !5
  %4 = getelementptr inbounds ptr, ptr %0, i64 2
  %5 = load ptr, ptr %4, align 8, !tbaa !5
  %6 = getelementptr inbounds ptr, ptr %0, i64 3
  %7 = load ptr, ptr %6, align 8, !tbaa !5
  %8 = getelementptr inbounds ptr, ptr %0, i64 4
  %9 = load ptr, ptr %8, align 8, !tbaa !5
  %10 = load i32, ptr %3, align 8
  %11 = lshr i32 %10, 16
  %12 = and i32 %11, 255
  %13 = load ptr, ptr %0, align 8, !tbaa !5
  %14 = getelementptr i8, ptr %13, i64 8
  %15 = load i32, ptr %14, align 8, !tbaa !16
  %16 = tail call ptr @gen_rtx_REG(i32 noundef %12, i32 noundef %15) #30
  %17 = load i32, ptr %7, align 8
  %18 = and i32 %17, 65535
  %19 = icmp eq i32 %18, 43
  br i1 %19, label %20, label %28

20:                                               ; preds = %1
  %21 = icmp eq i32 %12, 79
  br i1 %21, label %22, label %25

22:                                               ; preds = %20
  %23 = load ptr, ptr getelementptr inbounds ([3 x [87 x ptr]], ptr @const_tiny_rtx, i64 0, i64 0, i64 79), align 8, !tbaa !5
  %24 = tail call ptr @gen_vec_setv4sf_0(ptr noundef %16, ptr noundef %23, ptr noundef nonnull %7) #30
  br label %41

25:                                               ; preds = %20
  %26 = load ptr, ptr getelementptr inbounds ([3 x [87 x ptr]], ptr @const_tiny_rtx, i64 0, i64 0, i64 80), align 16, !tbaa !5
  %27 = tail call ptr @gen_sse2_loadlpd(ptr noundef %16, ptr noundef %26, ptr noundef nonnull %7) #30
  br label %41

28:                                               ; preds = %1
  %29 = getelementptr i8, ptr %7, i64 8
  %30 = load i32, ptr %29, align 8, !tbaa !16
  %31 = tail call ptr @gen_rtx_REG(i32 noundef %12, i32 noundef %30) #30
  %32 = zext i32 %12 to i64
  %33 = getelementptr inbounds [87 x ptr], ptr @const_tiny_rtx, i64 0, i64 %32
  %34 = load ptr, ptr %33, align 8, !tbaa !5
  %35 = tail call ptr @emit_move_insn(ptr noundef %16, ptr noundef %34) #30
  %36 = icmp eq i32 %12, 79
  br i1 %36, label %37, label %39

37:                                               ; preds = %28
  %38 = tail call ptr @gen_sse_movss(ptr noundef %16, ptr noundef %16, ptr noundef %31) #30
  br label %41

39:                                               ; preds = %28
  %40 = tail call ptr @gen_sse2_movsd(ptr noundef %16, ptr noundef %16, ptr noundef %31) #30
  br label %41

41:                                               ; preds = %37, %39, %22, %25
  %42 = phi ptr [ %38, %37 ], [ %40, %39 ], [ %24, %22 ], [ %27, %25 ]
  %43 = tail call ptr @emit_insn(ptr noundef %42) #30
  %44 = tail call ptr @emit_move_insn(ptr noundef nonnull %3, ptr noundef %9) #30
  %45 = load i32, ptr %9, align 8
  %46 = and i32 %45, 65535
  %47 = icmp eq i32 %46, 43
  %48 = select i1 %47, ptr %3, ptr %9
  %49 = tail call ptr @emit_move_insn(ptr noundef %5, ptr noundef nonnull %48) #30
  %50 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 84, i32 noundef %12, ptr noundef nonnull %3, ptr noundef %16) #30
  %51 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 23, i32 noundef 0, ptr noundef nonnull %3, ptr noundef %50) #30
  %52 = tail call ptr @emit_insn(ptr noundef %51) #30
  %53 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 61, i32 noundef %12, ptr noundef %5, ptr noundef nonnull %3) #30
  %54 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 23, i32 noundef 0, ptr noundef %5, ptr noundef %53) #30
  %55 = tail call ptr @emit_insn(ptr noundef %54) #30
  %56 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 50, i32 noundef %12, ptr noundef %16, ptr noundef %5) #30
  %57 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 23, i32 noundef 0, ptr noundef %16, ptr noundef %56) #30
  %58 = tail call ptr @emit_insn(ptr noundef %57) #30
  %59 = getelementptr i8, ptr %3, i64 8
  %60 = load i32, ptr %59, align 8, !tbaa !16
  %61 = tail call ptr @gen_rtx_REG(i32 noundef 65, i32 noundef %60) #30
  %62 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef 31) #30
  %63 = tail call ptr @gen_ashlv4si3(ptr noundef %61, ptr noundef %61, ptr noundef %62) #30
  %64 = tail call ptr @emit_insn(ptr noundef %63) #30
  %65 = getelementptr i8, ptr %16, i64 8
  %66 = load i32, ptr %65, align 8, !tbaa !16
  %67 = tail call ptr @gen_rtx_REG(i32 noundef 65, i32 noundef %66) #30
  %68 = icmp eq i32 %12, 79
  br i1 %68, label %69, label %71

69:                                               ; preds = %41
  %70 = tail call ptr @gen_sse2_cvttps2dq(ptr noundef %67, ptr noundef nonnull %16) #30
  br label %73

71:                                               ; preds = %41
  %72 = tail call ptr @gen_sse2_cvttpd2dq(ptr noundef %67, ptr noundef nonnull %16) #30
  br label %73

73:                                               ; preds = %71, %69
  %74 = phi ptr [ %72, %71 ], [ %70, %69 ]
  %75 = tail call ptr @emit_insn(ptr noundef %74) #30
  %76 = tail call ptr @gen_xorv4si3(ptr noundef %67, ptr noundef %67, ptr noundef %61) #30
  %77 = tail call ptr @emit_insn(ptr noundef %76) #30
  ret void
}

declare ptr @gen_vec_setv4sf_0(ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

declare ptr @gen_sse_movss(ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

declare ptr @gen_sse2_movsd(ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

declare ptr @gen_ashlv4si3(ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

declare ptr @gen_sse2_cvttps2dq(ptr noundef, ptr noundef) local_unnamed_addr #3

declare ptr @gen_sse2_cvttpd2dq(ptr noundef, ptr noundef) local_unnamed_addr #3

declare ptr @gen_xorv4si3(ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define dso_local void @ix86_expand_convert_uns_didf_sse(ptr noundef %0, ptr noundef %1) local_unnamed_addr #9 {
  %3 = alloca %struct.real_value, align 8
  %4 = alloca %struct.real_value, align 8
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %3) #30
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %4) #30
  %5 = tail call ptr @gen_reg_rtx(i32 noundef 65) #30
  %6 = load i8, ptr getelementptr inbounds ([62 x i8], ptr @ix86_tune_features, i64 0, i64 42), align 2, !tbaa !16
  %7 = icmp eq i8 %6, 0
  br i1 %7, label %11, label %8

8:                                                ; preds = %2
  %9 = tail call ptr @gen_movdi_to_sse(ptr noundef %5, ptr noundef %1) #30
  %10 = tail call ptr @emit_insn(ptr noundef %9) #30
  br label %33

11:                                               ; preds = %2
  %12 = load i8, ptr getelementptr inbounds ([62 x i8], ptr @ix86_tune_features, i64 0, i64 34), align 2, !tbaa !16
  %13 = icmp eq i8 %12, 0
  br i1 %13, label %19, label %14

14:                                               ; preds = %11
  %15 = tail call ptr @emit_clobber(ptr noundef %5) #30
  %16 = load ptr, ptr @rtl_hooks, align 8, !tbaa !187
  %17 = tail call ptr %16(i32 noundef 17, ptr noundef %5) #30
  %18 = tail call ptr @emit_move_insn(ptr noundef %17, ptr noundef %1) #30
  br label %33

19:                                               ; preds = %11
  %20 = tail call ptr @gen_reg_rtx(i32 noundef 66) #30
  %21 = load i8, ptr getelementptr inbounds ([87 x i8], ptr @mode_inner, i64 0, i64 66), align 2, !tbaa !16
  %22 = zext i8 %21 to i32
  %23 = tail call ptr @force_reg(i32 noundef %22, ptr noundef %1) #30
  %24 = zext i8 %21 to i64
  %25 = getelementptr inbounds [87 x ptr], ptr @const_tiny_rtx, i64 0, i64 %24
  %26 = load ptr, ptr %25, align 8, !tbaa !5
  %27 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 125, i32 noundef 66, ptr noundef %23, ptr noundef %26) #30
  %28 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 23, i32 noundef 0, ptr noundef %20, ptr noundef %27) #30
  %29 = tail call ptr @emit_insn(ptr noundef %28) #30
  %30 = load ptr, ptr @rtl_hooks, align 8, !tbaa !187
  %31 = tail call ptr %30(i32 noundef 65, ptr noundef %20) #30
  %32 = tail call ptr @emit_move_insn(ptr noundef %5, ptr noundef %31) #30
  br label %33

33:                                               ; preds = %14, %19, %8
  %34 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef 1127219200) #30
  %35 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef 1160773632) #30
  %36 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 64), align 16, !tbaa !5
  %37 = tail call ptr (i32, ...) @gen_rtvec(i32 noundef 4, ptr noundef %34, ptr noundef %35, ptr noundef %36, ptr noundef %36) #30
  %38 = tail call ptr @gen_rtx_CONST_VECTOR(i32 noundef 65, ptr noundef %37) #30
  %39 = tail call ptr @force_const_mem(i32 noundef 65, ptr noundef %38) #30
  %40 = tail call ptr @validize_mem(ptr noundef %39) #30
  %41 = tail call ptr @gen_vec_interleave_lowv4si(ptr noundef %5, ptr noundef %5, ptr noundef %40) #30
  %42 = tail call ptr @emit_insn(ptr noundef %41) #30
  %43 = load ptr, ptr @rtl_hooks, align 8, !tbaa !187
  %44 = tail call ptr %43(i32 noundef 80, ptr noundef %5) #30
  %45 = tail call ptr @copy_to_mode_reg(i32 noundef 80, ptr noundef %44) #30
  call void @real_ldexp(ptr noundef nonnull %3, ptr noundef nonnull @dconst1, i32 noundef 52) #30
  call void @real_ldexp(ptr noundef nonnull %4, ptr noundef nonnull @dconst1, i32 noundef 84) #30
  %46 = call ptr @const_double_from_real_value(ptr noundef nonnull byval(%struct.real_value) align 8 %3, i32 noundef 39) #30
  %47 = call ptr @const_double_from_real_value(ptr noundef nonnull byval(%struct.real_value) align 8 %4, i32 noundef 39) #30
  %48 = call ptr (i32, ...) @gen_rtvec(i32 noundef 2, ptr noundef %46, ptr noundef %47) #30
  %49 = call ptr @gen_rtx_CONST_VECTOR(i32 noundef 80, ptr noundef %48) #30
  %50 = call ptr @force_const_mem(i32 noundef 80, ptr noundef %49) #30
  %51 = call ptr @validize_mem(ptr noundef %50) #30
  %52 = call ptr @gen_subv2df3(ptr noundef %45, ptr noundef %45, ptr noundef %51) #30
  %53 = call ptr @emit_insn(ptr noundef %52) #30
  %54 = load i32, ptr @ix86_isa_flags, align 4, !tbaa !20
  %55 = and i32 %54, 262144
  %56 = icmp eq i32 %55, 0
  br i1 %56, label %59, label %57

57:                                               ; preds = %33
  %58 = call ptr @gen_sse3_haddv2df3(ptr noundef %45, ptr noundef %45, ptr noundef %45) #30
  br label %64

59:                                               ; preds = %33
  %60 = call ptr @copy_to_mode_reg(i32 noundef 80, ptr noundef %45) #30
  %61 = call ptr @gen_vec_interleave_highv2df(ptr noundef %45, ptr noundef %45, ptr noundef %45) #30
  %62 = call ptr @emit_insn(ptr noundef %61) #30
  %63 = call ptr @gen_addv2df3(ptr noundef %45, ptr noundef %45, ptr noundef %60) #30
  br label %64

64:                                               ; preds = %59, %57
  %65 = phi ptr [ %63, %59 ], [ %58, %57 ]
  %66 = call ptr @emit_insn(ptr noundef %65) #30
  call void @ix86_expand_vector_extract(i8 noundef zeroext 0, ptr noundef %0, ptr noundef %45, i32 noundef 0)
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %4) #30
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %3) #30
  ret void
}

declare ptr @gen_movdi_to_sse(ptr noundef, ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc zeroext i8 @ix86_expand_vector_init_one_nonzero(i8 noundef zeroext %0, i32 noundef %1, ptr noundef %2, ptr noundef %3, i32 noundef %4) unnamed_addr #9 {
  switch i32 %1, label %155 [
    i32 82, label %21
    i32 63, label %6
    i32 65, label %6
    i32 79, label %6
    i32 64, label %11
    i32 60, label %16
    i32 68, label %21
    i32 69, label %21
    i32 70, label %21
    i32 81, label %21
    i32 78, label %40
    i32 61, label %40
    i32 80, label %44
    i32 66, label %44
    i32 59, label %136
  ]

6:                                                ; preds = %5, %5, %5
  %7 = load i32, ptr @ix86_isa_flags, align 4, !tbaa !20
  %8 = lshr i32 %7, 19
  %9 = trunc i32 %8 to i8
  %10 = and i8 %9, 1
  br label %26

11:                                               ; preds = %5
  %12 = load i32, ptr @ix86_isa_flags, align 4, !tbaa !20
  %13 = lshr i32 %12, 17
  %14 = trunc i32 %13 to i8
  %15 = and i8 %14, 1
  br label %26

16:                                               ; preds = %5
  %17 = load i32, ptr @ix86_isa_flags, align 4
  %18 = and i32 %17, 65538
  %19 = icmp ne i32 %18, 0
  %20 = zext i1 %19 to i8
  br label %26

21:                                               ; preds = %5, %5, %5, %5, %5
  %22 = load i32, ptr @ix86_isa_flags, align 4, !tbaa !20
  %23 = trunc i32 %22 to i8
  %24 = lshr i8 %23, 5
  %25 = and i8 %24, 1
  br label %26

26:                                               ; preds = %21, %16, %11, %6
  %27 = phi i8 [ %25, %21 ], [ %20, %16 ], [ %15, %11 ], [ %10, %6 ]
  %28 = icmp eq i8 %27, 0
  br i1 %28, label %39, label %29

29:                                               ; preds = %26
  %30 = zext i32 %1 to i64
  %31 = getelementptr inbounds [87 x ptr], ptr @const_tiny_rtx, i64 0, i64 %30
  %32 = load ptr, ptr %31, align 8, !tbaa !5
  %33 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 23, i32 noundef 0, ptr noundef %2, ptr noundef %32) #30
  %34 = tail call ptr @emit_insn(ptr noundef %33) #30
  %35 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %30
  %36 = load i8, ptr %35, align 1, !tbaa !16
  %37 = zext i8 %36 to i32
  %38 = tail call ptr @force_reg(i32 noundef %37, ptr noundef %3) #30
  tail call void @ix86_expand_vector_set(i8 noundef zeroext %0, ptr noundef %2, ptr noundef %38, i32 noundef %4)
  br label %155

39:                                               ; preds = %26
  switch i32 %1, label %155 [
    i32 78, label %40
    i32 61, label %40
    i32 80, label %44
    i32 66, label %44
    i32 79, label %58
    i32 65, label %58
    i32 64, label %138
    i32 63, label %138
    i32 60, label %136
  ]

40:                                               ; preds = %5, %5, %39, %39
  %41 = icmp ne i8 %0, 0
  %42 = icmp eq i32 %4, 0
  %43 = and i1 %41, %42
  br i1 %43, label %46, label %155

44:                                               ; preds = %5, %5, %39, %39
  %45 = icmp eq i32 %4, 0
  br i1 %45, label %46, label %155

46:                                               ; preds = %40, %44
  %47 = zext i32 %1 to i64
  %48 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %47
  %49 = load i8, ptr %48, align 1, !tbaa !16
  %50 = zext i8 %49 to i32
  %51 = tail call ptr @force_reg(i32 noundef %50, ptr noundef %3) #30
  %52 = zext i8 %49 to i64
  %53 = getelementptr inbounds [87 x ptr], ptr @const_tiny_rtx, i64 0, i64 %52
  %54 = load ptr, ptr %53, align 8, !tbaa !5
  %55 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 125, i32 noundef %1, ptr noundef %51, ptr noundef %54) #30
  %56 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 23, i32 noundef 0, ptr noundef %2, ptr noundef %55) #30
  %57 = tail call ptr @emit_insn(ptr noundef %56) #30
  br label %155

58:                                               ; preds = %39, %39
  %59 = load i32, ptr %2, align 8
  %60 = and i32 %59, 65535
  %61 = icmp eq i32 %60, 37
  br i1 %61, label %62, label %66

62:                                               ; preds = %58
  %63 = getelementptr i8, ptr %2, i64 8
  %64 = load i32, ptr %63, align 8, !tbaa !16
  %65 = icmp ult i32 %64, 53
  br i1 %65, label %66, label %68

66:                                               ; preds = %62, %58
  %67 = tail call ptr @gen_reg_rtx(i32 noundef %1) #30
  br label %68

68:                                               ; preds = %62, %66
  %69 = phi ptr [ %67, %66 ], [ %2, %62 ]
  %70 = zext i32 %1 to i64
  %71 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %70
  %72 = load i8, ptr %71, align 1, !tbaa !16
  %73 = zext i8 %72 to i32
  %74 = tail call ptr @force_reg(i32 noundef %73, ptr noundef %3) #30
  %75 = tail call ptr @gen_rtx_fmt_e_stat(i32 noundef 126, i32 noundef %1, ptr noundef %74) #30
  %76 = getelementptr inbounds [87 x ptr], ptr @const_tiny_rtx, i64 0, i64 %70
  %77 = load ptr, ptr %76, align 8, !tbaa !5
  %78 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 65), align 8, !tbaa !5
  %79 = tail call ptr @gen_rtx_fmt_eee_stat(i32 noundef 123, i32 noundef %1, ptr noundef %75, ptr noundef %77, ptr noundef %78) #30
  %80 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 23, i32 noundef 0, ptr noundef %69, ptr noundef %79) #30
  %81 = tail call ptr @emit_insn(ptr noundef %80) #30
  %82 = icmp eq i32 %4, 0
  br i1 %82, label %132, label %83

83:                                               ; preds = %68
  %84 = icmp eq i32 %1, 79
  br i1 %84, label %110, label %85

85:                                               ; preds = %83
  %86 = load i32, ptr @ix86_isa_flags, align 4, !tbaa !20
  %87 = and i32 %86, 131072
  %88 = icmp eq i32 %87, 0
  br i1 %88, label %105, label %89

89:                                               ; preds = %85
  %90 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 65), align 8, !tbaa !5
  %91 = icmp ne i32 %4, 1
  %92 = zext i1 %91 to i64
  %93 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef %92) #30
  %94 = icmp ne i32 %4, 2
  %95 = zext i1 %94 to i64
  %96 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef %95) #30
  %97 = icmp ne i32 %4, 3
  %98 = zext i1 %97 to i64
  %99 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef %98) #30
  %100 = tail call ptr @gen_sse2_pshufd_1(ptr noundef %69, ptr noundef %69, ptr noundef %90, ptr noundef %93, ptr noundef %96, ptr noundef %99) #30
  %101 = tail call ptr @emit_insn(ptr noundef %100) #30
  %102 = icmp eq ptr %69, %2
  br i1 %102, label %155, label %103

103:                                              ; preds = %89
  %104 = tail call ptr @emit_move_insn(ptr noundef nonnull %2, ptr noundef %69) #30
  br label %155

105:                                              ; preds = %85
  %106 = tail call ptr @gen_reg_rtx(i32 noundef 79) #30
  %107 = load ptr, ptr @rtl_hooks, align 8, !tbaa !187
  %108 = tail call ptr %107(i32 noundef 79, ptr noundef %69) #30
  %109 = tail call ptr @emit_move_insn(ptr noundef %106, ptr noundef %108) #30
  br label %110

110:                                              ; preds = %83, %105
  %111 = phi ptr [ %106, %105 ], [ %69, %83 ]
  %112 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 65), align 8, !tbaa !5
  %113 = icmp ne i32 %4, 1
  %114 = zext i1 %113 to i64
  %115 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef %114) #30
  %116 = icmp eq i32 %4, 2
  %117 = select i1 %116, i64 4, i64 5
  %118 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef %117) #30
  %119 = icmp eq i32 %4, 3
  %120 = select i1 %119, i64 4, i64 5
  %121 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef %120) #30
  %122 = tail call ptr @gen_sse_shufps_v4sf(ptr noundef %111, ptr noundef %111, ptr noundef %111, ptr noundef %112, ptr noundef %115, ptr noundef %118, ptr noundef %121) #30
  %123 = tail call ptr @emit_insn(ptr noundef %122) #30
  br i1 %84, label %128, label %124

124:                                              ; preds = %110
  %125 = load ptr, ptr @rtl_hooks, align 8, !tbaa !187
  %126 = tail call ptr %125(i32 noundef 65, ptr noundef %111) #30
  %127 = tail call ptr @emit_move_insn(ptr noundef nonnull %2, ptr noundef %126) #30
  br label %155

128:                                              ; preds = %110
  %129 = icmp eq ptr %111, %2
  br i1 %129, label %155, label %130

130:                                              ; preds = %128
  %131 = tail call ptr @emit_move_insn(ptr noundef nonnull %2, ptr noundef %111) #30
  br label %155

132:                                              ; preds = %68
  %133 = icmp eq ptr %69, %2
  br i1 %133, label %155, label %134

134:                                              ; preds = %132
  %135 = tail call ptr @emit_move_insn(ptr noundef nonnull %2, ptr noundef %69) #30
  br label %155

136:                                              ; preds = %5, %39
  %137 = icmp eq i8 %0, 0
  br i1 %137, label %155, label %138

138:                                              ; preds = %136, %39, %39
  %139 = phi i32 [ 65, %39 ], [ 65, %39 ], [ 61, %136 ]
  %140 = icmp eq i32 %4, 0
  br i1 %140, label %141, label %155

141:                                              ; preds = %138
  %142 = zext i32 %1 to i64
  %143 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %142
  %144 = load i8, ptr %143, align 1, !tbaa !16
  %145 = zext i8 %144 to i32
  %146 = tail call ptr @convert_modes(i32 noundef 16, i32 noundef %145, ptr noundef %3, i32 noundef 1) #30
  %147 = tail call ptr @gen_reg_rtx(i32 noundef %139) #30
  %148 = tail call fastcc zeroext i8 @ix86_expand_vector_init_one_nonzero(i8 noundef zeroext %0, i32 noundef %139, ptr noundef %147, ptr noundef %146, i32 noundef 0), !range !66
  %149 = icmp eq i8 %148, 0
  br i1 %149, label %150, label %151

150:                                              ; preds = %141
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 27041, ptr noundef nonnull @.str.131) #30
  br label %151

151:                                              ; preds = %150, %141
  %152 = load ptr, ptr @rtl_hooks, align 8, !tbaa !187
  %153 = tail call ptr %152(i32 noundef %1, ptr noundef %147) #30
  %154 = tail call ptr @emit_move_insn(ptr noundef %2, ptr noundef %153) #30
  br label %155

155:                                              ; preds = %5, %39, %138, %136, %128, %130, %124, %134, %132, %89, %103, %44, %40, %151, %46, %29
  %156 = phi i8 [ 1, %29 ], [ 1, %151 ], [ 1, %46 ], [ 0, %40 ], [ 0, %44 ], [ 1, %103 ], [ 1, %89 ], [ 1, %132 ], [ 1, %134 ], [ 1, %124 ], [ 1, %130 ], [ 1, %128 ], [ 0, %136 ], [ 0, %138 ], [ 0, %39 ], [ 0, %5 ]
  ret i8 %156
}

declare ptr @gen_rtx_CONST_VECTOR(i32 noundef, ptr noundef) local_unnamed_addr #3

declare ptr @gen_vec_interleave_lowv4si(ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

declare void @real_ldexp(ptr noundef, ptr noundef, i32 noundef) local_unnamed_addr #3

declare ptr @gen_subv2df3(ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

declare ptr @gen_sse3_haddv2df3(ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

declare ptr @gen_vec_interleave_highv2df(ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

declare ptr @gen_addv2df3(ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define dso_local void @ix86_expand_vector_extract(i8 noundef zeroext %0, ptr noundef %1, ptr noundef %2, i32 noundef %3) local_unnamed_addr #9 {
  %5 = load i32, ptr %2, align 8
  %6 = lshr i32 %5, 16
  %7 = trunc i32 %6 to i8
  switch i8 %7, label %178 [
    i8 61, label %31
    i8 78, label %31
    i8 80, label %147
    i8 66, label %147
    i8 79, label %38
    i8 65, label %8
    i8 64, label %97
    i8 60, label %110
    i8 63, label %125
  ]

8:                                                ; preds = %4
  %9 = load i32, ptr @ix86_isa_flags, align 4, !tbaa !20
  %10 = and i32 %9, 524288
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %12, label %147

12:                                               ; preds = %8
  %13 = and i32 %9, 131072
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %15, label %74

15:                                               ; preds = %12, %71
  %16 = phi ptr [ %19, %71 ], [ %1, %12 ]
  %17 = phi ptr [ %21, %71 ], [ %2, %12 ]
  %18 = load ptr, ptr @rtl_hooks, align 8, !tbaa !187
  %19 = tail call ptr %18(i32 noundef 38, ptr noundef %16) #30
  %20 = load ptr, ptr @rtl_hooks, align 8, !tbaa !187
  %21 = tail call ptr %20(i32 noundef 79, ptr noundef nonnull %17) #30
  %22 = load i32, ptr %21, align 8
  %23 = lshr i32 %22, 16
  %24 = trunc i32 %23 to i8
  switch i8 %24, label %178 [
    i8 61, label %25
    i8 78, label %25
    i8 80, label %147
    i8 66, label %147
    i8 79, label %38
    i8 65, label %67
    i8 64, label %97
    i8 60, label %110
    i8 63, label %125
  ]

25:                                               ; preds = %15, %15
  %26 = and i32 %23, 255
  %27 = zext i32 %26 to i64
  %28 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %27
  %29 = load i8, ptr %28, align 1, !tbaa !16
  %30 = zext i8 %29 to i32
  br label %187

31:                                               ; preds = %4, %4
  %32 = and i32 %6, 255
  %33 = zext i32 %32 to i64
  %34 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %33
  %35 = load i8, ptr %34, align 1, !tbaa !16
  %36 = zext i8 %35 to i32
  %37 = icmp eq i8 %0, 0
  br i1 %37, label %187, label %156

38:                                               ; preds = %15, %4
  %39 = phi ptr [ %1, %4 ], [ %19, %15 ]
  %40 = phi ptr [ %2, %4 ], [ %21, %15 ]
  %41 = phi i32 [ %6, %4 ], [ %23, %15 ]
  %42 = and i32 %41, 255
  %43 = zext i32 %42 to i64
  %44 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %43
  %45 = load i8, ptr %44, align 1, !tbaa !16
  %46 = zext i8 %45 to i32
  %47 = load i32, ptr @ix86_isa_flags, align 4, !tbaa !20
  %48 = and i32 %47, 524288
  %49 = icmp eq i32 %48, 0
  br i1 %49, label %50, label %156

50:                                               ; preds = %38
  switch i32 %3, label %66 [
    i32 0, label %156
    i32 1, label %51
    i32 3, label %51
    i32 2, label %62
  ]

51:                                               ; preds = %50, %50
  %52 = tail call ptr @gen_reg_rtx(i32 noundef 79) #30
  %53 = zext i32 %3 to i64
  %54 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef %53) #30
  %55 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef %53) #30
  %56 = add nuw nsw i32 %3, 4
  %57 = zext i32 %56 to i64
  %58 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef %57) #30
  %59 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef %57) #30
  %60 = tail call ptr @gen_sse_shufps_v4sf(ptr noundef %52, ptr noundef nonnull %40, ptr noundef nonnull %40, ptr noundef %54, ptr noundef %55, ptr noundef %58, ptr noundef %59) #30
  %61 = tail call ptr @emit_insn(ptr noundef %60) #30
  br label %156

62:                                               ; preds = %50
  %63 = tail call ptr @gen_reg_rtx(i32 noundef 79) #30
  %64 = tail call ptr @gen_vec_interleave_highv4sf(ptr noundef %63, ptr noundef nonnull %40, ptr noundef nonnull %40) #30
  %65 = tail call ptr @emit_insn(ptr noundef %64) #30
  br label %156

66:                                               ; preds = %50
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 27879, ptr noundef nonnull @.str.131) #30
  br label %156

67:                                               ; preds = %15
  %68 = load i32, ptr @ix86_isa_flags, align 4, !tbaa !20
  %69 = and i32 %68, 524288
  %70 = icmp eq i32 %69, 0
  br i1 %70, label %71, label %147

71:                                               ; preds = %67
  %72 = and i32 %68, 131072
  %73 = icmp eq i32 %72, 0
  br i1 %73, label %15, label %74, !llvm.loop !217

74:                                               ; preds = %71, %12
  %75 = phi ptr [ %1, %12 ], [ %19, %71 ]
  %76 = phi ptr [ %2, %12 ], [ %21, %71 ]
  %77 = phi i32 [ %6, %12 ], [ %23, %71 ]
  %78 = and i32 %77, 255
  %79 = zext i32 %78 to i64
  %80 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %79
  %81 = load i8, ptr %80, align 1, !tbaa !16
  %82 = zext i8 %81 to i32
  switch i32 %3, label %96 [
    i32 0, label %156
    i32 1, label %83
    i32 3, label %83
    i32 2, label %92
  ]

83:                                               ; preds = %74, %74
  %84 = tail call ptr @gen_reg_rtx(i32 noundef 65) #30
  %85 = zext i32 %3 to i64
  %86 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef %85) #30
  %87 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef %85) #30
  %88 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef %85) #30
  %89 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef %85) #30
  %90 = tail call ptr @gen_sse2_pshufd_1(ptr noundef %84, ptr noundef nonnull %76, ptr noundef %86, ptr noundef %87, ptr noundef %88, ptr noundef %89) #30
  %91 = tail call ptr @emit_insn(ptr noundef %90) #30
  br label %156

92:                                               ; preds = %74
  %93 = tail call ptr @gen_reg_rtx(i32 noundef 65) #30
  %94 = tail call ptr @gen_vec_interleave_highv4si(ptr noundef %93, ptr noundef nonnull %76, ptr noundef nonnull %76) #30
  %95 = tail call ptr @emit_insn(ptr noundef %94) #30
  br label %156

96:                                               ; preds = %74
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 27913, ptr noundef nonnull @.str.131) #30
  br label %156

97:                                               ; preds = %15, %4
  %98 = phi ptr [ %1, %4 ], [ %19, %15 ]
  %99 = phi ptr [ %2, %4 ], [ %21, %15 ]
  %100 = phi i32 [ %6, %4 ], [ %23, %15 ]
  %101 = and i32 %100, 255
  %102 = zext i32 %101 to i64
  %103 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %102
  %104 = load i8, ptr %103, align 1, !tbaa !16
  %105 = zext i8 %104 to i32
  %106 = load i32, ptr @ix86_isa_flags, align 4, !tbaa !20
  %107 = lshr i32 %106, 17
  %108 = trunc i32 %107 to i8
  %109 = and i8 %108, 1
  br label %138

110:                                              ; preds = %15, %4
  %111 = phi i8 [ %0, %4 ], [ 0, %15 ]
  %112 = phi ptr [ %1, %4 ], [ %19, %15 ]
  %113 = phi ptr [ %2, %4 ], [ %21, %15 ]
  %114 = phi i32 [ %6, %4 ], [ %23, %15 ]
  %115 = and i32 %114, 255
  %116 = zext i32 %115 to i64
  %117 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %116
  %118 = load i8, ptr %117, align 1, !tbaa !16
  %119 = zext i8 %118 to i32
  %120 = icmp eq i8 %111, 0
  %121 = load i32, ptr @ix86_isa_flags, align 4
  %122 = and i32 %121, 65538
  %123 = icmp ne i32 %122, 0
  %124 = zext i1 %123 to i8
  br i1 %120, label %187, label %138

125:                                              ; preds = %15, %4
  %126 = phi ptr [ %1, %4 ], [ %19, %15 ]
  %127 = phi ptr [ %2, %4 ], [ %21, %15 ]
  %128 = phi i32 [ %6, %4 ], [ %23, %15 ]
  %129 = and i32 %128, 255
  %130 = zext i32 %129 to i64
  %131 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %130
  %132 = load i8, ptr %131, align 1, !tbaa !16
  %133 = zext i8 %132 to i32
  %134 = load i32, ptr @ix86_isa_flags, align 4, !tbaa !20
  %135 = lshr i32 %134, 19
  %136 = trunc i32 %135 to i8
  %137 = and i8 %136, 1
  br label %138

138:                                              ; preds = %110, %125, %97
  %139 = phi ptr [ %126, %125 ], [ %112, %110 ], [ %98, %97 ]
  %140 = phi ptr [ %127, %125 ], [ %113, %110 ], [ %99, %97 ]
  %141 = phi i32 [ %129, %125 ], [ %115, %110 ], [ %101, %97 ]
  %142 = phi i64 [ %130, %125 ], [ %116, %110 ], [ %102, %97 ]
  %143 = phi i8 [ %132, %125 ], [ %118, %110 ], [ %104, %97 ]
  %144 = phi i32 [ %133, %125 ], [ %119, %110 ], [ %105, %97 ]
  %145 = phi i8 [ %137, %125 ], [ %124, %110 ], [ %109, %97 ]
  %146 = icmp eq i8 %145, 0
  br i1 %146, label %187, label %156

147:                                              ; preds = %67, %15, %15, %8, %4, %4
  %148 = phi ptr [ %1, %4 ], [ %1, %4 ], [ %1, %8 ], [ %19, %15 ], [ %19, %15 ], [ %19, %67 ]
  %149 = phi ptr [ %2, %4 ], [ %2, %4 ], [ %2, %8 ], [ %21, %15 ], [ %21, %15 ], [ %21, %67 ]
  %150 = phi i32 [ %6, %4 ], [ %6, %4 ], [ %6, %8 ], [ %23, %15 ], [ %23, %15 ], [ %23, %67 ]
  %151 = and i32 %150, 255
  %152 = zext i32 %151 to i64
  %153 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %152
  %154 = load i8, ptr %153, align 1, !tbaa !16
  %155 = zext i8 %154 to i32
  br label %156

156:                                              ; preds = %147, %31, %83, %92, %96, %74, %51, %62, %66, %50, %38, %138
  %157 = phi ptr [ %139, %138 ], [ %75, %74 ], [ %75, %83 ], [ %75, %92 ], [ %75, %96 ], [ %39, %50 ], [ %39, %51 ], [ %39, %62 ], [ %39, %66 ], [ %39, %38 ], [ %1, %31 ], [ %148, %147 ]
  %158 = phi i8 [ %143, %138 ], [ %81, %74 ], [ %81, %83 ], [ %81, %92 ], [ %81, %96 ], [ %45, %50 ], [ %45, %51 ], [ %45, %62 ], [ %45, %66 ], [ %45, %38 ], [ %35, %31 ], [ %154, %147 ]
  %159 = phi i32 [ %144, %138 ], [ %82, %74 ], [ %82, %83 ], [ %82, %92 ], [ %82, %96 ], [ %46, %50 ], [ %46, %51 ], [ %46, %62 ], [ %46, %66 ], [ %46, %38 ], [ %36, %31 ], [ %155, %147 ]
  %160 = phi ptr [ %140, %138 ], [ %76, %74 ], [ %84, %83 ], [ %93, %92 ], [ undef, %96 ], [ %40, %50 ], [ %52, %51 ], [ %63, %62 ], [ undef, %66 ], [ %40, %38 ], [ %2, %31 ], [ %149, %147 ]
  %161 = phi i32 [ %3, %138 ], [ %3, %74 ], [ 0, %83 ], [ 0, %92 ], [ 0, %96 ], [ %3, %50 ], [ 0, %51 ], [ 0, %62 ], [ 0, %66 ], [ %3, %38 ], [ %3, %31 ], [ %3, %147 ]
  %162 = sext i32 %161 to i64
  %163 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef %162) #30
  %164 = tail call ptr (i32, ...) @gen_rtvec(i32 noundef 1, ptr noundef %163) #30
  %165 = tail call ptr @gen_rtx_fmt_E_stat(i32 noundef 15, i32 noundef 0, ptr noundef %164) #30
  %166 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 124, i32 noundef %159, ptr noundef %160, ptr noundef %165) #30
  %167 = and i8 %158, -2
  %168 = icmp eq i8 %167, 14
  br i1 %168, label %169, label %173

169:                                              ; preds = %156
  %170 = tail call ptr @gen_rtx_fmt_e_stat(i32 noundef 99, i32 noundef 16, ptr noundef %166) #30
  %171 = load ptr, ptr @rtl_hooks, align 8, !tbaa !187
  %172 = tail call ptr %171(i32 noundef 16, ptr noundef %157) #30
  br label %173

173:                                              ; preds = %156, %169
  %174 = phi ptr [ %170, %169 ], [ %166, %156 ]
  %175 = phi ptr [ %172, %169 ], [ %157, %156 ]
  %176 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 23, i32 noundef 0, ptr noundef %175, ptr noundef %174) #30
  %177 = tail call ptr @emit_insn(ptr noundef %176) #30
  br label %207

178:                                              ; preds = %15, %4
  %179 = phi ptr [ %1, %4 ], [ %19, %15 ]
  %180 = phi ptr [ %2, %4 ], [ %21, %15 ]
  %181 = phi i32 [ %6, %4 ], [ %23, %15 ]
  %182 = and i32 %181, 255
  %183 = zext i32 %182 to i64
  %184 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %183
  %185 = load i8, ptr %184, align 1, !tbaa !16
  %186 = zext i8 %185 to i32
  br label %187

187:                                              ; preds = %25, %178, %110, %31, %138
  %188 = phi ptr [ %179, %178 ], [ %112, %110 ], [ %1, %31 ], [ %139, %138 ], [ %19, %25 ]
  %189 = phi ptr [ %180, %178 ], [ %113, %110 ], [ %2, %31 ], [ %140, %138 ], [ %21, %25 ]
  %190 = phi i32 [ %182, %178 ], [ %115, %110 ], [ %32, %31 ], [ %141, %138 ], [ %26, %25 ]
  %191 = phi i64 [ %183, %178 ], [ %116, %110 ], [ %33, %31 ], [ %142, %138 ], [ %27, %25 ]
  %192 = phi i8 [ %185, %178 ], [ %118, %110 ], [ %35, %31 ], [ %143, %138 ], [ %29, %25 ]
  %193 = phi i32 [ %186, %178 ], [ %119, %110 ], [ %36, %31 ], [ %144, %138 ], [ %30, %25 ]
  %194 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %191
  %195 = load i8, ptr %194, align 1, !tbaa !16
  %196 = zext i8 %195 to i64
  %197 = tail call ptr @assign_stack_temp(i32 noundef %190, i64 noundef %196, i32 noundef 0) #30
  %198 = tail call ptr @emit_move_insn(ptr noundef %197, ptr noundef nonnull %189) #30
  %199 = zext i8 %192 to i64
  %200 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %199
  %201 = load i8, ptr %200, align 1, !tbaa !16
  %202 = zext i8 %201 to i32
  %203 = mul nsw i32 %202, %3
  %204 = sext i32 %203 to i64
  %205 = tail call ptr @adjust_address_1(ptr noundef %197, i32 noundef %193, i64 noundef %204, i32 noundef 1, i32 noundef 1) #30
  %206 = tail call ptr @emit_move_insn(ptr noundef %188, ptr noundef %205) #30
  br label %207

207:                                              ; preds = %173, %187
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define dso_local void @ix86_expand_convert_uns_sixf_sse(ptr nocapture noundef readnone %0, ptr nocapture noundef readnone %1) local_unnamed_addr #9 {
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 14086, ptr noundef nonnull @.str.131) #30
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define dso_local void @ix86_expand_convert_uns_sidf_sse(ptr noundef %0, ptr noundef %1) local_unnamed_addr #9 {
  %3 = alloca %struct.real_value, align 8
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %3) #30
  %4 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef -2147483648) #30
  %5 = tail call ptr @expand_simple_binop(i32 noundef 16, i32 noundef 49, ptr noundef %1, ptr noundef %4, ptr noundef null, i32 noundef 1, i32 noundef 0) #30
  %6 = tail call ptr @gen_reg_rtx(i32 noundef 39) #30
  %7 = tail call ptr @gen_floatsidf2(ptr noundef %6, ptr noundef %5) #30
  %8 = tail call ptr @emit_insn(ptr noundef %7) #30
  call void @real_ldexp(ptr noundef nonnull %3, ptr noundef nonnull @dconst1, i32 noundef 31) #30
  %9 = call ptr @const_double_from_real_value(ptr noundef nonnull byval(%struct.real_value) align 8 %3, i32 noundef 39) #30
  %10 = call ptr @expand_simple_binop(i32 noundef 39, i32 noundef 49, ptr noundef %6, ptr noundef %9, ptr noundef %0, i32 noundef 0, i32 noundef 0) #30
  %11 = icmp eq ptr %10, %0
  br i1 %11, label %14, label %12

12:                                               ; preds = %2
  %13 = call ptr @emit_move_insn(ptr noundef %0, ptr noundef %10) #30
  br label %14

14:                                               ; preds = %12, %2
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %3) #30
  ret void
}

declare ptr @gen_floatsidf2(ptr noundef, ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define dso_local void @ix86_expand_convert_sign_didf_sse(ptr noundef %0, ptr noundef %1) local_unnamed_addr #9 {
  %3 = alloca %struct.real_value, align 8
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %3) #30
  %4 = tail call ptr @gen_reg_rtx(i32 noundef 39) #30
  %5 = tail call ptr @gen_reg_rtx(i32 noundef 39) #30
  %6 = tail call ptr @gen_highpart(i32 noundef 16, ptr noundef %1) #30
  %7 = tail call ptr @gen_floatsidf2(ptr noundef %5, ptr noundef %6) #30
  %8 = tail call ptr @emit_insn(ptr noundef %7) #30
  call void @real_ldexp(ptr noundef nonnull %3, ptr noundef nonnull @dconst1, i32 noundef 32) #30
  %9 = call ptr @const_double_from_real_value(ptr noundef nonnull byval(%struct.real_value) align 8 %3, i32 noundef 39) #30
  %10 = call ptr @expand_simple_binop(i32 noundef 39, i32 noundef 52, ptr noundef %5, ptr noundef %9, ptr noundef %5, i32 noundef 0, i32 noundef 0) #30
  %11 = load ptr, ptr @rtl_hooks, align 8, !tbaa !187
  %12 = call ptr %11(i32 noundef 16, ptr noundef %1) #30
  call void @ix86_expand_convert_uns_sidf_sse(ptr noundef %4, ptr noundef %12)
  %13 = call ptr @expand_simple_binop(i32 noundef 39, i32 noundef 49, ptr noundef %10, ptr noundef %4, ptr noundef %0, i32 noundef 0, i32 noundef 0) #30
  %14 = icmp eq ptr %13, %0
  br i1 %14, label %17, label %15

15:                                               ; preds = %2
  %16 = call ptr @emit_move_insn(ptr noundef %0, ptr noundef %13) #30
  br label %17

17:                                               ; preds = %15, %2
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %3) #30
  ret void
}

declare ptr @gen_highpart(i32 noundef, ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define dso_local void @ix86_expand_convert_uns_sisf_sse(ptr noundef %0, ptr noundef %1) local_unnamed_addr #9 {
  %3 = alloca %struct.real_value, align 8
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %3) #30
  call void @real_ldexp(ptr noundef nonnull %3, ptr noundef nonnull @dconst1, i32 noundef 16) #30
  %4 = call ptr @const_double_from_real_value(ptr noundef nonnull byval(%struct.real_value) align 8 %3, i32 noundef 38) #30
  %5 = call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef 65535) #30
  %6 = call ptr @expand_simple_binop(i32 noundef 16, i32 noundef 61, ptr noundef %1, ptr noundef %5, ptr noundef null, i32 noundef 0, i32 noundef 0) #30
  %7 = call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef 16) #30
  %8 = call ptr @expand_simple_binop(i32 noundef 16, i32 noundef 68, ptr noundef %1, ptr noundef %7, ptr noundef null, i32 noundef 0, i32 noundef 0) #30
  %9 = call ptr @gen_reg_rtx(i32 noundef 38) #30
  %10 = call ptr @gen_reg_rtx(i32 noundef 38) #30
  %11 = call ptr @gen_floatsisf2(ptr noundef %9, ptr noundef %8) #30
  %12 = call ptr @emit_insn(ptr noundef %11) #30
  %13 = call ptr @gen_floatsisf2(ptr noundef %10, ptr noundef %6) #30
  %14 = call ptr @emit_insn(ptr noundef %13) #30
  %15 = call ptr @expand_simple_binop(i32 noundef 38, i32 noundef 52, ptr noundef %9, ptr noundef %4, ptr noundef %9, i32 noundef 0, i32 noundef 0) #30
  %16 = call ptr @expand_simple_binop(i32 noundef 38, i32 noundef 49, ptr noundef %15, ptr noundef %10, ptr noundef %0, i32 noundef 0, i32 noundef 0) #30
  %17 = call i32 @rtx_equal_p(ptr noundef %0, ptr noundef %16) #30
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %19, label %21

19:                                               ; preds = %2
  %20 = call ptr @emit_move_insn(ptr noundef %0, ptr noundef %16) #30
  br label %21

21:                                               ; preds = %19, %2
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %3) #30
  ret void
}

declare ptr @gen_floatsisf2(ptr noundef, ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define dso_local ptr @ix86_build_const_vector(i32 noundef %0, i8 noundef zeroext %1, ptr noundef %2) local_unnamed_addr #9 {
  switch i32 %0, label %32 [
    i32 16, label %4
    i32 17, label %10
    i32 38, label %16
    i32 39, label %26
  ]

4:                                                ; preds = %3
  %5 = icmp eq i8 %1, 0
  br i1 %5, label %6, label %7

6:                                                ; preds = %4
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 14175, ptr noundef nonnull @.str.131) #30
  br label %7

7:                                                ; preds = %4, %6
  %8 = tail call ptr (i32, ...) @gen_rtvec(i32 noundef 4, ptr noundef %2, ptr noundef %2, ptr noundef %2, ptr noundef %2) #30
  %9 = tail call ptr @gen_rtx_CONST_VECTOR(i32 noundef 65, ptr noundef %8) #30
  br label %33

10:                                               ; preds = %3
  %11 = icmp eq i8 %1, 0
  br i1 %11, label %12, label %13

12:                                               ; preds = %10
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 14180, ptr noundef nonnull @.str.131) #30
  br label %13

13:                                               ; preds = %10, %12
  %14 = tail call ptr (i32, ...) @gen_rtvec(i32 noundef 2, ptr noundef %2, ptr noundef %2) #30
  %15 = tail call ptr @gen_rtx_CONST_VECTOR(i32 noundef 66, ptr noundef %14) #30
  br label %33

16:                                               ; preds = %3
  %17 = icmp eq i8 %1, 0
  br i1 %17, label %20, label %18

18:                                               ; preds = %16
  %19 = tail call ptr (i32, ...) @gen_rtvec(i32 noundef 4, ptr noundef %2, ptr noundef %2, ptr noundef %2, ptr noundef %2) #30
  br label %23

20:                                               ; preds = %16
  %21 = load ptr, ptr getelementptr inbounds ([3 x [87 x ptr]], ptr @const_tiny_rtx, i64 0, i64 0, i64 38), align 16, !tbaa !5
  %22 = tail call ptr (i32, ...) @gen_rtvec(i32 noundef 4, ptr noundef %2, ptr noundef %21, ptr noundef %21, ptr noundef %21) #30
  br label %23

23:                                               ; preds = %20, %18
  %24 = phi ptr [ %19, %18 ], [ %22, %20 ]
  %25 = tail call ptr @gen_rtx_CONST_VECTOR(i32 noundef 79, ptr noundef %24) #30
  br label %33

26:                                               ; preds = %3
  %27 = icmp eq i8 %1, 0
  %28 = load ptr, ptr getelementptr inbounds ([3 x [87 x ptr]], ptr @const_tiny_rtx, i64 0, i64 0, i64 39), align 8
  %29 = select i1 %27, ptr %28, ptr %2
  %30 = tail call ptr (i32, ...) @gen_rtvec(i32 noundef 2, ptr noundef %2, ptr noundef %29) #30
  %31 = tail call ptr @gen_rtx_CONST_VECTOR(i32 noundef 80, ptr noundef %30) #30
  br label %33

32:                                               ; preds = %3
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 14200, ptr noundef nonnull @.str.131) #30
  br label %33

33:                                               ; preds = %32, %26, %23, %13, %7
  %34 = phi ptr [ null, %32 ], [ %31, %26 ], [ %25, %23 ], [ %15, %13 ], [ %9, %7 ]
  ret ptr %34
}

; Function Attrs: nounwind sspstrong uwtable
define dso_local ptr @ix86_build_signbit_mask(i32 noundef %0, i8 noundef zeroext %1, i8 noundef zeroext %2) local_unnamed_addr #9 {
  switch i32 %0, label %10 [
    i32 16, label %4
    i32 38, label %4
    i32 17, label %7
    i32 39, label %7
    i32 18, label %11
    i32 41, label %11
  ]

4:                                                ; preds = %3, %3
  %5 = icmp eq i32 %0, 16
  %6 = select i1 %5, i32 65, i32 79
  br label %11

7:                                                ; preds = %3, %3
  %8 = icmp eq i32 %0, 17
  %9 = select i1 %8, i32 66, i32 80
  br label %11

10:                                               ; preds = %3
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 14276, ptr noundef nonnull @.str.131) #30
  unreachable

11:                                               ; preds = %3, %3, %7, %4
  %12 = phi i32 [ 17, %7 ], [ 16, %4 ], [ 18, %3 ], [ 18, %3 ]
  %13 = phi i64 [ -1, %7 ], [ 0, %4 ], [ -9223372036854775808, %3 ], [ -9223372036854775808, %3 ]
  %14 = phi i64 [ -9223372036854775808, %7 ], [ 2147483648, %4 ], [ 0, %3 ], [ 0, %3 ]
  %15 = phi i32 [ %9, %7 ], [ %6, %4 ], [ 0, %3 ], [ 0, %3 ]
  %16 = icmp ne i8 %2, 0
  %17 = sext i1 %16 to i64
  %18 = xor i64 %13, %17
  %19 = xor i64 %14, %17
  %20 = tail call ptr @immed_double_const(i64 noundef %19, i64 noundef %18, i32 noundef %12) #30
  %21 = load ptr, ptr @rtl_hooks, align 8, !tbaa !187
  %22 = tail call ptr %21(i32 noundef %0, ptr noundef %20) #30
  %23 = icmp eq i32 %15, 0
  br i1 %23, label %24, label %26

24:                                               ; preds = %11
  %25 = tail call ptr @force_reg(i32 noundef %0, ptr noundef %22) #30
  br label %29

26:                                               ; preds = %11
  %27 = tail call ptr @ix86_build_const_vector(i32 noundef %0, i8 noundef zeroext %1, ptr noundef %22)
  %28 = tail call ptr @force_reg(i32 noundef %15, ptr noundef %27) #30
  br label %29

29:                                               ; preds = %26, %24
  %30 = phi ptr [ %25, %24 ], [ %28, %26 ]
  ret ptr %30
}

declare ptr @immed_double_const(i64 noundef, i64 noundef, i32 noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define dso_local void @ix86_expand_fp_absneg_operator(i32 noundef %0, i32 noundef %1, ptr nocapture noundef readonly %2) local_unnamed_addr #9 {
  %4 = zext i32 %1 to i64
  %5 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %4
  %6 = load i8, ptr %5, align 1, !tbaa !16
  %7 = add i8 %6, -18
  %8 = icmp ult i8 %7, -6
  br i1 %8, label %13, label %9

9:                                                ; preds = %3
  %10 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %4
  %11 = load i8, ptr %10, align 1, !tbaa !16
  %12 = zext i8 %11 to i32
  br label %34

13:                                               ; preds = %3
  %14 = icmp eq i32 %1, 41
  br i1 %14, label %34, label %15

15:                                               ; preds = %13
  %16 = load i32, ptr @ix86_fpmath, align 4, !tbaa !16
  %17 = and i32 %16, 2
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %30, label %19

19:                                               ; preds = %15
  %20 = load i32, ptr @ix86_isa_flags, align 4, !tbaa !20
  %21 = and i32 %20, 65536
  %22 = icmp ne i32 %21, 0
  %23 = icmp eq i32 %1, 38
  %24 = and i1 %23, %22
  br i1 %24, label %34, label %25

25:                                               ; preds = %19
  %26 = and i32 %20, 131072
  %27 = icmp eq i32 %26, 0
  %28 = icmp ne i32 %1, 39
  %29 = or i1 %28, %27
  br i1 %29, label %30, label %34

30:                                               ; preds = %25, %15
  %31 = load ptr, ptr %2, align 8, !tbaa !5
  %32 = getelementptr inbounds ptr, ptr %2, i64 1
  %33 = load ptr, ptr %32, align 8, !tbaa !5
  br label %48

34:                                               ; preds = %19, %13, %9, %25
  %35 = phi i32 [ 39, %25 ], [ 38, %19 ], [ 41, %13 ], [ %12, %9 ]
  %36 = phi i8 [ 0, %25 ], [ 0, %19 ], [ 0, %13 ], [ 1, %9 ]
  %37 = icmp eq i32 %0, 111
  %38 = zext i1 %37 to i8
  %39 = tail call ptr @ix86_build_signbit_mask(i32 noundef %35, i8 noundef zeroext %36, i8 noundef zeroext %38)
  %40 = load ptr, ptr %2, align 8, !tbaa !5
  %41 = getelementptr inbounds ptr, ptr %2, i64 1
  %42 = load ptr, ptr %41, align 8, !tbaa !5
  br i1 %8, label %48, label %43

43:                                               ; preds = %34
  %44 = icmp eq i32 %0, 51
  %45 = select i1 %44, i32 63, i32 61
  %46 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef %45, i32 noundef %1, ptr noundef %42, ptr noundef %39) #30
  %47 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 23, i32 noundef 0, ptr noundef %40, ptr noundef %46) #30
  br label %61

48:                                               ; preds = %30, %34
  %49 = phi ptr [ %33, %30 ], [ %42, %34 ]
  %50 = phi ptr [ %31, %30 ], [ %40, %34 ]
  %51 = phi ptr [ null, %30 ], [ %39, %34 ]
  %52 = tail call ptr @gen_rtx_fmt_e_stat(i32 noundef %0, i32 noundef %1, ptr noundef %49) #30
  %53 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 23, i32 noundef 0, ptr noundef %50, ptr noundef %52) #30
  %54 = icmp eq ptr %51, null
  br i1 %54, label %61, label %55

55:                                               ; preds = %48
  %56 = tail call ptr @gen_rtx_fmt_e_stat(i32 noundef 24, i32 noundef 0, ptr noundef nonnull %51) #30
  %57 = tail call ptr @gen_rtx_REG(i32 noundef 2, i32 noundef 17) #30
  %58 = tail call ptr @gen_rtx_fmt_e_stat(i32 noundef 25, i32 noundef 0, ptr noundef %57) #30
  %59 = tail call ptr (i32, ...) @gen_rtvec(i32 noundef 3, ptr noundef %53, ptr noundef %56, ptr noundef %58) #30
  %60 = tail call ptr @gen_rtx_fmt_E_stat(i32 noundef 15, i32 noundef 0, ptr noundef %59) #30
  br label %61

61:                                               ; preds = %48, %55, %43
  %62 = phi ptr [ %60, %55 ], [ %47, %43 ], [ %53, %48 ]
  %63 = tail call ptr @emit_insn(ptr noundef %62) #30
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define dso_local void @ix86_expand_copysign(ptr nocapture noundef readonly %0) local_unnamed_addr #9 {
  %2 = load ptr, ptr %0, align 8, !tbaa !5
  %3 = getelementptr inbounds ptr, ptr %0, i64 1
  %4 = load ptr, ptr %3, align 8, !tbaa !5
  %5 = getelementptr inbounds ptr, ptr %0, i64 2
  %6 = load ptr, ptr %5, align 8, !tbaa !5
  %7 = load i32, ptr %2, align 8
  %8 = lshr i32 %7, 16
  %9 = and i32 %8, 255
  %10 = load i32, ptr %4, align 8
  %11 = and i32 %10, 65535
  %12 = icmp eq i32 %11, 32
  br i1 %12, label %13, label %74

13:                                               ; preds = %1
  %14 = getelementptr inbounds %struct.rtx_def, ptr %4, i64 0, i32 1
  %15 = tail call zeroext i8 @real_isneg(ptr noundef nonnull %14) #30
  %16 = icmp eq i8 %15, 0
  br i1 %16, label %19, label %17

17:                                               ; preds = %13
  %18 = tail call ptr @simplify_unary_operation(i32 noundef 111, i32 noundef %9, ptr noundef nonnull %4, i32 noundef %9) #30
  br label %19

19:                                               ; preds = %17, %13
  %20 = phi ptr [ %18, %17 ], [ %4, %13 ]
  %21 = icmp eq i32 %9, 38
  %22 = icmp eq i32 %9, 39
  %23 = and i32 %7, 16646144
  %24 = icmp eq i32 %23, 2490368
  br i1 %24, label %25, label %38

25:                                               ; preds = %19
  %26 = select i1 %21, i32 79, i32 80
  %27 = zext i32 %9 to i64
  %28 = getelementptr inbounds [87 x ptr], ptr @const_tiny_rtx, i64 0, i64 %27
  %29 = load ptr, ptr %28, align 8, !tbaa !5
  %30 = icmp eq ptr %20, %29
  br i1 %30, label %31, label %35

31:                                               ; preds = %25
  %32 = zext i32 %26 to i64
  %33 = getelementptr inbounds [87 x ptr], ptr @const_tiny_rtx, i64 0, i64 %32
  %34 = load ptr, ptr %33, align 8, !tbaa !5
  br label %45

35:                                               ; preds = %25
  %36 = tail call ptr @ix86_build_const_vector(i32 noundef %9, i8 noundef zeroext 0, ptr noundef %20)
  %37 = tail call ptr @force_reg(i32 noundef %26, ptr noundef %36) #30
  br label %45

38:                                               ; preds = %19
  %39 = zext i32 %9 to i64
  %40 = getelementptr inbounds [87 x ptr], ptr @const_tiny_rtx, i64 0, i64 %39
  %41 = load ptr, ptr %40, align 8, !tbaa !5
  %42 = icmp eq ptr %20, %41
  br i1 %42, label %45, label %43

43:                                               ; preds = %38
  %44 = tail call ptr @force_reg(i32 noundef %9, ptr noundef %20) #30
  br label %45

45:                                               ; preds = %31, %35, %38, %43
  %46 = phi ptr [ %44, %43 ], [ %20, %38 ], [ %34, %31 ], [ %37, %35 ]
  %47 = trunc i32 %8 to i8
  switch i8 %47, label %54 [
    i8 16, label %48
    i8 38, label %48
    i8 17, label %51
    i8 39, label %51
    i8 18, label %55
    i8 41, label %55
  ]

48:                                               ; preds = %45, %45
  %49 = icmp eq i32 %9, 16
  %50 = select i1 %49, i32 65, i32 79
  br label %55

51:                                               ; preds = %45, %45
  %52 = icmp eq i32 %9, 17
  %53 = select i1 %52, i32 66, i32 80
  br label %55

54:                                               ; preds = %45
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 14276, ptr noundef nonnull @.str.131) #30
  unreachable

55:                                               ; preds = %51, %48, %45, %45
  %56 = phi i32 [ 17, %51 ], [ 16, %48 ], [ 18, %45 ], [ 18, %45 ]
  %57 = phi i64 [ -1, %51 ], [ 0, %48 ], [ -9223372036854775808, %45 ], [ -9223372036854775808, %45 ]
  %58 = phi i64 [ -9223372036854775808, %51 ], [ 2147483648, %48 ], [ 0, %45 ], [ 0, %45 ]
  %59 = phi i32 [ %53, %51 ], [ %50, %48 ], [ 0, %45 ], [ 0, %45 ]
  %60 = tail call ptr @immed_double_const(i64 noundef %58, i64 noundef %57, i32 noundef %56) #30
  %61 = load ptr, ptr @rtl_hooks, align 8, !tbaa !187
  %62 = tail call ptr %61(i32 noundef %9, ptr noundef %60) #30
  %63 = icmp eq i32 %59, 0
  br i1 %63, label %64, label %66

64:                                               ; preds = %55
  %65 = tail call ptr @force_reg(i32 noundef %9, ptr noundef %62) #30
  br label %69

66:                                               ; preds = %55
  %67 = tail call ptr @ix86_build_const_vector(i32 noundef %9, i8 noundef zeroext 0, ptr noundef %62)
  %68 = tail call ptr @force_reg(i32 noundef %59, ptr noundef %67) #30
  br label %69

69:                                               ; preds = %64, %66
  %70 = phi ptr [ %65, %64 ], [ %68, %66 ]
  %71 = select i1 %22, ptr @gen_copysigndf3_const, ptr @gen_copysigntf3_const
  %72 = select i1 %21, ptr @gen_copysignsf3_const, ptr %71
  %73 = tail call ptr %72(ptr noundef nonnull %2, ptr noundef %46, ptr noundef %6, ptr noundef %70) #30, !callees !219
  br label %127

74:                                               ; preds = %1
  %75 = trunc i32 %8 to i8
  switch i8 %75, label %82 [
    i8 16, label %76
    i8 38, label %76
    i8 17, label %79
    i8 39, label %79
    i8 18, label %83
    i8 41, label %83
  ]

76:                                               ; preds = %74, %74
  %77 = icmp eq i32 %9, 16
  %78 = select i1 %77, i32 65, i32 79
  br label %83

79:                                               ; preds = %74, %74
  %80 = icmp eq i32 %9, 17
  %81 = select i1 %80, i32 66, i32 80
  br label %83

82:                                               ; preds = %74
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 14276, ptr noundef nonnull @.str.131) #30
  unreachable

83:                                               ; preds = %79, %76, %74, %74
  %84 = phi i32 [ 17, %79 ], [ 16, %76 ], [ 18, %74 ], [ 18, %74 ]
  %85 = phi i64 [ 0, %79 ], [ -1, %76 ], [ 9223372036854775807, %74 ], [ 9223372036854775807, %74 ]
  %86 = phi i64 [ 9223372036854775807, %79 ], [ -2147483649, %76 ], [ -1, %74 ], [ -1, %74 ]
  %87 = phi i32 [ %81, %79 ], [ %78, %76 ], [ 0, %74 ], [ 0, %74 ]
  %88 = tail call ptr @immed_double_const(i64 noundef %86, i64 noundef %85, i32 noundef %84) #30
  %89 = load ptr, ptr @rtl_hooks, align 8, !tbaa !187
  %90 = tail call ptr %89(i32 noundef %9, ptr noundef %88) #30
  %91 = icmp eq i32 %87, 0
  br i1 %91, label %92, label %94

92:                                               ; preds = %83
  %93 = tail call ptr @force_reg(i32 noundef %9, ptr noundef %90) #30
  br label %97

94:                                               ; preds = %83
  %95 = tail call ptr @ix86_build_const_vector(i32 noundef %9, i8 noundef zeroext 0, ptr noundef %90)
  %96 = tail call ptr @force_reg(i32 noundef %87, ptr noundef %95) #30
  br label %97

97:                                               ; preds = %92, %94
  %98 = phi ptr [ %93, %92 ], [ %96, %94 ]
  switch i8 %75, label %105 [
    i8 16, label %99
    i8 38, label %99
    i8 17, label %102
    i8 39, label %102
    i8 18, label %106
    i8 41, label %106
  ]

99:                                               ; preds = %97, %97
  %100 = icmp eq i32 %9, 16
  %101 = select i1 %100, i32 65, i32 79
  br label %106

102:                                              ; preds = %97, %97
  %103 = icmp eq i32 %9, 17
  %104 = select i1 %103, i32 66, i32 80
  br label %106

105:                                              ; preds = %97
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 14276, ptr noundef nonnull @.str.131) #30
  unreachable

106:                                              ; preds = %102, %99, %97, %97
  %107 = phi i32 [ 17, %102 ], [ 16, %99 ], [ 18, %97 ], [ 18, %97 ]
  %108 = phi i64 [ -1, %102 ], [ 0, %99 ], [ -9223372036854775808, %97 ], [ -9223372036854775808, %97 ]
  %109 = phi i64 [ -9223372036854775808, %102 ], [ 2147483648, %99 ], [ 0, %97 ], [ 0, %97 ]
  %110 = phi i32 [ %104, %102 ], [ %101, %99 ], [ 0, %97 ], [ 0, %97 ]
  %111 = tail call ptr @immed_double_const(i64 noundef %109, i64 noundef %108, i32 noundef %107) #30
  %112 = load ptr, ptr @rtl_hooks, align 8, !tbaa !187
  %113 = tail call ptr %112(i32 noundef %9, ptr noundef %111) #30
  %114 = icmp eq i32 %110, 0
  br i1 %114, label %115, label %117

115:                                              ; preds = %106
  %116 = tail call ptr @force_reg(i32 noundef %9, ptr noundef %113) #30
  br label %120

117:                                              ; preds = %106
  %118 = tail call ptr @ix86_build_const_vector(i32 noundef %9, i8 noundef zeroext 0, ptr noundef %113)
  %119 = tail call ptr @force_reg(i32 noundef %110, ptr noundef %118) #30
  br label %120

120:                                              ; preds = %115, %117
  %121 = phi ptr [ %116, %115 ], [ %119, %117 ]
  %122 = icmp eq i32 %9, 39
  %123 = select i1 %122, ptr @gen_copysigndf3_var, ptr @gen_copysigntf3_var
  %124 = icmp eq i32 %9, 38
  %125 = select i1 %124, ptr @gen_copysignsf3_var, ptr %123
  %126 = tail call ptr %125(ptr noundef nonnull %2, ptr noundef null, ptr noundef nonnull %4, ptr noundef %6, ptr noundef %98, ptr noundef %121) #30, !callees !220
  br label %127

127:                                              ; preds = %120, %69
  %128 = phi ptr [ %126, %120 ], [ %73, %69 ]
  %129 = tail call ptr @emit_insn(ptr noundef %128) #30
  ret void
}

declare zeroext i8 @real_isneg(ptr noundef) local_unnamed_addr #3

declare ptr @simplify_unary_operation(i32 noundef, i32 noundef, ptr noundef, i32 noundef) local_unnamed_addr #3

declare ptr @gen_copysignsf3_const(ptr noundef, ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

declare ptr @gen_copysigndf3_const(ptr noundef, ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

declare ptr @gen_copysigntf3_const(ptr noundef, ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

declare ptr @gen_copysignsf3_var(ptr noundef, ptr noundef, ptr noundef, ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

declare ptr @gen_copysigndf3_var(ptr noundef, ptr noundef, ptr noundef, ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

declare ptr @gen_copysigntf3_var(ptr noundef, ptr noundef, ptr noundef, ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define dso_local void @ix86_split_copysign_const(ptr nocapture noundef readonly %0) local_unnamed_addr #9 {
  %2 = load ptr, ptr %0, align 8, !tbaa !5
  %3 = getelementptr inbounds ptr, ptr %0, i64 1
  %4 = load ptr, ptr %3, align 8, !tbaa !5
  %5 = getelementptr inbounds ptr, ptr %0, i64 3
  %6 = load ptr, ptr %5, align 8, !tbaa !5
  %7 = load i32, ptr %2, align 8
  %8 = lshr i32 %7, 16
  %9 = and i32 %8, 255
  %10 = load i32, ptr %6, align 8
  %11 = lshr i32 %10, 16
  %12 = and i32 %11, 255
  %13 = tail call ptr @simplify_gen_subreg(i32 noundef %12, ptr noundef nonnull %2, i32 noundef %9, i32 noundef 0) #30
  %14 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 61, i32 noundef %12, ptr noundef %13, ptr noundef nonnull %6) #30
  %15 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 23, i32 noundef 0, ptr noundef %13, ptr noundef %14) #30
  %16 = tail call ptr @emit_insn(ptr noundef %15) #30
  %17 = zext i32 %12 to i64
  %18 = getelementptr inbounds [87 x ptr], ptr @const_tiny_rtx, i64 0, i64 %17
  %19 = load ptr, ptr %18, align 8, !tbaa !5
  %20 = icmp eq ptr %4, %19
  br i1 %20, label %25, label %21

21:                                               ; preds = %1
  %22 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 62, i32 noundef %12, ptr noundef %13, ptr noundef %4) #30
  %23 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 23, i32 noundef 0, ptr noundef %13, ptr noundef %22) #30
  %24 = tail call ptr @emit_insn(ptr noundef %23) #30
  br label %25

25:                                               ; preds = %21, %1
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define dso_local void @ix86_split_copysign_var(ptr nocapture noundef readonly %0) local_unnamed_addr #9 {
  %2 = load ptr, ptr %0, align 8, !tbaa !5
  %3 = getelementptr inbounds ptr, ptr %0, i64 1
  %4 = load ptr, ptr %3, align 8, !tbaa !5
  %5 = getelementptr inbounds ptr, ptr %0, i64 2
  %6 = load ptr, ptr %5, align 8, !tbaa !5
  %7 = getelementptr inbounds ptr, ptr %0, i64 3
  %8 = load ptr, ptr %7, align 8, !tbaa !5
  %9 = getelementptr inbounds ptr, ptr %0, i64 4
  %10 = load ptr, ptr %9, align 8, !tbaa !5
  %11 = getelementptr inbounds ptr, ptr %0, i64 5
  %12 = load ptr, ptr %11, align 8, !tbaa !5
  %13 = load i32, ptr %2, align 8
  %14 = lshr i32 %13, 16
  %15 = and i32 %14, 255
  %16 = load i32, ptr %12, align 8
  %17 = lshr i32 %16, 16
  %18 = and i32 %17, 255
  %19 = tail call i32 @rtx_equal_p(ptr noundef %6, ptr noundef %8) #30
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %23, label %21

21:                                               ; preds = %1
  %22 = tail call ptr @emit_move_insn(ptr noundef nonnull %2, ptr noundef %6) #30
  br label %95

23:                                               ; preds = %1
  %24 = load i32, ptr %12, align 8
  %25 = and i32 %24, 65535
  %26 = icmp eq i32 %25, 37
  br i1 %26, label %27, label %48

27:                                               ; preds = %23
  %28 = getelementptr i8, ptr %2, i64 8
  %29 = load i32, ptr %28, align 8, !tbaa !16
  %30 = getelementptr i8, ptr %12, i64 8
  %31 = load i32, ptr %30, align 8, !tbaa !16
  %32 = icmp eq i32 %29, %31
  br i1 %32, label %33, label %48

33:                                               ; preds = %27
  %34 = getelementptr i8, ptr %8, i64 8
  %35 = load i32, ptr %34, align 8, !tbaa !16
  %36 = getelementptr i8, ptr %4, i64 8
  %37 = load i32, ptr %36, align 8, !tbaa !16
  %38 = icmp eq i32 %35, %37
  br i1 %38, label %40, label %39

39:                                               ; preds = %33
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 14470, ptr noundef nonnull @.str.131) #30
  br label %40

40:                                               ; preds = %33, %39
  %41 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 61, i32 noundef %18, ptr noundef nonnull %4, ptr noundef nonnull %12) #30
  %42 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 23, i32 noundef 0, ptr noundef nonnull %4, ptr noundef %41) #30
  %43 = tail call ptr @emit_insn(ptr noundef %42) #30
  %44 = tail call ptr @simplify_gen_subreg(i32 noundef %18, ptr noundef %6, i32 noundef %15, i32 noundef 0) #30
  %45 = tail call ptr @gen_rtx_fmt_e_stat(i32 noundef 64, i32 noundef %18, ptr noundef nonnull %12) #30
  %46 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 61, i32 noundef %18, ptr noundef %45, ptr noundef %44) #30
  %47 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 23, i32 noundef 0, ptr noundef nonnull %12, ptr noundef %46) #30
  br label %88

48:                                               ; preds = %27, %23
  %49 = getelementptr i8, ptr %8, i64 8
  %50 = load i32, ptr %49, align 8, !tbaa !16
  %51 = getelementptr i8, ptr %4, i64 8
  %52 = load i32, ptr %51, align 8, !tbaa !16
  %53 = icmp eq i32 %50, %52
  br i1 %53, label %54, label %56

54:                                               ; preds = %48
  %55 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 61, i32 noundef %18, ptr noundef nonnull %4, ptr noundef nonnull %12) #30
  br label %64

56:                                               ; preds = %48
  %57 = getelementptr i8, ptr %12, i64 8
  %58 = load i32, ptr %57, align 8, !tbaa !16
  %59 = icmp eq i32 %58, %52
  br i1 %59, label %61, label %60

60:                                               ; preds = %56
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 14489, ptr noundef nonnull @.str.131) #30
  br label %61

61:                                               ; preds = %56, %60
  %62 = tail call ptr @simplify_gen_subreg(i32 noundef %18, ptr noundef nonnull %8, i32 noundef %15, i32 noundef 0) #30
  %63 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 61, i32 noundef %18, ptr noundef nonnull %4, ptr noundef %62) #30
  br label %64

64:                                               ; preds = %61, %54
  %65 = phi ptr [ %55, %54 ], [ %63, %61 ]
  %66 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 23, i32 noundef 0, ptr noundef nonnull %4, ptr noundef %65) #30
  %67 = tail call ptr @emit_insn(ptr noundef %66) #30
  %68 = getelementptr i8, ptr %6, i64 8
  %69 = load i32, ptr %68, align 8, !tbaa !16
  %70 = getelementptr i8, ptr %2, i64 8
  %71 = load i32, ptr %70, align 8, !tbaa !16
  %72 = icmp eq i32 %69, %71
  br i1 %72, label %73, label %76

73:                                               ; preds = %64
  %74 = tail call ptr @simplify_gen_subreg(i32 noundef %18, ptr noundef nonnull %6, i32 noundef %15, i32 noundef 0) #30
  %75 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 61, i32 noundef %18, ptr noundef %74, ptr noundef %10) #30
  br label %84

76:                                               ; preds = %64
  %77 = getelementptr i8, ptr %10, i64 8
  %78 = load i32, ptr %77, align 8, !tbaa !16
  %79 = icmp eq i32 %78, %71
  br i1 %79, label %81, label %80

80:                                               ; preds = %76
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 14502, ptr noundef nonnull @.str.131) #30
  br label %81

81:                                               ; preds = %76, %80
  %82 = tail call ptr @simplify_gen_subreg(i32 noundef %18, ptr noundef nonnull %6, i32 noundef %15, i32 noundef 0) #30
  %83 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 61, i32 noundef %18, ptr noundef nonnull %10, ptr noundef %82) #30
  br label %84

84:                                               ; preds = %81, %73
  %85 = phi ptr [ %74, %73 ], [ %10, %81 ]
  %86 = phi ptr [ %75, %73 ], [ %83, %81 ]
  %87 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 23, i32 noundef 0, ptr noundef %85, ptr noundef %86) #30
  br label %88

88:                                               ; preds = %84, %40
  %89 = phi ptr [ %87, %84 ], [ %47, %40 ]
  %90 = phi ptr [ %85, %84 ], [ %12, %40 ]
  %91 = tail call ptr @emit_insn(ptr noundef %89) #30
  %92 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 62, i32 noundef %18, ptr noundef %90, ptr noundef nonnull %4) #30
  %93 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 23, i32 noundef 0, ptr noundef %90, ptr noundef %92) #30
  %94 = tail call ptr @emit_insn(ptr noundef %93) #30
  br label %95

95:                                               ; preds = %88, %21
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define dso_local i32 @ix86_match_ccmode(ptr nocapture noundef readonly %0, i32 noundef %1) local_unnamed_addr #9 {
  %3 = getelementptr inbounds %struct.rtx_def, ptr %0, i64 1
  %4 = load ptr, ptr %3, align 8, !tbaa !16
  %5 = load i32, ptr %4, align 8
  %6 = and i32 %5, 65535
  %7 = icmp eq i32 %6, 15
  br i1 %7, label %8, label %15

8:                                                ; preds = %2
  %9 = getelementptr inbounds %struct.rtx_def, ptr %4, i64 0, i32 1
  %10 = load ptr, ptr %9, align 8, !tbaa !16
  %11 = getelementptr inbounds %struct.rtvec_def, ptr %10, i64 0, i32 1
  %12 = load ptr, ptr %11, align 8, !tbaa !5
  %13 = load i32, ptr %12, align 8
  %14 = and i32 %13, 65535
  br label %15

15:                                               ; preds = %8, %2
  %16 = phi i32 [ %14, %8 ], [ %6, %2 ]
  %17 = phi ptr [ %12, %8 ], [ %4, %2 ]
  %18 = icmp eq i32 %16, 23
  br i1 %18, label %20, label %19

19:                                               ; preds = %15
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 14527, ptr noundef nonnull @.str.131) #30
  br label %20

20:                                               ; preds = %15, %19
  %21 = getelementptr inbounds %struct.rtx_def, ptr %17, i64 0, i32 1
  %22 = getelementptr inbounds %struct.rtx_def, ptr %17, i64 0, i32 1, i32 0, i32 0, i64 1
  %23 = load ptr, ptr %22, align 8, !tbaa !16
  %24 = load i32, ptr %23, align 8
  %25 = and i32 %24, 65535
  %26 = icmp eq i32 %25, 48
  br i1 %26, label %28, label %27

27:                                               ; preds = %20
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 14528, ptr noundef nonnull @.str.131) #30
  br label %28

28:                                               ; preds = %20, %27
  %29 = load ptr, ptr %21, align 8, !tbaa !16
  %30 = load i32, ptr %29, align 8
  %31 = lshr i32 %30, 16
  %32 = trunc i32 %31 to i8
  switch i8 %32, label %46 [
    i8 5, label %33
    i8 2, label %40
    i8 3, label %43
    i8 4, label %44
    i8 6, label %47
    i8 7, label %47
    i8 8, label %47
    i8 9, label %47
    i8 10, label %47
  ]

33:                                               ; preds = %28
  switch i32 %1, label %59 [
    i32 5, label %47
    i32 2, label %34
  ]

34:                                               ; preds = %33
  %35 = load ptr, ptr %22, align 8, !tbaa !16
  %36 = getelementptr inbounds %struct.rtx_def, ptr %35, i64 0, i32 1, i32 0, i32 0, i64 1
  %37 = load ptr, ptr %36, align 8, !tbaa !16
  %38 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 64), align 16, !tbaa !5
  %39 = icmp eq ptr %37, %38
  br i1 %39, label %47, label %59

40:                                               ; preds = %28
  %41 = add i32 %1, -3
  %42 = icmp ult i32 %41, 8
  br i1 %42, label %54, label %47

43:                                               ; preds = %28
  switch i32 %1, label %47 [
    i32 10, label %59
    i32 5, label %59
    i32 4, label %59
  ]

44:                                               ; preds = %28
  %45 = icmp eq i32 %1, 10
  br i1 %45, label %59, label %47

46:                                               ; preds = %28
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 14559, ptr noundef nonnull @.str.131) #30
  br label %47

47:                                               ; preds = %54, %40, %43, %33, %28, %28, %28, %28, %28, %44, %34, %46
  %48 = load ptr, ptr %22, align 8, !tbaa !16
  %49 = load i32, ptr %48, align 8
  %50 = xor i32 %49, %30
  %51 = and i32 %50, 16711680
  %52 = icmp eq i32 %51, 0
  %53 = zext i1 %52 to i32
  br label %59

54:                                               ; preds = %40
  %55 = trunc i32 %41 to i8
  %56 = lshr i8 -121, %55
  %57 = and i8 %56, 1
  %58 = icmp eq i8 %57, 0
  br i1 %58, label %47, label %59

59:                                               ; preds = %54, %43, %43, %43, %44, %34, %33, %47
  %60 = phi i32 [ %53, %47 ], [ 0, %33 ], [ 0, %34 ], [ 0, %43 ], [ 0, %44 ], [ 0, %43 ], [ 0, %43 ], [ 0, %54 ]
  ret i32 %60
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind sspstrong willreturn memory(read, argmem: none, inaccessiblemem: none) uwtable
define dso_local i32 @ix86_fp_compare_mode(i32 noundef %0) local_unnamed_addr #16 {
  %2 = load i32, ptr @target_flags, align 4, !tbaa !20
  %3 = and i32 %2, 128
  %4 = icmp eq i32 %3, 0
  %5 = select i1 %4, i32 11, i32 12
  ret i32 %5
}

; Function Attrs: nounwind sspstrong uwtable
define dso_local i32 @ix86_cc_mode(i32 noundef %0, ptr nocapture noundef readonly %1, ptr noundef %2) local_unnamed_addr #9 {
  %4 = load i32, ptr %1, align 8
  %5 = lshr i32 %4, 16
  %6 = and i32 %5, 255
  %7 = zext i32 %6 to i64
  %8 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %7
  %9 = load i8, ptr %8, align 1, !tbaa !16
  %10 = and i8 %9, -2
  %11 = icmp eq i8 %10, 8
  br i1 %11, label %12, label %20

12:                                               ; preds = %3
  %13 = icmp eq i8 %9, 9
  br i1 %13, label %14, label %15

14:                                               ; preds = %12
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 14607, ptr noundef nonnull @.str.131) #30
  br label %15

15:                                               ; preds = %12, %14
  %16 = load i32, ptr @target_flags, align 4, !tbaa !20
  %17 = and i32 %16, 128
  %18 = icmp eq i32 %17, 0
  %19 = select i1 %18, i32 11, i32 12
  br label %49

20:                                               ; preds = %3
  switch i32 %0, label %48 [
    i32 81, label %49
    i32 80, label %49
    i32 86, label %21
    i32 89, label %21
    i32 87, label %30
    i32 88, label %30
    i32 82, label %39
    i32 85, label %39
    i32 83, label %43
    i32 84, label %43
    i32 24, label %47
  ]

21:                                               ; preds = %20, %20
  %22 = and i32 %4, 65535
  %23 = icmp eq i32 %22, 49
  br i1 %23, label %24, label %29

24:                                               ; preds = %21
  %25 = getelementptr inbounds %struct.rtx_def, ptr %1, i64 0, i32 1
  %26 = load ptr, ptr %25, align 8, !tbaa !16
  %27 = tail call i32 @rtx_equal_p(ptr noundef %2, ptr noundef %26) #30
  %28 = icmp eq i32 %27, 0
  br i1 %28, label %29, label %49

29:                                               ; preds = %24, %21
  br label %49

30:                                               ; preds = %20, %20
  %31 = and i32 %4, 65535
  %32 = icmp eq i32 %31, 50
  br i1 %32, label %33, label %38

33:                                               ; preds = %30
  %34 = getelementptr inbounds %struct.rtx_def, ptr %1, i64 0, i32 1
  %35 = load ptr, ptr %34, align 8, !tbaa !16
  %36 = tail call i32 @rtx_equal_p(ptr noundef %2, ptr noundef %35) #30
  %37 = icmp eq i32 %36, 0
  br i1 %37, label %38, label %49

38:                                               ; preds = %33, %30
  br label %49

39:                                               ; preds = %20, %20
  %40 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 64), align 16, !tbaa !5
  %41 = icmp eq ptr %40, %2
  %42 = select i1 %41, i32 4, i32 3
  br label %49

43:                                               ; preds = %20, %20
  %44 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 64), align 16, !tbaa !5
  %45 = icmp eq ptr %44, %2
  %46 = select i1 %45, i32 5, i32 3
  br label %49

47:                                               ; preds = %20
  br label %49

48:                                               ; preds = %20
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 14658, ptr noundef nonnull @.str.131) #30
  br label %49

49:                                               ; preds = %43, %39, %33, %24, %20, %20, %48, %47, %38, %29, %15
  %50 = phi i32 [ %19, %15 ], [ 0, %48 ], [ 2, %47 ], [ 2, %38 ], [ 2, %29 ], [ 10, %20 ], [ 10, %20 ], [ 7, %24 ], [ 7, %33 ], [ %42, %39 ], [ %46, %43 ]
  ret i32 %50
}

; Function Attrs: nounwind sspstrong uwtable
define dso_local i32 @ix86_fp_comparison_strategy(i32 noundef %0) local_unnamed_addr #9 {
  %2 = load i8, ptr @ix86_arch_features, align 1, !tbaa !16
  %3 = icmp eq i8 %2, 0
  br i1 %3, label %4, label %16

4:                                                ; preds = %1
  %5 = load i32, ptr @ix86_isa_flags, align 4, !tbaa !20
  %6 = and i32 %5, 32768
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %15, label %8

8:                                                ; preds = %4
  %9 = load i8, ptr getelementptr inbounds ([62 x i8], ptr @ix86_tune_features, i64 0, i64 7), align 1, !tbaa !16
  %10 = icmp eq i8 %9, 0
  br i1 %10, label %11, label %16

11:                                               ; preds = %8
  %12 = load ptr, ptr @cfun, align 8, !tbaa !5
  %13 = tail call zeroext i8 @optimize_function_for_size_p(ptr noundef %12) #30
  %14 = icmp eq i8 %13, 0
  br i1 %14, label %15, label %16

15:                                               ; preds = %11, %4
  br label %16

16:                                               ; preds = %8, %11, %1, %15
  %17 = phi i32 [ 2, %15 ], [ 1, %1 ], [ 0, %11 ], [ 0, %8 ]
  ret i32 %17
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind sspstrong willreturn memory(none) uwtable
define dso_local i32 @ix86_fp_compare_code_to_integer(i32 noundef %0) local_unnamed_addr #11 {
  %2 = add i32 %0, -82
  %3 = icmp ult i32 %2, 16
  br i1 %3, label %4, label %8

4:                                                ; preds = %1
  %5 = sext i32 %2 to i64
  %6 = getelementptr inbounds [16 x i32], ptr @switch.table.ix86_fp_compare_code_to_integer, i64 0, i64 %5
  %7 = load i32, ptr %6, align 4
  br label %8

8:                                                ; preds = %1, %4
  %9 = phi i32 [ %7, %4 ], [ 0, %1 ]
  ret i32 %9
}

; Function Attrs: nounwind sspstrong uwtable
define dso_local ptr @ix86_expand_compare(i32 noundef %0) local_unnamed_addr #9 {
  %2 = load ptr, ptr @ix86_compare_op0, align 8, !tbaa !5
  %3 = load ptr, ptr @ix86_compare_op1, align 8, !tbaa !5
  %4 = load i32, ptr %2, align 8
  %5 = lshr i32 %4, 16
  %6 = and i32 %5, 255
  %7 = zext i32 %6 to i64
  %8 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %7
  %9 = load i8, ptr %8, align 1, !tbaa !16
  switch i8 %9, label %15 [
    i8 1, label %10
    i8 9, label %12
    i8 8, label %13
  ]

10:                                               ; preds = %1
  %11 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef %0, i32 noundef 0, ptr noundef nonnull %2, ptr noundef %3) #30
  br label %23

12:                                               ; preds = %1
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 15118, ptr noundef nonnull @.str.131) #30
  br label %13

13:                                               ; preds = %1, %12
  %14 = tail call fastcc ptr @ix86_expand_fp_compare(i32 noundef %0, ptr noundef nonnull %2, ptr noundef %3, ptr noundef null)
  br label %23

15:                                               ; preds = %1
  %16 = tail call i32 @ix86_cc_mode(i32 noundef %0, ptr noundef nonnull %2, ptr noundef %3), !range !221
  %17 = tail call ptr @gen_rtx_REG(i32 noundef %16, i32 noundef 17) #30
  %18 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 48, i32 noundef %16, ptr noundef nonnull %2, ptr noundef %3) #30
  %19 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 23, i32 noundef 0, ptr noundef %17, ptr noundef %18) #30
  %20 = tail call ptr @emit_insn(ptr noundef %19) #30
  %21 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 64), align 16, !tbaa !5
  %22 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef %0, i32 noundef 0, ptr noundef %17, ptr noundef %21) #30
  br label %23

23:                                               ; preds = %13, %15, %10
  %24 = phi ptr [ %11, %10 ], [ %14, %13 ], [ %22, %15 ]
  ret ptr %24
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc ptr @ix86_expand_fp_compare(i32 noundef %0, ptr noundef %1, ptr noundef %2, ptr noundef %3) unnamed_addr #9 {
  %5 = load i32, ptr @target_flags, align 4, !tbaa !20
  %6 = and i32 %5, 128
  %7 = icmp eq i32 %6, 0
  %8 = select i1 %7, i32 11, i32 12
  %9 = load i32, ptr %1, align 8
  %10 = lshr i32 %9, 16
  %11 = and i32 %10, 255
  %12 = load i32, ptr @ix86_fpmath, align 4, !tbaa !16
  %13 = and i32 %12, 2
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %26, label %15

15:                                               ; preds = %4
  %16 = load i32, ptr @ix86_isa_flags, align 4, !tbaa !20
  %17 = and i32 %16, 65536
  %18 = icmp ne i32 %17, 0
  %19 = icmp eq i32 %11, 38
  %20 = select i1 %18, i1 %19, i1 false
  br i1 %20, label %58, label %21

21:                                               ; preds = %15
  %22 = and i32 %16, 131072
  %23 = icmp ne i32 %22, 0
  %24 = icmp eq i32 %11, 39
  %25 = select i1 %23, i1 %24, i1 false
  br i1 %25, label %58, label %26

26:                                               ; preds = %21, %4
  br i1 %7, label %27, label %55

27:                                               ; preds = %26
  %28 = icmp eq i32 %11, 40
  br i1 %28, label %29, label %42

29:                                               ; preds = %27
  %30 = tail call i32 @standard_80387_constant_p(ptr noundef nonnull %1)
  %31 = icmp eq i32 %30, 1
  br i1 %31, label %42, label %32

32:                                               ; preds = %29
  %33 = tail call i32 @standard_80387_constant_p(ptr noundef %2)
  %34 = icmp eq i32 %33, 1
  br i1 %34, label %42, label %35

35:                                               ; preds = %32
  %36 = load i32, ptr %2, align 8
  %37 = and i32 %36, 65535
  %38 = icmp eq i32 %37, 103
  %39 = load i8, ptr @ix86_arch_features, align 1
  %40 = icmp eq i8 %39, 0
  %41 = select i1 %38, i1 %40, i1 false
  br i1 %41, label %45, label %55

42:                                               ; preds = %32, %29, %27
  %43 = load i8, ptr @ix86_arch_features, align 1, !tbaa !16
  %44 = icmp eq i8 %43, 0
  br i1 %44, label %45, label %55

45:                                               ; preds = %42, %35
  %46 = load i32, ptr @ix86_isa_flags, align 4, !tbaa !20
  %47 = and i32 %46, 32768
  %48 = icmp ne i32 %47, 0
  %49 = load i8, ptr getelementptr inbounds ([62 x i8], ptr @ix86_tune_features, i64 0, i64 7), align 1
  %50 = icmp eq i8 %49, 0
  %51 = select i1 %48, i1 %50, i1 false
  br i1 %51, label %52, label %58

52:                                               ; preds = %45
  %53 = load ptr, ptr @cfun, align 8, !tbaa !5
  %54 = tail call zeroext i8 @optimize_function_for_size_p(ptr noundef %53) #30
  br label %58

55:                                               ; preds = %42, %35, %26
  %56 = tail call ptr @force_reg(i32 noundef %11, ptr noundef nonnull %1) #30
  %57 = tail call ptr @force_reg(i32 noundef %11, ptr noundef %2) #30
  br label %130

58:                                               ; preds = %52, %45, %21, %15
  %59 = tail call i32 @standard_80387_constant_p(ptr noundef nonnull %1)
  %60 = icmp eq i32 %59, 0
  br i1 %60, label %72, label %61

61:                                               ; preds = %58
  %62 = load i32, ptr %1, align 8
  %63 = and i32 %62, 65535
  %64 = icmp eq i32 %63, 43
  br i1 %64, label %65, label %101

65:                                               ; preds = %61
  %66 = tail call i32 @standard_80387_constant_p(ptr noundef %2)
  %67 = icmp eq i32 %66, 0
  br i1 %67, label %101, label %68

68:                                               ; preds = %65
  %69 = load i32, ptr %2, align 8
  %70 = and i32 %69, 65535
  %71 = icmp eq i32 %70, 43
  br i1 %71, label %101, label %72

72:                                               ; preds = %68, %58
  switch i32 %0, label %93 [
    i32 83, label %73
    i32 82, label %78
    i32 96, label %83
    i32 95, label %88
  ]

73:                                               ; preds = %72
  %74 = load i32, ptr @target_flags, align 4, !tbaa !20
  %75 = and i32 %74, 128
  %76 = icmp eq i32 %75, 0
  %77 = select i1 %76, i32 96, i32 0
  br label %95

78:                                               ; preds = %72
  %79 = load i32, ptr @target_flags, align 4, !tbaa !20
  %80 = and i32 %79, 128
  %81 = icmp eq i32 %80, 0
  %82 = select i1 %81, i32 95, i32 0
  br label %95

83:                                               ; preds = %72
  %84 = load i32, ptr @target_flags, align 4, !tbaa !20
  %85 = and i32 %84, 128
  %86 = icmp eq i32 %85, 0
  %87 = select i1 %86, i32 83, i32 0
  br label %95

88:                                               ; preds = %72
  %89 = load i32, ptr @target_flags, align 4, !tbaa !20
  %90 = and i32 %89, 128
  %91 = icmp eq i32 %90, 0
  %92 = select i1 %91, i32 82, i32 0
  br label %95

93:                                               ; preds = %72
  %94 = tail call i32 @swap_condition(i32 noundef %0) #30
  br label %95

95:                                               ; preds = %93, %88, %83, %78, %73
  %96 = phi i32 [ %94, %93 ], [ %92, %88 ], [ %87, %83 ], [ %82, %78 ], [ %77, %73 ]
  %97 = icmp eq i32 %96, 0
  %98 = select i1 %97, ptr %2, ptr %1
  %99 = select i1 %97, ptr %1, ptr %2
  %100 = select i1 %97, i32 %0, i32 %96
  br label %101

101:                                              ; preds = %95, %68, %65, %61
  %102 = phi ptr [ %98, %95 ], [ %2, %65 ], [ %2, %68 ], [ %2, %61 ]
  %103 = phi ptr [ %99, %95 ], [ %1, %65 ], [ %1, %68 ], [ %1, %61 ]
  %104 = phi i32 [ %100, %95 ], [ %0, %65 ], [ %0, %68 ], [ %0, %61 ]
  %105 = load i32, ptr %103, align 8
  %106 = and i32 %105, 65535
  %107 = icmp eq i32 %106, 37
  br i1 %107, label %110, label %108

108:                                              ; preds = %101
  %109 = tail call ptr @force_reg(i32 noundef %11, ptr noundef nonnull %103) #30
  br label %110

110:                                              ; preds = %108, %101
  %111 = phi ptr [ %103, %101 ], [ %109, %108 ]
  %112 = load i32, ptr %102, align 8
  %113 = and i32 %112, 65535
  %114 = zext i32 %113 to i64
  %115 = getelementptr inbounds [139 x i32], ptr @rtx_class, i64 0, i64 %114
  %116 = load i32, ptr %115, align 4, !tbaa !16
  %117 = icmp eq i32 %116, 9
  br i1 %117, label %118, label %130

118:                                              ; preds = %110
  %119 = tail call i32 @standard_80387_constant_p(ptr noundef nonnull %102)
  switch i32 %119, label %128 [
    i32 0, label %120
    i32 1, label %123
  ]

120:                                              ; preds = %118
  %121 = tail call ptr @force_const_mem(i32 noundef %11, ptr noundef nonnull %102) #30
  %122 = tail call ptr @validize_mem(ptr noundef %121) #30
  br label %130

123:                                              ; preds = %118
  %124 = load i8, ptr @ix86_arch_features, align 1, !tbaa !16
  %125 = icmp eq i8 %124, 0
  br i1 %125, label %130, label %126

126:                                              ; preds = %123
  %127 = tail call ptr @force_reg(i32 noundef %11, ptr noundef nonnull %102) #30
  br label %130

128:                                              ; preds = %118
  %129 = tail call ptr @force_reg(i32 noundef %11, ptr noundef nonnull %102) #30
  br label %130

130:                                              ; preds = %128, %126, %123, %120, %110, %55
  %131 = phi ptr [ %102, %110 ], [ %57, %55 ], [ %122, %120 ], [ %127, %126 ], [ %102, %123 ], [ %129, %128 ]
  %132 = phi ptr [ %111, %110 ], [ %56, %55 ], [ %111, %120 ], [ %111, %126 ], [ %111, %123 ], [ %111, %128 ]
  %133 = phi i32 [ %104, %110 ], [ %0, %55 ], [ %104, %120 ], [ %104, %126 ], [ %104, %123 ], [ %104, %128 ]
  switch i32 %133, label %144 [
    i32 95, label %145
    i32 96, label %145
    i32 97, label %145
    i32 83, label %145
    i32 82, label %145
    i32 90, label %145
    i32 91, label %145
    i32 92, label %145
    i32 85, label %134
    i32 80, label %134
    i32 81, label %134
    i32 93, label %134
    i32 84, label %139
    i32 94, label %139
  ]

134:                                              ; preds = %130, %130, %130, %130
  %135 = load i32, ptr @target_flags, align 4, !tbaa !20
  %136 = and i32 %135, 128
  %137 = icmp eq i32 %136, 0
  %138 = select i1 %137, i32 4, i32 5
  br label %145

139:                                              ; preds = %130, %130
  %140 = load i32, ptr @target_flags, align 4, !tbaa !20
  %141 = and i32 %140, 128
  %142 = icmp eq i32 %141, 0
  %143 = select i1 %142, i32 4, i32 6
  br label %145

144:                                              ; preds = %130
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 14789, ptr noundef nonnull @.str.131) #30
  br label %145

145:                                              ; preds = %144, %139, %134, %130, %130, %130, %130, %130, %130, %130, %130
  %146 = phi i32 [ undef, %144 ], [ %143, %139 ], [ %138, %134 ], [ 4, %130 ], [ 4, %130 ], [ 4, %130 ], [ 4, %130 ], [ 4, %130 ], [ 4, %130 ], [ 4, %130 ], [ 4, %130 ]
  %147 = load i8, ptr @ix86_arch_features, align 1, !tbaa !16
  %148 = icmp eq i8 %147, 0
  br i1 %148, label %149, label %160

149:                                              ; preds = %145
  %150 = load i32, ptr @ix86_isa_flags, align 4, !tbaa !20
  %151 = and i32 %150, 32768
  %152 = icmp eq i32 %151, 0
  br i1 %152, label %166, label %153

153:                                              ; preds = %149
  %154 = load i8, ptr getelementptr inbounds ([62 x i8], ptr @ix86_tune_features, i64 0, i64 7), align 1, !tbaa !16
  %155 = icmp eq i8 %154, 0
  br i1 %155, label %156, label %163

156:                                              ; preds = %153
  %157 = load ptr, ptr @cfun, align 8, !tbaa !5
  %158 = tail call zeroext i8 @optimize_function_for_size_p(ptr noundef %157) #30
  %159 = icmp eq i8 %158, 0
  br i1 %159, label %166, label %163

160:                                              ; preds = %145
  %161 = icmp ugt i32 %146, 4
  %162 = select i1 %161, i32 3, i32 2
  br label %166

163:                                              ; preds = %156, %153
  %164 = icmp ugt i32 %146, 4
  %165 = select i1 %164, i32 4, i32 3
  br label %166

166:                                              ; preds = %163, %160, %156, %149
  %167 = phi i32 [ %165, %163 ], [ %162, %160 ], [ %146, %149 ], [ %146, %156 ]
  %168 = tail call i32 @swap_condition(i32 noundef %133) #30
  switch i32 %168, label %179 [
    i32 95, label %180
    i32 96, label %180
    i32 97, label %180
    i32 83, label %180
    i32 82, label %180
    i32 90, label %180
    i32 91, label %180
    i32 92, label %180
    i32 85, label %169
    i32 80, label %169
    i32 81, label %169
    i32 93, label %169
    i32 84, label %174
    i32 94, label %174
  ]

169:                                              ; preds = %166, %166, %166, %166
  %170 = load i32, ptr @target_flags, align 4, !tbaa !20
  %171 = and i32 %170, 128
  %172 = icmp eq i32 %171, 0
  %173 = select i1 %172, i32 4, i32 5
  br label %180

174:                                              ; preds = %166, %166
  %175 = load i32, ptr @target_flags, align 4, !tbaa !20
  %176 = and i32 %175, 128
  %177 = icmp eq i32 %176, 0
  %178 = select i1 %177, i32 4, i32 6
  br label %180

179:                                              ; preds = %166
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 14789, ptr noundef nonnull @.str.131) #30
  br label %180

180:                                              ; preds = %179, %174, %169, %166, %166, %166, %166, %166, %166, %166, %166
  %181 = phi i32 [ undef, %179 ], [ %178, %174 ], [ %173, %169 ], [ 4, %166 ], [ 4, %166 ], [ 4, %166 ], [ 4, %166 ], [ 4, %166 ], [ 4, %166 ], [ 4, %166 ], [ 4, %166 ]
  %182 = load i8, ptr @ix86_arch_features, align 1, !tbaa !16
  %183 = icmp eq i8 %182, 0
  br i1 %183, label %184, label %195

184:                                              ; preds = %180
  %185 = load i32, ptr @ix86_isa_flags, align 4, !tbaa !20
  %186 = and i32 %185, 32768
  %187 = icmp eq i32 %186, 0
  br i1 %187, label %201, label %188

188:                                              ; preds = %184
  %189 = load i8, ptr getelementptr inbounds ([62 x i8], ptr @ix86_tune_features, i64 0, i64 7), align 1, !tbaa !16
  %190 = icmp eq i8 %189, 0
  br i1 %190, label %191, label %198

191:                                              ; preds = %188
  %192 = load ptr, ptr @cfun, align 8, !tbaa !5
  %193 = tail call zeroext i8 @optimize_function_for_size_p(ptr noundef %192) #30
  %194 = icmp eq i8 %193, 0
  br i1 %194, label %201, label %198

195:                                              ; preds = %180
  %196 = icmp ugt i32 %181, 4
  %197 = select i1 %196, i32 3, i32 2
  br label %201

198:                                              ; preds = %191, %188
  %199 = icmp ugt i32 %181, 4
  %200 = select i1 %199, i32 4, i32 3
  br label %201

201:                                              ; preds = %198, %195, %191, %184
  %202 = phi i32 [ %200, %198 ], [ %197, %195 ], [ %181, %184 ], [ %181, %191 ]
  %203 = icmp ugt i32 %167, %202
  br i1 %203, label %204, label %221

204:                                              ; preds = %201
  %205 = load i32, ptr %131, align 8
  %206 = and i32 %205, 65535
  %207 = icmp eq i32 %206, 37
  br i1 %207, label %214, label %208

208:                                              ; preds = %204
  %209 = load i32, ptr @reload_in_progress, align 4, !tbaa !20
  %210 = icmp ne i32 %209, 0
  %211 = load i32, ptr @reload_completed, align 4
  %212 = icmp ne i32 %211, 0
  %213 = select i1 %210, i1 true, i1 %212
  br i1 %213, label %221, label %214

214:                                              ; preds = %208, %204
  %215 = tail call i32 @swap_condition(i32 noundef %133) #30
  %216 = load i32, ptr %131, align 8
  %217 = and i32 %216, 65535
  %218 = icmp eq i32 %217, 37
  br i1 %218, label %221, label %219

219:                                              ; preds = %214
  %220 = tail call ptr @force_reg(i32 noundef %11, ptr noundef nonnull %131) #30
  br label %221

221:                                              ; preds = %201, %208, %214, %219
  %222 = phi ptr [ %131, %208 ], [ %131, %201 ], [ %132, %219 ], [ %132, %214 ]
  %223 = phi ptr [ %132, %208 ], [ %132, %201 ], [ %220, %219 ], [ %131, %214 ]
  %224 = phi i32 [ %133, %208 ], [ %133, %201 ], [ %215, %219 ], [ %215, %214 ]
  %225 = load i8, ptr @ix86_arch_features, align 1, !tbaa !16
  %226 = icmp eq i8 %225, 0
  br i1 %226, label %227, label %238

227:                                              ; preds = %221
  %228 = load i32, ptr @ix86_isa_flags, align 4, !tbaa !20
  %229 = and i32 %228, 32768
  %230 = icmp eq i32 %229, 0
  br i1 %230, label %256, label %231

231:                                              ; preds = %227
  %232 = load i8, ptr getelementptr inbounds ([62 x i8], ptr @ix86_tune_features, i64 0, i64 7), align 1, !tbaa !16
  %233 = icmp eq i8 %232, 0
  br i1 %233, label %234, label %243

234:                                              ; preds = %231
  %235 = load ptr, ptr @cfun, align 8, !tbaa !5
  %236 = tail call zeroext i8 @optimize_function_for_size_p(ptr noundef %235) #30
  %237 = icmp eq i8 %236, 0
  br i1 %237, label %256, label %243

238:                                              ; preds = %221
  %239 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 48, i32 noundef %8, ptr noundef %223, ptr noundef %222) #30
  %240 = tail call ptr @gen_rtx_REG(i32 noundef %8, i32 noundef 17) #30
  %241 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 23, i32 noundef 0, ptr noundef %240, ptr noundef %239) #30
  %242 = tail call ptr @emit_insn(ptr noundef %241) #30
  br label %372

243:                                              ; preds = %234, %231
  %244 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 48, i32 noundef %8, ptr noundef %223, ptr noundef %222) #30
  %245 = tail call ptr @gen_rtx_REG(i32 noundef %8, i32 noundef 17) #30
  %246 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 23, i32 noundef 0, ptr noundef %245, ptr noundef %244) #30
  %247 = icmp eq ptr %3, null
  br i1 %247, label %248, label %250

248:                                              ; preds = %243
  %249 = tail call ptr @gen_reg_rtx(i32 noundef 15) #30
  br label %250

250:                                              ; preds = %248, %243
  %251 = phi ptr [ %3, %243 ], [ %249, %248 ]
  %252 = tail call ptr @gen_rtx_fmt_e_stat(i32 noundef 25, i32 noundef 0, ptr noundef %251) #30
  %253 = tail call ptr (i32, ...) @gen_rtvec(i32 noundef 2, ptr noundef %246, ptr noundef %252) #30
  %254 = tail call ptr @gen_rtx_fmt_E_stat(i32 noundef 15, i32 noundef 0, ptr noundef %253) #30
  %255 = tail call ptr @emit_insn(ptr noundef %254) #30
  br label %372

256:                                              ; preds = %234, %227
  %257 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 48, i32 noundef %8, ptr noundef %223, ptr noundef %222) #30
  %258 = tail call ptr (i32, ...) @gen_rtvec(i32 noundef 1, ptr noundef %257) #30
  %259 = tail call ptr @gen_rtx_fmt_Ei_stat(i32 noundef 18, i32 noundef 15, ptr noundef %258, i32 noundef 31) #30
  %260 = icmp eq ptr %3, null
  br i1 %260, label %261, label %263

261:                                              ; preds = %256
  %262 = tail call ptr @gen_reg_rtx(i32 noundef 15) #30
  br label %263

263:                                              ; preds = %261, %256
  %264 = phi ptr [ %3, %256 ], [ %262, %261 ]
  %265 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 23, i32 noundef 0, ptr noundef %264, ptr noundef %259) #30
  %266 = tail call ptr @emit_insn(ptr noundef %265) #30
  switch i32 %224, label %371 [
    i32 91, label %367
    i32 90, label %363
    i32 94, label %267
    i32 83, label %271
    i32 96, label %296
    i32 85, label %285
    i32 93, label %300
    i32 82, label %304
    i32 95, label %329
    i32 84, label %315
    i32 92, label %344
    i32 81, label %333
    i32 80, label %348
    i32 97, label %359
  ]

267:                                              ; preds = %263
  %268 = load i32, ptr @target_flags, align 4, !tbaa !20
  %269 = and i32 %268, 128
  %270 = icmp eq i32 %269, 0
  br i1 %270, label %271, label %275

271:                                              ; preds = %263, %267
  %272 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef 69) #30
  %273 = tail call ptr @gen_testqi_ext_ccno_0(ptr noundef %264, ptr noundef %272) #30
  %274 = tail call ptr @emit_insn(ptr noundef %273) #30
  br label %372

275:                                              ; preds = %267
  %276 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef 69) #30
  %277 = tail call ptr @gen_andqi_ext_0(ptr noundef %264, ptr noundef %264, ptr noundef %276) #30
  %278 = tail call ptr @emit_insn(ptr noundef %277) #30
  %279 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 63), align 8, !tbaa !5
  %280 = tail call ptr @gen_addqi_ext_1(ptr noundef %264, ptr noundef %264, ptr noundef %279) #30
  %281 = tail call ptr @emit_insn(ptr noundef %280) #30
  %282 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef 68) #30
  %283 = tail call ptr @gen_cmpqi_ext_3(ptr noundef %264, ptr noundef %282) #30
  %284 = tail call ptr @emit_insn(ptr noundef %283) #30
  br label %372

285:                                              ; preds = %263
  %286 = load i32, ptr @target_flags, align 4, !tbaa !20
  %287 = and i32 %286, 128
  %288 = icmp eq i32 %287, 0
  br i1 %288, label %296, label %289

289:                                              ; preds = %285
  %290 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef 69) #30
  %291 = tail call ptr @gen_andqi_ext_0(ptr noundef %264, ptr noundef %264, ptr noundef %290) #30
  %292 = tail call ptr @emit_insn(ptr noundef %291) #30
  %293 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 65), align 8, !tbaa !5
  %294 = tail call ptr @gen_cmpqi_ext_3(ptr noundef %264, ptr noundef %293) #30
  %295 = tail call ptr @emit_insn(ptr noundef %294) #30
  br label %372

296:                                              ; preds = %263, %285
  %297 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 65), align 8, !tbaa !5
  %298 = tail call ptr @gen_testqi_ext_ccno_0(ptr noundef %264, ptr noundef %297) #30
  %299 = tail call ptr @emit_insn(ptr noundef %298) #30
  br label %372

300:                                              ; preds = %263
  %301 = load i32, ptr @target_flags, align 4, !tbaa !20
  %302 = and i32 %301, 128
  %303 = icmp eq i32 %302, 0
  br i1 %303, label %304, label %308

304:                                              ; preds = %263, %300
  %305 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef 5) #30
  %306 = tail call ptr @gen_testqi_ext_ccno_0(ptr noundef %264, ptr noundef %305) #30
  %307 = tail call ptr @emit_insn(ptr noundef %306) #30
  br label %372

308:                                              ; preds = %300
  %309 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef 69) #30
  %310 = tail call ptr @gen_andqi_ext_0(ptr noundef %264, ptr noundef %264, ptr noundef %309) #30
  %311 = tail call ptr @emit_insn(ptr noundef %310) #30
  %312 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 65), align 8, !tbaa !5
  %313 = tail call ptr @gen_xorqi_cc_ext_1(ptr noundef %264, ptr noundef %264, ptr noundef %312) #30
  %314 = tail call ptr @emit_insn(ptr noundef %313) #30
  br label %372

315:                                              ; preds = %263
  %316 = load i32, ptr @target_flags, align 4, !tbaa !20
  %317 = and i32 %316, 128
  %318 = icmp eq i32 %317, 0
  br i1 %318, label %329, label %319

319:                                              ; preds = %315
  %320 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef 69) #30
  %321 = tail call ptr @gen_andqi_ext_0(ptr noundef %264, ptr noundef %264, ptr noundef %320) #30
  %322 = tail call ptr @emit_insn(ptr noundef %321) #30
  %323 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 63), align 8, !tbaa !5
  %324 = tail call ptr @gen_addqi_ext_1(ptr noundef %264, ptr noundef %264, ptr noundef %323) #30
  %325 = tail call ptr @emit_insn(ptr noundef %324) #30
  %326 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef 64) #30
  %327 = tail call ptr @gen_cmpqi_ext_3(ptr noundef %264, ptr noundef %326) #30
  %328 = tail call ptr @emit_insn(ptr noundef %327) #30
  br label %372

329:                                              ; preds = %263, %315
  %330 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef 69) #30
  %331 = tail call ptr @gen_testqi_ext_ccno_0(ptr noundef %264, ptr noundef %330) #30
  %332 = tail call ptr @emit_insn(ptr noundef %331) #30
  br label %372

333:                                              ; preds = %263
  %334 = load i32, ptr @target_flags, align 4, !tbaa !20
  %335 = and i32 %334, 128
  %336 = icmp eq i32 %335, 0
  br i1 %336, label %344, label %337

337:                                              ; preds = %333
  %338 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef 69) #30
  %339 = tail call ptr @gen_andqi_ext_0(ptr noundef %264, ptr noundef %264, ptr noundef %338) #30
  %340 = tail call ptr @emit_insn(ptr noundef %339) #30
  %341 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef 64) #30
  %342 = tail call ptr @gen_cmpqi_ext_3(ptr noundef %264, ptr noundef %341) #30
  %343 = tail call ptr @emit_insn(ptr noundef %342) #30
  br label %372

344:                                              ; preds = %263, %333
  %345 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef 64) #30
  %346 = tail call ptr @gen_testqi_ext_ccno_0(ptr noundef %264, ptr noundef %345) #30
  %347 = tail call ptr @emit_insn(ptr noundef %346) #30
  br label %372

348:                                              ; preds = %263
  %349 = load i32, ptr @target_flags, align 4, !tbaa !20
  %350 = and i32 %349, 128
  %351 = icmp eq i32 %350, 0
  br i1 %351, label %359, label %352

352:                                              ; preds = %348
  %353 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef 69) #30
  %354 = tail call ptr @gen_andqi_ext_0(ptr noundef %264, ptr noundef %264, ptr noundef %353) #30
  %355 = tail call ptr @emit_insn(ptr noundef %354) #30
  %356 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef 64) #30
  %357 = tail call ptr @gen_xorqi_cc_ext_1(ptr noundef %264, ptr noundef %264, ptr noundef %356) #30
  %358 = tail call ptr @emit_insn(ptr noundef %357) #30
  br label %372

359:                                              ; preds = %263, %348
  %360 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef 64) #30
  %361 = tail call ptr @gen_testqi_ext_ccno_0(ptr noundef %264, ptr noundef %360) #30
  %362 = tail call ptr @emit_insn(ptr noundef %361) #30
  br label %372

363:                                              ; preds = %263
  %364 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef 4) #30
  %365 = tail call ptr @gen_testqi_ext_ccno_0(ptr noundef %264, ptr noundef %364) #30
  %366 = tail call ptr @emit_insn(ptr noundef %365) #30
  br label %372

367:                                              ; preds = %263
  %368 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef 4) #30
  %369 = tail call ptr @gen_testqi_ext_ccno_0(ptr noundef %264, ptr noundef %368) #30
  %370 = tail call ptr @emit_insn(ptr noundef %369) #30
  br label %372

371:                                              ; preds = %263
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 15091, ptr noundef nonnull @.str.131) #30
  br label %372

372:                                              ; preds = %363, %367, %371, %275, %271, %296, %289, %308, %304, %329, %319, %344, %337, %359, %352, %250, %238
  %373 = phi i32 [ %224, %371 ], [ 81, %367 ], [ 80, %363 ], [ 80, %352 ], [ 81, %359 ], [ 81, %337 ], [ 80, %344 ], [ 89, %319 ], [ 80, %329 ], [ 81, %304 ], [ 80, %308 ], [ 81, %289 ], [ 80, %296 ], [ 81, %271 ], [ 86, %275 ], [ %224, %250 ], [ %224, %238 ]
  %374 = phi i32 [ 5, %371 ], [ 5, %367 ], [ 5, %363 ], [ 5, %352 ], [ 5, %359 ], [ 2, %337 ], [ 5, %344 ], [ 2, %319 ], [ 5, %329 ], [ 5, %304 ], [ 5, %308 ], [ 2, %289 ], [ 5, %296 ], [ 5, %271 ], [ 2, %275 ], [ %8, %250 ], [ %8, %238 ]
  %375 = tail call ptr @gen_rtx_REG(i32 noundef %374, i32 noundef 17) #30
  %376 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 64), align 16, !tbaa !5
  %377 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef %373, i32 noundef 0, ptr noundef %375, ptr noundef %376) #30
  ret ptr %377
}

; Function Attrs: nounwind sspstrong uwtable
define dso_local void @ix86_expand_branch(i32 noundef %0, ptr noundef %1) local_unnamed_addr #9 {
  %3 = alloca [2 x ptr], align 16
  %4 = alloca [2 x ptr], align 16
  %5 = load ptr, ptr @ix86_compare_op0, align 8, !tbaa !5
  %6 = load i32, ptr %5, align 8
  %7 = lshr i32 %6, 16
  %8 = trunc i32 %7 to i8
  switch i8 %8, label %165 [
    i8 38, label %9
    i8 39, label %9
    i8 40, label %9
    i8 14, label %9
    i8 15, label %9
    i8 16, label %9
    i8 17, label %17
    i8 18, label %17
  ]

9:                                                ; preds = %171, %165, %2, %2, %2, %2, %2, %2
  %10 = tail call ptr @ix86_expand_compare(i32 noundef %0)
  %11 = tail call ptr @gen_rtx_fmt_u_stat(i32 noundef 44, i32 noundef 0, ptr noundef %1) #30
  %12 = load ptr, ptr @global_rtl, align 16, !tbaa !5
  %13 = tail call ptr @gen_rtx_fmt_eee_stat(i32 noundef 47, i32 noundef 0, ptr noundef %10, ptr noundef %11, ptr noundef %12) #30
  %14 = load ptr, ptr @global_rtl, align 16, !tbaa !5
  %15 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 23, i32 noundef 0, ptr noundef %14, ptr noundef %13) #30
  %16 = tail call ptr @emit_jump_insn(ptr noundef %15) #30
  br label %172

17:                                               ; preds = %2, %2
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %3) #30
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %4) #30
  %18 = and i32 %6, 65535
  %19 = zext i32 %18 to i64
  %20 = getelementptr inbounds [139 x i32], ptr @rtx_class, i64 0, i64 %19
  %21 = load i32, ptr %20, align 4, !tbaa !16
  %22 = icmp eq i32 %21, 9
  br i1 %22, label %23, label %35

23:                                               ; preds = %17
  %24 = load ptr, ptr @ix86_compare_op1, align 8, !tbaa !5
  %25 = load i32, ptr %24, align 8
  %26 = and i32 %25, 65535
  %27 = zext i32 %26 to i64
  %28 = getelementptr inbounds [139 x i32], ptr @rtx_class, i64 0, i64 %27
  %29 = load i32, ptr %28, align 4, !tbaa !16
  %30 = icmp eq i32 %29, 9
  br i1 %30, label %35, label %31

31:                                               ; preds = %23
  store ptr %24, ptr @ix86_compare_op0, align 8, !tbaa !5
  store ptr %5, ptr @ix86_compare_op1, align 8, !tbaa !5
  %32 = tail call i32 @swap_condition(i32 noundef %0) #30
  %33 = load ptr, ptr @ix86_compare_op0, align 8, !tbaa !5
  %34 = load i32, ptr %33, align 8
  br label %35

35:                                               ; preds = %31, %23, %17
  %36 = phi i32 [ %6, %23 ], [ %34, %31 ], [ %6, %17 ]
  %37 = phi ptr [ %5, %23 ], [ %33, %31 ], [ %5, %17 ]
  %38 = phi i32 [ %0, %23 ], [ %32, %31 ], [ %0, %17 ]
  %39 = and i32 %36, 16711680
  %40 = icmp eq i32 %39, 1114112
  br i1 %40, label %44, label %41

41:                                               ; preds = %35
  %42 = and i32 %36, 65535
  %43 = icmp eq i32 %42, 43
  br i1 %43, label %47, label %50

44:                                               ; preds = %35
  call void @split_di(ptr noundef nonnull @ix86_compare_op0, i32 noundef 1, ptr noundef nonnull %3, ptr noundef nonnull %4)
  %45 = getelementptr inbounds ptr, ptr %3, i64 1
  %46 = getelementptr inbounds ptr, ptr %4, i64 1
  call void @split_di(ptr noundef nonnull @ix86_compare_op1, i32 noundef 1, ptr noundef nonnull %45, ptr noundef nonnull %46)
  br label %71

47:                                               ; preds = %41
  %48 = tail call ptr @adjust_address_1(ptr noundef nonnull %37, i32 noundef 17, i64 noundef 0, i32 noundef 1, i32 noundef 1) #30
  %49 = tail call ptr @adjust_address_1(ptr noundef nonnull %37, i32 noundef 17, i64 noundef 8, i32 noundef 1, i32 noundef 1) #30
  br label %53

50:                                               ; preds = %41
  %51 = tail call ptr @simplify_gen_subreg(i32 noundef 17, ptr noundef nonnull %37, i32 noundef 18, i32 noundef 0) #30
  %52 = tail call ptr @simplify_gen_subreg(i32 noundef 17, ptr noundef nonnull %37, i32 noundef 18, i32 noundef 8) #30
  br label %53

53:                                               ; preds = %50, %47
  %54 = phi ptr [ %48, %47 ], [ %51, %50 ]
  %55 = phi ptr [ %49, %47 ], [ %52, %50 ]
  store ptr %54, ptr %3, align 16
  store ptr %55, ptr %4, align 16
  %56 = load ptr, ptr @ix86_compare_op1, align 8, !tbaa !5
  %57 = load i32, ptr %56, align 8
  %58 = and i32 %57, 65535
  %59 = icmp eq i32 %58, 43
  %60 = getelementptr inbounds ptr, ptr %3, i64 1
  br i1 %59, label %61, label %64

61:                                               ; preds = %53
  %62 = tail call ptr @adjust_address_1(ptr noundef nonnull %56, i32 noundef 17, i64 noundef 0, i32 noundef 1, i32 noundef 1) #30
  %63 = tail call ptr @adjust_address_1(ptr noundef nonnull %56, i32 noundef 17, i64 noundef 8, i32 noundef 1, i32 noundef 1) #30
  br label %67

64:                                               ; preds = %53
  %65 = tail call ptr @simplify_gen_subreg(i32 noundef 17, ptr noundef nonnull %56, i32 noundef 18, i32 noundef 0) #30
  %66 = tail call ptr @simplify_gen_subreg(i32 noundef 17, ptr noundef nonnull %56, i32 noundef 18, i32 noundef 8) #30
  br label %67

67:                                               ; preds = %64, %61
  %68 = phi ptr [ %62, %61 ], [ %65, %64 ]
  %69 = phi ptr [ %63, %61 ], [ %66, %64 ]
  store ptr %68, ptr %60, align 8
  %70 = getelementptr inbounds ptr, ptr %4, i64 1
  store ptr %69, ptr %70, align 8
  br label %71

71:                                               ; preds = %67, %44
  %72 = phi i32 [ 16, %44 ], [ 17, %67 ]
  %73 = and i32 %38, -2
  %74 = icmp eq i32 %73, 80
  br i1 %74, label %78, label %75

75:                                               ; preds = %71
  %76 = getelementptr inbounds [2 x ptr], ptr %4, i64 0, i64 1
  %77 = load ptr, ptr %76, align 8, !tbaa !5
  br label %109

78:                                               ; preds = %71
  %79 = tail call zeroext i8 @optimize_insn_for_size_p() #30
  %80 = icmp eq i8 %79, 0
  %81 = getelementptr inbounds [2 x ptr], ptr %4, i64 0, i64 1
  %82 = load ptr, ptr %81, align 8, !tbaa !5
  %83 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 64), align 16, !tbaa !5
  br i1 %80, label %90, label %84

84:                                               ; preds = %78
  %85 = icmp eq ptr %82, %83
  %86 = getelementptr inbounds [2 x ptr], ptr %3, i64 0, i64 1
  %87 = load ptr, ptr %86, align 8
  %88 = icmp eq ptr %87, %83
  %89 = select i1 %85, i1 true, i1 %88
  br i1 %89, label %90, label %109

90:                                               ; preds = %78, %84
  %91 = load ptr, ptr %4, align 16, !tbaa !5
  %92 = icmp eq ptr %82, %83
  br i1 %92, label %96, label %93

93:                                               ; preds = %90
  %94 = tail call ptr @expand_binop(i32 noundef %72, ptr noundef nonnull getelementptr inbounds ([159 x %struct.optab_d], ptr @optab_table, i64 0, i64 43), ptr noundef %91, ptr noundef %82, ptr noundef null, i32 noundef 0, i32 noundef 2) #30
  %95 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 64), align 16, !tbaa !5
  br label %96

96:                                               ; preds = %93, %90
  %97 = phi ptr [ %95, %93 ], [ %83, %90 ]
  %98 = phi ptr [ %94, %93 ], [ %91, %90 ]
  %99 = load ptr, ptr %3, align 16, !tbaa !5
  %100 = getelementptr inbounds [2 x ptr], ptr %3, i64 0, i64 1
  %101 = load ptr, ptr %100, align 8, !tbaa !5
  %102 = icmp eq ptr %101, %97
  br i1 %102, label %105, label %103

103:                                              ; preds = %96
  %104 = tail call ptr @expand_binop(i32 noundef %72, ptr noundef nonnull getelementptr inbounds ([159 x %struct.optab_d], ptr @optab_table, i64 0, i64 43), ptr noundef %99, ptr noundef %101, ptr noundef null, i32 noundef 0, i32 noundef 2) #30
  br label %105

105:                                              ; preds = %103, %96
  %106 = phi ptr [ %104, %103 ], [ %99, %96 ]
  %107 = tail call ptr @expand_binop(i32 noundef %72, ptr noundef nonnull getelementptr inbounds ([159 x %struct.optab_d], ptr @optab_table, i64 0, i64 42), ptr noundef %98, ptr noundef %106, ptr noundef null, i32 noundef 0, i32 noundef 2) #30
  store ptr %107, ptr @ix86_compare_op0, align 8, !tbaa !5
  %108 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 64), align 16, !tbaa !5
  store ptr %108, ptr @ix86_compare_op1, align 8, !tbaa !5
  tail call void @ix86_expand_branch(i32 noundef %38, ptr noundef %1)
  br label %164

109:                                              ; preds = %75, %84
  %110 = phi ptr [ %77, %75 ], [ %82, %84 ]
  %111 = load i32, ptr %110, align 8
  %112 = and i32 %111, 65535
  %113 = icmp eq i32 %112, 30
  br i1 %113, label %114, label %129

114:                                              ; preds = %109
  switch i32 %38, label %129 [
    i32 85, label %115
    i32 89, label %115
    i32 82, label %115
    i32 86, label %115
    i32 84, label %122
    i32 88, label %122
    i32 83, label %122
    i32 87, label %122
  ]

115:                                              ; preds = %114, %114, %114, %114
  %116 = getelementptr inbounds [2 x ptr], ptr %3, i64 0, i64 1
  %117 = load ptr, ptr %116, align 8, !tbaa !5
  %118 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 64), align 16, !tbaa !5
  %119 = icmp eq ptr %117, %118
  br i1 %119, label %120, label %129

120:                                              ; preds = %115
  %121 = load ptr, ptr %4, align 16, !tbaa !5
  store ptr %121, ptr @ix86_compare_op0, align 8, !tbaa !5
  store ptr %110, ptr @ix86_compare_op1, align 8, !tbaa !5
  tail call void @ix86_expand_branch(i32 noundef %38, ptr noundef %1)
  br label %164

122:                                              ; preds = %114, %114, %114, %114
  %123 = getelementptr inbounds [2 x ptr], ptr %3, i64 0, i64 1
  %124 = load ptr, ptr %123, align 8, !tbaa !5
  %125 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 63), align 8, !tbaa !5
  %126 = icmp eq ptr %124, %125
  br i1 %126, label %127, label %129

127:                                              ; preds = %122
  %128 = load ptr, ptr %4, align 16, !tbaa !5
  store ptr %128, ptr @ix86_compare_op0, align 8, !tbaa !5
  store ptr %110, ptr @ix86_compare_op1, align 8, !tbaa !5
  tail call void @ix86_expand_branch(i32 noundef %38, ptr noundef %1)
  br label %164

129:                                              ; preds = %115, %122, %114, %109
  %130 = tail call ptr @gen_label_rtx() #30
  %131 = tail call i32 @swap_condition(i32 noundef %38) #30
  %132 = tail call i32 @unsigned_condition(i32 noundef %38) #30
  switch i32 %38, label %145 [
    i32 85, label %141
    i32 83, label %141
    i32 89, label %141
    i32 87, label %141
    i32 84, label %133
    i32 82, label %134
    i32 88, label %135
    i32 86, label %136
    i32 81, label %137
    i32 80, label %140
  ]

133:                                              ; preds = %129
  br label %141

134:                                              ; preds = %129
  br label %141

135:                                              ; preds = %129
  br label %141

136:                                              ; preds = %129
  br label %141

137:                                              ; preds = %129
  %138 = load ptr, ptr %4, align 16, !tbaa !5
  store ptr %138, ptr @ix86_compare_op0, align 8, !tbaa !5
  store ptr %110, ptr @ix86_compare_op1, align 8, !tbaa !5
  %139 = load ptr, ptr %3, align 16, !tbaa !5
  br label %155

140:                                              ; preds = %129
  br label %141

141:                                              ; preds = %140, %136, %135, %134, %133, %129, %129, %129, %129
  %142 = phi i32 [ %38, %129 ], [ %38, %129 ], [ %38, %129 ], [ %38, %129 ], [ 85, %133 ], [ 83, %134 ], [ 89, %135 ], [ 87, %136 ], [ 80, %140 ]
  %143 = phi i32 [ %131, %129 ], [ %131, %129 ], [ %131, %129 ], [ %131, %129 ], [ 83, %133 ], [ 85, %134 ], [ 87, %135 ], [ 89, %136 ], [ 0, %140 ]
  %144 = load ptr, ptr %4, align 16, !tbaa !5
  store ptr %144, ptr @ix86_compare_op0, align 8, !tbaa !5
  store ptr %110, ptr @ix86_compare_op1, align 8, !tbaa !5
  br label %148

145:                                              ; preds = %129
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 15259, ptr noundef nonnull @.str.131) #30
  %146 = load ptr, ptr %4, align 16, !tbaa !5
  store ptr %146, ptr @ix86_compare_op0, align 8, !tbaa !5
  store ptr %110, ptr @ix86_compare_op1, align 8, !tbaa !5
  %147 = icmp eq i32 %38, 0
  br i1 %147, label %151, label %148

148:                                              ; preds = %141, %145
  %149 = phi i32 [ %143, %141 ], [ %131, %145 ]
  %150 = phi i32 [ %142, %141 ], [ %38, %145 ]
  tail call void @ix86_expand_branch(i32 noundef %150, ptr noundef %1)
  br label %151

151:                                              ; preds = %148, %145
  %152 = phi i32 [ %149, %148 ], [ %131, %145 ]
  %153 = icmp eq i32 %152, 0
  %154 = load ptr, ptr %3, align 16, !tbaa !5
  br i1 %153, label %161, label %155

155:                                              ; preds = %137, %151
  %156 = phi ptr [ %139, %137 ], [ %154, %151 ]
  %157 = phi i32 [ 80, %137 ], [ %152, %151 ]
  tail call void @ix86_expand_branch(i32 noundef %157, ptr noundef %130)
  store ptr %156, ptr @ix86_compare_op0, align 8, !tbaa !5
  %158 = getelementptr inbounds [2 x ptr], ptr %3, i64 0, i64 1
  %159 = load ptr, ptr %158, align 8, !tbaa !5
  store ptr %159, ptr @ix86_compare_op1, align 8, !tbaa !5
  tail call void @ix86_expand_branch(i32 noundef %132, ptr noundef %1)
  %160 = tail call ptr @emit_label(ptr noundef %130) #30
  br label %164

161:                                              ; preds = %151
  store ptr %154, ptr @ix86_compare_op0, align 8, !tbaa !5
  %162 = getelementptr inbounds [2 x ptr], ptr %3, i64 0, i64 1
  %163 = load ptr, ptr %162, align 8, !tbaa !5
  store ptr %163, ptr @ix86_compare_op1, align 8, !tbaa !5
  tail call void @ix86_expand_branch(i32 noundef %132, ptr noundef %1)
  br label %164

164:                                              ; preds = %155, %161, %127, %120, %105
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %4) #30
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %3) #30
  br label %172

165:                                              ; preds = %2
  %166 = and i32 %7, 255
  %167 = zext i32 %166 to i64
  %168 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %167
  %169 = load i8, ptr %168, align 1, !tbaa !16
  %170 = icmp eq i8 %169, 1
  br i1 %170, label %9, label %171

171:                                              ; preds = %165
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 15291, ptr noundef nonnull @.str.131) #30
  br label %9

172:                                              ; preds = %164, %9
  ret void
}

declare ptr @gen_rtx_fmt_eee_stat(i32 noundef, i32 noundef, ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

declare i32 @swap_condition(i32 noundef) local_unnamed_addr #3

declare ptr @expand_binop(i32 noundef, ptr noundef, ptr noundef, ptr noundef, ptr noundef, i32 noundef, i32 noundef) local_unnamed_addr #3

declare i32 @unsigned_condition(i32 noundef) local_unnamed_addr #3

declare ptr @emit_label(ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define dso_local void @ix86_split_fp_branch(i32 noundef %0, ptr noundef %1, ptr noundef %2, ptr noundef %3, ptr noundef %4, ptr noundef %5, ptr noundef readonly %6) local_unnamed_addr #9 {
  %8 = load ptr, ptr @global_rtl, align 16, !tbaa !5
  %9 = icmp eq ptr %8, %4
  br i1 %9, label %12, label %10

10:                                               ; preds = %7
  %11 = tail call i32 @reverse_condition_maybe_unordered(i32 noundef %0) #30
  br label %12

12:                                               ; preds = %10, %7
  %13 = phi ptr [ %3, %10 ], [ %4, %7 ]
  %14 = phi ptr [ %4, %10 ], [ %3, %7 ]
  %15 = phi i32 [ %11, %10 ], [ %0, %7 ]
  %16 = tail call fastcc ptr @ix86_expand_fp_compare(i32 noundef %15, ptr noundef %1, ptr noundef %2, ptr noundef %5)
  %17 = icmp eq ptr %6, null
  br i1 %17, label %32, label %18

18:                                               ; preds = %12
  %19 = load i32, ptr @target_flags, align 4, !tbaa !20
  %20 = and i32 %19, 16384
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %32, label %22

22:                                               ; preds = %18
  %23 = load i32, ptr %6, align 8
  %24 = and i32 %23, 16711680
  %25 = icmp eq i32 %24, 1114112
  %26 = select i1 %25, i64 8, i64 4
  %27 = load ptr, ptr getelementptr inbounds ([11 x ptr], ptr @global_rtl, i64 0, i64 2), align 16, !tbaa !5
  %28 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef %26) #30
  %29 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 49, i32 noundef 16, ptr noundef %27, ptr noundef %28) #30
  %30 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 23, i32 noundef 0, ptr noundef %27, ptr noundef %29) #30
  %31 = tail call ptr @emit_insn(ptr noundef %30) #30
  br label %32

32:                                               ; preds = %22, %18, %12
  %33 = load ptr, ptr @global_rtl, align 16, !tbaa !5
  %34 = tail call ptr @gen_rtx_fmt_eee_stat(i32 noundef 47, i32 noundef 0, ptr noundef %16, ptr noundef %14, ptr noundef %13) #30
  %35 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 23, i32 noundef 0, ptr noundef %33, ptr noundef %34) #30
  %36 = tail call ptr @emit_jump_insn(ptr noundef %35) #30
  %37 = load i32, ptr @split_branch_probability, align 4, !tbaa !20
  %38 = icmp sgt i32 %37, -1
  br i1 %38, label %39, label %42

39:                                               ; preds = %32
  %40 = zext i32 %37 to i64
  %41 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef %40) #30
  tail call void @add_reg_note(ptr noundef %36, i32 noundef 13, ptr noundef %41) #30
  br label %42

42:                                               ; preds = %39, %32
  ret void
}

declare i32 @reverse_condition_maybe_unordered(i32 noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define dso_local void @ix86_free_from_memory(i32 noundef %0) local_unnamed_addr #9 {
  %2 = load i32, ptr @target_flags, align 4, !tbaa !20
  %3 = and i32 %2, 16384
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %13, label %5

5:                                                ; preds = %1
  %6 = icmp eq i32 %0, 17
  %7 = select i1 %6, i64 8, i64 4
  %8 = load ptr, ptr getelementptr inbounds ([11 x ptr], ptr @global_rtl, i64 0, i64 2), align 16, !tbaa !5
  %9 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef %7) #30
  %10 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 49, i32 noundef 16, ptr noundef %8, ptr noundef %9) #30
  %11 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 23, i32 noundef 0, ptr noundef %8, ptr noundef %10) #30
  %12 = tail call ptr @emit_insn(ptr noundef %11) #30
  br label %13

13:                                               ; preds = %5, %1
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define dso_local void @ix86_expand_setcc(i32 noundef %0, ptr noundef %1) local_unnamed_addr #9 {
  %3 = load i32, ptr %1, align 8
  %4 = and i32 %3, 16711680
  %5 = icmp eq i32 %4, 917504
  br i1 %5, label %7, label %6

6:                                                ; preds = %2
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 15332, ptr noundef nonnull @.str.131) #30
  br label %7

7:                                                ; preds = %2, %6
  %8 = tail call ptr @ix86_expand_compare(i32 noundef %0)
  %9 = load i32, ptr %8, align 8
  %10 = and i32 %9, -16711681
  %11 = or i32 %10, 917504
  store i32 %11, ptr %8, align 8
  %12 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 23, i32 noundef 0, ptr noundef nonnull %1, ptr noundef nonnull %8) #30
  %13 = tail call ptr @emit_insn(ptr noundef %12) #30
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define dso_local i32 @ix86_expand_int_movcc(ptr nocapture noundef %0) local_unnamed_addr #9 {
  %2 = alloca ptr, align 8
  %3 = getelementptr inbounds ptr, ptr %0, i64 1
  %4 = load ptr, ptr %3, align 8, !tbaa !5
  %5 = load i32, ptr %4, align 8
  %6 = and i32 %5, 65535
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %2) #30
  %7 = load ptr, ptr %0, align 8, !tbaa !5
  %8 = load i32, ptr %7, align 8
  %9 = lshr i32 %8, 16
  %10 = and i32 %9, 255
  tail call void @start_sequence() #30
  %11 = load ptr, ptr %3, align 8, !tbaa !5
  %12 = getelementptr inbounds %struct.rtx_def, ptr %11, i64 0, i32 1
  %13 = load ptr, ptr %12, align 8, !tbaa !16
  store ptr %13, ptr @ix86_compare_op0, align 8, !tbaa !5
  %14 = getelementptr inbounds %struct.rtx_def, ptr %11, i64 0, i32 1, i32 0, i32 0, i64 1
  %15 = load ptr, ptr %14, align 8, !tbaa !16
  store ptr %15, ptr @ix86_compare_op1, align 8, !tbaa !5
  %16 = tail call ptr @ix86_expand_compare(i32 noundef %6)
  store ptr %16, ptr %2, align 8, !tbaa !5
  %17 = tail call ptr @get_insns() #30
  tail call void @end_sequence() #30
  %18 = load i32, ptr %16, align 8
  %19 = and i32 %18, 65535
  %20 = load ptr, ptr @ix86_compare_op1, align 8, !tbaa !5
  %21 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 64), align 16, !tbaa !5
  %22 = icmp eq ptr %20, %21
  br i1 %22, label %23, label %25

23:                                               ; preds = %1
  %24 = trunc i32 %5 to i16
  switch i16 %24, label %25 [
    i16 85, label %31
    i16 82, label %31
  ]

25:                                               ; preds = %23, %1
  %26 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 63), align 8, !tbaa !5
  %27 = icmp eq ptr %20, %26
  %28 = add nsw i32 %6, -83
  %29 = icmp ult i32 %28, 2
  %30 = select i1 %27, i1 %29, i1 false
  br i1 %30, label %31, label %32

31:                                               ; preds = %25, %23, %23
  br label %32

32:                                               ; preds = %31, %25
  %33 = phi i1 [ false, %31 ], [ true, %25 ]
  %34 = icmp ne i32 %10, 15
  %35 = load i8, ptr getelementptr inbounds ([62 x i8], ptr @ix86_tune_features, i64 0, i64 20), align 4
  %36 = icmp ne i8 %35, 0
  %37 = select i1 %34, i1 true, i1 %36
  %38 = icmp ne i32 %10, 17
  %39 = and i1 %38, %37
  br i1 %39, label %40, label %414

40:                                               ; preds = %32
  %41 = getelementptr inbounds ptr, ptr %0, i64 2
  %42 = load ptr, ptr %41, align 8, !tbaa !5
  %43 = load i32, ptr %42, align 8
  %44 = and i32 %43, 65535
  %45 = icmp eq i32 %44, 30
  br i1 %45, label %46, label %414

46:                                               ; preds = %40
  %47 = getelementptr inbounds ptr, ptr %0, i64 3
  %48 = load ptr, ptr %47, align 8, !tbaa !5
  %49 = load i32, ptr %48, align 8
  %50 = and i32 %49, 65535
  %51 = icmp eq i32 %50, 30
  br i1 %51, label %52, label %414

52:                                               ; preds = %46
  %53 = load ptr, ptr %0, align 8, !tbaa !5
  %54 = getelementptr inbounds %struct.rtx_def, ptr %42, i64 0, i32 1
  %55 = load i64, ptr %54, align 8, !tbaa !16
  %56 = getelementptr inbounds %struct.rtx_def, ptr %48, i64 0, i32 1
  %57 = load i64, ptr %56, align 8, !tbaa !16
  %58 = sub nsw i64 %55, %57
  br i1 %33, label %59, label %114

59:                                               ; preds = %52
  %60 = load ptr, ptr @ix86_compare_op0, align 8, !tbaa !5
  %61 = call fastcc zeroext i8 @ix86_expand_carry_flag_compare(i32 noundef %6, ptr noundef %60, ptr noundef %20, ptr noundef nonnull %2), !range !66
  %62 = icmp eq i8 %61, 0
  br i1 %62, label %189, label %63

63:                                               ; preds = %59
  %64 = load ptr, ptr %2, align 8, !tbaa !5
  %65 = load i32, ptr %64, align 8
  %66 = and i32 %65, 65535
  %67 = getelementptr inbounds %struct.rtx_def, ptr %64, i64 0, i32 1
  %68 = load ptr, ptr %67, align 8, !tbaa !16
  %69 = load i32, ptr %68, align 8
  %70 = lshr i32 %69, 16
  %71 = and i32 %70, 255
  %72 = add nsw i32 %71, -11
  %73 = icmp ult i32 %72, 2
  br i1 %73, label %76, label %74

74:                                               ; preds = %63
  %75 = icmp eq i32 %66, 89
  br i1 %75, label %79, label %89

76:                                               ; preds = %63
  %77 = tail call i32 @ix86_fp_compare_code_to_integer(i32 noundef %66)
  %78 = icmp eq i32 %77, 89
  br i1 %78, label %79, label %83

79:                                               ; preds = %76, %74
  %80 = tail call i32 @reverse_condition(i32 noundef 89) #30
  %81 = tail call i32 @reverse_condition(i32 noundef %6) #30
  %82 = sub nsw i64 %57, %55
  br label %95

83:                                               ; preds = %76
  %84 = tail call i32 @reverse_condition_maybe_unordered(i32 noundef %66) #30
  %85 = load i32, ptr %64, align 8
  %86 = and i32 %84, 65535
  %87 = and i32 %85, -65536
  %88 = or i32 %87, %86
  store i32 %88, ptr %64, align 8
  br label %95

89:                                               ; preds = %74
  %90 = tail call i32 @reverse_condition(i32 noundef %66) #30
  %91 = load i32, ptr %64, align 8
  %92 = and i32 %90, 65535
  %93 = and i32 %91, -65536
  %94 = or i32 %93, %92
  store i32 %94, ptr %64, align 8
  br label %95

95:                                               ; preds = %83, %89, %79
  %96 = phi i64 [ %58, %83 ], [ %58, %89 ], [ %82, %79 ]
  %97 = phi i64 [ %57, %83 ], [ %57, %89 ], [ %55, %79 ]
  %98 = phi i64 [ %55, %83 ], [ %55, %89 ], [ %57, %79 ]
  %99 = load ptr, ptr @ix86_compare_op0, align 8, !tbaa !5
  %100 = tail call i32 @reg_overlap_mentioned_p(ptr noundef %53, ptr noundef %99) #30
  %101 = icmp eq i32 %100, 0
  br i1 %101, label %102, label %106

102:                                              ; preds = %95
  %103 = load ptr, ptr @ix86_compare_op1, align 8, !tbaa !5
  %104 = tail call i32 @reg_overlap_mentioned_p(ptr noundef %53, ptr noundef %103) #30
  %105 = icmp eq i32 %104, 0
  br i1 %105, label %108, label %106

106:                                              ; preds = %102, %95
  %107 = tail call ptr @gen_reg_rtx(i32 noundef %10) #30
  br label %108

108:                                              ; preds = %102, %106
  %109 = phi ptr [ %107, %106 ], [ %53, %102 ]
  %110 = load ptr, ptr @rtl_hooks, align 8, !tbaa !187
  %111 = tail call ptr %110(i32 noundef 16, ptr noundef %109) #30
  %112 = tail call ptr @gen_x86_movsicc_0_m1(ptr noundef %111, ptr noundef nonnull %68, ptr noundef nonnull %64) #30
  %113 = tail call ptr @emit_insn(ptr noundef %112) #30
  br label %130

114:                                              ; preds = %52
  %115 = and i32 %5, 65534
  %116 = icmp eq i32 %115, 82
  br i1 %116, label %117, label %120

117:                                              ; preds = %114
  %118 = tail call i32 @reverse_condition(i32 noundef %6) #30
  %119 = load ptr, ptr @ix86_compare_op1, align 8, !tbaa !5
  br label %122

120:                                              ; preds = %114
  %121 = sub nsw i64 %57, %55
  br label %122

122:                                              ; preds = %120, %117
  %123 = phi ptr [ %119, %117 ], [ %20, %120 ]
  %124 = phi i64 [ %58, %117 ], [ %121, %120 ]
  %125 = phi i64 [ %57, %117 ], [ %55, %120 ]
  %126 = phi i64 [ %55, %117 ], [ %57, %120 ]
  %127 = phi i32 [ %118, %117 ], [ %6, %120 ]
  %128 = load ptr, ptr @ix86_compare_op0, align 8, !tbaa !5
  %129 = tail call ptr @emit_store_flag(ptr noundef %53, i32 noundef %127, ptr noundef %128, ptr noundef %123, i32 noundef 0, i32 noundef 0, i32 noundef -1) #30
  br label %130

130:                                              ; preds = %108, %122
  %131 = phi ptr [ %129, %122 ], [ %109, %108 ]
  %132 = phi i64 [ %124, %122 ], [ %96, %108 ]
  %133 = phi i64 [ %125, %122 ], [ %97, %108 ]
  %134 = phi i64 [ %126, %122 ], [ %98, %108 ]
  %135 = icmp eq i64 %132, 1
  br i1 %135, label %136, label %142

136:                                              ; preds = %130
  %137 = icmp eq i64 %134, 0
  br i1 %137, label %181, label %138

138:                                              ; preds = %136
  %139 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef %134) #30
  %140 = tail call ptr @copy_rtx(ptr noundef %131) #30
  %141 = tail call ptr @expand_simple_binop(i32 noundef %10, i32 noundef 49, ptr noundef %131, ptr noundef %139, ptr noundef %140, i32 noundef 1, i32 noundef 0) #30
  br label %181

142:                                              ; preds = %130
  %143 = icmp eq i64 %133, -1
  br i1 %143, label %144, label %148

144:                                              ; preds = %142
  %145 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef %134) #30
  %146 = tail call ptr @copy_rtx(ptr noundef %131) #30
  %147 = tail call ptr @expand_simple_binop(i32 noundef %10, i32 noundef 62, ptr noundef %131, ptr noundef %145, ptr noundef %146, i32 noundef 1, i32 noundef 0) #30
  br label %181

148:                                              ; preds = %142
  %149 = icmp eq i64 %132, -1
  %150 = icmp ne i64 %134, 0
  %151 = select i1 %149, i1 %150, i1 false
  br i1 %151, label %152, label %161

152:                                              ; preds = %148
  %153 = tail call ptr @copy_rtx(ptr noundef %131) #30
  %154 = tail call ptr @expand_simple_unop(i32 noundef %10, i32 noundef 64, ptr noundef %131, ptr noundef %153, i32 noundef 1) #30
  %155 = icmp eq i64 %133, 0
  br i1 %155, label %181, label %156

156:                                              ; preds = %152
  %157 = tail call ptr @copy_rtx(ptr noundef %154) #30
  %158 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef %133) #30
  %159 = tail call ptr @copy_rtx(ptr noundef %154) #30
  %160 = tail call ptr @expand_simple_binop(i32 noundef %10, i32 noundef 49, ptr noundef %157, ptr noundef %158, ptr noundef %159, i32 noundef 1, i32 noundef 0) #30
  br label %181

161:                                              ; preds = %148
  %162 = icmp eq i64 %133, 0
  br i1 %162, label %163, label %166

163:                                              ; preds = %161
  %164 = tail call ptr @copy_rtx(ptr noundef %131) #30
  %165 = tail call ptr @expand_simple_unop(i32 noundef %10, i32 noundef 64, ptr noundef %131, ptr noundef %164, i32 noundef 1) #30
  br label %166

166:                                              ; preds = %163, %161
  %167 = phi ptr [ %165, %163 ], [ %131, %161 ]
  %168 = phi i64 [ %134, %163 ], [ %133, %161 ]
  %169 = phi i64 [ 0, %163 ], [ %134, %161 ]
  %170 = tail call ptr @copy_rtx(ptr noundef %167) #30
  %171 = sub nsw i64 %168, %169
  %172 = tail call ptr @gen_int_mode(i64 noundef %171, i32 noundef %10) #30
  %173 = tail call ptr @copy_rtx(ptr noundef %167) #30
  %174 = tail call ptr @expand_simple_binop(i32 noundef %10, i32 noundef 61, ptr noundef %170, ptr noundef %172, ptr noundef %173, i32 noundef 1, i32 noundef 0) #30
  %175 = icmp eq i64 %169, 0
  br i1 %175, label %181, label %176

176:                                              ; preds = %166
  %177 = tail call ptr @copy_rtx(ptr noundef %174) #30
  %178 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef %169) #30
  %179 = tail call ptr @copy_rtx(ptr noundef %174) #30
  %180 = tail call ptr @expand_simple_binop(i32 noundef %10, i32 noundef 49, ptr noundef %177, ptr noundef %178, ptr noundef %179, i32 noundef 1, i32 noundef 0) #30
  br label %181

181:                                              ; preds = %144, %166, %176, %152, %156, %136, %138
  %182 = phi ptr [ %141, %138 ], [ %131, %136 ], [ %147, %144 ], [ %160, %156 ], [ %154, %152 ], [ %180, %176 ], [ %174, %166 ]
  %183 = tail call i32 @rtx_equal_p(ptr noundef %182, ptr noundef %53) #30
  %184 = icmp eq i32 %183, 0
  br i1 %184, label %185, label %522

185:                                              ; preds = %181
  %186 = tail call ptr @copy_rtx(ptr noundef %53) #30
  %187 = tail call ptr @copy_rtx(ptr noundef %182) #30
  %188 = tail call ptr @emit_move_insn(ptr noundef %186, ptr noundef %187) #30
  br label %522

189:                                              ; preds = %59
  %190 = icmp slt i64 %58, 0
  br i1 %190, label %191, label %211

191:                                              ; preds = %189
  %192 = load ptr, ptr @ix86_compare_op0, align 8, !tbaa !5
  %193 = load i32, ptr %192, align 8
  %194 = lshr i32 %193, 16
  %195 = and i32 %194, 255
  %196 = sub nsw i64 0, %58
  %197 = zext i32 %195 to i64
  %198 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %197
  %199 = load i8, ptr %198, align 1, !tbaa !16
  %200 = and i8 %199, -2
  %201 = icmp eq i8 %200, 8
  br i1 %201, label %202, label %208

202:                                              ; preds = %191
  %203 = icmp eq i8 %199, 9
  br i1 %203, label %204, label %205

204:                                              ; preds = %202
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 15664, ptr noundef nonnull @.str.131) #30
  br label %205

205:                                              ; preds = %202, %204
  %206 = tail call i32 @reverse_condition_maybe_unordered(i32 noundef %19) #30
  %207 = tail call i32 @reverse_condition_maybe_unordered(i32 noundef %6) #30
  br label %211

208:                                              ; preds = %191
  %209 = tail call i32 @reverse_condition(i32 noundef %19) #30
  %210 = tail call i32 @reverse_condition(i32 noundef %6) #30
  br label %211

211:                                              ; preds = %205, %208, %189
  %212 = phi i64 [ %58, %189 ], [ %196, %208 ], [ %196, %205 ]
  %213 = phi i64 [ %57, %189 ], [ %55, %208 ], [ %55, %205 ]
  %214 = phi i64 [ %55, %189 ], [ %57, %208 ], [ %57, %205 ]
  %215 = phi i32 [ %6, %189 ], [ %210, %208 ], [ %207, %205 ]
  %216 = load ptr, ptr @ix86_compare_op0, align 8, !tbaa !5
  %217 = load i32, ptr %216, align 8
  %218 = lshr i32 %217, 16
  %219 = and i32 %218, 255
  %220 = zext i32 %219 to i64
  %221 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %220
  %222 = load i8, ptr %221, align 1, !tbaa !16
  %223 = icmp eq i8 %222, 2
  br i1 %223, label %224, label %272

224:                                              ; preds = %211
  %225 = load ptr, ptr @ix86_compare_op1, align 8, !tbaa !5
  %226 = load i32, ptr %225, align 8
  %227 = and i32 %226, 65535
  %228 = icmp eq i32 %227, 30
  br i1 %228, label %229, label %272

229:                                              ; preds = %224
  %230 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 64), align 16, !tbaa !5
  %231 = icmp eq ptr %225, %230
  br i1 %231, label %232, label %233

232:                                              ; preds = %229
  switch i32 %215, label %233 [
    i32 85, label %238
    i32 82, label %238
  ]

233:                                              ; preds = %232, %229
  %234 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 63), align 8, !tbaa !5
  %235 = icmp eq ptr %225, %234
  br i1 %235, label %236, label %272

236:                                              ; preds = %233
  switch i32 %215, label %272 [
    i32 84, label %238
    i32 83, label %237
  ]

237:                                              ; preds = %236
  br label %238

238:                                              ; preds = %236, %237, %232, %232
  %239 = phi i32 [ %215, %232 ], [ %215, %232 ], [ 85, %236 ], [ 82, %237 ]
  %240 = load i32, ptr %53, align 8
  %241 = xor i32 %240, %217
  %242 = and i32 %241, 16711680
  %243 = icmp eq i32 %242, 0
  br i1 %243, label %244, label %272

244:                                              ; preds = %238
  %245 = icmp eq i64 %213, -1
  %246 = icmp eq i64 %214, -1
  %247 = select i1 %245, i1 true, i1 %246
  br i1 %247, label %248, label %272

248:                                              ; preds = %244
  switch i64 %212, label %255 [
    i64 9, label %249
    i64 8, label %249
    i64 5, label %249
    i64 4, label %249
    i64 3, label %249
    i64 2, label %249
    i64 1, label %249
  ]

249:                                              ; preds = %248, %248, %248, %248, %248, %248, %248
  %250 = icmp eq i32 %239, 85
  %251 = select i1 %250, i1 %246, i1 false
  %252 = icmp eq i32 %239, 82
  %253 = and i1 %245, %252
  %254 = or i1 %251, %253
  br i1 %254, label %255, label %272

255:                                              ; preds = %248, %249
  br i1 %246, label %260, label %256

256:                                              ; preds = %255
  %257 = tail call i32 @reverse_condition(i32 noundef %215) #30
  %258 = load ptr, ptr @ix86_compare_op0, align 8, !tbaa !5
  %259 = load ptr, ptr @ix86_compare_op1, align 8, !tbaa !5
  br label %260

260:                                              ; preds = %256, %255
  %261 = phi ptr [ %259, %256 ], [ %225, %255 ]
  %262 = phi ptr [ %258, %256 ], [ %216, %255 ]
  %263 = phi i64 [ %214, %256 ], [ %213, %255 ]
  %264 = phi i32 [ %257, %256 ], [ %215, %255 ]
  %265 = tail call ptr @emit_store_flag(ptr noundef nonnull %53, i32 noundef %264, ptr noundef %262, ptr noundef %261, i32 noundef 0, i32 noundef 0, i32 noundef -1) #30
  %266 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef %263) #30
  %267 = tail call ptr @expand_simple_binop(i32 noundef %10, i32 noundef 62, ptr noundef %265, ptr noundef %266, ptr noundef %265, i32 noundef 1, i32 noundef 0) #30
  %268 = load ptr, ptr %0, align 8, !tbaa !5
  %269 = icmp eq ptr %267, %268
  br i1 %269, label %522, label %270

270:                                              ; preds = %260
  %271 = tail call ptr @emit_move_insn(ptr noundef %268, ptr noundef %267) #30
  br label %522

272:                                              ; preds = %236, %211, %224, %233, %249, %244, %238
  %273 = phi i1 [ false, %249 ], [ false, %244 ], [ false, %238 ], [ true, %233 ], [ true, %224 ], [ true, %211 ], [ true, %236 ]
  %274 = phi i32 [ %239, %249 ], [ %239, %244 ], [ %239, %238 ], [ 0, %233 ], [ 0, %224 ], [ 0, %211 ], [ 0, %236 ]
  %275 = icmp eq i64 %212, 1
  switch i64 %212, label %325 [
    i64 9, label %276
    i64 8, label %276
    i64 5, label %276
    i64 4, label %276
    i64 3, label %276
    i64 2, label %276
    i64 1, label %276
  ]

276:                                              ; preds = %272, %272, %272, %272, %272, %272, %272
  %277 = and i32 %8, 16646144
  %278 = icmp eq i32 %277, 917504
  %279 = load i8, ptr getelementptr inbounds ([62 x i8], ptr @ix86_tune_features, i64 0, i64 9), align 1
  %280 = icmp ne i8 %279, 0
  %281 = select i1 %278, i1 %280, i1 false
  br i1 %281, label %325, label %282

282:                                              ; preds = %276
  %283 = load ptr, ptr @ix86_compare_op1, align 8, !tbaa !5
  %284 = tail call ptr @emit_store_flag(ptr noundef %53, i32 noundef %215, ptr noundef nonnull %216, ptr noundef %283, i32 noundef 0, i32 noundef 0, i32 noundef 1) #30
  %285 = tail call ptr @copy_rtx(ptr noundef %284) #30
  br i1 %275, label %294, label %286

286:                                              ; preds = %282
  %287 = and i64 %212, -2
  %288 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef %287) #30
  %289 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 52, i32 noundef %10, ptr noundef %285, ptr noundef %288) #30
  %290 = and i64 %212, 1
  %291 = icmp eq i64 %290, 0
  br i1 %291, label %294, label %292

292:                                              ; preds = %286
  %293 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 49, i32 noundef %10, ptr noundef %289, ptr noundef %285) #30
  br label %294

294:                                              ; preds = %282, %286, %292
  %295 = phi ptr [ %293, %292 ], [ %289, %286 ], [ %285, %282 ]
  %296 = phi i32 [ 2, %292 ], [ 1, %286 ], [ 0, %282 ]
  %297 = icmp eq i64 %213, 0
  br i1 %297, label %302, label %298

298:                                              ; preds = %294
  %299 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef %213) #30
  %300 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 49, i32 noundef %10, ptr noundef %295, ptr noundef %299) #30
  %301 = add nuw nsw i32 %296, 1
  br label %302

302:                                              ; preds = %298, %294
  %303 = phi ptr [ %300, %298 ], [ %295, %294 ]
  %304 = phi i32 [ %301, %298 ], [ %296, %294 ]
  %305 = tail call i32 @rtx_equal_p(ptr noundef %303, ptr noundef %284) #30
  %306 = icmp eq i32 %305, 0
  br i1 %306, label %307, label %316

307:                                              ; preds = %302
  %308 = icmp eq i32 %304, 1
  %309 = tail call ptr @copy_rtx(ptr noundef %284) #30
  br i1 %308, label %310, label %312

310:                                              ; preds = %307
  %311 = tail call ptr @force_operand(ptr noundef %303, ptr noundef %309) #30
  br label %316

312:                                              ; preds = %307
  %313 = tail call ptr @copy_rtx(ptr noundef %303) #30
  %314 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 23, i32 noundef 0, ptr noundef %309, ptr noundef %313) #30
  %315 = tail call ptr @emit_insn(ptr noundef %314) #30
  br label %316

316:                                              ; preds = %310, %312, %302
  %317 = phi ptr [ %284, %302 ], [ %311, %310 ], [ %284, %312 ]
  %318 = load ptr, ptr %0, align 8, !tbaa !5
  %319 = tail call i32 @rtx_equal_p(ptr noundef %317, ptr noundef %318) #30
  %320 = icmp eq i32 %319, 0
  br i1 %320, label %321, label %522

321:                                              ; preds = %316
  %322 = load ptr, ptr %0, align 8, !tbaa !5
  %323 = tail call ptr @copy_rtx(ptr noundef %317) #30
  %324 = tail call ptr @emit_move_insn(ptr noundef %322, ptr noundef %323) #30
  br label %522

325:                                              ; preds = %272, %276
  %326 = load i8, ptr @ix86_arch_features, align 1, !tbaa !16
  %327 = icmp eq i8 %326, 0
  br i1 %327, label %333, label %328

328:                                              ; preds = %325
  %329 = icmp eq i32 %10, 14
  %330 = load i8, ptr getelementptr inbounds ([62 x i8], ptr @ix86_tune_features, i64 0, i64 9), align 1
  %331 = icmp ne i8 %330, 0
  %332 = select i1 %329, i1 %331, i1 false
  br i1 %332, label %333, label %414

333:                                              ; preds = %328, %325
  %334 = tail call zeroext i8 @optimize_insn_for_speed_p() #30
  %335 = icmp eq i8 %334, 0
  %336 = load i32, ptr @ix86_branch_cost, align 4
  %337 = icmp sgt i32 %336, 1
  %338 = select i1 %335, i1 true, i1 %337
  br i1 %338, label %339, label %414

339:                                              ; preds = %333
  %340 = icmp eq i64 %213, 0
  br i1 %340, label %341, label %360

341:                                              ; preds = %339
  %342 = load ptr, ptr @ix86_compare_op0, align 8, !tbaa !5
  %343 = load i32, ptr %342, align 8
  %344 = lshr i32 %343, 16
  %345 = and i32 %344, 255
  %346 = zext i32 %345 to i64
  %347 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %346
  %348 = load i8, ptr %347, align 1, !tbaa !16
  %349 = and i8 %348, -2
  %350 = icmp eq i8 %349, 8
  br i1 %350, label %351, label %356

351:                                              ; preds = %341
  %352 = icmp eq i8 %348, 9
  br i1 %352, label %353, label %354

353:                                              ; preds = %351
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 15822, ptr noundef nonnull @.str.131) #30
  br label %354

354:                                              ; preds = %351, %353
  %355 = tail call i32 @reverse_condition_maybe_unordered(i32 noundef %215) #30
  br label %360

356:                                              ; preds = %341
  %357 = tail call i32 @reverse_condition(i32 noundef %215) #30
  br i1 %273, label %379, label %358

358:                                              ; preds = %356
  %359 = tail call i32 @reverse_condition(i32 noundef %274) #30
  br label %360

360:                                              ; preds = %354, %358, %339
  %361 = phi i64 [ %213, %339 ], [ %214, %358 ], [ %214, %354 ]
  %362 = phi i64 [ %214, %339 ], [ 0, %358 ], [ 0, %354 ]
  %363 = phi i32 [ %274, %339 ], [ %359, %358 ], [ %274, %354 ]
  %364 = phi i32 [ %215, %339 ], [ %357, %358 ], [ %355, %354 ]
  %365 = icmp eq i32 %363, 0
  br i1 %365, label %379, label %366

366:                                              ; preds = %360
  %367 = icmp ne i32 %363, 82
  %368 = icmp ne i64 %361, 0
  %369 = select i1 %367, i1 %368, i1 false
  br i1 %369, label %372, label %370

370:                                              ; preds = %366
  %371 = tail call i32 @reverse_condition(i32 noundef %364) #30
  br label %372

372:                                              ; preds = %366, %370
  %373 = phi i64 [ %361, %370 ], [ %362, %366 ]
  %374 = phi i64 [ %362, %370 ], [ %361, %366 ]
  %375 = phi i32 [ %371, %370 ], [ %364, %366 ]
  %376 = load ptr, ptr @ix86_compare_op0, align 8, !tbaa !5
  %377 = load ptr, ptr @ix86_compare_op1, align 8, !tbaa !5
  %378 = tail call ptr @emit_store_flag(ptr noundef %53, i32 noundef %375, ptr noundef %376, ptr noundef %377, i32 noundef 0, i32 noundef 0, i32 noundef -1) #30
  br label %390

379:                                              ; preds = %356, %360
  %380 = phi i32 [ %364, %360 ], [ %357, %356 ]
  %381 = phi i64 [ %362, %360 ], [ 0, %356 ]
  %382 = phi i64 [ %361, %360 ], [ %214, %356 ]
  %383 = load ptr, ptr @ix86_compare_op0, align 8, !tbaa !5
  %384 = load ptr, ptr @ix86_compare_op1, align 8, !tbaa !5
  %385 = tail call ptr @emit_store_flag(ptr noundef %53, i32 noundef %380, ptr noundef %383, ptr noundef %384, i32 noundef 0, i32 noundef 0, i32 noundef 1) #30
  %386 = tail call ptr @copy_rtx(ptr noundef %385) #30
  %387 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 63), align 8, !tbaa !5
  %388 = tail call ptr @copy_rtx(ptr noundef %385) #30
  %389 = tail call ptr @expand_simple_binop(i32 noundef %10, i32 noundef 49, ptr noundef %386, ptr noundef %387, ptr noundef %388, i32 noundef 1, i32 noundef 0) #30
  br label %390

390:                                              ; preds = %379, %372
  %391 = phi i64 [ %373, %372 ], [ %382, %379 ]
  %392 = phi i64 [ %374, %372 ], [ %381, %379 ]
  %393 = phi ptr [ %378, %372 ], [ %389, %379 ]
  %394 = tail call ptr @copy_rtx(ptr noundef %393) #30
  %395 = sub nsw i64 %391, %392
  %396 = tail call ptr @gen_int_mode(i64 noundef %395, i32 noundef %10) #30
  %397 = tail call ptr @copy_rtx(ptr noundef %393) #30
  %398 = tail call ptr @expand_simple_binop(i32 noundef %10, i32 noundef 61, ptr noundef %394, ptr noundef %396, ptr noundef %397, i32 noundef 1, i32 noundef 0) #30
  %399 = icmp eq i64 %392, 0
  br i1 %399, label %405, label %400

400:                                              ; preds = %390
  %401 = tail call ptr @copy_rtx(ptr noundef %398) #30
  %402 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef %392) #30
  %403 = tail call ptr @copy_rtx(ptr noundef %398) #30
  %404 = tail call ptr @expand_simple_binop(i32 noundef %10, i32 noundef 49, ptr noundef %401, ptr noundef %402, ptr noundef %403, i32 noundef 1, i32 noundef 0) #30
  br label %405

405:                                              ; preds = %400, %390
  %406 = phi ptr [ %404, %400 ], [ %398, %390 ]
  %407 = load ptr, ptr %0, align 8, !tbaa !5
  %408 = tail call i32 @rtx_equal_p(ptr noundef %406, ptr noundef %407) #30
  %409 = icmp eq i32 %408, 0
  br i1 %409, label %410, label %522

410:                                              ; preds = %405
  %411 = load ptr, ptr %0, align 8, !tbaa !5
  %412 = tail call ptr @copy_rtx(ptr noundef %406) #30
  %413 = tail call ptr @emit_move_insn(ptr noundef %411, ptr noundef %412) #30
  br label %522

414:                                              ; preds = %333, %328, %32, %46, %40
  %415 = load i8, ptr @ix86_arch_features, align 1, !tbaa !16
  %416 = icmp eq i8 %415, 0
  br i1 %416, label %422, label %417

417:                                              ; preds = %414
  %418 = icmp eq i32 %10, 14
  %419 = load i8, ptr getelementptr inbounds ([62 x i8], ptr @ix86_tune_features, i64 0, i64 9), align 1
  %420 = icmp ne i8 %419, 0
  %421 = select i1 %418, i1 %420, i1 false
  br i1 %421, label %422, label %477

422:                                              ; preds = %417, %414
  %423 = tail call zeroext i8 @optimize_insn_for_speed_p() #30
  %424 = icmp eq i8 %423, 0
  %425 = load i32, ptr @ix86_branch_cost, align 4
  %426 = icmp slt i32 %425, 3
  %427 = select i1 %424, i1 true, i1 %426
  br i1 %427, label %522, label %428

428:                                              ; preds = %422
  %429 = getelementptr inbounds ptr, ptr %0, i64 2
  %430 = load ptr, ptr %429, align 8, !tbaa !5
  %431 = load i32, ptr %430, align 8
  %432 = and i32 %431, 65535
  %433 = icmp eq i32 %432, 30
  %434 = getelementptr inbounds ptr, ptr %0, i64 3
  %435 = load ptr, ptr %434, align 8, !tbaa !5
  br i1 %433, label %436, label %447

436:                                              ; preds = %428
  %437 = getelementptr inbounds %struct.rtx_def, ptr %430, i64 0, i32 1
  %438 = load i64, ptr %437, align 8, !tbaa !16
  switch i64 %438, label %522 [
    i64 0, label %439
    i64 -1, label %443
  ]

439:                                              ; preds = %436
  %440 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 63), align 8, !tbaa !5
  %441 = icmp eq ptr %435, %440
  br i1 %441, label %522, label %442

442:                                              ; preds = %439
  store ptr %440, ptr %434, align 8, !tbaa !5
  br label %462

443:                                              ; preds = %436
  %444 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 64), align 16, !tbaa !5
  %445 = icmp eq ptr %435, %444
  br i1 %445, label %522, label %446

446:                                              ; preds = %443
  store ptr %444, ptr %434, align 8, !tbaa !5
  br label %462

447:                                              ; preds = %428
  %448 = load i32, ptr %435, align 8
  %449 = and i32 %448, 65535
  %450 = icmp eq i32 %449, 30
  br i1 %450, label %451, label %522

451:                                              ; preds = %447
  %452 = getelementptr inbounds %struct.rtx_def, ptr %435, i64 0, i32 1
  %453 = load i64, ptr %452, align 8, !tbaa !16
  switch i64 %453, label %522 [
    i64 0, label %454
    i64 -1, label %458
  ]

454:                                              ; preds = %451
  %455 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 63), align 8, !tbaa !5
  %456 = icmp eq ptr %430, %455
  br i1 %456, label %522, label %457

457:                                              ; preds = %454
  store ptr %455, ptr %429, align 8, !tbaa !5
  br label %462

458:                                              ; preds = %451
  %459 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 64), align 16, !tbaa !5
  %460 = icmp eq ptr %435, %459
  br i1 %460, label %522, label %461

461:                                              ; preds = %458
  store ptr %459, ptr %429, align 8, !tbaa !5
  br label %462

462:                                              ; preds = %461, %457, %442, %446
  %463 = phi ptr [ getelementptr inbounds ([159 x %struct.optab_d], ptr @optab_table, i64 0, i64 41), %442 ], [ getelementptr inbounds ([159 x %struct.optab_d], ptr @optab_table, i64 0, i64 42), %446 ], [ getelementptr inbounds ([159 x %struct.optab_d], ptr @optab_table, i64 0, i64 41), %457 ], [ getelementptr inbounds ([159 x %struct.optab_d], ptr @optab_table, i64 0, i64 42), %461 ]
  %464 = phi ptr [ %435, %442 ], [ %435, %446 ], [ %430, %457 ], [ %430, %461 ]
  %465 = load ptr, ptr %0, align 8, !tbaa !5
  %466 = tail call ptr @gen_reg_rtx(i32 noundef %10) #30
  store ptr %466, ptr %0, align 8, !tbaa !5
  %467 = tail call i32 @ix86_expand_int_movcc(ptr noundef nonnull %0), !range !222
  %468 = icmp eq i32 %467, 0
  br i1 %468, label %522, label %469

469:                                              ; preds = %462
  %470 = tail call ptr @expand_binop(i32 noundef %10, ptr noundef nonnull %463, ptr noundef %464, ptr noundef %466, ptr noundef %465, i32 noundef 0, i32 noundef 2) #30
  %471 = tail call i32 @rtx_equal_p(ptr noundef %470, ptr noundef %465) #30
  %472 = icmp eq i32 %471, 0
  br i1 %472, label %473, label %522

473:                                              ; preds = %469
  %474 = tail call ptr @copy_rtx(ptr noundef %465) #30
  %475 = tail call ptr @copy_rtx(ptr noundef %470) #30
  %476 = tail call ptr @emit_move_insn(ptr noundef %474, ptr noundef %475) #30
  br label %522

477:                                              ; preds = %417
  %478 = getelementptr inbounds ptr, ptr %0, i64 2
  %479 = load ptr, ptr %478, align 8, !tbaa !5
  %480 = tail call i32 @nonimmediate_operand(ptr noundef %479, i32 noundef %10) #30
  %481 = icmp eq i32 %480, 0
  br i1 %481, label %482, label %485

482:                                              ; preds = %477
  %483 = load ptr, ptr %478, align 8, !tbaa !5
  %484 = tail call ptr @force_reg(i32 noundef %10, ptr noundef %483) #30
  store ptr %484, ptr %478, align 8, !tbaa !5
  br label %485

485:                                              ; preds = %482, %477
  %486 = getelementptr inbounds ptr, ptr %0, i64 3
  %487 = load ptr, ptr %486, align 8, !tbaa !5
  %488 = tail call i32 @nonimmediate_operand(ptr noundef %487, i32 noundef %10) #30
  %489 = icmp eq i32 %488, 0
  br i1 %489, label %490, label %493

490:                                              ; preds = %485
  %491 = load ptr, ptr %486, align 8, !tbaa !5
  %492 = tail call ptr @force_reg(i32 noundef %10, ptr noundef %491) #30
  store ptr %492, ptr %486, align 8, !tbaa !5
  br label %493

493:                                              ; preds = %490, %485
  %494 = load ptr, ptr %478, align 8, !tbaa !5
  %495 = tail call i32 @register_operand(ptr noundef %494, i32 noundef 0) #30
  %496 = icmp eq i32 %495, 0
  br i1 %496, label %497, label %505

497:                                              ; preds = %493
  br i1 %418, label %502, label %498

498:                                              ; preds = %497
  %499 = load ptr, ptr %486, align 8, !tbaa !5
  %500 = tail call i32 @register_operand(ptr noundef %499, i32 noundef 0) #30
  %501 = icmp eq i32 %500, 0
  br i1 %501, label %502, label %513

502:                                              ; preds = %498, %497
  %503 = load ptr, ptr %478, align 8, !tbaa !5
  %504 = tail call ptr @force_reg(i32 noundef %10, ptr noundef %503) #30
  store ptr %504, ptr %478, align 8, !tbaa !5
  br label %505

505:                                              ; preds = %502, %493
  br i1 %418, label %506, label %513

506:                                              ; preds = %505
  %507 = load ptr, ptr %486, align 8, !tbaa !5
  %508 = tail call i32 @register_operand(ptr noundef %507, i32 noundef 0) #30
  %509 = icmp eq i32 %508, 0
  br i1 %509, label %510, label %513

510:                                              ; preds = %506
  %511 = load ptr, ptr %486, align 8, !tbaa !5
  %512 = tail call ptr @force_reg(i32 noundef 14, ptr noundef %511) #30
  store ptr %512, ptr %486, align 8, !tbaa !5
  br label %513

513:                                              ; preds = %498, %510, %506, %505
  %514 = tail call ptr @emit_insn(ptr noundef %17) #30
  %515 = load ptr, ptr %0, align 8, !tbaa !5
  %516 = load ptr, ptr %2, align 8, !tbaa !5
  %517 = load ptr, ptr %478, align 8, !tbaa !5
  %518 = load ptr, ptr %486, align 8, !tbaa !5
  %519 = tail call ptr @gen_rtx_fmt_eee_stat(i32 noundef 47, i32 noundef %10, ptr noundef %516, ptr noundef %517, ptr noundef %518) #30
  %520 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 23, i32 noundef 0, ptr noundef %515, ptr noundef %519) #30
  %521 = tail call ptr @emit_insn(ptr noundef %520) #30
  br label %522

522:                                              ; preds = %451, %436, %454, %439, %185, %181, %270, %260, %321, %316, %410, %405, %422, %443, %458, %447, %462, %473, %469, %513
  %523 = phi i32 [ 1, %513 ], [ 0, %422 ], [ 0, %443 ], [ 0, %458 ], [ 0, %447 ], [ 0, %462 ], [ 1, %473 ], [ 1, %469 ], [ 1, %405 ], [ 1, %410 ], [ 1, %316 ], [ 1, %321 ], [ 1, %260 ], [ 1, %270 ], [ 1, %181 ], [ 1, %185 ], [ 0, %439 ], [ 0, %454 ], [ 0, %436 ], [ 0, %451 ]
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %2) #30
  ret i32 %523
}

declare ptr @get_insns() local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc zeroext i8 @ix86_expand_carry_flag_compare(i32 noundef %0, ptr noundef %1, ptr noundef %2, ptr nocapture noundef writeonly %3) unnamed_addr #9 {
  %5 = load i32, ptr %1, align 8
  %6 = lshr i32 %5, 16
  %7 = and i32 %6, 255
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %9, label %13

9:                                                ; preds = %4
  %10 = load i32, ptr %2, align 8
  %11 = lshr i32 %10, 16
  %12 = and i32 %11, 255
  br label %13

13:                                               ; preds = %4, %9
  %14 = phi i32 [ %12, %9 ], [ %7, %4 ]
  %15 = icmp eq i32 %14, 17
  br i1 %15, label %126, label %16

16:                                               ; preds = %13
  %17 = zext i32 %14 to i64
  %18 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %17
  %19 = load i8, ptr %18, align 1, !tbaa !16
  switch i8 %19, label %126 [
    i8 12, label %47
    i8 10, label %47
    i8 2, label %47
    i8 3, label %47
    i8 9, label %20
    i8 8, label %21
  ]

20:                                               ; preds = %16
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 15355, ptr noundef nonnull @.str.131) #30
  br label %21

21:                                               ; preds = %16, %20
  switch i32 %0, label %28 [
    i32 97, label %126
    i32 92, label %126
    i32 91, label %126
    i32 90, label %126
    i32 81, label %126
    i32 80, label %126
    i32 95, label %22
    i32 94, label %22
    i32 84, label %22
    i32 83, label %22
  ]

22:                                               ; preds = %21, %21, %21, %21
  %23 = load i32, ptr @target_flags, align 4, !tbaa !20
  %24 = and i32 %23, 128
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %26, label %28

26:                                               ; preds = %22
  %27 = tail call i32 @swap_condition(i32 noundef %0) #30
  br label %28

28:                                               ; preds = %21, %26, %22
  %29 = phi ptr [ %2, %22 ], [ %1, %26 ], [ %2, %21 ]
  %30 = phi ptr [ %1, %22 ], [ %2, %26 ], [ %1, %21 ]
  %31 = phi i32 [ %0, %22 ], [ %27, %26 ], [ %0, %21 ]
  tail call void @start_sequence() #30
  %32 = tail call fastcc ptr @ix86_expand_fp_compare(i32 noundef %31, ptr noundef %30, ptr noundef %29, ptr noundef null)
  %33 = tail call ptr @get_insns() #30
  tail call void @end_sequence() #30
  %34 = getelementptr inbounds %struct.rtx_def, ptr %32, i64 0, i32 1
  %35 = load ptr, ptr %34, align 8, !tbaa !16
  %36 = load i32, ptr %35, align 8
  %37 = lshr i32 %36, 16
  %38 = and i32 %37, 255
  %39 = add nsw i32 %38, -11
  %40 = icmp ult i32 %39, 2
  %41 = load i32, ptr %32, align 8
  %42 = trunc i32 %41 to i16
  br i1 %40, label %43, label %44

43:                                               ; preds = %28
  switch i16 %42, label %126 [
    i16 96, label %45
    i16 82, label %45
  ]

44:                                               ; preds = %28
  switch i16 %42, label %126 [
    i16 89, label %45
    i16 86, label %45
  ]

45:                                               ; preds = %43, %43, %44, %44
  %46 = tail call ptr @emit_insn(ptr noundef %33) #30
  store ptr %32, ptr %3, align 8, !tbaa !5
  br label %126

47:                                               ; preds = %16, %16, %16, %16
  switch i32 %0, label %126 [
    i32 89, label %106
    i32 86, label %106
    i32 81, label %48
    i32 80, label %48
    i32 87, label %55
    i32 88, label %55
    i32 85, label %78
    i32 82, label %78
    i32 84, label %92
    i32 83, label %92
  ]

48:                                               ; preds = %47, %47
  %49 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 64), align 16, !tbaa !5
  %50 = icmp eq ptr %49, %2
  br i1 %50, label %51, label %126

51:                                               ; preds = %48
  %52 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 65), align 8, !tbaa !5
  %53 = icmp eq i32 %0, 81
  %54 = select i1 %53, i32 89, i32 86
  br label %106

55:                                               ; preds = %47, %47
  %56 = load i32, ptr %2, align 8
  %57 = and i32 %56, 65535
  %58 = icmp eq i32 %57, 30
  br i1 %58, label %59, label %75

59:                                               ; preds = %55
  %60 = getelementptr inbounds %struct.rtx_def, ptr %2, i64 0, i32 1
  %61 = load i64, ptr %60, align 8, !tbaa !16
  %62 = add nsw i64 %61, 1
  %63 = tail call ptr @gen_int_mode(i64 noundef %62, i32 noundef %7) #30
  %64 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 64), align 16, !tbaa !5
  %65 = icmp eq ptr %63, %64
  br i1 %65, label %126, label %66

66:                                               ; preds = %59
  %67 = load i32, ptr %63, align 8
  %68 = lshr i32 %67, 16
  %69 = and i32 %68, 255
  %70 = tail call i32 @x86_64_immediate_operand(ptr noundef nonnull %63, i32 noundef %69) #30
  %71 = icmp eq i32 %70, 0
  br i1 %71, label %126, label %72

72:                                               ; preds = %66
  %73 = icmp eq i32 %0, 87
  %74 = select i1 %73, i32 86, i32 89
  br label %106

75:                                               ; preds = %55
  %76 = icmp eq i32 %0, 87
  %77 = select i1 %76, i32 89, i32 86
  br label %106

78:                                               ; preds = %47, %47
  %79 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 64), align 16, !tbaa !5
  %80 = icmp eq ptr %79, %2
  br i1 %80, label %81, label %126

81:                                               ; preds = %78
  %82 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %17
  %83 = load i8, ptr %82, align 1, !tbaa !16
  %84 = zext i8 %83 to i32
  %85 = shl nuw nsw i32 %84, 3
  %86 = add nsw i32 %85, -1
  %87 = shl nuw i32 1, %86
  %88 = sext i32 %87 to i64
  %89 = tail call ptr @gen_int_mode(i64 noundef %88, i32 noundef %14) #30
  %90 = icmp eq i32 %0, 85
  %91 = select i1 %90, i32 86, i32 89
  br label %106

92:                                               ; preds = %47, %47
  %93 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 63), align 8, !tbaa !5
  %94 = icmp eq ptr %93, %2
  br i1 %94, label %95, label %126

95:                                               ; preds = %92
  %96 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %17
  %97 = load i8, ptr %96, align 1, !tbaa !16
  %98 = zext i8 %97 to i32
  %99 = shl nuw nsw i32 %98, 3
  %100 = add nsw i32 %99, -1
  %101 = shl nuw i32 1, %100
  %102 = sext i32 %101 to i64
  %103 = tail call ptr @gen_int_mode(i64 noundef %102, i32 noundef %14) #30
  %104 = icmp eq i32 %0, 84
  %105 = select i1 %104, i32 86, i32 89
  br label %106

106:                                              ; preds = %72, %75, %47, %47, %95, %81, %51
  %107 = phi ptr [ %103, %95 ], [ %89, %81 ], [ %63, %72 ], [ %1, %75 ], [ %52, %51 ], [ %2, %47 ], [ %2, %47 ]
  %108 = phi ptr [ %1, %95 ], [ %1, %81 ], [ %1, %72 ], [ %2, %75 ], [ %1, %51 ], [ %1, %47 ], [ %1, %47 ]
  %109 = phi i32 [ %105, %95 ], [ %91, %81 ], [ %74, %72 ], [ %77, %75 ], [ %54, %51 ], [ %0, %47 ], [ %0, %47 ]
  %110 = tail call i32 @nonimmediate_operand(ptr noundef nonnull %108, i32 noundef 0) #30
  %111 = icmp eq i32 %110, 0
  br i1 %111, label %112, label %120

112:                                              ; preds = %106
  %113 = load i32, ptr @reload_in_progress, align 4, !tbaa !20
  %114 = icmp ne i32 %113, 0
  %115 = load i32, ptr @reload_completed, align 4
  %116 = icmp ne i32 %115, 0
  %117 = select i1 %114, i1 true, i1 %116
  br i1 %117, label %126, label %118

118:                                              ; preds = %112
  %119 = tail call ptr @force_reg(i32 noundef %14, ptr noundef nonnull %108) #30
  br label %120

120:                                              ; preds = %118, %106
  %121 = phi ptr [ %108, %106 ], [ %119, %118 ]
  store ptr %121, ptr @ix86_compare_op0, align 8, !tbaa !5
  store ptr %107, ptr @ix86_compare_op1, align 8, !tbaa !5
  %122 = tail call ptr @ix86_expand_compare(i32 noundef %109)
  store ptr %122, ptr %3, align 8, !tbaa !5
  %123 = load i32, ptr %122, align 8
  %124 = trunc i32 %123 to i16
  switch i16 %124, label %125 [
    i16 89, label %126
    i16 86, label %126
  ]

125:                                              ; preds = %120
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 15465, ptr noundef nonnull @.str.131) #30
  br label %126

126:                                              ; preds = %43, %16, %21, %21, %21, %21, %21, %21, %125, %120, %120, %112, %47, %92, %78, %59, %66, %48, %45, %44, %13
  %127 = phi i8 [ 0, %13 ], [ 1, %45 ], [ 0, %21 ], [ 0, %21 ], [ 0, %21 ], [ 0, %21 ], [ 0, %21 ], [ 0, %21 ], [ 0, %44 ], [ 0, %16 ], [ 0, %48 ], [ 0, %66 ], [ 0, %59 ], [ 0, %78 ], [ 0, %92 ], [ 0, %47 ], [ 0, %112 ], [ 1, %120 ], [ 1, %120 ], [ 1, %125 ], [ 0, %43 ]
  ret i8 %127
}

declare i32 @reverse_condition(i32 noundef) local_unnamed_addr #3

declare i32 @reg_overlap_mentioned_p(ptr noundef, ptr noundef) local_unnamed_addr #3

declare ptr @gen_x86_movsicc_0_m1(ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

declare ptr @emit_store_flag(ptr noundef, i32 noundef, ptr noundef, ptr noundef, i32 noundef, i32 noundef, i32 noundef) local_unnamed_addr #3

declare ptr @expand_simple_unop(i32 noundef, i32 noundef, ptr noundef, ptr noundef, i32 noundef) local_unnamed_addr #3

declare ptr @gen_int_mode(i64 noundef, i32 noundef) local_unnamed_addr #3

declare i32 @x86_64_immediate_operand(ptr noundef, i32 noundef) local_unnamed_addr #3

declare i32 @nonimmediate_operand(ptr noundef, i32 noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define dso_local i32 @ix86_expand_fp_movcc(ptr nocapture noundef readonly %0) local_unnamed_addr #9 {
  %2 = load ptr, ptr %0, align 8, !tbaa !5
  %3 = load i32, ptr %2, align 8
  %4 = lshr i32 %3, 16
  %5 = and i32 %4, 255
  %6 = getelementptr inbounds ptr, ptr %0, i64 1
  %7 = load ptr, ptr %6, align 8, !tbaa !5
  %8 = load i32, ptr %7, align 8
  %9 = and i32 %8, 65535
  %10 = getelementptr inbounds %struct.rtx_def, ptr %7, i64 0, i32 1
  %11 = load ptr, ptr %10, align 8, !tbaa !16
  store ptr %11, ptr @ix86_compare_op0, align 8, !tbaa !5
  %12 = getelementptr inbounds %struct.rtx_def, ptr %7, i64 0, i32 1, i32 0, i32 0, i64 1
  %13 = load ptr, ptr %12, align 8, !tbaa !16
  store ptr %13, ptr @ix86_compare_op1, align 8, !tbaa !5
  %14 = load i32, ptr @ix86_fpmath, align 4, !tbaa !16
  %15 = and i32 %14, 2
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %82, label %17

17:                                               ; preds = %1
  %18 = load i32, ptr @ix86_isa_flags, align 4, !tbaa !20
  %19 = and i32 %18, 65536
  %20 = icmp ne i32 %19, 0
  %21 = icmp eq i32 %5, 38
  %22 = select i1 %20, i1 %21, i1 false
  br i1 %22, label %28, label %23

23:                                               ; preds = %17
  %24 = and i32 %18, 131072
  %25 = icmp ne i32 %24, 0
  %26 = icmp eq i32 %5, 39
  %27 = select i1 %25, i1 %26, i1 false
  br i1 %27, label %28, label %82

28:                                               ; preds = %23, %17
  %29 = load i32, ptr %11, align 8
  %30 = lshr i32 %29, 16
  %31 = and i32 %30, 255
  %32 = icmp eq i32 %31, 0
  br i1 %32, label %33, label %37

33:                                               ; preds = %28
  %34 = load i32, ptr %13, align 8
  %35 = lshr i32 %34, 16
  %36 = and i32 %35, 255
  br label %37

37:                                               ; preds = %33, %28
  %38 = phi i32 [ %36, %33 ], [ %31, %28 ]
  %39 = icmp eq i32 %38, %5
  br i1 %39, label %40, label %111

40:                                               ; preds = %37
  %41 = load ptr, ptr %0, align 8, !tbaa !5
  %42 = trunc i32 %8 to i16
  switch i16 %42, label %54 [
    i16 97, label %111
    i16 92, label %111
    i16 85, label %61
    i16 84, label %61
    i16 94, label %61
    i16 93, label %61
    i16 81, label %43
    i16 80, label %43
    i16 90, label %43
    i16 91, label %43
    i16 82, label %50
    i16 83, label %50
    i16 95, label %50
    i16 96, label %50
  ]

43:                                               ; preds = %40, %40, %40, %40
  %44 = icmp eq ptr %41, null
  br i1 %44, label %61, label %45

45:                                               ; preds = %43
  %46 = tail call i32 @rtx_equal_p(ptr noundef nonnull %41, ptr noundef %13) #30
  %47 = icmp eq i32 %46, 0
  %48 = load ptr, ptr @ix86_compare_op0, align 8, !tbaa !5
  %49 = load ptr, ptr @ix86_compare_op1, align 8, !tbaa !5
  br i1 %47, label %61, label %50

50:                                               ; preds = %45, %40, %40, %40, %40
  %51 = phi ptr [ %13, %40 ], [ %13, %40 ], [ %13, %40 ], [ %13, %40 ], [ %49, %45 ]
  %52 = phi ptr [ %11, %40 ], [ %11, %40 ], [ %11, %40 ], [ %11, %40 ], [ %48, %45 ]
  store ptr %51, ptr @ix86_compare_op0, align 8, !tbaa !5
  store ptr %52, ptr @ix86_compare_op1, align 8, !tbaa !5
  %53 = tail call i32 @swap_condition(i32 noundef %9) #30
  br label %55

54:                                               ; preds = %40
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 16030, ptr noundef nonnull @.str.131) #30
  br label %55

55:                                               ; preds = %50, %54
  %56 = phi i32 [ %9, %54 ], [ %53, %50 ]
  %57 = icmp eq i32 %56, 0
  br i1 %57, label %111, label %58

58:                                               ; preds = %55
  %59 = load ptr, ptr @ix86_compare_op0, align 8, !tbaa !5
  %60 = load ptr, ptr @ix86_compare_op1, align 8, !tbaa !5
  br label %61

61:                                               ; preds = %58, %40, %40, %40, %40, %43, %45
  %62 = phi ptr [ %60, %58 ], [ %49, %45 ], [ %13, %43 ], [ %13, %40 ], [ %13, %40 ], [ %13, %40 ], [ %13, %40 ]
  %63 = phi ptr [ %59, %58 ], [ %48, %45 ], [ %11, %43 ], [ %11, %40 ], [ %11, %40 ], [ %11, %40 ], [ %11, %40 ]
  %64 = phi i32 [ %56, %58 ], [ %9, %45 ], [ %9, %43 ], [ %9, %40 ], [ %9, %40 ], [ %9, %40 ], [ %9, %40 ]
  %65 = load ptr, ptr %0, align 8, !tbaa !5
  %66 = getelementptr inbounds ptr, ptr %0, i64 2
  %67 = load ptr, ptr %66, align 8, !tbaa !5
  %68 = getelementptr inbounds ptr, ptr %0, i64 3
  %69 = load ptr, ptr %68, align 8, !tbaa !5
  %70 = tail call fastcc zeroext i8 @ix86_expand_sse_fp_minmax(ptr noundef %65, i32 noundef %64, ptr noundef %63, ptr noundef %62, ptr noundef %67, ptr noundef %69), !range !66
  %71 = icmp eq i8 %70, 0
  br i1 %71, label %72, label %111

72:                                               ; preds = %61
  %73 = load ptr, ptr %0, align 8, !tbaa !5
  %74 = load ptr, ptr @ix86_compare_op0, align 8, !tbaa !5
  %75 = load ptr, ptr @ix86_compare_op1, align 8, !tbaa !5
  %76 = load ptr, ptr %66, align 8, !tbaa !5
  %77 = load ptr, ptr %68, align 8, !tbaa !5
  %78 = tail call fastcc ptr @ix86_expand_sse_cmp(ptr noundef %73, i32 noundef %64, ptr noundef %74, ptr noundef %75, ptr noundef %76, ptr noundef %77)
  %79 = load ptr, ptr %0, align 8, !tbaa !5
  %80 = load ptr, ptr %66, align 8, !tbaa !5
  %81 = load ptr, ptr %68, align 8, !tbaa !5
  tail call fastcc void @ix86_expand_sse_movcc(ptr noundef %79, ptr noundef %78, ptr noundef %80, ptr noundef %81)
  br label %111

82:                                               ; preds = %23, %1
  %83 = tail call ptr @ix86_expand_compare(i32 noundef %9)
  %84 = tail call i32 @fcmov_comparison_operator(ptr noundef %83, i32 noundef 0) #30
  %85 = icmp eq i32 %84, 0
  br i1 %85, label %86, label %101

86:                                               ; preds = %82
  %87 = tail call ptr @gen_reg_rtx(i32 noundef 14) #30
  %88 = load i32, ptr %87, align 8
  %89 = and i32 %88, 16711680
  %90 = icmp eq i32 %89, 917504
  br i1 %90, label %92, label %91

91:                                               ; preds = %86
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 15332, ptr noundef nonnull @.str.131) #30
  br label %92

92:                                               ; preds = %86, %91
  %93 = tail call ptr @ix86_expand_compare(i32 noundef %9)
  %94 = load i32, ptr %93, align 8
  %95 = and i32 %94, -16711681
  %96 = or i32 %95, 917504
  store i32 %96, ptr %93, align 8
  %97 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 23, i32 noundef 0, ptr noundef nonnull %87, ptr noundef nonnull %93) #30
  %98 = tail call ptr @emit_insn(ptr noundef %97) #30
  store ptr %87, ptr @ix86_compare_op0, align 8, !tbaa !5
  %99 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 64), align 16, !tbaa !5
  store ptr %99, ptr @ix86_compare_op1, align 8, !tbaa !5
  %100 = tail call ptr @ix86_expand_compare(i32 noundef 80)
  br label %101

101:                                              ; preds = %92, %82
  %102 = phi ptr [ %83, %82 ], [ %100, %92 ]
  %103 = load ptr, ptr %0, align 8, !tbaa !5
  %104 = getelementptr inbounds ptr, ptr %0, i64 2
  %105 = load ptr, ptr %104, align 8, !tbaa !5
  %106 = getelementptr inbounds ptr, ptr %0, i64 3
  %107 = load ptr, ptr %106, align 8, !tbaa !5
  %108 = tail call ptr @gen_rtx_fmt_eee_stat(i32 noundef 47, i32 noundef %5, ptr noundef %102, ptr noundef %105, ptr noundef %107) #30
  %109 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 23, i32 noundef 0, ptr noundef %103, ptr noundef %108) #30
  %110 = tail call ptr @emit_insn(ptr noundef %109) #30
  br label %111

111:                                              ; preds = %40, %40, %72, %37, %55, %61, %101
  %112 = phi i32 [ 1, %101 ], [ 1, %72 ], [ 0, %37 ], [ 0, %55 ], [ 1, %61 ], [ 0, %40 ], [ 0, %40 ]
  ret i32 %112
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc zeroext i8 @ix86_expand_sse_fp_minmax(ptr noundef %0, i32 noundef %1, ptr noundef %2, ptr noundef %3, ptr noundef %4, ptr noundef %5) unnamed_addr #9 {
  switch i32 %1, label %43 [
    i32 85, label %8
    i32 93, label %7
  ]

7:                                                ; preds = %6
  br label %8

8:                                                ; preds = %6, %7
  %9 = phi ptr [ %5, %6 ], [ %4, %7 ]
  %10 = phi ptr [ %4, %6 ], [ %5, %7 ]
  %11 = tail call i32 @rtx_equal_p(ptr noundef %2, ptr noundef %10) #30
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %16, label %13

13:                                               ; preds = %8
  %14 = tail call i32 @rtx_equal_p(ptr noundef %3, ptr noundef %9) #30
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %16, label %22

16:                                               ; preds = %13, %8
  %17 = tail call i32 @rtx_equal_p(ptr noundef %3, ptr noundef %10) #30
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %43, label %19

19:                                               ; preds = %16
  %20 = tail call i32 @rtx_equal_p(ptr noundef %2, ptr noundef %9) #30
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %43, label %22

22:                                               ; preds = %19, %13
  %23 = phi i32 [ 51, %13 ], [ 52, %19 ]
  %24 = phi i32 [ 70, %13 ], [ 71, %19 ]
  %25 = load i32, ptr %0, align 8
  %26 = lshr i32 %25, 16
  %27 = and i32 %26, 255
  %28 = load i32, ptr @flag_finite_math_only, align 4, !tbaa !20
  %29 = icmp ne i32 %28, 0
  %30 = load i32, ptr @flag_unsafe_math_optimizations, align 4
  %31 = icmp ne i32 %30, 0
  %32 = select i1 %29, i1 %31, i1 false
  br i1 %32, label %37, label %33

33:                                               ; preds = %22
  %34 = tail call ptr @force_reg(i32 noundef %27, ptr noundef %10) #30
  %35 = tail call ptr (i32, ...) @gen_rtvec(i32 noundef 2, ptr noundef %34, ptr noundef %9) #30
  %36 = tail call ptr @gen_rtx_fmt_Ei_stat(i32 noundef 18, i32 noundef %27, ptr noundef %35, i32 noundef %23) #30
  br label %39

37:                                               ; preds = %22
  %38 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef %24, i32 noundef %27, ptr noundef %10, ptr noundef %9) #30
  br label %39

39:                                               ; preds = %37, %33
  %40 = phi ptr [ %38, %37 ], [ %36, %33 ]
  %41 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 23, i32 noundef 0, ptr noundef nonnull %0, ptr noundef %40) #30
  %42 = tail call ptr @emit_insn(ptr noundef %41) #30
  br label %43

43:                                               ; preds = %16, %19, %6, %39
  %44 = phi i8 [ 1, %39 ], [ 0, %6 ], [ 0, %19 ], [ 0, %16 ]
  ret i8 %44
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc ptr @ix86_expand_sse_cmp(ptr noundef %0, i32 noundef %1, ptr noundef %2, ptr noundef %3, ptr noundef %4, ptr noundef %5) unnamed_addr #9 {
  %7 = load i32, ptr %0, align 8
  %8 = lshr i32 %7, 16
  %9 = and i32 %8, 255
  %10 = tail call ptr @force_reg(i32 noundef %9, ptr noundef %2) #30
  %11 = tail call i32 @nonimmediate_operand(ptr noundef %3, i32 noundef %9) #30
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %13, label %15

13:                                               ; preds = %6
  %14 = tail call ptr @force_reg(i32 noundef %9, ptr noundef %3) #30
  br label %15

15:                                               ; preds = %13, %6
  %16 = phi ptr [ %3, %6 ], [ %14, %13 ]
  %17 = load i32, ptr @optimize, align 4, !tbaa !20
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %19, label %25

19:                                               ; preds = %15
  %20 = tail call i32 @reg_overlap_mentioned_p(ptr noundef nonnull %0, ptr noundef %4) #30
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %22, label %25

22:                                               ; preds = %19
  %23 = tail call i32 @reg_overlap_mentioned_p(ptr noundef nonnull %0, ptr noundef %5) #30
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %27, label %25

25:                                               ; preds = %22, %19, %15
  %26 = tail call ptr @gen_reg_rtx(i32 noundef %9) #30
  br label %27

27:                                               ; preds = %25, %22
  %28 = phi ptr [ %26, %25 ], [ %0, %22 ]
  %29 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef %1, i32 noundef %9, ptr noundef %10, ptr noundef %16) #30
  %30 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 23, i32 noundef 0, ptr noundef %28, ptr noundef %29) #30
  %31 = tail call ptr @emit_insn(ptr noundef %30) #30
  ret ptr %28
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc void @ix86_expand_sse_movcc(ptr noundef %0, ptr noundef %1, ptr noundef %2, ptr noundef %3) unnamed_addr #9 {
  %5 = load i32, ptr %0, align 8
  %6 = lshr i32 %5, 16
  %7 = and i32 %6, 255
  %8 = zext i32 %7 to i64
  %9 = getelementptr inbounds [87 x ptr], ptr @const_tiny_rtx, i64 0, i64 %8
  %10 = load ptr, ptr %9, align 8, !tbaa !5
  %11 = icmp eq ptr %10, %3
  br i1 %11, label %12, label %16

12:                                               ; preds = %4
  %13 = tail call ptr @force_reg(i32 noundef %7, ptr noundef %2) #30
  %14 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 61, i32 noundef %7, ptr noundef %1, ptr noundef %13) #30
  %15 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 23, i32 noundef 0, ptr noundef nonnull %0, ptr noundef %14) #30
  br label %49

16:                                               ; preds = %4
  %17 = icmp eq ptr %10, %2
  br i1 %17, label %18, label %23

18:                                               ; preds = %16
  %19 = tail call ptr @force_reg(i32 noundef %7, ptr noundef %3) #30
  %20 = tail call ptr @gen_rtx_fmt_e_stat(i32 noundef 64, i32 noundef %7, ptr noundef %1) #30
  %21 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 61, i32 noundef %7, ptr noundef %20, ptr noundef %19) #30
  %22 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 23, i32 noundef 0, ptr noundef nonnull %0, ptr noundef %21) #30
  br label %49

23:                                               ; preds = %16
  %24 = load i32, ptr @ix86_isa_flags, align 4, !tbaa !20
  %25 = and i32 %24, 8388608
  %26 = icmp eq i32 %25, 0
  br i1 %26, label %30, label %27

27:                                               ; preds = %23
  %28 = tail call ptr @gen_rtx_fmt_eee_stat(i32 noundef 47, i32 noundef %7, ptr noundef %1, ptr noundef %2, ptr noundef %3) #30
  %29 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 23, i32 noundef %7, ptr noundef nonnull %0, ptr noundef %28) #30
  br label %49

30:                                               ; preds = %23
  %31 = tail call ptr @force_reg(i32 noundef %7, ptr noundef %2) #30
  %32 = tail call ptr @force_reg(i32 noundef %7, ptr noundef %3) #30
  %33 = tail call ptr @gen_reg_rtx(i32 noundef %7) #30
  %34 = load i32, ptr @optimize, align 4, !tbaa !20
  %35 = icmp eq i32 %34, 0
  br i1 %35, label %38, label %36

36:                                               ; preds = %30
  %37 = tail call ptr @gen_reg_rtx(i32 noundef %7) #30
  br label %38

38:                                               ; preds = %30, %36
  %39 = phi ptr [ %37, %36 ], [ %0, %30 ]
  %40 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 61, i32 noundef %7, ptr noundef %31, ptr noundef %1) #30
  %41 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 23, i32 noundef 0, ptr noundef %33, ptr noundef %40) #30
  %42 = tail call ptr @emit_insn(ptr noundef %41) #30
  %43 = tail call ptr @gen_rtx_fmt_e_stat(i32 noundef 64, i32 noundef %7, ptr noundef %1) #30
  %44 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 61, i32 noundef %7, ptr noundef %43, ptr noundef %32) #30
  %45 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 23, i32 noundef 0, ptr noundef %39, ptr noundef %44) #30
  %46 = tail call ptr @emit_insn(ptr noundef %45) #30
  %47 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 62, i32 noundef %7, ptr noundef %39, ptr noundef %33) #30
  %48 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 23, i32 noundef 0, ptr noundef nonnull %0, ptr noundef %47) #30
  br label %49

49:                                               ; preds = %18, %38, %27, %12
  %50 = phi ptr [ %22, %18 ], [ %48, %38 ], [ %29, %27 ], [ %15, %12 ]
  %51 = tail call ptr @emit_insn(ptr noundef %50) #30
  ret void
}

declare i32 @fcmov_comparison_operator(ptr noundef, i32 noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define dso_local zeroext i8 @ix86_expand_fp_vcond(ptr nocapture noundef %0) local_unnamed_addr #9 {
  %2 = getelementptr inbounds ptr, ptr %0, i64 3
  %3 = load ptr, ptr %2, align 8, !tbaa !5
  %4 = load i32, ptr %3, align 8
  %5 = and i32 %4, 65535
  %6 = load ptr, ptr %0, align 8, !tbaa !5
  %7 = getelementptr inbounds ptr, ptr %0, i64 4
  %8 = getelementptr inbounds ptr, ptr %0, i64 5
  %9 = trunc i32 %4 to i16
  switch i16 %9, label %20 [
    i16 97, label %45
    i16 92, label %45
    i16 85, label %24
    i16 84, label %24
    i16 94, label %24
    i16 93, label %24
    i16 81, label %10
    i16 80, label %10
    i16 90, label %10
    i16 91, label %10
    i16 82, label %16
    i16 83, label %16
    i16 95, label %16
    i16 96, label %16
  ]

10:                                               ; preds = %1, %1, %1, %1
  %11 = icmp eq ptr %6, null
  br i1 %11, label %24, label %12

12:                                               ; preds = %10
  %13 = load ptr, ptr %8, align 8, !tbaa !5
  %14 = tail call i32 @rtx_equal_p(ptr noundef nonnull %6, ptr noundef %13) #30
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %24, label %16

16:                                               ; preds = %12, %1, %1, %1, %1
  %17 = load <2 x ptr>, ptr %7, align 8, !tbaa !5
  %18 = shufflevector <2 x ptr> %17, <2 x ptr> poison, <2 x i32> <i32 1, i32 0>
  store <2 x ptr> %18, ptr %7, align 8, !tbaa !5
  %19 = tail call i32 @swap_condition(i32 noundef %5) #30
  br label %21

20:                                               ; preds = %1
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 16030, ptr noundef nonnull @.str.131) #30
  br label %21

21:                                               ; preds = %16, %20
  %22 = phi i32 [ %5, %20 ], [ %19, %16 ]
  %23 = icmp eq i32 %22, 0
  br i1 %23, label %45, label %24

24:                                               ; preds = %1, %1, %1, %1, %10, %12, %21
  %25 = phi i32 [ %22, %21 ], [ %5, %12 ], [ %5, %10 ], [ %5, %1 ], [ %5, %1 ], [ %5, %1 ], [ %5, %1 ]
  %26 = load ptr, ptr %0, align 8, !tbaa !5
  %27 = load ptr, ptr %7, align 8, !tbaa !5
  %28 = load ptr, ptr %8, align 8, !tbaa !5
  %29 = getelementptr inbounds ptr, ptr %0, i64 1
  %30 = load ptr, ptr %29, align 8, !tbaa !5
  %31 = getelementptr inbounds ptr, ptr %0, i64 2
  %32 = load ptr, ptr %31, align 8, !tbaa !5
  %33 = tail call fastcc zeroext i8 @ix86_expand_sse_fp_minmax(ptr noundef %26, i32 noundef %25, ptr noundef %27, ptr noundef %28, ptr noundef %30, ptr noundef %32), !range !66
  %34 = icmp eq i8 %33, 0
  br i1 %34, label %35, label %45

35:                                               ; preds = %24
  %36 = load ptr, ptr %0, align 8, !tbaa !5
  %37 = load ptr, ptr %7, align 8, !tbaa !5
  %38 = load ptr, ptr %8, align 8, !tbaa !5
  %39 = load ptr, ptr %29, align 8, !tbaa !5
  %40 = load ptr, ptr %31, align 8, !tbaa !5
  %41 = tail call fastcc ptr @ix86_expand_sse_cmp(ptr noundef %36, i32 noundef %25, ptr noundef %37, ptr noundef %38, ptr noundef %39, ptr noundef %40)
  %42 = load ptr, ptr %0, align 8, !tbaa !5
  %43 = load ptr, ptr %29, align 8, !tbaa !5
  %44 = load ptr, ptr %31, align 8, !tbaa !5
  tail call fastcc void @ix86_expand_sse_movcc(ptr noundef %42, ptr noundef %41, ptr noundef %43, ptr noundef %44)
  br label %45

45:                                               ; preds = %1, %1, %24, %21, %35
  %46 = phi i8 [ 1, %35 ], [ 0, %21 ], [ 1, %24 ], [ 0, %1 ], [ 0, %1 ]
  ret i8 %46
}

; Function Attrs: nounwind sspstrong uwtable
define dso_local zeroext i8 @ix86_expand_int_vcond(ptr nocapture noundef readonly %0) local_unnamed_addr #9 {
  %2 = load ptr, ptr %0, align 8, !tbaa !5
  %3 = load i32, ptr %2, align 8
  %4 = lshr i32 %3, 16
  %5 = and i32 %4, 255
  %6 = getelementptr inbounds ptr, ptr %0, i64 3
  %7 = load ptr, ptr %6, align 8, !tbaa !5
  %8 = load i32, ptr %7, align 8
  %9 = and i32 %8, 65535
  %10 = getelementptr inbounds ptr, ptr %0, i64 4
  %11 = load ptr, ptr %10, align 8, !tbaa !5
  %12 = getelementptr inbounds ptr, ptr %0, i64 5
  %13 = load ptr, ptr %12, align 8, !tbaa !5
  %14 = load i32, ptr @ix86_isa_flags, align 4, !tbaa !20
  %15 = and i32 %14, 8388608
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %17, label %96

17:                                               ; preds = %1
  %18 = trunc i32 %8 to i16
  switch i16 %18, label %27 [
    i16 81, label %28
    i16 83, label %28
    i16 87, label %28
    i16 80, label %19
    i16 84, label %19
    i16 88, label %19
    i16 82, label %21
    i16 86, label %21
    i16 85, label %23
    i16 89, label %23
  ]

19:                                               ; preds = %17, %17, %17
  %20 = tail call i32 @reverse_condition(i32 noundef %9) #30
  br label %28

21:                                               ; preds = %17, %17
  %22 = tail call i32 @reverse_condition(i32 noundef %9) #30
  br label %23

23:                                               ; preds = %17, %17, %21
  %24 = phi i8 [ 0, %17 ], [ 0, %17 ], [ 1, %21 ]
  %25 = phi i32 [ %9, %17 ], [ %9, %17 ], [ %22, %21 ]
  %26 = tail call i32 @swap_condition(i32 noundef %25) #30
  br label %28

27:                                               ; preds = %17
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 16299, ptr noundef nonnull @.str.131) #30
  br label %28

28:                                               ; preds = %17, %17, %17, %27, %23, %19
  %29 = phi ptr [ %11, %27 ], [ %13, %23 ], [ %11, %19 ], [ %11, %17 ], [ %11, %17 ], [ %11, %17 ]
  %30 = phi ptr [ %13, %27 ], [ %11, %23 ], [ %13, %19 ], [ %13, %17 ], [ %13, %17 ], [ %13, %17 ]
  %31 = phi i8 [ 0, %27 ], [ %24, %23 ], [ 1, %19 ], [ 0, %17 ], [ 0, %17 ], [ 0, %17 ]
  %32 = phi i32 [ %9, %27 ], [ %26, %23 ], [ %20, %19 ], [ %9, %17 ], [ %9, %17 ], [ %9, %17 ]
  %33 = icmp eq i32 %5, 66
  br i1 %33, label %34, label %44

34:                                               ; preds = %28
  switch i32 %32, label %43 [
    i32 81, label %35
    i32 83, label %39
    i32 87, label %39
  ]

35:                                               ; preds = %34
  %36 = load i32, ptr @ix86_isa_flags, align 4, !tbaa !20
  %37 = and i32 %36, 524288
  %38 = icmp eq i32 %37, 0
  br i1 %38, label %115, label %96

39:                                               ; preds = %34, %34
  %40 = load i32, ptr @ix86_isa_flags, align 4, !tbaa !20
  %41 = and i32 %40, 1048576
  %42 = icmp eq i32 %41, 0
  br i1 %42, label %115, label %44

43:                                               ; preds = %34
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 16321, ptr noundef nonnull @.str.131) #30
  br label %96

44:                                               ; preds = %39, %28
  %45 = icmp eq i32 %32, 87
  br i1 %45, label %46, label %96

46:                                               ; preds = %44
  %47 = tail call ptr @force_reg(i32 noundef %5, ptr noundef %29) #30
  %48 = trunc i32 %4 to i8
  switch i8 %48, label %95 [
    i8 65, label %49
    i8 66, label %49
    i8 63, label %85
    i8 64, label %85
  ]

49:                                               ; preds = %46, %46
  %50 = zext i32 %5 to i64
  %51 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %50
  %52 = load i8, ptr %51, align 1, !tbaa !16
  %53 = zext i8 %52 to i32
  switch i8 %52, label %60 [
    i8 16, label %54
    i8 38, label %54
    i8 17, label %57
    i8 39, label %57
    i8 18, label %61
    i8 41, label %61
  ]

54:                                               ; preds = %49, %49
  %55 = icmp eq i8 %52, 16
  %56 = select i1 %55, i32 65, i32 79
  br label %61

57:                                               ; preds = %49, %49
  %58 = icmp eq i8 %52, 17
  %59 = select i1 %58, i32 66, i32 80
  br label %61

60:                                               ; preds = %49
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 14276, ptr noundef nonnull @.str.131) #30
  unreachable

61:                                               ; preds = %57, %54, %49, %49
  %62 = phi i32 [ 17, %57 ], [ 16, %54 ], [ 18, %49 ], [ 18, %49 ]
  %63 = phi i64 [ -1, %57 ], [ 0, %54 ], [ -9223372036854775808, %49 ], [ -9223372036854775808, %49 ]
  %64 = phi i64 [ -9223372036854775808, %57 ], [ 2147483648, %54 ], [ 0, %49 ], [ 0, %49 ]
  %65 = phi i32 [ %59, %57 ], [ %56, %54 ], [ 0, %49 ], [ 0, %49 ]
  %66 = tail call ptr @immed_double_const(i64 noundef %64, i64 noundef %63, i32 noundef %62) #30
  %67 = load ptr, ptr @rtl_hooks, align 8, !tbaa !187
  %68 = tail call ptr %67(i32 noundef %53, ptr noundef %66) #30
  %69 = icmp eq i32 %65, 0
  br i1 %69, label %70, label %72

70:                                               ; preds = %61
  %71 = tail call ptr @force_reg(i32 noundef %53, ptr noundef %68) #30
  br label %75

72:                                               ; preds = %61
  %73 = tail call ptr @ix86_build_const_vector(i32 noundef %53, i8 noundef zeroext 1, ptr noundef %68)
  %74 = tail call ptr @force_reg(i32 noundef %65, ptr noundef %73) #30
  br label %75

75:                                               ; preds = %70, %72
  %76 = phi ptr [ %71, %70 ], [ %74, %72 ]
  %77 = icmp eq i32 %5, 65
  %78 = select i1 %77, ptr @gen_subv4si3, ptr @gen_subv2di3
  %79 = tail call ptr @gen_reg_rtx(i32 noundef %5) #30
  %80 = tail call ptr %78(ptr noundef %79, ptr noundef %47, ptr noundef %76) #30, !callees !223
  %81 = tail call ptr @emit_insn(ptr noundef %80) #30
  %82 = tail call ptr @gen_reg_rtx(i32 noundef %5) #30
  %83 = tail call ptr %78(ptr noundef %82, ptr noundef %30, ptr noundef %76) #30, !callees !223
  %84 = tail call ptr @emit_insn(ptr noundef %83) #30
  br label %96

85:                                               ; preds = %46, %46
  %86 = tail call ptr @gen_reg_rtx(i32 noundef %5) #30
  %87 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 135, i32 noundef %5, ptr noundef %47, ptr noundef %30) #30
  %88 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 23, i32 noundef 0, ptr noundef %86, ptr noundef %87) #30
  %89 = tail call ptr @emit_insn(ptr noundef %88) #30
  %90 = zext i32 %5 to i64
  %91 = getelementptr inbounds [87 x ptr], ptr @const_tiny_rtx, i64 0, i64 %90
  %92 = load ptr, ptr %91, align 8, !tbaa !5
  %93 = icmp eq i8 %31, 0
  %94 = zext i1 %93 to i8
  br label %96

95:                                               ; preds = %46
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 16372, ptr noundef nonnull @.str.131) #30
  br label %96

96:                                               ; preds = %35, %43, %44, %95, %85, %75, %1
  %97 = phi ptr [ %11, %1 ], [ %47, %95 ], [ %86, %85 ], [ %79, %75 ], [ %29, %44 ], [ %29, %43 ], [ %29, %35 ]
  %98 = phi ptr [ %13, %1 ], [ %30, %95 ], [ %92, %85 ], [ %82, %75 ], [ %30, %44 ], [ %30, %43 ], [ %30, %35 ]
  %99 = phi i8 [ 0, %1 ], [ %31, %95 ], [ %94, %85 ], [ %31, %75 ], [ %31, %44 ], [ %31, %43 ], [ %31, %35 ]
  %100 = phi i32 [ %9, %1 ], [ 87, %95 ], [ 81, %85 ], [ 83, %75 ], [ %32, %44 ], [ %32, %43 ], [ 81, %35 ]
  %101 = load ptr, ptr %0, align 8, !tbaa !5
  %102 = zext i8 %99 to i32
  %103 = add nuw nsw i32 %102, 1
  %104 = zext i32 %103 to i64
  %105 = getelementptr inbounds ptr, ptr %0, i64 %104
  %106 = load ptr, ptr %105, align 8, !tbaa !5
  %107 = sub nuw nsw i32 2, %102
  %108 = zext i32 %107 to i64
  %109 = getelementptr inbounds ptr, ptr %0, i64 %108
  %110 = load ptr, ptr %109, align 8, !tbaa !5
  %111 = tail call fastcc ptr @ix86_expand_sse_cmp(ptr noundef %101, i32 noundef %100, ptr noundef %97, ptr noundef %98, ptr noundef %106, ptr noundef %110)
  %112 = load ptr, ptr %0, align 8, !tbaa !5
  %113 = load ptr, ptr %105, align 8, !tbaa !5
  %114 = load ptr, ptr %109, align 8, !tbaa !5
  tail call fastcc void @ix86_expand_sse_movcc(ptr noundef %112, ptr noundef %111, ptr noundef %113, ptr noundef %114)
  br label %115

115:                                              ; preds = %39, %35, %96
  %116 = phi i8 [ 1, %96 ], [ 0, %35 ], [ 0, %39 ]
  ret i8 %116
}

declare ptr @gen_subv4si3(ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

declare ptr @gen_subv2di3(ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define dso_local void @ix86_expand_sse_unpack(ptr nocapture noundef readonly %0, i8 noundef zeroext %1, i8 noundef zeroext %2) local_unnamed_addr #9 {
  %4 = getelementptr inbounds ptr, ptr %0, i64 1
  %5 = load ptr, ptr %4, align 8, !tbaa !5
  %6 = load i32, ptr %5, align 8
  %7 = lshr i32 %6, 16
  %8 = and i32 %7, 255
  %9 = trunc i32 %7 to i8
  switch i8 %9, label %19 [
    i8 63, label %10
    i8 64, label %13
    i8 65, label %16
  ]

10:                                               ; preds = %3
  %11 = icmp eq i8 %2, 0
  %12 = select i1 %11, ptr @gen_vec_interleave_lowv16qi, ptr @gen_vec_interleave_highv16qi
  br label %20

13:                                               ; preds = %3
  %14 = icmp eq i8 %2, 0
  %15 = select i1 %14, ptr @gen_vec_interleave_lowv8hi, ptr @gen_vec_interleave_highv8hi
  br label %20

16:                                               ; preds = %3
  %17 = icmp eq i8 %2, 0
  %18 = select i1 %17, ptr @gen_vec_interleave_lowv4si, ptr @gen_vec_interleave_highv4si
  br label %20

19:                                               ; preds = %3
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 16417, ptr noundef nonnull @.str.131) #30
  br label %20

20:                                               ; preds = %16, %13, %10, %19
  %21 = phi ptr [ undef, %19 ], [ %12, %10 ], [ %15, %13 ], [ %18, %16 ]
  %22 = load ptr, ptr @rtl_hooks, align 8, !tbaa !187
  %23 = load ptr, ptr %0, align 8, !tbaa !5
  %24 = tail call ptr %22(i32 noundef %8, ptr noundef %23) #30
  %25 = icmp eq i8 %1, 0
  br i1 %25, label %31, label %26

26:                                               ; preds = %20
  %27 = zext i32 %8 to i64
  %28 = getelementptr inbounds [87 x ptr], ptr @const_tiny_rtx, i64 0, i64 %27
  %29 = load ptr, ptr %28, align 8, !tbaa !5
  %30 = tail call ptr @force_reg(i32 noundef %8, ptr noundef %29) #30
  br label %39

31:                                               ; preds = %20
  %32 = tail call ptr @gen_reg_rtx(i32 noundef %8) #30
  %33 = zext i32 %8 to i64
  %34 = getelementptr inbounds [87 x ptr], ptr @const_tiny_rtx, i64 0, i64 %33
  %35 = load ptr, ptr %34, align 8, !tbaa !5
  %36 = load ptr, ptr %4, align 8, !tbaa !5
  %37 = load ptr, ptr @global_rtl, align 16, !tbaa !5
  %38 = tail call fastcc ptr @ix86_expand_sse_cmp(ptr noundef %32, i32 noundef 83, ptr noundef %35, ptr noundef %36, ptr noundef %37, ptr noundef %37)
  br label %39

39:                                               ; preds = %31, %26
  %40 = phi ptr [ %30, %26 ], [ %38, %31 ]
  %41 = load ptr, ptr %4, align 8, !tbaa !5
  %42 = tail call ptr %21(ptr noundef %24, ptr noundef %41, ptr noundef %40) #30
  %43 = tail call ptr @emit_insn(ptr noundef %42) #30
  ret void
}

declare ptr @gen_vec_interleave_highv16qi(ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

declare ptr @gen_vec_interleave_lowv16qi(ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

declare ptr @gen_vec_interleave_highv8hi(ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

declare ptr @gen_vec_interleave_lowv8hi(ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

declare ptr @gen_vec_interleave_highv4si(ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define dso_local void @ix86_expand_sse4_unpack(ptr nocapture noundef readonly %0, i8 noundef zeroext %1, i8 noundef zeroext %2) local_unnamed_addr #9 {
  %4 = getelementptr inbounds ptr, ptr %0, i64 1
  %5 = load ptr, ptr %4, align 8, !tbaa !5
  %6 = load i32, ptr %5, align 8
  %7 = lshr i32 %6, 16
  %8 = and i32 %7, 255
  %9 = trunc i32 %7 to i8
  switch i8 %9, label %19 [
    i8 63, label %10
    i8 64, label %13
    i8 65, label %16
  ]

10:                                               ; preds = %3
  %11 = icmp eq i8 %1, 0
  %12 = select i1 %11, ptr @gen_sse4_1_extendv8qiv8hi2, ptr @gen_sse4_1_zero_extendv8qiv8hi2
  br label %20

13:                                               ; preds = %3
  %14 = icmp eq i8 %1, 0
  %15 = select i1 %14, ptr @gen_sse4_1_extendv4hiv4si2, ptr @gen_sse4_1_zero_extendv4hiv4si2
  br label %20

16:                                               ; preds = %3
  %17 = icmp eq i8 %1, 0
  %18 = select i1 %17, ptr @gen_sse4_1_extendv2siv2di2, ptr @gen_sse4_1_zero_extendv2siv2di2
  br label %20

19:                                               ; preds = %3
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 16462, ptr noundef nonnull @.str.131) #30
  br label %20

20:                                               ; preds = %16, %13, %10, %19
  %21 = phi ptr [ undef, %19 ], [ %12, %10 ], [ %15, %13 ], [ %18, %16 ]
  %22 = load ptr, ptr %0, align 8, !tbaa !5
  %23 = icmp eq i8 %2, 0
  br i1 %23, label %34, label %24

24:                                               ; preds = %20
  %25 = tail call ptr @gen_reg_rtx(i32 noundef %8) #30
  %26 = load ptr, ptr @rtl_hooks, align 8, !tbaa !187
  %27 = tail call ptr %26(i32 noundef 67, ptr noundef %25) #30
  %28 = load ptr, ptr @rtl_hooks, align 8, !tbaa !187
  %29 = load ptr, ptr %4, align 8, !tbaa !5
  %30 = tail call ptr %28(i32 noundef 67, ptr noundef %29) #30
  %31 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef 64) #30
  %32 = tail call ptr @gen_sse2_lshrv1ti3(ptr noundef %27, ptr noundef %30, ptr noundef %31) #30
  %33 = tail call ptr @emit_insn(ptr noundef %32) #30
  br label %36

34:                                               ; preds = %20
  %35 = load ptr, ptr %4, align 8, !tbaa !5
  br label %36

36:                                               ; preds = %34, %24
  %37 = phi ptr [ %25, %24 ], [ %35, %34 ]
  %38 = tail call ptr %21(ptr noundef %22, ptr noundef %37) #30
  %39 = tail call ptr @emit_insn(ptr noundef %38) #30
  ret void
}

declare ptr @gen_sse4_1_zero_extendv8qiv8hi2(ptr noundef, ptr noundef) local_unnamed_addr #3

declare ptr @gen_sse4_1_extendv8qiv8hi2(ptr noundef, ptr noundef) local_unnamed_addr #3

declare ptr @gen_sse4_1_zero_extendv4hiv4si2(ptr noundef, ptr noundef) local_unnamed_addr #3

declare ptr @gen_sse4_1_extendv4hiv4si2(ptr noundef, ptr noundef) local_unnamed_addr #3

declare ptr @gen_sse4_1_zero_extendv2siv2di2(ptr noundef, ptr noundef) local_unnamed_addr #3

declare ptr @gen_sse4_1_extendv2siv2di2(ptr noundef, ptr noundef) local_unnamed_addr #3

declare ptr @gen_sse2_lshrv1ti3(ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define dso_local i32 @ix86_expand_int_addcc(ptr nocapture noundef readonly %0) local_unnamed_addr #9 {
  %2 = alloca ptr, align 8
  %3 = getelementptr inbounds ptr, ptr %0, i64 1
  %4 = load ptr, ptr %3, align 8, !tbaa !5
  %5 = load i32, ptr %4, align 8
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %2) #30
  %6 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 64), align 16, !tbaa !5
  %7 = getelementptr inbounds %struct.rtx_def, ptr %4, i64 0, i32 1
  %8 = load ptr, ptr %7, align 8, !tbaa !16
  store ptr %8, ptr @ix86_compare_op0, align 8, !tbaa !5
  %9 = getelementptr inbounds %struct.rtx_def, ptr %4, i64 0, i32 1, i32 0, i32 0, i64 1
  %10 = load ptr, ptr %9, align 8, !tbaa !16
  store ptr %10, ptr @ix86_compare_op1, align 8, !tbaa !5
  %11 = getelementptr inbounds ptr, ptr %0, i64 3
  %12 = load ptr, ptr %11, align 8, !tbaa !5
  %13 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 65), align 8, !tbaa !5
  %14 = icmp eq ptr %12, %13
  %15 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 63), align 8
  %16 = icmp eq ptr %12, %15
  %17 = select i1 %14, i1 true, i1 %16
  br i1 %17, label %18, label %85

18:                                               ; preds = %1
  %19 = and i32 %5, 65535
  %20 = call fastcc zeroext i8 @ix86_expand_carry_flag_compare(i32 noundef %19, ptr noundef %8, ptr noundef %10, ptr noundef nonnull %2), !range !66
  %21 = icmp eq i8 %20, 0
  br i1 %21, label %85, label %22

22:                                               ; preds = %18
  %23 = load ptr, ptr %2, align 8, !tbaa !5
  %24 = load i32, ptr %23, align 8
  %25 = and i32 %24, 65535
  %26 = getelementptr inbounds %struct.rtx_def, ptr %23, i64 0, i32 1
  %27 = load ptr, ptr %26, align 8, !tbaa !16
  %28 = load i32, ptr %27, align 8
  %29 = lshr i32 %28, 16
  %30 = and i32 %29, 255
  %31 = add nsw i32 %30, -11
  %32 = icmp ult i32 %31, 2
  br i1 %32, label %33, label %41

33:                                               ; preds = %22
  %34 = trunc i32 %24 to i16
  switch i16 %34, label %40 [
    i16 83, label %43
    i16 82, label %35
    i16 91, label %36
    i16 90, label %36
    i16 92, label %37
    i16 96, label %58
    i16 95, label %38
    i16 97, label %39
  ]

35:                                               ; preds = %33
  br label %43

36:                                               ; preds = %33, %33
  br label %43

37:                                               ; preds = %33
  br label %43

38:                                               ; preds = %33
  br label %43

39:                                               ; preds = %33
  br label %43

40:                                               ; preds = %33
  br label %43

41:                                               ; preds = %22
  %42 = icmp eq i32 %25, 89
  br i1 %42, label %58, label %47

43:                                               ; preds = %33, %35, %36, %37, %38, %39, %40
  %44 = phi i32 [ 87, %33 ], [ 86, %35 ], [ %25, %36 ], [ 81, %37 ], [ 88, %38 ], [ 80, %39 ], [ 0, %40 ]
  %45 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 63), align 8, !tbaa !5
  %46 = tail call i32 @reverse_condition_maybe_unordered(i32 noundef %25) #30
  br label %50

47:                                               ; preds = %41
  %48 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 63), align 8, !tbaa !5
  %49 = tail call i32 @reverse_condition(i32 noundef %25) #30
  br label %50

50:                                               ; preds = %47, %43
  %51 = phi i32 [ %46, %43 ], [ %49, %47 ]
  %52 = phi i32 [ %44, %43 ], [ %25, %47 ]
  %53 = phi ptr [ %45, %43 ], [ %48, %47 ]
  %54 = load i32, ptr %23, align 8
  %55 = and i32 %51, 65535
  %56 = and i32 %54, -65536
  %57 = or i32 %56, %55
  store i32 %57, ptr %23, align 8
  br label %58

58:                                               ; preds = %50, %33, %41
  %59 = phi i32 [ 89, %41 ], [ 89, %33 ], [ %52, %50 ]
  %60 = phi ptr [ %6, %41 ], [ %6, %33 ], [ %53, %50 ]
  %61 = load ptr, ptr %0, align 8, !tbaa !5
  %62 = load i32, ptr %61, align 8
  %63 = lshr i32 %62, 16
  %64 = icmp ne i32 %59, 89
  %65 = load ptr, ptr %11, align 8, !tbaa !5
  %66 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 63), align 8, !tbaa !5
  %67 = icmp eq ptr %65, %66
  %68 = xor i1 %64, %67
  %69 = trunc i32 %63 to i8
  %70 = add i8 %69, -14
  %71 = icmp ult i8 %70, 4
  br i1 %68, label %72, label %74

72:                                               ; preds = %58
  br i1 %71, label %76, label %73

73:                                               ; preds = %72
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 16544, ptr noundef nonnull @.str.131) #30
  unreachable

74:                                               ; preds = %58
  br i1 %71, label %76, label %75

75:                                               ; preds = %74
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 16564, ptr noundef nonnull @.str.131) #30
  unreachable

76:                                               ; preds = %74, %72
  %77 = phi ptr [ @switch.table.ix86_expand_int_addcc, %72 ], [ @switch.table.ix86_expand_int_addcc.1386, %74 ]
  %78 = sext i8 %70 to i64
  %79 = getelementptr inbounds [4 x ptr], ptr %77, i64 0, i64 %78
  %80 = load ptr, ptr %79, align 8
  %81 = getelementptr inbounds ptr, ptr %0, i64 2
  %82 = load ptr, ptr %81, align 8, !tbaa !5
  %83 = tail call ptr %80(ptr noundef nonnull %61, ptr noundef %82, ptr noundef %60, ptr noundef nonnull %27, ptr noundef nonnull %23) #30
  %84 = tail call ptr @emit_insn(ptr noundef %83) #30
  br label %85

85:                                               ; preds = %18, %1, %76
  %86 = phi i32 [ 1, %76 ], [ 0, %1 ], [ 0, %18 ]
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %2) #30
  ret i32 %86
}

declare ptr @gen_subqi3_carry(ptr noundef, ptr noundef, ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

declare ptr @gen_subhi3_carry(ptr noundef, ptr noundef, ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

declare ptr @gen_subdi3_carry(ptr noundef, ptr noundef, ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

declare ptr @gen_addqi3_carry(ptr noundef, ptr noundef, ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

declare ptr @gen_addhi3_carry(ptr noundef, ptr noundef, ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

declare ptr @gen_addsi3_carry(ptr noundef, ptr noundef, ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

declare ptr @gen_adddi3_carry(ptr noundef, ptr noundef, ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define dso_local void @ix86_split_long_move(ptr nocapture noundef %0) local_unnamed_addr #9 {
  %2 = alloca [2 x [4 x ptr]], align 16
  %3 = alloca [4 x i8], align 1
  call void @llvm.lifetime.start.p0(i64 64, ptr nonnull %2) #30
  %4 = load ptr, ptr %0, align 8, !tbaa !5
  %5 = load i32, ptr %4, align 8
  %6 = lshr i32 %5, 16
  %7 = and i32 %6, 255
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %3) #30
  %8 = tail call i32 @push_operand(ptr noundef nonnull %4, i32 noundef 0) #30
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %10, label %19

10:                                               ; preds = %1
  %11 = load ptr, ptr %0, align 8, !tbaa !5
  %12 = load i32, ptr %11, align 8
  %13 = and i32 %12, 65535
  %14 = icmp eq i32 %13, 43
  br i1 %14, label %15, label %19

15:                                               ; preds = %10
  %16 = tail call i32 @offsettable_memref_p(ptr noundef nonnull %11) #30
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %18, label %19

18:                                               ; preds = %15
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 16775, ptr noundef nonnull @.str.131) #30
  br label %19

19:                                               ; preds = %1, %18, %15, %10
  %20 = getelementptr inbounds ptr, ptr %0, i64 1
  %21 = load ptr, ptr %20, align 8, !tbaa !5
  %22 = getelementptr inbounds [2 x [4 x ptr]], ptr %2, i64 0, i64 1
  %23 = load ptr, ptr %0, align 8, !tbaa !5
  %24 = load i32, ptr %23, align 8
  %25 = lshr i32 %24, 16
  %26 = and i32 %25, 255
  %27 = call fastcc i32 @ix86_split_to_parts(ptr noundef %21, ptr noundef nonnull %22, i32 noundef %26), !range !224
  %28 = load ptr, ptr %0, align 8, !tbaa !5
  %29 = load i32, ptr %28, align 8
  %30 = lshr i32 %29, 16
  %31 = and i32 %30, 255
  %32 = call fastcc i32 @ix86_split_to_parts(ptr noundef nonnull %28, ptr noundef nonnull %2, i32 noundef %31), !range !224
  br i1 %9, label %73, label %33

33:                                               ; preds = %19
  %34 = load ptr, ptr %20, align 8, !tbaa !5
  %35 = load i32, ptr %34, align 8
  %36 = and i32 %35, 65535
  %37 = icmp eq i32 %36, 43
  br i1 %37, label %38, label %73

38:                                               ; preds = %33
  %39 = load ptr, ptr getelementptr inbounds ([11 x ptr], ptr @global_rtl, i64 0, i64 2), align 16, !tbaa !5
  %40 = tail call i32 @reg_overlap_mentioned_p(ptr noundef %39, ptr noundef nonnull %34) #30
  %41 = icmp eq i32 %40, 0
  br i1 %41, label %73, label %42

42:                                               ; preds = %38
  %43 = add nsw i32 %27, -1
  %44 = sext i32 %43 to i64
  %45 = getelementptr inbounds [2 x [4 x ptr]], ptr %2, i64 0, i64 1, i64 %44
  %46 = load ptr, ptr %45, align 8, !tbaa !5
  %47 = getelementptr inbounds %struct.rtx_def, ptr %46, i64 0, i32 1
  %48 = load ptr, ptr %47, align 8, !tbaa !16
  %49 = icmp eq i32 %27, 3
  %50 = icmp eq i32 %7, 40
  %51 = select i1 %49, i1 %50, i1 false
  br i1 %51, label %52, label %58

52:                                               ; preds = %42
  %53 = load i32, ptr @target_flags, align 4, !tbaa !20
  %54 = and i32 %53, 1
  %55 = icmp eq i32 %54, 0
  br i1 %55, label %60, label %56

56:                                               ; preds = %52
  %57 = tail call ptr @plus_constant(ptr noundef %48, i64 noundef 4) #30
  br label %60

58:                                               ; preds = %42
  %59 = icmp eq i32 %27, 0
  br i1 %59, label %73, label %60

60:                                               ; preds = %52, %56, %58
  %61 = phi ptr [ %48, %58 ], [ %48, %52 ], [ %57, %56 ]
  %62 = zext i32 %27 to i64
  br label %63

63:                                               ; preds = %60, %63
  %64 = phi i64 [ 0, %60 ], [ %71, %63 ]
  %65 = getelementptr inbounds [2 x [4 x ptr]], ptr %2, i64 0, i64 1, i64 %64
  %66 = load ptr, ptr %65, align 8, !tbaa !5
  %67 = load i32, ptr %66, align 8
  %68 = lshr i32 %67, 16
  %69 = and i32 %68, 255
  %70 = tail call ptr @change_address(ptr noundef nonnull %66, i32 noundef %69, ptr noundef %61) #30
  store ptr %70, ptr %65, align 8, !tbaa !5
  %71 = add nuw nsw i64 %64, 1
  %72 = icmp eq i64 %71, %62
  br i1 %72, label %73, label %63, !llvm.loop !225

73:                                               ; preds = %63, %58, %38, %33, %19
  %74 = load ptr, ptr %2, align 16, !tbaa !5
  %75 = load i32, ptr %74, align 8
  %76 = and i32 %75, 65535
  %77 = icmp eq i32 %76, 37
  br i1 %77, label %78, label %174

78:                                               ; preds = %73
  %79 = load ptr, ptr %22, align 16, !tbaa !5
  %80 = load i32, ptr %79, align 8
  %81 = and i32 %80, 65535
  %82 = icmp ne i32 %81, 43
  %83 = icmp eq i32 %27, 0
  %84 = select i1 %82, i1 true, i1 %83
  br i1 %84, label %174, label %85

85:                                               ; preds = %78
  %86 = getelementptr inbounds %struct.rtx_def, ptr %79, i64 0, i32 1
  %87 = zext i32 %27 to i64
  br label %88

88:                                               ; preds = %85, %88
  %89 = phi i64 [ 0, %85 ], [ %100, %88 ]
  %90 = phi i32 [ 0, %85 ], [ %99, %88 ]
  %91 = getelementptr inbounds [4 x ptr], ptr %2, i64 0, i64 %89
  %92 = load ptr, ptr %91, align 8, !tbaa !5
  %93 = load ptr, ptr %86, align 8, !tbaa !16
  %94 = tail call i32 @reg_overlap_mentioned_p(ptr noundef %92, ptr noundef %93) #30
  %95 = trunc i32 %94 to i8
  %96 = getelementptr inbounds [4 x i8], ptr %3, i64 0, i64 %89
  store i8 %95, ptr %96, align 1, !tbaa !16
  %97 = icmp ne i8 %95, 0
  %98 = zext i1 %97 to i32
  %99 = add nuw nsw i32 %90, %98
  %100 = add nuw nsw i64 %89, 1
  %101 = icmp eq i64 %100, %87
  br i1 %101, label %102, label %88, !llvm.loop !226

102:                                              ; preds = %88
  %103 = getelementptr inbounds [4 x i8], ptr %3, i64 0, i64 1
  %104 = load i8, ptr %103, align 1
  %105 = icmp eq i32 %99, 1
  %106 = icmp eq i32 %27, 3
  %107 = select i1 %105, i1 %106, i1 false
  %108 = icmp ne i8 %104, 0
  %109 = select i1 %107, i1 %108, i1 false
  br i1 %109, label %110, label %117

110:                                              ; preds = %102
  %111 = getelementptr inbounds [4 x ptr], ptr %2, i64 0, i64 1
  %112 = load <2 x ptr>, ptr %111, align 8, !tbaa !5
  %113 = shufflevector <2 x ptr> %112, <2 x ptr> poison, <2 x i32> <i32 1, i32 0>
  store <2 x ptr> %113, ptr %111, align 8, !tbaa !5
  %114 = getelementptr inbounds [2 x [4 x ptr]], ptr %2, i64 0, i64 1, i64 1
  %115 = load <2 x ptr>, ptr %114, align 8, !tbaa !5
  %116 = shufflevector <2 x ptr> %115, <2 x ptr> poison, <2 x i32> <i32 1, i32 0>
  store <2 x ptr> %116, ptr %114, align 8, !tbaa !5
  br label %174

117:                                              ; preds = %102
  %118 = icmp eq i32 %27, 4
  %119 = select i1 %105, i1 %118, i1 false
  br i1 %119, label %120, label %141

120:                                              ; preds = %117
  %121 = getelementptr inbounds [4 x i8], ptr %3, i64 0, i64 2
  %122 = load i8, ptr %121, align 1
  %123 = icmp ne i8 %122, 0
  %124 = select i1 %108, i1 true, i1 %123
  br i1 %124, label %125, label %174

125:                                              ; preds = %120
  %126 = icmp eq i8 %104, 0
  br i1 %126, label %134, label %127

127:                                              ; preds = %125
  %128 = getelementptr inbounds [4 x ptr], ptr %2, i64 0, i64 1
  %129 = load <2 x ptr>, ptr %128, align 8, !tbaa !5
  %130 = shufflevector <2 x ptr> %129, <2 x ptr> poison, <2 x i32> <i32 1, i32 0>
  store <2 x ptr> %130, ptr %128, align 8, !tbaa !5
  %131 = getelementptr inbounds [2 x [4 x ptr]], ptr %2, i64 0, i64 1, i64 1
  %132 = load <2 x ptr>, ptr %131, align 8, !tbaa !5
  %133 = shufflevector <2 x ptr> %132, <2 x ptr> poison, <2 x i32> <i32 1, i32 0>
  store <2 x ptr> %133, ptr %131, align 8, !tbaa !5
  br label %174

134:                                              ; preds = %125
  %135 = getelementptr inbounds [4 x ptr], ptr %2, i64 0, i64 2
  %136 = load <2 x ptr>, ptr %135, align 16, !tbaa !5
  %137 = shufflevector <2 x ptr> %136, <2 x ptr> poison, <2 x i32> <i32 1, i32 0>
  store <2 x ptr> %137, ptr %135, align 16, !tbaa !5
  %138 = getelementptr inbounds [2 x [4 x ptr]], ptr %2, i64 0, i64 1, i64 2
  %139 = load <2 x ptr>, ptr %138, align 16, !tbaa !5
  %140 = shufflevector <2 x ptr> %139, <2 x ptr> poison, <2 x i32> <i32 1, i32 0>
  store <2 x ptr> %140, ptr %138, align 16, !tbaa !5
  br label %174

141:                                              ; preds = %117
  %142 = icmp ugt i32 %99, 1
  br i1 %142, label %143, label %174

143:                                              ; preds = %141
  %144 = add nsw i32 %27, -1
  %145 = sext i32 %144 to i64
  %146 = getelementptr inbounds [4 x ptr], ptr %2, i64 0, i64 %145
  %147 = load ptr, ptr %146, align 8, !tbaa !5
  %148 = load i32, ptr %147, align 8
  %149 = and i32 %148, 16711680
  %150 = icmp eq i32 %149, 1048576
  br i1 %150, label %155, label %151

151:                                              ; preds = %143
  %152 = getelementptr i8, ptr %147, i64 8
  %153 = load i32, ptr %152, align 8, !tbaa !16
  %154 = tail call ptr @gen_rtx_REG(i32 noundef 16, i32 noundef %153) #30
  br label %155

155:                                              ; preds = %151, %143
  %156 = phi ptr [ %154, %151 ], [ %147, %143 ]
  %157 = getelementptr inbounds %struct.rtx_def, ptr %79, i64 0, i32 1
  %158 = load ptr, ptr %157, align 8, !tbaa !16
  %159 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 23, i32 noundef 0, ptr noundef %156, ptr noundef %158) #30
  %160 = tail call ptr @emit_insn(ptr noundef %159) #30
  %161 = tail call ptr @replace_equiv_address(ptr noundef nonnull %79, ptr noundef %156) #30
  store ptr %161, ptr %22, align 16, !tbaa !5
  %162 = icmp ugt i32 %27, 1
  br i1 %162, label %163, label %174

163:                                              ; preds = %155
  %164 = zext i32 %27 to i64
  br label %165

165:                                              ; preds = %163, %165
  %166 = phi i64 [ 1, %163 ], [ %172, %165 ]
  %167 = shl nuw nsw i64 %166, 2
  %168 = tail call ptr @plus_constant(ptr noundef %156, i64 noundef %167) #30
  %169 = getelementptr inbounds [2 x [4 x ptr]], ptr %2, i64 0, i64 1, i64 %166
  %170 = load ptr, ptr %169, align 8, !tbaa !5
  %171 = tail call ptr @replace_equiv_address(ptr noundef %170, ptr noundef %168) #30
  store ptr %171, ptr %169, align 8, !tbaa !5
  %172 = add nuw nsw i64 %166, 1
  %173 = icmp eq i64 %172, %164
  br i1 %173, label %174, label %165, !llvm.loop !227

174:                                              ; preds = %165, %155, %120, %110, %141, %127, %134, %78, %73
  %175 = phi i32 [ 0, %78 ], [ 0, %73 ], [ 1, %110 ], [ 1, %127 ], [ 1, %134 ], [ %99, %141 ], [ 1, %120 ], [ 1, %155 ], [ 1, %165 ]
  br i1 %9, label %208, label %176

176:                                              ; preds = %174
  switch i32 %27, label %200 [
    i32 3, label %177
    i32 4, label %188
  ]

177:                                              ; preds = %176
  %178 = load i32, ptr @target_flags, align 4, !tbaa !20
  %179 = and i32 %178, 1
  %180 = icmp ne i32 %179, 0
  %181 = icmp eq i32 %7, 40
  %182 = select i1 %180, i1 %181, i1 false
  br i1 %182, label %183, label %194

183:                                              ; preds = %177
  %184 = load ptr, ptr getelementptr inbounds ([11 x ptr], ptr @global_rtl, i64 0, i64 2), align 16, !tbaa !5
  %185 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef -4) #30
  %186 = tail call ptr @gen_addsi3(ptr noundef %184, ptr noundef %184, ptr noundef %185) #30
  %187 = tail call ptr @emit_insn(ptr noundef %186) #30
  br label %194

188:                                              ; preds = %176
  %189 = getelementptr inbounds [4 x ptr], ptr %2, i64 0, i64 3
  %190 = load ptr, ptr %189, align 8, !tbaa !5
  %191 = getelementptr inbounds [2 x [4 x ptr]], ptr %2, i64 0, i64 1, i64 3
  %192 = load ptr, ptr %191, align 8, !tbaa !5
  %193 = tail call ptr @emit_move_insn(ptr noundef %190, ptr noundef %192) #30
  br label %194

194:                                              ; preds = %177, %183, %188
  %195 = getelementptr inbounds [4 x ptr], ptr %2, i64 0, i64 2
  %196 = load ptr, ptr %195, align 16, !tbaa !5
  %197 = getelementptr inbounds [2 x [4 x ptr]], ptr %2, i64 0, i64 1, i64 2
  %198 = load ptr, ptr %197, align 16, !tbaa !5
  %199 = tail call ptr @emit_move_insn(ptr noundef %196, ptr noundef %198) #30
  br label %200

200:                                              ; preds = %194, %176
  %201 = getelementptr inbounds [4 x ptr], ptr %2, i64 0, i64 1
  %202 = load ptr, ptr %201, align 8, !tbaa !5
  %203 = getelementptr inbounds [2 x [4 x ptr]], ptr %2, i64 0, i64 1, i64 1
  %204 = load ptr, ptr %203, align 8, !tbaa !5
  %205 = tail call ptr @emit_move_insn(ptr noundef %202, ptr noundef %204) #30
  %206 = load ptr, ptr %22, align 16, !tbaa !5
  %207 = tail call ptr @emit_move_insn(ptr noundef nonnull %74, ptr noundef %206) #30
  br label %389

208:                                              ; preds = %174
  %209 = load i32, ptr %74, align 8
  %210 = and i32 %209, 65535
  %211 = icmp eq i32 %210, 37
  br i1 %211, label %212, label %237

212:                                              ; preds = %208
  %213 = getelementptr inbounds [2 x [4 x ptr]], ptr %2, i64 0, i64 1, i64 1
  %214 = load ptr, ptr %213, align 8, !tbaa !5
  %215 = load i32, ptr %214, align 8
  %216 = and i32 %215, 65535
  %217 = icmp eq i32 %216, 37
  br i1 %217, label %218, label %237

218:                                              ; preds = %212
  %219 = getelementptr i8, ptr %74, i64 8
  %220 = load i32, ptr %219, align 8, !tbaa !16
  %221 = getelementptr i8, ptr %214, i64 8
  %222 = load i32, ptr %221, align 8, !tbaa !16
  %223 = icmp eq i32 %220, %222
  br i1 %223, label %245, label %224

224:                                              ; preds = %218
  switch i32 %27, label %237 [
    i32 3, label %225
    i32 4, label %231
  ]

225:                                              ; preds = %224
  %226 = getelementptr inbounds [2 x [4 x ptr]], ptr %2, i64 0, i64 1, i64 2
  %227 = load ptr, ptr %226, align 16, !tbaa !5
  %228 = getelementptr i8, ptr %227, i64 8
  %229 = load i32, ptr %228, align 8, !tbaa !16
  %230 = icmp eq i32 %220, %229
  br i1 %230, label %247, label %237

231:                                              ; preds = %224
  %232 = getelementptr inbounds [2 x [4 x ptr]], ptr %2, i64 0, i64 1, i64 3
  %233 = load ptr, ptr %232, align 8, !tbaa !5
  %234 = getelementptr i8, ptr %233, i64 8
  %235 = load i32, ptr %234, align 8, !tbaa !16
  %236 = icmp eq i32 %220, %235
  br i1 %236, label %247, label %237

237:                                              ; preds = %225, %224, %231, %212, %208
  %238 = icmp eq i32 %175, 0
  br i1 %238, label %290, label %239

239:                                              ; preds = %237
  %240 = load ptr, ptr %22, align 16, !tbaa !5
  %241 = getelementptr inbounds %struct.rtx_def, ptr %240, i64 0, i32 1
  %242 = load ptr, ptr %241, align 8, !tbaa !16
  %243 = tail call i32 @reg_overlap_mentioned_p(ptr noundef nonnull %74, ptr noundef %242) #30
  %244 = icmp eq i32 %243, 0
  br i1 %244, label %290, label %245

245:                                              ; preds = %239, %218
  %246 = icmp eq i32 %27, 0
  br i1 %246, label %325, label %247

247:                                              ; preds = %225, %231, %245
  %248 = zext i32 %27 to i64
  %249 = icmp ult i32 %27, 4
  br i1 %249, label %273, label %250

250:                                              ; preds = %247
  %251 = and i64 %248, 60
  %252 = and i64 %248, 3
  %253 = getelementptr ptr, ptr %2, i64 -3
  %254 = getelementptr ptr, ptr %2, i64 -3
  br label %255

255:                                              ; preds = %255, %250
  %256 = phi i64 [ 0, %250 ], [ %269, %255 ]
  %257 = xor i64 %256, -1
  %258 = add i64 %257, %248
  %259 = getelementptr [4 x ptr], ptr %253, i64 0, i64 %258
  %260 = load <4 x ptr>, ptr %259, align 8, !tbaa !5
  %261 = shufflevector <4 x ptr> %260, <4 x ptr> poison, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %262 = or i64 %256, 2
  %263 = getelementptr inbounds ptr, ptr %0, i64 %262
  store <4 x ptr> %261, ptr %263, align 8, !tbaa !5
  %264 = getelementptr [2 x [4 x ptr]], ptr %254, i64 0, i64 1, i64 %258
  %265 = load <4 x ptr>, ptr %264, align 8, !tbaa !5
  %266 = shufflevector <4 x ptr> %265, <4 x ptr> poison, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %267 = add nuw nsw i64 %256, 6
  %268 = getelementptr inbounds ptr, ptr %0, i64 %267
  store <4 x ptr> %266, ptr %268, align 8, !tbaa !5
  %269 = add nuw i64 %256, 4
  %270 = icmp eq i64 %269, %251
  br i1 %270, label %271, label %255, !llvm.loop !228

271:                                              ; preds = %255
  %272 = icmp eq i64 %251, %248
  br i1 %272, label %325, label %273

273:                                              ; preds = %247, %271
  %274 = phi i64 [ %248, %247 ], [ %252, %271 ]
  %275 = phi i64 [ 0, %247 ], [ %251, %271 ]
  br label %276

276:                                              ; preds = %273, %276
  %277 = phi i64 [ %279, %276 ], [ %274, %273 ]
  %278 = phi i64 [ %288, %276 ], [ %275, %273 ]
  %279 = add nsw i64 %277, -1
  %280 = getelementptr inbounds [4 x ptr], ptr %2, i64 0, i64 %279
  %281 = load ptr, ptr %280, align 8, !tbaa !5
  %282 = add nuw nsw i64 %278, 2
  %283 = getelementptr inbounds ptr, ptr %0, i64 %282
  store ptr %281, ptr %283, align 8, !tbaa !5
  %284 = getelementptr inbounds [2 x [4 x ptr]], ptr %2, i64 0, i64 1, i64 %279
  %285 = load ptr, ptr %284, align 8, !tbaa !5
  %286 = add nuw nsw i64 %278, 6
  %287 = getelementptr inbounds ptr, ptr %0, i64 %286
  store ptr %285, ptr %287, align 8, !tbaa !5
  %288 = add nuw nsw i64 %278, 1
  %289 = icmp eq i64 %288, %248
  br i1 %289, label %325, label %276, !llvm.loop !231

290:                                              ; preds = %239, %237
  %291 = icmp eq i32 %27, 0
  br i1 %291, label %325, label %292

292:                                              ; preds = %290
  %293 = zext i32 %27 to i64
  %294 = icmp ult i32 %27, 4
  br i1 %294, label %311, label %295

295:                                              ; preds = %292
  %296 = and i64 %293, 60
  br label %297

297:                                              ; preds = %297, %295
  %298 = phi i64 [ 0, %295 ], [ %307, %297 ]
  %299 = getelementptr inbounds [4 x ptr], ptr %2, i64 0, i64 %298
  %300 = load <4 x ptr>, ptr %299, align 16, !tbaa !5
  %301 = or i64 %298, 2
  %302 = getelementptr inbounds ptr, ptr %0, i64 %301
  store <4 x ptr> %300, ptr %302, align 8, !tbaa !5
  %303 = getelementptr inbounds [2 x [4 x ptr]], ptr %2, i64 0, i64 1, i64 %298
  %304 = load <4 x ptr>, ptr %303, align 16, !tbaa !5
  %305 = add nuw nsw i64 %298, 6
  %306 = getelementptr inbounds ptr, ptr %0, i64 %305
  store <4 x ptr> %304, ptr %306, align 8, !tbaa !5
  %307 = add nuw i64 %298, 4
  %308 = icmp eq i64 %307, %296
  br i1 %308, label %309, label %297, !llvm.loop !232

309:                                              ; preds = %297
  %310 = icmp eq i64 %296, %293
  br i1 %310, label %325, label %311

311:                                              ; preds = %292, %309
  %312 = phi i64 [ 0, %292 ], [ %296, %309 ]
  br label %313

313:                                              ; preds = %311, %313
  %314 = phi i64 [ %323, %313 ], [ %312, %311 ]
  %315 = getelementptr inbounds [4 x ptr], ptr %2, i64 0, i64 %314
  %316 = load ptr, ptr %315, align 8, !tbaa !5
  %317 = add nuw nsw i64 %314, 2
  %318 = getelementptr inbounds ptr, ptr %0, i64 %317
  store ptr %316, ptr %318, align 8, !tbaa !5
  %319 = getelementptr inbounds [2 x [4 x ptr]], ptr %2, i64 0, i64 1, i64 %314
  %320 = load ptr, ptr %319, align 8, !tbaa !5
  %321 = add nuw nsw i64 %314, 6
  %322 = getelementptr inbounds ptr, ptr %0, i64 %321
  store ptr %320, ptr %322, align 8, !tbaa !5
  %323 = add nuw nsw i64 %314, 1
  %324 = icmp eq i64 %323, %293
  br i1 %324, label %325, label %313, !llvm.loop !233

325:                                              ; preds = %313, %276, %309, %271, %290, %245
  %326 = tail call zeroext i8 @optimize_insn_for_size_p() #30
  %327 = icmp ne i8 %326, 0
  %328 = icmp ugt i32 %27, 1
  %329 = select i1 %327, i1 %328, i1 false
  br i1 %329, label %330, label %374

330:                                              ; preds = %325
  %331 = add nsw i32 %27, -1
  %332 = zext i32 %331 to i64
  br label %333

333:                                              ; preds = %330, %371
  %334 = phi i64 [ 0, %330 ], [ %372, %371 ]
  %335 = add nuw nsw i64 %334, 6
  %336 = getelementptr inbounds ptr, ptr %0, i64 %335
  %337 = load ptr, ptr %336, align 8, !tbaa !5
  %338 = load i32, ptr %337, align 8
  %339 = and i32 %338, 65535
  %340 = icmp ne i32 %339, 30
  %341 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 64), align 16
  %342 = icmp eq ptr %337, %341
  %343 = select i1 %340, i1 true, i1 %342
  br i1 %343, label %371, label %344

344:                                              ; preds = %333
  %345 = add nuw nsw i64 %334, 2
  %346 = getelementptr inbounds ptr, ptr %0, i64 %345
  %347 = load ptr, ptr %346, align 8, !tbaa !5
  %348 = load i32, ptr %347, align 8
  %349 = and i32 %348, 65535
  %350 = icmp eq i32 %349, 37
  br i1 %350, label %351, label %371

351:                                              ; preds = %344, %368
  %352 = phi i64 [ %369, %368 ], [ %334, %344 ]
  %353 = add nuw nsw i64 %352, 7
  %354 = getelementptr inbounds ptr, ptr %0, i64 %353
  %355 = load ptr, ptr %354, align 8, !tbaa !5
  %356 = load i32, ptr %355, align 8
  %357 = and i32 %356, 65535
  %358 = icmp eq i32 %357, 30
  br i1 %358, label %359, label %368

359:                                              ; preds = %351
  %360 = getelementptr inbounds %struct.rtx_def, ptr %355, i64 0, i32 1
  %361 = load i64, ptr %360, align 8, !tbaa !16
  %362 = load ptr, ptr %336, align 8, !tbaa !5
  %363 = getelementptr inbounds %struct.rtx_def, ptr %362, i64 0, i32 1
  %364 = load i64, ptr %363, align 8, !tbaa !16
  %365 = icmp eq i64 %361, %364
  br i1 %365, label %366, label %368

366:                                              ; preds = %359
  %367 = load ptr, ptr %346, align 8, !tbaa !5
  store ptr %367, ptr %354, align 8, !tbaa !5
  br label %368

368:                                              ; preds = %351, %359, %366
  %369 = add nuw nsw i64 %352, 1
  %370 = icmp eq i64 %369, %332
  br i1 %370, label %371, label %351, !llvm.loop !234

371:                                              ; preds = %368, %333, %344
  %372 = add nuw nsw i64 %334, 1
  %373 = icmp eq i64 %372, %332
  br i1 %373, label %374, label %333, !llvm.loop !235

374:                                              ; preds = %371, %325
  %375 = icmp eq i32 %27, 0
  br i1 %375, label %389, label %376

376:                                              ; preds = %374
  %377 = zext i32 %27 to i64
  br label %378

378:                                              ; preds = %376, %378
  %379 = phi i64 [ 0, %376 ], [ %387, %378 ]
  %380 = add nuw nsw i64 %379, 2
  %381 = getelementptr inbounds ptr, ptr %0, i64 %380
  %382 = load ptr, ptr %381, align 8, !tbaa !5
  %383 = add nuw nsw i64 %379, 6
  %384 = getelementptr inbounds ptr, ptr %0, i64 %383
  %385 = load ptr, ptr %384, align 8, !tbaa !5
  %386 = tail call ptr @emit_move_insn(ptr noundef %382, ptr noundef %385) #30
  %387 = add nuw nsw i64 %379, 1
  %388 = icmp eq i64 %387, %377
  br i1 %388, label %389, label %378, !llvm.loop !236

389:                                              ; preds = %378, %374, %200
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %3) #30
  call void @llvm.lifetime.end.p0(i64 64, ptr nonnull %2) #30
  ret void
}

declare i32 @offsettable_memref_p(ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc i32 @ix86_split_to_parts(ptr noundef %0, ptr nocapture noundef writeonly %1, i32 noundef %2) unnamed_addr #9 {
  %4 = alloca ptr, align 8
  %5 = alloca %struct.real_value, align 8
  %6 = alloca [4 x i64], align 16
  store ptr %0, ptr %4, align 8, !tbaa !5
  %7 = icmp eq i32 %2, 40
  br i1 %7, label %14, label %8

8:                                                ; preds = %3
  %9 = zext i32 %2 to i64
  %10 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %9
  %11 = load i8, ptr %10, align 1, !tbaa !16
  %12 = lshr i8 %11, 2
  %13 = zext i8 %12 to i32
  br label %14

14:                                               ; preds = %3, %8
  %15 = phi i32 [ %13, %8 ], [ 3, %3 ]
  %16 = load i32, ptr %0, align 8
  %17 = and i32 %16, 65535
  %18 = icmp eq i32 %17, 37
  br i1 %18, label %19, label %26

19:                                               ; preds = %14
  %20 = getelementptr i8, ptr %0, i64 8
  %21 = load i32, ptr %20, align 8, !tbaa !16
  %22 = zext i32 %21 to i64
  %23 = add nsw i64 %22, -29
  %24 = icmp ult i64 %23, 8
  br i1 %24, label %25, label %26

25:                                               ; preds = %19
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 16588, ptr noundef nonnull @.str.131) #30
  br label %26

26:                                               ; preds = %14, %19, %25
  %27 = add nsw i32 %15, -2
  %28 = icmp ult i32 %27, 3
  br i1 %28, label %30, label %29

29:                                               ; preds = %26
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 16589, ptr noundef nonnull @.str.131) #30
  br label %30

30:                                               ; preds = %26, %29
  %31 = load i32, ptr %0, align 8
  %32 = and i32 %31, 67174399
  %33 = icmp eq i32 %32, 67108907
  br i1 %33, label %34, label %45

34:                                               ; preds = %30
  %35 = getelementptr inbounds %struct.rtx_def, ptr %0, i64 0, i32 1
  %36 = load ptr, ptr %35, align 8, !tbaa !16
  %37 = tail call ptr @ix86_delegitimize_address(ptr noundef %36)
  %38 = load i32, ptr %37, align 8
  %39 = and i32 %38, 67174399
  %40 = icmp eq i32 %39, 67108909
  br i1 %40, label %41, label %45

41:                                               ; preds = %34
  %42 = tail call ptr @get_pool_constant(ptr noundef nonnull %37) #30
  %43 = icmp eq ptr %42, null
  br i1 %43, label %45, label %44

44:                                               ; preds = %41
  store ptr %42, ptr %4, align 8, !tbaa !5
  br label %45

45:                                               ; preds = %34, %41, %44, %30
  %46 = phi ptr [ %0, %34 ], [ %0, %41 ], [ %42, %44 ], [ %0, %30 ]
  %47 = load i32, ptr %46, align 8
  %48 = and i32 %47, 65535
  %49 = icmp eq i32 %48, 43
  br i1 %49, label %50, label %67

50:                                               ; preds = %45
  %51 = tail call i32 @offsettable_memref_p(ptr noundef nonnull %46) #30
  %52 = icmp eq i32 %51, 0
  br i1 %52, label %55, label %53

53:                                               ; preds = %50
  %54 = load i32, ptr %46, align 8
  br label %67

55:                                               ; preds = %50
  %56 = tail call i32 @push_operand(ptr noundef nonnull %46, i32 noundef 0) #30
  %57 = icmp eq i32 %56, 0
  br i1 %57, label %58, label %59

58:                                               ; preds = %55
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 16605, ptr noundef nonnull @.str.131) #30
  br label %59

59:                                               ; preds = %55, %58
  %60 = tail call ptr @copy_rtx(ptr noundef nonnull %46) #30
  %61 = load i32, ptr %60, align 8
  %62 = and i32 %61, -16711681
  %63 = or i32 %62, 1048576
  store i32 %63, ptr %60, align 8
  %64 = getelementptr inbounds ptr, ptr %1, i64 3
  store ptr %60, ptr %64, align 8, !tbaa !5
  %65 = getelementptr inbounds ptr, ptr %1, i64 2
  store ptr %60, ptr %65, align 8, !tbaa !5
  %66 = getelementptr inbounds ptr, ptr %1, i64 1
  store ptr %60, ptr %66, align 8, !tbaa !5
  store ptr %60, ptr %1, align 8, !tbaa !5
  br label %157

67:                                               ; preds = %53, %45
  %68 = phi i32 [ %54, %53 ], [ %47, %45 ]
  %69 = and i32 %68, 65535
  %70 = icmp eq i32 %69, 33
  br i1 %70, label %71, label %79

71:                                               ; preds = %67
  %72 = tail call i32 @int_mode_for_mode(i32 noundef %2) #30
  %73 = load i32, ptr %46, align 8
  %74 = lshr i32 %73, 16
  %75 = and i32 %74, 255
  %76 = tail call ptr @simplify_subreg(i32 noundef %72, ptr noundef nonnull %46, i32 noundef %75, i32 noundef 0) #30
  store ptr %76, ptr %4, align 8, !tbaa !5
  %77 = icmp eq ptr %76, null
  br i1 %77, label %78, label %79

78:                                               ; preds = %71
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 16620, ptr noundef nonnull @.str.131) #30
  br label %79

79:                                               ; preds = %78, %71, %67
  %80 = phi ptr [ %46, %67 ], [ %76, %71 ], [ null, %78 ]
  %81 = phi i32 [ %2, %67 ], [ %72, %71 ], [ %72, %78 ]
  %82 = icmp eq i32 %81, 17
  br i1 %82, label %83, label %85

83:                                               ; preds = %79
  %84 = getelementptr inbounds ptr, ptr %1, i64 1
  call void @split_di(ptr noundef nonnull %4, i32 noundef 1, ptr noundef %1, ptr noundef nonnull %84)
  br label %157

85:                                               ; preds = %79
  %86 = load i32, ptr %80, align 8
  %87 = and i32 %86, 65535
  %88 = icmp eq i32 %87, 37
  br i1 %88, label %89, label %107

89:                                               ; preds = %85
  %90 = load i32, ptr @reload_completed, align 4, !tbaa !20
  %91 = icmp eq i32 %90, 0
  br i1 %91, label %92, label %93

92:                                               ; preds = %89
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 16634, ptr noundef nonnull @.str.131) #30
  br label %93

93:                                               ; preds = %89, %92
  %94 = icmp eq i32 %15, 0
  br i1 %94, label %157, label %95

95:                                               ; preds = %93
  %96 = getelementptr i8, ptr %80, i64 8
  %97 = zext i32 %15 to i64
  br label %98

98:                                               ; preds = %95, %98
  %99 = phi i64 [ 0, %95 ], [ %105, %98 ]
  %100 = load i32, ptr %96, align 8, !tbaa !16
  %101 = trunc i64 %99 to i32
  %102 = add i32 %100, %101
  %103 = tail call ptr @gen_rtx_REG(i32 noundef 16, i32 noundef %102) #30
  %104 = getelementptr inbounds ptr, ptr %1, i64 %99
  store ptr %103, ptr %104, align 8, !tbaa !5
  %105 = add nuw nsw i64 %99, 1
  %106 = icmp eq i64 %105, %97
  br i1 %106, label %157, label %98, !llvm.loop !237

107:                                              ; preds = %85
  %108 = tail call i32 @offsettable_memref_p(ptr noundef nonnull %80) #30
  %109 = icmp eq i32 %108, 0
  br i1 %109, label %122, label %110

110:                                              ; preds = %107
  %111 = tail call ptr @adjust_address_1(ptr noundef nonnull %80, i32 noundef 16, i64 noundef 0, i32 noundef 1, i32 noundef 1) #30
  store ptr %111, ptr %1, align 8, !tbaa !5
  %112 = icmp ugt i32 %15, 1
  br i1 %112, label %113, label %157

113:                                              ; preds = %110
  %114 = zext i32 %15 to i64
  br label %115

115:                                              ; preds = %113, %115
  %116 = phi i64 [ 1, %113 ], [ %120, %115 ]
  %117 = shl nsw i64 %116, 2
  %118 = tail call ptr @adjust_address_1(ptr noundef %111, i32 noundef 16, i64 noundef %117, i32 noundef 1, i32 noundef 1) #30
  %119 = getelementptr inbounds ptr, ptr %1, i64 %116
  store ptr %118, ptr %119, align 8, !tbaa !5
  %120 = add nuw nsw i64 %116, 1
  %121 = icmp eq i64 %120, %114
  br i1 %121, label %157, label %115, !llvm.loop !238

122:                                              ; preds = %107
  %123 = load i32, ptr %80, align 8
  %124 = and i32 %123, 65535
  %125 = icmp eq i32 %124, 32
  br i1 %125, label %126, label %156

126:                                              ; preds = %122
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %5) #30
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %6) #30
  %127 = getelementptr inbounds %struct.rtx_def, ptr %80, i64 0, i32 1
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(32) %5, ptr noundef nonnull align 8 dereferenceable(32) %127, i64 32, i1 false), !tbaa.struct !106
  switch i32 %81, label %148 [
    i32 41, label %128
    i32 40, label %138
    i32 39, label %145
  ]

128:                                              ; preds = %126
  %129 = call i64 @real_to_target(ptr noundef nonnull %6, ptr noundef nonnull %5, i32 noundef 41) #30
  %130 = getelementptr inbounds [4 x i64], ptr %6, i64 0, i64 3
  %131 = load i64, ptr %130, align 8, !tbaa !62
  %132 = call ptr @gen_int_mode(i64 noundef %131, i32 noundef 16) #30
  %133 = getelementptr inbounds ptr, ptr %1, i64 3
  store ptr %132, ptr %133, align 8, !tbaa !5
  %134 = getelementptr inbounds [4 x i64], ptr %6, i64 0, i64 2
  %135 = load i64, ptr %134, align 16, !tbaa !62
  %136 = call ptr @gen_int_mode(i64 noundef %135, i32 noundef 16) #30
  %137 = getelementptr inbounds ptr, ptr %1, i64 2
  store ptr %136, ptr %137, align 8, !tbaa !5
  br label %149

138:                                              ; preds = %126
  %139 = tail call i32 @mode_for_size(i32 noundef 80, i32 noundef 8, i32 noundef 0) #30
  %140 = call i64 @real_to_target(ptr noundef nonnull %6, ptr noundef nonnull %5, i32 noundef %139) #30
  %141 = getelementptr inbounds [4 x i64], ptr %6, i64 0, i64 2
  %142 = load i64, ptr %141, align 16, !tbaa !62
  %143 = call ptr @gen_int_mode(i64 noundef %142, i32 noundef 16) #30
  %144 = getelementptr inbounds ptr, ptr %1, i64 2
  store ptr %143, ptr %144, align 8, !tbaa !5
  br label %149

145:                                              ; preds = %126
  %146 = tail call i32 @mode_for_size(i32 noundef 64, i32 noundef 8, i32 noundef 0) #30
  %147 = call i64 @real_to_target(ptr noundef nonnull %6, ptr noundef nonnull %5, i32 noundef %146) #30
  br label %149

148:                                              ; preds = %126
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 16666, ptr noundef nonnull @.str.131) #30
  br label %149

149:                                              ; preds = %148, %145, %138, %128
  %150 = getelementptr inbounds [4 x i64], ptr %6, i64 0, i64 1
  %151 = load i64, ptr %150, align 8, !tbaa !62
  %152 = call ptr @gen_int_mode(i64 noundef %151, i32 noundef 16) #30
  %153 = getelementptr inbounds ptr, ptr %1, i64 1
  store ptr %152, ptr %153, align 8, !tbaa !5
  %154 = load i64, ptr %6, align 16, !tbaa !62
  %155 = call ptr @gen_int_mode(i64 noundef %154, i32 noundef 16) #30
  store ptr %155, ptr %1, align 8, !tbaa !5
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %6) #30
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %5) #30
  br label %157

156:                                              ; preds = %122
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 16672, ptr noundef nonnull @.str.131) #30
  br label %157

157:                                              ; preds = %115, %98, %110, %93, %83, %156, %149, %59
  ret i32 %15
}

declare ptr @change_address(ptr noundef, i32 noundef, ptr noundef) local_unnamed_addr #3

declare ptr @replace_equiv_address(ptr noundef, ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define dso_local void @ix86_split_ashl(ptr noundef %0, ptr noundef %1, i32 noundef %2) local_unnamed_addr #9 {
  %4 = alloca [2 x ptr], align 16
  %5 = alloca [2 x ptr], align 16
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %4) #30
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %5) #30
  %6 = icmp eq i32 %2, 17
  %7 = select i1 %6, i32 32, i32 64
  %8 = getelementptr inbounds ptr, ptr %0, i64 2
  %9 = load ptr, ptr %8, align 8, !tbaa !5
  %10 = load i32, ptr %9, align 8
  %11 = and i32 %10, 65535
  %12 = icmp eq i32 %11, 30
  %13 = select i1 %6, ptr @split_di, ptr @split_ti
  br i1 %12, label %14, label %54

14:                                               ; preds = %3
  call void %13(ptr noundef nonnull %0, i32 noundef 2, ptr noundef nonnull %4, ptr noundef nonnull %5) #30, !callees !239
  %15 = load ptr, ptr %8, align 8, !tbaa !5
  %16 = getelementptr inbounds %struct.rtx_def, ptr %15, i64 0, i32 1
  %17 = load i64, ptr %16, align 8, !tbaa !16
  %18 = shl nuw nsw i32 %7, 1
  %19 = add nsw i32 %18, -1
  %20 = trunc i64 %17 to i32
  %21 = and i32 %19, %20
  %22 = icmp ult i32 %21, %7
  br i1 %22, label %35, label %23

23:                                               ; preds = %14
  %24 = load ptr, ptr %5, align 16, !tbaa !5
  %25 = getelementptr inbounds [2 x ptr], ptr %4, i64 0, i64 1
  %26 = load ptr, ptr %25, align 8, !tbaa !5
  %27 = call ptr @emit_move_insn(ptr noundef %24, ptr noundef %26) #30
  %28 = load ptr, ptr %4, align 16, !tbaa !5
  %29 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 64), align 16, !tbaa !5
  %30 = call ptr @emit_move_insn(ptr noundef %28, ptr noundef %29) #30
  %31 = icmp ugt i32 %21, %7
  br i1 %31, label %32, label %205

32:                                               ; preds = %23
  %33 = load ptr, ptr %5, align 16, !tbaa !5
  %34 = sub nsw i32 %21, %7
  call fastcc void @ix86_expand_ashl_const(ptr noundef %33, i32 noundef %34, i32 noundef %2)
  br label %205

35:                                               ; preds = %14
  %36 = load ptr, ptr %0, align 8, !tbaa !5
  %37 = getelementptr inbounds ptr, ptr %0, i64 1
  %38 = load ptr, ptr %37, align 8, !tbaa !5
  %39 = call i32 @rtx_equal_p(ptr noundef %36, ptr noundef %38) #30
  %40 = icmp eq i32 %39, 0
  br i1 %40, label %41, label %45

41:                                               ; preds = %35
  %42 = load ptr, ptr %0, align 8, !tbaa !5
  %43 = load ptr, ptr %37, align 8, !tbaa !5
  %44 = call ptr @emit_move_insn(ptr noundef %42, ptr noundef %43) #30
  br label %45

45:                                               ; preds = %41, %35
  %46 = select i1 %6, ptr @gen_x86_shld, ptr @gen_x86_64_shld
  %47 = load ptr, ptr %5, align 16, !tbaa !5
  %48 = load ptr, ptr %4, align 16, !tbaa !5
  %49 = zext i32 %21 to i64
  %50 = call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef %49) #30
  %51 = call ptr %46(ptr noundef %47, ptr noundef %48, ptr noundef %50) #30, !callees !240
  %52 = call ptr @emit_insn(ptr noundef %51) #30
  %53 = load ptr, ptr %4, align 16, !tbaa !5
  call fastcc void @ix86_expand_ashl_const(ptr noundef %53, i32 noundef %21, i32 noundef %2)
  br label %205

54:                                               ; preds = %3
  call void %13(ptr noundef nonnull %0, i32 noundef 1, ptr noundef nonnull %4, ptr noundef nonnull %5) #30, !callees !239
  %55 = getelementptr inbounds ptr, ptr %0, i64 1
  %56 = load ptr, ptr %55, align 8, !tbaa !5
  %57 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 65), align 8, !tbaa !5
  %58 = icmp eq ptr %56, %57
  br i1 %58, label %59, label %151

59:                                               ; preds = %54
  %60 = load ptr, ptr %4, align 16, !tbaa !5
  %61 = load i32, ptr %60, align 8
  %62 = and i32 %61, 65535
  %63 = icmp eq i32 %62, 37
  br i1 %63, label %64, label %101

64:                                               ; preds = %59
  %65 = getelementptr i8, ptr %60, i64 8
  %66 = load i32, ptr %65, align 8, !tbaa !16
  %67 = icmp ult i32 %66, 4
  br i1 %67, label %68, label %101

68:                                               ; preds = %64
  %69 = load ptr, ptr %5, align 16, !tbaa !5
  %70 = load i32, ptr %69, align 8
  %71 = and i32 %70, 65535
  %72 = icmp eq i32 %71, 37
  br i1 %72, label %73, label %101

73:                                               ; preds = %68
  %74 = getelementptr i8, ptr %69, i64 8
  %75 = load i32, ptr %74, align 8, !tbaa !16
  %76 = icmp ult i32 %75, 4
  br i1 %76, label %77, label %101

77:                                               ; preds = %73
  %78 = call ptr @gen_rtx_REG(i32 noundef 10, i32 noundef 17) #30
  %79 = load ptr, ptr %4, align 16, !tbaa !5
  call void @ix86_expand_clear(ptr noundef %79)
  %80 = load ptr, ptr %5, align 16, !tbaa !5
  call void @ix86_expand_clear(ptr noundef %80)
  %81 = load ptr, ptr %8, align 8, !tbaa !5
  %82 = zext i32 %7 to i64
  %83 = call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef %82) #30
  %84 = call ptr @gen_testqi_ccz_1(ptr noundef %81, ptr noundef %83) #30
  %85 = call ptr @emit_insn(ptr noundef %84) #30
  %86 = load ptr, ptr @rtl_hooks, align 8, !tbaa !187
  %87 = load ptr, ptr %4, align 16, !tbaa !5
  %88 = call ptr %86(i32 noundef 14, ptr noundef %87) #30
  %89 = call ptr @gen_rtx_fmt_e_stat(i32 noundef 40, i32 noundef 0, ptr noundef %88) #30
  %90 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 64), align 16, !tbaa !5
  %91 = call ptr @gen_rtx_fmt_ee_stat(i32 noundef 81, i32 noundef 14, ptr noundef %78, ptr noundef %90) #30
  %92 = call ptr @gen_rtx_fmt_ee_stat(i32 noundef 23, i32 noundef 0, ptr noundef %89, ptr noundef %91) #30
  %93 = call ptr @emit_insn(ptr noundef %92) #30
  %94 = load ptr, ptr @rtl_hooks, align 8, !tbaa !187
  %95 = load ptr, ptr %5, align 16, !tbaa !5
  %96 = call ptr %94(i32 noundef 14, ptr noundef %95) #30
  %97 = call ptr @gen_rtx_fmt_e_stat(i32 noundef 40, i32 noundef 0, ptr noundef %96) #30
  %98 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 64), align 16, !tbaa !5
  %99 = call ptr @gen_rtx_fmt_ee_stat(i32 noundef 80, i32 noundef 14, ptr noundef %78, ptr noundef %98) #30
  %100 = call ptr @gen_rtx_fmt_ee_stat(i32 noundef 23, i32 noundef 0, ptr noundef %97, ptr noundef %99) #30
  br label %139

101:                                              ; preds = %73, %68, %64, %59
  %102 = load i8, ptr getelementptr inbounds ([62 x i8], ptr @ix86_tune_features, i64 0, i64 9), align 1, !tbaa !16
  %103 = icmp eq i8 %102, 0
  br i1 %103, label %111, label %104

104:                                              ; preds = %101
  %105 = call zeroext i8 @optimize_insn_for_size_p() #30
  %106 = icmp eq i8 %105, 0
  br i1 %106, label %107, label %111

107:                                              ; preds = %104
  %108 = select i1 %6, i32 16, i32 17
  %109 = load ptr, ptr %8, align 8, !tbaa !5
  %110 = call ptr @gen_rtx_fmt_e_stat(i32 noundef 99, i32 noundef %108, ptr noundef %109) #30
  br label %116

111:                                              ; preds = %104, %101
  %112 = load ptr, ptr @rtl_hooks, align 8, !tbaa !187
  %113 = select i1 %6, i32 16, i32 17
  %114 = load ptr, ptr %8, align 8, !tbaa !5
  %115 = call ptr %112(i32 noundef %113, ptr noundef %114) #30
  br label %116

116:                                              ; preds = %111, %107
  %117 = phi ptr [ %115, %111 ], [ %110, %107 ]
  %118 = load ptr, ptr %5, align 16, !tbaa !5
  %119 = call ptr @gen_rtx_fmt_ee_stat(i32 noundef 23, i32 noundef 0, ptr noundef %118, ptr noundef %117) #30
  %120 = call ptr @emit_insn(ptr noundef %119) #30
  %121 = select i1 %6, ptr @gen_lshrsi3, ptr @gen_lshrdi3
  %122 = load ptr, ptr %5, align 16, !tbaa !5
  %123 = select i1 %6, i64 5, i64 6
  %124 = call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef %123) #30
  %125 = call ptr %121(ptr noundef %122, ptr noundef %122, ptr noundef %124) #30, !callees !241
  %126 = call ptr @emit_insn(ptr noundef %125) #30
  %127 = select i1 %6, ptr @gen_andsi3, ptr @gen_anddi3
  %128 = load ptr, ptr %5, align 16, !tbaa !5
  %129 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 65), align 8, !tbaa !5
  %130 = call ptr %127(ptr noundef %128, ptr noundef %128, ptr noundef %129) #30, !callees !242
  %131 = call ptr @emit_insn(ptr noundef %130) #30
  %132 = load ptr, ptr %4, align 16, !tbaa !5
  %133 = load ptr, ptr %5, align 16, !tbaa !5
  %134 = call ptr @emit_move_insn(ptr noundef %132, ptr noundef %133) #30
  %135 = select i1 %6, ptr @gen_xorsi3, ptr @gen_xordi3
  %136 = load ptr, ptr %4, align 16, !tbaa !5
  %137 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 65), align 8, !tbaa !5
  %138 = call ptr %135(ptr noundef %136, ptr noundef %136, ptr noundef %137) #30, !callees !243
  br label %139

139:                                              ; preds = %116, %77
  %140 = phi ptr [ %138, %116 ], [ %100, %77 ]
  %141 = call ptr @emit_insn(ptr noundef %140) #30
  %142 = select i1 %6, ptr @gen_ashlsi3, ptr @gen_ashldi3
  %143 = load ptr, ptr %4, align 16, !tbaa !5
  %144 = load ptr, ptr %8, align 8, !tbaa !5
  %145 = call ptr %142(ptr noundef %143, ptr noundef %143, ptr noundef %144) #30, !callees !244
  %146 = call ptr @emit_insn(ptr noundef %145) #30
  %147 = load ptr, ptr %5, align 16, !tbaa !5
  %148 = load ptr, ptr %8, align 8, !tbaa !5
  %149 = call ptr %142(ptr noundef %147, ptr noundef %147, ptr noundef %148) #30, !callees !244
  %150 = call ptr @emit_insn(ptr noundef %149) #30
  br label %205

151:                                              ; preds = %54
  %152 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 63), align 8, !tbaa !5
  %153 = icmp eq ptr %56, %152
  br i1 %153, label %154, label %166

154:                                              ; preds = %151
  %155 = load ptr, ptr %4, align 16, !tbaa !5
  %156 = call ptr @emit_move_insn(ptr noundef %155, ptr noundef %56) #30
  %157 = call zeroext i8 @optimize_insn_for_size_p() #30
  %158 = icmp eq i8 %157, 0
  %159 = load ptr, ptr %5, align 16, !tbaa !5
  br i1 %158, label %163, label %160

160:                                              ; preds = %154
  %161 = load ptr, ptr %4, align 16, !tbaa !5
  %162 = call ptr @emit_move_insn(ptr noundef %159, ptr noundef %161) #30
  br label %181

163:                                              ; preds = %154
  %164 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 63), align 8, !tbaa !5
  %165 = call ptr @emit_move_insn(ptr noundef %159, ptr noundef %164) #30
  br label %181

166:                                              ; preds = %151
  %167 = load ptr, ptr %0, align 8, !tbaa !5
  %168 = call i32 @rtx_equal_p(ptr noundef %167, ptr noundef %56) #30
  %169 = icmp eq i32 %168, 0
  br i1 %169, label %170, label %174

170:                                              ; preds = %166
  %171 = load ptr, ptr %0, align 8, !tbaa !5
  %172 = load ptr, ptr %55, align 8, !tbaa !5
  %173 = call ptr @emit_move_insn(ptr noundef %171, ptr noundef %172) #30
  br label %174

174:                                              ; preds = %170, %166
  call void %13(ptr noundef nonnull %0, i32 noundef 1, ptr noundef nonnull %4, ptr noundef nonnull %5) #30, !callees !239
  %175 = select i1 %6, ptr @gen_x86_shld, ptr @gen_x86_64_shld
  %176 = load ptr, ptr %5, align 16, !tbaa !5
  %177 = load ptr, ptr %4, align 16, !tbaa !5
  %178 = load ptr, ptr %8, align 8, !tbaa !5
  %179 = call ptr %175(ptr noundef %176, ptr noundef %177, ptr noundef %178) #30, !callees !240
  %180 = call ptr @emit_insn(ptr noundef %179) #30
  br label %181

181:                                              ; preds = %160, %163, %174
  %182 = select i1 %6, ptr @gen_ashlsi3, ptr @gen_ashldi3
  %183 = load ptr, ptr %4, align 16, !tbaa !5
  %184 = load ptr, ptr %8, align 8, !tbaa !5
  %185 = call ptr %182(ptr noundef %183, ptr noundef %183, ptr noundef %184) #30, !callees !244
  %186 = call ptr @emit_insn(ptr noundef %185) #30
  %187 = load i8, ptr @ix86_arch_features, align 1, !tbaa !16
  %188 = icmp ne i8 %187, 0
  %189 = icmp ne ptr %1, null
  %190 = and i1 %189, %188
  br i1 %190, label %191, label %198

191:                                              ; preds = %181
  call void @ix86_expand_clear(ptr noundef nonnull %1)
  %192 = select i1 %6, ptr @gen_x86_shift_adj_1, ptr @gen_x86_64_shift_adj_1
  %193 = load ptr, ptr %5, align 16, !tbaa !5
  %194 = load ptr, ptr %4, align 16, !tbaa !5
  %195 = load ptr, ptr %8, align 8, !tbaa !5
  %196 = call ptr %192(ptr noundef %193, ptr noundef %194, ptr noundef %195, ptr noundef nonnull %1) #30, !callees !245
  %197 = call ptr @emit_insn(ptr noundef %196) #30
  br label %205

198:                                              ; preds = %181
  %199 = select i1 %6, ptr @gen_x86_shift_adj_2, ptr @gen_x86_64_shift_adj_2
  %200 = load ptr, ptr %5, align 16, !tbaa !5
  %201 = load ptr, ptr %4, align 16, !tbaa !5
  %202 = load ptr, ptr %8, align 8, !tbaa !5
  %203 = call ptr %199(ptr noundef %200, ptr noundef %201, ptr noundef %202) #30, !callees !246
  %204 = call ptr @emit_insn(ptr noundef %203) #30
  br label %205

205:                                              ; preds = %191, %198, %45, %32, %23, %139
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %5) #30
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %4) #30
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc void @ix86_expand_ashl_const(ptr noundef %0, i32 noundef %1, i32 noundef %2) unnamed_addr #9 {
  %4 = icmp eq i32 %1, 1
  br i1 %4, label %5, label %9

5:                                                ; preds = %3
  %6 = icmp eq i32 %2, 17
  %7 = select i1 %6, ptr @gen_addsi3, ptr @gen_adddi3
  %8 = tail call ptr %7(ptr noundef %0, ptr noundef %0, ptr noundef %0) #30, !callees !247
  br label %36

9:                                                ; preds = %3
  %10 = tail call zeroext i8 @optimize_insn_for_size_p() #30
  %11 = icmp eq i8 %10, 0
  br i1 %11, label %12, label %30

12:                                               ; preds = %9
  %13 = load ptr, ptr @ix86_cost, align 8, !tbaa !5
  %14 = load i32, ptr %13, align 4, !tbaa !248
  %15 = mul nsw i32 %14, %1
  %16 = getelementptr inbounds %struct.processor_costs, ptr %13, i64 0, i32 3
  %17 = load i32, ptr %16, align 4, !tbaa !249
  %18 = icmp sgt i32 %15, %17
  br i1 %18, label %30, label %19

19:                                               ; preds = %12
  %20 = icmp sgt i32 %1, 0
  br i1 %20, label %21, label %39

21:                                               ; preds = %19
  %22 = icmp eq i32 %2, 17
  %23 = select i1 %22, ptr @gen_addsi3, ptr @gen_adddi3
  br label %24

24:                                               ; preds = %21, %24
  %25 = phi i32 [ 0, %21 ], [ %28, %24 ]
  %26 = tail call ptr %23(ptr noundef %0, ptr noundef %0, ptr noundef %0) #30, !callees !247
  %27 = tail call ptr @emit_insn(ptr noundef %26) #30
  %28 = add nuw nsw i32 %25, 1
  %29 = icmp eq i32 %28, %1
  br i1 %29, label %39, label %24, !llvm.loop !250

30:                                               ; preds = %12, %9
  %31 = icmp eq i32 %2, 17
  %32 = select i1 %31, ptr @gen_ashlsi3, ptr @gen_ashldi3
  %33 = sext i32 %1 to i64
  %34 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef %33) #30
  %35 = tail call ptr %32(ptr noundef %0, ptr noundef %0, ptr noundef %34) #30, !callees !244
  br label %36

36:                                               ; preds = %5, %30
  %37 = phi ptr [ %35, %30 ], [ %8, %5 ]
  %38 = tail call ptr @emit_insn(ptr noundef %37) #30
  br label %39

39:                                               ; preds = %24, %36, %19
  ret void
}

declare ptr @gen_x86_shld(ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

; Function Attrs: inlinehint mustprogress nofree norecurse nosync nounwind sspstrong willreturn memory(none) uwtable
define internal noalias ptr @gen_x86_64_shld(ptr nocapture readnone %0, ptr nocapture readnone %1, ptr nocapture readnone %2) unnamed_addr #22 {
  ret ptr null
}

declare ptr @gen_testqi_ccz_1(ptr noundef, ptr noundef) local_unnamed_addr #3

declare ptr @gen_lshrsi3(ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

declare ptr @gen_lshrdi3(ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

; Function Attrs: inlinehint mustprogress nofree norecurse nosync nounwind sspstrong willreturn memory(none) uwtable
define internal noalias ptr @gen_anddi3(ptr nocapture readnone %0, ptr nocapture readnone %1, ptr nocapture readnone %2) unnamed_addr #22 {
  ret ptr null
}

declare ptr @gen_xorsi3(ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

; Function Attrs: inlinehint mustprogress nofree norecurse nosync nounwind sspstrong willreturn memory(none) uwtable
define internal noalias ptr @gen_xordi3(ptr nocapture readnone %0, ptr nocapture readnone %1, ptr nocapture readnone %2) unnamed_addr #22 {
  ret ptr null
}

declare ptr @gen_ashlsi3(ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

declare ptr @gen_ashldi3(ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

declare ptr @gen_x86_shift_adj_1(ptr noundef, ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

; Function Attrs: inlinehint mustprogress nofree norecurse nosync nounwind sspstrong willreturn memory(none) uwtable
define internal noalias ptr @gen_x86_64_shift_adj_1(ptr nocapture readnone %0, ptr nocapture readnone %1, ptr nocapture readnone %2, ptr nocapture readnone %3) unnamed_addr #22 {
  ret ptr null
}

declare ptr @gen_x86_shift_adj_2(ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

; Function Attrs: inlinehint mustprogress nofree norecurse nosync nounwind sspstrong willreturn memory(none) uwtable
define internal noalias ptr @gen_x86_64_shift_adj_2(ptr nocapture readnone %0, ptr nocapture readnone %1, ptr nocapture readnone %2) unnamed_addr #22 {
  ret ptr null
}

; Function Attrs: nounwind sspstrong uwtable
define dso_local void @ix86_split_ashr(ptr noundef %0, ptr noundef %1, i32 noundef %2) local_unnamed_addr #9 {
  %4 = alloca [2 x ptr], align 16
  %5 = alloca [2 x ptr], align 16
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %4) #30
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %5) #30
  %6 = icmp eq i32 %2, 17
  %7 = select i1 %6, i32 32, i32 64
  %8 = getelementptr inbounds ptr, ptr %0, i64 2
  %9 = load ptr, ptr %8, align 8, !tbaa !5
  %10 = load i32, ptr %9, align 8
  %11 = and i32 %10, 65535
  %12 = icmp eq i32 %11, 30
  br i1 %12, label %13, label %86

13:                                               ; preds = %3
  %14 = select i1 %6, ptr @split_di, ptr @split_ti
  call void %14(ptr noundef nonnull %0, i32 noundef 2, ptr noundef nonnull %4, ptr noundef nonnull %5) #30, !callees !239
  %15 = load ptr, ptr %8, align 8, !tbaa !5
  %16 = getelementptr inbounds %struct.rtx_def, ptr %15, i64 0, i32 1
  %17 = load i64, ptr %16, align 8, !tbaa !16
  %18 = shl nuw nsw i32 %7, 1
  %19 = add nsw i32 %18, -1
  %20 = trunc i64 %17 to i32
  %21 = and i32 %19, %20
  %22 = icmp eq i32 %21, %19
  br i1 %22, label %23, label %38

23:                                               ; preds = %13
  %24 = load ptr, ptr %5, align 16, !tbaa !5
  %25 = getelementptr inbounds [2 x ptr], ptr %5, i64 0, i64 1
  %26 = load ptr, ptr %25, align 8, !tbaa !5
  %27 = call ptr @emit_move_insn(ptr noundef %24, ptr noundef %26) #30
  %28 = select i1 %6, ptr @gen_ashrsi3, ptr @gen_ashrdi3
  %29 = load ptr, ptr %5, align 16, !tbaa !5
  %30 = add nsw i32 %7, -1
  %31 = zext i32 %30 to i64
  %32 = call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef %31) #30
  %33 = call ptr %28(ptr noundef %29, ptr noundef %29, ptr noundef %32) #30, !callees !251
  %34 = call ptr @emit_insn(ptr noundef %33) #30
  %35 = load ptr, ptr %4, align 16, !tbaa !5
  %36 = load ptr, ptr %5, align 16, !tbaa !5
  %37 = call ptr @emit_move_insn(ptr noundef %35, ptr noundef %36) #30
  br label %134

38:                                               ; preds = %13
  %39 = icmp ult i32 %21, %7
  br i1 %39, label %63, label %40

40:                                               ; preds = %38
  %41 = load ptr, ptr %4, align 16, !tbaa !5
  %42 = getelementptr inbounds [2 x ptr], ptr %5, i64 0, i64 1
  %43 = load ptr, ptr %42, align 8, !tbaa !5
  %44 = call ptr @emit_move_insn(ptr noundef %41, ptr noundef %43) #30
  %45 = load ptr, ptr %5, align 16, !tbaa !5
  %46 = load ptr, ptr %4, align 16, !tbaa !5
  %47 = call ptr @emit_move_insn(ptr noundef %45, ptr noundef %46) #30
  %48 = select i1 %6, ptr @gen_ashrsi3, ptr @gen_ashrdi3
  %49 = load ptr, ptr %5, align 16, !tbaa !5
  %50 = add nsw i32 %7, -1
  %51 = zext i32 %50 to i64
  %52 = call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef %51) #30
  %53 = call ptr %48(ptr noundef %49, ptr noundef %49, ptr noundef %52) #30, !callees !251
  %54 = call ptr @emit_insn(ptr noundef %53) #30
  %55 = icmp ugt i32 %21, %7
  br i1 %55, label %56, label %134

56:                                               ; preds = %40
  %57 = load ptr, ptr %4, align 16, !tbaa !5
  %58 = sub nsw i32 %21, %7
  %59 = sext i32 %58 to i64
  %60 = call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef %59) #30
  %61 = call ptr %48(ptr noundef %57, ptr noundef %57, ptr noundef %60) #30, !callees !251
  %62 = call ptr @emit_insn(ptr noundef %61) #30
  br label %134

63:                                               ; preds = %38
  %64 = load ptr, ptr %0, align 8, !tbaa !5
  %65 = getelementptr inbounds ptr, ptr %0, i64 1
  %66 = load ptr, ptr %65, align 8, !tbaa !5
  %67 = call i32 @rtx_equal_p(ptr noundef %64, ptr noundef %66) #30
  %68 = icmp eq i32 %67, 0
  br i1 %68, label %69, label %73

69:                                               ; preds = %63
  %70 = load ptr, ptr %0, align 8, !tbaa !5
  %71 = load ptr, ptr %65, align 8, !tbaa !5
  %72 = call ptr @emit_move_insn(ptr noundef %70, ptr noundef %71) #30
  br label %73

73:                                               ; preds = %69, %63
  %74 = select i1 %6, ptr @gen_x86_shrd, ptr @gen_x86_64_shrd
  %75 = load ptr, ptr %4, align 16, !tbaa !5
  %76 = load ptr, ptr %5, align 16, !tbaa !5
  %77 = zext i32 %21 to i64
  %78 = call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef %77) #30
  %79 = call ptr %74(ptr noundef %75, ptr noundef %76, ptr noundef %78) #30, !callees !252
  %80 = call ptr @emit_insn(ptr noundef %79) #30
  %81 = select i1 %6, ptr @gen_ashrsi3, ptr @gen_ashrdi3
  %82 = load ptr, ptr %5, align 16, !tbaa !5
  %83 = call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef %77) #30
  %84 = call ptr %81(ptr noundef %82, ptr noundef %82, ptr noundef %83) #30, !callees !251
  %85 = call ptr @emit_insn(ptr noundef %84) #30
  br label %134

86:                                               ; preds = %3
  %87 = load ptr, ptr %0, align 8, !tbaa !5
  %88 = getelementptr inbounds ptr, ptr %0, i64 1
  %89 = load ptr, ptr %88, align 8, !tbaa !5
  %90 = tail call i32 @rtx_equal_p(ptr noundef %87, ptr noundef %89) #30
  %91 = icmp eq i32 %90, 0
  br i1 %91, label %92, label %96

92:                                               ; preds = %86
  %93 = load ptr, ptr %0, align 8, !tbaa !5
  %94 = load ptr, ptr %88, align 8, !tbaa !5
  %95 = tail call ptr @emit_move_insn(ptr noundef %93, ptr noundef %94) #30
  br label %96

96:                                               ; preds = %92, %86
  %97 = select i1 %6, ptr @split_di, ptr @split_ti
  call void %97(ptr noundef nonnull %0, i32 noundef 1, ptr noundef nonnull %4, ptr noundef nonnull %5) #30, !callees !239
  %98 = select i1 %6, ptr @gen_x86_shrd, ptr @gen_x86_64_shrd
  %99 = load ptr, ptr %4, align 16, !tbaa !5
  %100 = load ptr, ptr %5, align 16, !tbaa !5
  %101 = load ptr, ptr %8, align 8, !tbaa !5
  %102 = call ptr %98(ptr noundef %99, ptr noundef %100, ptr noundef %101) #30, !callees !252
  %103 = call ptr @emit_insn(ptr noundef %102) #30
  %104 = select i1 %6, ptr @gen_ashrsi3, ptr @gen_ashrdi3
  %105 = load ptr, ptr %5, align 16, !tbaa !5
  %106 = load ptr, ptr %8, align 8, !tbaa !5
  %107 = call ptr %104(ptr noundef %105, ptr noundef %105, ptr noundef %106) #30, !callees !251
  %108 = call ptr @emit_insn(ptr noundef %107) #30
  %109 = load i8, ptr @ix86_arch_features, align 1, !tbaa !16
  %110 = icmp ne i8 %109, 0
  %111 = icmp ne ptr %1, null
  %112 = and i1 %111, %110
  br i1 %112, label %113, label %127

113:                                              ; preds = %96
  %114 = load ptr, ptr %5, align 16, !tbaa !5
  %115 = call ptr @emit_move_insn(ptr noundef nonnull %1, ptr noundef %114) #30
  %116 = add nsw i32 %7, -1
  %117 = zext i32 %116 to i64
  %118 = call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef %117) #30
  %119 = call ptr %104(ptr noundef nonnull %1, ptr noundef nonnull %1, ptr noundef %118) #30, !callees !251
  %120 = call ptr @emit_insn(ptr noundef %119) #30
  %121 = select i1 %6, ptr @gen_x86_shift_adj_1, ptr @gen_x86_64_shift_adj_1
  %122 = load ptr, ptr %4, align 16, !tbaa !5
  %123 = load ptr, ptr %5, align 16, !tbaa !5
  %124 = load ptr, ptr %8, align 8, !tbaa !5
  %125 = call ptr %121(ptr noundef %122, ptr noundef %123, ptr noundef %124, ptr noundef nonnull %1) #30, !callees !245
  %126 = call ptr @emit_insn(ptr noundef %125) #30
  br label %134

127:                                              ; preds = %96
  %128 = select i1 %6, ptr @gen_x86_shift_adj_3, ptr @gen_x86_64_shift_adj_3
  %129 = load ptr, ptr %4, align 16, !tbaa !5
  %130 = load ptr, ptr %5, align 16, !tbaa !5
  %131 = load ptr, ptr %8, align 8, !tbaa !5
  %132 = call ptr %128(ptr noundef %129, ptr noundef %130, ptr noundef %131) #30, !callees !253
  %133 = call ptr @emit_insn(ptr noundef %132) #30
  br label %134

134:                                              ; preds = %113, %127, %23, %40, %56, %73
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %5) #30
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %4) #30
  ret void
}

declare ptr @gen_ashrsi3(ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

declare ptr @gen_ashrdi3(ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

declare ptr @gen_x86_shrd(ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

; Function Attrs: inlinehint mustprogress nofree norecurse nosync nounwind sspstrong willreturn memory(none) uwtable
define internal noalias ptr @gen_x86_64_shrd(ptr nocapture readnone %0, ptr nocapture readnone %1, ptr nocapture readnone %2) unnamed_addr #22 {
  ret ptr null
}

declare ptr @gen_x86_shift_adj_3(ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

declare ptr @gen_x86_64_shift_adj_3(ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define dso_local void @ix86_split_lshr(ptr noundef %0, ptr noundef %1, i32 noundef %2) local_unnamed_addr #9 {
  %4 = alloca [2 x ptr], align 16
  %5 = alloca [2 x ptr], align 16
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %4) #30
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %5) #30
  %6 = icmp eq i32 %2, 17
  %7 = select i1 %6, i32 32, i32 64
  %8 = getelementptr inbounds ptr, ptr %0, i64 2
  %9 = load ptr, ptr %8, align 8, !tbaa !5
  %10 = load i32, ptr %9, align 8
  %11 = and i32 %10, 65535
  %12 = icmp eq i32 %11, 30
  br i1 %12, label %13, label %59

13:                                               ; preds = %3
  %14 = select i1 %6, ptr @split_di, ptr @split_ti
  call void %14(ptr noundef nonnull %0, i32 noundef 2, ptr noundef nonnull %4, ptr noundef nonnull %5) #30, !callees !239
  %15 = load ptr, ptr %8, align 8, !tbaa !5
  %16 = getelementptr inbounds %struct.rtx_def, ptr %15, i64 0, i32 1
  %17 = load i64, ptr %16, align 8, !tbaa !16
  %18 = shl nuw nsw i32 %7, 1
  %19 = add nsw i32 %18, -1
  %20 = trunc i64 %17 to i32
  %21 = and i32 %19, %20
  %22 = icmp ult i32 %21, %7
  br i1 %22, label %37, label %23

23:                                               ; preds = %13
  %24 = load ptr, ptr %4, align 16, !tbaa !5
  %25 = getelementptr inbounds [2 x ptr], ptr %5, i64 0, i64 1
  %26 = load ptr, ptr %25, align 8, !tbaa !5
  %27 = call ptr @emit_move_insn(ptr noundef %24, ptr noundef %26) #30
  %28 = load ptr, ptr %5, align 16, !tbaa !5
  call void @ix86_expand_clear(ptr noundef %28)
  %29 = icmp ugt i32 %21, %7
  br i1 %29, label %30, label %101

30:                                               ; preds = %23
  %31 = select i1 %6, ptr @gen_lshrsi3, ptr @gen_lshrdi3
  %32 = load ptr, ptr %4, align 16, !tbaa !5
  %33 = sub nsw i32 %21, %7
  %34 = sext i32 %33 to i64
  %35 = call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef %34) #30
  %36 = call ptr %31(ptr noundef %32, ptr noundef %32, ptr noundef %35) #30, !callees !241
  br label %98

37:                                               ; preds = %13
  %38 = load ptr, ptr %0, align 8, !tbaa !5
  %39 = getelementptr inbounds ptr, ptr %0, i64 1
  %40 = load ptr, ptr %39, align 8, !tbaa !5
  %41 = call i32 @rtx_equal_p(ptr noundef %38, ptr noundef %40) #30
  %42 = icmp eq i32 %41, 0
  br i1 %42, label %43, label %47

43:                                               ; preds = %37
  %44 = load ptr, ptr %0, align 8, !tbaa !5
  %45 = load ptr, ptr %39, align 8, !tbaa !5
  %46 = call ptr @emit_move_insn(ptr noundef %44, ptr noundef %45) #30
  br label %47

47:                                               ; preds = %43, %37
  %48 = select i1 %6, ptr @gen_x86_shrd, ptr @gen_x86_64_shrd
  %49 = load ptr, ptr %4, align 16, !tbaa !5
  %50 = load ptr, ptr %5, align 16, !tbaa !5
  %51 = zext i32 %21 to i64
  %52 = call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef %51) #30
  %53 = call ptr %48(ptr noundef %49, ptr noundef %50, ptr noundef %52) #30, !callees !252
  %54 = call ptr @emit_insn(ptr noundef %53) #30
  %55 = select i1 %6, ptr @gen_lshrsi3, ptr @gen_lshrdi3
  %56 = load ptr, ptr %5, align 16, !tbaa !5
  %57 = call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef %51) #30
  %58 = call ptr %55(ptr noundef %56, ptr noundef %56, ptr noundef %57) #30, !callees !241
  br label %98

59:                                               ; preds = %3
  %60 = load ptr, ptr %0, align 8, !tbaa !5
  %61 = getelementptr inbounds ptr, ptr %0, i64 1
  %62 = load ptr, ptr %61, align 8, !tbaa !5
  %63 = tail call i32 @rtx_equal_p(ptr noundef %60, ptr noundef %62) #30
  %64 = icmp eq i32 %63, 0
  br i1 %64, label %65, label %69

65:                                               ; preds = %59
  %66 = load ptr, ptr %0, align 8, !tbaa !5
  %67 = load ptr, ptr %61, align 8, !tbaa !5
  %68 = tail call ptr @emit_move_insn(ptr noundef %66, ptr noundef %67) #30
  br label %69

69:                                               ; preds = %65, %59
  %70 = select i1 %6, ptr @split_di, ptr @split_ti
  call void %70(ptr noundef nonnull %0, i32 noundef 1, ptr noundef nonnull %4, ptr noundef nonnull %5) #30, !callees !239
  %71 = select i1 %6, ptr @gen_x86_shrd, ptr @gen_x86_64_shrd
  %72 = load ptr, ptr %4, align 16, !tbaa !5
  %73 = load ptr, ptr %5, align 16, !tbaa !5
  %74 = load ptr, ptr %8, align 8, !tbaa !5
  %75 = call ptr %71(ptr noundef %72, ptr noundef %73, ptr noundef %74) #30, !callees !252
  %76 = call ptr @emit_insn(ptr noundef %75) #30
  %77 = select i1 %6, ptr @gen_lshrsi3, ptr @gen_lshrdi3
  %78 = load ptr, ptr %5, align 16, !tbaa !5
  %79 = load ptr, ptr %8, align 8, !tbaa !5
  %80 = call ptr %77(ptr noundef %78, ptr noundef %78, ptr noundef %79) #30, !callees !241
  %81 = call ptr @emit_insn(ptr noundef %80) #30
  %82 = load i8, ptr @ix86_arch_features, align 1, !tbaa !16
  %83 = icmp ne i8 %82, 0
  %84 = icmp ne ptr %1, null
  %85 = and i1 %84, %83
  br i1 %85, label %86, label %92

86:                                               ; preds = %69
  call void @ix86_expand_clear(ptr noundef nonnull %1)
  %87 = select i1 %6, ptr @gen_x86_shift_adj_1, ptr @gen_x86_64_shift_adj_1
  %88 = load ptr, ptr %4, align 16, !tbaa !5
  %89 = load ptr, ptr %5, align 16, !tbaa !5
  %90 = load ptr, ptr %8, align 8, !tbaa !5
  %91 = call ptr %87(ptr noundef %88, ptr noundef %89, ptr noundef %90, ptr noundef nonnull %1) #30, !callees !245
  br label %98

92:                                               ; preds = %69
  %93 = select i1 %6, ptr @gen_x86_shift_adj_2, ptr @gen_x86_64_shift_adj_2
  %94 = load ptr, ptr %4, align 16, !tbaa !5
  %95 = load ptr, ptr %5, align 16, !tbaa !5
  %96 = load ptr, ptr %8, align 8, !tbaa !5
  %97 = call ptr %93(ptr noundef %94, ptr noundef %95, ptr noundef %96) #30, !callees !246
  br label %98

98:                                               ; preds = %30, %47, %92, %86
  %99 = phi ptr [ %91, %86 ], [ %97, %92 ], [ %58, %47 ], [ %36, %30 ]
  %100 = call ptr @emit_insn(ptr noundef %99) #30
  br label %101

101:                                              ; preds = %98, %23
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %5) #30
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %4) #30
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define dso_local ptr @ix86_zero_extend_to_Pmode(ptr noundef %0) local_unnamed_addr #9 {
  %2 = load i32, ptr %0, align 8
  %3 = lshr i32 %2, 16
  %4 = trunc i32 %3 to i8
  switch i8 %4, label %9 [
    i8 0, label %5
    i8 16, label %7
  ]

5:                                                ; preds = %1
  %6 = tail call ptr @force_reg(i32 noundef 16, ptr noundef nonnull %0) #30
  br label %13

7:                                                ; preds = %1
  %8 = tail call ptr @copy_to_mode_reg(i32 noundef 16, ptr noundef nonnull %0) #30
  br label %13

9:                                                ; preds = %1
  %10 = tail call ptr @gen_reg_rtx(i32 noundef 16) #30
  %11 = tail call ptr @gen_zero_extendsidi2(ptr noundef %10, ptr noundef nonnull %0) #30
  %12 = tail call ptr @emit_insn(ptr noundef %11) #30
  br label %13

13:                                               ; preds = %9, %7, %5
  %14 = phi ptr [ %6, %5 ], [ %8, %7 ], [ %10, %9 ]
  ret ptr %14
}

declare ptr @gen_zero_extendsidi2(ptr noundef, ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define dso_local i32 @ix86_expand_movmem(ptr noundef %0, ptr noundef %1, ptr noundef %2, ptr nocapture noundef readonly %3, ptr nocapture noundef readonly %4, ptr nocapture noundef readonly %5) local_unnamed_addr #9 {
  %7 = alloca i32, align 4
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %7) #30
  %8 = load i32, ptr %3, align 8
  %9 = and i32 %8, 65535
  %10 = icmp eq i32 %9, 30
  br i1 %10, label %11, label %14

11:                                               ; preds = %6
  %12 = getelementptr inbounds %struct.rtx_def, ptr %3, i64 0, i32 1
  %13 = load i64, ptr %12, align 8, !tbaa !16
  br label %14

14:                                               ; preds = %11, %6
  %15 = phi i64 [ %13, %11 ], [ 1, %6 ]
  %16 = load i32, ptr %4, align 8
  %17 = and i32 %16, 65535
  %18 = icmp eq i32 %17, 30
  br i1 %18, label %19, label %23

19:                                               ; preds = %14
  %20 = getelementptr inbounds %struct.rtx_def, ptr %4, i64 0, i32 1
  %21 = load i64, ptr %20, align 8, !tbaa !16
  %22 = icmp sgt i64 %21, %15
  br i1 %22, label %40, label %23

23:                                               ; preds = %19, %14
  %24 = getelementptr inbounds %struct.rtx_def, ptr %0, i64 0, i32 1, i32 0, i32 0, i64 1
  %25 = load ptr, ptr %24, align 8, !tbaa !16
  %26 = icmp eq ptr %25, null
  br i1 %26, label %27, label %30

27:                                               ; preds = %23
  %28 = and i64 %15, 2305843009213693951
  %29 = icmp eq i64 %28, 0
  br i1 %29, label %36, label %40

30:                                               ; preds = %23
  %31 = getelementptr inbounds %struct.mem_attrs, ptr %25, i64 0, i32 4
  %32 = load i32, ptr %31, align 4, !tbaa !185
  %33 = zext i32 %32 to i64
  %34 = shl i64 %15, 3
  %35 = icmp ult i64 %34, %33
  br i1 %35, label %36, label %40

36:                                               ; preds = %30, %27
  %37 = phi i32 [ 8, %27 ], [ %32, %30 ]
  %38 = lshr i32 %37, 3
  %39 = zext i32 %38 to i64
  br label %40

40:                                               ; preds = %30, %19, %27, %36
  %41 = phi i64 [ %39, %36 ], [ %15, %27 ], [ %21, %19 ], [ %15, %30 ]
  %42 = load i32, ptr %2, align 8
  %43 = and i32 %42, 65535
  %44 = icmp eq i32 %43, 30
  br i1 %44, label %45, label %53

45:                                               ; preds = %40
  %46 = getelementptr inbounds %struct.rtx_def, ptr %2, i64 0, i32 1
  %47 = load i64, ptr %46, align 8, !tbaa !16
  %48 = load i32, ptr %5, align 8
  %49 = and i32 %48, 65535
  %50 = icmp eq i32 %49, 30
  %51 = icmp eq i64 %47, 0
  %52 = select i1 %50, i1 %51, i1 false
  br i1 %52, label %57, label %60

53:                                               ; preds = %40
  %54 = load i32, ptr %5, align 8
  %55 = and i32 %54, 65535
  %56 = icmp eq i32 %55, 30
  br i1 %56, label %57, label %62

57:                                               ; preds = %45, %53
  %58 = getelementptr inbounds %struct.rtx_def, ptr %5, i64 0, i32 1
  %59 = load i64, ptr %58, align 8, !tbaa !16
  br label %62

60:                                               ; preds = %45
  %61 = icmp ugt i64 %47, 1073741824
  br i1 %61, label %798, label %62

62:                                               ; preds = %53, %57, %60
  %63 = phi i1 [ true, %57 ], [ %51, %60 ], [ true, %53 ]
  %64 = phi i64 [ 0, %57 ], [ %47, %60 ], [ 0, %53 ]
  %65 = phi i64 [ %59, %57 ], [ %47, %60 ], [ -1, %53 ]
  %66 = call fastcc i32 @decide_alg(i64 noundef %64, i64 noundef %65, i8 noundef zeroext 0, ptr noundef nonnull %7)
  %67 = trunc i64 %41 to i32
  %68 = trunc i64 %65 to i32
  switch i32 %66, label %83 [
    i32 0, label %69
    i32 6, label %70
    i32 7, label %70
    i32 4, label %73
    i32 3, label %74
    i32 2, label %78
    i32 5, label %82
    i32 1, label %798
  ]

69:                                               ; preds = %62
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 18200, ptr noundef nonnull @.str.131) #30
  br label %70

70:                                               ; preds = %69, %62, %62
  %71 = load i8, ptr getelementptr inbounds ([87 x i8], ptr @mode_size, i64 0, i64 16), align 16, !tbaa !16
  %72 = zext i8 %71 to i32
  br label %83

73:                                               ; preds = %62
  br label %83

74:                                               ; preds = %62
  %75 = load i32, ptr @ix86_tune, align 4, !tbaa !16
  %76 = icmp eq i32 %75, 3
  %77 = select i1 %76, i32 8, i32 4
  br label %83

78:                                               ; preds = %62
  %79 = load i32, ptr @ix86_tune, align 4, !tbaa !16
  %80 = icmp eq i32 %79, 3
  %81 = select i1 %80, i32 8, i32 1
  br label %83

82:                                               ; preds = %62
  br label %83

83:                                               ; preds = %62, %70, %73, %74, %78, %82
  %84 = phi i32 [ 0, %62 ], [ 1, %82 ], [ 8, %73 ], [ %72, %70 ], [ %77, %74 ], [ %81, %78 ]
  %85 = load i32, ptr @optimize_size, align 4, !tbaa !20
  %86 = icmp eq i32 %85, 0
  %87 = select i1 %86, i32 %84, i32 1
  %88 = tail call i32 @llvm.smax.i32(i32 %87, i32 %67)
  %89 = icmp ne i32 %68, -1
  %90 = icmp slt i32 %68, 4
  %91 = and i1 %89, %90
  %92 = select i1 %91, i32 %67, i32 %88
  %93 = load i32, ptr @target_flags, align 4, !tbaa !20
  %94 = and i32 %93, 2048
  %95 = icmp eq i32 %94, 0
  %96 = sext i32 %92 to i64
  %97 = select i1 %95, i64 %41, i64 %96
  switch i32 %66, label %99 [
    i32 1, label %798
    i32 0, label %98
  ]

98:                                               ; preds = %83
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 18323, ptr noundef nonnull @.str.131) #30
  br label %99

99:                                               ; preds = %83, %98
  br i1 %63, label %100, label %105

100:                                              ; preds = %99
  %101 = load i32, ptr %2, align 8
  %102 = lshr i32 %101, 16
  %103 = and i32 %102, 255
  %104 = tail call ptr @copy_to_mode_reg(i32 noundef %103, ptr noundef nonnull %2) #30
  br label %105

105:                                              ; preds = %100, %99
  %106 = phi ptr [ %2, %99 ], [ %104, %100 ]
  %107 = getelementptr inbounds %struct.rtx_def, ptr %0, i64 0, i32 1
  %108 = load ptr, ptr %107, align 8, !tbaa !16
  %109 = tail call ptr @copy_to_mode_reg(i32 noundef 16, ptr noundef %108) #30
  %110 = getelementptr inbounds %struct.rtx_def, ptr %1, i64 0, i32 1
  %111 = load ptr, ptr %110, align 8, !tbaa !16
  %112 = tail call ptr @copy_to_mode_reg(i32 noundef 16, ptr noundef %111) #30
  switch i32 %66, label %125 [
    i32 5, label %124
    i32 0, label %113
    i32 6, label %114
    i32 7, label %117
    i32 4, label %121
    i32 3, label %122
    i32 2, label %123
  ]

113:                                              ; preds = %105
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 18332, ptr noundef nonnull @.str.131) #30
  br label %114

114:                                              ; preds = %105, %113
  %115 = load i8, ptr getelementptr inbounds ([87 x i8], ptr @mode_size, i64 0, i64 16), align 16, !tbaa !16
  %116 = zext i8 %115 to i32
  br label %125

117:                                              ; preds = %105
  %118 = load i8, ptr getelementptr inbounds ([87 x i8], ptr @mode_size, i64 0, i64 16), align 16, !tbaa !16
  %119 = zext i8 %118 to i32
  %120 = shl nuw nsw i32 %119, 1
  br label %125

121:                                              ; preds = %105
  br label %125

122:                                              ; preds = %105
  br label %125

123:                                              ; preds = %105
  br label %125

124:                                              ; preds = %105
  br label %125

125:                                              ; preds = %105, %124, %123, %122, %121, %117, %114
  %126 = phi i32 [ 0, %105 ], [ 1, %124 ], [ 1, %123 ], [ 4, %122 ], [ 8, %121 ], [ %120, %117 ], [ %116, %114 ]
  %127 = phi i1 [ true, %105 ], [ false, %124 ], [ true, %123 ], [ true, %122 ], [ true, %121 ], [ false, %117 ], [ false, %114 ]
  %128 = load i32, ptr %106, align 8
  %129 = and i32 %128, 65535
  %130 = icmp eq i32 %129, 30
  %131 = icmp slt i64 %97, %96
  %132 = select i1 %130, i1 %131, i1 false
  br i1 %132, label %133, label %156

133:                                              ; preds = %125
  %134 = getelementptr inbounds %struct.rtx_def, ptr %106, i64 0, i32 1
  %135 = load i64, ptr %134, align 8, !tbaa !16
  %136 = icmp sgt i64 %135, %96
  %137 = zext i32 %126 to i64
  %138 = icmp sgt i64 %135, %137
  %139 = select i1 %136, i1 %138, i1 false
  br i1 %139, label %140, label %149

140:                                              ; preds = %133
  %141 = shl nsw i32 %92, 3
  %142 = tail call i32 @get_mem_align_offset(ptr noundef nonnull %0, i32 noundef %141) #30
  %143 = icmp slt i32 %142, 1
  %144 = sub nsw i32 %92, %142
  %145 = icmp eq i32 %144, 0
  %146 = select i1 %143, i1 true, i1 %145
  br i1 %146, label %147, label %156

147:                                              ; preds = %140
  %148 = load i32, ptr %106, align 8
  br label %149

149:                                              ; preds = %147, %133
  %150 = phi i32 [ %148, %147 ], [ %128, %133 ]
  %151 = lshr i32 %150, 16
  %152 = and i32 %151, 255
  %153 = icmp eq i32 %152, 0
  %154 = select i1 %153, i32 16, i32 %152
  %155 = tail call ptr @force_reg(i32 noundef %154, ptr noundef nonnull %106) #30
  br label %156

156:                                              ; preds = %140, %149, %125
  %157 = phi ptr [ %155, %149 ], [ %106, %125 ], [ %106, %140 ]
  %158 = phi i32 [ 0, %149 ], [ 0, %125 ], [ %144, %140 ]
  %159 = icmp sgt i32 %92, 0
  %160 = icmp sgt i64 %97, 0
  %161 = select i1 %159, i1 %160, i1 false
  br i1 %161, label %163, label %162

162:                                              ; preds = %156
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 18376, ptr noundef nonnull @.str.131) #30
  br label %163

163:                                              ; preds = %156, %162
  %164 = icmp ugt i32 %126, 1
  br i1 %164, label %170, label %165

165:                                              ; preds = %163
  %166 = icmp sgt i32 %92, 1
  %167 = zext i32 %92 to i64
  %168 = icmp slt i64 %97, %167
  %169 = select i1 %166, i1 %168, i1 false
  br i1 %169, label %170, label %212

170:                                              ; preds = %165, %163
  %171 = add nsw i32 %126, -1
  %172 = sext i32 %171 to i64
  %173 = sub nsw i64 %96, %97
  %174 = tail call i64 @llvm.smax.i64(i64 %173, i64 %172)
  %175 = trunc i64 %174 to i32
  br label %176

176:                                              ; preds = %176, %170
  %177 = phi i32 [ 1, %170 ], [ %179, %176 ]
  %178 = icmp sgt i32 %177, %175
  %179 = shl i32 %177, 1
  br i1 %178, label %180, label %176, !llvm.loop !254

180:                                              ; preds = %176
  br i1 %63, label %188, label %181

181:                                              ; preds = %180
  %182 = sext i32 %177 to i64
  %183 = icmp ult i64 %64, %182
  br i1 %183, label %184, label %212

184:                                              ; preds = %181
  %185 = icmp eq i32 %126, 1
  br i1 %185, label %186, label %635

186:                                              ; preds = %184
  %187 = trunc i64 %97 to i32
  br label %212

188:                                              ; preds = %180
  %189 = tail call ptr @gen_label_rtx() #30
  %190 = sext i32 %177 to i64
  %191 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef %190) #30
  %192 = load i32, ptr %157, align 8
  %193 = lshr i32 %192, 16
  %194 = and i32 %193, 255
  %195 = icmp eq i32 %194, 0
  %196 = select i1 %195, i32 16, i32 %194
  tail call void @emit_cmp_and_jump_insns(ptr noundef nonnull %157, ptr noundef %191, i32 noundef 89, ptr noundef null, i32 noundef %196, i32 noundef 1, ptr noundef %189) #30
  %197 = icmp eq i64 %65, -1
  %198 = icmp slt i64 %65, %190
  %199 = or i1 %197, %198
  %200 = tail call ptr @get_last_insn() #30
  %201 = load i32, ptr %200, align 8
  %202 = and i32 %201, 65535
  %203 = icmp eq i32 %202, 9
  br i1 %199, label %204, label %208

204:                                              ; preds = %188
  br i1 %203, label %206, label %205

205:                                              ; preds = %204
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 17264, ptr noundef nonnull @.str.131) #30
  br label %206

206:                                              ; preds = %204, %205
  %207 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef 6000) #30
  tail call void @add_reg_note(ptr noundef nonnull %200, i32 noundef 13, ptr noundef %207) #30
  br label %212

208:                                              ; preds = %188
  br i1 %203, label %210, label %209

209:                                              ; preds = %208
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 17264, ptr noundef nonnull @.str.131) #30
  br label %210

210:                                              ; preds = %208, %209
  %211 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef 2000) #30
  tail call void @add_reg_note(ptr noundef nonnull %200, i32 noundef 13, ptr noundef %211) #30
  br label %212

212:                                              ; preds = %186, %181, %210, %206, %165
  %213 = phi ptr [ null, %186 ], [ null, %181 ], [ %189, %206 ], [ %189, %210 ], [ null, %165 ]
  %214 = phi i32 [ %177, %186 ], [ %177, %181 ], [ %177, %206 ], [ %177, %210 ], [ %126, %165 ]
  %215 = phi i32 [ %187, %186 ], [ %92, %181 ], [ %92, %206 ], [ %92, %210 ], [ %92, %165 ]
  %216 = load i32, ptr %7, align 4, !tbaa !20
  %217 = icmp eq i32 %216, -1
  br i1 %217, label %248, label %218

218:                                              ; preds = %212
  %219 = load i32, ptr %157, align 8
  %220 = and i32 %219, 65535
  %221 = icmp eq i32 %220, 30
  br i1 %221, label %222, label %230

222:                                              ; preds = %218
  %223 = getelementptr inbounds %struct.rtx_def, ptr %157, i64 0, i32 1
  %224 = load i64, ptr %223, align 8, !tbaa !16
  %225 = sext i32 %216 to i64
  %226 = icmp ult i64 %224, %225
  br i1 %226, label %248, label %227

227:                                              ; preds = %222
  %228 = tail call ptr @emit_block_move_via_libcall(ptr noundef %0, ptr noundef %1, ptr noundef nonnull %157, i8 noundef zeroext 0) #30
  %229 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 64), align 16, !tbaa !5
  br label %609

230:                                              ; preds = %218
  %231 = tail call ptr @gen_label_rtx() #30
  %232 = tail call ptr @gen_label_rtx() #30
  %233 = add nsw i32 %216, -1
  %234 = sext i32 %233 to i64
  %235 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef %234) #30
  %236 = load i32, ptr %157, align 8
  %237 = lshr i32 %236, 16
  %238 = and i32 %237, 255
  tail call void @emit_cmp_and_jump_insns(ptr noundef nonnull %157, ptr noundef %235, i32 noundef 88, ptr noundef null, i32 noundef %238, i32 noundef 1, ptr noundef %231) #30
  %239 = tail call ptr @get_last_insn() #30
  %240 = load i32, ptr %239, align 8
  %241 = and i32 %240, 65535
  %242 = icmp eq i32 %241, 9
  br i1 %242, label %244, label %243

243:                                              ; preds = %230
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 17264, ptr noundef nonnull @.str.131) #30
  br label %244

244:                                              ; preds = %230, %243
  %245 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef 9000) #30
  tail call void @add_reg_note(ptr noundef nonnull %239, i32 noundef 13, ptr noundef %245) #30
  %246 = tail call ptr @emit_block_move_via_libcall(ptr noundef %0, ptr noundef %1, ptr noundef nonnull %157, i8 noundef zeroext 0) #30
  tail call void @emit_jump(ptr noundef %232) #30
  %247 = tail call ptr @emit_label(ptr noundef %231) #30
  br label %248

248:                                              ; preds = %244, %222, %212
  %249 = phi ptr [ null, %222 ], [ %232, %244 ], [ null, %212 ]
  %250 = sext i32 %215 to i64
  %251 = icmp slt i64 %97, %250
  br i1 %251, label %252, label %570

252:                                              ; preds = %248
  %253 = icmp eq i32 %158, 0
  br i1 %253, label %254, label %333

254:                                              ; preds = %252
  %255 = tail call ptr @change_address(ptr noundef %1, i32 noundef 1, ptr noundef %112) #30
  %256 = tail call ptr @change_address(ptr noundef %0, i32 noundef 1, ptr noundef %109) #30
  %257 = trunc i64 %97 to i32
  %258 = icmp slt i32 %257, 2
  %259 = icmp sgt i32 %215, 1
  %260 = and i1 %258, %259
  br i1 %260, label %261, label %280

261:                                              ; preds = %254
  %262 = tail call fastcc ptr @ix86_expand_aligntest(ptr noundef %109, i32 noundef 1, i8 noundef zeroext 0)
  %263 = tail call ptr @change_address(ptr noundef %255, i32 noundef 14, ptr noundef %112) #30
  %264 = tail call ptr @change_address(ptr noundef %256, i32 noundef 14, ptr noundef %109) #30
  %265 = tail call ptr @gen_strmov(ptr noundef %109, ptr noundef %264, ptr noundef %112, ptr noundef %263) #30
  %266 = tail call ptr @emit_insn(ptr noundef %265) #30
  %267 = load i32, ptr %157, align 8
  %268 = and i32 %267, 16711680
  %269 = icmp eq i32 %268, 1114112
  %270 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef -1) #30
  br i1 %269, label %271, label %273

271:                                              ; preds = %261
  %272 = tail call ptr @gen_adddi3(ptr noundef nonnull %157, ptr noundef nonnull %157, ptr noundef %270) #30
  br label %275

273:                                              ; preds = %261
  %274 = tail call ptr @gen_addsi3(ptr noundef nonnull %157, ptr noundef nonnull %157, ptr noundef %270) #30
  br label %275

275:                                              ; preds = %273, %271
  %276 = phi ptr [ %274, %273 ], [ %272, %271 ]
  %277 = tail call ptr @emit_insn(ptr noundef %276) #30
  %278 = tail call ptr @emit_label(ptr noundef %262) #30
  %279 = getelementptr inbounds %struct.rtx_def, ptr %262, i64 0, i32 1, i32 0, i32 2
  store i32 1, ptr %279, align 8, !tbaa !16
  br label %280

280:                                              ; preds = %275, %254
  %281 = phi ptr [ %263, %275 ], [ %255, %254 ]
  %282 = phi ptr [ %264, %275 ], [ %256, %254 ]
  %283 = icmp slt i32 %257, 3
  %284 = icmp sgt i32 %215, 2
  %285 = and i1 %283, %284
  br i1 %285, label %286, label %305

286:                                              ; preds = %280
  %287 = tail call fastcc ptr @ix86_expand_aligntest(ptr noundef %109, i32 noundef 2, i8 noundef zeroext 0)
  %288 = tail call ptr @change_address(ptr noundef %281, i32 noundef 15, ptr noundef %112) #30
  %289 = tail call ptr @change_address(ptr noundef %282, i32 noundef 15, ptr noundef %109) #30
  %290 = tail call ptr @gen_strmov(ptr noundef %109, ptr noundef %289, ptr noundef %112, ptr noundef %288) #30
  %291 = tail call ptr @emit_insn(ptr noundef %290) #30
  %292 = load i32, ptr %157, align 8
  %293 = and i32 %292, 16711680
  %294 = icmp eq i32 %293, 1114112
  %295 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef -2) #30
  br i1 %294, label %296, label %298

296:                                              ; preds = %286
  %297 = tail call ptr @gen_adddi3(ptr noundef nonnull %157, ptr noundef nonnull %157, ptr noundef %295) #30
  br label %300

298:                                              ; preds = %286
  %299 = tail call ptr @gen_addsi3(ptr noundef nonnull %157, ptr noundef nonnull %157, ptr noundef %295) #30
  br label %300

300:                                              ; preds = %298, %296
  %301 = phi ptr [ %299, %298 ], [ %297, %296 ]
  %302 = tail call ptr @emit_insn(ptr noundef %301) #30
  %303 = tail call ptr @emit_label(ptr noundef %287) #30
  %304 = getelementptr inbounds %struct.rtx_def, ptr %287, i64 0, i32 1, i32 0, i32 2
  store i32 1, ptr %304, align 8, !tbaa !16
  br label %305

305:                                              ; preds = %300, %280
  %306 = phi ptr [ %288, %300 ], [ %281, %280 ]
  %307 = phi ptr [ %289, %300 ], [ %282, %280 ]
  %308 = icmp slt i32 %257, 5
  %309 = icmp sgt i32 %215, 4
  %310 = and i1 %308, %309
  br i1 %310, label %311, label %330

311:                                              ; preds = %305
  %312 = tail call fastcc ptr @ix86_expand_aligntest(ptr noundef %109, i32 noundef 4, i8 noundef zeroext 0)
  %313 = tail call ptr @change_address(ptr noundef %306, i32 noundef 16, ptr noundef %112) #30
  %314 = tail call ptr @change_address(ptr noundef %307, i32 noundef 16, ptr noundef %109) #30
  %315 = tail call ptr @gen_strmov(ptr noundef %109, ptr noundef %314, ptr noundef %112, ptr noundef %313) #30
  %316 = tail call ptr @emit_insn(ptr noundef %315) #30
  %317 = load i32, ptr %157, align 8
  %318 = and i32 %317, 16711680
  %319 = icmp eq i32 %318, 1114112
  %320 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef -4) #30
  br i1 %319, label %321, label %323

321:                                              ; preds = %311
  %322 = tail call ptr @gen_adddi3(ptr noundef nonnull %157, ptr noundef nonnull %157, ptr noundef %320) #30
  br label %325

323:                                              ; preds = %311
  %324 = tail call ptr @gen_addsi3(ptr noundef nonnull %157, ptr noundef nonnull %157, ptr noundef %320) #30
  br label %325

325:                                              ; preds = %323, %321
  %326 = phi ptr [ %324, %323 ], [ %322, %321 ]
  %327 = tail call ptr @emit_insn(ptr noundef %326) #30
  %328 = tail call ptr @emit_label(ptr noundef %312) #30
  %329 = getelementptr inbounds %struct.rtx_def, ptr %312, i64 0, i32 1, i32 0, i32 2
  store i32 1, ptr %329, align 8, !tbaa !16
  br label %330

330:                                              ; preds = %325, %305
  %331 = icmp slt i32 %215, 9
  br i1 %331, label %528, label %332

332:                                              ; preds = %330
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 17897, ptr noundef nonnull @.str.131) #30
  br label %528

333:                                              ; preds = %252
  %334 = shl nsw i32 %215, 3
  %335 = tail call i32 @get_mem_align_offset(ptr noundef %1, i32 noundef %334) #30
  %336 = sub nsw i32 %215, %335
  %337 = icmp slt i32 %335, 0
  %338 = select i1 %337, i32 %335, i32 %336
  %339 = getelementptr inbounds %struct.rtx_def, ptr %1, i64 0, i32 1, i32 0, i32 0, i64 1
  %340 = load ptr, ptr %339, align 8, !tbaa !16
  %341 = icmp eq ptr %340, null
  br i1 %341, label %345, label %342

342:                                              ; preds = %333
  %343 = getelementptr inbounds %struct.mem_attrs, ptr %340, i64 0, i32 2
  %344 = load ptr, ptr %343, align 8, !tbaa !255
  br label %356

345:                                              ; preds = %333
  %346 = load i32, ptr %1, align 8
  %347 = lshr i32 %346, 16
  %348 = and i32 %347, 255
  %349 = icmp eq i32 %348, 1
  br i1 %349, label %356, label %350

350:                                              ; preds = %345
  %351 = zext i32 %348 to i64
  %352 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %351
  %353 = load i8, ptr %352, align 1, !tbaa !16
  %354 = zext i8 %353 to i64
  %355 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef %354) #30
  br label %356

356:                                              ; preds = %350, %345, %342
  %357 = phi ptr [ %344, %342 ], [ %355, %350 ], [ null, %345 ]
  %358 = getelementptr inbounds %struct.rtx_def, ptr %0, i64 0, i32 1, i32 0, i32 0, i64 1
  %359 = load ptr, ptr %358, align 8, !tbaa !16
  %360 = icmp eq ptr %359, null
  br i1 %360, label %364, label %361

361:                                              ; preds = %356
  %362 = getelementptr inbounds %struct.mem_attrs, ptr %359, i64 0, i32 2
  %363 = load ptr, ptr %362, align 8, !tbaa !255
  br label %375

364:                                              ; preds = %356
  %365 = load i32, ptr %0, align 8
  %366 = lshr i32 %365, 16
  %367 = and i32 %366, 255
  %368 = icmp eq i32 %367, 1
  br i1 %368, label %375, label %369

369:                                              ; preds = %364
  %370 = zext i32 %367 to i64
  %371 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %370
  %372 = load i8, ptr %371, align 1, !tbaa !16
  %373 = zext i8 %372 to i64
  %374 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef %373) #30
  br label %375

375:                                              ; preds = %369, %364, %361
  %376 = phi ptr [ %363, %361 ], [ %374, %369 ], [ null, %364 ]
  %377 = and i32 %158, 1
  %378 = icmp eq i32 %377, 0
  br i1 %378, label %384, label %379

379:                                              ; preds = %375
  %380 = tail call ptr @adjust_automodify_address_1(ptr noundef nonnull %0, i32 noundef 14, ptr noundef %109, i64 noundef 0, i32 noundef 0) #30
  %381 = tail call ptr @adjust_automodify_address_1(ptr noundef nonnull %1, i32 noundef 14, ptr noundef %112, i64 noundef 0, i32 noundef 0) #30
  %382 = tail call ptr @gen_strmov(ptr noundef %109, ptr noundef %380, ptr noundef %112, ptr noundef %381) #30
  %383 = tail call ptr @emit_insn(ptr noundef %382) #30
  br label %384

384:                                              ; preds = %379, %375
  %385 = phi ptr [ %381, %379 ], [ %1, %375 ]
  %386 = phi ptr [ %380, %379 ], [ %0, %375 ]
  %387 = phi i32 [ 1, %379 ], [ 0, %375 ]
  %388 = and i32 %158, 2
  %389 = icmp eq i32 %388, 0
  br i1 %389, label %419, label %390

390:                                              ; preds = %384
  %391 = zext i32 %387 to i64
  %392 = tail call ptr @adjust_automodify_address_1(ptr noundef %386, i32 noundef 15, ptr noundef %109, i64 noundef %391, i32 noundef 0) #30
  %393 = tail call ptr @adjust_automodify_address_1(ptr noundef %385, i32 noundef 15, ptr noundef %112, i64 noundef %391, i32 noundef 0) #30
  %394 = getelementptr inbounds %struct.rtx_def, ptr %392, i64 0, i32 1, i32 0, i32 0, i64 1
  %395 = load ptr, ptr %394, align 8, !tbaa !16
  %396 = icmp eq ptr %395, null
  br i1 %396, label %401, label %397

397:                                              ; preds = %390
  %398 = getelementptr inbounds %struct.mem_attrs, ptr %395, i64 0, i32 4
  %399 = load i32, ptr %398, align 4, !tbaa !185
  %400 = icmp ult i32 %399, 16
  br i1 %400, label %401, label %402

401:                                              ; preds = %397, %390
  tail call void @set_mem_align(ptr noundef nonnull %392, i32 noundef 16) #30
  br label %402

402:                                              ; preds = %401, %397
  %403 = icmp sgt i32 %338, -1
  %404 = and i32 %338, 1
  %405 = icmp eq i32 %404, %377
  %406 = and i1 %403, %405
  br i1 %406, label %407, label %416

407:                                              ; preds = %402
  %408 = getelementptr inbounds %struct.rtx_def, ptr %393, i64 0, i32 1, i32 0, i32 0, i64 1
  %409 = load ptr, ptr %408, align 8, !tbaa !16
  %410 = icmp eq ptr %409, null
  br i1 %410, label %415, label %411

411:                                              ; preds = %407
  %412 = getelementptr inbounds %struct.mem_attrs, ptr %409, i64 0, i32 4
  %413 = load i32, ptr %412, align 4, !tbaa !185
  %414 = icmp ult i32 %413, 16
  br i1 %414, label %415, label %416

415:                                              ; preds = %411, %407
  tail call void @set_mem_align(ptr noundef nonnull %393, i32 noundef 16) #30
  br label %416

416:                                              ; preds = %415, %411, %402
  %417 = tail call ptr @gen_strmov(ptr noundef %109, ptr noundef nonnull %392, ptr noundef %112, ptr noundef %393) #30
  %418 = tail call ptr @emit_insn(ptr noundef %417) #30
  br label %419

419:                                              ; preds = %416, %384
  %420 = phi ptr [ %393, %416 ], [ %385, %384 ]
  %421 = phi ptr [ %392, %416 ], [ %386, %384 ]
  %422 = phi i32 [ 2, %416 ], [ %387, %384 ]
  %423 = and i32 %158, 4
  %424 = icmp eq i32 %423, 0
  br i1 %424, label %460, label %425

425:                                              ; preds = %419
  %426 = zext i32 %422 to i64
  %427 = tail call ptr @adjust_automodify_address_1(ptr noundef %421, i32 noundef 16, ptr noundef %109, i64 noundef %426, i32 noundef 0) #30
  %428 = tail call ptr @adjust_automodify_address_1(ptr noundef %420, i32 noundef 16, ptr noundef %112, i64 noundef %426, i32 noundef 0) #30
  %429 = getelementptr inbounds %struct.rtx_def, ptr %427, i64 0, i32 1, i32 0, i32 0, i64 1
  %430 = load ptr, ptr %429, align 8, !tbaa !16
  %431 = icmp eq ptr %430, null
  br i1 %431, label %436, label %432

432:                                              ; preds = %425
  %433 = getelementptr inbounds %struct.mem_attrs, ptr %430, i64 0, i32 4
  %434 = load i32, ptr %433, align 4, !tbaa !185
  %435 = icmp ult i32 %434, 32
  br i1 %435, label %436, label %437

436:                                              ; preds = %432, %425
  tail call void @set_mem_align(ptr noundef nonnull %427, i32 noundef 32) #30
  br label %437

437:                                              ; preds = %436, %432
  %438 = icmp sgt i32 %338, -1
  br i1 %438, label %439, label %457

439:                                              ; preds = %437
  %440 = xor i32 %338, %158
  %441 = and i32 %440, 3
  %442 = icmp eq i32 %441, 0
  %443 = and i32 %338, 1
  %444 = icmp eq i32 %443, %377
  %445 = select i1 %444, i32 16, i32 0
  %446 = select i1 %442, i32 32, i32 %445
  %447 = getelementptr inbounds %struct.rtx_def, ptr %428, i64 0, i32 1, i32 0, i32 0, i64 1
  %448 = load ptr, ptr %447, align 8, !tbaa !16
  %449 = icmp eq ptr %448, null
  br i1 %449, label %453, label %450

450:                                              ; preds = %439
  %451 = getelementptr inbounds %struct.mem_attrs, ptr %448, i64 0, i32 4
  %452 = load i32, ptr %451, align 4, !tbaa !185
  br label %453

453:                                              ; preds = %450, %439
  %454 = phi i32 [ %452, %450 ], [ 8, %439 ]
  %455 = icmp ult i32 %454, %446
  br i1 %455, label %456, label %457

456:                                              ; preds = %453
  tail call void @set_mem_align(ptr noundef nonnull %428, i32 noundef %446) #30
  br label %457

457:                                              ; preds = %456, %453, %437
  %458 = tail call ptr @gen_strmov(ptr noundef %109, ptr noundef nonnull %427, ptr noundef %112, ptr noundef %428) #30
  %459 = tail call ptr @emit_insn(ptr noundef %458) #30
  br label %460

460:                                              ; preds = %457, %419
  %461 = phi ptr [ %428, %457 ], [ %420, %419 ]
  %462 = phi ptr [ %427, %457 ], [ %421, %419 ]
  %463 = phi i32 [ 4, %457 ], [ %422, %419 ]
  %464 = zext i32 %463 to i64
  %465 = tail call ptr @adjust_automodify_address_1(ptr noundef %462, i32 noundef 1, ptr noundef %109, i64 noundef %464, i32 noundef 0) #30
  %466 = tail call ptr @adjust_automodify_address_1(ptr noundef %461, i32 noundef 1, ptr noundef %112, i64 noundef %464, i32 noundef 0) #30
  %467 = getelementptr inbounds %struct.rtx_def, ptr %465, i64 0, i32 1, i32 0, i32 0, i64 1
  %468 = load ptr, ptr %467, align 8, !tbaa !16
  %469 = icmp eq ptr %468, null
  br i1 %469, label %473, label %470

470:                                              ; preds = %460
  %471 = getelementptr inbounds %struct.mem_attrs, ptr %468, i64 0, i32 4
  %472 = load i32, ptr %471, align 4, !tbaa !185
  br label %473

473:                                              ; preds = %470, %460
  %474 = phi i32 [ %472, %470 ], [ 8, %460 ]
  %475 = icmp ult i32 %474, %334
  br i1 %475, label %476, label %477

476:                                              ; preds = %473
  tail call void @set_mem_align(ptr noundef nonnull %465, i32 noundef %334) #30
  br label %477

477:                                              ; preds = %476, %473
  %478 = icmp sgt i32 %338, -1
  br i1 %478, label %479, label %504

479:                                              ; preds = %477
  %480 = xor i32 %338, %158
  %481 = and i32 %480, 7
  %482 = icmp eq i32 %481, 0
  br i1 %482, label %490, label %483

483:                                              ; preds = %479
  %484 = and i32 %480, 3
  %485 = icmp eq i32 %484, 0
  br i1 %485, label %490, label %486

486:                                              ; preds = %483
  %487 = and i32 %338, 1
  %488 = icmp eq i32 %487, %377
  %489 = select i1 %488, i32 2, i32 0
  br label %490

490:                                              ; preds = %486, %483, %479
  %491 = phi i32 [ 8, %479 ], [ 4, %483 ], [ %489, %486 ]
  %492 = tail call i32 @llvm.umin.i32(i32 %491, i32 %215)
  %493 = getelementptr inbounds %struct.rtx_def, ptr %466, i64 0, i32 1, i32 0, i32 0, i64 1
  %494 = load ptr, ptr %493, align 8, !tbaa !16
  %495 = icmp eq ptr %494, null
  br i1 %495, label %499, label %496

496:                                              ; preds = %490
  %497 = getelementptr inbounds %struct.mem_attrs, ptr %494, i64 0, i32 4
  %498 = load i32, ptr %497, align 4, !tbaa !185
  br label %499

499:                                              ; preds = %496, %490
  %500 = phi i32 [ %498, %496 ], [ 8, %490 ]
  %501 = shl nuw nsw i32 %492, 3
  %502 = icmp ult i32 %500, %501
  br i1 %502, label %503, label %504

503:                                              ; preds = %499
  tail call void @set_mem_align(ptr noundef nonnull %466, i32 noundef %501) #30
  br label %504

504:                                              ; preds = %503, %499, %477
  %505 = icmp eq ptr %376, null
  br i1 %505, label %512, label %506

506:                                              ; preds = %504
  %507 = getelementptr inbounds %struct.rtx_def, ptr %376, i64 0, i32 1
  %508 = load i64, ptr %507, align 8, !tbaa !16
  %509 = sext i32 %158 to i64
  %510 = sub nsw i64 %508, %509
  %511 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef %510) #30
  tail call void @set_mem_size(ptr noundef nonnull %465, ptr noundef %511) #30
  br label %512

512:                                              ; preds = %506, %504
  %513 = icmp eq ptr %357, null
  br i1 %513, label %514, label %516

514:                                              ; preds = %512
  %515 = sext i32 %158 to i64
  br label %522

516:                                              ; preds = %512
  %517 = getelementptr inbounds %struct.rtx_def, ptr %357, i64 0, i32 1
  %518 = load i64, ptr %517, align 8, !tbaa !16
  %519 = sext i32 %158 to i64
  %520 = sub nsw i64 %518, %519
  %521 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef %520) #30
  tail call void @set_mem_size(ptr noundef nonnull %465, ptr noundef %521) #30
  br label %522

522:                                              ; preds = %514, %516
  %523 = phi i64 [ %515, %514 ], [ %519, %516 ]
  %524 = sub nsw i32 0, %158
  %525 = sext i32 %524 to i64
  %526 = tail call ptr @plus_constant(ptr noundef %157, i64 noundef %525) #30
  %527 = sub nsw i64 %64, %523
  br label %528

528:                                              ; preds = %332, %330, %522
  %529 = phi ptr [ %466, %522 ], [ %255, %330 ], [ %255, %332 ]
  %530 = phi ptr [ %526, %522 ], [ %157, %330 ], [ %157, %332 ]
  %531 = phi i64 [ %527, %522 ], [ %64, %330 ], [ %64, %332 ]
  %532 = phi ptr [ %465, %522 ], [ %256, %330 ], [ %256, %332 ]
  br i1 %127, label %570, label %533

533:                                              ; preds = %528
  %534 = zext i32 %126 to i64
  %535 = icmp ult i64 %531, %534
  br i1 %535, label %541, label %536

536:                                              ; preds = %533
  br i1 %253, label %537, label %570

537:                                              ; preds = %536
  %538 = sub i64 %534, %97
  %539 = add i64 %538, %250
  %540 = icmp ult i64 %531, %539
  br i1 %540, label %541, label %570

541:                                              ; preds = %537, %533
  br i1 %164, label %543, label %542

542:                                              ; preds = %541
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 18469, ptr noundef nonnull @.str.131) #30
  br label %543

543:                                              ; preds = %541, %542
  %544 = icmp eq ptr %213, null
  br i1 %544, label %545, label %547

545:                                              ; preds = %543
  %546 = tail call ptr @gen_label_rtx() #30
  br label %547

547:                                              ; preds = %545, %543
  %548 = phi ptr [ %546, %545 ], [ %213, %543 ]
  %549 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef %534) #30
  %550 = load i32, ptr %530, align 8
  %551 = lshr i32 %550, 16
  %552 = and i32 %551, 255
  %553 = icmp eq i32 %552, 0
  %554 = select i1 %553, i32 16, i32 %552
  tail call void @emit_cmp_and_jump_insns(ptr noundef nonnull %530, ptr noundef %549, i32 noundef 89, ptr noundef null, i32 noundef %554, i32 noundef 1, ptr noundef %548) #30
  %555 = icmp eq i64 %65, -1
  br i1 %555, label %561, label %556

556:                                              ; preds = %547
  %557 = sub nsw i64 %250, %97
  %558 = sdiv i64 %557, 2
  %559 = add nsw i64 %558, %534
  %560 = icmp slt i64 %65, %559
  br i1 %560, label %561, label %569

561:                                              ; preds = %556, %547
  %562 = tail call ptr @get_last_insn() #30
  %563 = load i32, ptr %562, align 8
  %564 = and i32 %563, 65535
  %565 = icmp eq i32 %564, 9
  br i1 %565, label %567, label %566

566:                                              ; preds = %561
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 17264, ptr noundef nonnull @.str.131) #30
  br label %567

567:                                              ; preds = %561, %566
  %568 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef 2000) #30
  tail call void @add_reg_note(ptr noundef nonnull %562, i32 noundef 13, ptr noundef %568) #30
  br label %570

569:                                              ; preds = %556
  tail call fastcc void @predict_jump(i32 noundef 6000)
  br label %570

570:                                              ; preds = %528, %536, %537, %569, %567, %248
  %571 = phi ptr [ %529, %528 ], [ %529, %567 ], [ %529, %569 ], [ %529, %537 ], [ %529, %536 ], [ %1, %248 ]
  %572 = phi ptr [ %213, %528 ], [ %548, %567 ], [ %548, %569 ], [ %213, %537 ], [ %213, %536 ], [ %213, %248 ]
  %573 = phi ptr [ %530, %528 ], [ %530, %567 ], [ %530, %569 ], [ %530, %537 ], [ %530, %536 ], [ %157, %248 ]
  %574 = phi i64 [ %531, %528 ], [ %531, %567 ], [ %531, %569 ], [ %531, %537 ], [ %531, %536 ], [ %64, %248 ]
  %575 = phi ptr [ %532, %528 ], [ %532, %567 ], [ %532, %569 ], [ %532, %537 ], [ %532, %536 ], [ %0, %248 ]
  %576 = icmp ne ptr %572, null
  %577 = icmp eq i32 %126, 1
  %578 = select i1 %576, i1 %577, i1 false
  br i1 %578, label %579, label %582

579:                                              ; preds = %570
  %580 = tail call ptr @emit_label(ptr noundef nonnull %572) #30
  %581 = getelementptr inbounds %struct.rtx_def, ptr %572, i64 0, i32 1, i32 0, i32 2
  store i32 1, ptr %581, align 8, !tbaa !16
  br label %585

582:                                              ; preds = %570
  %583 = icmp eq ptr %572, null
  %584 = select i1 %583, i32 %126, i32 %214
  br label %585

585:                                              ; preds = %582, %579
  %586 = phi ptr [ null, %579 ], [ %572, %582 ]
  %587 = phi i32 [ 1, %579 ], [ %584, %582 ]
  switch i32 %66, label %595 [
    i32 1, label %588
    i32 0, label %588
    i32 5, label %589
    i32 6, label %590
    i32 7, label %591
    i32 4, label %592
    i32 3, label %593
    i32 2, label %594
  ]

588:                                              ; preds = %585, %585
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 18498, ptr noundef nonnull @.str.131) #30
  br label %589

589:                                              ; preds = %585, %588
  tail call fastcc void @expand_set_or_movmem_via_loop(ptr noundef %575, ptr noundef %571, ptr noundef %109, ptr noundef %112, ptr noundef null, ptr noundef %573, i32 noundef 14, i32 noundef 1, i32 noundef %68)
  br label %595

590:                                              ; preds = %585
  tail call fastcc void @expand_set_or_movmem_via_loop(ptr noundef %575, ptr noundef %571, ptr noundef %109, ptr noundef %112, ptr noundef null, ptr noundef %573, i32 noundef 16, i32 noundef 1, i32 noundef %68)
  br label %595

591:                                              ; preds = %585
  tail call fastcc void @expand_set_or_movmem_via_loop(ptr noundef %575, ptr noundef %571, ptr noundef %109, ptr noundef %112, ptr noundef null, ptr noundef %573, i32 noundef 16, i32 noundef 2, i32 noundef %68)
  br label %595

592:                                              ; preds = %585
  tail call fastcc void @expand_movmem_via_rep_mov(ptr noundef %575, ptr noundef %571, ptr noundef %109, ptr noundef %112, ptr noundef %573, i32 noundef 17)
  br label %595

593:                                              ; preds = %585
  tail call fastcc void @expand_movmem_via_rep_mov(ptr noundef %575, ptr noundef %571, ptr noundef %109, ptr noundef %112, ptr noundef %573, i32 noundef 16)
  br label %595

594:                                              ; preds = %585
  tail call fastcc void @expand_movmem_via_rep_mov(ptr noundef %575, ptr noundef %571, ptr noundef %109, ptr noundef %112, ptr noundef %573, i32 noundef 14)
  br label %595

595:                                              ; preds = %585, %594, %593, %592, %591, %590, %589
  %596 = load i32, ptr %573, align 8
  %597 = and i32 %596, 65535
  %598 = icmp eq i32 %597, 30
  br i1 %598, label %599, label %606

599:                                              ; preds = %595
  %600 = zext i32 %126 to i64
  %601 = freeze i64 %574
  %602 = urem i64 %601, %600
  %603 = sub nuw i64 %601, %602
  %604 = tail call ptr @adjust_automodify_address_1(ptr noundef %571, i32 noundef 1, ptr noundef %112, i64 noundef %603, i32 noundef 0) #30
  %605 = tail call ptr @adjust_automodify_address_1(ptr noundef %575, i32 noundef 1, ptr noundef %109, i64 noundef %603, i32 noundef 0) #30
  br label %609

606:                                              ; preds = %595
  %607 = tail call ptr @change_address(ptr noundef %571, i32 noundef 1, ptr noundef %112) #30
  %608 = tail call ptr @change_address(ptr noundef %575, i32 noundef 1, ptr noundef %109) #30
  br label %609

609:                                              ; preds = %599, %606, %227
  %610 = phi ptr [ %604, %599 ], [ %607, %606 ], [ %1, %227 ]
  %611 = phi ptr [ %586, %599 ], [ %586, %606 ], [ %213, %227 ]
  %612 = phi ptr [ %573, %599 ], [ %573, %606 ], [ %229, %227 ]
  %613 = phi ptr [ %249, %599 ], [ %249, %606 ], [ null, %227 ]
  %614 = phi i32 [ %587, %599 ], [ %587, %606 ], [ %214, %227 ]
  %615 = phi ptr [ %605, %599 ], [ %608, %606 ], [ %0, %227 ]
  %616 = icmp eq ptr %611, null
  br i1 %616, label %635, label %617

617:                                              ; preds = %609
  %618 = icmp slt i32 %126, %614
  br i1 %618, label %619, label %632

619:                                              ; preds = %617
  %620 = load i32, ptr %612, align 8
  %621 = lshr i32 %620, 16
  %622 = and i32 %621, 255
  %623 = icmp eq i32 %622, 0
  %624 = select i1 %623, i32 16, i32 %622
  %625 = add nsw i32 %126, -1
  %626 = sext i32 %625 to i64
  %627 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef %626) #30
  %628 = tail call ptr @expand_simple_binop(i32 noundef %624, i32 noundef 61, ptr noundef nonnull %612, ptr noundef %627, ptr noundef nonnull %612, i32 noundef 1, i32 noundef 0) #30
  %629 = icmp eq ptr %628, %612
  br i1 %629, label %632, label %630

630:                                              ; preds = %619
  %631 = tail call ptr @emit_move_insn(ptr noundef nonnull %612, ptr noundef %628) #30
  br label %632

632:                                              ; preds = %619, %630, %617
  %633 = tail call ptr @emit_label(ptr noundef nonnull %611) #30
  %634 = getelementptr inbounds %struct.rtx_def, ptr %611, i64 0, i32 1, i32 0, i32 2
  store i32 1, ptr %634, align 8, !tbaa !16
  br label %635

635:                                              ; preds = %184, %632, %609
  %636 = phi ptr [ %615, %632 ], [ %615, %609 ], [ %0, %184 ]
  %637 = phi i32 [ %614, %632 ], [ %614, %609 ], [ %177, %184 ]
  %638 = phi ptr [ %613, %632 ], [ %613, %609 ], [ null, %184 ]
  %639 = phi ptr [ %612, %632 ], [ %612, %609 ], [ %157, %184 ]
  %640 = phi ptr [ %610, %632 ], [ %610, %609 ], [ %1, %184 ]
  %641 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 64), align 16, !tbaa !5
  %642 = icmp ne ptr %639, %641
  %643 = icmp sgt i32 %637, 1
  %644 = select i1 %642, i1 %643, i1 false
  br i1 %644, label %645, label %794

645:                                              ; preds = %635
  %646 = load i32, ptr %639, align 8
  %647 = and i32 %646, 65535
  %648 = icmp eq i32 %647, 30
  br i1 %648, label %649, label %712

649:                                              ; preds = %645
  %650 = getelementptr inbounds %struct.rtx_def, ptr %639, i64 0, i32 1
  %651 = load i64, ptr %650, align 8, !tbaa !16
  %652 = and i64 %651, 16
  %653 = icmp ne i64 %652, 0
  %654 = icmp ugt i32 %637, 16
  %655 = and i1 %654, %653
  br i1 %655, label %656, label %657

656:                                              ; preds = %649
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 17598, ptr noundef nonnull @.str.131) #30
  br label %657

657:                                              ; preds = %656, %649
  %658 = phi i32 [ 16, %656 ], [ 0, %649 ]
  %659 = and i64 %651, 8
  %660 = icmp ne i64 %659, 0
  %661 = icmp ugt i32 %637, 8
  %662 = and i1 %661, %660
  br i1 %662, label %663, label %676

663:                                              ; preds = %657
  %664 = zext i32 %658 to i64
  %665 = tail call ptr @adjust_automodify_address_1(ptr noundef %640, i32 noundef 16, ptr noundef %112, i64 noundef %664, i32 noundef 0) #30
  %666 = tail call ptr @adjust_automodify_address_1(ptr noundef %636, i32 noundef 16, ptr noundef %109, i64 noundef %664, i32 noundef 0) #30
  %667 = tail call ptr @gen_strmov(ptr noundef %109, ptr noundef %666, ptr noundef %112, ptr noundef %665) #30
  %668 = tail call ptr @emit_insn(ptr noundef %667) #30
  %669 = or i32 %658, 4
  %670 = zext i32 %669 to i64
  %671 = tail call ptr @adjust_automodify_address_1(ptr noundef %640, i32 noundef 16, ptr noundef %112, i64 noundef %670, i32 noundef 0) #30
  %672 = tail call ptr @adjust_automodify_address_1(ptr noundef %636, i32 noundef 16, ptr noundef %109, i64 noundef %670, i32 noundef 0) #30
  %673 = tail call ptr @gen_strmov(ptr noundef %109, ptr noundef %672, ptr noundef %112, ptr noundef %671) #30
  %674 = tail call ptr @emit_insn(ptr noundef %673) #30
  %675 = or i32 %658, 8
  br label %676

676:                                              ; preds = %663, %657
  %677 = phi i32 [ %675, %663 ], [ %658, %657 ]
  %678 = and i64 %651, 4
  %679 = icmp ne i64 %678, 0
  %680 = icmp ugt i32 %637, 4
  %681 = and i1 %680, %679
  br i1 %681, label %682, label %689

682:                                              ; preds = %676
  %683 = zext i32 %677 to i64
  %684 = tail call ptr @adjust_automodify_address_1(ptr noundef %640, i32 noundef 16, ptr noundef %112, i64 noundef %683, i32 noundef 0) #30
  %685 = tail call ptr @adjust_automodify_address_1(ptr noundef %636, i32 noundef 16, ptr noundef %109, i64 noundef %683, i32 noundef 0) #30
  %686 = tail call ptr @gen_strmov(ptr noundef %109, ptr noundef %685, ptr noundef %112, ptr noundef %684) #30
  %687 = tail call ptr @emit_insn(ptr noundef %686) #30
  %688 = add nuw nsw i32 %677, 4
  br label %689

689:                                              ; preds = %682, %676
  %690 = phi i32 [ %688, %682 ], [ %677, %676 ]
  %691 = and i64 %651, 2
  %692 = icmp ne i64 %691, 0
  %693 = icmp ugt i32 %637, 2
  %694 = and i1 %693, %692
  br i1 %694, label %695, label %702

695:                                              ; preds = %689
  %696 = zext i32 %690 to i64
  %697 = tail call ptr @adjust_automodify_address_1(ptr noundef %640, i32 noundef 15, ptr noundef %112, i64 noundef %696, i32 noundef 0) #30
  %698 = tail call ptr @adjust_automodify_address_1(ptr noundef %636, i32 noundef 15, ptr noundef %109, i64 noundef %696, i32 noundef 0) #30
  %699 = tail call ptr @gen_strmov(ptr noundef %109, ptr noundef %698, ptr noundef %112, ptr noundef %697) #30
  %700 = tail call ptr @emit_insn(ptr noundef %699) #30
  %701 = add nuw nsw i32 %690, 2
  br label %702

702:                                              ; preds = %695, %689
  %703 = phi i32 [ %701, %695 ], [ %690, %689 ]
  %704 = and i64 %651, 1
  %705 = icmp eq i64 %704, 0
  br i1 %705, label %794, label %706

706:                                              ; preds = %702
  %707 = zext i32 %703 to i64
  %708 = tail call ptr @adjust_automodify_address_1(ptr noundef %640, i32 noundef 14, ptr noundef %112, i64 noundef %707, i32 noundef 0) #30
  %709 = tail call ptr @adjust_automodify_address_1(ptr noundef %636, i32 noundef 14, ptr noundef %109, i64 noundef %707, i32 noundef 0) #30
  %710 = tail call ptr @gen_strmov(ptr noundef %109, ptr noundef %709, ptr noundef %112, ptr noundef %708) #30
  %711 = tail call ptr @emit_insn(ptr noundef %710) #30
  br label %794

712:                                              ; preds = %645
  %713 = icmp ugt i32 %637, 8
  br i1 %713, label %714, label %721

714:                                              ; preds = %712
  %715 = lshr i32 %646, 16
  %716 = and i32 %715, 255
  %717 = add nsw i32 %637, -1
  %718 = zext i32 %717 to i64
  %719 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef %718) #30
  %720 = tail call ptr @expand_simple_binop(i32 noundef %716, i32 noundef 61, ptr noundef nonnull %639, ptr noundef %719, ptr noundef nonnull %639, i32 noundef 1, i32 noundef 0) #30
  tail call fastcc void @expand_set_or_movmem_via_loop(ptr noundef %636, ptr noundef %640, ptr noundef %109, ptr noundef %112, ptr noundef null, ptr noundef %720, i32 noundef 14, i32 noundef 1, i32 noundef 4)
  br label %794

721:                                              ; preds = %712
  %722 = load i8, ptr getelementptr inbounds ([62 x i8], ptr @ix86_tune_features, i64 0, i64 21), align 1, !tbaa !16
  %723 = icmp eq i8 %722, 0
  br i1 %723, label %752, label %724

724:                                              ; preds = %721
  %725 = icmp ugt i32 %637, 4
  br i1 %725, label %726, label %734

726:                                              ; preds = %724
  %727 = tail call fastcc ptr @ix86_expand_aligntest(ptr noundef nonnull %639, i32 noundef 4, i8 noundef zeroext 1)
  %728 = tail call ptr @change_address(ptr noundef %640, i32 noundef 16, ptr noundef %112) #30
  %729 = tail call ptr @change_address(ptr noundef %636, i32 noundef 16, ptr noundef %109) #30
  %730 = tail call ptr @gen_strmov(ptr noundef %109, ptr noundef %729, ptr noundef %112, ptr noundef %728) #30
  %731 = tail call ptr @emit_insn(ptr noundef %730) #30
  %732 = tail call ptr @emit_label(ptr noundef %727) #30
  %733 = getelementptr inbounds %struct.rtx_def, ptr %727, i64 0, i32 1, i32 0, i32 2
  store i32 1, ptr %733, align 8, !tbaa !16
  br label %736

734:                                              ; preds = %724
  %735 = icmp ugt i32 %637, 2
  br i1 %735, label %736, label %744

736:                                              ; preds = %734, %726
  %737 = tail call fastcc ptr @ix86_expand_aligntest(ptr noundef nonnull %639, i32 noundef 2, i8 noundef zeroext 1)
  %738 = tail call ptr @change_address(ptr noundef %640, i32 noundef 15, ptr noundef %112) #30
  %739 = tail call ptr @change_address(ptr noundef %636, i32 noundef 15, ptr noundef %109) #30
  %740 = tail call ptr @gen_strmov(ptr noundef %109, ptr noundef %739, ptr noundef %112, ptr noundef %738) #30
  %741 = tail call ptr @emit_insn(ptr noundef %740) #30
  %742 = tail call ptr @emit_label(ptr noundef %737) #30
  %743 = getelementptr inbounds %struct.rtx_def, ptr %737, i64 0, i32 1, i32 0, i32 2
  store i32 1, ptr %743, align 8, !tbaa !16
  br label %744

744:                                              ; preds = %736, %734
  %745 = tail call fastcc ptr @ix86_expand_aligntest(ptr noundef nonnull %639, i32 noundef 1, i8 noundef zeroext 1)
  %746 = tail call ptr @change_address(ptr noundef %640, i32 noundef 14, ptr noundef %112) #30
  %747 = tail call ptr @change_address(ptr noundef %636, i32 noundef 14, ptr noundef %109) #30
  %748 = tail call ptr @gen_strmov(ptr noundef %109, ptr noundef %747, ptr noundef %112, ptr noundef %746) #30
  %749 = tail call ptr @emit_insn(ptr noundef %748) #30
  %750 = tail call ptr @emit_label(ptr noundef %745) #30
  %751 = getelementptr inbounds %struct.rtx_def, ptr %745, i64 0, i32 1, i32 0, i32 2
  store i32 1, ptr %751, align 8, !tbaa !16
  br label %794

752:                                              ; preds = %721
  %753 = tail call ptr @force_reg(i32 noundef 16, ptr noundef %641) #30
  %754 = icmp ugt i32 %637, 4
  br i1 %754, label %755, label %768

755:                                              ; preds = %752
  %756 = tail call fastcc ptr @ix86_expand_aligntest(ptr noundef nonnull %639, i32 noundef 4, i8 noundef zeroext 1)
  %757 = tail call ptr @change_address(ptr noundef %640, i32 noundef 16, ptr noundef %112) #30
  %758 = tail call ptr @change_address(ptr noundef %636, i32 noundef 16, ptr noundef %109) #30
  %759 = tail call ptr @emit_move_insn(ptr noundef %758, ptr noundef %757) #30
  %760 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef 4) #30
  %761 = tail call ptr @expand_simple_binop(i32 noundef 16, i32 noundef 49, ptr noundef %753, ptr noundef %760, ptr noundef null, i32 noundef 1, i32 noundef 3) #30
  %762 = icmp eq ptr %761, %753
  br i1 %762, label %765, label %763

763:                                              ; preds = %755
  %764 = tail call ptr @emit_move_insn(ptr noundef %753, ptr noundef %761) #30
  br label %765

765:                                              ; preds = %763, %755
  %766 = tail call ptr @emit_label(ptr noundef %756) #30
  %767 = getelementptr inbounds %struct.rtx_def, ptr %756, i64 0, i32 1, i32 0, i32 2
  store i32 1, ptr %767, align 8, !tbaa !16
  br label %770

768:                                              ; preds = %752
  %769 = icmp ugt i32 %637, 2
  br i1 %769, label %770, label %785

770:                                              ; preds = %768, %765
  %771 = tail call fastcc ptr @ix86_expand_aligntest(ptr noundef nonnull %639, i32 noundef 2, i8 noundef zeroext 1)
  %772 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 49, i32 noundef 16, ptr noundef %112, ptr noundef %753) #30
  %773 = tail call ptr @change_address(ptr noundef %640, i32 noundef 15, ptr noundef %772) #30
  %774 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 49, i32 noundef 16, ptr noundef %109, ptr noundef %753) #30
  %775 = tail call ptr @change_address(ptr noundef %636, i32 noundef 15, ptr noundef %774) #30
  %776 = tail call ptr @emit_move_insn(ptr noundef %775, ptr noundef %773) #30
  %777 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef 2) #30
  %778 = tail call ptr @expand_simple_binop(i32 noundef 16, i32 noundef 49, ptr noundef %753, ptr noundef %777, ptr noundef %774, i32 noundef 1, i32 noundef 3) #30
  %779 = icmp eq ptr %778, %753
  br i1 %779, label %782, label %780

780:                                              ; preds = %770
  %781 = tail call ptr @emit_move_insn(ptr noundef %753, ptr noundef %778) #30
  br label %782

782:                                              ; preds = %780, %770
  %783 = tail call ptr @emit_label(ptr noundef %771) #30
  %784 = getelementptr inbounds %struct.rtx_def, ptr %771, i64 0, i32 1, i32 0, i32 2
  store i32 1, ptr %784, align 8, !tbaa !16
  br label %785

785:                                              ; preds = %782, %768
  %786 = tail call fastcc ptr @ix86_expand_aligntest(ptr noundef nonnull %639, i32 noundef 1, i8 noundef zeroext 1)
  %787 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 49, i32 noundef 16, ptr noundef %112, ptr noundef %753) #30
  %788 = tail call ptr @change_address(ptr noundef %640, i32 noundef 14, ptr noundef %787) #30
  %789 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 49, i32 noundef 16, ptr noundef %109, ptr noundef %753) #30
  %790 = tail call ptr @change_address(ptr noundef %636, i32 noundef 14, ptr noundef %789) #30
  %791 = tail call ptr @emit_move_insn(ptr noundef %790, ptr noundef %788) #30
  %792 = tail call ptr @emit_label(ptr noundef %786) #30
  %793 = getelementptr inbounds %struct.rtx_def, ptr %786, i64 0, i32 1, i32 0, i32 2
  store i32 1, ptr %793, align 8, !tbaa !16
  br label %794

794:                                              ; preds = %785, %744, %714, %706, %702, %635
  %795 = icmp eq ptr %638, null
  br i1 %795, label %798, label %796

796:                                              ; preds = %794
  %797 = tail call ptr @emit_label(ptr noundef nonnull %638) #30
  br label %798

798:                                              ; preds = %62, %794, %796, %83, %60
  %799 = phi i32 [ 0, %60 ], [ 0, %83 ], [ 1, %796 ], [ 1, %794 ], [ 0, %62 ]
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %7) #30
  ret i32 %799
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc i32 @decide_alg(i64 noundef %0, i64 noundef %1, i8 noundef zeroext %2, ptr nocapture noundef %3) unnamed_addr #9 {
  %5 = load i8, ptr getelementptr inbounds ([53 x i8], ptr @fixed_regs, i64 0, i64 2), align 2, !tbaa !16
  %6 = icmp ne i8 %5, 0
  %7 = load i8, ptr getelementptr inbounds ([53 x i8], ptr @fixed_regs, i64 0, i64 5), align 1
  %8 = icmp ne i8 %7, 0
  %9 = select i1 %6, i1 true, i1 %8
  br i1 %9, label %16, label %10

10:                                               ; preds = %4
  %11 = icmp eq i8 %2, 0
  %12 = load i8, ptr @fixed_regs, align 16
  %13 = load i8, ptr getelementptr inbounds ([53 x i8], ptr @fixed_regs, i64 0, i64 4), align 4
  %14 = select i1 %11, i8 %13, i8 %12
  %15 = icmp ne i8 %14, 0
  br label %16

16:                                               ; preds = %10, %4
  %17 = phi i1 [ true, %4 ], [ %15, %10 ]
  %18 = freeze i1 %17
  %19 = load ptr, ptr @cfun, align 8, !tbaa !5
  %20 = tail call zeroext i8 @optimize_function_for_size_p(ptr noundef %19) #30
  %21 = icmp eq i8 %20, 0
  br i1 %21, label %22, label %31

22:                                               ; preds = %16
  %23 = tail call zeroext i8 @optimize_insn_for_size_p() #30
  %24 = freeze i8 %23
  %25 = icmp ne i8 %24, 0
  %26 = icmp ne i64 %1, -1
  %27 = and i1 %26, %25
  %28 = icmp slt i64 %1, 256
  %29 = and i1 %28, %27
  %30 = load ptr, ptr @ix86_cost, align 8
  br i1 %29, label %31, label %32

31:                                               ; preds = %16, %22
  br label %32

32:                                               ; preds = %22, %31
  %33 = phi i1 [ true, %31 ], [ false, %22 ]
  %34 = phi ptr [ @ix86_size_cost, %31 ], [ %30, %22 ]
  store i32 -1, ptr %3, align 4, !tbaa !20
  %35 = icmp eq i8 %2, 0
  %36 = getelementptr inbounds %struct.processor_costs, ptr %34, i64 0, i32 36
  %37 = getelementptr inbounds %struct.processor_costs, ptr %34, i64 0, i32 35
  %38 = select i1 %35, ptr %37, ptr %36
  %39 = load i32, ptr @stringop_alg, align 4
  %40 = icmp eq i32 %39, 0
  br i1 %40, label %45, label %41

41:                                               ; preds = %32
  %42 = add i32 %39, -2
  %43 = icmp ult i32 %42, 3
  %44 = and i1 %18, %43
  br i1 %44, label %45, label %334

45:                                               ; preds = %41, %32
  br i1 %33, label %46, label %55

46:                                               ; preds = %45
  %47 = icmp ne i64 %0, 0
  %48 = and i64 %0, 3
  %49 = icmp eq i64 %48, 0
  %50 = and i1 %47, %49
  br i1 %50, label %53, label %51

51:                                               ; preds = %46
  %52 = select i1 %18, i32 5, i32 2
  br label %334

53:                                               ; preds = %46
  %54 = select i1 %18, i32 6, i32 3
  br label %334

55:                                               ; preds = %45
  %56 = icmp ne i64 %1, -1
  %57 = icmp slt i64 %1, 4
  %58 = and i1 %56, %57
  br i1 %58, label %334, label %59

59:                                               ; preds = %55
  %60 = load i32, ptr @target_flags, align 4
  %61 = freeze i32 %60
  br i1 %56, label %62, label %207

62:                                               ; preds = %59
  %63 = and i32 %61, 256
  %64 = icmp eq i32 %63, 0
  %65 = getelementptr inbounds %struct.stringop_algs, ptr %38, i64 0, i32 1, i64 0
  %66 = load i32, ptr %65, align 4, !tbaa !256
  %67 = icmp eq i32 %66, 0
  br i1 %64, label %69, label %68

68:                                               ; preds = %62
  br i1 %67, label %201, label %160

69:                                               ; preds = %62
  br i1 %18, label %71, label %70

70:                                               ; preds = %69
  br i1 %67, label %201, label %72

71:                                               ; preds = %69
  br i1 %67, label %214, label %108

72:                                               ; preds = %70
  %73 = sext i32 %66 to i64
  %74 = icmp sge i64 %73, %1
  %75 = icmp eq i32 %66, -1
  %76 = or i1 %75, %74
  br i1 %76, label %77, label %81

77:                                               ; preds = %103, %94, %85, %72
  %78 = phi i64 [ 0, %72 ], [ 1, %85 ], [ 2, %94 ], [ 3, %103 ]
  %79 = getelementptr inbounds %struct.stringop_algs, ptr %38, i64 0, i32 1, i64 %78, i32 1
  %80 = load i32, ptr %79, align 4, !tbaa !258
  br label %334

81:                                               ; preds = %72
  %82 = getelementptr inbounds %struct.stringop_algs, ptr %38, i64 0, i32 1, i64 1
  %83 = load i32, ptr %82, align 4, !tbaa !256
  %84 = icmp eq i32 %83, 0
  br i1 %84, label %201, label %85

85:                                               ; preds = %81
  %86 = sext i32 %83 to i64
  %87 = icmp sge i64 %86, %1
  %88 = icmp eq i32 %83, -1
  %89 = or i1 %88, %87
  br i1 %89, label %77, label %90

90:                                               ; preds = %85
  %91 = getelementptr inbounds %struct.stringop_algs, ptr %38, i64 0, i32 1, i64 2
  %92 = load i32, ptr %91, align 4, !tbaa !256
  %93 = icmp eq i32 %92, 0
  br i1 %93, label %201, label %94

94:                                               ; preds = %90
  %95 = sext i32 %92 to i64
  %96 = icmp sge i64 %95, %1
  %97 = icmp eq i32 %92, -1
  %98 = or i1 %97, %96
  br i1 %98, label %77, label %99

99:                                               ; preds = %94
  %100 = getelementptr inbounds %struct.stringop_algs, ptr %38, i64 0, i32 1, i64 3
  %101 = load i32, ptr %100, align 4, !tbaa !256
  %102 = icmp eq i32 %101, 0
  br i1 %102, label %201, label %103

103:                                              ; preds = %99
  %104 = sext i32 %101 to i64
  %105 = icmp sge i64 %104, %1
  %106 = icmp eq i32 %101, -1
  %107 = or i1 %106, %105
  br i1 %107, label %77, label %201

108:                                              ; preds = %71
  %109 = sext i32 %66 to i64
  %110 = icmp sge i64 %109, %1
  %111 = icmp eq i32 %66, -1
  %112 = or i1 %111, %110
  br i1 %112, label %113, label %118

113:                                              ; preds = %108
  %114 = getelementptr inbounds %struct.stringop_algs, ptr %38, i64 0, i32 1, i64 0, i32 1
  %115 = load i32, ptr %114, align 4, !tbaa !258
  %116 = add i32 %115, -2
  %117 = icmp ult i32 %116, 3
  br i1 %117, label %118, label %334

118:                                              ; preds = %113, %108
  %119 = getelementptr inbounds %struct.stringop_algs, ptr %38, i64 0, i32 1, i64 1
  %120 = load i32, ptr %119, align 4, !tbaa !256
  %121 = icmp eq i32 %120, 0
  br i1 %121, label %214, label %122

122:                                              ; preds = %118
  %123 = sext i32 %120 to i64
  %124 = icmp sge i64 %123, %1
  %125 = icmp eq i32 %120, -1
  %126 = or i1 %125, %124
  br i1 %126, label %127, label %132

127:                                              ; preds = %122
  %128 = getelementptr inbounds %struct.stringop_algs, ptr %38, i64 0, i32 1, i64 1, i32 1
  %129 = load i32, ptr %128, align 4, !tbaa !258
  %130 = add i32 %129, -2
  %131 = icmp ult i32 %130, 3
  br i1 %131, label %132, label %334

132:                                              ; preds = %127, %122
  %133 = getelementptr inbounds %struct.stringop_algs, ptr %38, i64 0, i32 1, i64 2
  %134 = load i32, ptr %133, align 4, !tbaa !256
  %135 = icmp eq i32 %134, 0
  br i1 %135, label %214, label %136

136:                                              ; preds = %132
  %137 = sext i32 %134 to i64
  %138 = icmp sge i64 %137, %1
  %139 = icmp eq i32 %134, -1
  %140 = or i1 %139, %138
  br i1 %140, label %141, label %146

141:                                              ; preds = %136
  %142 = getelementptr inbounds %struct.stringop_algs, ptr %38, i64 0, i32 1, i64 2, i32 1
  %143 = load i32, ptr %142, align 4, !tbaa !258
  %144 = add i32 %143, -2
  %145 = icmp ult i32 %144, 3
  br i1 %145, label %146, label %334

146:                                              ; preds = %141, %136
  %147 = getelementptr inbounds %struct.stringop_algs, ptr %38, i64 0, i32 1, i64 3
  %148 = load i32, ptr %147, align 4, !tbaa !256
  %149 = icmp eq i32 %148, 0
  br i1 %149, label %214, label %150

150:                                              ; preds = %146
  %151 = sext i32 %148 to i64
  %152 = icmp sge i64 %151, %1
  %153 = icmp eq i32 %148, -1
  %154 = or i1 %153, %152
  br i1 %154, label %155, label %214

155:                                              ; preds = %150
  %156 = getelementptr inbounds %struct.stringop_algs, ptr %38, i64 0, i32 1, i64 3, i32 1
  %157 = load i32, ptr %156, align 4, !tbaa !258
  %158 = add i32 %157, -2
  %159 = icmp ult i32 %158, 3
  br i1 %159, label %214, label %334

160:                                              ; preds = %68
  %161 = sext i32 %66 to i64
  %162 = icmp sge i64 %161, %1
  %163 = icmp eq i32 %66, -1
  %164 = or i1 %163, %162
  br i1 %164, label %165, label %174

165:                                              ; preds = %196, %187, %178, %160
  %166 = phi i64 [ 0, %160 ], [ 1, %178 ], [ 2, %187 ], [ 3, %196 ]
  %167 = getelementptr inbounds %struct.stringop_algs, ptr %38, i64 0, i32 1, i64 %166, i32 1
  %168 = load i32, ptr %167, align 4, !tbaa !258
  %169 = icmp eq i32 %168, 1
  %170 = add i32 %168, -2
  %171 = icmp ult i32 %170, 3
  %172 = and i1 %18, %171
  %173 = or i1 %169, %172
  br i1 %173, label %201, label %334

174:                                              ; preds = %160
  %175 = getelementptr inbounds %struct.stringop_algs, ptr %38, i64 0, i32 1, i64 1
  %176 = load i32, ptr %175, align 4, !tbaa !256
  %177 = icmp eq i32 %176, 0
  br i1 %177, label %201, label %178

178:                                              ; preds = %174
  %179 = sext i32 %176 to i64
  %180 = icmp sge i64 %179, %1
  %181 = icmp eq i32 %176, -1
  %182 = or i1 %181, %180
  br i1 %182, label %165, label %183

183:                                              ; preds = %178
  %184 = getelementptr inbounds %struct.stringop_algs, ptr %38, i64 0, i32 1, i64 2
  %185 = load i32, ptr %184, align 4, !tbaa !256
  %186 = icmp eq i32 %185, 0
  br i1 %186, label %201, label %187

187:                                              ; preds = %183
  %188 = sext i32 %185 to i64
  %189 = icmp sge i64 %188, %1
  %190 = icmp eq i32 %185, -1
  %191 = or i1 %190, %189
  br i1 %191, label %165, label %192

192:                                              ; preds = %187
  %193 = getelementptr inbounds %struct.stringop_algs, ptr %38, i64 0, i32 1, i64 3
  %194 = load i32, ptr %193, align 4, !tbaa !256
  %195 = icmp eq i32 %194, 0
  br i1 %195, label %201, label %196

196:                                              ; preds = %192
  %197 = sext i32 %194 to i64
  %198 = icmp sge i64 %197, %1
  %199 = icmp eq i32 %194, -1
  %200 = or i1 %199, %198
  br i1 %200, label %165, label %201

201:                                              ; preds = %68, %174, %183, %192, %196, %70, %81, %90, %99, %103, %165
  %202 = and i32 %61, 256
  %203 = icmp ne i32 %202, 0
  %204 = or i1 %203, %18
  br i1 %204, label %207, label %205

205:                                              ; preds = %201
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 18140, ptr noundef nonnull @.str.131) #30
  %206 = load i32, ptr @target_flags, align 4, !tbaa !20
  br label %207

207:                                              ; preds = %205, %201, %59
  %208 = phi i32 [ %206, %205 ], [ %61, %201 ], [ %61, %59 ]
  %209 = and i32 %208, 512
  %210 = icmp eq i32 %209, 0
  %211 = and i32 %208, 768
  %212 = icmp eq i32 %211, 0
  %213 = load i32, ptr %38, align 4, !tbaa !259
  br i1 %212, label %327, label %218

214:                                              ; preds = %150, %155, %146, %132, %118, %71
  %215 = and i32 %61, 768
  %216 = icmp eq i32 %215, 0
  %217 = load i32, ptr %38, align 4, !tbaa !259
  br i1 %216, label %328, label %220

218:                                              ; preds = %207
  %219 = icmp eq i32 %213, 1
  br i1 %219, label %230, label %224

220:                                              ; preds = %214
  %221 = and i32 %61, 512
  %222 = icmp eq i32 %221, 0
  %223 = icmp eq i32 %217, 1
  br i1 %223, label %235, label %225

224:                                              ; preds = %218
  br i1 %18, label %225, label %332

225:                                              ; preds = %220, %224
  %226 = phi i1 [ %210, %224 ], [ %222, %220 ]
  %227 = phi i32 [ %213, %224 ], [ %217, %220 ]
  %228 = add i32 %227, -2
  %229 = icmp ult i32 %228, 3
  br i1 %229, label %235, label %332

230:                                              ; preds = %218
  br i1 %18, label %235, label %231

231:                                              ; preds = %230
  %232 = getelementptr inbounds %struct.stringop_algs, ptr %38, i64 0, i32 1, i64 0, i32 1
  %233 = load i32, ptr %232, align 4, !tbaa !258
  %234 = icmp ugt i32 %233, 1
  br i1 %234, label %242, label %245

235:                                              ; preds = %220, %225, %230
  %236 = phi i1 [ %210, %230 ], [ %226, %225 ], [ %222, %220 ]
  %237 = getelementptr inbounds %struct.stringop_algs, ptr %38, i64 0, i32 1, i64 0, i32 1
  %238 = load i32, ptr %237, align 4, !tbaa !258
  %239 = add i32 %238, -5
  %240 = icmp ult i32 %239, -3
  %241 = icmp ult i32 %238, 5
  br i1 %241, label %272, label %269

242:                                              ; preds = %231
  %243 = getelementptr inbounds %struct.stringop_algs, ptr %38, i64 0, i32 1, i64 0
  %244 = load i32, ptr %243, align 4, !tbaa !256
  br label %245

245:                                              ; preds = %242, %231
  %246 = phi i32 [ %244, %242 ], [ -1, %231 ]
  %247 = getelementptr inbounds %struct.stringop_algs, ptr %38, i64 0, i32 1, i64 1, i32 1
  %248 = load i32, ptr %247, align 4, !tbaa !258
  %249 = icmp ugt i32 %248, 1
  br i1 %249, label %250, label %253

250:                                              ; preds = %245
  %251 = getelementptr inbounds %struct.stringop_algs, ptr %38, i64 0, i32 1, i64 1
  %252 = load i32, ptr %251, align 4, !tbaa !256
  br label %253

253:                                              ; preds = %250, %245
  %254 = phi i32 [ %252, %250 ], [ %246, %245 ]
  %255 = getelementptr inbounds %struct.stringop_algs, ptr %38, i64 0, i32 1, i64 2, i32 1
  %256 = load i32, ptr %255, align 4, !tbaa !258
  %257 = icmp ugt i32 %256, 1
  br i1 %257, label %258, label %261

258:                                              ; preds = %253
  %259 = getelementptr inbounds %struct.stringop_algs, ptr %38, i64 0, i32 1, i64 2
  %260 = load i32, ptr %259, align 4, !tbaa !256
  br label %261

261:                                              ; preds = %258, %253
  %262 = phi i32 [ %260, %258 ], [ %254, %253 ]
  %263 = getelementptr inbounds %struct.stringop_algs, ptr %38, i64 0, i32 1, i64 3, i32 1
  %264 = load i32, ptr %263, align 4, !tbaa !258
  %265 = icmp ugt i32 %264, 1
  br i1 %265, label %266, label %309

266:                                              ; preds = %261
  %267 = getelementptr inbounds %struct.stringop_algs, ptr %38, i64 0, i32 1, i64 3
  %268 = load i32, ptr %267, align 4, !tbaa !256
  br label %309

269:                                              ; preds = %235
  %270 = getelementptr inbounds %struct.stringop_algs, ptr %38, i64 0, i32 1, i64 0
  %271 = load i32, ptr %270, align 4, !tbaa !256
  br label %272

272:                                              ; preds = %235, %269
  %273 = phi i32 [ %271, %269 ], [ -1, %235 ]
  %274 = getelementptr inbounds %struct.stringop_algs, ptr %38, i64 0, i32 1, i64 1, i32 1
  %275 = load i32, ptr %274, align 4, !tbaa !258
  %276 = add i32 %275, -5
  %277 = icmp ult i32 %276, -3
  %278 = and i1 %240, %277
  %279 = icmp ult i32 %275, 5
  br i1 %279, label %283, label %280

280:                                              ; preds = %272
  %281 = getelementptr inbounds %struct.stringop_algs, ptr %38, i64 0, i32 1, i64 1
  %282 = load i32, ptr %281, align 4, !tbaa !256
  br label %283

283:                                              ; preds = %280, %272
  %284 = phi i32 [ %282, %280 ], [ %273, %272 ]
  %285 = getelementptr inbounds %struct.stringop_algs, ptr %38, i64 0, i32 1, i64 2, i32 1
  %286 = load i32, ptr %285, align 4, !tbaa !258
  %287 = add i32 %286, -5
  %288 = icmp ult i32 %287, -3
  %289 = and i1 %278, %288
  %290 = icmp ult i32 %286, 5
  br i1 %290, label %294, label %291

291:                                              ; preds = %283
  %292 = getelementptr inbounds %struct.stringop_algs, ptr %38, i64 0, i32 1, i64 2
  %293 = load i32, ptr %292, align 4, !tbaa !256
  br label %294

294:                                              ; preds = %291, %283
  %295 = phi i32 [ %293, %291 ], [ %284, %283 ]
  %296 = getelementptr inbounds %struct.stringop_algs, ptr %38, i64 0, i32 1, i64 3, i32 1
  %297 = load i32, ptr %296, align 4, !tbaa !258
  %298 = add i32 %297, -5
  %299 = icmp ult i32 %298, -3
  %300 = and i1 %289, %299
  %301 = icmp ult i32 %297, 5
  br i1 %301, label %305, label %302

302:                                              ; preds = %294
  %303 = getelementptr inbounds %struct.stringop_algs, ptr %38, i64 0, i32 1, i64 3
  %304 = load i32, ptr %303, align 4, !tbaa !256
  br label %305

305:                                              ; preds = %294, %302
  %306 = phi i32 [ %304, %302 ], [ %295, %294 ]
  br i1 %300, label %309, label %307

307:                                              ; preds = %305
  br i1 %236, label %334, label %308

308:                                              ; preds = %307
  store i32 128, ptr %3, align 4, !tbaa !20
  br label %334

309:                                              ; preds = %261, %266, %305
  %310 = phi i32 [ %306, %305 ], [ %262, %261 ], [ %268, %266 ]
  %311 = icmp eq i32 %310, -1
  %312 = select i1 %311, i32 4096, i32 %310
  %313 = sdiv i32 %312, 2
  %314 = sext i32 %313 to i64
  %315 = tail call fastcc i32 @decide_alg(i64 noundef %0, i64 noundef %314, i8 noundef zeroext %2, ptr noundef nonnull %3)
  %316 = load i32, ptr %3, align 4, !tbaa !20
  %317 = icmp eq i32 %316, -1
  br i1 %317, label %319, label %318

318:                                              ; preds = %309
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 18179, ptr noundef nonnull @.str.131) #30
  br label %319

319:                                              ; preds = %309, %318
  %320 = icmp eq i32 %315, 1
  br i1 %320, label %321, label %322

321:                                              ; preds = %319
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 18180, ptr noundef nonnull @.str.131) #30
  br label %322

322:                                              ; preds = %319, %321
  %323 = load i32, ptr @target_flags, align 4, !tbaa !20
  %324 = and i32 %323, 512
  %325 = icmp eq i32 %324, 0
  br i1 %325, label %334, label %326

326:                                              ; preds = %322
  store i32 %312, ptr %3, align 4, !tbaa !20
  br label %334

327:                                              ; preds = %207
  br i1 %18, label %328, label %332

328:                                              ; preds = %214, %327
  %329 = phi i32 [ %213, %327 ], [ %217, %214 ]
  %330 = add i32 %329, -2
  %331 = icmp ult i32 %330, 3
  br i1 %331, label %334, label %332

332:                                              ; preds = %225, %328, %224, %327
  %333 = phi i32 [ %329, %328 ], [ %213, %224 ], [ %213, %327 ], [ %227, %225 ]
  br label %334

334:                                              ; preds = %113, %127, %141, %155, %77, %165, %41, %328, %332, %308, %307, %326, %322, %55, %53, %51
  %335 = phi i32 [ %52, %51 ], [ %54, %53 ], [ 5, %55 ], [ 5, %308 ], [ 5, %307 ], [ %315, %326 ], [ %315, %322 ], [ %333, %332 ], [ 1, %328 ], [ %39, %41 ], [ %168, %165 ], [ %80, %77 ], [ %115, %113 ], [ %129, %127 ], [ %143, %141 ], [ %157, %155 ]
  ret i32 %335
}

declare i32 @get_mem_align_offset(ptr noundef, i32 noundef) local_unnamed_addr #3

declare void @emit_cmp_and_jump_insns(ptr noundef, ptr noundef, i32 noundef, ptr noundef, i32 noundef, i32 noundef, ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc void @predict_jump(i32 noundef %0) unnamed_addr #9 {
  %2 = tail call ptr @get_last_insn() #30
  %3 = load i32, ptr %2, align 8
  %4 = and i32 %3, 65535
  %5 = icmp eq i32 %4, 9
  br i1 %5, label %7, label %6

6:                                                ; preds = %1
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 17264, ptr noundef nonnull @.str.131) #30
  br label %7

7:                                                ; preds = %1, %6
  %8 = sext i32 %0 to i64
  %9 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef %8) #30
  tail call void @add_reg_note(ptr noundef nonnull %2, i32 noundef 13, ptr noundef %9) #30
  ret void
}

declare ptr @emit_block_move_via_libcall(ptr noundef, ptr noundef, ptr noundef, i8 noundef zeroext) local_unnamed_addr #3

declare void @emit_jump(ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc void @expand_set_or_movmem_via_loop(ptr noundef %0, ptr noundef %1, ptr noundef %2, ptr noundef %3, ptr noundef %4, ptr noundef %5, i32 noundef %6, i32 noundef %7, i32 noundef %8) unnamed_addr #9 {
  %10 = alloca [4 x ptr], align 16
  %11 = load i32, ptr %5, align 8
  %12 = lshr i32 %11, 16
  %13 = and i32 %12, 255
  %14 = icmp eq i32 %13, 0
  %15 = select i1 %14, i32 16, i32 %13
  %16 = zext i32 %6 to i64
  %17 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %16
  %18 = load i8, ptr %17, align 1, !tbaa !16
  %19 = zext i8 %18 to i32
  %20 = mul nuw nsw i32 %19, %7
  %21 = zext i32 %20 to i64
  %22 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef %21) #30
  %23 = load i8, ptr %17, align 1, !tbaa !16
  %24 = zext i8 %23 to i32
  %25 = mul i32 %24, %7
  %26 = sub i32 0, %25
  %27 = sext i32 %26 to i64
  %28 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef %27) #30
  %29 = tail call ptr @gen_label_rtx() #30
  %30 = tail call ptr @gen_label_rtx() #30
  %31 = tail call ptr @gen_reg_rtx(i32 noundef %15) #30
  %32 = tail call ptr @expand_simple_binop(i32 noundef %15, i32 noundef 61, ptr noundef nonnull %5, ptr noundef %28, ptr noundef null, i32 noundef 1, i32 noundef 0) #30
  %33 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 65), align 8, !tbaa !5
  %34 = icmp eq ptr %22, %33
  br i1 %34, label %35, label %44

35:                                               ; preds = %9
  %36 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 64), align 16, !tbaa !5
  tail call void @emit_cmp_and_jump_insns(ptr noundef %32, ptr noundef %36, i32 noundef 81, ptr noundef null, i32 noundef %15, i32 noundef 1, ptr noundef %30) #30
  %37 = tail call ptr @get_last_insn() #30
  %38 = load i32, ptr %37, align 8
  %39 = and i32 %38, 65535
  %40 = icmp eq i32 %39, 9
  br i1 %40, label %42, label %41

41:                                               ; preds = %35
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 17264, ptr noundef nonnull @.str.131) #30
  br label %42

42:                                               ; preds = %35, %41
  %43 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef 1000) #30
  tail call void @add_reg_note(ptr noundef nonnull %37, i32 noundef 13, ptr noundef %43) #30
  br label %44

44:                                               ; preds = %42, %9
  %45 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 64), align 16, !tbaa !5
  %46 = tail call ptr @emit_move_insn(ptr noundef %31, ptr noundef %45) #30
  %47 = tail call ptr @emit_label(ptr noundef %29) #30
  %48 = tail call ptr @convert_modes(i32 noundef 16, i32 noundef %15, ptr noundef %31, i32 noundef 1) #30
  %49 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 49, i32 noundef 16, ptr noundef %2, ptr noundef %48) #30
  %50 = tail call ptr @change_address(ptr noundef %0, i32 noundef %6, ptr noundef %49) #30
  %51 = icmp eq ptr %1, null
  br i1 %51, label %52, label %57

52:                                               ; preds = %44
  %53 = icmp sgt i32 %7, 0
  br i1 %53, label %54, label %109

54:                                               ; preds = %52
  %55 = tail call ptr @emit_move_insn(ptr noundef %50, ptr noundef %4) #30
  %56 = icmp eq i32 %7, 1
  br i1 %56, label %109, label %99

57:                                               ; preds = %44
  %58 = tail call ptr @copy_rtx(ptr noundef %48) #30
  %59 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 49, i32 noundef 16, ptr noundef %3, ptr noundef %58) #30
  %60 = tail call ptr @change_address(ptr noundef nonnull %1, i32 noundef %6, ptr noundef %59) #30
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %10) #30
  %61 = icmp sgt i32 %7, 0
  br i1 %61, label %62, label %98

62:                                               ; preds = %57
  %63 = zext i32 %7 to i64
  %64 = tail call ptr @gen_reg_rtx(i32 noundef %6) #30
  %65 = tail call ptr @emit_move_insn(ptr noundef %64, ptr noundef %60) #30
  %66 = icmp eq i32 %7, 1
  br i1 %66, label %67, label %74

67:                                               ; preds = %62
  %68 = tail call ptr @emit_move_insn(ptr noundef %50, ptr noundef %64) #30
  br label %98

69:                                               ; preds = %74
  br i1 %61, label %70, label %98

70:                                               ; preds = %69
  %71 = zext i32 %7 to i64
  %72 = tail call ptr @emit_move_insn(ptr noundef %50, ptr noundef %64) #30
  %73 = icmp eq i32 %7, 1
  br i1 %73, label %98, label %86

74:                                               ; preds = %62, %74
  %75 = phi i64 [ %84, %74 ], [ 1, %62 ]
  %76 = phi ptr [ %82, %74 ], [ %60, %62 ]
  %77 = tail call ptr @gen_reg_rtx(i32 noundef %6) #30
  %78 = getelementptr inbounds [4 x ptr], ptr %10, i64 0, i64 %75
  store ptr %77, ptr %78, align 8, !tbaa !5
  %79 = tail call ptr @copy_rtx(ptr noundef %76) #30
  %80 = load i8, ptr %17, align 1, !tbaa !16
  %81 = zext i8 %80 to i64
  %82 = tail call ptr @adjust_address_1(ptr noundef %79, i32 noundef %6, i64 noundef %81, i32 noundef 1, i32 noundef 1) #30
  %83 = tail call ptr @emit_move_insn(ptr noundef %77, ptr noundef %82) #30
  %84 = add nuw nsw i64 %75, 1
  %85 = icmp eq i64 %84, %63
  br i1 %85, label %69, label %74, !llvm.loop !261

86:                                               ; preds = %70, %86
  %87 = phi i64 [ %96, %86 ], [ 1, %70 ]
  %88 = phi ptr [ %92, %86 ], [ %50, %70 ]
  %89 = tail call ptr @copy_rtx(ptr noundef %88) #30
  %90 = load i8, ptr %17, align 1, !tbaa !16
  %91 = zext i8 %90 to i64
  %92 = tail call ptr @adjust_address_1(ptr noundef %89, i32 noundef %6, i64 noundef %91, i32 noundef 1, i32 noundef 1) #30
  %93 = getelementptr inbounds [4 x ptr], ptr %10, i64 0, i64 %87
  %94 = load ptr, ptr %93, align 8, !tbaa !5
  %95 = tail call ptr @emit_move_insn(ptr noundef %92, ptr noundef %94) #30
  %96 = add nuw nsw i64 %87, 1
  %97 = icmp eq i64 %96, %71
  br i1 %97, label %98, label %86, !llvm.loop !262

98:                                               ; preds = %86, %57, %70, %67, %69
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %10) #30
  br label %109

99:                                               ; preds = %54, %99
  %100 = phi i32 [ %107, %99 ], [ 1, %54 ]
  %101 = phi ptr [ %105, %99 ], [ %50, %54 ]
  %102 = tail call ptr @copy_rtx(ptr noundef %101) #30
  %103 = load i8, ptr %17, align 1, !tbaa !16
  %104 = zext i8 %103 to i64
  %105 = tail call ptr @adjust_address_1(ptr noundef %102, i32 noundef %6, i64 noundef %104, i32 noundef 1, i32 noundef 1) #30
  %106 = tail call ptr @emit_move_insn(ptr noundef %105, ptr noundef %4) #30
  %107 = add nuw nsw i32 %100, 1
  %108 = icmp eq i32 %107, %7
  br i1 %108, label %109, label %99, !llvm.loop !263

109:                                              ; preds = %99, %54, %52, %98
  %110 = tail call ptr @expand_simple_binop(i32 noundef %15, i32 noundef 49, ptr noundef %31, ptr noundef %22, ptr noundef %31, i32 noundef 1, i32 noundef 3) #30
  %111 = icmp eq ptr %110, %31
  br i1 %111, label %114, label %112

112:                                              ; preds = %109
  %113 = tail call ptr @emit_move_insn(ptr noundef %31, ptr noundef %110) #30
  br label %114

114:                                              ; preds = %112, %109
  tail call void @emit_cmp_and_jump_insns(ptr noundef %31, ptr noundef %32, i32 noundef 85, ptr noundef null, i32 noundef %15, i32 noundef 1, ptr noundef %29) #30
  %115 = icmp eq i32 %8, -1
  br i1 %115, label %148, label %116

116:                                              ; preds = %114
  %117 = load i8, ptr %17, align 1, !tbaa !16
  %118 = zext i8 %117 to i32
  %119 = mul nuw nsw i32 %118, %7
  %120 = sdiv i32 %8, %119
  %121 = icmp eq i32 %120, 0
  br i1 %121, label %122, label %128

122:                                              ; preds = %116
  %123 = tail call ptr @get_last_insn() #30
  %124 = load i32, ptr %123, align 8
  %125 = and i32 %124, 65535
  %126 = icmp eq i32 %125, 9
  br i1 %126, label %154, label %127

127:                                              ; preds = %122
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 17264, ptr noundef nonnull @.str.131) #30
  br label %154

128:                                              ; preds = %116
  %129 = icmp sgt i32 %120, 10000
  br i1 %129, label %130, label %136

130:                                              ; preds = %128
  %131 = tail call ptr @get_last_insn() #30
  %132 = load i32, ptr %131, align 8
  %133 = and i32 %132, 65535
  %134 = icmp eq i32 %133, 9
  br i1 %134, label %154, label %135

135:                                              ; preds = %130
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 17264, ptr noundef nonnull @.str.131) #30
  br label %154

136:                                              ; preds = %128
  %137 = sdiv i32 %120, 2
  %138 = add nsw i32 %137, 10000
  %139 = sdiv i32 %138, %120
  %140 = sub nsw i32 10000, %139
  %141 = tail call ptr @get_last_insn() #30
  %142 = load i32, ptr %141, align 8
  %143 = and i32 %142, 65535
  %144 = icmp eq i32 %143, 9
  br i1 %144, label %146, label %145

145:                                              ; preds = %136
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 17264, ptr noundef nonnull @.str.131) #30
  br label %146

146:                                              ; preds = %136, %145
  %147 = sext i32 %140 to i64
  br label %154

148:                                              ; preds = %114
  %149 = tail call ptr @get_last_insn() #30
  %150 = load i32, ptr %149, align 8
  %151 = and i32 %150, 65535
  %152 = icmp eq i32 %151, 9
  br i1 %152, label %154, label %153

153:                                              ; preds = %148
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 17264, ptr noundef nonnull @.str.131) #30
  br label %154

154:                                              ; preds = %153, %148, %135, %130, %127, %122, %146
  %155 = phi i64 [ %147, %146 ], [ 0, %122 ], [ 0, %127 ], [ 9999, %130 ], [ 9999, %135 ], [ 8000, %148 ], [ 8000, %153 ]
  %156 = phi ptr [ %141, %146 ], [ %123, %122 ], [ %123, %127 ], [ %131, %130 ], [ %131, %135 ], [ %149, %148 ], [ %149, %153 ]
  %157 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef %155) #30
  tail call void @add_reg_note(ptr noundef nonnull %156, i32 noundef 13, ptr noundef %157) #30
  %158 = load i32, ptr %31, align 8
  %159 = lshr i32 %158, 16
  %160 = trunc i32 %159 to i8
  switch i8 %160, label %165 [
    i8 0, label %161
    i8 16, label %163
  ]

161:                                              ; preds = %154
  %162 = tail call ptr @force_reg(i32 noundef 16, ptr noundef nonnull %31) #30
  br label %169

163:                                              ; preds = %154
  %164 = tail call ptr @copy_to_mode_reg(i32 noundef 16, ptr noundef nonnull %31) #30
  br label %169

165:                                              ; preds = %154
  %166 = tail call ptr @gen_reg_rtx(i32 noundef 16) #30
  %167 = tail call ptr @gen_zero_extendsidi2(ptr noundef %166, ptr noundef nonnull %31) #30
  %168 = tail call ptr @emit_insn(ptr noundef %167) #30
  br label %169

169:                                              ; preds = %161, %163, %165
  %170 = phi ptr [ %162, %161 ], [ %164, %163 ], [ %166, %165 ]
  %171 = tail call ptr @expand_simple_binop(i32 noundef 16, i32 noundef 49, ptr noundef %2, ptr noundef %170, ptr noundef %2, i32 noundef 1, i32 noundef 3) #30
  %172 = icmp eq ptr %171, %2
  br i1 %172, label %175, label %173

173:                                              ; preds = %169
  %174 = tail call ptr @emit_move_insn(ptr noundef %2, ptr noundef %171) #30
  br label %175

175:                                              ; preds = %173, %169
  %176 = icmp eq ptr %3, null
  br i1 %176, label %182, label %177

177:                                              ; preds = %175
  %178 = tail call ptr @expand_simple_binop(i32 noundef 16, i32 noundef 49, ptr noundef nonnull %3, ptr noundef %170, ptr noundef nonnull %3, i32 noundef 1, i32 noundef 3) #30
  %179 = icmp eq ptr %178, %3
  br i1 %179, label %182, label %180

180:                                              ; preds = %177
  %181 = tail call ptr @emit_move_insn(ptr noundef nonnull %3, ptr noundef %178) #30
  br label %182

182:                                              ; preds = %177, %180, %175
  %183 = tail call ptr @emit_label(ptr noundef %30) #30
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc void @expand_movmem_via_rep_mov(ptr noundef %0, ptr noundef %1, ptr noundef %2, ptr noundef %3, ptr noundef %4, i32 noundef %5) unnamed_addr #9 {
  %7 = icmp eq i32 %5, 14
  br i1 %7, label %8, label %18

8:                                                ; preds = %6
  %9 = load i32, ptr %4, align 8
  %10 = and i32 %9, 65535
  %11 = icmp eq i32 %10, 30
  br i1 %11, label %12, label %18

12:                                               ; preds = %8
  %13 = getelementptr inbounds %struct.rtx_def, ptr %4, i64 0, i32 1
  %14 = load i64, ptr %13, align 8, !tbaa !16
  %15 = and i64 %14, 3
  %16 = icmp eq i64 %15, 0
  %17 = select i1 %16, i32 16, i32 14
  br label %18

18:                                               ; preds = %12, %8, %6
  %19 = phi i32 [ 14, %8 ], [ %5, %6 ], [ %17, %12 ]
  %20 = getelementptr inbounds %struct.rtx_def, ptr %0, i64 0, i32 1
  %21 = load ptr, ptr %20, align 8, !tbaa !16
  %22 = icmp eq ptr %21, %2
  br i1 %22, label %23, label %27

23:                                               ; preds = %18
  %24 = load i32, ptr %0, align 8
  %25 = and i32 %24, 16711680
  %26 = icmp eq i32 %25, 65536
  br i1 %26, label %29, label %27

27:                                               ; preds = %23, %18
  %28 = tail call ptr @adjust_automodify_address_1(ptr noundef nonnull %0, i32 noundef 1, ptr noundef %2, i64 noundef 0, i32 noundef 0) #30
  br label %29

29:                                               ; preds = %27, %23
  %30 = phi ptr [ %28, %27 ], [ %0, %23 ]
  %31 = getelementptr inbounds %struct.rtx_def, ptr %1, i64 0, i32 1
  %32 = load ptr, ptr %31, align 8, !tbaa !16
  %33 = icmp eq ptr %32, %3
  br i1 %33, label %34, label %38

34:                                               ; preds = %29
  %35 = load i32, ptr %1, align 8
  %36 = and i32 %35, 16711680
  %37 = icmp eq i32 %36, 65536
  br i1 %37, label %40, label %38

38:                                               ; preds = %34, %29
  %39 = tail call ptr @adjust_automodify_address_1(ptr noundef nonnull %1, i32 noundef 1, ptr noundef %3, i64 noundef 0, i32 noundef 0) #30
  br label %40

40:                                               ; preds = %38, %34
  %41 = phi ptr [ %39, %38 ], [ %1, %34 ]
  %42 = zext i32 %19 to i64
  %43 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %42
  %44 = load i8, ptr %43, align 1, !tbaa !16
  %45 = zext i8 %44 to i32
  %46 = tail call fastcc ptr @scale_counter(ptr noundef %4, i32 noundef %45)
  %47 = load i32, ptr %46, align 8
  %48 = lshr i32 %47, 16
  %49 = trunc i32 %48 to i8
  switch i8 %49, label %54 [
    i8 0, label %50
    i8 16, label %52
  ]

50:                                               ; preds = %40
  %51 = tail call ptr @force_reg(i32 noundef 16, ptr noundef nonnull %46) #30
  br label %58

52:                                               ; preds = %40
  %53 = tail call ptr @copy_to_mode_reg(i32 noundef 16, ptr noundef nonnull %46) #30
  br label %58

54:                                               ; preds = %40
  %55 = tail call ptr @gen_reg_rtx(i32 noundef 16) #30
  %56 = tail call ptr @gen_zero_extendsidi2(ptr noundef %55, ptr noundef nonnull %46) #30
  %57 = tail call ptr @emit_insn(ptr noundef %56) #30
  br label %58

58:                                               ; preds = %50, %52, %54
  %59 = phi ptr [ %51, %50 ], [ %53, %52 ], [ %55, %54 ]
  %60 = icmp eq i32 %19, 14
  br i1 %60, label %76, label %61

61:                                               ; preds = %58
  %62 = load i8, ptr %43, align 1, !tbaa !16
  %63 = zext i8 %62 to i64
  %64 = tail call i32 @exact_log2(i64 noundef %63) #30
  %65 = sext i32 %64 to i64
  %66 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef %65) #30
  %67 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 65, i32 noundef 16, ptr noundef %59, ptr noundef %66) #30
  %68 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 49, i32 noundef 16, ptr noundef %67, ptr noundef %2) #30
  %69 = load i8, ptr %43, align 1, !tbaa !16
  %70 = zext i8 %69 to i64
  %71 = tail call i32 @exact_log2(i64 noundef %70) #30
  %72 = sext i32 %71 to i64
  %73 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef %72) #30
  %74 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 65, i32 noundef 16, ptr noundef %59, ptr noundef %73) #30
  %75 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 49, i32 noundef 16, ptr noundef %74, ptr noundef %3) #30
  br label %79

76:                                               ; preds = %58
  %77 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 49, i32 noundef 16, ptr noundef %2, ptr noundef %59) #30
  %78 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 49, i32 noundef 16, ptr noundef %3, ptr noundef %59) #30
  br label %79

79:                                               ; preds = %76, %61
  %80 = phi ptr [ %68, %61 ], [ %77, %76 ]
  %81 = phi ptr [ %75, %61 ], [ %78, %76 ]
  %82 = load i32, ptr %4, align 8
  %83 = and i32 %82, 65535
  %84 = icmp eq i32 %83, 30
  br i1 %84, label %85, label %95

85:                                               ; preds = %79
  %86 = getelementptr inbounds %struct.rtx_def, ptr %4, i64 0, i32 1
  %87 = load i64, ptr %86, align 8, !tbaa !16
  %88 = load i8, ptr %43, align 1, !tbaa !16
  %89 = zext i8 %88 to i64
  %90 = sub nsw i64 0, %89
  %91 = and i64 %87, %90
  %92 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef %91) #30
  %93 = tail call ptr @shallow_copy_rtx_stat(ptr noundef %30) #30
  %94 = tail call ptr @shallow_copy_rtx_stat(ptr noundef %41) #30
  tail call void @set_mem_size(ptr noundef %93, ptr noundef %92) #30
  tail call void @set_mem_size(ptr noundef %94, ptr noundef %92) #30
  br label %137

95:                                               ; preds = %79
  %96 = getelementptr inbounds %struct.rtx_def, ptr %30, i64 0, i32 1, i32 0, i32 0, i64 1
  %97 = load ptr, ptr %96, align 8, !tbaa !16
  %98 = icmp eq ptr %97, null
  br i1 %98, label %103, label %99

99:                                               ; preds = %95
  %100 = getelementptr inbounds %struct.mem_attrs, ptr %97, i64 0, i32 2
  %101 = load ptr, ptr %100, align 8, !tbaa !255
  %102 = icmp eq ptr %101, null
  br i1 %102, label %116, label %115

103:                                              ; preds = %95
  %104 = load i32, ptr %30, align 8
  %105 = lshr i32 %104, 16
  %106 = and i32 %105, 255
  %107 = icmp eq i32 %106, 1
  br i1 %107, label %116, label %108

108:                                              ; preds = %103
  %109 = zext i32 %106 to i64
  %110 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %109
  %111 = load i8, ptr %110, align 1, !tbaa !16
  %112 = zext i8 %111 to i64
  %113 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef %112) #30
  %114 = icmp eq ptr %113, null
  br i1 %114, label %116, label %115

115:                                              ; preds = %108, %99
  tail call void @set_mem_size(ptr noundef nonnull %30, ptr noundef null) #30
  br label %116

116:                                              ; preds = %103, %115, %108, %99
  %117 = getelementptr inbounds %struct.rtx_def, ptr %41, i64 0, i32 1, i32 0, i32 0, i64 1
  %118 = load ptr, ptr %117, align 8, !tbaa !16
  %119 = icmp eq ptr %118, null
  br i1 %119, label %124, label %120

120:                                              ; preds = %116
  %121 = getelementptr inbounds %struct.mem_attrs, ptr %118, i64 0, i32 2
  %122 = load ptr, ptr %121, align 8, !tbaa !255
  %123 = icmp eq ptr %122, null
  br i1 %123, label %137, label %136

124:                                              ; preds = %116
  %125 = load i32, ptr %41, align 8
  %126 = lshr i32 %125, 16
  %127 = and i32 %126, 255
  %128 = icmp eq i32 %127, 1
  br i1 %128, label %137, label %129

129:                                              ; preds = %124
  %130 = zext i32 %127 to i64
  %131 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %130
  %132 = load i8, ptr %131, align 1, !tbaa !16
  %133 = zext i8 %132 to i64
  %134 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef %133) #30
  %135 = icmp eq ptr %134, null
  br i1 %135, label %137, label %136

136:                                              ; preds = %129, %120
  tail call void @set_mem_size(ptr noundef nonnull %41, ptr noundef null) #30
  br label %137

137:                                              ; preds = %120, %129, %136, %124, %85
  %138 = phi ptr [ %94, %85 ], [ %41, %136 ], [ %41, %120 ], [ %41, %129 ], [ %41, %124 ]
  %139 = phi ptr [ %93, %85 ], [ %30, %136 ], [ %30, %120 ], [ %30, %129 ], [ %30, %124 ]
  %140 = tail call ptr @gen_rep_mov(ptr noundef %2, ptr noundef %139, ptr noundef %3, ptr noundef %138, ptr noundef %59, ptr noundef %80, ptr noundef %81) #30
  %141 = tail call ptr @emit_insn(ptr noundef %140) #30
  ret void
}

declare ptr @adjust_automodify_address_1(ptr noundef, i32 noundef, ptr noundef, i64 noundef, i32 noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define dso_local i32 @ix86_expand_setmem(ptr noundef %0, ptr noundef %1, ptr noundef %2, ptr nocapture noundef readonly %3, ptr nocapture noundef readonly %4, ptr nocapture noundef readonly %5) local_unnamed_addr #9 {
  %7 = alloca i32, align 4
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %7) #30
  %8 = load i32, ptr %3, align 8
  %9 = and i32 %8, 65535
  %10 = icmp eq i32 %9, 30
  br i1 %10, label %11, label %14

11:                                               ; preds = %6
  %12 = getelementptr inbounds %struct.rtx_def, ptr %3, i64 0, i32 1
  %13 = load i64, ptr %12, align 8, !tbaa !16
  br label %14

14:                                               ; preds = %11, %6
  %15 = phi i64 [ %13, %11 ], [ 1, %6 ]
  %16 = load i32, ptr %4, align 8
  %17 = and i32 %16, 65535
  %18 = icmp eq i32 %17, 30
  br i1 %18, label %19, label %23

19:                                               ; preds = %14
  %20 = getelementptr inbounds %struct.rtx_def, ptr %4, i64 0, i32 1
  %21 = load i64, ptr %20, align 8, !tbaa !16
  %22 = tail call i64 @llvm.smax.i64(i64 %21, i64 %15)
  br label %23

23:                                               ; preds = %19, %14
  %24 = phi i64 [ %15, %14 ], [ %22, %19 ]
  %25 = load i32, ptr %1, align 8
  %26 = and i32 %25, 65535
  %27 = icmp eq i32 %26, 30
  br i1 %27, label %28, label %36

28:                                               ; preds = %23
  %29 = getelementptr inbounds %struct.rtx_def, ptr %1, i64 0, i32 1
  %30 = load i64, ptr %29, align 8, !tbaa !16
  %31 = load i32, ptr %5, align 8
  %32 = and i32 %31, 65535
  %33 = icmp eq i32 %32, 30
  %34 = icmp eq i64 %30, 0
  %35 = select i1 %33, i1 %34, i1 false
  br i1 %35, label %40, label %43

36:                                               ; preds = %23
  %37 = load i32, ptr %5, align 8
  %38 = and i32 %37, 65535
  %39 = icmp eq i32 %38, 30
  br i1 %39, label %40, label %45

40:                                               ; preds = %28, %36
  %41 = getelementptr inbounds %struct.rtx_def, ptr %5, i64 0, i32 1
  %42 = load i64, ptr %41, align 8, !tbaa !16
  br label %45

43:                                               ; preds = %28
  %44 = icmp ugt i64 %30, 1073741824
  br i1 %44, label %715, label %45

45:                                               ; preds = %36, %40, %43
  %46 = phi i1 [ true, %40 ], [ %34, %43 ], [ true, %36 ]
  %47 = phi i64 [ 0, %40 ], [ %30, %43 ], [ 0, %36 ]
  %48 = phi i64 [ %42, %40 ], [ %30, %43 ], [ -1, %36 ]
  %49 = call fastcc i32 @decide_alg(i64 noundef %47, i64 noundef %48, i8 noundef zeroext 1, ptr noundef nonnull %7)
  %50 = trunc i64 %24 to i32
  %51 = trunc i64 %48 to i32
  switch i32 %49, label %66 [
    i32 0, label %52
    i32 6, label %53
    i32 7, label %53
    i32 4, label %56
    i32 3, label %57
    i32 2, label %61
    i32 5, label %65
    i32 1, label %715
  ]

52:                                               ; preds = %45
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 18200, ptr noundef nonnull @.str.131) #30
  br label %53

53:                                               ; preds = %52, %45, %45
  %54 = load i8, ptr getelementptr inbounds ([87 x i8], ptr @mode_size, i64 0, i64 16), align 16, !tbaa !16
  %55 = zext i8 %54 to i32
  br label %66

56:                                               ; preds = %45
  br label %66

57:                                               ; preds = %45
  %58 = load i32, ptr @ix86_tune, align 4, !tbaa !16
  %59 = icmp eq i32 %58, 3
  %60 = select i1 %59, i32 8, i32 4
  br label %66

61:                                               ; preds = %45
  %62 = load i32, ptr @ix86_tune, align 4, !tbaa !16
  %63 = icmp eq i32 %62, 3
  %64 = select i1 %63, i32 8, i32 1
  br label %66

65:                                               ; preds = %45
  br label %66

66:                                               ; preds = %45, %53, %56, %57, %61, %65
  %67 = phi i32 [ 0, %45 ], [ 1, %65 ], [ 8, %56 ], [ %55, %53 ], [ %60, %57 ], [ %64, %61 ]
  %68 = load i32, ptr @optimize_size, align 4, !tbaa !20
  %69 = icmp eq i32 %68, 0
  %70 = select i1 %69, i32 %67, i32 1
  %71 = tail call i32 @llvm.smax.i32(i32 %70, i32 %50)
  %72 = icmp ne i32 %51, -1
  %73 = icmp slt i32 %51, 4
  %74 = and i1 %72, %73
  %75 = select i1 %74, i32 %50, i32 %71
  %76 = load i32, ptr @target_flags, align 4, !tbaa !20
  %77 = and i32 %76, 2048
  %78 = icmp eq i32 %77, 0
  %79 = sext i32 %75 to i64
  %80 = select i1 %78, i64 %24, i64 %79
  switch i32 %49, label %82 [
    i32 1, label %715
    i32 0, label %81
  ]

81:                                               ; preds = %66
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 18712, ptr noundef nonnull @.str.131) #30
  br label %82

82:                                               ; preds = %66, %81
  br i1 %46, label %83, label %90

83:                                               ; preds = %82
  %84 = load i32, ptr %1, align 8
  %85 = lshr i32 %84, 16
  %86 = and i32 %85, 255
  %87 = icmp eq i32 %86, 0
  %88 = select i1 %87, i32 16, i32 %86
  %89 = tail call ptr @copy_to_mode_reg(i32 noundef %88, ptr noundef nonnull %1) #30
  br label %90

90:                                               ; preds = %83, %82
  %91 = phi ptr [ %1, %82 ], [ %89, %83 ]
  %92 = getelementptr inbounds %struct.rtx_def, ptr %0, i64 0, i32 1
  %93 = load ptr, ptr %92, align 8, !tbaa !16
  %94 = tail call ptr @copy_to_mode_reg(i32 noundef 16, ptr noundef %93) #30
  switch i32 %49, label %107 [
    i32 5, label %106
    i32 0, label %95
    i32 6, label %96
    i32 7, label %99
    i32 4, label %103
    i32 3, label %104
    i32 2, label %105
  ]

95:                                               ; preds = %90
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 18720, ptr noundef nonnull @.str.131) #30
  br label %96

96:                                               ; preds = %90, %95
  %97 = load i8, ptr getelementptr inbounds ([87 x i8], ptr @mode_size, i64 0, i64 16), align 16, !tbaa !16
  %98 = zext i8 %97 to i32
  br label %107

99:                                               ; preds = %90
  %100 = load i8, ptr getelementptr inbounds ([87 x i8], ptr @mode_size, i64 0, i64 16), align 16, !tbaa !16
  %101 = zext i8 %100 to i32
  %102 = shl nuw nsw i32 %101, 2
  br label %107

103:                                              ; preds = %90
  br label %107

104:                                              ; preds = %90
  br label %107

105:                                              ; preds = %90
  br label %107

106:                                              ; preds = %90
  br label %107

107:                                              ; preds = %90, %106, %105, %104, %103, %99, %96
  %108 = phi i32 [ 0, %90 ], [ 1, %106 ], [ 1, %105 ], [ 4, %104 ], [ 8, %103 ], [ %102, %99 ], [ %98, %96 ]
  %109 = phi i1 [ true, %90 ], [ false, %106 ], [ true, %105 ], [ true, %104 ], [ true, %103 ], [ false, %99 ], [ false, %96 ]
  %110 = load i32, ptr %91, align 8
  %111 = and i32 %110, 65535
  %112 = icmp eq i32 %111, 30
  %113 = icmp slt i64 %80, %79
  %114 = select i1 %112, i1 %113, i1 false
  br i1 %114, label %115, label %131

115:                                              ; preds = %107
  %116 = getelementptr inbounds %struct.rtx_def, ptr %91, i64 0, i32 1
  %117 = load i64, ptr %116, align 8, !tbaa !16
  %118 = icmp sgt i64 %117, %79
  %119 = zext i32 %108 to i64
  %120 = icmp sgt i64 %117, %119
  %121 = select i1 %118, i1 %120, i1 false
  br i1 %121, label %122, label %129

122:                                              ; preds = %115
  %123 = shl nsw i32 %75, 3
  %124 = tail call i32 @get_mem_align_offset(ptr noundef nonnull %0, i32 noundef %123) #30
  %125 = icmp slt i32 %124, 1
  %126 = sub nsw i32 %75, %124
  %127 = icmp eq i32 %126, 0
  %128 = select i1 %125, i1 true, i1 %127
  br i1 %128, label %129, label %131

129:                                              ; preds = %122, %115
  %130 = tail call ptr @force_reg(i32 noundef 16, ptr noundef nonnull %91) #30
  br label %131

131:                                              ; preds = %122, %129, %107
  %132 = phi i32 [ 0, %129 ], [ 0, %107 ], [ %126, %122 ]
  %133 = phi ptr [ %130, %129 ], [ %91, %107 ], [ %91, %122 ]
  %134 = load i32, ptr %2, align 8
  %135 = and i32 %134, 65535
  %136 = icmp eq i32 %135, 30
  br i1 %136, label %137, label %152

137:                                              ; preds = %131
  %138 = icmp ugt i32 %108, 2
  br i1 %138, label %149, label %139

139:                                              ; preds = %137
  %140 = trunc i64 %80 to i32
  %141 = icmp sgt i32 %75, %140
  %142 = icmp sgt i32 %75, 2
  %143 = and i1 %142, %141
  br i1 %143, label %149, label %144

144:                                              ; preds = %139
  %145 = icmp ugt i32 %108, 1
  %146 = icmp sgt i32 %75, 1
  %147 = and i1 %146, %141
  %148 = or i1 %147, %145
  br i1 %148, label %149, label %155

149:                                              ; preds = %144, %139, %137
  %150 = phi i32 [ 16, %139 ], [ 16, %137 ], [ 15, %144 ]
  %151 = tail call fastcc ptr @promote_duplicated_reg(i32 noundef %150, ptr noundef nonnull %2)
  br label %152

152:                                              ; preds = %149, %131
  %153 = phi ptr [ null, %131 ], [ %151, %149 ]
  %154 = icmp ugt i32 %108, 1
  br i1 %154, label %161, label %155

155:                                              ; preds = %144, %152
  %156 = phi ptr [ %153, %152 ], [ %2, %144 ]
  %157 = icmp sgt i32 %75, 1
  %158 = zext i32 %75 to i64
  %159 = icmp slt i64 %80, %158
  %160 = select i1 %157, i1 %159, i1 false
  br i1 %160, label %161, label %209

161:                                              ; preds = %155, %152
  %162 = phi i1 [ false, %155 ], [ true, %152 ]
  %163 = phi ptr [ %156, %155 ], [ %153, %152 ]
  %164 = add nsw i32 %108, -1
  %165 = sext i32 %164 to i64
  %166 = sub nsw i64 %79, %80
  %167 = tail call i64 @llvm.smax.i64(i64 %166, i64 %165)
  %168 = trunc i64 %167 to i32
  br label %169

169:                                              ; preds = %169, %161
  %170 = phi i32 [ 1, %161 ], [ %172, %169 ]
  %171 = icmp sgt i32 %170, %168
  %172 = shl i32 %170, 1
  br i1 %171, label %173, label %169, !llvm.loop !254

173:                                              ; preds = %169
  %174 = icmp sgt i32 %170, 2
  %175 = icmp eq ptr %163, null
  %176 = select i1 %174, i1 %175, i1 false
  %177 = zext i1 %176 to i8
  br i1 %46, label %185, label %178

178:                                              ; preds = %173
  %179 = sext i32 %170 to i64
  %180 = icmp ult i64 %47, %179
  br i1 %180, label %181, label %209

181:                                              ; preds = %178
  %182 = icmp eq i32 %108, 1
  br i1 %182, label %183, label %547

183:                                              ; preds = %181
  %184 = trunc i64 %80 to i32
  br label %209

185:                                              ; preds = %173
  %186 = tail call ptr @gen_label_rtx() #30
  %187 = sext i32 %170 to i64
  %188 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef %187) #30
  %189 = load i32, ptr %133, align 8
  %190 = lshr i32 %189, 16
  %191 = and i32 %190, 255
  %192 = icmp eq i32 %191, 0
  %193 = select i1 %192, i32 16, i32 %191
  tail call void @emit_cmp_and_jump_insns(ptr noundef nonnull %133, ptr noundef %188, i32 noundef 89, ptr noundef null, i32 noundef %193, i32 noundef 1, ptr noundef %186) #30
  %194 = icmp ne i64 %48, -1
  %195 = icmp sgt i64 %48, %187
  %196 = and i1 %194, %195
  %197 = tail call ptr @get_last_insn() #30
  %198 = load i32, ptr %197, align 8
  %199 = and i32 %198, 65535
  %200 = icmp eq i32 %199, 9
  br i1 %196, label %205, label %201

201:                                              ; preds = %185
  br i1 %200, label %203, label %202

202:                                              ; preds = %201
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 17264, ptr noundef nonnull @.str.131) #30
  br label %203

203:                                              ; preds = %201, %202
  %204 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef 6000) #30
  tail call void @add_reg_note(ptr noundef nonnull %197, i32 noundef 13, ptr noundef %204) #30
  br label %209

205:                                              ; preds = %185
  br i1 %200, label %207, label %206

206:                                              ; preds = %205
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 17264, ptr noundef nonnull @.str.131) #30
  br label %207

207:                                              ; preds = %205, %206
  %208 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef 2000) #30
  tail call void @add_reg_note(ptr noundef nonnull %197, i32 noundef 13, ptr noundef %208) #30
  br label %209

209:                                              ; preds = %183, %178, %207, %203, %155
  %210 = phi i1 [ %162, %183 ], [ %162, %178 ], [ %162, %203 ], [ %162, %207 ], [ false, %155 ]
  %211 = phi ptr [ %163, %183 ], [ %163, %178 ], [ %163, %203 ], [ %163, %207 ], [ %156, %155 ]
  %212 = phi ptr [ null, %183 ], [ null, %178 ], [ %186, %203 ], [ %186, %207 ], [ null, %155 ]
  %213 = phi i32 [ %170, %183 ], [ %170, %178 ], [ %170, %203 ], [ %170, %207 ], [ %108, %155 ]
  %214 = phi i32 [ %184, %183 ], [ %75, %178 ], [ %75, %203 ], [ %75, %207 ], [ %75, %155 ]
  %215 = phi i8 [ %177, %183 ], [ %177, %178 ], [ %177, %203 ], [ %177, %207 ], [ 0, %155 ]
  %216 = load i32, ptr %7, align 4, !tbaa !20
  %217 = icmp eq i32 %216, -1
  br i1 %217, label %238, label %218

218:                                              ; preds = %209
  %219 = tail call ptr @gen_label_rtx() #30
  %220 = tail call ptr @gen_label_rtx() #30
  %221 = add nsw i32 %216, -1
  %222 = sext i32 %221 to i64
  %223 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef %222) #30
  %224 = load i32, ptr %133, align 8
  %225 = lshr i32 %224, 16
  %226 = and i32 %225, 255
  %227 = icmp eq i32 %226, 0
  %228 = select i1 %227, i32 16, i32 %226
  tail call void @emit_cmp_and_jump_insns(ptr noundef nonnull %133, ptr noundef %223, i32 noundef 88, ptr noundef null, i32 noundef %228, i32 noundef 1, ptr noundef %219) #30
  %229 = tail call ptr @get_last_insn() #30
  %230 = load i32, ptr %229, align 8
  %231 = and i32 %230, 65535
  %232 = icmp eq i32 %231, 9
  br i1 %232, label %234, label %233

233:                                              ; preds = %218
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 17264, ptr noundef nonnull @.str.131) #30
  br label %234

234:                                              ; preds = %218, %233
  %235 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef 9000) #30
  tail call void @add_reg_note(ptr noundef nonnull %229, i32 noundef 13, ptr noundef %235) #30
  %236 = tail call ptr @set_storage_via_libcall(ptr noundef %0, ptr noundef nonnull %133, ptr noundef nonnull %2, i8 noundef zeroext 0) #30
  tail call void @emit_jump(ptr noundef %220) #30
  %237 = tail call ptr @emit_label(ptr noundef %219) #30
  br label %238

238:                                              ; preds = %234, %209
  %239 = phi ptr [ %220, %234 ], [ null, %209 ]
  %240 = icmp eq ptr %211, null
  br i1 %240, label %241, label %256

241:                                              ; preds = %238
  %242 = icmp ugt i32 %108, 2
  br i1 %242, label %253, label %243

243:                                              ; preds = %241
  %244 = trunc i64 %80 to i32
  %245 = icmp sgt i32 %214, %244
  %246 = icmp sgt i32 %214, 2
  %247 = and i1 %246, %245
  br i1 %247, label %253, label %248

248:                                              ; preds = %243
  %249 = icmp ugt i32 %108, 1
  %250 = icmp sgt i32 %214, 1
  %251 = and i1 %250, %245
  %252 = or i1 %249, %251
  br i1 %252, label %253, label %256

253:                                              ; preds = %248, %243, %241
  %254 = phi i32 [ 16, %243 ], [ 16, %241 ], [ 15, %248 ]
  %255 = tail call fastcc ptr @promote_duplicated_reg(i32 noundef %254, ptr noundef nonnull %2)
  br label %256

256:                                              ; preds = %253, %248, %238
  %257 = phi ptr [ %211, %238 ], [ %2, %248 ], [ %255, %253 ]
  %258 = icmp sgt i32 %214, 0
  %259 = icmp sgt i64 %80, 0
  %260 = select i1 %258, i1 %259, i1 false
  br i1 %260, label %262, label %261

261:                                              ; preds = %256
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 18830, ptr noundef nonnull @.str.131) #30
  br label %262

262:                                              ; preds = %256, %261
  %263 = sext i32 %214 to i64
  %264 = icmp slt i64 %80, %263
  br i1 %264, label %265, label %489

265:                                              ; preds = %262
  %266 = icmp eq i32 %132, 0
  br i1 %266, label %267, label %346

267:                                              ; preds = %265
  %268 = tail call ptr @change_address(ptr noundef %0, i32 noundef 1, ptr noundef %94) #30
  %269 = trunc i64 %80 to i32
  %270 = icmp slt i32 %269, 2
  %271 = icmp sgt i32 %214, 1
  %272 = and i1 %270, %271
  br i1 %272, label %273, label %293

273:                                              ; preds = %267
  %274 = tail call fastcc ptr @ix86_expand_aligntest(ptr noundef %94, i32 noundef 1, i8 noundef zeroext 0)
  %275 = tail call ptr @change_address(ptr noundef %268, i32 noundef 14, ptr noundef %94) #30
  %276 = load ptr, ptr @rtl_hooks, align 8, !tbaa !187
  %277 = tail call ptr %276(i32 noundef 14, ptr noundef %257) #30
  %278 = tail call ptr @gen_strset(ptr noundef %94, ptr noundef %275, ptr noundef %277) #30
  %279 = tail call ptr @emit_insn(ptr noundef %278) #30
  %280 = load i32, ptr %133, align 8
  %281 = and i32 %280, 16711680
  %282 = icmp eq i32 %281, 1114112
  %283 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef -1) #30
  br i1 %282, label %284, label %286

284:                                              ; preds = %273
  %285 = tail call ptr @gen_adddi3(ptr noundef nonnull %133, ptr noundef nonnull %133, ptr noundef %283) #30
  br label %288

286:                                              ; preds = %273
  %287 = tail call ptr @gen_addsi3(ptr noundef nonnull %133, ptr noundef nonnull %133, ptr noundef %283) #30
  br label %288

288:                                              ; preds = %286, %284
  %289 = phi ptr [ %287, %286 ], [ %285, %284 ]
  %290 = tail call ptr @emit_insn(ptr noundef %289) #30
  %291 = tail call ptr @emit_label(ptr noundef %274) #30
  %292 = getelementptr inbounds %struct.rtx_def, ptr %274, i64 0, i32 1, i32 0, i32 2
  store i32 1, ptr %292, align 8, !tbaa !16
  br label %293

293:                                              ; preds = %288, %267
  %294 = phi ptr [ %275, %288 ], [ %268, %267 ]
  %295 = icmp slt i32 %269, 3
  %296 = icmp sgt i32 %214, 2
  %297 = and i1 %295, %296
  br i1 %297, label %298, label %318

298:                                              ; preds = %293
  %299 = tail call fastcc ptr @ix86_expand_aligntest(ptr noundef %94, i32 noundef 2, i8 noundef zeroext 0)
  %300 = tail call ptr @change_address(ptr noundef %294, i32 noundef 15, ptr noundef %94) #30
  %301 = load ptr, ptr @rtl_hooks, align 8, !tbaa !187
  %302 = tail call ptr %301(i32 noundef 15, ptr noundef %257) #30
  %303 = tail call ptr @gen_strset(ptr noundef %94, ptr noundef %300, ptr noundef %302) #30
  %304 = tail call ptr @emit_insn(ptr noundef %303) #30
  %305 = load i32, ptr %133, align 8
  %306 = and i32 %305, 16711680
  %307 = icmp eq i32 %306, 1114112
  %308 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef -2) #30
  br i1 %307, label %309, label %311

309:                                              ; preds = %298
  %310 = tail call ptr @gen_adddi3(ptr noundef nonnull %133, ptr noundef nonnull %133, ptr noundef %308) #30
  br label %313

311:                                              ; preds = %298
  %312 = tail call ptr @gen_addsi3(ptr noundef nonnull %133, ptr noundef nonnull %133, ptr noundef %308) #30
  br label %313

313:                                              ; preds = %311, %309
  %314 = phi ptr [ %312, %311 ], [ %310, %309 ]
  %315 = tail call ptr @emit_insn(ptr noundef %314) #30
  %316 = tail call ptr @emit_label(ptr noundef %299) #30
  %317 = getelementptr inbounds %struct.rtx_def, ptr %299, i64 0, i32 1, i32 0, i32 2
  store i32 1, ptr %317, align 8, !tbaa !16
  br label %318

318:                                              ; preds = %313, %293
  %319 = phi ptr [ %300, %313 ], [ %294, %293 ]
  %320 = icmp slt i32 %269, 5
  %321 = icmp sgt i32 %214, 4
  %322 = and i1 %320, %321
  br i1 %322, label %323, label %343

323:                                              ; preds = %318
  %324 = tail call fastcc ptr @ix86_expand_aligntest(ptr noundef %94, i32 noundef 4, i8 noundef zeroext 0)
  %325 = tail call ptr @change_address(ptr noundef %319, i32 noundef 16, ptr noundef %94) #30
  %326 = load ptr, ptr @rtl_hooks, align 8, !tbaa !187
  %327 = tail call ptr %326(i32 noundef 16, ptr noundef %257) #30
  %328 = tail call ptr @gen_strset(ptr noundef %94, ptr noundef %325, ptr noundef %327) #30
  %329 = tail call ptr @emit_insn(ptr noundef %328) #30
  %330 = load i32, ptr %133, align 8
  %331 = and i32 %330, 16711680
  %332 = icmp eq i32 %331, 1114112
  %333 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef -4) #30
  br i1 %332, label %334, label %336

334:                                              ; preds = %323
  %335 = tail call ptr @gen_adddi3(ptr noundef nonnull %133, ptr noundef nonnull %133, ptr noundef %333) #30
  br label %338

336:                                              ; preds = %323
  %337 = tail call ptr @gen_addsi3(ptr noundef nonnull %133, ptr noundef nonnull %133, ptr noundef %333) #30
  br label %338

338:                                              ; preds = %336, %334
  %339 = phi ptr [ %337, %336 ], [ %335, %334 ]
  %340 = tail call ptr @emit_insn(ptr noundef %339) #30
  %341 = tail call ptr @emit_label(ptr noundef %324) #30
  %342 = getelementptr inbounds %struct.rtx_def, ptr %324, i64 0, i32 1, i32 0, i32 2
  store i32 1, ptr %342, align 8, !tbaa !16
  br label %343

343:                                              ; preds = %338, %318
  %344 = icmp slt i32 %214, 9
  br i1 %344, label %448, label %345

345:                                              ; preds = %343
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 18012, ptr noundef nonnull @.str.131) #30
  br label %448

346:                                              ; preds = %265
  %347 = getelementptr inbounds %struct.rtx_def, ptr %0, i64 0, i32 1, i32 0, i32 0, i64 1
  %348 = load ptr, ptr %347, align 8, !tbaa !16
  %349 = icmp eq ptr %348, null
  br i1 %349, label %353, label %350

350:                                              ; preds = %346
  %351 = getelementptr inbounds %struct.mem_attrs, ptr %348, i64 0, i32 2
  %352 = load ptr, ptr %351, align 8, !tbaa !255
  br label %364

353:                                              ; preds = %346
  %354 = load i32, ptr %0, align 8
  %355 = lshr i32 %354, 16
  %356 = and i32 %355, 255
  %357 = icmp eq i32 %356, 1
  br i1 %357, label %364, label %358

358:                                              ; preds = %353
  %359 = zext i32 %356 to i64
  %360 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %359
  %361 = load i8, ptr %360, align 1, !tbaa !16
  %362 = zext i8 %361 to i64
  %363 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef %362) #30
  br label %364

364:                                              ; preds = %358, %353, %350
  %365 = phi ptr [ %352, %350 ], [ %363, %358 ], [ null, %353 ]
  %366 = and i32 %132, 1
  %367 = icmp eq i32 %366, 0
  br i1 %367, label %374, label %368

368:                                              ; preds = %364
  %369 = tail call ptr @adjust_automodify_address_1(ptr noundef nonnull %0, i32 noundef 14, ptr noundef %94, i64 noundef 0, i32 noundef 0) #30
  %370 = load ptr, ptr @rtl_hooks, align 8, !tbaa !187
  %371 = tail call ptr %370(i32 noundef 14, ptr noundef %257) #30
  %372 = tail call ptr @gen_strset(ptr noundef %94, ptr noundef %369, ptr noundef %371) #30
  %373 = tail call ptr @emit_insn(ptr noundef %372) #30
  br label %374

374:                                              ; preds = %368, %364
  %375 = phi i32 [ 1, %368 ], [ 0, %364 ]
  %376 = phi ptr [ %369, %368 ], [ %0, %364 ]
  %377 = and i32 %132, 2
  %378 = icmp eq i32 %377, 0
  br i1 %378, label %395, label %379

379:                                              ; preds = %374
  %380 = zext i32 %375 to i64
  %381 = tail call ptr @adjust_automodify_address_1(ptr noundef %376, i32 noundef 15, ptr noundef %94, i64 noundef %380, i32 noundef 0) #30
  %382 = getelementptr inbounds %struct.rtx_def, ptr %381, i64 0, i32 1, i32 0, i32 0, i64 1
  %383 = load ptr, ptr %382, align 8, !tbaa !16
  %384 = icmp eq ptr %383, null
  br i1 %384, label %389, label %385

385:                                              ; preds = %379
  %386 = getelementptr inbounds %struct.mem_attrs, ptr %383, i64 0, i32 4
  %387 = load i32, ptr %386, align 4, !tbaa !185
  %388 = icmp ult i32 %387, 16
  br i1 %388, label %389, label %390

389:                                              ; preds = %385, %379
  tail call void @set_mem_align(ptr noundef nonnull %381, i32 noundef 16) #30
  br label %390

390:                                              ; preds = %389, %385
  %391 = load ptr, ptr @rtl_hooks, align 8, !tbaa !187
  %392 = tail call ptr %391(i32 noundef 15, ptr noundef %257) #30
  %393 = tail call ptr @gen_strset(ptr noundef %94, ptr noundef nonnull %381, ptr noundef %392) #30
  %394 = tail call ptr @emit_insn(ptr noundef %393) #30
  br label %395

395:                                              ; preds = %390, %374
  %396 = phi i32 [ 2, %390 ], [ %375, %374 ]
  %397 = phi ptr [ %381, %390 ], [ %376, %374 ]
  %398 = and i32 %132, 4
  %399 = icmp eq i32 %398, 0
  br i1 %399, label %416, label %400

400:                                              ; preds = %395
  %401 = zext i32 %396 to i64
  %402 = tail call ptr @adjust_automodify_address_1(ptr noundef %397, i32 noundef 16, ptr noundef %94, i64 noundef %401, i32 noundef 0) #30
  %403 = getelementptr inbounds %struct.rtx_def, ptr %402, i64 0, i32 1, i32 0, i32 0, i64 1
  %404 = load ptr, ptr %403, align 8, !tbaa !16
  %405 = icmp eq ptr %404, null
  br i1 %405, label %410, label %406

406:                                              ; preds = %400
  %407 = getelementptr inbounds %struct.mem_attrs, ptr %404, i64 0, i32 4
  %408 = load i32, ptr %407, align 4, !tbaa !185
  %409 = icmp ult i32 %408, 32
  br i1 %409, label %410, label %411

410:                                              ; preds = %406, %400
  tail call void @set_mem_align(ptr noundef nonnull %402, i32 noundef 32) #30
  br label %411

411:                                              ; preds = %410, %406
  %412 = load ptr, ptr @rtl_hooks, align 8, !tbaa !187
  %413 = tail call ptr %412(i32 noundef 16, ptr noundef %257) #30
  %414 = tail call ptr @gen_strset(ptr noundef %94, ptr noundef nonnull %402, ptr noundef %413) #30
  %415 = tail call ptr @emit_insn(ptr noundef %414) #30
  br label %416

416:                                              ; preds = %411, %395
  %417 = phi i32 [ 4, %411 ], [ %396, %395 ]
  %418 = phi ptr [ %402, %411 ], [ %397, %395 ]
  %419 = zext i32 %417 to i64
  %420 = tail call ptr @adjust_automodify_address_1(ptr noundef %418, i32 noundef 1, ptr noundef %94, i64 noundef %419, i32 noundef 0) #30
  %421 = getelementptr inbounds %struct.rtx_def, ptr %420, i64 0, i32 1, i32 0, i32 0, i64 1
  %422 = load ptr, ptr %421, align 8, !tbaa !16
  %423 = icmp eq ptr %422, null
  br i1 %423, label %427, label %424

424:                                              ; preds = %416
  %425 = getelementptr inbounds %struct.mem_attrs, ptr %422, i64 0, i32 4
  %426 = load i32, ptr %425, align 4, !tbaa !185
  br label %427

427:                                              ; preds = %424, %416
  %428 = phi i32 [ %426, %424 ], [ 8, %416 ]
  %429 = shl i32 %214, 3
  %430 = icmp ult i32 %428, %429
  br i1 %430, label %431, label %432

431:                                              ; preds = %427
  tail call void @set_mem_align(ptr noundef nonnull %420, i32 noundef %429) #30
  br label %432

432:                                              ; preds = %431, %427
  %433 = icmp eq ptr %365, null
  br i1 %433, label %434, label %436

434:                                              ; preds = %432
  %435 = sext i32 %132 to i64
  br label %442

436:                                              ; preds = %432
  %437 = getelementptr inbounds %struct.rtx_def, ptr %365, i64 0, i32 1
  %438 = load i64, ptr %437, align 8, !tbaa !16
  %439 = sext i32 %132 to i64
  %440 = sub nsw i64 %438, %439
  %441 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef %440) #30
  tail call void @set_mem_size(ptr noundef nonnull %420, ptr noundef %441) #30
  br label %442

442:                                              ; preds = %434, %436
  %443 = phi i64 [ %435, %434 ], [ %439, %436 ]
  %444 = sub nsw i32 0, %132
  %445 = sext i32 %444 to i64
  %446 = tail call ptr @plus_constant(ptr noundef %133, i64 noundef %445) #30
  %447 = sub nsw i64 %47, %443
  br label %448

448:                                              ; preds = %345, %343, %442
  %449 = phi i64 [ %447, %442 ], [ %47, %343 ], [ %47, %345 ]
  %450 = phi ptr [ %446, %442 ], [ %133, %343 ], [ %133, %345 ]
  %451 = phi ptr [ %420, %442 ], [ %268, %343 ], [ %268, %345 ]
  br i1 %109, label %489, label %452

452:                                              ; preds = %448
  %453 = zext i32 %108 to i64
  %454 = icmp ult i64 %449, %453
  br i1 %454, label %460, label %455

455:                                              ; preds = %452
  br i1 %266, label %456, label %489

456:                                              ; preds = %455
  %457 = sub i64 %453, %80
  %458 = add i64 %457, %263
  %459 = icmp ult i64 %449, %458
  br i1 %459, label %460, label %489

460:                                              ; preds = %456, %452
  br i1 %210, label %462, label %461

461:                                              ; preds = %460
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 18861, ptr noundef nonnull @.str.131) #30
  br label %462

462:                                              ; preds = %460, %461
  %463 = icmp eq ptr %212, null
  br i1 %463, label %464, label %466

464:                                              ; preds = %462
  %465 = tail call ptr @gen_label_rtx() #30
  br label %466

466:                                              ; preds = %464, %462
  %467 = phi ptr [ %465, %464 ], [ %212, %462 ]
  %468 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef %453) #30
  %469 = load i32, ptr %450, align 8
  %470 = lshr i32 %469, 16
  %471 = and i32 %470, 255
  %472 = icmp eq i32 %471, 0
  %473 = select i1 %472, i32 16, i32 %471
  tail call void @emit_cmp_and_jump_insns(ptr noundef nonnull %450, ptr noundef %468, i32 noundef 89, ptr noundef null, i32 noundef %473, i32 noundef 1, ptr noundef %467) #30
  %474 = icmp eq i64 %48, -1
  br i1 %474, label %480, label %475

475:                                              ; preds = %466
  %476 = sub nsw i64 %263, %80
  %477 = sdiv i64 %476, 2
  %478 = add nsw i64 %477, %453
  %479 = icmp slt i64 %48, %478
  br i1 %479, label %480, label %488

480:                                              ; preds = %475, %466
  %481 = tail call ptr @get_last_insn() #30
  %482 = load i32, ptr %481, align 8
  %483 = and i32 %482, 65535
  %484 = icmp eq i32 %483, 9
  br i1 %484, label %486, label %485

485:                                              ; preds = %480
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 17264, ptr noundef nonnull @.str.131) #30
  br label %486

486:                                              ; preds = %480, %485
  %487 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef 2000) #30
  tail call void @add_reg_note(ptr noundef nonnull %481, i32 noundef 13, ptr noundef %487) #30
  br label %489

488:                                              ; preds = %475
  tail call fastcc void @predict_jump(i32 noundef 6000)
  br label %489

489:                                              ; preds = %448, %455, %456, %488, %486, %262
  %490 = phi ptr [ %467, %486 ], [ %467, %488 ], [ %212, %456 ], [ %212, %455 ], [ %212, %448 ], [ %212, %262 ]
  %491 = phi i64 [ %449, %486 ], [ %449, %488 ], [ %449, %456 ], [ %449, %455 ], [ %449, %448 ], [ %47, %262 ]
  %492 = phi ptr [ %450, %486 ], [ %450, %488 ], [ %450, %456 ], [ %450, %455 ], [ %450, %448 ], [ %133, %262 ]
  %493 = phi ptr [ %451, %486 ], [ %451, %488 ], [ %451, %456 ], [ %451, %455 ], [ %451, %448 ], [ %0, %262 ]
  %494 = icmp ne ptr %490, null
  %495 = icmp eq i32 %108, 1
  %496 = select i1 %494, i1 %495, i1 false
  br i1 %496, label %497, label %500

497:                                              ; preds = %489
  %498 = tail call ptr @emit_label(ptr noundef nonnull %490) #30
  %499 = getelementptr inbounds %struct.rtx_def, ptr %490, i64 0, i32 1, i32 0, i32 2
  store i32 1, ptr %499, align 8, !tbaa !16
  br label %503

500:                                              ; preds = %489
  %501 = icmp eq ptr %490, null
  %502 = select i1 %501, i32 %108, i32 %213
  br label %503

503:                                              ; preds = %500, %497
  %504 = phi ptr [ null, %497 ], [ %490, %500 ]
  %505 = phi i32 [ 1, %497 ], [ %502, %500 ]
  %506 = phi ptr [ %2, %497 ], [ %257, %500 ]
  switch i32 %49, label %514 [
    i32 1, label %507
    i32 0, label %507
    i32 5, label %508
    i32 6, label %509
    i32 7, label %510
    i32 4, label %511
    i32 3, label %512
    i32 2, label %513
  ]

507:                                              ; preds = %503, %503
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 18891, ptr noundef nonnull @.str.131) #30
  br label %508

508:                                              ; preds = %503, %507
  tail call fastcc void @expand_set_or_movmem_via_loop(ptr noundef %493, ptr noundef null, ptr noundef %94, ptr noundef null, ptr noundef %506, ptr noundef %492, i32 noundef 14, i32 noundef 1, i32 noundef %51)
  br label %514

509:                                              ; preds = %503
  tail call fastcc void @expand_set_or_movmem_via_loop(ptr noundef %493, ptr noundef null, ptr noundef %94, ptr noundef null, ptr noundef %506, ptr noundef %492, i32 noundef 16, i32 noundef 1, i32 noundef %51)
  br label %514

510:                                              ; preds = %503
  tail call fastcc void @expand_set_or_movmem_via_loop(ptr noundef %493, ptr noundef null, ptr noundef %94, ptr noundef null, ptr noundef %506, ptr noundef %492, i32 noundef 16, i32 noundef 4, i32 noundef %51)
  br label %514

511:                                              ; preds = %503
  tail call fastcc void @expand_setmem_via_rep_stos(ptr noundef %493, ptr noundef %94, ptr noundef %506, ptr noundef %492, i32 noundef 17, ptr noundef nonnull %2)
  br label %514

512:                                              ; preds = %503
  tail call fastcc void @expand_setmem_via_rep_stos(ptr noundef %493, ptr noundef %94, ptr noundef %506, ptr noundef %492, i32 noundef 16, ptr noundef nonnull %2)
  br label %514

513:                                              ; preds = %503
  tail call fastcc void @expand_setmem_via_rep_stos(ptr noundef %493, ptr noundef %94, ptr noundef %506, ptr noundef %492, i32 noundef 14, ptr noundef nonnull %2)
  br label %514

514:                                              ; preds = %503, %513, %512, %511, %510, %509, %508
  %515 = load i32, ptr %492, align 8
  %516 = and i32 %515, 65535
  %517 = icmp eq i32 %516, 30
  br i1 %517, label %518, label %524

518:                                              ; preds = %514
  %519 = zext i32 %108 to i64
  %520 = freeze i64 %491
  %521 = urem i64 %520, %519
  %522 = sub nuw i64 %520, %521
  %523 = tail call ptr @adjust_automodify_address_1(ptr noundef %493, i32 noundef 1, ptr noundef %94, i64 noundef %522, i32 noundef 0) #30
  br label %526

524:                                              ; preds = %514
  %525 = tail call ptr @change_address(ptr noundef %493, i32 noundef 1, ptr noundef %94) #30
  br label %526

526:                                              ; preds = %524, %518
  %527 = phi ptr [ %523, %518 ], [ %525, %524 ]
  %528 = icmp eq ptr %504, null
  br i1 %528, label %547, label %529

529:                                              ; preds = %526
  %530 = icmp slt i32 %108, %505
  br i1 %530, label %531, label %544

531:                                              ; preds = %529
  %532 = load i32, ptr %492, align 8
  %533 = lshr i32 %532, 16
  %534 = and i32 %533, 255
  %535 = icmp eq i32 %534, 0
  %536 = select i1 %535, i32 16, i32 %534
  %537 = add nsw i32 %108, -1
  %538 = sext i32 %537 to i64
  %539 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef %538) #30
  %540 = tail call ptr @expand_simple_binop(i32 noundef %536, i32 noundef 61, ptr noundef nonnull %492, ptr noundef %539, ptr noundef nonnull %492, i32 noundef 1, i32 noundef 0) #30
  %541 = icmp eq ptr %540, %492
  br i1 %541, label %544, label %542

542:                                              ; preds = %531
  %543 = tail call ptr @emit_move_insn(ptr noundef nonnull %492, ptr noundef %540) #30
  br label %544

544:                                              ; preds = %531, %542, %529
  %545 = tail call ptr @emit_label(ptr noundef nonnull %504) #30
  %546 = getelementptr inbounds %struct.rtx_def, ptr %504, i64 0, i32 1, i32 0, i32 2
  store i32 1, ptr %546, align 8, !tbaa !16
  br label %547

547:                                              ; preds = %526, %544, %181
  %548 = phi ptr [ %239, %544 ], [ %239, %526 ], [ null, %181 ]
  %549 = phi i32 [ %505, %544 ], [ %505, %526 ], [ %170, %181 ]
  %550 = phi ptr [ %492, %544 ], [ %492, %526 ], [ %133, %181 ]
  %551 = phi ptr [ %506, %544 ], [ %506, %526 ], [ %163, %181 ]
  %552 = phi i8 [ %215, %544 ], [ %215, %526 ], [ %177, %181 ]
  %553 = phi ptr [ %527, %544 ], [ %527, %526 ], [ %0, %181 ]
  %554 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 64), align 16, !tbaa !5
  %555 = icmp ne ptr %550, %554
  %556 = icmp sgt i32 %549, 1
  %557 = select i1 %555, i1 %556, i1 false
  br i1 %557, label %558, label %711

558:                                              ; preds = %547
  %559 = icmp eq i8 %552, 0
  %560 = load i32, ptr %550, align 8
  br i1 %559, label %573, label %561

561:                                              ; preds = %558
  %562 = lshr i32 %560, 16
  %563 = and i32 %562, 255
  %564 = icmp eq i32 %563, 0
  %565 = select i1 %564, i32 16, i32 %563
  %566 = add nsw i32 %549, -1
  %567 = zext i32 %566 to i64
  %568 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef %567) #30
  %569 = tail call ptr @expand_simple_binop(i32 noundef %565, i32 noundef 61, ptr noundef nonnull %550, ptr noundef %568, ptr noundef nonnull %550, i32 noundef 1, i32 noundef 0) #30
  %570 = load ptr, ptr @rtl_hooks, align 8, !tbaa !187
  %571 = tail call ptr %570(i32 noundef 14, ptr noundef nonnull %2) #30
  %572 = lshr i32 %549, 1
  tail call fastcc void @expand_set_or_movmem_via_loop(ptr noundef %553, ptr noundef null, ptr noundef %94, ptr noundef null, ptr noundef %571, ptr noundef %569, i32 noundef 14, i32 noundef 1, i32 noundef %572)
  br label %711

573:                                              ; preds = %558
  %574 = and i32 %560, 65535
  %575 = icmp eq i32 %574, 30
  br i1 %575, label %576, label %640

576:                                              ; preds = %573
  %577 = getelementptr inbounds %struct.rtx_def, ptr %550, i64 0, i32 1
  %578 = load i64, ptr %577, align 8, !tbaa !16
  %579 = and i64 %578, 16
  %580 = icmp ne i64 %579, 0
  %581 = icmp ugt i32 %549, 16
  %582 = and i1 %581, %580
  br i1 %582, label %583, label %584

583:                                              ; preds = %576
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 17753, ptr noundef nonnull @.str.131) #30
  br label %584

584:                                              ; preds = %583, %576
  %585 = phi i32 [ 16, %583 ], [ 0, %576 ]
  %586 = and i64 %578, 8
  %587 = icmp ne i64 %586, 0
  %588 = icmp ugt i32 %549, 8
  %589 = and i1 %588, %587
  br i1 %589, label %590, label %601

590:                                              ; preds = %584
  %591 = zext i32 %585 to i64
  %592 = tail call ptr @adjust_automodify_address_1(ptr noundef %553, i32 noundef 16, ptr noundef %94, i64 noundef %591, i32 noundef 0) #30
  %593 = tail call ptr @gen_strset(ptr noundef %94, ptr noundef %592, ptr noundef %551) #30
  %594 = tail call ptr @emit_insn(ptr noundef %593) #30
  %595 = or i32 %585, 4
  %596 = zext i32 %595 to i64
  %597 = tail call ptr @adjust_automodify_address_1(ptr noundef %553, i32 noundef 16, ptr noundef %94, i64 noundef %596, i32 noundef 0) #30
  %598 = tail call ptr @gen_strset(ptr noundef %94, ptr noundef %597, ptr noundef %551) #30
  %599 = tail call ptr @emit_insn(ptr noundef %598) #30
  %600 = or i32 %585, 8
  br label %601

601:                                              ; preds = %590, %584
  %602 = phi i32 [ %600, %590 ], [ %585, %584 ]
  %603 = and i64 %578, 4
  %604 = icmp ne i64 %603, 0
  %605 = icmp ugt i32 %549, 4
  %606 = and i1 %605, %604
  br i1 %606, label %607, label %615

607:                                              ; preds = %601
  %608 = zext i32 %602 to i64
  %609 = tail call ptr @adjust_automodify_address_1(ptr noundef %553, i32 noundef 16, ptr noundef %94, i64 noundef %608, i32 noundef 0) #30
  %610 = load ptr, ptr @rtl_hooks, align 8, !tbaa !187
  %611 = tail call ptr %610(i32 noundef 16, ptr noundef %551) #30
  %612 = tail call ptr @gen_strset(ptr noundef %94, ptr noundef %609, ptr noundef %611) #30
  %613 = tail call ptr @emit_insn(ptr noundef %612) #30
  %614 = add nuw nsw i32 %602, 4
  br label %615

615:                                              ; preds = %607, %601
  %616 = phi i32 [ %614, %607 ], [ %602, %601 ]
  %617 = and i64 %578, 2
  %618 = icmp ne i64 %617, 0
  %619 = icmp ugt i32 %549, 2
  %620 = and i1 %619, %618
  br i1 %620, label %621, label %629

621:                                              ; preds = %615
  %622 = zext i32 %616 to i64
  %623 = tail call ptr @adjust_automodify_address_1(ptr noundef %553, i32 noundef 15, ptr noundef %94, i64 noundef %622, i32 noundef 0) #30
  %624 = load ptr, ptr @rtl_hooks, align 8, !tbaa !187
  %625 = tail call ptr %624(i32 noundef 15, ptr noundef %551) #30
  %626 = tail call ptr @gen_strset(ptr noundef %94, ptr noundef %623, ptr noundef %625) #30
  %627 = tail call ptr @emit_insn(ptr noundef %626) #30
  %628 = add nuw nsw i32 %616, 2
  br label %629

629:                                              ; preds = %621, %615
  %630 = phi i32 [ %628, %621 ], [ %616, %615 ]
  %631 = and i64 %578, 1
  %632 = icmp eq i64 %631, 0
  br i1 %632, label %711, label %633

633:                                              ; preds = %629
  %634 = zext i32 %630 to i64
  %635 = tail call ptr @adjust_automodify_address_1(ptr noundef %553, i32 noundef 14, ptr noundef %94, i64 noundef %634, i32 noundef 0) #30
  %636 = load ptr, ptr @rtl_hooks, align 8, !tbaa !187
  %637 = tail call ptr %636(i32 noundef 14, ptr noundef %551) #30
  %638 = tail call ptr @gen_strset(ptr noundef %94, ptr noundef %635, ptr noundef %637) #30
  %639 = tail call ptr @emit_insn(ptr noundef %638) #30
  br label %711

640:                                              ; preds = %573
  %641 = icmp ugt i32 %549, 32
  br i1 %641, label %642, label %654

642:                                              ; preds = %640
  %643 = lshr i32 %560, 16
  %644 = and i32 %643, 255
  %645 = icmp eq i32 %644, 0
  %646 = select i1 %645, i32 16, i32 %644
  %647 = add nsw i32 %549, -1
  %648 = zext i32 %647 to i64
  %649 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef %648) #30
  %650 = tail call ptr @expand_simple_binop(i32 noundef %646, i32 noundef 61, ptr noundef nonnull %550, ptr noundef %649, ptr noundef nonnull %550, i32 noundef 1, i32 noundef 0) #30
  %651 = load ptr, ptr @rtl_hooks, align 8, !tbaa !187
  %652 = tail call ptr %651(i32 noundef 14, ptr noundef %551) #30
  %653 = lshr i32 %549, 1
  tail call fastcc void @expand_set_or_movmem_via_loop(ptr noundef %553, ptr noundef null, ptr noundef %94, ptr noundef null, ptr noundef %652, ptr noundef %650, i32 noundef 14, i32 noundef 1, i32 noundef %653)
  br label %711

654:                                              ; preds = %640
  %655 = icmp ugt i32 %549, 16
  br i1 %655, label %656, label %669

656:                                              ; preds = %654
  %657 = tail call fastcc ptr @ix86_expand_aligntest(ptr noundef nonnull %550, i32 noundef 16, i8 noundef zeroext 1)
  %658 = tail call ptr @change_address(ptr noundef %553, i32 noundef 16, ptr noundef %94) #30
  %659 = tail call ptr @gen_strset(ptr noundef %94, ptr noundef %658, ptr noundef %551) #30
  %660 = tail call ptr @emit_insn(ptr noundef %659) #30
  %661 = tail call ptr @gen_strset(ptr noundef %94, ptr noundef %658, ptr noundef %551) #30
  %662 = tail call ptr @emit_insn(ptr noundef %661) #30
  %663 = tail call ptr @gen_strset(ptr noundef %94, ptr noundef %658, ptr noundef %551) #30
  %664 = tail call ptr @emit_insn(ptr noundef %663) #30
  %665 = tail call ptr @gen_strset(ptr noundef %94, ptr noundef %658, ptr noundef %551) #30
  %666 = tail call ptr @emit_insn(ptr noundef %665) #30
  %667 = tail call ptr @emit_label(ptr noundef %657) #30
  %668 = getelementptr inbounds %struct.rtx_def, ptr %657, i64 0, i32 1, i32 0, i32 2
  store i32 1, ptr %668, align 8, !tbaa !16
  br label %671

669:                                              ; preds = %654
  %670 = icmp ugt i32 %549, 8
  br i1 %670, label %671, label %680

671:                                              ; preds = %669, %656
  %672 = tail call fastcc ptr @ix86_expand_aligntest(ptr noundef nonnull %550, i32 noundef 8, i8 noundef zeroext 1)
  %673 = tail call ptr @change_address(ptr noundef %553, i32 noundef 16, ptr noundef %94) #30
  %674 = tail call ptr @gen_strset(ptr noundef %94, ptr noundef %673, ptr noundef %551) #30
  %675 = tail call ptr @emit_insn(ptr noundef %674) #30
  %676 = tail call ptr @gen_strset(ptr noundef %94, ptr noundef %673, ptr noundef %551) #30
  %677 = tail call ptr @emit_insn(ptr noundef %676) #30
  %678 = tail call ptr @emit_label(ptr noundef %672) #30
  %679 = getelementptr inbounds %struct.rtx_def, ptr %672, i64 0, i32 1, i32 0, i32 2
  store i32 1, ptr %679, align 8, !tbaa !16
  br label %682

680:                                              ; preds = %669
  %681 = icmp ugt i32 %549, 4
  br i1 %681, label %682, label %691

682:                                              ; preds = %680, %671
  %683 = tail call fastcc ptr @ix86_expand_aligntest(ptr noundef nonnull %550, i32 noundef 4, i8 noundef zeroext 1)
  %684 = tail call ptr @change_address(ptr noundef %553, i32 noundef 16, ptr noundef %94) #30
  %685 = load ptr, ptr @rtl_hooks, align 8, !tbaa !187
  %686 = tail call ptr %685(i32 noundef 16, ptr noundef %551) #30
  %687 = tail call ptr @gen_strset(ptr noundef %94, ptr noundef %684, ptr noundef %686) #30
  %688 = tail call ptr @emit_insn(ptr noundef %687) #30
  %689 = tail call ptr @emit_label(ptr noundef %683) #30
  %690 = getelementptr inbounds %struct.rtx_def, ptr %683, i64 0, i32 1, i32 0, i32 2
  store i32 1, ptr %690, align 8, !tbaa !16
  br label %693

691:                                              ; preds = %680
  %692 = icmp ugt i32 %549, 2
  br i1 %692, label %693, label %702

693:                                              ; preds = %691, %682
  %694 = tail call fastcc ptr @ix86_expand_aligntest(ptr noundef nonnull %550, i32 noundef 2, i8 noundef zeroext 1)
  %695 = tail call ptr @change_address(ptr noundef %553, i32 noundef 15, ptr noundef %94) #30
  %696 = load ptr, ptr @rtl_hooks, align 8, !tbaa !187
  %697 = tail call ptr %696(i32 noundef 15, ptr noundef %551) #30
  %698 = tail call ptr @gen_strset(ptr noundef %94, ptr noundef %695, ptr noundef %697) #30
  %699 = tail call ptr @emit_insn(ptr noundef %698) #30
  %700 = tail call ptr @emit_label(ptr noundef %694) #30
  %701 = getelementptr inbounds %struct.rtx_def, ptr %694, i64 0, i32 1, i32 0, i32 2
  store i32 1, ptr %701, align 8, !tbaa !16
  br label %702

702:                                              ; preds = %693, %691
  %703 = tail call fastcc ptr @ix86_expand_aligntest(ptr noundef nonnull %550, i32 noundef 1, i8 noundef zeroext 1)
  %704 = tail call ptr @change_address(ptr noundef %553, i32 noundef 14, ptr noundef %94) #30
  %705 = load ptr, ptr @rtl_hooks, align 8, !tbaa !187
  %706 = tail call ptr %705(i32 noundef 14, ptr noundef %551) #30
  %707 = tail call ptr @gen_strset(ptr noundef %94, ptr noundef %704, ptr noundef %706) #30
  %708 = tail call ptr @emit_insn(ptr noundef %707) #30
  %709 = tail call ptr @emit_label(ptr noundef %703) #30
  %710 = getelementptr inbounds %struct.rtx_def, ptr %703, i64 0, i32 1, i32 0, i32 2
  store i32 1, ptr %710, align 8, !tbaa !16
  br label %711

711:                                              ; preds = %702, %642, %633, %629, %561, %547
  %712 = icmp eq ptr %548, null
  br i1 %712, label %715, label %713

713:                                              ; preds = %711
  %714 = tail call ptr @emit_label(ptr noundef nonnull %548) #30
  br label %715

715:                                              ; preds = %45, %711, %713, %66, %43
  %716 = phi i32 [ 0, %43 ], [ 0, %66 ], [ 1, %713 ], [ 1, %711 ], [ 0, %45 ]
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %7) #30
  ret i32 %716
}

declare ptr @set_storage_via_libcall(ptr noundef, ptr noundef, ptr noundef, i8 noundef zeroext) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc void @expand_setmem_via_rep_stos(ptr noundef %0, ptr noundef %1, ptr noundef %2, ptr noundef %3, i32 noundef %4, ptr noundef readnone %5) unnamed_addr #9 {
  %7 = getelementptr inbounds %struct.rtx_def, ptr %0, i64 0, i32 1
  %8 = load ptr, ptr %7, align 8, !tbaa !16
  %9 = icmp eq ptr %8, %1
  br i1 %9, label %10, label %14

10:                                               ; preds = %6
  %11 = load i32, ptr %0, align 8
  %12 = and i32 %11, 16711680
  %13 = icmp eq i32 %12, 65536
  br i1 %13, label %16, label %14

14:                                               ; preds = %10, %6
  %15 = tail call ptr @adjust_automodify_address_1(ptr noundef nonnull %0, i32 noundef 1, ptr noundef %1, i64 noundef 0, i32 noundef 0) #30
  br label %16

16:                                               ; preds = %14, %10
  %17 = phi ptr [ %15, %14 ], [ %0, %10 ]
  %18 = load ptr, ptr @rtl_hooks, align 8, !tbaa !187
  %19 = tail call ptr %18(i32 noundef %4, ptr noundef %2) #30
  %20 = tail call ptr @force_reg(i32 noundef %4, ptr noundef %19) #30
  %21 = zext i32 %4 to i64
  %22 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %21
  %23 = load i8, ptr %22, align 1, !tbaa !16
  %24 = zext i8 %23 to i32
  %25 = tail call fastcc ptr @scale_counter(ptr noundef %3, i32 noundef %24)
  %26 = load i32, ptr %25, align 8
  %27 = lshr i32 %26, 16
  %28 = trunc i32 %27 to i8
  switch i8 %28, label %33 [
    i8 0, label %29
    i8 16, label %31
  ]

29:                                               ; preds = %16
  %30 = tail call ptr @force_reg(i32 noundef 16, ptr noundef nonnull %25) #30
  br label %37

31:                                               ; preds = %16
  %32 = tail call ptr @copy_to_mode_reg(i32 noundef 16, ptr noundef nonnull %25) #30
  br label %37

33:                                               ; preds = %16
  %34 = tail call ptr @gen_reg_rtx(i32 noundef 16) #30
  %35 = tail call ptr @gen_zero_extendsidi2(ptr noundef %34, ptr noundef nonnull %25) #30
  %36 = tail call ptr @emit_insn(ptr noundef %35) #30
  br label %37

37:                                               ; preds = %29, %31, %33
  %38 = phi ptr [ %30, %29 ], [ %32, %31 ], [ %34, %33 ]
  %39 = icmp eq i32 %4, 14
  br i1 %39, label %48, label %40

40:                                               ; preds = %37
  %41 = load i8, ptr %22, align 1, !tbaa !16
  %42 = zext i8 %41 to i64
  %43 = tail call i32 @exact_log2(i64 noundef %42) #30
  %44 = sext i32 %43 to i64
  %45 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef %44) #30
  %46 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 65, i32 noundef 16, ptr noundef %38, ptr noundef %45) #30
  %47 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 49, i32 noundef 16, ptr noundef %46, ptr noundef %1) #30
  br label %50

48:                                               ; preds = %37
  %49 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 49, i32 noundef 16, ptr noundef %1, ptr noundef %38) #30
  br label %50

50:                                               ; preds = %48, %40
  %51 = phi ptr [ %47, %40 ], [ %49, %48 ]
  %52 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 64), align 16, !tbaa !5
  %53 = icmp eq ptr %52, %5
  br i1 %53, label %54, label %67

54:                                               ; preds = %50
  %55 = load i32, ptr %3, align 8
  %56 = and i32 %55, 65535
  %57 = icmp eq i32 %56, 30
  br i1 %57, label %58, label %67

58:                                               ; preds = %54
  %59 = getelementptr inbounds %struct.rtx_def, ptr %3, i64 0, i32 1
  %60 = load i64, ptr %59, align 8, !tbaa !16
  %61 = load i8, ptr %22, align 1, !tbaa !16
  %62 = zext i8 %61 to i64
  %63 = sub nsw i64 0, %62
  %64 = and i64 %60, %63
  %65 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef %64) #30
  %66 = tail call ptr @shallow_copy_rtx_stat(ptr noundef %17) #30
  tail call void @set_mem_size(ptr noundef %66, ptr noundef %65) #30
  br label %88

67:                                               ; preds = %54, %50
  %68 = getelementptr inbounds %struct.rtx_def, ptr %17, i64 0, i32 1, i32 0, i32 0, i64 1
  %69 = load ptr, ptr %68, align 8, !tbaa !16
  %70 = icmp eq ptr %69, null
  br i1 %70, label %75, label %71

71:                                               ; preds = %67
  %72 = getelementptr inbounds %struct.mem_attrs, ptr %69, i64 0, i32 2
  %73 = load ptr, ptr %72, align 8, !tbaa !255
  %74 = icmp eq ptr %73, null
  br i1 %74, label %88, label %87

75:                                               ; preds = %67
  %76 = load i32, ptr %17, align 8
  %77 = lshr i32 %76, 16
  %78 = and i32 %77, 255
  %79 = icmp eq i32 %78, 1
  br i1 %79, label %88, label %80

80:                                               ; preds = %75
  %81 = zext i32 %78 to i64
  %82 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %81
  %83 = load i8, ptr %82, align 1, !tbaa !16
  %84 = zext i8 %83 to i64
  %85 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef %84) #30
  %86 = icmp eq ptr %85, null
  br i1 %86, label %88, label %87

87:                                               ; preds = %80, %71
  tail call void @set_mem_size(ptr noundef nonnull %17, ptr noundef null) #30
  br label %88

88:                                               ; preds = %71, %80, %87, %75, %58
  %89 = phi ptr [ %66, %58 ], [ %17, %87 ], [ %17, %71 ], [ %17, %80 ], [ %17, %75 ]
  %90 = tail call ptr @gen_rep_stos(ptr noundef %1, ptr noundef %38, ptr noundef %89, ptr noundef %20, ptr noundef %51) #30
  %91 = tail call ptr @emit_insn(ptr noundef %90) #30
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define dso_local i32 @ix86_expand_strlen(ptr noundef %0, ptr noundef %1, ptr noundef %2, ptr noundef %3) local_unnamed_addr #9 {
  %5 = load i8, ptr getelementptr inbounds ([62 x i8], ptr @ix86_tune_features, i64 0, i64 3), align 1, !tbaa !16
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %28, label %7

7:                                                ; preds = %4
  %8 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 64), align 16, !tbaa !5
  %9 = icmp eq ptr %8, %2
  %10 = load i32, ptr @optimize, align 4
  %11 = icmp sgt i32 %10, 1
  %12 = select i1 %9, i1 %11, i1 false
  br i1 %12, label %13, label %28

13:                                               ; preds = %7
  %14 = load i32, ptr @target_flags, align 4, !tbaa !20
  %15 = and i32 %14, 256
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %17, label %28

17:                                               ; preds = %13
  %18 = tail call zeroext i8 @optimize_insn_for_size_p() #30
  %19 = icmp eq i8 %18, 0
  br i1 %19, label %20, label %28

20:                                               ; preds = %17
  %21 = load i32, ptr %3, align 8
  %22 = and i32 %21, 65535
  %23 = icmp eq i32 %22, 30
  br i1 %23, label %24, label %204

24:                                               ; preds = %20
  %25 = getelementptr inbounds %struct.rtx_def, ptr %3, i64 0, i32 1
  %26 = load i64, ptr %25, align 8, !tbaa !16
  %27 = icmp slt i64 %26, 4
  br i1 %27, label %204, label %28

28:                                               ; preds = %24, %17, %13, %7, %4
  %29 = getelementptr inbounds %struct.rtx_def, ptr %1, i64 0, i32 1
  %30 = load ptr, ptr %29, align 8, !tbaa !16
  %31 = tail call ptr @force_reg(i32 noundef 16, ptr noundef %30) #30
  %32 = tail call ptr @gen_reg_rtx(i32 noundef 16) #30
  %33 = load i8, ptr getelementptr inbounds ([62 x i8], ptr @ix86_tune_features, i64 0, i64 3), align 1, !tbaa !16
  %34 = icmp eq i8 %33, 0
  br i1 %34, label %176, label %35

35:                                               ; preds = %28
  %36 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 64), align 16, !tbaa !5
  %37 = icmp eq ptr %36, %2
  %38 = load i32, ptr @optimize, align 4
  %39 = icmp sgt i32 %38, 1
  %40 = select i1 %37, i1 %39, i1 false
  br i1 %40, label %41, label %176

41:                                               ; preds = %35
  %42 = tail call zeroext i8 @optimize_insn_for_size_p() #30
  %43 = icmp eq i8 %42, 0
  br i1 %43, label %44, label %176

44:                                               ; preds = %41
  %45 = tail call ptr @emit_move_insn(ptr noundef %0, ptr noundef %31) #30
  %46 = tail call ptr @gen_label_rtx() #30
  %47 = tail call ptr @gen_label_rtx() #30
  %48 = tail call ptr @gen_reg_rtx(i32 noundef 16) #30
  %49 = tail call ptr @gen_reg_rtx(i32 noundef 16) #30
  %50 = load i32, ptr %3, align 8
  %51 = and i32 %50, 65535
  %52 = icmp eq i32 %51, 30
  br i1 %52, label %53, label %58

53:                                               ; preds = %44
  %54 = getelementptr inbounds %struct.rtx_def, ptr %3, i64 0, i32 1
  %55 = load i64, ptr %54, align 8, !tbaa !16
  %56 = trunc i64 %55 to i32
  %57 = icmp slt i32 %56, 4
  br i1 %57, label %58, label %95

58:                                               ; preds = %53, %44
  %59 = phi i32 [ %56, %53 ], [ 0, %44 ]
  %60 = tail call ptr @gen_reg_rtx(i32 noundef 16) #30
  %61 = tail call ptr @emit_move_insn(ptr noundef %60, ptr noundef %0) #30
  %62 = icmp eq i32 %59, 2
  br i1 %62, label %71, label %63

63:                                               ; preds = %58
  %64 = tail call ptr @gen_label_rtx() #30
  %65 = tail call ptr @gen_label_rtx() #30
  %66 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef 3) #30
  %67 = tail call ptr @expand_binop(i32 noundef 16, ptr noundef nonnull getelementptr inbounds ([159 x %struct.optab_d], ptr @optab_table, i64 0, i64 41), ptr noundef %60, ptr noundef %66, ptr noundef null, i32 noundef 0, i32 noundef 2) #30
  %68 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 64), align 16, !tbaa !5
  tail call void @emit_cmp_and_jump_insns(ptr noundef %67, ptr noundef %68, i32 noundef 81, ptr noundef null, i32 noundef 16, i32 noundef 1, ptr noundef %46) #30
  %69 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 66), align 16, !tbaa !5
  tail call void @emit_cmp_and_jump_insns(ptr noundef %67, ptr noundef %69, i32 noundef 81, ptr noundef null, i32 noundef 16, i32 noundef 1, ptr noundef %65) #30
  %70 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 66), align 16, !tbaa !5
  tail call void @emit_cmp_and_jump_insns(ptr noundef %67, ptr noundef %70, i32 noundef 87, ptr noundef null, i32 noundef 16, i32 noundef 1, ptr noundef %64) #30
  br label %75

71:                                               ; preds = %58
  %72 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 66), align 16, !tbaa !5
  %73 = tail call ptr @expand_binop(i32 noundef 16, ptr noundef nonnull getelementptr inbounds ([159 x %struct.optab_d], ptr @optab_table, i64 0, i64 41), ptr noundef %60, ptr noundef %72, ptr noundef null, i32 noundef 0, i32 noundef 2) #30
  %74 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 64), align 16, !tbaa !5
  tail call void @emit_cmp_and_jump_insns(ptr noundef %73, ptr noundef %74, i32 noundef 81, ptr noundef null, i32 noundef 16, i32 noundef 1, ptr noundef %46) #30
  br label %75

75:                                               ; preds = %71, %63
  %76 = phi ptr [ %64, %63 ], [ null, %71 ]
  %77 = phi ptr [ %65, %63 ], [ null, %71 ]
  %78 = tail call ptr @change_address(ptr noundef nonnull %1, i32 noundef 14, ptr noundef %0) #30
  %79 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 64), align 16, !tbaa !5
  tail call void @emit_cmp_and_jump_insns(ptr noundef %78, ptr noundef %79, i32 noundef 81, ptr noundef null, i32 noundef 14, i32 noundef 1, ptr noundef %47) #30
  %80 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 65), align 8, !tbaa !5
  %81 = tail call ptr @gen_addsi3(ptr noundef %0, ptr noundef %0, ptr noundef %80) #30, !callees !160
  %82 = tail call ptr @emit_insn(ptr noundef %81) #30
  br i1 %62, label %90, label %83

83:                                               ; preds = %75
  %84 = tail call ptr @emit_label(ptr noundef %77) #30
  %85 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 64), align 16, !tbaa !5
  tail call void @emit_cmp_and_jump_insns(ptr noundef %78, ptr noundef %85, i32 noundef 81, ptr noundef null, i32 noundef 14, i32 noundef 1, ptr noundef %47) #30
  %86 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 65), align 8, !tbaa !5
  %87 = tail call ptr @gen_addsi3(ptr noundef %0, ptr noundef %0, ptr noundef %86) #30, !callees !160
  %88 = tail call ptr @emit_insn(ptr noundef %87) #30
  %89 = tail call ptr @emit_label(ptr noundef %76) #30
  br label %90

90:                                               ; preds = %83, %75
  %91 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 64), align 16, !tbaa !5
  tail call void @emit_cmp_and_jump_insns(ptr noundef %78, ptr noundef %91, i32 noundef 81, ptr noundef null, i32 noundef 14, i32 noundef 1, ptr noundef %47) #30
  %92 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 65), align 8, !tbaa !5
  %93 = tail call ptr @gen_addsi3(ptr noundef %0, ptr noundef %0, ptr noundef %92) #30, !callees !160
  %94 = tail call ptr @emit_insn(ptr noundef %93) #30
  br label %95

95:                                               ; preds = %90, %53
  %96 = tail call ptr @emit_label(ptr noundef %46) #30
  %97 = tail call ptr @change_address(ptr noundef nonnull %1, i32 noundef 16, ptr noundef %0) #30
  %98 = tail call ptr @emit_move_insn(ptr noundef %49, ptr noundef %97) #30
  %99 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef 4) #30
  %100 = tail call ptr @gen_addsi3(ptr noundef %0, ptr noundef %0, ptr noundef %99) #30, !callees !160
  %101 = tail call ptr @emit_insn(ptr noundef %100) #30
  %102 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef -16843009) #30
  %103 = tail call ptr @gen_addsi3(ptr noundef %48, ptr noundef %49, ptr noundef %102) #30
  %104 = tail call ptr @emit_insn(ptr noundef %103) #30
  %105 = tail call ptr @gen_one_cmplsi2(ptr noundef %49, ptr noundef %49) #30
  %106 = tail call ptr @emit_insn(ptr noundef %105) #30
  %107 = tail call ptr @gen_andsi3(ptr noundef %48, ptr noundef %48, ptr noundef %49) #30
  %108 = tail call ptr @emit_insn(ptr noundef %107) #30
  %109 = tail call ptr @gen_int_mode(i64 noundef 2155905152, i32 noundef 16) #30
  %110 = tail call ptr @gen_andsi3(ptr noundef %48, ptr noundef %48, ptr noundef %109) #30
  %111 = tail call ptr @emit_insn(ptr noundef %110) #30
  %112 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 64), align 16, !tbaa !5
  tail call void @emit_cmp_and_jump_insns(ptr noundef %48, ptr noundef %112, i32 noundef 81, ptr noundef null, i32 noundef 16, i32 noundef 1, ptr noundef %46) #30
  %113 = load i8, ptr @ix86_arch_features, align 1, !tbaa !16
  %114 = icmp eq i8 %113, 0
  br i1 %114, label %141, label %115

115:                                              ; preds = %95
  %116 = tail call ptr @gen_reg_rtx(i32 noundef 16) #30
  %117 = tail call ptr @gen_reg_rtx(i32 noundef 16) #30
  %118 = tail call ptr @emit_move_insn(ptr noundef %116, ptr noundef %48) #30
  %119 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef 16) #30
  %120 = tail call ptr @gen_lshrsi3(ptr noundef %116, ptr noundef %116, ptr noundef %119) #30
  %121 = tail call ptr @emit_insn(ptr noundef %120) #30
  %122 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef 32896) #30
  %123 = tail call ptr @gen_testsi_ccno_1(ptr noundef %48, ptr noundef %122) #30
  %124 = tail call ptr @emit_insn(ptr noundef %123) #30
  %125 = tail call ptr @gen_rtx_REG(i32 noundef 5, i32 noundef 17) #30
  %126 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 64), align 16, !tbaa !5
  %127 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 81, i32 noundef 0, ptr noundef %125, ptr noundef %126) #30
  %128 = tail call ptr @gen_rtx_fmt_eee_stat(i32 noundef 47, i32 noundef 16, ptr noundef %127, ptr noundef %116, ptr noundef %48) #30
  %129 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 23, i32 noundef 0, ptr noundef %48, ptr noundef %128) #30
  %130 = tail call ptr @emit_insn(ptr noundef %129) #30
  %131 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 66), align 16, !tbaa !5
  %132 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 49, i32 noundef 16, ptr noundef %0, ptr noundef %131) #30
  %133 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 23, i32 noundef 16, ptr noundef %117, ptr noundef %132) #30
  %134 = tail call ptr @emit_insn(ptr noundef %133) #30
  %135 = tail call ptr @gen_rtx_REG(i32 noundef 5, i32 noundef 17) #30
  %136 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 64), align 16, !tbaa !5
  %137 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 81, i32 noundef 0, ptr noundef %135, ptr noundef %136) #30
  %138 = tail call ptr @gen_rtx_fmt_eee_stat(i32 noundef 47, i32 noundef 16, ptr noundef %137, ptr noundef %117, ptr noundef %0) #30
  %139 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 23, i32 noundef 0, ptr noundef %0, ptr noundef %138) #30
  %140 = tail call ptr @emit_insn(ptr noundef %139) #30
  br label %163

141:                                              ; preds = %95
  %142 = tail call ptr @gen_label_rtx() #30
  %143 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef 32896) #30
  %144 = tail call ptr @gen_testsi_ccno_1(ptr noundef %48, ptr noundef %143) #30
  %145 = tail call ptr @emit_insn(ptr noundef %144) #30
  %146 = tail call ptr @gen_rtx_REG(i32 noundef 5, i32 noundef 17) #30
  %147 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 64), align 16, !tbaa !5
  %148 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 80, i32 noundef 0, ptr noundef %146, ptr noundef %147) #30
  %149 = tail call ptr @gen_rtx_fmt_u_stat(i32 noundef 44, i32 noundef 0, ptr noundef %142) #30
  %150 = load ptr, ptr @global_rtl, align 16, !tbaa !5
  %151 = tail call ptr @gen_rtx_fmt_eee_stat(i32 noundef 47, i32 noundef 0, ptr noundef %148, ptr noundef %149, ptr noundef %150) #30
  %152 = load ptr, ptr @global_rtl, align 16, !tbaa !5
  %153 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 23, i32 noundef 0, ptr noundef %152, ptr noundef %151) #30
  %154 = tail call ptr @emit_jump_insn(ptr noundef %153) #30
  %155 = getelementptr inbounds %struct.rtx_def, ptr %154, i64 1, i32 1, i32 0, i32 0, i64 2
  store ptr %142, ptr %155, align 8, !tbaa !16
  %156 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef 16) #30
  %157 = tail call ptr @gen_lshrsi3(ptr noundef %48, ptr noundef %48, ptr noundef %156) #30
  %158 = tail call ptr @emit_insn(ptr noundef %157) #30
  %159 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 66), align 16, !tbaa !5
  %160 = tail call ptr @gen_addsi3(ptr noundef %0, ptr noundef %0, ptr noundef %159) #30, !callees !160
  %161 = tail call ptr @emit_insn(ptr noundef %160) #30
  %162 = tail call ptr @emit_label(ptr noundef %142) #30
  br label %163

163:                                              ; preds = %115, %141
  %164 = load ptr, ptr @rtl_hooks, align 8, !tbaa !187
  %165 = tail call ptr %164(i32 noundef 14, ptr noundef %48) #30
  %166 = tail call ptr @gen_addqi3_cc(ptr noundef %165, ptr noundef %165, ptr noundef %165) #30
  %167 = tail call ptr @emit_insn(ptr noundef %166) #30
  %168 = tail call ptr @gen_rtx_REG(i32 noundef 2, i32 noundef 17) #30
  %169 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 64), align 16, !tbaa !5
  %170 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 89, i32 noundef 0, ptr noundef %168, ptr noundef %169) #30
  %171 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef 3) #30
  %172 = tail call ptr @gen_subsi3_carry(ptr noundef %0, ptr noundef %0, ptr noundef %171, ptr noundef %168, ptr noundef %170) #30, !callees !264
  %173 = tail call ptr @emit_insn(ptr noundef %172) #30
  %174 = tail call ptr @emit_label(ptr noundef %47) #30
  %175 = tail call ptr @gen_subsi3(ptr noundef %0, ptr noundef %0, ptr noundef %31) #30, !callees !265
  br label %201

176:                                              ; preds = %41, %35, %28
  %177 = load i8, ptr @fixed_regs, align 16, !tbaa !16
  %178 = icmp ne i8 %177, 0
  %179 = load i8, ptr getelementptr inbounds ([53 x i8], ptr @fixed_regs, i64 0, i64 2), align 2
  %180 = icmp ne i8 %179, 0
  %181 = select i1 %178, i1 true, i1 %180
  %182 = load i8, ptr getelementptr inbounds ([53 x i8], ptr @fixed_regs, i64 0, i64 5), align 1
  %183 = icmp ne i8 %182, 0
  %184 = select i1 %181, i1 true, i1 %183
  br i1 %184, label %204, label %185

185:                                              ; preds = %176
  %186 = tail call ptr @gen_reg_rtx(i32 noundef 16) #30
  %187 = tail call ptr @gen_reg_rtx(i32 noundef 16) #30
  %188 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 63), align 8, !tbaa !5
  %189 = tail call ptr @force_reg(i32 noundef 16, ptr noundef %188) #30
  %190 = tail call ptr @emit_move_insn(ptr noundef %187, ptr noundef %31) #30
  %191 = tail call ptr @force_reg(i32 noundef 14, ptr noundef %2) #30
  %192 = tail call ptr @replace_equiv_address_nv(ptr noundef nonnull %1, ptr noundef %187) #30
  %193 = tail call ptr (i32, ...) @gen_rtvec(i32 noundef 4, ptr noundef %192, ptr noundef %191, ptr noundef %3, ptr noundef %189) #30
  %194 = tail call ptr @gen_rtx_fmt_Ei_stat(i32 noundef 18, i32 noundef 16, ptr noundef %193, i32 noundef 30) #30
  %195 = tail call ptr @gen_strlenqi_1(ptr noundef %32, ptr noundef %187, ptr noundef %194) #30
  %196 = tail call ptr @emit_insn(ptr noundef %195) #30
  %197 = tail call ptr @gen_one_cmplsi2(ptr noundef %186, ptr noundef %32) #30, !callees !266
  %198 = tail call ptr @emit_insn(ptr noundef %197) #30
  %199 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 63), align 8, !tbaa !5
  %200 = tail call ptr @gen_addsi3(ptr noundef %0, ptr noundef %186, ptr noundef %199) #30, !callees !160
  br label %201

201:                                              ; preds = %185, %163
  %202 = phi ptr [ %175, %163 ], [ %200, %185 ]
  %203 = tail call ptr @emit_insn(ptr noundef %202) #30
  br label %204

204:                                              ; preds = %201, %176, %20, %24
  %205 = phi i32 [ 0, %24 ], [ 0, %20 ], [ 0, %176 ], [ 1, %201 ]
  ret i32 %205
}

declare ptr @replace_equiv_address_nv(ptr noundef, ptr noundef) local_unnamed_addr #3

declare ptr @gen_rtx_fmt_Ei_stat(i32 noundef, i32 noundef, ptr noundef, i32 noundef) local_unnamed_addr #3

declare ptr @gen_strlenqi_1(ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define dso_local ptr @construct_plt_address(ptr noundef %0) local_unnamed_addr #9 {
  %2 = tail call ptr @gen_reg_rtx(i32 noundef 16) #30
  %3 = tail call ptr (i32, ...) @gen_rtvec(i32 noundef 1, ptr noundef %0) #30
  %4 = tail call ptr @gen_rtx_fmt_Ei_stat(i32 noundef 18, i32 noundef 16, ptr noundef %3, i32 noundef 9) #30
  %5 = load i32, ptr %0, align 8
  %6 = and i32 %5, 65535
  %7 = icmp eq i32 %6, 45
  br i1 %7, label %9, label %8

8:                                                ; preds = %1
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 19207, ptr noundef nonnull @.str.131) #30
  br label %9

9:                                                ; preds = %1, %8
  %10 = load i32, ptr @ix86_cmodel, align 4, !tbaa !16
  %11 = icmp eq i32 %10, 7
  br i1 %11, label %13, label %12

12:                                               ; preds = %9
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 19208, ptr noundef nonnull @.str.131) #30
  br label %13

13:                                               ; preds = %9, %12
  %14 = tail call ptr @gen_rtx_fmt_e_stat(i32 noundef 35, i32 noundef 16, ptr noundef %4) #30
  %15 = tail call ptr @emit_move_insn(ptr noundef %2, ptr noundef %14) #30
  %16 = load ptr, ptr @pic_offset_table_rtx, align 8, !tbaa !5
  %17 = tail call ptr @gen_adddi3(ptr noundef %2, ptr noundef %2, ptr noundef %16) #30
  %18 = tail call ptr @emit_insn(ptr noundef %17) #30
  ret ptr %2
}

declare ptr @gen_adddi3(ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define dso_local void @ix86_expand_call(ptr noundef %0, ptr noundef %1, ptr noundef %2, ptr nocapture noundef readnone %3, ptr noundef %4, i32 noundef %5) local_unnamed_addr #9 {
  %7 = alloca ptr, align 8
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %7) #30
  store ptr null, ptr %7, align 8, !tbaa !5
  %8 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 64), align 16, !tbaa !5
  %9 = icmp eq ptr %8, %4
  %10 = select i1 %9, ptr null, ptr %4
  %11 = load i32, ptr @flag_pic, align 4, !tbaa !20
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %26, label %13

13:                                               ; preds = %6
  %14 = getelementptr inbounds %struct.rtx_def, ptr %1, i64 0, i32 1
  %15 = load ptr, ptr %14, align 8, !tbaa !16
  %16 = load i32, ptr %15, align 8
  %17 = and i32 %16, 65535
  %18 = icmp eq i32 %17, 45
  br i1 %18, label %19, label %26

19:                                               ; preds = %13
  %20 = getelementptr inbounds %struct.rtx_def, ptr %15, i64 0, i32 1, i32 0, i32 0, i64 1
  %21 = load i32, ptr %20, align 8, !tbaa !16
  %22 = and i32 %21, 2
  %23 = icmp eq i32 %22, 0
  br i1 %23, label %24, label %26

24:                                               ; preds = %19
  %25 = load ptr, ptr @pic_offset_table_rtx, align 8, !tbaa !5
  call void @use_reg(ptr noundef nonnull %7, ptr noundef %25) #30
  br label %26

26:                                               ; preds = %24, %19, %13, %6
  %27 = load i32, ptr @ix86_cmodel, align 4, !tbaa !16
  %28 = icmp eq i32 %27, 7
  br i1 %28, label %29, label %45

29:                                               ; preds = %26
  %30 = load i32, ptr %1, align 8
  %31 = and i32 %30, 65535
  %32 = icmp eq i32 %31, 43
  br i1 %32, label %33, label %45

33:                                               ; preds = %29
  %34 = getelementptr inbounds %struct.rtx_def, ptr %1, i64 0, i32 1
  %35 = load ptr, ptr %34, align 8, !tbaa !16
  %36 = load i32, ptr %35, align 8
  %37 = and i32 %36, 65535
  %38 = icmp eq i32 %37, 45
  br i1 %38, label %39, label %45

39:                                               ; preds = %33
  %40 = call i32 @local_symbolic_operand(ptr noundef nonnull %35, i32 noundef 0) #30
  %41 = icmp eq i32 %40, 0
  br i1 %41, label %42, label %45

42:                                               ; preds = %39
  %43 = load ptr, ptr %34, align 8, !tbaa !16
  %44 = call ptr @construct_plt_address(ptr noundef %43)
  br label %59

45:                                               ; preds = %39, %33, %29, %26
  %46 = icmp eq i32 %5, 0
  %47 = getelementptr inbounds %struct.rtx_def, ptr %1, i64 0, i32 1
  %48 = load ptr, ptr %47, align 8, !tbaa !16
  br i1 %46, label %52, label %49

49:                                               ; preds = %45
  %50 = call i32 @sibcall_insn_operand(ptr noundef %48, i32 noundef 16) #30
  %51 = icmp eq i32 %50, 0
  br i1 %51, label %55, label %62

52:                                               ; preds = %45
  %53 = call i32 @call_insn_operand(ptr noundef %48, i32 noundef 16) #30
  %54 = icmp eq i32 %53, 0
  br i1 %54, label %55, label %62

55:                                               ; preds = %52, %49
  %56 = getelementptr inbounds %struct.rtx_def, ptr %1, i64 0, i32 1
  %57 = load ptr, ptr %56, align 8, !tbaa !16
  %58 = call ptr @copy_to_mode_reg(i32 noundef 16, ptr noundef %57) #30
  br label %59

59:                                               ; preds = %42, %55
  %60 = phi ptr [ %58, %55 ], [ %44, %42 ]
  %61 = call ptr @gen_rtx_MEM(i32 noundef 14, ptr noundef %60) #30
  br label %62

62:                                               ; preds = %59, %49, %52
  %63 = phi ptr [ %1, %49 ], [ %1, %52 ], [ %61, %59 ]
  %64 = call ptr @gen_rtx_fmt_ee_stat(i32 noundef 26, i32 noundef 0, ptr noundef %63, ptr noundef %2) #30
  %65 = icmp eq ptr %0, null
  br i1 %65, label %68, label %66

66:                                               ; preds = %62
  %67 = call ptr @gen_rtx_fmt_ee_stat(i32 noundef 23, i32 noundef 0, ptr noundef nonnull %0, ptr noundef %64) #30
  br label %68

68:                                               ; preds = %66, %62
  %69 = phi ptr [ %67, %66 ], [ %64, %62 ]
  %70 = icmp eq ptr %10, null
  br i1 %70, label %78, label %71

71:                                               ; preds = %68
  %72 = load ptr, ptr getelementptr inbounds ([11 x ptr], ptr @global_rtl, i64 0, i64 2), align 16, !tbaa !5
  %73 = call ptr @gen_rtx_fmt_ee_stat(i32 noundef 49, i32 noundef 16, ptr noundef %72, ptr noundef nonnull %10) #30
  %74 = load ptr, ptr getelementptr inbounds ([11 x ptr], ptr @global_rtl, i64 0, i64 2), align 16, !tbaa !5
  %75 = call ptr @gen_rtx_fmt_ee_stat(i32 noundef 23, i32 noundef 0, ptr noundef %74, ptr noundef %73) #30
  %76 = call ptr (i32, ...) @gen_rtvec(i32 noundef 2, ptr noundef %69, ptr noundef %75) #30
  %77 = call ptr @gen_rtx_fmt_E_stat(i32 noundef 15, i32 noundef 0, ptr noundef %76) #30
  br label %78

78:                                               ; preds = %71, %68
  %79 = phi ptr [ %77, %71 ], [ %69, %68 ]
  %80 = call ptr @emit_call_insn(ptr noundef %79) #30
  %81 = load ptr, ptr %7, align 8, !tbaa !5
  %82 = icmp eq ptr %81, null
  br i1 %82, label %85, label %83

83:                                               ; preds = %78
  %84 = getelementptr inbounds %struct.rtx_def, ptr %80, i64 1, i32 1, i32 0, i32 0, i64 2
  store ptr %81, ptr %84, align 8, !tbaa !16
  br label %85

85:                                               ; preds = %83, %78
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %7) #30
  ret void
}

declare void @use_reg(ptr noundef, ptr noundef) local_unnamed_addr #3

declare i32 @local_symbolic_operand(ptr noundef, i32 noundef) local_unnamed_addr #3

declare i32 @sibcall_insn_operand(ptr noundef, i32 noundef) local_unnamed_addr #3

declare i32 @call_insn_operand(ptr noundef, i32 noundef) local_unnamed_addr #3

declare ptr @emit_call_insn(ptr noundef) local_unnamed_addr #3

declare ptr @ggc_alloc_stat(i64 noundef) local_unnamed_addr #3

declare ptr @assign_stack_local(i32 noundef, i64 noundef, i32 noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define dso_local ptr @ix86_tls_get_addr() local_unnamed_addr #9 {
  %1 = load ptr, ptr @ix86_tls_symbol, align 8, !tbaa !5
  %2 = icmp eq ptr %1, null
  br i1 %2, label %3, label %8

3:                                                ; preds = %0
  %4 = load i32, ptr @ix86_tls_dialect, align 4
  %5 = icmp ult i32 %4, 2
  %6 = select i1 %5, ptr @.str.276, ptr @.str.277
  %7 = tail call ptr @gen_rtx_fmt_s00_stat(i32 noundef 45, i32 noundef 16, ptr noundef nonnull %6) #30
  store ptr %7, ptr @ix86_tls_symbol, align 8, !tbaa !5
  br label %8

8:                                                ; preds = %3, %0
  %9 = phi ptr [ %7, %3 ], [ %1, %0 ]
  ret ptr %9
}

; Function Attrs: nounwind sspstrong uwtable
define dso_local ptr @ix86_tls_module_base() local_unnamed_addr #9 {
  %1 = load ptr, ptr @ix86_tls_module_base_symbol, align 8, !tbaa !5
  %2 = icmp eq ptr %1, null
  br i1 %2, label %3, label %8

3:                                                ; preds = %0
  %4 = tail call ptr @gen_rtx_fmt_s00_stat(i32 noundef 45, i32 noundef 16, ptr noundef nonnull @.str.278) #30
  store ptr %4, ptr @ix86_tls_module_base_symbol, align 8, !tbaa !5
  %5 = getelementptr inbounds %struct.rtx_def, ptr %4, i64 0, i32 1, i32 0, i32 0, i64 1
  %6 = load i32, ptr %5, align 8, !tbaa !16
  %7 = or i32 %6, 16
  store i32 %7, ptr %5, align 8, !tbaa !16
  br label %8

8:                                                ; preds = %3, %0
  %9 = phi ptr [ %4, %3 ], [ %1, %0 ]
  ret ptr %9
}

; Function Attrs: nounwind sspstrong uwtable
define dso_local i32 @memory_address_length(ptr noundef %0) local_unnamed_addr #9 {
  %2 = alloca %struct.ix86_address, align 8
  call void @llvm.lifetime.start.p0(i64 40, ptr nonnull %2) #30
  %3 = load i32, ptr %0, align 8
  %4 = trunc i32 %3 to i16
  %5 = add i16 %4, -74
  %6 = icmp ult i16 %5, 6
  br i1 %6, label %131, label %7

7:                                                ; preds = %131, %1
  %8 = call i32 @ix86_decompose_address(ptr noundef nonnull %0, ptr noundef nonnull %2), !range !172
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %10, label %11

10:                                               ; preds = %7
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 19412, ptr noundef nonnull @.str.131) #30
  br label %11

11:                                               ; preds = %7, %10
  %12 = load ptr, ptr %2, align 8, !tbaa !166
  %13 = icmp eq ptr %12, null
  br i1 %13, label %21, label %14

14:                                               ; preds = %11
  %15 = load i32, ptr %12, align 8
  %16 = and i32 %15, 65535
  %17 = icmp eq i32 %16, 39
  br i1 %17, label %18, label %21

18:                                               ; preds = %14
  %19 = getelementptr inbounds %struct.rtx_def, ptr %12, i64 0, i32 1
  %20 = load ptr, ptr %19, align 8, !tbaa !16
  br label %21

21:                                               ; preds = %18, %14, %11
  %22 = phi ptr [ %20, %18 ], [ %12, %14 ], [ null, %11 ]
  %23 = getelementptr inbounds %struct.ix86_address, ptr %2, i64 0, i32 1
  %24 = load ptr, ptr %23, align 8, !tbaa !168
  %25 = icmp eq ptr %24, null
  br i1 %25, label %39, label %26

26:                                               ; preds = %21
  %27 = load i32, ptr %24, align 8
  %28 = and i32 %27, 65535
  %29 = icmp eq i32 %28, 39
  br i1 %29, label %35, label %30

30:                                               ; preds = %26
  %31 = getelementptr inbounds %struct.ix86_address, ptr %2, i64 0, i32 2
  %32 = load ptr, ptr %31, align 8, !tbaa !169
  %33 = icmp eq ptr %32, null
  %34 = icmp ne ptr %22, null
  br i1 %33, label %81, label %67

35:                                               ; preds = %26
  %36 = getelementptr inbounds %struct.rtx_def, ptr %24, i64 0, i32 1
  %37 = load ptr, ptr %36, align 8, !tbaa !16
  %38 = icmp ne ptr %37, null
  br label %39

39:                                               ; preds = %35, %21
  %40 = phi i1 [ %38, %35 ], [ false, %21 ]
  %41 = getelementptr inbounds %struct.ix86_address, ptr %2, i64 0, i32 2
  %42 = load ptr, ptr %41, align 8, !tbaa !169
  %43 = icmp eq ptr %22, null
  %44 = select i1 %43, i1 true, i1 %40
  %45 = icmp ne ptr %42, null
  %46 = select i1 %44, i1 true, i1 %45
  br i1 %46, label %61, label %47

47:                                               ; preds = %39
  %48 = load i32, ptr %0, align 8
  %49 = and i32 %48, 65535
  %50 = icmp eq i32 %49, 37
  br i1 %50, label %51, label %123

51:                                               ; preds = %47
  %52 = load ptr, ptr getelementptr inbounds ([11 x ptr], ptr @global_rtl, i64 0, i64 5), align 8, !tbaa !5
  %53 = icmp eq ptr %52, %0
  %54 = load ptr, ptr getelementptr inbounds ([11 x ptr], ptr @global_rtl, i64 0, i64 3), align 8
  %55 = icmp eq ptr %54, %0
  %56 = select i1 %53, i1 true, i1 %55
  br i1 %56, label %60, label %57

57:                                               ; preds = %51
  %58 = getelementptr i8, ptr %0, i64 8
  %59 = load i32, ptr %58, align 8, !tbaa !16
  switch i32 %59, label %123 [
    i32 7, label %60
    i32 6, label %60
    i32 41, label %60
    i32 42, label %60
  ]

60:                                               ; preds = %57, %57, %57, %57, %51
  br label %123

61:                                               ; preds = %39
  %62 = icmp eq ptr %42, null
  %63 = icmp ne ptr %22, null
  %64 = or i1 %63, %62
  %65 = select i1 %64, i1 true, i1 %40
  br i1 %65, label %66, label %123

66:                                               ; preds = %61
  br i1 %45, label %67, label %81

67:                                               ; preds = %30, %66
  %68 = phi ptr [ %32, %30 ], [ %42, %66 ]
  %69 = phi i1 [ true, %30 ], [ %40, %66 ]
  %70 = phi i1 [ %34, %30 ], [ %63, %66 ]
  br i1 %70, label %71, label %80

71:                                               ; preds = %67
  %72 = load i32, ptr %68, align 8
  %73 = and i32 %72, 65535
  %74 = icmp eq i32 %73, 30
  br i1 %74, label %75, label %80

75:                                               ; preds = %71
  %76 = getelementptr inbounds %struct.rtx_def, ptr %68, i64 0, i32 1
  %77 = load i64, ptr %76, align 8, !tbaa !16
  %78 = add i64 %77, -128
  %79 = icmp ult i64 %78, -256
  br i1 %79, label %80, label %95

80:                                               ; preds = %71, %75, %67
  br label %95

81:                                               ; preds = %30, %66
  %82 = phi i1 [ true, %30 ], [ %40, %66 ]
  %83 = phi i1 [ %34, %30 ], [ %63, %66 ]
  br i1 %83, label %84, label %105

84:                                               ; preds = %81
  %85 = load i32, ptr %22, align 8
  %86 = and i32 %85, 65535
  %87 = icmp eq i32 %86, 37
  br i1 %87, label %88, label %95

88:                                               ; preds = %84
  %89 = getelementptr i8, ptr %22, i64 8
  %90 = load i32, ptr %89, align 8, !tbaa !16
  %91 = icmp eq i32 %90, 6
  %92 = icmp eq i32 %90, 42
  %93 = or i1 %91, %92
  %94 = zext i1 %93 to i32
  br label %95

95:                                               ; preds = %88, %75, %84, %80
  %96 = phi i1 [ %69, %80 ], [ %82, %84 ], [ %69, %75 ], [ %82, %88 ]
  %97 = phi i1 [ %70, %80 ], [ true, %84 ], [ true, %75 ], [ true, %88 ]
  %98 = phi i32 [ 4, %80 ], [ 0, %84 ], [ 1, %75 ], [ %94, %88 ]
  %99 = load ptr, ptr getelementptr inbounds ([11 x ptr], ptr @global_rtl, i64 0, i64 5), align 8
  %100 = icmp eq ptr %22, %99
  %101 = select i1 %96, i1 true, i1 %100
  %102 = load ptr, ptr getelementptr inbounds ([11 x ptr], ptr @global_rtl, i64 0, i64 3), align 8
  %103 = icmp eq ptr %22, %102
  %104 = select i1 %101, i1 true, i1 %103
  br i1 %104, label %120, label %112

105:                                              ; preds = %81
  %106 = load ptr, ptr getelementptr inbounds ([11 x ptr], ptr @global_rtl, i64 0, i64 5), align 8
  %107 = icmp eq ptr %106, null
  %108 = select i1 %82, i1 true, i1 %107
  %109 = load ptr, ptr getelementptr inbounds ([11 x ptr], ptr @global_rtl, i64 0, i64 3), align 8
  %110 = icmp eq ptr %109, null
  %111 = select i1 %108, i1 true, i1 %110
  br i1 %111, label %120, label %123

112:                                              ; preds = %95
  br i1 %97, label %113, label %123

113:                                              ; preds = %112
  %114 = load i32, ptr %22, align 8
  %115 = and i32 %114, 65535
  %116 = icmp eq i32 %115, 37
  br i1 %116, label %117, label %123

117:                                              ; preds = %113
  %118 = getelementptr i8, ptr %22, i64 8
  %119 = load i32, ptr %118, align 8, !tbaa !16
  switch i32 %119, label %123 [
    i32 7, label %120
    i32 41, label %120
  ]

120:                                              ; preds = %117, %117, %105, %95
  %121 = phi i32 [ 0, %105 ], [ %98, %117 ], [ %98, %95 ], [ %98, %117 ]
  %122 = add nuw nsw i32 %121, 1
  br label %123

123:                                              ; preds = %117, %57, %105, %61, %120, %113, %112, %47, %60
  %124 = phi i32 [ %122, %120 ], [ %98, %113 ], [ %98, %112 ], [ 1, %60 ], [ 0, %47 ], [ 4, %61 ], [ 0, %105 ], [ 0, %57 ], [ %98, %117 ]
  %125 = getelementptr inbounds %struct.ix86_address, ptr %2, i64 0, i32 4
  %126 = load i32, ptr %125, align 8, !tbaa !171
  %127 = add i32 %126, -1
  %128 = icmp ult i32 %127, 2
  %129 = zext i1 %128 to i32
  %130 = add nuw nsw i32 %124, %129
  br label %136

131:                                              ; preds = %1
  %132 = trunc i16 %5 to i8
  %133 = lshr i8 57, %132
  %134 = and i8 %133, 1
  %135 = icmp eq i8 %134, 0
  br i1 %135, label %7, label %136

136:                                              ; preds = %131, %123
  %137 = phi i32 [ %130, %123 ], [ 0, %131 ]
  call void @llvm.lifetime.end.p0(i64 40, ptr nonnull %2) #30
  ret i32 %137
}

; Function Attrs: nounwind sspstrong uwtable
define dso_local i32 @ix86_attr_length_immediate_default(ptr noundef %0, i32 noundef %1) local_unnamed_addr #9 {
  tail call void @extract_insn_cached(ptr noundef %0) #30
  %3 = load i8, ptr getelementptr inbounds (%struct.recog_data, ptr @recog_data, i64 0, i32 7), align 2, !tbaa !267
  %4 = icmp sgt i8 %3, 0
  br i1 %4, label %5, label %80

5:                                                ; preds = %2
  %6 = zext i8 %3 to i64
  %7 = add nuw nsw i64 %6, 4294967295
  %8 = icmp eq i32 %1, 0
  %9 = and i64 %7, 4294967295
  br i1 %8, label %10, label %37

10:                                               ; preds = %5, %33
  %11 = phi i64 [ %35, %33 ], [ %9, %5 ]
  %12 = phi i32 [ %34, %33 ], [ 0, %5 ]
  %13 = getelementptr inbounds [30 x ptr], ptr @recog_data, i64 0, i64 %11
  %14 = load ptr, ptr %13, align 8, !tbaa !5
  %15 = load i32, ptr %14, align 8
  %16 = and i32 %15, 65535
  %17 = zext i32 %16 to i64
  %18 = getelementptr inbounds [139 x i32], ptr @rtx_class, i64 0, i64 %17
  %19 = load i32, ptr %18, align 4, !tbaa !16
  %20 = icmp eq i32 %19, 9
  br i1 %20, label %21, label %33

21:                                               ; preds = %10
  %22 = tail call i32 @get_attr_mode(ptr noundef %0) #30
  %23 = icmp eq i32 %12, 0
  br i1 %23, label %25, label %24

24:                                               ; preds = %21
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 19525, ptr noundef nonnull @.str.131) #30
  br label %25

25:                                               ; preds = %24, %21
  %26 = add i32 %22, -2
  %27 = icmp ult i32 %26, 4
  br i1 %27, label %29, label %28

28:                                               ; preds = %25
  tail call void @_fatal_insn(ptr noundef nonnull @.str.279, ptr noundef %0, ptr noundef nonnull @.str.130, i32 noundef 19565, ptr noundef nonnull @.str.131) #30
  br label %33

29:                                               ; preds = %25
  %30 = sext i32 %26 to i64
  %31 = getelementptr inbounds [4 x i32], ptr @switch.table.ix86_attr_length_immediate_default.1387, i64 0, i64 %30
  %32 = load i32, ptr %31, align 4
  br label %33

33:                                               ; preds = %29, %28, %10
  %34 = phi i32 [ %12, %10 ], [ %12, %28 ], [ %32, %29 ]
  %35 = add nsw i64 %11, -1
  %36 = icmp sgt i64 %11, 0
  br i1 %36, label %10, label %80, !llvm.loop !269

37:                                               ; preds = %5, %76
  %38 = phi i64 [ %78, %76 ], [ %9, %5 ]
  %39 = phi i32 [ %77, %76 ], [ 0, %5 ]
  %40 = getelementptr inbounds [30 x ptr], ptr @recog_data, i64 0, i64 %38
  %41 = load ptr, ptr %40, align 8, !tbaa !5
  %42 = load i32, ptr %41, align 8
  %43 = and i32 %42, 65535
  %44 = zext i32 %43 to i64
  %45 = getelementptr inbounds [139 x i32], ptr @rtx_class, i64 0, i64 %44
  %46 = load i32, ptr %45, align 4, !tbaa !16
  %47 = icmp eq i32 %46, 9
  br i1 %47, label %48, label %76

48:                                               ; preds = %37
  %49 = tail call i32 @get_attr_mode(ptr noundef %0) #30
  %50 = icmp eq i32 %39, 0
  br i1 %50, label %52, label %51

51:                                               ; preds = %48
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 19525, ptr noundef nonnull @.str.131) #30
  br label %52

52:                                               ; preds = %48, %51
  %53 = load ptr, ptr %40, align 8, !tbaa !5
  %54 = load i32, ptr %53, align 8
  %55 = and i32 %54, 65535
  %56 = icmp eq i32 %55, 30
  br i1 %56, label %57, label %68

57:                                               ; preds = %52
  %58 = getelementptr inbounds %struct.rtx_def, ptr %53, i64 0, i32 1
  %59 = load i64, ptr %58, align 8, !tbaa !16
  switch i32 %49, label %64 [
    i32 2, label %76
    i32 3, label %61
    i32 4, label %60
  ]

60:                                               ; preds = %57
  br label %61

61:                                               ; preds = %57, %60
  %62 = phi i32 [ 16, %60 ], [ 15, %57 ]
  %63 = tail call i64 @trunc_int_for_mode(i64 noundef %59, i32 noundef %62) #30
  br label %64

64:                                               ; preds = %61, %57
  %65 = phi i64 [ %59, %57 ], [ %63, %61 ]
  %66 = add i64 %65, -128
  %67 = icmp ult i64 %66, -256
  br i1 %67, label %68, label %76

68:                                               ; preds = %64, %52
  %69 = add i32 %49, -2
  %70 = icmp ult i32 %69, 4
  br i1 %70, label %72, label %71

71:                                               ; preds = %68
  tail call void @_fatal_insn(ptr noundef nonnull @.str.279, ptr noundef %0, ptr noundef nonnull @.str.130, i32 noundef 19565, ptr noundef nonnull @.str.131) #30
  br label %76

72:                                               ; preds = %68
  %73 = sext i32 %69 to i64
  %74 = getelementptr inbounds [4 x i32], ptr @switch.table.ix86_attr_length_immediate_default.1387, i64 0, i64 %73
  %75 = load i32, ptr %74, align 4
  br label %76

76:                                               ; preds = %72, %57, %64, %71, %37
  %77 = phi i32 [ %39, %37 ], [ 1, %64 ], [ %39, %71 ], [ 1, %57 ], [ %75, %72 ]
  %78 = add nsw i64 %38, -1
  %79 = icmp sgt i64 %38, 0
  br i1 %79, label %37, label %80, !llvm.loop !269

80:                                               ; preds = %76, %33, %2
  %81 = phi i32 [ 0, %2 ], [ %34, %33 ], [ %77, %76 ]
  ret i32 %81
}

declare void @extract_insn_cached(ptr noundef) local_unnamed_addr #3

declare i64 @trunc_int_for_mode(i64 noundef, i32 noundef) local_unnamed_addr #3

declare void @_fatal_insn(ptr noundef, ptr noundef, ptr noundef, i32 noundef, ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define dso_local i32 @ix86_attr_length_address_default(ptr noundef %0) local_unnamed_addr #9 {
  %2 = tail call i32 @get_attr_type(ptr noundef %0) #30
  %3 = icmp eq i32 %2, 7
  br i1 %3, label %4, label %24

4:                                                ; preds = %1
  %5 = getelementptr inbounds %struct.rtx_def, ptr %0, i64 1
  %6 = load ptr, ptr %5, align 8, !tbaa !16
  %7 = load i32, ptr %6, align 8
  %8 = and i32 %7, 65535
  %9 = icmp eq i32 %8, 15
  br i1 %9, label %10, label %17

10:                                               ; preds = %4
  %11 = getelementptr inbounds %struct.rtx_def, ptr %6, i64 0, i32 1
  %12 = load ptr, ptr %11, align 8, !tbaa !16
  %13 = getelementptr inbounds %struct.rtvec_def, ptr %12, i64 0, i32 1
  %14 = load ptr, ptr %13, align 8, !tbaa !5
  %15 = load i32, ptr %14, align 8
  %16 = and i32 %15, 65535
  br label %17

17:                                               ; preds = %10, %4
  %18 = phi i32 [ %16, %10 ], [ %8, %4 ]
  %19 = phi ptr [ %14, %10 ], [ %6, %4 ]
  %20 = icmp eq i32 %18, 23
  br i1 %20, label %22, label %21

21:                                               ; preds = %17
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 19583, ptr noundef nonnull @.str.131) #30
  br label %22

22:                                               ; preds = %17, %21
  %23 = getelementptr inbounds %struct.rtx_def, ptr %19, i64 0, i32 1, i32 0, i32 0, i64 1
  br label %111

24:                                               ; preds = %1
  tail call void @extract_insn_cached(ptr noundef %0) #30
  %25 = load i8, ptr getelementptr inbounds (%struct.recog_data, ptr @recog_data, i64 0, i32 7), align 2, !tbaa !267
  %26 = icmp sgt i8 %25, 0
  br i1 %26, label %27, label %115

27:                                               ; preds = %24
  %28 = zext i8 %25 to i64
  br label %29

29:                                               ; preds = %27, %109
  %30 = phi i64 [ %28, %27 ], [ %31, %109 ]
  %31 = add nsw i64 %30, -1
  %32 = and i64 %31, 4294967295
  %33 = getelementptr inbounds [30 x ptr], ptr @recog_data, i64 0, i64 %32
  %34 = load ptr, ptr %33, align 8, !tbaa !5
  %35 = load i32, ptr %34, align 8
  %36 = and i32 %35, 65535
  %37 = icmp eq i32 %36, 43
  br i1 %37, label %38, label %109

38:                                               ; preds = %29
  %39 = load i32, ptr @reload_completed, align 4, !tbaa !20
  %40 = tail call i32 @constrain_operands_cached(i32 noundef %39) #30
  %41 = load i32, ptr @which_alternative, align 4, !tbaa !20
  %42 = icmp eq i32 %41, -1
  br i1 %42, label %106, label %43

43:                                               ; preds = %38
  %44 = getelementptr inbounds %struct.recog_data, ptr @recog_data, i64 0, i32 2, i64 %32
  %45 = load ptr, ptr %44, align 8, !tbaa !5
  br label %46

46:                                               ; preds = %72, %43
  %47 = phi ptr [ %45, %43 ], [ %73, %72 ]
  %48 = load i8, ptr %47, align 1, !tbaa !16
  switch i8 %48, label %49 [
    i8 61, label %72
    i8 43, label %72
  ]

49:                                               ; preds = %46
  %50 = icmp sgt i32 %41, 0
  br i1 %50, label %51, label %103

51:                                               ; preds = %49
  %52 = and i32 %41, 3
  %53 = icmp eq i32 %52, 0
  br i1 %53, label %67, label %54

54:                                               ; preds = %51, %63
  %55 = phi i32 [ %64, %63 ], [ %41, %51 ]
  %56 = phi ptr [ %60, %63 ], [ %47, %51 ]
  %57 = phi i32 [ %65, %63 ], [ 0, %51 ]
  br label %58

58:                                               ; preds = %58, %54
  %59 = phi ptr [ %60, %58 ], [ %56, %54 ]
  %60 = getelementptr inbounds i8, ptr %59, i64 1
  %61 = load i8, ptr %59, align 1, !tbaa !16
  %62 = icmp eq i8 %61, 44
  br i1 %62, label %63, label %58, !llvm.loop !270

63:                                               ; preds = %58
  %64 = add nsw i32 %55, -1
  %65 = add i32 %57, 1
  %66 = icmp eq i32 %65, %52
  br i1 %66, label %67, label %54, !llvm.loop !271

67:                                               ; preds = %63, %51
  %68 = phi i32 [ %41, %51 ], [ %64, %63 ]
  %69 = phi ptr [ %47, %51 ], [ %60, %63 ]
  %70 = phi ptr [ undef, %51 ], [ %60, %63 ]
  %71 = icmp ult i32 %41, 4
  br i1 %71, label %100, label %74

72:                                               ; preds = %46, %46
  %73 = getelementptr inbounds i8, ptr %47, i64 1
  br label %46, !llvm.loop !273

74:                                               ; preds = %67, %97
  %75 = phi i32 [ %98, %97 ], [ %68, %67 ]
  %76 = phi ptr [ %94, %97 ], [ %69, %67 ]
  br label %77

77:                                               ; preds = %74, %77
  %78 = phi ptr [ %79, %77 ], [ %76, %74 ]
  %79 = getelementptr inbounds i8, ptr %78, i64 1
  %80 = load i8, ptr %78, align 1, !tbaa !16
  %81 = icmp eq i8 %80, 44
  br i1 %81, label %82, label %77, !llvm.loop !270

82:                                               ; preds = %77, %82
  %83 = phi ptr [ %84, %82 ], [ %79, %77 ]
  %84 = getelementptr inbounds i8, ptr %83, i64 1
  %85 = load i8, ptr %83, align 1, !tbaa !16
  %86 = icmp eq i8 %85, 44
  br i1 %86, label %87, label %82, !llvm.loop !270

87:                                               ; preds = %82, %87
  %88 = phi ptr [ %89, %87 ], [ %84, %82 ]
  %89 = getelementptr inbounds i8, ptr %88, i64 1
  %90 = load i8, ptr %88, align 1, !tbaa !16
  %91 = icmp eq i8 %90, 44
  br i1 %91, label %92, label %87, !llvm.loop !270

92:                                               ; preds = %87, %92
  %93 = phi ptr [ %94, %92 ], [ %89, %87 ]
  %94 = getelementptr inbounds i8, ptr %93, i64 1
  %95 = load i8, ptr %93, align 1, !tbaa !16
  %96 = icmp eq i8 %95, 44
  br i1 %96, label %97, label %92, !llvm.loop !270

97:                                               ; preds = %92
  %98 = add nsw i32 %75, -4
  %99 = icmp sgt i32 %75, 4
  br i1 %99, label %74, label %100, !llvm.loop !274

100:                                              ; preds = %97, %67
  %101 = phi ptr [ %70, %67 ], [ %94, %97 ]
  %102 = load i8, ptr %101, align 1, !tbaa !16
  br label %103

103:                                              ; preds = %100, %49
  %104 = phi i8 [ %48, %49 ], [ %102, %100 ]
  %105 = icmp eq i8 %104, 88
  br i1 %105, label %109, label %106

106:                                              ; preds = %103, %38
  %107 = load ptr, ptr %33, align 8, !tbaa !5
  %108 = getelementptr inbounds %struct.rtx_def, ptr %107, i64 0, i32 1
  br label %111

109:                                              ; preds = %103, %29
  %110 = icmp sgt i64 %30, 1
  br i1 %110, label %29, label %115, !llvm.loop !275

111:                                              ; preds = %22, %106
  %112 = phi ptr [ %108, %106 ], [ %23, %22 ]
  %113 = load ptr, ptr %112, align 8, !tbaa !16
  %114 = tail call i32 @memory_address_length(ptr noundef %113), !range !276
  br label %115

115:                                              ; preds = %109, %111, %24
  %116 = phi i32 [ 0, %24 ], [ %114, %111 ], [ 0, %109 ]
  ret i32 %116
}

declare i32 @get_attr_type(ptr noundef) local_unnamed_addr #3

declare i32 @constrain_operands_cached(i32 noundef) local_unnamed_addr #3

; Function Attrs: mustprogress nofree norecurse nosync nounwind sspstrong willreturn memory(none) uwtable
define dso_local i32 @ix86_attr_length_vex_default(ptr nocapture noundef readnone %0, i32 noundef %1, i32 noundef %2) local_unnamed_addr #11 {
  %4 = icmp eq i32 %1, 0
  %5 = icmp ne i32 %2, 0
  %6 = or i1 %4, %5
  %7 = select i1 %6, i32 4, i32 3
  ret i32 %7
}

; Function Attrs: nounwind sspstrong uwtable
define dso_local zeroext i8 @ix86_agi_dependent(ptr noundef %0, ptr noundef %1) local_unnamed_addr #9 {
  tail call void @extract_insn_cached(ptr noundef %1) #30
  %3 = load i8, ptr getelementptr inbounds (%struct.recog_data, ptr @recog_data, i64 0, i32 7), align 2, !tbaa !267
  %4 = sext i8 %3 to i64
  %5 = and i64 %4, 4294967295
  br label %6

6:                                                ; preds = %10, %2
  %7 = phi i64 [ %11, %10 ], [ %5, %2 ]
  %8 = trunc i64 %7 to i32
  %9 = icmp sgt i32 %8, 0
  br i1 %9, label %10, label %23

10:                                               ; preds = %6
  %11 = add nsw i64 %7, -1
  %12 = getelementptr inbounds [30 x ptr], ptr @recog_data, i64 0, i64 %11
  %13 = load ptr, ptr %12, align 8, !tbaa !5
  %14 = load i32, ptr %13, align 8
  %15 = and i32 %14, 65535
  %16 = icmp eq i32 %15, 43
  br i1 %16, label %17, label %6, !llvm.loop !277

17:                                               ; preds = %10
  %18 = getelementptr inbounds %struct.rtx_def, ptr %13, i64 0, i32 1
  %19 = load ptr, ptr %18, align 8, !tbaa !16
  %20 = tail call i32 @modified_in_p(ptr noundef %19, ptr noundef %0) #30
  %21 = icmp ne i32 %20, 0
  %22 = zext i1 %21 to i8
  br label %23

23:                                               ; preds = %6, %17
  %24 = phi i8 [ %22, %17 ], [ 0, %6 ]
  ret i8 %24
}

declare i32 @modified_in_p(ptr noundef, ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define dso_local i32 @ix86_constant_alignment(ptr nocapture noundef readonly %0, i32 noundef %1) local_unnamed_addr #9 {
  %3 = load i64, ptr %0, align 8
  %4 = trunc i64 %3 to i16
  switch i16 %4, label %267 [
    i16 24, label %5
    i16 27, label %5
    i16 23, label %5
  ]

5:                                                ; preds = %2, %2, %2
  %6 = getelementptr inbounds %struct.tree_common, ptr %0, i64 0, i32 2
  %7 = load ptr, ptr %6, align 8, !tbaa !16
  %8 = load i64, ptr %7, align 8
  %9 = and i64 %8, 65535
  %10 = icmp eq i64 %9, 14
  br i1 %10, label %11, label %13

11:                                               ; preds = %5
  %12 = tail call i32 @vector_type_mode(ptr noundef nonnull %7) #30
  br label %18

13:                                               ; preds = %5
  %14 = getelementptr inbounds %struct.tree_type, ptr %7, i64 0, i32 6
  %15 = load i32, ptr %14, align 4
  %16 = lshr i32 %15, 16
  %17 = and i32 %16, 255
  br label %18

18:                                               ; preds = %13, %11
  %19 = phi i32 [ %12, %11 ], [ %17, %13 ]
  %20 = icmp eq i32 %19, 39
  %21 = icmp slt i32 %1, 64
  %22 = and i1 %21, %20
  br i1 %22, label %280, label %23

23:                                               ; preds = %18
  %24 = load ptr, ptr %6, align 8, !tbaa !16
  %25 = load i64, ptr %24, align 8
  %26 = and i64 %25, 65535
  %27 = icmp eq i64 %26, 14
  br i1 %27, label %28, label %30

28:                                               ; preds = %23
  %29 = tail call i32 @vector_type_mode(ptr noundef nonnull %24) #30
  br label %35

30:                                               ; preds = %23
  %31 = getelementptr inbounds %struct.tree_type, ptr %24, i64 0, i32 6
  %32 = load i32, ptr %31, align 4
  %33 = lshr i32 %32, 16
  %34 = and i32 %33, 255
  br label %35

35:                                               ; preds = %30, %28
  %36 = phi i32 [ %29, %28 ], [ %34, %30 ]
  %37 = icmp eq i32 %36, 40
  br i1 %37, label %265, label %38

38:                                               ; preds = %35
  %39 = load ptr, ptr %6, align 8, !tbaa !16
  %40 = load i64, ptr %39, align 8
  %41 = and i64 %40, 65535
  %42 = icmp eq i64 %41, 14
  br i1 %42, label %43, label %45

43:                                               ; preds = %38
  %44 = tail call i32 @vector_type_mode(ptr noundef nonnull %39) #30
  br label %50

45:                                               ; preds = %38
  %46 = getelementptr inbounds %struct.tree_type, ptr %39, i64 0, i32 6
  %47 = load i32, ptr %46, align 4
  %48 = lshr i32 %47, 16
  %49 = and i32 %48, 255
  br label %50

50:                                               ; preds = %45, %43
  %51 = phi i32 [ %44, %43 ], [ %49, %45 ]
  %52 = icmp eq i32 %51, 67
  br i1 %52, label %265, label %53

53:                                               ; preds = %50
  %54 = load ptr, ptr %6, align 8, !tbaa !16
  %55 = load i64, ptr %54, align 8
  %56 = and i64 %55, 65535
  %57 = icmp eq i64 %56, 14
  br i1 %57, label %58, label %60

58:                                               ; preds = %53
  %59 = tail call i32 @vector_type_mode(ptr noundef nonnull %54) #30
  br label %65

60:                                               ; preds = %53
  %61 = getelementptr inbounds %struct.tree_type, ptr %54, i64 0, i32 6
  %62 = load i32, ptr %61, align 4
  %63 = lshr i32 %62, 16
  %64 = and i32 %63, 255
  br label %65

65:                                               ; preds = %60, %58
  %66 = phi i32 [ %59, %58 ], [ %64, %60 ]
  %67 = icmp eq i32 %66, 18
  br i1 %67, label %265, label %68

68:                                               ; preds = %65
  %69 = load ptr, ptr %6, align 8, !tbaa !16
  %70 = load i64, ptr %69, align 8
  %71 = and i64 %70, 65535
  %72 = icmp eq i64 %71, 14
  br i1 %72, label %73, label %75

73:                                               ; preds = %68
  %74 = tail call i32 @vector_type_mode(ptr noundef nonnull %69) #30
  br label %80

75:                                               ; preds = %68
  %76 = getelementptr inbounds %struct.tree_type, ptr %69, i64 0, i32 6
  %77 = load i32, ptr %76, align 4
  %78 = lshr i32 %77, 16
  %79 = and i32 %78, 255
  br label %80

80:                                               ; preds = %75, %73
  %81 = phi i32 [ %74, %73 ], [ %79, %75 ]
  %82 = icmp eq i32 %81, 63
  br i1 %82, label %265, label %83

83:                                               ; preds = %80
  %84 = load ptr, ptr %6, align 8, !tbaa !16
  %85 = load i64, ptr %84, align 8
  %86 = and i64 %85, 65535
  %87 = icmp eq i64 %86, 14
  br i1 %87, label %88, label %90

88:                                               ; preds = %83
  %89 = tail call i32 @vector_type_mode(ptr noundef nonnull %84) #30
  br label %95

90:                                               ; preds = %83
  %91 = getelementptr inbounds %struct.tree_type, ptr %84, i64 0, i32 6
  %92 = load i32, ptr %91, align 4
  %93 = lshr i32 %92, 16
  %94 = and i32 %93, 255
  br label %95

95:                                               ; preds = %90, %88
  %96 = phi i32 [ %89, %88 ], [ %94, %90 ]
  %97 = icmp eq i32 %96, 41
  br i1 %97, label %265, label %98

98:                                               ; preds = %95
  %99 = load ptr, ptr %6, align 8, !tbaa !16
  %100 = load i64, ptr %99, align 8
  %101 = and i64 %100, 65535
  %102 = icmp eq i64 %101, 14
  br i1 %102, label %103, label %105

103:                                              ; preds = %98
  %104 = tail call i32 @vector_type_mode(ptr noundef nonnull %99) #30
  br label %110

105:                                              ; preds = %98
  %106 = getelementptr inbounds %struct.tree_type, ptr %99, i64 0, i32 6
  %107 = load i32, ptr %106, align 4
  %108 = lshr i32 %107, 16
  %109 = and i32 %108, 255
  br label %110

110:                                              ; preds = %105, %103
  %111 = phi i32 [ %104, %103 ], [ %109, %105 ]
  %112 = icmp eq i32 %111, 64
  br i1 %112, label %265, label %113

113:                                              ; preds = %110
  %114 = load ptr, ptr %6, align 8, !tbaa !16
  %115 = load i64, ptr %114, align 8
  %116 = and i64 %115, 65535
  %117 = icmp eq i64 %116, 14
  br i1 %117, label %118, label %120

118:                                              ; preds = %113
  %119 = tail call i32 @vector_type_mode(ptr noundef nonnull %114) #30
  br label %125

120:                                              ; preds = %113
  %121 = getelementptr inbounds %struct.tree_type, ptr %114, i64 0, i32 6
  %122 = load i32, ptr %121, align 4
  %123 = lshr i32 %122, 16
  %124 = and i32 %123, 255
  br label %125

125:                                              ; preds = %120, %118
  %126 = phi i32 [ %119, %118 ], [ %124, %120 ]
  %127 = icmp eq i32 %126, 80
  br i1 %127, label %265, label %128

128:                                              ; preds = %125
  %129 = load ptr, ptr %6, align 8, !tbaa !16
  %130 = load i64, ptr %129, align 8
  %131 = and i64 %130, 65535
  %132 = icmp eq i64 %131, 14
  br i1 %132, label %133, label %135

133:                                              ; preds = %128
  %134 = tail call i32 @vector_type_mode(ptr noundef nonnull %129) #30
  br label %140

135:                                              ; preds = %128
  %136 = getelementptr inbounds %struct.tree_type, ptr %129, i64 0, i32 6
  %137 = load i32, ptr %136, align 4
  %138 = lshr i32 %137, 16
  %139 = and i32 %138, 255
  br label %140

140:                                              ; preds = %135, %133
  %141 = phi i32 [ %134, %133 ], [ %139, %135 ]
  %142 = icmp eq i32 %141, 66
  br i1 %142, label %265, label %143

143:                                              ; preds = %140
  %144 = load ptr, ptr %6, align 8, !tbaa !16
  %145 = load i64, ptr %144, align 8
  %146 = and i64 %145, 65535
  %147 = icmp eq i64 %146, 14
  br i1 %147, label %148, label %150

148:                                              ; preds = %143
  %149 = tail call i32 @vector_type_mode(ptr noundef nonnull %144) #30
  br label %155

150:                                              ; preds = %143
  %151 = getelementptr inbounds %struct.tree_type, ptr %144, i64 0, i32 6
  %152 = load i32, ptr %151, align 4
  %153 = lshr i32 %152, 16
  %154 = and i32 %153, 255
  br label %155

155:                                              ; preds = %150, %148
  %156 = phi i32 [ %149, %148 ], [ %154, %150 ]
  %157 = icmp eq i32 %156, 79
  br i1 %157, label %265, label %158

158:                                              ; preds = %155
  %159 = load ptr, ptr %6, align 8, !tbaa !16
  %160 = load i64, ptr %159, align 8
  %161 = and i64 %160, 65535
  %162 = icmp eq i64 %161, 14
  br i1 %162, label %163, label %165

163:                                              ; preds = %158
  %164 = tail call i32 @vector_type_mode(ptr noundef nonnull %159) #30
  br label %170

165:                                              ; preds = %158
  %166 = getelementptr inbounds %struct.tree_type, ptr %159, i64 0, i32 6
  %167 = load i32, ptr %166, align 4
  %168 = lshr i32 %167, 16
  %169 = and i32 %168, 255
  br label %170

170:                                              ; preds = %165, %163
  %171 = phi i32 [ %164, %163 ], [ %169, %165 ]
  %172 = icmp eq i32 %171, 65
  br i1 %172, label %265, label %173

173:                                              ; preds = %170
  %174 = load ptr, ptr %6, align 8, !tbaa !16
  %175 = load i64, ptr %174, align 8
  %176 = and i64 %175, 65535
  %177 = icmp eq i64 %176, 14
  br i1 %177, label %178, label %180

178:                                              ; preds = %173
  %179 = tail call i32 @vector_type_mode(ptr noundef nonnull %174) #30
  br label %185

180:                                              ; preds = %173
  %181 = getelementptr inbounds %struct.tree_type, ptr %174, i64 0, i32 6
  %182 = load i32, ptr %181, align 4
  %183 = lshr i32 %182, 16
  %184 = and i32 %183, 255
  br label %185

185:                                              ; preds = %180, %178
  %186 = phi i32 [ %179, %178 ], [ %184, %180 ]
  %187 = icmp eq i32 %186, 68
  br i1 %187, label %265, label %188

188:                                              ; preds = %185
  %189 = load ptr, ptr %6, align 8, !tbaa !16
  %190 = load i64, ptr %189, align 8
  %191 = and i64 %190, 65535
  %192 = icmp eq i64 %191, 14
  br i1 %192, label %193, label %195

193:                                              ; preds = %188
  %194 = tail call i32 @vector_type_mode(ptr noundef nonnull %189) #30
  br label %200

195:                                              ; preds = %188
  %196 = getelementptr inbounds %struct.tree_type, ptr %189, i64 0, i32 6
  %197 = load i32, ptr %196, align 4
  %198 = lshr i32 %197, 16
  %199 = and i32 %198, 255
  br label %200

200:                                              ; preds = %195, %193
  %201 = phi i32 [ %194, %193 ], [ %199, %195 ]
  %202 = icmp eq i32 %201, 69
  br i1 %202, label %265, label %203

203:                                              ; preds = %200
  %204 = load ptr, ptr %6, align 8, !tbaa !16
  %205 = load i64, ptr %204, align 8
  %206 = and i64 %205, 65535
  %207 = icmp eq i64 %206, 14
  br i1 %207, label %208, label %210

208:                                              ; preds = %203
  %209 = tail call i32 @vector_type_mode(ptr noundef nonnull %204) #30
  br label %215

210:                                              ; preds = %203
  %211 = getelementptr inbounds %struct.tree_type, ptr %204, i64 0, i32 6
  %212 = load i32, ptr %211, align 4
  %213 = lshr i32 %212, 16
  %214 = and i32 %213, 255
  br label %215

215:                                              ; preds = %210, %208
  %216 = phi i32 [ %209, %208 ], [ %214, %210 ]
  %217 = icmp eq i32 %216, 70
  br i1 %217, label %265, label %218

218:                                              ; preds = %215
  %219 = load ptr, ptr %6, align 8, !tbaa !16
  %220 = load i64, ptr %219, align 8
  %221 = and i64 %220, 65535
  %222 = icmp eq i64 %221, 14
  br i1 %222, label %223, label %225

223:                                              ; preds = %218
  %224 = tail call i32 @vector_type_mode(ptr noundef nonnull %219) #30
  br label %230

225:                                              ; preds = %218
  %226 = getelementptr inbounds %struct.tree_type, ptr %219, i64 0, i32 6
  %227 = load i32, ptr %226, align 4
  %228 = lshr i32 %227, 16
  %229 = and i32 %228, 255
  br label %230

230:                                              ; preds = %225, %223
  %231 = phi i32 [ %224, %223 ], [ %229, %225 ]
  %232 = icmp eq i32 %231, 71
  br i1 %232, label %265, label %233

233:                                              ; preds = %230
  %234 = load ptr, ptr %6, align 8, !tbaa !16
  %235 = load i64, ptr %234, align 8
  %236 = and i64 %235, 65535
  %237 = icmp eq i64 %236, 14
  br i1 %237, label %238, label %240

238:                                              ; preds = %233
  %239 = tail call i32 @vector_type_mode(ptr noundef nonnull %234) #30
  br label %245

240:                                              ; preds = %233
  %241 = getelementptr inbounds %struct.tree_type, ptr %234, i64 0, i32 6
  %242 = load i32, ptr %241, align 4
  %243 = lshr i32 %242, 16
  %244 = and i32 %243, 255
  br label %245

245:                                              ; preds = %240, %238
  %246 = phi i32 [ %239, %238 ], [ %244, %240 ]
  %247 = icmp eq i32 %246, 81
  br i1 %247, label %265, label %248

248:                                              ; preds = %245
  %249 = load ptr, ptr %6, align 8, !tbaa !16
  %250 = load i64, ptr %249, align 8
  %251 = and i64 %250, 65535
  %252 = icmp eq i64 %251, 14
  br i1 %252, label %253, label %255

253:                                              ; preds = %248
  %254 = tail call i32 @vector_type_mode(ptr noundef nonnull %249) #30
  br label %260

255:                                              ; preds = %248
  %256 = getelementptr inbounds %struct.tree_type, ptr %249, i64 0, i32 6
  %257 = load i32, ptr %256, align 4
  %258 = lshr i32 %257, 16
  %259 = and i32 %258, 255
  br label %260

260:                                              ; preds = %255, %253
  %261 = phi i32 [ %254, %253 ], [ %259, %255 ]
  %262 = icmp eq i32 %261, 82
  %263 = icmp slt i32 %1, 128
  %264 = and i1 %263, %262
  br i1 %264, label %280, label %279

265:                                              ; preds = %245, %230, %215, %200, %185, %170, %155, %140, %125, %110, %95, %80, %65, %50, %35
  %266 = icmp slt i32 %1, 128
  br i1 %266, label %280, label %279

267:                                              ; preds = %2
  %268 = load i32, ptr @optimize_size, align 4, !tbaa !20
  %269 = icmp eq i32 %268, 0
  %270 = and i64 %3, 65535
  %271 = icmp eq i64 %270, 28
  %272 = and i1 %271, %269
  br i1 %272, label %273, label %279

273:                                              ; preds = %267
  %274 = getelementptr inbounds %struct.tree_string, ptr %0, i64 0, i32 1
  %275 = load i32, ptr %274, align 8, !tbaa !16
  %276 = icmp sgt i32 %275, 30
  %277 = icmp slt i32 %1, 32
  %278 = and i1 %277, %276
  br i1 %278, label %280, label %279

279:                                              ; preds = %267, %273, %265, %260
  br label %280

280:                                              ; preds = %273, %265, %260, %18, %279
  %281 = phi i32 [ %1, %279 ], [ 64, %18 ], [ 128, %260 ], [ 128, %265 ], [ 32, %273 ]
  ret i32 %281
}

declare i32 @vector_type_mode(ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define dso_local i32 @ix86_data_alignment(ptr noundef %0, i32 noundef %1) local_unnamed_addr #9 {
  %3 = load i32, ptr @optimize_size, align 4, !tbaa !20
  %4 = icmp eq i32 %3, 0
  %5 = select i1 %4, i32 256, i32 32
  %6 = load i64, ptr %0, align 8
  %7 = trunc i64 %6 to i32
  %8 = and i32 %7, 65535
  %9 = add nsw i32 %8, -15
  %10 = icmp ult i32 %9, 4
  br i1 %10, label %11, label %33

11:                                               ; preds = %2
  %12 = getelementptr inbounds %struct.tree_type, ptr %0, i64 0, i32 2
  %13 = load ptr, ptr %12, align 8, !tbaa !16
  %14 = icmp eq ptr %13, null
  br i1 %14, label %33, label %15

15:                                               ; preds = %11
  %16 = load i64, ptr %13, align 8
  %17 = and i64 %16, 65535
  %18 = icmp eq i64 %17, 23
  br i1 %18, label %19, label %33

19:                                               ; preds = %15
  %20 = getelementptr inbounds %struct.tree_int_cst, ptr %13, i64 0, i32 1
  %21 = load i64, ptr %20, align 8, !tbaa !16
  %22 = zext i32 %5 to i64
  %23 = icmp ult i64 %21, %22
  br i1 %23, label %24, label %30

24:                                               ; preds = %19
  %25 = getelementptr inbounds %struct.tree_int_cst, ptr %13, i64 0, i32 1, i32 1
  %26 = load i64, ptr %25, align 8, !tbaa !16
  %27 = icmp ne i64 %26, 0
  %28 = icmp sgt i32 %5, %1
  %29 = select i1 %27, i1 %28, i1 false
  br i1 %29, label %32, label %33

30:                                               ; preds = %19
  %31 = icmp sgt i32 %5, %1
  br i1 %31, label %32, label %33

32:                                               ; preds = %24, %30
  br label %33

33:                                               ; preds = %2, %32, %30, %24, %15, %11
  %34 = phi i32 [ %5, %32 ], [ %1, %30 ], [ %1, %24 ], [ %1, %15 ], [ %1, %11 ], [ %1, %2 ]
  %35 = trunc i64 %6 to i16
  switch i16 %35, label %596 [
    i16 15, label %36
    i16 13, label %298
    i16 16, label %333
    i16 17, label %333
    i16 18, label %333
    i16 9, label %353
    i16 14, label %353
    i16 8, label %353
  ]

36:                                               ; preds = %33
  %37 = getelementptr inbounds %struct.tree_common, ptr %0, i64 0, i32 2
  %38 = load ptr, ptr %37, align 8, !tbaa !16
  %39 = load i64, ptr %38, align 8
  %40 = and i64 %39, 65535
  %41 = icmp eq i64 %40, 14
  br i1 %41, label %42, label %44

42:                                               ; preds = %36
  %43 = tail call i32 @vector_type_mode(ptr noundef nonnull %38) #30
  br label %49

44:                                               ; preds = %36
  %45 = getelementptr inbounds %struct.tree_type, ptr %38, i64 0, i32 6
  %46 = load i32, ptr %45, align 4
  %47 = lshr i32 %46, 16
  %48 = and i32 %47, 255
  br label %49

49:                                               ; preds = %44, %42
  %50 = phi i32 [ %43, %42 ], [ %48, %44 ]
  %51 = icmp eq i32 %50, 39
  %52 = icmp slt i32 %34, 64
  %53 = select i1 %51, i1 %52, i1 false
  br i1 %53, label %597, label %54

54:                                               ; preds = %49
  %55 = load ptr, ptr %37, align 8, !tbaa !16
  %56 = load i64, ptr %55, align 8
  %57 = and i64 %56, 65535
  %58 = icmp eq i64 %57, 14
  br i1 %58, label %59, label %61

59:                                               ; preds = %54
  %60 = tail call i32 @vector_type_mode(ptr noundef nonnull %55) #30
  br label %66

61:                                               ; preds = %54
  %62 = getelementptr inbounds %struct.tree_type, ptr %55, i64 0, i32 6
  %63 = load i32, ptr %62, align 4
  %64 = lshr i32 %63, 16
  %65 = and i32 %64, 255
  br label %66

66:                                               ; preds = %61, %59
  %67 = phi i32 [ %60, %59 ], [ %65, %61 ]
  %68 = icmp eq i32 %67, 40
  br i1 %68, label %296, label %69

69:                                               ; preds = %66
  %70 = load ptr, ptr %37, align 8, !tbaa !16
  %71 = load i64, ptr %70, align 8
  %72 = and i64 %71, 65535
  %73 = icmp eq i64 %72, 14
  br i1 %73, label %74, label %76

74:                                               ; preds = %69
  %75 = tail call i32 @vector_type_mode(ptr noundef nonnull %70) #30
  br label %81

76:                                               ; preds = %69
  %77 = getelementptr inbounds %struct.tree_type, ptr %70, i64 0, i32 6
  %78 = load i32, ptr %77, align 4
  %79 = lshr i32 %78, 16
  %80 = and i32 %79, 255
  br label %81

81:                                               ; preds = %76, %74
  %82 = phi i32 [ %75, %74 ], [ %80, %76 ]
  %83 = icmp eq i32 %82, 67
  br i1 %83, label %296, label %84

84:                                               ; preds = %81
  %85 = load ptr, ptr %37, align 8, !tbaa !16
  %86 = load i64, ptr %85, align 8
  %87 = and i64 %86, 65535
  %88 = icmp eq i64 %87, 14
  br i1 %88, label %89, label %91

89:                                               ; preds = %84
  %90 = tail call i32 @vector_type_mode(ptr noundef nonnull %85) #30
  br label %96

91:                                               ; preds = %84
  %92 = getelementptr inbounds %struct.tree_type, ptr %85, i64 0, i32 6
  %93 = load i32, ptr %92, align 4
  %94 = lshr i32 %93, 16
  %95 = and i32 %94, 255
  br label %96

96:                                               ; preds = %91, %89
  %97 = phi i32 [ %90, %89 ], [ %95, %91 ]
  %98 = icmp eq i32 %97, 18
  br i1 %98, label %296, label %99

99:                                               ; preds = %96
  %100 = load ptr, ptr %37, align 8, !tbaa !16
  %101 = load i64, ptr %100, align 8
  %102 = and i64 %101, 65535
  %103 = icmp eq i64 %102, 14
  br i1 %103, label %104, label %106

104:                                              ; preds = %99
  %105 = tail call i32 @vector_type_mode(ptr noundef nonnull %100) #30
  br label %111

106:                                              ; preds = %99
  %107 = getelementptr inbounds %struct.tree_type, ptr %100, i64 0, i32 6
  %108 = load i32, ptr %107, align 4
  %109 = lshr i32 %108, 16
  %110 = and i32 %109, 255
  br label %111

111:                                              ; preds = %106, %104
  %112 = phi i32 [ %105, %104 ], [ %110, %106 ]
  %113 = icmp eq i32 %112, 63
  br i1 %113, label %296, label %114

114:                                              ; preds = %111
  %115 = load ptr, ptr %37, align 8, !tbaa !16
  %116 = load i64, ptr %115, align 8
  %117 = and i64 %116, 65535
  %118 = icmp eq i64 %117, 14
  br i1 %118, label %119, label %121

119:                                              ; preds = %114
  %120 = tail call i32 @vector_type_mode(ptr noundef nonnull %115) #30
  br label %126

121:                                              ; preds = %114
  %122 = getelementptr inbounds %struct.tree_type, ptr %115, i64 0, i32 6
  %123 = load i32, ptr %122, align 4
  %124 = lshr i32 %123, 16
  %125 = and i32 %124, 255
  br label %126

126:                                              ; preds = %121, %119
  %127 = phi i32 [ %120, %119 ], [ %125, %121 ]
  %128 = icmp eq i32 %127, 41
  br i1 %128, label %296, label %129

129:                                              ; preds = %126
  %130 = load ptr, ptr %37, align 8, !tbaa !16
  %131 = load i64, ptr %130, align 8
  %132 = and i64 %131, 65535
  %133 = icmp eq i64 %132, 14
  br i1 %133, label %134, label %136

134:                                              ; preds = %129
  %135 = tail call i32 @vector_type_mode(ptr noundef nonnull %130) #30
  br label %141

136:                                              ; preds = %129
  %137 = getelementptr inbounds %struct.tree_type, ptr %130, i64 0, i32 6
  %138 = load i32, ptr %137, align 4
  %139 = lshr i32 %138, 16
  %140 = and i32 %139, 255
  br label %141

141:                                              ; preds = %136, %134
  %142 = phi i32 [ %135, %134 ], [ %140, %136 ]
  %143 = icmp eq i32 %142, 64
  br i1 %143, label %296, label %144

144:                                              ; preds = %141
  %145 = load ptr, ptr %37, align 8, !tbaa !16
  %146 = load i64, ptr %145, align 8
  %147 = and i64 %146, 65535
  %148 = icmp eq i64 %147, 14
  br i1 %148, label %149, label %151

149:                                              ; preds = %144
  %150 = tail call i32 @vector_type_mode(ptr noundef nonnull %145) #30
  br label %156

151:                                              ; preds = %144
  %152 = getelementptr inbounds %struct.tree_type, ptr %145, i64 0, i32 6
  %153 = load i32, ptr %152, align 4
  %154 = lshr i32 %153, 16
  %155 = and i32 %154, 255
  br label %156

156:                                              ; preds = %151, %149
  %157 = phi i32 [ %150, %149 ], [ %155, %151 ]
  %158 = icmp eq i32 %157, 80
  br i1 %158, label %296, label %159

159:                                              ; preds = %156
  %160 = load ptr, ptr %37, align 8, !tbaa !16
  %161 = load i64, ptr %160, align 8
  %162 = and i64 %161, 65535
  %163 = icmp eq i64 %162, 14
  br i1 %163, label %164, label %166

164:                                              ; preds = %159
  %165 = tail call i32 @vector_type_mode(ptr noundef nonnull %160) #30
  br label %171

166:                                              ; preds = %159
  %167 = getelementptr inbounds %struct.tree_type, ptr %160, i64 0, i32 6
  %168 = load i32, ptr %167, align 4
  %169 = lshr i32 %168, 16
  %170 = and i32 %169, 255
  br label %171

171:                                              ; preds = %166, %164
  %172 = phi i32 [ %165, %164 ], [ %170, %166 ]
  %173 = icmp eq i32 %172, 66
  br i1 %173, label %296, label %174

174:                                              ; preds = %171
  %175 = load ptr, ptr %37, align 8, !tbaa !16
  %176 = load i64, ptr %175, align 8
  %177 = and i64 %176, 65535
  %178 = icmp eq i64 %177, 14
  br i1 %178, label %179, label %181

179:                                              ; preds = %174
  %180 = tail call i32 @vector_type_mode(ptr noundef nonnull %175) #30
  br label %186

181:                                              ; preds = %174
  %182 = getelementptr inbounds %struct.tree_type, ptr %175, i64 0, i32 6
  %183 = load i32, ptr %182, align 4
  %184 = lshr i32 %183, 16
  %185 = and i32 %184, 255
  br label %186

186:                                              ; preds = %181, %179
  %187 = phi i32 [ %180, %179 ], [ %185, %181 ]
  %188 = icmp eq i32 %187, 79
  br i1 %188, label %296, label %189

189:                                              ; preds = %186
  %190 = load ptr, ptr %37, align 8, !tbaa !16
  %191 = load i64, ptr %190, align 8
  %192 = and i64 %191, 65535
  %193 = icmp eq i64 %192, 14
  br i1 %193, label %194, label %196

194:                                              ; preds = %189
  %195 = tail call i32 @vector_type_mode(ptr noundef nonnull %190) #30
  br label %201

196:                                              ; preds = %189
  %197 = getelementptr inbounds %struct.tree_type, ptr %190, i64 0, i32 6
  %198 = load i32, ptr %197, align 4
  %199 = lshr i32 %198, 16
  %200 = and i32 %199, 255
  br label %201

201:                                              ; preds = %196, %194
  %202 = phi i32 [ %195, %194 ], [ %200, %196 ]
  %203 = icmp eq i32 %202, 65
  br i1 %203, label %296, label %204

204:                                              ; preds = %201
  %205 = load ptr, ptr %37, align 8, !tbaa !16
  %206 = load i64, ptr %205, align 8
  %207 = and i64 %206, 65535
  %208 = icmp eq i64 %207, 14
  br i1 %208, label %209, label %211

209:                                              ; preds = %204
  %210 = tail call i32 @vector_type_mode(ptr noundef nonnull %205) #30
  br label %216

211:                                              ; preds = %204
  %212 = getelementptr inbounds %struct.tree_type, ptr %205, i64 0, i32 6
  %213 = load i32, ptr %212, align 4
  %214 = lshr i32 %213, 16
  %215 = and i32 %214, 255
  br label %216

216:                                              ; preds = %211, %209
  %217 = phi i32 [ %210, %209 ], [ %215, %211 ]
  %218 = icmp eq i32 %217, 68
  br i1 %218, label %296, label %219

219:                                              ; preds = %216
  %220 = load ptr, ptr %37, align 8, !tbaa !16
  %221 = load i64, ptr %220, align 8
  %222 = and i64 %221, 65535
  %223 = icmp eq i64 %222, 14
  br i1 %223, label %224, label %226

224:                                              ; preds = %219
  %225 = tail call i32 @vector_type_mode(ptr noundef nonnull %220) #30
  br label %231

226:                                              ; preds = %219
  %227 = getelementptr inbounds %struct.tree_type, ptr %220, i64 0, i32 6
  %228 = load i32, ptr %227, align 4
  %229 = lshr i32 %228, 16
  %230 = and i32 %229, 255
  br label %231

231:                                              ; preds = %226, %224
  %232 = phi i32 [ %225, %224 ], [ %230, %226 ]
  %233 = icmp eq i32 %232, 69
  br i1 %233, label %296, label %234

234:                                              ; preds = %231
  %235 = load ptr, ptr %37, align 8, !tbaa !16
  %236 = load i64, ptr %235, align 8
  %237 = and i64 %236, 65535
  %238 = icmp eq i64 %237, 14
  br i1 %238, label %239, label %241

239:                                              ; preds = %234
  %240 = tail call i32 @vector_type_mode(ptr noundef nonnull %235) #30
  br label %246

241:                                              ; preds = %234
  %242 = getelementptr inbounds %struct.tree_type, ptr %235, i64 0, i32 6
  %243 = load i32, ptr %242, align 4
  %244 = lshr i32 %243, 16
  %245 = and i32 %244, 255
  br label %246

246:                                              ; preds = %241, %239
  %247 = phi i32 [ %240, %239 ], [ %245, %241 ]
  %248 = icmp eq i32 %247, 70
  br i1 %248, label %296, label %249

249:                                              ; preds = %246
  %250 = load ptr, ptr %37, align 8, !tbaa !16
  %251 = load i64, ptr %250, align 8
  %252 = and i64 %251, 65535
  %253 = icmp eq i64 %252, 14
  br i1 %253, label %254, label %256

254:                                              ; preds = %249
  %255 = tail call i32 @vector_type_mode(ptr noundef nonnull %250) #30
  br label %261

256:                                              ; preds = %249
  %257 = getelementptr inbounds %struct.tree_type, ptr %250, i64 0, i32 6
  %258 = load i32, ptr %257, align 4
  %259 = lshr i32 %258, 16
  %260 = and i32 %259, 255
  br label %261

261:                                              ; preds = %256, %254
  %262 = phi i32 [ %255, %254 ], [ %260, %256 ]
  %263 = icmp eq i32 %262, 71
  br i1 %263, label %296, label %264

264:                                              ; preds = %261
  %265 = load ptr, ptr %37, align 8, !tbaa !16
  %266 = load i64, ptr %265, align 8
  %267 = and i64 %266, 65535
  %268 = icmp eq i64 %267, 14
  br i1 %268, label %269, label %271

269:                                              ; preds = %264
  %270 = tail call i32 @vector_type_mode(ptr noundef nonnull %265) #30
  br label %276

271:                                              ; preds = %264
  %272 = getelementptr inbounds %struct.tree_type, ptr %265, i64 0, i32 6
  %273 = load i32, ptr %272, align 4
  %274 = lshr i32 %273, 16
  %275 = and i32 %274, 255
  br label %276

276:                                              ; preds = %271, %269
  %277 = phi i32 [ %270, %269 ], [ %275, %271 ]
  %278 = icmp eq i32 %277, 81
  br i1 %278, label %296, label %279

279:                                              ; preds = %276
  %280 = load ptr, ptr %37, align 8, !tbaa !16
  %281 = load i64, ptr %280, align 8
  %282 = and i64 %281, 65535
  %283 = icmp eq i64 %282, 14
  br i1 %283, label %284, label %286

284:                                              ; preds = %279
  %285 = tail call i32 @vector_type_mode(ptr noundef nonnull %280) #30
  br label %291

286:                                              ; preds = %279
  %287 = getelementptr inbounds %struct.tree_type, ptr %280, i64 0, i32 6
  %288 = load i32, ptr %287, align 4
  %289 = lshr i32 %288, 16
  %290 = and i32 %289, 255
  br label %291

291:                                              ; preds = %286, %284
  %292 = phi i32 [ %285, %284 ], [ %290, %286 ]
  %293 = icmp eq i32 %292, 82
  %294 = icmp slt i32 %34, 128
  %295 = select i1 %293, i1 %294, i1 false
  br i1 %295, label %597, label %596

296:                                              ; preds = %276, %261, %246, %231, %216, %201, %186, %171, %156, %141, %126, %111, %96, %81, %66
  %297 = icmp slt i32 %34, 128
  br i1 %297, label %597, label %596

298:                                              ; preds = %33
  %299 = getelementptr inbounds %struct.tree_type, ptr %0, i64 0, i32 6
  %300 = load i32, ptr %299, align 4
  %301 = and i32 %300, 16711680
  %302 = icmp eq i32 %301, 3407872
  %303 = icmp slt i32 %34, 64
  %304 = select i1 %302, i1 %303, i1 false
  br i1 %304, label %597, label %305

305:                                              ; preds = %298
  %306 = and i64 %6, 65535
  %307 = icmp eq i64 %306, 14
  br i1 %307, label %308, label %310

308:                                              ; preds = %305
  %309 = tail call i32 @vector_type_mode(ptr noundef nonnull %0) #30
  br label %313

310:                                              ; preds = %305
  %311 = lshr i32 %300, 16
  %312 = and i32 %311, 255
  br label %313

313:                                              ; preds = %310, %308
  %314 = phi i32 [ %309, %308 ], [ %312, %310 ]
  %315 = icmp eq i32 %314, 53
  br i1 %315, label %331, label %316

316:                                              ; preds = %313
  %317 = load i64, ptr %0, align 8
  %318 = and i64 %317, 65535
  %319 = icmp eq i64 %318, 14
  br i1 %319, label %320, label %322

320:                                              ; preds = %316
  %321 = tail call i32 @vector_type_mode(ptr noundef nonnull %0) #30
  br label %326

322:                                              ; preds = %316
  %323 = load i32, ptr %299, align 4
  %324 = lshr i32 %323, 16
  %325 = and i32 %324, 255
  br label %326

326:                                              ; preds = %322, %320
  %327 = phi i32 [ %321, %320 ], [ %325, %322 ]
  %328 = icmp eq i32 %327, 54
  %329 = icmp slt i32 %34, 128
  %330 = select i1 %328, i1 %329, i1 false
  br i1 %330, label %597, label %596

331:                                              ; preds = %313
  %332 = icmp slt i32 %34, 128
  br i1 %332, label %597, label %596

333:                                              ; preds = %33, %33, %33
  %334 = getelementptr inbounds %struct.tree_type, ptr %0, i64 0, i32 1
  %335 = load ptr, ptr %334, align 8, !tbaa !16
  %336 = icmp eq ptr %335, null
  br i1 %336, label %596, label %337

337:                                              ; preds = %333
  %338 = getelementptr inbounds %struct.tree_decl_common, ptr %335, i64 0, i32 2
  %339 = load i64, ptr %338, align 8
  %340 = trunc i64 %339 to i32
  %341 = and i32 %340, 255
  %342 = icmp eq i32 %341, 39
  %343 = icmp slt i32 %34, 64
  %344 = select i1 %342, i1 %343, i1 false
  br i1 %344, label %597, label %345

345:                                              ; preds = %337
  %346 = trunc i64 %339 to i8
  switch i8 %346, label %347 [
    i8 40, label %351
    i8 67, label %351
    i8 18, label %351
    i8 63, label %351
    i8 41, label %351
    i8 64, label %351
    i8 80, label %351
    i8 66, label %351
    i8 79, label %351
    i8 65, label %351
    i8 68, label %351
    i8 69, label %351
    i8 70, label %351
    i8 71, label %351
    i8 81, label %351
  ]

347:                                              ; preds = %345
  %348 = icmp eq i32 %341, 82
  %349 = icmp slt i32 %34, 128
  %350 = select i1 %348, i1 %349, i1 false
  br i1 %350, label %597, label %596

351:                                              ; preds = %345, %345, %345, %345, %345, %345, %345, %345, %345, %345, %345, %345, %345, %345, %345
  %352 = icmp slt i32 %34, 128
  br i1 %352, label %597, label %596

353:                                              ; preds = %33, %33, %33
  %354 = and i64 %6, 65535
  %355 = icmp eq i64 %354, 14
  br i1 %355, label %356, label %358

356:                                              ; preds = %353
  %357 = tail call i32 @vector_type_mode(ptr noundef nonnull %0) #30
  br label %363

358:                                              ; preds = %353
  %359 = getelementptr inbounds %struct.tree_type, ptr %0, i64 0, i32 6
  %360 = load i32, ptr %359, align 4
  %361 = lshr i32 %360, 16
  %362 = and i32 %361, 255
  br label %363

363:                                              ; preds = %358, %356
  %364 = phi i32 [ %357, %356 ], [ %362, %358 ]
  %365 = icmp eq i32 %364, 39
  %366 = icmp slt i32 %34, 64
  %367 = select i1 %365, i1 %366, i1 false
  br i1 %367, label %597, label %368

368:                                              ; preds = %363
  %369 = load i64, ptr %0, align 8
  %370 = and i64 %369, 65535
  %371 = icmp eq i64 %370, 14
  br i1 %371, label %372, label %374

372:                                              ; preds = %368
  %373 = tail call i32 @vector_type_mode(ptr noundef nonnull %0) #30
  br label %379

374:                                              ; preds = %368
  %375 = getelementptr inbounds %struct.tree_type, ptr %0, i64 0, i32 6
  %376 = load i32, ptr %375, align 4
  %377 = lshr i32 %376, 16
  %378 = and i32 %377, 255
  br label %379

379:                                              ; preds = %374, %372
  %380 = phi i32 [ %373, %372 ], [ %378, %374 ]
  %381 = icmp eq i32 %380, 40
  br i1 %381, label %594, label %382

382:                                              ; preds = %379
  %383 = load i64, ptr %0, align 8
  %384 = and i64 %383, 65535
  %385 = icmp eq i64 %384, 14
  br i1 %385, label %386, label %388

386:                                              ; preds = %382
  %387 = tail call i32 @vector_type_mode(ptr noundef nonnull %0) #30
  br label %393

388:                                              ; preds = %382
  %389 = getelementptr inbounds %struct.tree_type, ptr %0, i64 0, i32 6
  %390 = load i32, ptr %389, align 4
  %391 = lshr i32 %390, 16
  %392 = and i32 %391, 255
  br label %393

393:                                              ; preds = %388, %386
  %394 = phi i32 [ %387, %386 ], [ %392, %388 ]
  %395 = icmp eq i32 %394, 67
  br i1 %395, label %594, label %396

396:                                              ; preds = %393
  %397 = load i64, ptr %0, align 8
  %398 = and i64 %397, 65535
  %399 = icmp eq i64 %398, 14
  br i1 %399, label %400, label %402

400:                                              ; preds = %396
  %401 = tail call i32 @vector_type_mode(ptr noundef nonnull %0) #30
  br label %407

402:                                              ; preds = %396
  %403 = getelementptr inbounds %struct.tree_type, ptr %0, i64 0, i32 6
  %404 = load i32, ptr %403, align 4
  %405 = lshr i32 %404, 16
  %406 = and i32 %405, 255
  br label %407

407:                                              ; preds = %402, %400
  %408 = phi i32 [ %401, %400 ], [ %406, %402 ]
  %409 = icmp eq i32 %408, 18
  br i1 %409, label %594, label %410

410:                                              ; preds = %407
  %411 = load i64, ptr %0, align 8
  %412 = and i64 %411, 65535
  %413 = icmp eq i64 %412, 14
  br i1 %413, label %414, label %416

414:                                              ; preds = %410
  %415 = tail call i32 @vector_type_mode(ptr noundef nonnull %0) #30
  br label %421

416:                                              ; preds = %410
  %417 = getelementptr inbounds %struct.tree_type, ptr %0, i64 0, i32 6
  %418 = load i32, ptr %417, align 4
  %419 = lshr i32 %418, 16
  %420 = and i32 %419, 255
  br label %421

421:                                              ; preds = %416, %414
  %422 = phi i32 [ %415, %414 ], [ %420, %416 ]
  %423 = icmp eq i32 %422, 63
  br i1 %423, label %594, label %424

424:                                              ; preds = %421
  %425 = load i64, ptr %0, align 8
  %426 = and i64 %425, 65535
  %427 = icmp eq i64 %426, 14
  br i1 %427, label %428, label %430

428:                                              ; preds = %424
  %429 = tail call i32 @vector_type_mode(ptr noundef nonnull %0) #30
  br label %435

430:                                              ; preds = %424
  %431 = getelementptr inbounds %struct.tree_type, ptr %0, i64 0, i32 6
  %432 = load i32, ptr %431, align 4
  %433 = lshr i32 %432, 16
  %434 = and i32 %433, 255
  br label %435

435:                                              ; preds = %430, %428
  %436 = phi i32 [ %429, %428 ], [ %434, %430 ]
  %437 = icmp eq i32 %436, 41
  br i1 %437, label %594, label %438

438:                                              ; preds = %435
  %439 = load i64, ptr %0, align 8
  %440 = and i64 %439, 65535
  %441 = icmp eq i64 %440, 14
  br i1 %441, label %442, label %444

442:                                              ; preds = %438
  %443 = tail call i32 @vector_type_mode(ptr noundef nonnull %0) #30
  br label %449

444:                                              ; preds = %438
  %445 = getelementptr inbounds %struct.tree_type, ptr %0, i64 0, i32 6
  %446 = load i32, ptr %445, align 4
  %447 = lshr i32 %446, 16
  %448 = and i32 %447, 255
  br label %449

449:                                              ; preds = %444, %442
  %450 = phi i32 [ %443, %442 ], [ %448, %444 ]
  %451 = icmp eq i32 %450, 64
  br i1 %451, label %594, label %452

452:                                              ; preds = %449
  %453 = load i64, ptr %0, align 8
  %454 = and i64 %453, 65535
  %455 = icmp eq i64 %454, 14
  br i1 %455, label %456, label %458

456:                                              ; preds = %452
  %457 = tail call i32 @vector_type_mode(ptr noundef nonnull %0) #30
  br label %463

458:                                              ; preds = %452
  %459 = getelementptr inbounds %struct.tree_type, ptr %0, i64 0, i32 6
  %460 = load i32, ptr %459, align 4
  %461 = lshr i32 %460, 16
  %462 = and i32 %461, 255
  br label %463

463:                                              ; preds = %458, %456
  %464 = phi i32 [ %457, %456 ], [ %462, %458 ]
  %465 = icmp eq i32 %464, 80
  br i1 %465, label %594, label %466

466:                                              ; preds = %463
  %467 = load i64, ptr %0, align 8
  %468 = and i64 %467, 65535
  %469 = icmp eq i64 %468, 14
  br i1 %469, label %470, label %472

470:                                              ; preds = %466
  %471 = tail call i32 @vector_type_mode(ptr noundef nonnull %0) #30
  br label %477

472:                                              ; preds = %466
  %473 = getelementptr inbounds %struct.tree_type, ptr %0, i64 0, i32 6
  %474 = load i32, ptr %473, align 4
  %475 = lshr i32 %474, 16
  %476 = and i32 %475, 255
  br label %477

477:                                              ; preds = %472, %470
  %478 = phi i32 [ %471, %470 ], [ %476, %472 ]
  %479 = icmp eq i32 %478, 66
  br i1 %479, label %594, label %480

480:                                              ; preds = %477
  %481 = load i64, ptr %0, align 8
  %482 = and i64 %481, 65535
  %483 = icmp eq i64 %482, 14
  br i1 %483, label %484, label %486

484:                                              ; preds = %480
  %485 = tail call i32 @vector_type_mode(ptr noundef nonnull %0) #30
  br label %491

486:                                              ; preds = %480
  %487 = getelementptr inbounds %struct.tree_type, ptr %0, i64 0, i32 6
  %488 = load i32, ptr %487, align 4
  %489 = lshr i32 %488, 16
  %490 = and i32 %489, 255
  br label %491

491:                                              ; preds = %486, %484
  %492 = phi i32 [ %485, %484 ], [ %490, %486 ]
  %493 = icmp eq i32 %492, 79
  br i1 %493, label %594, label %494

494:                                              ; preds = %491
  %495 = load i64, ptr %0, align 8
  %496 = and i64 %495, 65535
  %497 = icmp eq i64 %496, 14
  br i1 %497, label %498, label %500

498:                                              ; preds = %494
  %499 = tail call i32 @vector_type_mode(ptr noundef nonnull %0) #30
  br label %505

500:                                              ; preds = %494
  %501 = getelementptr inbounds %struct.tree_type, ptr %0, i64 0, i32 6
  %502 = load i32, ptr %501, align 4
  %503 = lshr i32 %502, 16
  %504 = and i32 %503, 255
  br label %505

505:                                              ; preds = %500, %498
  %506 = phi i32 [ %499, %498 ], [ %504, %500 ]
  %507 = icmp eq i32 %506, 65
  br i1 %507, label %594, label %508

508:                                              ; preds = %505
  %509 = load i64, ptr %0, align 8
  %510 = and i64 %509, 65535
  %511 = icmp eq i64 %510, 14
  br i1 %511, label %512, label %514

512:                                              ; preds = %508
  %513 = tail call i32 @vector_type_mode(ptr noundef nonnull %0) #30
  br label %519

514:                                              ; preds = %508
  %515 = getelementptr inbounds %struct.tree_type, ptr %0, i64 0, i32 6
  %516 = load i32, ptr %515, align 4
  %517 = lshr i32 %516, 16
  %518 = and i32 %517, 255
  br label %519

519:                                              ; preds = %514, %512
  %520 = phi i32 [ %513, %512 ], [ %518, %514 ]
  %521 = icmp eq i32 %520, 68
  br i1 %521, label %594, label %522

522:                                              ; preds = %519
  %523 = load i64, ptr %0, align 8
  %524 = and i64 %523, 65535
  %525 = icmp eq i64 %524, 14
  br i1 %525, label %526, label %528

526:                                              ; preds = %522
  %527 = tail call i32 @vector_type_mode(ptr noundef nonnull %0) #30
  br label %533

528:                                              ; preds = %522
  %529 = getelementptr inbounds %struct.tree_type, ptr %0, i64 0, i32 6
  %530 = load i32, ptr %529, align 4
  %531 = lshr i32 %530, 16
  %532 = and i32 %531, 255
  br label %533

533:                                              ; preds = %528, %526
  %534 = phi i32 [ %527, %526 ], [ %532, %528 ]
  %535 = icmp eq i32 %534, 69
  br i1 %535, label %594, label %536

536:                                              ; preds = %533
  %537 = load i64, ptr %0, align 8
  %538 = and i64 %537, 65535
  %539 = icmp eq i64 %538, 14
  br i1 %539, label %540, label %542

540:                                              ; preds = %536
  %541 = tail call i32 @vector_type_mode(ptr noundef nonnull %0) #30
  br label %547

542:                                              ; preds = %536
  %543 = getelementptr inbounds %struct.tree_type, ptr %0, i64 0, i32 6
  %544 = load i32, ptr %543, align 4
  %545 = lshr i32 %544, 16
  %546 = and i32 %545, 255
  br label %547

547:                                              ; preds = %542, %540
  %548 = phi i32 [ %541, %540 ], [ %546, %542 ]
  %549 = icmp eq i32 %548, 70
  br i1 %549, label %594, label %550

550:                                              ; preds = %547
  %551 = load i64, ptr %0, align 8
  %552 = and i64 %551, 65535
  %553 = icmp eq i64 %552, 14
  br i1 %553, label %554, label %556

554:                                              ; preds = %550
  %555 = tail call i32 @vector_type_mode(ptr noundef nonnull %0) #30
  br label %561

556:                                              ; preds = %550
  %557 = getelementptr inbounds %struct.tree_type, ptr %0, i64 0, i32 6
  %558 = load i32, ptr %557, align 4
  %559 = lshr i32 %558, 16
  %560 = and i32 %559, 255
  br label %561

561:                                              ; preds = %556, %554
  %562 = phi i32 [ %555, %554 ], [ %560, %556 ]
  %563 = icmp eq i32 %562, 71
  br i1 %563, label %594, label %564

564:                                              ; preds = %561
  %565 = load i64, ptr %0, align 8
  %566 = and i64 %565, 65535
  %567 = icmp eq i64 %566, 14
  br i1 %567, label %568, label %570

568:                                              ; preds = %564
  %569 = tail call i32 @vector_type_mode(ptr noundef nonnull %0) #30
  br label %575

570:                                              ; preds = %564
  %571 = getelementptr inbounds %struct.tree_type, ptr %0, i64 0, i32 6
  %572 = load i32, ptr %571, align 4
  %573 = lshr i32 %572, 16
  %574 = and i32 %573, 255
  br label %575

575:                                              ; preds = %570, %568
  %576 = phi i32 [ %569, %568 ], [ %574, %570 ]
  %577 = icmp eq i32 %576, 81
  br i1 %577, label %594, label %578

578:                                              ; preds = %575
  %579 = load i64, ptr %0, align 8
  %580 = and i64 %579, 65535
  %581 = icmp eq i64 %580, 14
  br i1 %581, label %582, label %584

582:                                              ; preds = %578
  %583 = tail call i32 @vector_type_mode(ptr noundef nonnull %0) #30
  br label %589

584:                                              ; preds = %578
  %585 = getelementptr inbounds %struct.tree_type, ptr %0, i64 0, i32 6
  %586 = load i32, ptr %585, align 4
  %587 = lshr i32 %586, 16
  %588 = and i32 %587, 255
  br label %589

589:                                              ; preds = %584, %582
  %590 = phi i32 [ %583, %582 ], [ %588, %584 ]
  %591 = icmp eq i32 %590, 82
  %592 = icmp slt i32 %34, 128
  %593 = select i1 %591, i1 %592, i1 false
  br i1 %593, label %597, label %596

594:                                              ; preds = %575, %561, %547, %533, %519, %505, %491, %477, %463, %449, %435, %421, %407, %393, %379
  %595 = icmp slt i32 %34, 128
  br i1 %595, label %597, label %596

596:                                              ; preds = %333, %33, %331, %326, %594, %589, %347, %351, %291, %296
  br label %597

597:                                              ; preds = %594, %589, %363, %351, %347, %337, %331, %326, %298, %296, %291, %49, %596
  %598 = phi i32 [ %34, %596 ], [ 64, %49 ], [ 128, %291 ], [ 128, %296 ], [ 64, %298 ], [ 128, %326 ], [ 128, %331 ], [ 64, %337 ], [ 128, %347 ], [ 128, %351 ], [ 64, %363 ], [ 128, %589 ], [ 128, %594 ]
  ret i32 %598
}

; Function Attrs: nounwind sspstrong uwtable
define dso_local i32 @ix86_local_alignment(ptr noundef %0, i32 noundef %1, i32 noundef %2) local_unnamed_addr #9 {
  %4 = icmp eq ptr %0, null
  br i1 %4, label %14, label %5

5:                                                ; preds = %3
  %6 = load i64, ptr %0, align 8
  %7 = and i64 %6, 65535
  %8 = getelementptr inbounds [0 x i32], ptr @tree_code_type, i64 0, i64 %7
  %9 = load i32, ptr %8, align 4, !tbaa !16
  %10 = icmp eq i32 %9, 3
  br i1 %10, label %11, label %14

11:                                               ; preds = %5
  %12 = getelementptr inbounds %struct.tree_common, ptr %0, i64 0, i32 2
  %13 = load ptr, ptr %12, align 8, !tbaa !16
  br label %14

14:                                               ; preds = %3, %5, %11
  %15 = phi ptr [ %13, %11 ], [ %0, %5 ], [ null, %3 ]
  %16 = phi ptr [ %0, %11 ], [ null, %5 ], [ null, %3 ]
  %17 = icmp eq i32 %2, 64
  %18 = load i32, ptr @ix86_preferred_stack_boundary, align 4
  %19 = icmp ult i32 %18, 64
  %20 = select i1 %17, i1 %19, i1 false
  br i1 %20, label %21, label %51

21:                                               ; preds = %14
  %22 = icmp eq i32 %1, 17
  %23 = icmp eq ptr %15, null
  br i1 %22, label %39, label %24

24:                                               ; preds = %21
  br i1 %23, label %54, label %25

25:                                               ; preds = %24
  %26 = load i64, ptr %15, align 8
  %27 = and i64 %26, 65535
  %28 = icmp eq i64 %27, 14
  br i1 %28, label %29, label %31

29:                                               ; preds = %25
  %30 = tail call i32 @vector_type_mode(ptr noundef nonnull %15) #30
  br label %36

31:                                               ; preds = %25
  %32 = getelementptr inbounds %struct.tree_type, ptr %15, i64 0, i32 6
  %33 = load i32, ptr %32, align 4
  %34 = lshr i32 %33, 16
  %35 = and i32 %34, 255
  br label %36

36:                                               ; preds = %31, %29
  %37 = phi i32 [ %30, %29 ], [ %35, %31 ]
  %38 = icmp eq i32 %37, 17
  br i1 %38, label %40, label %62

39:                                               ; preds = %21
  br i1 %23, label %44, label %40

40:                                               ; preds = %36, %39
  %41 = load i64, ptr %15, align 8
  %42 = and i64 %41, 4398046511104
  %43 = icmp eq i64 %42, 0
  br i1 %43, label %44, label %62

44:                                               ; preds = %40, %39
  %45 = icmp eq ptr %16, null
  br i1 %45, label %50, label %46

46:                                               ; preds = %44
  %47 = load i64, ptr %16, align 8
  %48 = and i64 %47, 4398046511104
  %49 = icmp eq i64 %48, 0
  br i1 %49, label %50, label %51

50:                                               ; preds = %46, %44
  br label %51

51:                                               ; preds = %50, %46, %14
  %52 = phi i32 [ 64, %46 ], [ 32, %50 ], [ %2, %14 ]
  %53 = icmp eq ptr %15, null
  br i1 %53, label %54, label %62

54:                                               ; preds = %24, %51
  %55 = phi i32 [ %52, %51 ], [ 64, %24 ]
  %56 = icmp eq i32 %1, 40
  br i1 %56, label %57, label %627

57:                                               ; preds = %54
  %58 = tail call i32 @get_mode_alignment(i32 noundef 39) #30
  %59 = icmp ult i32 %55, %58
  br i1 %59, label %60, label %627

60:                                               ; preds = %57
  %61 = tail call i32 @get_mode_alignment(i32 noundef 39) #30
  br label %627

62:                                               ; preds = %36, %40, %51
  %63 = phi i32 [ %52, %51 ], [ 64, %40 ], [ 64, %36 ]
  %64 = load i64, ptr %15, align 8
  %65 = trunc i64 %64 to i16
  switch i16 %65, label %626 [
    i16 15, label %66
    i16 13, label %328
    i16 16, label %363
    i16 17, label %363
    i16 18, label %363
    i16 9, label %383
    i16 14, label %383
    i16 8, label %383
  ]

66:                                               ; preds = %62
  %67 = getelementptr inbounds %struct.tree_common, ptr %15, i64 0, i32 2
  %68 = load ptr, ptr %67, align 8, !tbaa !16
  %69 = load i64, ptr %68, align 8
  %70 = and i64 %69, 65535
  %71 = icmp eq i64 %70, 14
  br i1 %71, label %72, label %74

72:                                               ; preds = %66
  %73 = tail call i32 @vector_type_mode(ptr noundef nonnull %68) #30
  br label %79

74:                                               ; preds = %66
  %75 = getelementptr inbounds %struct.tree_type, ptr %68, i64 0, i32 6
  %76 = load i32, ptr %75, align 4
  %77 = lshr i32 %76, 16
  %78 = and i32 %77, 255
  br label %79

79:                                               ; preds = %74, %72
  %80 = phi i32 [ %73, %72 ], [ %78, %74 ]
  %81 = icmp eq i32 %80, 39
  %82 = icmp ult i32 %63, 64
  %83 = and i1 %82, %81
  br i1 %83, label %627, label %84

84:                                               ; preds = %79
  %85 = load ptr, ptr %67, align 8, !tbaa !16
  %86 = load i64, ptr %85, align 8
  %87 = and i64 %86, 65535
  %88 = icmp eq i64 %87, 14
  br i1 %88, label %89, label %91

89:                                               ; preds = %84
  %90 = tail call i32 @vector_type_mode(ptr noundef nonnull %85) #30
  br label %96

91:                                               ; preds = %84
  %92 = getelementptr inbounds %struct.tree_type, ptr %85, i64 0, i32 6
  %93 = load i32, ptr %92, align 4
  %94 = lshr i32 %93, 16
  %95 = and i32 %94, 255
  br label %96

96:                                               ; preds = %91, %89
  %97 = phi i32 [ %90, %89 ], [ %95, %91 ]
  %98 = icmp eq i32 %97, 40
  br i1 %98, label %326, label %99

99:                                               ; preds = %96
  %100 = load ptr, ptr %67, align 8, !tbaa !16
  %101 = load i64, ptr %100, align 8
  %102 = and i64 %101, 65535
  %103 = icmp eq i64 %102, 14
  br i1 %103, label %104, label %106

104:                                              ; preds = %99
  %105 = tail call i32 @vector_type_mode(ptr noundef nonnull %100) #30
  br label %111

106:                                              ; preds = %99
  %107 = getelementptr inbounds %struct.tree_type, ptr %100, i64 0, i32 6
  %108 = load i32, ptr %107, align 4
  %109 = lshr i32 %108, 16
  %110 = and i32 %109, 255
  br label %111

111:                                              ; preds = %106, %104
  %112 = phi i32 [ %105, %104 ], [ %110, %106 ]
  %113 = icmp eq i32 %112, 67
  br i1 %113, label %326, label %114

114:                                              ; preds = %111
  %115 = load ptr, ptr %67, align 8, !tbaa !16
  %116 = load i64, ptr %115, align 8
  %117 = and i64 %116, 65535
  %118 = icmp eq i64 %117, 14
  br i1 %118, label %119, label %121

119:                                              ; preds = %114
  %120 = tail call i32 @vector_type_mode(ptr noundef nonnull %115) #30
  br label %126

121:                                              ; preds = %114
  %122 = getelementptr inbounds %struct.tree_type, ptr %115, i64 0, i32 6
  %123 = load i32, ptr %122, align 4
  %124 = lshr i32 %123, 16
  %125 = and i32 %124, 255
  br label %126

126:                                              ; preds = %121, %119
  %127 = phi i32 [ %120, %119 ], [ %125, %121 ]
  %128 = icmp eq i32 %127, 18
  br i1 %128, label %326, label %129

129:                                              ; preds = %126
  %130 = load ptr, ptr %67, align 8, !tbaa !16
  %131 = load i64, ptr %130, align 8
  %132 = and i64 %131, 65535
  %133 = icmp eq i64 %132, 14
  br i1 %133, label %134, label %136

134:                                              ; preds = %129
  %135 = tail call i32 @vector_type_mode(ptr noundef nonnull %130) #30
  br label %141

136:                                              ; preds = %129
  %137 = getelementptr inbounds %struct.tree_type, ptr %130, i64 0, i32 6
  %138 = load i32, ptr %137, align 4
  %139 = lshr i32 %138, 16
  %140 = and i32 %139, 255
  br label %141

141:                                              ; preds = %136, %134
  %142 = phi i32 [ %135, %134 ], [ %140, %136 ]
  %143 = icmp eq i32 %142, 63
  br i1 %143, label %326, label %144

144:                                              ; preds = %141
  %145 = load ptr, ptr %67, align 8, !tbaa !16
  %146 = load i64, ptr %145, align 8
  %147 = and i64 %146, 65535
  %148 = icmp eq i64 %147, 14
  br i1 %148, label %149, label %151

149:                                              ; preds = %144
  %150 = tail call i32 @vector_type_mode(ptr noundef nonnull %145) #30
  br label %156

151:                                              ; preds = %144
  %152 = getelementptr inbounds %struct.tree_type, ptr %145, i64 0, i32 6
  %153 = load i32, ptr %152, align 4
  %154 = lshr i32 %153, 16
  %155 = and i32 %154, 255
  br label %156

156:                                              ; preds = %151, %149
  %157 = phi i32 [ %150, %149 ], [ %155, %151 ]
  %158 = icmp eq i32 %157, 41
  br i1 %158, label %326, label %159

159:                                              ; preds = %156
  %160 = load ptr, ptr %67, align 8, !tbaa !16
  %161 = load i64, ptr %160, align 8
  %162 = and i64 %161, 65535
  %163 = icmp eq i64 %162, 14
  br i1 %163, label %164, label %166

164:                                              ; preds = %159
  %165 = tail call i32 @vector_type_mode(ptr noundef nonnull %160) #30
  br label %171

166:                                              ; preds = %159
  %167 = getelementptr inbounds %struct.tree_type, ptr %160, i64 0, i32 6
  %168 = load i32, ptr %167, align 4
  %169 = lshr i32 %168, 16
  %170 = and i32 %169, 255
  br label %171

171:                                              ; preds = %166, %164
  %172 = phi i32 [ %165, %164 ], [ %170, %166 ]
  %173 = icmp eq i32 %172, 64
  br i1 %173, label %326, label %174

174:                                              ; preds = %171
  %175 = load ptr, ptr %67, align 8, !tbaa !16
  %176 = load i64, ptr %175, align 8
  %177 = and i64 %176, 65535
  %178 = icmp eq i64 %177, 14
  br i1 %178, label %179, label %181

179:                                              ; preds = %174
  %180 = tail call i32 @vector_type_mode(ptr noundef nonnull %175) #30
  br label %186

181:                                              ; preds = %174
  %182 = getelementptr inbounds %struct.tree_type, ptr %175, i64 0, i32 6
  %183 = load i32, ptr %182, align 4
  %184 = lshr i32 %183, 16
  %185 = and i32 %184, 255
  br label %186

186:                                              ; preds = %181, %179
  %187 = phi i32 [ %180, %179 ], [ %185, %181 ]
  %188 = icmp eq i32 %187, 80
  br i1 %188, label %326, label %189

189:                                              ; preds = %186
  %190 = load ptr, ptr %67, align 8, !tbaa !16
  %191 = load i64, ptr %190, align 8
  %192 = and i64 %191, 65535
  %193 = icmp eq i64 %192, 14
  br i1 %193, label %194, label %196

194:                                              ; preds = %189
  %195 = tail call i32 @vector_type_mode(ptr noundef nonnull %190) #30
  br label %201

196:                                              ; preds = %189
  %197 = getelementptr inbounds %struct.tree_type, ptr %190, i64 0, i32 6
  %198 = load i32, ptr %197, align 4
  %199 = lshr i32 %198, 16
  %200 = and i32 %199, 255
  br label %201

201:                                              ; preds = %196, %194
  %202 = phi i32 [ %195, %194 ], [ %200, %196 ]
  %203 = icmp eq i32 %202, 66
  br i1 %203, label %326, label %204

204:                                              ; preds = %201
  %205 = load ptr, ptr %67, align 8, !tbaa !16
  %206 = load i64, ptr %205, align 8
  %207 = and i64 %206, 65535
  %208 = icmp eq i64 %207, 14
  br i1 %208, label %209, label %211

209:                                              ; preds = %204
  %210 = tail call i32 @vector_type_mode(ptr noundef nonnull %205) #30
  br label %216

211:                                              ; preds = %204
  %212 = getelementptr inbounds %struct.tree_type, ptr %205, i64 0, i32 6
  %213 = load i32, ptr %212, align 4
  %214 = lshr i32 %213, 16
  %215 = and i32 %214, 255
  br label %216

216:                                              ; preds = %211, %209
  %217 = phi i32 [ %210, %209 ], [ %215, %211 ]
  %218 = icmp eq i32 %217, 79
  br i1 %218, label %326, label %219

219:                                              ; preds = %216
  %220 = load ptr, ptr %67, align 8, !tbaa !16
  %221 = load i64, ptr %220, align 8
  %222 = and i64 %221, 65535
  %223 = icmp eq i64 %222, 14
  br i1 %223, label %224, label %226

224:                                              ; preds = %219
  %225 = tail call i32 @vector_type_mode(ptr noundef nonnull %220) #30
  br label %231

226:                                              ; preds = %219
  %227 = getelementptr inbounds %struct.tree_type, ptr %220, i64 0, i32 6
  %228 = load i32, ptr %227, align 4
  %229 = lshr i32 %228, 16
  %230 = and i32 %229, 255
  br label %231

231:                                              ; preds = %226, %224
  %232 = phi i32 [ %225, %224 ], [ %230, %226 ]
  %233 = icmp eq i32 %232, 65
  br i1 %233, label %326, label %234

234:                                              ; preds = %231
  %235 = load ptr, ptr %67, align 8, !tbaa !16
  %236 = load i64, ptr %235, align 8
  %237 = and i64 %236, 65535
  %238 = icmp eq i64 %237, 14
  br i1 %238, label %239, label %241

239:                                              ; preds = %234
  %240 = tail call i32 @vector_type_mode(ptr noundef nonnull %235) #30
  br label %246

241:                                              ; preds = %234
  %242 = getelementptr inbounds %struct.tree_type, ptr %235, i64 0, i32 6
  %243 = load i32, ptr %242, align 4
  %244 = lshr i32 %243, 16
  %245 = and i32 %244, 255
  br label %246

246:                                              ; preds = %241, %239
  %247 = phi i32 [ %240, %239 ], [ %245, %241 ]
  %248 = icmp eq i32 %247, 68
  br i1 %248, label %326, label %249

249:                                              ; preds = %246
  %250 = load ptr, ptr %67, align 8, !tbaa !16
  %251 = load i64, ptr %250, align 8
  %252 = and i64 %251, 65535
  %253 = icmp eq i64 %252, 14
  br i1 %253, label %254, label %256

254:                                              ; preds = %249
  %255 = tail call i32 @vector_type_mode(ptr noundef nonnull %250) #30
  br label %261

256:                                              ; preds = %249
  %257 = getelementptr inbounds %struct.tree_type, ptr %250, i64 0, i32 6
  %258 = load i32, ptr %257, align 4
  %259 = lshr i32 %258, 16
  %260 = and i32 %259, 255
  br label %261

261:                                              ; preds = %256, %254
  %262 = phi i32 [ %255, %254 ], [ %260, %256 ]
  %263 = icmp eq i32 %262, 69
  br i1 %263, label %326, label %264

264:                                              ; preds = %261
  %265 = load ptr, ptr %67, align 8, !tbaa !16
  %266 = load i64, ptr %265, align 8
  %267 = and i64 %266, 65535
  %268 = icmp eq i64 %267, 14
  br i1 %268, label %269, label %271

269:                                              ; preds = %264
  %270 = tail call i32 @vector_type_mode(ptr noundef nonnull %265) #30
  br label %276

271:                                              ; preds = %264
  %272 = getelementptr inbounds %struct.tree_type, ptr %265, i64 0, i32 6
  %273 = load i32, ptr %272, align 4
  %274 = lshr i32 %273, 16
  %275 = and i32 %274, 255
  br label %276

276:                                              ; preds = %271, %269
  %277 = phi i32 [ %270, %269 ], [ %275, %271 ]
  %278 = icmp eq i32 %277, 70
  br i1 %278, label %326, label %279

279:                                              ; preds = %276
  %280 = load ptr, ptr %67, align 8, !tbaa !16
  %281 = load i64, ptr %280, align 8
  %282 = and i64 %281, 65535
  %283 = icmp eq i64 %282, 14
  br i1 %283, label %284, label %286

284:                                              ; preds = %279
  %285 = tail call i32 @vector_type_mode(ptr noundef nonnull %280) #30
  br label %291

286:                                              ; preds = %279
  %287 = getelementptr inbounds %struct.tree_type, ptr %280, i64 0, i32 6
  %288 = load i32, ptr %287, align 4
  %289 = lshr i32 %288, 16
  %290 = and i32 %289, 255
  br label %291

291:                                              ; preds = %286, %284
  %292 = phi i32 [ %285, %284 ], [ %290, %286 ]
  %293 = icmp eq i32 %292, 71
  br i1 %293, label %326, label %294

294:                                              ; preds = %291
  %295 = load ptr, ptr %67, align 8, !tbaa !16
  %296 = load i64, ptr %295, align 8
  %297 = and i64 %296, 65535
  %298 = icmp eq i64 %297, 14
  br i1 %298, label %299, label %301

299:                                              ; preds = %294
  %300 = tail call i32 @vector_type_mode(ptr noundef nonnull %295) #30
  br label %306

301:                                              ; preds = %294
  %302 = getelementptr inbounds %struct.tree_type, ptr %295, i64 0, i32 6
  %303 = load i32, ptr %302, align 4
  %304 = lshr i32 %303, 16
  %305 = and i32 %304, 255
  br label %306

306:                                              ; preds = %301, %299
  %307 = phi i32 [ %300, %299 ], [ %305, %301 ]
  %308 = icmp eq i32 %307, 81
  br i1 %308, label %326, label %309

309:                                              ; preds = %306
  %310 = load ptr, ptr %67, align 8, !tbaa !16
  %311 = load i64, ptr %310, align 8
  %312 = and i64 %311, 65535
  %313 = icmp eq i64 %312, 14
  br i1 %313, label %314, label %316

314:                                              ; preds = %309
  %315 = tail call i32 @vector_type_mode(ptr noundef nonnull %310) #30
  br label %321

316:                                              ; preds = %309
  %317 = getelementptr inbounds %struct.tree_type, ptr %310, i64 0, i32 6
  %318 = load i32, ptr %317, align 4
  %319 = lshr i32 %318, 16
  %320 = and i32 %319, 255
  br label %321

321:                                              ; preds = %316, %314
  %322 = phi i32 [ %315, %314 ], [ %320, %316 ]
  %323 = icmp eq i32 %322, 82
  %324 = icmp ult i32 %63, 128
  %325 = and i1 %324, %323
  br i1 %325, label %627, label %626

326:                                              ; preds = %306, %291, %276, %261, %246, %231, %216, %201, %186, %171, %156, %141, %126, %111, %96
  %327 = icmp ult i32 %63, 128
  br i1 %327, label %627, label %626

328:                                              ; preds = %62
  %329 = getelementptr inbounds %struct.tree_type, ptr %15, i64 0, i32 6
  %330 = load i32, ptr %329, align 4
  %331 = and i32 %330, 16711680
  %332 = icmp eq i32 %331, 3407872
  %333 = icmp ult i32 %63, 64
  %334 = and i1 %333, %332
  br i1 %334, label %627, label %335

335:                                              ; preds = %328
  %336 = and i64 %64, 65535
  %337 = icmp eq i64 %336, 14
  br i1 %337, label %338, label %340

338:                                              ; preds = %335
  %339 = tail call i32 @vector_type_mode(ptr noundef nonnull %15) #30
  br label %343

340:                                              ; preds = %335
  %341 = lshr i32 %330, 16
  %342 = and i32 %341, 255
  br label %343

343:                                              ; preds = %340, %338
  %344 = phi i32 [ %339, %338 ], [ %342, %340 ]
  %345 = icmp eq i32 %344, 53
  br i1 %345, label %361, label %346

346:                                              ; preds = %343
  %347 = load i64, ptr %15, align 8
  %348 = and i64 %347, 65535
  %349 = icmp eq i64 %348, 14
  br i1 %349, label %350, label %352

350:                                              ; preds = %346
  %351 = tail call i32 @vector_type_mode(ptr noundef nonnull %15) #30
  br label %356

352:                                              ; preds = %346
  %353 = load i32, ptr %329, align 4
  %354 = lshr i32 %353, 16
  %355 = and i32 %354, 255
  br label %356

356:                                              ; preds = %352, %350
  %357 = phi i32 [ %351, %350 ], [ %355, %352 ]
  %358 = icmp eq i32 %357, 54
  %359 = icmp ult i32 %63, 128
  %360 = and i1 %359, %358
  br i1 %360, label %627, label %626

361:                                              ; preds = %343
  %362 = icmp ult i32 %63, 128
  br i1 %362, label %627, label %626

363:                                              ; preds = %62, %62, %62
  %364 = getelementptr inbounds %struct.tree_type, ptr %15, i64 0, i32 1
  %365 = load ptr, ptr %364, align 8, !tbaa !16
  %366 = icmp eq ptr %365, null
  br i1 %366, label %626, label %367

367:                                              ; preds = %363
  %368 = getelementptr inbounds %struct.tree_decl_common, ptr %365, i64 0, i32 2
  %369 = load i64, ptr %368, align 8
  %370 = trunc i64 %369 to i32
  %371 = and i32 %370, 255
  %372 = icmp eq i32 %371, 39
  %373 = icmp ult i32 %63, 64
  %374 = and i1 %373, %372
  br i1 %374, label %627, label %375

375:                                              ; preds = %367
  %376 = trunc i64 %369 to i8
  switch i8 %376, label %377 [
    i8 40, label %381
    i8 67, label %381
    i8 18, label %381
    i8 63, label %381
    i8 41, label %381
    i8 64, label %381
    i8 80, label %381
    i8 66, label %381
    i8 79, label %381
    i8 65, label %381
    i8 68, label %381
    i8 69, label %381
    i8 70, label %381
    i8 71, label %381
    i8 81, label %381
  ]

377:                                              ; preds = %375
  %378 = icmp eq i32 %371, 82
  %379 = icmp ult i32 %63, 128
  %380 = and i1 %379, %378
  br i1 %380, label %627, label %626

381:                                              ; preds = %375, %375, %375, %375, %375, %375, %375, %375, %375, %375, %375, %375, %375, %375, %375
  %382 = icmp ult i32 %63, 128
  br i1 %382, label %627, label %626

383:                                              ; preds = %62, %62, %62
  %384 = and i64 %64, 65535
  %385 = icmp eq i64 %384, 14
  br i1 %385, label %386, label %388

386:                                              ; preds = %383
  %387 = tail call i32 @vector_type_mode(ptr noundef nonnull %15) #30
  br label %393

388:                                              ; preds = %383
  %389 = getelementptr inbounds %struct.tree_type, ptr %15, i64 0, i32 6
  %390 = load i32, ptr %389, align 4
  %391 = lshr i32 %390, 16
  %392 = and i32 %391, 255
  br label %393

393:                                              ; preds = %388, %386
  %394 = phi i32 [ %387, %386 ], [ %392, %388 ]
  %395 = icmp eq i32 %394, 39
  %396 = icmp ult i32 %63, 64
  %397 = and i1 %396, %395
  br i1 %397, label %627, label %398

398:                                              ; preds = %393
  %399 = load i64, ptr %15, align 8
  %400 = and i64 %399, 65535
  %401 = icmp eq i64 %400, 14
  br i1 %401, label %402, label %404

402:                                              ; preds = %398
  %403 = tail call i32 @vector_type_mode(ptr noundef nonnull %15) #30
  br label %409

404:                                              ; preds = %398
  %405 = getelementptr inbounds %struct.tree_type, ptr %15, i64 0, i32 6
  %406 = load i32, ptr %405, align 4
  %407 = lshr i32 %406, 16
  %408 = and i32 %407, 255
  br label %409

409:                                              ; preds = %404, %402
  %410 = phi i32 [ %403, %402 ], [ %408, %404 ]
  %411 = icmp eq i32 %410, 40
  br i1 %411, label %624, label %412

412:                                              ; preds = %409
  %413 = load i64, ptr %15, align 8
  %414 = and i64 %413, 65535
  %415 = icmp eq i64 %414, 14
  br i1 %415, label %416, label %418

416:                                              ; preds = %412
  %417 = tail call i32 @vector_type_mode(ptr noundef nonnull %15) #30
  br label %423

418:                                              ; preds = %412
  %419 = getelementptr inbounds %struct.tree_type, ptr %15, i64 0, i32 6
  %420 = load i32, ptr %419, align 4
  %421 = lshr i32 %420, 16
  %422 = and i32 %421, 255
  br label %423

423:                                              ; preds = %418, %416
  %424 = phi i32 [ %417, %416 ], [ %422, %418 ]
  %425 = icmp eq i32 %424, 67
  br i1 %425, label %624, label %426

426:                                              ; preds = %423
  %427 = load i64, ptr %15, align 8
  %428 = and i64 %427, 65535
  %429 = icmp eq i64 %428, 14
  br i1 %429, label %430, label %432

430:                                              ; preds = %426
  %431 = tail call i32 @vector_type_mode(ptr noundef nonnull %15) #30
  br label %437

432:                                              ; preds = %426
  %433 = getelementptr inbounds %struct.tree_type, ptr %15, i64 0, i32 6
  %434 = load i32, ptr %433, align 4
  %435 = lshr i32 %434, 16
  %436 = and i32 %435, 255
  br label %437

437:                                              ; preds = %432, %430
  %438 = phi i32 [ %431, %430 ], [ %436, %432 ]
  %439 = icmp eq i32 %438, 18
  br i1 %439, label %624, label %440

440:                                              ; preds = %437
  %441 = load i64, ptr %15, align 8
  %442 = and i64 %441, 65535
  %443 = icmp eq i64 %442, 14
  br i1 %443, label %444, label %446

444:                                              ; preds = %440
  %445 = tail call i32 @vector_type_mode(ptr noundef nonnull %15) #30
  br label %451

446:                                              ; preds = %440
  %447 = getelementptr inbounds %struct.tree_type, ptr %15, i64 0, i32 6
  %448 = load i32, ptr %447, align 4
  %449 = lshr i32 %448, 16
  %450 = and i32 %449, 255
  br label %451

451:                                              ; preds = %446, %444
  %452 = phi i32 [ %445, %444 ], [ %450, %446 ]
  %453 = icmp eq i32 %452, 63
  br i1 %453, label %624, label %454

454:                                              ; preds = %451
  %455 = load i64, ptr %15, align 8
  %456 = and i64 %455, 65535
  %457 = icmp eq i64 %456, 14
  br i1 %457, label %458, label %460

458:                                              ; preds = %454
  %459 = tail call i32 @vector_type_mode(ptr noundef nonnull %15) #30
  br label %465

460:                                              ; preds = %454
  %461 = getelementptr inbounds %struct.tree_type, ptr %15, i64 0, i32 6
  %462 = load i32, ptr %461, align 4
  %463 = lshr i32 %462, 16
  %464 = and i32 %463, 255
  br label %465

465:                                              ; preds = %460, %458
  %466 = phi i32 [ %459, %458 ], [ %464, %460 ]
  %467 = icmp eq i32 %466, 41
  br i1 %467, label %624, label %468

468:                                              ; preds = %465
  %469 = load i64, ptr %15, align 8
  %470 = and i64 %469, 65535
  %471 = icmp eq i64 %470, 14
  br i1 %471, label %472, label %474

472:                                              ; preds = %468
  %473 = tail call i32 @vector_type_mode(ptr noundef nonnull %15) #30
  br label %479

474:                                              ; preds = %468
  %475 = getelementptr inbounds %struct.tree_type, ptr %15, i64 0, i32 6
  %476 = load i32, ptr %475, align 4
  %477 = lshr i32 %476, 16
  %478 = and i32 %477, 255
  br label %479

479:                                              ; preds = %474, %472
  %480 = phi i32 [ %473, %472 ], [ %478, %474 ]
  %481 = icmp eq i32 %480, 64
  br i1 %481, label %624, label %482

482:                                              ; preds = %479
  %483 = load i64, ptr %15, align 8
  %484 = and i64 %483, 65535
  %485 = icmp eq i64 %484, 14
  br i1 %485, label %486, label %488

486:                                              ; preds = %482
  %487 = tail call i32 @vector_type_mode(ptr noundef nonnull %15) #30
  br label %493

488:                                              ; preds = %482
  %489 = getelementptr inbounds %struct.tree_type, ptr %15, i64 0, i32 6
  %490 = load i32, ptr %489, align 4
  %491 = lshr i32 %490, 16
  %492 = and i32 %491, 255
  br label %493

493:                                              ; preds = %488, %486
  %494 = phi i32 [ %487, %486 ], [ %492, %488 ]
  %495 = icmp eq i32 %494, 80
  br i1 %495, label %624, label %496

496:                                              ; preds = %493
  %497 = load i64, ptr %15, align 8
  %498 = and i64 %497, 65535
  %499 = icmp eq i64 %498, 14
  br i1 %499, label %500, label %502

500:                                              ; preds = %496
  %501 = tail call i32 @vector_type_mode(ptr noundef nonnull %15) #30
  br label %507

502:                                              ; preds = %496
  %503 = getelementptr inbounds %struct.tree_type, ptr %15, i64 0, i32 6
  %504 = load i32, ptr %503, align 4
  %505 = lshr i32 %504, 16
  %506 = and i32 %505, 255
  br label %507

507:                                              ; preds = %502, %500
  %508 = phi i32 [ %501, %500 ], [ %506, %502 ]
  %509 = icmp eq i32 %508, 66
  br i1 %509, label %624, label %510

510:                                              ; preds = %507
  %511 = load i64, ptr %15, align 8
  %512 = and i64 %511, 65535
  %513 = icmp eq i64 %512, 14
  br i1 %513, label %514, label %516

514:                                              ; preds = %510
  %515 = tail call i32 @vector_type_mode(ptr noundef nonnull %15) #30
  br label %521

516:                                              ; preds = %510
  %517 = getelementptr inbounds %struct.tree_type, ptr %15, i64 0, i32 6
  %518 = load i32, ptr %517, align 4
  %519 = lshr i32 %518, 16
  %520 = and i32 %519, 255
  br label %521

521:                                              ; preds = %516, %514
  %522 = phi i32 [ %515, %514 ], [ %520, %516 ]
  %523 = icmp eq i32 %522, 79
  br i1 %523, label %624, label %524

524:                                              ; preds = %521
  %525 = load i64, ptr %15, align 8
  %526 = and i64 %525, 65535
  %527 = icmp eq i64 %526, 14
  br i1 %527, label %528, label %530

528:                                              ; preds = %524
  %529 = tail call i32 @vector_type_mode(ptr noundef nonnull %15) #30
  br label %535

530:                                              ; preds = %524
  %531 = getelementptr inbounds %struct.tree_type, ptr %15, i64 0, i32 6
  %532 = load i32, ptr %531, align 4
  %533 = lshr i32 %532, 16
  %534 = and i32 %533, 255
  br label %535

535:                                              ; preds = %530, %528
  %536 = phi i32 [ %529, %528 ], [ %534, %530 ]
  %537 = icmp eq i32 %536, 65
  br i1 %537, label %624, label %538

538:                                              ; preds = %535
  %539 = load i64, ptr %15, align 8
  %540 = and i64 %539, 65535
  %541 = icmp eq i64 %540, 14
  br i1 %541, label %542, label %544

542:                                              ; preds = %538
  %543 = tail call i32 @vector_type_mode(ptr noundef nonnull %15) #30
  br label %549

544:                                              ; preds = %538
  %545 = getelementptr inbounds %struct.tree_type, ptr %15, i64 0, i32 6
  %546 = load i32, ptr %545, align 4
  %547 = lshr i32 %546, 16
  %548 = and i32 %547, 255
  br label %549

549:                                              ; preds = %544, %542
  %550 = phi i32 [ %543, %542 ], [ %548, %544 ]
  %551 = icmp eq i32 %550, 68
  br i1 %551, label %624, label %552

552:                                              ; preds = %549
  %553 = load i64, ptr %15, align 8
  %554 = and i64 %553, 65535
  %555 = icmp eq i64 %554, 14
  br i1 %555, label %556, label %558

556:                                              ; preds = %552
  %557 = tail call i32 @vector_type_mode(ptr noundef nonnull %15) #30
  br label %563

558:                                              ; preds = %552
  %559 = getelementptr inbounds %struct.tree_type, ptr %15, i64 0, i32 6
  %560 = load i32, ptr %559, align 4
  %561 = lshr i32 %560, 16
  %562 = and i32 %561, 255
  br label %563

563:                                              ; preds = %558, %556
  %564 = phi i32 [ %557, %556 ], [ %562, %558 ]
  %565 = icmp eq i32 %564, 69
  br i1 %565, label %624, label %566

566:                                              ; preds = %563
  %567 = load i64, ptr %15, align 8
  %568 = and i64 %567, 65535
  %569 = icmp eq i64 %568, 14
  br i1 %569, label %570, label %572

570:                                              ; preds = %566
  %571 = tail call i32 @vector_type_mode(ptr noundef nonnull %15) #30
  br label %577

572:                                              ; preds = %566
  %573 = getelementptr inbounds %struct.tree_type, ptr %15, i64 0, i32 6
  %574 = load i32, ptr %573, align 4
  %575 = lshr i32 %574, 16
  %576 = and i32 %575, 255
  br label %577

577:                                              ; preds = %572, %570
  %578 = phi i32 [ %571, %570 ], [ %576, %572 ]
  %579 = icmp eq i32 %578, 70
  br i1 %579, label %624, label %580

580:                                              ; preds = %577
  %581 = load i64, ptr %15, align 8
  %582 = and i64 %581, 65535
  %583 = icmp eq i64 %582, 14
  br i1 %583, label %584, label %586

584:                                              ; preds = %580
  %585 = tail call i32 @vector_type_mode(ptr noundef nonnull %15) #30
  br label %591

586:                                              ; preds = %580
  %587 = getelementptr inbounds %struct.tree_type, ptr %15, i64 0, i32 6
  %588 = load i32, ptr %587, align 4
  %589 = lshr i32 %588, 16
  %590 = and i32 %589, 255
  br label %591

591:                                              ; preds = %586, %584
  %592 = phi i32 [ %585, %584 ], [ %590, %586 ]
  %593 = icmp eq i32 %592, 71
  br i1 %593, label %624, label %594

594:                                              ; preds = %591
  %595 = load i64, ptr %15, align 8
  %596 = and i64 %595, 65535
  %597 = icmp eq i64 %596, 14
  br i1 %597, label %598, label %600

598:                                              ; preds = %594
  %599 = tail call i32 @vector_type_mode(ptr noundef nonnull %15) #30
  br label %605

600:                                              ; preds = %594
  %601 = getelementptr inbounds %struct.tree_type, ptr %15, i64 0, i32 6
  %602 = load i32, ptr %601, align 4
  %603 = lshr i32 %602, 16
  %604 = and i32 %603, 255
  br label %605

605:                                              ; preds = %600, %598
  %606 = phi i32 [ %599, %598 ], [ %604, %600 ]
  %607 = icmp eq i32 %606, 81
  br i1 %607, label %624, label %608

608:                                              ; preds = %605
  %609 = load i64, ptr %15, align 8
  %610 = and i64 %609, 65535
  %611 = icmp eq i64 %610, 14
  br i1 %611, label %612, label %614

612:                                              ; preds = %608
  %613 = tail call i32 @vector_type_mode(ptr noundef nonnull %15) #30
  br label %619

614:                                              ; preds = %608
  %615 = getelementptr inbounds %struct.tree_type, ptr %15, i64 0, i32 6
  %616 = load i32, ptr %615, align 4
  %617 = lshr i32 %616, 16
  %618 = and i32 %617, 255
  br label %619

619:                                              ; preds = %614, %612
  %620 = phi i32 [ %613, %612 ], [ %618, %614 ]
  %621 = icmp eq i32 %620, 82
  %622 = icmp ult i32 %63, 128
  %623 = and i1 %622, %621
  br i1 %623, label %627, label %626

624:                                              ; preds = %605, %591, %577, %563, %549, %535, %521, %507, %493, %479, %465, %451, %437, %423, %409
  %625 = icmp ult i32 %63, 128
  br i1 %625, label %627, label %626

626:                                              ; preds = %363, %62, %361, %356, %624, %619, %377, %381, %321, %326
  br label %627

627:                                              ; preds = %624, %619, %393, %381, %377, %367, %361, %356, %328, %326, %321, %79, %54, %57, %60, %626
  %628 = phi i32 [ %63, %626 ], [ %61, %60 ], [ %55, %57 ], [ %55, %54 ], [ 64, %79 ], [ 128, %321 ], [ 128, %326 ], [ 64, %328 ], [ 128, %356 ], [ 128, %361 ], [ 64, %367 ], [ 128, %377 ], [ 128, %381 ], [ 64, %393 ], [ 128, %619 ], [ 128, %624 ]
  ret i32 %628
}

; Function Attrs: nounwind sspstrong uwtable
define dso_local i32 @ix86_minimum_alignment(ptr noundef %0, i32 noundef %1, i32 noundef %2) local_unnamed_addr #9 {
  %4 = icmp ne i32 %2, 64
  %5 = load i32, ptr @ix86_preferred_stack_boundary, align 4
  %6 = icmp ugt i32 %5, 63
  %7 = select i1 %4, i1 true, i1 %6
  br i1 %7, label %53, label %8

8:                                                ; preds = %3
  %9 = icmp eq ptr %0, null
  br i1 %9, label %24, label %10

10:                                               ; preds = %8
  %11 = load i64, ptr %0, align 8
  %12 = and i64 %11, 65535
  %13 = getelementptr inbounds [0 x i32], ptr @tree_code_type, i64 0, i64 %12
  %14 = load i32, ptr %13, align 4, !tbaa !16
  %15 = icmp eq i32 %14, 3
  br i1 %15, label %16, label %19

16:                                               ; preds = %10
  %17 = getelementptr inbounds %struct.tree_common, ptr %0, i64 0, i32 2
  %18 = load ptr, ptr %17, align 8, !tbaa !16
  br label %19

19:                                               ; preds = %10, %16
  %20 = phi ptr [ %18, %16 ], [ %0, %10 ]
  %21 = phi ptr [ %0, %16 ], [ null, %10 ]
  %22 = icmp eq i32 %1, 17
  %23 = icmp eq ptr %20, null
  br i1 %22, label %41, label %26

24:                                               ; preds = %8
  %25 = icmp eq i32 %1, 17
  br i1 %25, label %53, label %52

26:                                               ; preds = %19
  br i1 %23, label %52, label %27

27:                                               ; preds = %26
  %28 = load i64, ptr %20, align 8
  %29 = and i64 %28, 65535
  %30 = icmp eq i64 %29, 14
  br i1 %30, label %31, label %33

31:                                               ; preds = %27
  %32 = tail call i32 @vector_type_mode(ptr noundef nonnull %20) #30
  br label %38

33:                                               ; preds = %27
  %34 = getelementptr inbounds %struct.tree_type, ptr %20, i64 0, i32 6
  %35 = load i32, ptr %34, align 4
  %36 = lshr i32 %35, 16
  %37 = and i32 %36, 255
  br label %38

38:                                               ; preds = %33, %31
  %39 = phi i32 [ %32, %31 ], [ %37, %33 ]
  %40 = icmp eq i32 %39, 17
  br i1 %40, label %42, label %52

41:                                               ; preds = %19
  br i1 %23, label %46, label %42

42:                                               ; preds = %38, %41
  %43 = load i64, ptr %20, align 8
  %44 = and i64 %43, 4398046511104
  %45 = icmp eq i64 %44, 0
  br i1 %45, label %46, label %52

46:                                               ; preds = %42, %41
  %47 = icmp eq ptr %21, null
  br i1 %47, label %53, label %48

48:                                               ; preds = %46
  %49 = load i64, ptr %21, align 8
  %50 = and i64 %49, 4398046511104
  %51 = icmp eq i64 %50, 0
  br i1 %51, label %53, label %52

52:                                               ; preds = %24, %48, %42, %38, %26
  br label %53

53:                                               ; preds = %24, %46, %48, %3, %52
  %54 = phi i32 [ 64, %52 ], [ %2, %3 ], [ 32, %48 ], [ 32, %46 ], [ 32, %24 ]
  ret i32 %54
}

; Function Attrs: nounwind sspstrong uwtable
define dso_local i32 @avx_vpermilp_parallel(ptr nocapture noundef readonly %0, i32 noundef %1) local_unnamed_addr #9 {
  %3 = alloca [8 x i8], align 1
  %4 = zext i32 %1 to i64
  %5 = getelementptr inbounds [87 x i8], ptr @mode_nunits, i64 0, i64 %4
  %6 = load i8, ptr %5, align 1, !tbaa !16
  %7 = zext i8 %6 to i32
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %3) #30
  %8 = getelementptr inbounds %struct.rtx_def, ptr %0, i64 0, i32 1
  %9 = load ptr, ptr %8, align 8, !tbaa !16
  %10 = load i32, ptr %9, align 8, !tbaa !107
  %11 = icmp eq i32 %10, %7
  br i1 %11, label %12, label %176

12:                                               ; preds = %2
  %13 = icmp eq i8 %6, 0
  br i1 %13, label %33, label %14

14:                                               ; preds = %12
  %15 = zext i8 %6 to i64
  %16 = zext i8 %6 to i64
  br label %17

17:                                               ; preds = %14, %28
  %18 = phi i64 [ 0, %14 ], [ %31, %28 ]
  %19 = getelementptr inbounds %struct.rtvec_def, ptr %9, i64 0, i32 1, i64 %18
  %20 = load ptr, ptr %19, align 8, !tbaa !5
  %21 = load i32, ptr %20, align 8
  %22 = and i32 %21, 65535
  %23 = icmp eq i32 %22, 30
  br i1 %23, label %24, label %176

24:                                               ; preds = %17
  %25 = getelementptr inbounds %struct.rtx_def, ptr %20, i64 0, i32 1
  %26 = load i64, ptr %25, align 8, !tbaa !16
  %27 = icmp ult i64 %26, %15
  br i1 %27, label %28, label %176

28:                                               ; preds = %24
  %29 = trunc i64 %26 to i8
  %30 = getelementptr inbounds [8 x i8], ptr %3, i64 0, i64 %18
  store i8 %29, ptr %30, align 1, !tbaa !16
  %31 = add nuw nsw i64 %18, 1
  %32 = icmp eq i64 %31, %16
  br i1 %32, label %33, label %17, !llvm.loop !278

33:                                               ; preds = %28, %12
  switch i32 %1, label %172 [
    i32 82, label %42
    i32 81, label %34
    i32 80, label %97
    i32 79, label %97
  ]

34:                                               ; preds = %33
  %35 = load i8, ptr %3, align 1, !tbaa !16
  %36 = zext i8 %35 to i32
  %37 = add nuw nsw i32 %36, 4
  %38 = getelementptr inbounds [8 x i8], ptr %3, i64 0, i64 4
  %39 = load i8, ptr %38, align 1, !tbaa !16
  %40 = zext i8 %39 to i32
  %41 = icmp eq i32 %37, %40
  br i1 %41, label %70, label %176

42:                                               ; preds = %33
  %43 = load i8, ptr %3, align 1, !tbaa !16
  %44 = icmp ugt i8 %43, 1
  br i1 %44, label %176, label %45

45:                                               ; preds = %42
  %46 = getelementptr inbounds [8 x i8], ptr %3, i64 0, i64 1
  %47 = load i8, ptr %46, align 1, !tbaa !16
  %48 = icmp ugt i8 %47, 1
  br i1 %48, label %176, label %49

49:                                               ; preds = %45
  %50 = getelementptr inbounds [8 x i8], ptr %3, i64 0, i64 2
  %51 = load i8, ptr %50, align 1, !tbaa !16
  %52 = icmp ult i8 %51, 2
  br i1 %52, label %176, label %53

53:                                               ; preds = %49
  %54 = getelementptr inbounds [8 x i8], ptr %3, i64 0, i64 3
  %55 = load i8, ptr %54, align 1, !tbaa !16
  %56 = icmp ult i8 %55, 2
  br i1 %56, label %176, label %57

57:                                               ; preds = %53
  %58 = zext i8 %51 to i32
  %59 = shl nuw nsw i32 %58, 2
  %60 = add nsw i32 %59, -8
  %61 = zext i8 %47 to i32
  %62 = shl nuw nsw i32 %61, 1
  %63 = zext i8 %43 to i32
  %64 = or i32 %62, %63
  %65 = or i32 %60, %64
  %66 = zext i8 %55 to i32
  %67 = shl nuw nsw i32 %66, 3
  %68 = add nsw i32 %67, -16
  %69 = or i32 %68, %65
  br label %173

70:                                               ; preds = %34
  %71 = getelementptr inbounds [8 x i8], ptr %3, i64 0, i64 1
  %72 = load i8, ptr %71, align 1, !tbaa !16
  %73 = zext i8 %72 to i32
  %74 = add nuw nsw i32 %73, 4
  %75 = getelementptr inbounds [8 x i8], ptr %3, i64 0, i64 5
  %76 = load i8, ptr %75, align 1, !tbaa !16
  %77 = zext i8 %76 to i32
  %78 = icmp eq i32 %74, %77
  br i1 %78, label %79, label %176

79:                                               ; preds = %70
  %80 = getelementptr inbounds [8 x i8], ptr %3, i64 0, i64 2
  %81 = load i8, ptr %80, align 1, !tbaa !16
  %82 = zext i8 %81 to i32
  %83 = add nuw nsw i32 %82, 4
  %84 = getelementptr inbounds [8 x i8], ptr %3, i64 0, i64 6
  %85 = load i8, ptr %84, align 1, !tbaa !16
  %86 = zext i8 %85 to i32
  %87 = icmp eq i32 %83, %86
  br i1 %87, label %88, label %176

88:                                               ; preds = %79
  %89 = getelementptr inbounds [8 x i8], ptr %3, i64 0, i64 3
  %90 = load i8, ptr %89, align 1, !tbaa !16
  %91 = zext i8 %90 to i32
  %92 = add nuw nsw i32 %91, 4
  %93 = getelementptr inbounds [8 x i8], ptr %3, i64 0, i64 7
  %94 = load i8, ptr %93, align 1, !tbaa !16
  %95 = zext i8 %94 to i32
  %96 = icmp eq i32 %92, %95
  br i1 %96, label %99, label %176

97:                                               ; preds = %33, %33
  %98 = icmp eq i8 %6, 0
  br i1 %98, label %173, label %99

99:                                               ; preds = %88, %97
  %100 = phi i32 [ %7, %97 ], [ 4, %88 ]
  %101 = lshr i32 %100, 1
  %102 = zext i32 %100 to i64
  %103 = icmp ult i32 %100, 16
  br i1 %103, label %157, label %104

104:                                              ; preds = %99
  %105 = and i64 %102, 240
  %106 = insertelement <4 x i32> poison, i32 %101, i64 0
  %107 = shufflevector <4 x i32> %106, <4 x i32> poison, <4 x i32> zeroinitializer
  %108 = insertelement <4 x i32> poison, i32 %101, i64 0
  %109 = shufflevector <4 x i32> %108, <4 x i32> poison, <4 x i32> zeroinitializer
  %110 = insertelement <4 x i32> poison, i32 %101, i64 0
  %111 = shufflevector <4 x i32> %110, <4 x i32> poison, <4 x i32> zeroinitializer
  %112 = insertelement <4 x i32> poison, i32 %101, i64 0
  %113 = shufflevector <4 x i32> %112, <4 x i32> poison, <4 x i32> zeroinitializer
  br label %114

114:                                              ; preds = %114, %104
  %115 = phi i64 [ 0, %104 ], [ %148, %114 ]
  %116 = phi <4 x i32> [ zeroinitializer, %104 ], [ %144, %114 ]
  %117 = phi <4 x i32> [ zeroinitializer, %104 ], [ %145, %114 ]
  %118 = phi <4 x i32> [ zeroinitializer, %104 ], [ %146, %114 ]
  %119 = phi <4 x i32> [ zeroinitializer, %104 ], [ %147, %114 ]
  %120 = phi <4 x i32> [ <i32 0, i32 1, i32 2, i32 3>, %104 ], [ %149, %114 ]
  %121 = add <4 x i32> %120, <i32 4, i32 4, i32 4, i32 4>
  %122 = add <4 x i32> %120, <i32 8, i32 8, i32 8, i32 8>
  %123 = add <4 x i32> %120, <i32 12, i32 12, i32 12, i32 12>
  %124 = getelementptr inbounds [8 x i8], ptr %3, i64 0, i64 %115
  %125 = load <4 x i8>, ptr %124, align 1, !tbaa !16
  %126 = getelementptr inbounds i8, ptr %124, i64 4
  %127 = load <4 x i8>, ptr %126, align 1, !tbaa !16
  %128 = getelementptr inbounds i8, ptr %124, i64 8
  %129 = load <4 x i8>, ptr %128, align 1, !tbaa !16
  %130 = getelementptr inbounds i8, ptr %124, i64 12
  %131 = load <4 x i8>, ptr %130, align 1, !tbaa !16
  %132 = zext <4 x i8> %125 to <4 x i32>
  %133 = zext <4 x i8> %127 to <4 x i32>
  %134 = zext <4 x i8> %129 to <4 x i32>
  %135 = zext <4 x i8> %131 to <4 x i32>
  %136 = mul <4 x i32> %107, %120
  %137 = mul <4 x i32> %109, %121
  %138 = mul <4 x i32> %111, %122
  %139 = mul <4 x i32> %113, %123
  %140 = shl <4 x i32> %132, %136
  %141 = shl <4 x i32> %133, %137
  %142 = shl <4 x i32> %134, %138
  %143 = shl <4 x i32> %135, %139
  %144 = or <4 x i32> %140, %116
  %145 = or <4 x i32> %141, %117
  %146 = or <4 x i32> %142, %118
  %147 = or <4 x i32> %143, %119
  %148 = add nuw i64 %115, 16
  %149 = add <4 x i32> %120, <i32 16, i32 16, i32 16, i32 16>
  %150 = icmp eq i64 %148, %105
  br i1 %150, label %151, label %114, !llvm.loop !279

151:                                              ; preds = %114
  %152 = or <4 x i32> %145, %144
  %153 = or <4 x i32> %146, %152
  %154 = or <4 x i32> %147, %153
  %155 = tail call i32 @llvm.vector.reduce.or.v4i32(<4 x i32> %154)
  %156 = icmp eq i64 %105, %102
  br i1 %156, label %173, label %157

157:                                              ; preds = %99, %151
  %158 = phi i64 [ 0, %99 ], [ %105, %151 ]
  %159 = phi i32 [ 0, %99 ], [ %155, %151 ]
  br label %160

160:                                              ; preds = %157, %160
  %161 = phi i64 [ %170, %160 ], [ %158, %157 ]
  %162 = phi i32 [ %169, %160 ], [ %159, %157 ]
  %163 = getelementptr inbounds [8 x i8], ptr %3, i64 0, i64 %161
  %164 = load i8, ptr %163, align 1, !tbaa !16
  %165 = zext i8 %164 to i32
  %166 = trunc i64 %161 to i32
  %167 = mul i32 %101, %166
  %168 = shl i32 %165, %167
  %169 = or i32 %168, %162
  %170 = add nuw nsw i64 %161, 1
  %171 = icmp eq i64 %170, %102
  br i1 %171, label %173, label %160, !llvm.loop !280

172:                                              ; preds = %33
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 24798, ptr noundef nonnull @.str.131) #30
  br label %173

173:                                              ; preds = %160, %151, %57, %97, %172
  %174 = phi i32 [ 0, %172 ], [ 0, %97 ], [ %69, %57 ], [ %155, %151 ], [ %169, %160 ]
  %175 = add i32 %174, 1
  br label %176

176:                                              ; preds = %17, %24, %34, %70, %79, %88, %42, %45, %49, %53, %2, %173
  %177 = phi i32 [ %175, %173 ], [ 0, %2 ], [ 0, %53 ], [ 0, %49 ], [ 0, %45 ], [ 0, %42 ], [ 0, %88 ], [ 0, %79 ], [ 0, %70 ], [ 0, %34 ], [ 0, %24 ], [ 0, %17 ]
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %3) #30
  ret i32 %177
}

; Function Attrs: nofree nosync nounwind sspstrong memory(read, inaccessiblemem: none) uwtable
define dso_local i32 @avx_vperm2f128_parallel(ptr nocapture noundef readonly %0, i32 noundef %1) local_unnamed_addr #19 {
  %3 = alloca [8 x i8], align 1
  %4 = zext i32 %1 to i64
  %5 = getelementptr inbounds [87 x i8], ptr @mode_nunits, i64 0, i64 %4
  %6 = load i8, ptr %5, align 1, !tbaa !16
  %7 = zext i8 %6 to i32
  %8 = lshr i32 %7, 1
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %3) #30
  %9 = getelementptr inbounds %struct.rtx_def, ptr %0, i64 0, i32 1
  %10 = load ptr, ptr %9, align 8, !tbaa !16
  %11 = load i32, ptr %10, align 8, !tbaa !107
  %12 = icmp eq i32 %11, %7
  br i1 %12, label %13, label %91

13:                                               ; preds = %2
  %14 = icmp eq i8 %6, 0
  br i1 %14, label %19, label %15

15:                                               ; preds = %13
  %16 = shl nuw nsw i32 %7, 1
  %17 = zext i32 %16 to i64
  %18 = zext i8 %6 to i64
  br label %22

19:                                               ; preds = %33, %13
  %20 = add nsw i32 %8, -1
  %21 = zext i32 %20 to i64
  br label %38

22:                                               ; preds = %15, %33
  %23 = phi i64 [ 0, %15 ], [ %36, %33 ]
  %24 = getelementptr inbounds %struct.rtvec_def, ptr %10, i64 0, i32 1, i64 %23
  %25 = load ptr, ptr %24, align 8, !tbaa !5
  %26 = load i32, ptr %25, align 8
  %27 = and i32 %26, 65535
  %28 = icmp eq i32 %27, 30
  br i1 %28, label %29, label %91

29:                                               ; preds = %22
  %30 = getelementptr inbounds %struct.rtx_def, ptr %25, i64 0, i32 1
  %31 = load i64, ptr %30, align 8, !tbaa !16
  %32 = icmp ult i64 %31, %17
  br i1 %32, label %33, label %91

33:                                               ; preds = %29
  %34 = trunc i64 %31 to i8
  %35 = getelementptr inbounds [8 x i8], ptr %3, i64 0, i64 %23
  store i8 %34, ptr %35, align 1, !tbaa !16
  %36 = add nuw nsw i64 %23, 1
  %37 = icmp eq i64 %36, %18
  br i1 %37, label %19, label %22, !llvm.loop !281

38:                                               ; preds = %19, %49
  %39 = phi i64 [ 0, %19 ], [ %54, %49 ]
  %40 = icmp eq i64 %39, %21
  br i1 %40, label %41, label %49

41:                                               ; preds = %38
  %42 = add nsw i32 %7, -1
  %43 = lshr i8 %6, 1
  %44 = zext i8 %43 to i64
  %45 = tail call i32 @llvm.umax.i32(i32 %8, i32 %42)
  %46 = zext i8 %43 to i32
  %47 = add nsw i32 %45, %46
  %48 = sub nsw i32 %47, %8
  br label %59

49:                                               ; preds = %38
  %50 = getelementptr inbounds [8 x i8], ptr %3, i64 0, i64 %39
  %51 = load i8, ptr %50, align 1, !tbaa !16
  %52 = zext i8 %51 to i32
  %53 = add nuw nsw i32 %52, 1
  %54 = add nuw nsw i64 %39, 1
  %55 = getelementptr inbounds [8 x i8], ptr %3, i64 0, i64 %54
  %56 = load i8, ptr %55, align 1, !tbaa !16
  %57 = zext i8 %56 to i32
  %58 = icmp eq i32 %53, %57
  br i1 %58, label %38, label %91, !llvm.loop !282

59:                                               ; preds = %41, %69
  %60 = phi i64 [ %44, %41 ], [ %74, %69 ]
  %61 = trunc i64 %60 to i32
  %62 = icmp eq i32 %48, %61
  br i1 %62, label %63, label %69

63:                                               ; preds = %59
  %64 = load i8, ptr %3, align 1, !tbaa !16
  %65 = zext i8 %64 to i32
  %66 = urem i32 %65, %8
  %67 = udiv i32 %65, %8
  %68 = icmp eq i32 %66, 0
  br i1 %68, label %79, label %91

69:                                               ; preds = %59
  %70 = getelementptr inbounds [8 x i8], ptr %3, i64 0, i64 %60
  %71 = load i8, ptr %70, align 1, !tbaa !16
  %72 = zext i8 %71 to i32
  %73 = add nuw nsw i32 %72, 1
  %74 = add nuw nsw i64 %60, 1
  %75 = getelementptr inbounds [8 x i8], ptr %3, i64 0, i64 %74
  %76 = load i8, ptr %75, align 1, !tbaa !16
  %77 = zext i8 %76 to i32
  %78 = icmp eq i32 %73, %77
  br i1 %78, label %59, label %91, !llvm.loop !283

79:                                               ; preds = %63
  %80 = zext i32 %8 to i64
  %81 = getelementptr inbounds [8 x i8], ptr %3, i64 0, i64 %80
  %82 = load i8, ptr %81, align 1, !tbaa !16
  %83 = zext i8 %82 to i32
  %84 = urem i32 %83, %8
  %85 = udiv i32 %83, %8
  %86 = icmp eq i32 %84, 0
  br i1 %86, label %87, label %91

87:                                               ; preds = %79
  %88 = shl nuw nsw i32 %85, 4
  %89 = or i32 %88, %67
  %90 = add nuw nsw i32 %89, 1
  br label %91

91:                                               ; preds = %22, %29, %49, %69, %63, %79, %2, %87
  %92 = phi i32 [ %90, %87 ], [ 0, %2 ], [ 0, %79 ], [ 0, %63 ], [ 0, %69 ], [ 0, %49 ], [ 0, %29 ], [ 0, %22 ]
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %3) #30
  ret i32 %92
}

; Function Attrs: nounwind sspstrong uwtable
define dso_local ptr @ix86_force_to_memory(i32 noundef %0, ptr noundef %1) local_unnamed_addr #9 {
  %3 = alloca ptr, align 8
  %4 = alloca [2 x ptr], align 16
  store ptr %1, ptr %3, align 8, !tbaa !5
  %5 = load i32, ptr @reload_completed, align 4, !tbaa !20
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %7, label %8

7:                                                ; preds = %2
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 24865, ptr noundef nonnull @.str.131) #30
  br label %8

8:                                                ; preds = %2, %7
  %9 = load i32, ptr @target_flags, align 4, !tbaa !20
  %10 = and i32 %9, 16384
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %12, label %18

12:                                               ; preds = %8
  %13 = load ptr, ptr getelementptr inbounds ([11 x ptr], ptr @global_rtl, i64 0, i64 2), align 16, !tbaa !5
  %14 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef -128) #30
  %15 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 49, i32 noundef 16, ptr noundef %13, ptr noundef %14) #30
  %16 = tail call ptr @gen_rtx_MEM(i32 noundef %0, ptr noundef %15) #30
  %17 = tail call ptr @emit_move_insn(ptr noundef %16, ptr noundef %1) #30
  br label %50

18:                                               ; preds = %8
  switch i32 %0, label %46 [
    i32 17, label %19
    i32 15, label %33
    i32 16, label %36
  ]

19:                                               ; preds = %18
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %4) #30
  %20 = getelementptr inbounds ptr, ptr %4, i64 1
  call void @split_di(ptr noundef nonnull %3, i32 noundef 1, ptr noundef nonnull %4, ptr noundef nonnull %20)
  %21 = load ptr, ptr getelementptr inbounds ([11 x ptr], ptr @global_rtl, i64 0, i64 2), align 16, !tbaa !5
  %22 = tail call ptr @gen_rtx_fmt_e_stat(i32 noundef 74, i32 noundef 16, ptr noundef %21) #30
  %23 = tail call ptr @gen_rtx_MEM(i32 noundef 16, ptr noundef %22) #30
  %24 = load ptr, ptr %20, align 8, !tbaa !5
  %25 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 23, i32 noundef 0, ptr noundef %23, ptr noundef %24) #30
  %26 = tail call ptr @emit_insn(ptr noundef %25) #30
  %27 = load ptr, ptr getelementptr inbounds ([11 x ptr], ptr @global_rtl, i64 0, i64 2), align 16, !tbaa !5
  %28 = tail call ptr @gen_rtx_fmt_e_stat(i32 noundef 74, i32 noundef 16, ptr noundef %27) #30
  %29 = tail call ptr @gen_rtx_MEM(i32 noundef 16, ptr noundef %28) #30
  %30 = load ptr, ptr %4, align 16, !tbaa !5
  %31 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 23, i32 noundef 0, ptr noundef %29, ptr noundef %30) #30
  %32 = tail call ptr @emit_insn(ptr noundef %31) #30
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %4) #30
  br label %47

33:                                               ; preds = %18
  %34 = load ptr, ptr @rtl_hooks, align 8, !tbaa !187
  %35 = tail call ptr %34(i32 noundef 16, ptr noundef %1) #30
  br label %36

36:                                               ; preds = %18, %33
  %37 = phi ptr [ %1, %18 ], [ %35, %33 ]
  %38 = load i32, ptr %37, align 8
  %39 = lshr i32 %38, 16
  %40 = and i32 %39, 255
  %41 = load ptr, ptr getelementptr inbounds ([11 x ptr], ptr @global_rtl, i64 0, i64 2), align 16, !tbaa !5
  %42 = tail call ptr @gen_rtx_fmt_e_stat(i32 noundef 74, i32 noundef 16, ptr noundef %41) #30
  %43 = tail call ptr @gen_rtx_MEM(i32 noundef %40, ptr noundef %42) #30
  %44 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 23, i32 noundef 0, ptr noundef %43, ptr noundef nonnull %37) #30
  %45 = tail call ptr @emit_insn(ptr noundef %44) #30
  br label %47

46:                                               ; preds = %18
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 24930, ptr noundef nonnull @.str.131) #30
  br label %47

47:                                               ; preds = %46, %36, %19
  %48 = load ptr, ptr getelementptr inbounds ([11 x ptr], ptr @global_rtl, i64 0, i64 2), align 16, !tbaa !5
  %49 = tail call ptr @gen_rtx_MEM(i32 noundef %0, ptr noundef %48) #30
  br label %50

50:                                               ; preds = %47, %12
  %51 = phi ptr [ %16, %12 ], [ %49, %47 ]
  ret ptr %51
}

; Function Attrs: nounwind sspstrong uwtable
define dso_local i32 @ix86_preferred_reload_class(ptr noundef %0, i32 noundef %1) local_unnamed_addr #9 {
  %3 = load i32, ptr %0, align 8
  %4 = lshr i32 %3, 16
  %5 = and i32 %4, 255
  %6 = icmp eq i32 %1, 0
  br i1 %6, label %90, label %7

7:                                                ; preds = %2
  %8 = zext i32 %5 to i64
  %9 = getelementptr inbounds [87 x ptr], ptr @const_tiny_rtx, i64 0, i64 %8
  %10 = load ptr, ptr %9, align 8, !tbaa !5
  %11 = icmp eq ptr %10, %0
  br i1 %11, label %90, label %12

12:                                               ; preds = %7
  %13 = and i32 %3, 65535
  %14 = zext i32 %13 to i64
  %15 = getelementptr inbounds [139 x i32], ptr @rtx_class, i64 0, i64 %14
  %16 = load i32, ptr %15, align 4, !tbaa !16
  %17 = icmp eq i32 %16, 9
  br i1 %17, label %18, label %24

18:                                               ; preds = %12
  %19 = tail call i32 @reg_classes_intersect_p(i32 noundef 19, i32 noundef %1) #30
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %21, label %90

21:                                               ; preds = %18
  %22 = tail call i32 @reg_classes_intersect_p(i32 noundef 18, i32 noundef %1) #30
  %23 = icmp eq i32 %22, 0
  br i1 %23, label %24, label %90

24:                                               ; preds = %21, %12
  %25 = load i32, ptr @ix86_fpmath, align 4, !tbaa !16
  %26 = and i32 %25, 2
  %27 = icmp eq i32 %26, 0
  %28 = and i32 %25, 3
  %29 = icmp eq i32 %28, 3
  %30 = or i1 %27, %29
  br i1 %30, label %46, label %31

31:                                               ; preds = %24
  %32 = load i32, ptr @ix86_isa_flags, align 4, !tbaa !20
  %33 = and i32 %32, 65536
  %34 = icmp ne i32 %33, 0
  %35 = icmp eq i32 %5, 38
  %36 = select i1 %34, i1 %35, i1 false
  br i1 %36, label %42, label %37

37:                                               ; preds = %31
  %38 = and i32 %32, 131072
  %39 = icmp ne i32 %38, 0
  %40 = icmp eq i32 %5, 39
  %41 = select i1 %39, i1 %40, i1 false
  br i1 %41, label %42, label %46

42:                                               ; preds = %37, %31
  %43 = tail call i32 @reg_class_subset_p(i32 noundef %1, i32 noundef 18) #30
  %44 = icmp eq i32 %43, 0
  %45 = select i1 %44, i32 0, i32 %1
  br label %90

46:                                               ; preds = %37, %24
  %47 = load i32, ptr %0, align 8
  %48 = and i32 %47, 65535
  %49 = icmp ne i32 %48, 32
  %50 = and i32 %47, 16711680
  %51 = icmp eq i32 %50, 0
  %52 = or i1 %49, %51
  br i1 %52, label %66, label %53

53:                                               ; preds = %46
  %54 = tail call i32 @reg_class_subset_p(i32 noundef %1, i32 noundef 13) #30
  %55 = icmp eq i32 %54, 0
  br i1 %55, label %56, label %90

56:                                               ; preds = %53
  %57 = load i32, ptr @target_flags, align 4, !tbaa !20
  %58 = and i32 %57, 2
  %59 = icmp eq i32 %58, 0
  br i1 %59, label %90, label %60

60:                                               ; preds = %56
  %61 = tail call i32 @standard_80387_constant_p(ptr noundef nonnull %0)
  %62 = icmp eq i32 %61, 0
  br i1 %62, label %90, label %63

63:                                               ; preds = %60
  %64 = add i32 %1, -16
  %65 = icmp ult i32 %64, 8
  br i1 %65, label %86, label %90

66:                                               ; preds = %46
  %67 = icmp eq i32 %48, 49
  br i1 %67, label %68, label %72

68:                                               ; preds = %66
  %69 = tail call i32 @reg_class_subset_p(i32 noundef %1, i32 noundef 13) #30
  %70 = icmp eq i32 %69, 0
  %71 = select i1 %70, i32 0, i32 %1
  br label %90

72:                                               ; preds = %66
  %73 = icmp eq i32 %50, 917504
  br i1 %73, label %74, label %90

74:                                               ; preds = %72
  %75 = zext i32 %48 to i64
  %76 = getelementptr inbounds [139 x i32], ptr @rtx_class, i64 0, i64 %75
  %77 = load i32, ptr %76, align 4, !tbaa !16
  %78 = icmp eq i32 %77, 9
  br i1 %78, label %90, label %79

79:                                               ; preds = %74
  %80 = tail call i32 @reg_class_subset_p(i32 noundef %1, i32 noundef 9) #30
  %81 = icmp eq i32 %80, 0
  br i1 %81, label %82, label %90

82:                                               ; preds = %79
  %83 = tail call i32 @reg_class_subset_p(i32 noundef 9, i32 noundef %1) #30
  %84 = icmp eq i32 %83, 0
  %85 = select i1 %84, i32 0, i32 9
  br label %90

86:                                               ; preds = %63
  %87 = sext i32 %64 to i64
  %88 = getelementptr inbounds [8 x i32], ptr @switch.table.ix86_preferred_reload_class, i64 0, i64 %87
  %89 = load i32, ptr %88, align 4
  br label %90

90:                                               ; preds = %56, %60, %63, %86, %72, %74, %82, %79, %53, %18, %21, %7, %2, %68, %42
  %91 = phi i32 [ %71, %68 ], [ %45, %42 ], [ 0, %2 ], [ %1, %7 ], [ 0, %21 ], [ 0, %18 ], [ %1, %53 ], [ %1, %79 ], [ %85, %82 ], [ %1, %74 ], [ %1, %72 ], [ %89, %86 ], [ 0, %63 ], [ 0, %60 ], [ 0, %56 ]
  ret i32 %91
}

declare i32 @reg_classes_intersect_p(i32 noundef, i32 noundef) local_unnamed_addr #3

declare i32 @reg_class_subset_p(i32 noundef, i32 noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define dso_local i32 @ix86_preferred_output_reload_class(ptr nocapture noundef readonly %0, i32 noundef %1) local_unnamed_addr #9 {
  %3 = load i32, ptr %0, align 8
  %4 = lshr i32 %3, 16
  %5 = and i32 %4, 255
  %6 = load i32, ptr @ix86_fpmath, align 4, !tbaa !16
  %7 = and i32 %6, 2
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %24, label %9

9:                                                ; preds = %2
  %10 = load i32, ptr @ix86_isa_flags, align 4, !tbaa !20
  %11 = and i32 %10, 65536
  %12 = icmp ne i32 %11, 0
  %13 = icmp eq i32 %5, 38
  %14 = select i1 %12, i1 %13, i1 false
  br i1 %14, label %20, label %15

15:                                               ; preds = %9
  %16 = and i32 %10, 131072
  %17 = icmp ne i32 %16, 0
  %18 = icmp eq i32 %5, 39
  %19 = select i1 %17, i1 %18, i1 false
  br i1 %19, label %20, label %24

20:                                               ; preds = %15, %9
  %21 = tail call i32 @reg_classes_intersect_p(i32 noundef 18, i32 noundef %1) #30
  %22 = icmp eq i32 %21, 0
  %23 = select i1 %22, i32 0, i32 18
  br label %39

24:                                               ; preds = %15, %2
  %25 = load i32, ptr @target_flags, align 4, !tbaa !20
  %26 = and i32 %25, 2
  %27 = icmp eq i32 %26, 0
  br i1 %27, label %39, label %28

28:                                               ; preds = %24
  %29 = and i32 %3, 16646144
  %30 = icmp eq i32 %29, 2490368
  %31 = icmp eq i32 %5, 40
  %32 = select i1 %30, i1 true, i1 %31
  br i1 %32, label %33, label %39

33:                                               ; preds = %28
  switch i32 %1, label %35 [
    i32 20, label %39
    i32 21, label %34
  ]

34:                                               ; preds = %33
  br label %39

35:                                               ; preds = %33
  %36 = tail call i32 @reg_class_subset_p(i32 noundef %1, i32 noundef 16) #30
  %37 = icmp eq i32 %36, 0
  %38 = select i1 %37, i32 0, i32 %1
  br label %39

39:                                               ; preds = %24, %28, %33, %35, %34, %20
  %40 = phi i32 [ %23, %20 ], [ 15, %34 ], [ %38, %35 ], [ 14, %33 ], [ %1, %28 ], [ %1, %24 ]
  ret i32 %40
}

; Function Attrs: nounwind sspstrong uwtable
define dso_local i32 @ix86_secondary_memory_needed(i32 noundef %0, i32 noundef %1, i32 noundef %2, i32 noundef %3) local_unnamed_addr #9 {
  %5 = tail call fastcc i32 @inline_secondary_memory_needed(i32 noundef %0, i32 noundef %1, i32 noundef %2, i32 noundef %3), !range !222
  ret i32 %5
}

; Function Attrs: inlinehint nounwind sspstrong uwtable
define internal fastcc i32 @inline_secondary_memory_needed(i32 noundef %0, i32 noundef %1, i32 noundef %2, i32 noundef %3) unnamed_addr #2 {
  %5 = tail call i32 @reg_classes_intersect_p(i32 noundef %0, i32 noundef 16) #30
  %6 = tail call i32 @reg_class_subset_p(i32 noundef %0, i32 noundef 16) #30
  %7 = icmp eq i32 %5, %6
  br i1 %7, label %8, label %30

8:                                                ; preds = %4
  %9 = tail call i32 @reg_classes_intersect_p(i32 noundef %1, i32 noundef 16) #30
  %10 = tail call i32 @reg_class_subset_p(i32 noundef %1, i32 noundef 16) #30
  %11 = icmp eq i32 %9, %10
  br i1 %11, label %12, label %30

12:                                               ; preds = %8
  %13 = tail call i32 @reg_classes_intersect_p(i32 noundef 18, i32 noundef %0) #30
  %14 = tail call i32 @reg_class_subset_p(i32 noundef %0, i32 noundef 18) #30
  %15 = icmp eq i32 %13, %14
  br i1 %15, label %16, label %30

16:                                               ; preds = %12
  %17 = tail call i32 @reg_classes_intersect_p(i32 noundef 18, i32 noundef %1) #30
  %18 = tail call i32 @reg_class_subset_p(i32 noundef %1, i32 noundef 18) #30
  %19 = icmp eq i32 %17, %18
  br i1 %19, label %20, label %30

20:                                               ; preds = %16
  %21 = tail call i32 @reg_classes_intersect_p(i32 noundef 19, i32 noundef %0) #30
  %22 = icmp eq i32 %0, 19
  %23 = zext i1 %22 to i32
  %24 = icmp eq i32 %21, %23
  br i1 %24, label %25, label %30

25:                                               ; preds = %20
  %26 = tail call i32 @reg_classes_intersect_p(i32 noundef 19, i32 noundef %1) #30
  %27 = icmp eq i32 %1, 19
  %28 = zext i1 %27 to i32
  %29 = icmp eq i32 %26, %28
  br i1 %29, label %33, label %30

30:                                               ; preds = %25, %20, %16, %12, %8, %4
  %31 = icmp eq i32 %3, 0
  br i1 %31, label %56, label %32

32:                                               ; preds = %30
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 25130, ptr noundef nonnull @.str.131) #30
  br label %56

33:                                               ; preds = %25
  %34 = tail call i32 @reg_class_subset_p(i32 noundef %0, i32 noundef 16) #30
  %35 = tail call i32 @reg_class_subset_p(i32 noundef %1, i32 noundef 16) #30
  %36 = icmp ne i32 %34, %35
  %37 = xor i1 %22, %27
  %38 = or i1 %37, %36
  br i1 %38, label %56, label %39

39:                                               ; preds = %33
  %40 = tail call i32 @reg_class_subset_p(i32 noundef %0, i32 noundef 18) #30
  %41 = tail call i32 @reg_class_subset_p(i32 noundef %1, i32 noundef 18) #30
  %42 = icmp eq i32 %40, %41
  br i1 %42, label %55, label %43

43:                                               ; preds = %39
  %44 = load i32, ptr @ix86_isa_flags, align 4, !tbaa !20
  %45 = and i32 %44, 131072
  %46 = icmp eq i32 %45, 0
  %47 = load i8, ptr getelementptr inbounds ([62 x i8], ptr @ix86_tune_features, i64 0, i64 42), align 2
  %48 = icmp eq i8 %47, 0
  %49 = select i1 %46, i1 true, i1 %48
  br i1 %49, label %56, label %50

50:                                               ; preds = %43
  %51 = zext i32 %2 to i64
  %52 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %51
  %53 = load i8, ptr %52, align 1, !tbaa !16
  %54 = icmp ugt i8 %53, 4
  br i1 %54, label %56, label %55

55:                                               ; preds = %50, %39
  br label %56

56:                                               ; preds = %50, %43, %33, %32, %30, %55
  %57 = phi i32 [ 0, %55 ], [ 1, %30 ], [ 1, %32 ], [ 1, %33 ], [ 1, %43 ], [ 1, %50 ]
  ret i32 %57
}

; Function Attrs: nounwind sspstrong uwtable
define dso_local zeroext i8 @ix86_cannot_change_mode_class(i32 noundef %0, i32 noundef %1, i32 noundef %2) local_unnamed_addr #9 {
  %4 = icmp eq i32 %0, %1
  br i1 %4, label %25, label %5

5:                                                ; preds = %3
  %6 = tail call i32 @reg_classes_intersect_p(i32 noundef %2, i32 noundef 16) #30
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %8, label %25

8:                                                ; preds = %5
  %9 = tail call i32 @reg_classes_intersect_p(i32 noundef 18, i32 noundef %2) #30
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %11, label %14

11:                                               ; preds = %8
  %12 = tail call i32 @reg_classes_intersect_p(i32 noundef 19, i32 noundef %2) #30
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %24, label %14

14:                                               ; preds = %11, %8
  %15 = zext i32 %0 to i64
  %16 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %15
  %17 = load i8, ptr %16, align 1, !tbaa !16
  %18 = icmp ult i8 %17, 4
  br i1 %18, label %25, label %19

19:                                               ; preds = %14
  %20 = zext i32 %1 to i64
  %21 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %20
  %22 = load i8, ptr %21, align 1, !tbaa !16
  %23 = icmp ult i8 %22, %17
  br i1 %23, label %25, label %24

24:                                               ; preds = %19, %11
  br label %25

25:                                               ; preds = %19, %14, %5, %3, %24
  %26 = phi i8 [ 0, %24 ], [ 0, %3 ], [ 1, %5 ], [ 1, %14 ], [ 1, %19 ]
  ret i8 %26
}

; Function Attrs: nounwind sspstrong uwtable
define dso_local i32 @ix86_memory_move_cost(i32 noundef %0, i32 noundef %1, i32 noundef %2) local_unnamed_addr #9 {
  %4 = tail call fastcc i32 @inline_memory_move_cost(i32 noundef %0, i32 noundef %1, i32 noundef %2)
  ret i32 %4
}

; Function Attrs: inlinehint nounwind sspstrong uwtable
define internal fastcc i32 @inline_memory_move_cost(i32 noundef %0, i32 noundef %1, i32 noundef %2) unnamed_addr #2 {
  %4 = tail call i32 @reg_class_subset_p(i32 noundef %1, i32 noundef 16) #30
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %27, label %6

6:                                                ; preds = %3
  %7 = add i32 %0, -38
  %8 = icmp ult i32 %7, 3
  br i1 %8, label %9, label %168

9:                                                ; preds = %6
  %10 = zext i32 %7 to i64
  switch i32 %2, label %18 [
    i32 2, label %11
    i32 0, label %21
  ]

11:                                               ; preds = %9
  %12 = load ptr, ptr @ix86_cost, align 8, !tbaa !5
  %13 = getelementptr inbounds %struct.processor_costs, ptr %12, i64 0, i32 15, i64 %10
  %14 = load i32, ptr %13, align 4, !tbaa !20
  %15 = getelementptr inbounds %struct.processor_costs, ptr %12, i64 0, i32 16, i64 %10
  %16 = load i32, ptr %15, align 4, !tbaa !20
  %17 = tail call i32 @llvm.smax.i32(i32 %14, i32 %16)
  br label %168

18:                                               ; preds = %9
  %19 = load ptr, ptr @ix86_cost, align 8, !tbaa !5
  %20 = getelementptr inbounds %struct.processor_costs, ptr %19, i64 0, i32 15, i64 %10
  br label %24

21:                                               ; preds = %9
  %22 = load ptr, ptr @ix86_cost, align 8, !tbaa !5
  %23 = getelementptr inbounds %struct.processor_costs, ptr %22, i64 0, i32 16, i64 %10
  br label %24

24:                                               ; preds = %21, %18
  %25 = phi ptr [ %20, %18 ], [ %23, %21 ]
  %26 = load i32, ptr %25, align 4, !tbaa !20
  br label %168

27:                                               ; preds = %3
  %28 = tail call i32 @reg_class_subset_p(i32 noundef %1, i32 noundef 18) #30
  %29 = icmp eq i32 %28, 0
  br i1 %29, label %54, label %30

30:                                               ; preds = %27
  %31 = zext i32 %0 to i64
  %32 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %31
  %33 = load i8, ptr %32, align 1, !tbaa !16
  switch i8 %33, label %168 [
    i8 4, label %36
    i8 8, label %34
    i8 16, label %35
  ]

34:                                               ; preds = %30
  br label %36

35:                                               ; preds = %30
  br label %36

36:                                               ; preds = %30, %35, %34
  %37 = phi i64 [ 2, %35 ], [ 1, %34 ], [ 0, %30 ]
  switch i32 %2, label %45 [
    i32 2, label %38
    i32 0, label %48
  ]

38:                                               ; preds = %36
  %39 = load ptr, ptr @ix86_cost, align 8, !tbaa !5
  %40 = getelementptr inbounds %struct.processor_costs, ptr %39, i64 0, i32 21, i64 %37
  %41 = load i32, ptr %40, align 4, !tbaa !20
  %42 = getelementptr inbounds %struct.processor_costs, ptr %39, i64 0, i32 22, i64 %37
  %43 = load i32, ptr %42, align 4, !tbaa !20
  %44 = tail call i32 @llvm.smax.i32(i32 %41, i32 %43)
  br label %168

45:                                               ; preds = %36
  %46 = load ptr, ptr @ix86_cost, align 8, !tbaa !5
  %47 = getelementptr inbounds %struct.processor_costs, ptr %46, i64 0, i32 21, i64 %37
  br label %51

48:                                               ; preds = %36
  %49 = load ptr, ptr @ix86_cost, align 8, !tbaa !5
  %50 = getelementptr inbounds %struct.processor_costs, ptr %49, i64 0, i32 22, i64 %37
  br label %51

51:                                               ; preds = %48, %45
  %52 = phi ptr [ %47, %45 ], [ %50, %48 ]
  %53 = load i32, ptr %52, align 4, !tbaa !20
  br label %168

54:                                               ; preds = %27
  %55 = icmp eq i32 %1, 19
  %56 = zext i32 %0 to i64
  %57 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %56
  %58 = load i8, ptr %57, align 1, !tbaa !16
  br i1 %55, label %59, label %74

59:                                               ; preds = %54
  switch i8 %58, label %168 [
    i8 4, label %61
    i8 8, label %60
  ]

60:                                               ; preds = %59
  br label %61

61:                                               ; preds = %59, %60
  %62 = phi i64 [ 1, %60 ], [ 0, %59 ]
  %63 = icmp eq i32 %2, 0
  %64 = load ptr, ptr @ix86_cost, align 8, !tbaa !5
  br i1 %63, label %71, label %65

65:                                               ; preds = %61
  %66 = getelementptr inbounds %struct.processor_costs, ptr %64, i64 0, i32 18, i64 %62
  %67 = load i32, ptr %66, align 4, !tbaa !20
  %68 = getelementptr inbounds %struct.processor_costs, ptr %64, i64 0, i32 19, i64 %62
  %69 = load i32, ptr %68, align 4, !tbaa !20
  %70 = tail call i32 @llvm.smax.i32(i32 %67, i32 %69)
  br label %168

71:                                               ; preds = %61
  %72 = getelementptr inbounds %struct.processor_costs, ptr %64, i64 0, i32 19, i64 %62
  %73 = load i32, ptr %72, align 4, !tbaa !20
  br label %168

74:                                               ; preds = %54
  switch i8 %58, label %141 [
    i8 1, label %75
    i8 2, label %124
  ]

75:                                               ; preds = %74
  %76 = tail call i32 @reg_class_subset_p(i32 noundef %1, i32 noundef 9) #30
  %77 = icmp eq i32 %76, 0
  br i1 %77, label %106, label %78

78:                                               ; preds = %75
  %79 = icmp eq i32 %2, 0
  br i1 %79, label %80, label %84

80:                                               ; preds = %78
  %81 = load ptr, ptr @ix86_cost, align 8, !tbaa !5
  %82 = getelementptr inbounds %struct.processor_costs, ptr %81, i64 0, i32 13
  %83 = load i32, ptr %82, align 4, !tbaa !20
  br label %168

84:                                               ; preds = %78
  %85 = load i8, ptr getelementptr inbounds ([62 x i8], ptr @ix86_tune_features, i64 0, i64 31), align 1, !tbaa !16
  %86 = icmp eq i8 %85, 0
  br i1 %86, label %94, label %87

87:                                               ; preds = %84
  %88 = load ptr, ptr @cfun, align 8, !tbaa !5
  %89 = tail call zeroext i8 @optimize_function_for_speed_p(ptr noundef %88) #30
  %90 = icmp eq i8 %89, 0
  br i1 %90, label %94, label %91

91:                                               ; preds = %87
  %92 = load ptr, ptr @ix86_cost, align 8, !tbaa !5
  %93 = getelementptr inbounds %struct.processor_costs, ptr %92, i64 0, i32 11
  br label %97

94:                                               ; preds = %87, %84
  %95 = load ptr, ptr @ix86_cost, align 8, !tbaa !5
  %96 = getelementptr inbounds %struct.processor_costs, ptr %95, i64 0, i32 12
  br label %97

97:                                               ; preds = %94, %91
  %98 = phi ptr [ %92, %91 ], [ %95, %94 ]
  %99 = phi ptr [ %93, %91 ], [ %96, %94 ]
  %100 = load i32, ptr %99, align 4, !tbaa !20
  %101 = icmp eq i32 %2, 2
  br i1 %101, label %102, label %168

102:                                              ; preds = %97
  %103 = getelementptr inbounds %struct.processor_costs, ptr %98, i64 0, i32 13
  %104 = load i32, ptr %103, align 4, !tbaa !20
  %105 = tail call i32 @llvm.smax.i32(i32 %100, i32 %104)
  br label %168

106:                                              ; preds = %75
  switch i32 %2, label %115 [
    i32 2, label %107
    i32 0, label %119
  ]

107:                                              ; preds = %106
  %108 = load ptr, ptr @ix86_cost, align 8, !tbaa !5
  %109 = getelementptr inbounds %struct.processor_costs, ptr %108, i64 0, i32 11
  %110 = load i32, ptr %109, align 4, !tbaa !284
  %111 = getelementptr inbounds %struct.processor_costs, ptr %108, i64 0, i32 13
  %112 = load i32, ptr %111, align 4, !tbaa !20
  %113 = add nsw i32 %112, 4
  %114 = tail call i32 @llvm.smax.i32(i32 %110, i32 %113)
  br label %168

115:                                              ; preds = %106
  %116 = load ptr, ptr @ix86_cost, align 8, !tbaa !5
  %117 = getelementptr inbounds %struct.processor_costs, ptr %116, i64 0, i32 11
  %118 = load i32, ptr %117, align 4, !tbaa !284
  br label %168

119:                                              ; preds = %106
  %120 = load ptr, ptr @ix86_cost, align 8, !tbaa !5
  %121 = getelementptr inbounds %struct.processor_costs, ptr %120, i64 0, i32 13
  %122 = load i32, ptr %121, align 4, !tbaa !20
  %123 = add nsw i32 %122, 4
  br label %168

124:                                              ; preds = %74
  switch i32 %2, label %132 [
    i32 2, label %125
    i32 0, label %135
  ]

125:                                              ; preds = %124
  %126 = load ptr, ptr @ix86_cost, align 8, !tbaa !5
  %127 = getelementptr inbounds %struct.processor_costs, ptr %126, i64 0, i32 12, i64 1
  %128 = load i32, ptr %127, align 4, !tbaa !20
  %129 = getelementptr inbounds %struct.processor_costs, ptr %126, i64 0, i32 13, i64 1
  %130 = load i32, ptr %129, align 4, !tbaa !20
  %131 = tail call i32 @llvm.smax.i32(i32 %128, i32 %130)
  br label %168

132:                                              ; preds = %124
  %133 = load ptr, ptr @ix86_cost, align 8, !tbaa !5
  %134 = getelementptr inbounds %struct.processor_costs, ptr %133, i64 0, i32 12, i64 1
  br label %138

135:                                              ; preds = %124
  %136 = load ptr, ptr @ix86_cost, align 8, !tbaa !5
  %137 = getelementptr inbounds %struct.processor_costs, ptr %136, i64 0, i32 13, i64 1
  br label %138

138:                                              ; preds = %135, %132
  %139 = phi ptr [ %134, %132 ], [ %137, %135 ]
  %140 = load i32, ptr %139, align 4, !tbaa !20
  br label %168

141:                                              ; preds = %74
  %142 = icmp eq i32 %0, 41
  %143 = select i1 %142, i32 40, i32 %0
  switch i32 %2, label %151 [
    i32 2, label %144
    i32 0, label %155
  ]

144:                                              ; preds = %141
  %145 = load ptr, ptr @ix86_cost, align 8, !tbaa !5
  %146 = getelementptr inbounds %struct.processor_costs, ptr %145, i64 0, i32 12, i64 2
  %147 = load i32, ptr %146, align 4, !tbaa !20
  %148 = getelementptr inbounds %struct.processor_costs, ptr %145, i64 0, i32 13, i64 2
  %149 = load i32, ptr %148, align 4, !tbaa !20
  %150 = tail call i32 @llvm.smax.i32(i32 %147, i32 %149)
  br label %159

151:                                              ; preds = %141
  %152 = load ptr, ptr @ix86_cost, align 8, !tbaa !5
  %153 = getelementptr inbounds %struct.processor_costs, ptr %152, i64 0, i32 12, i64 2
  %154 = load i32, ptr %153, align 4, !tbaa !20
  br label %159

155:                                              ; preds = %141
  %156 = load ptr, ptr @ix86_cost, align 8, !tbaa !5
  %157 = getelementptr inbounds %struct.processor_costs, ptr %156, i64 0, i32 13, i64 2
  %158 = load i32, ptr %157, align 4, !tbaa !20
  br label %159

159:                                              ; preds = %151, %155, %144
  %160 = phi i32 [ %150, %144 ], [ %154, %151 ], [ %158, %155 ]
  %161 = zext i32 %143 to i64
  %162 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %161
  %163 = load i8, ptr %162, align 1, !tbaa !16
  %164 = zext i8 %163 to i32
  %165 = add nuw nsw i32 %164, 3
  %166 = lshr i32 %165, 2
  %167 = mul nsw i32 %166, %160
  br label %168

168:                                              ; preds = %6, %97, %65, %71, %59, %38, %51, %30, %11, %24, %159, %138, %125, %119, %115, %107, %102, %80
  %169 = phi i32 [ %167, %159 ], [ %131, %125 ], [ %140, %138 ], [ %105, %102 ], [ %83, %80 ], [ %114, %107 ], [ %118, %115 ], [ %123, %119 ], [ %17, %11 ], [ %26, %24 ], [ 100, %6 ], [ %44, %38 ], [ %53, %51 ], [ 100, %30 ], [ %70, %65 ], [ %73, %71 ], [ 100, %59 ], [ %100, %97 ]
  ret i32 %169
}

; Function Attrs: nounwind sspstrong uwtable
define dso_local i32 @ix86_register_move_cost(i32 noundef %0, i32 noundef %1, i32 noundef %2) local_unnamed_addr #9 {
  %4 = tail call fastcc i32 @inline_secondary_memory_needed(i32 noundef %1, i32 noundef %2, i32 noundef %0, i32 noundef 0), !range !222
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %70, label %6

6:                                                ; preds = %3
  %7 = tail call fastcc i32 @inline_memory_move_cost(i32 noundef %0, i32 noundef %1, i32 noundef 2)
  %8 = add nsw i32 %7, 1
  %9 = tail call fastcc i32 @inline_memory_move_cost(i32 noundef %0, i32 noundef %2, i32 noundef 2)
  %10 = add nsw i32 %8, %9
  %11 = tail call i32 @reg_classes_intersect_p(i32 noundef %1, i32 noundef 13) #30
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %13, label %20

13:                                               ; preds = %6
  %14 = zext i32 %0 to i64
  %15 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %14
  %16 = load i8, ptr %15, align 1, !tbaa !16
  %17 = and i8 %16, -2
  %18 = icmp eq i8 %17, 10
  %19 = select i1 %18, i32 2, i32 1
  br label %29

20:                                               ; preds = %6
  %21 = icmp eq i32 %0, 40
  br i1 %21, label %33, label %22

22:                                               ; preds = %20
  %23 = zext i32 %0 to i64
  %24 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %23
  %25 = load i8, ptr %24, align 1, !tbaa !16
  %26 = zext i8 %25 to i32
  %27 = add nuw nsw i32 %26, 3
  %28 = lshr i32 %27, 2
  br label %29

29:                                               ; preds = %22, %13
  %30 = phi i32 [ %19, %13 ], [ %28, %22 ]
  %31 = tail call i32 @reg_classes_intersect_p(i32 noundef %2, i32 noundef 13) #30
  %32 = icmp eq i32 %31, 0
  br i1 %32, label %36, label %44

33:                                               ; preds = %20
  %34 = tail call i32 @reg_classes_intersect_p(i32 noundef %2, i32 noundef 13) #30
  %35 = icmp eq i32 %34, 0
  br i1 %35, label %36, label %53

36:                                               ; preds = %33, %29
  %37 = phi i32 [ 3, %33 ], [ %30, %29 ]
  %38 = zext i32 %0 to i64
  %39 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %38
  %40 = load i8, ptr %39, align 1, !tbaa !16
  %41 = and i8 %40, -2
  %42 = icmp eq i8 %41, 10
  %43 = select i1 %42, i32 2, i32 1
  br label %53

44:                                               ; preds = %29
  %45 = icmp eq i32 %0, 40
  br i1 %45, label %53, label %46

46:                                               ; preds = %44
  %47 = zext i32 %0 to i64
  %48 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %47
  %49 = load i8, ptr %48, align 1, !tbaa !16
  %50 = zext i8 %49 to i32
  %51 = add nuw nsw i32 %50, 3
  %52 = lshr i32 %51, 2
  br label %53

53:                                               ; preds = %33, %46, %44, %36
  %54 = phi i32 [ %37, %36 ], [ %30, %46 ], [ %30, %44 ], [ 3, %33 ]
  %55 = phi i32 [ %43, %36 ], [ %52, %46 ], [ 3, %44 ], [ 3, %33 ]
  %56 = icmp ugt i32 %54, %55
  %57 = add nsw i32 %10, 20
  %58 = select i1 %56, i32 %57, i32 %10
  %59 = icmp eq i32 %1, 19
  br i1 %59, label %60, label %63

60:                                               ; preds = %53
  %61 = tail call i32 @reg_classes_intersect_p(i32 noundef %2, i32 noundef 16) #30
  %62 = icmp eq i32 %61, 0
  br i1 %62, label %63, label %68

63:                                               ; preds = %60, %53
  %64 = icmp eq i32 %2, 19
  br i1 %64, label %65, label %104

65:                                               ; preds = %63
  %66 = tail call i32 @reg_classes_intersect_p(i32 noundef %1, i32 noundef 16) #30
  %67 = icmp eq i32 %66, 0
  br i1 %67, label %104, label %68

68:                                               ; preds = %65, %60
  %69 = add nsw i32 %58, 20
  br label %104

70:                                               ; preds = %3
  %71 = icmp ne i32 %1, 19
  %72 = icmp eq i32 %2, 19
  %73 = xor i1 %71, %72
  br i1 %73, label %74, label %78

74:                                               ; preds = %70
  %75 = tail call i32 @reg_class_subset_p(i32 noundef %1, i32 noundef 18) #30
  %76 = tail call i32 @reg_class_subset_p(i32 noundef %2, i32 noundef 18) #30
  %77 = icmp eq i32 %75, %76
  br i1 %77, label %83, label %78

78:                                               ; preds = %74, %70
  %79 = load ptr, ptr @ix86_cost, align 8, !tbaa !5
  %80 = getelementptr inbounds %struct.processor_costs, ptr %79, i64 0, i32 23
  %81 = load i32, ptr %80, align 4, !tbaa !285
  %82 = tail call i32 @llvm.smax.i32(i32 %81, i32 8)
  br label %104

83:                                               ; preds = %74
  %84 = tail call i32 @reg_classes_intersect_p(i32 noundef %1, i32 noundef 16) #30
  %85 = icmp eq i32 %84, 0
  br i1 %85, label %90, label %86

86:                                               ; preds = %83
  %87 = load ptr, ptr @ix86_cost, align 8, !tbaa !5
  %88 = getelementptr inbounds %struct.processor_costs, ptr %87, i64 0, i32 14
  %89 = load i32, ptr %88, align 4, !tbaa !286
  br label %104

90:                                               ; preds = %83
  %91 = tail call i32 @reg_classes_intersect_p(i32 noundef 18, i32 noundef %1) #30
  %92 = icmp eq i32 %91, 0
  br i1 %92, label %97, label %93

93:                                               ; preds = %90
  %94 = load ptr, ptr @ix86_cost, align 8, !tbaa !5
  %95 = getelementptr inbounds %struct.processor_costs, ptr %94, i64 0, i32 20
  %96 = load i32, ptr %95, align 4, !tbaa !287
  br label %104

97:                                               ; preds = %90
  %98 = tail call i32 @reg_classes_intersect_p(i32 noundef 19, i32 noundef %1) #30
  %99 = icmp eq i32 %98, 0
  br i1 %99, label %104, label %100

100:                                              ; preds = %97
  %101 = load ptr, ptr @ix86_cost, align 8, !tbaa !5
  %102 = getelementptr inbounds %struct.processor_costs, ptr %101, i64 0, i32 17
  %103 = load i32, ptr %102, align 4, !tbaa !288
  br label %104

104:                                              ; preds = %97, %63, %65, %68, %100, %93, %86, %78
  %105 = phi i32 [ %82, %78 ], [ %89, %86 ], [ %96, %93 ], [ %103, %100 ], [ %69, %68 ], [ %58, %65 ], [ %58, %63 ], [ 2, %97 ]
  ret i32 %105
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind sspstrong willreturn memory(read, argmem: none, inaccessiblemem: none) uwtable
define dso_local zeroext i8 @ix86_hard_regno_mode_ok(i32 noundef %0, i32 noundef %1) local_unnamed_addr #16 {
  %3 = add i32 %0, -17
  %4 = icmp ult i32 %3, 2
  %5 = zext i32 %1 to i64
  %6 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %5
  %7 = load i8, ptr %6, align 1, !tbaa !16
  br i1 %4, label %8, label %10

8:                                                ; preds = %2
  %9 = icmp eq i8 %7, 1
  br label %60

10:                                               ; preds = %2
  switch i8 %7, label %11 [
    i8 1, label %60
    i8 0, label %60
    i8 3, label %60
  ]

11:                                               ; preds = %10
  %12 = sext i32 %0 to i64
  %13 = and i64 %12, -8
  %14 = icmp eq i64 %13, 8
  br i1 %14, label %15, label %17

15:                                               ; preds = %11
  %16 = icmp ult i32 %1, 54
  br i1 %16, label %50, label %60

17:                                               ; preds = %11
  switch i64 %12, label %27 [
    i64 52, label %18
    i64 51, label %18
    i64 50, label %18
    i64 49, label %18
    i64 48, label %18
    i64 47, label %18
    i64 46, label %18
    i64 45, label %18
    i64 28, label %18
    i64 27, label %18
    i64 26, label %18
    i64 25, label %18
    i64 24, label %18
    i64 23, label %18
    i64 22, label %18
    i64 21, label %18
  ]

18:                                               ; preds = %17, %17, %17, %17, %17, %17, %17, %17, %17, %17, %17, %17, %17, %17, %17, %17
  %19 = load i32, ptr @ix86_isa_flags, align 4, !tbaa !20
  %20 = freeze i32 %19
  %21 = and i32 %20, 32
  %22 = icmp ne i32 %21, 0
  %23 = icmp eq i32 %1, 19
  %24 = and i1 %23, %22
  br i1 %24, label %60, label %25

25:                                               ; preds = %18
  switch i32 %1, label %26 [
    i32 82, label %60
    i32 81, label %60
    i32 80, label %60
    i32 79, label %60
    i32 71, label %60
    i32 70, label %60
    i32 69, label %60
    i32 68, label %60
    i32 67, label %60
    i32 66, label %60
    i32 65, label %60
    i32 64, label %60
    i32 63, label %60
    i32 62, label %60
    i32 61, label %60
    i32 60, label %60
    i32 59, label %60
    i32 41, label %60
    i32 39, label %60
    i32 38, label %60
    i32 18, label %60
    i32 17, label %60
    i32 16, label %60
    i32 78, label %60
  ]

26:                                               ; preds = %25
  br label %60

27:                                               ; preds = %17
  %28 = add nsw i64 %12, -29
  %29 = icmp ult i64 %28, 8
  br i1 %29, label %30, label %37

30:                                               ; preds = %27
  %31 = add i32 %1, -16
  %32 = icmp ult i32 %31, 47
  br i1 %32, label %55, label %33

33:                                               ; preds = %55, %30
  %34 = icmp eq i32 %1, 78
  %35 = icmp eq i32 %1, 38
  %36 = or i1 %34, %35
  br label %60

37:                                               ; preds = %27
  switch i32 %1, label %49 [
    i32 14, label %38
    i32 48, label %60
    i32 47, label %60
    i32 46, label %60
    i32 45, label %60
    i32 17, label %60
    i32 16, label %60
    i32 15, label %60
    i32 53, label %60
    i32 52, label %60
    i32 51, label %60
    i32 40, label %60
    i32 39, label %60
    i32 38, label %60
    i32 44, label %60
    i32 43, label %60
    i32 42, label %60
    i32 78, label %60
    i32 62, label %60
    i32 61, label %60
    i32 60, label %60
    i32 59, label %60
  ]

38:                                               ; preds = %37
  %39 = icmp slt i32 %0, 4
  %40 = load i8, ptr getelementptr inbounds ([62 x i8], ptr @ix86_tune_features, i64 0, i64 9), align 1
  %41 = icmp eq i8 %40, 0
  %42 = select i1 %39, i1 true, i1 %41
  br i1 %42, label %60, label %43

43:                                               ; preds = %38
  %44 = load i32, ptr @reload_in_progress, align 4, !tbaa !20
  %45 = icmp ne i32 %44, 0
  %46 = load i32, ptr @reload_completed, align 4
  %47 = icmp ne i32 %46, 0
  %48 = select i1 %45, i1 true, i1 %47
  br label %60

49:                                               ; preds = %37
  br label %60

50:                                               ; preds = %15
  %51 = zext i32 %1 to i54
  %52 = lshr i54 -2249875668336640, %51
  %53 = and i54 %52, 1
  %54 = icmp ne i54 %53, 0
  br label %60

55:                                               ; preds = %30
  %56 = zext i32 %31 to i64
  %57 = lshr i64 131941395333123, %56
  %58 = and i64 %57, 1
  %59 = icmp eq i64 %58, 0
  br i1 %59, label %33, label %60

60:                                               ; preds = %55, %15, %50, %25, %25, %25, %25, %25, %25, %25, %25, %25, %25, %25, %25, %25, %25, %25, %25, %25, %25, %25, %25, %25, %25, %25, %25, %37, %37, %37, %37, %37, %37, %37, %37, %37, %37, %37, %37, %37, %37, %37, %37, %37, %37, %37, %37, %37, %38, %33, %26, %18, %10, %10, %10, %49, %43, %8
  %61 = phi i1 [ %9, %8 ], [ %48, %43 ], [ false, %49 ], [ false, %10 ], [ false, %10 ], [ false, %10 ], [ false, %26 ], [ true, %25 ], [ true, %18 ], [ true, %25 ], [ true, %25 ], [ true, %25 ], [ true, %25 ], [ true, %25 ], [ true, %25 ], [ true, %25 ], [ true, %25 ], [ true, %25 ], [ true, %25 ], [ true, %25 ], [ true, %25 ], [ true, %25 ], [ true, %25 ], [ true, %25 ], [ true, %25 ], [ true, %25 ], [ true, %25 ], [ true, %25 ], [ true, %25 ], [ true, %25 ], [ true, %25 ], [ %36, %33 ], [ true, %38 ], [ true, %37 ], [ true, %37 ], [ true, %37 ], [ true, %37 ], [ true, %37 ], [ true, %37 ], [ true, %37 ], [ true, %37 ], [ true, %37 ], [ true, %37 ], [ true, %37 ], [ true, %37 ], [ true, %37 ], [ true, %37 ], [ true, %37 ], [ true, %37 ], [ true, %37 ], [ true, %37 ], [ true, %37 ], [ true, %37 ], [ true, %37 ], [ true, %25 ], [ %54, %50 ], [ false, %15 ], [ true, %55 ]
  %62 = zext i1 %61 to i8
  ret i8 %62
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind sspstrong willreturn memory(read, inaccessiblemem: none) uwtable
define dso_local zeroext i8 @ix86_modes_tieable_p(i32 noundef %0, i32 noundef %1) local_unnamed_addr #23 {
  %3 = icmp eq i32 %0, %1
  br i1 %3, label %52, label %4

4:                                                ; preds = %2
  switch i32 %0, label %12 [
    i32 15, label %8
    i32 16, label %8
    i32 14, label %5
  ]

5:                                                ; preds = %4
  %6 = load i8, ptr getelementptr inbounds ([62 x i8], ptr @ix86_tune_features, i64 0, i64 9), align 1, !tbaa !16
  %7 = icmp eq i8 %6, 0
  br i1 %7, label %8, label %12

8:                                                ; preds = %4, %4, %5
  switch i32 %1, label %20 [
    i32 15, label %52
    i32 16, label %52
    i32 14, label %9
    i32 40, label %13
    i32 39, label %17
  ]

9:                                                ; preds = %8
  %10 = load i8, ptr getelementptr inbounds ([62 x i8], ptr @ix86_tune_features, i64 0, i64 9), align 1, !tbaa !16
  %11 = icmp eq i8 %10, 0
  br i1 %11, label %52, label %20

12:                                               ; preds = %4, %5
  switch i32 %1, label %20 [
    i32 40, label %13
    i32 39, label %17
  ]

13:                                               ; preds = %8, %12
  %14 = and i32 %0, -2
  %15 = icmp eq i32 %14, 38
  %16 = zext i1 %15 to i8
  br label %52

17:                                               ; preds = %8, %12
  %18 = icmp eq i32 %0, 38
  %19 = zext i1 %18 to i8
  br label %52

20:                                               ; preds = %8, %9, %12
  %21 = zext i32 %1 to i64
  %22 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %21
  %23 = load i8, ptr %22, align 1, !tbaa !16
  switch i8 %23, label %52 [
    i8 16, label %24
    i8 8, label %34
  ]

24:                                               ; preds = %20
  %25 = tail call zeroext i8 @ix86_hard_regno_mode_ok(i32 noundef 21, i32 noundef %1), !range !66
  %26 = icmp eq i8 %25, 0
  br i1 %26, label %52, label %27

27:                                               ; preds = %24
  %28 = zext i32 %0 to i64
  %29 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %28
  %30 = load i8, ptr %29, align 1, !tbaa !16
  %31 = icmp eq i8 %30, 16
  br i1 %31, label %32, label %52

32:                                               ; preds = %27
  %33 = tail call zeroext i8 @ix86_hard_regno_mode_ok(i32 noundef 21, i32 noundef %0), !range !66
  br label %52

34:                                               ; preds = %20
  %35 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %21
  %36 = load i8, ptr %35, align 1, !tbaa !16
  switch i8 %36, label %37 [
    i8 1, label %52
    i8 0, label %52
    i8 3, label %52
  ]

37:                                               ; preds = %34
  switch i32 %1, label %52 [
    i32 62, label %38
    i32 61, label %38
    i32 60, label %38
    i32 59, label %38
    i32 17, label %38
    i32 16, label %38
    i32 78, label %38
    i32 38, label %38
  ]

38:                                               ; preds = %37, %37, %37, %37, %37, %37, %37, %37
  %39 = zext i32 %0 to i64
  %40 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %39
  %41 = load i8, ptr %40, align 1, !tbaa !16
  %42 = icmp eq i8 %41, 8
  br i1 %42, label %43, label %52

43:                                               ; preds = %38
  %44 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %39
  %45 = load i8, ptr %44, align 1, !tbaa !16
  switch i8 %45, label %46 [
    i8 1, label %52
    i8 0, label %52
    i8 3, label %52
  ]

46:                                               ; preds = %43
  switch i32 %0, label %47 [
    i32 62, label %52
    i32 61, label %52
    i32 60, label %52
    i32 59, label %52
    i32 17, label %52
    i32 16, label %52
  ]

47:                                               ; preds = %46
  %48 = icmp eq i32 %0, 78
  %49 = icmp eq i32 %0, 38
  %50 = or i1 %48, %49
  %51 = zext i1 %50 to i8
  br label %52

52:                                               ; preds = %37, %47, %46, %46, %46, %46, %46, %46, %43, %43, %43, %20, %8, %8, %34, %34, %34, %24, %38, %27, %32, %9, %2, %17, %13
  %53 = phi i8 [ %16, %13 ], [ %19, %17 ], [ 1, %2 ], [ 1, %9 ], [ 0, %27 ], [ %33, %32 ], [ 0, %38 ], [ 1, %8 ], [ 1, %8 ], [ 0, %24 ], [ 0, %34 ], [ 0, %34 ], [ 0, %34 ], [ 0, %20 ], [ 0, %43 ], [ 0, %43 ], [ 0, %43 ], [ 1, %46 ], [ %51, %47 ], [ 1, %46 ], [ 1, %46 ], [ 1, %46 ], [ 1, %46 ], [ 1, %46 ], [ 0, %37 ]
  ret i8 %53
}

; Function Attrs: nofree nosync nounwind sspstrong memory(readwrite, argmem: none, inaccessiblemem: none) uwtable
define dso_local void @x86_order_regs_for_local_alloc() local_unnamed_addr #24 {
  br label %1

1:                                                ; preds = %25, %0
  %2 = phi i64 [ 0, %0 ], [ %27, %25 ]
  %3 = phi i32 [ 0, %0 ], [ %26, %25 ]
  switch i64 %2, label %13 [
    i64 44, label %4
    i64 0, label %4
    i64 42, label %4
    i64 4, label %4
    i64 40, label %4
    i64 2, label %4
    i64 38, label %4
    i64 6, label %4
  ]

4:                                                ; preds = %1, %1, %1, %1, %1, %1, %1, %1
  %5 = getelementptr inbounds [53 x i8], ptr @call_used_regs, i64 0, i64 %2
  %6 = load i8, ptr %5, align 2, !tbaa !16
  %7 = icmp eq i8 %6, 0
  br i1 %7, label %13, label %8

8:                                                ; preds = %4
  %9 = add nsw i32 %3, 1
  %10 = sext i32 %3 to i64
  %11 = getelementptr inbounds [53 x i32], ptr @reg_alloc_order, i64 0, i64 %10
  %12 = trunc i64 %2 to i32
  store i32 %12, ptr %11, align 4, !tbaa !20
  br label %13

13:                                               ; preds = %1, %4, %8
  %14 = phi i32 [ %9, %8 ], [ %3, %4 ], [ %3, %1 ]
  %15 = or i64 %2, 1
  switch i64 %15, label %25 [
    i64 53, label %28
    i64 7, label %16
    i64 43, label %16
    i64 1, label %16
    i64 41, label %16
    i64 5, label %16
    i64 39, label %16
    i64 3, label %16
    i64 37, label %16
  ]

16:                                               ; preds = %13, %13, %13, %13, %13, %13, %13, %13
  %17 = getelementptr inbounds [53 x i8], ptr @call_used_regs, i64 0, i64 %15
  %18 = load i8, ptr %17, align 1, !tbaa !16
  %19 = icmp eq i8 %18, 0
  br i1 %19, label %25, label %20

20:                                               ; preds = %16
  %21 = add nsw i32 %14, 1
  %22 = sext i32 %14 to i64
  %23 = getelementptr inbounds [53 x i32], ptr @reg_alloc_order, i64 0, i64 %22
  %24 = trunc i64 %15 to i32
  store i32 %24, ptr %23, align 4, !tbaa !20
  br label %25

25:                                               ; preds = %13, %20, %16
  %26 = phi i32 [ %21, %20 ], [ %14, %16 ], [ %14, %13 ]
  %27 = add nuw nsw i64 %2, 2
  br label %1

28:                                               ; preds = %13, %52
  %29 = phi i64 [ %54, %52 ], [ 0, %13 ]
  %30 = phi i32 [ %53, %52 ], [ %14, %13 ]
  switch i64 %29, label %40 [
    i64 44, label %31
    i64 0, label %31
    i64 42, label %31
    i64 4, label %31
    i64 40, label %31
    i64 2, label %31
    i64 38, label %31
    i64 6, label %31
  ]

31:                                               ; preds = %28, %28, %28, %28, %28, %28, %28, %28
  %32 = getelementptr inbounds [53 x i8], ptr @call_used_regs, i64 0, i64 %29
  %33 = load i8, ptr %32, align 2, !tbaa !16
  %34 = icmp eq i8 %33, 0
  br i1 %34, label %35, label %40

35:                                               ; preds = %31
  %36 = add nsw i32 %30, 1
  %37 = sext i32 %30 to i64
  %38 = getelementptr inbounds [53 x i32], ptr @reg_alloc_order, i64 0, i64 %37
  %39 = trunc i64 %29 to i32
  store i32 %39, ptr %38, align 4, !tbaa !20
  br label %40

40:                                               ; preds = %28, %31, %35
  %41 = phi i32 [ %30, %31 ], [ %36, %35 ], [ %30, %28 ]
  %42 = or i64 %29, 1
  switch i64 %42, label %52 [
    i64 53, label %55
    i64 7, label %43
    i64 43, label %43
    i64 1, label %43
    i64 41, label %43
    i64 5, label %43
    i64 39, label %43
    i64 3, label %43
    i64 37, label %43
  ]

43:                                               ; preds = %40, %40, %40, %40, %40, %40, %40, %40
  %44 = getelementptr inbounds [53 x i8], ptr @call_used_regs, i64 0, i64 %42
  %45 = load i8, ptr %44, align 1, !tbaa !16
  %46 = icmp eq i8 %45, 0
  br i1 %46, label %47, label %52

47:                                               ; preds = %43
  %48 = add nsw i32 %41, 1
  %49 = sext i32 %41 to i64
  %50 = getelementptr inbounds [53 x i32], ptr @reg_alloc_order, i64 0, i64 %49
  %51 = trunc i64 %42 to i32
  store i32 %51, ptr %50, align 4, !tbaa !20
  br label %52

52:                                               ; preds = %40, %47, %43
  %53 = phi i32 [ %41, %43 ], [ %48, %47 ], [ %41, %40 ]
  %54 = add nuw nsw i64 %29, 2
  br label %28

55:                                               ; preds = %40
  %56 = load i32, ptr @ix86_fpmath, align 4, !tbaa !16
  %57 = and i32 %56, 2
  %58 = icmp eq i32 %57, 0
  br i1 %58, label %59, label %63

59:                                               ; preds = %55
  %60 = sext i32 %41 to i64
  %61 = getelementptr inbounds [53 x i32], ptr @reg_alloc_order, i64 0, i64 %60
  %62 = add i32 %41, 8
  store <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>, ptr %61, align 4, !tbaa !20
  br label %63

63:                                               ; preds = %59, %55
  %64 = phi i32 [ %41, %55 ], [ %62, %59 ]
  %65 = sext i32 %64 to i64
  %66 = getelementptr inbounds [53 x i32], ptr @reg_alloc_order, i64 0, i64 %65
  %67 = add i32 %64, 8
  store <8 x i32> <i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28>, ptr %66, align 4, !tbaa !20
  %68 = sext i32 %67 to i64
  %69 = getelementptr inbounds [53 x i32], ptr @reg_alloc_order, i64 0, i64 %68
  %70 = add i32 %64, 16
  store <8 x i32> <i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52>, ptr %69, align 4, !tbaa !20
  br i1 %58, label %75, label %71

71:                                               ; preds = %63
  %72 = sext i32 %70 to i64
  %73 = getelementptr inbounds [53 x i32], ptr @reg_alloc_order, i64 0, i64 %72
  %74 = add i32 %64, 24
  store <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>, ptr %73, align 4, !tbaa !20
  br label %75

75:                                               ; preds = %71, %63
  %76 = phi i32 [ %70, %63 ], [ %74, %71 ]
  %77 = sext i32 %76 to i64
  %78 = getelementptr inbounds [53 x i32], ptr @reg_alloc_order, i64 0, i64 %77
  %79 = add i32 %76, 7
  store <8 x i32> <i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36>, ptr %78, align 4, !tbaa !20
  %80 = icmp slt i32 %79, 52
  br i1 %80, label %81, label %90

81:                                               ; preds = %75
  %82 = add i32 %76, 8
  %83 = sext i32 %82 to i64
  %84 = shl nsw i64 %83, 2
  %85 = getelementptr i8, ptr @reg_alloc_order, i64 %84
  %86 = sub i32 44, %76
  %87 = zext i32 %86 to i64
  %88 = shl nuw nsw i64 %87, 2
  %89 = add nuw nsw i64 %88, 4
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(1) %85, i8 0, i64 %89, i1 false), !tbaa !20
  br label %90

90:                                               ; preds = %81, %75
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define dso_local i32 @x86_field_alignment(ptr nocapture noundef readonly %0, i32 noundef %1) local_unnamed_addr #9 {
  %3 = load i32, ptr @target_flags, align 4, !tbaa !20
  %4 = and i32 %3, 8
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %6, label %29

6:                                                ; preds = %2
  %7 = getelementptr inbounds %struct.tree_common, ptr %0, i64 0, i32 2
  %8 = load ptr, ptr %7, align 8, !tbaa !16
  %9 = tail call ptr @strip_array_types(ptr noundef %8) #30
  %10 = load i64, ptr %9, align 8
  %11 = and i64 %10, 65535
  %12 = icmp eq i64 %11, 14
  %13 = tail call ptr @strip_array_types(ptr noundef %8) #30
  br i1 %12, label %14, label %16

14:                                               ; preds = %6
  %15 = tail call i32 @vector_type_mode(ptr noundef %13) #30
  br label %21

16:                                               ; preds = %6
  %17 = getelementptr inbounds %struct.tree_type, ptr %13, i64 0, i32 6
  %18 = load i32, ptr %17, align 4
  %19 = lshr i32 %18, 16
  %20 = and i32 %19, 255
  br label %21

21:                                               ; preds = %16, %14
  %22 = phi i32 [ %15, %14 ], [ %20, %16 ]
  switch i32 %22, label %23 [
    i32 52, label %27
    i32 39, label %27
  ]

23:                                               ; preds = %21
  %24 = zext i32 %22 to i64
  %25 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %24
  %26 = load i8, ptr %25, align 1, !tbaa !16
  switch i8 %26, label %29 [
    i8 2, label %27
    i8 10, label %27
  ]

27:                                               ; preds = %23, %23, %21, %21
  %28 = tail call i32 @llvm.smin.i32(i32 %1, i32 32)
  br label %29

29:                                               ; preds = %23, %2, %27
  %30 = phi i32 [ %28, %27 ], [ %1, %2 ], [ %1, %23 ]
  ret i32 %30
}

declare ptr @strip_array_types(ptr noundef) local_unnamed_addr #3

; Function Attrs: nofree nounwind sspstrong uwtable
define dso_local void @x86_function_profiler(ptr nocapture noundef %0, i32 noundef %1) local_unnamed_addr #21 {
  %3 = load i32, ptr @flag_pic, align 4, !tbaa !20
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %7, label %5

5:                                                ; preds = %2
  %6 = tail call i64 @fwrite(ptr nonnull @.str.280, i64 24, i64 1, ptr %0)
  br label %9

7:                                                ; preds = %2
  %8 = tail call i64 @fwrite(ptr nonnull @.str.281, i64 13, i64 1, ptr %0)
  br label %9

9:                                                ; preds = %7, %5
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define dso_local zeroext i8 @x86_extended_QIreg_mentioned_p(ptr noundef %0) local_unnamed_addr #9 {
  tail call void @extract_insn_cached(ptr noundef %0) #30
  %2 = load i8, ptr getelementptr inbounds (%struct.recog_data, ptr @recog_data, i64 0, i32 7), align 2, !tbaa !267
  %3 = icmp sgt i8 %2, 0
  br i1 %3, label %4, label %20

4:                                                ; preds = %1
  %5 = zext i8 %2 to i64
  br label %6

6:                                                ; preds = %4, %17
  %7 = phi i64 [ 0, %4 ], [ %18, %17 ]
  %8 = getelementptr inbounds [30 x ptr], ptr @recog_data, i64 0, i64 %7
  %9 = load ptr, ptr %8, align 8, !tbaa !5
  %10 = load i32, ptr %9, align 8
  %11 = and i32 %10, 65535
  %12 = icmp eq i32 %11, 37
  br i1 %12, label %13, label %17

13:                                               ; preds = %6
  %14 = getelementptr i8, ptr %9, i64 8
  %15 = load i32, ptr %14, align 8, !tbaa !16
  %16 = icmp ugt i32 %15, 3
  br i1 %16, label %20, label %17

17:                                               ; preds = %6, %13
  %18 = add nuw nsw i64 %7, 1
  %19 = icmp eq i64 %18, %5
  br i1 %19, label %20, label %6, !llvm.loop !289

20:                                               ; preds = %13, %17, %1
  %21 = phi i8 [ 0, %1 ], [ 0, %17 ], [ 1, %13 ]
  ret i8 %21
}

; Function Attrs: nounwind sspstrong uwtable
define dso_local zeroext i8 @x86_extended_reg_mentioned_p(ptr noundef %0) local_unnamed_addr #9 {
  %2 = alloca ptr, align 8
  store ptr %0, ptr %2, align 8, !tbaa !5
  %3 = load i32, ptr %0, align 8
  %4 = and i32 %3, 65535
  %5 = add nsw i32 %4, -7
  %6 = icmp ult i32 %5, 4
  %7 = getelementptr inbounds %struct.rtx_def, ptr %0, i64 1
  %8 = select i1 %6, ptr %7, ptr %2
  %9 = call i32 @for_each_rtx(ptr noundef nonnull %8, ptr noundef nonnull @extended_reg_mentioned_1, ptr noundef null) #30
  %10 = trunc i32 %9 to i8
  ret i8 %10
}

declare i32 @for_each_rtx(ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

; Function Attrs: mustprogress nofree norecurse nosync nounwind sspstrong willreturn memory(read, inaccessiblemem: none) uwtable
define internal i32 @extended_reg_mentioned_1(ptr nocapture noundef readonly %0, ptr nocapture readnone %1) #23 {
  %3 = load ptr, ptr %0, align 8, !tbaa !5
  %4 = load i32, ptr %3, align 8
  %5 = and i32 %4, 65535
  %6 = icmp eq i32 %5, 37
  br i1 %6, label %7, label %14

7:                                                ; preds = %2
  %8 = getelementptr i8, ptr %3, i64 8
  %9 = load i32, ptr %8, align 8, !tbaa !16
  %10 = zext i32 %9 to i64
  %11 = add nsw i64 %10, -37
  %12 = icmp ult i64 %11, 16
  %13 = zext i1 %12 to i32
  br label %14

14:                                               ; preds = %2, %7
  %15 = phi i32 [ %13, %7 ], [ 0, %2 ]
  ret i32 %15
}

; Function Attrs: nounwind sspstrong uwtable
define dso_local void @x86_emit_floatuns(ptr nocapture noundef readonly %0) local_unnamed_addr #9 {
  %2 = getelementptr inbounds ptr, ptr %0, i64 1
  %3 = load ptr, ptr %2, align 8, !tbaa !5
  %4 = load i32, ptr %3, align 8
  %5 = and i32 %4, 16646144
  %6 = icmp eq i32 %5, 1048576
  br i1 %6, label %9, label %7

7:                                                ; preds = %1
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 26690, ptr noundef nonnull @.str.131) #30
  %8 = load ptr, ptr %2, align 8, !tbaa !5
  br label %9

9:                                                ; preds = %1, %7
  %10 = phi ptr [ %3, %1 ], [ %8, %7 ]
  %11 = lshr i32 %4, 16
  %12 = and i32 %11, 255
  %13 = load ptr, ptr %0, align 8, !tbaa !5
  %14 = tail call ptr @force_reg(i32 noundef %12, ptr noundef %10) #30
  %15 = load i32, ptr %13, align 8
  %16 = lshr i32 %15, 16
  %17 = and i32 %16, 255
  %18 = tail call ptr @gen_label_rtx() #30
  %19 = tail call ptr @gen_label_rtx() #30
  %20 = tail call ptr @gen_reg_rtx(i32 noundef %17) #30
  %21 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 64), align 16, !tbaa !5
  tail call void @emit_cmp_and_jump_insns(ptr noundef %14, ptr noundef %21, i32 noundef 85, ptr noundef %21, i32 noundef %12, i32 noundef 0, ptr noundef %18) #30
  tail call void @expand_float(ptr noundef nonnull %13, ptr noundef %14, i32 noundef 0) #30
  %22 = tail call ptr @gen_jump(ptr noundef %19) #30
  %23 = tail call ptr @emit_jump_insn(ptr noundef %22) #30
  %24 = tail call ptr @emit_barrier() #30
  %25 = tail call ptr @emit_label(ptr noundef %18) #30
  %26 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 65), align 8, !tbaa !5
  %27 = tail call ptr @expand_simple_binop(i32 noundef %12, i32 noundef 68, ptr noundef %14, ptr noundef %26, ptr noundef null, i32 noundef 1, i32 noundef 0) #30
  %28 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 65), align 8, !tbaa !5
  %29 = tail call ptr @expand_simple_binop(i32 noundef %12, i32 noundef 61, ptr noundef %14, ptr noundef %28, ptr noundef null, i32 noundef 1, i32 noundef 0) #30
  %30 = tail call ptr @expand_simple_binop(i32 noundef %12, i32 noundef 62, ptr noundef %27, ptr noundef %29, ptr noundef %27, i32 noundef 1, i32 noundef 0) #30
  tail call void @expand_float(ptr noundef %20, ptr noundef %30, i32 noundef 0) #30
  %31 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 49, i32 noundef %17, ptr noundef %20, ptr noundef %20) #30
  %32 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 23, i32 noundef 0, ptr noundef nonnull %13, ptr noundef %31) #30
  %33 = tail call ptr @emit_insn(ptr noundef %32) #30
  %34 = tail call ptr @emit_label(ptr noundef %19) #30
  ret void
}

declare void @expand_float(ptr noundef, ptr noundef, i32 noundef) local_unnamed_addr #3

declare ptr @gen_jump(ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define dso_local void @ix86_expand_vector_init(i8 noundef zeroext %0, ptr noundef %1, ptr noundef %2) local_unnamed_addr #9 {
  %4 = load i32, ptr %1, align 8
  %5 = lshr i32 %4, 16
  %6 = and i32 %5, 255
  %7 = zext i32 %6 to i64
  %8 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %7
  %9 = load i8, ptr %8, align 1, !tbaa !16
  %10 = getelementptr inbounds [87 x i8], ptr @mode_nunits, i64 0, i64 %7
  %11 = load i8, ptr %10, align 1, !tbaa !16
  %12 = icmp eq i8 %11, 0
  br i1 %12, label %69, label %13

13:                                               ; preds = %3
  %14 = getelementptr inbounds %struct.rtx_def, ptr %2, i64 0, i32 1
  %15 = zext i8 %9 to i64
  %16 = getelementptr inbounds [87 x ptr], ptr @const_tiny_rtx, i64 0, i64 %15
  %17 = zext i8 %11 to i64
  %18 = load ptr, ptr %14, align 8, !tbaa !16
  %19 = getelementptr inbounds %struct.rtvec_def, ptr %18, i64 0, i32 1, i64 0
  %20 = load ptr, ptr %19, align 8, !tbaa !5
  %21 = load i32, ptr %20, align 8
  %22 = and i32 %21, 65535
  %23 = add nsw i32 %22, -30
  %24 = icmp ult i32 %23, 3
  br i1 %24, label %25, label %30

25:                                               ; preds = %13
  %26 = load ptr, ptr %16, align 8, !tbaa !5
  %27 = icmp eq ptr %20, %26
  %28 = zext i1 %27 to i8
  %29 = icmp eq i8 %11, 1
  br i1 %29, label %69, label %32

30:                                               ; preds = %13
  %31 = icmp eq i8 %11, 1
  br i1 %31, label %76, label %32

32:                                               ; preds = %30, %25
  %33 = phi i32 [ 0, %25 ], [ 1, %30 ]
  %34 = phi i8 [ %28, %25 ], [ 1, %30 ]
  %35 = phi i32 [ -1, %25 ], [ 0, %30 ]
  br label %36

36:                                               ; preds = %32, %56
  %37 = phi i64 [ %65, %56 ], [ 1, %32 ]
  %38 = phi i32 [ %59, %56 ], [ %33, %32 ]
  %39 = phi i8 [ %58, %56 ], [ %34, %32 ]
  %40 = phi i8 [ %64, %56 ], [ 1, %32 ]
  %41 = phi i32 [ %57, %56 ], [ %35, %32 ]
  %42 = load ptr, ptr %14, align 8, !tbaa !16
  %43 = getelementptr inbounds %struct.rtvec_def, ptr %42, i64 0, i32 1, i64 %37
  %44 = load ptr, ptr %43, align 8, !tbaa !5
  %45 = load i32, ptr %44, align 8
  %46 = and i32 %45, 65535
  %47 = add nsw i32 %46, -30
  %48 = icmp ult i32 %47, 3
  br i1 %48, label %52, label %49

49:                                               ; preds = %36
  %50 = add nsw i32 %38, 1
  %51 = trunc i64 %37 to i32
  br label %56

52:                                               ; preds = %36
  %53 = load ptr, ptr %16, align 8, !tbaa !5
  %54 = icmp eq ptr %44, %53
  %55 = select i1 %54, i8 %39, i8 0
  br label %56

56:                                               ; preds = %52, %49
  %57 = phi i32 [ %51, %49 ], [ %41, %52 ]
  %58 = phi i8 [ %39, %49 ], [ %55, %52 ]
  %59 = phi i32 [ %50, %49 ], [ %38, %52 ]
  %60 = getelementptr inbounds %struct.rtvec_def, ptr %42, i64 0, i32 1
  %61 = load ptr, ptr %60, align 8, !tbaa !5
  %62 = tail call i32 @rtx_equal_p(ptr noundef nonnull %44, ptr noundef %61) #30
  %63 = icmp eq i32 %62, 0
  %64 = select i1 %63, i8 0, i8 %40
  %65 = add nuw nsw i64 %37, 1
  %66 = icmp eq i64 %65, %17
  br i1 %66, label %67, label %36, !llvm.loop !290

67:                                               ; preds = %56
  %68 = icmp eq i32 %59, 0
  br i1 %68, label %69, label %74

69:                                               ; preds = %25, %3, %67
  %70 = getelementptr inbounds %struct.rtx_def, ptr %2, i64 0, i32 1
  %71 = load ptr, ptr %70, align 8, !tbaa !16
  %72 = tail call ptr @gen_rtx_CONST_VECTOR(i32 noundef %6, ptr noundef %71) #30
  %73 = tail call ptr @emit_move_insn(ptr noundef nonnull %1, ptr noundef %72) #30
  br label %165

74:                                               ; preds = %67
  %75 = icmp eq i8 %64, 0
  br i1 %75, label %86, label %76

76:                                               ; preds = %30, %74
  %77 = phi i32 [ %57, %74 ], [ 0, %30 ]
  %78 = phi i8 [ %58, %74 ], [ 1, %30 ]
  %79 = phi i32 [ %59, %74 ], [ 1, %30 ]
  %80 = getelementptr inbounds %struct.rtx_def, ptr %2, i64 0, i32 1
  %81 = load ptr, ptr %80, align 8, !tbaa !16
  %82 = getelementptr inbounds %struct.rtvec_def, ptr %81, i64 0, i32 1
  %83 = load ptr, ptr %82, align 8, !tbaa !5
  %84 = tail call fastcc zeroext i8 @ix86_expand_vector_init_duplicate(i8 noundef zeroext %0, i32 noundef %6, ptr noundef nonnull %1, ptr noundef %83), !range !66
  %85 = icmp eq i8 %84, 0
  br i1 %85, label %86, label %165

86:                                               ; preds = %76, %74
  %87 = phi i32 [ %77, %76 ], [ %57, %74 ]
  %88 = phi i8 [ %78, %76 ], [ %58, %74 ]
  %89 = phi i32 [ %79, %76 ], [ %59, %74 ]
  %90 = icmp eq i32 %89, 1
  br i1 %90, label %91, label %164

91:                                               ; preds = %86
  %92 = icmp eq i8 %88, 0
  br i1 %92, label %93, label %95

93:                                               ; preds = %91
  %94 = sext i32 %87 to i64
  br label %103

95:                                               ; preds = %91
  %96 = getelementptr inbounds %struct.rtx_def, ptr %2, i64 0, i32 1
  %97 = load ptr, ptr %96, align 8, !tbaa !16
  %98 = sext i32 %87 to i64
  %99 = getelementptr inbounds %struct.rtvec_def, ptr %97, i64 0, i32 1, i64 %98
  %100 = load ptr, ptr %99, align 8, !tbaa !5
  %101 = tail call fastcc zeroext i8 @ix86_expand_vector_init_one_nonzero(i8 noundef zeroext %0, i32 noundef %6, ptr noundef nonnull %1, ptr noundef %100, i32 noundef %87), !range !66
  %102 = icmp eq i8 %101, 0
  br i1 %102, label %103, label %165

103:                                              ; preds = %93, %95
  %104 = phi i64 [ %94, %93 ], [ %98, %95 ]
  %105 = getelementptr inbounds %struct.rtx_def, ptr %2, i64 0, i32 1
  %106 = load ptr, ptr %105, align 8, !tbaa !16
  %107 = getelementptr inbounds %struct.rtvec_def, ptr %106, i64 0, i32 1, i64 %104
  %108 = load ptr, ptr %107, align 8, !tbaa !5
  %109 = tail call ptr @copy_rtx(ptr noundef nonnull %2) #30
  %110 = zext i8 %9 to i64
  %111 = getelementptr inbounds [87 x ptr], ptr @const_tiny_rtx, i64 0, i64 %110
  %112 = load ptr, ptr %111, align 8, !tbaa !5
  %113 = getelementptr inbounds %struct.rtx_def, ptr %109, i64 0, i32 1
  %114 = load ptr, ptr %113, align 8, !tbaa !16
  %115 = getelementptr inbounds %struct.rtvec_def, ptr %114, i64 0, i32 1, i64 %104
  store ptr %112, ptr %115, align 8, !tbaa !5
  %116 = load ptr, ptr %113, align 8, !tbaa !16
  %117 = tail call ptr @gen_rtx_CONST_VECTOR(i32 noundef %6, ptr noundef %116) #30
  %118 = trunc i32 %5 to i8
  switch i8 %118, label %164 [
    i8 59, label %123
    i8 63, label %119
    i8 60, label %162
    i8 64, label %162
    i8 65, label %162
    i8 82, label %162
    i8 81, label %162
    i8 70, label %162
    i8 69, label %162
    i8 68, label %162
    i8 79, label %162
  ]

119:                                              ; preds = %103
  %120 = load i32, ptr @ix86_isa_flags, align 4, !tbaa !20
  %121 = and i32 %120, 524288
  %122 = icmp eq i32 %121, 0
  br i1 %122, label %123, label %162

123:                                              ; preds = %119, %103
  %124 = phi i32 [ 64, %119 ], [ 60, %103 ]
  %125 = load ptr, ptr %105, align 8, !tbaa !16
  %126 = xor i32 %87, 1
  %127 = sext i32 %126 to i64
  %128 = getelementptr inbounds %struct.rtvec_def, ptr %125, i64 0, i32 1, i64 %127
  %129 = load ptr, ptr %128, align 8, !tbaa !5
  %130 = and i32 %87, 1
  %131 = icmp eq i32 %130, 0
  %132 = tail call ptr @convert_modes(i32 noundef 15, i32 noundef 14, ptr noundef %108, i32 noundef 1) #30
  br i1 %131, label %140, label %133

133:                                              ; preds = %123
  %134 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef 8) #30
  %135 = tail call ptr @expand_simple_binop(i32 noundef 15, i32 noundef 65, ptr noundef %132, ptr noundef %134, ptr noundef null, i32 noundef 1, i32 noundef 3) #30
  %136 = getelementptr inbounds %struct.rtx_def, ptr %129, i64 0, i32 1
  %137 = load i64, ptr %136, align 8, !tbaa !16
  %138 = and i64 %137, 255
  %139 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef %138) #30
  br label %145

140:                                              ; preds = %123
  %141 = getelementptr inbounds %struct.rtx_def, ptr %129, i64 0, i32 1
  %142 = load i64, ptr %141, align 8, !tbaa !16
  %143 = shl i64 %142, 8
  %144 = tail call ptr @gen_int_mode(i64 noundef %143, i32 noundef 15) #30
  br label %145

145:                                              ; preds = %140, %133
  %146 = phi ptr [ %135, %133 ], [ %132, %140 ]
  %147 = phi ptr [ %139, %133 ], [ %144, %140 ]
  %148 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 64), align 16, !tbaa !5
  %149 = icmp eq ptr %147, %148
  br i1 %149, label %152, label %150

150:                                              ; preds = %145
  %151 = tail call ptr @expand_simple_binop(i32 noundef 15, i32 noundef 62, ptr noundef %146, ptr noundef %147, ptr noundef %146, i32 noundef 1, i32 noundef 3) #30
  br label %152

152:                                              ; preds = %150, %145
  %153 = phi ptr [ %151, %150 ], [ %146, %145 ]
  %154 = tail call ptr @gen_reg_rtx(i32 noundef %124) #30
  %155 = load ptr, ptr @rtl_hooks, align 8, !tbaa !187
  %156 = tail call ptr %155(i32 noundef %124, ptr noundef %117) #30
  %157 = tail call ptr @emit_move_insn(ptr noundef %154, ptr noundef %156) #30
  %158 = ashr i32 %87, 1
  tail call void @ix86_expand_vector_set(i8 noundef zeroext %0, ptr noundef %154, ptr noundef %153, i32 noundef %158)
  %159 = load ptr, ptr @rtl_hooks, align 8, !tbaa !187
  %160 = tail call ptr %159(i32 noundef %6, ptr noundef %154) #30
  %161 = tail call ptr @emit_move_insn(ptr noundef nonnull %1, ptr noundef %160) #30
  br label %165

162:                                              ; preds = %119, %103, %103, %103, %103, %103, %103, %103, %103, %103
  %163 = tail call ptr @emit_move_insn(ptr noundef nonnull %1, ptr noundef %117) #30
  tail call void @ix86_expand_vector_set(i8 noundef zeroext %0, ptr noundef nonnull %1, ptr noundef %108, i32 noundef %87)
  br label %165

164:                                              ; preds = %103, %86
  tail call fastcc void @ix86_expand_vector_init_general(i8 noundef zeroext %0, i32 noundef %6, ptr noundef nonnull %1, ptr noundef nonnull %2)
  br label %165

165:                                              ; preds = %162, %152, %95, %76, %164, %69
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc zeroext i8 @ix86_expand_vector_init_duplicate(i8 noundef zeroext %0, i32 noundef %1, ptr noundef %2, ptr noundef %3) unnamed_addr #9 {
  %5 = alloca %struct.expand_vec_perm_d, align 8
  switch i32 %1, label %141 [
    i32 61, label %6
    i32 78, label %6
    i32 82, label %8
    i32 71, label %8
    i32 81, label %8
    i32 70, label %8
    i32 80, label %8
    i32 66, label %8
    i32 79, label %8
    i32 65, label %8
    i32 60, label %39
    i32 59, label %52
    i32 64, label %54
    i32 63, label %83
    i32 69, label %130
    i32 68, label %130
  ]

6:                                                ; preds = %4, %4
  %7 = icmp eq i8 %0, 0
  br i1 %7, label %141, label %8

8:                                                ; preds = %6, %4, %4, %4, %4, %4, %4, %4, %4
  %9 = tail call ptr @gen_rtx_fmt_e_stat(i32 noundef 126, i32 noundef %1, ptr noundef %3) #30
  %10 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 23, i32 noundef 0, ptr noundef %2, ptr noundef %9) #30
  %11 = tail call ptr @emit_insn(ptr noundef %10) #30
  %12 = getelementptr inbounds %struct.rtx_def, ptr %11, i64 1, i32 1
  %13 = load i32, ptr %12, align 8, !tbaa !16
  %14 = icmp slt i32 %13, 0
  br i1 %14, label %15, label %141

15:                                               ; preds = %8
  %16 = getelementptr inbounds %struct.rtx_def, ptr %11, i64 1
  %17 = load ptr, ptr %16, align 8, !tbaa !16
  %18 = tail call i32 @recog(ptr noundef %17, ptr noundef nonnull %11, ptr noundef null) #30
  store i32 %18, ptr %12, align 8, !tbaa !16
  %19 = icmp slt i32 %18, 0
  br i1 %19, label %20, label %141

20:                                               ; preds = %15
  tail call void @start_sequence() #30
  %21 = zext i32 %1 to i64
  %22 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %21
  %23 = load i8, ptr %22, align 1, !tbaa !16
  %24 = zext i8 %23 to i32
  %25 = tail call ptr @force_reg(i32 noundef %24, ptr noundef %3) #30
  %26 = getelementptr inbounds %struct.rtx_def, ptr %9, i64 0, i32 1
  store ptr %25, ptr %26, align 8, !tbaa !16
  %27 = tail call ptr @get_insns() #30
  tail call void @end_sequence() #30
  %28 = icmp eq ptr %27, null
  br i1 %28, label %31, label %29

29:                                               ; preds = %20
  %30 = tail call ptr @emit_insn_before(ptr noundef nonnull %27, ptr noundef nonnull %11) #30
  br label %31

31:                                               ; preds = %29, %20
  %32 = load i32, ptr %12, align 8, !tbaa !16
  %33 = icmp slt i32 %32, 0
  br i1 %33, label %34, label %141

34:                                               ; preds = %31
  %35 = load ptr, ptr %16, align 8, !tbaa !16
  %36 = tail call i32 @recog(ptr noundef %35, ptr noundef nonnull %11, ptr noundef null) #30
  store i32 %36, ptr %12, align 8, !tbaa !16
  %37 = icmp sgt i32 %36, -1
  br i1 %37, label %141, label %38

38:                                               ; preds = %34
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 26794, ptr noundef nonnull @.str.131) #30
  br label %141

39:                                               ; preds = %4
  %40 = icmp eq i8 %0, 0
  br i1 %40, label %141, label %41

41:                                               ; preds = %39
  %42 = load i32, ptr @ix86_isa_flags, align 4, !tbaa !20
  %43 = and i32 %42, 65538
  %44 = icmp eq i32 %43, 0
  br i1 %44, label %87, label %45

45:                                               ; preds = %41
  %46 = load ptr, ptr @rtl_hooks, align 8, !tbaa !187
  %47 = tail call ptr %46(i32 noundef 16, ptr noundef %3) #30
  %48 = tail call ptr @gen_rtx_fmt_e_stat(i32 noundef 100, i32 noundef 15, ptr noundef %47) #30
  %49 = tail call ptr @gen_rtx_fmt_e_stat(i32 noundef 126, i32 noundef 60, ptr noundef %48) #30
  %50 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 23, i32 noundef 0, ptr noundef %2, ptr noundef %49) #30
  %51 = tail call ptr @emit_insn(ptr noundef %50) #30
  br label %141

52:                                               ; preds = %4
  %53 = icmp eq i8 %0, 0
  br i1 %53, label %141, label %87

54:                                               ; preds = %4
  %55 = load i32, ptr @ix86_isa_flags, align 4, !tbaa !20
  %56 = and i32 %55, 131072
  %57 = icmp eq i32 %56, 0
  br i1 %57, label %87, label %58

58:                                               ; preds = %83, %54
  %59 = getelementptr inbounds i8, ptr %5, i64 24
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(48) %59, i8 0, i64 24, i1 false)
  store ptr %2, ptr %5, align 8, !tbaa !291
  %60 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %5, i64 0, i32 4
  store i32 %1, ptr %60, align 8, !tbaa !293
  %61 = zext i32 %1 to i64
  %62 = getelementptr inbounds [87 x i8], ptr @mode_nunits, i64 0, i64 %61
  %63 = load i8, ptr %62, align 1, !tbaa !16
  %64 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %5, i64 0, i32 5
  store i8 %63, ptr %64, align 4, !tbaa !294
  %65 = tail call ptr @gen_reg_rtx(i32 noundef %1) #30
  %66 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %5, i64 0, i32 2
  store ptr %65, ptr %66, align 8, !tbaa !295
  %67 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %5, i64 0, i32 1
  store ptr %65, ptr %67, align 8, !tbaa !296
  %68 = tail call ptr @gen_reg_rtx(i32 noundef 16) #30
  %69 = load ptr, ptr @rtl_hooks, align 8, !tbaa !187
  %70 = tail call ptr %69(i32 noundef 16, ptr noundef %3) #30
  %71 = tail call ptr @emit_move_insn(ptr noundef %68, ptr noundef %70) #30
  %72 = load ptr, ptr @rtl_hooks, align 8, !tbaa !187
  %73 = tail call ptr %72(i32 noundef 65, ptr noundef %65) #30
  %74 = load ptr, ptr getelementptr inbounds ([3 x [87 x ptr]], ptr @const_tiny_rtx, i64 0, i64 0, i64 65), align 8, !tbaa !5
  %75 = tail call ptr @gen_vec_setv4si_0(ptr noundef %73, ptr noundef %74, ptr noundef %68) #30
  %76 = tail call ptr @emit_insn(ptr noundef %75) #30
  %77 = call fastcc zeroext i8 @expand_vec_perm_1(ptr noundef nonnull %5), !range !66
  %78 = icmp eq i8 %77, 0
  br i1 %78, label %79, label %141

79:                                               ; preds = %58
  %80 = call fastcc zeroext i8 @expand_vec_perm_broadcast_1(ptr noundef nonnull %5), !range !66
  %81 = icmp eq i8 %80, 0
  br i1 %81, label %82, label %141

82:                                               ; preds = %79
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 26842, ptr noundef nonnull @.str.131) #30
  br label %141

83:                                               ; preds = %4
  %84 = load i32, ptr @ix86_isa_flags, align 4, !tbaa !20
  %85 = and i32 %84, 131072
  %86 = icmp eq i32 %85, 0
  br i1 %86, label %87, label %58

87:                                               ; preds = %41, %83, %54, %52
  %88 = zext i32 %1 to i64
  %89 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %88
  %90 = load i8, ptr %89, align 1, !tbaa !16
  %91 = zext i8 %90 to i32
  %92 = getelementptr inbounds [87 x i8], ptr @mode_wider, i64 0, i64 %88
  %93 = load i8, ptr %92, align 1, !tbaa !16
  %94 = getelementptr inbounds [87 x i8], ptr @mode_nunits, i64 0, i64 %88
  %95 = load i8, ptr %94, align 1, !tbaa !16
  %96 = zext i8 %95 to i32
  %97 = zext i8 %93 to i64
  %98 = getelementptr inbounds [87 x i8], ptr @mode_nunits, i64 0, i64 %97
  %99 = load i8, ptr %98, align 1, !tbaa !16
  %100 = zext i8 %99 to i32
  %101 = shl nuw nsw i32 %100, 1
  %102 = icmp eq i32 %101, %96
  br i1 %102, label %104, label %103

103:                                              ; preds = %87
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 26745, ptr noundef nonnull @.str.131) #30
  br label %104

104:                                              ; preds = %103, %87
  %105 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %88
  %106 = load i8, ptr %105, align 1, !tbaa !16
  %107 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %97
  %108 = load i8, ptr %107, align 1, !tbaa !16
  %109 = icmp eq i8 %106, %108
  br i1 %109, label %111, label %110

110:                                              ; preds = %104
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 26746, ptr noundef nonnull @.str.131) #30
  br label %111

111:                                              ; preds = %104, %110
  %112 = zext i8 %93 to i32
  %113 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %97
  %114 = load i8, ptr %113, align 1, !tbaa !16
  %115 = zext i8 %114 to i32
  %116 = tail call ptr @convert_modes(i32 noundef %115, i32 noundef %91, ptr noundef %3, i32 noundef 1) #30
  %117 = zext i8 %90 to i64
  %118 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %117
  %119 = load i8, ptr %118, align 1, !tbaa !16
  %120 = zext i8 %119 to i64
  %121 = shl nuw nsw i64 %120, 3
  %122 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef %121) #30
  %123 = tail call ptr @expand_simple_binop(i32 noundef %115, i32 noundef 65, ptr noundef %116, ptr noundef %122, ptr noundef null, i32 noundef 1, i32 noundef 3) #30
  %124 = tail call ptr @expand_simple_binop(i32 noundef %115, i32 noundef 62, ptr noundef %116, ptr noundef %123, ptr noundef %123, i32 noundef 1, i32 noundef 3) #30
  %125 = load ptr, ptr @rtl_hooks, align 8, !tbaa !187
  %126 = tail call ptr %125(i32 noundef %112, ptr noundef %2) #30
  %127 = tail call fastcc zeroext i8 @ix86_expand_vector_init_duplicate(i8 noundef zeroext %0, i32 noundef %112, ptr noundef %126, ptr noundef %124), !range !66
  %128 = icmp eq i8 %127, 0
  br i1 %128, label %129, label %141

129:                                              ; preds = %111
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 26870, ptr noundef nonnull @.str.131) #30
  br label %141

130:                                              ; preds = %4, %4
  %131 = icmp eq i32 %1, 69
  %132 = select i1 %131, i32 64, i32 63
  %133 = tail call ptr @gen_reg_rtx(i32 noundef %132) #30
  %134 = tail call fastcc zeroext i8 @ix86_expand_vector_init_duplicate(i8 noundef zeroext 0, i32 noundef %132, ptr noundef %133, ptr noundef %3), !range !66
  %135 = icmp eq i8 %134, 0
  br i1 %135, label %136, label %137

136:                                              ; preds = %130
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 26881, ptr noundef nonnull @.str.131) #30
  br label %137

137:                                              ; preds = %130, %136
  %138 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 125, i32 noundef %1, ptr noundef %133, ptr noundef %133) #30
  %139 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 23, i32 noundef 0, ptr noundef %2, ptr noundef %138) #30
  %140 = tail call ptr @emit_insn(ptr noundef %139) #30
  br label %141

141:                                              ; preds = %58, %31, %8, %4, %129, %111, %82, %79, %52, %39, %15, %34, %38, %6, %137, %45
  %142 = phi i8 [ 1, %137 ], [ 1, %45 ], [ 0, %6 ], [ 1, %38 ], [ 1, %34 ], [ 1, %15 ], [ 0, %39 ], [ 0, %52 ], [ 1, %79 ], [ 0, %82 ], [ 1, %111 ], [ 0, %129 ], [ 0, %4 ], [ 1, %8 ], [ 1, %31 ], [ 1, %58 ]
  ret i8 %142
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc void @ix86_expand_vector_init_general(i8 noundef zeroext %0, i32 noundef %1, ptr noundef %2, ptr nocapture noundef readonly %3) unnamed_addr #9 {
  %5 = alloca [32 x ptr], align 16
  %6 = alloca [32 x ptr], align 16
  %7 = alloca [4 x ptr], align 16
  call void @llvm.lifetime.start.p0(i64 256, ptr nonnull %6) #30
  switch i32 %1, label %78 [
    i32 78, label %10
    i32 61, label %10
    i32 81, label %16
    i32 70, label %16
    i32 82, label %16
    i32 71, label %16
    i32 79, label %16
    i32 65, label %16
    i32 80, label %16
    i32 66, label %16
    i32 68, label %30
    i32 69, label %29
    i32 63, label %53
    i32 64, label %8
    i32 60, label %79
    i32 59, label %79
  ]

8:                                                ; preds = %4
  %9 = load i32, ptr @ix86_isa_flags, align 4, !tbaa !20
  br label %57

10:                                               ; preds = %4, %4
  %11 = icmp eq i8 %0, 0
  br i1 %11, label %12, label %16

12:                                               ; preds = %10
  %13 = load i32, ptr @ix86_isa_flags, align 4, !tbaa !20
  %14 = and i32 %13, 65536
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %79, label %16

16:                                               ; preds = %10, %12, %4, %4, %4, %4, %4, %4, %4, %4
  %17 = zext i32 %1 to i64
  %18 = getelementptr inbounds [87 x i8], ptr @mode_nunits, i64 0, i64 %17
  %19 = load i8, ptr %18, align 1, !tbaa !16
  %20 = zext i8 %19 to i32
  %21 = icmp eq i8 %19, 0
  br i1 %21, label %28, label %22

22:                                               ; preds = %16
  %23 = getelementptr inbounds %struct.rtx_def, ptr %3, i64 0, i32 1
  %24 = load ptr, ptr %23, align 8, !tbaa !16
  %25 = getelementptr i8, ptr %24, i64 8
  %26 = zext i8 %19 to i64
  %27 = shl nuw nsw i64 %26, 3
  call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 16 %6, ptr align 8 %25, i64 %27, i1 false), !tbaa !5
  br label %28

28:                                               ; preds = %22, %16
  call fastcc void @ix86_expand_vector_init_concat(i32 noundef %1, ptr noundef %2, ptr noundef nonnull %6, i32 noundef %20)
  br label %186

29:                                               ; preds = %4
  br label %30

30:                                               ; preds = %4, %29
  %31 = phi i32 [ 64, %29 ], [ 63, %4 ]
  %32 = zext i32 %1 to i64
  %33 = getelementptr inbounds [87 x i8], ptr @mode_nunits, i64 0, i64 %32
  %34 = load i8, ptr %33, align 1, !tbaa !16
  %35 = zext i8 %34 to i32
  %36 = icmp eq i8 %34, 0
  br i1 %36, label %43, label %37

37:                                               ; preds = %30
  %38 = getelementptr inbounds %struct.rtx_def, ptr %3, i64 0, i32 1
  %39 = load ptr, ptr %38, align 8, !tbaa !16
  %40 = getelementptr i8, ptr %39, i64 8
  %41 = zext i8 %34 to i64
  %42 = shl nuw nsw i64 %41, 3
  call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 16 %6, ptr align 8 %40, i64 %42, i1 false), !tbaa !5
  br label %43

43:                                               ; preds = %37, %30
  %44 = tail call ptr @gen_reg_rtx(i32 noundef %31) #30
  %45 = tail call ptr @gen_reg_rtx(i32 noundef %31) #30
  %46 = lshr i32 %35, 2
  call fastcc void @ix86_expand_vector_init_interleave(i32 noundef %31, ptr noundef %44, ptr noundef nonnull %6, i32 noundef %46)
  %47 = lshr i32 %35, 1
  %48 = zext i32 %47 to i64
  %49 = getelementptr inbounds [32 x ptr], ptr %6, i64 0, i64 %48
  call fastcc void @ix86_expand_vector_init_interleave(i32 noundef %31, ptr noundef %45, ptr noundef nonnull %49, i32 noundef %46)
  %50 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 125, i32 noundef %1, ptr noundef %44, ptr noundef %45) #30
  %51 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 23, i32 noundef 0, ptr noundef %2, ptr noundef %50) #30
  %52 = tail call ptr @emit_insn(ptr noundef %51) #30
  br label %186

53:                                               ; preds = %4
  %54 = load i32, ptr @ix86_isa_flags, align 4, !tbaa !20
  %55 = and i32 %54, 524288
  %56 = icmp eq i32 %55, 0
  br i1 %56, label %79, label %57

57:                                               ; preds = %8, %53
  %58 = phi i32 [ %9, %8 ], [ %54, %53 ]
  %59 = and i32 %58, 131072
  %60 = icmp ne i32 %59, 0
  %61 = load i8, ptr getelementptr inbounds ([62 x i8], ptr @ix86_tune_features, i64 0, i64 42), align 2
  %62 = icmp ne i8 %61, 0
  %63 = select i1 %60, i1 %62, i1 false
  br i1 %63, label %64, label %79

64:                                               ; preds = %57
  %65 = zext i32 %1 to i64
  %66 = getelementptr inbounds [87 x i8], ptr @mode_nunits, i64 0, i64 %65
  %67 = load i8, ptr %66, align 1, !tbaa !16
  %68 = icmp eq i8 %67, 0
  br i1 %68, label %75, label %69

69:                                               ; preds = %64
  %70 = getelementptr inbounds %struct.rtx_def, ptr %3, i64 0, i32 1
  %71 = load ptr, ptr %70, align 8, !tbaa !16
  %72 = getelementptr i8, ptr %71, i64 8
  %73 = zext i8 %67 to i64
  %74 = shl nuw nsw i64 %73, 3
  call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 16 %6, ptr align 8 %72, i64 %74, i1 false), !tbaa !5
  br label %75

75:                                               ; preds = %69, %64
  %76 = lshr i8 %67, 1
  %77 = zext i8 %76 to i32
  call fastcc void @ix86_expand_vector_init_interleave(i32 noundef %1, ptr noundef %2, ptr noundef nonnull %6, i32 noundef %77)
  br label %186

78:                                               ; preds = %4
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 27463, ptr noundef nonnull @.str.131) #30
  br label %79

79:                                               ; preds = %4, %4, %57, %53, %12, %78
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %7) #30
  %80 = zext i32 %1 to i64
  %81 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %80
  %82 = load i8, ptr %81, align 1, !tbaa !16
  %83 = zext i8 %82 to i32
  %84 = getelementptr inbounds [87 x i8], ptr @mode_nunits, i64 0, i64 %80
  %85 = load i8, ptr %84, align 1, !tbaa !16
  %86 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %80
  %87 = load i8, ptr %86, align 1, !tbaa !16
  %88 = lshr i8 %87, 2
  %89 = zext i8 %88 to i32
  %90 = udiv i8 %85, %88
  %91 = zext i8 %82 to i64
  %92 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %91
  %93 = load i8, ptr %92, align 1, !tbaa !16
  %94 = zext i8 %93 to i64
  %95 = shl nuw nsw i64 %94, 3
  %96 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef %95) #30
  %97 = icmp ult i8 %87, 4
  br i1 %97, label %143, label %98

98:                                               ; preds = %79
  %99 = icmp ugt i8 %88, %85
  %100 = getelementptr inbounds %struct.rtx_def, ptr %3, i64 0, i32 1
  br i1 %99, label %108, label %101

101:                                              ; preds = %98
  %102 = zext i8 %90 to i64
  %103 = tail call i32 @llvm.umax.i32(i32 %89, i32 1)
  %104 = zext i32 %103 to i64
  %105 = tail call i8 @llvm.umax.i8(i8 %90, i8 1)
  %106 = zext i8 %105 to i64
  %107 = icmp ult i8 %90, 2
  br label %113

108:                                              ; preds = %98
  %109 = add nsw i32 %89, -1
  %110 = zext i32 %109 to i64
  %111 = shl nuw nsw i64 %110, 3
  %112 = add nuw nsw i64 %111, 8
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 16 dereferenceable(1) %7, i8 0, i64 %112, i1 false), !tbaa !5
  br label %143

113:                                              ; preds = %139, %101
  %114 = phi i64 [ 0, %101 ], [ %115, %139 ]
  %115 = add nuw nsw i64 %114, 1
  %116 = mul nuw nsw i64 %115, %102
  %117 = load ptr, ptr %100, align 8, !tbaa !16
  %118 = add nsw i64 %116, -1
  %119 = getelementptr inbounds %struct.rtvec_def, ptr %117, i64 0, i32 1, i64 %118
  %120 = load ptr, ptr %119, align 8, !tbaa !5
  %121 = load i32, ptr @word_mode, align 4, !tbaa !16
  %122 = tail call ptr @convert_modes(i32 noundef %121, i32 noundef %83, ptr noundef %120, i32 noundef 1) #30
  br i1 %107, label %139, label %123

123:                                              ; preds = %113, %123
  %124 = phi i64 [ %137, %123 ], [ 1, %113 ]
  %125 = phi ptr [ %136, %123 ], [ %122, %113 ]
  %126 = load ptr, ptr %100, align 8, !tbaa !16
  %127 = xor i64 %124, -1
  %128 = add nsw i64 %116, %127
  %129 = getelementptr inbounds %struct.rtvec_def, ptr %126, i64 0, i32 1, i64 %128
  %130 = load ptr, ptr %129, align 8, !tbaa !5
  %131 = load i32, ptr @word_mode, align 4, !tbaa !16
  %132 = tail call ptr @convert_modes(i32 noundef %131, i32 noundef %83, ptr noundef %130, i32 noundef 1) #30
  %133 = load i32, ptr @word_mode, align 4, !tbaa !16
  %134 = tail call ptr @expand_simple_binop(i32 noundef %133, i32 noundef 65, ptr noundef %125, ptr noundef %96, ptr noundef %125, i32 noundef 1, i32 noundef 3) #30
  %135 = load i32, ptr @word_mode, align 4, !tbaa !16
  %136 = tail call ptr @expand_simple_binop(i32 noundef %135, i32 noundef 62, ptr noundef %134, ptr noundef %132, ptr noundef %134, i32 noundef 1, i32 noundef 3) #30
  %137 = add nuw nsw i64 %124, 1
  %138 = icmp eq i64 %137, %106
  br i1 %138, label %139, label %123, !llvm.loop !297

139:                                              ; preds = %123, %113
  %140 = phi ptr [ %122, %113 ], [ %136, %123 ]
  %141 = getelementptr inbounds [4 x ptr], ptr %7, i64 0, i64 %114
  store ptr %140, ptr %141, align 8, !tbaa !5
  %142 = icmp eq i64 %115, %104
  br i1 %142, label %143, label %113, !llvm.loop !298

143:                                              ; preds = %139, %108, %79
  switch i8 %88, label %184 [
    i8 1, label %144
    i8 2, label %149
    i8 4, label %163
  ]

144:                                              ; preds = %143
  %145 = load ptr, ptr @rtl_hooks, align 8, !tbaa !187
  %146 = load ptr, ptr %7, align 16, !tbaa !5
  %147 = tail call ptr %145(i32 noundef %1, ptr noundef %146) #30
  %148 = tail call ptr @emit_move_insn(ptr noundef %2, ptr noundef %147) #30
  br label %185

149:                                              ; preds = %143
  %150 = tail call ptr @gen_reg_rtx(i32 noundef %1) #30
  %151 = tail call ptr @emit_clobber(ptr noundef %150) #30
  %152 = load ptr, ptr @rtl_hooks, align 8, !tbaa !187
  %153 = load i32, ptr @word_mode, align 4, !tbaa !16
  %154 = tail call ptr %152(i32 noundef %153, ptr noundef %150) #30
  %155 = load ptr, ptr %7, align 16, !tbaa !5
  %156 = tail call ptr @emit_move_insn(ptr noundef %154, ptr noundef %155) #30
  %157 = load i32, ptr @word_mode, align 4, !tbaa !16
  %158 = tail call ptr @gen_highpart(i32 noundef %157, ptr noundef %150) #30
  %159 = getelementptr inbounds [4 x ptr], ptr %7, i64 0, i64 1
  %160 = load ptr, ptr %159, align 8, !tbaa !5
  %161 = tail call ptr @emit_move_insn(ptr noundef %158, ptr noundef %160) #30
  %162 = tail call ptr @emit_move_insn(ptr noundef %2, ptr noundef %150) #30
  br label %185

163:                                              ; preds = %143
  %164 = tail call ptr @gen_reg_rtx(i32 noundef 65) #30
  %165 = load i32, ptr @word_mode, align 4, !tbaa !16
  %166 = icmp eq i32 %165, 16
  br i1 %166, label %168, label %167

167:                                              ; preds = %163
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 27513, ptr noundef nonnull @.str.131) #30
  br label %168

168:                                              ; preds = %163, %167
  %169 = call ptr @gen_rtvec_v(i32 noundef 4, ptr noundef nonnull %7) #30
  %170 = call ptr @gen_rtx_fmt_E_stat(i32 noundef 15, i32 noundef 65, ptr noundef %169) #30
  call void @llvm.lifetime.start.p0(i64 256, ptr nonnull %5) #30
  %171 = load i8, ptr getelementptr inbounds ([87 x i8], ptr @mode_nunits, i64 0, i64 65), align 1, !tbaa !16
  %172 = zext i8 %171 to i32
  %173 = icmp eq i8 %171, 0
  br i1 %173, label %180, label %174

174:                                              ; preds = %168
  %175 = getelementptr inbounds %struct.rtx_def, ptr %170, i64 0, i32 1
  %176 = load ptr, ptr %175, align 8, !tbaa !16
  %177 = getelementptr i8, ptr %176, i64 8
  %178 = zext i8 %171 to i64
  %179 = shl nuw nsw i64 %178, 3
  call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 16 %5, ptr align 8 %177, i64 %179, i1 false), !tbaa !5
  br label %180

180:                                              ; preds = %174, %168
  call fastcc void @ix86_expand_vector_init_concat(i32 noundef 65, ptr noundef %164, ptr noundef nonnull %5, i32 noundef %172)
  call void @llvm.lifetime.end.p0(i64 256, ptr nonnull %5) #30
  %181 = load ptr, ptr @rtl_hooks, align 8, !tbaa !187
  %182 = call ptr %181(i32 noundef %1, ptr noundef %164) #30
  %183 = call ptr @emit_move_insn(ptr noundef %2, ptr noundef %182) #30
  br label %185

184:                                              ; preds = %143
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 27519, ptr noundef nonnull @.str.131) #30
  br label %185

185:                                              ; preds = %149, %184, %180, %144
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %7) #30
  br label %186

186:                                              ; preds = %185, %75, %43, %28
  call void @llvm.lifetime.end.p0(i64 256, ptr nonnull %6) #30
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define dso_local void @ix86_expand_vector_set(i8 noundef zeroext %0, ptr noundef %1, ptr noundef %2, i32 noundef %3) local_unnamed_addr #9 {
  %5 = alloca [4 x ptr], align 16
  %6 = icmp eq i32 %3, 0
  %7 = load i32, ptr %1, align 8
  %8 = lshr i32 %7, 16
  %9 = trunc i32 %8 to i8
  br i1 %6, label %18, label %10

10:                                               ; preds = %4
  switch i8 %9, label %254 [
    i8 78, label %35
    i8 61, label %35
    i8 66, label %53
    i8 80, label %61
    i8 79, label %85
    i8 65, label %11
    i8 64, label %152
    i8 60, label %165
    i8 63, label %180
    i8 82, label %202
    i8 68, label %205
    i8 69, label %208
    i8 70, label %193
    i8 71, label %196
    i8 81, label %199
  ]

11:                                               ; preds = %10
  %12 = load i32, ptr @ix86_isa_flags, align 4, !tbaa !20
  %13 = and i32 %12, 524288
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %15, label %238

15:                                               ; preds = %11
  %16 = and i32 %12, 131072
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %19, label %133

18:                                               ; preds = %4
  switch i8 %9, label %254 [
    i8 78, label %35
    i8 61, label %35
    i8 66, label %53
    i8 80, label %61
    i8 79, label %85
    i8 65, label %238
    i8 64, label %152
    i8 60, label %165
    i8 63, label %180
    i8 82, label %202
    i8 68, label %205
    i8 69, label %208
    i8 70, label %193
    i8 71, label %196
    i8 81, label %199
  ]

19:                                               ; preds = %15, %130
  %20 = phi ptr [ %23, %130 ], [ %1, %15 ]
  %21 = phi ptr [ %25, %130 ], [ %2, %15 ]
  %22 = load ptr, ptr @rtl_hooks, align 8, !tbaa !187
  %23 = tail call ptr %22(i32 noundef 79, ptr noundef nonnull %20) #30
  %24 = load ptr, ptr @rtl_hooks, align 8, !tbaa !187
  %25 = tail call ptr %24(i32 noundef 38, ptr noundef %21) #30
  %26 = load i32, ptr %23, align 8
  %27 = lshr i32 %26, 16
  %28 = trunc i32 %27 to i8
  switch i8 %28, label %254 [
    i8 78, label %29
    i8 61, label %29
    i8 66, label %53
    i8 80, label %61
    i8 79, label %85
    i8 65, label %126
    i8 64, label %152
    i8 60, label %165
    i8 63, label %180
    i8 82, label %202
    i8 68, label %205
    i8 69, label %208
    i8 70, label %193
    i8 71, label %196
    i8 81, label %199
  ]

29:                                               ; preds = %19, %19
  %30 = and i32 %27, 255
  %31 = zext i32 %30 to i64
  %32 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %31
  %33 = load i8, ptr %32, align 1, !tbaa !16
  %34 = zext i8 %33 to i32
  br label %263

35:                                               ; preds = %10, %10, %18, %18
  %36 = and i32 %8, 255
  %37 = zext i32 %36 to i64
  %38 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %37
  %39 = load i8, ptr %38, align 1, !tbaa !16
  %40 = zext i8 %39 to i32
  %41 = icmp eq i8 %0, 0
  br i1 %41, label %263, label %42

42:                                               ; preds = %35
  %43 = tail call ptr @gen_reg_rtx(i32 noundef %40) #30
  %44 = sub nsw i32 1, %3
  tail call void @ix86_expand_vector_extract(i8 noundef zeroext 1, ptr noundef %43, ptr noundef nonnull %1, i32 noundef %44)
  br i1 %6, label %45, label %47

45:                                               ; preds = %42
  %46 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 125, i32 noundef %36, ptr noundef %43, ptr noundef %2) #30
  br label %49

47:                                               ; preds = %42
  %48 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 125, i32 noundef %36, ptr noundef %2, ptr noundef %43) #30
  br label %49

49:                                               ; preds = %47, %45
  %50 = phi ptr [ %46, %45 ], [ %48, %47 ]
  %51 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 23, i32 noundef 0, ptr noundef nonnull %1, ptr noundef %50) #30
  %52 = tail call ptr @emit_insn(ptr noundef %51) #30
  br label %98

53:                                               ; preds = %19, %10, %18
  %54 = phi i32 [ %8, %18 ], [ %8, %10 ], [ %27, %19 ]
  %55 = phi ptr [ %1, %18 ], [ %1, %10 ], [ %23, %19 ]
  %56 = phi ptr [ %2, %18 ], [ %2, %10 ], [ %25, %19 ]
  %57 = and i32 %54, 255
  %58 = load i32, ptr @ix86_isa_flags, align 4, !tbaa !20
  %59 = and i32 %58, 524288
  %60 = icmp eq i32 %59, 0
  br i1 %60, label %66, label %243

61:                                               ; preds = %19, %10, %18
  %62 = phi i32 [ %8, %18 ], [ %8, %10 ], [ %27, %19 ]
  %63 = phi ptr [ %1, %18 ], [ %1, %10 ], [ %23, %19 ]
  %64 = phi ptr [ %2, %18 ], [ %2, %10 ], [ %25, %19 ]
  %65 = and i32 %62, 255
  br label %66

66:                                               ; preds = %61, %53
  %67 = phi ptr [ %63, %61 ], [ %55, %53 ]
  %68 = phi ptr [ %64, %61 ], [ %56, %53 ]
  %69 = phi i32 [ %65, %61 ], [ %57, %53 ]
  %70 = zext i32 %69 to i64
  %71 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %70
  %72 = load i8, ptr %71, align 1, !tbaa !16
  %73 = zext i8 %72 to i32
  %74 = sub nsw i32 1, %3
  %75 = sext i32 %74 to i64
  %76 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef %75) #30
  %77 = tail call ptr (i32, ...) @gen_rtvec(i32 noundef 1, ptr noundef %76) #30
  %78 = tail call ptr @gen_rtx_fmt_E_stat(i32 noundef 15, i32 noundef 0, ptr noundef %77) #30
  %79 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 124, i32 noundef %73, ptr noundef nonnull %67, ptr noundef %78) #30
  %80 = select i1 %6, ptr %68, ptr %79
  %81 = select i1 %6, ptr %79, ptr %68
  %82 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 125, i32 noundef %69, ptr noundef %80, ptr noundef %81) #30
  %83 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 23, i32 noundef 0, ptr noundef nonnull %67, ptr noundef %82) #30
  %84 = tail call ptr @emit_insn(ptr noundef %83) #30
  br label %98

85:                                               ; preds = %19, %10, %18
  %86 = phi i32 [ %8, %18 ], [ %8, %10 ], [ %27, %19 ]
  %87 = phi ptr [ %1, %18 ], [ %1, %10 ], [ %23, %19 ]
  %88 = phi ptr [ %2, %18 ], [ %2, %10 ], [ %25, %19 ]
  %89 = and i32 %86, 255
  %90 = zext i32 %89 to i64
  %91 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %90
  %92 = load i8, ptr %91, align 1, !tbaa !16
  %93 = zext i8 %92 to i32
  %94 = load i32, ptr @ix86_isa_flags, align 4, !tbaa !20
  %95 = and i32 %94, 524288
  %96 = icmp eq i32 %95, 0
  br i1 %96, label %97, label %243

97:                                               ; preds = %85
  switch i32 %3, label %125 [
    i32 0, label %243
    i32 1, label %99
    i32 2, label %109
    i32 3, label %117
  ]

98:                                               ; preds = %243, %263, %66, %49, %218, %133, %117, %109, %99
  ret void

99:                                               ; preds = %97
  %100 = tail call ptr @copy_to_reg(ptr noundef nonnull %87) #30
  %101 = tail call ptr @gen_vec_interleave_lowv4sf(ptr noundef nonnull %87, ptr noundef nonnull %87, ptr noundef nonnull %87) #30
  %102 = tail call ptr @emit_insn(ptr noundef %101) #30
  tail call void @ix86_expand_vector_set(i8 noundef zeroext 0, ptr noundef nonnull %87, ptr noundef %88, i32 noundef 0)
  %103 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 65), align 8, !tbaa !5
  %104 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 64), align 16, !tbaa !5
  %105 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef 6) #30
  %106 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef 7) #30
  %107 = tail call ptr @gen_sse_shufps_v4sf(ptr noundef nonnull %87, ptr noundef nonnull %87, ptr noundef %100, ptr noundef %103, ptr noundef %104, ptr noundef %105, ptr noundef %106) #30
  %108 = tail call ptr @emit_insn(ptr noundef %107) #30
  br label %98

109:                                              ; preds = %97
  %110 = tail call ptr @copy_to_reg(ptr noundef nonnull %87) #30
  tail call void @ix86_expand_vector_set(i8 noundef zeroext 0, ptr noundef %110, ptr noundef %88, i32 noundef 0)
  %111 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 64), align 16, !tbaa !5
  %112 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 65), align 8, !tbaa !5
  %113 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef 4) #30
  %114 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef 7) #30
  %115 = tail call ptr @gen_sse_shufps_v4sf(ptr noundef nonnull %87, ptr noundef nonnull %87, ptr noundef %110, ptr noundef %111, ptr noundef %112, ptr noundef %113, ptr noundef %114) #30
  %116 = tail call ptr @emit_insn(ptr noundef %115) #30
  br label %98

117:                                              ; preds = %97
  %118 = tail call ptr @copy_to_reg(ptr noundef nonnull %87) #30
  tail call void @ix86_expand_vector_set(i8 noundef zeroext 0, ptr noundef %118, ptr noundef %88, i32 noundef 0)
  %119 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 64), align 16, !tbaa !5
  %120 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 65), align 8, !tbaa !5
  %121 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef 6) #30
  %122 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef 4) #30
  %123 = tail call ptr @gen_sse_shufps_v4sf(ptr noundef nonnull %87, ptr noundef nonnull %87, ptr noundef %118, ptr noundef %119, ptr noundef %120, ptr noundef %121, ptr noundef %122) #30
  %124 = tail call ptr @emit_insn(ptr noundef %123) #30
  br label %98

125:                                              ; preds = %97
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 27697, ptr noundef nonnull @.str.131) #30
  br label %263

126:                                              ; preds = %19
  %127 = load i32, ptr @ix86_isa_flags, align 4, !tbaa !20
  %128 = and i32 %127, 524288
  %129 = icmp eq i32 %128, 0
  br i1 %129, label %130, label %238

130:                                              ; preds = %126
  %131 = and i32 %127, 131072
  %132 = icmp eq i32 %131, 0
  br i1 %132, label %19, label %133, !llvm.loop !299

133:                                              ; preds = %130, %15
  %134 = phi ptr [ %1, %15 ], [ %23, %130 ]
  %135 = phi ptr [ %2, %15 ], [ %25, %130 ]
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %5) #30
  %136 = sext i32 %3 to i64
  %137 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef %136) #30
  %138 = getelementptr inbounds [4 x ptr], ptr %5, i64 0, i64 1
  %139 = getelementptr inbounds [4 x ptr], ptr %5, i64 0, i64 2
  %140 = load <2 x ptr>, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 65), align 8, !tbaa !5
  store <2 x ptr> %140, ptr %138, align 8, !tbaa !5
  %141 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef 3) #30
  %142 = getelementptr inbounds [4 x ptr], ptr %5, i64 0, i64 3
  store ptr %141, ptr %142, align 8, !tbaa !5
  %143 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 64), align 16, !tbaa !5
  %144 = getelementptr inbounds [4 x ptr], ptr %5, i64 0, i64 %136
  store ptr %143, ptr %144, align 8, !tbaa !5
  %145 = load ptr, ptr %138, align 8, !tbaa !5
  %146 = load ptr, ptr %139, align 16, !tbaa !5
  %147 = load ptr, ptr %142, align 8, !tbaa !5
  %148 = tail call ptr @gen_sse2_pshufd_1(ptr noundef nonnull %134, ptr noundef nonnull %134, ptr noundef %137, ptr noundef %145, ptr noundef %146, ptr noundef %147) #30
  %149 = tail call ptr @emit_insn(ptr noundef %148) #30
  tail call void @ix86_expand_vector_set(i8 noundef zeroext 0, ptr noundef nonnull %134, ptr noundef %135, i32 noundef 0)
  %150 = tail call ptr @gen_sse2_pshufd_1(ptr noundef nonnull %134, ptr noundef nonnull %134, ptr noundef %137, ptr noundef %145, ptr noundef %146, ptr noundef %147) #30
  %151 = tail call ptr @emit_insn(ptr noundef %150) #30
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %5) #30
  br label %98

152:                                              ; preds = %19, %10, %18
  %153 = phi i32 [ %8, %18 ], [ %8, %10 ], [ %27, %19 ]
  %154 = phi ptr [ %1, %18 ], [ %1, %10 ], [ %23, %19 ]
  %155 = phi ptr [ %2, %18 ], [ %2, %10 ], [ %25, %19 ]
  %156 = and i32 %153, 255
  %157 = zext i32 %156 to i64
  %158 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %157
  %159 = load i8, ptr %158, align 1, !tbaa !16
  %160 = zext i8 %159 to i32
  %161 = load i32, ptr @ix86_isa_flags, align 4, !tbaa !20
  %162 = lshr i32 %161, 17
  %163 = trunc i32 %162 to i8
  %164 = and i8 %163, 1
  br label %229

165:                                              ; preds = %19, %10, %18
  %166 = phi i32 [ %8, %18 ], [ %8, %10 ], [ %27, %19 ]
  %167 = phi i8 [ %0, %18 ], [ %0, %10 ], [ 0, %19 ]
  %168 = phi ptr [ %1, %18 ], [ %1, %10 ], [ %23, %19 ]
  %169 = phi ptr [ %2, %18 ], [ %2, %10 ], [ %25, %19 ]
  %170 = and i32 %166, 255
  %171 = zext i32 %170 to i64
  %172 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %171
  %173 = load i8, ptr %172, align 1, !tbaa !16
  %174 = zext i8 %173 to i32
  %175 = icmp eq i8 %167, 0
  %176 = load i32, ptr @ix86_isa_flags, align 4
  %177 = and i32 %176, 65538
  %178 = icmp ne i32 %177, 0
  %179 = zext i1 %178 to i8
  br i1 %175, label %263, label %229

180:                                              ; preds = %19, %10, %18
  %181 = phi i32 [ %8, %18 ], [ %8, %10 ], [ %27, %19 ]
  %182 = phi ptr [ %1, %18 ], [ %1, %10 ], [ %23, %19 ]
  %183 = phi ptr [ %2, %18 ], [ %2, %10 ], [ %25, %19 ]
  %184 = and i32 %181, 255
  %185 = zext i32 %184 to i64
  %186 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %185
  %187 = load i8, ptr %186, align 1, !tbaa !16
  %188 = zext i8 %187 to i32
  %189 = load i32, ptr @ix86_isa_flags, align 4, !tbaa !20
  %190 = lshr i32 %189, 19
  %191 = trunc i32 %190 to i8
  %192 = and i8 %191, 1
  br label %229

193:                                              ; preds = %19, %10, %18
  %194 = phi ptr [ %1, %18 ], [ %1, %10 ], [ %23, %19 ]
  %195 = phi ptr [ %2, %18 ], [ %2, %10 ], [ %25, %19 ]
  br label %208

196:                                              ; preds = %19, %10, %18
  %197 = phi ptr [ %1, %18 ], [ %1, %10 ], [ %23, %19 ]
  %198 = phi ptr [ %2, %18 ], [ %2, %10 ], [ %25, %19 ]
  br label %208

199:                                              ; preds = %19, %10, %18
  %200 = phi ptr [ %1, %18 ], [ %1, %10 ], [ %23, %19 ]
  %201 = phi ptr [ %2, %18 ], [ %2, %10 ], [ %25, %19 ]
  br label %208

202:                                              ; preds = %19, %10, %18
  %203 = phi ptr [ %1, %18 ], [ %1, %10 ], [ %23, %19 ]
  %204 = phi ptr [ %2, %18 ], [ %2, %10 ], [ %25, %19 ]
  br label %208

205:                                              ; preds = %19, %10, %18
  %206 = phi ptr [ %1, %18 ], [ %1, %10 ], [ %23, %19 ]
  %207 = phi ptr [ %2, %18 ], [ %2, %10 ], [ %25, %19 ]
  br label %208

208:                                              ; preds = %19, %10, %18, %205, %202, %199, %196, %193
  %209 = phi ptr [ %200, %199 ], [ %197, %196 ], [ %194, %193 ], [ %203, %202 ], [ %206, %205 ], [ %1, %18 ], [ %1, %10 ], [ %23, %19 ]
  %210 = phi ptr [ %201, %199 ], [ %198, %196 ], [ %195, %193 ], [ %204, %202 ], [ %207, %205 ], [ %2, %18 ], [ %2, %10 ], [ %25, %19 ]
  %211 = phi i32 [ 79, %199 ], [ 66, %196 ], [ 65, %193 ], [ 80, %202 ], [ 63, %205 ], [ 64, %18 ], [ 64, %10 ], [ 64, %19 ]
  %212 = phi i64 [ 4, %199 ], [ 3, %196 ], [ 2, %193 ], [ 5, %202 ], [ 0, %205 ], [ 1, %18 ], [ 1, %10 ], [ 1, %19 ]
  %213 = phi i32 [ 4, %199 ], [ 2, %196 ], [ 4, %193 ], [ 2, %202 ], [ 16, %205 ], [ 8, %18 ], [ 8, %10 ], [ 8, %19 ]
  %214 = sdiv i32 %3, %213
  %215 = srem i32 %3, %213
  %216 = icmp slt i32 %214, 2
  br i1 %216, label %218, label %217

217:                                              ; preds = %208
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 27797, ptr noundef nonnull @.str.131) #30
  br label %218

218:                                              ; preds = %208, %217
  %219 = tail call ptr @gen_reg_rtx(i32 noundef %211) #30
  %220 = sext i32 %214 to i64
  %221 = getelementptr inbounds [6 x [2 x ptr]], ptr @ix86_expand_vector_set.gen_extract, i64 0, i64 %212, i64 %220
  %222 = load ptr, ptr %221, align 8, !tbaa !5
  %223 = tail call ptr %222(ptr noundef %219, ptr noundef nonnull %209) #30
  %224 = tail call ptr @emit_insn(ptr noundef %223) #30
  tail call void @ix86_expand_vector_set(i8 noundef zeroext 0, ptr noundef %219, ptr noundef %210, i32 noundef %215)
  %225 = getelementptr inbounds [6 x [2 x ptr]], ptr @ix86_expand_vector_set.gen_insert, i64 0, i64 %212, i64 %220
  %226 = load ptr, ptr %225, align 8, !tbaa !5
  %227 = tail call ptr %226(ptr noundef nonnull %209, ptr noundef nonnull %209, ptr noundef %219) #30
  %228 = tail call ptr @emit_insn(ptr noundef %227) #30
  br label %98

229:                                              ; preds = %165, %180, %152
  %230 = phi ptr [ %182, %180 ], [ %168, %165 ], [ %154, %152 ]
  %231 = phi ptr [ %183, %180 ], [ %169, %165 ], [ %155, %152 ]
  %232 = phi i32 [ %184, %180 ], [ %170, %165 ], [ %156, %152 ]
  %233 = phi i64 [ %185, %180 ], [ %171, %165 ], [ %157, %152 ]
  %234 = phi i8 [ %187, %180 ], [ %173, %165 ], [ %159, %152 ]
  %235 = phi i32 [ %188, %180 ], [ %174, %165 ], [ %160, %152 ]
  %236 = phi i8 [ %192, %180 ], [ %179, %165 ], [ %164, %152 ]
  %237 = icmp eq i8 %236, 0
  br i1 %237, label %263, label %243

238:                                              ; preds = %126, %11, %18
  %239 = phi i32 [ %8, %18 ], [ %8, %11 ], [ %27, %126 ]
  %240 = phi ptr [ %1, %18 ], [ %1, %11 ], [ %23, %126 ]
  %241 = phi ptr [ %2, %18 ], [ %2, %11 ], [ %25, %126 ]
  %242 = and i32 %239, 255
  br label %243

243:                                              ; preds = %238, %97, %53, %85, %229
  %244 = phi ptr [ %240, %238 ], [ %87, %97 ], [ %55, %53 ], [ %87, %85 ], [ %230, %229 ]
  %245 = phi ptr [ %241, %238 ], [ %88, %97 ], [ %56, %53 ], [ %88, %85 ], [ %231, %229 ]
  %246 = phi i32 [ %242, %238 ], [ %89, %97 ], [ %57, %53 ], [ %89, %85 ], [ %232, %229 ]
  %247 = tail call ptr @gen_rtx_fmt_e_stat(i32 noundef 126, i32 noundef %246, ptr noundef %245) #30
  %248 = shl nuw i32 1, %3
  %249 = sext i32 %248 to i64
  %250 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef %249) #30
  %251 = tail call ptr @gen_rtx_fmt_eee_stat(i32 noundef 123, i32 noundef %246, ptr noundef %247, ptr noundef nonnull %244, ptr noundef %250) #30
  %252 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 23, i32 noundef 0, ptr noundef nonnull %244, ptr noundef %251) #30
  %253 = tail call ptr @emit_insn(ptr noundef %252) #30
  br label %98

254:                                              ; preds = %19, %10, %18
  %255 = phi i32 [ %8, %18 ], [ %8, %10 ], [ %27, %19 ]
  %256 = phi ptr [ %1, %18 ], [ %1, %10 ], [ %23, %19 ]
  %257 = phi ptr [ %2, %18 ], [ %2, %10 ], [ %25, %19 ]
  %258 = and i32 %255, 255
  %259 = zext i32 %258 to i64
  %260 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %259
  %261 = load i8, ptr %260, align 1, !tbaa !16
  %262 = zext i8 %261 to i32
  br label %263

263:                                              ; preds = %29, %254, %165, %35, %125, %229
  %264 = phi ptr [ %256, %254 ], [ %168, %165 ], [ %1, %35 ], [ %87, %125 ], [ %230, %229 ], [ %23, %29 ]
  %265 = phi ptr [ %257, %254 ], [ %169, %165 ], [ %2, %35 ], [ %88, %125 ], [ %231, %229 ], [ %25, %29 ]
  %266 = phi i32 [ %258, %254 ], [ %170, %165 ], [ %36, %35 ], [ %89, %125 ], [ %232, %229 ], [ %30, %29 ]
  %267 = phi i64 [ %259, %254 ], [ %171, %165 ], [ %37, %35 ], [ %90, %125 ], [ %233, %229 ], [ %31, %29 ]
  %268 = phi i8 [ %261, %254 ], [ %173, %165 ], [ %39, %35 ], [ %92, %125 ], [ %234, %229 ], [ %33, %29 ]
  %269 = phi i32 [ %262, %254 ], [ %174, %165 ], [ %40, %35 ], [ %93, %125 ], [ %235, %229 ], [ %34, %29 ]
  %270 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %267
  %271 = load i8, ptr %270, align 1, !tbaa !16
  %272 = zext i8 %271 to i64
  %273 = tail call ptr @assign_stack_temp(i32 noundef %266, i64 noundef %272, i32 noundef 0) #30
  %274 = tail call ptr @emit_move_insn(ptr noundef %273, ptr noundef nonnull %264) #30
  %275 = zext i8 %268 to i64
  %276 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %275
  %277 = load i8, ptr %276, align 1, !tbaa !16
  %278 = zext i8 %277 to i32
  %279 = mul nsw i32 %278, %3
  %280 = sext i32 %279 to i64
  %281 = tail call ptr @adjust_address_1(ptr noundef %273, i32 noundef %269, i64 noundef %280, i32 noundef 1, i32 noundef 1) #30
  %282 = tail call ptr @emit_move_insn(ptr noundef %281, ptr noundef %265) #30
  %283 = tail call ptr @emit_move_insn(ptr noundef nonnull %264, ptr noundef %273) #30
  br label %98
}

declare ptr @gen_vec_extract_lo_v32qi(ptr noundef, ptr noundef) #3

declare ptr @gen_vec_extract_hi_v32qi(ptr noundef, ptr noundef) #3

declare ptr @gen_vec_extract_lo_v16hi(ptr noundef, ptr noundef) #3

declare ptr @gen_vec_extract_hi_v16hi(ptr noundef, ptr noundef) #3

declare ptr @gen_vec_extract_lo_v8si(ptr noundef, ptr noundef) #3

declare ptr @gen_vec_extract_hi_v8si(ptr noundef, ptr noundef) #3

declare ptr @gen_vec_extract_lo_v4di(ptr noundef, ptr noundef) #3

declare ptr @gen_vec_extract_hi_v4di(ptr noundef, ptr noundef) #3

declare ptr @gen_vec_extract_lo_v8sf(ptr noundef, ptr noundef) #3

declare ptr @gen_vec_extract_hi_v8sf(ptr noundef, ptr noundef) #3

declare ptr @gen_vec_extract_lo_v4df(ptr noundef, ptr noundef) #3

declare ptr @gen_vec_extract_hi_v4df(ptr noundef, ptr noundef) #3

declare ptr @gen_vec_set_lo_v32qi(ptr noundef, ptr noundef, ptr noundef) #3

declare ptr @gen_vec_set_hi_v32qi(ptr noundef, ptr noundef, ptr noundef) #3

declare ptr @gen_vec_set_lo_v16hi(ptr noundef, ptr noundef, ptr noundef) #3

declare ptr @gen_vec_set_hi_v16hi(ptr noundef, ptr noundef, ptr noundef) #3

declare ptr @gen_vec_set_lo_v8si(ptr noundef, ptr noundef, ptr noundef) #3

declare ptr @gen_vec_set_hi_v8si(ptr noundef, ptr noundef, ptr noundef) #3

declare ptr @gen_vec_set_lo_v4di(ptr noundef, ptr noundef, ptr noundef) #3

declare ptr @gen_vec_set_hi_v4di(ptr noundef, ptr noundef, ptr noundef) #3

declare ptr @gen_vec_set_lo_v8sf(ptr noundef, ptr noundef, ptr noundef) #3

declare ptr @gen_vec_set_hi_v8sf(ptr noundef, ptr noundef, ptr noundef) #3

declare ptr @gen_vec_set_lo_v4df(ptr noundef, ptr noundef, ptr noundef) #3

declare ptr @gen_vec_set_hi_v4df(ptr noundef, ptr noundef, ptr noundef) #3

declare ptr @copy_to_reg(ptr noundef) local_unnamed_addr #3

declare ptr @gen_vec_interleave_lowv4sf(ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

declare ptr @gen_sse_shufps_v4sf(ptr noundef, ptr noundef, ptr noundef, ptr noundef, ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

declare ptr @gen_sse2_pshufd_1(ptr noundef, ptr noundef, ptr noundef, ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

declare ptr @assign_stack_temp(i32 noundef, i64 noundef, i32 noundef) local_unnamed_addr #3

declare ptr @gen_vec_interleave_highv4sf(ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define dso_local void @ix86_expand_reduc_v4sf(ptr nocapture noundef readonly %0, ptr noundef %1, ptr noundef %2) local_unnamed_addr #9 {
  %4 = tail call ptr @gen_reg_rtx(i32 noundef 79) #30
  %5 = tail call ptr @gen_reg_rtx(i32 noundef 79) #30
  %6 = tail call ptr @gen_reg_rtx(i32 noundef 79) #30
  %7 = tail call ptr @gen_sse_movhlps(ptr noundef %4, ptr noundef %2, ptr noundef %2) #30
  %8 = tail call ptr @emit_insn(ptr noundef %7) #30
  %9 = tail call ptr %0(ptr noundef %5, ptr noundef %4, ptr noundef %2) #30
  %10 = tail call ptr @emit_insn(ptr noundef %9) #30
  %11 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 65), align 8, !tbaa !5
  %12 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef 5) #30
  %13 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef 5) #30
  %14 = tail call ptr @gen_sse_shufps_v4sf(ptr noundef %6, ptr noundef %5, ptr noundef %5, ptr noundef %11, ptr noundef %11, ptr noundef %12, ptr noundef %13) #30
  %15 = tail call ptr @emit_insn(ptr noundef %14) #30
  %16 = tail call ptr %0(ptr noundef %1, ptr noundef %5, ptr noundef %6) #30
  %17 = tail call ptr @emit_insn(ptr noundef %16) #30
  ret void
}

declare ptr @gen_sse_movhlps(ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define dso_local i32 @ix86_reverse_condition(i32 noundef %0, i32 noundef %1) local_unnamed_addr #9 {
  %3 = add i32 %1, -13
  %4 = icmp ult i32 %3, -2
  br i1 %4, label %5, label %7

5:                                                ; preds = %2
  %6 = tail call i32 @reverse_condition(i32 noundef %0) #30
  br label %9

7:                                                ; preds = %2
  %8 = tail call i32 @reverse_condition_maybe_unordered(i32 noundef %0) #30
  br label %9

9:                                                ; preds = %7, %5
  %10 = phi i32 [ %6, %5 ], [ %8, %7 ]
  ret i32 %10
}

; Function Attrs: nounwind sspstrong uwtable
define dso_local nonnull ptr @output_387_reg_move(ptr noundef %0, ptr nocapture noundef readonly %1) local_unnamed_addr #9 {
  %3 = load ptr, ptr %1, align 8, !tbaa !5
  %4 = load i32, ptr %3, align 8
  %5 = trunc i32 %4 to i16
  switch i16 %5, label %58 [
    i16 37, label %6
    i16 43, label %38
  ]

6:                                                ; preds = %2
  %7 = getelementptr inbounds ptr, ptr %1, i64 1
  %8 = load ptr, ptr %7, align 8, !tbaa !5
  %9 = load i32, ptr %8, align 8
  %10 = and i32 %9, 65535
  %11 = icmp eq i32 %10, 37
  br i1 %11, label %12, label %28

12:                                               ; preds = %6
  %13 = getelementptr i8, ptr %8, i64 8
  %14 = load i32, ptr %13, align 8, !tbaa !16
  %15 = tail call ptr @find_regno_note(ptr noundef %0, i32 noundef 1, i32 noundef %14) #30
  %16 = icmp eq ptr %15, null
  %17 = load ptr, ptr %1, align 8, !tbaa !5
  br i1 %16, label %18, label %20

18:                                               ; preds = %12
  %19 = load i32, ptr %17, align 8
  br label %28

20:                                               ; preds = %12
  %21 = getelementptr i8, ptr %17, i64 8
  %22 = load i32, ptr %21, align 8, !tbaa !16
  %23 = icmp eq i32 %22, 8
  br i1 %23, label %24, label %59

24:                                               ; preds = %20
  %25 = load i8, ptr getelementptr inbounds ([62 x i8], ptr @ix86_tune_features, i64 0, i64 41), align 1, !tbaa !16
  %26 = icmp eq i8 %25, 0
  %27 = select i1 %26, ptr @.str.282, ptr @.str.436
  br label %59

28:                                               ; preds = %18, %6
  %29 = phi i32 [ %19, %18 ], [ %4, %6 ]
  %30 = phi ptr [ %17, %18 ], [ %3, %6 ]
  %31 = and i32 %29, 65535
  %32 = icmp eq i32 %31, 37
  br i1 %32, label %33, label %37

33:                                               ; preds = %28
  %34 = getelementptr i8, ptr %30, i64 8
  %35 = load i32, ptr %34, align 8, !tbaa !16
  %36 = icmp eq i32 %35, 8
  br i1 %36, label %59, label %37

37:                                               ; preds = %33, %28
  br label %59

38:                                               ; preds = %2
  %39 = getelementptr inbounds ptr, ptr %1, i64 1
  %40 = load ptr, ptr %39, align 8, !tbaa !5
  %41 = load i32, ptr %40, align 8
  %42 = and i32 %41, 65535
  %43 = icmp eq i32 %42, 37
  br i1 %43, label %46, label %44

44:                                               ; preds = %38
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 28094, ptr noundef nonnull @.str.131) #30
  %45 = load ptr, ptr %39, align 8, !tbaa !5
  br label %46

46:                                               ; preds = %38, %44
  %47 = phi ptr [ %40, %38 ], [ %45, %44 ]
  %48 = getelementptr i8, ptr %47, i64 8
  %49 = load i32, ptr %48, align 8, !tbaa !16
  %50 = tail call ptr @find_regno_note(ptr noundef %0, i32 noundef 1, i32 noundef %49) #30
  %51 = icmp eq ptr %50, null
  br i1 %51, label %52, label %59

52:                                               ; preds = %46
  %53 = load ptr, ptr %1, align 8, !tbaa !5
  %54 = load i32, ptr %53, align 8
  %55 = and i32 %54, 16711680
  %56 = icmp eq i32 %55, 2621440
  %57 = select i1 %56, ptr @.str.286, ptr @.str.287
  br label %59

58:                                               ; preds = %2
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 28108, ptr noundef nonnull @.str.131) #30
  br label %59

59:                                               ; preds = %52, %46, %33, %20, %58, %37, %24
  %60 = phi ptr [ %27, %24 ], [ @.str.284, %37 ], [ @.str.43, %58 ], [ @.str.282, %20 ], [ @.str.283, %33 ], [ @.str.285, %46 ], [ %57, %52 ]
  ret ptr %60
}

; Function Attrs: nounwind sspstrong uwtable
define dso_local void @ix86_emit_fp_unordered_jump(ptr noundef %0) local_unnamed_addr #9 {
  %2 = tail call ptr @gen_reg_rtx(i32 noundef 15) #30
  %3 = tail call ptr @gen_x86_fnstsw_1(ptr noundef %2) #30
  %4 = tail call ptr @emit_insn(ptr noundef %3) #30
  %5 = load i32, ptr @ix86_isa_flags, align 4, !tbaa !20
  %6 = and i32 %5, 32768
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %16, label %8

8:                                                ; preds = %1
  %9 = load i8, ptr getelementptr inbounds ([62 x i8], ptr @ix86_tune_features, i64 0, i64 7), align 1, !tbaa !16
  %10 = icmp eq i8 %9, 0
  br i1 %10, label %11, label %14

11:                                               ; preds = %8
  %12 = tail call zeroext i8 @optimize_insn_for_size_p() #30
  %13 = icmp eq i8 %12, 0
  br i1 %13, label %16, label %14

14:                                               ; preds = %11, %8
  %15 = tail call ptr @gen_x86_sahf_1(ptr noundef %2) #30
  br label %19

16:                                               ; preds = %11, %1
  %17 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef 4) #30
  %18 = tail call ptr @gen_testqi_ext_ccno_0(ptr noundef %2, ptr noundef %17) #30
  br label %19

19:                                               ; preds = %16, %14
  %20 = phi ptr [ %18, %16 ], [ %15, %14 ]
  %21 = phi i32 [ 5, %16 ], [ 2, %14 ]
  %22 = phi i32 [ 80, %16 ], [ 90, %14 ]
  %23 = tail call ptr @emit_insn(ptr noundef %20) #30
  %24 = tail call ptr @gen_rtx_REG(i32 noundef %21, i32 noundef 17) #30
  %25 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 64), align 16, !tbaa !5
  %26 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef %22, i32 noundef 0, ptr noundef %24, ptr noundef %25) #30
  %27 = tail call ptr @gen_rtx_fmt_u_stat(i32 noundef 44, i32 noundef 0, ptr noundef %0) #30
  %28 = load ptr, ptr @global_rtl, align 16, !tbaa !5
  %29 = tail call ptr @gen_rtx_fmt_eee_stat(i32 noundef 47, i32 noundef 0, ptr noundef %26, ptr noundef %27, ptr noundef %28) #30
  %30 = load ptr, ptr @global_rtl, align 16, !tbaa !5
  %31 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 23, i32 noundef 0, ptr noundef %30, ptr noundef %29) #30
  %32 = tail call ptr @emit_jump_insn(ptr noundef %31) #30
  %33 = tail call ptr @get_last_insn() #30
  %34 = load i32, ptr %33, align 8
  %35 = and i32 %34, 65535
  %36 = icmp eq i32 %35, 9
  br i1 %36, label %38, label %37

37:                                               ; preds = %19
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 17264, ptr noundef nonnull @.str.131) #30
  br label %38

38:                                               ; preds = %19, %37
  %39 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef 1000) #30
  tail call void @add_reg_note(ptr noundef nonnull %33, i32 noundef 13, ptr noundef %39) #30
  ret void
}

declare ptr @gen_x86_fnstsw_1(ptr noundef) local_unnamed_addr #3

declare ptr @gen_x86_sahf_1(ptr noundef) local_unnamed_addr #3

declare ptr @gen_testqi_ext_ccno_0(ptr noundef, ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define dso_local void @ix86_emit_i387_log1p(ptr noundef %0, ptr noundef %1) local_unnamed_addr #9 {
  %3 = alloca %struct.real_value, align 8
  %4 = tail call ptr @gen_label_rtx() #30
  %5 = tail call ptr @gen_label_rtx() #30
  %6 = tail call ptr @gen_reg_rtx(i32 noundef 40) #30
  %7 = tail call ptr @gen_reg_rtx(i32 noundef 40) #30
  %8 = tail call ptr @gen_absxf2(ptr noundef %6, ptr noundef %1) #30
  %9 = tail call ptr @emit_insn(ptr noundef %8) #30
  call void @real_from_string2(ptr nonnull sret(%struct.real_value) align 8 %3, ptr noundef nonnull @.str.288, i32 noundef 40) #30
  %10 = call ptr @const_double_from_real_value(ptr noundef nonnull byval(%struct.real_value) align 8 %3, i32 noundef 40) #30
  %11 = call ptr @gen_rtx_fmt_ee_stat(i32 noundef 82, i32 noundef 0, ptr noundef %6, ptr noundef %10) #30
  %12 = getelementptr inbounds %struct.rtx_def, ptr %11, i64 0, i32 1
  %13 = load ptr, ptr %12, align 8, !tbaa !16
  %14 = getelementptr inbounds %struct.rtx_def, ptr %11, i64 0, i32 1, i32 0, i32 0, i64 1
  %15 = load ptr, ptr %14, align 8, !tbaa !16
  %16 = call ptr @gen_cbranchxf4(ptr noundef %11, ptr noundef %13, ptr noundef %15, ptr noundef %4) #30
  %17 = call ptr @emit_jump_insn(ptr noundef %16) #30
  %18 = load i1, ptr @ext_80387_constants_init, align 1
  br i1 %18, label %20, label %19

19:                                               ; preds = %2
  call fastcc void @init_ext_80387_constants()
  br label %20

20:                                               ; preds = %2, %19
  %21 = call ptr @const_double_from_real_value(ptr noundef nonnull byval(%struct.real_value) align 8 getelementptr inbounds ([5 x %struct.real_value], ptr @ext_80387_constants_table, i64 0, i64 1), i32 noundef 40) #30
  %22 = call ptr @emit_move_insn(ptr noundef %7, ptr noundef %21) #30
  %23 = call ptr @gen_fyl2xp1xf3_i387(ptr noundef %0, ptr noundef %1, ptr noundef %7) #30
  %24 = call ptr @emit_insn(ptr noundef %23) #30
  call void @emit_jump(ptr noundef %5) #30
  %25 = call ptr @emit_label(ptr noundef %4) #30
  %26 = load ptr, ptr getelementptr inbounds ([3 x [87 x ptr]], ptr @const_tiny_rtx, i64 0, i64 1, i64 40), align 8, !tbaa !5
  %27 = call ptr @emit_move_insn(ptr noundef %6, ptr noundef %26) #30
  %28 = call ptr @gen_addxf3(ptr noundef %6, ptr noundef %1, ptr noundef %6) #30
  %29 = call ptr @emit_insn(ptr noundef %28) #30
  %30 = load i1, ptr @ext_80387_constants_init, align 1
  br i1 %30, label %32, label %31

31:                                               ; preds = %20
  call fastcc void @init_ext_80387_constants()
  br label %32

32:                                               ; preds = %20, %31
  %33 = call ptr @const_double_from_real_value(ptr noundef nonnull byval(%struct.real_value) align 8 getelementptr inbounds ([5 x %struct.real_value], ptr @ext_80387_constants_table, i64 0, i64 1), i32 noundef 40) #30
  %34 = call ptr @emit_move_insn(ptr noundef %7, ptr noundef %33) #30
  %35 = call ptr @gen_fyl2xxf3_i387(ptr noundef %0, ptr noundef %6, ptr noundef %7) #30
  %36 = call ptr @emit_insn(ptr noundef %35) #30
  %37 = call ptr @emit_label(ptr noundef %5) #30
  ret void
}

declare ptr @gen_absxf2(ptr noundef, ptr noundef) local_unnamed_addr #3

declare void @real_from_string2(ptr sret(%struct.real_value) align 8, ptr noundef, i32 noundef) local_unnamed_addr #3

declare ptr @gen_cbranchxf4(ptr noundef, ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

declare ptr @gen_fyl2xp1xf3_i387(ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

declare ptr @gen_addxf3(ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

declare ptr @gen_fyl2xxf3_i387(ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define dso_local void @ix86_emit_swdivsf(ptr noundef %0, ptr noundef %1, ptr noundef %2, i32 noundef %3) local_unnamed_addr #9 {
  %5 = tail call ptr @gen_reg_rtx(i32 noundef %3) #30
  %6 = tail call ptr @gen_reg_rtx(i32 noundef %3) #30
  %7 = tail call ptr @gen_reg_rtx(i32 noundef %3) #30
  %8 = tail call ptr @gen_reg_rtx(i32 noundef %3) #30
  %9 = tail call ptr @const_double_from_real_value(ptr noundef nonnull byval(%struct.real_value) align 8 @dconst2, i32 noundef 38) #30
  %10 = zext i32 %3 to i64
  %11 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %10
  %12 = load i8, ptr %11, align 1, !tbaa !16
  %13 = add i8 %12, -12
  %14 = icmp ult i8 %13, 6
  br i1 %14, label %15, label %18

15:                                               ; preds = %4
  %16 = tail call ptr (i32, ...) @gen_rtvec(i32 noundef 4, ptr noundef %9, ptr noundef %9, ptr noundef %9, ptr noundef %9) #30
  %17 = tail call ptr @gen_rtx_CONST_VECTOR(i32 noundef 79, ptr noundef %16) #30
  br label %18

18:                                               ; preds = %4, %15
  %19 = phi ptr [ %17, %15 ], [ %9, %4 ]
  %20 = tail call ptr @force_reg(i32 noundef %3, ptr noundef %19) #30
  %21 = tail call ptr (i32, ...) @gen_rtvec(i32 noundef 1, ptr noundef %2) #30
  %22 = tail call ptr @gen_rtx_fmt_Ei_stat(i32 noundef 18, i32 noundef %3, ptr noundef %21, i32 noundef 45) #30
  %23 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 23, i32 noundef 0, ptr noundef %5, ptr noundef %22) #30
  %24 = tail call ptr @emit_insn(ptr noundef %23) #30
  %25 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 52, i32 noundef %3, ptr noundef %5, ptr noundef %1) #30
  %26 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 23, i32 noundef 0, ptr noundef %6, ptr noundef %25) #30
  %27 = tail call ptr @emit_insn(ptr noundef %26) #30
  %28 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 52, i32 noundef %3, ptr noundef %5, ptr noundef %2) #30
  %29 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 23, i32 noundef 0, ptr noundef %7, ptr noundef %28) #30
  %30 = tail call ptr @emit_insn(ptr noundef %29) #30
  %31 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 50, i32 noundef %3, ptr noundef %20, ptr noundef %7) #30
  %32 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 23, i32 noundef 0, ptr noundef %8, ptr noundef %31) #30
  %33 = tail call ptr @emit_insn(ptr noundef %32) #30
  %34 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 52, i32 noundef %3, ptr noundef %6, ptr noundef %8) #30
  %35 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 23, i32 noundef 0, ptr noundef %0, ptr noundef %34) #30
  %36 = tail call ptr @emit_insn(ptr noundef %35) #30
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define dso_local void @ix86_emit_swsqrtsf(ptr noundef %0, ptr noundef %1, i32 noundef %2, i8 noundef zeroext %3) local_unnamed_addr #9 {
  %5 = alloca %struct.real_value, align 8
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %5) #30
  %6 = tail call ptr @gen_reg_rtx(i32 noundef %2) #30
  %7 = tail call ptr @gen_reg_rtx(i32 noundef %2) #30
  %8 = tail call ptr @gen_reg_rtx(i32 noundef %2) #30
  %9 = tail call ptr @gen_reg_rtx(i32 noundef %2) #30
  %10 = tail call ptr @gen_reg_rtx(i32 noundef %2) #30
  call void @real_from_integer(ptr noundef nonnull %5, i32 noundef 0, i64 noundef -3, i64 noundef -1, i32 noundef 0) #30
  %11 = call ptr @const_double_from_real_value(ptr noundef nonnull byval(%struct.real_value) align 8 %5, i32 noundef 38) #30
  %12 = call zeroext i8 @real_arithmetic(ptr noundef nonnull %5, i32 noundef 79, ptr noundef nonnull @dconsthalf, ptr noundef null) #30
  %13 = call ptr @const_double_from_real_value(ptr noundef nonnull byval(%struct.real_value) align 8 %5, i32 noundef 38) #30
  %14 = zext i32 %2 to i64
  %15 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %14
  %16 = load i8, ptr %15, align 1, !tbaa !16
  %17 = add i8 %16, -12
  %18 = icmp ult i8 %17, 6
  br i1 %18, label %19, label %24

19:                                               ; preds = %4
  %20 = call ptr (i32, ...) @gen_rtvec(i32 noundef 4, ptr noundef %11, ptr noundef %11, ptr noundef %11, ptr noundef %11) #30
  %21 = call ptr @gen_rtx_CONST_VECTOR(i32 noundef 79, ptr noundef %20) #30
  %22 = call ptr (i32, ...) @gen_rtvec(i32 noundef 4, ptr noundef %13, ptr noundef %13, ptr noundef %13, ptr noundef %13) #30
  %23 = call ptr @gen_rtx_CONST_VECTOR(i32 noundef 79, ptr noundef %22) #30
  br label %24

24:                                               ; preds = %4, %19
  %25 = phi ptr [ %23, %19 ], [ %13, %4 ]
  %26 = phi ptr [ %21, %19 ], [ %11, %4 ]
  %27 = call ptr (i32, ...) @gen_rtvec(i32 noundef 1, ptr noundef %1) #30
  %28 = call ptr @gen_rtx_fmt_Ei_stat(i32 noundef 18, i32 noundef %2, ptr noundef %27, i32 noundef 46) #30
  %29 = call ptr @gen_rtx_fmt_ee_stat(i32 noundef 23, i32 noundef 0, ptr noundef %6, ptr noundef %28) #30
  %30 = call ptr @emit_insn(ptr noundef %29) #30
  %31 = icmp eq i8 %3, 0
  br i1 %31, label %32, label %45

32:                                               ; preds = %24
  %33 = call ptr @gen_reg_rtx(i32 noundef %2) #30
  %34 = call ptr @gen_reg_rtx(i32 noundef %2) #30
  %35 = sext i32 %2 to i64
  %36 = getelementptr inbounds [87 x ptr], ptr @const_tiny_rtx, i64 0, i64 %35
  %37 = load ptr, ptr %36, align 8, !tbaa !5
  %38 = call ptr @force_reg(i32 noundef %2, ptr noundef %37) #30
  %39 = call ptr @gen_rtx_fmt_ee_stat(i32 noundef 80, i32 noundef %2, ptr noundef %38, ptr noundef %1) #30
  %40 = call ptr @gen_rtx_fmt_ee_stat(i32 noundef 23, i32 noundef 0, ptr noundef %34, ptr noundef %39) #30
  %41 = call ptr @emit_insn(ptr noundef %40) #30
  %42 = call ptr @gen_rtx_fmt_ee_stat(i32 noundef 61, i32 noundef %2, ptr noundef %6, ptr noundef %34) #30
  %43 = call ptr @gen_rtx_fmt_ee_stat(i32 noundef 23, i32 noundef 0, ptr noundef %6, ptr noundef %42) #30
  %44 = call ptr @emit_insn(ptr noundef %43) #30
  br label %45

45:                                               ; preds = %32, %24
  %46 = phi ptr [ %7, %32 ], [ %6, %24 ]
  %47 = call ptr @gen_rtx_fmt_ee_stat(i32 noundef 52, i32 noundef %2, ptr noundef %6, ptr noundef %1) #30
  %48 = call ptr @gen_rtx_fmt_ee_stat(i32 noundef 23, i32 noundef 0, ptr noundef %7, ptr noundef %47) #30
  %49 = call ptr @emit_insn(ptr noundef %48) #30
  %50 = call ptr @gen_rtx_fmt_ee_stat(i32 noundef 52, i32 noundef %2, ptr noundef %7, ptr noundef %6) #30
  %51 = call ptr @gen_rtx_fmt_ee_stat(i32 noundef 23, i32 noundef 0, ptr noundef %8, ptr noundef %50) #30
  %52 = call ptr @emit_insn(ptr noundef %51) #30
  %53 = call ptr @force_reg(i32 noundef %2, ptr noundef %26) #30
  %54 = call ptr @gen_rtx_fmt_ee_stat(i32 noundef 49, i32 noundef %2, ptr noundef %8, ptr noundef %53) #30
  %55 = call ptr @gen_rtx_fmt_ee_stat(i32 noundef 23, i32 noundef 0, ptr noundef %9, ptr noundef %54) #30
  %56 = call ptr @emit_insn(ptr noundef %55) #30
  %57 = call ptr @force_reg(i32 noundef %2, ptr noundef %25) #30
  %58 = call ptr @gen_rtx_fmt_ee_stat(i32 noundef 52, i32 noundef %2, ptr noundef %46, ptr noundef %57) #30
  %59 = call ptr @gen_rtx_fmt_ee_stat(i32 noundef 23, i32 noundef 0, ptr noundef %10, ptr noundef %58) #30
  %60 = call ptr @emit_insn(ptr noundef %59) #30
  %61 = call ptr @gen_rtx_fmt_ee_stat(i32 noundef 52, i32 noundef %2, ptr noundef %9, ptr noundef %10) #30
  %62 = call ptr @gen_rtx_fmt_ee_stat(i32 noundef 23, i32 noundef 0, ptr noundef %0, ptr noundef %61) #30
  %63 = call ptr @emit_insn(ptr noundef %62) #30
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %5) #30
  ret void
}

declare void @real_from_integer(ptr noundef, i32 noundef, i64 noundef, i64 noundef, i32 noundef) local_unnamed_addr #3

declare zeroext i8 @real_arithmetic(ptr noundef, i32 noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

; Function Attrs: mustprogress nofree norecurse nosync nounwind sspstrong willreturn memory(read, argmem: none, inaccessiblemem: none) uwtable
define dso_local i32 @asm_preferred_eh_data_format(i32 noundef %0, i32 noundef %1) local_unnamed_addr #16 {
  %3 = load i32, ptr @flag_pic, align 4, !tbaa !20
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %8, label %5

5:                                                ; preds = %2
  %6 = icmp eq i32 %1, 0
  %7 = select i1 %6, i32 27, i32 155
  br label %16

8:                                                ; preds = %2
  %9 = load i32, ptr @ix86_cmodel, align 4, !tbaa !16
  %10 = icmp eq i32 %9, 1
  br i1 %10, label %16, label %11

11:                                               ; preds = %8
  %12 = icmp eq i32 %9, 3
  %13 = icmp ne i32 %0, 0
  %14 = and i1 %13, %12
  %15 = select i1 %14, i32 3, i32 0
  br label %16

16:                                               ; preds = %11, %8, %5
  %17 = phi i32 [ %7, %5 ], [ 3, %8 ], [ %15, %11 ]
  ret i32 %17
}

; Function Attrs: nounwind sspstrong uwtable
define dso_local void @ix86_expand_lround(ptr noundef %0, ptr noundef %1) local_unnamed_addr #9 {
  %3 = alloca %struct.real_value, align 8
  %4 = alloca %struct.real_value, align 8
  %5 = load i32, ptr %1, align 8
  %6 = lshr i32 %5, 16
  %7 = and i32 %6, 255
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %3) #30
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %4) #30
  %8 = add nsw i32 %7, -38
  %9 = zext i32 %8 to i64
  %10 = getelementptr inbounds [7 x ptr], ptr @real_format_for_mode, i64 0, i64 %9
  %11 = load ptr, ptr %10, align 8, !tbaa !5
  %12 = getelementptr inbounds %struct.real_format, ptr %11, i64 0, i32 3
  %13 = load i32, ptr %12, align 4, !tbaa !300
  %14 = xor i32 %13, -1
  call void @real_2expN(ptr noundef nonnull %4, i32 noundef %14, i32 noundef %7) #30
  %15 = call zeroext i8 @real_arithmetic(ptr noundef nonnull %3, i32 noundef 64, ptr noundef nonnull @dconsthalf, ptr noundef nonnull %4) #30
  %16 = call ptr @const_double_from_real_value(ptr noundef nonnull byval(%struct.real_value) align 8 %3, i32 noundef %7) #30
  %17 = call ptr @force_reg(i32 noundef %7, ptr noundef %16) #30
  %18 = call ptr @force_reg(i32 noundef %7, ptr noundef nonnull %1) #30
  call fastcc void @ix86_sse_copysign_to_positive(ptr noundef %17, ptr noundef %17, ptr noundef %18, ptr noundef null)
  %19 = call ptr @expand_simple_binop(i32 noundef %7, i32 noundef 49, ptr noundef %17, ptr noundef nonnull %1, ptr noundef null, i32 noundef 0, i32 noundef 0) #30
  call void @expand_fix(ptr noundef %0, ptr noundef %19, i32 noundef 0) #30
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %4) #30
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %3) #30
  ret void
}

declare void @real_2expN(ptr noundef, i32 noundef, i32 noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc void @ix86_sse_copysign_to_positive(ptr noundef %0, ptr noundef %1, ptr noundef %2, ptr noundef %3) unnamed_addr #9 {
  %5 = load i32, ptr %2, align 8
  %6 = lshr i32 %5, 16
  %7 = and i32 %6, 255
  %8 = tail call ptr @gen_reg_rtx(i32 noundef %7) #30
  %9 = icmp eq ptr %3, null
  br i1 %9, label %10, label %59

10:                                               ; preds = %4
  %11 = zext i32 %7 to i64
  %12 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %11
  %13 = load i8, ptr %12, align 1, !tbaa !16
  %14 = add i8 %13, -12
  %15 = icmp ult i8 %14, 6
  br i1 %15, label %19, label %16

16:                                               ; preds = %19, %10
  %17 = icmp eq i8 %13, 16
  %18 = zext i1 %17 to i8
  br label %23

19:                                               ; preds = %10
  %20 = lshr i8 47, %14
  %21 = and i8 %20, 1
  %22 = icmp eq i8 %21, 0
  br i1 %22, label %16, label %23

23:                                               ; preds = %19, %16
  %24 = phi i8 [ %18, %16 ], [ 1, %19 ]
  %25 = trunc i32 %6 to i8
  switch i8 %25, label %32 [
    i8 16, label %26
    i8 38, label %26
    i8 17, label %29
    i8 39, label %29
    i8 18, label %33
    i8 41, label %33
  ]

26:                                               ; preds = %23, %23
  %27 = icmp eq i32 %7, 16
  %28 = select i1 %27, i32 65, i32 79
  br label %33

29:                                               ; preds = %23, %23
  %30 = icmp eq i32 %7, 17
  %31 = select i1 %30, i32 66, i32 80
  br label %33

32:                                               ; preds = %23
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 14276, ptr noundef nonnull @.str.131) #30
  unreachable

33:                                               ; preds = %29, %26, %23, %23
  %34 = phi i32 [ 17, %29 ], [ 16, %26 ], [ 18, %23 ], [ 18, %23 ]
  %35 = phi i64 [ -1, %29 ], [ 0, %26 ], [ -9223372036854775808, %23 ], [ -9223372036854775808, %23 ]
  %36 = phi i64 [ -9223372036854775808, %29 ], [ 2147483648, %26 ], [ 0, %23 ], [ 0, %23 ]
  %37 = phi i32 [ %31, %29 ], [ %28, %26 ], [ 0, %23 ], [ 0, %23 ]
  %38 = tail call ptr @immed_double_const(i64 noundef %36, i64 noundef %35, i32 noundef %34) #30
  %39 = load ptr, ptr @rtl_hooks, align 8, !tbaa !187
  %40 = tail call ptr %39(i32 noundef %7, ptr noundef %38) #30
  %41 = icmp eq i32 %37, 0
  br i1 %41, label %42, label %44

42:                                               ; preds = %33
  %43 = tail call ptr @force_reg(i32 noundef %7, ptr noundef %40) #30
  br label %47

44:                                               ; preds = %33
  %45 = tail call ptr @ix86_build_const_vector(i32 noundef %7, i8 noundef zeroext %24, ptr noundef %40)
  %46 = tail call ptr @force_reg(i32 noundef %37, ptr noundef %45) #30
  br label %47

47:                                               ; preds = %42, %44
  %48 = phi ptr [ %43, %42 ], [ %46, %44 ]
  %49 = add i8 %13, -12
  %50 = icmp ult i8 %49, 6
  br i1 %50, label %61, label %51

51:                                               ; preds = %47
  %52 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 64), align 16, !tbaa !5
  %53 = tail call ptr (i32, ...) @gen_rtvec(i32 noundef 1, ptr noundef %52) #30
  %54 = tail call ptr @gen_rtx_fmt_E_stat(i32 noundef 15, i32 noundef 0, ptr noundef %53) #30
  %55 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 124, i32 noundef %7, ptr noundef %48, ptr noundef %54) #30
  %56 = tail call ptr @gen_reg_rtx(i32 noundef %7) #30
  %57 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 23, i32 noundef 0, ptr noundef %56, ptr noundef %55) #30
  %58 = tail call ptr @emit_insn(ptr noundef %57) #30
  br label %61

59:                                               ; preds = %4
  %60 = tail call ptr @gen_rtx_fmt_e_stat(i32 noundef 64, i32 noundef %7, ptr noundef nonnull %3) #30
  br label %61

61:                                               ; preds = %47, %51, %59
  %62 = phi ptr [ %56, %51 ], [ %60, %59 ], [ %48, %47 ]
  %63 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 61, i32 noundef %7, ptr noundef %62, ptr noundef nonnull %2) #30
  %64 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 23, i32 noundef 0, ptr noundef %8, ptr noundef %63) #30
  %65 = tail call ptr @emit_insn(ptr noundef %64) #30
  %66 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 62, i32 noundef %7, ptr noundef %1, ptr noundef %8) #30
  %67 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 23, i32 noundef 0, ptr noundef %0, ptr noundef %66) #30
  %68 = tail call ptr @emit_insn(ptr noundef %67) #30
  ret void
}

declare void @expand_fix(ptr noundef, ptr noundef, i32 noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define dso_local void @ix86_expand_lfloorceil(ptr noundef %0, ptr noundef %1, i8 noundef zeroext %2) local_unnamed_addr #9 {
  %4 = load i32, ptr %1, align 8
  %5 = lshr i32 %4, 16
  %6 = and i32 %5, 255
  %7 = load i32, ptr %0, align 8
  %8 = lshr i32 %7, 16
  %9 = and i32 %8, 255
  %10 = tail call ptr @gen_reg_rtx(i32 noundef %9) #30
  tail call void @expand_fix(ptr noundef %10, ptr noundef nonnull %1, i32 noundef 0) #30
  %11 = tail call ptr @gen_reg_rtx(i32 noundef %6) #30
  tail call void @expand_float(ptr noundef %11, ptr noundef %10, i32 noundef 0) #30
  %12 = icmp eq i8 %2, 0
  %13 = zext i1 %12 to i8
  %14 = tail call fastcc ptr @ix86_expand_sse_compare_and_jump(ptr noundef %11, ptr noundef nonnull %1, i8 noundef zeroext %13)
  %15 = select i1 %12, i32 49, i32 50
  %16 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 65), align 8, !tbaa !5
  %17 = tail call ptr @expand_simple_binop(i32 noundef %9, i32 noundef %15, ptr noundef %10, ptr noundef %16, ptr noundef null, i32 noundef 0, i32 noundef 0) #30
  %18 = tail call ptr @emit_move_insn(ptr noundef %10, ptr noundef %17) #30
  %19 = tail call ptr @emit_label(ptr noundef %14) #30
  %20 = getelementptr inbounds %struct.rtx_def, ptr %14, i64 0, i32 1, i32 0, i32 2
  store i32 1, ptr %20, align 8, !tbaa !16
  %21 = tail call ptr @emit_move_insn(ptr noundef nonnull %0, ptr noundef %10) #30
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc ptr @ix86_expand_sse_compare_and_jump(ptr noundef %0, ptr noundef %1, i8 noundef zeroext %2) unnamed_addr #9 {
  %4 = icmp eq i8 %2, 0
  %5 = select i1 %4, ptr %1, ptr %0
  %6 = select i1 %4, ptr %0, ptr %1
  %7 = tail call ptr @gen_label_rtx() #30
  %8 = tail call ptr @gen_rtx_REG(i32 noundef 12, i32 noundef 17) #30
  %9 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 48, i32 noundef 12, ptr noundef %6, ptr noundef %5) #30
  %10 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 23, i32 noundef 0, ptr noundef %8, ptr noundef %9) #30
  %11 = tail call ptr @emit_insn(ptr noundef %10) #30
  %12 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 64), align 16, !tbaa !5
  %13 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 95, i32 noundef 0, ptr noundef %8, ptr noundef %12) #30
  %14 = tail call ptr @gen_rtx_fmt_u_stat(i32 noundef 44, i32 noundef 0, ptr noundef %7) #30
  %15 = load ptr, ptr @global_rtl, align 16, !tbaa !5
  %16 = tail call ptr @gen_rtx_fmt_eee_stat(i32 noundef 47, i32 noundef 0, ptr noundef %13, ptr noundef %14, ptr noundef %15) #30
  %17 = load ptr, ptr @global_rtl, align 16, !tbaa !5
  %18 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 23, i32 noundef 0, ptr noundef %17, ptr noundef %16) #30
  %19 = tail call ptr @emit_jump_insn(ptr noundef %18) #30
  %20 = getelementptr inbounds %struct.rtx_def, ptr %19, i64 1, i32 1, i32 0, i32 0, i64 2
  store ptr %7, ptr %20, align 8, !tbaa !16
  ret ptr %7
}

; Function Attrs: nounwind sspstrong uwtable
define dso_local void @ix86_expand_rint(ptr noundef %0, ptr noundef %1) local_unnamed_addr #9 {
  %3 = alloca %struct.real_value, align 8
  %4 = alloca ptr, align 8
  %5 = load i32, ptr %0, align 8
  %6 = lshr i32 %5, 16
  %7 = and i32 %6, 255
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %4) #30
  %8 = tail call ptr @gen_reg_rtx(i32 noundef %7) #30
  %9 = tail call ptr @emit_move_insn(ptr noundef %8, ptr noundef %1) #30
  %10 = call fastcc ptr @ix86_expand_sse_fabs(ptr noundef %8, ptr noundef nonnull %4)
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %3) #30
  %11 = icmp eq i32 %7, 39
  %12 = select i1 %11, i32 52, i32 23
  call void @real_ldexp(ptr noundef nonnull %3, ptr noundef nonnull @dconst1, i32 noundef %12) #30
  %13 = call ptr @const_double_from_real_value(ptr noundef nonnull byval(%struct.real_value) align 8 %3, i32 noundef %7) #30
  %14 = call ptr @force_reg(i32 noundef %7, ptr noundef %13) #30
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %3) #30
  %15 = call fastcc ptr @ix86_expand_sse_compare_and_jump(ptr noundef %14, ptr noundef %10, i8 noundef zeroext 0)
  %16 = call ptr @expand_simple_binop(i32 noundef %7, i32 noundef 49, ptr noundef %10, ptr noundef %14, ptr noundef null, i32 noundef 0, i32 noundef 0) #30
  %17 = call ptr @expand_simple_binop(i32 noundef %7, i32 noundef 50, ptr noundef %16, ptr noundef %14, ptr noundef %16, i32 noundef 0, i32 noundef 0) #30
  %18 = load ptr, ptr %4, align 8, !tbaa !5
  call fastcc void @ix86_sse_copysign_to_positive(ptr noundef %8, ptr noundef %17, ptr noundef %8, ptr noundef %18)
  %19 = call ptr @emit_label(ptr noundef %15) #30
  %20 = getelementptr inbounds %struct.rtx_def, ptr %15, i64 0, i32 1, i32 0, i32 2
  store i32 1, ptr %20, align 8, !tbaa !16
  %21 = call ptr @emit_move_insn(ptr noundef nonnull %0, ptr noundef %8) #30
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %4) #30
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc ptr @ix86_expand_sse_fabs(ptr noundef %0, ptr noundef writeonly %1) unnamed_addr #9 {
  %3 = load i32, ptr %0, align 8
  %4 = lshr i32 %3, 16
  %5 = and i32 %4, 255
  %6 = tail call ptr @gen_reg_rtx(i32 noundef %5) #30
  %7 = zext i32 %5 to i64
  %8 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %7
  %9 = load i8, ptr %8, align 1, !tbaa !16
  %10 = add i8 %9, -12
  %11 = icmp ult i8 %10, 6
  br i1 %11, label %15, label %12

12:                                               ; preds = %15, %2
  %13 = icmp eq i8 %9, 16
  %14 = zext i1 %13 to i8
  br label %19

15:                                               ; preds = %2
  %16 = lshr i8 47, %10
  %17 = and i8 %16, 1
  %18 = icmp eq i8 %17, 0
  br i1 %18, label %12, label %19

19:                                               ; preds = %15, %12
  %20 = phi i8 [ %14, %12 ], [ 1, %15 ]
  %21 = trunc i32 %4 to i8
  switch i8 %21, label %28 [
    i8 16, label %22
    i8 38, label %22
    i8 17, label %25
    i8 39, label %25
    i8 18, label %29
    i8 41, label %29
  ]

22:                                               ; preds = %19, %19
  %23 = icmp eq i32 %5, 16
  %24 = select i1 %23, i32 65, i32 79
  br label %29

25:                                               ; preds = %19, %19
  %26 = icmp eq i32 %5, 17
  %27 = select i1 %26, i32 66, i32 80
  br label %29

28:                                               ; preds = %19
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 14276, ptr noundef nonnull @.str.131) #30
  unreachable

29:                                               ; preds = %25, %22, %19, %19
  %30 = phi i32 [ 17, %25 ], [ 16, %22 ], [ 18, %19 ], [ 18, %19 ]
  %31 = phi i64 [ 0, %25 ], [ -1, %22 ], [ 9223372036854775807, %19 ], [ 9223372036854775807, %19 ]
  %32 = phi i64 [ 9223372036854775807, %25 ], [ -2147483649, %22 ], [ -1, %19 ], [ -1, %19 ]
  %33 = phi i32 [ %27, %25 ], [ %24, %22 ], [ 0, %19 ], [ 0, %19 ]
  %34 = tail call ptr @immed_double_const(i64 noundef %32, i64 noundef %31, i32 noundef %30) #30
  %35 = load ptr, ptr @rtl_hooks, align 8, !tbaa !187
  %36 = tail call ptr %35(i32 noundef %5, ptr noundef %34) #30
  %37 = icmp eq i32 %33, 0
  br i1 %37, label %38, label %40

38:                                               ; preds = %29
  %39 = tail call ptr @force_reg(i32 noundef %5, ptr noundef %36) #30
  br label %43

40:                                               ; preds = %29
  %41 = tail call ptr @ix86_build_const_vector(i32 noundef %5, i8 noundef zeroext %20, ptr noundef %36)
  %42 = tail call ptr @force_reg(i32 noundef %33, ptr noundef %41) #30
  br label %43

43:                                               ; preds = %38, %40
  %44 = phi ptr [ %39, %38 ], [ %42, %40 ]
  %45 = add i8 %9, -12
  %46 = icmp ult i8 %45, 6
  br i1 %46, label %55, label %47

47:                                               ; preds = %43
  %48 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 64), align 16, !tbaa !5
  %49 = tail call ptr (i32, ...) @gen_rtvec(i32 noundef 1, ptr noundef %48) #30
  %50 = tail call ptr @gen_rtx_fmt_E_stat(i32 noundef 15, i32 noundef 0, ptr noundef %49) #30
  %51 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 124, i32 noundef %5, ptr noundef %44, ptr noundef %50) #30
  %52 = tail call ptr @gen_reg_rtx(i32 noundef %5) #30
  %53 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 23, i32 noundef 0, ptr noundef %52, ptr noundef %51) #30
  %54 = tail call ptr @emit_insn(ptr noundef %53) #30
  br label %55

55:                                               ; preds = %43, %47
  %56 = phi ptr [ %52, %47 ], [ %44, %43 ]
  %57 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 61, i32 noundef %5, ptr noundef nonnull %0, ptr noundef %56) #30
  %58 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 23, i32 noundef 0, ptr noundef %6, ptr noundef %57) #30
  %59 = tail call ptr @emit_insn(ptr noundef %58) #30
  %60 = icmp eq ptr %1, null
  br i1 %60, label %62, label %61

61:                                               ; preds = %55
  store ptr %56, ptr %1, align 8, !tbaa !5
  br label %62

62:                                               ; preds = %61, %55
  ret ptr %6
}

; Function Attrs: nounwind sspstrong uwtable
define dso_local void @ix86_expand_floorceildf_32(ptr noundef %0, ptr noundef %1, i8 noundef zeroext %2) local_unnamed_addr #9 {
  %4 = alloca %struct.real_value, align 8
  %5 = alloca ptr, align 8
  %6 = alloca %struct.real_value, align 8
  %7 = load i32, ptr %0, align 8
  %8 = lshr i32 %7, 16
  %9 = and i32 %8, 255
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %5) #30
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %4) #30
  %10 = icmp eq i32 %9, 39
  %11 = select i1 %10, i32 52, i32 23
  call void @real_ldexp(ptr noundef nonnull %4, ptr noundef nonnull @dconst1, i32 noundef %11) #30
  %12 = call ptr @const_double_from_real_value(ptr noundef nonnull byval(%struct.real_value) align 8 %4, i32 noundef %9) #30
  %13 = call ptr @force_reg(i32 noundef %9, ptr noundef %12) #30
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %4) #30
  %14 = call ptr @gen_reg_rtx(i32 noundef %9) #30
  %15 = call ptr @emit_move_insn(ptr noundef %14, ptr noundef %1) #30
  %16 = call fastcc ptr @ix86_expand_sse_fabs(ptr noundef %14, ptr noundef nonnull %5)
  %17 = call fastcc ptr @ix86_expand_sse_compare_and_jump(ptr noundef %13, ptr noundef %16, i8 noundef zeroext 0)
  %18 = call ptr @expand_simple_binop(i32 noundef %9, i32 noundef 49, ptr noundef %16, ptr noundef %13, ptr noundef null, i32 noundef 0, i32 noundef 0) #30
  %19 = call ptr @expand_simple_binop(i32 noundef %9, i32 noundef 50, ptr noundef %18, ptr noundef %13, ptr noundef %18, i32 noundef 0, i32 noundef 0) #30
  %20 = load ptr, ptr %5, align 8, !tbaa !5
  call fastcc void @ix86_sse_copysign_to_positive(ptr noundef %19, ptr noundef %19, ptr noundef %14, ptr noundef %20)
  %21 = icmp eq i8 %2, 0
  br i1 %21, label %23, label %22

22:                                               ; preds = %3
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(32) %6, ptr noundef nonnull align 8 dereferenceable(32) @dconst1, i64 32, i1 false), !tbaa.struct !106
  br label %24

23:                                               ; preds = %3
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(32) %6, ptr noundef nonnull align 8 dereferenceable(32) @dconstm1, i64 32, i1 false), !tbaa.struct !106
  br label %24

24:                                               ; preds = %23, %22
  %25 = call ptr @const_double_from_real_value(ptr noundef nonnull byval(%struct.real_value) align 8 %6, i32 noundef %9) #30
  %26 = call ptr @force_reg(i32 noundef %9, ptr noundef %25) #30
  %27 = zext i1 %21 to i8
  %28 = call fastcc ptr @ix86_expand_sse_compare_mask(i32 noundef 94, ptr noundef %19, ptr noundef %14, i8 noundef zeroext %27)
  %29 = call ptr @gen_rtx_fmt_ee_stat(i32 noundef 61, i32 noundef %9, ptr noundef %26, ptr noundef %28) #30
  %30 = call ptr @gen_rtx_fmt_ee_stat(i32 noundef 23, i32 noundef 0, ptr noundef %28, ptr noundef %29) #30
  %31 = call ptr @emit_insn(ptr noundef %30) #30
  %32 = call ptr @expand_simple_binop(i32 noundef %9, i32 noundef 50, ptr noundef %19, ptr noundef %28, ptr noundef null, i32 noundef 0, i32 noundef 0) #30
  %33 = call ptr @emit_move_insn(ptr noundef %14, ptr noundef %32) #30
  %34 = call ptr @emit_label(ptr noundef %17) #30
  %35 = getelementptr inbounds %struct.rtx_def, ptr %17, i64 0, i32 1, i32 0, i32 2
  store i32 1, ptr %35, align 8, !tbaa !16
  %36 = call ptr @emit_move_insn(ptr noundef nonnull %0, ptr noundef %14) #30
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %5) #30
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc ptr @ix86_expand_sse_compare_mask(i32 noundef %0, ptr noundef %1, ptr noundef %2, i8 noundef zeroext %3) unnamed_addr #9 {
  %5 = load i32, ptr %1, align 8
  %6 = lshr i32 %5, 16
  %7 = and i32 %6, 255
  %8 = tail call ptr @gen_reg_rtx(i32 noundef %7) #30
  %9 = icmp eq i8 %3, 0
  %10 = select i1 %9, ptr %2, ptr %1
  %11 = select i1 %9, ptr %1, ptr %2
  %12 = icmp eq i32 %7, 39
  br i1 %12, label %13, label %16

13:                                               ; preds = %4
  %14 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef %0, i32 noundef 39, ptr noundef %11, ptr noundef %10) #30
  %15 = tail call ptr @gen_sse2_maskcmpdf3(ptr noundef %8, ptr noundef %11, ptr noundef %10, ptr noundef %14) #30
  br label %19

16:                                               ; preds = %4
  %17 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef %0, i32 noundef %7, ptr noundef %11, ptr noundef %10) #30
  %18 = tail call ptr @gen_sse_maskcmpsf3(ptr noundef %8, ptr noundef %11, ptr noundef %10, ptr noundef %17) #30
  br label %19

19:                                               ; preds = %16, %13
  %20 = phi ptr [ %18, %16 ], [ %15, %13 ]
  %21 = tail call ptr @emit_insn(ptr noundef %20) #30
  ret ptr %8
}

; Function Attrs: nounwind sspstrong uwtable
define dso_local void @ix86_expand_floorceil(ptr noundef %0, ptr noundef %1, i8 noundef zeroext %2) local_unnamed_addr #9 {
  %4 = alloca %struct.real_value, align 8
  %5 = alloca ptr, align 8
  %6 = load i32, ptr %0, align 8
  %7 = lshr i32 %6, 16
  %8 = and i32 %7, 255
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %5) #30
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %4) #30
  %9 = icmp eq i32 %8, 39
  %10 = select i1 %9, i32 52, i32 23
  call void @real_ldexp(ptr noundef nonnull %4, ptr noundef nonnull @dconst1, i32 noundef %10) #30
  %11 = call ptr @const_double_from_real_value(ptr noundef nonnull byval(%struct.real_value) align 8 %4, i32 noundef %8) #30
  %12 = call ptr @force_reg(i32 noundef %8, ptr noundef %11) #30
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %4) #30
  %13 = call ptr @gen_reg_rtx(i32 noundef %8) #30
  %14 = call ptr @emit_move_insn(ptr noundef %13, ptr noundef %1) #30
  %15 = call fastcc ptr @ix86_expand_sse_fabs(ptr noundef %13, ptr noundef nonnull %5)
  %16 = call fastcc ptr @ix86_expand_sse_compare_and_jump(ptr noundef %12, ptr noundef %15, i8 noundef zeroext 0)
  %17 = select i1 %9, i32 17, i32 16
  %18 = call ptr @gen_reg_rtx(i32 noundef %17) #30
  call void @expand_fix(ptr noundef %18, ptr noundef %13, i32 noundef 0) #30
  call void @expand_float(ptr noundef %15, ptr noundef %18, i32 noundef 0) #30
  %19 = call ptr @const_double_from_real_value(ptr noundef nonnull byval(%struct.real_value) align 8 @dconst1, i32 noundef %8) #30
  %20 = call ptr @force_reg(i32 noundef %8, ptr noundef %19) #30
  %21 = icmp eq i8 %2, 0
  %22 = zext i1 %21 to i8
  %23 = call fastcc ptr @ix86_expand_sse_compare_mask(i32 noundef 94, ptr noundef %15, ptr noundef %13, i8 noundef zeroext %22)
  %24 = call ptr @gen_rtx_fmt_ee_stat(i32 noundef 61, i32 noundef %8, ptr noundef %20, ptr noundef %23) #30
  %25 = call ptr @gen_rtx_fmt_ee_stat(i32 noundef 23, i32 noundef 0, ptr noundef %23, ptr noundef %24) #30
  %26 = call ptr @emit_insn(ptr noundef %25) #30
  %27 = select i1 %21, i32 49, i32 50
  %28 = call ptr @expand_simple_binop(i32 noundef %8, i32 noundef %27, ptr noundef %15, ptr noundef %23, ptr noundef null, i32 noundef 0, i32 noundef 0) #30
  %29 = call ptr @emit_move_insn(ptr noundef %13, ptr noundef %28) #30
  %30 = zext i32 %8 to i64
  %31 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %30
  %32 = load i8, ptr %31, align 1, !tbaa !16
  switch i8 %32, label %55 [
    i8 8, label %33
    i8 9, label %33
    i8 11, label %33
    i8 17, label %33
  ]

33:                                               ; preds = %3, %3, %3, %3
  %34 = and i8 %32, -2
  %35 = icmp eq i8 %34, 8
  br i1 %35, label %40, label %36

36:                                               ; preds = %33
  %37 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %30
  %38 = load i8, ptr %37, align 1, !tbaa !16
  %39 = zext i8 %38 to i32
  br label %40

40:                                               ; preds = %36, %33
  %41 = phi i32 [ %8, %33 ], [ %39, %36 ]
  %42 = add nsw i32 %41, -38
  %43 = zext i32 %42 to i64
  %44 = getelementptr inbounds [7 x ptr], ptr @real_format_for_mode, i64 0, i64 %43
  %45 = load ptr, ptr %44, align 8, !tbaa !5
  %46 = getelementptr inbounds %struct.real_format, ptr %45, i64 0, i32 14
  %47 = load i8, ptr %46, align 1, !tbaa !302
  %48 = icmp ne i8 %47, 0
  %49 = load i32, ptr @flag_signed_zeros, align 4
  %50 = icmp ne i32 %49, 0
  %51 = select i1 %48, i1 %50, i1 false
  br i1 %51, label %52, label %55

52:                                               ; preds = %40
  %53 = call ptr @force_reg(i32 noundef %8, ptr noundef %1) #30
  %54 = load ptr, ptr %5, align 8, !tbaa !5
  call fastcc void @ix86_sse_copysign_to_positive(ptr noundef %13, ptr noundef %13, ptr noundef %53, ptr noundef %54)
  br label %55

55:                                               ; preds = %3, %52, %40
  %56 = call ptr @emit_label(ptr noundef %16) #30
  %57 = getelementptr inbounds %struct.rtx_def, ptr %16, i64 0, i32 1, i32 0, i32 2
  store i32 1, ptr %57, align 8, !tbaa !16
  %58 = call ptr @emit_move_insn(ptr noundef nonnull %0, ptr noundef %13) #30
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %5) #30
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define dso_local void @ix86_expand_rounddf_32(ptr noundef %0, ptr noundef %1) local_unnamed_addr #9 {
  %3 = alloca %struct.real_value, align 8
  %4 = alloca ptr, align 8
  %5 = load i32, ptr %0, align 8
  %6 = lshr i32 %5, 16
  %7 = and i32 %6, 255
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %4) #30
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %3) #30
  %8 = icmp eq i32 %7, 39
  %9 = select i1 %8, i32 52, i32 23
  call void @real_ldexp(ptr noundef nonnull %3, ptr noundef nonnull @dconst1, i32 noundef %9) #30
  %10 = call ptr @const_double_from_real_value(ptr noundef nonnull byval(%struct.real_value) align 8 %3, i32 noundef %7) #30
  %11 = call ptr @force_reg(i32 noundef %7, ptr noundef %10) #30
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %3) #30
  %12 = call ptr @gen_reg_rtx(i32 noundef %7) #30
  %13 = call ptr @emit_move_insn(ptr noundef %12, ptr noundef %1) #30
  %14 = call fastcc ptr @ix86_expand_sse_fabs(ptr noundef %12, ptr noundef nonnull %4)
  %15 = call fastcc ptr @ix86_expand_sse_compare_and_jump(ptr noundef %11, ptr noundef %14, i8 noundef zeroext 0)
  %16 = call ptr @expand_simple_binop(i32 noundef %7, i32 noundef 49, ptr noundef %14, ptr noundef %11, ptr noundef null, i32 noundef 0, i32 noundef 0) #30
  %17 = call ptr @expand_simple_binop(i32 noundef %7, i32 noundef 50, ptr noundef %16, ptr noundef %11, ptr noundef %16, i32 noundef 0, i32 noundef 0) #30
  %18 = call ptr @expand_simple_binop(i32 noundef %7, i32 noundef 50, ptr noundef %17, ptr noundef %14, ptr noundef null, i32 noundef 0, i32 noundef 0) #30
  %19 = call ptr @const_double_from_real_value(ptr noundef nonnull byval(%struct.real_value) align 8 @dconsthalf, i32 noundef %7) #30
  %20 = call ptr @force_reg(i32 noundef %7, ptr noundef %19) #30
  %21 = call ptr @expand_simple_binop(i32 noundef %7, i32 noundef 49, ptr noundef %20, ptr noundef %20, ptr noundef null, i32 noundef 0, i32 noundef 0) #30
  %22 = call ptr @expand_simple_binop(i32 noundef %7, i32 noundef 50, ptr noundef %20, ptr noundef %21, ptr noundef null, i32 noundef 0, i32 noundef 0) #30
  %23 = call ptr @gen_reg_rtx(i32 noundef %7) #30
  %24 = load i32, ptr %18, align 8
  %25 = lshr i32 %24, 16
  %26 = and i32 %25, 255
  %27 = call ptr @gen_reg_rtx(i32 noundef %26) #30
  %28 = icmp eq i32 %26, 39
  br i1 %28, label %29, label %32

29:                                               ; preds = %2
  %30 = call ptr @gen_rtx_fmt_ee_stat(i32 noundef 94, i32 noundef 39, ptr noundef nonnull %18, ptr noundef %20) #30
  %31 = call ptr @gen_sse2_maskcmpdf3(ptr noundef %27, ptr noundef nonnull %18, ptr noundef %20, ptr noundef %30) #30
  br label %35

32:                                               ; preds = %2
  %33 = call ptr @gen_rtx_fmt_ee_stat(i32 noundef 94, i32 noundef %26, ptr noundef nonnull %18, ptr noundef %20) #30
  %34 = call ptr @gen_sse_maskcmpsf3(ptr noundef %27, ptr noundef nonnull %18, ptr noundef %20, ptr noundef %33) #30
  br label %35

35:                                               ; preds = %29, %32
  %36 = phi ptr [ %34, %32 ], [ %31, %29 ]
  %37 = call ptr @emit_insn(ptr noundef %36) #30
  %38 = call ptr @gen_rtx_fmt_ee_stat(i32 noundef 61, i32 noundef %7, ptr noundef %21, ptr noundef %27) #30
  %39 = call ptr @gen_rtx_fmt_ee_stat(i32 noundef 23, i32 noundef 0, ptr noundef %27, ptr noundef %38) #30
  %40 = call ptr @emit_insn(ptr noundef %39) #30
  %41 = call ptr @expand_simple_binop(i32 noundef %7, i32 noundef 50, ptr noundef %17, ptr noundef %27, ptr noundef null, i32 noundef 0, i32 noundef 0) #30
  %42 = load i32, ptr %22, align 8
  %43 = lshr i32 %42, 16
  %44 = and i32 %43, 255
  %45 = call ptr @gen_reg_rtx(i32 noundef %44) #30
  %46 = icmp eq i32 %44, 39
  br i1 %46, label %47, label %50

47:                                               ; preds = %35
  %48 = call ptr @gen_rtx_fmt_ee_stat(i32 noundef 93, i32 noundef 39, ptr noundef nonnull %22, ptr noundef nonnull %18) #30
  %49 = call ptr @gen_sse2_maskcmpdf3(ptr noundef %45, ptr noundef nonnull %22, ptr noundef nonnull %18, ptr noundef %48) #30
  br label %53

50:                                               ; preds = %35
  %51 = call ptr @gen_rtx_fmt_ee_stat(i32 noundef 93, i32 noundef %44, ptr noundef nonnull %22, ptr noundef nonnull %18) #30
  %52 = call ptr @gen_sse_maskcmpsf3(ptr noundef %45, ptr noundef nonnull %22, ptr noundef nonnull %18, ptr noundef %51) #30
  br label %53

53:                                               ; preds = %47, %50
  %54 = phi ptr [ %52, %50 ], [ %49, %47 ]
  %55 = call ptr @emit_insn(ptr noundef %54) #30
  %56 = call ptr @gen_rtx_fmt_ee_stat(i32 noundef 61, i32 noundef %7, ptr noundef %21, ptr noundef %45) #30
  %57 = call ptr @gen_rtx_fmt_ee_stat(i32 noundef 23, i32 noundef 0, ptr noundef %45, ptr noundef %56) #30
  %58 = call ptr @emit_insn(ptr noundef %57) #30
  %59 = call ptr @expand_simple_binop(i32 noundef %7, i32 noundef 49, ptr noundef %41, ptr noundef %45, ptr noundef null, i32 noundef 0, i32 noundef 0) #30
  %60 = call ptr @force_reg(i32 noundef %7, ptr noundef %1) #30
  %61 = load ptr, ptr %4, align 8, !tbaa !5
  call fastcc void @ix86_sse_copysign_to_positive(ptr noundef %12, ptr noundef %59, ptr noundef %60, ptr noundef %61)
  %62 = call ptr @emit_label(ptr noundef %15) #30
  %63 = getelementptr inbounds %struct.rtx_def, ptr %15, i64 0, i32 1, i32 0, i32 2
  store i32 1, ptr %63, align 8, !tbaa !16
  %64 = call ptr @emit_move_insn(ptr noundef nonnull %0, ptr noundef %12) #30
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %4) #30
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define dso_local void @ix86_expand_trunc(ptr noundef %0, ptr noundef %1) local_unnamed_addr #9 {
  %3 = alloca %struct.real_value, align 8
  %4 = alloca ptr, align 8
  %5 = load i32, ptr %0, align 8
  %6 = lshr i32 %5, 16
  %7 = and i32 %6, 255
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %4) #30
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %3) #30
  %8 = icmp eq i32 %7, 39
  %9 = select i1 %8, i32 52, i32 23
  call void @real_ldexp(ptr noundef nonnull %3, ptr noundef nonnull @dconst1, i32 noundef %9) #30
  %10 = call ptr @const_double_from_real_value(ptr noundef nonnull byval(%struct.real_value) align 8 %3, i32 noundef %7) #30
  %11 = call ptr @force_reg(i32 noundef %7, ptr noundef %10) #30
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %3) #30
  %12 = call ptr @gen_reg_rtx(i32 noundef %7) #30
  %13 = call ptr @emit_move_insn(ptr noundef %12, ptr noundef %1) #30
  %14 = call fastcc ptr @ix86_expand_sse_fabs(ptr noundef %12, ptr noundef nonnull %4)
  %15 = call fastcc ptr @ix86_expand_sse_compare_and_jump(ptr noundef %11, ptr noundef %14, i8 noundef zeroext 0)
  %16 = select i1 %8, i32 17, i32 16
  %17 = call ptr @gen_reg_rtx(i32 noundef %16) #30
  call void @expand_fix(ptr noundef %17, ptr noundef %12, i32 noundef 0) #30
  call void @expand_float(ptr noundef %12, ptr noundef %17, i32 noundef 0) #30
  %18 = zext i32 %7 to i64
  %19 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %18
  %20 = load i8, ptr %19, align 1, !tbaa !16
  switch i8 %20, label %43 [
    i8 8, label %21
    i8 9, label %21
    i8 11, label %21
    i8 17, label %21
  ]

21:                                               ; preds = %2, %2, %2, %2
  %22 = and i8 %20, -2
  %23 = icmp eq i8 %22, 8
  br i1 %23, label %28, label %24

24:                                               ; preds = %21
  %25 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %18
  %26 = load i8, ptr %25, align 1, !tbaa !16
  %27 = zext i8 %26 to i32
  br label %28

28:                                               ; preds = %24, %21
  %29 = phi i32 [ %7, %21 ], [ %27, %24 ]
  %30 = add nsw i32 %29, -38
  %31 = zext i32 %30 to i64
  %32 = getelementptr inbounds [7 x ptr], ptr @real_format_for_mode, i64 0, i64 %31
  %33 = load ptr, ptr %32, align 8, !tbaa !5
  %34 = getelementptr inbounds %struct.real_format, ptr %33, i64 0, i32 14
  %35 = load i8, ptr %34, align 1, !tbaa !302
  %36 = icmp ne i8 %35, 0
  %37 = load i32, ptr @flag_signed_zeros, align 4
  %38 = icmp ne i32 %37, 0
  %39 = select i1 %36, i1 %38, i1 false
  br i1 %39, label %40, label %43

40:                                               ; preds = %28
  %41 = call ptr @force_reg(i32 noundef %7, ptr noundef %1) #30
  %42 = load ptr, ptr %4, align 8, !tbaa !5
  call fastcc void @ix86_sse_copysign_to_positive(ptr noundef %12, ptr noundef %12, ptr noundef %41, ptr noundef %42)
  br label %43

43:                                               ; preds = %2, %40, %28
  %44 = call ptr @emit_label(ptr noundef %15) #30
  %45 = getelementptr inbounds %struct.rtx_def, ptr %15, i64 0, i32 1, i32 0, i32 2
  store i32 1, ptr %45, align 8, !tbaa !16
  %46 = call ptr @emit_move_insn(ptr noundef nonnull %0, ptr noundef %12) #30
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %4) #30
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define dso_local void @ix86_expand_truncdf_32(ptr noundef %0, ptr noundef %1) local_unnamed_addr #9 {
  %3 = alloca %struct.real_value, align 8
  %4 = alloca ptr, align 8
  %5 = load i32, ptr %0, align 8
  %6 = lshr i32 %5, 16
  %7 = and i32 %6, 255
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %4) #30
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %3) #30
  %8 = icmp eq i32 %7, 39
  %9 = select i1 %8, i32 52, i32 23
  call void @real_ldexp(ptr noundef nonnull %3, ptr noundef nonnull @dconst1, i32 noundef %9) #30
  %10 = call ptr @const_double_from_real_value(ptr noundef nonnull byval(%struct.real_value) align 8 %3, i32 noundef %7) #30
  %11 = call ptr @force_reg(i32 noundef %7, ptr noundef %10) #30
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %3) #30
  %12 = call ptr @gen_reg_rtx(i32 noundef %7) #30
  %13 = call ptr @emit_move_insn(ptr noundef %12, ptr noundef %1) #30
  %14 = call fastcc ptr @ix86_expand_sse_fabs(ptr noundef %12, ptr noundef nonnull %4)
  %15 = call fastcc ptr @ix86_expand_sse_compare_and_jump(ptr noundef %11, ptr noundef %14, i8 noundef zeroext 0)
  %16 = call ptr @expand_simple_binop(i32 noundef %7, i32 noundef 49, ptr noundef %14, ptr noundef %11, ptr noundef null, i32 noundef 0, i32 noundef 0) #30
  %17 = call ptr @expand_simple_binop(i32 noundef %7, i32 noundef 50, ptr noundef %16, ptr noundef %11, ptr noundef %16, i32 noundef 0, i32 noundef 0) #30
  %18 = call ptr @emit_move_insn(ptr noundef %12, ptr noundef %17) #30
  %19 = call ptr @const_double_from_real_value(ptr noundef nonnull byval(%struct.real_value) align 8 @dconst1, i32 noundef %7) #30
  %20 = call ptr @force_reg(i32 noundef %7, ptr noundef %19) #30
  %21 = load i32, ptr %12, align 8
  %22 = lshr i32 %21, 16
  %23 = and i32 %22, 255
  %24 = call ptr @gen_reg_rtx(i32 noundef %23) #30
  %25 = icmp eq i32 %23, 39
  br i1 %25, label %26, label %29

26:                                               ; preds = %2
  %27 = call ptr @gen_rtx_fmt_ee_stat(i32 noundef 94, i32 noundef 39, ptr noundef nonnull %12, ptr noundef %14) #30
  %28 = call ptr @gen_sse2_maskcmpdf3(ptr noundef %24, ptr noundef nonnull %12, ptr noundef %14, ptr noundef %27) #30
  br label %32

29:                                               ; preds = %2
  %30 = call ptr @gen_rtx_fmt_ee_stat(i32 noundef 94, i32 noundef %23, ptr noundef nonnull %12, ptr noundef %14) #30
  %31 = call ptr @gen_sse_maskcmpsf3(ptr noundef %24, ptr noundef nonnull %12, ptr noundef %14, ptr noundef %30) #30
  br label %32

32:                                               ; preds = %26, %29
  %33 = phi ptr [ %31, %29 ], [ %28, %26 ]
  %34 = call ptr @emit_insn(ptr noundef %33) #30
  %35 = call ptr @gen_rtx_fmt_ee_stat(i32 noundef 61, i32 noundef %7, ptr noundef %24, ptr noundef %20) #30
  %36 = call ptr @gen_rtx_fmt_ee_stat(i32 noundef 23, i32 noundef 0, ptr noundef %24, ptr noundef %35) #30
  %37 = call ptr @emit_insn(ptr noundef %36) #30
  %38 = call ptr @expand_simple_binop(i32 noundef %7, i32 noundef 50, ptr noundef nonnull %12, ptr noundef %24, ptr noundef null, i32 noundef 0, i32 noundef 0) #30
  %39 = call ptr @emit_move_insn(ptr noundef nonnull %12, ptr noundef %38) #30
  %40 = call ptr @force_reg(i32 noundef %7, ptr noundef %1) #30
  %41 = load ptr, ptr %4, align 8, !tbaa !5
  call fastcc void @ix86_sse_copysign_to_positive(ptr noundef nonnull %12, ptr noundef nonnull %12, ptr noundef %40, ptr noundef %41)
  %42 = call ptr @emit_label(ptr noundef %15) #30
  %43 = getelementptr inbounds %struct.rtx_def, ptr %15, i64 0, i32 1, i32 0, i32 2
  store i32 1, ptr %43, align 8, !tbaa !16
  %44 = call ptr @emit_move_insn(ptr noundef nonnull %0, ptr noundef nonnull %12) #30
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %4) #30
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define dso_local void @ix86_expand_round(ptr noundef %0, ptr noundef %1) local_unnamed_addr #9 {
  %3 = alloca %struct.real_value, align 8
  %4 = alloca ptr, align 8
  %5 = alloca %struct.real_value, align 8
  %6 = alloca %struct.real_value, align 8
  %7 = load i32, ptr %0, align 8
  %8 = lshr i32 %7, 16
  %9 = and i32 %8, 255
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %4) #30
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %5) #30
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %6) #30
  %10 = tail call ptr @gen_reg_rtx(i32 noundef %9) #30
  %11 = tail call ptr @emit_move_insn(ptr noundef %10, ptr noundef %1) #30
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %3) #30
  %12 = icmp eq i32 %9, 39
  %13 = select i1 %12, i32 52, i32 23
  call void @real_ldexp(ptr noundef nonnull %3, ptr noundef nonnull @dconst1, i32 noundef %13) #30
  %14 = call ptr @const_double_from_real_value(ptr noundef nonnull byval(%struct.real_value) align 8 %3, i32 noundef %9) #30
  %15 = call ptr @force_reg(i32 noundef %9, ptr noundef %14) #30
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %3) #30
  %16 = call fastcc ptr @ix86_expand_sse_fabs(ptr noundef %10, ptr noundef nonnull %4)
  %17 = call fastcc ptr @ix86_expand_sse_compare_and_jump(ptr noundef %15, ptr noundef %16, i8 noundef zeroext 0)
  %18 = add nsw i32 %9, -38
  %19 = zext i32 %18 to i64
  %20 = getelementptr inbounds [7 x ptr], ptr @real_format_for_mode, i64 0, i64 %19
  %21 = load ptr, ptr %20, align 8, !tbaa !5
  %22 = getelementptr inbounds %struct.real_format, ptr %21, i64 0, i32 3
  %23 = load i32, ptr %22, align 4, !tbaa !300
  %24 = xor i32 %23, -1
  call void @real_2expN(ptr noundef nonnull %6, i32 noundef %24, i32 noundef %9) #30
  %25 = call zeroext i8 @real_arithmetic(ptr noundef nonnull %5, i32 noundef 64, ptr noundef nonnull @dconsthalf, ptr noundef nonnull %6) #30
  %26 = call ptr @const_double_from_real_value(ptr noundef nonnull byval(%struct.real_value) align 8 %5, i32 noundef %9) #30
  %27 = call ptr @force_reg(i32 noundef %9, ptr noundef %26) #30
  %28 = call ptr @expand_simple_binop(i32 noundef %9, i32 noundef 49, ptr noundef %16, ptr noundef %27, ptr noundef null, i32 noundef 0, i32 noundef 0) #30
  %29 = select i1 %12, i32 17, i32 16
  %30 = call ptr @gen_reg_rtx(i32 noundef %29) #30
  call void @expand_fix(ptr noundef %30, ptr noundef %28, i32 noundef 0) #30
  call void @expand_float(ptr noundef %28, ptr noundef %30, i32 noundef 0) #30
  %31 = call ptr @force_reg(i32 noundef %9, ptr noundef %1) #30
  %32 = load ptr, ptr %4, align 8, !tbaa !5
  call fastcc void @ix86_sse_copysign_to_positive(ptr noundef %10, ptr noundef %28, ptr noundef %31, ptr noundef %32)
  %33 = call ptr @emit_label(ptr noundef %17) #30
  %34 = getelementptr inbounds %struct.rtx_def, ptr %17, i64 0, i32 1, i32 0, i32 2
  store i32 1, ptr %34, align 8, !tbaa !16
  %35 = call ptr @emit_move_insn(ptr noundef nonnull %0, ptr noundef %10) #30
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %6) #30
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %5) #30
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %4) #30
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define dso_local void @ix86_expand_vec_extract_even_odd(ptr noundef %0, ptr noundef %1, ptr noundef %2, i32 noundef %3) local_unnamed_addr #9 {
  %5 = alloca %struct.expand_vec_perm_d, align 8
  call void @llvm.lifetime.start.p0(i64 48, ptr nonnull %5) #30
  store ptr %0, ptr %5, align 8, !tbaa !291
  %6 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %5, i64 0, i32 1
  store ptr %1, ptr %6, align 8, !tbaa !296
  %7 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %5, i64 0, i32 2
  store ptr %2, ptr %7, align 8, !tbaa !295
  %8 = load i32, ptr %0, align 8
  %9 = lshr i32 %8, 16
  %10 = and i32 %9, 255
  %11 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %5, i64 0, i32 4
  store i32 %10, ptr %11, align 8, !tbaa !293
  %12 = zext i32 %10 to i64
  %13 = getelementptr inbounds [87 x i8], ptr @mode_nunits, i64 0, i64 %12
  %14 = load i8, ptr %13, align 1, !tbaa !16
  %15 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %5, i64 0, i32 5
  store i8 %14, ptr %15, align 4, !tbaa !294
  %16 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %5, i64 0, i32 6
  store i8 0, ptr %16, align 1, !tbaa !303
  %17 = icmp eq i8 %14, 0
  br i1 %17, label %69, label %18

18:                                               ; preds = %4
  %19 = zext i8 %14 to i64
  %20 = icmp ult i8 %14, 16
  br i1 %20, label %58, label %21

21:                                               ; preds = %18
  %22 = and i64 %19, 240
  %23 = insertelement <4 x i32> poison, i32 %3, i64 0
  %24 = shufflevector <4 x i32> %23, <4 x i32> poison, <4 x i32> zeroinitializer
  %25 = add i32 %3, 8
  %26 = insertelement <4 x i32> poison, i32 %25, i64 0
  %27 = shufflevector <4 x i32> %26, <4 x i32> poison, <4 x i32> zeroinitializer
  %28 = add i32 %3, 16
  %29 = insertelement <4 x i32> poison, i32 %28, i64 0
  %30 = shufflevector <4 x i32> %29, <4 x i32> poison, <4 x i32> zeroinitializer
  %31 = add i32 %3, 24
  %32 = insertelement <4 x i32> poison, i32 %31, i64 0
  %33 = shufflevector <4 x i32> %32, <4 x i32> poison, <4 x i32> zeroinitializer
  br label %34

34:                                               ; preds = %34, %21
  %35 = phi i64 [ 0, %21 ], [ %53, %34 ]
  %36 = phi <4 x i32> [ <i32 0, i32 1, i32 2, i32 3>, %21 ], [ %54, %34 ]
  %37 = shl <4 x i32> %36, <i32 1, i32 1, i32 1, i32 1>
  %38 = shl <4 x i32> %36, <i32 1, i32 1, i32 1, i32 1>
  %39 = shl <4 x i32> %36, <i32 1, i32 1, i32 1, i32 1>
  %40 = shl <4 x i32> %36, <i32 1, i32 1, i32 1, i32 1>
  %41 = add <4 x i32> %37, %24
  %42 = add <4 x i32> %27, %38
  %43 = add <4 x i32> %30, %39
  %44 = add <4 x i32> %33, %40
  %45 = trunc <4 x i32> %41 to <4 x i8>
  %46 = trunc <4 x i32> %42 to <4 x i8>
  %47 = trunc <4 x i32> %43 to <4 x i8>
  %48 = trunc <4 x i32> %44 to <4 x i8>
  %49 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %5, i64 0, i32 3, i64 %35
  store <4 x i8> %45, ptr %49, align 8, !tbaa !16
  %50 = getelementptr inbounds i8, ptr %49, i64 4
  store <4 x i8> %46, ptr %50, align 4, !tbaa !16
  %51 = getelementptr inbounds i8, ptr %49, i64 8
  store <4 x i8> %47, ptr %51, align 8, !tbaa !16
  %52 = getelementptr inbounds i8, ptr %49, i64 12
  store <4 x i8> %48, ptr %52, align 4, !tbaa !16
  %53 = add nuw i64 %35, 16
  %54 = add <4 x i32> %36, <i32 16, i32 16, i32 16, i32 16>
  %55 = icmp eq i64 %53, %22
  br i1 %55, label %56, label %34, !llvm.loop !304

56:                                               ; preds = %34
  %57 = icmp eq i64 %22, %19
  br i1 %57, label %69, label %58

58:                                               ; preds = %18, %56
  %59 = phi i64 [ 0, %18 ], [ %22, %56 ]
  br label %60

60:                                               ; preds = %58, %60
  %61 = phi i64 [ %67, %60 ], [ %59, %58 ]
  %62 = trunc i64 %61 to i32
  %63 = shl i32 %62, 1
  %64 = add i32 %63, %3
  %65 = trunc i32 %64 to i8
  %66 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %5, i64 0, i32 3, i64 %61
  store i8 %65, ptr %66, align 1, !tbaa !16
  %67 = add nuw nsw i64 %61, 1
  %68 = icmp eq i64 %67, %19
  br i1 %68, label %69, label %60, !llvm.loop !305

69:                                               ; preds = %60, %56, %4
  %70 = call fastcc zeroext i8 @expand_vec_perm_1(ptr noundef nonnull %5), !range !66
  %71 = icmp eq i8 %70, 0
  br i1 %71, label %72, label %74

72:                                               ; preds = %69
  %73 = call fastcc zeroext i8 @expand_vec_perm_even_odd_1(ptr noundef nonnull %5, i32 noundef %3), !range !66
  br label %74

74:                                               ; preds = %69, %72
  call void @llvm.lifetime.end.p0(i64 48, ptr nonnull %5) #30
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc zeroext i8 @expand_vec_perm_1(ptr nocapture noundef readonly %0) unnamed_addr #9 {
  %2 = alloca [16 x ptr], align 16
  %3 = alloca [16 x ptr], align 16
  %4 = alloca [16 x i8], align 16
  %5 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %0, i64 0, i32 5
  %6 = load i8, ptr %5, align 4, !tbaa !294
  %7 = zext i8 %6 to i32
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %4) #30
  %8 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %0, i64 0, i32 1
  %9 = load ptr, ptr %8, align 8, !tbaa !296
  %10 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %0, i64 0, i32 2
  %11 = load ptr, ptr %10, align 8, !tbaa !295
  %12 = icmp eq ptr %9, %11
  br i1 %12, label %13, label %304

13:                                               ; preds = %1
  %14 = add nsw i32 %7, -1
  %15 = icmp eq i8 %6, 0
  br i1 %15, label %117, label %16

16:                                               ; preds = %13
  %17 = trunc i32 %14 to i8
  %18 = zext i8 %6 to i64
  %19 = icmp ult i8 %6, 8
  br i1 %19, label %103, label %20

20:                                               ; preds = %16
  %21 = icmp ult i8 %6, 64
  br i1 %21, label %88, label %22

22:                                               ; preds = %20
  %23 = and i64 %18, 192
  %24 = insertelement <16 x i8> poison, i8 %17, i64 0
  %25 = shufflevector <16 x i8> %24, <16 x i8> poison, <16 x i32> zeroinitializer
  %26 = insertelement <16 x i8> poison, i8 %17, i64 0
  %27 = shufflevector <16 x i8> %26, <16 x i8> poison, <16 x i32> zeroinitializer
  %28 = insertelement <16 x i8> poison, i8 %17, i64 0
  %29 = shufflevector <16 x i8> %28, <16 x i8> poison, <16 x i32> zeroinitializer
  %30 = insertelement <16 x i8> poison, i8 %17, i64 0
  %31 = shufflevector <16 x i8> %30, <16 x i8> poison, <16 x i32> zeroinitializer
  %32 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %0, i64 0, i32 3, i64 0
  %33 = load <16 x i8>, ptr %32, align 1, !tbaa !16
  %34 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %0, i64 0, i32 4
  %35 = load <16 x i8>, ptr %34, align 1, !tbaa !16
  %36 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %0, i64 1, i32 1
  %37 = load <16 x i8>, ptr %36, align 1, !tbaa !16
  %38 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %0, i64 1, i32 3
  %39 = load <16 x i8>, ptr %38, align 1, !tbaa !16
  %40 = and <16 x i8> %33, %25
  %41 = and <16 x i8> %35, %27
  %42 = and <16 x i8> %37, %29
  %43 = and <16 x i8> %39, %31
  store <16 x i8> %40, ptr %4, align 16, !tbaa !16
  %44 = getelementptr inbounds i8, ptr %4, i64 16
  store <16 x i8> %41, ptr %44, align 16, !tbaa !16
  %45 = getelementptr inbounds i8, ptr %4, i64 32
  store <16 x i8> %42, ptr %45, align 16, !tbaa !16
  %46 = getelementptr inbounds i8, ptr %4, i64 48
  store <16 x i8> %43, ptr %46, align 16, !tbaa !16
  %47 = icmp eq i64 %23, 64
  br i1 %47, label %83, label %48, !llvm.loop !306

48:                                               ; preds = %22
  %49 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %0, i64 0, i32 3, i64 64
  %50 = load <16 x i8>, ptr %49, align 1, !tbaa !16
  %51 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %0, i64 2, i32 1
  %52 = load <16 x i8>, ptr %51, align 1, !tbaa !16
  %53 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %0, i64 2, i32 3
  %54 = load <16 x i8>, ptr %53, align 1, !tbaa !16
  %55 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %0, i64 2, i32 4
  %56 = load <16 x i8>, ptr %55, align 1, !tbaa !16
  %57 = and <16 x i8> %50, %25
  %58 = and <16 x i8> %52, %27
  %59 = and <16 x i8> %54, %29
  %60 = and <16 x i8> %56, %31
  %61 = getelementptr inbounds [16 x i8], ptr %4, i64 0, i64 64
  store <16 x i8> %57, ptr %61, align 16, !tbaa !16
  %62 = getelementptr inbounds [16 x i8], ptr %4, i64 5
  store <16 x i8> %58, ptr %62, align 16, !tbaa !16
  %63 = getelementptr inbounds [16 x i8], ptr %4, i64 6
  store <16 x i8> %59, ptr %63, align 16, !tbaa !16
  %64 = getelementptr inbounds [16 x i8], ptr %4, i64 7
  store <16 x i8> %60, ptr %64, align 16, !tbaa !16
  %65 = icmp eq i64 %23, 128
  br i1 %65, label %83, label %66, !llvm.loop !306

66:                                               ; preds = %48
  %67 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %0, i64 0, i32 3, i64 128
  %68 = load <16 x i8>, ptr %67, align 1, !tbaa !16
  %69 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %0, i64 3, i32 3
  %70 = load <16 x i8>, ptr %69, align 1, !tbaa !16
  %71 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %0, i64 3, i32 4
  %72 = load <16 x i8>, ptr %71, align 1, !tbaa !16
  %73 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %0, i64 4, i32 1
  %74 = load <16 x i8>, ptr %73, align 1, !tbaa !16
  %75 = and <16 x i8> %68, %25
  %76 = and <16 x i8> %70, %27
  %77 = and <16 x i8> %72, %29
  %78 = and <16 x i8> %74, %31
  %79 = getelementptr inbounds [16 x i8], ptr %4, i64 0, i64 128
  store <16 x i8> %75, ptr %79, align 16, !tbaa !16
  %80 = getelementptr inbounds [16 x i8], ptr %4, i64 9
  store <16 x i8> %76, ptr %80, align 16, !tbaa !16
  %81 = getelementptr inbounds [16 x i8], ptr %4, i64 10
  store <16 x i8> %77, ptr %81, align 16, !tbaa !16
  %82 = getelementptr inbounds [16 x i8], ptr %4, i64 11
  store <16 x i8> %78, ptr %82, align 16, !tbaa !16
  br label %83

83:                                               ; preds = %66, %48, %22
  %84 = icmp eq i64 %23, %18
  br i1 %84, label %113, label %85

85:                                               ; preds = %83
  %86 = and i64 %18, 56
  %87 = icmp eq i64 %86, 0
  br i1 %87, label %103, label %88

88:                                               ; preds = %20, %85
  %89 = phi i64 [ %23, %85 ], [ 0, %20 ]
  %90 = and i64 %18, 248
  %91 = insertelement <8 x i8> poison, i8 %17, i64 0
  %92 = shufflevector <8 x i8> %91, <8 x i8> poison, <8 x i32> zeroinitializer
  br label %93

93:                                               ; preds = %93, %88
  %94 = phi i64 [ %89, %88 ], [ %99, %93 ]
  %95 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %0, i64 0, i32 3, i64 %94
  %96 = load <8 x i8>, ptr %95, align 1, !tbaa !16
  %97 = and <8 x i8> %96, %92
  %98 = getelementptr inbounds [16 x i8], ptr %4, i64 0, i64 %94
  store <8 x i8> %97, ptr %98, align 8, !tbaa !16
  %99 = add nuw i64 %94, 8
  %100 = icmp eq i64 %99, %90
  br i1 %100, label %101, label %93, !llvm.loop !307

101:                                              ; preds = %93
  %102 = icmp eq i64 %90, %18
  br i1 %102, label %113, label %103

103:                                              ; preds = %16, %85, %101
  %104 = phi i64 [ 0, %16 ], [ %23, %85 ], [ %90, %101 ]
  br label %105

105:                                              ; preds = %103, %105
  %106 = phi i64 [ %111, %105 ], [ %104, %103 ]
  %107 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %0, i64 0, i32 3, i64 %106
  %108 = load i8, ptr %107, align 1, !tbaa !16
  %109 = and i8 %108, %17
  %110 = getelementptr inbounds [16 x i8], ptr %4, i64 0, i64 %106
  store i8 %109, ptr %110, align 1, !tbaa !16
  %111 = add nuw nsw i64 %106, 1
  %112 = icmp eq i64 %111, %18
  br i1 %112, label %113, label %105, !llvm.loop !308

113:                                              ; preds = %105, %101, %83
  %114 = load ptr, ptr %0, align 8, !tbaa !291
  %115 = call fastcc zeroext i8 @expand_vselect(ptr noundef %114, ptr noundef %9, ptr noundef nonnull %4, i32 noundef %7), !range !66
  %116 = icmp eq i8 %115, 0
  br i1 %116, label %121, label %921

117:                                              ; preds = %13
  %118 = load ptr, ptr %0, align 8, !tbaa !291
  %119 = call fastcc zeroext i8 @expand_vselect(ptr noundef %118, ptr noundef %9, ptr noundef nonnull %4, i32 noundef %7), !range !66
  %120 = icmp eq i8 %119, 0
  br i1 %120, label %228, label %921

121:                                              ; preds = %113
  br i1 %15, label %228, label %122

122:                                              ; preds = %121
  %123 = trunc i32 %14 to i8
  %124 = zext i8 %6 to i64
  %125 = add nsw i64 %18, -1
  %126 = lshr i64 %125, 1
  %127 = add nuw i64 %126, 1
  %128 = icmp ult i8 %6, 15
  br i1 %128, label %212, label %129

129:                                              ; preds = %122
  %130 = and i64 %127, -8
  %131 = shl i64 %130, 1
  %132 = insertelement <8 x i8> poison, i8 %123, i64 0
  %133 = shufflevector <8 x i8> %132, <8 x i8> poison, <8 x i32> zeroinitializer
  %134 = insertelement <8 x i8> poison, i8 %6, i64 0
  %135 = shufflevector <8 x i8> %134, <8 x i8> poison, <8 x i32> zeroinitializer
  %136 = getelementptr i8, ptr %4, i64 -1
  br label %137

137:                                              ; preds = %137, %129
  %138 = phi i64 [ 0, %129 ], [ %208, %137 ]
  %139 = shl i64 %138, 1
  %140 = or i64 %139, 2
  %141 = or i64 %139, 4
  %142 = or i64 %139, 6
  %143 = or i64 %139, 8
  %144 = or i64 %139, 10
  %145 = or i64 %139, 12
  %146 = or i64 %139, 14
  %147 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %0, i64 0, i32 3, i64 %139
  %148 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %0, i64 0, i32 3, i64 %140
  %149 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %0, i64 0, i32 3, i64 %141
  %150 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %0, i64 0, i32 3, i64 %142
  %151 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %0, i64 0, i32 3, i64 %143
  %152 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %0, i64 0, i32 3, i64 %144
  %153 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %0, i64 0, i32 3, i64 %145
  %154 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %0, i64 0, i32 3, i64 %146
  %155 = load i8, ptr %147, align 1, !tbaa !16
  %156 = load i8, ptr %148, align 1, !tbaa !16
  %157 = load i8, ptr %149, align 1, !tbaa !16
  %158 = load i8, ptr %150, align 1, !tbaa !16
  %159 = load i8, ptr %151, align 1, !tbaa !16
  %160 = load i8, ptr %152, align 1, !tbaa !16
  %161 = load i8, ptr %153, align 1, !tbaa !16
  %162 = load i8, ptr %154, align 1, !tbaa !16
  %163 = insertelement <8 x i8> poison, i8 %155, i64 0
  %164 = insertelement <8 x i8> %163, i8 %156, i64 1
  %165 = insertelement <8 x i8> %164, i8 %157, i64 2
  %166 = insertelement <8 x i8> %165, i8 %158, i64 3
  %167 = insertelement <8 x i8> %166, i8 %159, i64 4
  %168 = insertelement <8 x i8> %167, i8 %160, i64 5
  %169 = insertelement <8 x i8> %168, i8 %161, i64 6
  %170 = insertelement <8 x i8> %169, i8 %162, i64 7
  %171 = and <8 x i8> %170, %133
  %172 = or i64 %139, 1
  %173 = or i64 %139, 3
  %174 = or i64 %139, 5
  %175 = or i64 %139, 7
  %176 = or i64 %139, 9
  %177 = or i64 %139, 11
  %178 = or i64 %139, 13
  %179 = or i64 %139, 15
  %180 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %0, i64 0, i32 3, i64 %172
  %181 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %0, i64 0, i32 3, i64 %173
  %182 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %0, i64 0, i32 3, i64 %174
  %183 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %0, i64 0, i32 3, i64 %175
  %184 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %0, i64 0, i32 3, i64 %176
  %185 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %0, i64 0, i32 3, i64 %177
  %186 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %0, i64 0, i32 3, i64 %178
  %187 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %0, i64 0, i32 3, i64 %179
  %188 = load i8, ptr %180, align 1, !tbaa !16
  %189 = load i8, ptr %181, align 1, !tbaa !16
  %190 = load i8, ptr %182, align 1, !tbaa !16
  %191 = load i8, ptr %183, align 1, !tbaa !16
  %192 = load i8, ptr %184, align 1, !tbaa !16
  %193 = load i8, ptr %185, align 1, !tbaa !16
  %194 = load i8, ptr %186, align 1, !tbaa !16
  %195 = load i8, ptr %187, align 1, !tbaa !16
  %196 = insertelement <8 x i8> poison, i8 %188, i64 0
  %197 = insertelement <8 x i8> %196, i8 %189, i64 1
  %198 = insertelement <8 x i8> %197, i8 %190, i64 2
  %199 = insertelement <8 x i8> %198, i8 %191, i64 3
  %200 = insertelement <8 x i8> %199, i8 %192, i64 4
  %201 = insertelement <8 x i8> %200, i8 %193, i64 5
  %202 = insertelement <8 x i8> %201, i8 %194, i64 6
  %203 = insertelement <8 x i8> %202, i8 %195, i64 7
  %204 = and <8 x i8> %203, %133
  %205 = add <8 x i8> %204, %135
  %206 = getelementptr [16 x i8], ptr %136, i64 0, i64 %172
  %207 = shufflevector <8 x i8> %171, <8 x i8> %205, <16 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11, i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  store <16 x i8> %207, ptr %206, align 16, !tbaa !16
  %208 = add nuw i64 %138, 8
  %209 = icmp eq i64 %208, %130
  br i1 %209, label %210, label %137, !llvm.loop !309

210:                                              ; preds = %137
  %211 = icmp eq i64 %127, %130
  br i1 %211, label %228, label %212

212:                                              ; preds = %122, %210
  %213 = phi i64 [ 0, %122 ], [ %131, %210 ]
  br label %214

214:                                              ; preds = %212, %214
  %215 = phi i64 [ %226, %214 ], [ %213, %212 ]
  %216 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %0, i64 0, i32 3, i64 %215
  %217 = load i8, ptr %216, align 1, !tbaa !16
  %218 = and i8 %217, %123
  %219 = getelementptr inbounds [16 x i8], ptr %4, i64 0, i64 %215
  store i8 %218, ptr %219, align 2, !tbaa !16
  %220 = or i64 %215, 1
  %221 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %0, i64 0, i32 3, i64 %220
  %222 = load i8, ptr %221, align 1, !tbaa !16
  %223 = and i8 %222, %123
  %224 = add i8 %223, %6
  %225 = getelementptr inbounds [16 x i8], ptr %4, i64 0, i64 %220
  store i8 %224, ptr %225, align 1, !tbaa !16
  %226 = add nuw nsw i64 %215, 2
  %227 = icmp ult i64 %226, %124
  br i1 %227, label %214, label %228, !llvm.loop !310

228:                                              ; preds = %214, %210, %117, %121
  %229 = load ptr, ptr %0, align 8, !tbaa !291
  %230 = load ptr, ptr %8, align 8, !tbaa !296
  %231 = load i32, ptr %230, align 8
  %232 = lshr i32 %231, 16
  %233 = trunc i32 %232 to i8
  %234 = add i8 %233, -59
  %235 = icmp ult i8 %234, 24
  br i1 %235, label %237, label %236

236:                                              ; preds = %237, %228
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 29105, ptr noundef nonnull @.str.131) #30
  br label %246

237:                                              ; preds = %228
  %238 = zext i8 %234 to i32
  %239 = lshr i32 16260863, %238
  %240 = and i32 %239, 1
  %241 = icmp eq i32 %240, 0
  br i1 %241, label %236, label %242

242:                                              ; preds = %237
  %243 = sext i8 %234 to i64
  %244 = getelementptr inbounds [24 x i32], ptr @switch.table.expand_vec_perm_1.1390, i64 0, i64 %243
  %245 = load i32, ptr %244, align 4
  br label %246

246:                                              ; preds = %242, %236
  %247 = phi i32 [ 0, %236 ], [ %245, %242 ]
  %248 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 125, i32 noundef %247, ptr noundef nonnull %230, ptr noundef nonnull %230) #30
  %249 = call fastcc zeroext i8 @expand_vselect(ptr noundef %229, ptr noundef %248, ptr noundef nonnull %4, i32 noundef %7), !range !66
  %250 = icmp eq i8 %249, 0
  br i1 %250, label %251, label %921

251:                                              ; preds = %246
  %252 = icmp ugt i8 %6, 3
  br i1 %252, label %253, label %304

253:                                              ; preds = %251
  %254 = trunc i32 %14 to i8
  %255 = zext i8 %6 to i64
  br label %256

256:                                              ; preds = %253, %256
  %257 = phi i64 [ 0, %253 ], [ %279, %256 ]
  %258 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %0, i64 0, i32 3, i64 %257
  %259 = load i8, ptr %258, align 1, !tbaa !16
  %260 = and i8 %259, %254
  %261 = getelementptr inbounds [16 x i8], ptr %4, i64 0, i64 %257
  store i8 %260, ptr %261, align 4, !tbaa !16
  %262 = or i64 %257, 1
  %263 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %0, i64 0, i32 3, i64 %262
  %264 = load i8, ptr %263, align 1, !tbaa !16
  %265 = and i8 %264, %254
  %266 = getelementptr inbounds [16 x i8], ptr %4, i64 0, i64 %262
  store i8 %265, ptr %266, align 1, !tbaa !16
  %267 = or i64 %257, 2
  %268 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %0, i64 0, i32 3, i64 %267
  %269 = load i8, ptr %268, align 1, !tbaa !16
  %270 = and i8 %269, %254
  %271 = add i8 %270, %6
  %272 = getelementptr inbounds [16 x i8], ptr %4, i64 0, i64 %267
  store i8 %271, ptr %272, align 2, !tbaa !16
  %273 = or i64 %257, 3
  %274 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %0, i64 0, i32 3, i64 %273
  %275 = load i8, ptr %274, align 1, !tbaa !16
  %276 = and i8 %275, %254
  %277 = add i8 %276, %6
  %278 = getelementptr inbounds [16 x i8], ptr %4, i64 0, i64 %273
  store i8 %277, ptr %278, align 1, !tbaa !16
  %279 = add nuw nsw i64 %257, 4
  %280 = icmp ult i64 %279, %255
  br i1 %280, label %256, label %281, !llvm.loop !311

281:                                              ; preds = %256
  %282 = load ptr, ptr %0, align 8, !tbaa !291
  %283 = load ptr, ptr %8, align 8, !tbaa !296
  %284 = load i32, ptr %283, align 8
  %285 = lshr i32 %284, 16
  %286 = trunc i32 %285 to i8
  %287 = add i8 %286, -59
  %288 = icmp ult i8 %287, 24
  br i1 %288, label %290, label %289

289:                                              ; preds = %290, %281
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 29105, ptr noundef nonnull @.str.131) #30
  br label %299

290:                                              ; preds = %281
  %291 = zext i8 %287 to i32
  %292 = lshr i32 16260863, %291
  %293 = and i32 %292, 1
  %294 = icmp eq i32 %293, 0
  br i1 %294, label %289, label %295

295:                                              ; preds = %290
  %296 = sext i8 %287 to i64
  %297 = getelementptr inbounds [24 x i32], ptr @switch.table.expand_vec_perm_1.1390, i64 0, i64 %296
  %298 = load i32, ptr %297, align 4
  br label %299

299:                                              ; preds = %295, %289
  %300 = phi i32 [ 0, %289 ], [ %298, %295 ]
  %301 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 125, i32 noundef %300, ptr noundef nonnull %283, ptr noundef nonnull %283) #30
  %302 = call fastcc zeroext i8 @expand_vselect(ptr noundef %282, ptr noundef %301, ptr noundef nonnull %4, i32 noundef %7), !range !66
  %303 = icmp eq i8 %302, 0
  br i1 %303, label %304, label %921

304:                                              ; preds = %251, %299, %1
  %305 = load ptr, ptr %0, align 8, !tbaa !291
  %306 = load ptr, ptr %8, align 8, !tbaa !296
  %307 = load ptr, ptr %10, align 8, !tbaa !295
  %308 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %0, i64 0, i32 3
  %309 = load i32, ptr %306, align 8
  %310 = lshr i32 %309, 16
  %311 = trunc i32 %310 to i8
  %312 = add i8 %311, -59
  %313 = icmp ult i8 %312, 24
  br i1 %313, label %315, label %314

314:                                              ; preds = %315, %304
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 29105, ptr noundef nonnull @.str.131) #30
  br label %324

315:                                              ; preds = %304
  %316 = zext i8 %312 to i32
  %317 = lshr i32 16260863, %316
  %318 = and i32 %317, 1
  %319 = icmp eq i32 %318, 0
  br i1 %319, label %314, label %320

320:                                              ; preds = %315
  %321 = sext i8 %312 to i64
  %322 = getelementptr inbounds [24 x i32], ptr @switch.table.expand_vec_perm_1.1390, i64 0, i64 %321
  %323 = load i32, ptr %322, align 4
  br label %324

324:                                              ; preds = %320, %314
  %325 = phi i32 [ 0, %314 ], [ %323, %320 ]
  %326 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 125, i32 noundef %325, ptr noundef nonnull %306, ptr noundef %307) #30
  %327 = tail call fastcc zeroext i8 @expand_vselect(ptr noundef %305, ptr noundef %326, ptr noundef nonnull %308, i32 noundef %7), !range !66
  %328 = icmp eq i8 %327, 0
  br i1 %328, label %329, label %921

329:                                              ; preds = %324
  %330 = load ptr, ptr %8, align 8, !tbaa !296
  %331 = load ptr, ptr %10, align 8, !tbaa !295
  %332 = icmp eq ptr %330, %331
  br i1 %332, label %492, label %333

333:                                              ; preds = %329
  %334 = icmp eq i8 %6, 0
  br i1 %334, label %470, label %335

335:                                              ; preds = %333
  %336 = sub i8 0, %6
  %337 = zext i8 %6 to i64
  %338 = icmp ult i8 %6, 8
  br i1 %338, label %458, label %339

339:                                              ; preds = %335
  %340 = icmp ult i8 %6, 64
  br i1 %340, label %439, label %341

341:                                              ; preds = %339
  %342 = and i64 %337, 192
  %343 = insertelement <16 x i8> poison, i8 %6, i64 0
  %344 = shufflevector <16 x i8> %343, <16 x i8> poison, <16 x i32> zeroinitializer
  %345 = insertelement <16 x i8> poison, i8 %6, i64 0
  %346 = shufflevector <16 x i8> %345, <16 x i8> poison, <16 x i32> zeroinitializer
  %347 = insertelement <16 x i8> poison, i8 %6, i64 0
  %348 = shufflevector <16 x i8> %347, <16 x i8> poison, <16 x i32> zeroinitializer
  %349 = insertelement <16 x i8> poison, i8 %6, i64 0
  %350 = shufflevector <16 x i8> %349, <16 x i8> poison, <16 x i32> zeroinitializer
  %351 = insertelement <16 x i8> poison, i8 %336, i64 0
  %352 = shufflevector <16 x i8> %351, <16 x i8> poison, <16 x i32> zeroinitializer
  %353 = insertelement <16 x i8> poison, i8 %336, i64 0
  %354 = shufflevector <16 x i8> %353, <16 x i8> poison, <16 x i32> zeroinitializer
  %355 = insertelement <16 x i8> poison, i8 %336, i64 0
  %356 = shufflevector <16 x i8> %355, <16 x i8> poison, <16 x i32> zeroinitializer
  %357 = insertelement <16 x i8> poison, i8 %336, i64 0
  %358 = shufflevector <16 x i8> %357, <16 x i8> poison, <16 x i32> zeroinitializer
  %359 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %0, i64 0, i32 3, i64 0
  %360 = load <16 x i8>, ptr %359, align 1, !tbaa !16
  %361 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %0, i64 0, i32 4
  %362 = load <16 x i8>, ptr %361, align 1, !tbaa !16
  %363 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %0, i64 1, i32 1
  %364 = load <16 x i8>, ptr %363, align 1, !tbaa !16
  %365 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %0, i64 1, i32 3
  %366 = load <16 x i8>, ptr %365, align 1, !tbaa !16
  %367 = icmp ult <16 x i8> %360, %344
  %368 = icmp ult <16 x i8> %362, %346
  %369 = icmp ult <16 x i8> %364, %348
  %370 = icmp ult <16 x i8> %366, %350
  %371 = select <16 x i1> %367, <16 x i8> %344, <16 x i8> %352
  %372 = select <16 x i1> %368, <16 x i8> %346, <16 x i8> %354
  %373 = select <16 x i1> %369, <16 x i8> %348, <16 x i8> %356
  %374 = select <16 x i1> %370, <16 x i8> %350, <16 x i8> %358
  %375 = add <16 x i8> %371, %360
  %376 = add <16 x i8> %372, %362
  %377 = add <16 x i8> %373, %364
  %378 = add <16 x i8> %374, %366
  store <16 x i8> %375, ptr %4, align 16, !tbaa !16
  %379 = getelementptr inbounds i8, ptr %4, i64 16
  store <16 x i8> %376, ptr %379, align 16, !tbaa !16
  %380 = getelementptr inbounds i8, ptr %4, i64 32
  store <16 x i8> %377, ptr %380, align 16, !tbaa !16
  %381 = getelementptr inbounds i8, ptr %4, i64 48
  store <16 x i8> %378, ptr %381, align 16, !tbaa !16
  %382 = icmp eq i64 %342, 64
  br i1 %382, label %434, label %383, !llvm.loop !312

383:                                              ; preds = %341
  %384 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %0, i64 0, i32 3, i64 64
  %385 = load <16 x i8>, ptr %384, align 1, !tbaa !16
  %386 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %0, i64 2, i32 1
  %387 = load <16 x i8>, ptr %386, align 1, !tbaa !16
  %388 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %0, i64 2, i32 3
  %389 = load <16 x i8>, ptr %388, align 1, !tbaa !16
  %390 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %0, i64 2, i32 4
  %391 = load <16 x i8>, ptr %390, align 1, !tbaa !16
  %392 = icmp ult <16 x i8> %385, %344
  %393 = icmp ult <16 x i8> %387, %346
  %394 = icmp ult <16 x i8> %389, %348
  %395 = icmp ult <16 x i8> %391, %350
  %396 = select <16 x i1> %392, <16 x i8> %344, <16 x i8> %352
  %397 = select <16 x i1> %393, <16 x i8> %346, <16 x i8> %354
  %398 = select <16 x i1> %394, <16 x i8> %348, <16 x i8> %356
  %399 = select <16 x i1> %395, <16 x i8> %350, <16 x i8> %358
  %400 = add <16 x i8> %396, %385
  %401 = add <16 x i8> %397, %387
  %402 = add <16 x i8> %398, %389
  %403 = add <16 x i8> %399, %391
  %404 = getelementptr inbounds [16 x i8], ptr %4, i64 0, i64 64
  store <16 x i8> %400, ptr %404, align 16, !tbaa !16
  %405 = getelementptr inbounds [16 x i8], ptr %4, i64 5
  store <16 x i8> %401, ptr %405, align 16, !tbaa !16
  %406 = getelementptr inbounds [16 x i8], ptr %4, i64 6
  store <16 x i8> %402, ptr %406, align 16, !tbaa !16
  %407 = getelementptr inbounds [16 x i8], ptr %4, i64 7
  store <16 x i8> %403, ptr %407, align 16, !tbaa !16
  %408 = icmp eq i64 %342, 128
  br i1 %408, label %434, label %409, !llvm.loop !312

409:                                              ; preds = %383
  %410 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %0, i64 0, i32 3, i64 128
  %411 = load <16 x i8>, ptr %410, align 1, !tbaa !16
  %412 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %0, i64 3, i32 3
  %413 = load <16 x i8>, ptr %412, align 1, !tbaa !16
  %414 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %0, i64 3, i32 4
  %415 = load <16 x i8>, ptr %414, align 1, !tbaa !16
  %416 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %0, i64 4, i32 1
  %417 = load <16 x i8>, ptr %416, align 1, !tbaa !16
  %418 = icmp ult <16 x i8> %411, %344
  %419 = icmp ult <16 x i8> %413, %346
  %420 = icmp ult <16 x i8> %415, %348
  %421 = icmp ult <16 x i8> %417, %350
  %422 = select <16 x i1> %418, <16 x i8> %344, <16 x i8> %352
  %423 = select <16 x i1> %419, <16 x i8> %346, <16 x i8> %354
  %424 = select <16 x i1> %420, <16 x i8> %348, <16 x i8> %356
  %425 = select <16 x i1> %421, <16 x i8> %350, <16 x i8> %358
  %426 = add <16 x i8> %422, %411
  %427 = add <16 x i8> %423, %413
  %428 = add <16 x i8> %424, %415
  %429 = add <16 x i8> %425, %417
  %430 = getelementptr inbounds [16 x i8], ptr %4, i64 0, i64 128
  store <16 x i8> %426, ptr %430, align 16, !tbaa !16
  %431 = getelementptr inbounds [16 x i8], ptr %4, i64 9
  store <16 x i8> %427, ptr %431, align 16, !tbaa !16
  %432 = getelementptr inbounds [16 x i8], ptr %4, i64 10
  store <16 x i8> %428, ptr %432, align 16, !tbaa !16
  %433 = getelementptr inbounds [16 x i8], ptr %4, i64 11
  store <16 x i8> %429, ptr %433, align 16, !tbaa !16
  br label %434

434:                                              ; preds = %409, %383, %341
  %435 = icmp eq i64 %342, %337
  br i1 %435, label %470, label %436

436:                                              ; preds = %434
  %437 = and i64 %337, 56
  %438 = icmp eq i64 %437, 0
  br i1 %438, label %458, label %439

439:                                              ; preds = %339, %436
  %440 = phi i64 [ %342, %436 ], [ 0, %339 ]
  %441 = and i64 %337, 248
  %442 = insertelement <8 x i8> poison, i8 %6, i64 0
  %443 = shufflevector <8 x i8> %442, <8 x i8> poison, <8 x i32> zeroinitializer
  %444 = insertelement <8 x i8> poison, i8 %336, i64 0
  %445 = shufflevector <8 x i8> %444, <8 x i8> poison, <8 x i32> zeroinitializer
  br label %446

446:                                              ; preds = %446, %439
  %447 = phi i64 [ %440, %439 ], [ %454, %446 ]
  %448 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %0, i64 0, i32 3, i64 %447
  %449 = load <8 x i8>, ptr %448, align 1, !tbaa !16
  %450 = icmp ult <8 x i8> %449, %443
  %451 = select <8 x i1> %450, <8 x i8> %443, <8 x i8> %445
  %452 = add <8 x i8> %451, %449
  %453 = getelementptr inbounds [16 x i8], ptr %4, i64 0, i64 %447
  store <8 x i8> %452, ptr %453, align 8, !tbaa !16
  %454 = add nuw i64 %447, 8
  %455 = icmp eq i64 %454, %441
  br i1 %455, label %456, label %446, !llvm.loop !313

456:                                              ; preds = %446
  %457 = icmp eq i64 %441, %337
  br i1 %457, label %470, label %458

458:                                              ; preds = %335, %436, %456
  %459 = phi i64 [ 0, %335 ], [ %342, %436 ], [ %441, %456 ]
  br label %460

460:                                              ; preds = %458, %460
  %461 = phi i64 [ %468, %460 ], [ %459, %458 ]
  %462 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %0, i64 0, i32 3, i64 %461
  %463 = load i8, ptr %462, align 1, !tbaa !16
  %464 = icmp ult i8 %463, %6
  %465 = select i1 %464, i8 %6, i8 %336
  %466 = add i8 %465, %463
  %467 = getelementptr inbounds [16 x i8], ptr %4, i64 0, i64 %461
  store i8 %466, ptr %467, align 1, !tbaa !16
  %468 = add nuw nsw i64 %461, 1
  %469 = icmp eq i64 %468, %337
  br i1 %469, label %470, label %460, !llvm.loop !314

470:                                              ; preds = %460, %434, %456, %333
  %471 = load ptr, ptr %0, align 8, !tbaa !291
  %472 = load i32, ptr %331, align 8
  %473 = lshr i32 %472, 16
  %474 = trunc i32 %473 to i8
  %475 = add i8 %474, -59
  %476 = icmp ult i8 %475, 24
  br i1 %476, label %478, label %477

477:                                              ; preds = %478, %470
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 29105, ptr noundef nonnull @.str.131) #30
  br label %487

478:                                              ; preds = %470
  %479 = zext i8 %475 to i32
  %480 = lshr i32 16260863, %479
  %481 = and i32 %480, 1
  %482 = icmp eq i32 %481, 0
  br i1 %482, label %477, label %483

483:                                              ; preds = %478
  %484 = sext i8 %475 to i64
  %485 = getelementptr inbounds [24 x i32], ptr @switch.table.expand_vec_perm_1.1390, i64 0, i64 %484
  %486 = load i32, ptr %485, align 4
  br label %487

487:                                              ; preds = %483, %477
  %488 = phi i32 [ 0, %477 ], [ %486, %483 ]
  %489 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 125, i32 noundef %488, ptr noundef nonnull %331, ptr noundef %330) #30
  %490 = call fastcc zeroext i8 @expand_vselect(ptr noundef %471, ptr noundef %489, ptr noundef nonnull %4, i32 noundef %7), !range !66
  %491 = icmp eq i8 %490, 0
  br i1 %491, label %492, label %921

492:                                              ; preds = %487, %329
  %493 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %0, i64 0, i32 4
  %494 = load i32, ptr %493, align 8, !tbaa !293
  %495 = load i8, ptr %5, align 4, !tbaa !294
  %496 = load i32, ptr @ix86_isa_flags, align 4, !tbaa !20
  %497 = and i32 %496, 524288
  %498 = icmp eq i32 %497, 0
  br i1 %498, label %842, label %499

499:                                              ; preds = %492
  %500 = load ptr, ptr %8, align 8, !tbaa !296
  %501 = load ptr, ptr %10, align 8, !tbaa !295
  %502 = icmp eq ptr %500, %501
  br i1 %502, label %842, label %503

503:                                              ; preds = %499
  %504 = zext i32 %494 to i64
  %505 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %504
  %506 = load i8, ptr %505, align 1, !tbaa !16
  %507 = icmp eq i8 %506, 16
  %508 = icmp eq i32 %494, 82
  %509 = select i1 %507, i1 true, i1 %508
  %510 = icmp eq i32 %494, 81
  %511 = select i1 %509, i1 true, i1 %510
  br i1 %511, label %512, label %842

512:                                              ; preds = %503
  %513 = icmp eq i8 %495, 0
  br i1 %513, label %528, label %514

514:                                              ; preds = %512
  %515 = zext i8 %495 to i64
  br label %519

516:                                              ; preds = %519
  %517 = add nuw nsw i64 %520, 1
  %518 = icmp eq i64 %517, %515
  br i1 %518, label %528, label %519, !llvm.loop !315

519:                                              ; preds = %516, %514
  %520 = phi i64 [ 0, %514 ], [ %517, %516 ]
  %521 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %0, i64 0, i32 3, i64 %520
  %522 = load i8, ptr %521, align 1, !tbaa !16
  %523 = zext i8 %522 to i64
  %524 = icmp eq i64 %520, %523
  %525 = add nuw nsw i64 %520, %515
  %526 = icmp eq i64 %525, %523
  %527 = select i1 %524, i1 true, i1 %526
  br i1 %527, label %516, label %842

528:                                              ; preds = %516, %512
  %529 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %0, i64 0, i32 6
  %530 = load i8, ptr %529, align 1, !tbaa !303
  %531 = icmp eq i8 %530, 0
  br i1 %531, label %532, label %921

532:                                              ; preds = %528
  %533 = icmp eq i32 %494, 63
  br i1 %533, label %534, label %686

534:                                              ; preds = %532
  %535 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %0, i64 0, i32 3, i64 0
  %536 = load i8, ptr %535, align 1, !tbaa !16
  %537 = zext i8 %536 to i32
  %538 = add nuw nsw i32 %537, 1
  %539 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %0, i64 0, i32 3, i64 1
  %540 = load i8, ptr %539, align 1, !tbaa !16
  %541 = zext i8 %540 to i32
  %542 = icmp eq i32 %538, %541
  br i1 %542, label %543, label %606, !llvm.loop !316

543:                                              ; preds = %534
  %544 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %0, i64 0, i32 3, i64 2
  %545 = load i8, ptr %544, align 1, !tbaa !16
  %546 = zext i8 %545 to i32
  %547 = add nuw nsw i32 %546, 1
  %548 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %0, i64 0, i32 3, i64 3
  %549 = load i8, ptr %548, align 1, !tbaa !16
  %550 = zext i8 %549 to i32
  %551 = icmp eq i32 %547, %550
  br i1 %551, label %552, label %606, !llvm.loop !316

552:                                              ; preds = %543
  %553 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %0, i64 0, i32 3, i64 4
  %554 = load i8, ptr %553, align 1, !tbaa !16
  %555 = zext i8 %554 to i32
  %556 = add nuw nsw i32 %555, 1
  %557 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %0, i64 0, i32 3, i64 5
  %558 = load i8, ptr %557, align 1, !tbaa !16
  %559 = zext i8 %558 to i32
  %560 = icmp eq i32 %556, %559
  br i1 %560, label %561, label %606, !llvm.loop !316

561:                                              ; preds = %552
  %562 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %0, i64 0, i32 3, i64 6
  %563 = load i8, ptr %562, align 1, !tbaa !16
  %564 = zext i8 %563 to i32
  %565 = add nuw nsw i32 %564, 1
  %566 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %0, i64 0, i32 3, i64 7
  %567 = load i8, ptr %566, align 1, !tbaa !16
  %568 = zext i8 %567 to i32
  %569 = icmp eq i32 %565, %568
  br i1 %569, label %570, label %606, !llvm.loop !316

570:                                              ; preds = %561
  %571 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %0, i64 0, i32 3, i64 8
  %572 = load i8, ptr %571, align 1, !tbaa !16
  %573 = zext i8 %572 to i32
  %574 = add nuw nsw i32 %573, 1
  %575 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %0, i64 0, i32 3, i64 9
  %576 = load i8, ptr %575, align 1, !tbaa !16
  %577 = zext i8 %576 to i32
  %578 = icmp eq i32 %574, %577
  br i1 %578, label %579, label %606, !llvm.loop !316

579:                                              ; preds = %570
  %580 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %0, i64 0, i32 3, i64 10
  %581 = load i8, ptr %580, align 1, !tbaa !16
  %582 = zext i8 %581 to i32
  %583 = add nuw nsw i32 %582, 1
  %584 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %0, i64 0, i32 3, i64 11
  %585 = load i8, ptr %584, align 1, !tbaa !16
  %586 = zext i8 %585 to i32
  %587 = icmp eq i32 %583, %586
  br i1 %587, label %588, label %606, !llvm.loop !316

588:                                              ; preds = %579
  %589 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %0, i64 0, i32 3, i64 12
  %590 = load i8, ptr %589, align 1, !tbaa !16
  %591 = zext i8 %590 to i32
  %592 = add nuw nsw i32 %591, 1
  %593 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %0, i64 0, i32 3, i64 13
  %594 = load i8, ptr %593, align 1, !tbaa !16
  %595 = zext i8 %594 to i32
  %596 = icmp eq i32 %592, %595
  br i1 %596, label %597, label %606, !llvm.loop !316

597:                                              ; preds = %588
  %598 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %0, i64 0, i32 3, i64 14
  %599 = load i8, ptr %598, align 1, !tbaa !16
  %600 = zext i8 %599 to i32
  %601 = add nuw nsw i32 %600, 1
  %602 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %0, i64 0, i32 3, i64 15
  %603 = load i8, ptr %602, align 1, !tbaa !16
  %604 = zext i8 %603 to i32
  %605 = icmp eq i32 %601, %604
  br label %606

606:                                              ; preds = %597, %588, %579, %570, %561, %552, %543, %534
  %607 = phi i1 [ %542, %534 ], [ %551, %543 ], [ %560, %552 ], [ %569, %561 ], [ %578, %570 ], [ %587, %579 ], [ %596, %588 ], [ %605, %597 ]
  br i1 %607, label %686, label %608

608:                                              ; preds = %606
  call void @llvm.lifetime.start.p0(i64 128, ptr nonnull %3) #30
  br i1 %513, label %677, label %609

609:                                              ; preds = %608
  %610 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 64), align 16
  %611 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 63), align 8
  %612 = zext i8 %495 to i64
  %613 = icmp ult i8 %495, 16
  br i1 %613, label %666, label %614

614:                                              ; preds = %609
  %615 = and i64 %612, 240
  %616 = insertelement <4 x i8> poison, i8 %495, i64 0
  %617 = shufflevector <4 x i8> %616, <4 x i8> poison, <4 x i32> zeroinitializer
  %618 = insertelement <4 x i8> poison, i8 %495, i64 0
  %619 = shufflevector <4 x i8> %618, <4 x i8> poison, <4 x i32> zeroinitializer
  %620 = insertelement <4 x i8> poison, i8 %495, i64 0
  %621 = shufflevector <4 x i8> %620, <4 x i8> poison, <4 x i32> zeroinitializer
  %622 = insertelement <4 x i8> poison, i8 %495, i64 0
  %623 = shufflevector <4 x i8> %622, <4 x i8> poison, <4 x i32> zeroinitializer
  %624 = insertelement <4 x ptr> poison, ptr %610, i64 0
  %625 = shufflevector <4 x ptr> %624, <4 x ptr> poison, <4 x i32> zeroinitializer
  %626 = insertelement <4 x ptr> poison, ptr %611, i64 0
  %627 = shufflevector <4 x ptr> %626, <4 x ptr> poison, <4 x i32> zeroinitializer
  %628 = insertelement <4 x ptr> poison, ptr %610, i64 0
  %629 = shufflevector <4 x ptr> %628, <4 x ptr> poison, <4 x i32> zeroinitializer
  %630 = insertelement <4 x ptr> poison, ptr %611, i64 0
  %631 = shufflevector <4 x ptr> %630, <4 x ptr> poison, <4 x i32> zeroinitializer
  %632 = insertelement <4 x ptr> poison, ptr %610, i64 0
  %633 = shufflevector <4 x ptr> %632, <4 x ptr> poison, <4 x i32> zeroinitializer
  %634 = insertelement <4 x ptr> poison, ptr %611, i64 0
  %635 = shufflevector <4 x ptr> %634, <4 x ptr> poison, <4 x i32> zeroinitializer
  %636 = insertelement <4 x ptr> poison, ptr %610, i64 0
  %637 = shufflevector <4 x ptr> %636, <4 x ptr> poison, <4 x i32> zeroinitializer
  %638 = insertelement <4 x ptr> poison, ptr %611, i64 0
  %639 = shufflevector <4 x ptr> %638, <4 x ptr> poison, <4 x i32> zeroinitializer
  br label %640

640:                                              ; preds = %640, %614
  %641 = phi i64 [ 0, %614 ], [ %662, %640 ]
  %642 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %0, i64 0, i32 3, i64 %641
  %643 = load <4 x i8>, ptr %642, align 1, !tbaa !16
  %644 = getelementptr inbounds i8, ptr %642, i64 4
  %645 = load <4 x i8>, ptr %644, align 1, !tbaa !16
  %646 = getelementptr inbounds i8, ptr %642, i64 8
  %647 = load <4 x i8>, ptr %646, align 1, !tbaa !16
  %648 = getelementptr inbounds i8, ptr %642, i64 12
  %649 = load <4 x i8>, ptr %648, align 1, !tbaa !16
  %650 = icmp ult <4 x i8> %643, %617
  %651 = icmp ult <4 x i8> %645, %619
  %652 = icmp ult <4 x i8> %647, %621
  %653 = icmp ult <4 x i8> %649, %623
  %654 = select <4 x i1> %650, <4 x ptr> %625, <4 x ptr> %627
  %655 = select <4 x i1> %651, <4 x ptr> %629, <4 x ptr> %631
  %656 = select <4 x i1> %652, <4 x ptr> %633, <4 x ptr> %635
  %657 = select <4 x i1> %653, <4 x ptr> %637, <4 x ptr> %639
  %658 = getelementptr inbounds [16 x ptr], ptr %3, i64 0, i64 %641
  store <4 x ptr> %654, ptr %658, align 16, !tbaa !5
  %659 = getelementptr inbounds ptr, ptr %658, i64 4
  store <4 x ptr> %655, ptr %659, align 16, !tbaa !5
  %660 = getelementptr inbounds ptr, ptr %658, i64 8
  store <4 x ptr> %656, ptr %660, align 16, !tbaa !5
  %661 = getelementptr inbounds ptr, ptr %658, i64 12
  store <4 x ptr> %657, ptr %661, align 16, !tbaa !5
  %662 = add nuw i64 %641, 16
  %663 = icmp eq i64 %662, %615
  br i1 %663, label %664, label %640, !llvm.loop !317

664:                                              ; preds = %640
  %665 = icmp eq i64 %615, %612
  br i1 %665, label %677, label %666

666:                                              ; preds = %609, %664
  %667 = phi i64 [ 0, %609 ], [ %615, %664 ]
  br label %668

668:                                              ; preds = %666, %668
  %669 = phi i64 [ %675, %668 ], [ %667, %666 ]
  %670 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %0, i64 0, i32 3, i64 %669
  %671 = load i8, ptr %670, align 1, !tbaa !16
  %672 = icmp ult i8 %671, %495
  %673 = select i1 %672, ptr %610, ptr %611
  %674 = getelementptr inbounds [16 x ptr], ptr %3, i64 0, i64 %669
  store ptr %673, ptr %674, align 8, !tbaa !5
  %675 = add nuw nsw i64 %669, 1
  %676 = icmp eq i64 %675, %612
  br i1 %676, label %677, label %668, !llvm.loop !318

677:                                              ; preds = %668, %664, %608
  %678 = call ptr @gen_rtvec_v(i32 noundef 16, ptr noundef nonnull %3) #30
  %679 = call ptr @gen_rtx_CONST_VECTOR(i32 noundef 63, ptr noundef %678) #30
  %680 = call ptr @force_reg(i32 noundef 63, ptr noundef %679) #30
  %681 = load ptr, ptr %0, align 8, !tbaa !291
  %682 = load ptr, ptr %8, align 8, !tbaa !296
  %683 = load ptr, ptr %10, align 8, !tbaa !295
  %684 = call ptr @gen_sse4_1_pblendvb(ptr noundef %681, ptr noundef %682, ptr noundef %683, ptr noundef %680) #30
  %685 = call ptr @emit_insn(ptr noundef %684) #30
  call void @llvm.lifetime.end.p0(i64 128, ptr nonnull %3) #30
  br label %921

686:                                              ; preds = %606, %532
  %687 = load ptr, ptr %0, align 8, !tbaa !291
  switch i32 %494, label %830 [
    i32 82, label %743
    i32 81, label %743
    i32 80, label %743
    i32 79, label %743
    i32 64, label %743
    i32 66, label %738
    i32 65, label %723
    i32 63, label %688
  ]

688:                                              ; preds = %686
  %689 = load i8, ptr %308, align 1, !tbaa !16
  %690 = icmp ugt i8 %689, 15
  %691 = zext i1 %690 to i32
  %692 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %0, i64 0, i32 3, i64 2
  %693 = load i8, ptr %692, align 1, !tbaa !16
  %694 = icmp ugt i8 %693, 15
  %695 = select i1 %694, i32 2, i32 0
  %696 = or i32 %695, %691
  %697 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %0, i64 0, i32 3, i64 4
  %698 = load i8, ptr %697, align 1, !tbaa !16
  %699 = icmp ugt i8 %698, 15
  %700 = select i1 %699, i32 4, i32 0
  %701 = or i32 %696, %700
  %702 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %0, i64 0, i32 3, i64 6
  %703 = load i8, ptr %702, align 1, !tbaa !16
  %704 = icmp ugt i8 %703, 15
  %705 = select i1 %704, i32 8, i32 0
  %706 = or i32 %701, %705
  %707 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %0, i64 0, i32 3, i64 8
  %708 = load i8, ptr %707, align 1, !tbaa !16
  %709 = icmp ugt i8 %708, 15
  %710 = select i1 %709, i32 16, i32 0
  %711 = or i32 %706, %710
  %712 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %0, i64 0, i32 3, i64 10
  %713 = load i8, ptr %712, align 1, !tbaa !16
  %714 = icmp ugt i8 %713, 15
  %715 = select i1 %714, i32 32, i32 0
  %716 = or i32 %711, %715
  %717 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %0, i64 0, i32 3, i64 12
  %718 = load i8, ptr %717, align 1, !tbaa !16
  %719 = icmp ugt i8 %718, 15
  %720 = select i1 %719, i32 64, i32 0
  %721 = or i32 %716, %720
  %722 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %0, i64 0, i32 3, i64 14
  br label %815

723:                                              ; preds = %686
  %724 = load i8, ptr %308, align 1, !tbaa !16
  %725 = icmp ugt i8 %724, 3
  %726 = select i1 %725, i32 3, i32 0
  %727 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %0, i64 0, i32 3, i64 1
  %728 = load i8, ptr %727, align 1, !tbaa !16
  %729 = icmp ugt i8 %728, 3
  %730 = select i1 %729, i32 12, i32 0
  %731 = or i32 %730, %726
  %732 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %0, i64 0, i32 3, i64 2
  %733 = load i8, ptr %732, align 1, !tbaa !16
  %734 = icmp ugt i8 %733, 3
  %735 = select i1 %734, i32 48, i32 0
  %736 = or i32 %731, %735
  %737 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %0, i64 0, i32 3, i64 3
  br label %815

738:                                              ; preds = %686
  %739 = load i8, ptr %308, align 1, !tbaa !16
  %740 = icmp ugt i8 %739, 1
  %741 = select i1 %740, i32 15, i32 0
  %742 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %0, i64 0, i32 3, i64 1
  br label %815

743:                                              ; preds = %686, %686, %686, %686, %686
  br i1 %513, label %831, label %744

744:                                              ; preds = %743
  %745 = zext i8 %495 to i64
  %746 = icmp ult i8 %495, 16
  br i1 %746, label %800, label %747

747:                                              ; preds = %744
  %748 = and i64 %745, 240
  %749 = insertelement <4 x i8> poison, i8 %495, i64 0
  %750 = shufflevector <4 x i8> %749, <4 x i8> poison, <4 x i32> zeroinitializer
  %751 = insertelement <4 x i8> poison, i8 %495, i64 0
  %752 = shufflevector <4 x i8> %751, <4 x i8> poison, <4 x i32> zeroinitializer
  %753 = insertelement <4 x i8> poison, i8 %495, i64 0
  %754 = shufflevector <4 x i8> %753, <4 x i8> poison, <4 x i32> zeroinitializer
  %755 = insertelement <4 x i8> poison, i8 %495, i64 0
  %756 = shufflevector <4 x i8> %755, <4 x i8> poison, <4 x i32> zeroinitializer
  br label %757

757:                                              ; preds = %757, %747
  %758 = phi i64 [ 0, %747 ], [ %791, %757 ]
  %759 = phi <4 x i32> [ zeroinitializer, %747 ], [ %787, %757 ]
  %760 = phi <4 x i32> [ zeroinitializer, %747 ], [ %788, %757 ]
  %761 = phi <4 x i32> [ zeroinitializer, %747 ], [ %789, %757 ]
  %762 = phi <4 x i32> [ zeroinitializer, %747 ], [ %790, %757 ]
  %763 = phi <4 x i32> [ <i32 0, i32 1, i32 2, i32 3>, %747 ], [ %792, %757 ]
  %764 = add <4 x i32> %763, <i32 4, i32 4, i32 4, i32 4>
  %765 = add <4 x i32> %763, <i32 8, i32 8, i32 8, i32 8>
  %766 = add <4 x i32> %763, <i32 12, i32 12, i32 12, i32 12>
  %767 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %0, i64 0, i32 3, i64 %758
  %768 = load <4 x i8>, ptr %767, align 1, !tbaa !16
  %769 = getelementptr inbounds i8, ptr %767, i64 4
  %770 = load <4 x i8>, ptr %769, align 1, !tbaa !16
  %771 = getelementptr inbounds i8, ptr %767, i64 8
  %772 = load <4 x i8>, ptr %771, align 1, !tbaa !16
  %773 = getelementptr inbounds i8, ptr %767, i64 12
  %774 = load <4 x i8>, ptr %773, align 1, !tbaa !16
  %775 = icmp uge <4 x i8> %768, %750
  %776 = icmp uge <4 x i8> %770, %752
  %777 = icmp uge <4 x i8> %772, %754
  %778 = icmp uge <4 x i8> %774, %756
  %779 = zext <4 x i1> %775 to <4 x i32>
  %780 = zext <4 x i1> %776 to <4 x i32>
  %781 = zext <4 x i1> %777 to <4 x i32>
  %782 = zext <4 x i1> %778 to <4 x i32>
  %783 = shl nuw <4 x i32> %779, %763
  %784 = shl nuw <4 x i32> %780, %764
  %785 = shl nuw <4 x i32> %781, %765
  %786 = shl nuw <4 x i32> %782, %766
  %787 = or <4 x i32> %783, %759
  %788 = or <4 x i32> %784, %760
  %789 = or <4 x i32> %785, %761
  %790 = or <4 x i32> %786, %762
  %791 = add nuw i64 %758, 16
  %792 = add <4 x i32> %763, <i32 16, i32 16, i32 16, i32 16>
  %793 = icmp eq i64 %791, %748
  br i1 %793, label %794, label %757, !llvm.loop !319

794:                                              ; preds = %757
  %795 = or <4 x i32> %788, %787
  %796 = or <4 x i32> %789, %795
  %797 = or <4 x i32> %790, %796
  %798 = tail call i32 @llvm.vector.reduce.or.v4i32(<4 x i32> %797)
  %799 = icmp eq i64 %748, %745
  br i1 %799, label %831, label %800

800:                                              ; preds = %744, %794
  %801 = phi i64 [ 0, %744 ], [ %748, %794 ]
  %802 = phi i32 [ 0, %744 ], [ %798, %794 ]
  br label %803

803:                                              ; preds = %800, %803
  %804 = phi i64 [ %813, %803 ], [ %801, %800 ]
  %805 = phi i32 [ %812, %803 ], [ %802, %800 ]
  %806 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %0, i64 0, i32 3, i64 %804
  %807 = load i8, ptr %806, align 1, !tbaa !16
  %808 = icmp uge i8 %807, %495
  %809 = zext i1 %808 to i32
  %810 = trunc i64 %804 to i32
  %811 = shl nuw i32 %809, %810
  %812 = or i32 %811, %805
  %813 = add nuw nsw i64 %804, 1
  %814 = icmp eq i64 %813, %745
  br i1 %814, label %831, label %803, !llvm.loop !320

815:                                              ; preds = %738, %723, %688
  %816 = phi ptr [ %722, %688 ], [ %737, %723 ], [ %742, %738 ]
  %817 = phi i8 [ 15, %688 ], [ 3, %723 ], [ 1, %738 ]
  %818 = phi i32 [ 128, %688 ], [ 192, %723 ], [ 240, %738 ]
  %819 = phi i32 [ %721, %688 ], [ %736, %723 ], [ %741, %738 ]
  %820 = load i8, ptr %816, align 1, !tbaa !16
  %821 = icmp ugt i8 %820, %817
  %822 = select i1 %821, i32 %818, i32 0
  %823 = or i32 %822, %819
  %824 = load ptr, ptr @rtl_hooks, align 8, !tbaa !187
  %825 = tail call ptr %824(i32 noundef 64, ptr noundef %687) #30
  %826 = load ptr, ptr @rtl_hooks, align 8, !tbaa !187
  %827 = tail call ptr %826(i32 noundef 64, ptr noundef %500) #30
  %828 = load ptr, ptr @rtl_hooks, align 8, !tbaa !187
  %829 = tail call ptr %828(i32 noundef 64, ptr noundef %501) #30
  br label %831

830:                                              ; preds = %686
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 29243, ptr noundef nonnull @.str.131) #30
  br label %831

831:                                              ; preds = %803, %794, %830, %815, %743
  %832 = phi i32 [ 0, %830 ], [ %823, %815 ], [ 0, %743 ], [ %798, %794 ], [ %812, %803 ]
  %833 = phi ptr [ %687, %830 ], [ %825, %815 ], [ %687, %743 ], [ %687, %794 ], [ %687, %803 ]
  %834 = phi ptr [ %500, %830 ], [ %827, %815 ], [ %500, %743 ], [ %500, %794 ], [ %500, %803 ]
  %835 = phi ptr [ %501, %830 ], [ %829, %815 ], [ %501, %743 ], [ %501, %794 ], [ %501, %803 ]
  %836 = phi i32 [ %494, %830 ], [ 64, %815 ], [ %494, %743 ], [ %494, %794 ], [ %494, %803 ]
  %837 = zext i32 %832 to i64
  %838 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef %837) #30
  %839 = tail call ptr @gen_rtx_fmt_eee_stat(i32 noundef 123, i32 noundef %836, ptr noundef %835, ptr noundef %834, ptr noundef %838) #30
  %840 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 23, i32 noundef 0, ptr noundef %833, ptr noundef %839) #30
  %841 = tail call ptr @emit_insn(ptr noundef %840) #30
  br label %921

842:                                              ; preds = %519, %499, %492, %503
  %843 = tail call fastcc zeroext i8 @expand_vec_perm_vpermil(ptr noundef nonnull %0)
  %844 = icmp eq i8 %843, 0
  br i1 %844, label %845, label %921

845:                                              ; preds = %842
  call void @llvm.lifetime.start.p0(i64 128, ptr nonnull %2) #30
  %846 = load ptr, ptr %8, align 8, !tbaa !296
  %847 = load ptr, ptr %10, align 8, !tbaa !295
  %848 = icmp eq ptr %846, %847
  %849 = load i32, ptr @ix86_isa_flags, align 4, !tbaa !20
  br i1 %848, label %850, label %853

850:                                              ; preds = %845
  %851 = and i32 %849, 4194304
  %852 = icmp eq i32 %851, 0
  br i1 %852, label %920, label %856

853:                                              ; preds = %845
  %854 = and i32 %849, 8388608
  %855 = icmp eq i32 %854, 0
  br i1 %855, label %920, label %856

856:                                              ; preds = %853, %850
  %857 = load i32, ptr %493, align 8, !tbaa !293
  %858 = zext i32 %857 to i64
  %859 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %858
  %860 = load i8, ptr %859, align 1, !tbaa !16
  %861 = icmp eq i8 %860, 16
  br i1 %861, label %862, label %920

862:                                              ; preds = %856
  %863 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %0, i64 0, i32 6
  %864 = load i8, ptr %863, align 1, !tbaa !303
  %865 = icmp eq i8 %864, 0
  br i1 %865, label %866, label %919

866:                                              ; preds = %862
  %867 = load i8, ptr %5, align 4, !tbaa !294
  %868 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %858
  %869 = load i8, ptr %868, align 1, !tbaa !16
  %870 = zext i8 %869 to i64
  %871 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %870
  %872 = load i8, ptr %871, align 1, !tbaa !16
  %873 = zext i8 %872 to i64
  %874 = icmp eq i8 %867, 0
  %875 = icmp eq i8 %872, 0
  %876 = select i1 %874, i1 true, i1 %875
  br i1 %876, label %897, label %877

877:                                              ; preds = %866
  %878 = zext i8 %867 to i64
  br label %879

879:                                              ; preds = %894, %877
  %880 = phi i64 [ 0, %877 ], [ %895, %894 ]
  %881 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %0, i64 0, i32 3, i64 %880
  %882 = load i8, ptr %881, align 1, !tbaa !16
  %883 = zext i8 %882 to i64
  %884 = mul nuw nsw i64 %883, %873
  %885 = mul nuw nsw i64 %880, %873
  br label %886

886:                                              ; preds = %886, %879
  %887 = phi i64 [ 0, %879 ], [ %892, %886 ]
  %888 = add nuw nsw i64 %887, %884
  %889 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef %888) #30
  %890 = add nuw nsw i64 %887, %885
  %891 = getelementptr inbounds [16 x ptr], ptr %2, i64 0, i64 %890
  store ptr %889, ptr %891, align 8, !tbaa !5
  %892 = add nuw nsw i64 %887, 1
  %893 = icmp eq i64 %892, %873
  br i1 %893, label %894, label %886, !llvm.loop !321

894:                                              ; preds = %886
  %895 = add nuw nsw i64 %880, 1
  %896 = icmp eq i64 %895, %878
  br i1 %896, label %897, label %879, !llvm.loop !322

897:                                              ; preds = %894, %866
  %898 = call ptr @gen_rtvec_v(i32 noundef 16, ptr noundef nonnull %2) #30
  %899 = call ptr @gen_rtx_CONST_VECTOR(i32 noundef 63, ptr noundef %898) #30
  %900 = call ptr @force_reg(i32 noundef 63, ptr noundef %899) #30
  %901 = load ptr, ptr @rtl_hooks, align 8, !tbaa !187
  %902 = load ptr, ptr %0, align 8, !tbaa !291
  %903 = call ptr %901(i32 noundef 63, ptr noundef %902) #30
  %904 = load ptr, ptr @rtl_hooks, align 8, !tbaa !187
  %905 = load ptr, ptr %8, align 8, !tbaa !296
  %906 = call ptr %904(i32 noundef 63, ptr noundef %905) #30
  %907 = load ptr, ptr %8, align 8, !tbaa !296
  %908 = load ptr, ptr %10, align 8, !tbaa !295
  %909 = icmp eq ptr %907, %908
  br i1 %909, label %910, label %912

910:                                              ; preds = %897
  %911 = call ptr @gen_ssse3_pshufbv16qi3(ptr noundef %903, ptr noundef %906, ptr noundef %900) #30
  br label %916

912:                                              ; preds = %897
  %913 = load ptr, ptr @rtl_hooks, align 8, !tbaa !187
  %914 = call ptr %913(i32 noundef 63, ptr noundef %908) #30
  %915 = call ptr @gen_xop_pperm(ptr noundef %903, ptr noundef %906, ptr noundef %914, ptr noundef %900) #30
  br label %916

916:                                              ; preds = %912, %910
  %917 = phi ptr [ %911, %910 ], [ %915, %912 ]
  %918 = call ptr @emit_insn(ptr noundef %917) #30
  br label %919

919:                                              ; preds = %862, %916
  call void @llvm.lifetime.end.p0(i64 128, ptr nonnull %2) #30
  br label %921

920:                                              ; preds = %853, %850, %856
  call void @llvm.lifetime.end.p0(i64 128, ptr nonnull %2) #30
  br label %921

921:                                              ; preds = %117, %920, %919, %831, %677, %528, %842, %487, %324, %113, %246, %299
  %922 = phi i8 [ 1, %299 ], [ 1, %246 ], [ 1, %113 ], [ 1, %324 ], [ 1, %487 ], [ 1, %842 ], [ 1, %528 ], [ 1, %677 ], [ 1, %831 ], [ 0, %920 ], [ 1, %919 ], [ 1, %117 ]
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %4) #30
  ret i8 %922
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc zeroext i8 @expand_vec_perm_even_odd_1(ptr nocapture noundef %0, i32 noundef %1) unnamed_addr #9 {
  %3 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %0, i64 0, i32 4
  %4 = load i32, ptr %3, align 8, !tbaa !293
  switch i32 %4, label %128 [
    i32 82, label %5
    i32 81, label %29
    i32 80, label %50
    i32 79, label %50
    i32 66, label %50
    i32 65, label %50
    i32 64, label %51
    i32 63, label %86
  ]

5:                                                ; preds = %2
  %6 = tail call ptr @gen_reg_rtx(i32 noundef 82) #30
  %7 = tail call ptr @gen_reg_rtx(i32 noundef 82) #30
  %8 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %0, i64 0, i32 1
  %9 = load ptr, ptr %8, align 8, !tbaa !296
  %10 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %0, i64 0, i32 2
  %11 = load ptr, ptr %10, align 8, !tbaa !295
  %12 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef 32) #30
  %13 = tail call ptr @gen_avx_vperm2f128v4df3(ptr noundef %6, ptr noundef %9, ptr noundef %11, ptr noundef %12) #30
  %14 = tail call ptr @emit_insn(ptr noundef %13) #30
  %15 = load ptr, ptr %8, align 8, !tbaa !296
  %16 = load ptr, ptr %10, align 8, !tbaa !295
  %17 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef 49) #30
  %18 = tail call ptr @gen_avx_vperm2f128v4df3(ptr noundef %7, ptr noundef %15, ptr noundef %16, ptr noundef %17) #30
  %19 = tail call ptr @emit_insn(ptr noundef %18) #30
  %20 = icmp eq i32 %1, 0
  %21 = load ptr, ptr %0, align 8, !tbaa !291
  br i1 %20, label %24, label %22

22:                                               ; preds = %5
  %23 = tail call ptr @gen_avx_unpckhpd256(ptr noundef %21, ptr noundef %6, ptr noundef %7) #30
  br label %26

24:                                               ; preds = %5
  %25 = tail call ptr @gen_avx_unpcklpd256(ptr noundef %21, ptr noundef %6, ptr noundef %7) #30
  br label %26

26:                                               ; preds = %24, %22
  %27 = phi ptr [ %23, %22 ], [ %25, %24 ]
  %28 = tail call ptr @emit_insn(ptr noundef %27) #30
  br label %129

29:                                               ; preds = %2
  %30 = tail call ptr @gen_reg_rtx(i32 noundef 81) #30
  %31 = tail call ptr @gen_reg_rtx(i32 noundef 81) #30
  %32 = tail call ptr @gen_reg_rtx(i32 noundef 81) #30
  %33 = tail call ptr @gen_reg_rtx(i32 noundef 81) #30
  %34 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %0, i64 0, i32 1
  %35 = load ptr, ptr %34, align 8, !tbaa !296
  %36 = tail call fastcc zeroext i8 @expand_vselect(ptr noundef %30, ptr noundef %35, ptr noundef nonnull @expand_vec_perm_even_odd_1.perm1, i32 noundef 8), !range !66
  %37 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %0, i64 0, i32 2
  %38 = load ptr, ptr %37, align 8, !tbaa !295
  %39 = tail call fastcc zeroext i8 @expand_vselect(ptr noundef %31, ptr noundef %38, ptr noundef nonnull @expand_vec_perm_even_odd_1.perm1, i32 noundef 8), !range !66
  %40 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef 32) #30
  %41 = tail call ptr @gen_avx_vperm2f128v8sf3(ptr noundef %32, ptr noundef %30, ptr noundef %31, ptr noundef %40) #30
  %42 = tail call ptr @emit_insn(ptr noundef %41) #30
  %43 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef 49) #30
  %44 = tail call ptr @gen_avx_vperm2f128v8sf3(ptr noundef %33, ptr noundef %30, ptr noundef %31, ptr noundef %43) #30
  %45 = tail call ptr @emit_insn(ptr noundef %44) #30
  store ptr %32, ptr %34, align 8, !tbaa !296
  store ptr %33, ptr %37, align 8, !tbaa !295
  %46 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %0, i64 0, i32 3
  %47 = icmp eq i32 %1, 0
  %48 = select i1 %47, i64 940131937103118592, i64 1084812282779271938
  store i64 %48, ptr %46, align 8
  %49 = tail call fastcc zeroext i8 @expand_vec_perm_vpermil(ptr noundef nonnull %0)
  br label %129

50:                                               ; preds = %2, %2, %2, %2
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 29790, ptr noundef nonnull @.str.131) #30
  br label %51

51:                                               ; preds = %2, %50
  %52 = load i32, ptr @ix86_isa_flags, align 4, !tbaa !20
  %53 = and i32 %52, 4194304
  %54 = icmp eq i32 %53, 0
  br i1 %54, label %57, label %55

55:                                               ; preds = %51
  %56 = tail call fastcc zeroext i8 @expand_vec_perm_pshufb2(ptr noundef nonnull %0), !range !66
  br label %129

57:                                               ; preds = %51
  %58 = tail call ptr @gen_reg_rtx(i32 noundef 64) #30
  %59 = tail call ptr @gen_reg_rtx(i32 noundef 64) #30
  %60 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %0, i64 0, i32 1
  %61 = load ptr, ptr %60, align 8, !tbaa !296
  %62 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %0, i64 0, i32 2
  %63 = load ptr, ptr %62, align 8, !tbaa !295
  %64 = tail call ptr @gen_vec_interleave_highv8hi(ptr noundef %58, ptr noundef %61, ptr noundef %63) #30
  %65 = tail call ptr @emit_insn(ptr noundef %64) #30
  %66 = load ptr, ptr %0, align 8, !tbaa !291
  %67 = load ptr, ptr %60, align 8, !tbaa !296
  %68 = load ptr, ptr %62, align 8, !tbaa !295
  %69 = tail call ptr @gen_vec_interleave_lowv8hi(ptr noundef %66, ptr noundef %67, ptr noundef %68) #30
  %70 = tail call ptr @emit_insn(ptr noundef %69) #30
  %71 = load ptr, ptr %0, align 8, !tbaa !291
  %72 = tail call ptr @gen_vec_interleave_highv8hi(ptr noundef %59, ptr noundef %71, ptr noundef %58) #30
  %73 = tail call ptr @emit_insn(ptr noundef %72) #30
  %74 = load ptr, ptr %0, align 8, !tbaa !291
  %75 = tail call ptr @gen_vec_interleave_lowv8hi(ptr noundef %74, ptr noundef %74, ptr noundef %58) #30
  %76 = tail call ptr @emit_insn(ptr noundef %75) #30
  %77 = icmp eq i32 %1, 0
  %78 = load ptr, ptr %0, align 8, !tbaa !291
  br i1 %77, label %81, label %79

79:                                               ; preds = %57
  %80 = tail call ptr @gen_vec_interleave_highv8hi(ptr noundef %78, ptr noundef %78, ptr noundef %59) #30
  br label %83

81:                                               ; preds = %57
  %82 = tail call ptr @gen_vec_interleave_lowv8hi(ptr noundef %78, ptr noundef %78, ptr noundef %59) #30
  br label %83

83:                                               ; preds = %81, %79
  %84 = phi ptr [ %80, %79 ], [ %82, %81 ]
  %85 = tail call ptr @emit_insn(ptr noundef %84) #30
  br label %129

86:                                               ; preds = %2
  %87 = load i32, ptr @ix86_isa_flags, align 4, !tbaa !20
  %88 = and i32 %87, 4194304
  %89 = icmp eq i32 %88, 0
  br i1 %89, label %92, label %90

90:                                               ; preds = %86
  %91 = tail call fastcc zeroext i8 @expand_vec_perm_pshufb2(ptr noundef nonnull %0), !range !66
  br label %129

92:                                               ; preds = %86
  %93 = tail call ptr @gen_reg_rtx(i32 noundef 63) #30
  %94 = tail call ptr @gen_reg_rtx(i32 noundef 63) #30
  %95 = tail call ptr @gen_reg_rtx(i32 noundef 63) #30
  %96 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %0, i64 0, i32 1
  %97 = load ptr, ptr %96, align 8, !tbaa !296
  %98 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %0, i64 0, i32 2
  %99 = load ptr, ptr %98, align 8, !tbaa !295
  %100 = tail call ptr @gen_vec_interleave_highv16qi(ptr noundef %93, ptr noundef %97, ptr noundef %99) #30
  %101 = tail call ptr @emit_insn(ptr noundef %100) #30
  %102 = load ptr, ptr %0, align 8, !tbaa !291
  %103 = load ptr, ptr %96, align 8, !tbaa !296
  %104 = load ptr, ptr %98, align 8, !tbaa !295
  %105 = tail call ptr @gen_vec_interleave_lowv16qi(ptr noundef %102, ptr noundef %103, ptr noundef %104) #30
  %106 = tail call ptr @emit_insn(ptr noundef %105) #30
  %107 = load ptr, ptr %0, align 8, !tbaa !291
  %108 = tail call ptr @gen_vec_interleave_highv16qi(ptr noundef %94, ptr noundef %107, ptr noundef %93) #30
  %109 = tail call ptr @emit_insn(ptr noundef %108) #30
  %110 = load ptr, ptr %0, align 8, !tbaa !291
  %111 = tail call ptr @gen_vec_interleave_lowv16qi(ptr noundef %110, ptr noundef %110, ptr noundef %93) #30
  %112 = tail call ptr @emit_insn(ptr noundef %111) #30
  %113 = load ptr, ptr %0, align 8, !tbaa !291
  %114 = tail call ptr @gen_vec_interleave_highv16qi(ptr noundef %95, ptr noundef %113, ptr noundef %94) #30
  %115 = tail call ptr @emit_insn(ptr noundef %114) #30
  %116 = load ptr, ptr %0, align 8, !tbaa !291
  %117 = tail call ptr @gen_vec_interleave_lowv16qi(ptr noundef %116, ptr noundef %116, ptr noundef %94) #30
  %118 = tail call ptr @emit_insn(ptr noundef %117) #30
  %119 = icmp eq i32 %1, 0
  %120 = load ptr, ptr %0, align 8, !tbaa !291
  br i1 %119, label %123, label %121

121:                                              ; preds = %92
  %122 = tail call ptr @gen_vec_interleave_highv16qi(ptr noundef %120, ptr noundef %120, ptr noundef %95) #30
  br label %125

123:                                              ; preds = %92
  %124 = tail call ptr @gen_vec_interleave_lowv16qi(ptr noundef %120, ptr noundef %120, ptr noundef %95) #30
  br label %125

125:                                              ; preds = %123, %121
  %126 = phi ptr [ %122, %121 ], [ %124, %123 ]
  %127 = tail call ptr @emit_insn(ptr noundef %126) #30
  br label %129

128:                                              ; preds = %2
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 29836, ptr noundef nonnull @.str.131) #30
  br label %129

129:                                              ; preds = %26, %29, %83, %125, %128, %90, %55
  %130 = phi i8 [ %91, %90 ], [ %56, %55 ], [ 1, %128 ], [ 1, %125 ], [ 1, %83 ], [ 1, %29 ], [ 1, %26 ]
  ret i8 %130
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind sspstrong willreturn memory(read, argmem: none, inaccessiblemem: none) uwtable
define dso_local ptr @ix86_fn_abi_va_list(ptr nocapture readnone %0) #16 {
  %2 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 44), align 16, !tbaa !5
  ret ptr %2
}

; Function Attrs: nounwind sspstrong uwtable
define dso_local ptr @ix86_canonical_va_list_type(ptr noundef %0) #9 {
  %2 = load i64, ptr %0, align 8
  %3 = trunc i64 %2 to i16
  switch i16 %3, label %13 [
    i16 47, label %4
    i16 48, label %4
    i16 49, label %4
    i16 10, label %7
    i16 12, label %7
  ]

4:                                                ; preds = %1, %1, %1
  %5 = getelementptr inbounds %struct.tree_common, ptr %0, i64 0, i32 2
  %6 = load ptr, ptr %5, align 8, !tbaa !16
  br label %13

7:                                                ; preds = %1, %1
  %8 = getelementptr inbounds %struct.tree_common, ptr %0, i64 0, i32 2
  %9 = load ptr, ptr %8, align 8, !tbaa !16
  %10 = load i64, ptr %9, align 8
  %11 = trunc i64 %10 to i16
  switch i16 %11, label %13 [
    i16 10, label %12
    i16 12, label %12
  ]

12:                                               ; preds = %7, %7
  br label %13

13:                                               ; preds = %7, %1, %12, %4
  %14 = phi ptr [ %6, %4 ], [ %9, %12 ], [ %0, %1 ], [ %0, %7 ]
  %15 = tail call ptr @std_canonical_va_list_type(ptr noundef %14) #30
  ret ptr %15
}

declare ptr @std_canonical_va_list_type(ptr noundef) local_unnamed_addr #3

; Function Attrs: mustprogress nofree norecurse nosync nounwind sspstrong willreturn memory(none) uwtable
define dso_local i32 @ix86_enum_va_list(i32 noundef %0, ptr nocapture noundef readnone %1, ptr nocapture noundef readnone %2) local_unnamed_addr #11 {
  ret i32 0
}

declare zeroext i8 @default_assemble_integer(ptr noundef, i32 noundef, i32 noundef) #3

declare void @default_globalize_label(ptr noundef, ptr noundef) #3

declare void @default_globalize_decl_name(ptr noundef, ptr noundef) #3

declare void @default_emit_unwind_label(ptr noundef, ptr noundef, i32 noundef, i32 noundef) #3

declare void @default_emit_except_table_label(ptr noundef) #3

declare void @default_unwind_emit(ptr noundef, ptr noundef) #3

declare void @default_internal_label(ptr noundef, ptr noundef, i64 noundef) #3

declare zeroext i8 @hook_bool_rtx_false(ptr noundef) #3

declare void @default_assemble_visibility(ptr noundef, i32 noundef) #3

declare void @default_function_pro_epilogue(ptr noundef, i64 noundef) #3

declare void @no_asm_to_stream(ptr noundef) #3

; Function Attrs: nounwind sspstrong uwtable
define internal void @ix86_output_function_epilogue(ptr nocapture readnone %0, i64 %1) #9 {
  %3 = load ptr, ptr @pic_offset_table_rtx, align 8, !tbaa !5
  %4 = icmp eq ptr %3, null
  br i1 %4, label %10, label %5

5:                                                ; preds = %2
  %6 = getelementptr i8, ptr %3, i64 8
  %7 = load i32, ptr %6, align 8, !tbaa !16
  tail call void @df_ref_change_reg_with_loc(i32 noundef %7, i32 noundef 3, ptr noundef nonnull %3) #30
  %8 = load ptr, ptr @pic_offset_table_rtx, align 8, !tbaa !5
  %9 = getelementptr inbounds %struct.rtx_def, ptr %8, i64 0, i32 1
  store i32 3, ptr %9, align 8, !tbaa !16
  br label %10

10:                                               ; preds = %5, %2
  ret void
}

declare void @hook_void_void() #3

declare void @default_elf_asm_named_section(ptr noundef, i32 noundef, ptr noundef) #3

declare i32 @default_reloc_rw_mask() #3

declare ptr @default_elf_select_section(ptr noundef, i32 noundef, i64 noundef) #3

declare ptr @default_elf_select_rtx_section(i32 noundef, ptr noundef, i64 noundef) #3

declare void @default_unique_section(ptr noundef, i32 noundef) #3

declare ptr @default_function_rodata_section(ptr noundef) #3

declare void @default_named_section_asm_out_constructor(ptr noundef, i32 noundef) #3

declare void @default_named_section_asm_out_destructor(ptr noundef, i32 noundef) #3

; Function Attrs: nounwind sspstrong uwtable
define internal void @x86_output_mi_thunk(ptr noundef %0, ptr nocapture readnone %1, i64 noundef %2, i64 noundef %3, ptr noundef %4) #9 {
  %6 = alloca [3 x ptr], align 16
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %6) #30
  %7 = getelementptr inbounds %struct.tree_common, ptr %4, i64 0, i32 2
  %8 = load ptr, ptr %7, align 8, !tbaa !16
  %9 = getelementptr inbounds %struct.tree_common, ptr %8, i64 0, i32 2
  %10 = load ptr, ptr %9, align 8, !tbaa !16
  %11 = tail call i32 @aggregate_value_p(ptr noundef %10, ptr noundef %8) #30
  %12 = icmp eq i32 %11, 0
  %13 = tail call fastcc i32 @ix86_function_regparm(ptr noundef %8, ptr noundef %4)
  %14 = icmp sgt i32 %13, 0
  br i1 %14, label %15, label %35

15:                                               ; preds = %5
  %16 = tail call zeroext i8 @stdarg_p(ptr noundef nonnull %8) #30
  %17 = icmp eq i8 %16, 0
  br i1 %17, label %18, label %35

18:                                               ; preds = %15
  %19 = getelementptr inbounds %struct.tree_type, ptr %8, i64 0, i32 4
  %20 = load ptr, ptr %19, align 8, !tbaa !16
  %21 = tail call ptr @lookup_attribute(ptr noundef nonnull @.str.128, ptr noundef %20) #30
  %22 = icmp eq ptr %21, null
  br i1 %22, label %25, label %23

23:                                               ; preds = %18
  %24 = select i1 %12, i32 2, i32 1
  br label %32

25:                                               ; preds = %18
  br i1 %12, label %32, label %26

26:                                               ; preds = %25
  %27 = icmp eq i32 %13, 1
  br i1 %27, label %28, label %32

28:                                               ; preds = %26
  %29 = load ptr, ptr getelementptr inbounds ([11 x ptr], ptr @global_rtl, i64 0, i64 2), align 16, !tbaa !5
  %30 = tail call ptr @plus_constant(ptr noundef %29, i64 noundef 4) #30
  %31 = tail call ptr @gen_rtx_MEM(i32 noundef 16, ptr noundef %30) #30
  br label %40

32:                                               ; preds = %26, %25, %23
  %33 = phi i32 [ %24, %23 ], [ 1, %26 ], [ 0, %25 ]
  %34 = tail call ptr @gen_rtx_REG(i32 noundef 16, i32 noundef %33) #30
  br label %40

35:                                               ; preds = %15, %5
  %36 = load ptr, ptr getelementptr inbounds ([11 x ptr], ptr @global_rtl, i64 0, i64 2), align 16, !tbaa !5
  %37 = select i1 %12, i64 4, i64 8
  %38 = tail call ptr @plus_constant(ptr noundef %36, i64 noundef %37) #30
  %39 = tail call ptr @gen_rtx_MEM(i32 noundef 16, ptr noundef %38) #30
  br label %40

40:                                               ; preds = %28, %32, %35
  %41 = phi ptr [ %39, %35 ], [ %34, %32 ], [ %31, %28 ]
  %42 = tail call ptr @emit_barrier() #30
  tail call void @final_start_function(ptr noundef %42, ptr noundef %0, i32 noundef 1) #30
  %43 = load i32, ptr %41, align 8
  %44 = and i32 %43, 65535
  %45 = icmp eq i32 %44, 37
  br i1 %45, label %51, label %46

46:                                               ; preds = %40
  %47 = icmp eq i64 %3, 0
  br i1 %47, label %51, label %48

48:                                               ; preds = %46
  store ptr %41, ptr %6, align 16, !tbaa !5
  %49 = tail call ptr @gen_rtx_REG(i32 noundef 16, i32 noundef 0) #30
  %50 = getelementptr inbounds [3 x ptr], ptr %6, i64 0, i64 1
  store ptr %49, ptr %50, align 8, !tbaa !5
  call void @output_asm_insn(ptr noundef nonnull @.str.443, ptr noundef nonnull %6) #30
  br label %51

51:                                               ; preds = %46, %40, %48
  %52 = phi ptr [ %49, %48 ], [ %41, %40 ], [ null, %46 ]
  %53 = icmp eq i64 %2, 0
  br i1 %53, label %65, label %54

54:                                               ; preds = %51
  %55 = icmp slt i64 %2, 0
  %56 = icmp eq i64 %2, 128
  %57 = or i1 %55, %56
  %58 = sub nsw i64 0, %2
  %59 = select i1 %57, i64 %58, i64 %2
  %60 = call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef %59) #30
  store ptr %60, ptr %6, align 16, !tbaa !5
  %61 = icmp eq ptr %52, null
  %62 = select i1 %61, ptr %41, ptr %52
  %63 = getelementptr inbounds [3 x ptr], ptr %6, i64 0, i64 1
  store ptr %62, ptr %63, align 8, !tbaa !5
  %64 = select i1 %57, ptr @.str.444, ptr @.str.445
  call void @output_asm_insn(ptr noundef nonnull %64, ptr noundef nonnull %6) #30
  br label %65

65:                                               ; preds = %54, %51
  %66 = icmp eq i64 %3, 0
  br i1 %66, label %79, label %67

67:                                               ; preds = %65
  %68 = load ptr, ptr %7, align 8, !tbaa !16
  %69 = getelementptr inbounds %struct.tree_type, ptr %68, i64 0, i32 4
  %70 = load ptr, ptr %69, align 8, !tbaa !16
  %71 = call ptr @lookup_attribute(ptr noundef nonnull @.str.128, ptr noundef %70) #30
  %72 = icmp eq ptr %71, null
  %73 = select i1 %72, i32 2, i32 0
  %74 = call ptr @gen_rtx_REG(i32 noundef 16, i32 noundef %73) #30
  %75 = call ptr @gen_rtx_MEM(i32 noundef 16, ptr noundef %52) #30
  store ptr %75, ptr %6, align 16, !tbaa !5
  %76 = getelementptr inbounds [3 x ptr], ptr %6, i64 0, i64 1
  store ptr %74, ptr %76, align 8, !tbaa !5
  call void @output_asm_insn(ptr noundef nonnull @.str.443, ptr noundef nonnull %6) #30
  %77 = call ptr @plus_constant(ptr noundef %74, i64 noundef %3) #30
  %78 = call ptr @gen_rtx_MEM(i32 noundef 16, ptr noundef %77) #30
  store ptr %78, ptr %6, align 16, !tbaa !5
  store ptr %52, ptr %76, align 8, !tbaa !5
  call void @output_asm_insn(ptr noundef nonnull @.str.446, ptr noundef nonnull %6) #30
  br label %79

79:                                               ; preds = %67, %65
  %80 = icmp eq ptr %52, null
  %81 = icmp eq ptr %52, %41
  %82 = select i1 %80, i1 true, i1 %81
  br i1 %82, label %85, label %83

83:                                               ; preds = %79
  store ptr %52, ptr %6, align 16, !tbaa !5
  %84 = getelementptr inbounds [3 x ptr], ptr %6, i64 0, i64 1
  store ptr %41, ptr %84, align 8, !tbaa !5
  call void @output_asm_insn(ptr noundef nonnull @.str.443, ptr noundef nonnull %6) #30
  br label %85

85:                                               ; preds = %83, %79
  %86 = getelementptr inbounds %struct.tree_decl_with_rtl, ptr %4, i64 0, i32 1
  %87 = load ptr, ptr %86, align 8, !tbaa !16
  %88 = icmp eq ptr %87, null
  br i1 %88, label %89, label %91

89:                                               ; preds = %85
  call void @make_decl_rtl(ptr noundef nonnull %4) #30
  %90 = load ptr, ptr %86, align 8, !tbaa !16
  br label %91

91:                                               ; preds = %85, %89
  %92 = phi ptr [ %90, %89 ], [ %87, %85 ]
  %93 = getelementptr inbounds %struct.rtx_def, ptr %92, i64 0, i32 1
  %94 = load ptr, ptr %93, align 8, !tbaa !16
  store ptr %94, ptr %6, align 16, !tbaa !5
  %95 = load i32, ptr @flag_pic, align 4, !tbaa !20
  %96 = icmp eq i32 %95, 0
  br i1 %96, label %105, label %97

97:                                               ; preds = %91
  %98 = load ptr, ptr getelementptr inbounds (%struct.gcc_target, ptr @targetm, i64 0, i32 49), align 8, !tbaa !323
  %99 = call zeroext i8 %98(ptr noundef nonnull %4) #30
  %100 = icmp eq i8 %99, 0
  br i1 %100, label %101, label %105

101:                                              ; preds = %97
  %102 = call ptr @gen_rtx_REG(i32 noundef 16, i32 noundef 2) #30
  %103 = call ptr @output_set_got(ptr noundef %102, ptr noundef null)
  %104 = getelementptr inbounds [3 x ptr], ptr %6, i64 0, i64 1
  store ptr %102, ptr %104, align 8, !tbaa !5
  call void @output_asm_insn(ptr noundef nonnull @.str.448, ptr noundef nonnull %6) #30
  br label %105

105:                                              ; preds = %91, %97, %101
  %106 = phi ptr [ @.str.449, %101 ], [ @.str.447, %97 ], [ @.str.447, %91 ]
  call void @output_asm_insn(ptr noundef nonnull %106, ptr noundef nonnull %6) #30
  call void @final_end_function() #30
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %6) #30
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define internal zeroext i8 @x86_can_output_mi_thunk(ptr nocapture readnone %0, i64 %1, i64 noundef %2, ptr noundef %3) #9 {
  %5 = getelementptr inbounds %struct.tree_common, ptr %3, i64 0, i32 2
  %6 = load ptr, ptr %5, align 8, !tbaa !16
  %7 = tail call fastcc i32 @ix86_function_regparm(ptr noundef %6, ptr noundef %3)
  %8 = icmp slt i32 %7, 3
  br i1 %8, label %19, label %9

9:                                                ; preds = %4
  %10 = icmp eq i64 %2, 0
  br i1 %10, label %11, label %19

11:                                               ; preds = %9
  %12 = load i32, ptr @flag_pic, align 4, !tbaa !20
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %18, label %14

14:                                               ; preds = %11
  %15 = load ptr, ptr getelementptr inbounds (%struct.gcc_target, ptr @targetm, i64 0, i32 49), align 8, !tbaa !323
  %16 = tail call zeroext i8 %15(ptr noundef nonnull %3) #30
  %17 = icmp eq i8 %16, 0
  br i1 %17, label %19, label %18

18:                                               ; preds = %14, %11
  br label %19

19:                                               ; preds = %14, %9, %4, %18
  %20 = phi i8 [ 1, %18 ], [ 1, %4 ], [ 0, %9 ], [ 0, %14 ]
  ret i8 %20
}

; Function Attrs: nounwind sspstrong uwtable
define internal void @x86_file_start() #9 {
  tail call void @default_file_start() #30
  %1 = load i32, ptr @ix86_asm_dialect, align 4, !tbaa !16
  %2 = icmp eq i32 %1, 1
  br i1 %2, label %3, label %6

3:                                                ; preds = %0
  %4 = load ptr, ptr @asm_out_file, align 8, !tbaa !5
  %5 = tail call i64 @fwrite(ptr nonnull @.str.450, i64 24, i64 1, ptr %4)
  br label %6

6:                                                ; preds = %3, %0
  ret void
}

declare void @file_end_indicate_exec_stack() #3

; Function Attrs: nounwind sspstrong uwtable
define internal void @ix86_code_end() #9 {
  %1 = alloca [2 x ptr], align 16
  %2 = alloca [32 x i8], align 16
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %1) #30
  %3 = getelementptr inbounds [2 x ptr], ptr %1, i64 0, i64 1
  %4 = load i32, ptr @pic_labels_used, align 4, !tbaa !20
  br label %5

5:                                                ; preds = %0, %58
  %6 = phi i32 [ %4, %0 ], [ %59, %58 ]
  %7 = phi i64 [ 0, %0 ], [ %60, %58 ]
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %2) #30
  %8 = trunc i64 %7 to i32
  %9 = shl nuw nsw i32 1, %8
  %10 = and i32 %6, %9
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %58, label %12

12:                                               ; preds = %5
  %13 = getelementptr inbounds [53 x ptr], ptr @reg_names, i64 0, i64 %7
  %14 = load ptr, ptr %13, align 8, !tbaa !5
  %15 = call i32 (ptr, ptr, ...) @sprintf(ptr noundef nonnull dereferenceable(1) %2, ptr noundef nonnull dereferenceable(1) @.str.336, ptr noundef %14)
  %16 = call ptr @get_identifier(ptr noundef nonnull %2) #30
  %17 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 38), align 16, !tbaa !5
  %18 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 55), align 8, !tbaa !5
  %19 = call ptr @build_function_type(ptr noundef %17, ptr noundef %18) #30
  %20 = call ptr @build_decl_stat(i32 noundef 1, i32 noundef 29, ptr noundef %16, ptr noundef %19) #30
  %21 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 38), align 16, !tbaa !5
  %22 = call ptr @build_decl_stat(i32 noundef 1, i32 noundef 36, ptr noundef null, ptr noundef %21) #30
  %23 = getelementptr inbounds %struct.tree_decl_non_common, ptr %20, i64 0, i32 3
  store ptr %22, ptr %23, align 8, !tbaa !16
  %24 = load i64, ptr %20, align 8
  %25 = or i64 %24, 201326592
  store i64 %25, ptr %20, align 8
  %26 = call ptr @decl_assembler_name(ptr noundef nonnull %20) #30
  %27 = getelementptr inbounds %struct.tree_decl_with_vis, ptr %20, i64 0, i32 3
  store ptr %26, ptr %27, align 8, !tbaa !16
  %28 = load ptr, ptr getelementptr inbounds (%struct.gcc_target, ptr @targetm, i64 0, i32 0, i32 23), align 8, !tbaa !324
  call void %28(ptr noundef nonnull %20, i32 noundef 0) #30
  %29 = call ptr @get_named_section(ptr noundef nonnull %20, ptr noundef null, i32 noundef 0) #30
  call void @switch_to_section(ptr noundef %29) #30
  %30 = load ptr, ptr getelementptr inbounds (%struct.gcc_target, ptr @targetm, i64 0, i32 0, i32 6), align 8, !tbaa !325
  %31 = load ptr, ptr @asm_out_file, align 8, !tbaa !5
  call void %30(ptr noundef %31, ptr noundef nonnull %2) #30
  %32 = load ptr, ptr @asm_out_file, align 8, !tbaa !5
  %33 = call i64 @fwrite(ptr nonnull @.str.451, i64 9, i64 1, ptr %32)
  %34 = load ptr, ptr @asm_out_file, align 8, !tbaa !5
  call void @assemble_name(ptr noundef %34, ptr noundef nonnull %2) #30
  %35 = load ptr, ptr @asm_out_file, align 8, !tbaa !5
  %36 = call i32 @putc(i32 noundef 10, ptr noundef %35)
  %37 = load ptr, ptr @asm_out_file, align 8, !tbaa !5
  %38 = call i64 @fwrite(ptr nonnull @.str.117, i64 7, i64 1, ptr %37)
  %39 = load ptr, ptr @asm_out_file, align 8, !tbaa !5
  call void @assemble_name(ptr noundef %39, ptr noundef nonnull %2) #30
  %40 = load ptr, ptr @asm_out_file, align 8, !tbaa !5
  %41 = call i64 @fwrite(ptr nonnull @.str.118, i64 2, i64 1, ptr %40)
  %42 = load ptr, ptr @asm_out_file, align 8, !tbaa !5
  %43 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %42, ptr noundef nonnull @.str.119, ptr noundef nonnull @.str.452)
  %44 = load ptr, ptr @asm_out_file, align 8, !tbaa !5
  %45 = call i32 @putc(i32 noundef 10, ptr noundef %44)
  %46 = load ptr, ptr @asm_out_file, align 8, !tbaa !5
  call void @assemble_name(ptr noundef %46, ptr noundef nonnull %2) #30
  %47 = load ptr, ptr @asm_out_file, align 8, !tbaa !5
  %48 = call i64 @fwrite(ptr nonnull @.str.123, i64 2, i64 1, ptr %47)
  %49 = call ptr @make_node_stat(i32 noundef 4) #30
  %50 = getelementptr inbounds %struct.tree_decl_common, ptr %20, i64 0, i32 5
  store ptr %49, ptr %50, align 8, !tbaa !16
  store ptr %20, ptr @current_function_decl, align 8, !tbaa !5
  call void @init_function_start(ptr noundef nonnull %20) #30
  store i8 0, ptr @first_function_block_is_cold, align 1, !tbaa !16
  %51 = call ptr @emit_barrier() #30
  %52 = load ptr, ptr @asm_out_file, align 8, !tbaa !5
  call void @final_start_function(ptr noundef %51, ptr noundef %52, i32 noundef 1) #30
  %53 = call ptr @gen_rtx_REG(i32 noundef 16, i32 noundef %8) #30
  store ptr %53, ptr %1, align 16, !tbaa !5
  %54 = load ptr, ptr getelementptr inbounds ([11 x ptr], ptr @global_rtl, i64 0, i64 2), align 16, !tbaa !5
  %55 = call ptr @gen_rtx_MEM(i32 noundef 16, ptr noundef %54) #30
  store ptr %55, ptr %3, align 8, !tbaa !5
  call void @output_asm_insn(ptr noundef nonnull @.str.453, ptr noundef nonnull %1) #30
  call void @output_asm_insn(ptr noundef nonnull @.str.454, ptr noundef nonnull %1) #30
  call void @final_end_function() #30
  call void @init_insn_lengths() #30
  %56 = load ptr, ptr @cfun, align 8, !tbaa !5
  call void @free_after_compilation(ptr noundef %56) #30
  call void @set_cfun(ptr noundef null) #30
  store ptr null, ptr @current_function_decl, align 8, !tbaa !5
  %57 = load i32, ptr @pic_labels_used, align 4, !tbaa !20
  br label %58

58:                                               ; preds = %5, %12
  %59 = phi i32 [ %6, %5 ], [ %57, %12 ]
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %2) #30
  %60 = add nuw nsw i64 %7, 1
  %61 = icmp eq i64 %60, 8
  br i1 %61, label %62, label %5, !llvm.loop !326

62:                                               ; preds = %58
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %1) #30
  ret void
}

declare void @default_external_libcall(ptr noundef) #3

declare void @hook_void_constcharptr(ptr noundef) #3

declare i32 @elf_record_gcc_switches(i32 noundef, ptr noundef) #3

declare void @default_asm_output_anchor(ptr noundef) #3

; Function Attrs: nounwind sspstrong uwtable
define internal void @i386_output_dwarf_dtprel(ptr noundef %0, i32 noundef %1, ptr noundef %2) #9 {
  %4 = tail call i64 @fwrite(ptr nonnull @.str.273, i64 7, i64 1, ptr %0)
  tail call void @output_addr_const(ptr noundef %0, ptr noundef %2) #30
  %5 = tail call i64 @fwrite(ptr nonnull @.str.222, i64 7, i64 1, ptr %0)
  switch i32 %1, label %8 [
    i32 4, label %9
    i32 8, label %6
  ]

6:                                                ; preds = %3
  %7 = tail call i64 @fwrite(ptr nonnull @.str.455, i64 3, i64 1, ptr %0)
  br label %9

8:                                                ; preds = %3
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 10931, ptr noundef nonnull @.str.131) #30
  br label %9

9:                                                ; preds = %8, %6, %3
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define internal i32 @ix86_adjust_cost(ptr noundef %0, ptr nocapture noundef readonly %1, ptr noundef %2, i32 noundef %3) #9 {
  %5 = load i32, ptr %1, align 8
  %6 = and i32 %5, 16711680
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %8, label %195

8:                                                ; preds = %4
  %9 = getelementptr inbounds %struct.rtx_def, ptr %2, i64 1, i32 1
  %10 = load i32, ptr %9, align 8, !tbaa !16
  %11 = icmp slt i32 %10, 0
  br i1 %11, label %12, label %17

12:                                               ; preds = %8
  %13 = getelementptr inbounds %struct.rtx_def, ptr %2, i64 1
  %14 = load ptr, ptr %13, align 8, !tbaa !16
  %15 = tail call i32 @recog(ptr noundef %14, ptr noundef nonnull %2, ptr noundef null) #30
  store i32 %15, ptr %9, align 8, !tbaa !16
  %16 = icmp slt i32 %15, 0
  br i1 %16, label %195, label %17

17:                                               ; preds = %8, %12
  %18 = getelementptr inbounds %struct.rtx_def, ptr %0, i64 1, i32 1
  %19 = load i32, ptr %18, align 8, !tbaa !16
  %20 = icmp slt i32 %19, 0
  br i1 %20, label %21, label %26

21:                                               ; preds = %17
  %22 = getelementptr inbounds %struct.rtx_def, ptr %0, i64 1
  %23 = load ptr, ptr %22, align 8, !tbaa !16
  %24 = tail call i32 @recog(ptr noundef %23, ptr noundef nonnull %0, ptr noundef null) #30
  store i32 %24, ptr %18, align 8, !tbaa !16
  %25 = icmp slt i32 %24, 0
  br i1 %25, label %195, label %26

26:                                               ; preds = %17, %21
  %27 = tail call i32 @get_attr_type(ptr noundef nonnull %0) #30
  %28 = tail call i32 @get_attr_type(ptr noundef nonnull %2) #30
  %29 = load i32, ptr @ix86_tune, align 4, !tbaa !16
  switch i32 %29, label %195 [
    i32 2, label %30
    i32 3, label %74
    i32 5, label %138
    i32 6, label %160
    i32 8, label %160
    i32 13, label %160
    i32 14, label %160
    i32 11, label %160
    i32 12, label %160
  ]

30:                                               ; preds = %26
  %31 = icmp eq i32 %27, 7
  br i1 %31, label %32, label %56

32:                                               ; preds = %30
  %33 = getelementptr inbounds %struct.rtx_def, ptr %0, i64 1
  %34 = load ptr, ptr %33, align 8, !tbaa !16
  %35 = load i32, ptr %34, align 8
  %36 = and i32 %35, 65535
  %37 = icmp eq i32 %36, 15
  br i1 %37, label %38, label %45

38:                                               ; preds = %32
  %39 = getelementptr inbounds %struct.rtx_def, ptr %34, i64 0, i32 1
  %40 = load ptr, ptr %39, align 8, !tbaa !16
  %41 = getelementptr inbounds %struct.rtvec_def, ptr %40, i64 0, i32 1
  %42 = load ptr, ptr %41, align 8, !tbaa !5
  %43 = load i32, ptr %42, align 8
  %44 = and i32 %43, 65535
  br label %45

45:                                               ; preds = %38, %32
  %46 = phi i32 [ %44, %38 ], [ %36, %32 ]
  %47 = phi ptr [ %42, %38 ], [ %34, %32 ]
  %48 = icmp eq i32 %46, 23
  br i1 %48, label %50, label %49

49:                                               ; preds = %45
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 19784, ptr noundef nonnull @.str.131) #30
  br label %50

50:                                               ; preds = %45, %49
  %51 = getelementptr inbounds %struct.rtx_def, ptr %47, i64 0, i32 1, i32 0, i32 0, i64 1
  %52 = load ptr, ptr %51, align 8, !tbaa !16
  %53 = tail call i32 @modified_in_p(ptr noundef %52, ptr noundef nonnull %2) #30
  %54 = icmp ne i32 %53, 0
  %55 = zext i1 %54 to i32
  br label %59

56:                                               ; preds = %30
  %57 = tail call zeroext i8 @ix86_agi_dependent(ptr noundef nonnull %2, ptr noundef nonnull %0), !range !66
  %58 = zext i8 %57 to i32
  br label %59

59:                                               ; preds = %56, %50
  %60 = phi i32 [ %55, %50 ], [ %58, %56 ]
  %61 = add nsw i32 %60, %3
  %62 = tail call fastcc i32 @ix86_flags_dependent(ptr noundef nonnull %0, ptr noundef nonnull %2, i32 noundef %27), !range !222
  %63 = icmp eq i32 %62, 0
  %64 = select i1 %63, i32 %61, i32 0
  %65 = icmp eq i32 %27, 27
  br i1 %65, label %66, label %195

66:                                               ; preds = %59
  %67 = tail call i32 @get_attr_memory(ptr noundef nonnull %0) #30
  %68 = icmp eq i32 %67, 2
  br i1 %68, label %69, label %195

69:                                               ; preds = %66
  %70 = tail call zeroext i8 @ix86_agi_dependent(ptr noundef nonnull %2, ptr noundef nonnull %0), !range !66
  %71 = icmp eq i8 %70, 0
  %72 = zext i1 %71 to i32
  %73 = add nsw i32 %64, %72
  br label %195

74:                                               ; preds = %26
  %75 = tail call i32 @get_attr_memory(ptr noundef nonnull %0) #30
  %76 = tail call i32 @get_attr_fp_int_src(ptr noundef nonnull %2) #30
  %77 = icmp eq i32 %76, 0
  %78 = add nsw i32 %3, 5
  %79 = select i1 %77, i32 %3, i32 %78
  %80 = icmp eq i32 %27, 27
  br i1 %80, label %81, label %126

81:                                               ; preds = %74
  %82 = load i32, ptr %2, align 8
  %83 = and i32 %82, 65535
  %84 = add nsw i32 %83, -7
  %85 = icmp ult i32 %84, 4
  br i1 %85, label %86, label %126

86:                                               ; preds = %81
  %87 = getelementptr inbounds %struct.rtx_def, ptr %2, i64 1
  %88 = load ptr, ptr %87, align 8, !tbaa !16
  %89 = load i32, ptr %88, align 8
  %90 = and i32 %89, 65535
  %91 = icmp eq i32 %90, 23
  br i1 %91, label %95, label %92

92:                                               ; preds = %86
  %93 = tail call ptr @single_set_2(ptr noundef nonnull %2, ptr noundef nonnull %88) #30
  %94 = icmp eq ptr %93, null
  br i1 %94, label %126, label %95

95:                                               ; preds = %86, %92
  %96 = phi ptr [ %93, %92 ], [ %88, %86 ]
  %97 = load i32, ptr %0, align 8
  %98 = and i32 %97, 65535
  %99 = add nsw i32 %98, -7
  %100 = icmp ult i32 %99, 4
  br i1 %100, label %101, label %126

101:                                              ; preds = %95
  %102 = getelementptr inbounds %struct.rtx_def, ptr %0, i64 1
  %103 = load ptr, ptr %102, align 8, !tbaa !16
  %104 = load i32, ptr %103, align 8
  %105 = and i32 %104, 65535
  %106 = icmp eq i32 %105, 23
  br i1 %106, label %110, label %107

107:                                              ; preds = %101
  %108 = tail call ptr @single_set_2(ptr noundef nonnull %0, ptr noundef nonnull %103) #30
  %109 = icmp eq ptr %108, null
  br i1 %109, label %126, label %110

110:                                              ; preds = %101, %107
  %111 = phi ptr [ %108, %107 ], [ %103, %101 ]
  %112 = getelementptr inbounds %struct.rtx_def, ptr %96, i64 0, i32 1
  %113 = load ptr, ptr %112, align 8, !tbaa !16
  %114 = getelementptr inbounds %struct.rtx_def, ptr %111, i64 0, i32 1, i32 0, i32 0, i64 1
  %115 = load ptr, ptr %114, align 8, !tbaa !16
  %116 = tail call i32 @rtx_equal_p(ptr noundef %113, ptr noundef %115) #30
  %117 = icmp eq i32 %116, 0
  br i1 %117, label %126, label %118

118:                                              ; preds = %110
  %119 = getelementptr inbounds %struct.rtx_def, ptr %111, i64 0, i32 1
  %120 = load ptr, ptr %119, align 8, !tbaa !16
  %121 = load i32, ptr %120, align 8
  %122 = and i32 %121, 65535
  %123 = icmp eq i32 %122, 43
  %124 = zext i1 %123 to i32
  %125 = add nsw i32 %79, %124
  br label %126

126:                                              ; preds = %95, %81, %118, %110, %107, %92, %74
  %127 = phi i32 [ %79, %110 ], [ %79, %107 ], [ %79, %92 ], [ %79, %74 ], [ %125, %118 ], [ %79, %81 ], [ %79, %95 ]
  %128 = and i32 %75, -3
  %129 = icmp eq i32 %128, 1
  br i1 %129, label %130, label %195

130:                                              ; preds = %126
  %131 = tail call zeroext i8 @ix86_agi_dependent(ptr noundef nonnull %2, ptr noundef nonnull %0), !range !66
  %132 = icmp eq i8 %131, 0
  br i1 %132, label %133, label %195

133:                                              ; preds = %130
  switch i32 %28, label %134 [
    i32 27, label %195
    i32 5, label %195
  ]

134:                                              ; preds = %133
  %135 = icmp sgt i32 %127, 1
  %136 = sext i1 %135 to i32
  %137 = add nsw i32 %127, %136
  br label %195

138:                                              ; preds = %26
  %139 = tail call i32 @get_attr_memory(ptr noundef nonnull %0) #30
  %140 = and i32 %27, -2
  %141 = icmp eq i32 %140, 20
  %142 = and i32 %28, -2
  %143 = icmp eq i32 %142, 20
  %144 = select i1 %141, i1 %143, i1 false
  br i1 %144, label %195, label %145

145:                                              ; preds = %138
  %146 = tail call i32 @get_attr_fp_int_src(ptr noundef nonnull %2) #30
  %147 = icmp eq i32 %146, 0
  %148 = add nsw i32 %3, 5
  %149 = select i1 %147, i32 %3, i32 %148
  %150 = and i32 %139, -3
  %151 = icmp eq i32 %150, 1
  br i1 %151, label %152, label %195

152:                                              ; preds = %145
  %153 = tail call zeroext i8 @ix86_agi_dependent(ptr noundef nonnull %2, ptr noundef nonnull %0), !range !66
  %154 = icmp eq i8 %153, 0
  br i1 %154, label %155, label %195

155:                                              ; preds = %152
  switch i32 %28, label %156 [
    i32 27, label %195
    i32 5, label %195
  ]

156:                                              ; preds = %155
  %157 = icmp sgt i32 %149, 2
  %158 = add nsw i32 %149, -2
  %159 = select i1 %157, i32 %158, i32 1
  br label %195

160:                                              ; preds = %26, %26, %26, %26, %26, %26
  %161 = tail call i32 @get_attr_memory(ptr noundef nonnull %0) #30
  %162 = and i32 %161, -3
  %163 = icmp eq i32 %162, 1
  br i1 %163, label %164, label %195

164:                                              ; preds = %160
  tail call void @extract_insn_cached(ptr noundef nonnull %0) #30
  %165 = load i8, ptr getelementptr inbounds (%struct.recog_data, ptr @recog_data, i64 0, i32 7), align 2, !tbaa !267
  %166 = sext i8 %165 to i64
  %167 = and i64 %166, 4294967295
  br label %168

168:                                              ; preds = %172, %164
  %169 = phi i64 [ %173, %172 ], [ %167, %164 ]
  %170 = trunc i64 %169 to i32
  %171 = icmp sgt i32 %170, 0
  br i1 %171, label %172, label %184

172:                                              ; preds = %168
  %173 = add nsw i64 %169, -1
  %174 = getelementptr inbounds [30 x ptr], ptr @recog_data, i64 0, i64 %173
  %175 = load ptr, ptr %174, align 8, !tbaa !5
  %176 = load i32, ptr %175, align 8
  %177 = and i32 %176, 65535
  %178 = icmp eq i32 %177, 43
  br i1 %178, label %179, label %168, !llvm.loop !277

179:                                              ; preds = %172
  %180 = getelementptr inbounds %struct.rtx_def, ptr %175, i64 0, i32 1
  %181 = load ptr, ptr %180, align 8, !tbaa !16
  %182 = tail call i32 @modified_in_p(ptr noundef %181, ptr noundef %2) #30
  %183 = icmp eq i32 %182, 0
  br i1 %183, label %184, label %195

184:                                              ; preds = %168, %179
  %185 = tail call i32 @get_attr_unit(ptr noundef %0) #30
  %186 = and i32 %185, -5
  %187 = icmp eq i32 %186, 0
  %188 = load i32, ptr @ix86_tune, align 4
  %189 = icmp eq i32 %188, 6
  %190 = select i1 %189, i32 2, i32 0
  %191 = select i1 %187, i32 3, i32 %190
  %192 = icmp sgt i32 %191, %3
  %193 = sub nsw i32 %3, %191
  %194 = select i1 %192, i32 0, i32 %193
  br label %195

195:                                              ; preds = %156, %134, %69, %66, %59, %126, %130, %145, %152, %179, %184, %160, %26, %133, %133, %155, %155, %138, %12, %21, %4
  %196 = phi i32 [ 0, %4 ], [ %3, %21 ], [ %3, %12 ], [ 1, %138 ], [ %3, %26 ], [ %3, %179 ], [ %194, %184 ], [ %3, %160 ], [ %149, %152 ], [ %149, %145 ], [ %127, %130 ], [ %127, %126 ], [ %64, %66 ], [ %64, %59 ], [ %73, %69 ], [ 1, %133 ], [ 1, %133 ], [ %137, %134 ], [ 1, %155 ], [ 1, %155 ], [ %159, %156 ]
  ret i32 %196
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind sspstrong willreturn memory(read, argmem: none, inaccessiblemem: none) uwtable
define internal i32 @ix86_issue_rate() #16 {
  %1 = load i32, ptr @ix86_tune, align 4, !tbaa !16
  %2 = add i32 %1, -2
  %3 = icmp ult i32 %2, 13
  br i1 %3, label %4, label %8

4:                                                ; preds = %0
  %5 = sext i32 %2 to i64
  %6 = getelementptr inbounds [13 x i32], ptr @switch.table.ix86_issue_rate, i64 0, i64 %5
  %7 = load i32, ptr %6, align 4
  br label %8

8:                                                ; preds = %0, %4
  %9 = phi i32 [ %7, %4 ], [ 1, %0 ]
  ret i32 %9
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind sspstrong willreturn memory(read, argmem: none, inaccessiblemem: none) uwtable
define internal i32 @ia32_multipass_dfa_lookahead() #16 {
  %1 = load i32, ptr @ix86_tune, align 4, !tbaa !16
  %2 = add i32 %1, -2
  %3 = icmp ult i32 %2, 4
  br i1 %3, label %4, label %8

4:                                                ; preds = %0
  %5 = sext i32 %2 to i64
  %6 = getelementptr inbounds [4 x i32], ptr @switch.table.ia32_multipass_dfa_lookahead, i64 0, i64 %5
  %7 = load i32, ptr %6, align 4
  br label %8

8:                                                ; preds = %0, %4
  %9 = phi i32 [ %7, %4 ], [ 0, %0 ]
  ret i32 %9
}

; Function Attrs: nounwind sspstrong uwtable
define internal ptr @ix86_builtin_vectorized_function(ptr nocapture noundef readonly %0, ptr noundef %1, ptr noundef %2) #9 {
  %4 = getelementptr inbounds %struct.tree_function_decl, ptr %0, i64 0, i32 5
  %5 = load i32, ptr %4, align 8
  %6 = and i32 %5, 2047
  %7 = load i64, ptr %1, align 8
  %8 = and i64 %7, 65535
  %9 = icmp eq i64 %8, 14
  br i1 %9, label %10, label %117

10:                                               ; preds = %3
  %11 = load i64, ptr %2, align 8
  %12 = and i64 %11, 65535
  %13 = icmp eq i64 %12, 14
  %14 = and i32 %5, 6144
  %15 = icmp eq i32 %14, 6144
  %16 = select i1 %13, i1 %15, i1 false
  br i1 %16, label %17, label %117

17:                                               ; preds = %10
  %18 = getelementptr inbounds %struct.tree_common, ptr %1, i64 0, i32 2
  %19 = load ptr, ptr %18, align 8, !tbaa !16
  %20 = load i64, ptr %19, align 8
  %21 = and i64 %20, 65535
  %22 = icmp eq i64 %21, 14
  br i1 %22, label %23, label %25

23:                                               ; preds = %17
  %24 = tail call i32 @vector_type_mode(ptr noundef nonnull %19) #30
  br label %30

25:                                               ; preds = %17
  %26 = getelementptr inbounds %struct.tree_type, ptr %19, i64 0, i32 6
  %27 = load i32, ptr %26, align 4
  %28 = lshr i32 %27, 16
  %29 = and i32 %28, 255
  br label %30

30:                                               ; preds = %25, %23
  %31 = phi i32 [ %24, %23 ], [ %29, %25 ]
  %32 = getelementptr inbounds %struct.tree_type, ptr %1, i64 0, i32 6
  %33 = load i32, ptr %32, align 4
  %34 = and i32 %33, 1023
  %35 = getelementptr inbounds %struct.tree_common, ptr %2, i64 0, i32 2
  %36 = load ptr, ptr %35, align 8, !tbaa !16
  %37 = load i64, ptr %36, align 8
  %38 = and i64 %37, 65535
  %39 = icmp eq i64 %38, 14
  br i1 %39, label %40, label %42

40:                                               ; preds = %30
  %41 = tail call i32 @vector_type_mode(ptr noundef nonnull %36) #30
  br label %47

42:                                               ; preds = %30
  %43 = getelementptr inbounds %struct.tree_type, ptr %36, i64 0, i32 6
  %44 = load i32, ptr %43, align 4
  %45 = lshr i32 %44, 16
  %46 = and i32 %45, 255
  br label %47

47:                                               ; preds = %42, %40
  %48 = phi i32 [ %41, %40 ], [ %46, %42 ]
  %49 = getelementptr inbounds %struct.tree_type, ptr %2, i64 0, i32 6
  %50 = load i32, ptr %49, align 4
  %51 = and i32 %50, 1023
  switch i32 %6, label %112 [
    i32 228, label %52
    i32 229, label %62
    i32 153, label %72
    i32 154, label %82
    i32 27, label %92
    i32 28, label %102
  ]

52:                                               ; preds = %47
  %53 = icmp eq i32 %31, 39
  %54 = icmp eq i32 %34, 1
  %55 = select i1 %53, i1 %54, i1 false
  %56 = icmp eq i32 %48, 39
  %57 = select i1 %55, i1 %56, i1 false
  %58 = icmp eq i32 %51, 1
  %59 = select i1 %57, i1 %58, i1 false
  br i1 %59, label %60, label %112

60:                                               ; preds = %52
  %61 = load ptr, ptr getelementptr inbounds ([801 x ptr], ptr @ix86_builtins, i64 0, i64 228), align 16, !tbaa !5
  br label %117

62:                                               ; preds = %47
  %63 = icmp eq i32 %31, 38
  %64 = icmp eq i32 %34, 2
  %65 = select i1 %63, i1 %64, i1 false
  %66 = icmp eq i32 %48, 38
  %67 = select i1 %65, i1 %66, i1 false
  %68 = icmp eq i32 %51, 2
  %69 = select i1 %67, i1 %68, i1 false
  br i1 %69, label %70, label %112

70:                                               ; preds = %62
  %71 = load ptr, ptr getelementptr inbounds ([801 x ptr], ptr @ix86_builtins, i64 0, i64 142), align 16, !tbaa !5
  br label %117

72:                                               ; preds = %47
  %73 = icmp eq i32 %31, 16
  %74 = icmp eq i32 %34, 2
  %75 = select i1 %73, i1 %74, i1 false
  %76 = icmp eq i32 %48, 39
  %77 = select i1 %75, i1 %76, i1 false
  %78 = icmp eq i32 %51, 1
  %79 = select i1 %77, i1 %78, i1 false
  br i1 %79, label %80, label %112

80:                                               ; preds = %72
  %81 = load ptr, ptr getelementptr inbounds ([801 x ptr], ptr @ix86_builtins, i64 0, i64 457), align 8, !tbaa !5
  br label %117

82:                                               ; preds = %47
  %83 = icmp eq i32 %31, 16
  %84 = icmp eq i32 %34, 2
  %85 = select i1 %83, i1 %84, i1 false
  %86 = icmp eq i32 %48, 38
  %87 = select i1 %85, i1 %86, i1 false
  %88 = icmp eq i32 %51, 2
  %89 = select i1 %87, i1 %88, i1 false
  br i1 %89, label %90, label %112

90:                                               ; preds = %82
  %91 = load ptr, ptr getelementptr inbounds ([801 x ptr], ptr @ix86_builtins, i64 0, i64 254), align 16, !tbaa !5
  br label %117

92:                                               ; preds = %47
  %93 = icmp eq i32 %31, 39
  %94 = icmp eq i32 %34, 1
  %95 = select i1 %93, i1 %94, i1 false
  %96 = icmp eq i32 %48, 39
  %97 = select i1 %95, i1 %96, i1 false
  %98 = icmp eq i32 %51, 1
  %99 = select i1 %97, i1 %98, i1 false
  br i1 %99, label %100, label %112

100:                                              ; preds = %92
  %101 = load ptr, ptr getelementptr inbounds ([801 x ptr], ptr @ix86_builtins, i64 0, i64 620), align 16, !tbaa !5
  br label %117

102:                                              ; preds = %47
  %103 = icmp eq i32 %31, 38
  %104 = icmp eq i32 %34, 2
  %105 = select i1 %103, i1 %104, i1 false
  %106 = icmp eq i32 %48, 38
  %107 = select i1 %105, i1 %106, i1 false
  %108 = icmp eq i32 %51, 2
  %109 = select i1 %107, i1 %108, i1 false
  br i1 %109, label %110, label %112

110:                                              ; preds = %102
  %111 = load ptr, ptr getelementptr inbounds ([801 x ptr], ptr @ix86_builtins, i64 0, i64 619), align 8, !tbaa !5
  br label %117

112:                                              ; preds = %47, %102, %92, %82, %72, %62, %52
  %113 = load ptr, ptr @ix86_veclib_handler, align 8, !tbaa !5
  %114 = icmp eq ptr %113, null
  br i1 %114, label %117, label %115

115:                                              ; preds = %112
  %116 = tail call ptr %113(i32 noundef %6, ptr noundef nonnull %1, ptr noundef nonnull %2) #30
  br label %117

117:                                              ; preds = %112, %3, %10, %115, %110, %100, %90, %80, %70, %60
  %118 = phi ptr [ %116, %115 ], [ %111, %110 ], [ %101, %100 ], [ %91, %90 ], [ %81, %80 ], [ %71, %70 ], [ %61, %60 ], [ null, %10 ], [ null, %3 ], [ null, %112 ]
  ret ptr %118
}

; Function Attrs: nounwind sspstrong uwtable
define internal ptr @ix86_vectorize_builtin_conversion(i32 noundef %0, ptr noundef %1) #9 {
  %3 = load i32, ptr @ix86_isa_flags, align 4, !tbaa !20
  %4 = and i32 %3, 131072
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %30, label %6

6:                                                ; preds = %2
  %7 = load i64, ptr %1, align 8
  %8 = and i64 %7, 65535
  %9 = icmp eq i64 %8, 14
  br i1 %9, label %10, label %30

10:                                               ; preds = %6
  switch i32 %0, label %30 [
    i32 78, label %11
    i32 77, label %21
  ]

11:                                               ; preds = %10
  %12 = tail call i32 @vector_type_mode(ptr noundef nonnull %1) #30
  %13 = icmp eq i32 %12, 65
  br i1 %13, label %14, label %30

14:                                               ; preds = %11
  %15 = load i64, ptr %1, align 8
  %16 = and i64 %15, 2097152
  %17 = icmp eq i64 %16, 0
  %18 = load ptr, ptr getelementptr inbounds ([801 x ptr], ptr @ix86_builtins, i64 0, i64 621), align 8
  %19 = load ptr, ptr getelementptr inbounds ([801 x ptr], ptr @ix86_builtins, i64 0, i64 239), align 8
  %20 = select i1 %17, ptr %19, ptr %18
  br label %30

21:                                               ; preds = %10
  %22 = tail call i32 @vector_type_mode(ptr noundef nonnull %1) #30
  %23 = icmp eq i32 %22, 65
  br i1 %23, label %24, label %30

24:                                               ; preds = %21
  %25 = load i64, ptr %1, align 8
  %26 = and i64 %25, 2097152
  %27 = icmp eq i64 %26, 0
  %28 = load ptr, ptr getelementptr inbounds ([801 x ptr], ptr @ix86_builtins, i64 0, i64 256), align 16
  %29 = select i1 %27, ptr %28, ptr null
  br label %30

30:                                               ; preds = %10, %21, %11, %2, %6, %24, %14
  %31 = phi ptr [ %29, %24 ], [ %20, %14 ], [ null, %6 ], [ null, %2 ], [ null, %11 ], [ null, %21 ], [ null, %10 ]
  ret ptr %31
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind sspstrong willreturn memory(read, inaccessiblemem: none) uwtable
define internal i32 @ix86_builtin_vectorization_cost(i8 noundef zeroext %0) #23 {
  %2 = icmp eq i8 %0, 0
  br i1 %2, label %8, label %3

3:                                                ; preds = %1
  %4 = load ptr, ptr @ix86_cost, align 8, !tbaa !5
  %5 = getelementptr inbounds %struct.processor_costs, ptr %4, i64 0, i32 46
  %6 = load i32, ptr %5, align 4, !tbaa !327
  %7 = sub nsw i32 0, %6
  br label %8

8:                                                ; preds = %1, %3
  %9 = phi i32 [ %7, %3 ], [ 0, %1 ]
  ret i32 %9
}

declare zeroext i8 @default_builtin_vector_alignment_reachable(ptr noundef, i8 noundef zeroext) #3

; Function Attrs: nounwind sspstrong uwtable
define internal ptr @ix86_vectorize_builtin_vec_perm(ptr noundef %0, ptr nocapture noundef writeonly %1) #9 {
  %3 = getelementptr inbounds %struct.tree_common, ptr %0, i64 0, i32 2
  %4 = load ptr, ptr %3, align 8, !tbaa !16
  %5 = load i64, ptr %4, align 8
  %6 = lshr i64 %5, 21
  %7 = trunc i64 %6 to i8
  %8 = and i8 %7, 1
  %9 = load i64, ptr %0, align 8
  %10 = and i64 %9, 65535
  %11 = icmp eq i64 %10, 14
  br i1 %11, label %12, label %14

12:                                               ; preds = %2
  %13 = tail call i32 @vector_type_mode(ptr noundef nonnull %0) #30
  br label %19

14:                                               ; preds = %2
  %15 = getelementptr inbounds %struct.tree_type, ptr %0, i64 0, i32 6
  %16 = load i32, ptr %15, align 4
  %17 = lshr i32 %16, 16
  %18 = and i32 %17, 255
  br label %19

19:                                               ; preds = %14, %12
  %20 = phi i32 [ %13, %12 ], [ %18, %14 ]
  %21 = load i32, ptr @ix86_isa_flags, align 4, !tbaa !20
  %22 = lshr i32 %21, 17
  %23 = trunc i32 %22 to i8
  %24 = and i8 %23, 1
  switch i32 %20, label %64 [
    i32 82, label %25
    i32 80, label %29
    i32 81, label %33
    i32 79, label %36
    i32 66, label %44
    i32 65, label %47
    i32 64, label %50
    i32 63, label %53
  ]

25:                                               ; preds = %19
  %26 = trunc i32 %21 to i8
  %27 = lshr i8 %26, 5
  %28 = and i8 %27, 1
  br label %29

29:                                               ; preds = %19, %25
  %30 = phi i64 [ 632, %25 ], [ 622, %19 ]
  %31 = phi i8 [ %28, %25 ], [ %24, %19 ]
  %32 = tail call fastcc ptr @ix86_get_builtin_type(i32 noundef 6)
  br label %56

33:                                               ; preds = %19
  %34 = trunc i32 %21 to i8
  %35 = lshr i8 %34, 5
  br label %39

36:                                               ; preds = %19
  %37 = lshr i32 %21, 16
  %38 = trunc i32 %37 to i8
  br label %39

39:                                               ; preds = %36, %33
  %40 = phi i64 [ 623, %36 ], [ 633, %33 ]
  %41 = phi i8 [ %38, %36 ], [ %35, %33 ]
  %42 = and i8 %41, 1
  %43 = tail call fastcc ptr @ix86_get_builtin_type(i32 noundef 5)
  br label %56

44:                                               ; preds = %19
  %45 = icmp eq i8 %8, 0
  %46 = select i1 %45, i64 624, i64 628
  br label %56

47:                                               ; preds = %19
  %48 = icmp eq i8 %8, 0
  %49 = select i1 %48, i64 625, i64 629
  br label %56

50:                                               ; preds = %19
  %51 = icmp eq i8 %8, 0
  %52 = select i1 %51, i64 626, i64 630
  br label %56

53:                                               ; preds = %19
  %54 = icmp eq i8 %8, 0
  %55 = select i1 %54, i64 627, i64 631
  br label %56

56:                                               ; preds = %53, %50, %47, %44, %39, %29
  %57 = phi ptr [ %4, %53 ], [ %4, %50 ], [ %4, %47 ], [ %4, %44 ], [ %43, %39 ], [ %32, %29 ]
  %58 = phi i64 [ %55, %53 ], [ %52, %50 ], [ %49, %47 ], [ %46, %44 ], [ %40, %39 ], [ %30, %29 ]
  %59 = phi i8 [ %24, %53 ], [ %24, %50 ], [ %24, %47 ], [ %24, %44 ], [ %42, %39 ], [ %31, %29 ]
  %60 = icmp eq i8 %59, 0
  br i1 %60, label %64, label %61

61:                                               ; preds = %56
  store ptr %57, ptr %1, align 8, !tbaa !5
  %62 = getelementptr inbounds [801 x ptr], ptr @ix86_builtins, i64 0, i64 %58
  %63 = load ptr, ptr %62, align 8, !tbaa !5
  br label %64

64:                                               ; preds = %19, %56, %61
  %65 = phi ptr [ %63, %61 ], [ null, %56 ], [ null, %19 ]
  ret ptr %65
}

; Function Attrs: nounwind sspstrong uwtable
define internal zeroext i8 @ix86_vectorize_builtin_vec_perm_ok(ptr noundef %0, ptr nocapture noundef readonly %1) #9 {
  %3 = alloca %struct.expand_vec_perm_d, align 8
  call void @llvm.lifetime.start.p0(i64 48, ptr nonnull %3) #30
  %4 = load i64, ptr %0, align 8
  %5 = and i64 %4, 65535
  %6 = icmp eq i64 %5, 14
  br i1 %6, label %7, label %9

7:                                                ; preds = %2
  %8 = tail call i32 @vector_type_mode(ptr noundef nonnull %0) #30
  br label %14

9:                                                ; preds = %2
  %10 = getelementptr inbounds %struct.tree_type, ptr %0, i64 0, i32 6
  %11 = load i32, ptr %10, align 4
  %12 = lshr i32 %11, 16
  %13 = and i32 %12, 255
  br label %14

14:                                               ; preds = %9, %7
  %15 = phi i32 [ %8, %7 ], [ %13, %9 ]
  %16 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %3, i64 0, i32 4
  store i32 %15, ptr %16, align 8, !tbaa !293
  %17 = zext i32 %15 to i64
  %18 = getelementptr inbounds [87 x i8], ptr @mode_nunits, i64 0, i64 %17
  %19 = load i8, ptr %18, align 1, !tbaa !16
  %20 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %3, i64 0, i32 5
  store i8 %19, ptr %20, align 4, !tbaa !294
  %21 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %3, i64 0, i32 6
  store i8 1, ptr %21, align 1, !tbaa !303
  %22 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %17
  %23 = load i8, ptr %22, align 1, !tbaa !16
  %24 = icmp eq i8 %23, 16
  br i1 %24, label %25, label %31

25:                                               ; preds = %14
  %26 = load i32, ptr @ix86_isa_flags, align 4, !tbaa !20
  %27 = and i32 %26, 12582912
  %28 = icmp ne i32 %27, 0
  %29 = icmp eq i8 %19, 2
  %30 = select i1 %28, i1 true, i1 %29
  br i1 %30, label %172, label %31

31:                                               ; preds = %25, %14
  %32 = getelementptr inbounds %struct.tree_vector, ptr %1, i64 0, i32 1
  %33 = load ptr, ptr %32, align 8, !tbaa !16
  %34 = icmp eq i8 %19, 0
  br i1 %34, label %60, label %35

35:                                               ; preds = %31
  %36 = zext i8 %19 to i64
  %37 = shl nuw nsw i64 %36, 1
  br label %38

38:                                               ; preds = %50, %35
  %39 = phi i64 [ 0, %35 ], [ %56, %50 ]
  %40 = phi ptr [ %33, %35 ], [ %58, %50 ]
  %41 = phi i32 [ 0, %35 ], [ %53, %50 ]
  %42 = getelementptr inbounds %struct.tree_list, ptr %40, i64 0, i32 2
  %43 = load ptr, ptr %42, align 8, !tbaa !16
  %44 = tail call i32 @host_integerp(ptr noundef %43, i32 noundef 1) #30
  %45 = icmp eq i32 %44, 0
  br i1 %45, label %154, label %46

46:                                               ; preds = %38
  %47 = load ptr, ptr %42, align 8, !tbaa !16
  %48 = tail call i64 @tree_low_cst(ptr noundef %47, i32 noundef 1) #30
  %49 = icmp ult i64 %48, %37
  br i1 %49, label %50, label %154

50:                                               ; preds = %46
  %51 = icmp ult i64 %48, %36
  %52 = select i1 %51, i32 1, i32 2
  %53 = or i32 %52, %41
  %54 = trunc i64 %48 to i8
  %55 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %3, i64 0, i32 3, i64 %39
  store i8 %54, ptr %55, align 1, !tbaa !16
  %56 = add nuw nsw i64 %39, 1
  %57 = getelementptr inbounds %struct.tree_common, ptr %40, i64 0, i32 1
  %58 = load ptr, ptr %57, align 8, !tbaa !16
  %59 = icmp eq i64 %56, %36
  br i1 %59, label %60, label %38, !llvm.loop !328

60:                                               ; preds = %50, %31
  %61 = phi i32 [ 0, %31 ], [ %53, %50 ]
  %62 = phi ptr [ %33, %31 ], [ %58, %50 ]
  %63 = icmp eq ptr %62, null
  br i1 %63, label %65, label %64

64:                                               ; preds = %60
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 30012, ptr noundef nonnull @.str.131) #30
  br label %65

65:                                               ; preds = %64, %60
  %66 = icmp eq i32 %61, 2
  %67 = icmp ne i8 %19, 0
  %68 = and i1 %67, %66
  br i1 %68, label %69, label %152

69:                                               ; preds = %65
  %70 = zext i8 %19 to i64
  %71 = icmp ult i8 %19, 8
  br i1 %71, label %143, label %72

72:                                               ; preds = %69
  %73 = icmp ult i8 %19, 64
  br i1 %73, label %129, label %74

74:                                               ; preds = %72
  %75 = and i64 %70, 192
  %76 = insertelement <16 x i8> poison, i8 %19, i64 0
  %77 = shufflevector <16 x i8> %76, <16 x i8> poison, <16 x i32> zeroinitializer
  %78 = insertelement <16 x i8> poison, i8 %19, i64 0
  %79 = shufflevector <16 x i8> %78, <16 x i8> poison, <16 x i32> zeroinitializer
  %80 = insertelement <16 x i8> poison, i8 %19, i64 0
  %81 = shufflevector <16 x i8> %80, <16 x i8> poison, <16 x i32> zeroinitializer
  %82 = insertelement <16 x i8> poison, i8 %19, i64 0
  %83 = shufflevector <16 x i8> %82, <16 x i8> poison, <16 x i32> zeroinitializer
  %84 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %3, i64 0, i32 3, i64 0
  %85 = load <16 x i8>, ptr %84, align 8, !tbaa !16
  %86 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %3, i64 0, i32 4
  %87 = load <16 x i8>, ptr %86, align 8, !tbaa !16
  %88 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %3, i64 1, i32 1
  %89 = load <16 x i8>, ptr %88, align 8, !tbaa !16
  %90 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %3, i64 1, i32 3
  %91 = load <16 x i8>, ptr %90, align 8, !tbaa !16
  %92 = sub <16 x i8> %85, %77
  %93 = sub <16 x i8> %87, %79
  %94 = sub <16 x i8> %89, %81
  %95 = sub <16 x i8> %91, %83
  store <16 x i8> %92, ptr %84, align 8, !tbaa !16
  store <16 x i8> %93, ptr %86, align 8, !tbaa !16
  store <16 x i8> %94, ptr %88, align 8, !tbaa !16
  store <16 x i8> %95, ptr %90, align 8, !tbaa !16
  %96 = icmp eq i64 %75, 64
  br i1 %96, label %124, label %97, !llvm.loop !329

97:                                               ; preds = %74
  %98 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %3, i64 0, i32 3, i64 64
  %99 = load <16 x i8>, ptr %98, align 8, !tbaa !16
  %100 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %3, i64 2, i32 1
  %101 = load <16 x i8>, ptr %100, align 8, !tbaa !16
  %102 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %3, i64 2, i32 3
  %103 = load <16 x i8>, ptr %102, align 8, !tbaa !16
  %104 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %3, i64 2, i32 4
  %105 = load <16 x i8>, ptr %104, align 8, !tbaa !16
  %106 = sub <16 x i8> %99, %77
  %107 = sub <16 x i8> %101, %79
  %108 = sub <16 x i8> %103, %81
  %109 = sub <16 x i8> %105, %83
  store <16 x i8> %106, ptr %98, align 8, !tbaa !16
  store <16 x i8> %107, ptr %100, align 8, !tbaa !16
  store <16 x i8> %108, ptr %102, align 8, !tbaa !16
  store <16 x i8> %109, ptr %104, align 8, !tbaa !16
  %110 = icmp eq i64 %75, 128
  br i1 %110, label %124, label %111, !llvm.loop !329

111:                                              ; preds = %97
  %112 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %3, i64 0, i32 3, i64 128
  %113 = load <16 x i8>, ptr %112, align 8, !tbaa !16
  %114 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %3, i64 3, i32 3
  %115 = load <16 x i8>, ptr %114, align 8, !tbaa !16
  %116 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %3, i64 3, i32 4
  %117 = load <16 x i8>, ptr %116, align 8, !tbaa !16
  %118 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %3, i64 4, i32 1
  %119 = load <16 x i8>, ptr %118, align 8, !tbaa !16
  %120 = sub <16 x i8> %113, %77
  %121 = sub <16 x i8> %115, %79
  %122 = sub <16 x i8> %117, %81
  %123 = sub <16 x i8> %119, %83
  store <16 x i8> %120, ptr %112, align 8, !tbaa !16
  store <16 x i8> %121, ptr %114, align 8, !tbaa !16
  store <16 x i8> %122, ptr %116, align 8, !tbaa !16
  store <16 x i8> %123, ptr %118, align 8, !tbaa !16
  br label %124

124:                                              ; preds = %111, %97, %74
  %125 = icmp eq i64 %75, %70
  br i1 %125, label %159, label %126

126:                                              ; preds = %124
  %127 = and i64 %70, 56
  %128 = icmp eq i64 %127, 0
  br i1 %128, label %143, label %129

129:                                              ; preds = %72, %126
  %130 = phi i64 [ %75, %126 ], [ 0, %72 ]
  %131 = and i64 %70, 248
  %132 = insertelement <8 x i8> poison, i8 %19, i64 0
  %133 = shufflevector <8 x i8> %132, <8 x i8> poison, <8 x i32> zeroinitializer
  br label %134

134:                                              ; preds = %134, %129
  %135 = phi i64 [ %130, %129 ], [ %139, %134 ]
  %136 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %3, i64 0, i32 3, i64 %135
  %137 = load <8 x i8>, ptr %136, align 8, !tbaa !16
  %138 = sub <8 x i8> %137, %133
  store <8 x i8> %138, ptr %136, align 8, !tbaa !16
  %139 = add nuw i64 %135, 8
  %140 = icmp eq i64 %139, %131
  br i1 %140, label %141, label %134, !llvm.loop !330

141:                                              ; preds = %134
  %142 = icmp eq i64 %131, %70
  br i1 %142, label %159, label %143

143:                                              ; preds = %69, %126, %141
  %144 = phi i64 [ 0, %69 ], [ %75, %126 ], [ %131, %141 ]
  br label %145

145:                                              ; preds = %143, %145
  %146 = phi i64 [ %150, %145 ], [ %144, %143 ]
  %147 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %3, i64 0, i32 3, i64 %146
  %148 = load i8, ptr %147, align 1, !tbaa !16
  %149 = sub i8 %148, %19
  store i8 %149, ptr %147, align 1, !tbaa !16
  %150 = add nuw nsw i64 %146, 1
  %151 = icmp eq i64 %150, %70
  br i1 %151, label %159, label %145, !llvm.loop !331

152:                                              ; preds = %65
  %153 = icmp sgt i32 %61, 0
  br i1 %153, label %155, label %154

154:                                              ; preds = %46, %38, %152
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 30157, ptr noundef nonnull @.str.131) #30
  br label %159

155:                                              ; preds = %152
  %156 = icmp eq i32 %61, 3
  br i1 %156, label %157, label %159

157:                                              ; preds = %155
  %158 = load i32, ptr %16, align 8, !tbaa !293
  br label %161

159:                                              ; preds = %145, %124, %141, %154, %155
  %160 = load i32, ptr %16, align 8
  switch i32 %160, label %161 [
    i32 79, label %172
    i32 65, label %172
  ]

161:                                              ; preds = %157, %159
  %162 = phi i32 [ %160, %159 ], [ %158, %157 ]
  %163 = phi i1 [ false, %159 ], [ true, %157 ]
  %164 = tail call ptr @gen_raw_REG(i32 noundef %162, i32 noundef 58) #30
  store ptr %164, ptr %3, align 8, !tbaa !291
  %165 = tail call ptr @gen_raw_REG(i32 noundef %162, i32 noundef 59) #30
  %166 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %3, i64 0, i32 1
  store ptr %165, ptr %166, align 8, !tbaa !296
  %167 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %3, i64 0, i32 2
  store ptr %165, ptr %167, align 8, !tbaa !295
  br i1 %163, label %168, label %170

168:                                              ; preds = %161
  %169 = tail call ptr @gen_raw_REG(i32 noundef %162, i32 noundef 60) #30
  store ptr %169, ptr %167, align 8, !tbaa !295
  br label %170

170:                                              ; preds = %168, %161
  tail call void @start_sequence() #30
  %171 = call fastcc zeroext i8 @ix86_expand_vec_perm_builtin_1(ptr noundef nonnull %3), !range !66
  tail call void @end_sequence() #30
  br label %172

172:                                              ; preds = %159, %159, %25, %170
  %173 = phi i8 [ %171, %170 ], [ 1, %25 ], [ 1, %159 ], [ 1, %159 ]
  call void @llvm.lifetime.end.p0(i64 48, ptr nonnull %3) #30
  ret i8 %173
}

declare zeroext i8 @default_builtin_support_vector_misalignment(i32 noundef, ptr noundef, i32 noundef, i8 noundef zeroext) #3

; Function Attrs: mustprogress nofree norecurse nosync nounwind sspstrong willreturn memory(readwrite, argmem: none, inaccessiblemem: none) uwtable
define internal zeroext i8 @ix86_handle_option(i64 noundef %0, ptr nocapture readnone %1, i32 noundef %2) #15 {
  switch i64 %0, label %206 [
    i64 789, label %4
    i64 751, label %13
    i64 752, label %207
    i64 809, label %22
    i64 810, label %31
    i64 812, label %40
    i64 818, label %49
    i64 814, label %58
    i64 815, label %67
    i64 767, label %76
    i64 774, label %85
    i64 813, label %94
    i64 796, label %99
    i64 816, label %104
    i64 775, label %113
    i64 827, label %122
    i64 788, label %131
    i64 757, label %139
    i64 800, label %148
    i64 807, label %156
    i64 772, label %164
    i64 790, label %172
    i64 771, label %180
    i64 759, label %188
    i64 799, label %197
  ]

4:                                                ; preds = %3
  %5 = icmp eq i32 %2, 0
  %6 = load i32, ptr @ix86_isa_flags, align 4, !tbaa !20
  %7 = load i32, ptr @ix86_isa_flags_explicit, align 4, !tbaa !20
  %8 = and i32 %6, -2052
  %9 = or i32 %6, 2048
  %10 = select i1 %5, i32 2051, i32 2048
  %11 = select i1 %5, i32 %8, i32 %9
  %12 = or i32 %7, %10
  store i32 %11, ptr @ix86_isa_flags, align 4
  store i32 %12, ptr @ix86_isa_flags_explicit, align 4, !tbaa !20
  br label %207

13:                                               ; preds = %3
  %14 = icmp eq i32 %2, 0
  %15 = load i32, ptr @ix86_isa_flags, align 4, !tbaa !20
  %16 = load i32, ptr @ix86_isa_flags_explicit, align 4, !tbaa !20
  %17 = and i32 %15, -4
  %18 = or i32 %15, 2049
  %19 = select i1 %14, i32 3, i32 2049
  %20 = select i1 %14, i32 %17, i32 %18
  %21 = or i32 %16, %19
  store i32 %20, ptr @ix86_isa_flags, align 4
  store i32 %21, ptr @ix86_isa_flags_explicit, align 4, !tbaa !20
  br label %207

22:                                               ; preds = %3
  %23 = icmp eq i32 %2, 0
  %24 = load i32, ptr @ix86_isa_flags, align 4, !tbaa !20
  %25 = load i32, ptr @ix86_isa_flags_explicit, align 4, !tbaa !20
  %26 = and i32 %24, -16712481
  %27 = or i32 %24, 65536
  %28 = select i1 %23, i32 16712480, i32 65536
  %29 = select i1 %23, i32 %26, i32 %27
  %30 = or i32 %25, %28
  store i32 %29, ptr @ix86_isa_flags, align 4
  store i32 %30, ptr @ix86_isa_flags_explicit, align 4, !tbaa !20
  br label %207

31:                                               ; preds = %3
  %32 = icmp eq i32 %2, 0
  %33 = load i32, ptr @ix86_isa_flags, align 4, !tbaa !20
  %34 = load i32, ptr @ix86_isa_flags_explicit, align 4, !tbaa !20
  %35 = and i32 %33, -16646945
  %36 = or i32 %33, 196608
  %37 = select i1 %32, i32 16646944, i32 196608
  %38 = select i1 %32, i32 %35, i32 %36
  %39 = or i32 %34, %37
  store i32 %38, ptr @ix86_isa_flags, align 4
  store i32 %39, ptr @ix86_isa_flags_explicit, align 4, !tbaa !20
  br label %207

40:                                               ; preds = %3
  %41 = icmp eq i32 %2, 0
  %42 = load i32, ptr @ix86_isa_flags, align 4, !tbaa !20
  %43 = load i32, ptr @ix86_isa_flags_explicit, align 4, !tbaa !20
  %44 = and i32 %42, -16515873
  %45 = or i32 %42, 458752
  %46 = select i1 %41, i32 16515872, i32 458752
  %47 = select i1 %41, i32 %44, i32 %45
  %48 = or i32 %43, %46
  store i32 %47, ptr @ix86_isa_flags, align 4
  store i32 %48, ptr @ix86_isa_flags_explicit, align 4, !tbaa !20
  br label %207

49:                                               ; preds = %3
  %50 = icmp eq i32 %2, 0
  %51 = load i32, ptr @ix86_isa_flags, align 4, !tbaa !20
  %52 = load i32, ptr @ix86_isa_flags_explicit, align 4, !tbaa !20
  %53 = and i32 %51, -14156577
  %54 = or i32 %51, 4653056
  %55 = select i1 %50, i32 14156576, i32 4653056
  %56 = select i1 %50, i32 %53, i32 %54
  %57 = or i32 %52, %55
  store i32 %56, ptr @ix86_isa_flags, align 4
  store i32 %57, ptr @ix86_isa_flags_explicit, align 4, !tbaa !20
  br label %207

58:                                               ; preds = %3
  %59 = icmp eq i32 %2, 0
  %60 = load i32, ptr @ix86_isa_flags, align 4, !tbaa !20
  %61 = load i32, ptr @ix86_isa_flags_explicit, align 4, !tbaa !20
  %62 = and i32 %60, -9962273
  %63 = or i32 %60, 5177344
  %64 = select i1 %59, i32 9962272, i32 5177344
  %65 = select i1 %59, i32 %62, i32 %63
  %66 = or i32 %61, %64
  store i32 %65, ptr @ix86_isa_flags, align 4
  store i32 %66, ptr @ix86_isa_flags_explicit, align 4, !tbaa !20
  br label %207

67:                                               ; preds = %3
  %68 = icmp eq i32 %2, 0
  %69 = load i32, ptr @ix86_isa_flags, align 4, !tbaa !20
  %70 = load i32, ptr @ix86_isa_flags_explicit, align 4, !tbaa !20
  %71 = and i32 %69, -9437985
  %72 = or i32 %69, 6225920
  %73 = select i1 %68, i32 9437984, i32 6225920
  %74 = select i1 %68, i32 %71, i32 %72
  %75 = or i32 %70, %73
  store i32 %74, ptr @ix86_isa_flags, align 4
  store i32 %75, ptr @ix86_isa_flags_explicit, align 4, !tbaa !20
  br label %207

76:                                               ; preds = %3
  %77 = icmp eq i32 %2, 0
  %78 = load i32, ptr @ix86_isa_flags, align 4, !tbaa !20
  %79 = load i32, ptr @ix86_isa_flags_explicit, align 4, !tbaa !20
  %80 = and i32 %78, -8389409
  %81 = or i32 %78, 6225952
  %82 = select i1 %77, i32 8389408, i32 6225952
  %83 = select i1 %77, i32 %80, i32 %81
  %84 = or i32 %79, %82
  store i32 %83, ptr @ix86_isa_flags, align 4
  store i32 %84, ptr @ix86_isa_flags_explicit, align 4, !tbaa !20
  br label %207

85:                                               ; preds = %3
  %86 = icmp eq i32 %2, 0
  %87 = load i32, ptr @ix86_isa_flags, align 4, !tbaa !20
  %88 = load i32, ptr @ix86_isa_flags_explicit, align 4, !tbaa !20
  %89 = and i32 %87, -257
  %90 = or i32 %87, 6226208
  %91 = select i1 %86, i32 256, i32 6226208
  %92 = select i1 %86, i32 %89, i32 %90
  %93 = or i32 %88, %91
  store i32 %92, ptr @ix86_isa_flags, align 4
  store i32 %93, ptr @ix86_isa_flags_explicit, align 4, !tbaa !20
  br label %207

94:                                               ; preds = %3
  %95 = load i32, ptr @ix86_isa_flags, align 4, !tbaa !20
  %96 = or i32 %95, 6225920
  store i32 %96, ptr @ix86_isa_flags, align 4, !tbaa !20
  %97 = load i32, ptr @ix86_isa_flags_explicit, align 4, !tbaa !20
  %98 = or i32 %97, 6225920
  store i32 %98, ptr @ix86_isa_flags_explicit, align 4, !tbaa !20
  br label %207

99:                                               ; preds = %3
  %100 = load i32, ptr @ix86_isa_flags, align 4, !tbaa !20
  %101 = and i32 %100, -9962273
  store i32 %101, ptr @ix86_isa_flags, align 4, !tbaa !20
  %102 = load i32, ptr @ix86_isa_flags_explicit, align 4, !tbaa !20
  %103 = or i32 %102, 9962272
  store i32 %103, ptr @ix86_isa_flags_explicit, align 4, !tbaa !20
  br label %207

104:                                              ; preds = %3
  %105 = icmp eq i32 %2, 0
  %106 = load i32, ptr @ix86_isa_flags, align 4, !tbaa !20
  %107 = load i32, ptr @ix86_isa_flags_explicit, align 4, !tbaa !20
  %108 = and i32 %106, -10486273
  %109 = or i32 %106, 2555904
  %110 = select i1 %105, i32 10486272, i32 2555904
  %111 = select i1 %105, i32 %108, i32 %109
  %112 = or i32 %107, %110
  store i32 %111, ptr @ix86_isa_flags, align 4
  store i32 %112, ptr @ix86_isa_flags_explicit, align 4, !tbaa !20
  br label %207

113:                                              ; preds = %3
  %114 = icmp eq i32 %2, 0
  %115 = load i32, ptr @ix86_isa_flags, align 4, !tbaa !20
  %116 = load i32, ptr @ix86_isa_flags_explicit, align 4, !tbaa !20
  %117 = and i32 %115, -8389121
  %118 = or i32 %115, 8323616
  %119 = select i1 %114, i32 8389120, i32 8323616
  %120 = select i1 %114, i32 %117, i32 %118
  %121 = or i32 %116, %119
  store i32 %120, ptr @ix86_isa_flags, align 4
  store i32 %121, ptr @ix86_isa_flags_explicit, align 4, !tbaa !20
  br label %207

122:                                              ; preds = %3
  %123 = icmp eq i32 %2, 0
  %124 = load i32, ptr @ix86_isa_flags, align 4, !tbaa !20
  %125 = load i32, ptr @ix86_isa_flags_explicit, align 4, !tbaa !20
  %126 = and i32 %124, -8388609
  %127 = or i32 %124, 16712224
  %128 = select i1 %123, i32 8388608, i32 16712224
  %129 = select i1 %123, i32 %126, i32 %127
  %130 = or i32 %125, %128
  store i32 %129, ptr @ix86_isa_flags, align 4
  store i32 %130, ptr @ix86_isa_flags_explicit, align 4, !tbaa !20
  br label %207

131:                                              ; preds = %3
  %132 = icmp eq i32 %2, 0
  %133 = load i32, ptr @ix86_isa_flags, align 4
  %134 = and i32 %133, -1025
  %135 = select i1 %132, i32 0, i32 1024
  %136 = or i32 %134, %135
  store i32 %136, ptr @ix86_isa_flags, align 4, !tbaa !20
  %137 = load i32, ptr @ix86_isa_flags_explicit, align 4, !tbaa !20
  %138 = or i32 %137, 1024
  store i32 %138, ptr @ix86_isa_flags_explicit, align 4, !tbaa !20
  br label %207

139:                                              ; preds = %3
  %140 = icmp eq i32 %2, 0
  %141 = load i32, ptr @ix86_isa_flags, align 4, !tbaa !20
  %142 = load i32, ptr @ix86_isa_flags_explicit, align 4, !tbaa !20
  %143 = and i32 %141, -9
  %144 = or i32 %141, 16392
  %145 = select i1 %140, i32 8, i32 16392
  %146 = select i1 %140, i32 %143, i32 %144
  %147 = or i32 %142, %145
  store i32 %146, ptr @ix86_isa_flags, align 4
  store i32 %147, ptr @ix86_isa_flags_explicit, align 4, !tbaa !20
  br label %207

148:                                              ; preds = %3
  %149 = icmp eq i32 %2, 0
  %150 = load i32, ptr @ix86_isa_flags, align 4
  %151 = and i32 %150, -16385
  %152 = select i1 %149, i32 0, i32 16384
  %153 = or i32 %151, %152
  store i32 %153, ptr @ix86_isa_flags, align 4, !tbaa !20
  %154 = load i32, ptr @ix86_isa_flags_explicit, align 4, !tbaa !20
  %155 = or i32 %154, 16384
  store i32 %155, ptr @ix86_isa_flags_explicit, align 4, !tbaa !20
  br label %207

156:                                              ; preds = %3
  %157 = icmp eq i32 %2, 0
  %158 = load i32, ptr @ix86_isa_flags, align 4
  %159 = and i32 %158, -32769
  %160 = select i1 %157, i32 0, i32 32768
  %161 = or i32 %159, %160
  store i32 %161, ptr @ix86_isa_flags, align 4, !tbaa !20
  %162 = load i32, ptr @ix86_isa_flags_explicit, align 4, !tbaa !20
  %163 = or i32 %162, 32768
  store i32 %163, ptr @ix86_isa_flags_explicit, align 4, !tbaa !20
  br label %207

164:                                              ; preds = %3
  %165 = icmp eq i32 %2, 0
  %166 = load i32, ptr @ix86_isa_flags, align 4
  %167 = and i32 %166, -129
  %168 = select i1 %165, i32 0, i32 128
  %169 = or i32 %167, %168
  store i32 %169, ptr @ix86_isa_flags, align 4, !tbaa !20
  %170 = load i32, ptr @ix86_isa_flags_explicit, align 4, !tbaa !20
  %171 = or i32 %170, 128
  store i32 %171, ptr @ix86_isa_flags_explicit, align 4, !tbaa !20
  br label %207

172:                                              ; preds = %3
  %173 = icmp eq i32 %2, 0
  %174 = load i32, ptr @ix86_isa_flags, align 4
  %175 = and i32 %174, -4097
  %176 = select i1 %173, i32 0, i32 4096
  %177 = or i32 %175, %176
  store i32 %177, ptr @ix86_isa_flags, align 4, !tbaa !20
  %178 = load i32, ptr @ix86_isa_flags_explicit, align 4, !tbaa !20
  %179 = or i32 %178, 4096
  store i32 %179, ptr @ix86_isa_flags_explicit, align 4, !tbaa !20
  br label %207

180:                                              ; preds = %3
  %181 = icmp eq i32 %2, 0
  %182 = load i32, ptr @ix86_isa_flags, align 4
  %183 = and i32 %182, -65
  %184 = select i1 %181, i32 0, i32 64
  %185 = or i32 %183, %184
  store i32 %185, ptr @ix86_isa_flags, align 4, !tbaa !20
  %186 = load i32, ptr @ix86_isa_flags_explicit, align 4, !tbaa !20
  %187 = or i32 %186, 64
  store i32 %187, ptr @ix86_isa_flags_explicit, align 4, !tbaa !20
  br label %207

188:                                              ; preds = %3
  %189 = icmp eq i32 %2, 0
  %190 = load i32, ptr @ix86_isa_flags, align 4, !tbaa !20
  %191 = load i32, ptr @ix86_isa_flags_explicit, align 4, !tbaa !20
  %192 = and i32 %190, -17
  %193 = or i32 %190, 196624
  %194 = select i1 %189, i32 16, i32 196624
  %195 = select i1 %189, i32 %192, i32 %193
  %196 = or i32 %191, %194
  store i32 %195, ptr @ix86_isa_flags, align 4
  store i32 %196, ptr @ix86_isa_flags_explicit, align 4, !tbaa !20
  br label %207

197:                                              ; preds = %3
  %198 = icmp eq i32 %2, 0
  %199 = load i32, ptr @ix86_isa_flags, align 4, !tbaa !20
  %200 = load i32, ptr @ix86_isa_flags_explicit, align 4, !tbaa !20
  %201 = and i32 %199, -8193
  %202 = or i32 %199, 204800
  %203 = select i1 %198, i32 8192, i32 204800
  %204 = select i1 %198, i32 %201, i32 %202
  %205 = or i32 %200, %203
  store i32 %204, ptr @ix86_isa_flags, align 4
  store i32 %205, ptr @ix86_isa_flags_explicit, align 4, !tbaa !20
  br label %207

206:                                              ; preds = %3
  br label %207

207:                                              ; preds = %3, %206, %197, %188, %180, %172, %164, %156, %148, %139, %131, %122, %113, %104, %99, %94, %85, %76, %67, %58, %49, %40, %31, %22, %13, %4
  %208 = phi i8 [ 1, %206 ], [ 1, %197 ], [ 1, %188 ], [ 1, %180 ], [ 1, %172 ], [ 1, %164 ], [ 1, %156 ], [ 1, %148 ], [ 1, %139 ], [ 1, %131 ], [ 1, %122 ], [ 1, %113 ], [ 1, %104 ], [ 1, %99 ], [ 1, %94 ], [ 1, %85 ], [ 1, %76 ], [ 1, %67 ], [ 1, %58 ], [ 1, %49 ], [ 1, %40 ], [ 1, %31 ], [ 1, %22 ], [ 1, %13 ], [ 1, %4 ], [ 0, %3 ]
  ret i8 %208
}

declare i32 @default_eh_return_filter_mode() #3

declare i32 @default_libgcc_cmp_return_mode() #3

declare i32 @default_libgcc_shift_count_mode() #3

declare i32 @default_unwind_word_mode() #3

declare ptr @merge_decl_attributes(ptr noundef, ptr noundef) #3

declare ptr @merge_type_attributes(ptr noundef, ptr noundef) #3

; Function Attrs: nounwind sspstrong uwtable
define internal i32 @ix86_comp_type_attributes(ptr nocapture noundef readonly %0, ptr nocapture noundef readonly %1) #9 {
  %3 = load i32, ptr @target_flags, align 4, !tbaa !20
  %4 = and i32 %3, 131072
  %5 = icmp eq i32 %4, 0
  %6 = select i1 %5, ptr @.str.127, ptr @.str.126
  %7 = load i64, ptr %0, align 8
  %8 = and i64 %7, 65534
  %9 = icmp eq i64 %8, 20
  br i1 %9, label %10, label %77

10:                                               ; preds = %2
  %11 = getelementptr inbounds %struct.tree_type, ptr %0, i64 0, i32 4
  %12 = load ptr, ptr %11, align 8, !tbaa !16
  %13 = tail call ptr @lookup_attribute(ptr noundef nonnull @.str.128, ptr noundef %12) #30
  %14 = icmp ne ptr %13, null
  %15 = getelementptr inbounds %struct.tree_type, ptr %1, i64 0, i32 4
  %16 = load ptr, ptr %15, align 8, !tbaa !16
  %17 = tail call ptr @lookup_attribute(ptr noundef nonnull @.str.128, ptr noundef %16) #30
  %18 = icmp eq ptr %17, null
  %19 = xor i1 %14, %18
  br i1 %19, label %20, label %77

20:                                               ; preds = %10
  %21 = load i32, ptr @ix86_regparm, align 4, !tbaa !20
  %22 = load ptr, ptr %11, align 8, !tbaa !16
  %23 = tail call ptr @lookup_attribute(ptr noundef nonnull @.str.324, ptr noundef %22) #30
  %24 = icmp eq ptr %23, null
  br i1 %24, label %33, label %25

25:                                               ; preds = %20
  %26 = getelementptr inbounds %struct.tree_list, ptr %23, i64 0, i32 2
  %27 = load ptr, ptr %26, align 8, !tbaa !16
  %28 = getelementptr inbounds %struct.tree_list, ptr %27, i64 0, i32 2
  %29 = load ptr, ptr %28, align 8, !tbaa !16
  %30 = getelementptr inbounds %struct.tree_int_cst, ptr %29, i64 0, i32 1
  %31 = load i64, ptr %30, align 8, !tbaa !16
  %32 = trunc i64 %31 to i32
  br label %38

33:                                               ; preds = %20
  %34 = load ptr, ptr %11, align 8, !tbaa !16
  %35 = tail call ptr @lookup_attribute(ptr noundef nonnull @.str.128, ptr noundef %34) #30
  %36 = icmp eq ptr %35, null
  %37 = select i1 %36, i32 %21, i32 2
  br label %38

38:                                               ; preds = %33, %25
  %39 = phi i32 [ %32, %25 ], [ %37, %33 ]
  %40 = load i32, ptr @ix86_regparm, align 4, !tbaa !20
  %41 = load ptr, ptr %15, align 8, !tbaa !16
  %42 = tail call ptr @lookup_attribute(ptr noundef nonnull @.str.324, ptr noundef %41) #30
  %43 = icmp eq ptr %42, null
  br i1 %43, label %52, label %44

44:                                               ; preds = %38
  %45 = getelementptr inbounds %struct.tree_list, ptr %42, i64 0, i32 2
  %46 = load ptr, ptr %45, align 8, !tbaa !16
  %47 = getelementptr inbounds %struct.tree_list, ptr %46, i64 0, i32 2
  %48 = load ptr, ptr %47, align 8, !tbaa !16
  %49 = getelementptr inbounds %struct.tree_int_cst, ptr %48, i64 0, i32 1
  %50 = load i64, ptr %49, align 8, !tbaa !16
  %51 = trunc i64 %50 to i32
  br label %57

52:                                               ; preds = %38
  %53 = load ptr, ptr %15, align 8, !tbaa !16
  %54 = tail call ptr @lookup_attribute(ptr noundef nonnull @.str.128, ptr noundef %53) #30
  %55 = icmp eq ptr %54, null
  %56 = select i1 %55, i32 %40, i32 2
  br label %57

57:                                               ; preds = %52, %44
  %58 = phi i32 [ %51, %44 ], [ %56, %52 ]
  %59 = icmp eq i32 %39, %58
  br i1 %59, label %60, label %77

60:                                               ; preds = %57
  %61 = load ptr, ptr %11, align 8, !tbaa !16
  %62 = tail call ptr @lookup_attribute(ptr noundef nonnull @.str.325, ptr noundef %61) #30
  %63 = icmp ne ptr %62, null
  %64 = load ptr, ptr %15, align 8, !tbaa !16
  %65 = tail call ptr @lookup_attribute(ptr noundef nonnull @.str.325, ptr noundef %64) #30
  %66 = icmp eq ptr %65, null
  %67 = xor i1 %63, %66
  br i1 %67, label %68, label %77

68:                                               ; preds = %60
  %69 = load ptr, ptr %11, align 8, !tbaa !16
  %70 = tail call ptr @lookup_attribute(ptr noundef nonnull %6, ptr noundef %69) #30
  %71 = icmp ne ptr %70, null
  %72 = load ptr, ptr %15, align 8, !tbaa !16
  %73 = tail call ptr @lookup_attribute(ptr noundef nonnull %6, ptr noundef %72) #30
  %74 = icmp eq ptr %73, null
  %75 = xor i1 %71, %74
  %76 = zext i1 %75 to i32
  br label %77

77:                                               ; preds = %2, %68, %60, %10, %57
  %78 = phi i32 [ 1, %2 ], [ 0, %57 ], [ 0, %10 ], [ 0, %60 ], [ %76, %68 ]
  ret i32 %78
}

declare void @hook_void_tree(ptr noundef) #3

declare void @hook_void_tree_treeptr(ptr noundef, ptr noundef) #3

declare zeroext i8 @hook_bool_const_tree_false(ptr noundef) #3

; Function Attrs: nounwind sspstrong uwtable
define internal zeroext i8 @ix86_ms_bitfield_layout_p(ptr nocapture noundef readonly %0) #9 {
  %2 = load i32, ptr @target_flags, align 4, !tbaa !20
  %3 = and i32 %2, 1024
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %10, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %struct.tree_type, ptr %0, i64 0, i32 4
  %7 = load ptr, ptr %6, align 8, !tbaa !16
  %8 = tail call ptr @lookup_attribute(ptr noundef nonnull @.str.457, ptr noundef %7) #30
  %9 = icmp eq ptr %8, null
  br i1 %9, label %16, label %10

10:                                               ; preds = %5, %1
  %11 = getelementptr inbounds %struct.tree_type, ptr %0, i64 0, i32 4
  %12 = load ptr, ptr %11, align 8, !tbaa !16
  %13 = tail call ptr @lookup_attribute(ptr noundef nonnull @.str.456, ptr noundef %12) #30
  %14 = icmp ne ptr %13, null
  %15 = zext i1 %14 to i8
  br label %16

16:                                               ; preds = %10, %5
  %17 = phi i8 [ 1, %5 ], [ %15, %10 ]
  ret i8 %17
}

declare zeroext i8 @default_decimal_float_supported_p() #3

declare zeroext i8 @default_fixed_point_supported_p() #3

declare zeroext i8 @hook_bool_void_false() #3

; Function Attrs: nounwind sspstrong uwtable
define internal void @ix86_init_builtins() #9 {
  %1 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 33), align 8, !tbaa !5
  %2 = load i64, ptr %1, align 8
  %3 = and i64 %2, 65535
  %4 = icmp eq i64 %3, 14
  br i1 %4, label %5, label %7

5:                                                ; preds = %0
  %6 = tail call i32 @vector_type_mode(ptr noundef nonnull %1) #30
  br label %12

7:                                                ; preds = %0
  %8 = getelementptr inbounds %struct.tree_type, ptr %1, i64 0, i32 6
  %9 = load i32, ptr %8, align 4
  %10 = lshr i32 %9, 16
  %11 = and i32 %10, 255
  br label %12

12:                                               ; preds = %7, %5
  %13 = phi i32 [ %6, %5 ], [ %11, %7 ]
  %14 = icmp eq i32 %13, 40
  br i1 %14, label %21, label %15

15:                                               ; preds = %12
  %16 = tail call ptr @make_node_stat(i32 noundef 9) #30
  %17 = getelementptr inbounds %struct.tree_type, ptr %16, i64 0, i32 6
  %18 = load i32, ptr %17, align 4
  %19 = and i32 %18, -1024
  %20 = or i32 %19, 80
  store i32 %20, ptr %17, align 4
  tail call void @layout_type(ptr noundef %16) #30
  br label %21

21:                                               ; preds = %12, %15
  %22 = phi ptr [ %16, %15 ], [ %1, %12 ]
  %23 = load ptr, ptr getelementptr inbounds (%struct.lang_hooks, ptr @lang_hooks, i64 0, i32 34, i32 7), align 8, !tbaa !332
  tail call void %23(ptr noundef nonnull %22, ptr noundef nonnull @.str.478) #30
  %24 = tail call ptr @make_node_stat(i32 noundef 9) #30
  %25 = getelementptr inbounds %struct.tree_type, ptr %24, i64 0, i32 6
  %26 = load i32, ptr %25, align 4
  %27 = and i32 %26, -1024
  %28 = or i32 %27, 128
  store i32 %28, ptr %25, align 4
  tail call void @layout_type(ptr noundef %24) #30
  %29 = load ptr, ptr getelementptr inbounds (%struct.lang_hooks, ptr @lang_hooks, i64 0, i32 34, i32 7), align 8, !tbaa !332
  tail call void %29(ptr noundef %24, ptr noundef nonnull @.str.479) #30
  %30 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 38), align 16, !tbaa !5
  store ptr %30, ptr @ix86_builtin_type_tab, align 16, !tbaa !5
  %31 = load ptr, ptr @integer_types, align 16, !tbaa !5
  store ptr %31, ptr getelementptr inbounds ([69 x ptr], ptr @ix86_builtin_type_tab, i64 0, i64 1), align 8, !tbaa !5
  %32 = load ptr, ptr getelementptr inbounds ([11 x ptr], ptr @integer_types, i64 0, i64 2), align 16, !tbaa !5
  store ptr %32, ptr getelementptr inbounds ([69 x ptr], ptr @ix86_builtin_type_tab, i64 0, i64 2), align 16, !tbaa !5
  store ptr %31, ptr getelementptr inbounds ([69 x ptr], ptr @ix86_builtin_type_tab, i64 0, i64 3), align 8, !tbaa !5
  %33 = load <2 x ptr>, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 2), align 16, !tbaa !5
  %34 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 6), align 16, !tbaa !5
  %35 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 7), align 8, !tbaa !5
  store ptr %35, ptr getelementptr inbounds ([69 x ptr], ptr @ix86_builtin_type_tab, i64 0, i64 8), align 16, !tbaa !5
  %36 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 8), align 16, !tbaa !5
  %37 = load <2 x ptr>, ptr getelementptr inbounds ([11 x ptr], ptr @integer_types, i64 0, i64 9), align 8, !tbaa !5
  %38 = shufflevector <2 x ptr> %37, <2 x ptr> poison, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>
  %39 = shufflevector <2 x ptr> %33, <2 x ptr> %37, <4 x i32> <i32 0, i32 1, i32 2, i32 poison>
  %40 = insertelement <4 x ptr> %39, ptr %34, i64 3
  store <4 x ptr> %40, ptr getelementptr inbounds ([69 x ptr], ptr @ix86_builtin_type_tab, i64 0, i64 4), align 16, !tbaa !5
  %41 = load <2 x ptr>, ptr getelementptr inbounds ([11 x ptr], ptr @integer_types, i64 0, i64 4), align 16, !tbaa !5
  %42 = insertelement <4 x ptr> %38, ptr %36, i64 0
  %43 = shufflevector <2 x ptr> %41, <2 x ptr> poison, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>
  %44 = shufflevector <4 x ptr> %42, <4 x ptr> %43, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  store <4 x ptr> %44, ptr getelementptr inbounds ([69 x ptr], ptr @ix86_builtin_type_tab, i64 0, i64 9), align 8, !tbaa !5
  %45 = load ptr, ptr getelementptr inbounds ([11 x ptr], ptr @integer_types, i64 0, i64 6), align 16, !tbaa !5
  %46 = insertelement <4 x ptr> poison, ptr %45, i64 0
  %47 = shufflevector <4 x ptr> %46, <4 x ptr> %38, <4 x i32> <i32 0, i32 poison, i32 4, i32 5>
  %48 = shufflevector <4 x ptr> %47, <4 x ptr> poison, <4 x i32> <i32 0, i32 0, i32 2, i32 3>
  store <4 x ptr> %48, ptr getelementptr inbounds ([69 x ptr], ptr @ix86_builtin_type_tab, i64 0, i64 13), align 8, !tbaa !5
  %49 = insertelement <4 x ptr> poison, ptr %32, i64 0
  %50 = shufflevector <4 x ptr> %49, <4 x ptr> %43, <4 x i32> <i32 0, i32 4, i32 poison, i32 poison>
  %51 = shufflevector <4 x ptr> %50, <4 x ptr> %38, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  store <4 x ptr> %51, ptr getelementptr inbounds ([69 x ptr], ptr @ix86_builtin_type_tab, i64 0, i64 17), align 8, !tbaa !5
  %52 = load <2 x ptr>, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 31), align 8, !tbaa !5
  store <2 x ptr> %52, ptr getelementptr inbounds ([69 x ptr], ptr @ix86_builtin_type_tab, i64 0, i64 21), align 8, !tbaa !5
  store ptr %22, ptr getelementptr inbounds ([69 x ptr], ptr @ix86_builtin_type_tab, i64 0, i64 23), align 8, !tbaa !5
  store ptr %24, ptr getelementptr inbounds ([69 x ptr], ptr @ix86_builtin_type_tab, i64 0, i64 24), align 16, !tbaa !5
  store i32 0, ptr getelementptr inbounds ([801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 615, i32 2), align 4, !tbaa !70
  %53 = load ptr, ptr @ix86_builtin_func_type_tab, align 16, !tbaa !5
  %54 = icmp eq ptr %53, null
  br i1 %54, label %55, label %59

55:                                               ; preds = %21
  %56 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 55), align 8, !tbaa !5
  %57 = tail call fastcc ptr @ix86_get_builtin_type(i32 noundef 24)
  %58 = tail call ptr @build_function_type(ptr noundef %57, ptr noundef %56) #30
  store ptr %58, ptr @ix86_builtin_func_type_tab, align 16, !tbaa !5
  br label %59

59:                                               ; preds = %21, %55
  %60 = phi ptr [ %58, %55 ], [ %53, %21 ]
  %61 = tail call ptr @add_builtin_function(ptr noundef nonnull @.str.472, ptr noundef %60, i32 noundef 615, i32 noundef 2, ptr noundef null, ptr noundef null) #30
  store ptr %61, ptr getelementptr inbounds ([801 x ptr], ptr @ix86_builtins, i64 0, i64 615), align 8, !tbaa !5
  store i8 0, ptr getelementptr inbounds ([801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 615, i32 4), align 1, !tbaa !72
  %62 = icmp eq ptr %61, null
  br i1 %62, label %66, label %63

63:                                               ; preds = %59
  %64 = load i64, ptr %61, align 8
  %65 = or i64 %64, 1048576
  store i64 %65, ptr %61, align 8
  br label %67

66:                                               ; preds = %59
  store i8 1, ptr getelementptr inbounds ([801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 615, i32 3), align 8, !tbaa !75
  br label %67

67:                                               ; preds = %63, %66
  store i32 0, ptr getelementptr inbounds ([801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 616, i32 2), align 4, !tbaa !70
  %68 = load ptr, ptr @ix86_builtin_func_type_tab, align 16, !tbaa !5
  %69 = icmp eq ptr %68, null
  br i1 %69, label %70, label %74

70:                                               ; preds = %67
  %71 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 55), align 8, !tbaa !5
  %72 = tail call fastcc ptr @ix86_get_builtin_type(i32 noundef 24)
  %73 = tail call ptr @build_function_type(ptr noundef %72, ptr noundef %71) #30
  store ptr %73, ptr @ix86_builtin_func_type_tab, align 16, !tbaa !5
  br label %74

74:                                               ; preds = %67, %70
  %75 = phi ptr [ %73, %70 ], [ %68, %67 ]
  %76 = tail call ptr @add_builtin_function(ptr noundef nonnull @.str.473, ptr noundef %75, i32 noundef 616, i32 noundef 2, ptr noundef null, ptr noundef null) #30
  store ptr %76, ptr getelementptr inbounds ([801 x ptr], ptr @ix86_builtins, i64 0, i64 616), align 16, !tbaa !5
  store i8 0, ptr getelementptr inbounds ([801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 616, i32 4), align 1, !tbaa !72
  %77 = icmp eq ptr %76, null
  br i1 %77, label %81, label %78

78:                                               ; preds = %74
  %79 = load i64, ptr %76, align 8
  %80 = or i64 %79, 1048576
  store i64 %80, ptr %76, align 8
  br label %82

81:                                               ; preds = %74
  store i8 1, ptr getelementptr inbounds ([801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 616, i32 3), align 16, !tbaa !75
  br label %82

82:                                               ; preds = %78, %81
  %83 = load ptr, ptr getelementptr inbounds ([271 x ptr], ptr @ix86_builtin_func_type_tab, i64 0, i64 6), align 16, !tbaa !5
  %84 = icmp eq ptr %83, null
  br i1 %84, label %85, label %91

85:                                               ; preds = %82
  %86 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 55), align 8, !tbaa !5
  %87 = tail call fastcc ptr @ix86_get_builtin_type(i32 noundef 24)
  %88 = tail call fastcc ptr @ix86_get_builtin_type(i32 noundef 24)
  %89 = tail call ptr @tree_cons_stat(ptr noundef null, ptr noundef %88, ptr noundef %86) #30
  %90 = tail call ptr @build_function_type(ptr noundef %87, ptr noundef %89) #30
  store ptr %90, ptr getelementptr inbounds ([271 x ptr], ptr @ix86_builtin_func_type_tab, i64 0, i64 6), align 16, !tbaa !5
  br label %91

91:                                               ; preds = %82, %85
  %92 = phi ptr [ %90, %85 ], [ %83, %82 ]
  %93 = tail call ptr @add_builtin_function(ptr noundef nonnull @.str.474, ptr noundef %92, i32 noundef 617, i32 noundef 2, ptr noundef nonnull @.str.475, ptr noundef null) #30
  %94 = load i64, ptr %93, align 8
  %95 = or i64 %94, 1048576
  store i64 %95, ptr %93, align 8
  store ptr %93, ptr getelementptr inbounds ([801 x ptr], ptr @ix86_builtins, i64 0, i64 617), align 8, !tbaa !5
  %96 = load ptr, ptr getelementptr inbounds ([271 x ptr], ptr @ix86_builtin_func_type_tab, i64 0, i64 76), align 16, !tbaa !5
  %97 = icmp eq ptr %96, null
  br i1 %97, label %98, label %106

98:                                               ; preds = %91
  %99 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 55), align 8, !tbaa !5
  %100 = tail call fastcc ptr @ix86_get_builtin_type(i32 noundef 24)
  %101 = tail call fastcc ptr @ix86_get_builtin_type(i32 noundef 24)
  %102 = tail call ptr @tree_cons_stat(ptr noundef null, ptr noundef %101, ptr noundef %99) #30
  %103 = tail call fastcc ptr @ix86_get_builtin_type(i32 noundef 24)
  %104 = tail call ptr @tree_cons_stat(ptr noundef null, ptr noundef %103, ptr noundef %102) #30
  %105 = tail call ptr @build_function_type(ptr noundef %100, ptr noundef %104) #30
  store ptr %105, ptr getelementptr inbounds ([271 x ptr], ptr @ix86_builtin_func_type_tab, i64 0, i64 76), align 16, !tbaa !5
  br label %106

106:                                              ; preds = %91, %98
  %107 = phi ptr [ %105, %98 ], [ %96, %91 ]
  %108 = tail call ptr @add_builtin_function(ptr noundef nonnull @.str.476, ptr noundef %107, i32 noundef 618, i32 noundef 2, ptr noundef nonnull @.str.477, ptr noundef null) #30
  %109 = load i64, ptr %108, align 8
  %110 = or i64 %109, 1048576
  store i64 %110, ptr %108, align 8
  store ptr %108, ptr getelementptr inbounds ([801 x ptr], ptr @ix86_builtins, i64 0, i64 618), align 16, !tbaa !5
  tail call fastcc void @ix86_init_mmx_sse_builtins()
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind sspstrong willreturn memory(read, inaccessiblemem: none) uwtable
define internal ptr @ix86_builtin_decl(i32 noundef %0, i8 zeroext %1) #23 {
  %3 = icmp ugt i32 %0, 800
  %4 = zext i32 %0 to i64
  %5 = getelementptr inbounds [801 x ptr], ptr @ix86_builtins, i64 0, i64 %4
  %6 = select i1 %3, ptr @global_trees, ptr %5
  %7 = load ptr, ptr %6, align 8, !tbaa !5
  ret ptr %7
}

; Function Attrs: nounwind sspstrong uwtable
define internal ptr @ix86_expand_builtin(ptr noundef %0, ptr noundef %1, ptr nocapture readnone %2, i32 noundef %3, i32 noundef %4) #9 {
  %6 = alloca %struct.expand_vec_perm_d, align 8
  %7 = alloca %struct.real_value, align 8
  %8 = getelementptr inbounds %struct.tree_exp, ptr %0, i64 1
  %9 = load ptr, ptr %8, align 8, !tbaa !16
  %10 = getelementptr inbounds %struct.tree_exp, ptr %9, i64 0, i32 3
  %11 = load ptr, ptr %10, align 8, !tbaa !16
  %12 = getelementptr inbounds %struct.tree_function_decl, ptr %11, i64 0, i32 5
  %13 = load i32, ptr %12, align 8
  %14 = and i32 %13, 2047
  %15 = zext i32 %14 to i64
  %16 = getelementptr inbounds [801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 %15, i32 2
  %17 = load i32, ptr %16, align 4, !tbaa !70
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %30, label %19

19:                                               ; preds = %5
  %20 = load i32, ptr @ix86_isa_flags, align 4, !tbaa !20
  %21 = and i32 %20, %17
  %22 = icmp eq i32 %21, 0
  br i1 %22, label %23, label %30

23:                                               ; preds = %19
  %24 = tail call fastcc ptr @ix86_target_string(i32 noundef %17, i32 noundef 0)
  %25 = icmp eq ptr %24, null
  br i1 %25, label %26, label %27

26:                                               ; preds = %23
  tail call void (ptr, ...) @error(ptr noundef nonnull @.str.1284, ptr noundef nonnull %11) #30
  br label %28

27:                                               ; preds = %23
  tail call void (ptr, ...) @error(ptr noundef nonnull @.str.1285, ptr noundef nonnull %11, ptr noundef nonnull %24) #30
  tail call void @free(ptr noundef nonnull %24)
  br label %28

28:                                               ; preds = %27, %26
  %29 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 64), align 16, !tbaa !5
  br label %1136

30:                                               ; preds = %19, %5
  switch i32 %14, label %1014 [
    i32 64, label %31
    i32 261, label %31
    i32 151, label %85
    i32 152, label %93
    i32 336, label %98
    i32 357, label %112
    i32 358, label %145
    i32 440, label %168
    i32 441, label %168
    i32 442, label %168
    i32 443, label %230
    i32 444, label %230
    i32 445, label %230
    i32 446, label %230
    i32 447, label %230
    i32 448, label %230
    i32 449, label %230
    i32 450, label %230
    i32 451, label %302
    i32 452, label %302
    i32 453, label %302
    i32 454, label %302
    i32 455, label %302
    i32 456, label %302
    i32 622, label %379
    i32 623, label %379
    i32 624, label %379
    i32 625, label %379
    i32 626, label %379
    i32 627, label %379
    i32 628, label %379
    i32 629, label %379
    i32 630, label %379
    i32 631, label %379
    i32 632, label %379
    i32 633, label %379
    i32 615, label %913
    i32 616, label %913
    i32 794, label %923
    i32 795, label %937
    i32 342, label %1007
    i32 343, label %950
  ]

31:                                               ; preds = %30, %30
  %32 = icmp eq i32 %14, 64
  %33 = select i1 %32, i64 2581, i64 2885
  %34 = getelementptr inbounds %struct.tree_exp, ptr %0, i64 1, i32 0, i32 2
  %35 = load ptr, ptr %34, align 8, !tbaa !16
  %36 = getelementptr inbounds %struct.tree_exp, ptr %0, i64 1, i32 1
  %37 = load ptr, ptr %36, align 8, !tbaa !16
  %38 = getelementptr inbounds %struct.tree_exp, ptr %0, i64 1, i32 2
  %39 = load ptr, ptr %38, align 8, !tbaa !16
  %40 = tail call ptr @expand_expr_real(ptr noundef %39, ptr noundef null, i32 noundef 0, i32 noundef 0, ptr noundef null) #30
  %41 = tail call ptr @expand_expr_real(ptr noundef %35, ptr noundef null, i32 noundef 0, i32 noundef 0, ptr noundef null) #30
  %42 = tail call ptr @expand_expr_real(ptr noundef %37, ptr noundef null, i32 noundef 0, i32 noundef 0, ptr noundef null) #30
  %43 = getelementptr inbounds [0 x %struct.insn_data], ptr @insn_data, i64 0, i64 %33, i32 3
  %44 = load ptr, ptr %43, align 8, !tbaa !340
  %45 = getelementptr inbounds %struct.insn_operand_data, ptr %44, i64 0, i32 2
  %46 = load i16, ptr %45, align 8
  %47 = zext i16 %46 to i32
  %48 = getelementptr inbounds %struct.insn_operand_data, ptr %44, i64 1, i32 2
  %49 = load i16, ptr %48, align 8
  %50 = zext i16 %49 to i32
  %51 = getelementptr inbounds %struct.insn_operand_data, ptr %44, i64 2, i32 2
  %52 = load i16, ptr %51, align 8
  %53 = zext i16 %52 to i32
  %54 = tail call ptr @force_reg(i32 noundef 16, ptr noundef %40) #30
  %55 = tail call ptr @gen_rtx_MEM(i32 noundef %50, ptr noundef %54) #30
  %56 = load ptr, ptr %44, align 8, !tbaa !342
  %57 = tail call i32 %56(ptr noundef %55, i32 noundef %47) #30
  %58 = icmp eq i32 %57, 0
  br i1 %58, label %59, label %61

59:                                               ; preds = %31
  %60 = tail call ptr @copy_to_mode_reg(i32 noundef %47, ptr noundef %55) #30
  br label %61

61:                                               ; preds = %59, %31
  %62 = phi ptr [ %55, %31 ], [ %60, %59 ]
  %63 = getelementptr inbounds %struct.insn_operand_data, ptr %44, i64 1
  %64 = load ptr, ptr %63, align 8, !tbaa !342
  %65 = tail call i32 %64(ptr noundef %41, i32 noundef %50) #30
  %66 = icmp eq i32 %65, 0
  br i1 %66, label %67, label %69

67:                                               ; preds = %61
  %68 = tail call ptr @copy_to_mode_reg(i32 noundef %50, ptr noundef %41) #30
  br label %69

69:                                               ; preds = %67, %61
  %70 = phi ptr [ %41, %61 ], [ %68, %67 ]
  %71 = getelementptr inbounds %struct.insn_operand_data, ptr %44, i64 2
  %72 = load ptr, ptr %71, align 8, !tbaa !342
  %73 = tail call i32 %72(ptr noundef %42, i32 noundef %53) #30
  %74 = icmp eq i32 %73, 0
  br i1 %74, label %75, label %77

75:                                               ; preds = %69
  %76 = tail call ptr @copy_to_mode_reg(i32 noundef %53, ptr noundef %42) #30
  br label %77

77:                                               ; preds = %75, %69
  %78 = phi ptr [ %42, %69 ], [ %76, %75 ]
  %79 = getelementptr inbounds [0 x %struct.insn_data], ptr @insn_data, i64 0, i64 %33, i32 2
  %80 = load ptr, ptr %79, align 8, !tbaa !344
  %81 = tail call ptr (ptr, ...) %80(ptr noundef %62, ptr noundef %70, ptr noundef %78) #30
  %82 = icmp eq ptr %81, null
  br i1 %82, label %1136, label %83

83:                                               ; preds = %77
  %84 = tail call ptr @emit_insn(ptr noundef nonnull %81) #30
  br label %1136

85:                                               ; preds = %30
  %86 = getelementptr inbounds %struct.tree_exp, ptr %0, i64 1, i32 0, i32 2
  %87 = load ptr, ptr %86, align 8, !tbaa !16
  %88 = tail call ptr @expand_expr_real(ptr noundef %87, ptr noundef null, i32 noundef 0, i32 noundef 0, ptr noundef null) #30
  %89 = tail call ptr @assign_386_stack_local(i32 noundef 16, i32 noundef 0)
  %90 = tail call ptr @emit_move_insn(ptr noundef %89, ptr noundef %88) #30
  %91 = tail call ptr @gen_sse_ldmxcsr(ptr noundef %89) #30
  %92 = tail call ptr @emit_insn(ptr noundef %91) #30
  br label %1136

93:                                               ; preds = %30
  %94 = tail call ptr @assign_386_stack_local(i32 noundef 16, i32 noundef 0)
  %95 = tail call ptr @gen_sse_stmxcsr(ptr noundef %94) #30
  %96 = tail call ptr @emit_insn(ptr noundef %95) #30
  %97 = tail call ptr @copy_to_mode_reg(i32 noundef 16, ptr noundef %94) #30
  br label %1136

98:                                               ; preds = %30
  %99 = getelementptr inbounds %struct.tree_exp, ptr %0, i64 1, i32 0, i32 2
  %100 = load ptr, ptr %99, align 8, !tbaa !16
  %101 = tail call ptr @expand_expr_real(ptr noundef %100, ptr noundef null, i32 noundef 0, i32 noundef 0, ptr noundef null) #30
  %102 = load ptr, ptr getelementptr inbounds ([0 x %struct.insn_data], ptr @insn_data, i64 0, i64 1508, i32 3), align 8, !tbaa !340
  %103 = load ptr, ptr %102, align 8, !tbaa !342
  %104 = tail call i32 %103(ptr noundef %101, i32 noundef 16) #30
  %105 = icmp eq i32 %104, 0
  br i1 %105, label %106, label %108

106:                                              ; preds = %98
  %107 = tail call ptr @copy_to_mode_reg(i32 noundef 16, ptr noundef %101) #30
  br label %108

108:                                              ; preds = %106, %98
  %109 = phi ptr [ %101, %98 ], [ %107, %106 ]
  %110 = tail call ptr @gen_sse2_clflush(ptr noundef %109) #30
  %111 = tail call ptr @emit_insn(ptr noundef %110) #30
  br label %1136

112:                                              ; preds = %30
  %113 = getelementptr inbounds %struct.tree_exp, ptr %0, i64 1, i32 0, i32 2
  %114 = load ptr, ptr %113, align 8, !tbaa !16
  %115 = getelementptr inbounds %struct.tree_exp, ptr %0, i64 1, i32 1
  %116 = load ptr, ptr %115, align 8, !tbaa !16
  %117 = getelementptr inbounds %struct.tree_exp, ptr %0, i64 1, i32 2
  %118 = load ptr, ptr %117, align 8, !tbaa !16
  %119 = tail call ptr @expand_expr_real(ptr noundef %114, ptr noundef null, i32 noundef 0, i32 noundef 0, ptr noundef null) #30
  %120 = tail call ptr @expand_expr_real(ptr noundef %116, ptr noundef null, i32 noundef 0, i32 noundef 0, ptr noundef null) #30
  %121 = tail call ptr @expand_expr_real(ptr noundef %118, ptr noundef null, i32 noundef 0, i32 noundef 0, ptr noundef null) #30
  %122 = load i32, ptr %119, align 8
  %123 = and i32 %122, 65535
  %124 = icmp eq i32 %123, 37
  br i1 %124, label %127, label %125

125:                                              ; preds = %112
  %126 = tail call ptr @copy_to_mode_reg(i32 noundef 16, ptr noundef nonnull %119) #30
  br label %127

127:                                              ; preds = %125, %112
  %128 = phi ptr [ %119, %112 ], [ %126, %125 ]
  %129 = load i32, ptr %120, align 8
  %130 = and i32 %129, 65535
  %131 = icmp eq i32 %130, 37
  br i1 %131, label %134, label %132

132:                                              ; preds = %127
  %133 = tail call ptr @copy_to_mode_reg(i32 noundef 16, ptr noundef nonnull %120) #30
  br label %134

134:                                              ; preds = %132, %127
  %135 = phi ptr [ %120, %127 ], [ %133, %132 ]
  %136 = load i32, ptr %121, align 8
  %137 = and i32 %136, 65535
  %138 = icmp eq i32 %137, 37
  br i1 %138, label %141, label %139

139:                                              ; preds = %134
  %140 = tail call ptr @copy_to_mode_reg(i32 noundef 16, ptr noundef nonnull %121) #30
  br label %141

141:                                              ; preds = %139, %134
  %142 = phi ptr [ %121, %134 ], [ %140, %139 ]
  %143 = tail call ptr @gen_sse3_monitor(ptr noundef %128, ptr noundef %135, ptr noundef %142) #30, !callees !345
  %144 = tail call ptr @emit_insn(ptr noundef %143) #30
  br label %1136

145:                                              ; preds = %30
  %146 = getelementptr inbounds %struct.tree_exp, ptr %0, i64 1, i32 0, i32 2
  %147 = load ptr, ptr %146, align 8, !tbaa !16
  %148 = getelementptr inbounds %struct.tree_exp, ptr %0, i64 1, i32 1
  %149 = load ptr, ptr %148, align 8, !tbaa !16
  %150 = tail call ptr @expand_expr_real(ptr noundef %147, ptr noundef null, i32 noundef 0, i32 noundef 0, ptr noundef null) #30
  %151 = tail call ptr @expand_expr_real(ptr noundef %149, ptr noundef null, i32 noundef 0, i32 noundef 0, ptr noundef null) #30
  %152 = load i32, ptr %150, align 8
  %153 = and i32 %152, 65535
  %154 = icmp eq i32 %153, 37
  br i1 %154, label %157, label %155

155:                                              ; preds = %145
  %156 = tail call ptr @copy_to_mode_reg(i32 noundef 16, ptr noundef nonnull %150) #30
  br label %157

157:                                              ; preds = %155, %145
  %158 = phi ptr [ %150, %145 ], [ %156, %155 ]
  %159 = load i32, ptr %151, align 8
  %160 = and i32 %159, 65535
  %161 = icmp eq i32 %160, 37
  br i1 %161, label %164, label %162

162:                                              ; preds = %157
  %163 = tail call ptr @copy_to_mode_reg(i32 noundef 16, ptr noundef nonnull %151) #30
  br label %164

164:                                              ; preds = %162, %157
  %165 = phi ptr [ %151, %157 ], [ %163, %162 ]
  %166 = tail call ptr @gen_sse3_mwait(ptr noundef %158, ptr noundef %165) #30
  %167 = tail call ptr @emit_insn(ptr noundef %166) #30
  br label %1136

168:                                              ; preds = %30, %30, %30
  %169 = getelementptr inbounds %struct.tree_common, ptr %0, i64 0, i32 2
  %170 = load ptr, ptr %169, align 8, !tbaa !16
  %171 = load i64, ptr %170, align 8
  %172 = and i64 %171, 65535
  %173 = icmp eq i64 %172, 14
  br i1 %173, label %174, label %176

174:                                              ; preds = %168
  %175 = tail call i32 @vector_type_mode(ptr noundef nonnull %170) #30
  br label %181

176:                                              ; preds = %168
  %177 = getelementptr inbounds %struct.tree_type, ptr %170, i64 0, i32 6
  %178 = load i32, ptr %177, align 4
  %179 = lshr i32 %178, 16
  %180 = and i32 %179, 255
  br label %181

181:                                              ; preds = %176, %174
  %182 = phi i32 [ %175, %174 ], [ %180, %176 ]
  %183 = zext i32 %182 to i64
  %184 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %183
  %185 = load i8, ptr %184, align 1, !tbaa !16
  %186 = zext i8 %185 to i32
  %187 = getelementptr inbounds [87 x i8], ptr @mode_nunits, i64 0, i64 %183
  %188 = load i8, ptr %187, align 1, !tbaa !16
  %189 = zext i8 %188 to i32
  %190 = tail call ptr @rtvec_alloc(i32 noundef %189) #30
  %191 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %183
  %192 = load i8, ptr %191, align 1, !tbaa !16
  %193 = add i8 %192, -12
  %194 = icmp ult i8 %193, 6
  br i1 %194, label %196, label %195

195:                                              ; preds = %181
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 24046, ptr noundef nonnull @.str.131) #30
  br label %196

196:                                              ; preds = %195, %181
  %197 = getelementptr inbounds %struct.tree_exp, ptr %0, i64 0, i32 3
  %198 = load ptr, ptr %197, align 8, !tbaa !16
  %199 = getelementptr inbounds %struct.tree_int_cst, ptr %198, i64 0, i32 1
  %200 = load i64, ptr %199, align 8, !tbaa !16
  %201 = trunc i64 %200 to i32
  %202 = add nsw i32 %201, -3
  %203 = icmp eq i32 %202, %189
  br i1 %203, label %205, label %204

204:                                              ; preds = %196
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 24047, ptr noundef nonnull @.str.131) #30
  br label %205

205:                                              ; preds = %204, %196
  %206 = icmp eq i8 %188, 0
  br i1 %206, label %220, label %207

207:                                              ; preds = %205
  %208 = zext i8 %188 to i64
  br label %209

209:                                              ; preds = %209, %207
  %210 = phi i64 [ 0, %207 ], [ %218, %209 ]
  %211 = add nuw nsw i64 %210, 3
  %212 = getelementptr inbounds %struct.tree_exp, ptr %0, i64 0, i32 3, i64 %211
  %213 = load ptr, ptr %212, align 8, !tbaa !16
  %214 = tail call ptr @expand_expr_real(ptr noundef %213, ptr noundef null, i32 noundef 0, i32 noundef 0, ptr noundef null) #30
  %215 = load ptr, ptr @rtl_hooks, align 8, !tbaa !187
  %216 = tail call ptr %215(i32 noundef %186, ptr noundef %214) #30
  %217 = getelementptr inbounds %struct.rtvec_def, ptr %190, i64 0, i32 1, i64 %210
  store ptr %216, ptr %217, align 8, !tbaa !5
  %218 = add nuw nsw i64 %210, 1
  %219 = icmp eq i64 %218, %208
  br i1 %219, label %220, label %209, !llvm.loop !346

220:                                              ; preds = %209, %205
  %221 = icmp eq ptr %1, null
  br i1 %221, label %225, label %222

222:                                              ; preds = %220
  %223 = tail call i32 @register_operand(ptr noundef nonnull %1, i32 noundef %182) #30
  %224 = icmp eq i32 %223, 0
  br i1 %224, label %225, label %227

225:                                              ; preds = %222, %220
  %226 = tail call ptr @gen_reg_rtx(i32 noundef %182) #30
  br label %227

227:                                              ; preds = %222, %225
  %228 = phi ptr [ %1, %222 ], [ %226, %225 ]
  %229 = tail call ptr @gen_rtx_fmt_E_stat(i32 noundef 15, i32 noundef %182, ptr noundef %190) #30
  tail call void @ix86_expand_vector_init(i8 noundef zeroext 1, ptr noundef %228, ptr noundef %229)
  br label %1136

230:                                              ; preds = %30, %30, %30, %30, %30, %30, %30, %30
  %231 = getelementptr i8, ptr %0, i64 64
  %232 = load ptr, ptr %231, align 8, !tbaa !16
  %233 = getelementptr i8, ptr %0, i64 72
  %234 = load ptr, ptr %233, align 8, !tbaa !16
  %235 = tail call ptr @expand_expr_real(ptr noundef %232, ptr noundef null, i32 noundef 0, i32 noundef 0, ptr noundef null) #30
  %236 = getelementptr inbounds %struct.tree_common, ptr %232, i64 0, i32 2
  %237 = load ptr, ptr %236, align 8, !tbaa !16
  %238 = getelementptr i8, ptr %237, i64 60
  %239 = load i32, ptr %238, align 4
  %240 = and i32 %239, 1023
  %241 = zext i32 %240 to i64
  %242 = shl nsw i64 -1, %241
  %243 = xor i64 %242, -1
  %244 = tail call i32 @host_integerp(ptr noundef %234, i32 noundef 1) #30
  %245 = icmp eq i32 %244, 0
  br i1 %245, label %249, label %246

246:                                              ; preds = %230
  %247 = tail call i64 @tree_low_cst(ptr noundef %234, i32 noundef 1) #30
  %248 = icmp ugt i64 %247, %243
  br i1 %248, label %249, label %250

249:                                              ; preds = %246, %230
  tail call void (ptr, ...) @error(ptr noundef nonnull @.str.1332, i64 noundef %243) #30
  br label %252

250:                                              ; preds = %246
  %251 = trunc i64 %247 to i32
  br label %252

252:                                              ; preds = %250, %249
  %253 = phi i32 [ 0, %249 ], [ %251, %250 ]
  %254 = load ptr, ptr %236, align 8, !tbaa !16
  %255 = getelementptr inbounds %struct.tree_common, ptr %254, i64 0, i32 2
  %256 = load ptr, ptr %255, align 8, !tbaa !16
  %257 = load i64, ptr %256, align 8
  %258 = and i64 %257, 65535
  %259 = icmp eq i64 %258, 14
  br i1 %259, label %260, label %263

260:                                              ; preds = %252
  %261 = tail call i32 @vector_type_mode(ptr noundef nonnull %256) #30
  %262 = load ptr, ptr %236, align 8, !tbaa !16
  br label %268

263:                                              ; preds = %252
  %264 = getelementptr inbounds %struct.tree_type, ptr %256, i64 0, i32 6
  %265 = load i32, ptr %264, align 4
  %266 = lshr i32 %265, 16
  %267 = and i32 %266, 255
  br label %268

268:                                              ; preds = %263, %260
  %269 = phi ptr [ %262, %260 ], [ %254, %263 ]
  %270 = phi i32 [ %261, %260 ], [ %267, %263 ]
  %271 = load i64, ptr %269, align 8
  %272 = and i64 %271, 65535
  %273 = icmp eq i64 %272, 14
  br i1 %273, label %274, label %276

274:                                              ; preds = %268
  %275 = tail call i32 @vector_type_mode(ptr noundef nonnull %269) #30
  br label %281

276:                                              ; preds = %268
  %277 = getelementptr inbounds %struct.tree_type, ptr %269, i64 0, i32 6
  %278 = load i32, ptr %277, align 4
  %279 = lshr i32 %278, 16
  %280 = and i32 %279, 255
  br label %281

281:                                              ; preds = %276, %274
  %282 = phi i32 [ %275, %274 ], [ %280, %276 ]
  %283 = zext i32 %282 to i64
  %284 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %283
  %285 = load i8, ptr %284, align 1, !tbaa !16
  %286 = add i8 %285, -12
  %287 = icmp ult i8 %286, 6
  br i1 %287, label %289, label %288

288:                                              ; preds = %281
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 24082, ptr noundef nonnull @.str.131) #30
  br label %289

289:                                              ; preds = %288, %281
  %290 = tail call ptr @force_reg(i32 noundef %282, ptr noundef %235) #30
  %291 = load i32, ptr @optimize, align 4, !tbaa !20
  %292 = icmp eq i32 %291, 0
  %293 = icmp ne ptr %1, null
  %294 = and i1 %293, %292
  br i1 %294, label %295, label %298

295:                                              ; preds = %289
  %296 = tail call i32 @register_operand(ptr noundef nonnull %1, i32 noundef %270) #30
  %297 = icmp eq i32 %296, 0
  br i1 %297, label %298, label %300

298:                                              ; preds = %295, %289
  %299 = tail call ptr @gen_reg_rtx(i32 noundef %270) #30
  br label %300

300:                                              ; preds = %295, %298
  %301 = phi ptr [ %1, %295 ], [ %299, %298 ]
  tail call void @ix86_expand_vector_extract(i8 noundef zeroext 1, ptr noundef %301, ptr noundef %290, i32 noundef %253)
  br label %1136

302:                                              ; preds = %30, %30, %30, %30, %30, %30
  %303 = getelementptr inbounds %struct.tree_exp, ptr %0, i64 1, i32 0, i32 2
  %304 = load ptr, ptr %303, align 8, !tbaa !16
  %305 = getelementptr inbounds %struct.tree_exp, ptr %0, i64 1, i32 1
  %306 = load ptr, ptr %305, align 8, !tbaa !16
  %307 = getelementptr inbounds %struct.tree_exp, ptr %0, i64 1, i32 2
  %308 = load ptr, ptr %307, align 8, !tbaa !16
  %309 = getelementptr inbounds %struct.tree_common, ptr %304, i64 0, i32 2
  %310 = load ptr, ptr %309, align 8, !tbaa !16
  %311 = load i64, ptr %310, align 8
  %312 = and i64 %311, 65535
  %313 = icmp eq i64 %312, 14
  br i1 %313, label %314, label %317

314:                                              ; preds = %302
  %315 = tail call i32 @vector_type_mode(ptr noundef nonnull %310) #30
  %316 = load ptr, ptr %309, align 8, !tbaa !16
  br label %322

317:                                              ; preds = %302
  %318 = getelementptr inbounds %struct.tree_type, ptr %310, i64 0, i32 6
  %319 = load i32, ptr %318, align 4
  %320 = lshr i32 %319, 16
  %321 = and i32 %320, 255
  br label %322

322:                                              ; preds = %317, %314
  %323 = phi ptr [ %316, %314 ], [ %310, %317 ]
  %324 = phi i32 [ %315, %314 ], [ %321, %317 ]
  %325 = getelementptr inbounds %struct.tree_common, ptr %323, i64 0, i32 2
  %326 = load ptr, ptr %325, align 8, !tbaa !16
  %327 = load i64, ptr %326, align 8
  %328 = and i64 %327, 65535
  %329 = icmp eq i64 %328, 14
  br i1 %329, label %330, label %332

330:                                              ; preds = %322
  %331 = tail call i32 @vector_type_mode(ptr noundef nonnull %326) #30
  br label %337

332:                                              ; preds = %322
  %333 = getelementptr inbounds %struct.tree_type, ptr %326, i64 0, i32 6
  %334 = load i32, ptr %333, align 4
  %335 = lshr i32 %334, 16
  %336 = and i32 %335, 255
  br label %337

337:                                              ; preds = %332, %330
  %338 = phi i32 [ %331, %330 ], [ %336, %332 ]
  %339 = zext i32 %324 to i64
  %340 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %339
  %341 = load i8, ptr %340, align 1, !tbaa !16
  %342 = add i8 %341, -12
  %343 = icmp ult i8 %342, 6
  br i1 %343, label %345, label %344

344:                                              ; preds = %337
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 24112, ptr noundef nonnull @.str.131) #30
  br label %345

345:                                              ; preds = %344, %337
  %346 = tail call ptr @expand_expr_real(ptr noundef nonnull %304, ptr noundef null, i32 noundef %324, i32 noundef 0, ptr noundef null) #30
  %347 = tail call ptr @expand_expr_real(ptr noundef %306, ptr noundef null, i32 noundef %338, i32 noundef 0, ptr noundef null) #30
  %348 = load ptr, ptr %309, align 8, !tbaa !16
  %349 = getelementptr i8, ptr %348, i64 60
  %350 = load i32, ptr %349, align 4
  %351 = and i32 %350, 1023
  %352 = zext i32 %351 to i64
  %353 = shl nsw i64 -1, %352
  %354 = xor i64 %353, -1
  %355 = tail call i32 @host_integerp(ptr noundef %308, i32 noundef 1) #30
  %356 = icmp eq i32 %355, 0
  br i1 %356, label %360, label %357

357:                                              ; preds = %345
  %358 = tail call i64 @tree_low_cst(ptr noundef %308, i32 noundef 1) #30
  %359 = icmp ugt i64 %358, %354
  br i1 %359, label %360, label %361

360:                                              ; preds = %357, %345
  tail call void (ptr, ...) @error(ptr noundef nonnull @.str.1332, i64 noundef %354) #30
  br label %363

361:                                              ; preds = %357
  %362 = trunc i64 %358 to i32
  br label %363

363:                                              ; preds = %361, %360
  %364 = phi i32 [ 0, %360 ], [ %362, %361 ]
  %365 = load i32, ptr %347, align 8
  %366 = lshr i32 %365, 16
  %367 = and i32 %366, 255
  %368 = icmp eq i32 %367, %338
  %369 = icmp eq i32 %367, 0
  %370 = or i1 %368, %369
  br i1 %370, label %373, label %371

371:                                              ; preds = %363
  %372 = tail call ptr @convert_modes(i32 noundef %338, i32 noundef %367, ptr noundef nonnull %347, i32 noundef 1) #30
  br label %373

373:                                              ; preds = %363, %371
  %374 = phi ptr [ %372, %371 ], [ %347, %363 ]
  %375 = tail call ptr @force_reg(i32 noundef %324, ptr noundef %346) #30
  %376 = tail call ptr @force_reg(i32 noundef %338, ptr noundef %374) #30
  %377 = tail call ptr @gen_reg_rtx(i32 noundef %324) #30
  %378 = tail call ptr @emit_move_insn(ptr noundef %377, ptr noundef %375) #30
  tail call void @ix86_expand_vector_set(i8 noundef zeroext 1, ptr noundef %377, ptr noundef %376, i32 noundef %364)
  br label %1136

379:                                              ; preds = %30, %30, %30, %30, %30, %30, %30, %30, %30, %30, %30, %30
  call void @llvm.lifetime.start.p0(i64 48, ptr nonnull %6) #30
  %380 = getelementptr inbounds %struct.tree_exp, ptr %0, i64 1, i32 0, i32 2
  %381 = load ptr, ptr %380, align 8, !tbaa !16
  %382 = getelementptr inbounds %struct.tree_exp, ptr %0, i64 1, i32 1
  %383 = load ptr, ptr %382, align 8, !tbaa !16
  %384 = getelementptr inbounds %struct.tree_exp, ptr %0, i64 1, i32 2
  %385 = load ptr, ptr %384, align 8, !tbaa !16
  %386 = getelementptr inbounds %struct.tree_common, ptr %381, i64 0, i32 2
  %387 = load ptr, ptr %386, align 8, !tbaa !16
  %388 = load i64, ptr %387, align 8
  %389 = and i64 %388, 65535
  %390 = icmp eq i64 %389, 14
  br i1 %390, label %391, label %393

391:                                              ; preds = %379
  %392 = tail call i32 @vector_type_mode(ptr noundef nonnull %387) #30
  br label %398

393:                                              ; preds = %379
  %394 = getelementptr inbounds %struct.tree_type, ptr %387, i64 0, i32 6
  %395 = load i32, ptr %394, align 4
  %396 = lshr i32 %395, 16
  %397 = and i32 %396, 255
  br label %398

398:                                              ; preds = %393, %391
  %399 = phi i32 [ %392, %391 ], [ %397, %393 ]
  %400 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %6, i64 0, i32 4
  store i32 %399, ptr %400, align 8, !tbaa !293
  %401 = zext i32 %399 to i64
  %402 = getelementptr inbounds [87 x i8], ptr @mode_nunits, i64 0, i64 %401
  %403 = load i8, ptr %402, align 1, !tbaa !16
  %404 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %6, i64 0, i32 5
  store i8 %403, ptr %404, align 4, !tbaa !294
  %405 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %6, i64 0, i32 6
  store i8 0, ptr %405, align 1, !tbaa !303
  %406 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %401
  %407 = load i8, ptr %406, align 1, !tbaa !16
  %408 = add i8 %407, -12
  %409 = icmp ult i8 %408, 6
  br i1 %409, label %411, label %410

410:                                              ; preds = %398
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 30035, ptr noundef nonnull @.str.131) #30
  br label %411

411:                                              ; preds = %410, %398
  %412 = load i64, ptr %385, align 8
  %413 = and i64 %412, 65535
  %414 = icmp eq i64 %413, 27
  br i1 %414, label %427, label %415

415:                                              ; preds = %411
  %416 = load i64, ptr %0, align 8
  %417 = and i64 %416, 65535
  %418 = getelementptr inbounds [0 x i32], ptr @tree_code_type, i64 0, i64 %417
  %419 = load i32, ptr %418, align 4, !tbaa !16
  %420 = add i32 %419, -4
  %421 = icmp ult i32 %420, 7
  br i1 %421, label %422, label %425

422:                                              ; preds = %415
  %423 = getelementptr inbounds %struct.tree_exp, ptr %0, i64 0, i32 1
  %424 = load i32, ptr %423, align 8, !tbaa !16
  br label %425

425:                                              ; preds = %422, %415
  %426 = phi i32 [ %424, %422 ], [ 0, %415 ]
  tail call void (i32, ptr, ...) @error_at(i32 noundef %426, ptr noundef nonnull @.str.1333) #30
  br label %906

427:                                              ; preds = %411
  %428 = getelementptr inbounds %struct.tree_vector, ptr %385, i64 0, i32 1
  %429 = load ptr, ptr %428, align 8, !tbaa !16
  %430 = icmp eq i8 %403, 0
  br i1 %430, label %456, label %431

431:                                              ; preds = %427
  %432 = zext i8 %403 to i64
  %433 = shl nuw nsw i64 %432, 1
  br label %434

434:                                              ; preds = %446, %431
  %435 = phi i64 [ 0, %431 ], [ %452, %446 ]
  %436 = phi ptr [ %429, %431 ], [ %454, %446 ]
  %437 = phi i32 [ 0, %431 ], [ %449, %446 ]
  %438 = getelementptr inbounds %struct.tree_list, ptr %436, i64 0, i32 2
  %439 = load ptr, ptr %438, align 8, !tbaa !16
  %440 = tail call i32 @host_integerp(ptr noundef %439, i32 noundef 1) #30
  %441 = icmp eq i32 %440, 0
  br i1 %441, label %550, label %442

442:                                              ; preds = %434
  %443 = load ptr, ptr %438, align 8, !tbaa !16
  %444 = tail call i64 @tree_low_cst(ptr noundef %443, i32 noundef 1) #30
  %445 = icmp ult i64 %444, %433
  br i1 %445, label %446, label %550

446:                                              ; preds = %442
  %447 = icmp ult i64 %444, %432
  %448 = select i1 %447, i32 1, i32 2
  %449 = or i32 %448, %437
  %450 = trunc i64 %444 to i8
  %451 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %6, i64 0, i32 3, i64 %435
  store i8 %450, ptr %451, align 1, !tbaa !16
  %452 = add nuw nsw i64 %435, 1
  %453 = getelementptr inbounds %struct.tree_common, ptr %436, i64 0, i32 1
  %454 = load ptr, ptr %453, align 8, !tbaa !16
  %455 = icmp eq i64 %452, %432
  br i1 %455, label %456, label %434, !llvm.loop !328

456:                                              ; preds = %446, %427
  %457 = phi i32 [ 0, %427 ], [ %449, %446 ]
  %458 = phi ptr [ %429, %427 ], [ %454, %446 ]
  %459 = icmp eq ptr %458, null
  br i1 %459, label %461, label %460

460:                                              ; preds = %456
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 30012, ptr noundef nonnull @.str.131) #30
  br label %461

461:                                              ; preds = %460, %456
  %462 = icmp eq i32 %457, 2
  %463 = icmp ne i8 %403, 0
  %464 = and i1 %463, %462
  br i1 %464, label %465, label %548

465:                                              ; preds = %461
  %466 = zext i8 %403 to i64
  %467 = icmp ult i8 %403, 8
  br i1 %467, label %539, label %468

468:                                              ; preds = %465
  %469 = icmp ult i8 %403, 64
  br i1 %469, label %525, label %470

470:                                              ; preds = %468
  %471 = and i64 %466, 192
  %472 = insertelement <16 x i8> poison, i8 %403, i64 0
  %473 = shufflevector <16 x i8> %472, <16 x i8> poison, <16 x i32> zeroinitializer
  %474 = insertelement <16 x i8> poison, i8 %403, i64 0
  %475 = shufflevector <16 x i8> %474, <16 x i8> poison, <16 x i32> zeroinitializer
  %476 = insertelement <16 x i8> poison, i8 %403, i64 0
  %477 = shufflevector <16 x i8> %476, <16 x i8> poison, <16 x i32> zeroinitializer
  %478 = insertelement <16 x i8> poison, i8 %403, i64 0
  %479 = shufflevector <16 x i8> %478, <16 x i8> poison, <16 x i32> zeroinitializer
  %480 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %6, i64 0, i32 3, i64 0
  %481 = load <16 x i8>, ptr %480, align 8, !tbaa !16
  %482 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %6, i64 0, i32 4
  %483 = load <16 x i8>, ptr %482, align 8, !tbaa !16
  %484 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %6, i64 1, i32 1
  %485 = load <16 x i8>, ptr %484, align 8, !tbaa !16
  %486 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %6, i64 1, i32 3
  %487 = load <16 x i8>, ptr %486, align 8, !tbaa !16
  %488 = sub <16 x i8> %481, %473
  %489 = sub <16 x i8> %483, %475
  %490 = sub <16 x i8> %485, %477
  %491 = sub <16 x i8> %487, %479
  store <16 x i8> %488, ptr %480, align 8, !tbaa !16
  store <16 x i8> %489, ptr %482, align 8, !tbaa !16
  store <16 x i8> %490, ptr %484, align 8, !tbaa !16
  store <16 x i8> %491, ptr %486, align 8, !tbaa !16
  %492 = icmp eq i64 %471, 64
  br i1 %492, label %520, label %493, !llvm.loop !347

493:                                              ; preds = %470
  %494 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %6, i64 0, i32 3, i64 64
  %495 = load <16 x i8>, ptr %494, align 8, !tbaa !16
  %496 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %6, i64 2, i32 1
  %497 = load <16 x i8>, ptr %496, align 8, !tbaa !16
  %498 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %6, i64 2, i32 3
  %499 = load <16 x i8>, ptr %498, align 8, !tbaa !16
  %500 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %6, i64 2, i32 4
  %501 = load <16 x i8>, ptr %500, align 8, !tbaa !16
  %502 = sub <16 x i8> %495, %473
  %503 = sub <16 x i8> %497, %475
  %504 = sub <16 x i8> %499, %477
  %505 = sub <16 x i8> %501, %479
  store <16 x i8> %502, ptr %494, align 8, !tbaa !16
  store <16 x i8> %503, ptr %496, align 8, !tbaa !16
  store <16 x i8> %504, ptr %498, align 8, !tbaa !16
  store <16 x i8> %505, ptr %500, align 8, !tbaa !16
  %506 = icmp eq i64 %471, 128
  br i1 %506, label %520, label %507, !llvm.loop !347

507:                                              ; preds = %493
  %508 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %6, i64 0, i32 3, i64 128
  %509 = load <16 x i8>, ptr %508, align 8, !tbaa !16
  %510 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %6, i64 3, i32 3
  %511 = load <16 x i8>, ptr %510, align 8, !tbaa !16
  %512 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %6, i64 3, i32 4
  %513 = load <16 x i8>, ptr %512, align 8, !tbaa !16
  %514 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %6, i64 4, i32 1
  %515 = load <16 x i8>, ptr %514, align 8, !tbaa !16
  %516 = sub <16 x i8> %509, %473
  %517 = sub <16 x i8> %511, %475
  %518 = sub <16 x i8> %513, %477
  %519 = sub <16 x i8> %515, %479
  store <16 x i8> %516, ptr %508, align 8, !tbaa !16
  store <16 x i8> %517, ptr %510, align 8, !tbaa !16
  store <16 x i8> %518, ptr %512, align 8, !tbaa !16
  store <16 x i8> %519, ptr %514, align 8, !tbaa !16
  br label %520

520:                                              ; preds = %507, %493, %470
  %521 = icmp eq i64 %471, %466
  br i1 %521, label %795, label %522

522:                                              ; preds = %520
  %523 = and i64 %466, 56
  %524 = icmp eq i64 %523, 0
  br i1 %524, label %539, label %525

525:                                              ; preds = %468, %522
  %526 = phi i64 [ %471, %522 ], [ 0, %468 ]
  %527 = and i64 %466, 248
  %528 = insertelement <8 x i8> poison, i8 %403, i64 0
  %529 = shufflevector <8 x i8> %528, <8 x i8> poison, <8 x i32> zeroinitializer
  br label %530

530:                                              ; preds = %530, %525
  %531 = phi i64 [ %526, %525 ], [ %535, %530 ]
  %532 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %6, i64 0, i32 3, i64 %531
  %533 = load <8 x i8>, ptr %532, align 8, !tbaa !16
  %534 = sub <8 x i8> %533, %529
  store <8 x i8> %534, ptr %532, align 8, !tbaa !16
  %535 = add nuw i64 %531, 8
  %536 = icmp eq i64 %535, %527
  br i1 %536, label %537, label %530, !llvm.loop !348

537:                                              ; preds = %530
  %538 = icmp eq i64 %527, %466
  br i1 %538, label %795, label %539

539:                                              ; preds = %465, %522, %537
  %540 = phi i64 [ 0, %465 ], [ %471, %522 ], [ %527, %537 ]
  br label %541

541:                                              ; preds = %539, %541
  %542 = phi i64 [ %546, %541 ], [ %540, %539 ]
  %543 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %6, i64 0, i32 3, i64 %542
  %544 = load i8, ptr %543, align 1, !tbaa !16
  %545 = sub i8 %544, %403
  store i8 %545, ptr %543, align 1, !tbaa !16
  %546 = add nuw nsw i64 %542, 1
  %547 = icmp eq i64 %546, %466
  br i1 %547, label %795, label %541, !llvm.loop !349

548:                                              ; preds = %461
  switch i32 %457, label %549 [
    i32 0, label %550
    i32 3, label %562
    i32 1, label %789
    i32 2, label %795
  ]

549:                                              ; preds = %548
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 30047, ptr noundef nonnull @.str.131) #30
  br label %550

550:                                              ; preds = %442, %434, %549, %548
  %551 = load i64, ptr %0, align 8
  %552 = and i64 %551, 65535
  %553 = getelementptr inbounds [0 x i32], ptr @tree_code_type, i64 0, i64 %552
  %554 = load i32, ptr %553, align 4, !tbaa !16
  %555 = add i32 %554, -4
  %556 = icmp ult i32 %555, 7
  br i1 %556, label %557, label %560

557:                                              ; preds = %550
  %558 = getelementptr inbounds %struct.tree_exp, ptr %0, i64 0, i32 1
  %559 = load i32, ptr %558, align 8, !tbaa !16
  br label %560

560:                                              ; preds = %557, %550
  %561 = phi i32 [ %559, %557 ], [ 0, %550 ]
  tail call void (i32, ptr, ...) @error_at(i32 noundef %561, ptr noundef nonnull @.str.1334) #30
  br label %906

562:                                              ; preds = %548
  %563 = tail call i32 @operand_equal_p(ptr noundef %381, ptr noundef %383, i32 noundef 0) #30
  %564 = icmp eq i32 %563, 0
  br i1 %564, label %565, label %573

565:                                              ; preds = %562
  %566 = load i32, ptr %400, align 8, !tbaa !293
  %567 = tail call ptr @expand_expr_real(ptr noundef %381, ptr noundef null, i32 noundef %566, i32 noundef 0, ptr noundef null) #30
  %568 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %6, i64 0, i32 1
  %569 = tail call ptr @force_reg(i32 noundef %566, ptr noundef %567) #30
  store ptr %569, ptr %568, align 8, !tbaa !296
  %570 = tail call ptr @expand_expr_real(ptr noundef %383, ptr noundef null, i32 noundef %566, i32 noundef 0, ptr noundef null) #30
  %571 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %6, i64 0, i32 2
  %572 = tail call ptr @force_reg(i32 noundef %566, ptr noundef %570) #30
  store ptr %572, ptr %571, align 8, !tbaa !295
  br label %801

573:                                              ; preds = %562
  %574 = load i8, ptr %404, align 4, !tbaa !294
  %575 = icmp eq i8 %574, 0
  br i1 %575, label %789, label %576

576:                                              ; preds = %573
  %577 = zext i8 %574 to i64
  %578 = icmp ult i8 %574, 8
  br i1 %578, label %777, label %579

579:                                              ; preds = %576
  %580 = icmp ult i8 %574, 16
  br i1 %580, label %708, label %581

581:                                              ; preds = %579
  %582 = and i64 %577, 240
  %583 = insertelement <16 x i8> poison, i8 %574, i64 0
  %584 = shufflevector <16 x i8> %583, <16 x i8> poison, <16 x i32> zeroinitializer
  br label %585

585:                                              ; preds = %700, %581
  %586 = phi i64 [ 0, %581 ], [ %701, %700 ]
  %587 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %6, i64 0, i32 3, i64 %586
  %588 = load <16 x i8>, ptr %587, align 8, !tbaa !16
  %589 = icmp uge <16 x i8> %588, %584
  %590 = extractelement <16 x i1> %589, i64 0
  br i1 %590, label %591, label %595

591:                                              ; preds = %585
  %592 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %6, i64 0, i32 3, i64 %586
  %593 = extractelement <16 x i8> %588, i64 0
  %594 = sub i8 %593, %574
  store i8 %594, ptr %592, align 8, !tbaa !16
  br label %595

595:                                              ; preds = %591, %585
  %596 = extractelement <16 x i1> %589, i64 1
  br i1 %596, label %597, label %602

597:                                              ; preds = %595
  %598 = or i64 %586, 1
  %599 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %6, i64 0, i32 3, i64 %598
  %600 = extractelement <16 x i8> %588, i64 1
  %601 = sub i8 %600, %574
  store i8 %601, ptr %599, align 1, !tbaa !16
  br label %602

602:                                              ; preds = %597, %595
  %603 = extractelement <16 x i1> %589, i64 2
  br i1 %603, label %604, label %609

604:                                              ; preds = %602
  %605 = or i64 %586, 2
  %606 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %6, i64 0, i32 3, i64 %605
  %607 = extractelement <16 x i8> %588, i64 2
  %608 = sub i8 %607, %574
  store i8 %608, ptr %606, align 2, !tbaa !16
  br label %609

609:                                              ; preds = %604, %602
  %610 = extractelement <16 x i1> %589, i64 3
  br i1 %610, label %611, label %616

611:                                              ; preds = %609
  %612 = or i64 %586, 3
  %613 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %6, i64 0, i32 3, i64 %612
  %614 = extractelement <16 x i8> %588, i64 3
  %615 = sub i8 %614, %574
  store i8 %615, ptr %613, align 1, !tbaa !16
  br label %616

616:                                              ; preds = %611, %609
  %617 = extractelement <16 x i1> %589, i64 4
  br i1 %617, label %618, label %623

618:                                              ; preds = %616
  %619 = or i64 %586, 4
  %620 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %6, i64 0, i32 3, i64 %619
  %621 = extractelement <16 x i8> %588, i64 4
  %622 = sub i8 %621, %574
  store i8 %622, ptr %620, align 4, !tbaa !16
  br label %623

623:                                              ; preds = %618, %616
  %624 = extractelement <16 x i1> %589, i64 5
  br i1 %624, label %625, label %630

625:                                              ; preds = %623
  %626 = or i64 %586, 5
  %627 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %6, i64 0, i32 3, i64 %626
  %628 = extractelement <16 x i8> %588, i64 5
  %629 = sub i8 %628, %574
  store i8 %629, ptr %627, align 1, !tbaa !16
  br label %630

630:                                              ; preds = %625, %623
  %631 = extractelement <16 x i1> %589, i64 6
  br i1 %631, label %632, label %637

632:                                              ; preds = %630
  %633 = or i64 %586, 6
  %634 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %6, i64 0, i32 3, i64 %633
  %635 = extractelement <16 x i8> %588, i64 6
  %636 = sub i8 %635, %574
  store i8 %636, ptr %634, align 2, !tbaa !16
  br label %637

637:                                              ; preds = %632, %630
  %638 = extractelement <16 x i1> %589, i64 7
  br i1 %638, label %639, label %644

639:                                              ; preds = %637
  %640 = or i64 %586, 7
  %641 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %6, i64 0, i32 3, i64 %640
  %642 = extractelement <16 x i8> %588, i64 7
  %643 = sub i8 %642, %574
  store i8 %643, ptr %641, align 1, !tbaa !16
  br label %644

644:                                              ; preds = %639, %637
  %645 = extractelement <16 x i1> %589, i64 8
  br i1 %645, label %646, label %651

646:                                              ; preds = %644
  %647 = or i64 %586, 8
  %648 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %6, i64 0, i32 3, i64 %647
  %649 = extractelement <16 x i8> %588, i64 8
  %650 = sub i8 %649, %574
  store i8 %650, ptr %648, align 8, !tbaa !16
  br label %651

651:                                              ; preds = %646, %644
  %652 = extractelement <16 x i1> %589, i64 9
  br i1 %652, label %653, label %658

653:                                              ; preds = %651
  %654 = or i64 %586, 9
  %655 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %6, i64 0, i32 3, i64 %654
  %656 = extractelement <16 x i8> %588, i64 9
  %657 = sub i8 %656, %574
  store i8 %657, ptr %655, align 1, !tbaa !16
  br label %658

658:                                              ; preds = %653, %651
  %659 = extractelement <16 x i1> %589, i64 10
  br i1 %659, label %660, label %665

660:                                              ; preds = %658
  %661 = or i64 %586, 10
  %662 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %6, i64 0, i32 3, i64 %661
  %663 = extractelement <16 x i8> %588, i64 10
  %664 = sub i8 %663, %574
  store i8 %664, ptr %662, align 2, !tbaa !16
  br label %665

665:                                              ; preds = %660, %658
  %666 = extractelement <16 x i1> %589, i64 11
  br i1 %666, label %667, label %672

667:                                              ; preds = %665
  %668 = or i64 %586, 11
  %669 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %6, i64 0, i32 3, i64 %668
  %670 = extractelement <16 x i8> %588, i64 11
  %671 = sub i8 %670, %574
  store i8 %671, ptr %669, align 1, !tbaa !16
  br label %672

672:                                              ; preds = %667, %665
  %673 = extractelement <16 x i1> %589, i64 12
  br i1 %673, label %674, label %679

674:                                              ; preds = %672
  %675 = or i64 %586, 12
  %676 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %6, i64 0, i32 3, i64 %675
  %677 = extractelement <16 x i8> %588, i64 12
  %678 = sub i8 %677, %574
  store i8 %678, ptr %676, align 4, !tbaa !16
  br label %679

679:                                              ; preds = %674, %672
  %680 = extractelement <16 x i1> %589, i64 13
  br i1 %680, label %681, label %686

681:                                              ; preds = %679
  %682 = or i64 %586, 13
  %683 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %6, i64 0, i32 3, i64 %682
  %684 = extractelement <16 x i8> %588, i64 13
  %685 = sub i8 %684, %574
  store i8 %685, ptr %683, align 1, !tbaa !16
  br label %686

686:                                              ; preds = %681, %679
  %687 = extractelement <16 x i1> %589, i64 14
  br i1 %687, label %688, label %693

688:                                              ; preds = %686
  %689 = or i64 %586, 14
  %690 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %6, i64 0, i32 3, i64 %689
  %691 = extractelement <16 x i8> %588, i64 14
  %692 = sub i8 %691, %574
  store i8 %692, ptr %690, align 2, !tbaa !16
  br label %693

693:                                              ; preds = %688, %686
  %694 = extractelement <16 x i1> %589, i64 15
  br i1 %694, label %695, label %700

695:                                              ; preds = %693
  %696 = or i64 %586, 15
  %697 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %6, i64 0, i32 3, i64 %696
  %698 = extractelement <16 x i8> %588, i64 15
  %699 = sub i8 %698, %574
  store i8 %699, ptr %697, align 1, !tbaa !16
  br label %700

700:                                              ; preds = %695, %693
  %701 = add nuw i64 %586, 16
  %702 = icmp eq i64 %701, %582
  br i1 %702, label %703, label %585, !llvm.loop !350

703:                                              ; preds = %700
  %704 = icmp eq i64 %582, %577
  br i1 %704, label %789, label %705

705:                                              ; preds = %703
  %706 = and i64 %577, 8
  %707 = icmp eq i64 %706, 0
  br i1 %707, label %777, label %708

708:                                              ; preds = %579, %705
  %709 = phi i64 [ %582, %705 ], [ 0, %579 ]
  %710 = and i64 %577, 248
  %711 = insertelement <8 x i8> poison, i8 %574, i64 0
  %712 = shufflevector <8 x i8> %711, <8 x i8> poison, <8 x i32> zeroinitializer
  br label %713

713:                                              ; preds = %772, %708
  %714 = phi i64 [ %709, %708 ], [ %773, %772 ]
  %715 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %6, i64 0, i32 3, i64 %714
  %716 = load <8 x i8>, ptr %715, align 8, !tbaa !16
  %717 = icmp uge <8 x i8> %716, %712
  %718 = extractelement <8 x i1> %717, i64 0
  br i1 %718, label %719, label %723

719:                                              ; preds = %713
  %720 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %6, i64 0, i32 3, i64 %714
  %721 = extractelement <8 x i8> %716, i64 0
  %722 = sub i8 %721, %574
  store i8 %722, ptr %720, align 8, !tbaa !16
  br label %723

723:                                              ; preds = %719, %713
  %724 = extractelement <8 x i1> %717, i64 1
  br i1 %724, label %725, label %730

725:                                              ; preds = %723
  %726 = or i64 %714, 1
  %727 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %6, i64 0, i32 3, i64 %726
  %728 = extractelement <8 x i8> %716, i64 1
  %729 = sub i8 %728, %574
  store i8 %729, ptr %727, align 1, !tbaa !16
  br label %730

730:                                              ; preds = %725, %723
  %731 = extractelement <8 x i1> %717, i64 2
  br i1 %731, label %732, label %737

732:                                              ; preds = %730
  %733 = or i64 %714, 2
  %734 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %6, i64 0, i32 3, i64 %733
  %735 = extractelement <8 x i8> %716, i64 2
  %736 = sub i8 %735, %574
  store i8 %736, ptr %734, align 2, !tbaa !16
  br label %737

737:                                              ; preds = %732, %730
  %738 = extractelement <8 x i1> %717, i64 3
  br i1 %738, label %739, label %744

739:                                              ; preds = %737
  %740 = or i64 %714, 3
  %741 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %6, i64 0, i32 3, i64 %740
  %742 = extractelement <8 x i8> %716, i64 3
  %743 = sub i8 %742, %574
  store i8 %743, ptr %741, align 1, !tbaa !16
  br label %744

744:                                              ; preds = %739, %737
  %745 = extractelement <8 x i1> %717, i64 4
  br i1 %745, label %746, label %751

746:                                              ; preds = %744
  %747 = or i64 %714, 4
  %748 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %6, i64 0, i32 3, i64 %747
  %749 = extractelement <8 x i8> %716, i64 4
  %750 = sub i8 %749, %574
  store i8 %750, ptr %748, align 4, !tbaa !16
  br label %751

751:                                              ; preds = %746, %744
  %752 = extractelement <8 x i1> %717, i64 5
  br i1 %752, label %753, label %758

753:                                              ; preds = %751
  %754 = or i64 %714, 5
  %755 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %6, i64 0, i32 3, i64 %754
  %756 = extractelement <8 x i8> %716, i64 5
  %757 = sub i8 %756, %574
  store i8 %757, ptr %755, align 1, !tbaa !16
  br label %758

758:                                              ; preds = %753, %751
  %759 = extractelement <8 x i1> %717, i64 6
  br i1 %759, label %760, label %765

760:                                              ; preds = %758
  %761 = or i64 %714, 6
  %762 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %6, i64 0, i32 3, i64 %761
  %763 = extractelement <8 x i8> %716, i64 6
  %764 = sub i8 %763, %574
  store i8 %764, ptr %762, align 2, !tbaa !16
  br label %765

765:                                              ; preds = %760, %758
  %766 = extractelement <8 x i1> %717, i64 7
  br i1 %766, label %767, label %772

767:                                              ; preds = %765
  %768 = or i64 %714, 7
  %769 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %6, i64 0, i32 3, i64 %768
  %770 = extractelement <8 x i8> %716, i64 7
  %771 = sub i8 %770, %574
  store i8 %771, ptr %769, align 1, !tbaa !16
  br label %772

772:                                              ; preds = %767, %765
  %773 = add nuw i64 %714, 8
  %774 = icmp eq i64 %773, %710
  br i1 %774, label %775, label %713, !llvm.loop !351

775:                                              ; preds = %772
  %776 = icmp eq i64 %710, %577
  br i1 %776, label %789, label %777

777:                                              ; preds = %576, %705, %775
  %778 = phi i64 [ 0, %576 ], [ %582, %705 ], [ %710, %775 ]
  br label %779

779:                                              ; preds = %777, %786
  %780 = phi i64 [ %787, %786 ], [ %778, %777 ]
  %781 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %6, i64 0, i32 3, i64 %780
  %782 = load i8, ptr %781, align 1, !tbaa !16
  %783 = icmp ult i8 %782, %574
  br i1 %783, label %786, label %784

784:                                              ; preds = %779
  %785 = sub i8 %782, %574
  store i8 %785, ptr %781, align 1, !tbaa !16
  br label %786

786:                                              ; preds = %784, %779
  %787 = add nuw nsw i64 %780, 1
  %788 = icmp eq i64 %787, %577
  br i1 %788, label %789, label %779, !llvm.loop !352

789:                                              ; preds = %786, %703, %775, %573, %548
  %790 = load i32, ptr %400, align 8, !tbaa !293
  %791 = tail call ptr @expand_expr_real(ptr noundef %381, ptr noundef null, i32 noundef %790, i32 noundef 0, ptr noundef null) #30
  %792 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %6, i64 0, i32 1
  %793 = tail call ptr @force_reg(i32 noundef %790, ptr noundef %791) #30
  store ptr %793, ptr %792, align 8, !tbaa !296
  %794 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %6, i64 0, i32 2
  store ptr %793, ptr %794, align 8, !tbaa !295
  br label %801

795:                                              ; preds = %541, %520, %537, %548
  %796 = load i32, ptr %400, align 8, !tbaa !293
  %797 = tail call ptr @expand_expr_real(ptr noundef %383, ptr noundef null, i32 noundef %796, i32 noundef 0, ptr noundef null) #30
  %798 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %6, i64 0, i32 1
  %799 = tail call ptr @force_reg(i32 noundef %796, ptr noundef %797) #30
  store ptr %799, ptr %798, align 8, !tbaa !296
  %800 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %6, i64 0, i32 2
  store ptr %799, ptr %800, align 8, !tbaa !295
  br label %801

801:                                              ; preds = %795, %789, %565
  %802 = phi i32 [ %796, %795 ], [ %790, %789 ], [ %566, %565 ]
  %803 = tail call ptr @gen_reg_rtx(i32 noundef %802) #30
  store ptr %803, ptr %6, align 8, !tbaa !291
  %804 = call fastcc zeroext i8 @ix86_expand_vec_perm_builtin_1(ptr noundef nonnull %6), !range !66
  %805 = icmp eq i8 %804, 0
  br i1 %805, label %806, label %910

806:                                              ; preds = %801
  %807 = load i8, ptr %404, align 4, !tbaa !294
  %808 = zext i8 %807 to i32
  %809 = add nsw i32 %808, -2
  %810 = tail call i32 @llvm.fshl.i32(i32 %808, i32 %809, i32 31)
  switch i32 %810, label %905 [
    i32 0, label %811
    i32 1, label %818
    i32 3, label %831
    i32 7, label %856
  ]

811:                                              ; preds = %806
  %812 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %6, i64 0, i32 3
  %813 = load i8, ptr %812, align 8, !tbaa !16
  %814 = zext i8 %813 to i32
  %815 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %6, i64 0, i32 3, i64 1
  %816 = load i8, ptr %815, align 1, !tbaa !16
  %817 = zext i8 %816 to i32
  tail call void (ptr, ...) @sorry(ptr noundef nonnull @.str.1335, i32 noundef %814, i32 noundef %817) #30
  br label %906

818:                                              ; preds = %806
  %819 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %6, i64 0, i32 3
  %820 = load i8, ptr %819, align 8, !tbaa !16
  %821 = zext i8 %820 to i32
  %822 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %6, i64 0, i32 3, i64 1
  %823 = load i8, ptr %822, align 1, !tbaa !16
  %824 = zext i8 %823 to i32
  %825 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %6, i64 0, i32 3, i64 2
  %826 = load i8, ptr %825, align 2, !tbaa !16
  %827 = zext i8 %826 to i32
  %828 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %6, i64 0, i32 3, i64 3
  %829 = load i8, ptr %828, align 1, !tbaa !16
  %830 = zext i8 %829 to i32
  tail call void (ptr, ...) @sorry(ptr noundef nonnull @.str.1336, i32 noundef %821, i32 noundef %824, i32 noundef %827, i32 noundef %830) #30
  br label %906

831:                                              ; preds = %806
  %832 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %6, i64 0, i32 3
  %833 = load i8, ptr %832, align 8, !tbaa !16
  %834 = zext i8 %833 to i32
  %835 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %6, i64 0, i32 3, i64 1
  %836 = load i8, ptr %835, align 1, !tbaa !16
  %837 = zext i8 %836 to i32
  %838 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %6, i64 0, i32 3, i64 2
  %839 = load i8, ptr %838, align 2, !tbaa !16
  %840 = zext i8 %839 to i32
  %841 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %6, i64 0, i32 3, i64 3
  %842 = load i8, ptr %841, align 1, !tbaa !16
  %843 = zext i8 %842 to i32
  %844 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %6, i64 0, i32 3, i64 4
  %845 = load i8, ptr %844, align 4, !tbaa !16
  %846 = zext i8 %845 to i32
  %847 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %6, i64 0, i32 3, i64 5
  %848 = load i8, ptr %847, align 1, !tbaa !16
  %849 = zext i8 %848 to i32
  %850 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %6, i64 0, i32 3, i64 6
  %851 = load i8, ptr %850, align 2, !tbaa !16
  %852 = zext i8 %851 to i32
  %853 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %6, i64 0, i32 3, i64 7
  %854 = load i8, ptr %853, align 1, !tbaa !16
  %855 = zext i8 %854 to i32
  tail call void (ptr, ...) @sorry(ptr noundef nonnull @.str.1337, i32 noundef %834, i32 noundef %837, i32 noundef %840, i32 noundef %843, i32 noundef %846, i32 noundef %849, i32 noundef %852, i32 noundef %855) #30
  br label %906

856:                                              ; preds = %806
  %857 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %6, i64 0, i32 3
  %858 = load i8, ptr %857, align 8, !tbaa !16
  %859 = zext i8 %858 to i32
  %860 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %6, i64 0, i32 3, i64 1
  %861 = load i8, ptr %860, align 1, !tbaa !16
  %862 = zext i8 %861 to i32
  %863 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %6, i64 0, i32 3, i64 2
  %864 = load i8, ptr %863, align 2, !tbaa !16
  %865 = zext i8 %864 to i32
  %866 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %6, i64 0, i32 3, i64 3
  %867 = load i8, ptr %866, align 1, !tbaa !16
  %868 = zext i8 %867 to i32
  %869 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %6, i64 0, i32 3, i64 4
  %870 = load i8, ptr %869, align 4, !tbaa !16
  %871 = zext i8 %870 to i32
  %872 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %6, i64 0, i32 3, i64 5
  %873 = load i8, ptr %872, align 1, !tbaa !16
  %874 = zext i8 %873 to i32
  %875 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %6, i64 0, i32 3, i64 6
  %876 = load i8, ptr %875, align 2, !tbaa !16
  %877 = zext i8 %876 to i32
  %878 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %6, i64 0, i32 3, i64 7
  %879 = load i8, ptr %878, align 1, !tbaa !16
  %880 = zext i8 %879 to i32
  %881 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %6, i64 0, i32 3, i64 8
  %882 = load i8, ptr %881, align 8, !tbaa !16
  %883 = zext i8 %882 to i32
  %884 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %6, i64 0, i32 3, i64 9
  %885 = load i8, ptr %884, align 1, !tbaa !16
  %886 = zext i8 %885 to i32
  %887 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %6, i64 0, i32 3, i64 10
  %888 = load i8, ptr %887, align 2, !tbaa !16
  %889 = zext i8 %888 to i32
  %890 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %6, i64 0, i32 3, i64 11
  %891 = load i8, ptr %890, align 1, !tbaa !16
  %892 = zext i8 %891 to i32
  %893 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %6, i64 0, i32 3, i64 12
  %894 = load i8, ptr %893, align 4, !tbaa !16
  %895 = zext i8 %894 to i32
  %896 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %6, i64 0, i32 3, i64 13
  %897 = load i8, ptr %896, align 1, !tbaa !16
  %898 = zext i8 %897 to i32
  %899 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %6, i64 0, i32 3, i64 14
  %900 = load i8, ptr %899, align 2, !tbaa !16
  %901 = zext i8 %900 to i32
  %902 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %6, i64 0, i32 3, i64 15
  %903 = load i8, ptr %902, align 1, !tbaa !16
  %904 = zext i8 %903 to i32
  tail call void (ptr, ...) @sorry(ptr noundef nonnull @.str.1338, i32 noundef %859, i32 noundef %862, i32 noundef %865, i32 noundef %868, i32 noundef %871, i32 noundef %874, i32 noundef %877, i32 noundef %880, i32 noundef %883, i32 noundef %886, i32 noundef %889, i32 noundef %892, i32 noundef %895, i32 noundef %898, i32 noundef %901, i32 noundef %904) #30
  br label %906

905:                                              ; preds = %806
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 30118, ptr noundef nonnull @.str.131) #30
  br label %906

906:                                              ; preds = %905, %856, %831, %818, %811, %560, %425
  %907 = load i32, ptr %400, align 8, !tbaa !293
  %908 = sext i32 %907 to i64
  %909 = getelementptr inbounds [87 x ptr], ptr @const_tiny_rtx, i64 0, i64 %908
  br label %910

910:                                              ; preds = %801, %906
  %911 = phi ptr [ %909, %906 ], [ %6, %801 ]
  %912 = load ptr, ptr %911, align 8, !tbaa !5
  call void @llvm.lifetime.end.p0(i64 48, ptr nonnull %6) #30
  br label %1136

913:                                              ; preds = %30, %30
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %7) #30
  call void @real_inf(ptr noundef nonnull %7) #30
  %914 = call ptr @const_double_from_real_value(ptr noundef nonnull byval(%struct.real_value) align 8 %7, i32 noundef %3) #30
  %915 = call ptr @force_const_mem(i32 noundef %3, ptr noundef %914) #30
  %916 = call ptr @validize_mem(ptr noundef %915) #30
  %917 = icmp eq ptr %1, null
  br i1 %917, label %918, label %920

918:                                              ; preds = %913
  %919 = call ptr @gen_reg_rtx(i32 noundef %3) #30
  br label %920

920:                                              ; preds = %918, %913
  %921 = phi ptr [ %919, %918 ], [ %1, %913 ]
  %922 = call ptr @emit_move_insn(ptr noundef %921, ptr noundef %916) #30
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %7) #30
  br label %1136

923:                                              ; preds = %30
  %924 = getelementptr inbounds %struct.tree_exp, ptr %0, i64 1, i32 0, i32 2
  %925 = load ptr, ptr %924, align 8, !tbaa !16
  %926 = tail call ptr @expand_expr_real(ptr noundef %925, ptr noundef null, i32 noundef 0, i32 noundef 0, ptr noundef null) #30
  %927 = load ptr, ptr getelementptr inbounds ([0 x %struct.insn_data], ptr @insn_data, i64 0, i64 2492, i32 3), align 8, !tbaa !340
  %928 = load ptr, ptr %927, align 8, !tbaa !342
  %929 = tail call i32 %928(ptr noundef %926, i32 noundef 16) #30
  %930 = icmp eq i32 %929, 0
  br i1 %930, label %931, label %933

931:                                              ; preds = %923
  %932 = tail call ptr @copy_to_mode_reg(i32 noundef 16, ptr noundef %926) #30
  br label %933

933:                                              ; preds = %931, %923
  %934 = phi ptr [ %926, %923 ], [ %932, %931 ]
  %935 = tail call ptr @gen_lwp_llwpcb(ptr noundef %934) #30
  %936 = tail call ptr @emit_insn(ptr noundef %935) #30
  br label %1136

937:                                              ; preds = %30
  %938 = icmp eq ptr %1, null
  br i1 %938, label %944, label %939

939:                                              ; preds = %937
  %940 = load ptr, ptr getelementptr inbounds ([0 x %struct.insn_data], ptr @insn_data, i64 0, i64 2493, i32 3), align 8, !tbaa !340
  %941 = load ptr, ptr %940, align 8, !tbaa !342
  %942 = tail call i32 %941(ptr noundef nonnull %1, i32 noundef 16) #30
  %943 = icmp eq i32 %942, 0
  br i1 %943, label %944, label %946

944:                                              ; preds = %939, %937
  %945 = tail call ptr @gen_reg_rtx(i32 noundef 16) #30
  br label %946

946:                                              ; preds = %944, %939
  %947 = phi ptr [ %1, %939 ], [ %945, %944 ]
  %948 = tail call ptr @gen_lwp_slwpcb(ptr noundef %947) #30
  %949 = tail call ptr @emit_insn(ptr noundef %948) #30
  br label %1136

950:                                              ; preds = %30
  br label %1007

951:                                              ; preds = %1014
  br label %1007

952:                                              ; preds = %1014
  br label %1007

953:                                              ; preds = %1014
  br label %1007

954:                                              ; preds = %1014
  br label %1007

955:                                              ; preds = %1014
  br label %1007

956:                                              ; preds = %1014
  br label %1007

957:                                              ; preds = %1014
  br label %1007

958:                                              ; preds = %1014
  br label %1007

959:                                              ; preds = %1014
  br label %1007

960:                                              ; preds = %1014
  br label %1007

961:                                              ; preds = %1014
  br label %1007

962:                                              ; preds = %1014
  br label %1007

963:                                              ; preds = %1014
  br label %1007

964:                                              ; preds = %1014
  br label %1007

965:                                              ; preds = %1014
  br label %1007

966:                                              ; preds = %1014
  br label %1007

967:                                              ; preds = %1014
  br label %1007

968:                                              ; preds = %1014
  br label %1007

969:                                              ; preds = %1014
  br label %1007

970:                                              ; preds = %1014
  br label %1007

971:                                              ; preds = %1014
  br label %1007

972:                                              ; preds = %1014
  br label %1007

973:                                              ; preds = %1014
  br label %1007

974:                                              ; preds = %1014
  br label %1007

975:                                              ; preds = %1014
  br label %1007

976:                                              ; preds = %1014
  br label %1007

977:                                              ; preds = %1014
  br label %1007

978:                                              ; preds = %1014
  br label %1007

979:                                              ; preds = %1014
  br label %1007

980:                                              ; preds = %1014
  br label %1007

981:                                              ; preds = %1014
  br label %1007

982:                                              ; preds = %1014
  br label %1007

983:                                              ; preds = %1014
  br label %1007

984:                                              ; preds = %1014
  br label %1007

985:                                              ; preds = %1014
  br label %1007

986:                                              ; preds = %1014
  br label %1007

987:                                              ; preds = %1014
  br label %1007

988:                                              ; preds = %1014
  br label %1007

989:                                              ; preds = %1014
  br label %1007

990:                                              ; preds = %1014
  br label %1007

991:                                              ; preds = %1014
  br label %1007

992:                                              ; preds = %1014
  br label %1007

993:                                              ; preds = %1014
  br label %1007

994:                                              ; preds = %1014
  br label %1007

995:                                              ; preds = %1014
  br label %1007

996:                                              ; preds = %1014
  br label %1007

997:                                              ; preds = %1014
  br label %1007

998:                                              ; preds = %1014
  br label %1007

999:                                              ; preds = %1014
  br label %1007

1000:                                             ; preds = %1014
  br label %1007

1001:                                             ; preds = %1014
  br label %1007

1002:                                             ; preds = %1014
  br label %1007

1003:                                             ; preds = %1014
  br label %1007

1004:                                             ; preds = %1014
  br label %1007

1005:                                             ; preds = %1014
  br label %1007

1006:                                             ; preds = %1014
  br label %1007

1007:                                             ; preds = %1014, %1006, %1005, %1004, %1003, %1002, %1001, %1000, %999, %998, %997, %996, %995, %994, %993, %992, %991, %990, %989, %988, %987, %986, %985, %984, %983, %982, %981, %980, %979, %978, %977, %976, %975, %974, %973, %972, %971, %970, %969, %968, %967, %966, %965, %964, %963, %962, %961, %960, %959, %958, %957, %956, %955, %954, %953, %952, %951, %30, %950
  %1008 = phi ptr [ getelementptr inbounds ([59 x %struct.builtin_description], ptr @bdesc_special_args, i64 0, i64 2), %1014 ], [ @bdesc_special_args, %30 ], [ getelementptr inbounds ([59 x %struct.builtin_description], ptr @bdesc_special_args, i64 0, i64 1), %950 ], [ getelementptr inbounds ([59 x %struct.builtin_description], ptr @bdesc_special_args, i64 0, i64 3), %951 ], [ getelementptr inbounds ([59 x %struct.builtin_description], ptr @bdesc_special_args, i64 0, i64 4), %952 ], [ getelementptr inbounds ([59 x %struct.builtin_description], ptr @bdesc_special_args, i64 0, i64 5), %953 ], [ getelementptr inbounds ([59 x %struct.builtin_description], ptr @bdesc_special_args, i64 0, i64 6), %954 ], [ getelementptr inbounds ([59 x %struct.builtin_description], ptr @bdesc_special_args, i64 0, i64 7), %955 ], [ getelementptr inbounds ([59 x %struct.builtin_description], ptr @bdesc_special_args, i64 0, i64 8), %956 ], [ getelementptr inbounds ([59 x %struct.builtin_description], ptr @bdesc_special_args, i64 0, i64 9), %957 ], [ getelementptr inbounds ([59 x %struct.builtin_description], ptr @bdesc_special_args, i64 0, i64 10), %958 ], [ getelementptr inbounds ([59 x %struct.builtin_description], ptr @bdesc_special_args, i64 0, i64 11), %959 ], [ getelementptr inbounds ([59 x %struct.builtin_description], ptr @bdesc_special_args, i64 0, i64 12), %960 ], [ getelementptr inbounds ([59 x %struct.builtin_description], ptr @bdesc_special_args, i64 0, i64 13), %961 ], [ getelementptr inbounds ([59 x %struct.builtin_description], ptr @bdesc_special_args, i64 0, i64 14), %962 ], [ getelementptr inbounds ([59 x %struct.builtin_description], ptr @bdesc_special_args, i64 0, i64 15), %963 ], [ getelementptr inbounds ([59 x %struct.builtin_description], ptr @bdesc_special_args, i64 0, i64 16), %964 ], [ getelementptr inbounds ([59 x %struct.builtin_description], ptr @bdesc_special_args, i64 0, i64 17), %965 ], [ getelementptr inbounds ([59 x %struct.builtin_description], ptr @bdesc_special_args, i64 0, i64 18), %966 ], [ getelementptr inbounds ([59 x %struct.builtin_description], ptr @bdesc_special_args, i64 0, i64 19), %967 ], [ getelementptr inbounds ([59 x %struct.builtin_description], ptr @bdesc_special_args, i64 0, i64 20), %968 ], [ getelementptr inbounds ([59 x %struct.builtin_description], ptr @bdesc_special_args, i64 0, i64 21), %969 ], [ getelementptr inbounds ([59 x %struct.builtin_description], ptr @bdesc_special_args, i64 0, i64 22), %970 ], [ getelementptr inbounds ([59 x %struct.builtin_description], ptr @bdesc_special_args, i64 0, i64 23), %971 ], [ getelementptr inbounds ([59 x %struct.builtin_description], ptr @bdesc_special_args, i64 0, i64 24), %972 ], [ getelementptr inbounds ([59 x %struct.builtin_description], ptr @bdesc_special_args, i64 0, i64 25), %973 ], [ getelementptr inbounds ([59 x %struct.builtin_description], ptr @bdesc_special_args, i64 0, i64 26), %974 ], [ getelementptr inbounds ([59 x %struct.builtin_description], ptr @bdesc_special_args, i64 0, i64 27), %975 ], [ getelementptr inbounds ([59 x %struct.builtin_description], ptr @bdesc_special_args, i64 0, i64 28), %976 ], [ getelementptr inbounds ([59 x %struct.builtin_description], ptr @bdesc_special_args, i64 0, i64 29), %977 ], [ getelementptr inbounds ([59 x %struct.builtin_description], ptr @bdesc_special_args, i64 0, i64 30), %978 ], [ getelementptr inbounds ([59 x %struct.builtin_description], ptr @bdesc_special_args, i64 0, i64 31), %979 ], [ getelementptr inbounds ([59 x %struct.builtin_description], ptr @bdesc_special_args, i64 0, i64 32), %980 ], [ getelementptr inbounds ([59 x %struct.builtin_description], ptr @bdesc_special_args, i64 0, i64 33), %981 ], [ getelementptr inbounds ([59 x %struct.builtin_description], ptr @bdesc_special_args, i64 0, i64 34), %982 ], [ getelementptr inbounds ([59 x %struct.builtin_description], ptr @bdesc_special_args, i64 0, i64 35), %983 ], [ getelementptr inbounds ([59 x %struct.builtin_description], ptr @bdesc_special_args, i64 0, i64 36), %984 ], [ getelementptr inbounds ([59 x %struct.builtin_description], ptr @bdesc_special_args, i64 0, i64 37), %985 ], [ getelementptr inbounds ([59 x %struct.builtin_description], ptr @bdesc_special_args, i64 0, i64 38), %986 ], [ getelementptr inbounds ([59 x %struct.builtin_description], ptr @bdesc_special_args, i64 0, i64 39), %987 ], [ getelementptr inbounds ([59 x %struct.builtin_description], ptr @bdesc_special_args, i64 0, i64 40), %988 ], [ getelementptr inbounds ([59 x %struct.builtin_description], ptr @bdesc_special_args, i64 0, i64 41), %989 ], [ getelementptr inbounds ([59 x %struct.builtin_description], ptr @bdesc_special_args, i64 0, i64 42), %990 ], [ getelementptr inbounds ([59 x %struct.builtin_description], ptr @bdesc_special_args, i64 0, i64 43), %991 ], [ getelementptr inbounds ([59 x %struct.builtin_description], ptr @bdesc_special_args, i64 0, i64 44), %992 ], [ getelementptr inbounds ([59 x %struct.builtin_description], ptr @bdesc_special_args, i64 0, i64 45), %993 ], [ getelementptr inbounds ([59 x %struct.builtin_description], ptr @bdesc_special_args, i64 0, i64 46), %994 ], [ getelementptr inbounds ([59 x %struct.builtin_description], ptr @bdesc_special_args, i64 0, i64 47), %995 ], [ getelementptr inbounds ([59 x %struct.builtin_description], ptr @bdesc_special_args, i64 0, i64 48), %996 ], [ getelementptr inbounds ([59 x %struct.builtin_description], ptr @bdesc_special_args, i64 0, i64 49), %997 ], [ getelementptr inbounds ([59 x %struct.builtin_description], ptr @bdesc_special_args, i64 0, i64 50), %998 ], [ getelementptr inbounds ([59 x %struct.builtin_description], ptr @bdesc_special_args, i64 0, i64 51), %999 ], [ getelementptr inbounds ([59 x %struct.builtin_description], ptr @bdesc_special_args, i64 0, i64 52), %1000 ], [ getelementptr inbounds ([59 x %struct.builtin_description], ptr @bdesc_special_args, i64 0, i64 53), %1001 ], [ getelementptr inbounds ([59 x %struct.builtin_description], ptr @bdesc_special_args, i64 0, i64 54), %1002 ], [ getelementptr inbounds ([59 x %struct.builtin_description], ptr @bdesc_special_args, i64 0, i64 55), %1003 ], [ getelementptr inbounds ([59 x %struct.builtin_description], ptr @bdesc_special_args, i64 0, i64 56), %1004 ], [ getelementptr inbounds ([59 x %struct.builtin_description], ptr @bdesc_special_args, i64 0, i64 57), %1005 ], [ getelementptr inbounds ([59 x %struct.builtin_description], ptr @bdesc_special_args, i64 0, i64 58), %1006 ]
  %1009 = getelementptr i8, ptr %1008, i64 4
  %1010 = load i32, ptr %1009, align 4, !tbaa !353
  %1011 = getelementptr i8, ptr %1008, i64 24
  %1012 = load i32, ptr %1011, align 8, !tbaa !355
  %1013 = tail call fastcc ptr @ix86_expand_special_args_builtin(i32 %1010, i32 %1012, ptr noundef nonnull %0, ptr noundef %1)
  br label %1136

1014:                                             ; preds = %30
  switch i32 %14, label %1015 [
    i32 150, label %1007
    i32 154, label %951
    i32 56, label %952
    i32 67, label %953
    i32 55, label %954
    i32 60, label %955
    i32 61, label %956
    i32 62, label %957
    i32 63, label %958
    i32 153, label %959
    i32 68, label %960
    i32 338, label %961
    i32 337, label %962
    i32 234, label %963
    i32 70, label %964
    i32 258, label %965
    i32 259, label %966
    i32 257, label %967
    i32 233, label %968
    i32 69, label %969
    i32 236, label %970
    i32 237, label %971
    i32 356, label %972
    i32 406, label %973
    i32 391, label %974
    i32 392, label %975
    i32 534, label %976
    i32 535, label %977
    i32 551, label %978
    i32 552, label %979
    i32 553, label %980
    i32 554, label %981
    i32 555, label %982
    i32 559, label %983
    i32 560, label %984
    i32 561, label %985
    i32 562, label %986
    i32 567, label %987
    i32 568, label %988
    i32 563, label %989
    i32 564, label %990
    i32 565, label %991
    i32 566, label %992
    i32 569, label %993
    i32 570, label %994
    i32 573, label %995
    i32 574, label %996
    i32 571, label %997
    i32 572, label %998
    i32 575, label %999
    i32 576, label %1000
    i32 794, label %1001
    i32 795, label %1002
    i32 796, label %1003
    i32 797, label %1004
    i32 798, label %1005
    i32 799, label %1006
  ]

1015:                                             ; preds = %1014, %1045
  %1016 = phi ptr [ %1047, %1045 ], [ @bdesc_args, %1014 ]
  %1017 = phi i64 [ %1046, %1045 ], [ 0, %1014 ]
  %1018 = getelementptr inbounds %struct.builtin_description, ptr %1016, i64 0, i32 3
  %1019 = load i32, ptr %1018, align 8, !tbaa !356
  %1020 = icmp eq i32 %1019, %14
  br i1 %1020, label %1025, label %1037

1021:                                             ; preds = %1041
  %1022 = getelementptr inbounds %struct.builtin_description, ptr %1016, i64 2
  br label %1025

1023:                                             ; preds = %1037
  %1024 = getelementptr inbounds %struct.builtin_description, ptr %1016, i64 1
  br label %1025

1025:                                             ; preds = %1015, %1023, %1021
  %1026 = phi ptr [ %1022, %1021 ], [ %1024, %1023 ], [ %1016, %1015 ]
  %1027 = add nsw i32 %14, -617
  %1028 = icmp ult i32 %1027, 2
  br i1 %1028, label %1029, label %1035

1029:                                             ; preds = %1025
  %1030 = load i32, ptr @ix86_isa_flags, align 4, !tbaa !20
  %1031 = and i32 %1030, 131072
  %1032 = icmp eq i32 %1031, 0
  br i1 %1032, label %1033, label %1035

1033:                                             ; preds = %1029
  %1034 = tail call ptr @expand_call(ptr noundef %0, ptr noundef %1, i32 noundef %4) #30
  br label %1136

1035:                                             ; preds = %1025, %1029
  %1036 = tail call fastcc ptr @ix86_expand_args_builtin(ptr noundef nonnull %1026, ptr noundef %0, ptr noundef %1)
  br label %1136

1037:                                             ; preds = %1015
  %1038 = getelementptr inbounds %struct.builtin_description, ptr %1016, i64 1, i32 3
  %1039 = load i32, ptr %1038, align 8, !tbaa !356
  %1040 = icmp eq i32 %1039, %14
  br i1 %1040, label %1023, label %1041

1041:                                             ; preds = %1037
  %1042 = getelementptr inbounds %struct.builtin_description, ptr %1016, i64 2, i32 3
  %1043 = load i32, ptr %1042, align 8, !tbaa !356
  %1044 = icmp eq i32 %1043, %14
  br i1 %1044, label %1021, label %1045

1045:                                             ; preds = %1041
  %1046 = add nuw nsw i64 %1017, 3
  %1047 = getelementptr inbounds %struct.builtin_description, ptr %1016, i64 3
  %1048 = icmp eq i64 %1046, 513
  br i1 %1048, label %1049, label %1015, !llvm.loop !357

1049:                                             ; preds = %1045
  switch i32 %14, label %1098 [
    i32 30, label %1073
    i32 31, label %1050
    i32 32, label %1051
    i32 33, label %1052
    i32 34, label %1053
    i32 35, label %1054
    i32 36, label %1055
    i32 37, label %1056
    i32 38, label %1057
    i32 39, label %1058
    i32 40, label %1059
    i32 41, label %1060
    i32 208, label %1061
    i32 209, label %1062
    i32 210, label %1063
    i32 211, label %1064
    i32 212, label %1065
    i32 213, label %1066
    i32 214, label %1067
    i32 215, label %1068
    i32 216, label %1069
    i32 217, label %1070
    i32 218, label %1071
    i32 219, label %1072
    i32 462, label %1086
    i32 463, label %1080
    i32 464, label %1081
    i32 465, label %1082
    i32 466, label %1083
    i32 467, label %1084
    i32 468, label %1085
    i32 469, label %1095
    i32 470, label %1089
    i32 471, label %1090
    i32 472, label %1091
    i32 473, label %1092
    i32 474, label %1093
    i32 475, label %1094
  ]

1050:                                             ; preds = %1049
  br label %1073

1051:                                             ; preds = %1049
  br label %1073

1052:                                             ; preds = %1049
  br label %1073

1053:                                             ; preds = %1049
  br label %1073

1054:                                             ; preds = %1049
  br label %1073

1055:                                             ; preds = %1049
  br label %1073

1056:                                             ; preds = %1049
  br label %1073

1057:                                             ; preds = %1049
  br label %1073

1058:                                             ; preds = %1049
  br label %1073

1059:                                             ; preds = %1049
  br label %1073

1060:                                             ; preds = %1049
  br label %1073

1061:                                             ; preds = %1049
  br label %1073

1062:                                             ; preds = %1049
  br label %1073

1063:                                             ; preds = %1049
  br label %1073

1064:                                             ; preds = %1049
  br label %1073

1065:                                             ; preds = %1049
  br label %1073

1066:                                             ; preds = %1049
  br label %1073

1067:                                             ; preds = %1049
  br label %1073

1068:                                             ; preds = %1049
  br label %1073

1069:                                             ; preds = %1049
  br label %1073

1070:                                             ; preds = %1049
  br label %1073

1071:                                             ; preds = %1049
  br label %1073

1072:                                             ; preds = %1049
  br label %1073

1073:                                             ; preds = %1049, %1072, %1071, %1070, %1069, %1068, %1067, %1066, %1065, %1064, %1063, %1062, %1061, %1060, %1059, %1058, %1057, %1056, %1055, %1054, %1053, %1052, %1051, %1050
  %1074 = phi ptr [ @bdesc_comi, %1049 ], [ getelementptr inbounds ([24 x %struct.builtin_description], ptr @bdesc_comi, i64 0, i64 1), %1050 ], [ getelementptr inbounds ([24 x %struct.builtin_description], ptr @bdesc_comi, i64 0, i64 2), %1051 ], [ getelementptr inbounds ([24 x %struct.builtin_description], ptr @bdesc_comi, i64 0, i64 3), %1052 ], [ getelementptr inbounds ([24 x %struct.builtin_description], ptr @bdesc_comi, i64 0, i64 4), %1053 ], [ getelementptr inbounds ([24 x %struct.builtin_description], ptr @bdesc_comi, i64 0, i64 5), %1054 ], [ getelementptr inbounds ([24 x %struct.builtin_description], ptr @bdesc_comi, i64 0, i64 6), %1055 ], [ getelementptr inbounds ([24 x %struct.builtin_description], ptr @bdesc_comi, i64 0, i64 7), %1056 ], [ getelementptr inbounds ([24 x %struct.builtin_description], ptr @bdesc_comi, i64 0, i64 8), %1057 ], [ getelementptr inbounds ([24 x %struct.builtin_description], ptr @bdesc_comi, i64 0, i64 9), %1058 ], [ getelementptr inbounds ([24 x %struct.builtin_description], ptr @bdesc_comi, i64 0, i64 10), %1059 ], [ getelementptr inbounds ([24 x %struct.builtin_description], ptr @bdesc_comi, i64 0, i64 11), %1060 ], [ getelementptr inbounds ([24 x %struct.builtin_description], ptr @bdesc_comi, i64 0, i64 12), %1061 ], [ getelementptr inbounds ([24 x %struct.builtin_description], ptr @bdesc_comi, i64 0, i64 13), %1062 ], [ getelementptr inbounds ([24 x %struct.builtin_description], ptr @bdesc_comi, i64 0, i64 14), %1063 ], [ getelementptr inbounds ([24 x %struct.builtin_description], ptr @bdesc_comi, i64 0, i64 15), %1064 ], [ getelementptr inbounds ([24 x %struct.builtin_description], ptr @bdesc_comi, i64 0, i64 16), %1065 ], [ getelementptr inbounds ([24 x %struct.builtin_description], ptr @bdesc_comi, i64 0, i64 17), %1066 ], [ getelementptr inbounds ([24 x %struct.builtin_description], ptr @bdesc_comi, i64 0, i64 18), %1067 ], [ getelementptr inbounds ([24 x %struct.builtin_description], ptr @bdesc_comi, i64 0, i64 19), %1068 ], [ getelementptr inbounds ([24 x %struct.builtin_description], ptr @bdesc_comi, i64 0, i64 20), %1069 ], [ getelementptr inbounds ([24 x %struct.builtin_description], ptr @bdesc_comi, i64 0, i64 21), %1070 ], [ getelementptr inbounds ([24 x %struct.builtin_description], ptr @bdesc_comi, i64 0, i64 22), %1071 ], [ getelementptr inbounds ([24 x %struct.builtin_description], ptr @bdesc_comi, i64 0, i64 23), %1072 ]
  %1075 = getelementptr i8, ptr %0, i64 64
  %1076 = load ptr, ptr %1075, align 8, !tbaa !16
  %1077 = getelementptr i8, ptr %0, i64 72
  %1078 = load ptr, ptr %1077, align 8, !tbaa !16
  %1079 = tail call fastcc ptr @ix86_expand_sse_comi(ptr noundef nonnull %1074, ptr %1076, ptr %1078)
  br label %1136

1080:                                             ; preds = %1049
  br label %1086

1081:                                             ; preds = %1049
  br label %1086

1082:                                             ; preds = %1049
  br label %1086

1083:                                             ; preds = %1049
  br label %1086

1084:                                             ; preds = %1049
  br label %1086

1085:                                             ; preds = %1049
  br label %1086

1086:                                             ; preds = %1049, %1085, %1084, %1083, %1082, %1081, %1080
  %1087 = phi ptr [ @bdesc_pcmpestr, %1049 ], [ getelementptr inbounds ([7 x %struct.builtin_description], ptr @bdesc_pcmpestr, i64 0, i64 1), %1080 ], [ getelementptr inbounds ([7 x %struct.builtin_description], ptr @bdesc_pcmpestr, i64 0, i64 2), %1081 ], [ getelementptr inbounds ([7 x %struct.builtin_description], ptr @bdesc_pcmpestr, i64 0, i64 3), %1082 ], [ getelementptr inbounds ([7 x %struct.builtin_description], ptr @bdesc_pcmpestr, i64 0, i64 4), %1083 ], [ getelementptr inbounds ([7 x %struct.builtin_description], ptr @bdesc_pcmpestr, i64 0, i64 5), %1084 ], [ getelementptr inbounds ([7 x %struct.builtin_description], ptr @bdesc_pcmpestr, i64 0, i64 6), %1085 ]
  %1088 = tail call fastcc ptr @ix86_expand_sse_pcmpestr(ptr noundef nonnull %1087, ptr noundef %0, ptr noundef %1)
  br label %1136

1089:                                             ; preds = %1049
  br label %1095

1090:                                             ; preds = %1049
  br label %1095

1091:                                             ; preds = %1049
  br label %1095

1092:                                             ; preds = %1049
  br label %1095

1093:                                             ; preds = %1049
  br label %1095

1094:                                             ; preds = %1049
  br label %1095

1095:                                             ; preds = %1049, %1094, %1093, %1092, %1091, %1090, %1089
  %1096 = phi ptr [ @bdesc_pcmpistr, %1049 ], [ getelementptr inbounds ([7 x %struct.builtin_description], ptr @bdesc_pcmpistr, i64 0, i64 1), %1089 ], [ getelementptr inbounds ([7 x %struct.builtin_description], ptr @bdesc_pcmpistr, i64 0, i64 2), %1090 ], [ getelementptr inbounds ([7 x %struct.builtin_description], ptr @bdesc_pcmpistr, i64 0, i64 3), %1091 ], [ getelementptr inbounds ([7 x %struct.builtin_description], ptr @bdesc_pcmpistr, i64 0, i64 4), %1092 ], [ getelementptr inbounds ([7 x %struct.builtin_description], ptr @bdesc_pcmpistr, i64 0, i64 5), %1093 ], [ getelementptr inbounds ([7 x %struct.builtin_description], ptr @bdesc_pcmpistr, i64 0, i64 6), %1094 ]
  %1097 = tail call fastcc ptr @ix86_expand_sse_pcmpistr(ptr noundef nonnull %1096, ptr noundef %0, ptr noundef %1)
  br label %1136

1098:                                             ; preds = %1049, %1131
  %1099 = phi ptr [ %1133, %1131 ], [ @bdesc_multi_arg, %1049 ]
  %1100 = phi i64 [ %1132, %1131 ], [ 0, %1049 ]
  %1101 = getelementptr inbounds %struct.builtin_description, ptr %1099, i64 0, i32 3
  %1102 = load i32, ptr %1101, align 8, !tbaa !356
  %1103 = icmp eq i32 %1102, %14
  br i1 %1103, label %1110, label %1119

1104:                                             ; preds = %1127
  %1105 = getelementptr inbounds %struct.builtin_description, ptr %1099, i64 3
  br label %1110

1106:                                             ; preds = %1123
  %1107 = getelementptr inbounds %struct.builtin_description, ptr %1099, i64 2
  br label %1110

1108:                                             ; preds = %1119
  %1109 = getelementptr inbounds %struct.builtin_description, ptr %1099, i64 1
  br label %1110

1110:                                             ; preds = %1098, %1108, %1106, %1104
  %1111 = phi ptr [ %1105, %1104 ], [ %1107, %1106 ], [ %1109, %1108 ], [ %1099, %1098 ]
  %1112 = getelementptr inbounds %struct.builtin_description, ptr %1111, i64 0, i32 1
  %1113 = load i32, ptr %1112, align 4, !tbaa !353
  %1114 = getelementptr inbounds %struct.builtin_description, ptr %1111, i64 0, i32 5
  %1115 = load i32, ptr %1114, align 8, !tbaa !355
  %1116 = getelementptr inbounds %struct.builtin_description, ptr %1111, i64 0, i32 4
  %1117 = load i32, ptr %1116, align 4, !tbaa !358
  %1118 = tail call fastcc ptr @ix86_expand_multi_arg_builtin(i32 noundef %1113, ptr noundef %0, ptr noundef %1, i32 noundef %1115, i32 noundef %1117)
  br label %1136

1119:                                             ; preds = %1098
  %1120 = getelementptr inbounds %struct.builtin_description, ptr %1099, i64 1, i32 3
  %1121 = load i32, ptr %1120, align 8, !tbaa !356
  %1122 = icmp eq i32 %1121, %14
  br i1 %1122, label %1108, label %1123

1123:                                             ; preds = %1119
  %1124 = getelementptr inbounds %struct.builtin_description, ptr %1099, i64 2, i32 3
  %1125 = load i32, ptr %1124, align 8, !tbaa !356
  %1126 = icmp eq i32 %1125, %14
  br i1 %1126, label %1106, label %1127

1127:                                             ; preds = %1123
  %1128 = getelementptr inbounds %struct.builtin_description, ptr %1099, i64 3, i32 3
  %1129 = load i32, ptr %1128, align 8, !tbaa !356
  %1130 = icmp eq i32 %1129, %14
  br i1 %1130, label %1104, label %1131

1131:                                             ; preds = %1127
  %1132 = add nuw nsw i64 %1100, 4
  %1133 = getelementptr inbounds %struct.builtin_description, ptr %1099, i64 4
  %1134 = icmp eq i64 %1132, 172
  br i1 %1134, label %1135, label %1098, !llvm.loop !359

1135:                                             ; preds = %1131
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 24377, ptr noundef nonnull @.str.131) #30
  br label %1136

1136:                                             ; preds = %77, %1135, %1110, %1095, %1086, %1073, %1035, %1033, %1007, %946, %933, %920, %910, %373, %300, %227, %164, %141, %108, %93, %85, %83, %28
  %1137 = phi ptr [ %1013, %1007 ], [ %1036, %1035 ], [ %1034, %1033 ], [ %1079, %1073 ], [ %1088, %1086 ], [ %1097, %1095 ], [ %1118, %1110 ], [ null, %1135 ], [ %947, %946 ], [ null, %933 ], [ %921, %920 ], [ %912, %910 ], [ %377, %373 ], [ %301, %300 ], [ %228, %227 ], [ null, %164 ], [ null, %141 ], [ null, %108 ], [ %97, %93 ], [ null, %85 ], [ null, %83 ], [ %29, %28 ], [ null, %77 ]
  ret ptr %1137
}

declare ptr @hook_tree_tree_tree_bool_null(ptr noundef, ptr noundef, i8 noundef zeroext) #3

; Function Attrs: nounwind sspstrong uwtable
define internal ptr @ix86_builtin_reciprocal(i32 noundef %0, i8 noundef zeroext %1, i8 zeroext %2) #9 {
  %4 = load i32, ptr @ix86_fpmath, align 4, !tbaa !16
  %5 = and i32 %4, 2
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %29, label %7

7:                                                ; preds = %3
  %8 = tail call zeroext i8 @optimize_insn_for_size_p() #30
  %9 = icmp eq i8 %8, 0
  %10 = load i32, ptr @flag_finite_math_only, align 4
  %11 = icmp ne i32 %10, 0
  %12 = select i1 %9, i1 %11, i1 false
  %13 = load i32, ptr @flag_trapping_math, align 4
  %14 = icmp eq i32 %13, 0
  %15 = select i1 %12, i1 %14, i1 false
  %16 = load i32, ptr @flag_unsafe_math_optimizations, align 4
  %17 = icmp ne i32 %16, 0
  %18 = select i1 %15, i1 %17, i1 false
  br i1 %18, label %19, label %29

19:                                               ; preds = %7
  %20 = icmp eq i8 %1, 0
  br i1 %20, label %25, label %21

21:                                               ; preds = %19
  %22 = icmp eq i32 %0, 142
  %23 = load ptr, ptr getelementptr inbounds ([801 x ptr], ptr @ix86_builtins, i64 0, i64 138), align 16
  %24 = select i1 %22, ptr %23, ptr null
  br label %29

25:                                               ; preds = %19
  %26 = icmp eq i32 %0, 229
  %27 = load ptr, ptr getelementptr inbounds ([801 x ptr], ptr @ix86_builtins, i64 0, i64 140), align 16
  %28 = select i1 %26, ptr %27, ptr null
  br label %29

29:                                               ; preds = %25, %21, %3, %7
  %30 = phi ptr [ null, %7 ], [ null, %3 ], [ %24, %21 ], [ %28, %25 ]
  ret ptr %30
}

; Function Attrs: nounwind sspstrong uwtable
define internal ptr @ix86_mangle_type(ptr nocapture noundef readonly %0) #9 {
  %2 = getelementptr inbounds %struct.tree_type, ptr %0, i64 0, i32 16
  %3 = load ptr, ptr %2, align 8, !tbaa !16
  %4 = load i64, ptr %3, align 8
  %5 = trunc i64 %4 to i16
  switch i16 %5, label %22 [
    i16 19, label %6
    i16 7, label %6
    i16 8, label %6
    i16 9, label %6
  ]

6:                                                ; preds = %1, %1, %1, %1
  %7 = and i64 %4, 65535
  %8 = icmp eq i64 %7, 14
  br i1 %8, label %9, label %11

9:                                                ; preds = %6
  %10 = tail call i32 @vector_type_mode(ptr noundef nonnull %3) #30
  br label %16

11:                                               ; preds = %6
  %12 = getelementptr inbounds %struct.tree_type, ptr %3, i64 0, i32 6
  %13 = load i32, ptr %12, align 4
  %14 = lshr i32 %13, 16
  %15 = and i32 %14, 255
  br label %16

16:                                               ; preds = %11, %9
  %17 = phi i32 [ %10, %9 ], [ %15, %11 ]
  %18 = icmp eq i32 %17, 40
  %19 = select i1 %18, ptr @.str.408, ptr null
  %20 = icmp eq i32 %17, 41
  %21 = select i1 %20, ptr @.str.414, ptr %19
  br label %22

22:                                               ; preds = %16, %1
  %23 = phi ptr [ null, %1 ], [ %21, %16 ]
  ret ptr %23
}

declare i32 @default_section_type_flags(ptr noundef, ptr noundef, i32 noundef) #3

declare i32 @default_branch_target_register_class() #3

declare zeroext i8 @hook_bool_bool_false(i8 noundef zeroext) #3

declare zeroext i8 @default_have_conditional_execution() #3

; Function Attrs: nounwind sspstrong uwtable
define internal zeroext i8 @ix86_cannot_force_const_mem(ptr noundef %0) #9 {
  %2 = load i32, ptr %0, align 8
  %3 = trunc i32 %2 to i16
  switch i16 %3, label %4 [
    i16 30, label %7
    i16 32, label %7
    i16 33, label %7
  ]

4:                                                ; preds = %1
  %5 = tail call zeroext i8 @legitimate_constant_p(ptr noundef nonnull %0), !range !66
  %6 = xor i8 %5, 1
  br label %7

7:                                                ; preds = %1, %1, %1, %4
  %8 = phi i8 [ %6, %4 ], [ 0, %1 ], [ 0, %1 ], [ 0, %1 ]
  ret i8 %8
}

declare zeroext i8 @hook_bool_const_rtx_commutative_p(ptr noundef, i32 noundef) #3

; Function Attrs: nounwind sspstrong uwtable
define internal ptr @ix86_legitimize_address(ptr noundef %0, ptr nocapture readnone %1, i32 %2) #9 {
  %4 = load i32, ptr %0, align 8
  %5 = and i32 %4, 65535
  %6 = trunc i32 %4 to i16
  switch i16 %6, label %39 [
    i16 45, label %7
    i16 35, label %15
  ]

7:                                                ; preds = %3
  %8 = getelementptr inbounds %struct.rtx_def, ptr %0, i64 0, i32 1, i32 0, i32 0, i64 1
  %9 = load i32, ptr %8, align 8, !tbaa !16
  %10 = lshr i32 %9, 3
  %11 = and i32 %10, 7
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %39, label %13

13:                                               ; preds = %7
  %14 = tail call fastcc ptr @legitimize_tls_address(ptr noundef nonnull %0, i32 noundef %11, i32 noundef 0)
  br label %295

15:                                               ; preds = %3
  %16 = getelementptr inbounds %struct.rtx_def, ptr %0, i64 0, i32 1
  %17 = load ptr, ptr %16, align 8, !tbaa !16
  %18 = load i32, ptr %17, align 8
  %19 = and i32 %18, 65535
  %20 = icmp eq i32 %19, 49
  br i1 %20, label %21, label %39

21:                                               ; preds = %15
  %22 = getelementptr inbounds %struct.rtx_def, ptr %17, i64 0, i32 1
  %23 = load ptr, ptr %22, align 8, !tbaa !16
  %24 = load i32, ptr %23, align 8
  %25 = and i32 %24, 65535
  %26 = icmp eq i32 %25, 45
  br i1 %26, label %27, label %39

27:                                               ; preds = %21
  %28 = getelementptr inbounds %struct.rtx_def, ptr %23, i64 0, i32 1, i32 0, i32 0, i64 1
  %29 = load i32, ptr %28, align 8, !tbaa !16
  %30 = lshr i32 %29, 3
  %31 = and i32 %30, 7
  %32 = icmp eq i32 %31, 0
  br i1 %32, label %39, label %33

33:                                               ; preds = %27
  %34 = tail call fastcc ptr @legitimize_tls_address(ptr noundef nonnull %23, i32 noundef %31, i32 noundef 0)
  %35 = load ptr, ptr %16, align 8, !tbaa !16
  %36 = getelementptr inbounds %struct.rtx_def, ptr %35, i64 0, i32 1, i32 0, i32 0, i64 1
  %37 = load ptr, ptr %36, align 8, !tbaa !16
  %38 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 49, i32 noundef 16, ptr noundef %34, ptr noundef %37) #30
  br label %295

39:                                               ; preds = %3, %7, %27, %21, %15
  %40 = load i32, ptr @flag_pic, align 4, !tbaa !20
  %41 = icmp eq i32 %40, 0
  br i1 %41, label %48, label %42

42:                                               ; preds = %39
  switch i16 %6, label %70 [
    i16 45, label %46
    i16 44, label %46
    i16 35, label %43
    i16 65, label %50
  ]

43:                                               ; preds = %42
  %44 = tail call i32 @symbolic_reference_mentioned_p(ptr noundef nonnull %0)
  %45 = icmp eq i32 %44, 0
  br i1 %45, label %70, label %46

46:                                               ; preds = %42, %42, %43
  %47 = tail call fastcc ptr @legitimize_pic_address(ptr noundef nonnull %0, ptr noundef null)
  br label %295

48:                                               ; preds = %39
  %49 = icmp eq i32 %5, 65
  br i1 %49, label %50, label %70

50:                                               ; preds = %42, %48
  %51 = getelementptr inbounds %struct.rtx_def, ptr %0, i64 0, i32 1
  %52 = getelementptr inbounds %struct.rtx_def, ptr %0, i64 0, i32 1, i32 0, i32 0, i64 1
  %53 = load ptr, ptr %52, align 8, !tbaa !16
  %54 = load i32, ptr %53, align 8
  %55 = and i32 %54, 65535
  %56 = icmp eq i32 %55, 30
  br i1 %56, label %57, label %70

57:                                               ; preds = %50
  %58 = getelementptr inbounds %struct.rtx_def, ptr %53, i64 0, i32 1
  %59 = load i64, ptr %58, align 8, !tbaa !16
  %60 = icmp ult i64 %59, 4
  br i1 %60, label %61, label %70

61:                                               ; preds = %57
  %62 = trunc i64 %59 to i32
  %63 = load ptr, ptr %51, align 8, !tbaa !16
  %64 = tail call ptr @force_reg(i32 noundef 16, ptr noundef %63) #30
  %65 = shl nuw nsw i32 1, %62
  %66 = zext i32 %65 to i64
  %67 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef %66) #30
  %68 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 52, i32 noundef 16, ptr noundef %64, ptr noundef %67) #30
  %69 = load i32, ptr %68, align 8
  br label %70

70:                                               ; preds = %42, %43, %61, %57, %50, %48
  %71 = phi i32 [ %69, %61 ], [ %4, %57 ], [ %4, %50 ], [ %4, %48 ], [ %4, %43 ], [ %4, %42 ]
  %72 = phi i32 [ 1, %61 ], [ 0, %57 ], [ 0, %50 ], [ 0, %48 ], [ 0, %43 ], [ 0, %42 ]
  %73 = phi ptr [ %68, %61 ], [ %0, %57 ], [ %0, %50 ], [ %0, %48 ], [ %0, %43 ], [ %0, %42 ]
  %74 = and i32 %71, 65535
  %75 = icmp eq i32 %74, 49
  br i1 %75, label %76, label %295

76:                                               ; preds = %70
  %77 = getelementptr inbounds %struct.rtx_def, ptr %73, i64 0, i32 1
  %78 = load ptr, ptr %77, align 8, !tbaa !16
  %79 = load i32, ptr %78, align 8
  %80 = and i32 %79, 65535
  %81 = icmp eq i32 %80, 65
  br i1 %81, label %82, label %101

82:                                               ; preds = %76
  %83 = getelementptr inbounds %struct.rtx_def, ptr %78, i64 0, i32 1
  %84 = getelementptr inbounds %struct.rtx_def, ptr %78, i64 0, i32 1, i32 0, i32 0, i64 1
  %85 = load ptr, ptr %84, align 8, !tbaa !16
  %86 = load i32, ptr %85, align 8
  %87 = and i32 %86, 65535
  %88 = icmp eq i32 %87, 30
  br i1 %88, label %89, label %101

89:                                               ; preds = %82
  %90 = getelementptr inbounds %struct.rtx_def, ptr %85, i64 0, i32 1
  %91 = load i64, ptr %90, align 8, !tbaa !16
  %92 = icmp ult i64 %91, 4
  br i1 %92, label %93, label %101

93:                                               ; preds = %89
  %94 = trunc i64 %91 to i32
  %95 = load ptr, ptr %83, align 8, !tbaa !16
  %96 = tail call ptr @force_reg(i32 noundef 16, ptr noundef %95) #30
  %97 = shl nuw nsw i32 1, %94
  %98 = zext i32 %97 to i64
  %99 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef %98) #30
  %100 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 52, i32 noundef 16, ptr noundef %96, ptr noundef %99) #30
  store ptr %100, ptr %77, align 8, !tbaa !16
  br label %101

101:                                              ; preds = %93, %89, %82, %76
  %102 = phi ptr [ %100, %93 ], [ %78, %89 ], [ %78, %82 ], [ %78, %76 ]
  %103 = phi i32 [ 1, %93 ], [ %72, %89 ], [ %72, %82 ], [ %72, %76 ]
  %104 = getelementptr inbounds %struct.rtx_def, ptr %73, i64 0, i32 1, i32 0, i32 0, i64 1
  %105 = load ptr, ptr %104, align 8, !tbaa !16
  %106 = load i32, ptr %105, align 8
  %107 = and i32 %106, 65535
  %108 = icmp eq i32 %107, 65
  br i1 %108, label %109, label %130

109:                                              ; preds = %101
  %110 = getelementptr inbounds %struct.rtx_def, ptr %105, i64 0, i32 1
  %111 = getelementptr inbounds %struct.rtx_def, ptr %105, i64 0, i32 1, i32 0, i32 0, i64 1
  %112 = load ptr, ptr %111, align 8, !tbaa !16
  %113 = load i32, ptr %112, align 8
  %114 = and i32 %113, 65535
  %115 = icmp eq i32 %114, 30
  br i1 %115, label %116, label %130

116:                                              ; preds = %109
  %117 = getelementptr inbounds %struct.rtx_def, ptr %112, i64 0, i32 1
  %118 = load i64, ptr %117, align 8, !tbaa !16
  %119 = icmp ult i64 %118, 4
  br i1 %119, label %120, label %130

120:                                              ; preds = %116
  %121 = trunc i64 %118 to i32
  %122 = load ptr, ptr %110, align 8, !tbaa !16
  %123 = tail call ptr @force_reg(i32 noundef 16, ptr noundef %122) #30
  %124 = shl nuw nsw i32 1, %121
  %125 = zext i32 %124 to i64
  %126 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef %125) #30
  %127 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 52, i32 noundef 16, ptr noundef %123, ptr noundef %126) #30
  store ptr %127, ptr %104, align 8, !tbaa !16
  %128 = load i32, ptr %127, align 8
  %129 = load ptr, ptr %77, align 8, !tbaa !16
  br label %130

130:                                              ; preds = %120, %116, %109, %101
  %131 = phi ptr [ %129, %120 ], [ %102, %116 ], [ %102, %109 ], [ %102, %101 ]
  %132 = phi i32 [ %128, %120 ], [ %106, %116 ], [ %106, %109 ], [ %106, %101 ]
  %133 = phi ptr [ %127, %120 ], [ %105, %116 ], [ %105, %109 ], [ %105, %101 ]
  %134 = phi i32 [ 1, %120 ], [ %103, %116 ], [ %103, %109 ], [ %103, %101 ]
  %135 = and i32 %132, 65535
  %136 = icmp eq i32 %135, 52
  br i1 %136, label %137, label %138

137:                                              ; preds = %130
  store ptr %133, ptr %77, align 8, !tbaa !16
  store ptr %131, ptr %104, align 8, !tbaa !16
  br label %138

138:                                              ; preds = %137, %130
  %139 = phi ptr [ %131, %137 ], [ %133, %130 ]
  %140 = phi ptr [ %133, %137 ], [ %131, %130 ]
  %141 = phi i32 [ 1, %137 ], [ %134, %130 ]
  %142 = load i32, ptr %140, align 8
  %143 = and i32 %142, 65535
  %144 = icmp eq i32 %143, 52
  br i1 %144, label %145, label %157

145:                                              ; preds = %138
  %146 = load i32, ptr %139, align 8
  %147 = and i32 %146, 65535
  %148 = icmp eq i32 %147, 49
  br i1 %148, label %149, label %200

149:                                              ; preds = %145
  %150 = getelementptr inbounds %struct.rtx_def, ptr %139, i64 0, i32 1
  %151 = load ptr, ptr %150, align 8, !tbaa !16
  %152 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 49, i32 noundef 16, ptr noundef nonnull %140, ptr noundef %151) #30
  %153 = load ptr, ptr %104, align 8, !tbaa !16
  %154 = getelementptr inbounds %struct.rtx_def, ptr %153, i64 0, i32 1, i32 0, i32 0, i64 1
  %155 = load ptr, ptr %154, align 8, !tbaa !16
  %156 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 49, i32 noundef 16, ptr noundef %152, ptr noundef %155) #30
  br label %202

157:                                              ; preds = %138
  %158 = load i32, ptr %73, align 8
  %159 = and i32 %158, 65535
  %160 = icmp eq i32 %159, 49
  %161 = icmp eq i32 %143, 49
  %162 = and i1 %161, %160
  br i1 %162, label %163, label %200

163:                                              ; preds = %157
  %164 = getelementptr inbounds %struct.rtx_def, ptr %140, i64 0, i32 1
  %165 = load ptr, ptr %164, align 8, !tbaa !16
  %166 = load i32, ptr %165, align 8
  %167 = and i32 %166, 65535
  %168 = icmp eq i32 %167, 52
  br i1 %168, label %169, label %200

169:                                              ; preds = %163
  %170 = getelementptr inbounds %struct.rtx_def, ptr %140, i64 0, i32 1, i32 0, i32 0, i64 1
  %171 = load ptr, ptr %170, align 8, !tbaa !16
  %172 = load i32, ptr %171, align 8
  %173 = and i32 %172, 65535
  %174 = icmp eq i32 %173, 49
  br i1 %174, label %175, label %200

175:                                              ; preds = %169
  %176 = load i32, ptr %139, align 8
  %177 = and i32 %176, 65535
  %178 = zext i32 %177 to i64
  %179 = getelementptr inbounds [139 x i32], ptr @rtx_class, i64 0, i64 %178
  %180 = load i32, ptr %179, align 4, !tbaa !16
  %181 = icmp eq i32 %180, 9
  br i1 %181, label %182, label %200

182:                                              ; preds = %175
  %183 = icmp eq i32 %177, 30
  %184 = getelementptr inbounds %struct.rtx_def, ptr %171, i64 0, i32 1, i32 0, i32 0, i64 1
  %185 = load ptr, ptr %184, align 8, !tbaa !16
  br i1 %183, label %190, label %186

186:                                              ; preds = %182
  %187 = load i32, ptr %185, align 8
  %188 = and i32 %187, 65535
  %189 = icmp eq i32 %188, 30
  br i1 %189, label %190, label %200

190:                                              ; preds = %182, %186
  %191 = phi ptr [ %185, %186 ], [ %139, %182 ]
  %192 = phi ptr [ %139, %186 ], [ %185, %182 ]
  %193 = getelementptr inbounds %struct.rtx_def, ptr %171, i64 0, i32 1
  %194 = load ptr, ptr %193, align 8, !tbaa !16
  %195 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 49, i32 noundef 16, ptr noundef nonnull %165, ptr noundef %194) #30
  %196 = getelementptr inbounds %struct.rtx_def, ptr %191, i64 0, i32 1
  %197 = load i64, ptr %196, align 8, !tbaa !16
  %198 = tail call ptr @plus_constant(ptr noundef %192, i64 noundef %197) #30
  %199 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 49, i32 noundef 16, ptr noundef %195, ptr noundef %198) #30
  br label %202

200:                                              ; preds = %145, %186, %157, %163, %169, %175
  %201 = icmp eq i32 %141, 0
  br i1 %201, label %210, label %202

202:                                              ; preds = %190, %149, %200
  %203 = phi ptr [ %73, %200 ], [ %199, %190 ], [ %156, %149 ]
  %204 = tail call zeroext i8 @ix86_legitimate_address_p(i32 poison, ptr noundef %203, i8 noundef zeroext 0), !range !66
  %205 = icmp eq i8 %204, 0
  br i1 %205, label %206, label %295

206:                                              ; preds = %202
  %207 = getelementptr inbounds %struct.rtx_def, ptr %203, i64 0, i32 1
  %208 = load ptr, ptr %207, align 8, !tbaa !16
  %209 = load i32, ptr %208, align 8
  br label %210

210:                                              ; preds = %206, %200
  %211 = phi i32 [ %209, %206 ], [ %142, %200 ]
  %212 = phi ptr [ %208, %206 ], [ %140, %200 ]
  %213 = phi ptr [ %203, %206 ], [ %73, %200 ]
  %214 = phi i1 [ false, %206 ], [ true, %200 ]
  %215 = getelementptr inbounds %struct.rtx_def, ptr %213, i64 0, i32 1
  %216 = and i32 %211, 65535
  %217 = icmp eq i32 %216, 52
  br i1 %217, label %224, label %218

218:                                              ; preds = %210
  %219 = getelementptr inbounds %struct.rtx_def, ptr %213, i64 0, i32 1, i32 0, i32 0, i64 1
  %220 = load ptr, ptr %219, align 8, !tbaa !16
  %221 = load i32, ptr %220, align 8
  %222 = and i32 %221, 65535
  %223 = icmp eq i32 %222, 52
  br i1 %223, label %231, label %236

224:                                              ; preds = %210
  %225 = tail call ptr @force_operand(ptr noundef nonnull %212, ptr noundef null) #30
  store ptr %225, ptr %215, align 8, !tbaa !16
  %226 = getelementptr inbounds %struct.rtx_def, ptr %213, i64 0, i32 1, i32 0, i32 0, i64 1
  %227 = load ptr, ptr %226, align 8, !tbaa !16
  %228 = load i32, ptr %227, align 8
  %229 = and i32 %228, 65535
  %230 = icmp eq i32 %229, 52
  br i1 %230, label %231, label %237

231:                                              ; preds = %224, %218
  %232 = phi ptr [ %227, %224 ], [ %220, %218 ]
  %233 = phi ptr [ %226, %224 ], [ %219, %218 ]
  %234 = tail call ptr @force_operand(ptr noundef nonnull %232, ptr noundef null) #30
  store ptr %234, ptr %233, align 8, !tbaa !16
  %235 = load i32, ptr %234, align 8
  br label %237

236:                                              ; preds = %218
  br i1 %214, label %247, label %237

237:                                              ; preds = %224, %231, %236
  %238 = phi i32 [ %235, %231 ], [ %221, %236 ], [ %228, %224 ]
  %239 = phi ptr [ %234, %231 ], [ %220, %236 ], [ %227, %224 ]
  %240 = and i32 %238, 65535
  %241 = icmp eq i32 %240, 37
  br i1 %241, label %242, label %247

242:                                              ; preds = %237
  %243 = load ptr, ptr %215, align 8, !tbaa !16
  %244 = load i32, ptr %243, align 8
  %245 = and i32 %244, 65535
  %246 = icmp eq i32 %245, 37
  br i1 %246, label %295, label %247

247:                                              ; preds = %242, %237, %236
  %248 = phi i32 [ %238, %242 ], [ %238, %237 ], [ %221, %236 ]
  %249 = phi ptr [ %239, %242 ], [ %239, %237 ], [ %220, %236 ]
  %250 = phi i1 [ false, %242 ], [ false, %237 ], [ true, %236 ]
  %251 = load i32, ptr @flag_pic, align 4, !tbaa !20
  %252 = icmp eq i32 %251, 0
  br i1 %252, label %260, label %253

253:                                              ; preds = %247
  %254 = trunc i32 %248 to i16
  switch i16 %254, label %260 [
    i16 45, label %258
    i16 44, label %258
    i16 35, label %255
  ]

255:                                              ; preds = %253
  %256 = tail call i32 @symbolic_reference_mentioned_p(ptr noundef nonnull %249)
  %257 = icmp eq i32 %256, 0
  br i1 %257, label %260, label %258

258:                                              ; preds = %255, %253, %253
  %259 = tail call fastcc ptr @legitimize_pic_address(ptr noundef nonnull %213, ptr noundef null)
  br label %261

260:                                              ; preds = %253, %255, %247
  br i1 %250, label %265, label %261

261:                                              ; preds = %258, %260
  %262 = phi ptr [ %259, %258 ], [ %213, %260 ]
  %263 = tail call zeroext i8 @ix86_legitimate_address_p(i32 poison, ptr noundef %262, i8 noundef zeroext 0), !range !66
  %264 = icmp eq i8 %263, 0
  br i1 %264, label %265, label %295

265:                                              ; preds = %261, %260
  %266 = phi ptr [ %262, %261 ], [ %213, %260 ]
  %267 = getelementptr inbounds %struct.rtx_def, ptr %266, i64 0, i32 1
  %268 = load ptr, ptr %267, align 8, !tbaa !16
  %269 = load i32, ptr %268, align 8
  %270 = and i32 %269, 65535
  %271 = icmp eq i32 %270, 37
  br i1 %271, label %272, label %281

272:                                              ; preds = %265
  %273 = tail call ptr @gen_reg_rtx(i32 noundef 16) #30
  %274 = getelementptr inbounds %struct.rtx_def, ptr %266, i64 0, i32 1, i32 0, i32 0, i64 1
  %275 = load ptr, ptr %274, align 8, !tbaa !16
  %276 = tail call ptr @force_operand(ptr noundef %275, ptr noundef %273) #30
  %277 = icmp eq ptr %276, %273
  br i1 %277, label %280, label %278

278:                                              ; preds = %272
  %279 = tail call ptr @emit_move_insn(ptr noundef %273, ptr noundef %276) #30
  br label %280

280:                                              ; preds = %278, %272
  store ptr %273, ptr %274, align 8, !tbaa !16
  br label %295

281:                                              ; preds = %265
  %282 = getelementptr inbounds %struct.rtx_def, ptr %266, i64 0, i32 1, i32 0, i32 0, i64 1
  %283 = load ptr, ptr %282, align 8, !tbaa !16
  %284 = load i32, ptr %283, align 8
  %285 = and i32 %284, 65535
  %286 = icmp eq i32 %285, 37
  br i1 %286, label %287, label %295

287:                                              ; preds = %281
  %288 = tail call ptr @gen_reg_rtx(i32 noundef 16) #30
  %289 = load ptr, ptr %267, align 8, !tbaa !16
  %290 = tail call ptr @force_operand(ptr noundef %289, ptr noundef %288) #30
  %291 = icmp eq ptr %290, %288
  br i1 %291, label %294, label %292

292:                                              ; preds = %287
  %293 = tail call ptr @emit_move_insn(ptr noundef %288, ptr noundef %290) #30
  br label %294

294:                                              ; preds = %292, %287
  store ptr %288, ptr %267, align 8, !tbaa !16
  br label %295

295:                                              ; preds = %70, %281, %261, %242, %202, %294, %280, %46, %33, %13
  %296 = phi ptr [ %14, %13 ], [ %38, %33 ], [ %47, %46 ], [ %266, %280 ], [ %266, %294 ], [ %203, %202 ], [ %213, %242 ], [ %262, %261 ], [ %266, %281 ], [ %73, %70 ]
  ret ptr %296
}

declare zeroext i8 @hook_bool_mode_const_rtx_true(i32 noundef, ptr noundef) #3

declare zeroext i8 @default_use_anchors_for_symbol_p(ptr noundef) #3

; Function Attrs: nounwind sspstrong uwtable
define internal zeroext i8 @ix86_function_ok_for_sibcall(ptr noundef %0, ptr nocapture noundef readonly %1) #9 {
  %3 = load i32, ptr @flag_pic, align 4, !tbaa !20
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %11, label %5

5:                                                ; preds = %2
  %6 = icmp eq ptr %0, null
  br i1 %6, label %187, label %7

7:                                                ; preds = %5
  %8 = load ptr, ptr getelementptr inbounds (%struct.gcc_target, ptr @targetm, i64 0, i32 49), align 8, !tbaa !323
  %9 = tail call zeroext i8 %8(ptr noundef nonnull %0) #30
  %10 = icmp eq i8 %9, 0
  br i1 %10, label %187, label %11

11:                                               ; preds = %7, %2
  %12 = load i32, ptr @ix86_user_incoming_stack_boundary, align 4, !tbaa !20
  %13 = icmp eq i32 %12, 0
  %14 = load i32, ptr @ix86_default_incoming_stack_boundary, align 4
  %15 = select i1 %13, i32 %14, i32 %12
  %16 = icmp ugt i32 %15, 32
  br i1 %16, label %17, label %26

17:                                               ; preds = %11
  %18 = load ptr, ptr @current_function_decl, align 8, !tbaa !5
  %19 = getelementptr inbounds %struct.tree_common, ptr %18, i64 0, i32 2
  %20 = load ptr, ptr %19, align 8, !tbaa !16
  %21 = getelementptr inbounds %struct.tree_type, ptr %20, i64 0, i32 4
  %22 = load ptr, ptr %21, align 8, !tbaa !16
  %23 = tail call ptr @lookup_attribute(ptr noundef nonnull @ix86_force_align_arg_pointer_string, ptr noundef %22) #30
  %24 = icmp eq ptr %23, null
  %25 = select i1 %24, i32 %15, i32 32
  br label %26

26:                                               ; preds = %17, %11
  %27 = phi i32 [ %15, %11 ], [ %25, %17 ]
  %28 = load i32, ptr getelementptr inbounds (%struct.rtl_data, ptr @x_rtl, i64 0, i32 24), align 4, !tbaa !360
  %29 = tail call i32 @llvm.umax.i32(i32 %27, i32 %28)
  %30 = icmp ugt i32 %29, 32
  br i1 %30, label %31, label %48

31:                                               ; preds = %26
  %32 = load ptr, ptr @current_function_decl, align 8, !tbaa !5
  %33 = getelementptr inbounds %struct.tree_decl_minimal, ptr %32, i64 0, i32 3
  %34 = load ptr, ptr %33, align 8, !tbaa !16
  %35 = icmp ne ptr %34, null
  %36 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 56), align 16
  %37 = icmp eq ptr %34, %36
  %38 = select i1 %35, i1 %37, i1 false
  br i1 %38, label %39, label %48

39:                                               ; preds = %31
  %40 = getelementptr inbounds %struct.tree_decl_minimal, ptr %32, i64 0, i32 4
  %41 = load ptr, ptr %40, align 8, !tbaa !16
  %42 = icmp eq ptr %41, null
  br i1 %42, label %47, label %43

43:                                               ; preds = %39
  %44 = load i64, ptr %41, align 8
  %45 = and i64 %44, 65535
  %46 = icmp eq i64 %45, 40
  br i1 %46, label %47, label %48

47:                                               ; preds = %43, %39
  br label %48

48:                                               ; preds = %26, %31, %43, %47
  %49 = phi i32 [ 32, %47 ], [ %29, %43 ], [ %29, %31 ], [ %29, %26 ]
  %50 = load i32, ptr @ix86_preferred_stack_boundary, align 4, !tbaa !20
  %51 = icmp ult i32 %49, %50
  br i1 %51, label %187, label %52

52:                                               ; preds = %48
  %53 = icmp eq ptr %0, null
  br i1 %53, label %57, label %54

54:                                               ; preds = %52
  %55 = getelementptr inbounds %struct.tree_common, ptr %0, i64 0, i32 2
  %56 = load ptr, ptr %55, align 8, !tbaa !16
  br label %64

57:                                               ; preds = %52
  %58 = getelementptr inbounds %struct.tree_exp, ptr %1, i64 1
  %59 = load ptr, ptr %58, align 8, !tbaa !16
  %60 = getelementptr inbounds %struct.tree_common, ptr %59, i64 0, i32 2
  %61 = load ptr, ptr %60, align 8, !tbaa !16
  %62 = getelementptr inbounds %struct.tree_common, ptr %61, i64 0, i32 2
  %63 = load ptr, ptr %62, align 8, !tbaa !16
  br label %64

64:                                               ; preds = %57, %54
  %65 = phi ptr [ %0, %54 ], [ %63, %57 ]
  %66 = phi ptr [ %56, %54 ], [ %63, %57 ]
  %67 = getelementptr inbounds %struct.tree_common, ptr %1, i64 0, i32 2
  %68 = load ptr, ptr %67, align 8, !tbaa !16
  %69 = load i64, ptr %68, align 8
  %70 = and i64 %69, 65535
  %71 = icmp eq i64 %70, 14
  br i1 %71, label %72, label %74

72:                                               ; preds = %64
  %73 = tail call i32 @vector_type_mode(ptr noundef nonnull %68) #30
  br label %79

74:                                               ; preds = %64
  %75 = getelementptr inbounds %struct.tree_type, ptr %68, i64 0, i32 6
  %76 = load i32, ptr %75, align 4
  %77 = lshr i32 %76, 16
  %78 = and i32 %77, 255
  br label %79

79:                                               ; preds = %74, %72
  %80 = phi i32 [ %73, %72 ], [ %78, %74 ]
  %81 = tail call fastcc i32 @type_natural_mode(ptr noundef nonnull %68, ptr noundef null)
  %82 = icmp eq ptr %65, null
  br i1 %82, label %93, label %83

83:                                               ; preds = %79
  %84 = load i64, ptr %65, align 8
  %85 = and i64 %84, 65535
  %86 = getelementptr inbounds [0 x i32], ptr @tree_code_type, i64 0, i64 %85
  %87 = load i32, ptr %86, align 4, !tbaa !16
  %88 = icmp eq i32 %87, 3
  br i1 %88, label %89, label %93

89:                                               ; preds = %83
  %90 = getelementptr inbounds %struct.tree_common, ptr %65, i64 0, i32 2
  %91 = load ptr, ptr %90, align 8, !tbaa !16
  %92 = tail call fastcc ptr @function_value_32(i32 noundef %80, i32 noundef %81, ptr noundef %91, ptr noundef nonnull %65)
  br label %95

93:                                               ; preds = %83, %79
  %94 = tail call fastcc ptr @function_value_32(i32 noundef %80, i32 noundef %81, ptr noundef %65, ptr noundef null)
  br label %95

95:                                               ; preds = %89, %93
  %96 = phi ptr [ %92, %89 ], [ %94, %93 ]
  %97 = load ptr, ptr @cfun, align 8, !tbaa !5
  %98 = getelementptr inbounds %struct.function, ptr %97, i64 0, i32 6
  %99 = load ptr, ptr %98, align 8, !tbaa !148
  %100 = getelementptr inbounds %struct.tree_decl_non_common, ptr %99, i64 0, i32 3
  %101 = load ptr, ptr %100, align 8, !tbaa !16
  %102 = getelementptr inbounds %struct.tree_common, ptr %101, i64 0, i32 2
  %103 = load ptr, ptr %102, align 8, !tbaa !16
  %104 = load i64, ptr %103, align 8
  %105 = and i64 %104, 65535
  %106 = icmp eq i64 %105, 14
  br i1 %106, label %107, label %109

107:                                              ; preds = %95
  %108 = tail call i32 @vector_type_mode(ptr noundef nonnull %103) #30
  br label %114

109:                                              ; preds = %95
  %110 = getelementptr inbounds %struct.tree_type, ptr %103, i64 0, i32 6
  %111 = load i32, ptr %110, align 4
  %112 = lshr i32 %111, 16
  %113 = and i32 %112, 255
  br label %114

114:                                              ; preds = %107, %109
  %115 = phi i32 [ %108, %107 ], [ %113, %109 ]
  %116 = tail call fastcc i32 @type_natural_mode(ptr noundef nonnull %103, ptr noundef null)
  %117 = load i64, ptr %99, align 8
  %118 = and i64 %117, 65535
  %119 = getelementptr inbounds [0 x i32], ptr @tree_code_type, i64 0, i64 %118
  %120 = load i32, ptr %119, align 4, !tbaa !16
  %121 = icmp eq i32 %120, 3
  br i1 %121, label %122, label %126

122:                                              ; preds = %114
  %123 = getelementptr inbounds %struct.tree_common, ptr %99, i64 0, i32 2
  %124 = load ptr, ptr %123, align 8, !tbaa !16
  %125 = tail call fastcc ptr @function_value_32(i32 noundef %115, i32 noundef %116, ptr noundef %124, ptr noundef nonnull %99)
  br label %128

126:                                              ; preds = %114
  %127 = tail call fastcc ptr @function_value_32(i32 noundef %115, i32 noundef %116, ptr noundef nonnull %99, ptr noundef null)
  br label %128

128:                                              ; preds = %122, %126
  %129 = phi ptr [ %125, %122 ], [ %127, %126 ]
  %130 = load i32, ptr %96, align 8
  %131 = and i32 %130, 65535
  %132 = icmp eq i32 %131, 37
  br i1 %132, label %133, label %138

133:                                              ; preds = %128
  %134 = getelementptr i8, ptr %96, i64 8
  %135 = load i32, ptr %134, align 8, !tbaa !16
  %136 = and i32 %135, -8
  %137 = icmp eq i32 %136, 8
  br i1 %137, label %147, label %138

138:                                              ; preds = %133, %128
  %139 = load i32, ptr %129, align 8
  %140 = and i32 %139, 65535
  %141 = icmp eq i32 %140, 37
  br i1 %141, label %142, label %150

142:                                              ; preds = %138
  %143 = getelementptr i8, ptr %129, i64 8
  %144 = load i32, ptr %143, align 8, !tbaa !16
  %145 = and i32 %144, -8
  %146 = icmp eq i32 %145, 8
  br i1 %146, label %147, label %150

147:                                              ; preds = %142, %133
  %148 = tail call i32 @rtx_equal_p(ptr noundef nonnull %96, ptr noundef %129) #30
  %149 = icmp eq i32 %148, 0
  br i1 %149, label %187, label %164

150:                                              ; preds = %142, %138
  %151 = load ptr, ptr @cfun, align 8, !tbaa !5
  %152 = getelementptr inbounds %struct.function, ptr %151, i64 0, i32 6
  %153 = load ptr, ptr %152, align 8, !tbaa !148
  %154 = getelementptr inbounds %struct.tree_decl_non_common, ptr %153, i64 0, i32 3
  %155 = load ptr, ptr %154, align 8, !tbaa !16
  %156 = getelementptr inbounds %struct.tree_common, ptr %155, i64 0, i32 2
  %157 = load ptr, ptr %156, align 8, !tbaa !16
  %158 = load i64, ptr %157, align 8
  %159 = and i64 %158, 65535
  %160 = icmp eq i64 %159, 19
  br i1 %160, label %164, label %161

161:                                              ; preds = %150
  %162 = tail call i32 @rtx_equal_p(ptr noundef nonnull %96, ptr noundef nonnull %129) #30
  %163 = icmp eq i32 %162, 0
  br i1 %163, label %187, label %164

164:                                              ; preds = %150, %161, %147
  br i1 %53, label %165, label %186

165:                                              ; preds = %164
  %166 = load i32, ptr @ix86_regparm, align 4, !tbaa !20
  %167 = getelementptr inbounds %struct.tree_type, ptr %66, i64 0, i32 4
  %168 = load ptr, ptr %167, align 8, !tbaa !16
  %169 = tail call ptr @lookup_attribute(ptr noundef nonnull @.str.324, ptr noundef %168) #30
  %170 = icmp eq ptr %169, null
  br i1 %170, label %179, label %171

171:                                              ; preds = %165
  %172 = getelementptr inbounds %struct.tree_list, ptr %169, i64 0, i32 2
  %173 = load ptr, ptr %172, align 8, !tbaa !16
  %174 = getelementptr inbounds %struct.tree_list, ptr %173, i64 0, i32 2
  %175 = load ptr, ptr %174, align 8, !tbaa !16
  %176 = getelementptr inbounds %struct.tree_int_cst, ptr %175, i64 0, i32 1
  %177 = load i64, ptr %176, align 8, !tbaa !16
  %178 = trunc i64 %177 to i32
  br label %183

179:                                              ; preds = %165
  %180 = load ptr, ptr %167, align 8, !tbaa !16
  %181 = tail call ptr @lookup_attribute(ptr noundef nonnull @.str.128, ptr noundef %180) #30
  %182 = icmp eq ptr %181, null
  br i1 %182, label %183, label %186

183:                                              ; preds = %179, %171
  %184 = phi i32 [ %178, %171 ], [ %166, %179 ]
  %185 = icmp sgt i32 %184, 2
  br i1 %185, label %187, label %186

186:                                              ; preds = %179, %183, %164
  br label %187

187:                                              ; preds = %183, %161, %147, %48, %5, %7, %186
  %188 = phi i8 [ 1, %186 ], [ 0, %7 ], [ 0, %5 ], [ 0, %48 ], [ 0, %147 ], [ 0, %161 ], [ 0, %183 ]
  ret i8 %188
}

; Function Attrs: nounwind sspstrong uwtable
define internal void @ix86_set_current_function(ptr noundef %0) #9 {
  %2 = icmp eq ptr %0, null
  br i1 %2, label %25, label %3

3:                                                ; preds = %1
  %4 = load ptr, ptr @ix86_previous_fndecl, align 8, !tbaa !5
  %5 = icmp eq ptr %4, %0
  br i1 %5, label %25, label %6

6:                                                ; preds = %3
  %7 = icmp eq ptr %4, null
  br i1 %7, label %11, label %8

8:                                                ; preds = %6
  %9 = getelementptr inbounds %struct.tree_function_decl, ptr %4, i64 0, i32 3
  %10 = load ptr, ptr %9, align 8, !tbaa !16
  br label %11

11:                                               ; preds = %8, %6
  %12 = phi ptr [ %10, %8 ], [ null, %6 ]
  %13 = getelementptr inbounds %struct.tree_function_decl, ptr %0, i64 0, i32 3
  %14 = load ptr, ptr %13, align 8, !tbaa !16
  store ptr %0, ptr @ix86_previous_fndecl, align 8, !tbaa !5
  %15 = icmp eq ptr %12, %14
  br i1 %15, label %25, label %16

16:                                               ; preds = %11
  %17 = icmp eq ptr %14, null
  br i1 %17, label %18, label %22

18:                                               ; preds = %16
  %19 = icmp eq ptr %12, null
  br i1 %19, label %25, label %20

20:                                               ; preds = %18
  %21 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 128), align 16, !tbaa !5
  br label %22

22:                                               ; preds = %16, %20
  %23 = phi ptr [ %21, %20 ], [ %14, %16 ]
  %24 = getelementptr inbounds %struct.tree_target_option, ptr %23, i64 0, i32 1
  tail call void @cl_target_option_restore(ptr noundef nonnull %24) #30
  tail call void @target_reinit() #30
  br label %25

25:                                               ; preds = %22, %11, %18, %3, %1
  ret void
}

declare zeroext i8 @default_binds_local_p(ptr noundef) #3

declare ptr @default_mangle_decl_assembler_name(ptr noundef, ptr noundef) #3

; Function Attrs: nounwind sspstrong uwtable
define internal void @ix86_encode_section_info(ptr noundef %0, ptr noundef %1, i32 noundef %2) #9 {
  tail call void @default_encode_section_info(ptr noundef %0, ptr noundef %1, i32 noundef %2) #30
  %4 = load i64, ptr %0, align 8
  %5 = and i64 %4, 65535
  %6 = icmp eq i64 %5, 32
  br i1 %6, label %7, label %45

7:                                                ; preds = %3
  %8 = and i64 %4, 67108864
  %9 = icmp eq i64 %8, 0
  br i1 %9, label %10, label %15

10:                                               ; preds = %7
  %11 = getelementptr inbounds %struct.tree_decl_common, ptr %0, i64 0, i32 2
  %12 = load i64, ptr %11, align 8
  %13 = and i64 %12, 33554432
  %14 = icmp eq i64 %13, 0
  br i1 %14, label %45, label %15

15:                                               ; preds = %10, %7
  %16 = load i32, ptr @ix86_cmodel, align 4
  switch i32 %16, label %45 [
    i32 6, label %17
    i32 3, label %17
  ]

17:                                               ; preds = %15, %15
  %18 = trunc i64 %4 to i16
  switch i16 %18, label %27 [
    i16 29, label %45
    i16 32, label %19
  ]

19:                                               ; preds = %17
  %20 = getelementptr inbounds %struct.tree_decl_with_vis, ptr %0, i64 0, i32 2
  %21 = load ptr, ptr %20, align 8, !tbaa !16
  %22 = icmp eq ptr %21, null
  br i1 %22, label %27, label %23

23:                                               ; preds = %19
  %24 = getelementptr inbounds %struct.tree_string, ptr %21, i64 0, i32 2
  %25 = tail call i32 @strcmp(ptr noundef nonnull dereferenceable(1) %24, ptr noundef nonnull dereferenceable(7) @.str.1349)
  %26 = icmp eq i32 %25, 0
  br i1 %26, label %39, label %36

27:                                               ; preds = %19, %17
  %28 = getelementptr inbounds %struct.tree_common, ptr %0, i64 0, i32 2
  %29 = load ptr, ptr %28, align 8, !tbaa !16
  %30 = tail call i64 @int_size_in_bytes(ptr noundef %29) #30
  %31 = icmp eq i64 %30, 0
  %32 = load i32, ptr @ix86_section_threshold, align 4
  %33 = sext i32 %32 to i64
  %34 = icmp sgt i64 %30, %33
  %35 = select i1 %31, i1 true, i1 %34
  br i1 %35, label %39, label %45

36:                                               ; preds = %23
  %37 = tail call i32 @strcmp(ptr noundef nonnull dereferenceable(1) %24, ptr noundef nonnull dereferenceable(6) @.str.115)
  %38 = icmp eq i32 %37, 0
  br i1 %38, label %39, label %45

39:                                               ; preds = %27, %23, %36
  %40 = getelementptr inbounds %struct.rtx_def, ptr %1, i64 0, i32 1
  %41 = load ptr, ptr %40, align 8, !tbaa !16
  %42 = getelementptr inbounds %struct.rtx_def, ptr %41, i64 0, i32 1, i32 0, i32 0, i64 1
  %43 = load i32, ptr %42, align 8, !tbaa !16
  %44 = or i32 %43, 512
  store i32 %44, ptr %42, align 8, !tbaa !16
  br label %45

45:                                               ; preds = %27, %17, %15, %39, %36, %10, %3
  ret void
}

declare ptr @default_strip_name_encoding(ptr noundef) #3

declare i64 @default_shift_truncation_mask(i32 noundef) #3

declare i32 @default_min_divisions_for_recip_mul(i32 noundef) #3

declare i32 @default_mode_rep_extended(i32 noundef, i32 noundef) #3

declare zeroext i8 @default_valid_pointer_mode(i32 noundef) #3

declare i32 @default_addr_space_pointer_mode(i8 noundef zeroext) #3

declare i32 @default_addr_space_address_mode(i8 noundef zeroext) #3

declare zeroext i8 @default_addr_space_valid_pointer_mode(i32 noundef, i8 noundef zeroext) #3

declare zeroext i8 @default_addr_space_legitimate_address_p(i32 noundef, ptr noundef, i8 noundef zeroext, i8 noundef zeroext) #3

declare ptr @default_addr_space_legitimize_address(ptr noundef, ptr noundef, i32 noundef, i8 noundef zeroext) #3

declare zeroext i8 @default_addr_space_subset_p(i8 noundef zeroext, i8 noundef zeroext) #3

declare ptr @default_addr_space_convert(ptr noundef, ptr noundef, ptr noundef) #3

; Function Attrs: nounwind sspstrong uwtable
define internal zeroext i8 @ix86_scalar_mode_supported_p(i32 noundef %0) #9 {
  %2 = zext i32 %0 to i64
  %3 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %2
  %4 = load i8, ptr %3, align 1, !tbaa !16
  %5 = icmp eq i8 %4, 9
  br i1 %5, label %6, label %8

6:                                                ; preds = %1
  %7 = tail call zeroext i8 @default_decimal_float_supported_p() #30
  br label %12

8:                                                ; preds = %1
  %9 = icmp eq i32 %0, 41
  br i1 %9, label %12, label %10

10:                                               ; preds = %8
  %11 = tail call zeroext i8 @default_scalar_mode_supported_p(i32 noundef %0) #30
  br label %12

12:                                               ; preds = %8, %10, %6
  %13 = phi i8 [ %7, %6 ], [ %11, %10 ], [ 1, %8 ]
  ret i8 %13
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind sspstrong willreturn memory(read, argmem: none, inaccessiblemem: none) uwtable
define internal zeroext i8 @ix86_vector_mode_supported_p(i32 noundef %0) #16 {
  %2 = load i32, ptr @ix86_isa_flags, align 4, !tbaa !20
  %3 = and i32 %2, 65536
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %6, label %5

5:                                                ; preds = %1
  switch i32 %0, label %6 [
    i32 79, label %33
    i32 67, label %33
    i32 65, label %33
    i32 41, label %33
    i32 38, label %33
    i32 18, label %33
  ]

6:                                                ; preds = %5, %1
  %7 = and i32 %2, 131072
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %10, label %9

9:                                                ; preds = %6
  switch i32 %0, label %10 [
    i32 80, label %33
    i32 66, label %33
    i32 64, label %33
    i32 63, label %33
    i32 39, label %33
  ]

10:                                               ; preds = %9, %6
  %11 = and i32 %2, 32
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %16, label %13

13:                                               ; preds = %10
  %14 = add i32 %0, -68
  %15 = icmp ult i32 %14, 15
  br i1 %15, label %28, label %16

16:                                               ; preds = %28, %13, %10
  %17 = and i32 %2, 2048
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %20, label %19

19:                                               ; preds = %16
  switch i32 %0, label %20 [
    i32 62, label %33
    i32 61, label %33
    i32 60, label %33
    i32 59, label %33
    i32 17, label %33
    i32 16, label %33
  ]

20:                                               ; preds = %19, %16
  %21 = and i32 %2, 1
  %22 = icmp eq i32 %21, 0
  br i1 %22, label %33, label %23

23:                                               ; preds = %20
  %24 = icmp eq i32 %0, 78
  %25 = icmp eq i32 %0, 38
  %26 = or i1 %24, %25
  %27 = zext i1 %26 to i8
  br label %33

28:                                               ; preds = %13
  %29 = trunc i32 %14 to i16
  %30 = lshr i16 24591, %29
  %31 = and i16 %30, 1
  %32 = icmp eq i16 %31, 0
  br i1 %32, label %16, label %33

33:                                               ; preds = %28, %20, %23, %19, %19, %19, %19, %19, %19, %9, %9, %9, %9, %9, %5, %5, %5, %5, %5, %5
  %34 = phi i8 [ 1, %5 ], [ 1, %5 ], [ 1, %5 ], [ 1, %5 ], [ 1, %5 ], [ 1, %5 ], [ 1, %9 ], [ 1, %9 ], [ 1, %9 ], [ 1, %9 ], [ 1, %9 ], [ 1, %19 ], [ 1, %19 ], [ 1, %19 ], [ 1, %19 ], [ 1, %19 ], [ 1, %19 ], [ %27, %23 ], [ 0, %20 ], [ 1, %28 ]
  ret i8 %34
}

; Function Attrs: nounwind sspstrong uwtable
define internal zeroext i8 @ix86_rtx_costs(ptr noundef %0, i32 noundef %1, i32 noundef %2, ptr nocapture noundef %3, i8 noundef zeroext %4) #9 {
  %6 = load i32, ptr %0, align 8
  %7 = lshr i32 %6, 16
  %8 = and i32 %7, 255
  %9 = icmp eq i8 %4, 0
  %10 = load ptr, ptr @ix86_cost, align 8
  %11 = select i1 %9, ptr @ix86_size_cost, ptr %10
  switch i32 %1, label %615 [
    i32 30, label %12
    i32 35, label %12
    i32 44, label %12
    i32 45, label %12
    i32 32, label %21
    i32 99, label %35
    i32 98, label %41
    i32 65, label %44
    i32 66, label %71
    i32 67, label %71
    i32 68, label %71
    i32 69, label %71
    i32 52, label %110
    i32 55, label %234
    i32 59, label %234
    i32 58, label %234
    i32 60, label %234
    i32 49, label %281
    i32 50, label %384
    i32 61, label %421
    i32 62, label %421
    i32 63, label %421
    i32 51, label %446
    i32 64, label %483
    i32 48, label %488
    i32 101, label %519
    i32 111, label %534
    i32 112, label %571
    i32 18, label %608
    i32 124, label %612
    i32 125, label %612
    i32 123, label %612
    i32 126, label %612
  ]

12:                                               ; preds = %5, %5, %5, %5
  %13 = load i32, ptr @flag_pic, align 4, !tbaa !20
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %20, label %15

15:                                               ; preds = %12
  %16 = trunc i32 %6 to i16
  switch i16 %16, label %20 [
    i16 45, label %612
    i16 44, label %612
    i16 35, label %17
  ]

17:                                               ; preds = %15
  %18 = tail call i32 @symbolic_reference_mentioned_p(ptr noundef nonnull %0)
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %20, label %612

20:                                               ; preds = %15, %17, %12
  br label %612

21:                                               ; preds = %5
  %22 = icmp eq i32 %8, 0
  br i1 %22, label %612, label %23

23:                                               ; preds = %21
  %24 = tail call i32 @standard_80387_constant_p(ptr noundef nonnull %0)
  switch i32 %24, label %25 [
    i32 1, label %612
    i32 0, label %26
    i32 -1, label %26
  ]

25:                                               ; preds = %23
  br label %612

26:                                               ; preds = %23, %23
  %27 = load i32, ptr @flag_pic, align 4, !tbaa !20
  %28 = icmp eq i32 %27, 0
  %29 = select i1 %28, i32 4, i32 5
  %30 = icmp eq i32 %8, 38
  %31 = icmp eq i32 %8, 39
  %32 = select i1 %31, i32 1, i32 2
  %33 = select i1 %30, i32 0, i32 %32
  %34 = add nuw nsw i32 %29, %33
  br label %612

35:                                               ; preds = %5
  %36 = load i8, ptr getelementptr inbounds ([62 x i8], ptr @ix86_tune_features, i64 0, i64 2), align 2, !tbaa !16
  %37 = icmp eq i8 %36, 0
  %38 = getelementptr inbounds %struct.processor_costs, ptr %11, i64 0, i32 8
  %39 = select i1 %37, ptr %38, ptr %11
  %40 = load i32, ptr %39, align 4, !tbaa !20
  br label %612

41:                                               ; preds = %5
  %42 = getelementptr inbounds %struct.processor_costs, ptr %11, i64 0, i32 7
  %43 = load i32, ptr %42, align 4, !tbaa !361
  br label %612

44:                                               ; preds = %5
  %45 = getelementptr inbounds %struct.rtx_def, ptr %0, i64 0, i32 1, i32 0, i32 0, i64 1
  %46 = load ptr, ptr %45, align 8, !tbaa !16
  %47 = load i32, ptr %46, align 8
  %48 = and i32 %47, 65535
  %49 = icmp eq i32 %48, 30
  br i1 %49, label %50, label %71

50:                                               ; preds = %44
  %51 = getelementptr inbounds %struct.rtx_def, ptr %0, i64 0, i32 1
  %52 = load ptr, ptr %51, align 8, !tbaa !16
  %53 = load i32, ptr %52, align 8
  %54 = and i32 %53, 16711680
  %55 = icmp eq i32 %54, 1114112
  br i1 %55, label %71, label %56

56:                                               ; preds = %50
  %57 = getelementptr inbounds %struct.rtx_def, ptr %46, i64 0, i32 1
  %58 = load i64, ptr %57, align 8, !tbaa !16
  %59 = icmp eq i64 %58, 1
  br i1 %59, label %60, label %62

60:                                               ; preds = %56
  %61 = load i32, ptr %11, align 4, !tbaa !248
  br label %612

62:                                               ; preds = %56
  %63 = and i64 %58, -2
  %64 = icmp eq i64 %63, 2
  br i1 %64, label %65, label %71

65:                                               ; preds = %62
  %66 = getelementptr inbounds %struct.processor_costs, ptr %11, i64 0, i32 1
  %67 = load i32, ptr %66, align 4, !tbaa !362
  %68 = getelementptr inbounds %struct.processor_costs, ptr %11, i64 0, i32 3
  %69 = load i32, ptr %68, align 4, !tbaa !249
  %70 = icmp sgt i32 %67, %69
  br i1 %70, label %71, label %612

71:                                               ; preds = %62, %65, %44, %50, %5, %5, %5, %5
  %72 = getelementptr inbounds %struct.rtx_def, ptr %0, i64 0, i32 1
  %73 = load ptr, ptr %72, align 8, !tbaa !16
  %74 = load i32, ptr %73, align 8
  %75 = and i32 %74, 16711680
  %76 = icmp eq i32 %75, 1114112
  %77 = getelementptr inbounds %struct.rtx_def, ptr %0, i64 0, i32 1, i32 0, i32 0, i64 1
  %78 = load ptr, ptr %77, align 8, !tbaa !16
  %79 = load i32, ptr %78, align 8
  br i1 %76, label %80, label %101

80:                                               ; preds = %71
  %81 = trunc i32 %79 to i16
  switch i16 %81, label %96 [
    i16 30, label %82
    i16 61, label %92
  ]

82:                                               ; preds = %80
  %83 = getelementptr inbounds %struct.rtx_def, ptr %78, i64 0, i32 1
  %84 = load i64, ptr %83, align 8, !tbaa !16
  %85 = icmp sgt i64 %84, 32
  %86 = getelementptr inbounds %struct.processor_costs, ptr %11, i64 0, i32 3
  %87 = load i32, ptr %86, align 4, !tbaa !249
  br i1 %85, label %88, label %90

88:                                               ; preds = %82
  %89 = add nsw i32 %87, 8
  br label %612

90:                                               ; preds = %82
  %91 = shl nsw i32 %87, 1
  br label %612

92:                                               ; preds = %80
  %93 = getelementptr inbounds %struct.processor_costs, ptr %11, i64 0, i32 2
  %94 = load i32, ptr %93, align 4, !tbaa !363
  %95 = shl nsw i32 %94, 1
  br label %612

96:                                               ; preds = %80
  %97 = getelementptr inbounds %struct.processor_costs, ptr %11, i64 0, i32 2
  %98 = load i32, ptr %97, align 4, !tbaa !363
  %99 = mul nsw i32 %98, 6
  %100 = add nsw i32 %99, 8
  br label %612

101:                                              ; preds = %71
  %102 = and i32 %79, 65535
  %103 = icmp eq i32 %102, 30
  br i1 %103, label %104, label %107

104:                                              ; preds = %101
  %105 = getelementptr inbounds %struct.processor_costs, ptr %11, i64 0, i32 3
  %106 = load i32, ptr %105, align 4, !tbaa !249
  br label %612

107:                                              ; preds = %101
  %108 = getelementptr inbounds %struct.processor_costs, ptr %11, i64 0, i32 2
  %109 = load i32, ptr %108, align 4, !tbaa !363
  br label %612

110:                                              ; preds = %5
  %111 = load i32, ptr @ix86_isa_flags, align 4, !tbaa !20
  %112 = and i32 %111, 65536
  %113 = icmp ne i32 %112, 0
  %114 = icmp eq i32 %8, 38
  %115 = select i1 %113, i1 %114, i1 false
  br i1 %115, label %121, label %116

116:                                              ; preds = %110
  %117 = and i32 %111, 131072
  %118 = icmp ne i32 %117, 0
  %119 = icmp eq i32 %8, 39
  %120 = select i1 %118, i1 %119, i1 false
  br i1 %120, label %121, label %128

121:                                              ; preds = %116, %110
  %122 = load i32, ptr @ix86_fpmath, align 4, !tbaa !16
  %123 = and i32 %122, 2
  %124 = icmp eq i32 %123, 0
  br i1 %124, label %128, label %125

125:                                              ; preds = %121
  %126 = getelementptr inbounds %struct.processor_costs, ptr %11, i64 0, i32 30
  %127 = load i32, ptr %126, align 4, !tbaa !364
  br label %612

128:                                              ; preds = %121, %116
  %129 = load i32, ptr @target_flags, align 4, !tbaa !20
  %130 = and i32 %129, 2
  %131 = icmp eq i32 %130, 0
  br i1 %131, label %140, label %132

132:                                              ; preds = %128
  %133 = and i32 %6, 16646144
  %134 = icmp eq i32 %133, 2490368
  %135 = icmp eq i32 %8, 40
  %136 = select i1 %134, i1 true, i1 %135
  br i1 %136, label %137, label %140

137:                                              ; preds = %132
  %138 = getelementptr inbounds %struct.processor_costs, ptr %11, i64 0, i32 30
  %139 = load i32, ptr %138, align 4, !tbaa !364
  br label %612

140:                                              ; preds = %132, %128
  %141 = zext i32 %8 to i64
  %142 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %141
  %143 = load i8, ptr %142, align 1, !tbaa !16
  switch i8 %143, label %147 [
    i8 8, label %144
    i8 9, label %144
    i8 11, label %144
    i8 17, label %144
  ]

144:                                              ; preds = %140, %140, %140, %140
  %145 = getelementptr inbounds %struct.processor_costs, ptr %11, i64 0, i32 30
  %146 = load i32, ptr %145, align 4, !tbaa !364
  br label %612

147:                                              ; preds = %140
  %148 = getelementptr inbounds %struct.rtx_def, ptr %0, i64 0, i32 1
  %149 = load ptr, ptr %148, align 8, !tbaa !16
  %150 = getelementptr inbounds %struct.rtx_def, ptr %0, i64 0, i32 1, i32 0, i32 0, i64 1
  %151 = load ptr, ptr %150, align 8, !tbaa !16
  %152 = load i32, ptr %151, align 8
  %153 = and i32 %152, 65535
  %154 = icmp eq i32 %153, 30
  br i1 %154, label %155, label %160

155:                                              ; preds = %147
  %156 = getelementptr inbounds %struct.rtx_def, ptr %151, i64 0, i32 1
  %157 = load i64, ptr %156, align 8, !tbaa !16
  %158 = tail call i64 @llvm.ctpop.i64(i64 %157), !range !365
  %159 = trunc i64 %158 to i32
  br label %160

160:                                              ; preds = %155, %147
  %161 = phi i32 [ 7, %147 ], [ %159, %155 ]
  %162 = load i32, ptr %149, align 8
  %163 = and i32 %162, 65535
  %164 = and i32 %162, 65534
  %165 = icmp eq i32 %164, 98
  br i1 %165, label %166, label %213

166:                                              ; preds = %160
  %167 = getelementptr inbounds %struct.rtx_def, ptr %149, i64 0, i32 1
  %168 = load ptr, ptr %167, align 8, !tbaa !16
  %169 = load i32, ptr %168, align 8
  %170 = lshr i32 %169, 16
  %171 = and i32 %170, 255
  %172 = zext i32 %171 to i64
  %173 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %172
  %174 = load i8, ptr %173, align 1, !tbaa !16
  %175 = zext i8 %174 to i32
  %176 = shl nuw nsw i32 %175, 1
  %177 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %141
  %178 = load i8, ptr %177, align 1, !tbaa !16
  %179 = zext i8 %178 to i32
  %180 = icmp eq i32 %176, %179
  br i1 %180, label %181, label %213

181:                                              ; preds = %166
  %182 = lshr i32 %162, 16
  %183 = and i32 %182, 255
  %184 = icmp eq i32 %163, %153
  br i1 %184, label %185, label %188

185:                                              ; preds = %181
  %186 = getelementptr inbounds %struct.rtx_def, ptr %151, i64 0, i32 1
  %187 = load ptr, ptr %186, align 8, !tbaa !16
  br label %209

188:                                              ; preds = %181
  br i1 %154, label %189, label %213

189:                                              ; preds = %188
  %190 = icmp eq i32 %163, 98
  %191 = getelementptr inbounds %struct.rtx_def, ptr %151, i64 0, i32 1
  %192 = load i64, ptr %191, align 8, !tbaa !16
  br i1 %190, label %193, label %202

193:                                              ; preds = %189
  %194 = tail call i64 @trunc_int_for_mode(i64 noundef %192, i32 noundef %183) #30
  %195 = load i64, ptr %191, align 8, !tbaa !16
  %196 = icmp eq i64 %194, %195
  br i1 %196, label %197, label %213

197:                                              ; preds = %193
  %198 = load ptr, ptr %167, align 8, !tbaa !16
  %199 = load i32, ptr %198, align 8
  %200 = lshr i32 %199, 16
  %201 = and i32 %200, 255
  br label %209

202:                                              ; preds = %189
  %203 = zext i32 %183 to i64
  %204 = getelementptr inbounds [87 x i64], ptr @mode_mask_array, i64 0, i64 %203
  %205 = load i64, ptr %204, align 8, !tbaa !62
  %206 = xor i64 %205, -1
  %207 = and i64 %192, %206
  %208 = icmp eq i64 %207, 0
  br i1 %208, label %209, label %213

209:                                              ; preds = %197, %185, %202
  %210 = phi i32 [ %201, %197 ], [ %171, %185 ], [ %171, %202 ]
  %211 = phi ptr [ %198, %197 ], [ %168, %185 ], [ %168, %202 ]
  %212 = phi ptr [ %151, %197 ], [ %187, %185 ], [ %151, %202 ]
  br label %213

213:                                              ; preds = %188, %193, %160, %202, %209, %166
  %214 = phi ptr [ %149, %166 ], [ %149, %160 ], [ %211, %209 ], [ %149, %202 ], [ %149, %193 ], [ %149, %188 ]
  %215 = phi ptr [ %151, %166 ], [ %151, %160 ], [ %212, %209 ], [ %151, %202 ], [ %151, %193 ], [ %151, %188 ]
  %216 = phi i32 [ %8, %166 ], [ %8, %160 ], [ %210, %209 ], [ %8, %202 ], [ %8, %193 ], [ %8, %188 ]
  %217 = trunc i32 %216 to i8
  %218 = add i8 %217, -14
  %219 = icmp ult i8 %218, 3
  %220 = icmp eq i32 %216, 17
  %221 = select i1 %220, i64 3, i64 4
  %222 = zext i8 %218 to i64
  %223 = select i1 %219, i64 %222, i64 %221
  %224 = getelementptr inbounds %struct.processor_costs, ptr %11, i64 0, i32 4, i64 %223
  %225 = load i32, ptr %224, align 4, !tbaa !20
  %226 = getelementptr inbounds %struct.processor_costs, ptr %11, i64 0, i32 5
  %227 = load i32, ptr %226, align 4, !tbaa !366
  %228 = mul nsw i32 %227, %161
  %229 = add nsw i32 %228, %225
  %230 = tail call i32 @rtx_cost(ptr noundef nonnull %214, i32 noundef %2, i8 noundef zeroext %4) #30
  %231 = add nsw i32 %229, %230
  %232 = tail call i32 @rtx_cost(ptr noundef %215, i32 noundef %2, i8 noundef zeroext %4) #30
  %233 = add nsw i32 %231, %232
  br label %612

234:                                              ; preds = %5, %5, %5, %5
  %235 = load i32, ptr @ix86_isa_flags, align 4, !tbaa !20
  %236 = and i32 %235, 65536
  %237 = icmp ne i32 %236, 0
  %238 = icmp eq i32 %8, 38
  %239 = select i1 %237, i1 %238, i1 false
  br i1 %239, label %245, label %240

240:                                              ; preds = %234
  %241 = and i32 %235, 131072
  %242 = icmp ne i32 %241, 0
  %243 = icmp eq i32 %8, 39
  %244 = select i1 %242, i1 %243, i1 false
  br i1 %244, label %245, label %252

245:                                              ; preds = %240, %234
  %246 = load i32, ptr @ix86_fpmath, align 4, !tbaa !16
  %247 = and i32 %246, 2
  %248 = icmp eq i32 %247, 0
  br i1 %248, label %252, label %249

249:                                              ; preds = %245
  %250 = getelementptr inbounds %struct.processor_costs, ptr %11, i64 0, i32 31
  %251 = load i32, ptr %250, align 4, !tbaa !367
  br label %612

252:                                              ; preds = %245, %240
  %253 = load i32, ptr @target_flags, align 4, !tbaa !20
  %254 = and i32 %253, 2
  %255 = icmp eq i32 %254, 0
  br i1 %255, label %264, label %256

256:                                              ; preds = %252
  %257 = and i32 %6, 16646144
  %258 = icmp eq i32 %257, 2490368
  %259 = icmp eq i32 %8, 40
  %260 = select i1 %258, i1 true, i1 %259
  br i1 %260, label %261, label %264

261:                                              ; preds = %256
  %262 = getelementptr inbounds %struct.processor_costs, ptr %11, i64 0, i32 31
  %263 = load i32, ptr %262, align 4, !tbaa !367
  br label %612

264:                                              ; preds = %256, %252
  %265 = zext i32 %8 to i64
  %266 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %265
  %267 = load i8, ptr %266, align 1, !tbaa !16
  switch i8 %267, label %271 [
    i8 8, label %268
    i8 9, label %268
    i8 11, label %268
    i8 17, label %268
  ]

268:                                              ; preds = %264, %264, %264, %264
  %269 = getelementptr inbounds %struct.processor_costs, ptr %11, i64 0, i32 31
  %270 = load i32, ptr %269, align 4, !tbaa !367
  br label %612

271:                                              ; preds = %264
  %272 = trunc i32 %7 to i8
  %273 = add i8 %272, -14
  %274 = icmp ult i8 %273, 3
  %275 = icmp eq i32 %8, 17
  %276 = select i1 %275, i64 3, i64 4
  %277 = zext i8 %273 to i64
  %278 = select i1 %274, i64 %277, i64 %276
  %279 = getelementptr inbounds %struct.processor_costs, ptr %11, i64 0, i32 6, i64 %278
  %280 = load i32, ptr %279, align 4, !tbaa !20
  br label %612

281:                                              ; preds = %5
  %282 = zext i32 %8 to i64
  %283 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %282
  %284 = load i8, ptr %283, align 1, !tbaa !16
  %285 = icmp eq i8 %284, 2
  br i1 %285, label %286, label %384

286:                                              ; preds = %281
  %287 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %282
  %288 = load i8, ptr %287, align 1, !tbaa !16
  %289 = load i8, ptr getelementptr inbounds ([87 x i8], ptr @mode_size, i64 0, i64 16), align 16, !tbaa !16
  %290 = icmp ugt i8 %288, %289
  br i1 %290, label %384, label %291

291:                                              ; preds = %286
  %292 = getelementptr inbounds %struct.rtx_def, ptr %0, i64 0, i32 1
  %293 = load ptr, ptr %292, align 8, !tbaa !16
  %294 = load i32, ptr %293, align 8
  %295 = trunc i32 %294 to i16
  switch i16 %295, label %384 [
    i16 49, label %296
    i16 52, label %341
  ]

296:                                              ; preds = %291
  %297 = getelementptr inbounds %struct.rtx_def, ptr %293, i64 0, i32 1
  %298 = load ptr, ptr %297, align 8, !tbaa !16
  %299 = load i32, ptr %298, align 8
  %300 = and i32 %299, 65535
  %301 = icmp eq i32 %300, 52
  br i1 %301, label %302, label %364

302:                                              ; preds = %296
  %303 = getelementptr inbounds %struct.rtx_def, ptr %298, i64 0, i32 1, i32 0, i32 0, i64 1
  %304 = load ptr, ptr %303, align 8, !tbaa !16
  %305 = load i32, ptr %304, align 8
  %306 = and i32 %305, 65535
  %307 = icmp eq i32 %306, 30
  br i1 %307, label %308, label %364

308:                                              ; preds = %302
  %309 = getelementptr inbounds %struct.rtx_def, ptr %0, i64 0, i32 1, i32 0, i32 0, i64 1
  %310 = load ptr, ptr %309, align 8, !tbaa !16
  %311 = load i32, ptr %310, align 8
  %312 = and i32 %311, 65535
  %313 = zext i32 %312 to i64
  %314 = getelementptr inbounds [139 x i32], ptr @rtx_class, i64 0, i64 %313
  %315 = load i32, ptr %314, align 4, !tbaa !16
  %316 = icmp eq i32 %315, 9
  br i1 %316, label %317, label %364

317:                                              ; preds = %308
  %318 = getelementptr inbounds %struct.rtx_def, ptr %304, i64 0, i32 1
  %319 = load i64, ptr %318, align 8, !tbaa !16
  switch i64 %319, label %384 [
    i64 8, label %320
    i64 4, label %320
    i64 2, label %320
  ]

320:                                              ; preds = %317, %317, %317
  %321 = getelementptr inbounds %struct.processor_costs, ptr %11, i64 0, i32 1
  %322 = load i32, ptr %321, align 4, !tbaa !362
  store i32 %322, ptr %3, align 4, !tbaa !20
  %323 = load ptr, ptr %292, align 8, !tbaa !16
  %324 = getelementptr inbounds %struct.rtx_def, ptr %323, i64 0, i32 1, i32 0, i32 0, i64 1
  %325 = load ptr, ptr %324, align 8, !tbaa !16
  %326 = tail call i32 @rtx_cost(ptr noundef %325, i32 noundef %2, i8 noundef zeroext %4) #30
  %327 = load i32, ptr %3, align 4, !tbaa !20
  %328 = add nsw i32 %327, %326
  store i32 %328, ptr %3, align 4, !tbaa !20
  %329 = load ptr, ptr %292, align 8, !tbaa !16
  %330 = getelementptr inbounds %struct.rtx_def, ptr %329, i64 0, i32 1
  %331 = load ptr, ptr %330, align 8, !tbaa !16
  %332 = getelementptr inbounds %struct.rtx_def, ptr %331, i64 0, i32 1
  %333 = load ptr, ptr %332, align 8, !tbaa !16
  %334 = tail call i32 @rtx_cost(ptr noundef %333, i32 noundef %2, i8 noundef zeroext %4) #30
  %335 = load i32, ptr %3, align 4, !tbaa !20
  %336 = add nsw i32 %335, %334
  store i32 %336, ptr %3, align 4, !tbaa !20
  %337 = load ptr, ptr %309, align 8, !tbaa !16
  %338 = tail call i32 @rtx_cost(ptr noundef %337, i32 noundef %2, i8 noundef zeroext %4) #30
  %339 = load i32, ptr %3, align 4, !tbaa !20
  %340 = add nsw i32 %339, %338
  store i32 %340, ptr %3, align 4, !tbaa !20
  switch i64 %319, label %384 [
    i64 8, label %615
    i64 4, label %615
    i64 2, label %615
  ]

341:                                              ; preds = %291
  %342 = getelementptr inbounds %struct.rtx_def, ptr %293, i64 0, i32 1, i32 0, i32 0, i64 1
  %343 = load ptr, ptr %342, align 8, !tbaa !16
  %344 = load i32, ptr %343, align 8
  %345 = and i32 %344, 65535
  %346 = icmp eq i32 %345, 30
  br i1 %346, label %347, label %384

347:                                              ; preds = %341
  %348 = getelementptr inbounds %struct.rtx_def, ptr %343, i64 0, i32 1
  %349 = load i64, ptr %348, align 8, !tbaa !16
  switch i64 %349, label %384 [
    i64 8, label %350
    i64 4, label %350
    i64 2, label %350
  ]

350:                                              ; preds = %347, %347, %347
  %351 = getelementptr inbounds %struct.processor_costs, ptr %11, i64 0, i32 1
  %352 = load i32, ptr %351, align 4, !tbaa !362
  store i32 %352, ptr %3, align 4, !tbaa !20
  %353 = load ptr, ptr %292, align 8, !tbaa !16
  %354 = getelementptr inbounds %struct.rtx_def, ptr %353, i64 0, i32 1
  %355 = load ptr, ptr %354, align 8, !tbaa !16
  %356 = tail call i32 @rtx_cost(ptr noundef %355, i32 noundef %2, i8 noundef zeroext %4) #30
  %357 = load i32, ptr %3, align 4, !tbaa !20
  %358 = add nsw i32 %357, %356
  store i32 %358, ptr %3, align 4, !tbaa !20
  %359 = getelementptr inbounds %struct.rtx_def, ptr %0, i64 0, i32 1, i32 0, i32 0, i64 1
  %360 = load ptr, ptr %359, align 8, !tbaa !16
  %361 = tail call i32 @rtx_cost(ptr noundef %360, i32 noundef %2, i8 noundef zeroext %4) #30
  %362 = load i32, ptr %3, align 4, !tbaa !20
  %363 = add nsw i32 %362, %361
  store i32 %363, ptr %3, align 4, !tbaa !20
  switch i64 %349, label %384 [
    i64 8, label %615
    i64 4, label %615
    i64 2, label %615
  ]

364:                                              ; preds = %296, %302, %308
  %365 = getelementptr inbounds %struct.processor_costs, ptr %11, i64 0, i32 1
  %366 = load i32, ptr %365, align 4, !tbaa !362
  store i32 %366, ptr %3, align 4, !tbaa !20
  %367 = load ptr, ptr %292, align 8, !tbaa !16
  %368 = getelementptr inbounds %struct.rtx_def, ptr %367, i64 0, i32 1
  %369 = load ptr, ptr %368, align 8, !tbaa !16
  %370 = tail call i32 @rtx_cost(ptr noundef %369, i32 noundef %2, i8 noundef zeroext %4) #30
  %371 = load i32, ptr %3, align 4, !tbaa !20
  %372 = add nsw i32 %371, %370
  store i32 %372, ptr %3, align 4, !tbaa !20
  %373 = load ptr, ptr %292, align 8, !tbaa !16
  %374 = getelementptr inbounds %struct.rtx_def, ptr %373, i64 0, i32 1, i32 0, i32 0, i64 1
  %375 = load ptr, ptr %374, align 8, !tbaa !16
  %376 = tail call i32 @rtx_cost(ptr noundef %375, i32 noundef %2, i8 noundef zeroext %4) #30
  %377 = load i32, ptr %3, align 4, !tbaa !20
  %378 = add nsw i32 %377, %376
  store i32 %378, ptr %3, align 4, !tbaa !20
  %379 = getelementptr inbounds %struct.rtx_def, ptr %0, i64 0, i32 1, i32 0, i32 0, i64 1
  %380 = load ptr, ptr %379, align 8, !tbaa !16
  %381 = tail call i32 @rtx_cost(ptr noundef %380, i32 noundef %2, i8 noundef zeroext %4) #30
  %382 = load i32, ptr %3, align 4, !tbaa !20
  %383 = add nsw i32 %382, %381
  br label %612

384:                                              ; preds = %291, %341, %347, %317, %350, %320, %281, %286, %5
  %385 = load i32, ptr @ix86_isa_flags, align 4, !tbaa !20
  %386 = and i32 %385, 65536
  %387 = icmp ne i32 %386, 0
  %388 = icmp eq i32 %8, 38
  %389 = select i1 %387, i1 %388, i1 false
  br i1 %389, label %395, label %390

390:                                              ; preds = %384
  %391 = and i32 %385, 131072
  %392 = icmp ne i32 %391, 0
  %393 = icmp eq i32 %8, 39
  %394 = select i1 %392, i1 %393, i1 false
  br i1 %394, label %395, label %402

395:                                              ; preds = %390, %384
  %396 = load i32, ptr @ix86_fpmath, align 4, !tbaa !16
  %397 = and i32 %396, 2
  %398 = icmp eq i32 %397, 0
  br i1 %398, label %402, label %399

399:                                              ; preds = %395
  %400 = getelementptr inbounds %struct.processor_costs, ptr %11, i64 0, i32 29
  %401 = load i32, ptr %400, align 4, !tbaa !368
  br label %612

402:                                              ; preds = %395, %390
  %403 = load i32, ptr @target_flags, align 4, !tbaa !20
  %404 = and i32 %403, 2
  %405 = icmp eq i32 %404, 0
  br i1 %405, label %414, label %406

406:                                              ; preds = %402
  %407 = and i32 %6, 16646144
  %408 = icmp eq i32 %407, 2490368
  %409 = icmp eq i32 %8, 40
  %410 = select i1 %408, i1 true, i1 %409
  br i1 %410, label %411, label %414

411:                                              ; preds = %406
  %412 = getelementptr inbounds %struct.processor_costs, ptr %11, i64 0, i32 29
  %413 = load i32, ptr %412, align 4, !tbaa !368
  br label %612

414:                                              ; preds = %406, %402
  %415 = zext i32 %8 to i64
  %416 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %415
  %417 = load i8, ptr %416, align 1, !tbaa !16
  switch i8 %417, label %421 [
    i8 8, label %418
    i8 9, label %418
    i8 11, label %418
    i8 17, label %418
  ]

418:                                              ; preds = %414, %414, %414, %414
  %419 = getelementptr inbounds %struct.processor_costs, ptr %11, i64 0, i32 29
  %420 = load i32, ptr %419, align 4, !tbaa !368
  br label %612

421:                                              ; preds = %414, %5, %5, %5
  %422 = icmp eq i32 %8, 17
  br i1 %422, label %423, label %446

423:                                              ; preds = %421
  %424 = load i32, ptr %11, align 4, !tbaa !248
  %425 = shl nsw i32 %424, 1
  %426 = getelementptr inbounds %struct.rtx_def, ptr %0, i64 0, i32 1
  %427 = load ptr, ptr %426, align 8, !tbaa !16
  %428 = tail call i32 @rtx_cost(ptr noundef %427, i32 noundef %2, i8 noundef zeroext %4) #30
  %429 = load ptr, ptr %426, align 8, !tbaa !16
  %430 = load i32, ptr %429, align 8
  %431 = and i32 %430, 16711680
  %432 = icmp ne i32 %431, 1114112
  %433 = zext i1 %432 to i32
  %434 = shl i32 %428, %433
  %435 = add nsw i32 %434, %425
  %436 = getelementptr inbounds %struct.rtx_def, ptr %0, i64 0, i32 1, i32 0, i32 0, i64 1
  %437 = load ptr, ptr %436, align 8, !tbaa !16
  %438 = tail call i32 @rtx_cost(ptr noundef %437, i32 noundef %2, i8 noundef zeroext %4) #30
  %439 = load ptr, ptr %436, align 8, !tbaa !16
  %440 = load i32, ptr %439, align 8
  %441 = and i32 %440, 16711680
  %442 = icmp ne i32 %441, 1114112
  %443 = zext i1 %442 to i32
  %444 = shl i32 %438, %443
  %445 = add nsw i32 %435, %444
  br label %612

446:                                              ; preds = %421, %5
  %447 = load i32, ptr @ix86_isa_flags, align 4, !tbaa !20
  %448 = and i32 %447, 65536
  %449 = icmp ne i32 %448, 0
  %450 = icmp eq i32 %8, 38
  %451 = select i1 %449, i1 %450, i1 false
  br i1 %451, label %457, label %452

452:                                              ; preds = %446
  %453 = and i32 %447, 131072
  %454 = icmp ne i32 %453, 0
  %455 = icmp eq i32 %8, 39
  %456 = select i1 %454, i1 %455, i1 false
  br i1 %456, label %457, label %464

457:                                              ; preds = %452, %446
  %458 = load i32, ptr @ix86_fpmath, align 4, !tbaa !16
  %459 = and i32 %458, 2
  %460 = icmp eq i32 %459, 0
  br i1 %460, label %464, label %461

461:                                              ; preds = %457
  %462 = getelementptr inbounds %struct.processor_costs, ptr %11, i64 0, i32 33
  %463 = load i32, ptr %462, align 4, !tbaa !369
  br label %612

464:                                              ; preds = %457, %452
  %465 = load i32, ptr @target_flags, align 4, !tbaa !20
  %466 = and i32 %465, 2
  %467 = icmp eq i32 %466, 0
  br i1 %467, label %476, label %468

468:                                              ; preds = %464
  %469 = and i32 %6, 16646144
  %470 = icmp eq i32 %469, 2490368
  %471 = icmp eq i32 %8, 40
  %472 = select i1 %470, i1 true, i1 %471
  br i1 %472, label %473, label %476

473:                                              ; preds = %468
  %474 = getelementptr inbounds %struct.processor_costs, ptr %11, i64 0, i32 33
  %475 = load i32, ptr %474, align 4, !tbaa !369
  br label %612

476:                                              ; preds = %468, %464
  %477 = zext i32 %8 to i64
  %478 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %477
  %479 = load i8, ptr %478, align 1, !tbaa !16
  switch i8 %479, label %483 [
    i8 8, label %480
    i8 9, label %480
    i8 11, label %480
    i8 17, label %480
  ]

480:                                              ; preds = %476, %476, %476, %476
  %481 = getelementptr inbounds %struct.processor_costs, ptr %11, i64 0, i32 33
  %482 = load i32, ptr %481, align 4, !tbaa !369
  br label %612

483:                                              ; preds = %476, %5
  %484 = icmp eq i32 %8, 17
  %485 = load i32, ptr %11, align 4, !tbaa !248
  %486 = zext i1 %484 to i32
  %487 = shl nsw i32 %485, %486
  br label %612

488:                                              ; preds = %5
  %489 = getelementptr inbounds %struct.rtx_def, ptr %0, i64 0, i32 1
  %490 = load ptr, ptr %489, align 8, !tbaa !16
  %491 = load i32, ptr %490, align 8
  %492 = and i32 %491, 65535
  %493 = icmp eq i32 %492, 120
  br i1 %493, label %494, label %615

494:                                              ; preds = %488
  %495 = getelementptr inbounds %struct.rtx_def, ptr %490, i64 0, i32 1
  %496 = getelementptr inbounds %struct.rtx_def, ptr %490, i64 0, i32 1, i32 0, i32 0, i64 1
  %497 = load ptr, ptr %496, align 8, !tbaa !16
  %498 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 65), align 8, !tbaa !5
  %499 = icmp eq ptr %497, %498
  br i1 %499, label %500, label %615

500:                                              ; preds = %494
  %501 = getelementptr inbounds %struct.rtx_def, ptr %490, i64 0, i32 1, i32 0, i32 0, i64 2
  %502 = load ptr, ptr %501, align 8, !tbaa !16
  %503 = load i32, ptr %502, align 8
  %504 = and i32 %503, 65535
  %505 = icmp eq i32 %504, 30
  br i1 %505, label %506, label %615

506:                                              ; preds = %500
  %507 = getelementptr inbounds %struct.rtx_def, ptr %0, i64 0, i32 1, i32 0, i32 0, i64 1
  %508 = load ptr, ptr %507, align 8, !tbaa !16
  %509 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 64), align 16, !tbaa !5
  %510 = icmp eq ptr %508, %509
  br i1 %510, label %511, label %615

511:                                              ; preds = %506
  %512 = load i32, ptr %11, align 4, !tbaa !248
  %513 = load ptr, ptr %495, align 8, !tbaa !16
  %514 = tail call i32 @rtx_cost(ptr noundef %513, i32 noundef %2, i8 noundef zeroext %4) #30
  %515 = add nsw i32 %514, %512
  %516 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 65), align 8, !tbaa !5
  %517 = tail call i32 @rtx_cost(ptr noundef %516, i32 noundef %2, i8 noundef zeroext %4) #30
  %518 = add nsw i32 %515, %517
  br label %612

519:                                              ; preds = %5
  %520 = load i32, ptr @ix86_isa_flags, align 4, !tbaa !20
  %521 = and i32 %520, 65536
  %522 = icmp ne i32 %521, 0
  %523 = icmp eq i32 %8, 38
  %524 = select i1 %522, i1 %523, i1 false
  br i1 %524, label %530, label %525

525:                                              ; preds = %519
  %526 = and i32 %520, 131072
  %527 = icmp ne i32 %526, 0
  %528 = icmp eq i32 %8, 39
  %529 = select i1 %527, i1 %528, i1 false
  br i1 %529, label %530, label %612

530:                                              ; preds = %525, %519
  %531 = load i32, ptr @ix86_fpmath, align 4, !tbaa !16
  %532 = and i32 %531, 2
  %533 = icmp eq i32 %532, 0
  br i1 %533, label %612, label %615

534:                                              ; preds = %5
  %535 = load i32, ptr @ix86_isa_flags, align 4, !tbaa !20
  %536 = and i32 %535, 65536
  %537 = icmp ne i32 %536, 0
  %538 = icmp eq i32 %8, 38
  %539 = select i1 %537, i1 %538, i1 false
  br i1 %539, label %545, label %540

540:                                              ; preds = %534
  %541 = and i32 %535, 131072
  %542 = icmp ne i32 %541, 0
  %543 = icmp eq i32 %8, 39
  %544 = select i1 %542, i1 %543, i1 false
  br i1 %544, label %545, label %552

545:                                              ; preds = %540, %534
  %546 = load i32, ptr @ix86_fpmath, align 4, !tbaa !16
  %547 = and i32 %546, 2
  %548 = icmp eq i32 %547, 0
  br i1 %548, label %552, label %549

549:                                              ; preds = %545
  %550 = getelementptr inbounds %struct.processor_costs, ptr %11, i64 0, i32 32
  %551 = load i32, ptr %550, align 4, !tbaa !370
  br label %612

552:                                              ; preds = %545, %540
  %553 = load i32, ptr @target_flags, align 4, !tbaa !20
  %554 = and i32 %553, 2
  %555 = icmp eq i32 %554, 0
  br i1 %555, label %564, label %556

556:                                              ; preds = %552
  %557 = and i32 %6, 16646144
  %558 = icmp eq i32 %557, 2490368
  %559 = icmp eq i32 %8, 40
  %560 = select i1 %558, i1 true, i1 %559
  br i1 %560, label %561, label %564

561:                                              ; preds = %556
  %562 = getelementptr inbounds %struct.processor_costs, ptr %11, i64 0, i32 32
  %563 = load i32, ptr %562, align 4, !tbaa !370
  br label %612

564:                                              ; preds = %556, %552
  %565 = zext i32 %8 to i64
  %566 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %565
  %567 = load i8, ptr %566, align 1, !tbaa !16
  switch i8 %567, label %615 [
    i8 8, label %568
    i8 9, label %568
    i8 11, label %568
    i8 17, label %568
  ]

568:                                              ; preds = %564, %564, %564, %564
  %569 = getelementptr inbounds %struct.processor_costs, ptr %11, i64 0, i32 32
  %570 = load i32, ptr %569, align 4, !tbaa !370
  br label %612

571:                                              ; preds = %5
  %572 = load i32, ptr @ix86_isa_flags, align 4, !tbaa !20
  %573 = and i32 %572, 65536
  %574 = icmp ne i32 %573, 0
  %575 = icmp eq i32 %8, 38
  %576 = select i1 %574, i1 %575, i1 false
  br i1 %576, label %582, label %577

577:                                              ; preds = %571
  %578 = and i32 %572, 131072
  %579 = icmp ne i32 %578, 0
  %580 = icmp eq i32 %8, 39
  %581 = select i1 %579, i1 %580, i1 false
  br i1 %581, label %582, label %589

582:                                              ; preds = %577, %571
  %583 = load i32, ptr @ix86_fpmath, align 4, !tbaa !16
  %584 = and i32 %583, 2
  %585 = icmp eq i32 %584, 0
  br i1 %585, label %589, label %586

586:                                              ; preds = %582
  %587 = getelementptr inbounds %struct.processor_costs, ptr %11, i64 0, i32 34
  %588 = load i32, ptr %587, align 4, !tbaa !371
  br label %612

589:                                              ; preds = %582, %577
  %590 = load i32, ptr @target_flags, align 4, !tbaa !20
  %591 = and i32 %590, 2
  %592 = icmp eq i32 %591, 0
  br i1 %592, label %601, label %593

593:                                              ; preds = %589
  %594 = and i32 %6, 16646144
  %595 = icmp eq i32 %594, 2490368
  %596 = icmp eq i32 %8, 40
  %597 = select i1 %595, i1 true, i1 %596
  br i1 %597, label %598, label %601

598:                                              ; preds = %593
  %599 = getelementptr inbounds %struct.processor_costs, ptr %11, i64 0, i32 34
  %600 = load i32, ptr %599, align 4, !tbaa !371
  br label %612

601:                                              ; preds = %593, %589
  %602 = zext i32 %8 to i64
  %603 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %602
  %604 = load i8, ptr %603, align 1, !tbaa !16
  switch i8 %604, label %615 [
    i8 8, label %605
    i8 9, label %605
    i8 11, label %605
    i8 17, label %605
  ]

605:                                              ; preds = %601, %601, %601, %601
  %606 = getelementptr inbounds %struct.processor_costs, ptr %11, i64 0, i32 34
  %607 = load i32, ptr %606, align 4, !tbaa !371
  br label %612

608:                                              ; preds = %5
  %609 = getelementptr inbounds %struct.rtx_def, ptr %0, i64 0, i32 1, i32 0, i32 0, i64 1
  %610 = load i32, ptr %609, align 8, !tbaa !16
  %611 = icmp eq i32 %610, 20
  br i1 %611, label %612, label %615

612:                                              ; preds = %5, %5, %5, %5, %608, %525, %530, %65, %23, %21, %20, %15, %15, %17, %35, %41, %125, %137, %144, %213, %364, %399, %411, %418, %423, %461, %473, %480, %483, %511, %25, %26, %104, %107, %90, %88, %96, %92, %261, %271, %268, %249, %561, %568, %549, %598, %605, %586, %60
  %613 = phi i32 [ %61, %60 ], [ %588, %586 ], [ %607, %605 ], [ %600, %598 ], [ %551, %549 ], [ %570, %568 ], [ %563, %561 ], [ %251, %249 ], [ %270, %268 ], [ %280, %271 ], [ %263, %261 ], [ %95, %92 ], [ %100, %96 ], [ %89, %88 ], [ %91, %90 ], [ %109, %107 ], [ %106, %104 ], [ %34, %26 ], [ 2, %25 ], [ %518, %511 ], [ %487, %483 ], [ %482, %480 ], [ %475, %473 ], [ %463, %461 ], [ %445, %423 ], [ %420, %418 ], [ %413, %411 ], [ %401, %399 ], [ %383, %364 ], [ %233, %213 ], [ %146, %144 ], [ %139, %137 ], [ %127, %125 ], [ %43, %41 ], [ %40, %35 ], [ 0, %20 ], [ 1, %15 ], [ 1, %15 ], [ 1, %17 ], [ 0, %21 ], [ %24, %23 ], [ %67, %65 ], [ 0, %530 ], [ 0, %525 ], [ 0, %608 ], [ 4, %5 ], [ 4, %5 ], [ 4, %5 ], [ 4, %5 ]
  %614 = phi i8 [ 0, %60 ], [ 0, %586 ], [ 0, %605 ], [ 0, %598 ], [ 0, %549 ], [ 0, %568 ], [ 0, %561 ], [ 0, %249 ], [ 0, %268 ], [ 0, %271 ], [ 0, %261 ], [ 0, %92 ], [ 0, %96 ], [ 0, %88 ], [ 0, %90 ], [ 0, %107 ], [ 0, %104 ], [ 1, %26 ], [ 1, %25 ], [ 1, %511 ], [ 0, %483 ], [ 0, %480 ], [ 0, %473 ], [ 0, %461 ], [ 1, %423 ], [ 0, %418 ], [ 0, %411 ], [ 0, %399 ], [ 1, %364 ], [ 1, %213 ], [ 0, %144 ], [ 0, %137 ], [ 0, %125 ], [ 0, %41 ], [ 0, %35 ], [ 1, %20 ], [ 1, %15 ], [ 1, %15 ], [ 1, %17 ], [ 1, %21 ], [ 1, %23 ], [ 0, %65 ], [ 0, %530 ], [ 0, %525 ], [ 0, %608 ], [ 1, %5 ], [ 1, %5 ], [ 1, %5 ], [ 1, %5 ]
  store i32 %613, ptr %3, align 4, !tbaa !20
  br label %615

615:                                              ; preds = %612, %5, %608, %601, %564, %530, %488, %494, %500, %506, %350, %350, %350, %320, %320, %320
  %616 = phi i8 [ 1, %320 ], [ 1, %350 ], [ 1, %320 ], [ 1, %320 ], [ 1, %350 ], [ 1, %350 ], [ 0, %506 ], [ 0, %500 ], [ 0, %494 ], [ 0, %488 ], [ 0, %530 ], [ 0, %564 ], [ 0, %601 ], [ 0, %608 ], [ 0, %5 ], [ %614, %612 ]
  ret i8 %616
}

; Function Attrs: nounwind sspstrong uwtable
define internal i32 @ix86_address_cost(ptr noundef %0, i8 zeroext %1) #9 {
  %3 = alloca %struct.ix86_address, align 8
  call void @llvm.lifetime.start.p0(i64 40, ptr nonnull %3) #30
  %4 = call i32 @ix86_decompose_address(ptr noundef %0, ptr noundef nonnull %3), !range !172
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %6, label %7

6:                                                ; preds = %2
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 9510, ptr noundef nonnull @.str.131) #30
  br label %7

7:                                                ; preds = %2, %6
  %8 = load ptr, ptr %3, align 8
  %9 = icmp eq ptr %8, null
  br i1 %9, label %17, label %10

10:                                               ; preds = %7
  %11 = load i32, ptr %8, align 8
  %12 = and i32 %11, 65535
  %13 = icmp eq i32 %12, 39
  br i1 %13, label %14, label %17

14:                                               ; preds = %10
  %15 = getelementptr inbounds %struct.rtx_def, ptr %8, i64 0, i32 1
  %16 = load ptr, ptr %15, align 8, !tbaa !16
  br label %17

17:                                               ; preds = %14, %10, %7
  %18 = phi ptr [ %16, %14 ], [ %8, %10 ], [ null, %7 ]
  %19 = getelementptr inbounds %struct.ix86_address, ptr %3, i64 0, i32 1
  %20 = load ptr, ptr %19, align 8
  %21 = icmp eq ptr %20, null
  br i1 %21, label %29, label %22

22:                                               ; preds = %17
  %23 = load i32, ptr %20, align 8
  %24 = and i32 %23, 65535
  %25 = icmp eq i32 %24, 39
  br i1 %25, label %26, label %29

26:                                               ; preds = %22
  %27 = getelementptr inbounds %struct.rtx_def, ptr %20, i64 0, i32 1
  %28 = load ptr, ptr %27, align 8, !tbaa !16
  br label %29

29:                                               ; preds = %26, %22, %17
  %30 = phi ptr [ %28, %26 ], [ %20, %22 ], [ null, %17 ]
  %31 = icmp eq ptr %18, null
  br i1 %31, label %40, label %32

32:                                               ; preds = %29
  %33 = load i32, ptr %18, align 8
  %34 = and i32 %33, 65535
  %35 = icmp eq i32 %34, 37
  br i1 %35, label %36, label %50

36:                                               ; preds = %32
  %37 = getelementptr i8, ptr %18, i64 8
  %38 = load i32, ptr %37, align 8, !tbaa !16
  %39 = icmp ugt i32 %38, 52
  br i1 %39, label %50, label %40

40:                                               ; preds = %36, %29
  %41 = icmp eq ptr %30, null
  br i1 %41, label %51, label %42

42:                                               ; preds = %40
  %43 = load i32, ptr %30, align 8
  %44 = and i32 %43, 65535
  %45 = icmp eq i32 %44, 37
  br i1 %45, label %46, label %50

46:                                               ; preds = %42
  %47 = getelementptr i8, ptr %30, i64 8
  %48 = load i32, ptr %47, align 8, !tbaa !16
  %49 = icmp ugt i32 %48, 52
  br i1 %49, label %50, label %51

50:                                               ; preds = %46, %42, %36, %32
  br label %51

51:                                               ; preds = %50, %46, %40
  %52 = phi i32 [ 2, %50 ], [ 1, %46 ], [ 1, %40 ]
  br i1 %31, label %77, label %53

53:                                               ; preds = %51
  %54 = load i32, ptr %18, align 8
  %55 = and i32 %54, 65535
  %56 = icmp eq i32 %55, 37
  br i1 %56, label %57, label %63

57:                                               ; preds = %53
  %58 = getelementptr i8, ptr %18, i64 8
  %59 = load i32, ptr %58, align 8, !tbaa !16
  %60 = icmp ugt i32 %59, 52
  %61 = icmp ne ptr %30, null
  %62 = select i1 %60, i1 %61, i1 false
  br i1 %62, label %65, label %77

63:                                               ; preds = %53
  %64 = icmp eq ptr %30, null
  br i1 %64, label %77, label %65

65:                                               ; preds = %57, %63
  %66 = load i32, ptr %30, align 8
  %67 = and i32 %66, 65535
  %68 = icmp eq i32 %67, 37
  br i1 %68, label %69, label %73

69:                                               ; preds = %65
  %70 = getelementptr i8, ptr %30, i64 8
  %71 = load i32, ptr %70, align 8, !tbaa !16
  %72 = icmp ugt i32 %71, 52
  br i1 %72, label %73, label %77

73:                                               ; preds = %69, %65
  %74 = icmp ne ptr %18, %30
  %75 = zext i1 %74 to i32
  %76 = add nuw nsw i32 %52, %75
  br label %77

77:                                               ; preds = %73, %69, %63, %57, %51
  %78 = phi i32 [ %52, %69 ], [ %52, %57 ], [ %52, %63 ], [ %52, %51 ], [ %76, %73 ]
  %79 = load i32, ptr @ix86_tune, align 4, !tbaa !16
  %80 = icmp eq i32 %79, 5
  br i1 %80, label %81, label %103

81:                                               ; preds = %77
  %82 = getelementptr inbounds %struct.ix86_address, ptr %3, i64 0, i32 2
  %83 = load ptr, ptr %82, align 8, !tbaa !169
  %84 = icmp eq ptr %83, null
  %85 = icmp ne ptr %18, null
  %86 = and i1 %85, %84
  %87 = icmp ne ptr %30, null
  %88 = select i1 %86, i1 %87, i1 false
  %89 = getelementptr inbounds %struct.ix86_address, ptr %3, i64 0, i32 3
  %90 = load i64, ptr %89, align 8
  %91 = icmp ne i64 %90, 1
  %92 = select i1 %88, i1 %91, i1 false
  br i1 %92, label %101, label %93

93:                                               ; preds = %81
  %94 = or i1 %85, %84
  %95 = xor i1 %94, true
  %96 = select i1 %95, i1 %87, i1 false
  %97 = select i1 %96, i1 %91, i1 false
  %98 = icmp eq i64 %90, 1
  %99 = select i1 %88, i1 %98, i1 false
  %100 = select i1 %97, i1 true, i1 %99
  br i1 %100, label %101, label %103

101:                                              ; preds = %93, %81
  %102 = add nuw nsw i32 %78, 10
  br label %103

103:                                              ; preds = %93, %101, %77
  %104 = phi i32 [ %102, %101 ], [ %78, %77 ], [ %78, %93 ]
  call void @llvm.lifetime.end.p0(i64 40, ptr nonnull %3) #30
  ret i32 %104
}

declare i32 @default_unspec_may_trap_p(ptr noundef, i32 noundef) #3

declare ptr @hook_rtx_rtx_null(ptr noundef) #3

; Function Attrs: mustprogress nofree norecurse nosync nounwind sspstrong willreturn memory(argmem: write) uwtable
define internal zeroext i8 @ix86_fixed_condition_code_regs(ptr nocapture noundef writeonly %0, ptr nocapture noundef writeonly %1) #25 {
  store i32 17, ptr %0, align 4, !tbaa !20
  store i32 18, ptr %1, align 4, !tbaa !20
  ret i8 1
}

; Function Attrs: nounwind sspstrong uwtable
define internal i32 @ix86_cc_modes_compatible(i32 noundef %0, i32 noundef %1) #9 {
  %3 = icmp eq i32 %0, %1
  br i1 %3, label %28, label %4

4:                                                ; preds = %2
  %5 = zext i32 %0 to i64
  %6 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %5
  %7 = load i8, ptr %6, align 1, !tbaa !16
  %8 = icmp eq i8 %7, 1
  br i1 %8, label %9, label %28

9:                                                ; preds = %4
  %10 = zext i32 %1 to i64
  %11 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %10
  %12 = load i8, ptr %11, align 1, !tbaa !16
  %13 = icmp eq i8 %12, 1
  br i1 %13, label %14, label %28

14:                                               ; preds = %9
  %15 = icmp eq i32 %0, 3
  %16 = icmp eq i32 %1, 4
  %17 = and i1 %15, %16
  br i1 %17, label %28, label %18

18:                                               ; preds = %14
  %19 = icmp eq i32 %0, 4
  %20 = icmp eq i32 %1, 3
  %21 = and i1 %19, %20
  br i1 %21, label %28, label %22

22:                                               ; preds = %18
  switch i32 %0, label %23 [
    i32 2, label %24
    i32 3, label %24
    i32 4, label %24
    i32 5, label %24
    i32 6, label %24
    i32 7, label %24
    i32 8, label %24
    i32 9, label %24
    i32 10, label %24
    i32 11, label %28
    i32 12, label %28
  ]

23:                                               ; preds = %22
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 14695, ptr noundef nonnull @.str.131) #30
  br label %24

24:                                               ; preds = %22, %22, %22, %22, %22, %22, %22, %22, %22, %23
  %25 = add i32 %1, -2
  %26 = icmp ult i32 %25, 9
  %27 = select i1 %26, i32 2, i32 0
  br label %28

28:                                               ; preds = %22, %22, %24, %14, %18, %4, %9, %2
  %29 = phi i32 [ %0, %2 ], [ 0, %9 ], [ 0, %4 ], [ 3, %18 ], [ 3, %14 ], [ %27, %24 ], [ 0, %22 ], [ 0, %22 ]
  ret i32 %29
}

; Function Attrs: nounwind sspstrong uwtable
define internal void @ix86_reorg() #9 {
  %1 = load i32, ptr @optimize, align 4, !tbaa !20
  %2 = icmp eq i32 %1, 0
  br i1 %2, label %419, label %3

3:                                                ; preds = %0
  %4 = load ptr, ptr @cfun, align 8, !tbaa !5
  %5 = tail call zeroext i8 @optimize_function_for_speed_p(ptr noundef %4) #30
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %419, label %7

7:                                                ; preds = %3
  %8 = load i8, ptr getelementptr inbounds ([62 x i8], ptr @ix86_tune_features, i64 0, i64 48), align 16, !tbaa !16
  %9 = icmp eq i8 %8, 0
  br i1 %9, label %142, label %10

10:                                               ; preds = %7
  %11 = load ptr, ptr @cfun, align 8, !tbaa !5
  %12 = getelementptr inbounds %struct.function, ptr %11, i64 0, i32 1
  %13 = load ptr, ptr %12, align 8, !tbaa !152
  %14 = getelementptr inbounds %struct.control_flow_graph, ptr %13, i64 0, i32 1
  %15 = load ptr, ptr %14, align 8, !tbaa !372
  %16 = icmp eq ptr %15, null
  br label %17

17:                                               ; preds = %140, %10
  %18 = phi i32 [ 0, %10 ], [ %141, %140 ]
  br i1 %16, label %19, label %20

19:                                               ; preds = %17
  tail call void @fancy_abort(ptr noundef nonnull @.str.438, i32 noundef 687, ptr noundef nonnull @.str.131) #30
  br label %20

20:                                               ; preds = %19, %17
  %21 = load ptr, ptr %15, align 8, !tbaa !5
  %22 = icmp eq ptr %21, null
  br i1 %22, label %25, label %23

23:                                               ; preds = %20
  %24 = load i32, ptr %21, align 8, !tbaa !198
  br label %25

25:                                               ; preds = %23, %20
  %26 = phi i32 [ %24, %23 ], [ 0, %20 ]
  %27 = icmp eq i32 %26, %18
  br i1 %27, label %142, label %28

28:                                               ; preds = %25
  %29 = zext i32 %18 to i64
  %30 = getelementptr inbounds %struct.VEC_edge_base, ptr %21, i64 0, i32 2, i64 %29
  %31 = load ptr, ptr %30, align 8, !tbaa !5
  %32 = load ptr, ptr %31, align 8, !tbaa !200
  %33 = getelementptr inbounds %struct.basic_block_def, ptr %32, i64 0, i32 7
  %34 = load ptr, ptr %33, align 8, !tbaa !16
  %35 = getelementptr inbounds %struct.rtl_bb_info, ptr %34, i64 0, i32 1
  %36 = load ptr, ptr %35, align 8, !tbaa !205
  %37 = load i32, ptr %36, align 8
  %38 = and i32 %37, 65535
  %39 = icmp eq i32 %38, 9
  br i1 %39, label %40, label %133

40:                                               ; preds = %28
  %41 = getelementptr inbounds %struct.rtx_def, ptr %36, i64 1
  %42 = load ptr, ptr %41, align 8, !tbaa !16
  %43 = load i32, ptr %42, align 8
  %44 = and i32 %43, 65535
  %45 = icmp eq i32 %44, 27
  br i1 %45, label %46, label %133

46:                                               ; preds = %40
  %47 = tail call zeroext i8 @optimize_bb_for_size_p(ptr noundef nonnull %32) #30
  %48 = icmp eq i8 %47, 0
  br i1 %48, label %49, label %133

49:                                               ; preds = %46, %60
  %50 = phi ptr [ %52, %60 ], [ %36, %46 ]
  %51 = getelementptr inbounds %struct.rtx_def, ptr %50, i64 0, i32 1, i32 0, i32 0, i64 1
  %52 = load ptr, ptr %51, align 8, !tbaa !16
  %53 = icmp eq ptr %52, null
  br i1 %53, label %107, label %54

54:                                               ; preds = %49
  %55 = tail call i32 @active_insn_p(ptr noundef nonnull %52) #30
  %56 = icmp eq i32 %55, 0
  %57 = load i32, ptr %52, align 8
  %58 = and i32 %57, 65535
  %59 = icmp eq i32 %58, 12
  br i1 %56, label %60, label %61

60:                                               ; preds = %54
  br i1 %59, label %62, label %49, !llvm.loop !373

61:                                               ; preds = %54
  br i1 %59, label %62, label %107

62:                                               ; preds = %60, %61
  %63 = icmp eq ptr %32, null
  br label %64

64:                                               ; preds = %103, %62
  %65 = phi i32 [ %104, %103 ], [ 0, %62 ]
  %66 = phi i8 [ %99, %103 ], [ 0, %62 ]
  br i1 %63, label %67, label %68

67:                                               ; preds = %64
  tail call void @fancy_abort(ptr noundef nonnull @.str.438, i32 noundef 687, ptr noundef nonnull @.str.131) #30
  br label %68

68:                                               ; preds = %67, %64
  %69 = load ptr, ptr %32, align 8, !tbaa !5
  %70 = icmp eq ptr %69, null
  br i1 %70, label %73, label %71

71:                                               ; preds = %68
  %72 = load i32, ptr %69, align 8, !tbaa !198
  br label %73

73:                                               ; preds = %71, %68
  %74 = phi i32 [ %72, %71 ], [ 0, %68 ]
  %75 = icmp eq i32 %74, %65
  br i1 %75, label %105, label %76

76:                                               ; preds = %73
  %77 = zext i32 %65 to i64
  %78 = getelementptr inbounds %struct.VEC_edge_base, ptr %69, i64 0, i32 2, i64 %77
  %79 = load ptr, ptr %78, align 8, !tbaa !5
  %80 = load ptr, ptr %79, align 8, !tbaa !200
  %81 = getelementptr inbounds %struct.basic_block_def, ptr %80, i64 0, i32 11
  %82 = load i32, ptr %81, align 8, !tbaa !374
  %83 = getelementptr inbounds %struct.edge_def, ptr %79, i64 0, i32 8
  %84 = load i32, ptr %83, align 4, !tbaa !376
  %85 = mul nsw i32 %84, %82
  %86 = add i32 %85, 14999
  %87 = icmp ult i32 %86, 19999
  br i1 %87, label %98, label %88

88:                                               ; preds = %76
  %89 = getelementptr inbounds %struct.basic_block_def, ptr %80, i64 0, i32 9
  %90 = load i32, ptr %89, align 8, !tbaa !377
  %91 = icmp sgt i32 %90, -1
  br i1 %91, label %92, label %98

92:                                               ; preds = %88
  %93 = getelementptr inbounds %struct.edge_def, ptr %79, i64 0, i32 7
  %94 = load i32, ptr %93, align 8, !tbaa !378
  %95 = and i32 %94, 1
  %96 = icmp eq i32 %95, 0
  %97 = select i1 %96, i8 1, i8 %66
  br label %98

98:                                               ; preds = %92, %88, %76
  %99 = phi i8 [ %66, %88 ], [ %66, %76 ], [ %97, %92 ]
  %100 = load i32, ptr %69, align 8, !tbaa !198
  %101 = icmp ult i32 %65, %100
  br i1 %101, label %103, label %102

102:                                              ; preds = %98
  tail call void @fancy_abort(ptr noundef nonnull @.str.438, i32 noundef 738, ptr noundef nonnull @.str.131) #30
  br label %103

103:                                              ; preds = %102, %98
  %104 = add i32 %65, 1
  br label %64, !llvm.loop !379

105:                                              ; preds = %73
  %106 = icmp eq i8 %66, 0
  br i1 %106, label %107, label %129

107:                                              ; preds = %49, %105, %61
  %108 = tail call ptr @prev_active_insn(ptr noundef nonnull %36) #30
  %109 = icmp eq ptr %108, null
  br i1 %109, label %123, label %110

110:                                              ; preds = %107
  %111 = load i32, ptr %108, align 8
  %112 = and i32 %111, 65535
  %113 = icmp eq i32 %112, 9
  br i1 %113, label %114, label %120

114:                                              ; preds = %110
  %115 = tail call i32 @any_condjump_p(ptr noundef nonnull %108) #30
  %116 = icmp eq i32 %115, 0
  br i1 %116, label %117, label %129

117:                                              ; preds = %114
  %118 = load i32, ptr %108, align 8
  %119 = and i32 %118, 65535
  br label %120

120:                                              ; preds = %117, %110
  %121 = phi i32 [ %119, %117 ], [ %112, %110 ]
  %122 = icmp eq i32 %121, 10
  br i1 %122, label %129, label %133

123:                                              ; preds = %107
  %124 = load ptr, ptr @cfun, align 8, !tbaa !5
  %125 = getelementptr inbounds %struct.function, ptr %124, i64 0, i32 20
  %126 = load i32, ptr %125, align 8
  %127 = and i32 %126, 196608
  %128 = icmp eq i32 %127, 0
  br i1 %128, label %133, label %129

129:                                              ; preds = %123, %120, %114, %105
  %130 = tail call ptr @gen_return_internal_long() #30
  %131 = tail call ptr @emit_jump_insn_before(ptr noundef %130, ptr noundef nonnull %36) #30
  %132 = tail call ptr @delete_insn(ptr noundef nonnull %36) #30
  br label %133

133:                                              ; preds = %129, %123, %120, %46, %40, %28
  %134 = load ptr, ptr %15, align 8, !tbaa !5
  %135 = icmp eq ptr %134, null
  br i1 %135, label %139, label %136

136:                                              ; preds = %133
  %137 = load i32, ptr %134, align 8, !tbaa !198
  %138 = icmp ult i32 %18, %137
  br i1 %138, label %140, label %139

139:                                              ; preds = %136, %133
  tail call void @fancy_abort(ptr noundef nonnull @.str.438, i32 noundef 738, ptr noundef nonnull @.str.131) #30
  br label %140

140:                                              ; preds = %139, %136
  %141 = add i32 %18, 1
  br label %17, !llvm.loop !380

142:                                              ; preds = %25, %7
  %143 = load i8, ptr getelementptr inbounds ([62 x i8], ptr @ix86_tune_features, i64 0, i64 44), align 4, !tbaa !16
  %144 = icmp eq i8 %143, 0
  br i1 %144, label %419, label %145

145:                                              ; preds = %142
  %146 = tail call ptr @get_insns() #30
  %147 = icmp eq ptr %146, null
  br i1 %147, label %419, label %148

148:                                              ; preds = %145, %411
  %149 = phi ptr [ %417, %411 ], [ %146, %145 ]
  %150 = phi ptr [ %415, %411 ], [ %146, %145 ]
  %151 = phi i32 [ %414, %411 ], [ 0, %145 ]
  %152 = phi i32 [ %413, %411 ], [ 0, %145 ]
  %153 = phi i32 [ %412, %411 ], [ 0, %145 ]
  %154 = load i32, ptr %149, align 8
  %155 = and i32 %154, 65535
  %156 = icmp eq i32 %155, 12
  br i1 %156, label %157, label %268

157:                                              ; preds = %148
  %158 = tail call i32 @label_to_alignment(ptr noundef nonnull %149) #30
  %159 = tail call i32 @label_to_max_skip(ptr noundef nonnull %149) #30
  %160 = tail call i32 @llvm.smin.i32(i32 %159, i32 15)
  %161 = icmp slt i32 %158, 1
  br i1 %161, label %168, label %162

162:                                              ; preds = %157
  %163 = icmp ult i32 %158, 4
  br i1 %163, label %164, label %169

164:                                              ; preds = %162
  %165 = shl nsw i32 -1, %158
  %166 = xor i32 %165, -1
  %167 = icmp eq i32 %160, %166
  br i1 %167, label %169, label %168

168:                                              ; preds = %164, %157
  br label %169

169:                                              ; preds = %168, %164, %162
  %170 = phi i32 [ 0, %168 ], [ %160, %164 ], [ %160, %162 ]
  %171 = load ptr, ptr @dump_file, align 8, !tbaa !5
  %172 = icmp eq ptr %171, null
  br i1 %172, label %177, label %173

173:                                              ; preds = %169
  %174 = getelementptr inbounds %struct.rtx_def, ptr %149, i64 0, i32 1
  %175 = load i32, ptr %174, align 8, !tbaa !16
  %176 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef nonnull %171, ptr noundef nonnull @.str.1350, i32 noundef %175, i32 noundef %170)
  br label %177

177:                                              ; preds = %173, %169
  %178 = icmp ne i32 %170, 0
  %179 = add nsw i32 %170, %151
  %180 = icmp sgt i32 %179, 15
  %181 = select i1 %178, i1 %180, i1 false
  br i1 %181, label %182, label %411

182:                                              ; preds = %177, %261
  %183 = phi ptr [ %187, %261 ], [ %150, %177 ]
  %184 = phi i32 [ %265, %261 ], [ %151, %177 ]
  %185 = phi i32 [ %263, %261 ], [ %153, %177 ]
  %186 = getelementptr inbounds %struct.rtx_def, ptr %183, i64 0, i32 1, i32 0, i32 0, i64 2
  %187 = load ptr, ptr %186, align 8, !tbaa !16
  %188 = load i32, ptr %187, align 8
  %189 = trunc i32 %188 to i16
  switch i16 %189, label %198 [
    i16 9, label %190
    i16 10, label %196
  ]

190:                                              ; preds = %182
  %191 = getelementptr inbounds %struct.rtx_def, ptr %187, i64 1
  %192 = load ptr, ptr %191, align 8, !tbaa !16
  %193 = load i32, ptr %192, align 8
  %194 = and i32 %193, 65534
  %195 = icmp eq i32 %194, 20
  br i1 %195, label %202, label %196

196:                                              ; preds = %190, %182
  %197 = add nsw i32 %185, -1
  br label %202

198:                                              ; preds = %182
  %199 = and i32 %188, 65535
  %200 = add nsw i32 %199, -7
  %201 = icmp ult i32 %200, 4
  br i1 %201, label %202, label %261

202:                                              ; preds = %198, %196, %190
  %203 = phi i32 [ 0, %198 ], [ 1, %196 ], [ 0, %190 ]
  %204 = phi i32 [ %185, %198 ], [ %197, %196 ], [ %185, %190 ]
  %205 = tail call i32 @active_insn_p(ptr noundef nonnull %187) #30
  %206 = icmp eq i32 %205, 0
  br i1 %206, label %261, label %207

207:                                              ; preds = %202
  %208 = getelementptr inbounds %struct.rtx_def, ptr %187, i64 1
  %209 = load ptr, ptr %208, align 8, !tbaa !16
  %210 = load i32, ptr %209, align 8
  %211 = and i32 %210, 65535
  %212 = icmp eq i32 %211, 19
  br i1 %212, label %213, label %217

213:                                              ; preds = %207
  %214 = getelementptr inbounds %struct.rtx_def, ptr %209, i64 0, i32 1, i32 0, i32 0, i64 1
  %215 = load i32, ptr %214, align 8, !tbaa !16
  %216 = icmp eq i32 %215, 7
  br i1 %216, label %261, label %217

217:                                              ; preds = %213, %207
  %218 = load i32, ptr %187, align 8
  %219 = trunc i32 %218 to i16
  switch i16 %219, label %229 [
    i16 9, label %220
    i16 10, label %223
  ]

220:                                              ; preds = %217
  %221 = and i32 %210, 65534
  %222 = icmp eq i32 %221, 20
  br i1 %222, label %261, label %229

223:                                              ; preds = %217
  %224 = tail call i32 @symbolic_reference_mentioned_p(ptr noundef nonnull %209)
  %225 = icmp ne i32 %224, 0
  %226 = and i32 %218, 16777216
  %227 = icmp eq i32 %226, 0
  %228 = and i1 %227, %225
  br i1 %228, label %261, label %229

229:                                              ; preds = %223, %220, %217
  %230 = tail call i32 @get_attr_length(ptr noundef nonnull %187) #30
  %231 = icmp slt i32 %230, 2
  br i1 %231, label %261, label %232

232:                                              ; preds = %229
  %233 = load i32, ptr %187, align 8
  %234 = and i32 %233, 65535
  %235 = icmp eq i32 %234, 9
  br i1 %235, label %260, label %236

236:                                              ; preds = %232
  %237 = tail call i32 @get_attr_type(ptr noundef nonnull %187) #30
  switch i32 %237, label %261 [
    i32 1, label %238
    i32 0, label %246
    i32 34, label %246
  ]

238:                                              ; preds = %236
  %239 = load ptr, ptr %208, align 8, !tbaa !16
  %240 = load i32, ptr %239, align 8
  %241 = and i32 %240, 65535
  %242 = icmp eq i32 %241, 16
  br i1 %242, label %261, label %243

243:                                              ; preds = %238
  %244 = tail call i32 @asm_noperands(ptr noundef nonnull %239) #30
  %245 = icmp sgt i32 %244, -1
  br i1 %245, label %261, label %246

246:                                              ; preds = %243, %236, %236
  %247 = tail call i32 @get_attr_length_address(ptr noundef nonnull %187) #30
  %248 = freeze i32 %247
  %249 = icmp slt i32 %248, 4
  br i1 %249, label %250, label %254

250:                                              ; preds = %246
  %251 = load ptr, ptr %208, align 8, !tbaa !16
  %252 = tail call i32 @symbolic_reference_mentioned_p(ptr noundef %251)
  %253 = icmp eq i32 %252, 0
  br i1 %253, label %257, label %254

254:                                              ; preds = %250, %246
  %255 = phi i32 [ 4, %250 ], [ %248, %246 ]
  %256 = add nuw nsw i32 %255, 1
  br label %261

257:                                              ; preds = %250
  %258 = icmp eq i32 %248, 0
  %259 = add nsw i32 %248, 1
  br i1 %258, label %260, label %261

260:                                              ; preds = %257, %232
  br label %261

261:                                              ; preds = %260, %257, %254, %243, %238, %236, %229, %223, %220, %213, %202, %198
  %262 = phi i32 [ 0, %198 ], [ %203, %202 ], [ %203, %213 ], [ %203, %220 ], [ %203, %229 ], [ %203, %260 ], [ %203, %257 ], [ %203, %254 ], [ %203, %236 ], [ %203, %238 ], [ %203, %243 ], [ %203, %223 ]
  %263 = phi i32 [ %185, %198 ], [ %204, %202 ], [ %204, %213 ], [ %204, %220 ], [ %204, %229 ], [ %204, %260 ], [ %204, %257 ], [ %204, %254 ], [ %204, %236 ], [ %204, %238 ], [ %204, %243 ], [ %204, %223 ]
  %264 = phi i32 [ 0, %198 ], [ 0, %202 ], [ 0, %213 ], [ 0, %220 ], [ 1, %229 ], [ 2, %260 ], [ %259, %257 ], [ %256, %254 ], [ %230, %236 ], [ 0, %238 ], [ 0, %243 ], [ 5, %223 ]
  %265 = sub nsw i32 %184, %264
  %266 = add nsw i32 %265, %170
  %267 = icmp sgt i32 %266, 15
  br i1 %267, label %182, label %411, !llvm.loop !381

268:                                              ; preds = %148
  %269 = tail call fastcc i32 @min_insn_size(ptr noundef nonnull %149)
  %270 = add nsw i32 %269, %151
  %271 = load ptr, ptr @dump_file, align 8, !tbaa !5
  %272 = icmp eq ptr %271, null
  br i1 %272, label %277, label %273

273:                                              ; preds = %268
  %274 = getelementptr inbounds %struct.rtx_def, ptr %149, i64 0, i32 1
  %275 = load i32, ptr %274, align 8, !tbaa !16
  %276 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef nonnull %271, ptr noundef nonnull @.str.1351, i32 noundef %275, i32 noundef %269)
  br label %277

277:                                              ; preds = %273, %268
  %278 = load i32, ptr %149, align 8
  %279 = trunc i32 %278 to i16
  switch i16 %279, label %411 [
    i16 9, label %280
    i16 10, label %286
  ]

280:                                              ; preds = %277
  %281 = getelementptr inbounds %struct.rtx_def, ptr %149, i64 1
  %282 = load ptr, ptr %281, align 8, !tbaa !16
  %283 = load i32, ptr %282, align 8
  %284 = and i32 %283, 65534
  %285 = icmp eq i32 %284, 20
  br i1 %285, label %411, label %286

286:                                              ; preds = %280, %277
  %287 = add nsw i32 %153, 1
  %288 = icmp sgt i32 %153, 2
  br i1 %288, label %289, label %374

289:                                              ; preds = %286, %368
  %290 = phi ptr [ %294, %368 ], [ %150, %286 ]
  %291 = phi i32 [ %372, %368 ], [ %270, %286 ]
  %292 = phi i32 [ %370, %368 ], [ %287, %286 ]
  %293 = getelementptr inbounds %struct.rtx_def, ptr %290, i64 0, i32 1, i32 0, i32 0, i64 2
  %294 = load ptr, ptr %293, align 8, !tbaa !16
  %295 = load i32, ptr %294, align 8
  %296 = trunc i32 %295 to i16
  switch i16 %296, label %305 [
    i16 9, label %297
    i16 10, label %303
  ]

297:                                              ; preds = %289
  %298 = getelementptr inbounds %struct.rtx_def, ptr %294, i64 1
  %299 = load ptr, ptr %298, align 8, !tbaa !16
  %300 = load i32, ptr %299, align 8
  %301 = and i32 %300, 65534
  %302 = icmp eq i32 %301, 20
  br i1 %302, label %309, label %303

303:                                              ; preds = %297, %289
  %304 = add nsw i32 %292, -1
  br label %309

305:                                              ; preds = %289
  %306 = and i32 %295, 65535
  %307 = add nsw i32 %306, -7
  %308 = icmp ult i32 %307, 4
  br i1 %308, label %309, label %368

309:                                              ; preds = %305, %303, %297
  %310 = phi i32 [ 0, %305 ], [ 1, %303 ], [ 0, %297 ]
  %311 = phi i32 [ %292, %305 ], [ %304, %303 ], [ %292, %297 ]
  %312 = tail call i32 @active_insn_p(ptr noundef nonnull %294) #30
  %313 = icmp eq i32 %312, 0
  br i1 %313, label %368, label %314

314:                                              ; preds = %309
  %315 = getelementptr inbounds %struct.rtx_def, ptr %294, i64 1
  %316 = load ptr, ptr %315, align 8, !tbaa !16
  %317 = load i32, ptr %316, align 8
  %318 = and i32 %317, 65535
  %319 = icmp eq i32 %318, 19
  br i1 %319, label %320, label %324

320:                                              ; preds = %314
  %321 = getelementptr inbounds %struct.rtx_def, ptr %316, i64 0, i32 1, i32 0, i32 0, i64 1
  %322 = load i32, ptr %321, align 8, !tbaa !16
  %323 = icmp eq i32 %322, 7
  br i1 %323, label %368, label %324

324:                                              ; preds = %320, %314
  %325 = load i32, ptr %294, align 8
  %326 = trunc i32 %325 to i16
  switch i16 %326, label %336 [
    i16 9, label %327
    i16 10, label %330
  ]

327:                                              ; preds = %324
  %328 = and i32 %317, 65534
  %329 = icmp eq i32 %328, 20
  br i1 %329, label %368, label %336

330:                                              ; preds = %324
  %331 = tail call i32 @symbolic_reference_mentioned_p(ptr noundef nonnull %316)
  %332 = icmp ne i32 %331, 0
  %333 = and i32 %325, 16777216
  %334 = icmp eq i32 %333, 0
  %335 = and i1 %334, %332
  br i1 %335, label %368, label %336

336:                                              ; preds = %330, %327, %324
  %337 = tail call i32 @get_attr_length(ptr noundef nonnull %294) #30
  %338 = icmp slt i32 %337, 2
  br i1 %338, label %368, label %339

339:                                              ; preds = %336
  %340 = load i32, ptr %294, align 8
  %341 = and i32 %340, 65535
  %342 = icmp eq i32 %341, 9
  br i1 %342, label %367, label %343

343:                                              ; preds = %339
  %344 = tail call i32 @get_attr_type(ptr noundef nonnull %294) #30
  switch i32 %344, label %368 [
    i32 1, label %345
    i32 0, label %353
    i32 34, label %353
  ]

345:                                              ; preds = %343
  %346 = load ptr, ptr %315, align 8, !tbaa !16
  %347 = load i32, ptr %346, align 8
  %348 = and i32 %347, 65535
  %349 = icmp eq i32 %348, 16
  br i1 %349, label %368, label %350

350:                                              ; preds = %345
  %351 = tail call i32 @asm_noperands(ptr noundef nonnull %346) #30
  %352 = icmp sgt i32 %351, -1
  br i1 %352, label %368, label %353

353:                                              ; preds = %350, %343, %343
  %354 = tail call i32 @get_attr_length_address(ptr noundef nonnull %294) #30
  %355 = freeze i32 %354
  %356 = icmp slt i32 %355, 4
  br i1 %356, label %357, label %361

357:                                              ; preds = %353
  %358 = load ptr, ptr %315, align 8, !tbaa !16
  %359 = tail call i32 @symbolic_reference_mentioned_p(ptr noundef %358)
  %360 = icmp eq i32 %359, 0
  br i1 %360, label %364, label %361

361:                                              ; preds = %357, %353
  %362 = phi i32 [ 4, %357 ], [ %355, %353 ]
  %363 = add nuw nsw i32 %362, 1
  br label %368

364:                                              ; preds = %357
  %365 = icmp eq i32 %355, 0
  %366 = add nsw i32 %355, 1
  br i1 %365, label %367, label %368

367:                                              ; preds = %364, %339
  br label %368

368:                                              ; preds = %367, %364, %361, %350, %345, %343, %336, %330, %327, %320, %309, %305
  %369 = phi i32 [ 0, %305 ], [ %310, %309 ], [ %310, %320 ], [ %310, %327 ], [ %310, %336 ], [ %310, %367 ], [ %310, %364 ], [ %310, %361 ], [ %310, %343 ], [ %310, %345 ], [ %310, %350 ], [ %310, %330 ]
  %370 = phi i32 [ %292, %305 ], [ %311, %309 ], [ %311, %320 ], [ %311, %327 ], [ %311, %336 ], [ %311, %367 ], [ %311, %364 ], [ %311, %361 ], [ %311, %343 ], [ %311, %345 ], [ %311, %350 ], [ %311, %330 ]
  %371 = phi i32 [ 0, %305 ], [ 0, %309 ], [ 0, %320 ], [ 0, %327 ], [ 1, %336 ], [ 2, %367 ], [ %366, %364 ], [ %363, %361 ], [ %337, %343 ], [ 0, %345 ], [ 0, %350 ], [ 5, %330 ]
  %372 = sub nsw i32 %291, %371
  %373 = icmp sgt i32 %370, 3
  br i1 %373, label %289, label %374, !llvm.loop !382

374:                                              ; preds = %368, %286
  %375 = phi i32 [ %287, %286 ], [ %370, %368 ]
  %376 = phi i32 [ %152, %286 ], [ %369, %368 ]
  %377 = phi i32 [ %270, %286 ], [ %372, %368 ]
  %378 = phi ptr [ %150, %286 ], [ %294, %368 ]
  %379 = icmp sgt i32 %375, -1
  br i1 %379, label %381, label %380

380:                                              ; preds = %374
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 26558, ptr noundef nonnull @.str.131) #30
  br label %381

381:                                              ; preds = %380, %374
  %382 = load ptr, ptr @dump_file, align 8, !tbaa !5
  %383 = icmp eq ptr %382, null
  br i1 %383, label %390, label %384

384:                                              ; preds = %381
  %385 = getelementptr inbounds %struct.rtx_def, ptr %378, i64 0, i32 1
  %386 = load i32, ptr %385, align 8, !tbaa !16
  %387 = getelementptr inbounds %struct.rtx_def, ptr %149, i64 0, i32 1
  %388 = load i32, ptr %387, align 8, !tbaa !16
  %389 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef nonnull %382, ptr noundef nonnull @.str.1352, i32 noundef %386, i32 noundef %388, i32 noundef %377)
  br label %390

390:                                              ; preds = %384, %381
  %391 = icmp eq i32 %375, 3
  %392 = icmp ne i32 %376, 0
  %393 = select i1 %391, i1 %392, i1 false
  %394 = icmp slt i32 %377, 16
  %395 = select i1 %393, i1 %394, i1 false
  br i1 %395, label %396, label %411

396:                                              ; preds = %390
  %397 = tail call fastcc i32 @min_insn_size(ptr noundef nonnull %149)
  %398 = sub i32 %397, %377
  %399 = add i32 %398, 15
  %400 = load ptr, ptr @dump_file, align 8, !tbaa !5
  %401 = icmp eq ptr %400, null
  br i1 %401, label %406, label %402

402:                                              ; preds = %396
  %403 = getelementptr inbounds %struct.rtx_def, ptr %149, i64 0, i32 1
  %404 = load i32, ptr %403, align 8, !tbaa !16
  %405 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef nonnull %400, ptr noundef nonnull @.str.1353, i32 noundef %404, i32 noundef %399)
  br label %406

406:                                              ; preds = %402, %396
  %407 = sext i32 %399 to i64
  %408 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef %407) #30
  %409 = tail call ptr @gen_pad(ptr noundef %408) #30
  %410 = tail call ptr @emit_insn_before(ptr noundef %409, ptr noundef nonnull %149) #30
  br label %411

411:                                              ; preds = %261, %406, %390, %280, %277, %177
  %412 = phi i32 [ %153, %177 ], [ 3, %406 ], [ %375, %390 ], [ %153, %280 ], [ %153, %277 ], [ %263, %261 ]
  %413 = phi i32 [ %152, %177 ], [ %376, %406 ], [ %376, %390 ], [ %152, %280 ], [ %152, %277 ], [ %262, %261 ]
  %414 = phi i32 [ %151, %177 ], [ %377, %406 ], [ %377, %390 ], [ %270, %280 ], [ %270, %277 ], [ %265, %261 ]
  %415 = phi ptr [ %150, %177 ], [ %378, %406 ], [ %378, %390 ], [ %150, %280 ], [ %150, %277 ], [ %187, %261 ]
  %416 = getelementptr inbounds %struct.rtx_def, ptr %149, i64 0, i32 1, i32 0, i32 0, i64 2
  %417 = load ptr, ptr %416, align 8, !tbaa !16
  %418 = icmp eq ptr %417, null
  br i1 %418, label %419, label %148, !llvm.loop !383

419:                                              ; preds = %411, %145, %142, %3, %0
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define internal ptr @ix86_build_builtin_va_list() #9 {
  %1 = load ptr, ptr @integer_types, align 16, !tbaa !5
  %2 = tail call ptr @build_pointer_type(ptr noundef %1) #30
  ret ptr %2
}

; Function Attrs: nounwind sspstrong uwtable
define internal void @ix86_va_start(ptr noundef %0, ptr noundef %1) #9 {
  tail call void @std_expand_builtin_va_start(ptr noundef %0, ptr noundef %1) #30
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define internal ptr @ix86_gimplify_va_arg(ptr noundef %0, ptr noundef %1, ptr noundef %2, ptr noundef %3) #9 {
  %5 = tail call ptr @std_gimplify_va_arg_expr(ptr noundef %0, ptr noundef %1, ptr noundef %2, ptr noundef %3) #30
  ret ptr %5
}

declare ptr @default_get_pch_validity(ptr noundef) #3

declare ptr @default_pch_valid_p(ptr noundef, i64 noundef) #3

; Function Attrs: mustprogress nofree norecurse nosync nounwind sspstrong willreturn memory(read, argmem: none, inaccessiblemem: none) uwtable
define internal ptr @ix86_builtin_setjmp_frame_value() #16 {
  %1 = load i8, ptr getelementptr inbounds (%struct.rtl_data, ptr @x_rtl, i64 0, i32 43), align 1, !tbaa !130
  %2 = icmp eq i8 %1, 0
  %3 = load i8, ptr getelementptr inbounds (%struct.rtl_data, ptr @x_rtl, i64 0, i32 45), align 1
  %4 = icmp ne i8 %3, 0
  %5 = select i1 %2, i1 true, i1 %4
  %6 = load ptr, ptr getelementptr inbounds ([11 x ptr], ptr @global_rtl, i64 0, i64 4), align 16
  %7 = load ptr, ptr getelementptr inbounds ([11 x ptr], ptr @global_rtl, i64 0, i64 7), align 8
  %8 = select i1 %5, ptr %7, ptr %6
  ret ptr %8
}

; Function Attrs: nounwind sspstrong uwtable
define internal ptr @ix86_md_asm_clobbers(ptr nocapture readnone %0, ptr nocapture readnone %1, ptr noundef %2) #9 {
  %4 = tail call ptr @build_string(i32 noundef 5, ptr noundef nonnull @.str.356) #30
  %5 = tail call ptr @tree_cons_stat(ptr noundef null, ptr noundef %4, ptr noundef %2) #30
  %6 = tail call ptr @build_string(i32 noundef 4, ptr noundef nonnull @.str.357) #30
  %7 = tail call ptr @tree_cons_stat(ptr noundef null, ptr noundef %6, ptr noundef %5) #30
  ret ptr %7
}

declare i32 @hook_int_const_tree_0(ptr noundef) #3

declare ptr @default_stack_protect_guard() #3

; Function Attrs: nounwind sspstrong uwtable
define internal ptr @ix86_stack_protect_fail() #9 {
  %1 = tail call ptr @default_hidden_stack_protect_fail() #30
  ret ptr %1
}

declare ptr @default_invalid_within_doloop(ptr noundef) #3

declare zeroext i8 @hook_bool_const_tree_true(ptr noundef) #3

declare i32 @default_promote_function_mode(ptr noundef, i32 noundef, ptr noundef, ptr noundef, i32 noundef) #3

; Function Attrs: nounwind sspstrong uwtable
define internal noalias ptr @ix86_struct_value_rtx(ptr noundef readonly %0, i32 %1) #9 {
  %3 = icmp eq ptr %0, null
  br i1 %3, label %57, label %4

4:                                                ; preds = %2
  %5 = getelementptr inbounds %struct.tree_common, ptr %0, i64 0, i32 2
  %6 = load ptr, ptr %5, align 8, !tbaa !16
  %7 = load i64, ptr %6, align 8
  %8 = and i64 %7, 65535
  %9 = icmp eq i64 %8, 14
  br i1 %9, label %10, label %12

10:                                               ; preds = %4
  %11 = tail call i32 @vector_type_mode(ptr noundef nonnull %6) #30
  br label %17

12:                                               ; preds = %4
  %13 = getelementptr inbounds %struct.tree_type, ptr %6, i64 0, i32 6
  %14 = load i32, ptr %13, align 4
  %15 = lshr i32 %14, 16
  %16 = and i32 %15, 255
  br label %17

17:                                               ; preds = %12, %10
  %18 = phi i32 [ %11, %10 ], [ %16, %12 ]
  %19 = load i32, ptr @ix86_isa_flags, align 4, !tbaa !20
  %20 = and i32 %19, 65536
  %21 = icmp ne i32 %20, 0
  %22 = load i1, ptr @ix86_struct_value_rtx.warnedsse, align 1
  %23 = select i1 %21, i1 true, i1 %22
  br i1 %23, label %39, label %24

24:                                               ; preds = %17
  %25 = icmp eq i32 %18, 18
  br i1 %25, label %36, label %26

26:                                               ; preds = %24
  %27 = zext i32 %18 to i64
  %28 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %27
  %29 = load i8, ptr %28, align 1, !tbaa !16
  %30 = add i8 %29, -12
  %31 = icmp ult i8 %30, 6
  br i1 %31, label %32, label %39

32:                                               ; preds = %26
  %33 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %27
  %34 = load i8, ptr %33, align 1, !tbaa !16
  %35 = icmp eq i8 %34, 16
  br i1 %35, label %36, label %39

36:                                               ; preds = %32, %24
  store i1 true, ptr @ix86_struct_value_rtx.warnedsse, align 1
  %37 = tail call zeroext i8 (i32, ptr, ...) @warning(i32 noundef 0, ptr noundef nonnull @.str.1354) #30
  %38 = load i32, ptr @ix86_isa_flags, align 4, !tbaa !20
  br label %39

39:                                               ; preds = %26, %32, %36, %17
  %40 = phi i32 [ %19, %26 ], [ %19, %32 ], [ %38, %36 ], [ %19, %17 ]
  %41 = and i32 %40, 2048
  %42 = icmp ne i32 %41, 0
  %43 = load i1, ptr @ix86_struct_value_rtx.warnedmmx, align 1
  %44 = select i1 %42, i1 true, i1 %43
  br i1 %44, label %57, label %45

45:                                               ; preds = %39
  %46 = zext i32 %18 to i64
  %47 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %46
  %48 = load i8, ptr %47, align 1, !tbaa !16
  %49 = add i8 %48, -12
  %50 = icmp ult i8 %49, 6
  br i1 %50, label %51, label %57

51:                                               ; preds = %45
  %52 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %46
  %53 = load i8, ptr %52, align 1, !tbaa !16
  %54 = icmp eq i8 %53, 8
  br i1 %54, label %55, label %57

55:                                               ; preds = %51
  store i1 true, ptr @ix86_struct_value_rtx.warnedmmx, align 1
  %56 = tail call zeroext i8 (i32, ptr, ...) @warning(i32 noundef 0, ptr noundef nonnull @.str.1355) #30
  br label %57

57:                                               ; preds = %45, %39, %55, %51, %2
  ret ptr null
}

; Function Attrs: nounwind sspstrong uwtable
define internal zeroext i8 @ix86_return_in_memory(ptr noundef %0, ptr nocapture readnone %1) #9 {
  %3 = tail call fastcc i32 @type_natural_mode(ptr noundef %0, ptr noundef null)
  %4 = icmp eq i32 %3, 1
  br i1 %4, label %39, label %5

5:                                                ; preds = %2
  %6 = tail call i64 @int_size_in_bytes(ptr noundef %0) #30
  %7 = zext i32 %3 to i64
  %8 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %7
  %9 = load i8, ptr %8, align 1, !tbaa !16
  switch i8 %9, label %10 [
    i8 12, label %14
    i8 17, label %14
    i8 13, label %14
    i8 14, label %14
    i8 15, label %14
  ]

10:                                               ; preds = %5
  %11 = icmp eq i8 %9, 16
  %12 = icmp eq i32 %3, 18
  %13 = or i1 %12, %11
  br i1 %13, label %14, label %32

14:                                               ; preds = %10, %5, %5, %5, %5, %5
  %15 = icmp slt i64 %6, 8
  br i1 %15, label %39, label %16

16:                                               ; preds = %14
  switch i64 %6, label %32 [
    i64 8, label %17
    i64 16, label %22
    i64 32, label %27
  ]

17:                                               ; preds = %16
  %18 = load i32, ptr @ix86_isa_flags, align 4, !tbaa !20
  %19 = lshr i32 %18, 11
  %20 = and i32 %19, 1
  %21 = xor i32 %20, 1
  br label %39

22:                                               ; preds = %16
  %23 = load i32, ptr @ix86_isa_flags, align 4, !tbaa !20
  %24 = lshr i32 %23, 16
  %25 = and i32 %24, 1
  %26 = xor i32 %25, 1
  br label %39

27:                                               ; preds = %16
  %28 = load i32, ptr @ix86_isa_flags, align 4, !tbaa !20
  %29 = lshr i32 %28, 5
  %30 = and i32 %29, 1
  %31 = xor i32 %30, 1
  br label %39

32:                                               ; preds = %16, %10
  %33 = icmp eq i32 %3, 40
  br i1 %33, label %39, label %34

34:                                               ; preds = %32
  %35 = icmp sgt i64 %6, 12
  br i1 %35, label %39, label %36

36:                                               ; preds = %34
  %37 = icmp eq i32 %3, 19
  br i1 %37, label %38, label %39

38:                                               ; preds = %36
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 6509, ptr noundef nonnull @.str.131) #30
  br label %39

39:                                               ; preds = %2, %14, %17, %22, %27, %32, %34, %36, %38
  %40 = phi i32 [ %21, %17 ], [ %26, %22 ], [ %31, %27 ], [ 1, %2 ], [ 0, %14 ], [ 0, %32 ], [ 1, %34 ], [ 0, %36 ], [ 0, %38 ]
  %41 = trunc i32 %40 to i8
  ret i8 %41
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind sspstrong willreturn memory(none) uwtable
define internal zeroext i8 @ix86_pass_by_reference(ptr nocapture readnone %0, i32 %1, ptr nocapture readnone %2, i8 zeroext %3) #11 {
  ret i8 0
}

declare ptr @default_expand_builtin_saveregs() #3

; Function Attrs: nounwind sspstrong uwtable
define internal void @ix86_setup_incoming_varargs(ptr nocapture readnone %0, i32 %1, ptr nocapture readnone %2, ptr nocapture readnone %3, i32 noundef %4) #9 {
  %6 = icmp eq i32 %4, 0
  br i1 %6, label %8, label %7

7:                                                ; preds = %5
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 6878, ptr noundef nonnull @.str.131) #30
  br label %8

8:                                                ; preds = %5, %7
  ret void
}

declare zeroext i8 @hook_bool_CUMULATIVE_ARGS_true(ptr noundef) #3

declare zeroext i8 @default_pretend_outgoing_varargs_named(ptr noundef) #3

; Function Attrs: nounwind sspstrong uwtable
define internal zeroext i8 @ix86_must_pass_in_stack(i32 noundef %0, ptr noundef %1) #9 {
  %3 = tail call zeroext i8 @must_pass_in_stack_var_size_or_pad(i32 noundef %0, ptr noundef %1) #30
  %4 = icmp eq i8 %3, 0
  br i1 %4, label %5, label %14

5:                                                ; preds = %2
  %6 = icmp eq i32 %0, 18
  %7 = icmp ne ptr %1, null
  %8 = and i1 %6, %7
  br i1 %8, label %9, label %14

9:                                                ; preds = %5
  %10 = load i64, ptr %1, align 8
  %11 = and i64 %10, 65535
  %12 = icmp ne i64 %11, 14
  %13 = zext i1 %12 to i8
  br label %14

14:                                               ; preds = %5, %9, %2
  %15 = phi i8 [ 1, %2 ], [ 0, %5 ], [ %13, %9 ]
  ret i8 %15
}

declare zeroext i8 @hook_bool_CUMULATIVE_ARGS_mode_tree_bool_false(ptr noundef, i32 noundef, ptr noundef, i8 noundef zeroext) #3

declare i32 @hook_int_CUMULATIVE_ARGS_mode_tree_bool_0(ptr noundef, i32 noundef, ptr noundef, i8 noundef zeroext) #3

declare ptr @hook_invalid_arg_for_unprototyped_fn(ptr noundef, ptr noundef, ptr noundef) #3

; Function Attrs: nounwind sspstrong uwtable
define internal ptr @ix86_function_value(ptr noundef %0, ptr noundef %1, i8 zeroext %2) #9 {
  %4 = load i64, ptr %0, align 8
  %5 = and i64 %4, 65535
  %6 = icmp eq i64 %5, 14
  br i1 %6, label %7, label %9

7:                                                ; preds = %3
  %8 = tail call i32 @vector_type_mode(ptr noundef nonnull %0) #30
  br label %14

9:                                                ; preds = %3
  %10 = getelementptr inbounds %struct.tree_type, ptr %0, i64 0, i32 6
  %11 = load i32, ptr %10, align 4
  %12 = lshr i32 %11, 16
  %13 = and i32 %12, 255
  br label %14

14:                                               ; preds = %9, %7
  %15 = phi i32 [ %8, %7 ], [ %13, %9 ]
  %16 = tail call fastcc i32 @type_natural_mode(ptr noundef nonnull %0, ptr noundef null)
  %17 = icmp eq ptr %1, null
  br i1 %17, label %28, label %18

18:                                               ; preds = %14
  %19 = load i64, ptr %1, align 8
  %20 = and i64 %19, 65535
  %21 = getelementptr inbounds [0 x i32], ptr @tree_code_type, i64 0, i64 %20
  %22 = load i32, ptr %21, align 4, !tbaa !16
  %23 = icmp eq i32 %22, 3
  br i1 %23, label %24, label %28

24:                                               ; preds = %18
  %25 = getelementptr inbounds %struct.tree_common, ptr %1, i64 0, i32 2
  %26 = load ptr, ptr %25, align 8, !tbaa !16
  %27 = tail call fastcc ptr @function_value_32(i32 noundef %15, i32 noundef %16, ptr noundef %26, ptr noundef nonnull %1)
  br label %30

28:                                               ; preds = %18, %14
  %29 = tail call fastcc ptr @function_value_32(i32 noundef %15, i32 noundef %16, ptr noundef %1, ptr noundef null)
  br label %30

30:                                               ; preds = %24, %28
  %31 = phi ptr [ %27, %24 ], [ %29, %28 ]
  ret ptr %31
}

declare ptr @default_libcall_value(i32 noundef, ptr noundef) #3

; Function Attrs: mustprogress nofree norecurse nosync nounwind sspstrong willreturn memory(read, argmem: none, inaccessiblemem: none) uwtable
define internal ptr @ix86_internal_arg_pointer() #16 {
  %1 = load ptr, ptr getelementptr inbounds ([11 x ptr], ptr @global_rtl, i64 0, i64 6), align 16, !tbaa !5
  ret ptr %1
}

; Function Attrs: nounwind sspstrong uwtable
define internal void @ix86_update_stack_boundary() #9 {
  %1 = load i32, ptr @ix86_user_incoming_stack_boundary, align 4, !tbaa !20
  %2 = icmp eq i32 %1, 0
  br i1 %2, label %3, label %10

3:                                                ; preds = %0
  %4 = load i32, ptr @ix86_force_align_arg_pointer, align 4
  %5 = icmp ne i32 %4, 0
  %6 = load i32, ptr getelementptr inbounds (%struct.rtl_data, ptr @x_rtl, i64 0, i32 26), align 4
  %7 = icmp eq i32 %6, 128
  %8 = select i1 %5, i1 %7, i1 false
  %9 = load i32, ptr @ix86_default_incoming_stack_boundary, align 4
  br i1 %8, label %22, label %10

10:                                               ; preds = %3, %0
  %11 = phi i32 [ %1, %0 ], [ %9, %3 ]
  %12 = icmp ugt i32 %11, 32
  br i1 %12, label %13, label %22

13:                                               ; preds = %10
  %14 = load ptr, ptr @current_function_decl, align 8, !tbaa !5
  %15 = getelementptr inbounds %struct.tree_common, ptr %14, i64 0, i32 2
  %16 = load ptr, ptr %15, align 8, !tbaa !16
  %17 = getelementptr inbounds %struct.tree_type, ptr %16, i64 0, i32 4
  %18 = load ptr, ptr %17, align 8, !tbaa !16
  %19 = tail call ptr @lookup_attribute(ptr noundef nonnull @ix86_force_align_arg_pointer_string, ptr noundef %18) #30
  %20 = icmp eq ptr %19, null
  %21 = select i1 %20, i32 %11, i32 32
  br label %22

22:                                               ; preds = %13, %10, %3
  %23 = phi i32 [ %11, %10 ], [ %21, %13 ], [ 32, %3 ]
  %24 = load i32, ptr getelementptr inbounds (%struct.rtl_data, ptr @x_rtl, i64 0, i32 24), align 4, !tbaa !360
  %25 = tail call i32 @llvm.umax.i32(i32 %23, i32 %24)
  %26 = icmp ugt i32 %25, 32
  br i1 %26, label %27, label %44

27:                                               ; preds = %22
  %28 = load ptr, ptr @current_function_decl, align 8, !tbaa !5
  %29 = getelementptr inbounds %struct.tree_decl_minimal, ptr %28, i64 0, i32 3
  %30 = load ptr, ptr %29, align 8, !tbaa !16
  %31 = icmp ne ptr %30, null
  %32 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 56), align 16
  %33 = icmp eq ptr %30, %32
  %34 = select i1 %31, i1 %33, i1 false
  br i1 %34, label %35, label %44

35:                                               ; preds = %27
  %36 = getelementptr inbounds %struct.tree_decl_minimal, ptr %28, i64 0, i32 4
  %37 = load ptr, ptr %36, align 8, !tbaa !16
  %38 = icmp eq ptr %37, null
  br i1 %38, label %43, label %39

39:                                               ; preds = %35
  %40 = load i64, ptr %37, align 8
  %41 = and i64 %40, 65535
  %42 = icmp eq i64 %41, 40
  br i1 %42, label %43, label %44

43:                                               ; preds = %39, %35
  br label %44

44:                                               ; preds = %22, %27, %39, %43
  %45 = phi i32 [ 32, %43 ], [ %25, %39 ], [ %25, %27 ], [ %25, %22 ]
  store i32 %45, ptr @ix86_incoming_stack_boundary, align 4, !tbaa !20
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define internal ptr @ix86_get_drap_rtx() #9 {
  %1 = load i32, ptr @ix86_force_drap, align 4, !tbaa !20
  %2 = icmp eq i32 %1, 0
  br i1 %2, label %3, label %13

3:                                                ; preds = %0
  %4 = load i32, ptr @target_flags, align 4, !tbaa !20
  %5 = and i32 %4, 4
  %6 = icmp ne i32 %5, 0
  %7 = load i32, ptr @ix86_abi, align 4
  %8 = icmp eq i32 %7, 1
  %9 = select i1 %6, i1 true, i1 %8
  br i1 %9, label %10, label %13

10:                                               ; preds = %3
  %11 = load i8, ptr getelementptr inbounds (%struct.rtl_data, ptr @x_rtl, i64 0, i32 45), align 1
  %12 = icmp ne i8 %11, 0
  br label %14

13:                                               ; preds = %3, %0
  store i8 1, ptr getelementptr inbounds (%struct.rtl_data, ptr @x_rtl, i64 0, i32 45), align 1, !tbaa !384
  br label %14

14:                                               ; preds = %10, %13
  %15 = phi i1 [ %12, %10 ], [ true, %13 ]
  %16 = load i8, ptr getelementptr inbounds (%struct.rtl_data, ptr @x_rtl, i64 0, i32 43), align 1, !tbaa !130
  %17 = icmp ne i8 %16, 0
  %18 = select i1 %17, i1 %15, i1 false
  br i1 %18, label %19, label %56

19:                                               ; preds = %14
  %20 = load ptr, ptr @cfun, align 8, !tbaa !5
  %21 = getelementptr inbounds %struct.function, ptr %20, i64 0, i32 6
  %22 = load ptr, ptr %21, align 8, !tbaa !148
  %23 = getelementptr inbounds %struct.tree_function_decl, ptr %22, i64 0, i32 5
  %24 = load i32, ptr %23, align 8
  %25 = and i32 %24, 4194304
  %26 = icmp ne i32 %25, 0
  %27 = load i8, ptr getelementptr inbounds (%struct.rtl_data, ptr @x_rtl, i64 0, i32 39), align 1
  %28 = icmp ne i8 %27, 0
  %29 = select i1 %26, i1 true, i1 %28
  br i1 %29, label %42, label %30

30:                                               ; preds = %19
  %31 = getelementptr inbounds %struct.tree_common, ptr %22, i64 0, i32 2
  %32 = load ptr, ptr %31, align 8, !tbaa !16
  %33 = tail call fastcc i32 @ix86_function_regparm(ptr noundef %32, ptr noundef nonnull %22)
  %34 = icmp slt i32 %33, 3
  br i1 %34, label %35, label %41

35:                                               ; preds = %30
  %36 = load ptr, ptr %31, align 8, !tbaa !16
  %37 = getelementptr inbounds %struct.tree_type, ptr %36, i64 0, i32 4
  %38 = load ptr, ptr %37, align 8, !tbaa !16
  %39 = tail call ptr @lookup_attribute(ptr noundef nonnull @.str.128, ptr noundef %38) #30
  %40 = icmp eq ptr %39, null
  br i1 %40, label %42, label %41

41:                                               ; preds = %35, %30
  br label %42

42:                                               ; preds = %19, %35, %41
  %43 = phi i32 [ 5, %41 ], [ 5, %19 ], [ 2, %35 ]
  %44 = tail call ptr @gen_rtx_REG(i32 noundef 16, i32 noundef %43) #30
  store ptr %44, ptr getelementptr inbounds (%struct.rtl_data, ptr @x_rtl, i64 0, i32 16), align 8, !tbaa !144
  tail call void @start_sequence() #30
  %45 = tail call ptr @copy_to_reg(ptr noundef %44) #30
  %46 = tail call ptr @get_insns() #30
  tail call void @end_sequence() #30
  %47 = tail call ptr @entry_of_function() #30
  %48 = getelementptr inbounds %struct.rtx_def, ptr %47, i64 0, i32 1, i32 0, i32 0, i64 2
  %49 = load ptr, ptr %48, align 8, !tbaa !16
  %50 = tail call ptr @emit_insn_before(ptr noundef %46, ptr noundef %49) #30
  %51 = load i32, ptr @optimize, align 4, !tbaa !20
  %52 = icmp eq i32 %51, 0
  br i1 %52, label %53, label %56

53:                                               ; preds = %42
  tail call void @add_reg_note(ptr noundef %50, i32 noundef 23, ptr noundef %45) #30
  %54 = load i32, ptr %50, align 8
  %55 = or i32 %54, 1073741824
  store i32 %55, ptr %50, align 8
  br label %56

56:                                               ; preds = %14, %42, %53
  %57 = phi ptr [ %45, %53 ], [ %45, %42 ], [ null, %14 ]
  ret ptr %57
}

declare zeroext i8 @hook_bool_void_true() #3

; Function Attrs: nounwind sspstrong uwtable
define internal void @ix86_trampoline_init(ptr noundef %0, ptr noundef %1, ptr noundef %2) #9 {
  %4 = getelementptr inbounds %struct.tree_decl_with_rtl, ptr %1, i64 0, i32 1
  %5 = load ptr, ptr %4, align 8, !tbaa !16
  %6 = icmp eq ptr %5, null
  br i1 %6, label %7, label %9

7:                                                ; preds = %3
  tail call void @make_decl_rtl(ptr noundef nonnull %1) #30
  %8 = load ptr, ptr %4, align 8, !tbaa !16
  br label %9

9:                                                ; preds = %3, %7
  %10 = phi ptr [ %8, %7 ], [ %5, %3 ]
  %11 = getelementptr inbounds %struct.rtx_def, ptr %10, i64 0, i32 1
  %12 = load ptr, ptr %11, align 8, !tbaa !16
  %13 = tail call ptr @ix86_static_chain(ptr noundef nonnull %1, i8 noundef zeroext 1)
  %14 = load i32, ptr %13, align 8
  %15 = and i32 %14, 65535
  %16 = icmp eq i32 %15, 37
  br i1 %16, label %17, label %22

17:                                               ; preds = %9
  %18 = getelementptr i8, ptr %13, i64 8
  %19 = load i32, ptr %18, align 8, !tbaa !16
  switch i32 %19, label %20 [
    i32 2, label %22
    i32 0, label %21
  ]

20:                                               ; preds = %17
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 20227, ptr noundef nonnull @.str.131) #30
  br label %22

21:                                               ; preds = %17
  br label %22

22:                                               ; preds = %17, %21, %9, %20
  %23 = phi i64 [ 0, %20 ], [ 185, %17 ], [ 104, %9 ], [ 184, %21 ]
  %24 = tail call ptr @adjust_address_1(ptr noundef %0, i32 noundef 14, i64 noundef 0, i32 noundef 1, i32 noundef 1) #30
  %25 = tail call ptr @gen_int_mode(i64 noundef %23, i32 noundef 14) #30
  %26 = tail call ptr @emit_move_insn(ptr noundef %24, ptr noundef %25) #30
  %27 = tail call ptr @adjust_address_1(ptr noundef %0, i32 noundef 16, i64 noundef 1, i32 noundef 1, i32 noundef 1) #30
  %28 = tail call ptr @emit_move_insn(ptr noundef %27, ptr noundef %2) #30
  %29 = getelementptr inbounds %struct.rtx_def, ptr %0, i64 0, i32 1
  %30 = load ptr, ptr %29, align 8, !tbaa !16
  %31 = load i32, ptr %13, align 8
  %32 = and i32 %31, 65535
  %33 = icmp eq i32 %32, 43
  %34 = select i1 %33, i64 9, i64 10
  %35 = tail call ptr @plus_constant(ptr noundef %30, i64 noundef %34) #30
  %36 = tail call ptr @expand_binop(i32 noundef 16, ptr noundef nonnull getelementptr inbounds ([159 x %struct.optab_d], ptr @optab_table, i64 0, i64 14), ptr noundef %12, ptr noundef %35, ptr noundef null, i32 noundef 1, i32 noundef 0) #30
  %37 = tail call ptr @adjust_address_1(ptr noundef %0, i32 noundef 14, i64 noundef 5, i32 noundef 1, i32 noundef 1) #30
  %38 = tail call ptr @gen_int_mode(i64 noundef 233, i32 noundef 14) #30
  %39 = tail call ptr @emit_move_insn(ptr noundef %37, ptr noundef %38) #30
  %40 = tail call ptr @adjust_address_1(ptr noundef %0, i32 noundef 16, i64 noundef 6, i32 noundef 1, i32 noundef 1) #30
  %41 = tail call ptr @emit_move_insn(ptr noundef %40, ptr noundef %36) #30
  ret void
}

declare ptr @hook_constcharptr_const_tree_const_tree_null(ptr noundef, ptr noundef) #3

declare ptr @hook_constcharptr_int_const_tree_null(i32 noundef, ptr noundef) #3

declare ptr @hook_constcharptr_int_const_tree_const_tree_null(i32 noundef, ptr noundef, ptr noundef) #3

declare ptr @hook_constcharptr_const_tree_null(ptr noundef) #3

declare ptr @hook_tree_const_tree_null(ptr noundef) #3

declare ptr @hook_tree_tree_tree_null(ptr noundef, ptr noundef) #3

; Function Attrs: mustprogress nofree norecurse nosync nounwind sspstrong willreturn memory(read, argmem: none, inaccessiblemem: none) uwtable
define internal nonnull ptr @i386_ira_cover_classes() #16 {
  %1 = load i32, ptr @ix86_fpmath, align 4, !tbaa !16
  %2 = and i32 %1, 2
  %3 = icmp eq i32 %2, 0
  %4 = select i1 %3, ptr @i386_ira_cover_classes.no_sse_fpmath_classes, ptr @i386_ira_cover_classes.sse_fpmath_classes
  ret ptr %4
}

; Function Attrs: nounwind sspstrong uwtable
define internal i32 @ix86_secondary_reload(i8 noundef zeroext %0, ptr noundef %1, i32 noundef %2, i32 noundef %3, ptr nocapture readnone %4) #9 {
  %6 = icmp eq i8 %0, 0
  %7 = icmp eq i32 %3, 14
  %8 = and i1 %6, %7
  %9 = add i32 %2, -11
  %10 = icmp ult i32 %9, 3
  %11 = and i1 %10, %8
  br i1 %11, label %12, label %24

12:                                               ; preds = %5
  %13 = load i32, ptr %1, align 8
  %14 = trunc i32 %13 to i16
  switch i16 %14, label %25 [
    i16 37, label %15
    i16 39, label %19
  ]

15:                                               ; preds = %12
  %16 = getelementptr i8, ptr %1, i64 8
  %17 = load i32, ptr %16, align 8, !tbaa !16
  %18 = icmp sgt i32 %17, 52
  br i1 %18, label %19, label %21

19:                                               ; preds = %12, %15
  %20 = tail call i32 @true_regnum(ptr noundef nonnull %1) #30
  br label %21

21:                                               ; preds = %15, %19
  %22 = phi i32 [ %20, %19 ], [ %17, %15 ]
  %23 = icmp eq i32 %22, -1
  br i1 %23, label %25, label %24

24:                                               ; preds = %21, %5
  br label %25

25:                                               ; preds = %12, %21, %24
  %26 = phi i32 [ 9, %21 ], [ 0, %24 ], [ 9, %12 ]
  ret i32 %26
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind sspstrong willreturn memory(none) uwtable
define internal void @ix86_maybe_switch_abi() #11 {
  ret void
}

declare zeroext i8 @default_hard_regno_scratch_ok(i32 noundef) #3

declare i32 @default_case_values_threshold() #3

; Function Attrs: nounwind sspstrong uwtable
define internal zeroext i8 @ix86_frame_pointer_required() #9 {
  %1 = load ptr, ptr @cfun, align 8, !tbaa !5
  %2 = getelementptr inbounds %struct.function, ptr %1, i64 0, i32 10
  %3 = load ptr, ptr %2, align 8, !tbaa !87
  %4 = getelementptr inbounds %struct.machine_function, ptr %3, i64 0, i32 8
  %5 = load i8, ptr %4, align 4
  %6 = and i8 %5, 1
  %7 = icmp eq i8 %6, 0
  %8 = load i8, ptr getelementptr inbounds (%struct.rtl_data, ptr @x_rtl, i64 0, i32 35), align 1
  %9 = icmp eq i8 %8, 0
  %10 = select i1 %7, i1 %9, i1 false
  br i1 %10, label %11, label %28

11:                                               ; preds = %0
  %12 = load i32, ptr @target_flags, align 4, !tbaa !20
  %13 = and i32 %12, 32768
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %28, label %15

15:                                               ; preds = %11
  %16 = load i32, ptr @current_function_is_leaf, align 4, !tbaa !20
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %28, label %18

18:                                               ; preds = %15
  %19 = and i8 %5, 8
  %20 = icmp eq i8 %19, 0
  br i1 %20, label %28, label %21

21:                                               ; preds = %18
  %22 = tail call zeroext i8 @df_regs_ever_live_p(i32 noundef 7) #30
  %23 = icmp eq i8 %22, 0
  br i1 %23, label %24, label %28

24:                                               ; preds = %21
  %25 = load i8, ptr getelementptr inbounds (%struct.rtl_data, ptr @x_rtl, i64 0, i32 35), align 1, !tbaa !155
  %26 = icmp ne i8 %25, 0
  %27 = zext i1 %26 to i8
  br label %28

28:                                               ; preds = %11, %18, %24, %15, %21, %0
  %29 = phi i8 [ 1, %0 ], [ 1, %21 ], [ 1, %15 ], [ %27, %24 ], [ 0, %18 ], [ 0, %11 ]
  ret i8 %29
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind sspstrong willreturn memory(read, argmem: none, inaccessiblemem: none) uwtable
define internal zeroext i8 @ix86_can_eliminate(i32 noundef %0, i32 noundef %1) #16 {
  %3 = load i8, ptr getelementptr inbounds (%struct.rtl_data, ptr @x_rtl, i64 0, i32 43), align 1, !tbaa !130
  %4 = icmp eq i8 %3, 0
  %5 = load i8, ptr getelementptr inbounds (%struct.rtl_data, ptr @x_rtl, i64 0, i32 45), align 1
  %6 = icmp ne i8 %5, 0
  %7 = select i1 %4, i1 true, i1 %6
  br i1 %7, label %16, label %8

8:                                                ; preds = %2
  %9 = icmp eq i32 %0, 16
  %10 = icmp eq i32 %1, 6
  %11 = and i1 %9, %10
  %12 = icmp eq i32 %0, 20
  %13 = icmp eq i32 %1, 7
  %14 = and i1 %12, %13
  %15 = or i1 %11, %14
  br label %21

16:                                               ; preds = %2
  %17 = icmp ne i32 %1, 7
  %18 = load i8, ptr getelementptr inbounds (%struct.rtl_data, ptr @x_rtl, i64 0, i32 41), align 1
  %19 = icmp eq i8 %18, 0
  %20 = select i1 %17, i1 true, i1 %19
  br label %21

21:                                               ; preds = %16, %8
  %22 = phi i1 [ %20, %16 ], [ %15, %8 ]
  %23 = zext i1 %22 to i8
  ret i8 %23
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind sspstrong willreturn memory(none) uwtable
define internal i32 @ix86_c_mode_for_suffix(i8 noundef signext %0) #11 {
  %2 = icmp eq i8 %0, 119
  %3 = select i1 %2, i32 40, i32 0
  %4 = icmp eq i8 %0, 113
  %5 = select i1 %4, i32 41, i32 %3
  ret i32 %5
}

declare ptr @default_cxx_guard_type() #3

declare ptr @default_cxx_get_cookie_size(ptr noundef) #3

declare ptr @default_emutls_var_fields(ptr noundef, ptr noundef) #3

declare ptr @default_emutls_var_init(ptr noundef, ptr noundef, ptr noundef) #3

; Function Attrs: nounwind sspstrong uwtable
define internal zeroext i8 @ix86_valid_target_attribute_p(ptr nocapture noundef %0, ptr nocapture readnone %1, ptr noundef %2, i32 %3) #9 {
  %5 = alloca %struct.cl_target_option, align 4
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %5) #30
  %6 = tail call ptr @build_optimization_node() #30
  %7 = getelementptr inbounds %struct.tree_function_decl, ptr %0, i64 0, i32 4
  %8 = load ptr, ptr %7, align 8, !tbaa !16
  %9 = icmp eq ptr %8, null
  %10 = icmp eq ptr %8, %6
  %11 = select i1 %9, i1 true, i1 %10
  br i1 %11, label %14, label %12

12:                                               ; preds = %4
  %13 = getelementptr inbounds %struct.tree_optimization_option, ptr %8, i64 0, i32 1
  tail call void @cl_optimization_restore(ptr noundef nonnull %13) #30
  br label %14

14:                                               ; preds = %12, %4
  call void @cl_target_option_save(ptr noundef nonnull %5) #30
  %15 = call ptr @ix86_valid_target_attribute_tree(ptr noundef %2)
  %16 = call ptr @build_optimization_node() #30
  %17 = icmp eq ptr %15, null
  br i1 %17, label %22, label %18

18:                                               ; preds = %14
  %19 = getelementptr inbounds %struct.tree_function_decl, ptr %0, i64 0, i32 3
  store ptr %15, ptr %19, align 8, !tbaa !16
  %20 = icmp eq ptr %6, %16
  br i1 %20, label %22, label %21

21:                                               ; preds = %18
  store ptr %16, ptr %7, align 8, !tbaa !16
  br label %22

22:                                               ; preds = %14, %21, %18
  %23 = phi i8 [ 1, %21 ], [ 1, %18 ], [ 0, %14 ]
  call void @cl_target_option_restore(ptr noundef nonnull %5) #30
  %24 = icmp eq ptr %6, %16
  br i1 %24, label %27, label %25

25:                                               ; preds = %22
  %26 = getelementptr inbounds %struct.tree_optimization_option, ptr %6, i64 0, i32 1
  call void @cl_optimization_restore(ptr noundef nonnull %26) #30
  br label %27

27:                                               ; preds = %25, %22
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %5) #30
  ret i8 %23
}

; Function Attrs: nounwind sspstrong uwtable
define internal void @ix86_function_specific_save(ptr nocapture noundef %0) #9 {
  %2 = load i32, ptr @ix86_arch, align 4, !tbaa !16
  %3 = trunc i32 %2 to i8
  %4 = getelementptr inbounds %struct.cl_target_option, ptr %0, i64 0, i32 4
  store i8 %3, ptr %4, align 4, !tbaa !385
  %5 = load i32, ptr @ix86_schedule, align 4, !tbaa !16
  %6 = trunc i32 %5 to i8
  %7 = getelementptr inbounds %struct.cl_target_option, ptr %0, i64 0, i32 8
  store i8 %6, ptr %7, align 4, !tbaa !386
  %8 = load i32, ptr @ix86_tune, align 4, !tbaa !16
  %9 = trunc i32 %8 to i8
  %10 = getelementptr inbounds %struct.cl_target_option, ptr %0, i64 0, i32 9
  store i8 %9, ptr %10, align 1, !tbaa !387
  %11 = load i32, ptr @ix86_fpmath, align 4, !tbaa !16
  %12 = trunc i32 %11 to i8
  %13 = getelementptr inbounds %struct.cl_target_option, ptr %0, i64 0, i32 7
  store i8 %12, ptr %13, align 1, !tbaa !388
  %14 = load i32, ptr @ix86_branch_cost, align 4, !tbaa !20
  %15 = trunc i32 %14 to i8
  %16 = getelementptr inbounds %struct.cl_target_option, ptr %0, i64 0, i32 6
  store i8 %15, ptr %16, align 2, !tbaa !389
  %17 = load i32, ptr @ix86_tune_defaulted, align 4, !tbaa !20
  %18 = trunc i32 %17 to i8
  %19 = getelementptr inbounds %struct.cl_target_option, ptr %0, i64 0, i32 10
  store i8 %18, ptr %19, align 2, !tbaa !390
  %20 = load i32, ptr @ix86_arch_specified, align 4, !tbaa !20
  %21 = trunc i32 %20 to i8
  %22 = getelementptr inbounds %struct.cl_target_option, ptr %0, i64 0, i32 5
  store i8 %21, ptr %22, align 1, !tbaa !391
  %23 = load i32, ptr @ix86_isa_flags_explicit, align 4, !tbaa !20
  store i32 %23, ptr %0, align 4, !tbaa !392
  %24 = load i32, ptr @target_flags_explicit, align 4, !tbaa !20
  %25 = getelementptr inbounds %struct.cl_target_option, ptr %0, i64 0, i32 1
  store i32 %24, ptr %25, align 4, !tbaa !393
  %26 = and i32 %2, 255
  %27 = load i32, ptr @ix86_arch, align 4, !tbaa !16
  %28 = icmp eq i32 %27, %26
  br i1 %28, label %31, label %29

29:                                               ; preds = %1
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 3562, ptr noundef nonnull @.str.131) #30
  %30 = load i8, ptr %7, align 4, !tbaa !386
  br label %31

31:                                               ; preds = %1, %29
  %32 = phi i8 [ %6, %1 ], [ %30, %29 ]
  %33 = zext i8 %32 to i32
  %34 = load i32, ptr @ix86_schedule, align 4, !tbaa !16
  %35 = icmp eq i32 %34, %33
  br i1 %35, label %37, label %36

36:                                               ; preds = %31
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 3563, ptr noundef nonnull @.str.131) #30
  br label %37

37:                                               ; preds = %31, %36
  %38 = load i8, ptr %10, align 1, !tbaa !387
  %39 = zext i8 %38 to i32
  %40 = load i32, ptr @ix86_tune, align 4, !tbaa !16
  %41 = icmp eq i32 %40, %39
  br i1 %41, label %43, label %42

42:                                               ; preds = %37
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 3564, ptr noundef nonnull @.str.131) #30
  br label %43

43:                                               ; preds = %37, %42
  %44 = load i8, ptr %13, align 1, !tbaa !388
  %45 = zext i8 %44 to i32
  %46 = load i32, ptr @ix86_fpmath, align 4, !tbaa !16
  %47 = icmp eq i32 %46, %45
  br i1 %47, label %49, label %48

48:                                               ; preds = %43
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 3565, ptr noundef nonnull @.str.131) #30
  br label %49

49:                                               ; preds = %43, %48
  %50 = load i8, ptr %16, align 2, !tbaa !389
  %51 = zext i8 %50 to i32
  %52 = load i32, ptr @ix86_branch_cost, align 4, !tbaa !20
  %53 = icmp eq i32 %52, %51
  br i1 %53, label %55, label %54

54:                                               ; preds = %49
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 3566, ptr noundef nonnull @.str.131) #30
  br label %55

55:                                               ; preds = %49, %54
  ret void
}

; Function Attrs: nofree norecurse nosync nounwind sspstrong memory(readwrite, argmem: read, inaccessiblemem: none) uwtable
define internal void @ix86_function_specific_restore(ptr nocapture noundef readonly %0) #12 {
  %2 = load i32, ptr @ix86_tune, align 4, !tbaa !16
  %3 = load i32, ptr @ix86_arch, align 4, !tbaa !16
  %4 = getelementptr inbounds %struct.cl_target_option, ptr %0, i64 0, i32 4
  %5 = load i8, ptr %4, align 4, !tbaa !385
  %6 = zext i8 %5 to i32
  store i32 %6, ptr @ix86_arch, align 4, !tbaa !16
  %7 = getelementptr inbounds %struct.cl_target_option, ptr %0, i64 0, i32 8
  %8 = load i8, ptr %7, align 4, !tbaa !386
  %9 = zext i8 %8 to i32
  store i32 %9, ptr @ix86_schedule, align 4, !tbaa !16
  %10 = getelementptr inbounds %struct.cl_target_option, ptr %0, i64 0, i32 9
  %11 = load i8, ptr %10, align 1, !tbaa !387
  %12 = zext i8 %11 to i32
  store i32 %12, ptr @ix86_tune, align 4, !tbaa !16
  %13 = getelementptr inbounds %struct.cl_target_option, ptr %0, i64 0, i32 7
  %14 = load i8, ptr %13, align 1, !tbaa !388
  %15 = zext i8 %14 to i32
  store i32 %15, ptr @ix86_fpmath, align 4, !tbaa !16
  %16 = getelementptr inbounds %struct.cl_target_option, ptr %0, i64 0, i32 6
  %17 = load i8, ptr %16, align 2, !tbaa !389
  %18 = zext i8 %17 to i32
  store i32 %18, ptr @ix86_branch_cost, align 4, !tbaa !20
  %19 = getelementptr inbounds %struct.cl_target_option, ptr %0, i64 0, i32 10
  %20 = load i8, ptr %19, align 2, !tbaa !390
  %21 = zext i8 %20 to i32
  store i32 %21, ptr @ix86_tune_defaulted, align 4, !tbaa !20
  %22 = getelementptr inbounds %struct.cl_target_option, ptr %0, i64 0, i32 5
  %23 = load i8, ptr %22, align 1, !tbaa !391
  %24 = zext i8 %23 to i32
  store i32 %24, ptr @ix86_arch_specified, align 4, !tbaa !20
  %25 = load i32, ptr %0, align 4, !tbaa !392
  store i32 %25, ptr @ix86_isa_flags_explicit, align 4, !tbaa !20
  %26 = getelementptr inbounds %struct.cl_target_option, ptr %0, i64 0, i32 1
  %27 = load i32, ptr %26, align 4, !tbaa !393
  store i32 %27, ptr @target_flags_explicit, align 4, !tbaa !20
  %28 = icmp eq i32 %3, %6
  br i1 %28, label %38, label %29

29:                                               ; preds = %1
  %30 = shl nuw i32 1, %6
  %31 = and i32 %30, -40
  %32 = icmp ne i32 %31, 0
  %33 = zext i1 %32 to i8
  store i8 %33, ptr @ix86_arch_features, align 1, !tbaa !16
  %34 = icmp ne i8 %5, 0
  %35 = zext i1 %34 to i8
  store i8 %35, ptr getelementptr inbounds ([5 x i8], ptr @ix86_arch_features, i64 0, i64 1), align 1, !tbaa !16
  %36 = icmp ugt i8 %5, 1
  %37 = zext i1 %36 to i8
  store i8 %37, ptr getelementptr inbounds ([5 x i8], ptr @ix86_arch_features, i64 0, i64 2), align 1, !tbaa !16
  store i8 %35, ptr getelementptr inbounds ([5 x i8], ptr @ix86_arch_features, i64 0, i64 3), align 1, !tbaa !16
  store i8 %35, ptr getelementptr inbounds ([5 x i8], ptr @ix86_arch_features, i64 0, i64 4), align 1, !tbaa !16
  br label %38

38:                                               ; preds = %29, %1
  %39 = icmp eq i32 %2, %12
  br i1 %39, label %78, label %40

40:                                               ; preds = %38
  %41 = shl nuw i32 1, %12
  %42 = insertelement <8 x i32> poison, i32 %41, i64 0
  %43 = shufflevector <8 x i32> %42, <8 x i32> poison, <8 x i32> zeroinitializer
  %44 = and <8 x i32> %43, <i32 13681, i32 16369, i32 6, i32 32110, i32 31224, i32 0, i32 -2, i32 32696>
  %45 = icmp ne <8 x i32> %44, zeroinitializer
  %46 = zext <8 x i1> %45 to <8 x i8>
  store <8 x i8> %46, ptr @ix86_tune_features, align 16, !tbaa !16
  %47 = and <8 x i32> %43, <i32 32728, i32 8, i32 7168, i32 51, i32 -32077, i32 32, i32 -23589, i32 128>
  %48 = icmp ne <8 x i32> %47, zeroinitializer
  %49 = zext <8 x i1> %48 to <8 x i8>
  store <8 x i8> %49, ptr getelementptr inbounds ([62 x i8], ptr @ix86_tune_features, i64 0, i64 8), align 8, !tbaa !16
  %50 = and <8 x i32> %43, <i32 8, i32 -5, i32 -13, i32 32119, i32 -8, i32 641, i32 -1, i32 -9>
  %51 = icmp ne <8 x i32> %50, zeroinitializer
  %52 = zext <8 x i1> %51 to <8 x i8>
  store <8 x i8> %52, ptr getelementptr inbounds ([62 x i8], ptr @ix86_tune_features, i64 0, i64 16), align 16, !tbaa !16
  %53 = and <8 x i32> %43, <i32 0, i32 8, i32 32752, i32 32763, i32 32712, i32 32715, i32 -32729, i32 32704>
  %54 = icmp ne <8 x i32> %53, zeroinitializer
  %55 = zext <8 x i1> %54 to <8 x i8>
  store <8 x i8> %55, ptr getelementptr inbounds ([62 x i8], ptr @ix86_tune_features, i64 0, i64 24), align 8, !tbaa !16
  %56 = and <8 x i32> %43, <i32 32392, i32 8192, i32 320, i32 8512, i32 648, i32 32704, i32 23880, i32 23880>
  %57 = icmp ne <8 x i32> %56, zeroinitializer
  %58 = zext <8 x i1> %57 to <8 x i8>
  store <8 x i8> %58, ptr getelementptr inbounds ([62 x i8], ptr @ix86_tune_features, i64 0, i64 32), align 16, !tbaa !16
  %59 = and <8 x i32> %43, <i32 -3, i32 8512, i32 -14657, i32 -8193, i32 32712, i32 32124, i32 32064, i32 -23169>
  %60 = icmp ne <8 x i32> %59, zeroinitializer
  %61 = zext <8 x i1> %60 to <8 x i8>
  store <8 x i8> %61, ptr getelementptr inbounds ([62 x i8], ptr @ix86_tune_features, i64 0, i64 40), align 8, !tbaa !16
  %62 = and <8 x i32> %43, <i32 15680, i32 24568, i32 -257, i32 4352, i32 -4, i32 12544, i32 12544, i32 4>
  %63 = icmp ne <8 x i32> %62, zeroinitializer
  %64 = zext <8 x i1> %63 to <8 x i8>
  store <8 x i8> %64, ptr getelementptr inbounds ([62 x i8], ptr @ix86_tune_features, i64 0, i64 48), align 16, !tbaa !16
  %65 = icmp eq i8 %11, 2
  %66 = zext i1 %65 to i8
  store i8 %66, ptr getelementptr inbounds ([62 x i8], ptr @ix86_tune_features, i64 0, i64 56), align 8, !tbaa !16
  %67 = icmp eq i8 %11, 5
  %68 = zext i1 %67 to i8
  store i8 %68, ptr getelementptr inbounds ([62 x i8], ptr @ix86_tune_features, i64 0, i64 57), align 1, !tbaa !16
  %69 = and i32 %41, 14336
  %70 = icmp ne i32 %69, 0
  %71 = zext i1 %70 to i8
  store i8 %71, ptr getelementptr inbounds ([62 x i8], ptr @ix86_tune_features, i64 0, i64 58), align 2, !tbaa !16
  %72 = icmp eq i8 %11, 13
  %73 = zext i1 %72 to i8
  store i8 %73, ptr getelementptr inbounds ([62 x i8], ptr @ix86_tune_features, i64 0, i64 59), align 1, !tbaa !16
  %74 = icmp eq i8 %11, 10
  %75 = zext i1 %74 to i8
  store i8 %75, ptr getelementptr inbounds ([62 x i8], ptr @ix86_tune_features, i64 0, i64 60), align 4, !tbaa !16
  %76 = icmp eq i8 %11, 14
  %77 = zext i1 %76 to i8
  store i8 %77, ptr getelementptr inbounds ([62 x i8], ptr @ix86_tune_features, i64 0, i64 61), align 1, !tbaa !16
  br label %78

78:                                               ; preds = %40, %38
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define internal void @ix86_function_specific_print(ptr nocapture noundef %0, i32 noundef %1, ptr nocapture noundef readonly %2) #9 {
  %4 = getelementptr inbounds %struct.cl_target_option, ptr %2, i64 0, i32 3
  %5 = load i32, ptr %4, align 4, !tbaa !67
  %6 = getelementptr inbounds %struct.cl_target_option, ptr %2, i64 0, i32 2
  %7 = load i32, ptr %6, align 4, !tbaa !69
  %8 = tail call fastcc ptr @ix86_target_string(i32 noundef %5, i32 noundef %7)
  %9 = getelementptr inbounds %struct.cl_target_option, ptr %2, i64 0, i32 4
  %10 = load i8, ptr %9, align 4, !tbaa !385
  %11 = zext i8 %10 to i32
  %12 = icmp ult i8 %10, 22
  br i1 %12, label %13, label %17

13:                                               ; preds = %3
  %14 = zext i8 %10 to i64
  %15 = getelementptr inbounds [22 x ptr], ptr @cpu_names, i64 0, i64 %14
  %16 = load ptr, ptr %15, align 8, !tbaa !5
  br label %17

17:                                               ; preds = %3, %13
  %18 = phi ptr [ %16, %13 ], [ @.str.1357, %3 ]
  %19 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %0, ptr noundef nonnull @.str.1356, i32 noundef %1, ptr noundef nonnull @.str.43, i32 noundef %11, ptr noundef %18)
  %20 = getelementptr inbounds %struct.cl_target_option, ptr %2, i64 0, i32 9
  %21 = load i8, ptr %20, align 1, !tbaa !387
  %22 = zext i8 %21 to i32
  %23 = icmp ult i8 %21, 22
  br i1 %23, label %24, label %28

24:                                               ; preds = %17
  %25 = zext i8 %21 to i64
  %26 = getelementptr inbounds [22 x ptr], ptr @cpu_names, i64 0, i64 %25
  %27 = load ptr, ptr %26, align 8, !tbaa !5
  br label %28

28:                                               ; preds = %17, %24
  %29 = phi ptr [ %27, %24 ], [ @.str.1357, %17 ]
  %30 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %0, ptr noundef nonnull @.str.1358, i32 noundef %1, ptr noundef nonnull @.str.43, i32 noundef %22, ptr noundef %29)
  %31 = getelementptr inbounds %struct.cl_target_option, ptr %2, i64 0, i32 7
  %32 = load i8, ptr %31, align 1, !tbaa !388
  %33 = zext i8 %32 to i32
  %34 = and i32 %33, 1
  %35 = icmp eq i32 %34, 0
  %36 = select i1 %35, ptr @.str.43, ptr @.str.1360
  %37 = and i32 %33, 2
  %38 = icmp eq i32 %37, 0
  %39 = select i1 %38, ptr @.str.43, ptr @.str.1361
  %40 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %0, ptr noundef nonnull @.str.1359, i32 noundef %1, ptr noundef nonnull @.str.43, i32 noundef %33, ptr noundef nonnull %36, ptr noundef nonnull %39)
  %41 = getelementptr inbounds %struct.cl_target_option, ptr %2, i64 0, i32 6
  %42 = load i8, ptr %41, align 2, !tbaa !389
  %43 = zext i8 %42 to i32
  %44 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %0, ptr noundef nonnull @.str.1362, i32 noundef %1, ptr noundef nonnull @.str.43, i32 noundef %43)
  %45 = icmp eq ptr %8, null
  br i1 %45, label %48, label %46

46:                                               ; preds = %28
  %47 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %0, ptr noundef nonnull @.str.1363, i32 noundef %1, ptr noundef nonnull @.str.43, ptr noundef nonnull %8)
  tail call void @free(ptr noundef nonnull %8)
  br label %48

48:                                               ; preds = %46, %28
  ret void
}

declare zeroext i8 @default_target_option_pragma_parse(ptr noundef, ptr noundef) #3

; Function Attrs: mustprogress nofree norecurse nosync nounwind sspstrong willreturn memory(read, inaccessiblemem: none) uwtable
define internal zeroext i8 @ix86_can_inline_p(ptr nocapture noundef readonly %0, ptr nocapture noundef readonly %1) #23 {
  %3 = getelementptr inbounds %struct.tree_function_decl, ptr %0, i64 0, i32 3
  %4 = load ptr, ptr %3, align 8, !tbaa !16
  %5 = getelementptr inbounds %struct.tree_function_decl, ptr %1, i64 0, i32 3
  %6 = load ptr, ptr %5, align 8, !tbaa !16
  %7 = icmp eq ptr %6, null
  br i1 %7, label %48, label %8

8:                                                ; preds = %2
  %9 = icmp eq ptr %4, null
  br i1 %9, label %48, label %10

10:                                               ; preds = %8
  %11 = getelementptr inbounds %struct.tree_target_option, ptr %4, i64 0, i32 1, i32 3
  %12 = load i32, ptr %11, align 4, !tbaa !67
  %13 = getelementptr inbounds %struct.tree_target_option, ptr %6, i64 0, i32 1, i32 3
  %14 = load i32, ptr %13, align 4, !tbaa !67
  %15 = and i32 %14, %12
  %16 = icmp eq i32 %15, %14
  br i1 %16, label %17, label %48

17:                                               ; preds = %10
  %18 = getelementptr inbounds %struct.tree_target_option, ptr %4, i64 0, i32 1, i32 2
  %19 = load i32, ptr %18, align 4, !tbaa !69
  %20 = getelementptr inbounds %struct.tree_target_option, ptr %6, i64 0, i32 1, i32 2
  %21 = load i32, ptr %20, align 4, !tbaa !69
  %22 = icmp eq i32 %19, %21
  br i1 %22, label %23, label %48

23:                                               ; preds = %17
  %24 = getelementptr inbounds %struct.tree_target_option, ptr %4, i64 0, i32 1, i32 4
  %25 = load i8, ptr %24, align 4, !tbaa !385
  %26 = getelementptr inbounds %struct.tree_target_option, ptr %6, i64 0, i32 1, i32 4
  %27 = load i8, ptr %26, align 4, !tbaa !385
  %28 = icmp eq i8 %25, %27
  br i1 %28, label %29, label %48

29:                                               ; preds = %23
  %30 = getelementptr inbounds %struct.tree_target_option, ptr %4, i64 0, i32 1, i32 9
  %31 = load i8, ptr %30, align 1, !tbaa !387
  %32 = getelementptr inbounds %struct.tree_target_option, ptr %6, i64 0, i32 1, i32 9
  %33 = load i8, ptr %32, align 1, !tbaa !387
  %34 = icmp eq i8 %31, %33
  br i1 %34, label %35, label %48

35:                                               ; preds = %29
  %36 = getelementptr inbounds %struct.tree_target_option, ptr %4, i64 0, i32 1, i32 7
  %37 = load i8, ptr %36, align 1, !tbaa !388
  %38 = getelementptr inbounds %struct.tree_target_option, ptr %6, i64 0, i32 1, i32 7
  %39 = load i8, ptr %38, align 1, !tbaa !388
  %40 = icmp eq i8 %37, %39
  br i1 %40, label %41, label %48

41:                                               ; preds = %35
  %42 = getelementptr inbounds %struct.tree_target_option, ptr %4, i64 0, i32 1, i32 6
  %43 = load i8, ptr %42, align 2, !tbaa !389
  %44 = getelementptr inbounds %struct.tree_target_option, ptr %6, i64 0, i32 1, i32 6
  %45 = load i8, ptr %44, align 2, !tbaa !389
  %46 = icmp eq i8 %43, %45
  %47 = zext i1 %46 to i8
  br label %48

48:                                               ; preds = %10, %17, %23, %29, %35, %41, %8, %2
  %49 = phi i8 [ 1, %2 ], [ 0, %8 ], [ 0, %10 ], [ 0, %17 ], [ 0, %23 ], [ 0, %29 ], [ 0, %35 ], [ %47, %41 ]
  ret i8 %49
}

declare void @hook_void_bitmap(ptr noundef) #3

; Function Attrs: nounwind sspstrong uwtable
define dso_local void @gt_ggc_mx_stack_local_entry(ptr noundef %0) local_unnamed_addr #9 {
  br label %2

2:                                                ; preds = %13, %1
  %3 = phi ptr [ %0, %1 ], [ %15, %13 ]
  %4 = icmp ult ptr %3, inttoptr (i64 2 to ptr)
  br i1 %4, label %17, label %5

5:                                                ; preds = %2
  %6 = tail call i32 @ggc_set_mark(ptr noundef nonnull %3) #30
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %8, label %17

8:                                                ; preds = %5
  %9 = getelementptr inbounds %struct.stack_local_entry, ptr %3, i64 0, i32 2
  %10 = load ptr, ptr %9, align 8, !tbaa !181
  %11 = icmp eq ptr %10, null
  br i1 %11, label %13, label %12

12:                                               ; preds = %8
  tail call void @gt_ggc_mx_rtx_def(ptr noundef nonnull %10) #30
  br label %13

13:                                               ; preds = %8, %12
  %14 = getelementptr inbounds %struct.stack_local_entry, ptr %3, i64 0, i32 3
  %15 = load ptr, ptr %14, align 8, !tbaa !184
  %16 = icmp eq ptr %15, null
  br i1 %16, label %17, label %2

17:                                               ; preds = %2, %13, %5
  ret void
}

declare i32 @ggc_set_mark(ptr noundef) local_unnamed_addr #3

declare void @gt_ggc_mx_rtx_def(ptr noundef) #3

; Function Attrs: nounwind sspstrong uwtable
define dso_local void @gt_pch_nx_stack_local_entry(ptr noundef %0) local_unnamed_addr #9 {
  br label %2

2:                                                ; preds = %11, %1
  %3 = phi ptr [ %0, %1 ], [ %13, %11 ]
  %4 = tail call i32 @gt_pch_note_object(ptr noundef %3, ptr noundef %3, ptr noundef nonnull @gt_pch_p_17stack_local_entry, i32 noundef 156) #30
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %15, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %struct.stack_local_entry, ptr %3, i64 0, i32 2
  %8 = load ptr, ptr %7, align 8, !tbaa !181
  %9 = icmp eq ptr %8, null
  br i1 %9, label %11, label %10

10:                                               ; preds = %6
  tail call void @gt_pch_nx_rtx_def(ptr noundef nonnull %8) #30
  br label %11

11:                                               ; preds = %6, %10
  %12 = getelementptr inbounds %struct.stack_local_entry, ptr %3, i64 0, i32 3
  %13 = load ptr, ptr %12, align 8, !tbaa !184
  %14 = icmp eq ptr %13, null
  br i1 %14, label %15, label %2

15:                                               ; preds = %11, %2
  ret void
}

declare i32 @gt_pch_note_object(ptr noundef, ptr noundef, ptr noundef, i32 noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define dso_local void @gt_pch_p_17stack_local_entry(ptr noundef readnone %0, ptr noundef %1, ptr nocapture noundef readonly %2, ptr noundef %3) #9 {
  %5 = icmp eq ptr %1, %0
  br i1 %5, label %6, label %9

6:                                                ; preds = %4
  %7 = getelementptr inbounds %struct.stack_local_entry, ptr %1, i64 0, i32 2
  tail call void %2(ptr noundef nonnull %7, ptr noundef %3) #30
  %8 = getelementptr inbounds %struct.stack_local_entry, ptr %1, i64 0, i32 3
  tail call void %2(ptr noundef nonnull %8, ptr noundef %3) #30
  br label %9

9:                                                ; preds = %4, %6
  ret void
}

declare void @gt_pch_nx_rtx_def(ptr noundef) #3

declare void @gt_ggc_mx_lang_tree_node(ptr noundef) #3

declare void @gt_pch_nx_lang_tree_node(ptr noundef) #3

declare void @gt_ggc_mx_tree_map(ptr noundef) #3

declare void @gt_pch_nx_tree_map(ptr noundef) #3

declare i32 @tree_map_base_marked_p(ptr noundef) #3

declare void @gt_ggc_m_P8tree_map4htab(ptr noundef) #3

declare void @gt_pch_n_P8tree_map4htab(ptr noundef) #3

; Function Attrs: mustprogress nofree nounwind willreturn memory(argmem: read)
declare i64 @strlen(ptr nocapture noundef) local_unnamed_addr #10

declare ptr @xstrdup(ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc ptr @function_value_32(i32 noundef %0, i32 noundef %1, ptr noundef readonly %2, ptr noundef %3) unnamed_addr #9 {
  %5 = zext i32 %1 to i64
  %6 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %5
  %7 = load i8, ptr %6, align 1, !tbaa !16
  %8 = add i8 %7, -12
  %9 = icmp ult i8 %8, 6
  br i1 %9, label %10, label %23

10:                                               ; preds = %4
  %11 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %5
  %12 = load i8, ptr %11, align 1, !tbaa !16
  %13 = icmp eq i8 %12, 8
  br i1 %13, label %14, label %19

14:                                               ; preds = %10
  %15 = load i32, ptr @ix86_isa_flags, align 4, !tbaa !20
  %16 = and i32 %15, 2048
  %17 = icmp eq i32 %16, 0
  %18 = select i1 %17, i32 0, i32 29
  br label %45

19:                                               ; preds = %10
  %20 = icmp eq i32 %1, 18
  %21 = icmp eq i8 %12, 16
  %22 = or i1 %20, %21
  br i1 %22, label %25, label %30

23:                                               ; preds = %4
  %24 = icmp eq i32 %1, 18
  br i1 %24, label %25, label %37

25:                                               ; preds = %23, %19
  %26 = load i32, ptr @ix86_isa_flags, align 4, !tbaa !20
  %27 = and i32 %26, 65536
  %28 = icmp eq i32 %27, 0
  %29 = select i1 %28, i32 0, i32 21
  br label %45

30:                                               ; preds = %19
  %31 = icmp eq i8 %12, 32
  br i1 %31, label %32, label %37

32:                                               ; preds = %30
  %33 = load i32, ptr @ix86_isa_flags, align 4, !tbaa !20
  %34 = and i32 %33, 32
  %35 = icmp eq i32 %34, 0
  %36 = select i1 %35, i32 0, i32 21
  br label %45

37:                                               ; preds = %23, %30
  %38 = load i32, ptr @target_flags, align 4, !tbaa !20
  %39 = add i32 %1, -41
  %40 = icmp ult i32 %39, -3
  %41 = and i32 %38, 34
  %42 = icmp ne i32 %41, 34
  %43 = or i1 %40, %42
  %44 = select i1 %43, i32 0, i32 8
  br label %45

45:                                               ; preds = %37, %25, %32, %14
  %46 = phi i32 [ %18, %14 ], [ %29, %25 ], [ %36, %32 ], [ %44, %37 ]
  %47 = icmp ne ptr %3, null
  %48 = icmp ne ptr %2, null
  %49 = or i1 %48, %47
  br i1 %49, label %50, label %103

50:                                               ; preds = %45
  %51 = icmp eq i32 %1, 39
  %52 = and i32 %1, -2
  %53 = icmp eq i32 %52, 38
  br i1 %53, label %54, label %103

54:                                               ; preds = %50
  %55 = icmp eq i32 %1, 38
  %56 = load i32, ptr @target_flags, align 4, !tbaa !20
  %57 = and i32 %56, 262144
  %58 = icmp eq i32 %57, 0
  br i1 %58, label %59, label %66

59:                                               ; preds = %54
  %60 = icmp eq ptr %2, null
  br i1 %60, label %70, label %61

61:                                               ; preds = %59
  %62 = getelementptr inbounds %struct.tree_type, ptr %2, i64 0, i32 4
  %63 = load ptr, ptr %62, align 8, !tbaa !16
  %64 = tail call ptr @lookup_attribute(ptr noundef nonnull @.str.325, ptr noundef %63) #30
  %65 = icmp eq ptr %64, null
  br i1 %65, label %70, label %66

66:                                               ; preds = %61, %54
  %67 = load i32, ptr @ix86_isa_flags, align 4, !tbaa !20
  %68 = lshr i32 %67, 15
  %69 = and i32 %68, 2
  br label %95

70:                                               ; preds = %61, %59
  %71 = icmp eq ptr %3, null
  br i1 %71, label %95, label %72

72:                                               ; preds = %70
  %73 = load i32, ptr @ix86_fpmath, align 4, !tbaa !16
  %74 = and i32 %73, 2
  %75 = icmp eq i32 %74, 0
  %76 = load i32, ptr @optimize, align 4
  %77 = icmp eq i32 %76, 0
  %78 = select i1 %75, i1 true, i1 %77
  %79 = load i32, ptr @profile_flag, align 4
  %80 = icmp ne i32 %79, 0
  %81 = select i1 %78, i1 true, i1 %80
  br i1 %81, label %95, label %82

82:                                               ; preds = %72
  %83 = tail call ptr @cgraph_local_info(ptr noundef nonnull %3) #30
  %84 = icmp eq ptr %83, null
  br i1 %84, label %95, label %85

85:                                               ; preds = %82
  %86 = getelementptr inbounds %struct.cgraph_local_info, ptr %83, i64 0, i32 2
  %87 = load i8, ptr %86, align 8
  %88 = and i8 %87, 1
  %89 = icmp eq i8 %88, 0
  br i1 %89, label %95, label %90

90:                                               ; preds = %85
  %91 = load i32, ptr @ix86_isa_flags, align 4, !tbaa !20
  %92 = and i32 %91, 131072
  %93 = icmp eq i32 %92, 0
  %94 = select i1 %93, i32 1, i32 2
  br label %95

95:                                               ; preds = %66, %90, %85, %82, %72, %70
  %96 = phi i32 [ %94, %90 ], [ 0, %72 ], [ 0, %70 ], [ 0, %85 ], [ 0, %82 ], [ %69, %66 ]
  %97 = icmp ne i32 %96, 0
  %98 = and i1 %55, %97
  %99 = icmp eq i32 %96, 2
  %100 = and i1 %51, %99
  %101 = or i1 %98, %100
  %102 = select i1 %101, i32 21, i32 %46
  br label %106

103:                                              ; preds = %50, %45
  %104 = icmp eq i32 %1, 19
  br i1 %104, label %105, label %106

105:                                              ; preds = %103
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 6358, ptr noundef nonnull @.str.131) #30
  br label %106

106:                                              ; preds = %95, %103, %105
  %107 = phi i32 [ %102, %95 ], [ %46, %103 ], [ %46, %105 ]
  %108 = tail call ptr @gen_rtx_REG(i32 noundef %0, i32 noundef %107) #30
  ret ptr %108
}

declare i32 @real_from_string(ptr noundef, ptr noundef) local_unnamed_addr #3

declare void @real_convert(ptr noundef, i32 noundef, ptr noundef) local_unnamed_addr #3

declare i64 @get_frame_size() local_unnamed_addr #3

declare zeroext i8 @expensive_function_p(i32 noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc i32 @ix86_save_reg(i32 noundef %0, i32 noundef %1) unnamed_addr #9 {
  %3 = load ptr, ptr @pic_offset_table_rtx, align 8, !tbaa !5
  %4 = icmp ne ptr %3, null
  %5 = icmp eq i32 %0, 3
  %6 = and i1 %5, %4
  br i1 %6, label %7, label %22

7:                                                ; preds = %2
  %8 = tail call zeroext i8 @df_regs_ever_live_p(i32 noundef 3) #30
  %9 = icmp ne i8 %8, 0
  %10 = load i8, ptr getelementptr inbounds (%struct.rtl_data, ptr @x_rtl, i64 0, i32 35), align 1
  %11 = icmp ne i8 %10, 0
  %12 = select i1 %9, i1 true, i1 %11
  %13 = load i8, ptr getelementptr inbounds (%struct.rtl_data, ptr @x_rtl, i64 0, i32 29), align 1
  %14 = icmp ne i8 %13, 0
  %15 = select i1 %12, i1 true, i1 %14
  %16 = load i8, ptr getelementptr inbounds (%struct.rtl_data, ptr @x_rtl, i64 0, i32 36), align 8
  %17 = icmp ne i8 %16, 0
  %18 = select i1 %15, i1 true, i1 %17
  br i1 %18, label %19, label %36

19:                                               ; preds = %7
  %20 = tail call fastcc i32 @ix86_select_alt_pic_regnum()
  %21 = icmp eq i32 %20, -1
  br label %60

22:                                               ; preds = %2
  %23 = load i8, ptr getelementptr inbounds (%struct.rtl_data, ptr @x_rtl, i64 0, i32 29), align 1, !tbaa !394
  %24 = icmp ne i8 %23, 0
  %25 = icmp ne i32 %1, 0
  %26 = and i1 %25, %24
  br i1 %26, label %27, label %36

27:                                               ; preds = %22, %33
  %28 = phi i32 [ %34, %33 ], [ 0, %22 ]
  %29 = icmp eq i32 %28, %0
  %30 = zext i1 %29 to i32
  %31 = icmp ult i32 %28, 2
  %32 = select i1 %31, i32 %30, i32 2
  switch i32 %32, label %35 [
    i32 0, label %33
    i32 2, label %36
  ]

33:                                               ; preds = %27
  %34 = add i32 %28, 1
  br label %27

35:                                               ; preds = %27
  br i1 %29, label %60, label %36

36:                                               ; preds = %27, %7, %35, %22
  %37 = load ptr, ptr getelementptr inbounds (%struct.rtl_data, ptr @x_rtl, i64 0, i32 16), align 8, !tbaa !144
  %38 = icmp eq ptr %37, null
  br i1 %38, label %43, label %39

39:                                               ; preds = %36
  %40 = getelementptr i8, ptr %37, i64 8
  %41 = load i32, ptr %40, align 8, !tbaa !16
  %42 = icmp eq i32 %41, %0
  br i1 %42, label %60, label %43

43:                                               ; preds = %39, %36
  %44 = tail call zeroext i8 @df_regs_ever_live_p(i32 noundef %0) #30
  %45 = icmp eq i8 %44, 0
  br i1 %45, label %60, label %46

46:                                               ; preds = %43
  %47 = zext i32 %0 to i64
  %48 = getelementptr inbounds [53 x i8], ptr @call_used_regs, i64 0, i64 %47
  %49 = load i8, ptr %48, align 1, !tbaa !16
  %50 = icmp eq i8 %49, 0
  br i1 %50, label %51, label %60

51:                                               ; preds = %46
  %52 = getelementptr inbounds [53 x i8], ptr @fixed_regs, i64 0, i64 %47
  %53 = load i8, ptr %52, align 1, !tbaa !16
  %54 = icmp eq i8 %53, 0
  br i1 %54, label %55, label %60

55:                                               ; preds = %51
  %56 = icmp ne i32 %0, 6
  %57 = load i8, ptr getelementptr inbounds (%struct.rtl_data, ptr @x_rtl, i64 0, i32 41), align 1
  %58 = icmp eq i8 %57, 0
  %59 = select i1 %56, i1 true, i1 %58
  br label %60

60:                                               ; preds = %43, %46, %51, %55, %39, %35, %19
  %61 = phi i1 [ true, %35 ], [ %21, %19 ], [ true, %39 ], [ false, %51 ], [ false, %46 ], [ false, %43 ], [ %59, %55 ]
  %62 = zext i1 %61 to i32
  ret i32 %62
}

declare ptr @decl_function_context(ptr noundef) local_unnamed_addr #3

declare void @error_at(i32 noundef, ptr noundef, ...) local_unnamed_addr #3

declare ptr @gen_pro_epilogue_adjust_stack_1(ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

declare i32 @bitmap_bit_p(ptr noundef, i32 noundef) local_unnamed_addr #3

declare ptr @df_get_live_out(ptr noundef) local_unnamed_addr #3

declare void @set_mem_align(ptr noundef, i32 noundef) local_unnamed_addr #3

declare ptr @alloc_reg_note(i32 noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

declare ptr @delegitimize_mem_from_attrs(ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc zeroext i8 @ix86_pic_register_p(ptr noundef %0) unnamed_addr #9 {
  %2 = load i32, ptr %0, align 8
  %3 = trunc i32 %2 to i16
  switch i16 %3, label %29 [
    i16 1, label %4
    i16 37, label %14
  ]

4:                                                ; preds = %1
  %5 = getelementptr inbounds %struct.rtx_def, ptr %0, i64 0, i32 1
  %6 = load ptr, ptr %5, align 8, !tbaa !16
  %7 = icmp eq ptr %6, null
  br i1 %7, label %29, label %8

8:                                                ; preds = %4
  %9 = load ptr, ptr @pic_offset_table_rtx, align 8, !tbaa !5
  %10 = icmp eq ptr %9, null
  br i1 %10, label %29, label %11

11:                                               ; preds = %8
  %12 = tail call i32 @rtx_equal_for_cselib_p(ptr noundef nonnull %0, ptr noundef nonnull %9) #30
  %13 = icmp ne i32 %12, 0
  br label %29

14:                                               ; preds = %1
  %15 = getelementptr i8, ptr %0, i64 8
  %16 = load i32, ptr %15, align 8, !tbaa !16
  %17 = load i32, ptr @flag_pic, align 4, !tbaa !20
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %26, label %19

19:                                               ; preds = %14
  %20 = load i32, ptr @reload_completed, align 4, !tbaa !20
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %26, label %22

22:                                               ; preds = %19
  %23 = load ptr, ptr @pic_offset_table_rtx, align 8, !tbaa !5
  %24 = getelementptr i8, ptr %23, i64 8
  %25 = load i32, ptr %24, align 8, !tbaa !16
  br label %26

26:                                               ; preds = %22, %19, %14
  %27 = phi i32 [ -1, %14 ], [ %25, %22 ], [ 3, %19 ]
  %28 = icmp eq i32 %16, %27
  br label %29

29:                                               ; preds = %1, %4, %26, %8, %11
  %30 = phi i1 [ false, %8 ], [ %13, %11 ], [ %28, %26 ], [ false, %4 ], [ false, %1 ]
  %31 = zext i1 %30 to i8
  ret i8 %31
}

declare i32 @rtx_equal_for_cselib_p(ptr noundef, ptr noundef) local_unnamed_addr #3

; Function Attrs: mustprogress nofree norecurse nosync nounwind sspstrong willreturn memory(readwrite, inaccessiblemem: none) uwtable
define internal i32 @get_some_local_dynamic_name_1(ptr nocapture noundef readonly %0, ptr nocapture readnone %1) #17 {
  %3 = load ptr, ptr %0, align 8, !tbaa !5
  %4 = load i32, ptr %3, align 8
  %5 = and i32 %4, 65535
  %6 = icmp eq i32 %5, 45
  br i1 %6, label %7, label %19

7:                                                ; preds = %2
  %8 = getelementptr inbounds %struct.rtx_def, ptr %3, i64 0, i32 1, i32 0, i32 0, i64 1
  %9 = load i32, ptr %8, align 8, !tbaa !16
  %10 = and i32 %9, 56
  %11 = icmp eq i32 %10, 24
  br i1 %11, label %12, label %19

12:                                               ; preds = %7
  %13 = getelementptr inbounds %struct.rtx_def, ptr %3, i64 0, i32 1
  %14 = load ptr, ptr %13, align 8, !tbaa !16
  %15 = load ptr, ptr @cfun, align 8, !tbaa !5
  %16 = getelementptr inbounds %struct.function, ptr %15, i64 0, i32 10
  %17 = load ptr, ptr %16, align 8, !tbaa !87
  %18 = getelementptr inbounds %struct.machine_function, ptr %17, i64 0, i32 1
  store ptr %14, ptr %18, align 8, !tbaa !174
  br label %19

19:                                               ; preds = %2, %7, %12
  %20 = phi i32 [ 1, %12 ], [ 0, %7 ], [ 0, %2 ]
  ret i32 %20
}

declare i32 @recog(ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

declare ptr @gen_tls_global_dynamic_32(ptr noundef, ptr noundef) local_unnamed_addr #3

declare ptr @set_unique_reg_note(ptr noundef, i32 noundef, ptr noundef) local_unnamed_addr #3

declare ptr @get_last_insn() local_unnamed_addr #3

declare ptr @gen_tls_local_dynamic_base_32(ptr noundef) local_unnamed_addr #3

declare void @df_set_regs_ever_live(i32 noundef, i8 noundef zeroext) local_unnamed_addr #3

declare ptr @gen_const_mem(i32 noundef, ptr noundef) local_unnamed_addr #3

declare void @set_mem_alias_set(ptr noundef, i32 noundef) local_unnamed_addr #3

declare i32 @new_alias_set() local_unnamed_addr #3

declare ptr @gen_andqi_ext_0(ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

declare ptr @gen_addqi_ext_1(ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

declare ptr @gen_cmpqi_ext_3(ptr noundef, ptr noundef) local_unnamed_addr #3

declare ptr @gen_xorqi_cc_ext_1(ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

declare i32 @int_mode_for_mode(i32 noundef) local_unnamed_addr #3

declare ptr @simplify_subreg(i32 noundef, ptr noundef, i32 noundef, i32 noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc ptr @ix86_expand_aligntest(ptr noundef %0, i32 noundef %1, i8 noundef zeroext %2) unnamed_addr #9 {
  %4 = tail call ptr @gen_label_rtx() #30
  %5 = load i32, ptr %0, align 8
  %6 = lshr i32 %5, 16
  %7 = and i32 %6, 255
  %8 = tail call ptr @gen_reg_rtx(i32 noundef %7) #30
  %9 = load i32, ptr %0, align 8
  %10 = and i32 %9, 16711680
  %11 = icmp eq i32 %10, 1114112
  %12 = zext i32 %1 to i64
  %13 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef %12) #30
  br i1 %11, label %16, label %14

14:                                               ; preds = %3
  %15 = tail call ptr @gen_andsi3(ptr noundef %8, ptr noundef nonnull %0, ptr noundef %13) #30
  br label %16

16:                                               ; preds = %3, %14
  %17 = phi ptr [ %15, %14 ], [ null, %3 ]
  %18 = tail call ptr @emit_insn(ptr noundef %17) #30
  %19 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 64), align 16, !tbaa !5
  %20 = load i32, ptr %0, align 8
  %21 = lshr i32 %20, 16
  %22 = and i32 %21, 255
  tail call void @emit_cmp_and_jump_insns(ptr noundef %8, ptr noundef %19, i32 noundef 81, ptr noundef null, i32 noundef %22, i32 noundef 1, ptr noundef %4) #30
  %23 = tail call ptr @get_last_insn() #30
  %24 = load i32, ptr %23, align 8
  %25 = and i32 %24, 65535
  %26 = icmp eq i32 %25, 9
  br i1 %26, label %28, label %27

27:                                               ; preds = %16
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 17264, ptr noundef nonnull @.str.131) #30
  br label %28

28:                                               ; preds = %16, %27
  %29 = icmp eq i8 %2, 0
  %30 = select i1 %29, i64 9000, i64 5000
  %31 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef %30) #30
  tail call void @add_reg_note(ptr noundef nonnull %23, i32 noundef 13, ptr noundef %31) #30
  ret ptr %4
}

declare ptr @gen_strmov(ptr noundef, ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

declare void @set_mem_size(ptr noundef, ptr noundef) local_unnamed_addr #3

declare ptr @convert_modes(i32 noundef, i32 noundef, ptr noundef, i32 noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc ptr @scale_counter(ptr noundef %0, i32 noundef %1) unnamed_addr #9 {
  %3 = icmp eq i32 %1, 1
  br i1 %3, label %24, label %4

4:                                                ; preds = %2
  %5 = load i32, ptr %0, align 8
  %6 = trunc i32 %5 to i16
  switch i16 %6, label %13 [
    i16 30, label %7
    i16 37, label %15
  ]

7:                                                ; preds = %4
  %8 = getelementptr inbounds %struct.rtx_def, ptr %0, i64 0, i32 1
  %9 = load i64, ptr %8, align 8, !tbaa !16
  %10 = zext i32 %1 to i64
  %11 = sdiv i64 %9, %10
  %12 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef %11) #30
  br label %24

13:                                               ; preds = %4
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 17322, ptr noundef nonnull @.str.131) #30
  %14 = load i32, ptr %0, align 8
  br label %15

15:                                               ; preds = %4, %13
  %16 = phi i32 [ %5, %4 ], [ %14, %13 ]
  %17 = lshr i32 %16, 16
  %18 = and i32 %17, 255
  %19 = zext i32 %1 to i64
  %20 = tail call i32 @exact_log2(i64 noundef %19) #30
  %21 = sext i32 %20 to i64
  %22 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef %21) #30
  %23 = tail call ptr @expand_simple_binop(i32 noundef %18, i32 noundef 68, ptr noundef nonnull %0, ptr noundef %22, ptr noundef null, i32 noundef 1, i32 noundef 0) #30
  br label %24

24:                                               ; preds = %2, %15, %7
  %25 = phi ptr [ %12, %7 ], [ %23, %15 ], [ %0, %2 ]
  ret ptr %25
}

declare i32 @exact_log2(i64 noundef) local_unnamed_addr #3

declare ptr @shallow_copy_rtx_stat(ptr noundef) local_unnamed_addr #3

declare ptr @gen_rep_mov(ptr noundef, ptr noundef, ptr noundef, ptr noundef, ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc ptr @promote_duplicated_reg(i32 noundef %0, ptr noundef %1) unnamed_addr #9 {
  %3 = load i32, ptr %1, align 8
  %4 = lshr i32 %3, 16
  %5 = icmp eq i32 %0, 16
  br i1 %5, label %7, label %6

6:                                                ; preds = %2
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 18583, ptr noundef nonnull @.str.131) #30
  br label %7

7:                                                ; preds = %2, %6
  %8 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 64), align 16, !tbaa !5
  %9 = icmp eq ptr %8, %1
  br i1 %9, label %10, label %12

10:                                               ; preds = %7
  %11 = tail call ptr @copy_to_mode_reg(i32 noundef %0, ptr noundef nonnull %1) #30
  br label %49

12:                                               ; preds = %7
  %13 = load i32, ptr %1, align 8
  %14 = and i32 %13, 65535
  %15 = icmp eq i32 %14, 30
  br i1 %15, label %16, label %23

16:                                               ; preds = %12
  %17 = getelementptr inbounds %struct.rtx_def, ptr %1, i64 0, i32 1
  %18 = load i64, ptr %17, align 8, !tbaa !16
  %19 = and i64 %18, 255
  %20 = mul nuw nsw i64 %19, 16843009
  %21 = tail call ptr @gen_int_mode(i64 noundef %20, i32 noundef %0) #30
  %22 = tail call ptr @copy_to_mode_reg(i32 noundef %0, ptr noundef %21) #30
  br label %49

23:                                               ; preds = %12
  %24 = trunc i32 %4 to i8
  switch i8 %24, label %25 [
    i8 14, label %28
    i8 0, label %28
  ]

25:                                               ; preds = %23
  %26 = load ptr, ptr @rtl_hooks, align 8, !tbaa !187
  %27 = tail call ptr %26(i32 noundef 14, ptr noundef nonnull %1) #30
  br label %28

28:                                               ; preds = %25, %23, %23
  %29 = phi ptr [ %27, %25 ], [ %1, %23 ], [ %1, %23 ]
  %30 = load i8, ptr getelementptr inbounds ([62 x i8], ptr @ix86_tune_features, i64 0, i64 9), align 1, !tbaa !16
  %31 = icmp ne i8 %30, 0
  %32 = load ptr, ptr @ix86_cost, align 8, !tbaa !5
  %33 = getelementptr inbounds %struct.processor_costs, ptr %32, i64 0, i32 4, i64 2
  %34 = load i32, ptr %33, align 4, !tbaa !20
  %35 = getelementptr inbounds %struct.processor_costs, ptr %32, i64 0, i32 5
  %36 = load i32, ptr %35, align 4, !tbaa !366
  %37 = shl nsw i32 %36, 2
  %38 = add nsw i32 %37, %34
  %39 = getelementptr inbounds %struct.processor_costs, ptr %32, i64 0, i32 3
  %40 = load i32, ptr %39, align 4, !tbaa !249
  %41 = load i32, ptr %32, align 4, !tbaa !248
  %42 = add nsw i32 %41, %40
  %43 = zext i1 %31 to i32
  %44 = shl i32 %42, %43
  %45 = select i1 %31, i32 0, i32 4
  %46 = add nsw i32 %44, %45
  %47 = icmp sgt i32 %38, %46
  %48 = tail call ptr @convert_modes(i32 noundef %0, i32 noundef 14, ptr noundef %29, i32 noundef 1) #30
  br i1 %47, label %55, label %51

49:                                               ; preds = %73, %68, %16, %10, %51
  %50 = phi ptr [ %54, %51 ], [ %11, %10 ], [ %22, %16 ], [ %76, %73 ], [ %72, %68 ]
  ret ptr %50

51:                                               ; preds = %28
  %52 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 65), align 8, !tbaa !5
  %53 = tail call fastcc ptr @promote_duplicated_reg(i32 noundef %0, ptr noundef %52)
  %54 = tail call ptr @expand_simple_binop(i32 noundef %0, i32 noundef 52, ptr noundef %48, ptr noundef %53, ptr noundef null, i32 noundef 1, i32 noundef 0) #30
  br label %49

55:                                               ; preds = %28
  %56 = load i8, ptr getelementptr inbounds ([62 x i8], ptr @ix86_tune_features, i64 0, i64 9), align 1, !tbaa !16
  %57 = icmp eq i8 %56, 0
  br i1 %57, label %58, label %64

58:                                               ; preds = %55
  br i1 %5, label %59, label %62

59:                                               ; preds = %58
  %60 = tail call ptr @gen_movsi_insv_1(ptr noundef %48, ptr noundef %48) #30
  %61 = tail call ptr @emit_insn(ptr noundef %60) #30
  br label %68

62:                                               ; preds = %58
  %63 = tail call ptr @emit_insn(ptr noundef null) #30
  br label %68

64:                                               ; preds = %55
  %65 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef 8) #30
  %66 = tail call ptr @expand_simple_binop(i32 noundef %0, i32 noundef 65, ptr noundef %48, ptr noundef %65, ptr noundef null, i32 noundef 1, i32 noundef 0) #30
  %67 = tail call ptr @expand_simple_binop(i32 noundef %0, i32 noundef 62, ptr noundef %48, ptr noundef %66, ptr noundef %48, i32 noundef 1, i32 noundef 0) #30
  br label %68

68:                                               ; preds = %59, %62, %64
  %69 = phi ptr [ %67, %64 ], [ %48, %59 ], [ %48, %62 ]
  %70 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef 16) #30
  %71 = tail call ptr @expand_simple_binop(i32 noundef %0, i32 noundef 65, ptr noundef %69, ptr noundef %70, ptr noundef null, i32 noundef 1, i32 noundef 0) #30
  %72 = tail call ptr @expand_simple_binop(i32 noundef %0, i32 noundef 62, ptr noundef %69, ptr noundef %71, ptr noundef %69, i32 noundef 1, i32 noundef 0) #30
  br i1 %5, label %49, label %73

73:                                               ; preds = %68
  %74 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef 32) #30
  %75 = tail call ptr @expand_simple_binop(i32 noundef %0, i32 noundef 65, ptr noundef %72, ptr noundef %74, ptr noundef null, i32 noundef 1, i32 noundef 0) #30
  %76 = tail call ptr @expand_simple_binop(i32 noundef %0, i32 noundef 62, ptr noundef %72, ptr noundef %75, ptr noundef %72, i32 noundef 1, i32 noundef 0) #30
  br label %49
}

declare ptr @gen_strset(ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

declare ptr @gen_rep_stos(ptr noundef, ptr noundef, ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

declare ptr @gen_testsi_ccno_1(ptr noundef, ptr noundef) local_unnamed_addr #3

declare ptr @gen_addqi3_cc(ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

declare ptr @ggc_alloc_cleared_stat(i64 noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc ptr @ix86_get_builtin_func_type(i32 noundef %0) unnamed_addr #9 {
  %2 = icmp ult i32 %0, 271
  br i1 %2, label %4, label %3

3:                                                ; preds = %1
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 20374, ptr noundef nonnull @.str.131) #30
  br label %4

4:                                                ; preds = %1, %3
  %5 = sext i32 %0 to i64
  %6 = getelementptr inbounds [271 x ptr], ptr @ix86_builtin_func_type_tab, i64 0, i64 %5
  %7 = load ptr, ptr %6, align 8, !tbaa !5
  %8 = icmp eq ptr %7, null
  br i1 %8, label %9, label %50

9:                                                ; preds = %4
  %10 = icmp ult i32 %0, 236
  br i1 %10, label %11, label %42

11:                                               ; preds = %9
  %12 = getelementptr inbounds [237 x i16], ptr @ix86_builtin_func_start, i64 0, i64 %5
  %13 = load i16, ptr %12, align 2, !tbaa !173
  %14 = zext i16 %13 to i32
  %15 = add nuw nsw i32 %0, 1
  %16 = zext i32 %15 to i64
  %17 = getelementptr inbounds [237 x i16], ptr @ix86_builtin_func_start, i64 0, i64 %16
  %18 = load i16, ptr %17, align 2, !tbaa !173
  %19 = zext i16 %18 to i32
  %20 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 55), align 8, !tbaa !5
  %21 = zext i16 %13 to i64
  %22 = getelementptr inbounds [708 x i32], ptr @ix86_builtin_func_args, i64 0, i64 %21
  %23 = load i32, ptr %22, align 4, !tbaa !16
  %24 = tail call fastcc ptr @ix86_get_builtin_type(i32 noundef %23)
  %25 = add nsw i32 %19, -1
  %26 = icmp ugt i32 %25, %14
  br i1 %26, label %27, label %39

27:                                               ; preds = %11
  %28 = zext i32 %25 to i64
  br label %29

29:                                               ; preds = %27, %29
  %30 = phi i64 [ %28, %27 ], [ %36, %29 ]
  %31 = phi ptr [ %20, %27 ], [ %35, %29 ]
  %32 = getelementptr inbounds [708 x i32], ptr @ix86_builtin_func_args, i64 0, i64 %30
  %33 = load i32, ptr %32, align 4, !tbaa !16
  %34 = tail call fastcc ptr @ix86_get_builtin_type(i32 noundef %33)
  %35 = tail call ptr @tree_cons_stat(ptr noundef null, ptr noundef %34, ptr noundef %31) #30
  %36 = add nsw i64 %30, -1
  %37 = trunc i64 %36 to i32
  %38 = icmp ugt i32 %37, %14
  br i1 %38, label %29, label %39, !llvm.loop !395

39:                                               ; preds = %29, %11
  %40 = phi ptr [ %20, %11 ], [ %35, %29 ]
  %41 = tail call ptr @build_function_type(ptr noundef %24, ptr noundef %40) #30
  br label %48

42:                                               ; preds = %9
  %43 = add i32 %0, -236
  %44 = zext i32 %43 to i64
  %45 = getelementptr inbounds [35 x i32], ptr @ix86_builtin_func_alias_base, i64 0, i64 %44
  %46 = load i32, ptr %45, align 4, !tbaa !16
  %47 = tail call fastcc ptr @ix86_get_builtin_func_type(i32 noundef %46)
  br label %48

48:                                               ; preds = %42, %39
  %49 = phi ptr [ %41, %39 ], [ %47, %42 ]
  store ptr %49, ptr %6, align 8, !tbaa !5
  br label %50

50:                                               ; preds = %4, %48
  %51 = phi ptr [ %49, %48 ], [ %7, %4 ]
  ret ptr %51
}

declare ptr @add_builtin_function_ext_scope(ptr noundef, ptr noundef, i32 noundef, i32 noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc ptr @ix86_get_builtin_type(i32 noundef %0) unnamed_addr #9 {
  %2 = icmp ult i32 %0, 69
  br i1 %2, label %4, label %3

3:                                                ; preds = %1
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 20325, ptr noundef nonnull @.str.131) #30
  br label %4

4:                                                ; preds = %1, %3
  %5 = sext i32 %0 to i64
  %6 = getelementptr inbounds [69 x ptr], ptr @ix86_builtin_type_tab, i64 0, i64 %5
  %7 = load ptr, ptr %6, align 8, !tbaa !5
  %8 = icmp eq ptr %7, null
  br i1 %8, label %9, label %37

9:                                                ; preds = %4
  %10 = icmp ugt i32 %0, 24
  br i1 %10, label %12, label %11

11:                                               ; preds = %9
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 20331, ptr noundef nonnull @.str.131) #30
  br label %14

12:                                               ; preds = %9
  %13 = icmp ult i32 %0, 46
  br i1 %13, label %14, label %23

14:                                               ; preds = %11, %12
  %15 = add nsw i32 %0, -25
  %16 = zext i32 %15 to i64
  %17 = getelementptr inbounds [21 x i32], ptr @ix86_builtin_type_vect_base, i64 0, i64 %16
  %18 = load i32, ptr %17, align 4, !tbaa !16
  %19 = tail call fastcc ptr @ix86_get_builtin_type(i32 noundef %18)
  %20 = getelementptr inbounds [21 x i32], ptr @ix86_builtin_type_vect_mode, i64 0, i64 %16
  %21 = load i32, ptr %20, align 4, !tbaa !16
  %22 = tail call ptr @build_vector_type_for_mode(ptr noundef %19, i32 noundef %21) #30
  br label %35

23:                                               ; preds = %12
  %24 = add i32 %0, -46
  %25 = icmp ult i32 %0, 60
  %26 = zext i32 %24 to i64
  %27 = getelementptr inbounds [23 x i32], ptr @ix86_builtin_type_ptr_base, i64 0, i64 %26
  %28 = load i32, ptr %27, align 4, !tbaa !16
  %29 = tail call fastcc ptr @ix86_get_builtin_type(i32 noundef %28)
  br i1 %25, label %32, label %30

30:                                               ; preds = %23
  %31 = tail call ptr @build_qualified_type(ptr noundef %29, i32 noundef 1) #30
  br label %32

32:                                               ; preds = %30, %23
  %33 = phi ptr [ %31, %30 ], [ %29, %23 ]
  %34 = tail call ptr @build_pointer_type(ptr noundef %33) #30
  br label %35

35:                                               ; preds = %32, %14
  %36 = phi ptr [ %22, %14 ], [ %34, %32 ]
  store ptr %36, ptr %6, align 8, !tbaa !5
  br label %37

37:                                               ; preds = %4, %35
  %38 = phi ptr [ %36, %35 ], [ %7, %4 ]
  ret ptr %38
}

declare ptr @tree_cons_stat(ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

declare ptr @build_function_type(ptr noundef, ptr noundef) local_unnamed_addr #3

declare ptr @build_vector_type_for_mode(ptr noundef, i32 noundef) local_unnamed_addr #3

declare ptr @build_qualified_type(ptr noundef, i32 noundef) local_unnamed_addr #3

declare ptr @build_pointer_type(ptr noundef) local_unnamed_addr #3

declare ptr @build_function_type_list(ptr noundef, ...) local_unnamed_addr #3

declare ptr @build_decl_stat(i32 noundef, i32 noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

declare ptr @get_identifier(ptr noundef) local_unnamed_addr #3

declare ptr @emit_insn_before(ptr noundef, ptr noundef) local_unnamed_addr #3

declare ptr @gen_vec_setv4si_0(ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc zeroext i8 @expand_vec_perm_broadcast_1(ptr nocapture noundef readonly %0) unnamed_addr #9 {
  %2 = alloca [4 x i8], align 1
  %3 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %0, i64 0, i32 3
  %4 = load i8, ptr %3, align 8, !tbaa !16
  %5 = zext i8 %4 to i32
  %6 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %0, i64 0, i32 5
  %7 = load i8, ptr %6, align 4, !tbaa !294
  %8 = lshr i8 %7, 1
  %9 = zext i8 %8 to i32
  %10 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %0, i64 0, i32 4
  %11 = load i32, ptr %10, align 8, !tbaa !293
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %2) #30
  %12 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %0, i64 0, i32 1
  %13 = load ptr, ptr %12, align 8, !tbaa !296
  switch i32 %11, label %60 [
    i32 82, label %14
    i32 81, label %14
    i32 80, label %15
    i32 66, label %15
    i32 79, label %15
    i32 65, label %15
    i32 64, label %16
    i32 63, label %16
  ]

14:                                               ; preds = %1, %1
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 29880, ptr noundef nonnull @.str.131) #30
  br label %15

15:                                               ; preds = %1, %1, %1, %1, %14
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 29887, ptr noundef nonnull @.str.131) #30
  br label %16

16:                                               ; preds = %1, %1, %15
  br label %17

17:                                               ; preds = %16, %48
  %18 = phi i32 [ %24, %48 ], [ %5, %16 ]
  %19 = phi i32 [ %26, %48 ], [ %9, %16 ]
  %20 = phi i32 [ %49, %48 ], [ %11, %16 ]
  %21 = phi ptr [ %51, %48 ], [ %13, %16 ]
  %22 = icmp ult i32 %18, %19
  %23 = select i1 %22, i32 0, i32 %19
  %24 = sub i32 %18, %23
  %25 = select i1 %22, ptr getelementptr inbounds ([159 x %struct.optab_d], ptr @optab_table, i64 0, i64 136), ptr getelementptr inbounds ([159 x %struct.optab_d], ptr @optab_table, i64 0, i64 135)
  %26 = lshr i32 %19, 1
  %27 = tail call ptr @expand_binop(i32 noundef %20, ptr noundef nonnull %25, ptr noundef %21, ptr noundef %21, ptr noundef null, i32 noundef 0, i32 noundef 0) #30
  %28 = zext i32 %20 to i64
  %29 = getelementptr inbounds [87 x i8], ptr @mode_wider, i64 0, i64 %28
  %30 = load i8, ptr %29, align 1, !tbaa !16
  %31 = getelementptr inbounds [87 x i8], ptr @mode_nunits, i64 0, i64 %28
  %32 = load i8, ptr %31, align 1, !tbaa !16
  %33 = zext i8 %32 to i32
  %34 = zext i8 %30 to i64
  %35 = getelementptr inbounds [87 x i8], ptr @mode_nunits, i64 0, i64 %34
  %36 = load i8, ptr %35, align 1, !tbaa !16
  %37 = zext i8 %36 to i32
  %38 = shl nuw nsw i32 %37, 1
  %39 = icmp eq i32 %38, %33
  br i1 %39, label %41, label %40

40:                                               ; preds = %17
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 26745, ptr noundef nonnull @.str.131) #30
  br label %41

41:                                               ; preds = %40, %17
  %42 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %28
  %43 = load i8, ptr %42, align 1, !tbaa !16
  %44 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %34
  %45 = load i8, ptr %44, align 1, !tbaa !16
  %46 = icmp eq i8 %43, %45
  br i1 %46, label %48, label %47

47:                                               ; preds = %41
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 26746, ptr noundef nonnull @.str.131) #30
  br label %48

48:                                               ; preds = %41, %47
  %49 = zext i8 %30 to i32
  %50 = load ptr, ptr @rtl_hooks, align 8, !tbaa !187
  %51 = tail call ptr %50(i32 noundef %49, ptr noundef %27) #30
  %52 = icmp eq i8 %30, 65
  br i1 %52, label %53, label %17, !llvm.loop !396

53:                                               ; preds = %48
  %54 = trunc i32 %24 to i8
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 1 dereferenceable(4) %2, i8 %54, i64 4, i1 false)
  %55 = load ptr, ptr @rtl_hooks, align 8, !tbaa !187
  %56 = load ptr, ptr %0, align 8, !tbaa !291
  %57 = tail call ptr %55(i32 noundef 65, ptr noundef %56) #30
  %58 = call fastcc zeroext i8 @expand_vselect(ptr noundef %57, ptr noundef %51, ptr noundef nonnull %2, i32 noundef 4), !range !66
  %59 = icmp eq i8 %58, 0
  br i1 %59, label %60, label %63

60:                                               ; preds = %1, %53
  %61 = phi i32 [ 29912, %53 ], [ 29916, %1 ]
  %62 = phi i8 [ 1, %53 ], [ 0, %1 ]
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef %61, ptr noundef nonnull @.str.131) #30
  br label %63

63:                                               ; preds = %60, %53
  %64 = phi i8 [ 1, %53 ], [ %62, %60 ]
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %2) #30
  ret i8 %64
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc zeroext i8 @expand_vselect(ptr noundef %0, ptr noundef %1, ptr nocapture noundef readonly %2, i32 noundef %3) unnamed_addr #9 {
  %5 = alloca [16 x ptr], align 16
  call void @llvm.lifetime.start.p0(i64 128, ptr nonnull %5) #30
  %6 = icmp eq i32 %3, 0
  br i1 %6, label %18, label %7

7:                                                ; preds = %4
  %8 = zext i32 %3 to i64
  br label %9

9:                                                ; preds = %7, %9
  %10 = phi i64 [ 0, %7 ], [ %16, %9 ]
  %11 = getelementptr inbounds i8, ptr %2, i64 %10
  %12 = load i8, ptr %11, align 1, !tbaa !16
  %13 = zext i8 %12 to i64
  %14 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef %13) #30
  %15 = getelementptr inbounds [16 x ptr], ptr %5, i64 0, i64 %10
  store ptr %14, ptr %15, align 8, !tbaa !5
  %16 = add nuw nsw i64 %10, 1
  %17 = icmp eq i64 %16, %8
  br i1 %17, label %18, label %9, !llvm.loop !397

18:                                               ; preds = %9, %4
  %19 = call ptr @gen_rtvec_v(i32 noundef %3, ptr noundef nonnull %5) #30
  %20 = call ptr @gen_rtx_fmt_E_stat(i32 noundef 15, i32 noundef 0, ptr noundef %19) #30
  %21 = load i32, ptr %0, align 8
  %22 = lshr i32 %21, 16
  %23 = and i32 %22, 255
  %24 = call ptr @gen_rtx_fmt_ee_stat(i32 noundef 124, i32 noundef %23, ptr noundef %1, ptr noundef %20) #30
  %25 = call ptr @gen_rtx_fmt_ee_stat(i32 noundef 23, i32 noundef 0, ptr noundef nonnull %0, ptr noundef %24) #30
  %26 = call ptr @emit_insn(ptr noundef %25) #30
  %27 = getelementptr inbounds %struct.rtx_def, ptr %26, i64 1, i32 1
  %28 = load i32, ptr %27, align 8, !tbaa !16
  %29 = icmp slt i32 %28, 0
  br i1 %29, label %30, label %36

30:                                               ; preds = %18
  %31 = getelementptr inbounds %struct.rtx_def, ptr %26, i64 1
  %32 = load ptr, ptr %31, align 8, !tbaa !16
  %33 = call i32 @recog(ptr noundef %32, ptr noundef nonnull %26, ptr noundef null) #30
  store i32 %33, ptr %27, align 8, !tbaa !16
  %34 = icmp slt i32 %33, 0
  br i1 %34, label %35, label %36

35:                                               ; preds = %30
  call void @remove_insn(ptr noundef nonnull %26) #30
  br label %36

36:                                               ; preds = %18, %30, %35
  %37 = phi i8 [ 0, %35 ], [ 1, %30 ], [ 1, %18 ]
  call void @llvm.lifetime.end.p0(i64 128, ptr nonnull %5) #30
  ret i8 %37
}

declare ptr @gen_rtvec_v(i32 noundef, ptr noundef) local_unnamed_addr #3

declare void @remove_insn(ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc void @ix86_expand_vector_init_concat(i32 noundef %0, ptr noundef %1, ptr nocapture noundef %2, i32 noundef %3) unnamed_addr #9 {
  %5 = alloca [8 x ptr], align 16
  %6 = alloca [4 x ptr], align 16
  call void @llvm.lifetime.start.p0(i64 64, ptr nonnull %5) #30
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %6) #30
  switch i32 %3, label %96 [
    i32 2, label %7
    i32 4, label %41
    i32 8, label %46
  ]

7:                                                ; preds = %4
  %8 = add i32 %0, -61
  %9 = icmp ult i32 %8, 22
  br i1 %9, label %11, label %10

10:                                               ; preds = %11, %7
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 27186, ptr noundef nonnull @.str.131) #30
  br label %19

11:                                               ; preds = %7
  %12 = lshr i32 4064817, %8
  %13 = and i32 %12, 1
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %10, label %15

15:                                               ; preds = %11
  %16 = sext i32 %8 to i64
  %17 = getelementptr inbounds [22 x i32], ptr @switch.table.ix86_expand_vector_init_concat, i64 0, i64 %16
  %18 = load i32, ptr %17, align 4
  br label %19

19:                                               ; preds = %15, %10
  %20 = phi i32 [ undef, %10 ], [ %18, %15 ]
  %21 = getelementptr inbounds ptr, ptr %2, i64 1
  %22 = load ptr, ptr %21, align 8, !tbaa !5
  %23 = tail call i32 @register_operand(ptr noundef %22, i32 noundef %20) #30
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %25, label %28

25:                                               ; preds = %19
  %26 = load ptr, ptr %21, align 8, !tbaa !5
  %27 = tail call ptr @force_reg(i32 noundef %20, ptr noundef %26) #30
  store ptr %27, ptr %21, align 8, !tbaa !5
  br label %28

28:                                               ; preds = %25, %19
  %29 = load ptr, ptr %2, align 8, !tbaa !5
  %30 = tail call i32 @register_operand(ptr noundef %29, i32 noundef %20) #30
  %31 = icmp eq i32 %30, 0
  %32 = load ptr, ptr %2, align 8, !tbaa !5
  br i1 %31, label %33, label %35

33:                                               ; preds = %28
  %34 = tail call ptr @force_reg(i32 noundef %20, ptr noundef %32) #30
  store ptr %34, ptr %2, align 8, !tbaa !5
  br label %35

35:                                               ; preds = %33, %28
  %36 = phi ptr [ %34, %33 ], [ %32, %28 ]
  %37 = load ptr, ptr %21, align 8, !tbaa !5
  %38 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 125, i32 noundef %0, ptr noundef %36, ptr noundef %37) #30
  %39 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 23, i32 noundef 0, ptr noundef %1, ptr noundef %38) #30
  %40 = tail call ptr @emit_insn(ptr noundef %39) #30
  br label %97

41:                                               ; preds = %4
  switch i32 %0, label %45 [
    i32 71, label %49
    i32 82, label %42
    i32 65, label %43
    i32 79, label %44
  ]

42:                                               ; preds = %41
  br label %49

43:                                               ; preds = %41
  br label %49

44:                                               ; preds = %41
  br label %49

45:                                               ; preds = %41
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 27214, ptr noundef nonnull @.str.131) #30
  br label %49

46:                                               ; preds = %4
  switch i32 %0, label %48 [
    i32 70, label %49
    i32 81, label %47
  ]

47:                                               ; preds = %46
  br label %49

48:                                               ; preds = %46
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 27230, ptr noundef nonnull @.str.131) #30
  br label %49

49:                                               ; preds = %45, %44, %43, %42, %48, %47, %41, %46
  %50 = phi i32 [ undef, %48 ], [ 78, %47 ], [ undef, %45 ], [ 78, %44 ], [ 61, %43 ], [ 80, %42 ], [ 66, %41 ], [ 61, %46 ]
  %51 = phi i1 [ true, %48 ], [ false, %47 ], [ true, %45 ], [ true, %44 ], [ true, %43 ], [ true, %42 ], [ true, %41 ], [ false, %46 ]
  %52 = phi i32 [ 0, %48 ], [ 79, %47 ], [ 0, %45 ], [ 0, %44 ], [ 0, %43 ], [ 0, %42 ], [ 0, %41 ], [ 65, %46 ]
  %53 = lshr i32 %3, 1
  %54 = add nsw i32 %3, -1
  %55 = lshr i32 %3, 1
  %56 = zext i32 %55 to i64
  br label %57

57:                                               ; preds = %49, %57
  %58 = phi i64 [ %56, %49 ], [ %60, %57 ]
  %59 = phi i32 [ %54, %49 ], [ %72, %57 ]
  %60 = add nsw i64 %58, -1
  %61 = tail call ptr @gen_reg_rtx(i32 noundef %50) #30
  %62 = getelementptr inbounds [8 x ptr], ptr %5, i64 0, i64 %60
  store ptr %61, ptr %62, align 8, !tbaa !5
  %63 = add nsw i32 %59, -1
  %64 = zext i32 %63 to i64
  %65 = getelementptr inbounds ptr, ptr %2, i64 %64
  %66 = load ptr, ptr %65, align 8, !tbaa !5
  %67 = zext i32 %59 to i64
  %68 = getelementptr inbounds ptr, ptr %2, i64 %67
  %69 = load ptr, ptr %68, align 8, !tbaa !5
  %70 = tail call ptr (i32, ...) @gen_rtvec(i32 noundef 2, ptr noundef %66, ptr noundef %69) #30
  %71 = tail call ptr @gen_rtx_fmt_E_stat(i32 noundef 15, i32 noundef %50, ptr noundef %70) #30
  tail call void @ix86_expand_vector_init(i8 noundef zeroext 0, ptr noundef %61, ptr noundef %71)
  %72 = add nsw i32 %59, -2
  %73 = icmp ugt i32 %59, 2
  br i1 %73, label %57, label %74, !llvm.loop !398

74:                                               ; preds = %57
  %75 = icmp ugt i32 %3, 5
  br i1 %75, label %76, label %95

76:                                               ; preds = %74
  br i1 %51, label %77, label %78

77:                                               ; preds = %76
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 27249, ptr noundef nonnull @.str.131) #30
  br label %78

78:                                               ; preds = %77, %76
  %79 = tail call i32 @llvm.umax.i32(i32 %53, i32 2)
  %80 = add nsw i32 %79, -1
  %81 = lshr i32 %80, 1
  %82 = add nuw nsw i32 %81, 1
  %83 = zext i32 %82 to i64
  br label %84

84:                                               ; preds = %78, %84
  %85 = phi i64 [ 0, %78 ], [ %90, %84 ]
  %86 = phi i64 [ 0, %78 ], [ %91, %84 ]
  %87 = tail call ptr @gen_reg_rtx(i32 noundef %52) #30
  %88 = getelementptr inbounds [4 x ptr], ptr %6, i64 0, i64 %86
  store ptr %87, ptr %88, align 8, !tbaa !5
  %89 = getelementptr inbounds [8 x ptr], ptr %5, i64 0, i64 %85
  call fastcc void @ix86_expand_vector_init_concat(i32 noundef %52, ptr noundef %87, ptr noundef nonnull %89, i32 noundef 2)
  %90 = add nuw nsw i64 %85, 2
  %91 = add nuw nsw i64 %86, 1
  %92 = icmp eq i64 %91, %83
  br i1 %92, label %93, label %84, !llvm.loop !399

93:                                               ; preds = %84
  %94 = lshr i32 %3, 2
  call fastcc void @ix86_expand_vector_init_concat(i32 noundef %0, ptr noundef %1, ptr noundef nonnull %6, i32 noundef %94)
  br label %97

95:                                               ; preds = %74
  call fastcc void @ix86_expand_vector_init_concat(i32 noundef %0, ptr noundef %1, ptr noundef nonnull %5, i32 noundef %53)
  br label %97

96:                                               ; preds = %4
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 27264, ptr noundef nonnull @.str.131) #30
  br label %97

97:                                               ; preds = %93, %95, %96, %35
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %6) #30
  call void @llvm.lifetime.end.p0(i64 64, ptr nonnull %5) #30
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc void @ix86_expand_vector_init_interleave(i32 noundef %0, ptr noundef %1, ptr nocapture noundef %2, i32 noundef %3) unnamed_addr #9 {
  switch i32 %0, label %6 [
    i32 64, label %7
    i32 63, label %5
  ]

5:                                                ; preds = %4
  br label %7

6:                                                ; preds = %4
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 27304, ptr noundef nonnull @.str.131) #30
  br label %7

7:                                                ; preds = %4, %6, %5
  %8 = phi i32 [ undef, %6 ], [ 65, %5 ], [ 66, %4 ]
  %9 = phi i32 [ undef, %6 ], [ 66, %5 ], [ 0, %4 ]
  %10 = phi i32 [ undef, %6 ], [ 14, %5 ], [ 15, %4 ]
  %11 = phi i32 [ undef, %6 ], [ 64, %5 ], [ 65, %4 ]
  %12 = phi ptr [ undef, %6 ], [ @gen_vec_setv16qi, %5 ], [ @gen_vec_setv8hi, %4 ]
  %13 = phi ptr [ undef, %6 ], [ @gen_vec_interleave_lowv8hi, %5 ], [ @gen_vec_interleave_lowv4si, %4 ]
  %14 = phi ptr [ undef, %6 ], [ @gen_vec_interleave_lowv4si, %5 ], [ @gen_vec_interleave_lowv2di, %4 ]
  %15 = icmp sgt i32 %3, 0
  br i1 %15, label %16, label %73

16:                                               ; preds = %7
  %17 = zext i32 %3 to i64
  br label %19

18:                                               ; preds = %19
  br i1 %15, label %53, label %73

19:                                               ; preds = %16, %19
  %20 = phi i64 [ 0, %16 ], [ %51, %19 ]
  %21 = tail call ptr @gen_reg_rtx(i32 noundef 16) #30
  %22 = load ptr, ptr @rtl_hooks, align 8, !tbaa !187
  %23 = shl nuw nsw i64 %20, 1
  %24 = getelementptr inbounds ptr, ptr %2, i64 %23
  %25 = load ptr, ptr %24, align 8, !tbaa !5
  %26 = tail call ptr %22(i32 noundef 16, ptr noundef %25) #30
  %27 = tail call ptr @emit_move_insn(ptr noundef %21, ptr noundef %26) #30
  %28 = tail call ptr @gen_reg_rtx(i32 noundef 65) #30
  %29 = tail call ptr @gen_rtx_fmt_e_stat(i32 noundef 126, i32 noundef 65, ptr noundef %21) #30
  %30 = load ptr, ptr getelementptr inbounds ([3 x [87 x ptr]], ptr @const_tiny_rtx, i64 0, i64 0, i64 65), align 8, !tbaa !5
  %31 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 65), align 8, !tbaa !5
  %32 = tail call ptr @gen_rtx_fmt_eee_stat(i32 noundef 123, i32 noundef 65, ptr noundef %29, ptr noundef %30, ptr noundef %31) #30
  %33 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 23, i32 noundef 0, ptr noundef %28, ptr noundef %32) #30
  %34 = tail call ptr @emit_insn(ptr noundef %33) #30
  %35 = tail call ptr @gen_reg_rtx(i32 noundef %0) #30
  %36 = load ptr, ptr @rtl_hooks, align 8, !tbaa !187
  %37 = tail call ptr %36(i32 noundef %0, ptr noundef %28) #30
  %38 = tail call ptr @emit_move_insn(ptr noundef %35, ptr noundef %37) #30
  %39 = or i64 %23, 1
  %40 = getelementptr inbounds ptr, ptr %2, i64 %39
  %41 = load ptr, ptr %40, align 8, !tbaa !5
  %42 = tail call ptr @force_reg(i32 noundef %10, ptr noundef %41) #30
  %43 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 65), align 8, !tbaa !5
  %44 = tail call ptr %12(ptr noundef %35, ptr noundef %42, ptr noundef %43) #30
  %45 = tail call ptr @emit_insn(ptr noundef %44) #30
  %46 = tail call ptr @gen_reg_rtx(i32 noundef %11) #30
  %47 = getelementptr inbounds ptr, ptr %2, i64 %20
  store ptr %46, ptr %47, align 8, !tbaa !5
  %48 = load ptr, ptr @rtl_hooks, align 8, !tbaa !187
  %49 = tail call ptr %48(i32 noundef %11, ptr noundef %35) #30
  %50 = tail call ptr @emit_move_insn(ptr noundef %46, ptr noundef %49) #30
  %51 = add nuw nsw i64 %20, 1
  %52 = icmp eq i64 %51, %17
  br i1 %52, label %18, label %19, !llvm.loop !400

53:                                               ; preds = %18, %53
  %54 = phi i64 [ %69, %53 ], [ 0, %18 ]
  %55 = phi i64 [ %70, %53 ], [ 0, %18 ]
  %56 = tail call ptr @gen_reg_rtx(i32 noundef %11) #30
  %57 = getelementptr inbounds ptr, ptr %2, i64 %54
  %58 = load ptr, ptr %57, align 8, !tbaa !5
  %59 = or i64 %54, 1
  %60 = getelementptr inbounds ptr, ptr %2, i64 %59
  %61 = load ptr, ptr %60, align 8, !tbaa !5
  %62 = tail call ptr %13(ptr noundef %56, ptr noundef %58, ptr noundef %61) #30
  %63 = tail call ptr @emit_insn(ptr noundef %62) #30
  %64 = tail call ptr @gen_reg_rtx(i32 noundef %8) #30
  %65 = getelementptr inbounds ptr, ptr %2, i64 %55
  store ptr %64, ptr %65, align 8, !tbaa !5
  %66 = load ptr, ptr @rtl_hooks, align 8, !tbaa !187
  %67 = tail call ptr %66(i32 noundef %8, ptr noundef %56) #30
  %68 = tail call ptr @emit_move_insn(ptr noundef %64, ptr noundef %67) #30
  %69 = add nuw i64 %54, 2
  %70 = add nuw i64 %55, 1
  %71 = trunc i64 %69 to i32
  %72 = icmp slt i32 %71, %3
  br i1 %72, label %53, label %73, !llvm.loop !401

73:                                               ; preds = %53, %7, %18
  switch i32 %8, label %114 [
    i32 65, label %74
    i32 66, label %102
  ]

74:                                               ; preds = %73
  %75 = icmp ult i32 %3, 2
  br i1 %75, label %102, label %76

76:                                               ; preds = %74
  %77 = lshr i32 %3, 1
  %78 = tail call i32 @llvm.umax.i32(i32 %77, i32 2)
  %79 = add nsw i32 %78, -1
  %80 = lshr i32 %79, 1
  %81 = add nuw nsw i32 %80, 1
  %82 = zext i32 %81 to i64
  br label %83

83:                                               ; preds = %76, %83
  %84 = phi i64 [ 0, %76 ], [ %99, %83 ]
  %85 = phi i64 [ 0, %76 ], [ %100, %83 ]
  %86 = tail call ptr @gen_reg_rtx(i32 noundef 65) #30
  %87 = getelementptr inbounds ptr, ptr %2, i64 %84
  %88 = load ptr, ptr %87, align 8, !tbaa !5
  %89 = or i64 %84, 1
  %90 = getelementptr inbounds ptr, ptr %2, i64 %89
  %91 = load ptr, ptr %90, align 8, !tbaa !5
  %92 = tail call ptr %14(ptr noundef %86, ptr noundef %88, ptr noundef %91) #30
  %93 = tail call ptr @emit_insn(ptr noundef %92) #30
  %94 = tail call ptr @gen_reg_rtx(i32 noundef %9) #30
  %95 = getelementptr inbounds ptr, ptr %2, i64 %85
  store ptr %94, ptr %95, align 8, !tbaa !5
  %96 = load ptr, ptr @rtl_hooks, align 8, !tbaa !187
  %97 = tail call ptr %96(i32 noundef %9, ptr noundef %86) #30
  %98 = tail call ptr @emit_move_insn(ptr noundef %94, ptr noundef %97) #30
  %99 = add nuw nsw i64 %84, 2
  %100 = add nuw nsw i64 %85, 1
  %101 = icmp eq i64 %100, %82
  br i1 %101, label %102, label %83, !llvm.loop !402

102:                                              ; preds = %83, %74, %73
  %103 = phi ptr [ %14, %73 ], [ @gen_vec_interleave_lowv2di, %74 ], [ @gen_vec_interleave_lowv2di, %83 ]
  %104 = tail call ptr @gen_reg_rtx(i32 noundef 66) #30
  %105 = load ptr, ptr %2, align 8, !tbaa !5
  %106 = getelementptr inbounds ptr, ptr %2, i64 1
  %107 = load ptr, ptr %106, align 8, !tbaa !5
  %108 = tail call ptr %103(ptr noundef %104, ptr noundef %105, ptr noundef %107) #30
  %109 = tail call ptr @emit_insn(ptr noundef %108) #30
  %110 = load ptr, ptr @rtl_hooks, align 8, !tbaa !187
  %111 = tail call ptr %110(i32 noundef %0, ptr noundef %104) #30
  %112 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 23, i32 noundef 0, ptr noundef %1, ptr noundef %111) #30
  %113 = tail call ptr @emit_insn(ptr noundef %112) #30
  br label %115

114:                                              ; preds = %73
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 27379, ptr noundef nonnull @.str.131) #30
  br label %115

115:                                              ; preds = %114, %102
  ret void
}

declare ptr @gen_vec_setv8hi(ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

declare ptr @gen_vec_interleave_lowv2di(ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

declare ptr @gen_vec_setv16qi(ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

declare ptr @gen_sse2_maskcmpdf3(ptr noundef, ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

declare ptr @gen_sse_maskcmpsf3(ptr noundef, ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc zeroext i8 @expand_vec_perm_vpermil(ptr nocapture noundef readonly %0) unnamed_addr #9 {
  %2 = alloca [8 x ptr], align 16
  call void @llvm.lifetime.start.p0(i64 64, ptr nonnull %2) #30
  %3 = load i32, ptr @ix86_isa_flags, align 4, !tbaa !20
  %4 = and i32 %3, 32
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %139, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %0, i64 0, i32 4
  %8 = load i32, ptr %7, align 8, !tbaa !293
  %9 = icmp eq i32 %8, 81
  br i1 %9, label %10, label %139

10:                                               ; preds = %6
  %11 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %0, i64 0, i32 1
  %12 = load ptr, ptr %11, align 8, !tbaa !296
  %13 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %0, i64 0, i32 2
  %14 = load ptr, ptr %13, align 8, !tbaa !295
  %15 = icmp eq ptr %12, %14
  br i1 %15, label %16, label %139

16:                                               ; preds = %10
  %17 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %0, i64 0, i32 3, i64 0
  %18 = load i8, ptr %17, align 1, !tbaa !16
  %19 = icmp ugt i8 %18, 3
  br i1 %19, label %139, label %20

20:                                               ; preds = %16
  %21 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %0, i64 0, i32 3, i64 1
  %22 = load i8, ptr %21, align 1, !tbaa !16
  %23 = icmp ugt i8 %22, 3
  br i1 %23, label %139, label %24

24:                                               ; preds = %20
  %25 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %0, i64 0, i32 3, i64 2
  %26 = load i8, ptr %25, align 1, !tbaa !16
  %27 = icmp ugt i8 %26, 3
  br i1 %27, label %139, label %28

28:                                               ; preds = %24
  %29 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %0, i64 0, i32 3, i64 3
  %30 = load i8, ptr %29, align 1, !tbaa !16
  %31 = icmp ugt i8 %30, 3
  br i1 %31, label %139, label %32

32:                                               ; preds = %28
  %33 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %0, i64 0, i32 3, i64 4
  %34 = load i8, ptr %33, align 1, !tbaa !16
  %35 = icmp ult i8 %34, 4
  br i1 %35, label %139, label %36

36:                                               ; preds = %32
  %37 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %0, i64 0, i32 3, i64 5
  %38 = load i8, ptr %37, align 1, !tbaa !16
  %39 = icmp ult i8 %38, 4
  br i1 %39, label %139, label %40

40:                                               ; preds = %36
  %41 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %0, i64 0, i32 3, i64 6
  %42 = load i8, ptr %41, align 1, !tbaa !16
  %43 = icmp ult i8 %42, 4
  br i1 %43, label %139, label %44

44:                                               ; preds = %40
  %45 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %0, i64 0, i32 3, i64 7
  %46 = load i8, ptr %45, align 1, !tbaa !16
  %47 = icmp ult i8 %46, 4
  br i1 %47, label %139, label %48

48:                                               ; preds = %44
  %49 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %0, i64 0, i32 6
  %50 = load i8, ptr %49, align 1, !tbaa !303
  %51 = icmp eq i8 %50, 0
  br i1 %51, label %52, label %139

52:                                               ; preds = %48
  %53 = zext i8 %18 to i64
  %54 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef %53) #30
  store ptr %54, ptr %2, align 16, !tbaa !5
  %55 = load i8, ptr %21, align 1, !tbaa !16
  %56 = zext i8 %55 to i32
  %57 = icmp ugt i8 %55, 11
  %58 = add nsw i32 %56, -8
  %59 = icmp ugt i8 %55, 3
  %60 = add nsw i32 %56, -4
  %61 = select i1 %59, i32 %60, i32 %56
  %62 = select i1 %57, i32 %58, i32 %61
  %63 = zext i32 %62 to i64
  %64 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef %63) #30
  %65 = getelementptr inbounds [8 x ptr], ptr %2, i64 0, i64 1
  store ptr %64, ptr %65, align 8, !tbaa !5
  %66 = load i8, ptr %25, align 1, !tbaa !16
  %67 = zext i8 %66 to i32
  %68 = icmp ugt i8 %66, 11
  %69 = add nsw i32 %67, -8
  %70 = icmp ugt i8 %66, 3
  %71 = add nsw i32 %67, -4
  %72 = select i1 %70, i32 %71, i32 %67
  %73 = select i1 %68, i32 %69, i32 %72
  %74 = zext i32 %73 to i64
  %75 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef %74) #30
  %76 = getelementptr inbounds [8 x ptr], ptr %2, i64 0, i64 2
  store ptr %75, ptr %76, align 16, !tbaa !5
  %77 = load i8, ptr %29, align 1, !tbaa !16
  %78 = zext i8 %77 to i32
  %79 = icmp ugt i8 %77, 11
  %80 = add nsw i32 %78, -8
  %81 = icmp ugt i8 %77, 3
  %82 = add nsw i32 %78, -4
  %83 = select i1 %81, i32 %82, i32 %78
  %84 = select i1 %79, i32 %80, i32 %83
  %85 = zext i32 %84 to i64
  %86 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef %85) #30
  %87 = getelementptr inbounds [8 x ptr], ptr %2, i64 0, i64 3
  store ptr %86, ptr %87, align 8, !tbaa !5
  %88 = load i8, ptr %33, align 1, !tbaa !16
  %89 = zext i8 %88 to i32
  %90 = icmp ugt i8 %88, 11
  %91 = add nsw i32 %89, -8
  %92 = icmp ugt i8 %88, 3
  %93 = add nsw i32 %89, -4
  %94 = select i1 %92, i32 %93, i32 %89
  %95 = select i1 %90, i32 %91, i32 %94
  %96 = zext i32 %95 to i64
  %97 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef %96) #30
  %98 = getelementptr inbounds [8 x ptr], ptr %2, i64 0, i64 4
  store ptr %97, ptr %98, align 16, !tbaa !5
  %99 = load i8, ptr %37, align 1, !tbaa !16
  %100 = zext i8 %99 to i32
  %101 = icmp ugt i8 %99, 11
  %102 = add nsw i32 %100, -8
  %103 = icmp ugt i8 %99, 3
  %104 = add nsw i32 %100, -4
  %105 = select i1 %103, i32 %104, i32 %100
  %106 = select i1 %101, i32 %102, i32 %105
  %107 = zext i32 %106 to i64
  %108 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef %107) #30
  %109 = getelementptr inbounds [8 x ptr], ptr %2, i64 0, i64 5
  store ptr %108, ptr %109, align 8, !tbaa !5
  %110 = load i8, ptr %41, align 1, !tbaa !16
  %111 = zext i8 %110 to i32
  %112 = icmp ugt i8 %110, 11
  %113 = add nsw i32 %111, -8
  %114 = icmp ugt i8 %110, 3
  %115 = add nsw i32 %111, -4
  %116 = select i1 %114, i32 %115, i32 %111
  %117 = select i1 %112, i32 %113, i32 %116
  %118 = zext i32 %117 to i64
  %119 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef %118) #30
  %120 = getelementptr inbounds [8 x ptr], ptr %2, i64 0, i64 6
  store ptr %119, ptr %120, align 16, !tbaa !5
  %121 = load i8, ptr %45, align 1, !tbaa !16
  %122 = zext i8 %121 to i32
  %123 = icmp ugt i8 %121, 11
  %124 = add nsw i32 %122, -8
  %125 = icmp ugt i8 %121, 3
  %126 = add nsw i32 %122, -4
  %127 = select i1 %125, i32 %126, i32 %122
  %128 = select i1 %123, i32 %124, i32 %127
  %129 = zext i32 %128 to i64
  %130 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef %129) #30
  %131 = getelementptr inbounds [8 x ptr], ptr %2, i64 0, i64 7
  store ptr %130, ptr %131, align 8, !tbaa !5
  %132 = call ptr @gen_rtvec_v(i32 noundef 8, ptr noundef nonnull %2) #30
  %133 = call ptr @gen_rtx_CONST_VECTOR(i32 noundef 70, ptr noundef %132) #30
  %134 = call ptr @force_reg(i32 noundef 70, ptr noundef %133) #30
  %135 = load ptr, ptr %0, align 8, !tbaa !291
  %136 = load ptr, ptr %11, align 8, !tbaa !296
  %137 = call ptr @gen_avx_vpermilvarv8sf3(ptr noundef %135, ptr noundef %136, ptr noundef %134) #30
  %138 = call ptr @emit_insn(ptr noundef %137) #30
  br label %139

139:                                              ; preds = %16, %20, %24, %28, %32, %36, %40, %44, %48, %1, %6, %10, %52
  %140 = phi i8 [ 1, %52 ], [ 0, %10 ], [ 0, %6 ], [ 0, %1 ], [ 1, %48 ], [ 0, %44 ], [ 0, %40 ], [ 0, %36 ], [ 0, %32 ], [ 0, %28 ], [ 0, %24 ], [ 0, %20 ], [ 0, %16 ]
  call void @llvm.lifetime.end.p0(i64 64, ptr nonnull %2) #30
  ret i8 %140
}

declare ptr @gen_sse4_1_pblendvb(ptr noundef, ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

declare ptr @gen_avx_vpermilvarv8sf3(ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

declare ptr @gen_ssse3_pshufbv16qi3(ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

declare ptr @gen_xop_pperm(ptr noundef, ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

declare ptr @gen_avx_vperm2f128v4df3(ptr noundef, ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

declare ptr @gen_avx_unpckhpd256(ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

declare ptr @gen_avx_unpcklpd256(ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

declare ptr @gen_avx_vperm2f128v8sf3(ptr noundef, ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc zeroext i8 @expand_vec_perm_pshufb2(ptr nocapture noundef readonly %0) unnamed_addr #9 {
  %2 = alloca [2 x [16 x ptr]], align 16
  call void @llvm.lifetime.start.p0(i64 256, ptr nonnull %2) #30
  %3 = load i32, ptr @ix86_isa_flags, align 4, !tbaa !20
  %4 = and i32 %3, 4194304
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %91, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %0, i64 0, i32 4
  %8 = load i32, ptr %7, align 8, !tbaa !293
  %9 = zext i32 %8 to i64
  %10 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %9
  %11 = load i8, ptr %10, align 1, !tbaa !16
  %12 = icmp eq i8 %11, 16
  br i1 %12, label %13, label %91

13:                                               ; preds = %6
  %14 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %0, i64 0, i32 1
  %15 = load ptr, ptr %14, align 8, !tbaa !296
  %16 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %0, i64 0, i32 2
  %17 = load ptr, ptr %16, align 8, !tbaa !295
  %18 = icmp eq ptr %15, %17
  br i1 %18, label %19, label %22

19:                                               ; preds = %13
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 29682, ptr noundef nonnull @.str.131) #30
  %20 = load i32, ptr %7, align 8, !tbaa !293
  %21 = zext i32 %20 to i64
  br label %22

22:                                               ; preds = %13, %19
  %23 = phi i64 [ %9, %13 ], [ %21, %19 ]
  %24 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %0, i64 0, i32 5
  %25 = load i8, ptr %24, align 4, !tbaa !294
  %26 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %23
  %27 = load i8, ptr %26, align 1, !tbaa !16
  %28 = zext i8 %27 to i64
  %29 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %28
  %30 = load i8, ptr %29, align 1, !tbaa !16
  %31 = zext i8 %30 to i64
  %32 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef -128) #30
  %33 = icmp eq i8 %25, 0
  %34 = icmp eq i8 %30, 0
  %35 = select i1 %33, i1 true, i1 %34
  br i1 %35, label %66, label %36

36:                                               ; preds = %22
  %37 = zext i8 %30 to i64
  %38 = zext i8 %25 to i64
  br label %39

39:                                               ; preds = %36, %63
  %40 = phi i64 [ 0, %36 ], [ %64, %63 ]
  %41 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %0, i64 0, i32 3, i64 %40
  %42 = load i8, ptr %41, align 1, !tbaa !16
  %43 = zext i8 %42 to i64
  %44 = icmp uge i8 %42, %25
  %45 = select i1 %44, i8 %25, i8 0
  %46 = zext i8 %45 to i64
  %47 = sub nsw i64 %43, %46
  %48 = mul nsw i64 %47, %31
  %49 = zext i1 %44 to i64
  %50 = mul nuw nsw i64 %40, %37
  %51 = xor i1 %44, true
  %52 = zext i1 %51 to i64
  br label %53

53:                                               ; preds = %39, %53
  %54 = phi i64 [ 0, %39 ], [ %61, %53 ]
  %55 = add i64 %54, %48
  %56 = and i64 %55, 4294967295
  %57 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef %56) #30
  %58 = add nuw nsw i64 %54, %50
  %59 = getelementptr inbounds [2 x [16 x ptr]], ptr %2, i64 0, i64 %49, i64 %58
  store ptr %57, ptr %59, align 8, !tbaa !5
  %60 = getelementptr inbounds [2 x [16 x ptr]], ptr %2, i64 0, i64 %52, i64 %58
  store ptr %32, ptr %60, align 8, !tbaa !5
  %61 = add nuw nsw i64 %54, 1
  %62 = icmp eq i64 %61, %37
  br i1 %62, label %63, label %53, !llvm.loop !403

63:                                               ; preds = %53
  %64 = add nuw nsw i64 %40, 1
  %65 = icmp eq i64 %64, %38
  br i1 %65, label %66, label %39, !llvm.loop !404

66:                                               ; preds = %63, %22
  %67 = call ptr @gen_rtvec_v(i32 noundef 16, ptr noundef nonnull %2) #30
  %68 = call ptr @gen_rtx_CONST_VECTOR(i32 noundef 63, ptr noundef %67) #30
  %69 = call ptr @force_reg(i32 noundef 63, ptr noundef %68) #30
  %70 = call ptr @gen_reg_rtx(i32 noundef 63) #30
  %71 = load ptr, ptr @rtl_hooks, align 8, !tbaa !187
  %72 = load ptr, ptr %14, align 8, !tbaa !296
  %73 = call ptr %71(i32 noundef 63, ptr noundef %72) #30
  %74 = call ptr @gen_ssse3_pshufbv16qi3(ptr noundef %70, ptr noundef %73, ptr noundef %69) #30
  %75 = call ptr @emit_insn(ptr noundef %74) #30
  %76 = getelementptr inbounds [2 x [16 x ptr]], ptr %2, i64 0, i64 1
  %77 = call ptr @gen_rtvec_v(i32 noundef 16, ptr noundef nonnull %76) #30
  %78 = call ptr @gen_rtx_CONST_VECTOR(i32 noundef 63, ptr noundef %77) #30
  %79 = call ptr @force_reg(i32 noundef 63, ptr noundef %78) #30
  %80 = call ptr @gen_reg_rtx(i32 noundef 63) #30
  %81 = load ptr, ptr @rtl_hooks, align 8, !tbaa !187
  %82 = load ptr, ptr %16, align 8, !tbaa !295
  %83 = call ptr %81(i32 noundef 63, ptr noundef %82) #30
  %84 = call ptr @gen_ssse3_pshufbv16qi3(ptr noundef %80, ptr noundef %83, ptr noundef %79) #30
  %85 = call ptr @emit_insn(ptr noundef %84) #30
  %86 = load ptr, ptr @rtl_hooks, align 8, !tbaa !187
  %87 = load ptr, ptr %0, align 8, !tbaa !291
  %88 = call ptr %86(i32 noundef 63, ptr noundef %87) #30
  %89 = call ptr @gen_iorv16qi3(ptr noundef %88, ptr noundef %70, ptr noundef %80) #30
  %90 = call ptr @emit_insn(ptr noundef %89) #30
  br label %91

91:                                               ; preds = %1, %6, %66
  %92 = phi i8 [ 1, %66 ], [ 0, %6 ], [ 0, %1 ]
  call void @llvm.lifetime.end.p0(i64 256, ptr nonnull %2) #30
  ret i8 %92
}

declare ptr @gen_iorv16qi3(ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

declare void @final_start_function(ptr noundef, ptr noundef, i32 noundef) local_unnamed_addr #3

declare void @make_decl_rtl(ptr noundef) local_unnamed_addr #3

declare void @final_end_function() local_unnamed_addr #3

declare void @default_file_start() local_unnamed_addr #3

declare ptr @decl_assembler_name(ptr noundef) local_unnamed_addr #3

declare ptr @make_node_stat(i32 noundef) local_unnamed_addr #3

declare void @init_function_start(ptr noundef) local_unnamed_addr #3

declare void @init_insn_lengths() local_unnamed_addr #3

declare void @free_after_compilation(ptr noundef) local_unnamed_addr #3

declare void @set_cfun(ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc i32 @ix86_flags_dependent(ptr nocapture noundef readonly %0, ptr noundef %1, i32 noundef %2) unnamed_addr #9 {
  switch i32 %2, label %70 [
    i32 33, label %4
    i32 19, label %4
    i32 18, label %4
    i32 17, label %4
  ]

4:                                                ; preds = %3, %3, %3, %3
  %5 = load i32, ptr %1, align 8
  %6 = and i32 %5, 65535
  %7 = add nsw i32 %6, -7
  %8 = icmp ult i32 %7, 4
  br i1 %8, label %9, label %22

9:                                                ; preds = %4
  %10 = getelementptr inbounds %struct.rtx_def, ptr %1, i64 1
  %11 = load ptr, ptr %10, align 8, !tbaa !16
  %12 = load i32, ptr %11, align 8
  %13 = and i32 %12, 65535
  %14 = icmp eq i32 %13, 23
  br i1 %14, label %18, label %15

15:                                               ; preds = %9
  %16 = tail call ptr @single_set_2(ptr noundef nonnull %1, ptr noundef nonnull %11) #30
  %17 = icmp eq ptr %16, null
  br i1 %17, label %22, label %18

18:                                               ; preds = %9, %15
  %19 = phi ptr [ %16, %15 ], [ %11, %9 ]
  %20 = getelementptr inbounds %struct.rtx_def, ptr %19, i64 0, i32 1
  %21 = load ptr, ptr %20, align 8, !tbaa !16
  br label %48

22:                                               ; preds = %4, %15
  %23 = getelementptr inbounds %struct.rtx_def, ptr %1, i64 1
  %24 = load ptr, ptr %23, align 8, !tbaa !16
  %25 = load i32, ptr %24, align 8
  %26 = and i32 %25, 65535
  %27 = icmp eq i32 %26, 15
  br i1 %27, label %28, label %70

28:                                               ; preds = %22
  %29 = getelementptr inbounds %struct.rtx_def, ptr %24, i64 0, i32 1
  %30 = load ptr, ptr %29, align 8, !tbaa !16
  %31 = load i32, ptr %30, align 8, !tbaa !107
  %32 = icmp eq i32 %31, 2
  br i1 %32, label %33, label %70

33:                                               ; preds = %28
  %34 = getelementptr inbounds %struct.rtvec_def, ptr %30, i64 0, i32 1
  %35 = load ptr, ptr %34, align 8, !tbaa !5
  %36 = load i32, ptr %35, align 8
  %37 = and i32 %36, 65535
  %38 = icmp eq i32 %37, 23
  br i1 %38, label %39, label %70

39:                                               ; preds = %33
  %40 = getelementptr inbounds %struct.rtvec_def, ptr %30, i64 1
  %41 = load ptr, ptr %40, align 8, !tbaa !5
  %42 = load i32, ptr %41, align 8
  %43 = and i32 %42, 65535
  %44 = icmp eq i32 %43, 23
  br i1 %44, label %45, label %70

45:                                               ; preds = %39
  %46 = getelementptr inbounds %struct.rtx_def, ptr %35, i64 0, i32 1
  %47 = load ptr, ptr %46, align 8, !tbaa !16
  br label %48

48:                                               ; preds = %45, %18
  %49 = phi ptr [ %21, %18 ], [ %47, %45 ]
  %50 = phi ptr [ null, %18 ], [ %47, %45 ]
  %51 = load i32, ptr %49, align 8
  %52 = and i32 %51, 65535
  %53 = icmp eq i32 %52, 37
  br i1 %53, label %54, label %70

54:                                               ; preds = %48
  %55 = getelementptr i8, ptr %49, i64 8
  %56 = load i32, ptr %55, align 8, !tbaa !16
  %57 = icmp eq i32 %56, 17
  br i1 %57, label %58, label %70

58:                                               ; preds = %54
  %59 = getelementptr inbounds %struct.rtx_def, ptr %0, i64 1
  %60 = load ptr, ptr %59, align 8, !tbaa !16
  %61 = tail call i32 @reg_overlap_mentioned_p(ptr noundef nonnull %49, ptr noundef %60) #30
  %62 = icmp eq i32 %61, 0
  br i1 %62, label %70, label %63

63:                                               ; preds = %58
  %64 = icmp eq ptr %50, null
  br i1 %64, label %69, label %65

65:                                               ; preds = %63
  %66 = load ptr, ptr %59, align 8, !tbaa !16
  %67 = tail call i32 @reg_overlap_mentioned_p(ptr noundef nonnull %50, ptr noundef %66) #30
  %68 = icmp eq i32 %67, 0
  br i1 %68, label %69, label %70

69:                                               ; preds = %65, %63
  br label %70

70:                                               ; preds = %65, %58, %48, %54, %22, %28, %33, %39, %3, %69
  %71 = phi i32 [ 1, %69 ], [ 0, %3 ], [ 0, %39 ], [ 0, %33 ], [ 0, %28 ], [ 0, %22 ], [ 0, %54 ], [ 0, %48 ], [ 0, %58 ], [ 0, %65 ]
  ret i32 %71
}

declare i32 @get_attr_memory(ptr noundef) local_unnamed_addr #3

declare i32 @get_attr_fp_int_src(ptr noundef) local_unnamed_addr #3

declare ptr @single_set_2(ptr noundef, ptr noundef) local_unnamed_addr #3

declare i32 @get_attr_unit(ptr noundef) local_unnamed_addr #3

declare ptr @gen_raw_REG(i32 noundef, i32 noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc zeroext i8 @ix86_expand_vec_perm_builtin_1(ptr nocapture noundef %0) unnamed_addr #9 {
  %2 = alloca %struct.expand_vec_perm_d, align 8
  %3 = alloca %struct.expand_vec_perm_d, align 8
  %4 = alloca [32 x i8], align 16
  %5 = ptrtoint ptr %4 to i64
  %6 = alloca [16 x i8], align 16
  %7 = tail call fastcc zeroext i8 @expand_vec_perm_1(ptr noundef %0), !range !66
  %8 = icmp eq i8 %7, 0
  br i1 %8, label %9, label %940

9:                                                ; preds = %1
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %6) #30
  %10 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %0, i64 0, i32 4
  %11 = load i32, ptr %10, align 8, !tbaa !293
  %12 = icmp eq i32 %11, 64
  br i1 %12, label %13, label %69

13:                                               ; preds = %9
  %14 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %0, i64 0, i32 1
  %15 = load ptr, ptr %14, align 8, !tbaa !296
  %16 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %0, i64 0, i32 2
  %17 = load ptr, ptr %16, align 8, !tbaa !295
  %18 = icmp eq ptr %15, %17
  br i1 %18, label %19, label %69

19:                                               ; preds = %13
  %20 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %0, i64 0, i32 3, i64 0
  %21 = load i8, ptr %20, align 1, !tbaa !16
  %22 = icmp ugt i8 %21, 3
  br i1 %22, label %69, label %23

23:                                               ; preds = %19
  %24 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %0, i64 0, i32 3, i64 1
  %25 = load i8, ptr %24, align 1, !tbaa !16
  %26 = icmp ugt i8 %25, 3
  br i1 %26, label %69, label %27

27:                                               ; preds = %23
  %28 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %0, i64 0, i32 3, i64 2
  %29 = load i8, ptr %28, align 1, !tbaa !16
  %30 = icmp ugt i8 %29, 3
  br i1 %30, label %69, label %31

31:                                               ; preds = %27
  %32 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %0, i64 0, i32 3, i64 3
  %33 = load i8, ptr %32, align 1, !tbaa !16
  %34 = icmp ugt i8 %33, 3
  br i1 %34, label %69, label %35

35:                                               ; preds = %31
  %36 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %0, i64 0, i32 3, i64 4
  %37 = load i8, ptr %36, align 1, !tbaa !16
  %38 = icmp ult i8 %37, 4
  br i1 %38, label %69, label %39

39:                                               ; preds = %35
  %40 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %0, i64 0, i32 3, i64 5
  %41 = load i8, ptr %40, align 1, !tbaa !16
  %42 = icmp ult i8 %41, 4
  br i1 %42, label %69, label %43

43:                                               ; preds = %39
  %44 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %0, i64 0, i32 3, i64 6
  %45 = load i8, ptr %44, align 1, !tbaa !16
  %46 = icmp ult i8 %45, 4
  br i1 %46, label %69, label %47

47:                                               ; preds = %43
  %48 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %0, i64 0, i32 3, i64 7
  %49 = load i8, ptr %48, align 1, !tbaa !16
  %50 = icmp ult i8 %49, 4
  br i1 %50, label %69, label %51

51:                                               ; preds = %47
  %52 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %0, i64 0, i32 6
  %53 = load i8, ptr %52, align 1, !tbaa !303
  %54 = icmp eq i8 %53, 0
  br i1 %54, label %55, label %68

55:                                               ; preds = %51
  %56 = load i32, ptr %20, align 8
  store i32 %56, ptr %6, align 16
  %57 = getelementptr inbounds [16 x i8], ptr %6, i64 0, i64 4
  store <4 x i8> <i8 4, i8 5, i8 6, i8 7>, ptr %57, align 4, !tbaa !16
  %58 = load ptr, ptr %0, align 8, !tbaa !291
  %59 = call fastcc zeroext i8 @expand_vselect(ptr noundef %58, ptr noundef %15, ptr noundef nonnull %6, i32 noundef 8), !range !66
  %60 = icmp eq i8 %59, 0
  br i1 %60, label %61, label %62

61:                                               ; preds = %55
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 29462, ptr noundef nonnull @.str.131) #30
  br label %62

62:                                               ; preds = %61, %55
  %63 = load i32, ptr %36, align 1
  store i32 %63, ptr %57, align 4
  store <4 x i8> <i8 0, i8 1, i8 2, i8 3>, ptr %6, align 16, !tbaa !16
  %64 = load ptr, ptr %0, align 8, !tbaa !291
  %65 = call fastcc zeroext i8 @expand_vselect(ptr noundef %64, ptr noundef %64, ptr noundef nonnull %6, i32 noundef 8), !range !66
  %66 = icmp eq i8 %65, 0
  br i1 %66, label %67, label %68

67:                                               ; preds = %62
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 29469, ptr noundef nonnull @.str.131) #30
  br label %68

68:                                               ; preds = %51, %62, %67
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %6) #30
  br label %940

69:                                               ; preds = %13, %9, %47, %43, %39, %35, %31, %27, %23, %19
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %6) #30
  %70 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %0, i64 0, i32 5
  %71 = load i8, ptr %70, align 4, !tbaa !294
  %72 = zext i8 %71 to i32
  %73 = load i32, ptr @ix86_isa_flags, align 4, !tbaa !20
  %74 = and i32 %73, 4194304
  %75 = icmp eq i32 %74, 0
  br i1 %75, label %270, label %76

76:                                               ; preds = %69
  %77 = zext i32 %11 to i64
  %78 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %77
  %79 = load i8, ptr %78, align 1, !tbaa !16
  %80 = icmp ne i8 %79, 16
  %81 = icmp eq i8 %71, 0
  %82 = select i1 %80, i1 true, i1 %81
  br i1 %82, label %270, label %83

83:                                               ; preds = %76
  %84 = zext i8 %71 to i64
  %85 = icmp ult i8 %71, 16
  br i1 %85, label %132, label %86

86:                                               ; preds = %83
  %87 = and i64 %84, 240
  %88 = insertelement <4 x i32> poison, i32 %72, i64 0
  %89 = shufflevector <4 x i32> %88, <4 x i32> poison, <4 x i32> zeroinitializer
  br label %90

90:                                               ; preds = %90, %86
  %91 = phi i64 [ 0, %86 ], [ %120, %90 ]
  %92 = phi <4 x i32> [ %89, %86 ], [ %112, %90 ]
  %93 = phi <4 x i32> [ %89, %86 ], [ %113, %90 ]
  %94 = phi <4 x i32> [ %89, %86 ], [ %114, %90 ]
  %95 = phi <4 x i32> [ %89, %86 ], [ %115, %90 ]
  %96 = phi <4 x i32> [ zeroinitializer, %86 ], [ %116, %90 ]
  %97 = phi <4 x i32> [ zeroinitializer, %86 ], [ %117, %90 ]
  %98 = phi <4 x i32> [ zeroinitializer, %86 ], [ %118, %90 ]
  %99 = phi <4 x i32> [ zeroinitializer, %86 ], [ %119, %90 ]
  %100 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %0, i64 0, i32 3, i64 %91
  %101 = load <4 x i8>, ptr %100, align 1, !tbaa !16
  %102 = getelementptr inbounds i8, ptr %100, i64 4
  %103 = load <4 x i8>, ptr %102, align 1, !tbaa !16
  %104 = getelementptr inbounds i8, ptr %100, i64 8
  %105 = load <4 x i8>, ptr %104, align 1, !tbaa !16
  %106 = getelementptr inbounds i8, ptr %100, i64 12
  %107 = load <4 x i8>, ptr %106, align 1, !tbaa !16
  %108 = zext <4 x i8> %101 to <4 x i32>
  %109 = zext <4 x i8> %103 to <4 x i32>
  %110 = zext <4 x i8> %105 to <4 x i32>
  %111 = zext <4 x i8> %107 to <4 x i32>
  %112 = call <4 x i32> @llvm.umin.v4i32(<4 x i32> %92, <4 x i32> %108)
  %113 = call <4 x i32> @llvm.umin.v4i32(<4 x i32> %93, <4 x i32> %109)
  %114 = call <4 x i32> @llvm.umin.v4i32(<4 x i32> %94, <4 x i32> %110)
  %115 = call <4 x i32> @llvm.umin.v4i32(<4 x i32> %95, <4 x i32> %111)
  %116 = call <4 x i32> @llvm.umax.v4i32(<4 x i32> %96, <4 x i32> %108)
  %117 = call <4 x i32> @llvm.umax.v4i32(<4 x i32> %97, <4 x i32> %109)
  %118 = call <4 x i32> @llvm.umax.v4i32(<4 x i32> %98, <4 x i32> %110)
  %119 = call <4 x i32> @llvm.umax.v4i32(<4 x i32> %99, <4 x i32> %111)
  %120 = add nuw i64 %91, 16
  %121 = icmp eq i64 %120, %87
  br i1 %121, label %122, label %90, !llvm.loop !405

122:                                              ; preds = %90
  %123 = call <4 x i32> @llvm.umax.v4i32(<4 x i32> %116, <4 x i32> %117)
  %124 = call <4 x i32> @llvm.umax.v4i32(<4 x i32> %123, <4 x i32> %118)
  %125 = call <4 x i32> @llvm.umax.v4i32(<4 x i32> %124, <4 x i32> %119)
  %126 = call i32 @llvm.vector.reduce.umax.v4i32(<4 x i32> %125)
  %127 = call <4 x i32> @llvm.umin.v4i32(<4 x i32> %112, <4 x i32> %113)
  %128 = call <4 x i32> @llvm.umin.v4i32(<4 x i32> %127, <4 x i32> %114)
  %129 = call <4 x i32> @llvm.umin.v4i32(<4 x i32> %128, <4 x i32> %115)
  %130 = call i32 @llvm.vector.reduce.umin.v4i32(<4 x i32> %129)
  %131 = icmp eq i64 %87, %84
  br i1 %131, label %147, label %132

132:                                              ; preds = %83, %122
  %133 = phi i64 [ 0, %83 ], [ %87, %122 ]
  %134 = phi i32 [ %72, %83 ], [ %130, %122 ]
  %135 = phi i32 [ 0, %83 ], [ %126, %122 ]
  br label %136

136:                                              ; preds = %132, %136
  %137 = phi i64 [ %145, %136 ], [ %133, %132 ]
  %138 = phi i32 [ %143, %136 ], [ %134, %132 ]
  %139 = phi i32 [ %144, %136 ], [ %135, %132 ]
  %140 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %0, i64 0, i32 3, i64 %137
  %141 = load i8, ptr %140, align 1, !tbaa !16
  %142 = zext i8 %141 to i32
  %143 = tail call i32 @llvm.umin.i32(i32 %138, i32 %142)
  %144 = tail call i32 @llvm.umax.i32(i32 %139, i32 %142)
  %145 = add nuw nsw i64 %137, 1
  %146 = icmp eq i64 %145, %84
  br i1 %146, label %147, label %136, !llvm.loop !406

147:                                              ; preds = %136, %122
  %148 = phi i32 [ %130, %122 ], [ %143, %136 ]
  %149 = phi i32 [ %126, %122 ], [ %144, %136 ]
  %150 = icmp ne i32 %148, 0
  %151 = sub nsw i32 %149, %148
  %152 = icmp ult i32 %151, %72
  %153 = select i1 %150, i1 %152, i1 false
  br i1 %153, label %154, label %270

154:                                              ; preds = %147
  %155 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %0, i64 0, i32 6
  %156 = load i8, ptr %155, align 1, !tbaa !303
  %157 = icmp eq i8 %156, 0
  br i1 %157, label %158, label %940

158:                                              ; preds = %154
  %159 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %77
  %160 = load i8, ptr %159, align 1, !tbaa !16
  %161 = zext i8 %160 to i64
  %162 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %161
  %163 = load i8, ptr %162, align 1, !tbaa !16
  %164 = zext i8 %163 to i32
  %165 = shl nuw nsw i32 %148, 3
  %166 = mul nuw nsw i32 %165, %164
  %167 = zext i32 %166 to i64
  %168 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef %167) #30
  %169 = load ptr, ptr @rtl_hooks, align 8, !tbaa !187
  %170 = load ptr, ptr %0, align 8, !tbaa !291
  %171 = tail call ptr %169(i32 noundef 18, ptr noundef %170) #30
  %172 = load ptr, ptr @rtl_hooks, align 8, !tbaa !187
  %173 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %0, i64 0, i32 2
  %174 = load ptr, ptr %173, align 8, !tbaa !295
  %175 = tail call ptr %172(i32 noundef 18, ptr noundef %174) #30
  %176 = load ptr, ptr @rtl_hooks, align 8, !tbaa !187
  %177 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %0, i64 0, i32 1
  %178 = load ptr, ptr %177, align 8, !tbaa !296
  %179 = tail call ptr %176(i32 noundef 18, ptr noundef %178) #30
  %180 = tail call ptr @gen_ssse3_palignrti(ptr noundef %171, ptr noundef %175, ptr noundef %179, ptr noundef %168) #30
  %181 = tail call ptr @emit_insn(ptr noundef %180) #30
  %182 = load ptr, ptr %0, align 8, !tbaa !291
  store ptr %182, ptr %173, align 8, !tbaa !295
  store ptr %182, ptr %177, align 8, !tbaa !296
  %183 = icmp ult i8 %71, 8
  br i1 %183, label %245, label %184

184:                                              ; preds = %158
  %185 = icmp ult i8 %71, 16
  br i1 %185, label %214, label %186

186:                                              ; preds = %184
  %187 = and i64 %84, 240
  %188 = insertelement <16 x i32> poison, i32 %148, i64 0
  %189 = shufflevector <16 x i32> %188, <16 x i32> poison, <16 x i32> zeroinitializer
  br label %190

190:                                              ; preds = %190, %186
  %191 = phi i64 [ 0, %186 ], [ %202, %190 ]
  %192 = phi <16 x i64> [ <i64 0, i64 1, i64 2, i64 3, i64 4, i64 5, i64 6, i64 7, i64 8, i64 9, i64 10, i64 11, i64 12, i64 13, i64 14, i64 15>, %186 ], [ %203, %190 ]
  %193 = phi <16 x i8> [ <i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1>, %186 ], [ %200, %190 ]
  %194 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %0, i64 0, i32 3, i64 %191
  %195 = load <16 x i8>, ptr %194, align 1, !tbaa !16
  %196 = zext <16 x i8> %195 to <16 x i32>
  %197 = sub nsw <16 x i32> %196, %189
  %198 = zext <16 x i32> %197 to <16 x i64>
  %199 = icmp eq <16 x i64> %192, %198
  %200 = select <16 x i1> %199, <16 x i8> %193, <16 x i8> zeroinitializer
  %201 = trunc <16 x i32> %197 to <16 x i8>
  store <16 x i8> %201, ptr %194, align 1, !tbaa !16
  %202 = add nuw i64 %191, 16
  %203 = add <16 x i64> %192, <i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16>
  %204 = icmp eq i64 %202, %187
  br i1 %204, label %205, label %190, !llvm.loop !407

205:                                              ; preds = %190
  %206 = icmp ne <16 x i8> %200, <i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1>
  %207 = bitcast <16 x i1> %206 to i16
  %208 = icmp eq i16 %207, 0
  %209 = zext i1 %208 to i8
  %210 = icmp eq i64 %187, %84
  br i1 %210, label %261, label %211

211:                                              ; preds = %205
  %212 = and i64 %84, 8
  %213 = icmp eq i64 %212, 0
  br i1 %213, label %245, label %214

214:                                              ; preds = %184, %211
  %215 = phi i8 [ 1, %184 ], [ %209, %211 ]
  %216 = phi i64 [ 0, %184 ], [ %187, %211 ]
  %217 = and i64 %84, 248
  %218 = insertelement <8 x i64> poison, i64 %216, i64 0
  %219 = shufflevector <8 x i64> %218, <8 x i64> poison, <8 x i32> zeroinitializer
  %220 = or <8 x i64> %219, <i64 0, i64 1, i64 2, i64 3, i64 4, i64 5, i64 6, i64 7>
  %221 = insertelement <8 x i8> poison, i8 %215, i64 0
  %222 = shufflevector <8 x i8> %221, <8 x i8> poison, <8 x i32> zeroinitializer
  %223 = insertelement <8 x i32> poison, i32 %148, i64 0
  %224 = shufflevector <8 x i32> %223, <8 x i32> poison, <8 x i32> zeroinitializer
  br label %225

225:                                              ; preds = %225, %214
  %226 = phi i64 [ %216, %214 ], [ %237, %225 ]
  %227 = phi <8 x i64> [ %220, %214 ], [ %238, %225 ]
  %228 = phi <8 x i8> [ %222, %214 ], [ %235, %225 ]
  %229 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %0, i64 0, i32 3, i64 %226
  %230 = load <8 x i8>, ptr %229, align 1, !tbaa !16
  %231 = zext <8 x i8> %230 to <8 x i32>
  %232 = sub nsw <8 x i32> %231, %224
  %233 = zext <8 x i32> %232 to <8 x i64>
  %234 = icmp eq <8 x i64> %227, %233
  %235 = select <8 x i1> %234, <8 x i8> %228, <8 x i8> zeroinitializer
  %236 = trunc <8 x i32> %232 to <8 x i8>
  store <8 x i8> %236, ptr %229, align 1, !tbaa !16
  %237 = add nuw i64 %226, 8
  %238 = add <8 x i64> %227, <i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8>
  %239 = icmp eq i64 %237, %217
  br i1 %239, label %240, label %225, !llvm.loop !408

240:                                              ; preds = %225
  %241 = bitcast <8 x i8> %235 to i64
  %242 = icmp eq i64 %241, 72340172838076673
  %243 = zext i1 %242 to i8
  %244 = icmp eq i64 %217, %84
  br i1 %244, label %261, label %245

245:                                              ; preds = %158, %211, %240
  %246 = phi i64 [ 0, %158 ], [ %187, %211 ], [ %217, %240 ]
  %247 = phi i8 [ 1, %158 ], [ %209, %211 ], [ %243, %240 ]
  br label %248

248:                                              ; preds = %245, %248
  %249 = phi i64 [ %259, %248 ], [ %246, %245 ]
  %250 = phi i8 [ %257, %248 ], [ %247, %245 ]
  %251 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %0, i64 0, i32 3, i64 %249
  %252 = load i8, ptr %251, align 1, !tbaa !16
  %253 = zext i8 %252 to i32
  %254 = sub nsw i32 %253, %148
  %255 = zext i32 %254 to i64
  %256 = icmp eq i64 %249, %255
  %257 = select i1 %256, i8 %250, i8 0
  %258 = trunc i32 %254 to i8
  store i8 %258, ptr %251, align 1, !tbaa !16
  %259 = add nuw nsw i64 %249, 1
  %260 = icmp eq i64 %259, %84
  br i1 %260, label %261, label %248, !llvm.loop !409

261:                                              ; preds = %248, %240, %205
  %262 = phi i8 [ %209, %205 ], [ %243, %240 ], [ %257, %248 ]
  %263 = icmp eq i8 %262, 0
  br i1 %263, label %264, label %940

264:                                              ; preds = %261
  %265 = tail call fastcc zeroext i8 @expand_vec_perm_1(ptr noundef nonnull %0), !range !66
  %266 = icmp eq i8 %265, 0
  br i1 %266, label %267, label %940

267:                                              ; preds = %264
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 29531, ptr noundef nonnull @.str.131) #30
  %268 = load i8, ptr %70, align 4, !tbaa !294
  %269 = zext i8 %268 to i32
  br label %270

270:                                              ; preds = %76, %147, %267, %69
  %271 = phi i32 [ %72, %69 ], [ %269, %267 ], [ %72, %147 ], [ %72, %76 ]
  %272 = phi i8 [ %71, %69 ], [ %268, %267 ], [ %71, %147 ], [ %71, %76 ]
  call void @llvm.lifetime.start.p0(i64 48, ptr nonnull %2) #30
  call void @llvm.lifetime.start.p0(i64 48, ptr nonnull %3) #30
  %273 = lshr i32 %271, 1
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %4) #30
  %274 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %0, i64 0, i32 1
  %275 = load ptr, ptr %274, align 8, !tbaa !296
  %276 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %0, i64 0, i32 2
  %277 = load ptr, ptr %276, align 8, !tbaa !295
  %278 = icmp eq ptr %275, %277
  br i1 %278, label %932, label %279

279:                                              ; preds = %270
  %280 = load i32, ptr %10, align 8, !tbaa !293
  %281 = zext i32 %280 to i64
  %282 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %281
  %283 = load i8, ptr %282, align 1, !tbaa !16
  %284 = icmp eq i8 %283, 16
  br i1 %284, label %285, label %932

285:                                              ; preds = %279
  %286 = icmp eq i8 %272, 0
  br i1 %286, label %339, label %287

287:                                              ; preds = %285
  %288 = zext i8 %272 to i64
  %289 = icmp ult i8 %272, 16
  br i1 %289, label %326, label %290

290:                                              ; preds = %287
  %291 = and i64 %288, 240
  br label %292

292:                                              ; preds = %292, %290
  %293 = phi i64 [ 0, %290 ], [ %318, %292 ]
  %294 = phi <4 x i32> [ zeroinitializer, %290 ], [ %314, %292 ]
  %295 = phi <4 x i32> [ zeroinitializer, %290 ], [ %315, %292 ]
  %296 = phi <4 x i32> [ zeroinitializer, %290 ], [ %316, %292 ]
  %297 = phi <4 x i32> [ zeroinitializer, %290 ], [ %317, %292 ]
  %298 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %0, i64 0, i32 3, i64 %293
  %299 = load <4 x i8>, ptr %298, align 1, !tbaa !16
  %300 = getelementptr inbounds i8, ptr %298, i64 4
  %301 = load <4 x i8>, ptr %300, align 1, !tbaa !16
  %302 = getelementptr inbounds i8, ptr %298, i64 8
  %303 = load <4 x i8>, ptr %302, align 1, !tbaa !16
  %304 = getelementptr inbounds i8, ptr %298, i64 12
  %305 = load <4 x i8>, ptr %304, align 1, !tbaa !16
  %306 = zext <4 x i8> %299 to <4 x i32>
  %307 = zext <4 x i8> %301 to <4 x i32>
  %308 = zext <4 x i8> %303 to <4 x i32>
  %309 = zext <4 x i8> %305 to <4 x i32>
  %310 = shl nuw <4 x i32> <i32 1, i32 1, i32 1, i32 1>, %306
  %311 = shl nuw <4 x i32> <i32 1, i32 1, i32 1, i32 1>, %307
  %312 = shl nuw <4 x i32> <i32 1, i32 1, i32 1, i32 1>, %308
  %313 = shl nuw <4 x i32> <i32 1, i32 1, i32 1, i32 1>, %309
  %314 = or <4 x i32> %310, %294
  %315 = or <4 x i32> %311, %295
  %316 = or <4 x i32> %312, %296
  %317 = or <4 x i32> %313, %297
  %318 = add nuw i64 %293, 16
  %319 = icmp eq i64 %318, %291
  br i1 %319, label %320, label %292, !llvm.loop !410

320:                                              ; preds = %292
  %321 = or <4 x i32> %315, %314
  %322 = or <4 x i32> %316, %321
  %323 = or <4 x i32> %317, %322
  %324 = call i32 @llvm.vector.reduce.or.v4i32(<4 x i32> %323)
  %325 = icmp eq i64 %291, %288
  br i1 %325, label %339, label %326

326:                                              ; preds = %287, %320
  %327 = phi i64 [ 0, %287 ], [ %291, %320 ]
  %328 = phi i32 [ 0, %287 ], [ %324, %320 ]
  br label %329

329:                                              ; preds = %326, %329
  %330 = phi i64 [ %337, %329 ], [ %327, %326 ]
  %331 = phi i32 [ %336, %329 ], [ %328, %326 ]
  %332 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %0, i64 0, i32 3, i64 %330
  %333 = load i8, ptr %332, align 1, !tbaa !16
  %334 = zext i8 %333 to i32
  %335 = shl nuw i32 1, %334
  %336 = or i32 %335, %331
  %337 = add nuw nsw i64 %330, 1
  %338 = icmp eq i64 %337, %288
  br i1 %338, label %339, label %329, !llvm.loop !411

339:                                              ; preds = %329, %320, %285
  %340 = phi i32 [ 0, %285 ], [ %324, %320 ], [ %336, %329 ]
  %341 = shl nsw i32 -1, %273
  %342 = xor i32 %341, -1
  %343 = shl i32 %342, %273
  %344 = shl i32 %343, %273
  %345 = shl i32 %344, %273
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 16 dereferenceable(32) %4, i8 -1, i64 32, i1 false)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(48) %2, ptr noundef nonnull align 8 dereferenceable(48) %0, i64 48, i1 false), !tbaa.struct !412
  %346 = or i32 %344, %342
  %347 = and i32 %340, %346
  %348 = icmp eq i32 %347, %340
  br i1 %348, label %349, label %431

349:                                              ; preds = %339
  %350 = icmp ult i8 %272, 2
  br i1 %350, label %886, label %351

351:                                              ; preds = %349
  %352 = zext i8 %272 to i64
  %353 = tail call i32 @llvm.umax.i32(i32 %273, i32 1)
  %354 = zext i32 %353 to i64
  %355 = icmp ult i32 %353, 16
  br i1 %355, label %414, label %356

356:                                              ; preds = %351
  %357 = getelementptr i8, ptr %4, i64 %354
  %358 = getelementptr i8, ptr %4, i64 %352
  %359 = add nuw nsw i64 %354, %352
  %360 = getelementptr i8, ptr %4, i64 %359
  %361 = getelementptr inbounds i8, ptr %2, i64 24
  %362 = shl nuw nsw i64 %354, 1
  %363 = add nuw nsw i64 %362, 23
  %364 = getelementptr i8, ptr %2, i64 %363
  %365 = getelementptr inbounds i8, ptr %2, i64 25
  %366 = add nuw nsw i64 %362, 24
  %367 = getelementptr i8, ptr %2, i64 %366
  %368 = icmp ult ptr %4, %360
  %369 = icmp ult ptr %358, %357
  %370 = and i1 %368, %369
  %371 = icmp ult ptr %361, %367
  %372 = icmp ult ptr %365, %364
  %373 = and i1 %371, %372
  %374 = or i1 %370, %373
  br i1 %374, label %414, label %375

375:                                              ; preds = %356
  %376 = and i64 %354, 120
  %377 = insertelement <4 x i64> poison, i64 %352, i64 0
  %378 = shufflevector <4 x i64> %377, <4 x i64> poison, <4 x i32> zeroinitializer
  %379 = getelementptr i8, ptr %2, i64 -1
  br label %380

380:                                              ; preds = %380, %375
  %381 = phi i64 [ 0, %375 ], [ %409, %380 ]
  %382 = phi <8 x i8> [ <i8 0, i8 1, i8 2, i8 3, i8 4, i8 5, i8 6, i8 7>, %375 ], [ %410, %380 ]
  %383 = or i64 %381, 1
  %384 = or i64 %381, 2
  %385 = or i64 %381, 3
  %386 = insertelement <4 x i64> poison, i64 %381, i64 0
  %387 = shufflevector <4 x i64> %386, <4 x i64> poison, <4 x i32> zeroinitializer
  %388 = or <4 x i64> %387, <i64 4, i64 5, i64 6, i64 7>
  %389 = shl nuw nsw i64 %381, 1
  %390 = shl <8 x i8> %382, <i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1>
  %391 = getelementptr inbounds [32 x i8], ptr %4, i64 0, i64 %381
  store <8 x i8> %390, ptr %391, align 8, !tbaa !16, !alias.scope !413, !noalias !416
  %392 = or i64 %389, 1
  %393 = or <8 x i8> %390, <i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1>
  %394 = add nuw nsw i64 %381, %352
  %395 = add nuw nsw i64 %383, %352
  %396 = add nuw nsw i64 %384, %352
  %397 = add nuw nsw i64 %385, %352
  %398 = add nuw nsw <4 x i64> %388, %378
  %399 = insertelement <8 x i64> poison, i64 %394, i64 0
  %400 = insertelement <8 x i64> %399, i64 %395, i64 1
  %401 = insertelement <8 x i64> %400, i64 %396, i64 2
  %402 = insertelement <8 x i64> %401, i64 %397, i64 3
  %403 = shufflevector <4 x i64> %398, <4 x i64> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>
  %404 = shufflevector <8 x i64> %402, <8 x i64> %403, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %405 = getelementptr inbounds [32 x i8], ptr %4, i64 0, i64 %394
  store <8 x i8> %393, ptr %405, align 1, !tbaa !16, !alias.scope !416
  %406 = trunc <8 x i64> %404 to <8 x i8>
  %407 = getelementptr %struct.expand_vec_perm_d, ptr %379, i64 0, i32 3, i64 %392
  %408 = shufflevector <8 x i8> %382, <8 x i8> %406, <16 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11, i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  store <16 x i8> %408, ptr %407, align 8, !tbaa !16
  %409 = add nuw i64 %381, 8
  %410 = add <8 x i8> %382, <i8 8, i8 8, i8 8, i8 8, i8 8, i8 8, i8 8, i8 8>
  %411 = icmp eq i64 %409, %376
  br i1 %411, label %412, label %380, !llvm.loop !418

412:                                              ; preds = %380
  %413 = icmp eq i64 %376, %354
  br i1 %413, label %886, label %414

414:                                              ; preds = %356, %351, %412
  %415 = phi i64 [ 0, %356 ], [ 0, %351 ], [ %376, %412 ]
  br label %416

416:                                              ; preds = %414, %416
  %417 = phi i64 [ %429, %416 ], [ %415, %414 ]
  %418 = trunc i64 %417 to i8
  %419 = shl nuw nsw i64 %417, 1
  %420 = shl i8 %418, 1
  %421 = getelementptr inbounds [32 x i8], ptr %4, i64 0, i64 %417
  store i8 %420, ptr %421, align 1, !tbaa !16
  %422 = or i64 %419, 1
  %423 = or i8 %420, 1
  %424 = add nuw nsw i64 %417, %352
  %425 = getelementptr inbounds [32 x i8], ptr %4, i64 0, i64 %424
  store i8 %423, ptr %425, align 1, !tbaa !16
  %426 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %2, i64 0, i32 3, i64 %419
  store i8 %418, ptr %426, align 2, !tbaa !16
  %427 = trunc i64 %424 to i8
  %428 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %2, i64 0, i32 3, i64 %422
  store i8 %427, ptr %428, align 1, !tbaa !16
  %429 = add nuw nsw i64 %417, 1
  %430 = icmp eq i64 %429, %354
  br i1 %430, label %886, label %416, !llvm.loop !419

431:                                              ; preds = %339
  %432 = or i32 %345, %343
  %433 = and i32 %340, %432
  %434 = icmp eq i32 %433, %340
  br i1 %434, label %435, label %532

435:                                              ; preds = %431
  %436 = icmp ult i8 %272, 2
  br i1 %436, label %886, label %437

437:                                              ; preds = %435
  %438 = add nuw nsw i32 %273, %271
  %439 = zext i32 %438 to i64
  %440 = zext i32 %273 to i64
  %441 = tail call i32 @llvm.umax.i32(i32 %273, i32 1)
  %442 = zext i32 %441 to i64
  %443 = icmp ult i32 %441, 16
  br i1 %443, label %511, label %444

444:                                              ; preds = %437
  %445 = getelementptr i8, ptr %4, i64 %440
  %446 = add nuw nsw i64 %442, %440
  %447 = getelementptr i8, ptr %4, i64 %446
  %448 = getelementptr i8, ptr %4, i64 %439
  %449 = add nuw nsw i64 %442, %439
  %450 = getelementptr i8, ptr %4, i64 %449
  %451 = getelementptr inbounds i8, ptr %2, i64 24
  %452 = shl nuw nsw i64 %442, 1
  %453 = add nuw nsw i64 %452, 23
  %454 = getelementptr i8, ptr %2, i64 %453
  %455 = getelementptr inbounds i8, ptr %2, i64 25
  %456 = add nuw nsw i64 %452, 24
  %457 = getelementptr i8, ptr %2, i64 %456
  %458 = icmp ult ptr %445, %450
  %459 = icmp ult ptr %448, %447
  %460 = and i1 %458, %459
  %461 = icmp ult ptr %451, %457
  %462 = icmp ult ptr %455, %454
  %463 = and i1 %461, %462
  %464 = or i1 %460, %463
  br i1 %464, label %511, label %465

465:                                              ; preds = %444
  %466 = and i64 %442, 120
  %467 = insertelement <8 x i32> poison, i32 %273, i64 0
  %468 = shufflevector <8 x i32> %467, <8 x i32> poison, <8 x i32> zeroinitializer
  %469 = insertelement <4 x i64> poison, i64 %439, i64 0
  %470 = shufflevector <4 x i64> %469, <4 x i64> poison, <4 x i32> zeroinitializer
  %471 = getelementptr i8, ptr %2, i64 -1
  br label %472

472:                                              ; preds = %472, %465
  %473 = phi i64 [ 0, %465 ], [ %505, %472 ]
  %474 = phi <8 x i32> [ <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>, %465 ], [ %506, %472 ]
  %475 = phi <8 x i8> [ <i8 0, i8 1, i8 2, i8 3, i8 4, i8 5, i8 6, i8 7>, %465 ], [ %507, %472 ]
  %476 = or i64 %473, 1
  %477 = or i64 %473, 2
  %478 = or i64 %473, 3
  %479 = insertelement <4 x i64> poison, i64 %473, i64 0
  %480 = shufflevector <4 x i64> %479, <4 x i64> poison, <4 x i32> zeroinitializer
  %481 = or <4 x i64> %480, <i64 4, i64 5, i64 6, i64 7>
  %482 = shl nuw nsw i64 %473, 1
  %483 = shl <8 x i8> %475, <i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1>
  %484 = add nuw nsw i64 %473, %440
  %485 = add nuw nsw <8 x i32> %468, %474
  %486 = getelementptr inbounds [32 x i8], ptr %4, i64 0, i64 %484
  store <8 x i8> %483, ptr %486, align 1, !tbaa !16, !alias.scope !420, !noalias !423
  %487 = or i64 %482, 1
  %488 = or <8 x i8> %483, <i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1>
  %489 = add nuw nsw i64 %473, %439
  %490 = add nuw nsw i64 %476, %439
  %491 = add nuw nsw i64 %477, %439
  %492 = add nuw nsw i64 %478, %439
  %493 = add nuw nsw <4 x i64> %481, %470
  %494 = insertelement <8 x i64> poison, i64 %489, i64 0
  %495 = insertelement <8 x i64> %494, i64 %490, i64 1
  %496 = insertelement <8 x i64> %495, i64 %491, i64 2
  %497 = insertelement <8 x i64> %496, i64 %492, i64 3
  %498 = shufflevector <4 x i64> %493, <4 x i64> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>
  %499 = shufflevector <8 x i64> %497, <8 x i64> %498, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %500 = getelementptr inbounds [32 x i8], ptr %4, i64 0, i64 %489
  store <8 x i8> %488, ptr %500, align 1, !tbaa !16, !alias.scope !423
  %501 = trunc <8 x i32> %485 to <8 x i8>
  %502 = trunc <8 x i64> %499 to <8 x i8>
  %503 = getelementptr %struct.expand_vec_perm_d, ptr %471, i64 0, i32 3, i64 %487
  %504 = shufflevector <8 x i8> %501, <8 x i8> %502, <16 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11, i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  store <16 x i8> %504, ptr %503, align 8, !tbaa !16
  %505 = add nuw i64 %473, 8
  %506 = add <8 x i32> %474, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %507 = add <8 x i8> %475, <i8 8, i8 8, i8 8, i8 8, i8 8, i8 8, i8 8, i8 8>
  %508 = icmp eq i64 %505, %466
  br i1 %508, label %509, label %472, !llvm.loop !425

509:                                              ; preds = %472
  %510 = icmp eq i64 %466, %442
  br i1 %510, label %886, label %511

511:                                              ; preds = %444, %437, %509
  %512 = phi i64 [ 0, %444 ], [ 0, %437 ], [ %466, %509 ]
  br label %513

513:                                              ; preds = %511, %513
  %514 = phi i64 [ %530, %513 ], [ %512, %511 ]
  %515 = trunc i64 %514 to i32
  %516 = shl nuw nsw i64 %514, 1
  %517 = trunc i64 %514 to i8
  %518 = shl i8 %517, 1
  %519 = add nuw nsw i64 %514, %440
  %520 = add nuw nsw i32 %273, %515
  %521 = getelementptr inbounds [32 x i8], ptr %4, i64 0, i64 %519
  store i8 %518, ptr %521, align 1, !tbaa !16
  %522 = or i64 %516, 1
  %523 = or i8 %518, 1
  %524 = add nuw nsw i64 %514, %439
  %525 = getelementptr inbounds [32 x i8], ptr %4, i64 0, i64 %524
  store i8 %523, ptr %525, align 1, !tbaa !16
  %526 = trunc i32 %520 to i8
  %527 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %2, i64 0, i32 3, i64 %516
  store i8 %526, ptr %527, align 2, !tbaa !16
  %528 = trunc i64 %524 to i8
  %529 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %2, i64 0, i32 3, i64 %522
  store i8 %528, ptr %529, align 1, !tbaa !16
  %530 = add nuw nsw i64 %514, 1
  %531 = icmp eq i64 %530, %442
  br i1 %531, label %886, label %513, !llvm.loop !426

532:                                              ; preds = %431
  %533 = or i32 %345, %342
  %534 = and i32 %340, %533
  %535 = icmp eq i32 %534, %340
  br i1 %535, label %536, label %704

536:                                              ; preds = %532
  %537 = icmp ult i8 %272, 2
  br i1 %537, label %879, label %538

538:                                              ; preds = %536
  %539 = add nuw nsw i32 %273, %271
  %540 = zext i32 %539 to i64
  %541 = zext i32 %273 to i64
  %542 = tail call i32 @llvm.umax.i32(i32 %273, i32 1)
  %543 = zext i32 %542 to i64
  %544 = icmp ult i32 %542, 8
  br i1 %544, label %653, label %545

545:                                              ; preds = %538
  %546 = icmp ult i32 %539, 16
  %547 = icmp ult i32 %271, 32
  %548 = or i1 %546, %547
  br i1 %548, label %653, label %549

549:                                              ; preds = %545
  %550 = icmp ult i32 %542, 16
  br i1 %550, label %603, label %551

551:                                              ; preds = %549
  %552 = and i64 %543, 112
  %553 = insertelement <16 x i32> poison, i32 %273, i64 0
  %554 = shufflevector <16 x i32> %553, <16 x i32> poison, <16 x i32> zeroinitializer
  %555 = insertelement <8 x i64> poison, i64 %540, i64 0
  %556 = shufflevector <8 x i64> %555, <8 x i64> poison, <8 x i32> zeroinitializer
  %557 = insertelement <4 x i64> poison, i64 %540, i64 0
  %558 = shufflevector <4 x i64> %557, <4 x i64> poison, <4 x i32> zeroinitializer
  br label %559

559:                                              ; preds = %559, %551
  %560 = phi i64 [ 0, %551 ], [ %594, %559 ]
  %561 = phi <16 x i32> [ <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>, %551 ], [ %595, %559 ]
  %562 = phi <16 x i8> [ <i8 0, i8 1, i8 2, i8 3, i8 4, i8 5, i8 6, i8 7, i8 8, i8 9, i8 10, i8 11, i8 12, i8 13, i8 14, i8 15>, %551 ], [ %596, %559 ]
  %563 = or i64 %560, 1
  %564 = or i64 %560, 2
  %565 = or i64 %560, 3
  %566 = insertelement <8 x i64> poison, i64 %560, i64 0
  %567 = shufflevector <8 x i64> %566, <8 x i64> poison, <8 x i32> zeroinitializer
  %568 = or <8 x i64> %567, <i64 4, i64 5, i64 6, i64 7, i64 8, i64 9, i64 10, i64 11>
  %569 = insertelement <4 x i64> poison, i64 %560, i64 0
  %570 = shufflevector <4 x i64> %569, <4 x i64> poison, <4 x i32> zeroinitializer
  %571 = or <4 x i64> %570, <i64 12, i64 13, i64 14, i64 15>
  %572 = getelementptr inbounds [32 x i8], ptr %4, i64 0, i64 %560
  store <16 x i8> %562, ptr %572, align 16, !tbaa !16
  %573 = add nuw nsw i64 %560, %541
  %574 = add nuw nsw <16 x i32> %554, %561
  %575 = trunc <16 x i32> %574 to <16 x i8>
  %576 = add nuw nsw i64 %560, %540
  %577 = add nuw nsw i64 %563, %540
  %578 = add nuw nsw i64 %564, %540
  %579 = add nuw nsw i64 %565, %540
  %580 = add nuw nsw <8 x i64> %568, %556
  %581 = add nuw nsw <4 x i64> %571, %558
  %582 = insertelement <16 x i64> poison, i64 %576, i64 0
  %583 = insertelement <16 x i64> %582, i64 %577, i64 1
  %584 = insertelement <16 x i64> %583, i64 %578, i64 2
  %585 = insertelement <16 x i64> %584, i64 %579, i64 3
  %586 = shufflevector <8 x i64> %580, <8 x i64> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %587 = shufflevector <16 x i64> %585, <16 x i64> %586, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 poison, i32 poison, i32 poison, i32 poison>
  %588 = shufflevector <4 x i64> %581, <4 x i64> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %589 = shufflevector <16 x i64> %587, <16 x i64> %588, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 16, i32 17, i32 18, i32 19>
  %590 = getelementptr inbounds [32 x i8], ptr %4, i64 0, i64 %576
  store <16 x i8> %575, ptr %590, align 1, !tbaa !16
  %591 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %2, i64 0, i32 3, i64 %560
  store <16 x i8> %562, ptr %591, align 8, !tbaa !16
  %592 = trunc <16 x i64> %589 to <16 x i8>
  %593 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %2, i64 0, i32 3, i64 %573
  store <16 x i8> %592, ptr %593, align 1, !tbaa !16
  %594 = add nuw i64 %560, 16
  %595 = add <16 x i32> %561, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %596 = add <16 x i8> %562, <i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16>
  %597 = icmp eq i64 %594, %552
  br i1 %597, label %598, label %559, !llvm.loop !427

598:                                              ; preds = %559
  %599 = icmp eq i64 %552, %543
  br i1 %599, label %702, label %600

600:                                              ; preds = %598
  %601 = and i64 %543, 8
  %602 = icmp eq i64 %601, 0
  br i1 %602, label %653, label %603

603:                                              ; preds = %549, %600
  %604 = phi i64 [ %552, %600 ], [ 0, %549 ]
  %605 = and i64 %543, 120
  %606 = trunc i64 %604 to i32
  %607 = insertelement <8 x i32> poison, i32 %606, i64 0
  %608 = shufflevector <8 x i32> %607, <8 x i32> poison, <8 x i32> zeroinitializer
  %609 = or <8 x i32> %608, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %610 = trunc i64 %604 to i8
  %611 = insertelement <8 x i8> poison, i8 %610, i64 0
  %612 = shufflevector <8 x i8> %611, <8 x i8> poison, <8 x i32> zeroinitializer
  %613 = or <8 x i8> %612, <i8 0, i8 1, i8 2, i8 3, i8 4, i8 5, i8 6, i8 7>
  %614 = insertelement <8 x i32> poison, i32 %273, i64 0
  %615 = shufflevector <8 x i32> %614, <8 x i32> poison, <8 x i32> zeroinitializer
  %616 = insertelement <4 x i64> poison, i64 %540, i64 0
  %617 = shufflevector <4 x i64> %616, <4 x i64> poison, <4 x i32> zeroinitializer
  br label %618

618:                                              ; preds = %618, %603
  %619 = phi i64 [ %604, %603 ], [ %647, %618 ]
  %620 = phi <8 x i32> [ %609, %603 ], [ %648, %618 ]
  %621 = phi <8 x i8> [ %613, %603 ], [ %649, %618 ]
  %622 = or i64 %619, 1
  %623 = or i64 %619, 2
  %624 = or i64 %619, 3
  %625 = insertelement <4 x i64> poison, i64 %619, i64 0
  %626 = shufflevector <4 x i64> %625, <4 x i64> poison, <4 x i32> zeroinitializer
  %627 = or <4 x i64> %626, <i64 4, i64 5, i64 6, i64 7>
  %628 = getelementptr inbounds [32 x i8], ptr %4, i64 0, i64 %619
  store <8 x i8> %621, ptr %628, align 8, !tbaa !16
  %629 = add nuw nsw i64 %619, %541
  %630 = add nuw nsw <8 x i32> %615, %620
  %631 = trunc <8 x i32> %630 to <8 x i8>
  %632 = add nuw nsw i64 %619, %540
  %633 = add nuw nsw i64 %622, %540
  %634 = add nuw nsw i64 %623, %540
  %635 = add nuw nsw i64 %624, %540
  %636 = add nuw nsw <4 x i64> %627, %617
  %637 = insertelement <8 x i64> poison, i64 %632, i64 0
  %638 = insertelement <8 x i64> %637, i64 %633, i64 1
  %639 = insertelement <8 x i64> %638, i64 %634, i64 2
  %640 = insertelement <8 x i64> %639, i64 %635, i64 3
  %641 = shufflevector <4 x i64> %636, <4 x i64> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>
  %642 = shufflevector <8 x i64> %640, <8 x i64> %641, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %643 = getelementptr inbounds [32 x i8], ptr %4, i64 0, i64 %632
  store <8 x i8> %631, ptr %643, align 1, !tbaa !16
  %644 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %2, i64 0, i32 3, i64 %619
  store <8 x i8> %621, ptr %644, align 8, !tbaa !16
  %645 = trunc <8 x i64> %642 to <8 x i8>
  %646 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %2, i64 0, i32 3, i64 %629
  store <8 x i8> %645, ptr %646, align 1, !tbaa !16
  %647 = add nuw i64 %619, 8
  %648 = add <8 x i32> %620, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %649 = add <8 x i8> %621, <i8 8, i8 8, i8 8, i8 8, i8 8, i8 8, i8 8, i8 8>
  %650 = icmp eq i64 %647, %605
  br i1 %650, label %651, label %618, !llvm.loop !428

651:                                              ; preds = %618
  %652 = icmp eq i64 %605, %543
  br i1 %652, label %702, label %653

653:                                              ; preds = %545, %538, %600, %651
  %654 = phi i64 [ 0, %538 ], [ 0, %545 ], [ %552, %600 ], [ %605, %651 ]
  %655 = xor i64 %654, -1
  %656 = and i64 %543, 1
  %657 = icmp eq i64 %656, 0
  br i1 %657, label %671, label %658

658:                                              ; preds = %653
  %659 = trunc i64 %654 to i32
  %660 = trunc i64 %654 to i8
  %661 = getelementptr inbounds [32 x i8], ptr %4, i64 0, i64 %654
  store i8 %660, ptr %661, align 8, !tbaa !16
  %662 = add nuw nsw i64 %654, %541
  %663 = add nuw nsw i32 %273, %659
  %664 = trunc i32 %663 to i8
  %665 = add nuw nsw i64 %654, %540
  %666 = getelementptr inbounds [32 x i8], ptr %4, i64 0, i64 %665
  store i8 %664, ptr %666, align 1, !tbaa !16
  %667 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %2, i64 0, i32 3, i64 %654
  store i8 %660, ptr %667, align 8, !tbaa !16
  %668 = trunc i64 %665 to i8
  %669 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %2, i64 0, i32 3, i64 %662
  store i8 %668, ptr %669, align 1, !tbaa !16
  %670 = or i64 %654, 1
  br label %671

671:                                              ; preds = %658, %653
  %672 = phi i64 [ %654, %653 ], [ %670, %658 ]
  %673 = sub nsw i64 0, %543
  %674 = icmp eq i64 %655, %673
  br i1 %674, label %702, label %675

675:                                              ; preds = %671, %675
  %676 = phi i64 [ %700, %675 ], [ %672, %671 ]
  %677 = trunc i64 %676 to i32
  %678 = trunc i64 %676 to i8
  %679 = getelementptr inbounds [32 x i8], ptr %4, i64 0, i64 %676
  store i8 %678, ptr %679, align 1, !tbaa !16
  %680 = add nuw nsw i64 %676, %541
  %681 = add nuw nsw i32 %273, %677
  %682 = trunc i32 %681 to i8
  %683 = add nuw nsw i64 %676, %540
  %684 = getelementptr inbounds [32 x i8], ptr %4, i64 0, i64 %683
  store i8 %682, ptr %684, align 1, !tbaa !16
  %685 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %2, i64 0, i32 3, i64 %676
  store i8 %678, ptr %685, align 1, !tbaa !16
  %686 = trunc i64 %683 to i8
  %687 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %2, i64 0, i32 3, i64 %680
  store i8 %686, ptr %687, align 1, !tbaa !16
  %688 = add nuw nsw i64 %676, 1
  %689 = trunc i64 %688 to i32
  %690 = trunc i64 %688 to i8
  %691 = getelementptr inbounds [32 x i8], ptr %4, i64 0, i64 %688
  store i8 %690, ptr %691, align 1, !tbaa !16
  %692 = add nuw nsw i64 %688, %541
  %693 = add nuw nsw i32 %273, %689
  %694 = trunc i32 %693 to i8
  %695 = add nuw nsw i64 %688, %540
  %696 = getelementptr inbounds [32 x i8], ptr %4, i64 0, i64 %695
  store i8 %694, ptr %696, align 1, !tbaa !16
  %697 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %2, i64 0, i32 3, i64 %688
  store i8 %690, ptr %697, align 1, !tbaa !16
  %698 = trunc i64 %695 to i8
  %699 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %2, i64 0, i32 3, i64 %692
  store i8 %698, ptr %699, align 1, !tbaa !16
  %700 = add nuw nsw i64 %676, 2
  %701 = icmp eq i64 %700, %543
  br i1 %701, label %702, label %675, !llvm.loop !429

702:                                              ; preds = %671, %675, %651, %598
  %703 = icmp eq i8 %272, 4
  br i1 %703, label %878, label %879

704:                                              ; preds = %532
  %705 = or i32 %344, %343
  %706 = and i32 %340, %705
  %707 = icmp eq i32 %706, %340
  br i1 %707, label %708, label %932

708:                                              ; preds = %704
  %709 = icmp ult i8 %272, 2
  br i1 %709, label %879, label %710

710:                                              ; preds = %708
  %711 = zext i32 %273 to i64
  %712 = zext i8 %272 to i64
  %713 = tail call i32 @llvm.umax.i32(i32 %273, i32 1)
  %714 = zext i32 %713 to i64
  %715 = icmp ult i32 %713, 8
  br i1 %715, label %827, label %716

716:                                              ; preds = %710
  %717 = add i64 %5, %712
  %718 = add i64 %5, %711
  %719 = sub i64 %717, %718
  %720 = icmp ult i64 %719, 16
  %721 = icmp ult i32 %271, 32
  %722 = or i1 %720, %721
  br i1 %722, label %827, label %723

723:                                              ; preds = %716
  %724 = icmp ult i32 %713, 16
  br i1 %724, label %777, label %725

725:                                              ; preds = %723
  %726 = and i64 %714, 112
  %727 = insertelement <16 x i32> poison, i32 %273, i64 0
  %728 = shufflevector <16 x i32> %727, <16 x i32> poison, <16 x i32> zeroinitializer
  %729 = insertelement <8 x i64> poison, i64 %712, i64 0
  %730 = shufflevector <8 x i64> %729, <8 x i64> poison, <8 x i32> zeroinitializer
  %731 = insertelement <4 x i64> poison, i64 %712, i64 0
  %732 = shufflevector <4 x i64> %731, <4 x i64> poison, <4 x i32> zeroinitializer
  br label %733

733:                                              ; preds = %733, %725
  %734 = phi i64 [ 0, %725 ], [ %768, %733 ]
  %735 = phi <16 x i32> [ <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>, %725 ], [ %769, %733 ]
  %736 = phi <16 x i8> [ <i8 0, i8 1, i8 2, i8 3, i8 4, i8 5, i8 6, i8 7, i8 8, i8 9, i8 10, i8 11, i8 12, i8 13, i8 14, i8 15>, %725 ], [ %770, %733 ]
  %737 = or i64 %734, 1
  %738 = or i64 %734, 2
  %739 = or i64 %734, 3
  %740 = insertelement <8 x i64> poison, i64 %734, i64 0
  %741 = shufflevector <8 x i64> %740, <8 x i64> poison, <8 x i32> zeroinitializer
  %742 = or <8 x i64> %741, <i64 4, i64 5, i64 6, i64 7, i64 8, i64 9, i64 10, i64 11>
  %743 = insertelement <4 x i64> poison, i64 %734, i64 0
  %744 = shufflevector <4 x i64> %743, <4 x i64> poison, <4 x i32> zeroinitializer
  %745 = or <4 x i64> %744, <i64 12, i64 13, i64 14, i64 15>
  %746 = add nuw nsw i64 %734, %711
  %747 = add nuw nsw <16 x i32> %728, %735
  %748 = getelementptr inbounds [32 x i8], ptr %4, i64 0, i64 %746
  store <16 x i8> %736, ptr %748, align 1, !tbaa !16
  %749 = trunc <16 x i32> %747 to <16 x i8>
  %750 = add nuw nsw i64 %734, %712
  %751 = add nuw nsw i64 %737, %712
  %752 = add nuw nsw i64 %738, %712
  %753 = add nuw nsw i64 %739, %712
  %754 = add nuw nsw <8 x i64> %742, %730
  %755 = add nuw nsw <4 x i64> %745, %732
  %756 = insertelement <16 x i64> poison, i64 %750, i64 0
  %757 = insertelement <16 x i64> %756, i64 %751, i64 1
  %758 = insertelement <16 x i64> %757, i64 %752, i64 2
  %759 = insertelement <16 x i64> %758, i64 %753, i64 3
  %760 = shufflevector <8 x i64> %754, <8 x i64> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %761 = shufflevector <16 x i64> %759, <16 x i64> %760, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 poison, i32 poison, i32 poison, i32 poison>
  %762 = shufflevector <4 x i64> %755, <4 x i64> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %763 = shufflevector <16 x i64> %761, <16 x i64> %762, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 16, i32 17, i32 18, i32 19>
  %764 = getelementptr inbounds [32 x i8], ptr %4, i64 0, i64 %750
  store <16 x i8> %749, ptr %764, align 1, !tbaa !16
  %765 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %2, i64 0, i32 3, i64 %734
  store <16 x i8> %749, ptr %765, align 8, !tbaa !16
  %766 = trunc <16 x i64> %763 to <16 x i8>
  %767 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %2, i64 0, i32 3, i64 %746
  store <16 x i8> %766, ptr %767, align 1, !tbaa !16
  %768 = add nuw i64 %734, 16
  %769 = add <16 x i32> %735, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %770 = add <16 x i8> %736, <i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16>
  %771 = icmp eq i64 %768, %726
  br i1 %771, label %772, label %733, !llvm.loop !430

772:                                              ; preds = %733
  %773 = icmp eq i64 %726, %714
  br i1 %773, label %876, label %774

774:                                              ; preds = %772
  %775 = and i64 %714, 8
  %776 = icmp eq i64 %775, 0
  br i1 %776, label %827, label %777

777:                                              ; preds = %723, %774
  %778 = phi i64 [ %726, %774 ], [ 0, %723 ]
  %779 = and i64 %714, 120
  %780 = trunc i64 %778 to i32
  %781 = insertelement <8 x i32> poison, i32 %780, i64 0
  %782 = shufflevector <8 x i32> %781, <8 x i32> poison, <8 x i32> zeroinitializer
  %783 = or <8 x i32> %782, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %784 = trunc i64 %778 to i8
  %785 = insertelement <8 x i8> poison, i8 %784, i64 0
  %786 = shufflevector <8 x i8> %785, <8 x i8> poison, <8 x i32> zeroinitializer
  %787 = or <8 x i8> %786, <i8 0, i8 1, i8 2, i8 3, i8 4, i8 5, i8 6, i8 7>
  %788 = insertelement <8 x i32> poison, i32 %273, i64 0
  %789 = shufflevector <8 x i32> %788, <8 x i32> poison, <8 x i32> zeroinitializer
  %790 = insertelement <4 x i64> poison, i64 %712, i64 0
  %791 = shufflevector <4 x i64> %790, <4 x i64> poison, <4 x i32> zeroinitializer
  br label %792

792:                                              ; preds = %792, %777
  %793 = phi i64 [ %778, %777 ], [ %821, %792 ]
  %794 = phi <8 x i32> [ %783, %777 ], [ %822, %792 ]
  %795 = phi <8 x i8> [ %787, %777 ], [ %823, %792 ]
  %796 = or i64 %793, 1
  %797 = or i64 %793, 2
  %798 = or i64 %793, 3
  %799 = insertelement <4 x i64> poison, i64 %793, i64 0
  %800 = shufflevector <4 x i64> %799, <4 x i64> poison, <4 x i32> zeroinitializer
  %801 = or <4 x i64> %800, <i64 4, i64 5, i64 6, i64 7>
  %802 = add nuw nsw i64 %793, %711
  %803 = add nuw nsw <8 x i32> %789, %794
  %804 = getelementptr inbounds [32 x i8], ptr %4, i64 0, i64 %802
  store <8 x i8> %795, ptr %804, align 1, !tbaa !16
  %805 = trunc <8 x i32> %803 to <8 x i8>
  %806 = add nuw nsw i64 %793, %712
  %807 = add nuw nsw i64 %796, %712
  %808 = add nuw nsw i64 %797, %712
  %809 = add nuw nsw i64 %798, %712
  %810 = add nuw nsw <4 x i64> %801, %791
  %811 = insertelement <8 x i64> poison, i64 %806, i64 0
  %812 = insertelement <8 x i64> %811, i64 %807, i64 1
  %813 = insertelement <8 x i64> %812, i64 %808, i64 2
  %814 = insertelement <8 x i64> %813, i64 %809, i64 3
  %815 = shufflevector <4 x i64> %810, <4 x i64> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>
  %816 = shufflevector <8 x i64> %814, <8 x i64> %815, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %817 = getelementptr inbounds [32 x i8], ptr %4, i64 0, i64 %806
  store <8 x i8> %805, ptr %817, align 1, !tbaa !16
  %818 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %2, i64 0, i32 3, i64 %793
  store <8 x i8> %805, ptr %818, align 8, !tbaa !16
  %819 = trunc <8 x i64> %816 to <8 x i8>
  %820 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %2, i64 0, i32 3, i64 %802
  store <8 x i8> %819, ptr %820, align 1, !tbaa !16
  %821 = add nuw i64 %793, 8
  %822 = add <8 x i32> %794, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %823 = add <8 x i8> %795, <i8 8, i8 8, i8 8, i8 8, i8 8, i8 8, i8 8, i8 8>
  %824 = icmp eq i64 %821, %779
  br i1 %824, label %825, label %792, !llvm.loop !431

825:                                              ; preds = %792
  %826 = icmp eq i64 %779, %714
  br i1 %826, label %876, label %827

827:                                              ; preds = %716, %710, %774, %825
  %828 = phi i64 [ 0, %710 ], [ 0, %716 ], [ %726, %774 ], [ %779, %825 ]
  %829 = xor i64 %828, -1
  %830 = and i64 %714, 1
  %831 = icmp eq i64 %830, 0
  br i1 %831, label %845, label %832

832:                                              ; preds = %827
  %833 = trunc i64 %828 to i32
  %834 = trunc i64 %828 to i8
  %835 = add nuw nsw i64 %828, %711
  %836 = add nuw nsw i32 %273, %833
  %837 = getelementptr inbounds [32 x i8], ptr %4, i64 0, i64 %835
  store i8 %834, ptr %837, align 1, !tbaa !16
  %838 = trunc i32 %836 to i8
  %839 = add nuw nsw i64 %828, %712
  %840 = getelementptr inbounds [32 x i8], ptr %4, i64 0, i64 %839
  store i8 %838, ptr %840, align 1, !tbaa !16
  %841 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %2, i64 0, i32 3, i64 %828
  store i8 %838, ptr %841, align 8, !tbaa !16
  %842 = trunc i64 %839 to i8
  %843 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %2, i64 0, i32 3, i64 %835
  store i8 %842, ptr %843, align 1, !tbaa !16
  %844 = or i64 %828, 1
  br label %845

845:                                              ; preds = %832, %827
  %846 = phi i64 [ %828, %827 ], [ %844, %832 ]
  %847 = sub nsw i64 0, %714
  %848 = icmp eq i64 %829, %847
  br i1 %848, label %876, label %849

849:                                              ; preds = %845, %849
  %850 = phi i64 [ %874, %849 ], [ %846, %845 ]
  %851 = trunc i64 %850 to i32
  %852 = trunc i64 %850 to i8
  %853 = add nuw nsw i64 %850, %711
  %854 = add nuw nsw i32 %273, %851
  %855 = getelementptr inbounds [32 x i8], ptr %4, i64 0, i64 %853
  store i8 %852, ptr %855, align 1, !tbaa !16
  %856 = trunc i32 %854 to i8
  %857 = add nuw nsw i64 %850, %712
  %858 = getelementptr inbounds [32 x i8], ptr %4, i64 0, i64 %857
  store i8 %856, ptr %858, align 1, !tbaa !16
  %859 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %2, i64 0, i32 3, i64 %850
  store i8 %856, ptr %859, align 1, !tbaa !16
  %860 = trunc i64 %857 to i8
  %861 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %2, i64 0, i32 3, i64 %853
  store i8 %860, ptr %861, align 1, !tbaa !16
  %862 = add nuw nsw i64 %850, 1
  %863 = trunc i64 %862 to i32
  %864 = trunc i64 %862 to i8
  %865 = add nuw nsw i64 %862, %711
  %866 = add nuw nsw i32 %273, %863
  %867 = getelementptr inbounds [32 x i8], ptr %4, i64 0, i64 %865
  store i8 %864, ptr %867, align 1, !tbaa !16
  %868 = trunc i32 %866 to i8
  %869 = add nuw nsw i64 %862, %712
  %870 = getelementptr inbounds [32 x i8], ptr %4, i64 0, i64 %869
  store i8 %868, ptr %870, align 1, !tbaa !16
  %871 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %2, i64 0, i32 3, i64 %862
  store i8 %868, ptr %871, align 1, !tbaa !16
  %872 = trunc i64 %869 to i8
  %873 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %2, i64 0, i32 3, i64 %865
  store i8 %872, ptr %873, align 1, !tbaa !16
  %874 = add nuw nsw i64 %850, 2
  %875 = icmp eq i64 %874, %714
  br i1 %875, label %876, label %849, !llvm.loop !432

876:                                              ; preds = %845, %849, %825, %772
  %877 = icmp eq i8 %272, 4
  br i1 %877, label %878, label %879

878:                                              ; preds = %876, %702
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(48) %3, ptr noundef nonnull align 8 dereferenceable(48) %0, i64 48, i1 false), !tbaa.struct !412
  br label %887

879:                                              ; preds = %876, %708, %702, %536
  %880 = phi i8 [ 0, %536 ], [ 0, %702 ], [ 1, %708 ], [ 1, %876 ]
  %881 = phi i8 [ 3, %536 ], [ 3, %702 ], [ 2, %708 ], [ 2, %876 ]
  %882 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %2, i64 0, i32 4
  store i32 66, ptr %882, align 8, !tbaa !293
  %883 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %2, i64 0, i32 5
  store i8 2, ptr %883, align 4, !tbaa !294
  %884 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %2, i64 0, i32 3
  store i8 %880, ptr %884, align 8, !tbaa !16
  %885 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %2, i64 0, i32 3, i64 1
  store i8 %881, ptr %885, align 1, !tbaa !16
  br label %886

886:                                              ; preds = %513, %416, %509, %412, %879, %435, %349
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(48) %3, ptr noundef nonnull align 8 dereferenceable(48) %0, i64 48, i1 false), !tbaa.struct !412
  br i1 %286, label %902, label %887

887:                                              ; preds = %886, %878
  %888 = zext i8 %272 to i64
  br label %889

889:                                              ; preds = %898, %887
  %890 = phi i64 [ 0, %887 ], [ %900, %898 ]
  %891 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %0, i64 0, i32 3, i64 %890
  %892 = load i8, ptr %891, align 1, !tbaa !16
  %893 = zext i8 %892 to i64
  %894 = getelementptr inbounds [32 x i8], ptr %4, i64 0, i64 %893
  %895 = load i8, ptr %894, align 1, !tbaa !16
  %896 = icmp ult i8 %895, %272
  br i1 %896, label %898, label %897

897:                                              ; preds = %889
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 29639, ptr noundef nonnull @.str.131) #30
  br label %898

898:                                              ; preds = %897, %889
  %899 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %3, i64 0, i32 3, i64 %890
  store i8 %895, ptr %899, align 1, !tbaa !16
  %900 = add nuw nsw i64 %890, 1
  %901 = icmp eq i64 %900, %888
  br i1 %901, label %902, label %889, !llvm.loop !433

902:                                              ; preds = %898, %886
  %903 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %3, i64 0, i32 4
  %904 = load i32, ptr %903, align 8, !tbaa !293
  %905 = tail call ptr @gen_reg_rtx(i32 noundef %904) #30
  %906 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %3, i64 0, i32 1
  store ptr %905, ptr %906, align 8, !tbaa !296
  %907 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %3, i64 0, i32 2
  store ptr %905, ptr %907, align 8, !tbaa !295
  store ptr %905, ptr %2, align 8, !tbaa !291
  tail call void @start_sequence() #30
  %908 = call fastcc zeroext i8 @expand_vec_perm_1(ptr noundef nonnull %3), !range !66
  %909 = tail call ptr @get_insns() #30
  tail call void @end_sequence() #30
  %910 = icmp eq i8 %908, 0
  br i1 %910, label %932, label %911

911:                                              ; preds = %902
  %912 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %2, i64 0, i32 4
  %913 = load i32, ptr %912, align 8, !tbaa !293
  %914 = icmp eq i32 %913, %904
  br i1 %914, label %926, label %915

915:                                              ; preds = %911
  %916 = load ptr, ptr @rtl_hooks, align 8, !tbaa !187
  %917 = tail call ptr %916(i32 noundef %913, ptr noundef %905) #30
  store ptr %917, ptr %2, align 8, !tbaa !291
  %918 = load ptr, ptr @rtl_hooks, align 8, !tbaa !187
  %919 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %2, i64 0, i32 1
  %920 = load ptr, ptr %919, align 8, !tbaa !296
  %921 = tail call ptr %918(i32 noundef %913, ptr noundef %920) #30
  store ptr %921, ptr %919, align 8, !tbaa !296
  %922 = load ptr, ptr @rtl_hooks, align 8, !tbaa !187
  %923 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %2, i64 0, i32 2
  %924 = load ptr, ptr %923, align 8, !tbaa !295
  %925 = tail call ptr %922(i32 noundef %913, ptr noundef %924) #30
  store ptr %925, ptr %923, align 8, !tbaa !295
  br label %926

926:                                              ; preds = %915, %911
  %927 = call fastcc zeroext i8 @expand_vec_perm_1(ptr noundef nonnull %2), !range !66
  %928 = icmp eq i8 %927, 0
  br i1 %928, label %929, label %930

929:                                              ; preds = %926
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 29664, ptr noundef nonnull @.str.131) #30
  br label %930

930:                                              ; preds = %926, %929
  %931 = tail call ptr @emit_insn(ptr noundef %909) #30
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %4) #30
  call void @llvm.lifetime.end.p0(i64 48, ptr nonnull %3) #30
  call void @llvm.lifetime.end.p0(i64 48, ptr nonnull %2) #30
  br label %940

932:                                              ; preds = %270, %279, %704, %902
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %4) #30
  call void @llvm.lifetime.end.p0(i64 48, ptr nonnull %3) #30
  call void @llvm.lifetime.end.p0(i64 48, ptr nonnull %2) #30
  %933 = tail call fastcc zeroext i8 @expand_vec_perm_broadcast(ptr noundef nonnull %0), !range !66
  %934 = icmp eq i8 %933, 0
  br i1 %934, label %935, label %940

935:                                              ; preds = %932
  %936 = tail call fastcc zeroext i8 @expand_vec_perm_pshufb2(ptr noundef nonnull %0), !range !66
  %937 = icmp eq i8 %936, 0
  br i1 %937, label %938, label %940

938:                                              ; preds = %935
  %939 = tail call fastcc zeroext i8 @expand_vec_perm_even_odd(ptr noundef nonnull %0), !range !66
  br label %940

940:                                              ; preds = %930, %264, %261, %154, %68, %938, %935, %932, %1
  %941 = phi i8 [ 1, %1 ], [ 1, %68 ], [ 1, %930 ], [ 1, %932 ], [ 1, %935 ], [ %939, %938 ], [ 1, %154 ], [ 1, %261 ], [ 1, %264 ]
  ret i8 %941
}

declare i32 @host_integerp(ptr noundef, i32 noundef) local_unnamed_addr #3

declare i64 @tree_low_cst(ptr noundef, i32 noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc zeroext i8 @expand_vec_perm_broadcast(ptr nocapture noundef readonly %0) unnamed_addr #9 {
  %2 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %0, i64 0, i32 5
  %3 = load i8, ptr %2, align 4, !tbaa !294
  %4 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %0, i64 0, i32 1
  %5 = load ptr, ptr %4, align 8, !tbaa !296
  %6 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %0, i64 0, i32 2
  %7 = load ptr, ptr %6, align 8, !tbaa !295
  %8 = icmp eq ptr %5, %7
  br i1 %8, label %9, label %25

9:                                                ; preds = %1
  %10 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %0, i64 0, i32 3
  %11 = load i8, ptr %10, align 8, !tbaa !16
  %12 = icmp ugt i8 %3, 1
  br i1 %12, label %13, label %23

13:                                               ; preds = %9
  %14 = zext i8 %3 to i64
  br label %18

15:                                               ; preds = %18
  %16 = add nuw nsw i64 %19, 1
  %17 = icmp eq i64 %16, %14
  br i1 %17, label %23, label %18, !llvm.loop !434

18:                                               ; preds = %13, %15
  %19 = phi i64 [ 1, %13 ], [ %16, %15 ]
  %20 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %0, i64 0, i32 3, i64 %19
  %21 = load i8, ptr %20, align 1, !tbaa !16
  %22 = icmp eq i8 %21, %11
  br i1 %22, label %15, label %25

23:                                               ; preds = %15, %9
  %24 = tail call fastcc zeroext i8 @expand_vec_perm_broadcast_1(ptr noundef nonnull %0), !range !66
  br label %25

25:                                               ; preds = %18, %1, %23
  %26 = phi i8 [ %24, %23 ], [ 0, %1 ], [ 0, %18 ]
  ret i8 %26
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc zeroext i8 @expand_vec_perm_even_odd(ptr nocapture noundef %0) unnamed_addr #9 {
  %2 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %0, i64 0, i32 5
  %3 = load i8, ptr %2, align 4, !tbaa !294
  %4 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %0, i64 0, i32 3
  %5 = load i8, ptr %4, align 8, !tbaa !16
  %6 = zext i8 %5 to i32
  %7 = icmp ugt i8 %5, 1
  br i1 %7, label %26, label %8

8:                                                ; preds = %1
  %9 = icmp ugt i8 %3, 1
  br i1 %9, label %10, label %24

10:                                               ; preds = %8
  %11 = zext i8 %5 to i64
  %12 = zext i8 %3 to i64
  br label %16

13:                                               ; preds = %16
  %14 = add nuw nsw i64 %17, 1
  %15 = icmp eq i64 %14, %12
  br i1 %15, label %24, label %16, !llvm.loop !435

16:                                               ; preds = %10, %13
  %17 = phi i64 [ 1, %10 ], [ %14, %13 ]
  %18 = getelementptr inbounds %struct.expand_vec_perm_d, ptr %0, i64 0, i32 3, i64 %17
  %19 = load i8, ptr %18, align 1, !tbaa !16
  %20 = shl nuw nsw i64 %17, 1
  %21 = add nuw nsw i64 %20, %11
  %22 = zext i8 %19 to i64
  %23 = icmp eq i64 %21, %22
  br i1 %23, label %13, label %26

24:                                               ; preds = %13, %8
  %25 = tail call fastcc zeroext i8 @expand_vec_perm_even_odd_1(ptr noundef nonnull %0, i32 noundef %6), !range !66
  br label %26

26:                                               ; preds = %16, %1, %24
  %27 = phi i8 [ %25, %24 ], [ 0, %1 ], [ 0, %16 ]
  ret i8 %27
}

declare ptr @gen_ssse3_palignrti(ptr noundef, ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define internal noalias ptr @ix86_handle_cconv_attribute(ptr nocapture noundef readonly %0, ptr noundef %1, ptr nocapture noundef readonly %2, i32 %3, ptr nocapture noundef writeonly %4) #9 {
  %6 = load ptr, ptr %0, align 8, !tbaa !5
  %7 = load i64, ptr %6, align 8
  %8 = trunc i64 %7 to i16
  switch i16 %8, label %9 [
    i16 20, label %11
    i16 21, label %11
    i16 31, label %11
    i16 35, label %11
  ]

9:                                                ; preds = %5
  %10 = tail call zeroext i8 (i32, ptr, ...) @warning(i32 noundef 45, ptr noundef nonnull @.str.460, ptr noundef %1) #30
  store i8 1, ptr %4, align 1, !tbaa !16
  br label %92

11:                                               ; preds = %5, %5, %5, %5
  %12 = tail call i32 @is_attribute_p(ptr noundef nonnull @.str.324, ptr noundef %1) #30
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %34, label %14

14:                                               ; preds = %11
  %15 = load ptr, ptr %0, align 8, !tbaa !5
  %16 = getelementptr inbounds %struct.tree_type, ptr %15, i64 0, i32 4
  %17 = load ptr, ptr %16, align 8, !tbaa !16
  %18 = tail call ptr @lookup_attribute(ptr noundef nonnull @.str.128, ptr noundef %17) #30
  %19 = icmp eq ptr %18, null
  br i1 %19, label %21, label %20

20:                                               ; preds = %14
  tail call void (ptr, ...) @error(ptr noundef nonnull @.str.461) #30
  br label %21

21:                                               ; preds = %20, %14
  %22 = getelementptr inbounds %struct.tree_list, ptr %2, i64 0, i32 2
  %23 = load ptr, ptr %22, align 8, !tbaa !16
  %24 = load i64, ptr %23, align 8
  %25 = and i64 %24, 65535
  %26 = icmp eq i64 %25, 23
  br i1 %26, label %29, label %27

27:                                               ; preds = %21
  %28 = tail call zeroext i8 (i32, ptr, ...) @warning(i32 noundef 45, ptr noundef nonnull @.str.462, ptr noundef %1) #30
  store i8 1, ptr %4, align 1, !tbaa !16
  br label %92

29:                                               ; preds = %21
  %30 = tail call i32 @compare_tree_int(ptr noundef nonnull %23, i64 noundef 3) #30
  %31 = icmp sgt i32 %30, 0
  br i1 %31, label %32, label %92

32:                                               ; preds = %29
  %33 = tail call zeroext i8 (i32, ptr, ...) @warning(i32 noundef 45, ptr noundef nonnull @.str.463, ptr noundef %1, i32 noundef 3) #30
  store i8 1, ptr %4, align 1, !tbaa !16
  br label %92

34:                                               ; preds = %11
  %35 = tail call i32 @is_attribute_p(ptr noundef nonnull @.str.128, ptr noundef %1) #30
  %36 = icmp eq i32 %35, 0
  br i1 %36, label %58, label %37

37:                                               ; preds = %34
  %38 = load ptr, ptr %0, align 8, !tbaa !5
  %39 = getelementptr inbounds %struct.tree_type, ptr %38, i64 0, i32 4
  %40 = load ptr, ptr %39, align 8, !tbaa !16
  %41 = tail call ptr @lookup_attribute(ptr noundef nonnull @.str.126, ptr noundef %40) #30
  %42 = icmp eq ptr %41, null
  br i1 %42, label %44, label %43

43:                                               ; preds = %37
  tail call void (ptr, ...) @error(ptr noundef nonnull @.str.464) #30
  br label %44

44:                                               ; preds = %43, %37
  %45 = load ptr, ptr %0, align 8, !tbaa !5
  %46 = getelementptr inbounds %struct.tree_type, ptr %45, i64 0, i32 4
  %47 = load ptr, ptr %46, align 8, !tbaa !16
  %48 = tail call ptr @lookup_attribute(ptr noundef nonnull @.str.127, ptr noundef %47) #30
  %49 = icmp eq ptr %48, null
  br i1 %49, label %51, label %50

50:                                               ; preds = %44
  tail call void (ptr, ...) @error(ptr noundef nonnull @.str.465) #30
  br label %51

51:                                               ; preds = %50, %44
  %52 = load ptr, ptr %0, align 8, !tbaa !5
  %53 = getelementptr inbounds %struct.tree_type, ptr %52, i64 0, i32 4
  %54 = load ptr, ptr %53, align 8, !tbaa !16
  %55 = tail call ptr @lookup_attribute(ptr noundef nonnull @.str.324, ptr noundef %54) #30
  %56 = icmp eq ptr %55, null
  br i1 %56, label %92, label %57

57:                                               ; preds = %51
  tail call void (ptr, ...) @error(ptr noundef nonnull @.str.461) #30
  br label %92

58:                                               ; preds = %34
  %59 = tail call i32 @is_attribute_p(ptr noundef nonnull @.str.127, ptr noundef %1) #30
  %60 = icmp eq i32 %59, 0
  br i1 %60, label %75, label %61

61:                                               ; preds = %58
  %62 = load ptr, ptr %0, align 8, !tbaa !5
  %63 = getelementptr inbounds %struct.tree_type, ptr %62, i64 0, i32 4
  %64 = load ptr, ptr %63, align 8, !tbaa !16
  %65 = tail call ptr @lookup_attribute(ptr noundef nonnull @.str.126, ptr noundef %64) #30
  %66 = icmp eq ptr %65, null
  br i1 %66, label %68, label %67

67:                                               ; preds = %61
  tail call void (ptr, ...) @error(ptr noundef nonnull @.str.466) #30
  br label %68

68:                                               ; preds = %67, %61
  %69 = load ptr, ptr %0, align 8, !tbaa !5
  %70 = getelementptr inbounds %struct.tree_type, ptr %69, i64 0, i32 4
  %71 = load ptr, ptr %70, align 8, !tbaa !16
  %72 = tail call ptr @lookup_attribute(ptr noundef nonnull @.str.128, ptr noundef %71) #30
  %73 = icmp eq ptr %72, null
  br i1 %73, label %92, label %74

74:                                               ; preds = %68
  tail call void (ptr, ...) @error(ptr noundef nonnull @.str.467) #30
  br label %92

75:                                               ; preds = %58
  %76 = tail call i32 @is_attribute_p(ptr noundef nonnull @.str.126, ptr noundef %1) #30
  %77 = icmp eq i32 %76, 0
  br i1 %77, label %92, label %78

78:                                               ; preds = %75
  %79 = load ptr, ptr %0, align 8, !tbaa !5
  %80 = getelementptr inbounds %struct.tree_type, ptr %79, i64 0, i32 4
  %81 = load ptr, ptr %80, align 8, !tbaa !16
  %82 = tail call ptr @lookup_attribute(ptr noundef nonnull @.str.127, ptr noundef %81) #30
  %83 = icmp eq ptr %82, null
  br i1 %83, label %85, label %84

84:                                               ; preds = %78
  tail call void (ptr, ...) @error(ptr noundef nonnull @.str.466) #30
  br label %85

85:                                               ; preds = %84, %78
  %86 = load ptr, ptr %0, align 8, !tbaa !5
  %87 = getelementptr inbounds %struct.tree_type, ptr %86, i64 0, i32 4
  %88 = load ptr, ptr %87, align 8, !tbaa !16
  %89 = tail call ptr @lookup_attribute(ptr noundef nonnull @.str.128, ptr noundef %88) #30
  %90 = icmp eq ptr %89, null
  br i1 %90, label %92, label %91

91:                                               ; preds = %85
  tail call void (ptr, ...) @error(ptr noundef nonnull @.str.464) #30
  br label %92

92:                                               ; preds = %57, %51, %75, %91, %85, %68, %74, %27, %32, %29, %9
  ret ptr null
}

; Function Attrs: nounwind sspstrong uwtable
define internal noalias ptr @ix86_handle_struct_attribute(ptr noundef readonly %0, ptr noundef %1, ptr nocapture readnone %2, i32 %3, ptr nocapture noundef writeonly %4) #9 {
  %6 = load ptr, ptr %0, align 8, !tbaa !5
  %7 = load i64, ptr %6, align 8
  %8 = and i64 %7, 65535
  %9 = getelementptr inbounds [0 x i32], ptr @tree_code_type, i64 0, i64 %8
  %10 = load i32, ptr %9, align 4, !tbaa !16
  %11 = icmp eq i32 %10, 3
  %12 = icmp eq i64 %8, 35
  %13 = getelementptr inbounds %struct.tree_common, ptr %6, i64 0, i32 2
  %14 = select i1 %12, ptr %13, ptr null
  %15 = select i1 %11, ptr %14, ptr %0
  %16 = icmp eq ptr %15, null
  br i1 %16, label %40, label %17

17:                                               ; preds = %5
  %18 = load ptr, ptr %15, align 8, !tbaa !5
  %19 = load i64, ptr %18, align 8
  %20 = and i64 %19, 65534
  %21 = icmp eq i64 %20, 16
  br i1 %21, label %22, label %40

22:                                               ; preds = %17
  %23 = tail call i32 @is_attribute_p(ptr noundef nonnull @.str.456, ptr noundef %1) #30
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %31, label %25

25:                                               ; preds = %22
  %26 = load ptr, ptr %15, align 8, !tbaa !5
  %27 = getelementptr inbounds %struct.tree_type, ptr %26, i64 0, i32 4
  %28 = load ptr, ptr %27, align 8, !tbaa !16
  %29 = tail call ptr @lookup_attribute(ptr noundef nonnull @.str.457, ptr noundef %28) #30
  %30 = icmp eq ptr %29, null
  br i1 %30, label %31, label %40

31:                                               ; preds = %25, %22
  %32 = tail call i32 @is_attribute_p(ptr noundef nonnull @.str.457, ptr noundef %1) #30
  %33 = icmp eq i32 %32, 0
  br i1 %33, label %43, label %34

34:                                               ; preds = %31
  %35 = load ptr, ptr %15, align 8, !tbaa !5
  %36 = getelementptr inbounds %struct.tree_type, ptr %35, i64 0, i32 4
  %37 = load ptr, ptr %36, align 8, !tbaa !16
  %38 = tail call ptr @lookup_attribute(ptr noundef nonnull @.str.456, ptr noundef %37) #30
  %39 = icmp eq ptr %38, null
  br i1 %39, label %43, label %40

40:                                               ; preds = %25, %34, %5, %17
  %41 = phi ptr [ @.str.468, %17 ], [ @.str.468, %5 ], [ @.str.469, %34 ], [ @.str.469, %25 ]
  %42 = tail call zeroext i8 (i32, ptr, ...) @warning(i32 noundef 45, ptr noundef nonnull %41, ptr noundef %1) #30
  store i8 1, ptr %4, align 1, !tbaa !16
  br label %43

43:                                               ; preds = %40, %31, %34
  ret ptr null
}

; Function Attrs: nounwind sspstrong uwtable
define internal noalias ptr @ix86_handle_abi_attribute(ptr nocapture noundef readonly %0, ptr noundef %1, ptr nocapture readnone %2, i32 %3, ptr nocapture noundef writeonly %4) #9 {
  %6 = load ptr, ptr %0, align 8, !tbaa !5
  %7 = load i64, ptr %6, align 8
  %8 = trunc i64 %7 to i16
  switch i16 %8, label %10 [
    i16 20, label %9
    i16 21, label %9
    i16 31, label %9
    i16 35, label %9
  ]

9:                                                ; preds = %5, %5, %5, %5
  br label %10

10:                                               ; preds = %5, %9
  %11 = phi ptr [ @.str.470, %9 ], [ @.str.460, %5 ]
  %12 = tail call zeroext i8 (i32, ptr, ...) @warning(i32 noundef 45, ptr noundef nonnull %11, ptr noundef %1) #30
  store i8 1, ptr %4, align 1, !tbaa !16
  ret ptr null
}

; Function Attrs: nounwind sspstrong uwtable
define internal noalias ptr @ix86_handle_fndecl_attribute(ptr nocapture noundef readonly %0, ptr noundef %1, ptr nocapture readnone %2, i32 %3, ptr nocapture noundef writeonly %4) #9 {
  %6 = load ptr, ptr %0, align 8, !tbaa !5
  %7 = load i64, ptr %6, align 8
  %8 = and i64 %7, 65535
  %9 = icmp eq i64 %8, 29
  br i1 %9, label %12, label %10

10:                                               ; preds = %5
  %11 = tail call zeroext i8 (i32, ptr, ...) @warning(i32 noundef 45, ptr noundef nonnull @.str.460, ptr noundef %1) #30
  store i8 1, ptr %4, align 1, !tbaa !16
  br label %13

12:                                               ; preds = %5
  tail call void (ptr, ...) @sorry(ptr noundef nonnull @.str.471) #30
  br label %13

13:                                               ; preds = %12, %10
  ret ptr null
}

declare i32 @is_attribute_p(ptr noundef, ptr noundef) local_unnamed_addr #3

declare i32 @compare_tree_int(ptr noundef, i64 noundef) local_unnamed_addr #3

declare ptr @add_builtin_function(ptr noundef, ptr noundef, i32 noundef, i32 noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc void @ix86_init_mmx_sse_builtins() unnamed_addr #9 {
  br label %1

1:                                                ; preds = %0, %39
  %2 = phi i64 [ 0, %0 ], [ %40, %39 ]
  %3 = phi ptr [ @bdesc_special_args, %0 ], [ %41, %39 ]
  %4 = getelementptr inbounds %struct.builtin_description, ptr %3, i64 0, i32 2
  %5 = load ptr, ptr %4, align 8, !tbaa !436
  %6 = icmp eq ptr %5, null
  br i1 %6, label %39, label %7

7:                                                ; preds = %1
  %8 = getelementptr inbounds %struct.builtin_description, ptr %3, i64 0, i32 5
  %9 = load i32, ptr %8, align 8, !tbaa !355
  %10 = load i32, ptr %3, align 8, !tbaa !437
  %11 = getelementptr inbounds %struct.builtin_description, ptr %3, i64 0, i32 3
  %12 = load i32, ptr %11, align 8, !tbaa !356
  %13 = and i32 %10, 4
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %15, label %39

15:                                               ; preds = %7
  %16 = sext i32 %12 to i64
  %17 = getelementptr inbounds [801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 %16
  %18 = getelementptr inbounds [801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 %16, i32 2
  store i32 %10, ptr %18, align 4, !tbaa !70
  %19 = icmp eq i32 %10, 0
  br i1 %19, label %28, label %20

20:                                               ; preds = %15
  %21 = load i32, ptr @ix86_isa_flags, align 4, !tbaa !20
  %22 = and i32 %21, %10
  %23 = icmp eq i32 %22, 0
  br i1 %23, label %24, label %28

24:                                               ; preds = %20
  %25 = load ptr, ptr getelementptr inbounds (%struct.lang_hooks, ptr @lang_hooks, i64 0, i32 41), align 8, !tbaa !438
  %26 = load ptr, ptr getelementptr inbounds (%struct.lang_hooks, ptr @lang_hooks, i64 0, i32 42), align 8, !tbaa !439
  %27 = icmp eq ptr %25, %26
  br i1 %27, label %28, label %32

28:                                               ; preds = %24, %20, %15
  %29 = tail call fastcc ptr @ix86_get_builtin_func_type(i32 noundef %9)
  %30 = tail call ptr @add_builtin_function(ptr noundef nonnull %5, ptr noundef %29, i32 noundef %12, i32 noundef 2, ptr noundef null, ptr noundef null) #30
  %31 = getelementptr inbounds [801 x ptr], ptr @ix86_builtins, i64 0, i64 %16
  store ptr %30, ptr %31, align 8, !tbaa !5
  br label %36

32:                                               ; preds = %24
  %33 = getelementptr inbounds [801 x ptr], ptr @ix86_builtins, i64 0, i64 %16
  store ptr null, ptr %33, align 8, !tbaa !5
  %34 = getelementptr inbounds [801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 %16, i32 1
  store i32 %9, ptr %34, align 8, !tbaa !73
  store ptr %5, ptr %17, align 8, !tbaa !74
  %35 = getelementptr inbounds [801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 %16, i32 3
  store i8 0, ptr %35, align 8, !tbaa !75
  br label %36

36:                                               ; preds = %32, %28
  %37 = phi i8 [ 0, %28 ], [ 1, %32 ]
  %38 = getelementptr inbounds [801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 %16, i32 4
  store i8 %37, ptr %38, align 1, !tbaa !72
  br label %39

39:                                               ; preds = %36, %7, %1
  %40 = add nuw nsw i64 %2, 1
  %41 = getelementptr inbounds %struct.builtin_description, ptr %3, i64 1
  %42 = icmp eq i64 %40, 59
  br i1 %42, label %43, label %1, !llvm.loop !440

43:                                               ; preds = %39, %85
  %44 = phi i64 [ %86, %85 ], [ 0, %39 ]
  %45 = phi ptr [ %87, %85 ], [ @bdesc_args, %39 ]
  %46 = getelementptr inbounds %struct.builtin_description, ptr %45, i64 0, i32 2
  %47 = load ptr, ptr %46, align 8, !tbaa !436
  %48 = icmp eq ptr %47, null
  br i1 %48, label %85, label %49

49:                                               ; preds = %43
  %50 = getelementptr inbounds %struct.builtin_description, ptr %45, i64 0, i32 5
  %51 = load i32, ptr %50, align 8, !tbaa !355
  %52 = load i32, ptr %45, align 8, !tbaa !437
  %53 = getelementptr inbounds %struct.builtin_description, ptr %45, i64 0, i32 3
  %54 = load i32, ptr %53, align 8, !tbaa !356
  %55 = and i32 %52, 4
  %56 = icmp eq i32 %55, 0
  %57 = sext i32 %54 to i64
  br i1 %56, label %58, label %83

58:                                               ; preds = %49
  %59 = getelementptr inbounds [801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 %57
  %60 = getelementptr inbounds [801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 %57, i32 2
  store i32 %52, ptr %60, align 4, !tbaa !70
  %61 = icmp eq i32 %52, 0
  br i1 %61, label %74, label %62

62:                                               ; preds = %58
  %63 = load i32, ptr @ix86_isa_flags, align 4, !tbaa !20
  %64 = and i32 %63, %52
  %65 = icmp eq i32 %64, 0
  br i1 %65, label %66, label %74

66:                                               ; preds = %62
  %67 = load ptr, ptr getelementptr inbounds (%struct.lang_hooks, ptr @lang_hooks, i64 0, i32 41), align 8, !tbaa !438
  %68 = load ptr, ptr getelementptr inbounds (%struct.lang_hooks, ptr @lang_hooks, i64 0, i32 42), align 8, !tbaa !439
  %69 = icmp eq ptr %67, %68
  br i1 %69, label %74, label %70

70:                                               ; preds = %66
  %71 = getelementptr inbounds [801 x ptr], ptr @ix86_builtins, i64 0, i64 %57
  store ptr null, ptr %71, align 8, !tbaa !5
  %72 = getelementptr inbounds [801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 %57, i32 1
  store i32 %51, ptr %72, align 8, !tbaa !73
  store ptr %47, ptr %59, align 8, !tbaa !74
  %73 = getelementptr inbounds [801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 %57, i32 4
  store i8 1, ptr %73, align 1, !tbaa !72
  br label %83

74:                                               ; preds = %66, %62, %58
  %75 = tail call fastcc ptr @ix86_get_builtin_func_type(i32 noundef %51)
  %76 = tail call ptr @add_builtin_function(ptr noundef nonnull %47, ptr noundef %75, i32 noundef %54, i32 noundef 2, ptr noundef null, ptr noundef null) #30
  %77 = getelementptr inbounds [801 x ptr], ptr @ix86_builtins, i64 0, i64 %57
  store ptr %76, ptr %77, align 8, !tbaa !5
  %78 = getelementptr inbounds [801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 %57, i32 4
  store i8 0, ptr %78, align 1, !tbaa !72
  %79 = icmp eq ptr %76, null
  br i1 %79, label %83, label %80

80:                                               ; preds = %74
  %81 = load i64, ptr %76, align 8
  %82 = or i64 %81, 1048576
  store i64 %82, ptr %76, align 8
  br label %85

83:                                               ; preds = %74, %70, %49
  %84 = getelementptr inbounds [801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 %57, i32 3
  store i8 1, ptr %84, align 8, !tbaa !75
  br label %85

85:                                               ; preds = %83, %80, %43
  %86 = add nuw nsw i64 %44, 1
  %87 = getelementptr inbounds %struct.builtin_description, ptr %45, i64 1
  %88 = icmp eq i64 %86, 513
  br i1 %88, label %89, label %43, !llvm.loop !441

89:                                               ; preds = %85, %129
  %90 = phi i64 [ %130, %129 ], [ 0, %85 ]
  %91 = phi ptr [ %131, %129 ], [ @bdesc_pcmpestr, %85 ]
  %92 = getelementptr inbounds %struct.builtin_description, ptr %91, i64 0, i32 3
  %93 = load i32, ptr %92, align 8, !tbaa !356
  %94 = icmp eq i32 %93, 463
  %95 = select i1 %94, i32 234, i32 233
  %96 = load i32, ptr %91, align 8, !tbaa !437
  %97 = getelementptr inbounds %struct.builtin_description, ptr %91, i64 0, i32 2
  %98 = load ptr, ptr %97, align 8, !tbaa !436
  %99 = and i32 %96, 4
  %100 = icmp eq i32 %99, 0
  %101 = sext i32 %93 to i64
  br i1 %100, label %102, label %127

102:                                              ; preds = %89
  %103 = getelementptr inbounds [801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 %101
  %104 = getelementptr inbounds [801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 %101, i32 2
  store i32 %96, ptr %104, align 4, !tbaa !70
  %105 = icmp eq i32 %96, 0
  br i1 %105, label %118, label %106

106:                                              ; preds = %102
  %107 = load i32, ptr @ix86_isa_flags, align 4, !tbaa !20
  %108 = and i32 %107, %96
  %109 = icmp eq i32 %108, 0
  br i1 %109, label %110, label %118

110:                                              ; preds = %106
  %111 = load ptr, ptr getelementptr inbounds (%struct.lang_hooks, ptr @lang_hooks, i64 0, i32 41), align 8, !tbaa !438
  %112 = load ptr, ptr getelementptr inbounds (%struct.lang_hooks, ptr @lang_hooks, i64 0, i32 42), align 8, !tbaa !439
  %113 = icmp eq ptr %111, %112
  br i1 %113, label %118, label %114

114:                                              ; preds = %110
  %115 = getelementptr inbounds [801 x ptr], ptr @ix86_builtins, i64 0, i64 %101
  store ptr null, ptr %115, align 8, !tbaa !5
  %116 = getelementptr inbounds [801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 %101, i32 1
  store i32 %95, ptr %116, align 8, !tbaa !73
  store ptr %98, ptr %103, align 8, !tbaa !74
  %117 = getelementptr inbounds [801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 %101, i32 4
  store i8 1, ptr %117, align 1, !tbaa !72
  br label %127

118:                                              ; preds = %110, %106, %102
  %119 = tail call fastcc ptr @ix86_get_builtin_func_type(i32 noundef %95)
  %120 = tail call ptr @add_builtin_function(ptr noundef %98, ptr noundef %119, i32 noundef %93, i32 noundef 2, ptr noundef null, ptr noundef null) #30
  %121 = getelementptr inbounds [801 x ptr], ptr @ix86_builtins, i64 0, i64 %101
  store ptr %120, ptr %121, align 8, !tbaa !5
  %122 = getelementptr inbounds [801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 %101, i32 4
  store i8 0, ptr %122, align 1, !tbaa !72
  %123 = icmp eq ptr %120, null
  br i1 %123, label %127, label %124

124:                                              ; preds = %118
  %125 = load i64, ptr %120, align 8
  %126 = or i64 %125, 1048576
  store i64 %126, ptr %120, align 8
  br label %129

127:                                              ; preds = %118, %114, %89
  %128 = getelementptr inbounds [801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 %101, i32 3
  store i8 1, ptr %128, align 8, !tbaa !75
  br label %129

129:                                              ; preds = %124, %127
  %130 = add nuw nsw i64 %90, 1
  %131 = getelementptr inbounds %struct.builtin_description, ptr %91, i64 1
  %132 = icmp eq i64 %130, 7
  br i1 %132, label %133, label %89, !llvm.loop !442

133:                                              ; preds = %129, %173
  %134 = phi i64 [ %174, %173 ], [ 0, %129 ]
  %135 = phi ptr [ %175, %173 ], [ @bdesc_pcmpistr, %129 ]
  %136 = getelementptr inbounds %struct.builtin_description, ptr %135, i64 0, i32 3
  %137 = load i32, ptr %136, align 8, !tbaa !356
  %138 = icmp eq i32 %137, 470
  %139 = select i1 %138, i32 178, i32 173
  %140 = load i32, ptr %135, align 8, !tbaa !437
  %141 = getelementptr inbounds %struct.builtin_description, ptr %135, i64 0, i32 2
  %142 = load ptr, ptr %141, align 8, !tbaa !436
  %143 = and i32 %140, 4
  %144 = icmp eq i32 %143, 0
  %145 = sext i32 %137 to i64
  br i1 %144, label %146, label %171

146:                                              ; preds = %133
  %147 = getelementptr inbounds [801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 %145
  %148 = getelementptr inbounds [801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 %145, i32 2
  store i32 %140, ptr %148, align 4, !tbaa !70
  %149 = icmp eq i32 %140, 0
  br i1 %149, label %162, label %150

150:                                              ; preds = %146
  %151 = load i32, ptr @ix86_isa_flags, align 4, !tbaa !20
  %152 = and i32 %151, %140
  %153 = icmp eq i32 %152, 0
  br i1 %153, label %154, label %162

154:                                              ; preds = %150
  %155 = load ptr, ptr getelementptr inbounds (%struct.lang_hooks, ptr @lang_hooks, i64 0, i32 41), align 8, !tbaa !438
  %156 = load ptr, ptr getelementptr inbounds (%struct.lang_hooks, ptr @lang_hooks, i64 0, i32 42), align 8, !tbaa !439
  %157 = icmp eq ptr %155, %156
  br i1 %157, label %162, label %158

158:                                              ; preds = %154
  %159 = getelementptr inbounds [801 x ptr], ptr @ix86_builtins, i64 0, i64 %145
  store ptr null, ptr %159, align 8, !tbaa !5
  %160 = getelementptr inbounds [801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 %145, i32 1
  store i32 %139, ptr %160, align 8, !tbaa !73
  store ptr %142, ptr %147, align 8, !tbaa !74
  %161 = getelementptr inbounds [801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 %145, i32 4
  store i8 1, ptr %161, align 1, !tbaa !72
  br label %171

162:                                              ; preds = %154, %150, %146
  %163 = tail call fastcc ptr @ix86_get_builtin_func_type(i32 noundef %139)
  %164 = tail call ptr @add_builtin_function(ptr noundef %142, ptr noundef %163, i32 noundef %137, i32 noundef 2, ptr noundef null, ptr noundef null) #30
  %165 = getelementptr inbounds [801 x ptr], ptr @ix86_builtins, i64 0, i64 %145
  store ptr %164, ptr %165, align 8, !tbaa !5
  %166 = getelementptr inbounds [801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 %145, i32 4
  store i8 0, ptr %166, align 1, !tbaa !72
  %167 = icmp eq ptr %164, null
  br i1 %167, label %171, label %168

168:                                              ; preds = %162
  %169 = load i64, ptr %164, align 8
  %170 = or i64 %169, 1048576
  store i64 %170, ptr %164, align 8
  br label %173

171:                                              ; preds = %162, %158, %133
  %172 = getelementptr inbounds [801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 %145, i32 3
  store i8 1, ptr %172, align 8, !tbaa !75
  br label %173

173:                                              ; preds = %168, %171
  %174 = add nuw nsw i64 %134, 1
  %175 = getelementptr inbounds %struct.builtin_description, ptr %135, i64 1
  %176 = icmp eq i64 %174, 7
  br i1 %176, label %177, label %133, !llvm.loop !443

177:                                              ; preds = %173, %217
  %178 = phi i64 [ %218, %217 ], [ 0, %173 ]
  %179 = phi ptr [ %219, %217 ], [ @bdesc_comi, %173 ]
  %180 = load i32, ptr %179, align 8, !tbaa !437
  %181 = icmp eq i32 %180, 131072
  %182 = select i1 %181, i32 79, i32 83
  %183 = getelementptr inbounds %struct.builtin_description, ptr %179, i64 0, i32 2
  %184 = load ptr, ptr %183, align 8, !tbaa !436
  %185 = getelementptr inbounds %struct.builtin_description, ptr %179, i64 0, i32 3
  %186 = load i32, ptr %185, align 8, !tbaa !356
  %187 = and i32 %180, 4
  %188 = icmp eq i32 %187, 0
  %189 = sext i32 %186 to i64
  br i1 %188, label %190, label %215

190:                                              ; preds = %177
  %191 = getelementptr inbounds [801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 %189
  %192 = getelementptr inbounds [801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 %189, i32 2
  store i32 %180, ptr %192, align 4, !tbaa !70
  %193 = icmp eq i32 %180, 0
  br i1 %193, label %206, label %194

194:                                              ; preds = %190
  %195 = load i32, ptr @ix86_isa_flags, align 4, !tbaa !20
  %196 = and i32 %195, %180
  %197 = icmp eq i32 %196, 0
  br i1 %197, label %198, label %206

198:                                              ; preds = %194
  %199 = load ptr, ptr getelementptr inbounds (%struct.lang_hooks, ptr @lang_hooks, i64 0, i32 41), align 8, !tbaa !438
  %200 = load ptr, ptr getelementptr inbounds (%struct.lang_hooks, ptr @lang_hooks, i64 0, i32 42), align 8, !tbaa !439
  %201 = icmp eq ptr %199, %200
  br i1 %201, label %206, label %202

202:                                              ; preds = %198
  %203 = getelementptr inbounds [801 x ptr], ptr @ix86_builtins, i64 0, i64 %189
  store ptr null, ptr %203, align 8, !tbaa !5
  %204 = getelementptr inbounds [801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 %189, i32 1
  store i32 %182, ptr %204, align 8, !tbaa !73
  store ptr %184, ptr %191, align 8, !tbaa !74
  %205 = getelementptr inbounds [801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 %189, i32 4
  store i8 1, ptr %205, align 1, !tbaa !72
  br label %215

206:                                              ; preds = %198, %194, %190
  %207 = tail call fastcc ptr @ix86_get_builtin_func_type(i32 noundef %182)
  %208 = tail call ptr @add_builtin_function(ptr noundef %184, ptr noundef %207, i32 noundef %186, i32 noundef 2, ptr noundef null, ptr noundef null) #30
  %209 = getelementptr inbounds [801 x ptr], ptr @ix86_builtins, i64 0, i64 %189
  store ptr %208, ptr %209, align 8, !tbaa !5
  %210 = getelementptr inbounds [801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 %189, i32 4
  store i8 0, ptr %210, align 1, !tbaa !72
  %211 = icmp eq ptr %208, null
  br i1 %211, label %215, label %212

212:                                              ; preds = %206
  %213 = load i64, ptr %208, align 8
  %214 = or i64 %213, 1048576
  store i64 %214, ptr %208, align 8
  br label %217

215:                                              ; preds = %206, %202, %177
  %216 = getelementptr inbounds [801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 %189, i32 3
  store i8 1, ptr %216, align 8, !tbaa !75
  br label %217

217:                                              ; preds = %212, %215
  %218 = add nuw nsw i64 %178, 1
  %219 = getelementptr inbounds %struct.builtin_description, ptr %179, i64 1
  %220 = icmp eq i64 %218, 24
  br i1 %220, label %221, label %177, !llvm.loop !444

221:                                              ; preds = %217
  store i32 65536, ptr getelementptr inbounds ([801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 151, i32 2), align 4, !tbaa !70
  %222 = load i32, ptr @ix86_isa_flags, align 4, !tbaa !20
  %223 = and i32 %222, 65536
  %224 = icmp eq i32 %223, 0
  br i1 %224, label %225, label %229

225:                                              ; preds = %221
  %226 = load ptr, ptr getelementptr inbounds (%struct.lang_hooks, ptr @lang_hooks, i64 0, i32 41), align 8, !tbaa !438
  %227 = load ptr, ptr getelementptr inbounds (%struct.lang_hooks, ptr @lang_hooks, i64 0, i32 42), align 8, !tbaa !439
  %228 = icmp eq ptr %226, %227
  br i1 %228, label %229, label %242

229:                                              ; preds = %225, %221
  %230 = load ptr, ptr getelementptr inbounds ([271 x ptr], ptr @ix86_builtin_func_type_tab, i64 0, i64 72), align 16, !tbaa !5
  %231 = icmp eq ptr %230, null
  br i1 %231, label %232, label %238

232:                                              ; preds = %229
  %233 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 55), align 8, !tbaa !5
  %234 = tail call fastcc ptr @ix86_get_builtin_type(i32 noundef 0)
  %235 = tail call fastcc ptr @ix86_get_builtin_type(i32 noundef 14)
  %236 = tail call ptr @tree_cons_stat(ptr noundef null, ptr noundef %235, ptr noundef %233) #30
  %237 = tail call ptr @build_function_type(ptr noundef %234, ptr noundef %236) #30
  store ptr %237, ptr getelementptr inbounds ([271 x ptr], ptr @ix86_builtin_func_type_tab, i64 0, i64 72), align 16, !tbaa !5
  br label %238

238:                                              ; preds = %229, %232
  %239 = phi ptr [ %237, %232 ], [ %230, %229 ]
  %240 = tail call ptr @add_builtin_function(ptr noundef nonnull @.str.480, ptr noundef %239, i32 noundef 151, i32 noundef 2, ptr noundef null, ptr noundef null) #30
  store ptr %240, ptr getelementptr inbounds ([801 x ptr], ptr @ix86_builtins, i64 0, i64 151), align 8, !tbaa !5
  %241 = load i32, ptr @ix86_isa_flags, align 4, !tbaa !20
  br label %243

242:                                              ; preds = %225
  store ptr null, ptr getelementptr inbounds ([801 x ptr], ptr @ix86_builtins, i64 0, i64 151), align 8, !tbaa !5
  store i32 72, ptr getelementptr inbounds ([801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 151, i32 1), align 16, !tbaa !73
  store ptr @.str.480, ptr getelementptr inbounds ([801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 151), align 8, !tbaa !74
  store i8 0, ptr getelementptr inbounds ([801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 151, i32 3), align 8, !tbaa !75
  br label %243

243:                                              ; preds = %238, %242
  %244 = phi i32 [ %241, %238 ], [ %222, %242 ]
  %245 = phi i8 [ 0, %238 ], [ 1, %242 ]
  store i8 %245, ptr getelementptr inbounds ([801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 151, i32 4), align 1, !tbaa !72
  store i32 65536, ptr getelementptr inbounds ([801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 152, i32 2), align 4, !tbaa !70
  %246 = and i32 %244, 65536
  %247 = icmp eq i32 %246, 0
  br i1 %247, label %248, label %252

248:                                              ; preds = %243
  %249 = load ptr, ptr getelementptr inbounds (%struct.lang_hooks, ptr @lang_hooks, i64 0, i32 41), align 8, !tbaa !438
  %250 = load ptr, ptr getelementptr inbounds (%struct.lang_hooks, ptr @lang_hooks, i64 0, i32 42), align 8, !tbaa !439
  %251 = icmp eq ptr %249, %250
  br i1 %251, label %252, label %263

252:                                              ; preds = %248, %243
  %253 = load ptr, ptr getelementptr inbounds ([271 x ptr], ptr @ix86_builtin_func_type_tab, i64 0, i64 2), align 16, !tbaa !5
  %254 = icmp eq ptr %253, null
  br i1 %254, label %255, label %259

255:                                              ; preds = %252
  %256 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 55), align 8, !tbaa !5
  %257 = tail call fastcc ptr @ix86_get_builtin_type(i32 noundef 14)
  %258 = tail call ptr @build_function_type(ptr noundef %257, ptr noundef %256) #30
  store ptr %258, ptr getelementptr inbounds ([271 x ptr], ptr @ix86_builtin_func_type_tab, i64 0, i64 2), align 16, !tbaa !5
  br label %259

259:                                              ; preds = %252, %255
  %260 = phi ptr [ %258, %255 ], [ %253, %252 ]
  %261 = tail call ptr @add_builtin_function(ptr noundef nonnull @.str.481, ptr noundef %260, i32 noundef 152, i32 noundef 2, ptr noundef null, ptr noundef null) #30
  store ptr %261, ptr getelementptr inbounds ([801 x ptr], ptr @ix86_builtins, i64 0, i64 152), align 16, !tbaa !5
  %262 = load i32, ptr @ix86_isa_flags, align 4, !tbaa !20
  br label %264

263:                                              ; preds = %248
  store ptr null, ptr getelementptr inbounds ([801 x ptr], ptr @ix86_builtins, i64 0, i64 152), align 16, !tbaa !5
  store i32 2, ptr getelementptr inbounds ([801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 152, i32 1), align 8, !tbaa !73
  store ptr @.str.481, ptr getelementptr inbounds ([801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 152), align 16, !tbaa !74
  store i8 0, ptr getelementptr inbounds ([801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 152, i32 3), align 16, !tbaa !75
  br label %264

264:                                              ; preds = %259, %263
  %265 = phi i32 [ %262, %259 ], [ %244, %263 ]
  %266 = phi i8 [ 0, %259 ], [ 1, %263 ]
  store i8 %266, ptr getelementptr inbounds ([801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 152, i32 4), align 1, !tbaa !72
  store i32 65538, ptr getelementptr inbounds ([801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 64, i32 2), align 4, !tbaa !70
  %267 = and i32 %265, 65538
  %268 = icmp eq i32 %267, 0
  br i1 %268, label %269, label %273

269:                                              ; preds = %264
  %270 = load ptr, ptr getelementptr inbounds (%struct.lang_hooks, ptr @lang_hooks, i64 0, i32 41), align 8, !tbaa !438
  %271 = load ptr, ptr getelementptr inbounds (%struct.lang_hooks, ptr @lang_hooks, i64 0, i32 42), align 8, !tbaa !439
  %272 = icmp eq ptr %270, %271
  br i1 %272, label %273, label %290

273:                                              ; preds = %269, %264
  %274 = load ptr, ptr getelementptr inbounds ([271 x ptr], ptr @ix86_builtin_func_type_tab, i64 0, i64 222), align 16, !tbaa !5
  %275 = icmp eq ptr %274, null
  br i1 %275, label %276, label %286

276:                                              ; preds = %273
  %277 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 55), align 8, !tbaa !5
  %278 = tail call fastcc ptr @ix86_get_builtin_type(i32 noundef 0)
  %279 = tail call fastcc ptr @ix86_get_builtin_type(i32 noundef 46)
  %280 = tail call ptr @tree_cons_stat(ptr noundef null, ptr noundef %279, ptr noundef %277) #30
  %281 = tail call fastcc ptr @ix86_get_builtin_type(i32 noundef 29)
  %282 = tail call ptr @tree_cons_stat(ptr noundef null, ptr noundef %281, ptr noundef %280) #30
  %283 = tail call fastcc ptr @ix86_get_builtin_type(i32 noundef 29)
  %284 = tail call ptr @tree_cons_stat(ptr noundef null, ptr noundef %283, ptr noundef %282) #30
  %285 = tail call ptr @build_function_type(ptr noundef %278, ptr noundef %284) #30
  store ptr %285, ptr getelementptr inbounds ([271 x ptr], ptr @ix86_builtin_func_type_tab, i64 0, i64 222), align 16, !tbaa !5
  br label %286

286:                                              ; preds = %273, %276
  %287 = phi ptr [ %285, %276 ], [ %274, %273 ]
  %288 = tail call ptr @add_builtin_function(ptr noundef nonnull @.str.482, ptr noundef %287, i32 noundef 64, i32 noundef 2, ptr noundef null, ptr noundef null) #30
  store ptr %288, ptr getelementptr inbounds ([801 x ptr], ptr @ix86_builtins, i64 0, i64 64), align 16, !tbaa !5
  %289 = load i32, ptr @ix86_isa_flags, align 4, !tbaa !20
  br label %291

290:                                              ; preds = %269
  store ptr null, ptr getelementptr inbounds ([801 x ptr], ptr @ix86_builtins, i64 0, i64 64), align 16, !tbaa !5
  store i32 222, ptr getelementptr inbounds ([801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 64, i32 1), align 8, !tbaa !73
  store ptr @.str.482, ptr getelementptr inbounds ([801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 64), align 16, !tbaa !74
  store i8 0, ptr getelementptr inbounds ([801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 64, i32 3), align 16, !tbaa !75
  br label %291

291:                                              ; preds = %286, %290
  %292 = phi i32 [ %289, %286 ], [ %265, %290 ]
  %293 = phi i8 [ 0, %286 ], [ 1, %290 ]
  store i8 %293, ptr getelementptr inbounds ([801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 64, i32 4), align 1, !tbaa !72
  store i32 131072, ptr getelementptr inbounds ([801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 261, i32 2), align 4, !tbaa !70
  %294 = and i32 %292, 131072
  %295 = icmp eq i32 %294, 0
  br i1 %295, label %296, label %300

296:                                              ; preds = %291
  %297 = load ptr, ptr getelementptr inbounds (%struct.lang_hooks, ptr @lang_hooks, i64 0, i32 41), align 8, !tbaa !438
  %298 = load ptr, ptr getelementptr inbounds (%struct.lang_hooks, ptr @lang_hooks, i64 0, i32 42), align 8, !tbaa !439
  %299 = icmp eq ptr %297, %298
  br i1 %299, label %300, label %317

300:                                              ; preds = %296, %291
  %301 = load ptr, ptr getelementptr inbounds ([271 x ptr], ptr @ix86_builtin_func_type_tab, i64 0, i64 221), align 8, !tbaa !5
  %302 = icmp eq ptr %301, null
  br i1 %302, label %303, label %313

303:                                              ; preds = %300
  %304 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 55), align 8, !tbaa !5
  %305 = tail call fastcc ptr @ix86_get_builtin_type(i32 noundef 0)
  %306 = tail call fastcc ptr @ix86_get_builtin_type(i32 noundef 46)
  %307 = tail call ptr @tree_cons_stat(ptr noundef null, ptr noundef %306, ptr noundef %304) #30
  %308 = tail call fastcc ptr @ix86_get_builtin_type(i32 noundef 35)
  %309 = tail call ptr @tree_cons_stat(ptr noundef null, ptr noundef %308, ptr noundef %307) #30
  %310 = tail call fastcc ptr @ix86_get_builtin_type(i32 noundef 35)
  %311 = tail call ptr @tree_cons_stat(ptr noundef null, ptr noundef %310, ptr noundef %309) #30
  %312 = tail call ptr @build_function_type(ptr noundef %305, ptr noundef %311) #30
  store ptr %312, ptr getelementptr inbounds ([271 x ptr], ptr @ix86_builtin_func_type_tab, i64 0, i64 221), align 8, !tbaa !5
  br label %313

313:                                              ; preds = %300, %303
  %314 = phi ptr [ %312, %303 ], [ %301, %300 ]
  %315 = tail call ptr @add_builtin_function(ptr noundef nonnull @.str.483, ptr noundef %314, i32 noundef 261, i32 noundef 2, ptr noundef null, ptr noundef null) #30
  store ptr %315, ptr getelementptr inbounds ([801 x ptr], ptr @ix86_builtins, i64 0, i64 261), align 8, !tbaa !5
  %316 = load i32, ptr @ix86_isa_flags, align 4, !tbaa !20
  br label %318

317:                                              ; preds = %296
  store ptr null, ptr getelementptr inbounds ([801 x ptr], ptr @ix86_builtins, i64 0, i64 261), align 8, !tbaa !5
  store i32 221, ptr getelementptr inbounds ([801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 261, i32 1), align 16, !tbaa !73
  store ptr @.str.483, ptr getelementptr inbounds ([801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 261), align 8, !tbaa !74
  store i8 0, ptr getelementptr inbounds ([801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 261, i32 3), align 8, !tbaa !75
  br label %318

318:                                              ; preds = %313, %317
  %319 = phi i32 [ %316, %313 ], [ %292, %317 ]
  %320 = phi i8 [ 0, %313 ], [ 1, %317 ]
  store i8 %320, ptr getelementptr inbounds ([801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 261, i32 4), align 1, !tbaa !72
  store i32 131072, ptr getelementptr inbounds ([801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 336, i32 2), align 4, !tbaa !70
  %321 = and i32 %319, 131072
  %322 = icmp eq i32 %321, 0
  br i1 %322, label %323, label %327

323:                                              ; preds = %318
  %324 = load ptr, ptr getelementptr inbounds (%struct.lang_hooks, ptr @lang_hooks, i64 0, i32 41), align 8, !tbaa !438
  %325 = load ptr, ptr getelementptr inbounds (%struct.lang_hooks, ptr @lang_hooks, i64 0, i32 42), align 8, !tbaa !439
  %326 = icmp eq ptr %324, %325
  br i1 %326, label %327, label %340

327:                                              ; preds = %323, %318
  %328 = load ptr, ptr getelementptr inbounds ([271 x ptr], ptr @ix86_builtin_func_type_tab, i64 0, i64 70), align 16, !tbaa !5
  %329 = icmp eq ptr %328, null
  br i1 %329, label %330, label %336

330:                                              ; preds = %327
  %331 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 55), align 8, !tbaa !5
  %332 = tail call fastcc ptr @ix86_get_builtin_type(i32 noundef 0)
  %333 = tail call fastcc ptr @ix86_get_builtin_type(i32 noundef 63)
  %334 = tail call ptr @tree_cons_stat(ptr noundef null, ptr noundef %333, ptr noundef %331) #30
  %335 = tail call ptr @build_function_type(ptr noundef %332, ptr noundef %334) #30
  store ptr %335, ptr getelementptr inbounds ([271 x ptr], ptr @ix86_builtin_func_type_tab, i64 0, i64 70), align 16, !tbaa !5
  br label %336

336:                                              ; preds = %327, %330
  %337 = phi ptr [ %335, %330 ], [ %328, %327 ]
  %338 = tail call ptr @add_builtin_function(ptr noundef nonnull @.str.484, ptr noundef %337, i32 noundef 336, i32 noundef 2, ptr noundef null, ptr noundef null) #30
  store ptr %338, ptr getelementptr inbounds ([801 x ptr], ptr @ix86_builtins, i64 0, i64 336), align 16, !tbaa !5
  %339 = load i32, ptr @ix86_isa_flags, align 4, !tbaa !20
  br label %341

340:                                              ; preds = %323
  store ptr null, ptr getelementptr inbounds ([801 x ptr], ptr @ix86_builtins, i64 0, i64 336), align 16, !tbaa !5
  store i32 70, ptr getelementptr inbounds ([801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 336, i32 1), align 8, !tbaa !73
  store ptr @.str.484, ptr getelementptr inbounds ([801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 336), align 16, !tbaa !74
  store i8 0, ptr getelementptr inbounds ([801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 336, i32 3), align 16, !tbaa !75
  br label %341

341:                                              ; preds = %336, %340
  %342 = phi i32 [ %339, %336 ], [ %319, %340 ]
  %343 = phi i8 [ 0, %336 ], [ 1, %340 ]
  store i8 %343, ptr getelementptr inbounds ([801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 336, i32 4), align 1, !tbaa !72
  store i32 131072, ptr getelementptr inbounds ([801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 337, i32 2), align 4, !tbaa !70
  %344 = and i32 %342, 131072
  %345 = icmp eq i32 %344, 0
  br i1 %345, label %346, label %350

346:                                              ; preds = %341
  %347 = load ptr, ptr getelementptr inbounds (%struct.lang_hooks, ptr @lang_hooks, i64 0, i32 41), align 8, !tbaa !438
  %348 = load ptr, ptr getelementptr inbounds (%struct.lang_hooks, ptr @lang_hooks, i64 0, i32 42), align 8, !tbaa !439
  %349 = icmp eq ptr %347, %348
  br i1 %349, label %350, label %361

350:                                              ; preds = %346, %341
  %351 = load ptr, ptr getelementptr inbounds ([271 x ptr], ptr @ix86_builtin_func_type_tab, i64 0, i64 3), align 8, !tbaa !5
  %352 = icmp eq ptr %351, null
  br i1 %352, label %353, label %357

353:                                              ; preds = %350
  %354 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 55), align 8, !tbaa !5
  %355 = tail call fastcc ptr @ix86_get_builtin_type(i32 noundef 0)
  %356 = tail call ptr @build_function_type(ptr noundef %355, ptr noundef %354) #30
  store ptr %356, ptr getelementptr inbounds ([271 x ptr], ptr @ix86_builtin_func_type_tab, i64 0, i64 3), align 8, !tbaa !5
  br label %357

357:                                              ; preds = %350, %353
  %358 = phi ptr [ %356, %353 ], [ %351, %350 ]
  %359 = tail call ptr @add_builtin_function(ptr noundef nonnull @.str.485, ptr noundef %358, i32 noundef 337, i32 noundef 2, ptr noundef null, ptr noundef null) #30
  store ptr %359, ptr getelementptr inbounds ([801 x ptr], ptr @ix86_builtins, i64 0, i64 337), align 8, !tbaa !5
  %360 = load i32, ptr @ix86_isa_flags, align 4, !tbaa !20
  br label %362

361:                                              ; preds = %346
  store ptr null, ptr getelementptr inbounds ([801 x ptr], ptr @ix86_builtins, i64 0, i64 337), align 8, !tbaa !5
  store i32 3, ptr getelementptr inbounds ([801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 337, i32 1), align 16, !tbaa !73
  store ptr @.str.485, ptr getelementptr inbounds ([801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 337), align 8, !tbaa !74
  store i8 0, ptr getelementptr inbounds ([801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 337, i32 3), align 8, !tbaa !75
  br label %362

362:                                              ; preds = %357, %361
  %363 = phi i32 [ %360, %357 ], [ %342, %361 ]
  %364 = phi i8 [ 0, %357 ], [ 1, %361 ]
  %365 = phi ptr [ %359, %357 ], [ null, %361 ]
  store i8 %364, ptr getelementptr inbounds ([801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 337, i32 4), align 1, !tbaa !72
  store ptr %365, ptr @x86_mfence, align 8, !tbaa !5
  store i32 262144, ptr getelementptr inbounds ([801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 357, i32 2), align 4, !tbaa !70
  %366 = and i32 %363, 262144
  %367 = icmp eq i32 %366, 0
  br i1 %367, label %368, label %372

368:                                              ; preds = %362
  %369 = load ptr, ptr getelementptr inbounds (%struct.lang_hooks, ptr @lang_hooks, i64 0, i32 41), align 8, !tbaa !438
  %370 = load ptr, ptr getelementptr inbounds (%struct.lang_hooks, ptr @lang_hooks, i64 0, i32 42), align 8, !tbaa !439
  %371 = icmp eq ptr %369, %370
  br i1 %371, label %372, label %389

372:                                              ; preds = %368, %362
  %373 = load ptr, ptr getelementptr inbounds ([271 x ptr], ptr @ix86_builtin_func_type_tab, i64 0, i64 214), align 16, !tbaa !5
  %374 = icmp eq ptr %373, null
  br i1 %374, label %375, label %385

375:                                              ; preds = %372
  %376 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 55), align 8, !tbaa !5
  %377 = tail call fastcc ptr @ix86_get_builtin_type(i32 noundef 0)
  %378 = tail call fastcc ptr @ix86_get_builtin_type(i32 noundef 14)
  %379 = tail call ptr @tree_cons_stat(ptr noundef null, ptr noundef %378, ptr noundef %376) #30
  %380 = tail call fastcc ptr @ix86_get_builtin_type(i32 noundef 14)
  %381 = tail call ptr @tree_cons_stat(ptr noundef null, ptr noundef %380, ptr noundef %379) #30
  %382 = tail call fastcc ptr @ix86_get_builtin_type(i32 noundef 63)
  %383 = tail call ptr @tree_cons_stat(ptr noundef null, ptr noundef %382, ptr noundef %381) #30
  %384 = tail call ptr @build_function_type(ptr noundef %377, ptr noundef %383) #30
  store ptr %384, ptr getelementptr inbounds ([271 x ptr], ptr @ix86_builtin_func_type_tab, i64 0, i64 214), align 16, !tbaa !5
  br label %385

385:                                              ; preds = %372, %375
  %386 = phi ptr [ %384, %375 ], [ %373, %372 ]
  %387 = tail call ptr @add_builtin_function(ptr noundef nonnull @.str.486, ptr noundef %386, i32 noundef 357, i32 noundef 2, ptr noundef null, ptr noundef null) #30
  store ptr %387, ptr getelementptr inbounds ([801 x ptr], ptr @ix86_builtins, i64 0, i64 357), align 8, !tbaa !5
  %388 = load i32, ptr @ix86_isa_flags, align 4, !tbaa !20
  br label %390

389:                                              ; preds = %368
  store ptr null, ptr getelementptr inbounds ([801 x ptr], ptr @ix86_builtins, i64 0, i64 357), align 8, !tbaa !5
  store i32 214, ptr getelementptr inbounds ([801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 357, i32 1), align 16, !tbaa !73
  store ptr @.str.486, ptr getelementptr inbounds ([801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 357), align 8, !tbaa !74
  store i8 0, ptr getelementptr inbounds ([801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 357, i32 3), align 8, !tbaa !75
  br label %390

390:                                              ; preds = %385, %389
  %391 = phi i32 [ %388, %385 ], [ %363, %389 ]
  %392 = phi i8 [ 0, %385 ], [ 1, %389 ]
  store i8 %392, ptr getelementptr inbounds ([801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 357, i32 4), align 1, !tbaa !72
  store i32 262144, ptr getelementptr inbounds ([801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 358, i32 2), align 4, !tbaa !70
  %393 = and i32 %391, 262144
  %394 = icmp eq i32 %393, 0
  br i1 %394, label %395, label %399

395:                                              ; preds = %390
  %396 = load ptr, ptr getelementptr inbounds (%struct.lang_hooks, ptr @lang_hooks, i64 0, i32 41), align 8, !tbaa !438
  %397 = load ptr, ptr getelementptr inbounds (%struct.lang_hooks, ptr @lang_hooks, i64 0, i32 42), align 8, !tbaa !439
  %398 = icmp eq ptr %396, %397
  br i1 %398, label %399, label %414

399:                                              ; preds = %395, %390
  %400 = load ptr, ptr getelementptr inbounds ([271 x ptr], ptr @ix86_builtin_func_type_tab, i64 0, i64 172), align 16, !tbaa !5
  %401 = icmp eq ptr %400, null
  br i1 %401, label %402, label %410

402:                                              ; preds = %399
  %403 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 55), align 8, !tbaa !5
  %404 = tail call fastcc ptr @ix86_get_builtin_type(i32 noundef 0)
  %405 = tail call fastcc ptr @ix86_get_builtin_type(i32 noundef 14)
  %406 = tail call ptr @tree_cons_stat(ptr noundef null, ptr noundef %405, ptr noundef %403) #30
  %407 = tail call fastcc ptr @ix86_get_builtin_type(i32 noundef 14)
  %408 = tail call ptr @tree_cons_stat(ptr noundef null, ptr noundef %407, ptr noundef %406) #30
  %409 = tail call ptr @build_function_type(ptr noundef %404, ptr noundef %408) #30
  store ptr %409, ptr getelementptr inbounds ([271 x ptr], ptr @ix86_builtin_func_type_tab, i64 0, i64 172), align 16, !tbaa !5
  br label %410

410:                                              ; preds = %399, %402
  %411 = phi ptr [ %409, %402 ], [ %400, %399 ]
  %412 = tail call ptr @add_builtin_function(ptr noundef nonnull @.str.487, ptr noundef %411, i32 noundef 358, i32 noundef 2, ptr noundef null, ptr noundef null) #30
  store ptr %412, ptr getelementptr inbounds ([801 x ptr], ptr @ix86_builtins, i64 0, i64 358), align 16, !tbaa !5
  %413 = load i32, ptr @ix86_isa_flags, align 4, !tbaa !20
  br label %415

414:                                              ; preds = %395
  store ptr null, ptr getelementptr inbounds ([801 x ptr], ptr @ix86_builtins, i64 0, i64 358), align 16, !tbaa !5
  store i32 172, ptr getelementptr inbounds ([801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 358, i32 1), align 8, !tbaa !73
  store ptr @.str.487, ptr getelementptr inbounds ([801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 358), align 16, !tbaa !74
  store i8 0, ptr getelementptr inbounds ([801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 358, i32 3), align 16, !tbaa !75
  br label %415

415:                                              ; preds = %410, %414
  %416 = phi i32 [ %413, %410 ], [ %391, %414 ]
  %417 = phi i8 [ 0, %410 ], [ 1, %414 ]
  store i8 %417, ptr getelementptr inbounds ([801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 358, i32 4), align 1, !tbaa !72
  store i32 16, ptr getelementptr inbounds ([801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 477, i32 2), align 4, !tbaa !70
  %418 = and i32 %416, 16
  %419 = icmp eq i32 %418, 0
  br i1 %419, label %420, label %425

420:                                              ; preds = %415
  %421 = load ptr, ptr getelementptr inbounds (%struct.lang_hooks, ptr @lang_hooks, i64 0, i32 41), align 8, !tbaa !438
  %422 = load ptr, ptr getelementptr inbounds (%struct.lang_hooks, ptr @lang_hooks, i64 0, i32 42), align 8, !tbaa !439
  %423 = icmp eq ptr %421, %422
  br i1 %423, label %425, label %424

424:                                              ; preds = %420
  store ptr null, ptr getelementptr inbounds ([801 x ptr], ptr @ix86_builtins, i64 0, i64 477), align 8, !tbaa !5
  store i32 116, ptr getelementptr inbounds ([801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 477, i32 1), align 16, !tbaa !73
  store ptr @.str.488, ptr getelementptr inbounds ([801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 477), align 8, !tbaa !74
  store i8 1, ptr getelementptr inbounds ([801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 477, i32 4), align 1, !tbaa !72
  br label %443

425:                                              ; preds = %420, %415
  %426 = load ptr, ptr getelementptr inbounds ([271 x ptr], ptr @ix86_builtin_func_type_tab, i64 0, i64 116), align 16, !tbaa !5
  %427 = icmp eq ptr %426, null
  br i1 %427, label %428, label %436

428:                                              ; preds = %425
  %429 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 55), align 8, !tbaa !5
  %430 = tail call fastcc ptr @ix86_get_builtin_type(i32 noundef 32)
  %431 = tail call fastcc ptr @ix86_get_builtin_type(i32 noundef 32)
  %432 = tail call ptr @tree_cons_stat(ptr noundef null, ptr noundef %431, ptr noundef %429) #30
  %433 = tail call fastcc ptr @ix86_get_builtin_type(i32 noundef 32)
  %434 = tail call ptr @tree_cons_stat(ptr noundef null, ptr noundef %433, ptr noundef %432) #30
  %435 = tail call ptr @build_function_type(ptr noundef %430, ptr noundef %434) #30
  store ptr %435, ptr getelementptr inbounds ([271 x ptr], ptr @ix86_builtin_func_type_tab, i64 0, i64 116), align 16, !tbaa !5
  br label %436

436:                                              ; preds = %425, %428
  %437 = phi ptr [ %435, %428 ], [ %426, %425 ]
  %438 = tail call ptr @add_builtin_function(ptr noundef nonnull @.str.488, ptr noundef %437, i32 noundef 477, i32 noundef 2, ptr noundef null, ptr noundef null) #30
  store ptr %438, ptr getelementptr inbounds ([801 x ptr], ptr @ix86_builtins, i64 0, i64 477), align 8, !tbaa !5
  store i8 0, ptr getelementptr inbounds ([801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 477, i32 4), align 1, !tbaa !72
  %439 = icmp eq ptr %438, null
  br i1 %439, label %443, label %440

440:                                              ; preds = %436
  %441 = load i64, ptr %438, align 8
  %442 = or i64 %441, 1048576
  store i64 %442, ptr %438, align 8
  br label %444

443:                                              ; preds = %436, %424
  store i8 1, ptr getelementptr inbounds ([801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 477, i32 3), align 8, !tbaa !75
  br label %444

444:                                              ; preds = %440, %443
  store i32 16, ptr getelementptr inbounds ([801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 478, i32 2), align 4, !tbaa !70
  %445 = load i32, ptr @ix86_isa_flags, align 4, !tbaa !20
  %446 = and i32 %445, 16
  %447 = icmp eq i32 %446, 0
  br i1 %447, label %448, label %453

448:                                              ; preds = %444
  %449 = load ptr, ptr getelementptr inbounds (%struct.lang_hooks, ptr @lang_hooks, i64 0, i32 41), align 8, !tbaa !438
  %450 = load ptr, ptr getelementptr inbounds (%struct.lang_hooks, ptr @lang_hooks, i64 0, i32 42), align 8, !tbaa !439
  %451 = icmp eq ptr %449, %450
  br i1 %451, label %453, label %452

452:                                              ; preds = %448
  store ptr null, ptr getelementptr inbounds ([801 x ptr], ptr @ix86_builtins, i64 0, i64 478), align 16, !tbaa !5
  store i32 116, ptr getelementptr inbounds ([801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 478, i32 1), align 8, !tbaa !73
  store ptr @.str.489, ptr getelementptr inbounds ([801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 478), align 16, !tbaa !74
  store i8 1, ptr getelementptr inbounds ([801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 478, i32 4), align 1, !tbaa !72
  br label %471

453:                                              ; preds = %448, %444
  %454 = load ptr, ptr getelementptr inbounds ([271 x ptr], ptr @ix86_builtin_func_type_tab, i64 0, i64 116), align 16, !tbaa !5
  %455 = icmp eq ptr %454, null
  br i1 %455, label %456, label %464

456:                                              ; preds = %453
  %457 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 55), align 8, !tbaa !5
  %458 = tail call fastcc ptr @ix86_get_builtin_type(i32 noundef 32)
  %459 = tail call fastcc ptr @ix86_get_builtin_type(i32 noundef 32)
  %460 = tail call ptr @tree_cons_stat(ptr noundef null, ptr noundef %459, ptr noundef %457) #30
  %461 = tail call fastcc ptr @ix86_get_builtin_type(i32 noundef 32)
  %462 = tail call ptr @tree_cons_stat(ptr noundef null, ptr noundef %461, ptr noundef %460) #30
  %463 = tail call ptr @build_function_type(ptr noundef %458, ptr noundef %462) #30
  store ptr %463, ptr getelementptr inbounds ([271 x ptr], ptr @ix86_builtin_func_type_tab, i64 0, i64 116), align 16, !tbaa !5
  br label %464

464:                                              ; preds = %453, %456
  %465 = phi ptr [ %463, %456 ], [ %454, %453 ]
  %466 = tail call ptr @add_builtin_function(ptr noundef nonnull @.str.489, ptr noundef %465, i32 noundef 478, i32 noundef 2, ptr noundef null, ptr noundef null) #30
  store ptr %466, ptr getelementptr inbounds ([801 x ptr], ptr @ix86_builtins, i64 0, i64 478), align 16, !tbaa !5
  store i8 0, ptr getelementptr inbounds ([801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 478, i32 4), align 1, !tbaa !72
  %467 = icmp eq ptr %466, null
  br i1 %467, label %471, label %468

468:                                              ; preds = %464
  %469 = load i64, ptr %466, align 8
  %470 = or i64 %469, 1048576
  store i64 %470, ptr %466, align 8
  br label %472

471:                                              ; preds = %464, %452
  store i8 1, ptr getelementptr inbounds ([801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 478, i32 3), align 16, !tbaa !75
  br label %472

472:                                              ; preds = %468, %471
  store i32 16, ptr getelementptr inbounds ([801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 479, i32 2), align 4, !tbaa !70
  %473 = load i32, ptr @ix86_isa_flags, align 4, !tbaa !20
  %474 = and i32 %473, 16
  %475 = icmp eq i32 %474, 0
  br i1 %475, label %476, label %481

476:                                              ; preds = %472
  %477 = load ptr, ptr getelementptr inbounds (%struct.lang_hooks, ptr @lang_hooks, i64 0, i32 41), align 8, !tbaa !438
  %478 = load ptr, ptr getelementptr inbounds (%struct.lang_hooks, ptr @lang_hooks, i64 0, i32 42), align 8, !tbaa !439
  %479 = icmp eq ptr %477, %478
  br i1 %479, label %481, label %480

480:                                              ; preds = %476
  store ptr null, ptr getelementptr inbounds ([801 x ptr], ptr @ix86_builtins, i64 0, i64 479), align 8, !tbaa !5
  store i32 116, ptr getelementptr inbounds ([801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 479, i32 1), align 16, !tbaa !73
  store ptr @.str.490, ptr getelementptr inbounds ([801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 479), align 8, !tbaa !74
  store i8 1, ptr getelementptr inbounds ([801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 479, i32 4), align 1, !tbaa !72
  br label %499

481:                                              ; preds = %476, %472
  %482 = load ptr, ptr getelementptr inbounds ([271 x ptr], ptr @ix86_builtin_func_type_tab, i64 0, i64 116), align 16, !tbaa !5
  %483 = icmp eq ptr %482, null
  br i1 %483, label %484, label %492

484:                                              ; preds = %481
  %485 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 55), align 8, !tbaa !5
  %486 = tail call fastcc ptr @ix86_get_builtin_type(i32 noundef 32)
  %487 = tail call fastcc ptr @ix86_get_builtin_type(i32 noundef 32)
  %488 = tail call ptr @tree_cons_stat(ptr noundef null, ptr noundef %487, ptr noundef %485) #30
  %489 = tail call fastcc ptr @ix86_get_builtin_type(i32 noundef 32)
  %490 = tail call ptr @tree_cons_stat(ptr noundef null, ptr noundef %489, ptr noundef %488) #30
  %491 = tail call ptr @build_function_type(ptr noundef %486, ptr noundef %490) #30
  store ptr %491, ptr getelementptr inbounds ([271 x ptr], ptr @ix86_builtin_func_type_tab, i64 0, i64 116), align 16, !tbaa !5
  br label %492

492:                                              ; preds = %481, %484
  %493 = phi ptr [ %491, %484 ], [ %482, %481 ]
  %494 = tail call ptr @add_builtin_function(ptr noundef nonnull @.str.490, ptr noundef %493, i32 noundef 479, i32 noundef 2, ptr noundef null, ptr noundef null) #30
  store ptr %494, ptr getelementptr inbounds ([801 x ptr], ptr @ix86_builtins, i64 0, i64 479), align 8, !tbaa !5
  store i8 0, ptr getelementptr inbounds ([801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 479, i32 4), align 1, !tbaa !72
  %495 = icmp eq ptr %494, null
  br i1 %495, label %499, label %496

496:                                              ; preds = %492
  %497 = load i64, ptr %494, align 8
  %498 = or i64 %497, 1048576
  store i64 %498, ptr %494, align 8
  br label %500

499:                                              ; preds = %492, %480
  store i8 1, ptr getelementptr inbounds ([801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 479, i32 3), align 8, !tbaa !75
  br label %500

500:                                              ; preds = %496, %499
  store i32 16, ptr getelementptr inbounds ([801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 480, i32 2), align 4, !tbaa !70
  %501 = load i32, ptr @ix86_isa_flags, align 4, !tbaa !20
  %502 = and i32 %501, 16
  %503 = icmp eq i32 %502, 0
  br i1 %503, label %504, label %509

504:                                              ; preds = %500
  %505 = load ptr, ptr getelementptr inbounds (%struct.lang_hooks, ptr @lang_hooks, i64 0, i32 41), align 8, !tbaa !438
  %506 = load ptr, ptr getelementptr inbounds (%struct.lang_hooks, ptr @lang_hooks, i64 0, i32 42), align 8, !tbaa !439
  %507 = icmp eq ptr %505, %506
  br i1 %507, label %509, label %508

508:                                              ; preds = %504
  store ptr null, ptr getelementptr inbounds ([801 x ptr], ptr @ix86_builtins, i64 0, i64 480), align 16, !tbaa !5
  store i32 116, ptr getelementptr inbounds ([801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 480, i32 1), align 8, !tbaa !73
  store ptr @.str.491, ptr getelementptr inbounds ([801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 480), align 16, !tbaa !74
  store i8 1, ptr getelementptr inbounds ([801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 480, i32 4), align 1, !tbaa !72
  br label %527

509:                                              ; preds = %504, %500
  %510 = load ptr, ptr getelementptr inbounds ([271 x ptr], ptr @ix86_builtin_func_type_tab, i64 0, i64 116), align 16, !tbaa !5
  %511 = icmp eq ptr %510, null
  br i1 %511, label %512, label %520

512:                                              ; preds = %509
  %513 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 55), align 8, !tbaa !5
  %514 = tail call fastcc ptr @ix86_get_builtin_type(i32 noundef 32)
  %515 = tail call fastcc ptr @ix86_get_builtin_type(i32 noundef 32)
  %516 = tail call ptr @tree_cons_stat(ptr noundef null, ptr noundef %515, ptr noundef %513) #30
  %517 = tail call fastcc ptr @ix86_get_builtin_type(i32 noundef 32)
  %518 = tail call ptr @tree_cons_stat(ptr noundef null, ptr noundef %517, ptr noundef %516) #30
  %519 = tail call ptr @build_function_type(ptr noundef %514, ptr noundef %518) #30
  store ptr %519, ptr getelementptr inbounds ([271 x ptr], ptr @ix86_builtin_func_type_tab, i64 0, i64 116), align 16, !tbaa !5
  br label %520

520:                                              ; preds = %509, %512
  %521 = phi ptr [ %519, %512 ], [ %510, %509 ]
  %522 = tail call ptr @add_builtin_function(ptr noundef nonnull @.str.491, ptr noundef %521, i32 noundef 480, i32 noundef 2, ptr noundef null, ptr noundef null) #30
  store ptr %522, ptr getelementptr inbounds ([801 x ptr], ptr @ix86_builtins, i64 0, i64 480), align 16, !tbaa !5
  store i8 0, ptr getelementptr inbounds ([801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 480, i32 4), align 1, !tbaa !72
  %523 = icmp eq ptr %522, null
  br i1 %523, label %527, label %524

524:                                              ; preds = %520
  %525 = load i64, ptr %522, align 8
  %526 = or i64 %525, 1048576
  store i64 %526, ptr %522, align 8
  br label %528

527:                                              ; preds = %520, %508
  store i8 1, ptr getelementptr inbounds ([801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 480, i32 3), align 16, !tbaa !75
  br label %528

528:                                              ; preds = %524, %527
  store i32 16, ptr getelementptr inbounds ([801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 481, i32 2), align 4, !tbaa !70
  %529 = load i32, ptr @ix86_isa_flags, align 4, !tbaa !20
  %530 = and i32 %529, 16
  %531 = icmp eq i32 %530, 0
  br i1 %531, label %532, label %537

532:                                              ; preds = %528
  %533 = load ptr, ptr getelementptr inbounds (%struct.lang_hooks, ptr @lang_hooks, i64 0, i32 41), align 8, !tbaa !438
  %534 = load ptr, ptr getelementptr inbounds (%struct.lang_hooks, ptr @lang_hooks, i64 0, i32 42), align 8, !tbaa !439
  %535 = icmp eq ptr %533, %534
  br i1 %535, label %537, label %536

536:                                              ; preds = %532
  store ptr null, ptr getelementptr inbounds ([801 x ptr], ptr @ix86_builtins, i64 0, i64 481), align 8, !tbaa !5
  store i32 30, ptr getelementptr inbounds ([801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 481, i32 1), align 16, !tbaa !73
  store ptr @.str.492, ptr getelementptr inbounds ([801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 481), align 8, !tbaa !74
  store i8 1, ptr getelementptr inbounds ([801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 481, i32 4), align 1, !tbaa !72
  br label %553

537:                                              ; preds = %532, %528
  %538 = load ptr, ptr getelementptr inbounds ([271 x ptr], ptr @ix86_builtin_func_type_tab, i64 0, i64 30), align 16, !tbaa !5
  %539 = icmp eq ptr %538, null
  br i1 %539, label %540, label %546

540:                                              ; preds = %537
  %541 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 55), align 8, !tbaa !5
  %542 = tail call fastcc ptr @ix86_get_builtin_type(i32 noundef 32)
  %543 = tail call fastcc ptr @ix86_get_builtin_type(i32 noundef 32)
  %544 = tail call ptr @tree_cons_stat(ptr noundef null, ptr noundef %543, ptr noundef %541) #30
  %545 = tail call ptr @build_function_type(ptr noundef %542, ptr noundef %544) #30
  store ptr %545, ptr getelementptr inbounds ([271 x ptr], ptr @ix86_builtin_func_type_tab, i64 0, i64 30), align 16, !tbaa !5
  br label %546

546:                                              ; preds = %537, %540
  %547 = phi ptr [ %545, %540 ], [ %538, %537 ]
  %548 = tail call ptr @add_builtin_function(ptr noundef nonnull @.str.492, ptr noundef %547, i32 noundef 481, i32 noundef 2, ptr noundef null, ptr noundef null) #30
  store ptr %548, ptr getelementptr inbounds ([801 x ptr], ptr @ix86_builtins, i64 0, i64 481), align 8, !tbaa !5
  store i8 0, ptr getelementptr inbounds ([801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 481, i32 4), align 1, !tbaa !72
  %549 = icmp eq ptr %548, null
  br i1 %549, label %553, label %550

550:                                              ; preds = %546
  %551 = load i64, ptr %548, align 8
  %552 = or i64 %551, 1048576
  store i64 %552, ptr %548, align 8
  br label %554

553:                                              ; preds = %546, %536
  store i8 1, ptr getelementptr inbounds ([801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 481, i32 3), align 8, !tbaa !75
  br label %554

554:                                              ; preds = %550, %553
  store i32 16, ptr getelementptr inbounds ([801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 482, i32 2), align 4, !tbaa !70
  %555 = load i32, ptr @ix86_isa_flags, align 4, !tbaa !20
  %556 = and i32 %555, 16
  %557 = icmp eq i32 %556, 0
  br i1 %557, label %558, label %563

558:                                              ; preds = %554
  %559 = load ptr, ptr getelementptr inbounds (%struct.lang_hooks, ptr @lang_hooks, i64 0, i32 41), align 8, !tbaa !438
  %560 = load ptr, ptr getelementptr inbounds (%struct.lang_hooks, ptr @lang_hooks, i64 0, i32 42), align 8, !tbaa !439
  %561 = icmp eq ptr %559, %560
  br i1 %561, label %563, label %562

562:                                              ; preds = %558
  store ptr null, ptr getelementptr inbounds ([801 x ptr], ptr @ix86_builtins, i64 0, i64 482), align 16, !tbaa !5
  store i32 113, ptr getelementptr inbounds ([801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 482, i32 1), align 8, !tbaa !73
  store ptr @.str.493, ptr getelementptr inbounds ([801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 482), align 16, !tbaa !74
  store i8 1, ptr getelementptr inbounds ([801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 482, i32 4), align 1, !tbaa !72
  br label %581

563:                                              ; preds = %558, %554
  %564 = load ptr, ptr getelementptr inbounds ([271 x ptr], ptr @ix86_builtin_func_type_tab, i64 0, i64 113), align 8, !tbaa !5
  %565 = icmp eq ptr %564, null
  br i1 %565, label %566, label %574

566:                                              ; preds = %563
  %567 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 55), align 8, !tbaa !5
  %568 = tail call fastcc ptr @ix86_get_builtin_type(i32 noundef 32)
  %569 = tail call fastcc ptr @ix86_get_builtin_type(i32 noundef 12)
  %570 = tail call ptr @tree_cons_stat(ptr noundef null, ptr noundef %569, ptr noundef %567) #30
  %571 = tail call fastcc ptr @ix86_get_builtin_type(i32 noundef 32)
  %572 = tail call ptr @tree_cons_stat(ptr noundef null, ptr noundef %571, ptr noundef %570) #30
  %573 = tail call ptr @build_function_type(ptr noundef %568, ptr noundef %572) #30
  store ptr %573, ptr getelementptr inbounds ([271 x ptr], ptr @ix86_builtin_func_type_tab, i64 0, i64 113), align 8, !tbaa !5
  br label %574

574:                                              ; preds = %563, %566
  %575 = phi ptr [ %573, %566 ], [ %564, %563 ]
  %576 = tail call ptr @add_builtin_function(ptr noundef nonnull @.str.493, ptr noundef %575, i32 noundef 482, i32 noundef 2, ptr noundef null, ptr noundef null) #30
  store ptr %576, ptr getelementptr inbounds ([801 x ptr], ptr @ix86_builtins, i64 0, i64 482), align 16, !tbaa !5
  store i8 0, ptr getelementptr inbounds ([801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 482, i32 4), align 1, !tbaa !72
  %577 = icmp eq ptr %576, null
  br i1 %577, label %581, label %578

578:                                              ; preds = %574
  %579 = load i64, ptr %576, align 8
  %580 = or i64 %579, 1048576
  store i64 %580, ptr %576, align 8
  br label %582

581:                                              ; preds = %574, %562
  store i8 1, ptr getelementptr inbounds ([801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 482, i32 3), align 16, !tbaa !75
  br label %582

582:                                              ; preds = %578, %581
  store i32 8192, ptr getelementptr inbounds ([801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 483, i32 2), align 4, !tbaa !70
  %583 = load i32, ptr @ix86_isa_flags, align 4, !tbaa !20
  %584 = and i32 %583, 8192
  %585 = icmp eq i32 %584, 0
  br i1 %585, label %586, label %591

586:                                              ; preds = %582
  %587 = load ptr, ptr getelementptr inbounds (%struct.lang_hooks, ptr @lang_hooks, i64 0, i32 41), align 8, !tbaa !438
  %588 = load ptr, ptr getelementptr inbounds (%struct.lang_hooks, ptr @lang_hooks, i64 0, i32 42), align 8, !tbaa !439
  %589 = icmp eq ptr %587, %588
  br i1 %589, label %591, label %590

590:                                              ; preds = %586
  store ptr null, ptr getelementptr inbounds ([801 x ptr], ptr @ix86_builtins, i64 0, i64 483), align 8, !tbaa !5
  store i32 186, ptr getelementptr inbounds ([801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 483, i32 1), align 16, !tbaa !73
  store ptr @.str.494, ptr getelementptr inbounds ([801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 483), align 8, !tbaa !74
  store i8 1, ptr getelementptr inbounds ([801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 483, i32 4), align 1, !tbaa !72
  br label %611

591:                                              ; preds = %586, %582
  %592 = load ptr, ptr getelementptr inbounds ([271 x ptr], ptr @ix86_builtin_func_type_tab, i64 0, i64 186), align 16, !tbaa !5
  %593 = icmp eq ptr %592, null
  br i1 %593, label %594, label %604

594:                                              ; preds = %591
  %595 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 55), align 8, !tbaa !5
  %596 = tail call fastcc ptr @ix86_get_builtin_type(i32 noundef 32)
  %597 = tail call fastcc ptr @ix86_get_builtin_type(i32 noundef 12)
  %598 = tail call ptr @tree_cons_stat(ptr noundef null, ptr noundef %597, ptr noundef %595) #30
  %599 = tail call fastcc ptr @ix86_get_builtin_type(i32 noundef 32)
  %600 = tail call ptr @tree_cons_stat(ptr noundef null, ptr noundef %599, ptr noundef %598) #30
  %601 = tail call fastcc ptr @ix86_get_builtin_type(i32 noundef 32)
  %602 = tail call ptr @tree_cons_stat(ptr noundef null, ptr noundef %601, ptr noundef %600) #30
  %603 = tail call ptr @build_function_type(ptr noundef %596, ptr noundef %602) #30
  store ptr %603, ptr getelementptr inbounds ([271 x ptr], ptr @ix86_builtin_func_type_tab, i64 0, i64 186), align 16, !tbaa !5
  br label %604

604:                                              ; preds = %591, %594
  %605 = phi ptr [ %603, %594 ], [ %592, %591 ]
  %606 = tail call ptr @add_builtin_function(ptr noundef nonnull @.str.494, ptr noundef %605, i32 noundef 483, i32 noundef 2, ptr noundef null, ptr noundef null) #30
  store ptr %606, ptr getelementptr inbounds ([801 x ptr], ptr @ix86_builtins, i64 0, i64 483), align 8, !tbaa !5
  store i8 0, ptr getelementptr inbounds ([801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 483, i32 4), align 1, !tbaa !72
  %607 = icmp eq ptr %606, null
  br i1 %607, label %611, label %608

608:                                              ; preds = %604
  %609 = load i64, ptr %606, align 8
  %610 = or i64 %609, 1048576
  store i64 %610, ptr %606, align 8
  br label %612

611:                                              ; preds = %604, %590
  store i8 1, ptr getelementptr inbounds ([801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 483, i32 3), align 8, !tbaa !75
  br label %612

612:                                              ; preds = %608, %611
  store i32 2048, ptr getelementptr inbounds ([801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 440, i32 2), align 4, !tbaa !70
  %613 = load i32, ptr @ix86_isa_flags, align 4, !tbaa !20
  %614 = and i32 %613, 2048
  %615 = icmp eq i32 %614, 0
  br i1 %615, label %616, label %621

616:                                              ; preds = %612
  %617 = load ptr, ptr getelementptr inbounds (%struct.lang_hooks, ptr @lang_hooks, i64 0, i32 41), align 8, !tbaa !438
  %618 = load ptr, ptr getelementptr inbounds (%struct.lang_hooks, ptr @lang_hooks, i64 0, i32 42), align 8, !tbaa !439
  %619 = icmp eq ptr %617, %618
  br i1 %619, label %621, label %620

620:                                              ; preds = %616
  store ptr null, ptr getelementptr inbounds ([801 x ptr], ptr @ix86_builtins, i64 0, i64 440), align 16, !tbaa !5
  store i32 119, ptr getelementptr inbounds ([801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 440, i32 1), align 8, !tbaa !73
  store ptr @.str.495, ptr getelementptr inbounds ([801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 440), align 16, !tbaa !74
  store i8 1, ptr getelementptr inbounds ([801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 440, i32 4), align 1, !tbaa !72
  br label %639

621:                                              ; preds = %616, %612
  %622 = load ptr, ptr getelementptr inbounds ([271 x ptr], ptr @ix86_builtin_func_type_tab, i64 0, i64 119), align 8, !tbaa !5
  %623 = icmp eq ptr %622, null
  br i1 %623, label %624, label %632

624:                                              ; preds = %621
  %625 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 55), align 8, !tbaa !5
  %626 = tail call fastcc ptr @ix86_get_builtin_type(i32 noundef 27)
  %627 = tail call fastcc ptr @ix86_get_builtin_type(i32 noundef 12)
  %628 = tail call ptr @tree_cons_stat(ptr noundef null, ptr noundef %627, ptr noundef %625) #30
  %629 = tail call fastcc ptr @ix86_get_builtin_type(i32 noundef 12)
  %630 = tail call ptr @tree_cons_stat(ptr noundef null, ptr noundef %629, ptr noundef %628) #30
  %631 = tail call ptr @build_function_type(ptr noundef %626, ptr noundef %630) #30
  store ptr %631, ptr getelementptr inbounds ([271 x ptr], ptr @ix86_builtin_func_type_tab, i64 0, i64 119), align 8, !tbaa !5
  br label %632

632:                                              ; preds = %621, %624
  %633 = phi ptr [ %631, %624 ], [ %622, %621 ]
  %634 = tail call ptr @add_builtin_function(ptr noundef nonnull @.str.495, ptr noundef %633, i32 noundef 440, i32 noundef 2, ptr noundef null, ptr noundef null) #30
  store ptr %634, ptr getelementptr inbounds ([801 x ptr], ptr @ix86_builtins, i64 0, i64 440), align 16, !tbaa !5
  store i8 0, ptr getelementptr inbounds ([801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 440, i32 4), align 1, !tbaa !72
  %635 = icmp eq ptr %634, null
  br i1 %635, label %639, label %636

636:                                              ; preds = %632
  %637 = load i64, ptr %634, align 8
  %638 = or i64 %637, 1048576
  store i64 %638, ptr %634, align 8
  br label %640

639:                                              ; preds = %632, %620
  store i8 1, ptr getelementptr inbounds ([801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 440, i32 3), align 16, !tbaa !75
  br label %640

640:                                              ; preds = %636, %639
  store i32 2048, ptr getelementptr inbounds ([801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 441, i32 2), align 4, !tbaa !70
  %641 = load i32, ptr @ix86_isa_flags, align 4, !tbaa !20
  %642 = and i32 %641, 2048
  %643 = icmp eq i32 %642, 0
  br i1 %643, label %644, label %649

644:                                              ; preds = %640
  %645 = load ptr, ptr getelementptr inbounds (%struct.lang_hooks, ptr @lang_hooks, i64 0, i32 41), align 8, !tbaa !438
  %646 = load ptr, ptr getelementptr inbounds (%struct.lang_hooks, ptr @lang_hooks, i64 0, i32 42), align 8, !tbaa !439
  %647 = icmp eq ptr %645, %646
  br i1 %647, label %649, label %648

648:                                              ; preds = %644
  store ptr null, ptr getelementptr inbounds ([801 x ptr], ptr @ix86_builtins, i64 0, i64 441), align 8, !tbaa !5
  store i32 232, ptr getelementptr inbounds ([801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 441, i32 1), align 16, !tbaa !73
  store ptr @.str.496, ptr getelementptr inbounds ([801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 441), align 8, !tbaa !74
  store i8 1, ptr getelementptr inbounds ([801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 441, i32 4), align 1, !tbaa !72
  br label %671

649:                                              ; preds = %644, %640
  %650 = load ptr, ptr getelementptr inbounds ([271 x ptr], ptr @ix86_builtin_func_type_tab, i64 0, i64 232), align 16, !tbaa !5
  %651 = icmp eq ptr %650, null
  br i1 %651, label %652, label %664

652:                                              ; preds = %649
  %653 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 55), align 8, !tbaa !5
  %654 = tail call fastcc ptr @ix86_get_builtin_type(i32 noundef 28)
  %655 = tail call fastcc ptr @ix86_get_builtin_type(i32 noundef 4)
  %656 = tail call ptr @tree_cons_stat(ptr noundef null, ptr noundef %655, ptr noundef %653) #30
  %657 = tail call fastcc ptr @ix86_get_builtin_type(i32 noundef 4)
  %658 = tail call ptr @tree_cons_stat(ptr noundef null, ptr noundef %657, ptr noundef %656) #30
  %659 = tail call fastcc ptr @ix86_get_builtin_type(i32 noundef 4)
  %660 = tail call ptr @tree_cons_stat(ptr noundef null, ptr noundef %659, ptr noundef %658) #30
  %661 = tail call fastcc ptr @ix86_get_builtin_type(i32 noundef 4)
  %662 = tail call ptr @tree_cons_stat(ptr noundef null, ptr noundef %661, ptr noundef %660) #30
  %663 = tail call ptr @build_function_type(ptr noundef %654, ptr noundef %662) #30
  store ptr %663, ptr getelementptr inbounds ([271 x ptr], ptr @ix86_builtin_func_type_tab, i64 0, i64 232), align 16, !tbaa !5
  br label %664

664:                                              ; preds = %649, %652
  %665 = phi ptr [ %663, %652 ], [ %650, %649 ]
  %666 = tail call ptr @add_builtin_function(ptr noundef nonnull @.str.496, ptr noundef %665, i32 noundef 441, i32 noundef 2, ptr noundef null, ptr noundef null) #30
  store ptr %666, ptr getelementptr inbounds ([801 x ptr], ptr @ix86_builtins, i64 0, i64 441), align 8, !tbaa !5
  store i8 0, ptr getelementptr inbounds ([801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 441, i32 4), align 1, !tbaa !72
  %667 = icmp eq ptr %666, null
  br i1 %667, label %671, label %668

668:                                              ; preds = %664
  %669 = load i64, ptr %666, align 8
  %670 = or i64 %669, 1048576
  store i64 %670, ptr %666, align 8
  br label %672

671:                                              ; preds = %664, %648
  store i8 1, ptr getelementptr inbounds ([801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 441, i32 3), align 8, !tbaa !75
  br label %672

672:                                              ; preds = %668, %671
  store i32 2048, ptr getelementptr inbounds ([801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 442, i32 2), align 4, !tbaa !70
  %673 = load i32, ptr @ix86_isa_flags, align 4, !tbaa !20
  %674 = and i32 %673, 2048
  %675 = icmp eq i32 %674, 0
  br i1 %675, label %676, label %681

676:                                              ; preds = %672
  %677 = load ptr, ptr getelementptr inbounds (%struct.lang_hooks, ptr @lang_hooks, i64 0, i32 41), align 8, !tbaa !438
  %678 = load ptr, ptr getelementptr inbounds (%struct.lang_hooks, ptr @lang_hooks, i64 0, i32 42), align 8, !tbaa !439
  %679 = icmp eq ptr %677, %678
  br i1 %679, label %681, label %680

680:                                              ; preds = %676
  store ptr null, ptr getelementptr inbounds ([801 x ptr], ptr @ix86_builtins, i64 0, i64 442), align 16, !tbaa !5
  store i32 235, ptr getelementptr inbounds ([801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 442, i32 1), align 8, !tbaa !73
  store ptr @.str.497, ptr getelementptr inbounds ([801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 442), align 16, !tbaa !74
  store i8 1, ptr getelementptr inbounds ([801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 442, i32 4), align 1, !tbaa !72
  br label %711

681:                                              ; preds = %676, %672
  %682 = load ptr, ptr getelementptr inbounds ([271 x ptr], ptr @ix86_builtin_func_type_tab, i64 0, i64 235), align 8, !tbaa !5
  %683 = icmp eq ptr %682, null
  br i1 %683, label %684, label %704

684:                                              ; preds = %681
  %685 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 55), align 8, !tbaa !5
  %686 = tail call fastcc ptr @ix86_get_builtin_type(i32 noundef 29)
  %687 = tail call fastcc ptr @ix86_get_builtin_type(i32 noundef 3)
  %688 = tail call ptr @tree_cons_stat(ptr noundef null, ptr noundef %687, ptr noundef %685) #30
  %689 = tail call fastcc ptr @ix86_get_builtin_type(i32 noundef 3)
  %690 = tail call ptr @tree_cons_stat(ptr noundef null, ptr noundef %689, ptr noundef %688) #30
  %691 = tail call fastcc ptr @ix86_get_builtin_type(i32 noundef 3)
  %692 = tail call ptr @tree_cons_stat(ptr noundef null, ptr noundef %691, ptr noundef %690) #30
  %693 = tail call fastcc ptr @ix86_get_builtin_type(i32 noundef 3)
  %694 = tail call ptr @tree_cons_stat(ptr noundef null, ptr noundef %693, ptr noundef %692) #30
  %695 = tail call fastcc ptr @ix86_get_builtin_type(i32 noundef 3)
  %696 = tail call ptr @tree_cons_stat(ptr noundef null, ptr noundef %695, ptr noundef %694) #30
  %697 = tail call fastcc ptr @ix86_get_builtin_type(i32 noundef 3)
  %698 = tail call ptr @tree_cons_stat(ptr noundef null, ptr noundef %697, ptr noundef %696) #30
  %699 = tail call fastcc ptr @ix86_get_builtin_type(i32 noundef 3)
  %700 = tail call ptr @tree_cons_stat(ptr noundef null, ptr noundef %699, ptr noundef %698) #30
  %701 = tail call fastcc ptr @ix86_get_builtin_type(i32 noundef 3)
  %702 = tail call ptr @tree_cons_stat(ptr noundef null, ptr noundef %701, ptr noundef %700) #30
  %703 = tail call ptr @build_function_type(ptr noundef %686, ptr noundef %702) #30
  store ptr %703, ptr getelementptr inbounds ([271 x ptr], ptr @ix86_builtin_func_type_tab, i64 0, i64 235), align 8, !tbaa !5
  br label %704

704:                                              ; preds = %681, %684
  %705 = phi ptr [ %703, %684 ], [ %682, %681 ]
  %706 = tail call ptr @add_builtin_function(ptr noundef nonnull @.str.497, ptr noundef %705, i32 noundef 442, i32 noundef 2, ptr noundef null, ptr noundef null) #30
  store ptr %706, ptr getelementptr inbounds ([801 x ptr], ptr @ix86_builtins, i64 0, i64 442), align 16, !tbaa !5
  store i8 0, ptr getelementptr inbounds ([801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 442, i32 4), align 1, !tbaa !72
  %707 = icmp eq ptr %706, null
  br i1 %707, label %711, label %708

708:                                              ; preds = %704
  %709 = load i64, ptr %706, align 8
  %710 = or i64 %709, 1048576
  store i64 %710, ptr %706, align 8
  br label %712

711:                                              ; preds = %704, %680
  store i8 1, ptr getelementptr inbounds ([801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 442, i32 3), align 16, !tbaa !75
  br label %712

712:                                              ; preds = %708, %711
  store i32 131072, ptr getelementptr inbounds ([801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 443, i32 2), align 4, !tbaa !70
  %713 = load i32, ptr @ix86_isa_flags, align 4, !tbaa !20
  %714 = and i32 %713, 131072
  %715 = icmp eq i32 %714, 0
  br i1 %715, label %716, label %721

716:                                              ; preds = %712
  %717 = load ptr, ptr getelementptr inbounds (%struct.lang_hooks, ptr @lang_hooks, i64 0, i32 41), align 8, !tbaa !438
  %718 = load ptr, ptr getelementptr inbounds (%struct.lang_hooks, ptr @lang_hooks, i64 0, i32 42), align 8, !tbaa !439
  %719 = icmp eq ptr %717, %718
  br i1 %719, label %721, label %720

720:                                              ; preds = %716
  store ptr null, ptr getelementptr inbounds ([801 x ptr], ptr @ix86_builtins, i64 0, i64 443), align 8, !tbaa !5
  store i32 74, ptr getelementptr inbounds ([801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 443, i32 1), align 16, !tbaa !73
  store ptr @.str.498, ptr getelementptr inbounds ([801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 443), align 8, !tbaa !74
  store i8 1, ptr getelementptr inbounds ([801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 443, i32 4), align 1, !tbaa !72
  br label %739

721:                                              ; preds = %716, %712
  %722 = load ptr, ptr getelementptr inbounds ([271 x ptr], ptr @ix86_builtin_func_type_tab, i64 0, i64 74), align 16, !tbaa !5
  %723 = icmp eq ptr %722, null
  br i1 %723, label %724, label %732

724:                                              ; preds = %721
  %725 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 55), align 8, !tbaa !5
  %726 = tail call fastcc ptr @ix86_get_builtin_type(i32 noundef 22)
  %727 = tail call fastcc ptr @ix86_get_builtin_type(i32 noundef 12)
  %728 = tail call ptr @tree_cons_stat(ptr noundef null, ptr noundef %727, ptr noundef %725) #30
  %729 = tail call fastcc ptr @ix86_get_builtin_type(i32 noundef 30)
  %730 = tail call ptr @tree_cons_stat(ptr noundef null, ptr noundef %729, ptr noundef %728) #30
  %731 = tail call ptr @build_function_type(ptr noundef %726, ptr noundef %730) #30
  store ptr %731, ptr getelementptr inbounds ([271 x ptr], ptr @ix86_builtin_func_type_tab, i64 0, i64 74), align 16, !tbaa !5
  br label %732

732:                                              ; preds = %721, %724
  %733 = phi ptr [ %731, %724 ], [ %722, %721 ]
  %734 = tail call ptr @add_builtin_function(ptr noundef nonnull @.str.498, ptr noundef %733, i32 noundef 443, i32 noundef 2, ptr noundef null, ptr noundef null) #30
  store ptr %734, ptr getelementptr inbounds ([801 x ptr], ptr @ix86_builtins, i64 0, i64 443), align 8, !tbaa !5
  store i8 0, ptr getelementptr inbounds ([801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 443, i32 4), align 1, !tbaa !72
  %735 = icmp eq ptr %734, null
  br i1 %735, label %739, label %736

736:                                              ; preds = %732
  %737 = load i64, ptr %734, align 8
  %738 = or i64 %737, 1048576
  store i64 %738, ptr %734, align 8
  br label %740

739:                                              ; preds = %732, %720
  store i8 1, ptr getelementptr inbounds ([801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 443, i32 3), align 8, !tbaa !75
  br label %740

740:                                              ; preds = %736, %739
  store i32 131072, ptr getelementptr inbounds ([801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 444, i32 2), align 4, !tbaa !70
  %741 = load i32, ptr @ix86_isa_flags, align 4, !tbaa !20
  %742 = and i32 %741, 131072
  %743 = icmp eq i32 %742, 0
  br i1 %743, label %744, label %749

744:                                              ; preds = %740
  %745 = load ptr, ptr getelementptr inbounds (%struct.lang_hooks, ptr @lang_hooks, i64 0, i32 41), align 8, !tbaa !438
  %746 = load ptr, ptr getelementptr inbounds (%struct.lang_hooks, ptr @lang_hooks, i64 0, i32 42), align 8, !tbaa !439
  %747 = icmp eq ptr %745, %746
  br i1 %747, label %749, label %748

748:                                              ; preds = %744
  store ptr null, ptr getelementptr inbounds ([801 x ptr], ptr @ix86_builtins, i64 0, i64 444), align 16, !tbaa !5
  store i32 73, ptr getelementptr inbounds ([801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 444, i32 1), align 8, !tbaa !73
  store ptr @.str.499, ptr getelementptr inbounds ([801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 444), align 16, !tbaa !74
  store i8 1, ptr getelementptr inbounds ([801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 444, i32 4), align 1, !tbaa !72
  br label %767

749:                                              ; preds = %744, %740
  %750 = load ptr, ptr getelementptr inbounds ([271 x ptr], ptr @ix86_builtin_func_type_tab, i64 0, i64 73), align 8, !tbaa !5
  %751 = icmp eq ptr %750, null
  br i1 %751, label %752, label %760

752:                                              ; preds = %749
  %753 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 55), align 8, !tbaa !5
  %754 = tail call fastcc ptr @ix86_get_builtin_type(i32 noundef 6)
  %755 = tail call fastcc ptr @ix86_get_builtin_type(i32 noundef 12)
  %756 = tail call ptr @tree_cons_stat(ptr noundef null, ptr noundef %755, ptr noundef %753) #30
  %757 = tail call fastcc ptr @ix86_get_builtin_type(i32 noundef 32)
  %758 = tail call ptr @tree_cons_stat(ptr noundef null, ptr noundef %757, ptr noundef %756) #30
  %759 = tail call ptr @build_function_type(ptr noundef %754, ptr noundef %758) #30
  store ptr %759, ptr getelementptr inbounds ([271 x ptr], ptr @ix86_builtin_func_type_tab, i64 0, i64 73), align 8, !tbaa !5
  br label %760

760:                                              ; preds = %749, %752
  %761 = phi ptr [ %759, %752 ], [ %750, %749 ]
  %762 = tail call ptr @add_builtin_function(ptr noundef nonnull @.str.499, ptr noundef %761, i32 noundef 444, i32 noundef 2, ptr noundef null, ptr noundef null) #30
  store ptr %762, ptr getelementptr inbounds ([801 x ptr], ptr @ix86_builtins, i64 0, i64 444), align 16, !tbaa !5
  store i8 0, ptr getelementptr inbounds ([801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 444, i32 4), align 1, !tbaa !72
  %763 = icmp eq ptr %762, null
  br i1 %763, label %767, label %764

764:                                              ; preds = %760
  %765 = load i64, ptr %762, align 8
  %766 = or i64 %765, 1048576
  store i64 %766, ptr %762, align 8
  br label %768

767:                                              ; preds = %760, %748
  store i8 1, ptr getelementptr inbounds ([801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 444, i32 3), align 16, !tbaa !75
  br label %768

768:                                              ; preds = %764, %767
  store i32 65536, ptr getelementptr inbounds ([801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 445, i32 2), align 4, !tbaa !70
  %769 = load i32, ptr @ix86_isa_flags, align 4, !tbaa !20
  %770 = and i32 %769, 65536
  %771 = icmp eq i32 %770, 0
  br i1 %771, label %772, label %777

772:                                              ; preds = %768
  %773 = load ptr, ptr getelementptr inbounds (%struct.lang_hooks, ptr @lang_hooks, i64 0, i32 41), align 8, !tbaa !438
  %774 = load ptr, ptr getelementptr inbounds (%struct.lang_hooks, ptr @lang_hooks, i64 0, i32 42), align 8, !tbaa !439
  %775 = icmp eq ptr %773, %774
  br i1 %775, label %777, label %776

776:                                              ; preds = %772
  store ptr null, ptr getelementptr inbounds ([801 x ptr], ptr @ix86_builtins, i64 0, i64 445), align 8, !tbaa !5
  store i32 75, ptr getelementptr inbounds ([801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 445, i32 1), align 16, !tbaa !73
  store ptr @.str.500, ptr getelementptr inbounds ([801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 445), align 8, !tbaa !74
  store i8 1, ptr getelementptr inbounds ([801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 445, i32 4), align 1, !tbaa !72
  br label %795

777:                                              ; preds = %772, %768
  %778 = load ptr, ptr getelementptr inbounds ([271 x ptr], ptr @ix86_builtin_func_type_tab, i64 0, i64 75), align 8, !tbaa !5
  %779 = icmp eq ptr %778, null
  br i1 %779, label %780, label %788

780:                                              ; preds = %777
  %781 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 55), align 8, !tbaa !5
  %782 = tail call fastcc ptr @ix86_get_builtin_type(i32 noundef 21)
  %783 = tail call fastcc ptr @ix86_get_builtin_type(i32 noundef 12)
  %784 = tail call ptr @tree_cons_stat(ptr noundef null, ptr noundef %783, ptr noundef %781) #30
  %785 = tail call fastcc ptr @ix86_get_builtin_type(i32 noundef 31)
  %786 = tail call ptr @tree_cons_stat(ptr noundef null, ptr noundef %785, ptr noundef %784) #30
  %787 = tail call ptr @build_function_type(ptr noundef %782, ptr noundef %786) #30
  store ptr %787, ptr getelementptr inbounds ([271 x ptr], ptr @ix86_builtin_func_type_tab, i64 0, i64 75), align 8, !tbaa !5
  br label %788

788:                                              ; preds = %777, %780
  %789 = phi ptr [ %787, %780 ], [ %778, %777 ]
  %790 = tail call ptr @add_builtin_function(ptr noundef nonnull @.str.500, ptr noundef %789, i32 noundef 445, i32 noundef 2, ptr noundef null, ptr noundef null) #30
  store ptr %790, ptr getelementptr inbounds ([801 x ptr], ptr @ix86_builtins, i64 0, i64 445), align 8, !tbaa !5
  store i8 0, ptr getelementptr inbounds ([801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 445, i32 4), align 1, !tbaa !72
  %791 = icmp eq ptr %790, null
  br i1 %791, label %795, label %792

792:                                              ; preds = %788
  %793 = load i64, ptr %790, align 8
  %794 = or i64 %793, 1048576
  store i64 %794, ptr %790, align 8
  br label %796

795:                                              ; preds = %788, %776
  store i8 1, ptr getelementptr inbounds ([801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 445, i32 3), align 8, !tbaa !75
  br label %796

796:                                              ; preds = %792, %795
  store i32 131072, ptr getelementptr inbounds ([801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 446, i32 2), align 4, !tbaa !70
  %797 = load i32, ptr @ix86_isa_flags, align 4, !tbaa !20
  %798 = and i32 %797, 131072
  %799 = icmp eq i32 %798, 0
  br i1 %799, label %800, label %805

800:                                              ; preds = %796
  %801 = load ptr, ptr getelementptr inbounds (%struct.lang_hooks, ptr @lang_hooks, i64 0, i32 41), align 8, !tbaa !438
  %802 = load ptr, ptr getelementptr inbounds (%struct.lang_hooks, ptr @lang_hooks, i64 0, i32 42), align 8, !tbaa !439
  %803 = icmp eq ptr %801, %802
  br i1 %803, label %805, label %804

804:                                              ; preds = %800
  store ptr null, ptr getelementptr inbounds ([801 x ptr], ptr @ix86_builtins, i64 0, i64 446), align 16, !tbaa !5
  store i32 88, ptr getelementptr inbounds ([801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 446, i32 1), align 8, !tbaa !73
  store ptr @.str.501, ptr getelementptr inbounds ([801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 446), align 16, !tbaa !74
  store i8 1, ptr getelementptr inbounds ([801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 446, i32 4), align 1, !tbaa !72
  br label %823

805:                                              ; preds = %800, %796
  %806 = load ptr, ptr getelementptr inbounds ([271 x ptr], ptr @ix86_builtin_func_type_tab, i64 0, i64 88), align 16, !tbaa !5
  %807 = icmp eq ptr %806, null
  br i1 %807, label %808, label %816

808:                                              ; preds = %805
  %809 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 55), align 8, !tbaa !5
  %810 = tail call fastcc ptr @ix86_get_builtin_type(i32 noundef 5)
  %811 = tail call fastcc ptr @ix86_get_builtin_type(i32 noundef 12)
  %812 = tail call ptr @tree_cons_stat(ptr noundef null, ptr noundef %811, ptr noundef %809) #30
  %813 = tail call fastcc ptr @ix86_get_builtin_type(i32 noundef 33)
  %814 = tail call ptr @tree_cons_stat(ptr noundef null, ptr noundef %813, ptr noundef %812) #30
  %815 = tail call ptr @build_function_type(ptr noundef %810, ptr noundef %814) #30
  store ptr %815, ptr getelementptr inbounds ([271 x ptr], ptr @ix86_builtin_func_type_tab, i64 0, i64 88), align 16, !tbaa !5
  br label %816

816:                                              ; preds = %805, %808
  %817 = phi ptr [ %815, %808 ], [ %806, %805 ]
  %818 = tail call ptr @add_builtin_function(ptr noundef nonnull @.str.501, ptr noundef %817, i32 noundef 446, i32 noundef 2, ptr noundef null, ptr noundef null) #30
  store ptr %818, ptr getelementptr inbounds ([801 x ptr], ptr @ix86_builtins, i64 0, i64 446), align 16, !tbaa !5
  store i8 0, ptr getelementptr inbounds ([801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 446, i32 4), align 1, !tbaa !72
  %819 = icmp eq ptr %818, null
  br i1 %819, label %823, label %820

820:                                              ; preds = %816
  %821 = load i64, ptr %818, align 8
  %822 = or i64 %821, 1048576
  store i64 %822, ptr %818, align 8
  br label %824

823:                                              ; preds = %816, %804
  store i8 1, ptr getelementptr inbounds ([801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 446, i32 3), align 16, !tbaa !75
  br label %824

824:                                              ; preds = %820, %823
  store i32 131072, ptr getelementptr inbounds ([801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 447, i32 2), align 4, !tbaa !70
  %825 = load i32, ptr @ix86_isa_flags, align 4, !tbaa !20
  %826 = and i32 %825, 131072
  %827 = icmp eq i32 %826, 0
  br i1 %827, label %828, label %833

828:                                              ; preds = %824
  %829 = load ptr, ptr getelementptr inbounds (%struct.lang_hooks, ptr @lang_hooks, i64 0, i32 41), align 8, !tbaa !438
  %830 = load ptr, ptr getelementptr inbounds (%struct.lang_hooks, ptr @lang_hooks, i64 0, i32 42), align 8, !tbaa !439
  %831 = icmp eq ptr %829, %830
  br i1 %831, label %833, label %832

832:                                              ; preds = %828
  store ptr null, ptr getelementptr inbounds ([801 x ptr], ptr @ix86_builtins, i64 0, i64 447), align 8, !tbaa !5
  store i32 78, ptr getelementptr inbounds ([801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 447, i32 1), align 16, !tbaa !73
  store ptr @.str.502, ptr getelementptr inbounds ([801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 447), align 8, !tbaa !74
  store i8 1, ptr getelementptr inbounds ([801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 447, i32 4), align 1, !tbaa !72
  br label %851

833:                                              ; preds = %828, %824
  %834 = load ptr, ptr getelementptr inbounds ([271 x ptr], ptr @ix86_builtin_func_type_tab, i64 0, i64 78), align 16, !tbaa !5
  %835 = icmp eq ptr %834, null
  br i1 %835, label %836, label %844

836:                                              ; preds = %833
  %837 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 55), align 8, !tbaa !5
  %838 = tail call fastcc ptr @ix86_get_builtin_type(i32 noundef 4)
  %839 = tail call fastcc ptr @ix86_get_builtin_type(i32 noundef 12)
  %840 = tail call ptr @tree_cons_stat(ptr noundef null, ptr noundef %839, ptr noundef %837) #30
  %841 = tail call fastcc ptr @ix86_get_builtin_type(i32 noundef 34)
  %842 = tail call ptr @tree_cons_stat(ptr noundef null, ptr noundef %841, ptr noundef %840) #30
  %843 = tail call ptr @build_function_type(ptr noundef %838, ptr noundef %842) #30
  store ptr %843, ptr getelementptr inbounds ([271 x ptr], ptr @ix86_builtin_func_type_tab, i64 0, i64 78), align 16, !tbaa !5
  br label %844

844:                                              ; preds = %833, %836
  %845 = phi ptr [ %843, %836 ], [ %834, %833 ]
  %846 = tail call ptr @add_builtin_function(ptr noundef nonnull @.str.502, ptr noundef %845, i32 noundef 447, i32 noundef 2, ptr noundef null, ptr noundef null) #30
  store ptr %846, ptr getelementptr inbounds ([801 x ptr], ptr @ix86_builtins, i64 0, i64 447), align 8, !tbaa !5
  store i8 0, ptr getelementptr inbounds ([801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 447, i32 4), align 1, !tbaa !72
  %847 = icmp eq ptr %846, null
  br i1 %847, label %851, label %848

848:                                              ; preds = %844
  %849 = load i64, ptr %846, align 8
  %850 = or i64 %849, 1048576
  store i64 %850, ptr %846, align 8
  br label %852

851:                                              ; preds = %844, %832
  store i8 1, ptr getelementptr inbounds ([801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 447, i32 3), align 8, !tbaa !75
  br label %852

852:                                              ; preds = %848, %851
  store i32 65538, ptr getelementptr inbounds ([801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 449, i32 2), align 4, !tbaa !70
  %853 = load i32, ptr @ix86_isa_flags, align 4, !tbaa !20
  %854 = and i32 %853, 65538
  %855 = icmp eq i32 %854, 0
  br i1 %855, label %856, label %861

856:                                              ; preds = %852
  %857 = load ptr, ptr getelementptr inbounds (%struct.lang_hooks, ptr @lang_hooks, i64 0, i32 41), align 8, !tbaa !438
  %858 = load ptr, ptr getelementptr inbounds (%struct.lang_hooks, ptr @lang_hooks, i64 0, i32 42), align 8, !tbaa !439
  %859 = icmp eq ptr %857, %858
  br i1 %859, label %861, label %860

860:                                              ; preds = %856
  store ptr null, ptr getelementptr inbounds ([801 x ptr], ptr @ix86_builtins, i64 0, i64 449), align 8, !tbaa !5
  store i32 77, ptr getelementptr inbounds ([801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 449, i32 1), align 16, !tbaa !73
  store ptr @.str.503, ptr getelementptr inbounds ([801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 449), align 8, !tbaa !74
  store i8 1, ptr getelementptr inbounds ([801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 449, i32 4), align 1, !tbaa !72
  br label %879

861:                                              ; preds = %856, %852
  %862 = load ptr, ptr getelementptr inbounds ([271 x ptr], ptr @ix86_builtin_func_type_tab, i64 0, i64 77), align 8, !tbaa !5
  %863 = icmp eq ptr %862, null
  br i1 %863, label %864, label %872

864:                                              ; preds = %861
  %865 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 55), align 8, !tbaa !5
  %866 = tail call fastcc ptr @ix86_get_builtin_type(i32 noundef 4)
  %867 = tail call fastcc ptr @ix86_get_builtin_type(i32 noundef 12)
  %868 = tail call ptr @tree_cons_stat(ptr noundef null, ptr noundef %867, ptr noundef %865) #30
  %869 = tail call fastcc ptr @ix86_get_builtin_type(i32 noundef 28)
  %870 = tail call ptr @tree_cons_stat(ptr noundef null, ptr noundef %869, ptr noundef %868) #30
  %871 = tail call ptr @build_function_type(ptr noundef %866, ptr noundef %870) #30
  store ptr %871, ptr getelementptr inbounds ([271 x ptr], ptr @ix86_builtin_func_type_tab, i64 0, i64 77), align 8, !tbaa !5
  br label %872

872:                                              ; preds = %861, %864
  %873 = phi ptr [ %871, %864 ], [ %862, %861 ]
  %874 = tail call ptr @add_builtin_function(ptr noundef nonnull @.str.503, ptr noundef %873, i32 noundef 449, i32 noundef 2, ptr noundef null, ptr noundef null) #30
  store ptr %874, ptr getelementptr inbounds ([801 x ptr], ptr @ix86_builtins, i64 0, i64 449), align 8, !tbaa !5
  store i8 0, ptr getelementptr inbounds ([801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 449, i32 4), align 1, !tbaa !72
  %875 = icmp eq ptr %874, null
  br i1 %875, label %879, label %876

876:                                              ; preds = %872
  %877 = load i64, ptr %874, align 8
  %878 = or i64 %877, 1048576
  store i64 %878, ptr %874, align 8
  br label %880

879:                                              ; preds = %872, %860
  store i8 1, ptr getelementptr inbounds ([801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 449, i32 3), align 8, !tbaa !75
  br label %880

880:                                              ; preds = %876, %879
  store i32 2048, ptr getelementptr inbounds ([801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 448, i32 2), align 4, !tbaa !70
  %881 = load i32, ptr @ix86_isa_flags, align 4, !tbaa !20
  %882 = and i32 %881, 2048
  %883 = icmp eq i32 %882, 0
  br i1 %883, label %884, label %889

884:                                              ; preds = %880
  %885 = load ptr, ptr getelementptr inbounds (%struct.lang_hooks, ptr @lang_hooks, i64 0, i32 41), align 8, !tbaa !438
  %886 = load ptr, ptr getelementptr inbounds (%struct.lang_hooks, ptr @lang_hooks, i64 0, i32 42), align 8, !tbaa !439
  %887 = icmp eq ptr %885, %886
  br i1 %887, label %889, label %888

888:                                              ; preds = %884
  store ptr null, ptr getelementptr inbounds ([801 x ptr], ptr @ix86_builtins, i64 0, i64 448), align 16, !tbaa !5
  store i32 87, ptr getelementptr inbounds ([801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 448, i32 1), align 8, !tbaa !73
  store ptr @.str.504, ptr getelementptr inbounds ([801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 448), align 16, !tbaa !74
  store i8 1, ptr getelementptr inbounds ([801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 448, i32 4), align 1, !tbaa !72
  br label %907

889:                                              ; preds = %884, %880
  %890 = load ptr, ptr getelementptr inbounds ([271 x ptr], ptr @ix86_builtin_func_type_tab, i64 0, i64 87), align 8, !tbaa !5
  %891 = icmp eq ptr %890, null
  br i1 %891, label %892, label %900

892:                                              ; preds = %889
  %893 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 55), align 8, !tbaa !5
  %894 = tail call fastcc ptr @ix86_get_builtin_type(i32 noundef 5)
  %895 = tail call fastcc ptr @ix86_get_builtin_type(i32 noundef 12)
  %896 = tail call ptr @tree_cons_stat(ptr noundef null, ptr noundef %895, ptr noundef %893) #30
  %897 = tail call fastcc ptr @ix86_get_builtin_type(i32 noundef 27)
  %898 = tail call ptr @tree_cons_stat(ptr noundef null, ptr noundef %897, ptr noundef %896) #30
  %899 = tail call ptr @build_function_type(ptr noundef %894, ptr noundef %898) #30
  store ptr %899, ptr getelementptr inbounds ([271 x ptr], ptr @ix86_builtin_func_type_tab, i64 0, i64 87), align 8, !tbaa !5
  br label %900

900:                                              ; preds = %889, %892
  %901 = phi ptr [ %899, %892 ], [ %890, %889 ]
  %902 = tail call ptr @add_builtin_function(ptr noundef nonnull @.str.504, ptr noundef %901, i32 noundef 448, i32 noundef 2, ptr noundef null, ptr noundef null) #30
  store ptr %902, ptr getelementptr inbounds ([801 x ptr], ptr @ix86_builtins, i64 0, i64 448), align 16, !tbaa !5
  store i8 0, ptr getelementptr inbounds ([801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 448, i32 4), align 1, !tbaa !72
  %903 = icmp eq ptr %902, null
  br i1 %903, label %907, label %904

904:                                              ; preds = %900
  %905 = load i64, ptr %902, align 8
  %906 = or i64 %905, 1048576
  store i64 %906, ptr %902, align 8
  br label %908

907:                                              ; preds = %900, %888
  store i8 1, ptr getelementptr inbounds ([801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 448, i32 3), align 16, !tbaa !75
  br label %908

908:                                              ; preds = %904, %907
  store i32 131072, ptr getelementptr inbounds ([801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 450, i32 2), align 4, !tbaa !70
  %909 = load i32, ptr @ix86_isa_flags, align 4, !tbaa !20
  %910 = and i32 %909, 131072
  %911 = icmp eq i32 %910, 0
  br i1 %911, label %912, label %917

912:                                              ; preds = %908
  %913 = load ptr, ptr getelementptr inbounds (%struct.lang_hooks, ptr @lang_hooks, i64 0, i32 41), align 8, !tbaa !438
  %914 = load ptr, ptr getelementptr inbounds (%struct.lang_hooks, ptr @lang_hooks, i64 0, i32 42), align 8, !tbaa !439
  %915 = icmp eq ptr %913, %914
  br i1 %915, label %917, label %916

916:                                              ; preds = %912
  store ptr null, ptr getelementptr inbounds ([801 x ptr], ptr @ix86_builtins, i64 0, i64 450), align 16, !tbaa !5
  store i32 85, ptr getelementptr inbounds ([801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 450, i32 1), align 8, !tbaa !73
  store ptr @.str.505, ptr getelementptr inbounds ([801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 450), align 16, !tbaa !74
  store i8 1, ptr getelementptr inbounds ([801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 450, i32 4), align 1, !tbaa !72
  br label %935

917:                                              ; preds = %912, %908
  %918 = load ptr, ptr getelementptr inbounds ([271 x ptr], ptr @ix86_builtin_func_type_tab, i64 0, i64 85), align 8, !tbaa !5
  %919 = icmp eq ptr %918, null
  br i1 %919, label %920, label %928

920:                                              ; preds = %917
  %921 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 55), align 8, !tbaa !5
  %922 = tail call fastcc ptr @ix86_get_builtin_type(i32 noundef 3)
  %923 = tail call fastcc ptr @ix86_get_builtin_type(i32 noundef 12)
  %924 = tail call ptr @tree_cons_stat(ptr noundef null, ptr noundef %923, ptr noundef %921) #30
  %925 = tail call fastcc ptr @ix86_get_builtin_type(i32 noundef 35)
  %926 = tail call ptr @tree_cons_stat(ptr noundef null, ptr noundef %925, ptr noundef %924) #30
  %927 = tail call ptr @build_function_type(ptr noundef %922, ptr noundef %926) #30
  store ptr %927, ptr getelementptr inbounds ([271 x ptr], ptr @ix86_builtin_func_type_tab, i64 0, i64 85), align 8, !tbaa !5
  br label %928

928:                                              ; preds = %917, %920
  %929 = phi ptr [ %927, %920 ], [ %918, %917 ]
  %930 = tail call ptr @add_builtin_function(ptr noundef nonnull @.str.505, ptr noundef %929, i32 noundef 450, i32 noundef 2, ptr noundef null, ptr noundef null) #30
  store ptr %930, ptr getelementptr inbounds ([801 x ptr], ptr @ix86_builtins, i64 0, i64 450), align 16, !tbaa !5
  store i8 0, ptr getelementptr inbounds ([801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 450, i32 4), align 1, !tbaa !72
  %931 = icmp eq ptr %930, null
  br i1 %931, label %935, label %932

932:                                              ; preds = %928
  %933 = load i64, ptr %930, align 8
  %934 = or i64 %933, 1048576
  store i64 %934, ptr %930, align 8
  br label %936

935:                                              ; preds = %928, %916
  store i8 1, ptr getelementptr inbounds ([801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 450, i32 3), align 16, !tbaa !75
  br label %936

936:                                              ; preds = %932, %935
  store i8 1, ptr getelementptr inbounds ([801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 451, i32 3), align 8, !tbaa !75
  store i32 524288, ptr getelementptr inbounds ([801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 452, i32 2), align 4, !tbaa !70
  %937 = load i32, ptr @ix86_isa_flags, align 4, !tbaa !20
  %938 = and i32 %937, 524288
  %939 = icmp eq i32 %938, 0
  br i1 %939, label %940, label %945

940:                                              ; preds = %936
  %941 = load ptr, ptr getelementptr inbounds (%struct.lang_hooks, ptr @lang_hooks, i64 0, i32 41), align 8, !tbaa !438
  %942 = load ptr, ptr getelementptr inbounds (%struct.lang_hooks, ptr @lang_hooks, i64 0, i32 42), align 8, !tbaa !439
  %943 = icmp eq ptr %941, %942
  br i1 %943, label %945, label %944

944:                                              ; preds = %940
  store ptr null, ptr getelementptr inbounds ([801 x ptr], ptr @ix86_builtins, i64 0, i64 452), align 16, !tbaa !5
  store i32 195, ptr getelementptr inbounds ([801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 452, i32 1), align 8, !tbaa !73
  store ptr @.str.507, ptr getelementptr inbounds ([801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 452), align 16, !tbaa !74
  store i8 1, ptr getelementptr inbounds ([801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 452, i32 4), align 1, !tbaa !72
  br label %965

945:                                              ; preds = %940, %936
  %946 = load ptr, ptr getelementptr inbounds ([271 x ptr], ptr @ix86_builtin_func_type_tab, i64 0, i64 195), align 8, !tbaa !5
  %947 = icmp eq ptr %946, null
  br i1 %947, label %948, label %958

948:                                              ; preds = %945
  %949 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 55), align 8, !tbaa !5
  %950 = tail call fastcc ptr @ix86_get_builtin_type(i32 noundef 31)
  %951 = tail call fastcc ptr @ix86_get_builtin_type(i32 noundef 12)
  %952 = tail call ptr @tree_cons_stat(ptr noundef null, ptr noundef %951, ptr noundef %949) #30
  %953 = tail call fastcc ptr @ix86_get_builtin_type(i32 noundef 21)
  %954 = tail call ptr @tree_cons_stat(ptr noundef null, ptr noundef %953, ptr noundef %952) #30
  %955 = tail call fastcc ptr @ix86_get_builtin_type(i32 noundef 31)
  %956 = tail call ptr @tree_cons_stat(ptr noundef null, ptr noundef %955, ptr noundef %954) #30
  %957 = tail call ptr @build_function_type(ptr noundef %950, ptr noundef %956) #30
  store ptr %957, ptr getelementptr inbounds ([271 x ptr], ptr @ix86_builtin_func_type_tab, i64 0, i64 195), align 8, !tbaa !5
  br label %958

958:                                              ; preds = %945, %948
  %959 = phi ptr [ %957, %948 ], [ %946, %945 ]
  %960 = tail call ptr @add_builtin_function(ptr noundef nonnull @.str.507, ptr noundef %959, i32 noundef 452, i32 noundef 2, ptr noundef null, ptr noundef null) #30
  store ptr %960, ptr getelementptr inbounds ([801 x ptr], ptr @ix86_builtins, i64 0, i64 452), align 16, !tbaa !5
  store i8 0, ptr getelementptr inbounds ([801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 452, i32 4), align 1, !tbaa !72
  %961 = icmp eq ptr %960, null
  br i1 %961, label %965, label %962

962:                                              ; preds = %958
  %963 = load i64, ptr %960, align 8
  %964 = or i64 %963, 1048576
  store i64 %964, ptr %960, align 8
  br label %966

965:                                              ; preds = %958, %944
  store i8 1, ptr getelementptr inbounds ([801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 452, i32 3), align 16, !tbaa !75
  br label %966

966:                                              ; preds = %962, %965
  store i32 524288, ptr getelementptr inbounds ([801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 453, i32 2), align 4, !tbaa !70
  %967 = load i32, ptr @ix86_isa_flags, align 4, !tbaa !20
  %968 = and i32 %967, 524288
  %969 = icmp eq i32 %968, 0
  br i1 %969, label %970, label %975

970:                                              ; preds = %966
  %971 = load ptr, ptr getelementptr inbounds (%struct.lang_hooks, ptr @lang_hooks, i64 0, i32 41), align 8, !tbaa !438
  %972 = load ptr, ptr getelementptr inbounds (%struct.lang_hooks, ptr @lang_hooks, i64 0, i32 42), align 8, !tbaa !439
  %973 = icmp eq ptr %971, %972
  br i1 %973, label %975, label %974

974:                                              ; preds = %970
  store ptr null, ptr getelementptr inbounds ([801 x ptr], ptr @ix86_builtins, i64 0, i64 453), align 8, !tbaa !5
  store i32 199, ptr getelementptr inbounds ([801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 453, i32 1), align 16, !tbaa !73
  store ptr @.str.508, ptr getelementptr inbounds ([801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 453), align 8, !tbaa !74
  store i8 1, ptr getelementptr inbounds ([801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 453, i32 4), align 1, !tbaa !72
  br label %995

975:                                              ; preds = %970, %966
  %976 = load ptr, ptr getelementptr inbounds ([271 x ptr], ptr @ix86_builtin_func_type_tab, i64 0, i64 199), align 8, !tbaa !5
  %977 = icmp eq ptr %976, null
  br i1 %977, label %978, label %988

978:                                              ; preds = %975
  %979 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 55), align 8, !tbaa !5
  %980 = tail call fastcc ptr @ix86_get_builtin_type(i32 noundef 33)
  %981 = tail call fastcc ptr @ix86_get_builtin_type(i32 noundef 12)
  %982 = tail call ptr @tree_cons_stat(ptr noundef null, ptr noundef %981, ptr noundef %979) #30
  %983 = tail call fastcc ptr @ix86_get_builtin_type(i32 noundef 5)
  %984 = tail call ptr @tree_cons_stat(ptr noundef null, ptr noundef %983, ptr noundef %982) #30
  %985 = tail call fastcc ptr @ix86_get_builtin_type(i32 noundef 33)
  %986 = tail call ptr @tree_cons_stat(ptr noundef null, ptr noundef %985, ptr noundef %984) #30
  %987 = tail call ptr @build_function_type(ptr noundef %980, ptr noundef %986) #30
  store ptr %987, ptr getelementptr inbounds ([271 x ptr], ptr @ix86_builtin_func_type_tab, i64 0, i64 199), align 8, !tbaa !5
  br label %988

988:                                              ; preds = %975, %978
  %989 = phi ptr [ %987, %978 ], [ %976, %975 ]
  %990 = tail call ptr @add_builtin_function(ptr noundef nonnull @.str.508, ptr noundef %989, i32 noundef 453, i32 noundef 2, ptr noundef null, ptr noundef null) #30
  store ptr %990, ptr getelementptr inbounds ([801 x ptr], ptr @ix86_builtins, i64 0, i64 453), align 8, !tbaa !5
  store i8 0, ptr getelementptr inbounds ([801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 453, i32 4), align 1, !tbaa !72
  %991 = icmp eq ptr %990, null
  br i1 %991, label %995, label %992

992:                                              ; preds = %988
  %993 = load i64, ptr %990, align 8
  %994 = or i64 %993, 1048576
  store i64 %994, ptr %990, align 8
  br label %996

995:                                              ; preds = %988, %974
  store i8 1, ptr getelementptr inbounds ([801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 453, i32 3), align 8, !tbaa !75
  br label %996

996:                                              ; preds = %992, %995
  store i32 131072, ptr getelementptr inbounds ([801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 454, i32 2), align 4, !tbaa !70
  %997 = load i32, ptr @ix86_isa_flags, align 4, !tbaa !20
  %998 = and i32 %997, 131072
  %999 = icmp eq i32 %998, 0
  br i1 %999, label %1000, label %1005

1000:                                             ; preds = %996
  %1001 = load ptr, ptr getelementptr inbounds (%struct.lang_hooks, ptr @lang_hooks, i64 0, i32 41), align 8, !tbaa !438
  %1002 = load ptr, ptr getelementptr inbounds (%struct.lang_hooks, ptr @lang_hooks, i64 0, i32 42), align 8, !tbaa !439
  %1003 = icmp eq ptr %1001, %1002
  br i1 %1003, label %1005, label %1004

1004:                                             ; preds = %1000
  store ptr null, ptr getelementptr inbounds ([801 x ptr], ptr @ix86_builtins, i64 0, i64 454), align 16, !tbaa !5
  store i32 203, ptr getelementptr inbounds ([801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 454, i32 1), align 8, !tbaa !73
  store ptr @.str.509, ptr getelementptr inbounds ([801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 454), align 16, !tbaa !74
  store i8 1, ptr getelementptr inbounds ([801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 454, i32 4), align 1, !tbaa !72
  br label %1025

1005:                                             ; preds = %1000, %996
  %1006 = load ptr, ptr getelementptr inbounds ([271 x ptr], ptr @ix86_builtin_func_type_tab, i64 0, i64 203), align 8, !tbaa !5
  %1007 = icmp eq ptr %1006, null
  br i1 %1007, label %1008, label %1018

1008:                                             ; preds = %1005
  %1009 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 55), align 8, !tbaa !5
  %1010 = tail call fastcc ptr @ix86_get_builtin_type(i32 noundef 34)
  %1011 = tail call fastcc ptr @ix86_get_builtin_type(i32 noundef 12)
  %1012 = tail call ptr @tree_cons_stat(ptr noundef null, ptr noundef %1011, ptr noundef %1009) #30
  %1013 = tail call fastcc ptr @ix86_get_builtin_type(i32 noundef 4)
  %1014 = tail call ptr @tree_cons_stat(ptr noundef null, ptr noundef %1013, ptr noundef %1012) #30
  %1015 = tail call fastcc ptr @ix86_get_builtin_type(i32 noundef 34)
  %1016 = tail call ptr @tree_cons_stat(ptr noundef null, ptr noundef %1015, ptr noundef %1014) #30
  %1017 = tail call ptr @build_function_type(ptr noundef %1010, ptr noundef %1016) #30
  store ptr %1017, ptr getelementptr inbounds ([271 x ptr], ptr @ix86_builtin_func_type_tab, i64 0, i64 203), align 8, !tbaa !5
  br label %1018

1018:                                             ; preds = %1005, %1008
  %1019 = phi ptr [ %1017, %1008 ], [ %1006, %1005 ]
  %1020 = tail call ptr @add_builtin_function(ptr noundef nonnull @.str.509, ptr noundef %1019, i32 noundef 454, i32 noundef 2, ptr noundef null, ptr noundef null) #30
  store ptr %1020, ptr getelementptr inbounds ([801 x ptr], ptr @ix86_builtins, i64 0, i64 454), align 16, !tbaa !5
  store i8 0, ptr getelementptr inbounds ([801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 454, i32 4), align 1, !tbaa !72
  %1021 = icmp eq ptr %1020, null
  br i1 %1021, label %1025, label %1022

1022:                                             ; preds = %1018
  %1023 = load i64, ptr %1020, align 8
  %1024 = or i64 %1023, 1048576
  store i64 %1024, ptr %1020, align 8
  br label %1026

1025:                                             ; preds = %1018, %1004
  store i8 1, ptr getelementptr inbounds ([801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 454, i32 3), align 16, !tbaa !75
  br label %1026

1026:                                             ; preds = %1022, %1025
  store i32 65538, ptr getelementptr inbounds ([801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 455, i32 2), align 4, !tbaa !70
  %1027 = load i32, ptr @ix86_isa_flags, align 4, !tbaa !20
  %1028 = and i32 %1027, 65538
  %1029 = icmp eq i32 %1028, 0
  br i1 %1029, label %1030, label %1035

1030:                                             ; preds = %1026
  %1031 = load ptr, ptr getelementptr inbounds (%struct.lang_hooks, ptr @lang_hooks, i64 0, i32 41), align 8, !tbaa !438
  %1032 = load ptr, ptr getelementptr inbounds (%struct.lang_hooks, ptr @lang_hooks, i64 0, i32 42), align 8, !tbaa !439
  %1033 = icmp eq ptr %1031, %1032
  br i1 %1033, label %1035, label %1034

1034:                                             ; preds = %1030
  store ptr null, ptr getelementptr inbounds ([801 x ptr], ptr @ix86_builtins, i64 0, i64 455), align 8, !tbaa !5
  store i32 194, ptr getelementptr inbounds ([801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 455, i32 1), align 16, !tbaa !73
  store ptr @.str.510, ptr getelementptr inbounds ([801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 455), align 8, !tbaa !74
  store i8 1, ptr getelementptr inbounds ([801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 455, i32 4), align 1, !tbaa !72
  br label %1055

1035:                                             ; preds = %1030, %1026
  %1036 = load ptr, ptr getelementptr inbounds ([271 x ptr], ptr @ix86_builtin_func_type_tab, i64 0, i64 194), align 16, !tbaa !5
  %1037 = icmp eq ptr %1036, null
  br i1 %1037, label %1038, label %1048

1038:                                             ; preds = %1035
  %1039 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 55), align 8, !tbaa !5
  %1040 = tail call fastcc ptr @ix86_get_builtin_type(i32 noundef 28)
  %1041 = tail call fastcc ptr @ix86_get_builtin_type(i32 noundef 12)
  %1042 = tail call ptr @tree_cons_stat(ptr noundef null, ptr noundef %1041, ptr noundef %1039) #30
  %1043 = tail call fastcc ptr @ix86_get_builtin_type(i32 noundef 4)
  %1044 = tail call ptr @tree_cons_stat(ptr noundef null, ptr noundef %1043, ptr noundef %1042) #30
  %1045 = tail call fastcc ptr @ix86_get_builtin_type(i32 noundef 28)
  %1046 = tail call ptr @tree_cons_stat(ptr noundef null, ptr noundef %1045, ptr noundef %1044) #30
  %1047 = tail call ptr @build_function_type(ptr noundef %1040, ptr noundef %1046) #30
  store ptr %1047, ptr getelementptr inbounds ([271 x ptr], ptr @ix86_builtin_func_type_tab, i64 0, i64 194), align 16, !tbaa !5
  br label %1048

1048:                                             ; preds = %1035, %1038
  %1049 = phi ptr [ %1047, %1038 ], [ %1036, %1035 ]
  %1050 = tail call ptr @add_builtin_function(ptr noundef nonnull @.str.510, ptr noundef %1049, i32 noundef 455, i32 noundef 2, ptr noundef null, ptr noundef null) #30
  store ptr %1050, ptr getelementptr inbounds ([801 x ptr], ptr @ix86_builtins, i64 0, i64 455), align 8, !tbaa !5
  store i8 0, ptr getelementptr inbounds ([801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 455, i32 4), align 1, !tbaa !72
  %1051 = icmp eq ptr %1050, null
  br i1 %1051, label %1055, label %1052

1052:                                             ; preds = %1048
  %1053 = load i64, ptr %1050, align 8
  %1054 = or i64 %1053, 1048576
  store i64 %1054, ptr %1050, align 8
  br label %1056

1055:                                             ; preds = %1048, %1034
  store i8 1, ptr getelementptr inbounds ([801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 455, i32 3), align 8, !tbaa !75
  br label %1056

1056:                                             ; preds = %1052, %1055
  store i32 524288, ptr getelementptr inbounds ([801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 456, i32 2), align 4, !tbaa !70
  %1057 = load i32, ptr @ix86_isa_flags, align 4, !tbaa !20
  %1058 = and i32 %1057, 524288
  %1059 = icmp eq i32 %1058, 0
  br i1 %1059, label %1060, label %1065

1060:                                             ; preds = %1056
  %1061 = load ptr, ptr getelementptr inbounds (%struct.lang_hooks, ptr @lang_hooks, i64 0, i32 41), align 8, !tbaa !438
  %1062 = load ptr, ptr getelementptr inbounds (%struct.lang_hooks, ptr @lang_hooks, i64 0, i32 42), align 8, !tbaa !439
  %1063 = icmp eq ptr %1061, %1062
  br i1 %1063, label %1065, label %1064

1064:                                             ; preds = %1060
  store ptr null, ptr getelementptr inbounds ([801 x ptr], ptr @ix86_builtins, i64 0, i64 456), align 16, !tbaa !5
  store i32 177, ptr getelementptr inbounds ([801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 456, i32 1), align 8, !tbaa !73
  store ptr @.str.511, ptr getelementptr inbounds ([801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 456), align 16, !tbaa !74
  store i8 1, ptr getelementptr inbounds ([801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 456, i32 4), align 1, !tbaa !72
  br label %1085

1065:                                             ; preds = %1060, %1056
  %1066 = load ptr, ptr getelementptr inbounds ([271 x ptr], ptr @ix86_builtin_func_type_tab, i64 0, i64 177), align 8, !tbaa !5
  %1067 = icmp eq ptr %1066, null
  br i1 %1067, label %1068, label %1078

1068:                                             ; preds = %1065
  %1069 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 55), align 8, !tbaa !5
  %1070 = tail call fastcc ptr @ix86_get_builtin_type(i32 noundef 35)
  %1071 = tail call fastcc ptr @ix86_get_builtin_type(i32 noundef 12)
  %1072 = tail call ptr @tree_cons_stat(ptr noundef null, ptr noundef %1071, ptr noundef %1069) #30
  %1073 = tail call fastcc ptr @ix86_get_builtin_type(i32 noundef 3)
  %1074 = tail call ptr @tree_cons_stat(ptr noundef null, ptr noundef %1073, ptr noundef %1072) #30
  %1075 = tail call fastcc ptr @ix86_get_builtin_type(i32 noundef 35)
  %1076 = tail call ptr @tree_cons_stat(ptr noundef null, ptr noundef %1075, ptr noundef %1074) #30
  %1077 = tail call ptr @build_function_type(ptr noundef %1070, ptr noundef %1076) #30
  store ptr %1077, ptr getelementptr inbounds ([271 x ptr], ptr @ix86_builtin_func_type_tab, i64 0, i64 177), align 8, !tbaa !5
  br label %1078

1078:                                             ; preds = %1065, %1068
  %1079 = phi ptr [ %1077, %1068 ], [ %1066, %1065 ]
  %1080 = tail call ptr @add_builtin_function(ptr noundef nonnull @.str.511, ptr noundef %1079, i32 noundef 456, i32 noundef 2, ptr noundef null, ptr noundef null) #30
  store ptr %1080, ptr getelementptr inbounds ([801 x ptr], ptr @ix86_builtins, i64 0, i64 456), align 16, !tbaa !5
  store i8 0, ptr getelementptr inbounds ([801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 456, i32 4), align 1, !tbaa !72
  %1081 = icmp eq ptr %1080, null
  br i1 %1081, label %1085, label %1082

1082:                                             ; preds = %1078
  %1083 = load i64, ptr %1080, align 8
  %1084 = or i64 %1083, 1048576
  store i64 %1084, ptr %1080, align 8
  br label %1086

1085:                                             ; preds = %1078, %1064
  store i8 1, ptr getelementptr inbounds ([801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 456, i32 3), align 16, !tbaa !75
  br label %1086

1086:                                             ; preds = %1082, %1085
  br label %1087

1087:                                             ; preds = %1086, %1129
  %1088 = phi i64 [ %1130, %1129 ], [ 0, %1086 ]
  %1089 = phi ptr [ %1131, %1129 ], [ @bdesc_multi_arg, %1086 ]
  %1090 = getelementptr inbounds %struct.builtin_description, ptr %1089, i64 0, i32 2
  %1091 = load ptr, ptr %1090, align 8, !tbaa !436
  %1092 = icmp eq ptr %1091, null
  br i1 %1092, label %1129, label %1093

1093:                                             ; preds = %1087
  %1094 = getelementptr inbounds %struct.builtin_description, ptr %1089, i64 0, i32 5
  %1095 = load i32, ptr %1094, align 8, !tbaa !355
  %1096 = load i32, ptr %1089, align 8, !tbaa !437
  %1097 = getelementptr inbounds %struct.builtin_description, ptr %1089, i64 0, i32 3
  %1098 = load i32, ptr %1097, align 8, !tbaa !356
  %1099 = and i32 %1096, 4
  %1100 = icmp eq i32 %1099, 0
  %1101 = sext i32 %1098 to i64
  br i1 %1100, label %1102, label %1127

1102:                                             ; preds = %1093
  %1103 = getelementptr inbounds [801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 %1101
  %1104 = getelementptr inbounds [801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 %1101, i32 2
  store i32 %1096, ptr %1104, align 4, !tbaa !70
  %1105 = icmp eq i32 %1096, 0
  br i1 %1105, label %1118, label %1106

1106:                                             ; preds = %1102
  %1107 = load i32, ptr @ix86_isa_flags, align 4, !tbaa !20
  %1108 = and i32 %1107, %1096
  %1109 = icmp eq i32 %1108, 0
  br i1 %1109, label %1110, label %1118

1110:                                             ; preds = %1106
  %1111 = load ptr, ptr getelementptr inbounds (%struct.lang_hooks, ptr @lang_hooks, i64 0, i32 41), align 8, !tbaa !438
  %1112 = load ptr, ptr getelementptr inbounds (%struct.lang_hooks, ptr @lang_hooks, i64 0, i32 42), align 8, !tbaa !439
  %1113 = icmp eq ptr %1111, %1112
  br i1 %1113, label %1118, label %1114

1114:                                             ; preds = %1110
  %1115 = getelementptr inbounds [801 x ptr], ptr @ix86_builtins, i64 0, i64 %1101
  store ptr null, ptr %1115, align 8, !tbaa !5
  %1116 = getelementptr inbounds [801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 %1101, i32 1
  store i32 %1095, ptr %1116, align 8, !tbaa !73
  store ptr %1091, ptr %1103, align 8, !tbaa !74
  %1117 = getelementptr inbounds [801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 %1101, i32 4
  store i8 1, ptr %1117, align 1, !tbaa !72
  br label %1127

1118:                                             ; preds = %1110, %1106, %1102
  %1119 = tail call fastcc ptr @ix86_get_builtin_func_type(i32 noundef %1095)
  %1120 = tail call ptr @add_builtin_function(ptr noundef nonnull %1091, ptr noundef %1119, i32 noundef %1098, i32 noundef 2, ptr noundef null, ptr noundef null) #30
  %1121 = getelementptr inbounds [801 x ptr], ptr @ix86_builtins, i64 0, i64 %1101
  store ptr %1120, ptr %1121, align 8, !tbaa !5
  %1122 = getelementptr inbounds [801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 %1101, i32 4
  store i8 0, ptr %1122, align 1, !tbaa !72
  %1123 = icmp eq ptr %1120, null
  br i1 %1123, label %1127, label %1124

1124:                                             ; preds = %1118
  %1125 = load i64, ptr %1120, align 8
  %1126 = or i64 %1125, 1048576
  store i64 %1126, ptr %1120, align 8
  br label %1129

1127:                                             ; preds = %1118, %1114, %1093
  %1128 = getelementptr inbounds [801 x %struct.builtin_isa], ptr @ix86_builtins_isa, i64 0, i64 %1101, i32 3
  store i8 1, ptr %1128, align 8, !tbaa !75
  br label %1129

1129:                                             ; preds = %1127, %1124, %1087
  %1130 = add nuw nsw i64 %1088, 1
  %1131 = getelementptr inbounds %struct.builtin_description, ptr %1089, i64 1
  %1132 = icmp eq i64 %1130, 172
  br i1 %1132, label %1133, label %1087, !llvm.loop !445

1133:                                             ; preds = %1129
  ret void
}

declare void @layout_type(ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc ptr @ix86_target_string(i32 noundef %0, i32 noundef %1) unnamed_addr #9 {
  %3 = alloca [47 x [2 x ptr]], align 16
  call void @llvm.lifetime.start.p0(i64 752, ptr nonnull %3) #30
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 16 dereferenceable(752) %3, i8 0, i64 752, i1 false)
  br label %4

4:                                                ; preds = %2, %20
  %5 = phi i64 [ 0, %2 ], [ %23, %20 ]
  %6 = phi i32 [ %0, %2 ], [ %22, %20 ]
  %7 = phi i32 [ 0, %2 ], [ %21, %20 ]
  %8 = getelementptr inbounds [21 x %struct.ix86_target_opts], ptr @ix86_target_string.isa_opts, i64 0, i64 %5, i32 1
  %9 = load i32, ptr %8, align 8, !tbaa !446
  %10 = and i32 %9, %6
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %20, label %12

12:                                               ; preds = %4
  %13 = getelementptr inbounds [21 x %struct.ix86_target_opts], ptr @ix86_target_string.isa_opts, i64 0, i64 %5
  %14 = load ptr, ptr %13, align 16, !tbaa !448
  %15 = add i32 %7, 1
  %16 = zext i32 %7 to i64
  %17 = getelementptr inbounds [47 x [2 x ptr]], ptr %3, i64 0, i64 %16
  store ptr %14, ptr %17, align 16, !tbaa !5
  %18 = xor i32 %9, -1
  %19 = and i32 %6, %18
  br label %20

20:                                               ; preds = %4, %12
  %21 = phi i32 [ %15, %12 ], [ %7, %4 ]
  %22 = phi i32 [ %19, %12 ], [ %6, %4 ]
  %23 = add nuw nsw i64 %5, 1
  %24 = icmp eq i64 %23, 21
  br i1 %24, label %25, label %4, !llvm.loop !449

25:                                               ; preds = %20, %41
  %26 = phi i64 [ %44, %41 ], [ 0, %20 ]
  %27 = phi i32 [ %43, %41 ], [ %21, %20 ]
  %28 = phi i32 [ %42, %41 ], [ %1, %20 ]
  %29 = getelementptr inbounds [20 x %struct.ix86_target_opts], ptr @ix86_target_string.flag_opts, i64 0, i64 %26, i32 1
  %30 = load i32, ptr %29, align 8, !tbaa !446
  %31 = and i32 %30, %28
  %32 = icmp eq i32 %31, 0
  br i1 %32, label %41, label %33

33:                                               ; preds = %25
  %34 = getelementptr inbounds [20 x %struct.ix86_target_opts], ptr @ix86_target_string.flag_opts, i64 0, i64 %26
  %35 = load ptr, ptr %34, align 16, !tbaa !448
  %36 = add i32 %27, 1
  %37 = zext i32 %27 to i64
  %38 = getelementptr inbounds [47 x [2 x ptr]], ptr %3, i64 0, i64 %37
  store ptr %35, ptr %38, align 16, !tbaa !5
  %39 = xor i32 %30, -1
  %40 = and i32 %28, %39
  br label %41

41:                                               ; preds = %25, %33
  %42 = phi i32 [ %40, %33 ], [ %28, %25 ]
  %43 = phi i32 [ %36, %33 ], [ %27, %25 ]
  %44 = add nuw nsw i64 %26, 1
  %45 = icmp eq i64 %44, 20
  br i1 %45, label %46, label %25, !llvm.loop !450

46:                                               ; preds = %41
  %47 = icmp eq i32 %43, 0
  br i1 %47, label %122, label %48

48:                                               ; preds = %46
  %49 = icmp ult i32 %43, 47
  br i1 %49, label %51, label %50

50:                                               ; preds = %48
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 2545, ptr noundef nonnull @.str.131) #30
  br label %51

51:                                               ; preds = %48, %50
  %52 = zext i32 %43 to i64
  br label %53

53:                                               ; preds = %51, %71
  %54 = phi i64 [ 0, %51 ], [ %73, %71 ]
  %55 = phi i64 [ 0, %51 ], [ %72, %71 ]
  %56 = add i64 %55, 1
  %57 = getelementptr inbounds [47 x [2 x ptr]], ptr %3, i64 0, i64 %54, i64 0
  %58 = load ptr, ptr %57, align 16, !tbaa !5
  %59 = icmp eq ptr %58, null
  br i1 %59, label %63, label %60

60:                                               ; preds = %53
  %61 = tail call i64 @strlen(ptr noundef nonnull dereferenceable(1) %58)
  %62 = add i64 %61, %56
  br label %63

63:                                               ; preds = %53, %60
  %64 = phi i64 [ %62, %60 ], [ %56, %53 ]
  %65 = getelementptr inbounds [47 x [2 x ptr]], ptr %3, i64 0, i64 %54, i64 1
  %66 = load ptr, ptr %65, align 8, !tbaa !5
  %67 = icmp eq ptr %66, null
  br i1 %67, label %71, label %68

68:                                               ; preds = %63
  %69 = tail call i64 @strlen(ptr noundef nonnull dereferenceable(1) %66)
  %70 = add i64 %69, %64
  br label %71

71:                                               ; preds = %68, %63
  %72 = phi i64 [ %70, %68 ], [ %64, %63 ]
  %73 = add nuw nsw i64 %54, 1
  %74 = icmp eq i64 %73, %52
  br i1 %74, label %75, label %53, !llvm.loop !451

75:                                               ; preds = %71
  %76 = tail call ptr @xmalloc(i64 noundef %72) #30
  %77 = load ptr, ptr %3, align 16, !tbaa !5
  %78 = icmp eq ptr %77, null
  br i1 %78, label %82, label %79

79:                                               ; preds = %75
  %80 = tail call i64 @strlen(ptr noundef nonnull dereferenceable(1) %77)
  tail call void @llvm.memcpy.p0.p0.i64(ptr align 1 %76, ptr nonnull align 1 %77, i64 %80, i1 false)
  %81 = getelementptr inbounds i8, ptr %76, i64 %80
  br label %82

82:                                               ; preds = %75, %79
  %83 = phi ptr [ %81, %79 ], [ %76, %75 ]
  %84 = icmp ult i32 %43, 2
  br i1 %84, label %117, label %85

85:                                               ; preds = %82, %113
  %86 = phi i64 [ %115, %113 ], [ 1, %82 ]
  %87 = phi ptr [ %114, %113 ], [ %83, %82 ]
  %88 = getelementptr inbounds [47 x [2 x ptr]], ptr %3, i64 0, i64 %86, i64 0
  %89 = load ptr, ptr %88, align 16, !tbaa !5
  %90 = icmp eq ptr %89, null
  br i1 %90, label %93, label %91

91:                                               ; preds = %85
  %92 = tail call i64 @strlen(ptr noundef nonnull dereferenceable(1) %89)
  br label %93

93:                                               ; preds = %85, %91
  %94 = phi i64 [ %92, %91 ], [ 0, %85 ]
  %95 = getelementptr inbounds [47 x [2 x ptr]], ptr %3, i64 0, i64 %86, i64 1
  %96 = load ptr, ptr %95, align 8, !tbaa !5
  %97 = icmp eq ptr %96, null
  br i1 %97, label %100, label %98

98:                                               ; preds = %93
  %99 = tail call i64 @strlen(ptr noundef nonnull dereferenceable(1) %96)
  br label %100

100:                                              ; preds = %98, %93
  %101 = phi i64 [ %99, %98 ], [ 0, %93 ]
  %102 = getelementptr inbounds i8, ptr %87, i64 1
  store i8 32, ptr %87, align 1, !tbaa !16
  %103 = load ptr, ptr %88, align 16, !tbaa !5
  %104 = icmp eq ptr %103, null
  br i1 %104, label %107, label %105

105:                                              ; preds = %100
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %102, ptr nonnull align 1 %103, i64 %94, i1 false)
  %106 = getelementptr inbounds i8, ptr %102, i64 %94
  br label %107

107:                                              ; preds = %100, %105
  %108 = phi ptr [ %106, %105 ], [ %102, %100 ]
  %109 = load ptr, ptr %95, align 8, !tbaa !5
  %110 = icmp eq ptr %109, null
  br i1 %110, label %113, label %111

111:                                              ; preds = %107
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %108, ptr nonnull align 1 %109, i64 %101, i1 false)
  %112 = getelementptr inbounds i8, ptr %108, i64 %101
  br label %113

113:                                              ; preds = %111, %107
  %114 = phi ptr [ %112, %111 ], [ %108, %107 ]
  %115 = add nuw nsw i64 %86, 1
  %116 = icmp eq i64 %115, %52
  br i1 %116, label %117, label %85, !llvm.loop !452

117:                                              ; preds = %113, %82
  %118 = phi ptr [ %83, %82 ], [ %114, %113 ]
  store i8 0, ptr %118, align 1, !tbaa !16
  %119 = getelementptr inbounds i8, ptr %76, i64 %72
  %120 = icmp ult ptr %119, %118
  br i1 %120, label %121, label %122

121:                                              ; preds = %117
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 2592, ptr noundef nonnull @.str.131) #30
  br label %122

122:                                              ; preds = %121, %117, %46
  %123 = phi ptr [ null, %46 ], [ %76, %117 ], [ %76, %121 ]
  call void @llvm.lifetime.end.p0(i64 752, ptr nonnull %3) #30
  ret ptr %123
}

declare ptr @gen_sse_ldmxcsr(ptr noundef) local_unnamed_addr #3

declare ptr @gen_sse_stmxcsr(ptr noundef) local_unnamed_addr #3

declare ptr @gen_sse2_clflush(ptr noundef) local_unnamed_addr #3

declare ptr @gen_sse3_mwait(ptr noundef, ptr noundef) local_unnamed_addr #3

declare void @real_inf(ptr noundef) local_unnamed_addr #3

declare ptr @gen_lwp_llwpcb(ptr noundef) local_unnamed_addr #3

declare ptr @gen_lwp_slwpcb(ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc ptr @ix86_expand_special_args_builtin(i32 %0, i32 %1, ptr nocapture noundef readonly %2, ptr noundef %3) unnamed_addr #9 {
  %5 = alloca [3 x %struct.anon.1], align 16
  call void @llvm.lifetime.start.p0(i64 48, ptr nonnull %5) #30
  %6 = zext i32 %0 to i64
  %7 = getelementptr inbounds [0 x %struct.insn_data], ptr @insn_data, i64 0, i64 %6, i32 3
  %8 = load ptr, ptr %7, align 8, !tbaa !340
  %9 = getelementptr inbounds %struct.insn_operand_data, ptr %8, i64 0, i32 2
  %10 = load i16, ptr %9, align 8
  %11 = zext i16 %10 to i32
  switch i32 %1, label %22 [
    i32 3, label %12
    i32 1, label %33
    i32 19, label %17
    i32 28, label %17
    i32 39, label %17
    i32 20, label %17
    i32 64, label %17
    i32 63, label %17
    i32 47, label %17
    i32 41, label %17
    i32 40, label %17
    i32 22, label %17
    i32 71, label %17
    i32 170, label %23
    i32 171, label %23
    i32 169, label %23
    i32 162, label %23
    i32 161, label %23
    i32 166, label %23
    i32 165, label %23
    i32 164, label %23
    i32 163, label %23
    i32 168, label %23
    i32 167, label %23
    i32 136, label %18
    i32 105, label %18
    i32 157, label %19
    i32 124, label %19
    i32 133, label %19
    i32 102, label %19
    i32 218, label %20
    i32 216, label %20
    i32 217, label %20
    i32 215, label %20
    i32 219, label %21
    i32 220, label %21
    i32 174, label %21
    i32 175, label %21
  ]

12:                                               ; preds = %4
  %13 = getelementptr inbounds [0 x %struct.insn_data], ptr @insn_data, i64 0, i64 %6, i32 2
  %14 = load ptr, ptr %13, align 8, !tbaa !344
  %15 = tail call ptr (ptr, ...) %14(ptr noundef %3) #30
  %16 = tail call ptr @emit_insn(ptr noundef %15) #30
  br label %161

17:                                               ; preds = %4, %4, %4, %4, %4, %4, %4, %4, %4, %4, %4
  br label %33

18:                                               ; preds = %4, %4
  br label %33

19:                                               ; preds = %4, %4, %4, %4
  br label %33

20:                                               ; preds = %4, %4, %4, %4
  br label %23

21:                                               ; preds = %4, %4, %4, %4
  br label %33

22:                                               ; preds = %4
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 23916, ptr noundef nonnull @.str.131) #30
  br label %23

23:                                               ; preds = %4, %4, %4, %4, %4, %4, %4, %4, %4, %4, %4, %22, %20
  %24 = phi i32 [ undef, %22 ], [ 2, %20 ], [ 1, %4 ], [ 1, %4 ], [ 1, %4 ], [ 1, %4 ], [ 1, %4 ], [ 1, %4 ], [ 1, %4 ], [ 1, %4 ], [ 1, %4 ], [ 1, %4 ], [ 1, %4 ]
  %25 = getelementptr inbounds %struct.tree_exp, ptr %2, i64 1, i32 0, i32 2
  %26 = load ptr, ptr %25, align 8, !tbaa !16
  %27 = tail call ptr @expand_expr_real(ptr noundef %26, ptr noundef null, i32 noundef 0, i32 noundef 0, ptr noundef null) #30
  %28 = icmp eq ptr %3, null
  br i1 %28, label %30, label %29

29:                                               ; preds = %23
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 23925, ptr noundef nonnull @.str.131) #30
  br label %30

30:                                               ; preds = %29, %23
  %31 = tail call ptr @copy_to_mode_reg(i32 noundef 16, ptr noundef %27) #30
  %32 = tail call ptr @gen_rtx_MEM(i32 noundef %11, ptr noundef %31) #30
  br label %55

33:                                               ; preds = %21, %19, %18, %17, %4
  %34 = phi i1 [ true, %4 ], [ false, %17 ], [ false, %18 ], [ false, %19 ], [ false, %21 ]
  %35 = phi i32 [ 0, %4 ], [ 1, %17 ], [ 2, %18 ], [ 2, %19 ], [ 3, %21 ]
  %36 = phi i64 [ 0, %4 ], [ 0, %17 ], [ 1, %18 ], [ 0, %19 ], [ 3, %21 ]
  %37 = phi i1 [ true, %4 ], [ true, %17 ], [ true, %18 ], [ true, %19 ], [ false, %21 ]
  %38 = load i32, ptr @optimize, align 4, !tbaa !20
  %39 = icmp ne i32 %38, 0
  %40 = icmp eq ptr %3, null
  %41 = or i1 %40, %39
  br i1 %41, label %51, label %42

42:                                               ; preds = %33
  %43 = load i32, ptr %3, align 8
  %44 = lshr i32 %43, 16
  %45 = and i32 %44, 255
  %46 = icmp eq i32 %45, %11
  br i1 %46, label %47, label %51

47:                                               ; preds = %42
  %48 = load ptr, ptr %8, align 8, !tbaa !342
  %49 = tail call i32 %48(ptr noundef nonnull %3, i32 noundef %11) #30
  %50 = icmp eq i32 %49, 0
  br i1 %50, label %51, label %53

51:                                               ; preds = %47, %42, %33
  %52 = tail call ptr @gen_reg_rtx(i32 noundef %11) #30
  br label %53

53:                                               ; preds = %47, %51
  %54 = phi ptr [ %3, %47 ], [ %52, %51 ]
  br i1 %34, label %127, label %55

55:                                               ; preds = %30, %53
  %56 = phi ptr [ %32, %30 ], [ %54, %53 ]
  %57 = phi i64 [ 4, %30 ], [ 3, %53 ]
  %58 = phi ptr [ null, %30 ], [ %54, %53 ]
  %59 = phi i32 [ %24, %30 ], [ %35, %53 ]
  %60 = phi i64 [ 3, %30 ], [ %36, %53 ]
  %61 = phi i1 [ true, %30 ], [ %37, %53 ]
  %62 = zext i32 %59 to i64
  %63 = and i64 %60, 4294967295
  br label %64

64:                                               ; preds = %55, %122
  %65 = phi i64 [ 0, %55 ], [ %66, %122 ]
  %66 = add nuw nsw i64 %65, 1
  %67 = getelementptr inbounds %struct.insn_operand_data, ptr %8, i64 %66, i32 2
  %68 = load i16, ptr %67, align 8
  %69 = zext i16 %68 to i32
  %70 = add nuw nsw i64 %57, %65
  %71 = getelementptr inbounds %struct.tree_exp, ptr %2, i64 0, i32 3, i64 %70
  %72 = load ptr, ptr %71, align 8, !tbaa !16
  %73 = tail call ptr @expand_expr_real(ptr noundef %72, ptr noundef null, i32 noundef 0, i32 noundef 0, ptr noundef null) #30
  %74 = getelementptr inbounds %struct.insn_operand_data, ptr %8, i64 %66
  %75 = load ptr, ptr %74, align 8, !tbaa !342
  %76 = tail call i32 %75(ptr noundef %73, i32 noundef %69) #30
  %77 = icmp ne i64 %66, %62
  %78 = or i1 %61, %77
  br i1 %78, label %87, label %79

79:                                               ; preds = %64
  %80 = and i32 %76, 255
  %81 = icmp eq i32 %80, 0
  br i1 %81, label %82, label %122

82:                                               ; preds = %79
  switch i32 %0, label %83 [
    i32 2956, label %84
    i32 2495, label %84
    i32 2494, label %84
  ]

83:                                               ; preds = %82
  br label %84

84:                                               ; preds = %82, %82, %82, %83
  %85 = phi ptr [ @.str.1340, %83 ], [ @.str.1339, %82 ], [ @.str.1339, %82 ], [ @.str.1339, %82 ]
  tail call void (ptr, ...) @error(ptr noundef nonnull %85) #30
  %86 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 64), align 16, !tbaa !5
  br label %161

87:                                               ; preds = %64
  %88 = icmp eq i64 %65, %63
  br i1 %88, label %89, label %99

89:                                               ; preds = %87
  %90 = tail call ptr @copy_to_mode_reg(i32 noundef 16, ptr noundef %73) #30
  %91 = tail call ptr @gen_rtx_MEM(i32 noundef %69, ptr noundef %90) #30
  %92 = load i32, ptr %91, align 8
  %93 = lshr i32 %92, 16
  %94 = and i32 %93, 255
  %95 = icmp eq i32 %94, %69
  %96 = icmp eq i32 %94, 0
  %97 = or i1 %95, %96
  br i1 %97, label %122, label %98

98:                                               ; preds = %89
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 23969, ptr noundef nonnull @.str.131) #30
  br label %122

99:                                               ; preds = %87
  %100 = zext i16 %68 to i64
  %101 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %100
  %102 = load i8, ptr %101, align 1, !tbaa !16
  %103 = add i8 %102, -12
  %104 = icmp ult i8 %103, 6
  %105 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 64), align 16
  %106 = icmp eq ptr %105, %73
  %107 = select i1 %104, i1 %106, i1 false
  br i1 %107, label %108, label %111

108:                                              ; preds = %99
  %109 = getelementptr inbounds [87 x ptr], ptr @const_tiny_rtx, i64 0, i64 %100
  %110 = load ptr, ptr %109, align 8, !tbaa !5
  br label %111

111:                                              ; preds = %108, %99
  %112 = phi ptr [ %73, %99 ], [ %110, %108 ]
  %113 = load i32, ptr %112, align 8
  %114 = lshr i32 %113, 16
  %115 = and i32 %114, 255
  %116 = icmp eq i32 %115, %69
  %117 = icmp eq i32 %115, 0
  %118 = or i1 %116, %117
  br i1 %118, label %120, label %119

119:                                              ; preds = %111
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 23978, ptr noundef nonnull @.str.131) #30
  br label %120

120:                                              ; preds = %111, %119
  %121 = tail call ptr @copy_to_mode_reg(i32 noundef %69, ptr noundef nonnull %112) #30
  br label %122

122:                                              ; preds = %79, %98, %89, %120
  %123 = phi ptr [ %73, %79 ], [ %91, %89 ], [ %91, %98 ], [ %121, %120 ]
  %124 = getelementptr inbounds [3 x %struct.anon.1], ptr %5, i64 0, i64 %65
  store ptr %123, ptr %124, align 16, !tbaa !453
  %125 = getelementptr inbounds [3 x %struct.anon.1], ptr %5, i64 0, i64 %65, i32 1
  store i32 %69, ptr %125, align 8, !tbaa !455
  br i1 %77, label %64, label %126, !llvm.loop !456

126:                                              ; preds = %122
  switch i32 %59, label %154 [
    i32 0, label %127
    i32 1, label %133
    i32 2, label %138
    i32 3, label %145
  ]

127:                                              ; preds = %53, %126
  %128 = phi ptr [ %58, %126 ], [ %54, %53 ]
  %129 = phi ptr [ %56, %126 ], [ %54, %53 ]
  %130 = getelementptr inbounds [0 x %struct.insn_data], ptr @insn_data, i64 0, i64 %6, i32 2
  %131 = load ptr, ptr %130, align 8, !tbaa !344
  %132 = tail call ptr (ptr, ...) %131(ptr noundef %129) #30
  br label %155

133:                                              ; preds = %126
  %134 = getelementptr inbounds [0 x %struct.insn_data], ptr @insn_data, i64 0, i64 %6, i32 2
  %135 = load ptr, ptr %134, align 8, !tbaa !344
  %136 = load ptr, ptr %5, align 16, !tbaa !453
  %137 = tail call ptr (ptr, ...) %135(ptr noundef %56, ptr noundef %136) #30
  br label %155

138:                                              ; preds = %126
  %139 = getelementptr inbounds [0 x %struct.insn_data], ptr @insn_data, i64 0, i64 %6, i32 2
  %140 = load ptr, ptr %139, align 8, !tbaa !344
  %141 = load ptr, ptr %5, align 16, !tbaa !453
  %142 = getelementptr inbounds [3 x %struct.anon.1], ptr %5, i64 0, i64 1
  %143 = load ptr, ptr %142, align 16, !tbaa !453
  %144 = tail call ptr (ptr, ...) %140(ptr noundef %56, ptr noundef %141, ptr noundef %143) #30
  br label %155

145:                                              ; preds = %126
  %146 = getelementptr inbounds [0 x %struct.insn_data], ptr @insn_data, i64 0, i64 %6, i32 2
  %147 = load ptr, ptr %146, align 8, !tbaa !344
  %148 = load ptr, ptr %5, align 16, !tbaa !453
  %149 = getelementptr inbounds [3 x %struct.anon.1], ptr %5, i64 0, i64 1
  %150 = load ptr, ptr %149, align 16, !tbaa !453
  %151 = getelementptr inbounds [3 x %struct.anon.1], ptr %5, i64 0, i64 2
  %152 = load ptr, ptr %151, align 16, !tbaa !453
  %153 = tail call ptr (ptr, ...) %147(ptr noundef %56, ptr noundef %148, ptr noundef %150, ptr noundef %152) #30
  br label %155

154:                                              ; preds = %126
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 24002, ptr noundef nonnull @.str.131) #30
  unreachable

155:                                              ; preds = %145, %138, %133, %127
  %156 = phi ptr [ %58, %145 ], [ %58, %138 ], [ %58, %133 ], [ %128, %127 ]
  %157 = phi ptr [ %153, %145 ], [ %144, %138 ], [ %137, %133 ], [ %132, %127 ]
  %158 = icmp eq ptr %157, null
  br i1 %158, label %161, label %159

159:                                              ; preds = %155
  %160 = tail call ptr @emit_insn(ptr noundef nonnull %157) #30
  br label %161

161:                                              ; preds = %84, %155, %159, %12
  %162 = phi ptr [ %156, %159 ], [ null, %12 ], [ null, %155 ], [ %86, %84 ]
  call void @llvm.lifetime.end.p0(i64 48, ptr nonnull %5) #30
  ret ptr %162
}

declare ptr @expand_call(ptr noundef, ptr noundef, i32 noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc ptr @ix86_expand_args_builtin(ptr nocapture noundef readonly %0, ptr nocapture noundef readonly %1, ptr noundef %2) unnamed_addr #9 {
  %4 = alloca [4 x %struct.anon.2], align 16
  call void @llvm.lifetime.start.p0(i64 64, ptr nonnull %4) #30
  %5 = getelementptr inbounds %struct.builtin_description, ptr %0, i64 0, i32 1
  %6 = load i32, ptr %5, align 4, !tbaa !353
  %7 = zext i32 %6 to i64
  %8 = getelementptr inbounds [0 x %struct.insn_data], ptr @insn_data, i64 0, i64 %7, i32 3
  %9 = load ptr, ptr %8, align 8, !tbaa !340
  %10 = getelementptr inbounds %struct.insn_operand_data, ptr %9, i64 0, i32 2
  %11 = load i16, ptr %10, align 8
  %12 = zext i16 %11 to i32
  %13 = getelementptr inbounds %struct.builtin_description, ptr %0, i64 0, i32 4
  %14 = load i32, ptr %13, align 4, !tbaa !358
  %15 = getelementptr inbounds %struct.builtin_description, ptr %0, i64 0, i32 5
  %16 = load i32, ptr %15, align 8, !tbaa !355
  switch i32 %16, label %228 [
    i32 241, label %17
    i32 239, label %17
    i32 238, label %17
    i32 240, label %17
    i32 237, label %17
    i32 236, label %17
    i32 6, label %229
    i32 5, label %229
    i32 7, label %229
    i32 17, label %229
    i32 18, label %229
    i32 14, label %229
    i32 16, label %229
    i32 15, label %229
    i32 8, label %229
    i32 12, label %229
    i32 13, label %229
    i32 10, label %229
    i32 11, label %229
    i32 9, label %229
    i32 21, label %229
    i32 69, label %229
    i32 68, label %229
    i32 61, label %229
    i32 60, label %229
    i32 62, label %229
    i32 66, label %229
    i32 67, label %229
    i32 65, label %229
    i32 57, label %229
    i32 53, label %229
    i32 56, label %229
    i32 59, label %229
    i32 58, label %229
    i32 55, label %229
    i32 54, label %229
    i32 46, label %229
    i32 43, label %229
    i32 45, label %229
    i32 44, label %229
    i32 42, label %229
    i32 50, label %229
    i32 51, label %229
    i32 52, label %229
    i32 49, label %229
    i32 48, label %229
    i32 30, label %229
    i32 29, label %229
    i32 32, label %229
    i32 31, label %229
    i32 23, label %229
    i32 27, label %229
    i32 25, label %229
    i32 26, label %229
    i32 24, label %229
    i32 37, label %229
    i32 38, label %229
    i32 36, label %229
    i32 35, label %229
    i32 33, label %229
    i32 34, label %229
    i32 243, label %116
    i32 242, label %116
    i32 76, label %120
    i32 96, label %120
    i32 97, label %120
    i32 156, label %120
    i32 155, label %120
    i32 154, label %120
    i32 150, label %120
    i32 151, label %120
    i32 159, label %120
    i32 160, label %120
    i32 147, label %120
    i32 148, label %120
    i32 144, label %120
    i32 143, label %120
    i32 131, label %120
    i32 132, label %120
    i32 128, label %120
    i32 126, label %120
    i32 127, label %120
    i32 140, label %120
    i32 141, label %120
    i32 139, label %120
    i32 138, label %120
    i32 134, label %120
    i32 137, label %120
    i32 116, label %120
    i32 111, label %120
    i32 117, label %120
    i32 115, label %120
    i32 112, label %120
    i32 122, label %120
    i32 123, label %120
    i32 120, label %120
    i32 107, label %120
    i32 109, label %120
    i32 108, label %120
    i32 103, label %120
    i32 106, label %120
    i32 118, label %120
    i32 99, label %120
    i32 101, label %120
    i32 100, label %120
    i32 257, label %214
    i32 256, label %214
    i32 255, label %217
    i32 249, label %217
    i32 254, label %217
    i32 248, label %217
    i32 253, label %217
    i32 247, label %217
    i32 251, label %217
    i32 245, label %217
    i32 252, label %217
    i32 246, label %217
    i32 250, label %217
    i32 244, label %217
    i32 93, label %218
    i32 90, label %218
    i32 91, label %218
    i32 89, label %218
    i32 92, label %218
    i32 94, label %218
    i32 258, label %219
    i32 152, label %220
    i32 158, label %220
    i32 145, label %220
    i32 149, label %220
    i32 129, label %220
    i32 125, label %220
    i32 135, label %220
    i32 142, label %220
    i32 113, label %220
    i32 104, label %220
    i32 110, label %220
    i32 179, label %221
    i32 209, label %221
    i32 191, label %221
    i32 197, label %221
    i32 182, label %221
    i32 178, label %222
    i32 204, label %222
    i32 212, label %222
    i32 211, label %222
    i32 208, label %222
    i32 207, label %222
    i32 200, label %222
    i32 190, label %222
    i32 189, label %222
    i32 196, label %222
    i32 186, label %222
    i32 181, label %222
    i32 259, label %223
    i32 260, label %224
    i32 185, label %225
    i32 183, label %226
    i32 192, label %226
    i32 198, label %226
    i32 210, label %226
    i32 231, label %227
  ]

17:                                               ; preds = %3, %3, %3, %3, %3, %3
  %18 = getelementptr i8, ptr %1, i64 64
  %19 = load ptr, ptr %18, align 8, !tbaa !16
  %20 = getelementptr i8, ptr %1, i64 72
  %21 = load ptr, ptr %20, align 8, !tbaa !16
  %22 = tail call ptr @expand_expr_real(ptr noundef %19, ptr noundef null, i32 noundef 0, i32 noundef 0, ptr noundef null) #30
  %23 = tail call ptr @expand_expr_real(ptr noundef %21, ptr noundef null, i32 noundef 0, i32 noundef 0, ptr noundef null) #30
  %24 = load i32, ptr %5, align 4, !tbaa !353
  %25 = zext i32 %24 to i64
  %26 = getelementptr inbounds [0 x %struct.insn_data], ptr @insn_data, i64 0, i64 %25, i32 3
  %27 = load ptr, ptr %26, align 8, !tbaa !340
  %28 = getelementptr inbounds %struct.insn_operand_data, ptr %27, i64 0, i32 2
  %29 = load i16, ptr %28, align 8
  %30 = zext i16 %29 to i32
  %31 = getelementptr inbounds %struct.insn_operand_data, ptr %27, i64 1, i32 2
  %32 = load i16, ptr %31, align 8
  %33 = zext i16 %32 to i32
  %34 = load i32, ptr %13, align 4, !tbaa !358
  %35 = zext i16 %29 to i64
  %36 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %35
  %37 = load i8, ptr %36, align 1, !tbaa !16
  %38 = add i8 %37, -12
  %39 = icmp ult i8 %38, 6
  %40 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 64), align 16
  %41 = icmp eq ptr %40, %22
  %42 = select i1 %39, i1 %41, i1 false
  br i1 %42, label %43, label %46

43:                                               ; preds = %17
  %44 = getelementptr inbounds [87 x ptr], ptr @const_tiny_rtx, i64 0, i64 %35
  %45 = load ptr, ptr %44, align 8, !tbaa !5
  br label %46

46:                                               ; preds = %43, %17
  %47 = phi ptr [ %22, %17 ], [ %45, %43 ]
  %48 = zext i16 %32 to i64
  %49 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %48
  %50 = load i8, ptr %49, align 1, !tbaa !16
  %51 = add i8 %50, -12
  %52 = icmp ult i8 %51, 6
  %53 = icmp eq ptr %40, %23
  %54 = select i1 %52, i1 %53, i1 false
  br i1 %54, label %55, label %58

55:                                               ; preds = %46
  %56 = getelementptr inbounds [87 x ptr], ptr @const_tiny_rtx, i64 0, i64 %48
  %57 = load ptr, ptr %56, align 8, !tbaa !5
  br label %58

58:                                               ; preds = %55, %46
  %59 = phi ptr [ %23, %46 ], [ %57, %55 ]
  %60 = tail call ptr @gen_reg_rtx(i32 noundef 16) #30
  %61 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 64), align 16, !tbaa !5
  %62 = tail call ptr @emit_move_insn(ptr noundef %60, ptr noundef %61) #30
  %63 = tail call ptr @gen_rtx_SUBREG(i32 noundef 14, ptr noundef %60, i32 noundef 0) #30
  %64 = load i32, ptr @optimize, align 4, !tbaa !20
  %65 = icmp eq i32 %64, 0
  br i1 %65, label %69, label %66

66:                                               ; preds = %58
  %67 = tail call i32 @register_operand(ptr noundef %47, i32 noundef %30) #30
  %68 = icmp eq i32 %67, 0
  br i1 %68, label %77, label %69

69:                                               ; preds = %66, %58
  %70 = load i32, ptr %5, align 4, !tbaa !353
  %71 = zext i32 %70 to i64
  %72 = getelementptr inbounds [0 x %struct.insn_data], ptr @insn_data, i64 0, i64 %71, i32 3
  %73 = load ptr, ptr %72, align 8, !tbaa !340
  %74 = load ptr, ptr %73, align 8, !tbaa !342
  %75 = tail call i32 %74(ptr noundef %47, i32 noundef %30) #30
  %76 = icmp eq i32 %75, 0
  br i1 %76, label %77, label %79

77:                                               ; preds = %69, %66
  %78 = tail call ptr @copy_to_mode_reg(i32 noundef %30, ptr noundef %47) #30
  br label %79

79:                                               ; preds = %77, %69
  %80 = phi ptr [ %47, %69 ], [ %78, %77 ]
  %81 = load i32, ptr @optimize, align 4, !tbaa !20
  %82 = icmp eq i32 %81, 0
  br i1 %82, label %86, label %83

83:                                               ; preds = %79
  %84 = tail call i32 @register_operand(ptr noundef %59, i32 noundef %33) #30
  %85 = icmp eq i32 %84, 0
  br i1 %85, label %95, label %86

86:                                               ; preds = %83, %79
  %87 = load i32, ptr %5, align 4, !tbaa !353
  %88 = zext i32 %87 to i64
  %89 = getelementptr inbounds [0 x %struct.insn_data], ptr @insn_data, i64 0, i64 %88, i32 3
  %90 = load ptr, ptr %89, align 8, !tbaa !340
  %91 = getelementptr inbounds %struct.insn_operand_data, ptr %90, i64 1
  %92 = load ptr, ptr %91, align 8, !tbaa !342
  %93 = tail call i32 %92(ptr noundef %59, i32 noundef %33) #30
  %94 = icmp eq i32 %93, 0
  br i1 %94, label %95, label %97

95:                                               ; preds = %86, %83
  %96 = tail call ptr @copy_to_mode_reg(i32 noundef %33, ptr noundef %59) #30
  br label %97

97:                                               ; preds = %95, %86
  %98 = phi ptr [ %59, %86 ], [ %96, %95 ]
  %99 = load i32, ptr %5, align 4, !tbaa !353
  %100 = zext i32 %99 to i64
  %101 = getelementptr inbounds [0 x %struct.insn_data], ptr @insn_data, i64 0, i64 %100, i32 2
  %102 = load ptr, ptr %101, align 8, !tbaa !344
  %103 = tail call ptr (ptr, ...) %102(ptr noundef %80, ptr noundef %98) #30
  %104 = icmp eq ptr %103, null
  br i1 %104, label %525, label %105

105:                                              ; preds = %97
  %106 = tail call ptr @emit_insn(ptr noundef nonnull %103) #30
  %107 = tail call ptr @gen_rtx_fmt_e_stat(i32 noundef 40, i32 noundef 0, ptr noundef %63) #30
  %108 = getelementptr inbounds %struct.rtx_def, ptr %103, i64 0, i32 1
  %109 = load ptr, ptr %108, align 8, !tbaa !16
  %110 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 64), align 16, !tbaa !5
  %111 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef %34, i32 noundef 14, ptr noundef %109, ptr noundef %110) #30
  %112 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 23, i32 noundef 0, ptr noundef %107, ptr noundef %111) #30
  %113 = tail call ptr @emit_insn(ptr noundef %112) #30
  %114 = getelementptr inbounds %struct.rtx_def, ptr %63, i64 0, i32 1
  %115 = load ptr, ptr %114, align 8, !tbaa !16
  br label %525

116:                                              ; preds = %3, %3
  %117 = getelementptr i8, ptr %1, i64 64
  %118 = load ptr, ptr %117, align 8, !tbaa !16
  %119 = tail call fastcc ptr @ix86_expand_unop_vec_merge_builtin(i32 noundef %6, ptr %118, ptr noundef %2)
  br label %525

120:                                              ; preds = %3, %3, %3, %3, %3, %3, %3, %3, %3, %3, %3, %3, %3, %3, %3, %3, %3, %3, %3, %3, %3, %3, %3, %3, %3, %3, %3, %3, %3, %3, %3, %3, %3, %3, %3, %3, %3, %3, %3, %3, %3, %3
  %121 = icmp eq i32 %14, 0
  br i1 %121, label %122, label %239

122:                                              ; preds = %120
  %123 = getelementptr i8, ptr %1, i64 64
  %124 = load ptr, ptr %123, align 8, !tbaa !16
  %125 = getelementptr i8, ptr %1, i64 72
  %126 = load ptr, ptr %125, align 8, !tbaa !16
  %127 = tail call ptr @expand_expr_real(ptr noundef %124, ptr noundef null, i32 noundef 0, i32 noundef 0, ptr noundef null) #30
  %128 = tail call ptr @expand_expr_real(ptr noundef %126, ptr noundef null, i32 noundef 0, i32 noundef 0, ptr noundef null) #30
  %129 = load i16, ptr %10, align 8
  %130 = zext i16 %129 to i32
  %131 = getelementptr inbounds %struct.insn_operand_data, ptr %9, i64 1, i32 2
  %132 = load i16, ptr %131, align 8
  %133 = zext i16 %132 to i32
  %134 = getelementptr inbounds %struct.insn_operand_data, ptr %9, i64 2, i32 2
  %135 = load i16, ptr %134, align 8
  %136 = zext i16 %135 to i32
  %137 = zext i16 %132 to i64
  %138 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %137
  %139 = load i8, ptr %138, align 1, !tbaa !16
  %140 = add i8 %139, -12
  %141 = icmp ult i8 %140, 6
  %142 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 64), align 16
  %143 = icmp eq ptr %142, %127
  %144 = select i1 %141, i1 %143, i1 false
  br i1 %144, label %145, label %148

145:                                              ; preds = %122
  %146 = getelementptr inbounds [87 x ptr], ptr @const_tiny_rtx, i64 0, i64 %137
  %147 = load ptr, ptr %146, align 8, !tbaa !5
  br label %148

148:                                              ; preds = %145, %122
  %149 = phi ptr [ %127, %122 ], [ %147, %145 ]
  %150 = zext i16 %135 to i64
  %151 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %150
  %152 = load i8, ptr %151, align 1, !tbaa !16
  %153 = add i8 %152, -12
  %154 = icmp ult i8 %153, 6
  %155 = icmp eq ptr %142, %128
  %156 = select i1 %154, i1 %155, i1 false
  br i1 %156, label %157, label %160

157:                                              ; preds = %148
  %158 = getelementptr inbounds [87 x ptr], ptr @const_tiny_rtx, i64 0, i64 %150
  %159 = load ptr, ptr %158, align 8, !tbaa !5
  br label %160

160:                                              ; preds = %157, %148
  %161 = phi ptr [ %128, %148 ], [ %159, %157 ]
  %162 = load i32, ptr @optimize, align 4, !tbaa !20
  %163 = icmp eq i32 %162, 0
  %164 = icmp ne ptr %2, null
  %165 = and i1 %164, %163
  br i1 %165, label %166, label %175

166:                                              ; preds = %160
  %167 = load i32, ptr %2, align 8
  %168 = lshr i32 %167, 16
  %169 = and i32 %168, 255
  %170 = icmp eq i32 %169, %130
  br i1 %170, label %171, label %175

171:                                              ; preds = %166
  %172 = load ptr, ptr %9, align 8, !tbaa !342
  %173 = tail call i32 %172(ptr noundef nonnull %2, i32 noundef %130) #30
  %174 = icmp eq i32 %173, 0
  br i1 %174, label %175, label %177

175:                                              ; preds = %171, %166, %160
  %176 = tail call ptr @gen_reg_rtx(i32 noundef %130) #30
  br label %177

177:                                              ; preds = %175, %171
  %178 = phi ptr [ %176, %175 ], [ %2, %171 ]
  %179 = load i32, ptr %161, align 8
  %180 = and i32 %179, 16711680
  %181 = icmp eq i32 %180, 1048576
  %182 = icmp eq i16 %135, 18
  %183 = select i1 %181, i1 %182, i1 false
  br i1 %183, label %184, label %190

184:                                              ; preds = %177
  %185 = tail call ptr @gen_reg_rtx(i32 noundef 65) #30
  %186 = tail call ptr @gen_sse2_loadd(ptr noundef %185, ptr noundef nonnull %161) #30
  %187 = tail call ptr @emit_insn(ptr noundef %186) #30
  %188 = load ptr, ptr @rtl_hooks, align 8, !tbaa !187
  %189 = tail call ptr %188(i32 noundef 18, ptr noundef %185) #30
  br label %190

190:                                              ; preds = %184, %177
  %191 = phi ptr [ %189, %184 ], [ %161, %177 ]
  %192 = getelementptr inbounds %struct.insn_operand_data, ptr %9, i64 1
  %193 = load ptr, ptr %192, align 8, !tbaa !342
  %194 = tail call i32 %193(ptr noundef %149, i32 noundef %133) #30
  %195 = icmp eq i32 %194, 0
  br i1 %195, label %196, label %198

196:                                              ; preds = %190
  %197 = tail call ptr @copy_to_mode_reg(i32 noundef %133, ptr noundef %149) #30
  br label %198

198:                                              ; preds = %196, %190
  %199 = phi ptr [ %149, %190 ], [ %197, %196 ]
  %200 = getelementptr inbounds %struct.insn_operand_data, ptr %9, i64 2
  %201 = load ptr, ptr %200, align 8, !tbaa !342
  %202 = tail call i32 %201(ptr noundef %191, i32 noundef %136) #30
  %203 = icmp eq i32 %202, 0
  br i1 %203, label %204, label %206

204:                                              ; preds = %198
  %205 = tail call ptr @copy_to_mode_reg(i32 noundef %136, ptr noundef %191) #30
  br label %206

206:                                              ; preds = %204, %198
  %207 = phi ptr [ %191, %198 ], [ %205, %204 ]
  %208 = getelementptr inbounds [0 x %struct.insn_data], ptr @insn_data, i64 0, i64 %7, i32 2
  %209 = load ptr, ptr %208, align 8, !tbaa !344
  %210 = tail call ptr (ptr, ...) %209(ptr noundef %178, ptr noundef %199, ptr noundef %207) #30
  %211 = icmp eq ptr %210, null
  br i1 %211, label %525, label %212

212:                                              ; preds = %206
  %213 = tail call ptr @emit_insn(ptr noundef nonnull %210) #30
  br label %525

214:                                              ; preds = %3, %3
  %215 = icmp eq i32 %14, 0
  br i1 %215, label %216, label %239

216:                                              ; preds = %214
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 23567, ptr noundef nonnull @.str.131) #30
  br label %361

217:                                              ; preds = %3, %3, %3, %3, %3, %3, %3, %3, %3, %3, %3, %3
  br label %229

218:                                              ; preds = %3, %3, %3, %3, %3, %3
  br label %229

219:                                              ; preds = %3
  br label %229

220:                                              ; preds = %3, %3, %3, %3, %3, %3, %3, %3, %3, %3, %3
  br label %229

221:                                              ; preds = %3, %3, %3, %3, %3
  br label %229

222:                                              ; preds = %3, %3, %3, %3, %3, %3, %3, %3, %3, %3, %3, %3
  br label %229

223:                                              ; preds = %3
  br label %229

224:                                              ; preds = %3
  br label %229

225:                                              ; preds = %3
  br label %229

226:                                              ; preds = %3, %3, %3, %3
  br label %229

227:                                              ; preds = %3
  br label %229

228:                                              ; preds = %3
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 23661, ptr noundef nonnull @.str.131) #30
  br label %229

229:                                              ; preds = %217, %218, %219, %220, %221, %222, %223, %224, %225, %226, %227, %228, %3, %3, %3, %3, %3, %3, %3, %3, %3, %3, %3, %3, %3, %3, %3, %3, %3, %3, %3, %3, %3, %3, %3, %3, %3, %3, %3, %3, %3, %3, %3, %3, %3, %3, %3, %3, %3, %3, %3, %3, %3, %3, %3, %3, %3, %3, %3, %3, %3, %3, %3, %3, %3, %3, %3
  %230 = phi i1 [ true, %228 ], [ true, %227 ], [ true, %226 ], [ true, %225 ], [ true, %224 ], [ true, %223 ], [ true, %222 ], [ true, %221 ], [ true, %220 ], [ true, %219 ], [ true, %218 ], [ false, %217 ], [ true, %3 ], [ true, %3 ], [ true, %3 ], [ true, %3 ], [ true, %3 ], [ true, %3 ], [ true, %3 ], [ true, %3 ], [ true, %3 ], [ true, %3 ], [ true, %3 ], [ true, %3 ], [ true, %3 ], [ true, %3 ], [ true, %3 ], [ true, %3 ], [ true, %3 ], [ true, %3 ], [ true, %3 ], [ true, %3 ], [ true, %3 ], [ true, %3 ], [ true, %3 ], [ true, %3 ], [ true, %3 ], [ true, %3 ], [ true, %3 ], [ true, %3 ], [ true, %3 ], [ true, %3 ], [ true, %3 ], [ true, %3 ], [ true, %3 ], [ true, %3 ], [ true, %3 ], [ true, %3 ], [ true, %3 ], [ true, %3 ], [ true, %3 ], [ true, %3 ], [ true, %3 ], [ true, %3 ], [ true, %3 ], [ true, %3 ], [ true, %3 ], [ true, %3 ], [ true, %3 ], [ true, %3 ], [ true, %3 ], [ true, %3 ], [ true, %3 ], [ true, %3 ], [ true, %3 ], [ true, %3 ], [ true, %3 ]
  %231 = phi i32 [ 0, %228 ], [ 2, %227 ], [ 1, %226 ], [ 2, %225 ], [ 1, %224 ], [ 1, %223 ], [ 1, %222 ], [ 0, %221 ], [ 1, %220 ], [ 1, %219 ], [ 0, %218 ], [ 0, %217 ], [ 0, %3 ], [ 0, %3 ], [ 0, %3 ], [ 0, %3 ], [ 0, %3 ], [ 0, %3 ], [ 0, %3 ], [ 0, %3 ], [ 0, %3 ], [ 0, %3 ], [ 0, %3 ], [ 0, %3 ], [ 0, %3 ], [ 0, %3 ], [ 0, %3 ], [ 0, %3 ], [ 0, %3 ], [ 0, %3 ], [ 0, %3 ], [ 0, %3 ], [ 0, %3 ], [ 0, %3 ], [ 0, %3 ], [ 0, %3 ], [ 0, %3 ], [ 0, %3 ], [ 0, %3 ], [ 0, %3 ], [ 0, %3 ], [ 0, %3 ], [ 0, %3 ], [ 0, %3 ], [ 0, %3 ], [ 0, %3 ], [ 0, %3 ], [ 0, %3 ], [ 0, %3 ], [ 0, %3 ], [ 0, %3 ], [ 0, %3 ], [ 0, %3 ], [ 0, %3 ], [ 0, %3 ], [ 0, %3 ], [ 0, %3 ], [ 0, %3 ], [ 0, %3 ], [ 0, %3 ], [ 0, %3 ], [ 0, %3 ], [ 0, %3 ], [ 0, %3 ], [ 0, %3 ], [ 0, %3 ], [ 0, %3 ]
  %232 = phi i1 [ undef, %228 ], [ false, %227 ], [ false, %226 ], [ false, %225 ], [ false, %224 ], [ false, %223 ], [ false, %222 ], [ false, %221 ], [ true, %220 ], [ true, %219 ], [ true, %218 ], [ true, %217 ], [ false, %3 ], [ false, %3 ], [ false, %3 ], [ false, %3 ], [ false, %3 ], [ false, %3 ], [ false, %3 ], [ false, %3 ], [ false, %3 ], [ false, %3 ], [ false, %3 ], [ false, %3 ], [ false, %3 ], [ false, %3 ], [ false, %3 ], [ false, %3 ], [ false, %3 ], [ false, %3 ], [ false, %3 ], [ false, %3 ], [ false, %3 ], [ false, %3 ], [ false, %3 ], [ false, %3 ], [ false, %3 ], [ false, %3 ], [ false, %3 ], [ false, %3 ], [ false, %3 ], [ false, %3 ], [ false, %3 ], [ false, %3 ], [ false, %3 ], [ false, %3 ], [ false, %3 ], [ false, %3 ], [ false, %3 ], [ false, %3 ], [ false, %3 ], [ false, %3 ], [ false, %3 ], [ false, %3 ], [ false, %3 ], [ false, %3 ], [ false, %3 ], [ false, %3 ], [ false, %3 ], [ false, %3 ], [ false, %3 ], [ false, %3 ], [ false, %3 ], [ false, %3 ], [ false, %3 ], [ false, %3 ], [ false, %3 ]
  %233 = phi i32 [ undef, %228 ], [ 4, %227 ], [ 4, %226 ], [ 3, %225 ], [ 3, %224 ], [ 3, %223 ], [ 3, %222 ], [ 3, %221 ], [ 2, %220 ], [ 2, %219 ], [ 2, %218 ], [ 2, %217 ], [ 1, %3 ], [ 1, %3 ], [ 1, %3 ], [ 1, %3 ], [ 1, %3 ], [ 1, %3 ], [ 1, %3 ], [ 1, %3 ], [ 1, %3 ], [ 1, %3 ], [ 1, %3 ], [ 1, %3 ], [ 1, %3 ], [ 1, %3 ], [ 1, %3 ], [ 1, %3 ], [ 1, %3 ], [ 1, %3 ], [ 1, %3 ], [ 1, %3 ], [ 1, %3 ], [ 1, %3 ], [ 1, %3 ], [ 1, %3 ], [ 1, %3 ], [ 1, %3 ], [ 1, %3 ], [ 1, %3 ], [ 1, %3 ], [ 1, %3 ], [ 1, %3 ], [ 1, %3 ], [ 1, %3 ], [ 1, %3 ], [ 1, %3 ], [ 1, %3 ], [ 1, %3 ], [ 1, %3 ], [ 1, %3 ], [ 1, %3 ], [ 1, %3 ], [ 1, %3 ], [ 1, %3 ], [ 1, %3 ], [ 1, %3 ], [ 1, %3 ], [ 1, %3 ], [ 1, %3 ], [ 1, %3 ], [ 1, %3 ], [ 1, %3 ], [ 1, %3 ], [ 1, %3 ], [ 1, %3 ], [ 1, %3 ]
  %234 = phi i1 [ true, %228 ], [ true, %227 ], [ true, %226 ], [ true, %225 ], [ false, %224 ], [ false, %223 ], [ true, %222 ], [ true, %221 ], [ true, %220 ], [ false, %219 ], [ true, %218 ], [ true, %217 ], [ true, %3 ], [ true, %3 ], [ true, %3 ], [ true, %3 ], [ true, %3 ], [ true, %3 ], [ true, %3 ], [ true, %3 ], [ true, %3 ], [ true, %3 ], [ true, %3 ], [ true, %3 ], [ true, %3 ], [ true, %3 ], [ true, %3 ], [ true, %3 ], [ true, %3 ], [ true, %3 ], [ true, %3 ], [ true, %3 ], [ true, %3 ], [ true, %3 ], [ true, %3 ], [ true, %3 ], [ true, %3 ], [ true, %3 ], [ true, %3 ], [ true, %3 ], [ true, %3 ], [ true, %3 ], [ true, %3 ], [ true, %3 ], [ true, %3 ], [ true, %3 ], [ true, %3 ], [ true, %3 ], [ true, %3 ], [ true, %3 ], [ true, %3 ], [ true, %3 ], [ true, %3 ], [ true, %3 ], [ true, %3 ], [ true, %3 ], [ true, %3 ], [ true, %3 ], [ true, %3 ], [ true, %3 ], [ true, %3 ], [ true, %3 ], [ true, %3 ], [ true, %3 ], [ true, %3 ], [ true, %3 ], [ true, %3 ]
  %235 = phi i32 [ 0, %228 ], [ 0, %227 ], [ 0, %226 ], [ 0, %225 ], [ 17, %224 ], [ 66, %223 ], [ 0, %222 ], [ 0, %221 ], [ 0, %220 ], [ 67, %219 ], [ 0, %218 ], [ 0, %217 ], [ 0, %3 ], [ 0, %3 ], [ 0, %3 ], [ 0, %3 ], [ 0, %3 ], [ 0, %3 ], [ 0, %3 ], [ 0, %3 ], [ 0, %3 ], [ 0, %3 ], [ 0, %3 ], [ 0, %3 ], [ 0, %3 ], [ 0, %3 ], [ 0, %3 ], [ 0, %3 ], [ 0, %3 ], [ 0, %3 ], [ 0, %3 ], [ 0, %3 ], [ 0, %3 ], [ 0, %3 ], [ 0, %3 ], [ 0, %3 ], [ 0, %3 ], [ 0, %3 ], [ 0, %3 ], [ 0, %3 ], [ 0, %3 ], [ 0, %3 ], [ 0, %3 ], [ 0, %3 ], [ 0, %3 ], [ 0, %3 ], [ 0, %3 ], [ 0, %3 ], [ 0, %3 ], [ 0, %3 ], [ 0, %3 ], [ 0, %3 ], [ 0, %3 ], [ 0, %3 ], [ 0, %3 ], [ 0, %3 ], [ 0, %3 ], [ 0, %3 ], [ 0, %3 ], [ 0, %3 ], [ 0, %3 ], [ 0, %3 ], [ 0, %3 ], [ 0, %3 ], [ 0, %3 ], [ 0, %3 ], [ 0, %3 ]
  %236 = icmp eq i32 %14, 0
  br i1 %236, label %358, label %237

237:                                              ; preds = %229
  br i1 %232, label %239, label %238

238:                                              ; preds = %237
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 23668, ptr noundef nonnull @.str.131) #30
  br label %239

239:                                              ; preds = %120, %214, %237, %238
  %240 = phi i1 [ true, %237 ], [ true, %238 ], [ false, %214 ], [ true, %120 ]
  %241 = getelementptr i8, ptr %1, i64 64
  %242 = load ptr, ptr %241, align 8, !tbaa !16
  %243 = getelementptr i8, ptr %1, i64 72
  %244 = load ptr, ptr %243, align 8, !tbaa !16
  %245 = tail call ptr @expand_expr_real(ptr noundef %242, ptr noundef null, i32 noundef 0, i32 noundef 0, ptr noundef null) #30
  %246 = tail call ptr @expand_expr_real(ptr noundef %244, ptr noundef null, i32 noundef 0, i32 noundef 0, ptr noundef null) #30
  %247 = load i32, ptr %5, align 4, !tbaa !353
  %248 = zext i32 %247 to i64
  %249 = getelementptr inbounds [0 x %struct.insn_data], ptr @insn_data, i64 0, i64 %248, i32 3
  %250 = load ptr, ptr %249, align 8, !tbaa !340
  %251 = getelementptr inbounds %struct.insn_operand_data, ptr %250, i64 0, i32 2
  %252 = load i16, ptr %251, align 8
  %253 = zext i16 %252 to i32
  %254 = getelementptr inbounds %struct.insn_operand_data, ptr %250, i64 1, i32 2
  %255 = load i16, ptr %254, align 8
  %256 = zext i16 %255 to i32
  %257 = getelementptr inbounds %struct.insn_operand_data, ptr %250, i64 2, i32 2
  %258 = load i16, ptr %257, align 8
  %259 = zext i16 %258 to i32
  %260 = load i32, ptr %13, align 4, !tbaa !358
  %261 = zext i16 %255 to i64
  %262 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %261
  %263 = load i8, ptr %262, align 1, !tbaa !16
  %264 = add i8 %263, -12
  %265 = icmp ult i8 %264, 6
  %266 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 64), align 16
  %267 = icmp eq ptr %266, %245
  %268 = select i1 %265, i1 %267, i1 false
  br i1 %268, label %269, label %272

269:                                              ; preds = %239
  %270 = getelementptr inbounds [87 x ptr], ptr @const_tiny_rtx, i64 0, i64 %261
  %271 = load ptr, ptr %270, align 8, !tbaa !5
  br label %272

272:                                              ; preds = %269, %239
  %273 = phi ptr [ %245, %239 ], [ %271, %269 ]
  %274 = zext i16 %258 to i64
  %275 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %274
  %276 = load i8, ptr %275, align 1, !tbaa !16
  %277 = add i8 %276, -12
  %278 = icmp ult i8 %277, 6
  %279 = icmp eq ptr %266, %246
  %280 = select i1 %278, i1 %279, i1 false
  br i1 %280, label %281, label %284

281:                                              ; preds = %272
  %282 = getelementptr inbounds [87 x ptr], ptr @const_tiny_rtx, i64 0, i64 %274
  %283 = load ptr, ptr %282, align 8, !tbaa !5
  br label %284

284:                                              ; preds = %281, %272
  %285 = phi ptr [ %246, %272 ], [ %283, %281 ]
  br i1 %240, label %289, label %286

286:                                              ; preds = %284
  %287 = tail call ptr @gen_reg_rtx(i32 noundef %259) #30
  %288 = tail call ptr @emit_move_insn(ptr noundef %287, ptr noundef %285) #30
  br label %289

289:                                              ; preds = %286, %284
  %290 = phi ptr [ %273, %286 ], [ %285, %284 ]
  %291 = phi ptr [ %287, %286 ], [ %273, %284 ]
  %292 = load i32, ptr @optimize, align 4, !tbaa !20
  %293 = icmp eq i32 %292, 0
  %294 = icmp ne ptr %2, null
  %295 = and i1 %294, %293
  br i1 %295, label %296, label %309

296:                                              ; preds = %289
  %297 = load i32, ptr %2, align 8
  %298 = lshr i32 %297, 16
  %299 = and i32 %298, 255
  %300 = icmp eq i32 %299, %253
  br i1 %300, label %301, label %309

301:                                              ; preds = %296
  %302 = load i32, ptr %5, align 4, !tbaa !353
  %303 = zext i32 %302 to i64
  %304 = getelementptr inbounds [0 x %struct.insn_data], ptr @insn_data, i64 0, i64 %303, i32 3
  %305 = load ptr, ptr %304, align 8, !tbaa !340
  %306 = load ptr, ptr %305, align 8, !tbaa !342
  %307 = tail call i32 %306(ptr noundef nonnull %2, i32 noundef %253) #30
  %308 = icmp eq i32 %307, 0
  br i1 %308, label %309, label %311

309:                                              ; preds = %301, %296, %289
  %310 = tail call ptr @gen_reg_rtx(i32 noundef %253) #30
  br label %311

311:                                              ; preds = %309, %301
  %312 = phi ptr [ %310, %309 ], [ %2, %301 ]
  %313 = load i32, ptr @optimize, align 4, !tbaa !20
  %314 = icmp eq i32 %313, 0
  br i1 %314, label %318, label %315

315:                                              ; preds = %311
  %316 = tail call i32 @register_operand(ptr noundef %291, i32 noundef %256) #30
  %317 = icmp eq i32 %316, 0
  br i1 %317, label %327, label %318

318:                                              ; preds = %315, %311
  %319 = load i32, ptr %5, align 4, !tbaa !353
  %320 = zext i32 %319 to i64
  %321 = getelementptr inbounds [0 x %struct.insn_data], ptr @insn_data, i64 0, i64 %320, i32 3
  %322 = load ptr, ptr %321, align 8, !tbaa !340
  %323 = getelementptr inbounds %struct.insn_operand_data, ptr %322, i64 1
  %324 = load ptr, ptr %323, align 8, !tbaa !342
  %325 = tail call i32 %324(ptr noundef %291, i32 noundef %256) #30
  %326 = icmp eq i32 %325, 0
  br i1 %326, label %327, label %329

327:                                              ; preds = %318, %315
  %328 = tail call ptr @copy_to_mode_reg(i32 noundef %256, ptr noundef %291) #30
  br label %329

329:                                              ; preds = %327, %318
  %330 = phi ptr [ %291, %318 ], [ %328, %327 ]
  %331 = load i32, ptr @optimize, align 4, !tbaa !20
  %332 = icmp eq i32 %331, 0
  br i1 %332, label %336, label %333

333:                                              ; preds = %329
  %334 = tail call i32 @register_operand(ptr noundef %290, i32 noundef %259) #30
  %335 = icmp eq i32 %334, 0
  br i1 %335, label %345, label %336

336:                                              ; preds = %333, %329
  %337 = load i32, ptr %5, align 4, !tbaa !353
  %338 = zext i32 %337 to i64
  %339 = getelementptr inbounds [0 x %struct.insn_data], ptr @insn_data, i64 0, i64 %338, i32 3
  %340 = load ptr, ptr %339, align 8, !tbaa !340
  %341 = getelementptr inbounds %struct.insn_operand_data, ptr %340, i64 2
  %342 = load ptr, ptr %341, align 8, !tbaa !342
  %343 = tail call i32 %342(ptr noundef %290, i32 noundef %259) #30
  %344 = icmp eq i32 %343, 0
  br i1 %344, label %345, label %347

345:                                              ; preds = %336, %333
  %346 = tail call ptr @copy_to_mode_reg(i32 noundef %259, ptr noundef %290) #30
  br label %347

347:                                              ; preds = %345, %336
  %348 = phi ptr [ %290, %336 ], [ %346, %345 ]
  %349 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef %260, i32 noundef %256, ptr noundef %330, ptr noundef %348) #30
  %350 = load i32, ptr %5, align 4, !tbaa !353
  %351 = zext i32 %350 to i64
  %352 = getelementptr inbounds [0 x %struct.insn_data], ptr @insn_data, i64 0, i64 %351, i32 2
  %353 = load ptr, ptr %352, align 8, !tbaa !344
  %354 = tail call ptr (ptr, ...) %353(ptr noundef %312, ptr noundef %330, ptr noundef %348, ptr noundef %349) #30
  %355 = icmp eq ptr %354, null
  br i1 %355, label %525, label %356

356:                                              ; preds = %347
  %357 = tail call ptr @emit_insn(ptr noundef nonnull %354) #30
  br label %525

358:                                              ; preds = %229
  %359 = icmp eq i32 %235, %12
  %360 = select i1 %234, i1 true, i1 %359
  br i1 %360, label %361, label %380

361:                                              ; preds = %216, %358
  %362 = phi i1 [ true, %216 ], [ %230, %358 ]
  %363 = phi i32 [ 0, %216 ], [ %231, %358 ]
  %364 = phi i32 [ 2, %216 ], [ %233, %358 ]
  %365 = load i32, ptr @optimize, align 4, !tbaa !20
  %366 = icmp ne i32 %365, 0
  %367 = icmp eq ptr %2, null
  %368 = or i1 %367, %366
  br i1 %368, label %378, label %369

369:                                              ; preds = %361
  %370 = load i32, ptr %2, align 8
  %371 = lshr i32 %370, 16
  %372 = and i32 %371, 255
  %373 = icmp eq i32 %372, %12
  br i1 %373, label %374, label %378

374:                                              ; preds = %369
  %375 = load ptr, ptr %9, align 8, !tbaa !342
  %376 = tail call i32 %375(ptr noundef nonnull %2, i32 noundef %12) #30
  %377 = icmp eq i32 %376, 0
  br i1 %377, label %378, label %383

378:                                              ; preds = %374, %369, %361
  %379 = tail call ptr @gen_reg_rtx(i32 noundef %12) #30
  br label %383

380:                                              ; preds = %358
  %381 = tail call ptr @gen_reg_rtx(i32 noundef %235) #30
  %382 = tail call ptr @simplify_gen_subreg(i32 noundef %12, ptr noundef %381, i32 noundef %235, i32 noundef 0) #30
  br label %383

383:                                              ; preds = %380, %378, %374
  %384 = phi i1 [ %230, %380 ], [ %362, %378 ], [ %362, %374 ]
  %385 = phi i32 [ %231, %380 ], [ %363, %378 ], [ %363, %374 ]
  %386 = phi i32 [ %233, %380 ], [ %364, %378 ], [ %364, %374 ]
  %387 = phi ptr [ %382, %380 ], [ %379, %378 ], [ %2, %374 ]
  %388 = phi ptr [ %381, %380 ], [ %379, %378 ], [ %2, %374 ]
  %389 = zext i32 %386 to i64
  br label %390

390:                                              ; preds = %383, %481
  %391 = phi i64 [ 0, %383 ], [ %397, %481 ]
  %392 = phi i32 [ 0, %383 ], [ %482, %481 ]
  %393 = add nuw nsw i64 %391, 3
  %394 = getelementptr inbounds %struct.tree_exp, ptr %1, i64 0, i32 3, i64 %393
  %395 = load ptr, ptr %394, align 8, !tbaa !16
  %396 = tail call ptr @expand_expr_real(ptr noundef %395, ptr noundef null, i32 noundef 0, i32 noundef 0, ptr noundef null) #30
  %397 = add nuw nsw i64 %391, 1
  %398 = getelementptr inbounds %struct.insn_operand_data, ptr %9, i64 %397
  %399 = getelementptr inbounds %struct.insn_operand_data, ptr %9, i64 %397, i32 2
  %400 = load i16, ptr %399, align 8
  %401 = zext i16 %400 to i32
  %402 = load ptr, ptr %398, align 8, !tbaa !342
  %403 = tail call i32 %402(ptr noundef %396, i32 noundef %401) #30
  %404 = trunc i32 %403 to i8
  %405 = icmp ne i64 %397, %389
  %406 = or i1 %384, %405
  br i1 %406, label %419, label %407

407:                                              ; preds = %390
  %408 = icmp eq i8 %404, 0
  br i1 %408, label %409, label %481

409:                                              ; preds = %407
  %410 = load i32, ptr %396, align 8
  %411 = lshr i32 %410, 16
  %412 = and i32 %411, 255
  %413 = tail call ptr @simplify_gen_subreg(i32 noundef 16, ptr noundef nonnull %396, i32 noundef %412, i32 noundef 0) #30
  %414 = load ptr, ptr %398, align 8, !tbaa !342
  %415 = tail call i32 %414(ptr noundef %413, i32 noundef %401) #30
  %416 = icmp eq i32 %415, 0
  br i1 %416, label %417, label %481

417:                                              ; preds = %409
  %418 = tail call ptr @copy_to_reg(ptr noundef %413) #30
  br label %481

419:                                              ; preds = %390
  %420 = trunc i64 %391 to i32
  %421 = sub nsw i32 %386, %420
  %422 = icmp ugt i32 %421, %385
  br i1 %422, label %442, label %423

423:                                              ; preds = %419
  %424 = icmp eq i8 %404, 0
  br i1 %424, label %425, label %481

425:                                              ; preds = %423
  switch i32 %6, label %434 [
    i32 1627, label %426
    i32 1626, label %426
    i32 1631, label %426
    i32 1630, label %426
    i32 1574, label %426
    i32 1569, label %426
    i32 2933, label %426
    i32 1625, label %426
    i32 1624, label %426
    i32 1575, label %428
    i32 2932, label %428
    i32 1728, label %428
    i32 1727, label %428
    i32 1730, label %428
    i32 1729, label %428
    i32 2727, label %430
    i32 2726, label %430
    i32 2724, label %430
    i32 2944, label %430
    i32 2943, label %430
    i32 2941, label %430
    i32 1002, label %432
    i32 1001, label %432
    i32 998, label %432
    i32 997, label %432
    i32 1000, label %432
    i32 999, label %432
  ]

426:                                              ; preds = %425, %425, %425, %425, %425, %425, %425, %425, %425
  tail call void (ptr, ...) @error(ptr noundef nonnull @.str.1341) #30
  %427 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 64), align 16, !tbaa !5
  br label %525

428:                                              ; preds = %425, %425, %425, %425, %425, %425
  tail call void (ptr, ...) @error(ptr noundef nonnull @.str.1342) #30
  %429 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 64), align 16, !tbaa !5
  br label %525

430:                                              ; preds = %425, %425, %425, %425, %425, %425
  tail call void (ptr, ...) @error(ptr noundef nonnull @.str.1343) #30
  %431 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 64), align 16, !tbaa !5
  br label %525

432:                                              ; preds = %425, %425, %425, %425, %425, %425
  tail call void (ptr, ...) @error(ptr noundef nonnull @.str.1344) #30
  %433 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 64), align 16, !tbaa !5
  br label %525

434:                                              ; preds = %425
  switch i32 %385, label %439 [
    i32 2, label %435
    i32 1, label %438
  ]

435:                                              ; preds = %434
  %436 = icmp eq i32 %421, 2
  br i1 %436, label %437, label %438

437:                                              ; preds = %435
  tail call void (ptr, ...) @error(ptr noundef nonnull @.str.1345) #30
  br label %440

438:                                              ; preds = %435, %434
  tail call void (ptr, ...) @error(ptr noundef nonnull @.str.1340) #30
  br label %440

439:                                              ; preds = %434
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 23763, ptr noundef nonnull @.str.131) #30
  br label %440

440:                                              ; preds = %439, %438, %437
  %441 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 64), align 16, !tbaa !5
  br label %525

442:                                              ; preds = %419
  %443 = zext i16 %400 to i64
  %444 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %443
  %445 = load i8, ptr %444, align 1, !tbaa !16
  %446 = add i8 %445, -12
  %447 = icmp ult i8 %446, 6
  %448 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 64), align 16
  %449 = icmp eq ptr %448, %396
  %450 = select i1 %447, i1 %449, i1 false
  br i1 %450, label %451, label %454

451:                                              ; preds = %442
  %452 = getelementptr inbounds [87 x ptr], ptr @const_tiny_rtx, i64 0, i64 %443
  %453 = load ptr, ptr %452, align 8, !tbaa !5
  br label %454

454:                                              ; preds = %451, %442
  %455 = phi ptr [ %396, %442 ], [ %453, %451 ]
  %456 = tail call i32 @memory_operand(ptr noundef %455, i32 noundef %401) #30
  %457 = icmp ne i32 %456, 0
  %458 = zext i1 %457 to i32
  %459 = add nsw i32 %392, %458
  %460 = load i32, ptr %455, align 8
  %461 = lshr i32 %460, 16
  %462 = and i32 %461, 255
  %463 = icmp eq i32 %462, %401
  %464 = icmp eq i32 %462, 0
  %465 = or i1 %463, %464
  br i1 %465, label %466, label %475

466:                                              ; preds = %454
  %467 = load i32, ptr @optimize, align 4, !tbaa !20
  %468 = icmp ne i32 %467, 0
  %469 = icmp eq i8 %404, 0
  %470 = select i1 %468, i1 true, i1 %469
  %471 = icmp sgt i32 %459, 1
  %472 = select i1 %470, i1 true, i1 %471
  br i1 %472, label %473, label %481

473:                                              ; preds = %466
  %474 = tail call ptr @copy_to_mode_reg(i32 noundef %401, ptr noundef nonnull %455) #30
  br label %481

475:                                              ; preds = %454
  %476 = tail call ptr @copy_to_reg(ptr noundef nonnull %455) #30
  %477 = load i32, ptr %476, align 8
  %478 = lshr i32 %477, 16
  %479 = and i32 %478, 255
  %480 = tail call ptr @simplify_gen_subreg(i32 noundef %401, ptr noundef nonnull %476, i32 noundef %479, i32 noundef 0) #30
  br label %481

481:                                              ; preds = %409, %417, %407, %475, %466, %473, %423
  %482 = phi i32 [ %392, %407 ], [ %392, %409 ], [ %392, %417 ], [ %392, %423 ], [ %459, %473 ], [ %459, %466 ], [ %459, %475 ]
  %483 = phi ptr [ %396, %407 ], [ %413, %409 ], [ %418, %417 ], [ %396, %423 ], [ %474, %473 ], [ %455, %466 ], [ %480, %475 ]
  %484 = getelementptr inbounds [4 x %struct.anon.2], ptr %4, i64 0, i64 %391
  store ptr %483, ptr %484, align 16, !tbaa !453
  %485 = getelementptr inbounds [4 x %struct.anon.2], ptr %4, i64 0, i64 %391, i32 1
  store i32 %401, ptr %485, align 8, !tbaa !455
  br i1 %405, label %390, label %486, !llvm.loop !457

486:                                              ; preds = %481
  switch i32 %386, label %519 [
    i32 1, label %487
    i32 2, label %492
    i32 3, label %499
    i32 4, label %508
  ]

487:                                              ; preds = %486
  %488 = getelementptr inbounds [0 x %struct.insn_data], ptr @insn_data, i64 0, i64 %7, i32 2
  %489 = load ptr, ptr %488, align 8, !tbaa !344
  %490 = load ptr, ptr %4, align 16, !tbaa !453
  %491 = tail call ptr (ptr, ...) %489(ptr noundef %387, ptr noundef %490) #30
  br label %520

492:                                              ; preds = %486
  %493 = getelementptr inbounds [0 x %struct.insn_data], ptr @insn_data, i64 0, i64 %7, i32 2
  %494 = load ptr, ptr %493, align 8, !tbaa !344
  %495 = load ptr, ptr %4, align 16, !tbaa !453
  %496 = getelementptr inbounds [4 x %struct.anon.2], ptr %4, i64 0, i64 1
  %497 = load ptr, ptr %496, align 16, !tbaa !453
  %498 = tail call ptr (ptr, ...) %494(ptr noundef %387, ptr noundef %495, ptr noundef %497) #30
  br label %520

499:                                              ; preds = %486
  %500 = getelementptr inbounds [0 x %struct.insn_data], ptr @insn_data, i64 0, i64 %7, i32 2
  %501 = load ptr, ptr %500, align 8, !tbaa !344
  %502 = load ptr, ptr %4, align 16, !tbaa !453
  %503 = getelementptr inbounds [4 x %struct.anon.2], ptr %4, i64 0, i64 1
  %504 = load ptr, ptr %503, align 16, !tbaa !453
  %505 = getelementptr inbounds [4 x %struct.anon.2], ptr %4, i64 0, i64 2
  %506 = load ptr, ptr %505, align 16, !tbaa !453
  %507 = tail call ptr (ptr, ...) %501(ptr noundef %387, ptr noundef %502, ptr noundef %504, ptr noundef %506) #30
  br label %520

508:                                              ; preds = %486
  %509 = getelementptr inbounds [0 x %struct.insn_data], ptr @insn_data, i64 0, i64 %7, i32 2
  %510 = load ptr, ptr %509, align 8, !tbaa !344
  %511 = load ptr, ptr %4, align 16, !tbaa !453
  %512 = getelementptr inbounds [4 x %struct.anon.2], ptr %4, i64 0, i64 1
  %513 = load ptr, ptr %512, align 16, !tbaa !453
  %514 = getelementptr inbounds [4 x %struct.anon.2], ptr %4, i64 0, i64 2
  %515 = load ptr, ptr %514, align 16, !tbaa !453
  %516 = getelementptr inbounds [4 x %struct.anon.2], ptr %4, i64 0, i64 3
  %517 = load ptr, ptr %516, align 16, !tbaa !453
  %518 = tail call ptr (ptr, ...) %510(ptr noundef %387, ptr noundef %511, ptr noundef %513, ptr noundef %515, ptr noundef %517) #30
  br label %520

519:                                              ; preds = %486
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 23811, ptr noundef nonnull @.str.131) #30
  unreachable

520:                                              ; preds = %508, %499, %492, %487
  %521 = phi ptr [ %518, %508 ], [ %507, %499 ], [ %498, %492 ], [ %491, %487 ]
  %522 = icmp eq ptr %521, null
  br i1 %522, label %525, label %523

523:                                              ; preds = %520
  %524 = tail call ptr @emit_insn(ptr noundef nonnull %521) #30
  br label %525

525:                                              ; preds = %426, %428, %430, %432, %440, %356, %347, %212, %206, %105, %97, %520, %523, %116
  %526 = phi ptr [ %388, %523 ], [ %119, %116 ], [ null, %520 ], [ %115, %105 ], [ null, %97 ], [ %178, %212 ], [ null, %206 ], [ %312, %356 ], [ null, %347 ], [ %427, %426 ], [ %429, %428 ], [ %431, %430 ], [ %433, %432 ], [ %441, %440 ]
  call void @llvm.lifetime.end.p0(i64 64, ptr nonnull %4) #30
  ret ptr %526
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc ptr @ix86_expand_sse_comi(ptr nocapture noundef readonly %0, ptr %1, ptr %2) unnamed_addr #9 {
  %4 = tail call ptr @expand_expr_real(ptr noundef %1, ptr noundef null, i32 noundef 0, i32 noundef 0, ptr noundef null) #30
  %5 = tail call ptr @expand_expr_real(ptr noundef %2, ptr noundef null, i32 noundef 0, i32 noundef 0, ptr noundef null) #30
  %6 = getelementptr inbounds %struct.builtin_description, ptr %0, i64 0, i32 1
  %7 = load i32, ptr %6, align 4, !tbaa !353
  %8 = zext i32 %7 to i64
  %9 = getelementptr inbounds [0 x %struct.insn_data], ptr @insn_data, i64 0, i64 %8, i32 3
  %10 = load ptr, ptr %9, align 8, !tbaa !340
  %11 = getelementptr inbounds %struct.insn_operand_data, ptr %10, i64 0, i32 2
  %12 = load i16, ptr %11, align 8
  %13 = zext i16 %12 to i32
  %14 = getelementptr inbounds %struct.insn_operand_data, ptr %10, i64 1, i32 2
  %15 = load i16, ptr %14, align 8
  %16 = zext i16 %15 to i32
  %17 = getelementptr inbounds %struct.builtin_description, ptr %0, i64 0, i32 4
  %18 = load i32, ptr %17, align 4, !tbaa !358
  %19 = zext i16 %12 to i64
  %20 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %19
  %21 = load i8, ptr %20, align 1, !tbaa !16
  %22 = add i8 %21, -12
  %23 = icmp ult i8 %22, 6
  %24 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 64), align 16
  %25 = icmp eq ptr %24, %4
  %26 = select i1 %23, i1 %25, i1 false
  br i1 %26, label %27, label %30

27:                                               ; preds = %3
  %28 = getelementptr inbounds [87 x ptr], ptr @const_tiny_rtx, i64 0, i64 %19
  %29 = load ptr, ptr %28, align 8, !tbaa !5
  br label %30

30:                                               ; preds = %27, %3
  %31 = phi ptr [ %4, %3 ], [ %29, %27 ]
  %32 = zext i16 %15 to i64
  %33 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %32
  %34 = load i8, ptr %33, align 1, !tbaa !16
  %35 = add i8 %34, -12
  %36 = icmp ult i8 %35, 6
  %37 = icmp eq ptr %24, %5
  %38 = select i1 %36, i1 %37, i1 false
  br i1 %38, label %39, label %42

39:                                               ; preds = %30
  %40 = getelementptr inbounds [87 x ptr], ptr @const_tiny_rtx, i64 0, i64 %32
  %41 = load ptr, ptr %40, align 8, !tbaa !5
  br label %42

42:                                               ; preds = %39, %30
  %43 = phi ptr [ %5, %30 ], [ %41, %39 ]
  %44 = getelementptr inbounds %struct.builtin_description, ptr %0, i64 0, i32 5
  %45 = load i32, ptr %44, align 8, !tbaa !355
  %46 = and i32 %45, 1
  %47 = icmp eq i32 %46, 0
  %48 = select i1 %47, ptr %43, ptr %31
  %49 = select i1 %47, ptr %31, ptr %43
  %50 = tail call ptr @gen_reg_rtx(i32 noundef 16) #30
  %51 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 64), align 16, !tbaa !5
  %52 = tail call ptr @emit_move_insn(ptr noundef %50, ptr noundef %51) #30
  %53 = tail call ptr @gen_rtx_SUBREG(i32 noundef 14, ptr noundef %50, i32 noundef 0) #30
  %54 = load i32, ptr @optimize, align 4, !tbaa !20
  %55 = icmp eq i32 %54, 0
  br i1 %55, label %59, label %56

56:                                               ; preds = %42
  %57 = tail call i32 @register_operand(ptr noundef %49, i32 noundef %13) #30
  %58 = icmp eq i32 %57, 0
  br i1 %58, label %67, label %59

59:                                               ; preds = %56, %42
  %60 = load i32, ptr %6, align 4, !tbaa !353
  %61 = zext i32 %60 to i64
  %62 = getelementptr inbounds [0 x %struct.insn_data], ptr @insn_data, i64 0, i64 %61, i32 3
  %63 = load ptr, ptr %62, align 8, !tbaa !340
  %64 = load ptr, ptr %63, align 8, !tbaa !342
  %65 = tail call i32 %64(ptr noundef %49, i32 noundef %13) #30
  %66 = icmp eq i32 %65, 0
  br i1 %66, label %67, label %69

67:                                               ; preds = %59, %56
  %68 = tail call ptr @copy_to_mode_reg(i32 noundef %13, ptr noundef %49) #30
  br label %69

69:                                               ; preds = %67, %59
  %70 = phi ptr [ %49, %59 ], [ %68, %67 ]
  %71 = load i32, ptr @optimize, align 4, !tbaa !20
  %72 = icmp eq i32 %71, 0
  br i1 %72, label %76, label %73

73:                                               ; preds = %69
  %74 = tail call i32 @register_operand(ptr noundef %48, i32 noundef %16) #30
  %75 = icmp eq i32 %74, 0
  br i1 %75, label %85, label %76

76:                                               ; preds = %73, %69
  %77 = load i32, ptr %6, align 4, !tbaa !353
  %78 = zext i32 %77 to i64
  %79 = getelementptr inbounds [0 x %struct.insn_data], ptr @insn_data, i64 0, i64 %78, i32 3
  %80 = load ptr, ptr %79, align 8, !tbaa !340
  %81 = getelementptr inbounds %struct.insn_operand_data, ptr %80, i64 1
  %82 = load ptr, ptr %81, align 8, !tbaa !342
  %83 = tail call i32 %82(ptr noundef %48, i32 noundef %16) #30
  %84 = icmp eq i32 %83, 0
  br i1 %84, label %85, label %87

85:                                               ; preds = %76, %73
  %86 = tail call ptr @copy_to_mode_reg(i32 noundef %16, ptr noundef %48) #30
  br label %87

87:                                               ; preds = %85, %76
  %88 = phi ptr [ %48, %76 ], [ %86, %85 ]
  %89 = load i32, ptr %6, align 4, !tbaa !353
  %90 = zext i32 %89 to i64
  %91 = getelementptr inbounds [0 x %struct.insn_data], ptr @insn_data, i64 0, i64 %90, i32 2
  %92 = load ptr, ptr %91, align 8, !tbaa !344
  %93 = tail call ptr (ptr, ...) %92(ptr noundef %70, ptr noundef %88) #30
  %94 = icmp eq ptr %93, null
  br i1 %94, label %106, label %95

95:                                               ; preds = %87
  %96 = tail call ptr @emit_insn(ptr noundef nonnull %93) #30
  %97 = tail call ptr @gen_rtx_fmt_e_stat(i32 noundef 40, i32 noundef 0, ptr noundef %53) #30
  %98 = getelementptr inbounds %struct.rtx_def, ptr %93, i64 0, i32 1
  %99 = load ptr, ptr %98, align 8, !tbaa !16
  %100 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 64), align 16, !tbaa !5
  %101 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef %18, i32 noundef 14, ptr noundef %99, ptr noundef %100) #30
  %102 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 23, i32 noundef 0, ptr noundef %97, ptr noundef %101) #30
  %103 = tail call ptr @emit_insn(ptr noundef %102) #30
  %104 = getelementptr inbounds %struct.rtx_def, ptr %53, i64 0, i32 1
  %105 = load ptr, ptr %104, align 8, !tbaa !16
  br label %106

106:                                              ; preds = %87, %95
  %107 = phi ptr [ %105, %95 ], [ null, %87 ]
  ret ptr %107
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc ptr @ix86_expand_sse_pcmpestr(ptr nocapture noundef readonly %0, ptr nocapture noundef readonly %1, ptr noundef %2) unnamed_addr #9 {
  %4 = getelementptr inbounds %struct.tree_exp, ptr %1, i64 1, i32 0, i32 2
  %5 = load ptr, ptr %4, align 8, !tbaa !16
  %6 = getelementptr inbounds %struct.tree_exp, ptr %1, i64 1, i32 1
  %7 = load ptr, ptr %6, align 8, !tbaa !16
  %8 = getelementptr inbounds %struct.tree_exp, ptr %1, i64 1, i32 2
  %9 = load ptr, ptr %8, align 8, !tbaa !16
  %10 = getelementptr inbounds %struct.tree_exp, ptr %1, i64 1, i32 3
  %11 = load ptr, ptr %10, align 8, !tbaa !16
  %12 = getelementptr inbounds %struct.tree_exp, ptr %1, i64 2
  %13 = load ptr, ptr %12, align 8, !tbaa !16
  %14 = tail call ptr @expand_expr_real(ptr noundef %5, ptr noundef null, i32 noundef 0, i32 noundef 0, ptr noundef null) #30
  %15 = tail call ptr @expand_expr_real(ptr noundef %7, ptr noundef null, i32 noundef 0, i32 noundef 0, ptr noundef null) #30
  %16 = tail call ptr @expand_expr_real(ptr noundef %9, ptr noundef null, i32 noundef 0, i32 noundef 0, ptr noundef null) #30
  %17 = tail call ptr @expand_expr_real(ptr noundef %11, ptr noundef null, i32 noundef 0, i32 noundef 0, ptr noundef null) #30
  %18 = tail call ptr @expand_expr_real(ptr noundef %13, ptr noundef null, i32 noundef 0, i32 noundef 0, ptr noundef null) #30
  %19 = getelementptr inbounds %struct.builtin_description, ptr %0, i64 0, i32 1
  %20 = load i32, ptr %19, align 4, !tbaa !353
  %21 = zext i32 %20 to i64
  %22 = getelementptr inbounds [0 x %struct.insn_data], ptr @insn_data, i64 0, i64 %21, i32 3
  %23 = load ptr, ptr %22, align 8, !tbaa !340
  %24 = getelementptr inbounds %struct.insn_operand_data, ptr %23, i64 0, i32 2
  %25 = load i16, ptr %24, align 8
  %26 = zext i16 %25 to i32
  %27 = getelementptr inbounds %struct.insn_operand_data, ptr %23, i64 1, i32 2
  %28 = load i16, ptr %27, align 8
  %29 = zext i16 %28 to i32
  %30 = getelementptr inbounds %struct.insn_operand_data, ptr %23, i64 2, i32 2
  %31 = load i16, ptr %30, align 8
  %32 = zext i16 %31 to i32
  %33 = getelementptr inbounds %struct.insn_operand_data, ptr %23, i64 3, i32 2
  %34 = load i16, ptr %33, align 8
  %35 = zext i16 %34 to i32
  %36 = getelementptr inbounds %struct.insn_operand_data, ptr %23, i64 4, i32 2
  %37 = load i16, ptr %36, align 8
  %38 = zext i16 %37 to i32
  %39 = getelementptr inbounds %struct.insn_operand_data, ptr %23, i64 5, i32 2
  %40 = load i16, ptr %39, align 8
  %41 = zext i16 %40 to i32
  %42 = getelementptr inbounds %struct.insn_operand_data, ptr %23, i64 6, i32 2
  %43 = load i16, ptr %42, align 8
  %44 = zext i16 %43 to i32
  %45 = zext i16 %31 to i64
  %46 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %45
  %47 = load i8, ptr %46, align 1, !tbaa !16
  %48 = add i8 %47, -12
  %49 = icmp ult i8 %48, 6
  %50 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 64), align 16
  %51 = icmp eq ptr %50, %14
  %52 = select i1 %49, i1 %51, i1 false
  br i1 %52, label %53, label %56

53:                                               ; preds = %3
  %54 = getelementptr inbounds [87 x ptr], ptr @const_tiny_rtx, i64 0, i64 %45
  %55 = load ptr, ptr %54, align 8, !tbaa !5
  br label %56

56:                                               ; preds = %53, %3
  %57 = phi ptr [ %14, %3 ], [ %55, %53 ]
  %58 = zext i16 %37 to i64
  %59 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %58
  %60 = load i8, ptr %59, align 1, !tbaa !16
  %61 = add i8 %60, -12
  %62 = icmp ult i8 %61, 6
  %63 = icmp eq ptr %50, %16
  %64 = select i1 %62, i1 %63, i1 false
  br i1 %64, label %65, label %68

65:                                               ; preds = %56
  %66 = getelementptr inbounds [87 x ptr], ptr @const_tiny_rtx, i64 0, i64 %58
  %67 = load ptr, ptr %66, align 8, !tbaa !5
  br label %68

68:                                               ; preds = %65, %56
  %69 = phi ptr [ %16, %56 ], [ %67, %65 ]
  %70 = getelementptr inbounds %struct.insn_operand_data, ptr %23, i64 2
  %71 = load ptr, ptr %70, align 8, !tbaa !342
  %72 = tail call i32 %71(ptr noundef %57, i32 noundef %32) #30
  %73 = icmp eq i32 %72, 0
  br i1 %73, label %74, label %76

74:                                               ; preds = %68
  %75 = tail call ptr @copy_to_mode_reg(i32 noundef %32, ptr noundef %57) #30
  br label %76

76:                                               ; preds = %74, %68
  %77 = phi ptr [ %57, %68 ], [ %75, %74 ]
  %78 = load i32, ptr %19, align 4, !tbaa !353
  %79 = zext i32 %78 to i64
  %80 = getelementptr inbounds [0 x %struct.insn_data], ptr @insn_data, i64 0, i64 %79, i32 3
  %81 = load ptr, ptr %80, align 8, !tbaa !340
  %82 = getelementptr inbounds %struct.insn_operand_data, ptr %81, i64 3
  %83 = load ptr, ptr %82, align 8, !tbaa !342
  %84 = tail call i32 %83(ptr noundef %15, i32 noundef %35) #30
  %85 = icmp eq i32 %84, 0
  br i1 %85, label %86, label %88

86:                                               ; preds = %76
  %87 = tail call ptr @copy_to_mode_reg(i32 noundef %35, ptr noundef %15) #30
  br label %88

88:                                               ; preds = %86, %76
  %89 = phi ptr [ %15, %76 ], [ %87, %86 ]
  %90 = load i32, ptr @optimize, align 4, !tbaa !20
  %91 = icmp eq i32 %90, 0
  br i1 %91, label %95, label %92

92:                                               ; preds = %88
  %93 = tail call i32 @register_operand(ptr noundef %69, i32 noundef %38) #30
  %94 = icmp eq i32 %93, 0
  br i1 %94, label %104, label %95

95:                                               ; preds = %92, %88
  %96 = load i32, ptr %19, align 4, !tbaa !353
  %97 = zext i32 %96 to i64
  %98 = getelementptr inbounds [0 x %struct.insn_data], ptr @insn_data, i64 0, i64 %97, i32 3
  %99 = load ptr, ptr %98, align 8, !tbaa !340
  %100 = getelementptr inbounds %struct.insn_operand_data, ptr %99, i64 4
  %101 = load ptr, ptr %100, align 8, !tbaa !342
  %102 = tail call i32 %101(ptr noundef %69, i32 noundef %38) #30
  %103 = icmp eq i32 %102, 0
  br i1 %103, label %104, label %106

104:                                              ; preds = %95, %92
  %105 = tail call ptr @copy_to_mode_reg(i32 noundef %38, ptr noundef %69) #30
  br label %106

106:                                              ; preds = %104, %95
  %107 = phi ptr [ %69, %95 ], [ %105, %104 ]
  %108 = load i32, ptr %19, align 4, !tbaa !353
  %109 = zext i32 %108 to i64
  %110 = getelementptr inbounds [0 x %struct.insn_data], ptr @insn_data, i64 0, i64 %109, i32 3
  %111 = load ptr, ptr %110, align 8, !tbaa !340
  %112 = getelementptr inbounds %struct.insn_operand_data, ptr %111, i64 5
  %113 = load ptr, ptr %112, align 8, !tbaa !342
  %114 = tail call i32 %113(ptr noundef %17, i32 noundef %41) #30
  %115 = icmp eq i32 %114, 0
  br i1 %115, label %116, label %118

116:                                              ; preds = %106
  %117 = tail call ptr @copy_to_mode_reg(i32 noundef %41, ptr noundef %17) #30
  br label %118

118:                                              ; preds = %116, %106
  %119 = phi ptr [ %17, %106 ], [ %117, %116 ]
  %120 = load i32, ptr %19, align 4, !tbaa !353
  %121 = zext i32 %120 to i64
  %122 = getelementptr inbounds [0 x %struct.insn_data], ptr @insn_data, i64 0, i64 %121, i32 3
  %123 = load ptr, ptr %122, align 8, !tbaa !340
  %124 = getelementptr inbounds %struct.insn_operand_data, ptr %123, i64 6
  %125 = load ptr, ptr %124, align 8, !tbaa !342
  %126 = tail call i32 %125(ptr noundef %18, i32 noundef %44) #30
  %127 = icmp eq i32 %126, 0
  br i1 %127, label %128, label %130

128:                                              ; preds = %118
  tail call void (ptr, ...) @error(ptr noundef nonnull @.str.1346) #30
  %129 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 64), align 16, !tbaa !5
  br label %217

130:                                              ; preds = %118
  %131 = getelementptr inbounds %struct.builtin_description, ptr %0, i64 0, i32 3
  %132 = load i32, ptr %131, align 8, !tbaa !356
  switch i32 %132, label %180 [
    i32 462, label %133
    i32 463, label %156
  ]

133:                                              ; preds = %130
  %134 = load i32, ptr @optimize, align 4, !tbaa !20
  %135 = icmp eq i32 %134, 0
  %136 = icmp ne ptr %2, null
  %137 = and i1 %136, %135
  br i1 %137, label %138, label %151

138:                                              ; preds = %133
  %139 = load i32, ptr %2, align 8
  %140 = lshr i32 %139, 16
  %141 = and i32 %140, 255
  %142 = icmp eq i32 %141, %26
  br i1 %142, label %143, label %151

143:                                              ; preds = %138
  %144 = load i32, ptr %19, align 4, !tbaa !353
  %145 = zext i32 %144 to i64
  %146 = getelementptr inbounds [0 x %struct.insn_data], ptr @insn_data, i64 0, i64 %145, i32 3
  %147 = load ptr, ptr %146, align 8, !tbaa !340
  %148 = load ptr, ptr %147, align 8, !tbaa !342
  %149 = tail call i32 %148(ptr noundef nonnull %2, i32 noundef %26) #30
  %150 = icmp eq i32 %149, 0
  br i1 %150, label %151, label %153

151:                                              ; preds = %143, %138, %133
  %152 = tail call ptr @gen_reg_rtx(i32 noundef %26) #30
  br label %153

153:                                              ; preds = %151, %143
  %154 = phi ptr [ %152, %151 ], [ %2, %143 ]
  %155 = tail call ptr @gen_reg_rtx(i32 noundef %29) #30
  br label %188

156:                                              ; preds = %130
  %157 = load i32, ptr @optimize, align 4, !tbaa !20
  %158 = icmp eq i32 %157, 0
  %159 = icmp ne ptr %2, null
  %160 = and i1 %159, %158
  br i1 %160, label %161, label %175

161:                                              ; preds = %156
  %162 = load i32, ptr %2, align 8
  %163 = lshr i32 %162, 16
  %164 = and i32 %163, 255
  %165 = icmp eq i32 %164, %29
  br i1 %165, label %166, label %175

166:                                              ; preds = %161
  %167 = load i32, ptr %19, align 4, !tbaa !353
  %168 = zext i32 %167 to i64
  %169 = getelementptr inbounds [0 x %struct.insn_data], ptr @insn_data, i64 0, i64 %168, i32 3
  %170 = load ptr, ptr %169, align 8, !tbaa !340
  %171 = getelementptr inbounds %struct.insn_operand_data, ptr %170, i64 1
  %172 = load ptr, ptr %171, align 8, !tbaa !342
  %173 = tail call i32 %172(ptr noundef nonnull %2, i32 noundef %29) #30
  %174 = icmp eq i32 %173, 0
  br i1 %174, label %175, label %177

175:                                              ; preds = %166, %161, %156
  %176 = tail call ptr @gen_reg_rtx(i32 noundef %29) #30
  br label %177

177:                                              ; preds = %175, %166
  %178 = phi ptr [ %176, %175 ], [ %2, %166 ]
  %179 = tail call ptr @gen_reg_rtx(i32 noundef %26) #30
  br label %188

180:                                              ; preds = %130
  %181 = getelementptr inbounds %struct.builtin_description, ptr %0, i64 0, i32 5
  %182 = load i32, ptr %181, align 8, !tbaa !355
  %183 = icmp eq i32 %182, 0
  br i1 %183, label %184, label %185

184:                                              ; preds = %180
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 23300, ptr noundef nonnull @.str.131) #30
  br label %185

185:                                              ; preds = %180, %184
  %186 = tail call ptr @gen_reg_rtx(i32 noundef %26) #30
  %187 = tail call ptr @gen_reg_rtx(i32 noundef %29) #30
  br label %188

188:                                              ; preds = %177, %185, %153
  %189 = phi ptr [ %178, %177 ], [ %187, %185 ], [ %155, %153 ]
  %190 = phi ptr [ %179, %177 ], [ %186, %185 ], [ %154, %153 ]
  %191 = phi ptr [ %178, %177 ], [ %2, %185 ], [ %154, %153 ]
  %192 = load i32, ptr %19, align 4, !tbaa !353
  %193 = zext i32 %192 to i64
  %194 = getelementptr inbounds [0 x %struct.insn_data], ptr @insn_data, i64 0, i64 %193, i32 2
  %195 = load ptr, ptr %194, align 8, !tbaa !344
  %196 = tail call ptr (ptr, ...) %195(ptr noundef %190, ptr noundef %189, ptr noundef %77, ptr noundef %89, ptr noundef %107, ptr noundef %119, ptr noundef %18) #30
  %197 = icmp eq ptr %196, null
  br i1 %197, label %217, label %198

198:                                              ; preds = %188
  %199 = tail call ptr @emit_insn(ptr noundef nonnull %196) #30
  %200 = getelementptr inbounds %struct.builtin_description, ptr %0, i64 0, i32 5
  %201 = load i32, ptr %200, align 8, !tbaa !355
  %202 = icmp eq i32 %201, 0
  br i1 %202, label %217, label %203

203:                                              ; preds = %198
  %204 = tail call ptr @gen_reg_rtx(i32 noundef 16) #30
  %205 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 64), align 16, !tbaa !5
  %206 = tail call ptr @emit_move_insn(ptr noundef %204, ptr noundef %205) #30
  %207 = tail call ptr @gen_rtx_SUBREG(i32 noundef 14, ptr noundef %204, i32 noundef 0) #30
  %208 = tail call ptr @gen_rtx_fmt_e_stat(i32 noundef 40, i32 noundef 0, ptr noundef %207) #30
  %209 = load i32, ptr %200, align 8, !tbaa !355
  %210 = tail call ptr @gen_rtx_REG(i32 noundef %209, i32 noundef 17) #30
  %211 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 64), align 16, !tbaa !5
  %212 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 81, i32 noundef 14, ptr noundef %210, ptr noundef %211) #30
  %213 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 23, i32 noundef 0, ptr noundef %208, ptr noundef %212) #30
  %214 = tail call ptr @emit_insn(ptr noundef %213) #30
  %215 = getelementptr inbounds %struct.rtx_def, ptr %207, i64 0, i32 1
  %216 = load ptr, ptr %215, align 8, !tbaa !16
  br label %217

217:                                              ; preds = %198, %188, %203, %128
  %218 = phi ptr [ %216, %203 ], [ %129, %128 ], [ null, %188 ], [ %191, %198 ]
  ret ptr %218
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc ptr @ix86_expand_sse_pcmpistr(ptr nocapture noundef readonly %0, ptr nocapture noundef readonly %1, ptr noundef %2) unnamed_addr #9 {
  %4 = getelementptr inbounds %struct.tree_exp, ptr %1, i64 1, i32 0, i32 2
  %5 = load ptr, ptr %4, align 8, !tbaa !16
  %6 = getelementptr inbounds %struct.tree_exp, ptr %1, i64 1, i32 1
  %7 = load ptr, ptr %6, align 8, !tbaa !16
  %8 = getelementptr inbounds %struct.tree_exp, ptr %1, i64 1, i32 2
  %9 = load ptr, ptr %8, align 8, !tbaa !16
  %10 = tail call ptr @expand_expr_real(ptr noundef %5, ptr noundef null, i32 noundef 0, i32 noundef 0, ptr noundef null) #30
  %11 = tail call ptr @expand_expr_real(ptr noundef %7, ptr noundef null, i32 noundef 0, i32 noundef 0, ptr noundef null) #30
  %12 = tail call ptr @expand_expr_real(ptr noundef %9, ptr noundef null, i32 noundef 0, i32 noundef 0, ptr noundef null) #30
  %13 = getelementptr inbounds %struct.builtin_description, ptr %0, i64 0, i32 1
  %14 = load i32, ptr %13, align 4, !tbaa !353
  %15 = zext i32 %14 to i64
  %16 = getelementptr inbounds [0 x %struct.insn_data], ptr @insn_data, i64 0, i64 %15, i32 3
  %17 = load ptr, ptr %16, align 8, !tbaa !340
  %18 = getelementptr inbounds %struct.insn_operand_data, ptr %17, i64 0, i32 2
  %19 = load i16, ptr %18, align 8
  %20 = zext i16 %19 to i32
  %21 = getelementptr inbounds %struct.insn_operand_data, ptr %17, i64 1, i32 2
  %22 = load i16, ptr %21, align 8
  %23 = zext i16 %22 to i32
  %24 = getelementptr inbounds %struct.insn_operand_data, ptr %17, i64 2, i32 2
  %25 = load i16, ptr %24, align 8
  %26 = zext i16 %25 to i32
  %27 = getelementptr inbounds %struct.insn_operand_data, ptr %17, i64 3, i32 2
  %28 = load i16, ptr %27, align 8
  %29 = zext i16 %28 to i32
  %30 = getelementptr inbounds %struct.insn_operand_data, ptr %17, i64 4, i32 2
  %31 = load i16, ptr %30, align 8
  %32 = zext i16 %31 to i32
  %33 = zext i16 %25 to i64
  %34 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %33
  %35 = load i8, ptr %34, align 1, !tbaa !16
  %36 = add i8 %35, -12
  %37 = icmp ult i8 %36, 6
  %38 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 64), align 16
  %39 = icmp eq ptr %38, %10
  %40 = select i1 %37, i1 %39, i1 false
  br i1 %40, label %41, label %44

41:                                               ; preds = %3
  %42 = getelementptr inbounds [87 x ptr], ptr @const_tiny_rtx, i64 0, i64 %33
  %43 = load ptr, ptr %42, align 8, !tbaa !5
  br label %44

44:                                               ; preds = %41, %3
  %45 = phi ptr [ %10, %3 ], [ %43, %41 ]
  %46 = zext i16 %28 to i64
  %47 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %46
  %48 = load i8, ptr %47, align 1, !tbaa !16
  %49 = add i8 %48, -12
  %50 = icmp ult i8 %49, 6
  %51 = icmp eq ptr %38, %11
  %52 = select i1 %50, i1 %51, i1 false
  br i1 %52, label %53, label %56

53:                                               ; preds = %44
  %54 = getelementptr inbounds [87 x ptr], ptr @const_tiny_rtx, i64 0, i64 %46
  %55 = load ptr, ptr %54, align 8, !tbaa !5
  br label %56

56:                                               ; preds = %53, %44
  %57 = phi ptr [ %11, %44 ], [ %55, %53 ]
  %58 = getelementptr inbounds %struct.insn_operand_data, ptr %17, i64 2
  %59 = load ptr, ptr %58, align 8, !tbaa !342
  %60 = tail call i32 %59(ptr noundef %45, i32 noundef %26) #30
  %61 = icmp eq i32 %60, 0
  br i1 %61, label %62, label %64

62:                                               ; preds = %56
  %63 = tail call ptr @copy_to_mode_reg(i32 noundef %26, ptr noundef %45) #30
  br label %64

64:                                               ; preds = %62, %56
  %65 = phi ptr [ %45, %56 ], [ %63, %62 ]
  %66 = load i32, ptr @optimize, align 4, !tbaa !20
  %67 = icmp eq i32 %66, 0
  br i1 %67, label %71, label %68

68:                                               ; preds = %64
  %69 = tail call i32 @register_operand(ptr noundef %57, i32 noundef %29) #30
  %70 = icmp eq i32 %69, 0
  br i1 %70, label %80, label %71

71:                                               ; preds = %68, %64
  %72 = load i32, ptr %13, align 4, !tbaa !353
  %73 = zext i32 %72 to i64
  %74 = getelementptr inbounds [0 x %struct.insn_data], ptr @insn_data, i64 0, i64 %73, i32 3
  %75 = load ptr, ptr %74, align 8, !tbaa !340
  %76 = getelementptr inbounds %struct.insn_operand_data, ptr %75, i64 3
  %77 = load ptr, ptr %76, align 8, !tbaa !342
  %78 = tail call i32 %77(ptr noundef %57, i32 noundef %29) #30
  %79 = icmp eq i32 %78, 0
  br i1 %79, label %80, label %82

80:                                               ; preds = %71, %68
  %81 = tail call ptr @copy_to_mode_reg(i32 noundef %29, ptr noundef %57) #30
  br label %82

82:                                               ; preds = %80, %71
  %83 = phi ptr [ %57, %71 ], [ %81, %80 ]
  %84 = load i32, ptr %13, align 4, !tbaa !353
  %85 = zext i32 %84 to i64
  %86 = getelementptr inbounds [0 x %struct.insn_data], ptr @insn_data, i64 0, i64 %85, i32 3
  %87 = load ptr, ptr %86, align 8, !tbaa !340
  %88 = getelementptr inbounds %struct.insn_operand_data, ptr %87, i64 4
  %89 = load ptr, ptr %88, align 8, !tbaa !342
  %90 = tail call i32 %89(ptr noundef %12, i32 noundef %32) #30
  %91 = icmp eq i32 %90, 0
  br i1 %91, label %92, label %94

92:                                               ; preds = %82
  tail call void (ptr, ...) @error(ptr noundef nonnull @.str.1347) #30
  %93 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 64), align 16, !tbaa !5
  br label %181

94:                                               ; preds = %82
  %95 = getelementptr inbounds %struct.builtin_description, ptr %0, i64 0, i32 3
  %96 = load i32, ptr %95, align 8, !tbaa !356
  switch i32 %96, label %144 [
    i32 469, label %97
    i32 470, label %120
  ]

97:                                               ; preds = %94
  %98 = load i32, ptr @optimize, align 4, !tbaa !20
  %99 = icmp eq i32 %98, 0
  %100 = icmp ne ptr %2, null
  %101 = and i1 %100, %99
  br i1 %101, label %102, label %115

102:                                              ; preds = %97
  %103 = load i32, ptr %2, align 8
  %104 = lshr i32 %103, 16
  %105 = and i32 %104, 255
  %106 = icmp eq i32 %105, %20
  br i1 %106, label %107, label %115

107:                                              ; preds = %102
  %108 = load i32, ptr %13, align 4, !tbaa !353
  %109 = zext i32 %108 to i64
  %110 = getelementptr inbounds [0 x %struct.insn_data], ptr @insn_data, i64 0, i64 %109, i32 3
  %111 = load ptr, ptr %110, align 8, !tbaa !340
  %112 = load ptr, ptr %111, align 8, !tbaa !342
  %113 = tail call i32 %112(ptr noundef nonnull %2, i32 noundef %20) #30
  %114 = icmp eq i32 %113, 0
  br i1 %114, label %115, label %117

115:                                              ; preds = %107, %102, %97
  %116 = tail call ptr @gen_reg_rtx(i32 noundef %20) #30
  br label %117

117:                                              ; preds = %115, %107
  %118 = phi ptr [ %116, %115 ], [ %2, %107 ]
  %119 = tail call ptr @gen_reg_rtx(i32 noundef %23) #30
  br label %152

120:                                              ; preds = %94
  %121 = load i32, ptr @optimize, align 4, !tbaa !20
  %122 = icmp eq i32 %121, 0
  %123 = icmp ne ptr %2, null
  %124 = and i1 %123, %122
  br i1 %124, label %125, label %139

125:                                              ; preds = %120
  %126 = load i32, ptr %2, align 8
  %127 = lshr i32 %126, 16
  %128 = and i32 %127, 255
  %129 = icmp eq i32 %128, %23
  br i1 %129, label %130, label %139

130:                                              ; preds = %125
  %131 = load i32, ptr %13, align 4, !tbaa !353
  %132 = zext i32 %131 to i64
  %133 = getelementptr inbounds [0 x %struct.insn_data], ptr @insn_data, i64 0, i64 %132, i32 3
  %134 = load ptr, ptr %133, align 8, !tbaa !340
  %135 = getelementptr inbounds %struct.insn_operand_data, ptr %134, i64 1
  %136 = load ptr, ptr %135, align 8, !tbaa !342
  %137 = tail call i32 %136(ptr noundef nonnull %2, i32 noundef %23) #30
  %138 = icmp eq i32 %137, 0
  br i1 %138, label %139, label %141

139:                                              ; preds = %130, %125, %120
  %140 = tail call ptr @gen_reg_rtx(i32 noundef %23) #30
  br label %141

141:                                              ; preds = %139, %130
  %142 = phi ptr [ %140, %139 ], [ %2, %130 ]
  %143 = tail call ptr @gen_reg_rtx(i32 noundef %20) #30
  br label %152

144:                                              ; preds = %94
  %145 = getelementptr inbounds %struct.builtin_description, ptr %0, i64 0, i32 5
  %146 = load i32, ptr %145, align 8, !tbaa !355
  %147 = icmp eq i32 %146, 0
  br i1 %147, label %148, label %149

148:                                              ; preds = %144
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 23395, ptr noundef nonnull @.str.131) #30
  br label %149

149:                                              ; preds = %144, %148
  %150 = tail call ptr @gen_reg_rtx(i32 noundef %20) #30
  %151 = tail call ptr @gen_reg_rtx(i32 noundef %23) #30
  br label %152

152:                                              ; preds = %141, %149, %117
  %153 = phi ptr [ %142, %141 ], [ %151, %149 ], [ %119, %117 ]
  %154 = phi ptr [ %143, %141 ], [ %150, %149 ], [ %118, %117 ]
  %155 = phi ptr [ %142, %141 ], [ %2, %149 ], [ %118, %117 ]
  %156 = load i32, ptr %13, align 4, !tbaa !353
  %157 = zext i32 %156 to i64
  %158 = getelementptr inbounds [0 x %struct.insn_data], ptr @insn_data, i64 0, i64 %157, i32 2
  %159 = load ptr, ptr %158, align 8, !tbaa !344
  %160 = tail call ptr (ptr, ...) %159(ptr noundef %154, ptr noundef %153, ptr noundef %65, ptr noundef %83, ptr noundef %12) #30
  %161 = icmp eq ptr %160, null
  br i1 %161, label %181, label %162

162:                                              ; preds = %152
  %163 = tail call ptr @emit_insn(ptr noundef nonnull %160) #30
  %164 = getelementptr inbounds %struct.builtin_description, ptr %0, i64 0, i32 5
  %165 = load i32, ptr %164, align 8, !tbaa !355
  %166 = icmp eq i32 %165, 0
  br i1 %166, label %181, label %167

167:                                              ; preds = %162
  %168 = tail call ptr @gen_reg_rtx(i32 noundef 16) #30
  %169 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 64), align 16, !tbaa !5
  %170 = tail call ptr @emit_move_insn(ptr noundef %168, ptr noundef %169) #30
  %171 = tail call ptr @gen_rtx_SUBREG(i32 noundef 14, ptr noundef %168, i32 noundef 0) #30
  %172 = tail call ptr @gen_rtx_fmt_e_stat(i32 noundef 40, i32 noundef 0, ptr noundef %171) #30
  %173 = load i32, ptr %164, align 8, !tbaa !355
  %174 = tail call ptr @gen_rtx_REG(i32 noundef %173, i32 noundef 17) #30
  %175 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 64), align 16, !tbaa !5
  %176 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 81, i32 noundef 14, ptr noundef %174, ptr noundef %175) #30
  %177 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 23, i32 noundef 0, ptr noundef %172, ptr noundef %176) #30
  %178 = tail call ptr @emit_insn(ptr noundef %177) #30
  %179 = getelementptr inbounds %struct.rtx_def, ptr %171, i64 0, i32 1
  %180 = load ptr, ptr %179, align 8, !tbaa !16
  br label %181

181:                                              ; preds = %162, %152, %167, %92
  %182 = phi ptr [ %180, %167 ], [ %93, %92 ], [ null, %152 ], [ %155, %162 ]
  ret ptr %182
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc ptr @ix86_expand_multi_arg_builtin(i32 noundef %0, ptr nocapture noundef readonly %1, ptr noundef %2, i32 noundef %3, i32 noundef %4) unnamed_addr #9 {
  %6 = alloca [4 x %struct.anon.3], align 16
  call void @llvm.lifetime.start.p0(i64 64, ptr nonnull %6) #30
  %7 = zext i32 %0 to i64
  %8 = getelementptr inbounds [0 x %struct.insn_data], ptr @insn_data, i64 0, i64 %7, i32 3
  %9 = load ptr, ptr %8, align 8, !tbaa !340
  %10 = getelementptr inbounds %struct.insn_operand_data, ptr %9, i64 0, i32 2
  %11 = load i16, ptr %10, align 8
  %12 = zext i16 %11 to i32
  switch i32 %3, label %19 [
    i32 183, label %20
    i32 192, label %20
    i32 198, label %20
    i32 210, label %20
    i32 197, label %13
    i32 182, label %13
    i32 209, label %13
    i32 191, label %13
    i32 187, label %13
    i32 202, label %13
    i32 201, label %13
    i32 206, label %13
    i32 205, label %13
    i32 179, label %13
    i32 193, label %13
    i32 213, label %13
    i32 176, label %13
    i32 188, label %13
    i32 140, label %14
    i32 107, label %14
    i32 116, label %14
    i32 147, label %14
    i32 154, label %14
    i32 96, label %14
    i32 114, label %15
    i32 146, label %15
    i32 153, label %15
    i32 95, label %15
    i32 50, label %16
    i32 23, label %16
    i32 66, label %16
    i32 43, label %16
    i32 30, label %16
    i32 57, label %16
    i32 61, label %16
    i32 21, label %16
    i32 31, label %16
    i32 32, label %16
    i32 58, label %16
    i32 29, label %16
    i32 53, label %16
    i32 60, label %16
    i32 262, label %17
    i32 263, label %17
    i32 264, label %17
    i32 261, label %17
    i32 268, label %18
    i32 266, label %18
    i32 267, label %18
    i32 269, label %18
    i32 270, label %18
    i32 265, label %18
  ]

13:                                               ; preds = %5, %5, %5, %5, %5, %5, %5, %5, %5, %5, %5, %5, %5, %5
  br label %20

14:                                               ; preds = %5, %5, %5, %5, %5, %5
  br label %20

15:                                               ; preds = %5, %5, %5, %5
  br label %20

16:                                               ; preds = %5, %5, %5, %5, %5, %5, %5, %5, %5, %5, %5, %5, %5, %5
  br label %20

17:                                               ; preds = %5, %5, %5, %5
  br label %20

18:                                               ; preds = %5, %5, %5, %5, %5, %5
  br label %20

19:                                               ; preds = %5
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 22954, ptr noundef nonnull @.str.131) #30
  br label %20

20:                                               ; preds = %5, %5, %5, %5, %19, %18, %17, %16, %15, %14, %13
  %21 = phi i1 [ true, %19 ], [ true, %18 ], [ false, %17 ], [ true, %16 ], [ true, %15 ], [ true, %14 ], [ true, %13 ], [ true, %5 ], [ true, %5 ], [ true, %5 ], [ true, %5 ]
  %22 = phi i1 [ true, %19 ], [ false, %18 ], [ true, %17 ], [ true, %16 ], [ true, %15 ], [ true, %14 ], [ true, %13 ], [ true, %5 ], [ true, %5 ], [ true, %5 ], [ true, %5 ]
  %23 = phi i1 [ false, %19 ], [ false, %18 ], [ false, %17 ], [ false, %16 ], [ true, %15 ], [ false, %14 ], [ false, %13 ], [ true, %5 ], [ true, %5 ], [ true, %5 ], [ true, %5 ]
  %24 = phi i1 [ false, %19 ], [ true, %18 ], [ true, %17 ], [ true, %16 ], [ true, %15 ], [ true, %14 ], [ true, %13 ], [ true, %5 ], [ true, %5 ], [ true, %5 ], [ true, %5 ]
  %25 = phi i32 [ undef, %19 ], [ 2, %18 ], [ 2, %17 ], [ 1, %16 ], [ 2, %15 ], [ 2, %14 ], [ 3, %13 ], [ 4, %5 ], [ 4, %5 ], [ 4, %5 ], [ 4, %5 ]
  %26 = load i32, ptr @optimize, align 4, !tbaa !20
  %27 = icmp eq i32 %26, 0
  %28 = icmp ne ptr %2, null
  %29 = and i1 %28, %27
  br i1 %29, label %30, label %39

30:                                               ; preds = %20
  %31 = load i32, ptr %2, align 8
  %32 = lshr i32 %31, 16
  %33 = and i32 %32, 255
  %34 = icmp eq i32 %33, %12
  br i1 %34, label %35, label %39

35:                                               ; preds = %30
  %36 = load ptr, ptr %9, align 8, !tbaa !342
  %37 = tail call i32 %36(ptr noundef nonnull %2, i32 noundef %12) #30
  %38 = icmp eq i32 %37, 0
  br i1 %38, label %39, label %41

39:                                               ; preds = %35, %30, %20
  %40 = tail call ptr @gen_reg_rtx(i32 noundef %12) #30
  br label %41

41:                                               ; preds = %35, %39
  %42 = phi ptr [ %40, %39 ], [ %2, %35 ]
  br i1 %24, label %43, label %111

43:                                               ; preds = %41
  %44 = add nsw i32 %25, -1
  %45 = select i1 %21, i64 1, i64 2
  %46 = zext i32 %44 to i64
  %47 = zext i32 %25 to i64
  br label %48

48:                                               ; preds = %43, %104
  %49 = phi i64 [ 0, %43 ], [ %109, %104 ]
  %50 = phi i32 [ 0, %43 ], [ %105, %104 ]
  %51 = add nuw nsw i64 %49, 3
  %52 = getelementptr inbounds %struct.tree_exp, ptr %1, i64 0, i32 3, i64 %51
  %53 = load ptr, ptr %52, align 8, !tbaa !16
  %54 = tail call ptr @expand_expr_real(ptr noundef %53, ptr noundef null, i32 noundef 0, i32 noundef 0, ptr noundef null) #30
  %55 = add nuw nsw i64 %45, %49
  %56 = getelementptr inbounds %struct.insn_operand_data, ptr %9, i64 %55, i32 2
  %57 = load i16, ptr %56, align 8
  %58 = zext i16 %57 to i32
  %59 = icmp eq i64 %49, %46
  %60 = select i1 %23, i1 %59, i1 false
  br i1 %60, label %61, label %65

61:                                               ; preds = %48
  %62 = load i32, ptr %54, align 8
  %63 = and i32 %62, 65535
  %64 = icmp eq i32 %63, 30
  br i1 %64, label %104, label %102

65:                                               ; preds = %48
  %66 = zext i16 %57 to i64
  %67 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %66
  %68 = load i8, ptr %67, align 1, !tbaa !16
  %69 = add i8 %68, -12
  %70 = icmp ult i8 %69, 6
  %71 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 64), align 16
  %72 = icmp eq ptr %71, %54
  %73 = select i1 %70, i1 %72, i1 false
  br i1 %73, label %74, label %77

74:                                               ; preds = %65
  %75 = getelementptr inbounds [87 x ptr], ptr @const_tiny_rtx, i64 0, i64 %66
  %76 = load ptr, ptr %75, align 8, !tbaa !5
  br label %77

77:                                               ; preds = %74, %65
  %78 = phi ptr [ %54, %65 ], [ %76, %74 ]
  %79 = tail call i32 @memory_operand(ptr noundef %78, i32 noundef %58) #30
  %80 = icmp ne i32 %79, 0
  %81 = zext i1 %80 to i32
  %82 = add nsw i32 %50, %81
  %83 = load i32, ptr %78, align 8
  %84 = lshr i32 %83, 16
  %85 = and i32 %84, 255
  %86 = icmp eq i32 %85, %58
  %87 = icmp eq i32 %85, 0
  %88 = or i1 %86, %87
  br i1 %88, label %90, label %89

89:                                               ; preds = %77
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 22989, ptr noundef nonnull @.str.131) #30
  br label %90

90:                                               ; preds = %77, %89
  %91 = load i32, ptr @optimize, align 4, !tbaa !20
  %92 = icmp eq i32 %91, 0
  br i1 %92, label %93, label %100

93:                                               ; preds = %90
  %94 = getelementptr inbounds %struct.insn_operand_data, ptr %9, i64 %55
  %95 = load ptr, ptr %94, align 8, !tbaa !342
  %96 = tail call i32 %95(ptr noundef nonnull %78, i32 noundef %58) #30
  %97 = icmp eq i32 %96, 0
  %98 = icmp sgt i32 %82, 1
  %99 = select i1 %97, i1 true, i1 %98
  br i1 %99, label %100, label %104

100:                                              ; preds = %93, %90
  %101 = tail call ptr @force_reg(i32 noundef %58, ptr noundef nonnull %78) #30
  br label %104

102:                                              ; preds = %61
  tail call void (ptr, ...) @error(ptr noundef nonnull @.str.1348) #30
  %103 = tail call ptr @gen_reg_rtx(i32 noundef %12) #30
  br label %172

104:                                              ; preds = %61, %93, %100
  %105 = phi i32 [ %50, %61 ], [ %82, %100 ], [ %82, %93 ]
  %106 = phi ptr [ %54, %61 ], [ %101, %100 ], [ %78, %93 ]
  %107 = getelementptr inbounds [4 x %struct.anon.3], ptr %6, i64 0, i64 %49
  store ptr %106, ptr %107, align 16, !tbaa !453
  %108 = getelementptr inbounds [4 x %struct.anon.3], ptr %6, i64 0, i64 %49, i32 1
  store i32 %58, ptr %108, align 8, !tbaa !455
  %109 = add nuw nsw i64 %49, 1
  %110 = icmp eq i64 %109, %47
  br i1 %110, label %111, label %48, !llvm.loop !458

111:                                              ; preds = %104, %41
  switch i32 %25, label %166 [
    i32 1, label %112
    i32 2, label %117
    i32 3, label %146
    i32 4, label %155
  ]

112:                                              ; preds = %111
  %113 = getelementptr inbounds [0 x %struct.insn_data], ptr @insn_data, i64 0, i64 %7, i32 2
  %114 = load ptr, ptr %113, align 8, !tbaa !344
  %115 = load ptr, ptr %6, align 16, !tbaa !453
  %116 = tail call ptr (ptr, ...) %114(ptr noundef %42, ptr noundef %115) #30
  br label %167

117:                                              ; preds = %111
  br i1 %22, label %127, label %118

118:                                              ; preds = %117
  %119 = getelementptr inbounds [0 x %struct.insn_data], ptr @insn_data, i64 0, i64 %7, i32 2
  %120 = load ptr, ptr %119, align 8, !tbaa !344
  %121 = load ptr, ptr %6, align 16, !tbaa !453
  %122 = getelementptr inbounds [4 x %struct.anon.3], ptr %6, i64 0, i64 1
  %123 = load ptr, ptr %122, align 16, !tbaa !453
  %124 = sext i32 %4 to i64
  %125 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef %124) #30
  %126 = tail call ptr (ptr, ...) %120(ptr noundef %42, ptr noundef %121, ptr noundef %123, ptr noundef %125) #30
  br label %167

127:                                              ; preds = %117
  br i1 %21, label %128, label %135

128:                                              ; preds = %127
  %129 = getelementptr inbounds [0 x %struct.insn_data], ptr @insn_data, i64 0, i64 %7, i32 2
  %130 = load ptr, ptr %129, align 8, !tbaa !344
  %131 = load ptr, ptr %6, align 16, !tbaa !453
  %132 = getelementptr inbounds [4 x %struct.anon.3], ptr %6, i64 0, i64 1
  %133 = load ptr, ptr %132, align 16, !tbaa !453
  %134 = tail call ptr (ptr, ...) %130(ptr noundef %42, ptr noundef %131, ptr noundef %133) #30
  br label %167

135:                                              ; preds = %127
  %136 = load i32, ptr %42, align 8
  %137 = lshr i32 %136, 16
  %138 = and i32 %137, 255
  %139 = load ptr, ptr %6, align 16, !tbaa !453
  %140 = getelementptr inbounds [4 x %struct.anon.3], ptr %6, i64 0, i64 1
  %141 = load ptr, ptr %140, align 16, !tbaa !453
  %142 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef %4, i32 noundef %138, ptr noundef %139, ptr noundef %141) #30
  %143 = getelementptr inbounds [0 x %struct.insn_data], ptr @insn_data, i64 0, i64 %7, i32 2
  %144 = load ptr, ptr %143, align 8, !tbaa !344
  %145 = tail call ptr (ptr, ...) %144(ptr noundef nonnull %42, ptr noundef %142, ptr noundef %139, ptr noundef %141) #30
  br label %167

146:                                              ; preds = %111
  %147 = getelementptr inbounds [0 x %struct.insn_data], ptr @insn_data, i64 0, i64 %7, i32 2
  %148 = load ptr, ptr %147, align 8, !tbaa !344
  %149 = load ptr, ptr %6, align 16, !tbaa !453
  %150 = getelementptr inbounds [4 x %struct.anon.3], ptr %6, i64 0, i64 1
  %151 = load ptr, ptr %150, align 16, !tbaa !453
  %152 = getelementptr inbounds [4 x %struct.anon.3], ptr %6, i64 0, i64 2
  %153 = load ptr, ptr %152, align 16, !tbaa !453
  %154 = tail call ptr (ptr, ...) %148(ptr noundef %42, ptr noundef %149, ptr noundef %151, ptr noundef %153) #30
  br label %167

155:                                              ; preds = %111
  %156 = getelementptr inbounds [0 x %struct.insn_data], ptr @insn_data, i64 0, i64 %7, i32 2
  %157 = load ptr, ptr %156, align 8, !tbaa !344
  %158 = load ptr, ptr %6, align 16, !tbaa !453
  %159 = getelementptr inbounds [4 x %struct.anon.3], ptr %6, i64 0, i64 1
  %160 = load ptr, ptr %159, align 16, !tbaa !453
  %161 = getelementptr inbounds [4 x %struct.anon.3], ptr %6, i64 0, i64 2
  %162 = load ptr, ptr %161, align 16, !tbaa !453
  %163 = getelementptr inbounds [4 x %struct.anon.3], ptr %6, i64 0, i64 3
  %164 = load ptr, ptr %163, align 16, !tbaa !453
  %165 = tail call ptr (ptr, ...) %157(ptr noundef %42, ptr noundef %158, ptr noundef %160, ptr noundef %162, ptr noundef %164) #30
  br label %167

166:                                              ; preds = %111
  tail call void @fancy_abort(ptr noundef nonnull @.str.130, i32 noundef 23032, ptr noundef nonnull @.str.131) #30
  unreachable

167:                                              ; preds = %118, %135, %128, %155, %146, %112
  %168 = phi ptr [ %165, %155 ], [ %154, %146 ], [ %126, %118 ], [ %145, %135 ], [ %134, %128 ], [ %116, %112 ]
  %169 = icmp eq ptr %168, null
  br i1 %169, label %172, label %170

170:                                              ; preds = %167
  %171 = tail call ptr @emit_insn(ptr noundef nonnull %168) #30
  br label %172

172:                                              ; preds = %102, %167, %170
  %173 = phi ptr [ %103, %102 ], [ %42, %170 ], [ null, %167 ]
  call void @llvm.lifetime.end.p0(i64 64, ptr nonnull %6) #30
  ret ptr %173
}

declare ptr @xmalloc(i64 noundef) local_unnamed_addr #3

declare ptr @expand_expr_real(ptr noundef, ptr noundef, i32 noundef, i32 noundef, ptr noundef) local_unnamed_addr #3

declare ptr @rtvec_alloc(i32 noundef) local_unnamed_addr #3

declare i32 @operand_equal_p(ptr noundef, ptr noundef, i32 noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc ptr @ix86_expand_unop_vec_merge_builtin(i32 noundef %0, ptr %1, ptr noundef %2) unnamed_addr #9 {
  %4 = tail call ptr @expand_expr_real(ptr noundef %1, ptr noundef null, i32 noundef 0, i32 noundef 0, ptr noundef null) #30
  %5 = zext i32 %0 to i64
  %6 = getelementptr inbounds [0 x %struct.insn_data], ptr @insn_data, i64 0, i64 %5, i32 3
  %7 = load ptr, ptr %6, align 8, !tbaa !340
  %8 = getelementptr inbounds %struct.insn_operand_data, ptr %7, i64 0, i32 2
  %9 = load i16, ptr %8, align 8
  %10 = zext i16 %9 to i32
  %11 = getelementptr inbounds %struct.insn_operand_data, ptr %7, i64 1, i32 2
  %12 = load i16, ptr %11, align 8
  %13 = zext i16 %12 to i32
  %14 = load i32, ptr @optimize, align 4, !tbaa !20
  %15 = icmp eq i32 %14, 0
  %16 = icmp ne ptr %2, null
  %17 = and i1 %16, %15
  br i1 %17, label %18, label %27

18:                                               ; preds = %3
  %19 = load i32, ptr %2, align 8
  %20 = lshr i32 %19, 16
  %21 = and i32 %20, 255
  %22 = icmp eq i32 %21, %10
  br i1 %22, label %23, label %27

23:                                               ; preds = %18
  %24 = load ptr, ptr %7, align 8, !tbaa !342
  %25 = tail call i32 %24(ptr noundef nonnull %2, i32 noundef %10) #30
  %26 = icmp eq i32 %25, 0
  br i1 %26, label %27, label %29

27:                                               ; preds = %23, %18, %3
  %28 = tail call ptr @gen_reg_rtx(i32 noundef %10) #30
  br label %29

29:                                               ; preds = %27, %23
  %30 = phi ptr [ %28, %27 ], [ %2, %23 ]
  %31 = zext i16 %12 to i64
  %32 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %31
  %33 = load i8, ptr %32, align 1, !tbaa !16
  %34 = add i8 %33, -12
  %35 = icmp ult i8 %34, 6
  %36 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 64), align 16
  %37 = icmp eq ptr %36, %4
  %38 = select i1 %35, i1 %37, i1 false
  br i1 %38, label %39, label %42

39:                                               ; preds = %29
  %40 = getelementptr inbounds [87 x ptr], ptr @const_tiny_rtx, i64 0, i64 %31
  %41 = load ptr, ptr %40, align 8, !tbaa !5
  br label %42

42:                                               ; preds = %39, %29
  %43 = phi ptr [ %4, %29 ], [ %41, %39 ]
  %44 = load i32, ptr @optimize, align 4, !tbaa !20
  %45 = icmp eq i32 %44, 0
  br i1 %45, label %49, label %46

46:                                               ; preds = %42
  %47 = tail call i32 @register_operand(ptr noundef %43, i32 noundef %13) #30
  %48 = icmp eq i32 %47, 0
  br i1 %48, label %54, label %49

49:                                               ; preds = %46, %42
  %50 = getelementptr inbounds %struct.insn_operand_data, ptr %7, i64 1
  %51 = load ptr, ptr %50, align 8, !tbaa !342
  %52 = tail call i32 %51(ptr noundef %43, i32 noundef %13) #30
  %53 = icmp eq i32 %52, 0
  br i1 %53, label %54, label %56

54:                                               ; preds = %49, %46
  %55 = tail call ptr @copy_to_mode_reg(i32 noundef %13, ptr noundef %43) #30
  br label %56

56:                                               ; preds = %54, %49
  %57 = phi ptr [ %43, %49 ], [ %55, %54 ]
  %58 = getelementptr inbounds %struct.insn_operand_data, ptr %7, i64 2
  %59 = load ptr, ptr %58, align 8, !tbaa !342
  %60 = tail call i32 %59(ptr noundef %57, i32 noundef %13) #30
  %61 = icmp eq i32 %60, 0
  br i1 %61, label %62, label %64

62:                                               ; preds = %56
  %63 = tail call ptr @copy_to_mode_reg(i32 noundef %13, ptr noundef %57) #30
  br label %64

64:                                               ; preds = %62, %56
  %65 = phi ptr [ %57, %56 ], [ %63, %62 ]
  %66 = getelementptr inbounds [0 x %struct.insn_data], ptr @insn_data, i64 0, i64 %5, i32 2
  %67 = load ptr, ptr %66, align 8, !tbaa !344
  %68 = tail call ptr (ptr, ...) %67(ptr noundef %30, ptr noundef %57, ptr noundef %65) #30
  %69 = icmp eq ptr %68, null
  br i1 %69, label %72, label %70

70:                                               ; preds = %64
  %71 = tail call ptr @emit_insn(ptr noundef nonnull %68) #30
  br label %72

72:                                               ; preds = %64, %70
  %73 = phi ptr [ %30, %70 ], [ null, %64 ]
  ret ptr %73
}

declare i32 @memory_operand(ptr noundef, i32 noundef) local_unnamed_addr #3

declare ptr @gen_rtx_SUBREG(i32 noundef, ptr noundef, i32 noundef) local_unnamed_addr #3

declare ptr @gen_sse2_loadd(ptr noundef, ptr noundef) local_unnamed_addr #3

declare void @cl_target_option_restore(ptr noundef) local_unnamed_addr #3

declare void @target_reinit() local_unnamed_addr #3

declare void @default_encode_section_info(ptr noundef, ptr noundef, i32 noundef) local_unnamed_addr #3

declare zeroext i8 @default_scalar_mode_supported_p(i32 noundef) local_unnamed_addr #3

declare i32 @rtx_cost(ptr noundef, i32 noundef, i8 noundef zeroext) local_unnamed_addr #3

declare zeroext i8 @optimize_bb_for_size_p(ptr noundef) local_unnamed_addr #3

declare i32 @active_insn_p(ptr noundef) local_unnamed_addr #3

declare ptr @prev_active_insn(ptr noundef) local_unnamed_addr #3

declare i32 @any_condjump_p(ptr noundef) local_unnamed_addr #3

declare ptr @emit_jump_insn_before(ptr noundef, ptr noundef) local_unnamed_addr #3

declare ptr @gen_return_internal_long() local_unnamed_addr #3

declare ptr @delete_insn(ptr noundef) local_unnamed_addr #3

declare i32 @label_to_alignment(ptr noundef) local_unnamed_addr #3

declare i32 @label_to_max_skip(ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc i32 @min_insn_size(ptr noundef %0) unnamed_addr #9 {
  %2 = load i32, ptr %0, align 8
  %3 = and i32 %2, 65535
  %4 = add nsw i32 %3, -7
  %5 = icmp ult i32 %4, 4
  br i1 %5, label %6, label %63

6:                                                ; preds = %1
  %7 = tail call i32 @active_insn_p(ptr noundef nonnull %0) #30
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %63, label %9

9:                                                ; preds = %6
  %10 = getelementptr inbounds %struct.rtx_def, ptr %0, i64 1
  %11 = load ptr, ptr %10, align 8, !tbaa !16
  %12 = load i32, ptr %11, align 8
  %13 = and i32 %12, 65535
  %14 = icmp eq i32 %13, 19
  br i1 %14, label %15, label %19

15:                                               ; preds = %9
  %16 = getelementptr inbounds %struct.rtx_def, ptr %11, i64 0, i32 1, i32 0, i32 0, i64 1
  %17 = load i32, ptr %16, align 8, !tbaa !16
  %18 = icmp eq i32 %17, 7
  br i1 %18, label %63, label %19

19:                                               ; preds = %15, %9
  %20 = load i32, ptr %0, align 8
  %21 = trunc i32 %20 to i16
  switch i16 %21, label %31 [
    i16 9, label %22
    i16 10, label %25
  ]

22:                                               ; preds = %19
  %23 = and i32 %12, 65534
  %24 = icmp eq i32 %23, 20
  br i1 %24, label %63, label %31

25:                                               ; preds = %19
  %26 = tail call i32 @symbolic_reference_mentioned_p(ptr noundef nonnull %11)
  %27 = icmp ne i32 %26, 0
  %28 = and i32 %20, 16777216
  %29 = icmp eq i32 %28, 0
  %30 = and i1 %29, %27
  br i1 %30, label %63, label %31

31:                                               ; preds = %19, %22, %25
  %32 = tail call i32 @get_attr_length(ptr noundef nonnull %0) #30
  %33 = icmp slt i32 %32, 2
  br i1 %33, label %63, label %34

34:                                               ; preds = %31
  %35 = load i32, ptr %0, align 8
  %36 = and i32 %35, 65535
  %37 = icmp eq i32 %36, 9
  br i1 %37, label %62, label %38

38:                                               ; preds = %34
  %39 = tail call i32 @get_attr_type(ptr noundef nonnull %0) #30
  switch i32 %39, label %63 [
    i32 1, label %40
    i32 0, label %48
    i32 34, label %48
  ]

40:                                               ; preds = %38
  %41 = load ptr, ptr %10, align 8, !tbaa !16
  %42 = load i32, ptr %41, align 8
  %43 = and i32 %42, 65535
  %44 = icmp eq i32 %43, 16
  br i1 %44, label %63, label %45

45:                                               ; preds = %40
  %46 = tail call i32 @asm_noperands(ptr noundef nonnull %41) #30
  %47 = icmp sgt i32 %46, -1
  br i1 %47, label %63, label %48

48:                                               ; preds = %38, %38, %45
  %49 = tail call i32 @get_attr_length_address(ptr noundef nonnull %0) #30
  %50 = freeze i32 %49
  %51 = icmp slt i32 %50, 4
  br i1 %51, label %52, label %56

52:                                               ; preds = %48
  %53 = load ptr, ptr %10, align 8, !tbaa !16
  %54 = tail call i32 @symbolic_reference_mentioned_p(ptr noundef %53)
  %55 = icmp eq i32 %54, 0
  br i1 %55, label %59, label %56

56:                                               ; preds = %48, %52
  %57 = phi i32 [ 4, %52 ], [ %50, %48 ]
  %58 = add nuw nsw i32 %57, 1
  br label %63

59:                                               ; preds = %52
  %60 = icmp eq i32 %50, 0
  %61 = add nsw i32 %50, 1
  br i1 %60, label %62, label %63

62:                                               ; preds = %34, %59
  br label %63

63:                                               ; preds = %25, %38, %40, %45, %62, %59, %56, %22, %1, %31, %15, %6
  %64 = phi i32 [ 0, %1 ], [ 0, %6 ], [ 0, %15 ], [ 0, %22 ], [ 1, %31 ], [ 2, %62 ], [ %61, %59 ], [ %58, %56 ], [ %32, %38 ], [ 0, %40 ], [ 0, %45 ], [ 5, %25 ]
  ret i32 %64
}

declare ptr @gen_pad(ptr noundef) local_unnamed_addr #3

declare i32 @get_attr_length(ptr noundef) local_unnamed_addr #3

declare i32 @get_attr_length_address(ptr noundef) local_unnamed_addr #3

declare void @std_expand_builtin_va_start(ptr noundef, ptr noundef) local_unnamed_addr #3

declare ptr @std_gimplify_va_arg_expr(ptr noundef, ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

declare ptr @build_string(i32 noundef, ptr noundef) local_unnamed_addr #3

declare ptr @default_hidden_stack_protect_fail() local_unnamed_addr #3

declare zeroext i8 @must_pass_in_stack_var_size_or_pad(i32 noundef, ptr noundef) local_unnamed_addr #3

declare ptr @entry_of_function() local_unnamed_addr #3

declare ptr @build_optimization_node() local_unnamed_addr #3

declare void @cl_optimization_restore(ptr noundef) local_unnamed_addr #3

declare void @cl_target_option_save(ptr noundef) local_unnamed_addr #3

; Function Attrs: nofree nounwind willreturn memory(argmem: read)
declare i32 @bcmp(ptr nocapture, ptr nocapture, i64) local_unnamed_addr #26

; Function Attrs: nofree nounwind
declare noundef i64 @fwrite(ptr nocapture noundef, i64 noundef, i64 noundef, ptr nocapture noundef) local_unnamed_addr #27

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i64 @llvm.umax.i64(i64, i64) #28

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smax.i32(i32, i32) #28

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.umax.i32(i32, i32) #28

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.fshl.i32(i32, i32, i32) #28

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #28

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.usub.sat.i32(i32, i32) #28

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i64 @llvm.ctpop.i64(i64) #28

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i8 @llvm.umax.i8(i8, i8) #28

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.umin.i32(i32, i32) #28

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i64 @llvm.smax.i64(i64, i64) #28

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i4 @llvm.ctpop.i4(i4) #28

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.vector.reduce.or.v4i32(<4 x i32>) #28

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare <4 x i32> @llvm.umin.v4i32(<4 x i32>, <4 x i32>) #28

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare <4 x i32> @llvm.umax.v4i32(<4 x i32>, <4 x i32>) #28

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.vector.reduce.umin.v4i32(<4 x i32>) #28

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.vector.reduce.umax.v4i32(<4 x i32>) #28

; Function Attrs: nocallback nofree nosync nounwind willreturn memory(argmem: read)
declare ptr @llvm.load.relative.i64(ptr, i64) #29

attributes #0 = { inlinehint nofree nounwind sspstrong uwtable "approx-func-fp-math"="true" "denormal-fp-math"="preserve-sign,preserve-sign" "min-legal-vector-width"="0" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cmov,+crc32,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" "unsafe-fp-math"="true" }
attributes #1 = { nofree nounwind "approx-func-fp-math"="true" "denormal-fp-math"="preserve-sign,preserve-sign" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cmov,+crc32,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" "unsafe-fp-math"="true" }
attributes #2 = { inlinehint nounwind sspstrong uwtable "approx-func-fp-math"="true" "denormal-fp-math"="preserve-sign,preserve-sign" "min-legal-vector-width"="0" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cmov,+crc32,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" "unsafe-fp-math"="true" }
attributes #3 = { "approx-func-fp-math"="true" "denormal-fp-math"="preserve-sign,preserve-sign" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cmov,+crc32,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" "unsafe-fp-math"="true" }
attributes #4 = { inlinehint mustprogress nofree norecurse nosync nounwind sspstrong willreturn memory(argmem: read) uwtable "approx-func-fp-math"="true" "denormal-fp-math"="preserve-sign,preserve-sign" "min-legal-vector-width"="0" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cmov,+crc32,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" "unsafe-fp-math"="true" }
attributes #5 = { inlinehint mustprogress nofree nounwind sspstrong willreturn memory(read) uwtable "approx-func-fp-math"="true" "denormal-fp-math"="preserve-sign,preserve-sign" "min-legal-vector-width"="0" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cmov,+crc32,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" "unsafe-fp-math"="true" }
attributes #6 = { mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: readwrite) }
attributes #7 = { inlinehint mustprogress nofree nounwind sspstrong willreturn uwtable "approx-func-fp-math"="true" "denormal-fp-math"="preserve-sign,preserve-sign" "min-legal-vector-width"="0" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cmov,+crc32,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" "unsafe-fp-math"="true" }
attributes #8 = { mustprogress nofree nounwind willreturn "approx-func-fp-math"="true" "denormal-fp-math"="preserve-sign,preserve-sign" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cmov,+crc32,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" "unsafe-fp-math"="true" }
attributes #9 = { nounwind sspstrong uwtable "approx-func-fp-math"="true" "denormal-fp-math"="preserve-sign,preserve-sign" "min-legal-vector-width"="0" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cmov,+crc32,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" "unsafe-fp-math"="true" }
attributes #10 = { mustprogress nofree nounwind willreturn memory(argmem: read) "approx-func-fp-math"="true" "denormal-fp-math"="preserve-sign,preserve-sign" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cmov,+crc32,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" "unsafe-fp-math"="true" }
attributes #11 = { mustprogress nofree norecurse nosync nounwind sspstrong willreturn memory(none) uwtable "approx-func-fp-math"="true" "denormal-fp-math"="preserve-sign,preserve-sign" "min-legal-vector-width"="0" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cmov,+crc32,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" "unsafe-fp-math"="true" }
attributes #12 = { nofree norecurse nosync nounwind sspstrong memory(readwrite, argmem: read, inaccessiblemem: none) uwtable "approx-func-fp-math"="true" "denormal-fp-math"="preserve-sign,preserve-sign" "min-legal-vector-width"="0" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cmov,+crc32,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" "unsafe-fp-math"="true" }
attributes #13 = { mustprogress nocallback nofree nounwind willreturn memory(argmem: write) }
attributes #14 = { mustprogress nounwind willreturn allockind("free") memory(argmem: readwrite, inaccessiblemem: readwrite) "alloc-family"="malloc" "approx-func-fp-math"="true" "denormal-fp-math"="preserve-sign,preserve-sign" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cmov,+crc32,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" "unsafe-fp-math"="true" }
attributes #15 = { mustprogress nofree norecurse nosync nounwind sspstrong willreturn memory(readwrite, argmem: none, inaccessiblemem: none) uwtable "approx-func-fp-math"="true" "denormal-fp-math"="preserve-sign,preserve-sign" "min-legal-vector-width"="0" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cmov,+crc32,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" "unsafe-fp-math"="true" }
attributes #16 = { mustprogress nofree norecurse nosync nounwind sspstrong willreturn memory(read, argmem: none, inaccessiblemem: none) uwtable "approx-func-fp-math"="true" "denormal-fp-math"="preserve-sign,preserve-sign" "min-legal-vector-width"="0" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cmov,+crc32,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" "unsafe-fp-math"="true" }
attributes #17 = { mustprogress nofree norecurse nosync nounwind sspstrong willreturn memory(readwrite, inaccessiblemem: none) uwtable "approx-func-fp-math"="true" "denormal-fp-math"="preserve-sign,preserve-sign" "min-legal-vector-width"="0" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cmov,+crc32,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" "unsafe-fp-math"="true" }
attributes #18 = { mustprogress nocallback nofree nounwind willreturn memory(argmem: readwrite) }
attributes #19 = { nofree nosync nounwind sspstrong memory(read, inaccessiblemem: none) uwtable "approx-func-fp-math"="true" "denormal-fp-math"="preserve-sign,preserve-sign" "min-legal-vector-width"="0" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cmov,+crc32,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" "unsafe-fp-math"="true" }
attributes #20 = { mustprogress nofree nounwind willreturn memory(argmem: readwrite) "approx-func-fp-math"="true" "denormal-fp-math"="preserve-sign,preserve-sign" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cmov,+crc32,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" "unsafe-fp-math"="true" }
attributes #21 = { nofree nounwind sspstrong uwtable "approx-func-fp-math"="true" "denormal-fp-math"="preserve-sign,preserve-sign" "min-legal-vector-width"="0" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cmov,+crc32,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" "unsafe-fp-math"="true" }
attributes #22 = { inlinehint mustprogress nofree norecurse nosync nounwind sspstrong willreturn memory(none) uwtable "approx-func-fp-math"="true" "denormal-fp-math"="preserve-sign,preserve-sign" "min-legal-vector-width"="0" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cmov,+crc32,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" "unsafe-fp-math"="true" }
attributes #23 = { mustprogress nofree norecurse nosync nounwind sspstrong willreturn memory(read, inaccessiblemem: none) uwtable "approx-func-fp-math"="true" "denormal-fp-math"="preserve-sign,preserve-sign" "min-legal-vector-width"="0" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cmov,+crc32,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" "unsafe-fp-math"="true" }
attributes #24 = { nofree nosync nounwind sspstrong memory(readwrite, argmem: none, inaccessiblemem: none) uwtable "approx-func-fp-math"="true" "denormal-fp-math"="preserve-sign,preserve-sign" "min-legal-vector-width"="0" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cmov,+crc32,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" "unsafe-fp-math"="true" }
attributes #25 = { mustprogress nofree norecurse nosync nounwind sspstrong willreturn memory(argmem: write) uwtable "approx-func-fp-math"="true" "denormal-fp-math"="preserve-sign,preserve-sign" "min-legal-vector-width"="0" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cmov,+crc32,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" "unsafe-fp-math"="true" }
attributes #26 = { nofree nounwind willreturn memory(argmem: read) }
attributes #27 = { nofree nounwind }
attributes #28 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #29 = { nocallback nofree nosync nounwind willreturn memory(argmem: read) }
attributes #30 = { nounwind }

!llvm.module.flags = !{!0, !1, !2, !3}
!llvm.ident = !{!4}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 8, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{i32 7, !"uwtable", i32 2}
!4 = !{!"clang version 17.0.6"}
!5 = !{!6, !6, i64 0}
!6 = !{!"any pointer", !7, i64 0}
!7 = !{!"omnipotent char", !8, i64 0}
!8 = !{!"Simple C/C++ TBAA"}
!9 = !{!10, !6, i64 8}
!10 = !{!"_IO_FILE", !11, i64 0, !6, i64 8, !6, i64 16, !6, i64 24, !6, i64 32, !6, i64 40, !6, i64 48, !6, i64 56, !6, i64 64, !6, i64 72, !6, i64 80, !6, i64 88, !6, i64 96, !6, i64 104, !11, i64 112, !11, i64 116, !12, i64 120, !13, i64 128, !7, i64 130, !7, i64 131, !6, i64 136, !12, i64 144, !6, i64 152, !6, i64 160, !6, i64 168, !6, i64 176, !12, i64 184, !11, i64 192, !7, i64 196}
!11 = !{!"int", !7, i64 0}
!12 = !{!"long", !7, i64 0}
!13 = !{!"short", !7, i64 0}
!14 = !{!10, !6, i64 16}
!15 = !{!"branch_weights", i32 2000, i32 1}
!16 = !{!7, !7, i64 0}
!17 = !{!10, !6, i64 40}
!18 = !{!10, !6, i64 48}
!19 = !{!10, !11, i64 0}
!20 = !{!11, !11, i64 0}
!21 = distinct !{!21, !22}
!22 = !{!"llvm.loop.mustprogress"}
!23 = !{!24, !6, i64 0}
!24 = !{!"pta", !6, i64 0, !7, i64 8, !7, i64 12, !11, i64 16}
!25 = !{!24, !7, i64 12}
!26 = !{!24, !7, i64 8}
!27 = distinct !{!27, !22}
!28 = distinct !{!28, !22}
!29 = !{!30, !6, i64 0}
!30 = !{!"ptt", !6, i64 0, !11, i64 8, !11, i64 12, !11, i64 16, !11, i64 20, !11, i64 24}
!31 = !{!30, !11, i64 8}
!32 = !{!30, !11, i64 12}
!33 = !{!30, !11, i64 16}
!34 = !{!30, !11, i64 20}
!35 = !{!30, !11, i64 24}
!36 = !{!37, !11, i64 200}
!37 = !{!"processor_costs", !11, i64 0, !11, i64 4, !11, i64 8, !11, i64 12, !7, i64 16, !11, i64 36, !7, i64 40, !11, i64 60, !11, i64 64, !11, i64 68, !11, i64 72, !11, i64 76, !7, i64 80, !7, i64 92, !11, i64 104, !7, i64 108, !7, i64 120, !11, i64 132, !7, i64 136, !7, i64 144, !11, i64 152, !7, i64 156, !7, i64 168, !11, i64 180, !11, i64 184, !11, i64 188, !11, i64 192, !11, i64 196, !11, i64 200, !11, i64 204, !11, i64 208, !11, i64 212, !11, i64 216, !11, i64 220, !11, i64 224, !7, i64 228, !7, i64 300, !11, i64 372, !11, i64 376, !11, i64 380, !11, i64 384, !11, i64 388, !11, i64 392, !11, i64 396, !11, i64 400, !11, i64 404, !11, i64 408, !11, i64 412}
!38 = !{!39, !7, i64 12}
!39 = !{!"param_info", !6, i64 0, !11, i64 8, !7, i64 12, !11, i64 16, !11, i64 20, !6, i64 24}
!40 = !{!37, !11, i64 196}
!41 = !{!37, !11, i64 192}
!42 = !{!37, !11, i64 184}
!43 = !{!37, !11, i64 188}
!44 = !{!45, !6, i64 1344}
!45 = !{!"gcc_target", !46, i64 0, !48, i64 368, !49, i64 664, !11, i64 744, !6, i64 752, !6, i64 760, !6, i64 768, !6, i64 776, !6, i64 784, !6, i64 792, !6, i64 800, !6, i64 808, !6, i64 816, !6, i64 824, !6, i64 832, !6, i64 840, !6, i64 848, !6, i64 856, !6, i64 864, !6, i64 872, !6, i64 880, !6, i64 888, !6, i64 896, !6, i64 904, !6, i64 912, !6, i64 920, !6, i64 928, !6, i64 936, !6, i64 944, !6, i64 952, !6, i64 960, !6, i64 968, !6, i64 976, !6, i64 984, !6, i64 992, !6, i64 1000, !6, i64 1008, !6, i64 1016, !6, i64 1024, !6, i64 1032, !6, i64 1040, !6, i64 1048, !6, i64 1056, !12, i64 1064, !12, i64 1072, !6, i64 1080, !6, i64 1088, !6, i64 1096, !6, i64 1104, !6, i64 1112, !6, i64 1120, !6, i64 1128, !6, i64 1136, !6, i64 1144, !6, i64 1152, !6, i64 1160, !6, i64 1168, !50, i64 1176, !6, i64 1232, !6, i64 1240, !6, i64 1248, !6, i64 1256, !6, i64 1264, !6, i64 1272, !6, i64 1280, !6, i64 1288, !6, i64 1296, !6, i64 1304, !6, i64 1312, !6, i64 1320, !6, i64 1328, !6, i64 1336, !6, i64 1344, !6, i64 1352, !6, i64 1360, !6, i64 1368, !6, i64 1376, !6, i64 1384, !6, i64 1392, !6, i64 1400, !6, i64 1408, !6, i64 1416, !6, i64 1424, !6, i64 1432, !6, i64 1440, !6, i64 1448, !6, i64 1456, !12, i64 1464, !51, i64 1472, !6, i64 1664, !6, i64 1672, !6, i64 1680, !6, i64 1688, !6, i64 1696, !6, i64 1704, !6, i64 1712, !6, i64 1720, !6, i64 1728, !6, i64 1736, !6, i64 1744, !6, i64 1752, !6, i64 1760, !6, i64 1768, !6, i64 1776, !52, i64 1784, !53, i64 1792, !54, i64 1896, !55, i64 1968, !6, i64 2016, !7, i64 2024, !7, i64 2025, !7, i64 2026, !7, i64 2027, !7, i64 2028, !7, i64 2029, !7, i64 2030, !7, i64 2031, !7, i64 2032, !7, i64 2033, !7, i64 2034, !7, i64 2035}
!46 = !{!"asm_out", !6, i64 0, !6, i64 8, !6, i64 16, !47, i64 24, !47, i64 56, !6, i64 88, !6, i64 96, !6, i64 104, !6, i64 112, !6, i64 120, !6, i64 128, !6, i64 136, !6, i64 144, !6, i64 152, !6, i64 160, !6, i64 168, !6, i64 176, !6, i64 184, !6, i64 192, !6, i64 200, !6, i64 208, !6, i64 216, !6, i64 224, !6, i64 232, !6, i64 240, !6, i64 248, !6, i64 256, !6, i64 264, !6, i64 272, !6, i64 280, !6, i64 288, !6, i64 296, !6, i64 304, !6, i64 312, !6, i64 320, !6, i64 328, !6, i64 336, !6, i64 344, !6, i64 352, !6, i64 360}
!47 = !{!"asm_int_op", !6, i64 0, !6, i64 8, !6, i64 16, !6, i64 24}
!48 = !{!"sched", !6, i64 0, !6, i64 8, !6, i64 16, !6, i64 24, !6, i64 32, !6, i64 40, !6, i64 48, !6, i64 56, !6, i64 64, !6, i64 72, !6, i64 80, !6, i64 88, !6, i64 96, !6, i64 104, !6, i64 112, !6, i64 120, !6, i64 128, !6, i64 136, !6, i64 144, !6, i64 152, !6, i64 160, !6, i64 168, !6, i64 176, !6, i64 184, !6, i64 192, !6, i64 200, !6, i64 208, !6, i64 216, !6, i64 224, !6, i64 232, !6, i64 240, !6, i64 248, !6, i64 256, !6, i64 264, !6, i64 272, !6, i64 280, !6, i64 288}
!49 = !{!"vectorize", !6, i64 0, !6, i64 8, !6, i64 16, !6, i64 24, !6, i64 32, !6, i64 40, !6, i64 48, !6, i64 56, !6, i64 64, !6, i64 72}
!50 = !{!"addr_space", !6, i64 0, !6, i64 8, !6, i64 16, !6, i64 24, !6, i64 32, !6, i64 40, !6, i64 48}
!51 = !{!"calls", !6, i64 0, !6, i64 8, !6, i64 16, !6, i64 24, !6, i64 32, !6, i64 40, !6, i64 48, !6, i64 56, !6, i64 64, !6, i64 72, !6, i64 80, !6, i64 88, !6, i64 96, !6, i64 104, !6, i64 112, !6, i64 120, !6, i64 128, !6, i64 136, !6, i64 144, !6, i64 152, !6, i64 160, !6, i64 168, !6, i64 176, !6, i64 184}
!52 = !{!"c", !6, i64 0}
!53 = !{!"cxx", !6, i64 0, !6, i64 8, !6, i64 16, !6, i64 24, !6, i64 32, !6, i64 40, !6, i64 48, !6, i64 56, !6, i64 64, !6, i64 72, !6, i64 80, !6, i64 88, !6, i64 96}
!54 = !{!"emutls", !6, i64 0, !6, i64 8, !6, i64 16, !6, i64 24, !6, i64 32, !6, i64 40, !6, i64 48, !6, i64 56, !7, i64 64, !7, i64 65}
!55 = !{!"target_option_hooks", !6, i64 0, !6, i64 8, !6, i64 16, !6, i64 24, !6, i64 32, !6, i64 40}
!56 = !{!57, !11, i64 40}
!57 = !{!"machine_function", !6, i64 0, !6, i64 8, !11, i64 16, !11, i64 20, !7, i64 24, !11, i64 40, !58, i64 48, !7, i64 64, !11, i64 68, !11, i64 68, !11, i64 68, !11, i64 68, !11, i64 68}
!58 = !{!"machine_cfa_state", !6, i64 0, !12, i64 8}
!59 = !{!57, !7, i64 64}
!60 = distinct !{!60, !22}
!61 = distinct !{!61, !22}
!62 = !{!12, !12, i64 0}
!63 = distinct !{!63, !22}
!64 = distinct !{!64, !22}
!65 = distinct !{!65, !22}
!66 = !{i8 0, i8 2}
!67 = !{!68, !11, i64 12}
!68 = !{!"cl_target_option", !11, i64 0, !11, i64 4, !11, i64 8, !11, i64 12, !7, i64 16, !7, i64 17, !7, i64 18, !7, i64 19, !7, i64 20, !7, i64 21, !7, i64 22}
!69 = !{!68, !11, i64 8}
!70 = !{!71, !11, i64 12}
!71 = !{!"builtin_isa", !6, i64 0, !7, i64 8, !11, i64 12, !7, i64 16, !7, i64 17}
!72 = !{!71, !7, i64 17}
!73 = !{!71, !7, i64 8}
!74 = !{!71, !6, i64 0}
!75 = !{!71, !7, i64 16}
!76 = distinct !{!76, !22}
!77 = distinct !{!77, !22}
!78 = !{!79, !12, i64 8}
!79 = !{!"", !6, i64 0, !12, i64 8, !7, i64 16, !11, i64 20, !11, i64 24}
!80 = !{!79, !6, i64 0}
!81 = distinct !{!81, !22}
!82 = !{!79, !11, i64 20}
!83 = !{!79, !11, i64 24}
!84 = !{!79, !7, i64 16}
!85 = distinct !{!85, !22}
!86 = !{i4 0, i4 5}
!87 = !{!88, !6, i64 80}
!88 = !{!"function", !6, i64 0, !6, i64 8, !6, i64 16, !6, i64 24, !6, i64 32, !6, i64 40, !6, i64 48, !6, i64 56, !6, i64 64, !6, i64 72, !6, i64 80, !6, i64 88, !6, i64 96, !11, i64 104, !11, i64 108, !11, i64 112, !11, i64 116, !11, i64 120, !11, i64 124, !6, i64 128, !11, i64 136, !11, i64 137, !11, i64 138, !11, i64 138, !11, i64 138, !11, i64 138, !11, i64 138, !11, i64 138, !11, i64 138, !11, i64 139, !11, i64 139, !11, i64 139, !11, i64 139, !11, i64 139, !11, i64 139, !11, i64 139}
!89 = !{!90, !11, i64 4}
!90 = !{!"ix86_args", !11, i64 0, !11, i64 4, !11, i64 8, !11, i64 12, !11, i64 16, !11, i64 20, !11, i64 24, !11, i64 28, !11, i64 32, !11, i64 36, !11, i64 40, !11, i64 44, !11, i64 48, !11, i64 52, !11, i64 56, !7, i64 60}
!91 = !{!90, !11, i64 20}
!92 = !{!90, !11, i64 44}
!93 = !{!90, !11, i64 24}
!94 = !{!90, !11, i64 28}
!95 = !{!90, !11, i64 32}
!96 = !{!90, !11, i64 52}
!97 = !{!90, !11, i64 12}
!98 = !{!90, !11, i64 56}
!99 = distinct !{!99, !22}
!100 = !{!90, !11, i64 0}
!101 = !{!90, !11, i64 8}
!102 = !{!90, !11, i64 36}
!103 = !{!90, !11, i64 48}
!104 = distinct !{!104, !22}
!105 = distinct !{!105, !22}
!106 = !{i64 0, i64 4, !20, i64 0, i64 4, !20, i64 0, i64 4, !20, i64 0, i64 4, !20, i64 0, i64 4, !20, i64 0, i64 4, !20, i64 8, i64 24, !16}
!107 = !{!108, !11, i64 0}
!108 = !{!"rtvec_def", !11, i64 0, !7, i64 8}
!109 = distinct !{!109, !22}
!110 = distinct !{!110, !22}
!111 = !{!112, !11, i64 112}
!112 = !{!"rtl_data", !113, i64 0, !114, i64 40, !115, i64 96, !116, i64 112, !117, i64 208, !118, i64 248, !11, i64 312, !6, i64 320, !6, i64 328, !6, i64 336, !6, i64 344, !6, i64 352, !6, i64 360, !6, i64 368, !6, i64 376, !6, i64 384, !6, i64 392, !12, i64 400, !6, i64 408, !6, i64 416, !6, i64 424, !11, i64 432, !11, i64 436, !11, i64 440, !11, i64 444, !11, i64 448, !11, i64 452, !6, i64 456, !7, i64 464, !7, i64 465, !7, i64 466, !7, i64 467, !7, i64 468, !7, i64 469, !7, i64 470, !7, i64 471, !7, i64 472, !7, i64 473, !7, i64 474, !7, i64 475, !7, i64 476, !7, i64 477, !7, i64 478, !7, i64 479, !7, i64 480, !7, i64 481, !7, i64 482, !7, i64 483, !7, i64 484, !7, i64 485}
!113 = !{!"expr_status", !11, i64 0, !11, i64 4, !11, i64 8, !6, i64 16, !6, i64 24, !6, i64 32}
!114 = !{!"emit_status", !11, i64 0, !11, i64 4, !6, i64 8, !6, i64 16, !6, i64 24, !11, i64 32, !11, i64 36, !11, i64 40, !11, i64 44, !6, i64 48}
!115 = !{!"varasm_status", !6, i64 0, !11, i64 8}
!116 = !{!"incoming_args", !11, i64 0, !11, i64 4, !11, i64 8, !6, i64 16, !90, i64 24, !6, i64 88}
!117 = !{!"function_subsections", !6, i64 0, !6, i64 8, !6, i64 16, !6, i64 24, !6, i64 32}
!118 = !{!"rtl_eh", !6, i64 0, !6, i64 8, !6, i64 16, !6, i64 24, !6, i64 32, !6, i64 40, !7, i64 48}
!119 = !{!120, !12, i64 48}
!120 = !{!"ix86_frame", !11, i64 0, !11, i64 4, !11, i64 8, !11, i64 12, !11, i64 16, !12, i64 24, !11, i64 32, !11, i64 36, !11, i64 40, !12, i64 48, !12, i64 56, !12, i64 64, !12, i64 72, !7, i64 80}
!121 = !{!120, !11, i64 8}
!122 = !{!120, !11, i64 4}
!123 = distinct !{!123, !22}
!124 = !{!112, !11, i64 440}
!125 = distinct !{!125, !22}
!126 = !{!112, !11, i64 436}
!127 = !{!120, !7, i64 80}
!128 = !{!112, !7, i64 477}
!129 = !{!120, !12, i64 64}
!130 = !{!112, !7, i64 479}
!131 = !{!120, !11, i64 0}
!132 = !{!57, !11, i64 16}
!133 = !{!57, !11, i64 20}
!134 = !{!120, !11, i64 16}
!135 = !{!120, !11, i64 12}
!136 = !{!120, !12, i64 56}
!137 = !{!112, !11, i64 312}
!138 = !{!120, !11, i64 36}
!139 = !{!120, !11, i64 32}
!140 = !{!120, !12, i64 72}
!141 = !{!120, !11, i64 40}
!142 = !{!45, !6, i64 136}
!143 = !{!112, !7, i64 483}
!144 = !{!112, !6, i64 392}
!145 = !{!57, !6, i64 48}
!146 = !{!57, !12, i64 56}
!147 = !{ptr @gen_popsi1}
!148 = !{!88, !6, i64 48}
!149 = !{ptr @gen_andsi3}
!150 = distinct !{!150, !22}
!151 = distinct !{!151, !22}
!152 = !{!88, !6, i64 8}
!153 = !{!154, !6, i64 0}
!154 = !{!"control_flow_graph", !6, i64 0, !6, i64 8, !6, i64 16, !11, i64 24, !11, i64 28, !11, i64 32, !6, i64 40, !7, i64 48, !7, i64 52, !7, i64 60, !11, i64 68, !11, i64 72}
!155 = !{!112, !7, i64 471}
!156 = distinct !{!156, !22}
!157 = distinct !{!157, !22}
!158 = !{i64 0, i64 8, !5, i64 8, i64 8, !62}
!159 = distinct !{!159, !22}
!160 = !{ptr @gen_addsi3}
!161 = distinct !{!161, !22}
!162 = distinct !{!162, !22}
!163 = !{ptr @gen_leave}
!164 = distinct !{!164, !22}
!165 = distinct !{!165, !22}
!166 = !{!167, !6, i64 0}
!167 = !{!"ix86_address", !6, i64 0, !6, i64 8, !6, i64 16, !12, i64 24, !7, i64 32}
!168 = !{!167, !6, i64 8}
!169 = !{!167, !6, i64 16}
!170 = !{!167, !12, i64 24}
!171 = !{!167, !7, i64 32}
!172 = !{i32 -1, i32 2}
!173 = !{!13, !13, i64 0}
!174 = !{!57, !6, i64 8}
!175 = distinct !{!175, !22}
!176 = distinct !{!176, !22}
!177 = distinct !{!177, !22}
!178 = !{!179, !13, i64 0}
!179 = !{!"stack_local_entry", !13, i64 0, !13, i64 2, !6, i64 8, !6, i64 16}
!180 = !{!179, !13, i64 2}
!181 = !{!179, !6, i64 8}
!182 = distinct !{!182, !22}
!183 = !{!57, !6, i64 0}
!184 = !{!179, !6, i64 16}
!185 = !{!186, !11, i64 28}
!186 = !{!"mem_attrs", !6, i64 0, !6, i64 8, !6, i64 16, !11, i64 24, !11, i64 28, !7, i64 32}
!187 = !{!188, !6, i64 0}
!188 = !{!"rtl_hooks", !6, i64 0, !6, i64 8, !6, i64 16, !6, i64 24, !6, i64 32}
!189 = !{!190, !6, i64 0}
!190 = !{!"rtl_bb_info", !6, i64 0, !6, i64 8, !6, i64 16, !6, i64 24, !11, i64 32}
!191 = !{!192, !6, i64 248}
!192 = !{!"df", !7, i64 0, !7, i64 64, !6, i64 128, !193, i64 136, !193, i64 176, !6, i64 216, !6, i64 224, !6, i64 232, !11, i64 240, !11, i64 244, !6, i64 248, !11, i64 256, !11, i64 260, !6, i64 264, !6, i64 272, !6, i64 280, !6, i64 288, !6, i64 296, !6, i64 304, !6, i64 312, !6, i64 320, !6, i64 328, !6, i64 336, !11, i64 344, !11, i64 348, !6, i64 352, !11, i64 360, !11, i64 364, !7, i64 365, !7, i64 366}
!193 = !{!"df_ref_info", !6, i64 0, !6, i64 8, !6, i64 16, !11, i64 24, !11, i64 28, !11, i64 32, !7, i64 36}
!194 = !{!195, !6, i64 8}
!195 = !{!"df_insn_info", !6, i64 0, !6, i64 8, !6, i64 16, !6, i64 24, !6, i64 32, !11, i64 40}
!196 = distinct !{!196, !22}
!197 = distinct !{!197, !22}
!198 = !{!199, !11, i64 0}
!199 = !{!"VEC_edge_base", !11, i64 0, !11, i64 4, !7, i64 8}
!200 = !{!201, !6, i64 0}
!201 = !{!"edge_def", !6, i64 0, !6, i64 8, !7, i64 16, !6, i64 24, !6, i64 32, !11, i64 40, !11, i64 44, !11, i64 48, !11, i64 52, !12, i64 56}
!202 = distinct !{!202, !22}
!203 = distinct !{!203, !22}
!204 = distinct !{!204, !22}
!205 = !{!190, !6, i64 8}
!206 = !{!195, !6, i64 16}
!207 = distinct !{!207, !22}
!208 = distinct !{!208, !22}
!209 = distinct !{!209, !22}
!210 = !{!201, !6, i64 8}
!211 = distinct !{!211, !22}
!212 = distinct !{!212, !22}
!213 = distinct !{!213, !22}
!214 = distinct !{!214, !22}
!215 = distinct !{!215, !22}
!216 = distinct !{!216, !22}
!217 = distinct !{!217, !218}
!218 = !{!"llvm.loop.peeled.count", i32 1}
!219 = !{ptr @gen_copysigndf3_const, ptr @gen_copysignsf3_const, ptr @gen_copysigntf3_const}
!220 = !{ptr @gen_copysigndf3_var, ptr @gen_copysignsf3_var, ptr @gen_copysigntf3_var}
!221 = !{i32 0, i32 13}
!222 = !{i32 0, i32 2}
!223 = !{ptr @gen_subv2di3, ptr @gen_subv4si3}
!224 = !{i32 0, i32 64}
!225 = distinct !{!225, !22}
!226 = distinct !{!226, !22}
!227 = distinct !{!227, !22}
!228 = distinct !{!228, !22, !229, !230}
!229 = !{!"llvm.loop.isvectorized", i32 1}
!230 = !{!"llvm.loop.unroll.runtime.disable"}
!231 = distinct !{!231, !22, !230, !229}
!232 = distinct !{!232, !22, !229, !230}
!233 = distinct !{!233, !22, !230, !229}
!234 = distinct !{!234, !22}
!235 = distinct !{!235, !22}
!236 = distinct !{!236, !22}
!237 = distinct !{!237, !22}
!238 = distinct !{!238, !22}
!239 = !{ptr @split_di, ptr @split_ti}
!240 = !{ptr @gen_x86_64_shld, ptr @gen_x86_shld}
!241 = !{ptr @gen_lshrdi3, ptr @gen_lshrsi3}
!242 = !{ptr @gen_anddi3, ptr @gen_andsi3}
!243 = !{ptr @gen_xordi3, ptr @gen_xorsi3}
!244 = !{ptr @gen_ashldi3, ptr @gen_ashlsi3}
!245 = !{ptr @gen_x86_64_shift_adj_1, ptr @gen_x86_shift_adj_1}
!246 = !{ptr @gen_x86_64_shift_adj_2, ptr @gen_x86_shift_adj_2}
!247 = !{ptr @gen_adddi3, ptr @gen_addsi3}
!248 = !{!37, !11, i64 0}
!249 = !{!37, !11, i64 12}
!250 = distinct !{!250, !22}
!251 = !{ptr @gen_ashrdi3, ptr @gen_ashrsi3}
!252 = !{ptr @gen_x86_64_shrd, ptr @gen_x86_shrd}
!253 = !{ptr @gen_x86_64_shift_adj_3, ptr @gen_x86_shift_adj_3}
!254 = distinct !{!254, !22}
!255 = !{!186, !6, i64 16}
!256 = !{!257, !11, i64 0}
!257 = !{!"stringop_strategy", !11, i64 0, !7, i64 4}
!258 = !{!257, !7, i64 4}
!259 = !{!260, !7, i64 0}
!260 = !{!"stringop_algs", !7, i64 0, !7, i64 4}
!261 = distinct !{!261, !22, !218}
!262 = distinct !{!262, !22, !218}
!263 = distinct !{!263, !22, !218}
!264 = !{ptr @gen_subsi3_carry}
!265 = !{ptr @gen_subsi3}
!266 = !{ptr @gen_one_cmplsi2}
!267 = !{!268, !7, i64 1086}
!268 = !{!"recog_data", !7, i64 0, !7, i64 240, !7, i64 480, !7, i64 720, !7, i64 840, !7, i64 960, !7, i64 1072, !7, i64 1086, !7, i64 1087, !7, i64 1088, !7, i64 1089, !6, i64 1120}
!269 = distinct !{!269, !22}
!270 = distinct !{!270, !22}
!271 = distinct !{!271, !272}
!272 = !{!"llvm.loop.unroll.disable"}
!273 = distinct !{!273, !22}
!274 = distinct !{!274, !22}
!275 = distinct !{!275, !22}
!276 = !{i32 0, i32 7}
!277 = distinct !{!277, !22}
!278 = distinct !{!278, !22}
!279 = distinct !{!279, !22, !229, !230}
!280 = distinct !{!280, !22, !230, !229}
!281 = distinct !{!281, !22}
!282 = distinct !{!282, !22}
!283 = distinct !{!283, !22}
!284 = !{!37, !11, i64 76}
!285 = !{!37, !11, i64 180}
!286 = !{!37, !11, i64 104}
!287 = !{!37, !11, i64 152}
!288 = !{!37, !11, i64 132}
!289 = distinct !{!289, !22}
!290 = distinct !{!290, !22, !218}
!291 = !{!292, !6, i64 0}
!292 = !{!"expand_vec_perm_d", !6, i64 0, !6, i64 8, !6, i64 16, !7, i64 24, !7, i64 40, !7, i64 44, !7, i64 45}
!293 = !{!292, !7, i64 40}
!294 = !{!292, !7, i64 44}
!295 = !{!292, !6, i64 16}
!296 = !{!292, !6, i64 8}
!297 = distinct !{!297, !22, !218}
!298 = distinct !{!298, !22}
!299 = distinct !{!299, !218}
!300 = !{!301, !11, i64 20}
!301 = !{!"real_format", !6, i64 0, !6, i64 8, !11, i64 16, !11, i64 20, !11, i64 24, !11, i64 28, !11, i64 32, !11, i64 36, !11, i64 40, !7, i64 44, !7, i64 45, !7, i64 46, !7, i64 47, !7, i64 48, !7, i64 49, !7, i64 50, !7, i64 51}
!302 = !{!301, !7, i64 49}
!303 = !{!292, !7, i64 45}
!304 = distinct !{!304, !22, !229, !230}
!305 = distinct !{!305, !22, !230, !229}
!306 = distinct !{!306, !22, !229, !230}
!307 = distinct !{!307, !22, !229, !230}
!308 = distinct !{!308, !22, !230, !229}
!309 = distinct !{!309, !22, !229, !230}
!310 = distinct !{!310, !22, !230, !229}
!311 = distinct !{!311, !22}
!312 = distinct !{!312, !22, !229, !230}
!313 = distinct !{!313, !22, !229, !230}
!314 = distinct !{!314, !22, !230, !229}
!315 = distinct !{!315, !22}
!316 = distinct !{!316, !22}
!317 = distinct !{!317, !22, !229, !230}
!318 = distinct !{!318, !22, !230, !229}
!319 = distinct !{!319, !22, !229, !230}
!320 = distinct !{!320, !22, !230, !229}
!321 = distinct !{!321, !22}
!322 = distinct !{!322, !22}
!323 = !{!45, !6, i64 1112}
!324 = !{!45, !6, i64 232}
!325 = !{!45, !6, i64 96}
!326 = distinct !{!326, !22}
!327 = !{!37, !11, i64 408}
!328 = distinct !{!328, !22}
!329 = distinct !{!329, !22, !229, !230}
!330 = distinct !{!330, !22, !229, !230}
!331 = distinct !{!331, !22, !230, !229}
!332 = !{!333, !6, i64 488}
!333 = !{!"lang_hooks", !6, i64 0, !12, i64 8, !6, i64 16, !6, i64 24, !6, i64 32, !6, i64 40, !6, i64 48, !6, i64 56, !6, i64 64, !6, i64 72, !6, i64 80, !6, i64 88, !6, i64 96, !6, i64 104, !6, i64 112, !6, i64 120, !6, i64 128, !6, i64 136, !6, i64 144, !6, i64 152, !6, i64 160, !6, i64 168, !6, i64 176, !6, i64 184, !6, i64 192, !6, i64 200, !6, i64 208, !6, i64 216, !6, i64 224, !6, i64 232, !334, i64 240, !335, i64 248, !336, i64 256, !337, i64 272, !338, i64 432, !339, i64 560, !6, i64 584, !6, i64 592, !6, i64 600, !6, i64 608, !6, i64 616, !6, i64 624, !6, i64 632, !6, i64 640, !6, i64 648, !6, i64 656, !6, i64 664, !7, i64 672}
!334 = !{!"lang_hooks_for_tree_inlining", !6, i64 0}
!335 = !{!"lang_hooks_for_callgraph", !6, i64 0}
!336 = !{!"lang_hooks_for_tree_dump", !6, i64 0, !6, i64 8}
!337 = !{!"lang_hooks_for_decls", !6, i64 0, !6, i64 8, !6, i64 16, !6, i64 24, !6, i64 32, !6, i64 40, !6, i64 48, !6, i64 56, !6, i64 64, !6, i64 72, !6, i64 80, !6, i64 88, !6, i64 96, !6, i64 104, !6, i64 112, !6, i64 120, !6, i64 128, !6, i64 136, !6, i64 144, !6, i64 152}
!338 = !{!"lang_hooks_for_types", !6, i64 0, !6, i64 8, !6, i64 16, !6, i64 24, !6, i64 32, !6, i64 40, !6, i64 48, !6, i64 56, !6, i64 64, !6, i64 72, !6, i64 80, !6, i64 88, !6, i64 96, !6, i64 104, !6, i64 112, !7, i64 120}
!339 = !{!"lang_hooks_for_lto", !6, i64 0, !6, i64 8, !6, i64 16}
!340 = !{!341, !6, i64 24}
!341 = !{!"insn_data", !6, i64 0, !7, i64 8, !6, i64 16, !6, i64 24, !7, i64 32, !7, i64 33, !7, i64 34, !7, i64 35}
!342 = !{!343, !6, i64 0}
!343 = !{!"insn_operand_data", !6, i64 0, !6, i64 8, !11, i64 16, !7, i64 18, !7, i64 19}
!344 = !{!341, !6, i64 16}
!345 = !{ptr @gen_sse3_monitor}
!346 = distinct !{!346, !22}
!347 = distinct !{!347, !22, !229, !230}
!348 = distinct !{!348, !22, !229, !230}
!349 = distinct !{!349, !22, !230, !229}
!350 = distinct !{!350, !22, !229, !230}
!351 = distinct !{!351, !22, !229, !230}
!352 = distinct !{!352, !22, !230, !229}
!353 = !{!354, !7, i64 4}
!354 = !{!"builtin_description", !11, i64 0, !7, i64 4, !6, i64 8, !7, i64 16, !7, i64 20, !11, i64 24}
!355 = !{!354, !11, i64 24}
!356 = !{!354, !7, i64 16}
!357 = distinct !{!357, !22}
!358 = !{!354, !7, i64 20}
!359 = distinct !{!359, !22}
!360 = !{!112, !11, i64 444}
!361 = !{!37, !11, i64 60}
!362 = !{!37, !11, i64 4}
!363 = !{!37, !11, i64 8}
!364 = !{!37, !11, i64 208}
!365 = !{i64 0, i64 65}
!366 = !{!37, !11, i64 36}
!367 = !{!37, !11, i64 212}
!368 = !{!37, !11, i64 204}
!369 = !{!37, !11, i64 220}
!370 = !{!37, !11, i64 216}
!371 = !{!37, !11, i64 224}
!372 = !{!154, !6, i64 8}
!373 = distinct !{!373, !22}
!374 = !{!375, !11, i64 88}
!375 = !{!"basic_block_def", !6, i64 0, !6, i64 8, !6, i64 16, !6, i64 24, !7, i64 32, !6, i64 48, !6, i64 56, !7, i64 64, !12, i64 72, !11, i64 80, !11, i64 84, !11, i64 88, !11, i64 92, !11, i64 96}
!376 = !{!201, !11, i64 52}
!377 = !{!375, !11, i64 80}
!378 = !{!201, !11, i64 48}
!379 = distinct !{!379, !22}
!380 = distinct !{!380, !22}
!381 = distinct !{!381, !22}
!382 = distinct !{!382, !22}
!383 = distinct !{!383, !22}
!384 = !{!112, !7, i64 481}
!385 = !{!68, !7, i64 16}
!386 = !{!68, !7, i64 20}
!387 = !{!68, !7, i64 21}
!388 = !{!68, !7, i64 19}
!389 = !{!68, !7, i64 18}
!390 = !{!68, !7, i64 22}
!391 = !{!68, !7, i64 17}
!392 = !{!68, !11, i64 0}
!393 = !{!68, !11, i64 4}
!394 = !{!112, !7, i64 465}
!395 = distinct !{!395, !22}
!396 = distinct !{!396, !22}
!397 = distinct !{!397, !22}
!398 = distinct !{!398, !22}
!399 = distinct !{!399, !22}
!400 = distinct !{!400, !22}
!401 = distinct !{!401, !22}
!402 = distinct !{!402, !22}
!403 = distinct !{!403, !22}
!404 = distinct !{!404, !22}
!405 = distinct !{!405, !22, !229, !230}
!406 = distinct !{!406, !22, !230, !229}
!407 = distinct !{!407, !22, !229, !230}
!408 = distinct !{!408, !22, !229, !230}
!409 = distinct !{!409, !22, !230, !229}
!410 = distinct !{!410, !22, !229, !230}
!411 = distinct !{!411, !22, !230, !229}
!412 = !{i64 0, i64 8, !5, i64 8, i64 8, !5, i64 16, i64 8, !5, i64 24, i64 16, !16, i64 40, i64 4, !16, i64 44, i64 1, !16, i64 45, i64 1, !16}
!413 = !{!414}
!414 = distinct !{!414, !415}
!415 = distinct !{!415, !"LVerDomain"}
!416 = !{!417}
!417 = distinct !{!417, !415}
!418 = distinct !{!418, !22, !229, !230}
!419 = distinct !{!419, !22, !229}
!420 = !{!421}
!421 = distinct !{!421, !422}
!422 = distinct !{!422, !"LVerDomain"}
!423 = !{!424}
!424 = distinct !{!424, !422}
!425 = distinct !{!425, !22, !229, !230}
!426 = distinct !{!426, !22, !229}
!427 = distinct !{!427, !22, !229, !230}
!428 = distinct !{!428, !22, !229, !230}
!429 = distinct !{!429, !22, !229}
!430 = distinct !{!430, !22, !229, !230}
!431 = distinct !{!431, !22, !229, !230}
!432 = distinct !{!432, !22, !229}
!433 = distinct !{!433, !22}
!434 = distinct !{!434, !22}
!435 = distinct !{!435, !22}
!436 = !{!354, !6, i64 8}
!437 = !{!354, !11, i64 0}
!438 = !{!333, !6, i64 624}
!439 = !{!333, !6, i64 632}
!440 = distinct !{!440, !22}
!441 = distinct !{!441, !22}
!442 = distinct !{!442, !22}
!443 = distinct !{!443, !22}
!444 = distinct !{!444, !22}
!445 = distinct !{!445, !22}
!446 = !{!447, !11, i64 8}
!447 = !{!"ix86_target_opts", !6, i64 0, !11, i64 8}
!448 = !{!447, !6, i64 0}
!449 = distinct !{!449, !22}
!450 = distinct !{!450, !22}
!451 = distinct !{!451, !22}
!452 = distinct !{!452, !22, !218}
!453 = !{!454, !6, i64 0}
!454 = !{!"", !6, i64 0, !7, i64 8}
!455 = !{!454, !7, i64 8}
!456 = distinct !{!456, !22}
!457 = distinct !{!457, !22}
!458 = distinct !{!458, !22}
