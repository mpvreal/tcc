; ModuleID = 'tree-vrp.c'
source_filename = "tree-vrp.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%struct.gimple_opt_pass = type { %struct.opt_pass }
%struct.opt_pass = type { i32, ptr, ptr, ptr, ptr, ptr, i32, i32, i32, i32, i32, i32, i32 }
%struct.bitmap_element_def = type { ptr, ptr, i32, [2 x i64] }
%struct._IO_FILE = type { i32, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, i32, i32, i64, i16, i8, [1 x i8], ptr, i64, ptr, ptr, ptr, ptr, i64, i32, [20 x i8] }
%struct.value_range_d = type { i32, ptr, ptr, ptr }
%struct.tree_ssa_name = type { %struct.tree_common, ptr, ptr, i32, ptr, %struct.ssa_use_operand_d }
%struct.tree_common = type { %struct.tree_base, ptr, ptr }
%struct.tree_base = type { i64 }
%struct.ssa_use_operand_d = type { ptr, ptr, %union.anon, ptr }
%union.anon = type { ptr }
%struct.function = type { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, i32, i32, i32, i32, i32, i32, ptr, i32 }
%struct.tree_type = type { %struct.tree_common, ptr, ptr, ptr, ptr, i32, i32, i32, i32, ptr, ptr, %union.tree_type_symtab, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }
%union.tree_type_symtab = type { ptr }
%struct.tree_list = type { %struct.tree_common, ptr, ptr }
%struct.tree_decl_non_common = type { %struct.tree_decl_with_vis, ptr, ptr, ptr, ptr }
%struct.tree_decl_with_vis = type { %struct.tree_decl_with_rtl, ptr, ptr, ptr, i24 }
%struct.tree_decl_with_rtl = type { %struct.tree_decl_common, ptr }
%struct.tree_decl_common = type { %struct.tree_decl_minimal, ptr, i40, i32, ptr, ptr, ptr, ptr, ptr }
%struct.tree_decl_minimal = type { %struct.tree_common, i32, i32, ptr, ptr }
%struct.gimple_df = type { ptr, ptr, ptr, ptr, %struct.pt_solution, %struct.pt_solution, ptr, ptr, ptr, ptr, i8, %struct.ssa_operands }
%struct.pt_solution = type { i8, ptr }
%struct.ssa_operands = type { ptr, i32, i32, i8, ptr, ptr }
%struct.VEC_tree_base = type { i32, i32, [1 x ptr] }
%struct.assert_locus_d = type { ptr, ptr, %struct.gimple_stmt_iterator, i32, ptr, ptr, ptr }
%struct.gimple_stmt_iterator = type { ptr, ptr, ptr }
%struct.basic_block_def = type { ptr, ptr, ptr, ptr, [2 x ptr], ptr, ptr, %union.basic_block_il_dependent, i64, i32, i32, i32, i32, i32 }
%union.basic_block_il_dependent = type { ptr }
%struct.edge_def = type { ptr, ptr, %union.edge_def_insns, ptr, ptr, i32, i32, i32, i32, i64 }
%union.edge_def_insns = type { ptr }
%struct.immediate_use_iterator_d = type { ptr, ptr, %struct.ssa_use_operand_d, ptr }
%struct.walk_stmt_info = type { %struct.gimple_stmt_iterator, ptr, ptr, i8, i8, i8, i8, ptr }
%struct.control_flow_graph = type { ptr, ptr, ptr, i32, i32, i32, ptr, i32, [2 x i32], [2 x i32], i32, i32 }
%struct.VEC_basic_block_base = type { i32, i32, [1 x ptr] }
%struct.gimple_statement_with_ops_base = type { %struct.gimple_statement_base, ptr, ptr }
%struct.gimple_statement_base = type { i32, i32, i32, i32, ptr, ptr }
%struct.gimple_statement_with_memory_ops_base = type { %struct.gimple_statement_with_ops_base, ptr, ptr }
%struct.VEC_edge_base = type { i32, i32, [1 x ptr] }
%struct.use_optype_d = type { ptr, %struct.ssa_use_operand_d }
%struct.tree_vec = type { %struct.tree_common, i32, [1 x ptr] }
%struct.tree_exp = type { %struct.tree_common, i32, ptr, [1 x ptr] }
%struct.simple_bitmap_def = type { ptr, i32, i32, [1 x i64] }
%struct.tree_int_cst = type { %struct.tree_common, %struct.double_int }
%struct.double_int = type { i64, i64 }
%struct.gimple_seq_node_d = type { ptr, ptr, ptr }
%struct.gimple_statement_phi = type { %struct.gimple_statement_base, i32, i32, ptr, [1 x %struct.phi_arg_d] }
%struct.phi_arg_d = type { %struct.ssa_use_operand_d, ptr, i32 }
%struct.def_optype_d = type { ptr, ptr }
%struct.prop_value_d = type { i32, ptr }
%struct.gimple_seq_d = type { ptr, ptr, ptr }
%struct.VEC_switch_update_base = type { i32, i32, [1 x %struct.switch_update] }
%struct.switch_update = type { ptr, ptr }
%struct.loop = type { i32, i32, ptr, ptr, %struct.lpt_decision, i32, i32, ptr, ptr, ptr, ptr, ptr, %struct.double_int, %struct.double_int, i8, i8, i32, ptr, ptr, i8, ptr }
%struct.lpt_decision = type { i32, i32 }
%struct.loops = type { i32, ptr, ptr, ptr }
%struct.VEC_loop_p_base = type { i32, i32, [1 x ptr] }

@stdout = external local_unnamed_addr global ptr, align 8
@stdin = external local_unnamed_addr global ptr, align 8
@global_trees = external local_unnamed_addr global [131 x ptr], align 16
@.str = private unnamed_addr constant [3 x i8] c"[]\00", align 1
@.str.1 = private unnamed_addr constant [10 x i8] c"UNDEFINED\00", align 1
@.str.2 = private unnamed_addr constant [4 x i8] c"%s[\00", align 1
@.str.3 = private unnamed_addr constant [2 x i8] c"~\00", align 1
@.str.4 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.5 = private unnamed_addr constant [10 x i8] c"-INF(OVF)\00", align 1
@.str.6 = private unnamed_addr constant [5 x i8] c"-INF\00", align 1
@.str.7 = private unnamed_addr constant [3 x i8] c", \00", align 1
@.str.8 = private unnamed_addr constant [10 x i8] c"+INF(OVF)\00", align 1
@.str.9 = private unnamed_addr constant [5 x i8] c"+INF\00", align 1
@.str.11 = private unnamed_addr constant [19 x i8] c"  EQUIVALENCES: { \00", align 1
@cfun = external local_unnamed_addr global ptr, align 8
@.str.13 = private unnamed_addr constant [16 x i8] c"} (%u elements)\00", align 1
@.str.14 = private unnamed_addr constant [8 x i8] c"VARYING\00", align 1
@.str.15 = private unnamed_addr constant [14 x i8] c"INVALID RANGE\00", align 1
@stderr = external local_unnamed_addr global ptr, align 8
@vr_value = internal unnamed_addr global ptr null, align 8
@.str.17 = private unnamed_addr constant [3 x i8] c": \00", align 1
@.str.18 = private unnamed_addr constant [31 x i8] c"Assertions to be inserted for \00", align 1
@asserts_for = internal unnamed_addr global ptr null, align 8
@.str.20 = private unnamed_addr constant [9 x i8] c"\0A\09BB #%d\00", align 1
@.str.21 = private unnamed_addr constant [14 x i8] c"\0A\09EDGE %d->%d\00", align 1
@.str.22 = private unnamed_addr constant [14 x i8] c"\0A\09PREDICATE: \00", align 1
@.str.23 = private unnamed_addr constant [5 x i8] c" %s \00", align 1
@tree_code_name = external local_unnamed_addr constant [0 x ptr], align 8
@.str.24 = private unnamed_addr constant [3 x i8] c"\0A\0A\00", align 1
@.str.25 = private unnamed_addr constant [31 x i8] c"\0AASSERT_EXPRs to be inserted\0A\0A\00", align 1
@need_assert_for = internal unnamed_addr global ptr null, align 8
@.str.26 = private unnamed_addr constant [4 x i8] c"vrp\00", align 1
@pass_vrp = dso_local local_unnamed_addr global %struct.gimple_opt_pass { %struct.opt_pass { i32 0, ptr @.str.26, ptr @gate_vrp, ptr @execute_vrp, ptr null, ptr null, i32 0, i32 52, i32 32, i32 0, i32 0, i32 0, i32 2087 } }, align 8
@.str.27 = private unnamed_addr constant [11 x i8] c"tree-vrp.c\00", align 1
@.str.28 = private unnamed_addr constant [2 x i8] c"?\00", align 1
@current_function_decl = external local_unnamed_addr global ptr, align 8
@.str.29 = private unnamed_addr constant [8 x i8] c"nonnull\00", align 1
@flag_wrapv = external local_unnamed_addr global i32, align 4
@flag_trapv = external local_unnamed_addr global i32, align 4
@flag_strict_overflow = external local_unnamed_addr global i32, align 4
@tree_code_type = external local_unnamed_addr constant [0 x i32], align 4
@bitmap_zero_bits = external local_unnamed_addr global %struct.bitmap_element_def, align 8
@flag_tree_vrp = external local_unnamed_addr global i32, align 4
@to_remove_edges = internal unnamed_addr global ptr null, align 8
@to_update_switch_stmts = internal unnamed_addr global ptr null, align 8
@dump_file = external local_unnamed_addr global ptr, align 8
@dump_flags = external local_unnamed_addr global i32, align 4
@.str.30 = private unnamed_addr constant [40 x i8] c"\0ASSA form after inserting ASSERT_EXPRs\0A\00", align 1
@live = internal unnamed_addr global ptr null, align 8
@gimple_ops_offset_ = external local_unnamed_addr constant [0 x i64], align 8
@.str.31 = private unnamed_addr constant [11 x i8] c"./gimple.h\00", align 1
@gss_for_code_ = external local_unnamed_addr constant [0 x i32], align 4
@.str.32 = private unnamed_addr constant [19 x i8] c"Adding assert for \00", align 1
@.str.33 = private unnamed_addr constant [7 x i8] c" from \00", align 1
@flag_delete_null_pointer_checks = external local_unnamed_addr global i32, align 4
@gimple_rhs_class_table = external local_unnamed_addr constant [0 x i8], align 1
@flag_var_tracking_assignments = external local_unnamed_addr global i32, align 4
@.str.35 = private unnamed_addr constant [16 x i8] c"./basic-block.h\00", align 1
@.str.36 = private unnamed_addr constant [43 x i8] c"Number of ASSERT_EXPR expressions inserted\00", align 1
@vr_phi_edge_counts = internal unnamed_addr global ptr null, align 8
@.str.37 = private unnamed_addr constant [22 x i8] c"\0AVisiting statement:\0A\00", align 1
@.str.38 = private unnamed_addr constant [21 x i8] c"Found new range for \00", align 1
@compare_names.s_obstack = internal unnamed_addr global ptr null, align 8
@compare_names.s_e1 = internal unnamed_addr global ptr null, align 8
@compare_names.s_e2 = internal unnamed_addr global ptr null, align 8
@.str.39 = private unnamed_addr constant [39 x i8] c"\0AVisiting conditional with predicate: \00", align 1
@.str.40 = private unnamed_addr constant [20 x i8] c"\0AWith known ranges\0A\00", align 1
@.str.41 = private unnamed_addr constant [84 x i8] c"\0AIgnoring predicate evaluation because it assumes that signed overflow is undefined\00", align 1
@.str.42 = private unnamed_addr constant [26 x i8] c"\0APredicate evaluates to: \00", align 1
@.str.43 = private unnamed_addr constant [12 x i8] c"DON'T KNOW\0A\00", align 1
@.str.44 = private unnamed_addr constant [42 x i8] c"\0AVisiting switch expression with operand \00", align 1
@.str.45 = private unnamed_addr constant [19 x i8] c" with known range \00", align 1
@.str.46 = private unnamed_addr constant [43 x i8] c"  not a single destination for this range\0A\00", align 1
@.str.47 = private unnamed_addr constant [21 x i8] c"  will take edge to \00", align 1
@.str.48 = private unnamed_addr constant [21 x i8] c"\0AVisiting PHI node: \00", align 1
@.str.49 = private unnamed_addr constant [43 x i8] c"\0A    Argument #%d (%d -> %d %sexecutable)\0A\00", align 1
@.str.50 = private unnamed_addr constant [5 x i8] c"not \00", align 1
@.str.51 = private unnamed_addr constant [10 x i8] c"\0A\09Value: \00", align 1
@.str.52 = private unnamed_addr constant [48 x i8] c": loop information indicates does not overflow\0A\00", align 1
@.str.53 = private unnamed_addr constant [27 x i8] c"\0AValue ranges after VRP:\0A\0A\00", align 1
@warn_array_bounds = external local_unnamed_addr global i32, align 4
@.str.54 = private unnamed_addr constant [19 x i8] c"Folding predicate \00", align 1
@.str.55 = private unnamed_addr constant [5 x i8] c" to \00", align 1
@.str.56 = private unnamed_addr constant [81 x i8] c"assuming signed overflow does not occur when simplifying conditional to constant\00", align 1
@.str.57 = private unnamed_addr constant [69 x i8] c"assuming signed overflow does not occur when simplifying conditional\00", align 1
@warn_strict_overflow = external local_unnamed_addr global i32, align 4
@input_location = external local_unnamed_addr global i32, align 4
@.str.58 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@warn_type_limits = external local_unnamed_addr global i32, align 4
@.str.59 = private unnamed_addr constant [58 x i8] c"comparison always false due to limited range of data type\00", align 1
@.str.60 = private unnamed_addr constant [57 x i8] c"comparison always true due to limited range of data type\00", align 1
@.str.61 = private unnamed_addr constant [76 x i8] c"assuming signed overflow does not occur when simplifying && or || to & or |\00", align 1
@.str.62 = private unnamed_addr constant [86 x i8] c"assuming signed overflow does not occur when simplifying ==, != or ! to identity or ^\00", align 1
@.str.63 = private unnamed_addr constant [92 x i8] c"assuming signed overflow does not occur when simplifying %</%> or %<%%%> to %<>>%> or %<&%>\00", align 1
@.str.64 = private unnamed_addr constant [88 x i8] c"assuming signed overflow does not occur when simplifying %<abs (X)%> to %<X%> or %<-X%>\00", align 1
@.str.65 = private unnamed_addr constant [23 x i8] c"Simplified relational \00", align 1
@.str.66 = private unnamed_addr constant [7 x i8] c" into \00", align 1
@.str.67 = private unnamed_addr constant [33 x i8] c"removing unreachable case label\0A\00", align 1
@.str.68 = private unnamed_addr constant [40 x i8] c"array subscript is outside array bounds\00", align 1
@.str.69 = private unnamed_addr constant [38 x i8] c"array subscript is above array bounds\00", align 1
@.str.70 = private unnamed_addr constant [38 x i8] c"array subscript is below array bounds\00", align 1
@stack = internal global ptr null, align 8

; Function Attrs: inlinehint nofree nounwind sspstrong uwtable
define dso_local i32 @vprintf(ptr noalias nocapture noundef readonly %0, ptr noundef %1) local_unnamed_addr #0 {
  %3 = load ptr, ptr @stdout, align 8, !tbaa !5
  %4 = tail call i32 @vfprintf(ptr noundef %3, ptr noundef %0, ptr noundef %1)
  ret i32 %4
}

; Function Attrs: nofree nounwind
declare noundef i32 @vfprintf(ptr nocapture noundef, ptr nocapture noundef readonly, ptr noundef) local_unnamed_addr #1

; Function Attrs: inlinehint nofree nounwind sspstrong uwtable
define dso_local i32 @getchar() local_unnamed_addr #0 {
  %1 = load ptr, ptr @stdin, align 8, !tbaa !5
  %2 = tail call i32 @getc(ptr noundef %1)
  ret i32 %2
}

; Function Attrs: nofree nounwind
declare noundef i32 @getc(ptr nocapture noundef) local_unnamed_addr #1

; Function Attrs: inlinehint nounwind sspstrong uwtable
define dso_local i32 @fgetc_unlocked(ptr noundef %0) local_unnamed_addr #2 {
  %2 = getelementptr inbounds %struct._IO_FILE, ptr %0, i64 0, i32 1
  %3 = load ptr, ptr %2, align 8, !tbaa !9
  %4 = getelementptr inbounds %struct._IO_FILE, ptr %0, i64 0, i32 2
  %5 = load ptr, ptr %4, align 8, !tbaa !14
  %6 = icmp ult ptr %3, %5
  br i1 %6, label %9, label %7, !prof !15

7:                                                ; preds = %1
  %8 = tail call i32 @__uflow(ptr noundef nonnull %0) #18
  br label %13

9:                                                ; preds = %1
  %10 = getelementptr inbounds i8, ptr %3, i64 1
  store ptr %10, ptr %2, align 8, !tbaa !9
  %11 = load i8, ptr %3, align 1, !tbaa !16
  %12 = zext i8 %11 to i32
  br label %13

13:                                               ; preds = %9, %7
  %14 = phi i32 [ %8, %7 ], [ %12, %9 ]
  ret i32 %14
}

declare i32 @__uflow(ptr noundef) local_unnamed_addr #3

; Function Attrs: inlinehint nounwind sspstrong uwtable
define dso_local i32 @getc_unlocked(ptr noundef %0) local_unnamed_addr #2 {
  %2 = getelementptr inbounds %struct._IO_FILE, ptr %0, i64 0, i32 1
  %3 = load ptr, ptr %2, align 8, !tbaa !9
  %4 = getelementptr inbounds %struct._IO_FILE, ptr %0, i64 0, i32 2
  %5 = load ptr, ptr %4, align 8, !tbaa !14
  %6 = icmp ult ptr %3, %5
  br i1 %6, label %9, label %7, !prof !15

7:                                                ; preds = %1
  %8 = tail call i32 @__uflow(ptr noundef nonnull %0) #18
  br label %13

9:                                                ; preds = %1
  %10 = getelementptr inbounds i8, ptr %3, i64 1
  store ptr %10, ptr %2, align 8, !tbaa !9
  %11 = load i8, ptr %3, align 1, !tbaa !16
  %12 = zext i8 %11 to i32
  br label %13

13:                                               ; preds = %9, %7
  %14 = phi i32 [ %8, %7 ], [ %12, %9 ]
  ret i32 %14
}

; Function Attrs: inlinehint nounwind sspstrong uwtable
define dso_local i32 @getchar_unlocked() local_unnamed_addr #2 {
  %1 = load ptr, ptr @stdin, align 8, !tbaa !5
  %2 = getelementptr inbounds %struct._IO_FILE, ptr %1, i64 0, i32 1
  %3 = load ptr, ptr %2, align 8, !tbaa !9
  %4 = getelementptr inbounds %struct._IO_FILE, ptr %1, i64 0, i32 2
  %5 = load ptr, ptr %4, align 8, !tbaa !14
  %6 = icmp ult ptr %3, %5
  br i1 %6, label %9, label %7, !prof !15

7:                                                ; preds = %0
  %8 = tail call i32 @__uflow(ptr noundef nonnull %1) #18
  br label %13

9:                                                ; preds = %0
  %10 = getelementptr inbounds i8, ptr %3, i64 1
  store ptr %10, ptr %2, align 8, !tbaa !9
  %11 = load i8, ptr %3, align 1, !tbaa !16
  %12 = zext i8 %11 to i32
  br label %13

13:                                               ; preds = %9, %7
  %14 = phi i32 [ %8, %7 ], [ %12, %9 ]
  ret i32 %14
}

; Function Attrs: inlinehint nofree nounwind sspstrong uwtable
define dso_local i32 @putchar(i32 noundef %0) local_unnamed_addr #0 {
  %2 = load ptr, ptr @stdout, align 8, !tbaa !5
  %3 = tail call i32 @putc(i32 noundef %0, ptr noundef %2)
  ret i32 %3
}

; Function Attrs: nofree nounwind
declare noundef i32 @putc(i32 noundef, ptr nocapture noundef) local_unnamed_addr #1

; Function Attrs: inlinehint nounwind sspstrong uwtable
define dso_local i32 @fputc_unlocked(i32 noundef %0, ptr noundef %1) local_unnamed_addr #2 {
  %3 = getelementptr inbounds %struct._IO_FILE, ptr %1, i64 0, i32 5
  %4 = load ptr, ptr %3, align 8, !tbaa !17
  %5 = getelementptr inbounds %struct._IO_FILE, ptr %1, i64 0, i32 6
  %6 = load ptr, ptr %5, align 8, !tbaa !18
  %7 = icmp ult ptr %4, %6
  br i1 %7, label %11, label %8, !prof !15

8:                                                ; preds = %2
  %9 = and i32 %0, 255
  %10 = tail call i32 @__overflow(ptr noundef nonnull %1, i32 noundef %9) #18
  br label %15

11:                                               ; preds = %2
  %12 = trunc i32 %0 to i8
  %13 = getelementptr inbounds i8, ptr %4, i64 1
  store ptr %13, ptr %3, align 8, !tbaa !17
  store i8 %12, ptr %4, align 1, !tbaa !16
  %14 = and i32 %0, 255
  br label %15

15:                                               ; preds = %11, %8
  %16 = phi i32 [ %10, %8 ], [ %14, %11 ]
  ret i32 %16
}

declare i32 @__overflow(ptr noundef, i32 noundef) local_unnamed_addr #3

; Function Attrs: inlinehint nounwind sspstrong uwtable
define dso_local i32 @putc_unlocked(i32 noundef %0, ptr noundef %1) local_unnamed_addr #2 {
  %3 = getelementptr inbounds %struct._IO_FILE, ptr %1, i64 0, i32 5
  %4 = load ptr, ptr %3, align 8, !tbaa !17
  %5 = getelementptr inbounds %struct._IO_FILE, ptr %1, i64 0, i32 6
  %6 = load ptr, ptr %5, align 8, !tbaa !18
  %7 = icmp ult ptr %4, %6
  br i1 %7, label %11, label %8, !prof !15

8:                                                ; preds = %2
  %9 = and i32 %0, 255
  %10 = tail call i32 @__overflow(ptr noundef nonnull %1, i32 noundef %9) #18
  br label %15

11:                                               ; preds = %2
  %12 = trunc i32 %0 to i8
  %13 = getelementptr inbounds i8, ptr %4, i64 1
  store ptr %13, ptr %3, align 8, !tbaa !17
  store i8 %12, ptr %4, align 1, !tbaa !16
  %14 = and i32 %0, 255
  br label %15

15:                                               ; preds = %11, %8
  %16 = phi i32 [ %10, %8 ], [ %14, %11 ]
  ret i32 %16
}

; Function Attrs: inlinehint nounwind sspstrong uwtable
define dso_local i32 @putchar_unlocked(i32 noundef %0) local_unnamed_addr #2 {
  %2 = load ptr, ptr @stdout, align 8, !tbaa !5
  %3 = getelementptr inbounds %struct._IO_FILE, ptr %2, i64 0, i32 5
  %4 = load ptr, ptr %3, align 8, !tbaa !17
  %5 = getelementptr inbounds %struct._IO_FILE, ptr %2, i64 0, i32 6
  %6 = load ptr, ptr %5, align 8, !tbaa !18
  %7 = icmp ult ptr %4, %6
  br i1 %7, label %11, label %8, !prof !15

8:                                                ; preds = %1
  %9 = and i32 %0, 255
  %10 = tail call i32 @__overflow(ptr noundef nonnull %2, i32 noundef %9) #18
  br label %15

11:                                               ; preds = %1
  %12 = trunc i32 %0 to i8
  %13 = getelementptr inbounds i8, ptr %4, i64 1
  store ptr %13, ptr %3, align 8, !tbaa !17
  store i8 %12, ptr %4, align 1, !tbaa !16
  %14 = and i32 %0, 255
  br label %15

15:                                               ; preds = %11, %8
  %16 = phi i32 [ %10, %8 ], [ %14, %11 ]
  ret i32 %16
}

; Function Attrs: inlinehint nounwind sspstrong uwtable
define dso_local i64 @getline(ptr noundef %0, ptr noundef %1, ptr noundef %2) local_unnamed_addr #2 {
  %4 = tail call i64 @__getdelim(ptr noundef %0, ptr noundef %1, i32 noundef 10, ptr noundef %2) #18
  ret i64 %4
}

declare i64 @__getdelim(ptr noundef, ptr noundef, i32 noundef, ptr noundef) local_unnamed_addr #3

; Function Attrs: inlinehint mustprogress nofree norecurse nosync nounwind sspstrong willreturn memory(argmem: read) uwtable
define dso_local i32 @feof_unlocked(ptr nocapture noundef readonly %0) local_unnamed_addr #4 {
  %2 = load i32, ptr %0, align 8, !tbaa !19
  %3 = lshr i32 %2, 4
  %4 = and i32 %3, 1
  ret i32 %4
}

; Function Attrs: inlinehint mustprogress nofree norecurse nosync nounwind sspstrong willreturn memory(argmem: read) uwtable
define dso_local i32 @ferror_unlocked(ptr nocapture noundef readonly %0) local_unnamed_addr #4 {
  %2 = load i32, ptr %0, align 8, !tbaa !19
  %3 = lshr i32 %2, 5
  %4 = and i32 %3, 1
  ret i32 %4
}

; Function Attrs: inlinehint mustprogress nofree nounwind sspstrong willreturn memory(read) uwtable
define dso_local i32 @tolower(i32 noundef %0) local_unnamed_addr #5 {
  %2 = add i32 %0, 128
  %3 = icmp ult i32 %2, 384
  br i1 %3, label %4, label %10

4:                                                ; preds = %1
  %5 = tail call ptr @__ctype_tolower_loc() #18
  %6 = load ptr, ptr %5, align 8, !tbaa !5
  %7 = sext i32 %0 to i64
  %8 = getelementptr inbounds i32, ptr %6, i64 %7
  %9 = load i32, ptr %8, align 4, !tbaa !20
  br label %10

10:                                               ; preds = %1, %4
  %11 = phi i32 [ %9, %4 ], [ %0, %1 ]
  ret i32 %11
}

declare ptr @__ctype_tolower_loc() local_unnamed_addr #3

; Function Attrs: inlinehint mustprogress nofree nounwind sspstrong willreturn memory(read) uwtable
define dso_local i32 @toupper(i32 noundef %0) local_unnamed_addr #5 {
  %2 = add i32 %0, 128
  %3 = icmp ult i32 %2, 384
  br i1 %3, label %4, label %10

4:                                                ; preds = %1
  %5 = tail call ptr @__ctype_toupper_loc() #18
  %6 = load ptr, ptr %5, align 8, !tbaa !5
  %7 = sext i32 %0 to i64
  %8 = getelementptr inbounds i32, ptr %6, i64 %7
  %9 = load i32, ptr %8, align 4, !tbaa !20
  br label %10

10:                                               ; preds = %1, %4
  %11 = phi i32 [ %9, %4 ], [ %0, %1 ]
  ret i32 %11
}

declare ptr @__ctype_toupper_loc() local_unnamed_addr #3

; Function Attrs: inlinehint nounwind sspstrong uwtable
define dso_local i32 @atoi(ptr noundef %0) local_unnamed_addr #2 {
  %2 = tail call i64 @__isoc23_strtol(ptr noundef %0, ptr noundef null, i32 noundef 10) #18
  %3 = trunc i64 %2 to i32
  ret i32 %3
}

declare i64 @__isoc23_strtol(ptr noundef, ptr noundef, i32 noundef) local_unnamed_addr #3

; Function Attrs: inlinehint nounwind sspstrong uwtable
define dso_local i64 @atol(ptr noundef %0) local_unnamed_addr #2 {
  %2 = tail call i64 @__isoc23_strtol(ptr noundef %0, ptr noundef null, i32 noundef 10) #18
  ret i64 %2
}

; Function Attrs: inlinehint nounwind sspstrong uwtable
define dso_local i64 @atoll(ptr noundef %0) local_unnamed_addr #2 {
  %2 = tail call i64 @__isoc23_strtoll(ptr noundef %0, ptr noundef null, i32 noundef 10) #18
  ret i64 %2
}

declare i64 @__isoc23_strtoll(ptr noundef, ptr noundef, i32 noundef) local_unnamed_addr #3

; Function Attrs: inlinehint nounwind sspstrong uwtable
define dso_local ptr @bsearch(ptr noundef %0, ptr noundef %1, i64 noundef %2, i64 noundef %3, ptr nocapture noundef readonly %4) local_unnamed_addr #2 {
  %6 = icmp eq i64 %2, 0
  br i1 %6, label %24, label %7

7:                                                ; preds = %5, %20
  %8 = phi i64 [ %22, %20 ], [ 0, %5 ]
  %9 = phi i64 [ %21, %20 ], [ %2, %5 ]
  %10 = add i64 %8, %9
  %11 = lshr i64 %10, 1
  %12 = mul i64 %11, %3
  %13 = getelementptr inbounds i8, ptr %1, i64 %12
  %14 = tail call i32 %4(ptr noundef %0, ptr noundef %13) #18
  %15 = icmp slt i32 %14, 0
  br i1 %15, label %20, label %16

16:                                               ; preds = %7
  %17 = icmp eq i32 %14, 0
  br i1 %17, label %24, label %18

18:                                               ; preds = %16
  %19 = add nuw i64 %11, 1
  br label %20

20:                                               ; preds = %7, %18
  %21 = phi i64 [ %9, %18 ], [ %11, %7 ]
  %22 = phi i64 [ %19, %18 ], [ %8, %7 ]
  %23 = icmp ult i64 %22, %21
  br i1 %23, label %7, label %24, !llvm.loop !21

24:                                               ; preds = %16, %20, %5
  %25 = phi ptr [ null, %5 ], [ null, %20 ], [ %13, %16 ]
  ret ptr %25
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare void @llvm.lifetime.start.p0(i64 immarg, ptr nocapture) #6

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare void @llvm.lifetime.end.p0(i64 immarg, ptr nocapture) #6

; Function Attrs: inlinehint mustprogress nofree nounwind sspstrong willreturn uwtable
define dso_local nofpclass(nan inf) double @atof(ptr nocapture noundef readonly %0) local_unnamed_addr #7 {
  %2 = tail call fast nofpclass(nan inf) double @strtod(ptr nocapture noundef %0, ptr noundef null)
  ret double %2
}

; Function Attrs: mustprogress nofree nounwind willreturn
declare nofpclass(nan inf) double @strtod(ptr noundef readonly, ptr nocapture noundef) local_unnamed_addr #8

; Function Attrs: nounwind sspstrong uwtable
define dso_local zeroext i8 @ssa_name_nonnegative_p(ptr nocapture noundef readonly %0) local_unnamed_addr #9 {
  %2 = alloca i8, align 1
  %3 = tail call fastcc ptr @get_value_range(ptr noundef %0)
  %4 = icmp eq ptr %3, null
  br i1 %4, label %26, label %5

5:                                                ; preds = %1
  %6 = load i32, ptr %3, align 8, !tbaa !23
  %7 = icmp eq i32 %6, 1
  br i1 %7, label %8, label %26

8:                                                ; preds = %5
  %9 = getelementptr inbounds %struct.value_range_d, ptr %3, i64 0, i32 1
  %10 = load ptr, ptr %9, align 8, !tbaa !25
  %11 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 13), align 8, !tbaa !5
  call void @llvm.lifetime.start.p0(i64 1, ptr nonnull %2) #18
  store i8 0, ptr %2, align 1, !tbaa !16
  %12 = call fastcc i32 @compare_values_warnv(ptr noundef %10, ptr noundef %11, ptr noundef nonnull %2)
  %13 = load i8, ptr %2, align 1, !tbaa !16
  %14 = icmp eq i8 %13, 0
  br i1 %14, label %22, label %15

15:                                               ; preds = %8
  %16 = call zeroext i8 @is_gimple_min_invariant(ptr noundef %10) #18
  %17 = icmp eq i8 %16, 0
  br i1 %17, label %21, label %18

18:                                               ; preds = %15
  %19 = call zeroext i8 @is_gimple_min_invariant(ptr noundef %11) #18
  %20 = icmp eq i8 %19, 0
  br i1 %20, label %21, label %22

21:                                               ; preds = %18, %15
  br label %22

22:                                               ; preds = %8, %18, %21
  %23 = phi i32 [ %12, %18 ], [ -2, %21 ], [ %12, %8 ]
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %2) #18
  %24 = icmp ult i32 %23, 2
  %25 = zext i1 %24 to i8
  br label %26

26:                                               ; preds = %5, %1, %22
  %27 = phi i8 [ %25, %22 ], [ 0, %1 ], [ 0, %5 ]
  ret i8 %27
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc ptr @get_value_range(ptr nocapture noundef readonly %0) unnamed_addr #9 {
  %2 = load ptr, ptr @vr_value, align 8, !tbaa !5
  %3 = icmp eq ptr %2, null
  br i1 %3, label %91, label %4

4:                                                ; preds = %1
  %5 = getelementptr inbounds %struct.tree_ssa_name, ptr %0, i64 0, i32 3
  %6 = load i32, ptr %5, align 8, !tbaa !16
  %7 = zext i32 %6 to i64
  %8 = getelementptr inbounds ptr, ptr %2, i64 %7
  %9 = load ptr, ptr %8, align 8, !tbaa !5
  %10 = icmp eq ptr %9, null
  br i1 %10, label %11, label %91

11:                                               ; preds = %4
  %12 = tail call ptr @xcalloc(i64 noundef 1, i64 noundef 32) #18
  %13 = load ptr, ptr @vr_value, align 8, !tbaa !5
  %14 = getelementptr inbounds ptr, ptr %13, i64 %7
  store ptr %12, ptr %14, align 8, !tbaa !5
  %15 = getelementptr inbounds %struct.value_range_d, ptr %12, i64 0, i32 3
  store ptr null, ptr %15, align 8, !tbaa !26
  %16 = getelementptr inbounds %struct.tree_ssa_name, ptr %0, i64 0, i32 1
  %17 = load ptr, ptr %16, align 8, !tbaa !16
  %18 = load i64, ptr %0, align 8
  %19 = and i64 %18, 4294967296
  %20 = icmp eq i64 %19, 0
  br i1 %20, label %91, label %21

21:                                               ; preds = %11
  %22 = load i64, ptr %17, align 8
  %23 = and i64 %22, 65535
  %24 = icmp eq i64 %23, 34
  br i1 %24, label %25, label %86

25:                                               ; preds = %21
  %26 = getelementptr inbounds %struct.tree_common, ptr %17, i64 0, i32 2
  %27 = load ptr, ptr %26, align 8, !tbaa !16
  %28 = load i64, ptr %27, align 8
  %29 = trunc i64 %28 to i16
  switch i16 %29, label %86 [
    i16 10, label %30
    i16 12, label %30
  ]

30:                                               ; preds = %25, %25
  %31 = load ptr, ptr @cfun, align 8, !tbaa !5
  %32 = getelementptr inbounds %struct.function, ptr %31, i64 0, i32 7
  %33 = load ptr, ptr %32, align 8, !tbaa !27
  %34 = icmp eq ptr %33, %17
  br i1 %34, label %81, label %35

35:                                               ; preds = %30
  %36 = load ptr, ptr @current_function_decl, align 8, !tbaa !5
  %37 = getelementptr inbounds %struct.tree_common, ptr %36, i64 0, i32 2
  %38 = load ptr, ptr %37, align 8, !tbaa !16
  %39 = getelementptr inbounds %struct.tree_type, ptr %38, i64 0, i32 4
  %40 = load ptr, ptr %39, align 8, !tbaa !16
  %41 = tail call ptr @lookup_attribute(ptr noundef nonnull @.str.29, ptr noundef %40) #18
  %42 = icmp eq ptr %41, null
  br i1 %42, label %86, label %43

43:                                               ; preds = %35
  %44 = getelementptr inbounds %struct.tree_list, ptr %41, i64 0, i32 2
  %45 = load ptr, ptr %44, align 8, !tbaa !16
  %46 = icmp eq ptr %45, null
  br i1 %46, label %81, label %47

47:                                               ; preds = %43
  %48 = load ptr, ptr @current_function_decl, align 8, !tbaa !5
  %49 = getelementptr inbounds %struct.tree_decl_non_common, ptr %48, i64 0, i32 2
  %50 = load ptr, ptr %49, align 8, !tbaa !16
  %51 = icmp eq ptr %50, null
  %52 = icmp eq ptr %50, %17
  %53 = or i1 %51, %52
  br i1 %53, label %63, label %54

54:                                               ; preds = %47, %54
  %55 = phi ptr [ %59, %54 ], [ %50, %47 ]
  %56 = phi i64 [ %58, %54 ], [ 1, %47 ]
  %57 = getelementptr inbounds %struct.tree_common, ptr %55, i64 0, i32 1
  %58 = add i64 %56, 1
  %59 = load ptr, ptr %57, align 8, !tbaa !16
  %60 = icmp eq ptr %59, null
  %61 = icmp eq ptr %59, %17
  %62 = or i1 %60, %61
  br i1 %62, label %63, label %54, !llvm.loop !29

63:                                               ; preds = %54, %47
  %64 = phi i64 [ 1, %47 ], [ %58, %54 ]
  %65 = phi i1 [ %52, %47 ], [ %61, %54 ]
  br i1 %65, label %68, label %66

66:                                               ; preds = %63
  tail call void @fancy_abort(ptr noundef nonnull @.str.27, i32 noundef 344, ptr noundef nonnull @.str.28) #18
  %67 = load ptr, ptr %44, align 8, !tbaa !16
  br label %68

68:                                               ; preds = %66, %63
  %69 = phi ptr [ %45, %63 ], [ %67, %66 ]
  %70 = icmp eq ptr %69, null
  br i1 %70, label %86, label %75

71:                                               ; preds = %75
  %72 = getelementptr inbounds %struct.tree_common, ptr %76, i64 0, i32 1
  %73 = load ptr, ptr %72, align 8, !tbaa !16
  %74 = icmp eq ptr %73, null
  br i1 %74, label %86, label %75, !llvm.loop !30

75:                                               ; preds = %68, %71
  %76 = phi ptr [ %73, %71 ], [ %69, %68 ]
  %77 = getelementptr inbounds %struct.tree_list, ptr %76, i64 0, i32 2
  %78 = load ptr, ptr %77, align 8, !tbaa !16
  %79 = tail call i32 @compare_tree_int(ptr noundef %78, i64 noundef %64) #18
  %80 = icmp eq i32 %79, 0
  br i1 %80, label %81, label %71

81:                                               ; preds = %75, %43, %30
  %82 = load ptr, ptr %26, align 8, !tbaa !16
  %83 = tail call ptr @build_int_cst(ptr noundef %82, i64 noundef 0) #18
  store i32 2, ptr %12, align 8, !tbaa !23
  %84 = getelementptr inbounds %struct.value_range_d, ptr %12, i64 0, i32 1
  store ptr %83, ptr %84, align 8, !tbaa !25
  %85 = getelementptr inbounds %struct.value_range_d, ptr %12, i64 0, i32 2
  store ptr %83, ptr %85, align 8, !tbaa !31
  br label %91

86:                                               ; preds = %71, %25, %68, %35, %21
  store i32 3, ptr %12, align 8, !tbaa !23
  %87 = getelementptr inbounds %struct.value_range_d, ptr %12, i64 0, i32 1
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %87, i8 0, i64 16, i1 false)
  %88 = load ptr, ptr %15, align 8, !tbaa !26
  %89 = icmp eq ptr %88, null
  br i1 %89, label %91, label %90

90:                                               ; preds = %86
  tail call void @bitmap_clear(ptr noundef nonnull %88) #18
  br label %91

91:                                               ; preds = %90, %86, %11, %81, %4, %1
  %92 = phi ptr [ null, %1 ], [ %9, %4 ], [ %12, %81 ], [ %12, %11 ], [ %12, %86 ], [ %12, %90 ]
  ret ptr %92
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc i32 @compare_values(ptr noundef %0, ptr noundef %1) unnamed_addr #9 {
  %3 = alloca i8, align 1
  call void @llvm.lifetime.start.p0(i64 1, ptr nonnull %3) #18
  store i8 0, ptr %3, align 1, !tbaa !16
  %4 = call fastcc i32 @compare_values_warnv(ptr noundef %0, ptr noundef %1, ptr noundef nonnull %3)
  %5 = load i8, ptr %3, align 1, !tbaa !16
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %14, label %7

7:                                                ; preds = %2
  %8 = call zeroext i8 @is_gimple_min_invariant(ptr noundef %0) #18
  %9 = icmp eq i8 %8, 0
  br i1 %9, label %13, label %10

10:                                               ; preds = %7
  %11 = call zeroext i8 @is_gimple_min_invariant(ptr noundef %1) #18
  %12 = icmp eq i8 %11, 0
  br i1 %12, label %13, label %14

13:                                               ; preds = %10, %7
  br label %14

14:                                               ; preds = %13, %10, %2
  %15 = phi i32 [ %4, %10 ], [ -2, %13 ], [ %4, %2 ]
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %3) #18
  ret i32 %15
}

; Function Attrs: nounwind sspstrong uwtable
define dso_local void @dump_value_range(ptr noundef %0, ptr noundef readonly %1) local_unnamed_addr #9 {
  %3 = icmp eq ptr %1, null
  br i1 %3, label %4, label %6

4:                                                ; preds = %2
  %5 = tail call i64 @fwrite(ptr nonnull @.str, i64 2, i64 1, ptr %0)
  br label %244

6:                                                ; preds = %2
  %7 = load i32, ptr %1, align 8, !tbaa !23
  switch i32 %7, label %242 [
    i32 0, label %8
    i32 1, label %10
    i32 2, label %10
    i32 3, label %240
  ]

8:                                                ; preds = %6
  %9 = tail call i64 @fwrite(ptr nonnull @.str.1, i64 9, i64 1, ptr %0)
  br label %244

10:                                               ; preds = %6, %6
  %11 = getelementptr inbounds %struct.value_range_d, ptr %1, i64 0, i32 1
  %12 = load ptr, ptr %11, align 8, !tbaa !25
  %13 = getelementptr inbounds %struct.tree_common, ptr %12, i64 0, i32 2
  %14 = load ptr, ptr %13, align 8, !tbaa !16
  %15 = icmp eq i32 %7, 2
  %16 = select i1 %15, ptr @.str.3, ptr @.str.4
  %17 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %0, ptr noundef nonnull @.str.2, ptr noundef nonnull %16)
  %18 = load ptr, ptr %11, align 8, !tbaa !25
  %19 = getelementptr inbounds %struct.tree_common, ptr %18, i64 0, i32 2
  %20 = load ptr, ptr %19, align 8, !tbaa !16
  %21 = load i64, ptr %20, align 8
  %22 = trunc i64 %21 to i32
  %23 = and i32 %22, 65535
  %24 = add nsw i32 %23, -6
  %25 = icmp ult i32 %24, 3
  br i1 %25, label %26, label %54

26:                                               ; preds = %10
  %27 = and i64 %21, 2097152
  %28 = icmp ne i64 %27, 0
  %29 = load i32, ptr @flag_wrapv, align 4
  %30 = icmp ne i32 %29, 0
  %31 = select i1 %28, i1 true, i1 %30
  br i1 %31, label %54, label %32

32:                                               ; preds = %26
  %33 = load i64, ptr %18, align 8
  %34 = and i64 %33, 65535
  %35 = getelementptr inbounds [0 x i32], ptr @tree_code_type, i64 0, i64 %34
  %36 = load i32, ptr %35, align 4, !tbaa !16
  %37 = icmp ne i32 %36, 1
  %38 = and i64 %33, 134217728
  %39 = icmp eq i64 %38, 0
  %40 = or i1 %37, %39
  br i1 %40, label %54, label %41

41:                                               ; preds = %32
  %42 = getelementptr inbounds %struct.tree_type, ptr %20, i64 0, i32 13
  %43 = load ptr, ptr %42, align 8, !tbaa !16
  %44 = icmp eq ptr %43, %18
  br i1 %44, label %52, label %45

45:                                               ; preds = %41
  %46 = icmp eq ptr %43, null
  br i1 %46, label %54, label %47

47:                                               ; preds = %45
  %48 = tail call i32 @operand_equal_p(ptr noundef nonnull %18, ptr noundef nonnull %43, i32 noundef 0) #18
  %49 = icmp eq i32 %48, 0
  br i1 %49, label %50, label %52

50:                                               ; preds = %47
  %51 = load ptr, ptr %11, align 8, !tbaa !25
  br label %54

52:                                               ; preds = %41, %47
  %53 = tail call i64 @fwrite(ptr nonnull @.str.5, i64 9, i64 1, ptr %0)
  br label %87

54:                                               ; preds = %50, %10, %45, %26, %32
  %55 = phi ptr [ %51, %50 ], [ %18, %10 ], [ %18, %45 ], [ %18, %26 ], [ %18, %32 ]
  %56 = load i64, ptr %14, align 8
  %57 = trunc i64 %56 to i32
  %58 = and i32 %57, 65535
  %59 = add nsw i32 %58, -6
  %60 = icmp ult i32 %59, 3
  %61 = and i64 %56, 2097152
  %62 = icmp eq i64 %61, 0
  %63 = and i1 %62, %60
  br i1 %63, label %64, label %85

64:                                               ; preds = %54
  %65 = getelementptr inbounds %struct.tree_common, ptr %55, i64 0, i32 2
  %66 = load ptr, ptr %65, align 8, !tbaa !16
  %67 = load i64, ptr %66, align 8
  %68 = trunc i64 %67 to i32
  %69 = and i32 %68, 65535
  %70 = add nsw i32 %69, -6
  %71 = icmp ult i32 %70, 3
  br i1 %71, label %72, label %85

72:                                               ; preds = %64
  %73 = getelementptr inbounds %struct.tree_type, ptr %66, i64 0, i32 13
  %74 = load ptr, ptr %73, align 8, !tbaa !16
  %75 = icmp eq ptr %74, %55
  br i1 %75, label %83, label %76

76:                                               ; preds = %72
  %77 = icmp eq ptr %74, null
  br i1 %77, label %85, label %78

78:                                               ; preds = %76
  %79 = tail call i32 @operand_equal_p(ptr noundef nonnull %55, ptr noundef nonnull %74, i32 noundef 0) #18
  %80 = icmp eq i32 %79, 0
  br i1 %80, label %81, label %83

81:                                               ; preds = %78
  %82 = load ptr, ptr %11, align 8, !tbaa !25
  br label %85

83:                                               ; preds = %72, %78
  %84 = tail call i64 @fwrite(ptr nonnull @.str.6, i64 4, i64 1, ptr %0)
  br label %87

85:                                               ; preds = %81, %64, %76, %54
  %86 = phi ptr [ %82, %81 ], [ %55, %64 ], [ %55, %76 ], [ %55, %54 ]
  tail call void @print_generic_expr(ptr noundef %0, ptr noundef %86, i32 noundef 0) #18
  br label %87

87:                                               ; preds = %83, %85, %52
  %88 = tail call i64 @fwrite(ptr nonnull @.str.7, i64 2, i64 1, ptr %0)
  %89 = getelementptr inbounds %struct.value_range_d, ptr %1, i64 0, i32 2
  %90 = load ptr, ptr %89, align 8, !tbaa !31
  %91 = getelementptr inbounds %struct.tree_common, ptr %90, i64 0, i32 2
  %92 = load ptr, ptr %91, align 8, !tbaa !16
  %93 = load i64, ptr %92, align 8
  %94 = trunc i64 %93 to i32
  %95 = and i32 %94, 65535
  %96 = add nsw i32 %95, -6
  %97 = icmp ult i32 %96, 3
  br i1 %97, label %98, label %126

98:                                               ; preds = %87
  %99 = and i64 %93, 2097152
  %100 = icmp ne i64 %99, 0
  %101 = load i32, ptr @flag_wrapv, align 4
  %102 = icmp ne i32 %101, 0
  %103 = select i1 %100, i1 true, i1 %102
  br i1 %103, label %126, label %104

104:                                              ; preds = %98
  %105 = load i64, ptr %90, align 8
  %106 = and i64 %105, 65535
  %107 = getelementptr inbounds [0 x i32], ptr @tree_code_type, i64 0, i64 %106
  %108 = load i32, ptr %107, align 4, !tbaa !16
  %109 = icmp ne i32 %108, 1
  %110 = and i64 %105, 134217728
  %111 = icmp eq i64 %110, 0
  %112 = or i1 %109, %111
  br i1 %112, label %126, label %113

113:                                              ; preds = %104
  %114 = getelementptr inbounds %struct.tree_type, ptr %92, i64 0, i32 14
  %115 = load ptr, ptr %114, align 8, !tbaa !16
  %116 = icmp eq ptr %115, %90
  br i1 %116, label %124, label %117

117:                                              ; preds = %113
  %118 = icmp eq ptr %115, null
  br i1 %118, label %126, label %119

119:                                              ; preds = %117
  %120 = tail call i32 @operand_equal_p(ptr noundef nonnull %90, ptr noundef nonnull %115, i32 noundef 0) #18
  %121 = icmp eq i32 %120, 0
  br i1 %121, label %122, label %124

122:                                              ; preds = %119
  %123 = load ptr, ptr %89, align 8, !tbaa !31
  br label %126

124:                                              ; preds = %113, %119
  %125 = tail call i64 @fwrite(ptr nonnull @.str.8, i64 9, i64 1, ptr %0)
  br label %156

126:                                              ; preds = %122, %87, %117, %98, %104
  %127 = phi ptr [ %123, %122 ], [ %90, %87 ], [ %90, %117 ], [ %90, %98 ], [ %90, %104 ]
  %128 = load i64, ptr %14, align 8
  %129 = trunc i64 %128 to i32
  %130 = and i32 %129, 65535
  %131 = add nsw i32 %130, -6
  %132 = icmp ult i32 %131, 3
  br i1 %132, label %133, label %154

133:                                              ; preds = %126
  %134 = getelementptr inbounds %struct.tree_common, ptr %127, i64 0, i32 2
  %135 = load ptr, ptr %134, align 8, !tbaa !16
  %136 = load i64, ptr %135, align 8
  %137 = trunc i64 %136 to i32
  %138 = and i32 %137, 65535
  %139 = add nsw i32 %138, -6
  %140 = icmp ult i32 %139, 3
  br i1 %140, label %141, label %154

141:                                              ; preds = %133
  %142 = getelementptr inbounds %struct.tree_type, ptr %135, i64 0, i32 14
  %143 = load ptr, ptr %142, align 8, !tbaa !16
  %144 = icmp eq ptr %143, %127
  br i1 %144, label %152, label %145

145:                                              ; preds = %141
  %146 = icmp eq ptr %143, null
  br i1 %146, label %154, label %147

147:                                              ; preds = %145
  %148 = tail call i32 @operand_equal_p(ptr noundef nonnull %127, ptr noundef nonnull %143, i32 noundef 0) #18
  %149 = icmp eq i32 %148, 0
  br i1 %149, label %150, label %152

150:                                              ; preds = %147
  %151 = load ptr, ptr %89, align 8, !tbaa !31
  br label %154

152:                                              ; preds = %141, %147
  %153 = tail call i64 @fwrite(ptr nonnull @.str.9, i64 4, i64 1, ptr %0)
  br label %156

154:                                              ; preds = %150, %133, %145, %126
  %155 = phi ptr [ %151, %150 ], [ %127, %133 ], [ %127, %145 ], [ %127, %126 ]
  tail call void @print_generic_expr(ptr noundef %0, ptr noundef %155, i32 noundef 0) #18
  br label %156

156:                                              ; preds = %152, %154, %124
  %157 = tail call i32 @fputc(i32 93, ptr %0)
  %158 = getelementptr inbounds %struct.value_range_d, ptr %1, i64 0, i32 3
  %159 = load ptr, ptr %158, align 8, !tbaa !26
  %160 = icmp eq ptr %159, null
  br i1 %160, label %244, label %161

161:                                              ; preds = %156
  %162 = tail call i64 @fwrite(ptr nonnull @.str.11, i64 18, i64 1, ptr %0)
  %163 = load ptr, ptr %158, align 8, !tbaa !26
  %164 = load ptr, ptr %163, align 8, !tbaa !32
  %165 = icmp eq ptr %164, null
  %166 = select i1 %165, ptr @bitmap_zero_bits, ptr %164
  %167 = getelementptr inbounds %struct.bitmap_element_def, ptr %166, i64 0, i32 2
  %168 = load i32, ptr %167, align 8, !tbaa !34
  %169 = shl i32 %168, 7
  %170 = getelementptr inbounds %struct.bitmap_element_def, ptr %166, i64 0, i32 3
  %171 = load i64, ptr %170, align 8, !tbaa !36
  %172 = icmp eq i64 %171, 0
  %173 = zext i1 %172 to i32
  %174 = or i32 %169, %173
  br label %175

175:                                              ; preds = %223, %161
  %176 = phi i32 [ 0, %161 ], [ %183, %223 ]
  %177 = phi i64 [ %171, %161 ], [ %236, %223 ]
  %178 = phi ptr [ %166, %161 ], [ %185, %223 ]
  %179 = phi i32 [ %174, %161 ], [ %237, %223 ]
  %180 = phi i32 [ 0, %161 ], [ %235, %223 ]
  %181 = icmp eq i64 %177, 0
  br i1 %181, label %196, label %182

182:                                              ; preds = %205, %175
  %183 = phi i32 [ %176, %175 ], [ %206, %205 ]
  %184 = phi i64 [ %177, %175 ], [ %210, %205 ]
  %185 = phi ptr [ %178, %175 ], [ %201, %205 ]
  %186 = phi i32 [ %179, %175 ], [ %207, %205 ]
  %187 = and i64 %184, 1
  %188 = icmp eq i64 %187, 0
  br i1 %188, label %189, label %223

189:                                              ; preds = %182, %189
  %190 = phi i32 [ %193, %189 ], [ %186, %182 ]
  %191 = phi i64 [ %192, %189 ], [ %184, %182 ]
  %192 = lshr i64 %191, 1
  %193 = add i32 %190, 1
  %194 = and i64 %191, 2
  %195 = icmp eq i64 %194, 0
  br i1 %195, label %189, label %223, !llvm.loop !37

196:                                              ; preds = %175
  %197 = add i32 %179, 63
  %198 = and i32 %197, -64
  %199 = add i32 %176, 1
  br label %200

200:                                              ; preds = %219, %196
  %201 = phi ptr [ %178, %196 ], [ %217, %219 ]
  %202 = phi i32 [ %198, %196 ], [ %222, %219 ]
  %203 = phi i32 [ %199, %196 ], [ 0, %219 ]
  %204 = icmp eq i32 %203, 2
  br i1 %204, label %216, label %205

205:                                              ; preds = %200, %212
  %206 = phi i32 [ %214, %212 ], [ %203, %200 ]
  %207 = phi i32 [ %213, %212 ], [ %202, %200 ]
  %208 = zext i32 %206 to i64
  %209 = getelementptr inbounds %struct.bitmap_element_def, ptr %201, i64 0, i32 3, i64 %208
  %210 = load i64, ptr %209, align 8, !tbaa !36
  %211 = icmp eq i64 %210, 0
  br i1 %211, label %212, label %182

212:                                              ; preds = %205
  %213 = add i32 %207, 64
  %214 = add i32 %206, 1
  %215 = icmp eq i32 %214, 2
  br i1 %215, label %216, label %205, !llvm.loop !38

216:                                              ; preds = %212, %200
  %217 = load ptr, ptr %201, align 8, !tbaa !39
  %218 = icmp eq ptr %217, null
  br i1 %218, label %238, label %219

219:                                              ; preds = %216
  %220 = getelementptr inbounds %struct.bitmap_element_def, ptr %217, i64 0, i32 2
  %221 = load i32, ptr %220, align 8, !tbaa !34
  %222 = shl i32 %221, 7
  br label %200

223:                                              ; preds = %189, %182
  %224 = phi i64 [ %184, %182 ], [ %192, %189 ]
  %225 = phi i32 [ %186, %182 ], [ %193, %189 ]
  %226 = load ptr, ptr @cfun, align 8, !tbaa !5
  %227 = getelementptr inbounds %struct.function, ptr %226, i64 0, i32 3
  %228 = load ptr, ptr %227, align 8, !tbaa !40
  %229 = getelementptr inbounds %struct.gimple_df, ptr %228, i64 0, i32 2
  %230 = load ptr, ptr %229, align 8, !tbaa !41
  %231 = zext i32 %225 to i64
  %232 = getelementptr inbounds %struct.VEC_tree_base, ptr %230, i64 0, i32 2, i64 %231
  %233 = load ptr, ptr %232, align 8, !tbaa !5
  tail call void @print_generic_expr(ptr noundef %0, ptr noundef %233, i32 noundef 0) #18
  %234 = tail call i32 @fputc(i32 32, ptr %0)
  %235 = add i32 %180, 1
  %236 = lshr i64 %224, 1
  %237 = add i32 %225, 1
  br label %175, !llvm.loop !45

238:                                              ; preds = %216
  %239 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %0, ptr noundef nonnull @.str.13, i32 noundef %180)
  br label %244

240:                                              ; preds = %6
  %241 = tail call i64 @fwrite(ptr nonnull @.str.14, i64 7, i64 1, ptr %0)
  br label %244

242:                                              ; preds = %6
  %243 = tail call i64 @fwrite(ptr nonnull @.str.15, i64 13, i64 1, ptr %0)
  br label %244

244:                                              ; preds = %156, %238, %8, %240, %242, %4
  ret void
}

; Function Attrs: nofree nounwind
declare noundef i32 @fprintf(ptr nocapture noundef, ptr nocapture noundef readonly, ...) local_unnamed_addr #1

; Function Attrs: inlinehint nounwind sspstrong uwtable
define internal fastcc zeroext i8 @is_negative_overflow_infinity(ptr noundef %0) unnamed_addr #2 {
  %2 = getelementptr inbounds %struct.tree_common, ptr %0, i64 0, i32 2
  %3 = load ptr, ptr %2, align 8, !tbaa !16
  %4 = load i64, ptr %3, align 8
  %5 = trunc i64 %4 to i32
  %6 = and i32 %5, 65535
  %7 = add nsw i32 %6, -6
  %8 = icmp ult i32 %7, 3
  br i1 %8, label %9, label %34

9:                                                ; preds = %1
  %10 = and i64 %4, 2097152
  %11 = icmp ne i64 %10, 0
  %12 = load i32, ptr @flag_wrapv, align 4
  %13 = icmp ne i32 %12, 0
  %14 = select i1 %11, i1 true, i1 %13
  br i1 %14, label %34, label %15

15:                                               ; preds = %9
  %16 = load i64, ptr %0, align 8
  %17 = and i64 %16, 65535
  %18 = getelementptr inbounds [0 x i32], ptr @tree_code_type, i64 0, i64 %17
  %19 = load i32, ptr %18, align 4, !tbaa !16
  %20 = icmp ne i32 %19, 1
  %21 = and i64 %16, 134217728
  %22 = icmp eq i64 %21, 0
  %23 = or i1 %20, %22
  br i1 %23, label %34, label %24

24:                                               ; preds = %15
  %25 = getelementptr inbounds %struct.tree_type, ptr %3, i64 0, i32 13
  %26 = load ptr, ptr %25, align 8, !tbaa !16
  %27 = icmp eq ptr %26, %0
  br i1 %27, label %34, label %28

28:                                               ; preds = %24
  %29 = icmp eq ptr %26, null
  br i1 %29, label %34, label %30

30:                                               ; preds = %28
  %31 = tail call i32 @operand_equal_p(ptr noundef nonnull %0, ptr noundef nonnull %26, i32 noundef 0) #18
  %32 = icmp ne i32 %31, 0
  %33 = zext i1 %32 to i8
  br label %34

34:                                               ; preds = %1, %30, %28, %24, %15, %9
  %35 = phi i8 [ 0, %15 ], [ 0, %9 ], [ 1, %24 ], [ 0, %28 ], [ %33, %30 ], [ 0, %1 ]
  ret i8 %35
}

; Function Attrs: inlinehint nounwind sspstrong uwtable
define internal fastcc zeroext i8 @vrp_val_is_min(ptr noundef %0) unnamed_addr #2 {
  %2 = getelementptr inbounds %struct.tree_common, ptr %0, i64 0, i32 2
  %3 = load ptr, ptr %2, align 8, !tbaa !16
  %4 = load i64, ptr %3, align 8
  %5 = trunc i64 %4 to i32
  %6 = and i32 %5, 65535
  %7 = add nsw i32 %6, -6
  %8 = icmp ult i32 %7, 3
  br i1 %8, label %9, label %19

9:                                                ; preds = %1
  %10 = getelementptr inbounds %struct.tree_type, ptr %3, i64 0, i32 13
  %11 = load ptr, ptr %10, align 8, !tbaa !16
  %12 = icmp eq ptr %11, %0
  br i1 %12, label %19, label %13

13:                                               ; preds = %9
  %14 = icmp eq ptr %11, null
  br i1 %14, label %19, label %15

15:                                               ; preds = %13
  %16 = tail call i32 @operand_equal_p(ptr noundef nonnull %0, ptr noundef nonnull %11, i32 noundef 0) #18
  %17 = icmp ne i32 %16, 0
  %18 = zext i1 %17 to i8
  br label %19

19:                                               ; preds = %1, %13, %15, %9
  %20 = phi i8 [ 1, %9 ], [ 0, %13 ], [ %18, %15 ], [ 0, %1 ]
  ret i8 %20
}

declare void @print_generic_expr(ptr noundef, ptr noundef, i32 noundef) local_unnamed_addr #3

; Function Attrs: inlinehint nounwind sspstrong uwtable
define internal fastcc zeroext i8 @is_positive_overflow_infinity(ptr noundef %0) unnamed_addr #2 {
  %2 = getelementptr inbounds %struct.tree_common, ptr %0, i64 0, i32 2
  %3 = load ptr, ptr %2, align 8, !tbaa !16
  %4 = load i64, ptr %3, align 8
  %5 = trunc i64 %4 to i32
  %6 = and i32 %5, 65535
  %7 = add nsw i32 %6, -6
  %8 = icmp ult i32 %7, 3
  br i1 %8, label %9, label %34

9:                                                ; preds = %1
  %10 = and i64 %4, 2097152
  %11 = icmp ne i64 %10, 0
  %12 = load i32, ptr @flag_wrapv, align 4
  %13 = icmp ne i32 %12, 0
  %14 = select i1 %11, i1 true, i1 %13
  br i1 %14, label %34, label %15

15:                                               ; preds = %9
  %16 = load i64, ptr %0, align 8
  %17 = and i64 %16, 65535
  %18 = getelementptr inbounds [0 x i32], ptr @tree_code_type, i64 0, i64 %17
  %19 = load i32, ptr %18, align 4, !tbaa !16
  %20 = icmp ne i32 %19, 1
  %21 = and i64 %16, 134217728
  %22 = icmp eq i64 %21, 0
  %23 = or i1 %20, %22
  br i1 %23, label %34, label %24

24:                                               ; preds = %15
  %25 = getelementptr inbounds %struct.tree_type, ptr %3, i64 0, i32 14
  %26 = load ptr, ptr %25, align 8, !tbaa !16
  %27 = icmp eq ptr %26, %0
  br i1 %27, label %34, label %28

28:                                               ; preds = %24
  %29 = icmp eq ptr %26, null
  br i1 %29, label %34, label %30

30:                                               ; preds = %28
  %31 = tail call i32 @operand_equal_p(ptr noundef nonnull %0, ptr noundef nonnull %26, i32 noundef 0) #18
  %32 = icmp ne i32 %31, 0
  %33 = zext i1 %32 to i8
  br label %34

34:                                               ; preds = %1, %30, %28, %24, %15, %9
  %35 = phi i8 [ 0, %15 ], [ 0, %9 ], [ 1, %24 ], [ 0, %28 ], [ %33, %30 ], [ 0, %1 ]
  ret i8 %35
}

; Function Attrs: inlinehint nounwind sspstrong uwtable
define internal fastcc zeroext i8 @vrp_val_is_max(ptr noundef %0) unnamed_addr #2 {
  %2 = getelementptr inbounds %struct.tree_common, ptr %0, i64 0, i32 2
  %3 = load ptr, ptr %2, align 8, !tbaa !16
  %4 = load i64, ptr %3, align 8
  %5 = trunc i64 %4 to i32
  %6 = and i32 %5, 65535
  %7 = add nsw i32 %6, -6
  %8 = icmp ult i32 %7, 3
  br i1 %8, label %9, label %19

9:                                                ; preds = %1
  %10 = getelementptr inbounds %struct.tree_type, ptr %3, i64 0, i32 14
  %11 = load ptr, ptr %10, align 8, !tbaa !16
  %12 = icmp eq ptr %11, %0
  br i1 %12, label %19, label %13

13:                                               ; preds = %9
  %14 = icmp eq ptr %11, null
  br i1 %14, label %19, label %15

15:                                               ; preds = %13
  %16 = tail call i32 @operand_equal_p(ptr noundef nonnull %0, ptr noundef nonnull %11, i32 noundef 0) #18
  %17 = icmp ne i32 %16, 0
  %18 = zext i1 %17 to i8
  br label %19

19:                                               ; preds = %1, %13, %15, %9
  %20 = phi i8 [ 1, %9 ], [ 0, %13 ], [ %18, %15 ], [ 0, %1 ]
  ret i8 %20
}

; Function Attrs: nounwind sspstrong uwtable
define dso_local void @debug_value_range(ptr noundef %0) local_unnamed_addr #9 {
  %2 = load ptr, ptr @stderr, align 8, !tbaa !5
  tail call void @dump_value_range(ptr noundef %2, ptr noundef %0)
  %3 = load ptr, ptr @stderr, align 8, !tbaa !5
  %4 = tail call i32 @fputc(i32 10, ptr %3)
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define dso_local void @dump_all_value_ranges(ptr noundef %0) local_unnamed_addr #9 {
  %2 = load ptr, ptr @cfun, align 8, !tbaa !5
  br label %3

3:                                                ; preds = %31, %1
  %4 = phi ptr [ %2, %1 ], [ %32, %31 ]
  %5 = phi i64 [ 0, %1 ], [ %33, %31 ]
  %6 = getelementptr inbounds %struct.function, ptr %4, i64 0, i32 3
  %7 = load ptr, ptr %6, align 8, !tbaa !40
  %8 = getelementptr inbounds %struct.gimple_df, ptr %7, i64 0, i32 2
  %9 = load ptr, ptr %8, align 8, !tbaa !41
  %10 = icmp eq ptr %9, null
  br i1 %10, label %13, label %11

11:                                               ; preds = %3
  %12 = load i32, ptr %9, align 8, !tbaa !46
  br label %13

13:                                               ; preds = %3, %11
  %14 = phi i32 [ %12, %11 ], [ 0, %3 ]
  %15 = zext i32 %14 to i64
  %16 = icmp ult i64 %5, %15
  br i1 %16, label %17, label %34

17:                                               ; preds = %13
  %18 = load ptr, ptr @vr_value, align 8, !tbaa !5
  %19 = getelementptr inbounds ptr, ptr %18, i64 %5
  %20 = load ptr, ptr %19, align 8, !tbaa !5
  %21 = icmp eq ptr %20, null
  br i1 %21, label %31, label %22

22:                                               ; preds = %17
  %23 = getelementptr inbounds %struct.VEC_tree_base, ptr %9, i64 0, i32 2, i64 %5
  %24 = load ptr, ptr %23, align 8, !tbaa !5
  tail call void @print_generic_expr(ptr noundef %0, ptr noundef %24, i32 noundef 0) #18
  %25 = tail call i64 @fwrite(ptr nonnull @.str.17, i64 2, i64 1, ptr %0)
  %26 = load ptr, ptr @vr_value, align 8, !tbaa !5
  %27 = getelementptr inbounds ptr, ptr %26, i64 %5
  %28 = load ptr, ptr %27, align 8, !tbaa !5
  tail call void @dump_value_range(ptr noundef %0, ptr noundef %28)
  %29 = tail call i32 @fputc(i32 10, ptr %0)
  %30 = load ptr, ptr @cfun, align 8, !tbaa !5
  br label %31

31:                                               ; preds = %17, %22
  %32 = phi ptr [ %4, %17 ], [ %30, %22 ]
  %33 = add nuw nsw i64 %5, 1
  br label %3, !llvm.loop !48

34:                                               ; preds = %13
  %35 = tail call i32 @fputc(i32 10, ptr %0)
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define dso_local void @debug_all_value_ranges() local_unnamed_addr #9 {
  %1 = load ptr, ptr @stderr, align 8, !tbaa !5
  tail call void @dump_all_value_ranges(ptr noundef %1)
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define dso_local void @dump_asserts_for(ptr noundef %0, ptr noundef %1) local_unnamed_addr #9 {
  %3 = tail call i64 @fwrite(ptr nonnull @.str.18, i64 30, i64 1, ptr %0)
  tail call void @print_generic_expr(ptr noundef %0, ptr noundef %1, i32 noundef 0) #18
  %4 = tail call i32 @fputc(i32 10, ptr %0)
  %5 = load ptr, ptr @asserts_for, align 8, !tbaa !5
  %6 = getelementptr inbounds %struct.tree_ssa_name, ptr %1, i64 0, i32 3
  %7 = load i32, ptr %6, align 8, !tbaa !16
  %8 = zext i32 %7 to i64
  %9 = getelementptr inbounds ptr, ptr %5, i64 %8
  %10 = load ptr, ptr %9, align 8, !tbaa !5
  %11 = icmp eq ptr %10, null
  br i1 %11, label %49, label %12

12:                                               ; preds = %2, %35
  %13 = phi ptr [ %47, %35 ], [ %10, %2 ]
  %14 = tail call i32 @fputc(i32 9, ptr %0)
  %15 = getelementptr inbounds %struct.assert_locus_d, ptr %13, i64 0, i32 2
  %16 = load ptr, ptr %15, align 8, !tbaa !49
  %17 = load ptr, ptr %16, align 8, !tbaa !51
  tail call void @print_gimple_stmt(ptr noundef %0, ptr noundef %17, i32 noundef 0, i32 noundef 0) #18
  %18 = load ptr, ptr %13, align 8, !tbaa !53
  %19 = getelementptr inbounds %struct.basic_block_def, ptr %18, i64 0, i32 9
  %20 = load i32, ptr %19, align 8, !tbaa !55
  %21 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %0, ptr noundef nonnull @.str.20, i32 noundef %20)
  %22 = getelementptr inbounds %struct.assert_locus_d, ptr %13, i64 0, i32 1
  %23 = load ptr, ptr %22, align 8, !tbaa !57
  %24 = icmp eq ptr %23, null
  br i1 %24, label %35, label %25

25:                                               ; preds = %12
  %26 = load ptr, ptr %23, align 8, !tbaa !58
  %27 = getelementptr inbounds %struct.basic_block_def, ptr %26, i64 0, i32 9
  %28 = load i32, ptr %27, align 8, !tbaa !55
  %29 = getelementptr inbounds %struct.edge_def, ptr %23, i64 0, i32 1
  %30 = load ptr, ptr %29, align 8, !tbaa !60
  %31 = getelementptr inbounds %struct.basic_block_def, ptr %30, i64 0, i32 9
  %32 = load i32, ptr %31, align 8, !tbaa !55
  %33 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %0, ptr noundef nonnull @.str.21, i32 noundef %28, i32 noundef %32)
  %34 = load ptr, ptr %22, align 8, !tbaa !57
  tail call void @dump_edge_info(ptr noundef %0, ptr noundef %34, i32 noundef 0) #18
  br label %35

35:                                               ; preds = %25, %12
  %36 = tail call i64 @fwrite(ptr nonnull @.str.22, i64 13, i64 1, ptr %0)
  tail call void @print_generic_expr(ptr noundef %0, ptr noundef %1, i32 noundef 0) #18
  %37 = getelementptr inbounds %struct.assert_locus_d, ptr %13, i64 0, i32 3
  %38 = load i32, ptr %37, align 8, !tbaa !61
  %39 = sext i32 %38 to i64
  %40 = getelementptr inbounds [0 x ptr], ptr @tree_code_name, i64 0, i64 %39
  %41 = load ptr, ptr %40, align 8, !tbaa !5
  %42 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %0, ptr noundef nonnull @.str.23, ptr noundef %41)
  %43 = getelementptr inbounds %struct.assert_locus_d, ptr %13, i64 0, i32 4
  %44 = load ptr, ptr %43, align 8, !tbaa !62
  tail call void @print_generic_expr(ptr noundef %0, ptr noundef %44, i32 noundef 0) #18
  %45 = tail call i64 @fwrite(ptr nonnull @.str.24, i64 2, i64 1, ptr %0)
  %46 = getelementptr inbounds %struct.assert_locus_d, ptr %13, i64 0, i32 6
  %47 = load ptr, ptr %46, align 8, !tbaa !5
  %48 = icmp eq ptr %47, null
  br i1 %48, label %49, label %12, !llvm.loop !63

49:                                               ; preds = %35, %2
  %50 = tail call i32 @fputc(i32 10, ptr %0)
  ret void
}

declare void @print_gimple_stmt(ptr noundef, ptr noundef, i32 noundef, i32 noundef) local_unnamed_addr #3

declare void @dump_edge_info(ptr noundef, ptr noundef, i32 noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define dso_local void @debug_asserts_for(ptr noundef %0) local_unnamed_addr #9 {
  %2 = load ptr, ptr @stderr, align 8, !tbaa !5
  tail call void @dump_asserts_for(ptr noundef %2, ptr noundef %0)
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define dso_local void @dump_all_asserts(ptr noundef %0) local_unnamed_addr #9 {
  %2 = tail call i64 @fwrite(ptr nonnull @.str.25, i64 30, i64 1, ptr %0)
  %3 = load ptr, ptr @need_assert_for, align 8, !tbaa !5
  %4 = load ptr, ptr %3, align 8, !tbaa !32
  %5 = icmp eq ptr %4, null
  %6 = select i1 %5, ptr @bitmap_zero_bits, ptr %4
  %7 = getelementptr inbounds %struct.bitmap_element_def, ptr %6, i64 0, i32 2
  %8 = load i32, ptr %7, align 8, !tbaa !34
  %9 = shl i32 %8, 7
  %10 = getelementptr inbounds %struct.bitmap_element_def, ptr %6, i64 0, i32 3
  %11 = load i64, ptr %10, align 8, !tbaa !36
  %12 = icmp eq i64 %11, 0
  %13 = zext i1 %12 to i32
  %14 = or i32 %9, %13
  br label %15

15:                                               ; preds = %62, %1
  %16 = phi i64 [ %11, %1 ], [ %73, %62 ]
  %17 = phi i32 [ 0, %1 ], [ %23, %62 ]
  %18 = phi i32 [ %14, %1 ], [ %74, %62 ]
  %19 = phi ptr [ %6, %1 ], [ %25, %62 ]
  %20 = icmp eq i64 %16, 0
  br i1 %20, label %35, label %21

21:                                               ; preds = %44, %15
  %22 = phi i64 [ %16, %15 ], [ %49, %44 ]
  %23 = phi i32 [ %17, %15 ], [ %45, %44 ]
  %24 = phi i32 [ %18, %15 ], [ %46, %44 ]
  %25 = phi ptr [ %19, %15 ], [ %41, %44 ]
  %26 = and i64 %22, 1
  %27 = icmp eq i64 %26, 0
  br i1 %27, label %28, label %62

28:                                               ; preds = %21, %28
  %29 = phi i32 [ %32, %28 ], [ %24, %21 ]
  %30 = phi i64 [ %31, %28 ], [ %22, %21 ]
  %31 = lshr i64 %30, 1
  %32 = add i32 %29, 1
  %33 = and i64 %30, 2
  %34 = icmp eq i64 %33, 0
  br i1 %34, label %28, label %62, !llvm.loop !37

35:                                               ; preds = %15
  %36 = add i32 %18, 63
  %37 = and i32 %36, -64
  %38 = add i32 %17, 1
  br label %39

39:                                               ; preds = %58, %35
  %40 = phi i32 [ %37, %35 ], [ %61, %58 ]
  %41 = phi ptr [ %19, %35 ], [ %56, %58 ]
  %42 = phi i32 [ %38, %35 ], [ 0, %58 ]
  %43 = icmp eq i32 %42, 2
  br i1 %43, label %55, label %44

44:                                               ; preds = %39, %51
  %45 = phi i32 [ %53, %51 ], [ %42, %39 ]
  %46 = phi i32 [ %52, %51 ], [ %40, %39 ]
  %47 = zext i32 %45 to i64
  %48 = getelementptr inbounds %struct.bitmap_element_def, ptr %41, i64 0, i32 3, i64 %47
  %49 = load i64, ptr %48, align 8, !tbaa !36
  %50 = icmp eq i64 %49, 0
  br i1 %50, label %51, label %21

51:                                               ; preds = %44
  %52 = add i32 %46, 64
  %53 = add i32 %45, 1
  %54 = icmp eq i32 %53, 2
  br i1 %54, label %55, label %44, !llvm.loop !38

55:                                               ; preds = %51, %39
  %56 = load ptr, ptr %41, align 8, !tbaa !39
  %57 = icmp eq ptr %56, null
  br i1 %57, label %75, label %58

58:                                               ; preds = %55
  %59 = getelementptr inbounds %struct.bitmap_element_def, ptr %56, i64 0, i32 2
  %60 = load i32, ptr %59, align 8, !tbaa !34
  %61 = shl i32 %60, 7
  br label %39

62:                                               ; preds = %28, %21
  %63 = phi i64 [ %22, %21 ], [ %31, %28 ]
  %64 = phi i32 [ %24, %21 ], [ %32, %28 ]
  %65 = load ptr, ptr @cfun, align 8, !tbaa !5
  %66 = getelementptr inbounds %struct.function, ptr %65, i64 0, i32 3
  %67 = load ptr, ptr %66, align 8, !tbaa !40
  %68 = getelementptr inbounds %struct.gimple_df, ptr %67, i64 0, i32 2
  %69 = load ptr, ptr %68, align 8, !tbaa !41
  %70 = zext i32 %64 to i64
  %71 = getelementptr inbounds %struct.VEC_tree_base, ptr %69, i64 0, i32 2, i64 %70
  %72 = load ptr, ptr %71, align 8, !tbaa !5
  tail call void @dump_asserts_for(ptr noundef %0, ptr noundef %72)
  %73 = lshr i64 %63, 1
  %74 = add i32 %64, 1
  br label %15, !llvm.loop !64

75:                                               ; preds = %55
  %76 = tail call i32 @fputc(i32 10, ptr %0)
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define dso_local void @debug_all_asserts() local_unnamed_addr #9 {
  %1 = load ptr, ptr @stderr, align 8, !tbaa !5
  tail call void @dump_all_asserts(ptr noundef %1)
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind sspstrong willreturn memory(read, argmem: none, inaccessiblemem: none) uwtable
define internal zeroext i8 @gate_vrp() #10 {
  %1 = load i32, ptr @flag_tree_vrp, align 4, !tbaa !20
  %2 = icmp ne i32 %1, 0
  %3 = zext i1 %2 to i8
  ret i8 %3
}

; Function Attrs: nounwind sspstrong uwtable
define internal i32 @execute_vrp() #9 {
  %1 = alloca %struct.gimple_stmt_iterator, align 8
  %2 = alloca %struct.immediate_use_iterator_d, align 8
  %3 = alloca %struct.walk_stmt_info, align 8
  %4 = alloca %struct.gimple_stmt_iterator, align 8
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca %struct.gimple_stmt_iterator, align 8
  %9 = alloca %struct.gimple_stmt_iterator, align 8
  %10 = alloca %struct.gimple_stmt_iterator, align 8
  tail call void @loop_optimizer_init(i32 noundef 15) #18
  tail call void @rewrite_into_loop_closed_ssa(ptr noundef null, i32 noundef 2048) #18
  tail call void @scev_initialize() #18
  %11 = tail call ptr @bitmap_obstack_alloc_stat(ptr noundef null) #18
  store ptr %11, ptr @need_assert_for, align 8, !tbaa !5
  %12 = load ptr, ptr @cfun, align 8, !tbaa !5
  %13 = getelementptr inbounds %struct.function, ptr %12, i64 0, i32 3
  %14 = load ptr, ptr %13, align 8, !tbaa !40
  %15 = getelementptr inbounds %struct.gimple_df, ptr %14, i64 0, i32 2
  %16 = load ptr, ptr %15, align 8, !tbaa !41
  %17 = icmp eq ptr %16, null
  br i1 %17, label %21, label %18

18:                                               ; preds = %0
  %19 = load i32, ptr %16, align 8, !tbaa !46
  %20 = zext i32 %19 to i64
  br label %21

21:                                               ; preds = %18, %0
  %22 = phi i64 [ %20, %18 ], [ 0, %0 ]
  %23 = tail call ptr @xcalloc(i64 noundef %22, i64 noundef 8) #18
  store ptr %23, ptr @asserts_for, align 8, !tbaa !5
  tail call void @calculate_dominance_info(i32 noundef 1) #18
  %24 = load ptr, ptr @cfun, align 8, !tbaa !5
  %25 = getelementptr inbounds %struct.function, ptr %24, i64 0, i32 1
  %26 = load ptr, ptr %25, align 8, !tbaa !65
  %27 = getelementptr inbounds %struct.control_flow_graph, ptr %26, i64 0, i32 5
  %28 = load i32, ptr %27, align 8, !tbaa !66
  %29 = add nsw i32 %28, 2
  %30 = sext i32 %29 to i64
  %31 = tail call ptr @xcalloc(i64 noundef %30, i64 noundef 4) #18
  %32 = load ptr, ptr @cfun, align 8, !tbaa !5
  %33 = getelementptr inbounds %struct.function, ptr %32, i64 0, i32 1
  %34 = load ptr, ptr %33, align 8, !tbaa !65
  %35 = getelementptr inbounds %struct.control_flow_graph, ptr %34, i64 0, i32 5
  %36 = load i32, ptr %35, align 8, !tbaa !66
  %37 = add nsw i32 %36, 2
  %38 = sext i32 %37 to i64
  %39 = tail call ptr @xcalloc(i64 noundef %38, i64 noundef 4) #18
  %40 = load ptr, ptr @cfun, align 8, !tbaa !5
  %41 = getelementptr inbounds %struct.function, ptr %40, i64 0, i32 1
  %42 = load ptr, ptr %41, align 8, !tbaa !65
  %43 = getelementptr inbounds %struct.control_flow_graph, ptr %42, i64 0, i32 5
  %44 = load i32, ptr %43, align 8, !tbaa !66
  %45 = add nsw i32 %44, 2
  %46 = sext i32 %45 to i64
  %47 = tail call ptr @xcalloc(i64 noundef %46, i64 noundef 4) #18
  %48 = load ptr, ptr @cfun, align 8, !tbaa !5
  %49 = getelementptr inbounds %struct.function, ptr %48, i64 0, i32 1
  %50 = load ptr, ptr %49, align 8, !tbaa !65
  %51 = getelementptr inbounds %struct.control_flow_graph, ptr %50, i64 0, i32 5
  %52 = load i32, ptr %51, align 8, !tbaa !66
  %53 = add nsw i32 %52, 2
  %54 = sext i32 %53 to i64
  %55 = tail call ptr @xcalloc(i64 noundef %54, i64 noundef 8) #18
  store ptr %55, ptr @live, align 8, !tbaa !5
  %56 = tail call i32 @pre_and_rev_post_order_compute(ptr noundef null, ptr noundef %31, i8 noundef zeroext 0) #18
  %57 = icmp sgt i32 %56, 0
  br i1 %57, label %58, label %1230

58:                                               ; preds = %21
  %59 = zext i32 %56 to i64
  %60 = and i64 %59, 3
  %61 = icmp ult i32 %56, 4
  br i1 %61, label %93, label %62

62:                                               ; preds = %58
  %63 = and i64 %59, 4294967292
  br label %64

64:                                               ; preds = %64, %62
  %65 = phi i64 [ 0, %62 ], [ %90, %64 ]
  %66 = phi i64 [ 0, %62 ], [ %91, %64 ]
  %67 = getelementptr inbounds i32, ptr %31, i64 %65
  %68 = load i32, ptr %67, align 4, !tbaa !20
  %69 = sext i32 %68 to i64
  %70 = getelementptr inbounds i32, ptr %39, i64 %69
  %71 = trunc i64 %65 to i32
  store i32 %71, ptr %70, align 4, !tbaa !20
  %72 = or i64 %65, 1
  %73 = getelementptr inbounds i32, ptr %31, i64 %72
  %74 = load i32, ptr %73, align 4, !tbaa !20
  %75 = sext i32 %74 to i64
  %76 = getelementptr inbounds i32, ptr %39, i64 %75
  %77 = trunc i64 %72 to i32
  store i32 %77, ptr %76, align 4, !tbaa !20
  %78 = or i64 %65, 2
  %79 = getelementptr inbounds i32, ptr %31, i64 %78
  %80 = load i32, ptr %79, align 4, !tbaa !20
  %81 = sext i32 %80 to i64
  %82 = getelementptr inbounds i32, ptr %39, i64 %81
  %83 = trunc i64 %78 to i32
  store i32 %83, ptr %82, align 4, !tbaa !20
  %84 = or i64 %65, 3
  %85 = getelementptr inbounds i32, ptr %31, i64 %84
  %86 = load i32, ptr %85, align 4, !tbaa !20
  %87 = sext i32 %86 to i64
  %88 = getelementptr inbounds i32, ptr %39, i64 %87
  %89 = trunc i64 %84 to i32
  store i32 %89, ptr %88, align 4, !tbaa !20
  %90 = add nuw nsw i64 %65, 4
  %91 = add i64 %66, 4
  %92 = icmp eq i64 %91, %63
  br i1 %92, label %93, label %64, !llvm.loop !68

93:                                               ; preds = %64, %58
  %94 = phi i64 [ 0, %58 ], [ %90, %64 ]
  %95 = icmp eq i64 %60, 0
  br i1 %95, label %107, label %96

96:                                               ; preds = %93, %96
  %97 = phi i64 [ %104, %96 ], [ %94, %93 ]
  %98 = phi i64 [ %105, %96 ], [ 0, %93 ]
  %99 = getelementptr inbounds i32, ptr %31, i64 %97
  %100 = load i32, ptr %99, align 4, !tbaa !20
  %101 = sext i32 %100 to i64
  %102 = getelementptr inbounds i32, ptr %39, i64 %101
  %103 = trunc i64 %97 to i32
  store i32 %103, ptr %102, align 4, !tbaa !20
  %104 = add nuw nsw i64 %97, 1
  %105 = add i64 %98, 1
  %106 = icmp eq i64 %105, %60
  br i1 %106, label %107, label %96, !llvm.loop !69

107:                                              ; preds = %96, %93
  br label %111

108:                                              ; preds = %1188
  %109 = icmp sgt i64 %112, 1
  %110 = add nsw i64 %112, -1
  br i1 %109, label %111, label %1230, !llvm.loop !71

111:                                              ; preds = %107, %108
  %112 = phi i64 [ %110, %108 ], [ %59, %107 ]
  %113 = phi i32 [ %115, %108 ], [ %56, %107 ]
  %114 = phi i8 [ %1084, %108 ], [ 0, %107 ]
  %115 = add nsw i32 %113, -1
  %116 = load ptr, ptr @cfun, align 8, !tbaa !5
  %117 = getelementptr inbounds %struct.function, ptr %116, i64 0, i32 1
  %118 = load ptr, ptr %117, align 8, !tbaa !65
  %119 = getelementptr inbounds %struct.control_flow_graph, ptr %118, i64 0, i32 2
  %120 = load ptr, ptr %119, align 8, !tbaa !72
  %121 = zext i32 %115 to i64
  %122 = getelementptr inbounds i32, ptr %31, i64 %121
  %123 = load i32, ptr %122, align 4, !tbaa !20
  %124 = zext i32 %123 to i64
  %125 = getelementptr inbounds %struct.VEC_basic_block_base, ptr %120, i64 0, i32 2, i64 %124
  %126 = load ptr, ptr %125, align 8, !tbaa !5
  %127 = load ptr, ptr @live, align 8, !tbaa !5
  %128 = sext i32 %123 to i64
  %129 = getelementptr inbounds ptr, ptr %127, i64 %128
  %130 = load ptr, ptr %129, align 8, !tbaa !5
  %131 = icmp eq ptr %130, null
  br i1 %131, label %132, label %152

132:                                              ; preds = %111
  %133 = getelementptr inbounds %struct.function, ptr %116, i64 0, i32 3
  %134 = load ptr, ptr %133, align 8, !tbaa !40
  %135 = getelementptr inbounds %struct.gimple_df, ptr %134, i64 0, i32 2
  %136 = load ptr, ptr %135, align 8, !tbaa !41
  %137 = icmp eq ptr %136, null
  br i1 %137, label %140, label %138

138:                                              ; preds = %132
  %139 = load i32, ptr %136, align 8, !tbaa !46
  br label %140

140:                                              ; preds = %138, %132
  %141 = phi i32 [ %139, %138 ], [ 0, %132 ]
  %142 = call ptr @sbitmap_alloc(i32 noundef %141) #18
  %143 = load ptr, ptr @live, align 8, !tbaa !5
  %144 = load i32, ptr %122, align 4, !tbaa !20
  %145 = sext i32 %144 to i64
  %146 = getelementptr inbounds ptr, ptr %143, i64 %145
  store ptr %142, ptr %146, align 8, !tbaa !5
  call void @sbitmap_zero(ptr noundef %142) #18
  %147 = load ptr, ptr @live, align 8, !tbaa !5
  %148 = load i32, ptr %122, align 4, !tbaa !20
  %149 = sext i32 %148 to i64
  %150 = getelementptr inbounds ptr, ptr %147, i64 %149
  %151 = load ptr, ptr %150, align 8, !tbaa !5
  br label %152

152:                                              ; preds = %140, %111
  %153 = phi ptr [ %151, %140 ], [ %130, %111 ]
  %154 = call ptr @last_stmt(ptr noundef %126) #18
  %155 = icmp eq ptr %154, null
  br i1 %155, label %533, label %156

156:                                              ; preds = %152
  %157 = load i32, ptr %154, align 8
  %158 = and i32 %157, 255
  %159 = icmp eq i32 %158, 1
  br i1 %159, label %160, label %373

160:                                              ; preds = %156
  %161 = load i32, ptr getelementptr inbounds ([0 x i32], ptr @gss_for_code_, i64 0, i64 1), align 4, !tbaa !16
  %162 = zext i32 %161 to i64
  %163 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %162
  %164 = load i64, ptr %163, align 8, !tbaa !36
  %165 = icmp eq i64 %164, 0
  br i1 %165, label %166, label %168

166:                                              ; preds = %160
  call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1622, ptr noundef nonnull @.str.28) #18
  %167 = load i32, ptr %154, align 8
  br label %168

168:                                              ; preds = %166, %160
  %169 = phi i32 [ %167, %166 ], [ %157, %160 ]
  %170 = getelementptr inbounds i8, ptr %154, i64 %164
  %171 = load ptr, ptr %170, align 8, !tbaa !5
  %172 = getelementptr inbounds %struct.tree_common, ptr %171, i64 0, i32 2
  %173 = load ptr, ptr %172, align 8, !tbaa !16
  %174 = load i64, ptr %173, align 8
  %175 = and i64 %174, 65535
  %176 = icmp eq i64 %175, 9
  br i1 %176, label %373, label %177

177:                                              ; preds = %168
  %178 = and i32 %169, 255
  %179 = add nsw i32 %178, -1
  %180 = icmp ult i32 %179, 9
  call void @llvm.assume(i1 %180)
  %181 = zext i32 %178 to i64
  %182 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %181
  %183 = load i32, ptr %182, align 4, !tbaa !16
  %184 = zext i32 %183 to i64
  %185 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %184
  %186 = load i64, ptr %185, align 8, !tbaa !36
  %187 = icmp eq i64 %186, 0
  br i1 %187, label %188, label %190

188:                                              ; preds = %177
  call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1622, ptr noundef nonnull @.str.28) #18
  %189 = load i32, ptr %154, align 8
  br label %190

190:                                              ; preds = %188, %177
  %191 = phi i32 [ %189, %188 ], [ %169, %177 ]
  %192 = getelementptr inbounds i8, ptr %154, i64 %186
  %193 = load ptr, ptr %192, align 8, !tbaa !5
  %194 = getelementptr inbounds %struct.tree_common, ptr %193, i64 0, i32 2
  %195 = load ptr, ptr %194, align 8, !tbaa !16
  %196 = load i64, ptr %195, align 8
  %197 = and i64 %196, 65535
  %198 = icmp eq i64 %197, 13
  br i1 %198, label %221, label %199

199:                                              ; preds = %190
  %200 = and i32 %191, 255
  %201 = add nsw i32 %200, -1
  %202 = icmp ult i32 %201, 9
  call void @llvm.assume(i1 %202)
  %203 = zext i32 %200 to i64
  %204 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %203
  %205 = load i32, ptr %204, align 4, !tbaa !16
  %206 = zext i32 %205 to i64
  %207 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %206
  %208 = load i64, ptr %207, align 8, !tbaa !36
  %209 = icmp eq i64 %208, 0
  br i1 %209, label %210, label %212

210:                                              ; preds = %199
  call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1622, ptr noundef nonnull @.str.28) #18
  %211 = load i32, ptr %154, align 8
  br label %212

212:                                              ; preds = %210, %199
  %213 = phi i32 [ %211, %210 ], [ %191, %199 ]
  %214 = getelementptr inbounds i8, ptr %154, i64 %208
  %215 = load ptr, ptr %214, align 8, !tbaa !5
  %216 = getelementptr inbounds %struct.tree_common, ptr %215, i64 0, i32 2
  %217 = load ptr, ptr %216, align 8, !tbaa !16
  %218 = load i64, ptr %217, align 8
  %219 = and i64 %218, 65535
  %220 = icmp eq i64 %219, 14
  br i1 %220, label %221, label %246

221:                                              ; preds = %212, %190
  %222 = phi i32 [ %191, %190 ], [ %213, %212 ]
  %223 = and i32 %222, 255
  %224 = add nsw i32 %223, -1
  %225 = icmp ult i32 %224, 9
  call void @llvm.assume(i1 %225)
  %226 = zext i32 %223 to i64
  %227 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %226
  %228 = load i32, ptr %227, align 4, !tbaa !16
  %229 = zext i32 %228 to i64
  %230 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %229
  %231 = load i64, ptr %230, align 8, !tbaa !36
  %232 = icmp eq i64 %231, 0
  br i1 %232, label %233, label %235

233:                                              ; preds = %221
  call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1622, ptr noundef nonnull @.str.28) #18
  %234 = load i32, ptr %154, align 8
  br label %235

235:                                              ; preds = %233, %221
  %236 = phi i32 [ %222, %221 ], [ %234, %233 ]
  %237 = getelementptr inbounds i8, ptr %154, i64 %231
  %238 = load ptr, ptr %237, align 8, !tbaa !5
  %239 = getelementptr inbounds %struct.tree_common, ptr %238, i64 0, i32 2
  %240 = load ptr, ptr %239, align 8, !tbaa !16
  %241 = getelementptr inbounds %struct.tree_common, ptr %240, i64 0, i32 2
  %242 = load ptr, ptr %241, align 8, !tbaa !16
  %243 = load i64, ptr %242, align 8
  %244 = and i64 %243, 65535
  %245 = icmp eq i64 %244, 9
  br i1 %245, label %373, label %246

246:                                              ; preds = %235, %212
  %247 = phi i32 [ %213, %212 ], [ %236, %235 ]
  %248 = and i32 %247, 255
  %249 = add nsw i32 %248, -10
  %250 = icmp ult i32 %249, -9
  br i1 %250, label %373, label %251

251:                                              ; preds = %246
  %252 = getelementptr inbounds %struct.gimple_statement_with_ops_base, ptr %154, i64 0, i32 2
  %253 = load ptr, ptr %252, align 8, !tbaa !16
  %254 = icmp eq ptr %253, null
  br i1 %254, label %373, label %255

255:                                              ; preds = %251
  %256 = and i32 %247, 254
  %257 = add nsw i32 %256, -10
  %258 = icmp ult i32 %257, -4
  br i1 %258, label %266, label %259

259:                                              ; preds = %255
  %260 = getelementptr inbounds %struct.gimple_statement_with_memory_ops_base, ptr %154, i64 0, i32 2
  %261 = load ptr, ptr %260, align 8, !tbaa !16
  %262 = icmp eq ptr %261, null
  br i1 %262, label %266, label %263

263:                                              ; preds = %259
  %264 = load ptr, ptr %253, align 8, !tbaa !73
  %265 = icmp eq ptr %264, null
  br i1 %265, label %373, label %266

266:                                              ; preds = %263, %259, %255
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %9) #18
  call void @gsi_for_stmt(ptr nonnull sret(%struct.gimple_stmt_iterator) align 8 %9, ptr noundef nonnull %154) #18
  %267 = getelementptr inbounds %struct.basic_block_def, ptr %126, i64 0, i32 1
  %268 = getelementptr inbounds %struct.gimple_statement_with_memory_ops_base, ptr %154, i64 0, i32 2
  %269 = getelementptr ptr, ptr %154, i64 1
  br label %270

270:                                              ; preds = %368, %266
  %271 = phi i32 [ 0, %266 ], [ %370, %368 ]
  %272 = phi i8 [ 0, %266 ], [ %369, %368 ]
  %273 = load ptr, ptr %267, align 8, !tbaa !5
  %274 = icmp eq ptr %273, null
  br i1 %274, label %277, label %275

275:                                              ; preds = %270
  %276 = load i32, ptr %273, align 8, !tbaa !76
  br label %277

277:                                              ; preds = %275, %270
  %278 = phi i32 [ %276, %275 ], [ 0, %270 ]
  %279 = icmp eq i32 %278, %271
  br i1 %279, label %371, label %280

280:                                              ; preds = %277
  %281 = zext i32 %271 to i64
  %282 = getelementptr inbounds %struct.VEC_edge_base, ptr %273, i64 0, i32 2, i64 %281
  %283 = load ptr, ptr %282, align 8, !tbaa !5
  %284 = getelementptr inbounds %struct.edge_def, ptr %283, i64 0, i32 1
  %285 = load ptr, ptr %284, align 8, !tbaa !60
  %286 = icmp eq ptr %285, %126
  br i1 %286, label %361, label %287

287:                                              ; preds = %280
  %288 = load i32, ptr %154, align 8
  %289 = and i32 %288, 255
  %290 = add nsw i32 %289, -10
  %291 = icmp ult i32 %290, -9
  br i1 %291, label %361, label %292

292:                                              ; preds = %287
  %293 = load ptr, ptr %252, align 8, !tbaa !16
  %294 = icmp eq ptr %293, null
  br i1 %294, label %361, label %295

295:                                              ; preds = %292
  %296 = and i32 %288, 254
  %297 = add nsw i32 %296, -10
  %298 = icmp ult i32 %297, -4
  br i1 %298, label %305, label %299

299:                                              ; preds = %295
  %300 = load ptr, ptr %268, align 8, !tbaa !16
  %301 = icmp eq ptr %300, null
  br i1 %301, label %305, label %302

302:                                              ; preds = %299
  %303 = load ptr, ptr %293, align 8, !tbaa !73
  %304 = icmp eq ptr %303, null
  br i1 %304, label %361, label %305

305:                                              ; preds = %302, %299, %295
  %306 = phi ptr [ %293, %295 ], [ %293, %299 ], [ %303, %302 ]
  br label %307

307:                                              ; preds = %305, %353
  %308 = phi ptr [ %313, %353 ], [ %306, %305 ]
  %309 = phi i8 [ %356, %353 ], [ %272, %305 ]
  %310 = getelementptr %struct.use_optype_d, ptr %308, i64 0, i32 1, i32 3
  %311 = load ptr, ptr %310, align 8, !tbaa !78
  %312 = load ptr, ptr %311, align 8, !tbaa !5
  %313 = load ptr, ptr %308, align 8, !tbaa !73
  %314 = load i32, ptr %154, align 8
  %315 = lshr i32 %314, 16
  %316 = and i32 %314, 255
  %317 = add nsw i32 %316, -10
  %318 = icmp ult i32 %317, -9
  br i1 %318, label %336, label %319

319:                                              ; preds = %307
  %320 = zext i32 %316 to i64
  %321 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %320
  %322 = load i32, ptr %321, align 4, !tbaa !16
  %323 = zext i32 %322 to i64
  %324 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %323
  %325 = load i64, ptr %324, align 8, !tbaa !36
  %326 = icmp eq i64 %325, 0
  br i1 %326, label %327, label %331

327:                                              ; preds = %319
  call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1622, ptr noundef nonnull @.str.28) #18
  %328 = load i32, ptr %154, align 8
  %329 = and i32 %328, 255
  %330 = add nsw i32 %329, -10
  br label %331

331:                                              ; preds = %327, %319
  %332 = phi i32 [ %330, %327 ], [ %317, %319 ]
  %333 = phi i32 [ %329, %327 ], [ %316, %319 ]
  %334 = getelementptr inbounds i8, ptr %154, i64 %325
  %335 = load ptr, ptr %334, align 8, !tbaa !5
  br label %336

336:                                              ; preds = %331, %307
  %337 = phi i32 [ %317, %307 ], [ %332, %331 ]
  %338 = phi i32 [ %316, %307 ], [ %333, %331 ]
  %339 = phi ptr [ null, %307 ], [ %335, %331 ]
  %340 = icmp ult i32 %337, -9
  br i1 %340, label %353, label %341

341:                                              ; preds = %336
  %342 = zext i32 %338 to i64
  %343 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %342
  %344 = load i32, ptr %343, align 4, !tbaa !16
  %345 = zext i32 %344 to i64
  %346 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %345
  %347 = load i64, ptr %346, align 8, !tbaa !36
  %348 = icmp eq i64 %347, 0
  br i1 %348, label %349, label %350

349:                                              ; preds = %341
  call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1622, ptr noundef nonnull @.str.28) #18
  br label %350

350:                                              ; preds = %349, %341
  %351 = getelementptr i8, ptr %269, i64 %347
  %352 = load ptr, ptr %351, align 8, !tbaa !5
  br label %353

353:                                              ; preds = %350, %336
  %354 = phi ptr [ %352, %350 ], [ null, %336 ]
  %355 = call fastcc zeroext i8 @register_edge_assert_for(ptr noundef %312, ptr noundef %283, ptr noundef nonnull byval(%struct.gimple_stmt_iterator) align 8 %9, i32 noundef %315, ptr noundef %339, ptr noundef %354), !range !79
  %356 = or i8 %355, %309
  %357 = icmp eq ptr %313, null
  br i1 %357, label %358, label %307, !llvm.loop !80

358:                                              ; preds = %353
  %359 = load ptr, ptr %267, align 8, !tbaa !5
  %360 = icmp eq ptr %359, null
  br i1 %360, label %366, label %361

361:                                              ; preds = %358, %302, %292, %287, %280
  %362 = phi i8 [ %356, %358 ], [ %272, %280 ], [ %272, %302 ], [ %272, %287 ], [ %272, %292 ]
  %363 = phi ptr [ %359, %358 ], [ %273, %280 ], [ %273, %302 ], [ %273, %287 ], [ %273, %292 ]
  %364 = load i32, ptr %363, align 8, !tbaa !76
  %365 = icmp ult i32 %271, %364
  br i1 %365, label %368, label %366

366:                                              ; preds = %361, %358
  %367 = phi i8 [ %362, %361 ], [ %356, %358 ]
  call void @fancy_abort(ptr noundef nonnull @.str.35, i32 noundef 738, ptr noundef nonnull @.str.28) #18
  br label %368

368:                                              ; preds = %366, %361
  %369 = phi i8 [ %362, %361 ], [ %367, %366 ]
  %370 = add i32 %271, 1
  br label %270, !llvm.loop !81

371:                                              ; preds = %277
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %9) #18
  %372 = load i32, ptr %154, align 8
  br label %373

373:                                              ; preds = %371, %263, %251, %246, %235, %168, %156
  %374 = phi i32 [ %372, %371 ], [ %236, %235 ], [ %157, %156 ], [ %169, %168 ], [ %247, %263 ], [ %247, %246 ], [ %247, %251 ]
  %375 = phi i8 [ %272, %371 ], [ 0, %235 ], [ 0, %156 ], [ 0, %168 ], [ 0, %263 ], [ 0, %246 ], [ 0, %251 ]
  %376 = and i32 %374, 255
  %377 = icmp eq i32 %376, 5
  br i1 %377, label %378, label %533

378:                                              ; preds = %373
  %379 = getelementptr inbounds %struct.gimple_statement_with_ops_base, ptr %154, i64 0, i32 2
  %380 = load ptr, ptr %379, align 8, !tbaa !16
  %381 = icmp eq ptr %380, null
  br i1 %381, label %533, label %382

382:                                              ; preds = %378
  %383 = and i32 %374, 254
  %384 = add nsw i32 %383, -10
  %385 = icmp ult i32 %384, -4
  br i1 %385, label %393, label %386

386:                                              ; preds = %382
  %387 = getelementptr inbounds %struct.gimple_statement_with_memory_ops_base, ptr %154, i64 0, i32 2
  %388 = load ptr, ptr %387, align 8, !tbaa !16
  %389 = icmp eq ptr %388, null
  br i1 %389, label %393, label %390

390:                                              ; preds = %386
  %391 = load ptr, ptr %380, align 8, !tbaa !73
  %392 = icmp eq ptr %391, null
  br i1 %392, label %533, label %393

393:                                              ; preds = %390, %386, %382
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %8) #18
  %394 = getelementptr i8, ptr %154, i64 12
  %395 = load i32, ptr %394, align 4, !tbaa !16
  %396 = icmp ugt i32 %395, 1
  br i1 %396, label %398, label %397

397:                                              ; preds = %393
  call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 3162, ptr noundef nonnull @.str.28) #18
  br label %398

398:                                              ; preds = %397, %393
  %399 = add i32 %395, -1
  %400 = zext i32 %399 to i64
  call void @gsi_for_stmt(ptr nonnull sret(%struct.gimple_stmt_iterator) align 8 %8, ptr noundef nonnull %154) #18
  %401 = load i32, ptr %154, align 8
  %402 = and i32 %401, 255
  %403 = add nsw i32 %402, -10
  %404 = icmp ult i32 %403, -9
  br i1 %404, label %417, label %405

405:                                              ; preds = %398
  %406 = zext i32 %402 to i64
  %407 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %406
  %408 = load i32, ptr %407, align 4, !tbaa !16
  %409 = zext i32 %408 to i64
  %410 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %409
  %411 = load i64, ptr %410, align 8, !tbaa !36
  %412 = icmp eq i64 %411, 0
  br i1 %412, label %413, label %414

413:                                              ; preds = %405
  call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1622, ptr noundef nonnull @.str.28) #18
  br label %414

414:                                              ; preds = %413, %405
  %415 = getelementptr inbounds i8, ptr %154, i64 %411
  %416 = load ptr, ptr %415, align 8, !tbaa !5
  br label %417

417:                                              ; preds = %414, %398
  %418 = phi ptr [ %416, %414 ], [ null, %398 ]
  %419 = load i64, ptr %418, align 8
  %420 = and i64 %419, 65535
  %421 = icmp eq i64 %420, 141
  br i1 %421, label %422, label %530

422:                                              ; preds = %417
  %423 = call ptr @make_tree_vec_stat(i32 noundef %399) #18
  %424 = icmp eq i32 %399, 0
  br i1 %424, label %425, label %427

425:                                              ; preds = %422
  %426 = getelementptr inbounds %struct.tree_vec, ptr %423, i64 0, i32 2
  call void @spec_qsort(ptr noundef nonnull %426, i64 noundef %400, i64 noundef 8, ptr noundef nonnull @compare_case_labels) #18
  br label %530

427:                                              ; preds = %422, %452
  %428 = phi i64 [ %430, %452 ], [ 0, %422 ]
  %429 = load i32, ptr %394, align 4, !tbaa !16
  %430 = add nuw nsw i64 %428, 1
  %431 = zext i32 %429 to i64
  %432 = icmp ult i64 %430, %431
  br i1 %432, label %434, label %433

433:                                              ; preds = %427
  call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 3215, ptr noundef nonnull @.str.28) #18
  br label %434

434:                                              ; preds = %433, %427
  %435 = load i32, ptr %154, align 8
  %436 = and i32 %435, 255
  %437 = add nsw i32 %436, -10
  %438 = icmp ult i32 %437, -9
  br i1 %438, label %452, label %439

439:                                              ; preds = %434
  %440 = zext i32 %436 to i64
  %441 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %440
  %442 = load i32, ptr %441, align 4, !tbaa !16
  %443 = zext i32 %442 to i64
  %444 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %443
  %445 = load i64, ptr %444, align 8, !tbaa !36
  %446 = icmp eq i64 %445, 0
  br i1 %446, label %447, label %448

447:                                              ; preds = %439
  call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1622, ptr noundef nonnull @.str.28) #18
  br label %448

448:                                              ; preds = %447, %439
  %449 = getelementptr inbounds i8, ptr %154, i64 %445
  %450 = getelementptr inbounds ptr, ptr %449, i64 %430
  %451 = load ptr, ptr %450, align 8, !tbaa !5
  br label %452

452:                                              ; preds = %448, %434
  %453 = phi ptr [ %451, %448 ], [ null, %434 ]
  %454 = getelementptr inbounds %struct.tree_vec, ptr %423, i64 0, i32 2, i64 %428
  store ptr %453, ptr %454, align 8, !tbaa !16
  %455 = icmp eq i64 %430, %400
  br i1 %455, label %456, label %427, !llvm.loop !82

456:                                              ; preds = %452
  %457 = getelementptr inbounds %struct.tree_vec, ptr %423, i64 0, i32 2
  call void @spec_qsort(ptr noundef nonnull %457, i64 noundef %400, i64 noundef 8, ptr noundef nonnull @compare_case_labels) #18
  %458 = getelementptr inbounds %struct.tree_common, ptr %418, i64 0, i32 2
  %459 = add i32 %395, -2
  %460 = add nsw i64 %400, -1
  br label %461

461:                                              ; preds = %526, %456
  %462 = phi i8 [ 0, %456 ], [ %527, %526 ]
  %463 = phi i32 [ 0, %456 ], [ %528, %526 ]
  %464 = zext i32 %463 to i64
  %465 = getelementptr inbounds %struct.tree_vec, ptr %423, i64 0, i32 2, i64 %464
  %466 = load ptr, ptr %465, align 8, !tbaa !16
  %467 = getelementptr inbounds %struct.tree_exp, ptr %466, i64 0, i32 3
  %468 = load ptr, ptr %467, align 8, !tbaa !16
  %469 = getelementptr inbounds %struct.tree_exp, ptr %466, i64 1
  %470 = load ptr, ptr %469, align 8, !tbaa !16
  %471 = add nuw i32 %463, 1
  %472 = icmp ult i32 %471, %399
  br i1 %472, label %473, label %505

473:                                              ; preds = %461
  %474 = zext i32 %471 to i64
  %475 = getelementptr inbounds %struct.tree_exp, ptr %466, i64 1, i32 0, i32 1
  %476 = load ptr, ptr %475, align 8, !tbaa !16
  %477 = getelementptr inbounds %struct.tree_vec, ptr %423, i64 0, i32 2, i64 %474
  %478 = load ptr, ptr %477, align 8, !tbaa !16
  %479 = getelementptr inbounds %struct.tree_exp, ptr %478, i64 1, i32 0, i32 1
  %480 = load ptr, ptr %479, align 8, !tbaa !16
  %481 = icmp eq ptr %476, %480
  br i1 %481, label %482, label %505

482:                                              ; preds = %473, %485
  %483 = phi i64 [ %486, %485 ], [ %464, %473 ]
  %484 = icmp eq i64 %483, %460
  br i1 %484, label %494, label %485

485:                                              ; preds = %482
  %486 = add nuw nsw i64 %483, 1
  %487 = getelementptr inbounds %struct.tree_vec, ptr %423, i64 0, i32 2, i64 %486
  %488 = load ptr, ptr %487, align 8, !tbaa !16
  %489 = getelementptr inbounds %struct.tree_exp, ptr %488, i64 1, i32 0, i32 1
  %490 = load ptr, ptr %489, align 8, !tbaa !16
  %491 = icmp eq ptr %476, %490
  br i1 %491, label %482, label %492, !llvm.loop !83

492:                                              ; preds = %485
  %493 = trunc i64 %483 to i32
  br label %494

494:                                              ; preds = %482, %492
  %495 = phi i32 [ %493, %492 ], [ %459, %482 ]
  %496 = zext i32 %495 to i64
  %497 = getelementptr inbounds %struct.tree_vec, ptr %423, i64 0, i32 2, i64 %496
  %498 = load ptr, ptr %497, align 8, !tbaa !16
  %499 = getelementptr inbounds %struct.tree_exp, ptr %498, i64 1
  %500 = load ptr, ptr %499, align 8, !tbaa !16
  %501 = icmp eq ptr %500, null
  br i1 %501, label %502, label %505

502:                                              ; preds = %494
  %503 = getelementptr inbounds %struct.tree_exp, ptr %498, i64 0, i32 3
  %504 = load ptr, ptr %503, align 8, !tbaa !16
  br label %505

505:                                              ; preds = %502, %494, %473, %461
  %506 = phi i32 [ %495, %502 ], [ %463, %473 ], [ %463, %461 ], [ %495, %494 ]
  %507 = phi ptr [ %504, %502 ], [ %470, %473 ], [ %470, %461 ], [ %500, %494 ]
  %508 = icmp eq ptr %468, null
  br i1 %508, label %526, label %509

509:                                              ; preds = %505
  %510 = load ptr, ptr @cfun, align 8, !tbaa !5
  %511 = getelementptr inbounds %struct.tree_exp, ptr %466, i64 1, i32 0, i32 1
  %512 = load ptr, ptr %511, align 8, !tbaa !16
  %513 = call ptr @label_to_block_fn(ptr noundef %510, ptr noundef %512) #18
  %514 = call ptr @find_edge(ptr noundef %126, ptr noundef %513) #18
  %515 = icmp eq ptr %507, null
  %516 = select i1 %515, i32 101, i32 100
  %517 = load ptr, ptr %458, align 8, !tbaa !16
  %518 = call ptr @fold_convert_loc(i32 noundef 0, ptr noundef %517, ptr noundef nonnull %468) #18
  %519 = call fastcc zeroext i8 @register_edge_assert_for(ptr noundef nonnull %418, ptr noundef %514, ptr noundef nonnull byval(%struct.gimple_stmt_iterator) align 8 %8, i32 noundef %516, ptr noundef nonnull %418, ptr noundef %518), !range !79
  %520 = or i8 %519, %462
  br i1 %515, label %526, label %521

521:                                              ; preds = %509
  %522 = load ptr, ptr %458, align 8, !tbaa !16
  %523 = call ptr @fold_convert_loc(i32 noundef 0, ptr noundef %522, ptr noundef nonnull %507) #18
  %524 = call fastcc zeroext i8 @register_edge_assert_for(ptr noundef nonnull %418, ptr noundef %514, ptr noundef nonnull byval(%struct.gimple_stmt_iterator) align 8 %8, i32 noundef 98, ptr noundef nonnull %418, ptr noundef %523), !range !79
  %525 = or i8 %524, %520
  br label %526

526:                                              ; preds = %521, %509, %505
  %527 = phi i8 [ %462, %505 ], [ %525, %521 ], [ %520, %509 ]
  %528 = add nuw i32 %506, 1
  %529 = icmp ult i32 %528, %399
  br i1 %529, label %461, label %530, !llvm.loop !84

530:                                              ; preds = %526, %425, %417
  %531 = phi i8 [ 0, %417 ], [ 0, %425 ], [ %527, %526 ]
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %8) #18
  %532 = or i8 %531, %375
  br label %533

533:                                              ; preds = %530, %390, %378, %373, %152
  %534 = phi i8 [ %532, %530 ], [ %375, %373 ], [ 0, %152 ], [ %375, %390 ], [ %375, %378 ]
  %535 = getelementptr inbounds %struct.basic_block_def, ptr %126, i64 0, i32 13
  %536 = load i32, ptr %535, align 8, !tbaa !85, !noalias !86
  %537 = and i32 %536, 512
  %538 = icmp eq i32 %537, 0
  br i1 %538, label %539, label %1012

539:                                              ; preds = %533
  %540 = getelementptr inbounds %struct.basic_block_def, ptr %126, i64 0, i32 7
  %541 = load ptr, ptr %540, align 8, !tbaa !16, !noalias !86
  %542 = icmp eq ptr %541, null
  br i1 %542, label %1012, label %543

543:                                              ; preds = %539
  %544 = load ptr, ptr %541, align 8, !tbaa !89, !noalias !86
  %545 = icmp eq ptr %544, null
  br i1 %545, label %1012, label %546

546:                                              ; preds = %543
  %547 = load ptr, ptr %544, align 8, !tbaa !91, !noalias !86
  %548 = icmp eq ptr %547, null
  br i1 %548, label %1012, label %549

549:                                              ; preds = %546, %1007
  %550 = phi i8 [ %1008, %1007 ], [ %534, %546 ]
  %551 = phi ptr [ %1010, %1007 ], [ %547, %546 ]
  %552 = load ptr, ptr %551, align 8, !tbaa !51
  %553 = load i32, ptr %552, align 8
  %554 = and i32 %553, 255
  %555 = icmp eq i32 %554, 2
  %556 = add nsw i32 %554, -10
  %557 = icmp ult i32 %556, -9
  %558 = select i1 %555, i1 true, i1 %557
  br i1 %558, label %1007, label %559

559:                                              ; preds = %549
  %560 = getelementptr inbounds %struct.gimple_statement_with_ops_base, ptr %552, i64 0, i32 2
  %561 = load ptr, ptr %560, align 8, !tbaa !16
  %562 = icmp eq ptr %561, null
  br i1 %562, label %1007, label %563

563:                                              ; preds = %559
  %564 = and i32 %553, 254
  %565 = add nsw i32 %564, -10
  %566 = icmp ult i32 %565, -4
  br i1 %566, label %574, label %567

567:                                              ; preds = %563
  %568 = getelementptr inbounds %struct.gimple_statement_with_memory_ops_base, ptr %552, i64 0, i32 2
  %569 = load ptr, ptr %568, align 8, !tbaa !16
  %570 = icmp eq ptr %569, null
  br i1 %570, label %574, label %571

571:                                              ; preds = %567
  %572 = load ptr, ptr %561, align 8, !tbaa !73
  %573 = icmp eq ptr %572, null
  br i1 %573, label %1007, label %574

574:                                              ; preds = %571, %567, %563
  %575 = phi ptr [ %572, %571 ], [ %561, %567 ], [ %561, %563 ]
  %576 = getelementptr i8, ptr %552, i64 16
  br label %577

577:                                              ; preds = %1004, %574
  %578 = phi i8 [ %550, %574 ], [ %1005, %1004 ]
  %579 = phi ptr [ %575, %574 ], [ %580, %1004 ]
  %580 = load ptr, ptr %579, align 8, !tbaa !73
  %581 = getelementptr %struct.use_optype_d, ptr %579, i64 0, i32 1, i32 3
  %582 = load ptr, ptr %581, align 8, !tbaa !78
  %583 = load ptr, ptr %582, align 8, !tbaa !5
  %584 = getelementptr inbounds %struct.tree_ssa_name, ptr %583, i64 0, i32 3
  %585 = load i32, ptr %584, align 8, !tbaa !16
  %586 = load ptr, ptr %153, align 8, !tbaa !93
  %587 = icmp eq ptr %586, null
  br i1 %587, label %588, label %594

588:                                              ; preds = %577
  %589 = and i32 %585, 63
  %590 = zext i32 %589 to i64
  %591 = shl nuw i64 1, %590
  %592 = lshr i32 %585, 6
  %593 = zext i32 %592 to i64
  br label %608

594:                                              ; preds = %577
  %595 = lshr i32 %585, 6
  %596 = zext i32 %595 to i64
  %597 = getelementptr inbounds %struct.simple_bitmap_def, ptr %153, i64 0, i32 3, i64 %596
  %598 = load i64, ptr %597, align 8, !tbaa !36
  %599 = and i32 %585, 63
  %600 = zext i32 %599 to i64
  %601 = shl nuw i64 1, %600
  %602 = and i64 %598, %601
  %603 = icmp eq i64 %602, 0
  br i1 %603, label %604, label %608

604:                                              ; preds = %594
  %605 = getelementptr inbounds i8, ptr %586, i64 %596
  %606 = load i8, ptr %605, align 1, !tbaa !16
  %607 = add i8 %606, 1
  store i8 %607, ptr %605, align 1, !tbaa !16
  br label %608

608:                                              ; preds = %604, %594, %588
  %609 = phi i64 [ %593, %588 ], [ %596, %594 ], [ %596, %604 ]
  %610 = phi i64 [ %591, %588 ], [ %601, %594 ], [ %601, %604 ]
  %611 = getelementptr inbounds %struct.simple_bitmap_def, ptr %153, i64 0, i32 3, i64 %609
  %612 = load i64, ptr %611, align 8, !tbaa !36
  %613 = or i64 %612, %610
  store i64 %613, ptr %611, align 8, !tbaa !36
  %614 = load i64, ptr %583, align 8
  %615 = and i64 %614, 4194304
  %616 = icmp eq i64 %615, 0
  br i1 %616, label %617, label %1004

617:                                              ; preds = %608
  %618 = call zeroext i8 @stmt_could_throw_p(ptr noundef nonnull %552) #18
  %619 = icmp eq i8 %618, 0
  br i1 %619, label %620, label %1004

620:                                              ; preds = %617
  %621 = call zeroext i8 @stmt_ends_bb_p(ptr noundef nonnull %552) #18
  %622 = icmp eq i8 %621, 0
  br i1 %622, label %634, label %623

623:                                              ; preds = %620
  %624 = load ptr, ptr %576, align 8, !tbaa !16
  %625 = getelementptr inbounds %struct.basic_block_def, ptr %624, i64 0, i32 1
  %626 = load ptr, ptr %625, align 8, !tbaa !95
  %627 = icmp eq ptr %626, null
  br i1 %627, label %1004, label %628

628:                                              ; preds = %623
  %629 = load i32, ptr %626, align 8, !tbaa !76
  %630 = icmp eq i32 %629, 0
  %631 = load i32, ptr @flag_delete_null_pointer_checks, align 4
  %632 = icmp eq i32 %631, 0
  %633 = select i1 %630, i1 true, i1 %632
  br i1 %633, label %1004, label %637

634:                                              ; preds = %620
  %635 = load i32, ptr @flag_delete_null_pointer_checks, align 4, !tbaa !20
  %636 = icmp eq i32 %635, 0
  br i1 %636, label %1004, label %637

637:                                              ; preds = %634, %628
  %638 = getelementptr inbounds %struct.tree_common, ptr %583, i64 0, i32 2
  %639 = load ptr, ptr %638, align 8, !tbaa !16
  %640 = load i64, ptr %639, align 8
  %641 = trunc i64 %640 to i16
  switch i16 %641, label %1004 [
    i16 10, label %642
    i16 12, label %642
  ]

642:                                              ; preds = %637, %637
  %643 = load i32, ptr %552, align 8
  %644 = and i32 %643, 255
  %645 = icmp eq i32 %644, 7
  br i1 %645, label %1004, label %646

646:                                              ; preds = %642
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %5) #18
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %6) #18
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %7) #18
  call void @count_uses_and_derefs(ptr noundef nonnull %583, ptr noundef nonnull %552, ptr noundef nonnull %5, ptr noundef nonnull %6, ptr noundef nonnull %7) #18
  %647 = load i32, ptr %6, align 4, !tbaa !20
  %648 = load i32, ptr %7, align 4, !tbaa !20
  %649 = sub i32 0, %648
  %650 = icmp eq i32 %647, %649
  br i1 %650, label %651, label %652

651:                                              ; preds = %646
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %7) #18
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %6) #18
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %5) #18
  br label %1004

652:                                              ; preds = %646
  %653 = load ptr, ptr %638, align 8, !tbaa !16
  %654 = call ptr @build_int_cst(ptr noundef %653, i64 noundef 0) #18
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %7) #18
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %6) #18
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %5) #18
  %655 = call i32 @integer_zerop(ptr noundef %654) #18
  %656 = icmp eq i32 %655, 0
  br i1 %656, label %899, label %657

657:                                              ; preds = %652
  %658 = getelementptr inbounds %struct.tree_ssa_name, ptr %583, i64 0, i32 2
  %659 = load ptr, ptr %658, align 8, !tbaa !16
  %660 = load i32, ptr %659, align 8
  %661 = and i32 %660, 255
  %662 = icmp eq i32 %661, 6
  br i1 %662, label %663, label %899

663:                                              ; preds = %657
  %664 = getelementptr inbounds %struct.tree_common, ptr %654, i64 0, i32 2
  %665 = getelementptr inbounds %struct.tree_int_cst, ptr %654, i64 0, i32 1
  %666 = getelementptr inbounds %struct.tree_int_cst, ptr %654, i64 0, i32 1, i32 1
  br label %667

667:                                              ; preds = %894, %663
  %668 = phi i32 [ %660, %663 ], [ %896, %894 ]
  %669 = phi i8 [ %578, %663 ], [ %895, %894 ]
  %670 = phi ptr [ %659, %663 ], [ %792, %894 ]
  %671 = trunc i32 %668 to i8
  switch i8 %671, label %674 [
    i8 6, label %672
    i8 1, label %672
    i8 8, label %675
  ]

672:                                              ; preds = %667, %667
  %673 = lshr i32 %668, 16
  br label %675

674:                                              ; preds = %667
  call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1446, ptr noundef nonnull @.str.28) #18
  br label %675

675:                                              ; preds = %674, %672, %667
  %676 = phi i32 [ %673, %672 ], [ 0, %674 ], [ 59, %667 ]
  %677 = zext i32 %676 to i64
  %678 = getelementptr inbounds [0 x i8], ptr @gimple_rhs_class_table, i64 0, i64 %677
  %679 = load i8, ptr %678, align 1, !tbaa !16
  %680 = icmp eq i8 %679, 3
  br i1 %680, label %681, label %701

681:                                              ; preds = %675
  %682 = load i32, ptr %670, align 8
  %683 = and i32 %682, 255
  %684 = add nsw i32 %683, -1
  %685 = icmp ult i32 %684, 9
  call void @llvm.assume(i1 %685)
  %686 = zext i32 %683 to i64
  %687 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %686
  %688 = load i32, ptr %687, align 4, !tbaa !16
  %689 = zext i32 %688 to i64
  %690 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %689
  %691 = load i64, ptr %690, align 8, !tbaa !36
  %692 = icmp eq i64 %691, 0
  br i1 %692, label %693, label %694

693:                                              ; preds = %681
  call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1622, ptr noundef nonnull @.str.28) #18
  br label %694

694:                                              ; preds = %693, %681
  %695 = getelementptr inbounds i8, ptr %670, i64 %691
  %696 = getelementptr inbounds ptr, ptr %695, i64 1
  %697 = load ptr, ptr %696, align 8, !tbaa !5
  %698 = load i64, ptr %697, align 8
  %699 = trunc i64 %698 to i32
  %700 = and i32 %699, 65535
  br label %701

701:                                              ; preds = %694, %675
  %702 = phi i32 [ %700, %694 ], [ %676, %675 ]
  %703 = icmp eq i32 %702, 116
  br i1 %703, label %704, label %899

704:                                              ; preds = %701
  %705 = load i32, ptr %670, align 8
  %706 = and i32 %705, 255
  %707 = add nsw i32 %706, -1
  %708 = icmp ult i32 %707, 9
  call void @llvm.assume(i1 %708)
  %709 = zext i32 %706 to i64
  %710 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %709
  %711 = load i32, ptr %710, align 4, !tbaa !16
  %712 = zext i32 %711 to i64
  %713 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %712
  %714 = load i64, ptr %713, align 8, !tbaa !36
  %715 = icmp eq i64 %714, 0
  br i1 %715, label %716, label %717

716:                                              ; preds = %704
  call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1622, ptr noundef nonnull @.str.28) #18
  br label %717

717:                                              ; preds = %716, %704
  %718 = getelementptr inbounds i8, ptr %670, i64 %714
  %719 = getelementptr inbounds ptr, ptr %718, i64 1
  %720 = load ptr, ptr %719, align 8, !tbaa !5
  %721 = load i64, ptr %720, align 8
  %722 = and i64 %721, 65535
  %723 = icmp eq i64 %722, 141
  br i1 %723, label %724, label %899

724:                                              ; preds = %717
  %725 = load i32, ptr %670, align 8
  %726 = and i32 %725, 255
  %727 = add nsw i32 %726, -1
  %728 = icmp ult i32 %727, 9
  call void @llvm.assume(i1 %728)
  %729 = zext i32 %726 to i64
  %730 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %729
  %731 = load i32, ptr %730, align 4, !tbaa !16
  %732 = zext i32 %731 to i64
  %733 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %732
  %734 = load i64, ptr %733, align 8, !tbaa !36
  %735 = icmp eq i64 %734, 0
  br i1 %735, label %736, label %738

736:                                              ; preds = %724
  call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1622, ptr noundef nonnull @.str.28) #18
  %737 = load i32, ptr %670, align 8
  br label %738

738:                                              ; preds = %736, %724
  %739 = phi i32 [ %737, %736 ], [ %725, %724 ]
  %740 = getelementptr inbounds i8, ptr %670, i64 %734
  %741 = getelementptr inbounds ptr, ptr %740, i64 1
  %742 = load ptr, ptr %741, align 8, !tbaa !5
  %743 = getelementptr inbounds %struct.tree_common, ptr %742, i64 0, i32 2
  %744 = load ptr, ptr %743, align 8, !tbaa !16
  %745 = load i64, ptr %744, align 8
  %746 = and i64 %745, 65535
  %747 = icmp eq i64 %746, 10
  br i1 %747, label %771, label %748

748:                                              ; preds = %738
  %749 = and i32 %739, 255
  %750 = add nsw i32 %749, -1
  %751 = icmp ult i32 %750, 9
  call void @llvm.assume(i1 %751)
  %752 = zext i32 %749 to i64
  %753 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %752
  %754 = load i32, ptr %753, align 4, !tbaa !16
  %755 = zext i32 %754 to i64
  %756 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %755
  %757 = load i64, ptr %756, align 8, !tbaa !36
  %758 = icmp eq i64 %757, 0
  br i1 %758, label %759, label %760

759:                                              ; preds = %748
  call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1622, ptr noundef nonnull @.str.28) #18
  br label %760

760:                                              ; preds = %759, %748
  %761 = getelementptr inbounds i8, ptr %670, i64 %757
  %762 = getelementptr inbounds ptr, ptr %761, i64 1
  %763 = load ptr, ptr %762, align 8, !tbaa !5
  %764 = getelementptr inbounds %struct.tree_common, ptr %763, i64 0, i32 2
  %765 = load ptr, ptr %764, align 8, !tbaa !16
  %766 = load i64, ptr %765, align 8
  %767 = and i64 %766, 65535
  %768 = icmp eq i64 %767, 12
  br i1 %768, label %769, label %899

769:                                              ; preds = %760
  %770 = load i32, ptr %670, align 8
  br label %771

771:                                              ; preds = %769, %738
  %772 = phi i32 [ %770, %769 ], [ %739, %738 ]
  %773 = and i32 %772, 255
  %774 = add nsw i32 %773, -10
  %775 = icmp ult i32 %774, -9
  br i1 %775, label %789, label %776

776:                                              ; preds = %771
  %777 = zext i32 %773 to i64
  %778 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %777
  %779 = load i32, ptr %778, align 4, !tbaa !16
  %780 = zext i32 %779 to i64
  %781 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %780
  %782 = load i64, ptr %781, align 8, !tbaa !36
  %783 = icmp eq i64 %782, 0
  br i1 %783, label %784, label %785

784:                                              ; preds = %776
  call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1622, ptr noundef nonnull @.str.28) #18
  br label %785

785:                                              ; preds = %784, %776
  %786 = getelementptr inbounds i8, ptr %670, i64 %782
  %787 = getelementptr inbounds ptr, ptr %786, i64 1
  %788 = load ptr, ptr %787, align 8, !tbaa !5
  br label %789

789:                                              ; preds = %785, %771
  %790 = phi ptr [ %788, %785 ], [ null, %771 ]
  %791 = getelementptr inbounds %struct.tree_ssa_name, ptr %790, i64 0, i32 2
  %792 = load ptr, ptr %791, align 8, !tbaa !16
  %793 = getelementptr inbounds %struct.tree_ssa_name, ptr %790, i64 0, i32 5
  %794 = getelementptr inbounds %struct.tree_ssa_name, ptr %790, i64 0, i32 5, i32 1
  %795 = load ptr, ptr %794, align 8, !tbaa !96
  %796 = icmp eq ptr %793, %795
  br i1 %796, label %816, label %797

797:                                              ; preds = %789
  %798 = getelementptr inbounds %struct.ssa_use_operand_d, ptr %795, i64 0, i32 1
  %799 = load ptr, ptr %798, align 8, !tbaa !96
  %800 = icmp eq ptr %793, %799
  br i1 %800, label %801, label %808

801:                                              ; preds = %797
  %802 = getelementptr inbounds %struct.ssa_use_operand_d, ptr %795, i64 0, i32 2
  %803 = load ptr, ptr %802, align 8, !tbaa !16
  %804 = load i32, ptr %803, align 8
  %805 = and i32 %804, 255
  %806 = icmp ne i32 %805, 2
  %807 = zext i1 %806 to i8
  br label %813

808:                                              ; preds = %797
  %809 = load i32, ptr @flag_var_tracking_assignments, align 4, !tbaa !20
  %810 = icmp eq i32 %809, 0
  br i1 %810, label %816, label %811

811:                                              ; preds = %808
  %812 = call zeroext i8 @single_imm_use_1(ptr noundef nonnull %793, ptr noundef null, ptr noundef null) #18
  br label %813

813:                                              ; preds = %811, %801
  %814 = phi i8 [ %807, %801 ], [ %812, %811 ]
  %815 = icmp eq i8 %814, 0
  br i1 %815, label %816, label %894

816:                                              ; preds = %813, %808, %789
  %817 = load i64, ptr %654, align 8
  %818 = and i64 %817, 134283263
  %819 = icmp eq i64 %818, 134217751
  br i1 %819, label %820, label %825

820:                                              ; preds = %816
  %821 = load ptr, ptr %664, align 8, !tbaa !16
  %822 = load i64, ptr %665, align 8, !tbaa !16
  %823 = load i64, ptr %666, align 8, !tbaa !16
  %824 = call ptr @build_int_cst_wide(ptr noundef %821, i64 noundef %822, i64 noundef %823) #18
  br label %825

825:                                              ; preds = %820, %816
  %826 = phi ptr [ %824, %820 ], [ %654, %816 ]
  %827 = load ptr, ptr @asserts_for, align 8, !tbaa !5
  %828 = getelementptr inbounds %struct.tree_ssa_name, ptr %790, i64 0, i32 3
  %829 = load i32, ptr %828, align 8, !tbaa !16
  %830 = zext i32 %829 to i64
  %831 = getelementptr inbounds ptr, ptr %827, i64 %830
  %832 = load ptr, ptr %831, align 8, !tbaa !5
  %833 = icmp eq ptr %832, null
  br i1 %833, label %870, label %834

834:                                              ; preds = %825, %861
  %835 = phi ptr [ %863, %861 ], [ %832, %825 ]
  %836 = getelementptr inbounds %struct.assert_locus_d, ptr %835, i64 0, i32 3
  %837 = load i32, ptr %836, align 8, !tbaa !61
  %838 = icmp eq i32 %837, 102
  br i1 %838, label %839, label %861

839:                                              ; preds = %834
  %840 = getelementptr inbounds %struct.assert_locus_d, ptr %835, i64 0, i32 4
  %841 = load ptr, ptr %840, align 8, !tbaa !62
  %842 = icmp eq ptr %841, %826
  br i1 %842, label %846, label %843

843:                                              ; preds = %839
  %844 = call i32 @operand_equal_p(ptr noundef %841, ptr noundef %826, i32 noundef 0) #18
  %845 = icmp eq i32 %844, 0
  br i1 %845, label %861, label %846

846:                                              ; preds = %843, %839
  %847 = getelementptr inbounds %struct.assert_locus_d, ptr %835, i64 0, i32 5
  %848 = load ptr, ptr %847, align 8, !tbaa !97
  %849 = icmp eq ptr %848, %790
  br i1 %849, label %853, label %850

850:                                              ; preds = %846
  %851 = call i32 @operand_equal_p(ptr noundef %848, ptr noundef %790, i32 noundef 0) #18
  %852 = icmp eq i32 %851, 0
  br i1 %852, label %861, label %853

853:                                              ; preds = %850, %846
  %854 = load ptr, ptr %835, align 8, !tbaa !53
  %855 = call zeroext i8 @dominated_by_p(i32 noundef 1, ptr noundef %126, ptr noundef %854) #18
  %856 = icmp eq i8 %855, 0
  br i1 %856, label %857, label %894

857:                                              ; preds = %853
  %858 = load ptr, ptr %835, align 8, !tbaa !53
  %859 = call zeroext i8 @dominated_by_p(i32 noundef 1, ptr noundef %858, ptr noundef %126) #18
  %860 = icmp eq i8 %859, 0
  br i1 %860, label %861, label %865

861:                                              ; preds = %857, %850, %843, %834
  %862 = getelementptr inbounds %struct.assert_locus_d, ptr %835, i64 0, i32 6
  %863 = load ptr, ptr %862, align 8, !tbaa !98
  %864 = icmp eq ptr %863, null
  br i1 %864, label %870, label %834, !llvm.loop !99

865:                                              ; preds = %857
  store ptr %126, ptr %835, align 8, !tbaa !53
  %866 = getelementptr inbounds %struct.assert_locus_d, ptr %835, i64 0, i32 1
  store ptr null, ptr %866, align 8, !tbaa !57
  %867 = getelementptr inbounds %struct.assert_locus_d, ptr %835, i64 0, i32 2
  store ptr %551, ptr %867, align 8, !tbaa.struct !100
  %868 = getelementptr inbounds %struct.assert_locus_d, ptr %835, i64 0, i32 2, i32 1
  store ptr %544, ptr %868, align 8, !tbaa.struct !101
  %869 = getelementptr inbounds %struct.assert_locus_d, ptr %835, i64 0, i32 2, i32 2
  store ptr %126, ptr %869, align 8, !tbaa.struct !102
  br label %894

870:                                              ; preds = %861, %825
  %871 = phi ptr [ null, %825 ], [ %835, %861 ]
  %872 = call ptr @xmalloc(i64 noundef 72) #18
  store ptr %126, ptr %872, align 8, !tbaa !53
  %873 = getelementptr inbounds %struct.assert_locus_d, ptr %872, i64 0, i32 1
  store ptr null, ptr %873, align 8, !tbaa !57
  %874 = getelementptr inbounds %struct.assert_locus_d, ptr %872, i64 0, i32 2
  store ptr %551, ptr %874, align 8, !tbaa.struct !100
  %875 = getelementptr inbounds %struct.assert_locus_d, ptr %872, i64 0, i32 2, i32 1
  store ptr %544, ptr %875, align 8, !tbaa.struct !101
  %876 = getelementptr inbounds %struct.assert_locus_d, ptr %872, i64 0, i32 2, i32 2
  store ptr %126, ptr %876, align 8, !tbaa.struct !102
  %877 = getelementptr inbounds %struct.assert_locus_d, ptr %872, i64 0, i32 3
  store i32 102, ptr %877, align 8, !tbaa !61
  %878 = getelementptr inbounds %struct.assert_locus_d, ptr %872, i64 0, i32 4
  store ptr %826, ptr %878, align 8, !tbaa !62
  %879 = getelementptr inbounds %struct.assert_locus_d, ptr %872, i64 0, i32 5
  store ptr %790, ptr %879, align 8, !tbaa !97
  %880 = getelementptr inbounds %struct.assert_locus_d, ptr %872, i64 0, i32 6
  store ptr null, ptr %880, align 8, !tbaa !98
  %881 = icmp eq ptr %871, null
  br i1 %881, label %884, label %882

882:                                              ; preds = %870
  %883 = getelementptr inbounds %struct.assert_locus_d, ptr %871, i64 0, i32 6
  br label %889

884:                                              ; preds = %870
  %885 = load ptr, ptr @asserts_for, align 8, !tbaa !5
  %886 = load i32, ptr %828, align 8, !tbaa !16
  %887 = zext i32 %886 to i64
  %888 = getelementptr inbounds ptr, ptr %885, i64 %887
  br label %889

889:                                              ; preds = %884, %882
  %890 = phi ptr [ %888, %884 ], [ %883, %882 ]
  store ptr %872, ptr %890, align 8, !tbaa !5
  %891 = load ptr, ptr @need_assert_for, align 8, !tbaa !5
  %892 = load i32, ptr %828, align 8, !tbaa !16
  %893 = call zeroext i8 @bitmap_set_bit(ptr noundef %891, i32 noundef %892) #18
  br label %894

894:                                              ; preds = %853, %889, %865, %813
  %895 = phi i8 [ %669, %813 ], [ 1, %865 ], [ 1, %889 ], [ 1, %853 ]
  %896 = load i32, ptr %792, align 8
  %897 = and i32 %896, 255
  %898 = icmp eq i32 %897, 6
  br i1 %898, label %667, label %899, !llvm.loop !103

899:                                              ; preds = %894, %760, %717, %701, %657, %652
  %900 = phi i8 [ %578, %652 ], [ %578, %657 ], [ %669, %760 ], [ %895, %894 ], [ %669, %701 ], [ %669, %717 ]
  %901 = getelementptr inbounds %struct.tree_ssa_name, ptr %583, i64 0, i32 5
  %902 = getelementptr inbounds %struct.tree_ssa_name, ptr %583, i64 0, i32 5, i32 1
  %903 = load ptr, ptr %902, align 8, !tbaa !96
  %904 = icmp eq ptr %901, %903
  br i1 %904, label %924, label %905

905:                                              ; preds = %899
  %906 = getelementptr inbounds %struct.ssa_use_operand_d, ptr %903, i64 0, i32 1
  %907 = load ptr, ptr %906, align 8, !tbaa !96
  %908 = icmp eq ptr %901, %907
  br i1 %908, label %909, label %916

909:                                              ; preds = %905
  %910 = getelementptr inbounds %struct.ssa_use_operand_d, ptr %903, i64 0, i32 2
  %911 = load ptr, ptr %910, align 8, !tbaa !16
  %912 = load i32, ptr %911, align 8
  %913 = and i32 %912, 255
  %914 = icmp ne i32 %913, 2
  %915 = zext i1 %914 to i8
  br label %921

916:                                              ; preds = %905
  %917 = load i32, ptr @flag_var_tracking_assignments, align 4, !tbaa !20
  %918 = icmp eq i32 %917, 0
  br i1 %918, label %924, label %919

919:                                              ; preds = %916
  %920 = call zeroext i8 @single_imm_use_1(ptr noundef nonnull %901, ptr noundef null, ptr noundef null) #18
  br label %921

921:                                              ; preds = %919, %909
  %922 = phi i8 [ %915, %909 ], [ %920, %919 ]
  %923 = icmp eq i8 %922, 0
  br i1 %923, label %924, label %1004

924:                                              ; preds = %921, %916, %899
  %925 = load i64, ptr %654, align 8
  %926 = and i64 %925, 134283263
  %927 = icmp eq i64 %926, 134217751
  br i1 %927, label %928, label %936

928:                                              ; preds = %924
  %929 = getelementptr inbounds %struct.tree_common, ptr %654, i64 0, i32 2
  %930 = load ptr, ptr %929, align 8, !tbaa !16
  %931 = getelementptr inbounds %struct.tree_int_cst, ptr %654, i64 0, i32 1
  %932 = load i64, ptr %931, align 8, !tbaa !16
  %933 = getelementptr inbounds %struct.tree_int_cst, ptr %654, i64 0, i32 1, i32 1
  %934 = load i64, ptr %933, align 8, !tbaa !16
  %935 = call ptr @build_int_cst_wide(ptr noundef %930, i64 noundef %932, i64 noundef %934) #18
  br label %936

936:                                              ; preds = %928, %924
  %937 = phi ptr [ %935, %928 ], [ %654, %924 ]
  %938 = load ptr, ptr @asserts_for, align 8, !tbaa !5
  %939 = load i32, ptr %584, align 8, !tbaa !16
  %940 = zext i32 %939 to i64
  %941 = getelementptr inbounds ptr, ptr %938, i64 %940
  %942 = load ptr, ptr %941, align 8, !tbaa !5
  %943 = icmp eq ptr %942, null
  br i1 %943, label %980, label %944

944:                                              ; preds = %936, %971
  %945 = phi ptr [ %973, %971 ], [ %942, %936 ]
  %946 = getelementptr inbounds %struct.assert_locus_d, ptr %945, i64 0, i32 3
  %947 = load i32, ptr %946, align 8, !tbaa !61
  %948 = icmp eq i32 %947, 102
  br i1 %948, label %949, label %971

949:                                              ; preds = %944
  %950 = getelementptr inbounds %struct.assert_locus_d, ptr %945, i64 0, i32 4
  %951 = load ptr, ptr %950, align 8, !tbaa !62
  %952 = icmp eq ptr %951, %937
  br i1 %952, label %956, label %953

953:                                              ; preds = %949
  %954 = call i32 @operand_equal_p(ptr noundef %951, ptr noundef %937, i32 noundef 0) #18
  %955 = icmp eq i32 %954, 0
  br i1 %955, label %971, label %956

956:                                              ; preds = %953, %949
  %957 = getelementptr inbounds %struct.assert_locus_d, ptr %945, i64 0, i32 5
  %958 = load ptr, ptr %957, align 8, !tbaa !97
  %959 = icmp eq ptr %958, %583
  br i1 %959, label %963, label %960

960:                                              ; preds = %956
  %961 = call i32 @operand_equal_p(ptr noundef %958, ptr noundef nonnull %583, i32 noundef 0) #18
  %962 = icmp eq i32 %961, 0
  br i1 %962, label %971, label %963

963:                                              ; preds = %960, %956
  %964 = load ptr, ptr %945, align 8, !tbaa !53
  %965 = call zeroext i8 @dominated_by_p(i32 noundef 1, ptr noundef %126, ptr noundef %964) #18
  %966 = icmp eq i8 %965, 0
  br i1 %966, label %967, label %1004

967:                                              ; preds = %963
  %968 = load ptr, ptr %945, align 8, !tbaa !53
  %969 = call zeroext i8 @dominated_by_p(i32 noundef 1, ptr noundef %968, ptr noundef %126) #18
  %970 = icmp eq i8 %969, 0
  br i1 %970, label %971, label %975

971:                                              ; preds = %967, %960, %953, %944
  %972 = getelementptr inbounds %struct.assert_locus_d, ptr %945, i64 0, i32 6
  %973 = load ptr, ptr %972, align 8, !tbaa !98
  %974 = icmp eq ptr %973, null
  br i1 %974, label %980, label %944, !llvm.loop !99

975:                                              ; preds = %967
  store ptr %126, ptr %945, align 8, !tbaa !53
  %976 = getelementptr inbounds %struct.assert_locus_d, ptr %945, i64 0, i32 1
  store ptr null, ptr %976, align 8, !tbaa !57
  %977 = getelementptr inbounds %struct.assert_locus_d, ptr %945, i64 0, i32 2
  store ptr %551, ptr %977, align 8, !tbaa.struct !100
  %978 = getelementptr inbounds %struct.assert_locus_d, ptr %945, i64 0, i32 2, i32 1
  store ptr %544, ptr %978, align 8, !tbaa.struct !101
  %979 = getelementptr inbounds %struct.assert_locus_d, ptr %945, i64 0, i32 2, i32 2
  store ptr %126, ptr %979, align 8, !tbaa.struct !102
  br label %1004

980:                                              ; preds = %971, %936
  %981 = phi ptr [ null, %936 ], [ %945, %971 ]
  %982 = call ptr @xmalloc(i64 noundef 72) #18
  store ptr %126, ptr %982, align 8, !tbaa !53
  %983 = getelementptr inbounds %struct.assert_locus_d, ptr %982, i64 0, i32 1
  store ptr null, ptr %983, align 8, !tbaa !57
  %984 = getelementptr inbounds %struct.assert_locus_d, ptr %982, i64 0, i32 2
  store ptr %551, ptr %984, align 8, !tbaa.struct !100
  %985 = getelementptr inbounds %struct.assert_locus_d, ptr %982, i64 0, i32 2, i32 1
  store ptr %544, ptr %985, align 8, !tbaa.struct !101
  %986 = getelementptr inbounds %struct.assert_locus_d, ptr %982, i64 0, i32 2, i32 2
  store ptr %126, ptr %986, align 8, !tbaa.struct !102
  %987 = getelementptr inbounds %struct.assert_locus_d, ptr %982, i64 0, i32 3
  store i32 102, ptr %987, align 8, !tbaa !61
  %988 = getelementptr inbounds %struct.assert_locus_d, ptr %982, i64 0, i32 4
  store ptr %937, ptr %988, align 8, !tbaa !62
  %989 = getelementptr inbounds %struct.assert_locus_d, ptr %982, i64 0, i32 5
  store ptr %583, ptr %989, align 8, !tbaa !97
  %990 = getelementptr inbounds %struct.assert_locus_d, ptr %982, i64 0, i32 6
  store ptr null, ptr %990, align 8, !tbaa !98
  %991 = icmp eq ptr %981, null
  br i1 %991, label %994, label %992

992:                                              ; preds = %980
  %993 = getelementptr inbounds %struct.assert_locus_d, ptr %981, i64 0, i32 6
  br label %999

994:                                              ; preds = %980
  %995 = load ptr, ptr @asserts_for, align 8, !tbaa !5
  %996 = load i32, ptr %584, align 8, !tbaa !16
  %997 = zext i32 %996 to i64
  %998 = getelementptr inbounds ptr, ptr %995, i64 %997
  br label %999

999:                                              ; preds = %994, %992
  %1000 = phi ptr [ %998, %994 ], [ %993, %992 ]
  store ptr %982, ptr %1000, align 8, !tbaa !5
  %1001 = load ptr, ptr @need_assert_for, align 8, !tbaa !5
  %1002 = load i32, ptr %584, align 8, !tbaa !16
  %1003 = call zeroext i8 @bitmap_set_bit(ptr noundef %1001, i32 noundef %1002) #18
  br label %1004

1004:                                             ; preds = %963, %999, %975, %921, %651, %642, %637, %634, %628, %623, %617, %608
  %1005 = phi i8 [ %900, %921 ], [ 1, %975 ], [ 1, %999 ], [ %578, %608 ], [ %578, %617 ], [ %578, %628 ], [ %578, %651 ], [ %578, %637 ], [ %578, %642 ], [ %578, %634 ], [ %578, %623 ], [ 1, %963 ]
  %1006 = icmp eq ptr %580, null
  br i1 %1006, label %1007, label %577, !llvm.loop !104

1007:                                             ; preds = %1004, %571, %559, %549
  %1008 = phi i8 [ %550, %549 ], [ %550, %571 ], [ %550, %559 ], [ %1005, %1004 ]
  %1009 = getelementptr inbounds %struct.gimple_seq_node_d, ptr %551, i64 0, i32 2
  %1010 = load ptr, ptr %1009, align 8, !tbaa !105
  %1011 = icmp eq ptr %1010, null
  br i1 %1011, label %1012, label %549, !llvm.loop !106

1012:                                             ; preds = %1007, %546, %543, %539, %533
  %1013 = phi i8 [ %534, %546 ], [ %534, %543 ], [ %534, %539 ], [ %534, %533 ], [ %1008, %1007 ]
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %10) #18
  call void @gsi_start_phis(ptr nonnull sret(%struct.gimple_stmt_iterator) align 8 %10, ptr noundef %126) #18
  %1014 = load ptr, ptr %10, align 8, !tbaa.struct !100
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %10) #18
  %1015 = icmp eq ptr %1014, null
  br i1 %1015, label %1083, label %1016

1016:                                             ; preds = %1012, %1079
  %1017 = phi ptr [ %1081, %1079 ], [ %1014, %1012 ]
  %1018 = load ptr, ptr %1017, align 8, !tbaa !51
  %1019 = getelementptr i8, ptr %1018, i64 40
  %1020 = load ptr, ptr %1019, align 8, !tbaa !16
  %1021 = call zeroext i8 @is_gimple_reg(ptr noundef %1020) #18
  %1022 = icmp eq i8 %1021, 0
  br i1 %1022, label %1079, label %1023

1023:                                             ; preds = %1016
  %1024 = getelementptr i8, ptr %1018, i64 36
  %1025 = load i32, ptr %1024, align 4, !tbaa !16
  %1026 = icmp sgt i32 %1025, 0
  br i1 %1026, label %1027, label %1079

1027:                                             ; preds = %1023
  %1028 = getelementptr inbounds %struct.gimple_statement_phi, ptr %1018, i64 0, i32 1
  %1029 = zext i32 %1025 to i64
  br label %1030

1030:                                             ; preds = %1078, %1027
  %1031 = phi i64 [ 1, %1027 ], [ %1073, %1078 ]
  %1032 = phi i64 [ 0, %1027 ], [ %1031, %1078 ]
  %1033 = getelementptr %struct.gimple_statement_phi, ptr %1018, i64 0, i32 4, i64 %1032, i32 0, i32 3
  %1034 = load ptr, ptr %1033, align 8, !tbaa !78
  %1035 = load ptr, ptr %1034, align 8, !tbaa !5
  %1036 = load i64, ptr %1035, align 8
  %1037 = and i64 %1036, 65535
  %1038 = icmp eq i64 %1037, 141
  br i1 %1038, label %1039, label %1070

1039:                                             ; preds = %1030
  %1040 = getelementptr inbounds %struct.tree_ssa_name, ptr %1035, i64 0, i32 3
  %1041 = load i32, ptr %1040, align 8, !tbaa !16
  %1042 = load ptr, ptr %153, align 8, !tbaa !93
  %1043 = icmp eq ptr %1042, null
  br i1 %1043, label %1044, label %1050

1044:                                             ; preds = %1039
  %1045 = and i32 %1041, 63
  %1046 = zext i32 %1045 to i64
  %1047 = shl nuw i64 1, %1046
  %1048 = lshr i32 %1041, 6
  %1049 = zext i32 %1048 to i64
  br label %1064

1050:                                             ; preds = %1039
  %1051 = lshr i32 %1041, 6
  %1052 = zext i32 %1051 to i64
  %1053 = getelementptr inbounds %struct.simple_bitmap_def, ptr %153, i64 0, i32 3, i64 %1052
  %1054 = load i64, ptr %1053, align 8, !tbaa !36
  %1055 = and i32 %1041, 63
  %1056 = zext i32 %1055 to i64
  %1057 = shl nuw i64 1, %1056
  %1058 = and i64 %1054, %1057
  %1059 = icmp eq i64 %1058, 0
  br i1 %1059, label %1060, label %1064

1060:                                             ; preds = %1050
  %1061 = getelementptr inbounds i8, ptr %1042, i64 %1052
  %1062 = load i8, ptr %1061, align 1, !tbaa !16
  %1063 = add i8 %1062, 1
  store i8 %1063, ptr %1061, align 1, !tbaa !16
  br label %1064

1064:                                             ; preds = %1060, %1050, %1044
  %1065 = phi i64 [ %1049, %1044 ], [ %1052, %1050 ], [ %1052, %1060 ]
  %1066 = phi i64 [ %1047, %1044 ], [ %1057, %1050 ], [ %1057, %1060 ]
  %1067 = getelementptr inbounds %struct.simple_bitmap_def, ptr %153, i64 0, i32 3, i64 %1065
  %1068 = load i64, ptr %1067, align 8, !tbaa !36
  %1069 = or i64 %1068, %1066
  store i64 %1069, ptr %1067, align 8, !tbaa !36
  br label %1070

1070:                                             ; preds = %1064, %1030
  %1071 = icmp eq i64 %1031, %1029
  br i1 %1071, label %1079, label %1072

1072:                                             ; preds = %1070
  %1073 = add nuw nsw i64 %1031, 1
  %1074 = load i32, ptr %1028, align 8, !tbaa !16
  %1075 = zext i32 %1074 to i64
  %1076 = icmp ugt i64 %1031, %1075
  br i1 %1076, label %1077, label %1078

1077:                                             ; preds = %1072
  call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 3103, ptr noundef nonnull @.str.28) #18
  br label %1078

1078:                                             ; preds = %1077, %1072
  br label %1030

1079:                                             ; preds = %1070, %1023, %1016
  %1080 = getelementptr inbounds %struct.gimple_seq_node_d, ptr %1017, i64 0, i32 2
  %1081 = load ptr, ptr %1080, align 8, !tbaa !105
  %1082 = icmp eq ptr %1081, null
  br i1 %1082, label %1083, label %1016, !llvm.loop !107

1083:                                             ; preds = %1079, %1012
  %1084 = or i8 %1013, %114
  %1085 = load ptr, ptr @live, align 8, !tbaa !5
  %1086 = load i32, ptr %122, align 4, !tbaa !20
  %1087 = sext i32 %1086 to i64
  %1088 = getelementptr inbounds ptr, ptr %1085, i64 %1087
  %1089 = load ptr, ptr %1088, align 8, !tbaa !5
  %1090 = call zeroext i8 @sbitmap_empty_p(ptr noundef %1089) #18
  %1091 = icmp eq i8 %1090, 0
  br i1 %1091, label %1092, label %1166

1092:                                             ; preds = %1083
  %1093 = icmp eq ptr %126, null
  br label %1094

1094:                                             ; preds = %1159, %1092
  %1095 = phi i32 [ %1161, %1159 ], [ 0, %1092 ]
  %1096 = phi i32 [ %1160, %1159 ], [ %115, %1092 ]
  br i1 %1093, label %1097, label %1098

1097:                                             ; preds = %1094
  call void @fancy_abort(ptr noundef nonnull @.str.35, i32 noundef 687, ptr noundef nonnull @.str.28) #18
  br label %1098

1098:                                             ; preds = %1097, %1094
  %1099 = load ptr, ptr %126, align 8, !tbaa !5
  %1100 = icmp eq ptr %1099, null
  br i1 %1100, label %1103, label %1101

1101:                                             ; preds = %1098
  %1102 = load i32, ptr %1099, align 8, !tbaa !76
  br label %1103

1103:                                             ; preds = %1101, %1098
  %1104 = phi i32 [ %1102, %1101 ], [ 0, %1098 ]
  %1105 = icmp eq i32 %1104, %1095
  br i1 %1105, label %1162, label %1106

1106:                                             ; preds = %1103
  %1107 = zext i32 %1095 to i64
  %1108 = getelementptr inbounds %struct.VEC_edge_base, ptr %1099, i64 0, i32 2, i64 %1107
  %1109 = load ptr, ptr %1108, align 8, !tbaa !5
  %1110 = getelementptr inbounds %struct.edge_def, ptr %1109, i64 0, i32 7
  %1111 = load i32, ptr %1110, align 8, !tbaa !108
  %1112 = and i32 %1111, 32
  %1113 = icmp eq i32 %1112, 0
  br i1 %1113, label %1114, label %1152

1114:                                             ; preds = %1106
  %1115 = load ptr, ptr %1109, align 8, !tbaa !58
  %1116 = getelementptr inbounds %struct.basic_block_def, ptr %1115, i64 0, i32 9
  %1117 = load i32, ptr %1116, align 8, !tbaa !55
  %1118 = load ptr, ptr @live, align 8, !tbaa !5
  %1119 = sext i32 %1117 to i64
  %1120 = getelementptr inbounds ptr, ptr %1118, i64 %1119
  %1121 = load ptr, ptr %1120, align 8, !tbaa !5
  %1122 = icmp eq ptr %1121, null
  br i1 %1122, label %1123, label %1140

1123:                                             ; preds = %1114
  %1124 = load ptr, ptr @cfun, align 8, !tbaa !5
  %1125 = getelementptr inbounds %struct.function, ptr %1124, i64 0, i32 3
  %1126 = load ptr, ptr %1125, align 8, !tbaa !40
  %1127 = getelementptr inbounds %struct.gimple_df, ptr %1126, i64 0, i32 2
  %1128 = load ptr, ptr %1127, align 8, !tbaa !41
  %1129 = icmp eq ptr %1128, null
  br i1 %1129, label %1132, label %1130

1130:                                             ; preds = %1123
  %1131 = load i32, ptr %1128, align 8, !tbaa !46
  br label %1132

1132:                                             ; preds = %1130, %1123
  %1133 = phi i32 [ %1131, %1130 ], [ 0, %1123 ]
  %1134 = call ptr @sbitmap_alloc(i32 noundef %1133) #18
  %1135 = load ptr, ptr @live, align 8, !tbaa !5
  %1136 = getelementptr inbounds ptr, ptr %1135, i64 %1119
  store ptr %1134, ptr %1136, align 8, !tbaa !5
  call void @sbitmap_zero(ptr noundef %1134) #18
  %1137 = load ptr, ptr @live, align 8, !tbaa !5
  %1138 = getelementptr inbounds ptr, ptr %1137, i64 %1119
  %1139 = load ptr, ptr %1138, align 8, !tbaa !5
  br label %1140

1140:                                             ; preds = %1132, %1114
  %1141 = phi ptr [ %1139, %1132 ], [ %1121, %1114 ]
  %1142 = phi ptr [ %1137, %1132 ], [ %1118, %1114 ]
  %1143 = load i32, ptr %122, align 4, !tbaa !20
  %1144 = sext i32 %1143 to i64
  %1145 = getelementptr inbounds ptr, ptr %1142, i64 %1144
  %1146 = load ptr, ptr %1145, align 8, !tbaa !5
  call void @sbitmap_a_or_b(ptr noundef %1141, ptr noundef %1141, ptr noundef %1146) #18
  %1147 = getelementptr inbounds i32, ptr %39, i64 %1119
  %1148 = load i32, ptr %1147, align 4, !tbaa !20
  %1149 = call i32 @llvm.smin.i32(i32 %1148, i32 %1096)
  %1150 = load ptr, ptr %126, align 8, !tbaa !5
  %1151 = icmp eq ptr %1150, null
  br i1 %1151, label %1157, label %1152

1152:                                             ; preds = %1140, %1106
  %1153 = phi i32 [ %1149, %1140 ], [ %1096, %1106 ]
  %1154 = phi ptr [ %1150, %1140 ], [ %1099, %1106 ]
  %1155 = load i32, ptr %1154, align 8, !tbaa !76
  %1156 = icmp ult i32 %1095, %1155
  br i1 %1156, label %1159, label %1157

1157:                                             ; preds = %1152, %1140
  %1158 = phi i32 [ %1153, %1152 ], [ %1149, %1140 ]
  call void @fancy_abort(ptr noundef nonnull @.str.35, i32 noundef 738, ptr noundef nonnull @.str.28) #18
  br label %1159

1159:                                             ; preds = %1157, %1152
  %1160 = phi i32 [ %1153, %1152 ], [ %1158, %1157 ]
  %1161 = add i32 %1095, 1
  br label %1094, !llvm.loop !109

1162:                                             ; preds = %1103
  %1163 = load i32, ptr %122, align 4, !tbaa !20
  %1164 = sext i32 %1163 to i64
  %1165 = getelementptr inbounds i32, ptr %47, i64 %1164
  store i32 %1096, ptr %1165, align 4, !tbaa !20
  br label %1180

1166:                                             ; preds = %1083
  %1167 = load ptr, ptr @live, align 8, !tbaa !5
  %1168 = load i32, ptr %122, align 4, !tbaa !20
  %1169 = sext i32 %1168 to i64
  %1170 = getelementptr inbounds ptr, ptr %1167, i64 %1169
  %1171 = load ptr, ptr %1170, align 8, !tbaa !5
  %1172 = load ptr, ptr %1171, align 8, !tbaa !93
  call void @free(ptr noundef %1172)
  %1173 = load i32, ptr %122, align 4, !tbaa !20
  %1174 = sext i32 %1173 to i64
  %1175 = getelementptr inbounds ptr, ptr %1167, i64 %1174
  %1176 = load ptr, ptr %1175, align 8, !tbaa !5
  call void @free(ptr noundef %1176)
  %1177 = load i32, ptr %122, align 4, !tbaa !20
  %1178 = sext i32 %1177 to i64
  %1179 = getelementptr inbounds ptr, ptr %1167, i64 %1178
  store ptr null, ptr %1179, align 8, !tbaa !5
  br label %1180

1180:                                             ; preds = %1166, %1162
  %1181 = getelementptr inbounds %struct.basic_block_def, ptr %126, i64 0, i32 1
  br label %1182

1182:                                             ; preds = %1228, %1180
  %1183 = phi i32 [ 0, %1180 ], [ %1229, %1228 ]
  %1184 = load ptr, ptr %1181, align 8, !tbaa !5
  %1185 = icmp eq ptr %1184, null
  br i1 %1185, label %1188, label %1186

1186:                                             ; preds = %1182
  %1187 = load i32, ptr %1184, align 8, !tbaa !76
  br label %1188

1188:                                             ; preds = %1186, %1182
  %1189 = phi i32 [ %1187, %1186 ], [ 0, %1182 ]
  %1190 = icmp eq i32 %1189, %1183
  br i1 %1190, label %108, label %1191

1191:                                             ; preds = %1188
  %1192 = zext i32 %1183 to i64
  %1193 = getelementptr inbounds %struct.VEC_edge_base, ptr %1184, i64 0, i32 2, i64 %1192
  %1194 = load ptr, ptr %1193, align 8, !tbaa !5
  %1195 = getelementptr inbounds %struct.edge_def, ptr %1194, i64 0, i32 1
  %1196 = load ptr, ptr %1195, align 8, !tbaa !60
  %1197 = getelementptr inbounds %struct.basic_block_def, ptr %1196, i64 0, i32 9
  %1198 = load i32, ptr %1197, align 8, !tbaa !55
  %1199 = sext i32 %1198 to i64
  %1200 = getelementptr inbounds i32, ptr %47, i64 %1199
  %1201 = load i32, ptr %1200, align 4, !tbaa !20
  %1202 = icmp eq i32 %1201, %115
  br i1 %1202, label %1203, label %1223

1203:                                             ; preds = %1191
  %1204 = load ptr, ptr @live, align 8, !tbaa !5
  %1205 = getelementptr inbounds ptr, ptr %1204, i64 %1199
  %1206 = load ptr, ptr %1205, align 8, !tbaa !5
  %1207 = icmp eq ptr %1206, null
  br i1 %1207, label %1223, label %1208

1208:                                             ; preds = %1203
  %1209 = load ptr, ptr %1206, align 8, !tbaa !93
  call void @free(ptr noundef %1209)
  %1210 = load ptr, ptr %1195, align 8, !tbaa !60
  %1211 = getelementptr inbounds %struct.basic_block_def, ptr %1210, i64 0, i32 9
  %1212 = load i32, ptr %1211, align 8, !tbaa !55
  %1213 = sext i32 %1212 to i64
  %1214 = getelementptr inbounds ptr, ptr %1204, i64 %1213
  %1215 = load ptr, ptr %1214, align 8, !tbaa !5
  call void @free(ptr noundef %1215)
  %1216 = load ptr, ptr %1195, align 8, !tbaa !60
  %1217 = getelementptr inbounds %struct.basic_block_def, ptr %1216, i64 0, i32 9
  %1218 = load i32, ptr %1217, align 8, !tbaa !55
  %1219 = sext i32 %1218 to i64
  %1220 = getelementptr inbounds ptr, ptr %1204, i64 %1219
  store ptr null, ptr %1220, align 8, !tbaa !5
  %1221 = load ptr, ptr %1181, align 8, !tbaa !5
  %1222 = icmp eq ptr %1221, null
  br i1 %1222, label %1227, label %1223

1223:                                             ; preds = %1208, %1203, %1191
  %1224 = phi ptr [ %1221, %1208 ], [ %1184, %1203 ], [ %1184, %1191 ]
  %1225 = load i32, ptr %1224, align 8, !tbaa !76
  %1226 = icmp ult i32 %1183, %1225
  br i1 %1226, label %1228, label %1227

1227:                                             ; preds = %1223, %1208
  call void @fancy_abort(ptr noundef nonnull @.str.35, i32 noundef 738, ptr noundef nonnull @.str.28) #18
  br label %1228

1228:                                             ; preds = %1227, %1223
  %1229 = add i32 %1183, 1
  br label %1182, !llvm.loop !110

1230:                                             ; preds = %108, %21
  %1231 = phi i8 [ 0, %21 ], [ %1084, %108 ]
  call void @free(ptr noundef %31)
  call void @free(ptr noundef %39)
  call void @free(ptr noundef %47)
  %1232 = load ptr, ptr @cfun, align 8, !tbaa !5
  %1233 = getelementptr inbounds %struct.function, ptr %1232, i64 0, i32 1
  %1234 = load ptr, ptr %1233, align 8, !tbaa !65
  %1235 = getelementptr inbounds %struct.control_flow_graph, ptr %1234, i64 0, i32 5
  %1236 = load i32, ptr %1235, align 8, !tbaa !66
  %1237 = icmp sgt i32 %1236, -2
  %1238 = load ptr, ptr @live, align 8, !tbaa !5
  br i1 %1237, label %1239, label %1258

1239:                                             ; preds = %1230, %1249
  %1240 = phi ptr [ %1250, %1249 ], [ %1232, %1230 ]
  %1241 = phi i64 [ %1251, %1249 ], [ 0, %1230 ]
  %1242 = getelementptr inbounds ptr, ptr %1238, i64 %1241
  %1243 = load ptr, ptr %1242, align 8, !tbaa !5
  %1244 = icmp eq ptr %1243, null
  br i1 %1244, label %1249, label %1245

1245:                                             ; preds = %1239
  %1246 = load ptr, ptr %1243, align 8, !tbaa !93
  call void @free(ptr noundef %1246)
  %1247 = load ptr, ptr %1242, align 8, !tbaa !5
  call void @free(ptr noundef %1247)
  %1248 = load ptr, ptr @cfun, align 8, !tbaa !5
  br label %1249

1249:                                             ; preds = %1245, %1239
  %1250 = phi ptr [ %1240, %1239 ], [ %1248, %1245 ]
  %1251 = add nuw nsw i64 %1241, 1
  %1252 = getelementptr inbounds %struct.function, ptr %1250, i64 0, i32 1
  %1253 = load ptr, ptr %1252, align 8, !tbaa !65
  %1254 = getelementptr inbounds %struct.control_flow_graph, ptr %1253, i64 0, i32 5
  %1255 = load i32, ptr %1254, align 8, !tbaa !66
  %1256 = sext i32 %1255 to i64
  %1257 = icmp sgt i64 %1241, %1256
  br i1 %1257, label %1258, label %1239, !llvm.loop !111

1258:                                             ; preds = %1249, %1230
  call void @free(ptr noundef %1238)
  %1259 = icmp eq i8 %1231, 0
  br i1 %1259, label %1452, label %1260

1260:                                             ; preds = %1258
  %1261 = load ptr, ptr @dump_file, align 8, !tbaa !5
  %1262 = icmp eq ptr %1261, null
  br i1 %1262, label %1268, label %1263

1263:                                             ; preds = %1260
  %1264 = load i32, ptr @dump_flags, align 4, !tbaa !20
  %1265 = and i32 %1264, 8
  %1266 = icmp eq i32 %1265, 0
  br i1 %1266, label %1268, label %1267

1267:                                             ; preds = %1263
  call void @dump_all_asserts(ptr noundef nonnull %1261)
  br label %1268

1268:                                             ; preds = %1267, %1263, %1260
  %1269 = load ptr, ptr @need_assert_for, align 8, !tbaa !5
  %1270 = load ptr, ptr %1269, align 8, !tbaa !32
  %1271 = icmp eq ptr %1270, null
  %1272 = select i1 %1271, ptr @bitmap_zero_bits, ptr %1270
  %1273 = getelementptr inbounds %struct.bitmap_element_def, ptr %1272, i64 0, i32 2
  %1274 = load i32, ptr %1273, align 8, !tbaa !34
  %1275 = shl i32 %1274, 7
  %1276 = getelementptr inbounds %struct.bitmap_element_def, ptr %1272, i64 0, i32 3
  %1277 = load i64, ptr %1276, align 8, !tbaa !36
  %1278 = icmp eq i64 %1277, 0
  %1279 = zext i1 %1278 to i32
  %1280 = or i32 %1275, %1279
  br label %1281

1281:                                             ; preds = %1442, %1268
  %1282 = phi i64 [ %1277, %1268 ], [ %1445, %1442 ]
  %1283 = phi i32 [ 0, %1268 ], [ %1291, %1442 ]
  %1284 = phi i32 [ %1280, %1268 ], [ %1446, %1442 ]
  %1285 = phi ptr [ %1272, %1268 ], [ %1293, %1442 ]
  %1286 = phi i32 [ 0, %1268 ], [ %1443, %1442 ]
  %1287 = phi i8 [ 0, %1268 ], [ %1444, %1442 ]
  %1288 = icmp eq i64 %1282, 0
  br i1 %1288, label %1303, label %1289

1289:                                             ; preds = %1312, %1281
  %1290 = phi i64 [ %1282, %1281 ], [ %1317, %1312 ]
  %1291 = phi i32 [ %1283, %1281 ], [ %1313, %1312 ]
  %1292 = phi i32 [ %1284, %1281 ], [ %1314, %1312 ]
  %1293 = phi ptr [ %1285, %1281 ], [ %1309, %1312 ]
  %1294 = and i64 %1290, 1
  %1295 = icmp eq i64 %1294, 0
  br i1 %1295, label %1296, label %1330

1296:                                             ; preds = %1289, %1296
  %1297 = phi i32 [ %1300, %1296 ], [ %1292, %1289 ]
  %1298 = phi i64 [ %1299, %1296 ], [ %1290, %1289 ]
  %1299 = lshr i64 %1298, 1
  %1300 = add i32 %1297, 1
  %1301 = and i64 %1298, 2
  %1302 = icmp eq i64 %1301, 0
  br i1 %1302, label %1296, label %1330, !llvm.loop !37

1303:                                             ; preds = %1281
  %1304 = add i32 %1284, 63
  %1305 = and i32 %1304, -64
  %1306 = add i32 %1283, 1
  br label %1307

1307:                                             ; preds = %1326, %1303
  %1308 = phi i32 [ %1305, %1303 ], [ %1329, %1326 ]
  %1309 = phi ptr [ %1285, %1303 ], [ %1324, %1326 ]
  %1310 = phi i32 [ %1306, %1303 ], [ 0, %1326 ]
  %1311 = icmp eq i32 %1310, 2
  br i1 %1311, label %1323, label %1312

1312:                                             ; preds = %1307, %1319
  %1313 = phi i32 [ %1321, %1319 ], [ %1310, %1307 ]
  %1314 = phi i32 [ %1320, %1319 ], [ %1308, %1307 ]
  %1315 = zext i32 %1313 to i64
  %1316 = getelementptr inbounds %struct.bitmap_element_def, ptr %1309, i64 0, i32 3, i64 %1315
  %1317 = load i64, ptr %1316, align 8, !tbaa !36
  %1318 = icmp eq i64 %1317, 0
  br i1 %1318, label %1319, label %1289

1319:                                             ; preds = %1312
  %1320 = add i32 %1314, 64
  %1321 = add i32 %1313, 1
  %1322 = icmp eq i32 %1321, 2
  br i1 %1322, label %1323, label %1312, !llvm.loop !38

1323:                                             ; preds = %1319, %1307
  %1324 = load ptr, ptr %1309, align 8, !tbaa !39
  %1325 = icmp eq ptr %1324, null
  br i1 %1325, label %1447, label %1326

1326:                                             ; preds = %1323
  %1327 = getelementptr inbounds %struct.bitmap_element_def, ptr %1324, i64 0, i32 2
  %1328 = load i32, ptr %1327, align 8, !tbaa !34
  %1329 = shl i32 %1328, 7
  br label %1307

1330:                                             ; preds = %1296, %1289
  %1331 = phi i64 [ %1290, %1289 ], [ %1299, %1296 ]
  %1332 = phi i32 [ %1292, %1289 ], [ %1300, %1296 ]
  %1333 = load ptr, ptr @asserts_for, align 8, !tbaa !5
  %1334 = zext i32 %1332 to i64
  %1335 = getelementptr inbounds ptr, ptr %1333, i64 %1334
  %1336 = load ptr, ptr %1335, align 8, !tbaa !5
  %1337 = icmp eq ptr %1336, null
  br i1 %1337, label %1338, label %1339

1338:                                             ; preds = %1330
  call void @fancy_abort(ptr noundef nonnull @.str.27, i32 noundef 4926, ptr noundef nonnull @.str.28) #18
  br label %1442

1339:                                             ; preds = %1330, %1437
  %1340 = phi i8 [ %1439, %1437 ], [ %1287, %1330 ]
  %1341 = phi ptr [ %1344, %1437 ], [ %1336, %1330 ]
  %1342 = phi i32 [ %1440, %1437 ], [ %1286, %1330 ]
  %1343 = getelementptr inbounds %struct.assert_locus_d, ptr %1341, i64 0, i32 6
  %1344 = load ptr, ptr %1343, align 8, !tbaa !98
  %1345 = load ptr, ptr @cfun, align 8, !tbaa !5
  %1346 = getelementptr inbounds %struct.function, ptr %1345, i64 0, i32 3
  %1347 = load ptr, ptr %1346, align 8, !tbaa !40
  %1348 = getelementptr inbounds %struct.gimple_df, ptr %1347, i64 0, i32 2
  %1349 = load ptr, ptr %1348, align 8, !tbaa !41
  %1350 = getelementptr inbounds %struct.VEC_tree_base, ptr %1349, i64 0, i32 2, i64 %1334
  %1351 = load ptr, ptr %1350, align 8, !tbaa !5
  %1352 = getelementptr inbounds %struct.assert_locus_d, ptr %1341, i64 0, i32 5
  %1353 = load ptr, ptr %1352, align 8, !tbaa !97
  %1354 = getelementptr inbounds %struct.assert_locus_d, ptr %1341, i64 0, i32 4
  %1355 = load ptr, ptr %1354, align 8, !tbaa !62
  %1356 = icmp eq ptr %1353, %1355
  br i1 %1356, label %1437, label %1357

1357:                                             ; preds = %1339
  %1358 = getelementptr inbounds %struct.assert_locus_d, ptr %1341, i64 0, i32 3
  %1359 = load i32, ptr %1358, align 8, !tbaa !61
  %1360 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 47), align 8, !tbaa !5
  %1361 = call ptr @build2_stat(i32 noundef %1359, ptr noundef %1360, ptr noundef %1353, ptr noundef %1355) #18
  %1362 = load i64, ptr %1351, align 8
  %1363 = and i64 %1362, 65535
  %1364 = icmp eq i64 %1363, 141
  br i1 %1364, label %1366, label %1365

1365:                                             ; preds = %1357
  call void @fancy_abort(ptr noundef nonnull @.str.27, i32 noundef 3748, ptr noundef nonnull @.str.28) #18
  br label %1366

1366:                                             ; preds = %1365, %1357
  %1367 = call ptr @duplicate_ssa_name(ptr noundef nonnull %1351, ptr noundef null) #18
  %1368 = load i64, ptr %1361, align 8
  %1369 = and i64 %1368, 65535
  %1370 = getelementptr inbounds [0 x i32], ptr @tree_code_type, i64 0, i64 %1369
  %1371 = load i32, ptr %1370, align 4, !tbaa !16
  %1372 = icmp eq i32 %1371, 5
  br i1 %1372, label %1373, label %1378

1373:                                             ; preds = %1366
  %1374 = getelementptr inbounds %struct.tree_common, ptr %1351, i64 0, i32 2
  %1375 = load ptr, ptr %1374, align 8, !tbaa !16
  %1376 = call ptr @build2_stat(i32 noundef 148, ptr noundef %1375, ptr noundef nonnull %1351, ptr noundef nonnull %1361) #18
  %1377 = call ptr @gimple_build_assign_stat(ptr noundef %1367, ptr noundef %1376) #18
  br label %1395

1378:                                             ; preds = %1366
  %1379 = trunc i64 %1368 to i16
  switch i16 %1379, label %1394 [
    i16 96, label %1380
    i16 141, label %1388
  ]

1380:                                             ; preds = %1378
  %1381 = getelementptr inbounds %struct.tree_exp, ptr %1361, i64 0, i32 3
  %1382 = load ptr, ptr %1381, align 8, !tbaa !16
  %1383 = icmp eq ptr %1382, %1351
  br i1 %1383, label %1385, label %1384

1384:                                             ; preds = %1380
  call void @fancy_abort(ptr noundef nonnull @.str.27, i32 noundef 3760, ptr noundef nonnull @.str.28) #18
  br label %1385

1385:                                             ; preds = %1384, %1380
  %1386 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 25), align 8, !tbaa !5
  %1387 = call ptr @gimple_build_assign_stat(ptr noundef %1367, ptr noundef %1386) #18
  br label %1395

1388:                                             ; preds = %1378
  %1389 = icmp eq ptr %1361, %1351
  br i1 %1389, label %1391, label %1390

1390:                                             ; preds = %1388
  call void @fancy_abort(ptr noundef nonnull @.str.27, i32 noundef 3766, ptr noundef nonnull @.str.28) #18
  br label %1391

1391:                                             ; preds = %1390, %1388
  %1392 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 26), align 16, !tbaa !5
  %1393 = call ptr @gimple_build_assign_stat(ptr noundef %1367, ptr noundef %1392) #18
  br label %1395

1394:                                             ; preds = %1378
  call void @fancy_abort(ptr noundef nonnull @.str.27, i32 noundef 3770, ptr noundef nonnull @.str.28) #18
  br label %1395

1395:                                             ; preds = %1394, %1391, %1385, %1373
  %1396 = phi ptr [ %1377, %1373 ], [ %1387, %1385 ], [ %1393, %1391 ], [ undef, %1394 ]
  %1397 = getelementptr inbounds %struct.tree_ssa_name, ptr %1367, i64 0, i32 2
  store ptr %1396, ptr %1397, align 8, !tbaa !16
  call void @register_new_name_mapping(ptr noundef %1367, ptr noundef nonnull %1351) #18
  %1398 = getelementptr inbounds %struct.assert_locus_d, ptr %1341, i64 0, i32 1
  %1399 = load ptr, ptr %1398, align 8, !tbaa !57
  %1400 = icmp eq ptr %1399, null
  br i1 %1400, label %1402, label %1401

1401:                                             ; preds = %1395
  call void @gsi_insert_on_edge(ptr noundef nonnull %1399, ptr noundef %1396) #18
  br label %1437

1402:                                             ; preds = %1395
  %1403 = getelementptr inbounds %struct.assert_locus_d, ptr %1341, i64 0, i32 2
  %1404 = load ptr, ptr %1403, align 8, !tbaa !49
  %1405 = load ptr, ptr %1404, align 8, !tbaa !51
  %1406 = call zeroext i8 @stmt_ends_bb_p(ptr noundef %1405) #18
  %1407 = icmp eq i8 %1406, 0
  br i1 %1407, label %1408, label %1409

1408:                                             ; preds = %1402
  call void @gsi_insert_after(ptr noundef nonnull %1403, ptr noundef %1396, i32 noundef 1) #18
  br label %1437

1409:                                             ; preds = %1402
  %1410 = load ptr, ptr %1341, align 8, !tbaa !53
  %1411 = getelementptr inbounds %struct.basic_block_def, ptr %1410, i64 0, i32 1
  br label %1412

1412:                                             ; preds = %1434, %1409
  %1413 = phi i32 [ 0, %1409 ], [ %1435, %1434 ]
  %1414 = load ptr, ptr %1411, align 8, !tbaa !5
  %1415 = icmp eq ptr %1414, null
  br i1 %1415, label %1418, label %1416

1416:                                             ; preds = %1412
  %1417 = load i32, ptr %1414, align 8, !tbaa !76
  br label %1418

1418:                                             ; preds = %1416, %1412
  %1419 = phi i32 [ %1417, %1416 ], [ 0, %1412 ]
  %1420 = icmp eq i32 %1419, %1413
  br i1 %1420, label %1436, label %1421

1421:                                             ; preds = %1418
  %1422 = zext i32 %1413 to i64
  %1423 = getelementptr inbounds %struct.VEC_edge_base, ptr %1414, i64 0, i32 2, i64 %1422
  %1424 = load ptr, ptr %1423, align 8, !tbaa !5
  %1425 = getelementptr inbounds %struct.edge_def, ptr %1424, i64 0, i32 7
  %1426 = load i32, ptr %1425, align 8, !tbaa !108
  %1427 = and i32 %1426, 2
  %1428 = icmp eq i32 %1427, 0
  br i1 %1428, label %1429, label %1430

1429:                                             ; preds = %1421
  call void @gsi_insert_on_edge(ptr noundef nonnull %1424, ptr noundef %1396) #18
  br label %1437

1430:                                             ; preds = %1421
  %1431 = load i32, ptr %1414, align 8, !tbaa !76
  %1432 = icmp ult i32 %1413, %1431
  br i1 %1432, label %1434, label %1433

1433:                                             ; preds = %1430
  call void @fancy_abort(ptr noundef nonnull @.str.35, i32 noundef 738, ptr noundef nonnull @.str.28) #18
  br label %1434

1434:                                             ; preds = %1433, %1430
  %1435 = add i32 %1413, 1
  br label %1412, !llvm.loop !112

1436:                                             ; preds = %1418
  call void @fancy_abort(ptr noundef nonnull @.str.27, i32 noundef 4901, ptr noundef nonnull @.str.28) #18
  br label %1437

1437:                                             ; preds = %1436, %1429, %1408, %1401, %1339
  %1438 = phi i8 [ 1, %1401 ], [ 1, %1429 ], [ 0, %1436 ], [ 0, %1408 ], [ 0, %1339 ]
  %1439 = or i8 %1438, %1340
  call void @free(ptr noundef %1341)
  %1440 = add nsw i32 %1342, 1
  %1441 = icmp eq ptr %1344, null
  br i1 %1441, label %1442, label %1339, !llvm.loop !113

1442:                                             ; preds = %1437, %1338
  %1443 = phi i32 [ %1286, %1338 ], [ %1440, %1437 ]
  %1444 = phi i8 [ %1287, %1338 ], [ %1439, %1437 ]
  %1445 = lshr i64 %1331, 1
  %1446 = add i32 %1332, 1
  br label %1281, !llvm.loop !114

1447:                                             ; preds = %1323
  %1448 = icmp eq i8 %1287, 0
  br i1 %1448, label %1450, label %1449

1449:                                             ; preds = %1447
  call void @gsi_commit_edge_inserts() #18
  br label %1450

1450:                                             ; preds = %1449, %1447
  %1451 = load ptr, ptr @cfun, align 8, !tbaa !5
  call void @statistics_counter_event(ptr noundef %1451, ptr noundef nonnull @.str.36, i32 noundef %1286) #18
  call void @update_ssa(i32 noundef 4096) #18
  br label %1452

1452:                                             ; preds = %1450, %1258
  %1453 = load ptr, ptr @dump_file, align 8, !tbaa !5
  %1454 = icmp eq ptr %1453, null
  br i1 %1454, label %1464, label %1455

1455:                                             ; preds = %1452
  %1456 = load i32, ptr @dump_flags, align 4, !tbaa !20
  %1457 = and i32 %1456, 8
  %1458 = icmp eq i32 %1457, 0
  br i1 %1458, label %1464, label %1459

1459:                                             ; preds = %1455
  %1460 = call i64 @fwrite(ptr nonnull @.str.30, i64 39, i64 1, ptr nonnull %1453)
  %1461 = load ptr, ptr @current_function_decl, align 8, !tbaa !5
  %1462 = load ptr, ptr @dump_file, align 8, !tbaa !5
  %1463 = load i32, ptr @dump_flags, align 4, !tbaa !20
  call void @dump_function_to_file(ptr noundef %1461, ptr noundef %1462, i32 noundef %1463) #18
  br label %1464

1464:                                             ; preds = %1452, %1455, %1459
  %1465 = load ptr, ptr @asserts_for, align 8, !tbaa !5
  call void @free(ptr noundef %1465)
  %1466 = load ptr, ptr @need_assert_for, align 8, !tbaa !5
  call void @bitmap_obstack_free(ptr noundef %1466) #18
  store ptr null, ptr @need_assert_for, align 8, !tbaa !5
  %1467 = call ptr @vec_heap_p_reserve_exact(ptr noundef null, i32 noundef 10) #18
  store ptr %1467, ptr @to_remove_edges, align 8, !tbaa !5
  %1468 = call ptr @vec_heap_o_reserve_exact(ptr noundef null, i32 noundef 5, i64 noundef 8, i64 noundef 16) #18
  store ptr %1468, ptr @to_update_switch_stmts, align 8, !tbaa !5
  call void @threadedge_initialize_values() #18
  %1469 = load ptr, ptr @cfun, align 8, !tbaa !5
  %1470 = getelementptr inbounds %struct.function, ptr %1469, i64 0, i32 3
  %1471 = load ptr, ptr %1470, align 8, !tbaa !40
  %1472 = getelementptr inbounds %struct.gimple_df, ptr %1471, i64 0, i32 2
  %1473 = load ptr, ptr %1472, align 8, !tbaa !41
  %1474 = icmp eq ptr %1473, null
  br i1 %1474, label %1477, label %1475

1475:                                             ; preds = %1464
  %1476 = load i32, ptr %1473, align 8, !tbaa !46
  br label %1477

1477:                                             ; preds = %1475, %1464
  %1478 = phi i32 [ %1476, %1475 ], [ 0, %1464 ]
  %1479 = zext i32 %1478 to i64
  %1480 = call ptr @xcalloc(i64 noundef %1479, i64 noundef 8) #18
  store ptr %1480, ptr @vr_value, align 8, !tbaa !5
  %1481 = load ptr, ptr @cfun, align 8, !tbaa !5
  %1482 = getelementptr inbounds %struct.function, ptr %1481, i64 0, i32 3
  %1483 = load ptr, ptr %1482, align 8, !tbaa !40
  %1484 = getelementptr inbounds %struct.gimple_df, ptr %1483, i64 0, i32 2
  %1485 = load ptr, ptr %1484, align 8, !tbaa !41
  %1486 = icmp eq ptr %1485, null
  br i1 %1486, label %1489, label %1487

1487:                                             ; preds = %1477
  %1488 = load i32, ptr %1485, align 8, !tbaa !46
  br label %1489

1489:                                             ; preds = %1487, %1477
  %1490 = phi i32 [ %1488, %1487 ], [ 0, %1477 ]
  %1491 = zext i32 %1490 to i64
  %1492 = call ptr @xcalloc(i64 noundef %1491, i64 noundef 4) #18
  store ptr %1492, ptr @vr_phi_edge_counts, align 8, !tbaa !5
  %1493 = load ptr, ptr @cfun, align 8, !tbaa !5
  %1494 = getelementptr inbounds %struct.function, ptr %1493, i64 0, i32 1
  %1495 = load ptr, ptr %1494, align 8, !tbaa !65
  %1496 = load ptr, ptr %1495, align 8, !tbaa !115
  %1497 = getelementptr inbounds %struct.basic_block_def, ptr %1496, i64 0, i32 6
  %1498 = load ptr, ptr %1497, align 8, !tbaa !116
  %1499 = getelementptr inbounds %struct.control_flow_graph, ptr %1495, i64 0, i32 1
  %1500 = load ptr, ptr %1499, align 8, !tbaa !117
  %1501 = icmp eq ptr %1498, %1500
  br i1 %1501, label %1790, label %1511

1502:                                             ; preds = %1785, %1640, %1637, %1633, %1628
  %1503 = getelementptr inbounds %struct.basic_block_def, ptr %1512, i64 0, i32 6
  %1504 = load ptr, ptr %1503, align 8, !tbaa !116
  %1505 = load ptr, ptr @cfun, align 8, !tbaa !5
  %1506 = getelementptr inbounds %struct.function, ptr %1505, i64 0, i32 1
  %1507 = load ptr, ptr %1506, align 8, !tbaa !65
  %1508 = getelementptr inbounds %struct.control_flow_graph, ptr %1507, i64 0, i32 1
  %1509 = load ptr, ptr %1508, align 8, !tbaa !117
  %1510 = icmp eq ptr %1504, %1509
  br i1 %1510, label %1790, label %1511, !llvm.loop !118

1511:                                             ; preds = %1489, %1502
  %1512 = phi ptr [ %1504, %1502 ], [ %1498, %1489 ]
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %4) #18
  call void @gsi_start_phis(ptr nonnull sret(%struct.gimple_stmt_iterator) align 8 %4, ptr noundef %1512) #18
  %1513 = load ptr, ptr %4, align 8, !tbaa.struct !100
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %4) #18
  %1514 = icmp eq ptr %1513, null
  br i1 %1514, label %1628, label %1515

1515:                                             ; preds = %1511, %1623
  %1516 = phi ptr [ %1626, %1623 ], [ %1513, %1511 ]
  %1517 = load ptr, ptr %1516, align 8, !tbaa !51
  %1518 = load i32, ptr %1517, align 8
  %1519 = and i32 %1518, 255
  %1520 = icmp eq i32 %1519, 16
  br i1 %1520, label %1521, label %1532

1521:                                             ; preds = %1515
  %1522 = getelementptr i8, ptr %1517, i64 40
  %1523 = load ptr, ptr %1522, align 8, !tbaa !16
  %1524 = call zeroext i8 @is_gimple_reg(ptr noundef %1523) #18
  %1525 = icmp eq i8 %1524, 0
  br i1 %1525, label %1532, label %1526

1526:                                             ; preds = %1521
  %1527 = load ptr, ptr %1522, align 8, !tbaa !16
  %1528 = getelementptr inbounds %struct.tree_common, ptr %1527, i64 0, i32 2
  %1529 = load ptr, ptr %1528, align 8, !tbaa !16
  %1530 = load i64, ptr %1529, align 8
  %1531 = trunc i64 %1530 to i16
  switch i16 %1531, label %1532 [
    i16 6, label %1620
    i16 7, label %1620
    i16 8, label %1620
    i16 10, label %1620
    i16 12, label %1620
  ]

1532:                                             ; preds = %1526, %1521, %1515
  %1533 = load i32, ptr %1517, align 8
  %1534 = trunc i32 %1533 to i8
  switch i8 %1534, label %1603 [
    i8 6, label %1535
    i8 8, label %1535
  ]

1535:                                             ; preds = %1532, %1532
  %1536 = call ptr @gimple_get_lhs(ptr noundef nonnull %1517) #18
  %1537 = icmp eq ptr %1536, null
  br i1 %1537, label %1608, label %1538

1538:                                             ; preds = %1535
  %1539 = load i64, ptr %1536, align 8
  %1540 = and i64 %1539, 65535
  %1541 = icmp eq i64 %1540, 141
  br i1 %1541, label %1542, label %1608

1542:                                             ; preds = %1538
  %1543 = getelementptr inbounds %struct.tree_common, ptr %1536, i64 0, i32 2
  %1544 = load ptr, ptr %1543, align 8, !tbaa !16
  %1545 = load i64, ptr %1544, align 8
  %1546 = trunc i64 %1545 to i16
  switch i16 %1546, label %1608 [
    i16 6, label %1547
    i16 7, label %1547
    i16 8, label %1547
    i16 10, label %1547
    i16 12, label %1547
  ]

1547:                                             ; preds = %1542, %1542, %1542, %1542, %1542
  %1548 = load i32, ptr %1517, align 8
  %1549 = and i32 %1548, 255
  %1550 = icmp eq i32 %1549, 8
  br i1 %1550, label %1551, label %1594

1551:                                             ; preds = %1547
  %1552 = load i32, ptr getelementptr inbounds ([0 x i32], ptr @gss_for_code_, i64 0, i64 8), align 4, !tbaa !16
  %1553 = zext i32 %1552 to i64
  %1554 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %1553
  %1555 = load i64, ptr %1554, align 8, !tbaa !36
  %1556 = icmp eq i64 %1555, 0
  br i1 %1556, label %1557, label %1558

1557:                                             ; preds = %1551
  call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1622, ptr noundef nonnull @.str.28) #18
  br label %1558

1558:                                             ; preds = %1557, %1551
  %1559 = getelementptr inbounds i8, ptr %1517, i64 %1555
  %1560 = getelementptr inbounds ptr, ptr %1559, i64 1
  %1561 = load ptr, ptr %1560, align 8, !tbaa !5
  %1562 = load i64, ptr %1561, align 8
  %1563 = and i64 %1562, 65535
  %1564 = icmp eq i64 %1563, 121
  br i1 %1564, label %1565, label %1594

1565:                                             ; preds = %1558
  %1566 = getelementptr inbounds %struct.tree_exp, ptr %1561, i64 0, i32 3
  %1567 = load ptr, ptr %1566, align 8, !tbaa !16
  %1568 = icmp eq ptr %1567, null
  br i1 %1568, label %1594, label %1569

1569:                                             ; preds = %1565
  %1570 = load i32, ptr %1517, align 8
  %1571 = and i32 %1570, 255
  %1572 = add nsw i32 %1571, -1
  %1573 = icmp ult i32 %1572, 9
  call void @llvm.assume(i1 %1573)
  %1574 = zext i32 %1571 to i64
  %1575 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %1574
  %1576 = load i32, ptr %1575, align 4, !tbaa !16
  %1577 = zext i32 %1576 to i64
  %1578 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %1577
  %1579 = load i64, ptr %1578, align 8, !tbaa !36
  %1580 = icmp eq i64 %1579, 0
  br i1 %1580, label %1581, label %1582

1581:                                             ; preds = %1569
  call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1622, ptr noundef nonnull @.str.28) #18
  br label %1582

1582:                                             ; preds = %1581, %1569
  %1583 = getelementptr inbounds i8, ptr %1517, i64 %1579
  %1584 = getelementptr inbounds ptr, ptr %1583, i64 1
  %1585 = load ptr, ptr %1584, align 8, !tbaa !5
  %1586 = load i64, ptr %1585, align 8
  %1587 = and i64 %1586, 65535
  %1588 = icmp eq i64 %1587, 121
  call void @llvm.assume(i1 %1588)
  %1589 = getelementptr inbounds %struct.tree_exp, ptr %1585, i64 0, i32 3
  %1590 = load ptr, ptr %1589, align 8, !tbaa !16
  %1591 = getelementptr inbounds %struct.tree_decl_minimal, ptr %1590, i64 0, i32 1
  %1592 = load i32, ptr %1591, align 8, !tbaa !16
  %1593 = icmp ult i32 %1592, 2
  br i1 %1593, label %1620, label %1594

1594:                                             ; preds = %1582, %1565, %1558, %1547
  %1595 = load i32, ptr %1517, align 8
  %1596 = and i32 %1595, 254
  %1597 = add nsw i32 %1596, -10
  %1598 = icmp ult i32 %1597, -4
  br i1 %1598, label %1620, label %1599

1599:                                             ; preds = %1594
  %1600 = getelementptr inbounds %struct.gimple_statement_with_memory_ops_base, ptr %1517, i64 0, i32 2
  %1601 = load ptr, ptr %1600, align 8, !tbaa !16
  %1602 = icmp eq ptr %1601, null
  br i1 %1602, label %1620, label %1608

1603:                                             ; preds = %1532
  %1604 = and i32 %1533, 255
  %1605 = add nsw i32 %1604, -1
  %1606 = and i32 %1605, -5
  %1607 = icmp eq i32 %1606, 0
  br i1 %1607, label %1620, label %1608

1608:                                             ; preds = %1603, %1599, %1542, %1538, %1535
  %1609 = getelementptr inbounds %struct.gimple_statement_phi, ptr %1517, i64 0, i32 3
  %1610 = load ptr, ptr %1609, align 8, !tbaa !5
  %1611 = call fastcc ptr @get_value_range(ptr noundef %1610)
  store i32 3, ptr %1611, align 8, !tbaa !23
  %1612 = getelementptr inbounds %struct.value_range_d, ptr %1611, i64 0, i32 1
  %1613 = getelementptr inbounds %struct.value_range_d, ptr %1611, i64 0, i32 3
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %1612, i8 0, i64 16, i1 false)
  %1614 = load ptr, ptr %1613, align 8, !tbaa !26
  %1615 = icmp eq ptr %1614, null
  br i1 %1615, label %1617, label %1616

1616:                                             ; preds = %1608
  call void @bitmap_clear(ptr noundef nonnull %1614) #18
  br label %1617

1617:                                             ; preds = %1616, %1608
  %1618 = load i32, ptr %1517, align 8
  %1619 = and i32 %1618, -513
  br label %1623

1620:                                             ; preds = %1603, %1599, %1594, %1582, %1526, %1526, %1526, %1526, %1526
  %1621 = load i32, ptr %1517, align 8
  %1622 = or i32 %1621, 512
  br label %1623

1623:                                             ; preds = %1620, %1617
  %1624 = phi i32 [ %1619, %1617 ], [ %1622, %1620 ]
  store i32 %1624, ptr %1517, align 8
  %1625 = getelementptr inbounds %struct.gimple_seq_node_d, ptr %1516, i64 0, i32 2
  %1626 = load ptr, ptr %1625, align 8, !tbaa !105
  %1627 = icmp eq ptr %1626, null
  br i1 %1627, label %1628, label %1515, !llvm.loop !119

1628:                                             ; preds = %1623, %1511
  %1629 = getelementptr inbounds %struct.basic_block_def, ptr %1512, i64 0, i32 13
  %1630 = load i32, ptr %1629, align 8, !tbaa !85, !noalias !120
  %1631 = and i32 %1630, 512
  %1632 = icmp eq i32 %1631, 0
  br i1 %1632, label %1633, label %1502

1633:                                             ; preds = %1628
  %1634 = getelementptr inbounds %struct.basic_block_def, ptr %1512, i64 0, i32 7
  %1635 = load ptr, ptr %1634, align 8, !tbaa !16, !noalias !120
  %1636 = icmp eq ptr %1635, null
  br i1 %1636, label %1502, label %1637

1637:                                             ; preds = %1633
  %1638 = load ptr, ptr %1635, align 8, !tbaa !89, !noalias !120
  %1639 = icmp eq ptr %1638, null
  br i1 %1639, label %1502, label %1640

1640:                                             ; preds = %1637
  %1641 = load ptr, ptr %1638, align 8, !tbaa !91, !noalias !120
  %1642 = icmp eq ptr %1641, null
  br i1 %1642, label %1502, label %1643

1643:                                             ; preds = %1640, %1785
  %1644 = phi ptr [ %1788, %1785 ], [ %1641, %1640 ]
  %1645 = load ptr, ptr %1644, align 8, !tbaa !51
  %1646 = call zeroext i8 @stmt_ends_bb_p(ptr noundef %1645) #18
  %1647 = icmp eq i8 %1646, 0
  %1648 = load i32, ptr %1645, align 8
  br i1 %1647, label %1651, label %1649

1649:                                             ; preds = %1643
  %1650 = or i32 %1648, 512
  br label %1785

1651:                                             ; preds = %1643
  %1652 = and i32 %1648, 255
  %1653 = icmp eq i32 %1652, 16
  br i1 %1653, label %1654, label %1665

1654:                                             ; preds = %1651
  %1655 = getelementptr i8, ptr %1645, i64 40
  %1656 = load ptr, ptr %1655, align 8, !tbaa !16
  %1657 = call zeroext i8 @is_gimple_reg(ptr noundef %1656) #18
  %1658 = icmp eq i8 %1657, 0
  br i1 %1658, label %1665, label %1659

1659:                                             ; preds = %1654
  %1660 = load ptr, ptr %1655, align 8, !tbaa !16
  %1661 = getelementptr inbounds %struct.tree_common, ptr %1660, i64 0, i32 2
  %1662 = load ptr, ptr %1661, align 8, !tbaa !16
  %1663 = load i64, ptr %1662, align 8
  %1664 = trunc i64 %1663 to i16
  switch i16 %1664, label %1665 [
    i16 6, label %1782
    i16 7, label %1782
    i16 8, label %1782
    i16 10, label %1782
    i16 12, label %1782
  ]

1665:                                             ; preds = %1659, %1654, %1651
  %1666 = load i32, ptr %1645, align 8
  %1667 = trunc i32 %1666 to i8
  switch i8 %1667, label %1736 [
    i8 6, label %1668
    i8 8, label %1668
  ]

1668:                                             ; preds = %1665, %1665
  %1669 = call ptr @gimple_get_lhs(ptr noundef nonnull %1645) #18
  %1670 = icmp eq ptr %1669, null
  br i1 %1670, label %1741, label %1671

1671:                                             ; preds = %1668
  %1672 = load i64, ptr %1669, align 8
  %1673 = and i64 %1672, 65535
  %1674 = icmp eq i64 %1673, 141
  br i1 %1674, label %1675, label %1741

1675:                                             ; preds = %1671
  %1676 = getelementptr inbounds %struct.tree_common, ptr %1669, i64 0, i32 2
  %1677 = load ptr, ptr %1676, align 8, !tbaa !16
  %1678 = load i64, ptr %1677, align 8
  %1679 = trunc i64 %1678 to i16
  switch i16 %1679, label %1741 [
    i16 6, label %1680
    i16 7, label %1680
    i16 8, label %1680
    i16 10, label %1680
    i16 12, label %1680
  ]

1680:                                             ; preds = %1675, %1675, %1675, %1675, %1675
  %1681 = load i32, ptr %1645, align 8
  %1682 = and i32 %1681, 255
  %1683 = icmp eq i32 %1682, 8
  br i1 %1683, label %1684, label %1727

1684:                                             ; preds = %1680
  %1685 = load i32, ptr getelementptr inbounds ([0 x i32], ptr @gss_for_code_, i64 0, i64 8), align 4, !tbaa !16
  %1686 = zext i32 %1685 to i64
  %1687 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %1686
  %1688 = load i64, ptr %1687, align 8, !tbaa !36
  %1689 = icmp eq i64 %1688, 0
  br i1 %1689, label %1690, label %1691

1690:                                             ; preds = %1684
  call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1622, ptr noundef nonnull @.str.28) #18
  br label %1691

1691:                                             ; preds = %1690, %1684
  %1692 = getelementptr inbounds i8, ptr %1645, i64 %1688
  %1693 = getelementptr inbounds ptr, ptr %1692, i64 1
  %1694 = load ptr, ptr %1693, align 8, !tbaa !5
  %1695 = load i64, ptr %1694, align 8
  %1696 = and i64 %1695, 65535
  %1697 = icmp eq i64 %1696, 121
  br i1 %1697, label %1698, label %1727

1698:                                             ; preds = %1691
  %1699 = getelementptr inbounds %struct.tree_exp, ptr %1694, i64 0, i32 3
  %1700 = load ptr, ptr %1699, align 8, !tbaa !16
  %1701 = icmp eq ptr %1700, null
  br i1 %1701, label %1727, label %1702

1702:                                             ; preds = %1698
  %1703 = load i32, ptr %1645, align 8
  %1704 = and i32 %1703, 255
  %1705 = add nsw i32 %1704, -1
  %1706 = icmp ult i32 %1705, 9
  call void @llvm.assume(i1 %1706)
  %1707 = zext i32 %1704 to i64
  %1708 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %1707
  %1709 = load i32, ptr %1708, align 4, !tbaa !16
  %1710 = zext i32 %1709 to i64
  %1711 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %1710
  %1712 = load i64, ptr %1711, align 8, !tbaa !36
  %1713 = icmp eq i64 %1712, 0
  br i1 %1713, label %1714, label %1715

1714:                                             ; preds = %1702
  call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1622, ptr noundef nonnull @.str.28) #18
  br label %1715

1715:                                             ; preds = %1714, %1702
  %1716 = getelementptr inbounds i8, ptr %1645, i64 %1712
  %1717 = getelementptr inbounds ptr, ptr %1716, i64 1
  %1718 = load ptr, ptr %1717, align 8, !tbaa !5
  %1719 = load i64, ptr %1718, align 8
  %1720 = and i64 %1719, 65535
  %1721 = icmp eq i64 %1720, 121
  call void @llvm.assume(i1 %1721)
  %1722 = getelementptr inbounds %struct.tree_exp, ptr %1718, i64 0, i32 3
  %1723 = load ptr, ptr %1722, align 8, !tbaa !16
  %1724 = getelementptr inbounds %struct.tree_decl_minimal, ptr %1723, i64 0, i32 1
  %1725 = load i32, ptr %1724, align 8, !tbaa !16
  %1726 = icmp ult i32 %1725, 2
  br i1 %1726, label %1782, label %1727

1727:                                             ; preds = %1715, %1698, %1691, %1680
  %1728 = load i32, ptr %1645, align 8
  %1729 = and i32 %1728, 254
  %1730 = add nsw i32 %1729, -10
  %1731 = icmp ult i32 %1730, -4
  br i1 %1731, label %1782, label %1732

1732:                                             ; preds = %1727
  %1733 = getelementptr inbounds %struct.gimple_statement_with_memory_ops_base, ptr %1645, i64 0, i32 2
  %1734 = load ptr, ptr %1733, align 8, !tbaa !16
  %1735 = icmp eq ptr %1734, null
  br i1 %1735, label %1782, label %1741

1736:                                             ; preds = %1665
  %1737 = and i32 %1666, 255
  %1738 = add nsw i32 %1737, -1
  %1739 = and i32 %1738, -5
  %1740 = icmp eq i32 %1739, 0
  br i1 %1740, label %1782, label %1741

1741:                                             ; preds = %1736, %1732, %1675, %1671, %1668
  %1742 = load i32, ptr %1645, align 8
  %1743 = and i32 %1742, 255
  %1744 = add nsw i32 %1743, -10
  %1745 = icmp ult i32 %1744, -9
  br i1 %1745, label %1779, label %1746

1746:                                             ; preds = %1741
  %1747 = getelementptr inbounds %struct.gimple_statement_with_ops_base, ptr %1645, i64 0, i32 1
  %1748 = load ptr, ptr %1747, align 8, !tbaa !16
  %1749 = icmp eq ptr %1748, null
  br i1 %1749, label %1779, label %1750

1750:                                             ; preds = %1746
  %1751 = and i32 %1742, 254
  %1752 = add nsw i32 %1751, -10
  %1753 = icmp ult i32 %1752, -4
  br i1 %1753, label %1761, label %1754

1754:                                             ; preds = %1750
  %1755 = getelementptr inbounds %struct.gimple_statement_with_memory_ops_base, ptr %1645, i64 0, i32 1
  %1756 = load ptr, ptr %1755, align 8, !tbaa !16
  %1757 = icmp eq ptr %1756, null
  br i1 %1757, label %1761, label %1758

1758:                                             ; preds = %1754
  %1759 = load ptr, ptr %1748, align 8, !tbaa !123
  %1760 = icmp eq ptr %1759, null
  br i1 %1760, label %1779, label %1761

1761:                                             ; preds = %1758, %1754, %1750
  %1762 = phi ptr [ %1748, %1750 ], [ %1748, %1754 ], [ %1759, %1758 ]
  br label %1763

1763:                                             ; preds = %1761, %1775
  %1764 = phi ptr [ %1768, %1775 ], [ %1762, %1761 ]
  %1765 = getelementptr inbounds %struct.def_optype_d, ptr %1764, i64 0, i32 1
  %1766 = load ptr, ptr %1765, align 8, !tbaa !125
  %1767 = load ptr, ptr %1766, align 8, !tbaa !5
  %1768 = load ptr, ptr %1764, align 8, !tbaa !123
  %1769 = call fastcc ptr @get_value_range(ptr noundef %1767)
  store i32 3, ptr %1769, align 8, !tbaa !23
  %1770 = getelementptr inbounds %struct.value_range_d, ptr %1769, i64 0, i32 1
  %1771 = getelementptr inbounds %struct.value_range_d, ptr %1769, i64 0, i32 3
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %1770, i8 0, i64 16, i1 false)
  %1772 = load ptr, ptr %1771, align 8, !tbaa !26
  %1773 = icmp eq ptr %1772, null
  br i1 %1773, label %1775, label %1774

1774:                                             ; preds = %1763
  call void @bitmap_clear(ptr noundef nonnull %1772) #18
  br label %1775

1775:                                             ; preds = %1774, %1763
  %1776 = icmp eq ptr %1768, null
  br i1 %1776, label %1777, label %1763, !llvm.loop !126

1777:                                             ; preds = %1775
  %1778 = load i32, ptr %1645, align 8
  br label %1779

1779:                                             ; preds = %1777, %1758, %1746, %1741
  %1780 = phi i32 [ %1778, %1777 ], [ %1742, %1758 ], [ %1742, %1746 ], [ %1742, %1741 ]
  %1781 = and i32 %1780, -513
  br label %1785

1782:                                             ; preds = %1736, %1732, %1727, %1715, %1659, %1659, %1659, %1659, %1659
  %1783 = load i32, ptr %1645, align 8
  %1784 = or i32 %1783, 512
  br label %1785

1785:                                             ; preds = %1782, %1779, %1649
  %1786 = phi i32 [ %1781, %1779 ], [ %1784, %1782 ], [ %1650, %1649 ]
  store i32 %1786, ptr %1645, align 8
  %1787 = getelementptr inbounds %struct.gimple_seq_node_d, ptr %1644, i64 0, i32 2
  %1788 = load ptr, ptr %1787, align 8, !tbaa !105
  %1789 = icmp eq ptr %1788, null
  br i1 %1789, label %1502, label %1643, !llvm.loop !127

1790:                                             ; preds = %1502, %1489
  call void @ssa_propagate(ptr noundef nonnull @vrp_visit_stmt, ptr noundef nonnull @vrp_visit_phi_node) #18
  %1791 = load ptr, ptr @dump_file, align 8, !tbaa !5
  %1792 = icmp eq ptr %1791, null
  br i1 %1792, label %1798, label %1793

1793:                                             ; preds = %1790
  %1794 = call i64 @fwrite(ptr nonnull @.str.53, i64 26, i64 1, ptr nonnull %1791)
  %1795 = load ptr, ptr @dump_file, align 8, !tbaa !5
  call void @dump_all_value_ranges(ptr noundef %1795)
  %1796 = load ptr, ptr @dump_file, align 8, !tbaa !5
  %1797 = call i32 @fputc(i32 10, ptr %1796)
  br label %1798

1798:                                             ; preds = %1793, %1790
  %1799 = load ptr, ptr @cfun, align 8, !tbaa !5
  %1800 = getelementptr inbounds %struct.function, ptr %1799, i64 0, i32 3
  %1801 = load ptr, ptr %1800, align 8, !tbaa !40
  %1802 = getelementptr inbounds %struct.gimple_df, ptr %1801, i64 0, i32 2
  %1803 = load ptr, ptr %1802, align 8, !tbaa !41
  %1804 = icmp eq ptr %1803, null
  br i1 %1804, label %1807, label %1805

1805:                                             ; preds = %1798
  %1806 = load i32, ptr %1803, align 8, !tbaa !46
  br label %1807

1807:                                             ; preds = %1805, %1798
  %1808 = phi i32 [ %1806, %1805 ], [ 0, %1798 ]
  %1809 = zext i32 %1808 to i64
  %1810 = call ptr @xcalloc(i64 noundef %1809, i64 noundef 16) #18
  br label %1811

1811:                                             ; preds = %1850, %1807
  %1812 = phi i64 [ 0, %1807 ], [ %1852, %1850 ]
  %1813 = phi i8 [ 0, %1807 ], [ %1851, %1850 ]
  %1814 = load ptr, ptr @cfun, align 8, !tbaa !5
  %1815 = getelementptr inbounds %struct.function, ptr %1814, i64 0, i32 3
  %1816 = load ptr, ptr %1815, align 8, !tbaa !40
  %1817 = getelementptr inbounds %struct.gimple_df, ptr %1816, i64 0, i32 2
  %1818 = load ptr, ptr %1817, align 8, !tbaa !41
  %1819 = icmp eq ptr %1818, null
  br i1 %1819, label %1822, label %1820

1820:                                             ; preds = %1811
  %1821 = load i32, ptr %1818, align 8, !tbaa !46
  br label %1822

1822:                                             ; preds = %1820, %1811
  %1823 = phi i32 [ %1821, %1820 ], [ 0, %1811 ]
  %1824 = zext i32 %1823 to i64
  %1825 = icmp ult i64 %1812, %1824
  br i1 %1825, label %1826, label %1853

1826:                                             ; preds = %1822
  %1827 = load ptr, ptr @vr_value, align 8, !tbaa !5
  %1828 = getelementptr inbounds ptr, ptr %1827, i64 %1812
  %1829 = load ptr, ptr %1828, align 8, !tbaa !5
  %1830 = icmp eq ptr %1829, null
  br i1 %1830, label %1850, label %1831

1831:                                             ; preds = %1826
  %1832 = load i32, ptr %1829, align 8, !tbaa !23
  %1833 = icmp eq i32 %1832, 1
  br i1 %1833, label %1834, label %1850

1834:                                             ; preds = %1831
  %1835 = getelementptr inbounds %struct.value_range_d, ptr %1829, i64 0, i32 1
  %1836 = load ptr, ptr %1835, align 8, !tbaa !25
  %1837 = getelementptr inbounds %struct.value_range_d, ptr %1829, i64 0, i32 2
  %1838 = load ptr, ptr %1837, align 8, !tbaa !31
  %1839 = icmp eq ptr %1836, %1838
  br i1 %1839, label %1840, label %1850

1840:                                             ; preds = %1834
  %1841 = call zeroext i8 @is_gimple_min_invariant(ptr noundef %1836) #18
  %1842 = icmp eq i8 %1841, 0
  br i1 %1842, label %1850, label %1843

1843:                                             ; preds = %1840
  %1844 = load ptr, ptr @vr_value, align 8, !tbaa !5
  %1845 = getelementptr inbounds ptr, ptr %1844, i64 %1812
  %1846 = load ptr, ptr %1845, align 8, !tbaa !5
  %1847 = getelementptr inbounds %struct.value_range_d, ptr %1846, i64 0, i32 1
  %1848 = load ptr, ptr %1847, align 8, !tbaa !25
  %1849 = getelementptr inbounds %struct.prop_value_d, ptr %1810, i64 %1812, i32 1
  store ptr %1848, ptr %1849, align 8, !tbaa !128
  br label %1850

1850:                                             ; preds = %1843, %1840, %1834, %1831, %1826
  %1851 = phi i8 [ 1, %1843 ], [ %1813, %1840 ], [ %1813, %1834 ], [ %1813, %1831 ], [ %1813, %1826 ]
  %1852 = add nuw nsw i64 %1812, 1
  br label %1811, !llvm.loop !130

1853:                                             ; preds = %1822
  %1854 = icmp eq i8 %1813, 0
  br i1 %1854, label %1855, label %1856

1855:                                             ; preds = %1853
  call void @free(ptr noundef %1810)
  br label %1856

1856:                                             ; preds = %1855, %1853
  %1857 = phi ptr [ %1810, %1853 ], [ null, %1855 ]
  %1858 = call zeroext i8 @substitute_and_fold(ptr noundef %1857, ptr noundef nonnull @vrp_fold_stmt) #18
  %1859 = load i32, ptr @warn_array_bounds, align 4, !tbaa !20
  %1860 = icmp eq i32 %1859, 0
  br i1 %1860, label %2053, label %1861

1861:                                             ; preds = %1856
  %1862 = load ptr, ptr @cfun, align 8, !tbaa !5
  %1863 = getelementptr inbounds %struct.function, ptr %1862, i64 0, i32 1
  %1864 = load ptr, ptr %1863, align 8, !tbaa !65
  %1865 = load ptr, ptr %1864, align 8, !tbaa !115
  %1866 = getelementptr inbounds %struct.basic_block_def, ptr %1865, i64 0, i32 6
  %1867 = load ptr, ptr %1866, align 8, !tbaa !116
  %1868 = getelementptr inbounds %struct.control_flow_graph, ptr %1864, i64 0, i32 1
  %1869 = load ptr, ptr %1868, align 8, !tbaa !117
  %1870 = icmp eq ptr %1867, %1869
  br i1 %1870, label %2053, label %1871

1871:                                             ; preds = %1861
  %1872 = getelementptr inbounds %struct.walk_stmt_info, ptr %3, i64 0, i32 1
  br label %1873

1873:                                             ; preds = %2044, %1871
  %1874 = phi ptr [ %1867, %1871 ], [ %2046, %2044 ]
  %1875 = icmp eq ptr %1874, null
  br i1 %1875, label %1901, label %1876

1876:                                             ; preds = %1873, %1899
  %1877 = phi i32 [ %1900, %1899 ], [ 0, %1873 ]
  %1878 = phi i8 [ %1895, %1899 ], [ 0, %1873 ]
  %1879 = load ptr, ptr %1874, align 8, !tbaa !5
  %1880 = icmp eq ptr %1879, null
  br i1 %1880, label %1883, label %1881

1881:                                             ; preds = %1876
  %1882 = load i32, ptr %1879, align 8, !tbaa !76
  br label %1883

1883:                                             ; preds = %1881, %1876
  %1884 = phi i32 [ %1882, %1881 ], [ 0, %1876 ]
  %1885 = icmp eq i32 %1884, %1877
  br i1 %1885, label %1902, label %1886

1886:                                             ; preds = %1883
  %1887 = zext i32 %1877 to i64
  %1888 = getelementptr inbounds %struct.VEC_edge_base, ptr %1879, i64 0, i32 2, i64 %1887
  %1889 = load ptr, ptr %1888, align 8, !tbaa !5
  %1890 = getelementptr inbounds %struct.edge_def, ptr %1889, i64 0, i32 7
  %1891 = load i32, ptr %1890, align 8, !tbaa !108
  %1892 = lshr i32 %1891, 12
  %1893 = trunc i32 %1892 to i8
  %1894 = and i8 %1893, 1
  %1895 = or i8 %1894, %1878
  %1896 = load i32, ptr %1879, align 8, !tbaa !76
  %1897 = icmp ult i32 %1877, %1896
  br i1 %1897, label %1899, label %1898

1898:                                             ; preds = %1886
  call void @fancy_abort(ptr noundef nonnull @.str.35, i32 noundef 738, ptr noundef nonnull @.str.28) #18
  br label %1899

1899:                                             ; preds = %1898, %1886
  %1900 = add i32 %1877, 1
  br label %1876, !llvm.loop !131

1901:                                             ; preds = %1873
  call void @fancy_abort(ptr noundef nonnull @.str.35, i32 noundef 687, ptr noundef nonnull @.str.28) #18
  br label %2044

1902:                                             ; preds = %1883
  %1903 = icmp eq i8 %1878, 0
  br i1 %1903, label %2044, label %1904

1904:                                             ; preds = %1902
  %1905 = getelementptr inbounds %struct.basic_block_def, ptr %1874, i64 0, i32 13
  %1906 = load i32, ptr %1905, align 8, !tbaa !85, !noalias !132
  %1907 = and i32 %1906, 512
  %1908 = icmp eq i32 %1907, 0
  br i1 %1908, label %1909, label %2044

1909:                                             ; preds = %1904
  %1910 = getelementptr inbounds %struct.basic_block_def, ptr %1874, i64 0, i32 7
  %1911 = load ptr, ptr %1910, align 8, !tbaa !16, !noalias !132
  %1912 = icmp eq ptr %1911, null
  br i1 %1912, label %2044, label %1913

1913:                                             ; preds = %1909
  %1914 = load ptr, ptr %1911, align 8, !tbaa !89, !noalias !132
  %1915 = icmp eq ptr %1914, null
  br i1 %1915, label %2044, label %1916

1916:                                             ; preds = %1913
  %1917 = load ptr, ptr %1914, align 8, !tbaa !91, !noalias !132
  %1918 = icmp eq ptr %1917, null
  br i1 %1918, label %2044, label %1919

1919:                                             ; preds = %1916, %2040
  %1920 = phi ptr [ %2042, %2040 ], [ %1917, %1916 ]
  %1921 = load ptr, ptr %1920, align 8, !tbaa !51
  call void @llvm.lifetime.start.p0(i64 56, ptr nonnull %3) #18
  %1922 = getelementptr i8, ptr %1921, i64 8
  %1923 = load i32, ptr %1922, align 8, !tbaa !16
  %1924 = icmp eq i32 %1923, 0
  br i1 %1924, label %2040, label %1925

1925:                                             ; preds = %1919
  %1926 = load i32, ptr %1921, align 8
  %1927 = and i32 %1926, 255
  %1928 = icmp eq i32 %1927, 8
  br i1 %1928, label %1929, label %2037

1929:                                             ; preds = %1925
  %1930 = getelementptr i8, ptr %1921, i64 12
  %1931 = load i32, ptr %1930, align 4, !tbaa !16
  %1932 = add i32 %1931, -3
  %1933 = zext i32 %1932 to i64
  %1934 = icmp eq i32 %1932, 0
  br i1 %1934, label %2040, label %1935

1935:                                             ; preds = %1929, %2034
  %1936 = phi i64 [ %2035, %2034 ], [ 0, %1929 ]
  %1937 = add nuw nsw i64 %1936, 3
  %1938 = load i32, ptr %1921, align 8
  %1939 = and i32 %1938, 255
  %1940 = add nsw i32 %1939, -10
  %1941 = icmp ult i32 %1940, -9
  br i1 %1941, label %1956, label %1942

1942:                                             ; preds = %1935
  %1943 = zext i32 %1939 to i64
  %1944 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %1943
  %1945 = load i32, ptr %1944, align 4, !tbaa !16
  %1946 = zext i32 %1945 to i64
  %1947 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %1946
  %1948 = load i64, ptr %1947, align 8, !tbaa !36
  %1949 = icmp eq i64 %1948, 0
  br i1 %1949, label %1950, label %1951

1950:                                             ; preds = %1942
  call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1622, ptr noundef nonnull @.str.28) #18
  br label %1951

1951:                                             ; preds = %1950, %1942
  %1952 = getelementptr inbounds i8, ptr %1921, i64 %1948
  %1953 = and i64 %1937, 4294967295
  %1954 = getelementptr inbounds ptr, ptr %1952, i64 %1953
  %1955 = load ptr, ptr %1954, align 8, !tbaa !5
  br label %1956

1956:                                             ; preds = %1951, %1935
  %1957 = phi ptr [ %1955, %1951 ], [ null, %1935 ]
  %1958 = load i32, ptr %1922, align 8, !tbaa !16
  br label %1959

1959:                                             ; preds = %2020, %1956
  %1960 = phi ptr [ %1957, %1956 ], [ %2021, %2020 ]
  %1961 = load i64, ptr %1960, align 8
  %1962 = trunc i64 %1961 to i16
  switch i16 %1962, label %2034 [
    i16 141, label %1963
    i16 121, label %2022
  ]

1963:                                             ; preds = %1959
  %1964 = getelementptr inbounds %struct.tree_ssa_name, ptr %1960, i64 0, i32 2
  %1965 = load ptr, ptr %1964, align 8, !tbaa !16
  %1966 = load i32, ptr %1965, align 8
  %1967 = and i32 %1966, 255
  %1968 = icmp eq i32 %1967, 6
  br i1 %1968, label %1969, label %2034

1969:                                             ; preds = %1963
  %1970 = trunc i32 %1966 to i8
  switch i8 %1970, label %1973 [
    i8 6, label %1971
    i8 1, label %1971
    i8 8, label %1974
  ]

1971:                                             ; preds = %1969, %1969
  %1972 = lshr i32 %1966, 16
  br label %1974

1973:                                             ; preds = %1969
  call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1446, ptr noundef nonnull @.str.28) #18
  br label %1974

1974:                                             ; preds = %1973, %1971, %1969
  %1975 = phi i32 [ %1972, %1971 ], [ 0, %1973 ], [ 59, %1969 ]
  %1976 = zext i32 %1975 to i64
  %1977 = getelementptr inbounds [0 x i8], ptr @gimple_rhs_class_table, i64 0, i64 %1976
  %1978 = load i8, ptr %1977, align 1, !tbaa !16
  %1979 = icmp eq i8 %1978, 3
  br i1 %1979, label %1980, label %2034

1980:                                             ; preds = %1974
  %1981 = load i32, ptr %1965, align 8
  %1982 = and i32 %1981, 255
  %1983 = add nsw i32 %1982, -1
  %1984 = icmp ult i32 %1983, 9
  call void @llvm.assume(i1 %1984)
  %1985 = zext i32 %1982 to i64
  %1986 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %1985
  %1987 = load i32, ptr %1986, align 4, !tbaa !16
  %1988 = zext i32 %1987 to i64
  %1989 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %1988
  %1990 = load i64, ptr %1989, align 8, !tbaa !36
  %1991 = icmp eq i64 %1990, 0
  br i1 %1991, label %1992, label %1993

1992:                                             ; preds = %1980
  call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1622, ptr noundef nonnull @.str.28) #18
  br label %1993

1993:                                             ; preds = %1992, %1980
  %1994 = getelementptr inbounds i8, ptr %1965, i64 %1990
  %1995 = getelementptr inbounds ptr, ptr %1994, i64 1
  %1996 = load ptr, ptr %1995, align 8, !tbaa !5
  %1997 = load i64, ptr %1996, align 8
  %1998 = and i64 %1997, 65535
  %1999 = getelementptr inbounds [0 x i8], ptr @gimple_rhs_class_table, i64 0, i64 %1998
  %2000 = load i8, ptr %1999, align 1, !tbaa !16
  %2001 = icmp eq i8 %2000, 3
  br i1 %2001, label %2002, label %2034

2002:                                             ; preds = %1993
  %2003 = load i32, ptr %1965, align 8
  %2004 = and i32 %2003, 255
  %2005 = add nsw i32 %2004, -10
  %2006 = icmp ult i32 %2005, -9
  br i1 %2006, label %2020, label %2007

2007:                                             ; preds = %2002
  %2008 = zext i32 %2004 to i64
  %2009 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %2008
  %2010 = load i32, ptr %2009, align 4, !tbaa !16
  %2011 = zext i32 %2010 to i64
  %2012 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %2011
  %2013 = load i64, ptr %2012, align 8, !tbaa !36
  %2014 = icmp eq i64 %2013, 0
  br i1 %2014, label %2015, label %2016

2015:                                             ; preds = %2007
  call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1622, ptr noundef nonnull @.str.28) #18
  br label %2016

2016:                                             ; preds = %2015, %2007
  %2017 = getelementptr inbounds i8, ptr %1965, i64 %2013
  %2018 = getelementptr inbounds ptr, ptr %2017, i64 1
  %2019 = load ptr, ptr %2018, align 8, !tbaa !5
  br label %2020

2020:                                             ; preds = %2016, %2002
  %2021 = phi ptr [ %2019, %2016 ], [ null, %2002 ]
  br label %1959

2022:                                             ; preds = %1959, %2033
  %2023 = phi i64 [ %2031, %2033 ], [ %1961, %1959 ]
  %2024 = phi ptr [ %2030, %2033 ], [ %1960, %1959 ]
  %2025 = and i64 %2023, 65535
  %2026 = icmp eq i64 %2025, 45
  br i1 %2026, label %2027, label %2028

2027:                                             ; preds = %2022
  call fastcc void @check_array_ref(i32 noundef %1958, ptr noundef nonnull %2024, i8 noundef zeroext 1)
  br label %2028

2028:                                             ; preds = %2027, %2022
  %2029 = getelementptr inbounds %struct.tree_exp, ptr %2024, i64 0, i32 3
  %2030 = load ptr, ptr %2029, align 8, !tbaa !16
  %2031 = load i64, ptr %2030, align 8
  %2032 = trunc i64 %2031 to i16
  switch i16 %2032, label %2034 [
    i16 42, label %2033
    i16 41, label %2033
    i16 45, label %2033
    i16 46, label %2033
    i16 118, label %2033
    i16 43, label %2033
    i16 44, label %2033
  ]

2033:                                             ; preds = %2028, %2028, %2028, %2028, %2028, %2028, %2028
  br label %2022, !llvm.loop !135

2034:                                             ; preds = %1993, %1974, %1963, %1959, %2028
  %2035 = add nuw nsw i64 %1936, 1
  %2036 = icmp eq i64 %2035, %1933
  br i1 %2036, label %2040, label %1935, !llvm.loop !136

2037:                                             ; preds = %1925
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(56) %3, i8 0, i64 56, i1 false)
  store ptr %1922, ptr %1872, align 8, !tbaa !137
  %2038 = load ptr, ptr %1920, align 8, !tbaa !51
  %2039 = call ptr @walk_gimple_op(ptr noundef %2038, ptr noundef nonnull @check_array_bounds, ptr noundef nonnull %3) #18
  br label %2040

2040:                                             ; preds = %2034, %2037, %1929, %1919
  call void @llvm.lifetime.end.p0(i64 56, ptr nonnull %3) #18
  %2041 = getelementptr inbounds %struct.gimple_seq_node_d, ptr %1920, i64 0, i32 2
  %2042 = load ptr, ptr %2041, align 8, !tbaa !105
  %2043 = icmp eq ptr %2042, null
  br i1 %2043, label %2044, label %1919, !llvm.loop !139

2044:                                             ; preds = %2040, %1916, %1913, %1909, %1904, %1902, %1901
  %2045 = getelementptr inbounds %struct.basic_block_def, ptr %1874, i64 0, i32 6
  %2046 = load ptr, ptr %2045, align 8, !tbaa !116
  %2047 = load ptr, ptr @cfun, align 8, !tbaa !5
  %2048 = getelementptr inbounds %struct.function, ptr %2047, i64 0, i32 1
  %2049 = load ptr, ptr %2048, align 8, !tbaa !65
  %2050 = getelementptr inbounds %struct.control_flow_graph, ptr %2049, i64 0, i32 1
  %2051 = load ptr, ptr %2050, align 8, !tbaa !117
  %2052 = icmp eq ptr %2046, %2051
  br i1 %2052, label %2053, label %1873, !llvm.loop !140

2053:                                             ; preds = %2044, %1861, %1856
  call void @calculate_dominance_info(i32 noundef 1) #18
  %2054 = call zeroext i8 @mark_dfs_back_edges() #18
  %2055 = load ptr, ptr @to_remove_edges, align 8
  %2056 = icmp eq ptr %2055, null
  br i1 %2056, label %2109, label %2057

2057:                                             ; preds = %2053
  %2058 = load i32, ptr %2055, align 8, !tbaa !76
  %2059 = icmp eq i32 %2058, 0
  br i1 %2059, label %2109, label %2060

2060:                                             ; preds = %2057
  %2061 = zext i32 %2058 to i64
  %2062 = and i64 %2061, 3
  %2063 = icmp ult i32 %2058, 4
  br i1 %2063, label %2095, label %2064

2064:                                             ; preds = %2060
  %2065 = and i64 %2061, 4294967292
  br label %2066

2066:                                             ; preds = %2066, %2064
  %2067 = phi i64 [ 0, %2064 ], [ %2092, %2066 ]
  %2068 = phi i64 [ 0, %2064 ], [ %2093, %2066 ]
  %2069 = getelementptr inbounds %struct.VEC_edge_base, ptr %2055, i64 0, i32 2, i64 %2067
  %2070 = load ptr, ptr %2069, align 8, !tbaa !5
  %2071 = getelementptr inbounds %struct.edge_def, ptr %2070, i64 0, i32 7
  %2072 = load i32, ptr %2071, align 8, !tbaa !108
  %2073 = or i32 %2072, 32
  store i32 %2073, ptr %2071, align 8, !tbaa !108
  %2074 = or i64 %2067, 1
  %2075 = getelementptr inbounds %struct.VEC_edge_base, ptr %2055, i64 0, i32 2, i64 %2074
  %2076 = load ptr, ptr %2075, align 8, !tbaa !5
  %2077 = getelementptr inbounds %struct.edge_def, ptr %2076, i64 0, i32 7
  %2078 = load i32, ptr %2077, align 8, !tbaa !108
  %2079 = or i32 %2078, 32
  store i32 %2079, ptr %2077, align 8, !tbaa !108
  %2080 = or i64 %2067, 2
  %2081 = getelementptr inbounds %struct.VEC_edge_base, ptr %2055, i64 0, i32 2, i64 %2080
  %2082 = load ptr, ptr %2081, align 8, !tbaa !5
  %2083 = getelementptr inbounds %struct.edge_def, ptr %2082, i64 0, i32 7
  %2084 = load i32, ptr %2083, align 8, !tbaa !108
  %2085 = or i32 %2084, 32
  store i32 %2085, ptr %2083, align 8, !tbaa !108
  %2086 = or i64 %2067, 3
  %2087 = getelementptr inbounds %struct.VEC_edge_base, ptr %2055, i64 0, i32 2, i64 %2086
  %2088 = load ptr, ptr %2087, align 8, !tbaa !5
  %2089 = getelementptr inbounds %struct.edge_def, ptr %2088, i64 0, i32 7
  %2090 = load i32, ptr %2089, align 8, !tbaa !108
  %2091 = or i32 %2090, 32
  store i32 %2091, ptr %2089, align 8, !tbaa !108
  %2092 = add nuw nsw i64 %2067, 4
  %2093 = add i64 %2068, 4
  %2094 = icmp eq i64 %2093, %2065
  br i1 %2094, label %2095, label %2066

2095:                                             ; preds = %2066, %2060
  %2096 = phi i64 [ 0, %2060 ], [ %2092, %2066 ]
  %2097 = icmp eq i64 %2062, 0
  br i1 %2097, label %2109, label %2098

2098:                                             ; preds = %2095, %2098
  %2099 = phi i64 [ %2106, %2098 ], [ %2096, %2095 ]
  %2100 = phi i64 [ %2107, %2098 ], [ 0, %2095 ]
  %2101 = getelementptr inbounds %struct.VEC_edge_base, ptr %2055, i64 0, i32 2, i64 %2099
  %2102 = load ptr, ptr %2101, align 8, !tbaa !5
  %2103 = getelementptr inbounds %struct.edge_def, ptr %2102, i64 0, i32 7
  %2104 = load i32, ptr %2103, align 8, !tbaa !108
  %2105 = or i32 %2104, 32
  store i32 %2105, ptr %2103, align 8, !tbaa !108
  %2106 = add nuw nsw i64 %2099, 1
  %2107 = add i64 %2100, 1
  %2108 = icmp eq i64 %2107, %2062
  br i1 %2108, label %2109, label %2098, !llvm.loop !141

2109:                                             ; preds = %2095, %2098, %2057, %2053
  %2110 = call ptr @vec_heap_p_reserve_exact(ptr noundef null, i32 noundef 20) #18
  store ptr %2110, ptr @stack, align 8, !tbaa !5
  %2111 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 13), align 8, !tbaa !5
  %2112 = call ptr @gimple_build_cond(i32 noundef 101, ptr noundef %2111, ptr noundef %2111, ptr noundef null, ptr noundef null) #18
  %2113 = load ptr, ptr @cfun, align 8, !tbaa !5
  %2114 = getelementptr inbounds %struct.function, ptr %2113, i64 0, i32 1
  %2115 = load ptr, ptr %2114, align 8, !tbaa !65
  %2116 = load ptr, ptr %2115, align 8, !tbaa !115
  %2117 = getelementptr inbounds %struct.basic_block_def, ptr %2116, i64 0, i32 6
  %2118 = load ptr, ptr %2117, align 8, !tbaa !116
  %2119 = getelementptr inbounds %struct.control_flow_graph, ptr %2115, i64 0, i32 1
  %2120 = load ptr, ptr %2119, align 8, !tbaa !117
  %2121 = icmp eq ptr %2118, %2120
  br i1 %2121, label %2368, label %2122

2122:                                             ; preds = %2109, %2359
  %2123 = phi ptr [ %2361, %2359 ], [ %2118, %2109 ]
  %2124 = call zeroext i8 @potentially_threadable_block(ptr noundef %2123) #18
  %2125 = icmp eq i8 %2124, 0
  br i1 %2125, label %2359, label %2126

2126:                                             ; preds = %2122
  %2127 = getelementptr inbounds %struct.basic_block_def, ptr %2123, i64 0, i32 13
  %2128 = load i32, ptr %2127, align 8, !tbaa !85, !noalias !142
  %2129 = and i32 %2128, 512
  %2130 = icmp eq i32 %2129, 0
  call void @llvm.assume(i1 %2130)
  %2131 = getelementptr inbounds %struct.basic_block_def, ptr %2123, i64 0, i32 7
  %2132 = load ptr, ptr %2131, align 8, !tbaa !16, !noalias !142, !nonnull !145, !noundef !145
  %2133 = load ptr, ptr %2132, align 8, !tbaa !89, !noalias !142, !nonnull !145, !noundef !145
  %2134 = getelementptr inbounds %struct.gimple_seq_d, ptr %2133, i64 0, i32 1
  %2135 = load ptr, ptr %2134, align 8, !tbaa !146, !noalias !142
  %2136 = load ptr, ptr %2135, align 8, !tbaa !51
  %2137 = load i32, ptr %2136, align 8
  %2138 = and i32 %2137, 255
  %2139 = icmp eq i32 %2138, 1
  br i1 %2139, label %2140, label %2359

2140:                                             ; preds = %2126
  %2141 = load i32, ptr getelementptr inbounds ([0 x i32], ptr @gss_for_code_, i64 0, i64 1), align 4, !tbaa !16
  %2142 = zext i32 %2141 to i64
  %2143 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %2142
  %2144 = load i64, ptr %2143, align 8, !tbaa !36
  %2145 = icmp eq i64 %2144, 0
  br i1 %2145, label %2146, label %2147

2146:                                             ; preds = %2140
  call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1622, ptr noundef nonnull @.str.28) #18
  br label %2147

2147:                                             ; preds = %2146, %2140
  %2148 = getelementptr inbounds i8, ptr %2136, i64 %2144
  %2149 = load ptr, ptr %2148, align 8, !tbaa !5
  %2150 = load i64, ptr %2149, align 8
  %2151 = and i64 %2150, 65535
  %2152 = icmp eq i64 %2151, 141
  br i1 %2152, label %2153, label %2359

2153:                                             ; preds = %2147
  %2154 = load i32, ptr %2136, align 8
  %2155 = and i32 %2154, 255
  %2156 = add nsw i32 %2155, -1
  %2157 = icmp ult i32 %2156, 9
  call void @llvm.assume(i1 %2157)
  %2158 = zext i32 %2155 to i64
  %2159 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %2158
  %2160 = load i32, ptr %2159, align 4, !tbaa !16
  %2161 = zext i32 %2160 to i64
  %2162 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %2161
  %2163 = load i64, ptr %2162, align 8, !tbaa !36
  %2164 = icmp eq i64 %2163, 0
  br i1 %2164, label %2165, label %2167

2165:                                             ; preds = %2153
  call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1622, ptr noundef nonnull @.str.28) #18
  %2166 = load i32, ptr %2136, align 8
  br label %2167

2167:                                             ; preds = %2165, %2153
  %2168 = phi i32 [ %2166, %2165 ], [ %2154, %2153 ]
  %2169 = getelementptr inbounds i8, ptr %2136, i64 %2163
  %2170 = load ptr, ptr %2169, align 8, !tbaa !5
  %2171 = getelementptr inbounds %struct.tree_common, ptr %2170, i64 0, i32 2
  %2172 = load ptr, ptr %2171, align 8, !tbaa !16
  %2173 = load i64, ptr %2172, align 8
  %2174 = and i64 %2173, 65535
  %2175 = icmp eq i64 %2174, 6
  br i1 %2175, label %2220, label %2176

2176:                                             ; preds = %2167
  %2177 = and i32 %2168, 255
  %2178 = add nsw i32 %2177, -1
  %2179 = icmp ult i32 %2178, 9
  call void @llvm.assume(i1 %2179)
  %2180 = zext i32 %2177 to i64
  %2181 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %2180
  %2182 = load i32, ptr %2181, align 4, !tbaa !16
  %2183 = zext i32 %2182 to i64
  %2184 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %2183
  %2185 = load i64, ptr %2184, align 8, !tbaa !36
  %2186 = icmp eq i64 %2185, 0
  br i1 %2186, label %2187, label %2189

2187:                                             ; preds = %2176
  call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1622, ptr noundef nonnull @.str.28) #18
  %2188 = load i32, ptr %2136, align 8
  br label %2189

2189:                                             ; preds = %2187, %2176
  %2190 = phi i32 [ %2188, %2187 ], [ %2168, %2176 ]
  %2191 = getelementptr inbounds i8, ptr %2136, i64 %2185
  %2192 = load ptr, ptr %2191, align 8, !tbaa !5
  %2193 = getelementptr inbounds %struct.tree_common, ptr %2192, i64 0, i32 2
  %2194 = load ptr, ptr %2193, align 8, !tbaa !16
  %2195 = load i64, ptr %2194, align 8
  %2196 = and i64 %2195, 65535
  %2197 = icmp eq i64 %2196, 7
  br i1 %2197, label %2220, label %2198

2198:                                             ; preds = %2189
  %2199 = and i32 %2190, 255
  %2200 = add nsw i32 %2199, -1
  %2201 = icmp ult i32 %2200, 9
  call void @llvm.assume(i1 %2201)
  %2202 = zext i32 %2199 to i64
  %2203 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %2202
  %2204 = load i32, ptr %2203, align 4, !tbaa !16
  %2205 = zext i32 %2204 to i64
  %2206 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %2205
  %2207 = load i64, ptr %2206, align 8, !tbaa !36
  %2208 = icmp eq i64 %2207, 0
  br i1 %2208, label %2209, label %2210

2209:                                             ; preds = %2198
  call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1622, ptr noundef nonnull @.str.28) #18
  br label %2210

2210:                                             ; preds = %2209, %2198
  %2211 = getelementptr inbounds i8, ptr %2136, i64 %2207
  %2212 = load ptr, ptr %2211, align 8, !tbaa !5
  %2213 = getelementptr inbounds %struct.tree_common, ptr %2212, i64 0, i32 2
  %2214 = load ptr, ptr %2213, align 8, !tbaa !16
  %2215 = load i64, ptr %2214, align 8
  %2216 = and i64 %2215, 65535
  %2217 = icmp eq i64 %2216, 8
  br i1 %2217, label %2218, label %2359

2218:                                             ; preds = %2210
  %2219 = load i32, ptr %2136, align 8
  br label %2220

2220:                                             ; preds = %2218, %2189, %2167
  %2221 = phi i32 [ %2219, %2218 ], [ %2190, %2189 ], [ %2168, %2167 ]
  %2222 = and i32 %2221, 255
  %2223 = add nsw i32 %2222, -1
  %2224 = icmp ult i32 %2223, 9
  call void @llvm.assume(i1 %2224)
  %2225 = zext i32 %2222 to i64
  %2226 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %2225
  %2227 = load i32, ptr %2226, align 4, !tbaa !16
  %2228 = zext i32 %2227 to i64
  %2229 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %2228
  %2230 = load i64, ptr %2229, align 8, !tbaa !36
  %2231 = icmp eq i64 %2230, 0
  br i1 %2231, label %2232, label %2234

2232:                                             ; preds = %2220
  call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1622, ptr noundef nonnull @.str.28) #18
  %2233 = load i32, ptr %2136, align 8
  br label %2234

2234:                                             ; preds = %2232, %2220
  %2235 = phi i32 [ %2233, %2232 ], [ %2221, %2220 ]
  %2236 = getelementptr inbounds i8, ptr %2136, i64 %2230
  %2237 = getelementptr inbounds ptr, ptr %2236, i64 1
  %2238 = load ptr, ptr %2237, align 8, !tbaa !5
  %2239 = load i64, ptr %2238, align 8
  %2240 = and i64 %2239, 65535
  %2241 = icmp eq i64 %2240, 141
  br i1 %2241, label %2265, label %2242

2242:                                             ; preds = %2234
  %2243 = and i32 %2235, 255
  %2244 = add nsw i32 %2243, -10
  %2245 = icmp ult i32 %2244, -9
  br i1 %2245, label %2259, label %2246

2246:                                             ; preds = %2242
  %2247 = zext i32 %2243 to i64
  %2248 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %2247
  %2249 = load i32, ptr %2248, align 4, !tbaa !16
  %2250 = zext i32 %2249 to i64
  %2251 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %2250
  %2252 = load i64, ptr %2251, align 8, !tbaa !36
  %2253 = icmp eq i64 %2252, 0
  br i1 %2253, label %2254, label %2255

2254:                                             ; preds = %2246
  call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1622, ptr noundef nonnull @.str.28) #18
  br label %2255

2255:                                             ; preds = %2254, %2246
  %2256 = getelementptr inbounds i8, ptr %2136, i64 %2252
  %2257 = getelementptr inbounds ptr, ptr %2256, i64 1
  %2258 = load ptr, ptr %2257, align 8, !tbaa !5
  br label %2259

2259:                                             ; preds = %2255, %2242
  %2260 = phi ptr [ %2258, %2255 ], [ null, %2242 ]
  %2261 = call zeroext i8 @is_gimple_min_invariant(ptr noundef %2260) #18
  %2262 = icmp eq i8 %2261, 0
  br i1 %2262, label %2359, label %2263

2263:                                             ; preds = %2259
  %2264 = load i32, ptr %2136, align 8
  br label %2265

2265:                                             ; preds = %2263, %2234
  %2266 = phi i32 [ %2264, %2263 ], [ %2235, %2234 ]
  %2267 = and i32 %2266, 255
  %2268 = add nsw i32 %2267, -1
  %2269 = icmp ult i32 %2268, 9
  call void @llvm.assume(i1 %2269)
  %2270 = zext i32 %2267 to i64
  %2271 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %2270
  %2272 = load i32, ptr %2271, align 4, !tbaa !16
  %2273 = zext i32 %2272 to i64
  %2274 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %2273
  %2275 = load i64, ptr %2274, align 8, !tbaa !36
  %2276 = icmp eq i64 %2275, 0
  br i1 %2276, label %2277, label %2278

2277:                                             ; preds = %2265
  call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1622, ptr noundef nonnull @.str.28) #18
  br label %2278

2278:                                             ; preds = %2277, %2265
  %2279 = getelementptr inbounds i8, ptr %2136, i64 %2275
  %2280 = getelementptr inbounds ptr, ptr %2279, i64 1
  %2281 = load ptr, ptr %2280, align 8, !tbaa !5
  %2282 = getelementptr inbounds %struct.tree_common, ptr %2281, i64 0, i32 2
  %2283 = load ptr, ptr %2282, align 8, !tbaa !16
  %2284 = load i64, ptr %2283, align 8
  %2285 = and i64 %2284, 65535
  %2286 = icmp eq i64 %2285, 6
  br i1 %2286, label %2331, label %2287

2287:                                             ; preds = %2278
  %2288 = load i32, ptr %2136, align 8
  %2289 = and i32 %2288, 255
  %2290 = add nsw i32 %2289, -1
  %2291 = icmp ult i32 %2290, 9
  call void @llvm.assume(i1 %2291)
  %2292 = zext i32 %2289 to i64
  %2293 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %2292
  %2294 = load i32, ptr %2293, align 4, !tbaa !16
  %2295 = zext i32 %2294 to i64
  %2296 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %2295
  %2297 = load i64, ptr %2296, align 8, !tbaa !36
  %2298 = icmp eq i64 %2297, 0
  br i1 %2298, label %2299, label %2300

2299:                                             ; preds = %2287
  call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1622, ptr noundef nonnull @.str.28) #18
  br label %2300

2300:                                             ; preds = %2299, %2287
  %2301 = getelementptr inbounds i8, ptr %2136, i64 %2297
  %2302 = getelementptr inbounds ptr, ptr %2301, i64 1
  %2303 = load ptr, ptr %2302, align 8, !tbaa !5
  %2304 = getelementptr inbounds %struct.tree_common, ptr %2303, i64 0, i32 2
  %2305 = load ptr, ptr %2304, align 8, !tbaa !16
  %2306 = load i64, ptr %2305, align 8
  %2307 = and i64 %2306, 65535
  %2308 = icmp eq i64 %2307, 7
  br i1 %2308, label %2331, label %2309

2309:                                             ; preds = %2300
  %2310 = load i32, ptr %2136, align 8
  %2311 = and i32 %2310, 255
  %2312 = add nsw i32 %2311, -1
  %2313 = icmp ult i32 %2312, 9
  call void @llvm.assume(i1 %2313)
  %2314 = zext i32 %2311 to i64
  %2315 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %2314
  %2316 = load i32, ptr %2315, align 4, !tbaa !16
  %2317 = zext i32 %2316 to i64
  %2318 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %2317
  %2319 = load i64, ptr %2318, align 8, !tbaa !36
  %2320 = icmp eq i64 %2319, 0
  br i1 %2320, label %2321, label %2322

2321:                                             ; preds = %2309
  call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1622, ptr noundef nonnull @.str.28) #18
  br label %2322

2322:                                             ; preds = %2321, %2309
  %2323 = getelementptr inbounds i8, ptr %2136, i64 %2319
  %2324 = getelementptr inbounds ptr, ptr %2323, i64 1
  %2325 = load ptr, ptr %2324, align 8, !tbaa !5
  %2326 = getelementptr inbounds %struct.tree_common, ptr %2325, i64 0, i32 2
  %2327 = load ptr, ptr %2326, align 8, !tbaa !16
  %2328 = load i64, ptr %2327, align 8
  %2329 = and i64 %2328, 65535
  %2330 = icmp eq i64 %2329, 8
  br i1 %2330, label %2331, label %2359

2331:                                             ; preds = %2322, %2300, %2278
  br label %2332

2332:                                             ; preds = %2331, %2357
  %2333 = phi i32 [ %2358, %2357 ], [ 0, %2331 ]
  %2334 = load ptr, ptr %2123, align 8, !tbaa !5
  %2335 = icmp eq ptr %2334, null
  br i1 %2335, label %2338, label %2336

2336:                                             ; preds = %2332
  %2337 = load i32, ptr %2334, align 8, !tbaa !76
  br label %2338

2338:                                             ; preds = %2336, %2332
  %2339 = phi i32 [ %2337, %2336 ], [ 0, %2332 ]
  %2340 = icmp eq i32 %2339, %2333
  br i1 %2340, label %2359, label %2341

2341:                                             ; preds = %2338
  %2342 = zext i32 %2333 to i64
  %2343 = getelementptr inbounds %struct.VEC_edge_base, ptr %2334, i64 0, i32 2, i64 %2342
  %2344 = load ptr, ptr %2343, align 8, !tbaa !5
  %2345 = getelementptr inbounds %struct.edge_def, ptr %2344, i64 0, i32 7
  %2346 = load i32, ptr %2345, align 8, !tbaa !108
  %2347 = and i32 %2346, 46
  %2348 = icmp eq i32 %2347, 0
  br i1 %2348, label %2349, label %2352

2349:                                             ; preds = %2341
  call void @thread_across_edge(ptr noundef %2112, ptr noundef nonnull %2344, i8 noundef zeroext 1, ptr noundef nonnull @stack, ptr noundef nonnull @simplify_stmt_for_jump_threading) #18
  %2350 = load ptr, ptr %2123, align 8, !tbaa !5
  %2351 = icmp eq ptr %2350, null
  br i1 %2351, label %2356, label %2352

2352:                                             ; preds = %2349, %2341
  %2353 = phi ptr [ %2350, %2349 ], [ %2334, %2341 ]
  %2354 = load i32, ptr %2353, align 8, !tbaa !76
  %2355 = icmp ult i32 %2333, %2354
  br i1 %2355, label %2357, label %2356

2356:                                             ; preds = %2352, %2349
  call void @fancy_abort(ptr noundef nonnull @.str.35, i32 noundef 738, ptr noundef nonnull @.str.28) #18
  br label %2357

2357:                                             ; preds = %2356, %2352
  %2358 = add i32 %2333, 1
  br label %2332, !llvm.loop !147

2359:                                             ; preds = %2338, %2322, %2259, %2210, %2147, %2126, %2122
  %2360 = getelementptr inbounds %struct.basic_block_def, ptr %2123, i64 0, i32 6
  %2361 = load ptr, ptr %2360, align 8, !tbaa !116
  %2362 = load ptr, ptr @cfun, align 8, !tbaa !5
  %2363 = getelementptr inbounds %struct.function, ptr %2362, i64 0, i32 1
  %2364 = load ptr, ptr %2363, align 8, !tbaa !65
  %2365 = getelementptr inbounds %struct.control_flow_graph, ptr %2364, i64 0, i32 1
  %2366 = load ptr, ptr %2365, align 8, !tbaa !117
  %2367 = icmp eq ptr %2361, %2366
  br i1 %2367, label %2368, label %2122, !llvm.loop !148

2368:                                             ; preds = %2359, %2109
  %2369 = phi ptr [ %2113, %2109 ], [ %2362, %2359 ]
  br label %2370

2370:                                             ; preds = %2368, %2398
  %2371 = phi ptr [ %2399, %2398 ], [ %2369, %2368 ]
  %2372 = phi i64 [ %2400, %2398 ], [ 0, %2368 ]
  %2373 = getelementptr inbounds %struct.function, ptr %2371, i64 0, i32 3
  %2374 = load ptr, ptr %2373, align 8, !tbaa !40
  %2375 = getelementptr inbounds %struct.gimple_df, ptr %2374, i64 0, i32 2
  %2376 = load ptr, ptr %2375, align 8, !tbaa !41
  %2377 = icmp eq ptr %2376, null
  br i1 %2377, label %2380, label %2378

2378:                                             ; preds = %2370
  %2379 = load i32, ptr %2376, align 8, !tbaa !46
  br label %2380

2380:                                             ; preds = %2378, %2370
  %2381 = phi i32 [ %2379, %2378 ], [ 0, %2370 ]
  %2382 = zext i32 %2381 to i64
  %2383 = icmp ult i64 %2372, %2382
  br i1 %2383, label %2384, label %2401

2384:                                             ; preds = %2380
  %2385 = load ptr, ptr @vr_value, align 8, !tbaa !5
  %2386 = getelementptr inbounds ptr, ptr %2385, i64 %2372
  %2387 = load ptr, ptr %2386, align 8, !tbaa !5
  %2388 = icmp eq ptr %2387, null
  br i1 %2388, label %2398, label %2389

2389:                                             ; preds = %2384
  %2390 = getelementptr inbounds %struct.value_range_d, ptr %2387, i64 0, i32 3
  %2391 = load ptr, ptr %2390, align 8, !tbaa !26
  call void @bitmap_obstack_free(ptr noundef %2391) #18
  %2392 = load ptr, ptr @vr_value, align 8, !tbaa !5
  %2393 = getelementptr inbounds ptr, ptr %2392, i64 %2372
  %2394 = load ptr, ptr %2393, align 8, !tbaa !5
  %2395 = getelementptr inbounds %struct.value_range_d, ptr %2394, i64 0, i32 3
  store ptr null, ptr %2395, align 8, !tbaa !26
  %2396 = load ptr, ptr %2393, align 8, !tbaa !5
  call void @free(ptr noundef %2396)
  %2397 = load ptr, ptr @cfun, align 8, !tbaa !5
  br label %2398

2398:                                             ; preds = %2389, %2384
  %2399 = phi ptr [ %2371, %2384 ], [ %2397, %2389 ]
  %2400 = add nuw nsw i64 %2372, 1
  br label %2370, !llvm.loop !149

2401:                                             ; preds = %2380
  call void @free(ptr noundef %1857)
  %2402 = load ptr, ptr @vr_value, align 8, !tbaa !5
  call void @free(ptr noundef %2402)
  %2403 = load ptr, ptr @vr_phi_edge_counts, align 8, !tbaa !5
  call void @free(ptr noundef %2403)
  store ptr null, ptr @vr_value, align 8, !tbaa !5
  store ptr null, ptr @vr_phi_edge_counts, align 8, !tbaa !5
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %1) #18
  %2404 = load ptr, ptr @cfun, align 8, !tbaa !5
  %2405 = getelementptr inbounds %struct.function, ptr %2404, i64 0, i32 1
  %2406 = load ptr, ptr %2405, align 8, !tbaa !65
  %2407 = load ptr, ptr %2406, align 8, !tbaa !115
  %2408 = getelementptr inbounds %struct.basic_block_def, ptr %2407, i64 0, i32 6
  %2409 = load ptr, ptr %2408, align 8, !tbaa !116
  %2410 = getelementptr inbounds %struct.control_flow_graph, ptr %2406, i64 0, i32 1
  %2411 = load ptr, ptr %2410, align 8, !tbaa !117
  %2412 = icmp eq ptr %2409, %2411
  br i1 %2412, label %2645, label %2413

2413:                                             ; preds = %2401
  %2414 = getelementptr inbounds i8, ptr %1, i64 8
  %2415 = getelementptr inbounds i8, ptr %1, i64 16
  %2416 = getelementptr inbounds %struct.immediate_use_iterator_d, ptr %2, i64 0, i32 1
  %2417 = getelementptr inbounds %struct.immediate_use_iterator_d, ptr %2, i64 0, i32 2
  %2418 = getelementptr inbounds %struct.immediate_use_iterator_d, ptr %2, i64 0, i32 3
  %2419 = getelementptr inbounds %struct.immediate_use_iterator_d, ptr %2, i64 0, i32 2, i32 1
  br label %2431

2420:                                             ; preds = %2642
  %2421 = load ptr, ptr @cfun, align 8, !tbaa !5
  br label %2422

2422:                                             ; preds = %2446, %2445, %2420
  %2423 = phi ptr [ %2421, %2420 ], [ %2432, %2446 ], [ %2432, %2445 ]
  %2424 = getelementptr inbounds %struct.basic_block_def, ptr %2433, i64 0, i32 6
  %2425 = load ptr, ptr %2424, align 8, !tbaa !116
  %2426 = getelementptr inbounds %struct.function, ptr %2423, i64 0, i32 1
  %2427 = load ptr, ptr %2426, align 8, !tbaa !65
  %2428 = getelementptr inbounds %struct.control_flow_graph, ptr %2427, i64 0, i32 1
  %2429 = load ptr, ptr %2428, align 8, !tbaa !117
  %2430 = icmp eq ptr %2425, %2429
  br i1 %2430, label %2645, label %2431, !llvm.loop !150

2431:                                             ; preds = %2422, %2413
  %2432 = phi ptr [ %2404, %2413 ], [ %2423, %2422 ]
  %2433 = phi ptr [ %2409, %2413 ], [ %2425, %2422 ]
  %2434 = getelementptr inbounds %struct.basic_block_def, ptr %2433, i64 0, i32 13
  %2435 = load i32, ptr %2434, align 8, !tbaa !85, !noalias !151
  %2436 = and i32 %2435, 512
  %2437 = icmp eq i32 %2436, 0
  br i1 %2437, label %2438, label %2445

2438:                                             ; preds = %2431
  %2439 = getelementptr inbounds %struct.basic_block_def, ptr %2433, i64 0, i32 7
  %2440 = load ptr, ptr %2439, align 8, !tbaa !16, !noalias !151
  %2441 = icmp eq ptr %2440, null
  br i1 %2441, label %2445, label %2442

2442:                                             ; preds = %2438
  %2443 = load ptr, ptr %2440, align 8, !tbaa !89, !noalias !151
  %2444 = icmp eq ptr %2443, null
  br i1 %2444, label %2445, label %2446

2445:                                             ; preds = %2442, %2438, %2431
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %1, i8 0, i64 16, i1 false)
  store ptr %2433, ptr %2415, align 8, !tbaa.struct !102
  br label %2422

2446:                                             ; preds = %2442
  %2447 = load ptr, ptr %2443, align 8, !tbaa !91, !noalias !151
  store ptr %2447, ptr %1, align 8, !tbaa.struct !100
  store ptr %2443, ptr %2414, align 8, !tbaa.struct !101
  store ptr %2433, ptr %2415, align 8, !tbaa.struct !102
  %2448 = icmp eq ptr %2447, null
  br i1 %2448, label %2422, label %2449

2449:                                             ; preds = %2446, %2642
  %2450 = phi ptr [ %2643, %2642 ], [ %2447, %2446 ]
  %2451 = load ptr, ptr %2450, align 8, !tbaa !51
  %2452 = load i32, ptr %2451, align 8
  %2453 = and i32 %2452, 255
  %2454 = icmp eq i32 %2453, 6
  br i1 %2454, label %2455, label %2638

2455:                                             ; preds = %2449
  %2456 = trunc i32 %2452 to i8
  switch i8 %2456, label %2459 [
    i8 6, label %2457
    i8 1, label %2457
    i8 8, label %2460
  ]

2457:                                             ; preds = %2455, %2455
  %2458 = lshr i32 %2452, 16
  br label %2460

2459:                                             ; preds = %2455
  call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1446, ptr noundef nonnull @.str.28) #18
  br label %2460

2460:                                             ; preds = %2459, %2457, %2455
  %2461 = phi i32 [ %2458, %2457 ], [ 0, %2459 ], [ 59, %2455 ]
  %2462 = zext i32 %2461 to i64
  %2463 = getelementptr inbounds [0 x i8], ptr @gimple_rhs_class_table, i64 0, i64 %2462
  %2464 = load i8, ptr %2463, align 1, !tbaa !16
  %2465 = icmp eq i8 %2464, 3
  br i1 %2465, label %2466, label %2486

2466:                                             ; preds = %2460
  %2467 = load i32, ptr %2451, align 8
  %2468 = and i32 %2467, 255
  %2469 = add nsw i32 %2468, -1
  %2470 = icmp ult i32 %2469, 9
  call void @llvm.assume(i1 %2470)
  %2471 = zext i32 %2468 to i64
  %2472 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %2471
  %2473 = load i32, ptr %2472, align 4, !tbaa !16
  %2474 = zext i32 %2473 to i64
  %2475 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %2474
  %2476 = load i64, ptr %2475, align 8, !tbaa !36
  %2477 = icmp eq i64 %2476, 0
  br i1 %2477, label %2478, label %2479

2478:                                             ; preds = %2466
  call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1622, ptr noundef nonnull @.str.28) #18
  br label %2479

2479:                                             ; preds = %2478, %2466
  %2480 = getelementptr inbounds i8, ptr %2451, i64 %2476
  %2481 = getelementptr inbounds ptr, ptr %2480, i64 1
  %2482 = load ptr, ptr %2481, align 8, !tbaa !5
  %2483 = load i64, ptr %2482, align 8
  %2484 = trunc i64 %2483 to i32
  %2485 = and i32 %2484, 65535
  br label %2486

2486:                                             ; preds = %2479, %2460
  %2487 = phi i32 [ %2485, %2479 ], [ %2461, %2460 ]
  %2488 = icmp eq i32 %2487, 148
  br i1 %2488, label %2491, label %2489

2489:                                             ; preds = %2486
  %2490 = load ptr, ptr %1, align 8, !tbaa !49
  br label %2638

2491:                                             ; preds = %2486
  %2492 = load i32, ptr %2451, align 8
  %2493 = and i32 %2492, 255
  %2494 = add nsw i32 %2493, -1
  %2495 = icmp ult i32 %2494, 9
  call void @llvm.assume(i1 %2495)
  %2496 = zext i32 %2493 to i64
  %2497 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %2496
  %2498 = load i32, ptr %2497, align 4, !tbaa !16
  %2499 = zext i32 %2498 to i64
  %2500 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %2499
  %2501 = load i64, ptr %2500, align 8, !tbaa !36
  %2502 = icmp eq i64 %2501, 0
  br i1 %2502, label %2503, label %2504

2503:                                             ; preds = %2491
  call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1622, ptr noundef nonnull @.str.28) #18
  br label %2504

2504:                                             ; preds = %2503, %2491
  %2505 = getelementptr inbounds i8, ptr %2451, i64 %2501
  %2506 = getelementptr inbounds ptr, ptr %2505, i64 1
  %2507 = load ptr, ptr %2506, align 8, !tbaa !5
  %2508 = getelementptr inbounds %struct.tree_exp, ptr %2507, i64 0, i32 3
  %2509 = getelementptr inbounds %struct.tree_exp, ptr %2507, i64 1
  %2510 = load ptr, ptr %2509, align 8, !tbaa !16
  %2511 = call ptr @fold(ptr noundef %2510) #18
  call void @llvm.lifetime.start.p0(i64 56, ptr nonnull %2) #18
  %2512 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 25), align 8, !tbaa !5
  %2513 = icmp eq ptr %2511, %2512
  br i1 %2513, label %2514, label %2515

2514:                                             ; preds = %2504
  call void @fancy_abort(ptr noundef nonnull @.str.27, i32 noundef 5249, ptr noundef nonnull @.str.28) #18
  br label %2515

2515:                                             ; preds = %2514, %2504
  %2516 = load ptr, ptr %2508, align 8, !tbaa !16
  %2517 = freeze ptr %2516
  %2518 = load i32, ptr %2451, align 8
  %2519 = and i32 %2518, 255
  %2520 = add nsw i32 %2519, -1
  %2521 = icmp ult i32 %2520, 9
  call void @llvm.assume(i1 %2521)
  %2522 = zext i32 %2519 to i64
  %2523 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %2522
  %2524 = load i32, ptr %2523, align 4, !tbaa !16
  %2525 = zext i32 %2524 to i64
  %2526 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %2525
  %2527 = load i64, ptr %2526, align 8, !tbaa !36
  %2528 = icmp eq i64 %2527, 0
  br i1 %2528, label %2529, label %2530

2529:                                             ; preds = %2515
  call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1622, ptr noundef nonnull @.str.28) #18
  br label %2530

2530:                                             ; preds = %2529, %2515
  %2531 = getelementptr inbounds i8, ptr %2451, i64 %2527
  %2532 = load ptr, ptr %2531, align 8, !tbaa !5
  %2533 = getelementptr inbounds %struct.tree_ssa_name, ptr %2532, i64 0, i32 5
  store ptr %2533, ptr %2416, align 8, !tbaa !154
  %2534 = getelementptr inbounds %struct.tree_ssa_name, ptr %2532, i64 0, i32 5, i32 1
  %2535 = load ptr, ptr %2534, align 8, !tbaa !96
  store ptr %2535, ptr %2, align 8, !tbaa !156
  %2536 = icmp eq ptr %2535, %2533
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(40) %2417, i8 0, i64 40, i1 false)
  br i1 %2536, label %2636, label %2537

2537:                                             ; preds = %2530
  call fastcc void @link_use_stmts_after(ptr noundef %2535, ptr noundef nonnull %2)
  %2538 = load ptr, ptr %2, align 8, !tbaa !156
  %2539 = load ptr, ptr %2416, align 8, !tbaa !154
  %2540 = icmp eq ptr %2538, %2539
  br i1 %2540, label %2636, label %2541

2541:                                             ; preds = %2537
  %2542 = icmp eq ptr %2517, null
  %2543 = getelementptr inbounds %struct.tree_ssa_name, ptr %2517, i64 0, i32 5
  %2544 = getelementptr inbounds %struct.tree_ssa_name, ptr %2517, i64 0, i32 5, i32 1
  br i1 %2542, label %2545, label %2581

2545:                                             ; preds = %2541, %2560
  %2546 = phi ptr [ %2562, %2560 ], [ %2539, %2541 ]
  %2547 = phi ptr [ %2561, %2560 ], [ %2538, %2541 ]
  %2548 = getelementptr inbounds %struct.ssa_use_operand_d, ptr %2547, i64 0, i32 1
  %2549 = load ptr, ptr %2548, align 8, !tbaa !96
  store ptr %2549, ptr %2418, align 8, !tbaa !157
  %2550 = icmp eq ptr %2547, %2417
  br i1 %2550, label %2553, label %2564

2551:                                             ; preds = %2573
  %2552 = load ptr, ptr %2416, align 8, !tbaa !154
  br label %2553

2553:                                             ; preds = %2551, %2545
  %2554 = phi ptr [ %2552, %2551 ], [ %2546, %2545 ]
  %2555 = load ptr, ptr %2419, align 8, !tbaa !96
  store ptr %2555, ptr %2, align 8, !tbaa !156
  %2556 = icmp eq ptr %2555, %2554
  br i1 %2556, label %2557, label %2560

2557:                                             ; preds = %2553
  %2558 = load ptr, ptr %2417, align 8, !tbaa !158
  %2559 = icmp eq ptr %2558, null
  br i1 %2559, label %2636, label %2631

2560:                                             ; preds = %2553
  call fastcc void @link_use_stmts_after(ptr noundef %2555, ptr noundef nonnull %2)
  %2561 = load ptr, ptr %2, align 8, !tbaa !156
  %2562 = load ptr, ptr %2416, align 8, !tbaa !154
  %2563 = icmp eq ptr %2561, %2562
  br i1 %2563, label %2636, label %2545, !llvm.loop !159

2564:                                             ; preds = %2545, %2578
  %2565 = phi ptr [ %2580, %2578 ], [ %2549, %2545 ]
  %2566 = phi ptr [ %2576, %2578 ], [ %2547, %2545 ]
  %2567 = load ptr, ptr %2566, align 8, !tbaa !158
  %2568 = icmp eq ptr %2567, null
  br i1 %2568, label %2573, label %2569

2569:                                             ; preds = %2564
  %2570 = getelementptr inbounds %struct.ssa_use_operand_d, ptr %2566, i64 0, i32 1
  %2571 = getelementptr inbounds %struct.ssa_use_operand_d, ptr %2567, i64 0, i32 1
  store ptr %2565, ptr %2571, align 8, !tbaa !96
  %2572 = load ptr, ptr %2570, align 8, !tbaa !96
  store ptr %2567, ptr %2572, align 8, !tbaa !158
  store i64 0, ptr %2570, align 8
  br label %2573

2573:                                             ; preds = %2569, %2564
  %2574 = getelementptr inbounds %struct.ssa_use_operand_d, ptr %2566, i64 0, i32 3
  %2575 = load ptr, ptr %2574, align 8, !tbaa !78
  store ptr null, ptr %2575, align 8, !tbaa !5
  store ptr null, ptr %2566, align 8, !tbaa !158
  call void @fancy_abort(ptr noundef nonnull @.str.27, i32 noundef 5258, ptr noundef nonnull @.str.28) #18
  %2576 = load ptr, ptr %2418, align 8, !tbaa !157
  store ptr %2576, ptr %2, align 8, !tbaa !156
  %2577 = icmp eq ptr %2576, %2417
  br i1 %2577, label %2551, label %2578

2578:                                             ; preds = %2573
  %2579 = getelementptr inbounds %struct.ssa_use_operand_d, ptr %2576, i64 0, i32 1
  %2580 = load ptr, ptr %2579, align 8, !tbaa !96
  store ptr %2580, ptr %2418, align 8, !tbaa !157
  br label %2564

2581:                                             ; preds = %2541, %2627
  %2582 = phi ptr [ %2629, %2627 ], [ %2539, %2541 ]
  %2583 = phi ptr [ %2628, %2627 ], [ %2538, %2541 ]
  %2584 = getelementptr inbounds %struct.ssa_use_operand_d, ptr %2583, i64 0, i32 1
  %2585 = load ptr, ptr %2584, align 8, !tbaa !96
  store ptr %2585, ptr %2418, align 8, !tbaa !157
  %2586 = icmp eq ptr %2583, %2417
  br i1 %2586, label %2620, label %2587

2587:                                             ; preds = %2581, %2615
  %2588 = phi ptr [ %2617, %2615 ], [ %2585, %2581 ]
  %2589 = phi ptr [ %2613, %2615 ], [ %2583, %2581 ]
  %2590 = load ptr, ptr %2589, align 8, !tbaa !158
  %2591 = icmp eq ptr %2590, null
  br i1 %2591, label %2596, label %2592

2592:                                             ; preds = %2587
  %2593 = getelementptr inbounds %struct.ssa_use_operand_d, ptr %2589, i64 0, i32 1
  %2594 = getelementptr inbounds %struct.ssa_use_operand_d, ptr %2590, i64 0, i32 1
  store ptr %2588, ptr %2594, align 8, !tbaa !96
  %2595 = load ptr, ptr %2593, align 8, !tbaa !96
  store ptr %2590, ptr %2595, align 8, !tbaa !158
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %2589, i8 0, i64 16, i1 false)
  br label %2596

2596:                                             ; preds = %2592, %2587
  %2597 = getelementptr inbounds %struct.ssa_use_operand_d, ptr %2589, i64 0, i32 3
  %2598 = load ptr, ptr %2597, align 8, !tbaa !78
  store ptr %2517, ptr %2598, align 8, !tbaa !5
  %2599 = load i64, ptr %2517, align 8
  %2600 = and i64 %2599, 65535
  %2601 = icmp eq i64 %2600, 141
  br i1 %2601, label %2603, label %2602

2602:                                             ; preds = %2596
  store ptr null, ptr %2589, align 8, !tbaa !158
  br label %2607

2603:                                             ; preds = %2596
  store ptr %2543, ptr %2589, align 8, !tbaa !158
  %2604 = load ptr, ptr %2544, align 8, !tbaa !96
  %2605 = getelementptr inbounds %struct.ssa_use_operand_d, ptr %2589, i64 0, i32 1
  store ptr %2604, ptr %2605, align 8, !tbaa !96
  %2606 = load ptr, ptr %2544, align 8, !tbaa !96
  store ptr %2589, ptr %2606, align 8, !tbaa !158
  store ptr %2589, ptr %2544, align 8, !tbaa !96
  br label %2607

2607:                                             ; preds = %2603, %2602
  %2608 = load i64, ptr %2517, align 8
  %2609 = and i64 %2608, 65535
  %2610 = icmp eq i64 %2609, 141
  br i1 %2610, label %2612, label %2611

2611:                                             ; preds = %2607
  call void @fancy_abort(ptr noundef nonnull @.str.27, i32 noundef 5258, ptr noundef nonnull @.str.28) #18
  br label %2612

2612:                                             ; preds = %2611, %2607
  %2613 = load ptr, ptr %2418, align 8, !tbaa !157
  store ptr %2613, ptr %2, align 8, !tbaa !156
  %2614 = icmp eq ptr %2613, %2417
  br i1 %2614, label %2618, label %2615

2615:                                             ; preds = %2612
  %2616 = getelementptr inbounds %struct.ssa_use_operand_d, ptr %2613, i64 0, i32 1
  %2617 = load ptr, ptr %2616, align 8, !tbaa !96
  store ptr %2617, ptr %2418, align 8, !tbaa !157
  br label %2587

2618:                                             ; preds = %2612
  %2619 = load ptr, ptr %2416, align 8, !tbaa !154
  br label %2620

2620:                                             ; preds = %2618, %2581
  %2621 = phi ptr [ %2619, %2618 ], [ %2582, %2581 ]
  %2622 = load ptr, ptr %2419, align 8, !tbaa !96
  store ptr %2622, ptr %2, align 8, !tbaa !156
  %2623 = icmp eq ptr %2622, %2621
  br i1 %2623, label %2624, label %2627

2624:                                             ; preds = %2620
  %2625 = load ptr, ptr %2417, align 8, !tbaa !158
  %2626 = icmp eq ptr %2625, null
  br i1 %2626, label %2636, label %2631

2627:                                             ; preds = %2620
  call fastcc void @link_use_stmts_after(ptr noundef %2622, ptr noundef nonnull %2)
  %2628 = load ptr, ptr %2, align 8, !tbaa !156
  %2629 = load ptr, ptr %2416, align 8, !tbaa !154
  %2630 = icmp eq ptr %2628, %2629
  br i1 %2630, label %2636, label %2581, !llvm.loop !159

2631:                                             ; preds = %2624, %2557
  %2632 = phi ptr [ %2558, %2557 ], [ %2625, %2624 ]
  %2633 = phi ptr [ %2554, %2557 ], [ %2621, %2624 ]
  %2634 = getelementptr inbounds %struct.ssa_use_operand_d, ptr %2632, i64 0, i32 1
  store ptr %2633, ptr %2634, align 8, !tbaa !96
  %2635 = load ptr, ptr %2419, align 8, !tbaa !96
  store ptr %2632, ptr %2635, align 8, !tbaa !158
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %2417, i8 0, i64 16, i1 false)
  br label %2636

2636:                                             ; preds = %2627, %2560, %2631, %2624, %2557, %2537, %2530
  call void @gsi_remove(ptr noundef nonnull %1, i8 noundef zeroext 1) #18
  call void @release_defs(ptr noundef nonnull %2451) #18
  call void @llvm.lifetime.end.p0(i64 56, ptr nonnull %2) #18
  %2637 = load ptr, ptr %1, align 8, !tbaa !49
  br label %2642

2638:                                             ; preds = %2489, %2449
  %2639 = phi ptr [ %2490, %2489 ], [ %2450, %2449 ]
  %2640 = getelementptr inbounds %struct.gimple_seq_node_d, ptr %2639, i64 0, i32 2
  %2641 = load ptr, ptr %2640, align 8, !tbaa !105
  store ptr %2641, ptr %1, align 8, !tbaa !49
  br label %2642

2642:                                             ; preds = %2638, %2636
  %2643 = phi ptr [ %2641, %2638 ], [ %2637, %2636 ]
  %2644 = icmp eq ptr %2643, null
  br i1 %2644, label %2420, label %2449, !llvm.loop !160

2645:                                             ; preds = %2422, %2401
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %1) #18
  call void @update_ssa(i32 noundef 2048) #18
  %2646 = call zeroext i8 @thread_through_all_blocks(i8 noundef zeroext 0) #18
  %2647 = load ptr, ptr @stack, align 8, !tbaa !5
  %2648 = icmp eq ptr %2647, null
  br i1 %2648, label %2650, label %2649

2649:                                             ; preds = %2645
  call void @free(ptr noundef nonnull %2647)
  br label %2650

2650:                                             ; preds = %2645, %2649
  store ptr null, ptr @stack, align 8, !tbaa !5
  %2651 = load ptr, ptr @to_remove_edges, align 8
  %2652 = icmp eq ptr %2651, null
  br i1 %2652, label %2659, label %2653

2653:                                             ; preds = %2650, %2663
  %2654 = phi i64 [ %2666, %2663 ], [ 0, %2650 ]
  %2655 = phi ptr [ %2667, %2663 ], [ %2651, %2650 ]
  %2656 = load i32, ptr %2655, align 8, !tbaa !76
  %2657 = zext i32 %2656 to i64
  %2658 = icmp ult i64 %2654, %2657
  br i1 %2658, label %2663, label %2659

2659:                                             ; preds = %2653, %2663, %2650
  %2660 = phi ptr [ null, %2650 ], [ %2655, %2653 ], [ null, %2663 ]
  %2661 = load ptr, ptr @to_update_switch_stmts, align 8
  %2662 = icmp eq ptr %2661, null
  br i1 %2662, label %2761, label %2669

2663:                                             ; preds = %2653
  %2664 = getelementptr inbounds %struct.VEC_edge_base, ptr %2655, i64 0, i32 2, i64 %2654
  %2665 = load ptr, ptr %2664, align 8, !tbaa !5
  call void @remove_edge(ptr noundef %2665) #18
  %2666 = add nuw nsw i64 %2654, 1
  %2667 = load ptr, ptr @to_remove_edges, align 8
  %2668 = icmp eq ptr %2667, null
  br i1 %2668, label %2659, label %2653, !llvm.loop !161

2669:                                             ; preds = %2659, %2751
  %2670 = phi i64 [ %2756, %2751 ], [ 0, %2659 ]
  %2671 = phi ptr [ %2757, %2751 ], [ %2661, %2659 ]
  %2672 = load i32, ptr %2671, align 8, !tbaa !162
  %2673 = zext i32 %2672 to i64
  %2674 = icmp ult i64 %2670, %2673
  br i1 %2674, label %2675, label %2759

2675:                                             ; preds = %2669
  %2676 = getelementptr inbounds %struct.VEC_switch_update_base, ptr %2671, i64 0, i32 2, i64 %2670
  %2677 = getelementptr inbounds %struct.VEC_switch_update_base, ptr %2671, i64 0, i32 2, i64 %2670, i32 1
  %2678 = load ptr, ptr %2677, align 8, !tbaa !164
  %2679 = getelementptr inbounds %struct.tree_vec, ptr %2678, i64 0, i32 1
  %2680 = load i32, ptr %2679, align 8, !tbaa !16
  %2681 = sext i32 %2680 to i64
  %2682 = load ptr, ptr %2676, align 8, !tbaa !166
  %2683 = add i32 %2680, 1
  %2684 = getelementptr inbounds %struct.gimple_statement_base, ptr %2682, i64 0, i32 3
  store i32 %2683, ptr %2684, align 4, !tbaa !16
  %2685 = icmp eq i32 %2680, 0
  br i1 %2685, label %2732, label %2686

2686:                                             ; preds = %2675, %2726
  %2687 = phi i64 [ %2730, %2726 ], [ 0, %2675 ]
  %2688 = load ptr, ptr %2676, align 8, !tbaa !166
  %2689 = trunc i64 %2687 to i32
  %2690 = load ptr, ptr %2677, align 8, !tbaa !164
  %2691 = getelementptr inbounds %struct.tree_vec, ptr %2690, i64 0, i32 2, i64 %2687
  %2692 = load ptr, ptr %2691, align 8, !tbaa !16
  %2693 = getelementptr i8, ptr %2688, i64 12
  %2694 = load i32, ptr %2693, align 4, !tbaa !16
  %2695 = add i32 %2689, 1
  %2696 = icmp ugt i32 %2694, %2695
  br i1 %2696, label %2698, label %2697

2697:                                             ; preds = %2686
  call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 3225, ptr noundef nonnull @.str.28) #18
  br label %2698

2698:                                             ; preds = %2697, %2686
  %2699 = icmp eq ptr %2692, null
  br i1 %2699, label %2705, label %2700

2700:                                             ; preds = %2698
  %2701 = load i64, ptr %2692, align 8
  %2702 = and i64 %2701, 65535
  %2703 = icmp eq i64 %2702, 139
  br i1 %2703, label %2705, label %2704

2704:                                             ; preds = %2700
  call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 3226, ptr noundef nonnull @.str.28) #18
  br label %2705

2705:                                             ; preds = %2704, %2700, %2698
  %2706 = load i32, ptr %2688, align 8
  %2707 = and i32 %2706, 255
  %2708 = add nsw i32 %2707, -10
  %2709 = icmp ult i32 %2708, -9
  br i1 %2709, label %2713, label %2710

2710:                                             ; preds = %2705
  %2711 = load i32, ptr %2693, align 4, !tbaa !16
  %2712 = icmp ugt i32 %2711, %2695
  br i1 %2712, label %2716, label %2713

2713:                                             ; preds = %2710, %2705
  call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1665, ptr noundef nonnull @.str.28) #18
  %2714 = load i32, ptr %2688, align 8
  %2715 = and i32 %2714, 255
  br label %2716

2716:                                             ; preds = %2713, %2710
  %2717 = phi i32 [ %2707, %2710 ], [ %2715, %2713 ]
  %2718 = zext i32 %2717 to i64
  %2719 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %2718
  %2720 = load i32, ptr %2719, align 4, !tbaa !16
  %2721 = zext i32 %2720 to i64
  %2722 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %2721
  %2723 = load i64, ptr %2722, align 8, !tbaa !36
  %2724 = icmp eq i64 %2723, 0
  br i1 %2724, label %2725, label %2726

2725:                                             ; preds = %2716
  call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1622, ptr noundef nonnull @.str.28) #18
  br label %2726

2726:                                             ; preds = %2716, %2725
  %2727 = getelementptr inbounds i8, ptr %2688, i64 %2723
  %2728 = zext i32 %2695 to i64
  %2729 = getelementptr inbounds ptr, ptr %2727, i64 %2728
  store ptr %2692, ptr %2729, align 8, !tbaa !5
  %2730 = add nuw i64 %2687, 1
  %2731 = icmp eq i64 %2730, %2681
  br i1 %2731, label %2732, label %2686, !llvm.loop !167

2732:                                             ; preds = %2726, %2675
  %2733 = load ptr, ptr %2676, align 8, !tbaa !166
  %2734 = getelementptr i8, ptr %2733, i64 12
  %2735 = load i32, ptr %2734, align 4, !tbaa !16
  %2736 = icmp ugt i32 %2735, 1
  br i1 %2736, label %2738, label %2737

2737:                                             ; preds = %2732
  call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 3215, ptr noundef nonnull @.str.28) #18
  br label %2738

2738:                                             ; preds = %2737, %2732
  %2739 = load i32, ptr %2733, align 8
  %2740 = and i32 %2739, 255
  %2741 = add nsw i32 %2740, -1
  %2742 = icmp ult i32 %2741, 9
  call void @llvm.assume(i1 %2742)
  %2743 = zext i32 %2740 to i64
  %2744 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %2743
  %2745 = load i32, ptr %2744, align 4, !tbaa !16
  %2746 = zext i32 %2745 to i64
  %2747 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %2746
  %2748 = load i64, ptr %2747, align 8, !tbaa !36
  %2749 = icmp eq i64 %2748, 0
  br i1 %2749, label %2750, label %2751

2750:                                             ; preds = %2738
  call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1622, ptr noundef nonnull @.str.28) #18
  br label %2751

2751:                                             ; preds = %2750, %2738
  %2752 = getelementptr inbounds i8, ptr %2733, i64 %2748
  %2753 = getelementptr inbounds ptr, ptr %2752, i64 1
  %2754 = load ptr, ptr %2753, align 8, !tbaa !5
  %2755 = getelementptr inbounds %struct.tree_exp, ptr %2754, i64 0, i32 3
  %2756 = add nuw i64 %2670, 1
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %2755, i8 0, i64 16, i1 false)
  %2757 = load ptr, ptr @to_update_switch_stmts, align 8
  %2758 = icmp eq ptr %2757, null
  br i1 %2758, label %2759, label %2669, !llvm.loop !168

2759:                                             ; preds = %2669, %2751
  %2760 = load ptr, ptr @to_remove_edges, align 8
  br label %2761

2761:                                             ; preds = %2759, %2659
  %2762 = phi ptr [ %2760, %2759 ], [ %2660, %2659 ]
  %2763 = icmp eq ptr %2762, null
  br i1 %2763, label %2772, label %2764

2764:                                             ; preds = %2761
  %2765 = load i32, ptr %2762, align 8, !tbaa !76
  %2766 = icmp eq i32 %2765, 0
  br i1 %2766, label %2770, label %2767

2767:                                             ; preds = %2764
  call void @free_dominance_info(i32 noundef 1) #18
  %2768 = load ptr, ptr @to_remove_edges, align 8, !tbaa !5
  %2769 = icmp eq ptr %2768, null
  br i1 %2769, label %2772, label %2770

2770:                                             ; preds = %2764, %2767
  %2771 = phi ptr [ %2768, %2767 ], [ %2762, %2764 ]
  call void @free(ptr noundef nonnull %2771)
  br label %2772

2772:                                             ; preds = %2761, %2767, %2770
  store ptr null, ptr @to_remove_edges, align 8, !tbaa !5
  %2773 = load ptr, ptr @to_update_switch_stmts, align 8, !tbaa !5
  %2774 = icmp eq ptr %2773, null
  br i1 %2774, label %2776, label %2775

2775:                                             ; preds = %2772
  call void @free(ptr noundef nonnull %2773)
  br label %2776

2776:                                             ; preds = %2772, %2775
  store ptr null, ptr @to_update_switch_stmts, align 8, !tbaa !5
  call void @threadedge_finalize_values() #18
  call void @scev_finalize() #18
  call void @loop_optimizer_finalize() #18
  ret i32 0
}

declare ptr @xcalloc(i64 noundef, i64 noundef) local_unnamed_addr #3

declare void @fancy_abort(ptr noundef, i32 noundef, ptr noundef) local_unnamed_addr #3

declare ptr @lookup_attribute(ptr noundef, ptr noundef) local_unnamed_addr #3

declare i32 @compare_tree_int(ptr noundef, i64 noundef) local_unnamed_addr #3

declare ptr @build_int_cst(ptr noundef, i64 noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc void @set_value_range(ptr nocapture noundef %0, i32 noundef %1, ptr noundef %2, ptr noundef %3, ptr noundef %4) unnamed_addr #9 {
  store i32 %1, ptr %0, align 8, !tbaa !23
  %6 = getelementptr inbounds %struct.value_range_d, ptr %0, i64 0, i32 1
  store ptr %2, ptr %6, align 8, !tbaa !25
  %7 = getelementptr inbounds %struct.value_range_d, ptr %0, i64 0, i32 2
  store ptr %3, ptr %7, align 8, !tbaa !31
  %8 = getelementptr inbounds %struct.value_range_d, ptr %0, i64 0, i32 3
  %9 = load ptr, ptr %8, align 8, !tbaa !26
  %10 = icmp eq ptr %9, null
  %11 = icmp ne ptr %4, null
  %12 = and i1 %11, %10
  br i1 %12, label %13, label %15

13:                                               ; preds = %5
  %14 = tail call ptr @bitmap_obstack_alloc_stat(ptr noundef null) #18
  store ptr %14, ptr %8, align 8, !tbaa !26
  br label %15

15:                                               ; preds = %13, %5
  %16 = phi ptr [ %14, %13 ], [ %9, %5 ]
  %17 = icmp eq ptr %16, %4
  br i1 %17, label %24, label %18

18:                                               ; preds = %15
  br i1 %11, label %19, label %23

19:                                               ; preds = %18
  %20 = load ptr, ptr %4, align 8, !tbaa !32
  %21 = icmp eq ptr %20, null
  br i1 %21, label %23, label %22

22:                                               ; preds = %19
  tail call void @bitmap_copy(ptr noundef %16, ptr noundef nonnull %4) #18
  br label %24

23:                                               ; preds = %19, %18
  tail call void @bitmap_clear(ptr noundef %16) #18
  br label %24

24:                                               ; preds = %22, %23, %15
  ret void
}

declare ptr @bitmap_obstack_alloc_stat(ptr noundef) local_unnamed_addr #3

declare void @bitmap_copy(ptr noundef, ptr noundef) local_unnamed_addr #3

declare void @bitmap_clear(ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc i32 @compare_values_warnv(ptr noundef %0, ptr noundef %1, ptr noundef writeonly %2) unnamed_addr #9 {
  %4 = icmp eq ptr %0, %1
  br i1 %4, label %325, label %5

5:                                                ; preds = %3
  %6 = icmp eq ptr %2, null
  br label %7

7:                                                ; preds = %5, %190
  %8 = phi ptr [ %1, %5 ], [ %192, %190 ]
  %9 = phi ptr [ %0, %5 ], [ %191, %190 ]
  %10 = getelementptr inbounds %struct.tree_common, ptr %9, i64 0, i32 2
  %11 = load ptr, ptr %10, align 8, !tbaa !16
  %12 = load i64, ptr %11, align 8
  %13 = trunc i64 %12 to i32
  %14 = and i32 %13, 65535
  %15 = icmp eq i32 %14, 10
  %16 = icmp eq i32 %14, 12
  %17 = or i1 %15, %16
  %18 = getelementptr inbounds %struct.tree_common, ptr %8, i64 0, i32 2
  %19 = load ptr, ptr %18, align 8, !tbaa !16
  %20 = load i64, ptr %19, align 8
  %21 = trunc i64 %20 to i32
  %22 = and i32 %21, 65535
  %23 = icmp eq i32 %22, 10
  %24 = icmp eq i32 %22, 12
  %25 = or i1 %23, %24
  %26 = xor i1 %17, %25
  br i1 %26, label %27, label %29

27:                                               ; preds = %7
  tail call void @fancy_abort(ptr noundef nonnull @.str.27, i32 noundef 1074, ptr noundef nonnull @.str.28) #18
  %28 = load ptr, ptr %10, align 8, !tbaa !16
  br label %29

29:                                               ; preds = %7, %27
  %30 = phi ptr [ %11, %7 ], [ %28, %27 ]
  %31 = tail call ptr @fold_convert_loc(i32 noundef 0, ptr noundef %30, ptr noundef nonnull %8) #18
  %32 = tail call ptr @tree_ssa_strip_useless_type_conversions(ptr noundef %31) #18
  %33 = load i64, ptr %9, align 8
  %34 = trunc i64 %33 to i32
  %35 = and i32 %34, 65535
  %36 = trunc i64 %33 to i16
  switch i16 %36, label %198 [
    i16 141, label %37
    i16 63, label %37
    i16 64, label %37
  ]

37:                                               ; preds = %29, %29, %29
  %38 = load i64, ptr %32, align 8
  %39 = trunc i64 %38 to i16
  switch i16 %39, label %198 [
    i16 141, label %40
    i16 63, label %40
    i16 64, label %40
  ]

40:                                               ; preds = %37, %37, %37
  %41 = icmp eq i32 %35, 141
  br i1 %41, label %90, label %42

42:                                               ; preds = %40
  %43 = getelementptr inbounds %struct.tree_exp, ptr %9, i64 0, i32 3
  %44 = load ptr, ptr %43, align 8, !tbaa !16
  %45 = getelementptr inbounds %struct.tree_exp, ptr %9, i64 1
  %46 = load ptr, ptr %45, align 8, !tbaa !16
  %47 = tail call i32 @tree_int_cst_sgn(ptr noundef %46) #18
  %48 = icmp eq i32 %47, -1
  br i1 %48, label %49, label %90

49:                                               ; preds = %42
  %50 = getelementptr inbounds %struct.tree_common, ptr %46, i64 0, i32 2
  %51 = load ptr, ptr %50, align 8, !tbaa !16
  %52 = load i64, ptr %51, align 8
  %53 = trunc i64 %52 to i32
  %54 = and i32 %53, 65535
  %55 = add nsw i32 %54, -6
  %56 = icmp ult i32 %55, 3
  br i1 %56, label %57, label %83

57:                                               ; preds = %49
  %58 = and i64 %52, 2097152
  %59 = icmp ne i64 %58, 0
  %60 = load i32, ptr @flag_wrapv, align 4
  %61 = icmp ne i32 %60, 0
  %62 = select i1 %59, i1 true, i1 %61
  br i1 %62, label %83, label %63

63:                                               ; preds = %57
  %64 = load i64, ptr %46, align 8
  %65 = and i64 %64, 65535
  %66 = getelementptr inbounds [0 x i32], ptr @tree_code_type, i64 0, i64 %65
  %67 = load i32, ptr %66, align 4, !tbaa !16
  %68 = icmp ne i32 %67, 1
  %69 = and i64 %64, 134217728
  %70 = icmp eq i64 %69, 0
  %71 = or i1 %68, %70
  br i1 %71, label %83, label %72

72:                                               ; preds = %63
  %73 = getelementptr inbounds %struct.tree_type, ptr %51, i64 0, i32 13
  %74 = load ptr, ptr %73, align 8, !tbaa !16
  %75 = icmp eq ptr %74, %46
  br i1 %75, label %325, label %76

76:                                               ; preds = %72
  %77 = icmp eq ptr %74, null
  br i1 %77, label %83, label %78

78:                                               ; preds = %76
  %79 = tail call i32 @operand_equal_p(ptr noundef nonnull %46, ptr noundef nonnull %74, i32 noundef 0) #18
  %80 = icmp eq i32 %79, 0
  br i1 %80, label %81, label %325

81:                                               ; preds = %78
  %82 = load ptr, ptr %50, align 8, !tbaa !16
  br label %83

83:                                               ; preds = %81, %49, %76, %57, %63
  %84 = phi ptr [ %82, %81 ], [ %51, %49 ], [ %51, %76 ], [ %51, %57 ], [ %51, %63 ]
  %85 = tail call ptr @fold_unary_to_constant(i32 noundef 79, ptr noundef %84, ptr noundef nonnull %46) #18
  %86 = icmp eq ptr %85, null
  br i1 %86, label %325, label %87

87:                                               ; preds = %83
  %88 = icmp eq i32 %35, 64
  %89 = select i1 %88, i32 63, i32 64
  br label %90

90:                                               ; preds = %40, %42, %87
  %91 = phi ptr [ %44, %87 ], [ %44, %42 ], [ %9, %40 ]
  %92 = phi ptr [ %85, %87 ], [ %46, %42 ], [ null, %40 ]
  %93 = phi i32 [ %89, %87 ], [ %35, %42 ], [ 141, %40 ]
  %94 = load i64, ptr %32, align 8
  %95 = trunc i64 %94 to i32
  %96 = and i32 %95, 65535
  %97 = icmp eq i32 %96, 141
  br i1 %97, label %146, label %98

98:                                               ; preds = %90
  %99 = getelementptr inbounds %struct.tree_exp, ptr %32, i64 0, i32 3
  %100 = load ptr, ptr %99, align 8, !tbaa !16
  %101 = getelementptr inbounds %struct.tree_exp, ptr %32, i64 1
  %102 = load ptr, ptr %101, align 8, !tbaa !16
  %103 = tail call i32 @tree_int_cst_sgn(ptr noundef %102) #18
  %104 = icmp eq i32 %103, -1
  br i1 %104, label %105, label %146

105:                                              ; preds = %98
  %106 = getelementptr inbounds %struct.tree_common, ptr %102, i64 0, i32 2
  %107 = load ptr, ptr %106, align 8, !tbaa !16
  %108 = load i64, ptr %107, align 8
  %109 = trunc i64 %108 to i32
  %110 = and i32 %109, 65535
  %111 = add nsw i32 %110, -6
  %112 = icmp ult i32 %111, 3
  br i1 %112, label %113, label %139

113:                                              ; preds = %105
  %114 = and i64 %108, 2097152
  %115 = icmp ne i64 %114, 0
  %116 = load i32, ptr @flag_wrapv, align 4
  %117 = icmp ne i32 %116, 0
  %118 = select i1 %115, i1 true, i1 %117
  br i1 %118, label %139, label %119

119:                                              ; preds = %113
  %120 = load i64, ptr %102, align 8
  %121 = and i64 %120, 65535
  %122 = getelementptr inbounds [0 x i32], ptr @tree_code_type, i64 0, i64 %121
  %123 = load i32, ptr %122, align 4, !tbaa !16
  %124 = icmp ne i32 %123, 1
  %125 = and i64 %120, 134217728
  %126 = icmp eq i64 %125, 0
  %127 = or i1 %124, %126
  br i1 %127, label %139, label %128

128:                                              ; preds = %119
  %129 = getelementptr inbounds %struct.tree_type, ptr %107, i64 0, i32 13
  %130 = load ptr, ptr %129, align 8, !tbaa !16
  %131 = icmp eq ptr %130, %102
  br i1 %131, label %325, label %132

132:                                              ; preds = %128
  %133 = icmp eq ptr %130, null
  br i1 %133, label %139, label %134

134:                                              ; preds = %132
  %135 = tail call i32 @operand_equal_p(ptr noundef nonnull %102, ptr noundef nonnull %130, i32 noundef 0) #18
  %136 = icmp eq i32 %135, 0
  br i1 %136, label %137, label %325

137:                                              ; preds = %134
  %138 = load ptr, ptr %106, align 8, !tbaa !16
  br label %139

139:                                              ; preds = %137, %105, %132, %113, %119
  %140 = phi ptr [ %138, %137 ], [ %107, %105 ], [ %107, %132 ], [ %107, %113 ], [ %107, %119 ]
  %141 = tail call ptr @fold_unary_to_constant(i32 noundef 79, ptr noundef %140, ptr noundef nonnull %102) #18
  %142 = icmp eq ptr %141, null
  br i1 %142, label %325, label %143

143:                                              ; preds = %139
  %144 = icmp eq i32 %96, 64
  %145 = select i1 %144, i32 63, i32 64
  br label %146

146:                                              ; preds = %90, %98, %143
  %147 = phi ptr [ %100, %143 ], [ %100, %98 ], [ %32, %90 ]
  %148 = phi ptr [ %141, %143 ], [ %102, %98 ], [ null, %90 ]
  %149 = phi i32 [ %145, %143 ], [ %96, %98 ], [ 141, %90 ]
  %150 = icmp eq ptr %91, %147
  br i1 %150, label %151, label %325

151:                                              ; preds = %146
  %152 = icmp eq i32 %93, 141
  %153 = icmp eq i32 %149, 141
  %154 = and i1 %152, %153
  br i1 %154, label %325, label %155

155:                                              ; preds = %151
  %156 = load ptr, ptr %10, align 8, !tbaa !16
  %157 = load i64, ptr %156, align 8
  %158 = and i64 %157, 2097152
  %159 = icmp eq i64 %158, 0
  %160 = load i32, ptr @flag_wrapv, align 4
  %161 = icmp eq i32 %160, 0
  %162 = select i1 %159, i1 %161, i1 false
  %163 = load i32, ptr @flag_trapv, align 4
  %164 = icmp eq i32 %163, 0
  %165 = select i1 %162, i1 %164, i1 false
  %166 = load i32, ptr @flag_strict_overflow, align 4
  %167 = icmp ne i32 %166, 0
  %168 = select i1 %165, i1 %167, i1 false
  br i1 %168, label %169, label %325

169:                                              ; preds = %155
  br i1 %6, label %181, label %170

170:                                              ; preds = %169
  br i1 %152, label %175, label %171

171:                                              ; preds = %170
  %172 = load i64, ptr %9, align 8
  %173 = and i64 %172, 8388608
  %174 = icmp eq i64 %173, 0
  br i1 %174, label %175, label %185

175:                                              ; preds = %171, %170
  br i1 %153, label %180, label %176

176:                                              ; preds = %175
  %177 = load i64, ptr %32, align 8
  %178 = and i64 %177, 8388608
  %179 = icmp eq i64 %178, 0
  br i1 %179, label %180, label %181

180:                                              ; preds = %176, %175
  store i8 1, ptr %2, align 1, !tbaa !16
  br label %181

181:                                              ; preds = %180, %176, %169
  br i1 %152, label %182, label %185

182:                                              ; preds = %181
  %183 = trunc i32 %149 to i16
  switch i16 %183, label %197 [
    i16 63, label %325
    i16 64, label %184
  ]

184:                                              ; preds = %182
  br label %325

185:                                              ; preds = %171, %181
  %186 = trunc i32 %93 to i16
  switch i16 %186, label %197 [
    i16 63, label %187
    i16 64, label %194
  ]

187:                                              ; preds = %185
  br i1 %153, label %325, label %188

188:                                              ; preds = %187
  %189 = trunc i32 %149 to i16
  switch i16 %189, label %197 [
    i16 63, label %190
    i16 64, label %325
  ]

190:                                              ; preds = %188, %195
  %191 = phi ptr [ %92, %188 ], [ %148, %195 ]
  %192 = phi ptr [ %148, %188 ], [ %92, %195 ]
  %193 = icmp eq ptr %191, %192
  br i1 %193, label %325, label %7

194:                                              ; preds = %185
  br i1 %153, label %325, label %195

195:                                              ; preds = %194
  %196 = trunc i32 %149 to i16
  switch i16 %196, label %197 [
    i16 63, label %325
    i16 64, label %190
  ]

197:                                              ; preds = %188, %185, %195, %182
  tail call void @fancy_abort(ptr noundef nonnull @.str.27, i32 noundef 1190, ptr noundef nonnull @.str.28) #18
  br label %198

198:                                              ; preds = %37, %29, %197
  %199 = tail call zeroext i8 @is_gimple_min_invariant(ptr noundef nonnull %9) #18
  %200 = icmp eq i8 %199, 0
  br i1 %200, label %325, label %201

201:                                              ; preds = %198
  %202 = tail call zeroext i8 @is_gimple_min_invariant(ptr noundef %32) #18
  %203 = icmp eq i8 %202, 0
  br i1 %203, label %325, label %204

204:                                              ; preds = %201
  %205 = load ptr, ptr %10, align 8, !tbaa !16
  %206 = load i64, ptr %205, align 8
  %207 = trunc i64 %206 to i16
  switch i16 %207, label %208 [
    i16 10, label %298
    i16 12, label %298
  ]

208:                                              ; preds = %204
  %209 = load i64, ptr %9, align 8
  %210 = and i64 %209, 134217728
  %211 = icmp eq i64 %210, 0
  br i1 %211, label %212, label %216

212:                                              ; preds = %208
  %213 = load i64, ptr %32, align 8
  %214 = and i64 %213, 134217728
  %215 = icmp eq i64 %214, 0
  br i1 %215, label %296, label %216

216:                                              ; preds = %212, %208
  br i1 %6, label %220, label %217

217:                                              ; preds = %216
  store i8 1, ptr %2, align 1, !tbaa !16
  %218 = load ptr, ptr %10, align 8, !tbaa !16
  %219 = load i64, ptr %218, align 8
  br label %220

220:                                              ; preds = %217, %216
  %221 = phi i64 [ %219, %217 ], [ %206, %216 ]
  %222 = phi ptr [ %218, %217 ], [ %205, %216 ]
  %223 = trunc i64 %221 to i32
  %224 = and i32 %223, 65535
  %225 = add nsw i32 %224, -6
  %226 = icmp ult i32 %225, 3
  br i1 %226, label %227, label %284

227:                                              ; preds = %220
  %228 = and i64 %221, 2097152
  %229 = icmp ne i64 %228, 0
  %230 = load i32, ptr @flag_wrapv, align 4
  %231 = icmp ne i32 %230, 0
  %232 = select i1 %229, i1 true, i1 %231
  br i1 %232, label %284, label %233

233:                                              ; preds = %227
  %234 = load i64, ptr %9, align 8
  %235 = and i64 %234, 65535
  %236 = getelementptr inbounds [0 x i32], ptr @tree_code_type, i64 0, i64 %235
  %237 = load i32, ptr %236, align 4, !tbaa !16
  %238 = icmp ne i32 %237, 1
  %239 = and i64 %234, 134217728
  %240 = icmp eq i64 %239, 0
  %241 = or i1 %238, %240
  br i1 %241, label %284, label %242

242:                                              ; preds = %233
  %243 = getelementptr inbounds %struct.tree_type, ptr %222, i64 0, i32 13
  %244 = load ptr, ptr %243, align 8, !tbaa !16
  %245 = icmp eq ptr %244, %9
  br i1 %245, label %251, label %246

246:                                              ; preds = %242
  %247 = icmp eq ptr %244, null
  br i1 %247, label %284, label %248

248:                                              ; preds = %246
  %249 = tail call i32 @operand_equal_p(ptr noundef nonnull %9, ptr noundef nonnull %244, i32 noundef 0) #18
  %250 = icmp eq i32 %249, 0
  br i1 %250, label %284, label %251

251:                                              ; preds = %242, %248
  %252 = getelementptr inbounds %struct.tree_common, ptr %32, i64 0, i32 2
  %253 = load ptr, ptr %252, align 8, !tbaa !16
  %254 = load i64, ptr %253, align 8
  %255 = trunc i64 %254 to i32
  %256 = and i32 %255, 65535
  %257 = add nsw i32 %256, -6
  %258 = icmp ult i32 %257, 3
  br i1 %258, label %259, label %325

259:                                              ; preds = %251
  %260 = and i64 %254, 2097152
  %261 = icmp ne i64 %260, 0
  %262 = load i32, ptr @flag_wrapv, align 4
  %263 = icmp ne i32 %262, 0
  %264 = select i1 %261, i1 true, i1 %263
  br i1 %264, label %325, label %265

265:                                              ; preds = %259
  %266 = load i64, ptr %32, align 8
  %267 = and i64 %266, 65535
  %268 = getelementptr inbounds [0 x i32], ptr @tree_code_type, i64 0, i64 %267
  %269 = load i32, ptr %268, align 4, !tbaa !16
  %270 = icmp ne i32 %269, 1
  %271 = and i64 %266, 134217728
  %272 = icmp eq i64 %271, 0
  %273 = or i1 %270, %272
  br i1 %273, label %325, label %274

274:                                              ; preds = %265
  %275 = getelementptr inbounds %struct.tree_type, ptr %253, i64 0, i32 13
  %276 = load ptr, ptr %275, align 8, !tbaa !16
  %277 = icmp eq ptr %276, %32
  br i1 %277, label %325, label %278

278:                                              ; preds = %274
  %279 = icmp eq ptr %276, null
  br i1 %279, label %325, label %280

280:                                              ; preds = %278
  %281 = tail call i32 @operand_equal_p(ptr noundef nonnull %32, ptr noundef nonnull %276, i32 noundef 0) #18
  %282 = icmp eq i32 %281, 0
  %283 = sext i1 %282 to i32
  br label %325

284:                                              ; preds = %220, %246, %227, %233, %248
  %285 = tail call fastcc zeroext i8 @is_negative_overflow_infinity(ptr noundef %32), !range !79
  %286 = icmp eq i8 %285, 0
  br i1 %286, label %287, label %325

287:                                              ; preds = %284
  %288 = tail call fastcc zeroext i8 @is_positive_overflow_infinity(ptr noundef nonnull %9), !range !79
  %289 = icmp eq i8 %288, 0
  %290 = tail call fastcc zeroext i8 @is_positive_overflow_infinity(ptr noundef %32), !range !79
  %291 = icmp eq i8 %290, 0
  br i1 %289, label %294, label %292

292:                                              ; preds = %287
  %293 = zext i1 %291 to i32
  br label %325

294:                                              ; preds = %287
  %295 = select i1 %291, i32 -2, i32 -1
  br label %325

296:                                              ; preds = %212
  %297 = tail call i32 @tree_int_cst_compare(ptr noundef nonnull %9, ptr noundef nonnull %32) #18
  br label %325

298:                                              ; preds = %204, %204
  %299 = icmp eq ptr %32, %9
  br i1 %299, label %325, label %300

300:                                              ; preds = %298
  %301 = tail call i32 @operand_equal_p(ptr noundef nonnull %9, ptr noundef %32, i32 noundef 0) #18
  %302 = icmp eq i32 %301, 0
  br i1 %302, label %303, label %325

303:                                              ; preds = %300
  %304 = tail call fastcc i32 @operand_less_p(ptr noundef nonnull %9, ptr noundef %32)
  %305 = icmp eq i32 %304, 1
  br i1 %305, label %325, label %306

306:                                              ; preds = %303
  %307 = tail call fastcc i32 @operand_less_p(ptr noundef %32, ptr noundef nonnull %9)
  %308 = icmp eq i32 %307, 1
  br i1 %308, label %325, label %309

309:                                              ; preds = %306
  %310 = load i64, ptr %9, align 8
  %311 = and i64 %310, 65535
  %312 = icmp eq i64 %311, 23
  br i1 %312, label %313, label %317

313:                                              ; preds = %309
  %314 = load i64, ptr %32, align 8
  %315 = and i64 %314, 65535
  %316 = icmp eq i64 %315, 23
  br i1 %316, label %324, label %317

317:                                              ; preds = %313, %309
  %318 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 47), align 8, !tbaa !5
  %319 = tail call ptr @fold_binary_to_constant(i32 noundef 102, ptr noundef %318, ptr noundef nonnull %9, ptr noundef %32) #18
  %320 = icmp eq ptr %319, null
  br i1 %320, label %324, label %321

321:                                              ; preds = %317
  %322 = tail call i32 @integer_onep(ptr noundef nonnull %319) #18
  %323 = icmp eq i32 %322, 0
  br i1 %323, label %324, label %325

324:                                              ; preds = %317, %321, %313
  br label %325

325:                                              ; preds = %190, %78, %83, %134, %139, %146, %151, %155, %187, %188, %194, %195, %72, %128, %3, %280, %278, %274, %265, %259, %251, %182, %184, %324, %300, %298, %303, %306, %321, %294, %284, %198, %201, %296, %292
  %326 = phi i32 [ %293, %292 ], [ %297, %296 ], [ -2, %201 ], [ -2, %198 ], [ 1, %284 ], [ %295, %294 ], [ -2, %324 ], [ 0, %300 ], [ 0, %298 ], [ -1, %303 ], [ 1, %306 ], [ 2, %321 ], [ -1, %182 ], [ 1, %184 ], [ -1, %265 ], [ -1, %259 ], [ 0, %274 ], [ -1, %278 ], [ %283, %280 ], [ -1, %251 ], [ 0, %3 ], [ 0, %190 ], [ -2, %78 ], [ -2, %83 ], [ -2, %134 ], [ -2, %139 ], [ -2, %146 ], [ 0, %151 ], [ -2, %155 ], [ 1, %187 ], [ 1, %188 ], [ -1, %194 ], [ -1, %195 ], [ -2, %72 ], [ -2, %128 ]
  ret i32 %326
}

declare zeroext i8 @is_gimple_min_invariant(ptr noundef) local_unnamed_addr #3

declare ptr @fold_convert_loc(i32 noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

declare ptr @tree_ssa_strip_useless_type_conversions(ptr noundef) local_unnamed_addr #3

declare i32 @tree_int_cst_sgn(ptr noundef) local_unnamed_addr #3

declare ptr @fold_unary_to_constant(i32 noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

declare i32 @tree_int_cst_compare(ptr noundef, ptr noundef) local_unnamed_addr #3

declare i32 @operand_equal_p(ptr noundef, ptr noundef, i32 noundef) local_unnamed_addr #3

; Function Attrs: inlinehint nounwind sspstrong uwtable
define internal fastcc i32 @operand_less_p(ptr noundef %0, ptr noundef %1) unnamed_addr #2 {
  %3 = load i64, ptr %0, align 8
  %4 = and i64 %3, 65535
  %5 = icmp eq i64 %4, 23
  br i1 %5, label %6, label %39

6:                                                ; preds = %2
  %7 = load i64, ptr %1, align 8
  %8 = and i64 %7, 65535
  %9 = icmp eq i64 %8, 23
  br i1 %9, label %10, label %39

10:                                               ; preds = %6
  %11 = getelementptr inbounds %struct.tree_common, ptr %0, i64 0, i32 2
  %12 = load ptr, ptr %11, align 8, !tbaa !16
  %13 = load i64, ptr %12, align 8
  %14 = and i64 %13, 2097152
  %15 = icmp eq i64 %14, 0
  %16 = getelementptr inbounds %struct.tree_int_cst, ptr %0, i64 0, i32 1
  %17 = getelementptr inbounds %struct.tree_int_cst, ptr %0, i64 0, i32 1, i32 1
  %18 = load i64, ptr %17, align 8, !tbaa !16
  %19 = getelementptr inbounds %struct.tree_int_cst, ptr %1, i64 0, i32 1
  %20 = getelementptr inbounds %struct.tree_int_cst, ptr %1, i64 0, i32 1, i32 1
  %21 = load i64, ptr %20, align 8, !tbaa !16
  br i1 %15, label %31, label %22

22:                                               ; preds = %10
  %23 = icmp ult i64 %18, %21
  br i1 %23, label %183, label %24

24:                                               ; preds = %22
  %25 = icmp eq i64 %18, %21
  br i1 %25, label %26, label %183

26:                                               ; preds = %24
  %27 = load i64, ptr %16, align 8, !tbaa !16
  %28 = load i64, ptr %19, align 8, !tbaa !16
  %29 = icmp ult i64 %27, %28
  %30 = zext i1 %29 to i32
  br label %183

31:                                               ; preds = %10
  %32 = icmp slt i64 %18, %21
  br i1 %32, label %183, label %33

33:                                               ; preds = %31
  %34 = icmp eq i64 %18, %21
  br i1 %34, label %35, label %54

35:                                               ; preds = %33
  %36 = load i64, ptr %16, align 8, !tbaa !16
  %37 = load i64, ptr %19, align 8, !tbaa !16
  %38 = icmp ult i64 %36, %37
  br i1 %38, label %183, label %54

39:                                               ; preds = %6, %2
  tail call void @fold_defer_overflow_warnings() #18
  %40 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 47), align 8, !tbaa !5
  %41 = tail call ptr @fold_binary_to_constant(i32 noundef 97, ptr noundef %40, ptr noundef nonnull %0, ptr noundef %1) #18
  tail call void @fold_undefer_and_ignore_overflow_warnings() #18
  %42 = icmp eq ptr %41, null
  br i1 %42, label %183, label %43

43:                                               ; preds = %39
  %44 = load i64, ptr %41, align 8
  %45 = and i64 %44, 65535
  %46 = icmp eq i64 %45, 23
  br i1 %46, label %47, label %183

47:                                               ; preds = %43
  %48 = tail call i32 @integer_zerop(ptr noundef nonnull %41) #18
  %49 = icmp eq i32 %48, 0
  br i1 %49, label %183, label %50

50:                                               ; preds = %47
  %51 = getelementptr inbounds %struct.tree_common, ptr %0, i64 0, i32 2
  %52 = load ptr, ptr %51, align 8, !tbaa !16
  %53 = load i64, ptr %52, align 8
  br label %54

54:                                               ; preds = %50, %35, %33
  %55 = phi i64 [ %53, %50 ], [ %13, %35 ], [ %13, %33 ]
  %56 = phi ptr [ %52, %50 ], [ %12, %35 ], [ %12, %33 ]
  %57 = getelementptr inbounds %struct.tree_common, ptr %0, i64 0, i32 2
  %58 = trunc i64 %55 to i32
  %59 = and i32 %58, 65535
  %60 = add nsw i32 %59, -6
  %61 = icmp ult i32 %60, 3
  br i1 %61, label %62, label %119

62:                                               ; preds = %54
  %63 = and i64 %55, 2097152
  %64 = icmp ne i64 %63, 0
  %65 = load i32, ptr @flag_wrapv, align 4
  %66 = icmp ne i32 %65, 0
  %67 = select i1 %64, i1 true, i1 %66
  br i1 %67, label %119, label %68

68:                                               ; preds = %62
  %69 = load i64, ptr %0, align 8
  %70 = and i64 %69, 65535
  %71 = getelementptr inbounds [0 x i32], ptr @tree_code_type, i64 0, i64 %70
  %72 = load i32, ptr %71, align 4, !tbaa !16
  %73 = icmp ne i32 %72, 1
  %74 = and i64 %69, 134217728
  %75 = icmp eq i64 %74, 0
  %76 = or i1 %73, %75
  br i1 %76, label %119, label %77

77:                                               ; preds = %68
  %78 = getelementptr inbounds %struct.tree_type, ptr %56, i64 0, i32 13
  %79 = load ptr, ptr %78, align 8, !tbaa !16
  %80 = icmp eq ptr %79, %0
  br i1 %80, label %86, label %81

81:                                               ; preds = %77
  %82 = icmp eq ptr %79, null
  br i1 %82, label %119, label %83

83:                                               ; preds = %81
  %84 = tail call i32 @operand_equal_p(ptr noundef nonnull %0, ptr noundef nonnull %79, i32 noundef 0) #18
  %85 = icmp eq i32 %84, 0
  br i1 %85, label %119, label %86

86:                                               ; preds = %77, %83
  %87 = getelementptr inbounds %struct.tree_common, ptr %1, i64 0, i32 2
  %88 = load ptr, ptr %87, align 8, !tbaa !16
  %89 = load i64, ptr %88, align 8
  %90 = trunc i64 %89 to i32
  %91 = and i32 %90, 65535
  %92 = add nsw i32 %91, -6
  %93 = icmp ult i32 %92, 3
  br i1 %93, label %94, label %183

94:                                               ; preds = %86
  %95 = and i64 %89, 2097152
  %96 = icmp ne i64 %95, 0
  %97 = load i32, ptr @flag_wrapv, align 4
  %98 = icmp ne i32 %97, 0
  %99 = select i1 %96, i1 true, i1 %98
  br i1 %99, label %183, label %100

100:                                              ; preds = %94
  %101 = load i64, ptr %1, align 8
  %102 = and i64 %101, 65535
  %103 = getelementptr inbounds [0 x i32], ptr @tree_code_type, i64 0, i64 %102
  %104 = load i32, ptr %103, align 4, !tbaa !16
  %105 = icmp ne i32 %104, 1
  %106 = and i64 %101, 134217728
  %107 = icmp eq i64 %106, 0
  %108 = or i1 %105, %107
  br i1 %108, label %183, label %109

109:                                              ; preds = %100
  %110 = getelementptr inbounds %struct.tree_type, ptr %88, i64 0, i32 13
  %111 = load ptr, ptr %110, align 8, !tbaa !16
  %112 = icmp eq ptr %111, %1
  br i1 %112, label %183, label %113

113:                                              ; preds = %109
  %114 = icmp eq ptr %111, null
  br i1 %114, label %183, label %115

115:                                              ; preds = %113
  %116 = tail call i32 @operand_equal_p(ptr noundef nonnull %1, ptr noundef nonnull %111, i32 noundef 0) #18
  %117 = icmp eq i32 %116, 0
  %118 = zext i1 %117 to i32
  br label %183

119:                                              ; preds = %54, %81, %62, %68, %83
  %120 = getelementptr inbounds %struct.tree_common, ptr %1, i64 0, i32 2
  %121 = load ptr, ptr %120, align 8, !tbaa !16
  %122 = load i64, ptr %121, align 8
  %123 = trunc i64 %122 to i32
  %124 = and i32 %123, 65535
  %125 = add nsw i32 %124, -6
  %126 = icmp ult i32 %125, 3
  br i1 %126, label %127, label %183

127:                                              ; preds = %119
  %128 = and i64 %122, 2097152
  %129 = icmp ne i64 %128, 0
  %130 = load i32, ptr @flag_wrapv, align 4
  %131 = icmp ne i32 %130, 0
  %132 = select i1 %129, i1 true, i1 %131
  br i1 %132, label %183, label %133

133:                                              ; preds = %127
  %134 = load i64, ptr %1, align 8
  %135 = and i64 %134, 65535
  %136 = getelementptr inbounds [0 x i32], ptr @tree_code_type, i64 0, i64 %135
  %137 = load i32, ptr %136, align 4, !tbaa !16
  %138 = icmp ne i32 %137, 1
  %139 = and i64 %134, 134217728
  %140 = icmp eq i64 %139, 0
  %141 = or i1 %138, %140
  br i1 %141, label %183, label %142

142:                                              ; preds = %133
  %143 = getelementptr inbounds %struct.tree_type, ptr %121, i64 0, i32 14
  %144 = load ptr, ptr %143, align 8, !tbaa !16
  %145 = icmp eq ptr %144, %1
  br i1 %145, label %151, label %146

146:                                              ; preds = %142
  %147 = icmp eq ptr %144, null
  br i1 %147, label %183, label %148

148:                                              ; preds = %146
  %149 = tail call i32 @operand_equal_p(ptr noundef nonnull %1, ptr noundef nonnull %144, i32 noundef 0) #18
  %150 = icmp eq i32 %149, 0
  br i1 %150, label %183, label %151

151:                                              ; preds = %142, %148
  %152 = load ptr, ptr %57, align 8, !tbaa !16
  %153 = load i64, ptr %152, align 8
  %154 = trunc i64 %153 to i32
  %155 = and i32 %154, 65535
  %156 = add nsw i32 %155, -6
  %157 = icmp ult i32 %156, 3
  br i1 %157, label %158, label %183

158:                                              ; preds = %151
  %159 = and i64 %153, 2097152
  %160 = icmp ne i64 %159, 0
  %161 = load i32, ptr @flag_wrapv, align 4
  %162 = icmp ne i32 %161, 0
  %163 = select i1 %160, i1 true, i1 %162
  br i1 %163, label %183, label %164

164:                                              ; preds = %158
  %165 = load i64, ptr %0, align 8
  %166 = and i64 %165, 65535
  %167 = getelementptr inbounds [0 x i32], ptr @tree_code_type, i64 0, i64 %166
  %168 = load i32, ptr %167, align 4, !tbaa !16
  %169 = icmp ne i32 %168, 1
  %170 = and i64 %165, 134217728
  %171 = icmp eq i64 %170, 0
  %172 = or i1 %169, %171
  br i1 %172, label %183, label %173

173:                                              ; preds = %164
  %174 = getelementptr inbounds %struct.tree_type, ptr %152, i64 0, i32 14
  %175 = load ptr, ptr %174, align 8, !tbaa !16
  %176 = icmp eq ptr %175, %0
  br i1 %176, label %183, label %177

177:                                              ; preds = %173
  %178 = icmp eq ptr %175, null
  br i1 %178, label %183, label %179

179:                                              ; preds = %177
  %180 = tail call i32 @operand_equal_p(ptr noundef nonnull %0, ptr noundef nonnull %175, i32 noundef 0) #18
  %181 = icmp eq i32 %180, 0
  %182 = zext i1 %181 to i32
  br label %183

183:                                              ; preds = %179, %177, %173, %164, %158, %151, %115, %113, %109, %100, %94, %86, %119, %146, %127, %133, %39, %43, %148, %47, %31, %35, %22, %26, %24
  %184 = phi i32 [ 1, %47 ], [ 1, %22 ], [ 0, %24 ], [ %30, %26 ], [ 1, %35 ], [ 1, %31 ], [ 0, %148 ], [ -2, %43 ], [ -2, %39 ], [ 0, %133 ], [ 0, %127 ], [ 0, %146 ], [ 0, %119 ], [ 1, %100 ], [ 1, %94 ], [ 0, %109 ], [ 1, %113 ], [ %118, %115 ], [ 1, %86 ], [ 1, %164 ], [ 1, %158 ], [ 0, %173 ], [ 1, %177 ], [ %182, %179 ], [ 1, %151 ]
  ret i32 %184
}

declare ptr @fold_binary_to_constant(i32 noundef, ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

declare i32 @integer_onep(ptr noundef) local_unnamed_addr #3

declare void @fold_defer_overflow_warnings() local_unnamed_addr #3

declare void @fold_undefer_and_ignore_overflow_warnings() local_unnamed_addr #3

declare i32 @integer_zerop(ptr noundef) local_unnamed_addr #3

declare void @loop_optimizer_init(i32 noundef) local_unnamed_addr #3

declare void @rewrite_into_loop_closed_ssa(ptr noundef, i32 noundef) local_unnamed_addr #3

declare void @scev_initialize() local_unnamed_addr #3

declare void @threadedge_initialize_values() local_unnamed_addr #3

declare void @ssa_propagate(ptr noundef, ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define internal i32 @vrp_visit_stmt(ptr noundef %0, ptr nocapture noundef %1, ptr nocapture noundef writeonly %2) #9 {
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  %6 = alloca i8, align 1
  %7 = alloca %struct.value_range_d, align 8
  %8 = load ptr, ptr @dump_file, align 8, !tbaa !5
  %9 = icmp eq ptr %8, null
  br i1 %9, label %20, label %10

10:                                               ; preds = %3
  %11 = load i32, ptr @dump_flags, align 4, !tbaa !20
  %12 = and i32 %11, 8
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %20, label %14

14:                                               ; preds = %10
  %15 = tail call i64 @fwrite(ptr nonnull @.str.37, i64 21, i64 1, ptr nonnull %8)
  %16 = load ptr, ptr @dump_file, align 8, !tbaa !5
  %17 = load i32, ptr @dump_flags, align 4, !tbaa !20
  tail call void @print_gimple_stmt(ptr noundef %16, ptr noundef %0, i32 noundef 0, i32 noundef %17) #18
  %18 = load ptr, ptr @dump_file, align 8, !tbaa !5
  %19 = tail call i32 @fputc(i32 10, ptr %18)
  br label %20

20:                                               ; preds = %14, %10, %3
  %21 = load i32, ptr %0, align 8
  %22 = and i32 %21, 255
  %23 = icmp eq i32 %22, 16
  br i1 %23, label %24, label %35

24:                                               ; preds = %20
  %25 = getelementptr i8, ptr %0, i64 40
  %26 = load ptr, ptr %25, align 8, !tbaa !16
  %27 = tail call zeroext i8 @is_gimple_reg(ptr noundef %26) #18
  %28 = icmp eq i8 %27, 0
  br i1 %28, label %35, label %29

29:                                               ; preds = %24
  %30 = load ptr, ptr %25, align 8, !tbaa !16
  %31 = getelementptr inbounds %struct.tree_common, ptr %30, i64 0, i32 2
  %32 = load ptr, ptr %31, align 8, !tbaa !16
  %33 = load i64, ptr %32, align 8
  %34 = trunc i64 %33 to i16
  switch i16 %34, label %35 [
    i16 6, label %115
    i16 7, label %115
    i16 8, label %115
    i16 10, label %115
    i16 12, label %115
  ]

35:                                               ; preds = %29, %24, %20
  %36 = load i32, ptr %0, align 8
  %37 = trunc i32 %36 to i8
  switch i8 %37, label %106 [
    i8 6, label %38
    i8 8, label %38
  ]

38:                                               ; preds = %35, %35
  %39 = tail call ptr @gimple_get_lhs(ptr noundef nonnull %0) #18
  %40 = icmp eq ptr %39, null
  br i1 %40, label %111, label %41

41:                                               ; preds = %38
  %42 = load i64, ptr %39, align 8
  %43 = and i64 %42, 65535
  %44 = icmp eq i64 %43, 141
  br i1 %44, label %45, label %111

45:                                               ; preds = %41
  %46 = getelementptr inbounds %struct.tree_common, ptr %39, i64 0, i32 2
  %47 = load ptr, ptr %46, align 8, !tbaa !16
  %48 = load i64, ptr %47, align 8
  %49 = trunc i64 %48 to i16
  switch i16 %49, label %111 [
    i16 6, label %50
    i16 7, label %50
    i16 8, label %50
    i16 10, label %50
    i16 12, label %50
  ]

50:                                               ; preds = %45, %45, %45, %45, %45
  %51 = load i32, ptr %0, align 8
  %52 = and i32 %51, 255
  %53 = icmp eq i32 %52, 8
  br i1 %53, label %54, label %97

54:                                               ; preds = %50
  %55 = load i32, ptr getelementptr inbounds ([0 x i32], ptr @gss_for_code_, i64 0, i64 8), align 4, !tbaa !16
  %56 = zext i32 %55 to i64
  %57 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %56
  %58 = load i64, ptr %57, align 8, !tbaa !36
  %59 = icmp eq i64 %58, 0
  br i1 %59, label %60, label %61

60:                                               ; preds = %54
  tail call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1622, ptr noundef nonnull @.str.28) #18
  br label %61

61:                                               ; preds = %60, %54
  %62 = getelementptr inbounds i8, ptr %0, i64 %58
  %63 = getelementptr inbounds ptr, ptr %62, i64 1
  %64 = load ptr, ptr %63, align 8, !tbaa !5
  %65 = load i64, ptr %64, align 8
  %66 = and i64 %65, 65535
  %67 = icmp eq i64 %66, 121
  br i1 %67, label %68, label %97

68:                                               ; preds = %61
  %69 = getelementptr inbounds %struct.tree_exp, ptr %64, i64 0, i32 3
  %70 = load ptr, ptr %69, align 8, !tbaa !16
  %71 = icmp eq ptr %70, null
  br i1 %71, label %97, label %72

72:                                               ; preds = %68
  %73 = load i32, ptr %0, align 8
  %74 = and i32 %73, 255
  %75 = add nsw i32 %74, -1
  %76 = icmp ult i32 %75, 9
  tail call void @llvm.assume(i1 %76)
  %77 = zext i32 %74 to i64
  %78 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %77
  %79 = load i32, ptr %78, align 4, !tbaa !16
  %80 = zext i32 %79 to i64
  %81 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %80
  %82 = load i64, ptr %81, align 8, !tbaa !36
  %83 = icmp eq i64 %82, 0
  br i1 %83, label %84, label %85

84:                                               ; preds = %72
  tail call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1622, ptr noundef nonnull @.str.28) #18
  br label %85

85:                                               ; preds = %84, %72
  %86 = getelementptr inbounds i8, ptr %0, i64 %82
  %87 = getelementptr inbounds ptr, ptr %86, i64 1
  %88 = load ptr, ptr %87, align 8, !tbaa !5
  %89 = load i64, ptr %88, align 8
  %90 = and i64 %89, 65535
  %91 = icmp eq i64 %90, 121
  tail call void @llvm.assume(i1 %91)
  %92 = getelementptr inbounds %struct.tree_exp, ptr %88, i64 0, i32 3
  %93 = load ptr, ptr %92, align 8, !tbaa !16
  %94 = getelementptr inbounds %struct.tree_decl_minimal, ptr %93, i64 0, i32 1
  %95 = load i32, ptr %94, align 8, !tbaa !16
  %96 = icmp ult i32 %95, 2
  br i1 %96, label %115, label %97

97:                                               ; preds = %85, %68, %61, %50
  %98 = load i32, ptr %0, align 8
  %99 = and i32 %98, 254
  %100 = add nsw i32 %99, -10
  %101 = icmp ult i32 %100, -4
  br i1 %101, label %115, label %102

102:                                              ; preds = %97
  %103 = getelementptr inbounds %struct.gimple_statement_with_memory_ops_base, ptr %0, i64 0, i32 2
  %104 = load ptr, ptr %103, align 8, !tbaa !16
  %105 = icmp eq ptr %104, null
  br i1 %105, label %115, label %111

106:                                              ; preds = %35
  %107 = and i32 %36, 255
  %108 = add nsw i32 %107, -1
  %109 = and i32 %108, -5
  %110 = icmp eq i32 %109, 0
  br i1 %110, label %115, label %111

111:                                              ; preds = %102, %45, %41, %38, %106
  %112 = tail call zeroext i8 @stmt_ends_bb_p(ptr noundef nonnull %0) #18
  %113 = icmp eq i8 %112, 0
  br i1 %113, label %114, label %623

114:                                              ; preds = %111
  tail call void @fancy_abort(ptr noundef nonnull @.str.27, i32 noundef 6101, ptr noundef nonnull @.str.28) #18
  br label %623

115:                                              ; preds = %97, %85, %102, %29, %29, %29, %29, %29, %106
  %116 = load i32, ptr %0, align 8
  %117 = and i32 %116, 255
  %118 = trunc i32 %116 to i8
  switch i8 %118, label %623 [
    i8 8, label %119
    i8 6, label %173
    i8 1, label %271
    i8 5, label %411
  ]

119:                                              ; preds = %115
  %120 = add nsw i32 %117, -10
  %121 = icmp ult i32 %120, -9
  br i1 %121, label %135, label %122

122:                                              ; preds = %119
  %123 = zext i32 %117 to i64
  %124 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %123
  %125 = load i32, ptr %124, align 4, !tbaa !16
  %126 = zext i32 %125 to i64
  %127 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %126
  %128 = load i64, ptr %127, align 8, !tbaa !36
  %129 = icmp eq i64 %128, 0
  br i1 %129, label %130, label %131

130:                                              ; preds = %122
  tail call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1622, ptr noundef nonnull @.str.28) #18
  br label %131

131:                                              ; preds = %130, %122
  %132 = getelementptr inbounds i8, ptr %0, i64 %128
  %133 = getelementptr inbounds ptr, ptr %132, i64 1
  %134 = load ptr, ptr %133, align 8, !tbaa !5
  br label %135

135:                                              ; preds = %131, %119
  %136 = phi ptr [ %134, %131 ], [ null, %119 ]
  %137 = load i64, ptr %136, align 8
  %138 = and i64 %137, 65535
  %139 = icmp eq i64 %138, 121
  br i1 %139, label %142, label %140

140:                                              ; preds = %135
  %141 = load i32, ptr %0, align 8
  br label %173

142:                                              ; preds = %135
  %143 = getelementptr inbounds %struct.tree_exp, ptr %136, i64 0, i32 3
  %144 = load ptr, ptr %143, align 8, !tbaa !16
  %145 = icmp eq ptr %144, null
  %146 = load i32, ptr %0, align 8
  br i1 %145, label %173, label %147

147:                                              ; preds = %142
  %148 = and i32 %146, 255
  %149 = add nsw i32 %148, -1
  %150 = icmp ult i32 %149, 9
  tail call void @llvm.assume(i1 %150)
  %151 = zext i32 %148 to i64
  %152 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %151
  %153 = load i32, ptr %152, align 4, !tbaa !16
  %154 = zext i32 %153 to i64
  %155 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %154
  %156 = load i64, ptr %155, align 8, !tbaa !36
  %157 = icmp eq i64 %156, 0
  br i1 %157, label %158, label %160

158:                                              ; preds = %147
  tail call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1622, ptr noundef nonnull @.str.28) #18
  %159 = load i32, ptr %0, align 8
  br label %160

160:                                              ; preds = %158, %147
  %161 = phi i32 [ %159, %158 ], [ %146, %147 ]
  %162 = getelementptr inbounds i8, ptr %0, i64 %156
  %163 = getelementptr inbounds ptr, ptr %162, i64 1
  %164 = load ptr, ptr %163, align 8, !tbaa !5
  %165 = load i64, ptr %164, align 8
  %166 = and i64 %165, 65535
  %167 = icmp eq i64 %166, 121
  tail call void @llvm.assume(i1 %167)
  %168 = getelementptr inbounds %struct.tree_exp, ptr %164, i64 0, i32 3
  %169 = load ptr, ptr %168, align 8, !tbaa !16
  %170 = getelementptr inbounds %struct.tree_decl_minimal, ptr %169, i64 0, i32 1
  %171 = load i32, ptr %170, align 8, !tbaa !16
  %172 = icmp ult i32 %171, 2
  br i1 %172, label %182, label %173

173:                                              ; preds = %115, %140, %160, %142
  %174 = phi i32 [ %141, %140 ], [ %116, %115 ], [ %161, %160 ], [ %146, %142 ]
  %175 = and i32 %174, 254
  %176 = add nsw i32 %175, -10
  %177 = icmp ult i32 %176, -4
  br i1 %177, label %182, label %178

178:                                              ; preds = %173
  %179 = getelementptr inbounds %struct.gimple_statement_with_memory_ops_base, ptr %0, i64 0, i32 2
  %180 = load ptr, ptr %179, align 8, !tbaa !16
  %181 = icmp eq ptr %180, null
  br i1 %181, label %182, label %623

182:                                              ; preds = %160, %173, %178
  %183 = phi i32 [ %174, %173 ], [ %174, %178 ], [ %161, %160 ]
  %184 = and i32 %183, 255
  %185 = tail call ptr @gimple_get_lhs(ptr noundef nonnull %0) #18
  %186 = load i64, ptr %185, align 8
  %187 = and i64 %186, 65535
  %188 = icmp eq i64 %187, 141
  br i1 %188, label %189, label %235

189:                                              ; preds = %182
  %190 = getelementptr inbounds %struct.tree_common, ptr %185, i64 0, i32 2
  %191 = load ptr, ptr %190, align 8, !tbaa !16
  %192 = load i64, ptr %191, align 8
  %193 = trunc i64 %192 to i32
  %194 = and i32 %193, 65535
  %195 = add nsw i32 %194, -6
  %196 = icmp ult i32 %195, 3
  br i1 %196, label %197, label %205

197:                                              ; preds = %189
  %198 = getelementptr inbounds %struct.tree_type, ptr %191, i64 0, i32 13
  %199 = load ptr, ptr %198, align 8, !tbaa !16
  %200 = icmp eq ptr %199, null
  br i1 %200, label %205, label %201

201:                                              ; preds = %197
  %202 = getelementptr inbounds %struct.tree_type, ptr %191, i64 0, i32 14
  %203 = load ptr, ptr %202, align 8, !tbaa !16
  %204 = icmp eq ptr %203, null
  br i1 %204, label %205, label %207

205:                                              ; preds = %201, %197, %189
  %206 = trunc i64 %192 to i16
  switch i16 %206, label %235 [
    i16 10, label %207
    i16 12, label %207
  ]

207:                                              ; preds = %205, %205, %201
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %7) #18
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(32) %7, i8 0, i64 32, i1 false)
  %208 = icmp eq i32 %184, 8
  br i1 %208, label %209, label %210

209:                                              ; preds = %207
  call fastcc void @extract_range_basic(ptr noundef nonnull %7, ptr noundef nonnull %0)
  br label %211

210:                                              ; preds = %207
  call fastcc void @extract_range_from_assignment(ptr noundef nonnull %7, ptr noundef nonnull %0)
  br label %211

211:                                              ; preds = %210, %209
  %212 = call fastcc zeroext i8 @update_value_range(ptr noundef nonnull %185, ptr noundef nonnull %7), !range !79
  %213 = icmp eq i8 %212, 0
  br i1 %213, label %233, label %214

214:                                              ; preds = %211
  store ptr %185, ptr %2, align 8, !tbaa !5
  %215 = load ptr, ptr @dump_file, align 8, !tbaa !5
  %216 = icmp eq ptr %215, null
  br i1 %216, label %229, label %217

217:                                              ; preds = %214
  %218 = load i32, ptr @dump_flags, align 4, !tbaa !20
  %219 = and i32 %218, 8
  %220 = icmp eq i32 %219, 0
  br i1 %220, label %229, label %221

221:                                              ; preds = %217
  %222 = call i64 @fwrite(ptr nonnull @.str.38, i64 20, i64 1, ptr nonnull %215)
  %223 = load ptr, ptr @dump_file, align 8, !tbaa !5
  call void @print_generic_expr(ptr noundef %223, ptr noundef nonnull %185, i32 noundef 0) #18
  %224 = load ptr, ptr @dump_file, align 8, !tbaa !5
  %225 = call i64 @fwrite(ptr nonnull @.str.17, i64 2, i64 1, ptr %224)
  %226 = load ptr, ptr @dump_file, align 8, !tbaa !5
  call void @dump_value_range(ptr noundef %226, ptr noundef nonnull %7)
  %227 = load ptr, ptr @dump_file, align 8, !tbaa !5
  %228 = call i64 @fwrite(ptr nonnull @.str.24, i64 2, i64 1, ptr %227)
  br label %229

229:                                              ; preds = %221, %217, %214
  %230 = load i32, ptr %7, align 8, !tbaa !23
  %231 = icmp eq i32 %230, 3
  %232 = select i1 %231, i32 2, i32 1
  br label %233

233:                                              ; preds = %229, %211
  %234 = phi i32 [ %232, %229 ], [ 0, %211 ]
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %7) #18
  br label %659

235:                                              ; preds = %205, %182
  %236 = load i32, ptr %0, align 8
  %237 = and i32 %236, 255
  %238 = add nsw i32 %237, -10
  %239 = icmp ult i32 %238, -9
  br i1 %239, label %659, label %240

240:                                              ; preds = %235
  %241 = getelementptr inbounds %struct.gimple_statement_with_ops_base, ptr %0, i64 0, i32 1
  %242 = load ptr, ptr %241, align 8, !tbaa !16
  %243 = icmp eq ptr %242, null
  br i1 %243, label %659, label %244

244:                                              ; preds = %240
  %245 = and i32 %236, 254
  %246 = add nsw i32 %245, -10
  %247 = icmp ult i32 %246, -4
  br i1 %247, label %255, label %248

248:                                              ; preds = %244
  %249 = getelementptr inbounds %struct.gimple_statement_with_memory_ops_base, ptr %0, i64 0, i32 1
  %250 = load ptr, ptr %249, align 8, !tbaa !16
  %251 = icmp eq ptr %250, null
  br i1 %251, label %255, label %252

252:                                              ; preds = %248
  %253 = load ptr, ptr %242, align 8, !tbaa !123
  %254 = icmp eq ptr %253, null
  br i1 %254, label %659, label %255

255:                                              ; preds = %252, %248, %244
  %256 = phi ptr [ %242, %244 ], [ %242, %248 ], [ %253, %252 ]
  br label %257

257:                                              ; preds = %255, %269
  %258 = phi ptr [ %262, %269 ], [ %256, %255 ]
  %259 = getelementptr inbounds %struct.def_optype_d, ptr %258, i64 0, i32 1
  %260 = load ptr, ptr %259, align 8, !tbaa !125
  %261 = load ptr, ptr %260, align 8, !tbaa !5
  %262 = load ptr, ptr %258, align 8, !tbaa !123
  %263 = tail call fastcc ptr @get_value_range(ptr noundef %261)
  store i32 3, ptr %263, align 8, !tbaa !23
  %264 = getelementptr inbounds %struct.value_range_d, ptr %263, i64 0, i32 1
  %265 = getelementptr inbounds %struct.value_range_d, ptr %263, i64 0, i32 3
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %264, i8 0, i64 16, i1 false)
  %266 = load ptr, ptr %265, align 8, !tbaa !26
  %267 = icmp eq ptr %266, null
  br i1 %267, label %269, label %268

268:                                              ; preds = %257
  tail call void @bitmap_clear(ptr noundef nonnull %266) #18
  br label %269

269:                                              ; preds = %268, %257
  %270 = icmp eq ptr %262, null
  br i1 %270, label %659, label %257, !llvm.loop !169

271:                                              ; preds = %115
  call void @llvm.lifetime.start.p0(i64 1, ptr nonnull %6) #18
  store ptr null, ptr %1, align 8, !tbaa !5
  %272 = load ptr, ptr @dump_file, align 8, !tbaa !5
  %273 = icmp eq ptr %272, null
  br i1 %273, label %326, label %274

274:                                              ; preds = %271
  %275 = load i32, ptr @dump_flags, align 4, !tbaa !20
  %276 = and i32 %275, 8
  %277 = icmp eq i32 %276, 0
  br i1 %277, label %326, label %278

278:                                              ; preds = %274
  %279 = tail call i64 @fwrite(ptr nonnull @.str.39, i64 38, i64 1, ptr nonnull %272)
  %280 = load ptr, ptr @dump_file, align 8, !tbaa !5
  tail call void @print_gimple_stmt(ptr noundef %280, ptr noundef nonnull %0, i32 noundef 0, i32 noundef 0) #18
  %281 = load ptr, ptr @dump_file, align 8, !tbaa !5
  %282 = tail call i64 @fwrite(ptr nonnull @.str.40, i64 19, i64 1, ptr %281)
  %283 = load i32, ptr %0, align 8
  %284 = and i32 %283, 255
  %285 = add nsw i32 %284, -10
  %286 = icmp ult i32 %285, -9
  br i1 %286, label %323, label %287

287:                                              ; preds = %278
  %288 = getelementptr inbounds %struct.gimple_statement_with_ops_base, ptr %0, i64 0, i32 2
  %289 = load ptr, ptr %288, align 8, !tbaa !16
  %290 = icmp eq ptr %289, null
  br i1 %290, label %323, label %291

291:                                              ; preds = %287
  %292 = and i32 %283, 254
  %293 = add nsw i32 %292, -10
  %294 = icmp ult i32 %293, -4
  br i1 %294, label %302, label %295

295:                                              ; preds = %291
  %296 = getelementptr inbounds %struct.gimple_statement_with_memory_ops_base, ptr %0, i64 0, i32 2
  %297 = load ptr, ptr %296, align 8, !tbaa !16
  %298 = icmp eq ptr %297, null
  br i1 %298, label %302, label %299

299:                                              ; preds = %295
  %300 = load ptr, ptr %289, align 8, !tbaa !73
  %301 = icmp eq ptr %300, null
  br i1 %301, label %323, label %302

302:                                              ; preds = %299, %295, %291
  %303 = phi ptr [ %289, %291 ], [ %289, %295 ], [ %300, %299 ]
  br label %304

304:                                              ; preds = %302, %304
  %305 = phi ptr [ %309, %304 ], [ %303, %302 ]
  %306 = getelementptr %struct.use_optype_d, ptr %305, i64 0, i32 1, i32 3
  %307 = load ptr, ptr %306, align 8, !tbaa !78
  %308 = load ptr, ptr %307, align 8, !tbaa !5
  %309 = load ptr, ptr %305, align 8, !tbaa !73
  %310 = load ptr, ptr @dump_file, align 8, !tbaa !5
  %311 = tail call i32 @fputc(i32 9, ptr %310)
  %312 = load ptr, ptr @dump_file, align 8, !tbaa !5
  tail call void @print_generic_expr(ptr noundef %312, ptr noundef %308, i32 noundef 0) #18
  %313 = load ptr, ptr @dump_file, align 8, !tbaa !5
  %314 = tail call i64 @fwrite(ptr nonnull @.str.17, i64 2, i64 1, ptr %313)
  %315 = load ptr, ptr @dump_file, align 8, !tbaa !5
  %316 = load ptr, ptr @vr_value, align 8, !tbaa !5
  %317 = getelementptr inbounds %struct.tree_ssa_name, ptr %308, i64 0, i32 3
  %318 = load i32, ptr %317, align 8, !tbaa !16
  %319 = zext i32 %318 to i64
  %320 = getelementptr inbounds ptr, ptr %316, i64 %319
  %321 = load ptr, ptr %320, align 8, !tbaa !5
  tail call void @dump_value_range(ptr noundef %315, ptr noundef %321)
  %322 = icmp eq ptr %309, null
  br i1 %322, label %323, label %304, !llvm.loop !170

323:                                              ; preds = %304, %299, %287, %278
  %324 = load ptr, ptr @dump_file, align 8, !tbaa !5
  %325 = tail call i32 @fputc(i32 10, ptr %324)
  br label %326

326:                                              ; preds = %323, %274, %271
  store i8 0, ptr %6, align 1, !tbaa !16
  %327 = load i32, ptr %0, align 8
  %328 = lshr i32 %327, 16
  %329 = and i32 %327, 255
  %330 = add nsw i32 %329, -10
  %331 = icmp ult i32 %330, -9
  br i1 %331, label %349, label %332

332:                                              ; preds = %326
  %333 = zext i32 %329 to i64
  %334 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %333
  %335 = load i32, ptr %334, align 4, !tbaa !16
  %336 = zext i32 %335 to i64
  %337 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %336
  %338 = load i64, ptr %337, align 8, !tbaa !36
  %339 = icmp eq i64 %338, 0
  br i1 %339, label %340, label %344

340:                                              ; preds = %332
  tail call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1622, ptr noundef nonnull @.str.28) #18
  %341 = load i32, ptr %0, align 8
  %342 = and i32 %341, 255
  %343 = add nsw i32 %342, -10
  br label %344

344:                                              ; preds = %340, %332
  %345 = phi i32 [ %343, %340 ], [ %330, %332 ]
  %346 = phi i32 [ %342, %340 ], [ %329, %332 ]
  %347 = getelementptr inbounds i8, ptr %0, i64 %338
  %348 = load ptr, ptr %347, align 8, !tbaa !5
  br label %349

349:                                              ; preds = %344, %326
  %350 = phi i32 [ %330, %326 ], [ %345, %344 ]
  %351 = phi i32 [ %329, %326 ], [ %346, %344 ]
  %352 = phi ptr [ null, %326 ], [ %348, %344 ]
  %353 = icmp ult i32 %350, -9
  br i1 %353, label %367, label %354

354:                                              ; preds = %349
  %355 = zext i32 %351 to i64
  %356 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %355
  %357 = load i32, ptr %356, align 4, !tbaa !16
  %358 = zext i32 %357 to i64
  %359 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %358
  %360 = load i64, ptr %359, align 8, !tbaa !36
  %361 = icmp eq i64 %360, 0
  br i1 %361, label %362, label %363

362:                                              ; preds = %354
  tail call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1622, ptr noundef nonnull @.str.28) #18
  br label %363

363:                                              ; preds = %362, %354
  %364 = getelementptr inbounds i8, ptr %0, i64 %360
  %365 = getelementptr inbounds ptr, ptr %364, i64 1
  %366 = load ptr, ptr %365, align 8, !tbaa !5
  br label %367

367:                                              ; preds = %363, %349
  %368 = phi ptr [ %366, %363 ], [ null, %349 ]
  %369 = getelementptr inbounds %struct.tree_common, ptr %352, i64 0, i32 2
  %370 = load ptr, ptr %369, align 8, !tbaa !16
  %371 = load i64, ptr %370, align 8
  %372 = trunc i64 %371 to i16
  switch i16 %372, label %392 [
    i16 6, label %373
    i16 7, label %373
    i16 8, label %373
    i16 10, label %373
    i16 12, label %373
  ]

373:                                              ; preds = %367, %367, %367, %367, %367
  %374 = call fastcc ptr @vrp_evaluate_conditional_warnv_with_ops_using_ranges(i32 noundef %328, ptr noundef nonnull %352, ptr noundef %368, ptr noundef nonnull %6)
  %375 = icmp eq ptr %374, null
  br i1 %375, label %392, label %376

376:                                              ; preds = %373
  %377 = load i8, ptr %6, align 1, !tbaa !16
  %378 = icmp eq i8 %377, 0
  br i1 %378, label %379, label %383

379:                                              ; preds = %376
  %380 = getelementptr i8, ptr %0, i64 16
  %381 = load ptr, ptr %380, align 8, !tbaa !16
  %382 = call ptr @find_taken_edge(ptr noundef %381, ptr noundef nonnull %374) #18
  store ptr %382, ptr %1, align 8, !tbaa !5
  br label %392

383:                                              ; preds = %376
  %384 = load ptr, ptr @dump_file, align 8, !tbaa !5
  %385 = icmp eq ptr %384, null
  br i1 %385, label %407, label %386

386:                                              ; preds = %383
  %387 = load i32, ptr @dump_flags, align 4, !tbaa !20
  %388 = and i32 %387, 8
  %389 = icmp eq i32 %388, 0
  br i1 %389, label %392, label %390

390:                                              ; preds = %386
  %391 = call i64 @fwrite(ptr nonnull @.str.41, i64 83, i64 1, ptr nonnull %384)
  br label %392

392:                                              ; preds = %390, %386, %379, %373, %367
  %393 = phi ptr [ null, %386 ], [ null, %390 ], [ null, %373 ], [ %374, %379 ], [ null, %367 ]
  %394 = load ptr, ptr @dump_file, align 8, !tbaa !5
  %395 = icmp eq ptr %394, null
  br i1 %395, label %407, label %396

396:                                              ; preds = %392
  %397 = load i32, ptr @dump_flags, align 4, !tbaa !20
  %398 = and i32 %397, 8
  %399 = icmp eq i32 %398, 0
  br i1 %399, label %407, label %400

400:                                              ; preds = %396
  %401 = call i64 @fwrite(ptr nonnull @.str.42, i64 25, i64 1, ptr nonnull %394)
  %402 = icmp eq ptr %393, null
  %403 = load ptr, ptr @dump_file, align 8, !tbaa !5
  br i1 %402, label %404, label %406

404:                                              ; preds = %400
  %405 = call i64 @fwrite(ptr nonnull @.str.43, i64 11, i64 1, ptr %403)
  br label %407

406:                                              ; preds = %400
  call void @print_generic_stmt(ptr noundef %403, ptr noundef nonnull %393, i32 noundef 0) #18
  br label %407

407:                                              ; preds = %383, %392, %396, %404, %406
  %408 = load ptr, ptr %1, align 8, !tbaa !5
  %409 = icmp eq ptr %408, null
  %410 = select i1 %409, i32 2, i32 1
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %6) #18
  br label %659

411:                                              ; preds = %115
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %4) #18
  store i64 0, ptr %4, align 8, !tbaa !36
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %5) #18
  store i64 0, ptr %5, align 8, !tbaa !36
  store ptr null, ptr %1, align 8, !tbaa !5
  %412 = load i32, ptr %0, align 8
  %413 = and i32 %412, 255
  %414 = add nsw i32 %413, -10
  %415 = icmp ult i32 %414, -9
  br i1 %415, label %428, label %416

416:                                              ; preds = %411
  %417 = zext i32 %413 to i64
  %418 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %417
  %419 = load i32, ptr %418, align 4, !tbaa !16
  %420 = zext i32 %419 to i64
  %421 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %420
  %422 = load i64, ptr %421, align 8, !tbaa !36
  %423 = icmp eq i64 %422, 0
  br i1 %423, label %424, label %425

424:                                              ; preds = %416
  tail call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1622, ptr noundef nonnull @.str.28) #18
  br label %425

425:                                              ; preds = %424, %416
  %426 = getelementptr inbounds i8, ptr %0, i64 %422
  %427 = load ptr, ptr %426, align 8, !tbaa !5
  br label %428

428:                                              ; preds = %425, %411
  %429 = phi ptr [ %427, %425 ], [ null, %411 ]
  %430 = load i64, ptr %429, align 8
  %431 = and i64 %430, 65535
  %432 = icmp eq i64 %431, 141
  br i1 %432, label %433, label %621

433:                                              ; preds = %428
  %434 = tail call fastcc ptr @get_value_range(ptr noundef nonnull %429)
  %435 = load ptr, ptr @dump_file, align 8, !tbaa !5
  %436 = icmp eq ptr %435, null
  br i1 %436, label %449, label %437

437:                                              ; preds = %433
  %438 = load i32, ptr @dump_flags, align 4, !tbaa !20
  %439 = and i32 %438, 8
  %440 = icmp eq i32 %439, 0
  br i1 %440, label %449, label %441

441:                                              ; preds = %437
  %442 = tail call i64 @fwrite(ptr nonnull @.str.44, i64 41, i64 1, ptr nonnull %435)
  %443 = load ptr, ptr @dump_file, align 8, !tbaa !5
  tail call void @print_generic_expr(ptr noundef %443, ptr noundef nonnull %429, i32 noundef 0) #18
  %444 = load ptr, ptr @dump_file, align 8, !tbaa !5
  %445 = tail call i64 @fwrite(ptr nonnull @.str.45, i64 18, i64 1, ptr %444)
  %446 = load ptr, ptr @dump_file, align 8, !tbaa !5
  tail call void @dump_value_range(ptr noundef %446, ptr noundef %434)
  %447 = load ptr, ptr @dump_file, align 8, !tbaa !5
  %448 = tail call i32 @fputc(i32 10, ptr %447)
  br label %449

449:                                              ; preds = %441, %437, %433
  %450 = load i32, ptr %434, align 8, !tbaa !23
  %451 = icmp eq i32 %450, 1
  br i1 %451, label %452, label %621

452:                                              ; preds = %449
  %453 = getelementptr inbounds %struct.value_range_d, ptr %434, i64 0, i32 1
  %454 = load ptr, ptr %453, align 8, !tbaa !25
  %455 = tail call zeroext i8 @is_gimple_min_invariant(ptr noundef %454) #18
  %456 = icmp eq i8 %455, 0
  br i1 %456, label %621, label %457

457:                                              ; preds = %452
  %458 = getelementptr inbounds %struct.value_range_d, ptr %434, i64 0, i32 2
  %459 = load ptr, ptr %458, align 8, !tbaa !31
  %460 = tail call zeroext i8 @is_gimple_min_invariant(ptr noundef %459) #18
  %461 = icmp eq i8 %460, 0
  br i1 %461, label %621, label %462

462:                                              ; preds = %457
  %463 = load ptr, ptr %453, align 8, !tbaa !25
  %464 = load ptr, ptr %458, align 8, !tbaa !31
  %465 = call fastcc zeroext i8 @find_case_label_range(ptr noundef nonnull %0, ptr noundef %463, ptr noundef %464, ptr noundef nonnull %4, ptr noundef nonnull %5), !range !79
  %466 = xor i8 %465, 1
  %467 = load i64, ptr %5, align 8, !tbaa !36
  %468 = load i64, ptr %4, align 8, !tbaa !36
  %469 = icmp ult i64 %467, %468
  br i1 %469, label %470, label %495

470:                                              ; preds = %462
  %471 = icmp eq i8 %466, 0
  br i1 %471, label %472, label %473

472:                                              ; preds = %470
  tail call void @fancy_abort(ptr noundef nonnull @.str.27, i32 noundef 6035, ptr noundef nonnull @.str.28) #18
  br label %473

473:                                              ; preds = %472, %470
  %474 = getelementptr i8, ptr %0, i64 12
  %475 = load i32, ptr %474, align 4, !tbaa !16
  %476 = icmp ugt i32 %475, 1
  br i1 %476, label %478, label %477

477:                                              ; preds = %473
  tail call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 3215, ptr noundef nonnull @.str.28) #18
  br label %478

478:                                              ; preds = %477, %473
  %479 = load i32, ptr %0, align 8
  %480 = and i32 %479, 255
  %481 = add nsw i32 %480, -1
  %482 = icmp ult i32 %481, 9
  tail call void @llvm.assume(i1 %482)
  %483 = zext i32 %480 to i64
  %484 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %483
  %485 = load i32, ptr %484, align 4, !tbaa !16
  %486 = zext i32 %485 to i64
  %487 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %486
  %488 = load i64, ptr %487, align 8, !tbaa !36
  %489 = icmp eq i64 %488, 0
  br i1 %489, label %490, label %491

490:                                              ; preds = %478
  tail call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1622, ptr noundef nonnull @.str.28) #18
  br label %491

491:                                              ; preds = %490, %478
  %492 = getelementptr inbounds i8, ptr %0, i64 %488
  %493 = getelementptr inbounds ptr, ptr %492, i64 1
  %494 = load ptr, ptr %493, align 8, !tbaa !5
  br label %602

495:                                              ; preds = %462
  %496 = trunc i64 %468 to i32
  %497 = getelementptr i8, ptr %0, i64 12
  %498 = load i32, ptr %497, align 4, !tbaa !16
  %499 = add i32 %496, 1
  %500 = icmp ugt i32 %498, %499
  br i1 %500, label %502, label %501

501:                                              ; preds = %495
  tail call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 3215, ptr noundef nonnull @.str.28) #18
  br label %502

502:                                              ; preds = %501, %495
  %503 = load i32, ptr %0, align 8
  %504 = and i32 %503, 255
  %505 = add nsw i32 %504, -10
  %506 = icmp ult i32 %505, -9
  br i1 %506, label %521, label %507

507:                                              ; preds = %502
  %508 = zext i32 %504 to i64
  %509 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %508
  %510 = load i32, ptr %509, align 4, !tbaa !16
  %511 = zext i32 %510 to i64
  %512 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %511
  %513 = load i64, ptr %512, align 8, !tbaa !36
  %514 = icmp eq i64 %513, 0
  br i1 %514, label %515, label %516

515:                                              ; preds = %507
  tail call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1622, ptr noundef nonnull @.str.28) #18
  br label %516

516:                                              ; preds = %515, %507
  %517 = getelementptr inbounds i8, ptr %0, i64 %513
  %518 = zext i32 %499 to i64
  %519 = getelementptr inbounds ptr, ptr %517, i64 %518
  %520 = load ptr, ptr %519, align 8, !tbaa !5
  br label %521

521:                                              ; preds = %516, %502
  %522 = phi ptr [ %520, %516 ], [ null, %502 ]
  %523 = icmp eq i8 %466, 0
  br i1 %523, label %559, label %524

524:                                              ; preds = %521
  %525 = load i32, ptr %497, align 4, !tbaa !16
  %526 = icmp ugt i32 %525, 1
  br i1 %526, label %528, label %527

527:                                              ; preds = %524
  tail call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 3215, ptr noundef nonnull @.str.28) #18
  br label %528

528:                                              ; preds = %527, %524
  %529 = load i32, ptr %0, align 8
  %530 = and i32 %529, 255
  %531 = add nsw i32 %530, -1
  %532 = icmp ult i32 %531, 9
  tail call void @llvm.assume(i1 %532)
  %533 = zext i32 %530 to i64
  %534 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %533
  %535 = load i32, ptr %534, align 4, !tbaa !16
  %536 = zext i32 %535 to i64
  %537 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %536
  %538 = load i64, ptr %537, align 8, !tbaa !36
  %539 = icmp eq i64 %538, 0
  br i1 %539, label %540, label %541

540:                                              ; preds = %528
  tail call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1622, ptr noundef nonnull @.str.28) #18
  br label %541

541:                                              ; preds = %540, %528
  %542 = getelementptr inbounds i8, ptr %0, i64 %538
  %543 = getelementptr inbounds ptr, ptr %542, i64 1
  %544 = load ptr, ptr %543, align 8, !tbaa !5
  %545 = getelementptr inbounds %struct.tree_exp, ptr %544, i64 1, i32 0, i32 1
  %546 = load ptr, ptr %545, align 8, !tbaa !16
  %547 = getelementptr inbounds %struct.tree_exp, ptr %522, i64 1, i32 0, i32 1
  %548 = load ptr, ptr %547, align 8, !tbaa !16
  %549 = icmp eq ptr %546, %548
  br i1 %549, label %559, label %550

550:                                              ; preds = %541
  %551 = load ptr, ptr @dump_file, align 8, !tbaa !5
  %552 = icmp eq ptr %551, null
  br i1 %552, label %621, label %553

553:                                              ; preds = %550
  %554 = load i32, ptr @dump_flags, align 4, !tbaa !20
  %555 = and i32 %554, 8
  %556 = icmp eq i32 %555, 0
  br i1 %556, label %621, label %557

557:                                              ; preds = %553
  %558 = tail call i64 @fwrite(ptr nonnull @.str.46, i64 42, i64 1, ptr nonnull %551)
  br label %621

559:                                              ; preds = %541, %521
  %560 = getelementptr inbounds %struct.tree_exp, ptr %522, i64 1, i32 0, i32 1
  br label %561

561:                                              ; preds = %584, %559
  %562 = phi i64 [ %563, %584 ], [ %468, %559 ]
  %563 = add i64 %562, 1
  %564 = icmp ugt i64 %563, %467
  br i1 %564, label %602, label %565

565:                                              ; preds = %561
  %566 = trunc i64 %563 to i32
  %567 = load i32, ptr %497, align 4, !tbaa !16
  %568 = add i32 %566, 1
  %569 = icmp ugt i32 %567, %568
  br i1 %569, label %571, label %570

570:                                              ; preds = %565
  tail call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 3215, ptr noundef nonnull @.str.28) #18
  br label %571

571:                                              ; preds = %570, %565
  %572 = load i32, ptr %0, align 8
  %573 = and i32 %572, 255
  %574 = add nsw i32 %573, -1
  %575 = icmp ult i32 %574, 9
  tail call void @llvm.assume(i1 %575)
  %576 = zext i32 %573 to i64
  %577 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %576
  %578 = load i32, ptr %577, align 4, !tbaa !16
  %579 = zext i32 %578 to i64
  %580 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %579
  %581 = load i64, ptr %580, align 8, !tbaa !36
  %582 = icmp eq i64 %581, 0
  br i1 %582, label %583, label %584

583:                                              ; preds = %571
  tail call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1622, ptr noundef nonnull @.str.28) #18
  br label %584

584:                                              ; preds = %583, %571
  %585 = getelementptr inbounds i8, ptr %0, i64 %581
  %586 = zext i32 %568 to i64
  %587 = getelementptr inbounds ptr, ptr %585, i64 %586
  %588 = load ptr, ptr %587, align 8, !tbaa !5
  %589 = getelementptr inbounds %struct.tree_exp, ptr %588, i64 1, i32 0, i32 1
  %590 = load ptr, ptr %589, align 8, !tbaa !16
  %591 = load ptr, ptr %560, align 8, !tbaa !16
  %592 = icmp eq ptr %590, %591
  br i1 %592, label %561, label %593, !llvm.loop !171

593:                                              ; preds = %584
  %594 = load ptr, ptr @dump_file, align 8, !tbaa !5
  %595 = icmp eq ptr %594, null
  br i1 %595, label %621, label %596

596:                                              ; preds = %593
  %597 = load i32, ptr @dump_flags, align 4, !tbaa !20
  %598 = and i32 %597, 8
  %599 = icmp eq i32 %598, 0
  br i1 %599, label %621, label %600

600:                                              ; preds = %596
  %601 = tail call i64 @fwrite(ptr nonnull @.str.46, i64 42, i64 1, ptr nonnull %594)
  br label %621

602:                                              ; preds = %561, %491
  %603 = phi ptr [ %494, %491 ], [ %522, %561 ]
  %604 = getelementptr i8, ptr %0, i64 16
  %605 = load ptr, ptr %604, align 8, !tbaa !16
  %606 = load ptr, ptr @cfun, align 8, !tbaa !5
  %607 = getelementptr inbounds %struct.tree_exp, ptr %603, i64 1, i32 0, i32 1
  %608 = load ptr, ptr %607, align 8, !tbaa !16
  %609 = tail call ptr @label_to_block_fn(ptr noundef %606, ptr noundef %608) #18
  %610 = tail call ptr @find_edge(ptr noundef %605, ptr noundef %609) #18
  store ptr %610, ptr %1, align 8, !tbaa !5
  %611 = load ptr, ptr @dump_file, align 8, !tbaa !5
  %612 = icmp eq ptr %611, null
  br i1 %612, label %621, label %613

613:                                              ; preds = %602
  %614 = load i32, ptr @dump_flags, align 4, !tbaa !20
  %615 = and i32 %614, 8
  %616 = icmp eq i32 %615, 0
  br i1 %616, label %621, label %617

617:                                              ; preds = %613
  %618 = tail call i64 @fwrite(ptr nonnull @.str.47, i64 20, i64 1, ptr nonnull %611)
  %619 = load ptr, ptr @dump_file, align 8, !tbaa !5
  %620 = load ptr, ptr %607, align 8, !tbaa !16
  tail call void @print_generic_stmt(ptr noundef %619, ptr noundef %620, i32 noundef 0) #18
  br label %621

621:                                              ; preds = %428, %449, %452, %457, %550, %553, %557, %593, %596, %600, %602, %613, %617
  %622 = phi i32 [ 2, %428 ], [ 2, %457 ], [ 2, %449 ], [ 2, %557 ], [ 2, %553 ], [ 2, %550 ], [ 2, %600 ], [ 2, %596 ], [ 2, %593 ], [ 1, %617 ], [ 1, %613 ], [ 1, %602 ], [ 2, %452 ]
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %5) #18
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %4) #18
  br label %659

623:                                              ; preds = %115, %114, %111, %178
  %624 = load i32, ptr %0, align 8
  %625 = and i32 %624, 255
  %626 = add nsw i32 %625, -10
  %627 = icmp ult i32 %626, -9
  br i1 %627, label %659, label %628

628:                                              ; preds = %623
  %629 = getelementptr inbounds %struct.gimple_statement_with_ops_base, ptr %0, i64 0, i32 1
  %630 = load ptr, ptr %629, align 8, !tbaa !16
  %631 = icmp eq ptr %630, null
  br i1 %631, label %659, label %632

632:                                              ; preds = %628
  %633 = and i32 %624, 254
  %634 = add nsw i32 %633, -10
  %635 = icmp ult i32 %634, -4
  br i1 %635, label %643, label %636

636:                                              ; preds = %632
  %637 = getelementptr inbounds %struct.gimple_statement_with_memory_ops_base, ptr %0, i64 0, i32 1
  %638 = load ptr, ptr %637, align 8, !tbaa !16
  %639 = icmp eq ptr %638, null
  br i1 %639, label %643, label %640

640:                                              ; preds = %636
  %641 = load ptr, ptr %630, align 8, !tbaa !123
  %642 = icmp eq ptr %641, null
  br i1 %642, label %659, label %643

643:                                              ; preds = %632, %636, %640
  %644 = phi ptr [ %630, %632 ], [ %630, %636 ], [ %641, %640 ]
  br label %645

645:                                              ; preds = %643, %657
  %646 = phi ptr [ %650, %657 ], [ %644, %643 ]
  %647 = getelementptr inbounds %struct.def_optype_d, ptr %646, i64 0, i32 1
  %648 = load ptr, ptr %647, align 8, !tbaa !125
  %649 = load ptr, ptr %648, align 8, !tbaa !5
  %650 = load ptr, ptr %646, align 8, !tbaa !123
  %651 = tail call fastcc ptr @get_value_range(ptr noundef %649)
  store i32 3, ptr %651, align 8, !tbaa !23
  %652 = getelementptr inbounds %struct.value_range_d, ptr %651, i64 0, i32 1
  %653 = getelementptr inbounds %struct.value_range_d, ptr %651, i64 0, i32 3
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %652, i8 0, i64 16, i1 false)
  %654 = load ptr, ptr %653, align 8, !tbaa !26
  %655 = icmp eq ptr %654, null
  br i1 %655, label %657, label %656

656:                                              ; preds = %645
  tail call void @bitmap_clear(ptr noundef nonnull %654) #18
  br label %657

657:                                              ; preds = %656, %645
  %658 = icmp eq ptr %650, null
  br i1 %658, label %659, label %645, !llvm.loop !172

659:                                              ; preds = %269, %657, %623, %628, %640, %252, %240, %235, %233, %621, %407
  %660 = phi i32 [ %410, %407 ], [ %622, %621 ], [ %234, %233 ], [ 2, %252 ], [ 2, %240 ], [ 2, %235 ], [ 2, %640 ], [ 2, %628 ], [ 2, %623 ], [ 2, %657 ], [ 2, %269 ]
  ret i32 %660
}

; Function Attrs: nounwind sspstrong uwtable
define internal i32 @vrp_visit_phi_node(ptr noundef %0) #9 {
  %2 = alloca i8, align 1
  %3 = alloca i8, align 1
  %4 = alloca %struct.value_range_d, align 8
  %5 = alloca %struct.value_range_d, align 8
  %6 = getelementptr inbounds %struct.gimple_statement_phi, ptr %0, i64 0, i32 3
  %7 = load ptr, ptr %6, align 8, !tbaa !5
  %8 = tail call fastcc ptr @get_value_range(ptr noundef %7)
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %4) #18
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(32) %4, i8 0, i64 32, i1 false)
  %9 = load i32, ptr %8, align 8, !tbaa !23
  %10 = getelementptr inbounds %struct.value_range_d, ptr %8, i64 0, i32 1
  %11 = getelementptr inbounds %struct.value_range_d, ptr %8, i64 0, i32 2
  %12 = getelementptr inbounds %struct.value_range_d, ptr %8, i64 0, i32 3
  %13 = load ptr, ptr %12, align 8, !tbaa !26
  store i32 %9, ptr %4, align 8, !tbaa !23
  %14 = getelementptr inbounds %struct.value_range_d, ptr %4, i64 0, i32 1
  %15 = getelementptr inbounds %struct.value_range_d, ptr %4, i64 0, i32 2
  %16 = load <2 x ptr>, ptr %10, align 8, !tbaa !5
  store <2 x ptr> %16, ptr %14, align 8, !tbaa !5
  %17 = getelementptr inbounds %struct.value_range_d, ptr %4, i64 0, i32 3
  %18 = icmp eq ptr %13, null
  br i1 %18, label %27, label %19

19:                                               ; preds = %1
  %20 = tail call ptr @bitmap_obstack_alloc_stat(ptr noundef null) #18
  store ptr %20, ptr %17, align 8, !tbaa !26
  %21 = icmp eq ptr %20, %13
  br i1 %21, label %27, label %22

22:                                               ; preds = %19
  %23 = load ptr, ptr %13, align 8, !tbaa !32
  %24 = icmp eq ptr %23, null
  br i1 %24, label %26, label %25

25:                                               ; preds = %22
  tail call void @bitmap_copy(ptr noundef %20, ptr noundef nonnull %13) #18
  br label %27

26:                                               ; preds = %22
  tail call void @bitmap_clear(ptr noundef %20) #18
  br label %27

27:                                               ; preds = %1, %19, %25, %26
  %28 = load ptr, ptr @dump_file, align 8, !tbaa !5
  %29 = icmp eq ptr %28, null
  br i1 %29, label %38, label %30

30:                                               ; preds = %27
  %31 = load i32, ptr @dump_flags, align 4, !tbaa !20
  %32 = and i32 %31, 8
  %33 = icmp eq i32 %32, 0
  br i1 %33, label %38, label %34

34:                                               ; preds = %30
  %35 = tail call i64 @fwrite(ptr nonnull @.str.48, i64 20, i64 1, ptr nonnull %28)
  %36 = load ptr, ptr @dump_file, align 8, !tbaa !5
  %37 = load i32, ptr @dump_flags, align 4, !tbaa !20
  tail call void @print_gimple_stmt(ptr noundef %36, ptr noundef nonnull %0, i32 noundef 0, i32 noundef %37) #18
  br label %38

38:                                               ; preds = %34, %30, %27
  %39 = getelementptr i8, ptr %0, i64 36
  %40 = load i32, ptr %39, align 4, !tbaa !16
  %41 = icmp eq i32 %40, 0
  br i1 %41, label %177, label %42

42:                                               ; preds = %38
  %43 = getelementptr i8, ptr %0, i64 16
  %44 = getelementptr inbounds %struct.gimple_statement_phi, ptr %0, i64 0, i32 1
  %45 = getelementptr inbounds %struct.value_range_d, ptr %5, i64 0, i32 1
  %46 = getelementptr inbounds %struct.value_range_d, ptr %5, i64 0, i32 2
  %47 = getelementptr inbounds %struct.value_range_d, ptr %5, i64 0, i32 3
  br label %48

48:                                               ; preds = %42, %170
  %49 = phi i32 [ %9, %42 ], [ %171, %170 ]
  %50 = phi i64 [ 0, %42 ], [ %173, %170 ]
  %51 = phi i32 [ 0, %42 ], [ %172, %170 ]
  %52 = load ptr, ptr %43, align 8, !tbaa !16
  %53 = load ptr, ptr %52, align 8, !tbaa !173
  %54 = getelementptr inbounds %struct.VEC_edge_base, ptr %53, i64 0, i32 2, i64 %50
  %55 = load ptr, ptr %54, align 8, !tbaa !5
  %56 = load ptr, ptr @dump_file, align 8, !tbaa !5
  %57 = icmp eq ptr %56, null
  br i1 %57, label %77, label %58

58:                                               ; preds = %48
  %59 = load i32, ptr @dump_flags, align 4, !tbaa !20
  %60 = and i32 %59, 8
  %61 = icmp eq i32 %60, 0
  br i1 %61, label %77, label %62

62:                                               ; preds = %58
  %63 = trunc i64 %50 to i32
  %64 = load ptr, ptr %55, align 8, !tbaa !58
  %65 = getelementptr inbounds %struct.basic_block_def, ptr %64, i64 0, i32 9
  %66 = load i32, ptr %65, align 8, !tbaa !55
  %67 = getelementptr inbounds %struct.edge_def, ptr %55, i64 0, i32 1
  %68 = load ptr, ptr %67, align 8, !tbaa !60
  %69 = getelementptr inbounds %struct.basic_block_def, ptr %68, i64 0, i32 9
  %70 = load i32, ptr %69, align 8, !tbaa !55
  %71 = getelementptr inbounds %struct.edge_def, ptr %55, i64 0, i32 7
  %72 = load i32, ptr %71, align 8, !tbaa !108
  %73 = and i32 %72, 4096
  %74 = icmp eq i32 %73, 0
  %75 = select i1 %74, ptr @.str.50, ptr @.str.4
  %76 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef nonnull %56, ptr noundef nonnull @.str.49, i32 noundef %63, i32 noundef %66, i32 noundef %70, ptr noundef nonnull %75)
  br label %77

77:                                               ; preds = %62, %58, %48
  %78 = getelementptr inbounds %struct.edge_def, ptr %55, i64 0, i32 7
  %79 = load i32, ptr %78, align 8, !tbaa !108
  %80 = and i32 %79, 4096
  %81 = icmp eq i32 %80, 0
  br i1 %81, label %170, label %82

82:                                               ; preds = %77
  %83 = trunc i64 %50 to i32
  %84 = load i32, ptr %44, align 8, !tbaa !16
  %85 = icmp ult i32 %84, %83
  br i1 %85, label %86, label %87

86:                                               ; preds = %82
  call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 3103, ptr noundef nonnull @.str.28) #18
  br label %87

87:                                               ; preds = %82, %86
  %88 = getelementptr %struct.gimple_statement_phi, ptr %0, i64 0, i32 4, i64 %50, i32 0, i32 3
  %89 = load ptr, ptr %88, align 8, !tbaa !78
  %90 = load ptr, ptr %89, align 8, !tbaa !5
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %5) #18
  %91 = add nsw i32 %51, 1
  %92 = load i64, ptr %90, align 8
  %93 = and i64 %92, 65535
  %94 = icmp eq i64 %93, 141
  br i1 %94, label %95, label %97

95:                                               ; preds = %87
  %96 = call fastcc ptr @get_value_range(ptr noundef nonnull %90)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(32) %5, ptr noundef nonnull align 8 dereferenceable(32) %96, i64 32, i1 false), !tbaa.struct !174
  br label %150

97:                                               ; preds = %87
  %98 = getelementptr inbounds %struct.tree_common, ptr %90, i64 0, i32 2
  %99 = load ptr, ptr %98, align 8, !tbaa !16
  %100 = load i64, ptr %99, align 8
  %101 = trunc i64 %100 to i32
  %102 = and i32 %101, 65535
  %103 = add nsw i32 %102, -6
  %104 = icmp ult i32 %103, 3
  br i1 %104, label %105, label %148

105:                                              ; preds = %97
  %106 = and i64 %100, 2097152
  %107 = icmp ne i64 %106, 0
  %108 = load i32, ptr @flag_wrapv, align 4
  %109 = icmp ne i32 %108, 0
  %110 = select i1 %107, i1 true, i1 %109
  br i1 %110, label %148, label %111

111:                                              ; preds = %105
  %112 = getelementptr inbounds [0 x i32], ptr @tree_code_type, i64 0, i64 %93
  %113 = load i32, ptr %112, align 4, !tbaa !16
  %114 = icmp ne i32 %113, 1
  %115 = and i64 %92, 134217728
  %116 = icmp eq i64 %115, 0
  %117 = or i1 %116, %114
  br i1 %117, label %148, label %118

118:                                              ; preds = %111
  %119 = getelementptr inbounds %struct.tree_type, ptr %99, i64 0, i32 13
  %120 = load ptr, ptr %119, align 8, !tbaa !16
  %121 = icmp eq ptr %120, %90
  br i1 %121, label %144, label %122

122:                                              ; preds = %118
  %123 = icmp eq ptr %120, null
  br i1 %123, label %134, label %124

124:                                              ; preds = %122
  %125 = call i32 @operand_equal_p(ptr noundef nonnull %90, ptr noundef nonnull %120, i32 noundef 0) #18
  %126 = icmp eq i32 %125, 0
  br i1 %126, label %127, label %144

127:                                              ; preds = %124
  %128 = load ptr, ptr %98, align 8, !tbaa !16
  %129 = load i64, ptr %128, align 8
  %130 = trunc i64 %129 to i32
  %131 = and i32 %130, 65535
  %132 = add nsw i32 %131, -6
  %133 = icmp ult i32 %132, 3
  br i1 %133, label %134, label %148

134:                                              ; preds = %127, %122
  %135 = phi ptr [ %128, %127 ], [ %99, %122 ]
  %136 = getelementptr inbounds %struct.tree_type, ptr %135, i64 0, i32 14
  %137 = load ptr, ptr %136, align 8, !tbaa !16
  %138 = icmp eq ptr %137, %90
  br i1 %138, label %144, label %139

139:                                              ; preds = %134
  %140 = icmp eq ptr %137, null
  br i1 %140, label %148, label %141

141:                                              ; preds = %139
  %142 = call i32 @operand_equal_p(ptr noundef nonnull %90, ptr noundef nonnull %137, i32 noundef 0) #18
  %143 = icmp eq i32 %142, 0
  br i1 %143, label %148, label %144

144:                                              ; preds = %118, %134, %124, %141
  %145 = call ptr @copy_node_stat(ptr noundef nonnull %90) #18
  %146 = load i64, ptr %145, align 8
  %147 = and i64 %146, -134217729
  store i64 %147, ptr %145, align 8
  br label %148

148:                                              ; preds = %97, %127, %139, %105, %111, %144, %141
  %149 = phi ptr [ %145, %144 ], [ %90, %141 ], [ %90, %111 ], [ %90, %105 ], [ %90, %139 ], [ %90, %127 ], [ %90, %97 ]
  store i32 1, ptr %5, align 8, !tbaa !23
  store ptr %149, ptr %45, align 8, !tbaa !25
  store ptr %149, ptr %46, align 8, !tbaa !31
  store ptr null, ptr %47, align 8, !tbaa !26
  br label %150

150:                                              ; preds = %148, %95
  %151 = phi ptr [ %90, %95 ], [ %149, %148 ]
  %152 = load ptr, ptr @dump_file, align 8, !tbaa !5
  %153 = icmp eq ptr %152, null
  br i1 %153, label %167, label %154

154:                                              ; preds = %150
  %155 = load i32, ptr @dump_flags, align 4, !tbaa !20
  %156 = and i32 %155, 8
  %157 = icmp eq i32 %156, 0
  br i1 %157, label %167, label %158

158:                                              ; preds = %154
  %159 = call i32 @fputc(i32 9, ptr nonnull %152)
  %160 = load ptr, ptr @dump_file, align 8, !tbaa !5
  %161 = load i32, ptr @dump_flags, align 4, !tbaa !20
  call void @print_generic_expr(ptr noundef %160, ptr noundef nonnull %151, i32 noundef %161) #18
  %162 = load ptr, ptr @dump_file, align 8, !tbaa !5
  %163 = call i64 @fwrite(ptr nonnull @.str.51, i64 9, i64 1, ptr %162)
  %164 = load ptr, ptr @dump_file, align 8, !tbaa !5
  call void @dump_value_range(ptr noundef %164, ptr noundef nonnull %5)
  %165 = load ptr, ptr @dump_file, align 8, !tbaa !5
  %166 = call i32 @fputc(i32 10, ptr %165)
  br label %167

167:                                              ; preds = %158, %154, %150
  call fastcc void @vrp_meet(ptr noundef nonnull %4, ptr noundef nonnull %5)
  %168 = load i32, ptr %4, align 8
  %169 = icmp eq i32 %168, 3
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %5) #18
  br i1 %169, label %177, label %170

170:                                              ; preds = %167, %77
  %171 = phi i32 [ %168, %167 ], [ %49, %77 ]
  %172 = phi i32 [ %91, %167 ], [ %51, %77 ]
  %173 = add nuw nsw i64 %50, 1
  %174 = load i32, ptr %39, align 4, !tbaa !16
  %175 = zext i32 %174 to i64
  %176 = icmp ult i64 %173, %175
  br i1 %176, label %48, label %177, !llvm.loop !175

177:                                              ; preds = %170, %167, %38
  %178 = phi i32 [ %9, %38 ], [ 3, %167 ], [ %171, %170 ]
  %179 = phi i32 [ 0, %38 ], [ %91, %167 ], [ %172, %170 ]
  %180 = load ptr, ptr @cfun, align 8, !tbaa !5
  %181 = getelementptr inbounds %struct.function, ptr %180, i64 0, i32 4
  %182 = load ptr, ptr %181, align 8, !tbaa !176
  %183 = icmp eq ptr %182, null
  br i1 %183, label %332, label %184

184:                                              ; preds = %177
  %185 = getelementptr i8, ptr %0, i64 16
  %186 = load ptr, ptr %185, align 8, !tbaa !16
  %187 = icmp eq ptr %186, null
  br i1 %187, label %332, label %188

188:                                              ; preds = %184
  %189 = getelementptr inbounds %struct.basic_block_def, ptr %186, i64 0, i32 3
  %190 = load ptr, ptr %189, align 8, !tbaa !177
  %191 = icmp eq ptr %190, null
  br i1 %191, label %332, label %192

192:                                              ; preds = %188
  %193 = getelementptr inbounds %struct.loop, ptr %190, i64 0, i32 2
  %194 = load ptr, ptr %193, align 8, !tbaa !178
  %195 = icmp eq ptr %194, %186
  br i1 %195, label %196, label %332

196:                                              ; preds = %192
  %197 = icmp eq i32 %178, 2
  br i1 %197, label %335, label %198

198:                                              ; preds = %196
  %199 = call ptr @analyze_scalar_evolution(ptr noundef nonnull %190, ptr noundef %7) #18
  %200 = call ptr @loop_preheader_edge(ptr noundef nonnull %190) #18
  %201 = icmp eq ptr %200, null
  br i1 %201, label %202, label %206

202:                                              ; preds = %198
  %203 = load ptr, ptr @cfun, align 8, !tbaa !5
  %204 = getelementptr inbounds %struct.function, ptr %203, i64 0, i32 1
  %205 = load ptr, ptr %204, align 8, !tbaa !65
  br label %206

206:                                              ; preds = %202, %198
  %207 = phi ptr [ %205, %202 ], [ %200, %198 ]
  %208 = load ptr, ptr %207, align 8, !tbaa !5
  %209 = call ptr @instantiate_scev(ptr noundef %208, ptr noundef nonnull %190, ptr noundef %199) #18
  %210 = call zeroext i8 @is_gimple_min_invariant(ptr noundef %209) #18
  %211 = icmp eq i8 %210, 0
  br i1 %211, label %218, label %212

212:                                              ; preds = %206
  %213 = call zeroext i8 @is_gimple_min_invariant(ptr noundef %209) #18
  %214 = icmp eq i8 %213, 0
  br i1 %214, label %215, label %216

215:                                              ; preds = %212
  call void @fancy_abort(ptr noundef nonnull @.str.27, i32 noundef 515, ptr noundef nonnull @.str.28) #18
  br label %216

216:                                              ; preds = %215, %212
  %217 = call fastcc ptr @avoid_overflow_infinity(ptr noundef %209)
  store i32 1, ptr %4, align 8, !tbaa !23
  store ptr %217, ptr %14, align 8, !tbaa !25
  store ptr %217, ptr %15, align 8, !tbaa !31
  br label %335

218:                                              ; preds = %206
  %219 = load i64, ptr %209, align 8
  %220 = and i64 %219, 65535
  %221 = icmp eq i64 %220, 146
  br i1 %221, label %222, label %332

222:                                              ; preds = %218
  %223 = load i32, ptr %190, align 8, !tbaa !182
  %224 = call ptr @initial_condition_in_loop_num(ptr noundef nonnull %209, i32 noundef %223) #18
  %225 = load i32, ptr %190, align 8, !tbaa !182
  %226 = call ptr @evolution_part_in_loop_num(ptr noundef nonnull %209, i32 noundef %225) #18
  %227 = icmp eq ptr %226, null
  br i1 %227, label %332, label %228

228:                                              ; preds = %222
  %229 = call zeroext i8 @is_gimple_min_invariant(ptr noundef nonnull %226) #18
  %230 = icmp eq i8 %229, 0
  br i1 %230, label %332, label %231

231:                                              ; preds = %228
  %232 = load i64, ptr %224, align 8
  %233 = trunc i64 %232 to i16
  switch i16 %233, label %247 [
    i16 141, label %252
    i16 63, label %234
    i16 64, label %234
  ]

234:                                              ; preds = %231, %231
  %235 = getelementptr inbounds %struct.tree_exp, ptr %224, i64 0, i32 3
  %236 = load ptr, ptr %235, align 8, !tbaa !16
  %237 = load i64, ptr %236, align 8
  %238 = and i64 %237, 65535
  %239 = icmp eq i64 %238, 141
  br i1 %239, label %240, label %332

240:                                              ; preds = %234
  %241 = getelementptr inbounds %struct.tree_exp, ptr %224, i64 1
  %242 = load ptr, ptr %241, align 8, !tbaa !16
  %243 = load i64, ptr %242, align 8
  %244 = and i64 %243, 65535
  %245 = icmp eq i64 %244, 23
  %246 = zext i1 %245 to i8
  br label %249

247:                                              ; preds = %231
  %248 = call zeroext i8 @is_gimple_min_invariant(ptr noundef nonnull %224) #18
  br label %249

249:                                              ; preds = %247, %240
  %250 = phi i8 [ %248, %247 ], [ %246, %240 ]
  %251 = icmp eq i8 %250, 0
  br i1 %251, label %332, label %252

252:                                              ; preds = %249, %231
  %253 = call i32 @scev_direction(ptr noundef nonnull %209) #18
  %254 = icmp eq i32 %253, 2
  br i1 %254, label %332, label %255

255:                                              ; preds = %252
  %256 = getelementptr i8, ptr %209, i64 40
  %257 = load ptr, ptr %256, align 8, !tbaa !16
  %258 = getelementptr i8, ptr %257, i64 24
  %259 = load i64, ptr %258, align 8, !tbaa !16
  %260 = load ptr, ptr @cfun, align 8, !tbaa !5
  %261 = getelementptr inbounds %struct.function, ptr %260, i64 0, i32 4
  %262 = load ptr, ptr %261, align 8, !tbaa !176
  %263 = getelementptr inbounds %struct.loops, ptr %262, i64 0, i32 1
  %264 = load ptr, ptr %263, align 8, !tbaa !183
  %265 = and i64 %259, 4294967295
  %266 = getelementptr inbounds %struct.VEC_loop_p_base, ptr %264, i64 0, i32 2, i64 %265
  %267 = load ptr, ptr %266, align 8, !tbaa !5
  %268 = call zeroext i8 @scev_probably_wraps_p(ptr noundef nonnull %224, ptr noundef nonnull %226, ptr noundef nonnull %0, ptr noundef %267, i8 noundef zeroext 1) #18
  %269 = icmp eq i8 %268, 0
  br i1 %269, label %270, label %332

270:                                              ; preds = %255
  %271 = getelementptr inbounds %struct.tree_common, ptr %7, i64 0, i32 2
  %272 = load ptr, ptr %271, align 8, !tbaa !16
  %273 = load i64, ptr %272, align 8
  %274 = trunc i64 %273 to i16
  switch i16 %274, label %275 [
    i16 10, label %279
    i16 12, label %279
  ]

275:                                              ; preds = %270
  %276 = getelementptr inbounds %struct.tree_type, ptr %272, i64 0, i32 13
  %277 = load ptr, ptr %276, align 8, !tbaa !16
  %278 = icmp eq ptr %277, null
  br i1 %278, label %279, label %283

279:                                              ; preds = %275, %270, %270
  %280 = call ptr @lower_bound_in_type(ptr noundef nonnull %272, ptr noundef nonnull %272) #18
  %281 = load i64, ptr %272, align 8
  %282 = trunc i64 %281 to i16
  br label %283

283:                                              ; preds = %279, %275
  %284 = phi i16 [ %274, %275 ], [ %282, %279 ]
  %285 = phi ptr [ %277, %275 ], [ %280, %279 ]
  switch i16 %284, label %286 [
    i16 10, label %290
    i16 12, label %290
  ]

286:                                              ; preds = %283
  %287 = getelementptr inbounds %struct.tree_type, ptr %272, i64 0, i32 14
  %288 = load ptr, ptr %287, align 8, !tbaa !16
  %289 = icmp eq ptr %288, null
  br i1 %289, label %290, label %292

290:                                              ; preds = %286, %283, %283
  %291 = call ptr @upper_bound_in_type(ptr noundef nonnull %272, ptr noundef nonnull %272) #18
  br label %292

292:                                              ; preds = %290, %286
  %293 = phi ptr [ %291, %290 ], [ %288, %286 ]
  switch i32 %178, label %332 [
    i32 3, label %294
    i32 0, label %294
    i32 1, label %302
  ]

294:                                              ; preds = %292, %292
  %295 = icmp eq i32 %253, 1
  %296 = select i1 %295, ptr %285, ptr %224
  %297 = select i1 %295, ptr %224, ptr %293
  %298 = call fastcc i32 @compare_values(ptr noundef %296, ptr noundef %297)
  %299 = icmp eq i32 %298, 1
  br i1 %299, label %332, label %300

300:                                              ; preds = %294
  %301 = load ptr, ptr %17, align 8, !tbaa !26
  call fastcc void @set_value_range(ptr noundef nonnull %4, i32 noundef 1, ptr noundef %296, ptr noundef %297, ptr noundef %301)
  br label %332

302:                                              ; preds = %292
  %303 = load ptr, ptr %14, align 8, !tbaa !25
  %304 = load ptr, ptr %15, align 8, !tbaa !31
  %305 = icmp eq i32 %253, 1
  br i1 %305, label %306, label %317

306:                                              ; preds = %302
  %307 = call fastcc i32 @compare_values(ptr noundef nonnull %224, ptr noundef %304)
  %308 = icmp eq i32 %307, -1
  br i1 %308, label %309, label %312

309:                                              ; preds = %306
  %310 = call fastcc i32 @compare_values(ptr noundef %303, ptr noundef nonnull %224)
  %311 = icmp eq i32 %310, 1
  br i1 %311, label %332, label %312

312:                                              ; preds = %309, %306
  %313 = phi ptr [ %224, %309 ], [ %304, %306 ]
  %314 = call fastcc zeroext i8 @is_negative_overflow_infinity(ptr noundef %303), !range !79
  %315 = icmp eq i8 %314, 0
  %316 = select i1 %315, ptr %303, ptr %285
  br label %328

317:                                              ; preds = %302
  %318 = call fastcc i32 @compare_values(ptr noundef nonnull %224, ptr noundef %303)
  %319 = icmp eq i32 %318, 1
  br i1 %319, label %320, label %323

320:                                              ; preds = %317
  %321 = call fastcc i32 @compare_values(ptr noundef nonnull %224, ptr noundef %304)
  %322 = icmp eq i32 %321, 1
  br i1 %322, label %332, label %323

323:                                              ; preds = %320, %317
  %324 = phi ptr [ %224, %320 ], [ %303, %317 ]
  %325 = call fastcc zeroext i8 @is_positive_overflow_infinity(ptr noundef %304), !range !79
  %326 = icmp eq i8 %325, 0
  %327 = select i1 %326, ptr %304, ptr %293
  br label %328

328:                                              ; preds = %323, %312
  %329 = phi ptr [ %316, %312 ], [ %324, %323 ]
  %330 = phi ptr [ %313, %312 ], [ %327, %323 ]
  %331 = load ptr, ptr %17, align 8, !tbaa !26
  call fastcc void @set_value_range(ptr noundef nonnull %4, i32 noundef 1, ptr noundef %329, ptr noundef %330, ptr noundef %331)
  br label %332

332:                                              ; preds = %184, %328, %320, %309, %300, %294, %292, %255, %252, %249, %234, %228, %222, %218, %192, %188, %177
  %333 = load i32, ptr %4, align 8
  %334 = icmp eq i32 %333, 3
  br i1 %334, label %494, label %335

335:                                              ; preds = %216, %196, %332
  %336 = phi i32 [ %333, %332 ], [ 2, %196 ], [ 1, %216 ]
  %337 = load ptr, ptr @vr_phi_edge_counts, align 8, !tbaa !5
  %338 = getelementptr inbounds %struct.tree_ssa_name, ptr %7, i64 0, i32 3
  %339 = load i32, ptr %338, align 8, !tbaa !16
  %340 = zext i32 %339 to i64
  %341 = getelementptr inbounds i32, ptr %337, i64 %340
  %342 = load i32, ptr %341, align 4, !tbaa !20
  store i32 %179, ptr %341, align 4, !tbaa !20
  %343 = load i32, ptr %8, align 8, !tbaa !23
  %344 = icmp ne i32 %343, 1
  %345 = icmp ne i32 %336, 1
  %346 = or i1 %345, %344
  %347 = icmp sgt i32 %179, %342
  %348 = select i1 %346, i1 true, i1 %347
  br i1 %348, label %491, label %349

349:                                              ; preds = %335
  %350 = getelementptr inbounds %struct.tree_common, ptr %7, i64 0, i32 2
  %351 = load ptr, ptr %350, align 8, !tbaa !16
  %352 = load i64, ptr %351, align 8
  %353 = trunc i64 %352 to i16
  switch i16 %353, label %354 [
    i16 10, label %491
    i16 12, label %491
  ]

354:                                              ; preds = %349
  %355 = load ptr, ptr %10, align 8, !tbaa !25
  %356 = load ptr, ptr %14, align 8, !tbaa !25
  call void @llvm.lifetime.start.p0(i64 1, ptr nonnull %3) #18
  store i8 0, ptr %3, align 1, !tbaa !16
  %357 = call fastcc i32 @compare_values_warnv(ptr noundef %355, ptr noundef %356, ptr noundef nonnull %3)
  %358 = load i8, ptr %3, align 1, !tbaa !16
  %359 = icmp eq i8 %358, 0
  br i1 %359, label %367, label %360

360:                                              ; preds = %354
  %361 = call zeroext i8 @is_gimple_min_invariant(ptr noundef %355) #18
  %362 = icmp eq i8 %361, 0
  br i1 %362, label %366, label %363

363:                                              ; preds = %360
  %364 = call zeroext i8 @is_gimple_min_invariant(ptr noundef %356) #18
  %365 = icmp eq i8 %364, 0
  br i1 %365, label %366, label %367

366:                                              ; preds = %363, %360
  br label %367

367:                                              ; preds = %354, %363, %366
  %368 = phi i32 [ %357, %363 ], [ -2, %366 ], [ %357, %354 ]
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %3) #18
  %369 = load ptr, ptr %11, align 8, !tbaa !31
  %370 = load ptr, ptr %15, align 8, !tbaa !31
  call void @llvm.lifetime.start.p0(i64 1, ptr nonnull %2) #18
  store i8 0, ptr %2, align 1, !tbaa !16
  %371 = call fastcc i32 @compare_values_warnv(ptr noundef %369, ptr noundef %370, ptr noundef nonnull %2)
  %372 = load i8, ptr %2, align 1, !tbaa !16
  %373 = icmp eq i8 %372, 0
  br i1 %373, label %381, label %374

374:                                              ; preds = %367
  %375 = call zeroext i8 @is_gimple_min_invariant(ptr noundef %369) #18
  %376 = icmp eq i8 %375, 0
  br i1 %376, label %380, label %377

377:                                              ; preds = %374
  %378 = call zeroext i8 @is_gimple_min_invariant(ptr noundef %370) #18
  %379 = icmp eq i8 %378, 0
  br i1 %379, label %380, label %381

380:                                              ; preds = %377, %374
  br label %381

381:                                              ; preds = %367, %377, %380
  %382 = phi i32 [ %371, %377 ], [ -2, %380 ], [ %371, %367 ]
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %2) #18
  %383 = icmp eq i32 %368, 0
  br i1 %383, label %436, label %384

384:                                              ; preds = %381
  %385 = getelementptr inbounds %struct.tree_common, ptr %370, i64 0, i32 2
  %386 = load ptr, ptr %385, align 8, !tbaa !16
  %387 = load i64, ptr %386, align 8
  %388 = trunc i64 %387 to i32
  %389 = and i32 %388, 65535
  %390 = add nsw i32 %389, -6
  %391 = icmp ult i32 %390, 3
  br i1 %391, label %392, label %401

392:                                              ; preds = %384
  %393 = getelementptr inbounds %struct.tree_type, ptr %386, i64 0, i32 14
  %394 = load ptr, ptr %393, align 8, !tbaa !16
  %395 = icmp eq ptr %394, %370
  br i1 %395, label %494, label %396

396:                                              ; preds = %392
  %397 = icmp eq ptr %394, null
  br i1 %397, label %401, label %398

398:                                              ; preds = %396
  %399 = call i32 @operand_equal_p(ptr noundef nonnull %370, ptr noundef nonnull %394, i32 noundef 0) #18
  %400 = icmp eq i32 %399, 0
  br i1 %400, label %401, label %494

401:                                              ; preds = %384, %396, %398
  %402 = getelementptr inbounds %struct.tree_common, ptr %356, i64 0, i32 2
  %403 = load ptr, ptr %402, align 8, !tbaa !16
  %404 = getelementptr inbounds %struct.tree_type, ptr %403, i64 0, i32 13
  %405 = load ptr, ptr %404, align 8, !tbaa !16
  %406 = call fastcc i32 @compare_values(ptr noundef %405, ptr noundef nonnull %370)
  %407 = icmp sgt i32 %406, 0
  br i1 %407, label %494, label %408

408:                                              ; preds = %401
  %409 = load ptr, ptr %402, align 8, !tbaa !16
  %410 = load i64, ptr %409, align 8
  %411 = trunc i64 %410 to i32
  %412 = and i32 %411, 65535
  %413 = add nsw i32 %412, -6
  %414 = icmp ult i32 %413, 3
  br i1 %414, label %415, label %425

415:                                              ; preds = %408
  %416 = and i64 %410, 2097152
  %417 = icmp ne i64 %416, 0
  %418 = load i32, ptr @flag_wrapv, align 4
  %419 = icmp ne i32 %418, 0
  %420 = select i1 %417, i1 true, i1 %419
  br i1 %420, label %425, label %421

421:                                              ; preds = %415
  %422 = call fastcc zeroext i8 @vrp_var_may_overflow(ptr noundef nonnull %7, ptr noundef nonnull %0), !range !79
  %423 = icmp eq i8 %422, 0
  %424 = load ptr, ptr %402, align 8, !tbaa !16
  br i1 %423, label %425, label %429

425:                                              ; preds = %408, %421, %415
  %426 = phi ptr [ %409, %408 ], [ %424, %421 ], [ %409, %415 ]
  %427 = getelementptr inbounds %struct.tree_type, ptr %426, i64 0, i32 13
  %428 = load ptr, ptr %427, align 8, !tbaa !16
  br label %434

429:                                              ; preds = %421
  %430 = call fastcc zeroext i8 @supports_overflow_infinity(ptr noundef %424), !range !79
  %431 = icmp eq i8 %430, 0
  br i1 %431, label %494, label %432

432:                                              ; preds = %429
  %433 = call fastcc ptr @negative_overflow_infinity(ptr noundef %424)
  br label %434

434:                                              ; preds = %432, %425
  %435 = phi ptr [ %428, %425 ], [ %433, %432 ]
  store ptr %435, ptr %14, align 8, !tbaa !25
  br label %436

436:                                              ; preds = %434, %381
  %437 = phi ptr [ %356, %381 ], [ %435, %434 ]
  %438 = icmp eq i32 %382, 0
  br i1 %438, label %491, label %439

439:                                              ; preds = %436
  %440 = getelementptr inbounds %struct.tree_common, ptr %437, i64 0, i32 2
  %441 = load ptr, ptr %440, align 8, !tbaa !16
  %442 = load i64, ptr %441, align 8
  %443 = trunc i64 %442 to i32
  %444 = and i32 %443, 65535
  %445 = add nsw i32 %444, -6
  %446 = icmp ult i32 %445, 3
  br i1 %446, label %447, label %456

447:                                              ; preds = %439
  %448 = getelementptr inbounds %struct.tree_type, ptr %441, i64 0, i32 13
  %449 = load ptr, ptr %448, align 8, !tbaa !16
  %450 = icmp eq ptr %449, %437
  br i1 %450, label %494, label %451

451:                                              ; preds = %447
  %452 = icmp eq ptr %449, null
  br i1 %452, label %456, label %453

453:                                              ; preds = %451
  %454 = call i32 @operand_equal_p(ptr noundef nonnull %437, ptr noundef nonnull %449, i32 noundef 0) #18
  %455 = icmp eq i32 %454, 0
  br i1 %455, label %456, label %494

456:                                              ; preds = %439, %451, %453
  %457 = getelementptr inbounds %struct.tree_common, ptr %370, i64 0, i32 2
  %458 = load ptr, ptr %457, align 8, !tbaa !16
  %459 = getelementptr inbounds %struct.tree_type, ptr %458, i64 0, i32 14
  %460 = load ptr, ptr %459, align 8, !tbaa !16
  %461 = call fastcc i32 @compare_values(ptr noundef %460, ptr noundef nonnull %437)
  %462 = icmp slt i32 %461, 0
  br i1 %462, label %494, label %463

463:                                              ; preds = %456
  %464 = load ptr, ptr %457, align 8, !tbaa !16
  %465 = load i64, ptr %464, align 8
  %466 = trunc i64 %465 to i32
  %467 = and i32 %466, 65535
  %468 = add nsw i32 %467, -6
  %469 = icmp ult i32 %468, 3
  br i1 %469, label %470, label %480

470:                                              ; preds = %463
  %471 = and i64 %465, 2097152
  %472 = icmp ne i64 %471, 0
  %473 = load i32, ptr @flag_wrapv, align 4
  %474 = icmp ne i32 %473, 0
  %475 = select i1 %472, i1 true, i1 %474
  br i1 %475, label %480, label %476

476:                                              ; preds = %470
  %477 = call fastcc zeroext i8 @vrp_var_may_overflow(ptr noundef nonnull %7, ptr noundef nonnull %0), !range !79
  %478 = icmp eq i8 %477, 0
  %479 = load ptr, ptr %457, align 8, !tbaa !16
  br i1 %478, label %480, label %484

480:                                              ; preds = %463, %476, %470
  %481 = phi ptr [ %464, %463 ], [ %479, %476 ], [ %464, %470 ]
  %482 = getelementptr inbounds %struct.tree_type, ptr %481, i64 0, i32 14
  %483 = load ptr, ptr %482, align 8, !tbaa !16
  br label %489

484:                                              ; preds = %476
  %485 = call fastcc zeroext i8 @supports_overflow_infinity(ptr noundef %479), !range !79
  %486 = icmp eq i8 %485, 0
  br i1 %486, label %494, label %487

487:                                              ; preds = %484
  %488 = call fastcc ptr @positive_overflow_infinity(ptr noundef %479)
  br label %489

489:                                              ; preds = %487, %480
  %490 = phi ptr [ %483, %480 ], [ %488, %487 ]
  store ptr %490, ptr %15, align 8, !tbaa !31
  br label %491

491:                                              ; preds = %489, %436, %349, %349, %335
  %492 = call fastcc zeroext i8 @update_value_range(ptr noundef nonnull %7, ptr noundef nonnull %4), !range !79
  %493 = zext i8 %492 to i32
  br label %498

494:                                              ; preds = %447, %392, %484, %453, %456, %429, %398, %401, %332
  store i32 3, ptr %8, align 8, !tbaa !23
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %10, i8 0, i64 16, i1 false)
  %495 = load ptr, ptr %12, align 8, !tbaa !26
  %496 = icmp eq ptr %495, null
  br i1 %496, label %498, label %497

497:                                              ; preds = %494
  call void @bitmap_clear(ptr noundef nonnull %495) #18
  br label %498

498:                                              ; preds = %497, %494, %491
  %499 = phi i32 [ %493, %491 ], [ 2, %494 ], [ 2, %497 ]
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %4) #18
  ret i32 %499
}

declare void @update_ssa(i32 noundef) local_unnamed_addr #3

declare void @remove_edge(ptr noundef) local_unnamed_addr #3

declare void @free_dominance_info(i32 noundef) local_unnamed_addr #3

declare void @threadedge_finalize_values() local_unnamed_addr #3

declare void @scev_finalize() local_unnamed_addr #3

declare void @loop_optimizer_finalize() local_unnamed_addr #3

declare void @calculate_dominance_info(i32 noundef) local_unnamed_addr #3

declare void @dump_function_to_file(ptr noundef, ptr noundef, i32 noundef) local_unnamed_addr #3

; Function Attrs: mustprogress nounwind willreturn allockind("free") memory(argmem: readwrite, inaccessiblemem: readwrite)
declare void @free(ptr allocptr nocapture noundef) local_unnamed_addr #11

declare void @bitmap_obstack_free(ptr noundef) local_unnamed_addr #3

declare i32 @pre_and_rev_post_order_compute(ptr noundef, ptr noundef, i8 noundef zeroext) local_unnamed_addr #3

declare ptr @sbitmap_alloc(i32 noundef) local_unnamed_addr #3

declare void @sbitmap_zero(ptr noundef) local_unnamed_addr #3

declare zeroext i8 @sbitmap_empty_p(ptr noundef) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nounwind willreturn memory(argmem: readwrite)
declare void @llvm.memcpy.p0.p0.i64(ptr noalias nocapture writeonly, ptr noalias nocapture readonly, i64, i1 immarg) #12

declare void @sbitmap_a_or_b(ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

declare ptr @last_stmt(ptr noundef) local_unnamed_addr #3

; Function Attrs: inlinehint nounwind sspstrong uwtable
define internal fastcc i32 @gimple_assign_rhs_code(ptr nocapture noundef readonly %0) unnamed_addr #2 {
  %2 = load i32, ptr %0, align 8
  %3 = trunc i32 %2 to i8
  switch i8 %3, label %6 [
    i8 6, label %4
    i8 1, label %4
    i8 8, label %7
  ]

4:                                                ; preds = %1, %1
  %5 = lshr i32 %2, 16
  br label %7

6:                                                ; preds = %1
  tail call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1446, ptr noundef nonnull @.str.28) #18
  br label %7

7:                                                ; preds = %1, %4, %6
  %8 = phi i32 [ %5, %4 ], [ 0, %6 ], [ 59, %1 ]
  %9 = zext i32 %8 to i64
  %10 = getelementptr inbounds [0 x i8], ptr @gimple_rhs_class_table, i64 0, i64 %9
  %11 = load i8, ptr %10, align 1, !tbaa !16
  %12 = icmp eq i8 %11, 3
  br i1 %12, label %13, label %33

13:                                               ; preds = %7
  %14 = load i32, ptr %0, align 8
  %15 = and i32 %14, 255
  %16 = add nsw i32 %15, -1
  %17 = icmp ult i32 %16, 9
  tail call void @llvm.assume(i1 %17)
  %18 = zext i32 %15 to i64
  %19 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %18
  %20 = load i32, ptr %19, align 4, !tbaa !16
  %21 = zext i32 %20 to i64
  %22 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %21
  %23 = load i64, ptr %22, align 8, !tbaa !36
  %24 = icmp eq i64 %23, 0
  br i1 %24, label %25, label %26

25:                                               ; preds = %13
  tail call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1622, ptr noundef nonnull @.str.28) #18
  br label %26

26:                                               ; preds = %25, %13
  %27 = getelementptr inbounds i8, ptr %0, i64 %23
  %28 = getelementptr inbounds ptr, ptr %27, i64 1
  %29 = load ptr, ptr %28, align 8, !tbaa !5
  %30 = load i64, ptr %29, align 8
  %31 = trunc i64 %30 to i32
  %32 = and i32 %31, 65535
  br label %33

33:                                               ; preds = %26, %7
  %34 = phi i32 [ %32, %26 ], [ %8, %7 ]
  ret i32 %34
}

; Function Attrs: inlinehint nounwind sspstrong uwtable
define internal fastcc ptr @gimple_assign_rhs1(ptr nocapture noundef readonly %0) unnamed_addr #2 {
  %2 = load i32, ptr %0, align 8
  %3 = and i32 %2, 255
  %4 = add nsw i32 %3, -10
  %5 = icmp ult i32 %4, -9
  br i1 %5, label %19, label %6

6:                                                ; preds = %1
  %7 = zext i32 %3 to i64
  %8 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %7
  %9 = load i32, ptr %8, align 4, !tbaa !16
  %10 = zext i32 %9 to i64
  %11 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %10
  %12 = load i64, ptr %11, align 8, !tbaa !36
  %13 = icmp eq i64 %12, 0
  br i1 %13, label %14, label %15

14:                                               ; preds = %6
  tail call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1622, ptr noundef nonnull @.str.28) #18
  br label %15

15:                                               ; preds = %14, %6
  %16 = getelementptr inbounds i8, ptr %0, i64 %12
  %17 = getelementptr inbounds ptr, ptr %16, i64 1
  %18 = load ptr, ptr %17, align 8, !tbaa !5
  br label %19

19:                                               ; preds = %1, %15
  %20 = phi ptr [ %18, %15 ], [ null, %1 ]
  ret ptr %20
}

; Function Attrs: inlinehint nounwind sspstrong uwtable
define internal fastcc zeroext i8 @has_single_use(ptr noundef %0) unnamed_addr #2 {
  %2 = getelementptr inbounds %struct.tree_ssa_name, ptr %0, i64 0, i32 5
  %3 = getelementptr inbounds %struct.tree_ssa_name, ptr %0, i64 0, i32 5, i32 1
  %4 = load ptr, ptr %3, align 8, !tbaa !96
  %5 = icmp eq ptr %2, %4
  br i1 %5, label %22, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %struct.ssa_use_operand_d, ptr %4, i64 0, i32 1
  %8 = load ptr, ptr %7, align 8, !tbaa !96
  %9 = icmp eq ptr %2, %8
  br i1 %9, label %10, label %17

10:                                               ; preds = %6
  %11 = getelementptr inbounds %struct.ssa_use_operand_d, ptr %4, i64 0, i32 2
  %12 = load ptr, ptr %11, align 8, !tbaa !16
  %13 = load i32, ptr %12, align 8
  %14 = and i32 %13, 255
  %15 = icmp ne i32 %14, 2
  %16 = zext i1 %15 to i8
  br label %22

17:                                               ; preds = %6
  %18 = load i32, ptr @flag_var_tracking_assignments, align 4, !tbaa !20
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %22, label %20

20:                                               ; preds = %17
  %21 = tail call zeroext i8 @single_imm_use_1(ptr noundef nonnull %2, ptr noundef null, ptr noundef null) #18
  br label %22

22:                                               ; preds = %17, %1, %20, %10
  %23 = phi i8 [ %16, %10 ], [ %21, %20 ], [ 0, %1 ], [ 0, %17 ]
  ret i8 %23
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc void @register_new_assert_for(ptr nocapture noundef readonly %0, ptr noundef %1, i32 noundef %2, ptr noundef %3, ptr noundef %4, ptr noundef %5, ptr nocapture noundef readonly byval(%struct.gimple_stmt_iterator) align 8 %6) unnamed_addr #9 {
  %8 = load i64, ptr %3, align 8
  %9 = and i64 %8, 134283263
  %10 = icmp eq i64 %9, 134217751
  br i1 %10, label %11, label %19

11:                                               ; preds = %7
  %12 = getelementptr inbounds %struct.tree_common, ptr %3, i64 0, i32 2
  %13 = load ptr, ptr %12, align 8, !tbaa !16
  %14 = getelementptr inbounds %struct.tree_int_cst, ptr %3, i64 0, i32 1
  %15 = load i64, ptr %14, align 8, !tbaa !16
  %16 = getelementptr inbounds %struct.tree_int_cst, ptr %3, i64 0, i32 1, i32 1
  %17 = load i64, ptr %16, align 8, !tbaa !16
  %18 = tail call ptr @build_int_cst_wide(ptr noundef %13, i64 noundef %15, i64 noundef %17) #18
  br label %19

19:                                               ; preds = %11, %7
  %20 = phi ptr [ %18, %11 ], [ %3, %7 ]
  %21 = icmp eq ptr %4, null
  br i1 %21, label %22, label %25

22:                                               ; preds = %19
  %23 = getelementptr inbounds %struct.edge_def, ptr %5, i64 0, i32 1
  %24 = load ptr, ptr %23, align 8, !tbaa !60
  br label %25

25:                                               ; preds = %19, %22
  %26 = phi ptr [ %24, %22 ], [ %4, %19 ]
  %27 = load ptr, ptr @asserts_for, align 8, !tbaa !5
  %28 = getelementptr inbounds %struct.tree_ssa_name, ptr %0, i64 0, i32 3
  %29 = load i32, ptr %28, align 8, !tbaa !16
  %30 = zext i32 %29 to i64
  %31 = getelementptr inbounds ptr, ptr %27, i64 %30
  %32 = load ptr, ptr %31, align 8, !tbaa !5
  %33 = icmp eq ptr %32, null
  br i1 %33, label %114, label %34

34:                                               ; preds = %25
  %35 = icmp eq ptr %5, null
  %36 = getelementptr inbounds %struct.edge_def, ptr %5, i64 0, i32 1
  br i1 %35, label %37, label %68

37:                                               ; preds = %34, %64
  %38 = phi ptr [ %66, %64 ], [ %32, %34 ]
  %39 = getelementptr inbounds %struct.assert_locus_d, ptr %38, i64 0, i32 3
  %40 = load i32, ptr %39, align 8, !tbaa !61
  %41 = icmp eq i32 %40, %2
  br i1 %41, label %42, label %64

42:                                               ; preds = %37
  %43 = getelementptr inbounds %struct.assert_locus_d, ptr %38, i64 0, i32 4
  %44 = load ptr, ptr %43, align 8, !tbaa !62
  %45 = icmp eq ptr %44, %20
  br i1 %45, label %49, label %46

46:                                               ; preds = %42
  %47 = tail call i32 @operand_equal_p(ptr noundef %44, ptr noundef %20, i32 noundef 0) #18
  %48 = icmp eq i32 %47, 0
  br i1 %48, label %64, label %49

49:                                               ; preds = %46, %42
  %50 = getelementptr inbounds %struct.assert_locus_d, ptr %38, i64 0, i32 5
  %51 = load ptr, ptr %50, align 8, !tbaa !97
  %52 = icmp eq ptr %51, %1
  br i1 %52, label %56, label %53

53:                                               ; preds = %49
  %54 = tail call i32 @operand_equal_p(ptr noundef %51, ptr noundef %1, i32 noundef 0) #18
  %55 = icmp eq i32 %54, 0
  br i1 %55, label %64, label %56

56:                                               ; preds = %53, %49
  %57 = load ptr, ptr %38, align 8, !tbaa !53
  %58 = tail call zeroext i8 @dominated_by_p(i32 noundef 1, ptr noundef %26, ptr noundef %57) #18
  %59 = icmp eq i8 %58, 0
  br i1 %59, label %60, label %136

60:                                               ; preds = %56
  %61 = load ptr, ptr %38, align 8, !tbaa !53
  %62 = tail call zeroext i8 @dominated_by_p(i32 noundef 1, ptr noundef %61, ptr noundef %26) #18
  %63 = icmp eq i8 %62, 0
  br i1 %63, label %64, label %106

64:                                               ; preds = %60, %53, %46, %37
  %65 = getelementptr inbounds %struct.assert_locus_d, ptr %38, i64 0, i32 6
  %66 = load ptr, ptr %65, align 8, !tbaa !98
  %67 = icmp eq ptr %66, null
  br i1 %67, label %114, label %37, !llvm.loop !99

68:                                               ; preds = %34, %110
  %69 = phi ptr [ %112, %110 ], [ %32, %34 ]
  %70 = getelementptr inbounds %struct.assert_locus_d, ptr %69, i64 0, i32 3
  %71 = load i32, ptr %70, align 8, !tbaa !61
  %72 = icmp eq i32 %71, %2
  br i1 %72, label %73, label %110

73:                                               ; preds = %68
  %74 = getelementptr inbounds %struct.assert_locus_d, ptr %69, i64 0, i32 4
  %75 = load ptr, ptr %74, align 8, !tbaa !62
  %76 = icmp eq ptr %75, %20
  br i1 %76, label %80, label %77

77:                                               ; preds = %73
  %78 = tail call i32 @operand_equal_p(ptr noundef %75, ptr noundef %20, i32 noundef 0) #18
  %79 = icmp eq i32 %78, 0
  br i1 %79, label %110, label %80

80:                                               ; preds = %77, %73
  %81 = getelementptr inbounds %struct.assert_locus_d, ptr %69, i64 0, i32 5
  %82 = load ptr, ptr %81, align 8, !tbaa !97
  %83 = icmp eq ptr %82, %1
  br i1 %83, label %87, label %84

84:                                               ; preds = %80
  %85 = tail call i32 @operand_equal_p(ptr noundef %82, ptr noundef %1, i32 noundef 0) #18
  %86 = icmp eq i32 %85, 0
  br i1 %86, label %110, label %87

87:                                               ; preds = %84, %80
  %88 = load ptr, ptr %5, align 8, !tbaa !58
  %89 = getelementptr inbounds %struct.basic_block_def, ptr %88, i64 0, i32 1
  %90 = load ptr, ptr %89, align 8, !tbaa !95
  %91 = icmp eq ptr %90, null
  br i1 %91, label %102, label %92

92:                                               ; preds = %87
  %93 = load i32, ptr %90, align 8, !tbaa !76
  %94 = icmp ugt i32 %93, 1
  br i1 %94, label %95, label %102

95:                                               ; preds = %92
  %96 = load ptr, ptr %36, align 8, !tbaa !60
  %97 = load ptr, ptr %96, align 8, !tbaa !173
  %98 = icmp eq ptr %97, null
  br i1 %98, label %102, label %99

99:                                               ; preds = %95
  %100 = load i32, ptr %97, align 8, !tbaa !76
  %101 = icmp ugt i32 %100, 1
  br i1 %101, label %110, label %102

102:                                              ; preds = %95, %87, %99, %92
  %103 = load ptr, ptr %69, align 8, !tbaa !53
  %104 = tail call zeroext i8 @dominated_by_p(i32 noundef 1, ptr noundef %103, ptr noundef %26) #18
  %105 = icmp eq i8 %104, 0
  br i1 %105, label %110, label %106

106:                                              ; preds = %102, %60
  %107 = phi ptr [ %38, %60 ], [ %69, %102 ]
  store ptr %26, ptr %107, align 8, !tbaa !53
  %108 = getelementptr inbounds %struct.assert_locus_d, ptr %107, i64 0, i32 1
  store ptr %5, ptr %108, align 8, !tbaa !57
  %109 = getelementptr inbounds %struct.assert_locus_d, ptr %107, i64 0, i32 2
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(24) %109, ptr noundef nonnull align 8 dereferenceable(24) %6, i64 24, i1 false), !tbaa.struct !100
  br label %136

110:                                              ; preds = %99, %102, %84, %77, %68
  %111 = getelementptr inbounds %struct.assert_locus_d, ptr %69, i64 0, i32 6
  %112 = load ptr, ptr %111, align 8, !tbaa !98
  %113 = icmp eq ptr %112, null
  br i1 %113, label %114, label %68, !llvm.loop !99

114:                                              ; preds = %110, %64, %25
  %115 = phi ptr [ null, %25 ], [ %38, %64 ], [ %69, %110 ]
  %116 = tail call ptr @xmalloc(i64 noundef 72) #18
  store ptr %26, ptr %116, align 8, !tbaa !53
  %117 = getelementptr inbounds %struct.assert_locus_d, ptr %116, i64 0, i32 1
  store ptr %5, ptr %117, align 8, !tbaa !57
  %118 = getelementptr inbounds %struct.assert_locus_d, ptr %116, i64 0, i32 2
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(24) %118, ptr noundef nonnull align 8 dereferenceable(24) %6, i64 24, i1 false), !tbaa.struct !100
  %119 = getelementptr inbounds %struct.assert_locus_d, ptr %116, i64 0, i32 3
  store i32 %2, ptr %119, align 8, !tbaa !61
  %120 = getelementptr inbounds %struct.assert_locus_d, ptr %116, i64 0, i32 4
  store ptr %20, ptr %120, align 8, !tbaa !62
  %121 = getelementptr inbounds %struct.assert_locus_d, ptr %116, i64 0, i32 5
  store ptr %1, ptr %121, align 8, !tbaa !97
  %122 = getelementptr inbounds %struct.assert_locus_d, ptr %116, i64 0, i32 6
  store ptr null, ptr %122, align 8, !tbaa !98
  %123 = icmp eq ptr %115, null
  br i1 %123, label %126, label %124

124:                                              ; preds = %114
  %125 = getelementptr inbounds %struct.assert_locus_d, ptr %115, i64 0, i32 6
  br label %131

126:                                              ; preds = %114
  %127 = load ptr, ptr @asserts_for, align 8, !tbaa !5
  %128 = load i32, ptr %28, align 8, !tbaa !16
  %129 = zext i32 %128 to i64
  %130 = getelementptr inbounds ptr, ptr %127, i64 %129
  br label %131

131:                                              ; preds = %126, %124
  %132 = phi ptr [ %130, %126 ], [ %125, %124 ]
  store ptr %116, ptr %132, align 8, !tbaa !5
  %133 = load ptr, ptr @need_assert_for, align 8, !tbaa !5
  %134 = load i32, ptr %28, align 8, !tbaa !16
  %135 = tail call zeroext i8 @bitmap_set_bit(ptr noundef %133, i32 noundef %134) #18
  br label %136

136:                                              ; preds = %56, %131, %106
  ret void
}

declare void @gsi_start_phis(ptr sret(%struct.gimple_stmt_iterator) align 8, ptr noundef) local_unnamed_addr #3

declare void @gsi_for_stmt(ptr sret(%struct.gimple_stmt_iterator) align 8, ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc zeroext i8 @register_edge_assert_for(ptr noundef %0, ptr noundef %1, ptr noundef byval(%struct.gimple_stmt_iterator) align 8 %2, i32 noundef %3, ptr noundef %4, ptr noundef %5) unnamed_addr #9 {
  %7 = alloca ptr, align 8
  %8 = alloca i32, align 4
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %7) #18
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %8) #18
  %9 = getelementptr inbounds %struct.edge_def, ptr %1, i64 0, i32 7
  %10 = load i32, ptr %9, align 8, !tbaa !108
  %11 = lshr i32 %10, 11
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = load i64, ptr %0, align 8
  %15 = and i64 %14, 4194304
  %16 = icmp eq i64 %15, 0
  br i1 %16, label %17, label %298

17:                                               ; preds = %6
  %18 = call fastcc zeroext i8 @extract_code_and_val_from_cond_with_ops(ptr noundef nonnull %0, i32 noundef %3, ptr noundef %4, ptr noundef %5, i8 noundef zeroext %13, ptr noundef nonnull %8, ptr noundef nonnull %7), !range !79
  %19 = icmp eq i8 %18, 0
  br i1 %19, label %298, label %20

20:                                               ; preds = %17
  %21 = tail call fastcc zeroext i8 @register_edge_assert_for_2(ptr noundef nonnull %0, ptr noundef nonnull %1, ptr noundef nonnull byval(%struct.gimple_stmt_iterator) align 8 %2, i32 noundef %3, ptr noundef %4, ptr noundef %5, i8 noundef zeroext %13), !range !79
  %22 = load i32, ptr %8, align 4, !tbaa !16
  %23 = icmp eq i32 %22, 101
  br i1 %23, label %24, label %28

24:                                               ; preds = %20
  %25 = load ptr, ptr %7, align 8, !tbaa !5
  %26 = tail call i32 @integer_onep(ptr noundef %25) #18
  %27 = icmp eq i32 %26, 0
  br i1 %27, label %164, label %34

28:                                               ; preds = %20
  %29 = icmp eq i32 %22, 102
  br i1 %29, label %30, label %298

30:                                               ; preds = %28
  %31 = load ptr, ptr %7, align 8, !tbaa !5
  %32 = tail call i32 @integer_zerop(ptr noundef %31) #18
  %33 = icmp eq i32 %32, 0
  br i1 %33, label %169, label %34

34:                                               ; preds = %30, %24
  %35 = phi ptr [ %31, %30 ], [ %25, %24 ]
  %36 = getelementptr inbounds %struct.tree_ssa_name, ptr %0, i64 0, i32 2
  %37 = load ptr, ptr %36, align 8, !tbaa !16
  %38 = load i32, ptr %37, align 8
  %39 = and i32 %38, 255
  %40 = icmp eq i32 %39, 6
  br i1 %40, label %41, label %162

41:                                               ; preds = %34
  %42 = trunc i32 %38 to i8
  switch i8 %42, label %45 [
    i8 6, label %43
    i8 1, label %43
    i8 8, label %47
  ]

43:                                               ; preds = %41, %41
  %44 = lshr i32 %38, 16
  br label %47

45:                                               ; preds = %41
  tail call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1446, ptr noundef nonnull @.str.28) #18
  %46 = load i32, ptr %37, align 8
  br label %47

47:                                               ; preds = %45, %43, %41
  %48 = phi i32 [ %38, %43 ], [ %46, %45 ], [ %38, %41 ]
  %49 = phi i32 [ %44, %43 ], [ 0, %45 ], [ 59, %41 ]
  %50 = zext i32 %49 to i64
  %51 = getelementptr inbounds [0 x i8], ptr @gimple_rhs_class_table, i64 0, i64 %50
  %52 = load i8, ptr %51, align 1, !tbaa !16
  %53 = icmp eq i8 %52, 3
  br i1 %53, label %54, label %75

54:                                               ; preds = %47
  %55 = and i32 %48, 255
  %56 = add nsw i32 %55, -1
  %57 = icmp ult i32 %56, 9
  tail call void @llvm.assume(i1 %57)
  %58 = zext i32 %55 to i64
  %59 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %58
  %60 = load i32, ptr %59, align 4, !tbaa !16
  %61 = zext i32 %60 to i64
  %62 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %61
  %63 = load i64, ptr %62, align 8, !tbaa !36
  %64 = icmp eq i64 %63, 0
  br i1 %64, label %65, label %67

65:                                               ; preds = %54
  tail call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1622, ptr noundef nonnull @.str.28) #18
  %66 = load i32, ptr %37, align 8
  br label %67

67:                                               ; preds = %65, %54
  %68 = phi i32 [ %66, %65 ], [ %48, %54 ]
  %69 = getelementptr inbounds i8, ptr %37, i64 %63
  %70 = getelementptr inbounds ptr, ptr %69, i64 1
  %71 = load ptr, ptr %70, align 8, !tbaa !5
  %72 = load i64, ptr %71, align 8
  %73 = trunc i64 %72 to i32
  %74 = and i32 %73, 65535
  br label %75

75:                                               ; preds = %47, %67
  %76 = phi i32 [ %68, %67 ], [ %48, %47 ]
  %77 = phi i32 [ %74, %67 ], [ %49, %47 ]
  %78 = icmp eq i32 %77, 93
  br i1 %78, label %115, label %79

79:                                               ; preds = %75
  %80 = trunc i32 %76 to i8
  switch i8 %80, label %83 [
    i8 6, label %81
    i8 1, label %81
    i8 8, label %84
  ]

81:                                               ; preds = %79, %79
  %82 = lshr i32 %76, 16
  br label %84

83:                                               ; preds = %79
  tail call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1446, ptr noundef nonnull @.str.28) #18
  br label %84

84:                                               ; preds = %83, %81, %79
  %85 = phi i32 [ %82, %81 ], [ 0, %83 ], [ 59, %79 ]
  %86 = zext i32 %85 to i64
  %87 = getelementptr inbounds [0 x i8], ptr @gimple_rhs_class_table, i64 0, i64 %86
  %88 = load i8, ptr %87, align 1, !tbaa !16
  %89 = icmp eq i8 %88, 3
  br i1 %89, label %90, label %110

90:                                               ; preds = %84
  %91 = load i32, ptr %37, align 8
  %92 = and i32 %91, 255
  %93 = add nsw i32 %92, -1
  %94 = icmp ult i32 %93, 9
  tail call void @llvm.assume(i1 %94)
  %95 = zext i32 %92 to i64
  %96 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %95
  %97 = load i32, ptr %96, align 4, !tbaa !16
  %98 = zext i32 %97 to i64
  %99 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %98
  %100 = load i64, ptr %99, align 8, !tbaa !36
  %101 = icmp eq i64 %100, 0
  br i1 %101, label %102, label %103

102:                                              ; preds = %90
  tail call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1622, ptr noundef nonnull @.str.28) #18
  br label %103

103:                                              ; preds = %102, %90
  %104 = getelementptr inbounds i8, ptr %37, i64 %100
  %105 = getelementptr inbounds ptr, ptr %104, i64 1
  %106 = load ptr, ptr %105, align 8, !tbaa !5
  %107 = load i64, ptr %106, align 8
  %108 = trunc i64 %107 to i32
  %109 = and i32 %108, 65535
  br label %110

110:                                              ; preds = %84, %103
  %111 = phi i32 [ %109, %103 ], [ %85, %84 ]
  %112 = icmp eq i32 %111, 89
  br i1 %112, label %113, label %162

113:                                              ; preds = %110
  %114 = load i32, ptr %37, align 8
  br label %115

115:                                              ; preds = %113, %75
  %116 = phi i32 [ %114, %113 ], [ %76, %75 ]
  %117 = and i32 %116, 255
  %118 = add nsw i32 %117, -10
  %119 = icmp ult i32 %118, -9
  br i1 %119, label %133, label %120

120:                                              ; preds = %115
  %121 = zext i32 %117 to i64
  %122 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %121
  %123 = load i32, ptr %122, align 4, !tbaa !16
  %124 = zext i32 %123 to i64
  %125 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %124
  %126 = load i64, ptr %125, align 8, !tbaa !36
  %127 = icmp eq i64 %126, 0
  br i1 %127, label %128, label %129

128:                                              ; preds = %120
  tail call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1622, ptr noundef nonnull @.str.28) #18
  br label %129

129:                                              ; preds = %128, %120
  %130 = getelementptr inbounds i8, ptr %37, i64 %126
  %131 = getelementptr inbounds ptr, ptr %130, i64 1
  %132 = load ptr, ptr %131, align 8, !tbaa !5
  br label %133

133:                                              ; preds = %115, %129
  %134 = phi ptr [ %132, %129 ], [ null, %115 ]
  %135 = getelementptr i8, ptr %37, i64 12
  %136 = load i32, ptr %135, align 4, !tbaa !16
  %137 = icmp ugt i32 %136, 2
  br i1 %137, label %138, label %156

138:                                              ; preds = %133
  %139 = load i32, ptr %37, align 8
  %140 = and i32 %139, 255
  %141 = add nsw i32 %140, -10
  %142 = icmp ult i32 %141, -9
  br i1 %142, label %156, label %143

143:                                              ; preds = %138
  %144 = zext i32 %140 to i64
  %145 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %144
  %146 = load i32, ptr %145, align 4, !tbaa !16
  %147 = zext i32 %146 to i64
  %148 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %147
  %149 = load i64, ptr %148, align 8, !tbaa !36
  %150 = icmp eq i64 %149, 0
  br i1 %150, label %151, label %152

151:                                              ; preds = %143
  tail call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1622, ptr noundef nonnull @.str.28) #18
  br label %152

152:                                              ; preds = %151, %143
  %153 = getelementptr inbounds i8, ptr %37, i64 %149
  %154 = getelementptr inbounds ptr, ptr %153, i64 2
  %155 = load ptr, ptr %154, align 8, !tbaa !5
  br label %156

156:                                              ; preds = %133, %138, %152
  %157 = phi ptr [ null, %133 ], [ %155, %152 ], [ null, %138 ]
  %158 = tail call fastcc zeroext i8 @register_edge_assert_for_1(ptr noundef %134, i32 noundef 102, ptr noundef nonnull %1, ptr noundef nonnull byval(%struct.gimple_stmt_iterator) align 8 %2), !range !79
  %159 = tail call fastcc zeroext i8 @register_edge_assert_for_1(ptr noundef %157, i32 noundef 102, ptr noundef nonnull %1, ptr noundef nonnull byval(%struct.gimple_stmt_iterator) align 8 %2), !range !79
  %160 = or i8 %158, %159
  %161 = or i8 %160, %21
  br label %162

162:                                              ; preds = %34, %110, %156
  %163 = phi i8 [ %161, %156 ], [ %21, %110 ], [ %21, %34 ]
  br i1 %23, label %164, label %169

164:                                              ; preds = %24, %162
  %165 = phi ptr [ %35, %162 ], [ %25, %24 ]
  %166 = phi i8 [ %163, %162 ], [ %21, %24 ]
  %167 = tail call i32 @integer_zerop(ptr noundef %165) #18
  %168 = icmp eq i32 %167, 0
  br i1 %168, label %298, label %174

169:                                              ; preds = %162, %30
  %170 = phi ptr [ %31, %30 ], [ %35, %162 ]
  %171 = phi i8 [ %21, %30 ], [ %163, %162 ]
  %172 = tail call i32 @integer_onep(ptr noundef %170) #18
  %173 = icmp eq i32 %172, 0
  br i1 %173, label %298, label %174

174:                                              ; preds = %169, %164
  %175 = phi i8 [ %171, %169 ], [ %166, %164 ]
  %176 = getelementptr inbounds %struct.tree_ssa_name, ptr %0, i64 0, i32 2
  %177 = load ptr, ptr %176, align 8, !tbaa !16
  %178 = load i32, ptr %177, align 8
  %179 = and i32 %178, 255
  %180 = icmp eq i32 %179, 6
  br i1 %180, label %181, label %298

181:                                              ; preds = %174
  %182 = trunc i32 %178 to i8
  switch i8 %182, label %185 [
    i8 6, label %183
    i8 1, label %183
    i8 8, label %186
  ]

183:                                              ; preds = %181, %181
  %184 = lshr i32 %178, 16
  br label %186

185:                                              ; preds = %181
  tail call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1446, ptr noundef nonnull @.str.28) #18
  br label %186

186:                                              ; preds = %185, %183, %181
  %187 = phi i32 [ %184, %183 ], [ 0, %185 ], [ 59, %181 ]
  %188 = zext i32 %187 to i64
  %189 = getelementptr inbounds [0 x i8], ptr @gimple_rhs_class_table, i64 0, i64 %188
  %190 = load i8, ptr %189, align 1, !tbaa !16
  %191 = icmp eq i8 %190, 3
  br i1 %191, label %192, label %212

192:                                              ; preds = %186
  %193 = load i32, ptr %177, align 8
  %194 = and i32 %193, 255
  %195 = add nsw i32 %194, -1
  %196 = icmp ult i32 %195, 9
  tail call void @llvm.assume(i1 %196)
  %197 = zext i32 %194 to i64
  %198 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %197
  %199 = load i32, ptr %198, align 4, !tbaa !16
  %200 = zext i32 %199 to i64
  %201 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %200
  %202 = load i64, ptr %201, align 8, !tbaa !36
  %203 = icmp eq i64 %202, 0
  br i1 %203, label %204, label %205

204:                                              ; preds = %192
  tail call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1622, ptr noundef nonnull @.str.28) #18
  br label %205

205:                                              ; preds = %204, %192
  %206 = getelementptr inbounds i8, ptr %177, i64 %202
  %207 = getelementptr inbounds ptr, ptr %206, i64 1
  %208 = load ptr, ptr %207, align 8, !tbaa !5
  %209 = load i64, ptr %208, align 8
  %210 = trunc i64 %209 to i32
  %211 = and i32 %210, 65535
  br label %212

212:                                              ; preds = %186, %205
  %213 = phi i32 [ %211, %205 ], [ %187, %186 ]
  %214 = icmp eq i32 %213, 94
  br i1 %214, label %251, label %215

215:                                              ; preds = %212
  br i1 %23, label %216, label %298

216:                                              ; preds = %215
  %217 = load i32, ptr %177, align 8
  %218 = trunc i32 %217 to i8
  switch i8 %218, label %221 [
    i8 6, label %219
    i8 1, label %219
    i8 8, label %222
  ]

219:                                              ; preds = %216, %216
  %220 = lshr i32 %217, 16
  br label %222

221:                                              ; preds = %216
  tail call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1446, ptr noundef nonnull @.str.28) #18
  br label %222

222:                                              ; preds = %221, %219, %216
  %223 = phi i32 [ %220, %219 ], [ 0, %221 ], [ 59, %216 ]
  %224 = zext i32 %223 to i64
  %225 = getelementptr inbounds [0 x i8], ptr @gimple_rhs_class_table, i64 0, i64 %224
  %226 = load i8, ptr %225, align 1, !tbaa !16
  %227 = icmp eq i8 %226, 3
  br i1 %227, label %228, label %248

228:                                              ; preds = %222
  %229 = load i32, ptr %177, align 8
  %230 = and i32 %229, 255
  %231 = add nsw i32 %230, -1
  %232 = icmp ult i32 %231, 9
  tail call void @llvm.assume(i1 %232)
  %233 = zext i32 %230 to i64
  %234 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %233
  %235 = load i32, ptr %234, align 4, !tbaa !16
  %236 = zext i32 %235 to i64
  %237 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %236
  %238 = load i64, ptr %237, align 8, !tbaa !36
  %239 = icmp eq i64 %238, 0
  br i1 %239, label %240, label %241

240:                                              ; preds = %228
  tail call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1622, ptr noundef nonnull @.str.28) #18
  br label %241

241:                                              ; preds = %240, %228
  %242 = getelementptr inbounds i8, ptr %177, i64 %238
  %243 = getelementptr inbounds ptr, ptr %242, i64 1
  %244 = load ptr, ptr %243, align 8, !tbaa !5
  %245 = load i64, ptr %244, align 8
  %246 = trunc i64 %245 to i32
  %247 = and i32 %246, 65535
  br label %248

248:                                              ; preds = %222, %241
  %249 = phi i32 [ %247, %241 ], [ %223, %222 ]
  %250 = icmp eq i32 %249, 87
  br i1 %250, label %251, label %298

251:                                              ; preds = %248, %212
  %252 = load i32, ptr %177, align 8
  %253 = and i32 %252, 255
  %254 = add nsw i32 %253, -10
  %255 = icmp ult i32 %254, -9
  br i1 %255, label %269, label %256

256:                                              ; preds = %251
  %257 = zext i32 %253 to i64
  %258 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %257
  %259 = load i32, ptr %258, align 4, !tbaa !16
  %260 = zext i32 %259 to i64
  %261 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %260
  %262 = load i64, ptr %261, align 8, !tbaa !36
  %263 = icmp eq i64 %262, 0
  br i1 %263, label %264, label %265

264:                                              ; preds = %256
  tail call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1622, ptr noundef nonnull @.str.28) #18
  br label %265

265:                                              ; preds = %264, %256
  %266 = getelementptr inbounds i8, ptr %177, i64 %262
  %267 = getelementptr inbounds ptr, ptr %266, i64 1
  %268 = load ptr, ptr %267, align 8, !tbaa !5
  br label %269

269:                                              ; preds = %251, %265
  %270 = phi ptr [ %268, %265 ], [ null, %251 ]
  %271 = getelementptr i8, ptr %177, i64 12
  %272 = load i32, ptr %271, align 4, !tbaa !16
  %273 = icmp ugt i32 %272, 2
  br i1 %273, label %274, label %292

274:                                              ; preds = %269
  %275 = load i32, ptr %177, align 8
  %276 = and i32 %275, 255
  %277 = add nsw i32 %276, -10
  %278 = icmp ult i32 %277, -9
  br i1 %278, label %292, label %279

279:                                              ; preds = %274
  %280 = zext i32 %276 to i64
  %281 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %280
  %282 = load i32, ptr %281, align 4, !tbaa !16
  %283 = zext i32 %282 to i64
  %284 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %283
  %285 = load i64, ptr %284, align 8, !tbaa !36
  %286 = icmp eq i64 %285, 0
  br i1 %286, label %287, label %288

287:                                              ; preds = %279
  tail call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1622, ptr noundef nonnull @.str.28) #18
  br label %288

288:                                              ; preds = %287, %279
  %289 = getelementptr inbounds i8, ptr %177, i64 %285
  %290 = getelementptr inbounds ptr, ptr %289, i64 2
  %291 = load ptr, ptr %290, align 8, !tbaa !5
  br label %292

292:                                              ; preds = %269, %274, %288
  %293 = phi ptr [ null, %269 ], [ %291, %288 ], [ null, %274 ]
  %294 = tail call fastcc zeroext i8 @register_edge_assert_for_1(ptr noundef %270, i32 noundef 101, ptr noundef nonnull %1, ptr noundef nonnull byval(%struct.gimple_stmt_iterator) align 8 %2), !range !79
  %295 = tail call fastcc zeroext i8 @register_edge_assert_for_1(ptr noundef %293, i32 noundef 101, ptr noundef nonnull %1, ptr noundef nonnull byval(%struct.gimple_stmt_iterator) align 8 %2), !range !79
  %296 = or i8 %294, %295
  %297 = or i8 %296, %175
  br label %298

298:                                              ; preds = %164, %28, %169, %292, %248, %215, %174, %17, %6
  %299 = phi i8 [ 0, %6 ], [ 0, %17 ], [ %171, %169 ], [ %297, %292 ], [ %175, %248 ], [ %175, %215 ], [ %175, %174 ], [ %21, %28 ], [ %166, %164 ]
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %8) #18
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %7) #18
  ret i8 %299
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc zeroext i8 @extract_code_and_val_from_cond_with_ops(ptr noundef readnone %0, i32 noundef %1, ptr noundef %2, ptr noundef %3, i8 noundef zeroext %4, ptr nocapture noundef writeonly %5, ptr nocapture noundef writeonly %6) unnamed_addr #9 {
  %8 = alloca i8, align 1
  %9 = alloca i8, align 1
  %10 = icmp eq ptr %0, %3
  br i1 %10, label %11, label %13

11:                                               ; preds = %7
  %12 = tail call i32 @swap_tree_comparison(i32 noundef %1) #18
  br label %13

13:                                               ; preds = %7, %11
  %14 = phi ptr [ %2, %11 ], [ %3, %7 ]
  %15 = phi i32 [ %12, %11 ], [ %1, %7 ]
  %16 = icmp eq i8 %4, 0
  br i1 %16, label %19, label %17

17:                                               ; preds = %13
  %18 = tail call i32 @invert_tree_comparison(i32 noundef %15, i8 noundef zeroext 0) #18
  br label %19

19:                                               ; preds = %17, %13
  %20 = phi i32 [ %18, %17 ], [ %15, %13 ]
  %21 = getelementptr inbounds %struct.tree_common, ptr %14, i64 0, i32 2
  %22 = load ptr, ptr %21, align 8, !tbaa !16
  %23 = load i64, ptr %22, align 8
  %24 = trunc i64 %23 to i32
  %25 = and i32 %24, 65535
  %26 = icmp eq i32 %25, 9
  br i1 %26, label %67, label %27

27:                                               ; preds = %19
  switch i32 %20, label %66 [
    i32 99, label %28
    i32 97, label %28
  ]

28:                                               ; preds = %27, %27
  %29 = add nsw i32 %25, -6
  %30 = icmp ult i32 %29, 3
  br i1 %30, label %31, label %66

31:                                               ; preds = %28
  %32 = getelementptr inbounds %struct.tree_type, ptr %22, i64 0, i32 13
  %33 = load ptr, ptr %32, align 8, !tbaa !16
  %34 = getelementptr inbounds %struct.tree_type, ptr %22, i64 0, i32 14
  %35 = load ptr, ptr %34, align 8, !tbaa !16
  switch i32 %20, label %66 [
    i32 99, label %36
    i32 97, label %51
  ]

36:                                               ; preds = %31
  %37 = icmp eq ptr %35, null
  br i1 %37, label %67, label %38

38:                                               ; preds = %36
  call void @llvm.lifetime.start.p0(i64 1, ptr nonnull %9) #18
  store i8 0, ptr %9, align 1, !tbaa !16
  %39 = call fastcc i32 @compare_values_warnv(ptr noundef nonnull %14, ptr noundef nonnull %35, ptr noundef nonnull %9)
  %40 = load i8, ptr %9, align 1, !tbaa !16
  %41 = icmp eq i8 %40, 0
  br i1 %41, label %49, label %42

42:                                               ; preds = %38
  %43 = call zeroext i8 @is_gimple_min_invariant(ptr noundef nonnull %14) #18
  %44 = icmp eq i8 %43, 0
  br i1 %44, label %48, label %45

45:                                               ; preds = %42
  %46 = call zeroext i8 @is_gimple_min_invariant(ptr noundef nonnull %35) #18
  %47 = icmp eq i8 %46, 0
  br i1 %47, label %48, label %49

48:                                               ; preds = %42, %45
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %9) #18
  br label %66

49:                                               ; preds = %38, %45
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %9) #18
  %50 = icmp eq i32 %39, 0
  br i1 %50, label %67, label %66

51:                                               ; preds = %31
  %52 = icmp eq ptr %33, null
  br i1 %52, label %67, label %53

53:                                               ; preds = %51
  call void @llvm.lifetime.start.p0(i64 1, ptr nonnull %8) #18
  store i8 0, ptr %8, align 1, !tbaa !16
  %54 = call fastcc i32 @compare_values_warnv(ptr noundef nonnull %14, ptr noundef nonnull %33, ptr noundef nonnull %8)
  %55 = load i8, ptr %8, align 1, !tbaa !16
  %56 = icmp eq i8 %55, 0
  br i1 %56, label %64, label %57

57:                                               ; preds = %53
  %58 = call zeroext i8 @is_gimple_min_invariant(ptr noundef nonnull %14) #18
  %59 = icmp eq i8 %58, 0
  br i1 %59, label %63, label %60

60:                                               ; preds = %57
  %61 = call zeroext i8 @is_gimple_min_invariant(ptr noundef nonnull %33) #18
  %62 = icmp eq i8 %61, 0
  br i1 %62, label %63, label %64

63:                                               ; preds = %57, %60
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %8) #18
  br label %66

64:                                               ; preds = %53, %60
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %8) #18
  %65 = icmp eq i32 %54, 0
  br i1 %65, label %67, label %66

66:                                               ; preds = %63, %49, %48, %64, %31, %28, %27
  store i32 %20, ptr %5, align 4, !tbaa !16
  store ptr %14, ptr %6, align 8, !tbaa !5
  br label %67

67:                                               ; preds = %49, %36, %64, %51, %19, %66
  %68 = phi i8 [ 1, %66 ], [ 0, %19 ], [ 0, %51 ], [ 0, %64 ], [ 0, %36 ], [ 0, %49 ]
  ret i8 %68
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc zeroext i8 @register_edge_assert_for_2(ptr noundef %0, ptr noundef %1, ptr nocapture noundef readonly byval(%struct.gimple_stmt_iterator) align 8 %2, i32 noundef %3, ptr noundef %4, ptr noundef %5, i8 noundef zeroext %6) unnamed_addr #9 {
  %8 = alloca ptr, align 8
  %9 = alloca i32, align 4
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %8) #18
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %9) #18
  %10 = call fastcc zeroext i8 @extract_code_and_val_from_cond_with_ops(ptr noundef %0, i32 noundef %3, ptr noundef %4, ptr noundef %5, i8 noundef zeroext %6, ptr noundef nonnull %9, ptr noundef nonnull %8), !range !79
  %11 = icmp eq i8 %10, 0
  br i1 %11, label %454, label %12

12:                                               ; preds = %7
  %13 = getelementptr i8, ptr %1, i64 8
  %14 = load ptr, ptr %13, align 8, !tbaa !60
  %15 = getelementptr i8, ptr %14, i64 80
  %16 = load i32, ptr %15, align 8, !tbaa !55
  %17 = load ptr, ptr @live, align 8, !tbaa !5
  %18 = sext i32 %16 to i64
  %19 = getelementptr inbounds ptr, ptr %17, i64 %18
  %20 = load ptr, ptr %19, align 8, !tbaa !5
  %21 = icmp eq ptr %20, null
  br i1 %21, label %61, label %22

22:                                               ; preds = %12
  %23 = getelementptr inbounds %struct.tree_ssa_name, ptr %0, i64 0, i32 3
  %24 = load i32, ptr %23, align 8, !tbaa !16
  %25 = lshr i32 %24, 6
  %26 = zext i32 %25 to i64
  %27 = getelementptr inbounds %struct.simple_bitmap_def, ptr %20, i64 0, i32 3, i64 %26
  %28 = load i64, ptr %27, align 8, !tbaa !36
  %29 = and i32 %24, 63
  %30 = zext i32 %29 to i64
  %31 = shl nuw i64 1, %30
  %32 = and i64 %31, %28
  %33 = icmp eq i64 %32, 0
  br i1 %33, label %61, label %34

34:                                               ; preds = %22
  %35 = getelementptr inbounds %struct.tree_ssa_name, ptr %0, i64 0, i32 5
  %36 = getelementptr inbounds %struct.tree_ssa_name, ptr %0, i64 0, i32 5, i32 1
  %37 = load ptr, ptr %36, align 8, !tbaa !96
  %38 = icmp eq ptr %35, %37
  br i1 %38, label %58, label %39

39:                                               ; preds = %34
  %40 = getelementptr inbounds %struct.ssa_use_operand_d, ptr %37, i64 0, i32 1
  %41 = load ptr, ptr %40, align 8, !tbaa !96
  %42 = icmp eq ptr %35, %41
  br i1 %42, label %43, label %50

43:                                               ; preds = %39
  %44 = getelementptr inbounds %struct.ssa_use_operand_d, ptr %37, i64 0, i32 2
  %45 = load ptr, ptr %44, align 8, !tbaa !16
  %46 = load i32, ptr %45, align 8
  %47 = and i32 %46, 255
  %48 = icmp ne i32 %47, 2
  %49 = zext i1 %48 to i8
  br label %55

50:                                               ; preds = %39
  %51 = load i32, ptr @flag_var_tracking_assignments, align 4, !tbaa !20
  %52 = icmp eq i32 %51, 0
  br i1 %52, label %58, label %53

53:                                               ; preds = %50
  %54 = tail call zeroext i8 @single_imm_use_1(ptr noundef nonnull %35, ptr noundef null, ptr noundef null) #18
  br label %55

55:                                               ; preds = %43, %53
  %56 = phi i8 [ %49, %43 ], [ %54, %53 ]
  %57 = icmp eq i8 %56, 0
  br i1 %57, label %58, label %61

58:                                               ; preds = %50, %34, %55
  %59 = load i32, ptr %9, align 4, !tbaa !16
  %60 = load ptr, ptr %8, align 8, !tbaa !5
  tail call fastcc void @register_new_assert_for(ptr noundef nonnull %0, ptr noundef nonnull %0, i32 noundef %59, ptr noundef %60, ptr noundef null, ptr noundef nonnull %1, ptr noundef nonnull byval(%struct.gimple_stmt_iterator) align 8 %2)
  br label %61

61:                                               ; preds = %12, %58, %55, %22
  %62 = phi i8 [ 0, %55 ], [ 1, %58 ], [ 0, %22 ], [ 0, %12 ]
  %63 = load i32, ptr %9, align 4
  %64 = and i32 %63, -2
  %65 = icmp eq i32 %64, 98
  br i1 %65, label %66, label %454

66:                                               ; preds = %61
  %67 = load ptr, ptr %8, align 8, !tbaa !5
  %68 = load i64, ptr %67, align 8
  %69 = and i64 %68, 65535
  %70 = icmp eq i64 %69, 23
  br i1 %70, label %71, label %454

71:                                               ; preds = %66
  %72 = getelementptr inbounds %struct.tree_common, ptr %67, i64 0, i32 2
  %73 = load ptr, ptr %72, align 8, !tbaa !16
  %74 = load i64, ptr %73, align 8
  %75 = and i64 %74, 2097152
  %76 = icmp eq i64 %75, 0
  br i1 %76, label %454, label %77

77:                                               ; preds = %71
  %78 = getelementptr inbounds %struct.tree_ssa_name, ptr %0, i64 0, i32 2
  %79 = load ptr, ptr %78, align 8, !tbaa !16
  %80 = load i32, ptr %79, align 8
  %81 = and i32 %80, 255
  %82 = icmp eq i32 %81, 6
  br i1 %82, label %83, label %170

83:                                               ; preds = %77
  %84 = trunc i32 %80 to i8
  switch i8 %84, label %87 [
    i8 6, label %85
    i8 1, label %85
    i8 8, label %88
  ]

85:                                               ; preds = %83, %83
  %86 = lshr i32 %80, 16
  br label %88

87:                                               ; preds = %83
  tail call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1446, ptr noundef nonnull @.str.28) #18
  br label %88

88:                                               ; preds = %87, %85, %83
  %89 = phi i32 [ %86, %85 ], [ 0, %87 ], [ 59, %83 ]
  %90 = zext i32 %89 to i64
  %91 = getelementptr inbounds [0 x i8], ptr @gimple_rhs_class_table, i64 0, i64 %90
  %92 = load i8, ptr %91, align 1, !tbaa !16
  %93 = icmp eq i8 %92, 3
  br i1 %93, label %94, label %114

94:                                               ; preds = %88
  %95 = load i32, ptr %79, align 8
  %96 = and i32 %95, 255
  %97 = add nsw i32 %96, -1
  %98 = icmp ult i32 %97, 9
  tail call void @llvm.assume(i1 %98)
  %99 = zext i32 %96 to i64
  %100 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %99
  %101 = load i32, ptr %100, align 4, !tbaa !16
  %102 = zext i32 %101 to i64
  %103 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %102
  %104 = load i64, ptr %103, align 8, !tbaa !36
  %105 = icmp eq i64 %104, 0
  br i1 %105, label %106, label %107

106:                                              ; preds = %94
  tail call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1622, ptr noundef nonnull @.str.28) #18
  br label %107

107:                                              ; preds = %106, %94
  %108 = getelementptr inbounds i8, ptr %79, i64 %104
  %109 = getelementptr inbounds ptr, ptr %108, i64 1
  %110 = load ptr, ptr %109, align 8, !tbaa !5
  %111 = load i64, ptr %110, align 8
  %112 = trunc i64 %111 to i32
  %113 = and i32 %112, 65535
  br label %114

114:                                              ; preds = %88, %107
  %115 = phi i32 [ %113, %107 ], [ %89, %88 ]
  %116 = icmp eq i32 %115, 63
  br i1 %116, label %117, label %170

117:                                              ; preds = %114
  %118 = load i32, ptr %79, align 8
  %119 = and i32 %118, 255
  %120 = add nsw i32 %119, -10
  %121 = icmp ult i32 %120, -9
  br i1 %121, label %135, label %122

122:                                              ; preds = %117
  %123 = zext i32 %119 to i64
  %124 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %123
  %125 = load i32, ptr %124, align 4, !tbaa !16
  %126 = zext i32 %125 to i64
  %127 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %126
  %128 = load i64, ptr %127, align 8, !tbaa !36
  %129 = icmp eq i64 %128, 0
  br i1 %129, label %130, label %131

130:                                              ; preds = %122
  tail call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1622, ptr noundef nonnull @.str.28) #18
  br label %131

131:                                              ; preds = %130, %122
  %132 = getelementptr inbounds i8, ptr %79, i64 %128
  %133 = getelementptr inbounds ptr, ptr %132, i64 1
  %134 = load ptr, ptr %133, align 8, !tbaa !5
  br label %135

135:                                              ; preds = %117, %131
  %136 = phi ptr [ %134, %131 ], [ null, %117 ]
  %137 = getelementptr i8, ptr %79, i64 12
  %138 = load i32, ptr %137, align 4, !tbaa !16
  %139 = icmp ugt i32 %138, 2
  br i1 %139, label %140, label %158

140:                                              ; preds = %135
  %141 = load i32, ptr %79, align 8
  %142 = and i32 %141, 255
  %143 = add nsw i32 %142, -10
  %144 = icmp ult i32 %143, -9
  br i1 %144, label %158, label %145

145:                                              ; preds = %140
  %146 = zext i32 %142 to i64
  %147 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %146
  %148 = load i32, ptr %147, align 4, !tbaa !16
  %149 = zext i32 %148 to i64
  %150 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %149
  %151 = load i64, ptr %150, align 8, !tbaa !36
  %152 = icmp eq i64 %151, 0
  br i1 %152, label %153, label %154

153:                                              ; preds = %145
  tail call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1622, ptr noundef nonnull @.str.28) #18
  br label %154

154:                                              ; preds = %153, %145
  %155 = getelementptr inbounds i8, ptr %79, i64 %151
  %156 = getelementptr inbounds ptr, ptr %155, i64 2
  %157 = load ptr, ptr %156, align 8, !tbaa !5
  br label %158

158:                                              ; preds = %135, %140, %154
  %159 = phi ptr [ null, %135 ], [ %157, %154 ], [ null, %140 ]
  %160 = load i64, ptr %136, align 8
  %161 = and i64 %160, 65535
  %162 = icmp eq i64 %161, 141
  br i1 %162, label %163, label %170

163:                                              ; preds = %158
  %164 = load i64, ptr %159, align 8
  %165 = and i64 %164, 65535
  %166 = icmp eq i64 %165, 23
  br i1 %166, label %167, label %170

167:                                              ; preds = %163
  %168 = getelementptr inbounds %struct.tree_ssa_name, ptr %136, i64 0, i32 2
  %169 = load ptr, ptr %168, align 8, !tbaa !16
  br label %170

170:                                              ; preds = %158, %163, %167, %114, %77
  %171 = phi ptr [ %169, %167 ], [ %79, %163 ], [ %79, %158 ], [ %79, %114 ], [ %79, %77 ]
  %172 = phi ptr [ %159, %167 ], [ %159, %163 ], [ %159, %158 ], [ null, %114 ], [ null, %77 ]
  %173 = phi ptr [ %136, %167 ], [ %136, %163 ], [ %136, %158 ], [ null, %114 ], [ null, %77 ]
  %174 = load i32, ptr %171, align 8
  %175 = and i32 %174, 255
  %176 = icmp eq i32 %175, 6
  br i1 %176, label %177, label %388

177:                                              ; preds = %170
  %178 = trunc i32 %174 to i8
  switch i8 %178, label %181 [
    i8 6, label %179
    i8 1, label %179
    i8 8, label %182
  ]

179:                                              ; preds = %177, %177
  %180 = lshr i32 %174, 16
  br label %182

181:                                              ; preds = %177
  tail call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1446, ptr noundef nonnull @.str.28) #18
  br label %182

182:                                              ; preds = %181, %179, %177
  %183 = phi i32 [ %180, %179 ], [ 0, %181 ], [ 59, %177 ]
  %184 = zext i32 %183 to i64
  %185 = getelementptr inbounds [0 x i8], ptr @gimple_rhs_class_table, i64 0, i64 %184
  %186 = load i8, ptr %185, align 1, !tbaa !16
  %187 = icmp eq i8 %186, 3
  br i1 %187, label %188, label %208

188:                                              ; preds = %182
  %189 = load i32, ptr %171, align 8
  %190 = and i32 %189, 255
  %191 = add nsw i32 %190, -1
  %192 = icmp ult i32 %191, 9
  tail call void @llvm.assume(i1 %192)
  %193 = zext i32 %190 to i64
  %194 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %193
  %195 = load i32, ptr %194, align 4, !tbaa !16
  %196 = zext i32 %195 to i64
  %197 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %196
  %198 = load i64, ptr %197, align 8, !tbaa !36
  %199 = icmp eq i64 %198, 0
  br i1 %199, label %200, label %201

200:                                              ; preds = %188
  tail call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1622, ptr noundef nonnull @.str.28) #18
  br label %201

201:                                              ; preds = %200, %188
  %202 = getelementptr inbounds i8, ptr %171, i64 %198
  %203 = getelementptr inbounds ptr, ptr %202, i64 1
  %204 = load ptr, ptr %203, align 8, !tbaa !5
  %205 = load i64, ptr %204, align 8
  %206 = trunc i64 %205 to i32
  %207 = and i32 %206, 65535
  br label %208

208:                                              ; preds = %182, %201
  %209 = phi i32 [ %207, %201 ], [ %183, %182 ]
  %210 = freeze i32 %209
  %211 = and i32 %210, 65533
  %212 = icmp eq i32 %211, 116
  br i1 %212, label %214, label %213

213:                                              ; preds = %208
  switch i32 %210, label %388 [
    i32 113, label %214
    i32 77, label %214
  ]

214:                                              ; preds = %213, %213, %208
  %215 = load i32, ptr %171, align 8
  %216 = trunc i32 %215 to i8
  switch i8 %216, label %219 [
    i8 6, label %217
    i8 1, label %217
    i8 8, label %221
  ]

217:                                              ; preds = %214, %214
  %218 = lshr i32 %215, 16
  br label %221

219:                                              ; preds = %214
  tail call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1446, ptr noundef nonnull @.str.28) #18
  %220 = load i32, ptr %171, align 8
  br label %221

221:                                              ; preds = %219, %217, %214
  %222 = phi i32 [ %215, %217 ], [ %220, %219 ], [ %215, %214 ]
  %223 = phi i32 [ %218, %217 ], [ 0, %219 ], [ 59, %214 ]
  %224 = zext i32 %223 to i64
  %225 = getelementptr inbounds [0 x i8], ptr @gimple_rhs_class_table, i64 0, i64 %224
  %226 = load i8, ptr %225, align 1, !tbaa !16
  %227 = icmp eq i8 %226, 3
  br i1 %227, label %228, label %249

228:                                              ; preds = %221
  %229 = and i32 %222, 255
  %230 = add nsw i32 %229, -1
  %231 = icmp ult i32 %230, 9
  tail call void @llvm.assume(i1 %231)
  %232 = zext i32 %229 to i64
  %233 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %232
  %234 = load i32, ptr %233, align 4, !tbaa !16
  %235 = zext i32 %234 to i64
  %236 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %235
  %237 = load i64, ptr %236, align 8, !tbaa !36
  %238 = icmp eq i64 %237, 0
  br i1 %238, label %239, label %241

239:                                              ; preds = %228
  tail call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1622, ptr noundef nonnull @.str.28) #18
  %240 = load i32, ptr %171, align 8
  br label %241

241:                                              ; preds = %239, %228
  %242 = phi i32 [ %240, %239 ], [ %222, %228 ]
  %243 = getelementptr inbounds i8, ptr %171, i64 %237
  %244 = getelementptr inbounds ptr, ptr %243, i64 1
  %245 = load ptr, ptr %244, align 8, !tbaa !5
  %246 = load i64, ptr %245, align 8
  %247 = trunc i64 %246 to i32
  %248 = and i32 %247, 65535
  br label %249

249:                                              ; preds = %221, %241
  %250 = phi i32 [ %242, %241 ], [ %222, %221 ]
  %251 = phi i32 [ %248, %241 ], [ %223, %221 ]
  %252 = icmp eq i32 %251, 116
  br i1 %252, label %289, label %253

253:                                              ; preds = %249
  %254 = trunc i32 %250 to i8
  switch i8 %254, label %257 [
    i8 6, label %255
    i8 1, label %255
    i8 8, label %258
  ]

255:                                              ; preds = %253, %253
  %256 = lshr i32 %250, 16
  br label %258

257:                                              ; preds = %253
  tail call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1446, ptr noundef nonnull @.str.28) #18
  br label %258

258:                                              ; preds = %257, %255, %253
  %259 = phi i32 [ %256, %255 ], [ 0, %257 ], [ 59, %253 ]
  %260 = zext i32 %259 to i64
  %261 = getelementptr inbounds [0 x i8], ptr @gimple_rhs_class_table, i64 0, i64 %260
  %262 = load i8, ptr %261, align 1, !tbaa !16
  %263 = icmp eq i8 %262, 3
  br i1 %263, label %264, label %284

264:                                              ; preds = %258
  %265 = load i32, ptr %171, align 8
  %266 = and i32 %265, 255
  %267 = add nsw i32 %266, -1
  %268 = icmp ult i32 %267, 9
  tail call void @llvm.assume(i1 %268)
  %269 = zext i32 %266 to i64
  %270 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %269
  %271 = load i32, ptr %270, align 4, !tbaa !16
  %272 = zext i32 %271 to i64
  %273 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %272
  %274 = load i64, ptr %273, align 8, !tbaa !36
  %275 = icmp eq i64 %274, 0
  br i1 %275, label %276, label %277

276:                                              ; preds = %264
  tail call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1622, ptr noundef nonnull @.str.28) #18
  br label %277

277:                                              ; preds = %276, %264
  %278 = getelementptr inbounds i8, ptr %171, i64 %274
  %279 = getelementptr inbounds ptr, ptr %278, i64 1
  %280 = load ptr, ptr %279, align 8, !tbaa !5
  %281 = load i64, ptr %280, align 8
  %282 = trunc i64 %281 to i32
  %283 = and i32 %282, 65535
  br label %284

284:                                              ; preds = %258, %277
  %285 = phi i32 [ %283, %277 ], [ %259, %258 ]
  %286 = icmp eq i32 %285, 113
  br i1 %286, label %287, label %388

287:                                              ; preds = %284
  %288 = load i32, ptr %171, align 8
  br label %289

289:                                              ; preds = %287, %249
  %290 = phi i32 [ %288, %287 ], [ %250, %249 ]
  %291 = and i32 %290, 255
  %292 = add nsw i32 %291, -1
  %293 = icmp ult i32 %292, 9
  tail call void @llvm.assume(i1 %293)
  %294 = zext i32 %291 to i64
  %295 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %294
  %296 = load i32, ptr %295, align 4, !tbaa !16
  %297 = zext i32 %296 to i64
  %298 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %297
  %299 = load i64, ptr %298, align 8, !tbaa !36
  %300 = icmp eq i64 %299, 0
  br i1 %300, label %301, label %302

301:                                              ; preds = %289
  tail call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1622, ptr noundef nonnull @.str.28) #18
  br label %302

302:                                              ; preds = %301, %289
  %303 = getelementptr inbounds i8, ptr %171, i64 %299
  %304 = getelementptr inbounds ptr, ptr %303, i64 1
  %305 = load ptr, ptr %304, align 8, !tbaa !5
  %306 = getelementptr inbounds %struct.tree_common, ptr %305, i64 0, i32 2
  %307 = load ptr, ptr %306, align 8, !tbaa !16
  %308 = load i64, ptr %307, align 8
  %309 = and i64 %308, 2097152
  %310 = icmp eq i64 %309, 0
  br i1 %310, label %311, label %388

311:                                              ; preds = %302
  %312 = tail call fastcc ptr @gimple_expr_type(ptr noundef nonnull %171)
  %313 = getelementptr inbounds %struct.tree_type, ptr %312, i64 0, i32 6
  %314 = load i32, ptr %313, align 4
  %315 = tail call fastcc ptr @gimple_assign_rhs1(ptr noundef nonnull %171)
  %316 = getelementptr inbounds %struct.tree_common, ptr %315, i64 0, i32 2
  %317 = load ptr, ptr %316, align 8, !tbaa !16
  %318 = getelementptr inbounds %struct.tree_type, ptr %317, i64 0, i32 6
  %319 = load i32, ptr %318, align 4
  %320 = xor i32 %319, %314
  %321 = and i32 %320, 1023
  %322 = icmp eq i32 %321, 0
  br i1 %322, label %323, label %388

323:                                              ; preds = %311
  %324 = tail call fastcc ptr @gimple_assign_rhs1(ptr noundef nonnull %171)
  %325 = icmp eq ptr %324, null
  br i1 %325, label %388, label %326

326:                                              ; preds = %323
  %327 = load i64, ptr %324, align 8
  %328 = and i64 %327, 65535
  %329 = icmp eq i64 %328, 141
  br i1 %329, label %330, label %388

330:                                              ; preds = %326
  %331 = icmp eq ptr %172, null
  br i1 %331, label %336, label %332

332:                                              ; preds = %330
  %333 = load i64, ptr %172, align 8
  %334 = and i64 %333, 65535
  %335 = icmp eq i64 %334, 23
  br i1 %335, label %336, label %388

336:                                              ; preds = %332, %330
  %337 = getelementptr inbounds %struct.tree_common, ptr %324, i64 0, i32 2
  %338 = load ptr, ptr %337, align 8, !tbaa !16
  %339 = load i64, ptr %338, align 8
  %340 = trunc i64 %339 to i32
  %341 = and i32 %340, 65535
  %342 = add nsw i32 %341, -6
  %343 = icmp ult i32 %342, 3
  br i1 %343, label %344, label %388

344:                                              ; preds = %336
  %345 = load ptr, ptr %13, align 8, !tbaa !60
  %346 = getelementptr i8, ptr %345, i64 80
  %347 = load i32, ptr %346, align 8, !tbaa !55
  %348 = load ptr, ptr @live, align 8, !tbaa !5
  %349 = sext i32 %347 to i64
  %350 = getelementptr inbounds ptr, ptr %348, i64 %349
  %351 = load ptr, ptr %350, align 8, !tbaa !5
  %352 = icmp eq ptr %351, null
  br i1 %352, label %388, label %353

353:                                              ; preds = %344
  %354 = getelementptr inbounds %struct.tree_ssa_name, ptr %324, i64 0, i32 3
  %355 = load i32, ptr %354, align 8, !tbaa !16
  %356 = lshr i32 %355, 6
  %357 = zext i32 %356 to i64
  %358 = getelementptr inbounds %struct.simple_bitmap_def, ptr %351, i64 0, i32 3, i64 %357
  %359 = load i64, ptr %358, align 8, !tbaa !36
  %360 = and i32 %355, 63
  %361 = zext i32 %360 to i64
  %362 = shl nuw i64 1, %361
  %363 = and i64 %362, %359
  %364 = icmp eq i64 %363, 0
  br i1 %364, label %388, label %365

365:                                              ; preds = %353
  %366 = tail call fastcc zeroext i8 @has_single_use(ptr noundef nonnull %324)
  %367 = icmp eq i8 %366, 0
  br i1 %367, label %368, label %388

368:                                              ; preds = %365
  %369 = getelementptr inbounds %struct.tree_common, ptr %0, i64 0, i32 2
  %370 = load ptr, ptr %369, align 8, !tbaa !16
  %371 = tail call ptr @build1_stat(i32 noundef 116, ptr noundef %370, ptr noundef nonnull %324) #18
  br i1 %331, label %375, label %372

372:                                              ; preds = %368
  %373 = load ptr, ptr %369, align 8, !tbaa !16
  %374 = tail call ptr @build2_stat(i32 noundef 63, ptr noundef %373, ptr noundef %371, ptr noundef nonnull %172) #18
  br label %375

375:                                              ; preds = %372, %368
  %376 = phi ptr [ %374, %372 ], [ %371, %368 ]
  %377 = load ptr, ptr @dump_file, align 8, !tbaa !5
  %378 = icmp eq ptr %377, null
  br i1 %378, label %387, label %379

379:                                              ; preds = %375
  %380 = tail call i64 @fwrite(ptr nonnull @.str.32, i64 18, i64 1, ptr nonnull %377)
  %381 = load ptr, ptr @dump_file, align 8, !tbaa !5
  tail call void @print_generic_expr(ptr noundef %381, ptr noundef nonnull %324, i32 noundef 0) #18
  %382 = load ptr, ptr @dump_file, align 8, !tbaa !5
  %383 = tail call i64 @fwrite(ptr nonnull @.str.33, i64 6, i64 1, ptr %382)
  %384 = load ptr, ptr @dump_file, align 8, !tbaa !5
  tail call void @print_generic_expr(ptr noundef %384, ptr noundef %376, i32 noundef 0) #18
  %385 = load ptr, ptr @dump_file, align 8, !tbaa !5
  %386 = tail call i32 @fputc(i32 10, ptr %385)
  br label %387

387:                                              ; preds = %379, %375
  tail call fastcc void @register_new_assert_for(ptr noundef nonnull %324, ptr noundef %376, i32 noundef %63, ptr noundef nonnull %67, ptr noundef null, ptr noundef nonnull %1, ptr noundef nonnull byval(%struct.gimple_stmt_iterator) align 8 %2)
  br label %388

388:                                              ; preds = %213, %344, %170, %284, %311, %302, %336, %387, %365, %353, %332, %326, %323
  %389 = phi i8 [ %62, %365 ], [ 1, %387 ], [ %62, %353 ], [ %62, %332 ], [ %62, %326 ], [ %62, %323 ], [ %62, %336 ], [ %62, %302 ], [ %62, %311 ], [ %62, %284 ], [ %62, %213 ], [ %62, %170 ], [ %62, %344 ]
  %390 = icmp eq ptr %173, null
  br i1 %390, label %454, label %391

391:                                              ; preds = %388
  %392 = load i64, ptr %173, align 8
  %393 = and i64 %392, 65535
  %394 = icmp eq i64 %393, 141
  br i1 %394, label %395, label %454

395:                                              ; preds = %391
  %396 = load i64, ptr %172, align 8
  %397 = and i64 %396, 65535
  %398 = icmp eq i64 %397, 23
  br i1 %398, label %399, label %454

399:                                              ; preds = %395
  %400 = getelementptr inbounds %struct.tree_common, ptr %173, i64 0, i32 2
  %401 = load ptr, ptr %400, align 8, !tbaa !16
  %402 = load i64, ptr %401, align 8
  %403 = trunc i64 %402 to i32
  %404 = and i32 %403, 65535
  %405 = add nsw i32 %404, -6
  %406 = icmp ult i32 %405, 3
  br i1 %406, label %407, label %454

407:                                              ; preds = %399
  %408 = load ptr, ptr %13, align 8, !tbaa !60
  %409 = getelementptr i8, ptr %408, i64 80
  %410 = load i32, ptr %409, align 8, !tbaa !55
  %411 = load ptr, ptr @live, align 8, !tbaa !5
  %412 = sext i32 %410 to i64
  %413 = getelementptr inbounds ptr, ptr %411, i64 %412
  %414 = load ptr, ptr %413, align 8, !tbaa !5
  %415 = icmp eq ptr %414, null
  br i1 %415, label %454, label %416

416:                                              ; preds = %407
  %417 = getelementptr inbounds %struct.tree_ssa_name, ptr %173, i64 0, i32 3
  %418 = load i32, ptr %417, align 8, !tbaa !16
  %419 = lshr i32 %418, 6
  %420 = zext i32 %419 to i64
  %421 = getelementptr inbounds %struct.simple_bitmap_def, ptr %414, i64 0, i32 3, i64 %420
  %422 = load i64, ptr %421, align 8, !tbaa !36
  %423 = and i32 %418, 63
  %424 = zext i32 %423 to i64
  %425 = shl nuw i64 1, %424
  %426 = and i64 %425, %422
  %427 = icmp eq i64 %426, 0
  br i1 %427, label %454, label %428

428:                                              ; preds = %416
  %429 = tail call fastcc zeroext i8 @has_single_use(ptr noundef nonnull %173)
  %430 = icmp eq i8 %429, 0
  br i1 %430, label %431, label %454

431:                                              ; preds = %428
  %432 = getelementptr inbounds %struct.tree_common, ptr %0, i64 0, i32 2
  %433 = load ptr, ptr %432, align 8, !tbaa !16
  %434 = load ptr, ptr %400, align 8, !tbaa !16
  %435 = icmp eq ptr %433, %434
  br i1 %435, label %439, label %436

436:                                              ; preds = %431
  %437 = tail call ptr @build1_stat(i32 noundef 116, ptr noundef %433, ptr noundef nonnull %173) #18
  %438 = load ptr, ptr %432, align 8, !tbaa !16
  br label %439

439:                                              ; preds = %431, %436
  %440 = phi ptr [ %438, %436 ], [ %433, %431 ]
  %441 = phi ptr [ %437, %436 ], [ %173, %431 ]
  %442 = tail call ptr @build2_stat(i32 noundef 63, ptr noundef %440, ptr noundef %441, ptr noundef nonnull %172) #18
  %443 = load ptr, ptr @dump_file, align 8, !tbaa !5
  %444 = icmp eq ptr %443, null
  br i1 %444, label %453, label %445

445:                                              ; preds = %439
  %446 = tail call i64 @fwrite(ptr nonnull @.str.32, i64 18, i64 1, ptr nonnull %443)
  %447 = load ptr, ptr @dump_file, align 8, !tbaa !5
  tail call void @print_generic_expr(ptr noundef %447, ptr noundef nonnull %173, i32 noundef 0) #18
  %448 = load ptr, ptr @dump_file, align 8, !tbaa !5
  %449 = tail call i64 @fwrite(ptr nonnull @.str.33, i64 6, i64 1, ptr %448)
  %450 = load ptr, ptr @dump_file, align 8, !tbaa !5
  tail call void @print_generic_expr(ptr noundef %450, ptr noundef %442, i32 noundef 0) #18
  %451 = load ptr, ptr @dump_file, align 8, !tbaa !5
  %452 = tail call i32 @fputc(i32 10, ptr %451)
  br label %453

453:                                              ; preds = %445, %439
  tail call fastcc void @register_new_assert_for(ptr noundef nonnull %173, ptr noundef %442, i32 noundef %63, ptr noundef nonnull %67, ptr noundef null, ptr noundef nonnull %1, ptr noundef nonnull byval(%struct.gimple_stmt_iterator) align 8 %2)
  br label %454

454:                                              ; preds = %407, %399, %66, %71, %61, %453, %428, %416, %395, %391, %388, %7
  %455 = phi i8 [ 0, %7 ], [ %62, %71 ], [ %62, %66 ], [ %62, %61 ], [ %389, %428 ], [ 1, %453 ], [ %389, %416 ], [ %389, %395 ], [ %389, %391 ], [ %389, %388 ], [ %389, %399 ], [ %389, %407 ]
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %9) #18
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %8) #18
  ret i8 %455
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc zeroext i8 @register_edge_assert_for_1(ptr noundef %0, i32 noundef %1, ptr noundef %2, ptr noundef byval(%struct.gimple_stmt_iterator) align 8 %3) unnamed_addr #9 {
  %5 = load i64, ptr %0, align 8
  %6 = and i64 %5, 65535
  %7 = icmp eq i64 %6, 141
  br i1 %7, label %8, label %445

8:                                                ; preds = %4, %388
  %9 = phi i32 [ %370, %388 ], [ %1, %4 ]
  %10 = phi ptr [ %389, %388 ], [ %0, %4 ]
  %11 = phi i8 [ %390, %388 ], [ 0, %4 ]
  %12 = getelementptr inbounds %struct.tree_ssa_name, ptr %10, i64 0, i32 5
  %13 = getelementptr inbounds %struct.tree_ssa_name, ptr %10, i64 0, i32 5, i32 1
  %14 = load ptr, ptr %13, align 8, !tbaa !96
  %15 = icmp eq ptr %12, %14
  br i1 %15, label %35, label %16

16:                                               ; preds = %8
  %17 = getelementptr inbounds %struct.ssa_use_operand_d, ptr %14, i64 0, i32 1
  %18 = load ptr, ptr %17, align 8, !tbaa !96
  %19 = icmp eq ptr %12, %18
  br i1 %19, label %20, label %27

20:                                               ; preds = %16
  %21 = getelementptr inbounds %struct.ssa_use_operand_d, ptr %14, i64 0, i32 2
  %22 = load ptr, ptr %21, align 8, !tbaa !16
  %23 = load i32, ptr %22, align 8
  %24 = and i32 %23, 255
  %25 = icmp ne i32 %24, 2
  %26 = zext i1 %25 to i8
  br label %32

27:                                               ; preds = %16
  %28 = load i32, ptr @flag_var_tracking_assignments, align 4, !tbaa !20
  %29 = icmp eq i32 %28, 0
  br i1 %29, label %35, label %30

30:                                               ; preds = %27
  %31 = tail call zeroext i8 @single_imm_use_1(ptr noundef nonnull %12, ptr noundef null, ptr noundef null) #18
  br label %32

32:                                               ; preds = %20, %30
  %33 = phi i8 [ %26, %20 ], [ %31, %30 ]
  %34 = icmp eq i8 %33, 0
  br i1 %34, label %35, label %39

35:                                               ; preds = %27, %8, %32
  %36 = getelementptr inbounds %struct.tree_common, ptr %10, i64 0, i32 2
  %37 = load ptr, ptr %36, align 8, !tbaa !16
  %38 = tail call ptr @build_int_cst(ptr noundef %37, i64 noundef 0) #18
  tail call fastcc void @register_new_assert_for(ptr noundef nonnull %10, ptr noundef nonnull %10, i32 noundef %9, ptr noundef %38, ptr noundef null, ptr noundef %2, ptr noundef nonnull byval(%struct.gimple_stmt_iterator) align 8 %3)
  br label %39

39:                                               ; preds = %35, %32
  %40 = phi i8 [ 0, %32 ], [ 1, %35 ]
  %41 = getelementptr inbounds %struct.tree_ssa_name, ptr %10, i64 0, i32 2
  %42 = load ptr, ptr %41, align 8, !tbaa !16
  %43 = load i32, ptr %42, align 8
  %44 = and i32 %43, 255
  %45 = icmp eq i32 %44, 6
  br i1 %45, label %46, label %445

46:                                               ; preds = %39
  %47 = trunc i32 %43 to i8
  switch i8 %47, label %50 [
    i8 6, label %48
    i8 1, label %48
    i8 8, label %51
  ]

48:                                               ; preds = %46, %46
  %49 = lshr i32 %43, 16
  br label %51

50:                                               ; preds = %46
  tail call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1446, ptr noundef nonnull @.str.28) #18
  br label %51

51:                                               ; preds = %50, %48, %46
  %52 = phi i32 [ %49, %48 ], [ 0, %50 ], [ 59, %46 ]
  %53 = zext i32 %52 to i64
  %54 = getelementptr inbounds [0 x i8], ptr @gimple_rhs_class_table, i64 0, i64 %53
  %55 = load i8, ptr %54, align 1, !tbaa !16
  %56 = icmp eq i8 %55, 3
  br i1 %56, label %57, label %78

57:                                               ; preds = %51
  %58 = load i32, ptr %42, align 8
  %59 = and i32 %58, 255
  %60 = add nsw i32 %59, -1
  %61 = icmp ult i32 %60, 9
  tail call void @llvm.assume(i1 %61)
  %62 = zext i32 %59 to i64
  %63 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %62
  %64 = load i32, ptr %63, align 4, !tbaa !16
  %65 = zext i32 %64 to i64
  %66 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %65
  %67 = load i64, ptr %66, align 8, !tbaa !36
  %68 = icmp eq i64 %67, 0
  br i1 %68, label %69, label %70

69:                                               ; preds = %57
  tail call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1622, ptr noundef nonnull @.str.28) #18
  br label %70

70:                                               ; preds = %69, %57
  %71 = getelementptr inbounds i8, ptr %42, i64 %67
  %72 = getelementptr inbounds ptr, ptr %71, i64 1
  %73 = load ptr, ptr %72, align 8, !tbaa !5
  %74 = load i64, ptr %73, align 8
  %75 = trunc i64 %74 to i32
  %76 = and i32 %75, 65535
  %77 = and i64 %74, 65535
  br label %78

78:                                               ; preds = %51, %70
  %79 = phi i64 [ %53, %51 ], [ %77, %70 ]
  %80 = phi i32 [ %52, %51 ], [ %76, %70 ]
  %81 = getelementptr inbounds [0 x i32], ptr @tree_code_type, i64 0, i64 %79
  %82 = load i32, ptr %81, align 4, !tbaa !16
  %83 = icmp eq i32 %82, 5
  br i1 %83, label %84, label %143

84:                                               ; preds = %78
  %85 = icmp eq i32 %9, 101
  %86 = zext i1 %85 to i8
  %87 = load i32, ptr %42, align 8
  %88 = and i32 %87, 255
  %89 = add nsw i32 %88, -10
  %90 = icmp ult i32 %89, -9
  br i1 %90, label %104, label %91

91:                                               ; preds = %84
  %92 = zext i32 %88 to i64
  %93 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %92
  %94 = load i32, ptr %93, align 4, !tbaa !16
  %95 = zext i32 %94 to i64
  %96 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %95
  %97 = load i64, ptr %96, align 8, !tbaa !36
  %98 = icmp eq i64 %97, 0
  br i1 %98, label %99, label %100

99:                                               ; preds = %91
  tail call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1622, ptr noundef nonnull @.str.28) #18
  br label %100

100:                                              ; preds = %99, %91
  %101 = getelementptr inbounds i8, ptr %42, i64 %97
  %102 = getelementptr inbounds ptr, ptr %101, i64 1
  %103 = load ptr, ptr %102, align 8, !tbaa !5
  br label %104

104:                                              ; preds = %84, %100
  %105 = phi ptr [ %103, %100 ], [ null, %84 ]
  %106 = getelementptr i8, ptr %42, i64 12
  %107 = load i32, ptr %106, align 4, !tbaa !16
  %108 = icmp ugt i32 %107, 2
  br i1 %108, label %109, label %127

109:                                              ; preds = %104
  %110 = load i32, ptr %42, align 8
  %111 = and i32 %110, 255
  %112 = add nsw i32 %111, -10
  %113 = icmp ult i32 %112, -9
  br i1 %113, label %127, label %114

114:                                              ; preds = %109
  %115 = zext i32 %111 to i64
  %116 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %115
  %117 = load i32, ptr %116, align 4, !tbaa !16
  %118 = zext i32 %117 to i64
  %119 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %118
  %120 = load i64, ptr %119, align 8, !tbaa !36
  %121 = icmp eq i64 %120, 0
  br i1 %121, label %122, label %123

122:                                              ; preds = %114
  tail call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1622, ptr noundef nonnull @.str.28) #18
  br label %123

123:                                              ; preds = %122, %114
  %124 = getelementptr inbounds i8, ptr %42, i64 %120
  %125 = getelementptr inbounds ptr, ptr %124, i64 2
  %126 = load ptr, ptr %125, align 8, !tbaa !5
  br label %127

127:                                              ; preds = %104, %109, %123
  %128 = phi ptr [ null, %104 ], [ %126, %123 ], [ null, %109 ]
  %129 = load i64, ptr %105, align 8
  %130 = and i64 %129, 65535
  %131 = icmp eq i64 %130, 141
  br i1 %131, label %132, label %135

132:                                              ; preds = %127
  %133 = tail call fastcc zeroext i8 @register_edge_assert_for_2(ptr noundef nonnull %105, ptr noundef %2, ptr noundef nonnull byval(%struct.gimple_stmt_iterator) align 8 %3, i32 noundef %80, ptr noundef nonnull %105, ptr noundef %128, i8 noundef zeroext %86), !range !79
  %134 = or i8 %133, %40
  br label %135

135:                                              ; preds = %132, %127
  %136 = phi i8 [ %134, %132 ], [ %40, %127 ]
  %137 = load i64, ptr %128, align 8
  %138 = and i64 %137, 65535
  %139 = icmp eq i64 %138, 141
  br i1 %139, label %140, label %445

140:                                              ; preds = %135
  %141 = tail call fastcc zeroext i8 @register_edge_assert_for_2(ptr noundef nonnull %128, ptr noundef %2, ptr noundef nonnull byval(%struct.gimple_stmt_iterator) align 8 %3, i32 noundef %80, ptr noundef nonnull %105, ptr noundef nonnull %128, i8 noundef zeroext %86), !range !79
  %142 = or i8 %141, %136
  br label %445

143:                                              ; preds = %78
  switch i32 %9, label %334 [
    i32 102, label %144
    i32 101, label %214
  ]

144:                                              ; preds = %143
  %145 = load i32, ptr %42, align 8
  %146 = trunc i32 %145 to i8
  switch i8 %146, label %149 [
    i8 6, label %147
    i8 1, label %147
    i8 8, label %150
  ]

147:                                              ; preds = %144, %144
  %148 = lshr i32 %145, 16
  br label %150

149:                                              ; preds = %144
  tail call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1446, ptr noundef nonnull @.str.28) #18
  br label %150

150:                                              ; preds = %149, %147, %144
  %151 = phi i32 [ %148, %147 ], [ 0, %149 ], [ 59, %144 ]
  %152 = zext i32 %151 to i64
  %153 = getelementptr inbounds [0 x i8], ptr @gimple_rhs_class_table, i64 0, i64 %152
  %154 = load i8, ptr %153, align 1, !tbaa !16
  %155 = icmp eq i8 %154, 3
  br i1 %155, label %156, label %176

156:                                              ; preds = %150
  %157 = load i32, ptr %42, align 8
  %158 = and i32 %157, 255
  %159 = add nsw i32 %158, -1
  %160 = icmp ult i32 %159, 9
  tail call void @llvm.assume(i1 %160)
  %161 = zext i32 %158 to i64
  %162 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %161
  %163 = load i32, ptr %162, align 4, !tbaa !16
  %164 = zext i32 %163 to i64
  %165 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %164
  %166 = load i64, ptr %165, align 8, !tbaa !36
  %167 = icmp eq i64 %166, 0
  br i1 %167, label %168, label %169

168:                                              ; preds = %156
  tail call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1622, ptr noundef nonnull @.str.28) #18
  br label %169

169:                                              ; preds = %168, %156
  %170 = getelementptr inbounds i8, ptr %42, i64 %166
  %171 = getelementptr inbounds ptr, ptr %170, i64 1
  %172 = load ptr, ptr %171, align 8, !tbaa !5
  %173 = load i64, ptr %172, align 8
  %174 = trunc i64 %173 to i32
  %175 = and i32 %174, 65535
  br label %176

176:                                              ; preds = %150, %169
  %177 = phi i32 [ %175, %169 ], [ %151, %150 ]
  %178 = icmp eq i32 %177, 93
  br i1 %178, label %284, label %179

179:                                              ; preds = %176
  %180 = load i32, ptr %42, align 8
  %181 = trunc i32 %180 to i8
  switch i8 %181, label %184 [
    i8 6, label %182
    i8 1, label %182
    i8 8, label %185
  ]

182:                                              ; preds = %179, %179
  %183 = lshr i32 %180, 16
  br label %185

184:                                              ; preds = %179
  tail call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1446, ptr noundef nonnull @.str.28) #18
  br label %185

185:                                              ; preds = %184, %182, %179
  %186 = phi i32 [ %183, %182 ], [ 0, %184 ], [ 59, %179 ]
  %187 = zext i32 %186 to i64
  %188 = getelementptr inbounds [0 x i8], ptr @gimple_rhs_class_table, i64 0, i64 %187
  %189 = load i8, ptr %188, align 1, !tbaa !16
  %190 = icmp eq i8 %189, 3
  br i1 %190, label %191, label %211

191:                                              ; preds = %185
  %192 = load i32, ptr %42, align 8
  %193 = and i32 %192, 255
  %194 = add nsw i32 %193, -1
  %195 = icmp ult i32 %194, 9
  tail call void @llvm.assume(i1 %195)
  %196 = zext i32 %193 to i64
  %197 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %196
  %198 = load i32, ptr %197, align 4, !tbaa !16
  %199 = zext i32 %198 to i64
  %200 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %199
  %201 = load i64, ptr %200, align 8, !tbaa !36
  %202 = icmp eq i64 %201, 0
  br i1 %202, label %203, label %204

203:                                              ; preds = %191
  tail call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1622, ptr noundef nonnull @.str.28) #18
  br label %204

204:                                              ; preds = %203, %191
  %205 = getelementptr inbounds i8, ptr %42, i64 %201
  %206 = getelementptr inbounds ptr, ptr %205, i64 1
  %207 = load ptr, ptr %206, align 8, !tbaa !5
  %208 = load i64, ptr %207, align 8
  %209 = trunc i64 %208 to i32
  %210 = and i32 %209, 65535
  br label %211

211:                                              ; preds = %185, %204
  %212 = phi i32 [ %210, %204 ], [ %186, %185 ]
  %213 = icmp eq i32 %212, 89
  br i1 %213, label %284, label %334

214:                                              ; preds = %143
  %215 = load i32, ptr %42, align 8
  %216 = trunc i32 %215 to i8
  switch i8 %216, label %219 [
    i8 6, label %217
    i8 1, label %217
    i8 8, label %220
  ]

217:                                              ; preds = %214, %214
  %218 = lshr i32 %215, 16
  br label %220

219:                                              ; preds = %214
  tail call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1446, ptr noundef nonnull @.str.28) #18
  br label %220

220:                                              ; preds = %219, %217, %214
  %221 = phi i32 [ %218, %217 ], [ 0, %219 ], [ 59, %214 ]
  %222 = zext i32 %221 to i64
  %223 = getelementptr inbounds [0 x i8], ptr @gimple_rhs_class_table, i64 0, i64 %222
  %224 = load i8, ptr %223, align 1, !tbaa !16
  %225 = icmp eq i8 %224, 3
  br i1 %225, label %226, label %246

226:                                              ; preds = %220
  %227 = load i32, ptr %42, align 8
  %228 = and i32 %227, 255
  %229 = add nsw i32 %228, -1
  %230 = icmp ult i32 %229, 9
  tail call void @llvm.assume(i1 %230)
  %231 = zext i32 %228 to i64
  %232 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %231
  %233 = load i32, ptr %232, align 4, !tbaa !16
  %234 = zext i32 %233 to i64
  %235 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %234
  %236 = load i64, ptr %235, align 8, !tbaa !36
  %237 = icmp eq i64 %236, 0
  br i1 %237, label %238, label %239

238:                                              ; preds = %226
  tail call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1622, ptr noundef nonnull @.str.28) #18
  br label %239

239:                                              ; preds = %238, %226
  %240 = getelementptr inbounds i8, ptr %42, i64 %236
  %241 = getelementptr inbounds ptr, ptr %240, i64 1
  %242 = load ptr, ptr %241, align 8, !tbaa !5
  %243 = load i64, ptr %242, align 8
  %244 = trunc i64 %243 to i32
  %245 = and i32 %244, 65535
  br label %246

246:                                              ; preds = %220, %239
  %247 = phi i32 [ %245, %239 ], [ %221, %220 ]
  %248 = icmp eq i32 %247, 94
  br i1 %248, label %284, label %249

249:                                              ; preds = %246
  %250 = load i32, ptr %42, align 8
  %251 = trunc i32 %250 to i8
  switch i8 %251, label %254 [
    i8 6, label %252
    i8 1, label %252
    i8 8, label %255
  ]

252:                                              ; preds = %249, %249
  %253 = lshr i32 %250, 16
  br label %255

254:                                              ; preds = %249
  tail call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1446, ptr noundef nonnull @.str.28) #18
  br label %255

255:                                              ; preds = %254, %252, %249
  %256 = phi i32 [ %253, %252 ], [ 0, %254 ], [ 59, %249 ]
  %257 = zext i32 %256 to i64
  %258 = getelementptr inbounds [0 x i8], ptr @gimple_rhs_class_table, i64 0, i64 %257
  %259 = load i8, ptr %258, align 1, !tbaa !16
  %260 = icmp eq i8 %259, 3
  br i1 %260, label %261, label %281

261:                                              ; preds = %255
  %262 = load i32, ptr %42, align 8
  %263 = and i32 %262, 255
  %264 = add nsw i32 %263, -1
  %265 = icmp ult i32 %264, 9
  tail call void @llvm.assume(i1 %265)
  %266 = zext i32 %263 to i64
  %267 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %266
  %268 = load i32, ptr %267, align 4, !tbaa !16
  %269 = zext i32 %268 to i64
  %270 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %269
  %271 = load i64, ptr %270, align 8, !tbaa !36
  %272 = icmp eq i64 %271, 0
  br i1 %272, label %273, label %274

273:                                              ; preds = %261
  tail call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1622, ptr noundef nonnull @.str.28) #18
  br label %274

274:                                              ; preds = %273, %261
  %275 = getelementptr inbounds i8, ptr %42, i64 %271
  %276 = getelementptr inbounds ptr, ptr %275, i64 1
  %277 = load ptr, ptr %276, align 8, !tbaa !5
  %278 = load i64, ptr %277, align 8
  %279 = trunc i64 %278 to i32
  %280 = and i32 %279, 65535
  br label %281

281:                                              ; preds = %255, %274
  %282 = phi i32 [ %280, %274 ], [ %256, %255 ]
  %283 = icmp eq i32 %282, 87
  br i1 %283, label %284, label %334

284:                                              ; preds = %281, %246, %211, %176
  %285 = load i32, ptr %42, align 8
  %286 = and i32 %285, 255
  %287 = add nsw i32 %286, -10
  %288 = icmp ult i32 %287, -9
  br i1 %288, label %302, label %289

289:                                              ; preds = %284
  %290 = zext i32 %286 to i64
  %291 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %290
  %292 = load i32, ptr %291, align 4, !tbaa !16
  %293 = zext i32 %292 to i64
  %294 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %293
  %295 = load i64, ptr %294, align 8, !tbaa !36
  %296 = icmp eq i64 %295, 0
  br i1 %296, label %297, label %298

297:                                              ; preds = %289
  tail call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1622, ptr noundef nonnull @.str.28) #18
  br label %298

298:                                              ; preds = %297, %289
  %299 = getelementptr inbounds i8, ptr %42, i64 %295
  %300 = getelementptr inbounds ptr, ptr %299, i64 1
  %301 = load ptr, ptr %300, align 8, !tbaa !5
  br label %302

302:                                              ; preds = %284, %298
  %303 = phi ptr [ %301, %298 ], [ null, %284 ]
  %304 = tail call fastcc zeroext i8 @register_edge_assert_for_1(ptr noundef %303, i32 noundef %9, ptr noundef %2, ptr noundef nonnull byval(%struct.gimple_stmt_iterator) align 8 %3), !range !79
  %305 = getelementptr i8, ptr %42, i64 12
  %306 = load i32, ptr %305, align 4, !tbaa !16
  %307 = icmp ugt i32 %306, 2
  br i1 %307, label %308, label %328

308:                                              ; preds = %302
  %309 = load i32, ptr %42, align 8
  %310 = and i32 %309, 255
  %311 = add nsw i32 %310, -10
  %312 = icmp ult i32 %311, -9
  br i1 %312, label %328, label %313

313:                                              ; preds = %308
  %314 = zext i32 %310 to i64
  %315 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %314
  %316 = load i32, ptr %315, align 4, !tbaa !16
  %317 = zext i32 %316 to i64
  %318 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %317
  %319 = load i64, ptr %318, align 8, !tbaa !36
  %320 = icmp eq i64 %319, 0
  br i1 %320, label %321, label %322

321:                                              ; preds = %313
  tail call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1622, ptr noundef nonnull @.str.28) #18
  br label %322

322:                                              ; preds = %321, %313
  %323 = getelementptr inbounds i8, ptr %42, i64 %319
  %324 = getelementptr inbounds ptr, ptr %323, i64 2
  %325 = load ptr, ptr %324, align 8, !tbaa !5
  br label %328

326:                                              ; preds = %440, %429, %328, %445
  %327 = phi i8 [ %448, %445 ], [ %333, %328 ], [ %433, %429 ], [ %444, %440 ]
  ret i8 %327

328:                                              ; preds = %302, %308, %322
  %329 = phi ptr [ null, %302 ], [ %325, %322 ], [ null, %308 ]
  %330 = tail call fastcc zeroext i8 @register_edge_assert_for_1(ptr noundef %329, i32 noundef %9, ptr noundef %2, ptr noundef nonnull byval(%struct.gimple_stmt_iterator) align 8 %3), !range !79
  %331 = or i8 %304, %330
  %332 = or i8 %331, %11
  %333 = or i8 %332, %40
  br label %326

334:                                              ; preds = %211, %143, %281
  %335 = load i32, ptr %42, align 8
  %336 = trunc i32 %335 to i8
  switch i8 %336, label %339 [
    i8 6, label %337
    i8 1, label %337
    i8 8, label %340
  ]

337:                                              ; preds = %334, %334
  %338 = lshr i32 %335, 16
  br label %340

339:                                              ; preds = %334
  tail call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1446, ptr noundef nonnull @.str.28) #18
  br label %340

340:                                              ; preds = %339, %337, %334
  %341 = phi i32 [ %338, %337 ], [ 0, %339 ], [ 59, %334 ]
  %342 = zext i32 %341 to i64
  %343 = getelementptr inbounds [0 x i8], ptr @gimple_rhs_class_table, i64 0, i64 %342
  %344 = load i8, ptr %343, align 1, !tbaa !16
  %345 = icmp eq i8 %344, 3
  br i1 %345, label %346, label %366

346:                                              ; preds = %340
  %347 = load i32, ptr %42, align 8
  %348 = and i32 %347, 255
  %349 = add nsw i32 %348, -1
  %350 = icmp ult i32 %349, 9
  tail call void @llvm.assume(i1 %350)
  %351 = zext i32 %348 to i64
  %352 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %351
  %353 = load i32, ptr %352, align 4, !tbaa !16
  %354 = zext i32 %353 to i64
  %355 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %354
  %356 = load i64, ptr %355, align 8, !tbaa !36
  %357 = icmp eq i64 %356, 0
  br i1 %357, label %358, label %359

358:                                              ; preds = %346
  tail call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1622, ptr noundef nonnull @.str.28) #18
  br label %359

359:                                              ; preds = %358, %346
  %360 = getelementptr inbounds i8, ptr %42, i64 %356
  %361 = getelementptr inbounds ptr, ptr %360, i64 1
  %362 = load ptr, ptr %361, align 8, !tbaa !5
  %363 = load i64, ptr %362, align 8
  %364 = trunc i64 %363 to i32
  %365 = and i32 %364, 65535
  br label %366

366:                                              ; preds = %340, %359
  %367 = phi i32 [ %365, %359 ], [ %341, %340 ]
  %368 = icmp eq i32 %367, 96
  br i1 %368, label %369, label %394

369:                                              ; preds = %366
  %370 = tail call i32 @invert_tree_comparison(i32 noundef %9, i8 noundef zeroext 0) #18
  %371 = load i32, ptr %42, align 8
  %372 = and i32 %371, 255
  %373 = add nsw i32 %372, -10
  %374 = icmp ult i32 %373, -9
  br i1 %374, label %388, label %375

375:                                              ; preds = %369
  %376 = zext i32 %372 to i64
  %377 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %376
  %378 = load i32, ptr %377, align 4, !tbaa !16
  %379 = zext i32 %378 to i64
  %380 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %379
  %381 = load i64, ptr %380, align 8, !tbaa !36
  %382 = icmp eq i64 %381, 0
  br i1 %382, label %383, label %384

383:                                              ; preds = %375
  tail call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1622, ptr noundef nonnull @.str.28) #18
  br label %384

384:                                              ; preds = %383, %375
  %385 = getelementptr inbounds i8, ptr %42, i64 %381
  %386 = getelementptr inbounds ptr, ptr %385, i64 1
  %387 = load ptr, ptr %386, align 8, !tbaa !5
  br label %388

388:                                              ; preds = %369, %384
  %389 = phi ptr [ %387, %384 ], [ null, %369 ]
  %390 = or i8 %40, %11
  %391 = load i64, ptr %389, align 8
  %392 = and i64 %391, 65535
  %393 = icmp eq i64 %392, 141
  br i1 %393, label %8, label %445

394:                                              ; preds = %366
  %395 = load i32, ptr %42, align 8
  %396 = trunc i32 %395 to i8
  switch i8 %396, label %399 [
    i8 6, label %397
    i8 1, label %397
    i8 8, label %400
  ]

397:                                              ; preds = %394, %394
  %398 = lshr i32 %395, 16
  br label %400

399:                                              ; preds = %394
  tail call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1446, ptr noundef nonnull @.str.28) #18
  br label %400

400:                                              ; preds = %399, %397, %394
  %401 = phi i32 [ %398, %397 ], [ 0, %399 ], [ 59, %394 ]
  %402 = zext i32 %401 to i64
  %403 = getelementptr inbounds [0 x i8], ptr @gimple_rhs_class_table, i64 0, i64 %402
  %404 = load i8, ptr %403, align 1, !tbaa !16
  %405 = icmp eq i8 %404, 3
  br i1 %405, label %406, label %426

406:                                              ; preds = %400
  %407 = load i32, ptr %42, align 8
  %408 = and i32 %407, 255
  %409 = add nsw i32 %408, -1
  %410 = icmp ult i32 %409, 9
  tail call void @llvm.assume(i1 %410)
  %411 = zext i32 %408 to i64
  %412 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %411
  %413 = load i32, ptr %412, align 4, !tbaa !16
  %414 = zext i32 %413 to i64
  %415 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %414
  %416 = load i64, ptr %415, align 8, !tbaa !36
  %417 = icmp eq i64 %416, 0
  br i1 %417, label %418, label %419

418:                                              ; preds = %406
  tail call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1622, ptr noundef nonnull @.str.28) #18
  br label %419

419:                                              ; preds = %418, %406
  %420 = getelementptr inbounds i8, ptr %42, i64 %416
  %421 = getelementptr inbounds ptr, ptr %420, i64 1
  %422 = load ptr, ptr %421, align 8, !tbaa !5
  %423 = load i64, ptr %422, align 8
  %424 = trunc i64 %423 to i32
  %425 = and i32 %424, 65535
  br label %426

426:                                              ; preds = %400, %419
  %427 = phi i32 [ %425, %419 ], [ %401, %400 ]
  %428 = icmp eq i32 %427, 141
  br i1 %428, label %429, label %434

429:                                              ; preds = %426
  %430 = tail call fastcc ptr @gimple_assign_rhs1(ptr noundef nonnull %42)
  %431 = tail call fastcc zeroext i8 @register_edge_assert_for_1(ptr noundef %430, i32 noundef %9, ptr noundef %2, ptr noundef nonnull byval(%struct.gimple_stmt_iterator) align 8 %3), !range !79
  %432 = or i8 %11, %431
  %433 = or i8 %432, %40
  br label %326

434:                                              ; preds = %426
  %435 = tail call fastcc i32 @gimple_assign_rhs_code(ptr noundef nonnull %42), !range !185
  %436 = icmp eq i32 %435, 116
  br i1 %436, label %440, label %437

437:                                              ; preds = %434
  %438 = tail call fastcc i32 @gimple_assign_rhs_code(ptr noundef nonnull %42), !range !185
  %439 = icmp eq i32 %438, 113
  br i1 %439, label %440, label %445

440:                                              ; preds = %437, %434
  %441 = tail call fastcc ptr @gimple_assign_rhs1(ptr noundef nonnull %42)
  %442 = tail call fastcc zeroext i8 @register_edge_assert_for_1(ptr noundef %441, i32 noundef %9, ptr noundef %2, ptr noundef nonnull byval(%struct.gimple_stmt_iterator) align 8 %3), !range !79
  %443 = or i8 %11, %442
  %444 = or i8 %443, %40
  br label %326

445:                                              ; preds = %388, %39, %4, %437, %140, %135
  %446 = phi i8 [ %11, %437 ], [ %11, %140 ], [ %11, %135 ], [ 0, %4 ], [ %390, %388 ], [ %11, %39 ]
  %447 = phi i8 [ %40, %437 ], [ %142, %140 ], [ %136, %135 ], [ 0, %4 ], [ 0, %388 ], [ %40, %39 ]
  %448 = or i8 %447, %446
  br label %326
}

declare i32 @swap_tree_comparison(i32 noundef) local_unnamed_addr #3

declare i32 @invert_tree_comparison(i32 noundef, i8 noundef zeroext) local_unnamed_addr #3

; Function Attrs: inlinehint nounwind sspstrong uwtable
define internal fastcc ptr @gimple_expr_type(ptr noundef %0) unnamed_addr #2 {
  %2 = load i32, ptr %0, align 8
  %3 = trunc i32 %2 to i8
  switch i8 %3, label %73 [
    i8 8, label %4
    i8 6, label %23
    i8 1, label %74
  ]

4:                                                ; preds = %1
  %5 = and i32 %2, 255
  %6 = zext i32 %5 to i64
  %7 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %6
  %8 = load i32, ptr %7, align 4, !tbaa !16
  %9 = zext i32 %8 to i64
  %10 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %9
  %11 = load i64, ptr %10, align 8, !tbaa !36
  %12 = icmp eq i64 %11, 0
  br i1 %12, label %13, label %14

13:                                               ; preds = %4
  tail call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1622, ptr noundef nonnull @.str.28) #18
  br label %14

14:                                               ; preds = %4, %13
  %15 = getelementptr inbounds i8, ptr %0, i64 %11
  %16 = getelementptr inbounds ptr, ptr %15, i64 1
  %17 = load ptr, ptr %16, align 8, !tbaa !5
  %18 = getelementptr inbounds %struct.tree_common, ptr %17, i64 0, i32 2
  %19 = load ptr, ptr %18, align 8, !tbaa !16
  %20 = getelementptr inbounds %struct.tree_common, ptr %19, i64 0, i32 2
  %21 = load ptr, ptr %20, align 8, !tbaa !16
  %22 = getelementptr inbounds %struct.tree_common, ptr %21, i64 0, i32 2
  br label %74

23:                                               ; preds = %1
  %24 = lshr i32 %2, 16
  %25 = zext i32 %24 to i64
  %26 = getelementptr inbounds [0 x i8], ptr @gimple_rhs_class_table, i64 0, i64 %25
  %27 = load i8, ptr %26, align 1, !tbaa !16
  %28 = icmp eq i8 %27, 3
  br i1 %28, label %29, label %49

29:                                               ; preds = %23
  %30 = load i32, ptr %0, align 8
  %31 = and i32 %30, 255
  %32 = add nsw i32 %31, -1
  %33 = icmp ult i32 %32, 9
  tail call void @llvm.assume(i1 %33)
  %34 = zext i32 %31 to i64
  %35 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %34
  %36 = load i32, ptr %35, align 4, !tbaa !16
  %37 = zext i32 %36 to i64
  %38 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %37
  %39 = load i64, ptr %38, align 8, !tbaa !36
  %40 = icmp eq i64 %39, 0
  br i1 %40, label %41, label %42

41:                                               ; preds = %29
  tail call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1622, ptr noundef nonnull @.str.28) #18
  br label %42

42:                                               ; preds = %41, %29
  %43 = getelementptr inbounds i8, ptr %0, i64 %39
  %44 = getelementptr inbounds ptr, ptr %43, i64 1
  %45 = load ptr, ptr %44, align 8, !tbaa !5
  %46 = load i64, ptr %45, align 8
  %47 = trunc i64 %46 to i32
  %48 = and i32 %47, 65535
  br label %49

49:                                               ; preds = %23, %42
  %50 = phi i32 [ %48, %42 ], [ %24, %23 ]
  %51 = icmp eq i32 %50, 66
  br i1 %51, label %52, label %70

52:                                               ; preds = %49
  %53 = load i32, ptr %0, align 8
  %54 = and i32 %53, 255
  %55 = add nsw i32 %54, -1
  %56 = icmp ult i32 %55, 9
  tail call void @llvm.assume(i1 %56)
  %57 = zext i32 %54 to i64
  %58 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %57
  %59 = load i32, ptr %58, align 4, !tbaa !16
  %60 = zext i32 %59 to i64
  %61 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %60
  %62 = load i64, ptr %61, align 8, !tbaa !36
  %63 = icmp eq i64 %62, 0
  br i1 %63, label %64, label %65

64:                                               ; preds = %52
  tail call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1622, ptr noundef nonnull @.str.28) #18
  br label %65

65:                                               ; preds = %64, %52
  %66 = getelementptr inbounds i8, ptr %0, i64 %62
  %67 = getelementptr inbounds ptr, ptr %66, i64 1
  %68 = load ptr, ptr %67, align 8, !tbaa !5
  %69 = getelementptr inbounds %struct.tree_common, ptr %68, i64 0, i32 2
  br label %74

70:                                               ; preds = %49
  %71 = tail call ptr @gimple_get_lhs(ptr noundef nonnull %0) #18
  %72 = getelementptr inbounds %struct.tree_common, ptr %71, i64 0, i32 2
  br label %74

73:                                               ; preds = %1
  br label %74

74:                                               ; preds = %1, %14, %70, %65, %73
  %75 = phi ptr [ getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 38), %73 ], [ %22, %14 ], [ %69, %65 ], [ %72, %70 ], [ getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 47), %1 ]
  %76 = load ptr, ptr %75, align 8, !tbaa !16
  ret ptr %76
}

declare ptr @build1_stat(i32 noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

declare ptr @build2_stat(i32 noundef, ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

declare ptr @gimple_get_lhs(ptr noundef) local_unnamed_addr #3

declare ptr @make_tree_vec_stat(i32 noundef) local_unnamed_addr #3

declare void @spec_qsort(ptr noundef, i64 noundef, i64 noundef, ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define internal i32 @compare_case_labels(ptr nocapture noundef readonly %0, ptr nocapture noundef readonly %1) #9 {
  %3 = load ptr, ptr %0, align 8, !tbaa !5
  %4 = load ptr, ptr %1, align 8, !tbaa !5
  %5 = getelementptr inbounds %struct.tree_exp, ptr %3, i64 0, i32 3
  %6 = getelementptr inbounds %struct.tree_exp, ptr %3, i64 1, i32 0, i32 1
  %7 = load ptr, ptr %6, align 8, !tbaa !16
  %8 = getelementptr inbounds %struct.tree_decl_minimal, ptr %7, i64 0, i32 2
  %9 = load i32, ptr %8, align 4, !tbaa !16
  %10 = getelementptr inbounds %struct.tree_exp, ptr %4, i64 0, i32 3
  %11 = getelementptr inbounds %struct.tree_exp, ptr %4, i64 1, i32 0, i32 1
  %12 = load ptr, ptr %11, align 8, !tbaa !16
  %13 = getelementptr inbounds %struct.tree_decl_minimal, ptr %12, i64 0, i32 2
  %14 = load i32, ptr %13, align 4, !tbaa !16
  %15 = icmp ult i32 %9, %14
  br i1 %15, label %26, label %16

16:                                               ; preds = %2
  %17 = icmp eq i32 %9, %14
  br i1 %17, label %18, label %26

18:                                               ; preds = %16
  %19 = load ptr, ptr %5, align 8, !tbaa !16
  %20 = icmp eq ptr %19, null
  br i1 %20, label %26, label %21

21:                                               ; preds = %18
  %22 = load ptr, ptr %10, align 8, !tbaa !16
  %23 = icmp eq ptr %22, null
  br i1 %23, label %26, label %24

24:                                               ; preds = %21
  %25 = tail call i32 @tree_int_cst_compare(ptr noundef nonnull %19, ptr noundef nonnull %22) #18
  br label %26

26:                                               ; preds = %16, %21, %18, %2, %24
  %27 = phi i32 [ %25, %24 ], [ -1, %2 ], [ -1, %18 ], [ 1, %21 ], [ 1, %16 ]
  ret i32 %27
}

declare ptr @find_edge(ptr noundef, ptr noundef) local_unnamed_addr #3

declare ptr @label_to_block_fn(ptr noundef, ptr noundef) local_unnamed_addr #3

declare zeroext i8 @stmt_could_throw_p(ptr noundef) local_unnamed_addr #3

declare zeroext i8 @stmt_ends_bb_p(ptr noundef) local_unnamed_addr #3

declare void @count_uses_and_derefs(ptr noundef, ptr noundef, ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

declare zeroext i8 @single_imm_use_1(ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

declare ptr @build_int_cst_wide(ptr noundef, i64 noundef, i64 noundef) local_unnamed_addr #3

declare zeroext i8 @dominated_by_p(i32 noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

declare ptr @xmalloc(i64 noundef) local_unnamed_addr #3

declare zeroext i8 @bitmap_set_bit(ptr noundef, i32 noundef) local_unnamed_addr #3

declare zeroext i8 @is_gimple_reg(ptr noundef) local_unnamed_addr #3

declare void @gsi_commit_edge_inserts() local_unnamed_addr #3

declare void @statistics_counter_event(ptr noundef, ptr noundef, i32 noundef) local_unnamed_addr #3

declare void @gsi_insert_on_edge(ptr noundef, ptr noundef) local_unnamed_addr #3

declare void @gsi_insert_after(ptr noundef, ptr noundef, i32 noundef) local_unnamed_addr #3

declare ptr @duplicate_ssa_name(ptr noundef, ptr noundef) local_unnamed_addr #3

declare ptr @gimple_build_assign_stat(ptr noundef, ptr noundef) local_unnamed_addr #3

declare void @register_new_name_mapping(ptr noundef, ptr noundef) local_unnamed_addr #3

declare ptr @vec_heap_p_reserve_exact(ptr noundef, i32 noundef) local_unnamed_addr #3

declare ptr @vec_heap_o_reserve_exact(ptr noundef, i32 noundef, i64 noundef, i64 noundef) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nounwind willreturn memory(argmem: write)
declare void @llvm.memset.p0.i64(ptr nocapture writeonly, i8, i64, i1 immarg) #13

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc void @extract_range_basic(ptr nocapture noundef %0, ptr noundef %1) unnamed_addr #9 {
  %3 = alloca i8, align 1
  call void @llvm.lifetime.start.p0(i64 1, ptr nonnull %3) #18
  store i8 0, ptr %3, align 1, !tbaa !16
  %4 = tail call fastcc ptr @gimple_expr_type(ptr noundef %1)
  %5 = load i64, ptr %4, align 8
  %6 = trunc i64 %5 to i32
  %7 = and i32 %6, 65535
  %8 = add nsw i32 %7, -6
  %9 = icmp ult i32 %8, 3
  br i1 %9, label %10, label %441

10:                                               ; preds = %2
  %11 = load i32, ptr %1, align 8
  %12 = and i32 %11, 255
  %13 = trunc i32 %11 to i8
  switch i8 %13, label %439 [
    i8 6, label %14
    i8 8, label %196
  ]

14:                                               ; preds = %10
  %15 = lshr i32 %11, 16
  %16 = zext i32 %15 to i64
  %17 = getelementptr inbounds [0 x i8], ptr @gimple_rhs_class_table, i64 0, i64 %16
  %18 = load i8, ptr %17, align 1, !tbaa !16
  %19 = icmp eq i8 %18, 3
  br i1 %19, label %20, label %39

20:                                               ; preds = %14
  %21 = add nsw i32 %12, -1
  %22 = icmp ult i32 %21, 9
  tail call void @llvm.assume(i1 %22)
  %23 = zext i32 %12 to i64
  %24 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %23
  %25 = load i32, ptr %24, align 4, !tbaa !16
  %26 = zext i32 %25 to i64
  %27 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %26
  %28 = load i64, ptr %27, align 8, !tbaa !36
  %29 = icmp eq i64 %28, 0
  br i1 %29, label %30, label %31

30:                                               ; preds = %20
  tail call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1622, ptr noundef nonnull @.str.28) #18
  br label %31

31:                                               ; preds = %30, %20
  %32 = getelementptr inbounds i8, ptr %1, i64 %28
  %33 = getelementptr inbounds ptr, ptr %32, i64 1
  %34 = load ptr, ptr %33, align 8, !tbaa !5
  %35 = load i64, ptr %34, align 8
  %36 = and i64 %35, 65535
  %37 = getelementptr inbounds [0 x i8], ptr @gimple_rhs_class_table, i64 0, i64 %36
  %38 = load i8, ptr %37, align 1, !tbaa !16
  br label %39

39:                                               ; preds = %31, %14
  %40 = phi i8 [ %18, %14 ], [ %38, %31 ]
  switch i8 %40, label %439 [
    i8 2, label %41
    i8 1, label %96
    i8 3, label %174
    i8 0, label %195
  ]

41:                                               ; preds = %39
  %42 = load i32, ptr %1, align 8
  %43 = trunc i32 %42 to i8
  switch i8 %43, label %46 [
    i8 6, label %44
    i8 1, label %44
    i8 8, label %47
  ]

44:                                               ; preds = %41, %41
  %45 = lshr i32 %42, 16
  br label %47

46:                                               ; preds = %41
  tail call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1446, ptr noundef nonnull @.str.28) #18
  br label %47

47:                                               ; preds = %46, %44, %41
  %48 = phi i32 [ %45, %44 ], [ 0, %46 ], [ 59, %41 ]
  %49 = zext i32 %48 to i64
  %50 = getelementptr inbounds [0 x i8], ptr @gimple_rhs_class_table, i64 0, i64 %49
  %51 = load i8, ptr %50, align 1, !tbaa !16
  %52 = icmp eq i8 %51, 3
  br i1 %52, label %53, label %73

53:                                               ; preds = %47
  %54 = load i32, ptr %1, align 8
  %55 = and i32 %54, 255
  %56 = add nsw i32 %55, -1
  %57 = icmp ult i32 %56, 9
  tail call void @llvm.assume(i1 %57)
  %58 = zext i32 %55 to i64
  %59 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %58
  %60 = load i32, ptr %59, align 4, !tbaa !16
  %61 = zext i32 %60 to i64
  %62 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %61
  %63 = load i64, ptr %62, align 8, !tbaa !36
  %64 = icmp eq i64 %63, 0
  br i1 %64, label %65, label %66

65:                                               ; preds = %53
  tail call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1622, ptr noundef nonnull @.str.28) #18
  br label %66

66:                                               ; preds = %65, %53
  %67 = getelementptr inbounds i8, ptr %1, i64 %63
  %68 = getelementptr inbounds ptr, ptr %67, i64 1
  %69 = load ptr, ptr %68, align 8, !tbaa !5
  %70 = load i64, ptr %69, align 8
  %71 = trunc i64 %70 to i32
  %72 = and i32 %71, 65535
  br label %73

73:                                               ; preds = %66, %47
  %74 = phi i32 [ %72, %66 ], [ %48, %47 ]
  %75 = tail call fastcc ptr @gimple_expr_type(ptr noundef nonnull %1)
  %76 = load i32, ptr %1, align 8
  %77 = and i32 %76, 255
  %78 = add nsw i32 %77, -10
  %79 = icmp ult i32 %78, -9
  br i1 %79, label %93, label %80

80:                                               ; preds = %73
  %81 = zext i32 %77 to i64
  %82 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %81
  %83 = load i32, ptr %82, align 4, !tbaa !16
  %84 = zext i32 %83 to i64
  %85 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %84
  %86 = load i64, ptr %85, align 8, !tbaa !36
  %87 = icmp eq i64 %86, 0
  br i1 %87, label %88, label %89

88:                                               ; preds = %80
  tail call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1622, ptr noundef nonnull @.str.28) #18
  br label %89

89:                                               ; preds = %88, %80
  %90 = getelementptr inbounds i8, ptr %1, i64 %86
  %91 = getelementptr inbounds ptr, ptr %90, i64 1
  %92 = load ptr, ptr %91, align 8, !tbaa !5
  br label %93

93:                                               ; preds = %89, %73
  %94 = phi ptr [ %92, %89 ], [ null, %73 ]
  %95 = call zeroext i8 @tree_unary_nonnegative_warnv_p(i32 noundef %74, ptr noundef %75, ptr noundef %94, ptr noundef nonnull %3) #18
  br label %273

96:                                               ; preds = %39
  %97 = load i32, ptr %1, align 8
  %98 = trunc i32 %97 to i8
  switch i8 %98, label %101 [
    i8 6, label %99
    i8 1, label %99
    i8 8, label %102
  ]

99:                                               ; preds = %96, %96
  %100 = lshr i32 %97, 16
  br label %102

101:                                              ; preds = %96
  tail call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1446, ptr noundef nonnull @.str.28) #18
  br label %102

102:                                              ; preds = %101, %99, %96
  %103 = phi i32 [ %100, %99 ], [ 0, %101 ], [ 59, %96 ]
  %104 = zext i32 %103 to i64
  %105 = getelementptr inbounds [0 x i8], ptr @gimple_rhs_class_table, i64 0, i64 %104
  %106 = load i8, ptr %105, align 1, !tbaa !16
  %107 = icmp eq i8 %106, 3
  br i1 %107, label %108, label %128

108:                                              ; preds = %102
  %109 = load i32, ptr %1, align 8
  %110 = and i32 %109, 255
  %111 = add nsw i32 %110, -1
  %112 = icmp ult i32 %111, 9
  tail call void @llvm.assume(i1 %112)
  %113 = zext i32 %110 to i64
  %114 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %113
  %115 = load i32, ptr %114, align 4, !tbaa !16
  %116 = zext i32 %115 to i64
  %117 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %116
  %118 = load i64, ptr %117, align 8, !tbaa !36
  %119 = icmp eq i64 %118, 0
  br i1 %119, label %120, label %121

120:                                              ; preds = %108
  tail call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1622, ptr noundef nonnull @.str.28) #18
  br label %121

121:                                              ; preds = %120, %108
  %122 = getelementptr inbounds i8, ptr %1, i64 %118
  %123 = getelementptr inbounds ptr, ptr %122, i64 1
  %124 = load ptr, ptr %123, align 8, !tbaa !5
  %125 = load i64, ptr %124, align 8
  %126 = trunc i64 %125 to i32
  %127 = and i32 %126, 65535
  br label %128

128:                                              ; preds = %121, %102
  %129 = phi i32 [ %127, %121 ], [ %103, %102 ]
  %130 = tail call fastcc ptr @gimple_expr_type(ptr noundef nonnull %1)
  %131 = load i32, ptr %1, align 8
  %132 = and i32 %131, 255
  %133 = add nsw i32 %132, -10
  %134 = icmp ult i32 %133, -9
  br i1 %134, label %148, label %135

135:                                              ; preds = %128
  %136 = zext i32 %132 to i64
  %137 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %136
  %138 = load i32, ptr %137, align 4, !tbaa !16
  %139 = zext i32 %138 to i64
  %140 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %139
  %141 = load i64, ptr %140, align 8, !tbaa !36
  %142 = icmp eq i64 %141, 0
  br i1 %142, label %143, label %144

143:                                              ; preds = %135
  tail call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1622, ptr noundef nonnull @.str.28) #18
  br label %144

144:                                              ; preds = %143, %135
  %145 = getelementptr inbounds i8, ptr %1, i64 %141
  %146 = getelementptr inbounds ptr, ptr %145, i64 1
  %147 = load ptr, ptr %146, align 8, !tbaa !5
  br label %148

148:                                              ; preds = %144, %128
  %149 = phi ptr [ %147, %144 ], [ null, %128 ]
  %150 = getelementptr i8, ptr %1, i64 12
  %151 = load i32, ptr %150, align 4, !tbaa !16
  %152 = icmp ugt i32 %151, 2
  br i1 %152, label %153, label %171

153:                                              ; preds = %148
  %154 = load i32, ptr %1, align 8
  %155 = and i32 %154, 255
  %156 = add nsw i32 %155, -10
  %157 = icmp ult i32 %156, -9
  br i1 %157, label %171, label %158

158:                                              ; preds = %153
  %159 = zext i32 %155 to i64
  %160 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %159
  %161 = load i32, ptr %160, align 4, !tbaa !16
  %162 = zext i32 %161 to i64
  %163 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %162
  %164 = load i64, ptr %163, align 8, !tbaa !36
  %165 = icmp eq i64 %164, 0
  br i1 %165, label %166, label %167

166:                                              ; preds = %158
  tail call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1622, ptr noundef nonnull @.str.28) #18
  br label %167

167:                                              ; preds = %166, %158
  %168 = getelementptr inbounds i8, ptr %1, i64 %164
  %169 = getelementptr inbounds ptr, ptr %168, i64 2
  %170 = load ptr, ptr %169, align 8, !tbaa !5
  br label %171

171:                                              ; preds = %167, %153, %148
  %172 = phi ptr [ null, %148 ], [ %170, %167 ], [ null, %153 ]
  %173 = call zeroext i8 @tree_binary_nonnegative_warnv_p(i32 noundef %129, ptr noundef %130, ptr noundef %149, ptr noundef %172, ptr noundef nonnull %3) #18
  br label %273

174:                                              ; preds = %39
  %175 = load i32, ptr %1, align 8
  %176 = and i32 %175, 255
  %177 = add nsw i32 %176, -10
  %178 = icmp ult i32 %177, -9
  br i1 %178, label %192, label %179

179:                                              ; preds = %174
  %180 = zext i32 %176 to i64
  %181 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %180
  %182 = load i32, ptr %181, align 4, !tbaa !16
  %183 = zext i32 %182 to i64
  %184 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %183
  %185 = load i64, ptr %184, align 8, !tbaa !36
  %186 = icmp eq i64 %185, 0
  br i1 %186, label %187, label %188

187:                                              ; preds = %179
  tail call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1622, ptr noundef nonnull @.str.28) #18
  br label %188

188:                                              ; preds = %187, %179
  %189 = getelementptr inbounds i8, ptr %1, i64 %185
  %190 = getelementptr inbounds ptr, ptr %189, i64 1
  %191 = load ptr, ptr %190, align 8, !tbaa !5
  br label %192

192:                                              ; preds = %188, %174
  %193 = phi ptr [ %191, %188 ], [ null, %174 ]
  %194 = call zeroext i8 @tree_single_nonnegative_warnv_p(ptr noundef %193, ptr noundef nonnull %3) #18
  br label %273

195:                                              ; preds = %39
  tail call void @fancy_abort(ptr noundef nonnull @.str.27, i32 noundef 850, ptr noundef nonnull @.str.28) #18
  br label %439

196:                                              ; preds = %10
  %197 = getelementptr i8, ptr %1, i64 12
  %198 = load i32, ptr %197, align 4, !tbaa !16
  %199 = icmp eq i32 %198, 3
  br i1 %199, label %241, label %200

200:                                              ; preds = %196
  %201 = add nsw i32 %12, -10
  %202 = icmp ult i32 %201, -9
  br i1 %202, label %218, label %203

203:                                              ; preds = %200
  %204 = zext i32 %12 to i64
  %205 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %204
  %206 = load i32, ptr %205, align 4, !tbaa !16
  %207 = zext i32 %206 to i64
  %208 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %207
  %209 = load i64, ptr %208, align 8, !tbaa !36
  %210 = icmp eq i64 %209, 0
  br i1 %210, label %211, label %213

211:                                              ; preds = %203
  tail call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1622, ptr noundef nonnull @.str.28) #18
  %212 = load i32, ptr %197, align 4, !tbaa !16
  br label %213

213:                                              ; preds = %211, %203
  %214 = phi i32 [ %212, %211 ], [ %198, %203 ]
  %215 = getelementptr inbounds i8, ptr %1, i64 %209
  %216 = getelementptr inbounds ptr, ptr %215, i64 3
  %217 = load ptr, ptr %216, align 8, !tbaa !5
  br label %218

218:                                              ; preds = %213, %200
  %219 = phi i32 [ %214, %213 ], [ %198, %200 ]
  %220 = phi ptr [ %217, %213 ], [ null, %200 ]
  %221 = add i32 %219, -5
  %222 = icmp ult i32 %221, -2
  br i1 %222, label %223, label %241

223:                                              ; preds = %218
  %224 = load i32, ptr %1, align 8
  %225 = and i32 %224, 255
  %226 = add nsw i32 %225, -10
  %227 = icmp ult i32 %226, -9
  br i1 %227, label %241, label %228

228:                                              ; preds = %223
  %229 = zext i32 %225 to i64
  %230 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %229
  %231 = load i32, ptr %230, align 4, !tbaa !16
  %232 = zext i32 %231 to i64
  %233 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %232
  %234 = load i64, ptr %233, align 8, !tbaa !36
  %235 = icmp eq i64 %234, 0
  br i1 %235, label %236, label %237

236:                                              ; preds = %228
  tail call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1622, ptr noundef nonnull @.str.28) #18
  br label %237

237:                                              ; preds = %236, %228
  %238 = getelementptr inbounds i8, ptr %1, i64 %234
  %239 = getelementptr inbounds ptr, ptr %238, i64 4
  %240 = load ptr, ptr %239, align 8, !tbaa !5
  br label %241

241:                                              ; preds = %237, %223, %218, %196
  %242 = phi ptr [ %220, %218 ], [ %220, %237 ], [ %220, %223 ], [ null, %196 ]
  %243 = phi ptr [ null, %218 ], [ %240, %237 ], [ null, %223 ], [ null, %196 ]
  %244 = tail call fastcc ptr @gimple_expr_type(ptr noundef nonnull %1)
  %245 = load i32, ptr %1, align 8
  %246 = and i32 %245, 255
  %247 = add nsw i32 %246, -10
  %248 = icmp ult i32 %247, -9
  br i1 %248, label %262, label %249

249:                                              ; preds = %241
  %250 = zext i32 %246 to i64
  %251 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %250
  %252 = load i32, ptr %251, align 4, !tbaa !16
  %253 = zext i32 %252 to i64
  %254 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %253
  %255 = load i64, ptr %254, align 8, !tbaa !36
  %256 = icmp eq i64 %255, 0
  br i1 %256, label %257, label %258

257:                                              ; preds = %249
  tail call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1622, ptr noundef nonnull @.str.28) #18
  br label %258

258:                                              ; preds = %257, %249
  %259 = getelementptr inbounds i8, ptr %1, i64 %255
  %260 = getelementptr inbounds ptr, ptr %259, i64 1
  %261 = load ptr, ptr %260, align 8, !tbaa !5
  br label %262

262:                                              ; preds = %258, %241
  %263 = phi ptr [ %261, %258 ], [ null, %241 ]
  %264 = load i64, ptr %263, align 8
  %265 = and i64 %264, 65535
  %266 = icmp eq i64 %265, 121
  br i1 %266, label %267, label %270

267:                                              ; preds = %262
  %268 = getelementptr inbounds %struct.tree_exp, ptr %263, i64 0, i32 3
  %269 = load ptr, ptr %268, align 8, !tbaa !16
  br label %270

270:                                              ; preds = %267, %262
  %271 = phi ptr [ %269, %267 ], [ null, %262 ]
  %272 = call zeroext i8 @tree_call_nonnegative_warnv_p(ptr noundef %244, ptr noundef %271, ptr noundef %242, ptr noundef %243, ptr noundef nonnull %3) #18
  br label %273

273:                                              ; preds = %93, %171, %192, %270
  %274 = phi i8 [ %272, %270 ], [ %194, %192 ], [ %173, %171 ], [ %95, %93 ]
  %275 = icmp eq i8 %274, 0
  br i1 %275, label %441, label %276

276:                                              ; preds = %273
  %277 = load i8, ptr %3, align 1, !tbaa !16
  %278 = icmp eq i8 %277, 0
  br i1 %278, label %279, label %384

279:                                              ; preds = %276
  %280 = load i32, ptr %1, align 8
  %281 = and i32 %280, 255
  %282 = icmp eq i32 %281, 6
  br i1 %282, label %283, label %430

283:                                              ; preds = %279
  %284 = trunc i32 %280 to i8
  switch i8 %284, label %288 [
    i8 6, label %285
    i8 1, label %285
    i8 8, label %289
  ]

285:                                              ; preds = %283, %283
  %286 = lshr i32 %280, 16
  %287 = zext i32 %286 to i64
  br label %289

288:                                              ; preds = %283
  call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1446, ptr noundef nonnull @.str.28) #18
  br label %289

289:                                              ; preds = %288, %285, %283
  %290 = phi i64 [ %287, %285 ], [ 0, %288 ], [ 59, %283 ]
  %291 = getelementptr inbounds [0 x i8], ptr @gimple_rhs_class_table, i64 0, i64 %290
  %292 = load i8, ptr %291, align 1, !tbaa !16
  %293 = icmp eq i8 %292, 3
  br i1 %293, label %294, label %430

294:                                              ; preds = %289
  %295 = load i32, ptr %1, align 8
  %296 = and i32 %295, 255
  %297 = add nsw i32 %296, -1
  %298 = icmp ult i32 %297, 9
  call void @llvm.assume(i1 %298)
  %299 = zext i32 %296 to i64
  %300 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %299
  %301 = load i32, ptr %300, align 4, !tbaa !16
  %302 = zext i32 %301 to i64
  %303 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %302
  %304 = load i64, ptr %303, align 8, !tbaa !36
  %305 = icmp eq i64 %304, 0
  br i1 %305, label %306, label %307

306:                                              ; preds = %294
  call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1622, ptr noundef nonnull @.str.28) #18
  br label %307

307:                                              ; preds = %306, %294
  %308 = getelementptr inbounds i8, ptr %1, i64 %304
  %309 = getelementptr inbounds ptr, ptr %308, i64 1
  %310 = load ptr, ptr %309, align 8, !tbaa !5
  %311 = load i64, ptr %310, align 8
  %312 = and i64 %311, 65535
  %313 = getelementptr inbounds [0 x i8], ptr @gimple_rhs_class_table, i64 0, i64 %312
  %314 = load i8, ptr %313, align 1, !tbaa !16
  %315 = icmp eq i8 %314, 3
  br i1 %315, label %316, label %430

316:                                              ; preds = %307
  %317 = load i32, ptr %1, align 8
  %318 = and i32 %317, 255
  %319 = add nsw i32 %318, -10
  %320 = icmp ult i32 %319, -9
  br i1 %320, label %334, label %321

321:                                              ; preds = %316
  %322 = zext i32 %318 to i64
  %323 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %322
  %324 = load i32, ptr %323, align 4, !tbaa !16
  %325 = zext i32 %324 to i64
  %326 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %325
  %327 = load i64, ptr %326, align 8, !tbaa !36
  %328 = icmp eq i64 %327, 0
  br i1 %328, label %329, label %330

329:                                              ; preds = %321
  call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1622, ptr noundef nonnull @.str.28) #18
  br label %330

330:                                              ; preds = %329, %321
  %331 = getelementptr inbounds i8, ptr %1, i64 %327
  %332 = getelementptr inbounds ptr, ptr %331, i64 1
  %333 = load ptr, ptr %332, align 8, !tbaa !5
  br label %334

334:                                              ; preds = %330, %316
  %335 = phi ptr [ %333, %330 ], [ null, %316 ]
  %336 = getelementptr inbounds %struct.tree_common, ptr %335, i64 0, i32 2
  %337 = load ptr, ptr %336, align 8, !tbaa !16
  %338 = load i64, ptr %337, align 8
  %339 = trunc i64 %338 to i32
  %340 = and i32 %339, 65535
  %341 = add nsw i32 %340, -6
  %342 = icmp ult i32 %341, 3
  br i1 %342, label %343, label %430

343:                                              ; preds = %334
  %344 = and i64 %338, 2097152
  %345 = icmp ne i64 %344, 0
  %346 = load i32, ptr @flag_wrapv, align 4
  %347 = icmp ne i32 %346, 0
  %348 = select i1 %345, i1 true, i1 %347
  br i1 %348, label %430, label %349

349:                                              ; preds = %343
  %350 = load i64, ptr %335, align 8
  %351 = and i64 %350, 65535
  %352 = getelementptr inbounds [0 x i32], ptr @tree_code_type, i64 0, i64 %351
  %353 = load i32, ptr %352, align 4, !tbaa !16
  %354 = icmp ne i32 %353, 1
  %355 = and i64 %350, 134217728
  %356 = icmp eq i64 %355, 0
  %357 = or i1 %354, %356
  br i1 %357, label %430, label %358

358:                                              ; preds = %349
  %359 = getelementptr inbounds %struct.tree_type, ptr %337, i64 0, i32 13
  %360 = load ptr, ptr %359, align 8, !tbaa !16
  %361 = icmp eq ptr %360, %335
  br i1 %361, label %384, label %362

362:                                              ; preds = %358
  %363 = icmp eq ptr %360, null
  br i1 %363, label %374, label %364

364:                                              ; preds = %362
  %365 = call i32 @operand_equal_p(ptr noundef nonnull %335, ptr noundef nonnull %360, i32 noundef 0) #18
  %366 = icmp eq i32 %365, 0
  br i1 %366, label %367, label %384

367:                                              ; preds = %364
  %368 = load ptr, ptr %336, align 8, !tbaa !16
  %369 = load i64, ptr %368, align 8
  %370 = trunc i64 %369 to i32
  %371 = and i32 %370, 65535
  %372 = add nsw i32 %371, -6
  %373 = icmp ult i32 %372, 3
  br i1 %373, label %374, label %430

374:                                              ; preds = %367, %362
  %375 = phi ptr [ %368, %367 ], [ %337, %362 ]
  %376 = getelementptr inbounds %struct.tree_type, ptr %375, i64 0, i32 14
  %377 = load ptr, ptr %376, align 8, !tbaa !16
  %378 = icmp eq ptr %377, %335
  br i1 %378, label %384, label %379

379:                                              ; preds = %374
  %380 = icmp eq ptr %377, null
  br i1 %380, label %430, label %381

381:                                              ; preds = %379
  %382 = call i32 @operand_equal_p(ptr noundef nonnull %335, ptr noundef nonnull %377, i32 noundef 0) #18
  %383 = icmp eq i32 %382, 0
  br i1 %383, label %430, label %384

384:                                              ; preds = %358, %374, %364, %276, %381
  %385 = load i64, ptr %4, align 8
  %386 = trunc i64 %385 to i32
  %387 = and i32 %386, 65535
  %388 = add nsw i32 %387, -6
  %389 = icmp ult i32 %388, 3
  br i1 %389, label %390, label %410

390:                                              ; preds = %384
  %391 = getelementptr inbounds %struct.tree_type, ptr %4, i64 0, i32 13
  %392 = load ptr, ptr %391, align 8, !tbaa !16
  %393 = getelementptr inbounds %struct.tree_type, ptr %4, i64 0, i32 14
  %394 = load ptr, ptr %393, align 8, !tbaa !16
  %395 = icmp eq ptr %392, null
  br i1 %395, label %410, label %396

396:                                              ; preds = %390
  %397 = load i64, ptr %392, align 8
  %398 = and i64 %397, 65535
  %399 = getelementptr inbounds [0 x i32], ptr @tree_code_type, i64 0, i64 %398
  %400 = load i32, ptr %399, align 4, !tbaa !16
  %401 = icmp eq i32 %400, 1
  %402 = icmp ne ptr %394, null
  %403 = select i1 %401, i1 %402, i1 false
  br i1 %403, label %404, label %410

404:                                              ; preds = %396
  %405 = load i64, ptr %394, align 8
  %406 = and i64 %405, 65535
  %407 = getelementptr inbounds [0 x i32], ptr @tree_code_type, i64 0, i64 %406
  %408 = load i32, ptr %407, align 4, !tbaa !16
  %409 = icmp eq i32 %408, 1
  br i1 %409, label %416, label %410

410:                                              ; preds = %404, %396, %390, %384
  store i32 3, ptr %0, align 8, !tbaa !23
  %411 = getelementptr inbounds %struct.value_range_d, ptr %0, i64 0, i32 1
  %412 = getelementptr inbounds %struct.value_range_d, ptr %0, i64 0, i32 3
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %411, i8 0, i64 16, i1 false)
  %413 = load ptr, ptr %412, align 8, !tbaa !26
  %414 = icmp eq ptr %413, null
  br i1 %414, label %733, label %415

415:                                              ; preds = %410
  call void @bitmap_clear(ptr noundef nonnull %413) #18
  br label %733

416:                                              ; preds = %404
  %417 = call ptr @build_int_cst(ptr noundef nonnull %4, i64 noundef 0) #18
  %418 = load i64, ptr %4, align 8
  %419 = trunc i64 %418 to i32
  %420 = and i32 %419, 65535
  %421 = add nsw i32 %420, -6
  %422 = icmp ult i32 %421, 3
  br i1 %422, label %423, label %425

423:                                              ; preds = %416
  %424 = load ptr, ptr %393, align 8, !tbaa !16
  br label %425

425:                                              ; preds = %423, %416
  %426 = phi ptr [ %424, %423 ], [ null, %416 ]
  %427 = call ptr @copy_node_stat(ptr noundef %426) #18
  %428 = load i64, ptr %427, align 8
  %429 = or i64 %428, 134217728
  store i64 %429, ptr %427, align 8
  br label %434

430:                                              ; preds = %289, %334, %367, %379, %343, %349, %279, %307, %381
  %431 = call ptr @build_int_cst(ptr noundef nonnull %4, i64 noundef 0) #18
  %432 = getelementptr inbounds %struct.tree_type, ptr %4, i64 0, i32 14
  %433 = load ptr, ptr %432, align 8, !tbaa !16
  br label %434

434:                                              ; preds = %430, %425
  %435 = phi ptr [ %417, %425 ], [ %431, %430 ]
  %436 = phi ptr [ %427, %425 ], [ %433, %430 ]
  store i32 1, ptr %0, align 8, !tbaa !23
  %437 = getelementptr inbounds %struct.value_range_d, ptr %0, i64 0, i32 1
  store ptr %435, ptr %437, align 8, !tbaa !25
  %438 = getelementptr inbounds %struct.value_range_d, ptr %0, i64 0, i32 2
  store ptr %436, ptr %438, align 8, !tbaa !31
  br label %733

439:                                              ; preds = %10, %39, %195
  %440 = phi i32 [ 852, %195 ], [ 852, %39 ], [ 894, %10 ]
  tail call void @fancy_abort(ptr noundef nonnull @.str.27, i32 noundef %440, ptr noundef nonnull @.str.28) #18
  br label %441

441:                                              ; preds = %439, %2, %273
  %442 = load i32, ptr %1, align 8
  %443 = trunc i32 %442 to i8
  switch i8 %443, label %632 [
    i8 6, label %444
    i8 8, label %627
  ]

444:                                              ; preds = %441
  %445 = lshr i32 %442, 16
  %446 = zext i32 %445 to i64
  %447 = getelementptr inbounds [0 x i8], ptr @gimple_rhs_class_table, i64 0, i64 %446
  %448 = load i8, ptr %447, align 1, !tbaa !16
  %449 = icmp eq i8 %448, 3
  br i1 %449, label %450, label %470

450:                                              ; preds = %444
  %451 = and i32 %442, 255
  %452 = add nsw i32 %451, -1
  %453 = icmp ult i32 %452, 9
  call void @llvm.assume(i1 %453)
  %454 = zext i32 %451 to i64
  %455 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %454
  %456 = load i32, ptr %455, align 4, !tbaa !16
  %457 = zext i32 %456 to i64
  %458 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %457
  %459 = load i64, ptr %458, align 8, !tbaa !36
  %460 = icmp eq i64 %459, 0
  br i1 %460, label %461, label %462

461:                                              ; preds = %450
  call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1622, ptr noundef nonnull @.str.28) #18
  br label %462

462:                                              ; preds = %461, %450
  %463 = getelementptr inbounds i8, ptr %1, i64 %459
  %464 = getelementptr inbounds ptr, ptr %463, i64 1
  %465 = load ptr, ptr %464, align 8, !tbaa !5
  %466 = load i64, ptr %465, align 8
  %467 = and i64 %466, 65535
  %468 = getelementptr inbounds [0 x i8], ptr @gimple_rhs_class_table, i64 0, i64 %467
  %469 = load i8, ptr %468, align 1, !tbaa !16
  br label %470

470:                                              ; preds = %462, %444
  %471 = phi i8 [ %448, %444 ], [ %469, %462 ]
  switch i8 %471, label %632 [
    i8 2, label %472
    i8 1, label %527
    i8 3, label %605
    i8 0, label %626
  ]

472:                                              ; preds = %470
  %473 = load i32, ptr %1, align 8
  %474 = trunc i32 %473 to i8
  switch i8 %474, label %477 [
    i8 6, label %475
    i8 1, label %475
    i8 8, label %478
  ]

475:                                              ; preds = %472, %472
  %476 = lshr i32 %473, 16
  br label %478

477:                                              ; preds = %472
  call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1446, ptr noundef nonnull @.str.28) #18
  br label %478

478:                                              ; preds = %477, %475, %472
  %479 = phi i32 [ %476, %475 ], [ 0, %477 ], [ 59, %472 ]
  %480 = zext i32 %479 to i64
  %481 = getelementptr inbounds [0 x i8], ptr @gimple_rhs_class_table, i64 0, i64 %480
  %482 = load i8, ptr %481, align 1, !tbaa !16
  %483 = icmp eq i8 %482, 3
  br i1 %483, label %484, label %504

484:                                              ; preds = %478
  %485 = load i32, ptr %1, align 8
  %486 = and i32 %485, 255
  %487 = add nsw i32 %486, -1
  %488 = icmp ult i32 %487, 9
  call void @llvm.assume(i1 %488)
  %489 = zext i32 %486 to i64
  %490 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %489
  %491 = load i32, ptr %490, align 4, !tbaa !16
  %492 = zext i32 %491 to i64
  %493 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %492
  %494 = load i64, ptr %493, align 8, !tbaa !36
  %495 = icmp eq i64 %494, 0
  br i1 %495, label %496, label %497

496:                                              ; preds = %484
  call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1622, ptr noundef nonnull @.str.28) #18
  br label %497

497:                                              ; preds = %496, %484
  %498 = getelementptr inbounds i8, ptr %1, i64 %494
  %499 = getelementptr inbounds ptr, ptr %498, i64 1
  %500 = load ptr, ptr %499, align 8, !tbaa !5
  %501 = load i64, ptr %500, align 8
  %502 = trunc i64 %501 to i32
  %503 = and i32 %502, 65535
  br label %504

504:                                              ; preds = %497, %478
  %505 = phi i32 [ %503, %497 ], [ %479, %478 ]
  %506 = call fastcc ptr @gimple_expr_type(ptr noundef nonnull %1)
  %507 = load i32, ptr %1, align 8
  %508 = and i32 %507, 255
  %509 = add nsw i32 %508, -10
  %510 = icmp ult i32 %509, -9
  br i1 %510, label %524, label %511

511:                                              ; preds = %504
  %512 = zext i32 %508 to i64
  %513 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %512
  %514 = load i32, ptr %513, align 4, !tbaa !16
  %515 = zext i32 %514 to i64
  %516 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %515
  %517 = load i64, ptr %516, align 8, !tbaa !36
  %518 = icmp eq i64 %517, 0
  br i1 %518, label %519, label %520

519:                                              ; preds = %511
  call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1622, ptr noundef nonnull @.str.28) #18
  br label %520

520:                                              ; preds = %519, %511
  %521 = getelementptr inbounds i8, ptr %1, i64 %517
  %522 = getelementptr inbounds ptr, ptr %521, i64 1
  %523 = load ptr, ptr %522, align 8, !tbaa !5
  br label %524

524:                                              ; preds = %520, %504
  %525 = phi ptr [ %523, %520 ], [ null, %504 ]
  %526 = call zeroext i8 @tree_unary_nonzero_warnv_p(i32 noundef %505, ptr noundef %506, ptr noundef %525, ptr noundef nonnull %3) #18
  br label %629

527:                                              ; preds = %470
  %528 = load i32, ptr %1, align 8
  %529 = trunc i32 %528 to i8
  switch i8 %529, label %532 [
    i8 6, label %530
    i8 1, label %530
    i8 8, label %533
  ]

530:                                              ; preds = %527, %527
  %531 = lshr i32 %528, 16
  br label %533

532:                                              ; preds = %527
  call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1446, ptr noundef nonnull @.str.28) #18
  br label %533

533:                                              ; preds = %532, %530, %527
  %534 = phi i32 [ %531, %530 ], [ 0, %532 ], [ 59, %527 ]
  %535 = zext i32 %534 to i64
  %536 = getelementptr inbounds [0 x i8], ptr @gimple_rhs_class_table, i64 0, i64 %535
  %537 = load i8, ptr %536, align 1, !tbaa !16
  %538 = icmp eq i8 %537, 3
  br i1 %538, label %539, label %559

539:                                              ; preds = %533
  %540 = load i32, ptr %1, align 8
  %541 = and i32 %540, 255
  %542 = add nsw i32 %541, -1
  %543 = icmp ult i32 %542, 9
  call void @llvm.assume(i1 %543)
  %544 = zext i32 %541 to i64
  %545 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %544
  %546 = load i32, ptr %545, align 4, !tbaa !16
  %547 = zext i32 %546 to i64
  %548 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %547
  %549 = load i64, ptr %548, align 8, !tbaa !36
  %550 = icmp eq i64 %549, 0
  br i1 %550, label %551, label %552

551:                                              ; preds = %539
  call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1622, ptr noundef nonnull @.str.28) #18
  br label %552

552:                                              ; preds = %551, %539
  %553 = getelementptr inbounds i8, ptr %1, i64 %549
  %554 = getelementptr inbounds ptr, ptr %553, i64 1
  %555 = load ptr, ptr %554, align 8, !tbaa !5
  %556 = load i64, ptr %555, align 8
  %557 = trunc i64 %556 to i32
  %558 = and i32 %557, 65535
  br label %559

559:                                              ; preds = %552, %533
  %560 = phi i32 [ %558, %552 ], [ %534, %533 ]
  %561 = call fastcc ptr @gimple_expr_type(ptr noundef nonnull %1)
  %562 = load i32, ptr %1, align 8
  %563 = and i32 %562, 255
  %564 = add nsw i32 %563, -10
  %565 = icmp ult i32 %564, -9
  br i1 %565, label %579, label %566

566:                                              ; preds = %559
  %567 = zext i32 %563 to i64
  %568 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %567
  %569 = load i32, ptr %568, align 4, !tbaa !16
  %570 = zext i32 %569 to i64
  %571 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %570
  %572 = load i64, ptr %571, align 8, !tbaa !36
  %573 = icmp eq i64 %572, 0
  br i1 %573, label %574, label %575

574:                                              ; preds = %566
  call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1622, ptr noundef nonnull @.str.28) #18
  br label %575

575:                                              ; preds = %574, %566
  %576 = getelementptr inbounds i8, ptr %1, i64 %572
  %577 = getelementptr inbounds ptr, ptr %576, i64 1
  %578 = load ptr, ptr %577, align 8, !tbaa !5
  br label %579

579:                                              ; preds = %575, %559
  %580 = phi ptr [ %578, %575 ], [ null, %559 ]
  %581 = getelementptr i8, ptr %1, i64 12
  %582 = load i32, ptr %581, align 4, !tbaa !16
  %583 = icmp ugt i32 %582, 2
  br i1 %583, label %584, label %602

584:                                              ; preds = %579
  %585 = load i32, ptr %1, align 8
  %586 = and i32 %585, 255
  %587 = add nsw i32 %586, -10
  %588 = icmp ult i32 %587, -9
  br i1 %588, label %602, label %589

589:                                              ; preds = %584
  %590 = zext i32 %586 to i64
  %591 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %590
  %592 = load i32, ptr %591, align 4, !tbaa !16
  %593 = zext i32 %592 to i64
  %594 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %593
  %595 = load i64, ptr %594, align 8, !tbaa !36
  %596 = icmp eq i64 %595, 0
  br i1 %596, label %597, label %598

597:                                              ; preds = %589
  call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1622, ptr noundef nonnull @.str.28) #18
  br label %598

598:                                              ; preds = %597, %589
  %599 = getelementptr inbounds i8, ptr %1, i64 %595
  %600 = getelementptr inbounds ptr, ptr %599, i64 2
  %601 = load ptr, ptr %600, align 8, !tbaa !5
  br label %602

602:                                              ; preds = %598, %584, %579
  %603 = phi ptr [ null, %579 ], [ %601, %598 ], [ null, %584 ]
  %604 = call zeroext i8 @tree_binary_nonzero_warnv_p(i32 noundef %560, ptr noundef %561, ptr noundef %580, ptr noundef %603, ptr noundef nonnull %3) #18
  br label %629

605:                                              ; preds = %470
  %606 = load i32, ptr %1, align 8
  %607 = and i32 %606, 255
  %608 = add nsw i32 %607, -10
  %609 = icmp ult i32 %608, -9
  br i1 %609, label %623, label %610

610:                                              ; preds = %605
  %611 = zext i32 %607 to i64
  %612 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %611
  %613 = load i32, ptr %612, align 4, !tbaa !16
  %614 = zext i32 %613 to i64
  %615 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %614
  %616 = load i64, ptr %615, align 8, !tbaa !36
  %617 = icmp eq i64 %616, 0
  br i1 %617, label %618, label %619

618:                                              ; preds = %610
  call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1622, ptr noundef nonnull @.str.28) #18
  br label %619

619:                                              ; preds = %618, %610
  %620 = getelementptr inbounds i8, ptr %1, i64 %616
  %621 = getelementptr inbounds ptr, ptr %620, i64 1
  %622 = load ptr, ptr %621, align 8, !tbaa !5
  br label %623

623:                                              ; preds = %619, %605
  %624 = phi ptr [ %622, %619 ], [ null, %605 ]
  %625 = call zeroext i8 @tree_single_nonzero_warnv_p(ptr noundef %624, ptr noundef nonnull %3) #18
  br label %629

626:                                              ; preds = %470
  call void @fancy_abort(ptr noundef nonnull @.str.27, i32 noundef 927, ptr noundef nonnull @.str.28) #18
  br label %632

627:                                              ; preds = %441
  %628 = call zeroext i8 @gimple_alloca_call_p(ptr noundef nonnull %1) #18
  br label %629

629:                                              ; preds = %627, %623, %602, %524
  %630 = phi i8 [ %628, %627 ], [ %625, %623 ], [ %604, %602 ], [ %526, %524 ]
  %631 = icmp eq i8 %630, 0
  br i1 %631, label %634, label %720

632:                                              ; preds = %626, %470, %441
  %633 = phi i32 [ 929, %626 ], [ 929, %470 ], [ 951, %441 ]
  call void @fancy_abort(ptr noundef nonnull @.str.27, i32 noundef %633, ptr noundef nonnull @.str.28) #18
  br label %634

634:                                              ; preds = %632, %629
  %635 = load i32, ptr %1, align 8
  %636 = and i32 %635, 255
  %637 = icmp eq i32 %636, 6
  br i1 %637, label %638, label %727

638:                                              ; preds = %634
  %639 = trunc i32 %635 to i8
  switch i8 %639, label %642 [
    i8 6, label %640
    i8 1, label %640
    i8 8, label %643
  ]

640:                                              ; preds = %638, %638
  %641 = lshr i32 %635, 16
  br label %643

642:                                              ; preds = %638
  call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1446, ptr noundef nonnull @.str.28) #18
  br label %643

643:                                              ; preds = %642, %640, %638
  %644 = phi i32 [ %641, %640 ], [ 0, %642 ], [ 59, %638 ]
  %645 = zext i32 %644 to i64
  %646 = getelementptr inbounds [0 x i8], ptr @gimple_rhs_class_table, i64 0, i64 %645
  %647 = load i8, ptr %646, align 1, !tbaa !16
  %648 = icmp eq i8 %647, 3
  br i1 %648, label %649, label %669

649:                                              ; preds = %643
  %650 = load i32, ptr %1, align 8
  %651 = and i32 %650, 255
  %652 = add nsw i32 %651, -1
  %653 = icmp ult i32 %652, 9
  call void @llvm.assume(i1 %653)
  %654 = zext i32 %651 to i64
  %655 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %654
  %656 = load i32, ptr %655, align 4, !tbaa !16
  %657 = zext i32 %656 to i64
  %658 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %657
  %659 = load i64, ptr %658, align 8, !tbaa !36
  %660 = icmp eq i64 %659, 0
  br i1 %660, label %661, label %662

661:                                              ; preds = %649
  call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1622, ptr noundef nonnull @.str.28) #18
  br label %662

662:                                              ; preds = %661, %649
  %663 = getelementptr inbounds i8, ptr %1, i64 %659
  %664 = getelementptr inbounds ptr, ptr %663, i64 1
  %665 = load ptr, ptr %664, align 8, !tbaa !5
  %666 = load i64, ptr %665, align 8
  %667 = trunc i64 %666 to i32
  %668 = and i32 %667, 65535
  br label %669

669:                                              ; preds = %662, %643
  %670 = phi i32 [ %668, %662 ], [ %644, %643 ]
  %671 = icmp eq i32 %670, 121
  br i1 %671, label %672, label %727

672:                                              ; preds = %669
  %673 = load i32, ptr %1, align 8
  %674 = and i32 %673, 255
  %675 = add nsw i32 %674, -1
  %676 = icmp ult i32 %675, 9
  call void @llvm.assume(i1 %676)
  %677 = zext i32 %674 to i64
  %678 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %677
  %679 = load i32, ptr %678, align 4, !tbaa !16
  %680 = zext i32 %679 to i64
  %681 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %680
  %682 = load i64, ptr %681, align 8, !tbaa !36
  %683 = icmp eq i64 %682, 0
  br i1 %683, label %684, label %685

684:                                              ; preds = %672
  call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1622, ptr noundef nonnull @.str.28) #18
  br label %685

685:                                              ; preds = %684, %672
  %686 = getelementptr inbounds i8, ptr %1, i64 %682
  %687 = getelementptr inbounds ptr, ptr %686, i64 1
  %688 = load ptr, ptr %687, align 8, !tbaa !5
  %689 = getelementptr inbounds %struct.tree_exp, ptr %688, i64 0, i32 3
  %690 = load ptr, ptr %689, align 8, !tbaa !16
  %691 = call ptr @get_base_address(ptr noundef %690) #18
  %692 = icmp eq ptr %691, null
  br i1 %692, label %727, label %693

693:                                              ; preds = %685
  %694 = load i64, ptr %691, align 8
  %695 = and i64 %694, 65535
  %696 = icmp eq i64 %695, 47
  br i1 %696, label %697, label %727

697:                                              ; preds = %693
  %698 = getelementptr inbounds %struct.tree_exp, ptr %691, i64 0, i32 3
  %699 = load ptr, ptr %698, align 8, !tbaa !16
  %700 = load i64, ptr %699, align 8
  %701 = and i64 %700, 65535
  %702 = icmp eq i64 %701, 141
  br i1 %702, label %703, label %727

703:                                              ; preds = %697
  %704 = call fastcc ptr @get_value_range(ptr noundef nonnull %699)
  %705 = load i32, ptr %704, align 8, !tbaa !23
  %706 = icmp eq i32 %705, 2
  br i1 %706, label %707, label %727

707:                                              ; preds = %703
  %708 = getelementptr inbounds %struct.value_range_d, ptr %704, i64 0, i32 1
  %709 = load ptr, ptr %708, align 8, !tbaa !25
  %710 = call i32 @integer_zerop(ptr noundef %709) #18
  %711 = icmp eq i32 %710, 0
  br i1 %711, label %727, label %712

712:                                              ; preds = %707
  %713 = getelementptr inbounds %struct.value_range_d, ptr %704, i64 0, i32 2
  %714 = load ptr, ptr %713, align 8, !tbaa !31
  %715 = call i32 @integer_zerop(ptr noundef %714) #18
  %716 = icmp ne i32 %715, 0
  %717 = load i8, ptr %3, align 1
  %718 = icmp eq i8 %717, 0
  %719 = select i1 %716, i1 %718, i1 false
  br i1 %719, label %723, label %727

720:                                              ; preds = %629
  %721 = load i8, ptr %3, align 1
  %722 = icmp eq i8 %721, 0
  br i1 %722, label %723, label %727

723:                                              ; preds = %712, %720
  %724 = call ptr @build_int_cst(ptr noundef nonnull %4, i64 noundef 0) #18
  store i32 2, ptr %0, align 8, !tbaa !23
  %725 = getelementptr inbounds %struct.value_range_d, ptr %0, i64 0, i32 1
  store ptr %724, ptr %725, align 8, !tbaa !25
  %726 = getelementptr inbounds %struct.value_range_d, ptr %0, i64 0, i32 2
  store ptr %724, ptr %726, align 8, !tbaa !31
  br label %733

727:                                              ; preds = %685, %693, %697, %703, %707, %712, %634, %669, %720
  store i32 3, ptr %0, align 8, !tbaa !23
  %728 = getelementptr inbounds %struct.value_range_d, ptr %0, i64 0, i32 1
  %729 = getelementptr inbounds %struct.value_range_d, ptr %0, i64 0, i32 3
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %728, i8 0, i64 16, i1 false)
  %730 = load ptr, ptr %729, align 8, !tbaa !26
  %731 = icmp eq ptr %730, null
  br i1 %731, label %733, label %732

732:                                              ; preds = %727
  call void @bitmap_clear(ptr noundef nonnull %730) #18
  br label %733

733:                                              ; preds = %732, %727, %434, %415, %410, %723
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %3) #18
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc void @extract_range_from_assignment(ptr noundef %0, ptr noundef %1) unnamed_addr #9 {
  %3 = alloca i8, align 1
  %4 = alloca %struct.value_range_d, align 8
  %5 = alloca %struct.value_range_d, align 8
  %6 = alloca %struct.value_range_d, align 8
  %7 = alloca i8, align 1
  %8 = alloca %struct.value_range_d, align 8
  %9 = alloca %struct.value_range_d, align 8
  %10 = alloca i8, align 1
  %11 = load i32, ptr %1, align 8
  %12 = trunc i32 %11 to i8
  switch i8 %12, label %15 [
    i8 6, label %13
    i8 1, label %13
    i8 8, label %16
  ]

13:                                               ; preds = %2, %2
  %14 = lshr i32 %11, 16
  br label %16

15:                                               ; preds = %2
  tail call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1446, ptr noundef nonnull @.str.28) #18
  br label %16

16:                                               ; preds = %15, %13, %2
  %17 = phi i32 [ %14, %13 ], [ 0, %15 ], [ 59, %2 ]
  %18 = zext i32 %17 to i64
  %19 = getelementptr inbounds [0 x i8], ptr @gimple_rhs_class_table, i64 0, i64 %18
  %20 = load i8, ptr %19, align 1, !tbaa !16
  %21 = icmp eq i8 %20, 3
  br i1 %21, label %22, label %42

22:                                               ; preds = %16
  %23 = load i32, ptr %1, align 8
  %24 = and i32 %23, 255
  %25 = add nsw i32 %24, -1
  %26 = icmp ult i32 %25, 9
  tail call void @llvm.assume(i1 %26)
  %27 = zext i32 %24 to i64
  %28 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %27
  %29 = load i32, ptr %28, align 4, !tbaa !16
  %30 = zext i32 %29 to i64
  %31 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %30
  %32 = load i64, ptr %31, align 8, !tbaa !36
  %33 = icmp eq i64 %32, 0
  br i1 %33, label %34, label %35

34:                                               ; preds = %22
  tail call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1622, ptr noundef nonnull @.str.28) #18
  br label %35

35:                                               ; preds = %34, %22
  %36 = getelementptr inbounds i8, ptr %1, i64 %32
  %37 = getelementptr inbounds ptr, ptr %36, i64 1
  %38 = load ptr, ptr %37, align 8, !tbaa !5
  %39 = load i64, ptr %38, align 8
  %40 = trunc i64 %39 to i32
  %41 = and i32 %40, 65535
  br label %42

42:                                               ; preds = %16, %35
  %43 = phi i32 [ %41, %35 ], [ %17, %16 ]
  switch i32 %43, label %688 [
    i32 148, label %44
    i32 141, label %614
  ]

44:                                               ; preds = %42
  %45 = load i32, ptr %1, align 8
  %46 = and i32 %45, 255
  %47 = add nsw i32 %46, -1
  %48 = icmp ult i32 %47, 9
  tail call void @llvm.assume(i1 %48)
  %49 = zext i32 %46 to i64
  %50 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %49
  %51 = load i32, ptr %50, align 4, !tbaa !16
  %52 = zext i32 %51 to i64
  %53 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %52
  %54 = load i64, ptr %53, align 8, !tbaa !36
  %55 = icmp eq i64 %54, 0
  br i1 %55, label %56, label %57

56:                                               ; preds = %44
  tail call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1622, ptr noundef nonnull @.str.28) #18
  br label %57

57:                                               ; preds = %56, %44
  %58 = getelementptr inbounds i8, ptr %1, i64 %54
  %59 = getelementptr inbounds ptr, ptr %58, i64 1
  %60 = load ptr, ptr %59, align 8, !tbaa !5
  %61 = getelementptr i8, ptr %60, i64 40
  %62 = load ptr, ptr %61, align 8, !tbaa !16
  %63 = getelementptr i8, ptr %60, i64 48
  %64 = load ptr, ptr %63, align 8, !tbaa !16
  %65 = load i64, ptr %64, align 8
  %66 = and i64 %65, 65535
  %67 = getelementptr inbounds [0 x i32], ptr @tree_code_type, i64 0, i64 %66
  %68 = load i32, ptr %67, align 4, !tbaa !16
  %69 = icmp eq i32 %68, 5
  br i1 %69, label %71, label %70

70:                                               ; preds = %57
  tail call void @fancy_abort(ptr noundef nonnull @.str.27, i32 noundef 1410, ptr noundef nonnull @.str.28) #18
  br label %71

71:                                               ; preds = %70, %57
  %72 = getelementptr inbounds %struct.tree_exp, ptr %64, i64 0, i32 3
  %73 = load ptr, ptr %72, align 8, !tbaa !16
  %74 = icmp eq ptr %73, %62
  br i1 %74, label %78, label %75

75:                                               ; preds = %71
  %76 = load i64, ptr %73, align 8
  %77 = trunc i64 %76 to i16
  switch i16 %77, label %83 [
    i16 63, label %78
    i16 116, label %78
  ]

78:                                               ; preds = %75, %75, %71
  %79 = load i64, ptr %64, align 8
  %80 = trunc i64 %79 to i32
  %81 = and i32 %80, 65535
  %82 = getelementptr inbounds %struct.tree_exp, ptr %64, i64 1
  br label %90

83:                                               ; preds = %75
  %84 = load i64, ptr %64, align 8
  %85 = trunc i64 %84 to i32
  %86 = and i32 %85, 65535
  %87 = tail call i32 @swap_tree_comparison(i32 noundef %86) #18
  %88 = getelementptr inbounds %struct.tree_exp, ptr %64, i64 1
  %89 = load ptr, ptr %88, align 8, !tbaa !16
  br label %90

90:                                               ; preds = %83, %78
  %91 = phi ptr [ %73, %78 ], [ %89, %83 ]
  %92 = phi i32 [ %81, %78 ], [ %87, %83 ]
  %93 = phi ptr [ %82, %78 ], [ %72, %83 ]
  %94 = load ptr, ptr %93, align 8, !tbaa !16
  %95 = tail call fastcc ptr @avoid_overflow_infinity(ptr noundef %94)
  %96 = getelementptr inbounds %struct.tree_common, ptr %95, i64 0, i32 2
  %97 = load ptr, ptr %96, align 8, !tbaa !16
  %98 = icmp eq ptr %95, %62
  br i1 %98, label %99, label %100

99:                                               ; preds = %90
  tail call void @fancy_abort(ptr noundef nonnull @.str.27, i32 noundef 1436, ptr noundef nonnull @.str.28) #18
  br label %100

100:                                              ; preds = %99, %90
  %101 = load i64, ptr %97, align 8
  %102 = freeze i64 %101
  %103 = trunc i64 %102 to i32
  %104 = and i32 %103, 65535
  %105 = icmp eq i32 %104, 10
  br i1 %105, label %111, label %106

106:                                              ; preds = %100
  %107 = icmp ne i32 %104, 12
  %108 = add i32 %92, -101
  %109 = icmp ult i32 %108, 2
  %110 = select i1 %107, i1 true, i1 %109
  br i1 %110, label %120, label %114

111:                                              ; preds = %100
  %112 = add i32 %92, -101
  %113 = icmp ult i32 %112, 2
  br i1 %113, label %120, label %114

114:                                              ; preds = %111, %106
  store i32 3, ptr %0, align 8, !tbaa !23
  %115 = getelementptr inbounds %struct.value_range_d, ptr %0, i64 0, i32 1
  %116 = getelementptr inbounds %struct.value_range_d, ptr %0, i64 0, i32 3
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %115, i8 0, i64 16, i1 false)
  %117 = load ptr, ptr %116, align 8, !tbaa !26
  %118 = icmp eq ptr %117, null
  br i1 %118, label %2777, label %119

119:                                              ; preds = %114
  tail call void @bitmap_clear(ptr noundef nonnull %117) #18
  br label %2777

120:                                              ; preds = %111, %106
  %121 = load i64, ptr %95, align 8
  %122 = and i64 %121, 65535
  %123 = icmp eq i64 %122, 141
  br i1 %123, label %124, label %140

124:                                              ; preds = %120
  %125 = tail call fastcc ptr @get_value_range(ptr noundef nonnull %95)
  %126 = icmp eq ptr %125, null
  br i1 %126, label %140, label %127

127:                                              ; preds = %124
  %128 = load i32, ptr %125, align 8, !tbaa !23
  switch i32 %128, label %129 [
    i32 0, label %139
    i32 3, label %139
  ]

129:                                              ; preds = %127
  %130 = getelementptr inbounds %struct.value_range_d, ptr %125, i64 0, i32 1
  %131 = load ptr, ptr %130, align 8, !tbaa !25
  %132 = tail call zeroext i8 @is_gimple_min_invariant(ptr noundef %131) #18
  %133 = icmp eq i8 %132, 0
  br i1 %133, label %139, label %134

134:                                              ; preds = %129
  %135 = getelementptr inbounds %struct.value_range_d, ptr %125, i64 0, i32 2
  %136 = load ptr, ptr %135, align 8, !tbaa !31
  %137 = tail call zeroext i8 @is_gimple_min_invariant(ptr noundef %136) #18
  %138 = icmp eq i8 %137, 0
  br i1 %138, label %139, label %140

139:                                              ; preds = %134, %129, %127, %127
  br label %140

140:                                              ; preds = %139, %134, %124, %120
  %141 = phi ptr [ null, %139 ], [ %125, %134 ], [ null, %124 ], [ null, %120 ]
  %142 = getelementptr inbounds %struct.value_range_d, ptr %0, i64 0, i32 3
  %143 = load ptr, ptr %142, align 8, !tbaa !5
  %144 = icmp eq ptr %143, null
  br i1 %144, label %145, label %152

145:                                              ; preds = %140
  %146 = getelementptr i8, ptr %62, i64 40
  %147 = load i32, ptr %146, align 8, !tbaa !16
  %148 = load ptr, ptr @vr_value, align 8, !tbaa !5
  %149 = zext i32 %147 to i64
  %150 = getelementptr inbounds ptr, ptr %148, i64 %149
  %151 = load ptr, ptr %150, align 8, !tbaa !5
  br label %161

152:                                              ; preds = %140
  tail call void @fancy_abort(ptr noundef nonnull @.str.27, i32 noundef 1463, ptr noundef nonnull @.str.28) #18
  %153 = load ptr, ptr %142, align 8, !tbaa !5
  %154 = getelementptr i8, ptr %62, i64 40
  %155 = load i32, ptr %154, align 8, !tbaa !16
  %156 = load ptr, ptr @vr_value, align 8, !tbaa !5
  %157 = zext i32 %155 to i64
  %158 = getelementptr inbounds ptr, ptr %156, i64 %157
  %159 = load ptr, ptr %158, align 8, !tbaa !5
  %160 = icmp eq ptr %153, null
  br i1 %160, label %161, label %165

161:                                              ; preds = %152, %145
  %162 = phi ptr [ %151, %145 ], [ %159, %152 ]
  %163 = phi i32 [ %147, %145 ], [ %155, %152 ]
  %164 = tail call ptr @bitmap_obstack_alloc_stat(ptr noundef null) #18
  store ptr %164, ptr %142, align 8, !tbaa !5
  br label %165

165:                                              ; preds = %161, %152
  %166 = phi ptr [ %162, %161 ], [ %159, %152 ]
  %167 = phi i32 [ %163, %161 ], [ %155, %152 ]
  %168 = phi ptr [ %164, %161 ], [ %153, %152 ]
  %169 = tail call zeroext i8 @bitmap_set_bit(ptr noundef %168, i32 noundef %167) #18
  %170 = icmp eq ptr %166, null
  br i1 %170, label %178, label %171

171:                                              ; preds = %165
  %172 = getelementptr inbounds %struct.value_range_d, ptr %166, i64 0, i32 3
  %173 = load ptr, ptr %172, align 8, !tbaa !26
  %174 = icmp eq ptr %173, null
  br i1 %174, label %178, label %175

175:                                              ; preds = %171
  %176 = load ptr, ptr %142, align 8, !tbaa !5
  %177 = tail call zeroext i8 @bitmap_ior_into(ptr noundef %176, ptr noundef nonnull %173) #18
  br label %178

178:                                              ; preds = %175, %171, %165
  %179 = load i64, ptr %91, align 8
  %180 = trunc i64 %179 to i16
  switch i16 %180, label %216 [
    i16 116, label %181
    i16 63, label %181
  ]

181:                                              ; preds = %178, %178
  %182 = and i64 %179, 65535
  %183 = icmp eq i64 %182, 63
  br i1 %183, label %184, label %191

184:                                              ; preds = %181
  %185 = getelementptr inbounds %struct.tree_exp, ptr %91, i64 1
  %186 = load ptr, ptr %185, align 8, !tbaa !16
  %187 = getelementptr inbounds %struct.tree_common, ptr %186, i64 0, i32 2
  %188 = load ptr, ptr %187, align 8, !tbaa !16
  %189 = tail call ptr @fold_build1_stat_loc(i32 noundef 0, i32 noundef 79, ptr noundef %188, ptr noundef %186) #18
  %190 = tail call ptr @int_const_binop(i32 noundef 63, ptr noundef nonnull %95, ptr noundef %189, i32 noundef 0) #18
  br label %195

191:                                              ; preds = %181
  %192 = getelementptr inbounds %struct.tree_common, ptr %62, i64 0, i32 2
  %193 = load ptr, ptr %192, align 8, !tbaa !16
  %194 = tail call ptr @build_int_cst(ptr noundef %193, i64 noundef 0) #18
  br label %195

195:                                              ; preds = %191, %184
  %196 = phi ptr [ %190, %184 ], [ %95, %191 ]
  %197 = phi ptr [ %189, %184 ], [ %194, %191 ]
  %198 = getelementptr inbounds %struct.tree_common, ptr %62, i64 0, i32 2
  %199 = load ptr, ptr %198, align 8, !tbaa !16
  %200 = getelementptr inbounds %struct.tree_int_cst, ptr %197, i64 0, i32 1
  %201 = load i64, ptr %200, align 8, !tbaa !16
  %202 = getelementptr inbounds %struct.tree_int_cst, ptr %197, i64 0, i32 1, i32 1
  %203 = load i64, ptr %202, align 8, !tbaa !16
  %204 = tail call ptr @force_fit_type_double(ptr noundef %199, i64 noundef %201, i64 noundef %203, i32 noundef 0, i8 noundef zeroext 0) #18
  %205 = load ptr, ptr %198, align 8, !tbaa !16
  %206 = getelementptr inbounds %struct.tree_int_cst, ptr %196, i64 0, i32 1
  %207 = load i64, ptr %206, align 8, !tbaa !16
  %208 = getelementptr inbounds %struct.tree_int_cst, ptr %196, i64 0, i32 1, i32 1
  %209 = load i64, ptr %208, align 8, !tbaa !16
  %210 = tail call ptr @force_fit_type_double(ptr noundef %205, i64 noundef %207, i64 noundef %209, i32 noundef 0, i8 noundef zeroext 0) #18
  switch i32 %92, label %215 [
    i32 98, label %211
    i32 99, label %213
  ]

211:                                              ; preds = %195
  %212 = load ptr, ptr %142, align 8, !tbaa !26
  tail call fastcc void @set_and_canonicalize_value_range(ptr noundef nonnull %0, i32 noundef 1, ptr noundef %204, ptr noundef %210, ptr noundef %212)
  br label %403

213:                                              ; preds = %195
  %214 = load ptr, ptr %142, align 8, !tbaa !26
  tail call fastcc void @set_and_canonicalize_value_range(ptr noundef nonnull %0, i32 noundef 2, ptr noundef %204, ptr noundef %210, ptr noundef %214)
  br label %403

215:                                              ; preds = %195
  tail call void @fancy_abort(ptr noundef nonnull @.str.27, i32 noundef 1511, ptr noundef nonnull @.str.28) #18
  br label %403

216:                                              ; preds = %178
  switch i32 %92, label %306 [
    i32 101, label %217
    i32 102, label %256
  ]

217:                                              ; preds = %216
  %218 = icmp eq ptr %141, null
  br i1 %218, label %225, label %219

219:                                              ; preds = %217
  %220 = load i32, ptr %141, align 8, !tbaa !23
  %221 = getelementptr inbounds %struct.value_range_d, ptr %141, i64 0, i32 1
  %222 = load ptr, ptr %221, align 8, !tbaa !25
  %223 = getelementptr inbounds %struct.value_range_d, ptr %141, i64 0, i32 2
  %224 = load ptr, ptr %223, align 8, !tbaa !31
  br label %225

225:                                              ; preds = %219, %217
  %226 = phi ptr [ %224, %219 ], [ %95, %217 ]
  %227 = phi ptr [ %222, %219 ], [ %95, %217 ]
  %228 = phi i32 [ %220, %219 ], [ 1, %217 ]
  store i32 %228, ptr %0, align 8, !tbaa !23
  %229 = getelementptr inbounds %struct.value_range_d, ptr %0, i64 0, i32 1
  store ptr %227, ptr %229, align 8, !tbaa !25
  %230 = getelementptr inbounds %struct.value_range_d, ptr %0, i64 0, i32 2
  store ptr %226, ptr %230, align 8, !tbaa !31
  %231 = load i64, ptr %95, align 8
  %232 = and i64 %231, 65535
  %233 = icmp eq i64 %232, 141
  br i1 %233, label %234, label %403

234:                                              ; preds = %225
  %235 = getelementptr i8, ptr %95, i64 40
  %236 = load i32, ptr %235, align 8, !tbaa !16
  %237 = load ptr, ptr @vr_value, align 8, !tbaa !5
  %238 = zext i32 %236 to i64
  %239 = getelementptr inbounds ptr, ptr %237, i64 %238
  %240 = load ptr, ptr %239, align 8, !tbaa !5
  %241 = load ptr, ptr %142, align 8, !tbaa !5
  %242 = icmp eq ptr %241, null
  br i1 %242, label %243, label %245

243:                                              ; preds = %234
  %244 = tail call ptr @bitmap_obstack_alloc_stat(ptr noundef null) #18
  store ptr %244, ptr %142, align 8, !tbaa !5
  br label %245

245:                                              ; preds = %243, %234
  %246 = phi ptr [ %244, %243 ], [ %241, %234 ]
  %247 = tail call zeroext i8 @bitmap_set_bit(ptr noundef %246, i32 noundef %236) #18
  %248 = icmp eq ptr %240, null
  br i1 %248, label %403, label %249

249:                                              ; preds = %245
  %250 = getelementptr inbounds %struct.value_range_d, ptr %240, i64 0, i32 3
  %251 = load ptr, ptr %250, align 8, !tbaa !26
  %252 = icmp eq ptr %251, null
  br i1 %252, label %403, label %253

253:                                              ; preds = %249
  %254 = load ptr, ptr %142, align 8, !tbaa !5
  %255 = tail call zeroext i8 @bitmap_ior_into(ptr noundef %254, ptr noundef nonnull %251) #18
  br label %403

256:                                              ; preds = %216
  %257 = icmp eq ptr %141, null
  br i1 %257, label %271, label %258

258:                                              ; preds = %256
  %259 = load i32, ptr %141, align 8, !tbaa !23
  %260 = icmp eq i32 %259, 1
  br i1 %260, label %261, label %271

261:                                              ; preds = %258
  %262 = getelementptr inbounds %struct.value_range_d, ptr %141, i64 0, i32 1
  %263 = load ptr, ptr %262, align 8, !tbaa !25
  %264 = getelementptr inbounds %struct.value_range_d, ptr %141, i64 0, i32 2
  %265 = load ptr, ptr %264, align 8, !tbaa !31
  %266 = tail call fastcc i32 @compare_values(ptr noundef %263, ptr noundef %265)
  %267 = icmp eq i32 %266, 0
  br i1 %267, label %268, label %271

268:                                              ; preds = %261
  %269 = load ptr, ptr %262, align 8, !tbaa !25
  %270 = load ptr, ptr %264, align 8, !tbaa !31
  br label %271

271:                                              ; preds = %268, %261, %258, %256
  %272 = phi ptr [ %270, %268 ], [ %95, %261 ], [ %95, %258 ], [ %95, %256 ]
  %273 = phi ptr [ %269, %268 ], [ %95, %261 ], [ %95, %258 ], [ %95, %256 ]
  %274 = load i64, ptr %97, align 8
  %275 = trunc i64 %274 to i32
  %276 = and i32 %275, 65535
  %277 = add nsw i32 %276, -6
  %278 = icmp ult i32 %277, 3
  br i1 %278, label %279, label %301

279:                                              ; preds = %271
  %280 = getelementptr inbounds %struct.tree_common, ptr %273, i64 0, i32 2
  %281 = load ptr, ptr %280, align 8, !tbaa !16
  %282 = load i64, ptr %281, align 8
  %283 = trunc i64 %282 to i32
  %284 = and i32 %283, 65535
  %285 = add nsw i32 %284, -6
  %286 = icmp ult i32 %285, 3
  br i1 %286, label %287, label %301

287:                                              ; preds = %279
  %288 = getelementptr inbounds %struct.tree_type, ptr %281, i64 0, i32 13
  %289 = load ptr, ptr %288, align 8, !tbaa !16
  %290 = icmp eq ptr %289, %273
  br i1 %290, label %296, label %291

291:                                              ; preds = %287
  %292 = icmp eq ptr %289, null
  br i1 %292, label %301, label %293

293:                                              ; preds = %291
  %294 = tail call i32 @operand_equal_p(ptr noundef nonnull %273, ptr noundef nonnull %289, i32 noundef 0) #18
  %295 = icmp eq i32 %294, 0
  br i1 %295, label %301, label %296

296:                                              ; preds = %293, %287
  %297 = tail call fastcc zeroext i8 @vrp_val_is_max(ptr noundef %272), !range !79
  %298 = icmp eq i8 %297, 0
  %299 = select i1 %298, ptr %272, ptr %95
  %300 = select i1 %298, ptr %273, ptr %95
  br label %301

301:                                              ; preds = %296, %293, %291, %279, %271
  %302 = phi ptr [ %272, %293 ], [ %272, %271 ], [ %299, %296 ], [ %272, %291 ], [ %272, %279 ]
  %303 = phi ptr [ %273, %293 ], [ %273, %271 ], [ %300, %296 ], [ %273, %291 ], [ %273, %279 ]
  store i32 2, ptr %0, align 8, !tbaa !23
  %304 = getelementptr inbounds %struct.value_range_d, ptr %0, i64 0, i32 1
  store ptr %303, ptr %304, align 8, !tbaa !25
  %305 = getelementptr inbounds %struct.value_range_d, ptr %0, i64 0, i32 2
  store ptr %302, ptr %305, align 8, !tbaa !31
  br label %403

306:                                              ; preds = %216
  %307 = icmp eq i32 %92, 97
  %308 = add i32 %92, -97
  %309 = icmp ult i32 %308, 2
  br i1 %309, label %310, label %354

310:                                              ; preds = %306
  %311 = getelementptr inbounds %struct.tree_type, ptr %97, i64 0, i32 13
  %312 = load ptr, ptr %311, align 8, !tbaa !16
  %313 = icmp eq ptr %141, null
  br i1 %313, label %320, label %314

314:                                              ; preds = %310
  %315 = load i32, ptr %141, align 8, !tbaa !23
  %316 = icmp eq i32 %315, 2
  br i1 %316, label %320, label %317

317:                                              ; preds = %314
  %318 = getelementptr inbounds %struct.value_range_d, ptr %141, i64 0, i32 2
  %319 = load ptr, ptr %318, align 8, !tbaa !31
  br label %320

320:                                              ; preds = %317, %314, %310
  %321 = phi ptr [ %319, %317 ], [ %95, %314 ], [ %95, %310 ]
  br i1 %307, label %322, label %325

322:                                              ; preds = %320
  %323 = tail call fastcc i32 @compare_values(ptr noundef %321, ptr noundef %312)
  %324 = icmp eq i32 %323, 0
  br i1 %324, label %334, label %325

325:                                              ; preds = %322, %320
  %326 = load i64, ptr %321, align 8
  %327 = and i64 %326, 65535
  %328 = getelementptr inbounds [0 x i32], ptr @tree_code_type, i64 0, i64 %327
  %329 = load i32, ptr %328, align 4, !tbaa !16
  %330 = icmp ne i32 %329, 1
  %331 = and i64 %326, 134217728
  %332 = icmp eq i64 %331, 0
  %333 = or i1 %330, %332
  br i1 %333, label %339, label %334

334:                                              ; preds = %325, %322
  store i32 3, ptr %0, align 8, !tbaa !23
  %335 = getelementptr inbounds %struct.value_range_d, ptr %0, i64 0, i32 1
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %335, i8 0, i64 16, i1 false)
  %336 = load ptr, ptr %142, align 8, !tbaa !26
  %337 = icmp eq ptr %336, null
  br i1 %337, label %403, label %338

338:                                              ; preds = %334
  tail call void @bitmap_clear(ptr noundef nonnull %336) #18
  br label %403

339:                                              ; preds = %325
  br i1 %307, label %340, label %351

340:                                              ; preds = %339
  %341 = tail call ptr @build_int_cst(ptr noundef nonnull %97, i64 noundef 1) #18
  %342 = tail call ptr @fold_build2_stat_loc(i32 noundef 0, i32 noundef 64, ptr noundef nonnull %97, ptr noundef nonnull %321, ptr noundef %341) #18
  %343 = load i64, ptr %342, align 8
  %344 = and i64 %343, 65535
  %345 = getelementptr inbounds [0 x i32], ptr @tree_code_type, i64 0, i64 %344
  %346 = load i32, ptr %345, align 4, !tbaa !16
  %347 = add i32 %346, -4
  %348 = icmp ult i32 %347, 7
  br i1 %348, label %349, label %351

349:                                              ; preds = %340
  %350 = or i64 %343, 8388608
  store i64 %350, ptr %342, align 8
  br label %351

351:                                              ; preds = %349, %340, %339
  %352 = phi ptr [ %321, %339 ], [ %342, %349 ], [ %342, %340 ]
  %353 = load ptr, ptr %142, align 8, !tbaa !26
  tail call fastcc void @set_value_range(ptr noundef nonnull %0, i32 noundef 1, ptr noundef %312, ptr noundef nonnull %352, ptr noundef %353)
  br label %403

354:                                              ; preds = %306
  %355 = icmp eq i32 %92, 99
  %356 = add i32 %92, -99
  %357 = icmp ult i32 %356, 2
  br i1 %357, label %358, label %402

358:                                              ; preds = %354
  %359 = getelementptr inbounds %struct.tree_type, ptr %97, i64 0, i32 14
  %360 = load ptr, ptr %359, align 8, !tbaa !16
  %361 = icmp eq ptr %141, null
  br i1 %361, label %368, label %362

362:                                              ; preds = %358
  %363 = load i32, ptr %141, align 8, !tbaa !23
  %364 = icmp eq i32 %363, 2
  br i1 %364, label %368, label %365

365:                                              ; preds = %362
  %366 = getelementptr inbounds %struct.value_range_d, ptr %141, i64 0, i32 1
  %367 = load ptr, ptr %366, align 8, !tbaa !25
  br label %368

368:                                              ; preds = %365, %362, %358
  %369 = phi ptr [ %367, %365 ], [ %95, %362 ], [ %95, %358 ]
  br i1 %355, label %370, label %373

370:                                              ; preds = %368
  %371 = tail call fastcc i32 @compare_values(ptr noundef %369, ptr noundef %360)
  %372 = icmp eq i32 %371, 0
  br i1 %372, label %382, label %373

373:                                              ; preds = %370, %368
  %374 = load i64, ptr %369, align 8
  %375 = and i64 %374, 65535
  %376 = getelementptr inbounds [0 x i32], ptr @tree_code_type, i64 0, i64 %375
  %377 = load i32, ptr %376, align 4, !tbaa !16
  %378 = icmp ne i32 %377, 1
  %379 = and i64 %374, 134217728
  %380 = icmp eq i64 %379, 0
  %381 = or i1 %378, %380
  br i1 %381, label %387, label %382

382:                                              ; preds = %373, %370
  store i32 3, ptr %0, align 8, !tbaa !23
  %383 = getelementptr inbounds %struct.value_range_d, ptr %0, i64 0, i32 1
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %383, i8 0, i64 16, i1 false)
  %384 = load ptr, ptr %142, align 8, !tbaa !26
  %385 = icmp eq ptr %384, null
  br i1 %385, label %403, label %386

386:                                              ; preds = %382
  tail call void @bitmap_clear(ptr noundef nonnull %384) #18
  br label %403

387:                                              ; preds = %373
  br i1 %355, label %388, label %399

388:                                              ; preds = %387
  %389 = tail call ptr @build_int_cst(ptr noundef nonnull %97, i64 noundef 1) #18
  %390 = tail call ptr @fold_build2_stat_loc(i32 noundef 0, i32 noundef 63, ptr noundef nonnull %97, ptr noundef nonnull %369, ptr noundef %389) #18
  %391 = load i64, ptr %390, align 8
  %392 = and i64 %391, 65535
  %393 = getelementptr inbounds [0 x i32], ptr @tree_code_type, i64 0, i64 %392
  %394 = load i32, ptr %393, align 4, !tbaa !16
  %395 = add i32 %394, -4
  %396 = icmp ult i32 %395, 7
  br i1 %396, label %397, label %399

397:                                              ; preds = %388
  %398 = or i64 %391, 8388608
  store i64 %398, ptr %390, align 8
  br label %399

399:                                              ; preds = %397, %388, %387
  %400 = phi ptr [ %369, %387 ], [ %390, %397 ], [ %390, %388 ]
  %401 = load ptr, ptr %142, align 8, !tbaa !26
  tail call fastcc void @set_value_range(ptr noundef nonnull %0, i32 noundef 1, ptr noundef nonnull %400, ptr noundef %360, ptr noundef %401)
  br label %403

402:                                              ; preds = %354
  tail call void @fancy_abort(ptr noundef nonnull @.str.27, i32 noundef 1654, ptr noundef nonnull @.str.28) #18
  br label %403

403:                                              ; preds = %402, %399, %386, %382, %351, %338, %334, %301, %253, %249, %245, %225, %215, %213, %211
  %404 = tail call fastcc ptr @get_value_range(ptr noundef nonnull %62)
  %405 = load i32, ptr %0, align 8, !tbaa !23
  switch i32 %405, label %406 [
    i32 3, label %2779
    i32 0, label %2779
  ]

406:                                              ; preds = %403
  %407 = load i32, ptr %404, align 8, !tbaa !23
  switch i32 %407, label %408 [
    i32 3, label %2779
    i32 0, label %2779
  ]

408:                                              ; preds = %406
  %409 = getelementptr inbounds %struct.value_range_d, ptr %0, i64 0, i32 1
  %410 = load ptr, ptr %409, align 8, !tbaa !25
  %411 = tail call zeroext i8 @is_gimple_min_invariant(ptr noundef %410) #18
  %412 = icmp eq i8 %411, 0
  br i1 %412, label %2777, label %413

413:                                              ; preds = %408
  %414 = getelementptr inbounds %struct.value_range_d, ptr %0, i64 0, i32 2
  %415 = load ptr, ptr %414, align 8, !tbaa !31
  %416 = tail call zeroext i8 @is_gimple_min_invariant(ptr noundef %415) #18
  %417 = icmp eq i8 %416, 0
  br i1 %417, label %2777, label %418

418:                                              ; preds = %413
  %419 = getelementptr inbounds %struct.value_range_d, ptr %404, i64 0, i32 1
  %420 = load ptr, ptr %419, align 8, !tbaa !25
  %421 = tail call zeroext i8 @is_gimple_min_invariant(ptr noundef %420) #18
  %422 = icmp eq i8 %421, 0
  br i1 %422, label %2777, label %423

423:                                              ; preds = %418
  %424 = getelementptr inbounds %struct.value_range_d, ptr %404, i64 0, i32 2
  %425 = load ptr, ptr %424, align 8, !tbaa !31
  %426 = tail call zeroext i8 @is_gimple_min_invariant(ptr noundef %425) #18
  %427 = icmp eq i8 %426, 0
  br i1 %427, label %2777, label %428

428:                                              ; preds = %423
  %429 = load i32, ptr %404, align 8, !tbaa !23
  switch i32 %429, label %2777 [
    i32 1, label %430
    i32 2, label %454
  ]

430:                                              ; preds = %428
  %431 = load i32, ptr %0, align 8, !tbaa !23
  switch i32 %431, label %2779 [
    i32 1, label %432
    i32 2, label %457
  ]

432:                                              ; preds = %430
  %433 = tail call fastcc zeroext i8 @value_ranges_intersect_p(ptr noundef nonnull %404, ptr noundef nonnull %0), !range !79
  %434 = icmp eq i8 %433, 0
  br i1 %434, label %450, label %435

435:                                              ; preds = %432
  %436 = load ptr, ptr %409, align 8, !tbaa !25
  %437 = load ptr, ptr %419, align 8, !tbaa !25
  %438 = tail call fastcc i32 @compare_values(ptr noundef %436, ptr noundef %437)
  %439 = icmp eq i32 %438, -1
  %440 = select i1 %439, ptr %419, ptr %409
  %441 = load ptr, ptr %440, align 8, !tbaa !25
  %442 = load ptr, ptr %414, align 8, !tbaa !31
  %443 = load ptr, ptr %424, align 8, !tbaa !31
  %444 = tail call fastcc i32 @compare_values(ptr noundef %442, ptr noundef %443)
  %445 = icmp eq i32 %444, 1
  %446 = select i1 %445, ptr %424, ptr %414
  %447 = load ptr, ptr %446, align 8, !tbaa !31
  %448 = load i32, ptr %0, align 8, !tbaa !23
  %449 = load ptr, ptr %142, align 8, !tbaa !26
  tail call fastcc void @set_value_range(ptr noundef nonnull %0, i32 noundef %448, ptr noundef %441, ptr noundef %447, ptr noundef %449)
  br label %2777

450:                                              ; preds = %432
  store i32 3, ptr %0, align 8, !tbaa !23
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %409, i8 0, i64 16, i1 false)
  %451 = load ptr, ptr %142, align 8, !tbaa !26
  %452 = icmp eq ptr %451, null
  br i1 %452, label %2782, label %453

453:                                              ; preds = %450
  tail call void @bitmap_clear(ptr noundef nonnull %451) #18
  br label %2777

454:                                              ; preds = %428
  %455 = load i32, ptr %0, align 8, !tbaa !23
  %456 = icmp eq i32 %455, 1
  br i1 %456, label %457, label %2779

457:                                              ; preds = %454, %430
  %458 = load ptr, ptr %419, align 8, !tbaa !25
  %459 = load ptr, ptr %409, align 8, !tbaa !25
  %460 = tail call fastcc i32 @compare_values(ptr noundef %458, ptr noundef %459)
  %461 = icmp eq i32 %460, 0
  br i1 %461, label %462, label %471

462:                                              ; preds = %457
  %463 = load ptr, ptr %424, align 8, !tbaa !31
  %464 = load ptr, ptr %414, align 8, !tbaa !31
  %465 = tail call fastcc i32 @compare_values(ptr noundef %463, ptr noundef %464)
  %466 = icmp eq i32 %465, 0
  br i1 %466, label %467, label %471

467:                                              ; preds = %462
  store i32 3, ptr %0, align 8, !tbaa !23
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %409, i8 0, i64 16, i1 false)
  %468 = load ptr, ptr %142, align 8, !tbaa !26
  %469 = icmp eq ptr %468, null
  br i1 %469, label %2782, label %470

470:                                              ; preds = %467
  tail call void @bitmap_clear(ptr noundef nonnull %468) #18
  br label %2777

471:                                              ; preds = %462, %457
  %472 = load i32, ptr %0, align 8, !tbaa !23
  %473 = icmp eq i32 %472, 2
  %474 = select i1 %473, ptr %409, ptr %419
  %475 = select i1 %473, ptr %0, ptr %404
  %476 = select i1 %473, ptr %419, ptr %409
  %477 = select i1 %473, ptr %404, ptr %0
  %478 = getelementptr inbounds %struct.value_range_d, ptr %477, i64 0, i32 2
  %479 = getelementptr inbounds %struct.value_range_d, ptr %475, i64 0, i32 2
  %480 = load ptr, ptr %478, align 8, !tbaa !31
  %481 = load ptr, ptr %476, align 8, !tbaa !25
  %482 = load ptr, ptr %479, align 8, !tbaa !31
  %483 = load ptr, ptr %474, align 8, !tbaa !25
  %484 = tail call fastcc i32 @compare_values(ptr noundef %482, ptr noundef %480)
  %485 = icmp eq i32 %484, -1
  br i1 %485, label %486, label %497

486:                                              ; preds = %471
  %487 = tail call fastcc i32 @compare_values(ptr noundef %483, ptr noundef %481)
  %488 = icmp eq i32 %487, 1
  br i1 %488, label %489, label %497

489:                                              ; preds = %486
  %490 = tail call fastcc zeroext i8 @vrp_val_is_min(ptr noundef %481), !range !79
  %491 = icmp eq i8 %490, 0
  br i1 %491, label %495, label %492

492:                                              ; preds = %489
  %493 = tail call fastcc zeroext i8 @vrp_val_is_max(ptr noundef %480), !range !79
  %494 = icmp eq i8 %493, 0
  br i1 %494, label %495, label %2777

495:                                              ; preds = %492, %489
  %496 = load ptr, ptr %142, align 8, !tbaa !26
  tail call fastcc void @set_value_range(ptr noundef nonnull %0, i32 noundef 1, ptr noundef %481, ptr noundef %480, ptr noundef %496)
  br label %2777

497:                                              ; preds = %486, %471
  %498 = tail call fastcc i32 @compare_values(ptr noundef %483, ptr noundef %480)
  %499 = icmp eq i32 %498, 1
  br i1 %499, label %503, label %500

500:                                              ; preds = %497
  %501 = tail call fastcc i32 @compare_values(ptr noundef %482, ptr noundef %481)
  %502 = icmp eq i32 %501, -1
  br i1 %502, label %503, label %505

503:                                              ; preds = %500, %497
  %504 = load ptr, ptr %142, align 8, !tbaa !26
  tail call fastcc void @set_value_range(ptr noundef nonnull %0, i32 noundef 1, ptr noundef %481, ptr noundef %480, ptr noundef %504)
  br label %2777

505:                                              ; preds = %500
  %506 = tail call fastcc i32 @compare_values(ptr noundef %482, ptr noundef %481)
  %507 = icmp ult i32 %506, 2
  br i1 %507, label %508, label %559

508:                                              ; preds = %505
  %509 = tail call fastcc i32 @compare_values(ptr noundef %482, ptr noundef %480)
  %510 = icmp eq i32 %509, -1
  br i1 %510, label %511, label %559

511:                                              ; preds = %508
  %512 = tail call fastcc zeroext i8 @is_positive_overflow_infinity(ptr noundef %482), !range !79
  %513 = icmp eq i8 %512, 0
  br i1 %513, label %515, label %514

514:                                              ; preds = %511
  tail call void @fancy_abort(ptr noundef nonnull @.str.27, i32 noundef 1819, ptr noundef nonnull @.str.28) #18
  br label %515

515:                                              ; preds = %514, %511
  %516 = getelementptr inbounds %struct.tree_common, ptr %482, i64 0, i32 2
  %517 = load ptr, ptr %516, align 8, !tbaa !16
  %518 = load i64, ptr %517, align 8
  %519 = trunc i64 %518 to i32
  %520 = and i32 %519, 65535
  %521 = add nsw i32 %520, -6
  %522 = icmp ult i32 %521, 3
  br i1 %522, label %523, label %544

523:                                              ; preds = %515
  %524 = and i64 %518, 2097152
  %525 = icmp ne i64 %524, 0
  %526 = load i32, ptr @flag_wrapv, align 4
  %527 = icmp ne i32 %526, 0
  %528 = select i1 %525, i1 true, i1 %527
  br i1 %528, label %544, label %529

529:                                              ; preds = %523
  %530 = tail call fastcc zeroext i8 @vrp_val_is_max(ptr noundef nonnull %482), !range !79
  %531 = icmp eq i8 %530, 0
  br i1 %531, label %544, label %532

532:                                              ; preds = %529
  %533 = load ptr, ptr %419, align 8, !tbaa !25
  %534 = getelementptr inbounds %struct.tree_common, ptr %533, i64 0, i32 2
  %535 = load ptr, ptr %534, align 8, !tbaa !16
  %536 = tail call fastcc zeroext i8 @supports_overflow_infinity(ptr noundef %535), !range !79
  %537 = icmp eq i8 %536, 0
  br i1 %537, label %538, label %542

538:                                              ; preds = %532
  store i32 3, ptr %0, align 8, !tbaa !23
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %409, i8 0, i64 16, i1 false)
  %539 = load ptr, ptr %142, align 8, !tbaa !26
  %540 = icmp eq ptr %539, null
  br i1 %540, label %2782, label %541

541:                                              ; preds = %538
  tail call void @bitmap_clear(ptr noundef nonnull %539) #18
  br label %2777

542:                                              ; preds = %532
  %543 = tail call fastcc ptr @positive_overflow_infinity(ptr noundef %535)
  br label %556

544:                                              ; preds = %529, %523, %515
  %545 = load ptr, ptr %419, align 8, !tbaa !25
  %546 = getelementptr inbounds %struct.tree_common, ptr %545, i64 0, i32 2
  %547 = load ptr, ptr %546, align 8, !tbaa !16
  %548 = load i64, ptr %547, align 8
  %549 = trunc i64 %548 to i16
  switch i16 %549, label %550 [
    i16 10, label %553
    i16 12, label %553
  ]

550:                                              ; preds = %544
  %551 = tail call ptr @build_int_cst(ptr noundef nonnull %547, i64 noundef 1) #18
  %552 = tail call ptr @fold_build2_stat_loc(i32 noundef 0, i32 noundef 63, ptr noundef nonnull %547, ptr noundef nonnull %482, ptr noundef %551) #18
  br label %556

553:                                              ; preds = %544, %544
  %554 = tail call ptr @size_int_kind(i64 noundef 1, i32 noundef 0) #18
  %555 = tail call ptr @fold_build2_stat_loc(i32 noundef 0, i32 noundef 66, ptr noundef nonnull %547, ptr noundef nonnull %482, ptr noundef %554) #18
  br label %556

556:                                              ; preds = %553, %550, %542
  %557 = phi ptr [ %543, %542 ], [ %555, %553 ], [ %552, %550 ]
  %558 = load ptr, ptr %142, align 8, !tbaa !26
  tail call fastcc void @set_value_range(ptr noundef nonnull %0, i32 noundef 1, ptr noundef %557, ptr noundef %480, ptr noundef %558)
  br label %2777

559:                                              ; preds = %508, %505
  %560 = tail call fastcc i32 @compare_values(ptr noundef %483, ptr noundef %481)
  %561 = icmp eq i32 %560, 1
  br i1 %561, label %562, label %2777

562:                                              ; preds = %559
  %563 = tail call fastcc i32 @compare_values(ptr noundef %483, ptr noundef %480)
  %564 = add i32 %563, 1
  %565 = icmp ult i32 %564, 2
  br i1 %565, label %566, label %2777

566:                                              ; preds = %562
  %567 = tail call fastcc zeroext i8 @is_negative_overflow_infinity(ptr noundef %483), !range !79
  %568 = icmp eq i8 %567, 0
  br i1 %568, label %570, label %569

569:                                              ; preds = %566
  tail call void @fancy_abort(ptr noundef nonnull @.str.27, i32 noundef 1847, ptr noundef nonnull @.str.28) #18
  br label %570

570:                                              ; preds = %569, %566
  %571 = getelementptr inbounds %struct.tree_common, ptr %483, i64 0, i32 2
  %572 = load ptr, ptr %571, align 8, !tbaa !16
  %573 = load i64, ptr %572, align 8
  %574 = trunc i64 %573 to i32
  %575 = and i32 %574, 65535
  %576 = add nsw i32 %575, -6
  %577 = icmp ult i32 %576, 3
  br i1 %577, label %578, label %599

578:                                              ; preds = %570
  %579 = and i64 %573, 2097152
  %580 = icmp ne i64 %579, 0
  %581 = load i32, ptr @flag_wrapv, align 4
  %582 = icmp ne i32 %581, 0
  %583 = select i1 %580, i1 true, i1 %582
  br i1 %583, label %599, label %584

584:                                              ; preds = %578
  %585 = tail call fastcc zeroext i8 @vrp_val_is_min(ptr noundef nonnull %483), !range !79
  %586 = icmp eq i8 %585, 0
  br i1 %586, label %599, label %587

587:                                              ; preds = %584
  %588 = load ptr, ptr %419, align 8, !tbaa !25
  %589 = getelementptr inbounds %struct.tree_common, ptr %588, i64 0, i32 2
  %590 = load ptr, ptr %589, align 8, !tbaa !16
  %591 = tail call fastcc zeroext i8 @supports_overflow_infinity(ptr noundef %590), !range !79
  %592 = icmp eq i8 %591, 0
  br i1 %592, label %593, label %597

593:                                              ; preds = %587
  store i32 3, ptr %0, align 8, !tbaa !23
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %409, i8 0, i64 16, i1 false)
  %594 = load ptr, ptr %142, align 8, !tbaa !26
  %595 = icmp eq ptr %594, null
  br i1 %595, label %2782, label %596

596:                                              ; preds = %593
  tail call void @bitmap_clear(ptr noundef nonnull %594) #18
  br label %2777

597:                                              ; preds = %587
  %598 = tail call fastcc ptr @negative_overflow_infinity(ptr noundef %590)
  br label %611

599:                                              ; preds = %584, %578, %570
  %600 = load ptr, ptr %419, align 8, !tbaa !25
  %601 = getelementptr inbounds %struct.tree_common, ptr %600, i64 0, i32 2
  %602 = load ptr, ptr %601, align 8, !tbaa !16
  %603 = load i64, ptr %602, align 8
  %604 = trunc i64 %603 to i16
  switch i16 %604, label %605 [
    i16 10, label %608
    i16 12, label %608
  ]

605:                                              ; preds = %599
  %606 = tail call ptr @build_int_cst(ptr noundef nonnull %602, i64 noundef 1) #18
  %607 = tail call ptr @fold_build2_stat_loc(i32 noundef 0, i32 noundef 64, ptr noundef nonnull %602, ptr noundef nonnull %483, ptr noundef %606) #18
  br label %611

608:                                              ; preds = %599, %599
  %609 = tail call ptr @size_int_kind(i64 noundef -1, i32 noundef 0) #18
  %610 = tail call ptr @fold_build2_stat_loc(i32 noundef 0, i32 noundef 66, ptr noundef nonnull %602, ptr noundef nonnull %483, ptr noundef %609) #18
  br label %611

611:                                              ; preds = %608, %605, %597
  %612 = phi ptr [ %598, %597 ], [ %610, %608 ], [ %607, %605 ]
  %613 = load ptr, ptr %142, align 8, !tbaa !26
  tail call fastcc void @set_value_range(ptr noundef nonnull %0, i32 noundef 1, ptr noundef %481, ptr noundef %612, ptr noundef %613)
  br label %2777

614:                                              ; preds = %42
  %615 = load i32, ptr %1, align 8
  %616 = and i32 %615, 255
  %617 = add nsw i32 %616, -10
  %618 = icmp ult i32 %617, -9
  br i1 %618, label %632, label %619

619:                                              ; preds = %614
  %620 = zext i32 %616 to i64
  %621 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %620
  %622 = load i32, ptr %621, align 4, !tbaa !16
  %623 = zext i32 %622 to i64
  %624 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %623
  %625 = load i64, ptr %624, align 8, !tbaa !36
  %626 = icmp eq i64 %625, 0
  br i1 %626, label %627, label %628

627:                                              ; preds = %619
  tail call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1622, ptr noundef nonnull @.str.28) #18
  br label %628

628:                                              ; preds = %627, %619
  %629 = getelementptr inbounds i8, ptr %1, i64 %625
  %630 = getelementptr inbounds ptr, ptr %629, i64 1
  %631 = load ptr, ptr %630, align 8, !tbaa !5
  br label %632

632:                                              ; preds = %614, %628
  %633 = phi ptr [ %631, %628 ], [ null, %614 ]
  %634 = tail call fastcc ptr @get_value_range(ptr noundef %633)
  %635 = load i32, ptr %634, align 8, !tbaa !23
  switch i32 %635, label %636 [
    i32 0, label %658
    i32 3, label %658
  ]

636:                                              ; preds = %632
  %637 = getelementptr inbounds %struct.value_range_d, ptr %634, i64 0, i32 1
  %638 = getelementptr inbounds %struct.value_range_d, ptr %634, i64 0, i32 3
  %639 = load ptr, ptr %638, align 8, !tbaa !26
  store i32 %635, ptr %0, align 8, !tbaa !23
  %640 = getelementptr inbounds %struct.value_range_d, ptr %0, i64 0, i32 1
  %641 = load <2 x ptr>, ptr %637, align 8, !tbaa !5
  store <2 x ptr> %641, ptr %640, align 8, !tbaa !5
  %642 = getelementptr inbounds %struct.value_range_d, ptr %0, i64 0, i32 3
  %643 = load ptr, ptr %642, align 8, !tbaa !26
  %644 = icmp eq ptr %643, null
  %645 = icmp ne ptr %639, null
  %646 = and i1 %645, %644
  br i1 %646, label %647, label %649

647:                                              ; preds = %636
  %648 = tail call ptr @bitmap_obstack_alloc_stat(ptr noundef null) #18
  store ptr %648, ptr %642, align 8, !tbaa !26
  br label %649

649:                                              ; preds = %647, %636
  %650 = phi ptr [ %648, %647 ], [ %643, %636 ]
  %651 = icmp eq ptr %650, %639
  br i1 %651, label %665, label %652

652:                                              ; preds = %649
  br i1 %645, label %653, label %657

653:                                              ; preds = %652
  %654 = load ptr, ptr %639, align 8, !tbaa !32
  %655 = icmp eq ptr %654, null
  br i1 %655, label %657, label %656

656:                                              ; preds = %653
  tail call void @bitmap_copy(ptr noundef %650, ptr noundef nonnull %639) #18
  br label %665

657:                                              ; preds = %653, %652
  tail call void @bitmap_clear(ptr noundef %650) #18
  br label %665

658:                                              ; preds = %632, %632
  store i32 1, ptr %0, align 8, !tbaa !23
  %659 = getelementptr inbounds %struct.value_range_d, ptr %0, i64 0, i32 1
  store ptr %633, ptr %659, align 8, !tbaa !25
  %660 = getelementptr inbounds %struct.value_range_d, ptr %0, i64 0, i32 2
  store ptr %633, ptr %660, align 8, !tbaa !31
  %661 = getelementptr inbounds %struct.value_range_d, ptr %0, i64 0, i32 3
  %662 = load ptr, ptr %661, align 8, !tbaa !26
  %663 = icmp eq ptr %662, null
  br i1 %663, label %665, label %664

664:                                              ; preds = %658
  tail call void @bitmap_clear(ptr noundef nonnull %662) #18
  br label %665

665:                                              ; preds = %664, %658, %657, %656, %649
  %666 = getelementptr inbounds %struct.value_range_d, ptr %0, i64 0, i32 3
  %667 = getelementptr i8, ptr %633, i64 40
  %668 = load i32, ptr %667, align 8, !tbaa !16
  %669 = load ptr, ptr @vr_value, align 8, !tbaa !5
  %670 = zext i32 %668 to i64
  %671 = getelementptr inbounds ptr, ptr %669, i64 %670
  %672 = load ptr, ptr %671, align 8, !tbaa !5
  %673 = load ptr, ptr %666, align 8, !tbaa !5
  %674 = icmp eq ptr %673, null
  br i1 %674, label %675, label %677

675:                                              ; preds = %665
  %676 = tail call ptr @bitmap_obstack_alloc_stat(ptr noundef null) #18
  store ptr %676, ptr %666, align 8, !tbaa !5
  br label %677

677:                                              ; preds = %675, %665
  %678 = phi ptr [ %676, %675 ], [ %673, %665 ]
  %679 = tail call zeroext i8 @bitmap_set_bit(ptr noundef %678, i32 noundef %668) #18
  %680 = icmp eq ptr %672, null
  br i1 %680, label %2777, label %681

681:                                              ; preds = %677
  %682 = getelementptr inbounds %struct.value_range_d, ptr %672, i64 0, i32 3
  %683 = load ptr, ptr %682, align 8, !tbaa !26
  %684 = icmp eq ptr %683, null
  br i1 %684, label %2777, label %685

685:                                              ; preds = %681
  %686 = load ptr, ptr %666, align 8, !tbaa !5
  %687 = tail call zeroext i8 @bitmap_ior_into(ptr noundef %686, ptr noundef nonnull %683) #18
  br label %2777

688:                                              ; preds = %42
  %689 = zext i32 %43 to i64
  %690 = getelementptr inbounds [0 x i32], ptr @tree_code_type, i64 0, i64 %689
  %691 = load i32, ptr %690, align 4, !tbaa !16
  %692 = icmp eq i32 %691, 7
  %693 = add nsw i32 %43, -93
  %694 = icmp ult i32 %693, 3
  %695 = or i1 %694, %692
  br i1 %695, label %696, label %1744

696:                                              ; preds = %688
  %697 = load i32, ptr %1, align 8
  %698 = trunc i32 %697 to i8
  switch i8 %698, label %701 [
    i8 6, label %699
    i8 1, label %699
    i8 8, label %702
  ]

699:                                              ; preds = %696, %696
  %700 = lshr i32 %697, 16
  br label %702

701:                                              ; preds = %696
  tail call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1446, ptr noundef nonnull @.str.28) #18
  br label %702

702:                                              ; preds = %701, %699, %696
  %703 = phi i32 [ %700, %699 ], [ 0, %701 ], [ 59, %696 ]
  %704 = zext i32 %703 to i64
  %705 = getelementptr inbounds [0 x i8], ptr @gimple_rhs_class_table, i64 0, i64 %704
  %706 = load i8, ptr %705, align 1, !tbaa !16
  %707 = icmp eq i8 %706, 3
  br i1 %707, label %708, label %728

708:                                              ; preds = %702
  %709 = load i32, ptr %1, align 8
  %710 = and i32 %709, 255
  %711 = add nsw i32 %710, -1
  %712 = icmp ult i32 %711, 9
  tail call void @llvm.assume(i1 %712)
  %713 = zext i32 %710 to i64
  %714 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %713
  %715 = load i32, ptr %714, align 4, !tbaa !16
  %716 = zext i32 %715 to i64
  %717 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %716
  %718 = load i64, ptr %717, align 8, !tbaa !36
  %719 = icmp eq i64 %718, 0
  br i1 %719, label %720, label %721

720:                                              ; preds = %708
  tail call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1622, ptr noundef nonnull @.str.28) #18
  br label %721

721:                                              ; preds = %720, %708
  %722 = getelementptr inbounds i8, ptr %1, i64 %718
  %723 = getelementptr inbounds ptr, ptr %722, i64 1
  %724 = load ptr, ptr %723, align 8, !tbaa !5
  %725 = load i64, ptr %724, align 8
  %726 = trunc i64 %725 to i32
  %727 = and i32 %726, 65535
  br label %728

728:                                              ; preds = %702, %721
  %729 = phi i32 [ %727, %721 ], [ %703, %702 ]
  %730 = tail call fastcc ptr @gimple_expr_type(ptr noundef nonnull %1)
  %731 = load i32, ptr %1, align 8
  %732 = and i32 %731, 255
  %733 = add nsw i32 %732, -10
  %734 = icmp ult i32 %733, -9
  br i1 %734, label %748, label %735

735:                                              ; preds = %728
  %736 = zext i32 %732 to i64
  %737 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %736
  %738 = load i32, ptr %737, align 4, !tbaa !16
  %739 = zext i32 %738 to i64
  %740 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %739
  %741 = load i64, ptr %740, align 8, !tbaa !36
  %742 = icmp eq i64 %741, 0
  br i1 %742, label %743, label %744

743:                                              ; preds = %735
  tail call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1622, ptr noundef nonnull @.str.28) #18
  br label %744

744:                                              ; preds = %743, %735
  %745 = getelementptr inbounds i8, ptr %1, i64 %741
  %746 = getelementptr inbounds ptr, ptr %745, i64 1
  %747 = load ptr, ptr %746, align 8, !tbaa !5
  br label %748

748:                                              ; preds = %728, %744
  %749 = phi ptr [ %747, %744 ], [ null, %728 ]
  %750 = getelementptr i8, ptr %1, i64 12
  %751 = load i32, ptr %750, align 4, !tbaa !16
  %752 = icmp ugt i32 %751, 2
  br i1 %752, label %753, label %771

753:                                              ; preds = %748
  %754 = load i32, ptr %1, align 8
  %755 = and i32 %754, 255
  %756 = add nsw i32 %755, -10
  %757 = icmp ult i32 %756, -9
  br i1 %757, label %771, label %758

758:                                              ; preds = %753
  %759 = zext i32 %755 to i64
  %760 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %759
  %761 = load i32, ptr %760, align 4, !tbaa !16
  %762 = zext i32 %761 to i64
  %763 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %762
  %764 = load i64, ptr %763, align 8, !tbaa !36
  %765 = icmp eq i64 %764, 0
  br i1 %765, label %766, label %767

766:                                              ; preds = %758
  tail call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1622, ptr noundef nonnull @.str.28) #18
  br label %767

767:                                              ; preds = %766, %758
  %768 = getelementptr inbounds i8, ptr %1, i64 %764
  %769 = getelementptr inbounds ptr, ptr %768, i64 2
  %770 = load ptr, ptr %769, align 8, !tbaa !5
  br label %771

771:                                              ; preds = %748, %753, %767
  %772 = phi ptr [ null, %748 ], [ %770, %767 ], [ null, %753 ]
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %8) #18
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(32) %8, i8 0, i64 32, i1 false)
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %9) #18
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(32) %9, i8 0, i64 32, i1 false)
  switch i32 %729, label %773 [
    i32 94, label %851
    i32 93, label %851
    i32 89, label %851
    i32 87, label %851
    i32 84, label %851
    i32 81, label %851
    i32 80, label %851
    i32 76, label %851
    i32 70, label %851
    i32 69, label %851
    i32 68, label %851
    i32 67, label %851
    i32 66, label %851
    i32 65, label %851
    i32 64, label %851
    i32 63, label %851
  ]

773:                                              ; preds = %771
  %774 = tail call zeroext i8 @is_gimple_min_invariant(ptr noundef %749) #18
  %775 = icmp eq i8 %774, 0
  br i1 %775, label %776, label %797

776:                                              ; preds = %773
  %777 = load i64, ptr %749, align 8
  %778 = and i64 %777, 65535
  %779 = icmp eq i64 %778, 141
  br i1 %779, label %780, label %797

780:                                              ; preds = %776
  %781 = tail call fastcc ptr @get_value_range(ptr noundef nonnull %749)
  %782 = load i32, ptr %781, align 8, !tbaa !23
  %783 = icmp eq i32 %782, 1
  br i1 %783, label %784, label %797

784:                                              ; preds = %780
  %785 = getelementptr inbounds %struct.value_range_d, ptr %781, i64 0, i32 1
  %786 = load ptr, ptr %785, align 8, !tbaa !25
  %787 = getelementptr inbounds %struct.value_range_d, ptr %781, i64 0, i32 2
  %788 = load ptr, ptr %787, align 8, !tbaa !31
  %789 = tail call i32 @operand_equal_p(ptr noundef %786, ptr noundef %788, i32 noundef 0) #18
  %790 = icmp eq i32 %789, 0
  br i1 %790, label %797, label %791

791:                                              ; preds = %784
  %792 = load ptr, ptr %785, align 8, !tbaa !25
  %793 = tail call zeroext i8 @is_gimple_min_invariant(ptr noundef %792) #18
  %794 = icmp eq i8 %793, 0
  br i1 %794, label %797, label %795

795:                                              ; preds = %791
  %796 = load ptr, ptr %785, align 8, !tbaa !25
  br label %797

797:                                              ; preds = %795, %791, %784, %780, %776, %773
  %798 = phi ptr [ %796, %795 ], [ %749, %773 ], [ null, %776 ], [ null, %791 ], [ null, %784 ], [ null, %780 ]
  %799 = tail call zeroext i8 @is_gimple_min_invariant(ptr noundef %772) #18
  %800 = icmp eq i8 %799, 0
  br i1 %800, label %801, label %822

801:                                              ; preds = %797
  %802 = load i64, ptr %772, align 8
  %803 = and i64 %802, 65535
  %804 = icmp eq i64 %803, 141
  br i1 %804, label %805, label %822

805:                                              ; preds = %801
  %806 = tail call fastcc ptr @get_value_range(ptr noundef nonnull %772)
  %807 = load i32, ptr %806, align 8, !tbaa !23
  %808 = icmp eq i32 %807, 1
  br i1 %808, label %809, label %822

809:                                              ; preds = %805
  %810 = getelementptr inbounds %struct.value_range_d, ptr %806, i64 0, i32 1
  %811 = load ptr, ptr %810, align 8, !tbaa !25
  %812 = getelementptr inbounds %struct.value_range_d, ptr %806, i64 0, i32 2
  %813 = load ptr, ptr %812, align 8, !tbaa !31
  %814 = tail call i32 @operand_equal_p(ptr noundef %811, ptr noundef %813, i32 noundef 0) #18
  %815 = icmp eq i32 %814, 0
  br i1 %815, label %822, label %816

816:                                              ; preds = %809
  %817 = load ptr, ptr %810, align 8, !tbaa !25
  %818 = tail call zeroext i8 @is_gimple_min_invariant(ptr noundef %817) #18
  %819 = icmp eq i8 %818, 0
  br i1 %819, label %822, label %820

820:                                              ; preds = %816
  %821 = load ptr, ptr %810, align 8, !tbaa !25
  br label %822

822:                                              ; preds = %820, %816, %809, %805, %801, %797
  %823 = phi ptr [ %821, %820 ], [ %772, %797 ], [ null, %801 ], [ null, %816 ], [ null, %809 ], [ null, %805 ]
  %824 = icmp ne ptr %798, null
  %825 = icmp ne ptr %823, null
  %826 = select i1 %824, i1 true, i1 %825
  br i1 %826, label %827, label %845

827:                                              ; preds = %822
  %828 = select i1 %824, ptr %798, ptr %749
  %829 = select i1 %825, ptr %823, ptr %772
  %830 = tail call ptr @fold_binary_loc(i32 noundef 0, i32 noundef %729, ptr noundef %730, ptr noundef %828, ptr noundef %829) #18
  %831 = icmp eq ptr %830, null
  br i1 %831, label %845, label %832

832:                                              ; preds = %827
  %833 = tail call zeroext i8 @is_gimple_min_invariant(ptr noundef nonnull %830) #18
  %834 = icmp eq i8 %833, 0
  br i1 %834, label %845, label %835

835:                                              ; preds = %832
  %836 = tail call fastcc zeroext i8 @is_overflow_infinity(ptr noundef nonnull %830), !range !79
  %837 = icmp eq i8 %836, 0
  br i1 %837, label %838, label %845

838:                                              ; preds = %835
  store i32 1, ptr %0, align 8, !tbaa !23
  %839 = getelementptr inbounds %struct.value_range_d, ptr %0, i64 0, i32 1
  store ptr %830, ptr %839, align 8, !tbaa !25
  %840 = getelementptr inbounds %struct.value_range_d, ptr %0, i64 0, i32 2
  store ptr %830, ptr %840, align 8, !tbaa !31
  %841 = getelementptr inbounds %struct.value_range_d, ptr %0, i64 0, i32 3
  %842 = load ptr, ptr %841, align 8, !tbaa !26
  %843 = icmp eq ptr %842, null
  br i1 %843, label %1743, label %844

844:                                              ; preds = %838
  tail call void @bitmap_clear(ptr noundef nonnull %842) #18
  br label %1743

845:                                              ; preds = %835, %832, %827, %822
  store i32 3, ptr %0, align 8, !tbaa !23
  %846 = getelementptr inbounds %struct.value_range_d, ptr %0, i64 0, i32 1
  %847 = getelementptr inbounds %struct.value_range_d, ptr %0, i64 0, i32 3
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %846, i8 0, i64 16, i1 false)
  %848 = load ptr, ptr %847, align 8, !tbaa !26
  %849 = icmp eq ptr %848, null
  br i1 %849, label %1743, label %850

850:                                              ; preds = %845
  tail call void @bitmap_clear(ptr noundef nonnull %848) #18
  br label %1743

851:                                              ; preds = %771, %771, %771, %771, %771, %771, %771, %771, %771, %771, %771, %771, %771, %771, %771, %771
  %852 = load i64, ptr %749, align 8
  %853 = and i64 %852, 65535
  %854 = icmp eq i64 %853, 141
  br i1 %854, label %855, label %857

855:                                              ; preds = %851
  %856 = tail call fastcc ptr @get_value_range(ptr noundef nonnull %749)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(32) %8, ptr noundef nonnull align 8 dereferenceable(32) %856, i64 32, i1 false), !tbaa.struct !174
  br label %870

857:                                              ; preds = %851
  %858 = tail call zeroext i8 @is_gimple_min_invariant(ptr noundef nonnull %749) #18
  %859 = icmp eq i8 %858, 0
  br i1 %859, label %868, label %860

860:                                              ; preds = %857
  %861 = tail call zeroext i8 @is_gimple_min_invariant(ptr noundef nonnull %749) #18
  %862 = icmp eq i8 %861, 0
  br i1 %862, label %863, label %864

863:                                              ; preds = %860
  tail call void @fancy_abort(ptr noundef nonnull @.str.27, i32 noundef 515, ptr noundef nonnull @.str.28) #18
  br label %864

864:                                              ; preds = %863, %860
  %865 = tail call fastcc ptr @avoid_overflow_infinity(ptr noundef nonnull %749)
  store i32 1, ptr %8, align 8, !tbaa !23
  %866 = getelementptr inbounds %struct.value_range_d, ptr %8, i64 0, i32 1
  store ptr %865, ptr %866, align 8, !tbaa !25
  %867 = getelementptr inbounds %struct.value_range_d, ptr %8, i64 0, i32 2
  store ptr %865, ptr %867, align 8, !tbaa !31
  br label %870

868:                                              ; preds = %857
  store i32 3, ptr %8, align 8, !tbaa !23
  %869 = getelementptr inbounds %struct.value_range_d, ptr %8, i64 0, i32 1
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %869, i8 0, i64 16, i1 false)
  br label %870

870:                                              ; preds = %868, %864, %855
  %871 = load i64, ptr %772, align 8
  %872 = and i64 %871, 65535
  %873 = icmp eq i64 %872, 141
  br i1 %873, label %874, label %877

874:                                              ; preds = %870
  %875 = tail call fastcc ptr @get_value_range(ptr noundef nonnull %772)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(32) %9, ptr noundef nonnull align 8 dereferenceable(32) %875, i64 32, i1 false), !tbaa.struct !174
  %876 = load i32, ptr %9, align 8
  br label %890

877:                                              ; preds = %870
  %878 = tail call zeroext i8 @is_gimple_min_invariant(ptr noundef nonnull %772) #18
  %879 = icmp eq i8 %878, 0
  br i1 %879, label %888, label %880

880:                                              ; preds = %877
  %881 = tail call zeroext i8 @is_gimple_min_invariant(ptr noundef nonnull %772) #18
  %882 = icmp eq i8 %881, 0
  br i1 %882, label %883, label %884

883:                                              ; preds = %880
  tail call void @fancy_abort(ptr noundef nonnull @.str.27, i32 noundef 515, ptr noundef nonnull @.str.28) #18
  br label %884

884:                                              ; preds = %883, %880
  %885 = tail call fastcc ptr @avoid_overflow_infinity(ptr noundef nonnull %772)
  store i32 1, ptr %9, align 8, !tbaa !23
  %886 = getelementptr inbounds %struct.value_range_d, ptr %9, i64 0, i32 1
  store ptr %885, ptr %886, align 8, !tbaa !25
  %887 = getelementptr inbounds %struct.value_range_d, ptr %9, i64 0, i32 2
  store ptr %885, ptr %887, align 8, !tbaa !31
  br label %890

888:                                              ; preds = %877
  store i32 3, ptr %9, align 8, !tbaa !23
  %889 = getelementptr inbounds %struct.value_range_d, ptr %9, i64 0, i32 1
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %889, i8 0, i64 16, i1 false)
  br label %890

890:                                              ; preds = %888, %884, %874
  %891 = phi i32 [ 3, %888 ], [ 1, %884 ], [ %876, %874 ]
  %892 = load i32, ptr %8, align 8
  %893 = icmp eq i32 %892, 0
  %894 = icmp eq i32 %891, 0
  %895 = select i1 %893, i1 true, i1 %894
  br i1 %895, label %896, label %902

896:                                              ; preds = %890
  store i32 0, ptr %0, align 8, !tbaa !23
  %897 = getelementptr inbounds %struct.value_range_d, ptr %0, i64 0, i32 1
  %898 = getelementptr inbounds %struct.value_range_d, ptr %0, i64 0, i32 3
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %897, i8 0, i64 16, i1 false)
  %899 = load ptr, ptr %898, align 8, !tbaa !26
  %900 = icmp eq ptr %899, null
  br i1 %900, label %1743, label %901

901:                                              ; preds = %896
  tail call void @bitmap_clear(ptr noundef nonnull %899) #18
  br label %1743

902:                                              ; preds = %890
  switch i32 %729, label %903 [
    i32 94, label %928
    i32 93, label %928
    i32 89, label %928
    i32 76, label %928
    i32 70, label %928
    i32 69, label %928
    i32 68, label %928
    i32 67, label %928
  ]

903:                                              ; preds = %902
  %904 = icmp ne i32 %892, 3
  %905 = icmp ne i32 %891, 3
  %906 = select i1 %904, i1 %905, i1 false
  %907 = icmp eq i32 %892, %891
  %908 = select i1 %906, i1 %907, i1 false
  br i1 %908, label %909, label %922

909:                                              ; preds = %903
  %910 = getelementptr inbounds %struct.value_range_d, ptr %8, i64 0, i32 1
  %911 = load ptr, ptr %910, align 8, !tbaa !25
  %912 = tail call zeroext i8 @is_gimple_min_invariant(ptr noundef %911) #18
  %913 = icmp eq i8 %912, 0
  br i1 %913, label %922, label %914

914:                                              ; preds = %909
  %915 = getelementptr inbounds %struct.value_range_d, ptr %8, i64 0, i32 2
  %916 = load ptr, ptr %915, align 8, !tbaa !31
  %917 = tail call zeroext i8 @is_gimple_min_invariant(ptr noundef %916) #18
  %918 = icmp eq i8 %917, 0
  br i1 %918, label %922, label %919

919:                                              ; preds = %914
  %920 = call fastcc zeroext i8 @symbolic_range_p(ptr noundef nonnull %9), !range !79
  %921 = icmp eq i8 %920, 0
  br i1 %921, label %928, label %922

922:                                              ; preds = %919, %914, %909, %903
  store i32 3, ptr %0, align 8, !tbaa !23
  %923 = getelementptr inbounds %struct.value_range_d, ptr %0, i64 0, i32 1
  %924 = getelementptr inbounds %struct.value_range_d, ptr %0, i64 0, i32 3
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %923, i8 0, i64 16, i1 false)
  %925 = load ptr, ptr %924, align 8, !tbaa !26
  %926 = icmp eq ptr %925, null
  br i1 %926, label %1743, label %927

927:                                              ; preds = %922
  tail call void @bitmap_clear(ptr noundef nonnull %925) #18
  br label %1743

928:                                              ; preds = %919, %902, %902, %902, %902, %902, %902, %902, %902
  %929 = load i64, ptr %730, align 8
  %930 = trunc i64 %929 to i16
  switch i16 %930, label %931 [
    i16 10, label %941
    i16 12, label %941
  ]

931:                                              ; preds = %928
  %932 = getelementptr inbounds %struct.tree_common, ptr %749, i64 0, i32 2
  %933 = load ptr, ptr %932, align 8, !tbaa !16
  %934 = load i64, ptr %933, align 8
  %935 = trunc i64 %934 to i16
  switch i16 %935, label %936 [
    i16 10, label %941
    i16 12, label %941
  ]

936:                                              ; preds = %931
  %937 = getelementptr inbounds %struct.tree_common, ptr %772, i64 0, i32 2
  %938 = load ptr, ptr %937, align 8, !tbaa !16
  %939 = load i64, ptr %938, align 8
  %940 = trunc i64 %939 to i16
  switch i16 %940, label %1078 [
    i16 10, label %941
    i16 12, label %941
  ]

941:                                              ; preds = %936, %936, %931, %931, %928, %928
  %942 = and i32 %729, -2
  %943 = icmp eq i32 %942, 80
  br i1 %943, label %944, label %1025

944:                                              ; preds = %941
  switch i32 %892, label %1019 [
    i32 2, label %945
    i32 1, label %971
  ]

945:                                              ; preds = %944
  %946 = getelementptr inbounds %struct.value_range_d, ptr %8, i64 0, i32 1
  %947 = load ptr, ptr %946, align 8, !tbaa !25
  %948 = tail call i32 @integer_zerop(ptr noundef %947) #18
  %949 = icmp eq i32 %948, 0
  br i1 %949, label %1019, label %950

950:                                              ; preds = %945
  %951 = getelementptr inbounds %struct.value_range_d, ptr %8, i64 0, i32 2
  %952 = load ptr, ptr %951, align 8, !tbaa !31
  %953 = tail call i32 @integer_zerop(ptr noundef %952) #18
  %954 = icmp ne i32 %953, 0
  %955 = icmp eq i32 %891, 2
  %956 = select i1 %954, i1 %955, i1 false
  br i1 %956, label %957, label %1019

957:                                              ; preds = %950
  %958 = getelementptr inbounds %struct.value_range_d, ptr %9, i64 0, i32 1
  %959 = load ptr, ptr %958, align 8, !tbaa !25
  %960 = tail call i32 @integer_zerop(ptr noundef %959) #18
  %961 = icmp eq i32 %960, 0
  br i1 %961, label %1019, label %962

962:                                              ; preds = %957
  %963 = getelementptr inbounds %struct.value_range_d, ptr %9, i64 0, i32 2
  %964 = load ptr, ptr %963, align 8, !tbaa !31
  %965 = tail call i32 @integer_zerop(ptr noundef %964) #18
  %966 = icmp eq i32 %965, 0
  br i1 %966, label %1019, label %967

967:                                              ; preds = %962
  %968 = tail call ptr @build_int_cst(ptr noundef nonnull %730, i64 noundef 0) #18
  store i32 2, ptr %0, align 8, !tbaa !23
  %969 = getelementptr inbounds %struct.value_range_d, ptr %0, i64 0, i32 1
  store ptr %968, ptr %969, align 8, !tbaa !25
  %970 = getelementptr inbounds %struct.value_range_d, ptr %0, i64 0, i32 2
  store ptr %968, ptr %970, align 8, !tbaa !31
  br label %1743

971:                                              ; preds = %944
  %972 = getelementptr inbounds %struct.value_range_d, ptr %8, i64 0, i32 1
  %973 = load ptr, ptr %972, align 8, !tbaa !25
  %974 = tail call i32 @integer_zerop(ptr noundef %973) #18
  %975 = icmp eq i32 %974, 0
  br i1 %975, label %1019, label %976

976:                                              ; preds = %971
  %977 = getelementptr inbounds %struct.value_range_d, ptr %8, i64 0, i32 2
  %978 = load ptr, ptr %977, align 8, !tbaa !31
  %979 = tail call i32 @integer_zerop(ptr noundef %978) #18
  %980 = icmp ne i32 %979, 0
  %981 = icmp eq i32 %891, 1
  %982 = select i1 %980, i1 %981, i1 false
  br i1 %982, label %983, label %1019

983:                                              ; preds = %976
  %984 = getelementptr inbounds %struct.value_range_d, ptr %9, i64 0, i32 1
  %985 = load ptr, ptr %984, align 8, !tbaa !25
  %986 = tail call i32 @integer_zerop(ptr noundef %985) #18
  %987 = icmp eq i32 %986, 0
  br i1 %987, label %1019, label %988

988:                                              ; preds = %983
  %989 = getelementptr inbounds %struct.value_range_d, ptr %9, i64 0, i32 2
  %990 = load ptr, ptr %989, align 8, !tbaa !31
  %991 = tail call i32 @integer_zerop(ptr noundef %990) #18
  %992 = icmp eq i32 %991, 0
  br i1 %992, label %1019, label %993

993:                                              ; preds = %988
  %994 = tail call ptr @build_int_cst(ptr noundef nonnull %730, i64 noundef 0) #18
  %995 = getelementptr inbounds %struct.value_range_d, ptr %0, i64 0, i32 3
  %996 = load ptr, ptr %995, align 8, !tbaa !26
  %997 = tail call zeroext i8 @is_gimple_min_invariant(ptr noundef %994) #18
  %998 = icmp eq i8 %997, 0
  br i1 %998, label %999, label %1000

999:                                              ; preds = %993
  tail call void @fancy_abort(ptr noundef nonnull @.str.27, i32 noundef 515, ptr noundef nonnull @.str.28) #18
  br label %1000

1000:                                             ; preds = %999, %993
  %1001 = tail call fastcc ptr @avoid_overflow_infinity(ptr noundef %994)
  store i32 1, ptr %0, align 8, !tbaa !23
  %1002 = getelementptr inbounds %struct.value_range_d, ptr %0, i64 0, i32 1
  store ptr %1001, ptr %1002, align 8, !tbaa !25
  %1003 = getelementptr inbounds %struct.value_range_d, ptr %0, i64 0, i32 2
  store ptr %1001, ptr %1003, align 8, !tbaa !31
  %1004 = load ptr, ptr %995, align 8, !tbaa !26
  %1005 = icmp eq ptr %1004, null
  %1006 = icmp ne ptr %996, null
  %1007 = and i1 %1006, %1005
  br i1 %1007, label %1008, label %1010

1008:                                             ; preds = %1000
  %1009 = tail call ptr @bitmap_obstack_alloc_stat(ptr noundef null) #18
  store ptr %1009, ptr %995, align 8, !tbaa !26
  br label %1010

1010:                                             ; preds = %1008, %1000
  %1011 = phi ptr [ %1009, %1008 ], [ %1004, %1000 ]
  %1012 = icmp eq ptr %1011, %996
  br i1 %1012, label %1743, label %1013

1013:                                             ; preds = %1010
  br i1 %1006, label %1014, label %1018

1014:                                             ; preds = %1013
  %1015 = load ptr, ptr %996, align 8, !tbaa !32
  %1016 = icmp eq ptr %1015, null
  br i1 %1016, label %1018, label %1017

1017:                                             ; preds = %1014
  tail call void @bitmap_copy(ptr noundef %1011, ptr noundef nonnull %996) #18
  br label %1743

1018:                                             ; preds = %1014, %1013
  tail call void @bitmap_clear(ptr noundef %1011) #18
  br label %1743

1019:                                             ; preds = %988, %983, %976, %971, %962, %957, %950, %945, %944
  store i32 3, ptr %0, align 8, !tbaa !23
  %1020 = getelementptr inbounds %struct.value_range_d, ptr %0, i64 0, i32 1
  %1021 = getelementptr inbounds %struct.value_range_d, ptr %0, i64 0, i32 3
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %1020, i8 0, i64 16, i1 false)
  %1022 = load ptr, ptr %1021, align 8, !tbaa !26
  %1023 = icmp eq ptr %1022, null
  br i1 %1023, label %1743, label %1024

1024:                                             ; preds = %1019
  tail call void @bitmap_clear(ptr noundef nonnull %1022) #18
  br label %1743

1025:                                             ; preds = %941
  %1026 = icmp eq i32 %729, 66
  br i1 %1026, label %1028, label %1027

1027:                                             ; preds = %1025
  tail call void @fancy_abort(ptr noundef nonnull @.str.27, i32 noundef 2171, ptr noundef nonnull @.str.28) #18
  br label %1028

1028:                                             ; preds = %1027, %1025
  %1029 = icmp eq i32 %892, 2
  br i1 %1029, label %1030, label %1040

1030:                                             ; preds = %1028
  %1031 = getelementptr inbounds %struct.value_range_d, ptr %8, i64 0, i32 1
  %1032 = load ptr, ptr %1031, align 8, !tbaa !25
  %1033 = tail call i32 @integer_zerop(ptr noundef %1032) #18
  %1034 = icmp eq i32 %1033, 0
  br i1 %1034, label %1040, label %1035

1035:                                             ; preds = %1030
  %1036 = getelementptr inbounds %struct.value_range_d, ptr %8, i64 0, i32 2
  %1037 = load ptr, ptr %1036, align 8, !tbaa !31
  %1038 = tail call i32 @integer_zerop(ptr noundef %1037) #18
  %1039 = icmp eq i32 %1038, 0
  br i1 %1039, label %1040, label %1052

1040:                                             ; preds = %1035, %1030, %1028
  %1041 = icmp eq i32 %891, 2
  br i1 %1041, label %1042, label %1056

1042:                                             ; preds = %1040
  %1043 = getelementptr inbounds %struct.value_range_d, ptr %9, i64 0, i32 1
  %1044 = load ptr, ptr %1043, align 8, !tbaa !25
  %1045 = tail call i32 @integer_zerop(ptr noundef %1044) #18
  %1046 = icmp eq i32 %1045, 0
  br i1 %1046, label %1056, label %1047

1047:                                             ; preds = %1042
  %1048 = getelementptr inbounds %struct.value_range_d, ptr %9, i64 0, i32 2
  %1049 = load ptr, ptr %1048, align 8, !tbaa !31
  %1050 = tail call i32 @integer_zerop(ptr noundef %1049) #18
  %1051 = icmp eq i32 %1050, 0
  br i1 %1051, label %1056, label %1052

1052:                                             ; preds = %1047, %1035
  %1053 = tail call ptr @build_int_cst(ptr noundef nonnull %730, i64 noundef 0) #18
  store i32 2, ptr %0, align 8, !tbaa !23
  %1054 = getelementptr inbounds %struct.value_range_d, ptr %0, i64 0, i32 1
  store ptr %1053, ptr %1054, align 8, !tbaa !25
  %1055 = getelementptr inbounds %struct.value_range_d, ptr %0, i64 0, i32 2
  store ptr %1053, ptr %1055, align 8, !tbaa !31
  br label %1743

1056:                                             ; preds = %1047, %1042, %1040
  %1057 = icmp eq i32 %892, 1
  br i1 %1057, label %1058, label %1072

1058:                                             ; preds = %1056
  %1059 = getelementptr inbounds %struct.value_range_d, ptr %8, i64 0, i32 1
  %1060 = load ptr, ptr %1059, align 8, !tbaa !25
  %1061 = tail call i32 @integer_zerop(ptr noundef %1060) #18
  %1062 = icmp eq i32 %1061, 0
  br i1 %1062, label %1072, label %1063

1063:                                             ; preds = %1058
  %1064 = getelementptr inbounds %struct.value_range_d, ptr %8, i64 0, i32 2
  %1065 = load ptr, ptr %1064, align 8, !tbaa !31
  %1066 = tail call i32 @integer_zerop(ptr noundef %1065) #18
  %1067 = icmp eq i32 %1066, 0
  br i1 %1067, label %1072, label %1068

1068:                                             ; preds = %1063
  %1069 = call fastcc zeroext i8 @range_is_null(ptr noundef nonnull %9), !range !79
  %1070 = icmp eq i8 %1069, 0
  br i1 %1070, label %1072, label %1071

1071:                                             ; preds = %1068
  tail call fastcc void @set_value_range_to_null(ptr noundef %0, ptr noundef nonnull %730)
  br label %1743

1072:                                             ; preds = %1068, %1063, %1058, %1056
  store i32 3, ptr %0, align 8, !tbaa !23
  %1073 = getelementptr inbounds %struct.value_range_d, ptr %0, i64 0, i32 1
  %1074 = getelementptr inbounds %struct.value_range_d, ptr %0, i64 0, i32 3
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %1073, i8 0, i64 16, i1 false)
  %1075 = load ptr, ptr %1074, align 8, !tbaa !26
  %1076 = icmp eq ptr %1075, null
  br i1 %1076, label %1743, label %1077

1077:                                             ; preds = %1072
  tail call void @bitmap_clear(ptr noundef nonnull %1075) #18
  br label %1743

1078:                                             ; preds = %936
  %1079 = add nsw i32 %729, -93
  %1080 = icmp ult i32 %1079, 2
  br i1 %1080, label %1081, label %1164

1081:                                             ; preds = %1078
  switch i32 %729, label %1134 [
    i32 93, label %1082
    i32 94, label %1108
  ]

1082:                                             ; preds = %1081
  %1083 = icmp eq i32 %892, 1
  br i1 %1083, label %1084, label %1094

1084:                                             ; preds = %1082
  %1085 = getelementptr inbounds %struct.value_range_d, ptr %8, i64 0, i32 1
  %1086 = load ptr, ptr %1085, align 8, !tbaa !25
  %1087 = tail call i32 @integer_zerop(ptr noundef %1086) #18
  %1088 = icmp eq i32 %1087, 0
  br i1 %1088, label %1094, label %1089

1089:                                             ; preds = %1084
  %1090 = getelementptr inbounds %struct.value_range_d, ptr %8, i64 0, i32 2
  %1091 = load ptr, ptr %1090, align 8, !tbaa !31
  %1092 = tail call i32 @integer_zerop(ptr noundef %1091) #18
  %1093 = icmp eq i32 %1092, 0
  br i1 %1093, label %1094, label %1106

1094:                                             ; preds = %1089, %1084, %1082
  %1095 = icmp eq i32 %891, 1
  br i1 %1095, label %1096, label %1134

1096:                                             ; preds = %1094
  %1097 = getelementptr inbounds %struct.value_range_d, ptr %9, i64 0, i32 1
  %1098 = load ptr, ptr %1097, align 8, !tbaa !25
  %1099 = tail call i32 @integer_zerop(ptr noundef %1098) #18
  %1100 = icmp eq i32 %1099, 0
  br i1 %1100, label %1134, label %1101

1101:                                             ; preds = %1096
  %1102 = getelementptr inbounds %struct.value_range_d, ptr %9, i64 0, i32 2
  %1103 = load ptr, ptr %1102, align 8, !tbaa !31
  %1104 = tail call i32 @integer_zerop(ptr noundef %1103) #18
  %1105 = icmp eq i32 %1104, 0
  br i1 %1105, label %1134, label %1106

1106:                                             ; preds = %1101, %1089
  %1107 = tail call ptr @build_int_cst(ptr noundef nonnull %730, i64 noundef 0) #18
  br label %1672

1108:                                             ; preds = %1081
  %1109 = icmp eq i32 %892, 1
  br i1 %1109, label %1110, label %1120

1110:                                             ; preds = %1108
  %1111 = getelementptr inbounds %struct.value_range_d, ptr %8, i64 0, i32 1
  %1112 = load ptr, ptr %1111, align 8, !tbaa !25
  %1113 = tail call i32 @integer_onep(ptr noundef %1112) #18
  %1114 = icmp eq i32 %1113, 0
  br i1 %1114, label %1120, label %1115

1115:                                             ; preds = %1110
  %1116 = getelementptr inbounds %struct.value_range_d, ptr %8, i64 0, i32 2
  %1117 = load ptr, ptr %1116, align 8, !tbaa !31
  %1118 = tail call i32 @integer_onep(ptr noundef %1117) #18
  %1119 = icmp eq i32 %1118, 0
  br i1 %1119, label %1120, label %1132

1120:                                             ; preds = %1115, %1110, %1108
  %1121 = icmp eq i32 %891, 1
  br i1 %1121, label %1122, label %1134

1122:                                             ; preds = %1120
  %1123 = getelementptr inbounds %struct.value_range_d, ptr %9, i64 0, i32 1
  %1124 = load ptr, ptr %1123, align 8, !tbaa !25
  %1125 = tail call i32 @integer_onep(ptr noundef %1124) #18
  %1126 = icmp eq i32 %1125, 0
  br i1 %1126, label %1134, label %1127

1127:                                             ; preds = %1122
  %1128 = getelementptr inbounds %struct.value_range_d, ptr %9, i64 0, i32 2
  %1129 = load ptr, ptr %1128, align 8, !tbaa !31
  %1130 = tail call i32 @integer_onep(ptr noundef %1129) #18
  %1131 = icmp eq i32 %1130, 0
  br i1 %1131, label %1134, label %1132

1132:                                             ; preds = %1127, %1115
  %1133 = tail call ptr @build_int_cst(ptr noundef nonnull %730, i64 noundef 1) #18
  br label %1672

1134:                                             ; preds = %1081, %1127, %1122, %1120, %1101, %1096, %1094
  %1135 = icmp ne i32 %892, 3
  %1136 = icmp ne i32 %891, 3
  %1137 = select i1 %1135, i1 %1136, i1 false
  %1138 = icmp eq i32 %892, %891
  %1139 = select i1 %1137, i1 %1138, i1 false
  br i1 %1139, label %1140, label %1163

1140:                                             ; preds = %1134
  %1141 = call fastcc zeroext i8 @symbolic_range_p(ptr noundef nonnull %8), !range !79
  %1142 = icmp eq i8 %1141, 0
  br i1 %1142, label %1143, label %1163

1143:                                             ; preds = %1140
  %1144 = call fastcc zeroext i8 @overflow_infinity_range_p(ptr noundef nonnull %8), !range !79
  %1145 = icmp eq i8 %1144, 0
  br i1 %1145, label %1146, label %1163

1146:                                             ; preds = %1143
  %1147 = call fastcc zeroext i8 @symbolic_range_p(ptr noundef nonnull %9), !range !79
  %1148 = icmp eq i8 %1147, 0
  br i1 %1148, label %1149, label %1163

1149:                                             ; preds = %1146
  %1150 = call fastcc zeroext i8 @overflow_infinity_range_p(ptr noundef nonnull %9), !range !79
  %1151 = icmp eq i8 %1150, 0
  br i1 %1151, label %1152, label %1163

1152:                                             ; preds = %1149
  %1153 = getelementptr inbounds %struct.value_range_d, ptr %8, i64 0, i32 1
  %1154 = load ptr, ptr %1153, align 8, !tbaa !25
  %1155 = getelementptr inbounds %struct.value_range_d, ptr %9, i64 0, i32 1
  %1156 = load ptr, ptr %1155, align 8, !tbaa !25
  %1157 = tail call ptr @fold_binary_loc(i32 noundef 0, i32 noundef %729, ptr noundef nonnull %730, ptr noundef %1154, ptr noundef %1156) #18
  %1158 = getelementptr inbounds %struct.value_range_d, ptr %8, i64 0, i32 2
  %1159 = load ptr, ptr %1158, align 8, !tbaa !31
  %1160 = getelementptr inbounds %struct.value_range_d, ptr %9, i64 0, i32 2
  %1161 = load ptr, ptr %1160, align 8, !tbaa !31
  %1162 = tail call ptr @fold_binary_loc(i32 noundef 0, i32 noundef %729, ptr noundef nonnull %730, ptr noundef %1159, ptr noundef %1161) #18
  br label %1672

1163:                                             ; preds = %1149, %1146, %1143, %1140, %1134
  tail call fastcc void @set_value_range_to_truthvalue(ptr noundef %0, ptr noundef nonnull %730)
  br label %1743

1164:                                             ; preds = %1078
  %1165 = icmp eq i32 %729, 63
  switch i32 %729, label %1215 [
    i32 81, label %1166
    i32 80, label %1166
    i32 63, label %1166
  ]

1166:                                             ; preds = %1164, %1164, %1164
  %1167 = icmp eq i32 %892, 2
  %1168 = and i1 %1165, %1167
  br i1 %1168, label %1169, label %1175

1169:                                             ; preds = %1166
  store i32 3, ptr %0, align 8, !tbaa !23
  %1170 = getelementptr inbounds %struct.value_range_d, ptr %0, i64 0, i32 1
  %1171 = getelementptr inbounds %struct.value_range_d, ptr %0, i64 0, i32 3
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %1170, i8 0, i64 16, i1 false)
  %1172 = load ptr, ptr %1171, align 8, !tbaa !26
  %1173 = icmp eq ptr %1172, null
  br i1 %1173, label %1743, label %1174

1174:                                             ; preds = %1169
  tail call void @bitmap_clear(ptr noundef nonnull %1172) #18
  br label %1743

1175:                                             ; preds = %1166
  %1176 = getelementptr inbounds %struct.value_range_d, ptr %8, i64 0, i32 1
  %1177 = load ptr, ptr %1176, align 8, !tbaa !25
  %1178 = getelementptr inbounds %struct.value_range_d, ptr %9, i64 0, i32 1
  %1179 = load ptr, ptr %1178, align 8, !tbaa !25
  %1180 = tail call fastcc ptr @vrp_int_const_binop(i32 noundef %729, ptr noundef %1177, ptr noundef %1179)
  %1181 = getelementptr inbounds %struct.value_range_d, ptr %8, i64 0, i32 2
  %1182 = load ptr, ptr %1181, align 8, !tbaa !31
  %1183 = getelementptr inbounds %struct.value_range_d, ptr %9, i64 0, i32 2
  %1184 = load ptr, ptr %1183, align 8, !tbaa !31
  %1185 = tail call fastcc ptr @vrp_int_const_binop(i32 noundef %729, ptr noundef %1182, ptr noundef %1184)
  br i1 %1165, label %1186, label %1672

1186:                                             ; preds = %1175
  %1187 = load i64, ptr %1180, align 8
  %1188 = and i64 %1187, 134217728
  %1189 = icmp eq i64 %1188, 0
  br i1 %1189, label %1677, label %1190

1190:                                             ; preds = %1186
  %1191 = tail call fastcc zeroext i8 @is_overflow_infinity(ptr noundef nonnull %1180), !range !79
  %1192 = icmp eq i8 %1191, 0
  br i1 %1192, label %1193, label %1677

1193:                                             ; preds = %1190
  %1194 = load i64, ptr %1185, align 8
  %1195 = and i64 %1194, 134217728
  %1196 = icmp eq i64 %1195, 0
  br i1 %1196, label %1677, label %1197

1197:                                             ; preds = %1193
  %1198 = tail call fastcc zeroext i8 @is_overflow_infinity(ptr noundef nonnull %1185), !range !79
  %1199 = icmp eq i8 %1198, 0
  br i1 %1199, label %1200, label %1677

1200:                                             ; preds = %1197
  %1201 = getelementptr inbounds %struct.tree_common, ptr %1180, i64 0, i32 2
  %1202 = load ptr, ptr %1201, align 8, !tbaa !16
  %1203 = getelementptr inbounds %struct.tree_int_cst, ptr %1180, i64 0, i32 1
  %1204 = load i64, ptr %1203, align 8, !tbaa !16
  %1205 = getelementptr inbounds %struct.tree_int_cst, ptr %1180, i64 0, i32 1, i32 1
  %1206 = load i64, ptr %1205, align 8, !tbaa !16
  %1207 = tail call ptr @build_int_cst_wide(ptr noundef %1202, i64 noundef %1204, i64 noundef %1206) #18
  %1208 = getelementptr inbounds %struct.tree_common, ptr %1185, i64 0, i32 2
  %1209 = load ptr, ptr %1208, align 8, !tbaa !16
  %1210 = getelementptr inbounds %struct.tree_int_cst, ptr %1185, i64 0, i32 1
  %1211 = load i64, ptr %1210, align 8, !tbaa !16
  %1212 = getelementptr inbounds %struct.tree_int_cst, ptr %1185, i64 0, i32 1, i32 1
  %1213 = load i64, ptr %1212, align 8, !tbaa !16
  %1214 = tail call ptr @build_int_cst_wide(ptr noundef %1209, i64 noundef %1211, i64 noundef %1213) #18
  br label %1672

1215:                                             ; preds = %1164
  %1216 = icmp eq i32 %729, 65
  %1217 = icmp eq i32 %729, 76
  switch i32 %729, label %1671 [
    i32 84, label %1218
    i32 76, label %1218
    i32 70, label %1218
    i32 69, label %1218
    i32 68, label %1218
    i32 67, label %1218
    i32 65, label %1218
    i32 64, label %1543
    i32 89, label %1562
    i32 87, label %1602
  ]

1218:                                             ; preds = %1215, %1215, %1215, %1215, %1215, %1215, %1215
  call void @llvm.lifetime.start.p0(i64 1, ptr nonnull %10) #18
  %1219 = icmp eq i32 %892, 2
  %1220 = and i1 %1216, %1219
  br i1 %1220, label %1221, label %1239

1221:                                             ; preds = %1218
  %1222 = and i64 %934, 2097152
  %1223 = icmp eq i64 %1222, 0
  %1224 = load i32, ptr @flag_wrapv, align 4
  %1225 = icmp eq i32 %1224, 0
  %1226 = select i1 %1223, i1 %1225, i1 false
  %1227 = load i32, ptr @flag_trapv, align 4
  %1228 = icmp eq i32 %1227, 0
  %1229 = select i1 %1226, i1 %1228, i1 false
  %1230 = load i32, ptr @flag_strict_overflow, align 4
  %1231 = icmp ne i32 %1230, 0
  %1232 = select i1 %1229, i1 %1231, i1 false
  br i1 %1232, label %1365, label %1233

1233:                                             ; preds = %1221
  store i32 3, ptr %0, align 8, !tbaa !23
  %1234 = getelementptr inbounds %struct.value_range_d, ptr %0, i64 0, i32 1
  %1235 = getelementptr inbounds %struct.value_range_d, ptr %0, i64 0, i32 3
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %1234, i8 0, i64 16, i1 false)
  %1236 = load ptr, ptr %1235, align 8, !tbaa !26
  %1237 = icmp eq ptr %1236, null
  br i1 %1237, label %1538, label %1238

1238:                                             ; preds = %1233
  tail call void @bitmap_clear(ptr noundef nonnull %1236) #18
  br label %1538

1239:                                             ; preds = %1218
  switch i32 %729, label %1305 [
    i32 84, label %1240
    i32 76, label %1264
    i32 70, label %1264
    i32 69, label %1264
    i32 68, label %1264
    i32 67, label %1264
  ]

1240:                                             ; preds = %1239
  %1241 = icmp eq i32 %891, 2
  br i1 %1241, label %1258, label %1242

1242:                                             ; preds = %1240
  %1243 = call fastcc zeroext i8 @vrp_expr_computes_nonnegative(ptr noundef nonnull %772, ptr noundef nonnull %10), !range !79
  %1244 = icmp eq i8 %1243, 0
  br i1 %1244, label %1258, label %1245

1245:                                             ; preds = %1242
  %1246 = getelementptr inbounds %struct.value_range_d, ptr %9, i64 0, i32 2
  %1247 = load ptr, ptr %1246, align 8, !tbaa !31
  %1248 = getelementptr inbounds %struct.tree_common, ptr %1247, i64 0, i32 2
  %1249 = load ptr, ptr %1248, align 8, !tbaa !16
  %1250 = getelementptr inbounds %struct.tree_type, ptr %730, i64 0, i32 6
  %1251 = load i32, ptr %1250, align 4
  %1252 = and i32 %1251, 1023
  %1253 = add nsw i32 %1252, -1
  %1254 = sext i32 %1253 to i64
  %1255 = call ptr @build_int_cst(ptr noundef %1249, i64 noundef %1254) #18
  %1256 = call fastcc i32 @operand_less_p(ptr noundef %1255, ptr noundef %1247)
  %1257 = icmp eq i32 %1256, 0
  br i1 %1257, label %1305, label %1258

1258:                                             ; preds = %1245, %1242, %1240
  store i32 3, ptr %0, align 8, !tbaa !23
  %1259 = getelementptr inbounds %struct.value_range_d, ptr %0, i64 0, i32 1
  %1260 = getelementptr inbounds %struct.value_range_d, ptr %0, i64 0, i32 3
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %1259, i8 0, i64 16, i1 false)
  %1261 = load ptr, ptr %1260, align 8, !tbaa !26
  %1262 = icmp eq ptr %1261, null
  br i1 %1262, label %1538, label %1263

1263:                                             ; preds = %1258
  call void @bitmap_clear(ptr noundef nonnull %1261) #18
  br label %1538

1264:                                             ; preds = %1239, %1239, %1239, %1239, %1239
  %1265 = icmp eq i32 %892, 1
  br i1 %1265, label %1266, label %1269

1266:                                             ; preds = %1264
  %1267 = call fastcc zeroext i8 @symbolic_range_p(ptr noundef nonnull %8), !range !79
  %1268 = icmp eq i8 %1267, 0
  br i1 %1268, label %1305, label %1269

1269:                                             ; preds = %1266, %1264
  %1270 = icmp eq i32 %891, 1
  br i1 %1270, label %1271, label %1299

1271:                                             ; preds = %1269
  %1272 = call fastcc zeroext i8 @symbolic_range_p(ptr noundef nonnull %9), !range !79
  %1273 = icmp eq i8 %1272, 0
  br i1 %1273, label %1274, label %1299

1274:                                             ; preds = %1271
  %1275 = call fastcc zeroext i8 @range_includes_zero_p(ptr noundef nonnull %9), !range !79
  %1276 = icmp eq i8 %1275, 0
  br i1 %1276, label %1277, label %1299

1277:                                             ; preds = %1274
  store i32 1, ptr %8, align 8, !tbaa !23
  %1278 = load ptr, ptr %932, align 8, !tbaa !16
  %1279 = load i64, ptr %1278, align 8
  %1280 = trunc i64 %1279 to i32
  %1281 = and i32 %1280, 65535
  %1282 = add nsw i32 %1281, -6
  %1283 = icmp ult i32 %1282, 3
  br i1 %1283, label %1284, label %1287

1284:                                             ; preds = %1277
  %1285 = getelementptr inbounds %struct.tree_type, ptr %1278, i64 0, i32 13
  %1286 = load ptr, ptr %1285, align 8, !tbaa !16
  br label %1287

1287:                                             ; preds = %1284, %1277
  %1288 = phi ptr [ %1286, %1284 ], [ null, %1277 ]
  %1289 = getelementptr inbounds %struct.value_range_d, ptr %8, i64 0, i32 1
  store ptr %1288, ptr %1289, align 8, !tbaa !25
  %1290 = load ptr, ptr %937, align 8, !tbaa !16
  %1291 = load i64, ptr %1290, align 8
  %1292 = trunc i64 %1291 to i32
  %1293 = and i32 %1292, 65535
  %1294 = add nsw i32 %1293, -6
  %1295 = icmp ult i32 %1294, 3
  br i1 %1295, label %1296, label %1311

1296:                                             ; preds = %1287
  %1297 = getelementptr inbounds %struct.tree_type, ptr %1290, i64 0, i32 14
  %1298 = load ptr, ptr %1297, align 8, !tbaa !16
  br label %1311

1299:                                             ; preds = %1274, %1271, %1269
  store i32 3, ptr %0, align 8, !tbaa !23
  %1300 = getelementptr inbounds %struct.value_range_d, ptr %0, i64 0, i32 1
  %1301 = getelementptr inbounds %struct.value_range_d, ptr %0, i64 0, i32 3
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %1300, i8 0, i64 16, i1 false)
  %1302 = load ptr, ptr %1301, align 8, !tbaa !26
  %1303 = icmp eq ptr %1302, null
  br i1 %1303, label %1538, label %1304

1304:                                             ; preds = %1299
  tail call void @bitmap_clear(ptr noundef nonnull %1302) #18
  br label %1538

1305:                                             ; preds = %1266, %1245, %1239
  %1306 = add nsw i32 %729, -67
  %1307 = icmp ult i32 %1306, 4
  %1308 = or i1 %1217, %1307
  %1309 = icmp eq i32 %892, 1
  %1310 = and i1 %1308, %1309
  br i1 %1310, label %1316, label %1365

1311:                                             ; preds = %1287, %1296
  %1312 = phi ptr [ %1298, %1296 ], [ null, %1287 ]
  %1313 = getelementptr inbounds %struct.value_range_d, ptr %8, i64 0, i32 2
  store ptr %1312, ptr %1313, align 8, !tbaa !31
  %1314 = add nsw i32 %729, -67
  %1315 = icmp ult i32 %1314, 10
  br i1 %1315, label %1318, label %1365

1316:                                             ; preds = %1305
  %1317 = icmp eq i32 %891, 1
  br i1 %1317, label %1323, label %1330

1318:                                             ; preds = %1311
  %1319 = trunc i32 %1314 to i16
  %1320 = lshr i16 527, %1319
  %1321 = and i16 %1320, 1
  %1322 = icmp eq i16 %1321, 0
  br i1 %1322, label %1365, label %1323

1323:                                             ; preds = %1318, %1316
  %1324 = phi i1 [ %1309, %1316 ], [ true, %1318 ]
  %1325 = call fastcc zeroext i8 @symbolic_range_p(ptr noundef nonnull %9), !range !79
  %1326 = icmp eq i8 %1325, 0
  br i1 %1326, label %1327, label %1330

1327:                                             ; preds = %1323
  %1328 = call fastcc zeroext i8 @range_includes_zero_p(ptr noundef nonnull %9), !range !79
  %1329 = icmp eq i8 %1328, 0
  br i1 %1329, label %1365, label %1330

1330:                                             ; preds = %1327, %1323, %1316
  %1331 = getelementptr inbounds %struct.value_range_d, ptr %8, i64 0, i32 1
  %1332 = load ptr, ptr %1331, align 8
  %1333 = getelementptr inbounds %struct.tree_common, ptr %1332, i64 0, i32 2
  %1334 = load ptr, ptr %1333, align 8, !tbaa !16
  %1335 = call ptr @build_int_cst(ptr noundef %1334, i64 noundef 0) #18
  store i8 0, ptr %10, align 1, !tbaa !16
  %1336 = call fastcc zeroext i8 @vrp_expr_computes_nonnegative(ptr noundef nonnull %772, ptr noundef nonnull %10), !range !79
  %1337 = icmp eq i8 %1336, 0
  %1338 = load i8, ptr %10, align 1
  %1339 = icmp ne i8 %1338, 0
  %1340 = select i1 %1337, i1 true, i1 %1339
  %1341 = getelementptr inbounds %struct.value_range_d, ptr %8, i64 0, i32 2
  %1342 = load ptr, ptr %1341, align 8
  br i1 %1340, label %1356, label %1343

1343:                                             ; preds = %1330
  %1344 = call fastcc i32 @compare_values(ptr noundef %1342, ptr noundef %1335)
  %1345 = icmp eq i32 %1344, -1
  %1346 = icmp ult i32 %1344, 2
  %1347 = select i1 %1346, ptr %1342, ptr null
  %1348 = select i1 %1345, ptr %1335, ptr %1347
  %1349 = add i32 %1344, -2
  %1350 = icmp ult i32 %1349, -3
  %1351 = call fastcc i32 @compare_values(ptr noundef nonnull %1332, ptr noundef %1335)
  %1352 = icmp eq i32 %1351, 1
  br i1 %1352, label %1357, label %1353

1353:                                             ; preds = %1343
  %1354 = add i32 %1351, 1
  %1355 = icmp ult i32 %1354, 2
  br i1 %1355, label %1357, label %1359

1356:                                             ; preds = %1330
  call fastcc void @abs_extent_range(ptr noundef %0, ptr noundef nonnull %1332, ptr noundef %1342)
  br label %1538

1357:                                             ; preds = %1353, %1343
  %1358 = phi ptr [ %1335, %1343 ], [ %1332, %1353 ]
  br i1 %1350, label %1359, label %1539

1359:                                             ; preds = %1357, %1353
  store i32 3, ptr %0, align 8, !tbaa !23
  %1360 = getelementptr inbounds %struct.value_range_d, ptr %0, i64 0, i32 1
  %1361 = getelementptr inbounds %struct.value_range_d, ptr %0, i64 0, i32 3
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %1360, i8 0, i64 16, i1 false)
  %1362 = load ptr, ptr %1361, align 8, !tbaa !26
  %1363 = icmp eq ptr %1362, null
  br i1 %1363, label %1538, label %1364

1364:                                             ; preds = %1359
  call void @bitmap_clear(ptr noundef nonnull %1362) #18
  br label %1538

1365:                                             ; preds = %1318, %1311, %1221, %1327, %1305
  %1366 = phi i1 [ %1324, %1327 ], [ %1309, %1305 ], [ true, %1311 ], [ false, %1221 ], [ true, %1318 ]
  %1367 = phi i32 [ 1, %1327 ], [ %892, %1305 ], [ 1, %1311 ], [ 2, %1221 ], [ 1, %1318 ]
  %1368 = icmp eq i32 %1367, 2
  %1369 = and i1 %1216, %1368
  %1370 = or i1 %1366, %1369
  %1371 = icmp eq i32 %1367, %891
  %1372 = select i1 %1370, i1 %1371, i1 false
  br i1 %1372, label %1374, label %1373

1373:                                             ; preds = %1365
  call void @fancy_abort(ptr noundef nonnull @.str.27, i32 noundef 2416, ptr noundef nonnull @.str.28) #18
  br label %1374

1374:                                             ; preds = %1373, %1365
  store i8 0, ptr %10, align 1, !tbaa !16
  %1375 = getelementptr inbounds %struct.value_range_d, ptr %8, i64 0, i32 1
  %1376 = load ptr, ptr %1375, align 8, !tbaa !25
  %1377 = getelementptr inbounds %struct.value_range_d, ptr %9, i64 0, i32 1
  %1378 = load ptr, ptr %1377, align 8, !tbaa !25
  %1379 = call fastcc ptr @vrp_int_const_binop(i32 noundef %729, ptr noundef %1376, ptr noundef %1378)
  %1380 = icmp eq ptr %1379, null
  br i1 %1380, label %1381, label %1382

1381:                                             ; preds = %1374
  store i8 1, ptr %10, align 1, !tbaa !16
  br label %1382

1382:                                             ; preds = %1381, %1374
  %1383 = getelementptr inbounds %struct.value_range_d, ptr %9, i64 0, i32 2
  %1384 = load ptr, ptr %1383, align 8, !tbaa !31
  %1385 = icmp eq ptr %1384, %1378
  br i1 %1385, label %1390, label %1386

1386:                                             ; preds = %1382
  %1387 = call fastcc ptr @vrp_int_const_binop(i32 noundef %729, ptr noundef %1376, ptr noundef %1384)
  %1388 = icmp eq ptr %1387, null
  br i1 %1388, label %1389, label %1390

1389:                                             ; preds = %1386
  store i8 1, ptr %10, align 1, !tbaa !16
  br label %1390

1390:                                             ; preds = %1389, %1386, %1382
  %1391 = phi ptr [ null, %1389 ], [ %1387, %1386 ], [ null, %1382 ]
  %1392 = getelementptr inbounds %struct.value_range_d, ptr %8, i64 0, i32 2
  %1393 = load ptr, ptr %1392, align 8, !tbaa !31
  %1394 = icmp eq ptr %1393, %1376
  br i1 %1394, label %1404, label %1395

1395:                                             ; preds = %1390
  %1396 = call fastcc ptr @vrp_int_const_binop(i32 noundef %729, ptr noundef %1393, ptr noundef %1378)
  %1397 = icmp eq ptr %1396, null
  br i1 %1397, label %1398, label %1399

1398:                                             ; preds = %1395
  store i8 1, ptr %10, align 1, !tbaa !16
  br label %1399

1399:                                             ; preds = %1398, %1395
  br i1 %1385, label %1404, label %1400

1400:                                             ; preds = %1399
  %1401 = call fastcc ptr @vrp_int_const_binop(i32 noundef %729, ptr noundef %1393, ptr noundef %1384)
  %1402 = icmp eq ptr %1401, null
  br i1 %1402, label %1403, label %1404

1403:                                             ; preds = %1400
  store i8 1, ptr %10, align 1, !tbaa !16
  br label %1412

1404:                                             ; preds = %1390, %1400, %1399
  %1405 = phi ptr [ %1396, %1400 ], [ %1396, %1399 ], [ null, %1390 ]
  %1406 = phi ptr [ %1401, %1400 ], [ null, %1399 ], [ null, %1390 ]
  %1407 = load i8, ptr %10, align 1, !tbaa !16
  %1408 = icmp eq i8 %1407, 0
  br i1 %1408, label %1409, label %1412

1409:                                             ; preds = %1404
  %1410 = call zeroext i8 @is_gimple_min_invariant(ptr noundef %1379) #18
  %1411 = icmp eq i8 %1410, 0
  br i1 %1411, label %1539, label %1418

1412:                                             ; preds = %1404, %1403
  store i32 3, ptr %0, align 8, !tbaa !23
  %1413 = getelementptr inbounds %struct.value_range_d, ptr %0, i64 0, i32 1
  %1414 = getelementptr inbounds %struct.value_range_d, ptr %0, i64 0, i32 3
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %1413, i8 0, i64 16, i1 false)
  %1415 = load ptr, ptr %1414, align 8, !tbaa !26
  %1416 = icmp eq ptr %1415, null
  br i1 %1416, label %1538, label %1417

1417:                                             ; preds = %1412
  call void @bitmap_clear(ptr noundef nonnull %1415) #18
  br label %1538

1418:                                             ; preds = %1409
  %1419 = load i64, ptr %1379, align 8
  %1420 = and i64 %1419, 134217728
  %1421 = icmp eq i64 %1420, 0
  br i1 %1421, label %1425, label %1422

1422:                                             ; preds = %1418
  %1423 = call fastcc zeroext i8 @is_overflow_infinity(ptr noundef nonnull %1379), !range !79
  %1424 = icmp eq i8 %1423, 0
  br i1 %1424, label %1539, label %1425

1425:                                             ; preds = %1422, %1418
  %1426 = call zeroext i8 @is_gimple_min_invariant(ptr noundef nonnull %1379) #18
  %1427 = icmp eq i8 %1426, 0
  br i1 %1427, label %1539, label %1428

1428:                                             ; preds = %1425
  %1429 = load i64, ptr %1379, align 8
  %1430 = and i64 %1429, 134217728
  %1431 = icmp eq i64 %1430, 0
  br i1 %1431, label %1435, label %1432

1432:                                             ; preds = %1428
  %1433 = call fastcc zeroext i8 @is_overflow_infinity(ptr noundef nonnull %1379), !range !79
  %1434 = icmp eq i8 %1433, 0
  br i1 %1434, label %1539, label %1435

1435:                                             ; preds = %1432, %1428
  %1436 = icmp eq ptr %1391, null
  br i1 %1436, label %1454, label %1437

1437:                                             ; preds = %1435
  %1438 = call zeroext i8 @is_gimple_min_invariant(ptr noundef nonnull %1391) #18
  %1439 = icmp eq i8 %1438, 0
  br i1 %1439, label %1539, label %1440

1440:                                             ; preds = %1437
  %1441 = load i64, ptr %1391, align 8
  %1442 = and i64 %1441, 134217728
  %1443 = icmp eq i64 %1442, 0
  br i1 %1443, label %1447, label %1444

1444:                                             ; preds = %1440
  %1445 = call fastcc zeroext i8 @is_overflow_infinity(ptr noundef nonnull %1391), !range !79
  %1446 = icmp eq i8 %1445, 0
  br i1 %1446, label %1539, label %1447

1447:                                             ; preds = %1444, %1440
  %1448 = call fastcc i32 @compare_values(ptr noundef nonnull %1391, ptr noundef nonnull %1379)
  %1449 = icmp eq i32 %1448, -1
  %1450 = select i1 %1449, ptr %1391, ptr %1379
  %1451 = call fastcc i32 @compare_values(ptr noundef nonnull %1391, ptr noundef nonnull %1379)
  %1452 = icmp eq i32 %1451, 1
  %1453 = select i1 %1452, ptr %1391, ptr %1379
  br label %1454

1454:                                             ; preds = %1447, %1435
  %1455 = phi ptr [ %1379, %1435 ], [ %1453, %1447 ]
  %1456 = phi ptr [ %1379, %1435 ], [ %1450, %1447 ]
  %1457 = call zeroext i8 @is_gimple_min_invariant(ptr noundef nonnull %1456) #18
  %1458 = icmp eq i8 %1457, 0
  br i1 %1458, label %1539, label %1459

1459:                                             ; preds = %1454
  %1460 = load i64, ptr %1456, align 8
  %1461 = and i64 %1460, 134217728
  %1462 = icmp eq i64 %1461, 0
  br i1 %1462, label %1466, label %1463

1463:                                             ; preds = %1459
  %1464 = call fastcc zeroext i8 @is_overflow_infinity(ptr noundef nonnull %1456), !range !79
  %1465 = icmp eq i8 %1464, 0
  br i1 %1465, label %1539, label %1466

1466:                                             ; preds = %1463, %1459
  %1467 = call zeroext i8 @is_gimple_min_invariant(ptr noundef nonnull %1455) #18
  %1468 = icmp eq i8 %1467, 0
  br i1 %1468, label %1539, label %1469

1469:                                             ; preds = %1466
  %1470 = load i64, ptr %1455, align 8
  %1471 = and i64 %1470, 134217728
  %1472 = icmp eq i64 %1471, 0
  br i1 %1472, label %1476, label %1473

1473:                                             ; preds = %1469
  %1474 = call fastcc zeroext i8 @is_overflow_infinity(ptr noundef nonnull %1455), !range !79
  %1475 = icmp eq i8 %1474, 0
  br i1 %1475, label %1539, label %1476

1476:                                             ; preds = %1473, %1469
  %1477 = icmp eq ptr %1405, null
  br i1 %1477, label %1495, label %1478

1478:                                             ; preds = %1476
  %1479 = call zeroext i8 @is_gimple_min_invariant(ptr noundef nonnull %1405) #18
  %1480 = icmp eq i8 %1479, 0
  br i1 %1480, label %1539, label %1481

1481:                                             ; preds = %1478
  %1482 = load i64, ptr %1405, align 8
  %1483 = and i64 %1482, 134217728
  %1484 = icmp eq i64 %1483, 0
  br i1 %1484, label %1488, label %1485

1485:                                             ; preds = %1481
  %1486 = call fastcc zeroext i8 @is_overflow_infinity(ptr noundef nonnull %1405), !range !79
  %1487 = icmp eq i8 %1486, 0
  br i1 %1487, label %1539, label %1488

1488:                                             ; preds = %1485, %1481
  %1489 = call fastcc i32 @compare_values(ptr noundef nonnull %1405, ptr noundef nonnull %1456)
  %1490 = icmp eq i32 %1489, -1
  %1491 = select i1 %1490, ptr %1405, ptr %1456
  %1492 = call fastcc i32 @compare_values(ptr noundef nonnull %1405, ptr noundef nonnull %1455)
  %1493 = icmp eq i32 %1492, 1
  %1494 = select i1 %1493, ptr %1405, ptr %1455
  br label %1495

1495:                                             ; preds = %1488, %1476
  %1496 = phi ptr [ %1455, %1476 ], [ %1494, %1488 ]
  %1497 = phi ptr [ %1456, %1476 ], [ %1491, %1488 ]
  %1498 = call zeroext i8 @is_gimple_min_invariant(ptr noundef nonnull %1497) #18
  %1499 = icmp eq i8 %1498, 0
  br i1 %1499, label %1539, label %1500

1500:                                             ; preds = %1495
  %1501 = load i64, ptr %1497, align 8
  %1502 = and i64 %1501, 134217728
  %1503 = icmp eq i64 %1502, 0
  br i1 %1503, label %1507, label %1504

1504:                                             ; preds = %1500
  %1505 = call fastcc zeroext i8 @is_overflow_infinity(ptr noundef nonnull %1497), !range !79
  %1506 = icmp eq i8 %1505, 0
  br i1 %1506, label %1539, label %1507

1507:                                             ; preds = %1504, %1500
  %1508 = call zeroext i8 @is_gimple_min_invariant(ptr noundef nonnull %1496) #18
  %1509 = icmp eq i8 %1508, 0
  br i1 %1509, label %1539, label %1510

1510:                                             ; preds = %1507
  %1511 = load i64, ptr %1496, align 8
  %1512 = and i64 %1511, 134217728
  %1513 = icmp eq i64 %1512, 0
  br i1 %1513, label %1519, label %1514

1514:                                             ; preds = %1510
  %1515 = call fastcc zeroext i8 @is_overflow_infinity(ptr noundef nonnull %1496), !range !79
  %1516 = icmp eq i8 %1515, 0
  %1517 = icmp eq ptr %1406, null
  %1518 = or i1 %1517, %1516
  br i1 %1518, label %1539, label %1521

1519:                                             ; preds = %1510
  %1520 = icmp eq ptr %1406, null
  br i1 %1520, label %1539, label %1521

1521:                                             ; preds = %1519, %1514
  %1522 = call zeroext i8 @is_gimple_min_invariant(ptr noundef nonnull %1406) #18
  %1523 = icmp eq i8 %1522, 0
  br i1 %1523, label %1539, label %1524

1524:                                             ; preds = %1521
  %1525 = load i64, ptr %1406, align 8
  %1526 = and i64 %1525, 134217728
  %1527 = icmp eq i64 %1526, 0
  br i1 %1527, label %1531, label %1528

1528:                                             ; preds = %1524
  %1529 = call fastcc zeroext i8 @is_overflow_infinity(ptr noundef nonnull %1406), !range !79
  %1530 = icmp eq i8 %1529, 0
  br i1 %1530, label %1539, label %1531

1531:                                             ; preds = %1528, %1524
  %1532 = call fastcc i32 @compare_values(ptr noundef nonnull %1406, ptr noundef nonnull %1497)
  %1533 = icmp eq i32 %1532, -1
  %1534 = select i1 %1533, ptr %1406, ptr %1497
  %1535 = call fastcc i32 @compare_values(ptr noundef nonnull %1406, ptr noundef nonnull %1496)
  %1536 = icmp eq i32 %1535, 1
  %1537 = select i1 %1536, ptr %1406, ptr %1496
  br label %1539

1538:                                             ; preds = %1417, %1412, %1364, %1359, %1356, %1304, %1299, %1263, %1258, %1238, %1233
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %10) #18
  br label %1743

1539:                                             ; preds = %1531, %1528, %1521, %1519, %1514, %1507, %1504, %1495, %1485, %1478, %1473, %1466, %1463, %1454, %1444, %1437, %1432, %1425, %1422, %1409, %1357
  %1540 = phi ptr [ %1348, %1357 ], [ %1379, %1432 ], [ %1379, %1425 ], [ %1379, %1422 ], [ %1379, %1409 ], [ %1391, %1444 ], [ %1391, %1437 ], [ %1455, %1454 ], [ %1455, %1463 ], [ %1455, %1466 ], [ %1455, %1473 ], [ %1405, %1478 ], [ %1405, %1485 ], [ %1496, %1495 ], [ %1496, %1504 ], [ %1496, %1507 ], [ %1496, %1514 ], [ %1406, %1521 ], [ %1406, %1528 ], [ %1496, %1519 ], [ %1537, %1531 ]
  %1541 = phi ptr [ %1358, %1357 ], [ %1379, %1432 ], [ %1379, %1425 ], [ %1379, %1422 ], [ %1379, %1409 ], [ %1391, %1444 ], [ %1391, %1437 ], [ %1456, %1454 ], [ %1456, %1463 ], [ %1456, %1466 ], [ %1456, %1473 ], [ %1405, %1478 ], [ %1405, %1485 ], [ %1497, %1495 ], [ %1497, %1504 ], [ %1497, %1507 ], [ %1497, %1514 ], [ %1406, %1521 ], [ %1406, %1528 ], [ %1497, %1519 ], [ %1534, %1531 ]
  %1542 = phi i32 [ 1, %1357 ], [ %1367, %1432 ], [ %1367, %1425 ], [ %1367, %1422 ], [ %1367, %1409 ], [ %1367, %1444 ], [ %1367, %1437 ], [ %1367, %1454 ], [ %1367, %1463 ], [ %1367, %1466 ], [ %1367, %1473 ], [ %1367, %1478 ], [ %1367, %1485 ], [ %1367, %1495 ], [ %1367, %1504 ], [ %1367, %1507 ], [ %1367, %1514 ], [ %1367, %1521 ], [ %1367, %1528 ], [ %1367, %1519 ], [ %1367, %1531 ]
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %10) #18
  br label %1672

1543:                                             ; preds = %1215
  %1544 = icmp eq i32 %892, 2
  br i1 %1544, label %1545, label %1551

1545:                                             ; preds = %1543
  store i32 3, ptr %0, align 8, !tbaa !23
  %1546 = getelementptr inbounds %struct.value_range_d, ptr %0, i64 0, i32 1
  %1547 = getelementptr inbounds %struct.value_range_d, ptr %0, i64 0, i32 3
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %1546, i8 0, i64 16, i1 false)
  %1548 = load ptr, ptr %1547, align 8, !tbaa !26
  %1549 = icmp eq ptr %1548, null
  br i1 %1549, label %1743, label %1550

1550:                                             ; preds = %1545
  tail call void @bitmap_clear(ptr noundef nonnull %1548) #18
  br label %1743

1551:                                             ; preds = %1543
  %1552 = getelementptr inbounds %struct.value_range_d, ptr %8, i64 0, i32 1
  %1553 = load ptr, ptr %1552, align 8, !tbaa !25
  %1554 = getelementptr inbounds %struct.value_range_d, ptr %9, i64 0, i32 2
  %1555 = load ptr, ptr %1554, align 8, !tbaa !31
  %1556 = tail call fastcc ptr @vrp_int_const_binop(i32 noundef 64, ptr noundef %1553, ptr noundef %1555)
  %1557 = getelementptr inbounds %struct.value_range_d, ptr %8, i64 0, i32 2
  %1558 = load ptr, ptr %1557, align 8, !tbaa !31
  %1559 = getelementptr inbounds %struct.value_range_d, ptr %9, i64 0, i32 1
  %1560 = load ptr, ptr %1559, align 8, !tbaa !25
  %1561 = tail call fastcc ptr @vrp_int_const_binop(i32 noundef 64, ptr noundef %1558, ptr noundef %1560)
  br label %1672

1562:                                             ; preds = %1215
  %1563 = icmp eq i32 %892, 1
  br i1 %1563, label %1564, label %1579

1564:                                             ; preds = %1562
  %1565 = getelementptr inbounds %struct.value_range_d, ptr %8, i64 0, i32 1
  %1566 = load ptr, ptr %1565, align 8, !tbaa !25
  %1567 = getelementptr inbounds %struct.value_range_d, ptr %8, i64 0, i32 2
  %1568 = load ptr, ptr %1567, align 8, !tbaa !31
  %1569 = icmp eq ptr %1566, %1568
  br i1 %1569, label %1570, label %1579

1570:                                             ; preds = %1564
  %1571 = load i64, ptr %1566, align 8
  %1572 = and i64 %1571, 134283263
  %1573 = icmp eq i64 %1572, 23
  br i1 %1573, label %1574, label %1579

1574:                                             ; preds = %1570
  %1575 = tail call i32 @tree_int_cst_sgn(ptr noundef nonnull %1566) #18
  %1576 = icmp sgt i32 %1575, -1
  br i1 %1576, label %1577, label %1579

1577:                                             ; preds = %1574
  %1578 = tail call ptr @build_int_cst(ptr noundef nonnull %730, i64 noundef 0) #18
  br label %1672

1579:                                             ; preds = %1574, %1570, %1564, %1562
  %1580 = icmp eq i32 %891, 1
  br i1 %1580, label %1581, label %1596

1581:                                             ; preds = %1579
  %1582 = getelementptr inbounds %struct.value_range_d, ptr %9, i64 0, i32 1
  %1583 = load ptr, ptr %1582, align 8, !tbaa !25
  %1584 = getelementptr inbounds %struct.value_range_d, ptr %9, i64 0, i32 2
  %1585 = load ptr, ptr %1584, align 8, !tbaa !31
  %1586 = icmp eq ptr %1583, %1585
  br i1 %1586, label %1587, label %1596

1587:                                             ; preds = %1581
  %1588 = load i64, ptr %1583, align 8
  %1589 = and i64 %1588, 134283263
  %1590 = icmp eq i64 %1589, 23
  br i1 %1590, label %1591, label %1596

1591:                                             ; preds = %1587
  %1592 = tail call i32 @tree_int_cst_sgn(ptr noundef nonnull %1583) #18
  %1593 = icmp sgt i32 %1592, -1
  br i1 %1593, label %1594, label %1596

1594:                                             ; preds = %1591
  %1595 = tail call ptr @build_int_cst(ptr noundef nonnull %730, i64 noundef 0) #18
  br label %1672

1596:                                             ; preds = %1591, %1587, %1581, %1579
  store i32 3, ptr %0, align 8, !tbaa !23
  %1597 = getelementptr inbounds %struct.value_range_d, ptr %0, i64 0, i32 1
  %1598 = getelementptr inbounds %struct.value_range_d, ptr %0, i64 0, i32 3
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %1597, i8 0, i64 16, i1 false)
  %1599 = load ptr, ptr %1598, align 8, !tbaa !26
  %1600 = icmp eq ptr %1599, null
  br i1 %1600, label %1743, label %1601

1601:                                             ; preds = %1596
  tail call void @bitmap_clear(ptr noundef nonnull %1599) #18
  br label %1743

1602:                                             ; preds = %1215
  %1603 = icmp eq i32 %892, 1
  %1604 = icmp eq i32 %891, 1
  %1605 = select i1 %1603, i1 %1604, i1 false
  br i1 %1605, label %1606, label %1665

1606:                                             ; preds = %1602
  %1607 = getelementptr inbounds %struct.value_range_d, ptr %8, i64 0, i32 1
  %1608 = load ptr, ptr %1607, align 8, !tbaa !25
  %1609 = load i64, ptr %1608, align 8
  %1610 = and i64 %1609, 65535
  %1611 = icmp eq i64 %1610, 23
  br i1 %1611, label %1612, label %1665

1612:                                             ; preds = %1606
  %1613 = getelementptr inbounds %struct.value_range_d, ptr %9, i64 0, i32 1
  %1614 = load ptr, ptr %1613, align 8, !tbaa !25
  %1615 = load i64, ptr %1614, align 8
  %1616 = and i64 %1615, 65535
  %1617 = icmp eq i64 %1616, 23
  br i1 %1617, label %1618, label %1665

1618:                                             ; preds = %1612
  %1619 = getelementptr inbounds %struct.value_range_d, ptr %8, i64 0, i32 2
  %1620 = load ptr, ptr %1619, align 8, !tbaa !31
  %1621 = load i64, ptr %1620, align 8
  %1622 = and i64 %1621, 65535
  %1623 = icmp eq i64 %1622, 23
  br i1 %1623, label %1624, label %1665

1624:                                             ; preds = %1618
  %1625 = getelementptr inbounds %struct.value_range_d, ptr %9, i64 0, i32 2
  %1626 = load ptr, ptr %1625, align 8, !tbaa !31
  %1627 = load i64, ptr %1626, align 8
  %1628 = and i64 %1627, 65535
  %1629 = icmp eq i64 %1628, 23
  br i1 %1629, label %1630, label %1665

1630:                                             ; preds = %1624
  %1631 = tail call i32 @tree_int_cst_sgn(ptr noundef nonnull %1608) #18
  %1632 = icmp sgt i32 %1631, -1
  br i1 %1632, label %1633, label %1665

1633:                                             ; preds = %1630
  %1634 = tail call i32 @tree_int_cst_sgn(ptr noundef nonnull %1614) #18
  %1635 = icmp sgt i32 %1634, -1
  br i1 %1635, label %1636, label %1665

1636:                                             ; preds = %1633
  %1637 = tail call { i64, i64 } @tree_to_double_int(ptr noundef nonnull %1620) #18
  %1638 = extractvalue { i64, i64 } %1637, 0
  %1639 = extractvalue { i64, i64 } %1637, 1
  %1640 = tail call { i64, i64 } @tree_to_double_int(ptr noundef nonnull %1626) #18
  %1641 = extractvalue { i64, i64 } %1640, 0
  %1642 = extractvalue { i64, i64 } %1640, 1
  %1643 = or i64 %1641, %1638
  %1644 = or i64 %1642, %1639
  %1645 = icmp eq i64 %1644, 0
  br i1 %1645, label %1652, label %1646

1646:                                             ; preds = %1636
  %1647 = tail call i32 @floor_log2(i64 noundef %1644) #18
  %1648 = zext i32 %1647 to i64
  %1649 = shl nsw i64 -1, %1648
  %1650 = xor i64 %1649, -1
  %1651 = or i64 %1644, %1650
  br label %1660

1652:                                             ; preds = %1636
  %1653 = icmp eq i64 %1643, 0
  br i1 %1653, label %1660, label %1654

1654:                                             ; preds = %1652
  %1655 = tail call i32 @floor_log2(i64 noundef %1643) #18
  %1656 = zext i32 %1655 to i64
  %1657 = shl nsw i64 -1, %1656
  %1658 = xor i64 %1657, -1
  %1659 = or i64 %1643, %1658
  br label %1660

1660:                                             ; preds = %1654, %1652, %1646
  %1661 = phi i64 [ %1651, %1646 ], [ 0, %1654 ], [ 0, %1652 ]
  %1662 = phi i64 [ -1, %1646 ], [ %1659, %1654 ], [ 0, %1652 ]
  %1663 = tail call fastcc ptr @vrp_int_const_binop(i32 noundef 81, ptr noundef nonnull %1608, ptr noundef nonnull %1614)
  %1664 = tail call ptr @double_int_to_tree(ptr noundef nonnull %730, i64 %1662, i64 %1661) #18
  br label %1672

1665:                                             ; preds = %1633, %1630, %1624, %1618, %1612, %1606, %1602
  store i32 3, ptr %0, align 8, !tbaa !23
  %1666 = getelementptr inbounds %struct.value_range_d, ptr %0, i64 0, i32 1
  %1667 = getelementptr inbounds %struct.value_range_d, ptr %0, i64 0, i32 3
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %1666, i8 0, i64 16, i1 false)
  %1668 = load ptr, ptr %1667, align 8, !tbaa !26
  %1669 = icmp eq ptr %1668, null
  br i1 %1669, label %1743, label %1670

1670:                                             ; preds = %1665
  tail call void @bitmap_clear(ptr noundef nonnull %1668) #18
  br label %1743

1671:                                             ; preds = %1215
  tail call void @fancy_abort(ptr noundef nonnull @.str.27, i32 noundef 2578, ptr noundef nonnull @.str.28) #18
  br label %1677

1672:                                             ; preds = %1660, %1594, %1577, %1551, %1539, %1200, %1175, %1152, %1132, %1106
  %1673 = phi ptr [ %1107, %1106 ], [ %1133, %1132 ], [ %1162, %1152 ], [ %1214, %1200 ], [ %1185, %1175 ], [ %1540, %1539 ], [ %1561, %1551 ], [ %1583, %1594 ], [ %1566, %1577 ], [ %1664, %1660 ]
  %1674 = phi ptr [ %1107, %1106 ], [ %1133, %1132 ], [ %1157, %1152 ], [ %1207, %1200 ], [ %1180, %1175 ], [ %1541, %1539 ], [ %1556, %1551 ], [ %1595, %1594 ], [ %1578, %1577 ], [ %1663, %1660 ]
  %1675 = phi i32 [ 1, %1106 ], [ 1, %1132 ], [ %891, %1152 ], [ %892, %1200 ], [ %892, %1175 ], [ %1542, %1539 ], [ %892, %1551 ], [ 1, %1594 ], [ 1, %1577 ], [ 1, %1660 ]
  %1676 = icmp eq ptr %1674, null
  br i1 %1676, label %1704, label %1677

1677:                                             ; preds = %1672, %1671, %1197, %1193, %1190, %1186
  %1678 = phi i32 [ %1675, %1672 ], [ %892, %1671 ], [ %892, %1190 ], [ %892, %1197 ], [ %892, %1193 ], [ %892, %1186 ]
  %1679 = phi ptr [ %1674, %1672 ], [ undef, %1671 ], [ %1180, %1190 ], [ %1180, %1197 ], [ %1180, %1193 ], [ %1180, %1186 ]
  %1680 = phi ptr [ %1673, %1672 ], [ undef, %1671 ], [ %1185, %1190 ], [ %1185, %1197 ], [ %1185, %1193 ], [ %1185, %1186 ]
  %1681 = call zeroext i8 @is_gimple_min_invariant(ptr noundef nonnull %1679) #18
  %1682 = icmp eq i8 %1681, 0
  br i1 %1682, label %1704, label %1683

1683:                                             ; preds = %1677
  %1684 = load i64, ptr %1679, align 8
  %1685 = and i64 %1684, 134217728
  %1686 = icmp eq i64 %1685, 0
  br i1 %1686, label %1692, label %1687

1687:                                             ; preds = %1683
  %1688 = call fastcc zeroext i8 @is_overflow_infinity(ptr noundef nonnull %1679), !range !79
  %1689 = icmp eq i8 %1688, 0
  %1690 = icmp eq ptr %1680, null
  %1691 = select i1 %1689, i1 true, i1 %1690
  br i1 %1691, label %1704, label %1694

1692:                                             ; preds = %1683
  %1693 = icmp eq ptr %1680, null
  br i1 %1693, label %1704, label %1694

1694:                                             ; preds = %1692, %1687
  %1695 = call zeroext i8 @is_gimple_min_invariant(ptr noundef nonnull %1680) #18
  %1696 = icmp eq i8 %1695, 0
  br i1 %1696, label %1704, label %1697

1697:                                             ; preds = %1694
  %1698 = load i64, ptr %1680, align 8
  %1699 = and i64 %1698, 134217728
  %1700 = icmp eq i64 %1699, 0
  br i1 %1700, label %1710, label %1701

1701:                                             ; preds = %1697
  %1702 = call fastcc zeroext i8 @is_overflow_infinity(ptr noundef nonnull %1680), !range !79
  %1703 = icmp eq i8 %1702, 0
  br i1 %1703, label %1704, label %1710

1704:                                             ; preds = %1701, %1694, %1692, %1687, %1677, %1672
  store i32 3, ptr %0, align 8, !tbaa !23
  %1705 = getelementptr inbounds %struct.value_range_d, ptr %0, i64 0, i32 1
  %1706 = getelementptr inbounds %struct.value_range_d, ptr %0, i64 0, i32 3
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %1705, i8 0, i64 16, i1 false)
  %1707 = load ptr, ptr %1706, align 8, !tbaa !26
  %1708 = icmp eq ptr %1707, null
  br i1 %1708, label %1743, label %1709

1709:                                             ; preds = %1704
  call void @bitmap_clear(ptr noundef nonnull %1707) #18
  br label %1743

1710:                                             ; preds = %1701, %1697
  %1711 = call fastcc zeroext i8 @vrp_val_is_min(ptr noundef nonnull %1679), !range !79
  %1712 = icmp eq i8 %1711, 0
  br i1 %1712, label %1713, label %1716

1713:                                             ; preds = %1710
  %1714 = call fastcc zeroext i8 @is_overflow_infinity(ptr noundef nonnull %1679), !range !79
  %1715 = icmp eq i8 %1714, 0
  br i1 %1715, label %1728, label %1716

1716:                                             ; preds = %1713, %1710
  %1717 = call fastcc zeroext i8 @vrp_val_is_max(ptr noundef nonnull %1680), !range !79
  %1718 = icmp eq i8 %1717, 0
  br i1 %1718, label %1719, label %1722

1719:                                             ; preds = %1716
  %1720 = call fastcc zeroext i8 @is_overflow_infinity(ptr noundef nonnull %1680), !range !79
  %1721 = icmp eq i8 %1720, 0
  br i1 %1721, label %1728, label %1722

1722:                                             ; preds = %1719, %1716
  store i32 3, ptr %0, align 8, !tbaa !23
  %1723 = getelementptr inbounds %struct.value_range_d, ptr %0, i64 0, i32 1
  %1724 = getelementptr inbounds %struct.value_range_d, ptr %0, i64 0, i32 3
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %1723, i8 0, i64 16, i1 false)
  %1725 = load ptr, ptr %1724, align 8, !tbaa !26
  %1726 = icmp eq ptr %1725, null
  br i1 %1726, label %1743, label %1727

1727:                                             ; preds = %1722
  call void @bitmap_clear(ptr noundef nonnull %1725) #18
  br label %1743

1728:                                             ; preds = %1719, %1713
  %1729 = call fastcc i32 @compare_values(ptr noundef nonnull %1679, ptr noundef nonnull %1680)
  switch i32 %1729, label %1736 [
    i32 -2, label %1730
    i32 1, label %1730
  ]

1730:                                             ; preds = %1728, %1728
  store i32 3, ptr %0, align 8, !tbaa !23
  %1731 = getelementptr inbounds %struct.value_range_d, ptr %0, i64 0, i32 1
  %1732 = getelementptr inbounds %struct.value_range_d, ptr %0, i64 0, i32 3
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %1731, i8 0, i64 16, i1 false)
  %1733 = load ptr, ptr %1732, align 8, !tbaa !26
  %1734 = icmp eq ptr %1733, null
  br i1 %1734, label %1743, label %1735

1735:                                             ; preds = %1730
  call void @bitmap_clear(ptr noundef nonnull %1733) #18
  br label %1743

1736:                                             ; preds = %1728
  store i32 %1678, ptr %0, align 8, !tbaa !23
  %1737 = getelementptr inbounds %struct.value_range_d, ptr %0, i64 0, i32 1
  store ptr %1679, ptr %1737, align 8, !tbaa !25
  %1738 = getelementptr inbounds %struct.value_range_d, ptr %0, i64 0, i32 2
  store ptr %1680, ptr %1738, align 8, !tbaa !31
  %1739 = getelementptr inbounds %struct.value_range_d, ptr %0, i64 0, i32 3
  %1740 = load ptr, ptr %1739, align 8, !tbaa !26
  %1741 = icmp eq ptr %1740, null
  br i1 %1741, label %1743, label %1742

1742:                                             ; preds = %1736
  call void @bitmap_clear(ptr noundef nonnull %1740) #18
  br label %1743

1743:                                             ; preds = %838, %844, %845, %850, %896, %901, %922, %927, %967, %1010, %1017, %1018, %1019, %1024, %1052, %1071, %1072, %1077, %1163, %1169, %1174, %1538, %1545, %1550, %1596, %1601, %1665, %1670, %1704, %1709, %1722, %1727, %1730, %1735, %1736, %1742
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %9) #18
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %8) #18
  br label %2777

1744:                                             ; preds = %688
  %1745 = icmp eq i32 %691, 6
  br i1 %1745, label %1746, label %2485

1746:                                             ; preds = %1744
  %1747 = load i32, ptr %1, align 8
  %1748 = trunc i32 %1747 to i8
  switch i8 %1748, label %1751 [
    i8 6, label %1749
    i8 1, label %1749
    i8 8, label %1752
  ]

1749:                                             ; preds = %1746, %1746
  %1750 = lshr i32 %1747, 16
  br label %1752

1751:                                             ; preds = %1746
  tail call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1446, ptr noundef nonnull @.str.28) #18
  br label %1752

1752:                                             ; preds = %1751, %1749, %1746
  %1753 = phi i32 [ %1750, %1749 ], [ 0, %1751 ], [ 59, %1746 ]
  %1754 = zext i32 %1753 to i64
  %1755 = getelementptr inbounds [0 x i8], ptr @gimple_rhs_class_table, i64 0, i64 %1754
  %1756 = load i8, ptr %1755, align 1, !tbaa !16
  %1757 = icmp eq i8 %1756, 3
  br i1 %1757, label %1758, label %1778

1758:                                             ; preds = %1752
  %1759 = load i32, ptr %1, align 8
  %1760 = and i32 %1759, 255
  %1761 = add nsw i32 %1760, -1
  %1762 = icmp ult i32 %1761, 9
  tail call void @llvm.assume(i1 %1762)
  %1763 = zext i32 %1760 to i64
  %1764 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %1763
  %1765 = load i32, ptr %1764, align 4, !tbaa !16
  %1766 = zext i32 %1765 to i64
  %1767 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %1766
  %1768 = load i64, ptr %1767, align 8, !tbaa !36
  %1769 = icmp eq i64 %1768, 0
  br i1 %1769, label %1770, label %1771

1770:                                             ; preds = %1758
  tail call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1622, ptr noundef nonnull @.str.28) #18
  br label %1771

1771:                                             ; preds = %1770, %1758
  %1772 = getelementptr inbounds i8, ptr %1, i64 %1768
  %1773 = getelementptr inbounds ptr, ptr %1772, i64 1
  %1774 = load ptr, ptr %1773, align 8, !tbaa !5
  %1775 = load i64, ptr %1774, align 8
  %1776 = trunc i64 %1775 to i32
  %1777 = and i32 %1776, 65535
  br label %1778

1778:                                             ; preds = %1752, %1771
  %1779 = phi i32 [ %1777, %1771 ], [ %1753, %1752 ]
  %1780 = tail call fastcc ptr @gimple_expr_type(ptr noundef nonnull %1)
  %1781 = load i32, ptr %1, align 8
  %1782 = and i32 %1781, 255
  %1783 = add nsw i32 %1782, -10
  %1784 = icmp ult i32 %1783, -9
  br i1 %1784, label %1798, label %1785

1785:                                             ; preds = %1778
  %1786 = zext i32 %1782 to i64
  %1787 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %1786
  %1788 = load i32, ptr %1787, align 4, !tbaa !16
  %1789 = zext i32 %1788 to i64
  %1790 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %1789
  %1791 = load i64, ptr %1790, align 8, !tbaa !36
  %1792 = icmp eq i64 %1791, 0
  br i1 %1792, label %1793, label %1794

1793:                                             ; preds = %1785
  tail call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1622, ptr noundef nonnull @.str.28) #18
  br label %1794

1794:                                             ; preds = %1793, %1785
  %1795 = getelementptr inbounds i8, ptr %1, i64 %1791
  %1796 = getelementptr inbounds ptr, ptr %1795, i64 1
  %1797 = load ptr, ptr %1796, align 8, !tbaa !5
  br label %1798

1798:                                             ; preds = %1778, %1794
  %1799 = phi ptr [ %1797, %1794 ], [ null, %1778 ]
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %6) #18
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(32) %6, i8 0, i64 32, i1 false)
  switch i32 %1779, label %1895 [
    i32 124, label %1800
    i32 90, label %1800
    i32 78, label %1800
    i32 77, label %1800
  ]

1800:                                             ; preds = %1798, %1798, %1798, %1798
  %1801 = tail call zeroext i8 @is_gimple_min_invariant(ptr noundef %1799) #18
  %1802 = icmp eq i8 %1801, 0
  br i1 %1802, label %1803, label %1824

1803:                                             ; preds = %1800
  %1804 = load i64, ptr %1799, align 8
  %1805 = and i64 %1804, 65535
  %1806 = icmp eq i64 %1805, 141
  br i1 %1806, label %1807, label %1889

1807:                                             ; preds = %1803
  %1808 = tail call fastcc ptr @get_value_range(ptr noundef nonnull %1799)
  %1809 = load i32, ptr %1808, align 8, !tbaa !23
  %1810 = icmp eq i32 %1809, 1
  br i1 %1810, label %1811, label %1889

1811:                                             ; preds = %1807
  %1812 = getelementptr inbounds %struct.value_range_d, ptr %1808, i64 0, i32 1
  %1813 = load ptr, ptr %1812, align 8, !tbaa !25
  %1814 = getelementptr inbounds %struct.value_range_d, ptr %1808, i64 0, i32 2
  %1815 = load ptr, ptr %1814, align 8, !tbaa !31
  %1816 = tail call i32 @operand_equal_p(ptr noundef %1813, ptr noundef %1815, i32 noundef 0) #18
  %1817 = icmp eq i32 %1816, 0
  br i1 %1817, label %1889, label %1818

1818:                                             ; preds = %1811
  %1819 = load ptr, ptr %1812, align 8, !tbaa !25
  %1820 = tail call zeroext i8 @is_gimple_min_invariant(ptr noundef %1819) #18
  %1821 = icmp eq i8 %1820, 0
  br i1 %1821, label %1889, label %1822

1822:                                             ; preds = %1818
  %1823 = load ptr, ptr %1812, align 8, !tbaa !25
  br label %1824

1824:                                             ; preds = %1822, %1800
  %1825 = phi ptr [ %1823, %1822 ], [ %1799, %1800 ]
  %1826 = icmp eq ptr %1825, null
  br i1 %1826, label %1889, label %1827

1827:                                             ; preds = %1824
  %1828 = tail call ptr @fold_unary_loc(i32 noundef 0, i32 noundef %1779, ptr noundef %1780, ptr noundef nonnull %1825) #18
  %1829 = icmp eq ptr %1828, null
  br i1 %1829, label %1889, label %1830

1830:                                             ; preds = %1827
  %1831 = tail call zeroext i8 @is_gimple_min_invariant(ptr noundef nonnull %1828) #18
  %1832 = icmp eq i8 %1831, 0
  br i1 %1832, label %1889, label %1833

1833:                                             ; preds = %1830
  %1834 = getelementptr inbounds %struct.tree_common, ptr %1828, i64 0, i32 2
  %1835 = load ptr, ptr %1834, align 8, !tbaa !16
  %1836 = load i64, ptr %1835, align 8
  %1837 = trunc i64 %1836 to i32
  %1838 = and i32 %1837, 65535
  %1839 = add nsw i32 %1838, -6
  %1840 = icmp ult i32 %1839, 3
  br i1 %1840, label %1841, label %1882

1841:                                             ; preds = %1833
  %1842 = and i64 %1836, 2097152
  %1843 = icmp ne i64 %1842, 0
  %1844 = load i32, ptr @flag_wrapv, align 4
  %1845 = icmp ne i32 %1844, 0
  %1846 = select i1 %1843, i1 true, i1 %1845
  br i1 %1846, label %1882, label %1847

1847:                                             ; preds = %1841
  %1848 = load i64, ptr %1828, align 8
  %1849 = and i64 %1848, 65535
  %1850 = getelementptr inbounds [0 x i32], ptr @tree_code_type, i64 0, i64 %1849
  %1851 = load i32, ptr %1850, align 4, !tbaa !16
  %1852 = icmp ne i32 %1851, 1
  %1853 = and i64 %1848, 134217728
  %1854 = icmp eq i64 %1853, 0
  %1855 = or i1 %1852, %1854
  br i1 %1855, label %1882, label %1856

1856:                                             ; preds = %1847
  %1857 = getelementptr inbounds %struct.tree_type, ptr %1835, i64 0, i32 13
  %1858 = load ptr, ptr %1857, align 8, !tbaa !16
  %1859 = icmp eq ptr %1858, %1828
  br i1 %1859, label %1889, label %1860

1860:                                             ; preds = %1856
  %1861 = icmp eq ptr %1858, null
  br i1 %1861, label %1872, label %1862

1862:                                             ; preds = %1860
  %1863 = tail call i32 @operand_equal_p(ptr noundef nonnull %1828, ptr noundef nonnull %1858, i32 noundef 0) #18
  %1864 = icmp eq i32 %1863, 0
  br i1 %1864, label %1865, label %1889

1865:                                             ; preds = %1862
  %1866 = load ptr, ptr %1834, align 8, !tbaa !16
  %1867 = load i64, ptr %1866, align 8
  %1868 = trunc i64 %1867 to i32
  %1869 = and i32 %1868, 65535
  %1870 = add nsw i32 %1869, -6
  %1871 = icmp ult i32 %1870, 3
  br i1 %1871, label %1872, label %1882

1872:                                             ; preds = %1865, %1860
  %1873 = phi ptr [ %1866, %1865 ], [ %1835, %1860 ]
  %1874 = getelementptr inbounds %struct.tree_type, ptr %1873, i64 0, i32 14
  %1875 = load ptr, ptr %1874, align 8, !tbaa !16
  %1876 = icmp eq ptr %1875, %1828
  br i1 %1876, label %1889, label %1877

1877:                                             ; preds = %1872
  %1878 = icmp eq ptr %1875, null
  br i1 %1878, label %1882, label %1879

1879:                                             ; preds = %1877
  %1880 = tail call i32 @operand_equal_p(ptr noundef nonnull %1828, ptr noundef nonnull %1875, i32 noundef 0) #18
  %1881 = icmp eq i32 %1880, 0
  br i1 %1881, label %1882, label %1889

1882:                                             ; preds = %1879, %1877, %1865, %1847, %1841, %1833
  store i32 1, ptr %0, align 8, !tbaa !23
  %1883 = getelementptr inbounds %struct.value_range_d, ptr %0, i64 0, i32 1
  store ptr %1828, ptr %1883, align 8, !tbaa !25
  %1884 = getelementptr inbounds %struct.value_range_d, ptr %0, i64 0, i32 2
  store ptr %1828, ptr %1884, align 8, !tbaa !31
  %1885 = getelementptr inbounds %struct.value_range_d, ptr %0, i64 0, i32 3
  %1886 = load ptr, ptr %1885, align 8, !tbaa !26
  %1887 = icmp eq ptr %1886, null
  br i1 %1887, label %2484, label %1888

1888:                                             ; preds = %1882
  tail call void @bitmap_clear(ptr noundef nonnull %1886) #18
  br label %2484

1889:                                             ; preds = %1879, %1872, %1862, %1856, %1830, %1827, %1824, %1818, %1811, %1807, %1803
  store i32 3, ptr %0, align 8, !tbaa !23
  %1890 = getelementptr inbounds %struct.value_range_d, ptr %0, i64 0, i32 1
  %1891 = getelementptr inbounds %struct.value_range_d, ptr %0, i64 0, i32 3
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %1890, i8 0, i64 16, i1 false)
  %1892 = load ptr, ptr %1891, align 8, !tbaa !26
  %1893 = icmp eq ptr %1892, null
  br i1 %1893, label %2484, label %1894

1894:                                             ; preds = %1889
  tail call void @bitmap_clear(ptr noundef nonnull %1892) #18
  br label %2484

1895:                                             ; preds = %1798
  %1896 = load i64, ptr %1799, align 8
  %1897 = and i64 %1896, 65535
  %1898 = icmp eq i64 %1897, 141
  br i1 %1898, label %1912, label %1899

1899:                                             ; preds = %1895
  %1900 = tail call zeroext i8 @is_gimple_min_invariant(ptr noundef nonnull %1799) #18
  %1901 = icmp eq i8 %1900, 0
  br i1 %1901, label %1910, label %1902

1902:                                             ; preds = %1899
  %1903 = tail call zeroext i8 @is_gimple_min_invariant(ptr noundef nonnull %1799) #18
  %1904 = icmp eq i8 %1903, 0
  br i1 %1904, label %1905, label %1906

1905:                                             ; preds = %1902
  tail call void @fancy_abort(ptr noundef nonnull @.str.27, i32 noundef 515, ptr noundef nonnull @.str.28) #18
  br label %1906

1906:                                             ; preds = %1905, %1902
  %1907 = tail call fastcc ptr @avoid_overflow_infinity(ptr noundef nonnull %1799)
  store i32 1, ptr %6, align 8, !tbaa !23
  %1908 = getelementptr inbounds %struct.value_range_d, ptr %6, i64 0, i32 1
  store ptr %1907, ptr %1908, align 8, !tbaa !25
  %1909 = getelementptr inbounds %struct.value_range_d, ptr %6, i64 0, i32 2
  store ptr %1907, ptr %1909, align 8, !tbaa !31
  br label %1922

1910:                                             ; preds = %1899
  store i32 3, ptr %6, align 8, !tbaa !23
  %1911 = getelementptr inbounds %struct.value_range_d, ptr %6, i64 0, i32 1
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %1911, i8 0, i64 16, i1 false)
  br label %1922

1912:                                             ; preds = %1895
  %1913 = tail call fastcc ptr @get_value_range(ptr noundef nonnull %1799)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(32) %6, ptr noundef nonnull align 8 dereferenceable(32) %1913, i64 32, i1 false), !tbaa.struct !174
  %1914 = load i32, ptr %6, align 8
  %1915 = icmp eq i32 %1914, 0
  br i1 %1915, label %1916, label %1922

1916:                                             ; preds = %1912
  store i32 0, ptr %0, align 8, !tbaa !23
  %1917 = getelementptr inbounds %struct.value_range_d, ptr %0, i64 0, i32 1
  %1918 = getelementptr inbounds %struct.value_range_d, ptr %0, i64 0, i32 3
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %1917, i8 0, i64 16, i1 false)
  %1919 = load ptr, ptr %1918, align 8, !tbaa !26
  %1920 = icmp eq ptr %1919, null
  br i1 %1920, label %2484, label %1921

1921:                                             ; preds = %1916
  tail call void @bitmap_clear(ptr noundef nonnull %1919) #18
  br label %2484

1922:                                             ; preds = %1912, %1910, %1906
  %1923 = phi i32 [ %1914, %1912 ], [ 1, %1906 ], [ 3, %1910 ]
  %1924 = getelementptr inbounds %struct.tree_common, ptr %1799, i64 0, i32 2
  %1925 = load ptr, ptr %1924, align 8, !tbaa !16
  %1926 = load i64, ptr %1925, align 8
  %1927 = trunc i64 %1926 to i16
  switch i16 %1927, label %1940 [
    i16 6, label %1928
    i16 7, label %1928
    i16 8, label %1928
    i16 10, label %1928
    i16 12, label %1928
  ]

1928:                                             ; preds = %1922, %1922, %1922, %1922, %1922
  %1929 = icmp eq i32 %1923, 3
  br i1 %1929, label %1946, label %1930

1930:                                             ; preds = %1928
  %1931 = getelementptr inbounds %struct.value_range_d, ptr %6, i64 0, i32 1
  %1932 = load ptr, ptr %1931, align 8, !tbaa !25
  %1933 = tail call zeroext i8 @is_gimple_min_invariant(ptr noundef %1932) #18
  %1934 = icmp eq i8 %1933, 0
  br i1 %1934, label %1940, label %1935

1935:                                             ; preds = %1930
  %1936 = getelementptr inbounds %struct.value_range_d, ptr %6, i64 0, i32 2
  %1937 = load ptr, ptr %1936, align 8, !tbaa !31
  %1938 = tail call zeroext i8 @is_gimple_min_invariant(ptr noundef %1937) #18
  %1939 = icmp eq i8 %1938, 0
  br i1 %1939, label %1940, label %1946

1940:                                             ; preds = %1935, %1930, %1922
  store i32 3, ptr %0, align 8, !tbaa !23
  %1941 = getelementptr inbounds %struct.value_range_d, ptr %0, i64 0, i32 1
  %1942 = getelementptr inbounds %struct.value_range_d, ptr %0, i64 0, i32 3
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %1941, i8 0, i64 16, i1 false)
  %1943 = load ptr, ptr %1942, align 8, !tbaa !26
  %1944 = icmp eq ptr %1943, null
  br i1 %1944, label %2484, label %1945

1945:                                             ; preds = %1940
  tail call void @bitmap_clear(ptr noundef nonnull %1943) #18
  br label %2484

1946:                                             ; preds = %1935, %1928
  %1947 = load i64, ptr %1780, align 8
  %1948 = trunc i64 %1947 to i32
  %1949 = and i32 %1948, 65535
  %1950 = trunc i64 %1947 to i16
  switch i16 %1950, label %1951 [
    i16 10, label %1957
    i16 12, label %1957
  ]

1951:                                             ; preds = %1946
  %1952 = load ptr, ptr %1924, align 8, !tbaa !16
  %1953 = load i64, ptr %1952, align 8
  %1954 = trunc i64 %1953 to i32
  %1955 = and i32 %1954, 65535
  %1956 = trunc i64 %1953 to i16
  switch i16 %1956, label %1990 [
    i16 10, label %1957
    i16 12, label %1957
  ]

1957:                                             ; preds = %1951, %1951, %1946, %1946
  call void @llvm.lifetime.start.p0(i64 1, ptr nonnull %7) #18
  store i8 0, ptr %7, align 1, !tbaa !16
  %1958 = icmp eq i32 %1923, 2
  br i1 %1958, label %1959, label %1969

1959:                                             ; preds = %1957
  %1960 = getelementptr inbounds %struct.value_range_d, ptr %6, i64 0, i32 1
  %1961 = load ptr, ptr %1960, align 8, !tbaa !25
  %1962 = tail call i32 @integer_zerop(ptr noundef %1961) #18
  %1963 = icmp eq i32 %1962, 0
  br i1 %1963, label %1969, label %1964

1964:                                             ; preds = %1959
  %1965 = getelementptr inbounds %struct.value_range_d, ptr %6, i64 0, i32 2
  %1966 = load ptr, ptr %1965, align 8, !tbaa !31
  %1967 = tail call i32 @integer_zerop(ptr noundef %1966) #18
  %1968 = icmp eq i32 %1967, 0
  br i1 %1968, label %1969, label %1975

1969:                                             ; preds = %1964, %1959, %1957
  %1970 = call zeroext i8 @tree_unary_nonzero_warnv_p(i32 noundef %1779, ptr noundef nonnull %1780, ptr noundef nonnull %1799, ptr noundef nonnull %7) #18
  %1971 = icmp eq i8 %1970, 0
  %1972 = load i8, ptr %7, align 1
  %1973 = icmp ne i8 %1972, 0
  %1974 = select i1 %1971, i1 true, i1 %1973
  br i1 %1974, label %1979, label %1975

1975:                                             ; preds = %1969, %1964
  %1976 = call ptr @build_int_cst(ptr noundef nonnull %1780, i64 noundef 0) #18
  store i32 2, ptr %0, align 8, !tbaa !23
  %1977 = getelementptr inbounds %struct.value_range_d, ptr %0, i64 0, i32 1
  store ptr %1976, ptr %1977, align 8, !tbaa !25
  %1978 = getelementptr inbounds %struct.value_range_d, ptr %0, i64 0, i32 2
  store ptr %1976, ptr %1978, align 8, !tbaa !31
  br label %1989

1979:                                             ; preds = %1969
  %1980 = call fastcc zeroext i8 @range_is_null(ptr noundef nonnull %6), !range !79
  %1981 = icmp eq i8 %1980, 0
  br i1 %1981, label %1983, label %1982

1982:                                             ; preds = %1979
  call fastcc void @set_value_range_to_null(ptr noundef %0, ptr noundef nonnull %1780)
  br label %1989

1983:                                             ; preds = %1979
  store i32 3, ptr %0, align 8, !tbaa !23
  %1984 = getelementptr inbounds %struct.value_range_d, ptr %0, i64 0, i32 1
  %1985 = getelementptr inbounds %struct.value_range_d, ptr %0, i64 0, i32 3
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %1984, i8 0, i64 16, i1 false)
  %1986 = load ptr, ptr %1985, align 8, !tbaa !26
  %1987 = icmp eq ptr %1986, null
  br i1 %1987, label %1989, label %1988

1988:                                             ; preds = %1983
  call void @bitmap_clear(ptr noundef nonnull %1986) #18
  br label %1989

1989:                                             ; preds = %1988, %1983, %1982, %1975
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %7) #18
  br label %2484

1990:                                             ; preds = %1951
  switch i32 %1779, label %2071 [
    i32 116, label %1991
    i32 113, label %1991
  ]

1991:                                             ; preds = %1990, %1990
  %1992 = add nsw i32 %1949, -6
  %1993 = icmp ult i32 %1992, 3
  %1994 = add nsw i32 %1955, -6
  %1995 = icmp ult i32 %1994, 3
  %1996 = select i1 %1993, i1 %1995, i1 false
  br i1 %1996, label %1997, label %2071

1997:                                             ; preds = %1991
  br i1 %1929, label %1998, label %2012

1998:                                             ; preds = %1997
  %1999 = getelementptr inbounds %struct.tree_type, ptr %1952, i64 0, i32 6
  %2000 = load i32, ptr %1999, align 4
  %2001 = and i32 %2000, 1023
  %2002 = getelementptr inbounds %struct.tree_type, ptr %1780, i64 0, i32 6
  %2003 = load i32, ptr %2002, align 4
  %2004 = and i32 %2003, 1023
  %2005 = icmp ult i32 %2001, %2004
  br i1 %2005, label %2006, label %2065

2006:                                             ; preds = %1998
  %2007 = getelementptr inbounds %struct.tree_type, ptr %1952, i64 0, i32 13
  %2008 = load ptr, ptr %2007, align 8, !tbaa !16
  %2009 = getelementptr inbounds %struct.tree_type, ptr %1952, i64 0, i32 14
  %2010 = load ptr, ptr %2009, align 8, !tbaa !16
  %2011 = getelementptr inbounds %struct.value_range_d, ptr %6, i64 0, i32 2
  store ptr %2010, ptr %2011, align 8, !tbaa !31
  br label %2017

2012:                                             ; preds = %1997
  %2013 = icmp ult i32 %1923, 3
  br i1 %2013, label %2014, label %2065

2014:                                             ; preds = %2012
  %2015 = getelementptr inbounds %struct.value_range_d, ptr %6, i64 0, i32 1
  %2016 = load ptr, ptr %2015, align 8, !tbaa !25
  br label %2017

2017:                                             ; preds = %2014, %2006
  %2018 = phi ptr [ %2008, %2006 ], [ %2016, %2014 ]
  %2019 = phi i32 [ 1, %2006 ], [ %1923, %2014 ]
  %2020 = load i64, ptr %2018, align 8
  %2021 = and i64 %2020, 65535
  %2022 = icmp eq i64 %2021, 23
  br i1 %2022, label %2023, label %2065

2023:                                             ; preds = %2017
  %2024 = getelementptr inbounds %struct.value_range_d, ptr %6, i64 0, i32 2
  %2025 = load ptr, ptr %2024, align 8, !tbaa !31
  %2026 = load i64, ptr %2025, align 8
  %2027 = and i64 %2026, 65535
  %2028 = icmp eq i64 %2027, 23
  br i1 %2028, label %2029, label %2065

2029:                                             ; preds = %2023
  %2030 = tail call fastcc zeroext i8 @is_overflow_infinity(ptr noundef nonnull %2018), !range !79
  %2031 = icmp eq i8 %2030, 0
  br i1 %2031, label %2032, label %2065

2032:                                             ; preds = %2029
  %2033 = tail call fastcc zeroext i8 @is_overflow_infinity(ptr noundef nonnull %2025), !range !79
  %2034 = icmp eq i8 %2033, 0
  br i1 %2034, label %2035, label %2065

2035:                                             ; preds = %2032
  %2036 = getelementptr inbounds %struct.tree_type, ptr %1780, i64 0, i32 6
  %2037 = load i32, ptr %2036, align 4
  %2038 = and i32 %2037, 1023
  %2039 = getelementptr inbounds %struct.tree_type, ptr %1952, i64 0, i32 6
  %2040 = load i32, ptr %2039, align 4
  %2041 = and i32 %2040, 1023
  %2042 = icmp ult i32 %2038, %2041
  br i1 %2042, label %2043, label %2054

2043:                                             ; preds = %2035
  %2044 = icmp eq i32 %2019, 1
  br i1 %2044, label %2045, label %2065

2045:                                             ; preds = %2043
  %2046 = tail call ptr @int_const_binop(i32 noundef 64, ptr noundef nonnull %2025, ptr noundef nonnull %2018, i32 noundef 0) #18
  %2047 = load i32, ptr %2036, align 4
  %2048 = and i32 %2047, 1023
  %2049 = zext i32 %2048 to i64
  %2050 = tail call ptr @size_int_kind(i64 noundef %2049, i32 noundef 0) #18
  %2051 = tail call ptr @int_const_binop(i32 noundef 84, ptr noundef %2046, ptr noundef %2050, i32 noundef 0) #18
  %2052 = tail call i32 @integer_zerop(ptr noundef %2051) #18
  %2053 = icmp eq i32 %2052, 0
  br i1 %2053, label %2065, label %2054

2054:                                             ; preds = %2045, %2035
  %2055 = getelementptr inbounds %struct.tree_int_cst, ptr %2018, i64 0, i32 1
  %2056 = load i64, ptr %2055, align 8, !tbaa !16
  %2057 = getelementptr inbounds %struct.tree_int_cst, ptr %2018, i64 0, i32 1, i32 1
  %2058 = load i64, ptr %2057, align 8, !tbaa !16
  %2059 = tail call ptr @force_fit_type_double(ptr noundef nonnull %1780, i64 noundef %2056, i64 noundef %2058, i32 noundef 0, i8 noundef zeroext 0) #18
  %2060 = getelementptr inbounds %struct.tree_int_cst, ptr %2025, i64 0, i32 1
  %2061 = load i64, ptr %2060, align 8, !tbaa !16
  %2062 = getelementptr inbounds %struct.tree_int_cst, ptr %2025, i64 0, i32 1, i32 1
  %2063 = load i64, ptr %2062, align 8, !tbaa !16
  %2064 = tail call ptr @force_fit_type_double(ptr noundef nonnull %1780, i64 noundef %2061, i64 noundef %2063, i32 noundef 0, i8 noundef zeroext 0) #18
  tail call fastcc void @set_and_canonicalize_value_range(ptr noundef %0, i32 noundef %2019, ptr noundef %2059, ptr noundef %2064, ptr noundef null)
  br label %2484

2065:                                             ; preds = %2045, %2043, %2032, %2029, %2023, %2017, %2012, %1998
  store i32 3, ptr %0, align 8, !tbaa !23
  %2066 = getelementptr inbounds %struct.value_range_d, ptr %0, i64 0, i32 1
  %2067 = getelementptr inbounds %struct.value_range_d, ptr %0, i64 0, i32 3
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %2066, i8 0, i64 16, i1 false)
  %2068 = load ptr, ptr %2067, align 8, !tbaa !26
  %2069 = icmp eq ptr %2068, null
  br i1 %2069, label %2484, label %2070

2070:                                             ; preds = %2065
  tail call void @bitmap_clear(ptr noundef nonnull %2068) #18
  br label %2484

2071:                                             ; preds = %1991, %1990
  br i1 %1929, label %2072, label %2078

2072:                                             ; preds = %2071
  store i32 3, ptr %0, align 8, !tbaa !23
  %2073 = getelementptr inbounds %struct.value_range_d, ptr %0, i64 0, i32 1
  %2074 = getelementptr inbounds %struct.value_range_d, ptr %0, i64 0, i32 3
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %2073, i8 0, i64 16, i1 false)
  %2075 = load ptr, ptr %2074, align 8, !tbaa !26
  %2076 = icmp eq ptr %2075, null
  br i1 %2076, label %2484, label %2077

2077:                                             ; preds = %2072
  tail call void @bitmap_clear(ptr noundef nonnull %2075) #18
  br label %2484

2078:                                             ; preds = %2071
  switch i32 %1779, label %2374 [
    i32 79, label %2079
    i32 82, label %2197
  ]

2079:                                             ; preds = %2078
  %2080 = and i64 %1947, 2097152
  %2081 = icmp eq i64 %2080, 0
  br i1 %2081, label %2082, label %2177

2082:                                             ; preds = %2079
  %2083 = getelementptr inbounds %struct.value_range_d, ptr %6, i64 0, i32 2
  %2084 = load ptr, ptr %2083, align 8, !tbaa !31
  %2085 = tail call fastcc zeroext i8 @is_positive_overflow_infinity(ptr noundef %2084), !range !79
  %2086 = icmp eq i8 %2085, 0
  br i1 %2086, label %2089, label %2087

2087:                                             ; preds = %2082
  %2088 = tail call fastcc ptr @negative_overflow_infinity(ptr noundef nonnull %1780)
  br label %2133

2089:                                             ; preds = %2082
  %2090 = tail call fastcc zeroext i8 @is_negative_overflow_infinity(ptr noundef %2084), !range !79
  %2091 = icmp eq i8 %2090, 0
  br i1 %2091, label %2094, label %2092

2092:                                             ; preds = %2089
  %2093 = tail call fastcc ptr @positive_overflow_infinity(ptr noundef nonnull %1780)
  br label %2133

2094:                                             ; preds = %2089
  %2095 = tail call fastcc zeroext i8 @vrp_val_is_min(ptr noundef %2084), !range !79
  %2096 = icmp eq i8 %2095, 0
  br i1 %2096, label %2097, label %2099

2097:                                             ; preds = %2094
  %2098 = tail call ptr @fold_unary_to_constant(i32 noundef 79, ptr noundef nonnull %1780, ptr noundef %2084) #18
  br label %2133

2099:                                             ; preds = %2094
  %2100 = load i64, ptr %1780, align 8
  %2101 = trunc i64 %2100 to i32
  %2102 = and i32 %2101, 65535
  %2103 = add nsw i32 %2102, -6
  %2104 = icmp ult i32 %2103, 3
  br i1 %2104, label %2105, label %2130

2105:                                             ; preds = %2099
  %2106 = and i64 %2100, 2097152
  %2107 = icmp ne i64 %2106, 0
  %2108 = load i32, ptr @flag_wrapv, align 4
  %2109 = icmp ne i32 %2108, 0
  %2110 = select i1 %2107, i1 true, i1 %2109
  br i1 %2110, label %2130, label %2111

2111:                                             ; preds = %2105
  %2112 = tail call fastcc zeroext i8 @supports_overflow_infinity(ptr noundef nonnull %1780), !range !79
  %2113 = icmp eq i8 %2112, 0
  br i1 %2113, label %2124, label %2114

2114:                                             ; preds = %2111
  %2115 = getelementptr inbounds %struct.value_range_d, ptr %6, i64 0, i32 1
  %2116 = load ptr, ptr %2115, align 8, !tbaa !25
  %2117 = tail call fastcc zeroext i8 @is_overflow_infinity(ptr noundef %2116), !range !79
  %2118 = icmp eq i8 %2117, 0
  br i1 %2118, label %2119, label %2124

2119:                                             ; preds = %2114
  %2120 = tail call fastcc zeroext i8 @vrp_val_is_min(ptr noundef %2116), !range !79
  %2121 = icmp eq i8 %2120, 0
  br i1 %2121, label %2122, label %2124

2122:                                             ; preds = %2119
  %2123 = tail call fastcc ptr @positive_overflow_infinity(ptr noundef nonnull %1780)
  br label %2133

2124:                                             ; preds = %2119, %2114, %2111
  store i32 3, ptr %0, align 8, !tbaa !23
  %2125 = getelementptr inbounds %struct.value_range_d, ptr %0, i64 0, i32 1
  %2126 = getelementptr inbounds %struct.value_range_d, ptr %0, i64 0, i32 3
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %2125, i8 0, i64 16, i1 false)
  %2127 = load ptr, ptr %2126, align 8, !tbaa !26
  %2128 = icmp eq ptr %2127, null
  br i1 %2128, label %2484, label %2129

2129:                                             ; preds = %2124
  tail call void @bitmap_clear(ptr noundef nonnull %2127) #18
  br label %2484

2130:                                             ; preds = %2105, %2099
  %2131 = getelementptr inbounds %struct.tree_type, ptr %1780, i64 0, i32 13
  %2132 = load ptr, ptr %2131, align 8, !tbaa !16
  br label %2133

2133:                                             ; preds = %2130, %2122, %2097, %2092, %2087
  %2134 = phi ptr [ %2088, %2087 ], [ %2093, %2092 ], [ %2123, %2122 ], [ %2132, %2130 ], [ %2098, %2097 ]
  %2135 = getelementptr inbounds %struct.value_range_d, ptr %6, i64 0, i32 1
  %2136 = load ptr, ptr %2135, align 8, !tbaa !25
  %2137 = tail call fastcc zeroext i8 @is_positive_overflow_infinity(ptr noundef %2136), !range !79
  %2138 = icmp eq i8 %2137, 0
  br i1 %2138, label %2141, label %2139

2139:                                             ; preds = %2133
  %2140 = tail call fastcc ptr @negative_overflow_infinity(ptr noundef nonnull %1780)
  br label %2466

2141:                                             ; preds = %2133
  %2142 = tail call fastcc zeroext i8 @is_negative_overflow_infinity(ptr noundef %2136), !range !79
  %2143 = icmp eq i8 %2142, 0
  br i1 %2143, label %2146, label %2144

2144:                                             ; preds = %2141
  %2145 = tail call fastcc ptr @positive_overflow_infinity(ptr noundef nonnull %1780)
  br label %2466

2146:                                             ; preds = %2141
  %2147 = tail call fastcc zeroext i8 @vrp_val_is_min(ptr noundef %2136), !range !79
  %2148 = icmp eq i8 %2147, 0
  br i1 %2148, label %2149, label %2151

2149:                                             ; preds = %2146
  %2150 = tail call ptr @fold_unary_to_constant(i32 noundef 79, ptr noundef nonnull %1780, ptr noundef %2136) #18
  br label %2466

2151:                                             ; preds = %2146
  %2152 = load i64, ptr %1780, align 8
  %2153 = trunc i64 %2152 to i32
  %2154 = and i32 %2153, 65535
  %2155 = add nsw i32 %2154, -6
  %2156 = icmp ult i32 %2155, 3
  br i1 %2156, label %2157, label %2174

2157:                                             ; preds = %2151
  %2158 = and i64 %2152, 2097152
  %2159 = icmp ne i64 %2158, 0
  %2160 = load i32, ptr @flag_wrapv, align 4
  %2161 = icmp ne i32 %2160, 0
  %2162 = select i1 %2159, i1 true, i1 %2161
  br i1 %2162, label %2174, label %2163

2163:                                             ; preds = %2157
  %2164 = tail call fastcc zeroext i8 @supports_overflow_infinity(ptr noundef nonnull %1780), !range !79
  %2165 = icmp eq i8 %2164, 0
  br i1 %2165, label %2168, label %2166

2166:                                             ; preds = %2163
  %2167 = tail call fastcc ptr @positive_overflow_infinity(ptr noundef nonnull %1780)
  br label %2466

2168:                                             ; preds = %2163
  store i32 3, ptr %0, align 8, !tbaa !23
  %2169 = getelementptr inbounds %struct.value_range_d, ptr %0, i64 0, i32 1
  %2170 = getelementptr inbounds %struct.value_range_d, ptr %0, i64 0, i32 3
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %2169, i8 0, i64 16, i1 false)
  %2171 = load ptr, ptr %2170, align 8, !tbaa !26
  %2172 = icmp eq ptr %2171, null
  br i1 %2172, label %2484, label %2173

2173:                                             ; preds = %2168
  tail call void @bitmap_clear(ptr noundef nonnull %2171) #18
  br label %2484

2174:                                             ; preds = %2157, %2151
  %2175 = getelementptr inbounds %struct.tree_type, ptr %1780, i64 0, i32 13
  %2176 = load ptr, ptr %2175, align 8, !tbaa !16
  br label %2466

2177:                                             ; preds = %2079
  %2178 = call fastcc zeroext i8 @range_includes_zero_p(ptr noundef nonnull %6), !range !79
  %2179 = icmp eq i8 %2178, 0
  br i1 %2179, label %2180, label %2187

2180:                                             ; preds = %2177
  %2181 = getelementptr inbounds %struct.value_range_d, ptr %6, i64 0, i32 1
  %2182 = load ptr, ptr %2181, align 8, !tbaa !25
  %2183 = tail call ptr @fold_unary_to_constant(i32 noundef 79, ptr noundef nonnull %1780, ptr noundef %2182) #18
  %2184 = getelementptr inbounds %struct.value_range_d, ptr %6, i64 0, i32 2
  %2185 = load ptr, ptr %2184, align 8, !tbaa !31
  %2186 = tail call ptr @fold_unary_to_constant(i32 noundef 79, ptr noundef nonnull %1780, ptr noundef %2185) #18
  br label %2466

2187:                                             ; preds = %2177
  %2188 = call fastcc zeroext i8 @range_is_null(ptr noundef nonnull %6), !range !79
  %2189 = icmp eq i8 %2188, 0
  br i1 %2189, label %2191, label %2190

2190:                                             ; preds = %2187
  tail call fastcc void @set_value_range_to_null(ptr noundef %0, ptr noundef nonnull %1780)
  br label %2484

2191:                                             ; preds = %2187
  store i32 3, ptr %0, align 8, !tbaa !23
  %2192 = getelementptr inbounds %struct.value_range_d, ptr %0, i64 0, i32 1
  %2193 = getelementptr inbounds %struct.value_range_d, ptr %0, i64 0, i32 3
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %2192, i8 0, i64 16, i1 false)
  %2194 = load ptr, ptr %2193, align 8, !tbaa !26
  %2195 = icmp eq ptr %2194, null
  br i1 %2195, label %2484, label %2196

2196:                                             ; preds = %2191
  tail call void @bitmap_clear(ptr noundef nonnull %2194) #18
  br label %2484

2197:                                             ; preds = %2078
  %2198 = and i64 %1947, 2097152
  %2199 = icmp eq i64 %2198, 0
  br i1 %2199, label %2200, label %2374

2200:                                             ; preds = %2197
  %2201 = load i32, ptr @flag_wrapv, align 4
  %2202 = icmp eq i32 %2201, 0
  %2203 = load i32, ptr @flag_trapv, align 4
  %2204 = icmp eq i32 %2203, 0
  %2205 = select i1 %2202, i1 %2204, i1 false
  %2206 = load i32, ptr @flag_strict_overflow, align 4
  %2207 = icmp ne i32 %2206, 0
  %2208 = select i1 %2205, i1 %2207, i1 false
  br i1 %2208, label %2229, label %2209

2209:                                             ; preds = %2200
  switch i32 %1923, label %2229 [
    i32 1, label %2210
    i32 2, label %2215
  ]

2210:                                             ; preds = %2209
  %2211 = getelementptr inbounds %struct.value_range_d, ptr %6, i64 0, i32 1
  %2212 = load ptr, ptr %2211, align 8, !tbaa !25
  %2213 = tail call fastcc zeroext i8 @vrp_val_is_min(ptr noundef %2212), !range !79
  %2214 = icmp eq i8 %2213, 0
  br i1 %2214, label %2229, label %2223

2215:                                             ; preds = %2209
  %2216 = getelementptr inbounds %struct.value_range_d, ptr %6, i64 0, i32 1
  %2217 = load ptr, ptr %2216, align 8, !tbaa !25
  %2218 = tail call fastcc zeroext i8 @vrp_val_is_min(ptr noundef %2217), !range !79
  %2219 = icmp eq i8 %2218, 0
  br i1 %2219, label %2220, label %2229

2220:                                             ; preds = %2215
  %2221 = call fastcc zeroext i8 @range_includes_zero_p(ptr noundef nonnull %6), !range !79
  %2222 = icmp eq i8 %2221, 0
  br i1 %2222, label %2223, label %2229

2223:                                             ; preds = %2220, %2210
  store i32 3, ptr %0, align 8, !tbaa !23
  %2224 = getelementptr inbounds %struct.value_range_d, ptr %0, i64 0, i32 1
  %2225 = getelementptr inbounds %struct.value_range_d, ptr %0, i64 0, i32 3
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %2224, i8 0, i64 16, i1 false)
  %2226 = load ptr, ptr %2225, align 8, !tbaa !26
  %2227 = icmp eq ptr %2226, null
  br i1 %2227, label %2484, label %2228

2228:                                             ; preds = %2223
  tail call void @bitmap_clear(ptr noundef nonnull %2226) #18
  br label %2484

2229:                                             ; preds = %2220, %2215, %2210, %2209, %2200
  %2230 = getelementptr inbounds %struct.value_range_d, ptr %6, i64 0, i32 1
  %2231 = load ptr, ptr %2230, align 8, !tbaa !25
  %2232 = tail call fastcc zeroext i8 @is_overflow_infinity(ptr noundef %2231), !range !79
  %2233 = icmp eq i8 %2232, 0
  br i1 %2233, label %2236, label %2234

2234:                                             ; preds = %2229
  %2235 = tail call fastcc ptr @positive_overflow_infinity(ptr noundef nonnull %1780)
  br label %2267

2236:                                             ; preds = %2229
  %2237 = tail call fastcc zeroext i8 @vrp_val_is_min(ptr noundef %2231), !range !79
  %2238 = icmp eq i8 %2237, 0
  br i1 %2238, label %2239, label %2241

2239:                                             ; preds = %2236
  %2240 = tail call ptr @fold_unary_to_constant(i32 noundef 82, ptr noundef nonnull %1780, ptr noundef %2231) #18
  br label %2267

2241:                                             ; preds = %2236
  %2242 = load i64, ptr %1780, align 8
  %2243 = trunc i64 %2242 to i32
  %2244 = and i32 %2243, 65535
  %2245 = add nsw i32 %2244, -6
  %2246 = icmp ult i32 %2245, 3
  br i1 %2246, label %2247, label %2253

2247:                                             ; preds = %2241
  %2248 = and i64 %2242, 2097152
  %2249 = icmp ne i64 %2248, 0
  %2250 = load i32, ptr @flag_wrapv, align 4
  %2251 = icmp ne i32 %2250, 0
  %2252 = select i1 %2249, i1 true, i1 %2251
  br i1 %2252, label %2253, label %2256

2253:                                             ; preds = %2247, %2241
  %2254 = getelementptr inbounds %struct.tree_type, ptr %1780, i64 0, i32 14
  %2255 = load ptr, ptr %2254, align 8, !tbaa !16
  br label %2267

2256:                                             ; preds = %2247
  %2257 = tail call fastcc zeroext i8 @supports_overflow_infinity(ptr noundef nonnull %1780), !range !79
  %2258 = icmp eq i8 %2257, 0
  br i1 %2258, label %2261, label %2259

2259:                                             ; preds = %2256
  %2260 = tail call fastcc ptr @positive_overflow_infinity(ptr noundef nonnull %1780)
  br label %2267

2261:                                             ; preds = %2256
  store i32 3, ptr %0, align 8, !tbaa !23
  %2262 = getelementptr inbounds %struct.value_range_d, ptr %0, i64 0, i32 1
  %2263 = getelementptr inbounds %struct.value_range_d, ptr %0, i64 0, i32 3
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %2262, i8 0, i64 16, i1 false)
  %2264 = load ptr, ptr %2263, align 8, !tbaa !26
  %2265 = icmp eq ptr %2264, null
  br i1 %2265, label %2484, label %2266

2266:                                             ; preds = %2261
  tail call void @bitmap_clear(ptr noundef nonnull %2264) #18
  br label %2484

2267:                                             ; preds = %2259, %2253, %2239, %2234
  %2268 = phi ptr [ %2235, %2234 ], [ %2260, %2259 ], [ %2255, %2253 ], [ %2240, %2239 ]
  %2269 = getelementptr inbounds %struct.value_range_d, ptr %6, i64 0, i32 2
  %2270 = load ptr, ptr %2269, align 8, !tbaa !31
  %2271 = tail call fastcc zeroext i8 @is_overflow_infinity(ptr noundef %2270), !range !79
  %2272 = icmp eq i8 %2271, 0
  br i1 %2272, label %2275, label %2273

2273:                                             ; preds = %2267
  %2274 = tail call fastcc ptr @positive_overflow_infinity(ptr noundef nonnull %1780)
  br label %2309

2275:                                             ; preds = %2267
  %2276 = tail call fastcc zeroext i8 @vrp_val_is_min(ptr noundef %2270), !range !79
  %2277 = icmp eq i8 %2276, 0
  br i1 %2277, label %2278, label %2280

2278:                                             ; preds = %2275
  %2279 = tail call ptr @fold_unary_to_constant(i32 noundef 82, ptr noundef nonnull %1780, ptr noundef %2270) #18
  br label %2309

2280:                                             ; preds = %2275
  %2281 = load i64, ptr %1780, align 8
  %2282 = trunc i64 %2281 to i32
  %2283 = and i32 %2282, 65535
  %2284 = add nsw i32 %2283, -6
  %2285 = icmp ult i32 %2284, 3
  br i1 %2285, label %2286, label %2292

2286:                                             ; preds = %2280
  %2287 = and i64 %2281, 2097152
  %2288 = icmp ne i64 %2287, 0
  %2289 = load i32, ptr @flag_wrapv, align 4
  %2290 = icmp ne i32 %2289, 0
  %2291 = select i1 %2288, i1 true, i1 %2290
  br i1 %2291, label %2292, label %2295

2292:                                             ; preds = %2286, %2280
  %2293 = getelementptr inbounds %struct.tree_type, ptr %1780, i64 0, i32 14
  %2294 = load ptr, ptr %2293, align 8, !tbaa !16
  br label %2309

2295:                                             ; preds = %2286
  %2296 = tail call fastcc zeroext i8 @supports_overflow_infinity(ptr noundef nonnull %1780), !range !79
  %2297 = icmp eq i8 %2296, 0
  br i1 %2297, label %2303, label %2298

2298:                                             ; preds = %2295
  %2299 = tail call fastcc zeroext i8 @is_positive_overflow_infinity(ptr noundef %2268), !range !79
  %2300 = icmp eq i8 %2299, 0
  br i1 %2300, label %2301, label %2303

2301:                                             ; preds = %2298
  %2302 = tail call fastcc ptr @positive_overflow_infinity(ptr noundef nonnull %1780)
  br label %2309

2303:                                             ; preds = %2298, %2295
  store i32 3, ptr %0, align 8, !tbaa !23
  %2304 = getelementptr inbounds %struct.value_range_d, ptr %0, i64 0, i32 1
  %2305 = getelementptr inbounds %struct.value_range_d, ptr %0, i64 0, i32 3
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %2304, i8 0, i64 16, i1 false)
  %2306 = load ptr, ptr %2305, align 8, !tbaa !26
  %2307 = icmp eq ptr %2306, null
  br i1 %2307, label %2484, label %2308

2308:                                             ; preds = %2303
  tail call void @bitmap_clear(ptr noundef nonnull %2306) #18
  br label %2484

2309:                                             ; preds = %2301, %2292, %2278, %2273
  %2310 = phi ptr [ %2274, %2273 ], [ %2302, %2301 ], [ %2294, %2292 ], [ %2279, %2278 ]
  %2311 = tail call fastcc i32 @compare_values(ptr noundef %2268, ptr noundef %2310)
  %2312 = icmp eq i32 %1923, 2
  %2313 = call fastcc zeroext i8 @range_includes_zero_p(ptr noundef nonnull %6), !range !79
  %2314 = icmp eq i8 %2313, 0
  br i1 %2312, label %2315, label %2367

2315:                                             ; preds = %2309
  br i1 %2314, label %2340, label %2316

2316:                                             ; preds = %2315
  %2317 = icmp eq i32 %2311, 1
  %2318 = select i1 %2317, ptr %2310, ptr %2268
  %2319 = load i64, ptr %1780, align 8
  %2320 = and i64 %2319, 2097152
  %2321 = icmp ne i64 %2320, 0
  %2322 = load i32, ptr @flag_wrapv, align 4
  %2323 = icmp ne i32 %2322, 0
  %2324 = select i1 %2321, i1 true, i1 %2323
  br i1 %2324, label %2325, label %2332

2325:                                             ; preds = %2316
  %2326 = getelementptr inbounds %struct.tree_type, ptr %1780, i64 0, i32 13
  %2327 = load ptr, ptr %2326, align 8, !tbaa !16
  %2328 = icmp eq ptr %2231, %2327
  br i1 %2328, label %2466, label %2329

2329:                                             ; preds = %2325
  %2330 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 14), align 16, !tbaa !5
  %2331 = tail call ptr @int_const_binop(i32 noundef 63, ptr noundef %2327, ptr noundef %2330, i32 noundef 0) #18
  br label %2466

2332:                                             ; preds = %2316
  %2333 = call fastcc zeroext i8 @overflow_infinity_range_p(ptr noundef nonnull %6), !range !79
  %2334 = icmp eq i8 %2333, 0
  br i1 %2334, label %2337, label %2335

2335:                                             ; preds = %2332
  %2336 = tail call fastcc ptr @negative_overflow_infinity(ptr noundef nonnull %1780)
  br label %2466

2337:                                             ; preds = %2332
  %2338 = getelementptr inbounds %struct.tree_type, ptr %1780, i64 0, i32 13
  %2339 = load ptr, ptr %2338, align 8, !tbaa !16
  br label %2466

2340:                                             ; preds = %2315
  %2341 = tail call ptr @build_int_cst(ptr noundef nonnull %1780, i64 noundef 0) #18
  %2342 = load i64, ptr %1780, align 8
  %2343 = trunc i64 %2342 to i32
  %2344 = and i32 %2343, 65535
  %2345 = add nsw i32 %2344, -6
  %2346 = icmp ult i32 %2345, 3
  br i1 %2346, label %2347, label %2364

2347:                                             ; preds = %2340
  %2348 = and i64 %2342, 2097152
  %2349 = icmp ne i64 %2348, 0
  %2350 = load i32, ptr @flag_wrapv, align 4
  %2351 = icmp ne i32 %2350, 0
  %2352 = select i1 %2349, i1 true, i1 %2351
  br i1 %2352, label %2364, label %2353

2353:                                             ; preds = %2347
  %2354 = tail call fastcc zeroext i8 @supports_overflow_infinity(ptr noundef nonnull %1780), !range !79
  %2355 = icmp eq i8 %2354, 0
  br i1 %2355, label %2358, label %2356

2356:                                             ; preds = %2353
  %2357 = tail call fastcc ptr @positive_overflow_infinity(ptr noundef nonnull %1780)
  br label %2466

2358:                                             ; preds = %2353
  store i32 3, ptr %0, align 8, !tbaa !23
  %2359 = getelementptr inbounds %struct.value_range_d, ptr %0, i64 0, i32 1
  %2360 = getelementptr inbounds %struct.value_range_d, ptr %0, i64 0, i32 3
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %2359, i8 0, i64 16, i1 false)
  %2361 = load ptr, ptr %2360, align 8, !tbaa !26
  %2362 = icmp eq ptr %2361, null
  br i1 %2362, label %2484, label %2363

2363:                                             ; preds = %2358
  tail call void @bitmap_clear(ptr noundef nonnull %2361) #18
  br label %2484

2364:                                             ; preds = %2347, %2340
  %2365 = getelementptr inbounds %struct.tree_type, ptr %1780, i64 0, i32 14
  %2366 = load ptr, ptr %2365, align 8, !tbaa !16
  br label %2466

2367:                                             ; preds = %2309
  %2368 = icmp eq i32 %2311, 1
  %2369 = select i1 %2368, ptr %2268, ptr %2310
  br i1 %2314, label %2372, label %2370

2370:                                             ; preds = %2367
  %2371 = tail call ptr @build_int_cst(ptr noundef nonnull %1780, i64 noundef 0) #18
  br label %2466

2372:                                             ; preds = %2367
  %2373 = select i1 %2368, ptr %2310, ptr %2268
  br label %2466

2374:                                             ; preds = %2197, %2078
  %2375 = getelementptr inbounds %struct.value_range_d, ptr %6, i64 0, i32 1
  %2376 = load ptr, ptr %2375, align 8, !tbaa !25
  %2377 = tail call ptr @fold_unary_to_constant(i32 noundef %1779, ptr noundef nonnull %1780, ptr noundef %2376) #18
  %2378 = getelementptr inbounds %struct.value_range_d, ptr %6, i64 0, i32 2
  %2379 = load ptr, ptr %2378, align 8, !tbaa !31
  %2380 = tail call ptr @fold_unary_to_constant(i32 noundef %1779, ptr noundef nonnull %1780, ptr noundef %2379) #18
  %2381 = load i64, ptr %1780, align 8
  %2382 = trunc i64 %2381 to i32
  %2383 = and i32 %2382, 65535
  %2384 = add nsw i32 %2383, -6
  %2385 = icmp ult i32 %2384, 3
  br i1 %2385, label %2386, label %2466

2386:                                             ; preds = %2374
  %2387 = and i64 %2381, 2097152
  %2388 = icmp ne i64 %2387, 0
  %2389 = load i32, ptr @flag_wrapv, align 4
  %2390 = icmp ne i32 %2389, 0
  %2391 = select i1 %2388, i1 true, i1 %2390
  br i1 %2391, label %2466, label %2392

2392:                                             ; preds = %2386
  %2393 = icmp eq i32 %1779, 82
  br i1 %2393, label %2394, label %2395

2394:                                             ; preds = %2392
  tail call void @fancy_abort(ptr noundef nonnull @.str.27, i32 noundef 2959, ptr noundef nonnull @.str.28) #18
  br label %2395

2395:                                             ; preds = %2394, %2392
  %2396 = tail call fastcc zeroext i8 @is_overflow_infinity(ptr noundef %2376), !range !79
  %2397 = icmp eq i8 %2396, 0
  br i1 %2397, label %2398, label %2402

2398:                                             ; preds = %2395
  %2399 = load i64, ptr %2377, align 8
  %2400 = and i64 %2399, 134217728
  %2401 = icmp eq i64 %2400, 0
  br i1 %2401, label %2415, label %2402

2402:                                             ; preds = %2398, %2395
  %2403 = tail call fastcc zeroext i8 @is_overflow_infinity(ptr noundef %2379), !range !79
  %2404 = icmp eq i8 %2403, 0
  br i1 %2404, label %2405, label %2409

2405:                                             ; preds = %2402
  %2406 = load i64, ptr %2380, align 8
  %2407 = and i64 %2406, 134217728
  %2408 = icmp eq i64 %2407, 0
  br i1 %2408, label %2415, label %2409

2409:                                             ; preds = %2405, %2402
  store i32 3, ptr %0, align 8, !tbaa !23
  %2410 = getelementptr inbounds %struct.value_range_d, ptr %0, i64 0, i32 1
  %2411 = getelementptr inbounds %struct.value_range_d, ptr %0, i64 0, i32 3
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %2410, i8 0, i64 16, i1 false)
  %2412 = load ptr, ptr %2411, align 8, !tbaa !26
  %2413 = icmp eq ptr %2412, null
  br i1 %2413, label %2484, label %2414

2414:                                             ; preds = %2409
  tail call void @bitmap_clear(ptr noundef nonnull %2412) #18
  br label %2484

2415:                                             ; preds = %2405, %2398
  %2416 = tail call fastcc zeroext i8 @is_overflow_infinity(ptr noundef %2376), !range !79
  %2417 = icmp eq i8 %2416, 0
  br i1 %2417, label %2418, label %2440

2418:                                             ; preds = %2415
  %2419 = load i64, ptr %2377, align 8
  %2420 = and i64 %2419, 134217728
  %2421 = icmp eq i64 %2420, 0
  br i1 %2421, label %2440, label %2422

2422:                                             ; preds = %2418
  %2423 = tail call fastcc zeroext i8 @supports_overflow_infinity(ptr noundef nonnull %1780), !range !79
  %2424 = icmp eq i8 %2423, 0
  br i1 %2424, label %2434, label %2425

2425:                                             ; preds = %2422
  %2426 = tail call i32 @tree_int_cst_sgn(ptr noundef nonnull %2377) #18
  %2427 = icmp sgt i32 %2426, -1
  %2428 = getelementptr inbounds %struct.tree_common, ptr %2377, i64 0, i32 2
  %2429 = load ptr, ptr %2428, align 8, !tbaa !16
  br i1 %2427, label %2430, label %2432

2430:                                             ; preds = %2425
  %2431 = tail call fastcc ptr @positive_overflow_infinity(ptr noundef %2429)
  br label %2440

2432:                                             ; preds = %2425
  %2433 = tail call fastcc ptr @negative_overflow_infinity(ptr noundef %2429)
  br label %2440

2434:                                             ; preds = %2422
  store i32 3, ptr %0, align 8, !tbaa !23
  %2435 = getelementptr inbounds %struct.value_range_d, ptr %0, i64 0, i32 1
  %2436 = getelementptr inbounds %struct.value_range_d, ptr %0, i64 0, i32 3
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %2435, i8 0, i64 16, i1 false)
  %2437 = load ptr, ptr %2436, align 8, !tbaa !26
  %2438 = icmp eq ptr %2437, null
  br i1 %2438, label %2484, label %2439

2439:                                             ; preds = %2434
  tail call void @bitmap_clear(ptr noundef nonnull %2437) #18
  br label %2484

2440:                                             ; preds = %2432, %2430, %2418, %2415
  %2441 = phi ptr [ %2377, %2418 ], [ %2431, %2430 ], [ %2433, %2432 ], [ %2376, %2415 ]
  %2442 = tail call fastcc zeroext i8 @is_overflow_infinity(ptr noundef %2379), !range !79
  %2443 = icmp eq i8 %2442, 0
  br i1 %2443, label %2444, label %2466

2444:                                             ; preds = %2440
  %2445 = load i64, ptr %2380, align 8
  %2446 = and i64 %2445, 134217728
  %2447 = icmp eq i64 %2446, 0
  br i1 %2447, label %2466, label %2448

2448:                                             ; preds = %2444
  %2449 = tail call fastcc zeroext i8 @supports_overflow_infinity(ptr noundef nonnull %1780), !range !79
  %2450 = icmp eq i8 %2449, 0
  br i1 %2450, label %2460, label %2451

2451:                                             ; preds = %2448
  %2452 = tail call i32 @tree_int_cst_sgn(ptr noundef nonnull %2380) #18
  %2453 = icmp sgt i32 %2452, -1
  %2454 = getelementptr inbounds %struct.tree_common, ptr %2380, i64 0, i32 2
  %2455 = load ptr, ptr %2454, align 8, !tbaa !16
  br i1 %2453, label %2456, label %2458

2456:                                             ; preds = %2451
  %2457 = tail call fastcc ptr @positive_overflow_infinity(ptr noundef %2455)
  br label %2466

2458:                                             ; preds = %2451
  %2459 = tail call fastcc ptr @negative_overflow_infinity(ptr noundef %2455)
  br label %2466

2460:                                             ; preds = %2448
  store i32 3, ptr %0, align 8, !tbaa !23
  %2461 = getelementptr inbounds %struct.value_range_d, ptr %0, i64 0, i32 1
  %2462 = getelementptr inbounds %struct.value_range_d, ptr %0, i64 0, i32 3
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %2461, i8 0, i64 16, i1 false)
  %2463 = load ptr, ptr %2462, align 8, !tbaa !26
  %2464 = icmp eq ptr %2463, null
  br i1 %2464, label %2484, label %2465

2465:                                             ; preds = %2460
  tail call void @bitmap_clear(ptr noundef nonnull %2463) #18
  br label %2484

2466:                                             ; preds = %2458, %2456, %2444, %2440, %2386, %2374, %2372, %2370, %2364, %2356, %2337, %2335, %2329, %2325, %2180, %2174, %2166, %2149, %2144, %2139
  %2467 = phi i32 [ %1923, %2180 ], [ %1923, %2444 ], [ %1923, %2386 ], [ 2, %2335 ], [ 2, %2337 ], [ 1, %2356 ], [ 1, %2364 ], [ %1923, %2370 ], [ %1923, %2139 ], [ %1923, %2144 ], [ %1923, %2166 ], [ %1923, %2174 ], [ %1923, %2149 ], [ 2, %2325 ], [ 2, %2329 ], [ %1923, %2372 ], [ %1923, %2456 ], [ %1923, %2458 ], [ %1923, %2440 ], [ %1923, %2374 ]
  %2468 = phi ptr [ %2183, %2180 ], [ %2380, %2444 ], [ %2380, %2386 ], [ %2318, %2335 ], [ %2318, %2337 ], [ %2357, %2356 ], [ %2366, %2364 ], [ %2369, %2370 ], [ %2140, %2139 ], [ %2145, %2144 ], [ %2167, %2166 ], [ %2176, %2174 ], [ %2150, %2149 ], [ %2318, %2325 ], [ %2318, %2329 ], [ %2369, %2372 ], [ %2457, %2456 ], [ %2459, %2458 ], [ %2379, %2440 ], [ %2380, %2374 ]
  %2469 = phi ptr [ %2186, %2180 ], [ %2441, %2444 ], [ %2377, %2386 ], [ %2336, %2335 ], [ %2339, %2337 ], [ %2341, %2356 ], [ %2341, %2364 ], [ %2371, %2370 ], [ %2134, %2139 ], [ %2134, %2144 ], [ %2134, %2166 ], [ %2134, %2174 ], [ %2134, %2149 ], [ %2231, %2325 ], [ %2331, %2329 ], [ %2373, %2372 ], [ %2441, %2456 ], [ %2441, %2458 ], [ %2441, %2440 ], [ %2377, %2374 ]
  %2470 = tail call fastcc i32 @compare_values(ptr noundef %2469, ptr noundef %2468)
  switch i32 %2470, label %2477 [
    i32 -2, label %2471
    i32 1, label %2471
  ]

2471:                                             ; preds = %2466, %2466
  store i32 3, ptr %0, align 8, !tbaa !23
  %2472 = getelementptr inbounds %struct.value_range_d, ptr %0, i64 0, i32 1
  %2473 = getelementptr inbounds %struct.value_range_d, ptr %0, i64 0, i32 3
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %2472, i8 0, i64 16, i1 false)
  %2474 = load ptr, ptr %2473, align 8, !tbaa !26
  %2475 = icmp eq ptr %2474, null
  br i1 %2475, label %2484, label %2476

2476:                                             ; preds = %2471
  tail call void @bitmap_clear(ptr noundef nonnull %2474) #18
  br label %2484

2477:                                             ; preds = %2466
  store i32 %2467, ptr %0, align 8, !tbaa !23
  %2478 = getelementptr inbounds %struct.value_range_d, ptr %0, i64 0, i32 1
  store ptr %2469, ptr %2478, align 8, !tbaa !25
  %2479 = getelementptr inbounds %struct.value_range_d, ptr %0, i64 0, i32 2
  store ptr %2468, ptr %2479, align 8, !tbaa !31
  %2480 = getelementptr inbounds %struct.value_range_d, ptr %0, i64 0, i32 3
  %2481 = load ptr, ptr %2480, align 8, !tbaa !26
  %2482 = icmp eq ptr %2481, null
  br i1 %2482, label %2484, label %2483

2483:                                             ; preds = %2477
  tail call void @bitmap_clear(ptr noundef nonnull %2481) #18
  br label %2484

2484:                                             ; preds = %1882, %1888, %1889, %1894, %1916, %1921, %1940, %1945, %1989, %2054, %2065, %2070, %2072, %2077, %2124, %2129, %2168, %2173, %2190, %2191, %2196, %2223, %2228, %2261, %2266, %2303, %2308, %2358, %2363, %2409, %2414, %2434, %2439, %2460, %2465, %2471, %2476, %2477, %2483
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %6) #18
  br label %2777

2485:                                             ; preds = %1744
  %2486 = icmp eq i32 %43, 56
  br i1 %2486, label %2487, label %2572

2487:                                             ; preds = %2485
  %2488 = load i32, ptr %1, align 8
  %2489 = and i32 %2488, 255
  %2490 = add nsw i32 %2489, -10
  %2491 = icmp ult i32 %2490, -9
  br i1 %2491, label %2505, label %2492

2492:                                             ; preds = %2487
  %2493 = zext i32 %2489 to i64
  %2494 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %2493
  %2495 = load i32, ptr %2494, align 4, !tbaa !16
  %2496 = zext i32 %2495 to i64
  %2497 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %2496
  %2498 = load i64, ptr %2497, align 8, !tbaa !36
  %2499 = icmp eq i64 %2498, 0
  br i1 %2499, label %2500, label %2501

2500:                                             ; preds = %2492
  tail call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1622, ptr noundef nonnull @.str.28) #18
  br label %2501

2501:                                             ; preds = %2500, %2492
  %2502 = getelementptr inbounds i8, ptr %1, i64 %2498
  %2503 = getelementptr inbounds ptr, ptr %2502, i64 1
  %2504 = load ptr, ptr %2503, align 8, !tbaa !5
  br label %2505

2505:                                             ; preds = %2487, %2501
  %2506 = phi ptr [ %2504, %2501 ], [ null, %2487 ]
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %4) #18
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(32) %4, i8 0, i64 32, i1 false)
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %5) #18
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(32) %5, i8 0, i64 32, i1 false)
  %2507 = getelementptr inbounds %struct.tree_exp, ptr %2506, i64 1
  %2508 = load ptr, ptr %2507, align 8, !tbaa !16
  %2509 = load i64, ptr %2508, align 8
  %2510 = and i64 %2509, 65535
  %2511 = icmp eq i64 %2510, 141
  br i1 %2511, label %2512, label %2514

2512:                                             ; preds = %2505
  %2513 = tail call fastcc ptr @get_value_range(ptr noundef nonnull %2508)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(32) %4, ptr noundef nonnull align 8 dereferenceable(32) %2513, i64 32, i1 false), !tbaa.struct !174
  br label %2527

2514:                                             ; preds = %2505
  %2515 = tail call zeroext i8 @is_gimple_min_invariant(ptr noundef nonnull %2508) #18
  %2516 = icmp eq i8 %2515, 0
  br i1 %2516, label %2525, label %2517

2517:                                             ; preds = %2514
  %2518 = tail call zeroext i8 @is_gimple_min_invariant(ptr noundef nonnull %2508) #18
  %2519 = icmp eq i8 %2518, 0
  br i1 %2519, label %2520, label %2521

2520:                                             ; preds = %2517
  tail call void @fancy_abort(ptr noundef nonnull @.str.27, i32 noundef 515, ptr noundef nonnull @.str.28) #18
  br label %2521

2521:                                             ; preds = %2520, %2517
  %2522 = tail call fastcc ptr @avoid_overflow_infinity(ptr noundef nonnull %2508)
  store i32 1, ptr %4, align 8, !tbaa !23
  %2523 = getelementptr inbounds %struct.value_range_d, ptr %4, i64 0, i32 1
  store ptr %2522, ptr %2523, align 8, !tbaa !25
  %2524 = getelementptr inbounds %struct.value_range_d, ptr %4, i64 0, i32 2
  store ptr %2522, ptr %2524, align 8, !tbaa !31
  br label %2527

2525:                                             ; preds = %2514
  store i32 3, ptr %4, align 8, !tbaa !23
  %2526 = getelementptr inbounds %struct.value_range_d, ptr %4, i64 0, i32 1
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %2526, i8 0, i64 16, i1 false)
  br label %2527

2527:                                             ; preds = %2525, %2521, %2512
  %2528 = getelementptr inbounds %struct.tree_exp, ptr %2506, i64 1, i32 0, i32 1
  %2529 = load ptr, ptr %2528, align 8, !tbaa !16
  %2530 = load i64, ptr %2529, align 8
  %2531 = and i64 %2530, 65535
  %2532 = icmp eq i64 %2531, 141
  br i1 %2532, label %2533, label %2535

2533:                                             ; preds = %2527
  %2534 = tail call fastcc ptr @get_value_range(ptr noundef nonnull %2529)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(32) %5, ptr noundef nonnull align 8 dereferenceable(32) %2534, i64 32, i1 false), !tbaa.struct !174
  br label %2548

2535:                                             ; preds = %2527
  %2536 = tail call zeroext i8 @is_gimple_min_invariant(ptr noundef nonnull %2529) #18
  %2537 = icmp eq i8 %2536, 0
  br i1 %2537, label %2546, label %2538

2538:                                             ; preds = %2535
  %2539 = tail call zeroext i8 @is_gimple_min_invariant(ptr noundef nonnull %2529) #18
  %2540 = icmp eq i8 %2539, 0
  br i1 %2540, label %2541, label %2542

2541:                                             ; preds = %2538
  tail call void @fancy_abort(ptr noundef nonnull @.str.27, i32 noundef 515, ptr noundef nonnull @.str.28) #18
  br label %2542

2542:                                             ; preds = %2541, %2538
  %2543 = tail call fastcc ptr @avoid_overflow_infinity(ptr noundef nonnull %2529)
  store i32 1, ptr %5, align 8, !tbaa !23
  %2544 = getelementptr inbounds %struct.value_range_d, ptr %5, i64 0, i32 1
  store ptr %2543, ptr %2544, align 8, !tbaa !25
  %2545 = getelementptr inbounds %struct.value_range_d, ptr %5, i64 0, i32 2
  store ptr %2543, ptr %2545, align 8, !tbaa !31
  br label %2548

2546:                                             ; preds = %2535
  store i32 3, ptr %5, align 8, !tbaa !23
  %2547 = getelementptr inbounds %struct.value_range_d, ptr %5, i64 0, i32 1
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %2547, i8 0, i64 16, i1 false)
  br label %2548

2548:                                             ; preds = %2546, %2542, %2533
  call fastcc void @vrp_meet(ptr noundef nonnull %4, ptr noundef nonnull %5)
  %2549 = load i32, ptr %4, align 8, !tbaa !23
  %2550 = getelementptr inbounds %struct.value_range_d, ptr %4, i64 0, i32 1
  %2551 = getelementptr inbounds %struct.value_range_d, ptr %4, i64 0, i32 3
  %2552 = load ptr, ptr %2551, align 8, !tbaa !26
  store i32 %2549, ptr %0, align 8, !tbaa !23
  %2553 = getelementptr inbounds %struct.value_range_d, ptr %0, i64 0, i32 1
  %2554 = load <2 x ptr>, ptr %2550, align 8, !tbaa !5
  store <2 x ptr> %2554, ptr %2553, align 8, !tbaa !5
  %2555 = getelementptr inbounds %struct.value_range_d, ptr %0, i64 0, i32 3
  %2556 = load ptr, ptr %2555, align 8, !tbaa !26
  %2557 = icmp eq ptr %2556, null
  %2558 = icmp ne ptr %2552, null
  %2559 = and i1 %2558, %2557
  br i1 %2559, label %2560, label %2562

2560:                                             ; preds = %2548
  %2561 = tail call ptr @bitmap_obstack_alloc_stat(ptr noundef null) #18
  store ptr %2561, ptr %2555, align 8, !tbaa !26
  br label %2562

2562:                                             ; preds = %2560, %2548
  %2563 = phi ptr [ %2561, %2560 ], [ %2556, %2548 ]
  %2564 = icmp eq ptr %2563, %2552
  br i1 %2564, label %2571, label %2565

2565:                                             ; preds = %2562
  br i1 %2558, label %2566, label %2570

2566:                                             ; preds = %2565
  %2567 = load ptr, ptr %2552, align 8, !tbaa !32
  %2568 = icmp eq ptr %2567, null
  br i1 %2568, label %2570, label %2569

2569:                                             ; preds = %2566
  tail call void @bitmap_copy(ptr noundef %2563, ptr noundef nonnull %2552) #18
  br label %2571

2570:                                             ; preds = %2566, %2565
  tail call void @bitmap_clear(ptr noundef %2563) #18
  br label %2571

2571:                                             ; preds = %2562, %2569, %2570
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %5) #18
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %4) #18
  br label %2777

2572:                                             ; preds = %2485
  %2573 = icmp eq i32 %691, 5
  br i1 %2573, label %2574, label %2761

2574:                                             ; preds = %2572
  %2575 = load i32, ptr %1, align 8
  %2576 = trunc i32 %2575 to i8
  switch i8 %2576, label %2579 [
    i8 6, label %2577
    i8 1, label %2577
    i8 8, label %2580
  ]

2577:                                             ; preds = %2574, %2574
  %2578 = lshr i32 %2575, 16
  br label %2580

2579:                                             ; preds = %2574
  tail call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1446, ptr noundef nonnull @.str.28) #18
  br label %2580

2580:                                             ; preds = %2579, %2577, %2574
  %2581 = phi i32 [ %2578, %2577 ], [ 0, %2579 ], [ 59, %2574 ]
  %2582 = zext i32 %2581 to i64
  %2583 = getelementptr inbounds [0 x i8], ptr @gimple_rhs_class_table, i64 0, i64 %2582
  %2584 = load i8, ptr %2583, align 1, !tbaa !16
  %2585 = icmp eq i8 %2584, 3
  br i1 %2585, label %2586, label %2606

2586:                                             ; preds = %2580
  %2587 = load i32, ptr %1, align 8
  %2588 = and i32 %2587, 255
  %2589 = add nsw i32 %2588, -1
  %2590 = icmp ult i32 %2589, 9
  tail call void @llvm.assume(i1 %2590)
  %2591 = zext i32 %2588 to i64
  %2592 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %2591
  %2593 = load i32, ptr %2592, align 4, !tbaa !16
  %2594 = zext i32 %2593 to i64
  %2595 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %2594
  %2596 = load i64, ptr %2595, align 8, !tbaa !36
  %2597 = icmp eq i64 %2596, 0
  br i1 %2597, label %2598, label %2599

2598:                                             ; preds = %2586
  tail call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1622, ptr noundef nonnull @.str.28) #18
  br label %2599

2599:                                             ; preds = %2598, %2586
  %2600 = getelementptr inbounds i8, ptr %1, i64 %2596
  %2601 = getelementptr inbounds ptr, ptr %2600, i64 1
  %2602 = load ptr, ptr %2601, align 8, !tbaa !5
  %2603 = load i64, ptr %2602, align 8
  %2604 = trunc i64 %2603 to i32
  %2605 = and i32 %2604, 65535
  br label %2606

2606:                                             ; preds = %2580, %2599
  %2607 = phi i32 [ %2605, %2599 ], [ %2581, %2580 ]
  %2608 = tail call fastcc ptr @gimple_expr_type(ptr noundef nonnull %1)
  %2609 = load i32, ptr %1, align 8
  %2610 = and i32 %2609, 255
  %2611 = add nsw i32 %2610, -10
  %2612 = icmp ult i32 %2611, -9
  br i1 %2612, label %2626, label %2613

2613:                                             ; preds = %2606
  %2614 = zext i32 %2610 to i64
  %2615 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %2614
  %2616 = load i32, ptr %2615, align 4, !tbaa !16
  %2617 = zext i32 %2616 to i64
  %2618 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %2617
  %2619 = load i64, ptr %2618, align 8, !tbaa !36
  %2620 = icmp eq i64 %2619, 0
  br i1 %2620, label %2621, label %2622

2621:                                             ; preds = %2613
  tail call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1622, ptr noundef nonnull @.str.28) #18
  br label %2622

2622:                                             ; preds = %2621, %2613
  %2623 = getelementptr inbounds i8, ptr %1, i64 %2619
  %2624 = getelementptr inbounds ptr, ptr %2623, i64 1
  %2625 = load ptr, ptr %2624, align 8, !tbaa !5
  br label %2626

2626:                                             ; preds = %2606, %2622
  %2627 = phi ptr [ %2625, %2622 ], [ null, %2606 ]
  %2628 = getelementptr i8, ptr %1, i64 12
  %2629 = load i32, ptr %2628, align 4, !tbaa !16
  %2630 = icmp ugt i32 %2629, 2
  br i1 %2630, label %2631, label %2649

2631:                                             ; preds = %2626
  %2632 = load i32, ptr %1, align 8
  %2633 = and i32 %2632, 255
  %2634 = add nsw i32 %2633, -10
  %2635 = icmp ult i32 %2634, -9
  br i1 %2635, label %2649, label %2636

2636:                                             ; preds = %2631
  %2637 = zext i32 %2633 to i64
  %2638 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %2637
  %2639 = load i32, ptr %2638, align 4, !tbaa !16
  %2640 = zext i32 %2639 to i64
  %2641 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %2640
  %2642 = load i64, ptr %2641, align 8, !tbaa !36
  %2643 = icmp eq i64 %2642, 0
  br i1 %2643, label %2644, label %2645

2644:                                             ; preds = %2636
  tail call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1622, ptr noundef nonnull @.str.28) #18
  br label %2645

2645:                                             ; preds = %2644, %2636
  %2646 = getelementptr inbounds i8, ptr %1, i64 %2642
  %2647 = getelementptr inbounds ptr, ptr %2646, i64 2
  %2648 = load ptr, ptr %2647, align 8, !tbaa !5
  br label %2649

2649:                                             ; preds = %2626, %2631, %2645
  %2650 = phi ptr [ null, %2626 ], [ %2648, %2645 ], [ null, %2631 ]
  call void @llvm.lifetime.start.p0(i64 1, ptr nonnull %3) #18
  store i8 0, ptr %3, align 1, !tbaa !16
  %2651 = getelementptr inbounds %struct.tree_common, ptr %2627, i64 0, i32 2
  %2652 = load ptr, ptr %2651, align 8, !tbaa !16
  %2653 = load i64, ptr %2652, align 8
  %2654 = trunc i64 %2653 to i16
  switch i16 %2654, label %2744 [
    i16 6, label %2655
    i16 7, label %2655
    i16 8, label %2655
    i16 10, label %2655
    i16 12, label %2655
  ]

2655:                                             ; preds = %2649, %2649, %2649, %2649, %2649
  %2656 = call fastcc ptr @vrp_evaluate_conditional_warnv_with_ops_using_ranges(i32 noundef %2607, ptr noundef nonnull %2627, ptr noundef %2650, ptr noundef nonnull %3)
  %2657 = icmp eq ptr %2656, null
  br i1 %2657, label %2744, label %2658

2658:                                             ; preds = %2655
  %2659 = getelementptr inbounds %struct.tree_common, ptr %2656, i64 0, i32 2
  %2660 = load ptr, ptr %2659, align 8, !tbaa !16
  %2661 = load i64, ptr %2660, align 8
  %2662 = trunc i64 %2661 to i32
  %2663 = and i32 %2662, 65535
  %2664 = add nsw i32 %2663, -6
  %2665 = icmp ult i32 %2664, 3
  br i1 %2665, label %2666, label %2707

2666:                                             ; preds = %2658
  %2667 = and i64 %2661, 2097152
  %2668 = icmp ne i64 %2667, 0
  %2669 = load i32, ptr @flag_wrapv, align 4
  %2670 = icmp ne i32 %2669, 0
  %2671 = select i1 %2668, i1 true, i1 %2670
  br i1 %2671, label %2707, label %2672

2672:                                             ; preds = %2666
  %2673 = load i64, ptr %2656, align 8
  %2674 = and i64 %2673, 65535
  %2675 = getelementptr inbounds [0 x i32], ptr @tree_code_type, i64 0, i64 %2674
  %2676 = load i32, ptr %2675, align 4, !tbaa !16
  %2677 = icmp ne i32 %2676, 1
  %2678 = and i64 %2673, 134217728
  %2679 = icmp eq i64 %2678, 0
  %2680 = or i1 %2677, %2679
  br i1 %2680, label %2707, label %2681

2681:                                             ; preds = %2672
  %2682 = getelementptr inbounds %struct.tree_type, ptr %2660, i64 0, i32 13
  %2683 = load ptr, ptr %2682, align 8, !tbaa !16
  %2684 = icmp eq ptr %2683, %2656
  br i1 %2684, label %2744, label %2685

2685:                                             ; preds = %2681
  %2686 = icmp eq ptr %2683, null
  br i1 %2686, label %2697, label %2687

2687:                                             ; preds = %2685
  %2688 = call i32 @operand_equal_p(ptr noundef nonnull %2656, ptr noundef nonnull %2683, i32 noundef 0) #18
  %2689 = icmp eq i32 %2688, 0
  br i1 %2689, label %2690, label %2744

2690:                                             ; preds = %2687
  %2691 = load ptr, ptr %2659, align 8, !tbaa !16
  %2692 = load i64, ptr %2691, align 8
  %2693 = trunc i64 %2692 to i32
  %2694 = and i32 %2693, 65535
  %2695 = add nsw i32 %2694, -6
  %2696 = icmp ult i32 %2695, 3
  br i1 %2696, label %2697, label %2707

2697:                                             ; preds = %2690, %2685
  %2698 = phi ptr [ %2691, %2690 ], [ %2660, %2685 ]
  %2699 = getelementptr inbounds %struct.tree_type, ptr %2698, i64 0, i32 14
  %2700 = load ptr, ptr %2699, align 8, !tbaa !16
  %2701 = icmp eq ptr %2700, %2656
  br i1 %2701, label %2744, label %2702

2702:                                             ; preds = %2697
  %2703 = icmp eq ptr %2700, null
  br i1 %2703, label %2707, label %2704

2704:                                             ; preds = %2702
  %2705 = call i32 @operand_equal_p(ptr noundef nonnull %2656, ptr noundef nonnull %2700, i32 noundef 0) #18
  %2706 = icmp ne i32 %2705, 0
  br label %2707

2707:                                             ; preds = %2704, %2702, %2690, %2672, %2666, %2658
  %2708 = phi i1 [ false, %2672 ], [ false, %2666 ], [ false, %2702 ], [ %2706, %2704 ], [ false, %2690 ], [ false, %2658 ]
  %2709 = load i8, ptr %3, align 1
  %2710 = icmp ne i8 %2709, 0
  %2711 = select i1 %2708, i1 true, i1 %2710
  br i1 %2711, label %2744, label %2712

2712:                                             ; preds = %2707
  %2713 = call ptr @fold_convert_loc(i32 noundef 0, ptr noundef %2608, ptr noundef nonnull %2656) #18
  %2714 = call zeroext i8 @is_gimple_min_invariant(ptr noundef %2713) #18
  %2715 = icmp eq i8 %2714, 0
  br i1 %2715, label %2741, label %2716

2716:                                             ; preds = %2712
  %2717 = getelementptr inbounds %struct.value_range_d, ptr %0, i64 0, i32 3
  %2718 = load ptr, ptr %2717, align 8, !tbaa !26
  %2719 = call zeroext i8 @is_gimple_min_invariant(ptr noundef %2713) #18
  %2720 = icmp eq i8 %2719, 0
  br i1 %2720, label %2721, label %2722

2721:                                             ; preds = %2716
  call void @fancy_abort(ptr noundef nonnull @.str.27, i32 noundef 515, ptr noundef nonnull @.str.28) #18
  br label %2722

2722:                                             ; preds = %2721, %2716
  %2723 = call fastcc ptr @avoid_overflow_infinity(ptr noundef %2713)
  store i32 1, ptr %0, align 8, !tbaa !23
  %2724 = getelementptr inbounds %struct.value_range_d, ptr %0, i64 0, i32 1
  store ptr %2723, ptr %2724, align 8, !tbaa !25
  %2725 = getelementptr inbounds %struct.value_range_d, ptr %0, i64 0, i32 2
  store ptr %2723, ptr %2725, align 8, !tbaa !31
  %2726 = load ptr, ptr %2717, align 8, !tbaa !26
  %2727 = icmp eq ptr %2726, null
  %2728 = icmp ne ptr %2718, null
  %2729 = and i1 %2728, %2727
  br i1 %2729, label %2730, label %2732

2730:                                             ; preds = %2722
  %2731 = call ptr @bitmap_obstack_alloc_stat(ptr noundef null) #18
  store ptr %2731, ptr %2717, align 8, !tbaa !26
  br label %2732

2732:                                             ; preds = %2730, %2722
  %2733 = phi ptr [ %2731, %2730 ], [ %2726, %2722 ]
  %2734 = icmp eq ptr %2733, %2718
  br i1 %2734, label %2760, label %2735

2735:                                             ; preds = %2732
  br i1 %2728, label %2736, label %2740

2736:                                             ; preds = %2735
  %2737 = load ptr, ptr %2718, align 8, !tbaa !32
  %2738 = icmp eq ptr %2737, null
  br i1 %2738, label %2740, label %2739

2739:                                             ; preds = %2736
  call void @bitmap_copy(ptr noundef %2733, ptr noundef nonnull %2718) #18
  br label %2760

2740:                                             ; preds = %2736, %2735
  call void @bitmap_clear(ptr noundef %2733) #18
  br label %2760

2741:                                             ; preds = %2712
  store i32 1, ptr %0, align 8, !tbaa !23
  %2742 = getelementptr inbounds %struct.value_range_d, ptr %0, i64 0, i32 1
  store ptr %2713, ptr %2742, align 8, !tbaa !25
  %2743 = getelementptr inbounds %struct.value_range_d, ptr %0, i64 0, i32 2
  store ptr %2713, ptr %2743, align 8, !tbaa !31
  br label %2760

2744:                                             ; preds = %2707, %2697, %2687, %2681, %2655, %2649
  %2745 = getelementptr inbounds %struct.tree_type, ptr %2608, i64 0, i32 6
  %2746 = load i32, ptr %2745, align 4
  %2747 = and i32 %2746, 1023
  %2748 = icmp eq i32 %2747, 1
  br i1 %2748, label %2749, label %2755

2749:                                             ; preds = %2744
  store i32 3, ptr %0, align 8, !tbaa !23
  %2750 = getelementptr inbounds %struct.value_range_d, ptr %0, i64 0, i32 1
  %2751 = getelementptr inbounds %struct.value_range_d, ptr %0, i64 0, i32 3
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %2750, i8 0, i64 16, i1 false)
  %2752 = load ptr, ptr %2751, align 8, !tbaa !26
  %2753 = icmp eq ptr %2752, null
  br i1 %2753, label %2760, label %2754

2754:                                             ; preds = %2749
  call void @bitmap_clear(ptr noundef nonnull %2752) #18
  br label %2760

2755:                                             ; preds = %2744
  %2756 = call ptr @build_int_cst(ptr noundef nonnull %2608, i64 noundef 0) #18
  %2757 = call ptr @build_int_cst(ptr noundef nonnull %2608, i64 noundef 1) #18
  store i32 1, ptr %0, align 8, !tbaa !23
  %2758 = getelementptr inbounds %struct.value_range_d, ptr %0, i64 0, i32 1
  store ptr %2756, ptr %2758, align 8, !tbaa !25
  %2759 = getelementptr inbounds %struct.value_range_d, ptr %0, i64 0, i32 2
  store ptr %2757, ptr %2759, align 8, !tbaa !31
  br label %2760

2760:                                             ; preds = %2732, %2739, %2740, %2741, %2749, %2754, %2755
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %3) #18
  br label %2777

2761:                                             ; preds = %2572
  %2762 = getelementptr inbounds [0 x i8], ptr @gimple_rhs_class_table, i64 0, i64 %689
  %2763 = load i8, ptr %2762, align 1, !tbaa !16
  %2764 = icmp eq i8 %2763, 3
  br i1 %2764, label %2765, label %2771

2765:                                             ; preds = %2761
  %2766 = tail call fastcc ptr @gimple_assign_rhs1(ptr noundef nonnull %1)
  %2767 = tail call zeroext i8 @is_gimple_min_invariant(ptr noundef %2766) #18
  %2768 = icmp eq i8 %2767, 0
  br i1 %2768, label %2771, label %2769

2769:                                             ; preds = %2765
  %2770 = tail call fastcc ptr @gimple_assign_rhs1(ptr noundef nonnull %1)
  tail call fastcc void @set_value_range_to_value(ptr noundef %0, ptr noundef %2770, ptr noundef null)
  br label %2777

2771:                                             ; preds = %2765, %2761
  store i32 3, ptr %0, align 8, !tbaa !23
  %2772 = getelementptr inbounds %struct.value_range_d, ptr %0, i64 0, i32 1
  %2773 = getelementptr inbounds %struct.value_range_d, ptr %0, i64 0, i32 3
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %2772, i8 0, i64 16, i1 false)
  %2774 = load ptr, ptr %2773, align 8, !tbaa !26
  %2775 = icmp eq ptr %2774, null
  br i1 %2775, label %2777, label %2776

2776:                                             ; preds = %2771
  tail call void @bitmap_clear(ptr noundef nonnull %2774) #18
  br label %2777

2777:                                             ; preds = %1743, %2571, %2769, %2760, %2484, %114, %119, %408, %413, %418, %423, %428, %435, %453, %470, %492, %495, %503, %541, %556, %559, %562, %596, %611, %677, %681, %685, %2771, %2776
  %2778 = load i32, ptr %0, align 8, !tbaa !23
  br label %2779

2779:                                             ; preds = %2777, %454, %430, %406, %406, %403, %403
  %2780 = phi i32 [ %2778, %2777 ], [ %455, %454 ], [ %431, %430 ], [ %405, %406 ], [ %405, %406 ], [ %405, %403 ], [ %405, %403 ]
  %2781 = icmp eq i32 %2780, 3
  br i1 %2781, label %2782, label %2783

2782:                                             ; preds = %450, %467, %538, %593, %2779
  call fastcc void @extract_range_basic(ptr noundef nonnull %0, ptr noundef %1)
  br label %2783

2783:                                             ; preds = %2782, %2779
  ret void
}

; Function Attrs: inlinehint nounwind sspstrong uwtable
define internal fastcc zeroext i8 @update_value_range(ptr nocapture noundef readonly %0, ptr nocapture noundef %1) unnamed_addr #2 {
  %3 = tail call fastcc ptr @get_value_range(ptr noundef %0)
  %4 = load i32, ptr %3, align 8, !tbaa !23
  %5 = load i32, ptr %1, align 8, !tbaa !23
  %6 = icmp eq i32 %4, %5
  br i1 %6, label %7, label %34

7:                                                ; preds = %2
  %8 = getelementptr inbounds %struct.value_range_d, ptr %3, i64 0, i32 1
  %9 = load ptr, ptr %8, align 8, !tbaa !25
  %10 = getelementptr inbounds %struct.value_range_d, ptr %1, i64 0, i32 1
  %11 = load ptr, ptr %10, align 8, !tbaa !25
  %12 = tail call fastcc zeroext i8 @vrp_operand_equal_p(ptr noundef %9, ptr noundef %11), !range !79
  %13 = icmp eq i8 %12, 0
  br i1 %13, label %34, label %14

14:                                               ; preds = %7
  %15 = getelementptr inbounds %struct.value_range_d, ptr %3, i64 0, i32 2
  %16 = load ptr, ptr %15, align 8, !tbaa !31
  %17 = getelementptr inbounds %struct.value_range_d, ptr %1, i64 0, i32 2
  %18 = load ptr, ptr %17, align 8, !tbaa !31
  %19 = tail call fastcc zeroext i8 @vrp_operand_equal_p(ptr noundef %16, ptr noundef %18), !range !79
  %20 = icmp eq i8 %19, 0
  br i1 %20, label %34, label %21

21:                                               ; preds = %14
  %22 = getelementptr inbounds %struct.value_range_d, ptr %3, i64 0, i32 3
  %23 = load ptr, ptr %22, align 8, !tbaa !26
  %24 = getelementptr inbounds %struct.value_range_d, ptr %1, i64 0, i32 3
  %25 = load ptr, ptr %24, align 8, !tbaa !26
  %26 = icmp eq ptr %23, %25
  br i1 %26, label %57, label %27

27:                                               ; preds = %21
  %28 = icmp ne ptr %23, null
  %29 = icmp ne ptr %25, null
  %30 = and i1 %28, %29
  br i1 %30, label %31, label %34

31:                                               ; preds = %27
  %32 = tail call zeroext i8 @bitmap_equal_p(ptr noundef nonnull %23, ptr noundef nonnull %25) #18
  %33 = icmp eq i8 %32, 0
  br i1 %33, label %34, label %57

34:                                               ; preds = %2, %7, %14, %27, %31
  %35 = load i32, ptr %1, align 8, !tbaa !23
  %36 = getelementptr inbounds %struct.value_range_d, ptr %1, i64 0, i32 1
  %37 = getelementptr inbounds %struct.value_range_d, ptr %1, i64 0, i32 3
  %38 = load ptr, ptr %37, align 8, !tbaa !26
  store i32 %35, ptr %3, align 8, !tbaa !23
  %39 = getelementptr inbounds %struct.value_range_d, ptr %3, i64 0, i32 1
  %40 = load <2 x ptr>, ptr %36, align 8, !tbaa !5
  store <2 x ptr> %40, ptr %39, align 8, !tbaa !5
  %41 = getelementptr inbounds %struct.value_range_d, ptr %3, i64 0, i32 3
  %42 = load ptr, ptr %41, align 8, !tbaa !26
  %43 = icmp eq ptr %42, null
  %44 = icmp ne ptr %38, null
  %45 = and i1 %44, %43
  br i1 %45, label %46, label %48

46:                                               ; preds = %34
  %47 = tail call ptr @bitmap_obstack_alloc_stat(ptr noundef null) #18
  store ptr %47, ptr %41, align 8, !tbaa !26
  br label %48

48:                                               ; preds = %46, %34
  %49 = phi ptr [ %47, %46 ], [ %42, %34 ]
  %50 = icmp eq ptr %49, %38
  br i1 %50, label %57, label %51

51:                                               ; preds = %48
  br i1 %44, label %52, label %56

52:                                               ; preds = %51
  %53 = load ptr, ptr %38, align 8, !tbaa !32
  %54 = icmp eq ptr %53, null
  br i1 %54, label %56, label %55

55:                                               ; preds = %52
  tail call void @bitmap_copy(ptr noundef %49, ptr noundef nonnull %38) #18
  br label %57

56:                                               ; preds = %52, %51
  tail call void @bitmap_clear(ptr noundef %49) #18
  br label %57

57:                                               ; preds = %21, %56, %55, %48, %31
  %58 = phi i8 [ 0, %31 ], [ 1, %48 ], [ 1, %55 ], [ 1, %56 ], [ 0, %21 ]
  %59 = getelementptr inbounds %struct.value_range_d, ptr %1, i64 0, i32 3
  %60 = load ptr, ptr %59, align 8, !tbaa !26
  tail call void @bitmap_obstack_free(ptr noundef %60) #18
  store ptr null, ptr %59, align 8, !tbaa !26
  ret i8 %58
}

declare zeroext i8 @tree_unary_nonnegative_warnv_p(i32 noundef, ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

declare zeroext i8 @tree_binary_nonnegative_warnv_p(i32 noundef, ptr noundef, ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

declare zeroext i8 @tree_single_nonnegative_warnv_p(ptr noundef, ptr noundef) local_unnamed_addr #3

declare zeroext i8 @tree_call_nonnegative_warnv_p(ptr noundef, ptr noundef, ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

; Function Attrs: inlinehint mustprogress nofree norecurse nosync nounwind sspstrong willreturn memory(read, inaccessiblemem: none) uwtable
define internal fastcc zeroext i8 @supports_overflow_infinity(ptr nocapture noundef readonly %0) unnamed_addr #14 {
  %2 = load i64, ptr %0, align 8
  %3 = trunc i64 %2 to i32
  %4 = and i32 %3, 65535
  %5 = add nsw i32 %4, -6
  %6 = icmp ult i32 %5, 3
  br i1 %6, label %7, label %28

7:                                                ; preds = %1
  %8 = getelementptr inbounds %struct.tree_type, ptr %0, i64 0, i32 13
  %9 = load ptr, ptr %8, align 8, !tbaa !16
  %10 = getelementptr inbounds %struct.tree_type, ptr %0, i64 0, i32 14
  %11 = load ptr, ptr %10, align 8, !tbaa !16
  %12 = icmp eq ptr %9, null
  br i1 %12, label %28, label %13

13:                                               ; preds = %7
  %14 = load i64, ptr %9, align 8
  %15 = and i64 %14, 65535
  %16 = getelementptr inbounds [0 x i32], ptr @tree_code_type, i64 0, i64 %15
  %17 = load i32, ptr %16, align 4, !tbaa !16
  %18 = icmp eq i32 %17, 1
  %19 = icmp ne ptr %11, null
  %20 = select i1 %18, i1 %19, i1 false
  br i1 %20, label %21, label %28

21:                                               ; preds = %13
  %22 = load i64, ptr %11, align 8
  %23 = and i64 %22, 65535
  %24 = getelementptr inbounds [0 x i32], ptr @tree_code_type, i64 0, i64 %23
  %25 = load i32, ptr %24, align 4, !tbaa !16
  %26 = icmp eq i32 %25, 1
  %27 = zext i1 %26 to i8
  br label %28

28:                                               ; preds = %1, %21, %13, %7
  %29 = phi i8 [ 0, %13 ], [ 0, %7 ], [ %27, %21 ], [ 0, %1 ]
  ret i8 %29
}

; Function Attrs: inlinehint nounwind sspstrong uwtable
define internal fastcc ptr @positive_overflow_infinity(ptr nocapture noundef readonly %0) unnamed_addr #2 {
  %2 = load i64, ptr %0, align 8
  %3 = trunc i64 %2 to i32
  %4 = and i32 %3, 65535
  %5 = add nsw i32 %4, -6
  %6 = icmp ult i32 %5, 3
  br i1 %6, label %7, label %10

7:                                                ; preds = %1
  %8 = getelementptr inbounds %struct.tree_type, ptr %0, i64 0, i32 14
  %9 = load ptr, ptr %8, align 8, !tbaa !16
  br label %10

10:                                               ; preds = %1, %7
  %11 = phi ptr [ %9, %7 ], [ null, %1 ]
  %12 = tail call ptr @copy_node_stat(ptr noundef %11) #18
  %13 = load i64, ptr %12, align 8
  %14 = or i64 %13, 134217728
  store i64 %14, ptr %12, align 8
  ret ptr %12
}

declare ptr @copy_node_stat(ptr noundef) local_unnamed_addr #3

; Function Attrs: inlinehint nounwind sspstrong uwtable
define internal fastcc zeroext i8 @is_overflow_infinity(ptr noundef %0) unnamed_addr #2 {
  %2 = getelementptr inbounds %struct.tree_common, ptr %0, i64 0, i32 2
  %3 = load ptr, ptr %2, align 8, !tbaa !16
  %4 = load i64, ptr %3, align 8
  %5 = trunc i64 %4 to i32
  %6 = and i32 %5, 65535
  %7 = add nsw i32 %6, -6
  %8 = icmp ult i32 %7, 3
  br i1 %8, label %9, label %51

9:                                                ; preds = %1
  %10 = and i64 %4, 2097152
  %11 = icmp ne i64 %10, 0
  %12 = load i32, ptr @flag_wrapv, align 4
  %13 = icmp ne i32 %12, 0
  %14 = select i1 %11, i1 true, i1 %13
  br i1 %14, label %51, label %15

15:                                               ; preds = %9
  %16 = load i64, ptr %0, align 8
  %17 = and i64 %16, 65535
  %18 = getelementptr inbounds [0 x i32], ptr @tree_code_type, i64 0, i64 %17
  %19 = load i32, ptr %18, align 4, !tbaa !16
  %20 = icmp ne i32 %19, 1
  %21 = and i64 %16, 134217728
  %22 = icmp eq i64 %21, 0
  %23 = or i1 %20, %22
  br i1 %23, label %51, label %24

24:                                               ; preds = %15
  %25 = getelementptr inbounds %struct.tree_type, ptr %3, i64 0, i32 13
  %26 = load ptr, ptr %25, align 8, !tbaa !16
  %27 = icmp eq ptr %26, %0
  br i1 %27, label %51, label %28

28:                                               ; preds = %24
  %29 = icmp eq ptr %26, null
  br i1 %29, label %40, label %30

30:                                               ; preds = %28
  %31 = tail call i32 @operand_equal_p(ptr noundef nonnull %0, ptr noundef nonnull %26, i32 noundef 0) #18
  %32 = icmp eq i32 %31, 0
  br i1 %32, label %33, label %51

33:                                               ; preds = %30
  %34 = load ptr, ptr %2, align 8, !tbaa !16
  %35 = load i64, ptr %34, align 8
  %36 = trunc i64 %35 to i32
  %37 = and i32 %36, 65535
  %38 = add nsw i32 %37, -6
  %39 = icmp ult i32 %38, 3
  br i1 %39, label %40, label %51

40:                                               ; preds = %28, %33
  %41 = phi ptr [ %34, %33 ], [ %3, %28 ]
  %42 = getelementptr inbounds %struct.tree_type, ptr %41, i64 0, i32 14
  %43 = load ptr, ptr %42, align 8, !tbaa !16
  %44 = icmp eq ptr %43, %0
  br i1 %44, label %51, label %45

45:                                               ; preds = %40
  %46 = icmp eq ptr %43, null
  br i1 %46, label %51, label %47

47:                                               ; preds = %45
  %48 = tail call i32 @operand_equal_p(ptr noundef nonnull %0, ptr noundef nonnull %43, i32 noundef 0) #18
  %49 = icmp ne i32 %48, 0
  %50 = zext i1 %49 to i8
  br label %51

51:                                               ; preds = %24, %1, %47, %45, %40, %33, %30, %15, %9
  %52 = phi i8 [ 0, %15 ], [ 0, %9 ], [ 1, %30 ], [ 1, %40 ], [ 0, %45 ], [ %50, %47 ], [ 0, %33 ], [ 0, %1 ], [ 1, %24 ]
  ret i8 %52
}

declare ptr @get_base_address(ptr noundef) local_unnamed_addr #3

declare zeroext i8 @gimple_alloca_call_p(ptr noundef) local_unnamed_addr #3

declare zeroext i8 @tree_unary_nonzero_warnv_p(i32 noundef, ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

declare zeroext i8 @tree_binary_nonzero_warnv_p(i32 noundef, ptr noundef, ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

declare zeroext i8 @tree_single_nonzero_warnv_p(ptr noundef, ptr noundef) local_unnamed_addr #3

; Function Attrs: inlinehint nounwind sspstrong uwtable
define internal fastcc void @set_value_range_to_value(ptr nocapture noundef %0, ptr noundef %1, ptr noundef %2) unnamed_addr #2 {
  %4 = tail call zeroext i8 @is_gimple_min_invariant(ptr noundef %1) #18
  %5 = icmp eq i8 %4, 0
  br i1 %5, label %6, label %7

6:                                                ; preds = %3
  tail call void @fancy_abort(ptr noundef nonnull @.str.27, i32 noundef 515, ptr noundef nonnull @.str.28) #18
  br label %7

7:                                                ; preds = %3, %6
  %8 = tail call fastcc ptr @avoid_overflow_infinity(ptr noundef %1)
  store i32 1, ptr %0, align 8, !tbaa !23
  %9 = getelementptr inbounds %struct.value_range_d, ptr %0, i64 0, i32 1
  store ptr %8, ptr %9, align 8, !tbaa !25
  %10 = getelementptr inbounds %struct.value_range_d, ptr %0, i64 0, i32 2
  store ptr %8, ptr %10, align 8, !tbaa !31
  %11 = getelementptr inbounds %struct.value_range_d, ptr %0, i64 0, i32 3
  %12 = load ptr, ptr %11, align 8, !tbaa !26
  %13 = icmp eq ptr %12, null
  %14 = icmp ne ptr %2, null
  %15 = and i1 %14, %13
  br i1 %15, label %16, label %18

16:                                               ; preds = %7
  %17 = tail call ptr @bitmap_obstack_alloc_stat(ptr noundef null) #18
  store ptr %17, ptr %11, align 8, !tbaa !26
  br label %18

18:                                               ; preds = %16, %7
  %19 = phi ptr [ %17, %16 ], [ %12, %7 ]
  %20 = icmp eq ptr %19, %2
  br i1 %20, label %27, label %21

21:                                               ; preds = %18
  br i1 %14, label %22, label %26

22:                                               ; preds = %21
  %23 = load ptr, ptr %2, align 8, !tbaa !32
  %24 = icmp eq ptr %23, null
  br i1 %24, label %26, label %25

25:                                               ; preds = %22
  tail call void @bitmap_copy(ptr noundef %19, ptr noundef nonnull %2) #18
  br label %27

26:                                               ; preds = %22, %21
  tail call void @bitmap_clear(ptr noundef %19) #18
  br label %27

27:                                               ; preds = %18, %25, %26
  ret void
}

; Function Attrs: inlinehint nounwind sspstrong uwtable
define internal fastcc ptr @avoid_overflow_infinity(ptr noundef %0) unnamed_addr #2 {
  %2 = getelementptr inbounds %struct.tree_common, ptr %0, i64 0, i32 2
  %3 = load ptr, ptr %2, align 8, !tbaa !16
  %4 = load i64, ptr %3, align 8
  %5 = trunc i64 %4 to i32
  %6 = and i32 %5, 65535
  %7 = add nsw i32 %6, -6
  %8 = icmp ult i32 %7, 3
  br i1 %8, label %9, label %88

9:                                                ; preds = %1
  %10 = and i64 %4, 2097152
  %11 = icmp ne i64 %10, 0
  %12 = load i32, ptr @flag_wrapv, align 4
  %13 = icmp ne i32 %12, 0
  %14 = select i1 %11, i1 true, i1 %13
  br i1 %14, label %88, label %15

15:                                               ; preds = %9
  %16 = load i64, ptr %0, align 8
  %17 = and i64 %16, 65535
  %18 = getelementptr inbounds [0 x i32], ptr @tree_code_type, i64 0, i64 %17
  %19 = load i32, ptr %18, align 4, !tbaa !16
  %20 = icmp ne i32 %19, 1
  %21 = and i64 %16, 134217728
  %22 = icmp eq i64 %21, 0
  %23 = or i1 %20, %22
  br i1 %23, label %88, label %24

24:                                               ; preds = %15
  %25 = getelementptr inbounds %struct.tree_type, ptr %3, i64 0, i32 13
  %26 = load ptr, ptr %25, align 8, !tbaa !16
  %27 = icmp eq ptr %26, %0
  br i1 %27, label %52, label %28

28:                                               ; preds = %24
  %29 = icmp eq ptr %26, null
  br i1 %29, label %40, label %30

30:                                               ; preds = %28
  %31 = tail call i32 @operand_equal_p(ptr noundef nonnull %0, ptr noundef nonnull %26, i32 noundef 0) #18
  %32 = icmp eq i32 %31, 0
  %33 = load ptr, ptr %2, align 8, !tbaa !16
  br i1 %32, label %34, label %52

34:                                               ; preds = %30
  %35 = load i64, ptr %33, align 8
  %36 = trunc i64 %35 to i32
  %37 = and i32 %36, 65535
  %38 = add nsw i32 %37, -6
  %39 = icmp ult i32 %38, 3
  br i1 %39, label %40, label %88

40:                                               ; preds = %34, %28
  %41 = phi ptr [ %33, %34 ], [ %3, %28 ]
  %42 = getelementptr inbounds %struct.tree_type, ptr %41, i64 0, i32 14
  %43 = load ptr, ptr %42, align 8, !tbaa !16
  %44 = icmp eq ptr %43, %0
  br i1 %44, label %52, label %45

45:                                               ; preds = %40
  %46 = icmp eq ptr %43, null
  br i1 %46, label %88, label %47

47:                                               ; preds = %45
  %48 = tail call i32 @operand_equal_p(ptr noundef nonnull %0, ptr noundef nonnull %43, i32 noundef 0) #18
  %49 = icmp eq i32 %48, 0
  br i1 %49, label %88, label %50

50:                                               ; preds = %47
  %51 = load ptr, ptr %2, align 8, !tbaa !16
  br label %52

52:                                               ; preds = %50, %24, %40, %30
  %53 = phi ptr [ %51, %50 ], [ %3, %24 ], [ %41, %40 ], [ %33, %30 ]
  %54 = load i64, ptr %53, align 8
  %55 = trunc i64 %54 to i32
  %56 = and i32 %55, 65535
  %57 = add nsw i32 %56, -6
  %58 = icmp ult i32 %57, 3
  br i1 %58, label %59, label %78

59:                                               ; preds = %52
  %60 = getelementptr inbounds %struct.tree_type, ptr %53, i64 0, i32 14
  %61 = load ptr, ptr %60, align 8, !tbaa !16
  %62 = icmp eq ptr %61, %0
  br i1 %62, label %75, label %63

63:                                               ; preds = %59
  %64 = icmp eq ptr %61, null
  br i1 %64, label %82, label %65

65:                                               ; preds = %63
  %66 = tail call i32 @operand_equal_p(ptr noundef nonnull %0, ptr noundef nonnull %61, i32 noundef 0) #18
  %67 = icmp eq i32 %66, 0
  %68 = load ptr, ptr %2, align 8, !tbaa !16
  %69 = load i64, ptr %68, align 8
  %70 = trunc i64 %69 to i32
  %71 = and i32 %70, 65535
  %72 = add nsw i32 %71, -6
  br i1 %67, label %78, label %73

73:                                               ; preds = %65
  %74 = icmp ult i32 %72, 3
  br i1 %74, label %75, label %88

75:                                               ; preds = %59, %73
  %76 = phi ptr [ %68, %73 ], [ %53, %59 ]
  %77 = getelementptr inbounds %struct.tree_type, ptr %76, i64 0, i32 14
  br label %85

78:                                               ; preds = %65, %52
  %79 = phi i32 [ %57, %52 ], [ %72, %65 ]
  %80 = phi ptr [ %53, %52 ], [ %68, %65 ]
  %81 = icmp ult i32 %79, 3
  br i1 %81, label %82, label %88

82:                                               ; preds = %63, %78
  %83 = phi ptr [ %80, %78 ], [ %53, %63 ]
  %84 = getelementptr inbounds %struct.tree_type, ptr %83, i64 0, i32 13
  br label %85

85:                                               ; preds = %75, %82
  %86 = phi ptr [ %84, %82 ], [ %77, %75 ]
  %87 = load ptr, ptr %86, align 8, !tbaa !16
  br label %88

88:                                               ; preds = %85, %1, %34, %45, %9, %15, %78, %73, %47
  %89 = phi ptr [ %0, %47 ], [ null, %73 ], [ null, %78 ], [ %0, %15 ], [ %0, %9 ], [ %0, %45 ], [ %0, %34 ], [ %0, %1 ], [ %87, %85 ]
  ret ptr %89
}

; Function Attrs: inlinehint nounwind sspstrong uwtable
define internal fastcc zeroext i8 @symbolic_range_p(ptr nocapture noundef readonly %0) unnamed_addr #2 {
  %2 = getelementptr inbounds %struct.value_range_d, ptr %0, i64 0, i32 1
  %3 = load ptr, ptr %2, align 8, !tbaa !25
  %4 = tail call zeroext i8 @is_gimple_min_invariant(ptr noundef %3) #18
  %5 = icmp eq i8 %4, 0
  br i1 %5, label %12, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %struct.value_range_d, ptr %0, i64 0, i32 2
  %8 = load ptr, ptr %7, align 8, !tbaa !31
  %9 = tail call zeroext i8 @is_gimple_min_invariant(ptr noundef %8) #18
  %10 = icmp eq i8 %9, 0
  %11 = zext i1 %10 to i8
  br label %12

12:                                               ; preds = %6, %1
  %13 = phi i8 [ 1, %1 ], [ %11, %6 ]
  ret i8 %13
}

declare ptr @fold_build1_stat_loc(i32 noundef, i32 noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

declare ptr @int_const_binop(i32 noundef, ptr noundef, ptr noundef, i32 noundef) local_unnamed_addr #3

declare ptr @force_fit_type_double(ptr noundef, i64 noundef, i64 noundef, i32 noundef, i8 noundef zeroext) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc void @set_and_canonicalize_value_range(ptr nocapture noundef %0, i32 noundef %1, ptr noundef %2, ptr noundef %3, ptr noundef %4) unnamed_addr #9 {
  %6 = add i32 %1, -3
  %7 = icmp ult i32 %6, -2
  br i1 %7, label %16, label %8

8:                                                ; preds = %5
  %9 = load i64, ptr %2, align 8
  %10 = and i64 %9, 65535
  %11 = icmp eq i64 %10, 23
  br i1 %11, label %12, label %16

12:                                               ; preds = %8
  %13 = load i64, ptr %3, align 8
  %14 = and i64 %13, 65535
  %15 = icmp eq i64 %14, 23
  br i1 %15, label %35, label %16

16:                                               ; preds = %5, %12, %8
  store i32 %1, ptr %0, align 8, !tbaa !23
  %17 = getelementptr inbounds %struct.value_range_d, ptr %0, i64 0, i32 1
  store ptr %2, ptr %17, align 8, !tbaa !25
  %18 = getelementptr inbounds %struct.value_range_d, ptr %0, i64 0, i32 2
  store ptr %3, ptr %18, align 8, !tbaa !31
  %19 = getelementptr inbounds %struct.value_range_d, ptr %0, i64 0, i32 3
  %20 = load ptr, ptr %19, align 8, !tbaa !26
  %21 = icmp eq ptr %20, null
  %22 = icmp ne ptr %4, null
  %23 = and i1 %22, %21
  br i1 %23, label %24, label %26

24:                                               ; preds = %16
  %25 = tail call ptr @bitmap_obstack_alloc_stat(ptr noundef null) #18
  store ptr %25, ptr %19, align 8, !tbaa !26
  br label %26

26:                                               ; preds = %24, %16
  %27 = phi ptr [ %25, %24 ], [ %20, %16 ]
  %28 = icmp eq ptr %27, %4
  br i1 %28, label %169, label %29

29:                                               ; preds = %26
  br i1 %22, label %30, label %34

30:                                               ; preds = %29
  %31 = load ptr, ptr %4, align 8, !tbaa !32
  %32 = icmp eq ptr %31, null
  br i1 %32, label %34, label %33

33:                                               ; preds = %30
  tail call void @bitmap_copy(ptr noundef %27, ptr noundef nonnull %4) #18
  br label %169

34:                                               ; preds = %30, %29
  tail call void @bitmap_clear(ptr noundef %27) #18
  br label %169

35:                                               ; preds = %12
  %36 = tail call i32 @tree_int_cst_lt(ptr noundef nonnull %3, ptr noundef nonnull %2) #18
  %37 = icmp eq i32 %36, 0
  br i1 %37, label %54, label %38

38:                                               ; preds = %35
  %39 = getelementptr inbounds %struct.tree_common, ptr %2, i64 0, i32 2
  %40 = load ptr, ptr %39, align 8, !tbaa !16
  %41 = tail call ptr @build_int_cst(ptr noundef %40, i64 noundef 1) #18
  %42 = tail call ptr @int_const_binop(i32 noundef 63, ptr noundef nonnull %3, ptr noundef %41, i32 noundef 0) #18
  %43 = tail call ptr @int_const_binop(i32 noundef 64, ptr noundef nonnull %2, ptr noundef %41, i32 noundef 0) #18
  %44 = tail call i32 @tree_int_cst_lt(ptr noundef %43, ptr noundef %42) #18
  %45 = icmp eq i32 %44, 0
  br i1 %45, label %52, label %46

46:                                               ; preds = %38
  store i32 3, ptr %0, align 8, !tbaa !23
  %47 = getelementptr inbounds %struct.value_range_d, ptr %0, i64 0, i32 1
  %48 = getelementptr inbounds %struct.value_range_d, ptr %0, i64 0, i32 3
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %47, i8 0, i64 16, i1 false)
  %49 = load ptr, ptr %48, align 8, !tbaa !26
  %50 = icmp eq ptr %49, null
  br i1 %50, label %169, label %51

51:                                               ; preds = %46
  tail call void @bitmap_clear(ptr noundef nonnull %49) #18
  br label %169

52:                                               ; preds = %38
  %53 = icmp eq i32 %1, 1
  br i1 %53, label %56, label %147

54:                                               ; preds = %35
  %55 = icmp eq i32 %1, 2
  br i1 %55, label %56, label %147

56:                                               ; preds = %52, %54
  %57 = phi ptr [ %2, %54 ], [ %42, %52 ]
  %58 = phi ptr [ %3, %54 ], [ %43, %52 ]
  %59 = getelementptr inbounds %struct.tree_common, ptr %57, i64 0, i32 2
  %60 = load ptr, ptr %59, align 8, !tbaa !16
  %61 = load i64, ptr %60, align 8
  %62 = trunc i64 %61 to i32
  %63 = and i32 %62, 65535
  %64 = add nsw i32 %63, -6
  %65 = icmp ult i32 %64, 3
  br i1 %65, label %66, label %76

66:                                               ; preds = %56
  %67 = getelementptr inbounds %struct.tree_type, ptr %60, i64 0, i32 13
  %68 = load ptr, ptr %67, align 8, !tbaa !16
  %69 = icmp eq ptr %68, %57
  br i1 %69, label %76, label %70

70:                                               ; preds = %66
  %71 = icmp eq ptr %68, null
  br i1 %71, label %76, label %72

72:                                               ; preds = %70
  %73 = tail call i32 @operand_equal_p(ptr noundef nonnull %57, ptr noundef nonnull %68, i32 noundef 0) #18
  %74 = icmp ne i32 %73, 0
  %75 = zext i1 %74 to i8
  br label %76

76:                                               ; preds = %56, %66, %70, %72
  %77 = phi i8 [ 1, %66 ], [ 0, %70 ], [ %75, %72 ], [ 0, %56 ]
  %78 = getelementptr inbounds %struct.tree_common, ptr %58, i64 0, i32 2
  %79 = load ptr, ptr %78, align 8, !tbaa !16
  %80 = load i64, ptr %79, align 8
  %81 = trunc i64 %80 to i32
  %82 = and i32 %81, 65535
  %83 = add nsw i32 %82, -6
  %84 = icmp ult i32 %83, 3
  br i1 %84, label %85, label %95

85:                                               ; preds = %76
  %86 = getelementptr inbounds %struct.tree_type, ptr %79, i64 0, i32 14
  %87 = load ptr, ptr %86, align 8, !tbaa !16
  %88 = icmp eq ptr %87, %58
  br i1 %88, label %97, label %89

89:                                               ; preds = %85
  %90 = icmp eq ptr %87, null
  br i1 %90, label %95, label %91

91:                                               ; preds = %89
  %92 = tail call i32 @operand_equal_p(ptr noundef nonnull %58, ptr noundef nonnull %87, i32 noundef 0) #18
  %93 = icmp ne i32 %92, 0
  %94 = zext i1 %93 to i8
  br label %97

95:                                               ; preds = %89, %76
  %96 = icmp eq i8 %77, 0
  br i1 %96, label %147, label %109

97:                                               ; preds = %85, %91
  %98 = phi i8 [ 1, %85 ], [ %94, %91 ]
  %99 = icmp ne i8 %77, 0
  %100 = icmp ne i8 %98, 0
  %101 = select i1 %99, i1 %100, i1 false
  br i1 %101, label %102, label %108

102:                                              ; preds = %97
  store i32 3, ptr %0, align 8, !tbaa !23
  %103 = getelementptr inbounds %struct.value_range_d, ptr %0, i64 0, i32 1
  %104 = getelementptr inbounds %struct.value_range_d, ptr %0, i64 0, i32 3
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %103, i8 0, i64 16, i1 false)
  %105 = load ptr, ptr %104, align 8, !tbaa !26
  %106 = icmp eq ptr %105, null
  br i1 %106, label %169, label %107

107:                                              ; preds = %102
  tail call void @bitmap_clear(ptr noundef nonnull %105) #18
  br label %169

108:                                              ; preds = %97
  br i1 %99, label %109, label %131

109:                                              ; preds = %95, %108
  %110 = phi i8 [ 0, %95 ], [ %98, %108 ]
  %111 = load ptr, ptr %59, align 8, !tbaa !16
  %112 = load i64, ptr %111, align 8
  %113 = and i64 %112, 2097152
  %114 = icmp eq i64 %113, 0
  br i1 %114, label %118, label %115

115:                                              ; preds = %109
  %116 = tail call i32 @integer_zerop(ptr noundef nonnull %58) #18
  %117 = icmp eq i32 %116, 0
  br i1 %117, label %118, label %131

118:                                              ; preds = %115, %109
  %119 = load ptr, ptr %78, align 8, !tbaa !16
  %120 = tail call ptr @build_int_cst(ptr noundef %119, i64 noundef 1) #18
  %121 = tail call ptr @int_const_binop(i32 noundef 63, ptr noundef nonnull %58, ptr noundef %120, i32 noundef 0) #18
  %122 = load ptr, ptr %78, align 8, !tbaa !16
  %123 = load i64, ptr %122, align 8
  %124 = trunc i64 %123 to i32
  %125 = and i32 %124, 65535
  %126 = add nsw i32 %125, -6
  %127 = icmp ult i32 %126, 3
  br i1 %127, label %128, label %147

128:                                              ; preds = %118
  %129 = getelementptr inbounds %struct.tree_type, ptr %122, i64 0, i32 14
  %130 = load ptr, ptr %129, align 8, !tbaa !16
  br label %147

131:                                              ; preds = %115, %108
  %132 = phi i8 [ %110, %115 ], [ %98, %108 ]
  %133 = icmp eq i8 %132, 0
  br i1 %133, label %147, label %134

134:                                              ; preds = %131
  %135 = load ptr, ptr %59, align 8, !tbaa !16
  %136 = tail call ptr @build_int_cst(ptr noundef %135, i64 noundef 1) #18
  %137 = tail call ptr @int_const_binop(i32 noundef 64, ptr noundef nonnull %57, ptr noundef %136, i32 noundef 0) #18
  %138 = load ptr, ptr %59, align 8, !tbaa !16
  %139 = load i64, ptr %138, align 8
  %140 = trunc i64 %139 to i32
  %141 = and i32 %140, 65535
  %142 = add nsw i32 %141, -6
  %143 = icmp ult i32 %142, 3
  br i1 %143, label %144, label %147

144:                                              ; preds = %134
  %145 = getelementptr inbounds %struct.tree_type, ptr %138, i64 0, i32 13
  %146 = load ptr, ptr %145, align 8, !tbaa !16
  br label %147

147:                                              ; preds = %95, %144, %134, %128, %118, %131, %52, %54
  %148 = phi ptr [ %3, %54 ], [ %43, %52 ], [ %137, %144 ], [ %137, %134 ], [ null, %118 ], [ %130, %128 ], [ %58, %131 ], [ %58, %95 ]
  %149 = phi ptr [ %2, %54 ], [ %42, %52 ], [ %146, %144 ], [ null, %134 ], [ %121, %118 ], [ %121, %128 ], [ %57, %131 ], [ %57, %95 ]
  %150 = phi i32 [ 1, %54 ], [ 1, %52 ], [ 1, %144 ], [ 1, %134 ], [ 1, %118 ], [ 1, %128 ], [ 2, %131 ], [ 2, %95 ]
  store i32 %150, ptr %0, align 8, !tbaa !23
  %151 = getelementptr inbounds %struct.value_range_d, ptr %0, i64 0, i32 1
  store ptr %149, ptr %151, align 8, !tbaa !25
  %152 = getelementptr inbounds %struct.value_range_d, ptr %0, i64 0, i32 2
  store ptr %148, ptr %152, align 8, !tbaa !31
  %153 = getelementptr inbounds %struct.value_range_d, ptr %0, i64 0, i32 3
  %154 = load ptr, ptr %153, align 8, !tbaa !26
  %155 = icmp eq ptr %154, null
  %156 = icmp ne ptr %4, null
  %157 = and i1 %156, %155
  br i1 %157, label %158, label %160

158:                                              ; preds = %147
  %159 = tail call ptr @bitmap_obstack_alloc_stat(ptr noundef null) #18
  store ptr %159, ptr %153, align 8, !tbaa !26
  br label %160

160:                                              ; preds = %158, %147
  %161 = phi ptr [ %159, %158 ], [ %154, %147 ]
  %162 = icmp eq ptr %161, %4
  br i1 %162, label %169, label %163

163:                                              ; preds = %160
  br i1 %156, label %164, label %168

164:                                              ; preds = %163
  %165 = load ptr, ptr %4, align 8, !tbaa !32
  %166 = icmp eq ptr %165, null
  br i1 %166, label %168, label %167

167:                                              ; preds = %164
  tail call void @bitmap_copy(ptr noundef %161, ptr noundef nonnull %4) #18
  br label %169

168:                                              ; preds = %164, %163
  tail call void @bitmap_clear(ptr noundef %161) #18
  br label %169

169:                                              ; preds = %46, %51, %168, %167, %160, %102, %107, %34, %33, %26
  ret void
}

declare ptr @fold_build2_stat_loc(i32 noundef, i32 noundef, ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

; Function Attrs: inlinehint nounwind sspstrong uwtable
define internal fastcc zeroext i8 @value_ranges_intersect_p(ptr nocapture noundef readonly %0, ptr nocapture noundef readonly %1) unnamed_addr #2 {
  %3 = getelementptr inbounds %struct.value_range_d, ptr %0, i64 0, i32 2
  %4 = load ptr, ptr %3, align 8, !tbaa !31
  %5 = getelementptr inbounds %struct.value_range_d, ptr %1, i64 0, i32 1
  %6 = load ptr, ptr %5, align 8, !tbaa !25
  %7 = tail call fastcc i32 @operand_less_p(ptr noundef %4, ptr noundef %6)
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %9, label %17

9:                                                ; preds = %2
  %10 = getelementptr inbounds %struct.value_range_d, ptr %1, i64 0, i32 2
  %11 = load ptr, ptr %10, align 8, !tbaa !31
  %12 = getelementptr inbounds %struct.value_range_d, ptr %0, i64 0, i32 1
  %13 = load ptr, ptr %12, align 8, !tbaa !25
  %14 = tail call fastcc i32 @operand_less_p(ptr noundef %11, ptr noundef %13)
  %15 = icmp eq i32 %14, 0
  %16 = zext i1 %15 to i8
  br label %17

17:                                               ; preds = %9, %2
  %18 = phi i8 [ 0, %2 ], [ %16, %9 ]
  ret i8 %18
}

declare ptr @size_int_kind(i64 noundef, i32 noundef) local_unnamed_addr #3

; Function Attrs: inlinehint nounwind sspstrong uwtable
define internal fastcc ptr @negative_overflow_infinity(ptr nocapture noundef readonly %0) unnamed_addr #2 {
  %2 = load i64, ptr %0, align 8
  %3 = trunc i64 %2 to i32
  %4 = and i32 %3, 65535
  %5 = add nsw i32 %4, -6
  %6 = icmp ult i32 %5, 3
  br i1 %6, label %7, label %10

7:                                                ; preds = %1
  %8 = getelementptr inbounds %struct.tree_type, ptr %0, i64 0, i32 13
  %9 = load ptr, ptr %8, align 8, !tbaa !16
  br label %10

10:                                               ; preds = %1, %7
  %11 = phi ptr [ %9, %7 ], [ null, %1 ]
  %12 = tail call ptr @copy_node_stat(ptr noundef %11) #18
  %13 = load i64, ptr %12, align 8
  %14 = or i64 %13, 134217728
  store i64 %14, ptr %12, align 8
  ret ptr %12
}

declare zeroext i8 @bitmap_ior_into(ptr noundef, ptr noundef) local_unnamed_addr #3

declare i32 @tree_int_cst_lt(ptr noundef, ptr noundef) local_unnamed_addr #3

declare ptr @fold_binary_loc(i32 noundef, i32 noundef, ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

; Function Attrs: inlinehint nounwind sspstrong uwtable
define internal fastcc zeroext i8 @range_is_null(ptr nocapture noundef readonly %0) unnamed_addr #2 {
  %2 = load i32, ptr %0, align 8, !tbaa !23
  %3 = icmp eq i32 %2, 1
  br i1 %3, label %4, label %15

4:                                                ; preds = %1
  %5 = getelementptr inbounds %struct.value_range_d, ptr %0, i64 0, i32 1
  %6 = load ptr, ptr %5, align 8, !tbaa !25
  %7 = tail call i32 @integer_zerop(ptr noundef %6) #18
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %15, label %9

9:                                                ; preds = %4
  %10 = getelementptr inbounds %struct.value_range_d, ptr %0, i64 0, i32 2
  %11 = load ptr, ptr %10, align 8, !tbaa !31
  %12 = tail call i32 @integer_zerop(ptr noundef %11) #18
  %13 = icmp ne i32 %12, 0
  %14 = zext i1 %13 to i8
  br label %15

15:                                               ; preds = %9, %4, %1
  %16 = phi i8 [ 0, %4 ], [ 0, %1 ], [ %14, %9 ]
  ret i8 %16
}

; Function Attrs: inlinehint nounwind sspstrong uwtable
define internal fastcc void @set_value_range_to_null(ptr nocapture noundef %0, ptr noundef %1) unnamed_addr #2 {
  %3 = tail call ptr @build_int_cst(ptr noundef %1, i64 noundef 0) #18
  %4 = getelementptr inbounds %struct.value_range_d, ptr %0, i64 0, i32 3
  %5 = load ptr, ptr %4, align 8, !tbaa !26
  %6 = tail call zeroext i8 @is_gimple_min_invariant(ptr noundef %3) #18
  %7 = icmp eq i8 %6, 0
  br i1 %7, label %8, label %9

8:                                                ; preds = %2
  tail call void @fancy_abort(ptr noundef nonnull @.str.27, i32 noundef 515, ptr noundef nonnull @.str.28) #18
  br label %9

9:                                                ; preds = %8, %2
  %10 = tail call fastcc ptr @avoid_overflow_infinity(ptr noundef %3)
  store i32 1, ptr %0, align 8, !tbaa !23
  %11 = getelementptr inbounds %struct.value_range_d, ptr %0, i64 0, i32 1
  store ptr %10, ptr %11, align 8, !tbaa !25
  %12 = getelementptr inbounds %struct.value_range_d, ptr %0, i64 0, i32 2
  store ptr %10, ptr %12, align 8, !tbaa !31
  %13 = load ptr, ptr %4, align 8, !tbaa !26
  %14 = icmp eq ptr %13, null
  %15 = icmp ne ptr %5, null
  %16 = and i1 %15, %14
  br i1 %16, label %17, label %19

17:                                               ; preds = %9
  %18 = tail call ptr @bitmap_obstack_alloc_stat(ptr noundef null) #18
  store ptr %18, ptr %4, align 8, !tbaa !26
  br label %19

19:                                               ; preds = %17, %9
  %20 = phi ptr [ %18, %17 ], [ %13, %9 ]
  %21 = icmp eq ptr %20, %5
  br i1 %21, label %28, label %22

22:                                               ; preds = %19
  br i1 %15, label %23, label %27

23:                                               ; preds = %22
  %24 = load ptr, ptr %5, align 8, !tbaa !32
  %25 = icmp eq ptr %24, null
  br i1 %25, label %27, label %26

26:                                               ; preds = %23
  tail call void @bitmap_copy(ptr noundef %20, ptr noundef nonnull %5) #18
  br label %28

27:                                               ; preds = %23, %22
  tail call void @bitmap_clear(ptr noundef %20) #18
  br label %28

28:                                               ; preds = %19, %26, %27
  ret void
}

; Function Attrs: inlinehint nounwind sspstrong uwtable
define internal fastcc zeroext i8 @overflow_infinity_range_p(ptr nocapture noundef readonly %0) unnamed_addr #2 {
  %2 = load i32, ptr %0, align 8, !tbaa !23
  %3 = icmp eq i32 %2, 1
  br i1 %3, label %4, label %107

4:                                                ; preds = %1
  %5 = getelementptr inbounds %struct.value_range_d, ptr %0, i64 0, i32 1
  %6 = load ptr, ptr %5, align 8, !tbaa !25
  %7 = getelementptr inbounds %struct.tree_common, ptr %6, i64 0, i32 2
  %8 = load ptr, ptr %7, align 8, !tbaa !16
  %9 = load i64, ptr %8, align 8
  %10 = trunc i64 %9 to i32
  %11 = and i32 %10, 65535
  %12 = add nsw i32 %11, -6
  %13 = icmp ult i32 %12, 3
  br i1 %13, label %14, label %55

14:                                               ; preds = %4
  %15 = and i64 %9, 2097152
  %16 = icmp ne i64 %15, 0
  %17 = load i32, ptr @flag_wrapv, align 4
  %18 = icmp ne i32 %17, 0
  %19 = select i1 %16, i1 true, i1 %18
  br i1 %19, label %55, label %20

20:                                               ; preds = %14
  %21 = load i64, ptr %6, align 8
  %22 = and i64 %21, 65535
  %23 = getelementptr inbounds [0 x i32], ptr @tree_code_type, i64 0, i64 %22
  %24 = load i32, ptr %23, align 4, !tbaa !16
  %25 = icmp ne i32 %24, 1
  %26 = and i64 %21, 134217728
  %27 = icmp eq i64 %26, 0
  %28 = or i1 %25, %27
  br i1 %28, label %55, label %29

29:                                               ; preds = %20
  %30 = getelementptr inbounds %struct.tree_type, ptr %8, i64 0, i32 13
  %31 = load ptr, ptr %30, align 8, !tbaa !16
  %32 = icmp eq ptr %31, %6
  br i1 %32, label %107, label %33

33:                                               ; preds = %29
  %34 = icmp eq ptr %31, null
  br i1 %34, label %45, label %35

35:                                               ; preds = %33
  %36 = tail call i32 @operand_equal_p(ptr noundef nonnull %6, ptr noundef nonnull %31, i32 noundef 0) #18
  %37 = icmp eq i32 %36, 0
  br i1 %37, label %38, label %107

38:                                               ; preds = %35
  %39 = load ptr, ptr %7, align 8, !tbaa !16
  %40 = load i64, ptr %39, align 8
  %41 = trunc i64 %40 to i32
  %42 = and i32 %41, 65535
  %43 = add nsw i32 %42, -6
  %44 = icmp ult i32 %43, 3
  br i1 %44, label %45, label %55

45:                                               ; preds = %38, %33
  %46 = phi ptr [ %39, %38 ], [ %8, %33 ]
  %47 = getelementptr inbounds %struct.tree_type, ptr %46, i64 0, i32 14
  %48 = load ptr, ptr %47, align 8, !tbaa !16
  %49 = icmp eq ptr %48, %6
  br i1 %49, label %107, label %50

50:                                               ; preds = %45
  %51 = icmp eq ptr %48, null
  br i1 %51, label %55, label %52

52:                                               ; preds = %50
  %53 = tail call i32 @operand_equal_p(ptr noundef nonnull %6, ptr noundef nonnull %48, i32 noundef 0) #18
  %54 = icmp eq i32 %53, 0
  br i1 %54, label %55, label %107

55:                                               ; preds = %4, %38, %50, %14, %20, %52
  %56 = getelementptr inbounds %struct.value_range_d, ptr %0, i64 0, i32 2
  %57 = load ptr, ptr %56, align 8, !tbaa !31
  %58 = getelementptr inbounds %struct.tree_common, ptr %57, i64 0, i32 2
  %59 = load ptr, ptr %58, align 8, !tbaa !16
  %60 = load i64, ptr %59, align 8
  %61 = trunc i64 %60 to i32
  %62 = and i32 %61, 65535
  %63 = add nsw i32 %62, -6
  %64 = icmp ult i32 %63, 3
  br i1 %64, label %65, label %107

65:                                               ; preds = %55
  %66 = and i64 %60, 2097152
  %67 = icmp ne i64 %66, 0
  %68 = load i32, ptr @flag_wrapv, align 4
  %69 = icmp ne i32 %68, 0
  %70 = select i1 %67, i1 true, i1 %69
  br i1 %70, label %107, label %71

71:                                               ; preds = %65
  %72 = load i64, ptr %57, align 8
  %73 = and i64 %72, 65535
  %74 = getelementptr inbounds [0 x i32], ptr @tree_code_type, i64 0, i64 %73
  %75 = load i32, ptr %74, align 4, !tbaa !16
  %76 = icmp ne i32 %75, 1
  %77 = and i64 %72, 134217728
  %78 = icmp eq i64 %77, 0
  %79 = or i1 %76, %78
  br i1 %79, label %107, label %80

80:                                               ; preds = %71
  %81 = getelementptr inbounds %struct.tree_type, ptr %59, i64 0, i32 13
  %82 = load ptr, ptr %81, align 8, !tbaa !16
  %83 = icmp eq ptr %82, %57
  br i1 %83, label %107, label %84

84:                                               ; preds = %80
  %85 = icmp eq ptr %82, null
  br i1 %85, label %96, label %86

86:                                               ; preds = %84
  %87 = tail call i32 @operand_equal_p(ptr noundef nonnull %57, ptr noundef nonnull %82, i32 noundef 0) #18
  %88 = icmp eq i32 %87, 0
  br i1 %88, label %89, label %107

89:                                               ; preds = %86
  %90 = load ptr, ptr %58, align 8, !tbaa !16
  %91 = load i64, ptr %90, align 8
  %92 = trunc i64 %91 to i32
  %93 = and i32 %92, 65535
  %94 = add nsw i32 %93, -6
  %95 = icmp ult i32 %94, 3
  br i1 %95, label %96, label %107

96:                                               ; preds = %89, %84
  %97 = phi ptr [ %90, %89 ], [ %59, %84 ]
  %98 = getelementptr inbounds %struct.tree_type, ptr %97, i64 0, i32 14
  %99 = load ptr, ptr %98, align 8, !tbaa !16
  %100 = icmp eq ptr %99, %57
  br i1 %100, label %107, label %101

101:                                              ; preds = %96
  %102 = icmp eq ptr %99, null
  br i1 %102, label %107, label %103

103:                                              ; preds = %101
  %104 = tail call i32 @operand_equal_p(ptr noundef nonnull %57, ptr noundef nonnull %99, i32 noundef 0) #18
  %105 = icmp ne i32 %104, 0
  %106 = zext i1 %105 to i8
  br label %107

107:                                              ; preds = %29, %45, %35, %103, %101, %96, %89, %86, %80, %71, %65, %55, %52, %1
  %108 = phi i8 [ 0, %1 ], [ 1, %52 ], [ 0, %71 ], [ 0, %65 ], [ 1, %86 ], [ 1, %96 ], [ 0, %101 ], [ %106, %103 ], [ 0, %89 ], [ 0, %55 ], [ 1, %80 ], [ 1, %35 ], [ 1, %45 ], [ 1, %29 ]
  ret i8 %108
}

; Function Attrs: inlinehint nounwind sspstrong uwtable
define internal fastcc void @set_value_range_to_truthvalue(ptr nocapture noundef %0, ptr noundef %1) unnamed_addr #2 {
  %3 = getelementptr inbounds %struct.tree_type, ptr %1, i64 0, i32 6
  %4 = load i32, ptr %3, align 4
  %5 = and i32 %4, 1023
  %6 = icmp eq i32 %5, 1
  br i1 %6, label %7, label %13

7:                                                ; preds = %2
  store i32 3, ptr %0, align 8, !tbaa !23
  %8 = getelementptr inbounds %struct.value_range_d, ptr %0, i64 0, i32 1
  %9 = getelementptr inbounds %struct.value_range_d, ptr %0, i64 0, i32 3
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %8, i8 0, i64 16, i1 false)
  %10 = load ptr, ptr %9, align 8, !tbaa !26
  %11 = icmp eq ptr %10, null
  br i1 %11, label %18, label %12

12:                                               ; preds = %7
  tail call void @bitmap_clear(ptr noundef nonnull %10) #18
  br label %18

13:                                               ; preds = %2
  %14 = tail call ptr @build_int_cst(ptr noundef nonnull %1, i64 noundef 0) #18
  %15 = tail call ptr @build_int_cst(ptr noundef nonnull %1, i64 noundef 1) #18
  store i32 1, ptr %0, align 8, !tbaa !23
  %16 = getelementptr inbounds %struct.value_range_d, ptr %0, i64 0, i32 1
  store ptr %14, ptr %16, align 8, !tbaa !25
  %17 = getelementptr inbounds %struct.value_range_d, ptr %0, i64 0, i32 2
  store ptr %15, ptr %17, align 8, !tbaa !31
  br label %18

18:                                               ; preds = %13, %12, %7
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc ptr @vrp_int_const_binop(i32 noundef %0, ptr noundef %1, ptr noundef %2) unnamed_addr #9 {
  %4 = alloca i8, align 1
  %5 = alloca i8, align 1
  %6 = tail call ptr @int_const_binop(i32 noundef %0, ptr noundef %1, ptr noundef %2, i32 noundef 0) #18
  %7 = getelementptr inbounds %struct.tree_common, ptr %1, i64 0, i32 2
  %8 = load ptr, ptr %7, align 8, !tbaa !16
  %9 = load i64, ptr %8, align 8
  %10 = and i64 %9, 2097152
  %11 = icmp eq i64 %10, 0
  br i1 %11, label %52, label %12

12:                                               ; preds = %3
  call void @llvm.lifetime.start.p0(i64 1, ptr nonnull %5) #18
  store i8 0, ptr %5, align 1, !tbaa !16
  %13 = call fastcc i32 @compare_values_warnv(ptr noundef %6, ptr noundef nonnull %1, ptr noundef nonnull %5)
  %14 = load i8, ptr %5, align 1, !tbaa !16
  %15 = icmp eq i8 %14, 0
  br i1 %15, label %23, label %16

16:                                               ; preds = %12
  %17 = call zeroext i8 @is_gimple_min_invariant(ptr noundef %6) #18
  %18 = icmp eq i8 %17, 0
  br i1 %18, label %22, label %19

19:                                               ; preds = %16
  %20 = call zeroext i8 @is_gimple_min_invariant(ptr noundef nonnull %1) #18
  %21 = icmp eq i8 %20, 0
  br i1 %21, label %22, label %23

22:                                               ; preds = %19, %16
  br label %23

23:                                               ; preds = %12, %19, %22
  %24 = phi i32 [ %13, %19 ], [ -2, %22 ], [ %13, %12 ]
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %5) #18
  %25 = icmp ne i32 %0, 63
  %26 = icmp ult i32 %24, 2
  %27 = select i1 %25, i1 true, i1 %26
  br i1 %27, label %28, label %48

28:                                               ; preds = %23
  switch i32 %0, label %456 [
    i32 64, label %29
    i32 65, label %30
  ]

29:                                               ; preds = %28
  switch i32 %24, label %48 [
    i32 -1, label %456
    i32 0, label %456
  ]

30:                                               ; preds = %28
  %31 = call i32 @integer_zerop(ptr noundef nonnull %1) #18
  %32 = icmp eq i32 %31, 0
  br i1 %32, label %33, label %456

33:                                               ; preds = %30
  %34 = call ptr @int_const_binop(i32 noundef 67, ptr noundef %6, ptr noundef nonnull %1, i32 noundef 0) #18
  call void @llvm.lifetime.start.p0(i64 1, ptr nonnull %4) #18
  store i8 0, ptr %4, align 1, !tbaa !16
  %35 = call fastcc i32 @compare_values_warnv(ptr noundef %34, ptr noundef %2, ptr noundef nonnull %4)
  %36 = load i8, ptr %4, align 1, !tbaa !16
  %37 = icmp eq i8 %36, 0
  br i1 %37, label %45, label %38

38:                                               ; preds = %33
  %39 = call zeroext i8 @is_gimple_min_invariant(ptr noundef %34) #18
  %40 = icmp eq i8 %39, 0
  br i1 %40, label %44, label %41

41:                                               ; preds = %38
  %42 = call zeroext i8 @is_gimple_min_invariant(ptr noundef %2) #18
  %43 = icmp eq i8 %42, 0
  br i1 %43, label %44, label %45

44:                                               ; preds = %38, %41
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %4) #18
  br label %48

45:                                               ; preds = %33, %41
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %4) #18
  %46 = freeze i32 %35
  %47 = icmp eq i32 %46, 0
  br i1 %47, label %456, label %48

48:                                               ; preds = %29, %23, %44, %45
  %49 = call ptr @copy_node_stat(ptr noundef %6) #18
  %50 = load i64, ptr %49, align 8
  %51 = or i64 %50, 134217728
  store i64 %51, ptr %49, align 8
  br label %456

52:                                               ; preds = %3
  %53 = load i32, ptr @flag_wrapv, align 4
  %54 = icmp eq i32 %53, 0
  br i1 %54, label %55, label %456

55:                                               ; preds = %52
  %56 = load i64, ptr %6, align 8
  %57 = and i64 %56, 134217728
  %58 = icmp eq i64 %57, 0
  br i1 %58, label %67, label %59

59:                                               ; preds = %55
  %60 = load i64, ptr %1, align 8
  %61 = and i64 %60, 134217728
  %62 = icmp eq i64 %61, 0
  br i1 %62, label %63, label %67

63:                                               ; preds = %59
  %64 = load i64, ptr %2, align 8
  %65 = and i64 %64, 134217728
  %66 = icmp eq i64 %65, 0
  br i1 %66, label %156, label %67

67:                                               ; preds = %63, %59, %55
  %68 = trunc i64 %9 to i32
  %69 = and i32 %68, 65535
  %70 = add nsw i32 %69, -9
  %71 = icmp ult i32 %70, -3
  br i1 %71, label %107, label %72

72:                                               ; preds = %67
  %73 = load i64, ptr %1, align 8
  %74 = and i64 %73, 65535
  %75 = getelementptr inbounds [0 x i32], ptr @tree_code_type, i64 0, i64 %74
  %76 = load i32, ptr %75, align 4, !tbaa !16
  %77 = icmp ne i32 %76, 1
  %78 = and i64 %73, 134217728
  %79 = icmp eq i64 %78, 0
  %80 = or i1 %77, %79
  br i1 %80, label %107, label %81

81:                                               ; preds = %72
  %82 = getelementptr inbounds %struct.tree_type, ptr %8, i64 0, i32 13
  %83 = load ptr, ptr %82, align 8, !tbaa !16
  %84 = icmp eq ptr %83, %1
  br i1 %84, label %156, label %85

85:                                               ; preds = %81
  %86 = icmp eq ptr %83, null
  br i1 %86, label %97, label %87

87:                                               ; preds = %85
  %88 = tail call i32 @operand_equal_p(ptr noundef nonnull %1, ptr noundef nonnull %83, i32 noundef 0) #18
  %89 = icmp eq i32 %88, 0
  br i1 %89, label %90, label %156

90:                                               ; preds = %87
  %91 = load ptr, ptr %7, align 8, !tbaa !16
  %92 = load i64, ptr %91, align 8
  %93 = trunc i64 %92 to i32
  %94 = and i32 %93, 65535
  %95 = add nsw i32 %94, -6
  %96 = icmp ult i32 %95, 3
  br i1 %96, label %97, label %107

97:                                               ; preds = %90, %85
  %98 = phi ptr [ %91, %90 ], [ %8, %85 ]
  %99 = getelementptr inbounds %struct.tree_type, ptr %98, i64 0, i32 14
  %100 = load ptr, ptr %99, align 8, !tbaa !16
  %101 = icmp eq ptr %100, %1
  br i1 %101, label %156, label %102

102:                                              ; preds = %97
  %103 = icmp eq ptr %100, null
  br i1 %103, label %107, label %104

104:                                              ; preds = %102
  %105 = tail call i32 @operand_equal_p(ptr noundef nonnull %1, ptr noundef nonnull %100, i32 noundef 0) #18
  %106 = icmp eq i32 %105, 0
  br i1 %106, label %107, label %156

107:                                              ; preds = %67, %90, %102, %72, %104
  %108 = getelementptr inbounds %struct.tree_common, ptr %2, i64 0, i32 2
  %109 = load ptr, ptr %108, align 8, !tbaa !16
  %110 = load i64, ptr %109, align 8
  %111 = trunc i64 %110 to i32
  %112 = and i32 %111, 65535
  %113 = add nsw i32 %112, -6
  %114 = icmp ult i32 %113, 3
  br i1 %114, label %115, label %456

115:                                              ; preds = %107
  %116 = and i64 %110, 2097152
  %117 = icmp ne i64 %116, 0
  %118 = load i32, ptr @flag_wrapv, align 4
  %119 = icmp ne i32 %118, 0
  %120 = select i1 %117, i1 true, i1 %119
  br i1 %120, label %456, label %121

121:                                              ; preds = %115
  %122 = load i64, ptr %2, align 8
  %123 = and i64 %122, 65535
  %124 = getelementptr inbounds [0 x i32], ptr @tree_code_type, i64 0, i64 %123
  %125 = load i32, ptr %124, align 4, !tbaa !16
  %126 = icmp ne i32 %125, 1
  %127 = and i64 %122, 134217728
  %128 = icmp eq i64 %127, 0
  %129 = or i1 %126, %128
  br i1 %129, label %456, label %130

130:                                              ; preds = %121
  %131 = getelementptr inbounds %struct.tree_type, ptr %109, i64 0, i32 13
  %132 = load ptr, ptr %131, align 8, !tbaa !16
  %133 = icmp eq ptr %132, %2
  br i1 %133, label %156, label %134

134:                                              ; preds = %130
  %135 = icmp eq ptr %132, null
  br i1 %135, label %146, label %136

136:                                              ; preds = %134
  %137 = tail call i32 @operand_equal_p(ptr noundef nonnull %2, ptr noundef nonnull %132, i32 noundef 0) #18
  %138 = icmp eq i32 %137, 0
  br i1 %138, label %139, label %156

139:                                              ; preds = %136
  %140 = load ptr, ptr %108, align 8, !tbaa !16
  %141 = load i64, ptr %140, align 8
  %142 = trunc i64 %141 to i32
  %143 = and i32 %142, 65535
  %144 = add nsw i32 %143, -6
  %145 = icmp ult i32 %144, 3
  br i1 %145, label %146, label %456

146:                                              ; preds = %139, %134
  %147 = phi ptr [ %140, %139 ], [ %109, %134 ]
  %148 = getelementptr inbounds %struct.tree_type, ptr %147, i64 0, i32 14
  %149 = load ptr, ptr %148, align 8, !tbaa !16
  %150 = icmp eq ptr %149, %2
  br i1 %150, label %156, label %151

151:                                              ; preds = %146
  %152 = icmp eq ptr %149, null
  br i1 %152, label %456, label %153

153:                                              ; preds = %151
  %154 = tail call i32 @operand_equal_p(ptr noundef nonnull %2, ptr noundef nonnull %149, i32 noundef 0) #18
  %155 = icmp eq i32 %154, 0
  br i1 %155, label %456, label %156

156:                                              ; preds = %130, %146, %136, %81, %97, %87, %153, %104, %63
  %157 = tail call i32 @tree_int_cst_sgn(ptr noundef nonnull %1) #18
  %158 = freeze i32 %157
  %159 = tail call i32 @tree_int_cst_sgn(ptr noundef %2) #18
  %160 = getelementptr inbounds %struct.tree_common, ptr %6, i64 0, i32 2
  %161 = load ptr, ptr %160, align 8, !tbaa !16
  %162 = load i64, ptr %161, align 8
  %163 = trunc i64 %162 to i32
  %164 = and i32 %163, 65535
  %165 = add nsw i32 %164, -6
  %166 = icmp ult i32 %165, 3
  br i1 %166, label %167, label %193

167:                                              ; preds = %156
  %168 = and i64 %162, 2097152
  %169 = icmp ne i64 %168, 0
  %170 = load i32, ptr @flag_wrapv, align 4
  %171 = icmp ne i32 %170, 0
  %172 = select i1 %169, i1 true, i1 %171
  br i1 %172, label %193, label %173

173:                                              ; preds = %167
  %174 = getelementptr inbounds %struct.tree_type, ptr %161, i64 0, i32 13
  %175 = load ptr, ptr %174, align 8, !tbaa !16
  %176 = getelementptr inbounds %struct.tree_type, ptr %161, i64 0, i32 14
  %177 = load ptr, ptr %176, align 8, !tbaa !16
  %178 = icmp eq ptr %175, null
  br i1 %178, label %456, label %179

179:                                              ; preds = %173
  %180 = load i64, ptr %175, align 8
  %181 = and i64 %180, 65535
  %182 = getelementptr inbounds [0 x i32], ptr @tree_code_type, i64 0, i64 %181
  %183 = load i32, ptr %182, align 4, !tbaa !16
  %184 = icmp eq i32 %183, 1
  %185 = icmp ne ptr %177, null
  %186 = select i1 %184, i1 %185, i1 false
  br i1 %186, label %187, label %456

187:                                              ; preds = %179
  %188 = load i64, ptr %177, align 8
  %189 = and i64 %188, 65535
  %190 = getelementptr inbounds [0 x i32], ptr @tree_code_type, i64 0, i64 %189
  %191 = load i32, ptr %190, align 4, !tbaa !16
  %192 = icmp eq i32 %191, 1
  br i1 %192, label %193, label %456

193:                                              ; preds = %156, %187, %167
  %194 = icmp ne i32 %0, 63
  %195 = icmp eq i32 %158, %159
  %196 = select i1 %194, i1 true, i1 %195
  %197 = xor i1 %196, true
  %198 = icmp eq i32 %0, 64
  %199 = select i1 %198, i1 %195, i1 false
  %200 = select i1 %197, i1 true, i1 %199
  br i1 %200, label %201, label %298

201:                                              ; preds = %193
  %202 = load ptr, ptr %7, align 8, !tbaa !16
  %203 = load i64, ptr %202, align 8
  %204 = trunc i64 %203 to i32
  %205 = and i32 %204, 65535
  %206 = add nsw i32 %205, -6
  %207 = icmp ult i32 %206, 3
  br i1 %207, label %208, label %298

208:                                              ; preds = %201
  %209 = and i64 %203, 2097152
  %210 = icmp ne i64 %209, 0
  %211 = load i32, ptr @flag_wrapv, align 4
  %212 = icmp ne i32 %211, 0
  %213 = select i1 %210, i1 true, i1 %212
  br i1 %213, label %298, label %214

214:                                              ; preds = %208
  %215 = load i64, ptr %1, align 8
  %216 = and i64 %215, 65535
  %217 = getelementptr inbounds [0 x i32], ptr @tree_code_type, i64 0, i64 %216
  %218 = load i32, ptr %217, align 4, !tbaa !16
  %219 = icmp ne i32 %218, 1
  %220 = and i64 %215, 134217728
  %221 = icmp eq i64 %220, 0
  %222 = or i1 %219, %221
  br i1 %222, label %298, label %223

223:                                              ; preds = %214
  %224 = getelementptr inbounds %struct.tree_type, ptr %202, i64 0, i32 13
  %225 = load ptr, ptr %224, align 8, !tbaa !16
  %226 = icmp eq ptr %225, %1
  br i1 %226, label %249, label %227

227:                                              ; preds = %223
  %228 = icmp eq ptr %225, null
  br i1 %228, label %239, label %229

229:                                              ; preds = %227
  %230 = tail call i32 @operand_equal_p(ptr noundef nonnull %1, ptr noundef nonnull %225, i32 noundef 0) #18
  %231 = icmp eq i32 %230, 0
  br i1 %231, label %232, label %249

232:                                              ; preds = %229
  %233 = load ptr, ptr %7, align 8, !tbaa !16
  %234 = load i64, ptr %233, align 8
  %235 = trunc i64 %234 to i32
  %236 = and i32 %235, 65535
  %237 = add nsw i32 %236, -6
  %238 = icmp ult i32 %237, 3
  br i1 %238, label %239, label %298

239:                                              ; preds = %232, %227
  %240 = phi ptr [ %233, %232 ], [ %202, %227 ]
  %241 = getelementptr inbounds %struct.tree_type, ptr %240, i64 0, i32 14
  %242 = load ptr, ptr %241, align 8, !tbaa !16
  %243 = icmp eq ptr %242, %1
  br i1 %243, label %249, label %244

244:                                              ; preds = %239
  %245 = icmp eq ptr %242, null
  br i1 %245, label %298, label %246

246:                                              ; preds = %244
  %247 = tail call i32 @operand_equal_p(ptr noundef nonnull %1, ptr noundef nonnull %242, i32 noundef 0) #18
  %248 = icmp eq i32 %247, 0
  br i1 %248, label %298, label %249

249:                                              ; preds = %223, %239, %229, %246
  %250 = getelementptr inbounds %struct.tree_common, ptr %2, i64 0, i32 2
  %251 = load ptr, ptr %250, align 8, !tbaa !16
  %252 = load i64, ptr %251, align 8
  %253 = trunc i64 %252 to i32
  %254 = and i32 %253, 65535
  %255 = add nsw i32 %254, -6
  %256 = icmp ult i32 %255, 3
  br i1 %256, label %257, label %298

257:                                              ; preds = %249
  %258 = and i64 %252, 2097152
  %259 = icmp ne i64 %258, 0
  %260 = load i32, ptr @flag_wrapv, align 4
  %261 = icmp ne i32 %260, 0
  %262 = select i1 %259, i1 true, i1 %261
  br i1 %262, label %298, label %263

263:                                              ; preds = %257
  %264 = load i64, ptr %2, align 8
  %265 = and i64 %264, 65535
  %266 = getelementptr inbounds [0 x i32], ptr @tree_code_type, i64 0, i64 %265
  %267 = load i32, ptr %266, align 4, !tbaa !16
  %268 = icmp ne i32 %267, 1
  %269 = and i64 %264, 134217728
  %270 = icmp eq i64 %269, 0
  %271 = or i1 %268, %270
  br i1 %271, label %298, label %272

272:                                              ; preds = %263
  %273 = getelementptr inbounds %struct.tree_type, ptr %251, i64 0, i32 13
  %274 = load ptr, ptr %273, align 8, !tbaa !16
  %275 = icmp eq ptr %274, %2
  br i1 %275, label %456, label %276

276:                                              ; preds = %272
  %277 = icmp eq ptr %274, null
  br i1 %277, label %288, label %278

278:                                              ; preds = %276
  %279 = tail call i32 @operand_equal_p(ptr noundef nonnull %2, ptr noundef nonnull %274, i32 noundef 0) #18
  %280 = icmp eq i32 %279, 0
  br i1 %280, label %281, label %456

281:                                              ; preds = %278
  %282 = load ptr, ptr %250, align 8, !tbaa !16
  %283 = load i64, ptr %282, align 8
  %284 = trunc i64 %283 to i32
  %285 = and i32 %284, 65535
  %286 = add nsw i32 %285, -6
  %287 = icmp ult i32 %286, 3
  br i1 %287, label %288, label %298

288:                                              ; preds = %281, %276
  %289 = phi ptr [ %282, %281 ], [ %251, %276 ]
  %290 = getelementptr inbounds %struct.tree_type, ptr %289, i64 0, i32 14
  %291 = load ptr, ptr %290, align 8, !tbaa !16
  %292 = icmp eq ptr %291, %2
  br i1 %292, label %456, label %293

293:                                              ; preds = %288
  %294 = icmp eq ptr %291, null
  br i1 %294, label %298, label %295

295:                                              ; preds = %293
  %296 = tail call i32 @operand_equal_p(ptr noundef nonnull %2, ptr noundef nonnull %291, i32 noundef 0) #18
  %297 = icmp eq i32 %296, 0
  br i1 %297, label %298, label %456

298:                                              ; preds = %193, %249, %281, %293, %257, %263, %201, %232, %244, %208, %214, %295, %246
  %299 = icmp eq i32 %0, 84
  switch i32 %0, label %398 [
    i32 84, label %300
    i32 76, label %300
    i32 70, label %300
    i32 69, label %300
    i32 68, label %300
    i32 67, label %300
    i32 65, label %397
  ]

300:                                              ; preds = %298, %298, %298, %298, %298, %298
  %301 = load ptr, ptr %7, align 8, !tbaa !16
  %302 = load i64, ptr %301, align 8
  %303 = trunc i64 %302 to i32
  %304 = and i32 %303, 65535
  %305 = add nsw i32 %304, -6
  %306 = icmp ult i32 %305, 3
  br i1 %306, label %307, label %348

307:                                              ; preds = %300
  %308 = and i64 %302, 2097152
  %309 = icmp ne i64 %308, 0
  %310 = load i32, ptr @flag_wrapv, align 4
  %311 = icmp ne i32 %310, 0
  %312 = select i1 %309, i1 true, i1 %311
  br i1 %312, label %348, label %313

313:                                              ; preds = %307
  %314 = load i64, ptr %1, align 8
  %315 = and i64 %314, 65535
  %316 = getelementptr inbounds [0 x i32], ptr @tree_code_type, i64 0, i64 %315
  %317 = load i32, ptr %316, align 4, !tbaa !16
  %318 = icmp ne i32 %317, 1
  %319 = and i64 %314, 134217728
  %320 = icmp eq i64 %319, 0
  %321 = or i1 %318, %320
  br i1 %321, label %348, label %322

322:                                              ; preds = %313
  %323 = getelementptr inbounds %struct.tree_type, ptr %301, i64 0, i32 13
  %324 = load ptr, ptr %323, align 8, !tbaa !16
  %325 = icmp eq ptr %324, %1
  br i1 %325, label %456, label %326

326:                                              ; preds = %322
  %327 = icmp eq ptr %324, null
  br i1 %327, label %338, label %328

328:                                              ; preds = %326
  %329 = tail call i32 @operand_equal_p(ptr noundef nonnull %1, ptr noundef nonnull %324, i32 noundef 0) #18
  %330 = icmp eq i32 %329, 0
  br i1 %330, label %331, label %456

331:                                              ; preds = %328
  %332 = load ptr, ptr %7, align 8, !tbaa !16
  %333 = load i64, ptr %332, align 8
  %334 = trunc i64 %333 to i32
  %335 = and i32 %334, 65535
  %336 = add nsw i32 %335, -6
  %337 = icmp ult i32 %336, 3
  br i1 %337, label %338, label %348

338:                                              ; preds = %331, %326
  %339 = phi ptr [ %332, %331 ], [ %301, %326 ]
  %340 = getelementptr inbounds %struct.tree_type, ptr %339, i64 0, i32 14
  %341 = load ptr, ptr %340, align 8, !tbaa !16
  %342 = icmp eq ptr %341, %1
  br i1 %342, label %456, label %343

343:                                              ; preds = %338
  %344 = icmp eq ptr %341, null
  br i1 %344, label %348, label %345

345:                                              ; preds = %343
  %346 = tail call i32 @operand_equal_p(ptr noundef nonnull %1, ptr noundef nonnull %341, i32 noundef 0) #18
  %347 = icmp eq i32 %346, 0
  br i1 %347, label %348, label %456

348:                                              ; preds = %300, %331, %343, %307, %313, %345
  %349 = getelementptr inbounds %struct.tree_common, ptr %2, i64 0, i32 2
  %350 = load ptr, ptr %349, align 8, !tbaa !16
  %351 = load i64, ptr %350, align 8
  %352 = trunc i64 %351 to i32
  %353 = and i32 %352, 65535
  %354 = add nsw i32 %353, -6
  %355 = icmp ult i32 %354, 3
  br i1 %355, label %356, label %416

356:                                              ; preds = %348
  %357 = and i64 %351, 2097152
  %358 = icmp ne i64 %357, 0
  %359 = load i32, ptr @flag_wrapv, align 4
  %360 = icmp ne i32 %359, 0
  %361 = select i1 %358, i1 true, i1 %360
  br i1 %361, label %416, label %362

362:                                              ; preds = %356
  %363 = load i64, ptr %2, align 8
  %364 = and i64 %363, 65535
  %365 = getelementptr inbounds [0 x i32], ptr @tree_code_type, i64 0, i64 %364
  %366 = load i32, ptr %365, align 4, !tbaa !16
  %367 = icmp ne i32 %366, 1
  %368 = and i64 %363, 134217728
  %369 = icmp eq i64 %368, 0
  %370 = or i1 %367, %369
  br i1 %370, label %416, label %371

371:                                              ; preds = %362
  %372 = getelementptr inbounds %struct.tree_type, ptr %350, i64 0, i32 13
  %373 = load ptr, ptr %372, align 8, !tbaa !16
  %374 = icmp eq ptr %373, %2
  br i1 %374, label %456, label %375

375:                                              ; preds = %371
  %376 = icmp eq ptr %373, null
  br i1 %376, label %387, label %377

377:                                              ; preds = %375
  %378 = tail call i32 @operand_equal_p(ptr noundef nonnull %2, ptr noundef nonnull %373, i32 noundef 0) #18
  %379 = icmp eq i32 %378, 0
  br i1 %379, label %380, label %456

380:                                              ; preds = %377
  %381 = load ptr, ptr %349, align 8, !tbaa !16
  %382 = load i64, ptr %381, align 8
  %383 = trunc i64 %382 to i32
  %384 = and i32 %383, 65535
  %385 = add nsw i32 %384, -6
  %386 = icmp ult i32 %385, 3
  br i1 %386, label %387, label %416

387:                                              ; preds = %380, %375
  %388 = phi ptr [ %381, %380 ], [ %350, %375 ]
  %389 = getelementptr inbounds %struct.tree_type, ptr %388, i64 0, i32 14
  %390 = load ptr, ptr %389, align 8, !tbaa !16
  %391 = icmp eq ptr %390, %2
  br i1 %391, label %456, label %392

392:                                              ; preds = %387
  %393 = icmp eq ptr %390, null
  br i1 %393, label %416, label %394

394:                                              ; preds = %392
  %395 = tail call i32 @operand_equal_p(ptr noundef nonnull %2, ptr noundef nonnull %390, i32 noundef 0) #18
  %396 = icmp eq i32 %395, 0
  br i1 %396, label %416, label %456

397:                                              ; preds = %298
  br i1 %195, label %420, label %438

398:                                              ; preds = %298
  br i1 %194, label %407, label %399

399:                                              ; preds = %398
  %400 = icmp sgt i32 %158, -1
  br i1 %400, label %401, label %404

401:                                              ; preds = %399
  %402 = tail call fastcc zeroext i8 @is_negative_overflow_infinity(ptr noundef %2), !range !79
  %403 = icmp eq i8 %402, 0
  br i1 %403, label %420, label %438

404:                                              ; preds = %399
  %405 = tail call fastcc zeroext i8 @is_positive_overflow_infinity(ptr noundef %2), !range !79
  %406 = icmp eq i8 %405, 0
  br i1 %406, label %438, label %420

407:                                              ; preds = %398
  br i1 %198, label %408, label %416

408:                                              ; preds = %407
  %409 = icmp sgt i32 %158, -1
  br i1 %409, label %410, label %413

410:                                              ; preds = %408
  %411 = tail call fastcc zeroext i8 @is_positive_overflow_infinity(ptr noundef %2), !range !79
  %412 = icmp eq i8 %411, 0
  br i1 %412, label %420, label %438

413:                                              ; preds = %408
  %414 = tail call fastcc zeroext i8 @is_negative_overflow_infinity(ptr noundef %2), !range !79
  %415 = icmp eq i8 %414, 0
  br i1 %415, label %438, label %420

416:                                              ; preds = %394, %362, %356, %392, %380, %348, %407
  %417 = icmp sgt i32 %158, -1
  %418 = and i1 %299, %417
  br i1 %418, label %420, label %419

419:                                              ; preds = %416
  switch i32 %0, label %438 [
    i32 76, label %420
    i32 70, label %420
    i32 69, label %420
    i32 68, label %420
    i32 67, label %420
  ]

420:                                              ; preds = %419, %419, %419, %419, %419, %416, %413, %410, %404, %401, %397
  %421 = load ptr, ptr %160, align 8, !tbaa !16
  %422 = load i64, ptr %421, align 8
  %423 = trunc i64 %422 to i32
  %424 = and i32 %423, 65535
  %425 = add nsw i32 %424, -6
  %426 = icmp ult i32 %425, 3
  br i1 %426, label %427, label %435

427:                                              ; preds = %420
  %428 = and i64 %422, 2097152
  %429 = icmp ne i64 %428, 0
  %430 = load i32, ptr @flag_wrapv, align 4
  %431 = icmp ne i32 %430, 0
  %432 = select i1 %429, i1 true, i1 %431
  br i1 %432, label %435, label %433

433:                                              ; preds = %427
  %434 = tail call fastcc ptr @positive_overflow_infinity(ptr noundef nonnull %421)
  br label %456

435:                                              ; preds = %420, %427
  %436 = getelementptr inbounds %struct.tree_type, ptr %421, i64 0, i32 14
  %437 = load ptr, ptr %436, align 8, !tbaa !16
  br label %456

438:                                              ; preds = %397, %401, %404, %413, %410, %419
  %439 = load ptr, ptr %160, align 8, !tbaa !16
  %440 = load i64, ptr %439, align 8
  %441 = trunc i64 %440 to i32
  %442 = and i32 %441, 65535
  %443 = add nsw i32 %442, -6
  %444 = icmp ult i32 %443, 3
  br i1 %444, label %445, label %453

445:                                              ; preds = %438
  %446 = and i64 %440, 2097152
  %447 = icmp ne i64 %446, 0
  %448 = load i32, ptr @flag_wrapv, align 4
  %449 = icmp ne i32 %448, 0
  %450 = select i1 %447, i1 true, i1 %449
  br i1 %450, label %453, label %451

451:                                              ; preds = %445
  %452 = tail call fastcc ptr @negative_overflow_infinity(ptr noundef nonnull %439)
  br label %456

453:                                              ; preds = %438, %445
  %454 = getelementptr inbounds %struct.tree_type, ptr %439, i64 0, i32 13
  %455 = load ptr, ptr %454, align 8, !tbaa !16
  br label %456

456:                                              ; preds = %371, %387, %377, %322, %338, %328, %272, %288, %278, %173, %179, %107, %139, %151, %115, %121, %45, %29, %29, %28, %30, %153, %52, %48, %187, %295, %394, %345, %435, %433, %453, %451
  %457 = phi ptr [ null, %187 ], [ null, %295 ], [ null, %394 ], [ null, %345 ], [ %434, %433 ], [ %437, %435 ], [ %452, %451 ], [ %455, %453 ], [ %6, %52 ], [ %6, %153 ], [ %49, %48 ], [ %6, %30 ], [ %6, %28 ], [ %6, %29 ], [ %6, %29 ], [ %6, %45 ], [ %6, %121 ], [ %6, %115 ], [ %6, %151 ], [ %6, %139 ], [ %6, %107 ], [ null, %179 ], [ null, %173 ], [ null, %278 ], [ null, %288 ], [ null, %272 ], [ null, %328 ], [ null, %338 ], [ null, %322 ], [ null, %377 ], [ null, %387 ], [ null, %371 ]
  ret ptr %457
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc zeroext i8 @vrp_expr_computes_nonnegative(ptr noundef %0, ptr noundef %1) unnamed_addr #9 {
  %3 = alloca i8, align 1
  %4 = tail call zeroext i8 @tree_expr_nonnegative_warnv_p(ptr noundef %0, ptr noundef %1) #18
  %5 = icmp eq i8 %4, 0
  br i1 %5, label %6, label %34

6:                                                ; preds = %2
  %7 = load i64, ptr %0, align 8
  %8 = and i64 %7, 65535
  %9 = icmp eq i64 %8, 141
  br i1 %9, label %10, label %34

10:                                               ; preds = %6
  %11 = tail call fastcc ptr @get_value_range(ptr noundef nonnull %0)
  %12 = icmp eq ptr %11, null
  br i1 %12, label %34, label %13

13:                                               ; preds = %10
  %14 = load i32, ptr %11, align 8, !tbaa !23
  %15 = icmp eq i32 %14, 1
  br i1 %15, label %16, label %34

16:                                               ; preds = %13
  %17 = getelementptr inbounds %struct.value_range_d, ptr %11, i64 0, i32 1
  %18 = load ptr, ptr %17, align 8, !tbaa !25
  %19 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 13), align 8, !tbaa !5
  call void @llvm.lifetime.start.p0(i64 1, ptr nonnull %3) #18
  store i8 0, ptr %3, align 1, !tbaa !16
  %20 = call fastcc i32 @compare_values_warnv(ptr noundef %18, ptr noundef %19, ptr noundef nonnull %3)
  %21 = load i8, ptr %3, align 1, !tbaa !16
  %22 = icmp eq i8 %21, 0
  br i1 %22, label %30, label %23

23:                                               ; preds = %16
  %24 = call zeroext i8 @is_gimple_min_invariant(ptr noundef %18) #18
  %25 = icmp eq i8 %24, 0
  br i1 %25, label %29, label %26

26:                                               ; preds = %23
  %27 = call zeroext i8 @is_gimple_min_invariant(ptr noundef %19) #18
  %28 = icmp eq i8 %27, 0
  br i1 %28, label %29, label %30

29:                                               ; preds = %26, %23
  br label %30

30:                                               ; preds = %29, %26, %16
  %31 = phi i32 [ %20, %26 ], [ -2, %29 ], [ %20, %16 ]
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %3) #18
  %32 = icmp ult i32 %31, 2
  %33 = zext i1 %32 to i8
  br label %34

34:                                               ; preds = %30, %13, %10, %6, %2
  %35 = phi i8 [ 1, %2 ], [ 0, %6 ], [ %33, %30 ], [ 0, %10 ], [ 0, %13 ]
  ret i8 %35
}

; Function Attrs: inlinehint nounwind sspstrong uwtable
define internal fastcc zeroext i8 @range_includes_zero_p(ptr nocapture noundef readonly %0) unnamed_addr #2 {
  %2 = load i32, ptr %0, align 8, !tbaa !23
  switch i32 %2, label %3 [
    i32 0, label %13
    i32 3, label %13
  ]

3:                                                ; preds = %1
  %4 = getelementptr inbounds %struct.value_range_d, ptr %0, i64 0, i32 1
  %5 = load ptr, ptr %4, align 8, !tbaa !25
  %6 = tail call zeroext i8 @is_gimple_min_invariant(ptr noundef %5) #18
  %7 = icmp eq i8 %6, 0
  br i1 %7, label %13, label %8

8:                                                ; preds = %3
  %9 = getelementptr inbounds %struct.value_range_d, ptr %0, i64 0, i32 2
  %10 = load ptr, ptr %9, align 8, !tbaa !31
  %11 = tail call zeroext i8 @is_gimple_min_invariant(ptr noundef %10) #18
  %12 = icmp eq i8 %11, 0
  br i1 %12, label %13, label %14

13:                                               ; preds = %3, %1, %1, %8
  tail call void @fancy_abort(ptr noundef nonnull @.str.27, i32 noundef 1344, ptr noundef nonnull @.str.28) #18
  br label %14

14:                                               ; preds = %8, %13
  %15 = getelementptr inbounds %struct.value_range_d, ptr %0, i64 0, i32 1
  %16 = load ptr, ptr %15, align 8, !tbaa !25
  %17 = getelementptr inbounds %struct.tree_common, ptr %16, i64 0, i32 2
  %18 = load ptr, ptr %17, align 8, !tbaa !16
  %19 = tail call ptr @build_int_cst(ptr noundef %18, i64 noundef 0) #18
  %20 = load ptr, ptr %15, align 8, !tbaa !25
  %21 = tail call fastcc i32 @operand_less_p(ptr noundef %19, ptr noundef %20)
  switch i32 %21, label %22 [
    i32 -2, label %30
    i32 1, label %30
  ]

22:                                               ; preds = %14
  %23 = getelementptr inbounds %struct.value_range_d, ptr %0, i64 0, i32 2
  %24 = load ptr, ptr %23, align 8, !tbaa !31
  %25 = tail call fastcc i32 @operand_less_p(ptr noundef %24, ptr noundef %19)
  %26 = icmp eq i32 %25, -2
  br i1 %26, label %30, label %27

27:                                               ; preds = %22
  %28 = icmp eq i32 %25, 0
  %29 = zext i1 %28 to i8
  br label %30

30:                                               ; preds = %14, %14, %22, %27
  %31 = phi i8 [ %29, %27 ], [ 0, %14 ], [ 0, %22 ], [ 0, %14 ]
  ret i8 %31
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc void @abs_extent_range(ptr nocapture noundef %0, ptr noundef %1, ptr noundef %2) unnamed_addr #9 {
  %4 = alloca i8, align 1
  %5 = load i64, ptr %1, align 8
  %6 = and i64 %5, 65535
  %7 = icmp eq i64 %6, 23
  br i1 %7, label %9, label %8

8:                                                ; preds = %3
  tail call void @fancy_abort(ptr noundef nonnull @.str.27, i32 noundef 599, ptr noundef nonnull @.str.28) #18
  br label %9

9:                                                ; preds = %3, %8
  %10 = load i64, ptr %2, align 8
  %11 = and i64 %10, 65535
  %12 = icmp eq i64 %11, 23
  br i1 %12, label %14, label %13

13:                                               ; preds = %9
  tail call void @fancy_abort(ptr noundef nonnull @.str.27, i32 noundef 600, ptr noundef nonnull @.str.28) #18
  br label %14

14:                                               ; preds = %9, %13
  %15 = getelementptr inbounds %struct.tree_common, ptr %1, i64 0, i32 2
  %16 = load ptr, ptr %15, align 8, !tbaa !16
  %17 = load i64, ptr %16, align 8
  %18 = trunc i64 %17 to i32
  %19 = and i32 %18, 65535
  %20 = add nsw i32 %19, -6
  %21 = icmp ult i32 %20, 3
  br i1 %21, label %25, label %22

22:                                               ; preds = %14
  tail call void @fancy_abort(ptr noundef nonnull @.str.27, i32 noundef 601, ptr noundef nonnull @.str.28) #18
  %23 = load ptr, ptr %15, align 8, !tbaa !16
  %24 = load i64, ptr %23, align 8
  br label %25

25:                                               ; preds = %14, %22
  %26 = phi i64 [ %17, %14 ], [ %24, %22 ]
  %27 = phi ptr [ %16, %14 ], [ %23, %22 ]
  %28 = and i64 %26, 2097152
  %29 = icmp eq i64 %28, 0
  br i1 %29, label %32, label %30

30:                                               ; preds = %25
  tail call void @fancy_abort(ptr noundef nonnull @.str.27, i32 noundef 602, ptr noundef nonnull @.str.28) #18
  %31 = load ptr, ptr %15, align 8, !tbaa !16
  br label %32

32:                                               ; preds = %25, %30
  %33 = phi ptr [ %27, %25 ], [ %31, %30 ]
  %34 = tail call ptr @fold_unary_loc(i32 noundef 0, i32 noundef 82, ptr noundef %33, ptr noundef nonnull %1) #18
  %35 = getelementptr inbounds %struct.tree_common, ptr %2, i64 0, i32 2
  %36 = load ptr, ptr %35, align 8, !tbaa !16
  %37 = tail call ptr @fold_unary_loc(i32 noundef 0, i32 noundef 82, ptr noundef %36, ptr noundef nonnull %2) #18
  %38 = load i64, ptr %34, align 8
  %39 = and i64 %38, 134217728
  %40 = icmp eq i64 %39, 0
  br i1 %40, label %41, label %45

41:                                               ; preds = %32
  %42 = load i64, ptr %37, align 8
  %43 = and i64 %42, 134217728
  %44 = icmp eq i64 %43, 0
  br i1 %44, label %51, label %45

45:                                               ; preds = %41, %32
  store i32 3, ptr %0, align 8, !tbaa !23
  %46 = getelementptr inbounds %struct.value_range_d, ptr %0, i64 0, i32 1
  %47 = getelementptr inbounds %struct.value_range_d, ptr %0, i64 0, i32 3
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %46, i8 0, i64 16, i1 false)
  %48 = load ptr, ptr %47, align 8, !tbaa !26
  %49 = icmp eq ptr %48, null
  br i1 %49, label %77, label %50

50:                                               ; preds = %45
  tail call void @bitmap_clear(ptr noundef nonnull %48) #18
  br label %77

51:                                               ; preds = %41
  call void @llvm.lifetime.start.p0(i64 1, ptr nonnull %4) #18
  store i8 0, ptr %4, align 1, !tbaa !16
  %52 = call fastcc i32 @compare_values_warnv(ptr noundef nonnull %34, ptr noundef nonnull %37, ptr noundef nonnull %4)
  %53 = load i8, ptr %4, align 1, !tbaa !16
  %54 = icmp eq i8 %53, 0
  br i1 %54, label %62, label %55

55:                                               ; preds = %51
  %56 = call zeroext i8 @is_gimple_min_invariant(ptr noundef nonnull %34) #18
  %57 = icmp eq i8 %56, 0
  br i1 %57, label %61, label %58

58:                                               ; preds = %55
  %59 = call zeroext i8 @is_gimple_min_invariant(ptr noundef nonnull %37) #18
  %60 = icmp eq i8 %59, 0
  br i1 %60, label %61, label %62

61:                                               ; preds = %58, %55
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %4) #18
  br label %66

62:                                               ; preds = %51, %58
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %4) #18
  %63 = icmp eq i32 %52, -1
  br i1 %63, label %72, label %64

64:                                               ; preds = %62
  %65 = icmp ult i32 %52, 2
  br i1 %65, label %72, label %66

66:                                               ; preds = %61, %64
  store i32 3, ptr %0, align 8, !tbaa !23
  %67 = getelementptr inbounds %struct.value_range_d, ptr %0, i64 0, i32 1
  %68 = getelementptr inbounds %struct.value_range_d, ptr %0, i64 0, i32 3
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %67, i8 0, i64 16, i1 false)
  %69 = load ptr, ptr %68, align 8, !tbaa !26
  %70 = icmp eq ptr %69, null
  br i1 %70, label %77, label %71

71:                                               ; preds = %66
  call void @bitmap_clear(ptr noundef nonnull %69) #18
  br label %77

72:                                               ; preds = %64, %62
  %73 = phi ptr [ %37, %62 ], [ %34, %64 ]
  %74 = getelementptr inbounds %struct.tree_common, ptr %34, i64 0, i32 2
  %75 = load ptr, ptr %74, align 8, !tbaa !16
  %76 = call ptr @fold_unary_loc(i32 noundef 0, i32 noundef 79, ptr noundef %75, ptr noundef nonnull %73) #18
  call fastcc void @set_and_canonicalize_value_range(ptr noundef %0, i32 noundef 1, ptr noundef %76, ptr noundef nonnull %73, ptr noundef null)
  br label %77

77:                                               ; preds = %71, %66, %50, %45, %72
  ret void
}

declare { i64, i64 } @tree_to_double_int(ptr noundef) local_unnamed_addr #3

declare i32 @floor_log2(i64 noundef) local_unnamed_addr #3

declare ptr @double_int_to_tree(ptr noundef, i64, i64) local_unnamed_addr #3

declare zeroext i8 @tree_expr_nonnegative_warnv_p(ptr noundef, ptr noundef) local_unnamed_addr #3

declare ptr @fold_unary_loc(i32 noundef, i32 noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc void @vrp_meet(ptr nocapture noundef %0, ptr nocapture noundef readonly %1) unnamed_addr #9 {
  %3 = alloca i8, align 1
  %4 = alloca i8, align 1
  %5 = load i32, ptr %0, align 8, !tbaa !23
  %6 = icmp eq i32 %5, 0
  %7 = load i32, ptr %1, align 8, !tbaa !23
  br i1 %6, label %8, label %30

8:                                                ; preds = %2
  %9 = getelementptr inbounds %struct.value_range_d, ptr %1, i64 0, i32 1
  %10 = getelementptr inbounds %struct.value_range_d, ptr %1, i64 0, i32 3
  %11 = load ptr, ptr %10, align 8, !tbaa !26
  store i32 %7, ptr %0, align 8, !tbaa !23
  %12 = getelementptr inbounds %struct.value_range_d, ptr %0, i64 0, i32 1
  %13 = load <2 x ptr>, ptr %9, align 8, !tbaa !5
  store <2 x ptr> %13, ptr %12, align 8, !tbaa !5
  %14 = getelementptr inbounds %struct.value_range_d, ptr %0, i64 0, i32 3
  %15 = load ptr, ptr %14, align 8, !tbaa !26
  %16 = icmp eq ptr %15, null
  %17 = icmp ne ptr %11, null
  %18 = and i1 %17, %16
  br i1 %18, label %19, label %21

19:                                               ; preds = %8
  %20 = tail call ptr @bitmap_obstack_alloc_stat(ptr noundef null) #18
  store ptr %20, ptr %14, align 8, !tbaa !26
  br label %21

21:                                               ; preds = %19, %8
  %22 = phi ptr [ %20, %19 ], [ %15, %8 ]
  %23 = icmp eq ptr %22, %11
  br i1 %23, label %261, label %24

24:                                               ; preds = %21
  br i1 %17, label %25, label %29

25:                                               ; preds = %24
  %26 = load ptr, ptr %11, align 8, !tbaa !32
  %27 = icmp eq ptr %26, null
  br i1 %27, label %29, label %28

28:                                               ; preds = %25
  tail call void @bitmap_copy(ptr noundef %22, ptr noundef nonnull %11) #18
  br label %261

29:                                               ; preds = %25, %24
  tail call void @bitmap_clear(ptr noundef %22) #18
  br label %261

30:                                               ; preds = %2
  %31 = icmp eq i32 %7, 0
  %32 = icmp eq i32 %5, 3
  %33 = or i1 %32, %31
  br i1 %33, label %261, label %34

34:                                               ; preds = %30
  %35 = icmp eq i32 %7, 3
  br i1 %35, label %36, label %42

36:                                               ; preds = %34
  store i32 3, ptr %0, align 8, !tbaa !23
  %37 = getelementptr inbounds %struct.value_range_d, ptr %0, i64 0, i32 1
  %38 = getelementptr inbounds %struct.value_range_d, ptr %0, i64 0, i32 3
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %37, i8 0, i64 16, i1 false)
  %39 = load ptr, ptr %38, align 8, !tbaa !26
  %40 = icmp eq ptr %39, null
  br i1 %40, label %261, label %41

41:                                               ; preds = %36
  tail call void @bitmap_clear(ptr noundef nonnull %39) #18
  br label %261

42:                                               ; preds = %34
  %43 = icmp eq i32 %5, 1
  %44 = icmp eq i32 %7, 1
  %45 = and i1 %43, %44
  br i1 %45, label %46, label %129

46:                                               ; preds = %42
  %47 = getelementptr inbounds %struct.value_range_d, ptr %0, i64 0, i32 1
  %48 = load ptr, ptr %47, align 8, !tbaa !25
  %49 = getelementptr inbounds %struct.value_range_d, ptr %1, i64 0, i32 1
  %50 = load ptr, ptr %49, align 8, !tbaa !25
  call void @llvm.lifetime.start.p0(i64 1, ptr nonnull %4) #18
  store i8 0, ptr %4, align 1, !tbaa !16
  %51 = call fastcc i32 @compare_values_warnv(ptr noundef %48, ptr noundef %50, ptr noundef nonnull %4)
  %52 = load i8, ptr %4, align 1, !tbaa !16
  %53 = icmp eq i8 %52, 0
  br i1 %53, label %61, label %54

54:                                               ; preds = %46
  %55 = call zeroext i8 @is_gimple_min_invariant(ptr noundef %48) #18
  %56 = icmp eq i8 %55, 0
  br i1 %56, label %60, label %57

57:                                               ; preds = %54
  %58 = call zeroext i8 @is_gimple_min_invariant(ptr noundef %50) #18
  %59 = icmp eq i8 %58, 0
  br i1 %59, label %60, label %61

60:                                               ; preds = %57, %54
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %4) #18
  br label %206

61:                                               ; preds = %46, %57
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %4) #18
  %62 = icmp ult i32 %51, 2
  br i1 %62, label %65, label %63

63:                                               ; preds = %61
  %64 = icmp eq i32 %51, -1
  br i1 %64, label %65, label %206

65:                                               ; preds = %63, %61
  %66 = phi ptr [ %49, %61 ], [ %47, %63 ]
  %67 = load ptr, ptr %66, align 8, !tbaa !25
  %68 = getelementptr inbounds %struct.value_range_d, ptr %0, i64 0, i32 2
  %69 = load ptr, ptr %68, align 8, !tbaa !31
  %70 = getelementptr inbounds %struct.value_range_d, ptr %1, i64 0, i32 2
  %71 = load ptr, ptr %70, align 8, !tbaa !31
  call void @llvm.lifetime.start.p0(i64 1, ptr nonnull %3) #18
  store i8 0, ptr %3, align 1, !tbaa !16
  %72 = call fastcc i32 @compare_values_warnv(ptr noundef %69, ptr noundef %71, ptr noundef nonnull %3)
  %73 = load i8, ptr %3, align 1, !tbaa !16
  %74 = icmp eq i8 %73, 0
  br i1 %74, label %82, label %75

75:                                               ; preds = %65
  %76 = call zeroext i8 @is_gimple_min_invariant(ptr noundef %69) #18
  %77 = icmp eq i8 %76, 0
  br i1 %77, label %81, label %78

78:                                               ; preds = %75
  %79 = call zeroext i8 @is_gimple_min_invariant(ptr noundef %71) #18
  %80 = icmp eq i8 %79, 0
  br i1 %80, label %81, label %82

81:                                               ; preds = %78, %75
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %3) #18
  br label %206

82:                                               ; preds = %65, %78
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %3) #18
  %83 = add i32 %72, 1
  %84 = icmp ult i32 %83, 2
  br i1 %84, label %87, label %85

85:                                               ; preds = %82
  %86 = icmp eq i32 %72, 1
  br i1 %86, label %87, label %206

87:                                               ; preds = %85, %82
  %88 = phi ptr [ %70, %82 ], [ %68, %85 ]
  %89 = load ptr, ptr %88, align 8, !tbaa !31
  %90 = getelementptr inbounds %struct.tree_common, ptr %67, i64 0, i32 2
  %91 = load ptr, ptr %90, align 8, !tbaa !16
  %92 = load i64, ptr %91, align 8
  %93 = trunc i64 %92 to i32
  %94 = and i32 %93, 65535
  %95 = add nsw i32 %94, -6
  %96 = icmp ult i32 %95, 3
  br i1 %96, label %97, label %115

97:                                               ; preds = %87
  %98 = getelementptr inbounds %struct.tree_type, ptr %91, i64 0, i32 13
  %99 = load ptr, ptr %98, align 8, !tbaa !16
  %100 = icmp eq ptr %99, %67
  br i1 %100, label %109, label %101

101:                                              ; preds = %97
  %102 = icmp eq ptr %99, null
  br i1 %102, label %106, label %103

103:                                              ; preds = %101
  %104 = call i32 @operand_equal_p(ptr noundef nonnull %67, ptr noundef nonnull %99, i32 noundef 0) #18
  %105 = icmp eq i32 %104, 0
  br i1 %105, label %106, label %109

106:                                              ; preds = %101, %103
  %107 = call fastcc zeroext i8 @is_overflow_infinity(ptr noundef nonnull %67), !range !79
  %108 = icmp eq i8 %107, 0
  br i1 %108, label %115, label %109

109:                                              ; preds = %97, %106, %103
  %110 = call fastcc zeroext i8 @vrp_val_is_max(ptr noundef %89), !range !79
  %111 = icmp eq i8 %110, 0
  br i1 %111, label %112, label %206

112:                                              ; preds = %109
  %113 = call fastcc zeroext i8 @is_overflow_infinity(ptr noundef %89), !range !79
  %114 = icmp eq i8 %113, 0
  br i1 %114, label %115, label %206

115:                                              ; preds = %87, %112, %106
  %116 = getelementptr inbounds %struct.value_range_d, ptr %0, i64 0, i32 3
  %117 = load ptr, ptr %116, align 8, !tbaa !26
  %118 = icmp eq ptr %117, null
  br i1 %118, label %128, label %119

119:                                              ; preds = %115
  %120 = getelementptr inbounds %struct.value_range_d, ptr %1, i64 0, i32 3
  %121 = load ptr, ptr %120, align 8, !tbaa !26
  %122 = icmp eq ptr %121, null
  %123 = icmp eq ptr %117, %121
  %124 = or i1 %122, %123
  br i1 %124, label %126, label %125

125:                                              ; preds = %119
  call void @bitmap_and_into(ptr noundef nonnull %117, ptr noundef nonnull %121) #18
  br label %128

126:                                              ; preds = %119
  br i1 %122, label %127, label %128

127:                                              ; preds = %126
  call void @bitmap_clear(ptr noundef nonnull %117) #18
  br label %128

128:                                              ; preds = %125, %127, %126, %115
  store ptr %67, ptr %47, align 8, !tbaa !25
  store ptr %89, ptr %68, align 8, !tbaa !31
  br label %261

129:                                              ; preds = %42
  %130 = icmp eq i32 %5, 2
  %131 = icmp eq i32 %7, 2
  br i1 %130, label %132, label %165

132:                                              ; preds = %129
  br i1 %131, label %133, label %166

133:                                              ; preds = %132
  %134 = getelementptr inbounds %struct.value_range_d, ptr %0, i64 0, i32 1
  %135 = load ptr, ptr %134, align 8, !tbaa !25
  %136 = getelementptr inbounds %struct.value_range_d, ptr %1, i64 0, i32 1
  %137 = load ptr, ptr %136, align 8, !tbaa !25
  %138 = tail call fastcc i32 @compare_values(ptr noundef %135, ptr noundef %137)
  %139 = icmp eq i32 %138, 0
  br i1 %139, label %140, label %206

140:                                              ; preds = %133
  %141 = getelementptr inbounds %struct.value_range_d, ptr %0, i64 0, i32 2
  %142 = load ptr, ptr %141, align 8, !tbaa !31
  %143 = getelementptr inbounds %struct.value_range_d, ptr %1, i64 0, i32 2
  %144 = load ptr, ptr %143, align 8, !tbaa !31
  %145 = tail call fastcc i32 @compare_values(ptr noundef %142, ptr noundef %144)
  %146 = icmp eq i32 %145, 0
  br i1 %146, label %147, label %206

147:                                              ; preds = %140
  %148 = load ptr, ptr %134, align 8, !tbaa !25
  %149 = load ptr, ptr %141, align 8, !tbaa !31
  %150 = tail call fastcc i32 @compare_values(ptr noundef %148, ptr noundef %149)
  %151 = icmp eq i32 %150, 0
  br i1 %151, label %152, label %206

152:                                              ; preds = %147
  %153 = getelementptr inbounds %struct.value_range_d, ptr %0, i64 0, i32 3
  %154 = load ptr, ptr %153, align 8, !tbaa !26
  %155 = icmp eq ptr %154, null
  br i1 %155, label %261, label %156

156:                                              ; preds = %152
  %157 = getelementptr inbounds %struct.value_range_d, ptr %1, i64 0, i32 3
  %158 = load ptr, ptr %157, align 8, !tbaa !26
  %159 = icmp eq ptr %158, null
  %160 = icmp eq ptr %154, %158
  %161 = or i1 %159, %160
  br i1 %161, label %163, label %162

162:                                              ; preds = %156
  tail call void @bitmap_and_into(ptr noundef nonnull %154, ptr noundef nonnull %158) #18
  br label %261

163:                                              ; preds = %156
  br i1 %159, label %164, label %261

164:                                              ; preds = %163
  tail call void @bitmap_clear(ptr noundef nonnull %154) #18
  br label %261

165:                                              ; preds = %129
  br i1 %131, label %166, label %205

166:                                              ; preds = %132, %165
  %167 = getelementptr inbounds %struct.value_range_d, ptr %0, i64 0, i32 1
  %168 = load ptr, ptr %167, align 8, !tbaa !25
  %169 = tail call zeroext i8 @is_gimple_min_invariant(ptr noundef %168) #18
  %170 = icmp eq i8 %169, 0
  br i1 %170, label %206, label %171

171:                                              ; preds = %166
  %172 = getelementptr inbounds %struct.value_range_d, ptr %0, i64 0, i32 2
  %173 = load ptr, ptr %172, align 8, !tbaa !31
  %174 = tail call zeroext i8 @is_gimple_min_invariant(ptr noundef %173) #18
  %175 = icmp eq i8 %174, 0
  br i1 %175, label %206, label %176

176:                                              ; preds = %171
  %177 = tail call fastcc zeroext i8 @symbolic_range_p(ptr noundef nonnull %1), !range !79
  %178 = icmp eq i8 %177, 0
  br i1 %178, label %179, label %206

179:                                              ; preds = %176
  %180 = tail call fastcc zeroext i8 @value_ranges_intersect_p(ptr noundef nonnull %0, ptr noundef nonnull %1), !range !79
  %181 = icmp eq i8 %180, 0
  br i1 %181, label %182, label %206

182:                                              ; preds = %179
  %183 = load i32, ptr %1, align 8, !tbaa !23
  %184 = icmp eq i32 %183, 2
  br i1 %184, label %185, label %192

185:                                              ; preds = %182
  %186 = getelementptr inbounds %struct.value_range_d, ptr %1, i64 0, i32 1
  %187 = load ptr, ptr %186, align 8, !tbaa !25
  %188 = getelementptr inbounds %struct.value_range_d, ptr %1, i64 0, i32 2
  %189 = load ptr, ptr %188, align 8, !tbaa !31
  %190 = getelementptr inbounds %struct.value_range_d, ptr %0, i64 0, i32 3
  %191 = load ptr, ptr %190, align 8, !tbaa !26
  tail call fastcc void @set_value_range(ptr noundef nonnull %0, i32 noundef 2, ptr noundef %187, ptr noundef %189, ptr noundef %191)
  br label %192

192:                                              ; preds = %185, %182
  %193 = getelementptr inbounds %struct.value_range_d, ptr %0, i64 0, i32 3
  %194 = load ptr, ptr %193, align 8, !tbaa !26
  %195 = icmp eq ptr %194, null
  br i1 %195, label %261, label %196

196:                                              ; preds = %192
  %197 = getelementptr inbounds %struct.value_range_d, ptr %1, i64 0, i32 3
  %198 = load ptr, ptr %197, align 8, !tbaa !26
  %199 = icmp eq ptr %198, null
  %200 = icmp eq ptr %194, %198
  %201 = or i1 %199, %200
  br i1 %201, label %203, label %202

202:                                              ; preds = %196
  tail call void @bitmap_and_into(ptr noundef nonnull %194, ptr noundef nonnull %198) #18
  br label %261

203:                                              ; preds = %196
  br i1 %199, label %204, label %261

204:                                              ; preds = %203
  tail call void @bitmap_clear(ptr noundef nonnull %194) #18
  br label %261

205:                                              ; preds = %165
  tail call void @fancy_abort(ptr noundef nonnull @.str.27, i32 noundef 6245, ptr noundef nonnull @.str.28) #18
  br label %261

206:                                              ; preds = %166, %81, %60, %109, %112, %85, %63, %171, %176, %179, %133, %140, %147
  %207 = getelementptr inbounds %struct.value_range_d, ptr %0, i64 0, i32 1
  %208 = load ptr, ptr %207, align 8, !tbaa !25
  %209 = call zeroext i8 @is_gimple_min_invariant(ptr noundef %208) #18
  %210 = icmp eq i8 %209, 0
  br i1 %210, label %256, label %211

211:                                              ; preds = %206
  %212 = getelementptr inbounds %struct.value_range_d, ptr %0, i64 0, i32 2
  %213 = load ptr, ptr %212, align 8, !tbaa !31
  %214 = call zeroext i8 @is_gimple_min_invariant(ptr noundef %213) #18
  %215 = icmp eq i8 %214, 0
  br i1 %215, label %256, label %216

216:                                              ; preds = %211
  %217 = load i32, ptr %0, align 8, !tbaa !23
  %218 = icmp eq i32 %217, 1
  br i1 %218, label %219, label %224

219:                                              ; preds = %216
  %220 = call fastcc zeroext i8 @range_includes_zero_p(ptr noundef nonnull %0), !range !79
  %221 = icmp eq i8 %220, 0
  br i1 %221, label %230, label %222

222:                                              ; preds = %219
  %223 = load i32, ptr %0, align 8, !tbaa !23
  br label %224

224:                                              ; preds = %222, %216
  %225 = phi i32 [ %223, %222 ], [ %217, %216 ]
  %226 = icmp eq i32 %225, 2
  br i1 %226, label %227, label %256

227:                                              ; preds = %224
  %228 = call fastcc zeroext i8 @range_includes_zero_p(ptr noundef nonnull %0), !range !79
  %229 = icmp eq i8 %228, 0
  br i1 %229, label %256, label %230

230:                                              ; preds = %227, %219
  %231 = call fastcc zeroext i8 @symbolic_range_p(ptr noundef nonnull %1), !range !79
  %232 = icmp eq i8 %231, 0
  br i1 %232, label %233, label %256

233:                                              ; preds = %230
  %234 = load i32, ptr %1, align 8, !tbaa !23
  %235 = icmp eq i32 %234, 1
  br i1 %235, label %236, label %241

236:                                              ; preds = %233
  %237 = call fastcc zeroext i8 @range_includes_zero_p(ptr noundef nonnull %1), !range !79
  %238 = icmp eq i8 %237, 0
  br i1 %238, label %247, label %239

239:                                              ; preds = %236
  %240 = load i32, ptr %1, align 8, !tbaa !23
  br label %241

241:                                              ; preds = %239, %233
  %242 = phi i32 [ %240, %239 ], [ %234, %233 ]
  %243 = icmp eq i32 %242, 2
  br i1 %243, label %244, label %256

244:                                              ; preds = %241
  %245 = call fastcc zeroext i8 @range_includes_zero_p(ptr noundef nonnull %1), !range !79
  %246 = icmp eq i8 %245, 0
  br i1 %246, label %256, label %247

247:                                              ; preds = %244, %236
  %248 = load ptr, ptr %207, align 8, !tbaa !25
  %249 = getelementptr inbounds %struct.tree_common, ptr %248, i64 0, i32 2
  %250 = load ptr, ptr %249, align 8, !tbaa !16
  %251 = call ptr @build_int_cst(ptr noundef %250, i64 noundef 0) #18
  store i32 2, ptr %0, align 8, !tbaa !23
  store ptr %251, ptr %207, align 8, !tbaa !25
  store ptr %251, ptr %212, align 8, !tbaa !31
  %252 = getelementptr inbounds %struct.value_range_d, ptr %0, i64 0, i32 3
  %253 = load ptr, ptr %252, align 8, !tbaa !26
  %254 = icmp eq ptr %253, null
  br i1 %254, label %261, label %255

255:                                              ; preds = %247
  call void @bitmap_clear(ptr noundef nonnull %253) #18
  br label %261

256:                                              ; preds = %206, %244, %241, %230, %227, %224, %211
  store i32 3, ptr %0, align 8, !tbaa !23
  %257 = getelementptr inbounds %struct.value_range_d, ptr %0, i64 0, i32 3
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %207, i8 0, i64 16, i1 false)
  %258 = load ptr, ptr %257, align 8, !tbaa !26
  %259 = icmp eq ptr %258, null
  br i1 %259, label %261, label %260

260:                                              ; preds = %256
  call void @bitmap_clear(ptr noundef nonnull %258) #18
  br label %261

261:                                              ; preds = %192, %152, %128, %260, %256, %41, %36, %29, %28, %21, %247, %255, %205, %202, %204, %203, %163, %164, %162, %30
  ret void
}

declare void @bitmap_and_into(ptr noundef, ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc ptr @vrp_evaluate_conditional_warnv_with_ops(i32 noundef %0, ptr noundef %1, ptr noundef %2, i8 noundef zeroext %3, ptr noundef %4, ptr noundef writeonly %5) unnamed_addr #9 {
  %7 = alloca %struct.value_range_d, align 8
  %8 = alloca i8, align 1
  %9 = alloca %struct.value_range_d, align 8
  %10 = icmp eq ptr %5, null
  br i1 %10, label %12, label %11

11:                                               ; preds = %6
  store i8 1, ptr %5, align 1, !tbaa !16
  br label %12

12:                                               ; preds = %11, %6
  %13 = getelementptr inbounds %struct.tree_common, ptr %1, i64 0, i32 2
  %14 = load ptr, ptr %13, align 8, !tbaa !16
  %15 = load i64, ptr %14, align 8
  %16 = trunc i64 %15 to i16
  switch i16 %16, label %284 [
    i16 6, label %17
    i16 7, label %17
    i16 8, label %17
    i16 10, label %17
    i16 12, label %17
  ]

17:                                               ; preds = %12, %12, %12, %12, %12
  %18 = icmp eq i8 %3, 0
  br i1 %18, label %282, label %19

19:                                               ; preds = %17
  br i1 %10, label %23, label %20

20:                                               ; preds = %19
  %21 = tail call fastcc ptr @vrp_evaluate_conditional_warnv_with_ops_using_ranges(i32 noundef %0, ptr noundef nonnull %1, ptr noundef %2, ptr noundef %4)
  %22 = icmp eq ptr %21, null
  br i1 %22, label %23, label %284

23:                                               ; preds = %20, %19
  store i8 0, ptr %5, align 1, !tbaa !16
  %24 = load i64, ptr %1, align 8
  %25 = and i64 %24, 65535
  %26 = icmp eq i64 %25, 141
  %27 = load i64, ptr %2, align 8
  %28 = and i64 %27, 65535
  %29 = icmp eq i64 %28, 141
  br i1 %26, label %30, label %278

30:                                               ; preds = %23
  br i1 %29, label %31, label %276

31:                                               ; preds = %30
  %32 = tail call fastcc ptr @get_value_range(ptr noundef nonnull %1)
  %33 = getelementptr inbounds %struct.value_range_d, ptr %32, i64 0, i32 3
  %34 = load ptr, ptr %33, align 8, !tbaa !26
  %35 = tail call fastcc ptr @get_value_range(ptr noundef nonnull %2)
  %36 = getelementptr inbounds %struct.value_range_d, ptr %35, i64 0, i32 3
  %37 = load ptr, ptr %36, align 8, !tbaa !26
  %38 = load ptr, ptr @compare_names.s_obstack, align 8, !tbaa !5
  %39 = icmp eq ptr %38, null
  br i1 %39, label %42, label %40

40:                                               ; preds = %31
  %41 = load ptr, ptr @compare_names.s_e2, align 8
  br label %48

42:                                               ; preds = %31
  %43 = tail call ptr @xmalloc(i64 noundef 104) #18
  store ptr %43, ptr @compare_names.s_obstack, align 8, !tbaa !5
  tail call void @bitmap_obstack_initialize(ptr noundef %43) #18
  %44 = load ptr, ptr @compare_names.s_obstack, align 8, !tbaa !5
  %45 = tail call ptr @bitmap_obstack_alloc_stat(ptr noundef %44) #18
  store ptr %45, ptr @compare_names.s_e1, align 8, !tbaa !5
  %46 = load ptr, ptr @compare_names.s_obstack, align 8, !tbaa !5
  %47 = tail call ptr @bitmap_obstack_alloc_stat(ptr noundef %46) #18
  store ptr %47, ptr @compare_names.s_e2, align 8, !tbaa !5
  br label %48

48:                                               ; preds = %42, %40
  %49 = phi ptr [ %41, %40 ], [ %47, %42 ]
  %50 = icmp eq ptr %34, null
  %51 = load ptr, ptr @compare_names.s_e1, align 8
  %52 = select i1 %50, ptr %51, ptr %34
  %53 = icmp eq ptr %37, null
  %54 = select i1 %53, ptr %49, ptr %37
  %55 = getelementptr inbounds %struct.tree_ssa_name, ptr %1, i64 0, i32 3
  %56 = load i32, ptr %55, align 8, !tbaa !16
  %57 = tail call zeroext i8 @bitmap_set_bit(ptr noundef %52, i32 noundef %56) #18
  %58 = getelementptr inbounds %struct.tree_ssa_name, ptr %2, i64 0, i32 3
  %59 = load i32, ptr %58, align 8, !tbaa !16
  %60 = tail call zeroext i8 @bitmap_set_bit(ptr noundef %54, i32 noundef %59) #18
  %61 = tail call zeroext i8 @bitmap_intersect_p(ptr noundef %52, ptr noundef %54) #18
  %62 = icmp eq i8 %61, 0
  br i1 %62, label %75, label %63

63:                                               ; preds = %48
  %64 = load i32, ptr %55, align 8, !tbaa !16
  %65 = tail call zeroext i8 @bitmap_clear_bit(ptr noundef %52, i32 noundef %64) #18
  %66 = load i32, ptr %58, align 8, !tbaa !16
  %67 = tail call zeroext i8 @bitmap_clear_bit(ptr noundef %54, i32 noundef %66) #18
  %68 = and i32 %0, -2
  %69 = icmp eq i32 %68, 100
  %70 = icmp eq i32 %0, 98
  %71 = or i1 %70, %69
  %72 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 26), align 16
  %73 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 25), align 8
  %74 = select i1 %71, ptr %72, ptr %73
  br label %284

75:                                               ; preds = %48
  %76 = load ptr, ptr %52, align 8, !tbaa !32
  %77 = icmp eq ptr %76, null
  %78 = select i1 %77, ptr @bitmap_zero_bits, ptr %76
  %79 = getelementptr inbounds %struct.bitmap_element_def, ptr %78, i64 0, i32 2
  %80 = load i32, ptr %79, align 8, !tbaa !34
  %81 = shl i32 %80, 7
  %82 = getelementptr inbounds %struct.bitmap_element_def, ptr %78, i64 0, i32 3
  %83 = load i64, ptr %82, align 8, !tbaa !36
  %84 = icmp eq i64 %83, 0
  %85 = zext i1 %84 to i32
  %86 = or i32 %81, %85
  %87 = getelementptr inbounds %struct.value_range_d, ptr %7, i64 0, i32 1
  %88 = getelementptr inbounds %struct.value_range_d, ptr %7, i64 0, i32 2
  %89 = getelementptr inbounds %struct.value_range_d, ptr %9, i64 0, i32 1
  %90 = getelementptr inbounds %struct.value_range_d, ptr %9, i64 0, i32 2
  br label %91

91:                                               ; preds = %268, %75
  %92 = phi ptr [ %78, %75 ], [ %99, %268 ]
  %93 = phi i32 [ 0, %75 ], [ %100, %268 ]
  %94 = phi i64 [ %83, %75 ], [ %269, %268 ]
  %95 = phi i32 [ %86, %75 ], [ %270, %268 ]
  %96 = phi i32 [ -1, %75 ], [ %174, %268 ]
  %97 = icmp eq i64 %94, 0
  br i1 %97, label %112, label %98

98:                                               ; preds = %121, %91
  %99 = phi ptr [ %92, %91 ], [ %117, %121 ]
  %100 = phi i32 [ %93, %91 ], [ %122, %121 ]
  %101 = phi i64 [ %94, %91 ], [ %126, %121 ]
  %102 = phi i32 [ %95, %91 ], [ %123, %121 ]
  %103 = and i64 %101, 1
  %104 = icmp eq i64 %103, 0
  br i1 %104, label %105, label %139

105:                                              ; preds = %98, %105
  %106 = phi i32 [ %109, %105 ], [ %102, %98 ]
  %107 = phi i64 [ %108, %105 ], [ %101, %98 ]
  %108 = lshr i64 %107, 1
  %109 = add i32 %106, 1
  %110 = and i64 %107, 2
  %111 = icmp eq i64 %110, 0
  br i1 %111, label %105, label %139, !llvm.loop !37

112:                                              ; preds = %91
  %113 = add i32 %95, 63
  %114 = and i32 %113, -64
  %115 = add i32 %93, 1
  br label %116

116:                                              ; preds = %135, %112
  %117 = phi ptr [ %92, %112 ], [ %133, %135 ]
  %118 = phi i32 [ %114, %112 ], [ %138, %135 ]
  %119 = phi i32 [ %115, %112 ], [ 0, %135 ]
  %120 = icmp eq i32 %119, 2
  br i1 %120, label %132, label %121

121:                                              ; preds = %116, %128
  %122 = phi i32 [ %130, %128 ], [ %119, %116 ]
  %123 = phi i32 [ %129, %128 ], [ %118, %116 ]
  %124 = zext i32 %122 to i64
  %125 = getelementptr inbounds %struct.bitmap_element_def, ptr %117, i64 0, i32 3, i64 %124
  %126 = load i64, ptr %125, align 8, !tbaa !36
  %127 = icmp eq i64 %126, 0
  br i1 %127, label %128, label %98

128:                                              ; preds = %121
  %129 = add i32 %123, 64
  %130 = add i32 %122, 1
  %131 = icmp eq i32 %130, 2
  br i1 %131, label %132, label %121, !llvm.loop !38

132:                                              ; preds = %128, %116
  %133 = load ptr, ptr %117, align 8, !tbaa !39
  %134 = icmp eq ptr %133, null
  br i1 %134, label %271, label %135

135:                                              ; preds = %132
  %136 = getelementptr inbounds %struct.bitmap_element_def, ptr %133, i64 0, i32 2
  %137 = load i32, ptr %136, align 8, !tbaa !34
  %138 = shl i32 %137, 7
  br label %116

139:                                              ; preds = %105, %98
  %140 = phi i64 [ %101, %98 ], [ %108, %105 ]
  %141 = phi i32 [ %102, %98 ], [ %109, %105 ]
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %7) #18
  call void @llvm.experimental.noalias.scope.decl(metadata !186)
  %142 = load ptr, ptr @vr_value, align 8, !tbaa !5, !noalias !186
  %143 = sext i32 %141 to i64
  %144 = getelementptr inbounds ptr, ptr %142, i64 %143
  %145 = load ptr, ptr %144, align 8, !tbaa !5, !noalias !186
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(32) %7, ptr noundef nonnull align 8 dereferenceable(32) %145, i64 32, i1 false), !tbaa.struct !174
  %146 = load i32, ptr %7, align 8, !alias.scope !186
  switch i32 %146, label %156 [
    i32 3, label %147
    i32 0, label %147
  ]

147:                                              ; preds = %139, %139
  store i32 1, ptr %7, align 8, !tbaa !23, !alias.scope !186
  %148 = load ptr, ptr @cfun, align 8, !tbaa !5, !noalias !186
  %149 = getelementptr inbounds %struct.function, ptr %148, i64 0, i32 3
  %150 = load ptr, ptr %149, align 8, !tbaa !40, !noalias !186
  %151 = getelementptr inbounds %struct.gimple_df, ptr %150, i64 0, i32 2
  %152 = load ptr, ptr %151, align 8, !tbaa !41, !noalias !186
  %153 = zext i32 %141 to i64
  %154 = getelementptr inbounds %struct.VEC_tree_base, ptr %152, i64 0, i32 2, i64 %153
  %155 = load ptr, ptr %154, align 8, !tbaa !5, !noalias !186
  store ptr %155, ptr %87, align 8, !tbaa !25, !alias.scope !186
  store ptr %155, ptr %88, align 8, !tbaa !31, !alias.scope !186
  br label %156

156:                                              ; preds = %147, %139
  %157 = load ptr, ptr %54, align 8, !tbaa !32
  %158 = icmp eq ptr %157, null
  %159 = select i1 %158, ptr @bitmap_zero_bits, ptr %157
  %160 = getelementptr inbounds %struct.bitmap_element_def, ptr %159, i64 0, i32 2
  %161 = load i32, ptr %160, align 8, !tbaa !34
  %162 = shl i32 %161, 7
  %163 = getelementptr inbounds %struct.bitmap_element_def, ptr %159, i64 0, i32 3
  %164 = load i64, ptr %163, align 8, !tbaa !36
  %165 = icmp eq i64 %164, 0
  %166 = zext i1 %165 to i32
  %167 = or i32 %162, %166
  br label %168

168:                                              ; preds = %252, %156
  %169 = phi i64 [ %164, %156 ], [ %255, %252 ]
  %170 = phi i32 [ 0, %156 ], [ %178, %252 ]
  %171 = phi ptr [ %159, %156 ], [ %179, %252 ]
  %172 = phi i32 [ %167, %156 ], [ %256, %252 ]
  %173 = phi ptr [ null, %156 ], [ %253, %252 ]
  %174 = phi i32 [ %96, %156 ], [ %254, %252 ]
  %175 = icmp eq i64 %169, 0
  br i1 %175, label %190, label %176

176:                                              ; preds = %199, %168
  %177 = phi i64 [ %169, %168 ], [ %204, %199 ]
  %178 = phi i32 [ %170, %168 ], [ %200, %199 ]
  %179 = phi ptr [ %171, %168 ], [ %195, %199 ]
  %180 = phi i32 [ %172, %168 ], [ %201, %199 ]
  %181 = and i64 %177, 1
  %182 = icmp eq i64 %181, 0
  br i1 %182, label %183, label %217

183:                                              ; preds = %176, %183
  %184 = phi i32 [ %187, %183 ], [ %180, %176 ]
  %185 = phi i64 [ %186, %183 ], [ %177, %176 ]
  %186 = lshr i64 %185, 1
  %187 = add i32 %184, 1
  %188 = and i64 %185, 2
  %189 = icmp eq i64 %188, 0
  br i1 %189, label %183, label %217, !llvm.loop !37

190:                                              ; preds = %168
  %191 = add i32 %172, 63
  %192 = and i32 %191, -64
  %193 = add i32 %170, 1
  br label %194

194:                                              ; preds = %213, %190
  %195 = phi ptr [ %171, %190 ], [ %211, %213 ]
  %196 = phi i32 [ %192, %190 ], [ %216, %213 ]
  %197 = phi i32 [ %193, %190 ], [ 0, %213 ]
  %198 = icmp eq i32 %197, 2
  br i1 %198, label %210, label %199

199:                                              ; preds = %194, %206
  %200 = phi i32 [ %208, %206 ], [ %197, %194 ]
  %201 = phi i32 [ %207, %206 ], [ %196, %194 ]
  %202 = zext i32 %200 to i64
  %203 = getelementptr inbounds %struct.bitmap_element_def, ptr %195, i64 0, i32 3, i64 %202
  %204 = load i64, ptr %203, align 8, !tbaa !36
  %205 = icmp eq i64 %204, 0
  br i1 %205, label %206, label %176

206:                                              ; preds = %199
  %207 = add i32 %201, 64
  %208 = add i32 %200, 1
  %209 = icmp eq i32 %208, 2
  br i1 %209, label %210, label %199, !llvm.loop !38

210:                                              ; preds = %206, %194
  %211 = load ptr, ptr %195, align 8, !tbaa !39
  %212 = icmp eq ptr %211, null
  br i1 %212, label %257, label %213

213:                                              ; preds = %210
  %214 = getelementptr inbounds %struct.bitmap_element_def, ptr %211, i64 0, i32 2
  %215 = load i32, ptr %214, align 8, !tbaa !34
  %216 = shl i32 %215, 7
  br label %194

217:                                              ; preds = %183, %176
  %218 = phi i64 [ %177, %176 ], [ %186, %183 ]
  %219 = phi i32 [ %180, %176 ], [ %187, %183 ]
  call void @llvm.lifetime.start.p0(i64 1, ptr nonnull %8) #18
  store i8 0, ptr %8, align 1, !tbaa !16
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %9) #18
  call void @llvm.experimental.noalias.scope.decl(metadata !189)
  %220 = load ptr, ptr @vr_value, align 8, !tbaa !5, !noalias !189
  %221 = sext i32 %219 to i64
  %222 = getelementptr inbounds ptr, ptr %220, i64 %221
  %223 = load ptr, ptr %222, align 8, !tbaa !5, !noalias !189
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(32) %9, ptr noundef nonnull align 8 dereferenceable(32) %223, i64 32, i1 false), !tbaa.struct !174
  %224 = load i32, ptr %9, align 8, !alias.scope !189
  switch i32 %224, label %234 [
    i32 3, label %225
    i32 0, label %225
  ]

225:                                              ; preds = %217, %217
  store i32 1, ptr %9, align 8, !tbaa !23, !alias.scope !189
  %226 = load ptr, ptr @cfun, align 8, !tbaa !5, !noalias !189
  %227 = getelementptr inbounds %struct.function, ptr %226, i64 0, i32 3
  %228 = load ptr, ptr %227, align 8, !tbaa !40, !noalias !189
  %229 = getelementptr inbounds %struct.gimple_df, ptr %228, i64 0, i32 2
  %230 = load ptr, ptr %229, align 8, !tbaa !41, !noalias !189
  %231 = zext i32 %219 to i64
  %232 = getelementptr inbounds %struct.VEC_tree_base, ptr %230, i64 0, i32 2, i64 %231
  %233 = load ptr, ptr %232, align 8, !tbaa !5, !noalias !189
  store ptr %233, ptr %89, align 8, !tbaa !25, !alias.scope !189
  store ptr %233, ptr %90, align 8, !tbaa !31, !alias.scope !189
  br label %234

234:                                              ; preds = %225, %217
  %235 = call fastcc ptr @compare_ranges(i32 noundef %0, ptr noundef nonnull %7, ptr noundef nonnull %9, ptr noundef nonnull %8)
  %236 = icmp eq ptr %235, null
  br i1 %236, label %252, label %237

237:                                              ; preds = %234
  %238 = icmp eq ptr %173, null
  %239 = icmp eq ptr %235, %173
  %240 = or i1 %238, %239
  br i1 %240, label %241, label %247

241:                                              ; preds = %237
  %242 = load i8, ptr %8, align 1, !tbaa !16
  %243 = icmp eq i8 %242, 0
  br i1 %243, label %252, label %244

244:                                              ; preds = %241
  %245 = icmp slt i32 %174, 0
  %246 = select i1 %245, i32 1, i32 %174
  br label %252

247:                                              ; preds = %237
  %248 = load i32, ptr %55, align 8, !tbaa !16
  %249 = call zeroext i8 @bitmap_clear_bit(ptr noundef nonnull %52, i32 noundef %248) #18
  %250 = load i32, ptr %58, align 8, !tbaa !16
  %251 = call zeroext i8 @bitmap_clear_bit(ptr noundef nonnull %54, i32 noundef %250) #18
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %9) #18
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %8) #18
  br label %266

252:                                              ; preds = %244, %241, %234
  %253 = phi ptr [ %235, %241 ], [ %173, %234 ], [ %235, %244 ]
  %254 = phi i32 [ 0, %241 ], [ %174, %234 ], [ %246, %244 ]
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %9) #18
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %8) #18
  %255 = lshr i64 %218, 1
  %256 = add i32 %219, 1
  br label %168, !llvm.loop !192

257:                                              ; preds = %210
  %258 = icmp eq ptr %173, null
  br i1 %258, label %268, label %259

259:                                              ; preds = %257
  %260 = load i32, ptr %55, align 8, !tbaa !16
  %261 = call zeroext i8 @bitmap_clear_bit(ptr noundef nonnull %52, i32 noundef %260) #18
  %262 = load i32, ptr %58, align 8, !tbaa !16
  %263 = call zeroext i8 @bitmap_clear_bit(ptr noundef nonnull %54, i32 noundef %262) #18
  %264 = icmp sgt i32 %174, 0
  br i1 %264, label %265, label %266

265:                                              ; preds = %259
  store i8 1, ptr %4, align 1, !tbaa !16
  br label %266

266:                                              ; preds = %265, %259, %247
  %267 = phi ptr [ %173, %259 ], [ %173, %265 ], [ null, %247 ]
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %7) #18
  br label %284

268:                                              ; preds = %257
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %7) #18
  %269 = lshr i64 %140, 1
  %270 = add i32 %141, 1
  br label %91, !llvm.loop !193

271:                                              ; preds = %132
  %272 = load i32, ptr %55, align 8, !tbaa !16
  %273 = call zeroext i8 @bitmap_clear_bit(ptr noundef nonnull %52, i32 noundef %272) #18
  %274 = load i32, ptr %58, align 8, !tbaa !16
  %275 = call zeroext i8 @bitmap_clear_bit(ptr noundef %54, i32 noundef %274) #18
  br label %284

276:                                              ; preds = %30
  %277 = tail call fastcc ptr @compare_name_with_value(i32 noundef %0, ptr noundef nonnull %1, ptr noundef nonnull %2, ptr noundef %4)
  br label %284

278:                                              ; preds = %23
  br i1 %29, label %279, label %284

279:                                              ; preds = %278
  %280 = tail call i32 @swap_tree_comparison(i32 noundef %0) #18
  %281 = tail call fastcc ptr @compare_name_with_value(i32 noundef %280, ptr noundef nonnull %2, ptr noundef nonnull %1, ptr noundef %4)
  br label %284

282:                                              ; preds = %17
  %283 = tail call fastcc ptr @vrp_evaluate_conditional_warnv_with_ops_using_ranges(i32 noundef %0, ptr noundef nonnull %1, ptr noundef %2, ptr noundef %4)
  br label %284

284:                                              ; preds = %271, %266, %63, %278, %20, %12, %282, %279, %276
  %285 = phi ptr [ %277, %276 ], [ %281, %279 ], [ %283, %282 ], [ null, %12 ], [ %21, %20 ], [ null, %278 ], [ %74, %63 ], [ null, %271 ], [ %267, %266 ]
  ret ptr %285
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc ptr @vrp_evaluate_conditional_warnv_with_ops_using_ranges(i32 noundef %0, ptr noundef %1, ptr noundef %2, ptr noundef %3) unnamed_addr #9 {
  %5 = load i64, ptr %1, align 8
  %6 = and i64 %5, 65535
  %7 = icmp eq i64 %6, 141
  br i1 %7, label %8, label %10

8:                                                ; preds = %4
  %9 = tail call fastcc ptr @get_value_range(ptr noundef nonnull %1)
  br label %10

10:                                               ; preds = %4, %8
  %11 = phi ptr [ %9, %8 ], [ null, %4 ]
  %12 = load i64, ptr %2, align 8
  %13 = and i64 %12, 65535
  %14 = icmp eq i64 %13, 141
  br i1 %14, label %17, label %15

15:                                               ; preds = %10
  %16 = icmp ne ptr %11, null
  br label %24

17:                                               ; preds = %10
  %18 = tail call fastcc ptr @get_value_range(ptr noundef nonnull %2)
  %19 = icmp ne ptr %11, null
  %20 = icmp ne ptr %18, null
  %21 = select i1 %19, i1 %20, i1 false
  br i1 %21, label %22, label %24

22:                                               ; preds = %17
  %23 = tail call fastcc ptr @compare_ranges(i32 noundef %0, ptr noundef nonnull %11, ptr noundef nonnull %18, ptr noundef %3)
  br label %38

24:                                               ; preds = %15, %17
  %25 = phi i1 [ false, %15 ], [ %20, %17 ]
  %26 = phi i1 [ %16, %15 ], [ %19, %17 ]
  %27 = phi ptr [ null, %15 ], [ %18, %17 ]
  %28 = icmp eq ptr %27, null
  %29 = select i1 %26, i1 %28, i1 false
  br i1 %29, label %30, label %32

30:                                               ; preds = %24
  %31 = tail call fastcc ptr @compare_range_with_value(i32 noundef %0, ptr noundef nonnull %11, ptr noundef nonnull %2, ptr noundef %3)
  br label %38

32:                                               ; preds = %24
  %33 = icmp eq ptr %11, null
  %34 = select i1 %33, i1 %25, i1 false
  br i1 %34, label %35, label %38

35:                                               ; preds = %32
  %36 = tail call i32 @swap_tree_comparison(i32 noundef %0) #18
  %37 = tail call fastcc ptr @compare_range_with_value(i32 noundef %36, ptr noundef nonnull %27, ptr noundef nonnull %1, ptr noundef %3)
  br label %38

38:                                               ; preds = %32, %35, %30, %22
  %39 = phi ptr [ %23, %22 ], [ %31, %30 ], [ %37, %35 ], [ null, %32 ]
  ret ptr %39
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc ptr @compare_name_with_value(i32 noundef %0, ptr nocapture noundef readonly %1, ptr noundef %2, ptr nocapture noundef writeonly %3) unnamed_addr #9 {
  %5 = alloca i8, align 1
  %6 = alloca %struct.value_range_d, align 8
  call void @llvm.lifetime.start.p0(i64 1, ptr nonnull %5) #18
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %6) #18
  %7 = tail call fastcc ptr @get_value_range(ptr noundef %1)
  %8 = getelementptr inbounds %struct.value_range_d, ptr %7, i64 0, i32 3
  %9 = load ptr, ptr %8, align 8, !tbaa !26
  %10 = getelementptr inbounds %struct.tree_ssa_name, ptr %1, i64 0, i32 3
  %11 = load i32, ptr %10, align 8, !tbaa !16
  %12 = load ptr, ptr @vr_value, align 8, !tbaa !5, !noalias !194
  %13 = sext i32 %11 to i64
  %14 = getelementptr inbounds ptr, ptr %12, i64 %13
  %15 = load ptr, ptr %14, align 8, !tbaa !5, !noalias !194
  %16 = load i32, ptr %15, align 8, !tbaa.struct !174
  %17 = getelementptr inbounds i8, ptr %15, i64 4
  %18 = load i32, ptr %17, align 4, !tbaa.struct !197
  %19 = getelementptr inbounds i8, ptr %15, i64 8
  %20 = load <2 x ptr>, ptr %19, align 8
  %21 = getelementptr inbounds i8, ptr %15, i64 24
  %22 = load ptr, ptr %21, align 8, !tbaa.struct !102
  switch i32 %16, label %34 [
    i32 3, label %23
    i32 0, label %23
  ]

23:                                               ; preds = %4, %4
  %24 = load ptr, ptr @cfun, align 8, !tbaa !5, !noalias !194
  %25 = getelementptr inbounds %struct.function, ptr %24, i64 0, i32 3
  %26 = load ptr, ptr %25, align 8, !tbaa !40, !noalias !194
  %27 = getelementptr inbounds %struct.gimple_df, ptr %26, i64 0, i32 2
  %28 = load ptr, ptr %27, align 8, !tbaa !41, !noalias !194
  %29 = zext i32 %11 to i64
  %30 = getelementptr inbounds %struct.VEC_tree_base, ptr %28, i64 0, i32 2, i64 %29
  %31 = load ptr, ptr %30, align 8, !tbaa !5, !noalias !194
  %32 = insertelement <2 x ptr> poison, ptr %31, i64 0
  %33 = shufflevector <2 x ptr> %32, <2 x ptr> poison, <2 x i32> zeroinitializer
  br label %34

34:                                               ; preds = %4, %23
  %35 = phi i32 [ %16, %4 ], [ 1, %23 ]
  %36 = phi <2 x ptr> [ %20, %4 ], [ %33, %23 ]
  store i32 %35, ptr %6, align 8, !tbaa.struct !174
  %37 = getelementptr inbounds i8, ptr %6, i64 4
  store i32 %18, ptr %37, align 4, !tbaa.struct !197
  %38 = getelementptr inbounds i8, ptr %6, i64 8
  store <2 x ptr> %36, ptr %38, align 8
  %39 = getelementptr inbounds i8, ptr %6, i64 24
  store ptr %22, ptr %39, align 8, !tbaa.struct !102
  store i8 0, ptr %5, align 1, !tbaa !16
  %40 = call fastcc ptr @compare_range_with_value(i32 noundef %0, ptr noundef nonnull %6, ptr noundef %2, ptr noundef nonnull %5)
  %41 = icmp ne ptr %40, null
  %42 = load i8, ptr %5, align 1
  %43 = icmp ne i8 %42, 0
  %44 = icmp eq ptr %9, null
  br i1 %44, label %45, label %47

45:                                               ; preds = %34
  %46 = select i1 %41, i1 %43, i1 false
  br i1 %46, label %159, label %161

47:                                               ; preds = %34
  %48 = zext i1 %43 to i32
  %49 = select i1 %41, i32 %48, i32 -1
  %50 = load ptr, ptr %9, align 8, !tbaa !32
  %51 = icmp eq ptr %50, null
  %52 = select i1 %51, ptr @bitmap_zero_bits, ptr %50
  %53 = getelementptr inbounds %struct.bitmap_element_def, ptr %52, i64 0, i32 2
  %54 = load i32, ptr %53, align 8, !tbaa !34
  %55 = shl i32 %54, 7
  %56 = getelementptr inbounds %struct.bitmap_element_def, ptr %52, i64 0, i32 3
  %57 = load i64, ptr %56, align 8, !tbaa !36
  %58 = icmp eq i64 %57, 0
  %59 = zext i1 %58 to i32
  %60 = or i32 %55, %59
  br label %61

61:                                               ; preds = %150, %47
  %62 = phi i32 [ %60, %47 ], [ %154, %150 ]
  %63 = phi ptr [ %52, %47 ], [ %71, %150 ]
  %64 = phi i32 [ 0, %47 ], [ %72, %150 ]
  %65 = phi i64 [ %57, %47 ], [ %153, %150 ]
  %66 = phi ptr [ %40, %47 ], [ %151, %150 ]
  %67 = phi i32 [ %49, %47 ], [ %152, %150 ]
  %68 = icmp eq i64 %65, 0
  br i1 %68, label %83, label %69

69:                                               ; preds = %92, %61
  %70 = phi i32 [ %62, %61 ], [ %93, %92 ]
  %71 = phi ptr [ %63, %61 ], [ %89, %92 ]
  %72 = phi i32 [ %64, %61 ], [ %94, %92 ]
  %73 = phi i64 [ %65, %61 ], [ %97, %92 ]
  %74 = and i64 %73, 1
  %75 = icmp eq i64 %74, 0
  br i1 %75, label %76, label %110

76:                                               ; preds = %69, %76
  %77 = phi i32 [ %80, %76 ], [ %70, %69 ]
  %78 = phi i64 [ %79, %76 ], [ %73, %69 ]
  %79 = lshr i64 %78, 1
  %80 = add i32 %77, 1
  %81 = and i64 %78, 2
  %82 = icmp eq i64 %81, 0
  br i1 %82, label %76, label %110, !llvm.loop !37

83:                                               ; preds = %61
  %84 = add i32 %62, 63
  %85 = and i32 %84, -64
  %86 = add i32 %64, 1
  br label %87

87:                                               ; preds = %106, %83
  %88 = phi i32 [ %85, %83 ], [ %109, %106 ]
  %89 = phi ptr [ %63, %83 ], [ %104, %106 ]
  %90 = phi i32 [ %86, %83 ], [ 0, %106 ]
  %91 = icmp eq i32 %90, 2
  br i1 %91, label %103, label %92

92:                                               ; preds = %87, %99
  %93 = phi i32 [ %100, %99 ], [ %88, %87 ]
  %94 = phi i32 [ %101, %99 ], [ %90, %87 ]
  %95 = zext i32 %94 to i64
  %96 = getelementptr inbounds %struct.bitmap_element_def, ptr %89, i64 0, i32 3, i64 %95
  %97 = load i64, ptr %96, align 8, !tbaa !36
  %98 = icmp eq i64 %97, 0
  br i1 %98, label %99, label %69

99:                                               ; preds = %92
  %100 = add i32 %93, 64
  %101 = add i32 %94, 1
  %102 = icmp eq i32 %101, 2
  br i1 %102, label %103, label %92, !llvm.loop !38

103:                                              ; preds = %99, %87
  %104 = load ptr, ptr %89, align 8, !tbaa !39
  %105 = icmp eq ptr %104, null
  br i1 %105, label %155, label %106

106:                                              ; preds = %103
  %107 = getelementptr inbounds %struct.bitmap_element_def, ptr %104, i64 0, i32 2
  %108 = load i32, ptr %107, align 8, !tbaa !34
  %109 = shl i32 %108, 7
  br label %87

110:                                              ; preds = %76, %69
  %111 = phi i32 [ %70, %69 ], [ %80, %76 ]
  %112 = phi i64 [ %73, %69 ], [ %79, %76 ]
  %113 = load ptr, ptr @vr_value, align 8, !tbaa !5, !noalias !198
  %114 = sext i32 %111 to i64
  %115 = getelementptr inbounds ptr, ptr %113, i64 %114
  %116 = load ptr, ptr %115, align 8, !tbaa !5, !noalias !198
  %117 = load i32, ptr %116, align 8, !tbaa.struct !174
  %118 = getelementptr inbounds i8, ptr %116, i64 4
  %119 = load i32, ptr %118, align 4, !tbaa.struct !197
  %120 = getelementptr inbounds i8, ptr %116, i64 8
  %121 = load <2 x ptr>, ptr %120, align 8
  %122 = getelementptr inbounds i8, ptr %116, i64 24
  %123 = load ptr, ptr %122, align 8, !tbaa.struct !102
  switch i32 %117, label %135 [
    i32 3, label %124
    i32 0, label %124
  ]

124:                                              ; preds = %110, %110
  %125 = load ptr, ptr @cfun, align 8, !tbaa !5, !noalias !198
  %126 = getelementptr inbounds %struct.function, ptr %125, i64 0, i32 3
  %127 = load ptr, ptr %126, align 8, !tbaa !40, !noalias !198
  %128 = getelementptr inbounds %struct.gimple_df, ptr %127, i64 0, i32 2
  %129 = load ptr, ptr %128, align 8, !tbaa !41, !noalias !198
  %130 = zext i32 %111 to i64
  %131 = getelementptr inbounds %struct.VEC_tree_base, ptr %129, i64 0, i32 2, i64 %130
  %132 = load ptr, ptr %131, align 8, !tbaa !5, !noalias !198
  %133 = insertelement <2 x ptr> poison, ptr %132, i64 0
  %134 = shufflevector <2 x ptr> %133, <2 x ptr> poison, <2 x i32> zeroinitializer
  br label %135

135:                                              ; preds = %110, %124
  %136 = phi i32 [ %117, %110 ], [ 1, %124 ]
  %137 = phi <2 x ptr> [ %121, %110 ], [ %134, %124 ]
  store i32 %136, ptr %6, align 8, !tbaa.struct !174
  store i32 %119, ptr %37, align 4, !tbaa.struct !197
  store <2 x ptr> %137, ptr %38, align 8
  store ptr %123, ptr %39, align 8, !tbaa.struct !102
  store i8 0, ptr %5, align 1, !tbaa !16
  %138 = call fastcc ptr @compare_range_with_value(i32 noundef %0, ptr noundef nonnull %6, ptr noundef %2, ptr noundef nonnull %5)
  %139 = icmp eq ptr %138, null
  br i1 %139, label %150, label %140

140:                                              ; preds = %135
  %141 = icmp eq ptr %66, null
  %142 = icmp eq ptr %138, %66
  %143 = or i1 %141, %142
  br i1 %143, label %144, label %161

144:                                              ; preds = %140
  %145 = load i8, ptr %5, align 1, !tbaa !16
  %146 = icmp eq i8 %145, 0
  br i1 %146, label %150, label %147

147:                                              ; preds = %144
  %148 = icmp slt i32 %67, 0
  %149 = select i1 %148, i32 1, i32 %67
  br label %150

150:                                              ; preds = %144, %135, %147
  %151 = phi ptr [ %138, %147 ], [ %66, %135 ], [ %138, %144 ]
  %152 = phi i32 [ %149, %147 ], [ %67, %135 ], [ 0, %144 ]
  %153 = lshr i64 %112, 1
  %154 = add i32 %111, 1
  br label %61, !llvm.loop !201

155:                                              ; preds = %103
  %156 = icmp ne ptr %66, null
  %157 = icmp sgt i32 %67, 0
  %158 = select i1 %156, i1 %157, i1 false
  br i1 %158, label %159, label %161

159:                                              ; preds = %155, %45
  %160 = phi ptr [ %40, %45 ], [ %66, %155 ]
  store i8 1, ptr %3, align 1, !tbaa !16
  br label %161

161:                                              ; preds = %140, %159, %155, %45
  %162 = phi ptr [ %40, %45 ], [ %66, %155 ], [ %160, %159 ], [ null, %140 ]
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %6) #18
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %5) #18
  ret ptr %162
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc ptr @compare_ranges(i32 noundef %0, ptr nocapture noundef readonly %1, ptr nocapture noundef readonly %2, ptr noundef %3) unnamed_addr #9 {
  %5 = load i32, ptr %1, align 8, !tbaa !23
  switch i32 %5, label %6 [
    i32 3, label %193
    i32 0, label %193
  ]

6:                                                ; preds = %4
  %7 = load i32, ptr %2, align 8, !tbaa !23
  switch i32 %7, label %8 [
    i32 3, label %193
    i32 0, label %193
  ]

8:                                                ; preds = %6
  %9 = icmp eq i32 %5, 2
  %10 = icmp eq i32 %7, 2
  %11 = or i1 %9, %10
  br i1 %11, label %12, label %44

12:                                               ; preds = %8
  %13 = add i32 %0, -97
  %14 = icmp ult i32 %13, 4
  br i1 %9, label %15, label %17

15:                                               ; preds = %12
  %16 = or i1 %14, %10
  br i1 %16, label %193, label %18

17:                                               ; preds = %12
  br i1 %14, label %193, label %18

18:                                               ; preds = %15, %17
  %19 = icmp eq i32 %5, 1
  %20 = select i1 %19, ptr %1, ptr %2
  %21 = select i1 %19, ptr %2, ptr %1
  %22 = icmp eq i32 %0, 102
  %23 = add i32 %0, -101
  %24 = icmp ult i32 %23, 2
  br i1 %24, label %26, label %25

25:                                               ; preds = %18
  tail call void @fancy_abort(ptr noundef nonnull @.str.27, i32 noundef 3379, ptr noundef nonnull @.str.28) #18
  br label %26

26:                                               ; preds = %18, %25
  %27 = getelementptr inbounds %struct.value_range_d, ptr %21, i64 0, i32 1
  %28 = load ptr, ptr %27, align 8, !tbaa !25
  %29 = getelementptr inbounds %struct.value_range_d, ptr %20, i64 0, i32 1
  %30 = load ptr, ptr %29, align 8, !tbaa !25
  %31 = tail call fastcc i32 @compare_values_warnv(ptr noundef %28, ptr noundef %30, ptr noundef %3)
  %32 = icmp eq i32 %31, 0
  br i1 %32, label %33, label %193

33:                                               ; preds = %26
  %34 = getelementptr inbounds %struct.value_range_d, ptr %21, i64 0, i32 2
  %35 = load ptr, ptr %34, align 8, !tbaa !31
  %36 = getelementptr inbounds %struct.value_range_d, ptr %20, i64 0, i32 2
  %37 = load ptr, ptr %36, align 8, !tbaa !31
  %38 = tail call fastcc i32 @compare_values_warnv(ptr noundef %35, ptr noundef %37, ptr noundef %3)
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %40, label %193

40:                                               ; preds = %33
  %41 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 26), align 16
  %42 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 25), align 8
  %43 = select i1 %22, ptr %41, ptr %42
  br label %193

44:                                               ; preds = %8
  %45 = tail call fastcc zeroext i8 @usable_range_p(ptr noundef nonnull %1, ptr noundef %3), !range !79
  %46 = icmp eq i8 %45, 0
  br i1 %46, label %193, label %47

47:                                               ; preds = %44
  %48 = tail call fastcc zeroext i8 @usable_range_p(ptr noundef nonnull %2, ptr noundef %3), !range !79
  %49 = icmp eq i8 %48, 0
  br i1 %49, label %193, label %50

50:                                               ; preds = %47
  %51 = add i32 %0, -99
  %52 = icmp ult i32 %51, 2
  %53 = icmp eq i32 %0, 99
  %54 = select i1 %53, i32 97, i32 98
  %55 = select i1 %52, ptr %1, ptr %2
  %56 = select i1 %52, ptr %2, ptr %1
  %57 = select i1 %52, i32 %54, i32 %0
  switch i32 %57, label %146 [
    i32 101, label %58
    i32 102, label %104
  ]

58:                                               ; preds = %50
  %59 = getelementptr inbounds %struct.value_range_d, ptr %56, i64 0, i32 1
  %60 = load ptr, ptr %59, align 8, !tbaa !25
  %61 = getelementptr inbounds %struct.value_range_d, ptr %56, i64 0, i32 2
  %62 = load ptr, ptr %61, align 8, !tbaa !31
  %63 = tail call fastcc i32 @compare_values_warnv(ptr noundef %60, ptr noundef %62, ptr noundef %3)
  %64 = icmp eq i32 %63, 0
  br i1 %64, label %65, label %89

65:                                               ; preds = %58
  %66 = getelementptr inbounds %struct.value_range_d, ptr %55, i64 0, i32 1
  %67 = load ptr, ptr %66, align 8, !tbaa !25
  %68 = getelementptr inbounds %struct.value_range_d, ptr %55, i64 0, i32 2
  %69 = load ptr, ptr %68, align 8, !tbaa !31
  %70 = tail call fastcc i32 @compare_values_warnv(ptr noundef %67, ptr noundef %69, ptr noundef %3)
  %71 = icmp eq i32 %70, 0
  br i1 %71, label %72, label %89

72:                                               ; preds = %65
  %73 = load ptr, ptr %59, align 8, !tbaa !25
  %74 = load ptr, ptr %66, align 8, !tbaa !25
  %75 = tail call fastcc i32 @compare_values_warnv(ptr noundef %73, ptr noundef %74, ptr noundef %3)
  %76 = load ptr, ptr %61, align 8, !tbaa !31
  %77 = load ptr, ptr %68, align 8, !tbaa !31
  %78 = tail call fastcc i32 @compare_values_warnv(ptr noundef %76, ptr noundef %77, ptr noundef %3)
  %79 = icmp eq i32 %75, 0
  %80 = icmp eq i32 %78, 0
  %81 = select i1 %79, i1 %80, i1 false
  br i1 %81, label %82, label %84

82:                                               ; preds = %72
  %83 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 26), align 16, !tbaa !5
  br label %193

84:                                               ; preds = %72
  %85 = icmp eq i32 %75, -2
  %86 = icmp eq i32 %78, -2
  %87 = select i1 %85, i1 true, i1 %86
  %88 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 25), align 8
  br i1 %87, label %103, label %193

89:                                               ; preds = %65, %58
  %90 = load ptr, ptr %59, align 8, !tbaa !25
  %91 = getelementptr inbounds %struct.value_range_d, ptr %55, i64 0, i32 2
  %92 = load ptr, ptr %91, align 8, !tbaa !31
  %93 = tail call fastcc i32 @compare_values_warnv(ptr noundef %90, ptr noundef %92, ptr noundef %3)
  %94 = icmp eq i32 %93, 1
  br i1 %94, label %101, label %95

95:                                               ; preds = %89
  %96 = getelementptr inbounds %struct.value_range_d, ptr %55, i64 0, i32 1
  %97 = load ptr, ptr %96, align 8, !tbaa !25
  %98 = load ptr, ptr %61, align 8, !tbaa !31
  %99 = tail call fastcc i32 @compare_values_warnv(ptr noundef %97, ptr noundef %98, ptr noundef %3)
  %100 = icmp eq i32 %99, 1
  br i1 %100, label %101, label %103

101:                                              ; preds = %95, %89
  %102 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 25), align 8, !tbaa !5
  br label %193

103:                                              ; preds = %84, %95
  br label %193

104:                                              ; preds = %50
  %105 = getelementptr inbounds %struct.value_range_d, ptr %56, i64 0, i32 2
  %106 = load ptr, ptr %105, align 8, !tbaa !31
  %107 = getelementptr inbounds %struct.value_range_d, ptr %55, i64 0, i32 1
  %108 = load ptr, ptr %107, align 8, !tbaa !25
  %109 = tail call fastcc i32 @compare_values_warnv(ptr noundef %106, ptr noundef %108, ptr noundef %3)
  %110 = getelementptr inbounds %struct.value_range_d, ptr %56, i64 0, i32 1
  %111 = load ptr, ptr %110, align 8, !tbaa !25
  %112 = getelementptr inbounds %struct.value_range_d, ptr %55, i64 0, i32 2
  %113 = load ptr, ptr %112, align 8, !tbaa !31
  %114 = tail call fastcc i32 @compare_values_warnv(ptr noundef %111, ptr noundef %113, ptr noundef %3)
  %115 = icmp eq i32 %109, -1
  %116 = icmp eq i32 %114, -1
  %117 = select i1 %115, i1 %116, i1 false
  br i1 %117, label %122, label %118

118:                                              ; preds = %104
  %119 = icmp eq i32 %109, 1
  %120 = icmp eq i32 %114, 1
  %121 = select i1 %119, i1 %120, i1 false
  br i1 %121, label %122, label %124

122:                                              ; preds = %118, %104
  %123 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 26), align 16, !tbaa !5
  br label %193

124:                                              ; preds = %118
  %125 = load ptr, ptr %110, align 8, !tbaa !25
  %126 = load ptr, ptr %105, align 8, !tbaa !31
  %127 = tail call fastcc i32 @compare_values_warnv(ptr noundef %125, ptr noundef %126, ptr noundef %3)
  %128 = icmp eq i32 %127, 0
  br i1 %128, label %129, label %193

129:                                              ; preds = %124
  %130 = load ptr, ptr %107, align 8, !tbaa !25
  %131 = load ptr, ptr %112, align 8, !tbaa !31
  %132 = tail call fastcc i32 @compare_values_warnv(ptr noundef %130, ptr noundef %131, ptr noundef %3)
  %133 = icmp eq i32 %132, 0
  br i1 %133, label %134, label %193

134:                                              ; preds = %129
  %135 = load ptr, ptr %110, align 8, !tbaa !25
  %136 = load ptr, ptr %107, align 8, !tbaa !25
  %137 = tail call fastcc i32 @compare_values_warnv(ptr noundef %135, ptr noundef %136, ptr noundef %3)
  %138 = icmp eq i32 %137, 0
  br i1 %138, label %139, label %193

139:                                              ; preds = %134
  %140 = load ptr, ptr %105, align 8, !tbaa !31
  %141 = load ptr, ptr %112, align 8, !tbaa !31
  %142 = tail call fastcc i32 @compare_values_warnv(ptr noundef %140, ptr noundef %141, ptr noundef %3)
  %143 = icmp eq i32 %142, 0
  %144 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 25), align 8
  %145 = select i1 %143, ptr %144, ptr null
  br label %193

146:                                              ; preds = %50
  %147 = icmp eq i32 %57, 97
  %148 = icmp eq i32 %57, 98
  %149 = add i32 %57, -97
  %150 = icmp ult i32 %149, 2
  br i1 %150, label %151, label %192

151:                                              ; preds = %146
  %152 = getelementptr inbounds %struct.value_range_d, ptr %56, i64 0, i32 2
  %153 = load ptr, ptr %152, align 8, !tbaa !31
  %154 = getelementptr inbounds %struct.value_range_d, ptr %55, i64 0, i32 1
  %155 = load ptr, ptr %154, align 8, !tbaa !25
  %156 = tail call fastcc i32 @compare_values_warnv(ptr noundef %153, ptr noundef %155, ptr noundef %3)
  %157 = icmp eq i32 %156, -1
  %158 = select i1 %147, i1 %157, i1 false
  br i1 %158, label %163, label %159

159:                                              ; preds = %151
  %160 = add i32 %156, 1
  %161 = icmp ult i32 %160, 2
  %162 = select i1 %148, i1 %161, i1 false
  br i1 %162, label %163, label %172

163:                                              ; preds = %159, %151
  %164 = tail call fastcc zeroext i8 @overflow_infinity_range_p(ptr noundef nonnull %56), !range !79
  %165 = icmp eq i8 %164, 0
  br i1 %165, label %166, label %169

166:                                              ; preds = %163
  %167 = tail call fastcc zeroext i8 @overflow_infinity_range_p(ptr noundef nonnull %55), !range !79
  %168 = icmp eq i8 %167, 0
  br i1 %168, label %170, label %169

169:                                              ; preds = %166, %163
  store i8 1, ptr %3, align 1, !tbaa !16
  br label %170

170:                                              ; preds = %169, %166
  %171 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 26), align 16, !tbaa !5
  br label %193

172:                                              ; preds = %159
  %173 = getelementptr inbounds %struct.value_range_d, ptr %56, i64 0, i32 1
  %174 = load ptr, ptr %173, align 8, !tbaa !25
  %175 = getelementptr inbounds %struct.value_range_d, ptr %55, i64 0, i32 2
  %176 = load ptr, ptr %175, align 8, !tbaa !31
  %177 = tail call fastcc i32 @compare_values_warnv(ptr noundef %174, ptr noundef %176, ptr noundef %3)
  %178 = icmp ult i32 %177, 2
  %179 = select i1 %147, i1 %178, i1 false
  %180 = icmp eq i32 %177, 1
  %181 = select i1 %148, i1 %180, i1 false
  %182 = select i1 %179, i1 true, i1 %181
  br i1 %182, label %183, label %193

183:                                              ; preds = %172
  %184 = tail call fastcc zeroext i8 @overflow_infinity_range_p(ptr noundef nonnull %56), !range !79
  %185 = icmp eq i8 %184, 0
  br i1 %185, label %186, label %189

186:                                              ; preds = %183
  %187 = tail call fastcc zeroext i8 @overflow_infinity_range_p(ptr noundef nonnull %55), !range !79
  %188 = icmp eq i8 %187, 0
  br i1 %188, label %190, label %189

189:                                              ; preds = %186, %183
  store i8 1, ptr %3, align 1, !tbaa !16
  br label %190

190:                                              ; preds = %189, %186
  %191 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 25), align 8, !tbaa !5
  br label %193

192:                                              ; preds = %146
  tail call void @fancy_abort(ptr noundef nonnull @.str.27, i32 noundef 3488, ptr noundef nonnull @.str.28) #18
  br label %193

193:                                              ; preds = %82, %139, %170, %190, %172, %122, %134, %129, %124, %84, %44, %47, %26, %33, %17, %15, %4, %4, %6, %6, %192, %103, %101, %40
  %194 = phi ptr [ %43, %40 ], [ %88, %84 ], [ null, %103 ], [ %102, %101 ], [ null, %192 ], [ null, %6 ], [ null, %6 ], [ null, %4 ], [ null, %4 ], [ null, %15 ], [ null, %17 ], [ null, %33 ], [ null, %26 ], [ null, %47 ], [ null, %44 ], [ %123, %122 ], [ null, %134 ], [ null, %129 ], [ null, %124 ], [ %171, %170 ], [ %191, %190 ], [ null, %172 ], [ %145, %139 ], [ %83, %82 ]
  ret ptr %194
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc ptr @compare_range_with_value(i32 noundef %0, ptr nocapture noundef readonly %1, ptr noundef %2, ptr noundef %3) unnamed_addr #9 {
  %5 = load i32, ptr %1, align 8, !tbaa !23
  switch i32 %5, label %23 [
    i32 3, label %150
    i32 0, label %150
    i32 2, label %6
  ]

6:                                                ; preds = %4
  %7 = add i32 %0, -97
  %8 = icmp ult i32 %7, 4
  br i1 %8, label %150, label %9

9:                                                ; preds = %6
  %10 = getelementptr inbounds %struct.value_range_d, ptr %1, i64 0, i32 1
  %11 = load ptr, ptr %10, align 8, !tbaa !25
  %12 = tail call fastcc i32 @operand_less_p(ptr noundef %2, ptr noundef %11)
  switch i32 %12, label %13 [
    i32 -2, label %150
    i32 1, label %150
  ]

13:                                               ; preds = %9
  %14 = getelementptr inbounds %struct.value_range_d, ptr %1, i64 0, i32 2
  %15 = load ptr, ptr %14, align 8, !tbaa !31
  %16 = tail call fastcc i32 @operand_less_p(ptr noundef %15, ptr noundef %2)
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %18, label %150

18:                                               ; preds = %13
  %19 = icmp eq i32 %0, 102
  %20 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 26), align 16
  %21 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 25), align 8
  %22 = select i1 %19, ptr %20, ptr %21
  br label %150

23:                                               ; preds = %4
  %24 = tail call fastcc zeroext i8 @usable_range_p(ptr noundef nonnull %1, ptr noundef %3), !range !79
  %25 = icmp eq i8 %24, 0
  br i1 %25, label %150, label %26

26:                                               ; preds = %23
  switch i32 %0, label %77 [
    i32 101, label %27
    i32 102, label %54
  ]

27:                                               ; preds = %26
  %28 = getelementptr inbounds %struct.value_range_d, ptr %1, i64 0, i32 1
  %29 = load ptr, ptr %28, align 8, !tbaa !25
  %30 = getelementptr inbounds %struct.value_range_d, ptr %1, i64 0, i32 2
  %31 = load ptr, ptr %30, align 8, !tbaa !31
  %32 = tail call fastcc i32 @compare_values_warnv(ptr noundef %29, ptr noundef %31, ptr noundef %3)
  %33 = icmp eq i32 %32, 0
  %34 = load ptr, ptr %28, align 8, !tbaa !25
  br i1 %33, label %35, label %44

35:                                               ; preds = %27
  %36 = tail call fastcc i32 @compare_values_warnv(ptr noundef %34, ptr noundef %2, ptr noundef %3)
  %37 = icmp eq i32 %36, 0
  br i1 %37, label %38, label %40

38:                                               ; preds = %35
  %39 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 26), align 16, !tbaa !5
  br label %150

40:                                               ; preds = %35
  %41 = add i32 %36, -3
  %42 = icmp ult i32 %41, -4
  %43 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 25), align 8
  br i1 %42, label %53, label %150

44:                                               ; preds = %27
  %45 = tail call fastcc i32 @compare_values_warnv(ptr noundef %2, ptr noundef %34, ptr noundef %3)
  %46 = icmp eq i32 %45, -1
  br i1 %46, label %51, label %47

47:                                               ; preds = %44
  %48 = load ptr, ptr %30, align 8, !tbaa !31
  %49 = tail call fastcc i32 @compare_values_warnv(ptr noundef %48, ptr noundef %2, ptr noundef %3)
  %50 = icmp eq i32 %49, -1
  br i1 %50, label %51, label %53

51:                                               ; preds = %47, %44
  %52 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 25), align 8, !tbaa !5
  br label %150

53:                                               ; preds = %40, %47
  br label %150

54:                                               ; preds = %26
  %55 = getelementptr inbounds %struct.value_range_d, ptr %1, i64 0, i32 2
  %56 = load ptr, ptr %55, align 8, !tbaa !31
  %57 = tail call fastcc i32 @compare_values_warnv(ptr noundef %56, ptr noundef %2, ptr noundef %3)
  %58 = icmp eq i32 %57, -1
  br i1 %58, label %64, label %59

59:                                               ; preds = %54
  %60 = getelementptr inbounds %struct.value_range_d, ptr %1, i64 0, i32 1
  %61 = load ptr, ptr %60, align 8, !tbaa !25
  %62 = tail call fastcc i32 @compare_values_warnv(ptr noundef %61, ptr noundef %2, ptr noundef %3)
  %63 = icmp eq i32 %62, 1
  br i1 %63, label %64, label %66

64:                                               ; preds = %59, %54
  %65 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 26), align 16, !tbaa !5
  br label %150

66:                                               ; preds = %59
  %67 = load ptr, ptr %60, align 8, !tbaa !25
  %68 = load ptr, ptr %55, align 8, !tbaa !31
  %69 = tail call fastcc i32 @compare_values_warnv(ptr noundef %67, ptr noundef %68, ptr noundef %3)
  %70 = icmp eq i32 %69, 0
  br i1 %70, label %71, label %150

71:                                               ; preds = %66
  %72 = load ptr, ptr %60, align 8, !tbaa !25
  %73 = tail call fastcc i32 @compare_values_warnv(ptr noundef %72, ptr noundef %2, ptr noundef %3)
  %74 = icmp eq i32 %73, 0
  %75 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 25), align 8
  %76 = select i1 %74, ptr %75, ptr null
  br label %150

77:                                               ; preds = %26
  %78 = icmp eq i32 %0, 97
  %79 = icmp eq i32 %0, 98
  %80 = add i32 %0, -97
  %81 = icmp ult i32 %80, 2
  br i1 %81, label %82, label %113

82:                                               ; preds = %77
  %83 = getelementptr inbounds %struct.value_range_d, ptr %1, i64 0, i32 2
  %84 = load ptr, ptr %83, align 8, !tbaa !31
  %85 = tail call fastcc i32 @compare_values_warnv(ptr noundef %84, ptr noundef %2, ptr noundef %3)
  %86 = icmp eq i32 %85, -1
  %87 = select i1 %78, i1 %86, i1 false
  br i1 %87, label %92, label %88

88:                                               ; preds = %82
  %89 = add i32 %85, 1
  %90 = icmp ult i32 %89, 2
  %91 = select i1 %79, i1 %90, i1 false
  br i1 %91, label %92, label %98

92:                                               ; preds = %88, %82
  %93 = tail call fastcc zeroext i8 @overflow_infinity_range_p(ptr noundef nonnull %1), !range !79
  %94 = icmp eq i8 %93, 0
  br i1 %94, label %96, label %95

95:                                               ; preds = %92
  store i8 1, ptr %3, align 1, !tbaa !16
  br label %96

96:                                               ; preds = %95, %92
  %97 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 26), align 16, !tbaa !5
  br label %150

98:                                               ; preds = %88
  %99 = getelementptr inbounds %struct.value_range_d, ptr %1, i64 0, i32 1
  %100 = load ptr, ptr %99, align 8, !tbaa !25
  %101 = tail call fastcc i32 @compare_values_warnv(ptr noundef %100, ptr noundef %2, ptr noundef %3)
  %102 = icmp ult i32 %101, 2
  %103 = select i1 %78, i1 %102, i1 false
  %104 = icmp eq i32 %101, 1
  %105 = select i1 %79, i1 %104, i1 false
  %106 = select i1 %103, i1 true, i1 %105
  br i1 %106, label %107, label %150

107:                                              ; preds = %98
  %108 = tail call fastcc zeroext i8 @overflow_infinity_range_p(ptr noundef nonnull %1), !range !79
  %109 = icmp eq i8 %108, 0
  br i1 %109, label %111, label %110

110:                                              ; preds = %107
  store i8 1, ptr %3, align 1, !tbaa !16
  br label %111

111:                                              ; preds = %110, %107
  %112 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 25), align 8, !tbaa !5
  br label %150

113:                                              ; preds = %77
  %114 = icmp eq i32 %0, 99
  %115 = icmp eq i32 %0, 100
  %116 = add i32 %0, -99
  %117 = icmp ult i32 %116, 2
  br i1 %117, label %118, label %149

118:                                              ; preds = %113
  %119 = getelementptr inbounds %struct.value_range_d, ptr %1, i64 0, i32 1
  %120 = load ptr, ptr %119, align 8, !tbaa !25
  %121 = tail call fastcc i32 @compare_values_warnv(ptr noundef %120, ptr noundef %2, ptr noundef %3)
  %122 = icmp eq i32 %121, 1
  %123 = select i1 %114, i1 %122, i1 false
  %124 = icmp ult i32 %121, 2
  %125 = select i1 %115, i1 %124, i1 false
  %126 = select i1 %123, i1 true, i1 %125
  br i1 %126, label %127, label %133

127:                                              ; preds = %118
  %128 = tail call fastcc zeroext i8 @overflow_infinity_range_p(ptr noundef nonnull %1), !range !79
  %129 = icmp eq i8 %128, 0
  br i1 %129, label %131, label %130

130:                                              ; preds = %127
  store i8 1, ptr %3, align 1, !tbaa !16
  br label %131

131:                                              ; preds = %130, %127
  %132 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 26), align 16, !tbaa !5
  br label %150

133:                                              ; preds = %118
  %134 = getelementptr inbounds %struct.value_range_d, ptr %1, i64 0, i32 2
  %135 = load ptr, ptr %134, align 8, !tbaa !31
  %136 = tail call fastcc i32 @compare_values_warnv(ptr noundef %135, ptr noundef %2, ptr noundef %3)
  %137 = add i32 %136, 1
  %138 = icmp ult i32 %137, 2
  %139 = select i1 %114, i1 %138, i1 false
  %140 = icmp eq i32 %136, -1
  %141 = select i1 %115, i1 %140, i1 false
  %142 = select i1 %139, i1 true, i1 %141
  br i1 %142, label %143, label %150

143:                                              ; preds = %133
  %144 = tail call fastcc zeroext i8 @overflow_infinity_range_p(ptr noundef nonnull %1), !range !79
  %145 = icmp eq i8 %144, 0
  br i1 %145, label %147, label %146

146:                                              ; preds = %143
  store i8 1, ptr %3, align 1, !tbaa !16
  br label %147

147:                                              ; preds = %146, %143
  %148 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 25), align 8, !tbaa !5
  br label %150

149:                                              ; preds = %113
  tail call void @fancy_abort(ptr noundef nonnull @.str.27, i32 noundef 3620, ptr noundef nonnull @.str.28) #18
  br label %150

150:                                              ; preds = %13, %9, %9, %38, %71, %131, %147, %133, %96, %111, %98, %66, %40, %23, %6, %4, %4, %149, %64, %53, %51, %18
  %151 = phi ptr [ %22, %18 ], [ %43, %40 ], [ null, %53 ], [ %52, %51 ], [ %65, %64 ], [ null, %149 ], [ null, %4 ], [ null, %4 ], [ null, %6 ], [ null, %23 ], [ null, %66 ], [ %97, %96 ], [ %112, %111 ], [ null, %98 ], [ %132, %131 ], [ %148, %147 ], [ null, %133 ], [ %76, %71 ], [ %39, %38 ], [ null, %9 ], [ null, %9 ], [ null, %13 ]
  ret ptr %151
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc zeroext i8 @usable_range_p(ptr nocapture noundef readonly %0, ptr nocapture noundef writeonly %1) unnamed_addr #9 {
  %3 = load i32, ptr %0, align 8, !tbaa !23
  %4 = icmp eq i32 %3, 1
  br i1 %4, label %6, label %5

5:                                                ; preds = %2
  tail call void @fancy_abort(ptr noundef nonnull @.str.27, i32 noundef 796, ptr noundef nonnull @.str.28) #18
  br label %6

6:                                                ; preds = %2, %5
  %7 = getelementptr inbounds %struct.value_range_d, ptr %0, i64 0, i32 1
  %8 = load ptr, ptr %7, align 8, !tbaa !25
  %9 = getelementptr inbounds %struct.tree_common, ptr %8, i64 0, i32 2
  %10 = load ptr, ptr %9, align 8, !tbaa !16
  %11 = load i64, ptr %10, align 8
  %12 = trunc i64 %11 to i32
  %13 = and i32 %12, 65535
  %14 = add nsw i32 %13, -6
  %15 = icmp ult i32 %14, 3
  br i1 %15, label %16, label %73

16:                                               ; preds = %6
  %17 = and i64 %11, 2097152
  %18 = icmp ne i64 %17, 0
  %19 = load i32, ptr @flag_wrapv, align 4
  %20 = icmp ne i32 %19, 0
  %21 = select i1 %18, i1 true, i1 %20
  br i1 %21, label %73, label %22

22:                                               ; preds = %16
  %23 = load i64, ptr %8, align 8
  %24 = and i64 %23, 65535
  %25 = getelementptr inbounds [0 x i32], ptr @tree_code_type, i64 0, i64 %24
  %26 = load i32, ptr %25, align 4, !tbaa !16
  %27 = icmp ne i32 %26, 1
  %28 = and i64 %23, 134217728
  %29 = icmp eq i64 %28, 0
  %30 = or i1 %27, %29
  br i1 %30, label %73, label %31

31:                                               ; preds = %22
  %32 = getelementptr inbounds %struct.tree_type, ptr %10, i64 0, i32 13
  %33 = load ptr, ptr %32, align 8, !tbaa !16
  %34 = icmp eq ptr %33, %8
  br i1 %34, label %57, label %35

35:                                               ; preds = %31
  %36 = icmp eq ptr %33, null
  br i1 %36, label %47, label %37

37:                                               ; preds = %35
  %38 = tail call i32 @operand_equal_p(ptr noundef nonnull %8, ptr noundef nonnull %33, i32 noundef 0) #18
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %40, label %57

40:                                               ; preds = %37
  %41 = load ptr, ptr %9, align 8, !tbaa !16
  %42 = load i64, ptr %41, align 8
  %43 = trunc i64 %42 to i32
  %44 = and i32 %43, 65535
  %45 = add nsw i32 %44, -6
  %46 = icmp ult i32 %45, 3
  br i1 %46, label %47, label %73

47:                                               ; preds = %40, %35
  %48 = phi ptr [ %41, %40 ], [ %10, %35 ]
  %49 = getelementptr inbounds %struct.tree_type, ptr %48, i64 0, i32 14
  %50 = load ptr, ptr %49, align 8, !tbaa !16
  %51 = icmp eq ptr %50, %8
  br i1 %51, label %57, label %52

52:                                               ; preds = %47
  %53 = icmp eq ptr %50, null
  br i1 %53, label %73, label %54

54:                                               ; preds = %52
  %55 = tail call i32 @operand_equal_p(ptr noundef nonnull %8, ptr noundef nonnull %50, i32 noundef 0) #18
  %56 = icmp eq i32 %55, 0
  br i1 %56, label %73, label %57

57:                                               ; preds = %31, %47, %37, %54
  store i8 1, ptr %1, align 1, !tbaa !16
  %58 = load ptr, ptr %7, align 8, !tbaa !25
  %59 = getelementptr inbounds %struct.tree_common, ptr %58, i64 0, i32 2
  %60 = load ptr, ptr %59, align 8, !tbaa !16
  %61 = load i64, ptr %60, align 8
  %62 = and i64 %61, 2097152
  %63 = icmp eq i64 %62, 0
  %64 = load i32, ptr @flag_wrapv, align 4
  %65 = icmp eq i32 %64, 0
  %66 = select i1 %63, i1 %65, i1 false
  %67 = load i32, ptr @flag_trapv, align 4
  %68 = icmp eq i32 %67, 0
  %69 = select i1 %66, i1 %68, i1 false
  %70 = load i32, ptr @flag_strict_overflow, align 4
  %71 = icmp ne i32 %70, 0
  %72 = select i1 %69, i1 %71, i1 false
  br i1 %72, label %73, label %141

73:                                               ; preds = %6, %40, %52, %16, %22, %57, %54
  %74 = getelementptr inbounds %struct.value_range_d, ptr %0, i64 0, i32 2
  %75 = load ptr, ptr %74, align 8, !tbaa !31
  %76 = getelementptr inbounds %struct.tree_common, ptr %75, i64 0, i32 2
  %77 = load ptr, ptr %76, align 8, !tbaa !16
  %78 = load i64, ptr %77, align 8
  %79 = trunc i64 %78 to i32
  %80 = and i32 %79, 65535
  %81 = add nsw i32 %80, -6
  %82 = icmp ult i32 %81, 3
  br i1 %82, label %83, label %140

83:                                               ; preds = %73
  %84 = and i64 %78, 2097152
  %85 = icmp ne i64 %84, 0
  %86 = load i32, ptr @flag_wrapv, align 4
  %87 = icmp ne i32 %86, 0
  %88 = select i1 %85, i1 true, i1 %87
  br i1 %88, label %140, label %89

89:                                               ; preds = %83
  %90 = load i64, ptr %75, align 8
  %91 = and i64 %90, 65535
  %92 = getelementptr inbounds [0 x i32], ptr @tree_code_type, i64 0, i64 %91
  %93 = load i32, ptr %92, align 4, !tbaa !16
  %94 = icmp ne i32 %93, 1
  %95 = and i64 %90, 134217728
  %96 = icmp eq i64 %95, 0
  %97 = or i1 %94, %96
  br i1 %97, label %140, label %98

98:                                               ; preds = %89
  %99 = getelementptr inbounds %struct.tree_type, ptr %77, i64 0, i32 13
  %100 = load ptr, ptr %99, align 8, !tbaa !16
  %101 = icmp eq ptr %100, %75
  br i1 %101, label %124, label %102

102:                                              ; preds = %98
  %103 = icmp eq ptr %100, null
  br i1 %103, label %114, label %104

104:                                              ; preds = %102
  %105 = tail call i32 @operand_equal_p(ptr noundef nonnull %75, ptr noundef nonnull %100, i32 noundef 0) #18
  %106 = icmp eq i32 %105, 0
  br i1 %106, label %107, label %124

107:                                              ; preds = %104
  %108 = load ptr, ptr %76, align 8, !tbaa !16
  %109 = load i64, ptr %108, align 8
  %110 = trunc i64 %109 to i32
  %111 = and i32 %110, 65535
  %112 = add nsw i32 %111, -6
  %113 = icmp ult i32 %112, 3
  br i1 %113, label %114, label %140

114:                                              ; preds = %107, %102
  %115 = phi ptr [ %108, %107 ], [ %77, %102 ]
  %116 = getelementptr inbounds %struct.tree_type, ptr %115, i64 0, i32 14
  %117 = load ptr, ptr %116, align 8, !tbaa !16
  %118 = icmp eq ptr %117, %75
  br i1 %118, label %124, label %119

119:                                              ; preds = %114
  %120 = icmp eq ptr %117, null
  br i1 %120, label %140, label %121

121:                                              ; preds = %119
  %122 = tail call i32 @operand_equal_p(ptr noundef nonnull %75, ptr noundef nonnull %117, i32 noundef 0) #18
  %123 = icmp eq i32 %122, 0
  br i1 %123, label %140, label %124

124:                                              ; preds = %98, %114, %104, %121
  store i8 1, ptr %1, align 1, !tbaa !16
  %125 = load ptr, ptr %74, align 8, !tbaa !31
  %126 = getelementptr inbounds %struct.tree_common, ptr %125, i64 0, i32 2
  %127 = load ptr, ptr %126, align 8, !tbaa !16
  %128 = load i64, ptr %127, align 8
  %129 = and i64 %128, 2097152
  %130 = icmp eq i64 %129, 0
  %131 = load i32, ptr @flag_wrapv, align 4
  %132 = icmp eq i32 %131, 0
  %133 = select i1 %130, i1 %132, i1 false
  %134 = load i32, ptr @flag_trapv, align 4
  %135 = icmp eq i32 %134, 0
  %136 = select i1 %133, i1 %135, i1 false
  %137 = load i32, ptr @flag_strict_overflow, align 4
  %138 = icmp ne i32 %137, 0
  %139 = select i1 %136, i1 %138, i1 false
  br i1 %139, label %140, label %141

140:                                              ; preds = %73, %107, %119, %83, %89, %124, %121
  br label %141

141:                                              ; preds = %124, %57, %140
  %142 = phi i8 [ 1, %140 ], [ 0, %57 ], [ 0, %124 ]
  ret i8 %142
}

declare void @bitmap_obstack_initialize(ptr noundef) local_unnamed_addr #3

declare zeroext i8 @bitmap_intersect_p(ptr noundef, ptr noundef) local_unnamed_addr #3

declare zeroext i8 @bitmap_clear_bit(ptr noundef, i32 noundef) local_unnamed_addr #3

; Function Attrs: inlinehint nounwind sspstrong uwtable
define internal fastcc zeroext i8 @vrp_operand_equal_p(ptr noundef %0, ptr noundef %1) unnamed_addr #2 {
  %3 = icmp eq ptr %0, %1
  br i1 %3, label %110, label %4

4:                                                ; preds = %2
  %5 = icmp ne ptr %0, null
  %6 = icmp ne ptr %1, null
  %7 = and i1 %5, %6
  br i1 %7, label %8, label %110

8:                                                ; preds = %4
  %9 = tail call i32 @operand_equal_p(ptr noundef nonnull %0, ptr noundef nonnull %1, i32 noundef 0) #18
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %110, label %11

11:                                               ; preds = %8
  %12 = getelementptr inbounds %struct.tree_common, ptr %0, i64 0, i32 2
  %13 = load ptr, ptr %12, align 8, !tbaa !16
  %14 = load i64, ptr %13, align 8
  %15 = trunc i64 %14 to i32
  %16 = and i32 %15, 65535
  %17 = add nsw i32 %16, -6
  %18 = icmp ult i32 %17, 3
  br i1 %18, label %19, label %110

19:                                               ; preds = %11
  %20 = and i64 %14, 2097152
  %21 = icmp ne i64 %20, 0
  %22 = load i32, ptr @flag_wrapv, align 4
  %23 = icmp ne i32 %22, 0
  %24 = select i1 %21, i1 true, i1 %23
  br i1 %24, label %110, label %25

25:                                               ; preds = %19
  %26 = load i64, ptr %0, align 8
  %27 = and i64 %26, 65535
  %28 = getelementptr inbounds [0 x i32], ptr @tree_code_type, i64 0, i64 %27
  %29 = load i32, ptr %28, align 4, !tbaa !16
  %30 = icmp ne i32 %29, 1
  %31 = and i64 %26, 134217728
  %32 = icmp eq i64 %31, 0
  %33 = or i1 %30, %32
  br i1 %33, label %110, label %34

34:                                               ; preds = %25
  %35 = getelementptr inbounds %struct.tree_type, ptr %13, i64 0, i32 13
  %36 = load ptr, ptr %35, align 8, !tbaa !16
  %37 = icmp eq ptr %36, %0
  br i1 %37, label %60, label %38

38:                                               ; preds = %34
  %39 = icmp eq ptr %36, null
  br i1 %39, label %50, label %40

40:                                               ; preds = %38
  %41 = tail call i32 @operand_equal_p(ptr noundef nonnull %0, ptr noundef nonnull %36, i32 noundef 0) #18
  %42 = icmp eq i32 %41, 0
  br i1 %42, label %43, label %60

43:                                               ; preds = %40
  %44 = load ptr, ptr %12, align 8, !tbaa !16
  %45 = load i64, ptr %44, align 8
  %46 = trunc i64 %45 to i32
  %47 = and i32 %46, 65535
  %48 = add nsw i32 %47, -6
  %49 = icmp ult i32 %48, 3
  br i1 %49, label %50, label %110

50:                                               ; preds = %43, %38
  %51 = phi ptr [ %44, %43 ], [ %13, %38 ]
  %52 = getelementptr inbounds %struct.tree_type, ptr %51, i64 0, i32 14
  %53 = load ptr, ptr %52, align 8, !tbaa !16
  %54 = icmp eq ptr %53, %0
  br i1 %54, label %60, label %55

55:                                               ; preds = %50
  %56 = icmp eq ptr %53, null
  br i1 %56, label %110, label %57

57:                                               ; preds = %55
  %58 = tail call i32 @operand_equal_p(ptr noundef nonnull %0, ptr noundef nonnull %53, i32 noundef 0) #18
  %59 = icmp eq i32 %58, 0
  br i1 %59, label %110, label %60

60:                                               ; preds = %34, %50, %40, %57
  %61 = getelementptr inbounds %struct.tree_common, ptr %1, i64 0, i32 2
  %62 = load ptr, ptr %61, align 8, !tbaa !16
  %63 = load i64, ptr %62, align 8
  %64 = trunc i64 %63 to i32
  %65 = and i32 %64, 65535
  %66 = add nsw i32 %65, -6
  %67 = icmp ult i32 %66, 3
  br i1 %67, label %68, label %110

68:                                               ; preds = %60
  %69 = and i64 %63, 2097152
  %70 = icmp ne i64 %69, 0
  %71 = load i32, ptr @flag_wrapv, align 4
  %72 = icmp ne i32 %71, 0
  %73 = select i1 %70, i1 true, i1 %72
  br i1 %73, label %110, label %74

74:                                               ; preds = %68
  %75 = load i64, ptr %1, align 8
  %76 = and i64 %75, 65535
  %77 = getelementptr inbounds [0 x i32], ptr @tree_code_type, i64 0, i64 %76
  %78 = load i32, ptr %77, align 4, !tbaa !16
  %79 = icmp ne i32 %78, 1
  %80 = and i64 %75, 134217728
  %81 = icmp eq i64 %80, 0
  %82 = or i1 %79, %81
  br i1 %82, label %110, label %83

83:                                               ; preds = %74
  %84 = getelementptr inbounds %struct.tree_type, ptr %62, i64 0, i32 13
  %85 = load ptr, ptr %84, align 8, !tbaa !16
  %86 = icmp eq ptr %85, %1
  br i1 %86, label %110, label %87

87:                                               ; preds = %83
  %88 = icmp eq ptr %85, null
  br i1 %88, label %99, label %89

89:                                               ; preds = %87
  %90 = tail call i32 @operand_equal_p(ptr noundef nonnull %1, ptr noundef nonnull %85, i32 noundef 0) #18
  %91 = icmp eq i32 %90, 0
  br i1 %91, label %92, label %110

92:                                               ; preds = %89
  %93 = load ptr, ptr %61, align 8, !tbaa !16
  %94 = load i64, ptr %93, align 8
  %95 = trunc i64 %94 to i32
  %96 = and i32 %95, 65535
  %97 = add nsw i32 %96, -6
  %98 = icmp ult i32 %97, 3
  br i1 %98, label %99, label %110

99:                                               ; preds = %92, %87
  %100 = phi ptr [ %93, %92 ], [ %62, %87 ]
  %101 = getelementptr inbounds %struct.tree_type, ptr %100, i64 0, i32 14
  %102 = load ptr, ptr %101, align 8, !tbaa !16
  %103 = icmp eq ptr %102, %1
  br i1 %103, label %110, label %104

104:                                              ; preds = %99
  %105 = icmp eq ptr %102, null
  br i1 %105, label %110, label %106

106:                                              ; preds = %104
  %107 = tail call i32 @operand_equal_p(ptr noundef nonnull %1, ptr noundef nonnull %102, i32 noundef 0) #18
  %108 = icmp ne i32 %107, 0
  %109 = zext i1 %108 to i8
  br label %110

110:                                              ; preds = %11, %43, %55, %19, %25, %106, %104, %99, %92, %89, %83, %74, %68, %60, %57, %4, %8, %2
  %111 = phi i8 [ 1, %2 ], [ 0, %8 ], [ 0, %4 ], [ 1, %57 ], [ 0, %74 ], [ 0, %68 ], [ 1, %89 ], [ 1, %99 ], [ 0, %104 ], [ %109, %106 ], [ 0, %92 ], [ 0, %60 ], [ 1, %83 ], [ 1, %25 ], [ 1, %19 ], [ 1, %55 ], [ 1, %43 ], [ 1, %11 ]
  ret i8 %111
}

declare zeroext i8 @bitmap_equal_p(ptr noundef, ptr noundef) local_unnamed_addr #3

declare ptr @find_taken_edge(ptr noundef, ptr noundef) local_unnamed_addr #3

declare void @print_generic_stmt(ptr noundef, ptr noundef, i32 noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc zeroext i8 @find_case_label_range(ptr nocapture noundef readonly %0, ptr noundef %1, ptr noundef %2, ptr nocapture noundef writeonly %3, ptr nocapture noundef writeonly %4) unnamed_addr #9 {
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %6) #18
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %7) #18
  %8 = call fastcc zeroext i8 @find_case_label_index(ptr noundef %0, i64 noundef 1, ptr noundef %1, ptr noundef nonnull %6)
  %9 = icmp eq i8 %8, 0
  %10 = load i64, ptr %6, align 8, !tbaa !36
  %11 = call fastcc zeroext i8 @find_case_label_index(ptr noundef %0, i64 noundef %10, ptr noundef %2, ptr noundef nonnull %7)
  %12 = icmp eq i8 %11, 0
  %13 = load i64, ptr %7, align 8, !tbaa !36
  %14 = icmp eq i64 %10, %13
  %15 = select i1 %14, i1 %9, i1 false
  %16 = select i1 %15, i1 %12, i1 false
  br i1 %16, label %17, label %18

17:                                               ; preds = %5
  store i64 1, ptr %3, align 8, !tbaa !36
  store i64 0, ptr %4, align 8, !tbaa !36
  br label %184

18:                                               ; preds = %5
  %19 = select i1 %9, i1 true, i1 %12
  %20 = sext i1 %12 to i64
  %21 = add i64 %13, %20
  %22 = trunc i64 %10 to i32
  %23 = getelementptr i8, ptr %0, i64 12
  %24 = load i32, ptr %23, align 4, !tbaa !16
  %25 = add i32 %22, 1
  %26 = icmp ugt i32 %24, %25
  br i1 %26, label %28, label %27

27:                                               ; preds = %18
  tail call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 3215, ptr noundef nonnull @.str.28) #18
  br label %28

28:                                               ; preds = %27, %18
  %29 = load i32, ptr %0, align 8
  %30 = and i32 %29, 255
  %31 = add nsw i32 %30, -1
  %32 = icmp ult i32 %31, 9
  tail call void @llvm.assume(i1 %32)
  %33 = zext i32 %30 to i64
  %34 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %33
  %35 = load i32, ptr %34, align 4, !tbaa !16
  %36 = zext i32 %35 to i64
  %37 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %36
  %38 = load i64, ptr %37, align 8, !tbaa !36
  %39 = icmp eq i64 %38, 0
  br i1 %39, label %40, label %41

40:                                               ; preds = %28
  tail call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1622, ptr noundef nonnull @.str.28) #18
  br label %41

41:                                               ; preds = %40, %28
  %42 = getelementptr inbounds i8, ptr %0, i64 %38
  %43 = zext i32 %25 to i64
  %44 = getelementptr inbounds ptr, ptr %42, i64 %43
  %45 = load ptr, ptr %44, align 8, !tbaa !5
  %46 = getelementptr inbounds %struct.tree_exp, ptr %45, i64 0, i32 3
  %47 = load ptr, ptr %46, align 8, !tbaa !16
  %48 = load i32, ptr %23, align 4, !tbaa !16
  %49 = icmp ugt i32 %48, %25
  br i1 %49, label %51, label %50

50:                                               ; preds = %41
  tail call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 3215, ptr noundef nonnull @.str.28) #18
  br label %51

51:                                               ; preds = %50, %41
  %52 = load i32, ptr %0, align 8
  %53 = and i32 %52, 255
  %54 = add nsw i32 %53, -1
  %55 = icmp ult i32 %54, 9
  tail call void @llvm.assume(i1 %55)
  %56 = zext i32 %53 to i64
  %57 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %56
  %58 = load i32, ptr %57, align 4, !tbaa !16
  %59 = zext i32 %58 to i64
  %60 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %59
  %61 = load i64, ptr %60, align 8, !tbaa !36
  %62 = icmp eq i64 %61, 0
  br i1 %62, label %63, label %64

63:                                               ; preds = %51
  tail call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1622, ptr noundef nonnull @.str.28) #18
  br label %64

64:                                               ; preds = %63, %51
  %65 = getelementptr inbounds i8, ptr %0, i64 %61
  %66 = getelementptr inbounds ptr, ptr %65, i64 %43
  %67 = load ptr, ptr %66, align 8, !tbaa !5
  %68 = getelementptr inbounds %struct.tree_exp, ptr %67, i64 1
  %69 = load ptr, ptr %68, align 8, !tbaa !16
  %70 = icmp eq ptr %69, null
  br i1 %70, label %94, label %71

71:                                               ; preds = %64
  %72 = load i32, ptr %23, align 4, !tbaa !16
  %73 = icmp ugt i32 %72, %25
  br i1 %73, label %75, label %74

74:                                               ; preds = %71
  tail call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 3215, ptr noundef nonnull @.str.28) #18
  br label %75

75:                                               ; preds = %74, %71
  %76 = load i32, ptr %0, align 8
  %77 = and i32 %76, 255
  %78 = add nsw i32 %77, -1
  %79 = icmp ult i32 %78, 9
  tail call void @llvm.assume(i1 %79)
  %80 = zext i32 %77 to i64
  %81 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %80
  %82 = load i32, ptr %81, align 4, !tbaa !16
  %83 = zext i32 %82 to i64
  %84 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %83
  %85 = load i64, ptr %84, align 8, !tbaa !36
  %86 = icmp eq i64 %85, 0
  br i1 %86, label %87, label %88

87:                                               ; preds = %75
  tail call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1622, ptr noundef nonnull @.str.28) #18
  br label %88

88:                                               ; preds = %87, %75
  %89 = getelementptr inbounds i8, ptr %0, i64 %85
  %90 = getelementptr inbounds ptr, ptr %89, i64 %43
  %91 = load ptr, ptr %90, align 8, !tbaa !5
  %92 = getelementptr inbounds %struct.tree_exp, ptr %91, i64 1
  %93 = load ptr, ptr %92, align 8, !tbaa !16
  br label %94

94:                                               ; preds = %88, %64
  %95 = phi ptr [ %93, %88 ], [ %47, %64 ]
  %96 = add i64 %10, 1
  %97 = icmp ugt i64 %96, %21
  br i1 %97, label %180, label %98

98:                                               ; preds = %94, %176
  %99 = phi i64 [ %178, %176 ], [ %96, %94 ]
  %100 = phi ptr [ %177, %176 ], [ %95, %94 ]
  %101 = trunc i64 %99 to i32
  %102 = load i32, ptr %23, align 4, !tbaa !16
  %103 = add i32 %101, 1
  %104 = icmp ugt i32 %102, %103
  br i1 %104, label %106, label %105

105:                                              ; preds = %98
  tail call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 3215, ptr noundef nonnull @.str.28) #18
  br label %106

106:                                              ; preds = %105, %98
  %107 = load i32, ptr %0, align 8
  %108 = and i32 %107, 255
  %109 = add nsw i32 %108, -1
  %110 = icmp ult i32 %109, 9
  tail call void @llvm.assume(i1 %110)
  %111 = zext i32 %108 to i64
  %112 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %111
  %113 = load i32, ptr %112, align 4, !tbaa !16
  %114 = zext i32 %113 to i64
  %115 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %114
  %116 = load i64, ptr %115, align 8, !tbaa !36
  %117 = icmp eq i64 %116, 0
  br i1 %117, label %118, label %119

118:                                              ; preds = %106
  tail call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1622, ptr noundef nonnull @.str.28) #18
  br label %119

119:                                              ; preds = %118, %106
  %120 = getelementptr inbounds i8, ptr %0, i64 %116
  %121 = zext i32 %103 to i64
  %122 = getelementptr inbounds ptr, ptr %120, i64 %121
  %123 = load ptr, ptr %122, align 8, !tbaa !5
  %124 = getelementptr inbounds %struct.tree_exp, ptr %123, i64 0, i32 3
  %125 = load ptr, ptr %124, align 8, !tbaa !16
  %126 = tail call ptr @int_const_binop(i32 noundef 64, ptr noundef %125, ptr noundef %100, i32 noundef 0) #18
  %127 = tail call i32 @integer_onep(ptr noundef %126) #18
  %128 = icmp eq i32 %127, 0
  br i1 %128, label %180, label %129

129:                                              ; preds = %119
  %130 = load i32, ptr %23, align 4, !tbaa !16
  %131 = icmp ugt i32 %130, %103
  br i1 %131, label %133, label %132

132:                                              ; preds = %129
  tail call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 3215, ptr noundef nonnull @.str.28) #18
  br label %133

133:                                              ; preds = %132, %129
  %134 = load i32, ptr %0, align 8
  %135 = and i32 %134, 255
  %136 = add nsw i32 %135, -1
  %137 = icmp ult i32 %136, 9
  tail call void @llvm.assume(i1 %137)
  %138 = zext i32 %135 to i64
  %139 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %138
  %140 = load i32, ptr %139, align 4, !tbaa !16
  %141 = zext i32 %140 to i64
  %142 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %141
  %143 = load i64, ptr %142, align 8, !tbaa !36
  %144 = icmp eq i64 %143, 0
  br i1 %144, label %145, label %146

145:                                              ; preds = %133
  tail call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1622, ptr noundef nonnull @.str.28) #18
  br label %146

146:                                              ; preds = %145, %133
  %147 = getelementptr inbounds i8, ptr %0, i64 %143
  %148 = getelementptr inbounds ptr, ptr %147, i64 %121
  %149 = load ptr, ptr %148, align 8, !tbaa !5
  %150 = getelementptr inbounds %struct.tree_exp, ptr %149, i64 1
  %151 = load ptr, ptr %150, align 8, !tbaa !16
  %152 = icmp eq ptr %151, null
  br i1 %152, label %176, label %153

153:                                              ; preds = %146
  %154 = load i32, ptr %23, align 4, !tbaa !16
  %155 = icmp ugt i32 %154, %103
  br i1 %155, label %157, label %156

156:                                              ; preds = %153
  tail call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 3215, ptr noundef nonnull @.str.28) #18
  br label %157

157:                                              ; preds = %156, %153
  %158 = load i32, ptr %0, align 8
  %159 = and i32 %158, 255
  %160 = add nsw i32 %159, -1
  %161 = icmp ult i32 %160, 9
  tail call void @llvm.assume(i1 %161)
  %162 = zext i32 %159 to i64
  %163 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %162
  %164 = load i32, ptr %163, align 4, !tbaa !16
  %165 = zext i32 %164 to i64
  %166 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %165
  %167 = load i64, ptr %166, align 8, !tbaa !36
  %168 = icmp eq i64 %167, 0
  br i1 %168, label %169, label %170

169:                                              ; preds = %157
  tail call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1622, ptr noundef nonnull @.str.28) #18
  br label %170

170:                                              ; preds = %169, %157
  %171 = getelementptr inbounds i8, ptr %0, i64 %167
  %172 = getelementptr inbounds ptr, ptr %171, i64 %121
  %173 = load ptr, ptr %172, align 8, !tbaa !5
  %174 = getelementptr inbounds %struct.tree_exp, ptr %173, i64 1
  %175 = load ptr, ptr %174, align 8, !tbaa !16
  br label %176

176:                                              ; preds = %146, %170
  %177 = phi ptr [ %175, %170 ], [ %125, %146 ]
  %178 = add i64 %99, 1
  %179 = icmp ugt i64 %178, %21
  br i1 %179, label %180, label %98, !llvm.loop !202

180:                                              ; preds = %176, %119, %94
  %181 = phi i1 [ %19, %94 ], [ true, %119 ], [ %19, %176 ]
  store i64 %10, ptr %3, align 8, !tbaa !36
  store i64 %21, ptr %4, align 8, !tbaa !36
  %182 = xor i1 %181, true
  %183 = zext i1 %182 to i8
  br label %184

184:                                              ; preds = %180, %17
  %185 = phi i8 [ 0, %17 ], [ %183, %180 ]
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %7) #18
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %6) #18
  ret i8 %185
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc zeroext i8 @find_case_label_index(ptr nocapture noundef readonly %0, i64 noundef %1, ptr noundef %2, ptr nocapture noundef writeonly %3) unnamed_addr #9 {
  %5 = getelementptr i8, ptr %0, i64 12
  %6 = load i32, ptr %5, align 4, !tbaa !16
  %7 = icmp ugt i32 %6, 1
  br i1 %7, label %9, label %8

8:                                                ; preds = %4
  tail call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 3162, ptr noundef nonnull @.str.28) #18
  br label %9

9:                                                ; preds = %4, %8
  %10 = add i32 %6, -1
  %11 = zext i32 %10 to i64
  %12 = icmp eq i64 %11, %1
  br i1 %12, label %59, label %13

13:                                               ; preds = %9, %55
  %14 = phi i64 [ %57, %55 ], [ %1, %9 ]
  %15 = phi i64 [ %56, %55 ], [ %11, %9 ]
  %16 = add i64 %14, %15
  %17 = lshr i64 %16, 1
  %18 = trunc i64 %17 to i32
  %19 = load i32, ptr %5, align 4, !tbaa !16
  %20 = add i32 %18, 1
  %21 = icmp ugt i32 %19, %20
  br i1 %21, label %23, label %22

22:                                               ; preds = %13
  tail call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 3215, ptr noundef nonnull @.str.28) #18
  br label %23

23:                                               ; preds = %22, %13
  %24 = load i32, ptr %0, align 8
  %25 = and i32 %24, 255
  %26 = add nsw i32 %25, -1
  %27 = icmp ult i32 %26, 9
  tail call void @llvm.assume(i1 %27)
  %28 = zext i32 %25 to i64
  %29 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %28
  %30 = load i32, ptr %29, align 4, !tbaa !16
  %31 = zext i32 %30 to i64
  %32 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %31
  %33 = load i64, ptr %32, align 8, !tbaa !36
  %34 = icmp eq i64 %33, 0
  br i1 %34, label %35, label %36

35:                                               ; preds = %23
  tail call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1622, ptr noundef nonnull @.str.28) #18
  br label %36

36:                                               ; preds = %35, %23
  %37 = getelementptr inbounds i8, ptr %0, i64 %33
  %38 = zext i32 %20 to i64
  %39 = getelementptr inbounds ptr, ptr %37, i64 %38
  %40 = load ptr, ptr %39, align 8, !tbaa !5
  %41 = getelementptr inbounds %struct.tree_exp, ptr %40, i64 0, i32 3
  %42 = load ptr, ptr %41, align 8, !tbaa !16
  %43 = tail call i32 @tree_int_cst_compare(ptr noundef %42, ptr noundef %2) #18
  %44 = icmp eq i32 %43, 0
  br i1 %44, label %59, label %45

45:                                               ; preds = %36
  %46 = icmp sgt i32 %43, 0
  br i1 %46, label %55, label %47

47:                                               ; preds = %45
  %48 = add nuw i64 %17, 1
  %49 = getelementptr inbounds %struct.tree_exp, ptr %40, i64 1
  %50 = load ptr, ptr %49, align 8, !tbaa !16
  %51 = icmp eq ptr %50, null
  br i1 %51, label %55, label %52

52:                                               ; preds = %47
  %53 = tail call i32 @tree_int_cst_compare(ptr noundef nonnull %50, ptr noundef %2) #18
  %54 = icmp sgt i32 %53, -1
  br i1 %54, label %59, label %55

55:                                               ; preds = %47, %52, %45
  %56 = phi i64 [ %15, %52 ], [ %15, %47 ], [ %17, %45 ]
  %57 = phi i64 [ %48, %52 ], [ %48, %47 ], [ %14, %45 ]
  %58 = icmp eq i64 %56, %57
  br i1 %58, label %59, label %13, !llvm.loop !203

59:                                               ; preds = %55, %52, %36, %9
  %60 = phi i64 [ %1, %9 ], [ %17, %36 ], [ %17, %52 ], [ %56, %55 ]
  %61 = phi i8 [ 0, %9 ], [ 1, %36 ], [ 1, %52 ], [ 0, %55 ]
  store i64 %60, ptr %3, align 8, !tbaa !36
  ret i8 %61
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc zeroext i8 @vrp_var_may_overflow(ptr noundef %0, ptr noundef %1) unnamed_addr #9 {
  %3 = load ptr, ptr @cfun, align 8, !tbaa !5
  %4 = getelementptr inbounds %struct.function, ptr %3, i64 0, i32 4
  %5 = load ptr, ptr %4, align 8, !tbaa !176
  %6 = icmp eq ptr %5, null
  br i1 %6, label %98, label %7

7:                                                ; preds = %2
  %8 = getelementptr i8, ptr %1, i64 16
  %9 = load ptr, ptr %8, align 8, !tbaa !16
  %10 = icmp eq ptr %9, null
  br i1 %10, label %98, label %11

11:                                               ; preds = %7
  %12 = getelementptr inbounds %struct.basic_block_def, ptr %9, i64 0, i32 3
  %13 = load ptr, ptr %12, align 8, !tbaa !177
  %14 = icmp eq ptr %13, null
  br i1 %14, label %98, label %15

15:                                               ; preds = %11
  %16 = getelementptr i8, ptr %13, i64 40
  %17 = load ptr, ptr %16, align 8, !tbaa !204
  %18 = icmp eq ptr %17, null
  br i1 %18, label %98, label %19

19:                                               ; preds = %15
  %20 = load i32, ptr %17, align 8, !tbaa !205
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %98, label %22

22:                                               ; preds = %19
  %23 = add i32 %20, -1
  %24 = zext i32 %23 to i64
  %25 = getelementptr inbounds %struct.VEC_loop_p_base, ptr %17, i64 0, i32 2, i64 %24
  %26 = load ptr, ptr %25, align 8, !tbaa !5
  %27 = icmp eq ptr %26, null
  br i1 %27, label %98, label %28

28:                                               ; preds = %22
  %29 = tail call ptr @analyze_scalar_evolution(ptr noundef nonnull %13, ptr noundef %0) #18
  %30 = tail call ptr @loop_preheader_edge(ptr noundef nonnull %13) #18
  %31 = icmp eq ptr %30, null
  br i1 %31, label %32, label %36

32:                                               ; preds = %28
  %33 = load ptr, ptr @cfun, align 8, !tbaa !5
  %34 = getelementptr inbounds %struct.function, ptr %33, i64 0, i32 1
  %35 = load ptr, ptr %34, align 8, !tbaa !65
  br label %36

36:                                               ; preds = %28, %32
  %37 = phi ptr [ %35, %32 ], [ %30, %28 ]
  %38 = load ptr, ptr %37, align 8, !tbaa !5
  %39 = tail call ptr @instantiate_scev(ptr noundef %38, ptr noundef nonnull %13, ptr noundef %29) #18
  %40 = load i64, ptr %39, align 8
  %41 = and i64 %40, 65535
  %42 = icmp eq i64 %41, 146
  br i1 %42, label %43, label %98

43:                                               ; preds = %36
  %44 = load i32, ptr %13, align 8, !tbaa !182
  %45 = tail call ptr @initial_condition_in_loop_num(ptr noundef nonnull %39, i32 noundef %44) #18
  %46 = load i32, ptr %13, align 8, !tbaa !182
  %47 = tail call ptr @evolution_part_in_loop_num(ptr noundef nonnull %39, i32 noundef %46) #18
  %48 = icmp eq ptr %47, null
  br i1 %48, label %98, label %49

49:                                               ; preds = %43
  %50 = tail call zeroext i8 @is_gimple_min_invariant(ptr noundef nonnull %47) #18
  %51 = icmp eq i8 %50, 0
  br i1 %51, label %98, label %52

52:                                               ; preds = %49
  %53 = load i64, ptr %45, align 8
  %54 = trunc i64 %53 to i16
  switch i16 %54, label %68 [
    i16 141, label %73
    i16 63, label %55
    i16 64, label %55
  ]

55:                                               ; preds = %52, %52
  %56 = getelementptr inbounds %struct.tree_exp, ptr %45, i64 0, i32 3
  %57 = load ptr, ptr %56, align 8, !tbaa !16
  %58 = load i64, ptr %57, align 8
  %59 = and i64 %58, 65535
  %60 = icmp eq i64 %59, 141
  br i1 %60, label %61, label %98

61:                                               ; preds = %55
  %62 = getelementptr inbounds %struct.tree_exp, ptr %45, i64 1
  %63 = load ptr, ptr %62, align 8, !tbaa !16
  %64 = load i64, ptr %63, align 8
  %65 = and i64 %64, 65535
  %66 = icmp eq i64 %65, 23
  %67 = zext i1 %66 to i8
  br label %70

68:                                               ; preds = %52
  %69 = tail call zeroext i8 @is_gimple_min_invariant(ptr noundef nonnull %45) #18
  br label %70

70:                                               ; preds = %61, %68
  %71 = phi i8 [ %69, %68 ], [ %67, %61 ]
  %72 = icmp eq i8 %71, 0
  br i1 %72, label %98, label %73

73:                                               ; preds = %52, %70
  %74 = getelementptr i8, ptr %39, i64 40
  %75 = load ptr, ptr %74, align 8, !tbaa !16
  %76 = getelementptr i8, ptr %75, i64 24
  %77 = load i64, ptr %76, align 8, !tbaa !16
  %78 = load ptr, ptr @cfun, align 8, !tbaa !5
  %79 = getelementptr inbounds %struct.function, ptr %78, i64 0, i32 4
  %80 = load ptr, ptr %79, align 8, !tbaa !176
  %81 = getelementptr inbounds %struct.loops, ptr %80, i64 0, i32 1
  %82 = load ptr, ptr %81, align 8, !tbaa !183
  %83 = and i64 %77, 4294967295
  %84 = getelementptr inbounds %struct.VEC_loop_p_base, ptr %82, i64 0, i32 2, i64 %83
  %85 = load ptr, ptr %84, align 8, !tbaa !5
  %86 = tail call zeroext i8 @scev_probably_wraps_p(ptr noundef nonnull %45, ptr noundef nonnull %47, ptr noundef nonnull %1, ptr noundef %85, i8 noundef zeroext 1) #18
  %87 = icmp eq i8 %86, 0
  br i1 %87, label %88, label %98

88:                                               ; preds = %73
  %89 = load ptr, ptr @dump_file, align 8, !tbaa !5
  %90 = icmp eq ptr %89, null
  br i1 %90, label %98, label %91

91:                                               ; preds = %88
  %92 = load i32, ptr @dump_flags, align 4, !tbaa !20
  %93 = and i32 %92, 8
  %94 = icmp eq i32 %93, 0
  br i1 %94, label %98, label %95

95:                                               ; preds = %91
  tail call void @print_generic_expr(ptr noundef nonnull %89, ptr noundef %0, i32 noundef 0) #18
  %96 = load ptr, ptr @dump_file, align 8, !tbaa !5
  %97 = tail call i64 @fwrite(ptr nonnull @.str.52, i64 47, i64 1, ptr %96)
  br label %98

98:                                               ; preds = %55, %15, %19, %7, %88, %91, %95, %73, %43, %49, %70, %36, %11, %22, %2
  %99 = phi i8 [ 1, %2 ], [ 1, %22 ], [ 1, %11 ], [ 1, %36 ], [ 1, %70 ], [ 1, %49 ], [ 1, %43 ], [ 1, %73 ], [ 0, %95 ], [ 0, %91 ], [ 0, %88 ], [ 1, %7 ], [ 1, %19 ], [ 1, %15 ], [ 1, %55 ]
  ret i8 %99
}

declare ptr @analyze_scalar_evolution(ptr noundef, ptr noundef) local_unnamed_addr #3

declare ptr @initial_condition_in_loop_num(ptr noundef, i32 noundef) local_unnamed_addr #3

declare ptr @evolution_part_in_loop_num(ptr noundef, i32 noundef) local_unnamed_addr #3

declare i32 @scev_direction(ptr noundef) local_unnamed_addr #3

declare zeroext i8 @scev_probably_wraps_p(ptr noundef, ptr noundef, ptr noundef, ptr noundef, i8 noundef zeroext) local_unnamed_addr #3

declare ptr @lower_bound_in_type(ptr noundef, ptr noundef) local_unnamed_addr #3

declare ptr @upper_bound_in_type(ptr noundef, ptr noundef) local_unnamed_addr #3

declare ptr @instantiate_scev(ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

declare ptr @loop_preheader_edge(ptr noundef) local_unnamed_addr #3

declare zeroext i8 @substitute_and_fold(ptr noundef, ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define internal zeroext i8 @vrp_fold_stmt(ptr noundef %0) #9 {
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  %4 = alloca i8, align 1
  %5 = alloca i8, align 1
  %6 = alloca i8, align 1
  %7 = load ptr, ptr %0, align 8, !tbaa !49
  %8 = load ptr, ptr %7, align 8, !tbaa !51
  %9 = load i32, ptr %8, align 8
  %10 = and i32 %9, 255
  %11 = icmp eq i32 %10, 6
  br i1 %11, label %12, label %127

12:                                               ; preds = %1
  %13 = trunc i32 %9 to i8
  switch i8 %13, label %16 [
    i8 6, label %14
    i8 1, label %14
    i8 8, label %18
  ]

14:                                               ; preds = %12, %12
  %15 = lshr i32 %9, 16
  br label %18

16:                                               ; preds = %12
  tail call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1446, ptr noundef nonnull @.str.28) #18
  %17 = load i32, ptr %8, align 8
  br label %18

18:                                               ; preds = %16, %14, %12
  %19 = phi i32 [ %9, %14 ], [ %17, %16 ], [ %9, %12 ]
  %20 = phi i32 [ %15, %14 ], [ 0, %16 ], [ 59, %12 ]
  %21 = zext i32 %20 to i64
  %22 = getelementptr inbounds [0 x i8], ptr @gimple_rhs_class_table, i64 0, i64 %21
  %23 = load i8, ptr %22, align 1, !tbaa !16
  %24 = icmp eq i8 %23, 3
  br i1 %24, label %25, label %45

25:                                               ; preds = %18
  %26 = and i32 %19, 255
  %27 = add nsw i32 %26, -1
  %28 = icmp ult i32 %27, 9
  tail call void @llvm.assume(i1 %28)
  %29 = zext i32 %26 to i64
  %30 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %29
  %31 = load i32, ptr %30, align 4, !tbaa !16
  %32 = zext i32 %31 to i64
  %33 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %32
  %34 = load i64, ptr %33, align 8, !tbaa !36
  %35 = icmp eq i64 %34, 0
  br i1 %35, label %36, label %38

36:                                               ; preds = %25
  tail call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1622, ptr noundef nonnull @.str.28) #18
  %37 = load i32, ptr %8, align 8
  br label %38

38:                                               ; preds = %36, %25
  %39 = phi i32 [ %37, %36 ], [ %19, %25 ]
  %40 = getelementptr inbounds i8, ptr %8, i64 %34
  %41 = getelementptr inbounds ptr, ptr %40, i64 1
  %42 = load ptr, ptr %41, align 8, !tbaa !5
  %43 = load i64, ptr %42, align 8
  %44 = and i64 %43, 65535
  br label %45

45:                                               ; preds = %38, %18
  %46 = phi i32 [ %19, %18 ], [ %39, %38 ]
  %47 = phi i64 [ %21, %18 ], [ %44, %38 ]
  %48 = getelementptr inbounds [0 x i32], ptr @tree_code_type, i64 0, i64 %47
  %49 = load i32, ptr %48, align 4, !tbaa !16
  %50 = icmp eq i32 %49, 5
  br i1 %50, label %51, label %127

51:                                               ; preds = %45
  %52 = trunc i32 %46 to i8
  switch i8 %52, label %55 [
    i8 6, label %53
    i8 1, label %53
    i8 8, label %57
  ]

53:                                               ; preds = %51, %51
  %54 = lshr i32 %46, 16
  br label %57

55:                                               ; preds = %51
  tail call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1446, ptr noundef nonnull @.str.28) #18
  %56 = load i32, ptr %8, align 8
  br label %57

57:                                               ; preds = %55, %53, %51
  %58 = phi i32 [ %46, %53 ], [ %56, %55 ], [ %46, %51 ]
  %59 = phi i32 [ %54, %53 ], [ 0, %55 ], [ 59, %51 ]
  %60 = zext i32 %59 to i64
  %61 = getelementptr inbounds [0 x i8], ptr @gimple_rhs_class_table, i64 0, i64 %60
  %62 = load i8, ptr %61, align 1, !tbaa !16
  %63 = icmp eq i8 %62, 3
  br i1 %63, label %64, label %85

64:                                               ; preds = %57
  %65 = and i32 %58, 255
  %66 = add nsw i32 %65, -1
  %67 = icmp ult i32 %66, 9
  tail call void @llvm.assume(i1 %67)
  %68 = zext i32 %65 to i64
  %69 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %68
  %70 = load i32, ptr %69, align 4, !tbaa !16
  %71 = zext i32 %70 to i64
  %72 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %71
  %73 = load i64, ptr %72, align 8, !tbaa !36
  %74 = icmp eq i64 %73, 0
  br i1 %74, label %75, label %77

75:                                               ; preds = %64
  tail call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1622, ptr noundef nonnull @.str.28) #18
  %76 = load i32, ptr %8, align 8
  br label %77

77:                                               ; preds = %75, %64
  %78 = phi i32 [ %76, %75 ], [ %58, %64 ]
  %79 = getelementptr inbounds i8, ptr %8, i64 %73
  %80 = getelementptr inbounds ptr, ptr %79, i64 1
  %81 = load ptr, ptr %80, align 8, !tbaa !5
  %82 = load i64, ptr %81, align 8
  %83 = trunc i64 %82 to i32
  %84 = and i32 %83, 65535
  br label %85

85:                                               ; preds = %77, %57
  %86 = phi i32 [ %78, %77 ], [ %58, %57 ]
  %87 = phi i32 [ %84, %77 ], [ %59, %57 ]
  %88 = and i32 %86, 255
  %89 = add nsw i32 %88, -10
  %90 = icmp ult i32 %89, -9
  br i1 %90, label %104, label %91

91:                                               ; preds = %85
  %92 = zext i32 %88 to i64
  %93 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %92
  %94 = load i32, ptr %93, align 4, !tbaa !16
  %95 = zext i32 %94 to i64
  %96 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %95
  %97 = load i64, ptr %96, align 8, !tbaa !36
  %98 = icmp eq i64 %97, 0
  br i1 %98, label %99, label %100

99:                                               ; preds = %91
  tail call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1622, ptr noundef nonnull @.str.28) #18
  br label %100

100:                                              ; preds = %99, %91
  %101 = getelementptr inbounds i8, ptr %8, i64 %97
  %102 = getelementptr inbounds ptr, ptr %101, i64 1
  %103 = load ptr, ptr %102, align 8, !tbaa !5
  br label %104

104:                                              ; preds = %100, %85
  %105 = phi ptr [ %103, %100 ], [ null, %85 ]
  %106 = getelementptr i8, ptr %8, i64 12
  %107 = load i32, ptr %106, align 4, !tbaa !16
  %108 = icmp ugt i32 %107, 2
  br i1 %108, label %109, label %167

109:                                              ; preds = %104
  %110 = load i32, ptr %8, align 8
  %111 = and i32 %110, 255
  %112 = add nsw i32 %111, -10
  %113 = icmp ult i32 %112, -9
  br i1 %113, label %167, label %114

114:                                              ; preds = %109
  %115 = zext i32 %111 to i64
  %116 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %115
  %117 = load i32, ptr %116, align 4, !tbaa !16
  %118 = zext i32 %117 to i64
  %119 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %118
  %120 = load i64, ptr %119, align 8, !tbaa !36
  %121 = icmp eq i64 %120, 0
  br i1 %121, label %122, label %123

122:                                              ; preds = %114
  tail call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1622, ptr noundef nonnull @.str.28) #18
  br label %123

123:                                              ; preds = %122, %114
  %124 = getelementptr inbounds i8, ptr %8, i64 %120
  %125 = getelementptr inbounds ptr, ptr %124, i64 2
  %126 = load ptr, ptr %125, align 8, !tbaa !5
  br label %167

127:                                              ; preds = %45, %1
  %128 = phi i32 [ %46, %45 ], [ %9, %1 ]
  %129 = and i32 %128, 255
  %130 = icmp eq i32 %129, 1
  br i1 %130, label %131, label %304

131:                                              ; preds = %127
  %132 = lshr i32 %128, 16
  %133 = load i32, ptr getelementptr inbounds ([0 x i32], ptr @gss_for_code_, i64 0, i64 1), align 4, !tbaa !16
  %134 = zext i32 %133 to i64
  %135 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %134
  %136 = load i64, ptr %135, align 8, !tbaa !36
  %137 = icmp eq i64 %136, 0
  br i1 %137, label %141, label %138

138:                                              ; preds = %131
  %139 = getelementptr inbounds i8, ptr %8, i64 %136
  %140 = load ptr, ptr %139, align 8, !tbaa !5
  br label %156

141:                                              ; preds = %131
  tail call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1622, ptr noundef nonnull @.str.28) #18
  %142 = load i32, ptr %8, align 8
  %143 = and i32 %142, 255
  %144 = load ptr, ptr %8, align 8, !tbaa !5
  %145 = add nsw i32 %143, -10
  %146 = icmp ult i32 %145, -9
  br i1 %146, label %162, label %147

147:                                              ; preds = %141
  %148 = zext i32 %143 to i64
  %149 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %148
  %150 = load i32, ptr %149, align 4, !tbaa !16
  %151 = zext i32 %150 to i64
  %152 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %151
  %153 = load i64, ptr %152, align 8, !tbaa !36
  %154 = icmp eq i64 %153, 0
  br i1 %154, label %155, label %156

155:                                              ; preds = %147
  tail call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1622, ptr noundef nonnull @.str.28) #18
  br label %156

156:                                              ; preds = %138, %155, %147
  %157 = phi ptr [ %140, %138 ], [ %144, %155 ], [ %144, %147 ]
  %158 = phi i64 [ %136, %138 ], [ 0, %155 ], [ %153, %147 ]
  %159 = getelementptr inbounds i8, ptr %8, i64 %158
  %160 = getelementptr inbounds ptr, ptr %159, i64 1
  %161 = load ptr, ptr %160, align 8, !tbaa !5
  br label %162

162:                                              ; preds = %156, %141
  %163 = phi ptr [ %157, %156 ], [ %144, %141 ]
  %164 = phi ptr [ %161, %156 ], [ null, %141 ]
  %165 = tail call fastcc ptr @vrp_evaluate_conditional(i32 noundef %132, ptr noundef %163, ptr noundef %164, ptr noundef nonnull %8)
  %166 = icmp eq ptr %165, null
  br i1 %166, label %304, label %174

167:                                              ; preds = %123, %109, %104
  %168 = phi ptr [ null, %104 ], [ %126, %123 ], [ null, %109 ]
  %169 = tail call fastcc ptr @vrp_evaluate_conditional(i32 noundef %87, ptr noundef %105, ptr noundef %168, ptr noundef nonnull %8)
  %170 = icmp eq ptr %169, null
  br i1 %170, label %304, label %171

171:                                              ; preds = %167
  %172 = tail call fastcc ptr @gimple_expr_type(ptr noundef nonnull %8)
  %173 = tail call ptr @fold_convert_loc(i32 noundef 0, ptr noundef %172, ptr noundef nonnull %169) #18
  br label %174

174:                                              ; preds = %171, %162
  %175 = phi ptr [ %173, %171 ], [ %165, %162 ]
  %176 = load ptr, ptr @dump_file, align 8, !tbaa !5
  %177 = icmp eq ptr %176, null
  br i1 %177, label %186, label %178

178:                                              ; preds = %174
  %179 = tail call i64 @fwrite(ptr nonnull @.str.54, i64 18, i64 1, ptr nonnull %176)
  %180 = load ptr, ptr @dump_file, align 8, !tbaa !5
  tail call void @print_gimple_expr(ptr noundef %180, ptr noundef nonnull %8, i32 noundef 0, i32 noundef 0) #18
  %181 = load ptr, ptr @dump_file, align 8, !tbaa !5
  %182 = tail call i64 @fwrite(ptr nonnull @.str.55, i64 4, i64 1, ptr %181)
  %183 = load ptr, ptr @dump_file, align 8, !tbaa !5
  tail call void @print_generic_expr(ptr noundef %183, ptr noundef %175, i32 noundef 0) #18
  %184 = load ptr, ptr @dump_file, align 8, !tbaa !5
  %185 = tail call i32 @fputc(i32 10, ptr %184)
  br label %186

186:                                              ; preds = %178, %174
  %187 = load i32, ptr %8, align 8
  %188 = trunc i32 %187 to i8
  switch i8 %188, label %190 [
    i8 6, label %189
    i8 1, label %191
  ]

189:                                              ; preds = %186
  tail call void @gimple_assign_set_rhs_from_tree(ptr noundef nonnull %0, ptr noundef %175) #18
  br label %1603

190:                                              ; preds = %186
  tail call void @fancy_abort(ptr noundef nonnull @.str.27, i32 noundef 7056, ptr noundef nonnull @.str.28) #18
  br label %191

191:                                              ; preds = %190, %186
  %192 = tail call i32 @integer_zerop(ptr noundef %175) #18
  %193 = icmp eq i32 %192, 0
  br i1 %193, label %247, label %194

194:                                              ; preds = %191
  %195 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 26), align 16, !tbaa !5
  %196 = load i32, ptr %8, align 8
  %197 = and i32 %196, 255
  %198 = add nsw i32 %197, -10
  %199 = icmp ult i32 %198, -9
  br i1 %199, label %204, label %200

200:                                              ; preds = %194
  %201 = getelementptr i8, ptr %8, i64 12
  %202 = load i32, ptr %201, align 4, !tbaa !16
  %203 = icmp eq i32 %202, 0
  br i1 %203, label %204, label %207

204:                                              ; preds = %200, %194
  tail call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1665, ptr noundef nonnull @.str.28) #18
  %205 = load i32, ptr %8, align 8
  %206 = and i32 %205, 255
  br label %207

207:                                              ; preds = %204, %200
  %208 = phi i32 [ %197, %200 ], [ %206, %204 ]
  %209 = zext i32 %208 to i64
  %210 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %209
  %211 = load i32, ptr %210, align 4, !tbaa !16
  %212 = zext i32 %211 to i64
  %213 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %212
  %214 = load i64, ptr %213, align 8, !tbaa !36
  %215 = icmp eq i64 %214, 0
  br i1 %215, label %216, label %217

216:                                              ; preds = %207
  tail call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1622, ptr noundef nonnull @.str.28) #18
  br label %217

217:                                              ; preds = %216, %207
  %218 = getelementptr inbounds i8, ptr %8, i64 %214
  store ptr %195, ptr %218, align 8, !tbaa !5
  %219 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 25), align 8, !tbaa !5
  %220 = load i32, ptr %8, align 8
  %221 = and i32 %220, 255
  %222 = add nsw i32 %221, -10
  %223 = icmp ult i32 %222, -9
  br i1 %223, label %228, label %224

224:                                              ; preds = %217
  %225 = getelementptr i8, ptr %8, i64 12
  %226 = load i32, ptr %225, align 4, !tbaa !16
  %227 = icmp ugt i32 %226, 1
  br i1 %227, label %231, label %228

228:                                              ; preds = %224, %217
  tail call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1665, ptr noundef nonnull @.str.28) #18
  %229 = load i32, ptr %8, align 8
  %230 = and i32 %229, 255
  br label %231

231:                                              ; preds = %228, %224
  %232 = phi i32 [ %221, %224 ], [ %230, %228 ]
  %233 = zext i32 %232 to i64
  %234 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %233
  %235 = load i32, ptr %234, align 4, !tbaa !16
  %236 = zext i32 %235 to i64
  %237 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %236
  %238 = load i64, ptr %237, align 8, !tbaa !36
  %239 = icmp eq i64 %238, 0
  br i1 %239, label %240, label %241

240:                                              ; preds = %231
  tail call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1622, ptr noundef nonnull @.str.28) #18
  br label %241

241:                                              ; preds = %240, %231
  %242 = getelementptr inbounds i8, ptr %8, i64 %238
  %243 = getelementptr inbounds ptr, ptr %242, i64 1
  store ptr %219, ptr %243, align 8, !tbaa !5
  %244 = load i32, ptr %8, align 8
  %245 = and i32 %244, 65535
  %246 = or i32 %245, 6619136
  store i32 %246, ptr %8, align 8
  br label %1603

247:                                              ; preds = %191
  %248 = tail call i32 @integer_onep(ptr noundef %175) #18
  %249 = icmp eq i32 %248, 0
  br i1 %249, label %303, label %250

250:                                              ; preds = %247
  %251 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 26), align 16, !tbaa !5
  %252 = load i32, ptr %8, align 8
  %253 = and i32 %252, 255
  %254 = add nsw i32 %253, -10
  %255 = icmp ult i32 %254, -9
  br i1 %255, label %260, label %256

256:                                              ; preds = %250
  %257 = getelementptr i8, ptr %8, i64 12
  %258 = load i32, ptr %257, align 4, !tbaa !16
  %259 = icmp eq i32 %258, 0
  br i1 %259, label %260, label %263

260:                                              ; preds = %256, %250
  tail call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1665, ptr noundef nonnull @.str.28) #18
  %261 = load i32, ptr %8, align 8
  %262 = and i32 %261, 255
  br label %263

263:                                              ; preds = %260, %256
  %264 = phi i32 [ %253, %256 ], [ %262, %260 ]
  %265 = zext i32 %264 to i64
  %266 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %265
  %267 = load i32, ptr %266, align 4, !tbaa !16
  %268 = zext i32 %267 to i64
  %269 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %268
  %270 = load i64, ptr %269, align 8, !tbaa !36
  %271 = icmp eq i64 %270, 0
  br i1 %271, label %272, label %273

272:                                              ; preds = %263
  tail call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1622, ptr noundef nonnull @.str.28) #18
  br label %273

273:                                              ; preds = %272, %263
  %274 = getelementptr inbounds i8, ptr %8, i64 %270
  store ptr %251, ptr %274, align 8, !tbaa !5
  %275 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 26), align 16, !tbaa !5
  %276 = load i32, ptr %8, align 8
  %277 = and i32 %276, 255
  %278 = add nsw i32 %277, -10
  %279 = icmp ult i32 %278, -9
  br i1 %279, label %284, label %280

280:                                              ; preds = %273
  %281 = getelementptr i8, ptr %8, i64 12
  %282 = load i32, ptr %281, align 4, !tbaa !16
  %283 = icmp ugt i32 %282, 1
  br i1 %283, label %287, label %284

284:                                              ; preds = %280, %273
  tail call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1665, ptr noundef nonnull @.str.28) #18
  %285 = load i32, ptr %8, align 8
  %286 = and i32 %285, 255
  br label %287

287:                                              ; preds = %284, %280
  %288 = phi i32 [ %277, %280 ], [ %286, %284 ]
  %289 = zext i32 %288 to i64
  %290 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %289
  %291 = load i32, ptr %290, align 4, !tbaa !16
  %292 = zext i32 %291 to i64
  %293 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %292
  %294 = load i64, ptr %293, align 8, !tbaa !36
  %295 = icmp eq i64 %294, 0
  br i1 %295, label %296, label %297

296:                                              ; preds = %287
  tail call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1622, ptr noundef nonnull @.str.28) #18
  br label %297

297:                                              ; preds = %296, %287
  %298 = getelementptr inbounds i8, ptr %8, i64 %294
  %299 = getelementptr inbounds ptr, ptr %298, i64 1
  store ptr %275, ptr %299, align 8, !tbaa !5
  %300 = load i32, ptr %8, align 8
  %301 = and i32 %300, 65535
  %302 = or i32 %301, 6619136
  store i32 %302, ptr %8, align 8
  br label %1603

303:                                              ; preds = %247
  tail call void @fancy_abort(ptr noundef nonnull @.str.27, i32 noundef 7062, ptr noundef nonnull @.str.28) #18
  br label %1603

304:                                              ; preds = %167, %162, %127
  %305 = load ptr, ptr %0, align 8, !tbaa !49
  %306 = load ptr, ptr %305, align 8, !tbaa !51
  %307 = load i32, ptr %306, align 8
  %308 = and i32 %307, 255
  %309 = icmp eq i32 %308, 6
  %310 = trunc i32 %307 to i8
  br i1 %309, label %311, label %1177

311:                                              ; preds = %304
  switch i8 %310, label %314 [
    i8 6, label %312
    i8 1, label %312
    i8 8, label %315
  ]

312:                                              ; preds = %311, %311
  %313 = lshr i32 %307, 16
  br label %315

314:                                              ; preds = %311
  tail call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1446, ptr noundef nonnull @.str.28) #18
  br label %315

315:                                              ; preds = %314, %312, %311
  %316 = phi i32 [ %313, %312 ], [ 0, %314 ], [ 59, %311 ]
  %317 = zext i32 %316 to i64
  %318 = getelementptr inbounds [0 x i8], ptr @gimple_rhs_class_table, i64 0, i64 %317
  %319 = load i8, ptr %318, align 1, !tbaa !16
  %320 = icmp eq i8 %319, 3
  br i1 %320, label %321, label %341

321:                                              ; preds = %315
  %322 = load i32, ptr %306, align 8
  %323 = and i32 %322, 255
  %324 = add nsw i32 %323, -1
  %325 = icmp ult i32 %324, 9
  tail call void @llvm.assume(i1 %325)
  %326 = zext i32 %323 to i64
  %327 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %326
  %328 = load i32, ptr %327, align 4, !tbaa !16
  %329 = zext i32 %328 to i64
  %330 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %329
  %331 = load i64, ptr %330, align 8, !tbaa !36
  %332 = icmp eq i64 %331, 0
  br i1 %332, label %333, label %334

333:                                              ; preds = %321
  tail call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1622, ptr noundef nonnull @.str.28) #18
  br label %334

334:                                              ; preds = %333, %321
  %335 = getelementptr inbounds i8, ptr %306, i64 %331
  %336 = getelementptr inbounds ptr, ptr %335, i64 1
  %337 = load ptr, ptr %336, align 8, !tbaa !5
  %338 = load i64, ptr %337, align 8
  %339 = trunc i64 %338 to i32
  %340 = and i32 %339, 65535
  br label %341

341:                                              ; preds = %334, %315
  %342 = phi i32 [ %340, %334 ], [ %316, %315 ]
  %343 = trunc i32 %342 to i16
  switch i16 %343, label %1603 [
    i16 101, label %344
    i16 102, label %344
    i16 96, label %344
    i16 93, label %344
    i16 94, label %344
    i16 95, label %344
    i16 67, label %643
    i16 71, label %643
    i16 82, label %984
  ]

344:                                              ; preds = %341, %341, %341, %341, %341, %341
  %345 = load i32, ptr %306, align 8
  %346 = and i32 %345, 255
  %347 = add nsw i32 %346, -1
  %348 = icmp ult i32 %347, 9
  tail call void @llvm.assume(i1 %348)
  %349 = zext i32 %346 to i64
  %350 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %349
  %351 = load i32, ptr %350, align 4, !tbaa !16
  %352 = zext i32 %351 to i64
  %353 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %352
  %354 = load i64, ptr %353, align 8, !tbaa !36
  %355 = icmp eq i64 %354, 0
  br i1 %355, label %356, label %358

356:                                              ; preds = %344
  tail call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1622, ptr noundef nonnull @.str.28) #18
  %357 = load i32, ptr %306, align 8
  br label %358

358:                                              ; preds = %356, %344
  %359 = phi i32 [ %357, %356 ], [ %345, %344 ]
  %360 = getelementptr inbounds i8, ptr %306, i64 %354
  %361 = getelementptr inbounds ptr, ptr %360, i64 1
  %362 = load ptr, ptr %361, align 8, !tbaa !5
  %363 = getelementptr inbounds %struct.tree_common, ptr %362, i64 0, i32 2
  %364 = load ptr, ptr %363, align 8, !tbaa !16
  %365 = load i64, ptr %364, align 8
  %366 = and i64 %365, 65535
  %367 = icmp eq i64 %366, 6
  br i1 %367, label %414, label %368

368:                                              ; preds = %358
  %369 = and i32 %359, 255
  %370 = add nsw i32 %369, -1
  %371 = icmp ult i32 %370, 9
  tail call void @llvm.assume(i1 %371)
  %372 = zext i32 %369 to i64
  %373 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %372
  %374 = load i32, ptr %373, align 4, !tbaa !16
  %375 = zext i32 %374 to i64
  %376 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %375
  %377 = load i64, ptr %376, align 8, !tbaa !36
  %378 = icmp eq i64 %377, 0
  br i1 %378, label %379, label %381

379:                                              ; preds = %368
  tail call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1622, ptr noundef nonnull @.str.28) #18
  %380 = load i32, ptr %306, align 8
  br label %381

381:                                              ; preds = %379, %368
  %382 = phi i32 [ %380, %379 ], [ %359, %368 ]
  %383 = getelementptr inbounds i8, ptr %306, i64 %377
  %384 = getelementptr inbounds ptr, ptr %383, i64 1
  %385 = load ptr, ptr %384, align 8, !tbaa !5
  %386 = getelementptr inbounds %struct.tree_common, ptr %385, i64 0, i32 2
  %387 = load ptr, ptr %386, align 8, !tbaa !16
  %388 = load i64, ptr %387, align 8
  %389 = and i64 %388, 65535
  %390 = icmp eq i64 %389, 7
  br i1 %390, label %414, label %391

391:                                              ; preds = %381
  %392 = and i32 %382, 255
  %393 = add nsw i32 %392, -1
  %394 = icmp ult i32 %393, 9
  tail call void @llvm.assume(i1 %394)
  %395 = zext i32 %392 to i64
  %396 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %395
  %397 = load i32, ptr %396, align 4, !tbaa !16
  %398 = zext i32 %397 to i64
  %399 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %398
  %400 = load i64, ptr %399, align 8, !tbaa !36
  %401 = icmp eq i64 %400, 0
  br i1 %401, label %402, label %403

402:                                              ; preds = %391
  tail call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1622, ptr noundef nonnull @.str.28) #18
  br label %403

403:                                              ; preds = %402, %391
  %404 = getelementptr inbounds i8, ptr %306, i64 %400
  %405 = getelementptr inbounds ptr, ptr %404, i64 1
  %406 = load ptr, ptr %405, align 8, !tbaa !5
  %407 = getelementptr inbounds %struct.tree_common, ptr %406, i64 0, i32 2
  %408 = load ptr, ptr %407, align 8, !tbaa !16
  %409 = load i64, ptr %408, align 8
  %410 = and i64 %409, 65535
  %411 = icmp eq i64 %410, 8
  br i1 %411, label %412, label %1603

412:                                              ; preds = %403
  %413 = load i32, ptr %306, align 8
  br label %414

414:                                              ; preds = %412, %381, %358
  %415 = phi i32 [ %413, %412 ], [ %382, %381 ], [ %359, %358 ]
  %416 = trunc i32 %415 to i8
  switch i8 %416, label %419 [
    i8 6, label %417
    i8 1, label %417
    i8 8, label %421
  ]

417:                                              ; preds = %414, %414
  %418 = lshr i32 %415, 16
  br label %421

419:                                              ; preds = %414
  tail call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1446, ptr noundef nonnull @.str.28) #18
  %420 = load i32, ptr %306, align 8
  br label %421

421:                                              ; preds = %419, %417, %414
  %422 = phi i32 [ %415, %417 ], [ %420, %419 ], [ %415, %414 ]
  %423 = phi i32 [ %418, %417 ], [ 0, %419 ], [ 59, %414 ]
  %424 = zext i32 %423 to i64
  %425 = getelementptr inbounds [0 x i8], ptr @gimple_rhs_class_table, i64 0, i64 %424
  %426 = load i8, ptr %425, align 1, !tbaa !16
  %427 = icmp eq i8 %426, 3
  br i1 %427, label %428, label %449

428:                                              ; preds = %421
  %429 = and i32 %422, 255
  %430 = add nsw i32 %429, -1
  %431 = icmp ult i32 %430, 9
  tail call void @llvm.assume(i1 %431)
  %432 = zext i32 %429 to i64
  %433 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %432
  %434 = load i32, ptr %433, align 4, !tbaa !16
  %435 = zext i32 %434 to i64
  %436 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %435
  %437 = load i64, ptr %436, align 8, !tbaa !36
  %438 = icmp eq i64 %437, 0
  br i1 %438, label %439, label %441

439:                                              ; preds = %428
  tail call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1622, ptr noundef nonnull @.str.28) #18
  %440 = load i32, ptr %306, align 8
  br label %441

441:                                              ; preds = %439, %428
  %442 = phi i32 [ %440, %439 ], [ %422, %428 ]
  %443 = getelementptr inbounds i8, ptr %306, i64 %437
  %444 = getelementptr inbounds ptr, ptr %443, i64 1
  %445 = load ptr, ptr %444, align 8, !tbaa !5
  %446 = load i64, ptr %445, align 8
  %447 = trunc i64 %446 to i32
  %448 = and i32 %447, 65535
  br label %449

449:                                              ; preds = %441, %421
  %450 = phi i32 [ %442, %441 ], [ %422, %421 ]
  %451 = phi i32 [ %448, %441 ], [ %423, %421 ]
  call void @llvm.lifetime.start.p0(i64 1, ptr nonnull %6) #18
  store i8 0, ptr %6, align 1, !tbaa !16
  %452 = and i32 %450, 255
  %453 = add nsw i32 %452, -10
  %454 = icmp ult i32 %453, -9
  br i1 %454, label %468, label %455

455:                                              ; preds = %449
  %456 = zext i32 %452 to i64
  %457 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %456
  %458 = load i32, ptr %457, align 4, !tbaa !16
  %459 = zext i32 %458 to i64
  %460 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %459
  %461 = load i64, ptr %460, align 8, !tbaa !36
  %462 = icmp eq i64 %461, 0
  br i1 %462, label %463, label %464

463:                                              ; preds = %455
  tail call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1622, ptr noundef nonnull @.str.28) #18
  br label %464

464:                                              ; preds = %463, %455
  %465 = getelementptr inbounds i8, ptr %306, i64 %461
  %466 = getelementptr inbounds ptr, ptr %465, i64 1
  %467 = load ptr, ptr %466, align 8, !tbaa !5
  br label %468

468:                                              ; preds = %464, %449
  %469 = phi ptr [ %467, %464 ], [ null, %449 ]
  %470 = getelementptr inbounds %struct.tree_common, ptr %469, i64 0, i32 2
  %471 = load ptr, ptr %470, align 8, !tbaa !16
  %472 = getelementptr inbounds %struct.tree_type, ptr %471, i64 0, i32 6
  %473 = load i32, ptr %472, align 4
  %474 = and i32 %473, 1023
  %475 = icmp eq i32 %474, 1
  br i1 %475, label %495, label %476

476:                                              ; preds = %468
  %477 = load i64, ptr %469, align 8
  %478 = and i64 %477, 65535
  %479 = icmp eq i64 %478, 141
  br i1 %479, label %480, label %641

480:                                              ; preds = %476
  %481 = tail call fastcc ptr @get_value_range(ptr noundef nonnull %469)
  %482 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 13), align 8, !tbaa !5
  %483 = call fastcc ptr @compare_range_with_value(i32 noundef 100, ptr noundef %481, ptr noundef %482, ptr noundef nonnull %6)
  %484 = icmp eq ptr %483, null
  br i1 %484, label %641, label %485

485:                                              ; preds = %480
  %486 = call i32 @integer_onep(ptr noundef nonnull %483) #18
  %487 = icmp eq i32 %486, 0
  br i1 %487, label %641, label %488

488:                                              ; preds = %485
  %489 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 14), align 16, !tbaa !5
  %490 = call fastcc ptr @compare_range_with_value(i32 noundef 98, ptr noundef %481, ptr noundef %489, ptr noundef nonnull %6)
  %491 = icmp eq ptr %490, null
  br i1 %491, label %641, label %492

492:                                              ; preds = %488
  %493 = call i32 @integer_onep(ptr noundef nonnull %490) #18
  %494 = icmp eq i32 %493, 0
  br i1 %494, label %641, label %495

495:                                              ; preds = %492, %468
  %496 = icmp eq i32 %451, 96
  br i1 %496, label %497, label %500

497:                                              ; preds = %495
  %498 = load ptr, ptr %470, align 8, !tbaa !16
  %499 = call ptr @build_int_cst(ptr noundef %498, i64 noundef 1) #18
  br label %566

500:                                              ; preds = %495
  %501 = getelementptr i8, ptr %306, i64 12
  %502 = load i32, ptr %501, align 4, !tbaa !16
  %503 = icmp ugt i32 %502, 2
  br i1 %503, label %504, label %522

504:                                              ; preds = %500
  %505 = load i32, ptr %306, align 8
  %506 = and i32 %505, 255
  %507 = add nsw i32 %506, -10
  %508 = icmp ult i32 %507, -9
  br i1 %508, label %522, label %509

509:                                              ; preds = %504
  %510 = zext i32 %506 to i64
  %511 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %510
  %512 = load i32, ptr %511, align 4, !tbaa !16
  %513 = zext i32 %512 to i64
  %514 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %513
  %515 = load i64, ptr %514, align 8, !tbaa !36
  %516 = icmp eq i64 %515, 0
  br i1 %516, label %517, label %518

517:                                              ; preds = %509
  call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1622, ptr noundef nonnull @.str.28) #18
  br label %518

518:                                              ; preds = %517, %509
  %519 = getelementptr inbounds i8, ptr %306, i64 %515
  %520 = getelementptr inbounds ptr, ptr %519, i64 2
  %521 = load ptr, ptr %520, align 8, !tbaa !5
  br label %522

522:                                              ; preds = %518, %504, %500
  %523 = phi ptr [ null, %500 ], [ %521, %518 ], [ null, %504 ]
  %524 = call zeroext i8 @is_gimple_min_invariant(ptr noundef %523) #18
  %525 = icmp eq i8 %524, 0
  br i1 %525, label %542, label %526

526:                                              ; preds = %522
  switch i32 %451, label %641 [
    i32 102, label %527
    i32 101, label %527
    i32 95, label %527
  ]

527:                                              ; preds = %526, %526, %526
  %528 = call i32 @integer_zerop(ptr noundef %523) #18
  %529 = icmp eq i32 %528, 0
  br i1 %529, label %530, label %536

530:                                              ; preds = %527
  %531 = call i32 @integer_onep(ptr noundef %523) #18
  %532 = icmp eq i32 %531, 0
  br i1 %532, label %533, label %536

533:                                              ; preds = %530
  %534 = call i32 @integer_all_onesp(ptr noundef %523) #18
  %535 = icmp eq i32 %534, 0
  br i1 %535, label %641, label %536

536:                                              ; preds = %533, %530, %527
  %537 = icmp eq i32 %451, 101
  br i1 %537, label %538, label %566

538:                                              ; preds = %536
  %539 = getelementptr inbounds %struct.tree_common, ptr %523, i64 0, i32 2
  %540 = load ptr, ptr %539, align 8, !tbaa !16
  %541 = call ptr @fold_unary_loc(i32 noundef 0, i32 noundef 96, ptr noundef %540, ptr noundef %523) #18
  br label %566

542:                                              ; preds = %522
  %543 = icmp eq i32 %451, 101
  br i1 %543, label %641, label %544

544:                                              ; preds = %542
  %545 = getelementptr inbounds %struct.tree_common, ptr %523, i64 0, i32 2
  %546 = load ptr, ptr %545, align 8, !tbaa !16
  %547 = getelementptr inbounds %struct.tree_type, ptr %546, i64 0, i32 6
  %548 = load i32, ptr %547, align 4
  %549 = and i32 %548, 1023
  %550 = icmp eq i32 %549, 1
  br i1 %550, label %566, label %551

551:                                              ; preds = %544
  %552 = call fastcc ptr @get_value_range(ptr noundef nonnull %523)
  %553 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 13), align 8, !tbaa !5
  %554 = call fastcc ptr @compare_range_with_value(i32 noundef 100, ptr noundef %552, ptr noundef %553, ptr noundef nonnull %6)
  %555 = icmp eq ptr %554, null
  br i1 %555, label %641, label %556

556:                                              ; preds = %551
  %557 = call i32 @integer_onep(ptr noundef nonnull %554) #18
  %558 = icmp eq i32 %557, 0
  br i1 %558, label %641, label %559

559:                                              ; preds = %556
  %560 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 14), align 16, !tbaa !5
  %561 = call fastcc ptr @compare_range_with_value(i32 noundef 98, ptr noundef %552, ptr noundef %560, ptr noundef nonnull %6)
  %562 = icmp eq ptr %561, null
  br i1 %562, label %641, label %563

563:                                              ; preds = %559
  %564 = call i32 @integer_onep(ptr noundef nonnull %561) #18
  %565 = icmp eq i32 %564, 0
  br i1 %565, label %641, label %566

566:                                              ; preds = %563, %544, %538, %536, %497
  %567 = phi i32 [ 102, %497 ], [ 102, %538 ], [ %451, %536 ], [ %451, %563 ], [ %451, %544 ]
  %568 = phi ptr [ %499, %497 ], [ %541, %538 ], [ %523, %536 ], [ %523, %563 ], [ %523, %544 ]
  %569 = load i8, ptr %6, align 1, !tbaa !16
  %570 = icmp ne i8 %569, 0
  %571 = load i32, ptr @warn_strict_overflow, align 4
  %572 = icmp sgt i32 %571, 3
  %573 = select i1 %570, i1 %572, i1 false
  br i1 %573, label %574, label %584

574:                                              ; preds = %566
  %575 = getelementptr i8, ptr %306, i64 8
  %576 = load i32, ptr %575, align 8, !tbaa !16
  %577 = icmp eq i32 %576, 0
  %578 = load i32, ptr @input_location, align 4
  %579 = select i1 %577, i32 %578, i32 %576
  %580 = add nsw i32 %567, -93
  %581 = icmp ult i32 %580, 2
  %582 = select i1 %581, ptr @.str.61, ptr @.str.62
  %583 = call zeroext i8 (i32, i32, ptr, ...) @warning_at(i32 noundef %579, i32 noundef 187, ptr noundef nonnull %582) #18
  br label %584

584:                                              ; preds = %574, %566
  %585 = load i32, ptr %306, align 8
  %586 = and i32 %585, 255
  %587 = add nsw i32 %586, -1
  %588 = icmp ult i32 %587, 9
  call void @llvm.assume(i1 %588)
  %589 = zext i32 %586 to i64
  %590 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %589
  %591 = load i32, ptr %590, align 4, !tbaa !16
  %592 = zext i32 %591 to i64
  %593 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %592
  %594 = load i64, ptr %593, align 8, !tbaa !36
  %595 = icmp eq i64 %594, 0
  br i1 %595, label %596, label %597

596:                                              ; preds = %584
  call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1622, ptr noundef nonnull @.str.28) #18
  br label %597

597:                                              ; preds = %596, %584
  %598 = getelementptr inbounds i8, ptr %306, i64 %594
  %599 = load ptr, ptr %598, align 8, !tbaa !5
  %600 = getelementptr inbounds %struct.tree_common, ptr %599, i64 0, i32 2
  %601 = load ptr, ptr %600, align 8, !tbaa !16
  %602 = load ptr, ptr %470, align 8, !tbaa !16
  %603 = call zeroext i8 @useless_type_conversion_p(ptr noundef %601, ptr noundef %602) #18
  %604 = icmp eq i8 %603, 0
  br i1 %604, label %605, label %615

605:                                              ; preds = %597
  %606 = load ptr, ptr %470, align 8, !tbaa !16
  %607 = load i64, ptr %606, align 8
  %608 = and i64 %607, 2097152
  %609 = icmp eq i64 %608, 0
  br i1 %609, label %610, label %615

610:                                              ; preds = %605
  %611 = getelementptr inbounds %struct.tree_type, ptr %606, i64 0, i32 6
  %612 = load i32, ptr %611, align 4
  %613 = and i32 %612, 1023
  %614 = icmp eq i32 %613, 1
  br i1 %614, label %641, label %615

615:                                              ; preds = %610, %605, %597
  %616 = trunc i32 %567 to i16
  switch i16 %616, label %629 [
    i16 93, label %630
    i16 94, label %617
    i16 95, label %618
    i16 102, label %618
  ]

617:                                              ; preds = %615
  br label %630

618:                                              ; preds = %615, %615
  %619 = call i32 @integer_zerop(ptr noundef %568) #18
  %620 = icmp eq i32 %619, 0
  br i1 %620, label %630, label %621

621:                                              ; preds = %618
  %622 = select i1 %604, i32 116, i32 141
  call void @gimple_assign_set_rhs_with_ops(ptr noundef nonnull %0, i32 noundef %622, ptr noundef nonnull %469, ptr noundef null) #18
  %623 = load ptr, ptr %0, align 8, !tbaa !49
  %624 = load ptr, ptr %623, align 8, !tbaa !51
  %625 = load i32, ptr %624, align 8
  %626 = and i32 %625, 255
  %627 = add nsw i32 %626, -10
  %628 = icmp ult i32 %627, -9
  br i1 %628, label %641, label %639

629:                                              ; preds = %615
  call void @fancy_abort(ptr noundef nonnull @.str.27, i32 noundef 6568, ptr noundef nonnull @.str.28) #18
  br label %630

630:                                              ; preds = %629, %618, %617, %615
  %631 = phi i32 [ %567, %629 ], [ 87, %617 ], [ 89, %615 ], [ 88, %618 ]
  br i1 %604, label %641, label %632

632:                                              ; preds = %630
  call void @gimple_assign_set_rhs_with_ops(ptr noundef nonnull %0, i32 noundef %631, ptr noundef nonnull %469, ptr noundef %568) #18
  %633 = load ptr, ptr %0, align 8, !tbaa !49
  %634 = load ptr, ptr %633, align 8, !tbaa !51
  %635 = load i32, ptr %634, align 8
  %636 = and i32 %635, 255
  %637 = add nsw i32 %636, -10
  %638 = icmp ult i32 %637, -9
  br i1 %638, label %641, label %639

639:                                              ; preds = %632, %621
  %640 = phi ptr [ %624, %621 ], [ %634, %632 ]
  call void @gimple_set_modified(ptr noundef nonnull %640, i8 noundef zeroext 1) #18
  call void @update_stmt_operands(ptr noundef nonnull %640) #18
  br label %641

641:                                              ; preds = %639, %632, %630, %621, %610, %563, %559, %556, %551, %542, %533, %526, %492, %488, %485, %480, %476
  %642 = phi i8 [ 0, %476 ], [ 0, %485 ], [ 0, %480 ], [ 0, %492 ], [ 0, %488 ], [ 0, %526 ], [ 0, %533 ], [ 0, %542 ], [ 0, %556 ], [ 0, %551 ], [ 0, %563 ], [ 0, %559 ], [ 0, %610 ], [ 0, %630 ], [ 1, %621 ], [ 1, %632 ], [ 1, %639 ]
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %6) #18
  br label %1603

643:                                              ; preds = %341, %341
  %644 = load i32, ptr %306, align 8
  %645 = and i32 %644, 255
  %646 = add nsw i32 %645, -1
  %647 = icmp ult i32 %646, 9
  tail call void @llvm.assume(i1 %647)
  %648 = zext i32 %645 to i64
  %649 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %648
  %650 = load i32, ptr %649, align 4, !tbaa !16
  %651 = zext i32 %650 to i64
  %652 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %651
  %653 = load i64, ptr %652, align 8, !tbaa !36
  %654 = icmp eq i64 %653, 0
  br i1 %654, label %655, label %656

655:                                              ; preds = %643
  tail call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1622, ptr noundef nonnull @.str.28) #18
  br label %656

656:                                              ; preds = %655, %643
  %657 = getelementptr inbounds i8, ptr %306, i64 %653
  %658 = getelementptr inbounds ptr, ptr %657, i64 1
  %659 = load ptr, ptr %658, align 8, !tbaa !5
  %660 = getelementptr inbounds %struct.tree_common, ptr %659, i64 0, i32 2
  %661 = load ptr, ptr %660, align 8, !tbaa !16
  %662 = load i64, ptr %661, align 8
  %663 = and i64 %662, 65535
  %664 = icmp eq i64 %663, 6
  br i1 %664, label %709, label %665

665:                                              ; preds = %656
  %666 = load i32, ptr %306, align 8
  %667 = and i32 %666, 255
  %668 = add nsw i32 %667, -1
  %669 = icmp ult i32 %668, 9
  tail call void @llvm.assume(i1 %669)
  %670 = zext i32 %667 to i64
  %671 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %670
  %672 = load i32, ptr %671, align 4, !tbaa !16
  %673 = zext i32 %672 to i64
  %674 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %673
  %675 = load i64, ptr %674, align 8, !tbaa !36
  %676 = icmp eq i64 %675, 0
  br i1 %676, label %677, label %678

677:                                              ; preds = %665
  tail call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1622, ptr noundef nonnull @.str.28) #18
  br label %678

678:                                              ; preds = %677, %665
  %679 = getelementptr inbounds i8, ptr %306, i64 %675
  %680 = getelementptr inbounds ptr, ptr %679, i64 1
  %681 = load ptr, ptr %680, align 8, !tbaa !5
  %682 = getelementptr inbounds %struct.tree_common, ptr %681, i64 0, i32 2
  %683 = load ptr, ptr %682, align 8, !tbaa !16
  %684 = load i64, ptr %683, align 8
  %685 = and i64 %684, 65535
  %686 = icmp eq i64 %685, 7
  br i1 %686, label %709, label %687

687:                                              ; preds = %678
  %688 = load i32, ptr %306, align 8
  %689 = and i32 %688, 255
  %690 = add nsw i32 %689, -1
  %691 = icmp ult i32 %690, 9
  tail call void @llvm.assume(i1 %691)
  %692 = zext i32 %689 to i64
  %693 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %692
  %694 = load i32, ptr %693, align 4, !tbaa !16
  %695 = zext i32 %694 to i64
  %696 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %695
  %697 = load i64, ptr %696, align 8, !tbaa !36
  %698 = icmp eq i64 %697, 0
  br i1 %698, label %699, label %700

699:                                              ; preds = %687
  tail call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1622, ptr noundef nonnull @.str.28) #18
  br label %700

700:                                              ; preds = %699, %687
  %701 = getelementptr inbounds i8, ptr %306, i64 %697
  %702 = getelementptr inbounds ptr, ptr %701, i64 1
  %703 = load ptr, ptr %702, align 8, !tbaa !5
  %704 = getelementptr inbounds %struct.tree_common, ptr %703, i64 0, i32 2
  %705 = load ptr, ptr %704, align 8, !tbaa !16
  %706 = load i64, ptr %705, align 8
  %707 = and i64 %706, 65535
  %708 = icmp eq i64 %707, 8
  br i1 %708, label %709, label %1603

709:                                              ; preds = %700, %678, %656
  %710 = getelementptr i8, ptr %306, i64 12
  %711 = load i32, ptr %710, align 4, !tbaa !16
  %712 = icmp ugt i32 %711, 2
  br i1 %712, label %713, label %731

713:                                              ; preds = %709
  %714 = load i32, ptr %306, align 8
  %715 = and i32 %714, 255
  %716 = add nsw i32 %715, -10
  %717 = icmp ult i32 %716, -9
  br i1 %717, label %731, label %718

718:                                              ; preds = %713
  %719 = zext i32 %715 to i64
  %720 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %719
  %721 = load i32, ptr %720, align 4, !tbaa !16
  %722 = zext i32 %721 to i64
  %723 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %722
  %724 = load i64, ptr %723, align 8, !tbaa !36
  %725 = icmp eq i64 %724, 0
  br i1 %725, label %726, label %727

726:                                              ; preds = %718
  tail call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1622, ptr noundef nonnull @.str.28) #18
  br label %727

727:                                              ; preds = %726, %718
  %728 = getelementptr inbounds i8, ptr %306, i64 %724
  %729 = getelementptr inbounds ptr, ptr %728, i64 2
  %730 = load ptr, ptr %729, align 8, !tbaa !5
  br label %731

731:                                              ; preds = %727, %713, %709
  %732 = phi ptr [ null, %709 ], [ %730, %727 ], [ null, %713 ]
  %733 = tail call i32 @integer_pow2p(ptr noundef %732) #18
  %734 = icmp eq i32 %733, 0
  br i1 %734, label %1603, label %735

735:                                              ; preds = %731
  %736 = load i32, ptr %306, align 8
  %737 = trunc i32 %736 to i8
  switch i8 %737, label %740 [
    i8 6, label %738
    i8 1, label %738
    i8 8, label %742
  ]

738:                                              ; preds = %735, %735
  %739 = lshr i32 %736, 16
  br label %742

740:                                              ; preds = %735
  tail call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1446, ptr noundef nonnull @.str.28) #18
  %741 = load i32, ptr %306, align 8
  br label %742

742:                                              ; preds = %740, %738, %735
  %743 = phi i32 [ %736, %738 ], [ %741, %740 ], [ %736, %735 ]
  %744 = phi i32 [ %739, %738 ], [ 0, %740 ], [ 59, %735 ]
  %745 = zext i32 %744 to i64
  %746 = getelementptr inbounds [0 x i8], ptr @gimple_rhs_class_table, i64 0, i64 %745
  %747 = load i8, ptr %746, align 1, !tbaa !16
  %748 = icmp eq i8 %747, 3
  br i1 %748, label %749, label %770

749:                                              ; preds = %742
  %750 = and i32 %743, 255
  %751 = add nsw i32 %750, -1
  %752 = icmp ult i32 %751, 9
  tail call void @llvm.assume(i1 %752)
  %753 = zext i32 %750 to i64
  %754 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %753
  %755 = load i32, ptr %754, align 4, !tbaa !16
  %756 = zext i32 %755 to i64
  %757 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %756
  %758 = load i64, ptr %757, align 8, !tbaa !36
  %759 = icmp eq i64 %758, 0
  br i1 %759, label %760, label %762

760:                                              ; preds = %749
  tail call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1622, ptr noundef nonnull @.str.28) #18
  %761 = load i32, ptr %306, align 8
  br label %762

762:                                              ; preds = %760, %749
  %763 = phi i32 [ %761, %760 ], [ %743, %749 ]
  %764 = getelementptr inbounds i8, ptr %306, i64 %758
  %765 = getelementptr inbounds ptr, ptr %764, i64 1
  %766 = load ptr, ptr %765, align 8, !tbaa !5
  %767 = load i64, ptr %766, align 8
  %768 = trunc i64 %767 to i32
  %769 = and i32 %768, 65535
  br label %770

770:                                              ; preds = %762, %742
  %771 = phi i32 [ %763, %762 ], [ %743, %742 ]
  %772 = phi i32 [ %769, %762 ], [ %744, %742 ]
  %773 = and i32 %771, 255
  %774 = add nsw i32 %773, -10
  %775 = icmp ult i32 %774, -9
  br i1 %775, label %791, label %776

776:                                              ; preds = %770
  %777 = zext i32 %773 to i64
  %778 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %777
  %779 = load i32, ptr %778, align 4, !tbaa !16
  %780 = zext i32 %779 to i64
  %781 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %780
  %782 = load i64, ptr %781, align 8, !tbaa !36
  %783 = icmp eq i64 %782, 0
  br i1 %783, label %784, label %786

784:                                              ; preds = %776
  tail call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1622, ptr noundef nonnull @.str.28) #18
  %785 = load i32, ptr %306, align 8
  br label %786

786:                                              ; preds = %784, %776
  %787 = phi i32 [ %785, %784 ], [ %771, %776 ]
  %788 = getelementptr inbounds i8, ptr %306, i64 %782
  %789 = getelementptr inbounds ptr, ptr %788, i64 1
  %790 = load ptr, ptr %789, align 8, !tbaa !5
  br label %791

791:                                              ; preds = %786, %770
  %792 = phi i32 [ %787, %786 ], [ %771, %770 ]
  %793 = phi ptr [ %790, %786 ], [ null, %770 ]
  %794 = load i32, ptr %710, align 4, !tbaa !16
  %795 = icmp ugt i32 %794, 2
  br i1 %795, label %796, label %815

796:                                              ; preds = %791
  %797 = and i32 %792, 255
  %798 = add nsw i32 %797, -10
  %799 = icmp ult i32 %798, -9
  br i1 %799, label %815, label %800

800:                                              ; preds = %796
  %801 = zext i32 %797 to i64
  %802 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %801
  %803 = load i32, ptr %802, align 4, !tbaa !16
  %804 = zext i32 %803 to i64
  %805 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %804
  %806 = load i64, ptr %805, align 8, !tbaa !36
  %807 = icmp eq i64 %806, 0
  br i1 %807, label %808, label %810

808:                                              ; preds = %800
  tail call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1622, ptr noundef nonnull @.str.28) #18
  %809 = load i32, ptr %306, align 8
  br label %810

810:                                              ; preds = %808, %800
  %811 = phi i32 [ %809, %808 ], [ %792, %800 ]
  %812 = getelementptr inbounds i8, ptr %306, i64 %806
  %813 = getelementptr inbounds ptr, ptr %812, i64 2
  %814 = load ptr, ptr %813, align 8, !tbaa !5
  br label %815

815:                                              ; preds = %810, %796, %791
  %816 = phi i32 [ %792, %791 ], [ %811, %810 ], [ %792, %796 ]
  %817 = phi ptr [ null, %791 ], [ %814, %810 ], [ null, %796 ]
  %818 = and i32 %816, 255
  %819 = add nsw i32 %818, -10
  %820 = icmp ult i32 %819, -9
  br i1 %820, label %834, label %821

821:                                              ; preds = %815
  %822 = zext i32 %818 to i64
  %823 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %822
  %824 = load i32, ptr %823, align 4, !tbaa !16
  %825 = zext i32 %824 to i64
  %826 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %825
  %827 = load i64, ptr %826, align 8, !tbaa !36
  %828 = icmp eq i64 %827, 0
  br i1 %828, label %829, label %830

829:                                              ; preds = %821
  tail call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1622, ptr noundef nonnull @.str.28) #18
  br label %830

830:                                              ; preds = %829, %821
  %831 = getelementptr inbounds i8, ptr %306, i64 %827
  %832 = getelementptr inbounds ptr, ptr %831, i64 1
  %833 = load ptr, ptr %832, align 8, !tbaa !5
  br label %834

834:                                              ; preds = %830, %815
  %835 = phi ptr [ %833, %830 ], [ null, %815 ]
  %836 = tail call fastcc ptr @get_value_range(ptr noundef %835)
  %837 = getelementptr inbounds %struct.tree_common, ptr %793, i64 0, i32 2
  %838 = load ptr, ptr %837, align 8, !tbaa !16
  %839 = load i64, ptr %838, align 8
  %840 = and i64 %839, 2097152
  %841 = icmp eq i64 %840, 0
  br i1 %841, label %844, label %842

842:                                              ; preds = %834
  %843 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 14), align 16, !tbaa !5
  br label %865

844:                                              ; preds = %834
  call void @llvm.lifetime.start.p0(i64 1, ptr nonnull %5) #18
  store i8 0, ptr %5, align 1, !tbaa !16
  %845 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 13), align 8, !tbaa !5
  %846 = call fastcc ptr @compare_range_with_value(i32 noundef 100, ptr noundef %836, ptr noundef %845, ptr noundef nonnull %5)
  %847 = icmp ne ptr %846, null
  %848 = load i8, ptr %5, align 1
  %849 = icmp ne i8 %848, 0
  %850 = select i1 %847, i1 %849, i1 false
  br i1 %850, label %851, label %864

851:                                              ; preds = %844
  %852 = call i32 @integer_onep(ptr noundef nonnull %846) #18
  %853 = icmp ne i32 %852, 0
  %854 = load i32, ptr @warn_strict_overflow, align 4
  %855 = icmp sgt i32 %854, 3
  %856 = select i1 %853, i1 %855, i1 false
  br i1 %856, label %857, label %864

857:                                              ; preds = %851
  %858 = getelementptr i8, ptr %306, i64 8
  %859 = load i32, ptr %858, align 8, !tbaa !16
  %860 = icmp eq i32 %859, 0
  %861 = load i32, ptr @input_location, align 4
  %862 = select i1 %860, i32 %861, i32 %859
  %863 = call zeroext i8 (i32, i32, ptr, ...) @warning_at(i32 noundef %862, i32 noundef 187, ptr noundef nonnull @.str.63) #18
  br label %864

864:                                              ; preds = %857, %851, %844
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %5) #18
  br label %865

865:                                              ; preds = %864, %842
  %866 = phi ptr [ %843, %842 ], [ %846, %864 ]
  %867 = icmp eq ptr %866, null
  br i1 %867, label %1603, label %868

868:                                              ; preds = %865
  %869 = call i32 @integer_onep(ptr noundef nonnull %866) #18
  %870 = icmp eq i32 %869, 0
  br i1 %870, label %1603, label %871

871:                                              ; preds = %868
  %872 = icmp eq i32 %772, 67
  br i1 %872, label %873, label %921

873:                                              ; preds = %871
  %874 = call i32 @tree_log2(ptr noundef %817) #18
  %875 = sext i32 %874 to i64
  %876 = call ptr @build_int_cst(ptr noundef null, i64 noundef %875) #18
  %877 = load i32, ptr %306, align 8
  %878 = and i32 %877, 65535
  %879 = or i32 %878, 5505024
  store i32 %879, ptr %306, align 8
  %880 = and i32 %877, 255
  %881 = add nsw i32 %880, -10
  %882 = icmp ult i32 %881, -9
  br i1 %882, label %886, label %883

883:                                              ; preds = %873
  %884 = load i32, ptr %710, align 4, !tbaa !16
  %885 = icmp ugt i32 %884, 1
  br i1 %885, label %889, label %886

886:                                              ; preds = %883, %873
  call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1665, ptr noundef nonnull @.str.28) #18
  %887 = load i32, ptr %306, align 8
  %888 = and i32 %887, 255
  br label %889

889:                                              ; preds = %886, %883
  %890 = phi i32 [ %880, %883 ], [ %888, %886 ]
  %891 = zext i32 %890 to i64
  %892 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %891
  %893 = load i32, ptr %892, align 4, !tbaa !16
  %894 = zext i32 %893 to i64
  %895 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %894
  %896 = load i64, ptr %895, align 8, !tbaa !36
  %897 = icmp eq i64 %896, 0
  br i1 %897, label %898, label %899

898:                                              ; preds = %889
  call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1622, ptr noundef nonnull @.str.28) #18
  br label %899

899:                                              ; preds = %898, %889
  %900 = getelementptr inbounds i8, ptr %306, i64 %896
  %901 = getelementptr inbounds ptr, ptr %900, i64 1
  store ptr %793, ptr %901, align 8, !tbaa !5
  %902 = load i32, ptr %306, align 8
  %903 = and i32 %902, 255
  %904 = add nsw i32 %903, -10
  %905 = icmp ult i32 %904, -9
  br i1 %905, label %909, label %906

906:                                              ; preds = %899
  %907 = load i32, ptr %710, align 4, !tbaa !16
  %908 = icmp ugt i32 %907, 2
  br i1 %908, label %912, label %909

909:                                              ; preds = %906, %899
  call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1665, ptr noundef nonnull @.str.28) #18
  %910 = load i32, ptr %306, align 8
  %911 = and i32 %910, 255
  br label %912

912:                                              ; preds = %909, %906
  %913 = phi i32 [ %903, %906 ], [ %911, %909 ]
  %914 = zext i32 %913 to i64
  %915 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %914
  %916 = load i32, ptr %915, align 4, !tbaa !16
  %917 = zext i32 %916 to i64
  %918 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %917
  %919 = load i64, ptr %918, align 8, !tbaa !36
  %920 = icmp eq i64 %919, 0
  br i1 %920, label %972, label %974

921:                                              ; preds = %871
  %922 = getelementptr inbounds %struct.tree_common, ptr %817, i64 0, i32 2
  %923 = load ptr, ptr %922, align 8, !tbaa !16
  %924 = call ptr @build_int_cst(ptr noundef %923, i64 noundef 1) #18
  %925 = call ptr @int_const_binop(i32 noundef 64, ptr noundef %817, ptr noundef %924, i32 noundef 0) #18
  %926 = load ptr, ptr %837, align 8, !tbaa !16
  %927 = call ptr @fold_convert_loc(i32 noundef 0, ptr noundef %926, ptr noundef %925) #18
  %928 = load i32, ptr %306, align 8
  %929 = and i32 %928, 65535
  %930 = or i32 %929, 5832704
  store i32 %930, ptr %306, align 8
  %931 = and i32 %928, 255
  %932 = add nsw i32 %931, -10
  %933 = icmp ult i32 %932, -9
  br i1 %933, label %937, label %934

934:                                              ; preds = %921
  %935 = load i32, ptr %710, align 4, !tbaa !16
  %936 = icmp ugt i32 %935, 1
  br i1 %936, label %940, label %937

937:                                              ; preds = %934, %921
  call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1665, ptr noundef nonnull @.str.28) #18
  %938 = load i32, ptr %306, align 8
  %939 = and i32 %938, 255
  br label %940

940:                                              ; preds = %937, %934
  %941 = phi i32 [ %931, %934 ], [ %939, %937 ]
  %942 = zext i32 %941 to i64
  %943 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %942
  %944 = load i32, ptr %943, align 4, !tbaa !16
  %945 = zext i32 %944 to i64
  %946 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %945
  %947 = load i64, ptr %946, align 8, !tbaa !36
  %948 = icmp eq i64 %947, 0
  br i1 %948, label %949, label %950

949:                                              ; preds = %940
  call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1622, ptr noundef nonnull @.str.28) #18
  br label %950

950:                                              ; preds = %949, %940
  %951 = getelementptr inbounds i8, ptr %306, i64 %947
  %952 = getelementptr inbounds ptr, ptr %951, i64 1
  store ptr %793, ptr %952, align 8, !tbaa !5
  %953 = load i32, ptr %306, align 8
  %954 = and i32 %953, 255
  %955 = add nsw i32 %954, -10
  %956 = icmp ult i32 %955, -9
  br i1 %956, label %960, label %957

957:                                              ; preds = %950
  %958 = load i32, ptr %710, align 4, !tbaa !16
  %959 = icmp ugt i32 %958, 2
  br i1 %959, label %963, label %960

960:                                              ; preds = %957, %950
  call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1665, ptr noundef nonnull @.str.28) #18
  %961 = load i32, ptr %306, align 8
  %962 = and i32 %961, 255
  br label %963

963:                                              ; preds = %960, %957
  %964 = phi i32 [ %954, %957 ], [ %962, %960 ]
  %965 = zext i32 %964 to i64
  %966 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %965
  %967 = load i32, ptr %966, align 4, !tbaa !16
  %968 = zext i32 %967 to i64
  %969 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %968
  %970 = load i64, ptr %969, align 8, !tbaa !36
  %971 = icmp eq i64 %970, 0
  br i1 %971, label %972, label %974

972:                                              ; preds = %963, %912
  %973 = phi ptr [ %876, %912 ], [ %927, %963 ]
  call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1622, ptr noundef nonnull @.str.28) #18
  br label %974

974:                                              ; preds = %972, %963, %912
  %975 = phi i64 [ %919, %912 ], [ %970, %963 ], [ 0, %972 ]
  %976 = phi ptr [ %876, %912 ], [ %927, %963 ], [ %973, %972 ]
  %977 = getelementptr inbounds i8, ptr %306, i64 %975
  %978 = getelementptr inbounds ptr, ptr %977, i64 2
  store ptr %976, ptr %978, align 8, !tbaa !5
  %979 = load i32, ptr %306, align 8
  %980 = and i32 %979, 255
  %981 = add nsw i32 %980, -10
  %982 = icmp ult i32 %981, -9
  br i1 %982, label %1603, label %983

983:                                              ; preds = %974
  call void @gimple_set_modified(ptr noundef nonnull %306, i8 noundef zeroext 1) #18
  call void @update_stmt_operands(ptr noundef nonnull %306) #18
  br label %1603

984:                                              ; preds = %341
  %985 = load i32, ptr %306, align 8
  %986 = and i32 %985, 255
  %987 = add nsw i32 %986, -1
  %988 = icmp ult i32 %987, 9
  tail call void @llvm.assume(i1 %988)
  %989 = zext i32 %986 to i64
  %990 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %989
  %991 = load i32, ptr %990, align 4, !tbaa !16
  %992 = zext i32 %991 to i64
  %993 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %992
  %994 = load i64, ptr %993, align 8, !tbaa !36
  %995 = icmp eq i64 %994, 0
  br i1 %995, label %996, label %997

996:                                              ; preds = %984
  tail call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1622, ptr noundef nonnull @.str.28) #18
  br label %997

997:                                              ; preds = %996, %984
  %998 = getelementptr inbounds i8, ptr %306, i64 %994
  %999 = getelementptr inbounds ptr, ptr %998, i64 1
  %1000 = load ptr, ptr %999, align 8, !tbaa !5
  %1001 = load i64, ptr %1000, align 8
  %1002 = and i64 %1001, 65535
  %1003 = icmp eq i64 %1002, 141
  br i1 %1003, label %1004, label %1603

1004:                                             ; preds = %997
  %1005 = load i32, ptr %306, align 8
  %1006 = and i32 %1005, 255
  %1007 = add nsw i32 %1006, -1
  %1008 = icmp ult i32 %1007, 9
  tail call void @llvm.assume(i1 %1008)
  %1009 = zext i32 %1006 to i64
  %1010 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %1009
  %1011 = load i32, ptr %1010, align 4, !tbaa !16
  %1012 = zext i32 %1011 to i64
  %1013 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %1012
  %1014 = load i64, ptr %1013, align 8, !tbaa !36
  %1015 = icmp eq i64 %1014, 0
  br i1 %1015, label %1016, label %1018

1016:                                             ; preds = %1004
  tail call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1622, ptr noundef nonnull @.str.28) #18
  %1017 = load i32, ptr %306, align 8
  br label %1018

1018:                                             ; preds = %1016, %1004
  %1019 = phi i32 [ %1017, %1016 ], [ %1005, %1004 ]
  %1020 = getelementptr inbounds i8, ptr %306, i64 %1014
  %1021 = getelementptr inbounds ptr, ptr %1020, i64 1
  %1022 = load ptr, ptr %1021, align 8, !tbaa !5
  %1023 = getelementptr inbounds %struct.tree_common, ptr %1022, i64 0, i32 2
  %1024 = load ptr, ptr %1023, align 8, !tbaa !16
  %1025 = load i64, ptr %1024, align 8
  %1026 = and i64 %1025, 65535
  %1027 = icmp eq i64 %1026, 6
  br i1 %1027, label %1074, label %1028

1028:                                             ; preds = %1018
  %1029 = and i32 %1019, 255
  %1030 = add nsw i32 %1029, -1
  %1031 = icmp ult i32 %1030, 9
  tail call void @llvm.assume(i1 %1031)
  %1032 = zext i32 %1029 to i64
  %1033 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %1032
  %1034 = load i32, ptr %1033, align 4, !tbaa !16
  %1035 = zext i32 %1034 to i64
  %1036 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %1035
  %1037 = load i64, ptr %1036, align 8, !tbaa !36
  %1038 = icmp eq i64 %1037, 0
  br i1 %1038, label %1039, label %1041

1039:                                             ; preds = %1028
  tail call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1622, ptr noundef nonnull @.str.28) #18
  %1040 = load i32, ptr %306, align 8
  br label %1041

1041:                                             ; preds = %1039, %1028
  %1042 = phi i32 [ %1040, %1039 ], [ %1019, %1028 ]
  %1043 = getelementptr inbounds i8, ptr %306, i64 %1037
  %1044 = getelementptr inbounds ptr, ptr %1043, i64 1
  %1045 = load ptr, ptr %1044, align 8, !tbaa !5
  %1046 = getelementptr inbounds %struct.tree_common, ptr %1045, i64 0, i32 2
  %1047 = load ptr, ptr %1046, align 8, !tbaa !16
  %1048 = load i64, ptr %1047, align 8
  %1049 = and i64 %1048, 65535
  %1050 = icmp eq i64 %1049, 7
  br i1 %1050, label %1074, label %1051

1051:                                             ; preds = %1041
  %1052 = and i32 %1042, 255
  %1053 = add nsw i32 %1052, -1
  %1054 = icmp ult i32 %1053, 9
  tail call void @llvm.assume(i1 %1054)
  %1055 = zext i32 %1052 to i64
  %1056 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %1055
  %1057 = load i32, ptr %1056, align 4, !tbaa !16
  %1058 = zext i32 %1057 to i64
  %1059 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %1058
  %1060 = load i64, ptr %1059, align 8, !tbaa !36
  %1061 = icmp eq i64 %1060, 0
  br i1 %1061, label %1062, label %1063

1062:                                             ; preds = %1051
  tail call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1622, ptr noundef nonnull @.str.28) #18
  br label %1063

1063:                                             ; preds = %1062, %1051
  %1064 = getelementptr inbounds i8, ptr %306, i64 %1060
  %1065 = getelementptr inbounds ptr, ptr %1064, i64 1
  %1066 = load ptr, ptr %1065, align 8, !tbaa !5
  %1067 = getelementptr inbounds %struct.tree_common, ptr %1066, i64 0, i32 2
  %1068 = load ptr, ptr %1067, align 8, !tbaa !16
  %1069 = load i64, ptr %1068, align 8
  %1070 = and i64 %1069, 65535
  %1071 = icmp eq i64 %1070, 8
  br i1 %1071, label %1072, label %1603

1072:                                             ; preds = %1063
  %1073 = load i32, ptr %306, align 8
  br label %1074

1074:                                             ; preds = %1072, %1041, %1018
  %1075 = phi i32 [ %1073, %1072 ], [ %1042, %1041 ], [ %1019, %1018 ]
  %1076 = and i32 %1075, 255
  %1077 = add nsw i32 %1076, -10
  %1078 = icmp ult i32 %1077, -9
  br i1 %1078, label %1092, label %1079

1079:                                             ; preds = %1074
  %1080 = zext i32 %1076 to i64
  %1081 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %1080
  %1082 = load i32, ptr %1081, align 4, !tbaa !16
  %1083 = zext i32 %1082 to i64
  %1084 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %1083
  %1085 = load i64, ptr %1084, align 8, !tbaa !36
  %1086 = icmp eq i64 %1085, 0
  br i1 %1086, label %1087, label %1088

1087:                                             ; preds = %1079
  tail call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1622, ptr noundef nonnull @.str.28) #18
  br label %1088

1088:                                             ; preds = %1087, %1079
  %1089 = getelementptr inbounds i8, ptr %306, i64 %1085
  %1090 = getelementptr inbounds ptr, ptr %1089, i64 1
  %1091 = load ptr, ptr %1090, align 8, !tbaa !5
  br label %1092

1092:                                             ; preds = %1088, %1074
  %1093 = phi ptr [ %1091, %1088 ], [ null, %1074 ]
  %1094 = getelementptr inbounds %struct.tree_common, ptr %1093, i64 0, i32 2
  %1095 = load ptr, ptr %1094, align 8, !tbaa !16
  %1096 = tail call fastcc ptr @get_value_range(ptr noundef %1093)
  %1097 = load i64, ptr %1095, align 8
  %1098 = and i64 %1097, 2097152
  %1099 = icmp ne i64 %1098, 0
  %1100 = icmp eq ptr %1096, null
  %1101 = select i1 %1099, i1 true, i1 %1100
  br i1 %1101, label %1603, label %1102

1102:                                             ; preds = %1092
  call void @llvm.lifetime.start.p0(i64 1, ptr nonnull %4) #18
  store i8 0, ptr %4, align 1, !tbaa !16
  %1103 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 13), align 8, !tbaa !5
  %1104 = call fastcc ptr @compare_range_with_value(i32 noundef 98, ptr noundef nonnull %1096, ptr noundef %1103, ptr noundef nonnull %4)
  %1105 = icmp eq ptr %1104, null
  br i1 %1105, label %1106, label %1120

1106:                                             ; preds = %1102
  store i8 0, ptr %4, align 1, !tbaa !16
  %1107 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 13), align 8, !tbaa !5
  %1108 = call fastcc ptr @compare_range_with_value(i32 noundef 100, ptr noundef nonnull %1096, ptr noundef %1107, ptr noundef nonnull %4)
  %1109 = icmp eq ptr %1108, null
  br i1 %1109, label %1176, label %1110

1110:                                             ; preds = %1106
  %1111 = call i32 @integer_zerop(ptr noundef nonnull %1108) #18
  %1112 = icmp eq i32 %1111, 0
  br i1 %1112, label %1113, label %1116

1113:                                             ; preds = %1110
  %1114 = call i32 @integer_onep(ptr noundef nonnull %1108) #18
  %1115 = icmp eq i32 %1114, 0
  br i1 %1115, label %1120, label %1116

1116:                                             ; preds = %1113, %1110
  %1117 = phi ptr [ getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 13), %1113 ], [ getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 14), %1110 ]
  %1118 = load ptr, ptr %1117, align 8
  %1119 = icmp eq ptr %1118, null
  br i1 %1119, label %1176, label %1120

1120:                                             ; preds = %1116, %1113, %1102
  %1121 = phi ptr [ %1118, %1116 ], [ %1104, %1102 ], [ %1108, %1113 ]
  %1122 = call i32 @integer_onep(ptr noundef nonnull %1121) #18
  %1123 = icmp eq i32 %1122, 0
  br i1 %1123, label %1124, label %1127

1124:                                             ; preds = %1120
  %1125 = call i32 @integer_zerop(ptr noundef nonnull %1121) #18
  %1126 = icmp eq i32 %1125, 0
  br i1 %1126, label %1176, label %1127

1127:                                             ; preds = %1124, %1120
  %1128 = load i8, ptr %4, align 1, !tbaa !16
  %1129 = icmp ne i8 %1128, 0
  %1130 = load i32, ptr @warn_strict_overflow, align 4
  %1131 = icmp sgt i32 %1130, 3
  %1132 = select i1 %1129, i1 %1131, i1 false
  br i1 %1132, label %1133, label %1140

1133:                                             ; preds = %1127
  %1134 = getelementptr i8, ptr %306, i64 8
  %1135 = load i32, ptr %1134, align 8, !tbaa !16
  %1136 = icmp eq i32 %1135, 0
  %1137 = load i32, ptr @input_location, align 4
  %1138 = select i1 %1136, i32 %1137, i32 %1135
  %1139 = call zeroext i8 (i32, i32, ptr, ...) @warning_at(i32 noundef %1138, i32 noundef 187, ptr noundef nonnull @.str.64) #18
  br label %1140

1140:                                             ; preds = %1133, %1127
  %1141 = load i32, ptr %306, align 8
  %1142 = and i32 %1141, 255
  %1143 = add nsw i32 %1142, -10
  %1144 = icmp ult i32 %1143, -9
  br i1 %1144, label %1149, label %1145

1145:                                             ; preds = %1140
  %1146 = getelementptr i8, ptr %306, i64 12
  %1147 = load i32, ptr %1146, align 4, !tbaa !16
  %1148 = icmp ugt i32 %1147, 1
  br i1 %1148, label %1152, label %1149

1149:                                             ; preds = %1145, %1140
  call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1665, ptr noundef nonnull @.str.28) #18
  %1150 = load i32, ptr %306, align 8
  %1151 = and i32 %1150, 255
  br label %1152

1152:                                             ; preds = %1149, %1145
  %1153 = phi i32 [ %1142, %1145 ], [ %1151, %1149 ]
  %1154 = zext i32 %1153 to i64
  %1155 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %1154
  %1156 = load i32, ptr %1155, align 4, !tbaa !16
  %1157 = zext i32 %1156 to i64
  %1158 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %1157
  %1159 = load i64, ptr %1158, align 8, !tbaa !36
  %1160 = icmp eq i64 %1159, 0
  br i1 %1160, label %1161, label %1162

1161:                                             ; preds = %1152
  call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1622, ptr noundef nonnull @.str.28) #18
  br label %1162

1162:                                             ; preds = %1161, %1152
  %1163 = getelementptr inbounds i8, ptr %306, i64 %1159
  %1164 = getelementptr inbounds ptr, ptr %1163, i64 1
  store ptr %1093, ptr %1164, align 8, !tbaa !5
  %1165 = call i32 @integer_onep(ptr noundef nonnull %1121) #18
  %1166 = icmp eq i32 %1165, 0
  %1167 = load i32, ptr %306, align 8
  %1168 = and i32 %1167, 65535
  %1169 = select i1 %1166, i32 9240576, i32 5177344
  %1170 = or i32 %1168, %1169
  store i32 %1170, ptr %306, align 8
  %1171 = and i32 %1167, 255
  %1172 = add nsw i32 %1171, -10
  %1173 = icmp ult i32 %1172, -9
  br i1 %1173, label %1175, label %1174

1174:                                             ; preds = %1162
  call void @gimple_set_modified(ptr noundef nonnull %306, i8 noundef zeroext 1) #18
  call void @update_stmt_operands(ptr noundef nonnull %306) #18
  br label %1175

1175:                                             ; preds = %1174, %1162
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %4) #18
  br label %1603

1176:                                             ; preds = %1124, %1116, %1106
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %4) #18
  br label %1603

1177:                                             ; preds = %304
  switch i8 %310, label %1603 [
    i8 1, label %1178
    i8 5, label %1382
  ]

1178:                                             ; preds = %1177
  %1179 = zext i32 %308 to i64
  %1180 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %1179
  %1181 = load i32, ptr %1180, align 4, !tbaa !16
  %1182 = zext i32 %1181 to i64
  %1183 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %1182
  %1184 = load i64, ptr %1183, align 8, !tbaa !36
  %1185 = icmp eq i64 %1184, 0
  br i1 %1185, label %1189, label %1186

1186:                                             ; preds = %1178
  %1187 = getelementptr inbounds i8, ptr %306, i64 %1184
  %1188 = load ptr, ptr %1187, align 8, !tbaa !5
  br label %1195

1189:                                             ; preds = %1178
  tail call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1622, ptr noundef nonnull @.str.28) #18
  %1190 = load i32, ptr %306, align 8
  %1191 = and i32 %1190, 255
  %1192 = add nsw i32 %1191, -10
  %1193 = load ptr, ptr %306, align 8, !tbaa !5
  %1194 = icmp ult i32 %1192, -9
  br i1 %1194, label %1213, label %1195

1195:                                             ; preds = %1189, %1186
  %1196 = phi ptr [ %1188, %1186 ], [ %1193, %1189 ]
  %1197 = phi i32 [ %307, %1186 ], [ %1190, %1189 ]
  %1198 = phi i32 [ 1, %1186 ], [ %1191, %1189 ]
  %1199 = zext i32 %1198 to i64
  %1200 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %1199
  %1201 = load i32, ptr %1200, align 4, !tbaa !16
  %1202 = zext i32 %1201 to i64
  %1203 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %1202
  %1204 = load i64, ptr %1203, align 8, !tbaa !36
  %1205 = icmp eq i64 %1204, 0
  br i1 %1205, label %1206, label %1208

1206:                                             ; preds = %1195
  tail call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1622, ptr noundef nonnull @.str.28) #18
  %1207 = load i32, ptr %306, align 8
  br label %1208

1208:                                             ; preds = %1206, %1195
  %1209 = phi i32 [ %1207, %1206 ], [ %1197, %1195 ]
  %1210 = getelementptr inbounds i8, ptr %306, i64 %1204
  %1211 = getelementptr inbounds ptr, ptr %1210, i64 1
  %1212 = load ptr, ptr %1211, align 8, !tbaa !5
  br label %1213

1213:                                             ; preds = %1208, %1189
  %1214 = phi ptr [ %1196, %1208 ], [ %1193, %1189 ]
  %1215 = phi i32 [ %1209, %1208 ], [ %1190, %1189 ]
  %1216 = phi ptr [ %1212, %1208 ], [ null, %1189 ]
  %1217 = lshr i32 %1215, 16
  %1218 = add nsw i32 %1217, -103
  %1219 = icmp ult i32 %1218, -2
  br i1 %1219, label %1220, label %1603

1220:                                             ; preds = %1213
  %1221 = load i64, ptr %1214, align 8
  %1222 = and i64 %1221, 65535
  %1223 = icmp eq i64 %1222, 141
  br i1 %1223, label %1224, label %1603

1224:                                             ; preds = %1220
  %1225 = getelementptr inbounds %struct.tree_common, ptr %1214, i64 0, i32 2
  %1226 = load ptr, ptr %1225, align 8, !tbaa !16
  %1227 = load i64, ptr %1226, align 8
  %1228 = trunc i64 %1227 to i32
  %1229 = and i32 %1228, 65535
  %1230 = add nsw i32 %1229, -6
  %1231 = icmp ult i32 %1230, 3
  br i1 %1231, label %1232, label %1603

1232:                                             ; preds = %1224
  %1233 = tail call zeroext i8 @is_gimple_min_invariant(ptr noundef %1216) #18
  %1234 = icmp eq i8 %1233, 0
  br i1 %1234, label %1603, label %1235

1235:                                             ; preds = %1232
  %1236 = tail call fastcc ptr @get_value_range(ptr noundef nonnull %1214)
  %1237 = load i32, ptr %1236, align 8, !tbaa !23
  %1238 = icmp eq i32 %1237, 1
  br i1 %1238, label %1239, label %1603

1239:                                             ; preds = %1235
  %1240 = tail call fastcc ptr @test_for_singularity(i32 noundef %1217, ptr noundef nonnull %1214, ptr noundef %1216, ptr noundef nonnull %1236)
  %1241 = icmp eq ptr %1240, null
  br i1 %1241, label %1308, label %1242

1242:                                             ; preds = %1239
  %1243 = load ptr, ptr @dump_file, align 8, !tbaa !5
  %1244 = icmp eq ptr %1243, null
  br i1 %1244, label %1250, label %1245

1245:                                             ; preds = %1242
  %1246 = tail call i64 @fwrite(ptr nonnull @.str.65, i64 22, i64 1, ptr nonnull %1243)
  %1247 = load ptr, ptr @dump_file, align 8, !tbaa !5
  tail call void @print_gimple_stmt(ptr noundef %1247, ptr noundef nonnull %306, i32 noundef 0, i32 noundef 0) #18
  %1248 = load ptr, ptr @dump_file, align 8, !tbaa !5
  %1249 = tail call i64 @fwrite(ptr nonnull @.str.66, i64 6, i64 1, ptr %1248)
  br label %1250

1250:                                             ; preds = %1245, %1242
  %1251 = load i32, ptr %306, align 8
  %1252 = and i32 %1251, 65535
  %1253 = or i32 %1252, 6619136
  store i32 %1253, ptr %306, align 8
  %1254 = and i32 %1251, 255
  %1255 = add nsw i32 %1254, -10
  %1256 = icmp ult i32 %1255, -9
  br i1 %1256, label %1261, label %1257

1257:                                             ; preds = %1250
  %1258 = getelementptr i8, ptr %306, i64 12
  %1259 = load i32, ptr %1258, align 4, !tbaa !16
  %1260 = icmp eq i32 %1259, 0
  br i1 %1260, label %1261, label %1264

1261:                                             ; preds = %1257, %1250
  tail call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1665, ptr noundef nonnull @.str.28) #18
  %1262 = load i32, ptr %306, align 8
  %1263 = and i32 %1262, 255
  br label %1264

1264:                                             ; preds = %1261, %1257
  %1265 = phi i32 [ %1254, %1257 ], [ %1263, %1261 ]
  %1266 = zext i32 %1265 to i64
  %1267 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %1266
  %1268 = load i32, ptr %1267, align 4, !tbaa !16
  %1269 = zext i32 %1268 to i64
  %1270 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %1269
  %1271 = load i64, ptr %1270, align 8, !tbaa !36
  %1272 = icmp eq i64 %1271, 0
  br i1 %1272, label %1273, label %1274

1273:                                             ; preds = %1264
  tail call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1622, ptr noundef nonnull @.str.28) #18
  br label %1274

1274:                                             ; preds = %1273, %1264
  %1275 = getelementptr inbounds i8, ptr %306, i64 %1271
  store ptr %1214, ptr %1275, align 8, !tbaa !5
  %1276 = load i32, ptr %306, align 8
  %1277 = and i32 %1276, 255
  %1278 = add nsw i32 %1277, -10
  %1279 = icmp ult i32 %1278, -9
  br i1 %1279, label %1284, label %1280

1280:                                             ; preds = %1274
  %1281 = getelementptr i8, ptr %306, i64 12
  %1282 = load i32, ptr %1281, align 4, !tbaa !16
  %1283 = icmp ugt i32 %1282, 1
  br i1 %1283, label %1287, label %1284

1284:                                             ; preds = %1280, %1274
  tail call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1665, ptr noundef nonnull @.str.28) #18
  %1285 = load i32, ptr %306, align 8
  %1286 = and i32 %1285, 255
  br label %1287

1287:                                             ; preds = %1284, %1280
  %1288 = phi i32 [ %1277, %1280 ], [ %1286, %1284 ]
  %1289 = zext i32 %1288 to i64
  %1290 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %1289
  %1291 = load i32, ptr %1290, align 4, !tbaa !16
  %1292 = zext i32 %1291 to i64
  %1293 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %1292
  %1294 = load i64, ptr %1293, align 8, !tbaa !36
  %1295 = icmp eq i64 %1294, 0
  br i1 %1295, label %1296, label %1297

1296:                                             ; preds = %1287
  tail call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1622, ptr noundef nonnull @.str.28) #18
  br label %1297

1297:                                             ; preds = %1296, %1287
  %1298 = getelementptr inbounds i8, ptr %306, i64 %1294
  %1299 = getelementptr inbounds ptr, ptr %1298, i64 1
  store ptr %1240, ptr %1299, align 8, !tbaa !5
  %1300 = load i32, ptr %306, align 8
  %1301 = and i32 %1300, 255
  %1302 = add nsw i32 %1301, -10
  %1303 = icmp ult i32 %1302, -9
  br i1 %1303, label %1305, label %1304

1304:                                             ; preds = %1297
  tail call void @gimple_set_modified(ptr noundef nonnull %306, i8 noundef zeroext 1) #18
  tail call void @update_stmt_operands(ptr noundef nonnull %306) #18
  br label %1305

1305:                                             ; preds = %1304, %1297
  %1306 = load ptr, ptr @dump_file, align 8, !tbaa !5
  %1307 = icmp eq ptr %1306, null
  br i1 %1307, label %1603, label %1378

1308:                                             ; preds = %1239
  %1309 = tail call i32 @invert_tree_comparison(i32 noundef %1217, i8 noundef zeroext 0) #18
  %1310 = tail call fastcc ptr @test_for_singularity(i32 noundef %1309, ptr noundef nonnull %1214, ptr noundef %1216, ptr noundef nonnull %1236)
  %1311 = icmp eq ptr %1310, null
  br i1 %1311, label %1603, label %1312

1312:                                             ; preds = %1308
  %1313 = load ptr, ptr @dump_file, align 8, !tbaa !5
  %1314 = icmp eq ptr %1313, null
  br i1 %1314, label %1320, label %1315

1315:                                             ; preds = %1312
  %1316 = tail call i64 @fwrite(ptr nonnull @.str.65, i64 22, i64 1, ptr nonnull %1313)
  %1317 = load ptr, ptr @dump_file, align 8, !tbaa !5
  tail call void @print_gimple_stmt(ptr noundef %1317, ptr noundef nonnull %306, i32 noundef 0, i32 noundef 0) #18
  %1318 = load ptr, ptr @dump_file, align 8, !tbaa !5
  %1319 = tail call i64 @fwrite(ptr nonnull @.str.66, i64 6, i64 1, ptr %1318)
  br label %1320

1320:                                             ; preds = %1315, %1312
  %1321 = load i32, ptr %306, align 8
  %1322 = and i32 %1321, 65535
  %1323 = or i32 %1322, 6684672
  store i32 %1323, ptr %306, align 8
  %1324 = and i32 %1321, 255
  %1325 = add nsw i32 %1324, -10
  %1326 = icmp ult i32 %1325, -9
  br i1 %1326, label %1331, label %1327

1327:                                             ; preds = %1320
  %1328 = getelementptr i8, ptr %306, i64 12
  %1329 = load i32, ptr %1328, align 4, !tbaa !16
  %1330 = icmp eq i32 %1329, 0
  br i1 %1330, label %1331, label %1334

1331:                                             ; preds = %1327, %1320
  tail call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1665, ptr noundef nonnull @.str.28) #18
  %1332 = load i32, ptr %306, align 8
  %1333 = and i32 %1332, 255
  br label %1334

1334:                                             ; preds = %1331, %1327
  %1335 = phi i32 [ %1324, %1327 ], [ %1333, %1331 ]
  %1336 = zext i32 %1335 to i64
  %1337 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %1336
  %1338 = load i32, ptr %1337, align 4, !tbaa !16
  %1339 = zext i32 %1338 to i64
  %1340 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %1339
  %1341 = load i64, ptr %1340, align 8, !tbaa !36
  %1342 = icmp eq i64 %1341, 0
  br i1 %1342, label %1343, label %1344

1343:                                             ; preds = %1334
  tail call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1622, ptr noundef nonnull @.str.28) #18
  br label %1344

1344:                                             ; preds = %1334, %1343
  %1345 = getelementptr inbounds i8, ptr %306, i64 %1341
  store ptr %1214, ptr %1345, align 8, !tbaa !5
  %1346 = load i32, ptr %306, align 8
  %1347 = and i32 %1346, 255
  %1348 = add nsw i32 %1347, -10
  %1349 = icmp ult i32 %1348, -9
  br i1 %1349, label %1354, label %1350

1350:                                             ; preds = %1344
  %1351 = getelementptr i8, ptr %306, i64 12
  %1352 = load i32, ptr %1351, align 4, !tbaa !16
  %1353 = icmp ugt i32 %1352, 1
  br i1 %1353, label %1357, label %1354

1354:                                             ; preds = %1350, %1344
  tail call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1665, ptr noundef nonnull @.str.28) #18
  %1355 = load i32, ptr %306, align 8
  %1356 = and i32 %1355, 255
  br label %1357

1357:                                             ; preds = %1354, %1350
  %1358 = phi i32 [ %1347, %1350 ], [ %1356, %1354 ]
  %1359 = zext i32 %1358 to i64
  %1360 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %1359
  %1361 = load i32, ptr %1360, align 4, !tbaa !16
  %1362 = zext i32 %1361 to i64
  %1363 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %1362
  %1364 = load i64, ptr %1363, align 8, !tbaa !36
  %1365 = icmp eq i64 %1364, 0
  br i1 %1365, label %1366, label %1367

1366:                                             ; preds = %1357
  tail call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1622, ptr noundef nonnull @.str.28) #18
  br label %1367

1367:                                             ; preds = %1357, %1366
  %1368 = getelementptr inbounds i8, ptr %306, i64 %1364
  %1369 = getelementptr inbounds ptr, ptr %1368, i64 1
  store ptr %1310, ptr %1369, align 8, !tbaa !5
  %1370 = load i32, ptr %306, align 8
  %1371 = and i32 %1370, 255
  %1372 = add nsw i32 %1371, -10
  %1373 = icmp ult i32 %1372, -9
  br i1 %1373, label %1375, label %1374

1374:                                             ; preds = %1367
  tail call void @gimple_set_modified(ptr noundef nonnull %306, i8 noundef zeroext 1) #18
  tail call void @update_stmt_operands(ptr noundef nonnull %306) #18
  br label %1375

1375:                                             ; preds = %1367, %1374
  %1376 = load ptr, ptr @dump_file, align 8, !tbaa !5
  %1377 = icmp eq ptr %1376, null
  br i1 %1377, label %1603, label %1378

1378:                                             ; preds = %1375, %1305
  %1379 = phi ptr [ %1306, %1305 ], [ %1376, %1375 ]
  tail call void @print_gimple_stmt(ptr noundef nonnull %1379, ptr noundef nonnull %306, i32 noundef 0, i32 noundef 0) #18
  %1380 = load ptr, ptr @dump_file, align 8, !tbaa !5
  %1381 = tail call i32 @fputc(i32 10, ptr %1380)
  br label %1603

1382:                                             ; preds = %1177
  %1383 = zext i32 %308 to i64
  %1384 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %1383
  %1385 = load i32, ptr %1384, align 4, !tbaa !16
  %1386 = zext i32 %1385 to i64
  %1387 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %1386
  %1388 = load i64, ptr %1387, align 8, !tbaa !36
  %1389 = icmp eq i64 %1388, 0
  br i1 %1389, label %1390, label %1391

1390:                                             ; preds = %1382
  tail call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1622, ptr noundef nonnull @.str.28) #18
  br label %1391

1391:                                             ; preds = %1390, %1382
  %1392 = getelementptr inbounds i8, ptr %306, i64 %1388
  %1393 = load ptr, ptr %1392, align 8, !tbaa !5
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %2) #18
  store i64 0, ptr %2, align 8, !tbaa !36
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %3) #18
  store i64 0, ptr %3, align 8, !tbaa !36
  %1394 = load i64, ptr %1393, align 8
  %1395 = trunc i64 %1394 to i16
  switch i16 %1395, label %1602 [
    i16 141, label %1396
    i16 23, label %1415
  ]

1396:                                             ; preds = %1391
  %1397 = tail call fastcc ptr @get_value_range(ptr noundef nonnull %1393)
  %1398 = load i32, ptr %1397, align 8, !tbaa !23
  %1399 = icmp eq i32 %1398, 1
  br i1 %1399, label %1400, label %1602

1400:                                             ; preds = %1396
  %1401 = getelementptr inbounds %struct.value_range_d, ptr %1397, i64 0, i32 1
  %1402 = load ptr, ptr %1401, align 8, !tbaa !25
  %1403 = tail call zeroext i8 @is_gimple_min_invariant(ptr noundef %1402) #18
  %1404 = icmp eq i8 %1403, 0
  br i1 %1404, label %1602, label %1405

1405:                                             ; preds = %1400
  %1406 = getelementptr inbounds %struct.value_range_d, ptr %1397, i64 0, i32 2
  %1407 = load ptr, ptr %1406, align 8, !tbaa !31
  %1408 = tail call zeroext i8 @is_gimple_min_invariant(ptr noundef %1407) #18
  %1409 = icmp eq i8 %1408, 0
  br i1 %1409, label %1602, label %1410

1410:                                             ; preds = %1405
  %1411 = load ptr, ptr %1401, align 8, !tbaa !25
  %1412 = load ptr, ptr %1406, align 8, !tbaa !31
  %1413 = call fastcc zeroext i8 @find_case_label_range(ptr noundef nonnull %306, ptr noundef %1411, ptr noundef %1412, ptr noundef nonnull %2, ptr noundef nonnull %3), !range !79
  %1414 = xor i8 %1413, 1
  br label %1421

1415:                                             ; preds = %1391
  %1416 = call fastcc zeroext i8 @find_case_label_index(ptr noundef nonnull %306, i64 noundef 1, ptr noundef nonnull %1393, ptr noundef nonnull %2)
  %1417 = icmp eq i8 %1416, 0
  br i1 %1417, label %1418, label %1419

1418:                                             ; preds = %1415
  store i64 1, ptr %2, align 8, !tbaa !36
  store i64 0, ptr %3, align 8, !tbaa !36
  br label %1421

1419:                                             ; preds = %1415
  %1420 = load i64, ptr %2, align 8, !tbaa !36
  store i64 %1420, ptr %3, align 8, !tbaa !36
  br label %1421

1421:                                             ; preds = %1419, %1418, %1410
  %1422 = phi i8 [ %1414, %1410 ], [ 1, %1418 ], [ 0, %1419 ]
  %1423 = getelementptr i8, ptr %306, i64 12
  %1424 = load i32, ptr %1423, align 4, !tbaa !16
  %1425 = icmp ugt i32 %1424, 1
  br i1 %1425, label %1427, label %1426

1426:                                             ; preds = %1421
  tail call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 3162, ptr noundef nonnull @.str.28) #18
  br label %1427

1427:                                             ; preds = %1426, %1421
  %1428 = load i64, ptr %2, align 8, !tbaa !36
  %1429 = icmp eq i64 %1428, 1
  %1430 = load i64, ptr %3, align 8, !tbaa !36
  br i1 %1429, label %1431, label %1438

1431:                                             ; preds = %1427
  %1432 = add i32 %1424, -1
  %1433 = zext i32 %1432 to i64
  %1434 = add nsw i64 %1433, -1
  %1435 = icmp eq i64 %1430, %1434
  %1436 = icmp ne i8 %1422, 0
  %1437 = select i1 %1435, i1 %1436, i1 false
  br i1 %1437, label %1602, label %1438

1438:                                             ; preds = %1431, %1427
  %1439 = zext i8 %1422 to i64
  %1440 = add nuw nsw i64 %1439, 1
  %1441 = sub i64 %1440, %1428
  %1442 = add i64 %1441, %1430
  %1443 = trunc i64 %1442 to i32
  %1444 = tail call ptr @make_tree_vec_stat(i32 noundef %1443) #18
  %1445 = icmp eq i8 %1422, 0
  br i1 %1445, label %1471, label %1446

1446:                                             ; preds = %1438
  %1447 = load i32, ptr %1423, align 4, !tbaa !16
  %1448 = icmp ugt i32 %1447, 1
  br i1 %1448, label %1450, label %1449

1449:                                             ; preds = %1446
  tail call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 3215, ptr noundef nonnull @.str.28) #18
  br label %1450

1450:                                             ; preds = %1449, %1446
  %1451 = load i32, ptr %306, align 8
  %1452 = and i32 %1451, 255
  %1453 = add nsw i32 %1452, -10
  %1454 = icmp ult i32 %1453, -9
  br i1 %1454, label %1468, label %1455

1455:                                             ; preds = %1450
  %1456 = zext i32 %1452 to i64
  %1457 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %1456
  %1458 = load i32, ptr %1457, align 4, !tbaa !16
  %1459 = zext i32 %1458 to i64
  %1460 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %1459
  %1461 = load i64, ptr %1460, align 8, !tbaa !36
  %1462 = icmp eq i64 %1461, 0
  br i1 %1462, label %1463, label %1464

1463:                                             ; preds = %1455
  tail call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1622, ptr noundef nonnull @.str.28) #18
  br label %1464

1464:                                             ; preds = %1463, %1455
  %1465 = getelementptr inbounds i8, ptr %306, i64 %1461
  %1466 = getelementptr inbounds ptr, ptr %1465, i64 1
  %1467 = load ptr, ptr %1466, align 8, !tbaa !5
  br label %1468

1468:                                             ; preds = %1464, %1450
  %1469 = phi ptr [ %1467, %1464 ], [ null, %1450 ]
  %1470 = getelementptr inbounds %struct.tree_vec, ptr %1444, i64 0, i32 2
  store ptr %1469, ptr %1470, align 8, !tbaa !16
  br label %1471

1471:                                             ; preds = %1468, %1438
  %1472 = phi i64 [ 1, %1468 ], [ 0, %1438 ]
  %1473 = icmp ugt i64 %1428, %1430
  br i1 %1473, label %1474, label %1479

1474:                                             ; preds = %1506, %1471
  %1475 = phi i64 [ %1472, %1471 ], [ %1510, %1506 ]
  %1476 = icmp eq i64 %1475, 0
  br i1 %1476, label %1525, label %1477

1477:                                             ; preds = %1474
  %1478 = getelementptr i8, ptr %306, i64 16
  br label %1512

1479:                                             ; preds = %1471, %1506
  %1480 = phi i64 [ %1510, %1506 ], [ %1472, %1471 ]
  %1481 = phi i64 [ %1509, %1506 ], [ %1428, %1471 ]
  %1482 = trunc i64 %1481 to i32
  %1483 = load i32, ptr %1423, align 4, !tbaa !16
  %1484 = add i32 %1482, 1
  %1485 = icmp ugt i32 %1483, %1484
  br i1 %1485, label %1487, label %1486

1486:                                             ; preds = %1479
  tail call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 3215, ptr noundef nonnull @.str.28) #18
  br label %1487

1487:                                             ; preds = %1486, %1479
  %1488 = load i32, ptr %306, align 8
  %1489 = and i32 %1488, 255
  %1490 = add nsw i32 %1489, -10
  %1491 = icmp ult i32 %1490, -9
  br i1 %1491, label %1506, label %1492

1492:                                             ; preds = %1487
  %1493 = zext i32 %1489 to i64
  %1494 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %1493
  %1495 = load i32, ptr %1494, align 4, !tbaa !16
  %1496 = zext i32 %1495 to i64
  %1497 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %1496
  %1498 = load i64, ptr %1497, align 8, !tbaa !36
  %1499 = icmp eq i64 %1498, 0
  br i1 %1499, label %1500, label %1501

1500:                                             ; preds = %1492
  tail call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1622, ptr noundef nonnull @.str.28) #18
  br label %1501

1501:                                             ; preds = %1500, %1492
  %1502 = getelementptr inbounds i8, ptr %306, i64 %1498
  %1503 = zext i32 %1484 to i64
  %1504 = getelementptr inbounds ptr, ptr %1502, i64 %1503
  %1505 = load ptr, ptr %1504, align 8, !tbaa !5
  br label %1506

1506:                                             ; preds = %1501, %1487
  %1507 = phi ptr [ %1505, %1501 ], [ null, %1487 ]
  %1508 = getelementptr inbounds %struct.tree_vec, ptr %1444, i64 0, i32 2, i64 %1480
  store ptr %1507, ptr %1508, align 8, !tbaa !16
  %1509 = add i64 %1481, 1
  %1510 = add i64 %1480, 1
  %1511 = icmp ugt i64 %1509, %1430
  br i1 %1511, label %1474, label %1479, !llvm.loop !207

1512:                                             ; preds = %1512, %1477
  %1513 = phi i64 [ 0, %1477 ], [ %1523, %1512 ]
  %1514 = load ptr, ptr %1478, align 8, !tbaa !16
  %1515 = load ptr, ptr @cfun, align 8, !tbaa !5
  %1516 = getelementptr inbounds %struct.tree_vec, ptr %1444, i64 0, i32 2, i64 %1513
  %1517 = load ptr, ptr %1516, align 8, !tbaa !16
  %1518 = getelementptr inbounds %struct.tree_exp, ptr %1517, i64 1, i32 0, i32 1
  %1519 = load ptr, ptr %1518, align 8, !tbaa !16
  %1520 = tail call ptr @label_to_block_fn(ptr noundef %1515, ptr noundef %1519) #18
  %1521 = tail call ptr @find_edge(ptr noundef %1514, ptr noundef %1520) #18
  %1522 = getelementptr inbounds %struct.edge_def, ptr %1521, i64 0, i32 3
  store ptr inttoptr (i64 -1 to ptr), ptr %1522, align 8, !tbaa !208
  %1523 = add nuw i64 %1513, 1
  %1524 = icmp eq i64 %1523, %1475
  br i1 %1524, label %1525, label %1512, !llvm.loop !209

1525:                                             ; preds = %1512, %1474
  %1526 = getelementptr i8, ptr %306, i64 16
  %1527 = load ptr, ptr %1526, align 8, !tbaa !16
  %1528 = getelementptr inbounds %struct.basic_block_def, ptr %1527, i64 0, i32 1
  br label %1529

1529:                                             ; preds = %1582, %1525
  %1530 = phi i32 [ 0, %1525 ], [ %1583, %1582 ]
  %1531 = load ptr, ptr %1528, align 8, !tbaa !5
  %1532 = icmp eq ptr %1531, null
  br i1 %1532, label %1535, label %1533

1533:                                             ; preds = %1529
  %1534 = load i32, ptr %1531, align 8, !tbaa !76
  br label %1535

1535:                                             ; preds = %1533, %1529
  %1536 = phi i32 [ %1534, %1533 ], [ 0, %1529 ]
  %1537 = icmp eq i32 %1536, %1530
  br i1 %1537, label %1584, label %1538

1538:                                             ; preds = %1535
  %1539 = zext i32 %1530 to i64
  %1540 = getelementptr inbounds %struct.VEC_edge_base, ptr %1531, i64 0, i32 2, i64 %1539
  %1541 = load ptr, ptr %1540, align 8, !tbaa !5
  %1542 = getelementptr inbounds %struct.edge_def, ptr %1541, i64 0, i32 3
  %1543 = load ptr, ptr %1542, align 8, !tbaa !208
  %1544 = icmp eq ptr %1543, inttoptr (i64 -1 to ptr)
  br i1 %1544, label %1545, label %1546

1545:                                             ; preds = %1538
  store ptr null, ptr %1542, align 8, !tbaa !208
  br label %1575

1546:                                             ; preds = %1538
  %1547 = load ptr, ptr @dump_file, align 8, !tbaa !5
  %1548 = icmp eq ptr %1547, null
  br i1 %1548, label %1555, label %1549

1549:                                             ; preds = %1546
  %1550 = load i32, ptr @dump_flags, align 4, !tbaa !20
  %1551 = and i32 %1550, 8
  %1552 = icmp eq i32 %1551, 0
  br i1 %1552, label %1555, label %1553

1553:                                             ; preds = %1549
  %1554 = tail call i64 @fwrite(ptr nonnull @.str.67, i64 32, i64 1, ptr nonnull %1547)
  br label %1555

1555:                                             ; preds = %1553, %1549, %1546
  %1556 = load ptr, ptr @to_remove_edges, align 8, !tbaa !5
  %1557 = icmp eq ptr %1556, null
  br i1 %1557, label %1563, label %1558

1558:                                             ; preds = %1555
  %1559 = getelementptr inbounds %struct.VEC_edge_base, ptr %1556, i64 0, i32 1
  %1560 = load i32, ptr %1559, align 4, !tbaa !210
  %1561 = load i32, ptr %1556, align 8, !tbaa !76
  %1562 = icmp eq i32 %1560, %1561
  br i1 %1562, label %1563, label %1566

1563:                                             ; preds = %1558, %1555
  %1564 = tail call ptr @vec_heap_p_reserve(ptr noundef %1556, i32 noundef 1) #18
  store ptr %1564, ptr @to_remove_edges, align 8, !tbaa !5
  %1565 = load i32, ptr %1564, align 8, !tbaa !76
  br label %1566

1566:                                             ; preds = %1563, %1558
  %1567 = phi i32 [ %1561, %1558 ], [ %1565, %1563 ]
  %1568 = phi ptr [ %1556, %1558 ], [ %1564, %1563 ]
  %1569 = add i32 %1567, 1
  store i32 %1569, ptr %1568, align 8, !tbaa !76
  %1570 = zext i32 %1567 to i64
  %1571 = getelementptr inbounds %struct.VEC_edge_base, ptr %1568, i64 0, i32 2, i64 %1570
  store ptr %1541, ptr %1571, align 8, !tbaa !5
  %1572 = getelementptr inbounds %struct.edge_def, ptr %1541, i64 0, i32 7
  %1573 = load i32, ptr %1572, align 8, !tbaa !108
  %1574 = and i32 %1573, -4097
  store i32 %1574, ptr %1572, align 8, !tbaa !108
  br label %1575

1575:                                             ; preds = %1566, %1545
  %1576 = load ptr, ptr %1528, align 8, !tbaa !5
  %1577 = icmp eq ptr %1576, null
  br i1 %1577, label %1581, label %1578

1578:                                             ; preds = %1575
  %1579 = load i32, ptr %1576, align 8, !tbaa !76
  %1580 = icmp ult i32 %1530, %1579
  br i1 %1580, label %1582, label %1581

1581:                                             ; preds = %1578, %1575
  tail call void @fancy_abort(ptr noundef nonnull @.str.35, i32 noundef 738, ptr noundef nonnull @.str.28) #18
  br label %1582

1582:                                             ; preds = %1581, %1578
  %1583 = add i32 %1530, 1
  br label %1529, !llvm.loop !211

1584:                                             ; preds = %1535
  %1585 = load ptr, ptr @to_update_switch_stmts, align 8, !tbaa !5
  %1586 = icmp eq ptr %1585, null
  br i1 %1586, label %1592, label %1587

1587:                                             ; preds = %1584
  %1588 = getelementptr inbounds %struct.VEC_switch_update_base, ptr %1585, i64 0, i32 1
  %1589 = load i32, ptr %1588, align 4, !tbaa !212
  %1590 = load i32, ptr %1585, align 8, !tbaa !162
  %1591 = icmp eq i32 %1589, %1590
  br i1 %1591, label %1592, label %1595

1592:                                             ; preds = %1587, %1584
  %1593 = tail call ptr @vec_heap_o_reserve(ptr noundef %1585, i32 noundef 1, i64 noundef 8, i64 noundef 16) #18
  store ptr %1593, ptr @to_update_switch_stmts, align 8, !tbaa !5
  %1594 = load i32, ptr %1593, align 8, !tbaa !162
  br label %1595

1595:                                             ; preds = %1592, %1587
  %1596 = phi i32 [ %1590, %1587 ], [ %1594, %1592 ]
  %1597 = phi ptr [ %1585, %1587 ], [ %1593, %1592 ]
  %1598 = add i32 %1596, 1
  store i32 %1598, ptr %1597, align 8, !tbaa !162
  %1599 = zext i32 %1596 to i64
  %1600 = getelementptr inbounds %struct.VEC_switch_update_base, ptr %1597, i64 0, i32 2, i64 %1599
  store ptr %306, ptr %1600, align 8, !tbaa.struct !101
  %1601 = getelementptr inbounds i8, ptr %1600, i64 8
  store ptr %1444, ptr %1601, align 8, !tbaa.struct !102
  br label %1602

1602:                                             ; preds = %1595, %1431, %1405, %1400, %1396, %1391
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %3) #18
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %2) #18
  br label %1603

1603:                                             ; preds = %189, %297, %303, %241, %1602, %1378, %1375, %1308, %1305, %1235, %1232, %1224, %1220, %1213, %1177, %1176, %1175, %1092, %1063, %997, %983, %974, %868, %865, %731, %700, %641, %403, %341
  %1604 = phi i8 [ 0, %1602 ], [ 1, %1305 ], [ 1, %1375 ], [ 0, %1224 ], [ 0, %1232 ], [ 0, %1220 ], [ 0, %1213 ], [ 0, %1235 ], [ 0, %1308 ], [ 1, %1378 ], [ 0, %341 ], [ 0, %997 ], [ 0, %1063 ], [ 0, %700 ], [ 0, %731 ], [ 0, %403 ], [ 0, %1092 ], [ 0, %1176 ], [ 1, %1175 ], [ 1, %983 ], [ 1, %974 ], [ 0, %865 ], [ 0, %868 ], [ %642, %641 ], [ 0, %1177 ], [ 1, %241 ], [ 1, %303 ], [ 1, %297 ], [ 1, %189 ]
  ret i8 %1604
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc ptr @vrp_evaluate_conditional(i32 noundef %0, ptr noundef %1, ptr noundef %2, ptr nocapture noundef readonly %3) unnamed_addr #9 {
  %5 = alloca i8, align 1
  %6 = alloca i8, align 1
  call void @llvm.lifetime.start.p0(i64 1, ptr nonnull %5) #18
  call void @llvm.lifetime.start.p0(i64 1, ptr nonnull %6) #18
  %7 = load i64, ptr %1, align 8
  %8 = and i64 %7, 134283263
  %9 = icmp eq i64 %8, 134217751
  br i1 %9, label %85, label %10

10:                                               ; preds = %4
  %11 = load i64, ptr %2, align 8
  %12 = and i64 %11, 134283263
  %13 = icmp eq i64 %12, 134217751
  br i1 %13, label %85, label %14

14:                                               ; preds = %10
  store i8 0, ptr %5, align 1, !tbaa !16
  %15 = call fastcc ptr @vrp_evaluate_conditional_warnv_with_ops(i32 noundef %0, ptr noundef nonnull %1, ptr noundef nonnull %2, i8 noundef zeroext 1, ptr noundef nonnull %5, ptr noundef nonnull %6)
  %16 = icmp ne ptr %15, null
  %17 = load i8, ptr %5, align 1
  %18 = icmp ne i8 %17, 0
  %19 = select i1 %16, i1 %18, i1 false
  br i1 %19, label %20, label %34

20:                                               ; preds = %14
  %21 = call zeroext i8 @is_gimple_min_invariant(ptr noundef nonnull %15) #18
  %22 = icmp eq i8 %21, 0
  %23 = select i1 %22, i32 3, i32 2
  %24 = load i32, ptr @warn_strict_overflow, align 4, !tbaa !20
  %25 = icmp slt i32 %24, %23
  br i1 %25, label %34, label %26

26:                                               ; preds = %20
  %27 = select i1 %22, ptr @.str.57, ptr @.str.56
  %28 = getelementptr i8, ptr %3, i64 8
  %29 = load i32, ptr %28, align 8, !tbaa !16
  %30 = icmp eq i32 %29, 0
  %31 = load i32, ptr @input_location, align 4
  %32 = select i1 %30, i32 %31, i32 %29
  %33 = call zeroext i8 (i32, i32, ptr, ...) @warning_at(i32 noundef %32, i32 noundef 187, ptr noundef nonnull @.str.58, ptr noundef nonnull %27) #18
  br label %34

34:                                               ; preds = %20, %26, %14
  %35 = load i32, ptr @warn_type_limits, align 4, !tbaa !20
  %36 = icmp ne i32 %35, 0
  %37 = and i1 %16, %36
  %38 = load i8, ptr %6, align 1
  %39 = icmp ne i8 %38, 0
  %40 = select i1 %37, i1 %39, i1 false
  br i1 %40, label %41, label %85

41:                                               ; preds = %34
  %42 = zext i32 %0 to i64
  %43 = getelementptr inbounds [0 x i32], ptr @tree_code_type, i64 0, i64 %42
  %44 = load i32, ptr %43, align 4, !tbaa !16
  %45 = icmp eq i32 %44, 5
  br i1 %45, label %46, label %85

46:                                               ; preds = %41
  %47 = load i64, ptr %1, align 8
  %48 = and i64 %47, 65535
  %49 = icmp eq i64 %48, 141
  br i1 %49, label %50, label %85

50:                                               ; preds = %46
  %51 = getelementptr inbounds %struct.tree_common, ptr %1, i64 0, i32 2
  %52 = load ptr, ptr %51, align 8, !tbaa !16
  %53 = call fastcc ptr @get_value_range(ptr noundef nonnull %1)
  %54 = load i32, ptr %53, align 8, !tbaa !23
  %55 = icmp eq i32 %54, 3
  br i1 %55, label %85, label %56

56:                                               ; preds = %50
  %57 = load i64, ptr %52, align 8
  %58 = trunc i64 %57 to i32
  %59 = and i32 %58, 65535
  %60 = add nsw i32 %59, -6
  %61 = icmp ult i32 %60, 3
  br i1 %61, label %62, label %85

62:                                               ; preds = %56
  %63 = getelementptr inbounds %struct.value_range_d, ptr %53, i64 0, i32 1
  %64 = load ptr, ptr %63, align 8, !tbaa !25
  %65 = call fastcc zeroext i8 @vrp_val_is_min(ptr noundef %64), !range !79
  %66 = icmp eq i8 %65, 0
  br i1 %66, label %85, label %67

67:                                               ; preds = %62
  %68 = getelementptr inbounds %struct.value_range_d, ptr %53, i64 0, i32 2
  %69 = load ptr, ptr %68, align 8, !tbaa !31
  %70 = call fastcc zeroext i8 @vrp_val_is_max(ptr noundef %69), !range !79
  %71 = icmp eq i8 %70, 0
  br i1 %71, label %85, label %72

72:                                               ; preds = %67
  %73 = call zeroext i8 @is_gimple_min_invariant(ptr noundef nonnull %2) #18
  %74 = icmp eq i8 %73, 0
  br i1 %74, label %85, label %75

75:                                               ; preds = %72
  %76 = getelementptr i8, ptr %3, i64 8
  %77 = load i32, ptr %76, align 8, !tbaa !16
  %78 = icmp eq i32 %77, 0
  %79 = load i32, ptr @input_location, align 4
  %80 = select i1 %78, i32 %79, i32 %77
  %81 = call i32 @integer_zerop(ptr noundef nonnull %15) #18
  %82 = icmp eq i32 %81, 0
  %83 = select i1 %82, ptr @.str.60, ptr @.str.59
  %84 = call zeroext i8 (i32, i32, ptr, ...) @warning_at(i32 noundef %80, i32 noundef 206, ptr noundef nonnull %83) #18
  br label %85

85:                                               ; preds = %56, %34, %41, %46, %75, %72, %67, %62, %50, %4, %10
  %86 = phi ptr [ null, %10 ], [ null, %4 ], [ %15, %50 ], [ %15, %62 ], [ %15, %67 ], [ %15, %72 ], [ %15, %75 ], [ %15, %56 ], [ %15, %46 ], [ %15, %41 ], [ %15, %34 ]
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %6) #18
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %5) #18
  ret ptr %86
}

declare void @print_gimple_expr(ptr noundef, ptr noundef, i32 noundef, i32 noundef) local_unnamed_addr #3

declare void @gimple_assign_set_rhs_from_tree(ptr noundef, ptr noundef) local_unnamed_addr #3

declare zeroext i8 @warning_at(i32 noundef, i32 noundef, ptr noundef, ...) local_unnamed_addr #3

declare i32 @integer_pow2p(ptr noundef) local_unnamed_addr #3

declare i32 @integer_all_onesp(ptr noundef) local_unnamed_addr #3

declare zeroext i8 @useless_type_conversion_p(ptr noundef, ptr noundef) local_unnamed_addr #3

declare void @gimple_assign_set_rhs_with_ops(ptr noundef, i32 noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

declare void @gimple_set_modified(ptr noundef, i8 noundef zeroext) local_unnamed_addr #3

declare void @update_stmt_operands(ptr noundef) local_unnamed_addr #3

declare i32 @tree_log2(ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc ptr @test_for_singularity(i32 noundef %0, ptr nocapture noundef readonly %1, ptr noundef %2, ptr nocapture noundef readonly %3) unnamed_addr #9 {
  %5 = alloca i8, align 1
  %6 = alloca i8, align 1
  %7 = add i32 %0, -97
  %8 = icmp ult i32 %7, 2
  br i1 %8, label %9, label %75

9:                                                ; preds = %4
  %10 = icmp eq i32 %0, 97
  %11 = getelementptr inbounds %struct.tree_common, ptr %1, i64 0, i32 2
  %12 = load ptr, ptr %11, align 8, !tbaa !16
  %13 = getelementptr inbounds %struct.tree_type, ptr %12, i64 0, i32 13
  %14 = load ptr, ptr %13, align 8, !tbaa !16
  br i1 %10, label %15, label %150

15:                                               ; preds = %9
  %16 = getelementptr inbounds %struct.tree_common, ptr %2, i64 0, i32 2
  %17 = load ptr, ptr %16, align 8, !tbaa !16
  %18 = load i64, ptr %17, align 8
  %19 = trunc i64 %18 to i32
  %20 = and i32 %19, 65535
  %21 = add nsw i32 %20, -6
  %22 = icmp ult i32 %21, 3
  br i1 %22, label %23, label %64

23:                                               ; preds = %15
  %24 = and i64 %18, 2097152
  %25 = icmp ne i64 %24, 0
  %26 = load i32, ptr @flag_wrapv, align 4
  %27 = icmp ne i32 %26, 0
  %28 = select i1 %25, i1 true, i1 %27
  br i1 %28, label %64, label %29

29:                                               ; preds = %23
  %30 = load i64, ptr %2, align 8
  %31 = and i64 %30, 65535
  %32 = getelementptr inbounds [0 x i32], ptr @tree_code_type, i64 0, i64 %31
  %33 = load i32, ptr %32, align 4, !tbaa !16
  %34 = icmp ne i32 %33, 1
  %35 = and i64 %30, 134217728
  %36 = icmp eq i64 %35, 0
  %37 = or i1 %34, %36
  br i1 %37, label %64, label %38

38:                                               ; preds = %29
  %39 = getelementptr inbounds %struct.tree_type, ptr %17, i64 0, i32 13
  %40 = load ptr, ptr %39, align 8, !tbaa !16
  %41 = icmp eq ptr %40, %2
  br i1 %41, label %150, label %42

42:                                               ; preds = %38
  %43 = icmp eq ptr %40, null
  br i1 %43, label %54, label %44

44:                                               ; preds = %42
  %45 = tail call i32 @operand_equal_p(ptr noundef nonnull %2, ptr noundef nonnull %40, i32 noundef 0) #18
  %46 = icmp eq i32 %45, 0
  br i1 %46, label %47, label %150

47:                                               ; preds = %44
  %48 = load ptr, ptr %16, align 8, !tbaa !16
  %49 = load i64, ptr %48, align 8
  %50 = trunc i64 %49 to i32
  %51 = and i32 %50, 65535
  %52 = add nsw i32 %51, -6
  %53 = icmp ult i32 %52, 3
  br i1 %53, label %54, label %64

54:                                               ; preds = %47, %42
  %55 = phi ptr [ %48, %47 ], [ %17, %42 ]
  %56 = getelementptr inbounds %struct.tree_type, ptr %55, i64 0, i32 14
  %57 = load ptr, ptr %56, align 8, !tbaa !16
  %58 = icmp eq ptr %57, %2
  br i1 %58, label %150, label %59

59:                                               ; preds = %54
  %60 = icmp eq ptr %57, null
  br i1 %60, label %64, label %61

61:                                               ; preds = %59
  %62 = tail call i32 @operand_equal_p(ptr noundef nonnull %2, ptr noundef nonnull %57, i32 noundef 0) #18
  %63 = icmp eq i32 %62, 0
  br i1 %63, label %64, label %150

64:                                               ; preds = %15, %47, %59, %23, %29, %61
  %65 = load ptr, ptr %11, align 8, !tbaa !16
  %66 = tail call ptr @build_int_cst(ptr noundef %65, i64 noundef 1) #18
  %67 = load ptr, ptr %11, align 8, !tbaa !16
  %68 = tail call ptr @fold_build2_stat_loc(i32 noundef 0, i32 noundef 64, ptr noundef %67, ptr noundef nonnull %2, ptr noundef %66) #18
  %69 = load i64, ptr %68, align 8
  %70 = and i64 %69, 65535
  %71 = getelementptr inbounds [0 x i32], ptr @tree_code_type, i64 0, i64 %70
  %72 = load i32, ptr %71, align 4, !tbaa !16
  %73 = add i32 %72, -4
  %74 = icmp ult i32 %73, 7
  br i1 %74, label %144, label %150

75:                                               ; preds = %4
  %76 = add i32 %0, -99
  %77 = icmp ult i32 %76, 2
  br i1 %77, label %78, label %198

78:                                               ; preds = %75
  %79 = icmp eq i32 %0, 99
  %80 = getelementptr inbounds %struct.tree_common, ptr %1, i64 0, i32 2
  %81 = load ptr, ptr %80, align 8, !tbaa !16
  %82 = getelementptr inbounds %struct.tree_type, ptr %81, i64 0, i32 14
  %83 = load ptr, ptr %82, align 8, !tbaa !16
  br i1 %79, label %84, label %150

84:                                               ; preds = %78
  %85 = getelementptr inbounds %struct.tree_common, ptr %2, i64 0, i32 2
  %86 = load ptr, ptr %85, align 8, !tbaa !16
  %87 = load i64, ptr %86, align 8
  %88 = trunc i64 %87 to i32
  %89 = and i32 %88, 65535
  %90 = add nsw i32 %89, -6
  %91 = icmp ult i32 %90, 3
  br i1 %91, label %92, label %133

92:                                               ; preds = %84
  %93 = and i64 %87, 2097152
  %94 = icmp ne i64 %93, 0
  %95 = load i32, ptr @flag_wrapv, align 4
  %96 = icmp ne i32 %95, 0
  %97 = select i1 %94, i1 true, i1 %96
  br i1 %97, label %133, label %98

98:                                               ; preds = %92
  %99 = load i64, ptr %2, align 8
  %100 = and i64 %99, 65535
  %101 = getelementptr inbounds [0 x i32], ptr @tree_code_type, i64 0, i64 %100
  %102 = load i32, ptr %101, align 4, !tbaa !16
  %103 = icmp ne i32 %102, 1
  %104 = and i64 %99, 134217728
  %105 = icmp eq i64 %104, 0
  %106 = or i1 %103, %105
  br i1 %106, label %133, label %107

107:                                              ; preds = %98
  %108 = getelementptr inbounds %struct.tree_type, ptr %86, i64 0, i32 13
  %109 = load ptr, ptr %108, align 8, !tbaa !16
  %110 = icmp eq ptr %109, %2
  br i1 %110, label %150, label %111

111:                                              ; preds = %107
  %112 = icmp eq ptr %109, null
  br i1 %112, label %123, label %113

113:                                              ; preds = %111
  %114 = tail call i32 @operand_equal_p(ptr noundef nonnull %2, ptr noundef nonnull %109, i32 noundef 0) #18
  %115 = icmp eq i32 %114, 0
  br i1 %115, label %116, label %150

116:                                              ; preds = %113
  %117 = load ptr, ptr %85, align 8, !tbaa !16
  %118 = load i64, ptr %117, align 8
  %119 = trunc i64 %118 to i32
  %120 = and i32 %119, 65535
  %121 = add nsw i32 %120, -6
  %122 = icmp ult i32 %121, 3
  br i1 %122, label %123, label %133

123:                                              ; preds = %116, %111
  %124 = phi ptr [ %117, %116 ], [ %86, %111 ]
  %125 = getelementptr inbounds %struct.tree_type, ptr %124, i64 0, i32 14
  %126 = load ptr, ptr %125, align 8, !tbaa !16
  %127 = icmp eq ptr %126, %2
  br i1 %127, label %150, label %128

128:                                              ; preds = %123
  %129 = icmp eq ptr %126, null
  br i1 %129, label %133, label %130

130:                                              ; preds = %128
  %131 = tail call i32 @operand_equal_p(ptr noundef nonnull %2, ptr noundef nonnull %126, i32 noundef 0) #18
  %132 = icmp eq i32 %131, 0
  br i1 %132, label %133, label %150

133:                                              ; preds = %84, %116, %128, %92, %98, %130
  %134 = load ptr, ptr %80, align 8, !tbaa !16
  %135 = tail call ptr @build_int_cst(ptr noundef %134, i64 noundef 1) #18
  %136 = load ptr, ptr %80, align 8, !tbaa !16
  %137 = tail call ptr @fold_build2_stat_loc(i32 noundef 0, i32 noundef 63, ptr noundef %136, ptr noundef nonnull %2, ptr noundef %135) #18
  %138 = load i64, ptr %137, align 8
  %139 = and i64 %138, 65535
  %140 = getelementptr inbounds [0 x i32], ptr @tree_code_type, i64 0, i64 %139
  %141 = load i32, ptr %140, align 4, !tbaa !16
  %142 = add i32 %141, -4
  %143 = icmp ult i32 %142, 7
  br i1 %143, label %144, label %150

144:                                              ; preds = %133, %64
  %145 = phi i64 [ %69, %64 ], [ %138, %133 ]
  %146 = phi ptr [ %68, %64 ], [ %137, %133 ]
  %147 = phi ptr [ %68, %64 ], [ %83, %133 ]
  %148 = phi ptr [ %14, %64 ], [ %137, %133 ]
  %149 = or i64 %145, 8388608
  store i64 %149, ptr %146, align 8
  br label %150

150:                                              ; preds = %144, %107, %123, %113, %38, %54, %44, %133, %64, %130, %78, %9, %61
  %151 = phi ptr [ %2, %61 ], [ %2, %9 ], [ %83, %130 ], [ %83, %78 ], [ %68, %64 ], [ %83, %133 ], [ %2, %44 ], [ %2, %54 ], [ %2, %38 ], [ %83, %113 ], [ %83, %123 ], [ %83, %107 ], [ %147, %144 ]
  %152 = phi ptr [ %14, %61 ], [ %14, %9 ], [ %2, %130 ], [ %2, %78 ], [ %14, %64 ], [ %137, %133 ], [ %14, %44 ], [ %14, %54 ], [ %14, %38 ], [ %2, %113 ], [ %2, %123 ], [ %2, %107 ], [ %148, %144 ]
  %153 = icmp ne ptr %152, null
  %154 = icmp ne ptr %151, null
  %155 = select i1 %153, i1 %154, i1 false
  br i1 %155, label %156, label %198

156:                                              ; preds = %150
  %157 = getelementptr inbounds %struct.value_range_d, ptr %3, i64 0, i32 1
  %158 = load ptr, ptr %157, align 8, !tbaa !25
  call void @llvm.lifetime.start.p0(i64 1, ptr nonnull %6) #18
  store i8 0, ptr %6, align 1, !tbaa !16
  %159 = call fastcc i32 @compare_values_warnv(ptr noundef %158, ptr noundef nonnull %152, ptr noundef nonnull %6)
  %160 = load i8, ptr %6, align 1, !tbaa !16
  %161 = icmp eq i8 %160, 0
  br i1 %161, label %169, label %162

162:                                              ; preds = %156
  %163 = call zeroext i8 @is_gimple_min_invariant(ptr noundef %158) #18
  %164 = icmp eq i8 %163, 0
  br i1 %164, label %168, label %165

165:                                              ; preds = %162
  %166 = call zeroext i8 @is_gimple_min_invariant(ptr noundef nonnull %152) #18
  %167 = icmp eq i8 %166, 0
  br i1 %167, label %168, label %169

168:                                              ; preds = %162, %165
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %6) #18
  br label %173

169:                                              ; preds = %156, %165
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %6) #18
  %170 = icmp eq i32 %159, 1
  br i1 %170, label %171, label %173

171:                                              ; preds = %169
  %172 = load ptr, ptr %157, align 8, !tbaa !25
  br label %173

173:                                              ; preds = %168, %171, %169
  %174 = phi ptr [ %172, %171 ], [ %152, %169 ], [ %152, %168 ]
  %175 = getelementptr inbounds %struct.value_range_d, ptr %3, i64 0, i32 2
  %176 = load ptr, ptr %175, align 8, !tbaa !31
  call void @llvm.lifetime.start.p0(i64 1, ptr nonnull %5) #18
  store i8 0, ptr %5, align 1, !tbaa !16
  %177 = call fastcc i32 @compare_values_warnv(ptr noundef %176, ptr noundef nonnull %151, ptr noundef nonnull %5)
  %178 = load i8, ptr %5, align 1, !tbaa !16
  %179 = icmp eq i8 %178, 0
  br i1 %179, label %187, label %180

180:                                              ; preds = %173
  %181 = call zeroext i8 @is_gimple_min_invariant(ptr noundef %176) #18
  %182 = icmp eq i8 %181, 0
  br i1 %182, label %186, label %183

183:                                              ; preds = %180
  %184 = call zeroext i8 @is_gimple_min_invariant(ptr noundef nonnull %151) #18
  %185 = icmp eq i8 %184, 0
  br i1 %185, label %186, label %187

186:                                              ; preds = %180, %183
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %5) #18
  br label %191

187:                                              ; preds = %173, %183
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %5) #18
  %188 = icmp eq i32 %177, -1
  br i1 %188, label %189, label %191

189:                                              ; preds = %187
  %190 = load ptr, ptr %175, align 8, !tbaa !31
  br label %191

191:                                              ; preds = %186, %189, %187
  %192 = phi ptr [ %190, %189 ], [ %151, %187 ], [ %151, %186 ]
  %193 = call i32 @operand_equal_p(ptr noundef %174, ptr noundef %192, i32 noundef 0) #18
  %194 = icmp eq i32 %193, 0
  br i1 %194, label %198, label %195

195:                                              ; preds = %191
  %196 = call zeroext i8 @is_gimple_min_invariant(ptr noundef %174) #18
  %197 = icmp eq i8 %196, 0
  br i1 %197, label %198, label %199

198:                                              ; preds = %75, %191, %195, %150
  br label %199

199:                                              ; preds = %195, %198
  %200 = phi ptr [ null, %198 ], [ %174, %195 ]
  ret ptr %200
}

declare ptr @vec_heap_p_reserve(ptr noundef, i32 noundef) local_unnamed_addr #3

declare ptr @vec_heap_o_reserve(ptr noundef, i32 noundef, i64 noundef, i64 noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc void @search_for_addr_array(ptr noundef %0, i32 noundef %1) unnamed_addr #9 {
  br label %3

3:                                                ; preds = %64, %2
  %4 = phi ptr [ %0, %2 ], [ %65, %64 ]
  %5 = load i64, ptr %4, align 8
  %6 = trunc i64 %5 to i16
  switch i16 %6, label %78 [
    i16 141, label %7
    i16 121, label %66
  ]

7:                                                ; preds = %3
  %8 = getelementptr inbounds %struct.tree_ssa_name, ptr %4, i64 0, i32 2
  %9 = load ptr, ptr %8, align 8, !tbaa !16
  %10 = load i32, ptr %9, align 8
  %11 = and i32 %10, 255
  %12 = icmp eq i32 %11, 6
  br i1 %12, label %13, label %78

13:                                               ; preds = %7
  %14 = trunc i32 %10 to i8
  switch i8 %14, label %17 [
    i8 6, label %15
    i8 1, label %15
    i8 8, label %18
  ]

15:                                               ; preds = %13, %13
  %16 = lshr i32 %10, 16
  br label %18

17:                                               ; preds = %13
  tail call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1446, ptr noundef nonnull @.str.28) #18
  br label %18

18:                                               ; preds = %17, %15, %13
  %19 = phi i32 [ %16, %15 ], [ 0, %17 ], [ 59, %13 ]
  %20 = zext i32 %19 to i64
  %21 = getelementptr inbounds [0 x i8], ptr @gimple_rhs_class_table, i64 0, i64 %20
  %22 = load i8, ptr %21, align 1, !tbaa !16
  %23 = icmp eq i8 %22, 3
  br i1 %23, label %24, label %78

24:                                               ; preds = %18
  %25 = load i32, ptr %9, align 8
  %26 = and i32 %25, 255
  %27 = add nsw i32 %26, -1
  %28 = icmp ult i32 %27, 9
  tail call void @llvm.assume(i1 %28)
  %29 = zext i32 %26 to i64
  %30 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %29
  %31 = load i32, ptr %30, align 4, !tbaa !16
  %32 = zext i32 %31 to i64
  %33 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %32
  %34 = load i64, ptr %33, align 8, !tbaa !36
  %35 = icmp eq i64 %34, 0
  br i1 %35, label %36, label %37

36:                                               ; preds = %24
  tail call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1622, ptr noundef nonnull @.str.28) #18
  br label %37

37:                                               ; preds = %24, %36
  %38 = getelementptr inbounds i8, ptr %9, i64 %34
  %39 = getelementptr inbounds ptr, ptr %38, i64 1
  %40 = load ptr, ptr %39, align 8, !tbaa !5
  %41 = load i64, ptr %40, align 8
  %42 = and i64 %41, 65535
  %43 = getelementptr inbounds [0 x i8], ptr @gimple_rhs_class_table, i64 0, i64 %42
  %44 = load i8, ptr %43, align 1, !tbaa !16
  %45 = icmp eq i8 %44, 3
  br i1 %45, label %46, label %78

46:                                               ; preds = %37
  %47 = load i32, ptr %9, align 8
  %48 = and i32 %47, 255
  %49 = add nsw i32 %48, -10
  %50 = icmp ult i32 %49, -9
  br i1 %50, label %64, label %51

51:                                               ; preds = %46
  %52 = zext i32 %48 to i64
  %53 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %52
  %54 = load i32, ptr %53, align 4, !tbaa !16
  %55 = zext i32 %54 to i64
  %56 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %55
  %57 = load i64, ptr %56, align 8, !tbaa !36
  %58 = icmp eq i64 %57, 0
  br i1 %58, label %59, label %60

59:                                               ; preds = %51
  tail call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1622, ptr noundef nonnull @.str.28) #18
  br label %60

60:                                               ; preds = %59, %51
  %61 = getelementptr inbounds i8, ptr %9, i64 %57
  %62 = getelementptr inbounds ptr, ptr %61, i64 1
  %63 = load ptr, ptr %62, align 8, !tbaa !5
  br label %64

64:                                               ; preds = %60, %46
  %65 = phi ptr [ %63, %60 ], [ null, %46 ]
  br label %3

66:                                               ; preds = %3, %77
  %67 = phi i64 [ %75, %77 ], [ %5, %3 ]
  %68 = phi ptr [ %74, %77 ], [ %4, %3 ]
  %69 = and i64 %67, 65535
  %70 = icmp eq i64 %69, 45
  br i1 %70, label %71, label %72

71:                                               ; preds = %66
  tail call fastcc void @check_array_ref(i32 noundef %1, ptr noundef nonnull %68, i8 noundef zeroext 1)
  br label %72

72:                                               ; preds = %71, %66
  %73 = getelementptr inbounds %struct.tree_exp, ptr %68, i64 0, i32 3
  %74 = load ptr, ptr %73, align 8, !tbaa !16
  %75 = load i64, ptr %74, align 8
  %76 = trunc i64 %75 to i16
  switch i16 %76, label %78 [
    i16 42, label %77
    i16 41, label %77
    i16 45, label %77
    i16 46, label %77
    i16 118, label %77
    i16 43, label %77
    i16 44, label %77
  ]

77:                                               ; preds = %72, %72, %72, %72, %72, %72, %72
  br label %66, !llvm.loop !135

78:                                               ; preds = %18, %37, %7, %3, %72
  ret void
}

declare ptr @walk_gimple_op(ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define internal noalias ptr @check_array_bounds(ptr nocapture noundef readonly %0, ptr nocapture noundef writeonly %1, ptr nocapture noundef readonly %2) #9 {
  %4 = load ptr, ptr %0, align 8, !tbaa !5
  %5 = load i64, ptr %4, align 8
  %6 = and i64 %5, 65535
  %7 = getelementptr inbounds [0 x i32], ptr @tree_code_type, i64 0, i64 %6
  %8 = load i32, ptr %7, align 4, !tbaa !16
  %9 = add i32 %8, -4
  %10 = icmp ult i32 %9, 7
  br i1 %10, label %11, label %15

11:                                               ; preds = %3
  %12 = getelementptr inbounds %struct.tree_exp, ptr %4, i64 0, i32 1
  %13 = load i32, ptr %12, align 8, !tbaa !16
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %15, label %19

15:                                               ; preds = %3, %11
  %16 = getelementptr inbounds %struct.walk_stmt_info, ptr %2, i64 0, i32 1
  %17 = load ptr, ptr %16, align 8, !tbaa !137
  %18 = load i32, ptr %17, align 4, !tbaa !20
  br label %19

19:                                               ; preds = %11, %15
  %20 = phi i32 [ %18, %15 ], [ %13, %11 ]
  store i32 1, ptr %1, align 4, !tbaa !20
  %21 = load i64, ptr %4, align 8
  %22 = and i64 %21, 65535
  %23 = icmp eq i64 %22, 45
  br i1 %23, label %24, label %26

24:                                               ; preds = %19
  tail call fastcc void @check_array_ref(i32 noundef %20, ptr noundef nonnull %4, i8 noundef zeroext 0)
  %25 = load i64, ptr %4, align 8
  br label %26

26:                                               ; preds = %24, %19
  %27 = phi i64 [ %25, %24 ], [ %21, %19 ]
  %28 = trunc i64 %27 to i16
  switch i16 %28, label %39 [
    i16 47, label %29
    i16 135, label %32
  ]

29:                                               ; preds = %26
  %30 = getelementptr inbounds %struct.tree_exp, ptr %4, i64 0, i32 3
  %31 = load ptr, ptr %30, align 8, !tbaa !16
  br label %36

32:                                               ; preds = %26
  %33 = getelementptr inbounds %struct.tree_exp, ptr %4, i64 0, i32 3
  %34 = load ptr, ptr %33, align 8, !tbaa !16
  %35 = icmp eq ptr %34, null
  br i1 %35, label %39, label %36

36:                                               ; preds = %29, %32
  %37 = phi ptr [ %31, %29 ], [ %34, %32 ]
  tail call fastcc void @search_for_addr_array(ptr noundef %37, i32 noundef %20)
  %38 = load i64, ptr %4, align 8
  br label %39

39:                                               ; preds = %26, %36, %32
  %40 = phi i64 [ %27, %26 ], [ %38, %36 ], [ %27, %32 ]
  %41 = and i64 %40, 65535
  %42 = icmp eq i64 %41, 121
  br i1 %42, label %43, label %44

43:                                               ; preds = %39
  store i32 0, ptr %1, align 4, !tbaa !20
  br label %44

44:                                               ; preds = %43, %39
  ret ptr null
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc void @check_array_ref(i32 noundef %0, ptr noundef %1, i8 noundef zeroext %2) unnamed_addr #9 {
  %4 = tail call ptr @array_ref_up_bound(ptr noundef %1) #18
  %5 = getelementptr inbounds %struct.tree_exp, ptr %1, i64 1
  %6 = load ptr, ptr %5, align 8, !tbaa !16
  %7 = icmp eq ptr %4, null
  br i1 %7, label %97, label %8

8:                                                ; preds = %3
  %9 = load i64, ptr %1, align 8
  %10 = and i64 %9, 8388608
  %11 = icmp eq i64 %10, 0
  br i1 %11, label %12, label %97

12:                                               ; preds = %8
  %13 = load i64, ptr %4, align 8
  %14 = and i64 %13, 65535
  %15 = icmp eq i64 %14, 23
  br i1 %15, label %16, label %97

16:                                               ; preds = %12
  %17 = getelementptr inbounds %struct.tree_common, ptr %1, i64 0, i32 2
  %18 = load ptr, ptr %17, align 8, !tbaa !16
  %19 = getelementptr inbounds %struct.tree_type, ptr %18, i64 0, i32 2
  %20 = load ptr, ptr %19, align 8, !tbaa !16
  %21 = icmp eq ptr %20, null
  br i1 %21, label %22, label %30

22:                                               ; preds = %16
  %23 = getelementptr inbounds %struct.tree_type, ptr %18, i64 0, i32 1
  %24 = load ptr, ptr %23, align 8, !tbaa !16
  %25 = icmp eq ptr %24, null
  br i1 %25, label %30, label %26

26:                                               ; preds = %22
  %27 = getelementptr inbounds %struct.tree_type, ptr %24, i64 0, i32 14
  %28 = load ptr, ptr %27, align 8, !tbaa !16
  %29 = icmp eq ptr %28, null
  br i1 %29, label %97, label %30

30:                                               ; preds = %26, %22, %16
  %31 = tail call i32 @compare_tree_int(ptr noundef nonnull %4, i64 noundef 1) #18
  %32 = icmp slt i32 %31, 1
  br i1 %32, label %97, label %33

33:                                               ; preds = %30
  %34 = tail call ptr @array_ref_low_bound(ptr noundef nonnull %1) #18
  %35 = load i64, ptr %6, align 8
  %36 = and i64 %35, 65535
  %37 = icmp eq i64 %36, 141
  br i1 %37, label %38, label %66

38:                                               ; preds = %33
  %39 = tail call fastcc ptr @get_value_range(ptr noundef nonnull %6)
  %40 = load i32, ptr %39, align 8, !tbaa !23
  %41 = add i32 %40, -1
  %42 = icmp ult i32 %41, 2
  br i1 %42, label %43, label %66

43:                                               ; preds = %38
  %44 = icmp eq i32 %40, 1
  %45 = getelementptr inbounds %struct.value_range_d, ptr %39, i64 0, i32 2
  %46 = getelementptr inbounds %struct.value_range_d, ptr %39, i64 0, i32 1
  %47 = select i1 %44, ptr %45, ptr %46
  %48 = load ptr, ptr %47, align 8, !tbaa !5
  %49 = select i1 %44, ptr %46, ptr %45
  %50 = load ptr, ptr %49, align 8, !tbaa !5
  %51 = icmp eq i32 %40, 2
  br i1 %51, label %52, label %66

52:                                               ; preds = %43
  %53 = load i64, ptr %50, align 8
  %54 = and i64 %53, 65535
  %55 = icmp eq i64 %54, 23
  br i1 %55, label %56, label %97

56:                                               ; preds = %52
  %57 = tail call i32 @tree_int_cst_lt(ptr noundef nonnull %4, ptr noundef nonnull %50) #18
  %58 = icmp eq i32 %57, 0
  br i1 %58, label %97, label %59

59:                                               ; preds = %56
  %60 = load i64, ptr %48, align 8
  %61 = and i64 %60, 65535
  %62 = icmp eq i64 %61, 23
  br i1 %62, label %63, label %97

63:                                               ; preds = %59
  %64 = tail call i32 @tree_int_cst_lt(ptr noundef nonnull %48, ptr noundef %34) #18
  %65 = icmp eq i32 %64, 0
  br i1 %65, label %97, label %92

66:                                               ; preds = %38, %33, %43
  %67 = phi ptr [ %48, %43 ], [ %6, %33 ], [ %6, %38 ]
  %68 = phi ptr [ %50, %43 ], [ %6, %33 ], [ %6, %38 ]
  %69 = load i64, ptr %68, align 8
  %70 = and i64 %69, 65535
  %71 = icmp eq i64 %70, 23
  br i1 %71, label %72, label %85

72:                                               ; preds = %66
  %73 = tail call i32 @tree_int_cst_lt(ptr noundef nonnull %4, ptr noundef nonnull %68) #18
  %74 = icmp eq i32 %73, 0
  br i1 %74, label %85, label %75

75:                                               ; preds = %72
  %76 = tail call i32 @tree_int_cst_equal(ptr noundef nonnull %4, ptr noundef nonnull %68) #18
  %77 = icmp eq i32 %76, 0
  br i1 %77, label %78, label %85

78:                                               ; preds = %75
  %79 = icmp eq i8 %2, 0
  br i1 %79, label %92, label %80

80:                                               ; preds = %78
  %81 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 14), align 16, !tbaa !5
  %82 = tail call ptr @int_const_binop(i32 noundef 63, ptr noundef nonnull %4, ptr noundef %81, i32 noundef 0) #18
  %83 = tail call i32 @tree_int_cst_equal(ptr noundef %82, ptr noundef nonnull %68) #18
  %84 = icmp eq i32 %83, 0
  br i1 %84, label %92, label %85

85:                                               ; preds = %80, %75, %72, %66
  %86 = load i64, ptr %67, align 8
  %87 = and i64 %86, 65535
  %88 = icmp eq i64 %87, 23
  br i1 %88, label %89, label %97

89:                                               ; preds = %85
  %90 = tail call i32 @tree_int_cst_lt(ptr noundef nonnull %67, ptr noundef %34) #18
  %91 = icmp eq i32 %90, 0
  br i1 %91, label %97, label %92

92:                                               ; preds = %89, %78, %80, %63
  %93 = phi ptr [ @.str.68, %63 ], [ @.str.69, %80 ], [ @.str.69, %78 ], [ @.str.70, %89 ]
  %94 = tail call zeroext i8 (i32, i32, ptr, ...) @warning_at(i32 noundef %0, i32 noundef 41, ptr noundef nonnull %93) #18
  %95 = load i64, ptr %1, align 8
  %96 = or i64 %95, 8388608
  store i64 %96, ptr %1, align 8
  br label %97

97:                                               ; preds = %92, %63, %59, %56, %52, %85, %89, %3, %8, %12, %26, %30
  ret void
}

declare ptr @array_ref_up_bound(ptr noundef) local_unnamed_addr #3

declare ptr @array_ref_low_bound(ptr noundef) local_unnamed_addr #3

declare i32 @tree_int_cst_equal(ptr noundef, ptr noundef) local_unnamed_addr #3

declare zeroext i8 @mark_dfs_back_edges() local_unnamed_addr #3

declare ptr @gimple_build_cond(i32 noundef, ptr noundef, ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

declare zeroext i8 @potentially_threadable_block(ptr noundef) local_unnamed_addr #3

declare void @thread_across_edge(ptr noundef, ptr noundef, i8 noundef zeroext, ptr noundef, ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define internal ptr @simplify_stmt_for_jump_threading(ptr nocapture noundef readonly %0, ptr nocapture noundef readonly %1) #9 {
  %3 = load i32, ptr %0, align 8
  %4 = and i32 %3, 255
  %5 = icmp eq i32 %4, 1
  br i1 %5, label %6, label %42

6:                                                ; preds = %2
  %7 = lshr i32 %3, 16
  %8 = load i32, ptr getelementptr inbounds ([0 x i32], ptr @gss_for_code_, i64 0, i64 1), align 4, !tbaa !16
  %9 = zext i32 %8 to i64
  %10 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %9
  %11 = load i64, ptr %10, align 8, !tbaa !36
  %12 = icmp eq i64 %11, 0
  br i1 %12, label %16, label %13

13:                                               ; preds = %6
  %14 = getelementptr inbounds i8, ptr %0, i64 %11
  %15 = load ptr, ptr %14, align 8, !tbaa !5
  br label %23

16:                                               ; preds = %6
  tail call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1622, ptr noundef nonnull @.str.28) #18
  %17 = load i32, ptr %0, align 8
  %18 = and i32 %17, 255
  %19 = getelementptr inbounds i8, ptr %0, i64 %11
  %20 = load ptr, ptr %19, align 8, !tbaa !5
  %21 = add nsw i32 %18, -10
  %22 = icmp ult i32 %21, -9
  br i1 %22, label %38, label %23

23:                                               ; preds = %13, %16
  %24 = phi ptr [ %15, %13 ], [ %20, %16 ]
  %25 = phi i32 [ 1, %13 ], [ %18, %16 ]
  %26 = zext i32 %25 to i64
  %27 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %26
  %28 = load i32, ptr %27, align 4, !tbaa !16
  %29 = zext i32 %28 to i64
  %30 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %29
  %31 = load i64, ptr %30, align 8, !tbaa !36
  %32 = icmp eq i64 %31, 0
  br i1 %32, label %33, label %34

33:                                               ; preds = %23
  tail call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 1622, ptr noundef nonnull @.str.28) #18
  br label %34

34:                                               ; preds = %33, %23
  %35 = getelementptr inbounds i8, ptr %0, i64 %31
  %36 = getelementptr inbounds ptr, ptr %35, i64 1
  %37 = load ptr, ptr %36, align 8, !tbaa !5
  br label %38

38:                                               ; preds = %16, %34
  %39 = phi ptr [ %24, %34 ], [ %20, %16 ]
  %40 = phi ptr [ %37, %34 ], [ null, %16 ]
  %41 = tail call fastcc ptr @vrp_evaluate_conditional(i32 noundef %7, ptr noundef %39, ptr noundef %40, ptr noundef %1)
  br label %42

42:                                               ; preds = %2, %38
  %43 = phi ptr [ %41, %38 ], [ null, %2 ]
  ret ptr %43
}

declare ptr @fold(ptr noundef) local_unnamed_addr #3

declare void @gsi_remove(ptr noundef, i8 noundef zeroext) local_unnamed_addr #3

declare void @release_defs(ptr noundef) local_unnamed_addr #3

; Function Attrs: inlinehint nounwind sspstrong uwtable
define internal fastcc void @link_use_stmts_after(ptr noundef %0, ptr noundef %1) unnamed_addr #2 {
  %3 = getelementptr inbounds %struct.ssa_use_operand_d, ptr %0, i64 0, i32 2
  %4 = load ptr, ptr %3, align 8, !tbaa !16
  %5 = getelementptr i8, ptr %0, i64 24
  %6 = load ptr, ptr %5, align 8, !tbaa !78
  %7 = load ptr, ptr %6, align 8, !tbaa !5
  %8 = tail call zeroext i8 @is_gimple_reg(ptr noundef %7) #18
  %9 = icmp eq i8 %8, 0
  %10 = load i32, ptr %4, align 8
  %11 = and i32 %10, 255
  %12 = icmp eq i32 %11, 16
  br i1 %12, label %13, label %64

13:                                               ; preds = %2
  %14 = getelementptr i8, ptr %4, i64 40
  %15 = load ptr, ptr %14, align 8, !tbaa !16
  %16 = tail call zeroext i8 @is_gimple_reg(ptr noundef %15) #18
  %17 = icmp eq i8 %16, 0
  %18 = xor i1 %9, %17
  br i1 %18, label %152, label %19

19:                                               ; preds = %13
  %20 = getelementptr i8, ptr %4, i64 36
  %21 = load i32, ptr %20, align 4, !tbaa !16
  %22 = icmp sgt i32 %21, 0
  br i1 %22, label %23, label %152

23:                                               ; preds = %19
  %24 = getelementptr inbounds %struct.gimple_statement_phi, ptr %4, i64 0, i32 4, i64 0
  %25 = getelementptr inbounds %struct.gimple_statement_phi, ptr %4, i64 0, i32 1
  br label %26

26:                                               ; preds = %61, %23
  %27 = phi ptr [ %24, %23 ], [ %63, %61 ]
  %28 = phi ptr [ %0, %23 ], [ %54, %61 ]
  %29 = phi i32 [ 1, %23 ], [ %57, %61 ]
  %30 = getelementptr i8, ptr %27, i64 24
  %31 = load ptr, ptr %30, align 8, !tbaa !78
  %32 = load ptr, ptr %31, align 8, !tbaa !5
  %33 = icmp ne ptr %32, %7
  %34 = icmp eq ptr %27, %0
  %35 = or i1 %33, %34
  br i1 %35, label %53, label %36

36:                                               ; preds = %26
  %37 = getelementptr inbounds %struct.ssa_use_operand_d, ptr %28, i64 0, i32 1
  %38 = load ptr, ptr %37, align 8, !tbaa !96
  %39 = icmp eq ptr %38, %27
  br i1 %39, label %53, label %40

40:                                               ; preds = %36
  %41 = load ptr, ptr %27, align 8, !tbaa !158
  %42 = icmp eq ptr %41, null
  br i1 %42, label %49, label %43

43:                                               ; preds = %40
  %44 = getelementptr inbounds %struct.ssa_use_operand_d, ptr %27, i64 0, i32 1
  %45 = load ptr, ptr %44, align 8, !tbaa !96
  %46 = getelementptr inbounds %struct.ssa_use_operand_d, ptr %41, i64 0, i32 1
  store ptr %45, ptr %46, align 8, !tbaa !96
  %47 = load ptr, ptr %44, align 8, !tbaa !96
  store ptr %41, ptr %47, align 8, !tbaa !158
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %27, i8 0, i64 16, i1 false)
  %48 = load ptr, ptr %37, align 8, !tbaa !96
  br label %49

49:                                               ; preds = %43, %40
  %50 = phi ptr [ %38, %40 ], [ %48, %43 ]
  store ptr %28, ptr %27, align 8, !tbaa !158
  %51 = getelementptr inbounds %struct.ssa_use_operand_d, ptr %27, i64 0, i32 1
  store ptr %50, ptr %51, align 8, !tbaa !96
  %52 = load ptr, ptr %37, align 8, !tbaa !96
  store ptr %27, ptr %52, align 8, !tbaa !158
  store ptr %27, ptr %37, align 8, !tbaa !96
  br label %53

53:                                               ; preds = %26, %36, %49
  %54 = phi ptr [ %28, %26 ], [ %27, %49 ], [ %27, %36 ]
  %55 = icmp slt i32 %29, %21
  br i1 %55, label %56, label %152

56:                                               ; preds = %53
  %57 = add nuw nsw i32 %29, 1
  %58 = load i32, ptr %25, align 8, !tbaa !16
  %59 = icmp ult i32 %58, %29
  br i1 %59, label %60, label %61

60:                                               ; preds = %56
  tail call void @fancy_abort(ptr noundef nonnull @.str.31, i32 noundef 3103, ptr noundef nonnull @.str.28) #18
  br label %61

61:                                               ; preds = %56, %60
  %62 = zext i32 %29 to i64
  %63 = getelementptr inbounds %struct.gimple_statement_phi, ptr %4, i64 0, i32 4, i64 %62
  br label %26

64:                                               ; preds = %2
  br i1 %9, label %116, label %65

65:                                               ; preds = %64
  %66 = add nsw i32 %11, -10
  %67 = icmp ult i32 %66, -9
  br i1 %67, label %152, label %68

68:                                               ; preds = %65
  %69 = getelementptr inbounds %struct.gimple_statement_with_ops_base, ptr %4, i64 0, i32 2
  %70 = load ptr, ptr %69, align 8, !tbaa !16
  %71 = icmp eq ptr %70, null
  br i1 %71, label %152, label %72

72:                                               ; preds = %68
  %73 = and i32 %10, 254
  %74 = add nsw i32 %73, -10
  %75 = icmp ult i32 %74, -4
  br i1 %75, label %83, label %76

76:                                               ; preds = %72
  %77 = getelementptr inbounds %struct.gimple_statement_with_memory_ops_base, ptr %4, i64 0, i32 2
  %78 = load ptr, ptr %77, align 8, !tbaa !16
  %79 = icmp eq ptr %78, null
  br i1 %79, label %83, label %80

80:                                               ; preds = %76
  %81 = load ptr, ptr %70, align 8, !tbaa !73
  %82 = icmp eq ptr %81, null
  br i1 %82, label %152, label %83

83:                                               ; preds = %72, %76, %80
  %84 = phi ptr [ %70, %72 ], [ %70, %76 ], [ %81, %80 ]
  br label %85

85:                                               ; preds = %83, %113
  %86 = phi ptr [ %89, %113 ], [ %84, %83 ]
  %87 = phi ptr [ %114, %113 ], [ %0, %83 ]
  %88 = getelementptr inbounds %struct.use_optype_d, ptr %86, i64 0, i32 1
  %89 = load ptr, ptr %86, align 8, !tbaa !73
  %90 = getelementptr %struct.use_optype_d, ptr %86, i64 0, i32 1, i32 3
  %91 = load ptr, ptr %90, align 8, !tbaa !78
  %92 = load ptr, ptr %91, align 8, !tbaa !5
  %93 = icmp ne ptr %92, %7
  %94 = icmp eq ptr %88, %0
  %95 = or i1 %93, %94
  br i1 %95, label %113, label %96

96:                                               ; preds = %85
  %97 = getelementptr inbounds %struct.ssa_use_operand_d, ptr %87, i64 0, i32 1
  %98 = load ptr, ptr %97, align 8, !tbaa !96
  %99 = icmp eq ptr %98, %88
  br i1 %99, label %113, label %100

100:                                              ; preds = %96
  %101 = load ptr, ptr %88, align 8, !tbaa !158
  %102 = icmp eq ptr %101, null
  br i1 %102, label %109, label %103

103:                                              ; preds = %100
  %104 = getelementptr inbounds %struct.use_optype_d, ptr %86, i64 0, i32 1, i32 1
  %105 = load ptr, ptr %104, align 8, !tbaa !96
  %106 = getelementptr inbounds %struct.ssa_use_operand_d, ptr %101, i64 0, i32 1
  store ptr %105, ptr %106, align 8, !tbaa !96
  %107 = load ptr, ptr %104, align 8, !tbaa !96
  store ptr %101, ptr %107, align 8, !tbaa !158
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %88, i8 0, i64 16, i1 false)
  %108 = load ptr, ptr %97, align 8, !tbaa !96
  br label %109

109:                                              ; preds = %103, %100
  %110 = phi ptr [ %98, %100 ], [ %108, %103 ]
  store ptr %87, ptr %88, align 8, !tbaa !158
  %111 = getelementptr inbounds %struct.use_optype_d, ptr %86, i64 0, i32 1, i32 1
  store ptr %110, ptr %111, align 8, !tbaa !96
  %112 = load ptr, ptr %97, align 8, !tbaa !96
  store ptr %88, ptr %112, align 8, !tbaa !158
  store ptr %88, ptr %97, align 8, !tbaa !96
  br label %113

113:                                              ; preds = %109, %96, %85
  %114 = phi ptr [ %87, %85 ], [ %88, %109 ], [ %88, %96 ]
  %115 = icmp eq ptr %89, null
  br i1 %115, label %152, label %85, !llvm.loop !213

116:                                              ; preds = %64
  %117 = and i32 %10, 254
  %118 = add nsw i32 %117, -10
  %119 = icmp ult i32 %118, -4
  br i1 %119, label %152, label %120

120:                                              ; preds = %116
  %121 = getelementptr inbounds %struct.gimple_statement_with_ops_base, ptr %4, i64 0, i32 2
  %122 = load ptr, ptr %121, align 8, !tbaa !16
  %123 = icmp eq ptr %122, null
  br i1 %123, label %152, label %124

124:                                              ; preds = %120
  %125 = getelementptr %struct.use_optype_d, ptr %122, i64 0, i32 1, i32 3
  %126 = load ptr, ptr %125, align 8, !tbaa !78
  %127 = getelementptr inbounds %struct.gimple_statement_with_memory_ops_base, ptr %4, i64 0, i32 2
  %128 = icmp eq ptr %126, %127
  %129 = getelementptr inbounds %struct.use_optype_d, ptr %122, i64 0, i32 1
  br i1 %128, label %130, label %152

130:                                              ; preds = %124
  %131 = load ptr, ptr %127, align 8, !tbaa !5
  %132 = icmp ne ptr %131, %7
  %133 = icmp eq ptr %129, %0
  %134 = select i1 %132, i1 true, i1 %133
  br i1 %134, label %152, label %135

135:                                              ; preds = %130
  %136 = getelementptr inbounds %struct.ssa_use_operand_d, ptr %0, i64 0, i32 1
  %137 = load ptr, ptr %136, align 8, !tbaa !96
  %138 = icmp eq ptr %137, %129
  br i1 %138, label %152, label %139

139:                                              ; preds = %135
  %140 = load ptr, ptr %129, align 8, !tbaa !158
  %141 = icmp eq ptr %140, null
  br i1 %141, label %148, label %142

142:                                              ; preds = %139
  %143 = getelementptr inbounds %struct.use_optype_d, ptr %122, i64 0, i32 1, i32 1
  %144 = load ptr, ptr %143, align 8, !tbaa !96
  %145 = getelementptr inbounds %struct.ssa_use_operand_d, ptr %140, i64 0, i32 1
  store ptr %144, ptr %145, align 8, !tbaa !96
  %146 = load ptr, ptr %143, align 8, !tbaa !96
  store ptr %140, ptr %146, align 8, !tbaa !158
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %129, i8 0, i64 16, i1 false)
  %147 = load ptr, ptr %136, align 8, !tbaa !96
  br label %148

148:                                              ; preds = %142, %139
  %149 = phi ptr [ %137, %139 ], [ %147, %142 ]
  store ptr %0, ptr %129, align 8, !tbaa !158
  %150 = getelementptr inbounds %struct.use_optype_d, ptr %122, i64 0, i32 1, i32 1
  store ptr %149, ptr %150, align 8, !tbaa !96
  %151 = load ptr, ptr %136, align 8, !tbaa !96
  store ptr %129, ptr %151, align 8, !tbaa !158
  store ptr %129, ptr %136, align 8, !tbaa !96
  br label %152

152:                                              ; preds = %113, %53, %68, %65, %80, %19, %13, %124, %120, %116, %148, %135, %130
  %153 = phi ptr [ %0, %130 ], [ %129, %148 ], [ %129, %135 ], [ %0, %116 ], [ %0, %120 ], [ %0, %124 ], [ %0, %13 ], [ %0, %19 ], [ %0, %80 ], [ %0, %65 ], [ %0, %68 ], [ %54, %53 ], [ %114, %113 ]
  %154 = getelementptr inbounds %struct.immediate_use_iterator_d, ptr %1, i64 0, i32 2
  %155 = load ptr, ptr %154, align 8, !tbaa !158
  %156 = icmp eq ptr %155, null
  br i1 %156, label %163, label %157

157:                                              ; preds = %152
  %158 = getelementptr inbounds %struct.immediate_use_iterator_d, ptr %1, i64 0, i32 2, i32 1
  %159 = load ptr, ptr %158, align 8, !tbaa !96
  %160 = getelementptr inbounds %struct.ssa_use_operand_d, ptr %155, i64 0, i32 1
  store ptr %159, ptr %160, align 8, !tbaa !96
  %161 = load ptr, ptr %158, align 8, !tbaa !96
  store ptr %155, ptr %161, align 8, !tbaa !158
  %162 = getelementptr inbounds %struct.immediate_use_iterator_d, ptr %1, i64 0, i32 2, i32 1
  store i64 0, ptr %162, align 8
  br label %163

163:                                              ; preds = %157, %152
  store ptr %153, ptr %154, align 8, !tbaa !158
  %164 = getelementptr inbounds %struct.ssa_use_operand_d, ptr %153, i64 0, i32 1
  %165 = load ptr, ptr %164, align 8, !tbaa !96
  %166 = getelementptr inbounds %struct.immediate_use_iterator_d, ptr %1, i64 0, i32 2, i32 1
  store ptr %165, ptr %166, align 8, !tbaa !96
  %167 = load ptr, ptr %164, align 8, !tbaa !96
  store ptr %154, ptr %167, align 8, !tbaa !158
  store ptr %154, ptr %164, align 8, !tbaa !96
  ret void
}

declare zeroext i8 @thread_through_all_blocks(i8 noundef zeroext) local_unnamed_addr #3

; Function Attrs: nofree nounwind
declare noundef i64 @fwrite(ptr nocapture noundef, i64 noundef, i64 noundef, ptr nocapture noundef) local_unnamed_addr #15

; Function Attrs: nofree nounwind
declare noundef i32 @fputc(i32 noundef, ptr nocapture noundef) local_unnamed_addr #15

; Function Attrs: nocallback nofree nosync nounwind willreturn memory(inaccessiblemem: readwrite)
declare void @llvm.assume(i1 noundef) #16

; Function Attrs: nocallback nofree nosync nounwind willreturn memory(inaccessiblemem: readwrite)
declare void @llvm.experimental.noalias.scope.decl(metadata) #16

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #17

attributes #0 = { inlinehint nofree nounwind sspstrong uwtable "approx-func-fp-math"="true" "denormal-fp-math"="preserve-sign,preserve-sign" "min-legal-vector-width"="0" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cmov,+crc32,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" "unsafe-fp-math"="true" }
attributes #1 = { nofree nounwind "approx-func-fp-math"="true" "denormal-fp-math"="preserve-sign,preserve-sign" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cmov,+crc32,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" "unsafe-fp-math"="true" }
attributes #2 = { inlinehint nounwind sspstrong uwtable "approx-func-fp-math"="true" "denormal-fp-math"="preserve-sign,preserve-sign" "min-legal-vector-width"="0" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cmov,+crc32,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" "unsafe-fp-math"="true" }
attributes #3 = { "approx-func-fp-math"="true" "denormal-fp-math"="preserve-sign,preserve-sign" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cmov,+crc32,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" "unsafe-fp-math"="true" }
attributes #4 = { inlinehint mustprogress nofree norecurse nosync nounwind sspstrong willreturn memory(argmem: read) uwtable "approx-func-fp-math"="true" "denormal-fp-math"="preserve-sign,preserve-sign" "min-legal-vector-width"="0" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cmov,+crc32,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" "unsafe-fp-math"="true" }
attributes #5 = { inlinehint mustprogress nofree nounwind sspstrong willreturn memory(read) uwtable "approx-func-fp-math"="true" "denormal-fp-math"="preserve-sign,preserve-sign" "min-legal-vector-width"="0" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cmov,+crc32,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" "unsafe-fp-math"="true" }
attributes #6 = { mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: readwrite) }
attributes #7 = { inlinehint mustprogress nofree nounwind sspstrong willreturn uwtable "approx-func-fp-math"="true" "denormal-fp-math"="preserve-sign,preserve-sign" "min-legal-vector-width"="0" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cmov,+crc32,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" "unsafe-fp-math"="true" }
attributes #8 = { mustprogress nofree nounwind willreturn "approx-func-fp-math"="true" "denormal-fp-math"="preserve-sign,preserve-sign" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cmov,+crc32,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" "unsafe-fp-math"="true" }
attributes #9 = { nounwind sspstrong uwtable "approx-func-fp-math"="true" "denormal-fp-math"="preserve-sign,preserve-sign" "min-legal-vector-width"="0" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cmov,+crc32,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" "unsafe-fp-math"="true" }
attributes #10 = { mustprogress nofree norecurse nosync nounwind sspstrong willreturn memory(read, argmem: none, inaccessiblemem: none) uwtable "approx-func-fp-math"="true" "denormal-fp-math"="preserve-sign,preserve-sign" "min-legal-vector-width"="0" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cmov,+crc32,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" "unsafe-fp-math"="true" }
attributes #11 = { mustprogress nounwind willreturn allockind("free") memory(argmem: readwrite, inaccessiblemem: readwrite) "alloc-family"="malloc" "approx-func-fp-math"="true" "denormal-fp-math"="preserve-sign,preserve-sign" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cmov,+crc32,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" "unsafe-fp-math"="true" }
attributes #12 = { mustprogress nocallback nofree nounwind willreturn memory(argmem: readwrite) }
attributes #13 = { mustprogress nocallback nofree nounwind willreturn memory(argmem: write) }
attributes #14 = { inlinehint mustprogress nofree norecurse nosync nounwind sspstrong willreturn memory(read, inaccessiblemem: none) uwtable "approx-func-fp-math"="true" "denormal-fp-math"="preserve-sign,preserve-sign" "min-legal-vector-width"="0" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cmov,+crc32,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" "unsafe-fp-math"="true" }
attributes #15 = { nofree nounwind }
attributes #16 = { nocallback nofree nosync nounwind willreturn memory(inaccessiblemem: readwrite) }
attributes #17 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #18 = { nounwind }

!llvm.module.flags = !{!0, !1, !2, !3}
!llvm.ident = !{!4}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 8, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{i32 7, !"uwtable", i32 2}
!4 = !{!"clang version 17.0.6"}
!5 = !{!6, !6, i64 0}
!6 = !{!"any pointer", !7, i64 0}
!7 = !{!"omnipotent char", !8, i64 0}
!8 = !{!"Simple C/C++ TBAA"}
!9 = !{!10, !6, i64 8}
!10 = !{!"_IO_FILE", !11, i64 0, !6, i64 8, !6, i64 16, !6, i64 24, !6, i64 32, !6, i64 40, !6, i64 48, !6, i64 56, !6, i64 64, !6, i64 72, !6, i64 80, !6, i64 88, !6, i64 96, !6, i64 104, !11, i64 112, !11, i64 116, !12, i64 120, !13, i64 128, !7, i64 130, !7, i64 131, !6, i64 136, !12, i64 144, !6, i64 152, !6, i64 160, !6, i64 168, !6, i64 176, !12, i64 184, !11, i64 192, !7, i64 196}
!11 = !{!"int", !7, i64 0}
!12 = !{!"long", !7, i64 0}
!13 = !{!"short", !7, i64 0}
!14 = !{!10, !6, i64 16}
!15 = !{!"branch_weights", i32 2000, i32 1}
!16 = !{!7, !7, i64 0}
!17 = !{!10, !6, i64 40}
!18 = !{!10, !6, i64 48}
!19 = !{!10, !11, i64 0}
!20 = !{!11, !11, i64 0}
!21 = distinct !{!21, !22}
!22 = !{!"llvm.loop.mustprogress"}
!23 = !{!24, !7, i64 0}
!24 = !{!"value_range_d", !7, i64 0, !6, i64 8, !6, i64 16, !6, i64 24}
!25 = !{!24, !6, i64 8}
!26 = !{!24, !6, i64 24}
!27 = !{!28, !6, i64 56}
!28 = !{!"function", !6, i64 0, !6, i64 8, !6, i64 16, !6, i64 24, !6, i64 32, !6, i64 40, !6, i64 48, !6, i64 56, !6, i64 64, !6, i64 72, !6, i64 80, !6, i64 88, !6, i64 96, !11, i64 104, !11, i64 108, !11, i64 112, !11, i64 116, !11, i64 120, !11, i64 124, !6, i64 128, !11, i64 136, !11, i64 137, !11, i64 138, !11, i64 138, !11, i64 138, !11, i64 138, !11, i64 138, !11, i64 138, !11, i64 138, !11, i64 139, !11, i64 139, !11, i64 139, !11, i64 139, !11, i64 139, !11, i64 139, !11, i64 139}
!29 = distinct !{!29, !22}
!30 = distinct !{!30, !22}
!31 = !{!24, !6, i64 16}
!32 = !{!33, !6, i64 0}
!33 = !{!"bitmap_head_def", !6, i64 0, !6, i64 8, !11, i64 16, !6, i64 24}
!34 = !{!35, !11, i64 16}
!35 = !{!"bitmap_element_def", !6, i64 0, !6, i64 8, !11, i64 16, !7, i64 24}
!36 = !{!12, !12, i64 0}
!37 = distinct !{!37, !22}
!38 = distinct !{!38, !22}
!39 = !{!35, !6, i64 0}
!40 = !{!28, !6, i64 24}
!41 = !{!42, !6, i64 16}
!42 = !{!"gimple_df", !6, i64 0, !6, i64 8, !6, i64 16, !6, i64 24, !43, i64 32, !43, i64 48, !6, i64 64, !6, i64 72, !6, i64 80, !6, i64 88, !11, i64 96, !44, i64 104}
!43 = !{!"pt_solution", !11, i64 0, !11, i64 0, !11, i64 0, !11, i64 0, !11, i64 0, !11, i64 0, !6, i64 8}
!44 = !{!"ssa_operands", !6, i64 0, !11, i64 8, !11, i64 12, !7, i64 16, !6, i64 24, !6, i64 32}
!45 = distinct !{!45, !22}
!46 = !{!47, !11, i64 0}
!47 = !{!"VEC_tree_base", !11, i64 0, !11, i64 4, !7, i64 8}
!48 = distinct !{!48, !22}
!49 = !{!50, !6, i64 0}
!50 = !{!"", !6, i64 0, !6, i64 8, !6, i64 16}
!51 = !{!52, !6, i64 0}
!52 = !{!"gimple_seq_node_d", !6, i64 0, !6, i64 8, !6, i64 16}
!53 = !{!54, !6, i64 0}
!54 = !{!"assert_locus_d", !6, i64 0, !6, i64 8, !50, i64 16, !7, i64 40, !6, i64 48, !6, i64 56, !6, i64 64}
!55 = !{!56, !11, i64 80}
!56 = !{!"basic_block_def", !6, i64 0, !6, i64 8, !6, i64 16, !6, i64 24, !7, i64 32, !6, i64 48, !6, i64 56, !7, i64 64, !12, i64 72, !11, i64 80, !11, i64 84, !11, i64 88, !11, i64 92, !11, i64 96}
!57 = !{!54, !6, i64 8}
!58 = !{!59, !6, i64 0}
!59 = !{!"edge_def", !6, i64 0, !6, i64 8, !7, i64 16, !6, i64 24, !6, i64 32, !11, i64 40, !11, i64 44, !11, i64 48, !11, i64 52, !12, i64 56}
!60 = !{!59, !6, i64 8}
!61 = !{!54, !7, i64 40}
!62 = !{!54, !6, i64 48}
!63 = distinct !{!63, !22}
!64 = distinct !{!64, !22}
!65 = !{!28, !6, i64 8}
!66 = !{!67, !11, i64 32}
!67 = !{!"control_flow_graph", !6, i64 0, !6, i64 8, !6, i64 16, !11, i64 24, !11, i64 28, !11, i64 32, !6, i64 40, !7, i64 48, !7, i64 52, !7, i64 60, !11, i64 68, !11, i64 72}
!68 = distinct !{!68, !22}
!69 = distinct !{!69, !70}
!70 = !{!"llvm.loop.unroll.disable"}
!71 = distinct !{!71, !22}
!72 = !{!67, !6, i64 16}
!73 = !{!74, !6, i64 0}
!74 = !{!"use_optype_d", !6, i64 0, !75, i64 8}
!75 = !{!"ssa_use_operand_d", !6, i64 0, !6, i64 8, !7, i64 16, !6, i64 24}
!76 = !{!77, !11, i64 0}
!77 = !{!"VEC_edge_base", !11, i64 0, !11, i64 4, !7, i64 8}
!78 = !{!75, !6, i64 24}
!79 = !{i8 0, i8 2}
!80 = distinct !{!80, !22}
!81 = distinct !{!81, !22}
!82 = distinct !{!82, !22}
!83 = distinct !{!83, !22}
!84 = distinct !{!84, !22}
!85 = !{!56, !11, i64 96}
!86 = !{!87}
!87 = distinct !{!87, !88, !"gsi_start_bb: argument 0"}
!88 = distinct !{!88, !"gsi_start_bb"}
!89 = !{!90, !6, i64 0}
!90 = !{!"gimple_bb_info", !6, i64 0, !6, i64 8}
!91 = !{!92, !6, i64 0}
!92 = !{!"gimple_seq_d", !6, i64 0, !6, i64 8, !6, i64 16}
!93 = !{!94, !6, i64 0}
!94 = !{!"simple_bitmap_def", !6, i64 0, !11, i64 8, !11, i64 12, !7, i64 16}
!95 = !{!56, !6, i64 8}
!96 = !{!75, !6, i64 8}
!97 = !{!54, !6, i64 56}
!98 = !{!54, !6, i64 64}
!99 = distinct !{!99, !22}
!100 = !{i64 0, i64 8, !5, i64 8, i64 8, !5, i64 16, i64 8, !5}
!101 = !{i64 0, i64 8, !5, i64 8, i64 8, !5}
!102 = !{i64 0, i64 8, !5}
!103 = distinct !{!103, !22}
!104 = distinct !{!104, !22}
!105 = !{!52, !6, i64 16}
!106 = distinct !{!106, !22}
!107 = distinct !{!107, !22}
!108 = !{!59, !11, i64 48}
!109 = distinct !{!109, !22}
!110 = distinct !{!110, !22}
!111 = distinct !{!111, !22}
!112 = distinct !{!112, !22}
!113 = distinct !{!113, !22}
!114 = distinct !{!114, !22}
!115 = !{!67, !6, i64 0}
!116 = !{!56, !6, i64 56}
!117 = !{!67, !6, i64 8}
!118 = distinct !{!118, !22}
!119 = distinct !{!119, !22}
!120 = !{!121}
!121 = distinct !{!121, !122, !"gsi_start_bb: argument 0"}
!122 = distinct !{!122, !"gsi_start_bb"}
!123 = !{!124, !6, i64 0}
!124 = !{!"def_optype_d", !6, i64 0, !6, i64 8}
!125 = !{!124, !6, i64 8}
!126 = distinct !{!126, !22}
!127 = distinct !{!127, !22}
!128 = !{!129, !6, i64 8}
!129 = !{!"prop_value_d", !11, i64 0, !6, i64 8}
!130 = distinct !{!130, !22}
!131 = distinct !{!131, !22}
!132 = !{!133}
!133 = distinct !{!133, !134, !"gsi_start_bb: argument 0"}
!134 = distinct !{!134, !"gsi_start_bb"}
!135 = distinct !{!135, !22}
!136 = distinct !{!136, !22}
!137 = !{!138, !6, i64 24}
!138 = !{!"walk_stmt_info", !50, i64 0, !6, i64 24, !6, i64 32, !7, i64 40, !7, i64 41, !7, i64 42, !7, i64 43, !6, i64 48}
!139 = distinct !{!139, !22}
!140 = distinct !{!140, !22}
!141 = distinct !{!141, !70}
!142 = !{!143}
!143 = distinct !{!143, !144, !"gsi_last_bb: argument 0"}
!144 = distinct !{!144, !"gsi_last_bb"}
!145 = !{}
!146 = !{!92, !6, i64 8}
!147 = distinct !{!147, !22}
!148 = distinct !{!148, !22}
!149 = distinct !{!149, !22}
!150 = distinct !{!150, !22}
!151 = !{!152}
!152 = distinct !{!152, !153, !"gsi_start_bb: argument 0"}
!153 = distinct !{!153, !"gsi_start_bb"}
!154 = !{!155, !6, i64 8}
!155 = !{!"immediate_use_iterator_d", !6, i64 0, !6, i64 8, !75, i64 16, !6, i64 48}
!156 = !{!155, !6, i64 0}
!157 = !{!155, !6, i64 48}
!158 = !{!75, !6, i64 0}
!159 = distinct !{!159, !22}
!160 = distinct !{!160, !22}
!161 = distinct !{!161, !22}
!162 = !{!163, !11, i64 0}
!163 = !{!"VEC_switch_update_base", !11, i64 0, !11, i64 4, !7, i64 8}
!164 = !{!165, !6, i64 8}
!165 = !{!"", !6, i64 0, !6, i64 8}
!166 = !{!165, !6, i64 0}
!167 = distinct !{!167, !22}
!168 = distinct !{!168, !22}
!169 = distinct !{!169, !22}
!170 = distinct !{!170, !22}
!171 = distinct !{!171, !22}
!172 = distinct !{!172, !22}
!173 = !{!56, !6, i64 0}
!174 = !{i64 0, i64 4, !16, i64 8, i64 8, !5, i64 16, i64 8, !5, i64 24, i64 8, !5}
!175 = distinct !{!175, !22}
!176 = !{!28, !6, i64 32}
!177 = !{!56, !6, i64 24}
!178 = !{!179, !6, i64 8}
!179 = !{!"loop", !11, i64 0, !11, i64 4, !6, i64 8, !6, i64 16, !180, i64 24, !11, i64 32, !11, i64 36, !6, i64 40, !6, i64 48, !6, i64 56, !6, i64 64, !6, i64 72, !181, i64 80, !181, i64 96, !7, i64 112, !7, i64 113, !7, i64 116, !6, i64 120, !6, i64 128, !7, i64 136, !6, i64 144}
!180 = !{!"lpt_decision", !7, i64 0, !11, i64 4}
!181 = !{!"", !12, i64 0, !12, i64 8}
!182 = !{!179, !11, i64 0}
!183 = !{!184, !6, i64 8}
!184 = !{!"loops", !11, i64 0, !6, i64 8, !6, i64 16, !6, i64 24}
!185 = !{i32 0, i32 65536}
!186 = !{!187}
!187 = distinct !{!187, !188, !"get_vr_for_comparison: argument 0"}
!188 = distinct !{!188, !"get_vr_for_comparison"}
!189 = !{!190}
!190 = distinct !{!190, !191, !"get_vr_for_comparison: argument 0"}
!191 = distinct !{!191, !"get_vr_for_comparison"}
!192 = distinct !{!192, !22}
!193 = distinct !{!193, !22}
!194 = !{!195}
!195 = distinct !{!195, !196, !"get_vr_for_comparison: argument 0"}
!196 = distinct !{!196, !"get_vr_for_comparison"}
!197 = !{i64 4, i64 8, !5, i64 12, i64 8, !5, i64 20, i64 8, !5}
!198 = !{!199}
!199 = distinct !{!199, !200, !"get_vr_for_comparison: argument 0"}
!200 = distinct !{!200, !"get_vr_for_comparison"}
!201 = distinct !{!201, !22}
!202 = distinct !{!202, !22}
!203 = distinct !{!203, !22}
!204 = !{!179, !6, i64 40}
!205 = !{!206, !11, i64 0}
!206 = !{!"VEC_loop_p_base", !11, i64 0, !11, i64 4, !7, i64 8}
!207 = distinct !{!207, !22}
!208 = !{!59, !6, i64 24}
!209 = distinct !{!209, !22}
!210 = !{!77, !11, i64 4}
!211 = distinct !{!211, !22}
!212 = !{!163, !11, i64 4}
!213 = distinct !{!213, !22}
