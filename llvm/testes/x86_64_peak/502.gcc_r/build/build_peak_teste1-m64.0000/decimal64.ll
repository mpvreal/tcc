; ModuleID = 'decimal64.c'
source_filename = "decimal64.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%struct.decNumber = type { i32, i32, i8, [6 x i16] }
%struct.decContext = type { i32, i32, i32, i32, i32, i32, i8 }
%struct.decimal64 = type { [8 x i8] }
%union.anon = type { i64 }
%union.anon.0 = type { i64 }

@BIN2DPD = dso_local local_unnamed_addr constant [1000 x i16] [i16 0, i16 1, i16 2, i16 3, i16 4, i16 5, i16 6, i16 7, i16 8, i16 9, i16 16, i16 17, i16 18, i16 19, i16 20, i16 21, i16 22, i16 23, i16 24, i16 25, i16 32, i16 33, i16 34, i16 35, i16 36, i16 37, i16 38, i16 39, i16 40, i16 41, i16 48, i16 49, i16 50, i16 51, i16 52, i16 53, i16 54, i16 55, i16 56, i16 57, i16 64, i16 65, i16 66, i16 67, i16 68, i16 69, i16 70, i16 71, i16 72, i16 73, i16 80, i16 81, i16 82, i16 83, i16 84, i16 85, i16 86, i16 87, i16 88, i16 89, i16 96, i16 97, i16 98, i16 99, i16 100, i16 101, i16 102, i16 103, i16 104, i16 105, i16 112, i16 113, i16 114, i16 115, i16 116, i16 117, i16 118, i16 119, i16 120, i16 121, i16 10, i16 11, i16 42, i16 43, i16 74, i16 75, i16 106, i16 107, i16 78, i16 79, i16 26, i16 27, i16 58, i16 59, i16 90, i16 91, i16 122, i16 123, i16 94, i16 95, i16 128, i16 129, i16 130, i16 131, i16 132, i16 133, i16 134, i16 135, i16 136, i16 137, i16 144, i16 145, i16 146, i16 147, i16 148, i16 149, i16 150, i16 151, i16 152, i16 153, i16 160, i16 161, i16 162, i16 163, i16 164, i16 165, i16 166, i16 167, i16 168, i16 169, i16 176, i16 177, i16 178, i16 179, i16 180, i16 181, i16 182, i16 183, i16 184, i16 185, i16 192, i16 193, i16 194, i16 195, i16 196, i16 197, i16 198, i16 199, i16 200, i16 201, i16 208, i16 209, i16 210, i16 211, i16 212, i16 213, i16 214, i16 215, i16 216, i16 217, i16 224, i16 225, i16 226, i16 227, i16 228, i16 229, i16 230, i16 231, i16 232, i16 233, i16 240, i16 241, i16 242, i16 243, i16 244, i16 245, i16 246, i16 247, i16 248, i16 249, i16 138, i16 139, i16 170, i16 171, i16 202, i16 203, i16 234, i16 235, i16 206, i16 207, i16 154, i16 155, i16 186, i16 187, i16 218, i16 219, i16 250, i16 251, i16 222, i16 223, i16 256, i16 257, i16 258, i16 259, i16 260, i16 261, i16 262, i16 263, i16 264, i16 265, i16 272, i16 273, i16 274, i16 275, i16 276, i16 277, i16 278, i16 279, i16 280, i16 281, i16 288, i16 289, i16 290, i16 291, i16 292, i16 293, i16 294, i16 295, i16 296, i16 297, i16 304, i16 305, i16 306, i16 307, i16 308, i16 309, i16 310, i16 311, i16 312, i16 313, i16 320, i16 321, i16 322, i16 323, i16 324, i16 325, i16 326, i16 327, i16 328, i16 329, i16 336, i16 337, i16 338, i16 339, i16 340, i16 341, i16 342, i16 343, i16 344, i16 345, i16 352, i16 353, i16 354, i16 355, i16 356, i16 357, i16 358, i16 359, i16 360, i16 361, i16 368, i16 369, i16 370, i16 371, i16 372, i16 373, i16 374, i16 375, i16 376, i16 377, i16 266, i16 267, i16 298, i16 299, i16 330, i16 331, i16 362, i16 363, i16 334, i16 335, i16 282, i16 283, i16 314, i16 315, i16 346, i16 347, i16 378, i16 379, i16 350, i16 351, i16 384, i16 385, i16 386, i16 387, i16 388, i16 389, i16 390, i16 391, i16 392, i16 393, i16 400, i16 401, i16 402, i16 403, i16 404, i16 405, i16 406, i16 407, i16 408, i16 409, i16 416, i16 417, i16 418, i16 419, i16 420, i16 421, i16 422, i16 423, i16 424, i16 425, i16 432, i16 433, i16 434, i16 435, i16 436, i16 437, i16 438, i16 439, i16 440, i16 441, i16 448, i16 449, i16 450, i16 451, i16 452, i16 453, i16 454, i16 455, i16 456, i16 457, i16 464, i16 465, i16 466, i16 467, i16 468, i16 469, i16 470, i16 471, i16 472, i16 473, i16 480, i16 481, i16 482, i16 483, i16 484, i16 485, i16 486, i16 487, i16 488, i16 489, i16 496, i16 497, i16 498, i16 499, i16 500, i16 501, i16 502, i16 503, i16 504, i16 505, i16 394, i16 395, i16 426, i16 427, i16 458, i16 459, i16 490, i16 491, i16 462, i16 463, i16 410, i16 411, i16 442, i16 443, i16 474, i16 475, i16 506, i16 507, i16 478, i16 479, i16 512, i16 513, i16 514, i16 515, i16 516, i16 517, i16 518, i16 519, i16 520, i16 521, i16 528, i16 529, i16 530, i16 531, i16 532, i16 533, i16 534, i16 535, i16 536, i16 537, i16 544, i16 545, i16 546, i16 547, i16 548, i16 549, i16 550, i16 551, i16 552, i16 553, i16 560, i16 561, i16 562, i16 563, i16 564, i16 565, i16 566, i16 567, i16 568, i16 569, i16 576, i16 577, i16 578, i16 579, i16 580, i16 581, i16 582, i16 583, i16 584, i16 585, i16 592, i16 593, i16 594, i16 595, i16 596, i16 597, i16 598, i16 599, i16 600, i16 601, i16 608, i16 609, i16 610, i16 611, i16 612, i16 613, i16 614, i16 615, i16 616, i16 617, i16 624, i16 625, i16 626, i16 627, i16 628, i16 629, i16 630, i16 631, i16 632, i16 633, i16 522, i16 523, i16 554, i16 555, i16 586, i16 587, i16 618, i16 619, i16 590, i16 591, i16 538, i16 539, i16 570, i16 571, i16 602, i16 603, i16 634, i16 635, i16 606, i16 607, i16 640, i16 641, i16 642, i16 643, i16 644, i16 645, i16 646, i16 647, i16 648, i16 649, i16 656, i16 657, i16 658, i16 659, i16 660, i16 661, i16 662, i16 663, i16 664, i16 665, i16 672, i16 673, i16 674, i16 675, i16 676, i16 677, i16 678, i16 679, i16 680, i16 681, i16 688, i16 689, i16 690, i16 691, i16 692, i16 693, i16 694, i16 695, i16 696, i16 697, i16 704, i16 705, i16 706, i16 707, i16 708, i16 709, i16 710, i16 711, i16 712, i16 713, i16 720, i16 721, i16 722, i16 723, i16 724, i16 725, i16 726, i16 727, i16 728, i16 729, i16 736, i16 737, i16 738, i16 739, i16 740, i16 741, i16 742, i16 743, i16 744, i16 745, i16 752, i16 753, i16 754, i16 755, i16 756, i16 757, i16 758, i16 759, i16 760, i16 761, i16 650, i16 651, i16 682, i16 683, i16 714, i16 715, i16 746, i16 747, i16 718, i16 719, i16 666, i16 667, i16 698, i16 699, i16 730, i16 731, i16 762, i16 763, i16 734, i16 735, i16 768, i16 769, i16 770, i16 771, i16 772, i16 773, i16 774, i16 775, i16 776, i16 777, i16 784, i16 785, i16 786, i16 787, i16 788, i16 789, i16 790, i16 791, i16 792, i16 793, i16 800, i16 801, i16 802, i16 803, i16 804, i16 805, i16 806, i16 807, i16 808, i16 809, i16 816, i16 817, i16 818, i16 819, i16 820, i16 821, i16 822, i16 823, i16 824, i16 825, i16 832, i16 833, i16 834, i16 835, i16 836, i16 837, i16 838, i16 839, i16 840, i16 841, i16 848, i16 849, i16 850, i16 851, i16 852, i16 853, i16 854, i16 855, i16 856, i16 857, i16 864, i16 865, i16 866, i16 867, i16 868, i16 869, i16 870, i16 871, i16 872, i16 873, i16 880, i16 881, i16 882, i16 883, i16 884, i16 885, i16 886, i16 887, i16 888, i16 889, i16 778, i16 779, i16 810, i16 811, i16 842, i16 843, i16 874, i16 875, i16 846, i16 847, i16 794, i16 795, i16 826, i16 827, i16 858, i16 859, i16 890, i16 891, i16 862, i16 863, i16 896, i16 897, i16 898, i16 899, i16 900, i16 901, i16 902, i16 903, i16 904, i16 905, i16 912, i16 913, i16 914, i16 915, i16 916, i16 917, i16 918, i16 919, i16 920, i16 921, i16 928, i16 929, i16 930, i16 931, i16 932, i16 933, i16 934, i16 935, i16 936, i16 937, i16 944, i16 945, i16 946, i16 947, i16 948, i16 949, i16 950, i16 951, i16 952, i16 953, i16 960, i16 961, i16 962, i16 963, i16 964, i16 965, i16 966, i16 967, i16 968, i16 969, i16 976, i16 977, i16 978, i16 979, i16 980, i16 981, i16 982, i16 983, i16 984, i16 985, i16 992, i16 993, i16 994, i16 995, i16 996, i16 997, i16 998, i16 999, i16 1000, i16 1001, i16 1008, i16 1009, i16 1010, i16 1011, i16 1012, i16 1013, i16 1014, i16 1015, i16 1016, i16 1017, i16 906, i16 907, i16 938, i16 939, i16 970, i16 971, i16 1002, i16 1003, i16 974, i16 975, i16 922, i16 923, i16 954, i16 955, i16 986, i16 987, i16 1018, i16 1019, i16 990, i16 991, i16 12, i16 13, i16 268, i16 269, i16 524, i16 525, i16 780, i16 781, i16 46, i16 47, i16 28, i16 29, i16 284, i16 285, i16 540, i16 541, i16 796, i16 797, i16 62, i16 63, i16 44, i16 45, i16 300, i16 301, i16 556, i16 557, i16 812, i16 813, i16 302, i16 303, i16 60, i16 61, i16 316, i16 317, i16 572, i16 573, i16 828, i16 829, i16 318, i16 319, i16 76, i16 77, i16 332, i16 333, i16 588, i16 589, i16 844, i16 845, i16 558, i16 559, i16 92, i16 93, i16 348, i16 349, i16 604, i16 605, i16 860, i16 861, i16 574, i16 575, i16 108, i16 109, i16 364, i16 365, i16 620, i16 621, i16 876, i16 877, i16 814, i16 815, i16 124, i16 125, i16 380, i16 381, i16 636, i16 637, i16 892, i16 893, i16 830, i16 831, i16 14, i16 15, i16 270, i16 271, i16 526, i16 527, i16 782, i16 783, i16 110, i16 111, i16 30, i16 31, i16 286, i16 287, i16 542, i16 543, i16 798, i16 799, i16 126, i16 127, i16 140, i16 141, i16 396, i16 397, i16 652, i16 653, i16 908, i16 909, i16 174, i16 175, i16 156, i16 157, i16 412, i16 413, i16 668, i16 669, i16 924, i16 925, i16 190, i16 191, i16 172, i16 173, i16 428, i16 429, i16 684, i16 685, i16 940, i16 941, i16 430, i16 431, i16 188, i16 189, i16 444, i16 445, i16 700, i16 701, i16 956, i16 957, i16 446, i16 447, i16 204, i16 205, i16 460, i16 461, i16 716, i16 717, i16 972, i16 973, i16 686, i16 687, i16 220, i16 221, i16 476, i16 477, i16 732, i16 733, i16 988, i16 989, i16 702, i16 703, i16 236, i16 237, i16 492, i16 493, i16 748, i16 749, i16 1004, i16 1005, i16 942, i16 943, i16 252, i16 253, i16 508, i16 509, i16 764, i16 765, i16 1020, i16 1021, i16 958, i16 959, i16 142, i16 143, i16 398, i16 399, i16 654, i16 655, i16 910, i16 911, i16 238, i16 239, i16 158, i16 159, i16 414, i16 415, i16 670, i16 671, i16 926, i16 927, i16 254, i16 255], align 16
@DPD2BIN = dso_local local_unnamed_addr constant [1024 x i16] [i16 0, i16 1, i16 2, i16 3, i16 4, i16 5, i16 6, i16 7, i16 8, i16 9, i16 80, i16 81, i16 800, i16 801, i16 880, i16 881, i16 10, i16 11, i16 12, i16 13, i16 14, i16 15, i16 16, i16 17, i16 18, i16 19, i16 90, i16 91, i16 810, i16 811, i16 890, i16 891, i16 20, i16 21, i16 22, i16 23, i16 24, i16 25, i16 26, i16 27, i16 28, i16 29, i16 82, i16 83, i16 820, i16 821, i16 808, i16 809, i16 30, i16 31, i16 32, i16 33, i16 34, i16 35, i16 36, i16 37, i16 38, i16 39, i16 92, i16 93, i16 830, i16 831, i16 818, i16 819, i16 40, i16 41, i16 42, i16 43, i16 44, i16 45, i16 46, i16 47, i16 48, i16 49, i16 84, i16 85, i16 840, i16 841, i16 88, i16 89, i16 50, i16 51, i16 52, i16 53, i16 54, i16 55, i16 56, i16 57, i16 58, i16 59, i16 94, i16 95, i16 850, i16 851, i16 98, i16 99, i16 60, i16 61, i16 62, i16 63, i16 64, i16 65, i16 66, i16 67, i16 68, i16 69, i16 86, i16 87, i16 860, i16 861, i16 888, i16 889, i16 70, i16 71, i16 72, i16 73, i16 74, i16 75, i16 76, i16 77, i16 78, i16 79, i16 96, i16 97, i16 870, i16 871, i16 898, i16 899, i16 100, i16 101, i16 102, i16 103, i16 104, i16 105, i16 106, i16 107, i16 108, i16 109, i16 180, i16 181, i16 900, i16 901, i16 980, i16 981, i16 110, i16 111, i16 112, i16 113, i16 114, i16 115, i16 116, i16 117, i16 118, i16 119, i16 190, i16 191, i16 910, i16 911, i16 990, i16 991, i16 120, i16 121, i16 122, i16 123, i16 124, i16 125, i16 126, i16 127, i16 128, i16 129, i16 182, i16 183, i16 920, i16 921, i16 908, i16 909, i16 130, i16 131, i16 132, i16 133, i16 134, i16 135, i16 136, i16 137, i16 138, i16 139, i16 192, i16 193, i16 930, i16 931, i16 918, i16 919, i16 140, i16 141, i16 142, i16 143, i16 144, i16 145, i16 146, i16 147, i16 148, i16 149, i16 184, i16 185, i16 940, i16 941, i16 188, i16 189, i16 150, i16 151, i16 152, i16 153, i16 154, i16 155, i16 156, i16 157, i16 158, i16 159, i16 194, i16 195, i16 950, i16 951, i16 198, i16 199, i16 160, i16 161, i16 162, i16 163, i16 164, i16 165, i16 166, i16 167, i16 168, i16 169, i16 186, i16 187, i16 960, i16 961, i16 988, i16 989, i16 170, i16 171, i16 172, i16 173, i16 174, i16 175, i16 176, i16 177, i16 178, i16 179, i16 196, i16 197, i16 970, i16 971, i16 998, i16 999, i16 200, i16 201, i16 202, i16 203, i16 204, i16 205, i16 206, i16 207, i16 208, i16 209, i16 280, i16 281, i16 802, i16 803, i16 882, i16 883, i16 210, i16 211, i16 212, i16 213, i16 214, i16 215, i16 216, i16 217, i16 218, i16 219, i16 290, i16 291, i16 812, i16 813, i16 892, i16 893, i16 220, i16 221, i16 222, i16 223, i16 224, i16 225, i16 226, i16 227, i16 228, i16 229, i16 282, i16 283, i16 822, i16 823, i16 828, i16 829, i16 230, i16 231, i16 232, i16 233, i16 234, i16 235, i16 236, i16 237, i16 238, i16 239, i16 292, i16 293, i16 832, i16 833, i16 838, i16 839, i16 240, i16 241, i16 242, i16 243, i16 244, i16 245, i16 246, i16 247, i16 248, i16 249, i16 284, i16 285, i16 842, i16 843, i16 288, i16 289, i16 250, i16 251, i16 252, i16 253, i16 254, i16 255, i16 256, i16 257, i16 258, i16 259, i16 294, i16 295, i16 852, i16 853, i16 298, i16 299, i16 260, i16 261, i16 262, i16 263, i16 264, i16 265, i16 266, i16 267, i16 268, i16 269, i16 286, i16 287, i16 862, i16 863, i16 888, i16 889, i16 270, i16 271, i16 272, i16 273, i16 274, i16 275, i16 276, i16 277, i16 278, i16 279, i16 296, i16 297, i16 872, i16 873, i16 898, i16 899, i16 300, i16 301, i16 302, i16 303, i16 304, i16 305, i16 306, i16 307, i16 308, i16 309, i16 380, i16 381, i16 902, i16 903, i16 982, i16 983, i16 310, i16 311, i16 312, i16 313, i16 314, i16 315, i16 316, i16 317, i16 318, i16 319, i16 390, i16 391, i16 912, i16 913, i16 992, i16 993, i16 320, i16 321, i16 322, i16 323, i16 324, i16 325, i16 326, i16 327, i16 328, i16 329, i16 382, i16 383, i16 922, i16 923, i16 928, i16 929, i16 330, i16 331, i16 332, i16 333, i16 334, i16 335, i16 336, i16 337, i16 338, i16 339, i16 392, i16 393, i16 932, i16 933, i16 938, i16 939, i16 340, i16 341, i16 342, i16 343, i16 344, i16 345, i16 346, i16 347, i16 348, i16 349, i16 384, i16 385, i16 942, i16 943, i16 388, i16 389, i16 350, i16 351, i16 352, i16 353, i16 354, i16 355, i16 356, i16 357, i16 358, i16 359, i16 394, i16 395, i16 952, i16 953, i16 398, i16 399, i16 360, i16 361, i16 362, i16 363, i16 364, i16 365, i16 366, i16 367, i16 368, i16 369, i16 386, i16 387, i16 962, i16 963, i16 988, i16 989, i16 370, i16 371, i16 372, i16 373, i16 374, i16 375, i16 376, i16 377, i16 378, i16 379, i16 396, i16 397, i16 972, i16 973, i16 998, i16 999, i16 400, i16 401, i16 402, i16 403, i16 404, i16 405, i16 406, i16 407, i16 408, i16 409, i16 480, i16 481, i16 804, i16 805, i16 884, i16 885, i16 410, i16 411, i16 412, i16 413, i16 414, i16 415, i16 416, i16 417, i16 418, i16 419, i16 490, i16 491, i16 814, i16 815, i16 894, i16 895, i16 420, i16 421, i16 422, i16 423, i16 424, i16 425, i16 426, i16 427, i16 428, i16 429, i16 482, i16 483, i16 824, i16 825, i16 848, i16 849, i16 430, i16 431, i16 432, i16 433, i16 434, i16 435, i16 436, i16 437, i16 438, i16 439, i16 492, i16 493, i16 834, i16 835, i16 858, i16 859, i16 440, i16 441, i16 442, i16 443, i16 444, i16 445, i16 446, i16 447, i16 448, i16 449, i16 484, i16 485, i16 844, i16 845, i16 488, i16 489, i16 450, i16 451, i16 452, i16 453, i16 454, i16 455, i16 456, i16 457, i16 458, i16 459, i16 494, i16 495, i16 854, i16 855, i16 498, i16 499, i16 460, i16 461, i16 462, i16 463, i16 464, i16 465, i16 466, i16 467, i16 468, i16 469, i16 486, i16 487, i16 864, i16 865, i16 888, i16 889, i16 470, i16 471, i16 472, i16 473, i16 474, i16 475, i16 476, i16 477, i16 478, i16 479, i16 496, i16 497, i16 874, i16 875, i16 898, i16 899, i16 500, i16 501, i16 502, i16 503, i16 504, i16 505, i16 506, i16 507, i16 508, i16 509, i16 580, i16 581, i16 904, i16 905, i16 984, i16 985, i16 510, i16 511, i16 512, i16 513, i16 514, i16 515, i16 516, i16 517, i16 518, i16 519, i16 590, i16 591, i16 914, i16 915, i16 994, i16 995, i16 520, i16 521, i16 522, i16 523, i16 524, i16 525, i16 526, i16 527, i16 528, i16 529, i16 582, i16 583, i16 924, i16 925, i16 948, i16 949, i16 530, i16 531, i16 532, i16 533, i16 534, i16 535, i16 536, i16 537, i16 538, i16 539, i16 592, i16 593, i16 934, i16 935, i16 958, i16 959, i16 540, i16 541, i16 542, i16 543, i16 544, i16 545, i16 546, i16 547, i16 548, i16 549, i16 584, i16 585, i16 944, i16 945, i16 588, i16 589, i16 550, i16 551, i16 552, i16 553, i16 554, i16 555, i16 556, i16 557, i16 558, i16 559, i16 594, i16 595, i16 954, i16 955, i16 598, i16 599, i16 560, i16 561, i16 562, i16 563, i16 564, i16 565, i16 566, i16 567, i16 568, i16 569, i16 586, i16 587, i16 964, i16 965, i16 988, i16 989, i16 570, i16 571, i16 572, i16 573, i16 574, i16 575, i16 576, i16 577, i16 578, i16 579, i16 596, i16 597, i16 974, i16 975, i16 998, i16 999, i16 600, i16 601, i16 602, i16 603, i16 604, i16 605, i16 606, i16 607, i16 608, i16 609, i16 680, i16 681, i16 806, i16 807, i16 886, i16 887, i16 610, i16 611, i16 612, i16 613, i16 614, i16 615, i16 616, i16 617, i16 618, i16 619, i16 690, i16 691, i16 816, i16 817, i16 896, i16 897, i16 620, i16 621, i16 622, i16 623, i16 624, i16 625, i16 626, i16 627, i16 628, i16 629, i16 682, i16 683, i16 826, i16 827, i16 868, i16 869, i16 630, i16 631, i16 632, i16 633, i16 634, i16 635, i16 636, i16 637, i16 638, i16 639, i16 692, i16 693, i16 836, i16 837, i16 878, i16 879, i16 640, i16 641, i16 642, i16 643, i16 644, i16 645, i16 646, i16 647, i16 648, i16 649, i16 684, i16 685, i16 846, i16 847, i16 688, i16 689, i16 650, i16 651, i16 652, i16 653, i16 654, i16 655, i16 656, i16 657, i16 658, i16 659, i16 694, i16 695, i16 856, i16 857, i16 698, i16 699, i16 660, i16 661, i16 662, i16 663, i16 664, i16 665, i16 666, i16 667, i16 668, i16 669, i16 686, i16 687, i16 866, i16 867, i16 888, i16 889, i16 670, i16 671, i16 672, i16 673, i16 674, i16 675, i16 676, i16 677, i16 678, i16 679, i16 696, i16 697, i16 876, i16 877, i16 898, i16 899, i16 700, i16 701, i16 702, i16 703, i16 704, i16 705, i16 706, i16 707, i16 708, i16 709, i16 780, i16 781, i16 906, i16 907, i16 986, i16 987, i16 710, i16 711, i16 712, i16 713, i16 714, i16 715, i16 716, i16 717, i16 718, i16 719, i16 790, i16 791, i16 916, i16 917, i16 996, i16 997, i16 720, i16 721, i16 722, i16 723, i16 724, i16 725, i16 726, i16 727, i16 728, i16 729, i16 782, i16 783, i16 926, i16 927, i16 968, i16 969, i16 730, i16 731, i16 732, i16 733, i16 734, i16 735, i16 736, i16 737, i16 738, i16 739, i16 792, i16 793, i16 936, i16 937, i16 978, i16 979, i16 740, i16 741, i16 742, i16 743, i16 744, i16 745, i16 746, i16 747, i16 748, i16 749, i16 784, i16 785, i16 946, i16 947, i16 788, i16 789, i16 750, i16 751, i16 752, i16 753, i16 754, i16 755, i16 756, i16 757, i16 758, i16 759, i16 794, i16 795, i16 956, i16 957, i16 798, i16 799, i16 760, i16 761, i16 762, i16 763, i16 764, i16 765, i16 766, i16 767, i16 768, i16 769, i16 786, i16 787, i16 966, i16 967, i16 988, i16 989, i16 770, i16 771, i16 772, i16 773, i16 774, i16 775, i16 776, i16 777, i16 778, i16 779, i16 796, i16 797, i16 976, i16 977, i16 998, i16 999], align 16
@BIN2CHAR = dso_local local_unnamed_addr constant [4001 x i8] calign 16
@COMBMSD = dso_local local_unnamed_addr constant [32 x i32] [i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 8, i32 9, i32 8, i32 9, i32 0, i32 1], align 16
@COMBEXP = dso_local local_unnamed_addr constant [32 x i32] [i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3], align 16
@.str.1 = private unnamed_addr constant [6 x i8] c"inity\00", align 1
@d2utable = external local_unnamed_addr constant [50 x i8], align 16
@multies = internal unnamed_addr constant [5 x i32] [i32 131073, i32 26215, i32 5243, i32 1049, i32 210], align 16
@DECPOWERS = external local_unnamed_addr constant [10 x i32], align 16

; Function Attrs: inlinehint mustprogress nofree nounwind sspstrong willreturn uwtable
define dso_local i32 @atoi(ptr nocapture noundef readonly %0) local_unnamed_addr #0 {
  %2 = tail call i64 @strtol(ptr nocapture noundef %0, ptr noundef null, i32 noundef 10)
  %3 = trunc i64 %2 to i32
  ret i32 %3
}

; Function Attrs: mustprogress nofree nounwind willreturn
declare i64 @strtol(ptr noundef readonly, ptr nocapture noundef, i32 noundef) local_unnamed_addr #1

; Function Attrs: inlinehint mustprogress nofree nounwind sspstrong willreturn uwtable
define dso_local i64 @atol(ptr nocapture noundef readonly %0) local_unnamed_addr #0 {
  %2 = tail call i64 @strtol(ptr nocapture noundef %0, ptr noundef null, i32 noundef 10)
  ret i64 %2
}

; Function Attrs: inlinehint mustprogress nofree nounwind sspstrong willreturn uwtable
define dso_local i64 @atoll(ptr nocapture noundef readonly %0) local_unnamed_addr #0 {
  %2 = tail call i64 @strtoll(ptr nocapture noundef %0, ptr noundef null, i32 noundef 10)
  ret i64 %2
}

; Function Attrs: mustprogress nofree nounwind willreturn
declare i64 @strtoll(ptr noundef readonly, ptr nocapture noundef, i32 noundef) local_unnamed_addr #1

; Function Attrs: inlinehint nounwind sspstrong uwtable
define dso_local ptr @bsearch(ptr noundef %0, ptr noundef %1, i64 noundef %2, i64 noundef %3, ptr nocapture noundef readonly %4) local_unnamed_addr #2 {
  %6 = icmp eq i64 %2, 0
  br i1 %6, label %24, label %7

7:                                                ; preds = %5, %20
  %8 = phi i64 [ %22, %20 ], [ 0, %5 ]
  %9 = phi i64 [ %21, %20 ], [ %2, %5 ]
  %10 = add i64 %8, %9
  %11 = lshr i64 %10, 1
  %12 = mul i64 %11, %3
  %13 = getelementptr inbounds i8, ptr %1, i64 %12
  %14 = tail call i32 %4(ptr noundef %0, ptr noundef %13) #12
  %15 = icmp slt i32 %14, 0
  br i1 %15, label %20, label %16

16:                                               ; preds = %7
  %17 = icmp eq i32 %14, 0
  br i1 %17, label %24, label %18

18:                                               ; preds = %16
  %19 = add nuw i64 %11, 1
  br label %20

20:                                               ; preds = %7, %18
  %21 = phi i64 [ %9, %18 ], [ %11, %7 ]
  %22 = phi i64 [ %19, %18 ], [ %8, %7 ]
  %23 = icmp ult i64 %22, %21
  br i1 %23, label %7, label %24, !llvm.loop !5

24:                                               ; preds = %16, %20, %5
  %25 = phi ptr [ null, %5 ], [ null, %20 ], [ %13, %16 ]
  ret ptr %25
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare void @llvm.lifetime.start.p0(i64 immarg, ptr nocapture) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare void @llvm.lifetime.end.p0(i64 immarg, ptr nocapture) #3

; Function Attrs: inlinehint mustprogress nofree nounwind sspstrong willreturn uwtable
define dso_local nofpclass(nan inf) double @atof(ptr nocapture noundef readonly %0) local_unnamed_addr #0 {
  %2 = tail call fast nofpclass(nan inf) double @strtod(ptr nocapture noundef %0, ptr noundef null)
  ret double %2
}

; Function Attrs: mustprogress nofree nounwind willreturn
declare nofpclass(nan inf) double @strtod(ptr noundef readonly, ptr nocapture noundef) local_unnamed_addr #1

; Function Attrs: nounwind sspstrong uwtable
define dso_local ptr @__dpd64FromNumber(ptr noundef returned writeonly %0, ptr noundef %1, ptr noundef %2) local_unnamed_addr #4 {
  %4 = alloca %struct.decNumber, align 4
  %5 = alloca %struct.decContext, align 4
  %6 = alloca [2 x i32], align 8
  %7 = alloca [6 x i32], align 16
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %4) #12
  call void @llvm.lifetime.start.p0(i64 28, ptr nonnull %5) #12
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %6) #12
  store i64 0, ptr %6, align 8
  %8 = getelementptr inbounds %struct.decNumber, ptr %1, i64 0, i32 1
  %9 = load i32, ptr %8, align 4, !tbaa !7
  %10 = load i32, ptr %1, align 4, !tbaa !12
  %11 = add nsw i32 %10, %9
  %12 = icmp sgt i32 %10, 16
  %13 = icmp sgt i32 %11, 385
  %14 = select i1 %12, i1 true, i1 %13
  %15 = icmp slt i32 %11, -382
  %16 = select i1 %14, i1 true, i1 %15
  br i1 %16, label %20, label %17

17:                                               ; preds = %3
  %18 = getelementptr inbounds %struct.decNumber, ptr %1, i64 0, i32 2
  %19 = load i8, ptr %18, align 4, !tbaa !13
  br label %34

20:                                               ; preds = %3
  %21 = call ptr @decContextDefault(ptr noundef nonnull %5, i32 noundef 64) #12
  %22 = getelementptr inbounds %struct.decContext, ptr %2, i64 0, i32 3
  %23 = load i32, ptr %22, align 4, !tbaa !14
  %24 = getelementptr inbounds %struct.decContext, ptr %5, i64 0, i32 3
  store i32 %23, ptr %24, align 4, !tbaa !14
  %25 = call ptr @decNumberPlus(ptr noundef nonnull %4, ptr noundef nonnull %1, ptr noundef nonnull %5) #12
  %26 = getelementptr inbounds %struct.decNumber, ptr %1, i64 0, i32 2
  %27 = load i8, ptr %26, align 4, !tbaa !13
  %28 = and i8 %27, -128
  %29 = getelementptr inbounds %struct.decNumber, ptr %4, i64 0, i32 2
  %30 = load i8, ptr %29, align 4, !tbaa !13
  %31 = or i8 %30, %28
  store i8 %31, ptr %29, align 4, !tbaa !13
  %32 = getelementptr inbounds %struct.decContext, ptr %5, i64 0, i32 5
  %33 = load i32, ptr %32, align 4, !tbaa !16
  br label %34

34:                                               ; preds = %17, %20
  %35 = phi i8 [ %31, %20 ], [ %19, %17 ]
  %36 = phi i32 [ %33, %20 ], [ 0, %17 ]
  %37 = phi ptr [ %4, %20 ], [ %1, %17 ]
  %38 = getelementptr inbounds %struct.decNumber, ptr %37, i64 0, i32 2
  %39 = zext i8 %35 to i32
  %40 = and i32 %39, 112
  %41 = icmp eq i32 %40, 0
  br i1 %41, label %93, label %42

42:                                               ; preds = %34
  %43 = and i32 %39, 64
  %44 = icmp eq i32 %43, 0
  br i1 %44, label %45, label %198

45:                                               ; preds = %42
  %46 = getelementptr inbounds %struct.decNumber, ptr %37, i64 0, i32 3
  %47 = load i16, ptr %46, align 2, !tbaa !17
  %48 = icmp ne i16 %47, 0
  %49 = load i32, ptr %37, align 4, !tbaa !12
  %50 = icmp sgt i32 %49, 1
  %51 = select i1 %48, i1 true, i1 %50
  %52 = add i32 %49, -1
  %53 = icmp ult i32 %52, 15
  %54 = select i1 %51, i1 %53, i1 false
  br i1 %54, label %55, label %84

55:                                               ; preds = %45, %79
  %56 = phi i32 [ %80, %79 ], [ 0, %45 ]
  %57 = phi i32 [ %62, %79 ], [ %49, %45 ]
  %58 = phi ptr [ %82, %79 ], [ %6, %45 ]
  %59 = phi ptr [ %63, %79 ], [ %46, %45 ]
  %60 = phi i32 [ %81, %79 ], [ 0, %45 ]
  %61 = load i16, ptr %59, align 2, !tbaa !17
  %62 = add nsw i32 %57, -3
  %63 = getelementptr inbounds i16, ptr %59, i64 1
  %64 = zext i16 %61 to i64
  %65 = getelementptr inbounds [1000 x i16], ptr @BIN2DPD, i64 0, i64 %64
  %66 = load i16, ptr %65, align 2, !tbaa !17
  %67 = zext i16 %66 to i32
  %68 = shl i32 %67, %60
  %69 = or i32 %68, %56
  store i32 %69, ptr %58, align 4, !tbaa !19
  %70 = add nuw i32 %60, 10
  %71 = icmp ult i32 %60, 22
  br i1 %71, label %79, label %72

72:                                               ; preds = %55
  %73 = getelementptr inbounds i32, ptr %58, i64 1
  %74 = add i32 %60, -22
  %75 = sub i32 32, %60
  %76 = lshr i32 %67, %75
  %77 = load i32, ptr %73, align 4, !tbaa !19
  %78 = or i32 %77, %76
  store i32 %78, ptr %73, align 4, !tbaa !19
  br label %79

79:                                               ; preds = %72, %55
  %80 = phi i32 [ %69, %55 ], [ %78, %72 ]
  %81 = phi i32 [ %70, %55 ], [ %74, %72 ]
  %82 = phi ptr [ %58, %55 ], [ %73, %72 ]
  %83 = icmp ugt i32 %57, 3
  br i1 %83, label %55, label %84, !llvm.loop !20

84:                                               ; preds = %79, %45
  %85 = and i8 %35, 32
  %86 = icmp eq i8 %85, 0
  %87 = getelementptr inbounds [2 x i32], ptr %6, i64 0, i64 1
  %88 = load i32, ptr %87, align 4, !tbaa !19
  br i1 %86, label %91, label %89

89:                                               ; preds = %84
  %90 = or i32 %88, 2080374784
  br label %198

91:                                               ; preds = %84
  %92 = or i32 %88, 2113929216
  br label %198

93:                                               ; preds = %34
  %94 = getelementptr inbounds %struct.decNumber, ptr %37, i64 0, i32 3
  %95 = load i16, ptr %94, align 2, !tbaa !17
  %96 = icmp eq i16 %95, 0
  br i1 %96, label %97, label %117

97:                                               ; preds = %93
  %98 = load i32, ptr %37, align 4, !tbaa !12
  %99 = icmp eq i32 %98, 1
  br i1 %99, label %100, label %117

100:                                              ; preds = %97
  %101 = getelementptr inbounds %struct.decNumber, ptr %37, i64 0, i32 1
  %102 = load i32, ptr %101, align 4, !tbaa !7
  %103 = icmp slt i32 %102, -398
  br i1 %103, label %104, label %106

104:                                              ; preds = %100
  %105 = or i32 %36, 1024
  br label %112

106:                                              ; preds = %100
  %107 = add nsw i32 %102, 398
  %108 = icmp ugt i32 %107, 767
  %109 = or i32 %36, 1024
  %110 = select i1 %108, i32 %109, i32 %36
  %111 = call i32 @llvm.umin.i32(i32 %107, i32 767)
  br label %112

112:                                              ; preds = %106, %104
  %113 = phi i32 [ %105, %104 ], [ %110, %106 ]
  %114 = phi i32 [ 0, %104 ], [ %111, %106 ]
  %115 = lshr i32 %114, 5
  %116 = and i32 %115, 24
  br label %187

117:                                              ; preds = %97, %93
  %118 = getelementptr inbounds %struct.decNumber, ptr %37, i64 0, i32 1
  %119 = load i32, ptr %118, align 4, !tbaa !7
  %120 = add i32 %119, 398
  %121 = icmp ult i32 %120, 768
  %122 = or i32 %36, 1024
  %123 = select i1 %121, i32 %36, i32 %122
  %124 = call i32 @llvm.umin.i32(i32 %120, i32 767)
  br i1 %121, label %125, label %167

125:                                              ; preds = %117
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %7) #12
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 16 dereferenceable(24) %7, i8 0, i64 24, i1 false)
  %126 = load i32, ptr %37, align 4, !tbaa !12
  %127 = icmp sgt i32 %126, 0
  br i1 %127, label %129, label %128

128:                                              ; preds = %125
  store i32 0, ptr %6, align 8, !tbaa !19
  br label %163

129:                                              ; preds = %125, %129
  %130 = phi i64 [ %139, %129 ], [ 0, %125 ]
  %131 = phi i32 [ %140, %129 ], [ %126, %125 ]
  %132 = getelementptr inbounds %struct.decNumber, ptr %37, i64 0, i32 3, i64 %130
  %133 = load i16, ptr %132, align 2, !tbaa !17
  %134 = zext i16 %133 to i64
  %135 = getelementptr inbounds [1000 x i16], ptr @BIN2DPD, i64 0, i64 %134
  %136 = load i16, ptr %135, align 2, !tbaa !17
  %137 = zext i16 %136 to i32
  %138 = getelementptr inbounds [6 x i32], ptr %7, i64 0, i64 %130
  store i32 %137, ptr %138, align 4, !tbaa !19
  %139 = add nuw nsw i64 %130, 1
  %140 = add nsw i32 %131, -3
  %141 = icmp ugt i32 %131, 3
  br i1 %141, label %129, label %142, !llvm.loop !21

142:                                              ; preds = %129
  %143 = load i32, ptr %7, align 16, !tbaa !19
  %144 = getelementptr inbounds [6 x i32], ptr %7, i64 0, i64 1
  %145 = load i32, ptr %144, align 4, !tbaa !19
  %146 = getelementptr inbounds [6 x i32], ptr %7, i64 0, i64 2
  %147 = load i32, ptr %146, align 8, !tbaa !19
  %148 = shl i32 %145, 10
  %149 = or i32 %148, %143
  %150 = shl i32 %147, 20
  %151 = or i32 %150, %149
  store i32 %151, ptr %6, align 8, !tbaa !19
  %152 = icmp sgt i32 %126, 6
  br i1 %152, label %153, label %163

153:                                              ; preds = %142
  %154 = getelementptr inbounds [6 x i32], ptr %7, i64 0, i64 3
  %155 = load i32, ptr %154, align 4, !tbaa !19
  %156 = shl i32 %155, 30
  %157 = or i32 %156, %151
  store i32 %157, ptr %6, align 8, !tbaa !19
  %158 = lshr i32 %155, 2
  %159 = getelementptr inbounds [6 x i32], ptr %7, i64 0, i64 4
  %160 = load i32, ptr %159, align 16, !tbaa !19
  %161 = shl i32 %160, 8
  %162 = or i32 %161, %158
  br label %163

163:                                              ; preds = %128, %153, %142
  %164 = phi i32 [ %162, %153 ], [ 0, %142 ], [ 0, %128 ]
  %165 = getelementptr inbounds [6 x i32], ptr %7, i64 0, i64 5
  %166 = load i32, ptr %165, align 4, !tbaa !19
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %7) #12
  br label %173

167:                                              ; preds = %117
  %168 = add i32 %119, -369
  call void @decDigitsToDPD(ptr noundef nonnull %37, ptr noundef nonnull %6, i32 noundef %168)
  %169 = getelementptr inbounds [2 x i32], ptr %6, i64 0, i64 1
  %170 = load i32, ptr %169, align 4, !tbaa !19
  %171 = lshr i32 %170, 18
  %172 = and i32 %170, 262143
  br label %173

173:                                              ; preds = %167, %163
  %174 = phi i32 [ %164, %163 ], [ %172, %167 ]
  %175 = phi i32 [ %166, %163 ], [ %171, %167 ]
  %176 = icmp ugt i32 %175, 7
  br i1 %176, label %177, label %183

177:                                              ; preds = %173
  %178 = lshr i32 %124, 7
  %179 = and i32 %178, 6
  %180 = and i32 %175, 1
  %181 = or i32 %179, %180
  %182 = or i32 %181, 24
  br label %187

183:                                              ; preds = %173
  %184 = lshr i32 %124, 5
  %185 = and i32 %184, 24
  %186 = or i32 %175, %185
  br label %187

187:                                              ; preds = %177, %183, %112
  %188 = phi i32 [ 0, %112 ], [ %174, %183 ], [ %174, %177 ]
  %189 = phi i32 [ %113, %112 ], [ %123, %183 ], [ %123, %177 ]
  %190 = phi i32 [ %116, %112 ], [ %186, %183 ], [ %182, %177 ]
  %191 = phi i32 [ %114, %112 ], [ %124, %183 ], [ %124, %177 ]
  %192 = shl nuw nsw i32 %190, 26
  %193 = or i32 %188, %192
  %194 = shl nuw nsw i32 %191, 18
  %195 = and i32 %194, 66846720
  %196 = or i32 %193, %195
  %197 = load i8, ptr %38, align 4, !tbaa !13
  br label %198

198:                                              ; preds = %42, %91, %89, %187
  %199 = phi i32 [ %90, %89 ], [ %92, %91 ], [ %196, %187 ], [ 2013265920, %42 ]
  %200 = phi i8 [ %35, %89 ], [ %35, %91 ], [ %197, %187 ], [ %35, %42 ]
  %201 = phi i32 [ %36, %89 ], [ %36, %91 ], [ %189, %187 ], [ %36, %42 ]
  %202 = or i32 %199, -2147483648
  %203 = icmp slt i8 %200, 0
  %204 = select i1 %203, i32 %202, i32 %199
  %205 = load i32, ptr %6, align 8, !tbaa !19
  store i32 %205, ptr %0, align 1
  %206 = getelementptr inbounds i8, ptr %0, i64 4
  store i32 %204, ptr %206, align 1
  %207 = icmp eq i32 %201, 0
  br i1 %207, label %210, label %208

208:                                              ; preds = %198
  %209 = call ptr @decContextSetStatus(ptr noundef %2, i32 noundef %201) #12
  br label %210

210:                                              ; preds = %208, %198
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %6) #12
  call void @llvm.lifetime.end.p0(i64 28, ptr nonnull %5) #12
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %4) #12
  ret ptr %0
}

; Function Attrs: mustprogress nocallback nofree nounwind willreturn memory(argmem: write)
declare void @llvm.memset.p0.i64(ptr nocapture writeonly, i8, i64, i1 immarg) #5

declare ptr @decContextDefault(ptr noundef, i32 noundef) local_unnamed_addr #6

declare ptr @decNumberPlus(ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #6

; Function Attrs: nofree nosync nounwind sspstrong memory(readwrite, inaccessiblemem: none) uwtable
define dso_local void @decDigitsToDPD(ptr noundef readonly %0, ptr nocapture noundef %1, i32 noundef %2) local_unnamed_addr #7 {
  %4 = alloca [12 x i16], align 16
  %5 = ptrtoint ptr %4 to i64
  %6 = load i32, ptr %0, align 4, !tbaa !12
  %7 = getelementptr inbounds %struct.decNumber, ptr %0, i64 0, i32 3
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %4) #12
  %8 = icmp eq i32 %2, 0
  br i1 %8, label %158, label %9

9:                                                ; preds = %3
  %10 = icmp slt i32 %6, 50
  br i1 %10, label %11, label %16

11:                                               ; preds = %9
  %12 = sext i32 %6 to i64
  %13 = getelementptr inbounds [50 x i8], ptr @d2utable, i64 0, i64 %12
  %14 = load i8, ptr %13, align 1, !tbaa !22
  %15 = zext i8 %14 to i32
  br label %19

16:                                               ; preds = %9
  %17 = add nuw nsw i32 %6, 2
  %18 = udiv i32 %17, 3
  br label %19

19:                                               ; preds = %16, %11
  %20 = phi i32 [ %15, %11 ], [ %18, %16 ]
  %21 = zext i32 %20 to i64
  %22 = getelementptr inbounds i16, ptr %7, i64 %21
  %23 = getelementptr inbounds i16, ptr %22, i64 -1
  %24 = getelementptr inbounds i16, ptr %4, i64 %21
  %25 = getelementptr inbounds i16, ptr %24, i64 -1
  %26 = icmp slt i32 %2, 50
  br i1 %26, label %27, label %32

27:                                               ; preds = %19
  %28 = sext i32 %2 to i64
  %29 = getelementptr inbounds [50 x i8], ptr @d2utable, i64 0, i64 %28
  %30 = load i8, ptr %29, align 1, !tbaa !22
  %31 = zext i8 %30 to i32
  br label %35

32:                                               ; preds = %19
  %33 = add nuw nsw i32 %2, 2
  %34 = udiv i32 %33, 3
  br label %35

35:                                               ; preds = %32, %27
  %36 = phi i32 [ %31, %27 ], [ %34, %32 ]
  %37 = zext i32 %36 to i64
  %38 = getelementptr inbounds i16, ptr %25, i64 %37
  %39 = mul nsw i32 %36, -3
  %40 = add i32 %2, 3
  %41 = add i32 %40, %39
  %42 = sub nsw i32 3, %41
  %43 = icmp eq i32 %41, 3
  br i1 %43, label %44, label %53

44:                                               ; preds = %35
  %45 = icmp ult ptr %23, %7
  br i1 %45, label %101, label %46

46:                                               ; preds = %44, %46
  %47 = phi ptr [ %51, %46 ], [ %38, %44 ]
  %48 = phi ptr [ %50, %46 ], [ %23, %44 ]
  %49 = load i16, ptr %48, align 2, !tbaa !17
  store i16 %49, ptr %47, align 2, !tbaa !17
  %50 = getelementptr inbounds i16, ptr %48, i64 -1
  %51 = getelementptr inbounds i16, ptr %47, i64 -1
  %52 = icmp ult ptr %50, %7
  br i1 %52, label %101, label %46, !llvm.loop !23

53:                                               ; preds = %35
  %54 = add nsw i32 %6, %2
  %55 = icmp slt i32 %54, 50
  br i1 %55, label %56, label %61

56:                                               ; preds = %53
  %57 = sext i32 %54 to i64
  %58 = getelementptr inbounds [50 x i8], ptr @d2utable, i64 0, i64 %57
  %59 = load i8, ptr %58, align 1, !tbaa !22
  %60 = zext i8 %59 to i32
  br label %64

61:                                               ; preds = %53
  %62 = add nuw nsw i32 %54, 2
  %63 = udiv i32 %62, 3
  br label %64

64:                                               ; preds = %61, %56
  %65 = phi i32 [ %60, %56 ], [ %63, %61 ]
  %66 = zext i32 %65 to i64
  %67 = getelementptr inbounds i16, ptr %4, i64 %66
  %68 = getelementptr inbounds i16, ptr %67, i64 -1
  %69 = icmp ult ptr %23, %7
  br i1 %69, label %101, label %70

70:                                               ; preds = %64
  %71 = sext i32 %42 to i64
  %72 = getelementptr inbounds [5 x i32], ptr @multies, i64 0, i64 %71
  %73 = load i32, ptr %72, align 4, !tbaa !19
  %74 = getelementptr inbounds [10 x i32], ptr @DECPOWERS, i64 0, i64 %71
  %75 = load i32, ptr %74, align 4, !tbaa !19
  %76 = sext i32 %41 to i64
  %77 = getelementptr inbounds [10 x i32], ptr @DECPOWERS, i64 0, i64 %76
  %78 = load i32, ptr %77, align 4, !tbaa !19
  br label %79

79:                                               ; preds = %70, %94
  %80 = phi i32 [ 0, %70 ], [ %95, %94 ]
  %81 = phi ptr [ %38, %70 ], [ %97, %94 ]
  %82 = phi ptr [ %23, %70 ], [ %96, %94 ]
  %83 = load i16, ptr %82, align 2, !tbaa !17
  %84 = zext i16 %83 to i32
  %85 = lshr i32 %84, %42
  %86 = mul i32 %85, %73
  %87 = lshr i32 %86, 17
  %88 = mul i32 %87, %75
  %89 = sub i32 %84, %88
  %90 = icmp ugt ptr %81, %68
  br i1 %90, label %94, label %91

91:                                               ; preds = %79
  %92 = add i32 %87, %80
  %93 = trunc i32 %92 to i16
  store i16 %93, ptr %81, align 2, !tbaa !17
  br label %94

94:                                               ; preds = %91, %79
  %95 = mul i32 %78, %89
  %96 = getelementptr inbounds i16, ptr %82, i64 -1
  %97 = getelementptr inbounds i16, ptr %81, i64 -1
  %98 = icmp ult ptr %96, %7
  br i1 %98, label %99, label %79, !llvm.loop !24

99:                                               ; preds = %94
  %100 = trunc i32 %95 to i16
  br label %101

101:                                              ; preds = %46, %99, %64, %44
  %102 = phi ptr [ %38, %44 ], [ %38, %64 ], [ %97, %99 ], [ %51, %46 ]
  %103 = phi i16 [ 0, %44 ], [ 0, %64 ], [ %100, %99 ], [ 0, %46 ]
  %104 = ptrtoint ptr %102 to i64
  %105 = icmp ult ptr %102, %4
  br i1 %105, label %156, label %106

106:                                              ; preds = %101
  store i16 %103, ptr %102, align 2, !tbaa !17
  %107 = getelementptr inbounds i16, ptr %102, i64 -1
  %108 = icmp ult ptr %107, %4
  br i1 %108, label %156, label %109

109:                                              ; preds = %106
  %110 = add i64 %104, -2
  %111 = sub i64 %110, %5
  %112 = lshr i64 %111, 1
  %113 = add nuw i64 %112, 1
  %114 = icmp ult i64 %111, 14
  br i1 %114, label %150, label %115

115:                                              ; preds = %109
  %116 = icmp ult i64 %111, 126
  br i1 %116, label %136, label %117

117:                                              ; preds = %115
  %118 = and i64 %113, -64
  br label %119

119:                                              ; preds = %119, %117
  %120 = phi i64 [ 0, %117 ], [ %127, %119 ]
  %121 = mul i64 %120, -2
  %122 = getelementptr i8, ptr %107, i64 %121
  %123 = getelementptr i16, ptr %122, i64 -15
  store <16 x i16> zeroinitializer, ptr %123, align 2, !tbaa !17
  %124 = getelementptr i16, ptr %122, i64 -31
  store <16 x i16> zeroinitializer, ptr %124, align 2, !tbaa !17
  %125 = getelementptr i16, ptr %122, i64 -47
  store <16 x i16> zeroinitializer, ptr %125, align 2, !tbaa !17
  %126 = getelementptr i16, ptr %122, i64 -63
  store <16 x i16> zeroinitializer, ptr %126, align 2, !tbaa !17
  %127 = add nuw i64 %120, 64
  %128 = icmp eq i64 %127, %118
  br i1 %128, label %129, label %119, !llvm.loop !25

129:                                              ; preds = %119
  %130 = icmp eq i64 %113, %118
  br i1 %130, label %156, label %131

131:                                              ; preds = %129
  %132 = mul i64 %118, -2
  %133 = getelementptr i8, ptr %107, i64 %132
  %134 = and i64 %113, 56
  %135 = icmp eq i64 %134, 0
  br i1 %135, label %150, label %136

136:                                              ; preds = %115, %131
  %137 = phi i64 [ %118, %131 ], [ 0, %115 ]
  %138 = and i64 %113, -8
  %139 = mul i64 %138, -2
  %140 = getelementptr i8, ptr %107, i64 %139
  %141 = getelementptr i16, ptr %107, i64 -7
  br label %142

142:                                              ; preds = %142, %136
  %143 = phi i64 [ %137, %136 ], [ %146, %142 ]
  %144 = mul i64 %143, -2
  %145 = getelementptr i8, ptr %141, i64 %144
  store <8 x i16> zeroinitializer, ptr %145, align 2, !tbaa !17
  %146 = add nuw i64 %143, 8
  %147 = icmp eq i64 %146, %138
  br i1 %147, label %148, label %142, !llvm.loop !29

148:                                              ; preds = %142
  %149 = icmp eq i64 %113, %138
  br i1 %149, label %156, label %150

150:                                              ; preds = %109, %131, %148
  %151 = phi ptr [ %107, %109 ], [ %133, %131 ], [ %140, %148 ]
  br label %152

152:                                              ; preds = %150, %152
  %153 = phi ptr [ %154, %152 ], [ %151, %150 ]
  store i16 0, ptr %153, align 2, !tbaa !17
  %154 = getelementptr inbounds i16, ptr %153, i64 -1
  %155 = icmp ult ptr %154, %4
  br i1 %155, label %156, label %152, !llvm.loop !30

156:                                              ; preds = %152, %129, %148, %106, %101
  %157 = add nsw i32 %6, %2
  br label %158

158:                                              ; preds = %156, %3
  %159 = phi ptr [ %4, %156 ], [ %7, %3 ]
  %160 = phi i32 [ %157, %156 ], [ %6, %3 ]
  %161 = icmp sgt i32 %160, 0
  br i1 %161, label %162, label %193

162:                                              ; preds = %158
  %163 = load i32, ptr %1, align 4, !tbaa !19
  br label %164

164:                                              ; preds = %162, %188
  %165 = phi i32 [ %189, %188 ], [ %163, %162 ]
  %166 = phi i32 [ %171, %188 ], [ %160, %162 ]
  %167 = phi ptr [ %191, %188 ], [ %1, %162 ]
  %168 = phi ptr [ %172, %188 ], [ %159, %162 ]
  %169 = phi i32 [ %190, %188 ], [ 0, %162 ]
  %170 = load i16, ptr %168, align 2, !tbaa !17
  %171 = add nsw i32 %166, -3
  %172 = getelementptr inbounds i16, ptr %168, i64 1
  %173 = zext i16 %170 to i64
  %174 = getelementptr inbounds [1000 x i16], ptr @BIN2DPD, i64 0, i64 %173
  %175 = load i16, ptr %174, align 2, !tbaa !17
  %176 = zext i16 %175 to i32
  %177 = shl i32 %176, %169
  %178 = or i32 %177, %165
  store i32 %178, ptr %167, align 4, !tbaa !19
  %179 = add nuw i32 %169, 10
  %180 = icmp ult i32 %169, 22
  br i1 %180, label %188, label %181

181:                                              ; preds = %164
  %182 = getelementptr inbounds i32, ptr %167, i64 1
  %183 = add i32 %169, -22
  %184 = sub i32 32, %169
  %185 = lshr i32 %176, %184
  %186 = load i32, ptr %182, align 4, !tbaa !19
  %187 = or i32 %186, %185
  store i32 %187, ptr %182, align 4, !tbaa !19
  br label %188

188:                                              ; preds = %164, %181
  %189 = phi i32 [ %178, %164 ], [ %187, %181 ]
  %190 = phi i32 [ %179, %164 ], [ %183, %181 ]
  %191 = phi ptr [ %167, %164 ], [ %182, %181 ]
  %192 = icmp ugt i32 %166, 3
  br i1 %192, label %164, label %193, !llvm.loop !20

193:                                              ; preds = %188, %158
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %4) #12
  ret void
}

; Function Attrs: mustprogress nocallback nofree nounwind willreturn memory(argmem: readwrite)
declare void @llvm.memcpy.p0.p0.i64(ptr noalias nocapture writeonly, ptr noalias nocapture readonly, i64, i1 immarg) #8

declare ptr @decContextSetStatus(ptr noundef, i32 noundef) local_unnamed_addr #6

; Function Attrs: nounwind sspstrong uwtable
define dso_local ptr @__dpd64ToNumber(ptr nocapture noundef readonly %0, ptr noundef returned %1) local_unnamed_addr #4 {
  %3 = alloca [2 x i32], align 4
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %3) #12
  %4 = load i32, ptr %0, align 1
  %5 = getelementptr inbounds i8, ptr %0, i64 4
  %6 = load i32, ptr %5, align 1
  %7 = getelementptr inbounds [2 x i32], ptr %3, i64 0, i64 1
  %8 = lshr i32 %6, 26
  %9 = and i32 %8, 31
  %10 = tail call ptr @decNumberZero(ptr noundef %1) #12
  %11 = icmp sgt i32 %6, -1
  br i1 %11, label %14, label %12

12:                                               ; preds = %2
  %13 = getelementptr inbounds %struct.decNumber, ptr %1, i64 0, i32 2
  store i8 -128, ptr %13, align 4, !tbaa !13
  br label %14

14:                                               ; preds = %12, %2
  %15 = zext i32 %9 to i64
  %16 = and i32 %6, 2013265920
  %17 = icmp eq i32 %16, 2013265920
  br i1 %17, label %18, label %34

18:                                               ; preds = %14
  %19 = lshr i64 1073807617, %15
  %20 = and i64 %19, 1
  %21 = icmp eq i64 %20, 0
  br i1 %21, label %26, label %22

22:                                               ; preds = %18
  %23 = getelementptr inbounds %struct.decNumber, ptr %1, i64 0, i32 2
  %24 = load i8, ptr %23, align 4, !tbaa !13
  %25 = or i8 %24, 64
  store i8 %25, ptr %23, align 4, !tbaa !13
  br label %183

26:                                               ; preds = %18
  %27 = and i32 %6, 33554432
  %28 = icmp eq i32 %27, 0
  %29 = getelementptr inbounds %struct.decNumber, ptr %1, i64 0, i32 2
  %30 = load i8, ptr %29, align 4, !tbaa !13
  %31 = select i1 %28, i8 32, i8 16
  %32 = or i8 %30, %31
  store i8 %32, ptr %29, align 4, !tbaa !13
  %33 = and i32 %6, 262143
  store i32 %33, ptr %7, align 4, !tbaa !19
  br label %52

34:                                               ; preds = %14
  %35 = getelementptr inbounds [32 x i32], ptr @COMBMSD, i64 0, i64 %15
  %36 = load i32, ptr %35, align 4, !tbaa !19
  %37 = getelementptr inbounds [32 x i32], ptr @COMBEXP, i64 0, i64 %15
  %38 = load i32, ptr %37, align 4, !tbaa !19
  %39 = shl i32 %38, 8
  %40 = lshr i32 %6, 18
  %41 = and i32 %40, 255
  %42 = add nuw nsw i32 %41, -398
  %43 = add i32 %42, %39
  %44 = getelementptr inbounds %struct.decNumber, ptr %1, i64 0, i32 1
  store i32 %43, ptr %44, align 4, !tbaa !7
  %45 = and i32 %6, 262143
  store i32 %45, ptr %7, align 4, !tbaa !19
  %46 = lshr i64 1073807617, %15
  %47 = and i64 %46, 1
  %48 = icmp eq i64 %47, 0
  br i1 %48, label %49, label %52

49:                                               ; preds = %34
  %50 = shl i32 %36, 18
  %51 = or i32 %50, %45
  store i32 %51, ptr %7, align 4, !tbaa !19
  br label %64

52:                                               ; preds = %26, %34
  %53 = phi i32 [ %33, %26 ], [ %45, %34 ]
  %54 = icmp eq i32 %53, 0
  br i1 %54, label %55, label %60

55:                                               ; preds = %52
  %56 = icmp eq i32 %4, 0
  br i1 %56, label %183, label %57

57:                                               ; preds = %55
  %58 = icmp ult i32 %4, 1073741824
  %59 = select i1 %58, i32 3, i32 4
  br label %64

60:                                               ; preds = %52
  %61 = and i32 %6, 261888
  %62 = icmp eq i32 %61, 0
  %63 = select i1 %62, i32 4, i32 5
  br label %64

64:                                               ; preds = %60, %57, %49
  %65 = phi i32 [ 6, %49 ], [ %59, %57 ], [ %63, %60 ]
  %66 = getelementptr inbounds %struct.decNumber, ptr %1, i64 0, i32 3
  %67 = and i32 %4, 1023
  %68 = icmp eq i32 %67, 0
  br i1 %68, label %73, label %69

69:                                               ; preds = %64
  %70 = zext i32 %67 to i64
  %71 = getelementptr inbounds [1024 x i16], ptr @DPD2BIN, i64 0, i64 %70
  %72 = load i16, ptr %71, align 2, !tbaa !17
  br label %73

73:                                               ; preds = %69, %64
  %74 = phi i16 [ %72, %69 ], [ 0, %64 ]
  store i16 %74, ptr %66, align 2, !tbaa !17
  %75 = getelementptr inbounds %struct.decNumber, ptr %1, i64 0, i32 3, i64 1
  %76 = lshr i32 %4, 10
  %77 = and i32 %76, 1023
  %78 = icmp eq i32 %77, 0
  br i1 %78, label %83, label %79

79:                                               ; preds = %73
  %80 = zext i32 %77 to i64
  %81 = getelementptr inbounds [1024 x i16], ptr @DPD2BIN, i64 0, i64 %80
  %82 = load i16, ptr %81, align 2, !tbaa !17
  br label %83

83:                                               ; preds = %79, %73
  %84 = phi i16 [ %82, %79 ], [ 0, %73 ]
  %85 = phi ptr [ %75, %79 ], [ %66, %73 ]
  store i16 %84, ptr %75, align 2, !tbaa !17
  %86 = getelementptr inbounds %struct.decNumber, ptr %1, i64 0, i32 3, i64 2
  %87 = add nsw i32 %65, -3
  %88 = icmp ult i32 %87, -2
  br i1 %88, label %89, label %167, !llvm.loop !31

89:                                               ; preds = %83
  %90 = lshr i32 %4, 20
  %91 = and i32 %90, 1023
  %92 = icmp eq i32 %91, 0
  br i1 %92, label %97, label %93

93:                                               ; preds = %89
  %94 = zext i32 %91 to i64
  %95 = getelementptr inbounds [1024 x i16], ptr @DPD2BIN, i64 0, i64 %94
  %96 = load i16, ptr %95, align 2, !tbaa !17
  br label %97

97:                                               ; preds = %93, %89
  %98 = phi i16 [ %96, %93 ], [ 0, %89 ]
  %99 = phi ptr [ %86, %93 ], [ %85, %89 ]
  store i16 %98, ptr %86, align 2, !tbaa !17
  %100 = getelementptr inbounds %struct.decNumber, ptr %1, i64 0, i32 3, i64 3
  %101 = and i32 %65, 6
  %102 = icmp eq i32 %101, 2
  br i1 %102, label %167, label %103, !llvm.loop !31

103:                                              ; preds = %97
  %104 = lshr i32 %4, 30
  %105 = getelementptr inbounds i32, ptr %3, i64 1
  %106 = load i32, ptr %105, align 4, !tbaa !19
  %107 = shl i32 %106, 2
  %108 = and i32 %107, 1020
  %109 = or i32 %108, %104
  %110 = icmp eq i32 %109, 0
  br i1 %110, label %115, label %111

111:                                              ; preds = %103
  %112 = zext i32 %109 to i64
  %113 = getelementptr inbounds [1024 x i16], ptr @DPD2BIN, i64 0, i64 %112
  %114 = load i16, ptr %113, align 2, !tbaa !17
  br label %115

115:                                              ; preds = %111, %103
  %116 = phi i16 [ %114, %111 ], [ 0, %103 ]
  %117 = phi ptr [ %100, %111 ], [ %99, %103 ]
  store i16 %116, ptr %100, align 2, !tbaa !17
  %118 = getelementptr inbounds %struct.decNumber, ptr %1, i64 0, i32 3, i64 4
  %119 = add nsw i32 %65, -5
  %120 = icmp ult i32 %119, -2
  br i1 %120, label %121, label %167, !llvm.loop !31

121:                                              ; preds = %115
  %122 = lshr i32 %106, 8
  %123 = add nuw nsw i32 8, 10
  %124 = and i32 %122, 1023
  %125 = icmp eq i32 %124, 0
  br i1 %125, label %130, label %126

126:                                              ; preds = %121
  %127 = zext i32 %124 to i64
  %128 = getelementptr inbounds [1024 x i16], ptr @DPD2BIN, i64 0, i64 %127
  %129 = load i16, ptr %128, align 2, !tbaa !17
  br label %130

130:                                              ; preds = %126, %121
  %131 = phi i16 [ %129, %126 ], [ 0, %121 ]
  %132 = phi ptr [ %118, %126 ], [ %117, %121 ]
  store i16 %131, ptr %118, align 2, !tbaa !17
  %133 = getelementptr inbounds %struct.decNumber, ptr %1, i64 0, i32 3, i64 5
  %134 = and i32 %65, 6
  %135 = icmp eq i32 %134, 4
  br i1 %135, label %167, label %136, !llvm.loop !31

136:                                              ; preds = %130
  %137 = lshr i32 %106, %123
  %138 = or i32 8, 20
  %139 = and i32 %137, 1023
  %140 = icmp eq i32 %139, 0
  br i1 %140, label %145, label %141

141:                                              ; preds = %136
  %142 = zext i32 %139 to i64
  %143 = getelementptr inbounds [1024 x i16], ptr @DPD2BIN, i64 0, i64 %142
  %144 = load i16, ptr %143, align 2, !tbaa !17
  br label %145

145:                                              ; preds = %141, %136
  %146 = phi i16 [ %144, %141 ], [ 0, %136 ]
  %147 = phi ptr [ %133, %141 ], [ %132, %136 ]
  store i16 %146, ptr %133, align 2, !tbaa !17
  %148 = getelementptr inbounds %struct.decNumber, ptr %1, i64 0, i32 3, i64 6
  %149 = add nsw i32 %65, -7
  %150 = icmp ult i32 %149, -2
  br i1 %150, label %151, label %167, !llvm.loop !31

151:                                              ; preds = %145
  %152 = lshr i32 %106, %138
  %153 = getelementptr inbounds i32, ptr %105, i64 1
  %154 = load i32, ptr %153, align 4, !tbaa !19
  %155 = sub nsw i32 32, %138
  %156 = shl i32 %154, %155
  %157 = or i32 %156, %152
  %158 = and i32 %157, 1023
  %159 = icmp eq i32 %158, 0
  br i1 %159, label %164, label %160

160:                                              ; preds = %151
  %161 = zext i32 %158 to i64
  %162 = getelementptr inbounds [1024 x i16], ptr @DPD2BIN, i64 0, i64 %161
  %163 = load i16, ptr %162, align 2, !tbaa !17
  br label %164

164:                                              ; preds = %160, %151
  %165 = phi i16 [ %163, %160 ], [ 0, %151 ]
  %166 = phi ptr [ %148, %160 ], [ %147, %151 ]
  store i16 %165, ptr %148, align 2, !tbaa !17
  br label %167

167:                                              ; preds = %164, %145, %130, %115, %97, %83
  %168 = phi ptr [ %85, %83 ], [ %99, %97 ], [ %117, %115 ], [ %132, %130 ], [ %147, %145 ], [ %166, %164 ]
  %169 = ptrtoint ptr %168 to i64
  %170 = ptrtoint ptr %66 to i64
  %171 = sub i64 %169, %170
  %172 = lshr exact i64 %171, 1
  %173 = trunc i64 %172 to i32
  %174 = mul i32 %173, 3
  %175 = add i32 %174, 1
  store i32 %175, ptr %1, align 4, !tbaa !12
  %176 = load i16, ptr %168, align 2, !tbaa !17
  %177 = icmp ult i16 %176, 10
  br i1 %177, label %183, label %178

178:                                              ; preds = %167
  %179 = add i32 %174, 2
  store i32 %179, ptr %1, align 4, !tbaa !12
  %180 = icmp ult i16 %176, 100
  br i1 %180, label %183, label %181

181:                                              ; preds = %178
  %182 = add i32 %174, 3
  store i32 %182, ptr %1, align 4, !tbaa !12
  br label %183

183:                                              ; preds = %181, %178, %167, %55, %22
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %3) #12
  ret ptr %1
}

declare ptr @decNumberZero(ptr noundef) local_unnamed_addr #6

; Function Attrs: nofree norecurse nosync nounwind sspstrong memory(readwrite, inaccessiblemem: none) uwtable
define dso_local void @decDigitsFromDPD(ptr noundef %0, ptr nocapture noundef readonly %1, i32 noundef %2) local_unnamed_addr #9 {
  %4 = getelementptr inbounds %struct.decNumber, ptr %0, i64 0, i32 3
  %5 = icmp sgt i32 %2, 0
  br i1 %5, label %6, label %42

6:                                                ; preds = %3
  %7 = load i32, ptr %1, align 4, !tbaa !19
  br label %8

8:                                                ; preds = %6, %37
  %9 = phi i32 [ %27, %37 ], [ %7, %6 ]
  %10 = phi i32 [ %15, %37 ], [ %2, %6 ]
  %11 = phi i32 [ %30, %37 ], [ 0, %6 ]
  %12 = phi ptr [ %29, %37 ], [ %1, %6 ]
  %13 = phi ptr [ %39, %37 ], [ %4, %6 ]
  %14 = phi ptr [ %40, %37 ], [ %4, %6 ]
  %15 = add nsw i32 %10, -1
  %16 = lshr i32 %9, %11
  %17 = add nuw i32 %11, 10
  %18 = icmp ugt i32 %11, 22
  br i1 %18, label %19, label %26

19:                                               ; preds = %8
  %20 = getelementptr inbounds i32, ptr %12, i64 1
  %21 = add i32 %11, -22
  %22 = load i32, ptr %20, align 4, !tbaa !19
  %23 = sub i32 32, %11
  %24 = shl i32 %22, %23
  %25 = or i32 %24, %16
  br label %26

26:                                               ; preds = %19, %8
  %27 = phi i32 [ %22, %19 ], [ %9, %8 ]
  %28 = phi i32 [ %25, %19 ], [ %16, %8 ]
  %29 = phi ptr [ %20, %19 ], [ %12, %8 ]
  %30 = phi i32 [ %21, %19 ], [ %17, %8 ]
  %31 = and i32 %28, 1023
  %32 = icmp eq i32 %31, 0
  br i1 %32, label %37, label %33

33:                                               ; preds = %26
  %34 = zext i32 %31 to i64
  %35 = getelementptr inbounds [1024 x i16], ptr @DPD2BIN, i64 0, i64 %34
  %36 = load i16, ptr %35, align 2, !tbaa !17
  br label %37

37:                                               ; preds = %26, %33
  %38 = phi i16 [ %36, %33 ], [ 0, %26 ]
  %39 = phi ptr [ %14, %33 ], [ %13, %26 ]
  store i16 %38, ptr %14, align 2, !tbaa !17
  %40 = getelementptr inbounds i16, ptr %14, i64 1
  %41 = icmp ugt i32 %10, 1
  br i1 %41, label %8, label %42, !llvm.loop !31

42:                                               ; preds = %37, %3
  %43 = phi ptr [ %4, %3 ], [ %39, %37 ]
  %44 = ptrtoint ptr %43 to i64
  %45 = ptrtoint ptr %4 to i64
  %46 = sub i64 %44, %45
  %47 = lshr exact i64 %46, 1
  %48 = trunc i64 %47 to i32
  %49 = mul i32 %48, 3
  %50 = add i32 %49, 1
  store i32 %50, ptr %0, align 4, !tbaa !12
  %51 = load i16, ptr %43, align 2, !tbaa !17
  %52 = icmp ult i16 %51, 10
  br i1 %52, label %58, label %53

53:                                               ; preds = %42
  %54 = add i32 %49, 2
  store i32 %54, ptr %0, align 4, !tbaa !12
  %55 = icmp ult i16 %51, 100
  br i1 %55, label %58, label %56

56:                                               ; preds = %53
  %57 = add i32 %49, 3
  store i32 %57, ptr %0, align 4, !tbaa !12
  br label %58

58:                                               ; preds = %53, %42, %56
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define dso_local ptr @__dpd64ToEngString(ptr nocapture noundef readonly %0, ptr noundef returned %1) local_unnamed_addr #4 {
  %3 = alloca %struct.decNumber, align 4
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %3) #12
  %4 = call ptr @__dpd64ToNumber(ptr noundef %0, ptr noundef nonnull %3)
  %5 = call ptr @decNumberToEngString(ptr noundef nonnull %3, ptr noundef %1) #12
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %3) #12
  ret ptr %1
}

declare ptr @decNumberToEngString(ptr noundef, ptr noundef) local_unnamed_addr #6

; Function Attrs: nofree nosync nounwind sspstrong memory(readwrite, inaccessiblemem: none) uwtable
define dso_local ptr @__dpd64ToString(ptr nocapture noundef readonly %0, ptr noundef returned %1) local_unnamed_addr #7 {
  %3 = load i32, ptr %0, align 1
  %4 = getelementptr inbounds i8, ptr %0, i64 4
  %5 = load i32, ptr %4, align 1
  %6 = icmp slt i32 %5, 0
  br i1 %6, label %7, label %9

7:                                                ; preds = %2
  %8 = getelementptr inbounds i8, ptr %1, i64 1
  store i8 45, ptr %1, align 1, !tbaa !22
  br label %9

9:                                                ; preds = %7, %2
  %10 = phi ptr [ %8, %7 ], [ %1, %2 ]
  %11 = lshr i32 %5, 26
  %12 = and i32 %11, 31
  %13 = zext i32 %12 to i64
  %14 = and i32 %5, 2013265920
  %15 = icmp eq i32 %14, 2013265920
  br i1 %15, label %16, label %33

16:                                               ; preds = %9
  %17 = lshr i64 1073807617, %13
  %18 = and i64 %17, 1
  %19 = icmp eq i64 %18, 0
  br i1 %19, label %22, label %20

20:                                               ; preds = %16
  store i32 6712905, ptr %10, align 1
  %21 = getelementptr inbounds i8, ptr %10, i64 3
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 1 dereferenceable(6) %21, ptr noundef nonnull align 1 dereferenceable(6) @.str.1, i64 6, i1 false) #12
  br label %373

22:                                               ; preds = %16
  %23 = and i32 %5, 33554432
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %27, label %25

25:                                               ; preds = %22
  %26 = getelementptr inbounds i8, ptr %10, i64 1
  store i8 115, ptr %10, align 1, !tbaa !22
  br label %27

27:                                               ; preds = %25, %22
  %28 = phi ptr [ %26, %25 ], [ %10, %22 ]
  store i32 5136718, ptr %28, align 1
  %29 = getelementptr inbounds i8, ptr %28, i64 3
  %30 = and i32 %5, 262143
  %31 = or i32 %30, %3
  %32 = icmp eq i32 %31, 0
  br i1 %32, label %373, label %44

33:                                               ; preds = %9
  %34 = getelementptr inbounds [32 x i32], ptr @COMBEXP, i64 0, i64 %13
  %35 = load i32, ptr %34, align 4, !tbaa !19
  %36 = shl i32 %35, 8
  %37 = lshr i32 %5, 18
  %38 = and i32 %37, 255
  %39 = add nuw nsw i32 %38, -398
  %40 = add i32 %39, %36
  %41 = lshr i64 1073807617, %13
  %42 = and i64 %41, 1
  %43 = icmp eq i64 %42, 0
  br i1 %43, label %57, label %44

44:                                               ; preds = %33, %27
  %45 = phi i32 [ %40, %33 ], [ 0, %27 ]
  %46 = phi ptr [ %10, %33 ], [ %29, %27 ]
  %47 = lshr i32 %5, 8
  %48 = and i32 %47, 1023
  %49 = zext i32 %48 to i64
  %50 = getelementptr inbounds [1024 x i16], ptr @DPD2BIN, i64 0, i64 %49
  %51 = load i16, ptr %50, align 2, !tbaa !17
  %52 = zext i16 %51 to i64
  %53 = shl nuw nsw i64 %52, 2
  %54 = getelementptr inbounds [4001 x i8], ptr @BIN2CHAR, i64 0, i64 %53
  %55 = load i8, ptr %54, align 4, !tbaa !22
  %56 = icmp eq i8 %55, 0
  br i1 %56, label %81, label %74

57:                                               ; preds = %33
  %58 = getelementptr inbounds [32 x i32], ptr @COMBMSD, i64 0, i64 %13
  %59 = load i32, ptr %58, align 4, !tbaa !19
  %60 = trunc i32 %59 to i8
  %61 = add i8 %60, 48
  %62 = getelementptr inbounds i8, ptr %10, i64 1
  store i8 %61, ptr %10, align 1, !tbaa !22
  %63 = lshr i32 %5, 8
  %64 = and i32 %63, 1023
  %65 = zext i32 %64 to i64
  %66 = getelementptr inbounds [1024 x i16], ptr @DPD2BIN, i64 0, i64 %65
  %67 = load i16, ptr %66, align 2, !tbaa !17
  %68 = zext i16 %67 to i64
  %69 = shl nuw nsw i64 %68, 2
  %70 = getelementptr inbounds [4001 x i8], ptr @BIN2CHAR, i64 0, i64 %69
  %71 = getelementptr inbounds i8, ptr %70, i64 1
  %72 = load i32, ptr %71, align 1
  store i32 %72, ptr %62, align 1
  %73 = getelementptr inbounds i8, ptr %10, i64 4
  br label %81

74:                                               ; preds = %44
  %75 = getelementptr inbounds i8, ptr %54, i64 4
  %76 = zext i8 %55 to i64
  %77 = sub nsw i64 0, %76
  %78 = getelementptr inbounds i8, ptr %75, i64 %77
  %79 = load i32, ptr %78, align 1
  store i32 %79, ptr %46, align 1
  %80 = getelementptr inbounds i8, ptr %46, i64 %76
  br label %81

81:                                               ; preds = %44, %74, %57
  %82 = phi ptr [ %10, %57 ], [ %46, %74 ], [ %46, %44 ]
  %83 = phi i32 [ %40, %57 ], [ %45, %74 ], [ %45, %44 ]
  %84 = phi ptr [ %73, %57 ], [ %80, %74 ], [ %46, %44 ]
  %85 = shl i32 %5, 2
  %86 = and i32 %85, 1020
  %87 = lshr i32 %3, 30
  %88 = or i32 %86, %87
  %89 = zext i32 %88 to i64
  %90 = getelementptr inbounds [1024 x i16], ptr @DPD2BIN, i64 0, i64 %89
  %91 = load i16, ptr %90, align 2, !tbaa !17
  %92 = zext i16 %91 to i64
  %93 = shl nuw nsw i64 %92, 2
  %94 = getelementptr inbounds [4001 x i8], ptr @BIN2CHAR, i64 0, i64 %93
  %95 = icmp eq ptr %84, %82
  br i1 %95, label %100, label %96

96:                                               ; preds = %81
  %97 = getelementptr inbounds i8, ptr %94, i64 1
  %98 = load i32, ptr %97, align 1
  store i32 %98, ptr %84, align 1
  %99 = getelementptr inbounds i8, ptr %84, i64 3
  br label %119

100:                                              ; preds = %81
  %101 = load i8, ptr %94, align 4, !tbaa !22
  %102 = icmp eq i8 %101, 0
  br i1 %102, label %103, label %112

103:                                              ; preds = %100
  %104 = lshr i32 %3, 20
  %105 = and i32 %104, 1023
  %106 = zext i32 %105 to i64
  %107 = getelementptr inbounds [1024 x i16], ptr @DPD2BIN, i64 0, i64 %106
  %108 = load i16, ptr %107, align 2, !tbaa !17
  %109 = zext i16 %108 to i64
  %110 = shl nuw nsw i64 %109, 2
  %111 = getelementptr inbounds [4001 x i8], ptr @BIN2CHAR, i64 0, i64 %110
  br label %134

112:                                              ; preds = %100
  %113 = getelementptr inbounds i8, ptr %94, i64 4
  %114 = zext i8 %101 to i64
  %115 = sub nsw i64 0, %114
  %116 = getelementptr inbounds i8, ptr %113, i64 %115
  %117 = load i32, ptr %116, align 1
  store i32 %117, ptr %82, align 1
  %118 = getelementptr inbounds i8, ptr %82, i64 %114
  br label %119

119:                                              ; preds = %112, %96
  %120 = phi ptr [ %99, %96 ], [ %118, %112 ]
  %121 = lshr i32 %3, 20
  %122 = and i32 %121, 1023
  %123 = zext i32 %122 to i64
  %124 = getelementptr inbounds [1024 x i16], ptr @DPD2BIN, i64 0, i64 %123
  %125 = load i16, ptr %124, align 2, !tbaa !17
  %126 = zext i16 %125 to i64
  %127 = shl nuw nsw i64 %126, 2
  %128 = getelementptr inbounds [4001 x i8], ptr @BIN2CHAR, i64 0, i64 %127
  %129 = icmp eq ptr %120, %82
  br i1 %129, label %134, label %130

130:                                              ; preds = %119
  %131 = getelementptr inbounds i8, ptr %128, i64 1
  %132 = load i32, ptr %131, align 1
  store i32 %132, ptr %120, align 1
  %133 = getelementptr inbounds i8, ptr %120, i64 3
  br label %154

134:                                              ; preds = %103, %119
  %135 = phi ptr [ %111, %103 ], [ %128, %119 ]
  %136 = load i8, ptr %135, align 4, !tbaa !22
  %137 = icmp eq i8 %136, 0
  br i1 %137, label %138, label %147

138:                                              ; preds = %134
  %139 = lshr i32 %3, 10
  %140 = and i32 %139, 1023
  %141 = zext i32 %140 to i64
  %142 = getelementptr inbounds [1024 x i16], ptr @DPD2BIN, i64 0, i64 %141
  %143 = load i16, ptr %142, align 2, !tbaa !17
  %144 = zext i16 %143 to i64
  %145 = shl nuw nsw i64 %144, 2
  %146 = getelementptr inbounds [4001 x i8], ptr @BIN2CHAR, i64 0, i64 %145
  br label %169

147:                                              ; preds = %134
  %148 = getelementptr inbounds i8, ptr %135, i64 4
  %149 = zext i8 %136 to i64
  %150 = sub nsw i64 0, %149
  %151 = getelementptr inbounds i8, ptr %148, i64 %150
  %152 = load i32, ptr %151, align 1
  store i32 %152, ptr %82, align 1
  %153 = getelementptr inbounds i8, ptr %82, i64 %149
  br label %154

154:                                              ; preds = %147, %130
  %155 = phi ptr [ %133, %130 ], [ %153, %147 ]
  %156 = lshr i32 %3, 10
  %157 = and i32 %156, 1023
  %158 = zext i32 %157 to i64
  %159 = getelementptr inbounds [1024 x i16], ptr @DPD2BIN, i64 0, i64 %158
  %160 = load i16, ptr %159, align 2, !tbaa !17
  %161 = zext i16 %160 to i64
  %162 = shl nuw nsw i64 %161, 2
  %163 = getelementptr inbounds [4001 x i8], ptr @BIN2CHAR, i64 0, i64 %162
  %164 = icmp eq ptr %155, %82
  br i1 %164, label %169, label %165

165:                                              ; preds = %154
  %166 = getelementptr inbounds i8, ptr %163, i64 1
  %167 = load i32, ptr %166, align 1
  store i32 %167, ptr %155, align 1
  %168 = getelementptr inbounds i8, ptr %155, i64 3
  br label %188

169:                                              ; preds = %138, %154
  %170 = phi ptr [ %146, %138 ], [ %163, %154 ]
  %171 = load i8, ptr %170, align 4, !tbaa !22
  %172 = icmp eq i8 %171, 0
  br i1 %172, label %173, label %181

173:                                              ; preds = %169
  %174 = and i32 %3, 1023
  %175 = zext i32 %174 to i64
  %176 = getelementptr inbounds [1024 x i16], ptr @DPD2BIN, i64 0, i64 %175
  %177 = load i16, ptr %176, align 2, !tbaa !17
  %178 = zext i16 %177 to i64
  %179 = shl nuw nsw i64 %178, 2
  %180 = getelementptr inbounds [4001 x i8], ptr @BIN2CHAR, i64 0, i64 %179
  br label %202

181:                                              ; preds = %169
  %182 = getelementptr inbounds i8, ptr %170, i64 4
  %183 = zext i8 %171 to i64
  %184 = sub nsw i64 0, %183
  %185 = getelementptr inbounds i8, ptr %182, i64 %184
  %186 = load i32, ptr %185, align 1
  store i32 %186, ptr %82, align 1
  %187 = getelementptr inbounds i8, ptr %82, i64 %183
  br label %188

188:                                              ; preds = %181, %165
  %189 = phi ptr [ %168, %165 ], [ %187, %181 ]
  %190 = and i32 %3, 1023
  %191 = zext i32 %190 to i64
  %192 = getelementptr inbounds [1024 x i16], ptr @DPD2BIN, i64 0, i64 %191
  %193 = load i16, ptr %192, align 2, !tbaa !17
  %194 = zext i16 %193 to i64
  %195 = shl nuw nsw i64 %194, 2
  %196 = getelementptr inbounds [4001 x i8], ptr @BIN2CHAR, i64 0, i64 %195
  %197 = icmp eq ptr %189, %82
  br i1 %197, label %202, label %198

198:                                              ; preds = %188
  %199 = getelementptr inbounds i8, ptr %196, i64 1
  %200 = load i32, ptr %199, align 1
  store i32 %200, ptr %189, align 1
  %201 = getelementptr inbounds i8, ptr %189, i64 3
  br label %213

202:                                              ; preds = %173, %188
  %203 = phi ptr [ %180, %173 ], [ %196, %188 ]
  %204 = load i8, ptr %203, align 4, !tbaa !22
  %205 = icmp eq i8 %204, 0
  br i1 %205, label %216, label %206

206:                                              ; preds = %202
  %207 = getelementptr inbounds i8, ptr %203, i64 4
  %208 = zext i8 %204 to i64
  %209 = sub nsw i64 0, %208
  %210 = getelementptr inbounds i8, ptr %207, i64 %209
  %211 = load i32, ptr %210, align 1
  store i32 %211, ptr %82, align 1
  %212 = getelementptr inbounds i8, ptr %82, i64 %208
  br label %213

213:                                              ; preds = %206, %198
  %214 = phi ptr [ %201, %198 ], [ %212, %206 ]
  %215 = icmp eq ptr %214, %82
  br i1 %215, label %216, label %218

216:                                              ; preds = %202, %213
  %217 = getelementptr inbounds i8, ptr %82, i64 1
  store i8 48, ptr %82, align 1, !tbaa !22
  br label %218

218:                                              ; preds = %216, %213
  %219 = phi ptr [ %217, %216 ], [ %214, %213 ]
  %220 = icmp eq i32 %83, 0
  br i1 %220, label %221, label %222

221:                                              ; preds = %218
  store i8 0, ptr %219, align 1, !tbaa !22
  br label %373

222:                                              ; preds = %218
  %223 = ptrtoint ptr %219 to i64
  %224 = ptrtoint ptr %82 to i64
  %225 = sub i64 %223, %224
  %226 = trunc i64 %225 to i32
  %227 = add i32 %83, %226
  %228 = icmp sgt i32 %83, 0
  %229 = icmp slt i32 %227, -5
  %230 = select i1 %228, i1 true, i1 %229
  %231 = add nsw i32 %227, -1
  %232 = select i1 %230, i32 1, i32 %227
  %233 = select i1 %230, i32 %231, i32 0
  %234 = getelementptr i8, ptr %219, i64 -1
  %235 = icmp sgt i32 %232, 0
  br i1 %235, label %236, label %275

236:                                              ; preds = %222
  %237 = zext i32 %232 to i64
  %238 = getelementptr inbounds i8, ptr %82, i64 %237
  %239 = icmp ult ptr %238, %219
  br i1 %239, label %240, label %252

240:                                              ; preds = %236
  %241 = icmp ult ptr %234, %238
  br i1 %241, label %249, label %242

242:                                              ; preds = %240, %242
  %243 = phi ptr [ %247, %242 ], [ %219, %240 ]
  %244 = phi ptr [ %246, %242 ], [ %234, %240 ]
  %245 = load i8, ptr %244, align 1, !tbaa !22
  store i8 %245, ptr %243, align 1, !tbaa !22
  %246 = getelementptr inbounds i8, ptr %244, i64 -1
  %247 = getelementptr inbounds i8, ptr %243, i64 -1
  %248 = icmp ult ptr %246, %238
  br i1 %248, label %249, label %242, !llvm.loop !32

249:                                              ; preds = %242, %240
  %250 = phi ptr [ %219, %240 ], [ %247, %242 ]
  store i8 46, ptr %250, align 1, !tbaa !22
  %251 = getelementptr inbounds i8, ptr %219, i64 1
  br label %252

252:                                              ; preds = %249, %236
  %253 = phi ptr [ %251, %249 ], [ %219, %236 ]
  %254 = icmp eq i32 %233, 0
  br i1 %254, label %273, label %255

255:                                              ; preds = %252
  %256 = getelementptr inbounds i8, ptr %253, i64 1
  store i8 69, ptr %253, align 1, !tbaa !22
  %257 = getelementptr inbounds i8, ptr %253, i64 2
  store i8 43, ptr %256, align 1, !tbaa !22
  %258 = icmp slt i32 %233, 0
  br i1 %258, label %259, label %261

259:                                              ; preds = %255
  store i8 45, ptr %256, align 1, !tbaa !22
  %260 = sub nsw i32 0, %233
  br label %261

261:                                              ; preds = %259, %255
  %262 = phi i32 [ %260, %259 ], [ %231, %255 ]
  %263 = shl nsw i32 %262, 2
  %264 = sext i32 %263 to i64
  %265 = getelementptr inbounds [4001 x i8], ptr @BIN2CHAR, i64 0, i64 %264
  %266 = getelementptr inbounds i8, ptr %265, i64 4
  %267 = load i8, ptr %265, align 4, !tbaa !22
  %268 = zext i8 %267 to i64
  %269 = sub nsw i64 0, %268
  %270 = getelementptr inbounds i8, ptr %266, i64 %269
  %271 = load i32, ptr %270, align 1
  store i32 %271, ptr %257, align 1
  %272 = getelementptr inbounds i8, ptr %257, i64 %268
  br label %273

273:                                              ; preds = %261, %252
  %274 = phi ptr [ %272, %261 ], [ %253, %252 ]
  store i8 0, ptr %274, align 1, !tbaa !22
  br label %373

275:                                              ; preds = %222
  %276 = getelementptr inbounds i8, ptr %219, i64 1
  %277 = sext i32 %232 to i64
  %278 = sub nsw i64 0, %277
  %279 = getelementptr inbounds i8, ptr %276, i64 %278
  %280 = getelementptr inbounds i8, ptr %279, i64 1
  store i8 0, ptr %280, align 1, !tbaa !22
  %281 = icmp ult ptr %234, %82
  br i1 %281, label %365, label %282

282:                                              ; preds = %275
  %283 = sub i64 0, %224
  %284 = sub i64 1, %223
  %285 = tail call i64 @llvm.umax.i64(i64 %283, i64 %284)
  %286 = add i64 %285, %223
  %287 = icmp ult i64 %286, 8
  br i1 %287, label %355, label %288

288:                                              ; preds = %282
  %289 = add i64 %223, -2
  %290 = add i64 %224, -1
  %291 = tail call i64 @llvm.usub.sat.i64(i64 %289, i64 %290)
  %292 = sub i64 0, %291
  %293 = getelementptr i8, ptr %279, i64 %292
  %294 = icmp ugt ptr %293, %279
  %295 = sub i64 0, %291
  %296 = getelementptr i8, ptr %234, i64 %295
  %297 = icmp ugt ptr %296, %234
  %298 = or i1 %294, %297
  %299 = add nsw i64 %277, -2
  %300 = icmp ult i64 %299, 64
  %301 = select i1 %298, i1 true, i1 %300
  br i1 %301, label %355, label %302

302:                                              ; preds = %288
  %303 = icmp ult i64 %286, 64
  br i1 %303, label %335, label %304

304:                                              ; preds = %302
  %305 = and i64 %286, -64
  br label %306

306:                                              ; preds = %306, %304
  %307 = phi i64 [ 0, %304 ], [ %324, %306 ]
  %308 = sub i64 0, %307
  %309 = getelementptr i8, ptr %279, i64 %308
  %310 = sub i64 0, %307
  %311 = getelementptr i8, ptr %234, i64 %310
  %312 = getelementptr i8, ptr %311, i64 -15
  %313 = load <16 x i8>, ptr %312, align 1, !tbaa !22
  %314 = getelementptr i8, ptr %311, i64 -31
  %315 = load <16 x i8>, ptr %314, align 1, !tbaa !22
  %316 = getelementptr i8, ptr %311, i64 -47
  %317 = load <16 x i8>, ptr %316, align 1, !tbaa !22
  %318 = getelementptr i8, ptr %311, i64 -63
  %319 = load <16 x i8>, ptr %318, align 1, !tbaa !22
  %320 = getelementptr i8, ptr %309, i64 -15
  store <16 x i8> %313, ptr %320, align 1, !tbaa !22
  %321 = getelementptr i8, ptr %309, i64 -31
  store <16 x i8> %315, ptr %321, align 1, !tbaa !22
  %322 = getelementptr i8, ptr %309, i64 -47
  store <16 x i8> %317, ptr %322, align 1, !tbaa !22
  %323 = getelementptr i8, ptr %309, i64 -63
  store <16 x i8> %319, ptr %323, align 1, !tbaa !22
  %324 = add nuw i64 %307, 64
  %325 = icmp eq i64 %324, %305
  br i1 %325, label %326, label %306, !llvm.loop !33

326:                                              ; preds = %306
  %327 = icmp eq i64 %286, %305
  br i1 %327, label %365, label %328

328:                                              ; preds = %326
  %329 = sub i64 0, %305
  %330 = getelementptr i8, ptr %234, i64 %329
  %331 = sub i64 0, %305
  %332 = getelementptr i8, ptr %279, i64 %331
  %333 = and i64 %286, 56
  %334 = icmp eq i64 %333, 0
  br i1 %334, label %355, label %335

335:                                              ; preds = %302, %328
  %336 = phi i64 [ %305, %328 ], [ 0, %302 ]
  %337 = and i64 %286, -8
  %338 = sub i64 0, %337
  %339 = getelementptr i8, ptr %279, i64 %338
  %340 = sub i64 0, %337
  %341 = getelementptr i8, ptr %234, i64 %340
  %342 = getelementptr i8, ptr %234, i64 -7
  %343 = getelementptr i8, ptr %279, i64 -7
  br label %344

344:                                              ; preds = %344, %335
  %345 = phi i64 [ %336, %335 ], [ %351, %344 ]
  %346 = sub i64 0, %345
  %347 = sub i64 0, %345
  %348 = getelementptr i8, ptr %342, i64 %347
  %349 = load <8 x i8>, ptr %348, align 1, !tbaa !22
  %350 = getelementptr i8, ptr %343, i64 %346
  store <8 x i8> %349, ptr %350, align 1, !tbaa !22
  %351 = add nuw i64 %345, 8
  %352 = icmp eq i64 %351, %337
  br i1 %352, label %353, label %344, !llvm.loop !34

353:                                              ; preds = %344
  %354 = icmp eq i64 %286, %337
  br i1 %354, label %365, label %355

355:                                              ; preds = %288, %282, %328, %353
  %356 = phi ptr [ %279, %282 ], [ %279, %288 ], [ %332, %328 ], [ %339, %353 ]
  %357 = phi ptr [ %234, %282 ], [ %234, %288 ], [ %330, %328 ], [ %341, %353 ]
  br label %358

358:                                              ; preds = %355, %358
  %359 = phi ptr [ %363, %358 ], [ %356, %355 ]
  %360 = phi ptr [ %362, %358 ], [ %357, %355 ]
  %361 = load i8, ptr %360, align 1, !tbaa !22
  store i8 %361, ptr %359, align 1, !tbaa !22
  %362 = getelementptr inbounds i8, ptr %360, i64 -1
  %363 = getelementptr inbounds i8, ptr %359, i64 -1
  %364 = icmp ult ptr %362, %82
  br i1 %364, label %365, label %358, !llvm.loop !35

365:                                              ; preds = %358, %326, %353, %275
  %366 = getelementptr inbounds i8, ptr %82, i64 1
  store i8 48, ptr %82, align 1, !tbaa !22
  store i8 46, ptr %366, align 1, !tbaa !22
  %367 = icmp slt i32 %232, 0
  br i1 %367, label %368, label %373

368:                                              ; preds = %365
  %369 = getelementptr i8, ptr %82, i64 2
  %370 = xor i32 %232, -1
  %371 = zext i32 %370 to i64
  %372 = add nuw nsw i64 %371, 1
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 1 dereferenceable(1) %369, i8 48, i64 %372, i1 false), !tbaa !22
  br label %373

373:                                              ; preds = %368, %365, %27, %273, %221, %20
  ret ptr %1
}

; Function Attrs: nounwind sspstrong uwtable
define dso_local ptr @__dpd64FromString(ptr noundef returned %0, ptr noundef %1, ptr noundef %2) local_unnamed_addr #4 {
  %4 = alloca %struct.decContext, align 4
  %5 = alloca %struct.decNumber, align 4
  call void @llvm.lifetime.start.p0(i64 28, ptr nonnull %4) #12
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %5) #12
  %6 = call ptr @decContextDefault(ptr noundef nonnull %4, i32 noundef 64) #12
  %7 = getelementptr inbounds %struct.decContext, ptr %2, i64 0, i32 3
  %8 = load i32, ptr %7, align 4, !tbaa !14
  %9 = getelementptr inbounds %struct.decContext, ptr %4, i64 0, i32 3
  store i32 %8, ptr %9, align 4, !tbaa !14
  %10 = call ptr @decNumberFromString(ptr noundef nonnull %5, ptr noundef %1, ptr noundef nonnull %4) #12
  %11 = call ptr @__dpd64FromNumber(ptr noundef %0, ptr noundef nonnull %5, ptr noundef nonnull %4)
  %12 = getelementptr inbounds %struct.decContext, ptr %4, i64 0, i32 5
  %13 = load i32, ptr %12, align 4, !tbaa !16
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %17, label %15

15:                                               ; preds = %3
  %16 = call ptr @decContextSetStatus(ptr noundef nonnull %2, i32 noundef %13) #12
  br label %17

17:                                               ; preds = %15, %3
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %5) #12
  call void @llvm.lifetime.end.p0(i64 28, ptr nonnull %4) #12
  ret ptr %0
}

declare ptr @decNumberFromString(ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #6

; Function Attrs: nounwind sspstrong uwtable
define dso_local i32 @decimal64IsCanonical(ptr nocapture noundef readonly %0) local_unnamed_addr #4 {
  %2 = alloca %struct.decNumber, align 4
  %3 = alloca %struct.decimal64, align 1
  %4 = alloca %struct.decContext, align 4
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %2) #12
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %3) #12
  call void @llvm.lifetime.start.p0(i64 28, ptr nonnull %4) #12
  %5 = call ptr @decContextDefault(ptr noundef nonnull %4, i32 noundef 64) #12
  %6 = call ptr @__dpd64ToNumber(ptr noundef %0, ptr noundef nonnull %2)
  %7 = call ptr @__dpd64FromNumber(ptr noundef nonnull %3, ptr noundef nonnull %2, ptr noundef nonnull %4)
  %8 = call i32 @bcmp(ptr noundef nonnull dereferenceable(8) %0, ptr noundef nonnull dereferenceable(8) %3, i64 8)
  %9 = icmp eq i32 %8, 0
  %10 = zext i1 %9 to i32
  call void @llvm.lifetime.end.p0(i64 28, ptr nonnull %4) #12
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %3) #12
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %2) #12
  ret i32 %10
}

; Function Attrs: nounwind sspstrong uwtable
define dso_local ptr @decimal64Canonical(ptr noundef returned %0, ptr nocapture noundef readonly %1) local_unnamed_addr #4 {
  %3 = alloca %struct.decNumber, align 4
  %4 = alloca %struct.decContext, align 4
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %3) #12
  call void @llvm.lifetime.start.p0(i64 28, ptr nonnull %4) #12
  %5 = call ptr @decContextDefault(ptr noundef nonnull %4, i32 noundef 64) #12
  %6 = call ptr @__dpd64ToNumber(ptr noundef %1, ptr noundef nonnull %3)
  %7 = call ptr @__dpd64FromNumber(ptr noundef %0, ptr noundef nonnull %3, ptr noundef nonnull %4)
  call void @llvm.lifetime.end.p0(i64 28, ptr nonnull %4) #12
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %3) #12
  ret ptr %0
}

; Function Attrs: nounwind sspstrong uwtable
define dso_local ptr @decimal64FromNumber(ptr noundef returned %0, ptr noundef %1, ptr noundef %2) local_unnamed_addr #4 {
  %4 = alloca %union.anon, align 8
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %4) #12
  %5 = tail call ptr @__dpd64FromNumber(ptr noundef %0, ptr noundef %1, ptr noundef %2)
  %6 = load i64, ptr %0, align 1
  call void @__ieee_to_host_64(i64 %6, ptr noundef nonnull %4) #12
  call void @_dpd_to_bid64(ptr noundef nonnull %4, ptr noundef nonnull %4) #12
  %7 = load i64, ptr %4, align 8, !tbaa !22
  call void @__host_to_ieee_64(i64 noundef %7, ptr noundef nonnull %4) #12
  %8 = load i64, ptr %4, align 8, !tbaa !22
  store i64 %8, ptr %0, align 1, !tbaa !22
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %4) #12
  ret ptr %0
}

declare void @__ieee_to_host_64(i64, ptr noundef) local_unnamed_addr #6

declare void @_dpd_to_bid64(ptr noundef, ptr noundef) local_unnamed_addr #6

declare void @__host_to_ieee_64(i64 noundef, ptr noundef) local_unnamed_addr #6

; Function Attrs: nounwind sspstrong uwtable
define dso_local ptr @decimal64ToNumber(ptr nocapture noundef readonly %0, ptr noundef returned %1) local_unnamed_addr #4 {
  %3 = alloca %union.anon.0, align 8
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %3) #12
  %4 = load i64, ptr %0, align 1
  call void @__ieee_to_host_64(i64 %4, ptr noundef nonnull %3) #12
  call void @_bid_to_dpd64(ptr noundef nonnull %3, ptr noundef nonnull %3) #12
  %5 = load i64, ptr %3, align 8, !tbaa !22
  call void @__host_to_ieee_64(i64 noundef %5, ptr noundef nonnull %3) #12
  %6 = call ptr @__dpd64ToNumber(ptr noundef nonnull %3, ptr noundef %1)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %3) #12
  ret ptr %1
}

declare void @_bid_to_dpd64(ptr noundef, ptr noundef) local_unnamed_addr #6

; Function Attrs: nounwind sspstrong uwtable
define dso_local ptr @decimal64ToString(ptr nocapture noundef readonly %0, ptr noundef returned %1) local_unnamed_addr #4 {
  %3 = alloca %union.anon.0, align 8
  %4 = alloca %struct.decNumber, align 4
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %4) #12
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %3) #12
  %5 = load i64, ptr %0, align 1
  call void @__ieee_to_host_64(i64 %5, ptr noundef nonnull %3) #12
  call void @_bid_to_dpd64(ptr noundef nonnull %3, ptr noundef nonnull %3) #12
  %6 = load i64, ptr %3, align 8, !tbaa !22
  call void @__host_to_ieee_64(i64 noundef %6, ptr noundef nonnull %3) #12
  %7 = call ptr @__dpd64ToNumber(ptr noundef nonnull %3, ptr noundef nonnull %4)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %3) #12
  %8 = call ptr @decNumberToString(ptr noundef nonnull %4, ptr noundef %1) #12
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %4) #12
  ret ptr %1
}

declare ptr @decNumberToString(ptr noundef, ptr noundef) local_unnamed_addr #6

; Function Attrs: nounwind sspstrong uwtable
define dso_local ptr @decimal64ToEngString(ptr nocapture noundef readonly %0, ptr noundef returned %1) local_unnamed_addr #4 {
  %3 = alloca %union.anon.0, align 8
  %4 = alloca %struct.decNumber, align 4
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %4) #12
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %3) #12
  %5 = load i64, ptr %0, align 1
  call void @__ieee_to_host_64(i64 %5, ptr noundef nonnull %3) #12
  call void @_bid_to_dpd64(ptr noundef nonnull %3, ptr noundef nonnull %3) #12
  %6 = load i64, ptr %3, align 8, !tbaa !22
  call void @__host_to_ieee_64(i64 noundef %6, ptr noundef nonnull %3) #12
  %7 = call ptr @__dpd64ToNumber(ptr noundef nonnull %3, ptr noundef nonnull %4)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %3) #12
  %8 = call ptr @decNumberToEngString(ptr noundef nonnull %4, ptr noundef %1) #12
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %4) #12
  ret ptr %1
}

; Function Attrs: nounwind sspstrong uwtable
define dso_local ptr @decimal64FromString(ptr noundef returned %0, ptr noundef %1, ptr noundef %2) local_unnamed_addr #4 {
  %4 = alloca %union.anon, align 8
  %5 = alloca %struct.decContext, align 4
  %6 = alloca %struct.decNumber, align 4
  call void @llvm.lifetime.start.p0(i64 28, ptr nonnull %5) #12
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %6) #12
  %7 = call ptr @decContextDefault(ptr noundef nonnull %5, i32 noundef 64) #12
  %8 = getelementptr inbounds %struct.decContext, ptr %2, i64 0, i32 3
  %9 = load i32, ptr %8, align 4, !tbaa !14
  %10 = getelementptr inbounds %struct.decContext, ptr %5, i64 0, i32 3
  store i32 %9, ptr %10, align 4, !tbaa !14
  %11 = call ptr @decNumberFromString(ptr noundef nonnull %6, ptr noundef %1, ptr noundef nonnull %5) #12
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %4) #12
  %12 = call ptr @__dpd64FromNumber(ptr noundef %0, ptr noundef nonnull %6, ptr noundef nonnull %5)
  %13 = load i64, ptr %0, align 1
  call void @__ieee_to_host_64(i64 %13, ptr noundef nonnull %4) #12
  call void @_dpd_to_bid64(ptr noundef nonnull %4, ptr noundef nonnull %4) #12
  %14 = load i64, ptr %4, align 8, !tbaa !22
  call void @__host_to_ieee_64(i64 noundef %14, ptr noundef nonnull %4) #12
  %15 = load i64, ptr %4, align 8, !tbaa !22
  store i64 %15, ptr %0, align 1, !tbaa !22
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %4) #12
  %16 = getelementptr inbounds %struct.decContext, ptr %5, i64 0, i32 5
  %17 = load i32, ptr %16, align 4, !tbaa !16
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %21, label %19

19:                                               ; preds = %3
  %20 = call ptr @decContextSetStatus(ptr noundef nonnull %2, i32 noundef %17) #12
  br label %21

21:                                               ; preds = %19, %3
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %6) #12
  call void @llvm.lifetime.end.p0(i64 28, ptr nonnull %5) #12
  ret ptr %0
}

; Function Attrs: nofree nounwind willreturn memory(argmem: read)
declare i32 @bcmp(ptr nocapture, ptr nocapture, i64) local_unnamed_addr #10

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.umin.i32(i32, i32) #11

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i64 @llvm.umax.i64(i64, i64) #11

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i64 @llvm.usub.sat.i64(i64, i64) #11

attributes #0 = { inlinehint mustprogress nofree nounwind sspstrong willreturn uwtable "approx-func-fp-math"="true" "denormal-fp-math"="preserve-sign,preserve-sign" "min-legal-vector-width"="0" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cmov,+crc32,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" "unsafe-fp-math"="true" }
attributes #1 = { mustprogress nofree nounwind willreturn "approx-func-fp-math"="true" "denormal-fp-math"="preserve-sign,preserve-sign" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cmov,+crc32,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" "unsafe-fp-math"="true" }
attributes #2 = { inlinehint nounwind sspstrong uwtable "approx-func-fp-math"="true" "denormal-fp-math"="preserve-sign,preserve-sign" "min-legal-vector-width"="0" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cmov,+crc32,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" "unsafe-fp-math"="true" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: readwrite) }
attributes #4 = { nounwind sspstrong uwtable "approx-func-fp-math"="true" "denormal-fp-math"="preserve-sign,preserve-sign" "min-legal-vector-width"="0" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cmov,+crc32,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" "unsafe-fp-math"="true" }
attributes #5 = { mustprogress nocallback nofree nounwind willreturn memory(argmem: write) }
attributes #6 = { "approx-func-fp-math"="true" "denormal-fp-math"="preserve-sign,preserve-sign" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cmov,+crc32,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" "unsafe-fp-math"="true" }
attributes #7 = { nofree nosync nounwind sspstrong memory(readwrite, inaccessiblemem: none) uwtable "approx-func-fp-math"="true" "denormal-fp-math"="preserve-sign,preserve-sign" "min-legal-vector-width"="0" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cmov,+crc32,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" "unsafe-fp-math"="true" }
attributes #8 = { mustprogress nocallback nofree nounwind willreturn memory(argmem: readwrite) }
attributes #9 = { nofree norecurse nosync nounwind sspstrong memory(readwrite, inaccessiblemem: none) uwtable "approx-func-fp-math"="true" "denormal-fp-math"="preserve-sign,preserve-sign" "min-legal-vector-width"="0" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cmov,+crc32,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" "unsafe-fp-math"="true" }
attributes #10 = { nofree nounwind willreturn memory(argmem: read) }
attributes #11 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #12 = { nounwind }

!llvm.module.flags = !{!0, !1, !2, !3}
!llvm.ident = !{!4}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 8, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{i32 7, !"uwtable", i32 2}
!4 = !{!"clang version 17.0.6"}
!5 = distinct !{!5, !6}
!6 = !{!"llvm.loop.mustprogress"}
!7 = !{!8, !9, i64 4}
!8 = !{!"", !9, i64 0, !9, i64 4, !10, i64 8, !10, i64 10}
!9 = !{!"int", !10, i64 0}
!10 = !{!"omnipotent char", !11, i64 0}
!11 = !{!"Simple C/C++ TBAA"}
!12 = !{!8, !9, i64 0}
!13 = !{!8, !10, i64 8}
!14 = !{!15, !10, i64 12}
!15 = !{!"", !9, i64 0, !9, i64 4, !9, i64 8, !10, i64 12, !9, i64 16, !9, i64 20, !10, i64 24}
!16 = !{!15, !9, i64 20}
!17 = !{!18, !18, i64 0}
!18 = !{!"short", !10, i64 0}
!19 = !{!9, !9, i64 0}
!20 = distinct !{!20, !6}
!21 = distinct !{!21, !6}
!22 = !{!10, !10, i64 0}
!23 = distinct !{!23, !6}
!24 = distinct !{!24, !6}
!25 = distinct !{!25, !6, !26, !27, !28}
!26 = !{!"llvm.loop.peeled.count", i32 1}
!27 = !{!"llvm.loop.isvectorized", i32 1}
!28 = !{!"llvm.loop.unroll.runtime.disable"}
!29 = distinct !{!29, !6, !26, !27, !28}
!30 = distinct !{!30, !6, !26, !28, !27}
!31 = distinct !{!31, !6}
!32 = distinct !{!32, !6}
!33 = distinct !{!33, !6, !27, !28}
!34 = distinct !{!34, !6, !27, !28}
!35 = distinct !{!35, !6, !27}
